
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/json_test_uq_off:     file format elf32-littlearm


Disassembly of section .init:

000144d4 <.init>:
   144d4:	push	{r3, lr}
   144d8:	bl	14d1c <_start@@Base+0x3c>
   144dc:	pop	{r3, pc}

Disassembly of section .plt:

000144e0 <raise@plt-0x14>:
   144e0:	push	{lr}		; (str lr, [sp, #-4]!)
   144e4:	ldr	lr, [pc, #4]	; 144f0 <raise@plt-0x4>
   144e8:	add	lr, pc, lr
   144ec:	ldr	pc, [lr, #8]!
   144f0:	andeq	r3, r4, r0, lsl fp

000144f4 <raise@plt>:
   144f4:	add	ip, pc, #0, 12
   144f8:	add	ip, ip, #274432	; 0x43000
   144fc:	ldr	pc, [ip, #2832]!	; 0xb10

00014500 <strcmp@plt>:
   14500:	add	ip, pc, #0, 12
   14504:	add	ip, ip, #274432	; 0x43000
   14508:	ldr	pc, [ip, #2824]!	; 0xb08

0001450c <memmove@plt>:
   1450c:	add	ip, pc, #0, 12
   14510:	add	ip, ip, #274432	; 0x43000
   14514:	ldr	pc, [ip, #2816]!	; 0xb00

00014518 <free@plt>:
   14518:	add	ip, pc, #0, 12
   1451c:	add	ip, ip, #274432	; 0x43000
   14520:	ldr	pc, [ip, #2808]!	; 0xaf8

00014524 <memcpy@plt>:
   14524:	add	ip, pc, #0, 12
   14528:	add	ip, ip, #274432	; 0x43000
   1452c:	ldr	pc, [ip, #2800]!	; 0xaf0

00014530 <memcmp@plt>:
   14530:	add	ip, pc, #0, 12
   14534:	add	ip, ip, #274432	; 0x43000
   14538:	ldr	pc, [ip, #2792]!	; 0xae8

0001453c <realloc@plt>:
   1453c:	add	ip, pc, #0, 12
   14540:	add	ip, ip, #274432	; 0x43000
   14544:	ldr	pc, [ip, #2784]!	; 0xae0

00014548 <fwrite@plt>:
   14548:	add	ip, pc, #0, 12
   1454c:	add	ip, ip, #274432	; 0x43000
   14550:	ldr	pc, [ip, #2776]!	; 0xad8

00014554 <malloc@plt>:
   14554:	add	ip, pc, #0, 12
   14558:	add	ip, ip, #274432	; 0x43000
   1455c:	ldr	pc, [ip, #2768]!	; 0xad0

00014560 <__libc_start_main@plt>:
   14560:	add	ip, pc, #0, 12
   14564:	add	ip, ip, #274432	; 0x43000
   14568:	ldr	pc, [ip, #2760]!	; 0xac8

0001456c <__gmon_start__@plt>:
   1456c:	add	ip, pc, #0, 12
   14570:	add	ip, ip, #274432	; 0x43000
   14574:	ldr	pc, [ip, #2752]!	; 0xac0

00014578 <strlen@plt>:
   14578:	add	ip, pc, #0, 12
   1457c:	add	ip, ip, #274432	; 0x43000
   14580:	ldr	pc, [ip, #2744]!	; 0xab8

00014584 <fprintf@plt>:
   14584:	add	ip, pc, #0, 12
   14588:	add	ip, ip, #274432	; 0x43000
   1458c:	ldr	pc, [ip, #2736]!	; 0xab0

00014590 <posix_memalign@plt>:
   14590:	add	ip, pc, #0, 12
   14594:	add	ip, ip, #274432	; 0x43000
   14598:	ldr	pc, [ip, #2728]!	; 0xaa8

0001459c <memset@plt>:
   1459c:	add	ip, pc, #0, 12
   145a0:	add	ip, ip, #274432	; 0x43000
   145a4:	ldr	pc, [ip, #2720]!	; 0xaa0

000145a8 <strncpy@plt>:
   145a8:	add	ip, pc, #0, 12
   145ac:	add	ip, ip, #274432	; 0x43000
   145b0:	ldr	pc, [ip, #2712]!	; 0xa98

000145b4 <strtod@plt>:
   145b4:	add	ip, pc, #0, 12
   145b8:	add	ip, ip, #274432	; 0x43000
   145bc:	ldr	pc, [ip, #2704]!	; 0xa90

000145c0 <memchr@plt>:
   145c0:	add	ip, pc, #0, 12
   145c4:	add	ip, ip, #274432	; 0x43000
   145c8:	ldr	pc, [ip, #2696]!	; 0xa88

000145cc <fputc@plt>:
   145cc:	add	ip, pc, #0, 12
   145d0:	add	ip, ip, #274432	; 0x43000
   145d4:	ldr	pc, [ip, #2688]!	; 0xa80

000145d8 <sprintf@plt>:
   145d8:	add	ip, pc, #0, 12
   145dc:	add	ip, ip, #274432	; 0x43000
   145e0:	ldr	pc, [ip, #2680]!	; 0xa78

000145e4 <abort@plt>:
   145e4:	add	ip, pc, #0, 12
   145e8:	add	ip, ip, #274432	; 0x43000
   145ec:	ldr	pc, [ip, #2672]!	; 0xa70

000145f0 <__assert_fail@plt>:
   145f0:	add	ip, pc, #0, 12
   145f4:	add	ip, ip, #274432	; 0x43000
   145f8:	ldr	pc, [ip, #2664]!	; 0xa68

Disassembly of section .text:

00014600 <main@@Base>:
   14600:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14604:	mov	r5, #0
   14608:	strd	r6, [sp, #8]
   1460c:	movw	r7, #10772	; 0x2a14
   14610:	movt	r7, #4
   14614:	strd	r8, [sp, #16]
   14618:	movw	r6, #8980	; 0x2314
   1461c:	movt	r6, #4
   14620:	strd	sl, [sp, #24]
   14624:	movw	fp, #17388	; 0x43ec
   14628:	movt	fp, #4
   1462c:	str	lr, [sp, #32]
   14630:	sub	sp, sp, #12
   14634:	movw	r9, #17464	; 0x4438
   14638:	movt	r9, #4
   1463c:	movw	r8, #17540	; 0x4484
   14640:	movt	r8, #4
   14644:	movw	sl, #18312	; 0x4788
   14648:	movt	sl, #4
   1464c:	bl	24540 <edge_case_tests@@Base>
   14650:	mov	r4, r0
   14654:	bl	2470c <error_case_tests@@Base>
   14658:	orr	r4, r4, r0
   1465c:	bl	24b3c <union_vector_tests@@Base>
   14660:	orr	r4, r4, r0
   14664:	bl	24870 <base64_tests@@Base>
   14668:	orr	r4, r4, r0
   1466c:	bl	249e0 <mixed_type_union_tests@@Base>
   14670:	movw	r1, #525	; 0x20d
   14674:	mov	r2, r7
   14678:	str	r5, [sp]
   1467c:	mov	r3, r5
   14680:	orr	r4, r4, r0
   14684:	mov	r0, r6
   14688:	str	r1, [sp, #4]
   1468c:	movw	r1, #17364	; 0x43d4
   14690:	movt	r1, #4
   14694:	bl	18208 <_start@@Base+0x3528>
   14698:	mov	r1, #528	; 0x210
   1469c:	mov	r3, r5
   146a0:	str	r5, [sp]
   146a4:	mov	r2, fp
   146a8:	orr	r4, r4, r0
   146ac:	mov	r0, r6
   146b0:	str	r1, [sp, #4]
   146b4:	movw	r1, #17424	; 0x4410
   146b8:	movt	r1, #4
   146bc:	bl	18208 <_start@@Base+0x3528>
   146c0:	movw	r1, #531	; 0x213
   146c4:	mov	r3, r5
   146c8:	str	r5, [sp]
   146cc:	mov	r2, r9
   146d0:	orr	r4, r4, r0
   146d4:	mov	r0, r6
   146d8:	str	r1, [sp, #4]
   146dc:	movw	r1, #17500	; 0x445c
   146e0:	movt	r1, #4
   146e4:	bl	18208 <_start@@Base+0x3528>
   146e8:	movw	r1, #534	; 0x216
   146ec:	mov	r3, r5
   146f0:	str	r5, [sp]
   146f4:	mov	r2, r8
   146f8:	orr	r4, r4, r0
   146fc:	mov	r0, r6
   14700:	str	r1, [sp, #4]
   14704:	movw	r1, #17584	; 0x44b0
   14708:	movt	r1, #4
   1470c:	bl	18208 <_start@@Base+0x3528>
   14710:	movw	r1, #537	; 0x219
   14714:	mov	r3, r5
   14718:	str	r5, [sp]
   1471c:	mov	r2, r8
   14720:	orr	r4, r4, r0
   14724:	mov	r0, r6
   14728:	str	r1, [sp, #4]
   1472c:	movw	r1, #17636	; 0x44e4
   14730:	movt	r1, #4
   14734:	bl	18208 <_start@@Base+0x3528>
   14738:	mov	r1, #540	; 0x21c
   1473c:	mov	r3, r5
   14740:	str	r5, [sp]
   14744:	mov	r2, fp
   14748:	orr	r4, r4, r0
   1474c:	mov	r0, r6
   14750:	str	r1, [sp, #4]
   14754:	movw	r1, #17696	; 0x4520
   14758:	movt	r1, #4
   1475c:	bl	18208 <_start@@Base+0x3528>
   14760:	movw	r1, #543	; 0x21f
   14764:	mov	r3, r5
   14768:	str	r5, [sp]
   1476c:	mov	r2, r9
   14770:	orr	r4, r4, r0
   14774:	mov	r0, r6
   14778:	str	r1, [sp, #4]
   1477c:	movw	r1, #17736	; 0x4548
   14780:	movt	r1, #4
   14784:	bl	18208 <_start@@Base+0x3528>
   14788:	movw	r1, #547	; 0x223
   1478c:	mov	r3, r5
   14790:	str	r5, [sp]
   14794:	mov	r2, r7
   14798:	orr	r4, r4, r0
   1479c:	mov	r0, r6
   147a0:	str	r1, [sp, #4]
   147a4:	movw	r1, #17780	; 0x4574
   147a8:	movt	r1, #4
   147ac:	bl	18208 <_start@@Base+0x3528>
   147b0:	movw	r1, #551	; 0x227
   147b4:	mov	r3, r5
   147b8:	str	r5, [sp]
   147bc:	mov	r2, r7
   147c0:	orr	r4, r4, r0
   147c4:	mov	r0, r6
   147c8:	str	r1, [sp, #4]
   147cc:	movw	r1, #10664	; 0x29a8
   147d0:	movt	r1, #4
   147d4:	bl	18208 <_start@@Base+0x3528>
   147d8:	movw	r1, #601	; 0x259
   147dc:	mov	r3, r5
   147e0:	str	r5, [sp]
   147e4:	mov	r2, fp
   147e8:	orr	r4, r4, r0
   147ec:	mov	r0, r6
   147f0:	str	r1, [sp, #4]
   147f4:	movw	r1, #17820	; 0x459c
   147f8:	movt	r1, #4
   147fc:	bl	18208 <_start@@Base+0x3528>
   14800:	mov	r1, #604	; 0x25c
   14804:	mov	r2, r9
   14808:	str	r5, [sp]
   1480c:	mov	r3, r5
   14810:	orr	r4, r4, r0
   14814:	mov	r0, r6
   14818:	str	r1, [sp, #4]
   1481c:	movw	r1, #17856	; 0x45c0
   14820:	movt	r1, #4
   14824:	movw	r9, #18340	; 0x47a4
   14828:	movt	r9, #4
   1482c:	bl	18208 <_start@@Base+0x3528>
   14830:	movw	r1, #607	; 0x25f
   14834:	mov	r3, r5
   14838:	str	r5, [sp]
   1483c:	orr	r4, r4, r0
   14840:	movw	r2, #17892	; 0x45e4
   14844:	movt	r2, #4
   14848:	mov	r0, r6
   1484c:	str	r1, [sp, #4]
   14850:	movw	r1, #17932	; 0x460c
   14854:	movt	r1, #4
   14858:	bl	18208 <_start@@Base+0x3528>
   1485c:	movw	r1, #610	; 0x262
   14860:	mov	r2, r8
   14864:	str	r5, [sp]
   14868:	mov	r3, r5
   1486c:	orr	r4, r4, r0
   14870:	mov	r0, r6
   14874:	str	r1, [sp, #4]
   14878:	movw	r1, #17968	; 0x4630
   1487c:	movt	r1, #4
   14880:	movw	r8, #19368	; 0x4ba8
   14884:	movt	r8, #4
   14888:	bl	18208 <_start@@Base+0x3528>
   1488c:	movw	r1, #613	; 0x265
   14890:	mov	r3, r5
   14894:	str	r5, [sp]
   14898:	orr	r4, r4, r0
   1489c:	movw	r2, #18004	; 0x4654
   148a0:	movt	r2, #4
   148a4:	mov	r0, r6
   148a8:	str	r1, [sp, #4]
   148ac:	movw	r1, #18036	; 0x4674
   148b0:	movt	r1, #4
   148b4:	bl	18208 <_start@@Base+0x3528>
   148b8:	mov	r1, #616	; 0x268
   148bc:	mov	r3, r5
   148c0:	str	r5, [sp]
   148c4:	orr	r4, r4, r0
   148c8:	movw	r2, #18072	; 0x4698
   148cc:	movt	r2, #4
   148d0:	mov	r0, r6
   148d4:	str	r1, [sp, #4]
   148d8:	movw	r1, #18104	; 0x46b8
   148dc:	movt	r1, #4
   148e0:	bl	18208 <_start@@Base+0x3528>
   148e4:	movw	r1, #619	; 0x26b
   148e8:	mov	r3, r5
   148ec:	str	r5, [sp]
   148f0:	orr	r4, r4, r0
   148f4:	movw	r2, #18140	; 0x46dc
   148f8:	movt	r2, #4
   148fc:	mov	r0, r6
   14900:	str	r1, [sp, #4]
   14904:	movw	r1, #18172	; 0x46fc
   14908:	movt	r1, #4
   1490c:	bl	18208 <_start@@Base+0x3528>
   14910:	movw	r1, #622	; 0x26e
   14914:	mov	r3, r5
   14918:	str	r5, [sp]
   1491c:	mov	r2, fp
   14920:	orr	r4, r4, r0
   14924:	mov	r0, r6
   14928:	str	r1, [sp, #4]
   1492c:	movw	r1, #18208	; 0x4720
   14930:	movt	r1, #4
   14934:	bl	18208 <_start@@Base+0x3528>
   14938:	movw	ip, #625	; 0x271
   1493c:	mov	r2, fp
   14940:	mov	r3, r5
   14944:	orr	r4, r4, r0
   14948:	movw	r1, #18252	; 0x474c
   1494c:	movt	r1, #4
   14950:	stm	sp, {r5, ip}
   14954:	mov	r0, r6
   14958:	bl	18208 <_start@@Base+0x3528>
   1495c:	mov	ip, #628	; 0x274
   14960:	mov	r3, r5
   14964:	mov	r2, sl
   14968:	mov	r1, r9
   1496c:	orr	r4, r4, r0
   14970:	mov	r0, r6
   14974:	stm	sp, {r5, ip}
   14978:	bl	18208 <_start@@Base+0x3528>
   1497c:	movw	ip, #631	; 0x277
   14980:	mov	r2, sl
   14984:	mov	r1, r9
   14988:	mov	r3, r5
   1498c:	orr	r4, r4, r0
   14990:	mov	r0, r6
   14994:	stm	sp, {r5, ip}
   14998:	bl	18208 <_start@@Base+0x3528>
   1499c:	movw	r1, #634	; 0x27a
   149a0:	mov	r3, r5
   149a4:	str	r5, [sp]
   149a8:	orr	r4, r4, r0
   149ac:	movw	r2, #18384	; 0x47d0
   149b0:	movt	r2, #4
   149b4:	mov	r0, r6
   149b8:	str	r1, [sp, #4]
   149bc:	movw	r1, #18456	; 0x4818
   149c0:	movt	r1, #4
   149c4:	bl	18208 <_start@@Base+0x3528>
   149c8:	movw	r1, #638	; 0x27e
   149cc:	mov	r3, r5
   149d0:	str	r5, [sp]
   149d4:	orr	r4, r4, r0
   149d8:	movw	r2, #18540	; 0x486c
   149dc:	movt	r2, #4
   149e0:	mov	r0, r6
   149e4:	str	r1, [sp, #4]
   149e8:	movw	r1, #18616	; 0x48b8
   149ec:	movt	r1, #4
   149f0:	bl	18208 <_start@@Base+0x3528>
   149f4:	movw	r1, #642	; 0x282
   149f8:	mov	r3, r5
   149fc:	str	r5, [sp]
   14a00:	orr	r4, r4, r0
   14a04:	movw	r2, #18704	; 0x4910
   14a08:	movt	r2, #4
   14a0c:	mov	r0, r6
   14a10:	str	r1, [sp, #4]
   14a14:	movw	r1, #18804	; 0x4974
   14a18:	movt	r1, #4
   14a1c:	bl	18208 <_start@@Base+0x3528>
   14a20:	movw	ip, #646	; 0x286
   14a24:	mov	r3, r5
   14a28:	mov	r2, r7
   14a2c:	orr	r4, r4, r0
   14a30:	movw	r1, #18916	; 0x49e4
   14a34:	movt	r1, #4
   14a38:	stm	sp, {r5, ip}
   14a3c:	mov	r0, r6
   14a40:	bl	18208 <_start@@Base+0x3528>
   14a44:	movw	ip, #649	; 0x289
   14a48:	mov	r3, r5
   14a4c:	mov	r2, r7
   14a50:	orr	r4, r4, r0
   14a54:	movw	r1, #18960	; 0x4a10
   14a58:	movt	r1, #4
   14a5c:	stm	sp, {r5, ip}
   14a60:	mov	r0, r6
   14a64:	bl	18208 <_start@@Base+0x3528>
   14a68:	mov	r1, #716	; 0x2cc
   14a6c:	mov	r3, r5
   14a70:	str	r5, [sp]
   14a74:	orr	r4, r4, r0
   14a78:	movw	r2, #19000	; 0x4a38
   14a7c:	movt	r2, #4
   14a80:	mov	r0, r6
   14a84:	str	r1, [sp, #4]
   14a88:	movw	r1, #19096	; 0x4a98
   14a8c:	movt	r1, #4
   14a90:	bl	18208 <_start@@Base+0x3528>
   14a94:	movw	r1, #731	; 0x2db
   14a98:	mov	r3, r5
   14a9c:	str	r5, [sp]
   14aa0:	orr	r4, r4, r0
   14aa4:	movw	r2, #19208	; 0x4b08
   14aa8:	movt	r2, #4
   14aac:	mov	r0, r6
   14ab0:	str	r1, [sp, #4]
   14ab4:	movw	r1, #19256	; 0x4b38
   14ab8:	movt	r1, #4
   14abc:	bl	18208 <_start@@Base+0x3528>
   14ac0:	movw	r1, #734	; 0x2de
   14ac4:	mov	r3, r5
   14ac8:	str	r5, [sp]
   14acc:	orr	r4, r4, r0
   14ad0:	movw	r2, #19320	; 0x4b78
   14ad4:	movt	r2, #4
   14ad8:	mov	r0, r6
   14adc:	str	r1, [sp, #4]
   14ae0:	movw	r1, #19340	; 0x4b8c
   14ae4:	movt	r1, #4
   14ae8:	bl	18208 <_start@@Base+0x3528>
   14aec:	movw	ip, #738	; 0x2e2
   14af0:	mov	r3, r5
   14af4:	mov	r2, r8
   14af8:	orr	r4, r4, r0
   14afc:	movw	r1, #19436	; 0x4bec
   14b00:	movt	r1, #4
   14b04:	stm	sp, {r5, ip}
   14b08:	mov	r0, r6
   14b0c:	bl	18208 <_start@@Base+0x3528>
   14b10:	movw	ip, #750	; 0x2ee
   14b14:	mov	r2, r8
   14b18:	mov	r3, r5
   14b1c:	orr	r4, r4, r0
   14b20:	movw	r1, #19508	; 0x4c34
   14b24:	movt	r1, #4
   14b28:	stm	sp, {r5, ip}
   14b2c:	mov	r0, r6
   14b30:	bl	18208 <_start@@Base+0x3528>
   14b34:	movw	r1, #766	; 0x2fe
   14b38:	mov	r3, r5
   14b3c:	str	r5, [sp]
   14b40:	orr	r4, r4, r0
   14b44:	movw	r2, #19668	; 0x4cd4
   14b48:	movt	r2, #4
   14b4c:	mov	r0, r6
   14b50:	str	r1, [sp, #4]
   14b54:	movw	r1, #19704	; 0x4cf8
   14b58:	movt	r1, #4
   14b5c:	bl	18208 <_start@@Base+0x3528>
   14b60:	movw	r1, #770	; 0x302
   14b64:	mov	r3, r5
   14b68:	str	r5, [sp]
   14b6c:	orr	r4, r4, r0
   14b70:	movw	r2, #19744	; 0x4d20
   14b74:	movt	r2, #4
   14b78:	mov	r0, r6
   14b7c:	str	r1, [sp, #4]
   14b80:	movw	r1, #19788	; 0x4d4c
   14b84:	movt	r1, #4
   14b88:	bl	18208 <_start@@Base+0x3528>
   14b8c:	mov	r1, #776	; 0x308
   14b90:	mov	r3, r5
   14b94:	str	r5, [sp]
   14b98:	orr	r4, r4, r0
   14b9c:	movw	r2, #19836	; 0x4d7c
   14ba0:	movt	r2, #4
   14ba4:	mov	r0, r6
   14ba8:	str	r1, [sp, #4]
   14bac:	movw	r1, #19948	; 0x4dec
   14bb0:	movt	r1, #4
   14bb4:	bl	18208 <_start@@Base+0x3528>
   14bb8:	movw	ip, #781	; 0x30d
   14bbc:	mov	r2, r7
   14bc0:	mov	r3, r5
   14bc4:	orr	r4, r4, r0
   14bc8:	movw	r1, #20072	; 0x4e68
   14bcc:	movt	r1, #4
   14bd0:	stm	sp, {r5, ip}
   14bd4:	mov	r0, r6
   14bd8:	bl	18208 <_start@@Base+0x3528>
   14bdc:	movw	r1, #786	; 0x312
   14be0:	mov	r3, r5
   14be4:	str	r5, [sp]
   14be8:	orr	r4, r4, r0
   14bec:	movw	r2, #20192	; 0x4ee0
   14bf0:	movt	r2, #4
   14bf4:	mov	r0, r6
   14bf8:	str	r1, [sp, #4]
   14bfc:	movw	r1, #20304	; 0x4f50
   14c00:	movt	r1, #4
   14c04:	bl	18208 <_start@@Base+0x3528>
   14c08:	movw	r1, #791	; 0x317
   14c0c:	mov	r3, r5
   14c10:	str	r5, [sp]
   14c14:	orr	r4, r4, r0
   14c18:	movw	r2, #20428	; 0x4fcc
   14c1c:	movt	r2, #4
   14c20:	mov	r0, r6
   14c24:	str	r1, [sp, #4]
   14c28:	movw	r1, #20556	; 0x504c
   14c2c:	movt	r1, #4
   14c30:	bl	18208 <_start@@Base+0x3528>
   14c34:	mov	r1, #796	; 0x31c
   14c38:	mov	r3, r5
   14c3c:	str	r5, [sp]
   14c40:	orr	r4, r4, r0
   14c44:	movw	r2, #20696	; 0x50d8
   14c48:	movt	r2, #4
   14c4c:	mov	r0, r6
   14c50:	str	r1, [sp, #4]
   14c54:	movw	r1, #20808	; 0x5148
   14c58:	movt	r1, #4
   14c5c:	bl	18208 <_start@@Base+0x3528>
   14c60:	movw	r1, #801	; 0x321
   14c64:	mov	r3, r5
   14c68:	str	r5, [sp]
   14c6c:	orr	r4, r4, r0
   14c70:	movw	r2, #20932	; 0x51c4
   14c74:	movt	r2, #4
   14c78:	mov	r0, r6
   14c7c:	str	r1, [sp, #4]
   14c80:	movw	r1, #21060	; 0x5244
   14c84:	movt	r1, #4
   14c88:	bl	18208 <_start@@Base+0x3528>
   14c8c:	movw	r1, #806	; 0x326
   14c90:	orr	r4, r4, r0
   14c94:	str	r5, [sp]
   14c98:	mov	r3, r5
   14c9c:	mov	r0, r6
   14ca0:	movw	r2, #21200	; 0x52d0
   14ca4:	movt	r2, #4
   14ca8:	str	r1, [sp, #4]
   14cac:	movw	r1, #21332	; 0x5354
   14cb0:	movt	r1, #4
   14cb4:	bl	18208 <_start@@Base+0x3528>
   14cb8:	orrs	r3, r4, r0
   14cbc:	mvnne	r0, #0
   14cc0:	moveq	r0, r5
   14cc4:	add	sp, sp, #12
   14cc8:	ldrd	r4, [sp]
   14ccc:	ldrd	r6, [sp, #8]
   14cd0:	ldrd	r8, [sp, #16]
   14cd4:	ldrd	sl, [sp, #24]
   14cd8:	add	sp, sp, #32
   14cdc:	pop	{pc}		; (ldr pc, [sp], #4)

00014ce0 <_start@@Base>:
   14ce0:	mov	fp, #0
   14ce4:	mov	lr, #0
   14ce8:	pop	{r1}		; (ldr r1, [sp], #4)
   14cec:	mov	r2, sp
   14cf0:	push	{r2}		; (str r2, [sp, #-4]!)
   14cf4:	push	{r0}		; (str r0, [sp, #-4]!)
   14cf8:	ldr	ip, [pc, #16]	; 14d10 <_start@@Base+0x30>
   14cfc:	push	{ip}		; (str ip, [sp, #-4]!)
   14d00:	ldr	r0, [pc, #12]	; 14d14 <_start@@Base+0x34>
   14d04:	ldr	r3, [pc, #12]	; 14d18 <_start@@Base+0x38>
   14d08:	bl	14560 <__libc_start_main@plt>
   14d0c:	bl	145e4 <abort@plt>
   14d10:	andeq	r2, r4, r4, lsl #6
   14d14:	andeq	r4, r1, r0, lsl #12
   14d18:	andeq	r2, r4, r4, lsr #5
   14d1c:	ldr	r3, [pc, #20]	; 14d38 <_start@@Base+0x58>
   14d20:	ldr	r2, [pc, #20]	; 14d3c <_start@@Base+0x5c>
   14d24:	add	r3, pc, r3
   14d28:	ldr	r2, [r3, r2]
   14d2c:	cmp	r2, #0
   14d30:	bxeq	lr
   14d34:	b	1456c <__gmon_start__@plt>
   14d38:	ldrdeq	r3, [r4], -r4
   14d3c:	andeq	r0, r0, r4, rrx
   14d40:	ldr	r0, [pc, #24]	; 14d60 <_start@@Base+0x80>
   14d44:	ldr	r3, [pc, #24]	; 14d64 <_start@@Base+0x84>
   14d48:	cmp	r3, r0
   14d4c:	bxeq	lr
   14d50:	ldr	r3, [pc, #16]	; 14d68 <_start@@Base+0x88>
   14d54:	cmp	r3, #0
   14d58:	bxeq	lr
   14d5c:	bx	r3
   14d60:			; <UNDEFINED> instruction: 0x000583b0
   14d64:			; <UNDEFINED> instruction: 0x000583b0
   14d68:	andeq	r0, r0, r0
   14d6c:	ldr	r0, [pc, #36]	; 14d98 <_start@@Base+0xb8>
   14d70:	ldr	r1, [pc, #36]	; 14d9c <_start@@Base+0xbc>
   14d74:	sub	r1, r1, r0
   14d78:	asr	r1, r1, #2
   14d7c:	add	r1, r1, r1, lsr #31
   14d80:	asrs	r1, r1, #1
   14d84:	bxeq	lr
   14d88:	ldr	r3, [pc, #16]	; 14da0 <_start@@Base+0xc0>
   14d8c:	cmp	r3, #0
   14d90:	bxeq	lr
   14d94:	bx	r3
   14d98:			; <UNDEFINED> instruction: 0x000583b0
   14d9c:			; <UNDEFINED> instruction: 0x000583b0
   14da0:	andeq	r0, r0, r0
   14da4:	push	{r4, lr}
   14da8:	ldr	r4, [pc, #24]	; 14dc8 <_start@@Base+0xe8>
   14dac:	ldrb	r3, [r4]
   14db0:	cmp	r3, #0
   14db4:	popne	{r4, pc}
   14db8:	bl	14d40 <_start@@Base+0x60>
   14dbc:	mov	r3, #1
   14dc0:	strb	r3, [r4]
   14dc4:	pop	{r4, pc}
   14dc8:			; <UNDEFINED> instruction: 0x000583b8
   14dcc:	b	14d6c <_start@@Base+0x8c>
   14dd0:	sub	r1, r1, r0
   14dd4:	strd	r4, [sp, #-8]!
   14dd8:	cmp	r1, #8
   14ddc:	bhi	14e10 <_start@@Base+0x130>
   14de0:	sub	r1, r1, #1
   14de4:	cmp	r1, #7
   14de8:	ldrls	pc, [pc, r1, lsl #2]
   14dec:	b	14eb8 <_start@@Base+0x1d8>
   14df0:	andeq	r4, r1, r0, ror lr
   14df4:	andeq	r4, r1, ip, ror lr
   14df8:	andeq	r4, r1, r8, lsl #29
   14dfc:	muleq	r1, r4, lr
   14e00:	andeq	r4, r1, r0, lsr #29
   14e04:	andeq	r4, r1, ip, lsr #29
   14e08:	andeq	r4, r1, r4, ror #28
   14e0c:	andeq	r4, r1, r0, lsl lr
   14e10:	ldrb	r2, [r0, #7]
   14e14:	mov	r3, #0
   14e18:	mov	r1, r3
   14e1c:	ldrb	r4, [r0, #6]
   14e20:	orr	r2, r2, r4, lsl #8
   14e24:	ldrb	r4, [r0, #5]
   14e28:	orr	r2, r2, r4, lsl #16
   14e2c:	ldrb	r4, [r0, #4]
   14e30:	orr	r2, r2, r4, lsl #24
   14e34:	ldrb	r4, [r0, #3]
   14e38:	orr	r1, r1, r4
   14e3c:	ldrb	r4, [r0, #2]
   14e40:	orr	r1, r1, r4, lsl #8
   14e44:	ldrb	r4, [r0, #1]
   14e48:	orr	r1, r1, r4, lsl #16
   14e4c:	ldrb	r4, [r0]
   14e50:	mov	r0, r2
   14e54:	orr	r1, r1, r4, lsl #24
   14e58:	ldrd	r4, [sp]
   14e5c:	add	sp, sp, #8
   14e60:	bx	lr
   14e64:	mov	r2, #0
   14e68:	mov	r3, #0
   14e6c:	b	14e18 <_start@@Base+0x138>
   14e70:	mov	r2, #0
   14e74:	mov	r1, r2
   14e78:	b	14e4c <_start@@Base+0x16c>
   14e7c:	mov	r2, #0
   14e80:	mov	r1, r2
   14e84:	b	14e44 <_start@@Base+0x164>
   14e88:	mov	r2, #0
   14e8c:	mov	r1, r2
   14e90:	b	14e3c <_start@@Base+0x15c>
   14e94:	mov	r2, #0
   14e98:	mov	r1, r2
   14e9c:	b	14e34 <_start@@Base+0x154>
   14ea0:	mov	r2, #0
   14ea4:	mov	r1, r2
   14ea8:	b	14e2c <_start@@Base+0x14c>
   14eac:	mov	r2, #0
   14eb0:	mov	r1, r2
   14eb4:	b	14e24 <_start@@Base+0x144>
   14eb8:	mov	r0, #0
   14ebc:	mov	r1, r0
   14ec0:	b	14e58 <_start@@Base+0x178>
   14ec4:	cmp	r0, #4
   14ec8:	movhi	r0, #0
   14ecc:	movls	r0, #1
   14ed0:	bx	lr
   14ed4:	cmp	r0, #11
   14ed8:	bhi	14efc <_start@@Base+0x21c>
   14edc:	cmp	r0, #8
   14ee0:	bcs	14f0c <_start@@Base+0x22c>
   14ee4:	cmp	r0, #0
   14ee8:	beq	14f0c <_start@@Base+0x22c>
   14eec:	sub	r0, r0, #2
   14ef0:	clz	r0, r0
   14ef4:	lsr	r0, r0, #5
   14ef8:	bx	lr
   14efc:	sub	r0, r0, #255	; 0xff
   14f00:	clz	r0, r0
   14f04:	lsr	r0, r0, #5
   14f08:	bx	lr
   14f0c:	mov	r0, #1
   14f10:	bx	lr
   14f14:	bx	lr
   14f18:	mov	r0, #0
   14f1c:	bx	lr
   14f20:	mov	r3, #4
   14f24:	mov	r1, #0
   14f28:	mov	r2, r3
   14f2c:	b	2ae2c <flatcc_verify_field@@Base>
   14f30:	movw	ip, #20716	; 0x50ec
   14f34:	movt	ip, #1
   14f38:	strd	r4, [sp, #-16]!
   14f3c:	str	r6, [sp, #8]
   14f40:	mov	r2, #0
   14f44:	movw	r3, #9028	; 0x2344
   14f48:	movt	r3, #4
   14f4c:	str	lr, [sp, #12]
   14f50:	sub	sp, sp, #8
   14f54:	mov	lr, #21
   14f58:	mov	r4, r0
   14f5c:	mov	r5, r1
   14f60:	mov	r6, #22
   14f64:	str	lr, [sp]
   14f68:	str	ip, [sp, #4]
   14f6c:	bl	402f4 <flatcc_json_printer_table_field@@Base>
   14f70:	movw	r2, #20600	; 0x5078
   14f74:	movt	r2, #1
   14f78:	str	r6, [sp]
   14f7c:	mov	r1, r5
   14f80:	mov	r0, r4
   14f84:	movw	r3, #9052	; 0x235c
   14f88:	movt	r3, #4
   14f8c:	str	r2, [sp, #4]
   14f90:	mov	r2, #1
   14f94:	bl	402f4 <flatcc_json_printer_table_field@@Base>
   14f98:	movw	r2, #20484	; 0x5004
   14f9c:	movt	r2, #1
   14fa0:	str	r6, [sp]
   14fa4:	mov	r1, r5
   14fa8:	mov	r0, r4
   14fac:	movw	r3, #9076	; 0x2374
   14fb0:	movt	r3, #4
   14fb4:	str	r2, [sp, #4]
   14fb8:	mov	r2, #2
   14fbc:	bl	402f4 <flatcc_json_printer_table_field@@Base>
   14fc0:	add	sp, sp, #8
   14fc4:	ldrd	r4, [sp]
   14fc8:	ldr	r6, [sp, #8]
   14fcc:	add	sp, sp, #12
   14fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   14fd4:	mov	ip, #0
   14fd8:	push	{lr}		; (str lr, [sp, #-4]!)
   14fdc:	mov	lr, #19
   14fe0:	sub	sp, sp, #12
   14fe4:	mov	r2, ip
   14fe8:	movw	r3, #9100	; 0x238c
   14fec:	movt	r3, #4
   14ff0:	str	lr, [sp]
   14ff4:	str	ip, [sp, #4]
   14ff8:	bl	374dc <flatcc_json_printer_int32_field@@Base>
   14ffc:	add	sp, sp, #12
   15000:	pop	{pc}		; (ldr pc, [sp], #4)
   15004:	mov	r2, #15
   15008:	strd	r4, [sp, #-20]!	; 0xffffffec
   1500c:	movw	r3, #9120	; 0x23a0
   15010:	movt	r3, #4
   15014:	strd	r6, [sp, #8]
   15018:	mov	r6, #0
   1501c:	mov	r7, #0
   15020:	str	lr, [sp, #16]
   15024:	sub	sp, sp, #20
   15028:	mov	r4, r0
   1502c:	mov	r5, r1
   15030:	str	r2, [sp]
   15034:	mov	r2, #0
   15038:	strd	r6, [sp, #8]
   1503c:	bl	37700 <flatcc_json_printer_int64_field@@Base>
   15040:	mov	ip, #0
   15044:	mov	r2, #21
   15048:	mov	r1, r5
   1504c:	mov	r0, r4
   15050:	movw	r3, #9136	; 0x23b0
   15054:	movt	r3, #4
   15058:	stm	sp, {r2, ip}
   1505c:	mov	r2, #1
   15060:	bl	36bd4 <flatcc_json_printer_uint32_field@@Base>
   15064:	add	sp, sp, #20
   15068:	ldrd	r4, [sp]
   1506c:	ldrd	r6, [sp, #8]
   15070:	add	sp, sp, #16
   15074:	pop	{pc}		; (ldr pc, [sp], #4)
   15078:	mov	r2, #15
   1507c:	strd	r4, [sp, #-20]!	; 0xffffffec
   15080:	movw	r3, #9120	; 0x23a0
   15084:	movt	r3, #4
   15088:	strd	r6, [sp, #8]
   1508c:	mov	r6, #0
   15090:	mov	r7, #0
   15094:	str	lr, [sp, #16]
   15098:	sub	sp, sp, #20
   1509c:	mov	r4, r0
   150a0:	mov	r5, r1
   150a4:	str	r2, [sp]
   150a8:	mov	r2, #0
   150ac:	strd	r6, [sp, #8]
   150b0:	bl	37700 <flatcc_json_printer_int64_field@@Base>
   150b4:	mov	ip, #0
   150b8:	mov	r2, #16
   150bc:	mov	r1, r5
   150c0:	mov	r0, r4
   150c4:	movw	r3, #9160	; 0x23c8
   150c8:	movt	r3, #4
   150cc:	stm	sp, {r2, ip}
   150d0:	mov	r2, #1
   150d4:	bl	36bd4 <flatcc_json_printer_uint32_field@@Base>
   150d8:	add	sp, sp, #20
   150dc:	ldrd	r4, [sp]
   150e0:	ldrd	r6, [sp, #8]
   150e4:	add	sp, sp, #16
   150e8:	pop	{pc}		; (ldr pc, [sp], #4)
   150ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   150f0:	movw	r3, #9180	; 0x23dc
   150f4:	movt	r3, #4
   150f8:	strd	r6, [sp, #8]
   150fc:	mov	r7, #4
   15100:	mov	r4, r0
   15104:	strd	r8, [sp, #16]
   15108:	mov	r5, r1
   1510c:	mov	r6, #8
   15110:	strd	sl, [sp, #24]
   15114:	mov	sl, #0
   15118:	mov	fp, #9
   1511c:	str	lr, [sp, #32]
   15120:	sub	sp, sp, #20
   15124:	mov	r2, sl
   15128:	mov	r8, #0
   1512c:	mov	r9, #0
   15130:	str	r7, [sp]
   15134:	bl	3600c <flatcc_json_printer_string_field@@Base>
   15138:	mov	r1, r5
   1513c:	mov	r0, r4
   15140:	str	fp, [sp]
   15144:	mov	r2, #1
   15148:	movw	r3, #9188	; 0x23e4
   1514c:	movt	r3, #4
   15150:	str	sl, [sp, #4]
   15154:	bl	36bd4 <flatcc_json_printer_uint32_field@@Base>
   15158:	mov	r1, r5
   1515c:	mov	r0, r4
   15160:	str	r7, [sp]
   15164:	mov	r2, #2
   15168:	movw	r3, #9200	; 0x23f0
   1516c:	movt	r3, #4
   15170:	bl	3600c <flatcc_json_printer_string_field@@Base>
   15174:	mov	r1, r5
   15178:	mov	r0, r4
   1517c:	str	r6, [sp]
   15180:	mov	r2, #3
   15184:	movw	r3, #9208	; 0x23f8
   15188:	movt	r3, #4
   1518c:	strd	r8, [sp, #8]
   15190:	bl	37700 <flatcc_json_printer_int64_field@@Base>
   15194:	mov	r2, r7
   15198:	mov	r1, r5
   1519c:	str	r7, [sp]
   151a0:	mov	r0, r4
   151a4:	movw	r3, #9220	; 0x2404
   151a8:	movt	r3, #4
   151ac:	bl	3600c <flatcc_json_printer_string_field@@Base>
   151b0:	mov	r1, r5
   151b4:	mov	r0, r4
   151b8:	str	r6, [sp]
   151bc:	mov	r2, #5
   151c0:	movw	r3, #9228	; 0x240c
   151c4:	movt	r3, #4
   151c8:	strd	r8, [sp, #8]
   151cc:	bl	37700 <flatcc_json_printer_int64_field@@Base>
   151d0:	mov	r1, r5
   151d4:	mov	r0, r4
   151d8:	str	fp, [sp]
   151dc:	mov	r2, #6
   151e0:	movw	r3, #9240	; 0x2418
   151e4:	movt	r3, #4
   151e8:	str	sl, [sp, #4]
   151ec:	bl	36bd4 <flatcc_json_printer_uint32_field@@Base>
   151f0:	mov	r1, r5
   151f4:	mov	r0, r4
   151f8:	str	r6, [sp]
   151fc:	mov	r2, #7
   15200:	movw	r3, #9252	; 0x2424
   15204:	movt	r3, #4
   15208:	strd	r8, [sp, #8]
   1520c:	bl	37700 <flatcc_json_printer_int64_field@@Base>
   15210:	mov	r2, r6
   15214:	mov	r1, r5
   15218:	str	fp, [sp]
   1521c:	mov	r0, r4
   15220:	movw	r3, #9264	; 0x2430
   15224:	movt	r3, #4
   15228:	str	sl, [sp, #4]
   1522c:	bl	36bd4 <flatcc_json_printer_uint32_field@@Base>
   15230:	add	sp, sp, #20
   15234:	ldrd	r4, [sp]
   15238:	ldrd	r6, [sp, #8]
   1523c:	ldrd	r8, [sp, #16]
   15240:	ldrd	sl, [sp, #24]
   15244:	add	sp, sp, #32
   15248:	pop	{pc}		; (ldr pc, [sp], #4)
   1524c:	movw	ip, #24204	; 0x5e8c
   15250:	movt	ip, #1
   15254:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15258:	strd	r6, [sp, #8]
   1525c:	mov	r2, #0
   15260:	movw	r3, #9276	; 0x243c
   15264:	movt	r3, #4
   15268:	strd	r8, [sp, #16]
   1526c:	mov	r8, #3
   15270:	strd	sl, [sp, #24]
   15274:	mov	r4, r0
   15278:	mov	r5, r1
   1527c:	str	lr, [sp, #32]
   15280:	sub	sp, sp, #28
   15284:	mov	r7, #4
   15288:	mov	fp, #9
   1528c:	mov	r6, #17
   15290:	stm	sp, {r8, ip}
   15294:	movw	sl, #21068	; 0x524c
   15298:	movt	sl, #1
   1529c:	bl	40cdc <flatcc_json_printer_struct_field@@Base>
   152a0:	mov	ip, #150	; 0x96
   152a4:	mov	r1, r5
   152a8:	mov	r0, r4
   152ac:	mov	r2, #1
   152b0:	movw	r3, #9280	; 0x2440
   152b4:	movt	r3, #4
   152b8:	stm	sp, {r7, ip}
   152bc:	bl	372b4 <flatcc_json_printer_int16_field@@Base>
   152c0:	mov	lr, #100	; 0x64
   152c4:	mov	ip, #2
   152c8:	mov	r2, ip
   152cc:	mov	r1, r5
   152d0:	stm	sp, {ip, lr}
   152d4:	movw	ip, #22764	; 0x58ec
   152d8:	movt	ip, #1
   152dc:	mov	r0, r4
   152e0:	movw	r3, #9288	; 0x2448
   152e4:	movt	r3, #4
   152e8:	str	ip, [sp, #20]
   152ec:	mov	r9, #0
   152f0:	bl	372b4 <flatcc_json_printer_int16_field@@Base>
   152f4:	mov	r2, r8
   152f8:	mov	r1, r5
   152fc:	str	r7, [sp]
   15300:	mov	r0, r4
   15304:	movw	r3, #9292	; 0x244c
   15308:	movt	r3, #4
   1530c:	mov	r8, #16
   15310:	bl	3600c <flatcc_json_printer_string_field@@Base>
   15314:	mov	r1, r5
   15318:	mov	r0, r4
   1531c:	str	fp, [sp]
   15320:	mov	r2, #5
   15324:	movw	r3, #9300	; 0x2454
   15328:	movt	r3, #4
   1532c:	bl	3bbc4 <flatcc_json_printer_uint8_vector_field@@Base>
   15330:	mov	lr, #8
   15334:	mov	r3, #5
   15338:	movw	r2, #23948	; 0x5d8c
   1533c:	movt	r2, #1
   15340:	mov	r1, r5
   15344:	mov	r0, r4
   15348:	stm	sp, {r3, lr}
   1534c:	movw	r3, #9312	; 0x2460
   15350:	movt	r3, #4
   15354:	str	r2, [sp, #8]
   15358:	mov	r2, #6
   1535c:	bl	388b4 <flatcc_json_printer_int8_enum_field@@Base>
   15360:	movw	r0, #22880	; 0x5960
   15364:	movt	r0, #1
   15368:	str	r7, [sp]
   1536c:	movw	r3, #30164	; 0x75d4
   15370:	movt	r3, #1
   15374:	mov	r1, r5
   15378:	mov	r2, #8
   1537c:	str	r3, [sp, #4]
   15380:	movw	r3, #9320	; 0x2468
   15384:	movt	r3, #4
   15388:	str	r0, [sp, #8]
   1538c:	mov	r0, r4
   15390:	bl	405c0 <flatcc_json_printer_union_field@@Base>
   15394:	ldr	ip, [sp, #20]
   15398:	mov	r3, #5
   1539c:	mov	r2, fp
   153a0:	mov	r1, r5
   153a4:	mov	r0, r4
   153a8:	stm	sp, {r3, r7, ip}
   153ac:	movw	r3, #9328	; 0x2470
   153b0:	movt	r3, #4
   153b4:	bl	3f488 <flatcc_json_printer_struct_vector_field@@Base>
   153b8:	mov	r1, r5
   153bc:	mov	r0, r4
   153c0:	str	r6, [sp]
   153c4:	mov	r2, #10
   153c8:	movw	r3, #9336	; 0x2478
   153cc:	movt	r3, #4
   153d0:	bl	3f814 <flatcc_json_printer_string_vector_field@@Base>
   153d4:	mov	r1, r5
   153d8:	mov	r0, r4
   153dc:	stm	sp, {r6, sl}
   153e0:	mov	r2, #11
   153e4:	movw	r3, #9356	; 0x248c
   153e8:	movt	r3, #4
   153ec:	bl	3fae4 <flatcc_json_printer_table_vector_field@@Base>
   153f0:	mov	r3, #5
   153f4:	mov	r1, r5
   153f8:	mov	r0, r4
   153fc:	mov	r2, #12
   15400:	stm	sp, {r3, sl}
   15404:	movw	r3, #9376	; 0x24a0
   15408:	movt	r3, #4
   1540c:	bl	402f4 <flatcc_json_printer_table_field@@Base>
   15410:	mov	r2, #20
   15414:	mov	r1, r5
   15418:	mov	r0, r4
   1541c:	movw	r3, #9384	; 0x24a8
   15420:	movt	r3, #4
   15424:	stm	sp, {r2, r9, sl}
   15428:	mov	r2, #13
   1542c:	mov	sl, #0
   15430:	bl	4154c <flatcc_json_printer_table_as_nested_root@@Base>
   15434:	movw	r2, #22604	; 0x584c
   15438:	movt	r2, #1
   1543c:	str	fp, [sp]
   15440:	mov	r1, r5
   15444:	mov	r0, r4
   15448:	movw	r3, #9408	; 0x24c0
   1544c:	movt	r3, #4
   15450:	str	r2, [sp, #4]
   15454:	mov	r2, #14
   15458:	mov	fp, #0
   1545c:	bl	402f4 <flatcc_json_printer_table_field@@Base>
   15460:	mov	lr, #8
   15464:	mov	r2, #1
   15468:	mov	r1, r5
   1546c:	mov	r0, r4
   15470:	movw	r3, #9420	; 0x24cc
   15474:	movt	r3, #4
   15478:	str	lr, [sp]
   1547c:	str	r2, [sp, #4]
   15480:	mov	r2, #15
   15484:	bl	3793c <flatcc_json_printer_bool_field@@Base>
   15488:	mov	r1, r5
   1548c:	mov	r0, r4
   15490:	strd	r8, [sp]
   15494:	mov	r2, r8
   15498:	movw	r3, #9432	; 0x24d8
   1549c:	movt	r3, #4
   154a0:	bl	374dc <flatcc_json_printer_int32_field@@Base>
   154a4:	mov	r2, r6
   154a8:	mov	r1, r5
   154ac:	strd	r8, [sp]
   154b0:	mov	r0, r4
   154b4:	movw	r3, #9452	; 0x24ec
   154b8:	movt	r3, #4
   154bc:	bl	36bd4 <flatcc_json_printer_uint32_field@@Base>
   154c0:	mov	r1, r5
   154c4:	mov	r0, r4
   154c8:	str	r8, [sp]
   154cc:	mov	r2, #18
   154d0:	movw	r3, #9472	; 0x2500
   154d4:	movt	r3, #4
   154d8:	strd	sl, [sp, #8]
   154dc:	bl	37700 <flatcc_json_printer_int64_field@@Base>
   154e0:	mov	r1, r5
   154e4:	mov	r0, r4
   154e8:	str	r8, [sp]
   154ec:	mov	r2, #19
   154f0:	movw	r3, #9492	; 0x2514
   154f4:	movt	r3, #4
   154f8:	strd	sl, [sp, #8]
   154fc:	bl	36dd8 <flatcc_json_printer_uint64_field@@Base>
   15500:	mov	r1, r5
   15504:	mov	r0, r4
   15508:	stm	sp, {r6, r9}
   1550c:	mov	r2, #20
   15510:	movw	r3, #9512	; 0x2528
   15514:	movt	r3, #4
   15518:	bl	374dc <flatcc_json_printer_int32_field@@Base>
   1551c:	mov	r1, r5
   15520:	mov	r0, r4
   15524:	stm	sp, {r6, r9}
   15528:	mov	r2, #21
   1552c:	movw	r3, #9532	; 0x253c
   15530:	movt	r3, #4
   15534:	bl	36bd4 <flatcc_json_printer_uint32_field@@Base>
   15538:	mov	r1, r5
   1553c:	mov	r0, r4
   15540:	str	r6, [sp]
   15544:	mov	r2, #22
   15548:	movw	r3, #9552	; 0x2550
   1554c:	movt	r3, #4
   15550:	strd	sl, [sp, #8]
   15554:	bl	37700 <flatcc_json_printer_int64_field@@Base>
   15558:	mov	r1, r5
   1555c:	mov	r0, r4
   15560:	str	r6, [sp]
   15564:	mov	r2, #23
   15568:	movw	r3, #9572	; 0x2564
   1556c:	movt	r3, #4
   15570:	strd	sl, [sp, #8]
   15574:	bl	36dd8 <flatcc_json_printer_uint64_field@@Base>
   15578:	str	r8, [sp]
   1557c:	mov	r8, #5
   15580:	mov	r1, r5
   15584:	mov	r0, r4
   15588:	mov	r2, #24
   1558c:	movw	r3, #9592	; 0x2578
   15590:	movt	r3, #4
   15594:	bl	3d468 <flatcc_json_printer_bool_vector_field@@Base>
   15598:	mov	r1, r5
   1559c:	mov	r0, r4
   155a0:	vldr	s0, [pc, #412]	; 15744 <_start@@Base+0xa64>
   155a4:	mov	r2, #25
   155a8:	movw	r3, #9612	; 0x258c
   155ac:	movt	r3, #4
   155b0:	str	r8, [sp]
   155b4:	bl	37b88 <flatcc_json_printer_float_field@@Base>
   155b8:	mov	r2, #6
   155bc:	mov	r1, r5
   155c0:	vldr	s0, [pc, #384]	; 15748 <_start@@Base+0xa68>
   155c4:	mov	r9, r2
   155c8:	mov	r0, r4
   155cc:	movw	r3, #9620	; 0x2594
   155d0:	movt	r3, #4
   155d4:	str	r2, [sp]
   155d8:	mov	r2, #26
   155dc:	bl	37b88 <flatcc_json_printer_float_field@@Base>
   155e0:	vldr	s0, [pc, #356]	; 1574c <_start@@Base+0xa6c>
   155e4:	mov	r1, r5
   155e8:	mov	r0, r4
   155ec:	mov	r2, #27
   155f0:	movw	r3, #9628	; 0x259c
   155f4:	movt	r3, #4
   155f8:	str	r9, [sp]
   155fc:	bl	37b88 <flatcc_json_printer_float_field@@Base>
   15600:	mov	ip, #18
   15604:	mov	r1, r5
   15608:	mov	r0, r4
   1560c:	mov	r2, #28
   15610:	movw	r3, #9636	; 0x25a4
   15614:	movt	r3, #4
   15618:	str	ip, [sp]
   1561c:	bl	3f814 <flatcc_json_printer_string_vector_field@@Base>
   15620:	mov	lr, #8
   15624:	movw	ip, #22500	; 0x57e4
   15628:	movt	ip, #1
   1562c:	mov	r1, r5
   15630:	str	lr, [sp, #4]
   15634:	mov	lr, #23
   15638:	mov	r0, r4
   1563c:	mov	r2, #29
   15640:	movw	r3, #9656	; 0x25b8
   15644:	movt	r3, #4
   15648:	str	lr, [sp]
   1564c:	str	ip, [sp, #8]
   15650:	bl	3f488 <flatcc_json_printer_struct_vector_field@@Base>
   15654:	mov	r1, r5
   15658:	mov	r0, r4
   1565c:	str	r7, [sp]
   15660:	mov	r2, #30
   15664:	movw	r3, #9680	; 0x25d0
   15668:	movt	r3, #4
   1566c:	bl	3bbc4 <flatcc_json_printer_uint8_vector_field@@Base>
   15670:	ldr	ip, [sp, #20]
   15674:	mov	r1, r5
   15678:	mov	r0, r4
   1567c:	mov	r2, #31
   15680:	movw	r3, #9688	; 0x25d8
   15684:	movt	r3, #4
   15688:	str	r8, [sp]
   1568c:	stmib	sp, {r7, ip}
   15690:	bl	3f488 <flatcc_json_printer_struct_vector_field@@Base>
   15694:	mov	ip, #15
   15698:	mov	r1, r5
   1569c:	mov	r0, r4
   156a0:	mov	r2, #32
   156a4:	movw	r3, #9696	; 0x25e0
   156a8:	movt	r3, #4
   156ac:	str	ip, [sp]
   156b0:	bl	3d164 <flatcc_json_printer_int64_vector_field@@Base>
   156b4:	mov	r1, r5
   156b8:	mov	r0, r4
   156bc:	str	r6, [sp]
   156c0:	mov	r2, #33	; 0x21
   156c4:	movw	r3, #9712	; 0x25f0
   156c8:	movt	r3, #4
   156cc:	bl	3da24 <flatcc_json_printer_double_vector_field@@Base>
   156d0:	mov	lr, #21
   156d4:	movw	ip, #20244	; 0x4f14
   156d8:	movt	ip, #1
   156dc:	mov	r1, r5
   156e0:	mov	r0, r4
   156e4:	mov	r2, #34	; 0x22
   156e8:	str	lr, [sp]
   156ec:	movw	r3, #9732	; 0x2604
   156f0:	movt	r3, #4
   156f4:	str	ip, [sp, #4]
   156f8:	bl	402f4 <flatcc_json_printer_table_field@@Base>
   156fc:	mov	lr, #10
   15700:	movw	ip, #22352	; 0x5750
   15704:	movt	ip, #1
   15708:	mov	r1, r5
   1570c:	mov	r0, r4
   15710:	mov	r2, #35	; 0x23
   15714:	str	lr, [sp]
   15718:	movw	r3, #9756	; 0x261c
   1571c:	movt	r3, #4
   15720:	str	ip, [sp, #4]
   15724:	bl	402f4 <flatcc_json_printer_table_field@@Base>
   15728:	add	sp, sp, #28
   1572c:	ldrd	r4, [sp]
   15730:	ldrd	r6, [sp, #8]
   15734:	ldrd	r8, [sp, #16]
   15738:	ldrd	sl, [sp, #24]
   1573c:	add	sp, sp, #32
   15740:	pop	{pc}		; (ldr pc, [sp], #4)
   15744:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   15748:	submi	r0, r0, r0
   1574c:	andeq	r0, r0, r0
   15750:	mov	ip, #4
   15754:	strd	r4, [sp, #-16]!
   15758:	mov	r4, #0
   1575c:	str	r6, [sp, #8]
   15760:	mov	r2, r4
   15764:	movw	r3, #9768	; 0x2628
   15768:	movt	r3, #4
   1576c:	str	lr, [sp, #12]
   15770:	sub	sp, sp, #8
   15774:	mov	r5, r0
   15778:	mov	r6, r1
   1577c:	str	ip, [sp]
   15780:	str	r4, [sp, #4]
   15784:	bl	36200 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15788:	mov	ip, #1
   1578c:	mov	r3, #7
   15790:	mov	r1, r6
   15794:	mov	r0, r5
   15798:	mov	r2, ip
   1579c:	stm	sp, {r3, ip}
   157a0:	movw	r3, #9776	; 0x2630
   157a4:	movt	r3, #4
   157a8:	bl	36200 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   157ac:	mov	ip, #6
   157b0:	mov	r1, r6
   157b4:	mov	r0, r5
   157b8:	mov	r2, #2
   157bc:	movw	r3, #9784	; 0x2638
   157c0:	movt	r3, #4
   157c4:	str	ip, [sp]
   157c8:	str	r4, [sp, #4]
   157cc:	bl	36200 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   157d0:	add	sp, sp, #8
   157d4:	ldrd	r4, [sp]
   157d8:	ldr	r6, [sp, #8]
   157dc:	add	sp, sp, #12
   157e0:	pop	{pc}		; (ldr pc, [sp], #4)
   157e4:	movw	ip, #9792	; 0x2640
   157e8:	movt	ip, #4
   157ec:	strd	r4, [sp, #-12]!
   157f0:	str	lr, [sp, #8]
   157f4:	sub	sp, sp, #12
   157f8:	mov	lr, #2
   157fc:	mov	r3, #0
   15800:	mov	r4, r1
   15804:	mov	r2, r1
   15808:	mov	r1, r3
   1580c:	stm	sp, {ip, lr}
   15810:	mov	r5, r0
   15814:	bl	39958 <flatcc_json_printer_uint32_struct_field@@Base>
   15818:	mov	ip, #8
   1581c:	movw	r1, #9796	; 0x2644
   15820:	movt	r1, #4
   15824:	mov	r2, r4
   15828:	mov	r0, r5
   1582c:	mov	r3, #4
   15830:	stm	sp, {r1, ip}
   15834:	mov	r1, #1
   15838:	bl	39958 <flatcc_json_printer_uint32_struct_field@@Base>
   1583c:	add	sp, sp, #12
   15840:	ldrd	r4, [sp]
   15844:	add	sp, sp, #8
   15848:	pop	{pc}		; (ldr pc, [sp], #4)
   1584c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15850:	mov	r2, #0
   15854:	movw	r3, #9792	; 0x2640
   15858:	movt	r3, #4
   1585c:	str	r6, [sp, #8]
   15860:	mov	r6, #2
   15864:	strd	r8, [sp, #12]
   15868:	mov	r4, r0
   1586c:	mov	r5, r1
   15870:	str	lr, [sp, #20]
   15874:	sub	sp, sp, #16
   15878:	mov	r8, #0
   1587c:	mov	r9, #0
   15880:	str	r6, [sp]
   15884:	bl	3600c <flatcc_json_printer_string_field@@Base>
   15888:	mov	r3, #3
   1588c:	mov	r1, r5
   15890:	mov	r0, r4
   15894:	mov	r2, #1
   15898:	str	r3, [sp]
   1589c:	movw	r3, #9808	; 0x2650
   158a0:	movt	r3, #4
   158a4:	strd	r8, [sp, #8]
   158a8:	bl	37700 <flatcc_json_printer_int64_field@@Base>
   158ac:	mov	ip, #0
   158b0:	mov	lr, #5
   158b4:	mov	r2, r6
   158b8:	mov	r1, r5
   158bc:	mov	r0, r4
   158c0:	movw	r3, #9812	; 0x2654
   158c4:	movt	r3, #4
   158c8:	str	lr, [sp]
   158cc:	str	ip, [sp, #4]
   158d0:	bl	369d0 <flatcc_json_printer_uint16_field@@Base>
   158d4:	add	sp, sp, #16
   158d8:	ldrd	r4, [sp]
   158dc:	ldr	r6, [sp, #8]
   158e0:	ldrd	r8, [sp, #12]
   158e4:	add	sp, sp, #20
   158e8:	pop	{pc}		; (ldr pc, [sp], #4)
   158ec:	movw	ip, #9528	; 0x2538
   158f0:	movt	ip, #4
   158f4:	strd	r4, [sp, #-16]!
   158f8:	mov	r4, #1
   158fc:	str	r6, [sp, #8]
   15900:	mov	r3, #0
   15904:	str	lr, [sp, #12]
   15908:	sub	sp, sp, #8
   1590c:	mov	r5, r1
   15910:	mov	r2, r1
   15914:	mov	r1, r3
   15918:	str	ip, [sp]
   1591c:	mov	r6, r0
   15920:	str	r4, [sp, #4]
   15924:	bl	39ed0 <flatcc_json_printer_int16_struct_field@@Base>
   15928:	movw	ip, #9820	; 0x265c
   1592c:	movt	ip, #4
   15930:	mov	r2, r5
   15934:	mov	r1, r4
   15938:	mov	r0, r6
   1593c:	mov	r3, #2
   15940:	str	ip, [sp]
   15944:	str	r4, [sp, #4]
   15948:	bl	39c7c <flatcc_json_printer_int8_struct_field@@Base>
   1594c:	add	sp, sp, #8
   15950:	ldrd	r4, [sp]
   15954:	ldr	r6, [sp, #8]
   15958:	add	sp, sp, #12
   1595c:	pop	{pc}		; (ldr pc, [sp], #4)
   15960:	ldrb	r3, [r1, #8]
   15964:	sub	r3, r3, #1
   15968:	cmp	r3, #3
   1596c:	ldrls	pc, [pc, r3, lsl #2]
   15970:	b	159b4 <_start@@Base+0xcd4>
   15974:	andeq	r5, r1, r8, lsr #19
   15978:	muleq	r1, ip, r9
   1597c:	muleq	r1, r0, r9
   15980:	andeq	r5, r1, r4, lsl #19
   15984:	movw	r2, #22968	; 0x59b8
   15988:	movt	r2, #1
   1598c:	b	40890 <flatcc_json_printer_union_table@@Base>
   15990:	movw	r2, #31232	; 0x7a00
   15994:	movt	r2, #1
   15998:	b	40890 <flatcc_json_printer_union_table@@Base>
   1599c:	movw	r2, #23764	; 0x5cd4
   159a0:	movt	r2, #1
   159a4:	b	40890 <flatcc_json_printer_union_table@@Base>
   159a8:	movw	r2, #21068	; 0x524c
   159ac:	movt	r2, #1
   159b0:	b	40890 <flatcc_json_printer_union_table@@Base>
   159b4:	bx	lr
   159b8:	movw	ip, #20272	; 0x4f30
   159bc:	movt	ip, #1
   159c0:	strd	r4, [sp, #-12]!
   159c4:	str	lr, [sp, #8]
   159c8:	sub	sp, sp, #20
   159cc:	mov	lr, #6
   159d0:	mov	r2, #0
   159d4:	movw	r3, #9824	; 0x2660
   159d8:	movt	r3, #4
   159dc:	str	lr, [sp]
   159e0:	mov	r4, r0
   159e4:	str	ip, [sp, #4]
   159e8:	mov	r5, r1
   159ec:	bl	402f4 <flatcc_json_printer_table_field@@Base>
   159f0:	mov	r2, #5
   159f4:	movw	r3, #23136	; 0x5a60
   159f8:	movt	r3, #1
   159fc:	mov	r1, r5
   15a00:	mov	r0, r4
   15a04:	strd	r2, [sp]
   15a08:	mov	r2, #1
   15a0c:	movw	r3, #9832	; 0x2668
   15a10:	movt	r3, #4
   15a14:	bl	402f4 <flatcc_json_printer_table_field@@Base>
   15a18:	mov	lr, #7
   15a1c:	movw	r3, #22880	; 0x5960
   15a20:	movt	r3, #1
   15a24:	movw	ip, #30164	; 0x75d4
   15a28:	movt	ip, #1
   15a2c:	mov	r1, r5
   15a30:	str	lr, [sp]
   15a34:	mov	r0, r4
   15a38:	mov	r2, #3
   15a3c:	str	ip, [sp, #4]
   15a40:	str	r3, [sp, #8]
   15a44:	movw	r3, #9840	; 0x2670
   15a48:	movt	r3, #4
   15a4c:	bl	3ffac <flatcc_json_printer_union_vector_field@@Base>
   15a50:	add	sp, sp, #20
   15a54:	ldrd	r4, [sp]
   15a58:	add	sp, sp, #8
   15a5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a60:	mov	r2, #14
   15a64:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15a68:	movw	r4, #23384	; 0x5b58
   15a6c:	movt	r4, #1
   15a70:	movw	r5, #23596	; 0x5c2c
   15a74:	movt	r5, #1
   15a78:	strd	r6, [sp, #8]
   15a7c:	movw	r3, #9848	; 0x2678
   15a80:	movt	r3, #4
   15a84:	strd	r8, [sp, #16]
   15a88:	mov	r8, #10
   15a8c:	str	lr, [sp, #24]
   15a90:	sub	sp, sp, #20
   15a94:	mov	r6, r0
   15a98:	mov	r7, r1
   15a9c:	mov	r9, #9
   15aa0:	stm	sp, {r2, r5}
   15aa4:	mov	r2, #1
   15aa8:	str	r4, [sp, #8]
   15aac:	bl	405c0 <flatcc_json_printer_union_field@@Base>
   15ab0:	mov	r1, r7
   15ab4:	mov	r0, r6
   15ab8:	str	r8, [sp]
   15abc:	mov	r2, #3
   15ac0:	movw	r3, #9864	; 0x2688
   15ac4:	movt	r3, #4
   15ac8:	str	r5, [sp, #4]
   15acc:	str	r4, [sp, #8]
   15ad0:	bl	405c0 <flatcc_json_printer_union_field@@Base>
   15ad4:	mov	r1, r7
   15ad8:	mov	r0, r6
   15adc:	str	r9, [sp]
   15ae0:	mov	r2, #5
   15ae4:	movw	r3, #9876	; 0x2694
   15ae8:	movt	r3, #4
   15aec:	str	r5, [sp, #4]
   15af0:	str	r4, [sp, #8]
   15af4:	bl	405c0 <flatcc_json_printer_union_field@@Base>
   15af8:	mov	r2, #5
   15afc:	mov	r1, r7
   15b00:	mov	r0, r6
   15b04:	movw	r3, #9888	; 0x26a0
   15b08:	movt	r3, #4
   15b0c:	stm	sp, {r2, r5}
   15b10:	mov	r2, #7
   15b14:	str	r4, [sp, #8]
   15b18:	bl	405c0 <flatcc_json_printer_union_field@@Base>
   15b1c:	mov	r2, r9
   15b20:	mov	r1, r7
   15b24:	str	r8, [sp]
   15b28:	mov	r0, r6
   15b2c:	movw	r3, #9896	; 0x26a8
   15b30:	movt	r3, #4
   15b34:	str	r5, [sp, #4]
   15b38:	str	r4, [sp, #8]
   15b3c:	bl	3ffac <flatcc_json_printer_union_vector_field@@Base>
   15b40:	add	sp, sp, #20
   15b44:	ldrd	r4, [sp]
   15b48:	ldrd	r6, [sp, #8]
   15b4c:	ldrd	r8, [sp, #16]
   15b50:	add	sp, sp, #24
   15b54:	pop	{pc}		; (ldr pc, [sp], #4)
   15b58:	ldrb	r3, [r1, #8]
   15b5c:	mov	r2, r1
   15b60:	mov	ip, r0
   15b64:	cmp	r3, #10
   15b68:	bhi	15b90 <_start@@Base+0xeb0>
   15b6c:	cmp	r3, #9
   15b70:	bcs	15bb4 <_start@@Base+0xed4>
   15b74:	cmp	r3, #2
   15b78:	beq	15bc0 <_start@@Base+0xee0>
   15b7c:	cmp	r3, #8
   15b80:	bne	15bac <_start@@Base+0xecc>
   15b84:	movw	r2, #23548	; 0x5bfc
   15b88:	movt	r2, #1
   15b8c:	b	409bc <flatcc_json_printer_union_struct@@Base>
   15b90:	cmp	r3, #11
   15b94:	beq	15ba0 <_start@@Base+0xec0>
   15b98:	cmp	r3, #255	; 0xff
   15b9c:	bne	15bb0 <_start@@Base+0xed0>
   15ba0:	mov	r1, r2
   15ba4:	mov	r0, ip
   15ba8:	b	40a90 <flatcc_json_printer_union_string@@Base>
   15bac:	bx	lr
   15bb0:	bx	lr
   15bb4:	movw	r2, #23500	; 0x5bcc
   15bb8:	movt	r2, #1
   15bbc:	b	409bc <flatcc_json_printer_union_struct@@Base>
   15bc0:	movw	r2, #20436	; 0x4fd4
   15bc4:	movt	r2, #1
   15bc8:	b	40890 <flatcc_json_printer_union_table@@Base>
   15bcc:	movw	ip, #9908	; 0x26b4
   15bd0:	movt	ip, #4
   15bd4:	push	{lr}		; (str lr, [sp, #-4]!)
   15bd8:	mov	lr, #10
   15bdc:	sub	sp, sp, #12
   15be0:	mov	r3, #0
   15be4:	mov	r2, r1
   15be8:	mov	r1, r3
   15bec:	stm	sp, {ip, lr}
   15bf0:	bl	3a084 <flatcc_json_printer_int32_struct_field@@Base>
   15bf4:	add	sp, sp, #12
   15bf8:	pop	{pc}		; (ldr pc, [sp], #4)
   15bfc:	movw	ip, #9920	; 0x26c0
   15c00:	movt	ip, #4
   15c04:	push	{lr}		; (str lr, [sp, #-4]!)
   15c08:	mov	lr, #11
   15c0c:	sub	sp, sp, #12
   15c10:	mov	r3, #0
   15c14:	mov	r2, r1
   15c18:	mov	r1, r3
   15c1c:	stm	sp, {ip, lr}
   15c20:	bl	397c8 <flatcc_json_printer_uint16_struct_field@@Base>
   15c24:	add	sp, sp, #12
   15c28:	pop	{pc}		; (ldr pc, [sp], #4)
   15c2c:	cmp	r1, #9
   15c30:	mov	r3, r0
   15c34:	beq	15c80 <_start@@Base+0xfa0>
   15c38:	bls	15c60 <_start@@Base+0xf80>
   15c3c:	cmp	r1, #11
   15c40:	beq	15c90 <_start@@Base+0xfb0>
   15c44:	bcc	15ca0 <_start@@Base+0xfc0>
   15c48:	cmp	r1, #255	; 0xff
   15c4c:	bne	15cb0 <_start@@Base+0xfd0>
   15c50:	movw	r1, #9976	; 0x26f8
   15c54:	movt	r1, #4
   15c58:	mov	r2, #6
   15c5c:	b	35ec0 <flatcc_json_printer_enum@@Base>
   15c60:	cmp	r1, #2
   15c64:	beq	15cc4 <_start@@Base+0xfe4>
   15c68:	cmp	r1, #8
   15c6c:	bne	15cb0 <_start@@Base+0xfd0>
   15c70:	mov	r2, r1
   15c74:	movw	r1, #9940	; 0x26d4
   15c78:	movt	r1, #4
   15c7c:	b	35ec0 <flatcc_json_printer_enum@@Base>
   15c80:	movw	r1, #9952	; 0x26e0
   15c84:	movt	r1, #4
   15c88:	mov	r2, #5
   15c8c:	b	35ec0 <flatcc_json_printer_enum@@Base>
   15c90:	movw	r1, #9968	; 0x26f0
   15c94:	movt	r1, #4
   15c98:	mov	r2, #5
   15c9c:	b	35ec0 <flatcc_json_printer_enum@@Base>
   15ca0:	movw	r1, #9960	; 0x26e8
   15ca4:	movt	r1, #4
   15ca8:	mov	r2, #7
   15cac:	b	35ec0 <flatcc_json_printer_enum@@Base>
   15cb0:	movw	r1, #25296	; 0x62d0
   15cb4:	movt	r1, #4
   15cb8:	mov	r0, r3
   15cbc:	mov	r2, #4
   15cc0:	b	35ec0 <flatcc_json_printer_enum@@Base>
   15cc4:	movw	r1, #9932	; 0x26cc
   15cc8:	movt	r1, #4
   15ccc:	mov	r2, #5
   15cd0:	b	35ec0 <flatcc_json_printer_enum@@Base>
   15cd4:	mov	ip, #5
   15cd8:	strd	r4, [sp, #-20]!	; 0xffffffec
   15cdc:	mov	r4, #2
   15ce0:	movw	r5, #23948	; 0x5d8c
   15ce4:	movt	r5, #1
   15ce8:	strd	r6, [sp, #8]
   15cec:	str	lr, [sp, #16]
   15cf0:	sub	sp, sp, #20
   15cf4:	mov	r2, #0
   15cf8:	movw	r3, #9312	; 0x2460
   15cfc:	movt	r3, #4
   15d00:	str	ip, [sp]
   15d04:	mov	r6, r0
   15d08:	mov	r7, r1
   15d0c:	strd	r4, [sp, #4]
   15d10:	bl	388b4 <flatcc_json_printer_int8_enum_field@@Base>
   15d14:	mov	r2, #6
   15d18:	mov	r1, r7
   15d1c:	mov	r0, r6
   15d20:	movw	r3, #9984	; 0x2700
   15d24:	movt	r3, #4
   15d28:	stm	sp, {r2, r4, r5}
   15d2c:	mov	r2, #1
   15d30:	bl	388b4 <flatcc_json_printer_int8_enum_field@@Base>
   15d34:	mov	r2, r4
   15d38:	mov	r1, r7
   15d3c:	str	r4, [sp]
   15d40:	mov	r0, r6
   15d44:	movw	r3, #9992	; 0x2708
   15d48:	movt	r3, #4
   15d4c:	str	r4, [sp, #4]
   15d50:	bl	36730 <flatcc_json_printer_uint8_field@@Base>
   15d54:	mov	ip, #3
   15d58:	mov	r1, r7
   15d5c:	mov	r0, r6
   15d60:	mov	r2, ip
   15d64:	movw	r3, #9996	; 0x270c
   15d68:	movt	r3, #4
   15d6c:	str	ip, [sp]
   15d70:	str	r4, [sp, #4]
   15d74:	bl	36730 <flatcc_json_printer_uint8_field@@Base>
   15d78:	add	sp, sp, #20
   15d7c:	ldrd	r4, [sp]
   15d80:	ldrd	r6, [sp, #8]
   15d84:	add	sp, sp, #16
   15d88:	pop	{pc}		; (ldr pc, [sp], #4)
   15d8c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15d90:	uxtb	r4, r1
   15d94:	tst	r4, #244	; 0xf4
   15d98:	strd	r6, [sp, #8]
   15d9c:	movne	r5, #1
   15da0:	moveq	r5, #0
   15da4:	str	r8, [sp, #16]
   15da8:	cmp	r4, #0
   15dac:	str	lr, [sp, #20]
   15db0:	moveq	r5, #1
   15db4:	cmp	r5, #0
   15db8:	beq	15dd4 <_start@@Base+0x10f4>
   15dbc:	ldrd	r4, [sp]
   15dc0:	ldrd	r6, [sp, #8]
   15dc4:	ldr	r8, [sp, #16]
   15dc8:	ldr	lr, [sp, #20]
   15dcc:	add	sp, sp, #24
   15dd0:	b	35c48 <flatcc_json_printer_int8@@Base>
   15dd4:	sub	r3, r4, #1
   15dd8:	mov	r6, r0
   15ddc:	tst	r3, r4
   15de0:	movne	r7, #1
   15de4:	moveq	r7, #0
   15de8:	mov	r1, r7
   15dec:	bl	35f50 <flatcc_json_printer_delimit_enum_flags@@Base>
   15df0:	ands	r1, r4, #1
   15df4:	moveq	r5, #1
   15df8:	bne	15e2c <_start@@Base+0x114c>
   15dfc:	tst	r4, #2
   15e00:	bne	15e54 <_start@@Base+0x1174>
   15e04:	tst	r4, #8
   15e08:	bne	15e74 <_start@@Base+0x1194>
   15e0c:	mov	r1, r7
   15e10:	mov	r0, r6
   15e14:	ldrd	r4, [sp]
   15e18:	ldrd	r6, [sp, #8]
   15e1c:	ldr	r8, [sp, #16]
   15e20:	ldr	lr, [sp, #20]
   15e24:	add	sp, sp, #24
   15e28:	b	35f50 <flatcc_json_printer_delimit_enum_flags@@Base>
   15e2c:	mov	r1, r5
   15e30:	movw	r2, #10000	; 0x2710
   15e34:	movt	r2, #4
   15e38:	mov	r3, #3
   15e3c:	mov	r0, r6
   15e40:	mov	r5, #2
   15e44:	bl	35f80 <flatcc_json_printer_enum_flag@@Base>
   15e48:	tst	r4, #2
   15e4c:	mov	r1, #1
   15e50:	beq	15e04 <_start@@Base+0x1124>
   15e54:	movw	r2, #10004	; 0x2714
   15e58:	movt	r2, #4
   15e5c:	mov	r3, #5
   15e60:	mov	r0, r6
   15e64:	bl	35f80 <flatcc_json_printer_enum_flag@@Base>
   15e68:	tst	r4, #8
   15e6c:	mov	r1, r5
   15e70:	beq	15e0c <_start@@Base+0x112c>
   15e74:	movw	r2, #10012	; 0x271c
   15e78:	movt	r2, #4
   15e7c:	mov	r3, #4
   15e80:	mov	r0, r6
   15e84:	bl	35f80 <flatcc_json_printer_enum_flag@@Base>
   15e88:	b	15e0c <_start@@Base+0x112c>
   15e8c:	movw	ip, #10140	; 0x279c
   15e90:	movt	ip, #4
   15e94:	strd	r4, [sp, #-16]!
   15e98:	str	r6, [sp, #8]
   15e9c:	mov	r6, #1
   15ea0:	mov	r3, #0
   15ea4:	str	lr, [sp, #12]
   15ea8:	sub	sp, sp, #16
   15eac:	mov	r4, r1
   15eb0:	mov	r2, r1
   15eb4:	mov	r1, r3
   15eb8:	str	ip, [sp]
   15ebc:	mov	r5, r0
   15ec0:	str	r6, [sp, #4]
   15ec4:	bl	3a5c8 <flatcc_json_printer_float_struct_field@@Base>
   15ec8:	movw	r3, #9380	; 0x24a4
   15ecc:	movt	r3, #4
   15ed0:	mov	r2, r4
   15ed4:	mov	r1, r6
   15ed8:	mov	r0, r5
   15edc:	stm	sp, {r3, r6}
   15ee0:	mov	r3, #4
   15ee4:	bl	3a5c8 <flatcc_json_printer_float_struct_field@@Base>
   15ee8:	movw	ip, #10020	; 0x2724
   15eec:	movt	ip, #4
   15ef0:	mov	r2, r4
   15ef4:	mov	r0, r5
   15ef8:	mov	r3, #8
   15efc:	mov	r1, #2
   15f00:	str	ip, [sp]
   15f04:	str	r6, [sp, #4]
   15f08:	mov	r6, #5
   15f0c:	bl	3a5c8 <flatcc_json_printer_float_struct_field@@Base>
   15f10:	movw	r1, #10024	; 0x2728
   15f14:	movt	r1, #4
   15f18:	mov	r2, r4
   15f1c:	mov	r0, r5
   15f20:	mov	r3, #16
   15f24:	stm	sp, {r1, r6}
   15f28:	mov	r1, #3
   15f2c:	bl	3a75c <flatcc_json_printer_double_struct_field@@Base>
   15f30:	movw	r3, #23948	; 0x5d8c
   15f34:	movt	r3, #1
   15f38:	movw	r1, #10032	; 0x2730
   15f3c:	movt	r1, #4
   15f40:	mov	r2, r4
   15f44:	mov	r0, r5
   15f48:	stm	sp, {r1, r6}
   15f4c:	mov	r1, #4
   15f50:	str	r3, [sp, #8]
   15f54:	mov	r3, #24
   15f58:	bl	3b0f8 <flatcc_json_printer_int8_enum_struct_field@@Base>
   15f5c:	movw	r3, #22764	; 0x58ec
   15f60:	movt	r3, #1
   15f64:	str	r6, [sp, #4]
   15f68:	movw	ip, #10040	; 0x2738
   15f6c:	movt	ip, #4
   15f70:	mov	r2, r4
   15f74:	mov	r1, r6
   15f78:	mov	r0, r5
   15f7c:	str	ip, [sp]
   15f80:	str	r3, [sp, #8]
   15f84:	mov	r3, #26
   15f88:	bl	40aa8 <flatcc_json_printer_embedded_struct_field@@Base>
   15f8c:	add	sp, sp, #16
   15f90:	ldrd	r4, [sp]
   15f94:	ldr	r6, [sp, #8]
   15f98:	add	sp, sp, #12
   15f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   15fa0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15fa4:	mov	r4, r1
   15fa8:	mov	r1, r2
   15fac:	strd	r6, [sp, #8]
   15fb0:	mov	r5, r2
   15fb4:	strd	r8, [sp, #16]
   15fb8:	mov	r8, r0
   15fbc:	mov	r0, r4
   15fc0:	str	sl, [sp, #24]
   15fc4:	mov	r9, r3
   15fc8:	str	lr, [sp, #28]
   15fcc:	sub	sp, sp, #8
   15fd0:	bl	14dd0 <_start@@Base+0xf0>
   15fd4:	add	r3, pc, #652	; 0x28c
   15fd8:	ldrd	r2, [r3]
   15fdc:	cmp	r1, r3
   15fe0:	cmpeq	r0, r2
   15fe4:	bhi	160a8 <_start@@Base+0x13c8>
   15fe8:	add	r7, pc, #640	; 0x280
   15fec:	ldrd	r6, [r7]
   15ff0:	and	r2, r0, #-16777216	; 0xff000000
   15ff4:	mov	r3, r1
   15ff8:	cmp	r1, r7
   15ffc:	cmpeq	r0, r6
   16000:	bhi	16038 <_start@@Base+0x1358>
   16004:	add	r1, pc, #620	; 0x26c
   16008:	ldrd	r0, [r1]
   1600c:	cmp	r3, r1
   16010:	cmpeq	r2, r0
   16014:	beq	161e0 <_start@@Base+0x1500>
   16018:	mov	r0, r4
   1601c:	add	sp, sp, #8
   16020:	ldrd	r4, [sp]
   16024:	ldrd	r6, [sp, #8]
   16028:	ldrd	r8, [sp, #16]
   1602c:	ldr	sl, [sp, #24]
   16030:	add	sp, sp, #28
   16034:	pop	{pc}		; (ldr pc, [sp], #4)
   16038:	add	r7, pc, #576	; 0x240
   1603c:	ldrd	r6, [r7]
   16040:	cmp	r1, r7
   16044:	cmpeq	r2, r6
   16048:	beq	1620c <_start@@Base+0x152c>
   1604c:	add	r7, pc, #564	; 0x234
   16050:	ldrd	r6, [r7]
   16054:	bic	r2, r0, #255	; 0xff
   16058:	cmp	r1, r7
   1605c:	cmpeq	r2, r6
   16060:	bne	16018 <_start@@Base+0x1338>
   16064:	ldr	r3, [sp, #44]	; 0x2c
   16068:	mov	r2, r5
   1606c:	mov	r0, r8
   16070:	mov	r1, r4
   16074:	str	r3, [sp]
   16078:	mov	r3, #7
   1607c:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   16080:	cmp	r4, r0
   16084:	movne	r6, #10
   16088:	beq	16018 <_start@@Base+0x1338>
   1608c:	ldr	r2, [sp, #40]	; 0x28
   16090:	mov	r7, #0
   16094:	mov	r3, #0
   16098:	mov	r4, r0
   1609c:	strd	r6, [r2]
   160a0:	str	r3, [r9]
   160a4:	b	16018 <_start@@Base+0x1338>
   160a8:	add	r3, pc, #480	; 0x1e0
   160ac:	ldrd	r2, [r3]
   160b0:	cmp	r1, r3
   160b4:	cmpeq	r0, r2
   160b8:	bhi	16114 <_start@@Base+0x1434>
   160bc:	add	r7, pc, #468	; 0x1d4
   160c0:	ldrd	r6, [r7]
   160c4:	mov	sl, #0
   160c8:	cmp	r1, r7
   160cc:	cmpeq	sl, r6
   160d0:	bne	16018 <_start@@Base+0x1338>
   160d4:	ldr	r3, [sp, #44]	; 0x2c
   160d8:	mov	r2, r5
   160dc:	mov	r0, r8
   160e0:	mov	r1, r4
   160e4:	str	r3, [sp]
   160e8:	mov	r3, #4
   160ec:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   160f0:	cmp	r4, r0
   160f4:	beq	16018 <_start@@Base+0x1338>
   160f8:	ldr	r1, [sp, #40]	; 0x28
   160fc:	mov	r2, #0
   16100:	mov	r3, #0
   16104:	mov	r4, r0
   16108:	strd	r2, [r1]
   1610c:	str	sl, [r9]
   16110:	b	16018 <_start@@Base+0x1338>
   16114:	add	r3, pc, #388	; 0x184
   16118:	ldrd	r2, [r3]
   1611c:	cmp	r1, r3
   16120:	cmpeq	r0, r2
   16124:	bls	1619c <_start@@Base+0x14bc>
   16128:	add	r7, pc, #376	; 0x178
   1612c:	ldrd	r6, [r7]
   16130:	lsr	r2, r0, #16
   16134:	lsl	r2, r2, #16
   16138:	cmp	r1, r7
   1613c:	cmpeq	r2, r6
   16140:	beq	16238 <_start@@Base+0x1558>
   16144:	add	r3, pc, #356	; 0x164
   16148:	ldrd	r2, [r3]
   1614c:	cmp	r1, r3
   16150:	cmpeq	r0, r2
   16154:	bne	16018 <_start@@Base+0x1338>
   16158:	ldr	r3, [sp, #44]	; 0x2c
   1615c:	mov	r2, r5
   16160:	mov	r0, r8
   16164:	mov	r1, r4
   16168:	str	r3, [sp]
   1616c:	mov	r3, #8
   16170:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   16174:	cmp	r4, r0
   16178:	beq	16018 <_start@@Base+0x1338>
   1617c:	ldr	r2, [sp, #40]	; 0x28
   16180:	mov	r4, r0
   16184:	mov	r1, #0
   16188:	mov	r0, #8
   1618c:	mov	r3, #0
   16190:	strd	r0, [r2]
   16194:	str	r3, [r9]
   16198:	b	16018 <_start@@Base+0x1338>
   1619c:	add	r7, pc, #276	; 0x114
   161a0:	ldrd	r6, [r7]
   161a4:	and	r2, r0, #-16777216	; 0xff000000
   161a8:	cmp	r1, r7
   161ac:	cmpeq	r2, r6
   161b0:	bne	16018 <_start@@Base+0x1338>
   161b4:	ldr	r3, [sp, #44]	; 0x2c
   161b8:	mov	r2, r5
   161bc:	mov	r0, r8
   161c0:	mov	r1, r4
   161c4:	str	r3, [sp]
   161c8:	mov	r3, #5
   161cc:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   161d0:	cmp	r4, r0
   161d4:	movne	r6, #11
   161d8:	bne	1608c <_start@@Base+0x13ac>
   161dc:	b	16018 <_start@@Base+0x1338>
   161e0:	ldr	r3, [sp, #44]	; 0x2c
   161e4:	mov	r2, r5
   161e8:	mov	r0, r8
   161ec:	mov	r1, r4
   161f0:	str	r3, [sp]
   161f4:	mov	r3, #5
   161f8:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   161fc:	cmp	r4, r0
   16200:	movne	r6, #9
   16204:	bne	1608c <_start@@Base+0x13ac>
   16208:	b	16018 <_start@@Base+0x1338>
   1620c:	ldr	r3, [sp, #44]	; 0x2c
   16210:	mov	r2, r5
   16214:	mov	r0, r8
   16218:	mov	r1, r4
   1621c:	str	r3, [sp]
   16220:	mov	r3, #5
   16224:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   16228:	cmp	r4, r0
   1622c:	movne	r6, #2
   16230:	bne	1608c <_start@@Base+0x13ac>
   16234:	b	16018 <_start@@Base+0x1338>
   16238:	ldr	r3, [sp, #44]	; 0x2c
   1623c:	mov	r2, r5
   16240:	mov	r0, r8
   16244:	mov	r1, r4
   16248:	str	r3, [sp]
   1624c:	mov	r3, #6
   16250:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   16254:	cmp	r4, r0
   16258:	beq	16018 <_start@@Base+0x1338>
   1625c:	mov	r6, #255	; 0xff
   16260:	b	1608c <_start@@Base+0x13ac>
   16264:	nop	{0}
   16268:			; <UNDEFINED> instruction: 0xffffffff
   1626c:	cdpmi	14, 4, cr4, cr15, cr4, {2}
   16270:			; <UNDEFINED> instruction: 0x46616dff
   16274:	rsbmi	r6, pc, #428	; 0x1ac
   16278:	strvs	r0, [r0, #-0]
   1627c:	rsbmi	r6, r5, #108, 24	; 0x6c00
   16280:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   16284:	ldclmi	12, cr4, [r5, #-388]!	; 0xfffffe7c
   16288:	strbtmi	r6, [r1], -r0, lsl #28
   1628c:	rsbmi	r6, pc, #428	; 0x1ac
   16290:	ldrshvc	pc, [pc, #255]	; 16397 <_start@@Base+0x16b7>	; <UNPREDICTABLE>
   16294:	svcmi	0x00746865
   16298:	andeq	r0, r0, r0
   1629c:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   162a0:	cdpvs	5, 7, cr6, cr10, cr11, {3}
   162a4:	rsbpl	r7, r1, #117	; 0x75
   162a8:	strbvs	r0, [r4, #-0]!
   162ac:	strbpl	r7, [lr, #-1395]!	; 0xfffffa8d
   162b0:	cdpvs	5, 7, cr6, cr10, cr12, {3}
   162b4:	rsbpl	r7, r1, #117	; 0x75
   162b8:	andvc	r0, r0, #0
   162bc:	svcmi	0x00746865
   162c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   162c4:	mov	r4, r1
   162c8:	mov	r1, r2
   162cc:	strd	r6, [sp, #8]
   162d0:	mov	r5, r2
   162d4:	strd	r8, [sp, #16]
   162d8:	mov	r8, r0
   162dc:	mov	r0, r4
   162e0:	strd	sl, [sp, #24]
   162e4:	mov	r9, r3
   162e8:	str	lr, [sp, #32]
   162ec:	sub	sp, sp, #12
   162f0:	bl	14dd0 <_start@@Base+0xf0>
   162f4:	add	r3, pc, #524	; 0x20c
   162f8:	ldrd	r2, [r3]
   162fc:	cmp	r1, r3
   16300:	cmpeq	r0, r2
   16304:	bhi	16344 <_start@@Base+0x1664>
   16308:	add	r7, pc, #512	; 0x200
   1630c:	ldrd	r6, [r7]
   16310:	bic	r3, r1, #255	; 0xff
   16314:	mov	sl, #0
   16318:	cmp	r3, r7
   1631c:	cmpeq	sl, r6
   16320:	beq	16420 <_start@@Base+0x1740>
   16324:	mov	r0, r4
   16328:	add	sp, sp, #12
   1632c:	ldrd	r4, [sp]
   16330:	ldrd	r6, [sp, #8]
   16334:	ldrd	r8, [sp, #16]
   16338:	ldrd	sl, [sp, #24]
   1633c:	add	sp, sp, #32
   16340:	pop	{pc}		; (ldr pc, [sp], #4)
   16344:	add	r3, pc, #460	; 0x1cc
   16348:	ldrd	r2, [r3]
   1634c:	cmp	r1, r3
   16350:	cmpeq	r0, r2
   16354:	beq	164d8 <_start@@Base+0x17f8>
   16358:	add	r7, pc, #448	; 0x1c0
   1635c:	ldrd	r6, [r7]
   16360:	bic	r2, r0, #255	; 0xff
   16364:	cmp	r1, r7
   16368:	cmpeq	r2, r6
   1636c:	beq	16498 <_start@@Base+0x17b8>
   16370:	add	r7, pc, #432	; 0x1b0
   16374:	ldrd	r6, [r7]
   16378:	mov	sl, #0
   1637c:	cmp	r1, r7
   16380:	cmpeq	sl, r6
   16384:	beq	1645c <_start@@Base+0x177c>
   16388:	add	r3, pc, #416	; 0x1a0
   1638c:	ldrd	r2, [r3]
   16390:	cmp	r1, r3
   16394:	cmpeq	r0, r2
   16398:	bne	16324 <_start@@Base+0x1644>
   1639c:	mov	r1, r5
   163a0:	add	r0, r4, #8
   163a4:	bl	14dd0 <_start@@Base+0xf0>
   163a8:	add	r3, pc, #392	; 0x188
   163ac:	ldrd	r2, [r3]
   163b0:	cmp	r1, r3
   163b4:	cmpeq	r0, r2
   163b8:	bne	16324 <_start@@Base+0x1644>
   163bc:	add	r7, pc, #380	; 0x17c
   163c0:	ldrd	r6, [r7]
   163c4:	add	fp, r4, #16
   163c8:	mov	r1, r5
   163cc:	mov	r0, fp
   163d0:	bl	14dd0 <_start@@Base+0xf0>
   163d4:	bic	r2, r0, #255	; 0xff
   163d8:	cmp	r1, r7
   163dc:	cmpeq	r2, r6
   163e0:	bne	16324 <_start@@Base+0x1644>
   163e4:	ldr	r3, [sp, #52]	; 0x34
   163e8:	mov	r2, r5
   163ec:	mov	r0, r8
   163f0:	mov	r1, fp
   163f4:	str	r3, [sp]
   163f8:	mov	r3, #7
   163fc:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   16400:	cmp	fp, r0
   16404:	beq	16324 <_start@@Base+0x1644>
   16408:	ldr	r1, [sp, #48]	; 0x30
   1640c:	mov	r2, #2
   16410:	mov	r3, #0
   16414:	strd	r2, [r1]
   16418:	str	sl, [r9]
   1641c:	b	16328 <_start@@Base+0x1648>
   16420:	ldr	r3, [sp, #52]	; 0x34
   16424:	mov	r2, r5
   16428:	mov	r0, r8
   1642c:	mov	r1, r4
   16430:	str	r3, [sp]
   16434:	mov	r3, #3
   16438:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   1643c:	cmp	r4, r0
   16440:	beq	16328 <_start@@Base+0x1648>
   16444:	ldr	r1, [sp, #48]	; 0x30
   16448:	mov	r2, #4
   1644c:	mov	r3, #0
   16450:	strd	r2, [r1]
   16454:	str	sl, [r9]
   16458:	b	16328 <_start@@Base+0x1648>
   1645c:	ldr	r3, [sp, #52]	; 0x34
   16460:	mov	r2, r5
   16464:	mov	r0, r8
   16468:	mov	r1, r4
   1646c:	str	r3, [sp]
   16470:	mov	r3, #4
   16474:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   16478:	cmp	r4, r0
   1647c:	beq	16328 <_start@@Base+0x1648>
   16480:	ldr	r1, [sp, #48]	; 0x30
   16484:	mov	r2, #0
   16488:	mov	r3, #0
   1648c:	strd	r2, [r1]
   16490:	str	sl, [r9]
   16494:	b	16328 <_start@@Base+0x1648>
   16498:	ldr	r3, [sp, #52]	; 0x34
   1649c:	mov	r2, r5
   164a0:	mov	r0, r8
   164a4:	mov	r1, r4
   164a8:	str	r3, [sp]
   164ac:	mov	r3, #7
   164b0:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   164b4:	cmp	r4, r0
   164b8:	beq	16324 <_start@@Base+0x1644>
   164bc:	mov	r4, #1
   164c0:	ldr	r2, [sp, #48]	; 0x30
   164c4:	mov	r5, #0
   164c8:	mov	r3, #0
   164cc:	strd	r4, [r2]
   164d0:	str	r3, [r9]
   164d4:	b	16328 <_start@@Base+0x1648>
   164d8:	ldr	r3, [sp, #52]	; 0x34
   164dc:	mov	r1, r4
   164e0:	mov	r2, r5
   164e4:	mov	r0, r8
   164e8:	str	r3, [sp]
   164ec:	mov	r3, #8
   164f0:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   164f4:	cmp	r4, r0
   164f8:	movne	r4, #3
   164fc:	bne	164c0 <_start@@Base+0x17e0>
   16500:	b	16324 <_start@@Base+0x1644>
   16504:	nop	{0}
   16508:	strbtvc	r7, [r5], #-511	; 0xfffffe01
   1650c:	stclmi	14, cr6, [pc, #-460]!	; 16348 <_start@@Base+0x1668>
   16510:	andeq	r0, r0, r0
   16514:	cmnmi	ip, r0, lsl #8
   16518:	strbtvc	r7, [r5], #-562	; 0xfffffdce
   1651c:	stclmi	14, cr6, [pc, #-460]!	; 16358 <_start@@Base+0x1678>
   16520:	strbtvc	r7, [r5], #-512	; 0xfffffe00
   16524:	stclmi	14, cr6, [pc, #-460]!	; 16360 <_start@@Base+0x1680>
   16528:	andeq	r0, r0, r0
   1652c:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16530:	cmnpl	r9, #112, 26	; 0x1c00
   16534:	strbtpl	r7, [r5], #-884	; 0xfffffc8c
   16538:	rsbvs	r6, ip, #364904448	; 0x15c00000
   1653c:	cfstrdvs	mvd5, [r5], #-388	; 0xfffffe7c
   16540:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   16544:	ldmdbvs	r4!, {r0, r2, r6, fp, sp, lr}^
   16548:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1654c:	mov	r4, r1
   16550:	mov	r5, r0
   16554:	mov	r1, r2
   16558:	mov	r0, r4
   1655c:	strd	r6, [sp, #8]
   16560:	strd	r8, [sp, #16]
   16564:	strd	sl, [sp, #24]
   16568:	mov	sl, r2
   1656c:	mov	fp, r3
   16570:	str	lr, [sp, #32]
   16574:	sub	sp, sp, #12
   16578:	bl	14dd0 <_start@@Base+0xf0>
   1657c:	add	r3, pc, #316	; 0x13c
   16580:	ldrd	r2, [r3]
   16584:	cmp	r1, r3
   16588:	cmpeq	r0, r2
   1658c:	bhi	165c8 <_start@@Base+0x18e8>
   16590:	add	r7, pc, #304	; 0x130
   16594:	ldrd	r6, [r7]
   16598:	mov	r8, #0
   1659c:	cmp	r1, r7
   165a0:	cmpeq	r8, r6
   165a4:	beq	1663c <_start@@Base+0x195c>
   165a8:	mov	r0, r4
   165ac:	add	sp, sp, #12
   165b0:	ldrd	r4, [sp]
   165b4:	ldrd	r6, [sp, #8]
   165b8:	ldrd	r8, [sp, #16]
   165bc:	ldrd	sl, [sp, #24]
   165c0:	add	sp, sp, #32
   165c4:	pop	{pc}		; (ldr pc, [sp], #4)
   165c8:	add	r9, pc, #256	; 0x100
   165cc:	ldrd	r8, [r9]
   165d0:	lsr	r6, r0, #16
   165d4:	lsl	r6, r6, #16
   165d8:	cmp	r1, r9
   165dc:	cmpeq	r6, r8
   165e0:	beq	1667c <_start@@Base+0x199c>
   165e4:	add	r7, pc, #236	; 0xec
   165e8:	ldrd	r6, [r7]
   165ec:	mov	r8, #0
   165f0:	cmp	r1, r7
   165f4:	cmpeq	r8, r6
   165f8:	bne	165a8 <_start@@Base+0x18c8>
   165fc:	ldr	r3, [sp, #52]	; 0x34
   16600:	mov	r2, sl
   16604:	mov	r0, r5
   16608:	mov	r1, r4
   1660c:	str	r3, [sp]
   16610:	mov	r3, #4
   16614:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   16618:	cmp	r4, r0
   1661c:	beq	165a8 <_start@@Base+0x18c8>
   16620:	add	r3, pc, #184	; 0xb8
   16624:	ldrd	r2, [r3]
   16628:	mov	r4, r0
   1662c:	ldr	r1, [sp, #48]	; 0x30
   16630:	strd	r2, [r1]
   16634:	str	r8, [fp]
   16638:	b	165a8 <_start@@Base+0x18c8>
   1663c:	ldr	r3, [sp, #52]	; 0x34
   16640:	mov	r2, sl
   16644:	mov	r0, r5
   16648:	mov	r1, r4
   1664c:	str	r3, [sp]
   16650:	mov	r3, #4
   16654:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   16658:	cmp	r4, r0
   1665c:	beq	165a8 <_start@@Base+0x18c8>
   16660:	ldr	r1, [sp, #48]	; 0x30
   16664:	mov	r2, #3
   16668:	mov	r3, #0
   1666c:	mov	r4, r0
   16670:	strd	r2, [r1]
   16674:	str	r8, [fp]
   16678:	b	165a8 <_start@@Base+0x18c8>
   1667c:	ldr	r3, [sp, #52]	; 0x34
   16680:	mov	r2, sl
   16684:	mov	r0, r5
   16688:	mov	r1, r4
   1668c:	str	r3, [sp]
   16690:	mov	r3, #6
   16694:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   16698:	cmp	r4, r0
   1669c:	beq	165a8 <_start@@Base+0x18c8>
   166a0:	ldr	r2, [sp, #48]	; 0x30
   166a4:	mvn	r6, #1
   166a8:	mvn	r7, #0
   166ac:	mov	r3, #1
   166b0:	mov	r4, r0
   166b4:	strd	r6, [r2]
   166b8:	str	r3, [fp]
   166bc:	b	165a8 <_start@@Base+0x18c8>
   166c0:			; <UNDEFINED> instruction: 0xffffffff
   166c4:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   166c8:	andeq	r0, r0, r0
   166cc:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   166d0:	strbvs	r0, [r7, #-0]!
   166d4:	stmdavs	r5!, {r1, r2, r3, r5, r6, fp, ip, sp, lr}^
   166d8:	andeq	r0, r0, r0
   166dc:	stmdavs	r5!, {r1, r4, r5, fp, ip, sp, lr}^
   166e0:	cdpvc	14, 10, cr11, cr15, cr15, {5}
   166e4:	andeq	r0, r0, r0
   166e8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   166ec:	mov	r4, r1
   166f0:	mov	r1, r2
   166f4:	strd	r6, [sp, #8]
   166f8:	mov	r5, r2
   166fc:	strd	r8, [sp, #16]
   16700:	mov	r8, r0
   16704:	mov	r0, r4
   16708:	str	sl, [sp, #24]
   1670c:	mov	r9, r3
   16710:	str	lr, [sp, #28]
   16714:	sub	sp, sp, #8
   16718:	bl	14dd0 <_start@@Base+0xf0>
   1671c:	add	r3, pc, #412	; 0x19c
   16720:	ldrd	r2, [r3]
   16724:	cmp	r1, r3
   16728:	cmpeq	r0, r2
   1672c:	bhi	16768 <_start@@Base+0x1a88>
   16730:	add	r7, pc, #400	; 0x190
   16734:	ldrd	r6, [r7]
   16738:	mov	sl, #0
   1673c:	cmp	r1, r7
   16740:	cmpeq	sl, r6
   16744:	beq	16838 <_start@@Base+0x1b58>
   16748:	mov	r0, r4
   1674c:	add	sp, sp, #8
   16750:	ldrd	r4, [sp]
   16754:	ldrd	r6, [sp, #8]
   16758:	ldrd	r8, [sp, #16]
   1675c:	ldr	sl, [sp, #24]
   16760:	add	sp, sp, #28
   16764:	pop	{pc}		; (ldr pc, [sp], #4)
   16768:	add	r3, pc, #352	; 0x160
   1676c:	ldrd	r2, [r3]
   16770:	cmp	r1, r3
   16774:	cmpeq	r0, r2
   16778:	bhi	167c0 <_start@@Base+0x1ae0>
   1677c:	add	r7, pc, #340	; 0x154
   16780:	ldrd	r6, [r7]
   16784:	mov	sl, #0
   16788:	cmp	r1, r7
   1678c:	cmpeq	sl, r6
   16790:	bne	16748 <_start@@Base+0x1a68>
   16794:	ldr	r3, [sp, #44]	; 0x2c
   16798:	mov	r2, r5
   1679c:	mov	r0, r8
   167a0:	mov	r1, r4
   167a4:	str	r3, [sp]
   167a8:	mov	r3, #4
   167ac:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   167b0:	cmp	r4, r0
   167b4:	beq	16748 <_start@@Base+0x1a68>
   167b8:	mov	r2, #42	; 0x2a
   167bc:	b	16860 <_start@@Base+0x1b80>
   167c0:	add	r7, pc, #280	; 0x118
   167c4:	ldrd	r6, [r7]
   167c8:	bic	r2, r0, #255	; 0xff
   167cc:	cmp	r1, r7
   167d0:	cmpeq	r2, r6
   167d4:	beq	16878 <_start@@Base+0x1b98>
   167d8:	add	r7, pc, #264	; 0x108
   167dc:	ldrd	r6, [r7]
   167e0:	lsr	r2, r0, #16
   167e4:	lsl	r2, r2, #16
   167e8:	cmp	r1, r7
   167ec:	cmpeq	r2, r6
   167f0:	bne	16748 <_start@@Base+0x1a68>
   167f4:	ldr	r3, [sp, #44]	; 0x2c
   167f8:	mov	r2, r5
   167fc:	mov	r0, r8
   16800:	mov	r1, r4
   16804:	str	r3, [sp]
   16808:	mov	r3, #6
   1680c:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   16810:	cmp	r4, r0
   16814:	beq	16748 <_start@@Base+0x1a68>
   16818:	ldr	r2, [sp, #40]	; 0x28
   1681c:	mov	r4, r0
   16820:	mvn	r1, #0
   16824:	mvn	r0, #1
   16828:	mov	r3, #1
   1682c:	strd	r0, [r2]
   16830:	str	r3, [r9]
   16834:	b	16748 <_start@@Base+0x1a68>
   16838:	ldr	r3, [sp, #44]	; 0x2c
   1683c:	mov	r2, r5
   16840:	mov	r0, r8
   16844:	mov	r1, r4
   16848:	str	r3, [sp]
   1684c:	mov	r3, #4
   16850:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   16854:	cmp	r4, r0
   16858:	movne	r2, #2
   1685c:	beq	16748 <_start@@Base+0x1a68>
   16860:	ldr	r1, [sp, #40]	; 0x28
   16864:	mov	r3, #0
   16868:	mov	r4, r0
   1686c:	strd	r2, [r1]
   16870:	str	sl, [r9]
   16874:	b	16748 <_start@@Base+0x1a68>
   16878:	ldr	r3, [sp, #44]	; 0x2c
   1687c:	mov	r2, r5
   16880:	mov	r0, r8
   16884:	mov	r1, r4
   16888:	str	r3, [sp]
   1688c:	mov	r3, #7
   16890:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   16894:	cmp	r4, r0
   16898:	beq	16748 <_start@@Base+0x1a68>
   1689c:	ldr	r2, [sp, #40]	; 0x28
   168a0:	mvn	r6, #0
   168a4:	mvn	r7, #0
   168a8:	mov	r3, #1
   168ac:	mov	r4, r0
   168b0:	strd	r6, [r2]
   168b4:	str	r3, [r9]
   168b8:	b	16748 <_start@@Base+0x1a68>
   168bc:	nop	{0}
   168c0:			; <UNDEFINED> instruction: 0xffffffff
   168c4:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   168c8:	andeq	r0, r0, r0
   168cc:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   168d0:	strbvs	pc, [r6, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   168d4:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   168d8:	andeq	r0, r0, r0
   168dc:	stmdbvs	lr!, {r1, r4, r5, sl, ip, sp, lr}^
   168e0:	strbvs	r3, [r7, #-512]!	; 0xfffffe00
   168e4:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   168e8:	strbvs	r0, [r7, #-0]!
   168ec:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   168f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   168f4:	mov	r4, r1
   168f8:	mov	r5, r0
   168fc:	mov	r1, r2
   16900:	mov	r0, r4
   16904:	strd	r6, [sp, #8]
   16908:	strd	r8, [sp, #16]
   1690c:	mov	r6, #0
   16910:	add	r9, pc, #312	; 0x138
   16914:	ldrd	r8, [r9]
   16918:	strd	sl, [sp, #24]
   1691c:	mov	sl, r2
   16920:	mov	fp, r3
   16924:	str	lr, [sp, #32]
   16928:	sub	sp, sp, #12
   1692c:	bl	14dd0 <_start@@Base+0xf0>
   16930:	cmp	r1, r9
   16934:	cmpeq	r0, r8
   16938:	bhi	16970 <_start@@Base+0x1c90>
   1693c:	add	r3, pc, #276	; 0x114
   16940:	ldrd	r2, [r3]
   16944:	cmp	r1, r3
   16948:	cmpeq	r6, r2
   1694c:	beq	169dc <_start@@Base+0x1cfc>
   16950:	mov	r0, r4
   16954:	add	sp, sp, #12
   16958:	ldrd	r4, [sp]
   1695c:	ldrd	r6, [sp, #8]
   16960:	ldrd	r8, [sp, #16]
   16964:	ldrd	sl, [sp, #24]
   16968:	add	sp, sp, #32
   1696c:	pop	{pc}		; (ldr pc, [sp], #4)
   16970:	add	r3, pc, #232	; 0xe8
   16974:	ldrd	r2, [r3]
   16978:	cmp	r1, r3
   1697c:	cmpeq	r6, r2
   16980:	beq	16a20 <_start@@Base+0x1d40>
   16984:	add	r3, pc, #220	; 0xdc
   16988:	ldrd	r2, [r3]
   1698c:	cmp	r1, r3
   16990:	cmpeq	r6, r2
   16994:	bne	16950 <_start@@Base+0x1c70>
   16998:	ldr	r3, [sp, #52]	; 0x34
   1699c:	mov	r2, sl
   169a0:	mov	r0, r5
   169a4:	mov	r1, r4
   169a8:	str	r3, [sp]
   169ac:	mov	r3, #4
   169b0:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   169b4:	cmp	r4, r0
   169b8:	beq	16950 <_start@@Base+0x1c70>
   169bc:	ldr	r2, [sp, #48]	; 0x30
   169c0:	mov	r4, r0
   169c4:	mvn	r1, #0
   169c8:	mvn	r0, #10
   169cc:	mov	r3, #1
   169d0:	strd	r0, [r2]
   169d4:	str	r3, [fp]
   169d8:	b	16950 <_start@@Base+0x1c70>
   169dc:	ldr	r3, [sp, #52]	; 0x34
   169e0:	mov	r2, sl
   169e4:	mov	r0, r5
   169e8:	mov	r1, r4
   169ec:	str	r3, [sp]
   169f0:	mov	r3, #4
   169f4:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   169f8:	cmp	r4, r0
   169fc:	mvnne	r6, #11
   16a00:	beq	16950 <_start@@Base+0x1c70>
   16a04:	ldr	r2, [sp, #48]	; 0x30
   16a08:	mvn	r7, #0
   16a0c:	mov	r3, #1
   16a10:	mov	r4, r0
   16a14:	strd	r6, [r2]
   16a18:	str	r3, [fp]
   16a1c:	b	16950 <_start@@Base+0x1c70>
   16a20:	ldr	r3, [sp, #52]	; 0x34
   16a24:	mov	r2, sl
   16a28:	mov	r0, r5
   16a2c:	mov	r1, r4
   16a30:	str	r3, [sp]
   16a34:	mov	r3, #4
   16a38:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   16a3c:	cmp	r4, r0
   16a40:	beq	16950 <_start@@Base+0x1c70>
   16a44:	mvn	r6, #9
   16a48:	b	16a04 <_start@@Base+0x1d24>
   16a4c:	nop	{0}
   16a50:			; <UNDEFINED> instruction: 0xffffffff
   16a54:	mcrvs	7, 3, r6, cr5, cr1, {1}
   16a58:	andeq	r0, r0, r0
   16a5c:	mcrvs	7, 3, r6, cr5, cr1, {1}
   16a60:	andeq	r0, r0, r0
   16a64:	mcrvs	7, 3, r6, cr5, cr3, {1}
   16a68:	andeq	r0, r0, r0
   16a6c:	mcrvs	7, 3, r6, cr5, cr2, {1}
   16a70:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16a74:	mov	r4, r1
   16a78:	mov	r1, r2
   16a7c:	strd	r6, [sp, #8]
   16a80:	mov	r5, r2
   16a84:	strd	r8, [sp, #16]
   16a88:	mov	r8, r0
   16a8c:	mov	r0, r4
   16a90:	str	sl, [sp, #24]
   16a94:	mov	r9, r3
   16a98:	str	lr, [sp, #28]
   16a9c:	sub	sp, sp, #8
   16aa0:	bl	14dd0 <_start@@Base+0xf0>
   16aa4:	add	r3, pc, #292	; 0x124
   16aa8:	ldrd	r2, [r3]
   16aac:	cmp	r1, r3
   16ab0:	cmpeq	r0, r2
   16ab4:	bhi	16af0 <_start@@Base+0x1e10>
   16ab8:	add	r7, pc, #280	; 0x118
   16abc:	ldrd	r6, [r7]
   16ac0:	mov	sl, #0
   16ac4:	cmp	r1, r7
   16ac8:	cmpeq	sl, r6
   16acc:	beq	16b64 <_start@@Base+0x1e84>
   16ad0:	mov	r0, r4
   16ad4:	add	sp, sp, #8
   16ad8:	ldrd	r4, [sp]
   16adc:	ldrd	r6, [sp, #8]
   16ae0:	ldrd	r8, [sp, #16]
   16ae4:	ldr	sl, [sp, #24]
   16ae8:	add	sp, sp, #28
   16aec:	pop	{pc}		; (ldr pc, [sp], #4)
   16af0:	add	r7, pc, #232	; 0xe8
   16af4:	ldrd	r6, [r7]
   16af8:	bic	r3, r1, #255	; 0xff
   16afc:	mov	sl, #0
   16b00:	cmp	r3, r7
   16b04:	cmpeq	sl, r6
   16b08:	beq	16ba4 <_start@@Base+0x1ec4>
   16b0c:	add	r7, pc, #212	; 0xd4
   16b10:	ldrd	r6, [r7]
   16b14:	and	r2, r0, #-16777216	; 0xff000000
   16b18:	cmp	r1, r7
   16b1c:	cmpeq	r2, r6
   16b20:	bne	16ad0 <_start@@Base+0x1df0>
   16b24:	ldr	r3, [sp, #44]	; 0x2c
   16b28:	mov	r2, r5
   16b2c:	mov	r0, r8
   16b30:	mov	r1, r4
   16b34:	str	r3, [sp]
   16b38:	mov	r3, #5
   16b3c:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   16b40:	cmp	r4, r0
   16b44:	beq	16ad0 <_start@@Base+0x1df0>
   16b48:	ldr	r1, [sp, #40]	; 0x28
   16b4c:	mov	r2, #2
   16b50:	mov	r3, #0
   16b54:	mov	r4, r0
   16b58:	strd	r2, [r1]
   16b5c:	str	sl, [r9]
   16b60:	b	16ad0 <_start@@Base+0x1df0>
   16b64:	ldr	r3, [sp, #44]	; 0x2c
   16b68:	mov	r2, r5
   16b6c:	mov	r0, r8
   16b70:	mov	r1, r4
   16b74:	str	r3, [sp]
   16b78:	mov	r3, #4
   16b7c:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   16b80:	cmp	r4, r0
   16b84:	movne	r2, #8
   16b88:	beq	16ad0 <_start@@Base+0x1df0>
   16b8c:	ldr	r1, [sp, #40]	; 0x28
   16b90:	mov	r3, #0
   16b94:	mov	r4, r0
   16b98:	strd	r2, [r1]
   16b9c:	str	sl, [r9]
   16ba0:	b	16ad0 <_start@@Base+0x1df0>
   16ba4:	ldr	r3, [sp, #44]	; 0x2c
   16ba8:	mov	r2, r5
   16bac:	mov	r0, r8
   16bb0:	mov	r1, r4
   16bb4:	str	r3, [sp]
   16bb8:	mov	r3, #3
   16bbc:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   16bc0:	cmp	r4, r0
   16bc4:	beq	16ad0 <_start@@Base+0x1df0>
   16bc8:	mov	r2, #1
   16bcc:	b	16b8c <_start@@Base+0x1eac>
   16bd0:	ldclvs	15, cr15, [pc, #1020]!	; 16fd4 <_start@@Base+0x22f4>
   16bd4:	ldrbmi	r6, [r2, -r5, ror #10]!
   16bd8:	andeq	r0, r0, r0
   16bdc:	rsbmi	r7, ip, #423624704	; 0x19400000
   16be0:	andeq	r0, r0, r0
   16be4:	rsbpl	r6, r5, #0, 8
   16be8:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   16bec:	ldrbmi	r6, [r2, -r5, ror #10]!
   16bf0:	sub	r3, r2, r1
   16bf4:	cmp	r3, #1
   16bf8:	ble	16c0c <_start@@Base+0x1f2c>
   16bfc:	ldrb	r3, [r1]
   16c00:	cmp	r3, #32
   16c04:	bhi	16c10 <_start@@Base+0x1f30>
   16c08:	beq	16c18 <_start@@Base+0x1f38>
   16c0c:	b	2d9e4 <flatcc_json_parser_space_ext@@Base>
   16c10:	mov	r0, r1
   16c14:	bx	lr
   16c18:	ldrb	r3, [r1, #1]
   16c1c:	cmp	r3, #32
   16c20:	bls	16c0c <_start@@Base+0x1f2c>
   16c24:	add	r0, r1, #1
   16c28:	bx	lr
   16c2c:	mov	r3, #8
   16c30:	mov	r1, #0
   16c34:	str	r4, [sp, #-8]!
   16c38:	mov	r2, r3
   16c3c:	mov	r4, r0
   16c40:	str	lr, [sp, #4]
   16c44:	bl	2ae2c <flatcc_verify_field@@Base>
   16c48:	cmp	r0, #0
   16c4c:	beq	16c5c <_start@@Base+0x1f7c>
   16c50:	ldr	r4, [sp]
   16c54:	add	sp, sp, #4
   16c58:	pop	{pc}		; (ldr pc, [sp], #4)
   16c5c:	mov	r3, #4
   16c60:	mov	r0, r4
   16c64:	ldr	r4, [sp]
   16c68:	mov	r2, r3
   16c6c:	mov	r1, #1
   16c70:	ldr	lr, [sp, #4]
   16c74:	add	sp, sp, #8
   16c78:	b	2ae2c <flatcc_verify_field@@Base>
   16c7c:	mov	r3, #1
   16c80:	mov	r1, #0
   16c84:	str	r4, [sp, #-8]!
   16c88:	mov	r2, r3
   16c8c:	mov	r4, r0
   16c90:	str	lr, [sp, #4]
   16c94:	bl	2ae2c <flatcc_verify_field@@Base>
   16c98:	cmp	r0, #0
   16c9c:	beq	16cac <_start@@Base+0x1fcc>
   16ca0:	ldr	r4, [sp]
   16ca4:	add	sp, sp, #4
   16ca8:	pop	{pc}		; (ldr pc, [sp], #4)
   16cac:	mov	r3, #1
   16cb0:	mov	r0, r4
   16cb4:	mov	r2, r3
   16cb8:	mov	r1, r3
   16cbc:	bl	2ae2c <flatcc_verify_field@@Base>
   16cc0:	cmp	r0, #0
   16cc4:	bne	16ca0 <_start@@Base+0x1fc0>
   16cc8:	mov	r3, #1
   16ccc:	mov	r1, #2
   16cd0:	mov	r2, r3
   16cd4:	mov	r0, r4
   16cd8:	bl	2ae2c <flatcc_verify_field@@Base>
   16cdc:	cmp	r0, #0
   16ce0:	bne	16ca0 <_start@@Base+0x1fc0>
   16ce4:	mov	r3, #1
   16ce8:	mov	r0, r4
   16cec:	ldr	r4, [sp]
   16cf0:	mov	r2, r3
   16cf4:	mov	r1, #3
   16cf8:	ldr	lr, [sp, #4]
   16cfc:	add	sp, sp, #8
   16d00:	b	2ae2c <flatcc_verify_field@@Base>
   16d04:	mov	r2, #0
   16d08:	str	r4, [sp, #-8]!
   16d0c:	mov	r4, r0
   16d10:	mov	r1, r2
   16d14:	str	lr, [sp, #4]
   16d18:	bl	2ae98 <flatcc_verify_string_field@@Base>
   16d1c:	cmp	r0, #0
   16d20:	beq	16d30 <_start@@Base+0x2050>
   16d24:	ldr	r4, [sp]
   16d28:	add	sp, sp, #4
   16d2c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d30:	mov	r3, #8
   16d34:	mov	r1, #1
   16d38:	mov	r2, r3
   16d3c:	mov	r0, r4
   16d40:	bl	2ae2c <flatcc_verify_field@@Base>
   16d44:	cmp	r0, #0
   16d48:	bne	16d24 <_start@@Base+0x2044>
   16d4c:	mov	r3, #2
   16d50:	mov	r0, r4
   16d54:	ldr	r4, [sp]
   16d58:	mov	r2, r3
   16d5c:	mov	r1, r3
   16d60:	ldr	lr, [sp, #4]
   16d64:	add	sp, sp, #8
   16d68:	b	2ae2c <flatcc_verify_field@@Base>
   16d6c:	mov	r2, #0
   16d70:	str	r4, [sp, #-8]!
   16d74:	mov	r4, r0
   16d78:	mov	r1, r2
   16d7c:	str	lr, [sp, #4]
   16d80:	bl	2ae98 <flatcc_verify_string_field@@Base>
   16d84:	cmp	r0, #0
   16d88:	beq	16d98 <_start@@Base+0x20b8>
   16d8c:	ldr	r4, [sp]
   16d90:	add	sp, sp, #4
   16d94:	pop	{pc}		; (ldr pc, [sp], #4)
   16d98:	mov	r3, #4
   16d9c:	mov	r1, #1
   16da0:	mov	r2, r3
   16da4:	mov	r0, r4
   16da8:	bl	2ae2c <flatcc_verify_field@@Base>
   16dac:	cmp	r0, #0
   16db0:	bne	16d8c <_start@@Base+0x20ac>
   16db4:	mov	r2, r0
   16db8:	mov	r1, #2
   16dbc:	mov	r0, r4
   16dc0:	bl	2ae98 <flatcc_verify_string_field@@Base>
   16dc4:	cmp	r0, #0
   16dc8:	bne	16d8c <_start@@Base+0x20ac>
   16dcc:	mov	r3, #8
   16dd0:	mov	r1, #3
   16dd4:	mov	r2, r3
   16dd8:	mov	r0, r4
   16ddc:	bl	2ae2c <flatcc_verify_field@@Base>
   16de0:	cmp	r0, #0
   16de4:	bne	16d8c <_start@@Base+0x20ac>
   16de8:	mov	r2, r0
   16dec:	mov	r1, #4
   16df0:	mov	r0, r4
   16df4:	bl	2ae98 <flatcc_verify_string_field@@Base>
   16df8:	cmp	r0, #0
   16dfc:	bne	16d8c <_start@@Base+0x20ac>
   16e00:	mov	r3, #8
   16e04:	mov	r1, #5
   16e08:	mov	r2, r3
   16e0c:	mov	r0, r4
   16e10:	bl	2ae2c <flatcc_verify_field@@Base>
   16e14:	cmp	r0, #0
   16e18:	bne	16d8c <_start@@Base+0x20ac>
   16e1c:	mov	r3, #4
   16e20:	mov	r1, #6
   16e24:	mov	r2, r3
   16e28:	mov	r0, r4
   16e2c:	bl	2ae2c <flatcc_verify_field@@Base>
   16e30:	cmp	r0, #0
   16e34:	bne	16d8c <_start@@Base+0x20ac>
   16e38:	mov	r3, #8
   16e3c:	mov	r1, #7
   16e40:	mov	r2, r3
   16e44:	mov	r0, r4
   16e48:	bl	2ae2c <flatcc_verify_field@@Base>
   16e4c:	cmp	r0, #0
   16e50:	bne	16d8c <_start@@Base+0x20ac>
   16e54:	mov	r3, #4
   16e58:	mov	r0, r4
   16e5c:	ldr	r4, [sp]
   16e60:	mov	r2, r3
   16e64:	mov	r1, #8
   16e68:	ldr	lr, [sp, #4]
   16e6c:	add	sp, sp, #8
   16e70:	b	2ae2c <flatcc_verify_field@@Base>
   16e74:	mov	r2, #0
   16e78:	movw	r3, #28012	; 0x6d6c
   16e7c:	movt	r3, #1
   16e80:	mov	r1, r2
   16e84:	str	r4, [sp, #-8]!
   16e88:	mov	r4, r0
   16e8c:	str	lr, [sp, #4]
   16e90:	bl	2b260 <flatcc_verify_table_field@@Base>
   16e94:	cmp	r0, #0
   16e98:	beq	16ea8 <_start@@Base+0x21c8>
   16e9c:	ldr	r4, [sp]
   16ea0:	add	sp, sp, #4
   16ea4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ea8:	mov	r2, r0
   16eac:	movw	r3, #33000	; 0x80e8
   16eb0:	movt	r3, #1
   16eb4:	mov	r1, #1
   16eb8:	mov	r0, r4
   16ebc:	bl	2b260 <flatcc_verify_table_field@@Base>
   16ec0:	cmp	r0, #0
   16ec4:	bne	16e9c <_start@@Base+0x21bc>
   16ec8:	mov	r2, r0
   16ecc:	movw	r3, #27692	; 0x6c2c
   16ed0:	movt	r3, #1
   16ed4:	mov	r0, r4
   16ed8:	ldr	r4, [sp]
   16edc:	mov	r1, #2
   16ee0:	ldr	lr, [sp, #4]
   16ee4:	add	sp, sp, #8
   16ee8:	b	2b260 <flatcc_verify_table_field@@Base>
   16eec:	mov	r3, #16
   16ef0:	mov	r2, #32
   16ef4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16ef8:	mov	r1, #0
   16efc:	strd	r6, [sp, #8]
   16f00:	mov	r4, r0
   16f04:	str	r8, [sp, #16]
   16f08:	str	lr, [sp, #20]
   16f0c:	sub	sp, sp, #8
   16f10:	bl	2ae2c <flatcc_verify_field@@Base>
   16f14:	cmp	r0, #0
   16f18:	beq	16f34 <_start@@Base+0x2254>
   16f1c:	add	sp, sp, #8
   16f20:	ldrd	r4, [sp]
   16f24:	ldrd	r6, [sp, #8]
   16f28:	ldr	r8, [sp, #16]
   16f2c:	add	sp, sp, #20
   16f30:	pop	{pc}		; (ldr pc, [sp], #4)
   16f34:	mov	r3, #2
   16f38:	mov	r0, r4
   16f3c:	mov	r2, r3
   16f40:	mov	r1, r3
   16f44:	bl	2ae2c <flatcc_verify_field@@Base>
   16f48:	cmp	r0, #0
   16f4c:	bne	16f1c <_start@@Base+0x223c>
   16f50:	mov	r3, #2
   16f54:	mov	r1, #1
   16f58:	mov	r2, r3
   16f5c:	mov	r0, r4
   16f60:	bl	2ae2c <flatcc_verify_field@@Base>
   16f64:	cmp	r0, #0
   16f68:	bne	16f1c <_start@@Base+0x223c>
   16f6c:	mov	r2, #1
   16f70:	mov	r1, #3
   16f74:	mov	r0, r4
   16f78:	bl	2ae98 <flatcc_verify_string_field@@Base>
   16f7c:	cmp	r0, #0
   16f80:	bne	16f1c <_start@@Base+0x223c>
   16f84:	mov	r3, #1
   16f88:	mov	r1, #6
   16f8c:	mov	r2, r3
   16f90:	mov	r0, r4
   16f94:	bl	2ae2c <flatcc_verify_field@@Base>
   16f98:	cmp	r0, #0
   16f9c:	bne	16f1c <_start@@Base+0x223c>
   16fa0:	mov	r5, #1
   16fa4:	mvn	r6, #0
   16fa8:	mov	r2, r0
   16fac:	mov	r3, r5
   16fb0:	mov	r1, #5
   16fb4:	mov	r0, r4
   16fb8:	stm	sp, {r5, r6}
   16fbc:	bl	2af78 <flatcc_verify_vector_field@@Base>
   16fc0:	cmp	r0, #0
   16fc4:	bne	16f1c <_start@@Base+0x223c>
   16fc8:	mov	r2, r0
   16fcc:	movw	r3, #28396	; 0x6eec
   16fd0:	movt	r3, #1
   16fd4:	mov	r1, #11
   16fd8:	mov	r0, r4
   16fdc:	bl	2b3cc <flatcc_verify_table_vector_field@@Base>
   16fe0:	cmp	r0, #0
   16fe4:	bne	16f1c <_start@@Base+0x223c>
   16fe8:	mov	r2, r0
   16fec:	mov	r1, #10
   16ff0:	mov	r0, r4
   16ff4:	bl	2b07c <flatcc_verify_string_vector_field@@Base>
   16ff8:	cmp	r0, #0
   16ffc:	bne	16f1c <_start@@Base+0x223c>
   17000:	mov	r2, r0
   17004:	mov	r1, #28
   17008:	mov	r0, r4
   1700c:	bl	2b07c <flatcc_verify_string_vector_field@@Base>
   17010:	cmp	r0, #0
   17014:	bne	16f1c <_start@@Base+0x223c>
   17018:	mov	r2, r0
   1701c:	mov	r3, r5
   17020:	stm	sp, {r5, r6}
   17024:	mov	r1, #24
   17028:	mov	r0, r4
   1702c:	bl	2af78 <flatcc_verify_vector_field@@Base>
   17030:	cmp	r0, #0
   17034:	bne	16f1c <_start@@Base+0x223c>
   17038:	mvn	ip, #-536870912	; 0xe0000000
   1703c:	mov	r5, #4
   17040:	mov	r3, #8
   17044:	mov	r2, #0
   17048:	mov	r1, #29
   1704c:	mov	r0, r4
   17050:	stm	sp, {r5, ip}
   17054:	bl	2af78 <flatcc_verify_vector_field@@Base>
   17058:	cmp	r0, #0
   1705c:	bne	16f1c <_start@@Base+0x223c>
   17060:	movw	r6, #28396	; 0x6eec
   17064:	movt	r6, #1
   17068:	mov	r2, r0
   1706c:	mov	r3, r6
   17070:	mov	r1, #12
   17074:	mov	r0, r4
   17078:	bl	2b260 <flatcc_verify_table_field@@Base>
   1707c:	cmp	r0, #0
   17080:	bne	16f1c <_start@@Base+0x223c>
   17084:	mov	r2, r0
   17088:	movw	r3, #29660	; 0x73dc
   1708c:	movt	r3, #1
   17090:	mov	r1, #8
   17094:	mov	r0, r4
   17098:	bl	2c20c <flatcc_verify_union_field@@Base>
   1709c:	cmp	r0, #0
   170a0:	bne	16f1c <_start@@Base+0x223c>
   170a4:	mvn	r7, #-1073741824	; 0xc0000000
   170a8:	mov	r8, #2
   170ac:	mov	r2, r0
   170b0:	mov	r3, r5
   170b4:	mov	r1, #9
   170b8:	mov	r0, r4
   170bc:	str	r8, [sp]
   170c0:	str	r7, [sp, #4]
   170c4:	bl	2af78 <flatcc_verify_vector_field@@Base>
   170c8:	cmp	r0, #0
   170cc:	bne	16f1c <_start@@Base+0x223c>
   170d0:	mov	r2, r0
   170d4:	mov	r3, r5
   170d8:	str	r8, [sp]
   170dc:	mov	r1, #31
   170e0:	mov	r0, r4
   170e4:	str	r7, [sp, #4]
   170e8:	bl	2af78 <flatcc_verify_vector_field@@Base>
   170ec:	cmp	r0, #0
   170f0:	bne	16f1c <_start@@Base+0x223c>
   170f4:	mov	r7, #1
   170f8:	mov	r3, r0
   170fc:	mov	r2, r0
   17100:	mov	r1, #13
   17104:	mov	r0, r4
   17108:	str	r7, [sp]
   1710c:	str	r6, [sp, #4]
   17110:	bl	2bfb4 <flatcc_verify_table_as_nested_root@@Base>
   17114:	cmp	r0, #0
   17118:	bne	16f1c <_start@@Base+0x223c>
   1711c:	mov	r2, r0
   17120:	movw	r3, #27908	; 0x6d04
   17124:	movt	r3, #1
   17128:	mov	r1, #14
   1712c:	mov	r0, r4
   17130:	bl	2b260 <flatcc_verify_table_field@@Base>
   17134:	cmp	r0, #0
   17138:	bne	16f1c <_start@@Base+0x223c>
   1713c:	mov	r3, r7
   17140:	mov	r2, r7
   17144:	mov	r1, #15
   17148:	mov	r0, r4
   1714c:	bl	2ae2c <flatcc_verify_field@@Base>
   17150:	cmp	r0, #0
   17154:	bne	16f1c <_start@@Base+0x223c>
   17158:	mov	r3, r5
   1715c:	mov	r2, r5
   17160:	mov	r1, #16
   17164:	mov	r0, r4
   17168:	bl	2ae2c <flatcc_verify_field@@Base>
   1716c:	cmp	r0, #0
   17170:	bne	16f1c <_start@@Base+0x223c>
   17174:	mov	r3, r5
   17178:	mov	r2, r5
   1717c:	mov	r1, #17
   17180:	mov	r0, r4
   17184:	bl	2ae2c <flatcc_verify_field@@Base>
   17188:	cmp	r0, #0
   1718c:	bne	16f1c <_start@@Base+0x223c>
   17190:	mov	r3, #8
   17194:	mov	r1, #18
   17198:	mov	r2, r3
   1719c:	mov	r0, r4
   171a0:	bl	2ae2c <flatcc_verify_field@@Base>
   171a4:	cmp	r0, #0
   171a8:	bne	16f1c <_start@@Base+0x223c>
   171ac:	mov	r3, #8
   171b0:	mov	r1, #19
   171b4:	mov	r2, r3
   171b8:	mov	r0, r4
   171bc:	bl	2ae2c <flatcc_verify_field@@Base>
   171c0:	cmp	r0, #0
   171c4:	bne	16f1c <_start@@Base+0x223c>
   171c8:	mov	r3, r5
   171cc:	mov	r1, #20
   171d0:	mov	r2, r5
   171d4:	mov	r0, r4
   171d8:	bl	2ae2c <flatcc_verify_field@@Base>
   171dc:	cmp	r0, #0
   171e0:	bne	16f1c <_start@@Base+0x223c>
   171e4:	mov	r3, r5
   171e8:	mov	r1, #21
   171ec:	mov	r2, r5
   171f0:	mov	r0, r4
   171f4:	bl	2ae2c <flatcc_verify_field@@Base>
   171f8:	cmp	r0, #0
   171fc:	bne	16f1c <_start@@Base+0x223c>
   17200:	mov	r3, #8
   17204:	mov	r1, #22
   17208:	mov	r2, r3
   1720c:	mov	r0, r4
   17210:	bl	2ae2c <flatcc_verify_field@@Base>
   17214:	cmp	r0, #0
   17218:	bne	16f1c <_start@@Base+0x223c>
   1721c:	mov	r3, #8
   17220:	mov	r1, #23
   17224:	mov	r2, r3
   17228:	mov	r0, r4
   1722c:	bl	2ae2c <flatcc_verify_field@@Base>
   17230:	cmp	r0, #0
   17234:	bne	16f1c <_start@@Base+0x223c>
   17238:	mov	r3, r5
   1723c:	mov	r1, #25
   17240:	mov	r2, r5
   17244:	mov	r0, r4
   17248:	bl	2ae2c <flatcc_verify_field@@Base>
   1724c:	cmp	r0, #0
   17250:	bne	16f1c <_start@@Base+0x223c>
   17254:	mov	r3, r5
   17258:	mov	r1, #26
   1725c:	mov	r2, r5
   17260:	mov	r0, r4
   17264:	bl	2ae2c <flatcc_verify_field@@Base>
   17268:	cmp	r0, #0
   1726c:	bne	16f1c <_start@@Base+0x223c>
   17270:	mov	r3, r5
   17274:	mov	r1, #27
   17278:	mov	r2, r5
   1727c:	mov	r0, r4
   17280:	bl	2ae2c <flatcc_verify_field@@Base>
   17284:	cmp	r0, #0
   17288:	bne	16f1c <_start@@Base+0x223c>
   1728c:	mvn	ip, #0
   17290:	mov	r1, r7
   17294:	mov	r2, r0
   17298:	mov	r3, r7
   1729c:	mov	r0, r4
   172a0:	stm	sp, {r1, ip}
   172a4:	mov	r1, #30
   172a8:	bl	2af78 <flatcc_verify_vector_field@@Base>
   172ac:	cmp	r0, #0
   172b0:	bne	16f1c <_start@@Base+0x223c>
   172b4:	mov	r5, #8
   172b8:	mvn	r6, #-536870912	; 0xe0000000
   172bc:	mov	r3, r5
   172c0:	mov	r2, #0
   172c4:	mov	r1, #32
   172c8:	mov	r0, r4
   172cc:	stm	sp, {r5, r6}
   172d0:	bl	2af78 <flatcc_verify_vector_field@@Base>
   172d4:	cmp	r0, #0
   172d8:	bne	16f1c <_start@@Base+0x223c>
   172dc:	mov	r2, r0
   172e0:	mov	r3, r5
   172e4:	stm	sp, {r5, r6}
   172e8:	mov	r1, #33	; 0x21
   172ec:	mov	r0, r4
   172f0:	bl	2af78 <flatcc_verify_vector_field@@Base>
   172f4:	cmp	r0, #0
   172f8:	bne	16f1c <_start@@Base+0x223c>
   172fc:	mov	r2, r0
   17300:	movw	r3, #20248	; 0x4f18
   17304:	movt	r3, #1
   17308:	mov	r1, #34	; 0x22
   1730c:	mov	r0, r4
   17310:	bl	2b260 <flatcc_verify_table_field@@Base>
   17314:	cmp	r0, #0
   17318:	bne	16f1c <_start@@Base+0x223c>
   1731c:	mov	r2, r0
   17320:	movw	r3, #29516	; 0x734c
   17324:	movt	r3, #1
   17328:	mov	r0, r4
   1732c:	mov	r1, #35	; 0x23
   17330:	add	sp, sp, #8
   17334:	ldrd	r4, [sp]
   17338:	ldrd	r6, [sp, #8]
   1733c:	ldr	r8, [sp, #16]
   17340:	ldr	lr, [sp, #20]
   17344:	add	sp, sp, #24
   17348:	b	2b260 <flatcc_verify_table_field@@Base>
   1734c:	strd	r4, [sp, #-16]!
   17350:	mov	r4, #1
   17354:	mvn	r5, #0
   17358:	str	r6, [sp, #8]
   1735c:	mov	r2, #0
   17360:	mov	r3, r4
   17364:	str	lr, [sp, #12]
   17368:	sub	sp, sp, #8
   1736c:	mov	r1, r2
   17370:	mov	r6, r0
   17374:	strd	r4, [sp]
   17378:	bl	2af78 <flatcc_verify_vector_field@@Base>
   1737c:	subs	r2, r0, #0
   17380:	beq	1739c <_start@@Base+0x26bc>
   17384:	mov	r0, r2
   17388:	add	sp, sp, #8
   1738c:	ldrd	r4, [sp]
   17390:	ldr	r6, [sp, #8]
   17394:	add	sp, sp, #12
   17398:	pop	{pc}		; (ldr pc, [sp], #4)
   1739c:	mov	r3, r4
   173a0:	mov	r1, r4
   173a4:	strd	r4, [sp]
   173a8:	mov	r0, r6
   173ac:	bl	2af78 <flatcc_verify_vector_field@@Base>
   173b0:	subs	r2, r0, #0
   173b4:	bne	17384 <_start@@Base+0x26a4>
   173b8:	movw	ip, #28396	; 0x6eec
   173bc:	movt	ip, #1
   173c0:	mov	r3, r2
   173c4:	mov	r0, r6
   173c8:	mov	r1, #2
   173cc:	stm	sp, {r4, ip}
   173d0:	bl	2bfb4 <flatcc_verify_table_as_nested_root@@Base>
   173d4:	mov	r2, r0
   173d8:	b	17384 <_start@@Base+0x26a4>
   173dc:	ldrb	r3, [r0, #12]
   173e0:	sub	r3, r3, #1
   173e4:	cmp	r3, #3
   173e8:	ldrls	pc, [pc, r3, lsl #2]
   173ec:	b	17430 <_start@@Base+0x2750>
   173f0:	andeq	r7, r1, r4, lsr #8
   173f4:	andeq	r7, r1, r8, lsl r4
   173f8:	andeq	r7, r1, ip, lsl #8
   173fc:	andeq	r7, r1, r0, lsl #8
   17400:	movw	r1, #29752	; 0x7438
   17404:	movt	r1, #1
   17408:	b	2b6e8 <flatcc_verify_union_table@@Base>
   1740c:	movw	r1, #31224	; 0x79f8
   17410:	movt	r1, #1
   17414:	b	2b6e8 <flatcc_verify_union_table@@Base>
   17418:	movw	r1, #27772	; 0x6c7c
   1741c:	movt	r1, #1
   17420:	b	2b6e8 <flatcc_verify_union_table@@Base>
   17424:	movw	r1, #28396	; 0x6eec
   17428:	movt	r1, #1
   1742c:	b	2b6e8 <flatcc_verify_union_table@@Base>
   17430:	mov	r0, #0
   17434:	bx	lr
   17438:	mov	r2, #0
   1743c:	movw	r3, #28276	; 0x6e74
   17440:	movt	r3, #1
   17444:	mov	r1, r2
   17448:	str	r4, [sp, #-8]!
   1744c:	mov	r4, r0
   17450:	str	lr, [sp, #4]
   17454:	bl	2b260 <flatcc_verify_table_field@@Base>
   17458:	cmp	r0, #0
   1745c:	beq	1746c <_start@@Base+0x278c>
   17460:	ldr	r4, [sp]
   17464:	add	sp, sp, #4
   17468:	pop	{pc}		; (ldr pc, [sp], #4)
   1746c:	mov	r2, r0
   17470:	movw	r3, #29872	; 0x74b0
   17474:	movt	r3, #1
   17478:	mov	r1, #1
   1747c:	mov	r0, r4
   17480:	bl	2b260 <flatcc_verify_table_field@@Base>
   17484:	cmp	r0, #0
   17488:	bne	17460 <_start@@Base+0x2780>
   1748c:	mov	r2, r0
   17490:	movw	r3, #29660	; 0x73dc
   17494:	movt	r3, #1
   17498:	mov	r0, r4
   1749c:	ldr	r4, [sp]
   174a0:	mov	r1, #3
   174a4:	ldr	lr, [sp, #4]
   174a8:	add	sp, sp, #8
   174ac:	b	2c360 <flatcc_verify_union_vector_field@@Base>
   174b0:	movw	r3, #30056	; 0x7568
   174b4:	movt	r3, #1
   174b8:	str	r4, [sp, #-8]!
   174bc:	mov	r2, #0
   174c0:	mov	r1, #1
   174c4:	str	lr, [sp, #4]
   174c8:	mov	r4, r0
   174cc:	bl	2c20c <flatcc_verify_union_field@@Base>
   174d0:	cmp	r0, #0
   174d4:	beq	174e4 <_start@@Base+0x2804>
   174d8:	ldr	r4, [sp]
   174dc:	add	sp, sp, #4
   174e0:	pop	{pc}		; (ldr pc, [sp], #4)
   174e4:	mov	r2, r0
   174e8:	movw	r3, #30056	; 0x7568
   174ec:	movt	r3, #1
   174f0:	mov	r1, #3
   174f4:	mov	r0, r4
   174f8:	bl	2c20c <flatcc_verify_union_field@@Base>
   174fc:	cmp	r0, #0
   17500:	bne	174d8 <_start@@Base+0x27f8>
   17504:	mov	r2, r0
   17508:	movw	r3, #30056	; 0x7568
   1750c:	movt	r3, #1
   17510:	mov	r1, #5
   17514:	mov	r0, r4
   17518:	bl	2c20c <flatcc_verify_union_field@@Base>
   1751c:	cmp	r0, #0
   17520:	bne	174d8 <_start@@Base+0x27f8>
   17524:	mov	r2, r0
   17528:	movw	r3, #30056	; 0x7568
   1752c:	movt	r3, #1
   17530:	mov	r1, #7
   17534:	mov	r0, r4
   17538:	bl	2c20c <flatcc_verify_union_field@@Base>
   1753c:	cmp	r0, #0
   17540:	bne	174d8 <_start@@Base+0x27f8>
   17544:	mov	r2, r0
   17548:	movw	r3, #30056	; 0x7568
   1754c:	movt	r3, #1
   17550:	mov	r0, r4
   17554:	ldr	r4, [sp]
   17558:	mov	r1, #9
   1755c:	ldr	lr, [sp, #4]
   17560:	add	sp, sp, #8
   17564:	b	2c360 <flatcc_verify_union_vector_field@@Base>
   17568:	ldrb	r3, [r0, #12]
   1756c:	mov	r2, r0
   17570:	cmp	r3, #10
   17574:	bhi	1759c <_start@@Base+0x28bc>
   17578:	cmp	r3, #9
   1757c:	bcs	175b4 <_start@@Base+0x28d4>
   17580:	cmp	r3, #2
   17584:	beq	175c8 <_start@@Base+0x28e8>
   17588:	cmp	r3, #8
   1758c:	bne	175c0 <_start@@Base+0x28e0>
   17590:	mov	r2, #2
   17594:	mov	r1, r2
   17598:	b	2b7e4 <flatcc_verify_union_struct@@Base>
   1759c:	cmp	r3, #11
   175a0:	beq	175ac <_start@@Base+0x28cc>
   175a4:	cmp	r3, #255	; 0xff
   175a8:	bne	175c0 <_start@@Base+0x28e0>
   175ac:	mov	r0, r2
   175b0:	b	2b844 <flatcc_verify_union_string@@Base>
   175b4:	mov	r2, #4
   175b8:	mov	r1, r2
   175bc:	b	2b7e4 <flatcc_verify_union_struct@@Base>
   175c0:	mov	r0, #0
   175c4:	bx	lr
   175c8:	movw	r1, #20256	; 0x4f20
   175cc:	movt	r1, #1
   175d0:	b	2b6e8 <flatcc_verify_union_table@@Base>
   175d4:	sub	r1, r1, #1
   175d8:	cmp	r1, #3
   175dc:	ldrls	pc, [pc, r1, lsl #2]
   175e0:	b	17634 <_start@@Base+0x2954>
   175e4:	andeq	r7, r1, r4, lsr #12
   175e8:	andeq	r7, r1, r4, lsl r6
   175ec:	andeq	r7, r1, r4, lsl #12
   175f0:	strdeq	r7, [r1], -r4
   175f4:	movw	r1, #10092	; 0x276c
   175f8:	movt	r1, #4
   175fc:	mov	r2, #3
   17600:	b	35ec0 <flatcc_json_printer_enum@@Base>
   17604:	movw	r1, #10080	; 0x2760
   17608:	movt	r1, #4
   1760c:	mov	r2, #8
   17610:	b	35ec0 <flatcc_json_printer_enum@@Base>
   17614:	movw	r1, #10056	; 0x2748
   17618:	movt	r1, #4
   1761c:	mov	r2, #23
   17620:	b	35ec0 <flatcc_json_printer_enum@@Base>
   17624:	movw	r1, #10048	; 0x2740
   17628:	movt	r1, #4
   1762c:	mov	r2, #7
   17630:	b	35ec0 <flatcc_json_printer_enum@@Base>
   17634:	movw	r1, #25296	; 0x62d0
   17638:	movt	r1, #4
   1763c:	mov	r2, #4
   17640:	b	35ec0 <flatcc_json_printer_enum@@Base>
   17644:	strd	r4, [sp, #-20]!	; 0xffffffec
   17648:	mov	r4, #0
   1764c:	mov	r5, #0
   17650:	strd	r6, [sp, #8]
   17654:	mov	r6, #0
   17658:	cmp	r1, r2
   1765c:	str	lr, [sp, #16]
   17660:	sub	sp, sp, #28
   17664:	moveq	r0, r1
   17668:	strd	r4, [r3]
   1766c:	str	r6, [sp, #12]
   17670:	strd	r4, [sp, #16]
   17674:	beq	176a0 <_start@@Base+0x29c0>
   17678:	add	ip, sp, #16
   1767c:	mov	r5, r3
   17680:	add	r3, sp, #12
   17684:	mov	r4, r1
   17688:	str	ip, [sp]
   1768c:	mov	r7, r0
   17690:	mov	r6, r2
   17694:	bl	316c0 <flatcc_json_parser_integer@@Base>
   17698:	cmp	r4, r0
   1769c:	bne	176b4 <_start@@Base+0x29d4>
   176a0:	add	sp, sp, #28
   176a4:	ldrd	r4, [sp]
   176a8:	ldrd	r6, [sp, #8]
   176ac:	add	sp, sp, #16
   176b0:	pop	{pc}		; (ldr pc, [sp], #4)
   176b4:	ldr	r1, [sp, #12]
   176b8:	ldrd	r2, [sp, #16]
   176bc:	cmp	r1, #0
   176c0:	beq	176e0 <_start@@Base+0x2a00>
   176c4:	cmp	r3, #-2147483648	; 0x80000000
   176c8:	cmpeq	r2, #0
   176cc:	bhi	17708 <_start@@Base+0x2a28>
   176d0:	rsbs	r2, r2, #0
   176d4:	rsc	r3, r3, #0
   176d8:	strd	r2, [r5]
   176dc:	b	176a0 <_start@@Base+0x29c0>
   176e0:	cmp	r2, #0
   176e4:	sbcs	r1, r3, #0
   176e8:	strdge	r2, [r5]
   176ec:	bge	176a0 <_start@@Base+0x29c0>
   176f0:	mov	r1, r0
   176f4:	mov	r2, r6
   176f8:	mov	r0, r7
   176fc:	mov	r3, #7
   17700:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   17704:	b	176a0 <_start@@Base+0x29c0>
   17708:	mov	r1, r0
   1770c:	mov	r2, r6
   17710:	mov	r0, r7
   17714:	mov	r3, #8
   17718:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1771c:	b	176a0 <_start@@Base+0x29c0>
   17720:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17724:	mov	r4, r1
   17728:	mov	r1, r2
   1772c:	strd	r6, [sp, #8]
   17730:	mov	r6, r0
   17734:	mov	r0, r4
   17738:	strd	r8, [sp, #16]
   1773c:	mov	r5, r2
   17740:	mov	r7, r3
   17744:	str	sl, [sp, #24]
   17748:	str	lr, [sp, #28]
   1774c:	sub	sp, sp, #8
   17750:	bl	14dd0 <_start@@Base+0xf0>
   17754:	add	r3, pc, #260	; 0x104
   17758:	ldrd	r2, [r3]
   1775c:	cmp	r1, r3
   17760:	cmpeq	r0, r2
   17764:	beq	177dc <_start@@Base+0x2afc>
   17768:	add	r9, pc, #248	; 0xf8
   1776c:	ldrd	r8, [r9]
   17770:	mov	sl, #0
   17774:	cmp	r1, r9
   17778:	cmpeq	sl, r8
   1777c:	beq	177a0 <_start@@Base+0x2ac0>
   17780:	mov	r0, r4
   17784:	add	sp, sp, #8
   17788:	ldrd	r4, [sp]
   1778c:	ldrd	r6, [sp, #8]
   17790:	ldrd	r8, [sp, #16]
   17794:	ldr	sl, [sp, #24]
   17798:	add	sp, sp, #28
   1779c:	pop	{pc}		; (ldr pc, [sp], #4)
   177a0:	ldr	r3, [sp, #44]	; 0x2c
   177a4:	mov	r2, r5
   177a8:	mov	r0, r6
   177ac:	mov	r1, r4
   177b0:	str	r3, [sp]
   177b4:	mov	r3, #4
   177b8:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   177bc:	cmp	r4, r0
   177c0:	beq	17784 <_start@@Base+0x2aa4>
   177c4:	ldr	r1, [sp, #40]	; 0x28
   177c8:	mov	r2, #0
   177cc:	mov	r3, #0
   177d0:	strd	r2, [r1]
   177d4:	str	sl, [r7]
   177d8:	b	17784 <_start@@Base+0x2aa4>
   177dc:	mov	r1, r5
   177e0:	add	r0, r4, #8
   177e4:	bl	14dd0 <_start@@Base+0xf0>
   177e8:	add	r3, pc, #128	; 0x80
   177ec:	ldrd	r2, [r3]
   177f0:	cmp	r1, r3
   177f4:	cmpeq	r0, r2
   177f8:	bne	17780 <_start@@Base+0x2aa0>
   177fc:	add	r8, r4, #16
   17800:	mov	r1, r5
   17804:	mov	r0, r8
   17808:	mov	r9, #0
   1780c:	bl	14dd0 <_start@@Base+0xf0>
   17810:	and	r3, r1, #-16777216	; 0xff000000
   17814:	cmp	r3, #1694498816	; 0x65000000
   17818:	cmpeq	r9, #0
   1781c:	bne	17780 <_start@@Base+0x2aa0>
   17820:	ldr	r3, [sp, #44]	; 0x2c
   17824:	mov	r2, r5
   17828:	mov	r0, r6
   1782c:	mov	r1, r8
   17830:	str	r3, [sp]
   17834:	mov	r3, #1
   17838:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   1783c:	cmp	r8, r0
   17840:	beq	17780 <_start@@Base+0x2aa0>
   17844:	ldr	r1, [sp, #40]	; 0x28
   17848:	mov	r2, #1
   1784c:	mov	r3, #0
   17850:	strd	r2, [r1]
   17854:	str	r9, [r7]
   17858:	b	17784 <_start@@Base+0x2aa4>
   1785c:	nop	{0}
   17860:	rsbvc	r6, r5, #116, 28	; 0x740
   17864:	stmdbmi	lr!, {r0, r5, r6, ip, lr}^
   17868:	andeq	r0, r0, r0
   1786c:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   17870:	cmnvc	r0, #-1073741800	; 0xc0000018
   17874:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   17878:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1787c:	strd	r6, [sp, #8]
   17880:	mov	r7, r2
   17884:	mov	r6, r1
   17888:	movw	r2, #10096	; 0x2770
   1788c:	movt	r2, #4
   17890:	strd	r8, [sp, #16]
   17894:	movw	r1, #10112	; 0x2780
   17898:	movt	r1, #4
   1789c:	strd	sl, [sp, #24]
   178a0:	mov	r8, r0
   178a4:	mov	r0, r7
   178a8:	str	lr, [sp, #32]
   178ac:	sub	sp, sp, #36	; 0x24
   178b0:	bl	14584 <fprintf@plt>
   178b4:	cmp	r6, #0
   178b8:	beq	179ec <_start@@Base+0x2d0c>
   178bc:	movw	fp, #10128	; 0x2790
   178c0:	movt	fp, #4
   178c4:	movw	sl, #10120	; 0x2788
   178c8:	movt	sl, #4
   178cc:	movw	r9, #10136	; 0x2798
   178d0:	movt	r9, #4
   178d4:	add	r3, sp, #12
   178d8:	sub	r8, r8, #1
   178dc:	mov	r4, #0
   178e0:	str	r3, [sp, #4]
   178e4:	ands	r5, r4, #15
   178e8:	bne	179d4 <_start@@Base+0x2cf4>
   178ec:	cmp	r4, #0
   178f0:	mov	r1, sl
   178f4:	ldr	r2, [sp, #4]
   178f8:	mov	r0, r7
   178fc:	beq	17904 <_start@@Base+0x2c24>
   17900:	bl	14584 <fprintf@plt>
   17904:	mov	r2, r4
   17908:	mov	r1, fp
   1790c:	mov	r0, r7
   17910:	bl	14584 <fprintf@plt>
   17914:	ldrb	r2, [r8, #1]!
   17918:	mov	r1, r9
   1791c:	mov	r0, r7
   17920:	bl	14584 <fprintf@plt>
   17924:	add	r3, sp, #32
   17928:	mov	lr, #46	; 0x2e
   1792c:	add	r2, r3, r5
   17930:	mov	ip, #0
   17934:	mov	r5, r2
   17938:	add	r4, r4, #1
   1793c:	ldrb	r3, [r8]
   17940:	sub	r1, r3, #32
   17944:	cmp	r1, #94	; 0x5e
   17948:	bls	179bc <_start@@Base+0x2cdc>
   1794c:	cmp	r6, r4
   17950:	strb	lr, [r2, #-20]	; 0xffffffec
   17954:	strb	ip, [r2, #-19]	; 0xffffffed
   17958:	bne	178e4 <_start@@Base+0x2c04>
   1795c:	tst	r6, #15
   17960:	beq	1798c <_start@@Base+0x2cac>
   17964:	movw	r4, #10144	; 0x27a0
   17968:	movt	r4, #4
   1796c:	add	r6, r6, #1
   17970:	mov	r3, r7
   17974:	mov	r2, #3
   17978:	mov	r1, #1
   1797c:	mov	r0, r4
   17980:	bl	14548 <fwrite@plt>
   17984:	tst	r6, #15
   17988:	bne	1796c <_start@@Base+0x2c8c>
   1798c:	ldr	r2, [sp, #4]
   17990:	mov	r0, r7
   17994:	movw	r1, #10120	; 0x2788
   17998:	movt	r1, #4
   1799c:	bl	14584 <fprintf@plt>
   179a0:	add	sp, sp, #36	; 0x24
   179a4:	ldrd	r4, [sp]
   179a8:	ldrd	r6, [sp, #8]
   179ac:	ldrd	r8, [sp, #16]
   179b0:	ldrd	sl, [sp, #24]
   179b4:	add	sp, sp, #32
   179b8:	pop	{pc}		; (ldr pc, [sp], #4)
   179bc:	cmp	r4, r6
   179c0:	strb	r3, [r2, #-20]	; 0xffffffec
   179c4:	strb	ip, [r5, #-19]	; 0xffffffed
   179c8:	beq	1795c <_start@@Base+0x2c7c>
   179cc:	ands	r5, r4, #15
   179d0:	beq	178ec <_start@@Base+0x2c0c>
   179d4:	tst	r4, #7
   179d8:	bne	17914 <_start@@Base+0x2c34>
   179dc:	mov	r1, r7
   179e0:	mov	r0, #32
   179e4:	bl	145cc <fputc@plt>
   179e8:	b	17914 <_start@@Base+0x2c34>
   179ec:	add	r3, sp, #12
   179f0:	str	r3, [sp, #4]
   179f4:	b	1798c <_start@@Base+0x2cac>
   179f8:	mov	r0, #0
   179fc:	bx	lr
   17a00:	bx	lr
   17a04:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17a08:	mov	r4, #0
   17a0c:	movw	r5, #10148	; 0x27a4
   17a10:	movt	r5, #4
   17a14:	strd	r6, [sp, #8]
   17a18:	mov	r6, r0
   17a1c:	strd	r8, [sp, #16]
   17a20:	mov	r7, r1
   17a24:	mov	r9, r2
   17a28:	str	sl, [sp, #24]
   17a2c:	mov	r8, r3
   17a30:	str	lr, [sp, #28]
   17a34:	sub	sp, sp, #344	; 0x158
   17a38:	add	r0, sp, #112	; 0x70
   17a3c:	bl	252c4 <flatcc_builder_init@@Base>
   17a40:	mov	r1, r4
   17a44:	add	r0, sp, #64	; 0x40
   17a48:	bl	418c8 <flatcc_json_printer_init_dynamic_buffer@@Base>
   17a4c:	mov	r0, r6
   17a50:	str	r4, [sp, #90]	; 0x5a
   17a54:	bl	14578 <strlen@plt>
   17a58:	movw	ip, #52388	; 0xcca4
   17a5c:	movt	ip, #1
   17a60:	strd	r4, [sp]
   17a64:	mov	r3, r0
   17a68:	mov	r2, r6
   17a6c:	add	r0, sp, #112	; 0x70
   17a70:	add	r1, sp, #24
   17a74:	str	ip, [sp, #8]
   17a78:	bl	33348 <flatcc_json_parser_table_as_root@@Base>
   17a7c:	cmp	r0, r9
   17a80:	bne	17bbc <_start@@Base+0x2edc>
   17a84:	cmp	r0, #0
   17a88:	movne	r5, r4
   17a8c:	beq	17ac8 <_start@@Base+0x2de8>
   17a90:	mov	r0, r4
   17a94:	bl	2a7f8 <flatcc_builder_aligned_free@@Base>
   17a98:	add	r0, sp, #112	; 0x70
   17a9c:	bl	2548c <flatcc_builder_clear@@Base>
   17aa0:	add	r0, sp, #64	; 0x40
   17aa4:	bl	41a08 <flatcc_json_printer_clear@@Base>
   17aa8:	mov	r0, r5
   17aac:	add	sp, sp, #344	; 0x158
   17ab0:	ldrd	r4, [sp]
   17ab4:	ldrd	r6, [sp, #8]
   17ab8:	ldrd	r8, [sp, #16]
   17abc:	ldr	sl, [sp, #24]
   17ac0:	add	sp, sp, #28
   17ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ac8:	add	r1, sp, #16
   17acc:	add	r0, sp, #112	; 0x70
   17ad0:	bl	2a6c8 <flatcc_builder_finalize_aligned_buffer@@Base>
   17ad4:	movw	r3, #28396	; 0x6eec
   17ad8:	movt	r3, #1
   17adc:	ldr	r1, [sp, #16]
   17ae0:	mov	r2, r5
   17ae4:	mov	r4, r0
   17ae8:	bl	2bb38 <flatcc_verify_table_as_root@@Base>
   17aec:	cmp	r0, #0
   17af0:	bne	17cc0 <_start@@Base+0x2fe0>
   17af4:	movw	r0, #21068	; 0x524c
   17af8:	movt	r0, #1
   17afc:	ldr	r2, [sp, #16]
   17b00:	mov	r3, r5
   17b04:	mov	r1, r4
   17b08:	str	r0, [sp]
   17b0c:	add	r0, sp, #64	; 0x40
   17b10:	bl	41124 <flatcc_json_printer_table_as_root@@Base>
   17b14:	add	r1, sp, #20
   17b18:	add	r0, sp, #64	; 0x40
   17b1c:	bl	4196c <flatcc_json_printer_get_buffer@@Base>
   17b20:	subs	r6, r0, #0
   17b24:	beq	17b3c <_start@@Base+0x2e5c>
   17b28:	mov	r1, r6
   17b2c:	mov	r0, r7
   17b30:	bl	14500 <strcmp@plt>
   17b34:	subs	r5, r0, #0
   17b38:	beq	17a90 <_start@@Base+0x2db0>
   17b3c:	movw	sl, #33712	; 0x83b0
   17b40:	movt	sl, #5
   17b44:	mov	r2, r8
   17b48:	movw	r1, #10448	; 0x28d0
   17b4c:	movt	r1, #4
   17b50:	ldr	r0, [sl]
   17b54:	bl	14584 <fprintf@plt>
   17b58:	mov	r2, r6
   17b5c:	movw	r1, #10292	; 0x2834
   17b60:	movt	r1, #4
   17b64:	ldr	r0, [sl]
   17b68:	bl	14584 <fprintf@plt>
   17b6c:	mov	r2, #10
   17b70:	mov	r1, #1
   17b74:	ldr	r3, [sl]
   17b78:	movw	r0, #10504	; 0x2908
   17b7c:	movt	r0, #4
   17b80:	bl	14548 <fwrite@plt>
   17b84:	movw	r1, #10292	; 0x2834
   17b88:	movt	r1, #4
   17b8c:	ldr	r0, [sl]
   17b90:	mov	r2, r7
   17b94:	bl	14584 <fprintf@plt>
   17b98:	cmp	r4, #0
   17b9c:	mvneq	r5, #0
   17ba0:	beq	17a90 <_start@@Base+0x2db0>
   17ba4:	mov	r0, r4
   17ba8:	ldr	r2, [sl]
   17bac:	mvn	r5, #0
   17bb0:	ldr	r1, [sp, #16]
   17bb4:	bl	17878 <_start@@Base+0x2b98>
   17bb8:	b	17a90 <_start@@Base+0x2db0>
   17bbc:	cmp	r9, r4
   17bc0:	movw	sl, #33712	; 0x83b0
   17bc4:	movt	sl, #5
   17bc8:	ldr	r4, [sl]
   17bcc:	beq	17ca0 <_start@@Base+0x2fc0>
   17bd0:	cmp	r0, #0
   17bd4:	beq	17c7c <_start@@Base+0x2f9c>
   17bd8:	bl	2d8b8 <flatcc_json_parser_error_string@@Base>
   17bdc:	mov	r3, r0
   17be0:	mov	r2, r8
   17be4:	mov	r0, r4
   17be8:	movw	r1, #10156	; 0x27ac
   17bec:	movt	r1, #4
   17bf0:	bl	14584 <fprintf@plt>
   17bf4:	ldr	r4, [sl]
   17bf8:	mov	r0, r9
   17bfc:	bl	2d8b8 <flatcc_json_parser_error_string@@Base>
   17c00:	mov	r2, r0
   17c04:	movw	r1, #10196	; 0x27d4
   17c08:	movt	r1, #4
   17c0c:	mov	r0, r4
   17c10:	bl	14584 <fprintf@plt>
   17c14:	mov	r2, r6
   17c18:	movw	r1, #10292	; 0x2834
   17c1c:	movt	r1, #4
   17c20:	ldr	r0, [sl]
   17c24:	bl	14584 <fprintf@plt>
   17c28:	ldr	r3, [sp, #40]	; 0x28
   17c2c:	cmp	r3, #1
   17c30:	movgt	r4, #0
   17c34:	ble	17c58 <_start@@Base+0x2f78>
   17c38:	mov	r0, #32
   17c3c:	ldr	r1, [sl]
   17c40:	add	r4, r4, #1
   17c44:	bl	145cc <fputc@plt>
   17c48:	ldr	r3, [sp, #40]	; 0x28
   17c4c:	sub	r3, r3, #1
   17c50:	cmp	r4, r3
   17c54:	blt	17c38 <_start@@Base+0x2f58>
   17c58:	movw	r0, #10228	; 0x27f4
   17c5c:	movt	r0, #4
   17c60:	ldr	r3, [sl]
   17c64:	mov	r2, #2
   17c68:	mov	r1, #1
   17c6c:	mov	r4, #0
   17c70:	mvn	r5, #0
   17c74:	bl	14548 <fwrite@plt>
   17c78:	b	17a90 <_start@@Base+0x2db0>
   17c7c:	mov	r0, r9
   17c80:	bl	2d8b8 <flatcc_json_parser_error_string@@Base>
   17c84:	mov	r3, r0
   17c88:	mov	r2, r8
   17c8c:	mov	r0, r4
   17c90:	movw	r1, #10232	; 0x27f8
   17c94:	movt	r1, #4
   17c98:	bl	14584 <fprintf@plt>
   17c9c:	b	17c14 <_start@@Base+0x2f34>
   17ca0:	bl	2d8b8 <flatcc_json_parser_error_string@@Base>
   17ca4:	mov	r3, r0
   17ca8:	mov	r2, r8
   17cac:	mov	r0, r4
   17cb0:	movw	r1, #10296	; 0x2838
   17cb4:	movt	r1, #4
   17cb8:	bl	14584 <fprintf@plt>
   17cbc:	b	17c14 <_start@@Base+0x2f34>
   17cc0:	movw	sl, #33712	; 0x83b0
   17cc4:	movt	sl, #5
   17cc8:	ldr	r5, [sl]
   17ccc:	bl	2ae08 <flatcc_verify_error_string@@Base>
   17cd0:	mov	r3, r8
   17cd4:	movw	r2, #10332	; 0x285c
   17cd8:	movt	r2, #4
   17cdc:	movw	r1, #10408	; 0x28a8
   17ce0:	movt	r1, #4
   17ce4:	str	r0, [sp]
   17ce8:	mov	r0, r5
   17cec:	bl	14584 <fprintf@plt>
   17cf0:	b	17b98 <_start@@Base+0x2eb8>
   17cf4:	strd	r4, [sp, #-20]!	; 0xffffffec
   17cf8:	mov	r4, #0
   17cfc:	mov	r5, #0
   17d00:	strd	r6, [sp, #8]
   17d04:	mov	r6, #0
   17d08:	cmp	r1, r2
   17d0c:	str	lr, [sp, #16]
   17d10:	sub	sp, sp, #28
   17d14:	moveq	r0, r1
   17d18:	strd	r4, [r3]
   17d1c:	str	r6, [sp, #12]
   17d20:	strd	r4, [sp, #16]
   17d24:	beq	17d64 <_start@@Base+0x3084>
   17d28:	add	ip, sp, #16
   17d2c:	mov	r5, r3
   17d30:	add	r3, sp, #12
   17d34:	mov	r4, r1
   17d38:	str	ip, [sp]
   17d3c:	mov	r7, r0
   17d40:	mov	r6, r2
   17d44:	bl	316c0 <flatcc_json_parser_integer@@Base>
   17d48:	cmp	r4, r0
   17d4c:	beq	17d64 <_start@@Base+0x3084>
   17d50:	ldr	r3, [sp, #12]
   17d54:	cmp	r3, #0
   17d58:	bne	17d78 <_start@@Base+0x3098>
   17d5c:	ldrd	r2, [sp, #16]
   17d60:	strd	r2, [r5]
   17d64:	add	sp, sp, #28
   17d68:	ldrd	r4, [sp]
   17d6c:	ldrd	r6, [sp, #8]
   17d70:	add	sp, sp, #16
   17d74:	pop	{pc}		; (ldr pc, [sp], #4)
   17d78:	mov	r1, r0
   17d7c:	mov	r2, r6
   17d80:	mov	r0, r7
   17d84:	mov	r3, #8
   17d88:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   17d8c:	b	17d64 <_start@@Base+0x3084>
   17d90:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17d94:	cmp	r1, r2
   17d98:	strd	r6, [sp, #8]
   17d9c:	mov	r6, #0
   17da0:	mov	r7, #0
   17da4:	strd	r8, [sp, #16]
   17da8:	moveq	r0, r1
   17dac:	str	lr, [sp, #24]
   17db0:	sub	sp, sp, #28
   17db4:	mov	lr, #0
   17db8:	str	lr, [r3]
   17dbc:	str	lr, [sp, #12]
   17dc0:	strd	r6, [sp, #16]
   17dc4:	beq	17df0 <_start@@Base+0x3110>
   17dc8:	add	ip, sp, #16
   17dcc:	mov	r5, r3
   17dd0:	add	r3, sp, #12
   17dd4:	mov	r4, r1
   17dd8:	str	ip, [sp]
   17ddc:	mov	r7, r0
   17de0:	mov	r6, r2
   17de4:	bl	316c0 <flatcc_json_parser_integer@@Base>
   17de8:	cmp	r4, r0
   17dec:	bne	17e08 <_start@@Base+0x3128>
   17df0:	add	sp, sp, #28
   17df4:	ldrd	r4, [sp]
   17df8:	ldrd	r6, [sp, #8]
   17dfc:	ldrd	r8, [sp, #16]
   17e00:	add	sp, sp, #24
   17e04:	pop	{pc}		; (ldr pc, [sp], #4)
   17e08:	ldr	r3, [sp, #12]
   17e0c:	cmp	r3, #0
   17e10:	bne	17e48 <_start@@Base+0x3168>
   17e14:	ldrd	r2, [sp, #16]
   17e18:	mov	r9, #0
   17e1c:	mvn	r8, #0
   17e20:	cmp	r3, r9
   17e24:	cmpeq	r2, r8
   17e28:	strls	r2, [r5]
   17e2c:	bls	17df0 <_start@@Base+0x3110>
   17e30:	mov	r1, r0
   17e34:	mov	r2, r6
   17e38:	mov	r0, r7
   17e3c:	mov	r3, #7
   17e40:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   17e44:	b	17df0 <_start@@Base+0x3110>
   17e48:	mov	r1, r0
   17e4c:	mov	r2, r6
   17e50:	mov	r0, r7
   17e54:	mov	r3, #8
   17e58:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   17e5c:	b	17df0 <_start@@Base+0x3110>
   17e60:	strd	r4, [sp, #-20]!	; 0xffffffec
   17e64:	cmp	r1, r2
   17e68:	strd	r6, [sp, #8]
   17e6c:	mov	r6, #0
   17e70:	mov	r7, #0
   17e74:	str	lr, [sp, #16]
   17e78:	sub	sp, sp, #28
   17e7c:	mov	lr, #0
   17e80:	moveq	r0, r1
   17e84:	strb	lr, [r3]
   17e88:	str	lr, [sp, #12]
   17e8c:	strd	r6, [sp, #16]
   17e90:	beq	17ebc <_start@@Base+0x31dc>
   17e94:	add	ip, sp, #16
   17e98:	mov	r5, r3
   17e9c:	add	r3, sp, #12
   17ea0:	mov	r4, r1
   17ea4:	str	ip, [sp]
   17ea8:	mov	r7, r0
   17eac:	mov	r6, r2
   17eb0:	bl	316c0 <flatcc_json_parser_integer@@Base>
   17eb4:	cmp	r4, r0
   17eb8:	bne	17ed0 <_start@@Base+0x31f0>
   17ebc:	add	sp, sp, #28
   17ec0:	ldrd	r4, [sp]
   17ec4:	ldrd	r6, [sp, #8]
   17ec8:	add	sp, sp, #16
   17ecc:	pop	{pc}		; (ldr pc, [sp], #4)
   17ed0:	ldr	r3, [sp, #12]
   17ed4:	cmp	r3, #0
   17ed8:	bne	17f08 <_start@@Base+0x3228>
   17edc:	ldrd	r2, [sp, #16]
   17ee0:	cmp	r3, #0
   17ee4:	cmpeq	r2, #255	; 0xff
   17ee8:	strbls	r2, [r5]
   17eec:	bls	17ebc <_start@@Base+0x31dc>
   17ef0:	mov	r1, r0
   17ef4:	mov	r2, r6
   17ef8:	mov	r0, r7
   17efc:	mov	r3, #7
   17f00:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   17f04:	b	17ebc <_start@@Base+0x31dc>
   17f08:	mov	r1, r0
   17f0c:	mov	r2, r6
   17f10:	mov	r0, r7
   17f14:	mov	r3, #8
   17f18:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   17f1c:	b	17ebc <_start@@Base+0x31dc>
   17f20:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17f24:	cmp	r1, r2
   17f28:	strd	r6, [sp, #8]
   17f2c:	mov	r6, #0
   17f30:	mov	r7, #0
   17f34:	strd	r8, [sp, #16]
   17f38:	moveq	r0, r1
   17f3c:	str	lr, [sp, #24]
   17f40:	sub	sp, sp, #28
   17f44:	mov	lr, #0
   17f48:	str	lr, [r3]
   17f4c:	str	lr, [sp, #12]
   17f50:	strd	r6, [sp, #16]
   17f54:	beq	17f80 <_start@@Base+0x32a0>
   17f58:	add	ip, sp, #16
   17f5c:	mov	r5, r3
   17f60:	add	r3, sp, #12
   17f64:	mov	r4, r1
   17f68:	str	ip, [sp]
   17f6c:	mov	r7, r0
   17f70:	mov	r6, r2
   17f74:	bl	316c0 <flatcc_json_parser_integer@@Base>
   17f78:	cmp	r4, r0
   17f7c:	bne	17f98 <_start@@Base+0x32b8>
   17f80:	add	sp, sp, #28
   17f84:	ldrd	r4, [sp]
   17f88:	ldrd	r6, [sp, #8]
   17f8c:	ldrd	r8, [sp, #16]
   17f90:	add	sp, sp, #24
   17f94:	pop	{pc}		; (ldr pc, [sp], #4)
   17f98:	ldr	r1, [sp, #12]
   17f9c:	ldrd	r2, [sp, #16]
   17fa0:	cmp	r1, #0
   17fa4:	beq	17fd4 <_start@@Base+0x32f4>
   17fa8:	cmp	r3, #0
   17fac:	cmpeq	r2, #-2147483648	; 0x80000000
   17fb0:	rsbls	r2, r2, #0
   17fb4:	strls	r2, [r5]
   17fb8:	bls	17f80 <_start@@Base+0x32a0>
   17fbc:	mov	r1, r0
   17fc0:	mov	r2, r6
   17fc4:	mov	r0, r7
   17fc8:	mov	r3, #8
   17fcc:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   17fd0:	b	17f80 <_start@@Base+0x32a0>
   17fd4:	mov	r9, #0
   17fd8:	mvn	r8, #-2147483648	; 0x80000000
   17fdc:	cmp	r3, r9
   17fe0:	cmpeq	r2, r8
   17fe4:	strls	r2, [r5]
   17fe8:	bls	17f80 <_start@@Base+0x32a0>
   17fec:	mov	r1, r0
   17ff0:	mov	r2, r6
   17ff4:	mov	r0, r7
   17ff8:	mov	r3, #7
   17ffc:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   18000:	b	17f80 <_start@@Base+0x32a0>
   18004:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18008:	cmp	r1, r2
   1800c:	strd	r6, [sp, #8]
   18010:	mov	r6, #0
   18014:	mov	r7, #0
   18018:	strd	r8, [sp, #16]
   1801c:	moveq	r0, r1
   18020:	str	lr, [sp, #24]
   18024:	sub	sp, sp, #28
   18028:	mov	lr, #0
   1802c:	strh	lr, [r3]
   18030:	str	lr, [sp, #12]
   18034:	strd	r6, [sp, #16]
   18038:	beq	18064 <_start@@Base+0x3384>
   1803c:	add	ip, sp, #16
   18040:	mov	r5, r3
   18044:	add	r3, sp, #12
   18048:	mov	r4, r1
   1804c:	str	ip, [sp]
   18050:	mov	r7, r0
   18054:	mov	r6, r2
   18058:	bl	316c0 <flatcc_json_parser_integer@@Base>
   1805c:	cmp	r4, r0
   18060:	bne	1807c <_start@@Base+0x339c>
   18064:	add	sp, sp, #28
   18068:	ldrd	r4, [sp]
   1806c:	ldrd	r6, [sp, #8]
   18070:	ldrd	r8, [sp, #16]
   18074:	add	sp, sp, #24
   18078:	pop	{pc}		; (ldr pc, [sp], #4)
   1807c:	ldr	r1, [sp, #12]
   18080:	ldrd	r2, [sp, #16]
   18084:	cmp	r1, #0
   18088:	beq	180b8 <_start@@Base+0x33d8>
   1808c:	cmp	r3, #0
   18090:	cmpeq	r2, #32768	; 0x8000
   18094:	rsbls	r2, r2, #0
   18098:	strhls	r2, [r5]
   1809c:	bls	18064 <_start@@Base+0x3384>
   180a0:	mov	r1, r0
   180a4:	mov	r2, r6
   180a8:	mov	r0, r7
   180ac:	mov	r3, #8
   180b0:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   180b4:	b	18064 <_start@@Base+0x3384>
   180b8:	mov	r9, #0
   180bc:	movw	r8, #32767	; 0x7fff
   180c0:	cmp	r3, r9
   180c4:	cmpeq	r2, r8
   180c8:	strhls	r2, [r5]
   180cc:	bls	18064 <_start@@Base+0x3384>
   180d0:	mov	r1, r0
   180d4:	mov	r2, r6
   180d8:	mov	r0, r7
   180dc:	mov	r3, #7
   180e0:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   180e4:	b	18064 <_start@@Base+0x3384>
   180e8:	mov	r3, #8
   180ec:	mov	r1, #0
   180f0:	str	r4, [sp, #-8]!
   180f4:	mov	r2, r3
   180f8:	mov	r4, r0
   180fc:	str	lr, [sp, #4]
   18100:	bl	2ae2c <flatcc_verify_field@@Base>
   18104:	cmp	r0, #0
   18108:	beq	18118 <_start@@Base+0x3438>
   1810c:	ldr	r4, [sp]
   18110:	add	sp, sp, #4
   18114:	pop	{pc}		; (ldr pc, [sp], #4)
   18118:	mov	r3, #4
   1811c:	mov	r0, r4
   18120:	ldr	r4, [sp]
   18124:	mov	r2, r3
   18128:	mov	r1, #1
   1812c:	ldr	lr, [sp, #4]
   18130:	add	sp, sp, #8
   18134:	b	2ae2c <flatcc_verify_field@@Base>
   18138:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1813c:	mov	r4, r1
   18140:	mov	r1, r2
   18144:	strd	r6, [sp, #8]
   18148:	mov	r6, r0
   1814c:	mov	r0, r4
   18150:	mov	r5, r2
   18154:	mov	r7, r3
   18158:	str	r8, [sp, #16]
   1815c:	str	lr, [sp, #20]
   18160:	bl	14dd0 <_start@@Base+0xf0>
   18164:	add	r3, pc, #148	; 0x94
   18168:	ldrd	r2, [r3]
   1816c:	cmp	r1, r3
   18170:	cmpeq	r0, r2
   18174:	bne	181e4 <_start@@Base+0x3504>
   18178:	add	r8, r4, #8
   1817c:	mov	r1, r5
   18180:	mov	r0, r8
   18184:	bl	14dd0 <_start@@Base+0xf0>
   18188:	and	r3, r1, #-16777216	; 0xff000000
   1818c:	mov	r2, #0
   18190:	cmp	r3, #1912602624	; 0x72000000
   18194:	cmpeq	r2, #0
   18198:	bne	181e4 <_start@@Base+0x3504>
   1819c:	sub	r3, r5, r8
   181a0:	cmp	r3, #1
   181a4:	ble	181e4 <_start@@Base+0x3504>
   181a8:	ldrb	r3, [r4, #9]
   181ac:	cmp	r3, #46	; 0x2e
   181b0:	bne	181e4 <_start@@Base+0x3504>
   181b4:	add	r1, r4, #10
   181b8:	cmp	r8, r1
   181bc:	beq	181e4 <_start@@Base+0x3504>
   181c0:	mov	r3, r7
   181c4:	mov	r2, r5
   181c8:	ldrd	r4, [sp]
   181cc:	mov	r0, r6
   181d0:	ldrd	r6, [sp, #8]
   181d4:	ldr	r8, [sp, #16]
   181d8:	ldr	lr, [sp, #20]
   181dc:	add	sp, sp, #24
   181e0:	b	15fa0 <_start@@Base+0x12c0>
   181e4:	mov	r0, r4
   181e8:	ldrd	r4, [sp]
   181ec:	ldrd	r6, [sp, #8]
   181f0:	ldr	r8, [sp, #16]
   181f4:	add	sp, sp, #20
   181f8:	pop	{pc}		; (ldr pc, [sp], #4)
   181fc:	nop	{0}
   18200:	cmnvs	r3, r5, ror #8
   18204:	cmnmi	r8, #-2147483620	; 0x8000001c
   18208:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1820c:	mov	r5, r0
   18210:	strd	r6, [sp, #8]
   18214:	mov	r7, r2
   18218:	mov	r6, r1
   1821c:	str	r8, [sp, #16]
   18220:	mov	r8, r3
   18224:	str	lr, [sp, #20]
   18228:	sub	sp, sp, #344	; 0x158
   1822c:	ldr	r4, [sp, #368]	; 0x170
   18230:	add	r0, sp, #112	; 0x70
   18234:	bl	252c4 <flatcc_builder_init@@Base>
   18238:	mov	r1, #0
   1823c:	add	r0, sp, #64	; 0x40
   18240:	bl	418c8 <flatcc_json_printer_init_dynamic_buffer@@Base>
   18244:	ubfx	r3, r4, #3, #1
   18248:	tst	r4, #16
   1824c:	and	r0, r4, #1
   18250:	ubfx	r1, r4, #1, #1
   18254:	ubfx	r2, r4, #2, #1
   18258:	strb	r0, [sp, #90]	; 0x5a
   1825c:	strb	r3, [sp, #93]	; 0x5d
   18260:	movne	r3, #2
   18264:	strb	r1, [sp, #91]	; 0x5b
   18268:	strbne	r3, [sp, #89]	; 0x59
   1826c:	tst	r4, #32
   18270:	strb	r2, [sp, #92]	; 0x5c
   18274:	beq	18288 <_start@@Base+0x35a8>
   18278:	mov	r2, #2
   1827c:	mov	r3, #1
   18280:	strb	r2, [sp, #89]	; 0x59
   18284:	strh	r3, [sp, #90]	; 0x5a
   18288:	mov	r0, r6
   1828c:	bl	14578 <strlen@plt>
   18290:	ldr	lr, [r5]
   18294:	mov	r3, r0
   18298:	mov	r2, r6
   1829c:	str	r8, [sp]
   182a0:	add	r1, sp, #24
   182a4:	add	r0, sp, #112	; 0x70
   182a8:	ldr	ip, [r5, #4]
   182ac:	str	lr, [sp, #4]
   182b0:	str	ip, [sp, #8]
   182b4:	bl	33348 <flatcc_json_parser_table_as_root@@Base>
   182b8:	cmp	r0, #0
   182bc:	bne	18360 <_start@@Base+0x3680>
   182c0:	add	r1, sp, #16
   182c4:	add	r0, sp, #112	; 0x70
   182c8:	bl	2a6c8 <flatcc_builder_finalize_aligned_buffer@@Base>
   182cc:	ldr	r2, [r5]
   182d0:	mov	r4, r0
   182d4:	ldr	r3, [r5, #12]
   182d8:	ldr	r1, [sp, #16]
   182dc:	bl	2bb38 <flatcc_verify_table_as_root@@Base>
   182e0:	cmp	r0, #0
   182e4:	bne	18470 <_start@@Base+0x3790>
   182e8:	mov	r1, r4
   182ec:	add	r0, sp, #64	; 0x40
   182f0:	ldr	r3, [r5]
   182f4:	ldr	ip, [r5, #8]
   182f8:	ldr	r2, [sp, #16]
   182fc:	str	ip, [sp]
   18300:	bl	41124 <flatcc_json_printer_table_as_root@@Base>
   18304:	add	r1, sp, #20
   18308:	add	r0, sp, #64	; 0x40
   1830c:	bl	4196c <flatcc_json_printer_get_buffer@@Base>
   18310:	subs	r6, r0, #0
   18314:	beq	183f0 <_start@@Base+0x3710>
   18318:	mov	r1, r6
   1831c:	mov	r0, r7
   18320:	bl	14500 <strcmp@plt>
   18324:	subs	r5, r0, #0
   18328:	bne	183f0 <_start@@Base+0x3710>
   1832c:	mov	r0, r4
   18330:	bl	2a7f8 <flatcc_builder_aligned_free@@Base>
   18334:	add	r0, sp, #112	; 0x70
   18338:	bl	2548c <flatcc_builder_clear@@Base>
   1833c:	add	r0, sp, #64	; 0x40
   18340:	bl	41a08 <flatcc_json_printer_clear@@Base>
   18344:	mov	r0, r5
   18348:	add	sp, sp, #344	; 0x158
   1834c:	ldrd	r4, [sp]
   18350:	ldrd	r6, [sp, #8]
   18354:	ldr	r8, [sp, #16]
   18358:	add	sp, sp, #20
   1835c:	pop	{pc}		; (ldr pc, [sp], #4)
   18360:	movw	r8, #33712	; 0x83b0
   18364:	movt	r8, #5
   18368:	ldr	r4, [r8]
   1836c:	bl	2d8b8 <flatcc_json_parser_error_string@@Base>
   18370:	mov	r3, r0
   18374:	movw	r1, #10296	; 0x2838
   18378:	movt	r1, #4
   1837c:	ldr	r2, [sp, #372]	; 0x174
   18380:	mov	r0, r4
   18384:	bl	14584 <fprintf@plt>
   18388:	mov	r2, r6
   1838c:	movw	r1, #10292	; 0x2834
   18390:	movt	r1, #4
   18394:	ldr	r0, [r8]
   18398:	bl	14584 <fprintf@plt>
   1839c:	ldr	r3, [sp, #40]	; 0x28
   183a0:	cmp	r3, #1
   183a4:	ble	183cc <_start@@Base+0x36ec>
   183a8:	mov	r4, #0
   183ac:	mov	r0, #32
   183b0:	ldr	r1, [r8]
   183b4:	add	r4, r4, #1
   183b8:	bl	145cc <fputc@plt>
   183bc:	ldr	r3, [sp, #40]	; 0x28
   183c0:	sub	r3, r3, #1
   183c4:	cmp	r4, r3
   183c8:	blt	183ac <_start@@Base+0x36cc>
   183cc:	movw	r0, #10228	; 0x27f4
   183d0:	movt	r0, #4
   183d4:	ldr	r3, [r8]
   183d8:	mov	r2, #2
   183dc:	mov	r1, #1
   183e0:	mov	r4, #0
   183e4:	mvn	r5, #0
   183e8:	bl	14548 <fwrite@plt>
   183ec:	b	1832c <_start@@Base+0x364c>
   183f0:	movw	r8, #33712	; 0x83b0
   183f4:	movt	r8, #5
   183f8:	ldr	r2, [sp, #372]	; 0x174
   183fc:	movw	r1, #10448	; 0x28d0
   18400:	movt	r1, #4
   18404:	ldr	r0, [r8]
   18408:	bl	14584 <fprintf@plt>
   1840c:	mov	r2, r6
   18410:	movw	r1, #10292	; 0x2834
   18414:	movt	r1, #4
   18418:	ldr	r0, [r8]
   1841c:	bl	14584 <fprintf@plt>
   18420:	mov	r2, #10
   18424:	mov	r1, #1
   18428:	ldr	r3, [r8]
   1842c:	movw	r0, #10504	; 0x2908
   18430:	movt	r0, #4
   18434:	bl	14548 <fwrite@plt>
   18438:	movw	r1, #10292	; 0x2834
   1843c:	movt	r1, #4
   18440:	ldr	r0, [r8]
   18444:	mov	r2, r7
   18448:	bl	14584 <fprintf@plt>
   1844c:	cmp	r4, #0
   18450:	mvneq	r5, #0
   18454:	beq	1832c <_start@@Base+0x364c>
   18458:	mov	r0, r4
   1845c:	ldr	r2, [r8]
   18460:	mvn	r5, #0
   18464:	ldr	r1, [sp, #16]
   18468:	bl	17878 <_start@@Base+0x2b98>
   1846c:	b	1832c <_start@@Base+0x364c>
   18470:	movw	r8, #33712	; 0x83b0
   18474:	movt	r8, #5
   18478:	ldr	r5, [r8]
   1847c:	bl	2ae08 <flatcc_verify_error_string@@Base>
   18480:	movw	r2, #10332	; 0x285c
   18484:	movt	r2, #4
   18488:	str	r0, [sp]
   1848c:	movw	r1, #10408	; 0x28a8
   18490:	movt	r1, #4
   18494:	ldr	r3, [sp, #372]	; 0x174
   18498:	mov	r0, r5
   1849c:	bl	14584 <fprintf@plt>
   184a0:	b	1844c <_start@@Base+0x376c>
   184a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   184a8:	mov	r4, r1
   184ac:	mov	r5, r0
   184b0:	mov	r1, r2
   184b4:	mov	r0, r4
   184b8:	strd	r6, [sp, #8]
   184bc:	strd	r8, [sp, #16]
   184c0:	strd	sl, [sp, #24]
   184c4:	mov	sl, r2
   184c8:	mov	fp, r3
   184cc:	str	lr, [sp, #32]
   184d0:	sub	sp, sp, #20
   184d4:	bl	14dd0 <_start@@Base+0xf0>
   184d8:	add	r3, pc, #880	; 0x370
   184dc:	ldrd	r2, [r3]
   184e0:	ldr	r9, [sp, #56]	; 0x38
   184e4:	ldr	r8, [sp, #60]	; 0x3c
   184e8:	cmp	r1, r3
   184ec:	cmpeq	r0, r2
   184f0:	bhi	185d0 <_start@@Base+0x38f0>
   184f4:	add	r3, pc, #860	; 0x35c
   184f8:	ldrd	r2, [r3]
   184fc:	mov	r6, #0
   18500:	bic	r7, r1, #255	; 0xff
   18504:	cmp	r1, r3
   18508:	cmpeq	r0, r2
   1850c:	bhi	1855c <_start@@Base+0x387c>
   18510:	add	r3, pc, #840	; 0x348
   18514:	ldrd	r2, [r3]
   18518:	cmp	r7, r3
   1851c:	cmpeq	r6, r2
   18520:	bne	1853c <_start@@Base+0x385c>
   18524:	sub	r3, sl, r4
   18528:	cmp	r3, #3
   1852c:	ble	1853c <_start@@Base+0x385c>
   18530:	ldrb	r3, [r4, #3]
   18534:	cmp	r3, #46	; 0x2e
   18538:	beq	18798 <_start@@Base+0x3ab8>
   1853c:	mov	r0, r4
   18540:	add	sp, sp, #20
   18544:	ldrd	r4, [sp]
   18548:	ldrd	r6, [sp, #8]
   1854c:	ldrd	r8, [sp, #16]
   18550:	ldrd	sl, [sp, #24]
   18554:	add	sp, sp, #32
   18558:	pop	{pc}		; (ldr pc, [sp], #4)
   1855c:	add	r3, pc, #772	; 0x304
   18560:	ldrd	r2, [r3]
   18564:	cmp	r7, r3
   18568:	cmpeq	r6, r2
   1856c:	beq	18750 <_start@@Base+0x3a70>
   18570:	add	r9, pc, #760	; 0x2f8
   18574:	ldrd	r8, [r9]
   18578:	and	r6, r0, #-16777216	; 0xff000000
   1857c:	cmp	r1, r9
   18580:	cmpeq	r6, r8
   18584:	bne	1853c <_start@@Base+0x385c>
   18588:	sub	r3, sl, r4
   1858c:	cmp	r3, #5
   18590:	ble	1853c <_start@@Base+0x385c>
   18594:	ldrb	r3, [r4, #5]
   18598:	cmp	r3, #46	; 0x2e
   1859c:	bne	1853c <_start@@Base+0x385c>
   185a0:	mov	r3, fp
   185a4:	mov	r2, sl
   185a8:	add	r1, r4, #6
   185ac:	mov	r0, r5
   185b0:	add	sp, sp, #20
   185b4:	ldrd	r4, [sp]
   185b8:	ldrd	r6, [sp, #8]
   185bc:	ldrd	r8, [sp, #16]
   185c0:	ldrd	sl, [sp, #24]
   185c4:	ldr	lr, [sp, #32]
   185c8:	add	sp, sp, #36	; 0x24
   185cc:	b	16a70 <_start@@Base+0x1d90>
   185d0:	add	r3, pc, #672	; 0x2a0
   185d4:	ldrd	r2, [r3]
   185d8:	cmp	r1, r3
   185dc:	cmpeq	r0, r2
   185e0:	bhi	18640 <_start@@Base+0x3960>
   185e4:	add	r3, pc, #660	; 0x294
   185e8:	ldrd	r2, [r3]
   185ec:	cmp	r1, r3
   185f0:	cmpeq	r0, r2
   185f4:	bne	1853c <_start@@Base+0x385c>
   185f8:	sub	r3, sl, r4
   185fc:	cmp	r3, #8
   18600:	ble	1853c <_start@@Base+0x385c>
   18604:	ldrb	r3, [r4, #8]
   18608:	cmp	r3, #46	; 0x2e
   1860c:	bne	1853c <_start@@Base+0x385c>
   18610:	mov	r3, fp
   18614:	mov	r2, sl
   18618:	add	r1, r4, #9
   1861c:	mov	r0, r5
   18620:	add	sp, sp, #20
   18624:	ldrd	r4, [sp]
   18628:	ldrd	r6, [sp, #8]
   1862c:	ldrd	r8, [sp, #16]
   18630:	ldrd	sl, [sp, #24]
   18634:	ldr	lr, [sp, #32]
   18638:	add	sp, sp, #36	; 0x24
   1863c:	b	16548 <_start@@Base+0x1868>
   18640:	add	r3, pc, #576	; 0x240
   18644:	ldrd	r2, [r3]
   18648:	cmp	r1, r3
   1864c:	cmpeq	r0, r2
   18650:	bhi	186b0 <_start@@Base+0x39d0>
   18654:	add	r3, pc, #564	; 0x234
   18658:	ldrd	r2, [r3]
   1865c:	cmp	r1, r3
   18660:	cmpeq	r0, r2
   18664:	bne	1853c <_start@@Base+0x385c>
   18668:	sub	r3, sl, r4
   1866c:	cmp	r3, #8
   18670:	ble	1853c <_start@@Base+0x385c>
   18674:	ldrb	r3, [r4, #8]
   18678:	cmp	r3, #46	; 0x2e
   1867c:	bne	1853c <_start@@Base+0x385c>
   18680:	mov	r3, fp
   18684:	mov	r2, sl
   18688:	add	r1, r4, #9
   1868c:	mov	r0, r5
   18690:	add	sp, sp, #20
   18694:	ldrd	r4, [sp]
   18698:	ldrd	r6, [sp, #8]
   1869c:	ldrd	r8, [sp, #16]
   186a0:	ldrd	sl, [sp, #24]
   186a4:	ldr	lr, [sp, #32]
   186a8:	add	sp, sp, #36	; 0x24
   186ac:	b	166e8 <_start@@Base+0x1a08>
   186b0:	add	r3, pc, #480	; 0x1e0
   186b4:	ldrd	r2, [r3]
   186b8:	cmp	r1, r3
   186bc:	cmpeq	r0, r2
   186c0:	beq	187c8 <_start@@Base+0x3ae8>
   186c4:	add	r3, pc, #468	; 0x1d4
   186c8:	ldrd	r2, [r3]
   186cc:	cmp	r1, r3
   186d0:	cmpeq	r0, r2
   186d4:	bne	1853c <_start@@Base+0x385c>
   186d8:	add	r6, r4, #8
   186dc:	mov	r1, sl
   186e0:	mov	r0, r6
   186e4:	mov	r7, #0
   186e8:	bl	14dd0 <_start@@Base+0xf0>
   186ec:	mov	r3, r1
   186f0:	add	r1, pc, #432	; 0x1b0
   186f4:	ldrd	r0, [r1]
   186f8:	cmp	r3, r1
   186fc:	cmpeq	r7, r0
   18700:	bne	1853c <_start@@Base+0x385c>
   18704:	sub	r3, sl, r6
   18708:	cmp	r3, #4
   1870c:	ble	1853c <_start@@Base+0x385c>
   18710:	ldrb	r3, [r4, #12]
   18714:	cmp	r3, #46	; 0x2e
   18718:	bne	1853c <_start@@Base+0x385c>
   1871c:	add	r3, r4, #13
   18720:	cmp	r6, r3
   18724:	str	r3, [sp, #12]
   18728:	beq	1853c <_start@@Base+0x385c>
   1872c:	mov	r0, r3
   18730:	mov	r1, sl
   18734:	bl	14dd0 <_start@@Base+0xf0>
   18738:	and	r3, r1, #-16777216	; 0xff000000
   1873c:	cmp	r3, #2013265920	; 0x78000000
   18740:	cmpeq	r7, #0
   18744:	beq	18810 <_start@@Base+0x3b30>
   18748:	ldr	r4, [sp, #12]
   1874c:	b	1853c <_start@@Base+0x385c>
   18750:	sub	r3, sl, r4
   18754:	cmp	r3, #3
   18758:	ble	1853c <_start@@Base+0x385c>
   1875c:	ldrb	r3, [r4, #3]
   18760:	cmp	r3, #46	; 0x2e
   18764:	bne	1853c <_start@@Base+0x385c>
   18768:	mov	r3, fp
   1876c:	mov	r2, sl
   18770:	add	r1, r4, #4
   18774:	mov	r0, r5
   18778:	add	sp, sp, #20
   1877c:	ldrd	r4, [sp]
   18780:	ldrd	r6, [sp, #8]
   18784:	ldrd	r8, [sp, #16]
   18788:	ldrd	sl, [sp, #24]
   1878c:	ldr	lr, [sp, #32]
   18790:	add	sp, sp, #36	; 0x24
   18794:	b	17720 <_start@@Base+0x2a40>
   18798:	mov	r3, fp
   1879c:	mov	r2, sl
   187a0:	add	r1, r4, #4
   187a4:	mov	r0, r5
   187a8:	add	sp, sp, #20
   187ac:	ldrd	r4, [sp]
   187b0:	ldrd	r6, [sp, #8]
   187b4:	ldrd	r8, [sp, #16]
   187b8:	ldrd	sl, [sp, #24]
   187bc:	ldr	lr, [sp, #32]
   187c0:	add	sp, sp, #36	; 0x24
   187c4:	b	162c0 <_start@@Base+0x15e0>
   187c8:	sub	r3, sl, r4
   187cc:	cmp	r3, #8
   187d0:	ble	1853c <_start@@Base+0x385c>
   187d4:	ldrb	r3, [r4, #8]
   187d8:	cmp	r3, #46	; 0x2e
   187dc:	bne	1853c <_start@@Base+0x385c>
   187e0:	mov	r3, fp
   187e4:	mov	r2, sl
   187e8:	add	r1, r4, #9
   187ec:	mov	r0, r5
   187f0:	add	sp, sp, #20
   187f4:	ldrd	r4, [sp]
   187f8:	ldrd	r6, [sp, #8]
   187fc:	ldrd	r8, [sp, #16]
   18800:	ldrd	sl, [sp, #24]
   18804:	ldr	lr, [sp, #32]
   18808:	add	sp, sp, #36	; 0x24
   1880c:	b	168f0 <_start@@Base+0x1c10>
   18810:	mov	r0, r5
   18814:	ldr	r5, [sp, #12]
   18818:	mov	r2, sl
   1881c:	mov	r3, #1
   18820:	str	r8, [sp]
   18824:	mov	r1, r5
   18828:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   1882c:	cmp	r5, r0
   18830:	mov	r4, r0
   18834:	beq	1853c <_start@@Base+0x385c>
   18838:	mov	r0, #0
   1883c:	mov	r1, #0
   18840:	strd	r0, [r9]
   18844:	str	r7, [fp]
   18848:	b	1853c <_start@@Base+0x385c>
   1884c:	nop	{0}
   18850:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   18854:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   18858:	ldrshvc	pc, [pc, #255]	; 1895f <_start@@Base+0x3c7f>	; <UNPREDICTABLE>
   1885c:	cmnmi	pc, #28416	; 0x6f00
   18860:	andeq	r0, r0, r0
   18864:	cmnmi	lr, r0, lsl #18
   18868:	andeq	r0, r0, r0
   1886c:	strbtmi	r6, [pc], -r0, lsl #30
   18870:	andvc	r0, r0, #0
   18874:	cmnmi	pc, #28416	; 0x6f00
   18878:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1887c:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   18880:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   18884:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   18888:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1888c:	mcrvs	7, 3, r6, cr5, cr15, {2}
   18890:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   18894:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   18898:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1889c:	mcrvs	7, 3, r6, cr5, cr15, {2}
   188a0:	cfldrdvs	mvd7, [r0, #-484]!	; 0xfffffe1c
   188a4:	cdpvs	4, 6, cr7, cr15, cr5, {3}
   188a8:	andeq	r0, r0, r0
   188ac:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   188b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   188b4:	mov	r4, r1
   188b8:	mov	r1, r2
   188bc:	strd	r6, [sp, #8]
   188c0:	mov	r5, r2
   188c4:	strd	r8, [sp, #16]
   188c8:	mov	r8, r0
   188cc:	mov	r0, r4
   188d0:	strd	sl, [sp, #24]
   188d4:	mov	sl, r3
   188d8:	str	lr, [sp, #32]
   188dc:	sub	sp, sp, #20
   188e0:	bl	14dd0 <_start@@Base+0xf0>
   188e4:	add	r3, pc, #924	; 0x39c
   188e8:	ldrd	r2, [r3]
   188ec:	ldr	r7, [sp, #56]	; 0x38
   188f0:	ldr	fp, [sp, #60]	; 0x3c
   188f4:	cmp	r1, r3
   188f8:	cmpeq	r0, r2
   188fc:	bhi	189a0 <_start@@Base+0x3cc0>
   18900:	add	r3, pc, #904	; 0x388
   18904:	ldrd	r2, [r3]
   18908:	cmp	r1, r3
   1890c:	cmpeq	r0, r2
   18910:	bne	18ae0 <_start@@Base+0x3e00>
   18914:	mov	r1, r5
   18918:	add	r0, r4, #8
   1891c:	bl	14dd0 <_start@@Base+0xf0>
   18920:	add	r3, pc, #880	; 0x370
   18924:	ldrd	r2, [r3]
   18928:	cmp	r1, r3
   1892c:	cmpeq	r0, r2
   18930:	bne	18ae0 <_start@@Base+0x3e00>
   18934:	add	r6, r4, #16
   18938:	mov	r1, r5
   1893c:	mov	r0, r6
   18940:	bl	14dd0 <_start@@Base+0xf0>
   18944:	and	r3, r1, #-16777216	; 0xff000000
   18948:	mov	r2, #0
   1894c:	cmp	r3, #1912602624	; 0x72000000
   18950:	cmpeq	r2, #0
   18954:	bne	18ae0 <_start@@Base+0x3e00>
   18958:	sub	r6, r5, r6
   1895c:	cmp	r6, #1
   18960:	ble	18ae0 <_start@@Base+0x3e00>
   18964:	ldrb	r3, [r4, #17]
   18968:	cmp	r3, #46	; 0x2e
   1896c:	bne	18ae0 <_start@@Base+0x3e00>
   18970:	mov	r3, sl
   18974:	mov	r2, r5
   18978:	add	r1, r4, #18
   1897c:	mov	r0, r8
   18980:	add	sp, sp, #20
   18984:	ldrd	r4, [sp]
   18988:	ldrd	r6, [sp, #8]
   1898c:	ldrd	r8, [sp, #16]
   18990:	ldrd	sl, [sp, #24]
   18994:	ldr	lr, [sp, #32]
   18998:	add	sp, sp, #36	; 0x24
   1899c:	b	15fa0 <_start@@Base+0x12c0>
   189a0:	add	r3, pc, #760	; 0x2f8
   189a4:	ldrd	r2, [r3]
   189a8:	cmp	r1, r3
   189ac:	cmpeq	r0, r2
   189b0:	beq	18b00 <_start@@Base+0x3e20>
   189b4:	add	r3, pc, #748	; 0x2ec
   189b8:	ldrd	r2, [r3]
   189bc:	cmp	r1, r3
   189c0:	cmpeq	r0, r2
   189c4:	bne	18ae0 <_start@@Base+0x3e00>
   189c8:	mov	r1, r5
   189cc:	add	r0, r4, #8
   189d0:	bl	14dd0 <_start@@Base+0xf0>
   189d4:	add	r3, pc, #724	; 0x2d4
   189d8:	ldrd	r2, [r3]
   189dc:	cmp	r1, r3
   189e0:	cmpeq	r0, r2
   189e4:	bne	18ae0 <_start@@Base+0x3e00>
   189e8:	mov	r1, r5
   189ec:	add	r0, r4, #16
   189f0:	bl	14dd0 <_start@@Base+0xf0>
   189f4:	add	r3, pc, #700	; 0x2bc
   189f8:	ldrd	r2, [r3]
   189fc:	cmp	r1, r3
   18a00:	cmpeq	r0, r2
   18a04:	bne	18ae0 <_start@@Base+0x3e00>
   18a08:	mov	r1, r5
   18a0c:	add	r0, r4, #24
   18a10:	bl	14dd0 <_start@@Base+0xf0>
   18a14:	add	r3, pc, #676	; 0x2a4
   18a18:	ldrd	r2, [r3]
   18a1c:	cmp	r1, r3
   18a20:	cmpeq	r0, r2
   18a24:	bne	18ae0 <_start@@Base+0x3e00>
   18a28:	add	r6, r4, #32
   18a2c:	mov	r1, r5
   18a30:	mov	r0, r6
   18a34:	mov	r9, #0
   18a38:	bl	14dd0 <_start@@Base+0xf0>
   18a3c:	and	r3, r1, #-16777216	; 0xff000000
   18a40:	cmp	r3, #1694498816	; 0x65000000
   18a44:	cmpeq	r9, #0
   18a48:	bne	18ae0 <_start@@Base+0x3e00>
   18a4c:	sub	r6, r5, r6
   18a50:	cmp	r6, #1
   18a54:	ble	18ae0 <_start@@Base+0x3e00>
   18a58:	ldrb	r3, [r4, #33]	; 0x21
   18a5c:	cmp	r3, #46	; 0x2e
   18a60:	bne	18ae0 <_start@@Base+0x3e00>
   18a64:	add	r6, r4, #34	; 0x22
   18a68:	mov	r1, r5
   18a6c:	mov	r0, r6
   18a70:	bl	14dd0 <_start@@Base+0xf0>
   18a74:	bic	r3, r1, #255	; 0xff
   18a78:	strd	r0, [sp, #8]
   18a7c:	add	r1, pc, #580	; 0x244
   18a80:	ldrd	r0, [r1]
   18a84:	cmp	r3, r1
   18a88:	cmpeq	r9, r0
   18a8c:	beq	19004 <_start@@Base+0x4324>
   18a90:	add	r3, pc, #568	; 0x238
   18a94:	ldrd	r2, [r3]
   18a98:	ldrd	r0, [sp, #8]
   18a9c:	cmp	r1, r3
   18aa0:	cmpeq	r0, r2
   18aa4:	bne	18adc <_start@@Base+0x3dfc>
   18aa8:	add	r9, r4, #42	; 0x2a
   18aac:	mov	r1, r5
   18ab0:	mov	r0, r9
   18ab4:	bl	14dd0 <_start@@Base+0xf0>
   18ab8:	lsr	r3, r1, #16
   18abc:	mov	r1, #0
   18ac0:	movt	r1, #24940	; 0x616c
   18ac4:	mov	r2, #0
   18ac8:	mov	r0, #0
   18acc:	lsl	r3, r3, #16
   18ad0:	cmp	r3, r1
   18ad4:	cmpeq	r2, r0
   18ad8:	beq	1903c <_start@@Base+0x435c>
   18adc:	mov	r4, r6
   18ae0:	mov	r0, r4
   18ae4:	add	sp, sp, #20
   18ae8:	ldrd	r4, [sp]
   18aec:	ldrd	r6, [sp, #8]
   18af0:	ldrd	r8, [sp, #16]
   18af4:	ldrd	sl, [sp, #24]
   18af8:	add	sp, sp, #32
   18afc:	pop	{pc}		; (ldr pc, [sp], #4)
   18b00:	mov	r1, r5
   18b04:	add	r0, r4, #8
   18b08:	bl	14dd0 <_start@@Base+0xf0>
   18b0c:	add	r3, pc, #452	; 0x1c4
   18b10:	ldrd	r2, [r3]
   18b14:	cmp	r1, r3
   18b18:	cmpeq	r0, r2
   18b1c:	bhi	18bd8 <_start@@Base+0x3ef8>
   18b20:	add	r3, pc, #440	; 0x1b8
   18b24:	ldrd	r2, [r3]
   18b28:	cmp	r1, r3
   18b2c:	cmpeq	r0, r2
   18b30:	bls	18dc0 <_start@@Base+0x40e0>
   18b34:	add	r3, pc, #428	; 0x1ac
   18b38:	ldrd	r2, [r3]
   18b3c:	cmp	r1, r3
   18b40:	cmpeq	r0, r2
   18b44:	beq	18edc <_start@@Base+0x41fc>
   18b48:	add	r3, pc, #416	; 0x1a0
   18b4c:	ldrd	r2, [r3]
   18b50:	cmp	r1, r3
   18b54:	cmpeq	r0, r2
   18b58:	bne	18ae0 <_start@@Base+0x3e00>
   18b5c:	add	r9, r4, #16
   18b60:	mov	r1, r5
   18b64:	mov	r0, r9
   18b68:	mov	r7, #0
   18b6c:	movt	r7, #28527	; 0x6f6f
   18b70:	mov	r6, #0
   18b74:	bl	14dd0 <_start@@Base+0xf0>
   18b78:	lsr	r3, r1, #16
   18b7c:	mov	r2, #0
   18b80:	lsl	r3, r3, #16
   18b84:	cmp	r3, r7
   18b88:	cmpeq	r2, r6
   18b8c:	bne	18ae0 <_start@@Base+0x3e00>
   18b90:	sub	r9, r5, r9
   18b94:	cmp	r9, #2
   18b98:	ble	18ae0 <_start@@Base+0x3e00>
   18b9c:	ldrb	r3, [r4, #18]
   18ba0:	cmp	r3, #46	; 0x2e
   18ba4:	bne	18ae0 <_start@@Base+0x3e00>
   18ba8:	mov	r3, sl
   18bac:	mov	r2, r5
   18bb0:	add	r1, r4, #19
   18bb4:	mov	r0, r8
   18bb8:	add	sp, sp, #20
   18bbc:	ldrd	r4, [sp]
   18bc0:	ldrd	r6, [sp, #8]
   18bc4:	ldrd	r8, [sp, #16]
   18bc8:	ldrd	sl, [sp, #24]
   18bcc:	ldr	lr, [sp, #32]
   18bd0:	add	sp, sp, #36	; 0x24
   18bd4:	b	17720 <_start@@Base+0x2a40>
   18bd8:	add	r3, pc, #280	; 0x118
   18bdc:	ldrd	r2, [r3]
   18be0:	cmp	r1, r3
   18be4:	cmpeq	r0, r2
   18be8:	beq	18d50 <_start@@Base+0x4070>
   18bec:	add	r3, pc, #268	; 0x10c
   18bf0:	ldrd	r2, [r3]
   18bf4:	cmp	r1, r3
   18bf8:	cmpeq	r0, r2
   18bfc:	bhi	18e50 <_start@@Base+0x4170>
   18c00:	add	r3, pc, #256	; 0x100
   18c04:	ldrd	r2, [r3]
   18c08:	cmp	r1, r3
   18c0c:	cmpeq	r0, r2
   18c10:	bne	18ae0 <_start@@Base+0x3e00>
   18c14:	add	r7, pc, #244	; 0xf4
   18c18:	ldrd	r6, [r7]
   18c1c:	add	r9, r4, #16
   18c20:	mov	r1, r5
   18c24:	mov	r0, r9
   18c28:	bl	14dd0 <_start@@Base+0xf0>
   18c2c:	bic	r2, r0, #255	; 0xff
   18c30:	cmp	r1, r7
   18c34:	cmpeq	r2, r6
   18c38:	bne	18ae0 <_start@@Base+0x3e00>
   18c3c:	sub	r9, r5, r9
   18c40:	cmp	r9, #7
   18c44:	ble	18ae0 <_start@@Base+0x3e00>
   18c48:	ldrb	r3, [r4, #23]
   18c4c:	cmp	r3, #46	; 0x2e
   18c50:	bne	18ae0 <_start@@Base+0x3e00>
   18c54:	mov	r3, sl
   18c58:	mov	r2, r5
   18c5c:	add	r1, r4, #24
   18c60:	mov	r0, r8
   18c64:	add	sp, sp, #20
   18c68:	ldrd	r4, [sp]
   18c6c:	ldrd	r6, [sp, #8]
   18c70:	ldrd	r8, [sp, #16]
   18c74:	ldrd	sl, [sp, #24]
   18c78:	ldr	lr, [sp, #32]
   18c7c:	add	sp, sp, #36	; 0x24
   18c80:	b	166e8 <_start@@Base+0x1a08>
   18c84:	nop	{0}
   18c88:	stclvs	14, cr2, [r5, #-272]!	; 0xfffffef0
   18c8c:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   18c90:	cmnvs	r3, lr, lsr #18
   18c94:			; <UNDEFINED> instruction: 0x46616e74
   18c98:	cmnvs	r3, r5, ror #8
   18c9c:	cmnmi	r8, #-2147483620	; 0x8000001c
   18ca0:	stclvs	14, cr2, [r5, #-276]!	; 0xfffffeec
   18ca4:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   18ca8:	stclvs	14, cr2, [r5, #-316]!	; 0xfffffec4
   18cac:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   18cb0:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   18cb4:	strbtvc	r6, [r8], #-1394	; 0xfffffa8e
   18cb8:	strvs	r4, [lr, #-1650]!	; 0xfffff98e
   18cbc:	cmnpl	r0, #-1073741800	; 0xc0000018
   18cc0:	cmnvs	ip, #100, 10	; 0x19000000
   18cc4:	svcvs	0x006d496e
   18cc8:	andeq	r0, r0, r0
   18ccc:	strbtmi	r6, [pc], -r0, lsl #30
   18cd0:	strbvc	r6, [r4, #-1366]!	; 0xfffffaaa
   18cd4:	stmdbmi	lr!, {r2, r3, r5, r6, r8, r9, sp, lr}^
   18cd8:	stclvs	14, cr2, [r5], #-412	; 0xfffffe64
   18cdc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18ce0:	stclvs	14, cr2, [r5], #-264	; 0xfffffef8
   18ce4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18ce8:	stclvs	14, cr2, [r5], #-268	; 0xfffffef4
   18cec:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18cf0:	stclvs	14, cr2, [r5], #-280	; 0xfffffee8
   18cf4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18cf8:	stclvs	14, cr2, [r5], #-416	; 0xfffffe60
   18cfc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18d00:	stclvs	14, cr2, [r5], #-436	; 0xfffffe4c
   18d04:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18d08:	stclvs	14, cr2, [r5], #-420	; 0xfffffe5c
   18d0c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18d10:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   18d14:	cdpvs	15, 7, cr5, cr4, cr5, {3}
   18d18:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   18d1c:	ldrbvs	r5, [r8, #-3941]!	; 0xfffff09b
   18d20:	stclvs	14, cr2, [r5], #-260	; 0xfffffefc
   18d24:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18d28:	stclvs	14, cr2, [r5], #-440	; 0xfffffe48
   18d2c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18d30:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   18d34:	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
   18d38:	andeq	r0, r0, r0
   18d3c:	svcvs	0x006c6f72
   18d40:	rsbsvc	r7, r4, r5, ror #18
   18d44:	svcvs	0x0074656d
   18d48:	andeq	r0, r0, r0
   18d4c:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   18d50:	sub	r7, pc, #64	; 0x40
   18d54:	ldrd	r6, [r7]
   18d58:	add	r9, r4, #16
   18d5c:	mov	r1, r5
   18d60:	mov	r0, r9
   18d64:	bl	14dd0 <_start@@Base+0xf0>
   18d68:	bic	r2, r0, #255	; 0xff
   18d6c:	cmp	r1, r7
   18d70:	cmpeq	r2, r6
   18d74:	bne	18ae0 <_start@@Base+0x3e00>
   18d78:	sub	r9, r5, r9
   18d7c:	cmp	r9, #7
   18d80:	ble	18ae0 <_start@@Base+0x3e00>
   18d84:	ldrb	r3, [r4, #23]
   18d88:	cmp	r3, #46	; 0x2e
   18d8c:	bne	18ae0 <_start@@Base+0x3e00>
   18d90:	mov	r3, sl
   18d94:	mov	r2, r5
   18d98:	add	r1, r4, #24
   18d9c:	mov	r0, r8
   18da0:	add	sp, sp, #20
   18da4:	ldrd	r4, [sp]
   18da8:	ldrd	r6, [sp, #8]
   18dac:	ldrd	r8, [sp, #16]
   18db0:	ldrd	sl, [sp, #24]
   18db4:	ldr	lr, [sp, #32]
   18db8:	add	sp, sp, #36	; 0x24
   18dbc:	b	16548 <_start@@Base+0x1868>
   18dc0:	sub	r3, pc, #168	; 0xa8
   18dc4:	ldrd	r2, [r3]
   18dc8:	cmp	r1, r3
   18dcc:	cmpeq	r0, r2
   18dd0:	bne	18ae0 <_start@@Base+0x3e00>
   18dd4:	add	r9, r4, #16
   18dd8:	mov	r1, r5
   18ddc:	mov	r0, r9
   18de0:	mov	r7, #0
   18de4:	movt	r7, #28281	; 0x6e79
   18de8:	mov	r6, #0
   18dec:	bl	14dd0 <_start@@Base+0xf0>
   18df0:	lsr	r3, r1, #16
   18df4:	mov	r2, #0
   18df8:	lsl	r3, r3, #16
   18dfc:	cmp	r3, r7
   18e00:	cmpeq	r2, r6
   18e04:	bne	18ae0 <_start@@Base+0x3e00>
   18e08:	sub	r9, r5, r9
   18e0c:	cmp	r9, #2
   18e10:	ble	18ae0 <_start@@Base+0x3e00>
   18e14:	ldrb	r3, [r4, #18]
   18e18:	cmp	r3, #46	; 0x2e
   18e1c:	bne	18ae0 <_start@@Base+0x3e00>
   18e20:	mov	r3, sl
   18e24:	mov	r2, r5
   18e28:	add	r1, r4, #19
   18e2c:	mov	r0, r8
   18e30:	add	sp, sp, #20
   18e34:	ldrd	r4, [sp]
   18e38:	ldrd	r6, [sp, #8]
   18e3c:	ldrd	r8, [sp, #16]
   18e40:	ldrd	sl, [sp, #24]
   18e44:	ldr	lr, [sp, #32]
   18e48:	add	sp, sp, #36	; 0x24
   18e4c:	b	162c0 <_start@@Base+0x15e0>
   18e50:	sub	r3, pc, #304	; 0x130
   18e54:	ldrd	r2, [r3]
   18e58:	cmp	r1, r3
   18e5c:	cmpeq	r0, r2
   18e60:	bne	18ae0 <_start@@Base+0x3e00>
   18e64:	add	r9, r4, #16
   18e68:	mov	r1, r5
   18e6c:	mov	r0, r9
   18e70:	bl	14dd0 <_start@@Base+0xf0>
   18e74:	bic	r2, r0, #255	; 0xff
   18e78:	mov	r3, r1
   18e7c:	strd	r0, [sp, #8]
   18e80:	sub	r1, pc, #344	; 0x158
   18e84:	ldrd	r0, [r1]
   18e88:	cmp	r3, r1
   18e8c:	cmpeq	r2, r0
   18e90:	bne	18f4c <_start@@Base+0x426c>
   18e94:	sub	r9, r5, r9
   18e98:	cmp	r9, #7
   18e9c:	ble	18ae0 <_start@@Base+0x3e00>
   18ea0:	ldrb	r3, [r4, #23]
   18ea4:	cmp	r3, #46	; 0x2e
   18ea8:	bne	18ae0 <_start@@Base+0x3e00>
   18eac:	mov	r3, sl
   18eb0:	mov	r2, r5
   18eb4:	add	r1, r4, #24
   18eb8:	mov	r0, r8
   18ebc:	add	sp, sp, #20
   18ec0:	ldrd	r4, [sp]
   18ec4:	ldrd	r6, [sp, #8]
   18ec8:	ldrd	r8, [sp, #16]
   18ecc:	ldrd	sl, [sp, #24]
   18ed0:	ldr	lr, [sp, #32]
   18ed4:	add	sp, sp, #36	; 0x24
   18ed8:	b	168f0 <_start@@Base+0x1c10>
   18edc:	sub	r7, pc, #428	; 0x1ac
   18ee0:	ldrd	r6, [r7]
   18ee4:	add	r9, r4, #16
   18ee8:	mov	r1, r5
   18eec:	mov	r0, r9
   18ef0:	bl	14dd0 <_start@@Base+0xf0>
   18ef4:	mov	r2, #0
   18ef8:	cmp	r1, r7
   18efc:	cmpeq	r2, r6
   18f00:	bne	18ae0 <_start@@Base+0x3e00>
   18f04:	sub	r9, r5, r9
   18f08:	cmp	r9, #4
   18f0c:	ble	18ae0 <_start@@Base+0x3e00>
   18f10:	ldrb	r3, [r4, #20]
   18f14:	cmp	r3, #46	; 0x2e
   18f18:	bne	18ae0 <_start@@Base+0x3e00>
   18f1c:	mov	r3, sl
   18f20:	mov	r2, r5
   18f24:	add	r1, r4, #21
   18f28:	mov	r0, r8
   18f2c:	add	sp, sp, #20
   18f30:	ldrd	r4, [sp]
   18f34:	ldrd	r6, [sp, #8]
   18f38:	ldrd	r8, [sp, #16]
   18f3c:	ldrd	sl, [sp, #24]
   18f40:	ldr	lr, [sp, #32]
   18f44:	add	sp, sp, #36	; 0x24
   18f48:	b	16a70 <_start@@Base+0x1d90>
   18f4c:	sub	r3, pc, #532	; 0x214
   18f50:	ldrd	r2, [r3]
   18f54:	ldrd	r0, [sp, #8]
   18f58:	cmp	r1, r3
   18f5c:	cmpeq	r0, r2
   18f60:	bne	18ae0 <_start@@Base+0x3e00>
   18f64:	add	r9, r4, #24
   18f68:	mov	r1, r5
   18f6c:	mov	r0, r9
   18f70:	bl	14dd0 <_start@@Base+0xf0>
   18f74:	bic	r3, r1, #255	; 0xff
   18f78:	sub	r1, pc, #568	; 0x238
   18f7c:	ldrd	r0, [r1]
   18f80:	mov	r2, #0
   18f84:	cmp	r3, r1
   18f88:	cmpeq	r2, r0
   18f8c:	bne	18ae0 <_start@@Base+0x3e00>
   18f90:	sub	r9, r5, r9
   18f94:	cmp	r9, #3
   18f98:	ble	18ae0 <_start@@Base+0x3e00>
   18f9c:	ldrb	r3, [r4, #27]
   18fa0:	cmp	r3, #46	; 0x2e
   18fa4:	bne	18ae0 <_start@@Base+0x3e00>
   18fa8:	add	r6, r4, #28
   18fac:	mov	r1, r5
   18fb0:	mov	r0, r6
   18fb4:	mov	r9, #0
   18fb8:	bl	14dd0 <_start@@Base+0xf0>
   18fbc:	and	r3, r1, #-16777216	; 0xff000000
   18fc0:	cmp	r3, #2013265920	; 0x78000000
   18fc4:	cmpeq	r9, #0
   18fc8:	bne	18adc <_start@@Base+0x3dfc>
   18fcc:	mov	r2, r5
   18fd0:	mov	r0, r8
   18fd4:	str	fp, [sp]
   18fd8:	mov	r3, #1
   18fdc:	mov	r1, r6
   18fe0:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   18fe4:	cmp	r6, r0
   18fe8:	mov	r4, r0
   18fec:	beq	18ae0 <_start@@Base+0x3e00>
   18ff0:	mov	r2, #0
   18ff4:	mov	r3, #0
   18ff8:	strd	r2, [r7]
   18ffc:	str	r9, [sl]
   19000:	b	18ae0 <_start@@Base+0x3e00>
   19004:	mov	r2, r5
   19008:	mov	r0, r8
   1900c:	str	fp, [sp]
   19010:	mov	r3, #3
   19014:	mov	r1, r6
   19018:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   1901c:	cmp	r6, r0
   19020:	mov	r4, r0
   19024:	beq	18ae0 <_start@@Base+0x3e00>
   19028:	mov	r0, #17
   1902c:	mov	r1, #0
   19030:	strd	r0, [r7]
   19034:	str	r9, [sl]
   19038:	b	18ae0 <_start@@Base+0x3e00>
   1903c:	mov	r2, r5
   19040:	mov	r0, r8
   19044:	str	fp, [sp]
   19048:	mov	r3, #2
   1904c:	mov	r1, r9
   19050:	bl	2ebd0 <flatcc_json_parser_match_constant@@Base>
   19054:	cmp	r9, r0
   19058:	mov	r4, r0
   1905c:	beq	18adc <_start@@Base+0x3dfc>
   19060:	mov	r3, #0
   19064:	mov	r2, #0
   19068:	strd	r2, [r7]
   1906c:	mov	r3, #0
   19070:	str	r3, [sl]
   19074:	b	18ae0 <_start@@Base+0x3e00>
   19078:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1907c:	mov	ip, #0
   19080:	cmp	r1, r2
   19084:	strd	r6, [sp, #8]
   19088:	mov	r6, r2
   1908c:	strd	r8, [sp, #16]
   19090:	mov	r8, r0
   19094:	strd	sl, [sp, #24]
   19098:	str	lr, [sp, #32]
   1909c:	sub	sp, sp, #36	; 0x24
   190a0:	ldr	fp, [sp, #72]	; 0x48
   190a4:	str	r3, [sp, #12]
   190a8:	str	ip, [fp]
   190ac:	beq	191ec <_start@@Base+0x450c>
   190b0:	ldrb	r3, [r1]
   190b4:	mov	r4, r1
   190b8:	cmp	r3, #34	; 0x22
   190bc:	addeq	r4, r1, #1
   190c0:	bne	191c8 <_start@@Base+0x44e8>
   190c4:	sub	r3, r6, r4
   190c8:	cmp	r3, #1
   190cc:	ble	190e0 <_start@@Base+0x4400>
   190d0:	ldrb	r3, [r4]
   190d4:	cmp	r3, #32
   190d8:	bhi	190f4 <_start@@Base+0x4414>
   190dc:	beq	191d8 <_start@@Base+0x44f8>
   190e0:	mov	r1, r4
   190e4:	mov	r2, r6
   190e8:	mov	r0, r8
   190ec:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   190f0:	mov	r4, r0
   190f4:	cmp	r6, r4
   190f8:	moveq	r7, r6
   190fc:	beq	19150 <_start@@Base+0x4470>
   19100:	add	sl, sp, #20
   19104:	add	r9, sp, #24
   19108:	ldr	r5, [sp, #12]
   1910c:	b	19128 <_start@@Base+0x4448>
   19110:	cmp	r4, r0
   19114:	mov	r4, r0
   19118:	bne	19170 <_start@@Base+0x4490>
   1911c:	ldr	r3, [r5, #4]!
   19120:	cmp	r3, #0
   19124:	beq	191f4 <_start@@Base+0x4514>
   19128:	add	r3, sp, #16
   1912c:	mov	r2, r6
   19130:	stm	sp, {r9, sl}
   19134:	mov	r1, r4
   19138:	mov	r0, r8
   1913c:	ldr	r7, [r5]
   19140:	blx	r7
   19144:	cmp	r6, r0
   19148:	bne	19110 <_start@@Base+0x4430>
   1914c:	mov	r7, r0
   19150:	mov	r0, r7
   19154:	add	sp, sp, #36	; 0x24
   19158:	ldrd	r4, [sp]
   1915c:	ldrd	r6, [sp, #8]
   19160:	ldrd	r8, [sp, #16]
   19164:	ldrd	sl, [sp, #24]
   19168:	add	sp, sp, #32
   1916c:	pop	{pc}		; (ldr pc, [sp], #4)
   19170:	mov	r7, r0
   19174:	ldrd	r0, [sp, #24]
   19178:	bl	41fd0 <flatcc_json_printer_clear@@Base+0x5c8>
   1917c:	ldr	r3, [sp, #16]
   19180:	vmov	s15, r0
   19184:	cmp	r3, #0
   19188:	beq	191ac <_start@@Base+0x44cc>
   1918c:	vldr	s14, [fp]
   19190:	ldr	r3, [sp, #20]
   19194:	vsub.f32	s15, s14, s15
   19198:	cmp	r3, #0
   1919c:	vstr	s15, [fp]
   191a0:	beq	19150 <_start@@Base+0x4470>
   191a4:	mov	r4, r7
   191a8:	b	19108 <_start@@Base+0x4428>
   191ac:	vldr	s14, [fp]
   191b0:	ldr	r3, [sp, #20]
   191b4:	vadd.f32	s15, s14, s15
   191b8:	cmp	r3, #0
   191bc:	vstr	s15, [fp]
   191c0:	bne	191a4 <_start@@Base+0x44c4>
   191c4:	b	19150 <_start@@Base+0x4470>
   191c8:	mov	r3, #5
   191cc:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   191d0:	mov	r4, r0
   191d4:	b	190c4 <_start@@Base+0x43e4>
   191d8:	ldrb	r3, [r4, #1]
   191dc:	cmp	r3, #32
   191e0:	addhi	r4, r4, #1
   191e4:	bls	190e0 <_start@@Base+0x4400>
   191e8:	b	190f4 <_start@@Base+0x4414>
   191ec:	mov	r4, r2
   191f0:	b	190e0 <_start@@Base+0x4400>
   191f4:	mov	r1, r0
   191f8:	mov	r2, r6
   191fc:	mov	r0, r8
   19200:	mov	r3, #23
   19204:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   19208:	mov	r7, r0
   1920c:	b	19150 <_start@@Base+0x4470>
   19210:	vldr	d7, [pc, #400]	; 193a8 <_start@@Base+0x46c8>
   19214:	cmp	r1, r2
   19218:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1921c:	strd	r6, [sp, #8]
   19220:	mov	r6, r2
   19224:	strd	r8, [sp, #16]
   19228:	mov	r8, r0
   1922c:	strd	sl, [sp, #24]
   19230:	str	lr, [sp, #32]
   19234:	sub	sp, sp, #36	; 0x24
   19238:	ldr	fp, [sp, #72]	; 0x48
   1923c:	str	r3, [sp, #12]
   19240:	vstr	d7, [fp]
   19244:	beq	19384 <_start@@Base+0x46a4>
   19248:	ldrb	r3, [r1]
   1924c:	mov	r4, r1
   19250:	cmp	r3, #34	; 0x22
   19254:	addeq	r4, r1, #1
   19258:	bne	19360 <_start@@Base+0x4680>
   1925c:	sub	r3, r6, r4
   19260:	cmp	r3, #1
   19264:	ble	19278 <_start@@Base+0x4598>
   19268:	ldrb	r3, [r4]
   1926c:	cmp	r3, #32
   19270:	bhi	1928c <_start@@Base+0x45ac>
   19274:	beq	19370 <_start@@Base+0x4690>
   19278:	mov	r1, r4
   1927c:	mov	r2, r6
   19280:	mov	r0, r8
   19284:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   19288:	mov	r4, r0
   1928c:	cmp	r6, r4
   19290:	moveq	r7, r6
   19294:	beq	192e8 <_start@@Base+0x4608>
   19298:	add	sl, sp, #20
   1929c:	add	r9, sp, #24
   192a0:	ldr	r5, [sp, #12]
   192a4:	b	192c0 <_start@@Base+0x45e0>
   192a8:	cmp	r4, r0
   192ac:	mov	r4, r0
   192b0:	bne	19308 <_start@@Base+0x4628>
   192b4:	ldr	r3, [r5, #4]!
   192b8:	cmp	r3, #0
   192bc:	beq	1938c <_start@@Base+0x46ac>
   192c0:	add	r3, sp, #16
   192c4:	mov	r2, r6
   192c8:	stm	sp, {r9, sl}
   192cc:	mov	r1, r4
   192d0:	mov	r0, r8
   192d4:	ldr	r7, [r5]
   192d8:	blx	r7
   192dc:	cmp	r6, r0
   192e0:	bne	192a8 <_start@@Base+0x45c8>
   192e4:	mov	r7, r0
   192e8:	mov	r0, r7
   192ec:	add	sp, sp, #36	; 0x24
   192f0:	ldrd	r4, [sp]
   192f4:	ldrd	r6, [sp, #8]
   192f8:	ldrd	r8, [sp, #16]
   192fc:	ldrd	sl, [sp, #24]
   19300:	add	sp, sp, #32
   19304:	pop	{pc}		; (ldr pc, [sp], #4)
   19308:	mov	r7, r0
   1930c:	ldrd	r0, [sp, #24]
   19310:	bl	41d98 <flatcc_json_printer_clear@@Base+0x390>
   19314:	ldr	r3, [sp, #16]
   19318:	vmov	d7, r0, r1
   1931c:	cmp	r3, #0
   19320:	beq	19344 <_start@@Base+0x4664>
   19324:	vldr	d6, [fp]
   19328:	ldr	r3, [sp, #20]
   1932c:	vsub.f64	d7, d6, d7
   19330:	cmp	r3, #0
   19334:	vstr	d7, [fp]
   19338:	beq	192e8 <_start@@Base+0x4608>
   1933c:	mov	r4, r7
   19340:	b	192a0 <_start@@Base+0x45c0>
   19344:	vldr	d6, [fp]
   19348:	ldr	r3, [sp, #20]
   1934c:	vadd.f64	d7, d6, d7
   19350:	cmp	r3, #0
   19354:	vstr	d7, [fp]
   19358:	bne	1933c <_start@@Base+0x465c>
   1935c:	b	192e8 <_start@@Base+0x4608>
   19360:	mov	r3, #5
   19364:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   19368:	mov	r4, r0
   1936c:	b	1925c <_start@@Base+0x457c>
   19370:	ldrb	r3, [r4, #1]
   19374:	cmp	r3, #32
   19378:	addhi	r4, r4, #1
   1937c:	bls	19278 <_start@@Base+0x4598>
   19380:	b	1928c <_start@@Base+0x45ac>
   19384:	mov	r4, r2
   19388:	b	19278 <_start@@Base+0x4598>
   1938c:	mov	r1, r0
   19390:	mov	r2, r6
   19394:	mov	r0, r8
   19398:	mov	r3, #23
   1939c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   193a0:	mov	r7, r0
   193a4:	b	192e8 <_start@@Base+0x4608>
	...
   193b0:	strd	r4, [sp, #-16]!
   193b4:	mov	r4, r2
   193b8:	sub	r2, r2, r1
   193bc:	cmp	r2, #1
   193c0:	mov	r5, r0
   193c4:	str	r6, [sp, #8]
   193c8:	mov	r6, r3
   193cc:	str	lr, [sp, #12]
   193d0:	ble	193e4 <_start@@Base+0x4704>
   193d4:	ldrb	r3, [r1]
   193d8:	cmp	r3, #32
   193dc:	bhi	193f4 <_start@@Base+0x4714>
   193e0:	beq	194a0 <_start@@Base+0x47c0>
   193e4:	mov	r2, r4
   193e8:	mov	r0, r5
   193ec:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   193f0:	mov	r1, r0
   193f4:	cmp	r4, r1
   193f8:	moveq	r3, #0
   193fc:	moveq	r0, r4
   19400:	streq	r3, [r6]
   19404:	beq	19490 <_start@@Base+0x47b0>
   19408:	ldrb	r3, [r1]
   1940c:	cmp	r3, #44	; 0x2c
   19410:	beq	19464 <_start@@Base+0x4784>
   19414:	mov	r3, #0
   19418:	mov	r2, r4
   1941c:	str	r3, [r6]
   19420:	ldrb	r3, [r1]
   19424:	cmp	r3, #125	; 0x7d
   19428:	beq	19448 <_start@@Base+0x4768>
   1942c:	mov	r0, r5
   19430:	mov	r3, #10
   19434:	ldrd	r4, [sp]
   19438:	ldr	r6, [sp, #8]
   1943c:	ldr	lr, [sp, #12]
   19440:	add	sp, sp, #16
   19444:	b	2d8e0 <flatcc_json_parser_set_error@@Base>
   19448:	add	r1, r1, #1
   1944c:	mov	r0, r5
   19450:	ldrd	r4, [sp]
   19454:	ldr	r6, [sp, #8]
   19458:	ldr	lr, [sp, #12]
   1945c:	add	sp, sp, #16
   19460:	b	16bf0 <_start@@Base+0x1f10>
   19464:	add	r1, r1, #1
   19468:	mov	r2, r4
   1946c:	mov	r0, r5
   19470:	bl	16bf0 <_start@@Base+0x1f10>
   19474:	cmp	r4, r0
   19478:	beq	194dc <_start@@Base+0x47fc>
   1947c:	ldrb	r3, [r0]
   19480:	cmp	r3, #125	; 0x7d
   19484:	movne	r3, #1
   19488:	strne	r3, [r6]
   1948c:	beq	194c4 <_start@@Base+0x47e4>
   19490:	ldrd	r4, [sp]
   19494:	ldr	r6, [sp, #8]
   19498:	add	sp, sp, #12
   1949c:	pop	{pc}		; (ldr pc, [sp], #4)
   194a0:	ldrb	r3, [r1, #1]
   194a4:	cmp	r3, #32
   194a8:	addhi	r1, r1, #1
   194ac:	bhi	193f4 <_start@@Base+0x4714>
   194b0:	mov	r2, r4
   194b4:	mov	r0, r5
   194b8:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   194bc:	mov	r1, r0
   194c0:	b	193f4 <_start@@Base+0x4714>
   194c4:	mov	r3, #0
   194c8:	add	r1, r0, #1
   194cc:	mov	r2, r4
   194d0:	mov	r0, r5
   194d4:	str	r3, [r6]
   194d8:	b	19450 <_start@@Base+0x4770>
   194dc:	mov	ip, #0
   194e0:	mov	r0, r5
   194e4:	mov	r3, #10
   194e8:	mov	r2, r4
   194ec:	mov	r1, r4
   194f0:	str	ip, [r6]
   194f4:	b	19434 <_start@@Base+0x4754>
   194f8:	strd	r4, [sp, #-16]!
   194fc:	mov	r4, r2
   19500:	sub	r2, r2, r1
   19504:	cmp	r2, #1
   19508:	mov	r5, r0
   1950c:	str	r6, [sp, #8]
   19510:	mov	r6, r3
   19514:	str	lr, [sp, #12]
   19518:	ble	1952c <_start@@Base+0x484c>
   1951c:	ldrb	r3, [r1]
   19520:	cmp	r3, #32
   19524:	bhi	1953c <_start@@Base+0x485c>
   19528:	beq	195e8 <_start@@Base+0x4908>
   1952c:	mov	r2, r4
   19530:	mov	r0, r5
   19534:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   19538:	mov	r1, r0
   1953c:	cmp	r4, r1
   19540:	moveq	r3, #0
   19544:	moveq	r0, r4
   19548:	streq	r3, [r6]
   1954c:	beq	195d8 <_start@@Base+0x48f8>
   19550:	ldrb	r3, [r1]
   19554:	cmp	r3, #44	; 0x2c
   19558:	beq	195ac <_start@@Base+0x48cc>
   1955c:	mov	r3, #0
   19560:	mov	r2, r4
   19564:	str	r3, [r6]
   19568:	ldrb	r3, [r1]
   1956c:	cmp	r3, #93	; 0x5d
   19570:	beq	19590 <_start@@Base+0x48b0>
   19574:	mov	r0, r5
   19578:	mov	r3, #9
   1957c:	ldrd	r4, [sp]
   19580:	ldr	r6, [sp, #8]
   19584:	ldr	lr, [sp, #12]
   19588:	add	sp, sp, #16
   1958c:	b	2d8e0 <flatcc_json_parser_set_error@@Base>
   19590:	add	r1, r1, #1
   19594:	mov	r0, r5
   19598:	ldrd	r4, [sp]
   1959c:	ldr	r6, [sp, #8]
   195a0:	ldr	lr, [sp, #12]
   195a4:	add	sp, sp, #16
   195a8:	b	16bf0 <_start@@Base+0x1f10>
   195ac:	add	r1, r1, #1
   195b0:	mov	r2, r4
   195b4:	mov	r0, r5
   195b8:	bl	16bf0 <_start@@Base+0x1f10>
   195bc:	cmp	r4, r0
   195c0:	beq	19624 <_start@@Base+0x4944>
   195c4:	ldrb	r3, [r0]
   195c8:	cmp	r3, #93	; 0x5d
   195cc:	movne	r3, #1
   195d0:	strne	r3, [r6]
   195d4:	beq	1960c <_start@@Base+0x492c>
   195d8:	ldrd	r4, [sp]
   195dc:	ldr	r6, [sp, #8]
   195e0:	add	sp, sp, #12
   195e4:	pop	{pc}		; (ldr pc, [sp], #4)
   195e8:	ldrb	r3, [r1, #1]
   195ec:	cmp	r3, #32
   195f0:	addhi	r1, r1, #1
   195f4:	bhi	1953c <_start@@Base+0x485c>
   195f8:	mov	r2, r4
   195fc:	mov	r0, r5
   19600:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   19604:	mov	r1, r0
   19608:	b	1953c <_start@@Base+0x485c>
   1960c:	mov	r3, #0
   19610:	add	r1, r0, #1
   19614:	mov	r2, r4
   19618:	mov	r0, r5
   1961c:	str	r3, [r6]
   19620:	b	19598 <_start@@Base+0x48b8>
   19624:	mov	ip, #0
   19628:	mov	r0, r5
   1962c:	mov	r3, #9
   19630:	mov	r2, r4
   19634:	mov	r1, r4
   19638:	str	ip, [r6]
   1963c:	b	1957c <_start@@Base+0x489c>
   19640:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19644:	mov	ip, #0
   19648:	cmp	r1, r2
   1964c:	strd	r6, [sp, #8]
   19650:	mov	r6, r2
   19654:	strd	r8, [sp, #16]
   19658:	mov	r8, r0
   1965c:	strd	sl, [sp, #24]
   19660:	str	lr, [sp, #32]
   19664:	sub	sp, sp, #36	; 0x24
   19668:	str	r3, [sp, #12]
   1966c:	ldr	r3, [sp, #72]	; 0x48
   19670:	strb	ip, [r3]
   19674:	beq	197e4 <_start@@Base+0x4b04>
   19678:	ldrb	r3, [r1]
   1967c:	mov	r4, r1
   19680:	cmp	r3, #34	; 0x22
   19684:	addeq	r4, r1, #1
   19688:	bne	1979c <_start@@Base+0x4abc>
   1968c:	sub	r3, r6, r4
   19690:	cmp	r3, #1
   19694:	ble	196a8 <_start@@Base+0x49c8>
   19698:	ldrb	r3, [r4]
   1969c:	cmp	r3, #32
   196a0:	bhi	196bc <_start@@Base+0x49dc>
   196a4:	beq	197d0 <_start@@Base+0x4af0>
   196a8:	mov	r1, r4
   196ac:	mov	r2, r6
   196b0:	mov	r0, r8
   196b4:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   196b8:	mov	r4, r0
   196bc:	cmp	r6, r4
   196c0:	beq	19720 <_start@@Base+0x4a40>
   196c4:	mov	fp, #0
   196c8:	add	sl, sp, #20
   196cc:	add	r9, sp, #24
   196d0:	mov	r7, r4
   196d4:	mov	r1, r4
   196d8:	ldr	r5, [sp, #12]
   196dc:	b	196f8 <_start@@Base+0x4a18>
   196e0:	cmp	r7, r0
   196e4:	mov	r7, r0
   196e8:	bne	19740 <_start@@Base+0x4a60>
   196ec:	ldr	r3, [r5, #4]!
   196f0:	cmp	r3, #0
   196f4:	beq	19784 <_start@@Base+0x4aa4>
   196f8:	add	r3, sp, #16
   196fc:	mov	r2, r6
   19700:	stm	sp, {r9, sl}
   19704:	mov	r0, r8
   19708:	ldr	r4, [r5]
   1970c:	blx	r4
   19710:	cmp	r6, r0
   19714:	mov	r1, r0
   19718:	bne	196e0 <_start@@Base+0x4a00>
   1971c:	mov	r4, r0
   19720:	mov	r0, r4
   19724:	add	sp, sp, #36	; 0x24
   19728:	ldrd	r4, [sp]
   1972c:	ldrd	r6, [sp, #8]
   19730:	ldrd	r8, [sp, #16]
   19734:	ldrd	sl, [sp, #24]
   19738:	add	sp, sp, #32
   1973c:	pop	{pc}		; (ldr pc, [sp], #4)
   19740:	ldr	r3, [sp, #16]
   19744:	mov	r4, r0
   19748:	cmp	r3, #0
   1974c:	bne	197ac <_start@@Base+0x4acc>
   19750:	ldrd	r2, [sp, #24]
   19754:	orrs	r3, r2, r3
   19758:	movne	fp, #1
   1975c:	moveq	fp, #0
   19760:	ldr	r2, [sp, #20]
   19764:	ldr	r3, [sp, #72]	; 0x48
   19768:	cmp	r2, #0
   1976c:	ldr	r2, [sp, #72]	; 0x48
   19770:	ldrb	r3, [r3]
   19774:	add	r3, fp, r3
   19778:	strb	r3, [r2]
   1977c:	bne	196d0 <_start@@Base+0x49f0>
   19780:	b	19720 <_start@@Base+0x4a40>
   19784:	mov	r2, r6
   19788:	mov	r0, r8
   1978c:	mov	r3, #23
   19790:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   19794:	mov	r4, r0
   19798:	b	19720 <_start@@Base+0x4a40>
   1979c:	mov	r3, #5
   197a0:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   197a4:	mov	r4, r0
   197a8:	b	1968c <_start@@Base+0x49ac>
   197ac:	mov	r3, #8
   197b0:	mov	r2, r6
   197b4:	mov	r1, r4
   197b8:	mov	r0, r8
   197bc:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   197c0:	cmp	r6, r0
   197c4:	bne	19760 <_start@@Base+0x4a80>
   197c8:	mov	r4, r6
   197cc:	b	19720 <_start@@Base+0x4a40>
   197d0:	ldrb	r3, [r4, #1]
   197d4:	cmp	r3, #32
   197d8:	addhi	r4, r4, #1
   197dc:	bls	196a8 <_start@@Base+0x49c8>
   197e0:	b	196bc <_start@@Base+0x49dc>
   197e4:	mov	r4, r2
   197e8:	b	196a8 <_start@@Base+0x49c8>
   197ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   197f0:	mov	r4, #0
   197f4:	mov	r5, #0
   197f8:	strd	r6, [sp, #8]
   197fc:	cmp	r1, r2
   19800:	mov	r6, r2
   19804:	strd	r8, [sp, #16]
   19808:	mov	r8, r0
   1980c:	strd	sl, [sp, #24]
   19810:	str	lr, [sp, #32]
   19814:	sub	sp, sp, #44	; 0x2c
   19818:	ldr	fp, [sp, #80]	; 0x50
   1981c:	str	r3, [sp, #20]
   19820:	strd	r4, [fp]
   19824:	beq	199a4 <_start@@Base+0x4cc4>
   19828:	ldrb	r3, [r1]
   1982c:	cmp	r3, #34	; 0x22
   19830:	addeq	r4, r1, #1
   19834:	bne	1995c <_start@@Base+0x4c7c>
   19838:	sub	r3, r6, r4
   1983c:	cmp	r3, #1
   19840:	ble	19854 <_start@@Base+0x4b74>
   19844:	ldrb	r3, [r4]
   19848:	cmp	r3, #32
   1984c:	bhi	19868 <_start@@Base+0x4b88>
   19850:	beq	19990 <_start@@Base+0x4cb0>
   19854:	mov	r1, r4
   19858:	mov	r2, r6
   1985c:	mov	r0, r8
   19860:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   19864:	mov	r4, r0
   19868:	cmp	r6, r4
   1986c:	beq	198d4 <_start@@Base+0x4bf4>
   19870:	mov	r3, #0
   19874:	add	sl, sp, #28
   19878:	add	r9, sp, #32
   1987c:	str	r3, [sp, #12]
   19880:	str	r3, [sp, #16]
   19884:	mov	r7, r4
   19888:	mov	r1, r4
   1988c:	ldr	r5, [sp, #20]
   19890:	b	198ac <_start@@Base+0x4bcc>
   19894:	cmp	r7, r0
   19898:	mov	r7, r0
   1989c:	bne	198f4 <_start@@Base+0x4c14>
   198a0:	ldr	r3, [r5, #4]!
   198a4:	cmp	r3, #0
   198a8:	beq	19944 <_start@@Base+0x4c64>
   198ac:	add	r3, sp, #24
   198b0:	mov	r2, r6
   198b4:	stm	sp, {r9, sl}
   198b8:	mov	r0, r8
   198bc:	ldr	r4, [r5]
   198c0:	blx	r4
   198c4:	cmp	r6, r0
   198c8:	mov	r1, r0
   198cc:	bne	19894 <_start@@Base+0x4bb4>
   198d0:	mov	r4, r0
   198d4:	mov	r0, r4
   198d8:	add	sp, sp, #44	; 0x2c
   198dc:	ldrd	r4, [sp]
   198e0:	ldrd	r6, [sp, #8]
   198e4:	ldrd	r8, [sp, #16]
   198e8:	ldrd	sl, [sp, #24]
   198ec:	add	sp, sp, #32
   198f0:	pop	{pc}		; (ldr pc, [sp], #4)
   198f4:	ldr	r3, [sp, #24]
   198f8:	mov	r4, r0
   198fc:	cmp	r3, #0
   19900:	bne	1996c <_start@@Base+0x4c8c>
   19904:	ldr	r3, [sp, #32]
   19908:	str	r3, [sp, #12]
   1990c:	ldr	r3, [sp, #36]	; 0x24
   19910:	str	r3, [sp, #16]
   19914:	ldr	r3, [fp]
   19918:	ldr	r0, [sp, #12]
   1991c:	ldr	r2, [fp, #4]
   19920:	ldr	r1, [sp, #28]
   19924:	adds	r3, r3, r0
   19928:	ldr	r0, [sp, #16]
   1992c:	str	r3, [fp]
   19930:	adc	r2, r2, r0
   19934:	cmp	r1, #0
   19938:	str	r2, [fp, #4]
   1993c:	bne	19884 <_start@@Base+0x4ba4>
   19940:	b	198d4 <_start@@Base+0x4bf4>
   19944:	mov	r2, r6
   19948:	mov	r0, r8
   1994c:	mov	r3, #23
   19950:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   19954:	mov	r4, r0
   19958:	b	198d4 <_start@@Base+0x4bf4>
   1995c:	mov	r3, #5
   19960:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   19964:	mov	r4, r0
   19968:	b	19838 <_start@@Base+0x4b58>
   1996c:	mov	r3, #8
   19970:	mov	r2, r6
   19974:	mov	r1, r4
   19978:	mov	r0, r8
   1997c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   19980:	cmp	r6, r0
   19984:	bne	19914 <_start@@Base+0x4c34>
   19988:	mov	r4, r6
   1998c:	b	198d4 <_start@@Base+0x4bf4>
   19990:	ldrb	r3, [r4, #1]
   19994:	cmp	r3, #32
   19998:	addhi	r4, r4, #1
   1999c:	bls	19854 <_start@@Base+0x4b74>
   199a0:	b	19868 <_start@@Base+0x4b88>
   199a4:	mov	r4, r2
   199a8:	b	19854 <_start@@Base+0x4b74>
   199ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   199b0:	mov	ip, #0
   199b4:	cmp	r1, r2
   199b8:	strd	r6, [sp, #8]
   199bc:	mov	r6, r2
   199c0:	strd	r8, [sp, #16]
   199c4:	mov	r8, r0
   199c8:	strd	sl, [sp, #24]
   199cc:	str	lr, [sp, #32]
   199d0:	sub	sp, sp, #36	; 0x24
   199d4:	ldr	fp, [sp, #72]	; 0x48
   199d8:	str	r3, [sp, #12]
   199dc:	str	ip, [fp]
   199e0:	beq	19b70 <_start@@Base+0x4e90>
   199e4:	ldrb	r3, [r1]
   199e8:	mov	r4, r1
   199ec:	cmp	r3, #34	; 0x22
   199f0:	addeq	r4, r1, #1
   199f4:	bne	19b4c <_start@@Base+0x4e6c>
   199f8:	sub	r3, r6, r4
   199fc:	cmp	r3, #1
   19a00:	ble	19a14 <_start@@Base+0x4d34>
   19a04:	ldrb	r3, [r4]
   19a08:	cmp	r3, #32
   19a0c:	bhi	19a28 <_start@@Base+0x4d48>
   19a10:	beq	19b5c <_start@@Base+0x4e7c>
   19a14:	mov	r1, r4
   19a18:	mov	r2, r6
   19a1c:	mov	r0, r8
   19a20:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   19a24:	mov	r4, r0
   19a28:	cmp	r6, r4
   19a2c:	beq	19a90 <_start@@Base+0x4db0>
   19a30:	mov	r3, #0
   19a34:	add	sl, sp, #20
   19a38:	add	r9, sp, #24
   19a3c:	str	r3, [sp, #8]
   19a40:	mov	r7, r4
   19a44:	mov	r1, r4
   19a48:	ldr	r5, [sp, #12]
   19a4c:	b	19a68 <_start@@Base+0x4d88>
   19a50:	cmp	r7, r0
   19a54:	mov	r7, r0
   19a58:	bne	19ab0 <_start@@Base+0x4dd0>
   19a5c:	ldr	r3, [r5, #4]!
   19a60:	cmp	r3, #0
   19a64:	beq	19af8 <_start@@Base+0x4e18>
   19a68:	add	r3, sp, #16
   19a6c:	mov	r2, r6
   19a70:	stm	sp, {r9, sl}
   19a74:	mov	r0, r8
   19a78:	ldr	r4, [r5]
   19a7c:	blx	r4
   19a80:	cmp	r6, r0
   19a84:	mov	r1, r0
   19a88:	bne	19a50 <_start@@Base+0x4d70>
   19a8c:	mov	r4, r0
   19a90:	mov	r0, r4
   19a94:	add	sp, sp, #36	; 0x24
   19a98:	ldrd	r4, [sp]
   19a9c:	ldrd	r6, [sp, #8]
   19aa0:	ldrd	r8, [sp, #16]
   19aa4:	ldrd	sl, [sp, #24]
   19aa8:	add	sp, sp, #32
   19aac:	pop	{pc}		; (ldr pc, [sp], #4)
   19ab0:	ldr	r1, [sp, #16]
   19ab4:	mov	r4, r0
   19ab8:	ldrd	r2, [sp, #24]
   19abc:	cmp	r1, #0
   19ac0:	beq	19b10 <_start@@Base+0x4e30>
   19ac4:	cmp	r3, #0
   19ac8:	cmpeq	r2, #-2147483648	; 0x80000000
   19acc:	rsbls	r3, r2, #0
   19ad0:	strls	r3, [sp, #8]
   19ad4:	bhi	19b78 <_start@@Base+0x4e98>
   19ad8:	ldr	r3, [fp]
   19adc:	ldr	r1, [sp, #8]
   19ae0:	ldr	r2, [sp, #20]
   19ae4:	add	r3, r3, r1
   19ae8:	cmp	r2, #0
   19aec:	str	r3, [fp]
   19af0:	bne	19a40 <_start@@Base+0x4d60>
   19af4:	b	19a90 <_start@@Base+0x4db0>
   19af8:	mov	r2, r6
   19afc:	mov	r0, r8
   19b00:	mov	r3, #23
   19b04:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   19b08:	mov	r4, r0
   19b0c:	b	19a90 <_start@@Base+0x4db0>
   19b10:	mov	r1, #0
   19b14:	mvn	r0, #-2147483648	; 0x80000000
   19b18:	cmp	r3, r1
   19b1c:	cmpeq	r2, r0
   19b20:	strls	r2, [sp, #8]
   19b24:	bls	19ad8 <_start@@Base+0x4df8>
   19b28:	mov	r3, #7
   19b2c:	mov	r2, r6
   19b30:	mov	r1, r4
   19b34:	mov	r0, r8
   19b38:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   19b3c:	cmp	r6, r0
   19b40:	bne	19ad8 <_start@@Base+0x4df8>
   19b44:	mov	r4, r6
   19b48:	b	19a90 <_start@@Base+0x4db0>
   19b4c:	mov	r3, #5
   19b50:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   19b54:	mov	r4, r0
   19b58:	b	199f8 <_start@@Base+0x4d18>
   19b5c:	ldrb	r3, [r4, #1]
   19b60:	cmp	r3, #32
   19b64:	addhi	r4, r4, #1
   19b68:	bls	19a14 <_start@@Base+0x4d34>
   19b6c:	b	19a28 <_start@@Base+0x4d48>
   19b70:	mov	r4, r2
   19b74:	b	19a14 <_start@@Base+0x4d34>
   19b78:	mov	r3, #8
   19b7c:	mov	r2, r6
   19b80:	mov	r1, r4
   19b84:	mov	r0, r8
   19b88:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   19b8c:	b	19b3c <_start@@Base+0x4e5c>
   19b90:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19b94:	mov	r5, r0
   19b98:	mov	r4, r2
   19b9c:	ldr	r0, [r0]
   19ba0:	mov	r2, #4
   19ba4:	strd	r6, [sp, #8]
   19ba8:	mov	r7, r3
   19bac:	mov	r3, #0
   19bb0:	mov	r6, r1
   19bb4:	mov	r1, r2
   19bb8:	strd	r8, [sp, #16]
   19bbc:	strd	sl, [sp, #24]
   19bc0:	str	lr, [sp, #32]
   19bc4:	sub	sp, sp, #52	; 0x34
   19bc8:	str	r3, [r7]
   19bcc:	bl	26048 <flatcc_builder_start_struct@@Base>
   19bd0:	subs	r3, r0, #0
   19bd4:	str	r3, [sp, #24]
   19bd8:	beq	19c28 <_start@@Base+0x4f48>
   19bdc:	cmp	r6, r4
   19be0:	beq	19bf0 <_start@@Base+0x4f10>
   19be4:	ldrb	r3, [r6]
   19be8:	cmp	r3, #123	; 0x7b
   19bec:	beq	19c60 <_start@@Base+0x4f80>
   19bf0:	mov	r1, r6
   19bf4:	mov	r3, #21
   19bf8:	mov	r2, r4
   19bfc:	mov	r0, r5
   19c00:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   19c04:	mov	r8, r0
   19c08:	cmp	r4, r8
   19c0c:	beq	1a1c4 <_start@@Base+0x54e4>
   19c10:	ldr	r0, [r5]
   19c14:	bl	2621c <flatcc_builder_end_struct@@Base>
   19c18:	cmp	r0, #0
   19c1c:	str	r0, [r7]
   19c20:	moveq	r6, r8
   19c24:	bne	19c40 <_start@@Base+0x4f60>
   19c28:	mov	r2, r4
   19c2c:	mov	r1, r6
   19c30:	mov	r0, r5
   19c34:	mov	r3, #33	; 0x21
   19c38:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   19c3c:	mov	r8, r0
   19c40:	mov	r0, r8
   19c44:	add	sp, sp, #52	; 0x34
   19c48:	ldrd	r4, [sp]
   19c4c:	ldrd	r6, [sp, #8]
   19c50:	ldrd	r8, [sp, #16]
   19c54:	ldrd	sl, [sp, #24]
   19c58:	add	sp, sp, #32
   19c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   19c60:	add	r1, r6, #1
   19c64:	mov	r2, r4
   19c68:	mov	r0, r5
   19c6c:	bl	16bf0 <_start@@Base+0x1f10>
   19c70:	cmp	r4, r0
   19c74:	mov	r1, r0
   19c78:	beq	19c88 <_start@@Base+0x4fa8>
   19c7c:	ldrb	r3, [r0]
   19c80:	cmp	r3, #125	; 0x7d
   19c84:	beq	19f78 <_start@@Base+0x5298>
   19c88:	mov	r3, #0
   19c8c:	movt	r3, #65535	; 0xffff
   19c90:	str	r3, [sp, #28]
   19c94:	cmp	r4, r1
   19c98:	beq	19cac <_start@@Base+0x4fcc>
   19c9c:	ldrb	r3, [r1]
   19ca0:	cmp	r3, #34	; 0x22
   19ca4:	addeq	r1, r1, #1
   19ca8:	bne	19fa4 <_start@@Base+0x52c4>
   19cac:	sub	r3, r4, r1
   19cb0:	cmp	r3, #8
   19cb4:	bhi	19ce8 <_start@@Base+0x5008>
   19cb8:	sub	r3, r3, #1
   19cbc:	cmp	r3, #7
   19cc0:	ldrls	pc, [pc, r3, lsl #2]
   19cc4:	b	19f90 <_start@@Base+0x52b0>
   19cc8:	andeq	r9, r1, r4, asr #29
   19ccc:			; <UNDEFINED> instruction: 0x00019eb8
   19cd0:	andeq	r9, r1, ip, lsr #29
   19cd4:	andeq	r9, r1, r0, lsr #29
   19cd8:	muleq	r1, r4, lr
   19cdc:	andeq	r9, r1, r8, lsl #29
   19ce0:	andeq	r9, r1, ip, ror lr
   19ce4:	andeq	r9, r1, r8, ror #25
   19ce8:	ldrb	sl, [r1, #7]
   19cec:	mov	fp, #0
   19cf0:	mov	r3, fp
   19cf4:	ldrb	r8, [r1, #6]
   19cf8:	orr	r2, sl, r8, lsl #8
   19cfc:	ldrb	r8, [r1, #5]
   19d00:	orr	r2, r2, r8, lsl #16
   19d04:	ldrb	r8, [r1, #4]
   19d08:	orr	r2, r2, r8, lsl #24
   19d0c:	ldrb	sl, [r1, #3]
   19d10:	orr	r3, r3, sl
   19d14:	ldrb	sl, [r1, #2]
   19d18:	orr	sl, r3, sl, lsl #8
   19d1c:	ldrb	r8, [r1, #1]
   19d20:	orr	sl, sl, r8, lsl #16
   19d24:	str	r2, [sp, #8]
   19d28:	ldrb	r2, [r1]
   19d2c:	add	r9, pc, #988	; 0x3dc
   19d30:	ldrd	r8, [r9]
   19d34:	orr	r3, sl, r2, lsl #24
   19d38:	str	r3, [sp, #12]
   19d3c:	ldrd	r2, [sp, #8]
   19d40:	cmp	r3, r9
   19d44:	cmpeq	r2, r8
   19d48:	bne	19f90 <_start@@Base+0x52b0>
   19d4c:	add	r6, r1, #8
   19d50:	sub	r3, r4, r6
   19d54:	cmp	r3, #8
   19d58:	bhi	19d88 <_start@@Base+0x50a8>
   19d5c:	sub	r2, r3, #2
   19d60:	cmp	r2, #6
   19d64:	ldrls	pc, [pc, r2, lsl #2]
   19d68:	b	19df8 <_start@@Base+0x5118>
   19d6c:	andeq	r9, r1, r0, ror #29
   19d70:	ldrdeq	r9, [r1], -r8
   19d74:	ldrdeq	r9, [r1], -r0
   19d78:	andeq	r9, r1, r4, ror lr
   19d7c:	andeq	r9, r1, r4, ror lr
   19d80:	andeq	r9, r1, r8, lsl #27
   19d84:	andeq	r9, r1, r8, lsl #27
   19d88:	mov	r9, #0
   19d8c:	mov	sl, r9
   19d90:	mov	r8, sl
   19d94:	ldrb	sl, [r1, #11]
   19d98:	orr	sl, r8, sl
   19d9c:	ldrb	r8, [r1, #10]
   19da0:	orr	sl, sl, r8, lsl #8
   19da4:	ldrb	r8, [r1, #9]
   19da8:	mov	r2, #0
   19dac:	mov	fp, #0
   19db0:	movt	fp, #24932	; 0x6164
   19db4:	str	r2, [sp, #16]
   19db8:	ldr	r2, [sp, #28]
   19dbc:	orr	sl, sl, r8, lsl #16
   19dc0:	ldrb	r8, [r1, #8]
   19dc4:	orr	r8, sl, r8, lsl #24
   19dc8:	mov	sl, #0
   19dcc:	and	r2, r8, r2
   19dd0:	str	r2, [sp, #20]
   19dd4:	ldrd	r8, [sp, #16]
   19dd8:	cmp	r9, fp
   19ddc:	cmpeq	r8, sl
   19de0:	bne	19df8 <_start@@Base+0x5118>
   19de4:	cmp	r3, #2
   19de8:	ble	19df8 <_start@@Base+0x5118>
   19dec:	ldrb	r3, [r1, #10]
   19df0:	cmp	r3, #34	; 0x22
   19df4:	beq	19fbc <_start@@Base+0x52dc>
   19df8:	mov	r1, r6
   19dfc:	mov	r2, r4
   19e00:	mov	r0, r5
   19e04:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   19e08:	mov	r6, r0
   19e0c:	sub	r3, r4, r6
   19e10:	cmp	r3, #1
   19e14:	ble	19e28 <_start@@Base+0x5148>
   19e18:	ldrb	r3, [r6]
   19e1c:	cmp	r3, #32
   19e20:	bhi	19e3c <_start@@Base+0x515c>
   19e24:	beq	19ee8 <_start@@Base+0x5208>
   19e28:	mov	r1, r6
   19e2c:	mov	r2, r4
   19e30:	mov	r0, r5
   19e34:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   19e38:	mov	r6, r0
   19e3c:	cmp	r4, r6
   19e40:	beq	19c28 <_start@@Base+0x4f48>
   19e44:	ldrb	r3, [r6]
   19e48:	cmp	r3, #44	; 0x2c
   19e4c:	beq	19f34 <_start@@Base+0x5254>
   19e50:	cmp	r3, #125	; 0x7d
   19e54:	beq	19efc <_start@@Base+0x521c>
   19e58:	mov	r1, r6
   19e5c:	mov	r3, #10
   19e60:	mov	r2, r4
   19e64:	mov	r0, r5
   19e68:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   19e6c:	mov	r8, r0
   19e70:	b	19c08 <_start@@Base+0x4f28>
   19e74:	mov	sl, #0
   19e78:	b	19d90 <_start@@Base+0x50b0>
   19e7c:	mov	sl, #0
   19e80:	mov	fp, #0
   19e84:	b	19cf0 <_start@@Base+0x5010>
   19e88:	mov	r2, #0
   19e8c:	mov	r3, r2
   19e90:	b	19cfc <_start@@Base+0x501c>
   19e94:	mov	r2, #0
   19e98:	mov	r3, r2
   19e9c:	b	19d04 <_start@@Base+0x5024>
   19ea0:	mov	r2, #0
   19ea4:	mov	r3, r2
   19ea8:	b	19d0c <_start@@Base+0x502c>
   19eac:	mov	r2, #0
   19eb0:	mov	r3, r2
   19eb4:	b	19d14 <_start@@Base+0x5034>
   19eb8:	mov	r2, #0
   19ebc:	mov	sl, r2
   19ec0:	b	19d1c <_start@@Base+0x503c>
   19ec4:	mov	r2, #0
   19ec8:	mov	sl, r2
   19ecc:	b	19d24 <_start@@Base+0x5044>
   19ed0:	mov	r8, #0
   19ed4:	b	19d94 <_start@@Base+0x50b4>
   19ed8:	mov	sl, #0
   19edc:	b	19d9c <_start@@Base+0x50bc>
   19ee0:	mov	sl, #0
   19ee4:	b	19da4 <_start@@Base+0x50c4>
   19ee8:	ldrb	r3, [r6, #1]
   19eec:	cmp	r3, #32
   19ef0:	addhi	r6, r6, #1
   19ef4:	bls	19e28 <_start@@Base+0x5148>
   19ef8:	b	19e3c <_start@@Base+0x515c>
   19efc:	add	r8, r6, #1
   19f00:	sub	r3, r4, r8
   19f04:	cmp	r3, #1
   19f08:	ble	19f1c <_start@@Base+0x523c>
   19f0c:	ldrb	r3, [r6, #1]
   19f10:	cmp	r3, #32
   19f14:	bhi	19c08 <_start@@Base+0x4f28>
   19f18:	beq	1a0f8 <_start@@Base+0x5418>
   19f1c:	mov	r1, r8
   19f20:	mov	r2, r4
   19f24:	mov	r0, r5
   19f28:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   19f2c:	mov	r8, r0
   19f30:	b	19c08 <_start@@Base+0x4f28>
   19f34:	add	r1, r6, #1
   19f38:	sub	r3, r4, r1
   19f3c:	cmp	r3, #1
   19f40:	ble	19f54 <_start@@Base+0x5274>
   19f44:	ldrb	r3, [r6, #1]
   19f48:	cmp	r3, #32
   19f4c:	bhi	19f64 <_start@@Base+0x5284>
   19f50:	beq	1a118 <_start@@Base+0x5438>
   19f54:	mov	r2, r4
   19f58:	mov	r0, r5
   19f5c:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   19f60:	mov	r1, r0
   19f64:	cmp	r4, r1
   19f68:	beq	1a130 <_start@@Base+0x5450>
   19f6c:	ldrb	r3, [r1]
   19f70:	cmp	r3, #125	; 0x7d
   19f74:	bne	19c94 <_start@@Base+0x4fb4>
   19f78:	add	r1, r1, #1
   19f7c:	mov	r2, r4
   19f80:	mov	r0, r5
   19f84:	bl	16bf0 <_start@@Base+0x1f10>
   19f88:	mov	r8, r0
   19f8c:	b	19c08 <_start@@Base+0x4f28>
   19f90:	mov	r2, r4
   19f94:	mov	r0, r5
   19f98:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   19f9c:	mov	r6, r0
   19fa0:	b	19e0c <_start@@Base+0x512c>
   19fa4:	mov	r3, #5
   19fa8:	mov	r2, r4
   19fac:	mov	r0, r5
   19fb0:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   19fb4:	mov	r1, r0
   19fb8:	b	19cac <_start@@Base+0x4fcc>
   19fbc:	add	r0, r1, #11
   19fc0:	sub	r3, r4, r0
   19fc4:	cmp	r3, #1
   19fc8:	ble	19fdc <_start@@Base+0x52fc>
   19fcc:	ldrb	r3, [r1, #11]
   19fd0:	cmp	r3, #32
   19fd4:	bhi	19fec <_start@@Base+0x530c>
   19fd8:	beq	1a17c <_start@@Base+0x549c>
   19fdc:	mov	r1, r0
   19fe0:	mov	r2, r4
   19fe4:	mov	r0, r5
   19fe8:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   19fec:	cmp	r4, r0
   19ff0:	beq	1a000 <_start@@Base+0x5320>
   19ff4:	ldrb	r3, [r0]
   19ff8:	cmp	r3, #58	; 0x3a
   19ffc:	beq	1a190 <_start@@Base+0x54b0>
   1a000:	mov	r1, r0
   1a004:	mov	r3, #4
   1a008:	mov	r2, r4
   1a00c:	mov	r0, r5
   1a010:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1a014:	mov	r8, r0
   1a018:	cmp	r6, r8
   1a01c:	beq	19df8 <_start@@Base+0x5118>
   1a020:	mov	r3, #0
   1a024:	mov	r0, #0
   1a028:	mov	r1, #0
   1a02c:	cmp	r4, r8
   1a030:	str	r3, [sp, #32]
   1a034:	str	r3, [sp, #36]	; 0x24
   1a038:	strd	r0, [sp, #40]	; 0x28
   1a03c:	beq	1a0a8 <_start@@Base+0x53c8>
   1a040:	add	r0, sp, #40	; 0x28
   1a044:	add	r3, sp, #36	; 0x24
   1a048:	mov	r2, r4
   1a04c:	mov	r1, r8
   1a050:	str	r0, [sp]
   1a054:	mov	r0, r5
   1a058:	bl	316c0 <flatcc_json_parser_integer@@Base>
   1a05c:	cmp	r8, r0
   1a060:	mov	r6, r0
   1a064:	bne	1a0b0 <_start@@Base+0x53d0>
   1a068:	add	r0, sp, #32
   1a06c:	movw	r3, #32880	; 0x8070
   1a070:	movt	r3, #5
   1a074:	mov	r2, r4
   1a078:	mov	r1, r6
   1a07c:	str	r0, [sp]
   1a080:	mov	r0, r5
   1a084:	bl	199ac <_start@@Base+0x4ccc>
   1a088:	cmp	r4, r0
   1a08c:	cmpne	r0, r6
   1a090:	beq	1a1a8 <_start@@Base+0x54c8>
   1a094:	ldr	r2, [sp, #32]
   1a098:	mov	r6, r0
   1a09c:	ldr	r3, [sp, #24]
   1a0a0:	str	r2, [r3]
   1a0a4:	b	19e0c <_start@@Base+0x512c>
   1a0a8:	mov	r6, r4
   1a0ac:	b	1a068 <_start@@Base+0x5388>
   1a0b0:	ldr	r1, [sp, #36]	; 0x24
   1a0b4:	ldrd	r2, [sp, #40]	; 0x28
   1a0b8:	cmp	r1, #0
   1a0bc:	beq	1a14c <_start@@Base+0x546c>
   1a0c0:	cmp	r3, #0
   1a0c4:	cmpeq	r2, #-2147483648	; 0x80000000
   1a0c8:	rsbls	r2, r2, #0
   1a0cc:	bls	1a09c <_start@@Base+0x53bc>
   1a0d0:	mov	r1, r0
   1a0d4:	mov	r3, #8
   1a0d8:	mov	r2, r4
   1a0dc:	mov	r0, r5
   1a0e0:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1a0e4:	mov	r6, r0
   1a0e8:	cmp	r8, r6
   1a0ec:	ldrne	r2, [sp, #32]
   1a0f0:	bne	1a09c <_start@@Base+0x53bc>
   1a0f4:	b	1a068 <_start@@Base+0x5388>
   1a0f8:	ldrb	r3, [r6, #2]
   1a0fc:	cmp	r3, #32
   1a100:	addhi	r8, r6, #2
   1a104:	bls	19f1c <_start@@Base+0x523c>
   1a108:	b	19c08 <_start@@Base+0x4f28>
   1a10c:	nop	{0}
   1a110:	cmpvc	pc, #1342177286	; 0x50000006
   1a114:	rsbvs	r6, pc, #428	; 0x1ac
   1a118:	ldrb	r3, [r6, #2]
   1a11c:	cmp	r3, #32
   1a120:	addhi	r1, r6, #2
   1a124:	bls	19f54 <_start@@Base+0x5274>
   1a128:	cmp	r4, r1
   1a12c:	bne	19f6c <_start@@Base+0x528c>
   1a130:	mov	r3, #10
   1a134:	mov	r2, r4
   1a138:	mov	r1, r4
   1a13c:	mov	r0, r5
   1a140:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1a144:	mov	r8, r0
   1a148:	b	19c08 <_start@@Base+0x4f28>
   1a14c:	mov	r1, #0
   1a150:	mvn	r0, #-2147483648	; 0x80000000
   1a154:	cmp	r3, r1
   1a158:	cmpeq	r2, r0
   1a15c:	bls	1a09c <_start@@Base+0x53bc>
   1a160:	mov	r1, r6
   1a164:	mov	r3, #7
   1a168:	mov	r2, r4
   1a16c:	mov	r0, r5
   1a170:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1a174:	mov	r6, r0
   1a178:	b	1a0e8 <_start@@Base+0x5408>
   1a17c:	ldrb	r3, [r1, #12]
   1a180:	cmp	r3, #32
   1a184:	addhi	r0, r1, #12
   1a188:	bls	19fdc <_start@@Base+0x52fc>
   1a18c:	b	19fec <_start@@Base+0x530c>
   1a190:	add	r1, r0, #1
   1a194:	mov	r2, r4
   1a198:	mov	r0, r5
   1a19c:	bl	16bf0 <_start@@Base+0x1f10>
   1a1a0:	mov	r8, r0
   1a1a4:	b	1a018 <_start@@Base+0x5338>
   1a1a8:	mov	r1, r0
   1a1ac:	mov	r3, #33	; 0x21
   1a1b0:	mov	r2, r4
   1a1b4:	mov	r0, r5
   1a1b8:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1a1bc:	mov	r8, r0
   1a1c0:	b	19c08 <_start@@Base+0x4f28>
   1a1c4:	mov	r6, r4
   1a1c8:	b	19c28 <_start@@Base+0x4f48>
   1a1cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a1d0:	mov	ip, #0
   1a1d4:	cmp	r1, r2
   1a1d8:	strd	r6, [sp, #8]
   1a1dc:	mov	r6, r2
   1a1e0:	strd	r8, [sp, #16]
   1a1e4:	mov	r8, r0
   1a1e8:	strd	sl, [sp, #24]
   1a1ec:	mov	fp, r3
   1a1f0:	str	lr, [sp, #32]
   1a1f4:	sub	sp, sp, #36	; 0x24
   1a1f8:	ldr	r3, [sp, #72]	; 0x48
   1a1fc:	strh	ip, [r3]
   1a200:	beq	1a3a4 <_start@@Base+0x56c4>
   1a204:	ldrb	r3, [r1]
   1a208:	mov	r4, r1
   1a20c:	cmp	r3, #34	; 0x22
   1a210:	addeq	r4, r1, #1
   1a214:	bne	1a380 <_start@@Base+0x56a0>
   1a218:	sub	r3, r6, r4
   1a21c:	cmp	r3, #1
   1a220:	ble	1a234 <_start@@Base+0x5554>
   1a224:	ldrb	r3, [r4]
   1a228:	cmp	r3, #32
   1a22c:	bhi	1a248 <_start@@Base+0x5568>
   1a230:	beq	1a390 <_start@@Base+0x56b0>
   1a234:	mov	r1, r4
   1a238:	mov	r2, r6
   1a23c:	mov	r0, r8
   1a240:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1a244:	mov	r4, r0
   1a248:	cmp	r6, r4
   1a24c:	beq	1a2b0 <_start@@Base+0x55d0>
   1a250:	mov	r3, #0
   1a254:	add	sl, sp, #20
   1a258:	add	r9, sp, #24
   1a25c:	str	r3, [sp, #12]
   1a260:	mov	r5, fp
   1a264:	mov	r7, r4
   1a268:	mov	r1, r4
   1a26c:	b	1a288 <_start@@Base+0x55a8>
   1a270:	cmp	r7, r0
   1a274:	mov	r7, r0
   1a278:	bne	1a2d0 <_start@@Base+0x55f0>
   1a27c:	ldr	r3, [r5, #4]!
   1a280:	cmp	r3, #0
   1a284:	beq	1a324 <_start@@Base+0x5644>
   1a288:	add	r3, sp, #16
   1a28c:	mov	r2, r6
   1a290:	stm	sp, {r9, sl}
   1a294:	mov	r0, r8
   1a298:	ldr	r4, [r5]
   1a29c:	blx	r4
   1a2a0:	cmp	r6, r0
   1a2a4:	mov	r1, r0
   1a2a8:	bne	1a270 <_start@@Base+0x5590>
   1a2ac:	mov	r4, r0
   1a2b0:	mov	r0, r4
   1a2b4:	add	sp, sp, #36	; 0x24
   1a2b8:	ldrd	r4, [sp]
   1a2bc:	ldrd	r6, [sp, #8]
   1a2c0:	ldrd	r8, [sp, #16]
   1a2c4:	ldrd	sl, [sp, #24]
   1a2c8:	add	sp, sp, #32
   1a2cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2d0:	ldr	r1, [sp, #16]
   1a2d4:	mov	r4, r0
   1a2d8:	ldrd	r2, [sp, #24]
   1a2dc:	cmp	r1, #0
   1a2e0:	beq	1a33c <_start@@Base+0x565c>
   1a2e4:	cmp	r3, #0
   1a2e8:	cmpeq	r2, #32768	; 0x8000
   1a2ec:	bhi	1a3ac <_start@@Base+0x56cc>
   1a2f0:	rsb	r2, r2, #0
   1a2f4:	uxth	r2, r2
   1a2f8:	sxth	r3, r2
   1a2fc:	str	r3, [sp, #12]
   1a300:	ldr	r3, [sp, #72]	; 0x48
   1a304:	ldrh	r1, [r3]
   1a308:	ldr	r3, [sp, #20]
   1a30c:	add	r2, r2, r1
   1a310:	cmp	r3, #0
   1a314:	ldr	r3, [sp, #72]	; 0x48
   1a318:	strh	r2, [r3]
   1a31c:	bne	1a260 <_start@@Base+0x5580>
   1a320:	b	1a2b0 <_start@@Base+0x55d0>
   1a324:	mov	r2, r6
   1a328:	mov	r0, r8
   1a32c:	mov	r3, #23
   1a330:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1a334:	mov	r4, r0
   1a338:	b	1a2b0 <_start@@Base+0x55d0>
   1a33c:	mov	r1, #0
   1a340:	movw	r0, #32767	; 0x7fff
   1a344:	cmp	r3, r1
   1a348:	cmpeq	r2, r0
   1a34c:	sxthls	r1, r2
   1a350:	uxthls	r2, r2
   1a354:	strls	r1, [sp, #12]
   1a358:	bls	1a300 <_start@@Base+0x5620>
   1a35c:	mov	r3, #7
   1a360:	mov	r2, r6
   1a364:	mov	r1, r4
   1a368:	mov	r0, r8
   1a36c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1a370:	cmp	r6, r0
   1a374:	beq	1a3c4 <_start@@Base+0x56e4>
   1a378:	ldrh	r2, [sp, #12]
   1a37c:	b	1a300 <_start@@Base+0x5620>
   1a380:	mov	r3, #5
   1a384:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1a388:	mov	r4, r0
   1a38c:	b	1a218 <_start@@Base+0x5538>
   1a390:	ldrb	r3, [r4, #1]
   1a394:	cmp	r3, #32
   1a398:	addhi	r4, r4, #1
   1a39c:	bls	1a234 <_start@@Base+0x5554>
   1a3a0:	b	1a248 <_start@@Base+0x5568>
   1a3a4:	mov	r4, r2
   1a3a8:	b	1a234 <_start@@Base+0x5554>
   1a3ac:	mov	r3, #8
   1a3b0:	mov	r2, r6
   1a3b4:	mov	r1, r4
   1a3b8:	mov	r0, r8
   1a3bc:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1a3c0:	b	1a370 <_start@@Base+0x5690>
   1a3c4:	mov	r4, r6
   1a3c8:	b	1a2b0 <_start@@Base+0x55d0>
   1a3cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a3d0:	mov	ip, #0
   1a3d4:	cmp	r1, r2
   1a3d8:	strd	r6, [sp, #8]
   1a3dc:	mov	r6, r2
   1a3e0:	strd	r8, [sp, #16]
   1a3e4:	mov	r8, r0
   1a3e8:	strd	sl, [sp, #24]
   1a3ec:	mov	fp, r3
   1a3f0:	str	lr, [sp, #32]
   1a3f4:	sub	sp, sp, #36	; 0x24
   1a3f8:	ldr	r3, [sp, #72]	; 0x48
   1a3fc:	strb	ip, [r3]
   1a400:	beq	1a59c <_start@@Base+0x58bc>
   1a404:	ldrb	r3, [r1]
   1a408:	mov	r4, r1
   1a40c:	cmp	r3, #34	; 0x22
   1a410:	addeq	r4, r1, #1
   1a414:	bne	1a578 <_start@@Base+0x5898>
   1a418:	sub	r3, r6, r4
   1a41c:	cmp	r3, #1
   1a420:	ble	1a434 <_start@@Base+0x5754>
   1a424:	ldrb	r3, [r4]
   1a428:	cmp	r3, #32
   1a42c:	bhi	1a448 <_start@@Base+0x5768>
   1a430:	beq	1a588 <_start@@Base+0x58a8>
   1a434:	mov	r1, r4
   1a438:	mov	r2, r6
   1a43c:	mov	r0, r8
   1a440:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1a444:	mov	r4, r0
   1a448:	cmp	r6, r4
   1a44c:	beq	1a4b0 <_start@@Base+0x57d0>
   1a450:	mov	r3, #0
   1a454:	add	sl, sp, #20
   1a458:	add	r9, sp, #24
   1a45c:	str	r3, [sp, #12]
   1a460:	mov	r5, fp
   1a464:	mov	r7, r4
   1a468:	mov	r1, r4
   1a46c:	b	1a488 <_start@@Base+0x57a8>
   1a470:	cmp	r7, r0
   1a474:	mov	r7, r0
   1a478:	bne	1a4d0 <_start@@Base+0x57f0>
   1a47c:	ldr	r3, [r5, #4]!
   1a480:	cmp	r3, #0
   1a484:	beq	1a524 <_start@@Base+0x5844>
   1a488:	add	r3, sp, #16
   1a48c:	mov	r2, r6
   1a490:	stm	sp, {r9, sl}
   1a494:	mov	r0, r8
   1a498:	ldr	r4, [r5]
   1a49c:	blx	r4
   1a4a0:	cmp	r6, r0
   1a4a4:	mov	r1, r0
   1a4a8:	bne	1a470 <_start@@Base+0x5790>
   1a4ac:	mov	r4, r0
   1a4b0:	mov	r0, r4
   1a4b4:	add	sp, sp, #36	; 0x24
   1a4b8:	ldrd	r4, [sp]
   1a4bc:	ldrd	r6, [sp, #8]
   1a4c0:	ldrd	r8, [sp, #16]
   1a4c4:	ldrd	sl, [sp, #24]
   1a4c8:	add	sp, sp, #32
   1a4cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4d0:	ldr	r1, [sp, #16]
   1a4d4:	mov	r4, r0
   1a4d8:	ldrd	r2, [sp, #24]
   1a4dc:	cmp	r1, #0
   1a4e0:	beq	1a53c <_start@@Base+0x585c>
   1a4e4:	cmp	r3, #0
   1a4e8:	cmpeq	r2, #128	; 0x80
   1a4ec:	bhi	1a5a4 <_start@@Base+0x58c4>
   1a4f0:	rsb	r2, r2, #0
   1a4f4:	uxtb	r2, r2
   1a4f8:	sxtb	r3, r2
   1a4fc:	str	r3, [sp, #12]
   1a500:	ldr	r3, [sp, #72]	; 0x48
   1a504:	ldrb	r1, [r3]
   1a508:	ldr	r3, [sp, #20]
   1a50c:	add	r2, r2, r1
   1a510:	cmp	r3, #0
   1a514:	ldr	r3, [sp, #72]	; 0x48
   1a518:	strb	r2, [r3]
   1a51c:	bne	1a460 <_start@@Base+0x5780>
   1a520:	b	1a4b0 <_start@@Base+0x57d0>
   1a524:	mov	r2, r6
   1a528:	mov	r0, r8
   1a52c:	mov	r3, #23
   1a530:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1a534:	mov	r4, r0
   1a538:	b	1a4b0 <_start@@Base+0x57d0>
   1a53c:	cmp	r3, #0
   1a540:	cmpeq	r2, #127	; 0x7f
   1a544:	sxtbls	r1, r2
   1a548:	uxtbls	r2, r2
   1a54c:	strls	r1, [sp, #12]
   1a550:	bls	1a500 <_start@@Base+0x5820>
   1a554:	mov	r3, #7
   1a558:	mov	r2, r6
   1a55c:	mov	r1, r4
   1a560:	mov	r0, r8
   1a564:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1a568:	cmp	r6, r0
   1a56c:	beq	1a5bc <_start@@Base+0x58dc>
   1a570:	ldrb	r2, [sp, #12]
   1a574:	b	1a500 <_start@@Base+0x5820>
   1a578:	mov	r3, #5
   1a57c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1a580:	mov	r4, r0
   1a584:	b	1a418 <_start@@Base+0x5738>
   1a588:	ldrb	r3, [r4, #1]
   1a58c:	cmp	r3, #32
   1a590:	addhi	r4, r4, #1
   1a594:	bls	1a434 <_start@@Base+0x5754>
   1a598:	b	1a448 <_start@@Base+0x5768>
   1a59c:	mov	r4, r2
   1a5a0:	b	1a434 <_start@@Base+0x5754>
   1a5a4:	mov	r3, #8
   1a5a8:	mov	r2, r6
   1a5ac:	mov	r1, r4
   1a5b0:	mov	r0, r8
   1a5b4:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1a5b8:	b	1a568 <_start@@Base+0x5888>
   1a5bc:	mov	r4, r6
   1a5c0:	b	1a4b0 <_start@@Base+0x57d0>
   1a5c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a5c8:	mov	ip, #0
   1a5cc:	cmp	r1, r2
   1a5d0:	strd	r6, [sp, #8]
   1a5d4:	mov	r6, r2
   1a5d8:	strd	r8, [sp, #16]
   1a5dc:	mov	r8, r0
   1a5e0:	strd	sl, [sp, #24]
   1a5e4:	str	lr, [sp, #32]
   1a5e8:	sub	sp, sp, #36	; 0x24
   1a5ec:	ldr	fp, [sp, #72]	; 0x48
   1a5f0:	str	r3, [sp, #8]
   1a5f4:	str	ip, [fp]
   1a5f8:	beq	1a78c <_start@@Base+0x5aac>
   1a5fc:	ldrb	r3, [r1]
   1a600:	mov	r4, r1
   1a604:	cmp	r3, #34	; 0x22
   1a608:	addeq	r4, r1, #1
   1a60c:	bne	1a72c <_start@@Base+0x5a4c>
   1a610:	sub	r3, r6, r4
   1a614:	cmp	r3, #1
   1a618:	ble	1a62c <_start@@Base+0x594c>
   1a61c:	ldrb	r3, [r4]
   1a620:	cmp	r3, #32
   1a624:	bhi	1a640 <_start@@Base+0x5960>
   1a628:	beq	1a778 <_start@@Base+0x5a98>
   1a62c:	mov	r1, r4
   1a630:	mov	r2, r6
   1a634:	mov	r0, r8
   1a638:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1a63c:	mov	r4, r0
   1a640:	cmp	r6, r4
   1a644:	beq	1a6a8 <_start@@Base+0x59c8>
   1a648:	mov	r3, #0
   1a64c:	add	sl, sp, #20
   1a650:	add	r9, sp, #24
   1a654:	str	r3, [sp, #12]
   1a658:	mov	r7, r4
   1a65c:	mov	r1, r4
   1a660:	ldr	r5, [sp, #8]
   1a664:	b	1a680 <_start@@Base+0x59a0>
   1a668:	cmp	r7, r0
   1a66c:	mov	r7, r0
   1a670:	bne	1a6c8 <_start@@Base+0x59e8>
   1a674:	ldr	r3, [r5, #4]!
   1a678:	cmp	r3, #0
   1a67c:	beq	1a714 <_start@@Base+0x5a34>
   1a680:	add	r3, sp, #16
   1a684:	mov	r2, r6
   1a688:	stm	sp, {r9, sl}
   1a68c:	mov	r0, r8
   1a690:	ldr	r4, [r5]
   1a694:	blx	r4
   1a698:	cmp	r6, r0
   1a69c:	mov	r1, r0
   1a6a0:	bne	1a668 <_start@@Base+0x5988>
   1a6a4:	mov	r4, r0
   1a6a8:	mov	r0, r4
   1a6ac:	add	sp, sp, #36	; 0x24
   1a6b0:	ldrd	r4, [sp]
   1a6b4:	ldrd	r6, [sp, #8]
   1a6b8:	ldrd	r8, [sp, #16]
   1a6bc:	ldrd	sl, [sp, #24]
   1a6c0:	add	sp, sp, #32
   1a6c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6c8:	ldr	r3, [sp, #16]
   1a6cc:	mov	r4, r0
   1a6d0:	cmp	r3, #0
   1a6d4:	bne	1a73c <_start@@Base+0x5a5c>
   1a6d8:	ldrd	r2, [sp, #24]
   1a6dc:	mov	r1, #0
   1a6e0:	mvn	r0, #0
   1a6e4:	cmp	r3, r1
   1a6e8:	cmpeq	r2, r0
   1a6ec:	strls	r2, [sp, #12]
   1a6f0:	bhi	1a760 <_start@@Base+0x5a80>
   1a6f4:	ldr	r3, [fp]
   1a6f8:	ldr	r1, [sp, #12]
   1a6fc:	ldr	r2, [sp, #20]
   1a700:	add	r3, r3, r1
   1a704:	cmp	r2, #0
   1a708:	str	r3, [fp]
   1a70c:	bne	1a658 <_start@@Base+0x5978>
   1a710:	b	1a6a8 <_start@@Base+0x59c8>
   1a714:	mov	r2, r6
   1a718:	mov	r0, r8
   1a71c:	mov	r3, #23
   1a720:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1a724:	mov	r4, r0
   1a728:	b	1a6a8 <_start@@Base+0x59c8>
   1a72c:	mov	r3, #5
   1a730:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1a734:	mov	r4, r0
   1a738:	b	1a610 <_start@@Base+0x5930>
   1a73c:	mov	r3, #8
   1a740:	mov	r2, r6
   1a744:	mov	r1, r4
   1a748:	mov	r0, r8
   1a74c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1a750:	cmp	r6, r0
   1a754:	bne	1a6f4 <_start@@Base+0x5a14>
   1a758:	mov	r4, r6
   1a75c:	b	1a6a8 <_start@@Base+0x59c8>
   1a760:	mov	r3, #7
   1a764:	mov	r2, r6
   1a768:	mov	r1, r4
   1a76c:	mov	r0, r8
   1a770:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1a774:	b	1a750 <_start@@Base+0x5a70>
   1a778:	ldrb	r3, [r4, #1]
   1a77c:	cmp	r3, #32
   1a780:	addhi	r4, r4, #1
   1a784:	bls	1a62c <_start@@Base+0x594c>
   1a788:	b	1a640 <_start@@Base+0x5960>
   1a78c:	mov	r4, r2
   1a790:	b	1a62c <_start@@Base+0x594c>
   1a794:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a798:	mov	ip, #0
   1a79c:	cmp	r1, r2
   1a7a0:	strd	r6, [sp, #8]
   1a7a4:	mov	r6, r2
   1a7a8:	strd	r8, [sp, #16]
   1a7ac:	mov	r8, r0
   1a7b0:	strd	sl, [sp, #24]
   1a7b4:	mov	fp, r3
   1a7b8:	str	lr, [sp, #32]
   1a7bc:	sub	sp, sp, #36	; 0x24
   1a7c0:	ldr	r3, [sp, #72]	; 0x48
   1a7c4:	strb	ip, [r3]
   1a7c8:	beq	1a960 <_start@@Base+0x5c80>
   1a7cc:	ldrb	r3, [r1]
   1a7d0:	mov	r4, r1
   1a7d4:	cmp	r3, #34	; 0x22
   1a7d8:	addeq	r4, r1, #1
   1a7dc:	bne	1a900 <_start@@Base+0x5c20>
   1a7e0:	sub	r3, r6, r4
   1a7e4:	cmp	r3, #1
   1a7e8:	ble	1a7fc <_start@@Base+0x5b1c>
   1a7ec:	ldrb	r3, [r4]
   1a7f0:	cmp	r3, #32
   1a7f4:	bhi	1a810 <_start@@Base+0x5b30>
   1a7f8:	beq	1a94c <_start@@Base+0x5c6c>
   1a7fc:	mov	r1, r4
   1a800:	mov	r2, r6
   1a804:	mov	r0, r8
   1a808:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1a80c:	mov	r4, r0
   1a810:	cmp	r6, r4
   1a814:	beq	1a878 <_start@@Base+0x5b98>
   1a818:	mov	r3, #0
   1a81c:	add	sl, sp, #20
   1a820:	add	r9, sp, #24
   1a824:	str	r3, [sp, #12]
   1a828:	mov	r5, fp
   1a82c:	mov	r7, r4
   1a830:	mov	r1, r4
   1a834:	b	1a850 <_start@@Base+0x5b70>
   1a838:	cmp	r7, r0
   1a83c:	mov	r7, r0
   1a840:	bne	1a898 <_start@@Base+0x5bb8>
   1a844:	ldr	r3, [r5, #4]!
   1a848:	cmp	r3, #0
   1a84c:	beq	1a8e8 <_start@@Base+0x5c08>
   1a850:	add	r3, sp, #16
   1a854:	mov	r2, r6
   1a858:	stm	sp, {r9, sl}
   1a85c:	mov	r0, r8
   1a860:	ldr	r4, [r5]
   1a864:	blx	r4
   1a868:	cmp	r6, r0
   1a86c:	mov	r1, r0
   1a870:	bne	1a838 <_start@@Base+0x5b58>
   1a874:	mov	r4, r0
   1a878:	mov	r0, r4
   1a87c:	add	sp, sp, #36	; 0x24
   1a880:	ldrd	r4, [sp]
   1a884:	ldrd	r6, [sp, #8]
   1a888:	ldrd	r8, [sp, #16]
   1a88c:	ldrd	sl, [sp, #24]
   1a890:	add	sp, sp, #32
   1a894:	pop	{pc}		; (ldr pc, [sp], #4)
   1a898:	ldr	r3, [sp, #16]
   1a89c:	mov	r4, r0
   1a8a0:	cmp	r3, #0
   1a8a4:	bne	1a910 <_start@@Base+0x5c30>
   1a8a8:	ldrd	r2, [sp, #24]
   1a8ac:	cmp	r3, #0
   1a8b0:	cmpeq	r2, #255	; 0xff
   1a8b4:	uxtbls	r3, r2
   1a8b8:	strls	r3, [sp, #12]
   1a8bc:	bhi	1a934 <_start@@Base+0x5c54>
   1a8c0:	ldr	r1, [sp, #12]
   1a8c4:	ldr	r3, [sp, #72]	; 0x48
   1a8c8:	ldr	r2, [sp, #20]
   1a8cc:	ldrb	r3, [r3]
   1a8d0:	cmp	r2, #0
   1a8d4:	ldr	r2, [sp, #72]	; 0x48
   1a8d8:	add	r3, r1, r3
   1a8dc:	strb	r3, [r2]
   1a8e0:	bne	1a828 <_start@@Base+0x5b48>
   1a8e4:	b	1a878 <_start@@Base+0x5b98>
   1a8e8:	mov	r2, r6
   1a8ec:	mov	r0, r8
   1a8f0:	mov	r3, #23
   1a8f4:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1a8f8:	mov	r4, r0
   1a8fc:	b	1a878 <_start@@Base+0x5b98>
   1a900:	mov	r3, #5
   1a904:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1a908:	mov	r4, r0
   1a90c:	b	1a7e0 <_start@@Base+0x5b00>
   1a910:	mov	r3, #8
   1a914:	mov	r2, r6
   1a918:	mov	r1, r4
   1a91c:	mov	r0, r8
   1a920:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1a924:	cmp	r6, r0
   1a928:	bne	1a8c0 <_start@@Base+0x5be0>
   1a92c:	mov	r4, r6
   1a930:	b	1a878 <_start@@Base+0x5b98>
   1a934:	mov	r3, #7
   1a938:	mov	r2, r6
   1a93c:	mov	r1, r4
   1a940:	mov	r0, r8
   1a944:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1a948:	b	1a924 <_start@@Base+0x5c44>
   1a94c:	ldrb	r3, [r4, #1]
   1a950:	cmp	r3, #32
   1a954:	addhi	r4, r4, #1
   1a958:	bls	1a7fc <_start@@Base+0x5b1c>
   1a95c:	b	1a810 <_start@@Base+0x5b30>
   1a960:	mov	r4, r2
   1a964:	b	1a7fc <_start@@Base+0x5b1c>
   1a968:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a96c:	mov	ip, #0
   1a970:	cmp	r1, r2
   1a974:	strd	r6, [sp, #8]
   1a978:	mov	r6, r2
   1a97c:	strd	r8, [sp, #16]
   1a980:	mov	r8, r0
   1a984:	strd	sl, [sp, #24]
   1a988:	mov	fp, r3
   1a98c:	str	lr, [sp, #32]
   1a990:	sub	sp, sp, #36	; 0x24
   1a994:	ldr	r3, [sp, #72]	; 0x48
   1a998:	strh	ip, [r3]
   1a99c:	beq	1ab3c <_start@@Base+0x5e5c>
   1a9a0:	ldrb	r3, [r1]
   1a9a4:	mov	r4, r1
   1a9a8:	cmp	r3, #34	; 0x22
   1a9ac:	addeq	r4, r1, #1
   1a9b0:	bne	1aadc <_start@@Base+0x5dfc>
   1a9b4:	sub	r3, r6, r4
   1a9b8:	cmp	r3, #1
   1a9bc:	ble	1a9d0 <_start@@Base+0x5cf0>
   1a9c0:	ldrb	r3, [r4]
   1a9c4:	cmp	r3, #32
   1a9c8:	bhi	1a9e4 <_start@@Base+0x5d04>
   1a9cc:	beq	1ab28 <_start@@Base+0x5e48>
   1a9d0:	mov	r1, r4
   1a9d4:	mov	r2, r6
   1a9d8:	mov	r0, r8
   1a9dc:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1a9e0:	mov	r4, r0
   1a9e4:	cmp	r6, r4
   1a9e8:	beq	1aa4c <_start@@Base+0x5d6c>
   1a9ec:	mov	r3, #0
   1a9f0:	add	sl, sp, #20
   1a9f4:	add	r9, sp, #24
   1a9f8:	str	r3, [sp, #12]
   1a9fc:	mov	r5, fp
   1aa00:	mov	r7, r4
   1aa04:	mov	r1, r4
   1aa08:	b	1aa24 <_start@@Base+0x5d44>
   1aa0c:	cmp	r7, r0
   1aa10:	mov	r7, r0
   1aa14:	bne	1aa6c <_start@@Base+0x5d8c>
   1aa18:	ldr	r3, [r5, #4]!
   1aa1c:	cmp	r3, #0
   1aa20:	beq	1aac4 <_start@@Base+0x5de4>
   1aa24:	add	r3, sp, #16
   1aa28:	mov	r2, r6
   1aa2c:	stm	sp, {r9, sl}
   1aa30:	mov	r0, r8
   1aa34:	ldr	r4, [r5]
   1aa38:	blx	r4
   1aa3c:	cmp	r6, r0
   1aa40:	mov	r1, r0
   1aa44:	bne	1aa0c <_start@@Base+0x5d2c>
   1aa48:	mov	r4, r0
   1aa4c:	mov	r0, r4
   1aa50:	add	sp, sp, #36	; 0x24
   1aa54:	ldrd	r4, [sp]
   1aa58:	ldrd	r6, [sp, #8]
   1aa5c:	ldrd	r8, [sp, #16]
   1aa60:	ldrd	sl, [sp, #24]
   1aa64:	add	sp, sp, #32
   1aa68:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa6c:	ldr	r3, [sp, #16]
   1aa70:	mov	r4, r0
   1aa74:	cmp	r3, #0
   1aa78:	bne	1aaec <_start@@Base+0x5e0c>
   1aa7c:	ldrd	r2, [sp, #24]
   1aa80:	mov	r1, #0
   1aa84:	movw	r0, #65535	; 0xffff
   1aa88:	cmp	r3, r1
   1aa8c:	cmpeq	r2, r0
   1aa90:	uxthls	r3, r2
   1aa94:	strls	r3, [sp, #12]
   1aa98:	bhi	1ab10 <_start@@Base+0x5e30>
   1aa9c:	ldr	r1, [sp, #12]
   1aaa0:	ldr	r3, [sp, #72]	; 0x48
   1aaa4:	ldr	r2, [sp, #20]
   1aaa8:	ldrh	r3, [r3]
   1aaac:	cmp	r2, #0
   1aab0:	ldr	r2, [sp, #72]	; 0x48
   1aab4:	add	r3, r1, r3
   1aab8:	strh	r3, [r2]
   1aabc:	bne	1a9fc <_start@@Base+0x5d1c>
   1aac0:	b	1aa4c <_start@@Base+0x5d6c>
   1aac4:	mov	r2, r6
   1aac8:	mov	r0, r8
   1aacc:	mov	r3, #23
   1aad0:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1aad4:	mov	r4, r0
   1aad8:	b	1aa4c <_start@@Base+0x5d6c>
   1aadc:	mov	r3, #5
   1aae0:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1aae4:	mov	r4, r0
   1aae8:	b	1a9b4 <_start@@Base+0x5cd4>
   1aaec:	mov	r3, #8
   1aaf0:	mov	r2, r6
   1aaf4:	mov	r1, r4
   1aaf8:	mov	r0, r8
   1aafc:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1ab00:	cmp	r6, r0
   1ab04:	bne	1aa9c <_start@@Base+0x5dbc>
   1ab08:	mov	r4, r6
   1ab0c:	b	1aa4c <_start@@Base+0x5d6c>
   1ab10:	mov	r3, #7
   1ab14:	mov	r2, r6
   1ab18:	mov	r1, r4
   1ab1c:	mov	r0, r8
   1ab20:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1ab24:	b	1ab00 <_start@@Base+0x5e20>
   1ab28:	ldrb	r3, [r4, #1]
   1ab2c:	cmp	r3, #32
   1ab30:	addhi	r4, r4, #1
   1ab34:	bls	1a9d0 <_start@@Base+0x5cf0>
   1ab38:	b	1a9e4 <_start@@Base+0x5d04>
   1ab3c:	mov	r4, r2
   1ab40:	b	1a9d0 <_start@@Base+0x5cf0>
   1ab44:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ab48:	mov	r4, #0
   1ab4c:	mov	r5, #0
   1ab50:	strd	r6, [sp, #8]
   1ab54:	cmp	r1, r2
   1ab58:	mov	r6, r2
   1ab5c:	strd	r8, [sp, #16]
   1ab60:	mov	r8, r0
   1ab64:	strd	sl, [sp, #24]
   1ab68:	str	lr, [sp, #32]
   1ab6c:	sub	sp, sp, #44	; 0x2c
   1ab70:	ldr	fp, [sp, #80]	; 0x50
   1ab74:	str	r3, [sp, #20]
   1ab78:	strd	r4, [fp]
   1ab7c:	beq	1ad14 <_start@@Base+0x6034>
   1ab80:	ldrb	r3, [r1]
   1ab84:	cmp	r3, #34	; 0x22
   1ab88:	addeq	r4, r1, #1
   1ab8c:	bne	1acf0 <_start@@Base+0x6010>
   1ab90:	sub	r3, r6, r4
   1ab94:	cmp	r3, #1
   1ab98:	ble	1abac <_start@@Base+0x5ecc>
   1ab9c:	ldrb	r3, [r4]
   1aba0:	cmp	r3, #32
   1aba4:	bhi	1abc0 <_start@@Base+0x5ee0>
   1aba8:	beq	1ad00 <_start@@Base+0x6020>
   1abac:	mov	r1, r4
   1abb0:	mov	r2, r6
   1abb4:	mov	r0, r8
   1abb8:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1abbc:	mov	r4, r0
   1abc0:	cmp	r6, r4
   1abc4:	beq	1ac2c <_start@@Base+0x5f4c>
   1abc8:	mov	r3, #0
   1abcc:	add	sl, sp, #28
   1abd0:	add	r9, sp, #32
   1abd4:	str	r3, [sp, #12]
   1abd8:	str	r3, [sp, #16]
   1abdc:	mov	r7, r4
   1abe0:	mov	r1, r4
   1abe4:	ldr	r5, [sp, #20]
   1abe8:	b	1ac04 <_start@@Base+0x5f24>
   1abec:	cmp	r7, r0
   1abf0:	mov	r7, r0
   1abf4:	bne	1ac4c <_start@@Base+0x5f6c>
   1abf8:	ldr	r3, [r5, #4]!
   1abfc:	cmp	r3, #0
   1ac00:	beq	1aca8 <_start@@Base+0x5fc8>
   1ac04:	add	r3, sp, #24
   1ac08:	mov	r2, r6
   1ac0c:	stm	sp, {r9, sl}
   1ac10:	mov	r0, r8
   1ac14:	ldr	r4, [r5]
   1ac18:	blx	r4
   1ac1c:	cmp	r6, r0
   1ac20:	mov	r1, r0
   1ac24:	bne	1abec <_start@@Base+0x5f0c>
   1ac28:	mov	r4, r0
   1ac2c:	mov	r0, r4
   1ac30:	add	sp, sp, #44	; 0x2c
   1ac34:	ldrd	r4, [sp]
   1ac38:	ldrd	r6, [sp, #8]
   1ac3c:	ldrd	r8, [sp, #16]
   1ac40:	ldrd	sl, [sp, #24]
   1ac44:	add	sp, sp, #32
   1ac48:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac4c:	ldr	r1, [sp, #24]
   1ac50:	mov	r4, r0
   1ac54:	ldrd	r2, [sp, #32]
   1ac58:	cmp	r1, #0
   1ac5c:	beq	1acc0 <_start@@Base+0x5fe0>
   1ac60:	cmp	r3, #-2147483648	; 0x80000000
   1ac64:	cmpeq	r2, #0
   1ac68:	bhi	1ad1c <_start@@Base+0x603c>
   1ac6c:	rsbs	r2, r2, #0
   1ac70:	rsc	r3, r3, #0
   1ac74:	strd	r2, [sp, #12]
   1ac78:	ldr	r3, [fp]
   1ac7c:	ldr	r0, [sp, #12]
   1ac80:	ldr	r2, [fp, #4]
   1ac84:	ldr	r1, [sp, #28]
   1ac88:	adds	r3, r3, r0
   1ac8c:	ldr	r0, [sp, #16]
   1ac90:	str	r3, [fp]
   1ac94:	adc	r2, r2, r0
   1ac98:	cmp	r1, #0
   1ac9c:	str	r2, [fp, #4]
   1aca0:	bne	1abdc <_start@@Base+0x5efc>
   1aca4:	b	1ac2c <_start@@Base+0x5f4c>
   1aca8:	mov	r2, r6
   1acac:	mov	r0, r8
   1acb0:	mov	r3, #23
   1acb4:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1acb8:	mov	r4, r0
   1acbc:	b	1ac2c <_start@@Base+0x5f4c>
   1acc0:	cmp	r2, #0
   1acc4:	sbcs	r1, r3, #0
   1acc8:	bge	1ac74 <_start@@Base+0x5f94>
   1accc:	mov	r3, #7
   1acd0:	mov	r2, r6
   1acd4:	mov	r1, r4
   1acd8:	mov	r0, r8
   1acdc:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1ace0:	cmp	r6, r0
   1ace4:	bne	1ac78 <_start@@Base+0x5f98>
   1ace8:	mov	r4, r6
   1acec:	b	1ac2c <_start@@Base+0x5f4c>
   1acf0:	mov	r3, #5
   1acf4:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1acf8:	mov	r4, r0
   1acfc:	b	1ab90 <_start@@Base+0x5eb0>
   1ad00:	ldrb	r3, [r4, #1]
   1ad04:	cmp	r3, #32
   1ad08:	addhi	r4, r4, #1
   1ad0c:	bls	1abac <_start@@Base+0x5ecc>
   1ad10:	b	1abc0 <_start@@Base+0x5ee0>
   1ad14:	mov	r4, r2
   1ad18:	b	1abac <_start@@Base+0x5ecc>
   1ad1c:	mov	r3, #8
   1ad20:	mov	r2, r6
   1ad24:	mov	r1, r4
   1ad28:	mov	r0, r8
   1ad2c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1ad30:	b	1ace0 <_start@@Base+0x6000>
   1ad34:	cmp	r1, r2
   1ad38:	beq	1ad48 <_start@@Base+0x6068>
   1ad3c:	ldrb	ip, [r1]
   1ad40:	cmp	ip, #91	; 0x5b
   1ad44:	beq	1ad58 <_start@@Base+0x6078>
   1ad48:	mov	ip, #0
   1ad4c:	str	ip, [r3]
   1ad50:	mov	r3, #22
   1ad54:	b	2d8e0 <flatcc_json_parser_set_error@@Base>
   1ad58:	strd	r4, [sp, #-16]!
   1ad5c:	mov	r5, r0
   1ad60:	add	r0, r1, #1
   1ad64:	str	r6, [sp, #8]
   1ad68:	mov	r6, r3
   1ad6c:	sub	r3, r2, r0
   1ad70:	cmp	r3, #1
   1ad74:	mov	r4, r2
   1ad78:	str	lr, [sp, #12]
   1ad7c:	ble	1ad90 <_start@@Base+0x60b0>
   1ad80:	ldrb	r3, [r1, #1]
   1ad84:	cmp	r3, #32
   1ad88:	bhi	1ada0 <_start@@Base+0x60c0>
   1ad8c:	beq	1adcc <_start@@Base+0x60ec>
   1ad90:	mov	r1, r0
   1ad94:	mov	r2, r4
   1ad98:	mov	r0, r5
   1ad9c:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1ada0:	cmp	r4, r0
   1ada4:	beq	1adb4 <_start@@Base+0x60d4>
   1ada8:	ldrb	r3, [r0]
   1adac:	cmp	r3, #93	; 0x5d
   1adb0:	beq	1ade0 <_start@@Base+0x6100>
   1adb4:	mov	r3, #1
   1adb8:	ldrd	r4, [sp]
   1adbc:	str	r3, [r6]
   1adc0:	ldr	r6, [sp, #8]
   1adc4:	add	sp, sp, #12
   1adc8:	pop	{pc}		; (ldr pc, [sp], #4)
   1adcc:	ldrb	r3, [r1, #2]
   1add0:	cmp	r3, #32
   1add4:	addhi	r0, r1, #2
   1add8:	bls	1ad90 <_start@@Base+0x60b0>
   1addc:	b	1ada0 <_start@@Base+0x60c0>
   1ade0:	mov	r3, #0
   1ade4:	mov	r2, r4
   1ade8:	ldr	lr, [sp, #12]
   1adec:	add	r1, r0, #1
   1adf0:	mov	r0, r5
   1adf4:	ldrd	r4, [sp]
   1adf8:	str	r3, [r6]
   1adfc:	ldr	r6, [sp, #8]
   1ae00:	add	sp, sp, #16
   1ae04:	b	16bf0 <_start@@Base+0x1f10>
   1ae08:	cmp	r1, r2
   1ae0c:	beq	1ae1c <_start@@Base+0x613c>
   1ae10:	ldrb	ip, [r1]
   1ae14:	cmp	ip, #123	; 0x7b
   1ae18:	beq	1ae2c <_start@@Base+0x614c>
   1ae1c:	mov	ip, #0
   1ae20:	str	ip, [r3]
   1ae24:	mov	r3, #21
   1ae28:	b	2d8e0 <flatcc_json_parser_set_error@@Base>
   1ae2c:	strd	r4, [sp, #-16]!
   1ae30:	mov	r5, r0
   1ae34:	add	r0, r1, #1
   1ae38:	str	r6, [sp, #8]
   1ae3c:	mov	r6, r3
   1ae40:	sub	r3, r2, r0
   1ae44:	cmp	r3, #1
   1ae48:	mov	r4, r2
   1ae4c:	str	lr, [sp, #12]
   1ae50:	ble	1ae64 <_start@@Base+0x6184>
   1ae54:	ldrb	r3, [r1, #1]
   1ae58:	cmp	r3, #32
   1ae5c:	bhi	1ae74 <_start@@Base+0x6194>
   1ae60:	beq	1aea0 <_start@@Base+0x61c0>
   1ae64:	mov	r1, r0
   1ae68:	mov	r2, r4
   1ae6c:	mov	r0, r5
   1ae70:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1ae74:	cmp	r4, r0
   1ae78:	beq	1ae88 <_start@@Base+0x61a8>
   1ae7c:	ldrb	r3, [r0]
   1ae80:	cmp	r3, #125	; 0x7d
   1ae84:	beq	1aeb4 <_start@@Base+0x61d4>
   1ae88:	mov	r3, #1
   1ae8c:	ldrd	r4, [sp]
   1ae90:	str	r3, [r6]
   1ae94:	ldr	r6, [sp, #8]
   1ae98:	add	sp, sp, #12
   1ae9c:	pop	{pc}		; (ldr pc, [sp], #4)
   1aea0:	ldrb	r3, [r1, #2]
   1aea4:	cmp	r3, #32
   1aea8:	addhi	r0, r1, #2
   1aeac:	bls	1ae64 <_start@@Base+0x6184>
   1aeb0:	b	1ae74 <_start@@Base+0x6194>
   1aeb4:	mov	r3, #0
   1aeb8:	mov	r2, r4
   1aebc:	ldr	lr, [sp, #12]
   1aec0:	add	r1, r0, #1
   1aec4:	mov	r0, r5
   1aec8:	ldrd	r4, [sp]
   1aecc:	str	r3, [r6]
   1aed0:	ldr	r6, [sp, #8]
   1aed4:	add	sp, sp, #16
   1aed8:	b	16bf0 <_start@@Base+0x1f10>
   1aedc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1aee0:	strd	r6, [sp, #8]
   1aee4:	mov	r7, r0
   1aee8:	mov	r6, r2
   1aeec:	strd	r8, [sp, #16]
   1aef0:	strd	sl, [sp, #24]
   1aef4:	mov	fp, r3
   1aef8:	str	lr, [sp, #32]
   1aefc:	sub	sp, sp, #36	; 0x24
   1af00:	add	r3, sp, #16
   1af04:	bl	1ae08 <_start@@Base+0x6128>
   1af08:	ldr	r3, [sp, #16]
   1af0c:	cmp	r3, #0
   1af10:	beq	1b020 <_start@@Base+0x6340>
   1af14:	cmp	r6, r0
   1af18:	beq	1b1bc <_start@@Base+0x64dc>
   1af1c:	ldrb	r3, [r0]
   1af20:	cmp	r3, #34	; 0x22
   1af24:	addeq	r4, r0, #1
   1af28:	bne	1b16c <_start@@Base+0x648c>
   1af2c:	sub	r2, r6, r4
   1af30:	cmp	r2, #8
   1af34:	bls	1b028 <_start@@Base+0x6348>
   1af38:	mov	r1, #0
   1af3c:	mov	r3, r1
   1af40:	ldrb	r0, [r4, #3]
   1af44:	orr	r3, r3, r0
   1af48:	ldrb	r0, [r4, #2]
   1af4c:	orr	r3, r3, r0, lsl #8
   1af50:	ldrb	r0, [r4, #1]
   1af54:	orr	r3, r3, r0, lsl #16
   1af58:	ldrb	r0, [r4]
   1af5c:	mov	r8, #0
   1af60:	orr	r3, r3, r0, lsl #24
   1af64:	and	r9, r3, #-16777216	; 0xff000000
   1af68:	cmp	r9, #1644167168	; 0x62000000
   1af6c:	cmpeq	r8, #0
   1af70:	beq	1b078 <_start@@Base+0x6398>
   1af74:	cmp	r9, #1627389952	; 0x61000000
   1af78:	cmpeq	r8, #0
   1af7c:	bne	1af94 <_start@@Base+0x62b4>
   1af80:	cmp	r2, #1
   1af84:	ble	1af94 <_start@@Base+0x62b4>
   1af88:	ldrb	r3, [r4, #1]
   1af8c:	cmp	r3, #34	; 0x22
   1af90:	beq	1b230 <_start@@Base+0x6550>
   1af94:	mov	r1, r4
   1af98:	mov	r2, r6
   1af9c:	mov	r0, r7
   1afa0:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1afa4:	mov	r5, r0
   1afa8:	sub	r3, r6, r5
   1afac:	cmp	r3, #1
   1afb0:	ble	1afc4 <_start@@Base+0x62e4>
   1afb4:	ldrb	r3, [r5]
   1afb8:	cmp	r3, #32
   1afbc:	bhi	1afd8 <_start@@Base+0x62f8>
   1afc0:	beq	1b1c4 <_start@@Base+0x64e4>
   1afc4:	mov	r1, r5
   1afc8:	mov	r2, r6
   1afcc:	mov	r0, r7
   1afd0:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1afd4:	mov	r5, r0
   1afd8:	cmp	r6, r5
   1afdc:	beq	1b3b4 <_start@@Base+0x66d4>
   1afe0:	ldrb	r3, [r5]
   1afe4:	cmp	r3, #44	; 0x2c
   1afe8:	beq	1b1d8 <_start@@Base+0x64f8>
   1afec:	mov	r3, #0
   1aff0:	str	r3, [sp, #16]
   1aff4:	ldrb	r3, [r5]
   1aff8:	cmp	r3, #125	; 0x7d
   1affc:	beq	1b188 <_start@@Base+0x64a8>
   1b000:	mov	r3, #10
   1b004:	mov	r1, r5
   1b008:	mov	r2, r6
   1b00c:	mov	r0, r7
   1b010:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1b014:	ldr	r3, [sp, #16]
   1b018:	cmp	r3, #0
   1b01c:	bne	1af14 <_start@@Base+0x6234>
   1b020:	mov	r5, r0
   1b024:	b	1b3b4 <_start@@Base+0x66d4>
   1b028:	sub	r3, r2, #1
   1b02c:	cmp	r3, #7
   1b030:	ldrls	pc, [pc, r3, lsl #2]
   1b034:	b	1af94 <_start@@Base+0x62b4>
   1b038:	andeq	fp, r1, r0, ror r0
   1b03c:	andeq	fp, r1, r8, rrx
   1b040:	andeq	fp, r1, r0, rrx
   1b044:	andeq	fp, r1, r8, asr r0
   1b048:	andeq	fp, r1, r8, asr r0
   1b04c:	andeq	fp, r1, r8, asr r0
   1b050:	andeq	sl, r1, r8, lsr pc
   1b054:	andeq	sl, r1, r8, lsr pc
   1b058:	mov	r3, #0
   1b05c:	b	1af40 <_start@@Base+0x6260>
   1b060:	mov	r3, #0
   1b064:	b	1af48 <_start@@Base+0x6268>
   1b068:	mov	r3, #0
   1b06c:	b	1af50 <_start@@Base+0x6270>
   1b070:	mov	r3, #0
   1b074:	b	1af58 <_start@@Base+0x6278>
   1b078:	cmp	r2, #1
   1b07c:	ble	1af94 <_start@@Base+0x62b4>
   1b080:	ldrb	r3, [r4, #1]
   1b084:	cmp	r3, #34	; 0x22
   1b088:	bne	1af94 <_start@@Base+0x62b4>
   1b08c:	add	r1, r4, #2
   1b090:	sub	r3, r6, r1
   1b094:	cmp	r3, #1
   1b098:	ble	1b0ac <_start@@Base+0x63cc>
   1b09c:	ldrb	r3, [r4, #2]
   1b0a0:	cmp	r3, #32
   1b0a4:	bhi	1b0bc <_start@@Base+0x63dc>
   1b0a8:	beq	1b4a4 <_start@@Base+0x67c4>
   1b0ac:	mov	r2, r6
   1b0b0:	mov	r0, r7
   1b0b4:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1b0b8:	mov	r1, r0
   1b0bc:	cmp	r6, r1
   1b0c0:	beq	1b0d0 <_start@@Base+0x63f0>
   1b0c4:	ldrb	r3, [r1]
   1b0c8:	cmp	r3, #58	; 0x3a
   1b0cc:	beq	1b4cc <_start@@Base+0x67ec>
   1b0d0:	mov	r3, #4
   1b0d4:	mov	r2, r6
   1b0d8:	mov	r0, r7
   1b0dc:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1b0e0:	mov	sl, r0
   1b0e4:	cmp	r4, sl
   1b0e8:	beq	1af94 <_start@@Base+0x62b4>
   1b0ec:	mov	r3, #0
   1b0f0:	mov	r0, #0
   1b0f4:	mov	r1, #0
   1b0f8:	cmp	r6, sl
   1b0fc:	strb	r3, [sp, #14]
   1b100:	str	r3, [sp, #20]
   1b104:	strd	r0, [sp, #24]
   1b108:	beq	1b228 <_start@@Base+0x6548>
   1b10c:	add	r0, sp, #24
   1b110:	add	r3, sp, #20
   1b114:	mov	r2, r6
   1b118:	mov	r1, sl
   1b11c:	str	r0, [sp]
   1b120:	mov	r0, r7
   1b124:	bl	316c0 <flatcc_json_parser_integer@@Base>
   1b128:	cmp	sl, r0
   1b12c:	mov	r5, r0
   1b130:	bne	1b318 <_start@@Base+0x6638>
   1b134:	add	ip, sp, #14
   1b138:	ldr	r3, [pc, #980]	; 1b514 <_start@@Base+0x6834>
   1b13c:	mov	r2, r6
   1b140:	mov	r1, r5
   1b144:	mov	r0, r7
   1b148:	str	ip, [sp]
   1b14c:	bl	1a3cc <_start@@Base+0x56ec>
   1b150:	cmp	r6, r0
   1b154:	cmpne	r0, r5
   1b158:	beq	1b4fc <_start@@Base+0x681c>
   1b15c:	ldrsb	r2, [sp, #14]
   1b160:	mov	r5, r0
   1b164:	strb	r2, [fp, #2]
   1b168:	b	1afa8 <_start@@Base+0x62c8>
   1b16c:	mov	r1, r0
   1b170:	mov	r3, #5
   1b174:	mov	r2, r6
   1b178:	mov	r0, r7
   1b17c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1b180:	mov	r4, r0
   1b184:	b	1af2c <_start@@Base+0x624c>
   1b188:	add	r1, r5, #1
   1b18c:	sub	r3, r6, r1
   1b190:	cmp	r3, #1
   1b194:	ble	1b1a8 <_start@@Base+0x64c8>
   1b198:	ldrb	r3, [r5, #1]
   1b19c:	cmp	r3, #32
   1b1a0:	bhi	1b3b0 <_start@@Base+0x66d0>
   1b1a4:	beq	1b3d4 <_start@@Base+0x66f4>
   1b1a8:	mov	r2, r6
   1b1ac:	mov	r0, r7
   1b1b0:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1b1b4:	ldr	r3, [sp, #16]
   1b1b8:	b	1af0c <_start@@Base+0x622c>
   1b1bc:	mov	r4, r6
   1b1c0:	b	1af94 <_start@@Base+0x62b4>
   1b1c4:	ldrb	r3, [r5, #1]
   1b1c8:	cmp	r3, #32
   1b1cc:	addhi	r5, r5, #1
   1b1d0:	bls	1afc4 <_start@@Base+0x62e4>
   1b1d4:	b	1afd8 <_start@@Base+0x62f8>
   1b1d8:	add	r0, r5, #1
   1b1dc:	sub	r3, r6, r0
   1b1e0:	cmp	r3, #1
   1b1e4:	ble	1b1f8 <_start@@Base+0x6518>
   1b1e8:	ldrb	r3, [r5, #1]
   1b1ec:	cmp	r3, #32
   1b1f0:	bhi	1b208 <_start@@Base+0x6528>
   1b1f4:	beq	1b448 <_start@@Base+0x6768>
   1b1f8:	mov	r1, r0
   1b1fc:	mov	r2, r6
   1b200:	mov	r0, r7
   1b204:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1b208:	cmp	r6, r0
   1b20c:	beq	1b460 <_start@@Base+0x6780>
   1b210:	ldrb	r3, [r0]
   1b214:	cmp	r3, #125	; 0x7d
   1b218:	beq	1b484 <_start@@Base+0x67a4>
   1b21c:	mov	r3, #1
   1b220:	str	r3, [sp, #16]
   1b224:	b	1af14 <_start@@Base+0x6234>
   1b228:	mov	r5, r6
   1b22c:	b	1b134 <_start@@Base+0x6454>
   1b230:	add	r1, r4, #2
   1b234:	sub	r3, r6, r1
   1b238:	cmp	r3, #1
   1b23c:	ble	1b250 <_start@@Base+0x6570>
   1b240:	ldrb	r3, [r4, #2]
   1b244:	cmp	r3, #32
   1b248:	bhi	1b260 <_start@@Base+0x6580>
   1b24c:	beq	1b4b8 <_start@@Base+0x67d8>
   1b250:	mov	r2, r6
   1b254:	mov	r0, r7
   1b258:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1b25c:	mov	r1, r0
   1b260:	cmp	r6, r1
   1b264:	beq	1b274 <_start@@Base+0x6594>
   1b268:	ldrb	r3, [r1]
   1b26c:	cmp	r3, #58	; 0x3a
   1b270:	beq	1b4e4 <_start@@Base+0x6804>
   1b274:	mov	r3, #4
   1b278:	mov	r2, r6
   1b27c:	mov	r0, r7
   1b280:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1b284:	mov	sl, r0
   1b288:	cmp	r4, sl
   1b28c:	beq	1af94 <_start@@Base+0x62b4>
   1b290:	mov	r3, #0
   1b294:	mov	r0, #0
   1b298:	mov	r1, #0
   1b29c:	cmp	r6, sl
   1b2a0:	strh	r3, [sp, #14]
   1b2a4:	str	r3, [sp, #20]
   1b2a8:	strd	r0, [sp, #24]
   1b2ac:	beq	1b310 <_start@@Base+0x6630>
   1b2b0:	add	r0, sp, #24
   1b2b4:	add	r3, sp, #20
   1b2b8:	mov	r2, r6
   1b2bc:	mov	r1, sl
   1b2c0:	str	r0, [sp]
   1b2c4:	mov	r0, r7
   1b2c8:	bl	316c0 <flatcc_json_parser_integer@@Base>
   1b2cc:	cmp	sl, r0
   1b2d0:	mov	r5, r0
   1b2d4:	bne	1b364 <_start@@Base+0x6684>
   1b2d8:	add	ip, sp, #14
   1b2dc:	ldr	r3, [pc, #564]	; 1b518 <_start@@Base+0x6838>
   1b2e0:	mov	r2, r6
   1b2e4:	mov	r1, r5
   1b2e8:	mov	r0, r7
   1b2ec:	str	ip, [sp]
   1b2f0:	bl	1a1cc <_start@@Base+0x54ec>
   1b2f4:	cmp	r6, r0
   1b2f8:	cmpne	r0, r5
   1b2fc:	beq	1b4fc <_start@@Base+0x681c>
   1b300:	ldrsh	r2, [sp, #14]
   1b304:	mov	r5, r0
   1b308:	strh	r2, [fp]
   1b30c:	b	1afa8 <_start@@Base+0x62c8>
   1b310:	mov	r5, r6
   1b314:	b	1b2d8 <_start@@Base+0x65f8>
   1b318:	ldr	r1, [sp, #20]
   1b31c:	ldrd	r2, [sp, #24]
   1b320:	cmp	r1, #0
   1b324:	beq	1b3e8 <_start@@Base+0x6708>
   1b328:	cmp	r3, #0
   1b32c:	cmpeq	r2, #128	; 0x80
   1b330:	rsbls	r2, r2, #0
   1b334:	sxtbls	r2, r2
   1b338:	bls	1b164 <_start@@Base+0x6484>
   1b33c:	mov	r1, r0
   1b340:	mov	r3, #8
   1b344:	mov	r2, r6
   1b348:	mov	r0, r7
   1b34c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1b350:	mov	r5, r0
   1b354:	cmp	sl, r5
   1b358:	ldrsbne	r2, [sp, #14]
   1b35c:	bne	1b164 <_start@@Base+0x6484>
   1b360:	b	1b134 <_start@@Base+0x6454>
   1b364:	ldr	r1, [sp, #20]
   1b368:	ldrd	r2, [sp, #24]
   1b36c:	cmp	r1, #0
   1b370:	beq	1b414 <_start@@Base+0x6734>
   1b374:	cmp	r3, #0
   1b378:	cmpeq	r2, #32768	; 0x8000
   1b37c:	rsbls	r2, r2, #0
   1b380:	sxthls	r2, r2
   1b384:	bls	1b308 <_start@@Base+0x6628>
   1b388:	mov	r1, r0
   1b38c:	mov	r3, #8
   1b390:	mov	r2, r6
   1b394:	mov	r0, r7
   1b398:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1b39c:	mov	r5, r0
   1b3a0:	cmp	sl, r5
   1b3a4:	ldrshne	r2, [sp, #14]
   1b3a8:	bne	1b308 <_start@@Base+0x6628>
   1b3ac:	b	1b2d8 <_start@@Base+0x65f8>
   1b3b0:	mov	r5, r1
   1b3b4:	mov	r0, r5
   1b3b8:	add	sp, sp, #36	; 0x24
   1b3bc:	ldrd	r4, [sp]
   1b3c0:	ldrd	r6, [sp, #8]
   1b3c4:	ldrd	r8, [sp, #16]
   1b3c8:	ldrd	sl, [sp, #24]
   1b3cc:	add	sp, sp, #32
   1b3d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b3d4:	ldrb	r3, [r5, #2]
   1b3d8:	cmp	r3, #32
   1b3dc:	bls	1b1a8 <_start@@Base+0x64c8>
   1b3e0:	add	r5, r5, #2
   1b3e4:	b	1b3b4 <_start@@Base+0x66d4>
   1b3e8:	cmp	r3, #0
   1b3ec:	cmpeq	r2, #127	; 0x7f
   1b3f0:	sxtbls	r2, r2
   1b3f4:	bls	1b164 <_start@@Base+0x6484>
   1b3f8:	mov	r1, r0
   1b3fc:	mov	r3, #7
   1b400:	mov	r2, r6
   1b404:	mov	r0, r7
   1b408:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1b40c:	mov	r5, r0
   1b410:	b	1b354 <_start@@Base+0x6674>
   1b414:	mov	r1, #0
   1b418:	movw	r0, #32767	; 0x7fff
   1b41c:	cmp	r3, r1
   1b420:	cmpeq	r2, r0
   1b424:	sxthls	r2, r2
   1b428:	bls	1b308 <_start@@Base+0x6628>
   1b42c:	mov	r1, r5
   1b430:	mov	r3, #7
   1b434:	mov	r2, r6
   1b438:	mov	r0, r7
   1b43c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1b440:	mov	r5, r0
   1b444:	b	1b3a0 <_start@@Base+0x66c0>
   1b448:	ldrb	r3, [r5, #2]
   1b44c:	cmp	r3, #32
   1b450:	addhi	r0, r5, #2
   1b454:	bls	1b1f8 <_start@@Base+0x6518>
   1b458:	cmp	r6, r0
   1b45c:	bne	1b210 <_start@@Base+0x6530>
   1b460:	mov	ip, #0
   1b464:	mov	r3, #10
   1b468:	mov	r2, r6
   1b46c:	mov	r1, r6
   1b470:	mov	r0, r7
   1b474:	str	ip, [sp, #16]
   1b478:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1b47c:	ldr	r3, [sp, #16]
   1b480:	b	1af0c <_start@@Base+0x622c>
   1b484:	mov	r3, #0
   1b488:	add	r1, r0, #1
   1b48c:	mov	r2, r6
   1b490:	mov	r0, r7
   1b494:	str	r3, [sp, #16]
   1b498:	bl	16bf0 <_start@@Base+0x1f10>
   1b49c:	ldr	r3, [sp, #16]
   1b4a0:	b	1af0c <_start@@Base+0x622c>
   1b4a4:	ldrb	r3, [r4, #3]
   1b4a8:	cmp	r3, #32
   1b4ac:	addhi	r1, r4, #3
   1b4b0:	bls	1b0ac <_start@@Base+0x63cc>
   1b4b4:	b	1b0bc <_start@@Base+0x63dc>
   1b4b8:	ldrb	r3, [r4, #3]
   1b4bc:	cmp	r3, #32
   1b4c0:	addhi	r1, r4, #3
   1b4c4:	bls	1b250 <_start@@Base+0x6570>
   1b4c8:	b	1b260 <_start@@Base+0x6580>
   1b4cc:	add	r1, r1, #1
   1b4d0:	mov	r2, r6
   1b4d4:	mov	r0, r7
   1b4d8:	bl	16bf0 <_start@@Base+0x1f10>
   1b4dc:	mov	sl, r0
   1b4e0:	b	1b0e4 <_start@@Base+0x6404>
   1b4e4:	add	r1, r1, #1
   1b4e8:	mov	r2, r6
   1b4ec:	mov	r0, r7
   1b4f0:	bl	16bf0 <_start@@Base+0x1f10>
   1b4f4:	mov	sl, r0
   1b4f8:	b	1b288 <_start@@Base+0x65a8>
   1b4fc:	mov	r1, r0
   1b500:	mov	r2, r6
   1b504:	mov	r0, r7
   1b508:	mov	r3, #33	; 0x21
   1b50c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1b510:	b	1b020 <_start@@Base+0x6340>
   1b514:	andeq	r8, r5, ip, ror r0
   1b518:	andeq	r8, r5, r8, lsl #1
   1b51c:	ldrb	r3, [r1, #5]
   1b520:	cmp	r3, #34	; 0x22
   1b524:	beq	1b530 <_start@@Base+0x6850>
   1b528:	mov	r0, r1
   1b52c:	bx	lr
   1b530:	mov	r3, r1
   1b534:	add	r1, r1, #6
   1b538:	strd	r4, [sp, #-16]!
   1b53c:	mov	r4, r2
   1b540:	sub	r2, r2, r1
   1b544:	str	r6, [sp, #8]
   1b548:	cmp	r2, #1
   1b54c:	mov	r5, r0
   1b550:	str	lr, [sp, #12]
   1b554:	ble	1b578 <_start@@Base+0x6898>
   1b558:	ldrb	r2, [r3, #6]
   1b55c:	cmp	r2, #32
   1b560:	bhi	1b588 <_start@@Base+0x68a8>
   1b564:	bne	1b578 <_start@@Base+0x6898>
   1b568:	ldrb	r2, [r3, #7]
   1b56c:	cmp	r2, #32
   1b570:	addhi	r1, r3, #7
   1b574:	bhi	1b588 <_start@@Base+0x68a8>
   1b578:	mov	r2, r4
   1b57c:	mov	r0, r5
   1b580:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1b584:	mov	r1, r0
   1b588:	cmp	r4, r1
   1b58c:	mov	r2, r4
   1b590:	beq	1b5a0 <_start@@Base+0x68c0>
   1b594:	ldrb	r3, [r1]
   1b598:	cmp	r3, #58	; 0x3a
   1b59c:	beq	1b5bc <_start@@Base+0x68dc>
   1b5a0:	mov	r0, r5
   1b5a4:	mov	r3, #4
   1b5a8:	ldrd	r4, [sp]
   1b5ac:	ldr	r6, [sp, #8]
   1b5b0:	ldr	lr, [sp, #12]
   1b5b4:	add	sp, sp, #16
   1b5b8:	b	2d8e0 <flatcc_json_parser_set_error@@Base>
   1b5bc:	mov	r0, r5
   1b5c0:	add	r1, r1, #1
   1b5c4:	ldrd	r4, [sp]
   1b5c8:	ldr	r6, [sp, #8]
   1b5cc:	ldr	lr, [sp, #12]
   1b5d0:	add	sp, sp, #16
   1b5d4:	b	16bf0 <_start@@Base+0x1f10>
   1b5d8:	ldrb	r3, [r1, #6]
   1b5dc:	cmp	r3, #34	; 0x22
   1b5e0:	beq	1b5ec <_start@@Base+0x690c>
   1b5e4:	mov	r0, r1
   1b5e8:	bx	lr
   1b5ec:	mov	r3, r1
   1b5f0:	add	r1, r1, #7
   1b5f4:	strd	r4, [sp, #-16]!
   1b5f8:	mov	r4, r2
   1b5fc:	sub	r2, r2, r1
   1b600:	str	r6, [sp, #8]
   1b604:	cmp	r2, #1
   1b608:	mov	r5, r0
   1b60c:	str	lr, [sp, #12]
   1b610:	ble	1b634 <_start@@Base+0x6954>
   1b614:	ldrb	r2, [r3, #7]
   1b618:	cmp	r2, #32
   1b61c:	bhi	1b644 <_start@@Base+0x6964>
   1b620:	bne	1b634 <_start@@Base+0x6954>
   1b624:	ldrb	r2, [r3, #8]
   1b628:	cmp	r2, #32
   1b62c:	addhi	r1, r3, #8
   1b630:	bhi	1b644 <_start@@Base+0x6964>
   1b634:	mov	r2, r4
   1b638:	mov	r0, r5
   1b63c:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1b640:	mov	r1, r0
   1b644:	cmp	r4, r1
   1b648:	mov	r2, r4
   1b64c:	beq	1b65c <_start@@Base+0x697c>
   1b650:	ldrb	r3, [r1]
   1b654:	cmp	r3, #58	; 0x3a
   1b658:	beq	1b678 <_start@@Base+0x6998>
   1b65c:	mov	r0, r5
   1b660:	mov	r3, #4
   1b664:	ldrd	r4, [sp]
   1b668:	ldr	r6, [sp, #8]
   1b66c:	ldr	lr, [sp, #12]
   1b670:	add	sp, sp, #16
   1b674:	b	2d8e0 <flatcc_json_parser_set_error@@Base>
   1b678:	mov	r0, r5
   1b67c:	add	r1, r1, #1
   1b680:	ldrd	r4, [sp]
   1b684:	ldr	r6, [sp, #8]
   1b688:	ldr	lr, [sp, #12]
   1b68c:	add	sp, sp, #16
   1b690:	b	16bf0 <_start@@Base+0x1f10>
   1b694:	ldrb	r3, [r1, #8]
   1b698:	cmp	r3, #34	; 0x22
   1b69c:	beq	1b6a8 <_start@@Base+0x69c8>
   1b6a0:	mov	r0, r1
   1b6a4:	bx	lr
   1b6a8:	mov	r3, r1
   1b6ac:	add	r1, r1, #9
   1b6b0:	strd	r4, [sp, #-16]!
   1b6b4:	mov	r4, r2
   1b6b8:	sub	r2, r2, r1
   1b6bc:	str	r6, [sp, #8]
   1b6c0:	cmp	r2, #1
   1b6c4:	mov	r5, r0
   1b6c8:	str	lr, [sp, #12]
   1b6cc:	ble	1b6f0 <_start@@Base+0x6a10>
   1b6d0:	ldrb	r2, [r3, #9]
   1b6d4:	cmp	r2, #32
   1b6d8:	bhi	1b700 <_start@@Base+0x6a20>
   1b6dc:	bne	1b6f0 <_start@@Base+0x6a10>
   1b6e0:	ldrb	r2, [r3, #10]
   1b6e4:	cmp	r2, #32
   1b6e8:	addhi	r1, r3, #10
   1b6ec:	bhi	1b700 <_start@@Base+0x6a20>
   1b6f0:	mov	r2, r4
   1b6f4:	mov	r0, r5
   1b6f8:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1b6fc:	mov	r1, r0
   1b700:	cmp	r4, r1
   1b704:	mov	r2, r4
   1b708:	beq	1b718 <_start@@Base+0x6a38>
   1b70c:	ldrb	r3, [r1]
   1b710:	cmp	r3, #58	; 0x3a
   1b714:	beq	1b734 <_start@@Base+0x6a54>
   1b718:	mov	r0, r5
   1b71c:	mov	r3, #4
   1b720:	ldrd	r4, [sp]
   1b724:	ldr	r6, [sp, #8]
   1b728:	ldr	lr, [sp, #12]
   1b72c:	add	sp, sp, #16
   1b730:	b	2d8e0 <flatcc_json_parser_set_error@@Base>
   1b734:	mov	r0, r5
   1b738:	add	r1, r1, #1
   1b73c:	ldrd	r4, [sp]
   1b740:	ldr	r6, [sp, #8]
   1b744:	ldr	lr, [sp, #12]
   1b748:	add	sp, sp, #16
   1b74c:	b	16bf0 <_start@@Base+0x1f10>
   1b750:	ldrb	r3, [r1, #4]
   1b754:	cmp	r3, #34	; 0x22
   1b758:	beq	1b764 <_start@@Base+0x6a84>
   1b75c:	mov	r0, r1
   1b760:	bx	lr
   1b764:	mov	r3, r1
   1b768:	add	r1, r1, #5
   1b76c:	strd	r4, [sp, #-16]!
   1b770:	mov	r4, r2
   1b774:	sub	r2, r2, r1
   1b778:	str	r6, [sp, #8]
   1b77c:	cmp	r2, #1
   1b780:	mov	r5, r0
   1b784:	str	lr, [sp, #12]
   1b788:	ble	1b7ac <_start@@Base+0x6acc>
   1b78c:	ldrb	r2, [r3, #5]
   1b790:	cmp	r2, #32
   1b794:	bhi	1b7bc <_start@@Base+0x6adc>
   1b798:	bne	1b7ac <_start@@Base+0x6acc>
   1b79c:	ldrb	r2, [r3, #6]
   1b7a0:	cmp	r2, #32
   1b7a4:	addhi	r1, r3, #6
   1b7a8:	bhi	1b7bc <_start@@Base+0x6adc>
   1b7ac:	mov	r2, r4
   1b7b0:	mov	r0, r5
   1b7b4:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1b7b8:	mov	r1, r0
   1b7bc:	cmp	r4, r1
   1b7c0:	mov	r2, r4
   1b7c4:	beq	1b7d4 <_start@@Base+0x6af4>
   1b7c8:	ldrb	r3, [r1]
   1b7cc:	cmp	r3, #58	; 0x3a
   1b7d0:	beq	1b7f0 <_start@@Base+0x6b10>
   1b7d4:	mov	r0, r5
   1b7d8:	mov	r3, #4
   1b7dc:	ldrd	r4, [sp]
   1b7e0:	ldr	r6, [sp, #8]
   1b7e4:	ldr	lr, [sp, #12]
   1b7e8:	add	sp, sp, #16
   1b7ec:	b	2d8e0 <flatcc_json_parser_set_error@@Base>
   1b7f0:	mov	r0, r5
   1b7f4:	add	r1, r1, #1
   1b7f8:	ldrd	r4, [sp]
   1b7fc:	ldr	r6, [sp, #8]
   1b800:	ldr	lr, [sp, #12]
   1b804:	add	sp, sp, #16
   1b808:	b	16bf0 <_start@@Base+0x1f10>
   1b80c:	ldrb	r3, [r1, #1]
   1b810:	cmp	r3, #34	; 0x22
   1b814:	beq	1b820 <_start@@Base+0x6b40>
   1b818:	mov	r0, r1
   1b81c:	bx	lr
   1b820:	mov	r3, r1
   1b824:	add	r1, r1, #2
   1b828:	strd	r4, [sp, #-16]!
   1b82c:	mov	r4, r2
   1b830:	sub	r2, r2, r1
   1b834:	str	r6, [sp, #8]
   1b838:	cmp	r2, #1
   1b83c:	mov	r5, r0
   1b840:	str	lr, [sp, #12]
   1b844:	ble	1b868 <_start@@Base+0x6b88>
   1b848:	ldrb	r2, [r3, #2]
   1b84c:	cmp	r2, #32
   1b850:	bhi	1b878 <_start@@Base+0x6b98>
   1b854:	bne	1b868 <_start@@Base+0x6b88>
   1b858:	ldrb	r2, [r3, #3]
   1b85c:	cmp	r2, #32
   1b860:	addhi	r1, r3, #3
   1b864:	bhi	1b878 <_start@@Base+0x6b98>
   1b868:	mov	r2, r4
   1b86c:	mov	r0, r5
   1b870:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1b874:	mov	r1, r0
   1b878:	cmp	r4, r1
   1b87c:	mov	r2, r4
   1b880:	beq	1b890 <_start@@Base+0x6bb0>
   1b884:	ldrb	r3, [r1]
   1b888:	cmp	r3, #58	; 0x3a
   1b88c:	beq	1b8ac <_start@@Base+0x6bcc>
   1b890:	mov	r0, r5
   1b894:	mov	r3, #4
   1b898:	ldrd	r4, [sp]
   1b89c:	ldr	r6, [sp, #8]
   1b8a0:	ldr	lr, [sp, #12]
   1b8a4:	add	sp, sp, #16
   1b8a8:	b	2d8e0 <flatcc_json_parser_set_error@@Base>
   1b8ac:	mov	r0, r5
   1b8b0:	add	r1, r1, #1
   1b8b4:	ldrd	r4, [sp]
   1b8b8:	ldr	r6, [sp, #8]
   1b8bc:	ldr	lr, [sp, #12]
   1b8c0:	add	sp, sp, #16
   1b8c4:	b	16bf0 <_start@@Base+0x1f10>
   1b8c8:	ldrb	r3, [r1, #7]
   1b8cc:	cmp	r3, #34	; 0x22
   1b8d0:	beq	1b8dc <_start@@Base+0x6bfc>
   1b8d4:	mov	r0, r1
   1b8d8:	bx	lr
   1b8dc:	mov	r3, r1
   1b8e0:	add	r1, r1, #8
   1b8e4:	strd	r4, [sp, #-16]!
   1b8e8:	mov	r4, r2
   1b8ec:	sub	r2, r2, r1
   1b8f0:	str	r6, [sp, #8]
   1b8f4:	cmp	r2, #1
   1b8f8:	mov	r5, r0
   1b8fc:	str	lr, [sp, #12]
   1b900:	ble	1b924 <_start@@Base+0x6c44>
   1b904:	ldrb	r2, [r3, #8]
   1b908:	cmp	r2, #32
   1b90c:	bhi	1b934 <_start@@Base+0x6c54>
   1b910:	bne	1b924 <_start@@Base+0x6c44>
   1b914:	ldrb	r2, [r3, #9]
   1b918:	cmp	r2, #32
   1b91c:	addhi	r1, r3, #9
   1b920:	bhi	1b934 <_start@@Base+0x6c54>
   1b924:	mov	r2, r4
   1b928:	mov	r0, r5
   1b92c:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1b930:	mov	r1, r0
   1b934:	cmp	r4, r1
   1b938:	mov	r2, r4
   1b93c:	beq	1b94c <_start@@Base+0x6c6c>
   1b940:	ldrb	r3, [r1]
   1b944:	cmp	r3, #58	; 0x3a
   1b948:	beq	1b968 <_start@@Base+0x6c88>
   1b94c:	mov	r0, r5
   1b950:	mov	r3, #4
   1b954:	ldrd	r4, [sp]
   1b958:	ldr	r6, [sp, #8]
   1b95c:	ldr	lr, [sp, #12]
   1b960:	add	sp, sp, #16
   1b964:	b	2d8e0 <flatcc_json_parser_set_error@@Base>
   1b968:	mov	r0, r5
   1b96c:	add	r1, r1, #1
   1b970:	ldrd	r4, [sp]
   1b974:	ldr	r6, [sp, #8]
   1b978:	ldr	lr, [sp, #12]
   1b97c:	add	sp, sp, #16
   1b980:	b	16bf0 <_start@@Base+0x1f10>
   1b984:	ldrb	r3, [r1, #3]
   1b988:	cmp	r3, #34	; 0x22
   1b98c:	beq	1b998 <_start@@Base+0x6cb8>
   1b990:	mov	r0, r1
   1b994:	bx	lr
   1b998:	mov	r3, r1
   1b99c:	add	r1, r1, #4
   1b9a0:	strd	r4, [sp, #-16]!
   1b9a4:	mov	r4, r2
   1b9a8:	sub	r2, r2, r1
   1b9ac:	str	r6, [sp, #8]
   1b9b0:	cmp	r2, #1
   1b9b4:	mov	r5, r0
   1b9b8:	str	lr, [sp, #12]
   1b9bc:	ble	1b9e0 <_start@@Base+0x6d00>
   1b9c0:	ldrb	r2, [r3, #4]
   1b9c4:	cmp	r2, #32
   1b9c8:	bhi	1b9f0 <_start@@Base+0x6d10>
   1b9cc:	bne	1b9e0 <_start@@Base+0x6d00>
   1b9d0:	ldrb	r2, [r3, #5]
   1b9d4:	cmp	r2, #32
   1b9d8:	addhi	r1, r3, #5
   1b9dc:	bhi	1b9f0 <_start@@Base+0x6d10>
   1b9e0:	mov	r2, r4
   1b9e4:	mov	r0, r5
   1b9e8:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1b9ec:	mov	r1, r0
   1b9f0:	cmp	r4, r1
   1b9f4:	mov	r2, r4
   1b9f8:	beq	1ba08 <_start@@Base+0x6d28>
   1b9fc:	ldrb	r3, [r1]
   1ba00:	cmp	r3, #58	; 0x3a
   1ba04:	beq	1ba24 <_start@@Base+0x6d44>
   1ba08:	mov	r0, r5
   1ba0c:	mov	r3, #4
   1ba10:	ldrd	r4, [sp]
   1ba14:	ldr	r6, [sp, #8]
   1ba18:	ldr	lr, [sp, #12]
   1ba1c:	add	sp, sp, #16
   1ba20:	b	2d8e0 <flatcc_json_parser_set_error@@Base>
   1ba24:	mov	r0, r5
   1ba28:	add	r1, r1, #1
   1ba2c:	ldrd	r4, [sp]
   1ba30:	ldr	r6, [sp, #8]
   1ba34:	ldr	lr, [sp, #12]
   1ba38:	add	sp, sp, #16
   1ba3c:	b	16bf0 <_start@@Base+0x1f10>
   1ba40:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ba44:	mov	ip, #0
   1ba48:	cmp	r3, #9
   1ba4c:	strd	r6, [sp, #8]
   1ba50:	mov	r4, r1
   1ba54:	mov	r5, r2
   1ba58:	strd	r8, [sp, #16]
   1ba5c:	strd	sl, [sp, #24]
   1ba60:	mov	sl, r0
   1ba64:	str	lr, [sp, #32]
   1ba68:	sub	sp, sp, #36	; 0x24
   1ba6c:	ldr	fp, [sp, #72]	; 0x48
   1ba70:	str	ip, [fp]
   1ba74:	beq	1bb38 <_start@@Base+0x6e58>
   1ba78:	bhi	1bad8 <_start@@Base+0x6df8>
   1ba7c:	cmp	r3, #2
   1ba80:	beq	1bc8c <_start@@Base+0x6fac>
   1ba84:	cmp	r3, #8
   1ba88:	beq	1bb6c <_start@@Base+0x6e8c>
   1ba8c:	cmp	r3, ip
   1ba90:	beq	1be0c <_start@@Base+0x712c>
   1ba94:	ldr	r3, [sl, #8]
   1ba98:	mov	r2, r5
   1ba9c:	mov	r1, r4
   1baa0:	mov	r0, sl
   1baa4:	tst	r3, #1
   1baa8:	bne	1bb60 <_start@@Base+0x6e80>
   1baac:	mov	r3, #15
   1bab0:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1bab4:	mov	r4, r0
   1bab8:	mov	r0, r4
   1babc:	add	sp, sp, #36	; 0x24
   1bac0:	ldrd	r4, [sp]
   1bac4:	ldrd	r6, [sp, #8]
   1bac8:	ldrd	r8, [sp, #16]
   1bacc:	ldrd	sl, [sp, #24]
   1bad0:	add	sp, sp, #32
   1bad4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bad8:	cmp	r3, #11
   1badc:	beq	1baec <_start@@Base+0x6e0c>
   1bae0:	bcc	1bb38 <_start@@Base+0x6e58>
   1bae4:	cmp	r3, #255	; 0xff
   1bae8:	bne	1ba94 <_start@@Base+0x6db4>
   1baec:	mov	r1, r4
   1baf0:	mov	r3, fp
   1baf4:	mov	r2, r5
   1baf8:	mov	r0, sl
   1bafc:	bl	31d48 <flatcc_json_parser_build_string@@Base>
   1bb00:	mov	r4, r0
   1bb04:	ldr	r3, [sl, #20]
   1bb08:	cmp	r3, #0
   1bb0c:	bne	1bab8 <_start@@Base+0x6dd8>
   1bb10:	ldr	r3, [fp]
   1bb14:	cmp	r3, #0
   1bb18:	bne	1bab8 <_start@@Base+0x6dd8>
   1bb1c:	mov	r1, r4
   1bb20:	mov	r2, r5
   1bb24:	mov	r0, sl
   1bb28:	mov	r3, #33	; 0x21
   1bb2c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1bb30:	mov	r4, r0
   1bb34:	b	1bab8 <_start@@Base+0x6dd8>
   1bb38:	mov	r1, r4
   1bb3c:	mov	r3, fp
   1bb40:	mov	r2, r5
   1bb44:	mov	r0, sl
   1bb48:	bl	19b90 <_start@@Base+0x4eb0>
   1bb4c:	ldr	r3, [sl, #20]
   1bb50:	mov	r4, r0
   1bb54:	cmp	r3, #0
   1bb58:	beq	1bb10 <_start@@Base+0x6e30>
   1bb5c:	b	1bab8 <_start@@Base+0x6dd8>
   1bb60:	bl	2f0b8 <flatcc_json_parser_generic_json@@Base>
   1bb64:	mov	r4, r0
   1bb68:	b	1bab8 <_start@@Base+0x6dd8>
   1bb6c:	mov	r2, #2
   1bb70:	ldr	r0, [r0]
   1bb74:	mov	r1, r2
   1bb78:	bl	26048 <flatcc_builder_start_struct@@Base>
   1bb7c:	subs	r9, r0, #0
   1bb80:	beq	1bde4 <_start@@Base+0x7104>
   1bb84:	mov	r1, r4
   1bb88:	add	r3, sp, #16
   1bb8c:	mov	r2, r5
   1bb90:	mov	r0, sl
   1bb94:	bl	1ae08 <_start@@Base+0x6128>
   1bb98:	ldr	r3, [sp, #16]
   1bb9c:	mov	r4, r0
   1bba0:	cmp	r3, #0
   1bba4:	bne	1bc24 <_start@@Base+0x6f44>
   1bba8:	b	1bfcc <_start@@Base+0x72ec>
   1bbac:	add	r8, r4, #8
   1bbb0:	mov	r1, r5
   1bbb4:	mov	r0, r8
   1bbb8:	mov	r6, #0
   1bbbc:	bl	14dd0 <_start@@Base+0xf0>
   1bbc0:	add	r3, pc, #776	; 0x308
   1bbc4:	ldrd	r2, [r3]
   1bbc8:	bic	r7, r1, #255	; 0xff
   1bbcc:	cmp	r7, r3
   1bbd0:	cmpeq	r6, r2
   1bbd4:	bne	1bbf0 <_start@@Base+0x6f10>
   1bbd8:	sub	r3, r5, r8
   1bbdc:	cmp	r3, #3
   1bbe0:	ble	1bbf0 <_start@@Base+0x6f10>
   1bbe4:	ldrb	r3, [r4, #11]
   1bbe8:	cmp	r3, #34	; 0x22
   1bbec:	beq	1bf00 <_start@@Base+0x7220>
   1bbf0:	mov	r1, r8
   1bbf4:	mov	r2, r5
   1bbf8:	mov	r0, sl
   1bbfc:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1bc00:	mov	r1, r0
   1bc04:	add	r3, sp, #16
   1bc08:	mov	r2, r5
   1bc0c:	mov	r0, sl
   1bc10:	bl	193b0 <_start@@Base+0x46d0>
   1bc14:	ldr	r3, [sp, #16]
   1bc18:	mov	r4, r0
   1bc1c:	cmp	r3, #0
   1bc20:	beq	1bfcc <_start@@Base+0x72ec>
   1bc24:	cmp	r5, r4
   1bc28:	beq	1bc3c <_start@@Base+0x6f5c>
   1bc2c:	ldrb	r3, [r4]
   1bc30:	cmp	r3, #34	; 0x22
   1bc34:	addeq	r4, r4, #1
   1bc38:	bne	1bc70 <_start@@Base+0x6f90>
   1bc3c:	mov	r1, r5
   1bc40:	mov	r0, r4
   1bc44:	bl	14dd0 <_start@@Base+0xf0>
   1bc48:	add	r3, pc, #648	; 0x288
   1bc4c:	ldrd	r2, [r3]
   1bc50:	cmp	r1, r3
   1bc54:	cmpeq	r0, r2
   1bc58:	beq	1bbac <_start@@Base+0x6ecc>
   1bc5c:	mov	r1, r4
   1bc60:	mov	r2, r5
   1bc64:	mov	r0, sl
   1bc68:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1bc6c:	b	1bc00 <_start@@Base+0x6f20>
   1bc70:	mov	r1, r4
   1bc74:	mov	r3, #5
   1bc78:	mov	r2, r5
   1bc7c:	mov	r0, sl
   1bc80:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1bc84:	mov	r4, r0
   1bc88:	b	1bc3c <_start@@Base+0x6f5c>
   1bc8c:	mov	r1, #1
   1bc90:	ldr	r0, [r0]
   1bc94:	bl	27848 <flatcc_builder_start_table@@Base>
   1bc98:	cmp	r0, #0
   1bc9c:	bne	1bde4 <_start@@Base+0x7104>
   1bca0:	mov	r1, r4
   1bca4:	add	r3, sp, #12
   1bca8:	mov	r2, r5
   1bcac:	mov	r0, sl
   1bcb0:	bl	1ae08 <_start@@Base+0x6128>
   1bcb4:	ldr	r3, [sp, #12]
   1bcb8:	mov	r4, r0
   1bcbc:	cmp	r3, #0
   1bcc0:	beq	1be78 <_start@@Base+0x7198>
   1bcc4:	cmp	r5, r4
   1bcc8:	beq	1bcdc <_start@@Base+0x6ffc>
   1bccc:	ldrb	r3, [r4]
   1bcd0:	cmp	r3, #34	; 0x22
   1bcd4:	addeq	r4, r4, #1
   1bcd8:	bne	1be9c <_start@@Base+0x71bc>
   1bcdc:	mov	r1, r5
   1bce0:	mov	r0, r4
   1bce4:	bl	14dd0 <_start@@Base+0xf0>
   1bce8:	add	r3, pc, #496	; 0x1f0
   1bcec:	ldrd	r2, [r3]
   1bcf0:	cmp	r1, r3
   1bcf4:	cmpeq	r0, r2
   1bcf8:	bne	1be40 <_start@@Base+0x7160>
   1bcfc:	add	r6, r4, #8
   1bd00:	mov	r1, r5
   1bd04:	mov	r0, r6
   1bd08:	bl	14dd0 <_start@@Base+0xf0>
   1bd0c:	add	r3, pc, #468	; 0x1d4
   1bd10:	ldrd	r2, [r3]
   1bd14:	cmp	r1, r3
   1bd18:	cmpeq	r0, r2
   1bd1c:	bne	1beb8 <_start@@Base+0x71d8>
   1bd20:	add	r4, r4, #16
   1bd24:	mov	r1, r5
   1bd28:	mov	r0, r4
   1bd2c:	mov	r6, #0
   1bd30:	bl	14dd0 <_start@@Base+0xf0>
   1bd34:	add	r3, pc, #436	; 0x1b4
   1bd38:	ldrd	r2, [r3]
   1bd3c:	bic	r9, r1, #255	; 0xff
   1bd40:	cmp	r9, r3
   1bd44:	cmpeq	r6, r2
   1bd48:	bne	1be40 <_start@@Base+0x7160>
   1bd4c:	sub	r3, r5, r4
   1bd50:	cmp	r3, #3
   1bd54:	ble	1be40 <_start@@Base+0x7160>
   1bd58:	mov	r2, r5
   1bd5c:	mov	r1, r4
   1bd60:	mov	r0, sl
   1bd64:	bl	1b984 <_start@@Base+0x6ca4>
   1bd68:	cmp	r4, r0
   1bd6c:	mov	r7, r0
   1bd70:	beq	1be40 <_start@@Base+0x7160>
   1bd74:	mov	r2, #0
   1bd78:	mov	r3, #0
   1bd7c:	str	r6, [sp, #16]
   1bd80:	cmp	r5, r0
   1bd84:	str	r6, [sp, #20]
   1bd88:	strd	r2, [sp, #24]
   1bd8c:	beq	1c094 <_start@@Base+0x73b4>
   1bd90:	add	r0, sp, #24
   1bd94:	add	r3, sp, #20
   1bd98:	mov	r2, r5
   1bd9c:	mov	r1, r7
   1bda0:	str	r0, [sp]
   1bda4:	mov	r0, sl
   1bda8:	bl	316c0 <flatcc_json_parser_integer@@Base>
   1bdac:	cmp	r7, r0
   1bdb0:	mov	r4, r0
   1bdb4:	bne	1c09c <_start@@Base+0x73bc>
   1bdb8:	add	ip, sp, #16
   1bdbc:	ldr	r3, [pc, #308]	; 1bef8 <_start@@Base+0x7218>
   1bdc0:	mov	r2, r5
   1bdc4:	mov	r1, r4
   1bdc8:	mov	r0, sl
   1bdcc:	str	ip, [sp]
   1bdd0:	bl	199ac <_start@@Base+0x4ccc>
   1bdd4:	cmp	r5, r0
   1bdd8:	cmpne	r0, r4
   1bddc:	bne	1c050 <_start@@Base+0x7370>
   1bde0:	mov	r4, r0
   1bde4:	mov	r1, r4
   1bde8:	mov	r3, #33	; 0x21
   1bdec:	mov	r2, r5
   1bdf0:	mov	r0, sl
   1bdf4:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1bdf8:	ldr	r3, [sl, #20]
   1bdfc:	mov	r4, r0
   1be00:	cmp	r3, #0
   1be04:	beq	1bb10 <_start@@Base+0x6e30>
   1be08:	b	1bab8 <_start@@Base+0x6dd8>
   1be0c:	sub	r3, r2, r1
   1be10:	cmp	r3, #3
   1be14:	ble	1be24 <_start@@Base+0x7144>
   1be18:	ldrb	r3, [r1]
   1be1c:	cmp	r3, #110	; 0x6e
   1be20:	beq	1c0e8 <_start@@Base+0x7408>
   1be24:	mov	r1, r4
   1be28:	mov	r2, r5
   1be2c:	mov	r0, sl
   1be30:	mov	r3, #26
   1be34:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1be38:	mov	r4, r0
   1be3c:	b	1bab8 <_start@@Base+0x6dd8>
   1be40:	mov	r1, r4
   1be44:	mov	r2, r5
   1be48:	mov	r0, sl
   1be4c:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1be50:	mov	r4, r0
   1be54:	mov	r1, r4
   1be58:	add	r3, sp, #12
   1be5c:	mov	r2, r5
   1be60:	mov	r0, sl
   1be64:	bl	193b0 <_start@@Base+0x46d0>
   1be68:	ldr	r3, [sp, #12]
   1be6c:	mov	r4, r0
   1be70:	cmp	r3, #0
   1be74:	bne	1bcc4 <_start@@Base+0x6fe4>
   1be78:	ldr	r3, [sl, #20]
   1be7c:	cmp	r3, #0
   1be80:	bne	1bde4 <_start@@Base+0x7104>
   1be84:	ldr	r0, [sl]
   1be88:	bl	281c8 <flatcc_builder_end_table@@Base>
   1be8c:	cmp	r0, #0
   1be90:	str	r0, [fp]
   1be94:	bne	1bb04 <_start@@Base+0x6e24>
   1be98:	b	1bde4 <_start@@Base+0x7104>
   1be9c:	mov	r1, r4
   1bea0:	mov	r3, #5
   1bea4:	mov	r2, r5
   1bea8:	mov	r0, sl
   1beac:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1beb0:	mov	r4, r0
   1beb4:	b	1bcdc <_start@@Base+0x6ffc>
   1beb8:	mov	r1, r6
   1bebc:	mov	r2, r5
   1bec0:	mov	r0, sl
   1bec4:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1bec8:	mov	r4, r0
   1becc:	b	1be54 <_start@@Base+0x7174>
   1bed0:	andeq	r0, r0, r0
   1bed4:	ldrbvs	r6, [r4, -r0, lsl #16]!
   1bed8:	svcpl	0x006c656e
   1bedc:	stmdavs	r1!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   1bee0:	ldrbvs	r6, [pc], #-372	; 1bee8 <_start@@Base+0x7208>
   1bee4:	cmnvc	r7, #456	; 0x1c8
   1bee8:	svcpl	0x0064616d
   1beec:	strbtvc	r6, [r1], #-875	; 0xfffffc95
   1bef0:	andeq	r0, r0, r0
   1bef4:	cmnvs	r7, r0, lsl #10
   1bef8:	muleq	r5, r4, r0
   1befc:	andeq	r8, r5, r0, lsr #1
   1bf00:	add	r1, r4, #12
   1bf04:	mov	r2, r5
   1bf08:	mov	r0, sl
   1bf0c:	bl	16bf0 <_start@@Base+0x1f10>
   1bf10:	cmp	r5, r0
   1bf14:	beq	1bf24 <_start@@Base+0x7244>
   1bf18:	ldrb	r3, [r0]
   1bf1c:	cmp	r3, #58	; 0x3a
   1bf20:	beq	1c164 <_start@@Base+0x7484>
   1bf24:	mov	r1, r0
   1bf28:	mov	r3, #4
   1bf2c:	mov	r2, r5
   1bf30:	mov	r0, sl
   1bf34:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1bf38:	mov	r4, r0
   1bf3c:	cmp	r8, r4
   1bf40:	beq	1bbf0 <_start@@Base+0x6f10>
   1bf44:	mov	r3, #0
   1bf48:	mov	r0, #0
   1bf4c:	mov	r1, #0
   1bf50:	cmp	r5, r4
   1bf54:	strh	r3, [sp, #12]
   1bf58:	str	r3, [sp, #20]
   1bf5c:	strd	r0, [sp, #24]
   1bf60:	beq	1bff8 <_start@@Base+0x7318>
   1bf64:	add	r0, sp, #24
   1bf68:	add	r3, sp, #20
   1bf6c:	mov	r2, r5
   1bf70:	mov	r1, r4
   1bf74:	str	r0, [sp]
   1bf78:	mov	r0, sl
   1bf7c:	bl	316c0 <flatcc_json_parser_integer@@Base>
   1bf80:	cmp	r4, r0
   1bf84:	mov	r8, r0
   1bf88:	bne	1c000 <_start@@Base+0x7320>
   1bf8c:	add	ip, sp, #12
   1bf90:	ldr	r3, [pc, #-156]	; 1befc <_start@@Base+0x721c>
   1bf94:	mov	r2, r5
   1bf98:	mov	r1, r8
   1bf9c:	mov	r0, sl
   1bfa0:	str	ip, [sp]
   1bfa4:	bl	1a968 <_start@@Base+0x5c88>
   1bfa8:	cmp	r5, r0
   1bfac:	cmpne	r0, r8
   1bfb0:	bne	1bfec <_start@@Base+0x730c>
   1bfb4:	mov	r1, r0
   1bfb8:	mov	r3, #33	; 0x21
   1bfbc:	mov	r2, r5
   1bfc0:	mov	r0, sl
   1bfc4:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1bfc8:	mov	r4, r0
   1bfcc:	cmp	r5, r4
   1bfd0:	beq	1bde4 <_start@@Base+0x7104>
   1bfd4:	ldr	r0, [sl]
   1bfd8:	bl	2621c <flatcc_builder_end_struct@@Base>
   1bfdc:	cmp	r0, #0
   1bfe0:	str	r0, [fp]
   1bfe4:	bne	1bab8 <_start@@Base+0x6dd8>
   1bfe8:	b	1bde4 <_start@@Base+0x7104>
   1bfec:	ldrh	r2, [sp, #12]
   1bff0:	strh	r2, [r9]
   1bff4:	b	1bc00 <_start@@Base+0x6f20>
   1bff8:	mov	r8, r5
   1bffc:	b	1bf8c <_start@@Base+0x72ac>
   1c000:	ldr	r3, [sp, #20]
   1c004:	cmp	r3, #0
   1c008:	bne	1c14c <_start@@Base+0x746c>
   1c00c:	ldrd	r2, [sp, #24]
   1c010:	mov	r1, #0
   1c014:	movw	r0, #65535	; 0xffff
   1c018:	cmp	r3, r1
   1c01c:	cmpeq	r2, r0
   1c020:	uxthls	r2, r2
   1c024:	movls	r0, r8
   1c028:	bls	1bff0 <_start@@Base+0x7310>
   1c02c:	mov	r1, r8
   1c030:	mov	r3, #7
   1c034:	mov	r2, r5
   1c038:	mov	r0, sl
   1c03c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1c040:	cmp	r4, r0
   1c044:	bne	1bfec <_start@@Base+0x730c>
   1c048:	mov	r8, r4
   1c04c:	b	1bf8c <_start@@Base+0x72ac>
   1c050:	ldr	r2, [sp, #16]
   1c054:	mov	r4, r0
   1c058:	cmp	r2, #0
   1c05c:	bne	1c06c <_start@@Base+0x738c>
   1c060:	ldr	r3, [sl, #8]
   1c064:	tst	r3, #2
   1c068:	beq	1be54 <_start@@Base+0x7174>
   1c06c:	mov	r3, #4
   1c070:	mov	r1, #0
   1c074:	ldr	r0, [sl]
   1c078:	mov	r2, r3
   1c07c:	bl	29bc0 <flatcc_builder_table_add@@Base>
   1c080:	cmp	r0, #0
   1c084:	beq	1bde4 <_start@@Base+0x7104>
   1c088:	ldr	r3, [sp, #16]
   1c08c:	str	r3, [r0]
   1c090:	b	1be54 <_start@@Base+0x7174>
   1c094:	mov	r4, r5
   1c098:	b	1bdb8 <_start@@Base+0x70d8>
   1c09c:	ldr	r1, [sp, #20]
   1c0a0:	ldrd	r2, [sp, #24]
   1c0a4:	cmp	r1, r6
   1c0a8:	beq	1c118 <_start@@Base+0x7438>
   1c0ac:	cmp	r3, #0
   1c0b0:	cmpeq	r2, #-2147483648	; 0x80000000
   1c0b4:	rsbls	r2, r2, #0
   1c0b8:	strls	r2, [sp, #16]
   1c0bc:	bls	1c058 <_start@@Base+0x7378>
   1c0c0:	mov	r1, r0
   1c0c4:	mov	r3, #8
   1c0c8:	mov	r2, r5
   1c0cc:	mov	r0, sl
   1c0d0:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1c0d4:	mov	r4, r0
   1c0d8:	cmp	r7, r4
   1c0dc:	beq	1bdb8 <_start@@Base+0x70d8>
   1c0e0:	ldr	r2, [sp, #16]
   1c0e4:	b	1c058 <_start@@Base+0x7378>
   1c0e8:	ldrb	r3, [r1, #1]
   1c0ec:	add	r2, r1, #1
   1c0f0:	cmp	r3, #117	; 0x75
   1c0f4:	bne	1be24 <_start@@Base+0x7144>
   1c0f8:	ldrb	r3, [r2, #1]!
   1c0fc:	cmp	r3, #108	; 0x6c
   1c100:	bne	1be24 <_start@@Base+0x7144>
   1c104:	ldrb	r3, [r2, #1]
   1c108:	cmp	r3, #108	; 0x6c
   1c10c:	addeq	r4, r1, #4
   1c110:	bne	1be24 <_start@@Base+0x7144>
   1c114:	b	1bab8 <_start@@Base+0x6dd8>
   1c118:	mov	r1, #0
   1c11c:	mvn	r0, #-2147483648	; 0x80000000
   1c120:	cmp	r3, r1
   1c124:	cmpeq	r2, r0
   1c128:	strls	r2, [sp, #16]
   1c12c:	bls	1c058 <_start@@Base+0x7378>
   1c130:	mov	r1, r4
   1c134:	mov	r3, #7
   1c138:	mov	r2, r5
   1c13c:	mov	r0, sl
   1c140:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1c144:	mov	r4, r0
   1c148:	b	1c0d8 <_start@@Base+0x73f8>
   1c14c:	mov	r1, r0
   1c150:	mov	r3, #8
   1c154:	mov	r2, r5
   1c158:	mov	r0, sl
   1c15c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1c160:	b	1c040 <_start@@Base+0x7360>
   1c164:	add	r1, r0, #1
   1c168:	mov	r2, r5
   1c16c:	mov	r0, sl
   1c170:	bl	16bf0 <_start@@Base+0x1f10>
   1c174:	mov	r4, r0
   1c178:	b	1bf3c <_start@@Base+0x725c>
   1c17c:	ldrb	r3, [r1, #2]
   1c180:	cmp	r3, #34	; 0x22
   1c184:	beq	1c190 <_start@@Base+0x74b0>
   1c188:	mov	r0, r1
   1c18c:	bx	lr
   1c190:	mov	r3, r1
   1c194:	add	r1, r1, #3
   1c198:	strd	r4, [sp, #-16]!
   1c19c:	mov	r4, r2
   1c1a0:	sub	r2, r2, r1
   1c1a4:	str	r6, [sp, #8]
   1c1a8:	cmp	r2, #1
   1c1ac:	mov	r5, r0
   1c1b0:	str	lr, [sp, #12]
   1c1b4:	ble	1c1d8 <_start@@Base+0x74f8>
   1c1b8:	ldrb	r2, [r3, #3]
   1c1bc:	cmp	r2, #32
   1c1c0:	bhi	1c1e8 <_start@@Base+0x7508>
   1c1c4:	bne	1c1d8 <_start@@Base+0x74f8>
   1c1c8:	ldrb	r2, [r3, #4]
   1c1cc:	cmp	r2, #32
   1c1d0:	addhi	r1, r3, #4
   1c1d4:	bhi	1c1e8 <_start@@Base+0x7508>
   1c1d8:	mov	r2, r4
   1c1dc:	mov	r0, r5
   1c1e0:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1c1e4:	mov	r1, r0
   1c1e8:	cmp	r4, r1
   1c1ec:	mov	r2, r4
   1c1f0:	beq	1c200 <_start@@Base+0x7520>
   1c1f4:	ldrb	r3, [r1]
   1c1f8:	cmp	r3, #58	; 0x3a
   1c1fc:	beq	1c21c <_start@@Base+0x753c>
   1c200:	mov	r0, r5
   1c204:	mov	r3, #4
   1c208:	ldrd	r4, [sp]
   1c20c:	ldr	r6, [sp, #8]
   1c210:	ldr	lr, [sp, #12]
   1c214:	add	sp, sp, #16
   1c218:	b	2d8e0 <flatcc_json_parser_set_error@@Base>
   1c21c:	mov	r0, r5
   1c220:	add	r1, r1, #1
   1c224:	ldrd	r4, [sp]
   1c228:	ldr	r6, [sp, #8]
   1c22c:	ldr	lr, [sp, #12]
   1c230:	add	sp, sp, #16
   1c234:	b	16bf0 <_start@@Base+0x1f10>
   1c238:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c23c:	mov	r4, r1
   1c240:	mov	r1, #10
   1c244:	strd	r6, [sp, #8]
   1c248:	mov	r5, r2
   1c24c:	strd	sl, [sp, #24]
   1c250:	mov	fp, r3
   1c254:	mov	r3, #0
   1c258:	mov	sl, r0
   1c25c:	strd	r8, [sp, #16]
   1c260:	str	lr, [sp, #32]
   1c264:	sub	sp, sp, #116	; 0x74
   1c268:	ldr	r0, [r0]
   1c26c:	str	r3, [fp]
   1c270:	bl	27848 <flatcc_builder_start_table@@Base>
   1c274:	cmp	r0, #0
   1c278:	beq	1c2b4 <_start@@Base+0x75d4>
   1c27c:	mov	r1, r4
   1c280:	mov	r2, r5
   1c284:	mov	r0, sl
   1c288:	mov	r3, #33	; 0x21
   1c28c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1c290:	mov	r4, r0
   1c294:	mov	r0, r4
   1c298:	add	sp, sp, #116	; 0x74
   1c29c:	ldrd	r4, [sp]
   1c2a0:	ldrd	r6, [sp, #8]
   1c2a4:	ldrd	r8, [sp, #16]
   1c2a8:	ldrd	sl, [sp, #24]
   1c2ac:	add	sp, sp, #32
   1c2b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c2b4:	add	r0, sp, #108	; 0x6c
   1c2b8:	mov	r3, #5
   1c2bc:	mov	r2, r5
   1c2c0:	mov	r1, r4
   1c2c4:	str	r0, [sp]
   1c2c8:	mov	r0, sl
   1c2cc:	bl	32090 <flatcc_json_parser_prepare_unions@@Base>
   1c2d0:	cmp	r5, r0
   1c2d4:	beq	1c27c <_start@@Base+0x759c>
   1c2d8:	mov	r1, r4
   1c2dc:	add	r3, sp, #104	; 0x68
   1c2e0:	mov	r2, r5
   1c2e4:	mov	r0, sl
   1c2e8:	bl	1ae08 <_start@@Base+0x6128>
   1c2ec:	ldr	r3, [sp, #104]	; 0x68
   1c2f0:	mov	r4, r0
   1c2f4:	cmp	r3, #0
   1c2f8:	beq	1c644 <_start@@Base+0x7964>
   1c2fc:	add	r7, pc, #892	; 0x37c
   1c300:	ldrd	r6, [r7]
   1c304:	strd	r8, [sp, #24]
   1c308:	b	1c3d0 <_start@@Base+0x76f0>
   1c30c:	add	r3, pc, #884	; 0x374
   1c310:	ldrd	r2, [r3]
   1c314:	cmp	r1, r3
   1c318:	cmpeq	r0, r2
   1c31c:	beq	1c4e4 <_start@@Base+0x7804>
   1c320:	add	r3, pc, #872	; 0x368
   1c324:	ldrd	r2, [r3]
   1c328:	cmp	r1, r3
   1c32c:	cmpeq	r0, r2
   1c330:	beq	1c6dc <_start@@Base+0x79fc>
   1c334:	and	ip, r0, #-16777216	; 0xff000000
   1c338:	add	r3, pc, #856	; 0x358
   1c33c:	ldrd	r2, [r3]
   1c340:	str	ip, [sp, #24]
   1c344:	str	r1, [sp, #28]
   1c348:	ldrd	r0, [sp, #24]
   1c34c:	cmp	r1, r3
   1c350:	cmpeq	r0, r2
   1c354:	bne	1c544 <_start@@Base+0x7864>
   1c358:	sub	r3, r5, r4
   1c35c:	cmp	r3, #5
   1c360:	ble	1c544 <_start@@Base+0x7864>
   1c364:	mov	r1, r4
   1c368:	mov	r2, r5
   1c36c:	mov	r0, sl
   1c370:	bl	1b51c <_start@@Base+0x683c>
   1c374:	cmp	r4, r0
   1c378:	mov	r1, r0
   1c37c:	beq	1c544 <_start@@Base+0x7864>
   1c380:	ldr	ip, [sp, #108]	; 0x6c
   1c384:	movw	r3, #47680	; 0xba40
   1c388:	movt	r3, #1
   1c38c:	mov	lr, #7
   1c390:	str	r3, [sp, #8]
   1c394:	mov	r3, #3
   1c398:	mov	r2, r5
   1c39c:	mov	r0, sl
   1c3a0:	str	lr, [sp]
   1c3a4:	str	ip, [sp, #4]
   1c3a8:	bl	321b8 <flatcc_json_parser_union@@Base>
   1c3ac:	mov	r1, r0
   1c3b0:	add	r3, sp, #104	; 0x68
   1c3b4:	mov	r2, r5
   1c3b8:	mov	r0, sl
   1c3bc:	bl	193b0 <_start@@Base+0x46d0>
   1c3c0:	ldr	r3, [sp, #104]	; 0x68
   1c3c4:	mov	r4, r0
   1c3c8:	cmp	r3, #0
   1c3cc:	beq	1c644 <_start@@Base+0x7964>
   1c3d0:	cmp	r5, r4
   1c3d4:	beq	1c3e8 <_start@@Base+0x7708>
   1c3d8:	ldrb	r3, [r4]
   1c3dc:	cmp	r3, #34	; 0x22
   1c3e0:	addeq	r4, r4, #1
   1c3e4:	bne	1c55c <_start@@Base+0x787c>
   1c3e8:	mov	r1, r5
   1c3ec:	mov	r0, r4
   1c3f0:	bl	14dd0 <_start@@Base+0xf0>
   1c3f4:	cmp	r1, r7
   1c3f8:	cmpeq	r0, r6
   1c3fc:	bls	1c30c <_start@@Base+0x762c>
   1c400:	add	r3, pc, #664	; 0x298
   1c404:	ldrd	r2, [r3]
   1c408:	cmp	r1, r3
   1c40c:	cmpeq	r0, r2
   1c410:	bhi	1c578 <_start@@Base+0x7898>
   1c414:	add	r3, pc, #652	; 0x28c
   1c418:	ldrd	r2, [r3]
   1c41c:	cmp	r1, r3
   1c420:	cmpeq	r0, r2
   1c424:	bne	1c544 <_start@@Base+0x7864>
   1c428:	add	r4, r4, #8
   1c42c:	mov	r1, r5
   1c430:	mov	r0, r4
   1c434:	bl	14dd0 <_start@@Base+0xf0>
   1c438:	bic	r0, r0, #255	; 0xff
   1c43c:	add	r3, pc, #620	; 0x26c
   1c440:	ldrd	r2, [r3]
   1c444:	strd	r0, [sp, #72]	; 0x48
   1c448:	ldrd	r8, [sp, #72]	; 0x48
   1c44c:	cmp	r9, r3
   1c450:	cmpeq	r8, r2
   1c454:	beq	1c970 <_start@@Base+0x7c90>
   1c458:	lsr	r1, r1, #16
   1c45c:	mov	r3, #0
   1c460:	mov	r2, #0
   1c464:	lsl	r1, r1, #16
   1c468:	str	r3, [sp, #56]	; 0x38
   1c46c:	mov	r3, #0
   1c470:	movt	r3, #29299	; 0x7273
   1c474:	str	r1, [sp, #60]	; 0x3c
   1c478:	ldrd	r0, [sp, #56]	; 0x38
   1c47c:	cmp	r1, r3
   1c480:	cmpeq	r0, r2
   1c484:	bne	1c544 <_start@@Base+0x7864>
   1c488:	sub	r3, r5, r4
   1c48c:	cmp	r3, #2
   1c490:	ble	1c544 <_start@@Base+0x7864>
   1c494:	mov	r1, r4
   1c498:	mov	r2, r5
   1c49c:	mov	r0, sl
   1c4a0:	bl	1c17c <_start@@Base+0x749c>
   1c4a4:	cmp	r4, r0
   1c4a8:	mov	r1, r0
   1c4ac:	beq	1c544 <_start@@Base+0x7864>
   1c4b0:	ldr	ip, [sp, #108]	; 0x6c
   1c4b4:	mov	lr, #9
   1c4b8:	movw	r3, #47680	; 0xba40
   1c4bc:	movt	r3, #1
   1c4c0:	mov	r2, r5
   1c4c4:	mov	r0, sl
   1c4c8:	str	lr, [sp]
   1c4cc:	str	ip, [sp, #4]
   1c4d0:	str	r3, [sp, #8]
   1c4d4:	mov	r3, #4
   1c4d8:	bl	325c0 <flatcc_json_parser_union_vector@@Base>
   1c4dc:	mov	r1, r0
   1c4e0:	b	1c3b0 <_start@@Base+0x76d0>
   1c4e4:	add	r4, r4, #8
   1c4e8:	mov	r1, r5
   1c4ec:	mov	r0, r4
   1c4f0:	bl	14dd0 <_start@@Base+0xf0>
   1c4f4:	bic	r0, r0, #255	; 0xff
   1c4f8:	add	r3, pc, #440	; 0x1b8
   1c4fc:	ldrd	r2, [r3]
   1c500:	strd	r0, [sp, #48]	; 0x30
   1c504:	ldrd	r8, [sp, #48]	; 0x30
   1c508:	cmp	r9, r3
   1c50c:	cmpeq	r8, r2
   1c510:	beq	1c928 <_start@@Base+0x7c48>
   1c514:	lsr	r1, r1, #16
   1c518:	mov	r3, #0
   1c51c:	mov	r2, #0
   1c520:	lsl	r1, r1, #16
   1c524:	str	r3, [sp, #32]
   1c528:	mov	r3, #0
   1c52c:	movt	r3, #29556	; 0x7374
   1c530:	str	r1, [sp, #36]	; 0x24
   1c534:	ldrd	r0, [sp, #32]
   1c538:	cmp	r1, r3
   1c53c:	cmpeq	r0, r2
   1c540:	beq	1c820 <_start@@Base+0x7b40>
   1c544:	mov	r1, r4
   1c548:	mov	r2, r5
   1c54c:	mov	r0, sl
   1c550:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1c554:	mov	r1, r0
   1c558:	b	1c3b0 <_start@@Base+0x76d0>
   1c55c:	mov	r1, r4
   1c560:	mov	r3, #5
   1c564:	mov	r2, r5
   1c568:	mov	r0, sl
   1c56c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1c570:	mov	r4, r0
   1c574:	b	1c3e8 <_start@@Base+0x7708>
   1c578:	add	r3, pc, #320	; 0x140
   1c57c:	ldrd	r2, [r3]
   1c580:	cmp	r1, r3
   1c584:	cmpeq	r0, r2
   1c588:	beq	1c784 <_start@@Base+0x7aa4>
   1c58c:	add	r3, pc, #308	; 0x134
   1c590:	ldrd	r2, [r3]
   1c594:	cmp	r1, r3
   1c598:	cmpeq	r0, r2
   1c59c:	bne	1c544 <_start@@Base+0x7864>
   1c5a0:	add	r4, r4, #8
   1c5a4:	mov	r1, r5
   1c5a8:	mov	r0, r4
   1c5ac:	bl	14dd0 <_start@@Base+0xf0>
   1c5b0:	lsr	r3, r0, #16
   1c5b4:	str	r3, [sp, #64]	; 0x40
   1c5b8:	ldr	r0, [sp, #64]	; 0x40
   1c5bc:	str	r1, [sp, #68]	; 0x44
   1c5c0:	add	r3, pc, #264	; 0x108
   1c5c4:	ldrd	r2, [r3]
   1c5c8:	lsl	r0, r0, #16
   1c5cc:	str	r0, [sp, #64]	; 0x40
   1c5d0:	ldrd	r8, [sp, #64]	; 0x40
   1c5d4:	cmp	r9, r3
   1c5d8:	cmpeq	r8, r2
   1c5dc:	beq	1c8e0 <_start@@Base+0x7c00>
   1c5e0:	mov	r3, #0
   1c5e4:	str	r3, [sp, #88]	; 0x58
   1c5e8:	and	r3, r1, #-16777216	; 0xff000000
   1c5ec:	str	r3, [sp, #92]	; 0x5c
   1c5f0:	ldrd	r2, [sp, #88]	; 0x58
   1c5f4:	cmp	r3, #1795162112	; 0x6b000000
   1c5f8:	cmpeq	r2, #0
   1c5fc:	bne	1c544 <_start@@Base+0x7864>
   1c600:	sub	r3, r5, r4
   1c604:	cmp	r3, #1
   1c608:	ble	1c544 <_start@@Base+0x7864>
   1c60c:	mov	r1, r4
   1c610:	mov	r2, r5
   1c614:	mov	r0, sl
   1c618:	bl	1b80c <_start@@Base+0x6b2c>
   1c61c:	cmp	r4, r0
   1c620:	mov	r1, r0
   1c624:	beq	1c544 <_start@@Base+0x7864>
   1c628:	movw	r3, #47680	; 0xba40
   1c62c:	movt	r3, #1
   1c630:	ldr	ip, [sp, #108]	; 0x6c
   1c634:	mov	lr, #5
   1c638:	str	r3, [sp, #8]
   1c63c:	mov	r3, #2
   1c640:	b	1c398 <_start@@Base+0x76b8>
   1c644:	ldr	r3, [sl, #20]
   1c648:	cmp	r3, #0
   1c64c:	bne	1c27c <_start@@Base+0x759c>
   1c650:	mov	r1, r4
   1c654:	mov	r2, r5
   1c658:	ldr	r3, [sp, #108]	; 0x6c
   1c65c:	mov	r0, sl
   1c660:	bl	3212c <flatcc_json_parser_finalize_unions@@Base>
   1c664:	mov	r4, r0
   1c668:	ldr	r0, [sl]
   1c66c:	bl	281c8 <flatcc_builder_end_table@@Base>
   1c670:	cmp	r0, #0
   1c674:	str	r0, [fp]
   1c678:	bne	1c294 <_start@@Base+0x75b4>
   1c67c:	b	1c27c <_start@@Base+0x759c>
   1c680:	cmnvs	r3, r4, ror #8
   1c684:	cmnvs	r8, #-2147483620	; 0x8000001c
   1c688:	strbvs	r6, [pc, -r9, ror #28]!
   1c68c:	cmnvs	lr, r1, ror #8
   1c690:	svcvs	0x005f7479
   1c694:	cmnvs	r1, #6464	; 0x1940
   1c698:	svcvs	0x00000000
   1c69c:	cmnvs	r1, #6464	; 0x1940
   1c6a0:	svcpl	0x00636860
   1c6a4:			; <UNDEFINED> instruction: 0x6d61696e
   1c6a8:	cmnvs	r3, r5, ror #8
   1c6ac:	cmnvs	r8, #-2147483620	; 0x8000001c
   1c6b0:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1c6b4:	rsbsvc	r5, r3, #116, 30	; 0x1d0
   1c6b8:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1c6bc:	cmnvc	r4, #116, 30	; 0x1d0
   1c6c0:	svcpl	0x00636861
   1c6c4:			; <UNDEFINED> instruction: 0x6d61696e
   1c6c8:	svcpl	0x006b6963
   1c6cc:	cmnvc	r9, #1694498816	; 0x65000000
   1c6d0:	rsbvc	r0, r5, r0
   1c6d4:	blvs	17f98c0 <__bss_end__@@Base+0x17a1504>
   1c6d8:	strheq	r8, [r5], -ip
   1c6dc:	mov	r3, #0
   1c6e0:	add	r4, r4, #8
   1c6e4:	mov	r1, r5
   1c6e8:	mov	r0, r4
   1c6ec:	str	r3, [sp, #40]	; 0x28
   1c6f0:	bl	14dd0 <_start@@Base+0xf0>
   1c6f4:	lsr	r3, r1, #16
   1c6f8:	mov	r2, #0
   1c6fc:	str	r3, [sp, #44]	; 0x2c
   1c700:	mov	r3, #0
   1c704:	movt	r3, #28773	; 0x7065
   1c708:	ldr	r1, [sp, #44]	; 0x2c
   1c70c:	lsl	r1, r1, #16
   1c710:	str	r1, [sp, #44]	; 0x2c
   1c714:	ldrd	r0, [sp, #40]	; 0x28
   1c718:	cmp	r1, r3
   1c71c:	cmpeq	r0, r2
   1c720:	bne	1c544 <_start@@Base+0x7864>
   1c724:	sub	r3, r5, r4
   1c728:	cmp	r3, #2
   1c72c:	ble	1c544 <_start@@Base+0x7864>
   1c730:	mov	r1, r4
   1c734:	mov	r2, r5
   1c738:	mov	r0, sl
   1c73c:	bl	1c17c <_start@@Base+0x749c>
   1c740:	cmp	r4, r0
   1c744:	mov	r1, r0
   1c748:	beq	1c544 <_start@@Base+0x7864>
   1c74c:	ldr	lr, [pc, #-124]	; 1c6d8 <_start@@Base+0x79f8>
   1c750:	mov	r3, #7
   1c754:	movw	r2, #47680	; 0xba40
   1c758:	movt	r2, #1
   1c75c:	ldr	ip, [sp, #108]	; 0x6c
   1c760:	str	r3, [sp]
   1c764:	mov	r3, #3
   1c768:	mov	r0, sl
   1c76c:	stmib	sp, {ip, lr}
   1c770:	str	r2, [sp, #12]
   1c774:	mov	r2, r5
   1c778:	bl	32340 <flatcc_json_parser_union_type@@Base>
   1c77c:	mov	r1, r0
   1c780:	b	1c3b0 <_start@@Base+0x76d0>
   1c784:	add	r3, r4, #8
   1c788:	mov	r1, r5
   1c78c:	mov	r0, r3
   1c790:	mov	r8, r3
   1c794:	bl	14dd0 <_start@@Base+0xf0>
   1c798:	add	r3, pc, #592	; 0x250
   1c79c:	ldrd	r2, [r3]
   1c7a0:	cmp	r1, r3
   1c7a4:	cmpeq	r0, r2
   1c7a8:	beq	1c864 <_start@@Base+0x7b84>
   1c7ac:	lsr	r3, r0, #16
   1c7b0:	str	r3, [sp, #80]	; 0x50
   1c7b4:	ldr	ip, [sp, #80]	; 0x50
   1c7b8:	str	r1, [sp, #84]	; 0x54
   1c7bc:	add	r3, pc, #564	; 0x234
   1c7c0:	ldrd	r2, [r3]
   1c7c4:	lsl	ip, ip, #16
   1c7c8:	str	ip, [sp, #80]	; 0x50
   1c7cc:	ldrd	r0, [sp, #80]	; 0x50
   1c7d0:	cmp	r1, r3
   1c7d4:	cmpeq	r0, r2
   1c7d8:	bne	1c9d8 <_start@@Base+0x7cf8>
   1c7dc:	sub	r2, r5, r8
   1c7e0:	cmp	r2, #6
   1c7e4:	ble	1c9d8 <_start@@Base+0x7cf8>
   1c7e8:	mov	r1, r8
   1c7ec:	mov	r2, r5
   1c7f0:	mov	r0, sl
   1c7f4:	bl	1b5d8 <_start@@Base+0x68f8>
   1c7f8:	cmp	r8, r0
   1c7fc:	mov	r1, r0
   1c800:	beq	1c9d8 <_start@@Base+0x7cf8>
   1c804:	movw	r3, #47680	; 0xba40
   1c808:	movt	r3, #1
   1c80c:	ldr	ip, [sp, #108]	; 0x6c
   1c810:	mov	lr, #1
   1c814:	str	r3, [sp, #8]
   1c818:	mov	r3, #0
   1c81c:	b	1c398 <_start@@Base+0x76b8>
   1c820:	sub	r3, r5, r4
   1c824:	cmp	r3, #2
   1c828:	ble	1c544 <_start@@Base+0x7864>
   1c82c:	mov	r1, r4
   1c830:	mov	r2, r5
   1c834:	mov	r0, sl
   1c838:	bl	1c17c <_start@@Base+0x749c>
   1c83c:	cmp	r4, r0
   1c840:	mov	r1, r0
   1c844:	beq	1c544 <_start@@Base+0x7864>
   1c848:	movw	r3, #47680	; 0xba40
   1c84c:	movt	r3, #1
   1c850:	ldr	ip, [sp, #108]	; 0x6c
   1c854:	mov	lr, #3
   1c858:	str	r3, [sp, #8]
   1c85c:	mov	r3, #1
   1c860:	b	1c398 <_start@@Base+0x76b8>
   1c864:	add	r4, r4, #16
   1c868:	mov	r1, r5
   1c86c:	mov	r0, r4
   1c870:	bl	14dd0 <_start@@Base+0xf0>
   1c874:	bic	r1, r1, #255	; 0xff
   1c878:	mov	r0, #0
   1c87c:	add	r3, pc, #380	; 0x17c
   1c880:	ldrd	r2, [r3]
   1c884:	strd	r0, [sp, #96]	; 0x60
   1c888:	ldrd	r0, [sp, #96]	; 0x60
   1c88c:	cmp	r1, r3
   1c890:	cmpeq	r0, r2
   1c894:	bne	1c544 <_start@@Base+0x7864>
   1c898:	sub	r2, r5, r4
   1c89c:	cmp	r2, #3
   1c8a0:	ble	1c544 <_start@@Base+0x7864>
   1c8a4:	mov	r1, r4
   1c8a8:	mov	r2, r5
   1c8ac:	mov	r0, sl
   1c8b0:	bl	1b984 <_start@@Base+0x6ca4>
   1c8b4:	cmp	r4, r0
   1c8b8:	mov	r1, r0
   1c8bc:	beq	1c544 <_start@@Base+0x7864>
   1c8c0:	mov	r0, #1
   1c8c4:	movw	r2, #47680	; 0xba40
   1c8c8:	movt	r2, #1
   1c8cc:	ldr	lr, [pc, #308]	; 1ca08 <_start@@Base+0x7d28>
   1c8d0:	mov	r3, #0
   1c8d4:	str	r0, [sp]
   1c8d8:	ldr	ip, [sp, #108]	; 0x6c
   1c8dc:	b	1c768 <_start@@Base+0x7a88>
   1c8e0:	sub	r3, r5, r4
   1c8e4:	cmp	r3, #6
   1c8e8:	ble	1c544 <_start@@Base+0x7864>
   1c8ec:	mov	r1, r4
   1c8f0:	mov	r2, r5
   1c8f4:	mov	r0, sl
   1c8f8:	bl	1b5d8 <_start@@Base+0x68f8>
   1c8fc:	cmp	r4, r0
   1c900:	mov	r1, r0
   1c904:	beq	1c544 <_start@@Base+0x7864>
   1c908:	mov	r3, #5
   1c90c:	movw	r2, #47680	; 0xba40
   1c910:	movt	r2, #1
   1c914:	ldr	lr, [pc, #240]	; 1ca0c <_start@@Base+0x7d2c>
   1c918:	str	r3, [sp]
   1c91c:	mov	r3, #2
   1c920:	ldr	ip, [sp, #108]	; 0x6c
   1c924:	b	1c768 <_start@@Base+0x7a88>
   1c928:	sub	r3, r5, r4
   1c92c:	cmp	r3, #7
   1c930:	ble	1c544 <_start@@Base+0x7864>
   1c934:	mov	r1, r4
   1c938:	mov	r2, r5
   1c93c:	mov	r0, sl
   1c940:	bl	1b8c8 <_start@@Base+0x6be8>
   1c944:	cmp	r4, r0
   1c948:	mov	r1, r0
   1c94c:	beq	1c544 <_start@@Base+0x7864>
   1c950:	mov	r3, #3
   1c954:	movw	r2, #47680	; 0xba40
   1c958:	movt	r2, #1
   1c95c:	ldr	lr, [pc, #172]	; 1ca10 <_start@@Base+0x7d30>
   1c960:	str	r3, [sp]
   1c964:	mov	r3, #1
   1c968:	ldr	ip, [sp, #108]	; 0x6c
   1c96c:	b	1c768 <_start@@Base+0x7a88>
   1c970:	sub	r3, r5, r4
   1c974:	cmp	r3, #7
   1c978:	ble	1c544 <_start@@Base+0x7864>
   1c97c:	mov	r1, r4
   1c980:	mov	r2, r5
   1c984:	mov	r0, sl
   1c988:	bl	1b8c8 <_start@@Base+0x6be8>
   1c98c:	cmp	r4, r0
   1c990:	mov	r1, r0
   1c994:	beq	1c544 <_start@@Base+0x7864>
   1c998:	ldr	r2, [pc, #116]	; 1ca14 <_start@@Base+0x7d34>
   1c99c:	mov	r0, #9
   1c9a0:	movw	ip, #20180	; 0x4ed4
   1c9a4:	movt	ip, #1
   1c9a8:	movw	r3, #47680	; 0xba40
   1c9ac:	movt	r3, #1
   1c9b0:	ldr	lr, [sp, #108]	; 0x6c
   1c9b4:	str	ip, [sp, #16]
   1c9b8:	stm	sp, {r0, lr}
   1c9bc:	mov	r0, sl
   1c9c0:	strd	r2, [sp, #8]
   1c9c4:	mov	r3, #4
   1c9c8:	mov	r2, r5
   1c9cc:	bl	326f4 <flatcc_json_parser_union_type_vector@@Base>
   1c9d0:	mov	r1, r0
   1c9d4:	b	1c3b0 <_start@@Base+0x76d0>
   1c9d8:	mov	r1, r8
   1c9dc:	mov	r2, r5
   1c9e0:	mov	r0, sl
   1c9e4:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1c9e8:	mov	r1, r0
   1c9ec:	b	1c3b0 <_start@@Base+0x76d0>
   1c9f0:	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
   1c9f4:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   1c9f8:	ldrbvs	r0, [r2, #-0]!
   1c9fc:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   1ca00:	andeq	r0, r0, r0
   1ca04:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1ca08:	ldrdeq	r8, [r5], -ip
   1ca0c:	andeq	r8, r5, ip, ror #1
   1ca10:	andeq	r8, r5, ip, lsr #1
   1ca14:	andeq	r8, r5, ip, asr #1
   1ca18:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ca1c:	mov	r4, r1
   1ca20:	mov	r5, r2
   1ca24:	strd	r6, [sp, #8]
   1ca28:	mov	r7, r3
   1ca2c:	mov	r3, #0
   1ca30:	mov	r6, r0
   1ca34:	mov	r1, r3
   1ca38:	str	r8, [sp, #16]
   1ca3c:	str	lr, [sp, #20]
   1ca40:	sub	sp, sp, #8
   1ca44:	ldr	r0, [r0]
   1ca48:	str	r3, [r7]
   1ca4c:	bl	27848 <flatcc_builder_start_table@@Base>
   1ca50:	cmp	r0, #0
   1ca54:	beq	1ca84 <_start@@Base+0x7da4>
   1ca58:	mov	r2, r5
   1ca5c:	mov	r1, r4
   1ca60:	mov	r0, r6
   1ca64:	mov	r3, #33	; 0x21
   1ca68:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1ca6c:	add	sp, sp, #8
   1ca70:	ldrd	r4, [sp]
   1ca74:	ldrd	r6, [sp, #8]
   1ca78:	ldr	r8, [sp, #16]
   1ca7c:	add	sp, sp, #20
   1ca80:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca84:	add	r3, sp, #4
   1ca88:	mov	r1, r4
   1ca8c:	mov	r2, r5
   1ca90:	mov	r0, r6
   1ca94:	bl	1ae08 <_start@@Base+0x6128>
   1ca98:	ldr	r3, [sp, #4]
   1ca9c:	cmp	r3, #0
   1caa0:	beq	1cb4c <_start@@Base+0x7e6c>
   1caa4:	mov	r8, #1
   1caa8:	cmp	r5, r0
   1caac:	moveq	r1, r5
   1cab0:	beq	1cac4 <_start@@Base+0x7de4>
   1cab4:	ldrb	r3, [r0]
   1cab8:	cmp	r3, #34	; 0x22
   1cabc:	addeq	r1, r0, #1
   1cac0:	bne	1cb54 <_start@@Base+0x7e74>
   1cac4:	mov	r2, r5
   1cac8:	mov	r0, r6
   1cacc:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1cad0:	sub	r3, r5, r0
   1cad4:	mov	r4, r0
   1cad8:	cmp	r3, #1
   1cadc:	ble	1caf0 <_start@@Base+0x7e10>
   1cae0:	ldrb	r3, [r0]
   1cae4:	cmp	r3, #32
   1cae8:	bhi	1cb04 <_start@@Base+0x7e24>
   1caec:	beq	1cbd4 <_start@@Base+0x7ef4>
   1caf0:	mov	r1, r4
   1caf4:	mov	r2, r5
   1caf8:	mov	r0, r6
   1cafc:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1cb00:	mov	r4, r0
   1cb04:	cmp	r5, r4
   1cb08:	beq	1cba4 <_start@@Base+0x7ec4>
   1cb0c:	ldrb	r3, [r4]
   1cb10:	cmp	r3, #44	; 0x2c
   1cb14:	beq	1cbe8 <_start@@Base+0x7f08>
   1cb18:	mov	r3, #0
   1cb1c:	str	r3, [sp, #4]
   1cb20:	ldrb	r3, [r4]
   1cb24:	cmp	r3, #125	; 0x7d
   1cb28:	beq	1cb70 <_start@@Base+0x7e90>
   1cb2c:	mov	r3, #10
   1cb30:	mov	r1, r4
   1cb34:	mov	r2, r5
   1cb38:	mov	r0, r6
   1cb3c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1cb40:	ldr	r3, [sp, #4]
   1cb44:	cmp	r3, #0
   1cb48:	bne	1caa8 <_start@@Base+0x7dc8>
   1cb4c:	mov	r4, r0
   1cb50:	b	1cbac <_start@@Base+0x7ecc>
   1cb54:	mov	r1, r0
   1cb58:	mov	r3, #5
   1cb5c:	mov	r2, r5
   1cb60:	mov	r0, r6
   1cb64:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1cb68:	mov	r1, r0
   1cb6c:	b	1cac4 <_start@@Base+0x7de4>
   1cb70:	add	r1, r4, #1
   1cb74:	sub	r3, r5, r1
   1cb78:	cmp	r3, #1
   1cb7c:	ble	1cb90 <_start@@Base+0x7eb0>
   1cb80:	ldrb	r3, [r4, #1]
   1cb84:	cmp	r3, #32
   1cb88:	bhi	1cc50 <_start@@Base+0x7f70>
   1cb8c:	beq	1cc58 <_start@@Base+0x7f78>
   1cb90:	mov	r2, r5
   1cb94:	mov	r0, r6
   1cb98:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1cb9c:	ldr	r3, [sp, #4]
   1cba0:	b	1cb44 <_start@@Base+0x7e64>
   1cba4:	mov	r3, #0
   1cba8:	str	r3, [sp, #4]
   1cbac:	ldr	r3, [r6, #20]
   1cbb0:	cmp	r3, #0
   1cbb4:	bne	1ca58 <_start@@Base+0x7d78>
   1cbb8:	ldr	r0, [r6]
   1cbbc:	bl	281c8 <flatcc_builder_end_table@@Base>
   1cbc0:	cmp	r0, #0
   1cbc4:	str	r0, [r7]
   1cbc8:	movne	r0, r4
   1cbcc:	bne	1ca6c <_start@@Base+0x7d8c>
   1cbd0:	b	1ca58 <_start@@Base+0x7d78>
   1cbd4:	ldrb	r3, [r0, #1]
   1cbd8:	cmp	r3, #32
   1cbdc:	addhi	r4, r0, #1
   1cbe0:	bls	1caf0 <_start@@Base+0x7e10>
   1cbe4:	b	1cb04 <_start@@Base+0x7e24>
   1cbe8:	add	r0, r4, #1
   1cbec:	sub	r3, r5, r0
   1cbf0:	cmp	r3, #1
   1cbf4:	ble	1cc08 <_start@@Base+0x7f28>
   1cbf8:	ldrb	r3, [r4, #1]
   1cbfc:	cmp	r3, #32
   1cc00:	bhi	1cc18 <_start@@Base+0x7f38>
   1cc04:	beq	1cc6c <_start@@Base+0x7f8c>
   1cc08:	mov	r1, r0
   1cc0c:	mov	r2, r5
   1cc10:	mov	r0, r6
   1cc14:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1cc18:	cmp	r5, r0
   1cc1c:	beq	1cc80 <_start@@Base+0x7fa0>
   1cc20:	ldrb	r3, [r0]
   1cc24:	cmp	r3, #125	; 0x7d
   1cc28:	strne	r8, [sp, #4]
   1cc2c:	bne	1caa8 <_start@@Base+0x7dc8>
   1cc30:	mov	r3, #0
   1cc34:	add	r1, r0, #1
   1cc38:	mov	r2, r5
   1cc3c:	mov	r0, r6
   1cc40:	str	r3, [sp, #4]
   1cc44:	bl	16bf0 <_start@@Base+0x1f10>
   1cc48:	ldr	r3, [sp, #4]
   1cc4c:	b	1cb44 <_start@@Base+0x7e64>
   1cc50:	mov	r4, r1
   1cc54:	b	1cbac <_start@@Base+0x7ecc>
   1cc58:	ldrb	r3, [r4, #2]
   1cc5c:	cmp	r3, #32
   1cc60:	bls	1cb90 <_start@@Base+0x7eb0>
   1cc64:	add	r4, r4, #2
   1cc68:	b	1cbac <_start@@Base+0x7ecc>
   1cc6c:	ldrb	r3, [r4, #2]
   1cc70:	cmp	r3, #32
   1cc74:	addhi	r0, r4, #2
   1cc78:	bls	1cc08 <_start@@Base+0x7f28>
   1cc7c:	b	1cc18 <_start@@Base+0x7f38>
   1cc80:	mov	ip, #0
   1cc84:	mov	r3, #10
   1cc88:	mov	r2, r5
   1cc8c:	mov	r1, r5
   1cc90:	mov	r0, r6
   1cc94:	str	ip, [sp, #4]
   1cc98:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1cc9c:	ldr	r3, [sp, #4]
   1cca0:	b	1cb44 <_start@@Base+0x7e64>
   1cca4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1cca8:	mov	ip, r3
   1ccac:	strd	r6, [sp, #8]
   1ccb0:	strd	r8, [sp, #16]
   1ccb4:	mov	r9, r0
   1ccb8:	mov	r8, r2
   1ccbc:	strd	sl, [sp, #24]
   1ccc0:	mov	fp, r1
   1ccc4:	mov	r1, #36	; 0x24
   1ccc8:	str	lr, [sp, #32]
   1cccc:	vpush	{d8-d9}
   1ccd0:	sub	sp, sp, #372	; 0x174
   1ccd4:	ldr	r0, [r0]
   1ccd8:	str	r3, [sp, #76]	; 0x4c
   1ccdc:	mov	r3, #0
   1cce0:	str	r3, [ip]
   1cce4:	bl	27848 <flatcc_builder_start_table@@Base>
   1cce8:	cmp	r0, #0
   1ccec:	beq	1cd2c <_start@@Base+0x804c>
   1ccf0:	mov	r1, fp
   1ccf4:	mov	r2, r8
   1ccf8:	mov	r0, r9
   1ccfc:	mov	r3, #33	; 0x21
   1cd00:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1cd04:	mov	fp, r0
   1cd08:	mov	r0, fp
   1cd0c:	add	sp, sp, #372	; 0x174
   1cd10:	vpop	{d8-d9}
   1cd14:	ldrd	r4, [sp]
   1cd18:	ldrd	r6, [sp, #8]
   1cd1c:	ldrd	r8, [sp, #16]
   1cd20:	ldrd	sl, [sp, #24]
   1cd24:	add	sp, sp, #32
   1cd28:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd2c:	add	r0, sp, #336	; 0x150
   1cd30:	mov	r3, #1
   1cd34:	mov	r2, r8
   1cd38:	mov	r1, fp
   1cd3c:	str	r0, [sp]
   1cd40:	mov	r0, r9
   1cd44:	bl	32090 <flatcc_json_parser_prepare_unions@@Base>
   1cd48:	cmp	r8, r0
   1cd4c:	beq	1ccf0 <_start@@Base+0x8010>
   1cd50:	mov	r1, fp
   1cd54:	add	r3, sp, #328	; 0x148
   1cd58:	mov	r2, r8
   1cd5c:	mov	r0, r9
   1cd60:	bl	1ae08 <_start@@Base+0x6128>
   1cd64:	ldr	r3, [sp, #328]	; 0x148
   1cd68:	mov	fp, r0
   1cd6c:	cmp	r3, #0
   1cd70:	beq	1d584 <_start@@Base+0x88a4>
   1cd74:	cmp	r8, fp
   1cd78:	beq	1cd8c <_start@@Base+0x80ac>
   1cd7c:	ldrb	r3, [fp]
   1cd80:	cmp	r3, #34	; 0x22
   1cd84:	addeq	fp, fp, #1
   1cd88:	bne	1cffc <_start@@Base+0x831c>
   1cd8c:	mov	r1, r8
   1cd90:	mov	r0, fp
   1cd94:	bl	14dd0 <_start@@Base+0xf0>
   1cd98:	add	r3, pc, #816	; 0x330
   1cd9c:	ldrd	r2, [r3]
   1cda0:	mov	r4, r0
   1cda4:	mov	r5, r1
   1cda8:	strd	r4, [sp, #16]
   1cdac:	cmp	r1, r3
   1cdb0:	cmpeq	r0, r2
   1cdb4:	bhi	1cf00 <_start@@Base+0x8220>
   1cdb8:	add	r3, pc, #792	; 0x318
   1cdbc:	ldrd	r2, [r3]
   1cdc0:	cmp	r1, r3
   1cdc4:	cmpeq	r0, r2
   1cdc8:	bhi	1d018 <_start@@Base+0x8338>
   1cdcc:	add	r3, pc, #780	; 0x30c
   1cdd0:	ldrd	r2, [r3]
   1cdd4:	cmp	r1, r3
   1cdd8:	cmpeq	r0, r2
   1cddc:	bhi	1d35c <_start@@Base+0x867c>
   1cde0:	and	r1, r0, #-16777216	; 0xff000000
   1cde4:	add	r3, pc, #764	; 0x2fc
   1cde8:	ldrd	r2, [r3]
   1cdec:	str	r1, [sp, #40]	; 0x28
   1cdf0:	str	r5, [sp, #44]	; 0x2c
   1cdf4:	ldrd	r0, [sp, #40]	; 0x28
   1cdf8:	cmp	r1, r3
   1cdfc:	cmpeq	r0, r2
   1ce00:	beq	1dac4 <_start@@Base+0x8de4>
   1ce04:	add	r3, pc, #740	; 0x2e4
   1ce08:	ldrd	r2, [r3]
   1ce0c:	cmp	r1, r3
   1ce10:	cmpeq	r0, r2
   1ce14:	bne	1ec7c <_start@@Base+0x9f9c>
   1ce18:	sub	r3, r8, fp
   1ce1c:	cmp	r3, #5
   1ce20:	ble	1e86c <_start@@Base+0x9b8c>
   1ce24:	mov	r2, r8
   1ce28:	mov	r1, fp
   1ce2c:	mov	r0, r9
   1ce30:	bl	1b51c <_start@@Base+0x683c>
   1ce34:	cmp	r0, fp
   1ce38:	mov	r4, r0
   1ce3c:	beq	1e86c <_start@@Base+0x9b8c>
   1ce40:	mov	r3, #0
   1ce44:	mov	r0, #0
   1ce48:	mov	r1, #0
   1ce4c:	cmp	r8, r4
   1ce50:	strb	r3, [sp, #348]	; 0x15c
   1ce54:	str	r3, [sp, #352]	; 0x160
   1ce58:	add	r3, sp, #360	; 0x168
   1ce5c:	strd	r0, [r3]
   1ce60:	beq	202fc <_start@@Base+0xb61c>
   1ce64:	mov	r0, r3
   1ce68:	mov	r2, r8
   1ce6c:	add	r3, sp, #352	; 0x160
   1ce70:	mov	r1, r4
   1ce74:	str	r0, [sp]
   1ce78:	mov	r0, r9
   1ce7c:	bl	316c0 <flatcc_json_parser_integer@@Base>
   1ce80:	cmp	r4, r0
   1ce84:	mov	fp, r0
   1ce88:	bne	20334 <_start@@Base+0xb654>
   1ce8c:	add	ip, sp, #348	; 0x15c
   1ce90:	ldr	r3, [pc, #672]	; 1d138 <_start@@Base+0x8458>
   1ce94:	mov	r2, r8
   1ce98:	mov	r1, fp
   1ce9c:	mov	r0, r9
   1cea0:	str	ip, [sp]
   1cea4:	bl	1a3cc <_start@@Base+0x56ec>
   1cea8:	cmp	r8, r0
   1ceac:	cmpne	r0, fp
   1ceb0:	beq	1fd80 <_start@@Base+0xb0a0>
   1ceb4:	add	r3, sp, #348	; 0x15c
   1ceb8:	mov	fp, r0
   1cebc:	ldrsb	r2, [r3]
   1cec0:	cmp	r2, #8
   1cec4:	bne	1ced4 <_start@@Base+0x81f4>
   1cec8:	ldr	r3, [r9, #8]
   1cecc:	tst	r3, #2
   1ced0:	beq	1d560 <_start@@Base+0x8880>
   1ced4:	mov	r3, #1
   1ced8:	mov	r1, #6
   1cedc:	ldr	r0, [r9]
   1cee0:	mov	r2, r3
   1cee4:	bl	29bc0 <flatcc_builder_table_add@@Base>
   1cee8:	cmp	r0, #0
   1ceec:	beq	1ccf0 <_start@@Base+0x8010>
   1cef0:	add	r3, sp, #348	; 0x15c
   1cef4:	ldrsb	r3, [r3]
   1cef8:	strb	r3, [r0]
   1cefc:	b	1d560 <_start@@Base+0x8880>
   1cf00:	add	r3, pc, #496	; 0x1f0
   1cf04:	ldrd	r2, [r3]
   1cf08:	cmp	r1, r3
   1cf0c:	cmpeq	r0, r2
   1cf10:	bhi	1d13c <_start@@Base+0x845c>
   1cf14:	add	r3, pc, #484	; 0x1e4
   1cf18:	ldrd	r2, [r3]
   1cf1c:	cmp	r1, r3
   1cf20:	cmpeq	r0, r2
   1cf24:	beq	1d5d8 <_start@@Base+0x88f8>
   1cf28:	add	r3, pc, #472	; 0x1d8
   1cf2c:	ldrd	r2, [r3]
   1cf30:	cmp	r1, r3
   1cf34:	cmpeq	r0, r2
   1cf38:	bhi	1d774 <_start@@Base+0x8a94>
   1cf3c:	add	r3, pc, #460	; 0x1cc
   1cf40:	ldrd	r2, [r3]
   1cf44:	cmp	r1, r3
   1cf48:	cmpeq	r0, r2
   1cf4c:	beq	1ee04 <_start@@Base+0xa124>
   1cf50:	add	r3, pc, #448	; 0x1c0
   1cf54:	ldrd	r2, [r3]
   1cf58:	cmp	r1, r3
   1cf5c:	cmpeq	r0, r2
   1cf60:	bne	1e128 <_start@@Base+0x9448>
   1cf64:	sub	r3, r8, fp
   1cf68:	cmp	r3, #8
   1cf6c:	ble	20304 <_start@@Base+0xb624>
   1cf70:	mov	r2, r8
   1cf74:	mov	r1, fp
   1cf78:	mov	r0, r9
   1cf7c:	bl	1b694 <_start@@Base+0x69b4>
   1cf80:	cmp	fp, r0
   1cf84:	mov	r4, r0
   1cf88:	beq	20304 <_start@@Base+0xb624>
   1cf8c:	mov	r2, #0
   1cf90:	sub	r3, r8, r0
   1cf94:	cmp	r3, #3
   1cf98:	strb	r2, [sp, #348]	; 0x15c
   1cf9c:	ble	1e918 <_start@@Base+0x9c38>
   1cfa0:	ldrb	r2, [r0]
   1cfa4:	cmp	r2, #116	; 0x74
   1cfa8:	beq	207b0 <_start@@Base+0xbad0>
   1cfac:	cmp	r3, #4
   1cfb0:	beq	1e918 <_start@@Base+0x9c38>
   1cfb4:	movw	r1, #10532	; 0x2924
   1cfb8:	movt	r1, #4
   1cfbc:	mov	r2, #5
   1cfc0:	mov	r0, r4
   1cfc4:	bl	14530 <memcmp@plt>
   1cfc8:	cmp	r0, #0
   1cfcc:	addeq	fp, r4, #5
   1cfd0:	bne	1e918 <_start@@Base+0x9c38>
   1cfd4:	mov	r3, #1
   1cfd8:	mov	r1, #15
   1cfdc:	ldr	r0, [r9]
   1cfe0:	mov	r2, r3
   1cfe4:	bl	29bc0 <flatcc_builder_table_add@@Base>
   1cfe8:	cmp	r0, #0
   1cfec:	beq	1ccf0 <_start@@Base+0x8010>
   1cff0:	ldrb	r3, [sp, #348]	; 0x15c
   1cff4:	strb	r3, [r0]
   1cff8:	b	1d560 <_start@@Base+0x8880>
   1cffc:	mov	r1, fp
   1d000:	mov	r3, #5
   1d004:	mov	r2, r8
   1d008:	mov	r0, r9
   1d00c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1d010:	mov	fp, r0
   1d014:	b	1cd8c <_start@@Base+0x80ac>
   1d018:	add	r3, pc, #256	; 0x100
   1d01c:	ldrd	r2, [r3]
   1d020:	cmp	r1, r3
   1d024:	cmpeq	r0, r2
   1d028:	bhi	1d4e4 <_start@@Base+0x8804>
   1d02c:	add	r3, pc, #244	; 0xf4
   1d030:	ldrd	r2, [r3]
   1d034:	cmp	r1, r3
   1d038:	cmpeq	r0, r2
   1d03c:	bhi	1d8c4 <_start@@Base+0x8be4>
   1d040:	mov	r1, #0
   1d044:	add	r3, pc, #228	; 0xe4
   1d048:	ldrd	r2, [r3]
   1d04c:	str	r1, [sp, #104]	; 0x68
   1d050:	str	r5, [sp, #108]	; 0x6c
   1d054:	ldrd	r0, [sp, #104]	; 0x68
   1d058:	cmp	r1, r3
   1d05c:	cmpeq	r0, r2
   1d060:	bne	1e0b0 <_start@@Base+0x93d0>
   1d064:	sub	r3, r8, fp
   1d068:	cmp	r3, #4
   1d06c:	ble	202e4 <_start@@Base+0xb604>
   1d070:	mov	r1, fp
   1d074:	mov	r2, r8
   1d078:	mov	r0, r9
   1d07c:	bl	1b750 <_start@@Base+0x6a70>
   1d080:	cmp	fp, r0
   1d084:	mov	r1, r0
   1d088:	beq	202e4 <_start@@Base+0xb604>
   1d08c:	add	r3, sp, #332	; 0x14c
   1d090:	mov	r2, r8
   1d094:	mov	r0, r9
   1d098:	bl	31d48 <flatcc_json_parser_build_string@@Base>
   1d09c:	ldr	r3, [sp, #332]	; 0x14c
   1d0a0:	mov	fp, r0
   1d0a4:	cmp	r3, #0
   1d0a8:	beq	1ccf0 <_start@@Base+0x8010>
   1d0ac:	mov	r1, #3
   1d0b0:	ldr	r0, [r9]
   1d0b4:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   1d0b8:	cmp	r0, #0
   1d0bc:	beq	1ccf0 <_start@@Base+0x8010>
   1d0c0:	ldr	r3, [sp, #332]	; 0x14c
   1d0c4:	str	r3, [r0]
   1d0c8:	b	1d560 <_start@@Base+0x8880>
   1d0cc:	nop	{0}
   1d0d0:	cmnvs	r2, r0, ror #4
   1d0d4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d0d8:			; <UNDEFINED> instruction: 0xffffffff
   1d0dc:	cdpvs	13, 6, cr6, cr1, cr4, {3}
   1d0e0:			; <UNDEFINED> instruction: 0xffffffff
   1d0e4:			; <UNDEFINED> instruction: 0x666c6577
   1d0e8:	stmdbvc	r0, {}	; <UNPREDICTABLE>
   1d0ec:	strbvs	r6, [lr, #-1389]!	; 0xfffffa93
   1d0f0:	andvc	r0, r0, #0
   1d0f4:	cmnvs	pc, #28416	; 0x6f00
   1d0f8:	shsub8vs	pc, r2, pc	; <UNPREDICTABLE>
   1d0fc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d100:	cmnvs	r2, r1, ror #4
   1d104:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d108:	strbvs	r7, [sp, #-115]!	; 0xffffff8d
   1d10c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d110:	rsbvs	r7, r1, #-1811939327	; 0x94000001
   1d114:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d118:	rsbvs	r6, pc, #108, 30	; 0x1b0
   1d11c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d120:			; <UNDEFINED> instruction: 0xffffffff
   1d124:	strbtvc	r7, [r5], #-883	; 0xfffffc8d
   1d128:	cdpvs	15, 7, cr5, cr4, cr13, {3}
   1d12c:	rsbvc	r7, r1, r5, ror #4
   1d130:	andeq	r0, r0, r0
   1d134:	cdpvs	13, 6, cr6, cr1, cr5, {3}
   1d138:	strdeq	r8, [r5], -ip
   1d13c:	add	r3, pc, #860	; 0x35c
   1d140:	ldrd	r2, [r3]
   1d144:	cmp	r1, r3
   1d148:	cmpeq	r0, r2
   1d14c:	bhi	1d214 <_start@@Base+0x8534>
   1d150:	lsr	r3, r0, #16
   1d154:	str	r3, [sp, #24]
   1d158:	ldr	r1, [sp, #24]
   1d15c:	str	r5, [sp, #28]
   1d160:	add	r3, pc, #832	; 0x340
   1d164:	ldrd	r2, [r3]
   1d168:	lsl	r1, r1, #16
   1d16c:	str	r1, [sp, #24]
   1d170:	ldrd	r0, [sp, #24]
   1d174:	cmp	r1, r3
   1d178:	cmpeq	r0, r2
   1d17c:	bne	1daac <_start@@Base+0x8dcc>
   1d180:	sub	r3, r8, fp
   1d184:	cmp	r3, #6
   1d188:	ble	1f330 <_start@@Base+0xa650>
   1d18c:	mov	r2, r8
   1d190:	mov	r1, fp
   1d194:	mov	r0, r9
   1d198:	bl	1b5d8 <_start@@Base+0x68f8>
   1d19c:	cmp	fp, r0
   1d1a0:	mov	r4, r0
   1d1a4:	beq	1f330 <_start@@Base+0xa650>
   1d1a8:	mov	ip, #0
   1d1ac:	mov	r1, r0
   1d1b0:	mov	r2, r8
   1d1b4:	add	r3, sp, #360	; 0x168
   1d1b8:	mov	r0, r9
   1d1bc:	str	ip, [sp, #360]	; 0x168
   1d1c0:	bl	2ef68 <flatcc_json_parser_float@@Base>
   1d1c4:	cmp	r0, r4
   1d1c8:	mov	fp, r0
   1d1cc:	beq	1f708 <_start@@Base+0xaa28>
   1d1d0:	vldr	s15, [sp, #360]	; 0x168
   1d1d4:	vcmp.f32	s15, #0.0
   1d1d8:	vmrs	APSR_nzcv, fpscr
   1d1dc:	bne	1d1ec <_start@@Base+0x850c>
   1d1e0:	ldr	r3, [r9, #8]
   1d1e4:	tst	r3, #2
   1d1e8:	beq	1d560 <_start@@Base+0x8880>
   1d1ec:	mov	r3, #4
   1d1f0:	mov	r1, #27
   1d1f4:	ldr	r0, [r9]
   1d1f8:	mov	r2, r3
   1d1fc:	bl	29bc0 <flatcc_builder_table_add@@Base>
   1d200:	cmp	r0, #0
   1d204:	beq	1ccf0 <_start@@Base+0x8010>
   1d208:	ldr	r3, [sp, #360]	; 0x168
   1d20c:	str	r3, [r0]
   1d210:	b	1d560 <_start@@Base+0x8880>
   1d214:	add	r3, pc, #660	; 0x294
   1d218:	ldrd	r2, [r3]
   1d21c:	cmp	r1, r3
   1d220:	cmpeq	r0, r2
   1d224:	beq	1dcdc <_start@@Base+0x8ffc>
   1d228:	add	r3, pc, #648	; 0x288
   1d22c:	ldrd	r2, [r3]
   1d230:	cmp	r1, r3
   1d234:	cmpeq	r0, r2
   1d238:	bhi	1de6c <_start@@Base+0x918c>
   1d23c:	add	r3, pc, #636	; 0x27c
   1d240:	ldrd	r2, [r3]
   1d244:	cmp	r1, r3
   1d248:	cmpeq	r0, r2
   1d24c:	bne	1e6b4 <_start@@Base+0x99d4>
   1d250:	add	r4, fp, #8
   1d254:	mov	r1, r8
   1d258:	mov	r0, r4
   1d25c:	bl	14dd0 <_start@@Base+0xf0>
   1d260:	add	r3, pc, #608	; 0x260
   1d264:	ldrd	r2, [r3]
   1d268:	cmp	r1, r3
   1d26c:	cmpeq	r0, r2
   1d270:	bne	1f690 <_start@@Base+0xa9b0>
   1d274:	mov	r3, #0
   1d278:	add	r4, fp, #16
   1d27c:	mov	r1, r8
   1d280:	mov	r0, r4
   1d284:	str	r3, [sp, #256]	; 0x100
   1d288:	bl	14dd0 <_start@@Base+0xf0>
   1d28c:	str	r1, [sp, #260]	; 0x104
   1d290:	add	r1, sp, #256	; 0x100
   1d294:	add	r3, pc, #564	; 0x234
   1d298:	ldrd	r2, [r3]
   1d29c:	ldrd	r0, [r1]
   1d2a0:	cmp	r1, r3
   1d2a4:	cmpeq	r0, r2
   1d2a8:	bne	1fa2c <_start@@Base+0xad4c>
   1d2ac:	sub	r3, r8, r4
   1d2b0:	cmp	r3, #4
   1d2b4:	ble	20e60 <_start@@Base+0xc180>
   1d2b8:	mov	r2, r8
   1d2bc:	mov	r1, r4
   1d2c0:	mov	r0, r9
   1d2c4:	bl	1b750 <_start@@Base+0x6a70>
   1d2c8:	cmp	r4, r0
   1d2cc:	mov	fp, r0
   1d2d0:	beq	20e5c <_start@@Base+0xc17c>
   1d2d4:	cmp	r8, r0
   1d2d8:	ldr	r0, [r9]
   1d2dc:	beq	1d2ec <_start@@Base+0x860c>
   1d2e0:	ldrb	r3, [fp]
   1d2e4:	cmp	r3, #91	; 0x5b
   1d2e8:	beq	2108c <_start@@Base+0xc3ac>
   1d2ec:	mov	r3, #0
   1d2f0:	mov	r2, r3
   1d2f4:	mov	r1, r3
   1d2f8:	bl	25d5c <flatcc_builder_start_buffer@@Base>
   1d2fc:	cmp	r0, #0
   1d300:	bne	1ccf0 <_start@@Base+0x8010>
   1d304:	mov	r1, fp
   1d308:	add	r3, sp, #332	; 0x14c
   1d30c:	mov	r2, r8
   1d310:	mov	r0, r9
   1d314:	bl	1cca4 <_start@@Base+0x7fc4>
   1d318:	ldr	r1, [sp, #332]	; 0x14c
   1d31c:	mov	fp, r0
   1d320:	cmp	r1, #0
   1d324:	beq	1ccf0 <_start@@Base+0x8010>
   1d328:	ldr	r0, [r9]
   1d32c:	bl	25f08 <flatcc_builder_end_buffer@@Base>
   1d330:	str	r0, [sp, #332]	; 0x14c
   1d334:	cmp	r0, #0
   1d338:	beq	1ccf0 <_start@@Base+0x8010>
   1d33c:	mov	r1, #13
   1d340:	ldr	r0, [r9]
   1d344:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   1d348:	cmp	r0, #0
   1d34c:	beq	1ccf0 <_start@@Base+0x8010>
   1d350:	ldr	r3, [sp, #332]	; 0x14c
   1d354:	str	r3, [r0]
   1d358:	b	1d560 <_start@@Base+0x8880>
   1d35c:	movw	r3, #65535	; 0xffff
   1d360:	movt	r3, #26735	; 0x686f
   1d364:	mvn	r2, #0
   1d368:	cmp	r1, r3
   1d36c:	cmpeq	r0, r2
   1d370:	bhi	1d9cc <_start@@Base+0x8cec>
   1d374:	mov	r1, #0
   1d378:	add	r3, pc, #344	; 0x158
   1d37c:	ldrd	r2, [r3]
   1d380:	str	r1, [sp, #96]	; 0x60
   1d384:	str	r5, [sp, #100]	; 0x64
   1d388:	ldrd	r0, [sp, #96]	; 0x60
   1d38c:	cmp	r1, r3
   1d390:	cmpeq	r0, r2
   1d394:	bne	1e0c8 <_start@@Base+0x93e8>
   1d398:	sub	r3, r8, fp
   1d39c:	cmp	r3, #4
   1d3a0:	ble	1f35c <_start@@Base+0xa67c>
   1d3a4:	mov	r2, r8
   1d3a8:	mov	r1, fp
   1d3ac:	mov	r0, r9
   1d3b0:	bl	1b750 <_start@@Base+0x6a70>
   1d3b4:	cmp	r0, fp
   1d3b8:	mov	r4, r0
   1d3bc:	beq	1f35c <_start@@Base+0xa67c>
   1d3c0:	mov	r2, #1
   1d3c4:	mvn	r3, #0
   1d3c8:	ldr	r0, [r9]
   1d3cc:	mov	r1, r2
   1d3d0:	bl	270b0 <flatcc_builder_start_vector@@Base>
   1d3d4:	subs	r5, r0, #0
   1d3d8:	bne	21074 <_start@@Base+0xc394>
   1d3dc:	add	r3, sp, #328	; 0x148
   1d3e0:	mov	r1, r4
   1d3e4:	mov	r2, r8
   1d3e8:	mov	r0, r9
   1d3ec:	bl	1ad34 <_start@@Base+0x6054>
   1d3f0:	ldr	r3, [sp, #328]	; 0x148
   1d3f4:	mov	fp, r0
   1d3f8:	cmp	r3, #0
   1d3fc:	beq	20518 <_start@@Base+0xb838>
   1d400:	mov	sl, r5
   1d404:	b	1d434 <_start@@Base+0x8754>
   1d408:	ldrb	ip, [sp, #360]	; 0x168
   1d40c:	add	r3, sp, #328	; 0x148
   1d410:	mov	r1, r4
   1d414:	mov	r2, r8
   1d418:	mov	r0, r9
   1d41c:	strb	ip, [r5]
   1d420:	bl	194f8 <_start@@Base+0x4818>
   1d424:	ldr	r3, [sp, #328]	; 0x148
   1d428:	mov	fp, r0
   1d42c:	cmp	r3, #0
   1d430:	beq	20518 <_start@@Base+0xb838>
   1d434:	mov	r1, #1
   1d438:	ldr	r0, [r9]
   1d43c:	strb	sl, [sp, #360]	; 0x168
   1d440:	bl	2640c <flatcc_builder_extend_vector@@Base>
   1d444:	subs	r5, r0, #0
   1d448:	mov	r1, fp
   1d44c:	add	r3, sp, #360	; 0x168
   1d450:	mov	r2, r8
   1d454:	mov	r0, r9
   1d458:	beq	1ccf0 <_start@@Base+0x8010>
   1d45c:	bl	17e60 <_start@@Base+0x3180>
   1d460:	cmp	fp, r0
   1d464:	mov	r4, r0
   1d468:	bne	1d408 <_start@@Base+0x8728>
   1d46c:	add	r1, sp, #360	; 0x168
   1d470:	ldr	r3, [pc, #104]	; 1d4e0 <_start@@Base+0x8800>
   1d474:	mov	r2, r8
   1d478:	mov	r0, r9
   1d47c:	str	r1, [sp]
   1d480:	mov	r1, r4
   1d484:	bl	1a794 <_start@@Base+0x5ab4>
   1d488:	cmp	r8, r0
   1d48c:	cmpne	r4, r0
   1d490:	mov	fp, r0
   1d494:	mov	r4, r0
   1d498:	bne	1d408 <_start@@Base+0x8728>
   1d49c:	b	1ccf0 <_start@@Base+0x8010>
   1d4a0:	stmdavs	r1!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^
   1d4a4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d4a8:	ldrtvs	r0, [r3], -r0
   1d4ac:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d4b0:	stmdavs	r1!, {r3, r5, r6, r8, r9, ip, sp, lr}^
   1d4b4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d4b8:	svcvs	0x00725f6e
   1d4bc:			; <UNDEFINED> instruction: 0x76656374
   1d4c0:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1d4c4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d4c8:	cmnvs	r4, r5, ror r2
   1d4cc:	strbvs	r6, [r4, #-1644]!	; 0xfffff994
   1d4d0:	andeq	r0, r0, r0
   1d4d4:			; <UNDEFINED> instruction: 0x66666572
   1d4d8:	andeq	r0, r0, r0
   1d4dc:			; <UNDEFINED> instruction: 0x666c6578
   1d4e0:	andeq	r8, r5, ip, lsl #2
   1d4e4:	and	r1, r0, #-16777216	; 0xff000000
   1d4e8:	add	r3, pc, #936	; 0x3a8
   1d4ec:	ldrd	r2, [r3]
   1d4f0:	sub	sl, r8, fp
   1d4f4:	str	r1, [sp, #48]	; 0x30
   1d4f8:	str	r5, [sp, #52]	; 0x34
   1d4fc:	ldrd	r0, [sp, #48]	; 0x30
   1d500:	cmp	r1, r3
   1d504:	cmpeq	r0, r2
   1d508:	beq	1dbc4 <_start@@Base+0x8ee4>
   1d50c:	cmp	sl, #4
   1d510:	ble	1ecac <_start@@Base+0x9fcc>
   1d514:	mov	r2, r8
   1d518:	mov	r1, fp
   1d51c:	mov	r0, r9
   1d520:	bl	1b750 <_start@@Base+0x6a70>
   1d524:	cmp	fp, r0
   1d528:	beq	1ecac <_start@@Base+0x9fcc>
   1d52c:	ldr	ip, [sp, #336]	; 0x150
   1d530:	mov	lr, #8
   1d534:	movw	r3, #14064	; 0x36f0
   1d538:	movt	r3, #2
   1d53c:	mov	r1, r0
   1d540:	mov	r2, r8
   1d544:	mov	r0, r9
   1d548:	str	lr, [sp]
   1d54c:	str	ip, [sp, #4]
   1d550:	str	r3, [sp, #8]
   1d554:	mov	r3, #0
   1d558:	bl	321b8 <flatcc_json_parser_union@@Base>
   1d55c:	mov	fp, r0
   1d560:	mov	r1, fp
   1d564:	add	r3, sp, #328	; 0x148
   1d568:	mov	r2, r8
   1d56c:	mov	r0, r9
   1d570:	bl	193b0 <_start@@Base+0x46d0>
   1d574:	ldr	r3, [sp, #328]	; 0x148
   1d578:	mov	fp, r0
   1d57c:	cmp	r3, #0
   1d580:	bne	1cd74 <_start@@Base+0x8094>
   1d584:	ldr	r3, [r9, #20]
   1d588:	cmp	r3, #0
   1d58c:	bne	1ccf0 <_start@@Base+0x8010>
   1d590:	mov	r1, #3
   1d594:	ldr	r0, [r9]
   1d598:	bl	28030 <flatcc_builder_check_required_field@@Base>
   1d59c:	cmp	r0, #0
   1d5a0:	mov	r1, fp
   1d5a4:	beq	20754 <_start@@Base+0xba74>
   1d5a8:	mov	r2, r8
   1d5ac:	mov	r0, r9
   1d5b0:	ldr	r3, [sp, #336]	; 0x150
   1d5b4:	bl	3212c <flatcc_json_parser_finalize_unions@@Base>
   1d5b8:	mov	fp, r0
   1d5bc:	ldr	r0, [r9]
   1d5c0:	bl	281c8 <flatcc_builder_end_table@@Base>
   1d5c4:	ldr	r3, [sp, #76]	; 0x4c
   1d5c8:	cmp	r0, #0
   1d5cc:	str	r0, [r3]
   1d5d0:	bne	1cd08 <_start@@Base+0x8028>
   1d5d4:	b	1ccf0 <_start@@Base+0x8010>
   1d5d8:	add	r4, fp, #8
   1d5dc:	mov	r1, r8
   1d5e0:	mov	r0, r4
   1d5e4:	bl	14dd0 <_start@@Base+0xf0>
   1d5e8:	add	r3, pc, #688	; 0x2b0
   1d5ec:	ldrd	r2, [r3]
   1d5f0:	cmp	r1, r3
   1d5f4:	cmpeq	r0, r2
   1d5f8:	bhi	1db2c <_start@@Base+0x8e4c>
   1d5fc:	add	r3, pc, #676	; 0x2a4
   1d600:	ldrd	r2, [r3]
   1d604:	cmp	r1, r3
   1d608:	cmpeq	r0, r2
   1d60c:	bne	1e140 <_start@@Base+0x9460>
   1d610:	sub	r3, r8, r4
   1d614:	cmp	r3, #8
   1d618:	ble	1f378 <_start@@Base+0xa698>
   1d61c:	mov	r2, r8
   1d620:	mov	r1, r4
   1d624:	mov	r0, r9
   1d628:	bl	1b694 <_start@@Base+0x69b4>
   1d62c:	cmp	r4, r0
   1d630:	mov	fp, r0
   1d634:	beq	1f374 <_start@@Base+0xa694>
   1d638:	mov	r2, #1
   1d63c:	mvn	r3, #0
   1d640:	ldr	r0, [r9]
   1d644:	mov	r1, r2
   1d648:	bl	270b0 <flatcc_builder_start_vector@@Base>
   1d64c:	cmp	r0, #0
   1d650:	bne	1ccf0 <_start@@Base+0x8010>
   1d654:	mov	r1, fp
   1d658:	add	r3, sp, #328	; 0x148
   1d65c:	mov	r2, r8
   1d660:	mov	r0, r9
   1d664:	bl	1ad34 <_start@@Base+0x6054>
   1d668:	ldr	r3, [sp, #328]	; 0x148
   1d66c:	mov	fp, r0
   1d670:	cmp	r3, #0
   1d674:	beq	20610 <_start@@Base+0xb930>
   1d678:	movw	sl, #10532	; 0x2924
   1d67c:	movt	sl, #4
   1d680:	b	1d6ac <_start@@Base+0x89cc>
   1d684:	add	r3, sp, #328	; 0x148
   1d688:	mov	r1, r4
   1d68c:	strb	r2, [r5]
   1d690:	mov	r0, r9
   1d694:	mov	r2, r8
   1d698:	bl	194f8 <_start@@Base+0x4818>
   1d69c:	ldr	r3, [sp, #328]	; 0x148
   1d6a0:	mov	fp, r0
   1d6a4:	cmp	r3, #0
   1d6a8:	beq	20610 <_start@@Base+0xb930>
   1d6ac:	mov	r3, #0
   1d6b0:	mov	r1, #1
   1d6b4:	ldr	r0, [r9]
   1d6b8:	strb	r3, [sp, #352]	; 0x160
   1d6bc:	bl	2640c <flatcc_builder_extend_vector@@Base>
   1d6c0:	subs	r5, r0, #0
   1d6c4:	beq	1ccf0 <_start@@Base+0x8010>
   1d6c8:	sub	r3, r8, fp
   1d6cc:	cmp	r3, #3
   1d6d0:	ble	1d70c <_start@@Base+0x8a2c>
   1d6d4:	ldrb	r2, [fp]
   1d6d8:	cmp	r2, #116	; 0x74
   1d6dc:	beq	20260 <_start@@Base+0xb580>
   1d6e0:	cmp	r3, #4
   1d6e4:	beq	1d70c <_start@@Base+0x8a2c>
   1d6e8:	mov	r2, #5
   1d6ec:	mov	r1, sl
   1d6f0:	mov	r0, fp
   1d6f4:	bl	14530 <memcmp@plt>
   1d6f8:	cmp	r0, #0
   1d6fc:	moveq	r2, r0
   1d700:	addeq	r4, fp, #5
   1d704:	strbeq	r0, [sp, #352]	; 0x160
   1d708:	beq	1d734 <_start@@Base+0x8a54>
   1d70c:	mov	r2, r8
   1d710:	add	r3, sp, #360	; 0x168
   1d714:	mov	r1, fp
   1d718:	mov	r0, r9
   1d71c:	bl	17e60 <_start@@Base+0x3180>
   1d720:	ldrb	r2, [sp, #360]	; 0x168
   1d724:	mov	r4, r0
   1d728:	adds	r2, r2, #0
   1d72c:	movne	r2, #1
   1d730:	strb	r2, [sp, #352]	; 0x160
   1d734:	cmp	fp, r4
   1d738:	bne	1d684 <_start@@Base+0x89a4>
   1d73c:	add	ip, sp, #352	; 0x160
   1d740:	ldr	r3, [pc, #376]	; 1d8c0 <_start@@Base+0x8be0>
   1d744:	mov	r2, r8
   1d748:	mov	r1, r4
   1d74c:	mov	r0, r9
   1d750:	str	ip, [sp]
   1d754:	bl	19640 <_start@@Base+0x4960>
   1d758:	cmp	r8, r0
   1d75c:	cmpne	r0, r4
   1d760:	mov	fp, r0
   1d764:	beq	1ccf0 <_start@@Base+0x8010>
   1d768:	ldrb	r2, [sp, #352]	; 0x160
   1d76c:	mov	r4, r0
   1d770:	b	1d684 <_start@@Base+0x89a4>
   1d774:	add	r3, pc, #308	; 0x134
   1d778:	ldrd	r2, [r3]
   1d77c:	cmp	r1, r3
   1d780:	cmpeq	r0, r2
   1d784:	bhi	1dda4 <_start@@Base+0x90c4>
   1d788:	add	r3, pc, #296	; 0x128
   1d78c:	ldrd	r2, [r3]
   1d790:	cmp	r1, r3
   1d794:	cmpeq	r0, r2
   1d798:	bne	1e684 <_start@@Base+0x99a4>
   1d79c:	add	r5, fp, #8
   1d7a0:	mov	r1, r8
   1d7a4:	mov	r0, r5
   1d7a8:	mov	r4, #0
   1d7ac:	bl	14dd0 <_start@@Base+0xf0>
   1d7b0:	and	r3, r1, #-16777216	; 0xff000000
   1d7b4:	str	r4, [sp, #200]	; 0xc8
   1d7b8:	str	r3, [sp, #204]	; 0xcc
   1d7bc:	ldrd	r2, [sp, #200]	; 0xc8
   1d7c0:	cmp	r3, #2030043136	; 0x79000000
   1d7c4:	cmpeq	r2, #0
   1d7c8:	bne	1f6a8 <_start@@Base+0xa9c8>
   1d7cc:	sub	r3, r8, r5
   1d7d0:	cmp	r3, #1
   1d7d4:	ble	1fc80 <_start@@Base+0xafa0>
   1d7d8:	mov	r2, r8
   1d7dc:	mov	r1, r5
   1d7e0:	mov	r0, r9
   1d7e4:	bl	1b80c <_start@@Base+0x6b2c>
   1d7e8:	cmp	r5, r0
   1d7ec:	mov	fp, r0
   1d7f0:	beq	1fc7c <_start@@Base+0xaf9c>
   1d7f4:	mov	r1, #3
   1d7f8:	ldr	r0, [r9]
   1d7fc:	str	r4, [sp, #332]	; 0x14c
   1d800:	bl	27848 <flatcc_builder_start_table@@Base>
   1d804:	cmp	r0, r4
   1d808:	bne	204e8 <_start@@Base+0xb808>
   1d80c:	add	r3, sp, #340	; 0x154
   1d810:	mov	r1, fp
   1d814:	mov	r2, r8
   1d818:	mov	r0, r9
   1d81c:	bl	1ae08 <_start@@Base+0x6128>
   1d820:	ldr	r3, [sp, #340]	; 0x154
   1d824:	mov	r4, r0
   1d828:	cmp	r3, #0
   1d82c:	beq	1f7fc <_start@@Base+0xab1c>
   1d830:	ldrd	sl, [sp, #232]	; 0xe8
   1d834:	mov	r3, #0
   1d838:	movt	r3, #65535	; 0xffff
   1d83c:	str	r3, [sp, #16]
   1d840:	strd	r6, [sp, #56]	; 0x38
   1d844:	cmp	r8, r4
   1d848:	beq	1d85c <_start@@Base+0x8b7c>
   1d84c:	ldrb	r3, [r4]
   1d850:	cmp	r3, #34	; 0x22
   1d854:	addeq	r4, r4, #1
   1d858:	bne	1fef8 <_start@@Base+0xb218>
   1d85c:	sub	ip, r8, r4
   1d860:	cmp	ip, #8
   1d864:	bhi	1f854 <_start@@Base+0xab74>
   1d868:	sub	r3, ip, #1
   1d86c:	cmp	r3, #7
   1d870:	ldrls	pc, [pc, r3, lsl #2]
   1d874:	b	1f764 <_start@@Base+0xaa84>
   1d878:	andeq	pc, r1, r4, ror #14
   1d87c:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1d880:	andeq	pc, r1, r0, asr #19
   1d884:			; <UNDEFINED> instruction: 0x0001f9b4
   1d888:	ldrdeq	pc, [r1], -r8
   1d88c:	andeq	pc, r1, r8, lsr #19
   1d890:	andeq	pc, r1, ip, asr #19
   1d894:	andeq	pc, r1, r4, asr r8	; <UNPREDICTABLE>
   1d898:	strcc	r0, [r0], #-0
   1d89c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d8a0:	ldrbtvc	r6, [r2], #-2413	; 0xfffff693
   1d8a4:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1d8a8:	svcvs	0x006f6c73
   1d8ac:	stmdbvc	pc!, {r1, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1d8b0:	ldrbvs	pc, [pc, #4095]!	; 1e8b7 <_start@@Base+0x9bd7>	; <UNPREDICTABLE>
   1d8b4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d8b8:	strbvs	r7, [sp, #-116]!	; 0xffffff8c
   1d8bc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d8c0:	andeq	r8, r5, ip, lsl #3
   1d8c4:	add	r3, pc, #988	; 0x3dc
   1d8c8:	ldrd	r2, [r3]
   1d8cc:	cmp	r1, r3
   1d8d0:	cmpeq	r0, r2
   1d8d4:	beq	1f224 <_start@@Base+0xa544>
   1d8d8:	ldr	r1, [sp, #20]
   1d8dc:	mov	r4, #0
   1d8e0:	str	r4, [sp, #152]	; 0x98
   1d8e4:	add	r3, pc, #964	; 0x3c4
   1d8e8:	ldrd	r2, [r3]
   1d8ec:	bic	r1, r1, #255	; 0xff
   1d8f0:	str	r1, [sp, #156]	; 0x9c
   1d8f4:	ldrd	r0, [sp, #152]	; 0x98
   1d8f8:	cmp	r1, r3
   1d8fc:	cmpeq	r0, r2
   1d900:	bne	1e69c <_start@@Base+0x99bc>
   1d904:	sub	r3, r8, fp
   1d908:	cmp	r3, #3
   1d90c:	ble	2054c <_start@@Base+0xb86c>
   1d910:	mov	r2, r8
   1d914:	mov	r1, fp
   1d918:	mov	r0, r9
   1d91c:	bl	1b984 <_start@@Base+0x6ca4>
   1d920:	cmp	fp, r0
   1d924:	mov	r5, r0
   1d928:	beq	2054c <_start@@Base+0xb86c>
   1d92c:	mov	r3, #16
   1d930:	mov	r1, r4
   1d934:	ldr	r0, [r9]
   1d938:	mov	r2, #32
   1d93c:	bl	29bc0 <flatcc_builder_table_add@@Base>
   1d940:	subs	r3, r0, #0
   1d944:	str	r3, [sp, #16]
   1d948:	beq	211bc <_start@@Base+0xc4dc>
   1d94c:	add	r3, sp, #348	; 0x15c
   1d950:	mov	r1, r5
   1d954:	mov	r2, r8
   1d958:	mov	r0, r9
   1d95c:	bl	1ae08 <_start@@Base+0x6128>
   1d960:	ldr	r3, [sp, #348]	; 0x15c
   1d964:	mov	r4, r0
   1d968:	cmp	r3, #0
   1d96c:	beq	2107c <_start@@Base+0xc39c>
   1d970:	vldr	s16, [pc, #864]	; 1dcd8 <_start@@Base+0x8ff8>
   1d974:	vldr	d9, [pc, #828]	; 1dcb8 <_start@@Base+0x8fd8>
   1d978:	cmp	r8, r4
   1d97c:	beq	1d990 <_start@@Base+0x8cb0>
   1d980:	ldrb	r3, [r4]
   1d984:	cmp	r3, #34	; 0x22
   1d988:	addeq	r4, r4, #1
   1d98c:	bne	1eab0 <_start@@Base+0x9dd0>
   1d990:	sub	ip, r8, r4
   1d994:	cmp	ip, #8
   1d998:	bhi	1e488 <_start@@Base+0x97a8>
   1d99c:	sub	r3, ip, #1
   1d9a0:	cmp	r3, #7
   1d9a4:	ldrls	pc, [pc, r3, lsl #2]
   1d9a8:	b	1e66c <_start@@Base+0x998c>
   1d9ac:	andeq	lr, r1, r4, lsr #12
   1d9b0:	andeq	lr, r1, r0, lsl #12
   1d9b4:	strdeq	lr, [r1], -r4
   1d9b8:	andeq	lr, r1, r8, lsl r6
   1d9bc:	andeq	lr, r1, ip, lsl #12
   1d9c0:	andeq	lr, r1, r8, ror #11
   1d9c4:	ldrdeq	lr, [r1], -ip
   1d9c8:	andeq	lr, r1, r8, lsl #9
   1d9cc:	add	r3, pc, #748	; 0x2ec
   1d9d0:	ldrd	r2, [r3]
   1d9d4:	cmp	r1, r3
   1d9d8:	cmpeq	r0, r2
   1d9dc:	bhi	1dfdc <_start@@Base+0x92fc>
   1d9e0:	lsr	r3, r1, #16
   1d9e4:	mov	r4, #0
   1d9e8:	mov	r2, #0
   1d9ec:	str	r4, [sp, #120]	; 0x78
   1d9f0:	str	r3, [sp, #124]	; 0x7c
   1d9f4:	mov	r3, #0
   1d9f8:	movt	r3, #26736	; 0x6870
   1d9fc:	ldr	r1, [sp, #124]	; 0x7c
   1da00:	lsl	r1, r1, #16
   1da04:	str	r1, [sp, #124]	; 0x7c
   1da08:	ldrd	r0, [sp, #120]	; 0x78
   1da0c:	cmp	r1, r3
   1da10:	cmpeq	r0, r2
   1da14:	bne	1f390 <_start@@Base+0xa6b0>
   1da18:	sub	r3, r8, fp
   1da1c:	cmp	r3, #2
   1da20:	ble	205a0 <_start@@Base+0xb8c0>
   1da24:	mov	r2, r8
   1da28:	mov	r1, fp
   1da2c:	mov	r0, r9
   1da30:	bl	1c17c <_start@@Base+0x749c>
   1da34:	cmp	r0, fp
   1da38:	mov	r5, r0
   1da3c:	beq	205a0 <_start@@Base+0xb8c0>
   1da40:	add	r3, sp, #360	; 0x168
   1da44:	mov	r1, r0
   1da48:	mov	r2, r8
   1da4c:	mov	r0, r9
   1da50:	strh	r4, [r3]
   1da54:	bl	18004 <_start@@Base+0x3324>
   1da58:	cmp	r0, r5
   1da5c:	mov	fp, r0
   1da60:	beq	1fd50 <_start@@Base+0xb070>
   1da64:	add	r3, sp, #360	; 0x168
   1da68:	ldrsh	r3, [r3]
   1da6c:	cmp	r3, #100	; 0x64
   1da70:	bne	1da80 <_start@@Base+0x8da0>
   1da74:	ldr	r3, [r9, #8]
   1da78:	tst	r3, #2
   1da7c:	beq	1d560 <_start@@Base+0x8880>
   1da80:	mov	r3, #2
   1da84:	ldr	r0, [r9]
   1da88:	mov	r2, r3
   1da8c:	mov	r1, r3
   1da90:	bl	29bc0 <flatcc_builder_table_add@@Base>
   1da94:	cmp	r0, #0
   1da98:	beq	1ccf0 <_start@@Base+0x8010>
   1da9c:	add	r3, sp, #360	; 0x168
   1daa0:	ldrsh	r3, [r3]
   1daa4:	strh	r3, [r0]
   1daa8:	b	1d560 <_start@@Base+0x8880>
   1daac:	mov	r1, fp
   1dab0:	mov	r2, r8
   1dab4:	mov	r0, r9
   1dab8:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1dabc:	mov	fp, r0
   1dac0:	b	1d560 <_start@@Base+0x8880>
   1dac4:	sub	r3, r8, fp
   1dac8:	cmp	r3, #5
   1dacc:	ble	1e854 <_start@@Base+0x9b74>
   1dad0:	mov	r1, fp
   1dad4:	mov	r2, r8
   1dad8:	mov	r0, r9
   1dadc:	bl	1b51c <_start@@Base+0x683c>
   1dae0:	cmp	r0, fp
   1dae4:	mov	r1, r0
   1dae8:	beq	1e854 <_start@@Base+0x9b74>
   1daec:	add	r3, sp, #332	; 0x14c
   1daf0:	mov	r2, r8
   1daf4:	mov	r0, r9
   1daf8:	bl	1cca4 <_start@@Base+0x7fc4>
   1dafc:	ldr	r3, [sp, #332]	; 0x14c
   1db00:	mov	fp, r0
   1db04:	cmp	r3, #0
   1db08:	beq	1ccf0 <_start@@Base+0x8010>
   1db0c:	mov	r1, #12
   1db10:	ldr	r0, [r9]
   1db14:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   1db18:	cmp	r0, #0
   1db1c:	beq	1ccf0 <_start@@Base+0x8010>
   1db20:	ldr	r3, [sp, #332]	; 0x14c
   1db24:	str	r3, [r0]
   1db28:	b	1d560 <_start@@Base+0x8880>
   1db2c:	add	r3, pc, #404	; 0x194
   1db30:	ldrd	r2, [r3]
   1db34:	cmp	r1, r3
   1db38:	cmpeq	r0, r2
   1db3c:	beq	1e6fc <_start@@Base+0x9a1c>
   1db40:	add	r3, pc, #392	; 0x188
   1db44:	ldrd	r2, [r3]
   1db48:	cmp	r1, r3
   1db4c:	cmpeq	r0, r2
   1db50:	bne	1f3d8 <_start@@Base+0xa6f8>
   1db54:	mov	r3, #0
   1db58:	add	r4, fp, #16
   1db5c:	mov	r1, r8
   1db60:	mov	r0, r4
   1db64:	str	r3, [sp, #216]	; 0xd8
   1db68:	bl	14dd0 <_start@@Base+0xf0>
   1db6c:	and	r3, r1, #-16777216	; 0xff000000
   1db70:	str	r3, [sp, #220]	; 0xdc
   1db74:	ldrd	r2, [sp, #216]	; 0xd8
   1db78:	cmp	r3, #1929379840	; 0x73000000
   1db7c:	cmpeq	r2, #0
   1db80:	bne	1f9e4 <_start@@Base+0xad04>
   1db84:	sub	r3, r8, r4
   1db88:	cmp	r3, #1
   1db8c:	ble	209c0 <_start@@Base+0xbce0>
   1db90:	mov	r2, r8
   1db94:	mov	r1, r4
   1db98:	mov	r0, r9
   1db9c:	bl	1b80c <_start@@Base+0x6b2c>
   1dba0:	cmp	r4, r0
   1dba4:	mov	fp, r0
   1dba8:	bne	20a10 <_start@@Base+0xbd30>
   1dbac:	mov	r1, fp
   1dbb0:	mov	r2, r8
   1dbb4:	mov	r0, r9
   1dbb8:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1dbbc:	mov	fp, r0
   1dbc0:	b	1d560 <_start@@Base+0x8880>
   1dbc4:	cmp	sl, #5
   1dbc8:	ble	1e6e4 <_start@@Base+0x9a04>
   1dbcc:	mov	r2, r8
   1dbd0:	mov	r1, fp
   1dbd4:	mov	r0, r9
   1dbd8:	bl	1b51c <_start@@Base+0x683c>
   1dbdc:	cmp	fp, r0
   1dbe0:	mov	r4, r0
   1dbe4:	beq	1e6e4 <_start@@Base+0x9a04>
   1dbe8:	mvn	r3, #-1073741824	; 0xc0000000
   1dbec:	mov	r2, #2
   1dbf0:	ldr	r0, [r9]
   1dbf4:	mov	r1, #4
   1dbf8:	bl	270b0 <flatcc_builder_start_vector@@Base>
   1dbfc:	cmp	r0, #0
   1dc00:	bne	20ffc <_start@@Base+0xc31c>
   1dc04:	add	r3, sp, #328	; 0x148
   1dc08:	mov	r1, r4
   1dc0c:	mov	r2, r8
   1dc10:	mov	r0, r9
   1dc14:	bl	1ad34 <_start@@Base+0x6054>
   1dc18:	ldr	r3, [sp, #328]	; 0x148
   1dc1c:	mov	fp, r0
   1dc20:	cmp	r3, #0
   1dc24:	beq	1dc70 <_start@@Base+0x8f90>
   1dc28:	mov	r1, #1
   1dc2c:	ldr	r0, [r9]
   1dc30:	bl	2640c <flatcc_builder_extend_vector@@Base>
   1dc34:	subs	r3, r0, #0
   1dc38:	mov	r1, fp
   1dc3c:	mov	r2, r8
   1dc40:	mov	r0, r9
   1dc44:	beq	1ccf0 <_start@@Base+0x8010>
   1dc48:	bl	1aedc <_start@@Base+0x61fc>
   1dc4c:	mov	r1, r0
   1dc50:	add	r3, sp, #328	; 0x148
   1dc54:	mov	r2, r8
   1dc58:	mov	r0, r9
   1dc5c:	bl	194f8 <_start@@Base+0x4818>
   1dc60:	ldr	r3, [sp, #328]	; 0x148
   1dc64:	mov	fp, r0
   1dc68:	cmp	r3, #0
   1dc6c:	bne	1dc28 <_start@@Base+0x8f48>
   1dc70:	ldr	r0, [r9]
   1dc74:	bl	284e4 <flatcc_builder_end_vector@@Base>
   1dc78:	cmp	r0, #0
   1dc7c:	str	r0, [sp, #332]	; 0x14c
   1dc80:	beq	1ccf0 <_start@@Base+0x8010>
   1dc84:	mov	r1, #9
   1dc88:	ldr	r0, [r9]
   1dc8c:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   1dc90:	cmp	r0, #0
   1dc94:	beq	1ccf0 <_start@@Base+0x8010>
   1dc98:	ldr	r3, [sp, #332]	; 0x14c
   1dc9c:	str	r3, [r0]
   1dca0:	b	1d560 <_start@@Base+0x8880>
   1dca4:	nop	{0}
   1dca8:	cdpvs	15, 7, cr5, cr4, cr14, {3}
   1dcac:	rsbvc	r7, r1, r5, ror #4
   1dcb0:	andeq	r0, r0, r0
   1dcb4:	rsbvc	r7, pc, r0, lsl #6
	...
   1dcc0:	mrcvs	15, 3, r6, cr4, cr1, {3}
   1dcc4:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1dcc8:	ldrbtvc	r6, [r2], #-2414	; 0xfffff692
   1dccc:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1dcd0:	cmnvs	r2, r5, ror #24
   1dcd4:	stmdbvc	pc!, {r2, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1dcd8:	andeq	r0, r0, r0
   1dcdc:	add	fp, fp, #8
   1dce0:	mov	r1, r8
   1dce4:	mov	r0, fp
   1dce8:	bl	14dd0 <_start@@Base+0xf0>
   1dcec:	add	r3, pc, #1004	; 0x3ec
   1dcf0:	ldrd	r2, [r3]
   1dcf4:	cmp	r1, r3
   1dcf8:	cmpeq	r0, r2
   1dcfc:	bhi	1e378 <_start@@Base+0x9698>
   1dd00:	add	r3, pc, #992	; 0x3e0
   1dd04:	ldrd	r2, [r3]
   1dd08:	cmp	r1, r3
   1dd0c:	cmpeq	r0, r2
   1dd10:	bne	1f678 <_start@@Base+0xa998>
   1dd14:	sub	r3, r8, fp
   1dd18:	cmp	r3, #8
   1dd1c:	ble	1fbb8 <_start@@Base+0xaed8>
   1dd20:	mov	r2, r8
   1dd24:	mov	r1, fp
   1dd28:	mov	r0, r9
   1dd2c:	bl	1b694 <_start@@Base+0x69b4>
   1dd30:	cmp	fp, r0
   1dd34:	mov	r4, r0
   1dd38:	beq	1fbb8 <_start@@Base+0xaed8>
   1dd3c:	mov	ip, #0
   1dd40:	mov	r1, r0
   1dd44:	add	r3, sp, #360	; 0x168
   1dd48:	mov	r2, r8
   1dd4c:	mov	r0, r9
   1dd50:	str	ip, [sp, #360]	; 0x168
   1dd54:	bl	17f20 <_start@@Base+0x3240>
   1dd58:	cmp	r0, r4
   1dd5c:	mov	fp, r0
   1dd60:	beq	20e2c <_start@@Base+0xc14c>
   1dd64:	ldr	r3, [sp, #360]	; 0x168
   1dd68:	cmp	r3, #0
   1dd6c:	bne	1dd7c <_start@@Base+0x909c>
   1dd70:	ldr	r3, [r9, #8]
   1dd74:	tst	r3, #2
   1dd78:	beq	1d560 <_start@@Base+0x8880>
   1dd7c:	mov	r3, #4
   1dd80:	mov	r1, #16
   1dd84:	ldr	r0, [r9]
   1dd88:	mov	r2, r3
   1dd8c:	bl	29bc0 <flatcc_builder_table_add@@Base>
   1dd90:	cmp	r0, #0
   1dd94:	beq	1ccf0 <_start@@Base+0x8010>
   1dd98:	ldr	r3, [sp, #360]	; 0x168
   1dd9c:	str	r3, [r0]
   1dda0:	b	1d560 <_start@@Base+0x8880>
   1dda4:	lsr	r3, r0, #16
   1dda8:	str	r3, [sp, #80]	; 0x50
   1ddac:	ldr	r1, [sp, #80]	; 0x50
   1ddb0:	str	r5, [sp, #84]	; 0x54
   1ddb4:	add	r3, pc, #820	; 0x334
   1ddb8:	ldrd	r2, [r3]
   1ddbc:	lsl	r1, r1, #16
   1ddc0:	str	r1, [sp, #80]	; 0x50
   1ddc4:	sub	r1, r8, fp
   1ddc8:	ldrd	r4, [sp, #80]	; 0x50
   1ddcc:	cmp	r5, r3
   1ddd0:	cmpeq	r4, r2
   1ddd4:	beq	1e884 <_start@@Base+0x9ba4>
   1ddd8:	cmp	r1, #5
   1dddc:	ble	2031c <_start@@Base+0xb63c>
   1dde0:	mov	r2, r8
   1dde4:	mov	r1, fp
   1dde8:	mov	r0, r9
   1ddec:	bl	1b51c <_start@@Base+0x683c>
   1ddf0:	cmp	fp, r0
   1ddf4:	mov	r4, r0
   1ddf8:	beq	2031c <_start@@Base+0xb63c>
   1ddfc:	mov	ip, #0
   1de00:	mov	r1, r0
   1de04:	mov	r2, r8
   1de08:	add	r3, sp, #360	; 0x168
   1de0c:	mov	r0, r9
   1de10:	str	ip, [sp, #360]	; 0x168
   1de14:	bl	2ef68 <flatcc_json_parser_float@@Base>
   1de18:	cmp	r0, r4
   1de1c:	mov	fp, r0
   1de20:	beq	2076c <_start@@Base+0xba8c>
   1de24:	vldr	s15, [pc, #756]	; 1e120 <_start@@Base+0x9440>
   1de28:	vldr	s14, [sp, #360]	; 0x168
   1de2c:	vcmp.f32	s14, s15
   1de30:	vmrs	APSR_nzcv, fpscr
   1de34:	bne	1de44 <_start@@Base+0x9164>
   1de38:	ldr	r3, [r9, #8]
   1de3c:	tst	r3, #2
   1de40:	beq	1d560 <_start@@Base+0x8880>
   1de44:	mov	r3, #4
   1de48:	mov	r1, #25
   1de4c:	ldr	r0, [r9]
   1de50:	mov	r2, r3
   1de54:	bl	29bc0 <flatcc_builder_table_add@@Base>
   1de58:	cmp	r0, #0
   1de5c:	beq	1ccf0 <_start@@Base+0x8010>
   1de60:	ldr	r3, [sp, #360]	; 0x168
   1de64:	str	r3, [r0]
   1de68:	b	1d560 <_start@@Base+0x8880>
   1de6c:	add	r3, pc, #644	; 0x284
   1de70:	ldrd	r2, [r3]
   1de74:	cmp	r1, r3
   1de78:	cmpeq	r0, r2
   1de7c:	bne	1e6cc <_start@@Base+0x99ec>
   1de80:	add	r4, fp, #8
   1de84:	mov	r1, r8
   1de88:	mov	r0, r4
   1de8c:	bl	14dd0 <_start@@Base+0xf0>
   1de90:	add	r3, pc, #616	; 0x268
   1de94:	ldrd	r2, [r3]
   1de98:	cmp	r1, r3
   1de9c:	cmpeq	r0, r2
   1dea0:	beq	2038c <_start@@Base+0xb6ac>
   1dea4:	bic	ip, r0, #255	; 0xff
   1dea8:	add	r3, pc, #600	; 0x258
   1deac:	ldrd	r2, [r3]
   1deb0:	str	ip, [sp, #224]	; 0xe0
   1deb4:	str	r1, [sp, #228]	; 0xe4
   1deb8:	ldrd	r0, [sp, #224]	; 0xe0
   1debc:	cmp	r1, r3
   1dec0:	cmpeq	r0, r2
   1dec4:	bne	1f9fc <_start@@Base+0xad1c>
   1dec8:	sub	r3, r8, r4
   1decc:	cmp	r3, #7
   1ded0:	ble	2067c <_start@@Base+0xb99c>
   1ded4:	mov	r2, r8
   1ded8:	mov	r1, r4
   1dedc:	mov	r0, r9
   1dee0:	bl	1b8c8 <_start@@Base+0x6be8>
   1dee4:	cmp	r4, r0
   1dee8:	mov	fp, r0
   1deec:	beq	20678 <_start@@Base+0xb998>
   1def0:	mov	r2, #8
   1def4:	mvn	r3, #-536870912	; 0xe0000000
   1def8:	ldr	r0, [r9]
   1defc:	mov	r1, r2
   1df00:	bl	270b0 <flatcc_builder_start_vector@@Base>
   1df04:	cmp	r0, #0
   1df08:	bne	1ccf0 <_start@@Base+0x8010>
   1df0c:	mov	r1, fp
   1df10:	add	r3, sp, #328	; 0x148
   1df14:	mov	r2, r8
   1df18:	mov	r0, r9
   1df1c:	bl	1ad34 <_start@@Base+0x6054>
   1df20:	ldr	r3, [sp, #328]	; 0x148
   1df24:	mov	fp, r0
   1df28:	cmp	r3, #0
   1df2c:	bne	1df64 <_start@@Base+0x9284>
   1df30:	b	20d48 <_start@@Base+0xc068>
   1df34:	add	r3, sp, #360	; 0x168
   1df38:	mov	r1, r4
   1df3c:	ldrd	sl, [r3]
   1df40:	mov	r2, r8
   1df44:	add	r3, sp, #328	; 0x148
   1df48:	mov	r0, r9
   1df4c:	strd	sl, [r5]
   1df50:	bl	194f8 <_start@@Base+0x4818>
   1df54:	ldr	r3, [sp, #328]	; 0x148
   1df58:	mov	fp, r0
   1df5c:	cmp	r3, #0
   1df60:	beq	20d48 <_start@@Base+0xc068>
   1df64:	mov	r2, #0
   1df68:	mov	r3, #0
   1df6c:	ldr	r0, [r9]
   1df70:	add	ip, sp, #360	; 0x168
   1df74:	mov	r1, #1
   1df78:	strd	r2, [ip]
   1df7c:	bl	2640c <flatcc_builder_extend_vector@@Base>
   1df80:	subs	r5, r0, #0
   1df84:	mov	r1, fp
   1df88:	add	r3, sp, #360	; 0x168
   1df8c:	mov	r2, r8
   1df90:	mov	r0, r9
   1df94:	beq	1ccf0 <_start@@Base+0x8010>
   1df98:	bl	17644 <_start@@Base+0x2964>
   1df9c:	cmp	fp, r0
   1dfa0:	mov	r4, r0
   1dfa4:	bne	1df34 <_start@@Base+0x9254>
   1dfa8:	add	r1, sp, #360	; 0x168
   1dfac:	ldr	r3, [pc, #368]	; 1e124 <_start@@Base+0x9444>
   1dfb0:	mov	r2, r8
   1dfb4:	mov	r0, r9
   1dfb8:	str	r1, [sp]
   1dfbc:	mov	r1, r4
   1dfc0:	bl	1ab44 <_start@@Base+0x5e64>
   1dfc4:	cmp	r8, r0
   1dfc8:	cmpne	r4, r0
   1dfcc:	mov	fp, r0
   1dfd0:	mov	r4, r0
   1dfd4:	bne	1df34 <_start@@Base+0x9254>
   1dfd8:	b	1ccf0 <_start@@Base+0x8010>
   1dfdc:	add	r3, pc, #300	; 0x12c
   1dfe0:	ldrd	r2, [r3]
   1dfe4:	cmp	r1, r3
   1dfe8:	cmpeq	r0, r2
   1dfec:	beq	1f448 <_start@@Base+0xa768>
   1dff0:	ldr	r1, [sp, #20]
   1dff4:	mov	r4, #0
   1dff8:	str	r4, [sp, #184]	; 0xb8
   1dffc:	add	r3, pc, #276	; 0x114
   1e000:	ldrd	r2, [r3]
   1e004:	str	r1, [sp, #188]	; 0xbc
   1e008:	ldrd	r0, [sp, #184]	; 0xb8
   1e00c:	cmp	r1, r3
   1e010:	cmpeq	r0, r2
   1e014:	bne	2029c <_start@@Base+0xb5bc>
   1e018:	sub	r3, r8, fp
   1e01c:	cmp	r3, #4
   1e020:	ble	1fd38 <_start@@Base+0xb058>
   1e024:	mov	r2, r8
   1e028:	mov	r1, fp
   1e02c:	mov	r0, r9
   1e030:	bl	1b750 <_start@@Base+0x6a70>
   1e034:	cmp	fp, r0
   1e038:	mov	r5, r0
   1e03c:	beq	1fd38 <_start@@Base+0xb058>
   1e040:	add	sl, sp, #360	; 0x168
   1e044:	mov	r1, r0
   1e048:	mov	r2, r8
   1e04c:	mov	r3, sl
   1e050:	mov	r0, r9
   1e054:	strh	r4, [sl]
   1e058:	bl	18004 <_start@@Base+0x3324>
   1e05c:	cmp	r0, r5
   1e060:	mov	fp, r0
   1e064:	beq	20d7c <_start@@Base+0xc09c>
   1e068:	add	r3, sp, #360	; 0x168
   1e06c:	ldrsh	r3, [r3]
   1e070:	cmp	r3, #150	; 0x96
   1e074:	bne	1e084 <_start@@Base+0x93a4>
   1e078:	ldr	r3, [r9, #8]
   1e07c:	tst	r3, #2
   1e080:	beq	1d560 <_start@@Base+0x8880>
   1e084:	mov	r3, #2
   1e088:	mov	r1, #1
   1e08c:	ldr	r0, [r9]
   1e090:	mov	r2, r3
   1e094:	bl	29bc0 <flatcc_builder_table_add@@Base>
   1e098:	cmp	r0, #0
   1e09c:	beq	1ccf0 <_start@@Base+0x8010>
   1e0a0:	add	r3, sp, #360	; 0x168
   1e0a4:	ldrsh	r3, [r3]
   1e0a8:	strh	r3, [r0]
   1e0ac:	b	1d560 <_start@@Base+0x8880>
   1e0b0:	mov	r1, fp
   1e0b4:	mov	r2, r8
   1e0b8:	mov	r0, r9
   1e0bc:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1e0c0:	mov	fp, r0
   1e0c4:	b	1d560 <_start@@Base+0x8880>
   1e0c8:	mov	r1, fp
   1e0cc:	mov	r2, r8
   1e0d0:	mov	r0, r9
   1e0d4:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1e0d8:	mov	fp, r0
   1e0dc:	b	1d560 <_start@@Base+0x8880>
   1e0e0:			; <UNDEFINED> instruction: 0x666e7630
   1e0e4:	teqvc	r6, #1593835520	; 0x5f000000
   1e0e8:			; <UNDEFINED> instruction: 0x666e7631
   1e0ec:	teqvc	r3, #-268435451	; 0xf0000005
   1e0f0:	ldrtvs	r0, [r2], -r0
   1e0f4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1e0f8:	svcvs	0x00725f6f
   1e0fc:			; <UNDEFINED> instruction: 0x76656374
   1e100:	strbvc	r6, [r2, #-3173]!	; 0xfffff39b
   1e104:	ldrbvs	r6, [pc], -pc, ror #8
   1e108:	cdpvs	3, 6, cr7, cr7, cr0, {0}
   1e10c:	ldrbvs	r6, [pc], -pc, ror #24
   1e110:	mrcvs	15, 3, r6, cr4, cr2, {3}
   1e114:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1e118:	andeq	r0, r0, r0
   1e11c:	stclvs	14, cr6, [r1, #-388]!	; 0xfffffe7c
   1e120:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   1e124:	andeq	r8, r5, r0, ror r2
   1e128:	mov	r1, fp
   1e12c:	mov	r2, r8
   1e130:	mov	r0, r9
   1e134:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1e138:	mov	fp, r0
   1e13c:	b	1d560 <_start@@Base+0x8880>
   1e140:	add	r3, pc, #768	; 0x300
   1e144:	ldrd	r2, [r3]
   1e148:	cmp	r1, r3
   1e14c:	cmpeq	r0, r2
   1e150:	bne	1f378 <_start@@Base+0xa698>
   1e154:	add	r4, fp, #16
   1e158:	mov	r1, r8
   1e15c:	mov	r0, r4
   1e160:	bl	14dd0 <_start@@Base+0xf0>
   1e164:	bic	r0, r0, #255	; 0xff
   1e168:	add	r3, pc, #736	; 0x2e0
   1e16c:	ldrd	r2, [r3]
   1e170:	strd	r0, [sp, #208]	; 0xd0
   1e174:	ldrd	r0, [sp, #208]	; 0xd0
   1e178:	cmp	r1, r3
   1e17c:	cmpeq	r0, r2
   1e180:	bne	1f6f0 <_start@@Base+0xaa10>
   1e184:	sub	r3, r8, r4
   1e188:	cmp	r3, #7
   1e18c:	ble	205d4 <_start@@Base+0xb8f4>
   1e190:	mov	r2, r8
   1e194:	mov	r1, r4
   1e198:	mov	r0, r9
   1e19c:	bl	1b8c8 <_start@@Base+0x6be8>
   1e1a0:	cmp	r4, r0
   1e1a4:	mov	fp, r0
   1e1a8:	beq	205d0 <_start@@Base+0xb8f0>
   1e1ac:	mvn	r3, #-536870912	; 0xe0000000
   1e1b0:	mov	r2, #4
   1e1b4:	ldr	r0, [r9]
   1e1b8:	mov	r1, #8
   1e1bc:	bl	270b0 <flatcc_builder_start_vector@@Base>
   1e1c0:	cmp	r0, #0
   1e1c4:	bne	1ccf0 <_start@@Base+0x8010>
   1e1c8:	mov	r1, fp
   1e1cc:	add	r3, sp, #328	; 0x148
   1e1d0:	mov	r2, r8
   1e1d4:	mov	r0, r9
   1e1d8:	bl	1ad34 <_start@@Base+0x6054>
   1e1dc:	ldr	r3, [sp, #328]	; 0x148
   1e1e0:	mov	fp, r0
   1e1e4:	cmp	r3, #0
   1e1e8:	beq	1ffbc <_start@@Base+0xb2dc>
   1e1ec:	add	r3, sp, #304	; 0x130
   1e1f0:	strd	r6, [r3]
   1e1f4:	mov	r1, #1
   1e1f8:	ldr	r0, [r9]
   1e1fc:	bl	2640c <flatcc_builder_extend_vector@@Base>
   1e200:	subs	r3, r0, #0
   1e204:	str	r3, [sp, #56]	; 0x38
   1e208:	beq	1ccf0 <_start@@Base+0x8010>
   1e20c:	add	sl, sp, #352	; 0x160
   1e210:	mov	r2, r8
   1e214:	mov	r1, fp
   1e218:	mov	r3, sl
   1e21c:	mov	r0, r9
   1e220:	bl	1ae08 <_start@@Base+0x6128>
   1e224:	ldr	r2, [sp, #352]	; 0x160
   1e228:	mov	r7, r0
   1e22c:	cmp	r2, #0
   1e230:	beq	1ff90 <_start@@Base+0xb2b0>
   1e234:	mov	r5, #0
   1e238:	movt	r5, #65535	; 0xffff
   1e23c:	str	sl, [sp, #16]
   1e240:	b	1e2d4 <_start@@Base+0x95f4>
   1e244:	add	r3, pc, #524	; 0x20c
   1e248:	ldrd	r2, [r3]
   1e24c:	cmp	r1, r3
   1e250:	cmpeq	r0, r2
   1e254:	bne	1fd88 <_start@@Base+0xb0a8>
   1e258:	sub	r3, r8, r7
   1e25c:	cmp	r3, #8
   1e260:	ble	1fd88 <_start@@Base+0xb0a8>
   1e264:	mov	r2, r8
   1e268:	mov	r1, r7
   1e26c:	mov	r0, r9
   1e270:	bl	1b694 <_start@@Base+0x69b4>
   1e274:	cmp	r7, r0
   1e278:	mov	r6, r0
   1e27c:	beq	1fd88 <_start@@Base+0xb0a8>
   1e280:	mov	r1, r0
   1e284:	mov	r2, r8
   1e288:	str	r4, [sp, #360]	; 0x168
   1e28c:	add	r3, sp, #360	; 0x168
   1e290:	mov	r0, r9
   1e294:	bl	17d90 <_start@@Base+0x30b0>
   1e298:	cmp	r6, r0
   1e29c:	mov	r4, r0
   1e2a0:	beq	1ff44 <_start@@Base+0xb264>
   1e2a4:	ldr	r2, [sp, #56]	; 0x38
   1e2a8:	ldr	r3, [sp, #360]	; 0x168
   1e2ac:	str	r3, [r2, #4]
   1e2b0:	mov	r1, r4
   1e2b4:	mov	r2, r8
   1e2b8:	ldr	r3, [sp, #16]
   1e2bc:	mov	r0, r9
   1e2c0:	bl	193b0 <_start@@Base+0x46d0>
   1e2c4:	ldr	r3, [sp, #352]	; 0x160
   1e2c8:	mov	r7, r0
   1e2cc:	cmp	r3, #0
   1e2d0:	beq	1fff0 <_start@@Base+0xb310>
   1e2d4:	cmp	r8, r7
   1e2d8:	beq	1e2ec <_start@@Base+0x960c>
   1e2dc:	ldrb	r3, [r7]
   1e2e0:	cmp	r3, #34	; 0x22
   1e2e4:	addeq	r7, r7, #1
   1e2e8:	bne	1fda0 <_start@@Base+0xb0c0>
   1e2ec:	mov	r1, r8
   1e2f0:	mov	r0, r7
   1e2f4:	bl	14dd0 <_start@@Base+0xf0>
   1e2f8:	and	fp, r1, r5
   1e2fc:	mov	r3, #0
   1e300:	movt	r3, #26980	; 0x6964
   1e304:	mov	r4, #0
   1e308:	mov	r2, #0
   1e30c:	cmp	fp, r3
   1e310:	cmpeq	r4, r2
   1e314:	mov	sl, r4
   1e318:	bne	1e244 <_start@@Base+0x9564>
   1e31c:	sub	r3, r8, r7
   1e320:	cmp	r3, #2
   1e324:	ble	1fd88 <_start@@Base+0xb0a8>
   1e328:	mov	r2, r8
   1e32c:	mov	r1, r7
   1e330:	mov	r0, r9
   1e334:	bl	1c17c <_start@@Base+0x749c>
   1e338:	cmp	r7, r0
   1e33c:	mov	r6, r0
   1e340:	beq	1fd88 <_start@@Base+0xb0a8>
   1e344:	mov	r1, r0
   1e348:	mov	r2, r8
   1e34c:	str	r4, [sp, #360]	; 0x168
   1e350:	add	r3, sp, #360	; 0x168
   1e354:	mov	r0, r9
   1e358:	bl	17d90 <_start@@Base+0x30b0>
   1e35c:	cmp	r6, r0
   1e360:	mov	r4, r0
   1e364:	beq	1ff14 <_start@@Base+0xb234>
   1e368:	ldr	r2, [sp, #56]	; 0x38
   1e36c:	ldr	r3, [sp, #360]	; 0x168
   1e370:	str	r3, [r2]
   1e374:	b	1e2b0 <_start@@Base+0x95d0>
   1e378:	add	r3, pc, #224	; 0xe0
   1e37c:	ldrd	r2, [r3]
   1e380:	cmp	r1, r3
   1e384:	cmpeq	r0, r2
   1e388:	bhi	1f598 <_start@@Base+0xa8b8>
   1e38c:	add	r3, pc, #212	; 0xd4
   1e390:	ldrd	r2, [r3]
   1e394:	cmp	r1, r3
   1e398:	cmpeq	r0, r2
   1e39c:	bne	1fa44 <_start@@Base+0xad64>
   1e3a0:	sub	r3, r8, fp
   1e3a4:	cmp	r3, #8
   1e3a8:	ble	208ec <_start@@Base+0xbc0c>
   1e3ac:	mov	r1, fp
   1e3b0:	mov	r2, r8
   1e3b4:	mov	r0, r9
   1e3b8:	bl	1b694 <_start@@Base+0x69b4>
   1e3bc:	cmp	fp, r0
   1e3c0:	mov	r1, r0
   1e3c4:	str	r0, [sp, #16]
   1e3c8:	beq	208ec <_start@@Base+0xbc0c>
   1e3cc:	add	sl, sp, #360	; 0x168
   1e3d0:	mov	r4, #0
   1e3d4:	mov	r5, #0
   1e3d8:	mov	r3, sl
   1e3dc:	mov	r2, r8
   1e3e0:	mov	r0, r9
   1e3e4:	strd	r4, [sl]
   1e3e8:	bl	17644 <_start@@Base+0x2964>
   1e3ec:	ldr	r1, [sp, #16]
   1e3f0:	mov	fp, r0
   1e3f4:	cmp	r0, r1
   1e3f8:	beq	20f84 <_start@@Base+0xc2a4>
   1e3fc:	add	r3, sp, #360	; 0x168
   1e400:	ldrd	r2, [r3]
   1e404:	orrs	r3, r2, r3
   1e408:	bne	1e418 <_start@@Base+0x9738>
   1e40c:	ldr	r3, [r9, #8]
   1e410:	tst	r3, #2
   1e414:	beq	1d560 <_start@@Base+0x8880>
   1e418:	mov	r3, #8
   1e41c:	mov	r1, #18
   1e420:	ldr	r0, [r9]
   1e424:	mov	r2, r3
   1e428:	bl	29bc0 <flatcc_builder_table_add@@Base>
   1e42c:	cmp	r0, #0
   1e430:	beq	1ccf0 <_start@@Base+0x8010>
   1e434:	add	r3, sp, #360	; 0x168
   1e438:	ldrd	r2, [r3]
   1e43c:	strd	r2, [r0]
   1e440:	b	1d560 <_start@@Base+0x8880>
   1e444:	nop	{0}
   1e448:	svcvs	0x00727465
   1e44c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1e450:	strbvc	r7, [r3, #-1024]!	; 0xfffffc00
   1e454:	ldrbtvs	r7, [r3], #-1138	; 0xfffffb8e
   1e458:	cmnvs	lr, r5, ror #6
   1e45c:	strbtvs	r7, [r9], #-884	; 0xfffffc8c
   1e460:			; <UNDEFINED> instruction: 0x666e7630
   1e464:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1e468:			; <UNDEFINED> instruction: 0x666e7631
   1e46c:	teqvc	r6, #1593835520	; 0x5f000000
   1e470:	movwcc	r0, #0
   1e474:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1e478:	rscscc	pc, pc, #1020	; 0x3fc
   1e47c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1e480:	mrscc	r0, (UNDEF: 0)
   1e484:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1e488:	ldrb	sl, [r4, #7]
   1e48c:	mov	fp, #0
   1e490:	mov	r3, fp
   1e494:	ldrb	r0, [r4, #6]
   1e498:	orr	r2, sl, r0, lsl #8
   1e49c:	ldrb	r0, [r4, #5]
   1e4a0:	orr	r2, r2, r0, lsl #16
   1e4a4:	ldrb	r0, [r4, #4]
   1e4a8:	orr	r2, r2, r0, lsl #24
   1e4ac:	ldrb	r0, [r4, #3]
   1e4b0:	orr	r0, r3, r0
   1e4b4:	ldrb	sl, [r4, #2]
   1e4b8:	orr	sl, r0, sl, lsl #8
   1e4bc:	ldrb	r0, [r4, #1]
   1e4c0:	mov	r6, r2
   1e4c4:	ldrb	r2, [r4]
   1e4c8:	orr	sl, sl, r0, lsl #16
   1e4cc:	orr	r7, sl, r2, lsl #24
   1e4d0:	sub	r3, pc, #96	; 0x60
   1e4d4:	ldrd	r2, [r3]
   1e4d8:	cmp	r7, r3
   1e4dc:	cmpeq	r6, r2
   1e4e0:	bls	1e9b0 <_start@@Base+0x9cd0>
   1e4e4:	mvn	r3, #-2013265920	; 0x88000000
   1e4e8:	mvn	r2, #0
   1e4ec:	cmp	r7, r3
   1e4f0:	cmpeq	r6, r2
   1e4f4:	bhi	1eacc <_start@@Base+0x9dec>
   1e4f8:	and	r3, r6, #-16777216	; 0xff000000
   1e4fc:	sub	r1, pc, #148	; 0x94
   1e500:	ldrd	r0, [r1]
   1e504:	str	r3, [sp, #32]
   1e508:	str	r7, [sp, #36]	; 0x24
   1e50c:	ldrd	r2, [sp, #32]
   1e510:	cmp	r3, r1
   1e514:	cmpeq	r2, r0
   1e518:	bne	1e66c <_start@@Base+0x998c>
   1e51c:	cmp	ip, #5
   1e520:	ble	1e66c <_start@@Base+0x998c>
   1e524:	mov	r1, r4
   1e528:	mov	r2, r8
   1e52c:	mov	r0, r9
   1e530:	bl	1b51c <_start@@Base+0x683c>
   1e534:	cmp	r4, r0
   1e538:	mov	r1, r0
   1e53c:	beq	1e66c <_start@@Base+0x998c>
   1e540:	ldr	r3, [sp, #16]
   1e544:	mov	r2, r8
   1e548:	mov	r0, r9
   1e54c:	add	r3, r3, #26
   1e550:	bl	1aedc <_start@@Base+0x61fc>
   1e554:	mov	fp, r0
   1e558:	sub	r3, r8, fp
   1e55c:	cmp	r3, #1
   1e560:	ble	1e574 <_start@@Base+0x9894>
   1e564:	ldrb	r3, [fp]
   1e568:	cmp	r3, #32
   1e56c:	bhi	1e588 <_start@@Base+0x98a8>
   1e570:	beq	1eb70 <_start@@Base+0x9e90>
   1e574:	mov	r1, fp
   1e578:	mov	r2, r8
   1e57c:	mov	r0, r9
   1e580:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1e584:	mov	fp, r0
   1e588:	cmp	r8, fp
   1e58c:	beq	1d560 <_start@@Base+0x8880>
   1e590:	ldrb	r3, [fp]
   1e594:	cmp	r3, #44	; 0x2c
   1e598:	beq	1eb84 <_start@@Base+0x9ea4>
   1e59c:	mov	r3, #0
   1e5a0:	str	r3, [sp, #348]	; 0x15c
   1e5a4:	ldrb	r3, [fp]
   1e5a8:	cmp	r3, #125	; 0x7d
   1e5ac:	beq	1eb38 <_start@@Base+0x9e58>
   1e5b0:	mov	r3, #10
   1e5b4:	mov	r1, fp
   1e5b8:	mov	r2, r8
   1e5bc:	mov	r0, r9
   1e5c0:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1e5c4:	ldr	r3, [sp, #348]	; 0x15c
   1e5c8:	mov	r4, r0
   1e5cc:	cmp	r3, #0
   1e5d0:	bne	1d978 <_start@@Base+0x8c98>
   1e5d4:	mov	fp, r4
   1e5d8:	b	1d560 <_start@@Base+0x8880>
   1e5dc:	mov	sl, #0
   1e5e0:	mov	fp, #0
   1e5e4:	b	1e490 <_start@@Base+0x97b0>
   1e5e8:	mov	r2, #0
   1e5ec:	mov	r3, r2
   1e5f0:	b	1e49c <_start@@Base+0x97bc>
   1e5f4:	mov	r2, #0
   1e5f8:	mov	r0, r2
   1e5fc:	b	1e4b4 <_start@@Base+0x97d4>
   1e600:	mov	r2, #0
   1e604:	mov	sl, r2
   1e608:	b	1e4bc <_start@@Base+0x97dc>
   1e60c:	mov	r2, #0
   1e610:	mov	r3, r2
   1e614:	b	1e4a4 <_start@@Base+0x97c4>
   1e618:	mov	r2, #0
   1e61c:	mov	r3, r2
   1e620:	b	1e4ac <_start@@Base+0x97cc>
   1e624:	ldrb	r2, [r4]
   1e628:	mov	r6, #0
   1e62c:	lsl	r7, r2, #24
   1e630:	sub	r3, pc, #448	; 0x1c0
   1e634:	ldrd	r2, [r3]
   1e638:	cmp	r7, r3
   1e63c:	cmpeq	r6, r2
   1e640:	bhi	1e4e4 <_start@@Base+0x9804>
   1e644:	sub	r3, pc, #460	; 0x1cc
   1e648:	ldrd	r2, [r3]
   1e64c:	cmp	r7, r3
   1e650:	cmpeq	r6, r2
   1e654:	bne	1e66c <_start@@Base+0x998c>
   1e658:	cmp	ip, #5
   1e65c:	ble	1e66c <_start@@Base+0x998c>
   1e660:	ldrb	r3, [r4, #5]
   1e664:	cmp	r3, #34	; 0x22
   1e668:	beq	1f0f8 <_start@@Base+0xa418>
   1e66c:	mov	r1, r4
   1e670:	mov	r2, r8
   1e674:	mov	r0, r9
   1e678:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1e67c:	mov	fp, r0
   1e680:	b	1e558 <_start@@Base+0x9878>
   1e684:	mov	r1, fp
   1e688:	mov	r2, r8
   1e68c:	mov	r0, r9
   1e690:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1e694:	mov	fp, r0
   1e698:	b	1d560 <_start@@Base+0x8880>
   1e69c:	mov	r1, fp
   1e6a0:	mov	r2, r8
   1e6a4:	mov	r0, r9
   1e6a8:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1e6ac:	mov	fp, r0
   1e6b0:	b	1d560 <_start@@Base+0x8880>
   1e6b4:	mov	r1, fp
   1e6b8:	mov	r2, r8
   1e6bc:	mov	r0, r9
   1e6c0:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1e6c4:	mov	fp, r0
   1e6c8:	b	1d560 <_start@@Base+0x8880>
   1e6cc:	mov	r1, fp
   1e6d0:	mov	r2, r8
   1e6d4:	mov	r0, r9
   1e6d8:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1e6dc:	mov	fp, r0
   1e6e0:	b	1d560 <_start@@Base+0x8880>
   1e6e4:	mov	r1, fp
   1e6e8:	mov	r2, r8
   1e6ec:	mov	r0, r9
   1e6f0:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1e6f4:	mov	fp, r0
   1e6f8:	b	1d560 <_start@@Base+0x8880>
   1e6fc:	add	r4, fp, #16
   1e700:	mov	r1, r8
   1e704:	mov	r0, r4
   1e708:	bl	14dd0 <_start@@Base+0xf0>
   1e70c:	lsr	ip, r1, #16
   1e710:	mov	r0, #0
   1e714:	mov	r3, #0
   1e718:	movt	r3, #26418	; 0x6732
   1e71c:	mov	r2, #0
   1e720:	lsl	ip, ip, #16
   1e724:	str	r0, [sp, #168]	; 0xa8
   1e728:	str	ip, [sp, #172]	; 0xac
   1e72c:	ldrd	sl, [sp, #168]	; 0xa8
   1e730:	cmp	fp, r3
   1e734:	cmpeq	sl, r2
   1e738:	beq	1fa74 <_start@@Base+0xad94>
   1e73c:	and	r3, r1, #-16777216	; 0xff000000
   1e740:	str	r0, [sp, #264]	; 0x108
   1e744:	str	r3, [sp, #268]	; 0x10c
   1e748:	add	r3, sp, #264	; 0x108
   1e74c:	ldrd	r2, [r3]
   1e750:	cmp	r3, #1728053248	; 0x67000000
   1e754:	cmpeq	r2, #0
   1e758:	bne	205b8 <_start@@Base+0xb8d8>
   1e75c:	sub	r3, r8, r4
   1e760:	cmp	r3, #1
   1e764:	ble	208d4 <_start@@Base+0xbbf4>
   1e768:	mov	r2, r8
   1e76c:	mov	r1, r4
   1e770:	mov	r0, r9
   1e774:	bl	1b80c <_start@@Base+0x6b2c>
   1e778:	cmp	r4, r0
   1e77c:	mov	fp, r0
   1e780:	beq	208d0 <_start@@Base+0xbbf0>
   1e784:	ldr	r0, [r9]
   1e788:	bl	27228 <flatcc_builder_start_offset_vector@@Base>
   1e78c:	cmp	r0, #0
   1e790:	bne	1ccf0 <_start@@Base+0x8010>
   1e794:	mov	r1, fp
   1e798:	add	r3, sp, #328	; 0x148
   1e79c:	mov	r2, r8
   1e7a0:	mov	r0, r9
   1e7a4:	bl	1ad34 <_start@@Base+0x6054>
   1e7a8:	ldr	r3, [sp, #328]	; 0x148
   1e7ac:	mov	fp, r0
   1e7b0:	cmp	r3, #0
   1e7b4:	beq	1e820 <_start@@Base+0x9b40>
   1e7b8:	add	r4, sp, #332	; 0x14c
   1e7bc:	mov	r1, fp
   1e7c0:	mov	r3, r4
   1e7c4:	mov	r2, r8
   1e7c8:	mov	r0, r9
   1e7cc:	bl	31d48 <flatcc_json_parser_build_string@@Base>
   1e7d0:	ldr	r3, [sp, #332]	; 0x14c
   1e7d4:	mov	fp, r0
   1e7d8:	mov	r1, #1
   1e7dc:	cmp	r3, #0
   1e7e0:	beq	1ccf0 <_start@@Base+0x8010>
   1e7e4:	ldr	r0, [r9]
   1e7e8:	bl	2677c <flatcc_builder_extend_offset_vector@@Base>
   1e7ec:	subs	ip, r0, #0
   1e7f0:	add	r3, sp, #328	; 0x148
   1e7f4:	mov	r2, r8
   1e7f8:	mov	r1, fp
   1e7fc:	mov	r0, r9
   1e800:	beq	1ccf0 <_start@@Base+0x8010>
   1e804:	ldr	lr, [sp, #332]	; 0x14c
   1e808:	str	lr, [ip]
   1e80c:	bl	194f8 <_start@@Base+0x4818>
   1e810:	ldr	r3, [sp, #328]	; 0x148
   1e814:	mov	fp, r0
   1e818:	cmp	r3, #0
   1e81c:	bne	1e7bc <_start@@Base+0x9adc>
   1e820:	ldr	r0, [r9]
   1e824:	bl	288a8 <flatcc_builder_end_offset_vector@@Base>
   1e828:	cmp	r0, #0
   1e82c:	str	r0, [sp, #332]	; 0x14c
   1e830:	beq	1ccf0 <_start@@Base+0x8010>
   1e834:	mov	r1, #10
   1e838:	ldr	r0, [r9]
   1e83c:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   1e840:	cmp	r0, #0
   1e844:	beq	1ccf0 <_start@@Base+0x8010>
   1e848:	ldr	r3, [sp, #332]	; 0x14c
   1e84c:	str	r3, [r0]
   1e850:	b	1d560 <_start@@Base+0x8880>
   1e854:	mov	r1, fp
   1e858:	mov	r2, r8
   1e85c:	mov	r0, r9
   1e860:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1e864:	mov	fp, r0
   1e868:	b	1d560 <_start@@Base+0x8880>
   1e86c:	mov	r1, fp
   1e870:	mov	r2, r8
   1e874:	mov	r0, r9
   1e878:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1e87c:	mov	fp, r0
   1e880:	b	1d560 <_start@@Base+0x8880>
   1e884:	cmp	r1, #6
   1e888:	ble	1fb88 <_start@@Base+0xaea8>
   1e88c:	mov	r2, r8
   1e890:	mov	r1, fp
   1e894:	mov	r0, r9
   1e898:	bl	1b5d8 <_start@@Base+0x68f8>
   1e89c:	cmp	fp, r0
   1e8a0:	mov	r4, r0
   1e8a4:	beq	1fb88 <_start@@Base+0xaea8>
   1e8a8:	mov	ip, #0
   1e8ac:	mov	r1, r0
   1e8b0:	mov	r2, r8
   1e8b4:	add	r3, sp, #360	; 0x168
   1e8b8:	mov	r0, r9
   1e8bc:	str	ip, [sp, #360]	; 0x168
   1e8c0:	bl	2ef68 <flatcc_json_parser_float@@Base>
   1e8c4:	cmp	r0, r4
   1e8c8:	mov	fp, r0
   1e8cc:	beq	20b64 <_start@@Base+0xbe84>
   1e8d0:	vldr	s15, [pc, #968]	; 1eca0 <_start@@Base+0x9fc0>
   1e8d4:	vldr	s14, [sp, #360]	; 0x168
   1e8d8:	vcmp.f32	s14, s15
   1e8dc:	vmrs	APSR_nzcv, fpscr
   1e8e0:	bne	1e8f0 <_start@@Base+0x9c10>
   1e8e4:	ldr	r3, [r9, #8]
   1e8e8:	tst	r3, #2
   1e8ec:	beq	1d560 <_start@@Base+0x8880>
   1e8f0:	mov	r3, #4
   1e8f4:	mov	r1, #26
   1e8f8:	ldr	r0, [r9]
   1e8fc:	mov	r2, r3
   1e900:	bl	29bc0 <flatcc_builder_table_add@@Base>
   1e904:	cmp	r0, #0
   1e908:	beq	1ccf0 <_start@@Base+0x8010>
   1e90c:	ldr	r3, [sp, #360]	; 0x168
   1e910:	str	r3, [r0]
   1e914:	b	1d560 <_start@@Base+0x8880>
   1e918:	mov	r2, #0
   1e91c:	mov	r3, #0
   1e920:	mov	sl, #0
   1e924:	add	r1, sp, #360	; 0x168
   1e928:	cmp	r8, r4
   1e92c:	moveq	r5, r8
   1e930:	strd	r2, [r1]
   1e934:	str	sl, [sp, #352]	; 0x160
   1e938:	beq	1e968 <_start@@Base+0x9c88>
   1e93c:	add	r0, sp, #360	; 0x168
   1e940:	add	r3, sp, #352	; 0x160
   1e944:	mov	r2, r8
   1e948:	mov	r1, r4
   1e94c:	str	r0, [sp]
   1e950:	mov	r0, r9
   1e954:	bl	316c0 <flatcc_json_parser_integer@@Base>
   1e958:	cmp	r4, r0
   1e95c:	mov	r5, r0
   1e960:	strbeq	sl, [sp, #348]	; 0x15c
   1e964:	bne	2082c <_start@@Base+0xbb4c>
   1e968:	add	ip, sp, #348	; 0x15c
   1e96c:	ldr	r3, [pc, #816]	; 1eca4 <_start@@Base+0x9fc4>
   1e970:	mov	r2, r8
   1e974:	mov	r1, r5
   1e978:	mov	r0, r9
   1e97c:	str	ip, [sp]
   1e980:	bl	19640 <_start@@Base+0x4960>
   1e984:	cmp	r8, r0
   1e988:	cmpne	r0, r5
   1e98c:	mov	fp, r0
   1e990:	beq	1ccf0 <_start@@Base+0x8010>
   1e994:	ldrb	r3, [sp, #348]	; 0x15c
   1e998:	cmp	r3, #1
   1e99c:	bne	1cfd4 <_start@@Base+0x82f4>
   1e9a0:	ldr	r3, [r9, #8]
   1e9a4:	tst	r3, #2
   1e9a8:	beq	1d560 <_start@@Base+0x8880>
   1e9ac:	b	1cfd4 <_start@@Base+0x82f4>
   1e9b0:	and	r2, r6, #-16777216	; 0xff000000
   1e9b4:	mov	r6, r2
   1e9b8:	add	r3, pc, #728	; 0x2d8
   1e9bc:	ldrd	r2, [r3]
   1e9c0:	cmp	r7, r3
   1e9c4:	cmpeq	r6, r2
   1e9c8:	bne	1e644 <_start@@Base+0x9964>
   1e9cc:	cmp	ip, #5
   1e9d0:	ble	1e66c <_start@@Base+0x998c>
   1e9d4:	ldrb	r3, [r4, #5]
   1e9d8:	cmp	r3, #34	; 0x22
   1e9dc:	bne	1e66c <_start@@Base+0x998c>
   1e9e0:	mov	r2, r8
   1e9e4:	add	r1, r4, #6
   1e9e8:	mov	r0, r9
   1e9ec:	bl	16bf0 <_start@@Base+0x1f10>
   1e9f0:	cmp	r8, r0
   1e9f4:	beq	1ea04 <_start@@Base+0x9d24>
   1e9f8:	ldrb	r3, [r0]
   1e9fc:	cmp	r3, #58	; 0x3a
   1ea00:	beq	209f8 <_start@@Base+0xbd18>
   1ea04:	mov	r1, r0
   1ea08:	mov	r3, #4
   1ea0c:	mov	r2, r8
   1ea10:	mov	r0, r9
   1ea14:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1ea18:	mov	r5, r0
   1ea1c:	cmp	r4, r5
   1ea20:	beq	1e66c <_start@@Base+0x998c>
   1ea24:	mov	r3, #0
   1ea28:	mov	r0, #0
   1ea2c:	mov	r1, #0
   1ea30:	cmp	r8, r5
   1ea34:	strb	r3, [sp, #344]	; 0x158
   1ea38:	str	r3, [sp, #352]	; 0x160
   1ea3c:	add	r3, sp, #360	; 0x168
   1ea40:	strd	r0, [r3]
   1ea44:	beq	1f174 <_start@@Base+0xa494>
   1ea48:	mov	r0, r3
   1ea4c:	mov	r2, r8
   1ea50:	add	r3, sp, #352	; 0x160
   1ea54:	mov	r1, r5
   1ea58:	str	r0, [sp]
   1ea5c:	mov	r0, r9
   1ea60:	bl	316c0 <flatcc_json_parser_integer@@Base>
   1ea64:	cmp	r5, r0
   1ea68:	mov	fp, r0
   1ea6c:	bne	1f2e0 <_start@@Base+0xa600>
   1ea70:	add	ip, sp, #344	; 0x158
   1ea74:	ldr	r3, [pc, #556]	; 1eca8 <_start@@Base+0x9fc8>
   1ea78:	mov	r2, r8
   1ea7c:	mov	r1, fp
   1ea80:	mov	r0, r9
   1ea84:	str	ip, [sp]
   1ea88:	bl	1a3cc <_start@@Base+0x56ec>
   1ea8c:	cmp	r8, r0
   1ea90:	cmpne	r0, fp
   1ea94:	beq	20e94 <_start@@Base+0xc1b4>
   1ea98:	add	r3, sp, #344	; 0x158
   1ea9c:	mov	fp, r0
   1eaa0:	ldrsb	r2, [r3]
   1eaa4:	ldr	r3, [sp, #16]
   1eaa8:	strb	r2, [r3, #24]
   1eaac:	b	1e558 <_start@@Base+0x9878>
   1eab0:	mov	r1, r4
   1eab4:	mov	r3, #5
   1eab8:	mov	r2, r8
   1eabc:	mov	r0, r9
   1eac0:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1eac4:	mov	r4, r0
   1eac8:	b	1d990 <_start@@Base+0x8cb0>
   1eacc:	mvn	r3, #-2030043136	; 0x87000000
   1ead0:	mvn	r2, #0
   1ead4:	cmp	r7, r3
   1ead8:	cmpeq	r6, r2
   1eadc:	bhi	1ebf8 <_start@@Base+0x9f18>
   1eae0:	cmp	ip, #1
   1eae4:	ble	1e66c <_start@@Base+0x998c>
   1eae8:	mov	r2, r8
   1eaec:	mov	r1, r4
   1eaf0:	mov	r0, r9
   1eaf4:	bl	1b80c <_start@@Base+0x6b2c>
   1eaf8:	cmp	r4, r0
   1eafc:	mov	r5, r0
   1eb00:	beq	1e66c <_start@@Base+0x998c>
   1eb04:	mov	r1, r0
   1eb08:	mov	r2, r8
   1eb0c:	vstr	s16, [sp, #360]	; 0x168
   1eb10:	add	r3, sp, #360	; 0x168
   1eb14:	mov	r0, r9
   1eb18:	bl	2ef68 <flatcc_json_parser_float@@Base>
   1eb1c:	cmp	r5, r0
   1eb20:	mov	fp, r0
   1eb24:	beq	202b4 <_start@@Base+0xb5d4>
   1eb28:	ldr	r2, [sp, #16]
   1eb2c:	ldr	r3, [sp, #360]	; 0x168
   1eb30:	str	r3, [r2]
   1eb34:	b	1e558 <_start@@Base+0x9878>
   1eb38:	add	r1, fp, #1
   1eb3c:	sub	r3, r8, r1
   1eb40:	cmp	r3, #1
   1eb44:	ble	1eb58 <_start@@Base+0x9e78>
   1eb48:	ldrb	r3, [fp, #1]
   1eb4c:	cmp	r3, #32
   1eb50:	bhi	1eda4 <_start@@Base+0xa0c4>
   1eb54:	beq	1f0e4 <_start@@Base+0xa404>
   1eb58:	mov	r2, r8
   1eb5c:	mov	r0, r9
   1eb60:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1eb64:	mov	r4, r0
   1eb68:	ldr	r3, [sp, #348]	; 0x15c
   1eb6c:	b	1e5cc <_start@@Base+0x98ec>
   1eb70:	ldrb	r3, [fp, #1]
   1eb74:	cmp	r3, #32
   1eb78:	addhi	fp, fp, #1
   1eb7c:	bls	1e574 <_start@@Base+0x9894>
   1eb80:	b	1e588 <_start@@Base+0x98a8>
   1eb84:	add	r4, fp, #1
   1eb88:	sub	r3, r8, r4
   1eb8c:	cmp	r3, #1
   1eb90:	ble	1eba4 <_start@@Base+0x9ec4>
   1eb94:	ldrb	r3, [fp, #1]
   1eb98:	cmp	r3, #32
   1eb9c:	bhi	1ebb8 <_start@@Base+0x9ed8>
   1eba0:	beq	1f348 <_start@@Base+0xa668>
   1eba4:	mov	r1, r4
   1eba8:	mov	r2, r8
   1ebac:	mov	r0, r9
   1ebb0:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1ebb4:	mov	r4, r0
   1ebb8:	cmp	r8, r4
   1ebbc:	beq	1f420 <_start@@Base+0xa740>
   1ebc0:	ldrb	r3, [r4]
   1ebc4:	cmp	r3, #125	; 0x7d
   1ebc8:	movne	r3, #1
   1ebcc:	strne	r3, [sp, #348]	; 0x15c
   1ebd0:	bne	1d978 <_start@@Base+0x8c98>
   1ebd4:	mov	r3, #0
   1ebd8:	add	r1, r4, #1
   1ebdc:	mov	r2, r8
   1ebe0:	mov	r0, r9
   1ebe4:	str	r3, [sp, #348]	; 0x15c
   1ebe8:	bl	16bf0 <_start@@Base+0x1f10>
   1ebec:	mov	r4, r0
   1ebf0:	ldr	r3, [sp, #348]	; 0x15c
   1ebf4:	b	1e5cc <_start@@Base+0x98ec>
   1ebf8:	mov	r3, #0
   1ebfc:	str	r3, [sp, #64]	; 0x40
   1ec00:	and	r3, r7, #-16777216	; 0xff000000
   1ec04:	str	r3, [sp, #68]	; 0x44
   1ec08:	ldrd	r2, [sp, #64]	; 0x40
   1ec0c:	cmp	r3, #2046820352	; 0x7a000000
   1ec10:	cmpeq	r2, #0
   1ec14:	beq	1edac <_start@@Base+0xa0cc>
   1ec18:	cmp	r3, #2030043136	; 0x79000000
   1ec1c:	cmpeq	r2, #0
   1ec20:	bne	1e66c <_start@@Base+0x998c>
   1ec24:	cmp	ip, #1
   1ec28:	ble	1e66c <_start@@Base+0x998c>
   1ec2c:	mov	r2, r8
   1ec30:	mov	r1, r4
   1ec34:	mov	r0, r9
   1ec38:	bl	1b80c <_start@@Base+0x6b2c>
   1ec3c:	cmp	r4, r0
   1ec40:	mov	r5, r0
   1ec44:	beq	1e66c <_start@@Base+0x998c>
   1ec48:	mov	r1, r0
   1ec4c:	mov	r2, r8
   1ec50:	vstr	s16, [sp, #360]	; 0x168
   1ec54:	add	r3, sp, #360	; 0x168
   1ec58:	mov	r0, r9
   1ec5c:	bl	2ef68 <flatcc_json_parser_float@@Base>
   1ec60:	cmp	r5, r0
   1ec64:	mov	fp, r0
   1ec68:	beq	20724 <_start@@Base+0xba44>
   1ec6c:	ldr	r2, [sp, #16]
   1ec70:	ldr	r3, [sp, #360]	; 0x168
   1ec74:	str	r3, [r2, #4]
   1ec78:	b	1e558 <_start@@Base+0x9878>
   1ec7c:	mov	r1, fp
   1ec80:	mov	r2, r8
   1ec84:	mov	r0, r9
   1ec88:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1ec8c:	mov	fp, r0
   1ec90:	b	1d560 <_start@@Base+0x8880>
   1ec94:	nop	{0}
   1ec98:	andcc	r0, r0, #0
   1ec9c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1eca0:	submi	r0, r0, r0
   1eca4:			; <UNDEFINED> instruction: 0x000581b0
   1eca8:	andeq	r8, r5, ip, lsr r1
   1ecac:	add	r3, pc, #540	; 0x21c
   1ecb0:	ldrd	r2, [r3]
   1ecb4:	ldrd	r0, [sp, #48]	; 0x30
   1ecb8:	cmp	r1, r3
   1ecbc:	cmpeq	r0, r2
   1ecc0:	bne	1f17c <_start@@Base+0xa49c>
   1ecc4:	cmp	sl, #5
   1ecc8:	ble	1e6e4 <_start@@Base+0x9a04>
   1eccc:	mov	r2, r8
   1ecd0:	mov	r1, fp
   1ecd4:	mov	r0, r9
   1ecd8:	bl	1b51c <_start@@Base+0x683c>
   1ecdc:	cmp	r0, fp
   1ece0:	mov	r4, r0
   1ece4:	beq	1e6e4 <_start@@Base+0x9a04>
   1ece8:	mvn	r3, #-1073741824	; 0xc0000000
   1ecec:	mov	r2, #2
   1ecf0:	ldr	r0, [r9]
   1ecf4:	mov	r1, #4
   1ecf8:	bl	270b0 <flatcc_builder_start_vector@@Base>
   1ecfc:	cmp	r0, #0
   1ed00:	bne	21084 <_start@@Base+0xc3a4>
   1ed04:	add	r3, sp, #328	; 0x148
   1ed08:	mov	r1, r4
   1ed0c:	mov	r2, r8
   1ed10:	mov	r0, r9
   1ed14:	bl	1ad34 <_start@@Base+0x6054>
   1ed18:	ldr	r3, [sp, #328]	; 0x148
   1ed1c:	mov	fp, r0
   1ed20:	cmp	r3, #0
   1ed24:	beq	1ed70 <_start@@Base+0xa090>
   1ed28:	mov	r1, #1
   1ed2c:	ldr	r0, [r9]
   1ed30:	bl	2640c <flatcc_builder_extend_vector@@Base>
   1ed34:	subs	r3, r0, #0
   1ed38:	mov	r1, fp
   1ed3c:	mov	r2, r8
   1ed40:	mov	r0, r9
   1ed44:	beq	1ccf0 <_start@@Base+0x8010>
   1ed48:	bl	1aedc <_start@@Base+0x61fc>
   1ed4c:	mov	r1, r0
   1ed50:	add	r3, sp, #328	; 0x148
   1ed54:	mov	r2, r8
   1ed58:	mov	r0, r9
   1ed5c:	bl	194f8 <_start@@Base+0x4818>
   1ed60:	ldr	r3, [sp, #328]	; 0x148
   1ed64:	mov	fp, r0
   1ed68:	cmp	r3, #0
   1ed6c:	bne	1ed28 <_start@@Base+0xa048>
   1ed70:	ldr	r0, [r9]
   1ed74:	bl	284e4 <flatcc_builder_end_vector@@Base>
   1ed78:	cmp	r0, #0
   1ed7c:	str	r0, [sp, #332]	; 0x14c
   1ed80:	beq	1ccf0 <_start@@Base+0x8010>
   1ed84:	mov	r1, #31
   1ed88:	ldr	r0, [r9]
   1ed8c:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   1ed90:	cmp	r0, #0
   1ed94:	beq	1ccf0 <_start@@Base+0x8010>
   1ed98:	ldr	r3, [sp, #332]	; 0x14c
   1ed9c:	str	r3, [r0]
   1eda0:	b	1d560 <_start@@Base+0x8880>
   1eda4:	mov	fp, r1
   1eda8:	b	1d560 <_start@@Base+0x8880>
   1edac:	cmp	ip, #1
   1edb0:	ble	1e66c <_start@@Base+0x998c>
   1edb4:	mov	r2, r8
   1edb8:	mov	r1, r4
   1edbc:	mov	r0, r9
   1edc0:	bl	1b80c <_start@@Base+0x6b2c>
   1edc4:	cmp	r4, r0
   1edc8:	mov	r5, r0
   1edcc:	beq	1e66c <_start@@Base+0x998c>
   1edd0:	mov	r1, r0
   1edd4:	mov	r2, r8
   1edd8:	vstr	s16, [sp, #360]	; 0x168
   1eddc:	add	r3, sp, #360	; 0x168
   1ede0:	mov	r0, r9
   1ede4:	bl	2ef68 <flatcc_json_parser_float@@Base>
   1ede8:	cmp	r5, r0
   1edec:	mov	fp, r0
   1edf0:	beq	206dc <_start@@Base+0xb9fc>
   1edf4:	ldr	r2, [sp, #16]
   1edf8:	ldr	r3, [sp, #360]	; 0x168
   1edfc:	str	r3, [r2, #8]
   1ee00:	b	1e558 <_start@@Base+0x9878>
   1ee04:	add	r5, fp, #8
   1ee08:	mov	r1, r8
   1ee0c:	mov	r0, r5
   1ee10:	mov	r4, #0
   1ee14:	bl	14dd0 <_start@@Base+0xf0>
   1ee18:	lsr	r1, r1, #16
   1ee1c:	str	r4, [sp, #136]	; 0x88
   1ee20:	mov	r3, #0
   1ee24:	movt	r3, #13876	; 0x3634
   1ee28:	mov	r2, #0
   1ee2c:	lsl	r1, r1, #16
   1ee30:	str	r1, [sp, #140]	; 0x8c
   1ee34:	ldrd	r0, [sp, #136]	; 0x88
   1ee38:	cmp	r1, r3
   1ee3c:	cmpeq	r0, r2
   1ee40:	bne	1f3f0 <_start@@Base+0xa710>
   1ee44:	sub	r3, r8, r5
   1ee48:	cmp	r3, #2
   1ee4c:	ble	1fb70 <_start@@Base+0xae90>
   1ee50:	mov	r2, r8
   1ee54:	mov	r1, r5
   1ee58:	mov	r0, r9
   1ee5c:	bl	1c17c <_start@@Base+0x749c>
   1ee60:	cmp	r5, r0
   1ee64:	mov	fp, r0
   1ee68:	beq	1fb6c <_start@@Base+0xae8c>
   1ee6c:	mov	r1, #3
   1ee70:	ldr	r0, [r9]
   1ee74:	str	r4, [sp, #332]	; 0x14c
   1ee78:	bl	27848 <flatcc_builder_start_table@@Base>
   1ee7c:	cmp	r0, r4
   1ee80:	bne	1f0a0 <_start@@Base+0xa3c0>
   1ee84:	add	r5, sp, #352	; 0x160
   1ee88:	mov	r1, fp
   1ee8c:	mov	r3, r5
   1ee90:	mov	r2, r8
   1ee94:	mov	r0, r9
   1ee98:	bl	1ae08 <_start@@Base+0x6128>
   1ee9c:	ldr	r3, [sp, #352]	; 0x160
   1eea0:	mov	fp, r0
   1eea4:	cmp	r3, r4
   1eea8:	beq	20890 <_start@@Base+0xbbb0>
   1eeac:	mov	sl, r4
   1eeb0:	add	r3, sp, #288	; 0x120
   1eeb4:	strd	r6, [sp, #16]
   1eeb8:	movt	sl, #65535	; 0xffff
   1eebc:	mov	fp, r5
   1eec0:	ldrd	r4, [r3]
   1eec4:	mov	r7, r0
   1eec8:	mov	r6, sl
   1eecc:	b	1efb4 <_start@@Base+0xa2d4>
   1eed0:	strcc	r0, [r0, #-0]
   1eed4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1eed8:	andeq	r0, r0, r0
   1eedc:	strbtvs	r7, [r1], #-1121	; 0xfffffb9f
   1eee0:	strbvs	pc, [r3, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   1eee4:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1eee8:	cmnvs	r4, r0, lsl #2
   1eeec:	ldrbvc	r6, [r2, #-3172]!	; 0xfffff39c
   1eef0:	strbvs	r0, [r4, #-0]!
   1eef4:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1eef8:	svcpl	0x00747970
   1eefc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1ef00:	andeq	r8, r5, ip, ror r1
   1ef04:	mov	sl, #0
   1ef08:	str	sl, [sp, #88]	; 0x58
   1ef0c:	str	r1, [sp, #92]	; 0x5c
   1ef10:	sub	r1, pc, #64	; 0x40
   1ef14:	ldrd	r0, [r1]
   1ef18:	ldrd	r2, [sp, #88]	; 0x58
   1ef1c:	cmp	r3, r1
   1ef20:	cmpeq	r2, r0
   1ef24:	bne	1fdbc <_start@@Base+0xb0dc>
   1ef28:	sub	r2, r8, r7
   1ef2c:	cmp	r2, #4
   1ef30:	ble	1fdbc <_start@@Base+0xb0dc>
   1ef34:	mov	r1, r7
   1ef38:	mov	r2, r8
   1ef3c:	mov	r0, r9
   1ef40:	bl	1b750 <_start@@Base+0x6a70>
   1ef44:	cmp	r7, r0
   1ef48:	mov	r1, r0
   1ef4c:	beq	1fdbc <_start@@Base+0xb0dc>
   1ef50:	mov	r2, r8
   1ef54:	add	r3, sp, #360	; 0x168
   1ef58:	str	sl, [sp]
   1ef5c:	mov	r0, r9
   1ef60:	bl	31830 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1ef64:	ldr	r2, [sp, #360]	; 0x168
   1ef68:	mov	r7, r0
   1ef6c:	cmp	r2, sl
   1ef70:	beq	1f090 <_start@@Base+0xa3b0>
   1ef74:	mov	r1, sl
   1ef78:	ldr	r0, [r9]
   1ef7c:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   1ef80:	cmp	r0, #0
   1ef84:	beq	1f090 <_start@@Base+0xa3b0>
   1ef88:	ldr	r2, [sp, #360]	; 0x168
   1ef8c:	str	r2, [r0]
   1ef90:	mov	r1, r7
   1ef94:	mov	r2, r8
   1ef98:	mov	r3, fp
   1ef9c:	mov	r0, r9
   1efa0:	bl	193b0 <_start@@Base+0x46d0>
   1efa4:	ldr	r2, [sp, #352]	; 0x160
   1efa8:	mov	r7, r0
   1efac:	cmp	r2, #0
   1efb0:	beq	20880 <_start@@Base+0xbba0>
   1efb4:	cmp	r8, r7
   1efb8:	beq	1efcc <_start@@Base+0xa2ec>
   1efbc:	ldrb	r2, [r7]
   1efc0:	cmp	r2, #34	; 0x22
   1efc4:	addeq	r7, r7, #1
   1efc8:	bne	1fedc <_start@@Base+0xb1fc>
   1efcc:	mov	r1, r8
   1efd0:	mov	r0, r7
   1efd4:	bl	14dd0 <_start@@Base+0xf0>
   1efd8:	sub	r3, pc, #256	; 0x100
   1efdc:	ldrd	r2, [r3]
   1efe0:	cmp	r1, r3
   1efe4:	cmpeq	r0, r2
   1efe8:	bls	1ef04 <_start@@Base+0xa224>
   1efec:	sub	r3, pc, #268	; 0x10c
   1eff0:	ldrd	r2, [r3]
   1eff4:	bic	r4, r0, #255	; 0xff
   1eff8:	mov	r5, r1
   1effc:	cmp	r1, r3
   1f000:	cmpeq	r4, r2
   1f004:	beq	20030 <_start@@Base+0xb350>
   1f008:	and	r3, r0, r6
   1f00c:	str	r3, [sp, #144]	; 0x90
   1f010:	str	r1, [sp, #148]	; 0x94
   1f014:	sub	r1, pc, #300	; 0x12c
   1f018:	ldrd	r0, [r1]
   1f01c:	ldrd	r2, [sp, #144]	; 0x90
   1f020:	cmp	r3, r1
   1f024:	cmpeq	r2, r0
   1f028:	bne	1fdbc <_start@@Base+0xb0dc>
   1f02c:	sub	r2, r8, r7
   1f030:	cmp	r2, #6
   1f034:	ble	1fdbc <_start@@Base+0xb0dc>
   1f038:	mov	r1, r7
   1f03c:	mov	r2, r8
   1f040:	mov	r0, r9
   1f044:	bl	1b5d8 <_start@@Base+0x68f8>
   1f048:	cmp	r7, r0
   1f04c:	mov	r1, r0
   1f050:	beq	1fdbc <_start@@Base+0xb0dc>
   1f054:	mov	r0, #0
   1f058:	mov	r2, r8
   1f05c:	add	r3, sp, #360	; 0x168
   1f060:	str	r0, [sp]
   1f064:	mov	r0, r9
   1f068:	bl	31830 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1f06c:	ldr	r2, [sp, #360]	; 0x168
   1f070:	mov	r7, r0
   1f074:	cmp	r2, #0
   1f078:	beq	1f090 <_start@@Base+0xa3b0>
   1f07c:	mov	r1, #2
   1f080:	ldr	r0, [r9]
   1f084:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   1f088:	cmp	r0, #0
   1f08c:	bne	1ef88 <_start@@Base+0xa2a8>
   1f090:	mov	fp, r7
   1f094:	ldrd	r6, [sp, #16]
   1f098:	add	r3, sp, #288	; 0x120
   1f09c:	strd	r4, [r3]
   1f0a0:	mov	r1, fp
   1f0a4:	mov	r3, #33	; 0x21
   1f0a8:	mov	r2, r8
   1f0ac:	mov	r0, r9
   1f0b0:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1f0b4:	ldr	r3, [sp, #332]	; 0x14c
   1f0b8:	mov	fp, r0
   1f0bc:	cmp	r3, #0
   1f0c0:	beq	1ccf0 <_start@@Base+0x8010>
   1f0c4:	mov	r1, #35	; 0x23
   1f0c8:	ldr	r0, [r9]
   1f0cc:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   1f0d0:	cmp	r0, #0
   1f0d4:	beq	1ccf0 <_start@@Base+0x8010>
   1f0d8:	ldr	r3, [sp, #332]	; 0x14c
   1f0dc:	str	r3, [r0]
   1f0e0:	b	1d560 <_start@@Base+0x8880>
   1f0e4:	ldrb	r3, [fp, #2]
   1f0e8:	cmp	r3, #32
   1f0ec:	bls	1eb58 <_start@@Base+0x9e78>
   1f0f0:	add	fp, fp, #2
   1f0f4:	b	1d560 <_start@@Base+0x8880>
   1f0f8:	mov	r2, r8
   1f0fc:	add	r1, r4, #6
   1f100:	mov	r0, r9
   1f104:	bl	16bf0 <_start@@Base+0x1f10>
   1f108:	cmp	r8, r0
   1f10c:	beq	1f11c <_start@@Base+0xa43c>
   1f110:	ldrb	r3, [r0]
   1f114:	cmp	r3, #58	; 0x3a
   1f118:	beq	209e0 <_start@@Base+0xbd00>
   1f11c:	mov	r1, r0
   1f120:	mov	r3, #4
   1f124:	mov	r2, r8
   1f128:	mov	r0, r9
   1f12c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1f130:	mov	r5, r0
   1f134:	cmp	r4, r5
   1f138:	beq	1e66c <_start@@Base+0x998c>
   1f13c:	mov	r2, r8
   1f140:	add	r3, sp, #360	; 0x168
   1f144:	vstr	d9, [sp, #360]	; 0x168
   1f148:	mov	r1, r5
   1f14c:	mov	r0, r9
   1f150:	bl	2ee30 <flatcc_json_parser_double@@Base>
   1f154:	cmp	r5, r0
   1f158:	mov	fp, r0
   1f15c:	beq	1f3a8 <_start@@Base+0xa6c8>
   1f160:	ldr	r1, [sp, #16]
   1f164:	add	r3, sp, #360	; 0x168
   1f168:	ldrd	r2, [r3]
   1f16c:	strd	r2, [r1, #16]
   1f170:	b	1e558 <_start@@Base+0x9878>
   1f174:	mov	fp, r8
   1f178:	b	1ea70 <_start@@Base+0x9d90>
   1f17c:	sub	r3, pc, #652	; 0x28c
   1f180:	ldrd	r2, [r3]
   1f184:	ldrd	r0, [sp, #16]
   1f188:	cmp	r1, r3
   1f18c:	cmpeq	r0, r2
   1f190:	bne	1e6e4 <_start@@Base+0x9a04>
   1f194:	add	fp, fp, #8
   1f198:	mov	r1, r8
   1f19c:	mov	r0, fp
   1f1a0:	mov	r4, #0
   1f1a4:	bl	14dd0 <_start@@Base+0xf0>
   1f1a8:	and	r3, r1, #-16777216	; 0xff000000
   1f1ac:	str	r4, [sp, #176]	; 0xb0
   1f1b0:	str	r3, [sp, #180]	; 0xb4
   1f1b4:	ldrd	r2, [sp, #176]	; 0xb0
   1f1b8:	cmp	r3, #1694498816	; 0x65000000
   1f1bc:	cmpeq	r2, #0
   1f1c0:	bne	1f408 <_start@@Base+0xa728>
   1f1c4:	sub	r3, r8, fp
   1f1c8:	cmp	r3, #1
   1f1cc:	ble	1fba0 <_start@@Base+0xaec0>
   1f1d0:	mov	r1, fp
   1f1d4:	mov	r2, r8
   1f1d8:	mov	r0, r9
   1f1dc:	bl	1b80c <_start@@Base+0x6b2c>
   1f1e0:	cmp	fp, r0
   1f1e4:	mov	r1, r0
   1f1e8:	beq	1fba0 <_start@@Base+0xaec0>
   1f1ec:	ldr	r0, [pc, #-756]	; 1ef00 <_start@@Base+0xa220>
   1f1f0:	mov	ip, #8
   1f1f4:	movw	r2, #14064	; 0x36f0
   1f1f8:	movt	r2, #2
   1f1fc:	mov	r3, r4
   1f200:	ldr	lr, [sp, #336]	; 0x150
   1f204:	str	r2, [sp, #12]
   1f208:	mov	r2, r8
   1f20c:	stm	sp, {ip, lr}
   1f210:	str	r0, [sp, #8]
   1f214:	mov	r0, r9
   1f218:	bl	32340 <flatcc_json_parser_union_type@@Base>
   1f21c:	mov	fp, r0
   1f220:	b	1d560 <_start@@Base+0x8880>
   1f224:	add	r4, fp, #8
   1f228:	mov	r1, r8
   1f22c:	mov	r0, r4
   1f230:	bl	14dd0 <_start@@Base+0xf0>
   1f234:	add	r3, pc, #836	; 0x344
   1f238:	ldrd	r2, [r3]
   1f23c:	cmp	r1, r3
   1f240:	cmpeq	r0, r2
   1f244:	bne	1f660 <_start@@Base+0xa980>
   1f248:	add	fp, fp, #16
   1f24c:	mov	r1, r8
   1f250:	mov	r0, fp
   1f254:	bl	14dd0 <_start@@Base+0xf0>
   1f258:	and	r0, r0, #-16777216	; 0xff000000
   1f25c:	add	r3, pc, #804	; 0x324
   1f260:	ldrd	r2, [r3]
   1f264:	strd	r0, [sp, #248]	; 0xf8
   1f268:	ldrd	r0, [sp, #248]	; 0xf8
   1f26c:	cmp	r1, r3
   1f270:	cmpeq	r0, r2
   1f274:	bne	1fa14 <_start@@Base+0xad34>
   1f278:	sub	r3, r8, fp
   1f27c:	cmp	r3, #5
   1f280:	ble	20d30 <_start@@Base+0xc050>
   1f284:	mov	r1, fp
   1f288:	mov	r2, r8
   1f28c:	mov	r0, r9
   1f290:	bl	1b51c <_start@@Base+0x683c>
   1f294:	cmp	fp, r0
   1f298:	mov	r1, r0
   1f29c:	beq	20d30 <_start@@Base+0xc050>
   1f2a0:	add	r3, sp, #332	; 0x14c
   1f2a4:	mov	r2, r8
   1f2a8:	mov	r0, r9
   1f2ac:	bl	1ca18 <_start@@Base+0x7d38>
   1f2b0:	ldr	r3, [sp, #332]	; 0x14c
   1f2b4:	mov	fp, r0
   1f2b8:	cmp	r3, #0
   1f2bc:	beq	1ccf0 <_start@@Base+0x8010>
   1f2c0:	mov	r1, #34	; 0x22
   1f2c4:	ldr	r0, [r9]
   1f2c8:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   1f2cc:	cmp	r0, #0
   1f2d0:	beq	1ccf0 <_start@@Base+0x8010>
   1f2d4:	ldr	r3, [sp, #332]	; 0x14c
   1f2d8:	str	r3, [r0]
   1f2dc:	b	1d560 <_start@@Base+0x8880>
   1f2e0:	ldr	r1, [sp, #352]	; 0x160
   1f2e4:	add	r3, sp, #360	; 0x168
   1f2e8:	ldrd	r2, [r3]
   1f2ec:	cmp	r1, #0
   1f2f0:	bne	1f6c0 <_start@@Base+0xa9e0>
   1f2f4:	cmp	r3, #0
   1f2f8:	cmpeq	r2, #127	; 0x7f
   1f2fc:	sxtbls	r2, r2
   1f300:	bls	1eaa4 <_start@@Base+0x9dc4>
   1f304:	mov	r1, r0
   1f308:	mov	r3, #7
   1f30c:	mov	r2, r8
   1f310:	mov	r0, r9
   1f314:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1f318:	mov	fp, r0
   1f31c:	cmp	r5, fp
   1f320:	beq	1ea70 <_start@@Base+0x9d90>
   1f324:	add	r3, sp, #344	; 0x158
   1f328:	ldrsb	r2, [r3]
   1f32c:	b	1eaa4 <_start@@Base+0x9dc4>
   1f330:	mov	r1, fp
   1f334:	mov	r2, r8
   1f338:	mov	r0, r9
   1f33c:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1f340:	mov	fp, r0
   1f344:	b	1d560 <_start@@Base+0x8880>
   1f348:	ldrb	r3, [fp, #2]
   1f34c:	cmp	r3, #32
   1f350:	addhi	r4, fp, #2
   1f354:	bls	1eba4 <_start@@Base+0x9ec4>
   1f358:	b	1ebb8 <_start@@Base+0x9ed8>
   1f35c:	mov	r1, fp
   1f360:	mov	r2, r8
   1f364:	mov	r0, r9
   1f368:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1f36c:	mov	fp, r0
   1f370:	b	1d560 <_start@@Base+0x8880>
   1f374:	mov	r4, r0
   1f378:	mov	r1, r4
   1f37c:	mov	r2, r8
   1f380:	mov	r0, r9
   1f384:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1f388:	mov	fp, r0
   1f38c:	b	1d560 <_start@@Base+0x8880>
   1f390:	mov	r1, fp
   1f394:	mov	r2, r8
   1f398:	mov	r0, r9
   1f39c:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1f3a0:	mov	fp, r0
   1f3a4:	b	1d560 <_start@@Base+0x8880>
   1f3a8:	mov	r1, r0
   1f3ac:	add	r0, sp, #360	; 0x168
   1f3b0:	ldr	r3, [pc, #472]	; 1f590 <_start@@Base+0xa8b0>
   1f3b4:	mov	r2, r8
   1f3b8:	str	r0, [sp]
   1f3bc:	mov	r0, r9
   1f3c0:	bl	19210 <_start@@Base+0x4530>
   1f3c4:	cmp	r8, r0
   1f3c8:	cmpne	fp, r0
   1f3cc:	beq	20e94 <_start@@Base+0xc1b4>
   1f3d0:	mov	fp, r0
   1f3d4:	b	1f160 <_start@@Base+0xa480>
   1f3d8:	mov	r1, r4
   1f3dc:	mov	r2, r8
   1f3e0:	mov	r0, r9
   1f3e4:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1f3e8:	mov	fp, r0
   1f3ec:	b	1d560 <_start@@Base+0x8880>
   1f3f0:	mov	r1, r5
   1f3f4:	mov	r2, r8
   1f3f8:	mov	r0, r9
   1f3fc:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1f400:	mov	fp, r0
   1f404:	b	1d560 <_start@@Base+0x8880>
   1f408:	mov	r1, fp
   1f40c:	mov	r2, r8
   1f410:	mov	r0, r9
   1f414:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1f418:	mov	fp, r0
   1f41c:	b	1d560 <_start@@Base+0x8880>
   1f420:	mov	ip, #0
   1f424:	mov	r3, #10
   1f428:	mov	r2, r8
   1f42c:	mov	r1, r8
   1f430:	mov	r0, r9
   1f434:	str	ip, [sp, #348]	; 0x15c
   1f438:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1f43c:	mov	r4, r0
   1f440:	ldr	r3, [sp, #348]	; 0x15c
   1f444:	b	1e5cc <_start@@Base+0x98ec>
   1f448:	mov	r3, #0
   1f44c:	add	r4, fp, #8
   1f450:	mov	r1, r8
   1f454:	mov	r0, r4
   1f458:	str	r3, [sp, #240]	; 0xf0
   1f45c:	bl	14dd0 <_start@@Base+0xf0>
   1f460:	and	r3, r1, #-16777216	; 0xff000000
   1f464:	str	r3, [sp, #244]	; 0xf4
   1f468:	ldrd	r2, [sp, #240]	; 0xf0
   1f46c:	cmp	r3, #2030043136	; 0x79000000
   1f470:	cmpeq	r2, #0
   1f474:	bne	1fa5c <_start@@Base+0xad7c>
   1f478:	sub	r3, r8, r4
   1f47c:	cmp	r3, #1
   1f480:	ble	20868 <_start@@Base+0xbb88>
   1f484:	mov	r2, r8
   1f488:	mov	r1, r4
   1f48c:	mov	r0, r9
   1f490:	bl	1b80c <_start@@Base+0x6b2c>
   1f494:	cmp	r0, r4
   1f498:	mov	fp, r0
   1f49c:	beq	20868 <_start@@Base+0xbb88>
   1f4a0:	mov	r2, #1
   1f4a4:	mvn	r3, #0
   1f4a8:	ldr	r0, [r9]
   1f4ac:	mov	r1, r2
   1f4b0:	bl	270b0 <flatcc_builder_start_vector@@Base>
   1f4b4:	cmp	r0, #0
   1f4b8:	bne	1ccf0 <_start@@Base+0x8010>
   1f4bc:	mov	r1, fp
   1f4c0:	add	r3, sp, #328	; 0x148
   1f4c4:	mov	r2, r8
   1f4c8:	mov	r0, r9
   1f4cc:	bl	1ad34 <_start@@Base+0x6054>
   1f4d0:	ldr	r3, [sp, #328]	; 0x148
   1f4d4:	mov	fp, r0
   1f4d8:	cmp	r3, #0
   1f4dc:	beq	20df8 <_start@@Base+0xc118>
   1f4e0:	mov	sl, #0
   1f4e4:	b	1f514 <_start@@Base+0xa834>
   1f4e8:	ldrb	ip, [sp, #360]	; 0x168
   1f4ec:	add	r3, sp, #328	; 0x148
   1f4f0:	mov	r1, r4
   1f4f4:	mov	r2, r8
   1f4f8:	mov	r0, r9
   1f4fc:	strb	ip, [r5]
   1f500:	bl	194f8 <_start@@Base+0x4818>
   1f504:	ldr	r3, [sp, #328]	; 0x148
   1f508:	mov	fp, r0
   1f50c:	cmp	r3, #0
   1f510:	beq	20df8 <_start@@Base+0xc118>
   1f514:	mov	r1, #1
   1f518:	ldr	r0, [r9]
   1f51c:	strb	sl, [sp, #360]	; 0x168
   1f520:	bl	2640c <flatcc_builder_extend_vector@@Base>
   1f524:	subs	r5, r0, #0
   1f528:	mov	r1, fp
   1f52c:	add	r3, sp, #360	; 0x168
   1f530:	mov	r2, r8
   1f534:	mov	r0, r9
   1f538:	beq	1ccf0 <_start@@Base+0x8010>
   1f53c:	bl	17e60 <_start@@Base+0x3180>
   1f540:	cmp	fp, r0
   1f544:	mov	r4, r0
   1f548:	bne	1f4e8 <_start@@Base+0xa808>
   1f54c:	add	r1, sp, #360	; 0x168
   1f550:	ldr	r3, [pc, #60]	; 1f594 <_start@@Base+0xa8b4>
   1f554:	mov	r2, r8
   1f558:	mov	r0, r9
   1f55c:	str	r1, [sp]
   1f560:	mov	r1, r4
   1f564:	bl	1a794 <_start@@Base+0x5ab4>
   1f568:	cmp	r8, r0
   1f56c:	cmpne	r4, r0
   1f570:	mov	fp, r0
   1f574:	mov	r4, r0
   1f578:	bne	1f4e8 <_start@@Base+0xa808>
   1f57c:	b	1ccf0 <_start@@Base+0x8010>
   1f580:	rsbvc	r6, r1, r5, ror #6
   1f584:	smcvs	54867	; 0xd653
   1f588:	strvc	r0, [r0], #-0
   1f58c:	svcpl	0x00746573
   1f590:	andeq	r8, r5, ip, asr #2
   1f594:	andeq	r8, r5, r4, lsr #2
   1f598:	add	r3, pc, #672	; 0x2a0
   1f59c:	ldrd	r2, [r3]
   1f5a0:	cmp	r1, r3
   1f5a4:	cmpeq	r0, r2
   1f5a8:	beq	1fca4 <_start@@Base+0xafc4>
   1f5ac:	add	r3, pc, #660	; 0x294
   1f5b0:	ldrd	r2, [r3]
   1f5b4:	cmp	r1, r3
   1f5b8:	cmpeq	r0, r2
   1f5bc:	bne	2070c <_start@@Base+0xba2c>
   1f5c0:	sub	r3, r8, fp
   1f5c4:	cmp	r3, #8
   1f5c8:	ble	20b98 <_start@@Base+0xbeb8>
   1f5cc:	mov	r2, r8
   1f5d0:	mov	r1, fp
   1f5d4:	mov	r0, r9
   1f5d8:	bl	1b694 <_start@@Base+0x69b4>
   1f5dc:	cmp	fp, r0
   1f5e0:	mov	r4, r0
   1f5e4:	beq	20b94 <_start@@Base+0xbeb4>
   1f5e8:	mov	fp, #0
   1f5ec:	add	r5, sp, #360	; 0x168
   1f5f0:	mov	sl, #0
   1f5f4:	mov	r1, r0
   1f5f8:	mov	r3, r5
   1f5fc:	mov	r2, r8
   1f600:	mov	r0, r9
   1f604:	strd	sl, [r5]
   1f608:	bl	17cf4 <_start@@Base+0x3014>
   1f60c:	cmp	r0, r4
   1f610:	mov	fp, r0
   1f614:	beq	2101c <_start@@Base+0xc33c>
   1f618:	add	r3, sp, #360	; 0x168
   1f61c:	ldrd	r2, [r3]
   1f620:	orrs	r3, r2, r3
   1f624:	bne	1f634 <_start@@Base+0xa954>
   1f628:	ldr	r3, [r9, #8]
   1f62c:	tst	r3, #2
   1f630:	beq	1d560 <_start@@Base+0x8880>
   1f634:	mov	r3, #8
   1f638:	mov	r1, #19
   1f63c:	ldr	r0, [r9]
   1f640:	mov	r2, r3
   1f644:	bl	29bc0 <flatcc_builder_table_add@@Base>
   1f648:	cmp	r0, #0
   1f64c:	beq	1ccf0 <_start@@Base+0x8010>
   1f650:	add	r3, sp, #360	; 0x168
   1f654:	ldrd	r2, [r3]
   1f658:	strd	r2, [r0]
   1f65c:	b	1d560 <_start@@Base+0x8880>
   1f660:	mov	r1, r4
   1f664:	mov	r2, r8
   1f668:	mov	r0, r9
   1f66c:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1f670:	mov	fp, r0
   1f674:	b	1d560 <_start@@Base+0x8880>
   1f678:	mov	r1, fp
   1f67c:	mov	r2, r8
   1f680:	mov	r0, r9
   1f684:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1f688:	mov	fp, r0
   1f68c:	b	1d560 <_start@@Base+0x8880>
   1f690:	mov	r1, r4
   1f694:	mov	r2, r8
   1f698:	mov	r0, r9
   1f69c:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1f6a0:	mov	fp, r0
   1f6a4:	b	1d560 <_start@@Base+0x8880>
   1f6a8:	mov	r1, r5
   1f6ac:	mov	r2, r8
   1f6b0:	mov	r0, r9
   1f6b4:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1f6b8:	mov	fp, r0
   1f6bc:	b	1d560 <_start@@Base+0x8880>
   1f6c0:	cmp	r3, #0
   1f6c4:	cmpeq	r2, #128	; 0x80
   1f6c8:	rsbls	r2, r2, #0
   1f6cc:	sxtbls	r2, r2
   1f6d0:	bls	1eaa4 <_start@@Base+0x9dc4>
   1f6d4:	mov	r1, r0
   1f6d8:	mov	r3, #8
   1f6dc:	mov	r2, r8
   1f6e0:	mov	r0, r9
   1f6e4:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1f6e8:	mov	fp, r0
   1f6ec:	b	1f31c <_start@@Base+0xa63c>
   1f6f0:	mov	r1, r4
   1f6f4:	mov	r2, r8
   1f6f8:	mov	r0, r9
   1f6fc:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1f700:	mov	fp, r0
   1f704:	b	1d560 <_start@@Base+0x8880>
   1f708:	mov	r1, r0
   1f70c:	add	r0, sp, #360	; 0x168
   1f710:	ldr	r3, [pc, #312]	; 1f850 <_start@@Base+0xab70>
   1f714:	mov	r2, r8
   1f718:	str	r0, [sp]
   1f71c:	mov	r0, r9
   1f720:	bl	19078 <_start@@Base+0x4398>
   1f724:	cmp	r8, r0
   1f728:	cmpne	r0, r4
   1f72c:	mov	fp, r0
   1f730:	bne	1d1d0 <_start@@Base+0x84f0>
   1f734:	b	1ccf0 <_start@@Base+0x8010>
   1f738:	ldrb	r2, [r4]
   1f73c:	movw	r3, #65535	; 0xffff
   1f740:	movt	r3, #26979	; 0x6963
   1f744:	mov	sl, #0
   1f748:	ldrb	r0, [r4, #1]
   1f74c:	lsl	r2, r2, #24
   1f750:	orr	fp, r2, r0, lsl #16
   1f754:	mvn	r2, #0
   1f758:	cmp	fp, r3
   1f75c:	cmpeq	sl, r2
   1f760:	bhi	1f8bc <_start@@Base+0xabdc>
   1f764:	mov	r1, r4
   1f768:	mov	r2, r8
   1f76c:	mov	r0, r9
   1f770:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1f774:	mov	r5, r0
   1f778:	sub	r3, r8, r5
   1f77c:	cmp	r3, #1
   1f780:	ble	1f794 <_start@@Base+0xaab4>
   1f784:	ldrb	r3, [r5]
   1f788:	cmp	r3, #32
   1f78c:	bhi	1f7a8 <_start@@Base+0xaac8>
   1f790:	beq	201b8 <_start@@Base+0xb4d8>
   1f794:	mov	r1, r5
   1f798:	mov	r2, r8
   1f79c:	mov	r0, r9
   1f7a0:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   1f7a4:	mov	r5, r0
   1f7a8:	cmp	r8, r5
   1f7ac:	beq	20084 <_start@@Base+0xb3a4>
   1f7b0:	ldrb	r3, [r5]
   1f7b4:	cmp	r3, #44	; 0x2c
   1f7b8:	beq	201ec <_start@@Base+0xb50c>
   1f7bc:	mov	r3, #0
   1f7c0:	str	r3, [sp, #340]	; 0x154
   1f7c4:	ldrb	r3, [r5]
   1f7c8:	cmp	r3, #125	; 0x7d
   1f7cc:	beq	1fff8 <_start@@Base+0xb318>
   1f7d0:	mov	r3, #10
   1f7d4:	mov	r1, r5
   1f7d8:	mov	r2, r8
   1f7dc:	mov	r0, r9
   1f7e0:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1f7e4:	ldr	r3, [sp, #340]	; 0x154
   1f7e8:	mov	r4, r0
   1f7ec:	cmp	r3, #0
   1f7f0:	bne	1d844 <_start@@Base+0x8b64>
   1f7f4:	ldrd	r6, [sp, #56]	; 0x38
   1f7f8:	strd	sl, [sp, #232]	; 0xe8
   1f7fc:	mov	fp, r4
   1f800:	ldr	r3, [r9, #20]
   1f804:	cmp	r3, #0
   1f808:	bne	204e8 <_start@@Base+0xb808>
   1f80c:	ldr	r0, [r9]
   1f810:	bl	281c8 <flatcc_builder_end_table@@Base>
   1f814:	cmp	r0, #0
   1f818:	str	r0, [sp, #332]	; 0x14c
   1f81c:	beq	204e8 <_start@@Base+0xb808>
   1f820:	mov	r1, #14
   1f824:	ldr	r0, [r9]
   1f828:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   1f82c:	cmp	r0, #0
   1f830:	beq	1ccf0 <_start@@Base+0x8010>
   1f834:	ldr	r3, [sp, #332]	; 0x14c
   1f838:	str	r3, [r0]
   1f83c:	b	1d560 <_start@@Base+0x8880>
   1f840:			; <UNDEFINED> instruction: 0x666e7631
   1f844:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1f848:			; <UNDEFINED> instruction: 0x666e7631
   1f84c:	ldrvc	r3, [r6, #-1119]!	; 0xfffffba1
   1f850:	andeq	r8, r5, ip, ror #3
   1f854:	ldrb	r2, [r4, #7]
   1f858:	mov	r3, #0
   1f85c:	mov	lr, r3
   1f860:	ldrb	r0, [r4, #6]
   1f864:	orr	r2, r2, r0, lsl #8
   1f868:	ldrb	r0, [r4, #5]
   1f86c:	orr	r1, r2, r0, lsl #16
   1f870:	ldrb	r2, [r4, #4]
   1f874:	orr	r1, r1, r2, lsl #24
   1f878:	ldrb	r2, [r4, #3]
   1f87c:	orr	lr, lr, r2
   1f880:	ldrb	r2, [r4]
   1f884:	movw	r3, #65535	; 0xffff
   1f888:	movt	r3, #26979	; 0x6963
   1f88c:	mov	sl, r1
   1f890:	mov	r5, #0
   1f894:	ldrb	r0, [r4, #2]
   1f898:	lsl	r7, r2, #24
   1f89c:	ldrb	r2, [r4, #1]
   1f8a0:	orr	r0, lr, r0, lsl #8
   1f8a4:	orr	r2, r7, r2, lsl #16
   1f8a8:	orr	fp, r2, r0
   1f8ac:	mvn	r2, #0
   1f8b0:	cmp	fp, r3
   1f8b4:	cmpeq	r1, r2
   1f8b8:	bls	1fdd4 <_start@@Base+0xb0f4>
   1f8bc:	mov	r3, #0
   1f8c0:	bic	r2, fp, #255	; 0xff
   1f8c4:	add	r7, pc, #972	; 0x3cc
   1f8c8:	ldrd	r6, [r7]
   1f8cc:	str	r3, [sp, #112]	; 0x70
   1f8d0:	str	r2, [sp, #116]	; 0x74
   1f8d4:	ldrd	r0, [sp, #112]	; 0x70
   1f8d8:	cmp	r1, r7
   1f8dc:	cmpeq	r0, r6
   1f8e0:	beq	2009c <_start@@Base+0xb3bc>
   1f8e4:	str	r3, [sp, #160]	; 0xa0
   1f8e8:	mov	r1, #0
   1f8ec:	movt	r1, #26980	; 0x6964
   1f8f0:	ldr	r3, [sp, #16]
   1f8f4:	mov	r0, #0
   1f8f8:	and	r3, fp, r3
   1f8fc:	str	r3, [sp, #164]	; 0xa4
   1f900:	ldrd	r2, [sp, #160]	; 0xa0
   1f904:	cmp	r3, r1
   1f908:	cmpeq	r2, r0
   1f90c:	bne	1f764 <_start@@Base+0xaa84>
   1f910:	cmp	ip, #2
   1f914:	ble	1f764 <_start@@Base+0xaa84>
   1f918:	ldrb	r3, [r4, #2]
   1f91c:	cmp	r3, #34	; 0x22
   1f920:	bne	1f764 <_start@@Base+0xaa84>
   1f924:	add	r1, r4, #3
   1f928:	mov	r2, r8
   1f92c:	mov	r0, r9
   1f930:	bl	16bf0 <_start@@Base+0x1f10>
   1f934:	cmp	r8, r0
   1f938:	mov	r1, r0
   1f93c:	beq	1f94c <_start@@Base+0xac6c>
   1f940:	ldrb	r3, [r0]
   1f944:	cmp	r3, #58	; 0x3a
   1f948:	beq	21004 <_start@@Base+0xc324>
   1f94c:	mov	r3, #4
   1f950:	mov	r2, r8
   1f954:	mov	r0, r9
   1f958:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1f95c:	mov	r1, r0
   1f960:	cmp	r4, r1
   1f964:	beq	1f764 <_start@@Base+0xaa84>
   1f968:	add	r3, sp, #344	; 0x158
   1f96c:	mov	r2, r8
   1f970:	mov	r0, r9
   1f974:	bl	31d48 <flatcc_json_parser_build_string@@Base>
   1f978:	ldr	r3, [sp, #344]	; 0x158
   1f97c:	mov	r5, r0
   1f980:	cmp	r3, #0
   1f984:	beq	20dc0 <_start@@Base+0xc0e0>
   1f988:	mov	r1, #0
   1f98c:	ldr	r0, [r9]
   1f990:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   1f994:	cmp	r0, #0
   1f998:	beq	20dc0 <_start@@Base+0xc0e0>
   1f99c:	ldr	r3, [sp, #344]	; 0x158
   1f9a0:	str	r3, [r0]
   1f9a4:	b	1f778 <_start@@Base+0xaa98>
   1f9a8:	mov	r2, #0
   1f9ac:	mov	lr, r2
   1f9b0:	b	1f868 <_start@@Base+0xab88>
   1f9b4:	mov	r1, #0
   1f9b8:	mov	lr, r1
   1f9bc:	b	1f878 <_start@@Base+0xab98>
   1f9c0:	mov	r1, #0
   1f9c4:	mov	lr, r1
   1f9c8:	b	1f880 <_start@@Base+0xaba0>
   1f9cc:	mov	r2, #0
   1f9d0:	mov	r3, #0
   1f9d4:	b	1f85c <_start@@Base+0xab7c>
   1f9d8:	mov	r1, #0
   1f9dc:	mov	lr, r1
   1f9e0:	b	1f870 <_start@@Base+0xab90>
   1f9e4:	mov	r1, r4
   1f9e8:	mov	r2, r8
   1f9ec:	mov	r0, r9
   1f9f0:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1f9f4:	mov	fp, r0
   1f9f8:	b	1d560 <_start@@Base+0x8880>
   1f9fc:	mov	r1, r4
   1fa00:	mov	r2, r8
   1fa04:	mov	r0, r9
   1fa08:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1fa0c:	mov	fp, r0
   1fa10:	b	1d560 <_start@@Base+0x8880>
   1fa14:	mov	r1, fp
   1fa18:	mov	r2, r8
   1fa1c:	mov	r0, r9
   1fa20:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1fa24:	mov	fp, r0
   1fa28:	b	1d560 <_start@@Base+0x8880>
   1fa2c:	mov	r1, r4
   1fa30:	mov	r2, r8
   1fa34:	mov	r0, r9
   1fa38:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1fa3c:	mov	fp, r0
   1fa40:	b	1d560 <_start@@Base+0x8880>
   1fa44:	mov	r1, fp
   1fa48:	mov	r2, r8
   1fa4c:	mov	r0, r9
   1fa50:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1fa54:	mov	fp, r0
   1fa58:	b	1d560 <_start@@Base+0x8880>
   1fa5c:	mov	r1, r4
   1fa60:	mov	r2, r8
   1fa64:	mov	r0, r9
   1fa68:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1fa6c:	mov	fp, r0
   1fa70:	b	1d560 <_start@@Base+0x8880>
   1fa74:	sub	r3, r8, r4
   1fa78:	cmp	r3, #2
   1fa7c:	ble	208b8 <_start@@Base+0xbbd8>
   1fa80:	mov	r2, r8
   1fa84:	mov	r1, r4
   1fa88:	mov	r0, r9
   1fa8c:	bl	1c17c <_start@@Base+0x749c>
   1fa90:	cmp	r4, r0
   1fa94:	mov	fp, r0
   1fa98:	beq	208b4 <_start@@Base+0xbbd4>
   1fa9c:	ldr	r0, [r9]
   1faa0:	bl	27228 <flatcc_builder_start_offset_vector@@Base>
   1faa4:	cmp	r0, #0
   1faa8:	bne	1ccf0 <_start@@Base+0x8010>
   1faac:	mov	r1, fp
   1fab0:	add	r3, sp, #328	; 0x148
   1fab4:	mov	r2, r8
   1fab8:	mov	r0, r9
   1fabc:	bl	1ad34 <_start@@Base+0x6054>
   1fac0:	ldr	r3, [sp, #328]	; 0x148
   1fac4:	mov	fp, r0
   1fac8:	cmp	r3, #0
   1facc:	beq	1fb38 <_start@@Base+0xae58>
   1fad0:	add	r4, sp, #332	; 0x14c
   1fad4:	mov	r1, fp
   1fad8:	mov	r3, r4
   1fadc:	mov	r2, r8
   1fae0:	mov	r0, r9
   1fae4:	bl	31d48 <flatcc_json_parser_build_string@@Base>
   1fae8:	ldr	r3, [sp, #332]	; 0x14c
   1faec:	mov	fp, r0
   1faf0:	mov	r1, #1
   1faf4:	cmp	r3, #0
   1faf8:	beq	1ccf0 <_start@@Base+0x8010>
   1fafc:	ldr	r0, [r9]
   1fb00:	bl	2677c <flatcc_builder_extend_offset_vector@@Base>
   1fb04:	subs	ip, r0, #0
   1fb08:	add	r3, sp, #328	; 0x148
   1fb0c:	mov	r2, r8
   1fb10:	mov	r1, fp
   1fb14:	mov	r0, r9
   1fb18:	beq	1ccf0 <_start@@Base+0x8010>
   1fb1c:	ldr	lr, [sp, #332]	; 0x14c
   1fb20:	str	lr, [ip]
   1fb24:	bl	194f8 <_start@@Base+0x4818>
   1fb28:	ldr	r3, [sp, #328]	; 0x148
   1fb2c:	mov	fp, r0
   1fb30:	cmp	r3, #0
   1fb34:	bne	1fad4 <_start@@Base+0xadf4>
   1fb38:	ldr	r0, [r9]
   1fb3c:	bl	288a8 <flatcc_builder_end_offset_vector@@Base>
   1fb40:	cmp	r0, #0
   1fb44:	str	r0, [sp, #332]	; 0x14c
   1fb48:	beq	1ccf0 <_start@@Base+0x8010>
   1fb4c:	mov	r1, #28
   1fb50:	ldr	r0, [r9]
   1fb54:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   1fb58:	cmp	r0, #0
   1fb5c:	beq	1ccf0 <_start@@Base+0x8010>
   1fb60:	ldr	r3, [sp, #332]	; 0x14c
   1fb64:	str	r3, [r0]
   1fb68:	b	1d560 <_start@@Base+0x8880>
   1fb6c:	mov	r5, r0
   1fb70:	mov	r1, r5
   1fb74:	mov	r2, r8
   1fb78:	mov	r0, r9
   1fb7c:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1fb80:	mov	fp, r0
   1fb84:	b	1d560 <_start@@Base+0x8880>
   1fb88:	mov	r1, fp
   1fb8c:	mov	r2, r8
   1fb90:	mov	r0, r9
   1fb94:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1fb98:	mov	fp, r0
   1fb9c:	b	1d560 <_start@@Base+0x8880>
   1fba0:	mov	r1, fp
   1fba4:	mov	r2, r8
   1fba8:	mov	r0, r9
   1fbac:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1fbb0:	mov	fp, r0
   1fbb4:	b	1d560 <_start@@Base+0x8880>
   1fbb8:	add	fp, fp, #8
   1fbbc:	mov	r1, r8
   1fbc0:	mov	r0, fp
   1fbc4:	mov	sl, #0
   1fbc8:	bl	14dd0 <_start@@Base+0xf0>
   1fbcc:	and	r3, r1, #-16777216	; 0xff000000
   1fbd0:	str	sl, [sp, #280]	; 0x118
   1fbd4:	str	r3, [sp, #284]	; 0x11c
   1fbd8:	add	r3, sp, #280	; 0x118
   1fbdc:	ldrd	r2, [r3]
   1fbe0:	cmp	r3, #1627389952	; 0x61000000
   1fbe4:	cmpeq	r2, #0
   1fbe8:	bne	209c8 <_start@@Base+0xbce8>
   1fbec:	sub	r3, r8, fp
   1fbf0:	cmp	r3, #1
   1fbf4:	ble	20eb0 <_start@@Base+0xc1d0>
   1fbf8:	mov	r2, r8
   1fbfc:	mov	r1, fp
   1fc00:	mov	r0, r9
   1fc04:	bl	1b80c <_start@@Base+0x6b2c>
   1fc08:	cmp	fp, r0
   1fc0c:	mov	r4, r0
   1fc10:	beq	20eb0 <_start@@Base+0xc1d0>
   1fc14:	add	r5, sp, #360	; 0x168
   1fc18:	mov	r1, r0
   1fc1c:	str	sl, [sp, #360]	; 0x168
   1fc20:	mov	r2, r8
   1fc24:	mov	r3, r5
   1fc28:	mov	r0, r9
   1fc2c:	bl	17f20 <_start@@Base+0x3240>
   1fc30:	cmp	r0, r4
   1fc34:	mov	fp, r0
   1fc38:	beq	21160 <_start@@Base+0xc480>
   1fc3c:	ldr	r3, [sp, #360]	; 0x168
   1fc40:	cmp	r3, #0
   1fc44:	bne	1fc54 <_start@@Base+0xaf74>
   1fc48:	ldr	r3, [r9, #8]
   1fc4c:	tst	r3, #2
   1fc50:	beq	1d560 <_start@@Base+0x8880>
   1fc54:	mov	r3, #4
   1fc58:	mov	r1, #20
   1fc5c:	ldr	r0, [r9]
   1fc60:	mov	r2, r3
   1fc64:	bl	29bc0 <flatcc_builder_table_add@@Base>
   1fc68:	cmp	r0, #0
   1fc6c:	beq	1ccf0 <_start@@Base+0x8010>
   1fc70:	ldr	r3, [sp, #360]	; 0x168
   1fc74:	str	r3, [r0]
   1fc78:	b	1d560 <_start@@Base+0x8880>
   1fc7c:	mov	r5, r0
   1fc80:	mov	r1, r5
   1fc84:	mov	r2, r8
   1fc88:	mov	r0, r9
   1fc8c:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1fc90:	mov	fp, r0
   1fc94:	b	1d560 <_start@@Base+0x8880>
   1fc98:	andeq	r0, r0, r0
   1fc9c:	strbtvc	r6, [r1], -r0, lsl #24
   1fca0:	andeq	r8, r5, r8, lsl r1
   1fca4:	sub	r3, r8, fp
   1fca8:	cmp	r3, #8
   1fcac:	ble	20c6c <_start@@Base+0xbf8c>
   1fcb0:	mov	r2, r8
   1fcb4:	mov	r1, fp
   1fcb8:	mov	r0, r9
   1fcbc:	bl	1b694 <_start@@Base+0x69b4>
   1fcc0:	cmp	fp, r0
   1fcc4:	mov	r4, r0
   1fcc8:	beq	20c6c <_start@@Base+0xbf8c>
   1fccc:	mov	ip, #0
   1fcd0:	add	sl, sp, #360	; 0x168
   1fcd4:	mov	r1, r0
   1fcd8:	mov	r3, sl
   1fcdc:	mov	r2, r8
   1fce0:	mov	r0, r9
   1fce4:	str	ip, [sp, #360]	; 0x168
   1fce8:	bl	17d90 <_start@@Base+0x30b0>
   1fcec:	cmp	r0, r4
   1fcf0:	mov	fp, r0
   1fcf4:	beq	21048 <_start@@Base+0xc368>
   1fcf8:	ldr	r3, [sp, #360]	; 0x168
   1fcfc:	cmp	r3, #0
   1fd00:	bne	1fd10 <_start@@Base+0xb030>
   1fd04:	ldr	r3, [r9, #8]
   1fd08:	tst	r3, #2
   1fd0c:	beq	1d560 <_start@@Base+0x8880>
   1fd10:	mov	r3, #4
   1fd14:	mov	r1, #17
   1fd18:	ldr	r0, [r9]
   1fd1c:	mov	r2, r3
   1fd20:	bl	29bc0 <flatcc_builder_table_add@@Base>
   1fd24:	cmp	r0, #0
   1fd28:	beq	1ccf0 <_start@@Base+0x8010>
   1fd2c:	ldr	r3, [sp, #360]	; 0x168
   1fd30:	str	r3, [r0]
   1fd34:	b	1d560 <_start@@Base+0x8880>
   1fd38:	mov	r1, fp
   1fd3c:	mov	r2, r8
   1fd40:	mov	r0, r9
   1fd44:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1fd48:	mov	fp, r0
   1fd4c:	b	1d560 <_start@@Base+0x8880>
   1fd50:	mov	r1, r0
   1fd54:	add	r0, sp, #360	; 0x168
   1fd58:	ldr	r3, [pc, #-192]	; 1fca0 <_start@@Base+0xafc0>
   1fd5c:	mov	r2, r8
   1fd60:	str	r0, [sp]
   1fd64:	mov	r0, r9
   1fd68:	bl	1a1cc <_start@@Base+0x54ec>
   1fd6c:	cmp	r8, r0
   1fd70:	cmpne	r0, r5
   1fd74:	mov	fp, r0
   1fd78:	bne	1da64 <_start@@Base+0x8d84>
   1fd7c:	b	1ccf0 <_start@@Base+0x8010>
   1fd80:	mov	fp, r0
   1fd84:	b	1ccf0 <_start@@Base+0x8010>
   1fd88:	mov	r1, r7
   1fd8c:	mov	r2, r8
   1fd90:	mov	r0, r9
   1fd94:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1fd98:	mov	r4, r0
   1fd9c:	b	1e2b0 <_start@@Base+0x95d0>
   1fda0:	mov	r1, r7
   1fda4:	mov	r3, #5
   1fda8:	mov	r2, r8
   1fdac:	mov	r0, r9
   1fdb0:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1fdb4:	mov	r7, r0
   1fdb8:	b	1e2ec <_start@@Base+0x960c>
   1fdbc:	mov	r1, r7
   1fdc0:	mov	r2, r8
   1fdc4:	mov	r0, r9
   1fdc8:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   1fdcc:	mov	r7, r0
   1fdd0:	b	1ef90 <_start@@Base+0xa2b0>
   1fdd4:	and	r3, r1, #-16777216	; 0xff000000
   1fdd8:	add	r1, pc, #1008	; 0x3f0
   1fddc:	ldrd	r0, [r1]
   1fde0:	str	r3, [sp, #128]	; 0x80
   1fde4:	str	fp, [sp, #132]	; 0x84
   1fde8:	ldrd	r2, [sp, #128]	; 0x80
   1fdec:	cmp	r3, r1
   1fdf0:	cmpeq	r2, r0
   1fdf4:	bne	1f764 <_start@@Base+0xaa84>
   1fdf8:	cmp	ip, #5
   1fdfc:	ble	1f764 <_start@@Base+0xaa84>
   1fe00:	mov	r2, r8
   1fe04:	mov	r1, r4
   1fe08:	mov	r0, r9
   1fe0c:	bl	1b51c <_start@@Base+0x683c>
   1fe10:	cmp	r4, r0
   1fe14:	mov	r7, r0
   1fe18:	beq	1f764 <_start@@Base+0xaa84>
   1fe1c:	add	r3, sp, #348	; 0x15c
   1fe20:	mov	r2, #0
   1fe24:	str	r5, [sp, #352]	; 0x160
   1fe28:	add	r1, sp, #360	; 0x168
   1fe2c:	cmp	r8, r0
   1fe30:	strh	r5, [r3]
   1fe34:	mov	r3, #0
   1fe38:	strd	r2, [r1]
   1fe3c:	beq	20510 <_start@@Base+0xb830>
   1fe40:	mov	r0, r1
   1fe44:	add	r3, sp, #352	; 0x160
   1fe48:	mov	r2, r8
   1fe4c:	mov	r1, r7
   1fe50:	str	r0, [sp]
   1fe54:	mov	r0, r9
   1fe58:	bl	316c0 <flatcc_json_parser_integer@@Base>
   1fe5c:	cmp	r7, r0
   1fe60:	mov	r4, r0
   1fe64:	bne	20564 <_start@@Base+0xb884>
   1fe68:	add	ip, sp, #348	; 0x15c
   1fe6c:	ldr	r3, [pc, #868]	; 201d8 <_start@@Base+0xb4f8>
   1fe70:	mov	r2, r8
   1fe74:	mov	r1, r4
   1fe78:	mov	r0, r9
   1fe7c:	str	ip, [sp]
   1fe80:	bl	1a968 <_start@@Base+0x5c88>
   1fe84:	cmp	r8, r0
   1fe88:	cmpne	r0, r4
   1fe8c:	mov	r5, r0
   1fe90:	beq	20dc0 <_start@@Base+0xc0e0>
   1fe94:	add	r3, sp, #348	; 0x15c
   1fe98:	ldrh	r2, [r3]
   1fe9c:	cmp	r2, #0
   1fea0:	bne	1feb0 <_start@@Base+0xb1d0>
   1fea4:	ldr	r3, [r9, #8]
   1fea8:	tst	r3, #2
   1feac:	beq	1f778 <_start@@Base+0xaa98>
   1feb0:	mov	r3, #2
   1feb4:	ldr	r0, [r9]
   1feb8:	mov	r2, r3
   1febc:	mov	r1, r3
   1fec0:	bl	29bc0 <flatcc_builder_table_add@@Base>
   1fec4:	cmp	r0, #0
   1fec8:	beq	20dc0 <_start@@Base+0xc0e0>
   1fecc:	add	r3, sp, #348	; 0x15c
   1fed0:	ldrh	r3, [r3]
   1fed4:	strh	r3, [r0]
   1fed8:	b	1f778 <_start@@Base+0xaa98>
   1fedc:	mov	r1, r7
   1fee0:	mov	r3, #5
   1fee4:	mov	r2, r8
   1fee8:	mov	r0, r9
   1feec:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1fef0:	mov	r7, r0
   1fef4:	b	1efcc <_start@@Base+0xa2ec>
   1fef8:	mov	r1, r4
   1fefc:	mov	r3, #5
   1ff00:	mov	r2, r8
   1ff04:	mov	r0, r9
   1ff08:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1ff0c:	mov	r4, r0
   1ff10:	b	1d85c <_start@@Base+0x8b7c>
   1ff14:	mov	r1, r0
   1ff18:	add	r0, sp, #360	; 0x168
   1ff1c:	ldr	r3, [pc, #696]	; 201dc <_start@@Base+0xb4fc>
   1ff20:	mov	r2, r8
   1ff24:	str	r0, [sp]
   1ff28:	mov	r0, r9
   1ff2c:	bl	1a5c4 <_start@@Base+0x58e4>
   1ff30:	cmp	r8, r0
   1ff34:	cmpne	r4, r0
   1ff38:	beq	1ff74 <_start@@Base+0xb294>
   1ff3c:	mov	r4, r0
   1ff40:	b	1e368 <_start@@Base+0x9688>
   1ff44:	mov	r1, r0
   1ff48:	add	r0, sp, #360	; 0x168
   1ff4c:	ldr	r3, [pc, #652]	; 201e0 <_start@@Base+0xb500>
   1ff50:	mov	r2, r8
   1ff54:	str	r0, [sp]
   1ff58:	mov	r0, r9
   1ff5c:	bl	1a5c4 <_start@@Base+0x58e4>
   1ff60:	cmp	r8, r0
   1ff64:	cmpne	r4, r0
   1ff68:	beq	1ff74 <_start@@Base+0xb294>
   1ff6c:	mov	r4, r0
   1ff70:	b	1e2a4 <_start@@Base+0x95c4>
   1ff74:	mov	r1, r0
   1ff78:	mov	r3, #33	; 0x21
   1ff7c:	strd	sl, [sp, #192]	; 0xc0
   1ff80:	mov	r2, r8
   1ff84:	mov	r0, r9
   1ff88:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   1ff8c:	mov	r7, r0
   1ff90:	add	r3, sp, #328	; 0x148
   1ff94:	mov	r1, r7
   1ff98:	mov	r2, r8
   1ff9c:	mov	r0, r9
   1ffa0:	bl	194f8 <_start@@Base+0x4818>
   1ffa4:	ldr	r3, [sp, #328]	; 0x148
   1ffa8:	mov	fp, r0
   1ffac:	cmp	r3, #0
   1ffb0:	bne	1e1f4 <_start@@Base+0x9514>
   1ffb4:	add	r3, sp, #304	; 0x130
   1ffb8:	ldrd	r6, [r3]
   1ffbc:	ldr	r0, [r9]
   1ffc0:	bl	284e4 <flatcc_builder_end_vector@@Base>
   1ffc4:	cmp	r0, #0
   1ffc8:	str	r0, [sp, #332]	; 0x14c
   1ffcc:	beq	1ccf0 <_start@@Base+0x8010>
   1ffd0:	mov	r1, #29
   1ffd4:	ldr	r0, [r9]
   1ffd8:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   1ffdc:	cmp	r0, #0
   1ffe0:	beq	1ccf0 <_start@@Base+0x8010>
   1ffe4:	ldr	r3, [sp, #332]	; 0x14c
   1ffe8:	str	r3, [r0]
   1ffec:	b	1d560 <_start@@Base+0x8880>
   1fff0:	strd	sl, [sp, #192]	; 0xc0
   1fff4:	b	1ff90 <_start@@Base+0xb2b0>
   1fff8:	add	r1, r5, #1
   1fffc:	sub	r3, r8, r1
   20000:	cmp	r3, #1
   20004:	ble	20018 <_start@@Base+0xb338>
   20008:	ldrb	r3, [r5, #1]
   2000c:	cmp	r3, #32
   20010:	bhi	204cc <_start@@Base+0xb7ec>
   20014:	beq	205f4 <_start@@Base+0xb914>
   20018:	mov	r2, r8
   2001c:	mov	r0, r9
   20020:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   20024:	mov	r4, r0
   20028:	ldr	r3, [sp, #340]	; 0x154
   2002c:	b	1f7ec <_start@@Base+0xab0c>
   20030:	sub	r2, r8, r7
   20034:	cmp	r2, #7
   20038:	ble	1fdbc <_start@@Base+0xb0dc>
   2003c:	mov	r1, r7
   20040:	mov	r2, r8
   20044:	mov	r0, r9
   20048:	bl	1b8c8 <_start@@Base+0x6be8>
   2004c:	cmp	r7, r0
   20050:	mov	r1, r0
   20054:	beq	1fdbc <_start@@Base+0xb0dc>
   20058:	mov	sl, #1
   2005c:	mov	r2, r8
   20060:	add	r3, sp, #360	; 0x168
   20064:	mov	r0, r9
   20068:	str	sl, [sp]
   2006c:	bl	31830 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   20070:	ldr	r2, [sp, #360]	; 0x168
   20074:	mov	r7, r0
   20078:	cmp	r2, #0
   2007c:	bne	1ef74 <_start@@Base+0xa294>
   20080:	b	1f090 <_start@@Base+0xa3b0>
   20084:	mov	r3, #0
   20088:	strd	sl, [sp, #232]	; 0xe8
   2008c:	mov	fp, r5
   20090:	ldrd	r6, [sp, #56]	; 0x38
   20094:	str	r3, [sp, #340]	; 0x154
   20098:	b	1f800 <_start@@Base+0xab20>
   2009c:	cmp	ip, #3
   200a0:	ble	1f764 <_start@@Base+0xaa84>
   200a4:	ldrb	r3, [r4, #3]
   200a8:	cmp	r3, #34	; 0x22
   200ac:	bne	1f764 <_start@@Base+0xaa84>
   200b0:	add	r1, r4, #4
   200b4:	mov	r2, r8
   200b8:	mov	r0, r9
   200bc:	bl	16bf0 <_start@@Base+0x1f10>
   200c0:	cmp	r8, r0
   200c4:	mov	r1, r0
   200c8:	beq	200d8 <_start@@Base+0xb3f8>
   200cc:	ldrb	r3, [r0]
   200d0:	cmp	r3, #58	; 0x3a
   200d4:	beq	20fc8 <_start@@Base+0xc2e8>
   200d8:	mov	r3, #4
   200dc:	mov	r2, r8
   200e0:	mov	r0, r9
   200e4:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   200e8:	mov	r7, r0
   200ec:	cmp	r4, r7
   200f0:	beq	1f764 <_start@@Base+0xaa84>
   200f4:	mov	r0, #0
   200f8:	mov	r1, #0
   200fc:	add	r2, sp, #352	; 0x160
   20100:	mov	r3, #0
   20104:	cmp	r8, r7
   20108:	strd	r0, [r2]
   2010c:	add	r2, sp, #360	; 0x168
   20110:	str	r3, [sp, #348]	; 0x15c
   20114:	strd	r0, [r2]
   20118:	beq	205ec <_start@@Base+0xb90c>
   2011c:	mov	r0, r2
   20120:	add	r3, sp, #348	; 0x15c
   20124:	mov	r2, r8
   20128:	mov	r1, r7
   2012c:	str	r0, [sp]
   20130:	mov	r0, r9
   20134:	bl	316c0 <flatcc_json_parser_integer@@Base>
   20138:	cmp	r7, r0
   2013c:	mov	r5, r0
   20140:	bne	20644 <_start@@Base+0xb964>
   20144:	add	ip, sp, #352	; 0x160
   20148:	ldr	r3, [pc, #148]	; 201e4 <_start@@Base+0xb504>
   2014c:	mov	r2, r8
   20150:	mov	r1, r5
   20154:	mov	r0, r9
   20158:	str	ip, [sp]
   2015c:	bl	1ab44 <_start@@Base+0x5e64>
   20160:	cmp	r8, r0
   20164:	cmpne	r0, r5
   20168:	beq	204dc <_start@@Base+0xb7fc>
   2016c:	add	r3, sp, #352	; 0x160
   20170:	mov	r5, r0
   20174:	ldrd	r2, [r3]
   20178:	orrs	r3, r2, r3
   2017c:	bne	2018c <_start@@Base+0xb4ac>
   20180:	ldr	r3, [r9, #8]
   20184:	tst	r3, #2
   20188:	beq	1f778 <_start@@Base+0xaa98>
   2018c:	mov	r3, #8
   20190:	mov	r1, #1
   20194:	ldr	r0, [r9]
   20198:	mov	r2, r3
   2019c:	bl	29bc0 <flatcc_builder_table_add@@Base>
   201a0:	cmp	r0, #0
   201a4:	beq	20dc0 <_start@@Base+0xc0e0>
   201a8:	add	r3, sp, #352	; 0x160
   201ac:	ldrd	r2, [r3]
   201b0:	strd	r2, [r0]
   201b4:	b	1f778 <_start@@Base+0xaa98>
   201b8:	ldrb	r3, [r5, #1]
   201bc:	cmp	r3, #32
   201c0:	addhi	r5, r5, #1
   201c4:	bls	1f794 <_start@@Base+0xaab4>
   201c8:	b	1f7a8 <_start@@Base+0xaac8>
   201cc:	nop	{0}
   201d0:	strvc	r0, [r0], #-0
   201d4:	cmnvs	pc, #461373440	; 0x1b800000
   201d8:			; <UNDEFINED> instruction: 0x000581bc
   201dc:	muleq	r5, r8, r1
   201e0:	andeq	r8, r5, r4, lsr #3
   201e4:	andeq	r8, r5, r8, asr #3
   201e8:	andeq	r8, r5, r8, asr r1
   201ec:	add	r4, r5, #1
   201f0:	sub	r3, r8, r4
   201f4:	cmp	r3, #1
   201f8:	ble	2020c <_start@@Base+0xb52c>
   201fc:	ldrb	r3, [r5, #1]
   20200:	cmp	r3, #32
   20204:	bhi	20220 <_start@@Base+0xb540>
   20208:	beq	2079c <_start@@Base+0xbabc>
   2020c:	mov	r1, r4
   20210:	mov	r2, r8
   20214:	mov	r0, r9
   20218:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   2021c:	mov	r4, r0
   20220:	cmp	r8, r4
   20224:	beq	20ae0 <_start@@Base+0xbe00>
   20228:	ldrb	r3, [r4]
   2022c:	cmp	r3, #125	; 0x7d
   20230:	movne	r3, #1
   20234:	strne	r3, [sp, #340]	; 0x154
   20238:	bne	1d844 <_start@@Base+0x8b64>
   2023c:	mov	r3, #0
   20240:	add	r1, r4, #1
   20244:	mov	r2, r8
   20248:	mov	r0, r9
   2024c:	str	r3, [sp, #340]	; 0x154
   20250:	bl	16bf0 <_start@@Base+0x1f10>
   20254:	mov	r4, r0
   20258:	ldr	r3, [sp, #340]	; 0x154
   2025c:	b	1f7ec <_start@@Base+0xab0c>
   20260:	ldrb	r2, [fp, #1]
   20264:	add	r1, fp, #1
   20268:	cmp	r2, #114	; 0x72
   2026c:	bne	1d6e0 <_start@@Base+0x8a00>
   20270:	ldrb	r2, [r1, #1]!
   20274:	cmp	r2, #117	; 0x75
   20278:	bne	1d6e0 <_start@@Base+0x8a00>
   2027c:	ldrb	r2, [r1, #1]
   20280:	cmp	r2, #101	; 0x65
   20284:	bne	1d6e0 <_start@@Base+0x8a00>
   20288:	mov	r3, #1
   2028c:	add	r4, fp, #4
   20290:	mov	r2, #1
   20294:	strb	r3, [sp, #352]	; 0x160
   20298:	b	1d734 <_start@@Base+0x8a54>
   2029c:	mov	r1, fp
   202a0:	mov	r2, r8
   202a4:	mov	r0, r9
   202a8:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   202ac:	mov	fp, r0
   202b0:	b	1d560 <_start@@Base+0x8880>
   202b4:	mov	r1, r0
   202b8:	add	r0, sp, #360	; 0x168
   202bc:	ldr	r3, [pc, #-220]	; 201e8 <_start@@Base+0xb508>
   202c0:	mov	r2, r8
   202c4:	str	r0, [sp]
   202c8:	mov	r0, r9
   202cc:	bl	19078 <_start@@Base+0x4398>
   202d0:	cmp	r8, r0
   202d4:	cmpne	fp, r0
   202d8:	beq	20e94 <_start@@Base+0xc1b4>
   202dc:	mov	fp, r0
   202e0:	b	1eb28 <_start@@Base+0x9e48>
   202e4:	mov	r1, fp
   202e8:	mov	r2, r8
   202ec:	mov	r0, r9
   202f0:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   202f4:	mov	fp, r0
   202f8:	b	1d560 <_start@@Base+0x8880>
   202fc:	mov	fp, r8
   20300:	b	1ce8c <_start@@Base+0x81ac>
   20304:	mov	r1, fp
   20308:	mov	r2, r8
   2030c:	mov	r0, r9
   20310:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   20314:	mov	fp, r0
   20318:	b	1d560 <_start@@Base+0x8880>
   2031c:	mov	r1, fp
   20320:	mov	r2, r8
   20324:	mov	r0, r9
   20328:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   2032c:	mov	fp, r0
   20330:	b	1d560 <_start@@Base+0x8880>
   20334:	ldr	r1, [sp, #352]	; 0x160
   20338:	add	r3, sp, #360	; 0x168
   2033c:	ldrd	r2, [r3]
   20340:	cmp	r1, #0
   20344:	beq	20694 <_start@@Base+0xb9b4>
   20348:	cmp	r3, #0
   2034c:	cmpeq	r2, #128	; 0x80
   20350:	rsbls	r2, r2, #0
   20354:	sxtbls	r2, r2
   20358:	strbls	r2, [sp, #348]	; 0x15c
   2035c:	bls	1cec0 <_start@@Base+0x81e0>
   20360:	mov	r1, r0
   20364:	mov	r3, #8
   20368:	mov	r2, r8
   2036c:	mov	r0, r9
   20370:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   20374:	mov	fp, r0
   20378:	cmp	r4, fp
   2037c:	beq	1ce8c <_start@@Base+0x81ac>
   20380:	add	r3, sp, #348	; 0x15c
   20384:	ldrsb	r2, [r3]
   20388:	b	1cec0 <_start@@Base+0x81e0>
   2038c:	mov	r3, #0
   20390:	add	r4, fp, #16
   20394:	mov	r1, r8
   20398:	mov	r0, r4
   2039c:	str	r3, [sp, #272]	; 0x110
   203a0:	bl	14dd0 <_start@@Base+0xf0>
   203a4:	and	r3, r1, #-16777216	; 0xff000000
   203a8:	str	r3, [sp, #276]	; 0x114
   203ac:	add	r3, sp, #272	; 0x110
   203b0:	ldrd	r2, [r3]
   203b4:	cmp	r3, #1929379840	; 0x73000000
   203b8:	cmpeq	r2, #0
   203bc:	bne	206c4 <_start@@Base+0xb9e4>
   203c0:	sub	r3, r8, r4
   203c4:	cmp	r3, #1
   203c8:	ble	20b0c <_start@@Base+0xbe2c>
   203cc:	mov	r2, r8
   203d0:	mov	r1, r4
   203d4:	mov	r0, r9
   203d8:	bl	1b80c <_start@@Base+0x6b2c>
   203dc:	cmp	r4, r0
   203e0:	mov	fp, r0
   203e4:	beq	20b08 <_start@@Base+0xbe28>
   203e8:	mov	r2, #8
   203ec:	mvn	r3, #-536870912	; 0xe0000000
   203f0:	ldr	r0, [r9]
   203f4:	mov	r1, r2
   203f8:	bl	270b0 <flatcc_builder_start_vector@@Base>
   203fc:	cmp	r0, #0
   20400:	bne	1ccf0 <_start@@Base+0x8010>
   20404:	mov	r1, fp
   20408:	add	r3, sp, #328	; 0x148
   2040c:	mov	r2, r8
   20410:	mov	r0, r9
   20414:	bl	1ad34 <_start@@Base+0x6054>
   20418:	ldr	r3, [sp, #328]	; 0x148
   2041c:	mov	fp, r0
   20420:	cmp	r3, #0
   20424:	beq	20ef8 <_start@@Base+0xc218>
   20428:	vldr	d8, [pc, #952]	; 207e8 <_start@@Base+0xbb08>
   2042c:	ldr	sl, [pc, #956]	; 207f0 <_start@@Base+0xbb10>
   20430:	b	20460 <_start@@Base+0xb780>
   20434:	vldr	d7, [sp, #360]	; 0x168
   20438:	add	r3, sp, #328	; 0x148
   2043c:	mov	r1, r4
   20440:	mov	r2, r8
   20444:	mov	r0, r9
   20448:	vstr	d7, [r5]
   2044c:	bl	194f8 <_start@@Base+0x4818>
   20450:	ldr	r3, [sp, #328]	; 0x148
   20454:	mov	fp, r0
   20458:	cmp	r3, #0
   2045c:	beq	20ef8 <_start@@Base+0xc218>
   20460:	mov	r1, #1
   20464:	ldr	r0, [r9]
   20468:	vstr	d8, [sp, #360]	; 0x168
   2046c:	bl	2640c <flatcc_builder_extend_vector@@Base>
   20470:	subs	r5, r0, #0
   20474:	mov	r1, fp
   20478:	add	r3, sp, #360	; 0x168
   2047c:	mov	r2, r8
   20480:	mov	r0, r9
   20484:	beq	1ccf0 <_start@@Base+0x8010>
   20488:	bl	2ee30 <flatcc_json_parser_double@@Base>
   2048c:	cmp	fp, r0
   20490:	mov	r4, r0
   20494:	bne	20434 <_start@@Base+0xb754>
   20498:	add	r1, sp, #360	; 0x168
   2049c:	mov	r3, sl
   204a0:	mov	r2, r8
   204a4:	mov	r0, r9
   204a8:	str	r1, [sp]
   204ac:	mov	r1, r4
   204b0:	bl	19210 <_start@@Base+0x4530>
   204b4:	cmp	r8, r0
   204b8:	cmpne	r4, r0
   204bc:	mov	fp, r0
   204c0:	mov	r4, r0
   204c4:	bne	20434 <_start@@Base+0xb754>
   204c8:	b	1ccf0 <_start@@Base+0x8010>
   204cc:	strd	sl, [sp, #232]	; 0xe8
   204d0:	mov	fp, r1
   204d4:	ldrd	r6, [sp, #56]	; 0x38
   204d8:	b	1f800 <_start@@Base+0xab20>
   204dc:	ldrd	r6, [sp, #56]	; 0x38
   204e0:	strd	sl, [sp, #232]	; 0xe8
   204e4:	mov	fp, r0
   204e8:	mov	r1, fp
   204ec:	mov	r3, #33	; 0x21
   204f0:	mov	r2, r8
   204f4:	mov	r0, r9
   204f8:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   204fc:	ldr	r3, [sp, #332]	; 0x14c
   20500:	mov	fp, r0
   20504:	cmp	r3, #0
   20508:	bne	1f820 <_start@@Base+0xab40>
   2050c:	b	1ccf0 <_start@@Base+0x8010>
   20510:	mov	r4, r8
   20514:	b	1fe68 <_start@@Base+0xb188>
   20518:	ldr	r0, [r9]
   2051c:	bl	284e4 <flatcc_builder_end_vector@@Base>
   20520:	cmp	r0, #0
   20524:	str	r0, [sp, #332]	; 0x14c
   20528:	beq	1ccf0 <_start@@Base+0x8010>
   2052c:	mov	r1, #30
   20530:	ldr	r0, [r9]
   20534:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   20538:	cmp	r0, #0
   2053c:	beq	1ccf0 <_start@@Base+0x8010>
   20540:	ldr	r3, [sp, #332]	; 0x14c
   20544:	str	r3, [r0]
   20548:	b	1d560 <_start@@Base+0x8880>
   2054c:	mov	r1, fp
   20550:	mov	r2, r8
   20554:	mov	r0, r9
   20558:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   2055c:	mov	fp, r0
   20560:	b	1d560 <_start@@Base+0x8880>
   20564:	ldr	r3, [sp, #352]	; 0x160
   20568:	cmp	r3, r5
   2056c:	bne	20dd0 <_start@@Base+0xc0f0>
   20570:	add	r3, sp, #360	; 0x168
   20574:	mov	r1, #0
   20578:	ldrd	r2, [r3]
   2057c:	movw	r0, #65535	; 0xffff
   20580:	cmp	r3, r1
   20584:	cmpeq	r2, r0
   20588:	bhi	20e78 <_start@@Base+0xc198>
   2058c:	uxth	r2, r2
   20590:	add	r3, sp, #348	; 0x15c
   20594:	mov	r5, r4
   20598:	strh	r2, [r3]
   2059c:	b	1fe9c <_start@@Base+0xb1bc>
   205a0:	mov	r1, fp
   205a4:	mov	r2, r8
   205a8:	mov	r0, r9
   205ac:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   205b0:	mov	fp, r0
   205b4:	b	1d560 <_start@@Base+0x8880>
   205b8:	mov	r1, r4
   205bc:	mov	r2, r8
   205c0:	mov	r0, r9
   205c4:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   205c8:	mov	fp, r0
   205cc:	b	1d560 <_start@@Base+0x8880>
   205d0:	mov	r4, r0
   205d4:	mov	r1, r4
   205d8:	mov	r2, r8
   205dc:	mov	r0, r9
   205e0:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   205e4:	mov	fp, r0
   205e8:	b	1d560 <_start@@Base+0x8880>
   205ec:	mov	r5, r8
   205f0:	b	20144 <_start@@Base+0xb464>
   205f4:	ldrb	r3, [r5, #2]
   205f8:	cmp	r3, #32
   205fc:	bls	20018 <_start@@Base+0xb338>
   20600:	strd	sl, [sp, #232]	; 0xe8
   20604:	add	fp, r5, #2
   20608:	ldrd	r6, [sp, #56]	; 0x38
   2060c:	b	1f800 <_start@@Base+0xab20>
   20610:	ldr	r0, [r9]
   20614:	bl	284e4 <flatcc_builder_end_vector@@Base>
   20618:	cmp	r0, #0
   2061c:	str	r0, [sp, #332]	; 0x14c
   20620:	beq	1ccf0 <_start@@Base+0x8010>
   20624:	mov	r1, #24
   20628:	ldr	r0, [r9]
   2062c:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   20630:	cmp	r0, #0
   20634:	beq	1ccf0 <_start@@Base+0x8010>
   20638:	ldr	r3, [sp, #332]	; 0x14c
   2063c:	str	r3, [r0]
   20640:	b	1d560 <_start@@Base+0x8880>
   20644:	ldr	r1, [sp, #348]	; 0x15c
   20648:	add	r3, sp, #360	; 0x168
   2064c:	ldrd	r2, [r3]
   20650:	cmp	r1, #0
   20654:	beq	20b24 <_start@@Base+0xbe44>
   20658:	cmp	r3, #-2147483648	; 0x80000000
   2065c:	cmpeq	r2, #0
   20660:	bhi	20fe0 <_start@@Base+0xc300>
   20664:	rsbs	r2, r2, #0
   20668:	add	r1, sp, #352	; 0x160
   2066c:	rsc	r3, r3, #0
   20670:	strd	r2, [r1]
   20674:	b	20178 <_start@@Base+0xb498>
   20678:	mov	r4, r0
   2067c:	mov	r1, r4
   20680:	mov	r2, r8
   20684:	mov	r0, r9
   20688:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   2068c:	mov	fp, r0
   20690:	b	1d560 <_start@@Base+0x8880>
   20694:	cmp	r3, #0
   20698:	cmpeq	r2, #127	; 0x7f
   2069c:	sxtbls	r2, r2
   206a0:	strbls	r2, [sp, #348]	; 0x15c
   206a4:	bls	1cec0 <_start@@Base+0x81e0>
   206a8:	mov	r1, r0
   206ac:	mov	r3, #7
   206b0:	mov	r2, r8
   206b4:	mov	r0, r9
   206b8:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   206bc:	mov	fp, r0
   206c0:	b	20378 <_start@@Base+0xb698>
   206c4:	mov	r1, r4
   206c8:	mov	r2, r8
   206cc:	mov	r0, r9
   206d0:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   206d4:	mov	fp, r0
   206d8:	b	1d560 <_start@@Base+0x8880>
   206dc:	mov	r1, r0
   206e0:	add	r0, sp, #360	; 0x168
   206e4:	ldr	r3, [pc, #264]	; 207f4 <_start@@Base+0xbb14>
   206e8:	mov	r2, r8
   206ec:	str	r0, [sp]
   206f0:	mov	r0, r9
   206f4:	bl	19078 <_start@@Base+0x4398>
   206f8:	cmp	r8, r0
   206fc:	cmpne	fp, r0
   20700:	beq	20e94 <_start@@Base+0xc1b4>
   20704:	mov	fp, r0
   20708:	b	1edf4 <_start@@Base+0xa114>
   2070c:	mov	r1, fp
   20710:	mov	r2, r8
   20714:	mov	r0, r9
   20718:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   2071c:	mov	fp, r0
   20720:	b	1d560 <_start@@Base+0x8880>
   20724:	mov	r1, r0
   20728:	add	r0, sp, #360	; 0x168
   2072c:	ldr	r3, [pc, #196]	; 207f8 <_start@@Base+0xbb18>
   20730:	mov	r2, r8
   20734:	str	r0, [sp]
   20738:	mov	r0, r9
   2073c:	bl	19078 <_start@@Base+0x4398>
   20740:	cmp	r8, r0
   20744:	cmpne	fp, r0
   20748:	beq	20e94 <_start@@Base+0xc1b4>
   2074c:	mov	fp, r0
   20750:	b	1ec6c <_start@@Base+0x9f8c>
   20754:	mov	r3, #29
   20758:	mov	r2, r8
   2075c:	mov	r0, r9
   20760:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   20764:	mov	fp, r0
   20768:	b	1ccf0 <_start@@Base+0x8010>
   2076c:	mov	r1, r0
   20770:	add	r0, sp, #360	; 0x168
   20774:	ldr	r3, [pc, #128]	; 207fc <_start@@Base+0xbb1c>
   20778:	mov	r2, r8
   2077c:	str	r0, [sp]
   20780:	mov	r0, r9
   20784:	bl	19078 <_start@@Base+0x4398>
   20788:	cmp	r8, r0
   2078c:	cmpne	r0, r4
   20790:	mov	fp, r0
   20794:	bne	1de24 <_start@@Base+0x9144>
   20798:	b	1ccf0 <_start@@Base+0x8010>
   2079c:	ldrb	r3, [r5, #2]
   207a0:	cmp	r3, #32
   207a4:	addhi	r4, r5, #2
   207a8:	bls	2020c <_start@@Base+0xb52c>
   207ac:	b	20220 <_start@@Base+0xb540>
   207b0:	ldrb	r1, [r0, #1]
   207b4:	add	r2, r0, #1
   207b8:	cmp	r1, #114	; 0x72
   207bc:	bne	1cfac <_start@@Base+0x82cc>
   207c0:	ldrb	r1, [r2, #1]!
   207c4:	cmp	r1, #117	; 0x75
   207c8:	bne	1cfac <_start@@Base+0x82cc>
   207cc:	ldrb	r2, [r2, #1]
   207d0:	cmp	r2, #101	; 0x65
   207d4:	moveq	r3, #1
   207d8:	addeq	fp, r0, #4
   207dc:	strbeq	r3, [sp, #348]	; 0x15c
   207e0:	bne	1cfac <_start@@Base+0x82cc>
   207e4:	b	1e9a0 <_start@@Base+0x9cc0>
	...
   207f0:	andeq	r8, r5, r4, ror #4
   207f4:	andeq	r8, r5, r4, ror #2
   207f8:	andeq	r8, r5, r0, ror r1
   207fc:	andeq	r8, r5, r0, ror #3
   20800:	ldrdeq	r8, [r5], -r4
   20804:	andeq	r8, r5, r0, lsr r1
   20808:	strdeq	r8, [r5], -r8	; <UNPREDICTABLE>
   2080c:	andeq	r8, r5, r0, lsl r2
   20810:	andeq	r8, r5, r0, asr #4
   20814:	andeq	r8, r5, r8, lsr #4
   20818:	andeq	r8, r5, r8, asr r2
   2081c:	andeq	r8, r5, r4, lsl #4
   20820:	andeq	r8, r5, ip, lsl r2
   20824:	andeq	r8, r5, ip, asr #4
   20828:	andeq	r8, r5, r4, lsr r2
   2082c:	ldr	r3, [sp, #352]	; 0x160
   20830:	cmp	r3, #0
   20834:	str	r3, [sp, #16]
   20838:	bne	20f2c <_start@@Base+0xc24c>
   2083c:	add	r3, sp, #360	; 0x168
   20840:	ldrd	r2, [r3]
   20844:	cmp	r3, #0
   20848:	cmpeq	r2, #255	; 0xff
   2084c:	bhi	20f58 <_start@@Base+0xc278>
   20850:	uxtb	r3, r2
   20854:	mov	fp, r0
   20858:	adds	r3, r3, #0
   2085c:	movne	r3, #1
   20860:	strb	r3, [sp, #348]	; 0x15c
   20864:	b	1e998 <_start@@Base+0x9cb8>
   20868:	mov	r1, r4
   2086c:	mov	r2, r8
   20870:	mov	r0, r9
   20874:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   20878:	mov	fp, r0
   2087c:	b	1d560 <_start@@Base+0x8880>
   20880:	ldrd	r6, [sp, #16]
   20884:	add	r3, sp, #288	; 0x120
   20888:	mov	fp, r0
   2088c:	strd	r4, [r3]
   20890:	ldr	r3, [r9, #20]
   20894:	cmp	r3, #0
   20898:	bne	1f0a0 <_start@@Base+0xa3c0>
   2089c:	ldr	r0, [r9]
   208a0:	bl	281c8 <flatcc_builder_end_table@@Base>
   208a4:	cmp	r0, #0
   208a8:	str	r0, [sp, #332]	; 0x14c
   208ac:	bne	1f0c4 <_start@@Base+0xa3e4>
   208b0:	b	1f0a0 <_start@@Base+0xa3c0>
   208b4:	mov	r4, r0
   208b8:	mov	r1, r4
   208bc:	mov	r2, r8
   208c0:	mov	r0, r9
   208c4:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   208c8:	mov	fp, r0
   208cc:	b	1d560 <_start@@Base+0x8880>
   208d0:	mov	r4, r0
   208d4:	mov	r1, r4
   208d8:	mov	r2, r8
   208dc:	mov	r0, r9
   208e0:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   208e4:	mov	fp, r0
   208e8:	b	1d560 <_start@@Base+0x8880>
   208ec:	mov	r3, #0
   208f0:	add	fp, fp, #8
   208f4:	mov	r1, r8
   208f8:	mov	r0, fp
   208fc:	str	r3, [sp, #296]	; 0x128
   20900:	bl	14dd0 <_start@@Base+0xf0>
   20904:	and	r3, r1, #-16777216	; 0xff000000
   20908:	str	r3, [sp, #300]	; 0x12c
   2090c:	add	r3, sp, #296	; 0x128
   20910:	ldrd	r2, [r3]
   20914:	cmp	r3, #1627389952	; 0x61000000
   20918:	cmpeq	r2, #0
   2091c:	bne	20da8 <_start@@Base+0xc0c8>
   20920:	sub	r3, r8, fp
   20924:	cmp	r3, #1
   20928:	ble	20fb0 <_start@@Base+0xc2d0>
   2092c:	mov	r2, r8
   20930:	mov	r1, fp
   20934:	mov	r0, r9
   20938:	bl	1b80c <_start@@Base+0x6b2c>
   2093c:	cmp	fp, r0
   20940:	mov	r4, r0
   20944:	beq	20fb0 <_start@@Base+0xc2d0>
   20948:	mov	fp, #0
   2094c:	add	r5, sp, #360	; 0x168
   20950:	mov	sl, #0
   20954:	mov	r1, r0
   20958:	mov	r3, r5
   2095c:	mov	r2, r8
   20960:	mov	r0, r9
   20964:	strd	sl, [r5]
   20968:	bl	17644 <_start@@Base+0x2964>
   2096c:	cmp	r0, r4
   20970:	mov	fp, r0
   20974:	beq	211c4 <_start@@Base+0xc4e4>
   20978:	add	r3, sp, #360	; 0x168
   2097c:	ldrd	r2, [r3]
   20980:	orrs	r3, r2, r3
   20984:	bne	20994 <_start@@Base+0xbcb4>
   20988:	ldr	r3, [r9, #8]
   2098c:	tst	r3, #2
   20990:	beq	1d560 <_start@@Base+0x8880>
   20994:	mov	r3, #8
   20998:	mov	r1, #22
   2099c:	ldr	r0, [r9]
   209a0:	mov	r2, r3
   209a4:	bl	29bc0 <flatcc_builder_table_add@@Base>
   209a8:	cmp	r0, #0
   209ac:	beq	1ccf0 <_start@@Base+0x8010>
   209b0:	add	r3, sp, #360	; 0x168
   209b4:	ldrd	r2, [r3]
   209b8:	strd	r2, [r0]
   209bc:	b	1d560 <_start@@Base+0x8880>
   209c0:	mov	fp, r4
   209c4:	b	1dbac <_start@@Base+0x8ecc>
   209c8:	mov	r1, fp
   209cc:	mov	r2, r8
   209d0:	mov	r0, r9
   209d4:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   209d8:	mov	fp, r0
   209dc:	b	1d560 <_start@@Base+0x8880>
   209e0:	add	r1, r0, #1
   209e4:	mov	r2, r8
   209e8:	mov	r0, r9
   209ec:	bl	16bf0 <_start@@Base+0x1f10>
   209f0:	mov	r5, r0
   209f4:	b	1f134 <_start@@Base+0xa454>
   209f8:	add	r1, r0, #1
   209fc:	mov	r2, r8
   20a00:	mov	r0, r9
   20a04:	bl	16bf0 <_start@@Base+0x1f10>
   20a08:	mov	r5, r0
   20a0c:	b	1ea1c <_start@@Base+0x9d3c>
   20a10:	ldr	r0, [r9]
   20a14:	bl	27228 <flatcc_builder_start_offset_vector@@Base>
   20a18:	cmp	r0, #0
   20a1c:	bne	1ccf0 <_start@@Base+0x8010>
   20a20:	mov	r1, fp
   20a24:	add	r3, sp, #328	; 0x148
   20a28:	mov	r2, r8
   20a2c:	mov	r0, r9
   20a30:	bl	1ad34 <_start@@Base+0x6054>
   20a34:	ldr	r3, [sp, #328]	; 0x148
   20a38:	mov	fp, r0
   20a3c:	cmp	r3, #0
   20a40:	beq	20aac <_start@@Base+0xbdcc>
   20a44:	add	r4, sp, #332	; 0x14c
   20a48:	mov	r1, fp
   20a4c:	mov	r3, r4
   20a50:	mov	r2, r8
   20a54:	mov	r0, r9
   20a58:	bl	1cca4 <_start@@Base+0x7fc4>
   20a5c:	ldr	r3, [sp, #332]	; 0x14c
   20a60:	mov	fp, r0
   20a64:	mov	r1, #1
   20a68:	cmp	r3, #0
   20a6c:	beq	1ccf0 <_start@@Base+0x8010>
   20a70:	ldr	r0, [r9]
   20a74:	bl	2677c <flatcc_builder_extend_offset_vector@@Base>
   20a78:	subs	ip, r0, #0
   20a7c:	add	r3, sp, #328	; 0x148
   20a80:	mov	r2, r8
   20a84:	mov	r1, fp
   20a88:	mov	r0, r9
   20a8c:	beq	1ccf0 <_start@@Base+0x8010>
   20a90:	ldr	lr, [sp, #332]	; 0x14c
   20a94:	str	lr, [ip]
   20a98:	bl	194f8 <_start@@Base+0x4818>
   20a9c:	ldr	r3, [sp, #328]	; 0x148
   20aa0:	mov	fp, r0
   20aa4:	cmp	r3, #0
   20aa8:	bne	20a48 <_start@@Base+0xbd68>
   20aac:	ldr	r0, [r9]
   20ab0:	bl	288a8 <flatcc_builder_end_offset_vector@@Base>
   20ab4:	cmp	r0, #0
   20ab8:	str	r0, [sp, #332]	; 0x14c
   20abc:	beq	1ccf0 <_start@@Base+0x8010>
   20ac0:	mov	r1, #11
   20ac4:	ldr	r0, [r9]
   20ac8:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   20acc:	cmp	r0, #0
   20ad0:	beq	1ccf0 <_start@@Base+0x8010>
   20ad4:	ldr	r3, [sp, #332]	; 0x14c
   20ad8:	str	r3, [r0]
   20adc:	b	1d560 <_start@@Base+0x8880>
   20ae0:	mov	ip, #0
   20ae4:	mov	r3, #10
   20ae8:	mov	r2, r8
   20aec:	mov	r1, r8
   20af0:	mov	r0, r9
   20af4:	str	ip, [sp, #340]	; 0x154
   20af8:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   20afc:	mov	r4, r0
   20b00:	ldr	r3, [sp, #340]	; 0x154
   20b04:	b	1f7ec <_start@@Base+0xab0c>
   20b08:	mov	r4, r0
   20b0c:	mov	r1, r4
   20b10:	mov	r2, r8
   20b14:	mov	r0, r9
   20b18:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   20b1c:	mov	fp, r0
   20b20:	b	1d560 <_start@@Base+0x8880>
   20b24:	cmp	r2, #0
   20b28:	sbcs	r1, r3, #0
   20b2c:	addge	r1, sp, #352	; 0x160
   20b30:	strdge	r2, [r1]
   20b34:	bge	20178 <_start@@Base+0xb498>
   20b38:	mov	r1, r0
   20b3c:	mov	r3, #7
   20b40:	mov	r2, r8
   20b44:	mov	r0, r9
   20b48:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   20b4c:	mov	r5, r0
   20b50:	cmp	r7, r5
   20b54:	beq	20144 <_start@@Base+0xb464>
   20b58:	add	r3, sp, #352	; 0x160
   20b5c:	ldrd	r2, [r3]
   20b60:	b	20178 <_start@@Base+0xb498>
   20b64:	mov	r1, r0
   20b68:	add	r0, sp, #360	; 0x168
   20b6c:	ldr	r3, [pc, #-884]	; 20800 <_start@@Base+0xbb20>
   20b70:	mov	r2, r8
   20b74:	str	r0, [sp]
   20b78:	mov	r0, r9
   20b7c:	bl	19078 <_start@@Base+0x4398>
   20b80:	cmp	r8, r0
   20b84:	cmpne	r0, r4
   20b88:	mov	fp, r0
   20b8c:	bne	1e8d0 <_start@@Base+0x9bf0>
   20b90:	b	1ccf0 <_start@@Base+0x8010>
   20b94:	mov	fp, r0
   20b98:	mov	r3, #0
   20b9c:	add	fp, fp, #8
   20ba0:	mov	r1, r8
   20ba4:	mov	r0, fp
   20ba8:	str	r3, [sp, #320]	; 0x140
   20bac:	bl	14dd0 <_start@@Base+0xf0>
   20bb0:	and	r3, r1, #-16777216	; 0xff000000
   20bb4:	str	r3, [sp, #324]	; 0x144
   20bb8:	add	r3, sp, #320	; 0x140
   20bbc:	ldrd	r2, [r3]
   20bc0:	cmp	r3, #1627389952	; 0x61000000
   20bc4:	cmpeq	r2, #0
   20bc8:	bne	20ee0 <_start@@Base+0xc200>
   20bcc:	sub	r3, r8, fp
   20bd0:	cmp	r3, #1
   20bd4:	ble	211a4 <_start@@Base+0xc4c4>
   20bd8:	mov	r2, r8
   20bdc:	mov	r1, fp
   20be0:	mov	r0, r9
   20be4:	bl	1b80c <_start@@Base+0x6b2c>
   20be8:	cmp	fp, r0
   20bec:	mov	r4, r0
   20bf0:	beq	211a4 <_start@@Base+0xc4c4>
   20bf4:	mov	fp, #0
   20bf8:	add	r5, sp, #360	; 0x168
   20bfc:	mov	sl, #0
   20c00:	mov	r1, r0
   20c04:	mov	r3, r5
   20c08:	mov	r2, r8
   20c0c:	mov	r0, r9
   20c10:	strd	sl, [r5]
   20c14:	bl	17cf4 <_start@@Base+0x3014>
   20c18:	cmp	r0, r4
   20c1c:	mov	fp, r0
   20c20:	beq	211f8 <_start@@Base+0xc518>
   20c24:	add	r3, sp, #360	; 0x168
   20c28:	ldrd	r2, [r3]
   20c2c:	orrs	r3, r2, r3
   20c30:	bne	20c40 <_start@@Base+0xbf60>
   20c34:	ldr	r3, [r9, #8]
   20c38:	tst	r3, #2
   20c3c:	beq	1d560 <_start@@Base+0x8880>
   20c40:	mov	r3, #8
   20c44:	mov	r1, #23
   20c48:	ldr	r0, [r9]
   20c4c:	mov	r2, r3
   20c50:	bl	29bc0 <flatcc_builder_table_add@@Base>
   20c54:	cmp	r0, #0
   20c58:	beq	1ccf0 <_start@@Base+0x8010>
   20c5c:	add	r3, sp, #360	; 0x168
   20c60:	ldrd	r2, [r3]
   20c64:	strd	r2, [r0]
   20c68:	b	1d560 <_start@@Base+0x8880>
   20c6c:	add	fp, fp, #8
   20c70:	mov	r1, r8
   20c74:	mov	r0, fp
   20c78:	mov	sl, #0
   20c7c:	bl	14dd0 <_start@@Base+0xf0>
   20c80:	and	r3, r1, #-16777216	; 0xff000000
   20c84:	str	sl, [sp, #312]	; 0x138
   20c88:	str	r3, [sp, #316]	; 0x13c
   20c8c:	add	r3, sp, #312	; 0x138
   20c90:	ldrd	r2, [r3]
   20c94:	cmp	r3, #1627389952	; 0x61000000
   20c98:	cmpeq	r2, #0
   20c9c:	bne	20ec8 <_start@@Base+0xc1e8>
   20ca0:	sub	r3, r8, fp
   20ca4:	cmp	r3, #1
   20ca8:	ble	2118c <_start@@Base+0xc4ac>
   20cac:	mov	r2, r8
   20cb0:	mov	r1, fp
   20cb4:	mov	r0, r9
   20cb8:	bl	1b80c <_start@@Base+0x6b2c>
   20cbc:	cmp	fp, r0
   20cc0:	mov	r4, r0
   20cc4:	beq	2118c <_start@@Base+0xc4ac>
   20cc8:	add	r5, sp, #360	; 0x168
   20ccc:	mov	r1, r0
   20cd0:	str	sl, [sp, #360]	; 0x168
   20cd4:	mov	r2, r8
   20cd8:	mov	r3, r5
   20cdc:	mov	r0, r9
   20ce0:	bl	17d90 <_start@@Base+0x30b0>
   20ce4:	cmp	r0, r4
   20ce8:	mov	fp, r0
   20cec:	beq	21238 <_start@@Base+0xc558>
   20cf0:	ldr	r3, [sp, #360]	; 0x168
   20cf4:	cmp	r3, #0
   20cf8:	bne	20d08 <_start@@Base+0xc028>
   20cfc:	ldr	r3, [r9, #8]
   20d00:	tst	r3, #2
   20d04:	beq	1d560 <_start@@Base+0x8880>
   20d08:	mov	r3, #4
   20d0c:	mov	r1, #21
   20d10:	ldr	r0, [r9]
   20d14:	mov	r2, r3
   20d18:	bl	29bc0 <flatcc_builder_table_add@@Base>
   20d1c:	cmp	r0, #0
   20d20:	beq	1ccf0 <_start@@Base+0x8010>
   20d24:	ldr	r3, [sp, #360]	; 0x168
   20d28:	str	r3, [r0]
   20d2c:	b	1d560 <_start@@Base+0x8880>
   20d30:	mov	r1, fp
   20d34:	mov	r2, r8
   20d38:	mov	r0, r9
   20d3c:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   20d40:	mov	fp, r0
   20d44:	b	1d560 <_start@@Base+0x8880>
   20d48:	ldr	r0, [r9]
   20d4c:	bl	284e4 <flatcc_builder_end_vector@@Base>
   20d50:	cmp	r0, #0
   20d54:	str	r0, [sp, #332]	; 0x14c
   20d58:	beq	1ccf0 <_start@@Base+0x8010>
   20d5c:	mov	r1, #32
   20d60:	ldr	r0, [r9]
   20d64:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   20d68:	cmp	r0, #0
   20d6c:	beq	1ccf0 <_start@@Base+0x8010>
   20d70:	ldr	r3, [sp, #332]	; 0x14c
   20d74:	str	r3, [r0]
   20d78:	b	1d560 <_start@@Base+0x8880>
   20d7c:	ldr	r3, [pc, #-1408]	; 20804 <_start@@Base+0xbb24>
   20d80:	mov	r2, r8
   20d84:	mov	r1, r5
   20d88:	mov	r0, r9
   20d8c:	str	sl, [sp]
   20d90:	bl	1a1cc <_start@@Base+0x54ec>
   20d94:	cmp	r8, r0
   20d98:	cmpne	r0, r5
   20d9c:	mov	fp, r0
   20da0:	bne	1e068 <_start@@Base+0x9388>
   20da4:	b	1ccf0 <_start@@Base+0x8010>
   20da8:	mov	r1, fp
   20dac:	mov	r2, r8
   20db0:	mov	r0, r9
   20db4:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   20db8:	mov	fp, r0
   20dbc:	b	1d560 <_start@@Base+0x8880>
   20dc0:	strd	sl, [sp, #232]	; 0xe8
   20dc4:	mov	fp, r5
   20dc8:	ldrd	r6, [sp, #56]	; 0x38
   20dcc:	b	204e8 <_start@@Base+0xb808>
   20dd0:	mov	r1, r0
   20dd4:	mov	r3, #8
   20dd8:	mov	r2, r8
   20ddc:	mov	r0, r9
   20de0:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   20de4:	mov	r5, r0
   20de8:	cmp	r7, r5
   20dec:	bne	1fe94 <_start@@Base+0xb1b4>
   20df0:	mov	r4, r7
   20df4:	b	1fe68 <_start@@Base+0xb188>
   20df8:	ldr	r0, [r9]
   20dfc:	bl	284e4 <flatcc_builder_end_vector@@Base>
   20e00:	cmp	r0, #0
   20e04:	str	r0, [sp, #332]	; 0x14c
   20e08:	beq	1ccf0 <_start@@Base+0x8010>
   20e0c:	mov	r1, #5
   20e10:	ldr	r0, [r9]
   20e14:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   20e18:	cmp	r0, #0
   20e1c:	beq	1ccf0 <_start@@Base+0x8010>
   20e20:	ldr	r3, [sp, #332]	; 0x14c
   20e24:	str	r3, [r0]
   20e28:	b	1d560 <_start@@Base+0x8880>
   20e2c:	mov	r1, r0
   20e30:	add	r0, sp, #360	; 0x168
   20e34:	ldr	r3, [pc, #-1588]	; 20808 <_start@@Base+0xbb28>
   20e38:	mov	r2, r8
   20e3c:	str	r0, [sp]
   20e40:	mov	r0, r9
   20e44:	bl	199ac <_start@@Base+0x4ccc>
   20e48:	cmp	r8, r0
   20e4c:	cmpne	r0, r4
   20e50:	mov	fp, r0
   20e54:	bne	1dd64 <_start@@Base+0x9084>
   20e58:	b	1ccf0 <_start@@Base+0x8010>
   20e5c:	mov	r4, r0
   20e60:	mov	r1, r4
   20e64:	mov	r2, r8
   20e68:	mov	r0, r9
   20e6c:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   20e70:	mov	fp, r0
   20e74:	b	1d560 <_start@@Base+0x8880>
   20e78:	mov	r1, r4
   20e7c:	mov	r3, #7
   20e80:	mov	r2, r8
   20e84:	mov	r0, r9
   20e88:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   20e8c:	mov	r5, r0
   20e90:	b	20de8 <_start@@Base+0xc108>
   20e94:	mov	r1, r0
   20e98:	mov	r3, #33	; 0x21
   20e9c:	mov	r2, r8
   20ea0:	mov	r0, r9
   20ea4:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   20ea8:	mov	fp, r0
   20eac:	b	1d560 <_start@@Base+0x8880>
   20eb0:	mov	r1, fp
   20eb4:	mov	r2, r8
   20eb8:	mov	r0, r9
   20ebc:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   20ec0:	mov	fp, r0
   20ec4:	b	1d560 <_start@@Base+0x8880>
   20ec8:	mov	r1, fp
   20ecc:	mov	r2, r8
   20ed0:	mov	r0, r9
   20ed4:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   20ed8:	mov	fp, r0
   20edc:	b	1d560 <_start@@Base+0x8880>
   20ee0:	mov	r1, fp
   20ee4:	mov	r2, r8
   20ee8:	mov	r0, r9
   20eec:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   20ef0:	mov	fp, r0
   20ef4:	b	1d560 <_start@@Base+0x8880>
   20ef8:	ldr	r0, [r9]
   20efc:	bl	284e4 <flatcc_builder_end_vector@@Base>
   20f00:	cmp	r0, #0
   20f04:	str	r0, [sp, #332]	; 0x14c
   20f08:	beq	1ccf0 <_start@@Base+0x8010>
   20f0c:	mov	r1, #33	; 0x21
   20f10:	ldr	r0, [r9]
   20f14:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   20f18:	cmp	r0, #0
   20f1c:	beq	1ccf0 <_start@@Base+0x8010>
   20f20:	ldr	r3, [sp, #332]	; 0x14c
   20f24:	str	r3, [r0]
   20f28:	b	1d560 <_start@@Base+0x8880>
   20f2c:	mov	r1, r0
   20f30:	mov	r3, #8
   20f34:	mov	r2, r8
   20f38:	mov	r0, r9
   20f3c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   20f40:	cmp	r4, r0
   20f44:	mov	fp, r0
   20f48:	strb	sl, [sp, #348]	; 0x15c
   20f4c:	bne	1cfd4 <_start@@Base+0x82f4>
   20f50:	mov	r5, r4
   20f54:	b	1e968 <_start@@Base+0x9c88>
   20f58:	mov	r1, r0
   20f5c:	mov	r3, #7
   20f60:	mov	r2, r8
   20f64:	mov	r0, r9
   20f68:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   20f6c:	ldr	r3, [sp, #16]
   20f70:	cmp	r4, r0
   20f74:	mov	fp, r0
   20f78:	strb	r3, [sp, #348]	; 0x15c
   20f7c:	bne	1cfd4 <_start@@Base+0x82f4>
   20f80:	b	20f50 <_start@@Base+0xc270>
   20f84:	ldr	r3, [pc, #-1920]	; 2080c <_start@@Base+0xbb2c>
   20f88:	mov	r2, r8
   20f8c:	mov	r0, r9
   20f90:	str	sl, [sp]
   20f94:	mov	r4, r1
   20f98:	bl	1ab44 <_start@@Base+0x5e64>
   20f9c:	cmp	r8, r0
   20fa0:	cmpne	r0, r4
   20fa4:	mov	fp, r0
   20fa8:	bne	1e3fc <_start@@Base+0x971c>
   20fac:	b	1ccf0 <_start@@Base+0x8010>
   20fb0:	mov	r1, fp
   20fb4:	mov	r2, r8
   20fb8:	mov	r0, r9
   20fbc:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   20fc0:	mov	fp, r0
   20fc4:	b	1d560 <_start@@Base+0x8880>
   20fc8:	add	r1, r0, #1
   20fcc:	mov	r2, r8
   20fd0:	mov	r0, r9
   20fd4:	bl	16bf0 <_start@@Base+0x1f10>
   20fd8:	mov	r7, r0
   20fdc:	b	200ec <_start@@Base+0xb40c>
   20fe0:	mov	r1, r0
   20fe4:	mov	r3, #8
   20fe8:	mov	r2, r8
   20fec:	mov	r0, r9
   20ff0:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   20ff4:	mov	r5, r0
   20ff8:	b	20b50 <_start@@Base+0xbe70>
   20ffc:	mov	fp, r4
   21000:	b	1ccf0 <_start@@Base+0x8010>
   21004:	add	r1, r0, #1
   21008:	mov	r2, r8
   2100c:	mov	r0, r9
   21010:	bl	16bf0 <_start@@Base+0x1f10>
   21014:	mov	r1, r0
   21018:	b	1f960 <_start@@Base+0xac80>
   2101c:	ldr	r3, [pc, #-2068]	; 20810 <_start@@Base+0xbb30>
   21020:	mov	r2, r8
   21024:	mov	r1, r4
   21028:	mov	r0, r9
   2102c:	str	r5, [sp]
   21030:	bl	197ec <_start@@Base+0x4b0c>
   21034:	cmp	r8, r0
   21038:	cmpne	r0, r4
   2103c:	mov	fp, r0
   21040:	bne	1f618 <_start@@Base+0xa938>
   21044:	b	1ccf0 <_start@@Base+0x8010>
   21048:	ldr	r3, [pc, #-2108]	; 20814 <_start@@Base+0xbb34>
   2104c:	mov	r2, r8
   21050:	mov	r1, r4
   21054:	mov	r0, r9
   21058:	str	sl, [sp]
   2105c:	bl	1a5c4 <_start@@Base+0x58e4>
   21060:	cmp	r8, r0
   21064:	cmpne	r0, r4
   21068:	mov	fp, r0
   2106c:	bne	1fcf8 <_start@@Base+0xb018>
   21070:	b	1ccf0 <_start@@Base+0x8010>
   21074:	mov	fp, r4
   21078:	b	1ccf0 <_start@@Base+0x8010>
   2107c:	mov	fp, r0
   21080:	b	1d560 <_start@@Base+0x8880>
   21084:	mov	fp, r4
   21088:	b	1ccf0 <_start@@Base+0x8010>
   2108c:	mov	r2, #1
   21090:	mvn	r3, #0
   21094:	mov	r1, r2
   21098:	bl	270b0 <flatcc_builder_start_vector@@Base>
   2109c:	subs	r5, r0, #0
   210a0:	bne	1ccf0 <_start@@Base+0x8010>
   210a4:	add	r3, sp, #328	; 0x148
   210a8:	mov	r1, fp
   210ac:	mov	r2, r8
   210b0:	mov	r0, r9
   210b4:	bl	1ad34 <_start@@Base+0x6054>
   210b8:	ldr	r3, [sp, #328]	; 0x148
   210bc:	mov	r4, r0
   210c0:	cmp	r3, #0
   210c4:	beq	21224 <_start@@Base+0xc544>
   210c8:	mov	sl, r5
   210cc:	b	210fc <_start@@Base+0xc41c>
   210d0:	ldrb	ip, [sp, #360]	; 0x168
   210d4:	mov	r1, r0
   210d8:	add	r3, sp, #328	; 0x148
   210dc:	mov	r2, r8
   210e0:	mov	r0, r9
   210e4:	strb	ip, [r5]
   210e8:	bl	194f8 <_start@@Base+0x4818>
   210ec:	ldr	r3, [sp, #328]	; 0x148
   210f0:	mov	r4, r0
   210f4:	cmp	r3, #0
   210f8:	beq	21224 <_start@@Base+0xc544>
   210fc:	mov	r1, #1
   21100:	ldr	r0, [r9]
   21104:	strb	sl, [sp, #360]	; 0x168
   21108:	bl	2640c <flatcc_builder_extend_vector@@Base>
   2110c:	subs	r5, r0, #0
   21110:	mov	r1, r4
   21114:	add	r3, sp, #360	; 0x168
   21118:	mov	r2, r8
   2111c:	mov	r0, r9
   21120:	beq	211f0 <_start@@Base+0xc510>
   21124:	bl	17e60 <_start@@Base+0x3180>
   21128:	cmp	r0, r4
   2112c:	bne	210d0 <_start@@Base+0xc3f0>
   21130:	add	r1, sp, #360	; 0x168
   21134:	ldr	r3, [pc, #-2340]	; 20818 <_start@@Base+0xbb38>
   21138:	mov	r2, r8
   2113c:	mov	r0, r9
   21140:	str	r1, [sp]
   21144:	mov	r1, r4
   21148:	bl	1a794 <_start@@Base+0x5ab4>
   2114c:	cmp	r8, r0
   21150:	cmpne	r0, r4
   21154:	bne	210d0 <_start@@Base+0xc3f0>
   21158:	mov	fp, r0
   2115c:	b	1ccf0 <_start@@Base+0x8010>
   21160:	mov	r1, r0
   21164:	ldr	r3, [pc, #-2384]	; 2081c <_start@@Base+0xbb3c>
   21168:	mov	r2, r8
   2116c:	mov	r0, r9
   21170:	str	r5, [sp]
   21174:	bl	199ac <_start@@Base+0x4ccc>
   21178:	cmp	r8, r0
   2117c:	cmpne	r0, r4
   21180:	mov	fp, r0
   21184:	bne	1fc3c <_start@@Base+0xaf5c>
   21188:	b	1ccf0 <_start@@Base+0x8010>
   2118c:	mov	r1, fp
   21190:	mov	r2, r8
   21194:	mov	r0, r9
   21198:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   2119c:	mov	fp, r0
   211a0:	b	1d560 <_start@@Base+0x8880>
   211a4:	mov	r1, fp
   211a8:	mov	r2, r8
   211ac:	mov	r0, r9
   211b0:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   211b4:	mov	fp, r0
   211b8:	b	1d560 <_start@@Base+0x8880>
   211bc:	mov	fp, r5
   211c0:	b	1ccf0 <_start@@Base+0x8010>
   211c4:	mov	r1, r0
   211c8:	ldr	r3, [pc, #-2480]	; 20820 <_start@@Base+0xbb40>
   211cc:	mov	r2, r8
   211d0:	mov	r0, r9
   211d4:	str	r5, [sp]
   211d8:	bl	1ab44 <_start@@Base+0x5e64>
   211dc:	cmp	r8, r0
   211e0:	cmpne	r0, r4
   211e4:	mov	fp, r0
   211e8:	bne	20978 <_start@@Base+0xbc98>
   211ec:	b	1ccf0 <_start@@Base+0x8010>
   211f0:	mov	fp, r4
   211f4:	b	1ccf0 <_start@@Base+0x8010>
   211f8:	mov	r1, r0
   211fc:	ldr	r3, [pc, #-2528]	; 20824 <_start@@Base+0xbb44>
   21200:	mov	r2, r8
   21204:	mov	r0, r9
   21208:	str	r5, [sp]
   2120c:	bl	197ec <_start@@Base+0x4b0c>
   21210:	cmp	r8, r0
   21214:	cmpne	r0, r4
   21218:	mov	fp, r0
   2121c:	bne	20c24 <_start@@Base+0xbf44>
   21220:	b	1ccf0 <_start@@Base+0x8010>
   21224:	ldr	r0, [r9]
   21228:	mov	fp, r4
   2122c:	bl	284e4 <flatcc_builder_end_vector@@Base>
   21230:	str	r0, [sp, #332]	; 0x14c
   21234:	b	1d334 <_start@@Base+0x8654>
   21238:	mov	r1, r0
   2123c:	ldr	r3, [pc, #-2588]	; 20828 <_start@@Base+0xbb48>
   21240:	mov	r2, r8
   21244:	mov	r0, r9
   21248:	str	r5, [sp]
   2124c:	bl	1a5c4 <_start@@Base+0x58e4>
   21250:	cmp	r8, r0
   21254:	cmpne	r0, r4
   21258:	mov	fp, r0
   2125c:	bne	20cf0 <_start@@Base+0xc010>
   21260:	b	1ccf0 <_start@@Base+0x8010>
   21264:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21268:	mov	r5, r0
   2126c:	mov	ip, r3
   21270:	ldr	r0, [r0]
   21274:	strd	r6, [sp, #8]
   21278:	mov	r7, r2
   2127c:	strd	r8, [sp, #16]
   21280:	strd	sl, [sp, #24]
   21284:	mov	sl, r1
   21288:	mov	r1, #4
   2128c:	str	lr, [sp, #32]
   21290:	sub	sp, sp, #252	; 0xfc
   21294:	str	r3, [sp, #200]	; 0xc8
   21298:	mov	r3, #0
   2129c:	str	r3, [ip]
   212a0:	bl	27848 <flatcc_builder_start_table@@Base>
   212a4:	cmp	r0, #0
   212a8:	beq	212e4 <_start@@Base+0xc604>
   212ac:	mov	r2, r7
   212b0:	mov	r1, sl
   212b4:	mov	r0, r5
   212b8:	mov	r3, #33	; 0x21
   212bc:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   212c0:	mov	r4, r0
   212c4:	mov	r0, r4
   212c8:	add	sp, sp, #252	; 0xfc
   212cc:	ldrd	r4, [sp]
   212d0:	ldrd	r6, [sp, #8]
   212d4:	ldrd	r8, [sp, #16]
   212d8:	ldrd	sl, [sp, #24]
   212dc:	add	sp, sp, #32
   212e0:	pop	{pc}		; (ldr pc, [sp], #4)
   212e4:	add	r0, sp, #216	; 0xd8
   212e8:	mov	r3, #1
   212ec:	mov	r2, r7
   212f0:	mov	r1, sl
   212f4:	str	r0, [sp]
   212f8:	mov	r0, r5
   212fc:	bl	32090 <flatcc_json_parser_prepare_unions@@Base>
   21300:	cmp	r7, r0
   21304:	beq	212ac <_start@@Base+0xc5cc>
   21308:	add	r3, sp, #208	; 0xd0
   2130c:	mov	r1, sl
   21310:	mov	r2, r7
   21314:	mov	r0, r5
   21318:	bl	1ae08 <_start@@Base+0x6128>
   2131c:	ldr	r3, [sp, #208]	; 0xd0
   21320:	cmp	r3, #0
   21324:	beq	21488 <_start@@Base+0xc7a8>
   21328:	mov	r4, r7
   2132c:	cmp	r4, r0
   21330:	beq	22bbc <_start@@Base+0xdedc>
   21334:	ldrb	r3, [r0]
   21338:	cmp	r3, #34	; 0x22
   2133c:	addeq	fp, r0, #1
   21340:	bne	215b8 <_start@@Base+0xc8d8>
   21344:	sub	ip, r4, fp
   21348:	cmp	ip, #8
   2134c:	bls	21490 <_start@@Base+0xc7b0>
   21350:	ldrb	r2, [fp, #7]
   21354:	mov	r3, #0
   21358:	mov	lr, r3
   2135c:	ldrb	r0, [fp, #6]
   21360:	orr	r2, r2, r0, lsl #8
   21364:	ldrb	r8, [fp, #5]
   21368:	orr	r2, r2, r8, lsl #16
   2136c:	ldrb	r8, [fp, #4]
   21370:	orr	r2, r2, r8, lsl #24
   21374:	ldrb	r8, [fp, #3]
   21378:	orr	lr, lr, r8
   2137c:	ldrb	r0, [fp]
   21380:	mov	r7, #0
   21384:	str	r2, [sp, #32]
   21388:	ldrb	r8, [fp, #1]
   2138c:	ldrb	r6, [fp, #2]
   21390:	lsl	r0, r0, #24
   21394:	add	r3, pc, #852	; 0x354
   21398:	ldrd	r2, [r3]
   2139c:	orr	r8, r0, r8, lsl #16
   213a0:	orr	r6, lr, r6, lsl #8
   213a4:	orr	r1, r8, r6
   213a8:	str	r1, [sp, #36]	; 0x24
   213ac:	ldrd	r0, [sp, #32]
   213b0:	cmp	r1, r3
   213b4:	cmpeq	r0, r2
   213b8:	beq	2151c <_start@@Base+0xc83c>
   213bc:	ldrd	r0, [sp, #32]
   213c0:	add	r3, pc, #816	; 0x330
   213c4:	ldrd	r2, [r3]
   213c8:	bic	lr, r0, #255	; 0xff
   213cc:	str	lr, [sp, #104]	; 0x68
   213d0:	str	r1, [sp, #108]	; 0x6c
   213d4:	ldrd	r0, [sp, #104]	; 0x68
   213d8:	cmp	r1, r3
   213dc:	cmpeq	r0, r2
   213e0:	bne	21608 <_start@@Base+0xc928>
   213e4:	cmp	ip, #7
   213e8:	ble	213f8 <_start@@Base+0xc718>
   213ec:	ldrb	r3, [fp, #7]
   213f0:	cmp	r3, #34	; 0x22
   213f4:	beq	23140 <_start@@Base+0xe460>
   213f8:	mov	r1, fp
   213fc:	mov	r2, r4
   21400:	mov	r0, r5
   21404:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   21408:	mov	sl, r0
   2140c:	sub	r3, r4, sl
   21410:	cmp	r3, #1
   21414:	ble	21428 <_start@@Base+0xc748>
   21418:	ldrb	r3, [sl]
   2141c:	cmp	r3, #32
   21420:	bhi	2143c <_start@@Base+0xc75c>
   21424:	beq	22c14 <_start@@Base+0xdf34>
   21428:	mov	r1, sl
   2142c:	mov	r2, r4
   21430:	mov	r0, r5
   21434:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   21438:	mov	sl, r0
   2143c:	cmp	r4, sl
   21440:	beq	22bc4 <_start@@Base+0xdee4>
   21444:	ldrb	r3, [sl]
   21448:	cmp	r3, #44	; 0x2c
   2144c:	beq	22c28 <_start@@Base+0xdf48>
   21450:	mov	r3, #0
   21454:	str	r3, [sp, #208]	; 0xd0
   21458:	ldrb	r3, [sl]
   2145c:	cmp	r3, #125	; 0x7d
   21460:	beq	215d4 <_start@@Base+0xc8f4>
   21464:	mov	r3, #10
   21468:	mov	r1, sl
   2146c:	mov	r2, r4
   21470:	mov	r0, r5
   21474:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   21478:	ldr	r3, [sp, #208]	; 0xd0
   2147c:	cmp	r3, #0
   21480:	bne	2132c <_start@@Base+0xc64c>
   21484:	mov	r7, r4
   21488:	mov	sl, r0
   2148c:	b	22bd0 <_start@@Base+0xdef0>
   21490:	sub	r3, ip, #1
   21494:	cmp	r3, #7
   21498:	ldrls	pc, [pc, r3, lsl #2]
   2149c:	b	213f8 <_start@@Base+0xc718>
   214a0:	strdeq	r1, [r2], -r8
   214a4:	strdeq	r1, [r2], -r0
   214a8:	andeq	r1, r2, r4, ror #9
   214ac:	ldrdeq	r1, [r2], -r8
   214b0:	andeq	r1, r2, ip, asr #9
   214b4:	andeq	r1, r2, r0, asr #9
   214b8:	andeq	r1, r2, r0, lsl r5
   214bc:	andeq	r1, r2, r0, asr r3
   214c0:	mov	r2, #0
   214c4:	mov	lr, r2
   214c8:	b	21364 <_start@@Base+0xc684>
   214cc:	mov	r2, #0
   214d0:	mov	lr, r2
   214d4:	b	2136c <_start@@Base+0xc68c>
   214d8:	mov	r2, #0
   214dc:	mov	lr, r2
   214e0:	b	21374 <_start@@Base+0xc694>
   214e4:	mov	r2, #0
   214e8:	mov	lr, r2
   214ec:	b	2137c <_start@@Base+0xc69c>
   214f0:	ldrb	r2, [fp, #1]
   214f4:	mov	r1, #0
   214f8:	ldrb	r0, [fp]
   214fc:	str	r1, [sp, #32]
   21500:	lsl	r2, r2, #16
   21504:	orr	r3, r2, r0, lsl #24
   21508:	str	r3, [sp, #36]	; 0x24
   2150c:	b	213bc <_start@@Base+0xc6dc>
   21510:	mov	r2, #0
   21514:	mov	r3, #0
   21518:	b	21358 <_start@@Base+0xc678>
   2151c:	add	r6, fp, #8
   21520:	mov	r1, r4
   21524:	str	r7, [sp, #152]	; 0x98
   21528:	mov	r0, r6
   2152c:	bl	14dd0 <_start@@Base+0xf0>
   21530:	str	r1, [sp, #156]	; 0x9c
   21534:	add	r3, pc, #452	; 0x1c4
   21538:	ldrd	r2, [r3]
   2153c:	ldrd	r0, [sp, #152]	; 0x98
   21540:	cmp	r1, r3
   21544:	cmpeq	r0, r2
   21548:	bne	225a0 <_start@@Base+0xd8c0>
   2154c:	sub	r3, r4, r6
   21550:	cmp	r3, #4
   21554:	ble	225a0 <_start@@Base+0xd8c0>
   21558:	mov	r1, r6
   2155c:	mov	r2, r4
   21560:	mov	r0, r5
   21564:	bl	1b750 <_start@@Base+0x6a70>
   21568:	cmp	r6, r0
   2156c:	mov	r1, r0
   21570:	beq	225a0 <_start@@Base+0xd8c0>
   21574:	ldr	lr, [pc, #404]	; 21710 <_start@@Base+0xca30>
   21578:	movw	r0, #14064	; 0x36f0
   2157c:	movt	r0, #2
   21580:	movw	r2, #20164	; 0x4ec4
   21584:	movt	r2, #1
   21588:	ldr	ip, [sp, #216]	; 0xd8
   2158c:	mov	r3, r7
   21590:	str	r0, [sp, #12]
   21594:	mov	r0, #3
   21598:	str	r2, [sp, #16]
   2159c:	mov	r2, r4
   215a0:	str	r0, [sp]
   215a4:	mov	r0, r5
   215a8:	stmib	sp, {ip, lr}
   215ac:	bl	326f4 <flatcc_json_parser_union_type_vector@@Base>
   215b0:	mov	sl, r0
   215b4:	b	2140c <_start@@Base+0xc72c>
   215b8:	mov	r1, r0
   215bc:	mov	r3, #5
   215c0:	mov	r2, r4
   215c4:	mov	r0, r5
   215c8:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   215cc:	mov	fp, r0
   215d0:	b	21344 <_start@@Base+0xc664>
   215d4:	add	r1, sl, #1
   215d8:	sub	r3, r4, r1
   215dc:	cmp	r3, #1
   215e0:	ble	215f4 <_start@@Base+0xc914>
   215e4:	ldrb	r3, [sl, #1]
   215e8:	cmp	r3, #32
   215ec:	bhi	232f0 <_start@@Base+0xe610>
   215f0:	beq	23360 <_start@@Base+0xe680>
   215f4:	mov	r2, r4
   215f8:	mov	r0, r5
   215fc:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   21600:	ldr	r3, [sp, #208]	; 0xd0
   21604:	b	2147c <_start@@Base+0xc79c>
   21608:	ldrd	r0, [sp, #32]
   2160c:	lsr	r3, r0, #16
   21610:	str	r3, [sp, #136]	; 0x88
   21614:	ldr	lr, [sp, #136]	; 0x88
   21618:	str	r1, [sp, #140]	; 0x8c
   2161c:	add	r3, pc, #228	; 0xe4
   21620:	ldrd	r2, [r3]
   21624:	lsl	lr, lr, #16
   21628:	str	lr, [sp, #136]	; 0x88
   2162c:	ldrd	r0, [sp, #136]	; 0x88
   21630:	cmp	r1, r3
   21634:	cmpeq	r0, r2
   21638:	bne	22c94 <_start@@Base+0xdfb4>
   2163c:	cmp	ip, #6
   21640:	ble	213f8 <_start@@Base+0xc718>
   21644:	mov	r2, r4
   21648:	mov	r1, fp
   2164c:	mov	r0, r5
   21650:	bl	1b5d8 <_start@@Base+0x68f8>
   21654:	cmp	fp, r0
   21658:	mov	sl, r0
   2165c:	beq	213f8 <_start@@Base+0xc718>
   21660:	mov	r3, #0
   21664:	mov	r1, #3
   21668:	ldr	r0, [r5]
   2166c:	str	r3, [sp, #212]	; 0xd4
   21670:	bl	27848 <flatcc_builder_start_table@@Base>
   21674:	cmp	r0, #0
   21678:	bne	21ad4 <_start@@Base+0xcdf4>
   2167c:	add	r3, sp, #220	; 0xdc
   21680:	mov	r1, sl
   21684:	mov	r2, r4
   21688:	mov	r0, r5
   2168c:	bl	1ae08 <_start@@Base+0x6128>
   21690:	ldr	r3, [sp, #220]	; 0xdc
   21694:	cmp	r3, #0
   21698:	beq	236e0 <_start@@Base+0xea00>
   2169c:	cmp	r4, r0
   216a0:	beq	216b4 <_start@@Base+0xc9d4>
   216a4:	ldrb	r3, [r0]
   216a8:	cmp	r3, #34	; 0x22
   216ac:	addeq	r0, r0, #1
   216b0:	bne	21d48 <_start@@Base+0xd068>
   216b4:	sub	r3, r4, r0
   216b8:	cmp	r3, #8
   216bc:	bhi	21714 <_start@@Base+0xca34>
   216c0:	sub	r3, r3, #1
   216c4:	cmp	r3, #7
   216c8:	ldrls	pc, [pc, r3, lsl #2]
   216cc:	b	21cc0 <_start@@Base+0xcfe0>
   216d0:	ldrdeq	r1, [r2], -ip
   216d4:	ldrdeq	r1, [r2], -r0
   216d8:	andeq	r1, r2, r4, asr #15
   216dc:	strdeq	r1, [r2], -r4
   216e0:	andeq	r1, r2, r8, ror #15
   216e4:	andeq	r1, r2, r0, lsl #16
   216e8:			; <UNDEFINED> instruction: 0x000217b8
   216ec:	andeq	r1, r2, r4, lsl r7
   216f0:	cmnvs	lr, pc, asr r9
   216f4:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   216f8:	cmnvs	lr, r0, lsl #18
   216fc:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   21700:	andeq	r0, r0, r0
   21704:	ldrbtvc	r7, [r9], #-101	; 0xffffff9b
   21708:	ldmdbvs	r8!, {}^	; <UNPREDICTABLE>
   2170c:	rsbsvc	r6, r2, r6, ror #10
   21710:	andeq	r8, r5, ip, ror r2
   21714:	ldrb	r8, [r0, #7]
   21718:	mov	r9, #0
   2171c:	mov	r3, r9
   21720:	ldrb	r6, [r0, #6]
   21724:	orr	r2, r8, r6, lsl #8
   21728:	ldrb	sl, [r0, #5]
   2172c:	orr	r2, r2, sl, lsl #16
   21730:	ldrb	sl, [r0, #4]
   21734:	orr	r2, r2, sl, lsl #24
   21738:	ldrb	r8, [r0, #3]
   2173c:	orr	r8, r3, r8
   21740:	ldrb	sl, [r0, #2]
   21744:	orr	r8, r8, sl, lsl #8
   21748:	ldrb	sl, [r0, #1]
   2174c:	orr	r8, r8, sl, lsl #16
   21750:	str	r2, [sp, #56]	; 0x38
   21754:	ldrb	r2, [r0]
   21758:	add	r7, pc, #1000	; 0x3e8
   2175c:	ldrd	r6, [r7]
   21760:	orr	r3, r8, r2, lsl #24
   21764:	str	r3, [sp, #60]	; 0x3c
   21768:	ldrd	r2, [sp, #56]	; 0x38
   2176c:	cmp	r3, r7
   21770:	cmpeq	r2, r6
   21774:	bne	21cc0 <_start@@Base+0xcfe0>
   21778:	add	r1, r0, #8
   2177c:	sub	r3, r4, r1
   21780:	cmp	r3, #8
   21784:	bhi	2180c <_start@@Base+0xcb2c>
   21788:	sub	r3, r3, #1
   2178c:	cmp	r3, #7
   21790:	ldrls	pc, [pc, r3, lsl #2]
   21794:	b	21cc4 <_start@@Base+0xcfe4>
   21798:	andeq	r1, r2, r4, lsl #25
   2179c:	andeq	r1, r2, r8, ror ip
   217a0:			; <UNDEFINED> instruction: 0x00021cb4
   217a4:	andeq	r1, r2, r8, lsr #25
   217a8:	muleq	r2, ip, ip
   217ac:	muleq	r2, r0, ip
   217b0:	andeq	r1, r2, ip, ror #24
   217b4:	andeq	r1, r2, ip, lsl #16
   217b8:	mov	r8, #0
   217bc:	mov	r9, #0
   217c0:	b	2171c <_start@@Base+0xca3c>
   217c4:	mov	r2, #0
   217c8:	mov	r8, r2
   217cc:	b	21740 <_start@@Base+0xca60>
   217d0:	mov	r2, #0
   217d4:	mov	r8, r2
   217d8:	b	21748 <_start@@Base+0xca68>
   217dc:	mov	r2, #0
   217e0:	mov	r8, r2
   217e4:	b	21750 <_start@@Base+0xca70>
   217e8:	mov	r2, #0
   217ec:	mov	r3, r2
   217f0:	b	21730 <_start@@Base+0xca50>
   217f4:	mov	r2, #0
   217f8:	mov	r3, r2
   217fc:	b	21738 <_start@@Base+0xca58>
   21800:	mov	r2, #0
   21804:	mov	r3, r2
   21808:	b	21728 <_start@@Base+0xca48>
   2180c:	ldrb	r2, [r0, #15]
   21810:	mov	r3, #0
   21814:	mov	sl, r3
   21818:	ldrb	r6, [r0, #14]
   2181c:	orr	r2, r2, r6, lsl #8
   21820:	ldrb	r6, [r0, #13]
   21824:	orr	r2, r2, r6, lsl #16
   21828:	ldrb	r6, [r0, #12]
   2182c:	mov	r8, sl
   21830:	orr	r6, r2, r6, lsl #24
   21834:	ldrb	sl, [r0, #11]
   21838:	orr	sl, r8, sl
   2183c:	ldrb	r8, [r0, #10]
   21840:	orr	sl, sl, r8, lsl #8
   21844:	ldrb	r8, [r0, #9]
   21848:	orr	sl, sl, r8, lsl #16
   2184c:	ldrb	r2, [r0, #8]
   21850:	str	r6, [sp, #80]	; 0x50
   21854:	add	r7, pc, #756	; 0x2f4
   21858:	ldrd	r6, [r7]
   2185c:	orr	r3, sl, r2, lsl #24
   21860:	str	r3, [sp, #84]	; 0x54
   21864:	ldrd	r2, [sp, #80]	; 0x50
   21868:	cmp	r3, r7
   2186c:	cmpeq	r2, r6
   21870:	bne	21cc4 <_start@@Base+0xcfe4>
   21874:	add	r7, r0, #16
   21878:	mov	r1, r4
   2187c:	mov	r0, r7
   21880:	bl	14dd0 <_start@@Base+0xf0>
   21884:	lsr	ip, r0, #16
   21888:	str	r1, [sp, #92]	; 0x5c
   2188c:	add	r3, pc, #708	; 0x2c4
   21890:	ldrd	r2, [r3]
   21894:	lsl	ip, ip, #16
   21898:	str	ip, [sp, #88]	; 0x58
   2189c:	ldrd	r8, [sp, #88]	; 0x58
   218a0:	cmp	r9, r3
   218a4:	cmpeq	r8, r2
   218a8:	beq	22678 <_start@@Base+0xd998>
   218ac:	and	r0, r0, #-16777216	; 0xff000000
   218b0:	add	r3, pc, #680	; 0x2a8
   218b4:	ldrd	r2, [r3]
   218b8:	strd	r0, [sp, #144]	; 0x90
   218bc:	ldrd	r0, [sp, #144]	; 0x90
   218c0:	cmp	r1, r3
   218c4:	cmpeq	r0, r2
   218c8:	bne	21f88 <_start@@Base+0xd2a8>
   218cc:	sub	r3, r4, r7
   218d0:	cmp	r3, #5
   218d4:	ble	21f88 <_start@@Base+0xd2a8>
   218d8:	mov	r2, r4
   218dc:	mov	r1, r7
   218e0:	mov	r0, r5
   218e4:	bl	1b51c <_start@@Base+0x683c>
   218e8:	cmp	r7, r0
   218ec:	mov	r6, r0
   218f0:	beq	21f88 <_start@@Base+0xd2a8>
   218f4:	mov	r1, #9
   218f8:	ldr	r0, [r5]
   218fc:	bl	27848 <flatcc_builder_start_table@@Base>
   21900:	cmp	r0, #0
   21904:	mov	r1, r6
   21908:	bne	21ac0 <_start@@Base+0xcde0>
   2190c:	add	r3, sp, #228	; 0xe4
   21910:	mov	r2, r4
   21914:	mov	r0, r5
   21918:	bl	1ae08 <_start@@Base+0x6128>
   2191c:	ldr	r3, [sp, #228]	; 0xe4
   21920:	mov	sl, r0
   21924:	cmp	r3, #0
   21928:	beq	21ab0 <_start@@Base+0xcdd0>
   2192c:	add	r7, pc, #564	; 0x234
   21930:	ldrd	r6, [r7]
   21934:	cmp	r4, sl
   21938:	beq	2194c <_start@@Base+0xcc6c>
   2193c:	ldrb	r3, [sl]
   21940:	cmp	r3, #34	; 0x22
   21944:	addeq	sl, sl, #1
   21948:	bne	21d94 <_start@@Base+0xd0b4>
   2194c:	sub	ip, r4, sl
   21950:	cmp	ip, #8
   21954:	bhi	21988 <_start@@Base+0xcca8>
   21958:	sub	r3, ip, #1
   2195c:	cmp	r3, #7
   21960:	ldrls	pc, [pc, r3, lsl #2]
   21964:	b	21b18 <_start@@Base+0xce38>
   21968:	andeq	r1, r2, r8, lsl fp
   2196c:	andeq	r1, r2, r4, lsr #23
   21970:	andeq	r1, r2, ip, lsr fp
   21974:	muleq	r2, r8, fp
   21978:	andeq	r1, r2, ip, lsl #23
   2197c:	andeq	r1, r2, r0, lsl #23
   21980:	andeq	r1, r2, r0, lsr fp
   21984:	andeq	r1, r2, r8, lsl #19
   21988:	ldrb	r2, [sl, #7]
   2198c:	mov	r3, #0
   21990:	mov	lr, r3
   21994:	ldrb	r8, [sl, #6]
   21998:	orr	r2, r2, r8, lsl #8
   2199c:	ldrb	r8, [sl, #5]
   219a0:	orr	r2, r2, r8, lsl #16
   219a4:	ldrb	r8, [sl, #4]
   219a8:	orr	r8, r2, r8, lsl #24
   219ac:	ldrb	r0, [sl, #3]
   219b0:	orr	lr, lr, r0
   219b4:	ldrb	r2, [sl]
   219b8:	str	r8, [sp, #24]
   219bc:	mov	r8, #0
   219c0:	ldrb	r0, [sl, #2]
   219c4:	lsl	r9, r2, #24
   219c8:	ldrb	r2, [sl, #1]
   219cc:	orr	r0, lr, r0, lsl #8
   219d0:	orr	r2, r9, r2, lsl #16
   219d4:	orr	r3, r2, r0
   219d8:	str	r3, [sp, #28]
   219dc:	ldrd	r2, [sp, #24]
   219e0:	cmp	r3, r7
   219e4:	cmpeq	r2, r6
   219e8:	bhi	21bd0 <_start@@Base+0xcef0>
   219ec:	add	r1, pc, #380	; 0x17c
   219f0:	ldrd	r0, [r1]
   219f4:	cmp	r3, r1
   219f8:	cmpeq	r2, r0
   219fc:	beq	21e40 <_start@@Base+0xd160>
   21a00:	ldr	r1, [sp, #28]
   21a04:	mov	r8, #0
   21a08:	movw	r3, #24929	; 0x6161
   21a0c:	movt	r3, #24929	; 0x6161
   21a10:	mov	r2, #0
   21a14:	str	r8, [sp, #120]	; 0x78
   21a18:	str	r1, [sp, #124]	; 0x7c
   21a1c:	ldrd	r0, [sp, #120]	; 0x78
   21a20:	cmp	r1, r3
   21a24:	cmpeq	r0, r2
   21a28:	bne	225d0 <_start@@Base+0xd8f0>
   21a2c:	cmp	ip, #4
   21a30:	ble	21b18 <_start@@Base+0xce38>
   21a34:	mov	r1, sl
   21a38:	mov	r2, r4
   21a3c:	mov	r0, r5
   21a40:	bl	1b750 <_start@@Base+0x6a70>
   21a44:	cmp	sl, r0
   21a48:	mov	r1, r0
   21a4c:	beq	21b18 <_start@@Base+0xce38>
   21a50:	add	r3, sp, #232	; 0xe8
   21a54:	mov	r2, r4
   21a58:	mov	r0, r5
   21a5c:	bl	31d48 <flatcc_json_parser_build_string@@Base>
   21a60:	ldr	r3, [sp, #232]	; 0xe8
   21a64:	mov	sl, r0
   21a68:	cmp	r3, #0
   21a6c:	beq	21abc <_start@@Base+0xcddc>
   21a70:	mov	r1, r8
   21a74:	ldr	r0, [r5]
   21a78:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   21a7c:	cmp	r0, #0
   21a80:	beq	21abc <_start@@Base+0xcddc>
   21a84:	ldr	r3, [sp, #232]	; 0xe8
   21a88:	str	r3, [r0]
   21a8c:	mov	r1, sl
   21a90:	add	r3, sp, #228	; 0xe4
   21a94:	mov	r2, r4
   21a98:	mov	r0, r5
   21a9c:	bl	193b0 <_start@@Base+0x46d0>
   21aa0:	ldr	r3, [sp, #228]	; 0xe4
   21aa4:	mov	sl, r0
   21aa8:	cmp	r3, #0
   21aac:	bne	21934 <_start@@Base+0xcc54>
   21ab0:	ldr	r1, [r5, #20]
   21ab4:	cmp	r1, #0
   21ab8:	beq	234b4 <_start@@Base+0xe7d4>
   21abc:	mov	r1, sl
   21ac0:	mov	r3, #33	; 0x21
   21ac4:	mov	r2, r4
   21ac8:	mov	r0, r5
   21acc:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   21ad0:	mov	sl, r0
   21ad4:	mov	r1, sl
   21ad8:	mov	r3, #33	; 0x21
   21adc:	mov	r2, r4
   21ae0:	mov	r0, r5
   21ae4:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   21ae8:	ldr	r3, [sp, #212]	; 0xd4
   21aec:	mov	sl, r0
   21af0:	cmp	r3, #0
   21af4:	beq	22d14 <_start@@Base+0xe034>
   21af8:	mov	r1, #0
   21afc:	ldr	r0, [r5]
   21b00:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   21b04:	cmp	r0, #0
   21b08:	beq	22d14 <_start@@Base+0xe034>
   21b0c:	ldr	r3, [sp, #212]	; 0xd4
   21b10:	str	r3, [r0]
   21b14:	b	2140c <_start@@Base+0xc72c>
   21b18:	mov	r1, sl
   21b1c:	mov	r2, r4
   21b20:	mov	r0, r5
   21b24:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   21b28:	mov	sl, r0
   21b2c:	b	21a8c <_start@@Base+0xcdac>
   21b30:	mov	r2, #0
   21b34:	mov	r3, #0
   21b38:	b	21990 <_start@@Base+0xccb0>
   21b3c:	mov	r8, #0
   21b40:	mov	lr, r8
   21b44:	b	219b4 <_start@@Base+0xccd4>
   21b48:	bvs	1cfd908 <__bss_end__@@Base+0x1ca554c>
   21b4c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   21b50:	ldmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
   21b54:	rsbsvc	r6, r2, r6, ror #10
   21b58:	ldrvs	r0, [r2, -r0]!
   21b5c:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   21b60:	strvs	r0, [r0, -r0]
   21b64:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   21b68:			; <UNDEFINED> instruction: 0xffffffff
   21b6c:	cmnvs	r3, #-2013265919	; 0x88000001
   21b70:	teqcc	r2, r4, lsr r3
   21b74:	cmnvs	r1, r1, ror #2
   21b78:	teqcc	r2, r4, lsr r3
   21b7c:	cmnvs	r3, #-1946157055	; 0x8c000001
   21b80:	mov	r2, #0
   21b84:	mov	lr, r2
   21b88:	b	2199c <_start@@Base+0xccbc>
   21b8c:	mov	r2, #0
   21b90:	mov	lr, r2
   21b94:	b	219a4 <_start@@Base+0xccc4>
   21b98:	mov	r8, #0
   21b9c:	mov	lr, r8
   21ba0:	b	219ac <_start@@Base+0xcccc>
   21ba4:	ldrb	r2, [sl, #1]
   21ba8:	mov	r1, #0
   21bac:	ldrb	r0, [sl]
   21bb0:	str	r1, [sp, #24]
   21bb4:	lsl	r2, r2, #16
   21bb8:	orr	r3, r2, r0, lsl #24
   21bbc:	str	r3, [sp, #28]
   21bc0:	ldrd	r2, [sp, #24]
   21bc4:	cmp	r3, r7
   21bc8:	cmpeq	r2, r6
   21bcc:	bls	21a00 <_start@@Base+0xcd20>
   21bd0:	sub	r1, pc, #96	; 0x60
   21bd4:	ldrd	r0, [r1]
   21bd8:	ldrd	r2, [sp, #24]
   21bdc:	cmp	r3, r1
   21be0:	cmpeq	r2, r0
   21be4:	beq	21ef8 <_start@@Base+0xd218>
   21be8:	mov	r1, #0
   21bec:	mov	r0, #0
   21bf0:	str	r1, [sp, #128]	; 0x80
   21bf4:	movw	r1, #25443	; 0x6363
   21bf8:	movt	r1, #25443	; 0x6363
   21bfc:	str	r3, [sp, #132]	; 0x84
   21c00:	ldrd	r2, [sp, #128]	; 0x80
   21c04:	cmp	r3, r1
   21c08:	cmpeq	r2, r0
   21c0c:	bne	22514 <_start@@Base+0xd834>
   21c10:	cmp	ip, #4
   21c14:	ble	21b18 <_start@@Base+0xce38>
   21c18:	mov	r1, sl
   21c1c:	mov	r2, r4
   21c20:	mov	r0, r5
   21c24:	bl	1b750 <_start@@Base+0x6a70>
   21c28:	cmp	sl, r0
   21c2c:	mov	r1, r0
   21c30:	beq	21b18 <_start@@Base+0xce38>
   21c34:	add	r3, sp, #232	; 0xe8
   21c38:	mov	r2, r4
   21c3c:	mov	r0, r5
   21c40:	bl	31d48 <flatcc_json_parser_build_string@@Base>
   21c44:	ldr	r3, [sp, #232]	; 0xe8
   21c48:	mov	sl, r0
   21c4c:	cmp	r3, #0
   21c50:	beq	21abc <_start@@Base+0xcddc>
   21c54:	mov	r1, #4
   21c58:	ldr	r0, [r5]
   21c5c:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   21c60:	cmp	r0, #0
   21c64:	bne	21a84 <_start@@Base+0xcda4>
   21c68:	b	21abc <_start@@Base+0xcddc>
   21c6c:	mov	r2, #0
   21c70:	mov	r3, #0
   21c74:	b	21814 <_start@@Base+0xcb34>
   21c78:	mov	r6, #0
   21c7c:	mov	sl, r6
   21c80:	b	21844 <_start@@Base+0xcb64>
   21c84:	mov	r6, #0
   21c88:	mov	sl, r6
   21c8c:	b	2184c <_start@@Base+0xcb6c>
   21c90:	mov	r2, #0
   21c94:	mov	sl, r2
   21c98:	b	21820 <_start@@Base+0xcb40>
   21c9c:	mov	r2, #0
   21ca0:	mov	sl, r2
   21ca4:	b	21828 <_start@@Base+0xcb48>
   21ca8:	mov	r6, #0
   21cac:	mov	r8, r6
   21cb0:	b	21834 <_start@@Base+0xcb54>
   21cb4:	mov	r6, #0
   21cb8:	mov	sl, r6
   21cbc:	b	2183c <_start@@Base+0xcb5c>
   21cc0:	mov	r1, r0
   21cc4:	mov	r2, r4
   21cc8:	mov	r0, r5
   21ccc:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   21cd0:	mov	sl, r0
   21cd4:	sub	r3, r4, sl
   21cd8:	cmp	r3, #1
   21cdc:	ble	21cf0 <_start@@Base+0xd010>
   21ce0:	ldrb	r3, [sl]
   21ce4:	cmp	r3, #32
   21ce8:	bhi	21d04 <_start@@Base+0xd024>
   21cec:	beq	21ddc <_start@@Base+0xd0fc>
   21cf0:	mov	r1, sl
   21cf4:	mov	r2, r4
   21cf8:	mov	r0, r5
   21cfc:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   21d00:	mov	sl, r0
   21d04:	cmp	r4, sl
   21d08:	beq	21db0 <_start@@Base+0xd0d0>
   21d0c:	ldrb	r3, [sl]
   21d10:	cmp	r3, #44	; 0x2c
   21d14:	beq	21df0 <_start@@Base+0xd110>
   21d18:	mov	r3, #0
   21d1c:	str	r3, [sp, #220]	; 0xdc
   21d20:	ldrb	r3, [sl]
   21d24:	cmp	r3, #125	; 0x7d
   21d28:	beq	21d60 <_start@@Base+0xd080>
   21d2c:	mov	r3, #10
   21d30:	mov	r1, sl
   21d34:	mov	r2, r4
   21d38:	mov	r0, r5
   21d3c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   21d40:	ldr	r3, [sp, #220]	; 0xdc
   21d44:	b	21694 <_start@@Base+0xc9b4>
   21d48:	mov	r1, r0
   21d4c:	mov	r3, #5
   21d50:	mov	r2, r4
   21d54:	mov	r0, r5
   21d58:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   21d5c:	b	216b4 <_start@@Base+0xc9d4>
   21d60:	add	r1, sl, #1
   21d64:	sub	r3, r4, r1
   21d68:	cmp	r3, #1
   21d6c:	ble	21d80 <_start@@Base+0xd0a0>
   21d70:	ldrb	r3, [sl, #1]
   21d74:	cmp	r3, #32
   21d78:	bhi	22e38 <_start@@Base+0xe158>
   21d7c:	beq	23004 <_start@@Base+0xe324>
   21d80:	mov	r2, r4
   21d84:	mov	r0, r5
   21d88:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   21d8c:	ldr	r3, [sp, #220]	; 0xdc
   21d90:	b	21694 <_start@@Base+0xc9b4>
   21d94:	mov	r1, sl
   21d98:	mov	r3, #5
   21d9c:	mov	r2, r4
   21da0:	mov	r0, r5
   21da4:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   21da8:	mov	sl, r0
   21dac:	b	2194c <_start@@Base+0xcc6c>
   21db0:	mov	r3, #0
   21db4:	str	r3, [sp, #220]	; 0xdc
   21db8:	ldr	r3, [r5, #20]
   21dbc:	cmp	r3, #0
   21dc0:	bne	21ad4 <_start@@Base+0xcdf4>
   21dc4:	ldr	r0, [r5]
   21dc8:	bl	281c8 <flatcc_builder_end_table@@Base>
   21dcc:	cmp	r0, #0
   21dd0:	str	r0, [sp, #212]	; 0xd4
   21dd4:	bne	21af8 <_start@@Base+0xce18>
   21dd8:	b	21ad4 <_start@@Base+0xcdf4>
   21ddc:	ldrb	r3, [sl, #1]
   21de0:	cmp	r3, #32
   21de4:	addhi	sl, sl, #1
   21de8:	bls	21cf0 <_start@@Base+0xd010>
   21dec:	b	21d04 <_start@@Base+0xd024>
   21df0:	add	r0, sl, #1
   21df4:	sub	r3, r4, r0
   21df8:	cmp	r3, #1
   21dfc:	ble	21e10 <_start@@Base+0xd130>
   21e00:	ldrb	r3, [sl, #1]
   21e04:	cmp	r3, #32
   21e08:	bhi	21e20 <_start@@Base+0xd140>
   21e0c:	beq	232b4 <_start@@Base+0xe5d4>
   21e10:	mov	r1, r0
   21e14:	mov	r2, r4
   21e18:	mov	r0, r5
   21e1c:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   21e20:	cmp	r4, r0
   21e24:	beq	232cc <_start@@Base+0xe5ec>
   21e28:	ldrb	r3, [r0]
   21e2c:	cmp	r3, #125	; 0x7d
   21e30:	beq	233b0 <_start@@Base+0xe6d0>
   21e34:	mov	r3, #1
   21e38:	str	r3, [sp, #220]	; 0xdc
   21e3c:	b	2169c <_start@@Base+0xc9bc>
   21e40:	add	sl, sl, #8
   21e44:	mov	r1, r4
   21e48:	str	r8, [sp, #168]	; 0xa8
   21e4c:	mov	r0, sl
   21e50:	bl	14dd0 <_start@@Base+0xf0>
   21e54:	and	r3, r1, #-16777216	; 0xff000000
   21e58:	str	r3, [sp, #172]	; 0xac
   21e5c:	ldrd	r2, [sp, #168]	; 0xa8
   21e60:	cmp	r3, #889192448	; 0x35000000
   21e64:	cmpeq	r2, #0
   21e68:	bne	21b18 <_start@@Base+0xce38>
   21e6c:	sub	r3, r4, sl
   21e70:	cmp	r3, #1
   21e74:	ble	21b18 <_start@@Base+0xce38>
   21e78:	mov	r2, r4
   21e7c:	mov	r1, sl
   21e80:	mov	r0, r5
   21e84:	bl	1b80c <_start@@Base+0x6b2c>
   21e88:	cmp	sl, r0
   21e8c:	mov	r9, r0
   21e90:	beq	21b18 <_start@@Base+0xce38>
   21e94:	mov	r1, r0
   21e98:	mov	r2, r4
   21e9c:	str	r8, [sp, #240]	; 0xf0
   21ea0:	add	r3, sp, #240	; 0xf0
   21ea4:	mov	r0, r5
   21ea8:	bl	17d90 <_start@@Base+0x30b0>
   21eac:	cmp	r9, r0
   21eb0:	mov	sl, r0
   21eb4:	beq	234e0 <_start@@Base+0xe800>
   21eb8:	ldr	r3, [sp, #240]	; 0xf0
   21ebc:	cmp	r3, #0
   21ec0:	bne	21ed0 <_start@@Base+0xd1f0>
   21ec4:	ldr	r3, [r5, #8]
   21ec8:	tst	r3, #2
   21ecc:	beq	21a8c <_start@@Base+0xcdac>
   21ed0:	mov	r3, #4
   21ed4:	mov	r1, #1
   21ed8:	mov	r2, r3
   21edc:	ldr	r0, [r5]
   21ee0:	bl	29bc0 <flatcc_builder_table_add@@Base>
   21ee4:	cmp	r0, #0
   21ee8:	beq	21abc <_start@@Base+0xcddc>
   21eec:	ldr	r3, [sp, #240]	; 0xf0
   21ef0:	str	r3, [r0]
   21ef4:	b	21a8c <_start@@Base+0xcdac>
   21ef8:	cmp	ip, #8
   21efc:	ble	22d1c <_start@@Base+0xe03c>
   21f00:	mov	r2, r4
   21f04:	mov	r1, sl
   21f08:	mov	r0, r5
   21f0c:	bl	1b694 <_start@@Base+0x69b4>
   21f10:	cmp	sl, r0
   21f14:	mov	r8, r0
   21f18:	beq	22d1c <_start@@Base+0xe03c>
   21f1c:	mov	sl, #0
   21f20:	mov	fp, #0
   21f24:	mov	r1, r0
   21f28:	add	r3, sp, #240	; 0xf0
   21f2c:	mov	r2, r4
   21f30:	mov	r0, r5
   21f34:	strd	sl, [sp, #240]	; 0xf0
   21f38:	bl	17644 <_start@@Base+0x2964>
   21f3c:	cmp	r8, r0
   21f40:	mov	sl, r0
   21f44:	beq	23484 <_start@@Base+0xe7a4>
   21f48:	ldrd	r2, [sp, #240]	; 0xf0
   21f4c:	orrs	r3, r2, r3
   21f50:	bne	21f60 <_start@@Base+0xd280>
   21f54:	ldr	r3, [r5, #8]
   21f58:	tst	r3, #2
   21f5c:	beq	21a8c <_start@@Base+0xcdac>
   21f60:	mov	r3, #8
   21f64:	mov	r1, #5
   21f68:	mov	r2, r3
   21f6c:	ldr	r0, [r5]
   21f70:	bl	29bc0 <flatcc_builder_table_add@@Base>
   21f74:	cmp	r0, #0
   21f78:	beq	21abc <_start@@Base+0xcddc>
   21f7c:	ldrd	r2, [sp, #240]	; 0xf0
   21f80:	strd	r2, [r0]
   21f84:	b	21a8c <_start@@Base+0xcdac>
   21f88:	add	r3, pc, #1000	; 0x3e8
   21f8c:	ldrd	r2, [r3]
   21f90:	ldrd	r0, [sp, #88]	; 0x58
   21f94:	cmp	r1, r3
   21f98:	cmpeq	r0, r2
   21f9c:	bne	22660 <_start@@Base+0xd980>
   21fa0:	sub	r3, r4, r7
   21fa4:	cmp	r3, #6
   21fa8:	ble	22660 <_start@@Base+0xd980>
   21fac:	mov	r2, r4
   21fb0:	mov	r1, r7
   21fb4:	mov	r0, r5
   21fb8:	bl	1b5d8 <_start@@Base+0x68f8>
   21fbc:	cmp	r7, r0
   21fc0:	mov	r6, r0
   21fc4:	beq	22660 <_start@@Base+0xd980>
   21fc8:	mov	r1, #2
   21fcc:	ldr	r0, [r5]
   21fd0:	bl	27848 <flatcc_builder_start_table@@Base>
   21fd4:	cmp	r0, #0
   21fd8:	mov	r1, r6
   21fdc:	bne	21ac0 <_start@@Base+0xcde0>
   21fe0:	add	r3, sp, #224	; 0xe0
   21fe4:	mov	r2, r4
   21fe8:	mov	r0, r5
   21fec:	bl	1ae08 <_start@@Base+0x6128>
   21ff0:	ldr	r3, [sp, #224]	; 0xe0
   21ff4:	cmp	r3, #0
   21ff8:	beq	236e8 <_start@@Base+0xea08>
   21ffc:	cmp	r4, r0
   22000:	beq	22014 <_start@@Base+0xd334>
   22004:	ldrb	r3, [r0]
   22008:	cmp	r3, #34	; 0x22
   2200c:	addeq	r0, r0, #1
   22010:	bne	222ec <_start@@Base+0xd60c>
   22014:	sub	r3, r4, r0
   22018:	cmp	r3, #8
   2201c:	bhi	22050 <_start@@Base+0xd370>
   22020:	sub	r3, r3, #1
   22024:	cmp	r3, #7
   22028:	ldrls	pc, [pc, r3, lsl #2]
   2202c:	b	222d4 <_start@@Base+0xd5f4>
   22030:	andeq	r2, r2, ip, lsr r1
   22034:	andeq	r2, r2, r0, lsr r1
   22038:	andeq	r2, r2, r4, lsr #2
   2203c:	andeq	r2, r2, r8, lsl r1
   22040:	andeq	r2, r2, ip, lsl #2
   22044:	andeq	r2, r2, r0, lsl #2
   22048:	strdeq	r2, [r2], -r4
   2204c:	andeq	r2, r2, r0, asr r0
   22050:	ldrb	r2, [r0, #7]
   22054:	mov	r3, #0
   22058:	mov	sl, r3
   2205c:	ldrb	r6, [r0, #6]
   22060:	orr	r2, r2, r6, lsl #8
   22064:	ldrb	r6, [r0, #5]
   22068:	orr	r2, r2, r6, lsl #16
   2206c:	ldrb	r6, [r0, #4]
   22070:	mov	r8, sl
   22074:	orr	r2, r2, r6, lsl #24
   22078:	ldrb	sl, [r0, #3]
   2207c:	orr	sl, r8, sl
   22080:	ldrb	r8, [r0, #2]
   22084:	orr	sl, sl, r8, lsl #8
   22088:	ldrb	r8, [r0, #1]
   2208c:	orr	r8, sl, r8, lsl #16
   22090:	str	r2, [sp, #72]	; 0x48
   22094:	ldrb	r2, [r0]
   22098:	add	r7, pc, #736	; 0x2e0
   2209c:	ldrd	r6, [r7]
   220a0:	orr	r3, r8, r2, lsl #24
   220a4:	str	r3, [sp, #76]	; 0x4c
   220a8:	ldrd	r2, [sp, #72]	; 0x48
   220ac:	cmp	r3, r7
   220b0:	cmpeq	r2, r6
   220b4:	bne	222d4 <_start@@Base+0xd5f4>
   220b8:	add	r6, r0, #8
   220bc:	sub	r1, r4, r6
   220c0:	cmp	r1, #8
   220c4:	bhi	22148 <_start@@Base+0xd468>
   220c8:	sub	r3, r1, #2
   220cc:	cmp	r3, #6
   220d0:	ldrls	pc, [pc, r3, lsl #2]
   220d4:	b	221f0 <_start@@Base+0xd510>
   220d8:			; <UNDEFINED> instruction: 0x000222b4
   220dc:	andeq	r2, r2, r8, lsr #5
   220e0:	muleq	r2, ip, r2
   220e4:	muleq	r2, r0, r2
   220e8:	andeq	r2, r2, r4, lsl #5
   220ec:	andeq	r2, r2, r8, ror r2
   220f0:	andeq	r2, r2, r8, asr #2
   220f4:	mov	r2, #0
   220f8:	mov	r3, #0
   220fc:	b	22058 <_start@@Base+0xd378>
   22100:	mov	r2, #0
   22104:	mov	sl, r2
   22108:	b	22064 <_start@@Base+0xd384>
   2210c:	mov	r2, #0
   22110:	mov	sl, r2
   22114:	b	2206c <_start@@Base+0xd38c>
   22118:	mov	r2, #0
   2211c:	mov	r8, r2
   22120:	b	22078 <_start@@Base+0xd398>
   22124:	mov	r2, #0
   22128:	mov	sl, r2
   2212c:	b	22080 <_start@@Base+0xd3a0>
   22130:	mov	r2, #0
   22134:	mov	sl, r2
   22138:	b	22088 <_start@@Base+0xd3a8>
   2213c:	mov	r2, #0
   22140:	mov	r8, r2
   22144:	b	22090 <_start@@Base+0xd3b0>
   22148:	ldrb	r2, [r0, #15]
   2214c:	mov	r3, #0
   22150:	mov	ip, r3
   22154:	ldrb	sl, [r0, #14]
   22158:	orr	r2, r2, sl, lsl #8
   2215c:	ldrb	sl, [r0, #13]
   22160:	orr	r2, r2, sl, lsl #16
   22164:	ldrb	sl, [r0, #12]
   22168:	orr	sl, r2, sl, lsl #24
   2216c:	ldrb	r8, [r0, #11]
   22170:	orr	ip, ip, r8
   22174:	ldrb	r2, [r0, #8]
   22178:	mov	r7, #0
   2217c:	str	sl, [sp, #48]	; 0x30
   22180:	ldrb	r8, [r0, #10]
   22184:	lsl	lr, r2, #24
   22188:	ldrb	r2, [r0, #9]
   2218c:	orr	r8, ip, r8, lsl #8
   22190:	orr	r2, lr, r2, lsl #16
   22194:	orr	r3, r2, r8
   22198:	add	r9, pc, #488	; 0x1e8
   2219c:	ldrd	r8, [r9]
   221a0:	str	r3, [sp, #52]	; 0x34
   221a4:	ldrd	r2, [sp, #48]	; 0x30
   221a8:	cmp	r3, r9
   221ac:	cmpeq	r2, r8
   221b0:	beq	223a4 <_start@@Base+0xd6c4>
   221b4:	ldrd	r2, [sp, #48]	; 0x30
   221b8:	add	r9, pc, #464	; 0x1d0
   221bc:	ldrd	r8, [r9]
   221c0:	bic	ip, r2, #255	; 0xff
   221c4:	str	ip, [sp, #112]	; 0x70
   221c8:	str	r3, [sp, #116]	; 0x74
   221cc:	ldrd	r2, [sp, #112]	; 0x70
   221d0:	cmp	r3, r9
   221d4:	cmpeq	r2, r8
   221d8:	bne	221f0 <_start@@Base+0xd510>
   221dc:	cmp	r1, #7
   221e0:	ble	221f0 <_start@@Base+0xd510>
   221e4:	ldrb	r3, [r0, #15]
   221e8:	cmp	r3, #34	; 0x22
   221ec:	beq	23040 <_start@@Base+0xe360>
   221f0:	mov	r1, r6
   221f4:	mov	r2, r4
   221f8:	mov	r0, r5
   221fc:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   22200:	mov	sl, r0
   22204:	sub	r3, r4, sl
   22208:	cmp	r3, #1
   2220c:	ble	22220 <_start@@Base+0xd540>
   22210:	ldrb	r3, [sl]
   22214:	cmp	r3, #32
   22218:	bhi	22234 <_start@@Base+0xd554>
   2221c:	beq	224b0 <_start@@Base+0xd7d0>
   22220:	mov	r1, sl
   22224:	mov	r2, r4
   22228:	mov	r0, r5
   2222c:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   22230:	mov	sl, r0
   22234:	cmp	r4, sl
   22238:	beq	22338 <_start@@Base+0xd658>
   2223c:	ldrb	r3, [sl]
   22240:	cmp	r3, #44	; 0x2c
   22244:	beq	224c4 <_start@@Base+0xd7e4>
   22248:	mov	r3, #0
   2224c:	str	r3, [sp, #224]	; 0xe0
   22250:	ldrb	r3, [sl]
   22254:	cmp	r3, #125	; 0x7d
   22258:	beq	22304 <_start@@Base+0xd624>
   2225c:	mov	r3, #10
   22260:	mov	r1, sl
   22264:	mov	r2, r4
   22268:	mov	r0, r5
   2226c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   22270:	ldr	r3, [sp, #224]	; 0xe0
   22274:	b	21ff4 <_start@@Base+0xd314>
   22278:	mov	r2, #0
   2227c:	mov	r3, #0
   22280:	b	22150 <_start@@Base+0xd470>
   22284:	mov	r2, #0
   22288:	mov	ip, r2
   2228c:	b	2215c <_start@@Base+0xd47c>
   22290:	mov	r2, #0
   22294:	mov	ip, r2
   22298:	b	22164 <_start@@Base+0xd484>
   2229c:	mov	sl, #0
   222a0:	mov	ip, sl
   222a4:	b	2216c <_start@@Base+0xd48c>
   222a8:	mov	sl, #0
   222ac:	mov	ip, sl
   222b0:	b	22174 <_start@@Base+0xd494>
   222b4:	ldrb	r2, [r0, #9]
   222b8:	mov	ip, #0
   222bc:	ldrb	r8, [r0, #8]
   222c0:	str	ip, [sp, #48]	; 0x30
   222c4:	lsl	r2, r2, #16
   222c8:	orr	r3, r2, r8, lsl #24
   222cc:	str	r3, [sp, #52]	; 0x34
   222d0:	b	221b4 <_start@@Base+0xd4d4>
   222d4:	mov	r1, r0
   222d8:	mov	r2, r4
   222dc:	mov	r0, r5
   222e0:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   222e4:	mov	sl, r0
   222e8:	b	22204 <_start@@Base+0xd524>
   222ec:	mov	r1, r0
   222f0:	mov	r3, #5
   222f4:	mov	r2, r4
   222f8:	mov	r0, r5
   222fc:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   22300:	b	22014 <_start@@Base+0xd334>
   22304:	add	r1, sl, #1
   22308:	sub	r3, r4, r1
   2230c:	cmp	r3, #1
   22310:	ble	22324 <_start@@Base+0xd644>
   22314:	ldrb	r3, [sl, #1]
   22318:	cmp	r3, #32
   2231c:	bhi	22e40 <_start@@Base+0xe160>
   22320:	beq	231b8 <_start@@Base+0xe4d8>
   22324:	mov	r2, r4
   22328:	mov	r0, r5
   2232c:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   22330:	ldr	r3, [sp, #224]	; 0xe0
   22334:	b	21ff4 <_start@@Base+0xd314>
   22338:	mov	r3, #0
   2233c:	str	r3, [sp, #224]	; 0xe0
   22340:	ldr	r3, [r5, #20]
   22344:	cmp	r3, #0
   22348:	bne	21abc <_start@@Base+0xcddc>
   2234c:	ldr	r0, [r5]
   22350:	bl	281c8 <flatcc_builder_end_table@@Base>
   22354:	subs	r6, r0, #0
   22358:	beq	21abc <_start@@Base+0xcddc>
   2235c:	mov	r1, #2
   22360:	ldr	r0, [r5]
   22364:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   22368:	cmp	r0, #0
   2236c:	beq	21ad4 <_start@@Base+0xcdf4>
   22370:	str	r6, [r0]
   22374:	b	21cd4 <_start@@Base+0xcff4>
   22378:	ldrvs	r0, [r3, -r0]!
   2237c:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   22380:	svcpl	0x00626262
   22384:	cmnvs	r1, r1, ror #2
   22388:	cmnvs	r2, pc, asr r4
   2238c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   22390:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   22394:	subsvs	r7, pc, #116, 6	; 0xd0000001
   22398:	movwvc	r0, #0
   2239c:	cmnvc	r4, #112, 10	; 0x1c000000
   223a0:	andeq	r8, r5, ip, ror #5
   223a4:	add	r8, r0, #16
   223a8:	mov	r1, r4
   223ac:	mov	r0, r8
   223b0:	bl	14dd0 <_start@@Base+0xf0>
   223b4:	and	r3, r0, #-16777216	; 0xff000000
   223b8:	str	r3, [sp, #160]	; 0xa0
   223bc:	str	r1, [sp, #164]	; 0xa4
   223c0:	sub	r1, pc, #48	; 0x30
   223c4:	ldrd	r0, [r1]
   223c8:	ldrd	r2, [sp, #160]	; 0xa0
   223cc:	cmp	r3, r1
   223d0:	cmpeq	r2, r0
   223d4:	bne	225b8 <_start@@Base+0xd8d8>
   223d8:	sub	r3, r4, r8
   223dc:	cmp	r3, #5
   223e0:	ble	225b8 <_start@@Base+0xd8d8>
   223e4:	mov	r2, r4
   223e8:	mov	r1, r8
   223ec:	mov	r0, r5
   223f0:	bl	1b51c <_start@@Base+0x683c>
   223f4:	cmp	r8, r0
   223f8:	mov	r6, r0
   223fc:	beq	225b8 <_start@@Base+0xd8d8>
   22400:	mov	r2, #0
   22404:	mov	r3, #0
   22408:	str	r7, [sp, #228]	; 0xe4
   2240c:	cmp	r4, r0
   22410:	str	r7, [sp, #232]	; 0xe8
   22414:	strd	r2, [sp, #240]	; 0xf0
   22418:	beq	23358 <_start@@Base+0xe678>
   2241c:	add	r0, sp, #240	; 0xf0
   22420:	add	r3, sp, #232	; 0xe8
   22424:	mov	r2, r4
   22428:	mov	r1, r6
   2242c:	str	r0, [sp]
   22430:	mov	r0, r5
   22434:	bl	316c0 <flatcc_json_parser_integer@@Base>
   22438:	cmp	r6, r0
   2243c:	mov	r7, r0
   22440:	bne	233f0 <_start@@Base+0xe710>
   22444:	add	ip, sp, #228	; 0xe4
   22448:	ldr	r3, [pc, #-176]	; 223a0 <_start@@Base+0xd6c0>
   2244c:	mov	r2, r4
   22450:	mov	r1, r7
   22454:	mov	r0, r5
   22458:	str	ip, [sp]
   2245c:	bl	1a5c4 <_start@@Base+0x58e4>
   22460:	cmp	r4, r0
   22464:	cmpne	r0, r7
   22468:	mov	sl, r0
   2246c:	beq	21abc <_start@@Base+0xcddc>
   22470:	ldr	r2, [sp, #228]	; 0xe4
   22474:	cmp	r2, #0
   22478:	bne	22488 <_start@@Base+0xd7a8>
   2247c:	ldr	r3, [r5, #8]
   22480:	tst	r3, #2
   22484:	beq	22204 <_start@@Base+0xd524>
   22488:	mov	r3, #4
   2248c:	mov	r1, #1
   22490:	ldr	r0, [r5]
   22494:	mov	r2, r3
   22498:	bl	29bc0 <flatcc_builder_table_add@@Base>
   2249c:	cmp	r0, #0
   224a0:	beq	21abc <_start@@Base+0xcddc>
   224a4:	ldr	r3, [sp, #228]	; 0xe4
   224a8:	str	r3, [r0]
   224ac:	b	22204 <_start@@Base+0xd524>
   224b0:	ldrb	r3, [sl, #1]
   224b4:	cmp	r3, #32
   224b8:	addhi	sl, sl, #1
   224bc:	bls	22220 <_start@@Base+0xd540>
   224c0:	b	22234 <_start@@Base+0xd554>
   224c4:	add	r0, sl, #1
   224c8:	sub	r3, r4, r0
   224cc:	cmp	r3, #1
   224d0:	ble	224e4 <_start@@Base+0xd804>
   224d4:	ldrb	r3, [sl, #1]
   224d8:	cmp	r3, #32
   224dc:	bhi	224f4 <_start@@Base+0xd814>
   224e0:	beq	232fc <_start@@Base+0xe61c>
   224e4:	mov	r1, r0
   224e8:	mov	r2, r4
   224ec:	mov	r0, r5
   224f0:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   224f4:	cmp	r4, r0
   224f8:	beq	23314 <_start@@Base+0xe634>
   224fc:	ldrb	r3, [r0]
   22500:	cmp	r3, #125	; 0x7d
   22504:	beq	233d0 <_start@@Base+0xe6f0>
   22508:	mov	r3, #1
   2250c:	str	r3, [sp, #224]	; 0xe0
   22510:	b	21ffc <_start@@Base+0xd31c>
   22514:	add	r1, pc, #764	; 0x2fc
   22518:	ldrd	r0, [r1]
   2251c:	ldrd	r2, [sp, #24]
   22520:	cmp	r3, r1
   22524:	cmpeq	r2, r0
   22528:	bne	21b18 <_start@@Base+0xce38>
   2252c:	cmp	ip, #8
   22530:	ble	22f64 <_start@@Base+0xe284>
   22534:	mov	r2, r4
   22538:	mov	r1, sl
   2253c:	mov	r0, r5
   22540:	bl	1b694 <_start@@Base+0x69b4>
   22544:	cmp	sl, r0
   22548:	mov	r8, r0
   2254c:	beq	22f64 <_start@@Base+0xe284>
   22550:	mov	sl, #0
   22554:	mov	fp, #0
   22558:	mov	r1, r0
   2255c:	add	r3, sp, #240	; 0xf0
   22560:	mov	r2, r4
   22564:	mov	r0, r5
   22568:	strd	sl, [sp, #240]	; 0xf0
   2256c:	bl	17644 <_start@@Base+0x2964>
   22570:	cmp	r8, r0
   22574:	mov	sl, r0
   22578:	beq	23510 <_start@@Base+0xe830>
   2257c:	ldrd	r2, [sp, #240]	; 0xf0
   22580:	orrs	r3, r2, r3
   22584:	bne	22594 <_start@@Base+0xd8b4>
   22588:	ldr	r3, [r5, #8]
   2258c:	tst	r3, #2
   22590:	beq	21a8c <_start@@Base+0xcdac>
   22594:	mov	r3, #8
   22598:	mov	r1, #7
   2259c:	b	21f68 <_start@@Base+0xd288>
   225a0:	mov	r1, r6
   225a4:	mov	r2, r4
   225a8:	mov	r0, r5
   225ac:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   225b0:	mov	sl, r0
   225b4:	b	2140c <_start@@Base+0xc72c>
   225b8:	mov	r1, r8
   225bc:	mov	r2, r4
   225c0:	mov	r0, r5
   225c4:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   225c8:	mov	sl, r0
   225cc:	b	22204 <_start@@Base+0xd524>
   225d0:	add	r1, pc, #584	; 0x248
   225d4:	ldrd	r0, [r1]
   225d8:	ldrd	r2, [sp, #24]
   225dc:	cmp	r3, r1
   225e0:	cmpeq	r2, r0
   225e4:	beq	22dc4 <_start@@Base+0xe0e4>
   225e8:	ldrd	r0, [sp, #120]	; 0x78
   225ec:	movw	r3, #25186	; 0x6262
   225f0:	movt	r3, #25186	; 0x6262
   225f4:	mov	r2, #0
   225f8:	cmp	r1, r3
   225fc:	cmpeq	r0, r2
   22600:	bne	21b18 <_start@@Base+0xce38>
   22604:	cmp	ip, #4
   22608:	ble	21b18 <_start@@Base+0xce38>
   2260c:	mov	r1, sl
   22610:	mov	r2, r4
   22614:	mov	r0, r5
   22618:	bl	1b750 <_start@@Base+0x6a70>
   2261c:	cmp	sl, r0
   22620:	mov	r1, r0
   22624:	beq	21b18 <_start@@Base+0xce38>
   22628:	add	r3, sp, #232	; 0xe8
   2262c:	mov	r2, r4
   22630:	mov	r0, r5
   22634:	bl	31d48 <flatcc_json_parser_build_string@@Base>
   22638:	ldr	r3, [sp, #232]	; 0xe8
   2263c:	mov	sl, r0
   22640:	cmp	r3, #0
   22644:	beq	21abc <_start@@Base+0xcddc>
   22648:	mov	r1, #2
   2264c:	ldr	r0, [r5]
   22650:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   22654:	cmp	r0, #0
   22658:	bne	21a84 <_start@@Base+0xcda4>
   2265c:	b	21abc <_start@@Base+0xcddc>
   22660:	mov	r1, r7
   22664:	mov	r2, r4
   22668:	mov	r0, r5
   2266c:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   22670:	mov	sl, r0
   22674:	b	21cd4 <_start@@Base+0xcff4>
   22678:	sub	r3, r4, r7
   2267c:	cmp	r3, #6
   22680:	ble	22660 <_start@@Base+0xd980>
   22684:	mov	r2, r4
   22688:	mov	r1, r7
   2268c:	mov	r0, r5
   22690:	bl	1b5d8 <_start@@Base+0x68f8>
   22694:	cmp	r7, r0
   22698:	mov	r6, r0
   2269c:	beq	22660 <_start@@Base+0xd980>
   226a0:	mov	r1, #2
   226a4:	ldr	r0, [r5]
   226a8:	bl	27848 <flatcc_builder_start_table@@Base>
   226ac:	cmp	r0, #0
   226b0:	mov	r1, r6
   226b4:	bne	21ac0 <_start@@Base+0xcde0>
   226b8:	add	r3, sp, #224	; 0xe0
   226bc:	mov	r2, r4
   226c0:	mov	r0, r5
   226c4:	bl	1ae08 <_start@@Base+0x6128>
   226c8:	ldr	r3, [sp, #224]	; 0xe0
   226cc:	cmp	r3, #0
   226d0:	beq	236d8 <_start@@Base+0xe9f8>
   226d4:	cmp	r4, r0
   226d8:	beq	226ec <_start@@Base+0xda0c>
   226dc:	ldrb	r3, [r0]
   226e0:	cmp	r3, #34	; 0x22
   226e4:	addeq	r0, r0, #1
   226e8:	bne	229c4 <_start@@Base+0xdce4>
   226ec:	sub	r3, r4, r0
   226f0:	cmp	r3, #8
   226f4:	bhi	22728 <_start@@Base+0xda48>
   226f8:	sub	r3, r3, #1
   226fc:	cmp	r3, #7
   22700:	ldrls	pc, [pc, r3, lsl #2]
   22704:	b	229ac <_start@@Base+0xdccc>
   22708:	andeq	r2, r2, r0, lsl #16
   2270c:	strdeq	r2, [r2], -r4
   22710:	andeq	r2, r2, r8, ror #15
   22714:	ldrdeq	r2, [r2], -ip
   22718:	ldrdeq	r2, [r2], -r0
   2271c:	andeq	r2, r2, ip, lsl #16
   22720:	andeq	r2, r2, r4, asr #15
   22724:	andeq	r2, r2, r8, lsr #14
   22728:	ldrb	r8, [r0, #7]
   2272c:	mov	r9, #0
   22730:	mov	r3, r9
   22734:	ldrb	r6, [r0, #6]
   22738:	orr	r2, r8, r6, lsl #8
   2273c:	ldrb	sl, [r0, #5]
   22740:	orr	r2, r2, sl, lsl #16
   22744:	ldrb	sl, [r0, #4]
   22748:	orr	r2, r2, sl, lsl #24
   2274c:	ldrb	r8, [r0, #3]
   22750:	orr	r8, r3, r8
   22754:	ldrb	sl, [r0, #2]
   22758:	orr	r8, r8, sl, lsl #8
   2275c:	ldrb	sl, [r0, #1]
   22760:	orr	r8, r8, sl, lsl #16
   22764:	str	r2, [sp, #64]	; 0x40
   22768:	ldrb	r2, [r0]
   2276c:	add	r7, pc, #180	; 0xb4
   22770:	ldrd	r6, [r7]
   22774:	orr	r3, r8, r2, lsl #24
   22778:	str	r3, [sp, #68]	; 0x44
   2277c:	ldrd	r2, [sp, #64]	; 0x40
   22780:	cmp	r3, r7
   22784:	cmpeq	r2, r6
   22788:	bne	229ac <_start@@Base+0xdccc>
   2278c:	add	r6, r0, #8
   22790:	sub	r1, r4, r6
   22794:	cmp	r1, #8
   22798:	bhi	22844 <_start@@Base+0xdb64>
   2279c:	sub	r3, r1, #3
   227a0:	cmp	r3, #5
   227a4:	ldrls	pc, [pc, r3, lsl #2]
   227a8:	b	228e8 <_start@@Base+0xdc08>
   227ac:	muleq	r2, r4, r9
   227b0:	andeq	r2, r2, r8, lsl #19
   227b4:	andeq	r2, r2, ip, ror r9
   227b8:	andeq	r2, r2, r0, ror r9
   227bc:	andeq	r2, r2, r0, lsr #19
   227c0:	andeq	r2, r2, r4, asr #16
   227c4:	mov	r8, #0
   227c8:	mov	r9, #0
   227cc:	b	22730 <_start@@Base+0xda50>
   227d0:	mov	r2, #0
   227d4:	mov	r3, r2
   227d8:	b	22744 <_start@@Base+0xda64>
   227dc:	mov	r2, #0
   227e0:	mov	r3, r2
   227e4:	b	2274c <_start@@Base+0xda6c>
   227e8:	mov	r2, #0
   227ec:	mov	r8, r2
   227f0:	b	22754 <_start@@Base+0xda74>
   227f4:	mov	r2, #0
   227f8:	mov	r8, r2
   227fc:	b	2275c <_start@@Base+0xda7c>
   22800:	mov	r2, #0
   22804:	mov	r8, r2
   22808:	b	22764 <_start@@Base+0xda84>
   2280c:	mov	r2, #0
   22810:	mov	r3, r2
   22814:	b	2273c <_start@@Base+0xda5c>
   22818:	teqcc	r2, r4, lsr r3
   2281c:	strbtvs	r6, [r4], #-1124	; 0xfffffb9c
   22820:	teqcc	r2, r4, lsr r3
   22824:	rsbvs	r6, r2, #536870918	; 0x20000006
   22828:	svcpl	0x00626262
   2282c:	cmnvs	r1, r1, ror #2
   22830:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   22834:	subsvs	r7, pc, #116, 6	; 0xd0000001
   22838:	cmnvs	r2, pc, asr r4
   2283c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   22840:	andeq	r8, r5, ip, lsl #5
   22844:	ldrb	r2, [r0, #15]
   22848:	mov	r3, #0
   2284c:	mov	ip, r3
   22850:	ldrb	sl, [r0, #14]
   22854:	orr	r2, r2, sl, lsl #8
   22858:	ldrb	sl, [r0, #13]
   2285c:	orr	r2, r2, sl, lsl #16
   22860:	ldrb	sl, [r0, #12]
   22864:	orr	sl, r2, sl, lsl #24
   22868:	ldrb	r8, [r0, #11]
   2286c:	orr	ip, ip, r8
   22870:	ldrb	r2, [r0, #8]
   22874:	str	sl, [sp, #40]	; 0x28
   22878:	ldrb	r8, [r0, #10]
   2287c:	lsl	lr, r2, #24
   22880:	ldrb	r2, [r0, #9]
   22884:	orr	r8, ip, r8, lsl #8
   22888:	orr	r2, lr, r2, lsl #16
   2288c:	orr	r3, r2, r8
   22890:	sub	r9, pc, #104	; 0x68
   22894:	ldrd	r8, [r9]
   22898:	str	r3, [sp, #44]	; 0x2c
   2289c:	ldrd	r2, [sp, #40]	; 0x28
   228a0:	bic	ip, r2, #255	; 0xff
   228a4:	str	ip, [sp, #96]	; 0x60
   228a8:	str	r3, [sp, #100]	; 0x64
   228ac:	ldrd	r2, [sp, #96]	; 0x60
   228b0:	cmp	r3, r9
   228b4:	cmpeq	r2, r8
   228b8:	beq	22a4c <_start@@Base+0xdd6c>
   228bc:	sub	r9, pc, #140	; 0x8c
   228c0:	ldrd	r8, [r9]
   228c4:	ldrd	r2, [sp, #40]	; 0x28
   228c8:	cmp	r3, r9
   228cc:	cmpeq	r2, r8
   228d0:	bne	228e8 <_start@@Base+0xdc08>
   228d4:	cmp	r1, #8
   228d8:	ble	228e8 <_start@@Base+0xdc08>
   228dc:	ldrb	r3, [r0, #16]
   228e0:	cmp	r3, #34	; 0x22
   228e4:	beq	22e50 <_start@@Base+0xe170>
   228e8:	mov	r1, r6
   228ec:	mov	r2, r4
   228f0:	mov	r0, r5
   228f4:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   228f8:	mov	sl, r0
   228fc:	sub	r3, r4, sl
   22900:	cmp	r3, #1
   22904:	ble	22918 <_start@@Base+0xdc38>
   22908:	ldrb	r3, [sl]
   2290c:	cmp	r3, #32
   22910:	bhi	2292c <_start@@Base+0xdc4c>
   22914:	beq	22b58 <_start@@Base+0xde78>
   22918:	mov	r1, sl
   2291c:	mov	r2, r4
   22920:	mov	r0, r5
   22924:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   22928:	mov	sl, r0
   2292c:	cmp	r4, sl
   22930:	beq	22a10 <_start@@Base+0xdd30>
   22934:	ldrb	r3, [sl]
   22938:	cmp	r3, #44	; 0x2c
   2293c:	beq	22b6c <_start@@Base+0xde8c>
   22940:	mov	r3, #0
   22944:	str	r3, [sp, #224]	; 0xe0
   22948:	ldrb	r3, [sl]
   2294c:	cmp	r3, #125	; 0x7d
   22950:	beq	229dc <_start@@Base+0xdcfc>
   22954:	mov	r3, #10
   22958:	mov	r1, sl
   2295c:	mov	r2, r4
   22960:	mov	r0, r5
   22964:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   22968:	ldr	r3, [sp, #224]	; 0xe0
   2296c:	b	226cc <_start@@Base+0xd9ec>
   22970:	mov	r2, #0
   22974:	mov	ip, r2
   22978:	b	22858 <_start@@Base+0xdb78>
   2297c:	mov	r2, #0
   22980:	mov	ip, r2
   22984:	b	22860 <_start@@Base+0xdb80>
   22988:	mov	sl, #0
   2298c:	mov	ip, sl
   22990:	b	22868 <_start@@Base+0xdb88>
   22994:	mov	sl, #0
   22998:	mov	ip, sl
   2299c:	b	22870 <_start@@Base+0xdb90>
   229a0:	mov	r2, #0
   229a4:	mov	r3, #0
   229a8:	b	2284c <_start@@Base+0xdb6c>
   229ac:	mov	r1, r0
   229b0:	mov	r2, r4
   229b4:	mov	r0, r5
   229b8:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   229bc:	mov	sl, r0
   229c0:	b	228fc <_start@@Base+0xdc1c>
   229c4:	mov	r1, r0
   229c8:	mov	r3, #5
   229cc:	mov	r2, r4
   229d0:	mov	r0, r5
   229d4:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   229d8:	b	226ec <_start@@Base+0xda0c>
   229dc:	add	r1, sl, #1
   229e0:	sub	r3, r4, r1
   229e4:	cmp	r3, #1
   229e8:	ble	229fc <_start@@Base+0xdd1c>
   229ec:	ldrb	r3, [sl, #1]
   229f0:	cmp	r3, #32
   229f4:	bhi	22dbc <_start@@Base+0xe0dc>
   229f8:	beq	22f50 <_start@@Base+0xe270>
   229fc:	mov	r2, r4
   22a00:	mov	r0, r5
   22a04:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   22a08:	ldr	r3, [sp, #224]	; 0xe0
   22a0c:	b	226cc <_start@@Base+0xd9ec>
   22a10:	mov	r3, #0
   22a14:	str	r3, [sp, #224]	; 0xe0
   22a18:	ldr	r3, [r5, #20]
   22a1c:	cmp	r3, #0
   22a20:	bne	21abc <_start@@Base+0xcddc>
   22a24:	ldr	r0, [r5]
   22a28:	bl	281c8 <flatcc_builder_end_table@@Base>
   22a2c:	subs	r6, r0, #0
   22a30:	beq	21abc <_start@@Base+0xcddc>
   22a34:	mov	r1, #1
   22a38:	ldr	r0, [r5]
   22a3c:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   22a40:	cmp	r0, #0
   22a44:	bne	22370 <_start@@Base+0xd690>
   22a48:	b	21ad4 <_start@@Base+0xcdf4>
   22a4c:	cmp	r1, #7
   22a50:	ble	228e8 <_start@@Base+0xdc08>
   22a54:	ldrb	r3, [r0, #15]
   22a58:	cmp	r3, #34	; 0x22
   22a5c:	bne	228e8 <_start@@Base+0xdc08>
   22a60:	add	r1, r0, #16
   22a64:	mov	r2, r4
   22a68:	mov	r0, r5
   22a6c:	bl	16bf0 <_start@@Base+0x1f10>
   22a70:	cmp	r4, r0
   22a74:	beq	22a84 <_start@@Base+0xdda4>
   22a78:	ldrb	r3, [r0]
   22a7c:	cmp	r3, #58	; 0x3a
   22a80:	beq	235b0 <_start@@Base+0xe8d0>
   22a84:	mov	r1, r0
   22a88:	mov	r3, #4
   22a8c:	mov	r2, r4
   22a90:	mov	r0, r5
   22a94:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   22a98:	mov	r7, r0
   22a9c:	cmp	r6, r7
   22aa0:	beq	228e8 <_start@@Base+0xdc08>
   22aa4:	mov	r2, #0
   22aa8:	mov	r3, #0
   22aac:	mov	r1, #0
   22ab0:	cmp	r4, r7
   22ab4:	str	r1, [sp, #228]	; 0xe4
   22ab8:	strd	r2, [sp, #232]	; 0xe8
   22abc:	strd	r2, [sp, #240]	; 0xf0
   22ac0:	beq	22e48 <_start@@Base+0xe168>
   22ac4:	add	r0, sp, #240	; 0xf0
   22ac8:	add	r3, sp, #228	; 0xe4
   22acc:	mov	r2, r4
   22ad0:	mov	r1, r7
   22ad4:	str	r0, [sp]
   22ad8:	mov	r0, r5
   22adc:	bl	316c0 <flatcc_json_parser_integer@@Base>
   22ae0:	cmp	r7, r0
   22ae4:	mov	sl, r0
   22ae8:	bne	231cc <_start@@Base+0xe4ec>
   22aec:	add	ip, sp, #232	; 0xe8
   22af0:	ldr	r3, [pc, #-696]	; 22840 <_start@@Base+0xdb60>
   22af4:	mov	r2, r4
   22af8:	mov	r1, sl
   22afc:	mov	r0, r5
   22b00:	str	ip, [sp]
   22b04:	bl	1ab44 <_start@@Base+0x5e64>
   22b08:	cmp	r4, r0
   22b0c:	cmpne	r0, sl
   22b10:	beq	236d0 <_start@@Base+0xe9f0>
   22b14:	ldrd	r2, [sp, #232]	; 0xe8
   22b18:	mov	sl, r0
   22b1c:	orrs	r3, r2, r3
   22b20:	bne	22b30 <_start@@Base+0xde50>
   22b24:	ldr	r3, [r5, #8]
   22b28:	tst	r3, #2
   22b2c:	beq	228fc <_start@@Base+0xdc1c>
   22b30:	mov	r3, #8
   22b34:	mov	r1, #0
   22b38:	ldr	r0, [r5]
   22b3c:	mov	r2, r3
   22b40:	bl	29bc0 <flatcc_builder_table_add@@Base>
   22b44:	cmp	r0, #0
   22b48:	beq	21abc <_start@@Base+0xcddc>
   22b4c:	ldrd	r2, [sp, #232]	; 0xe8
   22b50:	strd	r2, [r0]
   22b54:	b	228fc <_start@@Base+0xdc1c>
   22b58:	ldrb	r3, [sl, #1]
   22b5c:	cmp	r3, #32
   22b60:	addhi	sl, sl, #1
   22b64:	bls	22918 <_start@@Base+0xdc38>
   22b68:	b	2292c <_start@@Base+0xdc4c>
   22b6c:	add	r0, sl, #1
   22b70:	sub	r3, r4, r0
   22b74:	cmp	r3, #1
   22b78:	ble	22b8c <_start@@Base+0xdeac>
   22b7c:	ldrb	r3, [sl, #1]
   22b80:	cmp	r3, #32
   22b84:	bhi	22b9c <_start@@Base+0xdebc>
   22b88:	beq	2324c <_start@@Base+0xe56c>
   22b8c:	mov	r1, r0
   22b90:	mov	r2, r4
   22b94:	mov	r0, r5
   22b98:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   22b9c:	cmp	r4, r0
   22ba0:	beq	23264 <_start@@Base+0xe584>
   22ba4:	ldrb	r3, [r0]
   22ba8:	cmp	r3, #125	; 0x7d
   22bac:	beq	23338 <_start@@Base+0xe658>
   22bb0:	mov	r3, #1
   22bb4:	str	r3, [sp, #224]	; 0xe0
   22bb8:	b	226d4 <_start@@Base+0xd9f4>
   22bbc:	mov	fp, r4
   22bc0:	b	213f8 <_start@@Base+0xc718>
   22bc4:	mov	r3, #0
   22bc8:	mov	r7, r4
   22bcc:	str	r3, [sp, #208]	; 0xd0
   22bd0:	ldr	r3, [r5, #20]
   22bd4:	cmp	r3, #0
   22bd8:	bne	212ac <_start@@Base+0xc5cc>
   22bdc:	mov	r1, sl
   22be0:	mov	r2, r7
   22be4:	ldr	r3, [sp, #216]	; 0xd8
   22be8:	mov	r0, r5
   22bec:	bl	3212c <flatcc_json_parser_finalize_unions@@Base>
   22bf0:	mov	r4, r0
   22bf4:	ldr	r0, [r5]
   22bf8:	bl	281c8 <flatcc_builder_end_table@@Base>
   22bfc:	ldr	r3, [sp, #200]	; 0xc8
   22c00:	cmp	r0, #0
   22c04:	moveq	sl, r4
   22c08:	str	r0, [r3]
   22c0c:	bne	212c4 <_start@@Base+0xc5e4>
   22c10:	b	212ac <_start@@Base+0xc5cc>
   22c14:	ldrb	r3, [sl, #1]
   22c18:	cmp	r3, #32
   22c1c:	addhi	sl, sl, #1
   22c20:	bls	21428 <_start@@Base+0xc748>
   22c24:	b	2143c <_start@@Base+0xc75c>
   22c28:	add	r0, sl, #1
   22c2c:	sub	r3, r4, r0
   22c30:	cmp	r3, #1
   22c34:	ble	22c48 <_start@@Base+0xdf68>
   22c38:	ldrb	r3, [sl, #1]
   22c3c:	cmp	r3, #32
   22c40:	bhi	22c58 <_start@@Base+0xdf78>
   22c44:	beq	23470 <_start@@Base+0xe790>
   22c48:	mov	r1, r0
   22c4c:	mov	r2, r4
   22c50:	mov	r0, r5
   22c54:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   22c58:	cmp	r4, r0
   22c5c:	beq	23540 <_start@@Base+0xe860>
   22c60:	ldrb	r3, [r0]
   22c64:	cmp	r3, #125	; 0x7d
   22c68:	movne	r3, #1
   22c6c:	strne	r3, [sp, #208]	; 0xd0
   22c70:	bne	2132c <_start@@Base+0xc64c>
   22c74:	mov	r3, #0
   22c78:	add	r1, r0, #1
   22c7c:	mov	r2, r4
   22c80:	mov	r0, r5
   22c84:	str	r3, [sp, #208]	; 0xd0
   22c88:	bl	16bf0 <_start@@Base+0x1f10>
   22c8c:	ldr	r3, [sp, #208]	; 0xd0
   22c90:	b	2147c <_start@@Base+0xc79c>
   22c94:	ldrd	r0, [sp, #32]
   22c98:	add	r3, pc, #888	; 0x378
   22c9c:	ldrd	r2, [r3]
   22ca0:	and	lr, r0, #-16777216	; 0xff000000
   22ca4:	str	lr, [sp, #176]	; 0xb0
   22ca8:	str	r1, [sp, #180]	; 0xb4
   22cac:	ldrd	r0, [sp, #176]	; 0xb0
   22cb0:	cmp	r1, r3
   22cb4:	cmpeq	r0, r2
   22cb8:	bne	213f8 <_start@@Base+0xc718>
   22cbc:	cmp	ip, #5
   22cc0:	ble	213f8 <_start@@Base+0xc718>
   22cc4:	mov	r1, fp
   22cc8:	mov	r2, r4
   22ccc:	mov	r0, r5
   22cd0:	bl	1b51c <_start@@Base+0x683c>
   22cd4:	cmp	fp, r0
   22cd8:	mov	r1, r0
   22cdc:	beq	213f8 <_start@@Base+0xc718>
   22ce0:	add	r3, sp, #212	; 0xd4
   22ce4:	mov	r2, r4
   22ce8:	mov	r0, r5
   22cec:	bl	1c238 <_start@@Base+0x7558>
   22cf0:	ldr	r3, [sp, #212]	; 0xd4
   22cf4:	mov	sl, r0
   22cf8:	cmp	r3, #0
   22cfc:	beq	22d14 <_start@@Base+0xe034>
   22d00:	mov	r1, #1
   22d04:	ldr	r0, [r5]
   22d08:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   22d0c:	cmp	r0, #0
   22d10:	bne	21b0c <_start@@Base+0xce2c>
   22d14:	mov	r7, r4
   22d18:	b	212ac <_start@@Base+0xc5cc>
   22d1c:	add	sl, sl, #8
   22d20:	mov	r1, r4
   22d24:	mov	r0, sl
   22d28:	mov	r8, #0
   22d2c:	bl	14dd0 <_start@@Base+0xf0>
   22d30:	and	r3, r1, #-16777216	; 0xff000000
   22d34:	str	r8, [sp, #184]	; 0xb8
   22d38:	str	r3, [sp, #188]	; 0xbc
   22d3c:	ldrd	r2, [sp, #184]	; 0xb8
   22d40:	cmp	r3, #889192448	; 0x35000000
   22d44:	cmpeq	r2, #0
   22d48:	bne	21b18 <_start@@Base+0xce38>
   22d4c:	sub	r3, r4, sl
   22d50:	cmp	r3, #1
   22d54:	ble	21b18 <_start@@Base+0xce38>
   22d58:	mov	r2, r4
   22d5c:	mov	r1, sl
   22d60:	mov	r0, r5
   22d64:	bl	1b80c <_start@@Base+0x6b2c>
   22d68:	cmp	sl, r0
   22d6c:	mov	r9, r0
   22d70:	beq	21b18 <_start@@Base+0xce38>
   22d74:	mov	r1, r0
   22d78:	mov	r2, r4
   22d7c:	str	r8, [sp, #240]	; 0xf0
   22d80:	add	r3, sp, #240	; 0xf0
   22d84:	mov	r0, r5
   22d88:	bl	17d90 <_start@@Base+0x30b0>
   22d8c:	cmp	r9, r0
   22d90:	mov	sl, r0
   22d94:	beq	235e0 <_start@@Base+0xe900>
   22d98:	ldr	r3, [sp, #240]	; 0xf0
   22d9c:	cmp	r3, #0
   22da0:	bne	22db0 <_start@@Base+0xe0d0>
   22da4:	ldr	r3, [r5, #8]
   22da8:	tst	r3, #2
   22dac:	beq	21a8c <_start@@Base+0xcdac>
   22db0:	mov	r3, #4
   22db4:	mov	r1, #6
   22db8:	b	21ed8 <_start@@Base+0xd1f8>
   22dbc:	mov	sl, r1
   22dc0:	b	22a18 <_start@@Base+0xdd38>
   22dc4:	cmp	ip, #8
   22dc8:	ble	21b18 <_start@@Base+0xce38>
   22dcc:	mov	r2, r4
   22dd0:	mov	r1, sl
   22dd4:	mov	r0, r5
   22dd8:	bl	1b694 <_start@@Base+0x69b4>
   22ddc:	cmp	sl, r0
   22de0:	mov	r8, r0
   22de4:	beq	21b18 <_start@@Base+0xce38>
   22de8:	mov	sl, #0
   22dec:	mov	fp, #0
   22df0:	mov	r1, r0
   22df4:	add	r3, sp, #240	; 0xf0
   22df8:	mov	r2, r4
   22dfc:	mov	r0, r5
   22e00:	strd	sl, [sp, #240]	; 0xf0
   22e04:	bl	17644 <_start@@Base+0x2964>
   22e08:	cmp	r8, r0
   22e0c:	mov	sl, r0
   22e10:	beq	23564 <_start@@Base+0xe884>
   22e14:	ldrd	r2, [sp, #240]	; 0xf0
   22e18:	orrs	r3, r2, r3
   22e1c:	bne	22e2c <_start@@Base+0xe14c>
   22e20:	ldr	r3, [r5, #8]
   22e24:	tst	r3, #2
   22e28:	beq	21a8c <_start@@Base+0xcdac>
   22e2c:	mov	r3, #8
   22e30:	mov	r1, #3
   22e34:	b	21f68 <_start@@Base+0xd288>
   22e38:	mov	sl, r1
   22e3c:	b	21db8 <_start@@Base+0xd0d8>
   22e40:	mov	sl, r1
   22e44:	b	22340 <_start@@Base+0xd660>
   22e48:	mov	sl, r4
   22e4c:	b	22aec <_start@@Base+0xde0c>
   22e50:	add	r1, r0, #17
   22e54:	mov	r2, r4
   22e58:	mov	r0, r5
   22e5c:	bl	16bf0 <_start@@Base+0x1f10>
   22e60:	cmp	r4, r0
   22e64:	beq	22e74 <_start@@Base+0xe194>
   22e68:	ldrb	r3, [r0]
   22e6c:	cmp	r3, #58	; 0x3a
   22e70:	beq	235c8 <_start@@Base+0xe8e8>
   22e74:	mov	r1, r0
   22e78:	mov	r3, #4
   22e7c:	mov	r2, r4
   22e80:	mov	r0, r5
   22e84:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   22e88:	mov	r7, r0
   22e8c:	cmp	r6, r7
   22e90:	beq	228e8 <_start@@Base+0xdc08>
   22e94:	mov	r3, #0
   22e98:	mov	r0, #0
   22e9c:	mov	r1, #0
   22ea0:	cmp	r4, r7
   22ea4:	str	r3, [sp, #228]	; 0xe4
   22ea8:	str	r3, [sp, #232]	; 0xe8
   22eac:	strd	r0, [sp, #240]	; 0xf0
   22eb0:	beq	22f48 <_start@@Base+0xe268>
   22eb4:	add	r0, sp, #240	; 0xf0
   22eb8:	add	r3, sp, #232	; 0xe8
   22ebc:	mov	r2, r4
   22ec0:	mov	r1, r7
   22ec4:	str	r0, [sp]
   22ec8:	mov	r0, r5
   22ecc:	bl	316c0 <flatcc_json_parser_integer@@Base>
   22ed0:	cmp	r7, r0
   22ed4:	mov	r6, r0
   22ed8:	bne	231f8 <_start@@Base+0xe518>
   22edc:	add	ip, sp, #228	; 0xe4
   22ee0:	ldr	r3, [pc, #312]	; 23020 <_start@@Base+0xe340>
   22ee4:	mov	r2, r4
   22ee8:	mov	r1, r6
   22eec:	mov	r0, r5
   22ef0:	str	ip, [sp]
   22ef4:	bl	1a5c4 <_start@@Base+0x58e4>
   22ef8:	cmp	r4, r0
   22efc:	cmpne	r0, r6
   22f00:	mov	sl, r0
   22f04:	beq	21abc <_start@@Base+0xcddc>
   22f08:	ldr	r2, [sp, #228]	; 0xe4
   22f0c:	cmp	r2, #0
   22f10:	bne	22f20 <_start@@Base+0xe240>
   22f14:	ldr	r3, [r5, #8]
   22f18:	tst	r3, #2
   22f1c:	beq	228fc <_start@@Base+0xdc1c>
   22f20:	mov	r3, #4
   22f24:	mov	r1, #1
   22f28:	ldr	r0, [r5]
   22f2c:	mov	r2, r3
   22f30:	bl	29bc0 <flatcc_builder_table_add@@Base>
   22f34:	cmp	r0, #0
   22f38:	beq	21abc <_start@@Base+0xcddc>
   22f3c:	ldr	r3, [sp, #228]	; 0xe4
   22f40:	str	r3, [r0]
   22f44:	b	228fc <_start@@Base+0xdc1c>
   22f48:	mov	r6, r4
   22f4c:	b	22edc <_start@@Base+0xe1fc>
   22f50:	ldrb	r3, [sl, #2]
   22f54:	cmp	r3, #32
   22f58:	bls	229fc <_start@@Base+0xdd1c>
   22f5c:	add	sl, sl, #2
   22f60:	b	22a18 <_start@@Base+0xdd38>
   22f64:	add	sl, sl, #8
   22f68:	mov	r1, r4
   22f6c:	mov	r0, sl
   22f70:	mov	r8, #0
   22f74:	bl	14dd0 <_start@@Base+0xf0>
   22f78:	and	r3, r1, #-16777216	; 0xff000000
   22f7c:	str	r8, [sp, #192]	; 0xc0
   22f80:	str	r3, [sp, #196]	; 0xc4
   22f84:	ldrd	r2, [sp, #192]	; 0xc0
   22f88:	cmp	r3, #889192448	; 0x35000000
   22f8c:	cmpeq	r2, #0
   22f90:	bne	21b18 <_start@@Base+0xce38>
   22f94:	sub	r3, r4, sl
   22f98:	cmp	r3, #1
   22f9c:	ble	21b18 <_start@@Base+0xce38>
   22fa0:	mov	r2, r4
   22fa4:	mov	r1, sl
   22fa8:	mov	r0, r5
   22fac:	bl	1b80c <_start@@Base+0x6b2c>
   22fb0:	cmp	sl, r0
   22fb4:	mov	r9, r0
   22fb8:	beq	21b18 <_start@@Base+0xce38>
   22fbc:	mov	r1, r0
   22fc0:	mov	r2, r4
   22fc4:	str	r8, [sp, #240]	; 0xf0
   22fc8:	add	r3, sp, #240	; 0xf0
   22fcc:	mov	r0, r5
   22fd0:	bl	17d90 <_start@@Base+0x30b0>
   22fd4:	cmp	r9, r0
   22fd8:	mov	sl, r0
   22fdc:	beq	236a0 <_start@@Base+0xe9c0>
   22fe0:	ldr	r3, [sp, #240]	; 0xf0
   22fe4:	cmp	r3, #0
   22fe8:	bne	22ff8 <_start@@Base+0xe318>
   22fec:	ldr	r3, [r5, #8]
   22ff0:	tst	r3, #2
   22ff4:	beq	21a8c <_start@@Base+0xcdac>
   22ff8:	mov	r3, #4
   22ffc:	mov	r1, #8
   23000:	b	21ed8 <_start@@Base+0xd1f8>
   23004:	ldrb	r3, [sl, #2]
   23008:	cmp	r3, #32
   2300c:	bls	21d80 <_start@@Base+0xd0a0>
   23010:	add	sl, sl, #2
   23014:	b	21db8 <_start@@Base+0xd0d8>
   23018:	strvs	r0, [r0, #-0]
   2301c:	stclvs	6, cr7, [pc, #-420]!	; 22e80 <_start@@Base+0xe1a0>
   23020:	muleq	r5, r8, r2
   23024:	strdeq	r8, [r5], -r8	; <UNPREDICTABLE>
   23028:			; <UNDEFINED> instruction: 0x000582bc
   2302c:	andeq	r8, r5, r4, lsr #5
   23030:	ldrdeq	r8, [r5], -r4
   23034:			; <UNDEFINED> instruction: 0x000582b0
   23038:	andeq	r8, r5, r8, asr #5
   2303c:	andeq	r8, r5, r0, ror #5
   23040:	add	r1, r0, #16
   23044:	mov	r2, r4
   23048:	mov	r0, r5
   2304c:	bl	16bf0 <_start@@Base+0x1f10>
   23050:	cmp	r4, r0
   23054:	beq	23064 <_start@@Base+0xe384>
   23058:	ldrb	r3, [r0]
   2305c:	cmp	r3, #58	; 0x3a
   23060:	beq	2362c <_start@@Base+0xe94c>
   23064:	mov	r1, r0
   23068:	mov	r3, #4
   2306c:	mov	r2, r4
   23070:	mov	r0, r5
   23074:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   23078:	mov	r7, r0
   2307c:	cmp	r6, r7
   23080:	beq	221f0 <_start@@Base+0xd510>
   23084:	mov	r0, #0
   23088:	mov	r1, #0
   2308c:	mov	r3, #0
   23090:	cmp	r4, r7
   23094:	str	r3, [sp, #228]	; 0xe4
   23098:	strd	r0, [sp, #232]	; 0xe8
   2309c:	strd	r0, [sp, #240]	; 0xf0
   230a0:	beq	23138 <_start@@Base+0xe458>
   230a4:	add	r0, sp, #240	; 0xf0
   230a8:	add	r3, sp, #228	; 0xe4
   230ac:	mov	r2, r4
   230b0:	mov	r1, r7
   230b4:	str	r0, [sp]
   230b8:	mov	r0, r5
   230bc:	bl	316c0 <flatcc_json_parser_integer@@Base>
   230c0:	cmp	r7, r0
   230c4:	mov	sl, r0
   230c8:	bne	23288 <_start@@Base+0xe5a8>
   230cc:	add	r0, sp, #232	; 0xe8
   230d0:	ldr	r3, [pc, #-180]	; 23024 <_start@@Base+0xe344>
   230d4:	mov	r2, r4
   230d8:	mov	r1, sl
   230dc:	str	r0, [sp]
   230e0:	mov	r0, r5
   230e4:	bl	1ab44 <_start@@Base+0x5e64>
   230e8:	cmp	r4, r0
   230ec:	cmpne	r0, sl
   230f0:	beq	236d0 <_start@@Base+0xe9f0>
   230f4:	ldrd	r2, [sp, #232]	; 0xe8
   230f8:	mov	sl, r0
   230fc:	orrs	r3, r2, r3
   23100:	bne	23110 <_start@@Base+0xe430>
   23104:	ldr	r3, [r5, #8]
   23108:	tst	r3, #2
   2310c:	beq	22204 <_start@@Base+0xd524>
   23110:	mov	r3, #8
   23114:	mov	r1, #0
   23118:	ldr	r0, [r5]
   2311c:	mov	r2, r3
   23120:	bl	29bc0 <flatcc_builder_table_add@@Base>
   23124:	cmp	r0, #0
   23128:	beq	21abc <_start@@Base+0xcddc>
   2312c:	ldrd	r2, [sp, #232]	; 0xe8
   23130:	strd	r2, [r0]
   23134:	b	22204 <_start@@Base+0xd524>
   23138:	mov	sl, r4
   2313c:	b	230cc <_start@@Base+0xe3ec>
   23140:	mov	r2, r4
   23144:	add	r1, fp, #8
   23148:	mov	r0, r5
   2314c:	bl	16bf0 <_start@@Base+0x1f10>
   23150:	cmp	r4, r0
   23154:	beq	23164 <_start@@Base+0xe484>
   23158:	ldrb	r3, [r0]
   2315c:	cmp	r3, #58	; 0x3a
   23160:	beq	23644 <_start@@Base+0xe964>
   23164:	mov	r1, r0
   23168:	mov	r3, #4
   2316c:	mov	r2, r4
   23170:	mov	r0, r5
   23174:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   23178:	mov	r1, r0
   2317c:	cmp	fp, r1
   23180:	beq	213f8 <_start@@Base+0xc718>
   23184:	ldr	ip, [sp, #216]	; 0xd8
   23188:	mov	lr, #3
   2318c:	movw	r3, #14064	; 0x36f0
   23190:	movt	r3, #2
   23194:	mov	r2, r4
   23198:	mov	r0, r5
   2319c:	str	lr, [sp]
   231a0:	str	ip, [sp, #4]
   231a4:	str	r3, [sp, #8]
   231a8:	mov	r3, #0
   231ac:	bl	325c0 <flatcc_json_parser_union_vector@@Base>
   231b0:	mov	sl, r0
   231b4:	b	2140c <_start@@Base+0xc72c>
   231b8:	ldrb	r3, [sl, #2]
   231bc:	cmp	r3, #32
   231c0:	bls	22324 <_start@@Base+0xd644>
   231c4:	add	sl, sl, #2
   231c8:	b	22340 <_start@@Base+0xd660>
   231cc:	ldr	r1, [sp, #228]	; 0xe4
   231d0:	ldrd	r2, [sp, #240]	; 0xf0
   231d4:	cmp	r1, #0
   231d8:	beq	23378 <_start@@Base+0xe698>
   231dc:	cmp	r3, #-2147483648	; 0x80000000
   231e0:	cmpeq	r2, #0
   231e4:	bhi	23610 <_start@@Base+0xe930>
   231e8:	rsbs	r2, r2, #0
   231ec:	rsc	r3, r3, #0
   231f0:	strd	r2, [sp, #232]	; 0xe8
   231f4:	b	22b1c <_start@@Base+0xde3c>
   231f8:	ldr	r3, [sp, #232]	; 0xe8
   231fc:	cmp	r3, #0
   23200:	bne	23594 <_start@@Base+0xe8b4>
   23204:	ldrd	r2, [sp, #240]	; 0xf0
   23208:	mov	r1, #0
   2320c:	mvn	r0, #0
   23210:	cmp	r3, r1
   23214:	cmpeq	r2, r0
   23218:	movls	sl, r6
   2321c:	strls	r2, [sp, #228]	; 0xe4
   23220:	bls	22f0c <_start@@Base+0xe22c>
   23224:	mov	r1, r6
   23228:	mov	r3, #7
   2322c:	mov	r2, r4
   23230:	mov	r0, r5
   23234:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   23238:	mov	sl, r0
   2323c:	cmp	r7, sl
   23240:	bne	22f08 <_start@@Base+0xe228>
   23244:	mov	r6, r7
   23248:	b	22edc <_start@@Base+0xe1fc>
   2324c:	ldrb	r3, [sl, #2]
   23250:	cmp	r3, #32
   23254:	addhi	r0, sl, #2
   23258:	bls	22b8c <_start@@Base+0xdeac>
   2325c:	cmp	r4, r0
   23260:	bne	22ba4 <_start@@Base+0xdec4>
   23264:	mov	ip, #0
   23268:	mov	r3, #10
   2326c:	mov	r2, r4
   23270:	mov	r1, r4
   23274:	mov	r0, r5
   23278:	str	ip, [sp, #224]	; 0xe0
   2327c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   23280:	ldr	r3, [sp, #224]	; 0xe0
   23284:	b	226cc <_start@@Base+0xd9ec>
   23288:	ldr	r1, [sp, #228]	; 0xe4
   2328c:	ldrd	r2, [sp, #240]	; 0xf0
   23290:	cmp	r1, #0
   23294:	beq	23444 <_start@@Base+0xe764>
   23298:	cmp	r3, #-2147483648	; 0x80000000
   2329c:	cmpeq	r2, #0
   232a0:	bhi	23678 <_start@@Base+0xe998>
   232a4:	rsbs	r2, r2, #0
   232a8:	rsc	r3, r3, #0
   232ac:	strd	r2, [sp, #232]	; 0xe8
   232b0:	b	230fc <_start@@Base+0xe41c>
   232b4:	ldrb	r3, [sl, #2]
   232b8:	cmp	r3, #32
   232bc:	addhi	r0, sl, #2
   232c0:	bls	21e10 <_start@@Base+0xd130>
   232c4:	cmp	r4, r0
   232c8:	bne	21e28 <_start@@Base+0xd148>
   232cc:	mov	ip, #0
   232d0:	mov	r3, #10
   232d4:	mov	r2, r4
   232d8:	mov	r1, r4
   232dc:	mov	r0, r5
   232e0:	str	ip, [sp, #220]	; 0xdc
   232e4:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   232e8:	ldr	r3, [sp, #220]	; 0xdc
   232ec:	b	21694 <_start@@Base+0xc9b4>
   232f0:	mov	r7, r4
   232f4:	mov	sl, r1
   232f8:	b	22bd0 <_start@@Base+0xdef0>
   232fc:	ldrb	r3, [sl, #2]
   23300:	cmp	r3, #32
   23304:	addhi	r0, sl, #2
   23308:	bls	224e4 <_start@@Base+0xd804>
   2330c:	cmp	r4, r0
   23310:	bne	224fc <_start@@Base+0xd81c>
   23314:	mov	ip, #0
   23318:	mov	r3, #10
   2331c:	mov	r2, r4
   23320:	mov	r1, r4
   23324:	mov	r0, r5
   23328:	str	ip, [sp, #224]	; 0xe0
   2332c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   23330:	ldr	r3, [sp, #224]	; 0xe0
   23334:	b	21ff4 <_start@@Base+0xd314>
   23338:	mov	r3, #0
   2333c:	add	r1, r0, #1
   23340:	mov	r2, r4
   23344:	mov	r0, r5
   23348:	str	r3, [sp, #224]	; 0xe0
   2334c:	bl	16bf0 <_start@@Base+0x1f10>
   23350:	ldr	r3, [sp, #224]	; 0xe0
   23354:	b	226cc <_start@@Base+0xd9ec>
   23358:	mov	r7, r4
   2335c:	b	22444 <_start@@Base+0xd764>
   23360:	ldrb	r3, [sl, #2]
   23364:	cmp	r3, #32
   23368:	bls	215f4 <_start@@Base+0xc914>
   2336c:	mov	r7, r4
   23370:	add	sl, sl, #2
   23374:	b	22bd0 <_start@@Base+0xdef0>
   23378:	cmp	r2, #0
   2337c:	sbcs	r1, r3, #0
   23380:	strdge	r2, [sp, #232]	; 0xe8
   23384:	bge	22b1c <_start@@Base+0xde3c>
   23388:	mov	r1, r0
   2338c:	mov	r3, #7
   23390:	mov	r2, r4
   23394:	mov	r0, r5
   23398:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   2339c:	mov	sl, r0
   233a0:	cmp	r7, sl
   233a4:	beq	22aec <_start@@Base+0xde0c>
   233a8:	ldrd	r2, [sp, #232]	; 0xe8
   233ac:	b	22b1c <_start@@Base+0xde3c>
   233b0:	mov	r3, #0
   233b4:	add	r1, r0, #1
   233b8:	mov	r2, r4
   233bc:	mov	r0, r5
   233c0:	str	r3, [sp, #220]	; 0xdc
   233c4:	bl	16bf0 <_start@@Base+0x1f10>
   233c8:	ldr	r3, [sp, #220]	; 0xdc
   233cc:	b	21694 <_start@@Base+0xc9b4>
   233d0:	mov	r3, #0
   233d4:	add	r1, r0, #1
   233d8:	mov	r2, r4
   233dc:	mov	r0, r5
   233e0:	str	r3, [sp, #224]	; 0xe0
   233e4:	bl	16bf0 <_start@@Base+0x1f10>
   233e8:	ldr	r3, [sp, #224]	; 0xe0
   233ec:	b	21ff4 <_start@@Base+0xd314>
   233f0:	ldr	r3, [sp, #232]	; 0xe8
   233f4:	cmp	r3, #0
   233f8:	bne	2365c <_start@@Base+0xe97c>
   233fc:	ldrd	r2, [sp, #240]	; 0xf0
   23400:	mov	r1, #0
   23404:	mvn	r0, #0
   23408:	cmp	r3, r1
   2340c:	cmpeq	r2, r0
   23410:	movls	sl, r7
   23414:	strls	r2, [sp, #228]	; 0xe4
   23418:	bls	22474 <_start@@Base+0xd794>
   2341c:	mov	r1, r7
   23420:	mov	r3, #7
   23424:	mov	r2, r4
   23428:	mov	r0, r5
   2342c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   23430:	mov	sl, r0
   23434:	cmp	r6, sl
   23438:	bne	22470 <_start@@Base+0xd790>
   2343c:	mov	r7, r6
   23440:	b	22444 <_start@@Base+0xd764>
   23444:	cmp	r2, #0
   23448:	sbcs	r1, r3, #0
   2344c:	strdge	r2, [sp, #232]	; 0xe8
   23450:	bge	230fc <_start@@Base+0xe41c>
   23454:	mov	r1, r0
   23458:	mov	r3, #7
   2345c:	mov	r2, r4
   23460:	mov	r0, r5
   23464:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   23468:	mov	sl, r0
   2346c:	b	23690 <_start@@Base+0xe9b0>
   23470:	ldrb	r3, [sl, #2]
   23474:	cmp	r3, #32
   23478:	addhi	r0, sl, #2
   2347c:	bls	22c48 <_start@@Base+0xdf68>
   23480:	b	22c58 <_start@@Base+0xdf78>
   23484:	mov	r1, r0
   23488:	add	r0, sp, #240	; 0xf0
   2348c:	ldr	r3, [pc, #-1132]	; 23028 <_start@@Base+0xe348>
   23490:	mov	r2, r4
   23494:	str	r0, [sp]
   23498:	mov	r0, r5
   2349c:	bl	1ab44 <_start@@Base+0x5e64>
   234a0:	cmp	r4, r0
   234a4:	cmpne	sl, r0
   234a8:	mov	sl, r0
   234ac:	bne	21f48 <_start@@Base+0xd268>
   234b0:	b	21abc <_start@@Base+0xcddc>
   234b4:	ldr	r0, [r5]
   234b8:	str	r1, [sp, #204]	; 0xcc
   234bc:	bl	281c8 <flatcc_builder_end_table@@Base>
   234c0:	subs	r6, r0, #0
   234c4:	ldr	r1, [sp, #204]	; 0xcc
   234c8:	beq	21abc <_start@@Base+0xcddc>
   234cc:	ldr	r0, [r5]
   234d0:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   234d4:	cmp	r0, #0
   234d8:	bne	22370 <_start@@Base+0xd690>
   234dc:	b	21ad4 <_start@@Base+0xcdf4>
   234e0:	mov	r1, r0
   234e4:	add	r0, sp, #240	; 0xf0
   234e8:	ldr	r3, [pc, #-1220]	; 2302c <_start@@Base+0xe34c>
   234ec:	mov	r2, r4
   234f0:	str	r0, [sp]
   234f4:	mov	r0, r5
   234f8:	bl	1a5c4 <_start@@Base+0x58e4>
   234fc:	cmp	r4, r0
   23500:	cmpne	sl, r0
   23504:	mov	sl, r0
   23508:	bne	21eb8 <_start@@Base+0xd1d8>
   2350c:	b	21abc <_start@@Base+0xcddc>
   23510:	mov	r1, r0
   23514:	add	r0, sp, #240	; 0xf0
   23518:	ldr	r3, [pc, #-1264]	; 23030 <_start@@Base+0xe350>
   2351c:	mov	r2, r4
   23520:	str	r0, [sp]
   23524:	mov	r0, r5
   23528:	bl	1ab44 <_start@@Base+0x5e64>
   2352c:	cmp	r4, r0
   23530:	cmpne	sl, r0
   23534:	mov	sl, r0
   23538:	bne	2257c <_start@@Base+0xd89c>
   2353c:	b	21abc <_start@@Base+0xcddc>
   23540:	mov	ip, #0
   23544:	mov	r3, #10
   23548:	mov	r2, r4
   2354c:	mov	r1, r4
   23550:	mov	r0, r5
   23554:	str	ip, [sp, #208]	; 0xd0
   23558:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   2355c:	ldr	r3, [sp, #208]	; 0xd0
   23560:	b	2147c <_start@@Base+0xc79c>
   23564:	mov	r1, r0
   23568:	add	r0, sp, #240	; 0xf0
   2356c:	ldr	r3, [pc, #-1344]	; 23034 <_start@@Base+0xe354>
   23570:	mov	r2, r4
   23574:	str	r0, [sp]
   23578:	mov	r0, r5
   2357c:	bl	1ab44 <_start@@Base+0x5e64>
   23580:	cmp	r4, r0
   23584:	cmpne	sl, r0
   23588:	mov	sl, r0
   2358c:	bne	22e14 <_start@@Base+0xe134>
   23590:	b	21abc <_start@@Base+0xcddc>
   23594:	mov	r1, r0
   23598:	mov	r3, #8
   2359c:	mov	r2, r4
   235a0:	mov	r0, r5
   235a4:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   235a8:	mov	sl, r0
   235ac:	b	2323c <_start@@Base+0xe55c>
   235b0:	add	r1, r0, #1
   235b4:	mov	r2, r4
   235b8:	mov	r0, r5
   235bc:	bl	16bf0 <_start@@Base+0x1f10>
   235c0:	mov	r7, r0
   235c4:	b	22a9c <_start@@Base+0xddbc>
   235c8:	add	r1, r0, #1
   235cc:	mov	r2, r4
   235d0:	mov	r0, r5
   235d4:	bl	16bf0 <_start@@Base+0x1f10>
   235d8:	mov	r7, r0
   235dc:	b	22e8c <_start@@Base+0xe1ac>
   235e0:	mov	r1, r0
   235e4:	add	r0, sp, #240	; 0xf0
   235e8:	ldr	r3, [pc, #-1464]	; 23038 <_start@@Base+0xe358>
   235ec:	mov	r2, r4
   235f0:	str	r0, [sp]
   235f4:	mov	r0, r5
   235f8:	bl	1a5c4 <_start@@Base+0x58e4>
   235fc:	cmp	r4, r0
   23600:	cmpne	sl, r0
   23604:	mov	sl, r0
   23608:	bne	22d98 <_start@@Base+0xe0b8>
   2360c:	b	21abc <_start@@Base+0xcddc>
   23610:	mov	r1, r0
   23614:	mov	r3, #8
   23618:	mov	r2, r4
   2361c:	mov	r0, r5
   23620:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   23624:	mov	sl, r0
   23628:	b	233a0 <_start@@Base+0xe6c0>
   2362c:	add	r1, r0, #1
   23630:	mov	r2, r4
   23634:	mov	r0, r5
   23638:	bl	16bf0 <_start@@Base+0x1f10>
   2363c:	mov	r7, r0
   23640:	b	2307c <_start@@Base+0xe39c>
   23644:	add	r1, r0, #1
   23648:	mov	r2, r4
   2364c:	mov	r0, r5
   23650:	bl	16bf0 <_start@@Base+0x1f10>
   23654:	mov	r1, r0
   23658:	b	2317c <_start@@Base+0xe49c>
   2365c:	mov	r1, r0
   23660:	mov	r3, #8
   23664:	mov	r2, r4
   23668:	mov	r0, r5
   2366c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   23670:	mov	sl, r0
   23674:	b	23434 <_start@@Base+0xe754>
   23678:	mov	r1, r0
   2367c:	mov	r3, #8
   23680:	mov	r2, r4
   23684:	mov	r0, r5
   23688:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   2368c:	mov	sl, r0
   23690:	cmp	r7, sl
   23694:	beq	230cc <_start@@Base+0xe3ec>
   23698:	ldrd	r2, [sp, #232]	; 0xe8
   2369c:	b	230fc <_start@@Base+0xe41c>
   236a0:	mov	r1, r0
   236a4:	add	r0, sp, #240	; 0xf0
   236a8:	ldr	r3, [pc, #-1652]	; 2303c <_start@@Base+0xe35c>
   236ac:	mov	r2, r4
   236b0:	str	r0, [sp]
   236b4:	mov	r0, r5
   236b8:	bl	1a5c4 <_start@@Base+0x58e4>
   236bc:	cmp	r4, r0
   236c0:	cmpne	sl, r0
   236c4:	mov	sl, r0
   236c8:	bne	22fe0 <_start@@Base+0xe300>
   236cc:	b	21abc <_start@@Base+0xcddc>
   236d0:	mov	sl, r0
   236d4:	b	21abc <_start@@Base+0xcddc>
   236d8:	mov	sl, r0
   236dc:	b	22a18 <_start@@Base+0xdd38>
   236e0:	mov	sl, r0
   236e4:	b	21db8 <_start@@Base+0xd0d8>
   236e8:	mov	sl, r0
   236ec:	b	22340 <_start@@Base+0xd660>
   236f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   236f4:	mov	ip, #0
   236f8:	mov	r5, r1
   236fc:	strd	r6, [sp, #8]
   23700:	mov	r7, r0
   23704:	mov	r6, r2
   23708:	strd	r8, [sp, #16]
   2370c:	strd	sl, [sp, #24]
   23710:	str	lr, [sp, #32]
   23714:	sub	sp, sp, #68	; 0x44
   23718:	ldr	r8, [sp, #104]	; 0x68
   2371c:	str	ip, [r8]
   23720:	cmp	r3, #4
   23724:	ldrls	pc, [pc, r3, lsl #2]
   23728:	b	24200 <_start@@Base+0xf520>
   2372c:	andeq	r3, r2, ip, ror r7
   23730:	andeq	r3, r2, ip, lsr #15
   23734:			; <UNDEFINED> instruction: 0x000237b8
   23738:	andeq	r3, r2, r4, asr r8
   2373c:	andeq	r3, r2, r0, asr #14
   23740:	mov	r3, r8
   23744:	bl	21264 <_start@@Base+0xc584>
   23748:	ldr	r3, [r7, #20]
   2374c:	cmp	r3, #0
   23750:	bne	23760 <_start@@Base+0xea80>
   23754:	ldr	r3, [r8]
   23758:	cmp	r3, #0
   2375c:	beq	23fc8 <_start@@Base+0xf2e8>
   23760:	add	sp, sp, #68	; 0x44
   23764:	ldrd	r4, [sp]
   23768:	ldrd	r6, [sp, #8]
   2376c:	ldrd	r8, [sp, #16]
   23770:	ldrd	sl, [sp, #24]
   23774:	add	sp, sp, #32
   23778:	pop	{pc}		; (ldr pc, [sp], #4)
   2377c:	sub	r3, r2, r1
   23780:	cmp	r3, #3
   23784:	ble	23794 <_start@@Base+0xeab4>
   23788:	ldrb	r3, [r1]
   2378c:	cmp	r3, #110	; 0x6e
   23790:	beq	2415c <_start@@Base+0xf47c>
   23794:	mov	r2, r6
   23798:	mov	r1, r5
   2379c:	mov	r0, r7
   237a0:	mov	r3, #26
   237a4:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   237a8:	b	23760 <_start@@Base+0xea80>
   237ac:	mov	r3, r8
   237b0:	bl	1cca4 <_start@@Base+0x7fc4>
   237b4:	b	23748 <_start@@Base+0xea68>
   237b8:	mov	r1, #4
   237bc:	ldr	r0, [r0]
   237c0:	bl	27848 <flatcc_builder_start_table@@Base>
   237c4:	cmp	r0, #0
   237c8:	bne	23d74 <_start@@Base+0xf094>
   237cc:	add	r3, sp, #48	; 0x30
   237d0:	mov	r1, r5
   237d4:	mov	r2, r6
   237d8:	mov	r0, r7
   237dc:	bl	1ae08 <_start@@Base+0x6128>
   237e0:	ldr	r3, [sp, #48]	; 0x30
   237e4:	mov	r4, r0
   237e8:	cmp	r3, #0
   237ec:	beq	23a3c <_start@@Base+0xed5c>
   237f0:	mov	r3, #0
   237f4:	movt	r3, #65535	; 0xffff
   237f8:	str	r3, [sp, #20]
   237fc:	str	r8, [sp, #104]	; 0x68
   23800:	cmp	r6, r4
   23804:	beq	23818 <_start@@Base+0xeb38>
   23808:	ldrb	r3, [r4]
   2380c:	cmp	r3, #34	; 0x22
   23810:	addeq	r4, r4, #1
   23814:	bne	23ac8 <_start@@Base+0xede8>
   23818:	sub	ip, r6, r4
   2381c:	cmp	ip, #8
   23820:	bhi	23860 <_start@@Base+0xeb80>
   23824:	sub	r3, ip, #1
   23828:	cmp	r3, #7
   2382c:	ldrls	pc, [pc, r3, lsl #2]
   23830:	b	23ab0 <_start@@Base+0xedd0>
   23834:	andeq	r3, r2, ip, lsl #21
   23838:	andeq	r3, r2, r0, asr sl
   2383c:	andeq	r3, r2, r0, lsl #21
   23840:	andeq	r3, r2, r4, ror sl
   23844:	andeq	r3, r2, r8, ror #20
   23848:	andeq	r3, r2, ip, asr sl
   2384c:	andeq	r3, r2, r4, asr #20
   23850:	andeq	r3, r2, r0, ror #16
   23854:	mov	r3, r8
   23858:	bl	1ca18 <_start@@Base+0x7d38>
   2385c:	b	23748 <_start@@Base+0xea68>
   23860:	ldrb	r8, [r4, #7]
   23864:	mov	r9, #0
   23868:	mov	r3, r9
   2386c:	ldrb	r0, [r4, #6]
   23870:	orr	r2, r8, r0, lsl #8
   23874:	ldrb	r0, [r4, #5]
   23878:	mov	lr, r3
   2387c:	orr	r1, r2, r0, lsl #16
   23880:	ldrb	r2, [r4, #4]
   23884:	orr	r2, r1, r2, lsl #24
   23888:	ldrb	r0, [r4, #3]
   2388c:	orr	r3, lr, r0
   23890:	ldrb	r0, [r4, #2]
   23894:	orr	r3, r3, r0, lsl #8
   23898:	ldrb	r0, [r4, #1]
   2389c:	add	r9, pc, #940	; 0x3ac
   238a0:	ldrd	r8, [r9]
   238a4:	ldr	lr, [sp, #20]
   238a8:	orr	r3, r3, r0, lsl #16
   238ac:	ldrb	r0, [r4]
   238b0:	and	sl, r2, lr
   238b4:	orr	r0, r3, r0, lsl #24
   238b8:	cmp	r0, r9
   238bc:	cmpeq	sl, r8
   238c0:	beq	23a9c <_start@@Base+0xedbc>
   238c4:	and	r3, r2, #-16777216	; 0xff000000
   238c8:	add	r9, pc, #904	; 0x388
   238cc:	ldrd	r8, [r9]
   238d0:	str	r3, [sp, #8]
   238d4:	str	r0, [sp, #12]
   238d8:	ldrd	r2, [sp, #8]
   238dc:	cmp	r3, r9
   238e0:	cmpeq	r2, r8
   238e4:	bne	23b1c <_start@@Base+0xee3c>
   238e8:	cmp	ip, #5
   238ec:	ble	23ab0 <_start@@Base+0xedd0>
   238f0:	mov	r2, r6
   238f4:	mov	r1, r4
   238f8:	mov	r0, r7
   238fc:	bl	1b51c <_start@@Base+0x683c>
   23900:	cmp	r4, r0
   23904:	mov	r9, r0
   23908:	beq	23ab0 <_start@@Base+0xedd0>
   2390c:	mov	r3, #0
   23910:	cmp	r6, r0
   23914:	mov	r1, #0
   23918:	mov	r0, #0
   2391c:	strb	r3, [sp, #47]	; 0x2f
   23920:	str	r3, [sp, #52]	; 0x34
   23924:	strd	r0, [sp, #56]	; 0x38
   23928:	beq	23f10 <_start@@Base+0xf230>
   2392c:	add	r0, sp, #56	; 0x38
   23930:	add	r3, sp, #52	; 0x34
   23934:	mov	r2, r6
   23938:	mov	r1, r9
   2393c:	str	r0, [sp]
   23940:	mov	r0, r7
   23944:	bl	316c0 <flatcc_json_parser_integer@@Base>
   23948:	cmp	r9, r0
   2394c:	mov	r5, r0
   23950:	bne	23f68 <_start@@Base+0xf288>
   23954:	add	ip, sp, #47	; 0x2f
   23958:	ldr	r3, [pc, #776]	; 23c68 <_start@@Base+0xef88>
   2395c:	mov	r2, r6
   23960:	mov	r1, r5
   23964:	mov	r0, r7
   23968:	str	ip, [sp]
   2396c:	bl	1a3cc <_start@@Base+0x56ec>
   23970:	cmp	r6, r0
   23974:	cmpne	r0, r5
   23978:	beq	241f4 <_start@@Base+0xf514>
   2397c:	ldrsb	r2, [sp, #47]	; 0x2f
   23980:	mov	r5, r0
   23984:	cmp	r2, #2
   23988:	bne	23998 <_start@@Base+0xecb8>
   2398c:	ldr	r3, [r7, #8]
   23990:	tst	r3, #2
   23994:	beq	239bc <_start@@Base+0xecdc>
   23998:	mov	r3, #1
   2399c:	mov	r1, #0
   239a0:	ldr	r0, [r7]
   239a4:	mov	r2, r3
   239a8:	bl	29bc0 <flatcc_builder_table_add@@Base>
   239ac:	cmp	r0, #0
   239b0:	beq	23f00 <_start@@Base+0xf220>
   239b4:	ldrsb	r3, [sp, #47]	; 0x2f
   239b8:	strb	r3, [r0]
   239bc:	sub	r3, r6, r5
   239c0:	cmp	r3, #1
   239c4:	ble	239d8 <_start@@Base+0xecf8>
   239c8:	ldrb	r3, [r5]
   239cc:	cmp	r3, #32
   239d0:	bhi	239ec <_start@@Base+0xed0c>
   239d4:	beq	23d8c <_start@@Base+0xf0ac>
   239d8:	mov	r1, r5
   239dc:	mov	r2, r6
   239e0:	mov	r0, r7
   239e4:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   239e8:	mov	r5, r0
   239ec:	cmp	r6, r5
   239f0:	beq	23d5c <_start@@Base+0xf07c>
   239f4:	ldrb	r3, [r5]
   239f8:	cmp	r3, #44	; 0x2c
   239fc:	beq	23da0 <_start@@Base+0xf0c0>
   23a00:	mov	r3, #0
   23a04:	str	r3, [sp, #48]	; 0x30
   23a08:	ldrb	r3, [r5]
   23a0c:	cmp	r3, #125	; 0x7d
   23a10:	beq	23ae4 <_start@@Base+0xee04>
   23a14:	mov	r3, #10
   23a18:	mov	r1, r5
   23a1c:	mov	r2, r6
   23a20:	mov	r0, r7
   23a24:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   23a28:	ldr	r3, [sp, #48]	; 0x30
   23a2c:	mov	r4, r0
   23a30:	cmp	r3, #0
   23a34:	bne	23800 <_start@@Base+0xeb20>
   23a38:	ldr	r8, [sp, #104]	; 0x68
   23a3c:	mov	r5, r4
   23a40:	b	23d68 <_start@@Base+0xf088>
   23a44:	mov	r8, #0
   23a48:	mov	r9, #0
   23a4c:	b	23868 <_start@@Base+0xeb88>
   23a50:	mov	r2, #0
   23a54:	mov	r3, r2
   23a58:	b	23898 <_start@@Base+0xebb8>
   23a5c:	mov	r2, #0
   23a60:	mov	r3, r2
   23a64:	b	23874 <_start@@Base+0xeb94>
   23a68:	mov	r1, #0
   23a6c:	mov	lr, r1
   23a70:	b	23880 <_start@@Base+0xeba0>
   23a74:	mov	r2, #0
   23a78:	mov	lr, r2
   23a7c:	b	23888 <_start@@Base+0xeba8>
   23a80:	mov	r2, #0
   23a84:	mov	r3, r2
   23a88:	b	23890 <_start@@Base+0xebb0>
   23a8c:	ldrb	r0, [r4]
   23a90:	mov	r2, #0
   23a94:	lsl	r0, r0, #24
   23a98:	b	238c4 <_start@@Base+0xebe4>
   23a9c:	cmp	ip, #6
   23aa0:	ble	23ab0 <_start@@Base+0xedd0>
   23aa4:	ldrb	r3, [r4, #6]
   23aa8:	cmp	r3, #34	; 0x22
   23aac:	beq	23e14 <_start@@Base+0xf134>
   23ab0:	mov	r1, r4
   23ab4:	mov	r2, r6
   23ab8:	mov	r0, r7
   23abc:	bl	31304 <flatcc_json_parser_unmatched_symbol@@Base>
   23ac0:	mov	r5, r0
   23ac4:	b	239bc <_start@@Base+0xecdc>
   23ac8:	mov	r1, r4
   23acc:	mov	r3, #5
   23ad0:	mov	r2, r6
   23ad4:	mov	r0, r7
   23ad8:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   23adc:	mov	r4, r0
   23ae0:	b	23818 <_start@@Base+0xeb38>
   23ae4:	add	r1, r5, #1
   23ae8:	sub	r3, r6, r1
   23aec:	cmp	r3, #1
   23af0:	ble	23b04 <_start@@Base+0xee24>
   23af4:	ldrb	r3, [r5, #1]
   23af8:	cmp	r3, #32
   23afc:	bhi	23fac <_start@@Base+0xf2cc>
   23b00:	beq	23fe0 <_start@@Base+0xf300>
   23b04:	mov	r2, r6
   23b08:	mov	r0, r7
   23b0c:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   23b10:	mov	r4, r0
   23b14:	ldr	r3, [sp, #48]	; 0x30
   23b18:	b	23a30 <_start@@Base+0xed50>
   23b1c:	bic	r3, r0, #255	; 0xff
   23b20:	mov	r5, #0
   23b24:	add	r9, pc, #308	; 0x134
   23b28:	ldrd	r8, [r9]
   23b2c:	str	r5, [sp, #24]
   23b30:	str	r3, [sp, #28]
   23b34:	ldrd	r2, [sp, #24]
   23b38:	cmp	r3, r9
   23b3c:	cmpeq	r2, r8
   23b40:	bne	23c78 <_start@@Base+0xef98>
   23b44:	cmp	ip, #3
   23b48:	ble	23ab0 <_start@@Base+0xedd0>
   23b4c:	ldrb	r3, [r4, #3]
   23b50:	cmp	r3, #34	; 0x22
   23b54:	bne	23ab0 <_start@@Base+0xedd0>
   23b58:	mov	r2, r6
   23b5c:	add	r1, r4, #4
   23b60:	mov	r0, r7
   23b64:	bl	16bf0 <_start@@Base+0x1f10>
   23b68:	cmp	r6, r0
   23b6c:	beq	23b7c <_start@@Base+0xee9c>
   23b70:	ldrb	r3, [r0]
   23b74:	cmp	r3, #58	; 0x3a
   23b78:	beq	241dc <_start@@Base+0xf4fc>
   23b7c:	mov	r1, r0
   23b80:	mov	r3, #4
   23b84:	mov	r2, r6
   23b88:	mov	r0, r7
   23b8c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   23b90:	mov	r9, r0
   23b94:	cmp	r4, r9
   23b98:	beq	23ab0 <_start@@Base+0xedd0>
   23b9c:	mov	r3, #0
   23ba0:	mov	r0, #0
   23ba4:	mov	r1, #0
   23ba8:	cmp	r6, r9
   23bac:	strb	r3, [sp, #47]	; 0x2f
   23bb0:	str	r3, [sp, #52]	; 0x34
   23bb4:	strd	r0, [sp, #56]	; 0x38
   23bb8:	beq	23fb8 <_start@@Base+0xf2d8>
   23bbc:	add	r0, sp, #56	; 0x38
   23bc0:	add	r3, sp, #52	; 0x34
   23bc4:	mov	r2, r6
   23bc8:	mov	r1, r9
   23bcc:	str	r0, [sp]
   23bd0:	mov	r0, r7
   23bd4:	bl	316c0 <flatcc_json_parser_integer@@Base>
   23bd8:	cmp	r9, r0
   23bdc:	mov	r4, r0
   23be0:	bne	23ff8 <_start@@Base+0xf318>
   23be4:	add	ip, sp, #47	; 0x2f
   23be8:	ldr	r3, [pc, #124]	; 23c6c <_start@@Base+0xef8c>
   23bec:	mov	r2, r6
   23bf0:	mov	r1, r4
   23bf4:	mov	r0, r7
   23bf8:	str	ip, [sp]
   23bfc:	bl	1a794 <_start@@Base+0x5ab4>
   23c00:	cmp	r6, r0
   23c04:	cmpne	r0, r4
   23c08:	mov	r5, r0
   23c0c:	beq	23f00 <_start@@Base+0xf220>
   23c10:	ldrb	r2, [sp, #47]	; 0x2f
   23c14:	cmp	r2, #2
   23c18:	bne	23c28 <_start@@Base+0xef48>
   23c1c:	ldr	r3, [r7, #8]
   23c20:	tst	r3, #2
   23c24:	beq	239bc <_start@@Base+0xecdc>
   23c28:	mov	r3, #1
   23c2c:	mov	r1, #3
   23c30:	mov	r2, r3
   23c34:	ldr	r0, [r7]
   23c38:	bl	29bc0 <flatcc_builder_table_add@@Base>
   23c3c:	cmp	r0, #0
   23c40:	beq	23f00 <_start@@Base+0xf220>
   23c44:	ldrb	r3, [sp, #47]	; 0x2f
   23c48:	strb	r3, [r0]
   23c4c:	b	239bc <_start@@Base+0xecdc>
   23c50:	eorsvc	r0, r2, #0
   23c54:	cmnvs	pc, #28416	; 0x6f00
   23c58:	andvc	r0, r0, #0
   23c5c:	cmnvs	pc, #28416	; 0x6f00
   23c60:	andeq	r0, r0, r0
   23c64:	strbvc	r3, [r3, #-512]!	; 0xfffffe00
   23c68:	andeq	r8, r5, r4, lsl r3
   23c6c:	andeq	r8, r5, r4, lsr #6
   23c70:	andeq	r8, r5, r0, lsr r3
   23c74:	andeq	r8, r5, r4, lsl #6
   23c78:	ldr	r3, [sp, #20]
   23c7c:	mov	r1, #0
   23c80:	movt	r1, #30051	; 0x7563
   23c84:	str	r5, [sp, #32]
   23c88:	and	r3, r0, r3
   23c8c:	mov	r0, #0
   23c90:	str	r3, [sp, #36]	; 0x24
   23c94:	ldrd	r2, [sp, #32]
   23c98:	cmp	r3, r1
   23c9c:	cmpeq	r2, r0
   23ca0:	bne	23ab0 <_start@@Base+0xedd0>
   23ca4:	cmp	ip, #2
   23ca8:	ble	23ab0 <_start@@Base+0xedd0>
   23cac:	mov	r2, r6
   23cb0:	mov	r1, r4
   23cb4:	mov	r0, r7
   23cb8:	bl	1c17c <_start@@Base+0x749c>
   23cbc:	cmp	r4, r0
   23cc0:	mov	r9, r0
   23cc4:	beq	23ab0 <_start@@Base+0xedd0>
   23cc8:	mov	r2, #0
   23ccc:	mov	r3, #0
   23cd0:	strb	r5, [sp, #47]	; 0x2f
   23cd4:	cmp	r6, r0
   23cd8:	str	r5, [sp, #52]	; 0x34
   23cdc:	strd	r2, [sp, #56]	; 0x38
   23ce0:	beq	23fc0 <_start@@Base+0xf2e0>
   23ce4:	add	r0, sp, #56	; 0x38
   23ce8:	add	r3, sp, #52	; 0x34
   23cec:	mov	r2, r6
   23cf0:	mov	r1, r9
   23cf4:	str	r0, [sp]
   23cf8:	mov	r0, r7
   23cfc:	bl	316c0 <flatcc_json_parser_integer@@Base>
   23d00:	cmp	r9, r0
   23d04:	mov	r4, r0
   23d08:	bne	24048 <_start@@Base+0xf368>
   23d0c:	add	ip, sp, #47	; 0x2f
   23d10:	ldr	r3, [pc, #-168]	; 23c70 <_start@@Base+0xef90>
   23d14:	mov	r2, r6
   23d18:	mov	r1, r4
   23d1c:	mov	r0, r7
   23d20:	str	ip, [sp]
   23d24:	bl	1a794 <_start@@Base+0x5ab4>
   23d28:	cmp	r6, r0
   23d2c:	cmpne	r0, r4
   23d30:	mov	r5, r0
   23d34:	beq	23f00 <_start@@Base+0xf220>
   23d38:	ldrb	r2, [sp, #47]	; 0x2f
   23d3c:	cmp	r2, #2
   23d40:	bne	23d50 <_start@@Base+0xf070>
   23d44:	ldr	r3, [r7, #8]
   23d48:	tst	r3, #2
   23d4c:	beq	239bc <_start@@Base+0xecdc>
   23d50:	mov	r3, #1
   23d54:	mov	r1, #2
   23d58:	b	23c30 <_start@@Base+0xef50>
   23d5c:	ldr	r8, [sp, #104]	; 0x68
   23d60:	mov	r3, #0
   23d64:	str	r3, [sp, #48]	; 0x30
   23d68:	ldr	r3, [r7, #20]
   23d6c:	cmp	r3, #0
   23d70:	beq	24118 <_start@@Base+0xf438>
   23d74:	mov	r1, r5
   23d78:	mov	r3, #33	; 0x21
   23d7c:	mov	r2, r6
   23d80:	mov	r0, r7
   23d84:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   23d88:	b	23748 <_start@@Base+0xea68>
   23d8c:	ldrb	r3, [r5, #1]
   23d90:	cmp	r3, #32
   23d94:	addhi	r5, r5, #1
   23d98:	bls	239d8 <_start@@Base+0xecf8>
   23d9c:	b	239ec <_start@@Base+0xed0c>
   23da0:	add	r4, r5, #1
   23da4:	sub	r3, r6, r4
   23da8:	cmp	r3, #1
   23dac:	ble	23dc0 <_start@@Base+0xf0e0>
   23db0:	ldrb	r3, [r5, #1]
   23db4:	cmp	r3, #32
   23db8:	bhi	23dd4 <_start@@Base+0xf0f4>
   23dbc:	beq	24104 <_start@@Base+0xf424>
   23dc0:	mov	r1, r4
   23dc4:	mov	r2, r6
   23dc8:	mov	r0, r7
   23dcc:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   23dd0:	mov	r4, r0
   23dd4:	cmp	r6, r4
   23dd8:	beq	24134 <_start@@Base+0xf454>
   23ddc:	ldrb	r3, [r4]
   23de0:	cmp	r3, #125	; 0x7d
   23de4:	movne	r3, #1
   23de8:	strne	r3, [sp, #48]	; 0x30
   23dec:	bne	23800 <_start@@Base+0xeb20>
   23df0:	mov	r3, #0
   23df4:	add	r1, r4, #1
   23df8:	mov	r2, r6
   23dfc:	mov	r0, r7
   23e00:	str	r3, [sp, #48]	; 0x30
   23e04:	bl	16bf0 <_start@@Base+0x1f10>
   23e08:	mov	r4, r0
   23e0c:	ldr	r3, [sp, #48]	; 0x30
   23e10:	b	23a30 <_start@@Base+0xed50>
   23e14:	mov	r2, r6
   23e18:	add	r1, r4, #7
   23e1c:	mov	r0, r7
   23e20:	bl	16bf0 <_start@@Base+0x1f10>
   23e24:	cmp	r6, r0
   23e28:	beq	23e38 <_start@@Base+0xf158>
   23e2c:	ldrb	r3, [r0]
   23e30:	cmp	r3, #58	; 0x3a
   23e34:	beq	2418c <_start@@Base+0xf4ac>
   23e38:	mov	r1, r0
   23e3c:	mov	r3, #4
   23e40:	mov	r2, r6
   23e44:	mov	r0, r7
   23e48:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   23e4c:	mov	r9, r0
   23e50:	cmp	r4, r9
   23e54:	beq	23ab0 <_start@@Base+0xedd0>
   23e58:	mov	r3, #0
   23e5c:	mov	r0, #0
   23e60:	mov	r1, #0
   23e64:	cmp	r6, r9
   23e68:	strb	r3, [sp, #47]	; 0x2f
   23e6c:	str	r3, [sp, #52]	; 0x34
   23e70:	strd	r0, [sp, #56]	; 0x38
   23e74:	beq	23f08 <_start@@Base+0xf228>
   23e78:	add	r0, sp, #56	; 0x38
   23e7c:	add	r3, sp, #52	; 0x34
   23e80:	mov	r2, r6
   23e84:	mov	r1, r9
   23e88:	str	r0, [sp]
   23e8c:	mov	r0, r7
   23e90:	bl	316c0 <flatcc_json_parser_integer@@Base>
   23e94:	cmp	r9, r0
   23e98:	mov	r5, r0
   23e9c:	bne	23f18 <_start@@Base+0xf238>
   23ea0:	add	ip, sp, #47	; 0x2f
   23ea4:	ldr	r3, [pc, #-568]	; 23c74 <_start@@Base+0xef94>
   23ea8:	mov	r2, r6
   23eac:	mov	r1, r5
   23eb0:	mov	r0, r7
   23eb4:	str	ip, [sp]
   23eb8:	bl	1a3cc <_start@@Base+0x56ec>
   23ebc:	cmp	r6, r0
   23ec0:	cmpne	r0, r5
   23ec4:	beq	241f4 <_start@@Base+0xf514>
   23ec8:	ldrsb	r2, [sp, #47]	; 0x2f
   23ecc:	mov	r5, r0
   23ed0:	cmp	r2, #2
   23ed4:	bne	23ee4 <_start@@Base+0xf204>
   23ed8:	ldr	r3, [r7, #8]
   23edc:	tst	r3, #2
   23ee0:	beq	239bc <_start@@Base+0xecdc>
   23ee4:	mov	r3, #1
   23ee8:	ldr	r0, [r7]
   23eec:	mov	r2, r3
   23ef0:	mov	r1, r3
   23ef4:	bl	29bc0 <flatcc_builder_table_add@@Base>
   23ef8:	cmp	r0, #0
   23efc:	bne	239b4 <_start@@Base+0xecd4>
   23f00:	ldr	r8, [sp, #104]	; 0x68
   23f04:	b	23d74 <_start@@Base+0xf094>
   23f08:	mov	r5, r6
   23f0c:	b	23ea0 <_start@@Base+0xf1c0>
   23f10:	mov	r5, r6
   23f14:	b	23954 <_start@@Base+0xec74>
   23f18:	ldr	r1, [sp, #52]	; 0x34
   23f1c:	ldrd	r2, [sp, #56]	; 0x38
   23f20:	cmp	r1, #0
   23f24:	beq	24098 <_start@@Base+0xf3b8>
   23f28:	cmp	r3, #0
   23f2c:	cmpeq	r2, #128	; 0x80
   23f30:	rsbls	r2, r2, #0
   23f34:	sxtbls	r2, r2
   23f38:	strbls	r2, [sp, #47]	; 0x2f
   23f3c:	bls	23ed0 <_start@@Base+0xf1f0>
   23f40:	mov	r1, r0
   23f44:	mov	r3, #8
   23f48:	mov	r2, r6
   23f4c:	mov	r0, r7
   23f50:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   23f54:	mov	r5, r0
   23f58:	cmp	r9, r5
   23f5c:	beq	23ea0 <_start@@Base+0xf1c0>
   23f60:	ldrsb	r2, [sp, #47]	; 0x2f
   23f64:	b	23ed0 <_start@@Base+0xf1f0>
   23f68:	ldr	r1, [sp, #52]	; 0x34
   23f6c:	ldrd	r2, [sp, #56]	; 0x38
   23f70:	cmp	r1, #0
   23f74:	beq	240c8 <_start@@Base+0xf3e8>
   23f78:	cmp	r3, #0
   23f7c:	cmpeq	r2, #128	; 0x80
   23f80:	rsbls	r2, r2, #0
   23f84:	sxtbls	r2, r2
   23f88:	strbls	r2, [sp, #47]	; 0x2f
   23f8c:	bls	23984 <_start@@Base+0xeca4>
   23f90:	mov	r1, r0
   23f94:	mov	r3, #8
   23f98:	mov	r2, r6
   23f9c:	mov	r0, r7
   23fa0:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   23fa4:	mov	r5, r0
   23fa8:	b	240f4 <_start@@Base+0xf414>
   23fac:	mov	r5, r1
   23fb0:	ldr	r8, [sp, #104]	; 0x68
   23fb4:	b	23d68 <_start@@Base+0xf088>
   23fb8:	mov	r4, r6
   23fbc:	b	23be4 <_start@@Base+0xef04>
   23fc0:	mov	r4, r6
   23fc4:	b	23d0c <_start@@Base+0xf02c>
   23fc8:	mov	r1, r0
   23fcc:	mov	r2, r6
   23fd0:	mov	r0, r7
   23fd4:	mov	r3, #33	; 0x21
   23fd8:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   23fdc:	b	23760 <_start@@Base+0xea80>
   23fe0:	ldrb	r3, [r5, #2]
   23fe4:	cmp	r3, #32
   23fe8:	bls	23b04 <_start@@Base+0xee24>
   23fec:	add	r5, r5, #2
   23ff0:	ldr	r8, [sp, #104]	; 0x68
   23ff4:	b	23d68 <_start@@Base+0xf088>
   23ff8:	ldr	r3, [sp, #52]	; 0x34
   23ffc:	cmp	r3, #0
   24000:	bne	241a4 <_start@@Base+0xf4c4>
   24004:	ldrd	r2, [sp, #56]	; 0x38
   24008:	cmp	r3, #0
   2400c:	cmpeq	r2, #255	; 0xff
   24010:	uxtbls	r2, r2
   24014:	movls	r5, r0
   24018:	strbls	r2, [sp, #47]	; 0x2f
   2401c:	bls	23c14 <_start@@Base+0xef34>
   24020:	mov	r1, r0
   24024:	mov	r3, #7
   24028:	mov	r2, r6
   2402c:	mov	r0, r7
   24030:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   24034:	mov	r5, r0
   24038:	cmp	r9, r5
   2403c:	bne	23c10 <_start@@Base+0xef30>
   24040:	mov	r4, r9
   24044:	b	23be4 <_start@@Base+0xef04>
   24048:	ldr	r3, [sp, #52]	; 0x34
   2404c:	cmp	r3, #0
   24050:	bne	241c0 <_start@@Base+0xf4e0>
   24054:	ldrd	r2, [sp, #56]	; 0x38
   24058:	cmp	r3, #0
   2405c:	cmpeq	r2, #255	; 0xff
   24060:	uxtbls	r2, r2
   24064:	movls	r5, r0
   24068:	strbls	r2, [sp, #47]	; 0x2f
   2406c:	bls	23d3c <_start@@Base+0xf05c>
   24070:	mov	r1, r0
   24074:	mov	r3, #7
   24078:	mov	r2, r6
   2407c:	mov	r0, r7
   24080:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   24084:	mov	r5, r0
   24088:	cmp	r9, r5
   2408c:	bne	23d38 <_start@@Base+0xf058>
   24090:	mov	r4, r9
   24094:	b	23d0c <_start@@Base+0xf02c>
   24098:	cmp	r3, #0
   2409c:	cmpeq	r2, #127	; 0x7f
   240a0:	sxtbls	r2, r2
   240a4:	strbls	r2, [sp, #47]	; 0x2f
   240a8:	bls	23ed0 <_start@@Base+0xf1f0>
   240ac:	mov	r1, r0
   240b0:	mov	r3, #7
   240b4:	mov	r2, r6
   240b8:	mov	r0, r7
   240bc:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   240c0:	mov	r5, r0
   240c4:	b	23f58 <_start@@Base+0xf278>
   240c8:	cmp	r3, #0
   240cc:	cmpeq	r2, #127	; 0x7f
   240d0:	sxtbls	r2, r2
   240d4:	strbls	r2, [sp, #47]	; 0x2f
   240d8:	bls	23984 <_start@@Base+0xeca4>
   240dc:	mov	r1, r0
   240e0:	mov	r3, #7
   240e4:	mov	r2, r6
   240e8:	mov	r0, r7
   240ec:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   240f0:	mov	r5, r0
   240f4:	cmp	r9, r5
   240f8:	beq	23954 <_start@@Base+0xec74>
   240fc:	ldrsb	r2, [sp, #47]	; 0x2f
   24100:	b	23984 <_start@@Base+0xeca4>
   24104:	ldrb	r3, [r5, #2]
   24108:	cmp	r3, #32
   2410c:	addhi	r4, r5, #2
   24110:	bls	23dc0 <_start@@Base+0xf0e0>
   24114:	b	23dd4 <_start@@Base+0xf0f4>
   24118:	ldr	r0, [r7]
   2411c:	bl	281c8 <flatcc_builder_end_table@@Base>
   24120:	cmp	r0, #0
   24124:	str	r0, [r8]
   24128:	movne	r0, r5
   2412c:	bne	23748 <_start@@Base+0xea68>
   24130:	b	23d74 <_start@@Base+0xf094>
   24134:	mov	ip, #0
   24138:	mov	r3, #10
   2413c:	mov	r2, r6
   24140:	mov	r1, r6
   24144:	mov	r0, r7
   24148:	str	ip, [sp, #48]	; 0x30
   2414c:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   24150:	mov	r4, r0
   24154:	ldr	r3, [sp, #48]	; 0x30
   24158:	b	23a30 <_start@@Base+0xed50>
   2415c:	ldrb	r3, [r1, #1]
   24160:	add	r2, r1, #1
   24164:	cmp	r3, #117	; 0x75
   24168:	bne	23794 <_start@@Base+0xeab4>
   2416c:	ldrb	r3, [r2, #1]!
   24170:	cmp	r3, #108	; 0x6c
   24174:	bne	23794 <_start@@Base+0xeab4>
   24178:	ldrb	r3, [r2, #1]
   2417c:	cmp	r3, #108	; 0x6c
   24180:	addeq	r0, r1, #4
   24184:	bne	23794 <_start@@Base+0xeab4>
   24188:	b	23760 <_start@@Base+0xea80>
   2418c:	add	r1, r0, #1
   24190:	mov	r2, r6
   24194:	mov	r0, r7
   24198:	bl	16bf0 <_start@@Base+0x1f10>
   2419c:	mov	r9, r0
   241a0:	b	23e50 <_start@@Base+0xf170>
   241a4:	mov	r1, r0
   241a8:	mov	r3, #8
   241ac:	mov	r2, r6
   241b0:	mov	r0, r7
   241b4:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   241b8:	mov	r5, r0
   241bc:	b	24038 <_start@@Base+0xf358>
   241c0:	mov	r1, r0
   241c4:	mov	r3, #8
   241c8:	mov	r2, r6
   241cc:	mov	r0, r7
   241d0:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   241d4:	mov	r5, r0
   241d8:	b	24088 <_start@@Base+0xf3a8>
   241dc:	add	r1, r0, #1
   241e0:	mov	r2, r6
   241e4:	mov	r0, r7
   241e8:	bl	16bf0 <_start@@Base+0x1f10>
   241ec:	mov	r9, r0
   241f0:	b	23b94 <_start@@Base+0xeeb4>
   241f4:	mov	r5, r0
   241f8:	ldr	r8, [sp, #104]	; 0x68
   241fc:	b	23d74 <_start@@Base+0xf094>
   24200:	ldr	r3, [r0, #8]
   24204:	tst	r3, #1
   24208:	bne	24218 <_start@@Base+0xf538>
   2420c:	mov	r3, #15
   24210:	bl	2d8e0 <flatcc_json_parser_set_error@@Base>
   24214:	b	23760 <_start@@Base+0xea80>
   24218:	bl	2f0b8 <flatcc_json_parser_generic_json@@Base>
   2421c:	b	23760 <_start@@Base+0xea80>

00024220 <test_json@@Base>:
   24220:	strd	r4, [sp, #-28]!	; 0xffffffe4
   24224:	mov	r5, r0
   24228:	strd	r6, [sp, #8]
   2422c:	mov	r7, r3
   24230:	mov	r6, r1
   24234:	strd	r8, [sp, #16]
   24238:	mov	r8, r2
   2423c:	str	lr, [sp, #24]
   24240:	sub	sp, sp, #348	; 0x15c
   24244:	add	r0, sp, #112	; 0x70
   24248:	ldr	r9, [sp, #376]	; 0x178
   2424c:	ldr	r4, [sp, #380]	; 0x17c
   24250:	bl	252c4 <flatcc_builder_init@@Base>
   24254:	mov	r1, #0
   24258:	add	r0, sp, #64	; 0x40
   2425c:	bl	418c8 <flatcc_json_printer_init_dynamic_buffer@@Base>
   24260:	ubfx	r3, r4, #3, #1
   24264:	tst	r4, #16
   24268:	and	r0, r4, #1
   2426c:	ubfx	r1, r4, #1, #1
   24270:	ubfx	r2, r4, #2, #1
   24274:	strb	r0, [sp, #90]	; 0x5a
   24278:	strb	r3, [sp, #93]	; 0x5d
   2427c:	movne	r3, #2
   24280:	strb	r1, [sp, #91]	; 0x5b
   24284:	strbne	r3, [sp, #89]	; 0x59
   24288:	tst	r4, #32
   2428c:	strb	r2, [sp, #92]	; 0x5c
   24290:	beq	242a4 <test_json@@Base+0x84>
   24294:	mov	r2, #2
   24298:	mov	r3, #1
   2429c:	strb	r2, [sp, #89]	; 0x59
   242a0:	strh	r3, [sp, #90]	; 0x5a
   242a4:	mov	r0, r6
   242a8:	bl	14578 <strlen@plt>
   242ac:	ldr	lr, [r5]
   242b0:	mov	r3, r0
   242b4:	mov	r2, r6
   242b8:	str	r9, [sp]
   242bc:	add	r1, sp, #24
   242c0:	add	r0, sp, #112	; 0x70
   242c4:	ldr	ip, [r5, #4]
   242c8:	str	lr, [sp, #4]
   242cc:	str	ip, [sp, #8]
   242d0:	bl	33348 <flatcc_json_parser_table_as_root@@Base>
   242d4:	cmp	r0, r7
   242d8:	bne	2440c <test_json@@Base+0x1ec>
   242dc:	cmp	r7, #0
   242e0:	movne	r4, #0
   242e4:	movne	r5, r4
   242e8:	beq	24320 <test_json@@Base+0x100>
   242ec:	mov	r0, r4
   242f0:	bl	2a7f8 <flatcc_builder_aligned_free@@Base>
   242f4:	add	r0, sp, #112	; 0x70
   242f8:	bl	2548c <flatcc_builder_clear@@Base>
   242fc:	add	r0, sp, #64	; 0x40
   24300:	bl	41a08 <flatcc_json_printer_clear@@Base>
   24304:	mov	r0, r5
   24308:	add	sp, sp, #348	; 0x15c
   2430c:	ldrd	r4, [sp]
   24310:	ldrd	r6, [sp, #8]
   24314:	ldrd	r8, [sp, #16]
   24318:	add	sp, sp, #24
   2431c:	pop	{pc}		; (ldr pc, [sp], #4)
   24320:	add	r1, sp, #16
   24324:	add	r0, sp, #112	; 0x70
   24328:	bl	2a6c8 <flatcc_builder_finalize_aligned_buffer@@Base>
   2432c:	ldr	r2, [r5]
   24330:	mov	r4, r0
   24334:	ldr	r3, [r5, #12]
   24338:	ldr	r1, [sp, #16]
   2433c:	bl	2bb38 <flatcc_verify_table_as_root@@Base>
   24340:	cmp	r0, #0
   24344:	bne	2450c <test_json@@Base+0x2ec>
   24348:	mov	r1, r4
   2434c:	add	r0, sp, #64	; 0x40
   24350:	ldr	r3, [r5]
   24354:	ldr	ip, [r5, #8]
   24358:	ldr	r2, [sp, #16]
   2435c:	str	ip, [sp]
   24360:	bl	41124 <flatcc_json_printer_table_as_root@@Base>
   24364:	add	r1, sp, #20
   24368:	add	r0, sp, #64	; 0x40
   2436c:	bl	4196c <flatcc_json_printer_get_buffer@@Base>
   24370:	subs	r6, r0, #0
   24374:	beq	2438c <test_json@@Base+0x16c>
   24378:	mov	r1, r6
   2437c:	mov	r0, r8
   24380:	bl	14500 <strcmp@plt>
   24384:	subs	r5, r0, #0
   24388:	beq	242ec <test_json@@Base+0xcc>
   2438c:	movw	r9, #33712	; 0x83b0
   24390:	movt	r9, #5
   24394:	ldr	r2, [sp, #384]	; 0x180
   24398:	movw	r1, #10448	; 0x28d0
   2439c:	movt	r1, #4
   243a0:	ldr	r0, [r9]
   243a4:	bl	14584 <fprintf@plt>
   243a8:	mov	r2, r6
   243ac:	movw	r1, #10292	; 0x2834
   243b0:	movt	r1, #4
   243b4:	ldr	r0, [r9]
   243b8:	bl	14584 <fprintf@plt>
   243bc:	mov	r2, #10
   243c0:	mov	r1, #1
   243c4:	ldr	r3, [r9]
   243c8:	movw	r0, #10504	; 0x2908
   243cc:	movt	r0, #4
   243d0:	bl	14548 <fwrite@plt>
   243d4:	movw	r1, #10292	; 0x2834
   243d8:	movt	r1, #4
   243dc:	ldr	r0, [r9]
   243e0:	mov	r2, r8
   243e4:	bl	14584 <fprintf@plt>
   243e8:	cmp	r4, #0
   243ec:	mvneq	r5, #0
   243f0:	beq	242ec <test_json@@Base+0xcc>
   243f4:	mov	r0, r4
   243f8:	ldr	r2, [r9]
   243fc:	mvn	r5, #0
   24400:	ldr	r1, [sp, #16]
   24404:	bl	17878 <_start@@Base+0x2b98>
   24408:	b	242ec <test_json@@Base+0xcc>
   2440c:	movw	r9, #33712	; 0x83b0
   24410:	movt	r9, #5
   24414:	cmp	r7, #0
   24418:	ldr	r4, [r9]
   2441c:	beq	244f0 <test_json@@Base+0x2d0>
   24420:	cmp	r0, #0
   24424:	beq	244cc <test_json@@Base+0x2ac>
   24428:	bl	2d8b8 <flatcc_json_parser_error_string@@Base>
   2442c:	mov	r3, r0
   24430:	movw	r1, #10156	; 0x27ac
   24434:	movt	r1, #4
   24438:	mov	r0, r4
   2443c:	ldr	r2, [sp, #384]	; 0x180
   24440:	bl	14584 <fprintf@plt>
   24444:	ldr	r4, [r9]
   24448:	mov	r0, r7
   2444c:	bl	2d8b8 <flatcc_json_parser_error_string@@Base>
   24450:	mov	r2, r0
   24454:	movw	r1, #10196	; 0x27d4
   24458:	movt	r1, #4
   2445c:	mov	r0, r4
   24460:	bl	14584 <fprintf@plt>
   24464:	mov	r2, r6
   24468:	movw	r1, #10292	; 0x2834
   2446c:	movt	r1, #4
   24470:	ldr	r0, [r9]
   24474:	bl	14584 <fprintf@plt>
   24478:	ldr	r3, [sp, #40]	; 0x28
   2447c:	cmp	r3, #1
   24480:	movgt	r4, #0
   24484:	ble	244a8 <test_json@@Base+0x288>
   24488:	mov	r0, #32
   2448c:	ldr	r1, [r9]
   24490:	add	r4, r4, #1
   24494:	bl	145cc <fputc@plt>
   24498:	ldr	r3, [sp, #40]	; 0x28
   2449c:	sub	r3, r3, #1
   244a0:	cmp	r3, r4
   244a4:	bgt	24488 <test_json@@Base+0x268>
   244a8:	movw	r0, #10228	; 0x27f4
   244ac:	movt	r0, #4
   244b0:	ldr	r3, [r9]
   244b4:	mov	r2, #2
   244b8:	mov	r1, #1
   244bc:	mov	r4, #0
   244c0:	mvn	r5, #0
   244c4:	bl	14548 <fwrite@plt>
   244c8:	b	242ec <test_json@@Base+0xcc>
   244cc:	mov	r0, r7
   244d0:	bl	2d8b8 <flatcc_json_parser_error_string@@Base>
   244d4:	ldr	r2, [sp, #384]	; 0x180
   244d8:	mov	r3, r0
   244dc:	movw	r1, #10232	; 0x27f8
   244e0:	movt	r1, #4
   244e4:	mov	r0, r4
   244e8:	bl	14584 <fprintf@plt>
   244ec:	b	24464 <test_json@@Base+0x244>
   244f0:	bl	2d8b8 <flatcc_json_parser_error_string@@Base>
   244f4:	mov	r3, r0
   244f8:	movw	r1, #10296	; 0x2838
   244fc:	movt	r1, #4
   24500:	mov	r0, r4
   24504:	ldr	r2, [sp, #384]	; 0x180
   24508:	b	244e8 <test_json@@Base+0x2c8>
   2450c:	movw	r9, #33712	; 0x83b0
   24510:	movt	r9, #5
   24514:	ldr	r5, [r9]
   24518:	bl	2ae08 <flatcc_verify_error_string@@Base>
   2451c:	movw	r2, #10332	; 0x285c
   24520:	movt	r2, #4
   24524:	str	r0, [sp]
   24528:	movw	r1, #10408	; 0x28a8
   2452c:	movt	r1, #4
   24530:	ldr	r3, [sp, #384]	; 0x180
   24534:	mov	r0, r5
   24538:	bl	14584 <fprintf@plt>
   2453c:	b	243e8 <test_json@@Base+0x1c8>

00024540 <edge_case_tests@@Base>:
   24540:	mov	r1, #158	; 0x9e
   24544:	strd	r4, [sp, #-32]!	; 0xffffffe0
   24548:	movw	r5, #8980	; 0x2314
   2454c:	movt	r5, #4
   24550:	strd	r6, [sp, #8]
   24554:	mov	r6, #0
   24558:	strd	r8, [sp, #16]
   2455c:	mov	r3, r6
   24560:	mov	r0, r5
   24564:	str	sl, [sp, #24]
   24568:	movw	r2, #10540	; 0x292c
   2456c:	movt	r2, #4
   24570:	str	lr, [sp, #28]
   24574:	sub	sp, sp, #8
   24578:	movw	r8, #10628	; 0x2984
   2457c:	movt	r8, #4
   24580:	movw	r9, #10664	; 0x29a8
   24584:	movt	r9, #4
   24588:	str	r6, [sp]
   2458c:	mov	sl, #2
   24590:	str	r1, [sp, #4]
   24594:	movw	r1, #10572	; 0x294c
   24598:	movt	r1, #4
   2459c:	bl	18208 <_start@@Base+0x3528>
   245a0:	mov	r3, #168	; 0xa8
   245a4:	mov	r2, r8
   245a8:	str	r6, [sp]
   245ac:	mov	r1, r9
   245b0:	mov	r4, r0
   245b4:	mov	r0, r5
   245b8:	str	r3, [sp, #4]
   245bc:	mov	r3, #2
   245c0:	bl	18208 <_start@@Base+0x3528>
   245c4:	mov	ip, #172	; 0xac
   245c8:	mov	r3, r6
   245cc:	orr	r4, r4, r0
   245d0:	movw	r2, #10700	; 0x29cc
   245d4:	movt	r2, #4
   245d8:	mov	r0, r5
   245dc:	stm	sp, {sl, ip}
   245e0:	movw	r1, #10732	; 0x29ec
   245e4:	movt	r1, #4
   245e8:	bl	18208 <_start@@Base+0x3528>
   245ec:	mov	ip, #4
   245f0:	mov	r2, #176	; 0xb0
   245f4:	mov	r1, r9
   245f8:	mov	r3, sl
   245fc:	orr	r4, r4, r0
   24600:	mov	r0, r5
   24604:	str	ip, [sp]
   24608:	str	r2, [sp, #4]
   2460c:	movw	r2, #10772	; 0x2a14
   24610:	movt	r2, #4
   24614:	bl	18208 <_start@@Base+0x3528>
   24618:	mov	r1, #180	; 0xb4
   2461c:	mov	r2, #8
   24620:	mov	r3, r6
   24624:	orr	r4, r4, r0
   24628:	mov	r0, r5
   2462c:	str	r2, [sp]
   24630:	movw	r2, #10792	; 0x2a28
   24634:	movt	r2, #4
   24638:	str	r1, [sp, #4]
   2463c:	movw	r1, #11068	; 0x2b3c
   24640:	movt	r1, #4
   24644:	movw	r7, #11144	; 0x2b88
   24648:	movt	r7, #4
   2464c:	movw	r9, #11172	; 0x2ba4
   24650:	movt	r9, #4
   24654:	bl	18208 <_start@@Base+0x3528>
   24658:	mov	ip, #195	; 0xc3
   2465c:	mov	r3, sl
   24660:	mov	r2, r8
   24664:	orr	r4, r4, r0
   24668:	movw	r1, #11104	; 0x2b60
   2466c:	movt	r1, #4
   24670:	stm	sp, {r6, ip}
   24674:	mov	r0, r5
   24678:	mov	r8, #1
   2467c:	bl	18208 <_start@@Base+0x3528>
   24680:	mov	r3, #199	; 0xc7
   24684:	mov	r2, r7
   24688:	str	r6, [sp]
   2468c:	mov	r1, r9
   24690:	orr	r4, r4, r0
   24694:	mov	r0, r5
   24698:	str	r3, [sp, #4]
   2469c:	mov	r3, r8
   246a0:	bl	18208 <_start@@Base+0x3528>
   246a4:	mov	ip, #203	; 0xcb
   246a8:	mov	r1, r9
   246ac:	mov	r3, r8
   246b0:	orr	r4, r4, r0
   246b4:	movw	r2, #11224	; 0x2bd8
   246b8:	movt	r2, #4
   246bc:	stm	sp, {r8, ip}
   246c0:	mov	r0, r5
   246c4:	bl	18208 <_start@@Base+0x3528>
   246c8:	mov	ip, #209	; 0xd1
   246cc:	orr	r4, r4, r0
   246d0:	mov	r3, r8
   246d4:	mov	r2, r7
   246d8:	mov	r0, r5
   246dc:	movw	r1, #11248	; 0x2bf0
   246e0:	movt	r1, #4
   246e4:	stm	sp, {r6, ip}
   246e8:	bl	18208 <_start@@Base+0x3528>
   246ec:	orr	r0, r4, r0
   246f0:	add	sp, sp, #8
   246f4:	ldrd	r4, [sp]
   246f8:	ldrd	r6, [sp, #8]
   246fc:	ldrd	r8, [sp, #16]
   24700:	ldr	sl, [sp, #24]
   24704:	add	sp, sp, #28
   24708:	pop	{pc}		; (ldr pc, [sp], #4)

0002470c <error_case_tests@@Base>:
   2470c:	movw	r3, #285	; 0x11d
   24710:	mov	r2, #13
   24714:	str	r4, [sp, #-8]!
   24718:	mov	r1, #0
   2471c:	movw	r0, #11364	; 0x2c64
   24720:	movt	r0, #4
   24724:	str	lr, [sp, #4]
   24728:	bl	17a04 <_start@@Base+0x2d24>
   2472c:	mov	r4, r0
   24730:	movw	r3, #287	; 0x11f
   24734:	mov	r2, #13
   24738:	mov	r1, #0
   2473c:	movw	r0, #11392	; 0x2c80
   24740:	movt	r0, #4
   24744:	bl	17a04 <_start@@Base+0x2d24>
   24748:	orr	r4, r4, r0
   2474c:	movw	r3, #289	; 0x121
   24750:	mov	r2, #13
   24754:	mov	r1, #0
   24758:	movw	r0, #11492	; 0x2ce4
   2475c:	movt	r0, #4
   24760:	bl	17a04 <_start@@Base+0x2d24>
   24764:	orr	r4, r4, r0
   24768:	movw	r3, #291	; 0x123
   2476c:	mov	r2, #13
   24770:	mov	r1, #0
   24774:	movw	r0, #11588	; 0x2d44
   24778:	movt	r0, #4
   2477c:	bl	17a04 <_start@@Base+0x2d24>
   24780:	orr	r4, r4, r0
   24784:	movw	r3, #293	; 0x125
   24788:	mov	r2, #13
   2478c:	mov	r1, #0
   24790:	movw	r0, #11676	; 0x2d9c
   24794:	movt	r0, #4
   24798:	bl	17a04 <_start@@Base+0x2d24>
   2479c:	orr	r4, r4, r0
   247a0:	mov	r3, #296	; 0x128
   247a4:	mov	r2, #13
   247a8:	mov	r1, #0
   247ac:	movw	r0, #11764	; 0x2df4
   247b0:	movt	r0, #4
   247b4:	bl	17a04 <_start@@Base+0x2d24>
   247b8:	orr	r4, r4, r0
   247bc:	movw	r3, #299	; 0x12b
   247c0:	mov	r2, #13
   247c4:	mov	r1, #0
   247c8:	movw	r0, #11924	; 0x2e94
   247cc:	movt	r0, #4
   247d0:	bl	17a04 <_start@@Base+0x2d24>
   247d4:	orr	r4, r4, r0
   247d8:	movw	r3, #303	; 0x12f
   247dc:	mov	r2, #13
   247e0:	mov	r1, #0
   247e4:	movw	r0, #12080	; 0x2f30
   247e8:	movt	r0, #4
   247ec:	bl	17a04 <_start@@Base+0x2d24>
   247f0:	orr	r4, r4, r0
   247f4:	movw	r3, #307	; 0x133
   247f8:	mov	r2, #13
   247fc:	mov	r1, #0
   24800:	movw	r0, #12280	; 0x2ff8
   24804:	movt	r0, #4
   24808:	bl	17a04 <_start@@Base+0x2d24>
   2480c:	orr	r4, r4, r0
   24810:	movw	r3, #311	; 0x137
   24814:	mov	r2, #5
   24818:	mov	r1, #0
   2481c:	movw	r0, #12480	; 0x30c0
   24820:	movt	r0, #4
   24824:	bl	17a04 <_start@@Base+0x2d24>
   24828:	orr	r4, r4, r0
   2482c:	movw	r3, #314	; 0x13a
   24830:	mov	r2, #5
   24834:	mov	r1, #0
   24838:	movw	r0, #12504	; 0x30d8
   2483c:	movt	r0, #4
   24840:	bl	17a04 <_start@@Base+0x2d24>
   24844:	orr	r4, r4, r0
   24848:	movw	r3, #317	; 0x13d
   2484c:	movw	r0, #12544	; 0x3100
   24850:	movt	r0, #4
   24854:	mov	r2, #5
   24858:	mov	r1, #0
   2485c:	bl	17a04 <_start@@Base+0x2d24>
   24860:	orr	r0, r4, r0
   24864:	ldr	r4, [sp]
   24868:	add	sp, sp, #4
   2486c:	pop	{pc}		; (ldr pc, [sp], #4)

00024870 <base64_tests@@Base>:
   24870:	movw	r1, #369	; 0x171
   24874:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24878:	mov	r4, #0
   2487c:	strd	r6, [sp, #8]
   24880:	movw	r6, #8980	; 0x2314
   24884:	movt	r6, #4
   24888:	str	r8, [sp, #16]
   2488c:	mov	r3, r4
   24890:	mov	r0, r6
   24894:	str	lr, [sp, #20]
   24898:	sub	sp, sp, #8
   2489c:	movw	r2, #10772	; 0x2a14
   248a0:	movt	r2, #4
   248a4:	movw	r8, #12700	; 0x319c
   248a8:	movt	r8, #4
   248ac:	str	r4, [sp]
   248b0:	movw	r7, #13068	; 0x330c
   248b4:	movt	r7, #4
   248b8:	str	r1, [sp, #4]
   248bc:	movw	r1, #12600	; 0x3138
   248c0:	movt	r1, #4
   248c4:	bl	18208 <_start@@Base+0x3528>
   248c8:	mov	r1, #372	; 0x174
   248cc:	mov	r3, r4
   248d0:	str	r4, [sp]
   248d4:	mov	r5, r0
   248d8:	movw	r2, #12624	; 0x3150
   248dc:	movt	r2, #4
   248e0:	mov	r0, r6
   248e4:	str	r1, [sp, #4]
   248e8:	movw	r1, #12660	; 0x3174
   248ec:	movt	r1, #4
   248f0:	bl	18208 <_start@@Base+0x3528>
   248f4:	mov	r1, #376	; 0x178
   248f8:	mov	r3, r4
   248fc:	str	r4, [sp]
   24900:	mov	r2, r8
   24904:	orr	r5, r5, r0
   24908:	mov	r0, r6
   2490c:	str	r1, [sp, #4]
   24910:	movw	r1, #12880	; 0x3250
   24914:	movt	r1, #4
   24918:	bl	18208 <_start@@Base+0x3528>
   2491c:	movw	r1, #379	; 0x17b
   24920:	mov	r3, r4
   24924:	str	r4, [sp]
   24928:	mov	r2, r7
   2492c:	orr	r5, r5, r0
   24930:	mov	r0, r6
   24934:	str	r1, [sp, #4]
   24938:	movw	r1, #13252	; 0x33c4
   2493c:	movt	r1, #4
   24940:	bl	18208 <_start@@Base+0x3528>
   24944:	movw	ip, #382	; 0x17e
   24948:	mov	r2, r8
   2494c:	mov	r3, r4
   24950:	orr	r5, r5, r0
   24954:	movw	r1, #13440	; 0x3480
   24958:	movt	r1, #4
   2495c:	stm	sp, {r4, ip}
   24960:	mov	r0, r6
   24964:	bl	18208 <_start@@Base+0x3528>
   24968:	movw	ip, #385	; 0x181
   2496c:	mov	r2, r7
   24970:	mov	r3, r4
   24974:	orr	r5, r5, r0
   24978:	movw	r1, #13624	; 0x3538
   2497c:	movt	r1, #4
   24980:	stm	sp, {r4, ip}
   24984:	mov	r0, r6
   24988:	bl	18208 <_start@@Base+0x3528>
   2498c:	orr	r5, r5, r0
   24990:	mov	r1, r4
   24994:	mov	r3, #388	; 0x184
   24998:	mov	r2, #31
   2499c:	movw	r0, #13812	; 0x35f4
   249a0:	movt	r0, #4
   249a4:	bl	17a04 <_start@@Base+0x2d24>
   249a8:	orr	r5, r5, r0
   249ac:	mov	r1, r4
   249b0:	movw	r3, #391	; 0x187
   249b4:	mov	r2, #32
   249b8:	movw	r0, #14000	; 0x36b0
   249bc:	movt	r0, #4
   249c0:	bl	17a04 <_start@@Base+0x2d24>
   249c4:	orr	r0, r5, r0
   249c8:	add	sp, sp, #8
   249cc:	ldrd	r4, [sp]
   249d0:	ldrd	r6, [sp, #8]
   249d4:	ldr	r8, [sp, #16]
   249d8:	add	sp, sp, #20
   249dc:	pop	{pc}		; (ldr pc, [sp], #4)

000249e0 <mixed_type_union_tests@@Base>:
   249e0:	strd	r4, [sp, #-20]!	; 0xffffffec
   249e4:	mov	r0, #432	; 0x1b0
   249e8:	mov	r4, #0
   249ec:	strd	r6, [sp, #8]
   249f0:	mov	r3, r4
   249f4:	movw	r2, #14188	; 0x376c
   249f8:	movt	r2, #4
   249fc:	ldr	r6, [pc, #308]	; 24b38 <mixed_type_union_tests@@Base+0x158>
   24a00:	movw	r1, #14260	; 0x37b4
   24a04:	movt	r1, #4
   24a08:	str	lr, [sp, #16]
   24a0c:	sub	sp, sp, #12
   24a10:	movw	r7, #14340	; 0x3804
   24a14:	movt	r7, #4
   24a18:	str	r4, [sp]
   24a1c:	str	r0, [sp, #4]
   24a20:	mov	r0, r6
   24a24:	bl	18208 <_start@@Base+0x3528>
   24a28:	movw	r1, #437	; 0x1b5
   24a2c:	mov	r3, r4
   24a30:	str	r4, [sp]
   24a34:	mov	r2, r7
   24a38:	mov	r5, r0
   24a3c:	mov	r0, r6
   24a40:	str	r1, [sp, #4]
   24a44:	movw	r1, #14460	; 0x387c
   24a48:	movt	r1, #4
   24a4c:	bl	18208 <_start@@Base+0x3528>
   24a50:	movw	r1, #442	; 0x1ba
   24a54:	mov	r3, r4
   24a58:	str	r4, [sp]
   24a5c:	mov	r2, r7
   24a60:	orr	r5, r5, r0
   24a64:	mov	r0, r6
   24a68:	str	r1, [sp, #4]
   24a6c:	movw	r1, #14592	; 0x3900
   24a70:	movt	r1, #4
   24a74:	bl	18208 <_start@@Base+0x3528>
   24a78:	movw	r1, #449	; 0x1c1
   24a7c:	mov	r3, r4
   24a80:	str	r4, [sp]
   24a84:	orr	r5, r5, r0
   24a88:	movw	r2, #14744	; 0x3998
   24a8c:	movt	r2, #4
   24a90:	mov	r0, r6
   24a94:	str	r1, [sp, #4]
   24a98:	movw	r1, #14932	; 0x3a54
   24a9c:	movt	r1, #4
   24aa0:	bl	18208 <_start@@Base+0x3528>
   24aa4:	movw	r1, #458	; 0x1ca
   24aa8:	mov	r3, r4
   24aac:	str	r4, [sp]
   24ab0:	orr	r5, r5, r0
   24ab4:	movw	r2, #15156	; 0x3b34
   24ab8:	movt	r2, #4
   24abc:	mov	r0, r6
   24ac0:	str	r1, [sp, #4]
   24ac4:	movw	r1, #15380	; 0x3c14
   24ac8:	movt	r1, #4
   24acc:	bl	18208 <_start@@Base+0x3528>
   24ad0:	movw	r1, #469	; 0x1d5
   24ad4:	mov	r3, r4
   24ad8:	str	r4, [sp]
   24adc:	orr	r5, r5, r0
   24ae0:	movw	r2, #15644	; 0x3d1c
   24ae4:	movt	r2, #4
   24ae8:	mov	r0, r6
   24aec:	str	r1, [sp, #4]
   24af0:	movw	r1, #15972	; 0x3e64
   24af4:	movt	r1, #4
   24af8:	bl	18208 <_start@@Base+0x3528>
   24afc:	movw	ip, #474	; 0x1da
   24b00:	orr	r5, r5, r0
   24b04:	mov	r3, r4
   24b08:	mov	r2, r7
   24b0c:	mov	r0, r6
   24b10:	movw	r1, #16360	; 0x3fe8
   24b14:	movt	r1, #4
   24b18:	stm	sp, {r4, ip}
   24b1c:	bl	18208 <_start@@Base+0x3528>
   24b20:	orr	r0, r5, r0
   24b24:	add	sp, sp, #12
   24b28:	ldrd	r4, [sp]
   24b2c:	ldrd	r6, [sp, #8]
   24b30:	add	sp, sp, #16
   24b34:	pop	{pc}		; (ldr pc, [sp], #4)
   24b38:	andeq	r2, r4, r4, lsr #6

00024b3c <union_vector_tests@@Base>:
   24b3c:	strd	r4, [sp, #-20]!	; 0xffffffec
   24b40:	movw	r0, #485	; 0x1e5
   24b44:	mov	r4, #0
   24b48:	strd	r6, [sp, #8]
   24b4c:	movw	r7, #16504	; 0x4078
   24b50:	movt	r7, #4
   24b54:	ldr	r6, [pc, #272]	; 24c6c <union_vector_tests@@Base+0x130>
   24b58:	mov	r3, r4
   24b5c:	mov	r2, r7
   24b60:	str	lr, [sp, #16]
   24b64:	sub	sp, sp, #12
   24b68:	movw	r1, #16560	; 0x40b0
   24b6c:	movt	r1, #4
   24b70:	str	r4, [sp]
   24b74:	str	r0, [sp, #4]
   24b78:	mov	r0, r6
   24b7c:	bl	18208 <_start@@Base+0x3528>
   24b80:	mov	r1, #488	; 0x1e8
   24b84:	mov	r3, r4
   24b88:	str	r4, [sp]
   24b8c:	mov	r5, r0
   24b90:	movw	r2, #16624	; 0x40f0
   24b94:	movt	r2, #4
   24b98:	mov	r0, r6
   24b9c:	str	r1, [sp, #4]
   24ba0:	movw	r1, #16668	; 0x411c
   24ba4:	movt	r1, #4
   24ba8:	bl	18208 <_start@@Base+0x3528>
   24bac:	movw	r1, #491	; 0x1eb
   24bb0:	mov	r3, r4
   24bb4:	str	r4, [sp]
   24bb8:	orr	r5, r5, r0
   24bbc:	movw	r2, #16720	; 0x4150
   24bc0:	movt	r2, #4
   24bc4:	mov	r0, r6
   24bc8:	str	r1, [sp, #4]
   24bcc:	movw	r1, #16788	; 0x4194
   24bd0:	movt	r1, #4
   24bd4:	bl	18208 <_start@@Base+0x3528>
   24bd8:	movw	r1, #494	; 0x1ee
   24bdc:	mov	r3, r4
   24be0:	str	r4, [sp]
   24be4:	orr	r5, r5, r0
   24be8:	movw	r2, #16868	; 0x41e4
   24bec:	movt	r2, #4
   24bf0:	mov	r0, r6
   24bf4:	str	r1, [sp, #4]
   24bf8:	movw	r1, #16976	; 0x4250
   24bfc:	movt	r1, #4
   24c00:	bl	18208 <_start@@Base+0x3528>
   24c04:	movw	ip, #497	; 0x1f1
   24c08:	mov	r2, r7
   24c0c:	mov	r3, r4
   24c10:	orr	r5, r5, r0
   24c14:	movw	r1, #17104	; 0x42d0
   24c18:	movt	r1, #4
   24c1c:	stm	sp, {r4, ip}
   24c20:	mov	r0, r6
   24c24:	bl	18208 <_start@@Base+0x3528>
   24c28:	mov	r1, #500	; 0x1f4
   24c2c:	orr	r5, r5, r0
   24c30:	str	r4, [sp]
   24c34:	mov	r3, r4
   24c38:	mov	r0, r6
   24c3c:	movw	r2, #17168	; 0x4310
   24c40:	movt	r2, #4
   24c44:	str	r1, [sp, #4]
   24c48:	movw	r1, #17260	; 0x436c
   24c4c:	movt	r1, #4
   24c50:	bl	18208 <_start@@Base+0x3528>
   24c54:	orr	r0, r5, r0
   24c58:	add	sp, sp, #12
   24c5c:	ldrd	r4, [sp]
   24c60:	ldrd	r6, [sp, #8]
   24c64:	add	sp, sp, #16
   24c68:	pop	{pc}		; (ldr pc, [sp], #4)
   24c6c:	andeq	r2, r4, r4, lsr r3

00024c70 <flatcc_builder_default_alloc@@Base>:
   24c70:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24c74:	subs	r5, r2, #0
   24c78:	strd	r6, [sp, #8]
   24c7c:	mov	r6, r1
   24c80:	str	r8, [sp, #16]
   24c84:	str	lr, [sp, #20]
   24c88:	beq	24cc0 <flatcc_builder_default_alloc@@Base+0x50>
   24c8c:	mov	r7, r3
   24c90:	ldr	r3, [sp, #24]
   24c94:	sub	r2, r3, #1
   24c98:	cmp	r2, #6
   24c9c:	ldrls	pc, [pc, r2, lsl #2]
   24ca0:	b	24d70 <flatcc_builder_default_alloc@@Base+0x100>
   24ca4:	strdeq	r4, [r2], -r0
   24ca8:	andeq	r4, r2, r0, ror sp
   24cac:	andeq	r4, r2, r0, ror sp
   24cb0:	andeq	r4, r2, r8, ror #26
   24cb4:	andeq	r4, r2, r8, asr sp
   24cb8:	andeq	r4, r2, r0, ror sp
   24cbc:	andeq	r4, r2, r0, ror #26
   24cc0:	ldr	r0, [r1]
   24cc4:	cmp	r0, #0
   24cc8:	beq	24cdc <flatcc_builder_default_alloc@@Base+0x6c>
   24ccc:	bl	14518 <free@plt>
   24cd0:	mov	r0, r5
   24cd4:	str	r5, [r6]
   24cd8:	str	r5, [r6, #4]
   24cdc:	ldrd	r4, [sp]
   24ce0:	ldrd	r6, [sp, #8]
   24ce4:	ldr	r8, [sp, #16]
   24ce8:	add	sp, sp, #20
   24cec:	pop	{pc}		; (ldr pc, [sp], #4)
   24cf0:	mov	r4, #256	; 0x100
   24cf4:	cmp	r4, r5
   24cf8:	bcs	24d08 <flatcc_builder_default_alloc@@Base+0x98>
   24cfc:	lsl	r4, r4, #1
   24d00:	cmp	r5, r4
   24d04:	bhi	24cfc <flatcc_builder_default_alloc@@Base+0x8c>
   24d08:	ldr	r2, [r6, #4]
   24d0c:	cmp	r5, r2
   24d10:	bhi	24d20 <flatcc_builder_default_alloc@@Base+0xb0>
   24d14:	cmp	r4, r2, lsr #1
   24d18:	movls	r0, #0
   24d1c:	bls	24cdc <flatcc_builder_default_alloc@@Base+0x6c>
   24d20:	mov	r1, r4
   24d24:	ldr	r0, [r6]
   24d28:	bl	1453c <realloc@plt>
   24d2c:	subs	r5, r0, #0
   24d30:	beq	24d8c <flatcc_builder_default_alloc@@Base+0x11c>
   24d34:	cmp	r7, #0
   24d38:	beq	24d48 <flatcc_builder_default_alloc@@Base+0xd8>
   24d3c:	ldr	r0, [r6, #4]
   24d40:	cmp	r0, r4
   24d44:	bcc	24d78 <flatcc_builder_default_alloc@@Base+0x108>
   24d48:	mov	r0, #0
   24d4c:	str	r5, [r6]
   24d50:	str	r4, [r6, #4]
   24d54:	b	24cdc <flatcc_builder_default_alloc@@Base+0x6c>
   24d58:	mov	r4, r5
   24d5c:	b	24d08 <flatcc_builder_default_alloc@@Base+0x98>
   24d60:	mov	r4, #64	; 0x40
   24d64:	b	24cf4 <flatcc_builder_default_alloc@@Base+0x84>
   24d68:	mov	r4, #288	; 0x120
   24d6c:	b	24cf4 <flatcc_builder_default_alloc@@Base+0x84>
   24d70:	mov	r4, #32
   24d74:	b	24cf4 <flatcc_builder_default_alloc@@Base+0x84>
   24d78:	sub	r2, r4, r0
   24d7c:	mov	r1, #0
   24d80:	add	r0, r5, r0
   24d84:	bl	1459c <memset@plt>
   24d88:	b	24d48 <flatcc_builder_default_alloc@@Base+0xd8>
   24d8c:	mvn	r0, #0
   24d90:	b	24cdc <flatcc_builder_default_alloc@@Base+0x6c>
   24d94:	movw	r3, #21492	; 0x53f4
   24d98:	movt	r3, #4
   24d9c:	str	r4, [sp, #-8]!
   24da0:	movw	r1, #23364	; 0x5b44
   24da4:	movt	r1, #4
   24da8:	str	lr, [sp, #4]
   24dac:	movw	r0, #23556	; 0x5c04
   24db0:	movt	r0, #4
   24db4:	mov	r2, #308	; 0x134
   24db8:	bl	145f0 <__assert_fail@plt>
   24dbc:	movw	r1, #23364	; 0x5b44
   24dc0:	movt	r1, #4
   24dc4:	ldr	r3, [pc, #20]	; 24de0 <flatcc_builder_default_alloc@@Base+0x170>
   24dc8:	movw	r0, #23556	; 0x5c04
   24dcc:	movt	r0, #4
   24dd0:	str	r4, [sp, #-8]!
   24dd4:	movw	r2, #677	; 0x2a5
   24dd8:	str	lr, [sp, #4]
   24ddc:	bl	145f0 <__assert_fail@plt>
   24de0:	andeq	r5, r4, r4, lsl #8
   24de4:	movw	r1, #23364	; 0x5b44
   24de8:	movt	r1, #4
   24dec:	ldr	r3, [pc, #20]	; 24e08 <flatcc_builder_default_alloc@@Base+0x198>
   24df0:	movw	r0, #23556	; 0x5c04
   24df4:	movt	r0, #4
   24df8:	str	r4, [sp, #-8]!
   24dfc:	movw	r2, #702	; 0x2be
   24e00:	str	lr, [sp, #4]
   24e04:	bl	145f0 <__assert_fail@plt>
   24e08:	andeq	r5, r4, r0, lsl r4
   24e0c:	movw	r1, #23364	; 0x5b44
   24e10:	movt	r1, #4
   24e14:	ldr	r3, [pc, #20]	; 24e30 <flatcc_builder_default_alloc@@Base+0x1c0>
   24e18:	movw	r0, #23556	; 0x5c04
   24e1c:	movt	r0, #4
   24e20:	str	r4, [sp, #-8]!
   24e24:	movw	r2, #651	; 0x28b
   24e28:	str	lr, [sp, #4]
   24e2c:	bl	145f0 <__assert_fail@plt>
   24e30:	andeq	r5, r4, r0, lsr #8
   24e34:	movw	r1, #23364	; 0x5b44
   24e38:	movt	r1, #4
   24e3c:	ldr	r3, [pc, #20]	; 24e58 <flatcc_builder_default_alloc@@Base+0x1e8>
   24e40:	movw	r0, #23436	; 0x5b8c
   24e44:	movt	r0, #4
   24e48:	str	r4, [sp, #-8]!
   24e4c:	mov	r2, #892	; 0x37c
   24e50:	str	lr, [sp, #4]
   24e54:	bl	145f0 <__assert_fail@plt>
   24e58:	andeq	r5, r4, ip, lsr #8
   24e5c:	movw	r1, #23364	; 0x5b44
   24e60:	movt	r1, #4
   24e64:	ldr	r3, [pc, #20]	; 24e80 <flatcc_builder_default_alloc@@Base+0x210>
   24e68:	movw	r0, #23464	; 0x5ba8
   24e6c:	movt	r0, #4
   24e70:	str	r4, [sp, #-8]!
   24e74:	movw	r2, #542	; 0x21e
   24e78:	str	lr, [sp, #4]
   24e7c:	bl	145f0 <__assert_fail@plt>
   24e80:	andeq	r5, r4, r0, asr #8
   24e84:	movw	r1, #23364	; 0x5b44
   24e88:	movt	r1, #4
   24e8c:	ldr	r3, [pc, #20]	; 24ea8 <flatcc_builder_default_alloc@@Base+0x238>
   24e90:	movw	r0, #23492	; 0x5bc4
   24e94:	movt	r0, #4
   24e98:	str	r4, [sp, #-8]!
   24e9c:	movw	r2, #966	; 0x3c6
   24ea0:	str	lr, [sp, #4]
   24ea4:	bl	145f0 <__assert_fail@plt>
   24ea8:	andeq	r5, r4, r0, ror #8
   24eac:	movw	r1, #23364	; 0x5b44
   24eb0:	movt	r1, #4
   24eb4:	ldr	r3, [pc, #20]	; 24ed0 <flatcc_builder_default_alloc@@Base+0x260>
   24eb8:	movw	r0, #23536	; 0x5bf0
   24ebc:	movt	r0, #4
   24ec0:	str	r4, [sp, #-8]!
   24ec4:	movw	r2, #1926	; 0x786
   24ec8:	str	lr, [sp, #4]
   24ecc:	bl	145f0 <__assert_fail@plt>
   24ed0:	andeq	r5, r4, r0, lsl #9
   24ed4:	ldrd	r2, [r0, #156]	; 0x9c
   24ed8:	strd	r4, [sp, #-20]!	; 0xffffffec
   24edc:	mov	r5, r1
   24ee0:	mov	r4, r0
   24ee4:	strd	r6, [sp, #8]
   24ee8:	str	lr, [sp, #16]
   24eec:	sub	sp, sp, #12
   24ef0:	add	r1, r2, #1
   24ef4:	cmp	r1, r3
   24ef8:	str	r1, [r0, #156]	; 0x9c
   24efc:	ble	24fdc <flatcc_builder_default_alloc@@Base+0x36c>
   24f00:	ldr	r3, [r0, #176]	; 0xb0
   24f04:	cmp	r1, r3
   24f08:	cmpgt	r3, #0
   24f0c:	movgt	r3, #1
   24f10:	movle	r3, #0
   24f14:	bgt	24fec <flatcc_builder_default_alloc@@Base+0x37c>
   24f18:	add	r2, r2, r2, lsl #3
   24f1c:	ldr	r1, [r0, #88]	; 0x58
   24f20:	lsl	r6, r2, #2
   24f24:	add	r2, r6, #36	; 0x24
   24f28:	cmp	r2, r1
   24f2c:	bls	24f50 <flatcc_builder_default_alloc@@Base+0x2e0>
   24f30:	mov	ip, #4
   24f34:	add	r1, r0, #84	; 0x54
   24f38:	ldr	r0, [r0, #40]	; 0x28
   24f3c:	str	ip, [sp]
   24f40:	ldr	r7, [r4, #48]	; 0x30
   24f44:	blx	r7
   24f48:	cmp	r0, #0
   24f4c:	bne	24ff4 <flatcc_builder_default_alloc@@Base+0x384>
   24f50:	ldr	r2, [r4, #84]	; 0x54
   24f54:	add	r2, r2, r6
   24f58:	cmp	r2, #0
   24f5c:	str	r2, [r4, #32]
   24f60:	beq	24fec <flatcc_builder_default_alloc@@Base+0x37c>
   24f64:	ldr	r3, [r4, #88]	; 0x58
   24f68:	movw	r0, #36409	; 0x8e39
   24f6c:	movt	r0, #14563	; 0x38e3
   24f70:	ldr	r1, [r4, #176]	; 0xb0
   24f74:	umull	r0, r3, r0, r3
   24f78:	lsr	r3, r3, #3
   24f7c:	cmp	r3, r1
   24f80:	cmpgt	r1, #0
   24f84:	movgt	r3, r1
   24f88:	str	r3, [r4, #160]	; 0xa0
   24f8c:	ldr	r3, [r4, #20]
   24f90:	mov	r1, #0
   24f94:	mvn	lr, #3
   24f98:	mov	r0, r1
   24f9c:	ldr	ip, [r4, #28]
   24fa0:	ldrh	r6, [r4, #130]	; 0x82
   24fa4:	str	r3, [r2, #8]
   24fa8:	add	r3, r3, ip
   24fac:	add	r3, r3, #7
   24fb0:	bic	r3, r3, #7
   24fb4:	strh	r6, [r2, #12]
   24fb8:	strh	r5, [r4, #130]	; 0x82
   24fbc:	stm	r2, {ip, lr}
   24fc0:	str	r1, [r4, #20]
   24fc4:	str	r3, [r4, #28]
   24fc8:	add	sp, sp, #12
   24fcc:	ldrd	r4, [sp]
   24fd0:	ldrd	r6, [sp, #8]
   24fd4:	add	sp, sp, #16
   24fd8:	pop	{pc}		; (ldr pc, [sp], #4)
   24fdc:	ldr	r2, [r0, #32]
   24fe0:	add	r2, r2, #36	; 0x24
   24fe4:	str	r2, [r0, #32]
   24fe8:	b	24f8c <flatcc_builder_default_alloc@@Base+0x31c>
   24fec:	mvn	r0, #0
   24ff0:	b	24fc8 <flatcc_builder_default_alloc@@Base+0x358>
   24ff4:	bl	24d94 <flatcc_builder_default_alloc@@Base+0x124>
   24ff8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24ffc:	mov	r4, r0
   25000:	ldrh	r0, [r0, #128]	; 0x80
   25004:	strd	r6, [sp, #8]
   25008:	mov	r6, #4
   2500c:	ldr	r5, [r4, #136]	; 0x88
   25010:	str	lr, [sp, #20]
   25014:	mov	lr, r2
   25018:	str	r8, [sp, #16]
   2501c:	sub	sp, sp, #88	; 0x58
   25020:	cmp	r0, #3
   25024:	add	r0, sp, #12
   25028:	movls	r2, #4
   2502c:	str	lr, [sp, #12]
   25030:	str	r6, [sp, #16]
   25034:	strhls	r2, [r4, #128]	; 0x80
   25038:	mov	r2, #1
   2503c:	lsls	ip, lr, #2
   25040:	moveq	r7, #2
   25044:	str	r2, [sp, #20]
   25048:	str	r0, [sp, #24]
   2504c:	and	r0, r5, #3
   25050:	str	r6, [sp, #28]
   25054:	beq	25078 <flatcc_builder_default_alloc@@Base+0x408>
   25058:	mov	r8, #2
   2505c:	add	r6, ip, r6
   25060:	mov	r2, r8
   25064:	mov	r7, #3
   25068:	str	r6, [sp, #16]
   2506c:	str	r8, [sp, #20]
   25070:	str	r1, [sp, #32]
   25074:	str	ip, [sp, #36]	; 0x24
   25078:	cmp	r0, #0
   2507c:	beq	250a4 <flatcc_builder_default_alloc@@Base+0x434>
   25080:	ldr	r8, [pc, #360]	; 251f0 <flatcc_builder_default_alloc@@Base+0x580>
   25084:	add	r2, r2, #1
   25088:	add	ip, sp, #88	; 0x58
   2508c:	add	ip, ip, r2, lsl #3
   25090:	add	r6, r6, r0
   25094:	mov	r2, r7
   25098:	strd	r6, [sp, #16]
   2509c:	str	r8, [ip, #-72]	; 0xffffffb8
   250a0:	str	r0, [ip, #-68]	; 0xffffffbc
   250a4:	cmp	lr, #0
   250a8:	beq	25138 <flatcc_builder_default_alloc@@Base+0x4c8>
   250ac:	cmp	r3, #0
   250b0:	subne	r5, r1, r5
   250b4:	addne	lr, r3, lr
   250b8:	addne	r5, r5, r6
   250bc:	bne	250e8 <flatcc_builder_default_alloc@@Base+0x478>
   250c0:	b	251a0 <flatcc_builder_default_alloc@@Base+0x530>
   250c4:	sub	ip, r5, r1
   250c8:	add	r0, ip, r0
   250cc:	str	r0, [r1, #-4]
   250d0:	ldrb	r0, [r3]
   250d4:	cmp	r0, #0
   250d8:	beq	25184 <flatcc_builder_default_alloc@@Base+0x514>
   250dc:	add	r3, r3, #1
   250e0:	cmp	r3, lr
   250e4:	beq	25134 <flatcc_builder_default_alloc@@Base+0x4c4>
   250e8:	ldr	r0, [r1], #4
   250ec:	cmp	r0, #0
   250f0:	bne	250c4 <flatcc_builder_default_alloc@@Base+0x454>
   250f4:	ldrb	r0, [r3]
   250f8:	cmp	r0, #0
   250fc:	beq	250dc <flatcc_builder_default_alloc@@Base+0x46c>
   25100:	movw	r1, #23364	; 0x5b44
   25104:	movt	r1, #4
   25108:	ldr	r3, [pc, #228]	; 251f4 <flatcc_builder_default_alloc@@Base+0x584>
   2510c:	movw	r0, #23560	; 0x5c08
   25110:	movt	r0, #4
   25114:	movw	r2, #1461	; 0x5b5
   25118:	bl	145f0 <__assert_fail@plt>
   2511c:	sub	r0, ip, r1
   25120:	add	r3, r3, #1
   25124:	add	r0, r0, r5
   25128:	cmp	lr, r3
   2512c:	str	r0, [r1, #-4]
   25130:	bne	251a8 <flatcc_builder_default_alloc@@Base+0x538>
   25134:	ldr	r5, [r4, #136]	; 0x88
   25138:	sub	r7, r5, r6
   2513c:	cmp	r7, r5
   25140:	bge	251d4 <flatcc_builder_default_alloc@@Base+0x564>
   25144:	mov	r3, r7
   25148:	add	r1, sp, #24
   2514c:	str	r6, [sp]
   25150:	ldr	r0, [r4, #36]	; 0x24
   25154:	ldr	r5, [r4, #44]	; 0x2c
   25158:	blx	r5
   2515c:	cmp	r0, #0
   25160:	bne	251d0 <flatcc_builder_default_alloc@@Base+0x560>
   25164:	mov	r0, r7
   25168:	str	r7, [r4, #136]	; 0x88
   2516c:	add	sp, sp, #88	; 0x58
   25170:	ldrd	r4, [sp]
   25174:	ldrd	r6, [sp, #8]
   25178:	ldr	r8, [sp, #16]
   2517c:	add	sp, sp, #20
   25180:	pop	{pc}		; (ldr pc, [sp], #4)
   25184:	movw	r1, #23364	; 0x5b44
   25188:	movt	r1, #4
   2518c:	ldr	r3, [pc, #96]	; 251f4 <flatcc_builder_default_alloc@@Base+0x584>
   25190:	movw	r0, #23544	; 0x5bf8
   25194:	movt	r0, #4
   25198:	movw	r2, #1457	; 0x5b1
   2519c:	bl	145f0 <__assert_fail@plt>
   251a0:	sub	ip, r1, r5
   251a4:	add	ip, ip, r6
   251a8:	ldr	r5, [r1], #4
   251ac:	cmp	r5, #0
   251b0:	bne	2511c <flatcc_builder_default_alloc@@Base+0x4ac>
   251b4:	movw	r1, #23364	; 0x5b44
   251b8:	movt	r1, #4
   251bc:	ldr	r3, [pc, #48]	; 251f4 <flatcc_builder_default_alloc@@Base+0x584>
   251c0:	movw	r0, #23556	; 0x5c04
   251c4:	movt	r0, #4
   251c8:	movw	r2, #1463	; 0x5b7
   251cc:	bl	145f0 <__assert_fail@plt>
   251d0:	bl	24e0c <flatcc_builder_default_alloc@@Base+0x19c>
   251d4:	movw	r1, #23364	; 0x5b44
   251d8:	movt	r1, #4
   251dc:	ldr	r3, [pc, #20]	; 251f8 <flatcc_builder_default_alloc@@Base+0x588>
   251e0:	movw	r0, #23556	; 0x5c04
   251e4:	movt	r0, #4
   251e8:	movw	r2, #647	; 0x287
   251ec:	bl	145f0 <__assert_fail@plt>
   251f0:	muleq	r4, ip, r4
   251f4:	muleq	r4, ip, r6
   251f8:	andeq	r5, r4, r0, lsr #8

000251fc <flatcc_builder_flush_vtable_cache@@Base>:
   251fc:	ldr	r3, [r0, #116]	; 0x74
   25200:	cmp	r3, #0
   25204:	bxeq	lr
   25208:	str	r4, [sp, #-8]!
   2520c:	mov	r4, r0
   25210:	mov	r1, #0
   25214:	ldr	r0, [r0, #92]	; 0x5c
   25218:	ldr	r2, [r4, #96]	; 0x60
   2521c:	str	lr, [sp, #4]
   25220:	bl	1459c <memset@plt>
   25224:	mov	r3, #16
   25228:	mov	r2, #0
   2522c:	strd	r2, [r4, #120]	; 0x78
   25230:	ldr	r4, [sp]
   25234:	add	sp, sp, #4
   25238:	pop	{pc}		; (ldr pc, [sp], #4)

0002523c <flatcc_builder_custom_init@@Base>:
   2523c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   25240:	mov	r5, r3
   25244:	mov	r4, r0
   25248:	strd	r6, [sp, #8]
   2524c:	mov	r6, r1
   25250:	mov	r7, r2
   25254:	mov	r1, #0
   25258:	mov	r2, #232	; 0xe8
   2525c:	str	r8, [sp, #16]
   25260:	str	lr, [sp, #20]
   25264:	ldr	r8, [sp, #24]
   25268:	bl	1459c <memset@plt>
   2526c:	cmp	r6, #0
   25270:	beq	252ac <flatcc_builder_custom_init@@Base+0x70>
   25274:	cmp	r5, #0
   25278:	movw	r3, #19568	; 0x4c70
   2527c:	movt	r3, #2
   25280:	str	r7, [r4, #36]	; 0x24
   25284:	mov	r0, #0
   25288:	moveq	r5, r3
   2528c:	str	r8, [r4, #40]	; 0x28
   25290:	str	r6, [r4, #44]	; 0x2c
   25294:	str	r5, [r4, #48]	; 0x30
   25298:	ldrd	r4, [sp]
   2529c:	ldrd	r6, [sp, #8]
   252a0:	ldr	r8, [sp, #16]
   252a4:	add	sp, sp, #20
   252a8:	pop	{pc}		; (ldr pc, [sp], #4)
   252ac:	mov	r3, #1
   252b0:	movw	r6, #43436	; 0xa9ac
   252b4:	movt	r6, #2
   252b8:	add	r7, r4, #188	; 0xbc
   252bc:	str	r3, [r4, #184]	; 0xb8
   252c0:	b	25274 <flatcc_builder_custom_init@@Base+0x38>

000252c4 <flatcc_builder_init@@Base>:
   252c4:	mov	r2, #232	; 0xe8
   252c8:	mov	r1, #0
   252cc:	str	r4, [sp, #-8]!
   252d0:	str	lr, [sp, #4]
   252d4:	bl	1459c <memset@plt>
   252d8:	mov	r3, r0
   252dc:	movw	r2, #19568	; 0x4c70
   252e0:	movt	r2, #2
   252e4:	mov	r0, #1
   252e8:	ldr	r4, [sp]
   252ec:	add	ip, r3, #188	; 0xbc
   252f0:	movw	r1, #43436	; 0xa9ac
   252f4:	movt	r1, #2
   252f8:	add	sp, sp, #4
   252fc:	str	ip, [r3, #36]	; 0x24
   25300:	str	r1, [r3, #44]	; 0x2c
   25304:	str	r2, [r3, #48]	; 0x30
   25308:	str	r0, [r3, #184]	; 0xb8
   2530c:	mov	r0, #0
   25310:	pop	{pc}		; (ldr pc, [sp], #4)

00025314 <flatcc_builder_custom_reset@@Base>:
   25314:	strd	r4, [sp, #-28]!	; 0xffffffe4
   25318:	mov	r5, #0
   2531c:	mov	r4, r0
   25320:	strd	r6, [sp, #8]
   25324:	mov	r6, r0
   25328:	strd	r8, [sp, #16]
   2532c:	mov	r8, r1
   25330:	mov	r9, r2
   25334:	str	lr, [sp, #24]
   25338:	sub	sp, sp, #12
   2533c:	b	2538c <flatcc_builder_custom_reset@@Base+0x78>
   25340:	cmp	r5, #5
   25344:	cmpne	r9, #0
   25348:	beq	25370 <flatcc_builder_custom_reset@@Base+0x5c>
   2534c:	mov	r3, #1
   25350:	str	r5, [sp]
   25354:	mov	r2, r3
   25358:	ldr	r0, [r6, #40]	; 0x28
   2535c:	ldr	r7, [r6, #48]	; 0x30
   25360:	blx	r7
   25364:	cmp	r0, #0
   25368:	bne	25474 <flatcc_builder_custom_reset@@Base+0x160>
   2536c:	ldr	r0, [r4, #52]	; 0x34
   25370:	mov	r1, #0
   25374:	ldr	r2, [r4, #56]	; 0x38
   25378:	bl	1459c <memset@plt>
   2537c:	add	r5, r5, #1
   25380:	add	r4, r4, #8
   25384:	cmp	r5, #8
   25388:	beq	253c4 <flatcc_builder_custom_reset@@Base+0xb0>
   2538c:	ldr	r0, [r4, #52]	; 0x34
   25390:	add	r1, r4, #52	; 0x34
   25394:	cmp	r0, #0
   25398:	bne	25340 <flatcc_builder_custom_reset@@Base+0x2c>
   2539c:	ldr	r3, [r4, #56]	; 0x38
   253a0:	cmp	r3, #0
   253a4:	beq	2537c <flatcc_builder_custom_reset@@Base+0x68>
   253a8:	movw	r1, #23364	; 0x5b44
   253ac:	movt	r1, #4
   253b0:	ldr	r3, [pc, #196]	; 2547c <flatcc_builder_custom_reset@@Base+0x168>
   253b4:	movw	r0, #23576	; 0x5c18
   253b8:	movt	r0, #4
   253bc:	movw	r2, #434	; 0x1b2
   253c0:	bl	145f0 <__assert_fail@plt>
   253c4:	mov	r2, #0
   253c8:	ldr	r0, [r6, #52]	; 0x34
   253cc:	ldr	r3, [r6, #124]	; 0x7c
   253d0:	ldr	r1, [r6, #60]	; 0x3c
   253d4:	str	r0, [r6, #4]
   253d8:	str	r2, [r6, #120]	; 0x78
   253dc:	cmp	r3, r2
   253e0:	ldr	r2, [r6, #76]	; 0x4c
   253e4:	movne	r3, #16
   253e8:	strne	r3, [r6, #124]	; 0x7c
   253ec:	mov	r3, #0
   253f0:	cmp	r8, r3
   253f4:	str	r2, [r6]
   253f8:	str	r1, [r6, #16]
   253fc:	str	r3, [r6, #20]
   25400:	str	r3, [r6, #24]
   25404:	str	r3, [r6, #32]
   25408:	strh	r3, [r6, #128]	; 0x80
   2540c:	str	r3, [r6, #136]	; 0x88
   25410:	str	r3, [r6, #140]	; 0x8c
   25414:	str	r3, [r6, #148]	; 0x94
   25418:	str	r3, [r6, #152]	; 0x98
   2541c:	str	r3, [r6, #156]	; 0x9c
   25420:	str	r3, [r6, #160]	; 0xa0
   25424:	bne	2544c <flatcc_builder_custom_reset@@Base+0x138>
   25428:	ldr	r0, [r6, #184]	; 0xb8
   2542c:	cmp	r0, #0
   25430:	bne	25464 <flatcc_builder_custom_reset@@Base+0x150>
   25434:	add	sp, sp, #12
   25438:	ldrd	r4, [sp]
   2543c:	ldrd	r6, [sp, #8]
   25440:	ldrd	r8, [sp, #16]
   25444:	add	sp, sp, #24
   25448:	pop	{pc}		; (ldr pc, [sp], #4)
   2544c:	ldr	r0, [r6, #184]	; 0xb8
   25450:	str	r3, [r6, #172]	; 0xac
   25454:	str	r3, [r6, #176]	; 0xb0
   25458:	str	r3, [r6, #180]	; 0xb4
   2545c:	cmp	r0, #0
   25460:	beq	25434 <flatcc_builder_custom_reset@@Base+0x120>
   25464:	add	r0, r6, #188	; 0xbc
   25468:	bl	2a858 <flatcc_emitter_reset@@Base>
   2546c:	mov	r0, #0
   25470:	b	25434 <flatcc_builder_custom_reset@@Base+0x120>
   25474:	mvn	r0, #0
   25478:	b	25434 <flatcc_builder_custom_reset@@Base+0x120>
   2547c:			; <UNDEFINED> instruction: 0x000456bc

00025480 <flatcc_builder_reset@@Base>:
   25480:	mov	r2, #0
   25484:	mov	r1, r2
   25488:	b	25314 <flatcc_builder_custom_reset@@Base>

0002548c <flatcc_builder_clear@@Base>:
   2548c:	strd	r4, [sp, #-20]!	; 0xffffffec
   25490:	mov	r4, #0
   25494:	add	r5, r0, #52	; 0x34
   25498:	strd	r6, [sp, #8]
   2549c:	mov	r6, r0
   254a0:	str	lr, [sp, #16]
   254a4:	sub	sp, sp, #12
   254a8:	mov	r3, #0
   254ac:	mov	r1, r5
   254b0:	str	r4, [sp]
   254b4:	mov	r2, r3
   254b8:	add	r4, r4, #1
   254bc:	ldr	r0, [r6, #40]	; 0x28
   254c0:	add	r5, r5, #8
   254c4:	ldr	r7, [r6, #48]	; 0x30
   254c8:	blx	r7
   254cc:	cmp	r4, #8
   254d0:	bne	254a8 <flatcc_builder_clear@@Base+0x1c>
   254d4:	ldr	r3, [r6, #184]	; 0xb8
   254d8:	cmp	r3, #0
   254dc:	bne	25504 <flatcc_builder_clear@@Base+0x78>
   254e0:	mov	r0, r6
   254e4:	mov	r2, #232	; 0xe8
   254e8:	mov	r1, #0
   254ec:	add	sp, sp, #12
   254f0:	ldrd	r4, [sp]
   254f4:	ldrd	r6, [sp, #8]
   254f8:	ldr	lr, [sp, #16]
   254fc:	add	sp, sp, #20
   25500:	b	1459c <memset@plt>
   25504:	add	r0, r6, #188	; 0xbc
   25508:	bl	2a92c <flatcc_emitter_clear@@Base>
   2550c:	b	254e0 <flatcc_builder_clear@@Base+0x54>

00025510 <flatcc_builder_enter_user_frame_ptr@@Base>:
   25510:	strd	r4, [sp, #-20]!	; 0xffffffec
   25514:	add	r4, r1, #3
   25518:	mov	r5, r0
   2551c:	ldr	r3, [r0, #112]	; 0x70
   25520:	bic	r4, r4, #3
   25524:	strd	r6, [sp, #8]
   25528:	add	r4, r4, #4
   2552c:	ldr	r6, [r0, #228]	; 0xe4
   25530:	str	lr, [sp, #16]
   25534:	sub	sp, sp, #12
   25538:	add	r2, r6, r4
   2553c:	cmp	r2, r3
   25540:	bls	25568 <flatcc_builder_enter_user_frame_ptr@@Base+0x58>
   25544:	mov	ip, #7
   25548:	add	r1, r0, #108	; 0x6c
   2554c:	ldr	r0, [r0, #40]	; 0x28
   25550:	mov	r3, #0
   25554:	str	ip, [sp]
   25558:	ldr	r7, [r5, #48]	; 0x30
   2555c:	blx	r7
   25560:	cmp	r0, #0
   25564:	bne	255bc <flatcc_builder_enter_user_frame_ptr@@Base+0xac>
   25568:	ldr	r7, [r5, #108]	; 0x6c
   2556c:	adds	r3, r7, r6
   25570:	moveq	r0, r3
   25574:	beq	255a8 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   25578:	mov	r2, r4
   2557c:	mov	r0, r3
   25580:	mov	r1, #0
   25584:	bl	1459c <memset@plt>
   25588:	ldr	r2, [r5, #224]	; 0xe0
   2558c:	add	r0, r0, #4
   25590:	str	r2, [r7, r6]
   25594:	ldr	r3, [r5, #228]	; 0xe4
   25598:	add	r4, r3, r4
   2559c:	add	r3, r3, #4
   255a0:	str	r3, [r5, #224]	; 0xe0
   255a4:	str	r4, [r5, #228]	; 0xe4
   255a8:	add	sp, sp, #12
   255ac:	ldrd	r4, [sp]
   255b0:	ldrd	r6, [sp, #8]
   255b4:	add	sp, sp, #16
   255b8:	pop	{pc}		; (ldr pc, [sp], #4)
   255bc:	bl	24d94 <flatcc_builder_default_alloc@@Base+0x124>

000255c0 <flatcc_builder_enter_user_frame@@Base>:
   255c0:	strd	r4, [sp, #-20]!	; 0xffffffec
   255c4:	add	r4, r1, #3
   255c8:	mov	r5, r0
   255cc:	ldr	r3, [r0, #112]	; 0x70
   255d0:	bic	r4, r4, #3
   255d4:	strd	r6, [sp, #8]
   255d8:	add	r4, r4, #4
   255dc:	ldr	r6, [r0, #228]	; 0xe4
   255e0:	str	lr, [sp, #16]
   255e4:	sub	sp, sp, #12
   255e8:	add	r2, r6, r4
   255ec:	cmp	r2, r3
   255f0:	bls	25618 <flatcc_builder_enter_user_frame@@Base+0x58>
   255f4:	mov	ip, #7
   255f8:	add	r1, r0, #108	; 0x6c
   255fc:	ldr	r0, [r0, #40]	; 0x28
   25600:	mov	r3, #0
   25604:	str	ip, [sp]
   25608:	ldr	r7, [r5, #48]	; 0x30
   2560c:	blx	r7
   25610:	cmp	r0, #0
   25614:	bne	25660 <flatcc_builder_enter_user_frame@@Base+0xa0>
   25618:	ldr	r7, [r5, #108]	; 0x6c
   2561c:	adds	r0, r7, r6
   25620:	beq	2564c <flatcc_builder_enter_user_frame@@Base+0x8c>
   25624:	mov	r2, r4
   25628:	mov	r1, #0
   2562c:	bl	1459c <memset@plt>
   25630:	ldr	r3, [r5, #224]	; 0xe0
   25634:	str	r3, [r7, r6]
   25638:	ldr	r0, [r5, #228]	; 0xe4
   2563c:	add	r4, r0, r4
   25640:	add	r0, r0, #4
   25644:	str	r0, [r5, #224]	; 0xe0
   25648:	str	r4, [r5, #228]	; 0xe4
   2564c:	add	sp, sp, #12
   25650:	ldrd	r4, [sp]
   25654:	ldrd	r6, [sp, #8]
   25658:	add	sp, sp, #16
   2565c:	pop	{pc}		; (ldr pc, [sp], #4)
   25660:	bl	24d94 <flatcc_builder_default_alloc@@Base+0x124>

00025664 <flatcc_builder_exit_user_frame@@Base>:
   25664:	ldr	r2, [r0, #224]	; 0xe0
   25668:	cmp	r2, #0
   2566c:	beq	25694 <flatcc_builder_exit_user_frame@@Base+0x30>
   25670:	mov	r3, r0
   25674:	sub	r0, r2, #4
   25678:	ldr	r1, [r3, #108]	; 0x6c
   2567c:	str	r0, [r3, #228]	; 0xe4
   25680:	add	r2, r1, r2
   25684:	ldr	r2, [r2, #-4]
   25688:	mov	r0, r2
   2568c:	str	r2, [r3, #224]	; 0xe0
   25690:	bx	lr
   25694:	str	r4, [sp, #-8]!
   25698:	str	lr, [sp, #4]
   2569c:	bl	24e5c <flatcc_builder_default_alloc@@Base+0x1ec>

000256a0 <flatcc_builder_exit_user_frame_at@@Base>:
   256a0:	ldr	r2, [r0, #224]	; 0xe0
   256a4:	str	r4, [sp, #-8]!
   256a8:	str	lr, [sp, #4]
   256ac:	cmp	r2, r1
   256b0:	bcc	256ec <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   256b4:	cmp	r1, #0
   256b8:	mov	r3, r0
   256bc:	str	r1, [r0, #224]	; 0xe0
   256c0:	beq	25708 <flatcc_builder_exit_user_frame_at@@Base+0x68>
   256c4:	ldr	r2, [r3, #108]	; 0x6c
   256c8:	sub	r0, r1, #4
   256cc:	ldr	r4, [sp]
   256d0:	add	sp, sp, #4
   256d4:	str	r0, [r3, #228]	; 0xe4
   256d8:	add	r1, r2, r1
   256dc:	ldr	r2, [r1, #-4]
   256e0:	mov	r0, r2
   256e4:	str	r2, [r3, #224]	; 0xe0
   256e8:	pop	{pc}		; (ldr pc, [sp], #4)
   256ec:	movw	r1, #23364	; 0x5b44
   256f0:	movt	r1, #4
   256f4:	ldr	r3, [pc, #16]	; 2570c <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   256f8:	movw	r0, #23596	; 0x5c2c
   256fc:	movt	r0, #4
   25700:	movw	r2, #551	; 0x227
   25704:	bl	145f0 <__assert_fail@plt>
   25708:	bl	24e5c <flatcc_builder_default_alloc@@Base+0x1ec>
   2570c:	ldrdeq	r5, [r4], -r8

00025710 <flatcc_builder_get_current_user_frame@@Base>:
   25710:	ldr	r0, [r0, #224]	; 0xe0
   25714:	bx	lr

00025718 <flatcc_builder_get_user_frame_ptr@@Base>:
   25718:	ldr	r0, [r0, #108]	; 0x6c
   2571c:	add	r0, r0, r1
   25720:	bx	lr

00025724 <flatcc_builder_embed_buffer@@Base>:
   25724:	strd	r4, [sp, #-32]!	; 0xffffffe0
   25728:	mov	r5, r0
   2572c:	ldr	r0, [r0, #152]	; 0x98
   25730:	strd	r6, [sp, #8]
   25734:	mov	r7, r2
   25738:	mov	r6, r3
   2573c:	strd	r8, [sp, #16]
   25740:	str	sl, [sp, #24]
   25744:	str	lr, [sp, #28]
   25748:	sub	sp, sp, #88	; 0x58
   2574c:	ldrh	r4, [sp, #120]	; 0x78
   25750:	ldr	r8, [sp, #124]	; 0x7c
   25754:	cmp	r4, #4
   25758:	movcc	r4, #4
   2575c:	cmp	r1, #0
   25760:	and	r8, r8, #2
   25764:	bne	25774 <flatcc_builder_embed_buffer@@Base+0x50>
   25768:	ldrh	r1, [r5, #132]	; 0x84
   2576c:	cmp	r1, #0
   25770:	beq	25794 <flatcc_builder_embed_buffer@@Base+0x70>
   25774:	cmp	r1, r4
   25778:	movcs	r4, r1
   2577c:	cmp	r0, #0
   25780:	bne	25794 <flatcc_builder_embed_buffer@@Base+0x70>
   25784:	ldr	r9, [r5, #140]	; 0x8c
   25788:	sub	r1, r1, #1
   2578c:	ands	r1, r1, r9
   25790:	bne	258bc <flatcc_builder_embed_buffer@@Base+0x198>
   25794:	ldr	r1, [r5, #136]	; 0x88
   25798:	cmp	r8, #0
   2579c:	sub	r4, r4, #1
   257a0:	movne	ip, #4
   257a4:	moveq	ip, #0
   257a8:	mov	r2, #0
   257ac:	cmp	r0, r2
   257b0:	str	r2, [sp, #16]
   257b4:	sub	r3, r1, r6
   257b8:	str	r2, [sp, #20]
   257bc:	sub	r3, r3, ip
   257c0:	and	r4, r4, r3
   257c4:	add	r3, r6, r4
   257c8:	str	r3, [sp, #12]
   257cc:	bne	2588c <flatcc_builder_embed_buffer@@Base+0x168>
   257d0:	mov	lr, #2
   257d4:	mov	r3, #1
   257d8:	mov	r2, r0
   257dc:	cmp	r6, #0
   257e0:	beq	2580c <flatcc_builder_embed_buffer@@Base+0xe8>
   257e4:	add	r2, r2, #1
   257e8:	add	ip, sp, #88	; 0x58
   257ec:	add	ip, ip, r2, lsl #3
   257f0:	add	r0, r0, r6
   257f4:	mov	r2, r3
   257f8:	str	r0, [sp, #16]
   257fc:	str	r7, [ip, #-72]	; 0xffffffb8
   25800:	str	r6, [ip, #-68]	; 0xffffffbc
   25804:	str	r3, [sp, #20]
   25808:	mov	r3, lr
   2580c:	cmp	r4, #0
   25810:	beq	2583c <flatcc_builder_embed_buffer@@Base+0x118>
   25814:	ldr	lr, [pc, #312]	; 25954 <flatcc_builder_embed_buffer@@Base+0x230>
   25818:	add	r2, r2, #1
   2581c:	add	ip, sp, #88	; 0x58
   25820:	add	ip, ip, r2, lsl #3
   25824:	add	r0, r0, r4
   25828:	mov	r2, r3
   2582c:	str	r0, [sp, #16]
   25830:	str	lr, [ip, #-72]	; 0xffffffb8
   25834:	str	r4, [ip, #-68]	; 0xffffffbc
   25838:	str	r3, [sp, #20]
   2583c:	sub	r4, r1, r0
   25840:	cmp	r1, r4
   25844:	ble	25914 <flatcc_builder_embed_buffer@@Base+0x1f0>
   25848:	mov	r3, r4
   2584c:	add	r1, sp, #24
   25850:	str	r0, [sp]
   25854:	ldr	r0, [r5, #36]	; 0x24
   25858:	ldr	r6, [r5, #44]	; 0x2c
   2585c:	blx	r6
   25860:	cmp	r0, #0
   25864:	bne	25910 <flatcc_builder_embed_buffer@@Base+0x1ec>
   25868:	mov	r0, r4
   2586c:	str	r4, [r5, #136]	; 0x88
   25870:	add	sp, sp, #88	; 0x58
   25874:	ldrd	r4, [sp]
   25878:	ldrd	r6, [sp, #8]
   2587c:	ldrd	r8, [sp, #16]
   25880:	ldr	sl, [sp, #24]
   25884:	add	sp, sp, #28
   25888:	pop	{pc}		; (ldr pc, [sp], #4)
   2588c:	mov	ip, #4
   25890:	mov	r3, #1
   25894:	add	r8, sp, #12
   25898:	mov	r2, r3
   2589c:	mov	r0, ip
   258a0:	mov	lr, #3
   258a4:	str	ip, [sp, #16]
   258a8:	str	r3, [sp, #20]
   258ac:	mov	r3, #2
   258b0:	str	r8, [sp, #24]
   258b4:	str	ip, [sp, #28]
   258b8:	b	257dc <flatcc_builder_embed_buffer@@Base+0xb8>
   258bc:	ldr	r3, [pc, #144]	; 25954 <flatcc_builder_embed_buffer@@Base+0x230>
   258c0:	add	r0, r9, r1
   258c4:	mov	r2, #1
   258c8:	cmp	r9, r0
   258cc:	str	r1, [sp, #16]
   258d0:	str	r0, [r5, #140]	; 0x8c
   258d4:	strd	r2, [sp, #20]
   258d8:	str	r1, [sp, #28]
   258dc:	bgt	25930 <flatcc_builder_embed_buffer@@Base+0x20c>
   258e0:	mov	r3, r9
   258e4:	str	r1, [sp]
   258e8:	add	r1, sp, #24
   258ec:	ldr	r0, [r5, #36]	; 0x24
   258f0:	ldr	sl, [r5, #44]	; 0x2c
   258f4:	blx	sl
   258f8:	cmp	r0, #0
   258fc:	bne	25950 <flatcc_builder_embed_buffer@@Base+0x22c>
   25900:	cmn	r9, #1
   25904:	beq	2594c <flatcc_builder_embed_buffer@@Base+0x228>
   25908:	ldr	r0, [r5, #152]	; 0x98
   2590c:	b	25794 <flatcc_builder_embed_buffer@@Base+0x70>
   25910:	bl	24e0c <flatcc_builder_default_alloc@@Base+0x19c>
   25914:	movw	r1, #23364	; 0x5b44
   25918:	movt	r1, #4
   2591c:	ldr	r3, [pc, #52]	; 25958 <flatcc_builder_embed_buffer@@Base+0x234>
   25920:	movw	r0, #23556	; 0x5c04
   25924:	movt	r0, #4
   25928:	movw	r2, #647	; 0x287
   2592c:	bl	145f0 <__assert_fail@plt>
   25930:	movw	r1, #23364	; 0x5b44
   25934:	movt	r1, #4
   25938:	movw	r0, #23556	; 0x5c04
   2593c:	movt	r0, #4
   25940:	sub	r3, r3, #152	; 0x98
   25944:	movw	r2, #673	; 0x2a1
   25948:	bl	145f0 <__assert_fail@plt>
   2594c:	bl	24de4 <flatcc_builder_default_alloc@@Base+0x174>
   25950:	bl	24dbc <flatcc_builder_default_alloc@@Base+0x14c>
   25954:	muleq	r4, ip, r4
   25958:	andeq	r5, r4, r0, lsr #8

0002595c <flatcc_builder_create_buffer@@Base>:
   2595c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25960:	mov	ip, #0
   25964:	mov	r5, r0
   25968:	strd	r6, [sp, #8]
   2596c:	mov	r7, r3
   25970:	strd	r8, [sp, #16]
   25974:	mov	r9, r1
   25978:	strd	sl, [sp, #24]
   2597c:	str	lr, [sp, #32]
   25980:	sub	sp, sp, #100	; 0x64
   25984:	ldrh	r4, [sp, #136]	; 0x88
   25988:	str	ip, [sp, #20]
   2598c:	ldr	r6, [sp, #140]	; 0x8c
   25990:	cmp	r4, #4
   25994:	movcc	r4, #4
   25998:	cmp	r2, #0
   2599c:	and	r8, r6, #1
   259a0:	bne	259b0 <flatcc_builder_create_buffer@@Base+0x54>
   259a4:	ldrh	r2, [r0, #132]	; 0x84
   259a8:	cmp	r2, ip
   259ac:	beq	259d0 <flatcc_builder_create_buffer@@Base+0x74>
   259b0:	cmp	r2, r4
   259b4:	movcs	r4, r2
   259b8:	cmp	r8, #0
   259bc:	bne	259d0 <flatcc_builder_create_buffer@@Base+0x74>
   259c0:	ldr	sl, [r5, #140]	; 0x8c
   259c4:	sub	r2, r2, #1
   259c8:	ands	r1, r2, sl
   259cc:	bne	25b64 <flatcc_builder_create_buffer@@Base+0x208>
   259d0:	ldrh	r3, [r5, #128]	; 0x80
   259d4:	ldr	r0, [r5, #136]	; 0x88
   259d8:	cmp	r3, r4
   259dc:	strhcc	r4, [r5, #128]	; 0x80
   259e0:	cmp	r9, #0
   259e4:	sub	r4, r4, #1
   259e8:	ldrne	r3, [r9]
   259ec:	ldreq	r1, [sp, #20]
   259f0:	movne	r1, r3
   259f4:	strne	r3, [sp, #20]
   259f8:	sub	r3, r0, #4
   259fc:	cmp	r1, #0
   25a00:	movne	r1, #4
   25a04:	tst	r6, #2
   25a08:	movne	r2, #4
   25a0c:	moveq	r2, #0
   25a10:	sub	r3, r3, r1
   25a14:	ands	r6, r6, #3
   25a18:	sub	r3, r3, r2
   25a1c:	and	r4, r4, r3
   25a20:	bne	25b3c <flatcc_builder_create_buffer@@Base+0x1e0>
   25a24:	mov	r3, r6
   25a28:	mov	r9, #3
   25a2c:	mov	lr, #2
   25a30:	mov	r2, #1
   25a34:	mov	ip, #4
   25a38:	add	fp, sp, #96	; 0x60
   25a3c:	add	r3, r3, #1
   25a40:	str	ip, [sp, #24]
   25a44:	add	r3, fp, r3, lsl #3
   25a48:	add	sl, sp, #12
   25a4c:	mov	fp, #4
   25a50:	cmp	r1, #0
   25a54:	strd	sl, [r3, #-72]	; 0xffffffb8
   25a58:	str	r2, [sp, #28]
   25a5c:	beq	25a8c <flatcc_builder_create_buffer@@Base+0x130>
   25a60:	add	r2, r2, #1
   25a64:	add	r3, sp, #96	; 0x60
   25a68:	add	r3, r3, r2, lsl #3
   25a6c:	add	ip, ip, r1
   25a70:	add	sl, sp, #20
   25a74:	mov	r2, lr
   25a78:	str	ip, [sp, #24]
   25a7c:	str	sl, [r3, #-72]	; 0xffffffb8
   25a80:	str	r1, [r3, #-68]	; 0xffffffbc
   25a84:	str	lr, [sp, #28]
   25a88:	mov	lr, r9
   25a8c:	cmp	r4, #0
   25a90:	beq	25abc <flatcc_builder_create_buffer@@Base+0x160>
   25a94:	ldr	r1, [pc, #372]	; 25c10 <flatcc_builder_create_buffer@@Base+0x2b4>
   25a98:	add	r2, r2, #1
   25a9c:	add	r3, sp, #96	; 0x60
   25aa0:	add	r3, r3, r2, lsl #3
   25aa4:	add	ip, ip, r4
   25aa8:	mov	r2, lr
   25aac:	str	ip, [sp, #24]
   25ab0:	str	r1, [r3, #-72]	; 0xffffffb8
   25ab4:	str	r4, [r3, #-68]	; 0xffffffbc
   25ab8:	str	lr, [sp, #28]
   25abc:	sub	r4, r0, ip
   25ac0:	cmp	r6, #0
   25ac4:	mov	r1, r4
   25ac8:	addne	r1, r4, #4
   25acc:	cmp	r8, #0
   25ad0:	sub	r7, r7, r1
   25ad4:	ldrne	r3, [r5, #144]	; 0x90
   25ad8:	str	r7, [sp, #12]
   25adc:	ldreq	r3, [r5, #140]	; 0x8c
   25ae0:	cmp	r0, r4
   25ae4:	sub	r3, r3, r1
   25ae8:	str	r3, [sp, #16]
   25aec:	ble	25bb4 <flatcc_builder_create_buffer@@Base+0x258>
   25af0:	mov	r3, r4
   25af4:	add	r1, sp, #32
   25af8:	str	ip, [sp]
   25afc:	ldr	r0, [r5, #36]	; 0x24
   25b00:	ldr	r6, [r5, #44]	; 0x2c
   25b04:	blx	r6
   25b08:	cmp	r0, #0
   25b0c:	bne	25bd0 <flatcc_builder_create_buffer@@Base+0x274>
   25b10:	cmp	r4, #0
   25b14:	str	r4, [r5, #136]	; 0x88
   25b18:	beq	25bd4 <flatcc_builder_create_buffer@@Base+0x278>
   25b1c:	mov	r0, r4
   25b20:	add	sp, sp, #100	; 0x64
   25b24:	ldrd	r4, [sp]
   25b28:	ldrd	r6, [sp, #8]
   25b2c:	ldrd	r8, [sp, #16]
   25b30:	ldrd	sl, [sp, #24]
   25b34:	add	sp, sp, #32
   25b38:	pop	{pc}		; (ldr pc, [sp], #4)
   25b3c:	mov	ip, #4
   25b40:	add	r3, sp, #16
   25b44:	mov	r9, ip
   25b48:	mov	lr, #3
   25b4c:	mov	r2, #2
   25b50:	str	r3, [sp, #32]
   25b54:	mov	r3, #1
   25b58:	str	ip, [sp, #36]	; 0x24
   25b5c:	mov	ip, #8
   25b60:	b	25a38 <flatcc_builder_create_buffer@@Base+0xdc>
   25b64:	ldr	r3, [pc, #164]	; 25c10 <flatcc_builder_create_buffer@@Base+0x2b4>
   25b68:	add	r0, sl, r1
   25b6c:	mov	r2, #1
   25b70:	cmp	sl, r0
   25b74:	str	r1, [sp, #24]
   25b78:	str	r0, [r5, #140]	; 0x8c
   25b7c:	strd	r2, [sp, #28]
   25b80:	str	r1, [sp, #36]	; 0x24
   25b84:	bgt	25bf4 <flatcc_builder_create_buffer@@Base+0x298>
   25b88:	mov	r3, sl
   25b8c:	str	r1, [sp]
   25b90:	add	r1, sp, #32
   25b94:	ldr	r0, [r5, #36]	; 0x24
   25b98:	ldr	fp, [r5, #44]	; 0x2c
   25b9c:	blx	fp
   25ba0:	cmp	r0, #0
   25ba4:	bne	25bf0 <flatcc_builder_create_buffer@@Base+0x294>
   25ba8:	cmn	sl, #1
   25bac:	bne	259d0 <flatcc_builder_create_buffer@@Base+0x74>
   25bb0:	bl	24de4 <flatcc_builder_default_alloc@@Base+0x174>
   25bb4:	movw	r1, #23364	; 0x5b44
   25bb8:	movt	r1, #4
   25bbc:	ldr	r3, [pc, #80]	; 25c14 <flatcc_builder_create_buffer@@Base+0x2b8>
   25bc0:	movw	r0, #23556	; 0x5c04
   25bc4:	movt	r0, #4
   25bc8:	movw	r2, #647	; 0x287
   25bcc:	bl	145f0 <__assert_fail@plt>
   25bd0:	bl	24e0c <flatcc_builder_default_alloc@@Base+0x19c>
   25bd4:	movw	r1, #23364	; 0x5b44
   25bd8:	movt	r1, #4
   25bdc:	ldr	r3, [pc, #52]	; 25c18 <flatcc_builder_create_buffer@@Base+0x2bc>
   25be0:	movw	r0, #23556	; 0x5c04
   25be4:	movt	r0, #4
   25be8:	mov	r2, #772	; 0x304
   25bec:	bl	145f0 <__assert_fail@plt>
   25bf0:	bl	24dbc <flatcc_builder_default_alloc@@Base+0x14c>
   25bf4:	movw	r1, #23364	; 0x5b44
   25bf8:	movt	r1, #4
   25bfc:	movw	r0, #23556	; 0x5c04
   25c00:	movt	r0, #4
   25c04:	sub	r3, r3, #152	; 0x98
   25c08:	movw	r2, #673	; 0x2a1
   25c0c:	bl	145f0 <__assert_fail@plt>
   25c10:	muleq	r4, ip, r4
   25c14:	andeq	r5, r4, r0, lsr #8
   25c18:	strdeq	r5, [r4], -ip

00025c1c <flatcc_builder_create_struct@@Base>:
   25c1c:	cmp	r3, #0
   25c20:	strd	r4, [sp, #-16]!
   25c24:	str	r6, [sp, #8]
   25c28:	str	lr, [sp, #12]
   25c2c:	sub	sp, sp, #80	; 0x50
   25c30:	beq	25d34 <flatcc_builder_create_struct@@Base+0x118>
   25c34:	mov	r4, r0
   25c38:	mov	r0, r2
   25c3c:	ldrh	r2, [r4, #128]	; 0x80
   25c40:	ldr	ip, [r4, #136]	; 0x88
   25c44:	cmp	r2, r3
   25c48:	mov	r2, #0
   25c4c:	strhcc	r3, [r4, #128]	; 0x80
   25c50:	sub	r5, ip, r0
   25c54:	sub	r3, r3, #1
   25c58:	cmp	r0, r2
   25c5c:	and	r3, r3, r5
   25c60:	str	r2, [sp, #8]
   25c64:	str	r2, [sp, #12]
   25c68:	bne	25ce8 <flatcc_builder_create_struct@@Base+0xcc>
   25c6c:	cmp	r3, #0
   25c70:	movne	r1, r2
   25c74:	movne	r0, r3
   25c78:	movne	r2, #1
   25c7c:	beq	25d14 <flatcc_builder_create_struct@@Base+0xf8>
   25c80:	ldr	lr, [pc, #200]	; 25d50 <flatcc_builder_create_struct@@Base+0x134>
   25c84:	add	r5, sp, #80	; 0x50
   25c88:	add	r1, r1, #1
   25c8c:	add	r1, r5, r1, lsl #3
   25c90:	sub	r5, ip, r0
   25c94:	str	r0, [sp, #8]
   25c98:	str	r2, [sp, #12]
   25c9c:	str	lr, [r1, #-72]	; 0xffffffb8
   25ca0:	str	r3, [r1, #-68]	; 0xffffffbc
   25ca4:	cmp	ip, r5
   25ca8:	ble	25d14 <flatcc_builder_create_struct@@Base+0xf8>
   25cac:	mov	r3, r5
   25cb0:	add	r1, sp, #16
   25cb4:	str	r0, [sp]
   25cb8:	ldr	r0, [r4, #36]	; 0x24
   25cbc:	ldr	r6, [r4, #44]	; 0x2c
   25cc0:	blx	r6
   25cc4:	cmp	r0, #0
   25cc8:	bne	25d30 <flatcc_builder_create_struct@@Base+0x114>
   25ccc:	mov	r0, r5
   25cd0:	str	r5, [r4, #136]	; 0x88
   25cd4:	add	sp, sp, #80	; 0x50
   25cd8:	ldrd	r4, [sp]
   25cdc:	ldr	r6, [sp, #8]
   25ce0:	add	sp, sp, #12
   25ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   25ce8:	mov	r2, #1
   25cec:	cmp	r3, #0
   25cf0:	str	r0, [sp, #8]
   25cf4:	str	r2, [sp, #12]
   25cf8:	str	r1, [sp, #16]
   25cfc:	movne	r1, r2
   25d00:	movne	r2, #2
   25d04:	str	r0, [sp, #20]
   25d08:	addne	r0, r0, r3
   25d0c:	beq	25ca4 <flatcc_builder_create_struct@@Base+0x88>
   25d10:	b	25c80 <flatcc_builder_create_struct@@Base+0x64>
   25d14:	movw	r1, #23364	; 0x5b44
   25d18:	movt	r1, #4
   25d1c:	ldr	r3, [pc, #48]	; 25d54 <flatcc_builder_create_struct@@Base+0x138>
   25d20:	movw	r0, #23556	; 0x5c04
   25d24:	movt	r0, #4
   25d28:	movw	r2, #647	; 0x287
   25d2c:	bl	145f0 <__assert_fail@plt>
   25d30:	bl	24e0c <flatcc_builder_default_alloc@@Base+0x19c>
   25d34:	movw	r1, #23364	; 0x5b44
   25d38:	movt	r1, #4
   25d3c:	ldr	r3, [pc, #20]	; 25d58 <flatcc_builder_create_struct@@Base+0x13c>
   25d40:	movw	r0, #23628	; 0x5c4c
   25d44:	movt	r0, #4
   25d48:	movw	r2, #783	; 0x30f
   25d4c:	bl	145f0 <__assert_fail@plt>
   25d50:	muleq	r4, ip, r4
   25d54:	andeq	r5, r4, r0, lsr #8
   25d58:	andeq	r5, r4, ip, lsl r7

00025d5c <flatcc_builder_start_buffer@@Base>:
   25d5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25d60:	mov	r5, r1
   25d64:	mov	r4, r0
   25d68:	ldr	r1, [r0, #156]	; 0x9c
   25d6c:	strd	r6, [sp, #8]
   25d70:	mov	r6, r3
   25d74:	mov	r7, r2
   25d78:	ldr	r3, [r0, #160]	; 0xa0
   25d7c:	strd	r8, [sp, #16]
   25d80:	ldrh	r8, [r0, #128]	; 0x80
   25d84:	add	r2, r1, #1
   25d88:	strd	sl, [sp, #24]
   25d8c:	str	lr, [sp, #32]
   25d90:	sub	sp, sp, #12
   25d94:	cmp	r2, r3
   25d98:	str	r2, [r0, #156]	; 0x9c
   25d9c:	ble	25ee8 <flatcc_builder_start_buffer@@Base+0x18c>
   25da0:	ldr	r3, [r0, #176]	; 0xb0
   25da4:	cmp	r3, #0
   25da8:	cmpgt	r2, r3
   25dac:	movgt	r3, #1
   25db0:	movle	r3, #0
   25db4:	bgt	25ef8 <flatcc_builder_start_buffer@@Base+0x19c>
   25db8:	add	r1, r1, r1, lsl #3
   25dbc:	ldr	r0, [r0, #88]	; 0x58
   25dc0:	lsl	r9, r1, #2
   25dc4:	add	r2, r9, #36	; 0x24
   25dc8:	cmp	r2, r0
   25dcc:	bls	25df0 <flatcc_builder_start_buffer@@Base+0x94>
   25dd0:	mov	ip, #4
   25dd4:	add	r1, r4, #84	; 0x54
   25dd8:	ldr	r0, [r4, #40]	; 0x28
   25ddc:	str	ip, [sp]
   25de0:	ldr	sl, [r4, #48]	; 0x30
   25de4:	blx	sl
   25de8:	cmp	r0, #0
   25dec:	bne	25f00 <flatcc_builder_start_buffer@@Base+0x1a4>
   25df0:	ldr	r3, [r4, #84]	; 0x54
   25df4:	add	r3, r3, r9
   25df8:	cmp	r3, #0
   25dfc:	str	r3, [r4, #32]
   25e00:	beq	25ef8 <flatcc_builder_start_buffer@@Base+0x19c>
   25e04:	ldr	r2, [r4, #88]	; 0x58
   25e08:	movw	r0, #36409	; 0x8e39
   25e0c:	movt	r0, #14563	; 0x38e3
   25e10:	ldr	r1, [r4, #176]	; 0xb0
   25e14:	umull	r0, r2, r0, r2
   25e18:	lsr	r2, r2, #3
   25e1c:	cmp	r1, #0
   25e20:	cmpgt	r2, r1
   25e24:	movgt	r2, r1
   25e28:	str	r2, [r4, #160]	; 0xa0
   25e2c:	ldr	sl, [pc, #208]	; 25f04 <flatcc_builder_start_buffer@@Base+0x1a8>
   25e30:	mov	r0, #0
   25e34:	mvn	lr, #3
   25e38:	cmp	r5, r0
   25e3c:	ldr	r2, [r4, #20]
   25e40:	ldr	ip, [r4, #28]
   25e44:	moveq	r5, sl
   25e48:	ldrh	r9, [r4, #130]	; 0x82
   25e4c:	ldrh	fp, [r4, #132]	; 0x84
   25e50:	ldr	r1, [r4, #148]	; 0x94
   25e54:	ldr	sl, [r4, #152]	; 0x98
   25e58:	str	r2, [r3, #8]
   25e5c:	add	r2, r2, ip
   25e60:	add	r2, r2, #7
   25e64:	strh	r9, [r3, #12]
   25e68:	bic	r2, r2, #7
   25e6c:	strh	r8, [r4, #130]	; 0x82
   25e70:	ldrh	r8, [r4, #164]	; 0xa4
   25e74:	ldr	r9, [r4, #136]	; 0x88
   25e78:	stm	r3, {ip, lr}
   25e7c:	mov	ip, #1
   25e80:	str	r0, [r4, #20]
   25e84:	str	r2, [r4, #28]
   25e88:	add	r2, r1, ip
   25e8c:	strh	ip, [r4, #128]	; 0x80
   25e90:	ldr	lr, [r4, #144]	; 0x90
   25e94:	strh	fp, [r3, #34]	; 0x22
   25e98:	strh	r7, [r4, #132]	; 0x84
   25e9c:	ldr	r7, [r4, #168]	; 0xa8
   25ea0:	strh	r8, [r3, #32]
   25ea4:	strh	r6, [r4, #164]	; 0xa4
   25ea8:	str	lr, [r3, #20]
   25eac:	str	sl, [r3, #28]
   25eb0:	str	r9, [r4, #144]	; 0x90
   25eb4:	str	r2, [r4, #148]	; 0x94
   25eb8:	str	r1, [r4, #152]	; 0x98
   25ebc:	str	r7, [r3, #16]
   25ec0:	ldr	r2, [r5]
   25ec4:	str	r2, [r4, #168]	; 0xa8
   25ec8:	strh	ip, [r3, #14]
   25ecc:	add	sp, sp, #12
   25ed0:	ldrd	r4, [sp]
   25ed4:	ldrd	r6, [sp, #8]
   25ed8:	ldrd	r8, [sp, #16]
   25edc:	ldrd	sl, [sp, #24]
   25ee0:	add	sp, sp, #32
   25ee4:	pop	{pc}		; (ldr pc, [sp], #4)
   25ee8:	ldr	r3, [r0, #32]
   25eec:	add	r3, r3, #36	; 0x24
   25ef0:	str	r3, [r0, #32]
   25ef4:	b	25e2c <flatcc_builder_start_buffer@@Base+0xd0>
   25ef8:	mvn	r0, #0
   25efc:	b	25ecc <flatcc_builder_start_buffer@@Base+0x170>
   25f00:	bl	24d94 <flatcc_builder_default_alloc@@Base+0x124>
   25f04:	muleq	r4, ip, r4

00025f08 <flatcc_builder_end_buffer@@Base>:
   25f08:	ldr	ip, [r0, #32]
   25f0c:	strd	r4, [sp, #-16]!
   25f10:	mov	r4, r0
   25f14:	ldrh	r2, [r0, #164]	; 0xa4
   25f18:	ldr	r0, [r0, #152]	; 0x98
   25f1c:	ldrh	ip, [ip, #14]
   25f20:	and	r2, r2, #2
   25f24:	str	r6, [sp, #8]
   25f28:	str	lr, [sp, #12]
   25f2c:	sub	sp, sp, #8
   25f30:	cmp	r0, #0
   25f34:	moveq	r0, r2
   25f38:	orrne	r0, r2, #1
   25f3c:	cmp	ip, #1
   25f40:	bne	26028 <flatcc_builder_end_buffer@@Base+0x120>
   25f44:	ldrh	r2, [r4, #132]	; 0x84
   25f48:	mov	r3, r1
   25f4c:	add	r1, r4, #168	; 0xa8
   25f50:	ldrh	ip, [r4, #128]	; 0x80
   25f54:	cmp	r2, ip
   25f58:	movhi	ip, r2
   25f5c:	strhhi	r2, [r4, #128]	; 0x80
   25f60:	str	ip, [sp]
   25f64:	str	r0, [sp, #4]
   25f68:	mov	r0, r4
   25f6c:	bl	2595c <flatcc_builder_create_buffer@@Base>
   25f70:	subs	r5, r0, #0
   25f74:	beq	26010 <flatcc_builder_end_buffer@@Base+0x108>
   25f78:	mov	r1, #0
   25f7c:	ldr	r0, [r4, #16]
   25f80:	ldr	r3, [r4, #32]
   25f84:	ldr	r2, [r4, #20]
   25f88:	ldrh	lr, [r3, #32]
   25f8c:	ldr	ip, [r3, #16]
   25f90:	ldr	r6, [r3, #20]
   25f94:	ldr	r3, [r3, #28]
   25f98:	str	r6, [r4, #144]	; 0x90
   25f9c:	strh	lr, [r4, #164]	; 0xa4
   25fa0:	str	r3, [r4, #152]	; 0x98
   25fa4:	str	ip, [r4, #168]	; 0xa8
   25fa8:	bl	1459c <memset@plt>
   25fac:	ldr	r3, [r4, #32]
   25fb0:	ldr	r0, [r4, #60]	; 0x3c
   25fb4:	ldr	r2, [r4, #64]	; 0x40
   25fb8:	ldr	ip, [r3]
   25fbc:	ldmib	r3, {r1, lr}
   25fc0:	add	r0, r0, ip
   25fc4:	sub	r2, r2, ip
   25fc8:	str	r0, [r4, #16]
   25fcc:	cmp	r2, r1
   25fd0:	ldrh	r0, [r4, #128]	; 0x80
   25fd4:	movcs	r2, r1
   25fd8:	str	lr, [r4, #20]
   25fdc:	str	ip, [r4, #28]
   25fe0:	ldrh	ip, [r4, #130]	; 0x82
   25fe4:	str	r2, [r4, #24]
   25fe8:	ldr	r2, [r4, #156]	; 0x9c
   25fec:	str	r1, [r3, #4]
   25ff0:	cmp	r0, ip
   25ff4:	sub	r0, r3, #36	; 0x24
   25ff8:	strhcc	ip, [r4, #128]	; 0x80
   25ffc:	ldrh	r1, [r3, #12]
   26000:	sub	r3, r2, #1
   26004:	str	r0, [r4, #32]
   26008:	strh	r1, [r4, #130]	; 0x82
   2600c:	str	r3, [r4, #156]	; 0x9c
   26010:	mov	r0, r5
   26014:	add	sp, sp, #8
   26018:	ldrd	r4, [sp]
   2601c:	ldr	r6, [sp, #8]
   26020:	add	sp, sp, #12
   26024:	pop	{pc}		; (ldr pc, [sp], #4)
   26028:	movw	r1, #23364	; 0x5b44
   2602c:	movt	r1, #4
   26030:	ldr	r3, [pc, #12]	; 26044 <flatcc_builder_end_buffer@@Base+0x13c>
   26034:	movw	r0, #23640	; 0x5c58
   26038:	movt	r0, #4
   2603c:	movw	r2, #838	; 0x346
   26040:	bl	145f0 <__assert_fail@plt>
   26044:	andeq	r5, r4, ip, lsr r7

00026048 <flatcc_builder_start_struct@@Base>:
   26048:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2604c:	mov	r5, r1
   26050:	mov	r4, r0
   26054:	ldr	r1, [r0, #156]	; 0x9c
   26058:	ldr	r3, [r0, #160]	; 0xa0
   2605c:	strd	r6, [sp, #8]
   26060:	mov	r6, r2
   26064:	str	r8, [sp, #16]
   26068:	add	r2, r1, #1
   2606c:	str	lr, [sp, #20]
   26070:	sub	sp, sp, #8
   26074:	cmp	r2, r3
   26078:	str	r2, [r0, #156]	; 0x9c
   2607c:	ble	2619c <flatcc_builder_start_struct@@Base+0x154>
   26080:	ldr	r3, [r0, #176]	; 0xb0
   26084:	cmp	r3, #0
   26088:	cmpgt	r2, r3
   2608c:	movgt	r3, #1
   26090:	movle	r3, #0
   26094:	bgt	26208 <flatcc_builder_start_struct@@Base+0x1c0>
   26098:	add	r1, r1, r1, lsl #3
   2609c:	ldr	r0, [r0, #88]	; 0x58
   260a0:	lsl	r7, r1, #2
   260a4:	add	r2, r7, #36	; 0x24
   260a8:	cmp	r2, r0
   260ac:	bls	260d0 <flatcc_builder_start_struct@@Base+0x88>
   260b0:	mov	ip, #4
   260b4:	add	r1, r4, #84	; 0x54
   260b8:	ldr	r0, [r4, #40]	; 0x28
   260bc:	str	ip, [sp]
   260c0:	ldr	r8, [r4, #48]	; 0x30
   260c4:	blx	r8
   260c8:	cmp	r0, #0
   260cc:	bne	26210 <flatcc_builder_start_struct@@Base+0x1c8>
   260d0:	ldr	r1, [r4, #84]	; 0x54
   260d4:	add	r1, r1, r7
   260d8:	cmp	r1, #0
   260dc:	str	r1, [r4, #32]
   260e0:	beq	26208 <flatcc_builder_start_struct@@Base+0x1c0>
   260e4:	ldr	r3, [r4, #88]	; 0x58
   260e8:	movw	r0, #36409	; 0x8e39
   260ec:	movt	r0, #14563	; 0x38e3
   260f0:	ldr	r2, [r4, #176]	; 0xb0
   260f4:	umull	r0, r3, r0, r3
   260f8:	lsr	r3, r3, #3
   260fc:	cmp	r2, #0
   26100:	cmpgt	r3, r2
   26104:	movgt	r3, r2
   26108:	str	r3, [r4, #160]	; 0xa0
   2610c:	ldr	r3, [r4, #20]
   26110:	mvn	lr, #3
   26114:	ldr	ip, [r4, #28]
   26118:	ldrh	r7, [r4, #130]	; 0x82
   2611c:	ldr	r2, [r4, #64]	; 0x40
   26120:	ldr	r0, [r4, #60]	; 0x3c
   26124:	str	r3, [r1, #8]
   26128:	add	r3, r3, ip
   2612c:	add	r3, r3, #7
   26130:	strh	r7, [r1, #12]
   26134:	mov	r7, #0
   26138:	bic	r3, r3, #7
   2613c:	strh	r6, [r4, #130]	; 0x82
   26140:	mvn	r6, #3
   26144:	sub	r2, r2, r3
   26148:	stm	r1, {ip, lr}
   2614c:	mov	ip, #2
   26150:	cmp	r2, lr
   26154:	add	r0, r0, r3
   26158:	str	r7, [r4, #20]
   2615c:	movhi	r2, lr
   26160:	str	r3, [r4, #28]
   26164:	strh	ip, [r1, #14]
   26168:	strls	r2, [r4, #24]
   2616c:	strhi	lr, [r4, #24]
   26170:	cmp	r5, r2
   26174:	str	r0, [r4, #16]
   26178:	str	r6, [r1, #4]
   2617c:	str	r5, [r4, #20]
   26180:	bcs	261ac <flatcc_builder_start_struct@@Base+0x164>
   26184:	add	sp, sp, #8
   26188:	ldrd	r4, [sp]
   2618c:	ldrd	r6, [sp, #8]
   26190:	ldr	r8, [sp, #16]
   26194:	add	sp, sp, #20
   26198:	pop	{pc}		; (ldr pc, [sp], #4)
   2619c:	ldr	r1, [r0, #32]
   261a0:	add	r1, r1, #36	; 0x24
   261a4:	str	r1, [r0, #32]
   261a8:	b	2610c <flatcc_builder_start_struct@@Base+0xc4>
   261ac:	mov	ip, #1
   261b0:	add	r1, r4, #60	; 0x3c
   261b4:	ldr	r0, [r4, #40]	; 0x28
   261b8:	add	r2, r5, ip
   261bc:	add	r2, r2, r3
   261c0:	mov	r3, ip
   261c4:	str	ip, [sp]
   261c8:	ldr	r5, [r4, #48]	; 0x30
   261cc:	blx	r5
   261d0:	cmp	r0, #0
   261d4:	bne	26208 <flatcc_builder_start_struct@@Base+0x1c0>
   261d8:	ldr	r0, [r4, #28]
   261dc:	ldr	r2, [r4, #32]
   261e0:	ldr	r3, [r4, #64]	; 0x40
   261e4:	ldr	r1, [r4, #60]	; 0x3c
   261e8:	sub	r3, r3, r0
   261ec:	cmp	r3, r6
   261f0:	movhi	r3, r6
   261f4:	add	r0, r1, r0
   261f8:	str	r0, [r4, #16]
   261fc:	str	r3, [r4, #24]
   26200:	str	r6, [r2, #4]
   26204:	b	26184 <flatcc_builder_start_struct@@Base+0x13c>
   26208:	mov	r0, #0
   2620c:	b	26184 <flatcc_builder_start_struct@@Base+0x13c>
   26210:	bl	24d94 <flatcc_builder_default_alloc@@Base+0x124>

00026214 <flatcc_builder_struct_edit@@Base>:
   26214:	ldr	r0, [r0, #16]
   26218:	bx	lr

0002621c <flatcc_builder_end_struct@@Base>:
   2621c:	ldr	r3, [r0, #32]
   26220:	strd	r4, [sp, #-16]!
   26224:	ldrh	r3, [r3, #14]
   26228:	str	r6, [sp, #8]
   2622c:	str	lr, [sp, #12]
   26230:	sub	sp, sp, #80	; 0x50
   26234:	cmp	r3, #2
   26238:	bne	263e0 <flatcc_builder_end_struct@@Base+0x1c4>
   2623c:	ldrh	r3, [r0, #130]	; 0x82
   26240:	mov	r4, r0
   26244:	ldr	r1, [r0, #16]
   26248:	ldr	r0, [r0, #20]
   2624c:	cmp	r3, #0
   26250:	beq	263c4 <flatcc_builder_end_struct@@Base+0x1a8>
   26254:	ldrh	r2, [r4, #128]	; 0x80
   26258:	ldr	ip, [r4, #136]	; 0x88
   2625c:	cmp	r2, r3
   26260:	mov	r2, #0
   26264:	strhcc	r3, [r4, #128]	; 0x80
   26268:	sub	r5, ip, r0
   2626c:	sub	r3, r3, #1
   26270:	cmp	r0, r2
   26274:	and	r3, r3, r5
   26278:	str	r2, [sp, #8]
   2627c:	str	r2, [sp, #12]
   26280:	bne	26378 <flatcc_builder_end_struct@@Base+0x15c>
   26284:	cmp	r3, #0
   26288:	movne	r1, r2
   2628c:	movne	r0, r3
   26290:	movne	r2, #1
   26294:	beq	263a4 <flatcc_builder_end_struct@@Base+0x188>
   26298:	ldr	lr, [pc, #348]	; 263fc <flatcc_builder_end_struct@@Base+0x1e0>
   2629c:	add	r5, sp, #80	; 0x50
   262a0:	add	r1, r1, #1
   262a4:	add	r1, r5, r1, lsl #3
   262a8:	sub	r5, ip, r0
   262ac:	str	r0, [sp, #8]
   262b0:	str	r2, [sp, #12]
   262b4:	str	lr, [r1, #-72]	; 0xffffffb8
   262b8:	str	r3, [r1, #-68]	; 0xffffffbc
   262bc:	cmp	ip, r5
   262c0:	ble	263a4 <flatcc_builder_end_struct@@Base+0x188>
   262c4:	add	r1, sp, #16
   262c8:	mov	r3, r5
   262cc:	str	r0, [sp]
   262d0:	ldr	r0, [r4, #36]	; 0x24
   262d4:	ldr	r6, [r4, #44]	; 0x2c
   262d8:	blx	r6
   262dc:	subs	r1, r0, #0
   262e0:	bne	263c0 <flatcc_builder_end_struct@@Base+0x1a4>
   262e4:	cmp	r5, #0
   262e8:	str	r5, [r4, #136]	; 0x88
   262ec:	beq	26360 <flatcc_builder_end_struct@@Base+0x144>
   262f0:	ldr	r0, [r4, #16]
   262f4:	ldr	r2, [r4, #20]
   262f8:	bl	1459c <memset@plt>
   262fc:	ldr	r3, [r4, #32]
   26300:	ldr	r0, [r4, #60]	; 0x3c
   26304:	ldr	r2, [r4, #64]	; 0x40
   26308:	ldr	ip, [r3]
   2630c:	ldmib	r3, {r1, lr}
   26310:	add	r0, r0, ip
   26314:	sub	r2, r2, ip
   26318:	str	r0, [r4, #16]
   2631c:	cmp	r2, r1
   26320:	ldrh	r0, [r4, #128]	; 0x80
   26324:	movcs	r2, r1
   26328:	str	lr, [r4, #20]
   2632c:	str	ip, [r4, #28]
   26330:	ldrh	ip, [r4, #130]	; 0x82
   26334:	str	r2, [r4, #24]
   26338:	ldr	r2, [r4, #156]	; 0x9c
   2633c:	str	r1, [r3, #4]
   26340:	cmp	r0, ip
   26344:	sub	r0, r3, #36	; 0x24
   26348:	strhcc	ip, [r4, #128]	; 0x80
   2634c:	ldrh	r1, [r3, #12]
   26350:	sub	r3, r2, #1
   26354:	str	r0, [r4, #32]
   26358:	strh	r1, [r4, #130]	; 0x82
   2635c:	str	r3, [r4, #156]	; 0x9c
   26360:	mov	r0, r5
   26364:	add	sp, sp, #80	; 0x50
   26368:	ldrd	r4, [sp]
   2636c:	ldr	r6, [sp, #8]
   26370:	add	sp, sp, #12
   26374:	pop	{pc}		; (ldr pc, [sp], #4)
   26378:	mov	r2, #1
   2637c:	cmp	r3, #0
   26380:	str	r0, [sp, #8]
   26384:	str	r2, [sp, #12]
   26388:	str	r1, [sp, #16]
   2638c:	movne	r1, r2
   26390:	movne	r2, #2
   26394:	str	r0, [sp, #20]
   26398:	addne	r0, r0, r3
   2639c:	beq	262bc <flatcc_builder_end_struct@@Base+0xa0>
   263a0:	b	26298 <flatcc_builder_end_struct@@Base+0x7c>
   263a4:	movw	r1, #23364	; 0x5b44
   263a8:	movt	r1, #4
   263ac:	ldr	r3, [pc, #76]	; 26400 <flatcc_builder_end_struct@@Base+0x1e4>
   263b0:	movw	r0, #23556	; 0x5c04
   263b4:	movt	r0, #4
   263b8:	movw	r2, #647	; 0x287
   263bc:	bl	145f0 <__assert_fail@plt>
   263c0:	bl	24e0c <flatcc_builder_default_alloc@@Base+0x19c>
   263c4:	movw	r1, #23364	; 0x5b44
   263c8:	movt	r1, #4
   263cc:	ldr	r3, [pc, #48]	; 26404 <flatcc_builder_end_struct@@Base+0x1e8>
   263d0:	movw	r0, #23628	; 0x5c4c
   263d4:	movt	r0, #4
   263d8:	movw	r2, #783	; 0x30f
   263dc:	bl	145f0 <__assert_fail@plt>
   263e0:	movw	r1, #23364	; 0x5b44
   263e4:	movt	r1, #4
   263e8:	ldr	r3, [pc, #24]	; 26408 <flatcc_builder_end_struct@@Base+0x1ec>
   263ec:	movw	r0, #23684	; 0x5c84
   263f0:	movt	r0, #4
   263f4:	mov	r2, #872	; 0x368
   263f8:	bl	145f0 <__assert_fail@plt>
   263fc:	muleq	r4, ip, r4
   26400:	andeq	r5, r4, r0, lsr #8
   26404:	andeq	r5, r4, ip, lsl r7
   26408:	andeq	r5, r4, r8, asr r7

0002640c <flatcc_builder_extend_vector@@Base>:
   2640c:	ldr	ip, [r0, #32]
   26410:	strd	r4, [sp, #-20]!	; 0xffffffec
   26414:	mov	r4, r0
   26418:	ldr	r3, [ip, #20]
   2641c:	ldr	r0, [ip, #24]
   26420:	strd	r6, [sp, #8]
   26424:	str	lr, [sp, #16]
   26428:	sub	sp, sp, #12
   2642c:	adds	r3, r1, r3
   26430:	movcs	r5, #1
   26434:	movcc	r5, #0
   26438:	cmp	r0, r3
   2643c:	orrcc	r5, r5, #1
   26440:	cmp	r5, #0
   26444:	bne	264f0 <flatcc_builder_extend_vector@@Base+0xe4>
   26448:	ldr	r2, [ip, #16]
   2644c:	ldr	r6, [r4, #20]
   26450:	str	r3, [ip, #20]
   26454:	ldr	r3, [r4, #24]
   26458:	mla	r2, r2, r1, r6
   2645c:	cmp	r2, r3
   26460:	str	r2, [r4, #20]
   26464:	bcs	26484 <flatcc_builder_extend_vector@@Base+0x78>
   26468:	ldr	r0, [r4, #16]
   2646c:	add	r0, r0, r6
   26470:	add	sp, sp, #12
   26474:	ldrd	r4, [sp]
   26478:	ldrd	r6, [sp, #8]
   2647c:	add	sp, sp, #16
   26480:	pop	{pc}		; (ldr pc, [sp], #4)
   26484:	ldr	ip, [r4, #28]
   26488:	mov	r0, #1
   2648c:	add	r1, r4, #60	; 0x3c
   26490:	mov	r3, r0
   26494:	str	r0, [sp]
   26498:	ldr	r7, [r4, #48]	; 0x30
   2649c:	add	ip, ip, r0
   264a0:	ldr	r0, [r4, #40]	; 0x28
   264a4:	add	r2, ip, r2
   264a8:	blx	r7
   264ac:	cmp	r0, #0
   264b0:	bne	264e8 <flatcc_builder_extend_vector@@Base+0xdc>
   264b4:	ldr	r2, [r4, #28]
   264b8:	ldr	r0, [r4, #60]	; 0x3c
   264bc:	ldr	r3, [r4, #64]	; 0x40
   264c0:	add	r0, r0, r2
   264c4:	sub	r3, r3, r2
   264c8:	mvn	r2, #3
   264cc:	str	r0, [r4, #16]
   264d0:	cmn	r3, #4
   264d4:	mvnhi	r3, #3
   264d8:	str	r3, [r4, #24]
   264dc:	ldr	r3, [r4, #32]
   264e0:	str	r2, [r3, #4]
   264e4:	b	2646c <flatcc_builder_extend_vector@@Base+0x60>
   264e8:	mov	r0, r5
   264ec:	b	26470 <flatcc_builder_extend_vector@@Base+0x64>
   264f0:	bl	24e34 <flatcc_builder_default_alloc@@Base+0x1c4>

000264f4 <flatcc_builder_vector_push@@Base>:
   264f4:	ldr	r3, [r0, #32]
   264f8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   264fc:	ldrh	r2, [r3, #14]
   26500:	strd	r6, [sp, #8]
   26504:	str	r8, [sp, #16]
   26508:	str	lr, [sp, #20]
   2650c:	sub	sp, sp, #8
   26510:	cmp	r2, #4
   26514:	bne	26618 <flatcc_builder_vector_push@@Base+0x124>
   26518:	mov	r6, r1
   2651c:	ldr	r2, [r3, #20]
   26520:	ldr	r1, [r3, #24]
   26524:	cmp	r2, r1
   26528:	bhi	265fc <flatcc_builder_vector_push@@Base+0x108>
   2652c:	add	r2, r2, #1
   26530:	ldr	r5, [r3, #16]
   26534:	mov	r4, r0
   26538:	ldr	r7, [r0, #20]
   2653c:	str	r2, [r3, #20]
   26540:	ldr	r3, [r0, #24]
   26544:	add	ip, r5, r7
   26548:	cmp	ip, r3
   2654c:	str	ip, [r0, #20]
   26550:	bcs	26590 <flatcc_builder_vector_push@@Base+0x9c>
   26554:	ldr	r3, [r0, #16]
   26558:	adds	r3, r3, r7
   2655c:	beq	26574 <flatcc_builder_vector_push@@Base+0x80>
   26560:	mov	r0, r3
   26564:	mov	r2, r5
   26568:	mov	r1, r6
   2656c:	bl	14524 <memcpy@plt>
   26570:	mov	r3, r0
   26574:	mov	r0, r3
   26578:	add	sp, sp, #8
   2657c:	ldrd	r4, [sp]
   26580:	ldrd	r6, [sp, #8]
   26584:	ldr	r8, [sp, #16]
   26588:	add	sp, sp, #20
   2658c:	pop	{pc}		; (ldr pc, [sp], #4)
   26590:	ldr	r2, [r4, #28]
   26594:	mov	r0, #1
   26598:	add	r1, r4, #60	; 0x3c
   2659c:	mov	r3, r0
   265a0:	str	r0, [sp]
   265a4:	ldr	r8, [r4, #48]	; 0x30
   265a8:	add	r2, r2, r0
   265ac:	ldr	r0, [r4, #40]	; 0x28
   265b0:	add	r2, r2, ip
   265b4:	blx	r8
   265b8:	cmp	r0, #0
   265bc:	bne	265f4 <flatcc_builder_vector_push@@Base+0x100>
   265c0:	ldr	r1, [r4, #28]
   265c4:	ldr	r3, [r4, #60]	; 0x3c
   265c8:	ldr	r2, [r4, #64]	; 0x40
   265cc:	add	r3, r3, r1
   265d0:	sub	r2, r2, r1
   265d4:	mvn	r1, #3
   265d8:	str	r3, [r4, #16]
   265dc:	cmn	r2, #4
   265e0:	mvnhi	r2, #3
   265e4:	str	r2, [r4, #24]
   265e8:	ldr	r2, [r4, #32]
   265ec:	str	r1, [r2, #4]
   265f0:	b	26558 <flatcc_builder_vector_push@@Base+0x64>
   265f4:	mov	r3, #0
   265f8:	b	26574 <flatcc_builder_vector_push@@Base+0x80>
   265fc:	movw	r1, #23364	; 0x5b44
   26600:	movt	r1, #4
   26604:	ldr	r3, [pc, #40]	; 26634 <flatcc_builder_vector_push@@Base+0x140>
   26608:	movw	r0, #23772	; 0x5cdc
   2660c:	movt	r0, #4
   26610:	mov	r2, #908	; 0x38c
   26614:	bl	145f0 <__assert_fail@plt>
   26618:	movw	r1, #23364	; 0x5b44
   2661c:	movt	r1, #4
   26620:	ldr	r3, [pc, #12]	; 26634 <flatcc_builder_vector_push@@Base+0x140>
   26624:	movw	r0, #23728	; 0x5cb0
   26628:	movt	r0, #4
   2662c:	movw	r2, #907	; 0x38b
   26630:	bl	145f0 <__assert_fail@plt>
   26634:	andeq	r5, r4, r4, ror r7

00026638 <flatcc_builder_append_vector@@Base>:
   26638:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2663c:	mov	r5, r0
   26640:	ldr	r0, [r0, #32]
   26644:	ldrh	r3, [r0, #14]
   26648:	strd	r6, [sp, #8]
   2664c:	strd	r8, [sp, #16]
   26650:	str	lr, [sp, #24]
   26654:	sub	sp, sp, #12
   26658:	cmp	r3, #4
   2665c:	bne	2675c <flatcc_builder_append_vector@@Base+0x124>
   26660:	mov	r6, r1
   26664:	ldr	r1, [r0, #20]
   26668:	ldr	r4, [r0, #24]
   2666c:	adds	r1, r2, r1
   26670:	movcs	r3, #1
   26674:	movcc	r3, #0
   26678:	cmp	r4, r1
   2667c:	movcs	r4, r3
   26680:	orrcc	r4, r3, #1
   26684:	cmp	r4, #0
   26688:	bne	26758 <flatcc_builder_append_vector@@Base+0x120>
   2668c:	ldr	r7, [r0, #16]
   26690:	ldr	r8, [r5, #20]
   26694:	ldr	r3, [r5, #24]
   26698:	mul	r7, r7, r2
   2669c:	str	r1, [r0, #20]
   266a0:	add	ip, r7, r8
   266a4:	cmp	ip, r3
   266a8:	str	ip, [r5, #20]
   266ac:	bcs	266ec <flatcc_builder_append_vector@@Base+0xb4>
   266b0:	ldr	r3, [r5, #16]
   266b4:	adds	r3, r3, r8
   266b8:	beq	266d0 <flatcc_builder_append_vector@@Base+0x98>
   266bc:	mov	r0, r3
   266c0:	mov	r2, r7
   266c4:	mov	r1, r6
   266c8:	bl	14524 <memcpy@plt>
   266cc:	mov	r3, r0
   266d0:	mov	r0, r3
   266d4:	add	sp, sp, #12
   266d8:	ldrd	r4, [sp]
   266dc:	ldrd	r6, [sp, #8]
   266e0:	ldrd	r8, [sp, #16]
   266e4:	add	sp, sp, #24
   266e8:	pop	{pc}		; (ldr pc, [sp], #4)
   266ec:	ldr	r2, [r5, #28]
   266f0:	mov	r0, #1
   266f4:	add	r1, r5, #60	; 0x3c
   266f8:	mov	r3, r0
   266fc:	str	r0, [sp]
   26700:	ldr	r9, [r5, #48]	; 0x30
   26704:	add	r2, r2, r0
   26708:	ldr	r0, [r5, #40]	; 0x28
   2670c:	add	r2, r2, ip
   26710:	blx	r9
   26714:	cmp	r0, #0
   26718:	bne	26750 <flatcc_builder_append_vector@@Base+0x118>
   2671c:	ldr	r1, [r5, #28]
   26720:	ldr	r3, [r5, #60]	; 0x3c
   26724:	ldr	r2, [r5, #64]	; 0x40
   26728:	add	r3, r3, r1
   2672c:	sub	r2, r2, r1
   26730:	mvn	r1, #3
   26734:	str	r3, [r5, #16]
   26738:	cmn	r2, #4
   2673c:	mvnhi	r2, #3
   26740:	str	r2, [r5, #24]
   26744:	ldr	r2, [r5, #32]
   26748:	str	r1, [r2, #4]
   2674c:	b	266b4 <flatcc_builder_append_vector@@Base+0x7c>
   26750:	mov	r3, r4
   26754:	b	266d0 <flatcc_builder_append_vector@@Base+0x98>
   26758:	bl	24e34 <flatcc_builder_default_alloc@@Base+0x1c4>
   2675c:	movw	r1, #23364	; 0x5b44
   26760:	movt	r1, #4
   26764:	ldr	r3, [pc, #12]	; 26778 <flatcc_builder_append_vector@@Base+0x140>
   26768:	movw	r0, #23728	; 0x5cb0
   2676c:	movt	r0, #4
   26770:	movw	r2, #915	; 0x393
   26774:	bl	145f0 <__assert_fail@plt>
   26778:	muleq	r4, r0, r7

0002677c <flatcc_builder_extend_offset_vector@@Base>:
   2677c:	ldr	ip, [r0, #32]
   26780:	strd	r4, [sp, #-20]!	; 0xffffffec
   26784:	mov	r4, r0
   26788:	ldr	r3, [ip, #20]
   2678c:	strd	r6, [sp, #8]
   26790:	str	lr, [sp, #16]
   26794:	sub	sp, sp, #12
   26798:	adds	r3, r1, r3
   2679c:	movcs	r2, #1
   267a0:	movcc	r2, #0
   267a4:	cmn	r3, #-1073741823	; 0xc0000001
   267a8:	movls	r0, #0
   267ac:	movhi	r0, #1
   267b0:	orrs	r5, r2, r0
   267b4:	bne	2685c <flatcc_builder_extend_offset_vector@@Base+0xe0>
   267b8:	ldr	r6, [r4, #20]
   267bc:	str	r3, [ip, #20]
   267c0:	ldr	r3, [r4, #24]
   267c4:	add	r2, r6, r1, lsl #2
   267c8:	cmp	r2, r3
   267cc:	str	r2, [r4, #20]
   267d0:	bcs	267f0 <flatcc_builder_extend_offset_vector@@Base+0x74>
   267d4:	ldr	r0, [r4, #16]
   267d8:	add	r0, r0, r6
   267dc:	add	sp, sp, #12
   267e0:	ldrd	r4, [sp]
   267e4:	ldrd	r6, [sp, #8]
   267e8:	add	sp, sp, #16
   267ec:	pop	{pc}		; (ldr pc, [sp], #4)
   267f0:	ldr	ip, [r4, #28]
   267f4:	mov	r0, #1
   267f8:	add	r1, r4, #60	; 0x3c
   267fc:	mov	r3, r0
   26800:	str	r0, [sp]
   26804:	ldr	r7, [r4, #48]	; 0x30
   26808:	add	ip, ip, r0
   2680c:	ldr	r0, [r4, #40]	; 0x28
   26810:	add	r2, ip, r2
   26814:	blx	r7
   26818:	cmp	r0, #0
   2681c:	bne	26854 <flatcc_builder_extend_offset_vector@@Base+0xd8>
   26820:	ldr	r2, [r4, #28]
   26824:	ldr	r0, [r4, #60]	; 0x3c
   26828:	ldr	r3, [r4, #64]	; 0x40
   2682c:	add	r0, r0, r2
   26830:	sub	r3, r3, r2
   26834:	mvn	r2, #3
   26838:	str	r0, [r4, #16]
   2683c:	cmn	r3, #4
   26840:	mvnhi	r3, #3
   26844:	str	r3, [r4, #24]
   26848:	ldr	r3, [r4, #32]
   2684c:	str	r2, [r3, #4]
   26850:	b	267d8 <flatcc_builder_extend_offset_vector@@Base+0x5c>
   26854:	mov	r0, r5
   26858:	b	267dc <flatcc_builder_extend_offset_vector@@Base+0x60>
   2685c:	bl	24e34 <flatcc_builder_default_alloc@@Base+0x1c4>

00026860 <flatcc_builder_offset_vector_push@@Base>:
   26860:	ldr	r2, [r0, #32]
   26864:	strd	r4, [sp, #-20]!	; 0xffffffec
   26868:	ldrh	r3, [r2, #14]
   2686c:	strd	r6, [sp, #8]
   26870:	str	lr, [sp, #16]
   26874:	sub	sp, sp, #12
   26878:	cmp	r3, #5
   2687c:	bne	26940 <flatcc_builder_offset_vector_push@@Base+0xe0>
   26880:	ldr	r3, [r2, #20]
   26884:	cmn	r3, #-1073741823	; 0xc0000001
   26888:	beq	26938 <flatcc_builder_offset_vector_push@@Base+0xd8>
   2688c:	ldr	r5, [r0, #20]
   26890:	mov	r6, r1
   26894:	add	r3, r3, #1
   26898:	mov	r4, r0
   2689c:	ldr	r1, [r0, #24]
   268a0:	str	r3, [r2, #20]
   268a4:	add	r3, r5, #4
   268a8:	cmp	r3, r1
   268ac:	str	r3, [r0, #20]
   268b0:	bcs	268d4 <flatcc_builder_offset_vector_push@@Base+0x74>
   268b4:	ldr	r3, [r0, #16]
   268b8:	adds	r0, r3, r5
   268bc:	strne	r6, [r3, r5]
   268c0:	add	sp, sp, #12
   268c4:	ldrd	r4, [sp]
   268c8:	ldrd	r6, [sp, #8]
   268cc:	add	sp, sp, #16
   268d0:	pop	{pc}		; (ldr pc, [sp], #4)
   268d4:	ldr	r2, [r4, #28]
   268d8:	mov	r0, #1
   268dc:	add	r1, r4, #60	; 0x3c
   268e0:	mov	r3, r0
   268e4:	str	r0, [sp]
   268e8:	ldr	r0, [r4, #40]	; 0x28
   268ec:	add	r2, r5, r2
   268f0:	ldr	r7, [r4, #48]	; 0x30
   268f4:	add	r2, r2, #5
   268f8:	blx	r7
   268fc:	cmp	r0, #0
   26900:	bne	26938 <flatcc_builder_offset_vector_push@@Base+0xd8>
   26904:	ldr	r1, [r4, #28]
   26908:	ldr	r3, [r4, #60]	; 0x3c
   2690c:	ldr	r2, [r4, #64]	; 0x40
   26910:	add	r3, r3, r1
   26914:	sub	r2, r2, r1
   26918:	mvn	r1, #3
   2691c:	str	r3, [r4, #16]
   26920:	cmn	r2, #4
   26924:	mvnhi	r2, #3
   26928:	str	r2, [r4, #24]
   2692c:	ldr	r2, [r4, #32]
   26930:	str	r1, [r2, #4]
   26934:	b	268b8 <flatcc_builder_offset_vector_push@@Base+0x58>
   26938:	mov	r0, #0
   2693c:	b	268c0 <flatcc_builder_offset_vector_push@@Base+0x60>
   26940:	movw	r1, #23364	; 0x5b44
   26944:	movt	r1, #4
   26948:	ldr	r3, [pc, #12]	; 2695c <flatcc_builder_offset_vector_push@@Base+0xfc>
   2694c:	movw	r0, #23836	; 0x5d1c
   26950:	movt	r0, #4
   26954:	movw	r2, #934	; 0x3a6
   26958:	bl	145f0 <__assert_fail@plt>
   2695c:			; <UNDEFINED> instruction: 0x000457b0

00026960 <flatcc_builder_append_offset_vector@@Base>:
   26960:	strd	r4, [sp, #-28]!	; 0xffffffe4
   26964:	mov	r5, r0
   26968:	ldr	r0, [r0, #32]
   2696c:	ldrh	r3, [r0, #14]
   26970:	strd	r6, [sp, #8]
   26974:	strd	r8, [sp, #16]
   26978:	str	lr, [sp, #24]
   2697c:	sub	sp, sp, #12
   26980:	cmp	r3, #5
   26984:	bne	26a7c <flatcc_builder_append_offset_vector@@Base+0x11c>
   26988:	ldr	r3, [r0, #20]
   2698c:	mov	r7, r1
   26990:	adds	r1, r2, r3
   26994:	movcs	r4, #1
   26998:	movcc	r4, #0
   2699c:	cmn	r1, #-1073741823	; 0xc0000001
   269a0:	movls	r3, #0
   269a4:	movhi	r3, #1
   269a8:	orrs	r4, r4, r3
   269ac:	bne	26a78 <flatcc_builder_append_offset_vector@@Base+0x118>
   269b0:	ldr	r8, [r5, #20]
   269b4:	lsl	r6, r2, #2
   269b8:	ldr	r3, [r5, #24]
   269bc:	str	r1, [r0, #20]
   269c0:	add	ip, r6, r8
   269c4:	cmp	ip, r3
   269c8:	str	ip, [r5, #20]
   269cc:	bcs	26a0c <flatcc_builder_append_offset_vector@@Base+0xac>
   269d0:	ldr	r3, [r5, #16]
   269d4:	adds	r3, r3, r8
   269d8:	beq	269f0 <flatcc_builder_append_offset_vector@@Base+0x90>
   269dc:	mov	r0, r3
   269e0:	mov	r2, r6
   269e4:	mov	r1, r7
   269e8:	bl	14524 <memcpy@plt>
   269ec:	mov	r3, r0
   269f0:	mov	r0, r3
   269f4:	add	sp, sp, #12
   269f8:	ldrd	r4, [sp]
   269fc:	ldrd	r6, [sp, #8]
   26a00:	ldrd	r8, [sp, #16]
   26a04:	add	sp, sp, #24
   26a08:	pop	{pc}		; (ldr pc, [sp], #4)
   26a0c:	ldr	r2, [r5, #28]
   26a10:	mov	r0, #1
   26a14:	add	r1, r5, #60	; 0x3c
   26a18:	mov	r3, r0
   26a1c:	str	r0, [sp]
   26a20:	ldr	r9, [r5, #48]	; 0x30
   26a24:	add	r2, r2, r0
   26a28:	ldr	r0, [r5, #40]	; 0x28
   26a2c:	add	r2, r2, ip
   26a30:	blx	r9
   26a34:	cmp	r0, #0
   26a38:	bne	26a70 <flatcc_builder_append_offset_vector@@Base+0x110>
   26a3c:	ldr	r1, [r5, #28]
   26a40:	ldr	r3, [r5, #60]	; 0x3c
   26a44:	ldr	r2, [r5, #64]	; 0x40
   26a48:	add	r3, r3, r1
   26a4c:	sub	r2, r2, r1
   26a50:	mvn	r1, #3
   26a54:	str	r3, [r5, #16]
   26a58:	cmn	r2, #4
   26a5c:	mvnhi	r2, #3
   26a60:	str	r2, [r5, #24]
   26a64:	ldr	r2, [r5, #32]
   26a68:	str	r1, [r2, #4]
   26a6c:	b	269d4 <flatcc_builder_append_offset_vector@@Base+0x74>
   26a70:	mov	r3, r4
   26a74:	b	269f0 <flatcc_builder_append_offset_vector@@Base+0x90>
   26a78:	bl	24e34 <flatcc_builder_default_alloc@@Base+0x1c4>
   26a7c:	movw	r1, #23364	; 0x5b44
   26a80:	movt	r1, #4
   26a84:	ldr	r3, [pc, #12]	; 26a98 <flatcc_builder_append_offset_vector@@Base+0x138>
   26a88:	movw	r0, #23836	; 0x5d1c
   26a8c:	movt	r0, #4
   26a90:	mov	r2, #948	; 0x3b4
   26a94:	bl	145f0 <__assert_fail@plt>
   26a98:	ldrdeq	r5, [r4], -r4

00026a9c <flatcc_builder_extend_string@@Base>:
   26a9c:	ldr	r2, [r0, #32]
   26aa0:	strd	r4, [sp, #-16]!
   26aa4:	ldrh	r3, [r2, #14]
   26aa8:	str	r6, [sp, #8]
   26aac:	str	lr, [sp, #12]
   26ab0:	sub	sp, sp, #8
   26ab4:	cmp	r3, #6
   26ab8:	bne	26b74 <flatcc_builder_extend_string@@Base+0xd8>
   26abc:	ldr	r3, [r2, #20]
   26ac0:	adds	r3, r1, r3
   26ac4:	bcs	26b70 <flatcc_builder_extend_string@@Base+0xd4>
   26ac8:	ldr	r5, [r0, #20]
   26acc:	mov	r4, r0
   26ad0:	str	r3, [r2, #20]
   26ad4:	ldr	r3, [r0, #24]
   26ad8:	add	r2, r1, r5
   26adc:	cmp	r2, r3
   26ae0:	str	r2, [r0, #20]
   26ae4:	bcs	26b04 <flatcc_builder_extend_string@@Base+0x68>
   26ae8:	ldr	r0, [r0, #16]
   26aec:	add	r0, r0, r5
   26af0:	add	sp, sp, #8
   26af4:	ldrd	r4, [sp]
   26af8:	ldr	r6, [sp, #8]
   26afc:	add	sp, sp, #12
   26b00:	pop	{pc}		; (ldr pc, [sp], #4)
   26b04:	ldr	ip, [r4, #28]
   26b08:	mov	r0, #1
   26b0c:	add	r1, r4, #60	; 0x3c
   26b10:	mov	r3, r0
   26b14:	str	r0, [sp]
   26b18:	ldr	r6, [r4, #48]	; 0x30
   26b1c:	add	ip, ip, r0
   26b20:	ldr	r0, [r4, #40]	; 0x28
   26b24:	add	r2, ip, r2
   26b28:	blx	r6
   26b2c:	cmp	r0, #0
   26b30:	bne	26b68 <flatcc_builder_extend_string@@Base+0xcc>
   26b34:	ldr	r2, [r4, #28]
   26b38:	ldr	r0, [r4, #60]	; 0x3c
   26b3c:	ldr	r3, [r4, #64]	; 0x40
   26b40:	add	r0, r0, r2
   26b44:	sub	r3, r3, r2
   26b48:	mvn	r2, #3
   26b4c:	str	r0, [r4, #16]
   26b50:	cmn	r3, #4
   26b54:	mvnhi	r3, #3
   26b58:	str	r3, [r4, #24]
   26b5c:	ldr	r3, [r4, #32]
   26b60:	str	r2, [r3, #4]
   26b64:	b	26aec <flatcc_builder_extend_string@@Base+0x50>
   26b68:	mov	r0, #0
   26b6c:	b	26af0 <flatcc_builder_extend_string@@Base+0x54>
   26b70:	bl	24e34 <flatcc_builder_default_alloc@@Base+0x1c4>
   26b74:	movw	r1, #23364	; 0x5b44
   26b78:	movt	r1, #4
   26b7c:	ldr	r3, [pc, #12]	; 26b90 <flatcc_builder_extend_string@@Base+0xf4>
   26b80:	movw	r0, #23492	; 0x5bc4
   26b84:	movt	r0, #4
   26b88:	movw	r2, #957	; 0x3bd
   26b8c:	bl	145f0 <__assert_fail@plt>
   26b90:	strdeq	r5, [r4], -r8

00026b94 <flatcc_builder_append_string@@Base>:
   26b94:	strd	r4, [sp, #-24]!	; 0xffffffe8
   26b98:	strd	r6, [sp, #8]
   26b9c:	mov	r6, r1
   26ba0:	ldr	r1, [r0, #32]
   26ba4:	str	r8, [sp, #16]
   26ba8:	str	lr, [sp, #20]
   26bac:	sub	sp, sp, #8
   26bb0:	ldrh	r3, [r1, #14]
   26bb4:	cmp	r3, #6
   26bb8:	bne	26c98 <flatcc_builder_append_string@@Base+0x104>
   26bbc:	ldr	r3, [r1, #20]
   26bc0:	mov	r5, r2
   26bc4:	adds	r3, r2, r3
   26bc8:	bcs	26c94 <flatcc_builder_append_string@@Base+0x100>
   26bcc:	ldr	r7, [r0, #20]
   26bd0:	mov	r4, r0
   26bd4:	str	r3, [r1, #20]
   26bd8:	ldr	r3, [r0, #24]
   26bdc:	add	ip, r2, r7
   26be0:	cmp	ip, r3
   26be4:	str	ip, [r0, #20]
   26be8:	bcs	26c28 <flatcc_builder_append_string@@Base+0x94>
   26bec:	ldr	r3, [r0, #16]
   26bf0:	adds	r3, r3, r7
   26bf4:	beq	26c0c <flatcc_builder_append_string@@Base+0x78>
   26bf8:	mov	r0, r3
   26bfc:	mov	r2, r5
   26c00:	mov	r1, r6
   26c04:	bl	14524 <memcpy@plt>
   26c08:	mov	r3, r0
   26c0c:	mov	r0, r3
   26c10:	add	sp, sp, #8
   26c14:	ldrd	r4, [sp]
   26c18:	ldrd	r6, [sp, #8]
   26c1c:	ldr	r8, [sp, #16]
   26c20:	add	sp, sp, #20
   26c24:	pop	{pc}		; (ldr pc, [sp], #4)
   26c28:	ldr	r2, [r4, #28]
   26c2c:	mov	r0, #1
   26c30:	add	r1, r4, #60	; 0x3c
   26c34:	mov	r3, r0
   26c38:	str	r0, [sp]
   26c3c:	ldr	r8, [r4, #48]	; 0x30
   26c40:	add	r2, r2, r0
   26c44:	ldr	r0, [r4, #40]	; 0x28
   26c48:	add	r2, r2, ip
   26c4c:	blx	r8
   26c50:	cmp	r0, #0
   26c54:	bne	26c8c <flatcc_builder_append_string@@Base+0xf8>
   26c58:	ldr	r1, [r4, #28]
   26c5c:	ldr	r3, [r4, #60]	; 0x3c
   26c60:	ldr	r2, [r4, #64]	; 0x40
   26c64:	add	r3, r3, r1
   26c68:	sub	r2, r2, r1
   26c6c:	mvn	r1, #3
   26c70:	str	r3, [r4, #16]
   26c74:	cmn	r2, #4
   26c78:	mvnhi	r2, #3
   26c7c:	str	r2, [r4, #24]
   26c80:	ldr	r2, [r4, #32]
   26c84:	str	r1, [r2, #4]
   26c88:	b	26bf0 <flatcc_builder_append_string@@Base+0x5c>
   26c8c:	mov	r3, #0
   26c90:	b	26c0c <flatcc_builder_append_string@@Base+0x78>
   26c94:	bl	24e34 <flatcc_builder_default_alloc@@Base+0x1c4>
   26c98:	bl	24e84 <flatcc_builder_default_alloc@@Base+0x214>

00026c9c <flatcc_builder_append_string_str@@Base>:
   26c9c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   26ca0:	mov	r4, r0
   26ca4:	mov	r0, r1
   26ca8:	strd	r6, [sp, #8]
   26cac:	mov	r6, r1
   26cb0:	str	r8, [sp, #16]
   26cb4:	str	lr, [sp, #20]
   26cb8:	sub	sp, sp, #8
   26cbc:	bl	14578 <strlen@plt>
   26cc0:	ldr	r2, [r4, #32]
   26cc4:	ldrh	r3, [r2, #14]
   26cc8:	cmp	r3, #6
   26ccc:	bne	26da8 <flatcc_builder_append_string_str@@Base+0x10c>
   26cd0:	ldr	r3, [r2, #20]
   26cd4:	mov	r5, r0
   26cd8:	adds	r3, r0, r3
   26cdc:	bcs	26da4 <flatcc_builder_append_string_str@@Base+0x108>
   26ce0:	ldr	r7, [r4, #20]
   26ce4:	str	r3, [r2, #20]
   26ce8:	ldr	r3, [r4, #24]
   26cec:	add	ip, r0, r7
   26cf0:	cmp	ip, r3
   26cf4:	str	ip, [r4, #20]
   26cf8:	bcs	26d38 <flatcc_builder_append_string_str@@Base+0x9c>
   26cfc:	ldr	r3, [r4, #16]
   26d00:	adds	r3, r3, r7
   26d04:	beq	26d1c <flatcc_builder_append_string_str@@Base+0x80>
   26d08:	mov	r0, r3
   26d0c:	mov	r2, r5
   26d10:	mov	r1, r6
   26d14:	bl	14524 <memcpy@plt>
   26d18:	mov	r3, r0
   26d1c:	mov	r0, r3
   26d20:	add	sp, sp, #8
   26d24:	ldrd	r4, [sp]
   26d28:	ldrd	r6, [sp, #8]
   26d2c:	ldr	r8, [sp, #16]
   26d30:	add	sp, sp, #20
   26d34:	pop	{pc}		; (ldr pc, [sp], #4)
   26d38:	ldr	r2, [r4, #28]
   26d3c:	mov	r0, #1
   26d40:	add	r1, r4, #60	; 0x3c
   26d44:	mov	r3, r0
   26d48:	str	r0, [sp]
   26d4c:	ldr	r8, [r4, #48]	; 0x30
   26d50:	add	r2, r2, r0
   26d54:	ldr	r0, [r4, #40]	; 0x28
   26d58:	add	r2, r2, ip
   26d5c:	blx	r8
   26d60:	cmp	r0, #0
   26d64:	bne	26d9c <flatcc_builder_append_string_str@@Base+0x100>
   26d68:	ldr	r1, [r4, #28]
   26d6c:	ldr	r3, [r4, #60]	; 0x3c
   26d70:	ldr	r2, [r4, #64]	; 0x40
   26d74:	add	r3, r3, r1
   26d78:	sub	r2, r2, r1
   26d7c:	mvn	r1, #3
   26d80:	str	r3, [r4, #16]
   26d84:	cmn	r2, #4
   26d88:	mvnhi	r2, #3
   26d8c:	str	r2, [r4, #24]
   26d90:	ldr	r2, [r4, #32]
   26d94:	str	r1, [r2, #4]
   26d98:	b	26d00 <flatcc_builder_append_string_str@@Base+0x64>
   26d9c:	mov	r3, #0
   26da0:	b	26d1c <flatcc_builder_append_string_str@@Base+0x80>
   26da4:	bl	24e34 <flatcc_builder_default_alloc@@Base+0x1c4>
   26da8:	bl	24e84 <flatcc_builder_default_alloc@@Base+0x214>

00026dac <flatcc_builder_append_string_strn@@Base>:
   26dac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   26db0:	mov	r4, r0
   26db4:	mov	r5, r2
   26db8:	strd	r6, [sp, #8]
   26dbc:	mov	r6, r1
   26dc0:	mov	r1, #0
   26dc4:	mov	r0, r6
   26dc8:	str	r8, [sp, #16]
   26dcc:	str	lr, [sp, #20]
   26dd0:	sub	sp, sp, #8
   26dd4:	bl	145c0 <memchr@plt>
   26dd8:	ldr	r2, [r4, #32]
   26ddc:	cmp	r0, #0
   26de0:	subne	r5, r0, r6
   26de4:	ldrh	r3, [r2, #14]
   26de8:	cmp	r3, #6
   26dec:	bne	26ec4 <flatcc_builder_append_string_strn@@Base+0x118>
   26df0:	ldr	r3, [r2, #20]
   26df4:	adds	r3, r5, r3
   26df8:	bcs	26ec0 <flatcc_builder_append_string_strn@@Base+0x114>
   26dfc:	ldr	r7, [r4, #20]
   26e00:	str	r3, [r2, #20]
   26e04:	ldr	r3, [r4, #24]
   26e08:	add	ip, r5, r7
   26e0c:	cmp	ip, r3
   26e10:	str	ip, [r4, #20]
   26e14:	bcs	26e54 <flatcc_builder_append_string_strn@@Base+0xa8>
   26e18:	ldr	r3, [r4, #16]
   26e1c:	adds	r3, r3, r7
   26e20:	beq	26e38 <flatcc_builder_append_string_strn@@Base+0x8c>
   26e24:	mov	r0, r3
   26e28:	mov	r2, r5
   26e2c:	mov	r1, r6
   26e30:	bl	14524 <memcpy@plt>
   26e34:	mov	r3, r0
   26e38:	mov	r0, r3
   26e3c:	add	sp, sp, #8
   26e40:	ldrd	r4, [sp]
   26e44:	ldrd	r6, [sp, #8]
   26e48:	ldr	r8, [sp, #16]
   26e4c:	add	sp, sp, #20
   26e50:	pop	{pc}		; (ldr pc, [sp], #4)
   26e54:	ldr	r2, [r4, #28]
   26e58:	mov	r0, #1
   26e5c:	add	r1, r4, #60	; 0x3c
   26e60:	mov	r3, r0
   26e64:	str	r0, [sp]
   26e68:	ldr	r8, [r4, #48]	; 0x30
   26e6c:	add	r2, r2, r0
   26e70:	ldr	r0, [r4, #40]	; 0x28
   26e74:	add	r2, r2, ip
   26e78:	blx	r8
   26e7c:	cmp	r0, #0
   26e80:	bne	26eb8 <flatcc_builder_append_string_strn@@Base+0x10c>
   26e84:	ldr	r1, [r4, #28]
   26e88:	ldr	r3, [r4, #60]	; 0x3c
   26e8c:	ldr	r2, [r4, #64]	; 0x40
   26e90:	add	r3, r3, r1
   26e94:	sub	r2, r2, r1
   26e98:	mvn	r1, #3
   26e9c:	str	r3, [r4, #16]
   26ea0:	cmn	r2, #4
   26ea4:	mvnhi	r2, #3
   26ea8:	str	r2, [r4, #24]
   26eac:	ldr	r2, [r4, #32]
   26eb0:	str	r1, [r2, #4]
   26eb4:	b	26e1c <flatcc_builder_append_string_strn@@Base+0x70>
   26eb8:	mov	r3, #0
   26ebc:	b	26e38 <flatcc_builder_append_string_strn@@Base+0x8c>
   26ec0:	bl	24e34 <flatcc_builder_default_alloc@@Base+0x1c4>
   26ec4:	bl	24e84 <flatcc_builder_default_alloc@@Base+0x214>

00026ec8 <flatcc_builder_truncate_vector@@Base>:
   26ec8:	mov	r3, r0
   26ecc:	ldr	r0, [r0, #32]
   26ed0:	str	r4, [sp, #-8]!
   26ed4:	ldrh	r2, [r0, #14]
   26ed8:	str	lr, [sp, #4]
   26edc:	cmp	r2, #4
   26ee0:	bne	26f30 <flatcc_builder_truncate_vector@@Base+0x68>
   26ee4:	mov	lr, r1
   26ee8:	ldr	r1, [r0, #20]
   26eec:	cmp	r1, lr
   26ef0:	bcc	26f4c <flatcc_builder_truncate_vector@@Base+0x84>
   26ef4:	ldr	r2, [r0, #16]
   26ef8:	sub	ip, r1, lr
   26efc:	mov	r1, #0
   26f00:	str	ip, [r0, #20]
   26f04:	ldr	r0, [r3, #16]
   26f08:	ldr	ip, [r3, #20]
   26f0c:	mul	r2, r2, lr
   26f10:	sub	ip, ip, r2
   26f14:	add	r0, r0, ip
   26f18:	str	ip, [r3, #20]
   26f1c:	bl	1459c <memset@plt>
   26f20:	ldr	r4, [sp]
   26f24:	add	sp, sp, #4
   26f28:	mov	r0, #0
   26f2c:	pop	{pc}		; (ldr pc, [sp], #4)
   26f30:	movw	r1, #23364	; 0x5b44
   26f34:	movt	r1, #4
   26f38:	ldr	r3, [pc, #40]	; 26f68 <flatcc_builder_truncate_vector@@Base+0xa0>
   26f3c:	movw	r0, #23728	; 0x5cb0
   26f40:	movt	r0, #4
   26f44:	movw	r2, #985	; 0x3d9
   26f48:	bl	145f0 <__assert_fail@plt>
   26f4c:	movw	r1, #23364	; 0x5b44
   26f50:	movt	r1, #4
   26f54:	ldr	r3, [pc, #12]	; 26f68 <flatcc_builder_truncate_vector@@Base+0xa0>
   26f58:	movw	r0, #23888	; 0x5d50
   26f5c:	movt	r0, #4
   26f60:	movw	r2, #986	; 0x3da
   26f64:	bl	145f0 <__assert_fail@plt>
   26f68:	andeq	r5, r4, r8, lsl r8

00026f6c <flatcc_builder_truncate_offset_vector@@Base>:
   26f6c:	mov	r3, r0
   26f70:	ldr	r0, [r0, #32]
   26f74:	str	r4, [sp, #-8]!
   26f78:	ldrh	r2, [r0, #14]
   26f7c:	str	lr, [sp, #4]
   26f80:	cmp	r2, #5
   26f84:	bne	26fd4 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   26f88:	mov	lr, r1
   26f8c:	ldr	r1, [r0, #20]
   26f90:	cmp	r1, lr
   26f94:	bcc	26ff0 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   26f98:	ldr	r2, [r0, #16]
   26f9c:	sub	ip, r1, lr
   26fa0:	mov	r1, #0
   26fa4:	str	ip, [r0, #20]
   26fa8:	ldr	r0, [r3, #16]
   26fac:	ldr	ip, [r3, #20]
   26fb0:	mul	r2, r2, lr
   26fb4:	sub	ip, ip, r2
   26fb8:	add	r0, r0, ip
   26fbc:	str	ip, [r3, #20]
   26fc0:	bl	1459c <memset@plt>
   26fc4:	ldr	r4, [sp]
   26fc8:	add	sp, sp, #4
   26fcc:	mov	r0, #0
   26fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   26fd4:	movw	r1, #23364	; 0x5b44
   26fd8:	movt	r1, #4
   26fdc:	ldr	r3, [pc, #40]	; 2700c <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   26fe0:	movw	r0, #23836	; 0x5d1c
   26fe4:	movt	r0, #4
   26fe8:	movw	r2, #994	; 0x3e2
   26fec:	bl	145f0 <__assert_fail@plt>
   26ff0:	movw	r1, #23364	; 0x5b44
   26ff4:	movt	r1, #4
   26ff8:	ldr	r3, [pc, #12]	; 2700c <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   26ffc:	movw	r0, #23924	; 0x5d74
   27000:	movt	r0, #4
   27004:	movw	r2, #995	; 0x3e3
   27008:	bl	145f0 <__assert_fail@plt>
   2700c:	andeq	r5, r4, r8, lsr r8

00027010 <flatcc_builder_truncate_string@@Base>:
   27010:	str	r4, [sp, #-8]!
   27014:	str	lr, [sp, #4]
   27018:	ldr	lr, [r0, #32]
   2701c:	ldrh	r2, [lr, #14]
   27020:	cmp	r2, #6
   27024:	bne	27074 <flatcc_builder_truncate_string@@Base+0x64>
   27028:	ldr	r2, [lr, #20]
   2702c:	mov	ip, r1
   27030:	cmp	r2, r1
   27034:	bcc	27090 <flatcc_builder_truncate_string@@Base+0x80>
   27038:	sub	r1, r2, r1
   2703c:	mov	r3, r0
   27040:	ldr	r0, [r0, #16]
   27044:	mov	r2, ip
   27048:	str	r1, [lr, #20]
   2704c:	mov	r1, #0
   27050:	ldr	lr, [r3, #20]
   27054:	sub	ip, lr, ip
   27058:	add	r0, r0, ip
   2705c:	str	ip, [r3, #20]
   27060:	bl	1459c <memset@plt>
   27064:	ldr	r4, [sp]
   27068:	add	sp, sp, #4
   2706c:	mov	r0, #0
   27070:	pop	{pc}		; (ldr pc, [sp], #4)
   27074:	movw	r1, #23364	; 0x5b44
   27078:	movt	r1, #4
   2707c:	ldr	r3, [pc, #40]	; 270ac <flatcc_builder_truncate_string@@Base+0x9c>
   27080:	movw	r0, #23492	; 0x5bc4
   27084:	movt	r0, #4
   27088:	movw	r2, #1003	; 0x3eb
   2708c:	bl	145f0 <__assert_fail@plt>
   27090:	movw	r1, #23364	; 0x5b44
   27094:	movt	r1, #4
   27098:	ldr	r3, [pc, #12]	; 270ac <flatcc_builder_truncate_string@@Base+0x9c>
   2709c:	movw	r0, #23984	; 0x5db0
   270a0:	movt	r0, #4
   270a4:	mov	r2, #1004	; 0x3ec
   270a8:	bl	145f0 <__assert_fail@plt>
   270ac:	andeq	r5, r4, r0, ror #16

000270b0 <flatcc_builder_start_vector@@Base>:
   270b0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   270b4:	mov	r4, r0
   270b8:	mov	r5, r3
   270bc:	ldr	r0, [r0, #156]	; 0x9c
   270c0:	cmp	r2, #4
   270c4:	ldr	r3, [r4, #160]	; 0xa0
   270c8:	strd	r6, [sp, #8]
   270cc:	movcs	r7, r2
   270d0:	movcc	r7, #4
   270d4:	mov	r6, r1
   270d8:	strd	r8, [sp, #16]
   270dc:	add	r2, r0, #1
   270e0:	str	lr, [sp, #24]
   270e4:	sub	sp, sp, #12
   270e8:	cmp	r2, r3
   270ec:	str	r2, [r4, #156]	; 0x9c
   270f0:	ble	2720c <flatcc_builder_start_vector@@Base+0x15c>
   270f4:	ldr	r3, [r4, #176]	; 0xb0
   270f8:	cmp	r3, #0
   270fc:	cmpgt	r2, r3
   27100:	movgt	r3, #1
   27104:	movle	r3, #0
   27108:	bgt	2721c <flatcc_builder_start_vector@@Base+0x16c>
   2710c:	add	r0, r0, r0, lsl #3
   27110:	ldr	r1, [r4, #88]	; 0x58
   27114:	lsl	r8, r0, #2
   27118:	add	r2, r8, #36	; 0x24
   2711c:	cmp	r2, r1
   27120:	bls	27144 <flatcc_builder_start_vector@@Base+0x94>
   27124:	mov	ip, #4
   27128:	add	r1, r4, #84	; 0x54
   2712c:	ldr	r0, [r4, #40]	; 0x28
   27130:	str	ip, [sp]
   27134:	ldr	r9, [r4, #48]	; 0x30
   27138:	blx	r9
   2713c:	cmp	r0, #0
   27140:	bne	27224 <flatcc_builder_start_vector@@Base+0x174>
   27144:	ldr	r3, [r4, #84]	; 0x54
   27148:	add	r3, r3, r8
   2714c:	cmp	r3, #0
   27150:	str	r3, [r4, #32]
   27154:	beq	2721c <flatcc_builder_start_vector@@Base+0x16c>
   27158:	ldr	r2, [r4, #88]	; 0x58
   2715c:	movw	r0, #36409	; 0x8e39
   27160:	movt	r0, #14563	; 0x38e3
   27164:	ldr	r1, [r4, #176]	; 0xb0
   27168:	umull	r0, r2, r0, r2
   2716c:	lsr	r2, r2, #3
   27170:	cmp	r1, #0
   27174:	cmpgt	r2, r1
   27178:	movgt	r2, r1
   2717c:	str	r2, [r4, #160]	; 0xa0
   27180:	ldr	r2, [r4, #20]
   27184:	mvn	r9, #3
   27188:	mov	ip, #0
   2718c:	ldr	r0, [r4, #28]
   27190:	ldrh	lr, [r4, #130]	; 0x82
   27194:	ldr	r1, [r4, #64]	; 0x40
   27198:	ldr	r8, [r4, #60]	; 0x3c
   2719c:	str	r2, [r3, #8]
   271a0:	add	r2, r2, r0
   271a4:	add	r2, r2, #7
   271a8:	strh	lr, [r3, #12]
   271ac:	bic	r2, r2, #7
   271b0:	strh	r7, [r4, #130]	; 0x82
   271b4:	mov	r7, #4
   271b8:	sub	r1, r1, r2
   271bc:	str	r0, [r3]
   271c0:	mov	r0, ip
   271c4:	cmp	r1, r9
   271c8:	add	lr, r8, r2
   271cc:	str	ip, [r4, #20]
   271d0:	movhi	r1, r9
   271d4:	str	r2, [r4, #28]
   271d8:	strh	r7, [r3, #14]
   271dc:	str	r6, [r3, #16]
   271e0:	str	ip, [r3, #20]
   271e4:	str	r5, [r3, #24]
   271e8:	str	lr, [r4, #16]
   271ec:	str	r1, [r4, #24]
   271f0:	str	r9, [r3, #4]
   271f4:	add	sp, sp, #12
   271f8:	ldrd	r4, [sp]
   271fc:	ldrd	r6, [sp, #8]
   27200:	ldrd	r8, [sp, #16]
   27204:	add	sp, sp, #24
   27208:	pop	{pc}		; (ldr pc, [sp], #4)
   2720c:	ldr	r3, [r4, #32]
   27210:	add	r3, r3, #36	; 0x24
   27214:	str	r3, [r4, #32]
   27218:	b	27180 <flatcc_builder_start_vector@@Base+0xd0>
   2721c:	mvn	r0, #0
   27220:	b	271f4 <flatcc_builder_start_vector@@Base+0x144>
   27224:	bl	24d94 <flatcc_builder_default_alloc@@Base+0x124>

00027228 <flatcc_builder_start_offset_vector@@Base>:
   27228:	ldrd	r2, [r0, #156]	; 0x9c
   2722c:	strd	r4, [sp, #-16]!
   27230:	mov	r4, r0
   27234:	str	r6, [sp, #8]
   27238:	str	lr, [sp, #12]
   2723c:	sub	sp, sp, #8
   27240:	add	r1, r2, #1
   27244:	cmp	r1, r3
   27248:	str	r1, [r0, #156]	; 0x9c
   2724c:	ble	27364 <flatcc_builder_start_offset_vector@@Base+0x13c>
   27250:	ldr	r3, [r0, #176]	; 0xb0
   27254:	cmp	r3, #0
   27258:	cmpgt	r1, r3
   2725c:	movgt	r3, #1
   27260:	movle	r3, #0
   27264:	bgt	27374 <flatcc_builder_start_offset_vector@@Base+0x14c>
   27268:	add	r2, r2, r2, lsl #3
   2726c:	ldr	r1, [r0, #88]	; 0x58
   27270:	lsl	r5, r2, #2
   27274:	add	r2, r5, #36	; 0x24
   27278:	cmp	r2, r1
   2727c:	bls	272a0 <flatcc_builder_start_offset_vector@@Base+0x78>
   27280:	mov	ip, #4
   27284:	add	r1, r0, #84	; 0x54
   27288:	ldr	r0, [r0, #40]	; 0x28
   2728c:	str	ip, [sp]
   27290:	ldr	r6, [r4, #48]	; 0x30
   27294:	blx	r6
   27298:	cmp	r0, #0
   2729c:	bne	2737c <flatcc_builder_start_offset_vector@@Base+0x154>
   272a0:	ldr	r3, [r4, #84]	; 0x54
   272a4:	add	r3, r3, r5
   272a8:	cmp	r3, #0
   272ac:	str	r3, [r4, #32]
   272b0:	beq	27374 <flatcc_builder_start_offset_vector@@Base+0x14c>
   272b4:	ldr	r2, [r4, #88]	; 0x58
   272b8:	movw	r0, #36409	; 0x8e39
   272bc:	movt	r0, #14563	; 0x38e3
   272c0:	ldr	r1, [r4, #176]	; 0xb0
   272c4:	umull	r0, r2, r0, r2
   272c8:	lsr	r2, r2, #3
   272cc:	cmp	r1, #0
   272d0:	cmpgt	r2, r1
   272d4:	movgt	r2, r1
   272d8:	str	r2, [r4, #160]	; 0xa0
   272dc:	ldr	r2, [r4, #20]
   272e0:	mvn	r5, #3
   272e4:	mov	lr, #0
   272e8:	ldr	r0, [r4, #28]
   272ec:	ldrh	r6, [r4, #130]	; 0x82
   272f0:	ldr	ip, [r4, #60]	; 0x3c
   272f4:	ldr	r1, [r4, #64]	; 0x40
   272f8:	str	r2, [r3, #8]
   272fc:	add	r2, r2, r0
   27300:	add	r2, r2, #7
   27304:	strh	r6, [r3, #12]
   27308:	mov	r6, #4
   2730c:	bic	r2, r2, #7
   27310:	add	ip, ip, r2
   27314:	strh	r6, [r4, #130]	; 0x82
   27318:	sub	r1, r1, r2
   2731c:	str	r0, [r3]
   27320:	mov	r0, lr
   27324:	cmp	r1, r5
   27328:	str	lr, [r4, #20]
   2732c:	movhi	r1, r5
   27330:	str	r2, [r4, #28]
   27334:	mov	r2, #5
   27338:	strh	r2, [r3, #14]
   2733c:	str	r6, [r3, #16]
   27340:	str	lr, [r3, #20]
   27344:	str	ip, [r4, #16]
   27348:	str	r1, [r4, #24]
   2734c:	str	r5, [r3, #4]
   27350:	add	sp, sp, #8
   27354:	ldrd	r4, [sp]
   27358:	ldr	r6, [sp, #8]
   2735c:	add	sp, sp, #12
   27360:	pop	{pc}		; (ldr pc, [sp], #4)
   27364:	ldr	r3, [r0, #32]
   27368:	add	r3, r3, #36	; 0x24
   2736c:	str	r3, [r0, #32]
   27370:	b	272dc <flatcc_builder_start_offset_vector@@Base+0xb4>
   27374:	mvn	r0, #0
   27378:	b	27350 <flatcc_builder_start_offset_vector@@Base+0x128>
   2737c:	bl	24d94 <flatcc_builder_default_alloc@@Base+0x124>

00027380 <flatcc_builder_create_offset_vector@@Base>:
   27380:	strd	r4, [sp, #-28]!	; 0xffffffe4
   27384:	mov	r5, r2
   27388:	mov	r4, r0
   2738c:	ldr	r3, [r0, #160]	; 0xa0
   27390:	strd	r6, [sp, #8]
   27394:	mov	r6, r1
   27398:	ldr	r1, [r0, #156]	; 0x9c
   2739c:	strd	r8, [sp, #16]
   273a0:	str	lr, [sp, #24]
   273a4:	sub	sp, sp, #12
   273a8:	add	r2, r1, #1
   273ac:	cmp	r2, r3
   273b0:	str	r2, [r0, #156]	; 0x9c
   273b4:	ble	2752c <flatcc_builder_create_offset_vector@@Base+0x1ac>
   273b8:	ldr	r3, [r0, #176]	; 0xb0
   273bc:	cmp	r2, r3
   273c0:	cmpgt	r3, #0
   273c4:	movgt	r3, #1
   273c8:	movle	r3, #0
   273cc:	bgt	2750c <flatcc_builder_create_offset_vector@@Base+0x18c>
   273d0:	add	r1, r1, r1, lsl #3
   273d4:	ldr	r0, [r0, #88]	; 0x58
   273d8:	lsl	r7, r1, #2
   273dc:	add	r2, r7, #36	; 0x24
   273e0:	cmp	r2, r0
   273e4:	bls	27408 <flatcc_builder_create_offset_vector@@Base+0x88>
   273e8:	mov	ip, #4
   273ec:	add	r1, r4, #84	; 0x54
   273f0:	ldr	r0, [r4, #40]	; 0x28
   273f4:	str	ip, [sp]
   273f8:	ldr	r8, [r4, #48]	; 0x30
   273fc:	blx	r8
   27400:	cmp	r0, #0
   27404:	bne	275d0 <flatcc_builder_create_offset_vector@@Base+0x250>
   27408:	ldr	r3, [r4, #84]	; 0x54
   2740c:	add	r3, r3, r7
   27410:	cmp	r3, #0
   27414:	str	r3, [r4, #32]
   27418:	beq	2750c <flatcc_builder_create_offset_vector@@Base+0x18c>
   2741c:	ldr	r2, [r4, #88]	; 0x58
   27420:	movw	r0, #36409	; 0x8e39
   27424:	movt	r0, #14563	; 0x38e3
   27428:	ldr	r1, [r4, #176]	; 0xb0
   2742c:	umull	r0, r2, r0, r2
   27430:	lsr	r2, r2, #3
   27434:	cmp	r2, r1
   27438:	cmpgt	r1, #0
   2743c:	movgt	r2, r1
   27440:	str	r2, [r4, #160]	; 0xa0
   27444:	ldr	r2, [r4, #20]
   27448:	mvn	lr, #3
   2744c:	mov	r0, #4
   27450:	ldr	r8, [r4, #28]
   27454:	ldrh	r7, [r4, #130]	; 0x82
   27458:	ldr	r1, [r4, #64]	; 0x40
   2745c:	ldr	r9, [r4, #60]	; 0x3c
   27460:	str	r2, [r3, #8]
   27464:	add	r2, r2, r8
   27468:	add	r2, r2, #7
   2746c:	strh	r7, [r3, #12]
   27470:	mov	r7, #0
   27474:	bic	r2, r2, #7
   27478:	strh	r0, [r4, #130]	; 0x82
   2747c:	sub	r1, r1, r2
   27480:	str	r8, [r3]
   27484:	cmp	r1, lr
   27488:	add	r9, r9, r2
   2748c:	str	r7, [r4, #20]
   27490:	movls	ip, r1
   27494:	movhi	ip, lr
   27498:	str	r2, [r4, #28]
   2749c:	mov	r1, #5
   274a0:	strh	r1, [r3, #14]
   274a4:	mov	r1, r5
   274a8:	str	r0, [r3, #16]
   274ac:	mov	r0, r4
   274b0:	str	r7, [r3, #20]
   274b4:	str	r9, [r4, #16]
   274b8:	str	ip, [r4, #24]
   274bc:	str	lr, [r3, #4]
   274c0:	bl	2677c <flatcc_builder_extend_offset_vector@@Base>
   274c4:	cmp	r0, r7
   274c8:	beq	2750c <flatcc_builder_create_offset_vector@@Base+0x18c>
   274cc:	lsl	r2, r5, #2
   274d0:	mov	r1, r6
   274d4:	bl	14524 <memcpy@plt>
   274d8:	ldr	r3, [r4, #32]
   274dc:	ldrh	r2, [r3, #14]
   274e0:	cmp	r2, #5
   274e4:	bne	275b4 <flatcc_builder_create_offset_vector@@Base+0x234>
   274e8:	ldr	r2, [r3, #20]
   274ec:	cmn	r2, #-1073741823	; 0xc0000001
   274f0:	bhi	2750c <flatcc_builder_create_offset_vector@@Base+0x18c>
   274f4:	mov	r3, r7
   274f8:	mov	r0, r4
   274fc:	ldr	r1, [r4, #16]
   27500:	bl	24ff8 <flatcc_builder_default_alloc@@Base+0x388>
   27504:	subs	r5, r0, #0
   27508:	bne	2753c <flatcc_builder_create_offset_vector@@Base+0x1bc>
   2750c:	mov	r5, #0
   27510:	mov	r0, r5
   27514:	add	sp, sp, #12
   27518:	ldrd	r4, [sp]
   2751c:	ldrd	r6, [sp, #8]
   27520:	ldrd	r8, [sp, #16]
   27524:	add	sp, sp, #24
   27528:	pop	{pc}		; (ldr pc, [sp], #4)
   2752c:	ldr	r3, [r0, #32]
   27530:	add	r3, r3, #36	; 0x24
   27534:	str	r3, [r0, #32]
   27538:	b	27444 <flatcc_builder_create_offset_vector@@Base+0xc4>
   2753c:	mov	r1, r7
   27540:	ldr	r0, [r4, #16]
   27544:	ldr	r2, [r4, #20]
   27548:	bl	1459c <memset@plt>
   2754c:	ldr	r3, [r4, #32]
   27550:	ldr	r0, [r4, #60]	; 0x3c
   27554:	ldr	r2, [r4, #64]	; 0x40
   27558:	ldr	ip, [r3]
   2755c:	ldmib	r3, {r1, lr}
   27560:	add	r0, r0, ip
   27564:	sub	r2, r2, ip
   27568:	str	r0, [r4, #16]
   2756c:	cmp	r2, r1
   27570:	ldrh	r0, [r4, #128]	; 0x80
   27574:	movcs	r2, r1
   27578:	str	lr, [r4, #20]
   2757c:	str	ip, [r4, #28]
   27580:	ldrh	ip, [r4, #130]	; 0x82
   27584:	str	r2, [r4, #24]
   27588:	ldr	r2, [r4, #156]	; 0x9c
   2758c:	str	r1, [r3, #4]
   27590:	cmp	r0, ip
   27594:	sub	r0, r3, #36	; 0x24
   27598:	strhcc	ip, [r4, #128]	; 0x80
   2759c:	ldrh	r1, [r3, #12]
   275a0:	sub	r3, r2, #1
   275a4:	str	r0, [r4, #32]
   275a8:	strh	r1, [r4, #130]	; 0x82
   275ac:	str	r3, [r4, #156]	; 0x9c
   275b0:	b	27510 <flatcc_builder_create_offset_vector@@Base+0x190>
   275b4:	movw	r1, #23364	; 0x5b44
   275b8:	movt	r1, #4
   275bc:	ldr	r3, [pc, #16]	; 275d4 <flatcc_builder_create_offset_vector@@Base+0x254>
   275c0:	movw	r0, #23836	; 0x5d1c
   275c4:	movt	r0, #4
   275c8:	movw	r2, #1480	; 0x5c8
   275cc:	bl	145f0 <__assert_fail@plt>
   275d0:	bl	24d94 <flatcc_builder_default_alloc@@Base+0x124>
   275d4:	andeq	r5, r4, r0, lsl #17

000275d8 <flatcc_builder_start_string@@Base>:
   275d8:	ldrd	r2, [r0, #156]	; 0x9c
   275dc:	strd	r4, [sp, #-16]!
   275e0:	mov	r4, r0
   275e4:	str	r6, [sp, #8]
   275e8:	str	lr, [sp, #12]
   275ec:	sub	sp, sp, #8
   275f0:	add	r1, r2, #1
   275f4:	cmp	r1, r3
   275f8:	str	r1, [r0, #156]	; 0x9c
   275fc:	ble	27714 <flatcc_builder_start_string@@Base+0x13c>
   27600:	ldr	r3, [r0, #176]	; 0xb0
   27604:	cmp	r3, #0
   27608:	cmpgt	r1, r3
   2760c:	movgt	r3, #1
   27610:	movle	r3, #0
   27614:	bgt	27724 <flatcc_builder_start_string@@Base+0x14c>
   27618:	add	r2, r2, r2, lsl #3
   2761c:	ldr	r1, [r0, #88]	; 0x58
   27620:	lsl	r5, r2, #2
   27624:	add	r2, r5, #36	; 0x24
   27628:	cmp	r2, r1
   2762c:	bls	27650 <flatcc_builder_start_string@@Base+0x78>
   27630:	mov	ip, #4
   27634:	add	r1, r0, #84	; 0x54
   27638:	ldr	r0, [r0, #40]	; 0x28
   2763c:	str	ip, [sp]
   27640:	ldr	r6, [r4, #48]	; 0x30
   27644:	blx	r6
   27648:	cmp	r0, #0
   2764c:	bne	2772c <flatcc_builder_start_string@@Base+0x154>
   27650:	ldr	r3, [r4, #84]	; 0x54
   27654:	add	r3, r3, r5
   27658:	cmp	r3, #0
   2765c:	str	r3, [r4, #32]
   27660:	beq	27724 <flatcc_builder_start_string@@Base+0x14c>
   27664:	ldr	r2, [r4, #88]	; 0x58
   27668:	movw	r0, #36409	; 0x8e39
   2766c:	movt	r0, #14563	; 0x38e3
   27670:	ldr	r1, [r4, #176]	; 0xb0
   27674:	umull	r0, r2, r0, r2
   27678:	lsr	r2, r2, #3
   2767c:	cmp	r1, #0
   27680:	cmpgt	r2, r1
   27684:	movgt	r2, r1
   27688:	str	r2, [r4, #160]	; 0xa0
   2768c:	ldr	r2, [r4, #20]
   27690:	mvn	r5, #3
   27694:	mov	lr, #0
   27698:	ldr	r0, [r4, #28]
   2769c:	ldrh	r6, [r4, #130]	; 0x82
   276a0:	ldr	ip, [r4, #60]	; 0x3c
   276a4:	ldr	r1, [r4, #64]	; 0x40
   276a8:	str	r2, [r3, #8]
   276ac:	add	r2, r2, r0
   276b0:	add	r2, r2, #7
   276b4:	strh	r6, [r3, #12]
   276b8:	mov	r6, #1
   276bc:	bic	r2, r2, #7
   276c0:	add	ip, ip, r2
   276c4:	strh	r6, [r4, #130]	; 0x82
   276c8:	sub	r1, r1, r2
   276cc:	str	r0, [r3]
   276d0:	mov	r0, lr
   276d4:	cmp	r1, r5
   276d8:	str	lr, [r4, #20]
   276dc:	movhi	r1, r5
   276e0:	str	r2, [r4, #28]
   276e4:	mov	r2, #6
   276e8:	strh	r2, [r3, #14]
   276ec:	str	r6, [r3, #16]
   276f0:	str	lr, [r3, #20]
   276f4:	str	ip, [r4, #16]
   276f8:	str	r1, [r4, #24]
   276fc:	str	r5, [r3, #4]
   27700:	add	sp, sp, #8
   27704:	ldrd	r4, [sp]
   27708:	ldr	r6, [sp, #8]
   2770c:	add	sp, sp, #12
   27710:	pop	{pc}		; (ldr pc, [sp], #4)
   27714:	ldr	r3, [r0, #32]
   27718:	add	r3, r3, #36	; 0x24
   2771c:	str	r3, [r0, #32]
   27720:	b	2768c <flatcc_builder_start_string@@Base+0xb4>
   27724:	mvn	r0, #0
   27728:	b	27700 <flatcc_builder_start_string@@Base+0x128>
   2772c:	bl	24d94 <flatcc_builder_default_alloc@@Base+0x124>

00027730 <flatcc_builder_reserve_table@@Base>:
   27730:	cmp	r1, #0
   27734:	strd	r4, [sp, #-20]!	; 0xffffffec
   27738:	strd	r6, [sp, #8]
   2773c:	str	lr, [sp, #16]
   27740:	sub	sp, sp, #12
   27744:	blt	27828 <flatcc_builder_reserve_table@@Base+0xf8>
   27748:	ldr	r2, [r0, #32]
   2774c:	add	r1, r1, #2
   27750:	mov	r4, r0
   27754:	lsl	r5, r1, #1
   27758:	ldr	r1, [r0, #56]	; 0x38
   2775c:	ldrh	r6, [r2, #28]
   27760:	ldr	r3, [r2, #16]
   27764:	add	r6, r3, r6, lsl #1
   27768:	add	r2, r6, r5
   2776c:	cmp	r2, r1
   27770:	bhi	277d8 <flatcc_builder_reserve_table@@Base+0xa8>
   27774:	ldr	r3, [r4, #52]	; 0x34
   27778:	adds	r3, r3, r6
   2777c:	mvneq	r0, #0
   27780:	streq	r3, [r4, #4]
   27784:	beq	277c4 <flatcc_builder_reserve_table@@Base+0x94>
   27788:	ldr	r2, [r4, #32]
   2778c:	add	r3, r3, #4
   27790:	ldr	r1, [r4, #80]	; 0x50
   27794:	ldr	r6, [r2, #20]
   27798:	str	r3, [r4, #4]
   2779c:	add	r2, r5, r6
   277a0:	sub	r2, r2, #3
   277a4:	cmp	r2, r1
   277a8:	bhi	27800 <flatcc_builder_reserve_table@@Base+0xd0>
   277ac:	ldr	r3, [r4, #76]	; 0x4c
   277b0:	add	r3, r3, r6
   277b4:	clz	r0, r3
   277b8:	lsr	r0, r0, #5
   277bc:	str	r3, [r4]
   277c0:	rsb	r0, r0, #0
   277c4:	add	sp, sp, #12
   277c8:	ldrd	r4, [sp]
   277cc:	ldrd	r6, [sp, #8]
   277d0:	add	sp, sp, #16
   277d4:	pop	{pc}		; (ldr pc, [sp], #4)
   277d8:	mov	ip, #0
   277dc:	add	r1, r0, #52	; 0x34
   277e0:	ldr	r0, [r0, #40]	; 0x28
   277e4:	mov	r3, #1
   277e8:	str	ip, [sp]
   277ec:	ldr	r7, [r4, #48]	; 0x30
   277f0:	blx	r7
   277f4:	cmp	r0, #0
   277f8:	beq	27774 <flatcc_builder_reserve_table@@Base+0x44>
   277fc:	bl	24d94 <flatcc_builder_default_alloc@@Base+0x124>
   27800:	mov	ip, #3
   27804:	mov	r3, #0
   27808:	ldr	r0, [r4, #40]	; 0x28
   2780c:	add	r1, r4, #76	; 0x4c
   27810:	str	ip, [sp]
   27814:	ldr	r5, [r4, #48]	; 0x30
   27818:	blx	r5
   2781c:	cmp	r0, #0
   27820:	beq	277ac <flatcc_builder_reserve_table@@Base+0x7c>
   27824:	b	277fc <flatcc_builder_reserve_table@@Base+0xcc>
   27828:	movw	r1, #23364	; 0x5b44
   2782c:	movt	r1, #4
   27830:	ldr	r3, [pc, #12]	; 27844 <flatcc_builder_reserve_table@@Base+0x114>
   27834:	movw	r0, #24020	; 0x5dd4
   27838:	movt	r0, #4
   2783c:	movw	r2, #1065	; 0x429
   27840:	bl	145f0 <__assert_fail@plt>
   27844:	andeq	r5, r4, r4, lsr #17

00027848 <flatcc_builder_start_table@@Base>:
   27848:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2784c:	mov	r5, r1
   27850:	mov	r1, #4
   27854:	strd	r6, [sp, #8]
   27858:	mov	r4, r0
   2785c:	strd	r8, [sp, #16]
   27860:	str	sl, [sp, #24]
   27864:	str	lr, [sp, #28]
   27868:	sub	sp, sp, #8
   2786c:	bl	24ed4 <flatcc_builder_default_alloc@@Base+0x264>
   27870:	subs	r7, r0, #0
   27874:	bne	279bc <flatcc_builder_start_table@@Base+0x174>
   27878:	ldm	r4, {r0, r2}
   2787c:	add	r5, r5, #2
   27880:	movw	ip, #15186	; 0x3b52
   27884:	movt	ip, #12137	; 0x2f69
   27888:	lsl	r5, r5, #1
   2788c:	mov	r8, #3
   27890:	ldrh	lr, [r4, #8]
   27894:	ldr	r1, [r4, #52]	; 0x34
   27898:	ldr	sl, [r4, #76]	; 0x4c
   2789c:	ldr	r3, [r4, #32]
   278a0:	sub	r2, r2, r1
   278a4:	ldr	r9, [r4, #56]	; 0x38
   278a8:	add	r6, r2, lr, lsl #1
   278ac:	sub	r0, r0, sl
   278b0:	ldr	sl, [r4, #12]
   278b4:	str	r2, [r3, #16]
   278b8:	add	r2, r6, r5
   278bc:	str	r0, [r3, #20]
   278c0:	cmp	r2, r9
   278c4:	str	sl, [r3, #24]
   278c8:	strh	lr, [r3, #28]
   278cc:	strh	r7, [r4, #8]
   278d0:	str	ip, [r4, #12]
   278d4:	strh	r8, [r3, #14]
   278d8:	bls	27900 <flatcc_builder_start_table@@Base+0xb8>
   278dc:	mov	r3, #1
   278e0:	add	r1, r4, #52	; 0x34
   278e4:	str	r7, [sp]
   278e8:	ldr	r0, [r4, #40]	; 0x28
   278ec:	ldr	r8, [r4, #48]	; 0x30
   278f0:	blx	r8
   278f4:	cmp	r0, #0
   278f8:	bne	279b8 <flatcc_builder_start_table@@Base+0x170>
   278fc:	ldr	r1, [r4, #52]	; 0x34
   27900:	adds	r6, r6, r1
   27904:	streq	r6, [r4, #4]
   27908:	beq	279bc <flatcc_builder_start_table@@Base+0x174>
   2790c:	ldr	r1, [r4, #32]
   27910:	sub	r2, r5, #3
   27914:	add	r6, r6, #4
   27918:	ldr	r3, [r4, #80]	; 0x50
   2791c:	ldr	r5, [r1, #20]
   27920:	str	r6, [r4, #4]
   27924:	add	r2, r2, r5
   27928:	cmp	r2, r3
   2792c:	bhi	27994 <flatcc_builder_start_table@@Base+0x14c>
   27930:	ldr	r3, [r4, #76]	; 0x4c
   27934:	add	r3, r3, r5
   27938:	cmp	r3, #0
   2793c:	str	r3, [r4]
   27940:	beq	279bc <flatcc_builder_start_table@@Base+0x174>
   27944:	ldr	r0, [r4, #28]
   27948:	movw	r2, #65532	; 0xfffc
   2794c:	ldr	ip, [r4, #32]
   27950:	ldr	r3, [r4, #64]	; 0x40
   27954:	ldr	r1, [r4, #60]	; 0x3c
   27958:	sub	r3, r3, r0
   2795c:	cmp	r3, r2
   27960:	add	r1, r1, r0
   27964:	movcs	r3, r2
   27968:	str	r1, [r4, #16]
   2796c:	str	r3, [r4, #24]
   27970:	str	r2, [ip, #4]
   27974:	mov	r0, r7
   27978:	add	sp, sp, #8
   2797c:	ldrd	r4, [sp]
   27980:	ldrd	r6, [sp, #8]
   27984:	ldrd	r8, [sp, #16]
   27988:	ldr	sl, [sp, #24]
   2798c:	add	sp, sp, #28
   27990:	pop	{pc}		; (ldr pc, [sp], #4)
   27994:	mov	ip, #3
   27998:	mov	r3, #0
   2799c:	ldr	r0, [r4, #40]	; 0x28
   279a0:	add	r1, r4, #76	; 0x4c
   279a4:	str	ip, [sp]
   279a8:	ldr	r6, [r4, #48]	; 0x30
   279ac:	blx	r6
   279b0:	cmp	r0, #0
   279b4:	beq	27930 <flatcc_builder_start_table@@Base+0xe8>
   279b8:	bl	24d94 <flatcc_builder_default_alloc@@Base+0x124>
   279bc:	mvn	r7, #0
   279c0:	b	27974 <flatcc_builder_start_table@@Base+0x12c>

000279c4 <flatcc_builder_create_vtable@@Base>:
   279c4:	strd	r4, [sp, #-16]!
   279c8:	mov	r5, r0
   279cc:	mov	r3, #0
   279d0:	ldr	ip, [r5, #152]	; 0x98
   279d4:	subs	r0, r2, #0
   279d8:	str	r6, [sp, #8]
   279dc:	str	lr, [sp, #12]
   279e0:	sub	sp, sp, #80	; 0x50
   279e4:	str	r3, [sp, #8]
   279e8:	str	r3, [sp, #12]
   279ec:	beq	27a68 <flatcc_builder_create_vtable@@Base+0xa4>
   279f0:	mov	r2, #1
   279f4:	cmp	ip, r3
   279f8:	str	r0, [sp, #8]
   279fc:	str	r2, [sp, #12]
   27a00:	str	r1, [sp, #16]
   27a04:	str	r0, [sp, #20]
   27a08:	beq	27a98 <flatcc_builder_create_vtable@@Base+0xd4>
   27a0c:	ldr	r3, [r5, #136]	; 0x88
   27a10:	sub	r4, r3, r0
   27a14:	cmp	r3, r4
   27a18:	ble	27a7c <flatcc_builder_create_vtable@@Base+0xb8>
   27a1c:	mov	r3, r4
   27a20:	mov	r2, #1
   27a24:	str	r0, [sp]
   27a28:	add	r1, sp, #16
   27a2c:	ldr	r0, [r5, #36]	; 0x24
   27a30:	ldr	r6, [r5, #44]	; 0x2c
   27a34:	blx	r6
   27a38:	cmp	r0, #0
   27a3c:	bne	27ae0 <flatcc_builder_create_vtable@@Base+0x11c>
   27a40:	cmp	r4, #0
   27a44:	str	r4, [r5, #136]	; 0x88
   27a48:	beq	27a50 <flatcc_builder_create_vtable@@Base+0x8c>
   27a4c:	add	r4, r4, #1
   27a50:	mov	r0, r4
   27a54:	add	sp, sp, #80	; 0x50
   27a58:	ldrd	r4, [sp]
   27a5c:	ldr	r6, [sp, #8]
   27a60:	add	sp, sp, #12
   27a64:	pop	{pc}		; (ldr pc, [sp], #4)
   27a68:	cmp	ip, #0
   27a6c:	bne	27a7c <flatcc_builder_create_vtable@@Base+0xb8>
   27a70:	ldr	r2, [r5, #180]	; 0xb4
   27a74:	cmp	r2, #0
   27a78:	beq	27ad8 <flatcc_builder_create_vtable@@Base+0x114>
   27a7c:	movw	r1, #23364	; 0x5b44
   27a80:	movt	r1, #4
   27a84:	ldr	r3, [pc, #88]	; 27ae4 <flatcc_builder_create_vtable@@Base+0x120>
   27a88:	movw	r0, #23556	; 0x5c04
   27a8c:	movt	r0, #4
   27a90:	movw	r2, #647	; 0x287
   27a94:	bl	145f0 <__assert_fail@plt>
   27a98:	ldr	r3, [r5, #180]	; 0xb4
   27a9c:	cmp	r3, #0
   27aa0:	bne	27a0c <flatcc_builder_create_vtable@@Base+0x48>
   27aa4:	ldr	r4, [r5, #140]	; 0x8c
   27aa8:	mov	ip, r0
   27aac:	add	r0, r4, r0
   27ab0:	str	r0, [r5, #140]	; 0x8c
   27ab4:	mov	r3, r4
   27ab8:	add	r1, sp, #16
   27abc:	str	ip, [sp]
   27ac0:	ldr	r0, [r5, #36]	; 0x24
   27ac4:	ldr	r5, [r5, #44]	; 0x2c
   27ac8:	blx	r5
   27acc:	cmp	r0, #0
   27ad0:	beq	27a4c <flatcc_builder_create_vtable@@Base+0x88>
   27ad4:	bl	24dbc <flatcc_builder_default_alloc@@Base+0x14c>
   27ad8:	ldr	r4, [r5, #140]	; 0x8c
   27adc:	b	27ab4 <flatcc_builder_create_vtable@@Base+0xf0>
   27ae0:	bl	24e0c <flatcc_builder_default_alloc@@Base+0x19c>
   27ae4:	andeq	r5, r4, r0, lsr #8

00027ae8 <flatcc_builder_create_cached_vtable@@Base>:
   27ae8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27aec:	strd	r6, [sp, #8]
   27af0:	mov	r6, r0
   27af4:	strd	r8, [sp, #16]
   27af8:	mov	r9, r2
   27afc:	mov	r8, r3
   27b00:	strd	sl, [sp, #24]
   27b04:	str	lr, [sp, #32]
   27b08:	sub	sp, sp, #28
   27b0c:	str	r1, [sp, #8]
   27b10:	ldr	r1, [r0, #116]	; 0x74
   27b14:	cmp	r1, #0
   27b18:	rsbne	r1, r1, #32
   27b1c:	beq	27ca4 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   27b20:	ldr	sl, [r6, #92]	; 0x5c
   27b24:	lsr	r8, r8, r1
   27b28:	adds	fp, sl, r8, lsl #2
   27b2c:	str	fp, [sp, #12]
   27b30:	beq	27d40 <flatcc_builder_create_cached_vtable@@Base+0x258>
   27b34:	ldr	r5, [sl, r8, lsl #2]
   27b38:	cmp	r5, #0
   27b3c:	beq	27d74 <flatcc_builder_create_cached_vtable@@Base+0x28c>
   27b40:	mov	r3, #0
   27b44:	str	r8, [sp, #16]
   27b48:	mov	r8, fp
   27b4c:	mov	fp, r6
   27b50:	ldr	r7, [r6, #68]	; 0x44
   27b54:	str	r3, [sp, #20]
   27b58:	ldr	r3, [r6, #100]	; 0x64
   27b5c:	mov	r6, r3
   27b60:	add	r4, r6, r5
   27b64:	ldr	r1, [r4, #8]
   27b68:	ldrh	r2, [r7, r1]
   27b6c:	add	r1, r7, r1
   27b70:	cmp	r2, r9
   27b74:	bne	27c50 <flatcc_builder_create_cached_vtable@@Base+0x168>
   27b78:	mov	r2, r9
   27b7c:	ldr	r0, [sp, #8]
   27b80:	bl	14530 <memcmp@plt>
   27b84:	cmp	r0, #0
   27b88:	bne	27c50 <flatcc_builder_create_cached_vtable@@Base+0x168>
   27b8c:	ldr	r1, [r4, #4]
   27b90:	ldr	r2, [fp, #152]	; 0x98
   27b94:	cmp	r1, r2
   27b98:	beq	27c5c <flatcc_builder_create_cached_vtable@@Base+0x174>
   27b9c:	ldr	r5, [r4, #12]
   27ba0:	add	r8, r4, #12
   27ba4:	str	r4, [sp, #20]
   27ba8:	cmp	r5, #0
   27bac:	bne	27b60 <flatcc_builder_create_cached_vtable@@Base+0x78>
   27bb0:	ldr	r8, [sp, #16]
   27bb4:	mov	r6, fp
   27bb8:	ldr	r3, [r6, #104]	; 0x68
   27bbc:	ldr	r4, [r6, #124]	; 0x7c
   27bc0:	add	r2, r4, #16
   27bc4:	cmp	r2, r3
   27bc8:	bls	27bf0 <flatcc_builder_create_cached_vtable@@Base+0x108>
   27bcc:	mov	ip, #6
   27bd0:	mov	r3, #0
   27bd4:	ldr	r0, [r6, #40]	; 0x28
   27bd8:	add	r1, r6, #100	; 0x64
   27bdc:	str	ip, [sp]
   27be0:	ldr	r5, [r6, #48]	; 0x30
   27be4:	blx	r5
   27be8:	cmp	r0, #0
   27bec:	bne	27d70 <flatcc_builder_create_cached_vtable@@Base+0x288>
   27bf0:	ldr	r5, [r6, #100]	; 0x64
   27bf4:	adds	r7, r5, r4
   27bf8:	beq	27d40 <flatcc_builder_create_cached_vtable@@Base+0x258>
   27bfc:	ldr	r3, [r6, #124]	; 0x7c
   27c00:	mov	r2, r9
   27c04:	ldr	r0, [r6, #152]	; 0x98
   27c08:	ldr	r1, [sp, #8]
   27c0c:	add	ip, r3, #16
   27c10:	str	ip, [r6, #124]	; 0x7c
   27c14:	str	r0, [r7, #4]
   27c18:	mov	r0, r6
   27c1c:	ldr	ip, [sl, r8, lsl #2]
   27c20:	str	ip, [r7, #12]
   27c24:	str	r3, [sl, r8, lsl #2]
   27c28:	bl	279c4 <flatcc_builder_create_vtable@@Base>
   27c2c:	cmp	r0, #0
   27c30:	str	r0, [r5, r4]
   27c34:	beq	27d40 <flatcc_builder_create_cached_vtable@@Base+0x258>
   27c38:	ldr	r3, [sp, #20]
   27c3c:	cmp	r3, #0
   27c40:	beq	27d84 <flatcc_builder_create_cached_vtable@@Base+0x29c>
   27c44:	ldr	r3, [r3, #8]
   27c48:	str	r3, [r7, #8]
   27c4c:	b	27c88 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   27c50:	add	r8, r4, #12
   27c54:	ldr	r5, [r4, #12]
   27c58:	b	27ba8 <flatcc_builder_create_cached_vtable@@Base+0xc0>
   27c5c:	ldr	r3, [sp, #12]
   27c60:	mov	fp, r8
   27c64:	ldr	r8, [sp, #16]
   27c68:	cmp	r3, fp
   27c6c:	beq	27c84 <flatcc_builder_create_cached_vtable@@Base+0x19c>
   27c70:	ldr	r3, [r4, #12]
   27c74:	str	r3, [fp]
   27c78:	ldr	r3, [sl, r8, lsl #2]
   27c7c:	str	r3, [r4, #12]
   27c80:	str	r5, [sl, r8, lsl #2]
   27c84:	ldr	r0, [r4]
   27c88:	add	sp, sp, #28
   27c8c:	ldrd	r4, [sp]
   27c90:	ldrd	r6, [sp, #8]
   27c94:	ldrd	r8, [sp, #16]
   27c98:	ldrd	sl, [sp, #24]
   27c9c:	add	sp, sp, #32
   27ca0:	pop	{pc}		; (ldr pc, [sp], #4)
   27ca4:	ldr	r4, [r0, #124]	; 0x7c
   27ca8:	add	r5, r0, #92	; 0x5c
   27cac:	cmp	r4, #0
   27cb0:	bne	27e34 <flatcc_builder_create_cached_vtable@@Base+0x34c>
   27cb4:	ldr	r3, [r0, #104]	; 0x68
   27cb8:	cmp	r3, #15
   27cbc:	bls	27d48 <flatcc_builder_create_cached_vtable@@Base+0x260>
   27cc0:	ldr	r3, [r6, #100]	; 0x64
   27cc4:	cmp	r3, #0
   27cc8:	beq	27d40 <flatcc_builder_create_cached_vtable@@Base+0x258>
   27ccc:	mov	ip, #16
   27cd0:	mov	r2, #5
   27cd4:	ldr	r0, [r6, #40]	; 0x28
   27cd8:	mov	r1, r5
   27cdc:	mov	r3, #1
   27ce0:	str	r2, [sp]
   27ce4:	mov	r2, #256	; 0x100
   27ce8:	str	ip, [r6, #124]	; 0x7c
   27cec:	ldr	r5, [r6, #48]	; 0x30
   27cf0:	blx	r5
   27cf4:	cmp	r0, #0
   27cf8:	bne	27d40 <flatcc_builder_create_cached_vtable@@Base+0x258>
   27cfc:	mov	r3, #256	; 0x100
   27d00:	ldr	r1, [r6, #96]	; 0x60
   27d04:	b	27d0c <flatcc_builder_create_cached_vtable@@Base+0x224>
   27d08:	mov	r3, r2
   27d0c:	lsl	r2, r3, #1
   27d10:	cmp	r2, r1
   27d14:	bls	27d08 <flatcc_builder_create_cached_vtable@@Base+0x220>
   27d18:	lsr	r3, r3, #2
   27d1c:	cmp	r3, #1
   27d20:	bls	27d7c <flatcc_builder_create_cached_vtable@@Base+0x294>
   27d24:	mov	r2, #1
   27d28:	add	r4, r4, #1
   27d2c:	cmp	r3, r2, lsl r4
   27d30:	bhi	27d28 <flatcc_builder_create_cached_vtable@@Base+0x240>
   27d34:	rsb	r1, r4, #32
   27d38:	str	r4, [r6, #116]	; 0x74
   27d3c:	b	27b20 <flatcc_builder_create_cached_vtable@@Base+0x38>
   27d40:	mov	r0, #0
   27d44:	b	27c88 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   27d48:	mov	ip, #6
   27d4c:	add	r1, r0, #100	; 0x64
   27d50:	ldr	r0, [r0, #40]	; 0x28
   27d54:	mov	r3, r4
   27d58:	mov	r2, #16
   27d5c:	str	ip, [sp]
   27d60:	ldr	r7, [r6, #48]	; 0x30
   27d64:	blx	r7
   27d68:	cmp	r0, #0
   27d6c:	beq	27cc0 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   27d70:	bl	24d94 <flatcc_builder_default_alloc@@Base+0x124>
   27d74:	str	r5, [sp, #20]
   27d78:	b	27bb8 <flatcc_builder_create_cached_vtable@@Base+0xd0>
   27d7c:	mov	r1, #32
   27d80:	b	27d38 <flatcc_builder_create_cached_vtable@@Base+0x250>
   27d84:	ldr	r8, [r6, #120]	; 0x78
   27d88:	ldr	r3, [r6, #172]	; 0xac
   27d8c:	add	r2, r9, r8
   27d90:	cmp	r3, #0
   27d94:	beq	27dd4 <flatcc_builder_create_cached_vtable@@Base+0x2ec>
   27d98:	cmp	r3, r2
   27d9c:	bcs	27dd4 <flatcc_builder_create_cached_vtable@@Base+0x2ec>
   27da0:	ldr	r3, [r6, #116]	; 0x74
   27da4:	cmp	r3, #0
   27da8:	beq	27c88 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   27dac:	ldr	r7, [sp, #20]
   27db0:	ldr	r0, [r6, #92]	; 0x5c
   27db4:	ldr	r2, [r6, #96]	; 0x60
   27db8:	mov	r1, r7
   27dbc:	bl	1459c <memset@plt>
   27dc0:	mov	r3, #16
   27dc4:	mov	r2, r7
   27dc8:	ldr	r0, [r5, r4]
   27dcc:	strd	r2, [r6, #120]	; 0x78
   27dd0:	b	27c88 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   27dd4:	ldr	r3, [r6, #72]	; 0x48
   27dd8:	cmp	r3, r2
   27ddc:	bcs	27e04 <flatcc_builder_create_cached_vtable@@Base+0x31c>
   27de0:	mov	ip, #2
   27de4:	mov	r3, #0
   27de8:	ldr	r0, [r6, #40]	; 0x28
   27dec:	add	r1, r6, #68	; 0x44
   27df0:	str	ip, [sp]
   27df4:	ldr	sl, [r6, #48]	; 0x30
   27df8:	blx	sl
   27dfc:	cmp	r0, #0
   27e00:	bne	27d70 <flatcc_builder_create_cached_vtable@@Base+0x288>
   27e04:	ldr	r3, [r6, #68]	; 0x44
   27e08:	adds	r0, r3, r8
   27e0c:	beq	27e50 <flatcc_builder_create_cached_vtable@@Base+0x368>
   27e10:	ldr	r3, [r6, #120]	; 0x78
   27e14:	mov	r2, r9
   27e18:	ldr	r1, [sp, #8]
   27e1c:	add	r9, r3, r9
   27e20:	str	r3, [r7, #8]
   27e24:	str	r9, [r6, #120]	; 0x78
   27e28:	bl	14524 <memcpy@plt>
   27e2c:	ldr	r0, [r5, r4]
   27e30:	b	27c88 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   27e34:	movw	r1, #23364	; 0x5b44
   27e38:	movt	r1, #4
   27e3c:	ldr	r3, [pc, #20]	; 27e58 <flatcc_builder_create_cached_vtable@@Base+0x370>
   27e40:	movw	r0, #24032	; 0x5de0
   27e44:	movt	r0, #4
   27e48:	movw	r2, #342	; 0x156
   27e4c:	bl	145f0 <__assert_fail@plt>
   27e50:	mvn	r0, #0
   27e54:	b	27c88 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   27e58:	andeq	r5, r4, r4, asr #17

00027e5c <flatcc_builder_create_table@@Base>:
   27e5c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   27e60:	mov	r5, r0
   27e64:	strd	r6, [sp, #8]
   27e68:	str	r8, [sp, #16]
   27e6c:	str	lr, [sp, #20]
   27e70:	sub	sp, sp, #88	; 0x58
   27e74:	ldr	r6, [sp, #116]	; 0x74
   27e78:	ldr	r0, [sp, #120]	; 0x78
   27e7c:	cmp	r6, #0
   27e80:	blt	27fe8 <flatcc_builder_create_table@@Base+0x18c>
   27e84:	ands	r7, r0, #1
   27e88:	beq	27fcc <flatcc_builder_create_table@@Base+0x170>
   27e8c:	ldrh	ip, [r5, #128]	; 0x80
   27e90:	cmp	r3, #4
   27e94:	sub	r0, r0, #1
   27e98:	movcc	r3, #4
   27e9c:	cmp	ip, r3
   27ea0:	ldr	ip, [r5, #136]	; 0x88
   27ea4:	strhcc	r3, [r5, #128]	; 0x80
   27ea8:	sub	r3, r3, #1
   27eac:	cmp	r6, #0
   27eb0:	sub	r4, ip, r2
   27eb4:	mov	r8, r4
   27eb8:	sub	r4, r4, #4
   27ebc:	and	r8, r8, r3
   27ec0:	sub	r0, r4, r0
   27ec4:	sub	r0, r0, r8
   27ec8:	str	r0, [sp, #12]
   27ecc:	beq	27f00 <flatcc_builder_create_table@@Base+0xa4>
   27ed0:	ldr	ip, [sp, #112]	; 0x70
   27ed4:	sub	r4, r8, r4
   27ed8:	sub	r4, r4, #4
   27edc:	add	r6, ip, r6, lsl #1
   27ee0:	ldrh	r3, [ip], #2
   27ee4:	ldr	r0, [r1, r3]
   27ee8:	sub	lr, r4, r3
   27eec:	cmp	r6, ip
   27ef0:	add	r0, r0, lr
   27ef4:	str	r0, [r1, r3]
   27ef8:	bne	27ee0 <flatcc_builder_create_table@@Base+0x84>
   27efc:	ldr	ip, [r5, #136]	; 0x88
   27f00:	mov	r0, #4
   27f04:	add	r3, sp, #12
   27f08:	mov	lr, #1
   27f0c:	cmp	r2, #0
   27f10:	moveq	r2, #2
   27f14:	str	r0, [sp, #16]
   27f18:	str	lr, [sp, #20]
   27f1c:	str	r3, [sp, #24]
   27f20:	str	r0, [sp, #28]
   27f24:	beq	27f48 <flatcc_builder_create_table@@Base+0xec>
   27f28:	mov	r3, #2
   27f2c:	add	r0, r2, r0
   27f30:	mov	r7, r3
   27f34:	str	r0, [sp, #16]
   27f38:	str	r2, [sp, #36]	; 0x24
   27f3c:	mov	r2, #3
   27f40:	str	r3, [sp, #20]
   27f44:	str	r1, [sp, #32]
   27f48:	cmp	r8, #0
   27f4c:	bne	27fa0 <flatcc_builder_create_table@@Base+0x144>
   27f50:	sub	r4, ip, r0
   27f54:	cmp	r4, ip
   27f58:	bge	28008 <flatcc_builder_create_table@@Base+0x1ac>
   27f5c:	mov	r2, r7
   27f60:	mov	r3, r4
   27f64:	str	r0, [sp]
   27f68:	add	r1, sp, #24
   27f6c:	ldr	r0, [r5, #36]	; 0x24
   27f70:	ldr	r6, [r5, #44]	; 0x2c
   27f74:	blx	r6
   27f78:	cmp	r0, #0
   27f7c:	bne	28004 <flatcc_builder_create_table@@Base+0x1a8>
   27f80:	mov	r0, r4
   27f84:	str	r4, [r5, #136]	; 0x88
   27f88:	add	sp, sp, #88	; 0x58
   27f8c:	ldrd	r4, [sp]
   27f90:	ldrd	r6, [sp, #8]
   27f94:	ldr	r8, [sp, #16]
   27f98:	add	sp, sp, #20
   27f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   27fa0:	ldr	r1, [pc, #124]	; 28024 <flatcc_builder_create_table@@Base+0x1c8>
   27fa4:	add	r7, r7, #1
   27fa8:	add	r3, sp, #88	; 0x58
   27fac:	add	r3, r3, r7, lsl #3
   27fb0:	add	r0, r0, r8
   27fb4:	mov	r7, r2
   27fb8:	str	r0, [sp, #16]
   27fbc:	str	r2, [sp, #20]
   27fc0:	str	r1, [r3, #-72]	; 0xffffffb8
   27fc4:	str	r8, [r3, #-68]	; 0xffffffbc
   27fc8:	b	27f50 <flatcc_builder_create_table@@Base+0xf4>
   27fcc:	movw	r1, #23364	; 0x5b44
   27fd0:	movt	r1, #4
   27fd4:	ldr	r3, [pc, #76]	; 28028 <flatcc_builder_create_table@@Base+0x1cc>
   27fd8:	movw	r0, #24068	; 0x5e04
   27fdc:	movt	r0, #4
   27fe0:	movw	r2, #1243	; 0x4db
   27fe4:	bl	145f0 <__assert_fail@plt>
   27fe8:	movw	r1, #23364	; 0x5b44
   27fec:	movt	r1, #4
   27ff0:	ldr	r3, [pc, #48]	; 28028 <flatcc_builder_create_table@@Base+0x1cc>
   27ff4:	movw	r0, #24048	; 0x5df0
   27ff8:	movt	r0, #4
   27ffc:	movw	r2, #1237	; 0x4d5
   28000:	bl	145f0 <__assert_fail@plt>
   28004:	bl	24e0c <flatcc_builder_default_alloc@@Base+0x19c>
   28008:	movw	r1, #23364	; 0x5b44
   2800c:	movt	r1, #4
   28010:	ldr	r3, [pc, #20]	; 2802c <flatcc_builder_create_table@@Base+0x1d0>
   28014:	movw	r0, #23556	; 0x5c04
   28018:	movt	r0, #4
   2801c:	movw	r2, #647	; 0x287
   28020:	bl	145f0 <__assert_fail@plt>
   28024:	muleq	r4, ip, r4
   28028:	ldrdeq	r5, [r4], -r0
   2802c:	andeq	r5, r4, r0, lsr #8

00028030 <flatcc_builder_check_required_field@@Base>:
   28030:	ldr	r3, [r0, #32]
   28034:	ldrh	r3, [r3, #14]
   28038:	cmp	r3, #3
   2803c:	bne	2806c <flatcc_builder_check_required_field@@Base+0x3c>
   28040:	ldrh	r3, [r0, #8]
   28044:	cmp	r3, r1
   28048:	bls	28064 <flatcc_builder_check_required_field@@Base+0x34>
   2804c:	ldr	r3, [r0, #4]
   28050:	lsl	r1, r1, #1
   28054:	ldrh	r0, [r3, r1]
   28058:	adds	r0, r0, #0
   2805c:	movne	r0, #1
   28060:	bx	lr
   28064:	mov	r0, #0
   28068:	bx	lr
   2806c:	movw	r1, #23364	; 0x5b44
   28070:	movt	r1, #4
   28074:	ldr	r3, [pc, #20]	; 28090 <flatcc_builder_check_required_field@@Base+0x60>
   28078:	movw	r0, #24080	; 0x5e10
   2807c:	movt	r0, #4
   28080:	str	r4, [sp, #-8]!
   28084:	movw	r2, #1272	; 0x4f8
   28088:	str	lr, [sp, #4]
   2808c:	bl	145f0 <__assert_fail@plt>
   28090:	andeq	r5, r4, ip, ror #17

00028094 <flatcc_builder_check_union_field@@Base>:
   28094:	ldr	r3, [r0, #32]
   28098:	ldrh	r3, [r3, #14]
   2809c:	cmp	r3, #3
   280a0:	bne	28104 <flatcc_builder_check_union_field@@Base+0x70>
   280a4:	cmp	r1, #0
   280a8:	beq	280f0 <flatcc_builder_check_union_field@@Base+0x5c>
   280ac:	ldrh	r3, [r0, #8]
   280b0:	cmp	r3, r1
   280b4:	bls	280f0 <flatcc_builder_check_union_field@@Base+0x5c>
   280b8:	ldr	r3, [r0, #4]
   280bc:	sub	r1, r1, #-2147483647	; 0x80000001
   280c0:	lsl	r1, r1, #1
   280c4:	ldrh	r2, [r3, r1]!
   280c8:	cmp	r2, #0
   280cc:	ldrh	r1, [r3, #2]
   280d0:	beq	280e4 <flatcc_builder_check_union_field@@Base+0x50>
   280d4:	ldr	r3, [r0, #16]
   280d8:	ldrb	r3, [r3, r2]
   280dc:	cmp	r3, #0
   280e0:	bne	280f8 <flatcc_builder_check_union_field@@Base+0x64>
   280e4:	clz	r0, r1
   280e8:	lsr	r0, r0, #5
   280ec:	bx	lr
   280f0:	mov	r0, #0
   280f4:	bx	lr
   280f8:	adds	r0, r1, #0
   280fc:	movne	r0, #1
   28100:	bx	lr
   28104:	movw	r1, #23364	; 0x5b44
   28108:	movt	r1, #4
   2810c:	ldr	r3, [pc, #20]	; 28128 <flatcc_builder_check_union_field@@Base+0x94>
   28110:	movw	r0, #24080	; 0x5e10
   28114:	movt	r0, #4
   28118:	str	r4, [sp, #-8]!
   2811c:	movw	r2, #1279	; 0x4ff
   28120:	str	lr, [sp, #4]
   28124:	bl	145f0 <__assert_fail@plt>
   28128:	andeq	r5, r4, r0, lsl r9

0002812c <flatcc_builder_check_required@@Base>:
   2812c:	ldr	r3, [r0, #32]
   28130:	ldrh	r3, [r3, #14]
   28134:	cmp	r3, #3
   28138:	bne	281a0 <flatcc_builder_check_required@@Base+0x74>
   2813c:	ldrh	r3, [r0, #8]
   28140:	cmp	r3, r2
   28144:	blt	28198 <flatcc_builder_check_required@@Base+0x6c>
   28148:	cmp	r2, #0
   2814c:	ble	28190 <flatcc_builder_check_required@@Base+0x64>
   28150:	ldrh	r3, [r1]
   28154:	ldr	ip, [r0, #4]
   28158:	lsl	r3, r3, #1
   2815c:	ldrh	r0, [ip, r3]
   28160:	cmp	r0, #0
   28164:	bxeq	lr
   28168:	add	r2, r1, r2, lsl #1
   2816c:	add	r1, r1, #2
   28170:	b	28188 <flatcc_builder_check_required@@Base+0x5c>
   28174:	ldrh	r3, [r1], #2
   28178:	lsl	r3, r3, #1
   2817c:	ldrh	r0, [ip, r3]
   28180:	cmp	r0, #0
   28184:	bxeq	lr
   28188:	cmp	r1, r2
   2818c:	bne	28174 <flatcc_builder_check_required@@Base+0x48>
   28190:	mov	r0, #1
   28194:	bx	lr
   28198:	mov	r0, #0
   2819c:	bx	lr
   281a0:	movw	r1, #23364	; 0x5b44
   281a4:	movt	r1, #4
   281a8:	ldr	r3, [pc, #20]	; 281c4 <flatcc_builder_check_required@@Base+0x98>
   281ac:	movw	r0, #24080	; 0x5e10
   281b0:	movt	r0, #4
   281b4:	str	r4, [sp, #-8]!
   281b8:	movw	r2, #1297	; 0x511
   281bc:	str	lr, [sp, #4]
   281c0:	bl	145f0 <__assert_fail@plt>
   281c4:	andeq	r5, r4, r4, lsr r9

000281c8 <flatcc_builder_end_table@@Base>:
   281c8:	ldr	r3, [r0, #32]
   281cc:	strd	r4, [sp, #-20]!	; 0xffffffec
   281d0:	ldrh	r3, [r3, #14]
   281d4:	strd	r6, [sp, #8]
   281d8:	str	lr, [sp, #16]
   281dc:	sub	sp, sp, #20
   281e0:	cmp	r3, #3
   281e4:	bne	28368 <flatcc_builder_end_table@@Base+0x1a0>
   281e8:	ldrh	r5, [r0, #8]
   281ec:	movw	ip, #31153	; 0x79b1
   281f0:	movt	ip, #40503	; 0x9e37
   281f4:	mov	r4, r0
   281f8:	ldr	r1, [r0, #4]
   281fc:	ldr	r3, [r0, #12]
   28200:	add	r5, r5, #2
   28204:	lsl	r5, r5, #1
   28208:	ldr	lr, [r0, #20]
   2820c:	sub	r6, r1, #4
   28210:	uxth	r5, r5
   28214:	eor	r3, r3, r5
   28218:	mov	r2, r5
   2821c:	strh	r5, [r1, #-4]
   28220:	mul	r3, ip, r3
   28224:	add	lr, lr, #4
   28228:	uxth	lr, lr
   2822c:	eor	r3, r3, lr
   28230:	strh	lr, [r1, #-2]
   28234:	mov	r1, r6
   28238:	mul	r3, ip, r3
   2823c:	str	r3, [r0, #12]
   28240:	bl	27ae8 <flatcc_builder_create_cached_vtable@@Base>
   28244:	subs	r7, r0, #0
   28248:	bne	28268 <flatcc_builder_end_table@@Base+0xa0>
   2824c:	mov	r5, #0
   28250:	mov	r0, r5
   28254:	add	sp, sp, #20
   28258:	ldrd	r4, [sp]
   2825c:	ldrd	r6, [sp, #8]
   28260:	add	sp, sp, #16
   28264:	pop	{pc}		; (ldr pc, [sp], #4)
   28268:	mov	r2, r5
   2826c:	mov	r1, #0
   28270:	mov	r0, r6
   28274:	bl	1459c <memset@plt>
   28278:	ldr	ip, [r4]
   2827c:	mov	r0, r4
   28280:	ldr	r3, [r4, #32]
   28284:	ldr	r2, [r4, #76]	; 0x4c
   28288:	ldr	r1, [r3, #20]
   2828c:	str	r7, [sp, #8]
   28290:	ldrh	r3, [r4, #130]	; 0x82
   28294:	add	r2, r2, r1
   28298:	ldr	r1, [r4, #16]
   2829c:	sub	ip, ip, r2
   282a0:	asr	ip, ip, #1
   282a4:	str	r2, [sp]
   282a8:	ldr	r2, [r4, #20]
   282ac:	str	ip, [sp, #4]
   282b0:	bl	27e5c <flatcc_builder_create_table@@Base>
   282b4:	subs	r5, r0, #0
   282b8:	beq	2824c <flatcc_builder_end_table@@Base+0x84>
   282bc:	ldr	r3, [r4, #32]
   282c0:	mov	r1, #0
   282c4:	ldr	r0, [r4, #52]	; 0x34
   282c8:	ldr	r2, [r4, #76]	; 0x4c
   282cc:	ldr	ip, [r3, #16]
   282d0:	ldr	r6, [r3, #20]
   282d4:	ldrh	lr, [r3, #28]
   282d8:	add	r0, r0, ip
   282dc:	ldr	ip, [r3, #24]
   282e0:	add	r3, r2, r6
   282e4:	ldr	r2, [r4, #20]
   282e8:	str	r3, [r4]
   282ec:	str	r0, [r4, #4]
   282f0:	strh	lr, [r4, #8]
   282f4:	str	ip, [r4, #12]
   282f8:	ldr	r0, [r4, #16]
   282fc:	bl	1459c <memset@plt>
   28300:	ldr	r3, [r4, #32]
   28304:	ldr	r0, [r4, #60]	; 0x3c
   28308:	ldr	r2, [r4, #64]	; 0x40
   2830c:	ldr	ip, [r3]
   28310:	ldmib	r3, {r1, lr}
   28314:	add	r0, r0, ip
   28318:	sub	r2, r2, ip
   2831c:	str	r0, [r4, #16]
   28320:	cmp	r2, r1
   28324:	ldrh	r0, [r4, #128]	; 0x80
   28328:	movcs	r2, r1
   2832c:	str	lr, [r4, #20]
   28330:	str	ip, [r4, #28]
   28334:	ldrh	ip, [r4, #130]	; 0x82
   28338:	str	r2, [r4, #24]
   2833c:	ldr	r2, [r4, #156]	; 0x9c
   28340:	str	r1, [r3, #4]
   28344:	cmp	r0, ip
   28348:	sub	r0, r3, #36	; 0x24
   2834c:	strhcc	ip, [r4, #128]	; 0x80
   28350:	ldrh	r1, [r3, #12]
   28354:	sub	r3, r2, #1
   28358:	str	r0, [r4, #32]
   2835c:	strh	r1, [r4, #130]	; 0x82
   28360:	str	r3, [r4, #156]	; 0x9c
   28364:	b	28250 <flatcc_builder_end_table@@Base+0x88>
   28368:	movw	r1, #23364	; 0x5b44
   2836c:	movt	r1, #4
   28370:	ldr	r3, [pc, #12]	; 28384 <flatcc_builder_end_table@@Base+0x1bc>
   28374:	movw	r0, #24080	; 0x5e10
   28378:	movt	r0, #4
   2837c:	movw	r2, #1317	; 0x525
   28380:	bl	145f0 <__assert_fail@plt>
   28384:	andeq	r5, r4, r4, asr r9

00028388 <flatcc_builder_create_vector@@Base>:
   28388:	strd	r4, [sp, #-16]!
   2838c:	mov	r4, r0
   28390:	str	r6, [sp, #8]
   28394:	str	lr, [sp, #12]
   28398:	sub	sp, sp, #88	; 0x58
   2839c:	ldr	ip, [sp, #108]	; 0x6c
   283a0:	ldrh	r0, [sp, #104]	; 0x68
   283a4:	cmp	r2, ip
   283a8:	bhi	2849c <flatcc_builder_create_vector@@Base+0x114>
   283ac:	ldrh	ip, [r4, #128]	; 0x80
   283b0:	cmp	r0, #4
   283b4:	mul	r3, r3, r2
   283b8:	movcc	r0, #4
   283bc:	add	lr, sp, #12
   283c0:	str	r2, [sp, #12]
   283c4:	ldr	r6, [r4, #136]	; 0x88
   283c8:	mov	r2, #1
   283cc:	str	lr, [sp, #24]
   283d0:	cmp	ip, r0
   283d4:	mov	ip, #4
   283d8:	strhcc	r0, [r4, #128]	; 0x80
   283dc:	sub	lr, r6, r3
   283e0:	sub	r0, r0, #1
   283e4:	cmp	r3, #0
   283e8:	and	r0, r0, lr
   283ec:	str	ip, [sp, #16]
   283f0:	moveq	r3, #2
   283f4:	str	r2, [sp, #20]
   283f8:	str	ip, [sp, #28]
   283fc:	beq	28420 <flatcc_builder_create_vector@@Base+0x98>
   28400:	mov	lr, #2
   28404:	add	ip, r3, ip
   28408:	mov	r2, lr
   2840c:	str	ip, [sp, #16]
   28410:	str	r3, [sp, #36]	; 0x24
   28414:	mov	r3, #3
   28418:	str	lr, [sp, #20]
   2841c:	str	r1, [sp, #32]
   28420:	cmp	r0, #0
   28424:	bne	28470 <flatcc_builder_create_vector@@Base+0xe8>
   28428:	sub	r5, r6, ip
   2842c:	cmp	r6, r5
   28430:	ble	284bc <flatcc_builder_create_vector@@Base+0x134>
   28434:	mov	r3, r5
   28438:	add	r1, sp, #24
   2843c:	str	ip, [sp]
   28440:	ldr	r0, [r4, #36]	; 0x24
   28444:	ldr	r6, [r4, #44]	; 0x2c
   28448:	blx	r6
   2844c:	cmp	r0, #0
   28450:	bne	284b8 <flatcc_builder_create_vector@@Base+0x130>
   28454:	mov	r0, r5
   28458:	str	r5, [r4, #136]	; 0x88
   2845c:	add	sp, sp, #88	; 0x58
   28460:	ldrd	r4, [sp]
   28464:	ldr	r6, [sp, #8]
   28468:	add	sp, sp, #12
   2846c:	pop	{pc}		; (ldr pc, [sp], #4)
   28470:	ldr	lr, [pc, #96]	; 284d8 <flatcc_builder_create_vector@@Base+0x150>
   28474:	add	r2, r2, #1
   28478:	add	r1, sp, #88	; 0x58
   2847c:	add	r1, r1, r2, lsl #3
   28480:	add	ip, ip, r0
   28484:	mov	r2, r3
   28488:	str	ip, [sp, #16]
   2848c:	str	r3, [sp, #20]
   28490:	str	lr, [r1, #-72]	; 0xffffffb8
   28494:	str	r0, [r1, #-68]	; 0xffffffbc
   28498:	b	28428 <flatcc_builder_create_vector@@Base+0xa0>
   2849c:	movw	r1, #23364	; 0x5b44
   284a0:	movt	r1, #4
   284a4:	ldr	r3, [pc, #48]	; 284dc <flatcc_builder_create_vector@@Base+0x154>
   284a8:	movw	r0, #24124	; 0x5e3c
   284ac:	movt	r0, #4
   284b0:	movw	r2, #1365	; 0x555
   284b4:	bl	145f0 <__assert_fail@plt>
   284b8:	bl	24e0c <flatcc_builder_default_alloc@@Base+0x19c>
   284bc:	movw	r1, #23364	; 0x5b44
   284c0:	movt	r1, #4
   284c4:	ldr	r3, [pc, #20]	; 284e0 <flatcc_builder_create_vector@@Base+0x158>
   284c8:	movw	r0, #23556	; 0x5c04
   284cc:	movt	r0, #4
   284d0:	movw	r2, #647	; 0x287
   284d4:	bl	145f0 <__assert_fail@plt>
   284d8:	muleq	r4, ip, r4
   284dc:	andeq	r5, r4, r0, ror r9
   284e0:	andeq	r5, r4, r0, lsr #8

000284e4 <flatcc_builder_end_vector@@Base>:
   284e4:	ldr	r2, [r0, #32]
   284e8:	strd	r4, [sp, #-16]!
   284ec:	ldrh	r3, [r2, #14]
   284f0:	str	r6, [sp, #8]
   284f4:	str	lr, [sp, #12]
   284f8:	sub	sp, sp, #88	; 0x58
   284fc:	cmp	r3, #4
   28500:	bne	286c8 <flatcc_builder_end_vector@@Base+0x1e4>
   28504:	ldr	ip, [r2, #20]
   28508:	mov	r4, r0
   2850c:	ldr	r1, [r2, #24]
   28510:	ldrh	r3, [r0, #130]	; 0x82
   28514:	ldr	r5, [r4, #16]
   28518:	cmp	ip, r1
   2851c:	ldr	r0, [r2, #16]
   28520:	bhi	286ac <flatcc_builder_end_vector@@Base+0x1c8>
   28524:	cmp	r3, #4
   28528:	mul	r0, r0, ip
   2852c:	mov	r1, #4
   28530:	ldrh	r2, [r4, #128]	; 0x80
   28534:	movcc	r3, #4
   28538:	add	r6, sp, #12
   2853c:	str	ip, [sp, #12]
   28540:	ldr	lr, [r4, #136]	; 0x88
   28544:	str	r1, [sp, #16]
   28548:	str	r6, [sp, #24]
   2854c:	cmp	r2, r3
   28550:	mov	r2, #1
   28554:	strhcc	r3, [r4, #128]	; 0x80
   28558:	sub	ip, lr, r0
   2855c:	sub	r3, r3, #1
   28560:	cmp	r0, #0
   28564:	and	r3, r3, ip
   28568:	str	r2, [sp, #20]
   2856c:	moveq	r0, #2
   28570:	str	r1, [sp, #28]
   28574:	beq	28598 <flatcc_builder_end_vector@@Base+0xb4>
   28578:	mov	ip, #2
   2857c:	add	r1, r0, r1
   28580:	mov	r2, ip
   28584:	str	r1, [sp, #16]
   28588:	str	r0, [sp, #36]	; 0x24
   2858c:	mov	r0, #3
   28590:	str	ip, [sp, #20]
   28594:	str	r5, [sp, #32]
   28598:	cmp	r3, #0
   2859c:	bne	28660 <flatcc_builder_end_vector@@Base+0x17c>
   285a0:	sub	r5, lr, r1
   285a4:	cmp	lr, r5
   285a8:	ble	28690 <flatcc_builder_end_vector@@Base+0x1ac>
   285ac:	mov	r3, r5
   285b0:	str	r1, [sp]
   285b4:	add	r1, sp, #24
   285b8:	ldr	r0, [r4, #36]	; 0x24
   285bc:	ldr	r6, [r4, #44]	; 0x2c
   285c0:	blx	r6
   285c4:	subs	r1, r0, #0
   285c8:	bne	2868c <flatcc_builder_end_vector@@Base+0x1a8>
   285cc:	cmp	r5, #0
   285d0:	str	r5, [r4, #136]	; 0x88
   285d4:	beq	28648 <flatcc_builder_end_vector@@Base+0x164>
   285d8:	ldr	r0, [r4, #16]
   285dc:	ldr	r2, [r4, #20]
   285e0:	bl	1459c <memset@plt>
   285e4:	ldr	r3, [r4, #32]
   285e8:	ldr	r0, [r4, #60]	; 0x3c
   285ec:	ldr	r2, [r4, #64]	; 0x40
   285f0:	ldr	ip, [r3]
   285f4:	ldmib	r3, {r1, lr}
   285f8:	add	r0, r0, ip
   285fc:	sub	r2, r2, ip
   28600:	str	r0, [r4, #16]
   28604:	cmp	r2, r1
   28608:	ldrh	r0, [r4, #128]	; 0x80
   2860c:	movcs	r2, r1
   28610:	str	lr, [r4, #20]
   28614:	str	ip, [r4, #28]
   28618:	ldrh	ip, [r4, #130]	; 0x82
   2861c:	str	r2, [r4, #24]
   28620:	ldr	r2, [r4, #156]	; 0x9c
   28624:	str	r1, [r3, #4]
   28628:	cmp	r0, ip
   2862c:	sub	r0, r3, #36	; 0x24
   28630:	strhcc	ip, [r4, #128]	; 0x80
   28634:	ldrh	r1, [r3, #12]
   28638:	sub	r3, r2, #1
   2863c:	str	r0, [r4, #32]
   28640:	strh	r1, [r4, #130]	; 0x82
   28644:	str	r3, [r4, #156]	; 0x9c
   28648:	mov	r0, r5
   2864c:	add	sp, sp, #88	; 0x58
   28650:	ldrd	r4, [sp]
   28654:	ldr	r6, [sp, #8]
   28658:	add	sp, sp, #12
   2865c:	pop	{pc}		; (ldr pc, [sp], #4)
   28660:	ldr	r5, [pc, #124]	; 286e4 <flatcc_builder_end_vector@@Base+0x200>
   28664:	add	r2, r2, #1
   28668:	add	ip, sp, #88	; 0x58
   2866c:	add	ip, ip, r2, lsl #3
   28670:	add	r1, r1, r3
   28674:	mov	r2, r0
   28678:	str	r1, [sp, #16]
   2867c:	str	r0, [sp, #20]
   28680:	str	r5, [ip, #-72]	; 0xffffffb8
   28684:	str	r3, [ip, #-68]	; 0xffffffbc
   28688:	b	285a0 <flatcc_builder_end_vector@@Base+0xbc>
   2868c:	bl	24e0c <flatcc_builder_default_alloc@@Base+0x19c>
   28690:	movw	r1, #23364	; 0x5b44
   28694:	movt	r1, #4
   28698:	ldr	r3, [pc, #72]	; 286e8 <flatcc_builder_end_vector@@Base+0x204>
   2869c:	movw	r0, #23556	; 0x5c04
   286a0:	movt	r0, #4
   286a4:	movw	r2, #647	; 0x287
   286a8:	bl	145f0 <__assert_fail@plt>
   286ac:	movw	r1, #23364	; 0x5b44
   286b0:	movt	r1, #4
   286b4:	ldr	r3, [pc, #48]	; 286ec <flatcc_builder_end_vector@@Base+0x208>
   286b8:	movw	r0, #24124	; 0x5e3c
   286bc:	movt	r0, #4
   286c0:	movw	r2, #1365	; 0x555
   286c4:	bl	145f0 <__assert_fail@plt>
   286c8:	movw	r1, #23364	; 0x5b44
   286cc:	movt	r1, #4
   286d0:	ldr	r3, [pc, #24]	; 286f0 <flatcc_builder_end_vector@@Base+0x20c>
   286d4:	movw	r0, #23728	; 0x5cb0
   286d8:	movt	r0, #4
   286dc:	movw	r2, #1400	; 0x578
   286e0:	bl	145f0 <__assert_fail@plt>
   286e4:	muleq	r4, ip, r4
   286e8:	andeq	r5, r4, r0, lsr #8
   286ec:	andeq	r5, r4, r0, ror r9
   286f0:	muleq	r4, r0, r9

000286f4 <flatcc_builder_vector_count@@Base>:
   286f4:	ldr	r3, [r0, #32]
   286f8:	ldr	r0, [r3, #20]
   286fc:	bx	lr

00028700 <flatcc_builder_vector_edit@@Base>:
   28700:	ldr	r0, [r0, #16]
   28704:	bx	lr

00028708 <flatcc_builder_create_offset_vector_direct@@Base>:
   28708:	cmn	r2, #-1073741823	; 0xc0000001
   2870c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   28710:	strd	r6, [sp, #8]
   28714:	str	r8, [sp, #16]
   28718:	str	lr, [sp, #20]
   2871c:	sub	sp, sp, #88	; 0x58
   28720:	bhi	28824 <flatcc_builder_create_offset_vector_direct@@Base+0x11c>
   28724:	ldrh	r3, [r0, #128]	; 0x80
   28728:	mov	r4, r0
   2872c:	mov	ip, #1
   28730:	str	r2, [sp, #12]
   28734:	ldr	r5, [r4, #136]	; 0x88
   28738:	str	ip, [sp, #20]
   2873c:	cmp	r3, #3
   28740:	movls	r3, #4
   28744:	strhls	r3, [r0, #128]	; 0x80
   28748:	mov	r0, #4
   2874c:	add	r3, sp, #12
   28750:	lsls	lr, r2, #2
   28754:	str	r0, [sp, #16]
   28758:	moveq	r7, #2
   2875c:	str	r3, [sp, #24]
   28760:	and	r3, r5, #3
   28764:	str	r0, [sp, #28]
   28768:	beq	2878c <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   2876c:	mov	r6, #2
   28770:	add	r0, lr, r0
   28774:	mov	ip, r6
   28778:	mov	r7, #3
   2877c:	str	r0, [sp, #16]
   28780:	str	r6, [sp, #20]
   28784:	str	r1, [sp, #32]
   28788:	str	lr, [sp, #36]	; 0x24
   2878c:	cmp	r3, #0
   28790:	bne	287f8 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
   28794:	cmp	r2, #0
   28798:	beq	28848 <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   2879c:	ldr	r3, [r1]
   287a0:	cmp	r3, #0
   287a4:	subne	lr, lr, #4
   287a8:	movne	r2, #0
   287ac:	beq	287dc <flatcc_builder_create_offset_vector_direct@@Base+0xd4>
   287b0:	sub	r3, r3, #4
   287b4:	cmp	r2, lr
   287b8:	sub	r3, r3, r5
   287bc:	add	r3, r3, r0
   287c0:	sub	r3, r3, r2
   287c4:	str	r3, [r1]
   287c8:	beq	28844 <flatcc_builder_create_offset_vector_direct@@Base+0x13c>
   287cc:	ldr	r3, [r1, #4]!
   287d0:	add	r2, r2, #4
   287d4:	cmp	r3, #0
   287d8:	bne	287b0 <flatcc_builder_create_offset_vector_direct@@Base+0xa8>
   287dc:	movw	r1, #23364	; 0x5b44
   287e0:	movt	r1, #4
   287e4:	ldr	r3, [pc, #176]	; 2889c <flatcc_builder_create_offset_vector_direct@@Base+0x194>
   287e8:	movw	r0, #23556	; 0x5c04
   287ec:	movt	r0, #4
   287f0:	movw	r2, #1463	; 0x5b7
   287f4:	bl	145f0 <__assert_fail@plt>
   287f8:	ldr	r8, [pc, #160]	; 288a0 <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   287fc:	add	ip, ip, #1
   28800:	add	r6, sp, #88	; 0x58
   28804:	add	r6, r6, ip, lsl #3
   28808:	add	r0, r0, r3
   2880c:	mov	ip, r7
   28810:	str	r0, [sp, #16]
   28814:	str	r7, [sp, #20]
   28818:	str	r8, [r6, #-72]	; 0xffffffb8
   2881c:	str	r3, [r6, #-68]	; 0xffffffbc
   28820:	b	28794 <flatcc_builder_create_offset_vector_direct@@Base+0x8c>
   28824:	mov	r6, #0
   28828:	mov	r0, r6
   2882c:	add	sp, sp, #88	; 0x58
   28830:	ldrd	r4, [sp]
   28834:	ldrd	r6, [sp, #8]
   28838:	ldr	r8, [sp, #16]
   2883c:	add	sp, sp, #20
   28840:	pop	{pc}		; (ldr pc, [sp], #4)
   28844:	ldr	r5, [r4, #136]	; 0x88
   28848:	sub	r6, r5, r0
   2884c:	cmp	r6, r5
   28850:	bge	28880 <flatcc_builder_create_offset_vector_direct@@Base+0x178>
   28854:	mov	r2, ip
   28858:	mov	r3, r6
   2885c:	str	r0, [sp]
   28860:	add	r1, sp, #24
   28864:	ldr	r0, [r4, #36]	; 0x24
   28868:	ldr	r5, [r4, #44]	; 0x2c
   2886c:	blx	r5
   28870:	cmp	r0, #0
   28874:	streq	r6, [r4, #136]	; 0x88
   28878:	beq	28828 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   2887c:	bl	24e0c <flatcc_builder_default_alloc@@Base+0x19c>
   28880:	movw	r1, #23364	; 0x5b44
   28884:	movt	r1, #4
   28888:	ldr	r3, [pc, #20]	; 288a4 <flatcc_builder_create_offset_vector_direct@@Base+0x19c>
   2888c:	movw	r0, #23556	; 0x5c04
   28890:	movt	r0, #4
   28894:	movw	r2, #647	; 0x287
   28898:	bl	145f0 <__assert_fail@plt>
   2889c:	muleq	r4, ip, r6
   288a0:	muleq	r4, ip, r4
   288a4:	andeq	r5, r4, r0, lsr #8

000288a8 <flatcc_builder_end_offset_vector@@Base>:
   288a8:	ldr	r3, [r0, #32]
   288ac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   288b0:	ldrh	r2, [r3, #14]
   288b4:	strd	r6, [sp, #8]
   288b8:	str	r8, [sp, #16]
   288bc:	str	lr, [sp, #20]
   288c0:	sub	sp, sp, #88	; 0x58
   288c4:	cmp	r2, #5
   288c8:	bne	28ab0 <flatcc_builder_end_offset_vector@@Base+0x208>
   288cc:	ldr	r3, [r3, #20]
   288d0:	cmn	r3, #-1073741823	; 0xc0000001
   288d4:	bhi	289d8 <flatcc_builder_end_offset_vector@@Base+0x130>
   288d8:	ldrh	r2, [r0, #128]	; 0x80
   288dc:	mov	r4, r0
   288e0:	add	r5, sp, #12
   288e4:	mov	r1, #1
   288e8:	str	r3, [sp, #12]
   288ec:	ldr	ip, [r4, #136]	; 0x88
   288f0:	str	r1, [sp, #20]
   288f4:	ldr	r0, [r0, #16]
   288f8:	cmp	r2, #3
   288fc:	str	r5, [sp, #24]
   28900:	movls	r2, #4
   28904:	and	r5, ip, #3
   28908:	strhls	r2, [r4, #128]	; 0x80
   2890c:	mov	r2, #4
   28910:	lsls	lr, r3, #2
   28914:	moveq	r6, #2
   28918:	str	r2, [sp, #16]
   2891c:	str	r2, [sp, #28]
   28920:	beq	28944 <flatcc_builder_end_offset_vector@@Base+0x9c>
   28924:	mov	r7, #2
   28928:	add	r2, lr, r2
   2892c:	mov	r1, r7
   28930:	mov	r6, #3
   28934:	str	r2, [sp, #16]
   28938:	str	r7, [sp, #20]
   2893c:	str	r0, [sp, #32]
   28940:	str	lr, [sp, #36]	; 0x24
   28944:	cmp	r5, #0
   28948:	bne	289b0 <flatcc_builder_end_offset_vector@@Base+0x108>
   2894c:	cmp	r3, #0
   28950:	beq	28a00 <flatcc_builder_end_offset_vector@@Base+0x158>
   28954:	ldr	r3, [r0]
   28958:	cmp	r3, #0
   2895c:	subne	lr, lr, #4
   28960:	movne	r1, #0
   28964:	beq	28994 <flatcc_builder_end_offset_vector@@Base+0xec>
   28968:	sub	r3, r3, #4
   2896c:	cmp	r1, lr
   28970:	sub	r3, r3, ip
   28974:	add	r3, r3, r2
   28978:	sub	r3, r3, r1
   2897c:	str	r3, [r0]
   28980:	beq	289f8 <flatcc_builder_end_offset_vector@@Base+0x150>
   28984:	ldr	r3, [r0, #4]!
   28988:	add	r1, r1, #4
   2898c:	cmp	r3, #0
   28990:	bne	28968 <flatcc_builder_end_offset_vector@@Base+0xc0>
   28994:	movw	r1, #23364	; 0x5b44
   28998:	movt	r1, #4
   2899c:	ldr	r3, [pc, #328]	; 28aec <flatcc_builder_end_offset_vector@@Base+0x244>
   289a0:	movw	r0, #23556	; 0x5c04
   289a4:	movt	r0, #4
   289a8:	movw	r2, #1463	; 0x5b7
   289ac:	bl	145f0 <__assert_fail@plt>
   289b0:	ldr	r7, [pc, #312]	; 28af0 <flatcc_builder_end_offset_vector@@Base+0x248>
   289b4:	add	r1, r1, #1
   289b8:	add	r8, sp, #88	; 0x58
   289bc:	add	r1, r8, r1, lsl #3
   289c0:	add	r2, r2, r5
   289c4:	str	r2, [sp, #16]
   289c8:	str	r6, [sp, #20]
   289cc:	str	r7, [r1, #-72]	; 0xffffffb8
   289d0:	str	r5, [r1, #-68]	; 0xffffffbc
   289d4:	b	2894c <flatcc_builder_end_offset_vector@@Base+0xa4>
   289d8:	mov	r5, #0
   289dc:	mov	r0, r5
   289e0:	add	sp, sp, #88	; 0x58
   289e4:	ldrd	r4, [sp]
   289e8:	ldrd	r6, [sp, #8]
   289ec:	ldr	r8, [sp, #16]
   289f0:	add	sp, sp, #20
   289f4:	pop	{pc}		; (ldr pc, [sp], #4)
   289f8:	ldr	r2, [sp, #16]
   289fc:	ldr	ip, [r4, #136]	; 0x88
   28a00:	sub	r5, ip, r2
   28a04:	cmp	r5, ip
   28a08:	bge	28ad0 <flatcc_builder_end_offset_vector@@Base+0x228>
   28a0c:	add	r1, sp, #24
   28a10:	mov	r3, r5
   28a14:	str	r2, [sp]
   28a18:	ldr	r2, [sp, #20]
   28a1c:	ldr	r0, [r4, #36]	; 0x24
   28a20:	ldr	r6, [r4, #44]	; 0x2c
   28a24:	blx	r6
   28a28:	subs	r1, r0, #0
   28a2c:	bne	28acc <flatcc_builder_end_offset_vector@@Base+0x224>
   28a30:	cmp	r5, #0
   28a34:	str	r5, [r4, #136]	; 0x88
   28a38:	beq	289d8 <flatcc_builder_end_offset_vector@@Base+0x130>
   28a3c:	ldr	r0, [r4, #16]
   28a40:	ldr	r2, [r4, #20]
   28a44:	bl	1459c <memset@plt>
   28a48:	ldr	r3, [r4, #32]
   28a4c:	ldr	r0, [r4, #60]	; 0x3c
   28a50:	ldr	r2, [r4, #64]	; 0x40
   28a54:	ldr	ip, [r3]
   28a58:	ldmib	r3, {r1, lr}
   28a5c:	add	r0, r0, ip
   28a60:	sub	r2, r2, ip
   28a64:	str	r0, [r4, #16]
   28a68:	cmp	r2, r1
   28a6c:	ldrh	r0, [r4, #128]	; 0x80
   28a70:	movcs	r2, r1
   28a74:	str	lr, [r4, #20]
   28a78:	str	ip, [r4, #28]
   28a7c:	ldrh	ip, [r4, #130]	; 0x82
   28a80:	str	r2, [r4, #24]
   28a84:	ldr	r2, [r4, #156]	; 0x9c
   28a88:	str	r1, [r3, #4]
   28a8c:	cmp	r0, ip
   28a90:	sub	r0, r3, #36	; 0x24
   28a94:	strhcc	ip, [r4, #128]	; 0x80
   28a98:	ldrh	r1, [r3, #12]
   28a9c:	sub	r3, r2, #1
   28aa0:	str	r0, [r4, #32]
   28aa4:	strh	r1, [r4, #130]	; 0x82
   28aa8:	str	r3, [r4, #156]	; 0x9c
   28aac:	b	289dc <flatcc_builder_end_offset_vector@@Base+0x134>
   28ab0:	movw	r1, #23364	; 0x5b44
   28ab4:	movt	r1, #4
   28ab8:	ldr	r3, [pc, #52]	; 28af4 <flatcc_builder_end_offset_vector@@Base+0x24c>
   28abc:	movw	r0, #23836	; 0x5d1c
   28ac0:	movt	r0, #4
   28ac4:	movw	r2, #1480	; 0x5c8
   28ac8:	bl	145f0 <__assert_fail@plt>
   28acc:	bl	24e0c <flatcc_builder_default_alloc@@Base+0x19c>
   28ad0:	movw	r1, #23364	; 0x5b44
   28ad4:	movt	r1, #4
   28ad8:	ldr	r3, [pc, #24]	; 28af8 <flatcc_builder_end_offset_vector@@Base+0x250>
   28adc:	movw	r0, #23556	; 0x5c04
   28ae0:	movt	r0, #4
   28ae4:	movw	r2, #647	; 0x287
   28ae8:	bl	145f0 <__assert_fail@plt>
   28aec:	muleq	r4, ip, r6
   28af0:	muleq	r4, ip, r4
   28af4:	andeq	r5, r4, r0, lsl #17
   28af8:	andeq	r5, r4, r0, lsr #8

00028afc <flatcc_builder_end_offset_vector_for_unions@@Base>:
   28afc:	ldr	r2, [r0, #32]
   28b00:	strd	r4, [sp, #-16]!
   28b04:	ldrh	ip, [r2, #14]
   28b08:	str	r6, [sp, #8]
   28b0c:	str	lr, [sp, #12]
   28b10:	cmp	ip, #5
   28b14:	bne	28bcc <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   28b18:	ldr	r2, [r2, #20]
   28b1c:	cmn	r2, #-1073741823	; 0xc0000001
   28b20:	bhi	28b3c <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
   28b24:	mov	r3, r1
   28b28:	ldr	r1, [r0, #16]
   28b2c:	mov	r4, r0
   28b30:	bl	24ff8 <flatcc_builder_default_alloc@@Base+0x388>
   28b34:	subs	r5, r0, #0
   28b38:	bne	28b54 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   28b3c:	mov	r5, #0
   28b40:	mov	r0, r5
   28b44:	ldrd	r4, [sp]
   28b48:	ldr	r6, [sp, #8]
   28b4c:	add	sp, sp, #12
   28b50:	pop	{pc}		; (ldr pc, [sp], #4)
   28b54:	mov	r1, #0
   28b58:	ldr	r0, [r4, #16]
   28b5c:	ldr	r2, [r4, #20]
   28b60:	bl	1459c <memset@plt>
   28b64:	ldr	r3, [r4, #32]
   28b68:	ldr	r0, [r4, #60]	; 0x3c
   28b6c:	ldr	r2, [r4, #64]	; 0x40
   28b70:	ldr	ip, [r3]
   28b74:	ldmib	r3, {r1, lr}
   28b78:	add	r0, r0, ip
   28b7c:	sub	r2, r2, ip
   28b80:	str	r0, [r4, #16]
   28b84:	cmp	r2, r1
   28b88:	ldrh	r0, [r4, #128]	; 0x80
   28b8c:	movcs	r2, r1
   28b90:	str	lr, [r4, #20]
   28b94:	str	ip, [r4, #28]
   28b98:	ldrh	ip, [r4, #130]	; 0x82
   28b9c:	str	r2, [r4, #24]
   28ba0:	ldr	r2, [r4, #156]	; 0x9c
   28ba4:	str	r1, [r3, #4]
   28ba8:	cmp	r0, ip
   28bac:	sub	r0, r3, #36	; 0x24
   28bb0:	strhcc	ip, [r4, #128]	; 0x80
   28bb4:	ldrh	r1, [r3, #12]
   28bb8:	sub	r3, r2, #1
   28bbc:	str	r0, [r4, #32]
   28bc0:	strh	r1, [r4, #130]	; 0x82
   28bc4:	str	r3, [r4, #156]	; 0x9c
   28bc8:	b	28b40 <flatcc_builder_end_offset_vector_for_unions@@Base+0x44>
   28bcc:	movw	r1, #23364	; 0x5b44
   28bd0:	movt	r1, #4
   28bd4:	ldr	r3, [pc, #12]	; 28be8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   28bd8:	movw	r0, #23836	; 0x5d1c
   28bdc:	movt	r0, #4
   28be0:	movw	r2, #1493	; 0x5d5
   28be4:	bl	145f0 <__assert_fail@plt>
   28be8:	andeq	r5, r4, ip, lsr #19

00028bec <flatcc_builder_offset_vector_edit@@Base>:
   28bec:	ldr	r0, [r0, #16]
   28bf0:	bx	lr

00028bf4 <flatcc_builder_offset_vector_count@@Base>:
   28bf4:	ldr	r3, [r0, #32]
   28bf8:	ldr	r0, [r3, #20]
   28bfc:	bx	lr

00028c00 <flatcc_builder_create_union_vector@@Base>:
   28c00:	strd	r4, [sp, #-32]!	; 0xffffffe0
   28c04:	mov	r4, r1
   28c08:	mov	r1, #4
   28c0c:	strd	r6, [sp, #8]
   28c10:	mov	r6, r0
   28c14:	mov	r0, r4
   28c18:	strd	r8, [sp, #16]
   28c1c:	mov	r5, r2
   28c20:	mov	r7, r3
   28c24:	str	sl, [sp, #24]
   28c28:	str	lr, [sp, #28]
   28c2c:	sub	sp, sp, #8
   28c30:	bl	24ed4 <flatcc_builder_default_alloc@@Base+0x264>
   28c34:	cmp	r0, #0
   28c38:	bne	28da4 <flatcc_builder_create_union_vector@@Base+0x1a4>
   28c3c:	ldr	ip, [r4, #28]
   28c40:	mov	lr, #4
   28c44:	mov	r8, #5
   28c48:	mvn	r9, #3
   28c4c:	ldr	r3, [r4, #32]
   28c50:	ldr	r2, [r4, #64]	; 0x40
   28c54:	ldr	r1, [r4, #60]	; 0x3c
   28c58:	strh	r8, [r3, #14]
   28c5c:	str	lr, [r3, #16]
   28c60:	sub	r2, r2, ip
   28c64:	str	r0, [r3, #20]
   28c68:	mov	r0, r4
   28c6c:	cmn	r2, #4
   28c70:	add	r1, r1, ip
   28c74:	mvnhi	r2, #3
   28c78:	str	r1, [r4, #16]
   28c7c:	mov	r1, r7
   28c80:	str	r2, [r4, #24]
   28c84:	str	r9, [r3, #4]
   28c88:	bl	2677c <flatcc_builder_extend_offset_vector@@Base>
   28c8c:	cmp	r0, #0
   28c90:	beq	28da4 <flatcc_builder_create_union_vector@@Base+0x1a4>
   28c94:	ldr	r8, [r4, #20]
   28c98:	ldr	r3, [r4, #24]
   28c9c:	add	r2, r7, r8
   28ca0:	cmp	r2, r3
   28ca4:	str	r2, [r4, #20]
   28ca8:	bcs	28dd0 <flatcc_builder_create_union_vector@@Base+0x1d0>
   28cac:	ldr	r1, [r4, #16]
   28cb0:	adds	r8, r1, r8
   28cb4:	beq	28da4 <flatcc_builder_create_union_vector@@Base+0x1a4>
   28cb8:	cmp	r7, #0
   28cbc:	beq	28cec <flatcc_builder_create_union_vector@@Base+0xec>
   28cc0:	add	lr, r5, r7, lsl #3
   28cc4:	mov	r2, r5
   28cc8:	sub	r0, r8, #1
   28ccc:	sub	r3, r1, #4
   28cd0:	ldrb	ip, [r2]
   28cd4:	add	r2, r2, #8
   28cd8:	strb	ip, [r0, #1]!
   28cdc:	ldr	ip, [r2, #-4]
   28ce0:	cmp	lr, r2
   28ce4:	str	ip, [r3, #4]!
   28ce8:	bne	28cd0 <flatcc_builder_create_union_vector@@Base+0xd0>
   28cec:	mov	r3, r8
   28cf0:	mov	r2, r7
   28cf4:	mov	r0, r4
   28cf8:	bl	24ff8 <flatcc_builder_default_alloc@@Base+0x388>
   28cfc:	subs	r5, r0, #0
   28d00:	beq	28e30 <flatcc_builder_create_union_vector@@Base+0x230>
   28d04:	mvn	ip, #0
   28d08:	mov	r3, #1
   28d0c:	mov	r2, r7
   28d10:	mov	r1, r8
   28d14:	mov	r0, r4
   28d18:	stm	sp, {r3, ip}
   28d1c:	bl	28388 <flatcc_builder_create_vector@@Base>
   28d20:	mov	r7, r0
   28d24:	mov	r1, #0
   28d28:	ldr	r0, [r4, #16]
   28d2c:	ldr	r2, [r4, #20]
   28d30:	bl	1459c <memset@plt>
   28d34:	ldr	r3, [r4, #32]
   28d38:	str	r7, [r6]
   28d3c:	ldr	r0, [r4, #60]	; 0x3c
   28d40:	str	r5, [r6, #4]
   28d44:	ldr	r2, [r4, #64]	; 0x40
   28d48:	ldr	ip, [r3]
   28d4c:	ldmib	r3, {r1, lr}
   28d50:	add	r0, r0, ip
   28d54:	sub	r2, r2, ip
   28d58:	str	r0, [r4, #16]
   28d5c:	cmp	r2, r1
   28d60:	ldrh	r0, [r4, #128]	; 0x80
   28d64:	movcs	r2, r1
   28d68:	str	lr, [r4, #20]
   28d6c:	str	ip, [r4, #28]
   28d70:	ldrh	ip, [r4, #130]	; 0x82
   28d74:	str	r2, [r4, #24]
   28d78:	ldr	r2, [r4, #156]	; 0x9c
   28d7c:	str	r1, [r3, #4]
   28d80:	cmp	r0, ip
   28d84:	sub	r0, r3, #36	; 0x24
   28d88:	strhcc	ip, [r4, #128]	; 0x80
   28d8c:	ldrh	r1, [r3, #12]
   28d90:	sub	r3, r2, #1
   28d94:	str	r0, [r4, #32]
   28d98:	strh	r1, [r4, #130]	; 0x82
   28d9c:	str	r3, [r4, #156]	; 0x9c
   28da0:	b	28db0 <flatcc_builder_create_union_vector@@Base+0x1b0>
   28da4:	mov	r3, #0
   28da8:	str	r3, [r6]
   28dac:	str	r3, [r6, #4]
   28db0:	mov	r0, r6
   28db4:	add	sp, sp, #8
   28db8:	ldrd	r4, [sp]
   28dbc:	ldrd	r6, [sp, #8]
   28dc0:	ldrd	r8, [sp, #16]
   28dc4:	ldr	sl, [sp, #24]
   28dc8:	add	sp, sp, #28
   28dcc:	pop	{pc}		; (ldr pc, [sp], #4)
   28dd0:	ldr	ip, [r4, #28]
   28dd4:	mov	r0, #1
   28dd8:	add	r1, r4, #60	; 0x3c
   28ddc:	mov	r3, r0
   28de0:	str	r0, [sp]
   28de4:	ldr	sl, [r4, #48]	; 0x30
   28de8:	add	ip, ip, r0
   28dec:	ldr	r0, [r4, #40]	; 0x28
   28df0:	add	r2, ip, r2
   28df4:	blx	sl
   28df8:	cmp	r0, #0
   28dfc:	bne	28da4 <flatcc_builder_create_union_vector@@Base+0x1a4>
   28e00:	ldr	r1, [r4, #28]
   28e04:	ldr	r2, [r4, #32]
   28e08:	ldr	r3, [r4, #64]	; 0x40
   28e0c:	ldr	r0, [r4, #60]	; 0x3c
   28e10:	sub	r3, r3, r1
   28e14:	cmn	r3, #4
   28e18:	movhi	r3, r9
   28e1c:	add	r1, r0, r1
   28e20:	str	r1, [r4, #16]
   28e24:	str	r3, [r4, #24]
   28e28:	str	r9, [r2, #4]
   28e2c:	b	28cb0 <flatcc_builder_create_union_vector@@Base+0xb0>
   28e30:	mov	r7, r5
   28e34:	b	28d24 <flatcc_builder_create_union_vector@@Base+0x124>

00028e38 <flatcc_builder_create_union_vector_direct@@Base>:
   28e38:	strd	r4, [sp, #-24]!	; 0xffffffe8
   28e3c:	strd	r6, [sp, #8]
   28e40:	mov	r6, r0
   28e44:	str	r8, [sp, #16]
   28e48:	str	lr, [sp, #20]
   28e4c:	sub	sp, sp, #88	; 0x58
   28e50:	ldr	r4, [sp, #112]	; 0x70
   28e54:	cmn	r4, #-1073741823	; 0xc0000001
   28e58:	bhi	28f2c <flatcc_builder_create_union_vector_direct@@Base+0xf4>
   28e5c:	mov	r5, r1
   28e60:	mov	r8, r2
   28e64:	mov	r1, r3
   28e68:	mov	r0, r5
   28e6c:	mov	r3, r2
   28e70:	mov	r2, r4
   28e74:	bl	24ff8 <flatcc_builder_default_alloc@@Base+0x388>
   28e78:	subs	r7, r0, #0
   28e7c:	beq	28f2c <flatcc_builder_create_union_vector_direct@@Base+0xf4>
   28e80:	ldrh	r3, [r5, #128]	; 0x80
   28e84:	mov	r2, #1
   28e88:	mov	r1, #4
   28e8c:	str	r4, [sp, #12]
   28e90:	ldr	r0, [r5, #136]	; 0x88
   28e94:	str	r1, [sp, #16]
   28e98:	str	r1, [sp, #28]
   28e9c:	cmp	r3, #3
   28ea0:	movls	r3, #4
   28ea4:	strhls	r3, [r5, #128]	; 0x80
   28ea8:	add	r3, sp, #12
   28eac:	cmp	r4, #0
   28eb0:	moveq	ip, #2
   28eb4:	strd	r2, [sp, #20]
   28eb8:	sub	r3, r0, r4
   28ebc:	and	r3, r3, #3
   28ec0:	bne	28f54 <flatcc_builder_create_union_vector_direct@@Base+0x11c>
   28ec4:	cmp	r3, #0
   28ec8:	beq	28ef4 <flatcc_builder_create_union_vector_direct@@Base+0xbc>
   28ecc:	ldr	r4, [pc, #196]	; 28f98 <flatcc_builder_create_union_vector_direct@@Base+0x160>
   28ed0:	add	r2, r2, #1
   28ed4:	add	lr, sp, #88	; 0x58
   28ed8:	add	lr, lr, r2, lsl #3
   28edc:	add	r1, r1, r3
   28ee0:	mov	r2, ip
   28ee4:	str	r1, [sp, #16]
   28ee8:	str	ip, [sp, #20]
   28eec:	str	r4, [lr, #-72]	; 0xffffffb8
   28ef0:	str	r3, [lr, #-68]	; 0xffffffbc
   28ef4:	sub	r4, r0, r1
   28ef8:	cmp	r0, r4
   28efc:	ble	28f78 <flatcc_builder_create_union_vector_direct@@Base+0x140>
   28f00:	mov	r3, r4
   28f04:	str	r1, [sp]
   28f08:	add	r1, sp, #24
   28f0c:	ldr	r0, [r5, #36]	; 0x24
   28f10:	ldr	r8, [r5, #44]	; 0x2c
   28f14:	blx	r8
   28f18:	cmp	r0, #0
   28f1c:	bne	28f94 <flatcc_builder_create_union_vector_direct@@Base+0x15c>
   28f20:	stm	r6, {r4, r7}
   28f24:	str	r4, [r5, #136]	; 0x88
   28f28:	b	28f38 <flatcc_builder_create_union_vector_direct@@Base+0x100>
   28f2c:	mov	r3, #0
   28f30:	str	r3, [r6]
   28f34:	str	r3, [r6, #4]
   28f38:	mov	r0, r6
   28f3c:	add	sp, sp, #88	; 0x58
   28f40:	ldrd	r4, [sp]
   28f44:	ldrd	r6, [sp, #8]
   28f48:	ldr	r8, [sp, #16]
   28f4c:	add	sp, sp, #20
   28f50:	pop	{pc}		; (ldr pc, [sp], #4)
   28f54:	mov	lr, #2
   28f58:	add	r1, r4, r1
   28f5c:	mov	r2, lr
   28f60:	mov	ip, #3
   28f64:	str	r1, [sp, #16]
   28f68:	str	lr, [sp, #20]
   28f6c:	str	r8, [sp, #32]
   28f70:	str	r4, [sp, #36]	; 0x24
   28f74:	b	28ec4 <flatcc_builder_create_union_vector_direct@@Base+0x8c>
   28f78:	movw	r1, #23364	; 0x5b44
   28f7c:	movt	r1, #4
   28f80:	ldr	r3, [pc, #20]	; 28f9c <flatcc_builder_create_union_vector_direct@@Base+0x164>
   28f84:	movw	r0, #23556	; 0x5c04
   28f88:	movt	r0, #4
   28f8c:	movw	r2, #647	; 0x287
   28f90:	bl	145f0 <__assert_fail@plt>
   28f94:	bl	24e0c <flatcc_builder_default_alloc@@Base+0x19c>
   28f98:	muleq	r4, ip, r4
   28f9c:	andeq	r5, r4, r0, lsr #8

00028fa0 <flatcc_builder_start_union_vector@@Base>:
   28fa0:	ldrd	r2, [r0, #156]	; 0x9c
   28fa4:	strd	r4, [sp, #-16]!
   28fa8:	mov	r4, r0
   28fac:	str	r6, [sp, #8]
   28fb0:	str	lr, [sp, #12]
   28fb4:	sub	sp, sp, #8
   28fb8:	add	r1, r2, #1
   28fbc:	cmp	r1, r3
   28fc0:	str	r1, [r0, #156]	; 0x9c
   28fc4:	ble	290e0 <flatcc_builder_start_union_vector@@Base+0x140>
   28fc8:	ldr	r3, [r0, #176]	; 0xb0
   28fcc:	cmp	r3, #0
   28fd0:	cmpgt	r1, r3
   28fd4:	movgt	r3, #1
   28fd8:	movle	r3, #0
   28fdc:	bgt	290f0 <flatcc_builder_start_union_vector@@Base+0x150>
   28fe0:	add	r2, r2, r2, lsl #3
   28fe4:	ldr	r1, [r0, #88]	; 0x58
   28fe8:	lsl	r5, r2, #2
   28fec:	add	r2, r5, #36	; 0x24
   28ff0:	cmp	r2, r1
   28ff4:	bls	29018 <flatcc_builder_start_union_vector@@Base+0x78>
   28ff8:	mov	ip, #4
   28ffc:	add	r1, r0, #84	; 0x54
   29000:	ldr	r0, [r0, #40]	; 0x28
   29004:	str	ip, [sp]
   29008:	ldr	r6, [r4, #48]	; 0x30
   2900c:	blx	r6
   29010:	cmp	r0, #0
   29014:	bne	290f8 <flatcc_builder_start_union_vector@@Base+0x158>
   29018:	ldr	r3, [r4, #84]	; 0x54
   2901c:	add	r3, r3, r5
   29020:	cmp	r3, #0
   29024:	str	r3, [r4, #32]
   29028:	beq	290f0 <flatcc_builder_start_union_vector@@Base+0x150>
   2902c:	ldr	r2, [r4, #88]	; 0x58
   29030:	movw	r0, #36409	; 0x8e39
   29034:	movt	r0, #14563	; 0x38e3
   29038:	ldr	r1, [r4, #176]	; 0xb0
   2903c:	umull	r0, r2, r0, r2
   29040:	lsr	r2, r2, #3
   29044:	cmp	r1, #0
   29048:	cmpgt	r2, r1
   2904c:	movgt	r2, r1
   29050:	str	r2, [r4, #160]	; 0xa0
   29054:	ldr	r2, [r4, #20]
   29058:	mvn	r5, #3
   2905c:	mov	lr, #0
   29060:	ldr	r6, [r4, #28]
   29064:	ldrh	r0, [r4, #130]	; 0x82
   29068:	ldr	ip, [r4, #60]	; 0x3c
   2906c:	ldr	r1, [r4, #64]	; 0x40
   29070:	str	r2, [r3, #8]
   29074:	add	r2, r2, r6
   29078:	add	r2, r2, #7
   2907c:	strh	r0, [r3, #12]
   29080:	mov	r0, #4
   29084:	bic	r2, r2, #7
   29088:	add	ip, ip, r2
   2908c:	strh	r0, [r4, #130]	; 0x82
   29090:	mov	r0, lr
   29094:	sub	r1, r1, r2
   29098:	str	r6, [r3]
   2909c:	mov	r6, #8
   290a0:	cmp	r1, r5
   290a4:	str	lr, [r4, #20]
   290a8:	movhi	r1, r5
   290ac:	str	r2, [r4, #28]
   290b0:	mov	r2, #7
   290b4:	strh	r2, [r3, #14]
   290b8:	str	r6, [r3, #16]
   290bc:	str	lr, [r3, #20]
   290c0:	str	ip, [r4, #16]
   290c4:	str	r1, [r4, #24]
   290c8:	str	r5, [r3, #4]
   290cc:	add	sp, sp, #8
   290d0:	ldrd	r4, [sp]
   290d4:	ldr	r6, [sp, #8]
   290d8:	add	sp, sp, #12
   290dc:	pop	{pc}		; (ldr pc, [sp], #4)
   290e0:	ldr	r3, [r0, #32]
   290e4:	add	r3, r3, #36	; 0x24
   290e8:	str	r3, [r0, #32]
   290ec:	b	29054 <flatcc_builder_start_union_vector@@Base+0xb4>
   290f0:	mvn	r0, #0
   290f4:	b	290cc <flatcc_builder_start_union_vector@@Base+0x12c>
   290f8:	bl	24d94 <flatcc_builder_default_alloc@@Base+0x124>

000290fc <flatcc_builder_end_union_vector@@Base>:
   290fc:	ldr	r3, [r1, #32]
   29100:	strd	r4, [sp, #-28]!	; 0xffffffe4
   29104:	ldrh	r2, [r3, #14]
   29108:	strd	r6, [sp, #8]
   2910c:	strd	r8, [sp, #16]
   29110:	str	lr, [sp, #24]
   29114:	sub	sp, sp, #12
   29118:	cmp	r2, #7
   2911c:	bne	292d8 <flatcc_builder_end_union_vector@@Base+0x1dc>
   29120:	ldr	r5, [r3, #20]
   29124:	mov	r4, r1
   29128:	mov	r6, r0
   2912c:	ldr	r8, [r1, #20]
   29130:	ldr	r3, [r1, #24]
   29134:	lsl	r7, r5, #2
   29138:	add	r2, r7, r5
   2913c:	add	r2, r2, r8
   29140:	cmp	r2, r3
   29144:	str	r2, [r1, #20]
   29148:	bcs	29258 <flatcc_builder_end_union_vector@@Base+0x15c>
   2914c:	ldr	r3, [r1, #16]
   29150:	adds	r1, r3, r8
   29154:	beq	292c0 <flatcc_builder_end_union_vector@@Base+0x1c4>
   29158:	cmp	r5, #0
   2915c:	add	r7, r1, r7
   29160:	subne	r0, r7, #1
   29164:	addne	lr, r3, r5, lsl #3
   29168:	subne	r2, r1, #4
   2916c:	beq	2918c <flatcc_builder_end_union_vector@@Base+0x90>
   29170:	ldrb	ip, [r3]
   29174:	add	r3, r3, #8
   29178:	strb	ip, [r0, #1]!
   2917c:	ldr	ip, [r3, #-4]
   29180:	cmp	lr, r3
   29184:	str	ip, [r2, #4]!
   29188:	bne	29170 <flatcc_builder_end_union_vector@@Base+0x74>
   2918c:	mov	r3, r7
   29190:	mov	r2, r5
   29194:	mov	r0, r4
   29198:	bl	24ff8 <flatcc_builder_default_alloc@@Base+0x388>
   2919c:	subs	r8, r0, #0
   291a0:	beq	292d0 <flatcc_builder_end_union_vector@@Base+0x1d4>
   291a4:	mvn	ip, #0
   291a8:	mov	r3, #1
   291ac:	mov	r2, r5
   291b0:	mov	r1, r7
   291b4:	mov	r0, r4
   291b8:	stm	sp, {r3, ip}
   291bc:	bl	28388 <flatcc_builder_create_vector@@Base>
   291c0:	mov	r5, r0
   291c4:	mov	r1, #0
   291c8:	ldr	r0, [r4, #16]
   291cc:	ldr	r2, [r4, #20]
   291d0:	bl	1459c <memset@plt>
   291d4:	ldr	r3, [r4, #32]
   291d8:	stm	r6, {r5, r8}
   291dc:	ldr	r0, [r4, #60]	; 0x3c
   291e0:	ldr	r2, [r4, #64]	; 0x40
   291e4:	ldr	ip, [r3]
   291e8:	ldmib	r3, {r1, lr}
   291ec:	add	r0, r0, ip
   291f0:	sub	r2, r2, ip
   291f4:	str	r0, [r4, #16]
   291f8:	cmp	r2, r1
   291fc:	ldrh	r0, [r4, #128]	; 0x80
   29200:	movcs	r2, r1
   29204:	str	lr, [r4, #20]
   29208:	str	ip, [r4, #28]
   2920c:	ldrh	ip, [r4, #130]	; 0x82
   29210:	str	r2, [r4, #24]
   29214:	ldr	r2, [r4, #156]	; 0x9c
   29218:	str	r1, [r3, #4]
   2921c:	cmp	r0, ip
   29220:	sub	r0, r3, #36	; 0x24
   29224:	strhcc	ip, [r4, #128]	; 0x80
   29228:	ldrh	r1, [r3, #12]
   2922c:	sub	r3, r2, #1
   29230:	str	r0, [r4, #32]
   29234:	strh	r1, [r4, #130]	; 0x82
   29238:	str	r3, [r4, #156]	; 0x9c
   2923c:	mov	r0, r6
   29240:	add	sp, sp, #12
   29244:	ldrd	r4, [sp]
   29248:	ldrd	r6, [sp, #8]
   2924c:	ldrd	r8, [sp, #16]
   29250:	add	sp, sp, #24
   29254:	pop	{pc}		; (ldr pc, [sp], #4)
   29258:	ldr	ip, [r4, #28]
   2925c:	mov	r0, #1
   29260:	add	r1, r1, #60	; 0x3c
   29264:	mov	r3, r0
   29268:	str	r0, [sp]
   2926c:	ldr	r9, [r4, #48]	; 0x30
   29270:	add	ip, ip, r0
   29274:	ldr	r0, [r4, #40]	; 0x28
   29278:	add	r2, ip, r2
   2927c:	blx	r9
   29280:	cmp	r0, #0
   29284:	bne	292c0 <flatcc_builder_end_union_vector@@Base+0x1c4>
   29288:	ldr	r1, [r4, #28]
   2928c:	ldr	r3, [r4, #60]	; 0x3c
   29290:	ldr	r2, [r4, #64]	; 0x40
   29294:	add	r3, r3, r1
   29298:	sub	r2, r2, r1
   2929c:	mvn	r1, #3
   292a0:	str	r3, [r4, #16]
   292a4:	cmn	r2, #4
   292a8:	mvnhi	r2, #3
   292ac:	str	r2, [r4, #24]
   292b0:	ldr	r2, [r4, #32]
   292b4:	str	r1, [r2, #4]
   292b8:	adds	r1, r3, r8
   292bc:	bne	29158 <flatcc_builder_end_union_vector@@Base+0x5c>
   292c0:	mov	r3, #0
   292c4:	str	r3, [r6]
   292c8:	str	r3, [r6, #4]
   292cc:	b	2923c <flatcc_builder_end_union_vector@@Base+0x140>
   292d0:	mov	r5, r8
   292d4:	b	291c4 <flatcc_builder_end_union_vector@@Base+0xc8>
   292d8:	movw	r1, #23364	; 0x5b44
   292dc:	movt	r1, #4
   292e0:	ldr	r3, [pc, #12]	; 292f4 <flatcc_builder_end_union_vector@@Base+0x1f8>
   292e4:	movw	r0, #24144	; 0x5e50
   292e8:	movt	r0, #4
   292ec:	movw	r2, #1617	; 0x651
   292f0:	bl	145f0 <__assert_fail@plt>
   292f4:	ldrdeq	r5, [r4], -r8

000292f8 <flatcc_builder_union_vector_edit@@Base>:
   292f8:	ldr	r0, [r0, #16]
   292fc:	bx	lr

00029300 <flatcc_builder_union_vector_count@@Base>:
   29300:	ldr	r3, [r0, #32]
   29304:	ldr	r0, [r3, #20]
   29308:	bx	lr

0002930c <flatcc_builder_extend_union_vector@@Base>:
   2930c:	ldr	ip, [r0, #32]
   29310:	strd	r4, [sp, #-20]!	; 0xffffffec
   29314:	mov	r4, r0
   29318:	ldr	r3, [ip, #20]
   2931c:	strd	r6, [sp, #8]
   29320:	str	lr, [sp, #16]
   29324:	sub	sp, sp, #12
   29328:	adds	r3, r1, r3
   2932c:	movcs	r2, #1
   29330:	movcc	r2, #0
   29334:	cmn	r3, #-536870911	; 0xe0000001
   29338:	movls	r0, #0
   2933c:	movhi	r0, #1
   29340:	orrs	r5, r2, r0
   29344:	bne	293ec <flatcc_builder_extend_union_vector@@Base+0xe0>
   29348:	ldr	r6, [r4, #20]
   2934c:	str	r3, [ip, #20]
   29350:	ldr	r3, [r4, #24]
   29354:	add	r2, r6, r1, lsl #3
   29358:	cmp	r2, r3
   2935c:	str	r2, [r4, #20]
   29360:	bcs	29380 <flatcc_builder_extend_union_vector@@Base+0x74>
   29364:	ldr	r0, [r4, #16]
   29368:	add	r0, r0, r6
   2936c:	add	sp, sp, #12
   29370:	ldrd	r4, [sp]
   29374:	ldrd	r6, [sp, #8]
   29378:	add	sp, sp, #16
   2937c:	pop	{pc}		; (ldr pc, [sp], #4)
   29380:	ldr	ip, [r4, #28]
   29384:	mov	r0, #1
   29388:	add	r1, r4, #60	; 0x3c
   2938c:	mov	r3, r0
   29390:	str	r0, [sp]
   29394:	ldr	r7, [r4, #48]	; 0x30
   29398:	add	ip, ip, r0
   2939c:	ldr	r0, [r4, #40]	; 0x28
   293a0:	add	r2, ip, r2
   293a4:	blx	r7
   293a8:	cmp	r0, #0
   293ac:	bne	293e4 <flatcc_builder_extend_union_vector@@Base+0xd8>
   293b0:	ldr	r2, [r4, #28]
   293b4:	ldr	r0, [r4, #60]	; 0x3c
   293b8:	ldr	r3, [r4, #64]	; 0x40
   293bc:	add	r0, r0, r2
   293c0:	sub	r3, r3, r2
   293c4:	mvn	r2, #3
   293c8:	str	r0, [r4, #16]
   293cc:	cmn	r3, #4
   293d0:	mvnhi	r3, #3
   293d4:	str	r3, [r4, #24]
   293d8:	ldr	r3, [r4, #32]
   293dc:	str	r2, [r3, #4]
   293e0:	b	29368 <flatcc_builder_extend_union_vector@@Base+0x5c>
   293e4:	mov	r0, r5
   293e8:	b	2936c <flatcc_builder_extend_union_vector@@Base+0x60>
   293ec:	bl	24e34 <flatcc_builder_default_alloc@@Base+0x1c4>

000293f0 <flatcc_builder_truncate_union_vector@@Base>:
   293f0:	mov	r3, r0
   293f4:	ldr	r0, [r0, #32]
   293f8:	str	r4, [sp, #-8]!
   293fc:	ldrh	r2, [r0, #14]
   29400:	str	lr, [sp, #4]
   29404:	cmp	r2, #7
   29408:	bne	29458 <flatcc_builder_truncate_union_vector@@Base+0x68>
   2940c:	mov	lr, r1
   29410:	ldr	r1, [r0, #20]
   29414:	cmp	r1, lr
   29418:	bcc	29474 <flatcc_builder_truncate_union_vector@@Base+0x84>
   2941c:	ldr	r2, [r0, #16]
   29420:	sub	ip, r1, lr
   29424:	mov	r1, #0
   29428:	str	ip, [r0, #20]
   2942c:	ldr	r0, [r3, #16]
   29430:	ldr	ip, [r3, #20]
   29434:	mul	r2, r2, lr
   29438:	sub	ip, ip, r2
   2943c:	add	r0, r0, ip
   29440:	str	ip, [r3, #20]
   29444:	bl	1459c <memset@plt>
   29448:	ldr	r4, [sp]
   2944c:	add	sp, sp, #4
   29450:	mov	r0, #0
   29454:	pop	{pc}		; (ldr pc, [sp], #4)
   29458:	movw	r1, #23364	; 0x5b44
   2945c:	movt	r1, #4
   29460:	ldr	r3, [pc, #40]	; 29490 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   29464:	movw	r0, #24144	; 0x5e50
   29468:	movt	r0, #4
   2946c:	movw	r2, #1665	; 0x681
   29470:	bl	145f0 <__assert_fail@plt>
   29474:	movw	r1, #23364	; 0x5b44
   29478:	movt	r1, #4
   2947c:	ldr	r3, [pc, #12]	; 29490 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   29480:	movw	r0, #23924	; 0x5d74
   29484:	movt	r0, #4
   29488:	movw	r2, #1666	; 0x682
   2948c:	bl	145f0 <__assert_fail@plt>
   29490:	strdeq	r5, [r4], -r8

00029494 <flatcc_builder_union_vector_push@@Base>:
   29494:	strd	r4, [sp, #-20]!	; 0xffffffec
   29498:	strd	r6, [sp, #8]
   2949c:	str	lr, [sp, #16]
   294a0:	sub	sp, sp, #20
   294a4:	add	r3, sp, #16
   294a8:	stmdb	r3, {r1, r2}
   294ac:	ldr	r2, [r0, #32]
   294b0:	ldrh	r3, [r2, #14]
   294b4:	cmp	r3, #7
   294b8:	bne	2957c <flatcc_builder_union_vector_push@@Base+0xe8>
   294bc:	ldr	r3, [r2, #20]
   294c0:	cmn	r3, #-536870911	; 0xe0000001
   294c4:	beq	29574 <flatcc_builder_union_vector_push@@Base+0xe0>
   294c8:	ldr	r5, [r0, #20]
   294cc:	add	r3, r3, #1
   294d0:	mov	r4, r0
   294d4:	ldr	r1, [r0, #24]
   294d8:	str	r3, [r2, #20]
   294dc:	add	r3, r5, #8
   294e0:	cmp	r3, r1
   294e4:	str	r3, [r0, #20]
   294e8:	bcs	29510 <flatcc_builder_union_vector_push@@Base+0x7c>
   294ec:	ldr	r3, [r0, #16]
   294f0:	adds	r0, r3, r5
   294f4:	ldrdne	r6, [sp, #8]
   294f8:	strdne	r6, [r3, r5]
   294fc:	add	sp, sp, #20
   29500:	ldrd	r4, [sp]
   29504:	ldrd	r6, [sp, #8]
   29508:	add	sp, sp, #16
   2950c:	pop	{pc}		; (ldr pc, [sp], #4)
   29510:	ldr	r2, [r4, #28]
   29514:	mov	r0, #1
   29518:	add	r1, r4, #60	; 0x3c
   2951c:	mov	r3, r0
   29520:	str	r0, [sp]
   29524:	ldr	r0, [r4, #40]	; 0x28
   29528:	add	r2, r5, r2
   2952c:	ldr	r6, [r4, #48]	; 0x30
   29530:	add	r2, r2, #9
   29534:	blx	r6
   29538:	cmp	r0, #0
   2953c:	bne	29574 <flatcc_builder_union_vector_push@@Base+0xe0>
   29540:	ldr	r1, [r4, #28]
   29544:	ldr	r3, [r4, #60]	; 0x3c
   29548:	ldr	r2, [r4, #64]	; 0x40
   2954c:	add	r3, r3, r1
   29550:	sub	r2, r2, r1
   29554:	mvn	r1, #3
   29558:	str	r3, [r4, #16]
   2955c:	cmn	r2, #4
   29560:	mvnhi	r2, #3
   29564:	str	r2, [r4, #24]
   29568:	ldr	r2, [r4, #32]
   2956c:	str	r1, [r2, #4]
   29570:	b	294f0 <flatcc_builder_union_vector_push@@Base+0x5c>
   29574:	mov	r0, #0
   29578:	b	294fc <flatcc_builder_union_vector_push@@Base+0x68>
   2957c:	movw	r1, #23364	; 0x5b44
   29580:	movt	r1, #4
   29584:	ldr	r3, [pc, #12]	; 29598 <flatcc_builder_union_vector_push@@Base+0x104>
   29588:	movw	r0, #24144	; 0x5e50
   2958c:	movt	r0, #4
   29590:	movw	r2, #1677	; 0x68d
   29594:	bl	145f0 <__assert_fail@plt>
   29598:	andeq	r5, r4, r0, lsr #20

0002959c <flatcc_builder_append_union_vector@@Base>:
   2959c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   295a0:	mov	r5, r0
   295a4:	ldr	r0, [r0, #32]
   295a8:	ldrh	r3, [r0, #14]
   295ac:	strd	r6, [sp, #8]
   295b0:	strd	r8, [sp, #16]
   295b4:	str	lr, [sp, #24]
   295b8:	sub	sp, sp, #12
   295bc:	cmp	r3, #7
   295c0:	bne	296b8 <flatcc_builder_append_union_vector@@Base+0x11c>
   295c4:	ldr	r3, [r0, #20]
   295c8:	mov	r7, r1
   295cc:	adds	r1, r2, r3
   295d0:	movcs	r4, #1
   295d4:	movcc	r4, #0
   295d8:	cmn	r1, #-536870911	; 0xe0000001
   295dc:	movls	r3, #0
   295e0:	movhi	r3, #1
   295e4:	orrs	r4, r4, r3
   295e8:	bne	296b4 <flatcc_builder_append_union_vector@@Base+0x118>
   295ec:	ldr	r8, [r5, #20]
   295f0:	lsl	r6, r2, #3
   295f4:	ldr	r3, [r5, #24]
   295f8:	str	r1, [r0, #20]
   295fc:	add	ip, r6, r8
   29600:	cmp	ip, r3
   29604:	str	ip, [r5, #20]
   29608:	bcs	29648 <flatcc_builder_append_union_vector@@Base+0xac>
   2960c:	ldr	r3, [r5, #16]
   29610:	adds	r3, r3, r8
   29614:	beq	2962c <flatcc_builder_append_union_vector@@Base+0x90>
   29618:	mov	r0, r3
   2961c:	mov	r2, r6
   29620:	mov	r1, r7
   29624:	bl	14524 <memcpy@plt>
   29628:	mov	r3, r0
   2962c:	mov	r0, r3
   29630:	add	sp, sp, #12
   29634:	ldrd	r4, [sp]
   29638:	ldrd	r6, [sp, #8]
   2963c:	ldrd	r8, [sp, #16]
   29640:	add	sp, sp, #24
   29644:	pop	{pc}		; (ldr pc, [sp], #4)
   29648:	ldr	r2, [r5, #28]
   2964c:	mov	r0, #1
   29650:	add	r1, r5, #60	; 0x3c
   29654:	mov	r3, r0
   29658:	str	r0, [sp]
   2965c:	ldr	r9, [r5, #48]	; 0x30
   29660:	add	r2, r2, r0
   29664:	ldr	r0, [r5, #40]	; 0x28
   29668:	add	r2, r2, ip
   2966c:	blx	r9
   29670:	cmp	r0, #0
   29674:	bne	296ac <flatcc_builder_append_union_vector@@Base+0x110>
   29678:	ldr	r1, [r5, #28]
   2967c:	ldr	r3, [r5, #60]	; 0x3c
   29680:	ldr	r2, [r5, #64]	; 0x40
   29684:	add	r3, r3, r1
   29688:	sub	r2, r2, r1
   2968c:	mvn	r1, #3
   29690:	str	r3, [r5, #16]
   29694:	cmn	r2, #4
   29698:	mvnhi	r2, #3
   2969c:	str	r2, [r5, #24]
   296a0:	ldr	r2, [r5, #32]
   296a4:	str	r1, [r2, #4]
   296a8:	b	29610 <flatcc_builder_append_union_vector@@Base+0x74>
   296ac:	mov	r3, r4
   296b0:	b	2962c <flatcc_builder_append_union_vector@@Base+0x90>
   296b4:	bl	24e34 <flatcc_builder_default_alloc@@Base+0x1c4>
   296b8:	movw	r1, #23364	; 0x5b44
   296bc:	movt	r1, #4
   296c0:	ldr	r3, [pc, #12]	; 296d4 <flatcc_builder_append_union_vector@@Base+0x138>
   296c4:	movw	r0, #24144	; 0x5e50
   296c8:	movt	r0, #4
   296cc:	movw	r2, #1692	; 0x69c
   296d0:	bl	145f0 <__assert_fail@plt>
   296d4:	andeq	r5, r4, r4, asr #20

000296d8 <flatcc_builder_create_string@@Base>:
   296d8:	strd	r4, [sp, #-16]!
   296dc:	mov	r4, r0
   296e0:	mov	ip, #4
   296e4:	str	r6, [sp, #8]
   296e8:	cmp	r2, #0
   296ec:	str	lr, [sp, #12]
   296f0:	sub	sp, sp, #88	; 0x58
   296f4:	moveq	r6, #2
   296f8:	ldr	lr, [r0, #136]	; 0x88
   296fc:	add	r3, sp, #12
   29700:	str	r2, [sp, #12]
   29704:	str	r3, [sp, #24]
   29708:	mov	r3, #1
   2970c:	moveq	r1, r3
   29710:	str	ip, [sp, #28]
   29714:	sub	r0, lr, r2
   29718:	sub	r0, r0, #1
   2971c:	and	r0, r0, #3
   29720:	add	r0, r0, r3
   29724:	beq	2973c <flatcc_builder_create_string@@Base+0x64>
   29728:	add	ip, r2, ip
   2972c:	mov	r6, #3
   29730:	str	r1, [sp, #32]
   29734:	mov	r1, #2
   29738:	str	r2, [sp, #36]	; 0x24
   2973c:	ldr	r3, [pc, #136]	; 297cc <flatcc_builder_create_string@@Base+0xf4>
   29740:	add	r1, r1, #1
   29744:	add	r2, sp, #88	; 0x58
   29748:	add	ip, r0, ip
   2974c:	add	r1, r2, r1, lsl #3
   29750:	sub	r5, lr, ip
   29754:	cmp	lr, r5
   29758:	str	ip, [sp, #16]
   2975c:	str	r6, [sp, #20]
   29760:	str	r3, [r1, #-72]	; 0xffffffb8
   29764:	str	r0, [r1, #-68]	; 0xffffffbc
   29768:	ble	297ac <flatcc_builder_create_string@@Base+0xd4>
   2976c:	mov	r2, r6
   29770:	mov	r3, r5
   29774:	str	ip, [sp]
   29778:	add	r1, sp, #24
   2977c:	ldr	r0, [r4, #36]	; 0x24
   29780:	ldr	r6, [r4, #44]	; 0x2c
   29784:	blx	r6
   29788:	cmp	r0, #0
   2978c:	bne	297c8 <flatcc_builder_create_string@@Base+0xf0>
   29790:	mov	r0, r5
   29794:	str	r5, [r4, #136]	; 0x88
   29798:	add	sp, sp, #88	; 0x58
   2979c:	ldrd	r4, [sp]
   297a0:	ldr	r6, [sp, #8]
   297a4:	add	sp, sp, #12
   297a8:	pop	{pc}		; (ldr pc, [sp], #4)
   297ac:	movw	r1, #23364	; 0x5b44
   297b0:	movt	r1, #4
   297b4:	movw	r0, #23556	; 0x5c04
   297b8:	movt	r0, #4
   297bc:	sub	r3, r3, #124	; 0x7c
   297c0:	movw	r2, #647	; 0x287
   297c4:	bl	145f0 <__assert_fail@plt>
   297c8:	bl	24e0c <flatcc_builder_default_alloc@@Base+0x19c>
   297cc:	muleq	r4, ip, r4

000297d0 <flatcc_builder_create_string_str@@Base>:
   297d0:	strd	r4, [sp, #-16]!
   297d4:	mov	r4, r0
   297d8:	mov	r0, r1
   297dc:	str	r6, [sp, #8]
   297e0:	mov	r6, r1
   297e4:	str	lr, [sp, #12]
   297e8:	sub	sp, sp, #88	; 0x58
   297ec:	bl	14578 <strlen@plt>
   297f0:	ldr	r5, [r4, #136]	; 0x88
   297f4:	mov	r2, #4
   297f8:	add	r1, sp, #12
   297fc:	mov	r3, #1
   29800:	cmp	r0, #0
   29804:	str	r0, [sp, #12]
   29808:	str	r1, [sp, #24]
   2980c:	str	r2, [sp, #28]
   29810:	sub	ip, r5, #1
   29814:	sub	ip, ip, r0
   29818:	and	ip, ip, #3
   2981c:	add	ip, ip, r3
   29820:	beq	298a4 <flatcc_builder_create_string_str@@Base+0xd4>
   29824:	add	lr, r0, r2
   29828:	mov	r1, #2
   2982c:	str	r6, [sp, #32]
   29830:	mov	r2, #3
   29834:	str	r0, [sp, #36]	; 0x24
   29838:	ldr	r3, [pc, #148]	; 298d4 <flatcc_builder_create_string_str@@Base+0x104>
   2983c:	add	r0, ip, lr
   29840:	add	r1, r1, #1
   29844:	add	lr, sp, #88	; 0x58
   29848:	sub	r6, r5, r0
   2984c:	add	r1, lr, r1, lsl #3
   29850:	cmp	r5, r6
   29854:	str	r0, [sp, #16]
   29858:	str	r2, [sp, #20]
   2985c:	str	r3, [r1, #-72]	; 0xffffffb8
   29860:	str	ip, [r1, #-68]	; 0xffffffbc
   29864:	ble	298b4 <flatcc_builder_create_string_str@@Base+0xe4>
   29868:	mov	r3, r6
   2986c:	add	r1, sp, #24
   29870:	str	r0, [sp]
   29874:	ldr	r0, [r4, #36]	; 0x24
   29878:	ldr	r5, [r4, #44]	; 0x2c
   2987c:	blx	r5
   29880:	cmp	r0, #0
   29884:	bne	298d0 <flatcc_builder_create_string_str@@Base+0x100>
   29888:	mov	r0, r6
   2988c:	str	r6, [r4, #136]	; 0x88
   29890:	add	sp, sp, #88	; 0x58
   29894:	ldrd	r4, [sp]
   29898:	ldr	r6, [sp, #8]
   2989c:	add	sp, sp, #12
   298a0:	pop	{pc}		; (ldr pc, [sp], #4)
   298a4:	mov	lr, r2
   298a8:	mov	r1, r3
   298ac:	mov	r2, #2
   298b0:	b	29838 <flatcc_builder_create_string_str@@Base+0x68>
   298b4:	movw	r1, #23364	; 0x5b44
   298b8:	movt	r1, #4
   298bc:	movw	r0, #23556	; 0x5c04
   298c0:	movt	r0, #4
   298c4:	sub	r3, r3, #124	; 0x7c
   298c8:	movw	r2, #647	; 0x287
   298cc:	bl	145f0 <__assert_fail@plt>
   298d0:	bl	24e0c <flatcc_builder_default_alloc@@Base+0x19c>
   298d4:	muleq	r4, ip, r4

000298d8 <flatcc_builder_create_string_strn@@Base>:
   298d8:	strd	r4, [sp, #-16]!
   298dc:	mov	r4, r0
   298e0:	mov	r5, r2
   298e4:	str	r6, [sp, #8]
   298e8:	mov	r6, r1
   298ec:	mov	r1, #0
   298f0:	mov	r0, r6
   298f4:	str	lr, [sp, #12]
   298f8:	sub	sp, sp, #88	; 0x58
   298fc:	bl	145c0 <memchr@plt>
   29900:	ldr	lr, [r4, #136]	; 0x88
   29904:	cmp	r0, #0
   29908:	mov	ip, #4
   2990c:	subne	r5, r0, r6
   29910:	add	r3, sp, #12
   29914:	cmp	r5, #0
   29918:	mov	r0, #1
   2991c:	moveq	r2, #2
   29920:	str	r5, [sp, #12]
   29924:	str	r3, [sp, #24]
   29928:	sub	r1, lr, #1
   2992c:	str	ip, [sp, #28]
   29930:	sub	r1, r1, r5
   29934:	and	r1, r1, #3
   29938:	add	r1, r1, r0
   2993c:	beq	29954 <flatcc_builder_create_string_strn@@Base+0x7c>
   29940:	add	ip, r5, ip
   29944:	mov	r2, #3
   29948:	str	r6, [sp, #32]
   2994c:	mov	r0, #2
   29950:	str	r5, [sp, #36]	; 0x24
   29954:	ldr	r3, [pc, #132]	; 299e0 <flatcc_builder_create_string_strn@@Base+0x108>
   29958:	add	r5, sp, #88	; 0x58
   2995c:	add	r0, r0, #1
   29960:	add	r0, r5, r0, lsl #3
   29964:	add	ip, r1, ip
   29968:	sub	r5, lr, ip
   2996c:	cmp	lr, r5
   29970:	str	ip, [sp, #16]
   29974:	str	r2, [sp, #20]
   29978:	str	r3, [r0, #-72]	; 0xffffffb8
   2997c:	str	r1, [r0, #-68]	; 0xffffffbc
   29980:	ble	299c0 <flatcc_builder_create_string_strn@@Base+0xe8>
   29984:	mov	r3, r5
   29988:	add	r1, sp, #24
   2998c:	str	ip, [sp]
   29990:	ldr	r0, [r4, #36]	; 0x24
   29994:	ldr	r6, [r4, #44]	; 0x2c
   29998:	blx	r6
   2999c:	cmp	r0, #0
   299a0:	bne	299dc <flatcc_builder_create_string_strn@@Base+0x104>
   299a4:	mov	r0, r5
   299a8:	str	r5, [r4, #136]	; 0x88
   299ac:	add	sp, sp, #88	; 0x58
   299b0:	ldrd	r4, [sp]
   299b4:	ldr	r6, [sp, #8]
   299b8:	add	sp, sp, #12
   299bc:	pop	{pc}		; (ldr pc, [sp], #4)
   299c0:	movw	r1, #23364	; 0x5b44
   299c4:	movt	r1, #4
   299c8:	movw	r0, #23556	; 0x5c04
   299cc:	movt	r0, #4
   299d0:	sub	r3, r3, #124	; 0x7c
   299d4:	movw	r2, #647	; 0x287
   299d8:	bl	145f0 <__assert_fail@plt>
   299dc:	bl	24e0c <flatcc_builder_default_alloc@@Base+0x19c>
   299e0:	muleq	r4, ip, r4

000299e4 <flatcc_builder_end_string@@Base>:
   299e4:	ldr	r3, [r0, #32]
   299e8:	strd	r4, [sp, #-16]!
   299ec:	ldrh	r2, [r3, #14]
   299f0:	str	r6, [sp, #8]
   299f4:	str	lr, [sp, #12]
   299f8:	sub	sp, sp, #88	; 0x58
   299fc:	cmp	r2, #6
   29a00:	bne	29b88 <flatcc_builder_end_string@@Base+0x1a4>
   29a04:	ldr	r3, [r3, #20]
   29a08:	mov	r4, r0
   29a0c:	ldr	r2, [r0, #20]
   29a10:	cmp	r3, r2
   29a14:	bne	29b6c <flatcc_builder_end_string@@Base+0x188>
   29a18:	ldr	lr, [r4, #136]	; 0x88
   29a1c:	add	r2, sp, #12
   29a20:	mov	ip, #4
   29a24:	cmp	r3, #0
   29a28:	mov	r0, #1
   29a2c:	str	r3, [sp, #12]
   29a30:	str	r2, [sp, #24]
   29a34:	str	ip, [sp, #28]
   29a38:	ldr	r2, [r4, #16]
   29a3c:	moveq	r2, #2
   29a40:	sub	r1, lr, r3
   29a44:	sub	r1, r1, #1
   29a48:	and	r1, r1, #3
   29a4c:	add	r1, r1, r0
   29a50:	bne	29b38 <flatcc_builder_end_string@@Base+0x154>
   29a54:	ldr	r3, [pc, #328]	; 29ba4 <flatcc_builder_end_string@@Base+0x1c0>
   29a58:	add	r5, sp, #88	; 0x58
   29a5c:	add	r0, r0, #1
   29a60:	add	r0, r5, r0, lsl #3
   29a64:	add	ip, r1, ip
   29a68:	sub	r5, lr, ip
   29a6c:	cmp	lr, r5
   29a70:	str	ip, [sp, #16]
   29a74:	str	r2, [sp, #20]
   29a78:	str	r3, [r0, #-72]	; 0xffffffb8
   29a7c:	str	r1, [r0, #-68]	; 0xffffffbc
   29a80:	ble	29b50 <flatcc_builder_end_string@@Base+0x16c>
   29a84:	add	r1, sp, #24
   29a88:	mov	r3, r5
   29a8c:	str	ip, [sp]
   29a90:	ldr	r0, [r4, #36]	; 0x24
   29a94:	ldr	r6, [r4, #44]	; 0x2c
   29a98:	blx	r6
   29a9c:	subs	r1, r0, #0
   29aa0:	bne	29b4c <flatcc_builder_end_string@@Base+0x168>
   29aa4:	cmp	r5, #0
   29aa8:	str	r5, [r4, #136]	; 0x88
   29aac:	beq	29b20 <flatcc_builder_end_string@@Base+0x13c>
   29ab0:	ldr	r0, [r4, #16]
   29ab4:	ldr	r2, [r4, #20]
   29ab8:	bl	1459c <memset@plt>
   29abc:	ldr	r3, [r4, #32]
   29ac0:	ldr	r0, [r4, #60]	; 0x3c
   29ac4:	ldr	r2, [r4, #64]	; 0x40
   29ac8:	ldr	ip, [r3]
   29acc:	ldmib	r3, {r1, lr}
   29ad0:	add	r0, r0, ip
   29ad4:	sub	r2, r2, ip
   29ad8:	str	r0, [r4, #16]
   29adc:	cmp	r2, r1
   29ae0:	ldrh	r0, [r4, #128]	; 0x80
   29ae4:	movcs	r2, r1
   29ae8:	str	lr, [r4, #20]
   29aec:	str	ip, [r4, #28]
   29af0:	ldrh	ip, [r4, #130]	; 0x82
   29af4:	str	r2, [r4, #24]
   29af8:	ldr	r2, [r4, #156]	; 0x9c
   29afc:	str	r1, [r3, #4]
   29b00:	cmp	r0, ip
   29b04:	sub	r0, r3, #36	; 0x24
   29b08:	strhcc	ip, [r4, #128]	; 0x80
   29b0c:	ldrh	r1, [r3, #12]
   29b10:	sub	r3, r2, #1
   29b14:	str	r0, [r4, #32]
   29b18:	strh	r1, [r4, #130]	; 0x82
   29b1c:	str	r3, [r4, #156]	; 0x9c
   29b20:	mov	r0, r5
   29b24:	add	sp, sp, #88	; 0x58
   29b28:	ldrd	r4, [sp]
   29b2c:	ldr	r6, [sp, #8]
   29b30:	add	sp, sp, #12
   29b34:	pop	{pc}		; (ldr pc, [sp], #4)
   29b38:	add	ip, r3, ip
   29b3c:	mov	r0, #2
   29b40:	strd	r2, [sp, #32]
   29b44:	mov	r2, #3
   29b48:	b	29a54 <flatcc_builder_end_string@@Base+0x70>
   29b4c:	bl	24e0c <flatcc_builder_default_alloc@@Base+0x19c>
   29b50:	movw	r1, #23364	; 0x5b44
   29b54:	movt	r1, #4
   29b58:	movw	r0, #23556	; 0x5c04
   29b5c:	movt	r0, #4
   29b60:	sub	r3, r3, #124	; 0x7c
   29b64:	movw	r2, #647	; 0x287
   29b68:	bl	145f0 <__assert_fail@plt>
   29b6c:	movw	r1, #23364	; 0x5b44
   29b70:	movt	r1, #4
   29b74:	ldr	r3, [pc, #44]	; 29ba8 <flatcc_builder_end_string@@Base+0x1c4>
   29b78:	movw	r0, #24196	; 0x5e84
   29b7c:	movt	r0, #4
   29b80:	movw	r2, #1733	; 0x6c5
   29b84:	bl	145f0 <__assert_fail@plt>
   29b88:	movw	r1, #23364	; 0x5b44
   29b8c:	movt	r1, #4
   29b90:	ldr	r3, [pc, #16]	; 29ba8 <flatcc_builder_end_string@@Base+0x1c4>
   29b94:	movw	r0, #23492	; 0x5bc4
   29b98:	movt	r0, #4
   29b9c:	movw	r2, #1732	; 0x6c4
   29ba0:	bl	145f0 <__assert_fail@plt>
   29ba4:	muleq	r4, ip, r4
   29ba8:	andeq	r5, r4, r8, ror #20

00029bac <flatcc_builder_string_edit@@Base>:
   29bac:	ldr	r0, [r0, #16]
   29bb0:	bx	lr

00029bb4 <flatcc_builder_string_len@@Base>:
   29bb4:	ldr	r3, [r0, #32]
   29bb8:	ldr	r0, [r3, #20]
   29bbc:	bx	lr

00029bc0 <flatcc_builder_table_add@@Base>:
   29bc0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   29bc4:	mov	r4, r0
   29bc8:	ldr	r0, [r0, #32]
   29bcc:	ldrh	r0, [r0, #14]
   29bd0:	strd	r6, [sp, #8]
   29bd4:	strd	r8, [sp, #16]
   29bd8:	str	lr, [sp, #24]
   29bdc:	sub	sp, sp, #12
   29be0:	cmp	r0, #3
   29be4:	bne	29d48 <flatcc_builder_table_add@@Base+0x188>
   29be8:	movw	r0, #32764	; 0x7ffc
   29bec:	cmp	r1, r0
   29bf0:	bhi	29d2c <flatcc_builder_table_add@@Base+0x16c>
   29bf4:	ldrh	r0, [r4, #130]	; 0x82
   29bf8:	lsl	r7, r1, #1
   29bfc:	ldr	ip, [r4, #4]
   29c00:	cmp	r0, r3
   29c04:	strhcc	r3, [r4, #130]	; 0x82
   29c08:	ldrh	r5, [ip, r7]
   29c0c:	add	ip, ip, r7
   29c10:	cmp	r5, #0
   29c14:	bne	29d10 <flatcc_builder_table_add@@Base+0x150>
   29c18:	ldr	r9, [r4, #12]
   29c1c:	movw	lr, #31153	; 0x79b1
   29c20:	movt	lr, #40503	; 0x9e37
   29c24:	uxth	r6, r1
   29c28:	sub	r8, r3, #1
   29c2c:	ldr	r0, [r4, #20]
   29c30:	rsb	r3, r3, #0
   29c34:	eor	r1, r1, r9
   29c38:	mul	r1, lr, r1
   29c3c:	add	r8, r8, r0
   29c40:	ldr	r0, [r4, #24]
   29c44:	and	r8, r8, r3
   29c48:	eor	r1, r1, r2
   29c4c:	add	r2, r2, r8
   29c50:	mul	r1, lr, r1
   29c54:	cmp	r2, r0
   29c58:	str	r1, [r4, #12]
   29c5c:	str	r2, [r4, #20]
   29c60:	bcs	29c9c <flatcc_builder_table_add@@Base+0xdc>
   29c64:	ldr	r0, [r4, #16]
   29c68:	add	r3, r8, #4
   29c6c:	add	r0, r0, r8
   29c70:	strh	r3, [ip]
   29c74:	ldrh	r3, [r4, #8]
   29c78:	cmp	r3, r6
   29c7c:	addls	r6, r6, #1
   29c80:	strhls	r6, [r4, #8]
   29c84:	add	sp, sp, #12
   29c88:	ldrd	r4, [sp]
   29c8c:	ldrd	r6, [sp, #8]
   29c90:	ldrd	r8, [sp, #16]
   29c94:	add	sp, sp, #24
   29c98:	pop	{pc}		; (ldr pc, [sp], #4)
   29c9c:	ldr	ip, [r4, #28]
   29ca0:	mov	r0, #1
   29ca4:	add	r1, r4, #60	; 0x3c
   29ca8:	mov	r3, r0
   29cac:	str	r0, [sp]
   29cb0:	ldr	r9, [r4, #48]	; 0x30
   29cb4:	add	ip, ip, r0
   29cb8:	ldr	r0, [r4, #40]	; 0x28
   29cbc:	add	r2, ip, r2
   29cc0:	blx	r9
   29cc4:	cmp	r0, #0
   29cc8:	bne	29d08 <flatcc_builder_table_add@@Base+0x148>
   29ccc:	ldr	ip, [r4, #4]
   29cd0:	movw	r2, #65532	; 0xfffc
   29cd4:	ldr	r5, [r4, #28]
   29cd8:	ldr	r3, [r4, #64]	; 0x40
   29cdc:	add	ip, ip, r7
   29ce0:	ldr	r0, [r4, #60]	; 0x3c
   29ce4:	ldr	r1, [r4, #32]
   29ce8:	sub	r3, r3, r5
   29cec:	cmp	r3, r2
   29cf0:	add	r0, r0, r5
   29cf4:	movcs	r3, r2
   29cf8:	str	r0, [r4, #16]
   29cfc:	str	r3, [r4, #24]
   29d00:	str	r2, [r1, #4]
   29d04:	b	29c68 <flatcc_builder_table_add@@Base+0xa8>
   29d08:	mov	r0, r5
   29d0c:	b	29c84 <flatcc_builder_table_add@@Base+0xc4>
   29d10:	movw	r1, #23364	; 0x5b44
   29d14:	movt	r1, #4
   29d18:	ldr	r3, [pc, #68]	; 29d64 <flatcc_builder_table_add@@Base+0x1a4>
   29d1c:	movw	r0, #23556	; 0x5c04
   29d20:	movt	r0, #4
   29d24:	movw	r2, #1784	; 0x6f8
   29d28:	bl	145f0 <__assert_fail@plt>
   29d2c:	movw	r1, #23364	; 0x5b44
   29d30:	movt	r1, #4
   29d34:	ldr	r3, [pc, #40]	; 29d64 <flatcc_builder_table_add@@Base+0x1a4>
   29d38:	movw	r0, #24232	; 0x5ea8
   29d3c:	movt	r0, #4
   29d40:	movw	r2, #1774	; 0x6ee
   29d44:	bl	145f0 <__assert_fail@plt>
   29d48:	movw	r1, #23364	; 0x5b44
   29d4c:	movt	r1, #4
   29d50:	ldr	r3, [pc, #12]	; 29d64 <flatcc_builder_table_add@@Base+0x1a4>
   29d54:	movw	r0, #24080	; 0x5e10
   29d58:	movt	r0, #4
   29d5c:	movw	r2, #1773	; 0x6ed
   29d60:	bl	145f0 <__assert_fail@plt>
   29d64:	andeq	r5, r4, r4, lsl #21

00029d68 <flatcc_builder_table_edit@@Base>:
   29d68:	ldr	r2, [r0, #32]
   29d6c:	ldrh	r2, [r2, #14]
   29d70:	cmp	r2, #3
   29d74:	bne	29d8c <flatcc_builder_table_edit@@Base+0x24>
   29d78:	ldr	r3, [r0, #20]
   29d7c:	ldr	r0, [r0, #16]
   29d80:	sub	r3, r3, r1
   29d84:	add	r0, r0, r3
   29d88:	bx	lr
   29d8c:	movw	r1, #23364	; 0x5b44
   29d90:	movt	r1, #4
   29d94:	ldr	r3, [pc, #20]	; 29db0 <flatcc_builder_table_edit@@Base+0x48>
   29d98:	movw	r0, #24080	; 0x5e10
   29d9c:	movt	r0, #4
   29da0:	str	r4, [sp, #-8]!
   29da4:	movw	r2, #1794	; 0x702
   29da8:	str	lr, [sp, #4]
   29dac:	bl	145f0 <__assert_fail@plt>
   29db0:	andeq	r5, r4, r0, lsr #21

00029db4 <flatcc_builder_table_add_copy@@Base>:
   29db4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   29db8:	mov	r5, r3
   29dbc:	ldr	r3, [r0, #32]
   29dc0:	ldrh	r3, [r3, #14]
   29dc4:	strd	r6, [sp, #8]
   29dc8:	strd	r8, [sp, #16]
   29dcc:	strd	sl, [sp, #24]
   29dd0:	str	lr, [sp, #32]
   29dd4:	sub	sp, sp, #12
   29dd8:	cmp	r3, #3
   29ddc:	ldrh	ip, [sp, #48]	; 0x30
   29de0:	bne	29f6c <flatcc_builder_table_add_copy@@Base+0x1b8>
   29de4:	movw	r3, #32764	; 0x7ffc
   29de8:	cmp	r1, r3
   29dec:	bhi	29f50 <flatcc_builder_table_add_copy@@Base+0x19c>
   29df0:	ldrh	r3, [r0, #130]	; 0x82
   29df4:	mov	r7, r2
   29df8:	lsl	r8, r1, #1
   29dfc:	mov	r4, r0
   29e00:	ldr	r2, [r0, #4]
   29e04:	cmp	r3, ip
   29e08:	strhcc	ip, [r0, #130]	; 0x82
   29e0c:	ldrh	r9, [r2, r8]
   29e10:	add	r2, r2, r8
   29e14:	cmp	r9, #0
   29e18:	bne	29f34 <flatcc_builder_table_add_copy@@Base+0x180>
   29e1c:	ldr	lr, [r4, #12]
   29e20:	movw	r0, #31153	; 0x79b1
   29e24:	movt	r0, #40503	; 0x9e37
   29e28:	uxth	r6, r1
   29e2c:	sub	r3, ip, #1
   29e30:	ldr	sl, [r4, #20]
   29e34:	rsb	ip, ip, #0
   29e38:	eor	r1, r1, lr
   29e3c:	ldr	lr, [r4, #24]
   29e40:	mul	r1, r0, r1
   29e44:	add	r3, r3, sl
   29e48:	and	sl, r3, ip
   29e4c:	add	ip, r5, sl
   29e50:	eor	r1, r1, r5
   29e54:	cmp	ip, lr
   29e58:	str	ip, [r4, #20]
   29e5c:	mul	r1, r0, r1
   29e60:	str	r1, [r4, #12]
   29e64:	bcs	29ec0 <flatcc_builder_table_add_copy@@Base+0x10c>
   29e68:	ldr	r3, [r4, #16]
   29e6c:	add	r1, sl, #4
   29e70:	strh	r1, [r2]
   29e74:	ldrh	r2, [r4, #8]
   29e78:	cmp	r2, r6
   29e7c:	addls	r6, r6, #1
   29e80:	strhls	r6, [r4, #8]
   29e84:	adds	r3, r3, sl
   29e88:	beq	29ea0 <flatcc_builder_table_add_copy@@Base+0xec>
   29e8c:	mov	r0, r3
   29e90:	mov	r2, r5
   29e94:	mov	r1, r7
   29e98:	bl	14524 <memcpy@plt>
   29e9c:	mov	r3, r0
   29ea0:	mov	r0, r3
   29ea4:	add	sp, sp, #12
   29ea8:	ldrd	r4, [sp]
   29eac:	ldrd	r6, [sp, #8]
   29eb0:	ldrd	r8, [sp, #16]
   29eb4:	ldrd	sl, [sp, #24]
   29eb8:	add	sp, sp, #32
   29ebc:	pop	{pc}		; (ldr pc, [sp], #4)
   29ec0:	ldr	r2, [r4, #28]
   29ec4:	mov	r0, #1
   29ec8:	add	r1, r4, #60	; 0x3c
   29ecc:	mov	r3, r0
   29ed0:	str	r0, [sp]
   29ed4:	ldr	fp, [r4, #48]	; 0x30
   29ed8:	add	r2, r2, r0
   29edc:	ldr	r0, [r4, #40]	; 0x28
   29ee0:	add	r2, r2, ip
   29ee4:	blx	fp
   29ee8:	cmp	r0, #0
   29eec:	bne	29f2c <flatcc_builder_table_add_copy@@Base+0x178>
   29ef0:	ldr	r2, [r4, #4]
   29ef4:	movw	r0, #65532	; 0xfffc
   29ef8:	ldr	r3, [r4, #28]
   29efc:	ldr	r1, [r4, #64]	; 0x40
   29f00:	add	r2, r2, r8
   29f04:	ldr	lr, [r4, #60]	; 0x3c
   29f08:	ldr	ip, [r4, #32]
   29f0c:	sub	r1, r1, r3
   29f10:	cmp	r1, r0
   29f14:	add	r3, lr, r3
   29f18:	movcs	r1, r0
   29f1c:	str	r3, [r4, #16]
   29f20:	str	r1, [r4, #24]
   29f24:	str	r0, [ip, #4]
   29f28:	b	29e6c <flatcc_builder_table_add_copy@@Base+0xb8>
   29f2c:	mov	r3, r9
   29f30:	b	29ea0 <flatcc_builder_table_add_copy@@Base+0xec>
   29f34:	movw	r1, #23364	; 0x5b44
   29f38:	movt	r1, #4
   29f3c:	ldr	r3, [pc, #68]	; 29f88 <flatcc_builder_table_add_copy@@Base+0x1d4>
   29f40:	movw	r0, #23556	; 0x5c04
   29f44:	movt	r0, #4
   29f48:	movw	r2, #1784	; 0x6f8
   29f4c:	bl	145f0 <__assert_fail@plt>
   29f50:	movw	r1, #23364	; 0x5b44
   29f54:	movt	r1, #4
   29f58:	ldr	r3, [pc, #40]	; 29f88 <flatcc_builder_table_add_copy@@Base+0x1d4>
   29f5c:	movw	r0, #24232	; 0x5ea8
   29f60:	movt	r0, #4
   29f64:	movw	r2, #1774	; 0x6ee
   29f68:	bl	145f0 <__assert_fail@plt>
   29f6c:	movw	r1, #23364	; 0x5b44
   29f70:	movt	r1, #4
   29f74:	ldr	r3, [pc, #12]	; 29f88 <flatcc_builder_table_add_copy@@Base+0x1d4>
   29f78:	movw	r0, #24080	; 0x5e10
   29f7c:	movt	r0, #4
   29f80:	movw	r2, #1773	; 0x6ed
   29f84:	bl	145f0 <__assert_fail@plt>
   29f88:	andeq	r5, r4, r4, lsl #21

00029f8c <flatcc_builder_table_add_offset@@Base>:
   29f8c:	ldr	r3, [r0, #32]
   29f90:	strd	r4, [sp, #-28]!	; 0xffffffe4
   29f94:	ldrh	r3, [r3, #14]
   29f98:	strd	r6, [sp, #8]
   29f9c:	strd	r8, [sp, #16]
   29fa0:	str	lr, [sp, #24]
   29fa4:	sub	sp, sp, #12
   29fa8:	cmp	r3, #3
   29fac:	bne	2a10c <flatcc_builder_table_add_offset@@Base+0x180>
   29fb0:	movw	r3, #32764	; 0x7ffc
   29fb4:	cmp	r1, r3
   29fb8:	bhi	2a0f0 <flatcc_builder_table_add_offset@@Base+0x164>
   29fbc:	ldr	ip, [r0, #4]
   29fc0:	lsl	r7, r1, #1
   29fc4:	mov	r4, r0
   29fc8:	ldrh	r5, [ip, r7]
   29fcc:	add	ip, ip, r7
   29fd0:	cmp	r5, #0
   29fd4:	bne	2a0d4 <flatcc_builder_table_add_offset@@Base+0x148>
   29fd8:	ldr	r2, [r0, #12]
   29fdc:	movw	r3, #31153	; 0x79b1
   29fe0:	movt	r3, #40503	; 0x9e37
   29fe4:	uxth	r6, r1
   29fe8:	ldr	r8, [r0, #20]
   29fec:	ldr	r0, [r0, #24]
   29ff0:	eor	r1, r1, r2
   29ff4:	mul	r1, r3, r1
   29ff8:	add	r8, r8, #3
   29ffc:	bic	r8, r8, #3
   2a000:	add	r2, r8, #4
   2a004:	eor	r1, r1, #4
   2a008:	cmp	r2, r0
   2a00c:	str	r2, [r4, #20]
   2a010:	mul	r1, r3, r1
   2a014:	str	r1, [r4, #12]
   2a018:	bhi	2a068 <flatcc_builder_table_add_offset@@Base+0xdc>
   2a01c:	ldr	r0, [r4, #16]
   2a020:	uxth	r2, r8
   2a024:	add	r0, r0, r8
   2a028:	add	r3, r2, #4
   2a02c:	strh	r3, [ip]
   2a030:	ldrh	r3, [r4, #8]
   2a034:	cmp	r3, r6
   2a038:	ldr	r3, [r4]
   2a03c:	addls	r6, r6, #1
   2a040:	strhls	r6, [r4, #8]
   2a044:	add	r1, r3, #2
   2a048:	str	r1, [r4]
   2a04c:	strh	r2, [r3]
   2a050:	add	sp, sp, #12
   2a054:	ldrd	r4, [sp]
   2a058:	ldrd	r6, [sp, #8]
   2a05c:	ldrd	r8, [sp, #16]
   2a060:	add	sp, sp, #24
   2a064:	pop	{pc}		; (ldr pc, [sp], #4)
   2a068:	ldr	ip, [r4, #28]
   2a06c:	mov	r0, #1
   2a070:	add	r1, r4, #60	; 0x3c
   2a074:	mov	r3, r0
   2a078:	str	r0, [sp]
   2a07c:	ldr	r0, [r4, #40]	; 0x28
   2a080:	add	r2, r2, ip
   2a084:	ldr	r9, [r4, #48]	; 0x30
   2a088:	blx	r9
   2a08c:	cmp	r0, #0
   2a090:	bne	2a0cc <flatcc_builder_table_add_offset@@Base+0x140>
   2a094:	ldr	ip, [r4, #4]
   2a098:	movw	r2, #65532	; 0xfffc
   2a09c:	ldrd	r0, [r4, #28]
   2a0a0:	ldr	r3, [r4, #64]	; 0x40
   2a0a4:	add	ip, ip, r7
   2a0a8:	ldr	r5, [r4, #60]	; 0x3c
   2a0ac:	sub	r3, r3, r0
   2a0b0:	cmp	r3, r2
   2a0b4:	add	r0, r5, r0
   2a0b8:	movcs	r3, r2
   2a0bc:	str	r0, [r4, #16]
   2a0c0:	str	r3, [r4, #24]
   2a0c4:	str	r2, [r1, #4]
   2a0c8:	b	2a020 <flatcc_builder_table_add_offset@@Base+0x94>
   2a0cc:	mov	r0, r5
   2a0d0:	b	2a050 <flatcc_builder_table_add_offset@@Base+0xc4>
   2a0d4:	movw	r1, #23364	; 0x5b44
   2a0d8:	movt	r1, #4
   2a0dc:	ldr	r3, [pc, #68]	; 2a128 <flatcc_builder_table_add_offset@@Base+0x19c>
   2a0e0:	movw	r0, #23556	; 0x5c04
   2a0e4:	movt	r0, #4
   2a0e8:	movw	r2, #1819	; 0x71b
   2a0ec:	bl	145f0 <__assert_fail@plt>
   2a0f0:	movw	r1, #23364	; 0x5b44
   2a0f4:	movt	r1, #4
   2a0f8:	ldr	r3, [pc, #40]	; 2a128 <flatcc_builder_table_add_offset@@Base+0x19c>
   2a0fc:	movw	r0, #24232	; 0x5ea8
   2a100:	movt	r0, #4
   2a104:	movw	r2, #1812	; 0x714
   2a108:	bl	145f0 <__assert_fail@plt>
   2a10c:	movw	r1, #23364	; 0x5b44
   2a110:	movt	r1, #4
   2a114:	ldr	r3, [pc, #12]	; 2a128 <flatcc_builder_table_add_offset@@Base+0x19c>
   2a118:	movw	r0, #24080	; 0x5e10
   2a11c:	movt	r0, #4
   2a120:	movw	r2, #1811	; 0x713
   2a124:	bl	145f0 <__assert_fail@plt>
   2a128:			; <UNDEFINED> instruction: 0x00045abc

0002a12c <flatcc_builder_table_add_union@@Base>:
   2a12c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2a130:	strd	r6, [sp, #8]
   2a134:	strd	r8, [sp, #16]
   2a138:	str	lr, [sp, #24]
   2a13c:	sub	sp, sp, #20
   2a140:	add	ip, sp, #16
   2a144:	stmdb	ip, {r2, r3}
   2a148:	ldr	r3, [r0, #32]
   2a14c:	ldrb	r7, [sp, #8]
   2a150:	ldr	r6, [sp, #12]
   2a154:	ldrh	r3, [r3, #14]
   2a158:	cmp	r3, #3
   2a15c:	bne	2a318 <flatcc_builder_table_add_union@@Base+0x1ec>
   2a160:	cmp	r7, #0
   2a164:	mov	r4, r0
   2a168:	mov	r5, r1
   2a16c:	beq	2a250 <flatcc_builder_table_add_union@@Base+0x124>
   2a170:	cmp	r6, #0
   2a174:	beq	2a198 <flatcc_builder_table_add_union@@Base+0x6c>
   2a178:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   2a17c:	cmp	r0, #0
   2a180:	beq	2a36c <flatcc_builder_table_add_union@@Base+0x240>
   2a184:	ldr	r3, [r4, #32]
   2a188:	ldrh	r3, [r3, #14]
   2a18c:	str	r6, [r0]
   2a190:	cmp	r3, #3
   2a194:	bne	2a334 <flatcc_builder_table_add_union@@Base+0x208>
   2a198:	sub	r1, r5, #1
   2a19c:	movw	r3, #32764	; 0x7ffc
   2a1a0:	cmp	r1, r3
   2a1a4:	bhi	2a350 <flatcc_builder_table_add_union@@Base+0x224>
   2a1a8:	ldrh	r3, [r4, #130]	; 0x82
   2a1ac:	lsl	r8, r1, #1
   2a1b0:	cmp	r3, #0
   2a1b4:	moveq	r3, #1
   2a1b8:	strheq	r3, [r4, #130]	; 0x82
   2a1bc:	ldr	r3, [r4, #4]
   2a1c0:	ldrh	r2, [r3, r8]
   2a1c4:	add	r0, r3, r8
   2a1c8:	cmp	r2, #0
   2a1cc:	bne	2a2fc <flatcc_builder_table_add_union@@Base+0x1d0>
   2a1d0:	ldr	r2, [r4, #12]
   2a1d4:	movw	r3, #31153	; 0x79b1
   2a1d8:	movt	r3, #40503	; 0x9e37
   2a1dc:	uxth	r6, r1
   2a1e0:	ldr	r5, [r4, #20]
   2a1e4:	ldr	ip, [r4, #24]
   2a1e8:	eor	r1, r1, r2
   2a1ec:	mul	r1, r3, r1
   2a1f0:	add	r2, r5, #1
   2a1f4:	cmp	r2, ip
   2a1f8:	str	r2, [r4, #20]
   2a1fc:	eor	r1, r1, #1
   2a200:	mul	r1, r3, r1
   2a204:	str	r1, [r4, #12]
   2a208:	bcs	2a274 <flatcc_builder_table_add_union@@Base+0x148>
   2a20c:	ldr	r3, [r4, #16]
   2a210:	add	r2, r5, #4
   2a214:	strh	r2, [r0]
   2a218:	ldrh	r2, [r4, #8]
   2a21c:	cmp	r2, r6
   2a220:	addls	r6, r6, #1
   2a224:	strhls	r6, [r4, #8]
   2a228:	cmn	r3, r5
   2a22c:	beq	2a2e0 <flatcc_builder_table_add_union@@Base+0x1b4>
   2a230:	mov	r0, #0
   2a234:	strb	r7, [r3, r5]
   2a238:	add	sp, sp, #20
   2a23c:	ldrd	r4, [sp]
   2a240:	ldrd	r6, [sp, #8]
   2a244:	ldrd	r8, [sp, #16]
   2a248:	add	sp, sp, #24
   2a24c:	pop	{pc}		; (ldr pc, [sp], #4)
   2a250:	cmp	r6, #0
   2a254:	beq	2a198 <flatcc_builder_table_add_union@@Base+0x6c>
   2a258:	movw	r1, #23364	; 0x5b44
   2a25c:	movt	r1, #4
   2a260:	ldr	r3, [pc, #288]	; 2a388 <flatcc_builder_table_add_union@@Base+0x25c>
   2a264:	movw	r0, #24300	; 0x5eec
   2a268:	movt	r0, #4
   2a26c:	movw	r2, #1519	; 0x5ef
   2a270:	bl	145f0 <__assert_fail@plt>
   2a274:	ldr	r2, [r4, #28]
   2a278:	mov	r0, #1
   2a27c:	add	r1, r4, #60	; 0x3c
   2a280:	mov	r3, r0
   2a284:	str	r0, [sp]
   2a288:	ldr	r0, [r4, #40]	; 0x28
   2a28c:	add	r2, r5, r2
   2a290:	ldr	r9, [r4, #48]	; 0x30
   2a294:	add	r2, r2, #2
   2a298:	blx	r9
   2a29c:	cmp	r0, #0
   2a2a0:	bne	2a2e0 <flatcc_builder_table_add_union@@Base+0x1b4>
   2a2a4:	ldr	r0, [r4, #4]
   2a2a8:	movw	r1, #65532	; 0xfffc
   2a2ac:	ldr	ip, [r4, #28]
   2a2b0:	ldr	r2, [r4, #64]	; 0x40
   2a2b4:	add	r0, r0, r8
   2a2b8:	ldr	r3, [r4, #60]	; 0x3c
   2a2bc:	ldr	lr, [r4, #32]
   2a2c0:	sub	r2, r2, ip
   2a2c4:	cmp	r2, r1
   2a2c8:	add	r3, r3, ip
   2a2cc:	movcs	r2, r1
   2a2d0:	str	r3, [r4, #16]
   2a2d4:	str	r2, [r4, #24]
   2a2d8:	str	r1, [lr, #4]
   2a2dc:	b	2a210 <flatcc_builder_table_add_union@@Base+0xe4>
   2a2e0:	movw	r1, #23364	; 0x5b44
   2a2e4:	movt	r1, #4
   2a2e8:	ldr	r3, [pc, #152]	; 2a388 <flatcc_builder_table_add_union@@Base+0x25c>
   2a2ec:	movw	r0, #24348	; 0x5f1c
   2a2f0:	movt	r0, #4
   2a2f4:	movw	r2, #1526	; 0x5f6
   2a2f8:	bl	145f0 <__assert_fail@plt>
   2a2fc:	movw	r1, #23364	; 0x5b44
   2a300:	movt	r1, #4
   2a304:	ldr	r3, [pc, #128]	; 2a38c <flatcc_builder_table_add_union@@Base+0x260>
   2a308:	movw	r0, #23556	; 0x5c04
   2a30c:	movt	r0, #4
   2a310:	movw	r2, #1784	; 0x6f8
   2a314:	bl	145f0 <__assert_fail@plt>
   2a318:	movw	r1, #23364	; 0x5b44
   2a31c:	movt	r1, #4
   2a320:	ldr	r3, [pc, #96]	; 2a388 <flatcc_builder_table_add_union@@Base+0x25c>
   2a324:	movw	r0, #24080	; 0x5e10
   2a328:	movt	r0, #4
   2a32c:	movw	r2, #1518	; 0x5ee
   2a330:	bl	145f0 <__assert_fail@plt>
   2a334:	movw	r1, #23364	; 0x5b44
   2a338:	movt	r1, #4
   2a33c:	ldr	r3, [pc, #72]	; 2a38c <flatcc_builder_table_add_union@@Base+0x260>
   2a340:	movw	r0, #24080	; 0x5e10
   2a344:	movt	r0, #4
   2a348:	movw	r2, #1773	; 0x6ed
   2a34c:	bl	145f0 <__assert_fail@plt>
   2a350:	movw	r1, #23364	; 0x5b44
   2a354:	movt	r1, #4
   2a358:	ldr	r3, [pc, #44]	; 2a38c <flatcc_builder_table_add_union@@Base+0x260>
   2a35c:	movw	r0, #24232	; 0x5ea8
   2a360:	movt	r0, #4
   2a364:	movw	r2, #1774	; 0x6ee
   2a368:	bl	145f0 <__assert_fail@plt>
   2a36c:	movw	r1, #23364	; 0x5b44
   2a370:	movt	r1, #4
   2a374:	ldr	r3, [pc, #12]	; 2a388 <flatcc_builder_table_add_union@@Base+0x25c>
   2a378:	movw	r0, #24336	; 0x5f10
   2a37c:	movt	r0, #4
   2a380:	movw	r2, #1522	; 0x5f2
   2a384:	bl	145f0 <__assert_fail@plt>
   2a388:	ldrdeq	r5, [r4], -ip
   2a38c:	andeq	r5, r4, r4, lsl #21

0002a390 <flatcc_builder_table_add_union_vector@@Base>:
   2a390:	strd	r4, [sp, #-20]!	; 0xffffffec
   2a394:	strd	r6, [sp, #8]
   2a398:	mov	r7, r1
   2a39c:	str	lr, [sp, #16]
   2a3a0:	sub	sp, sp, #12
   2a3a4:	add	r1, sp, #8
   2a3a8:	stmdb	r1, {r2, r3}
   2a3ac:	ldr	r3, [r0, #32]
   2a3b0:	ldm	sp, {r4, r6}
   2a3b4:	ldrh	r3, [r3, #14]
   2a3b8:	cmp	r3, #3
   2a3bc:	bne	2a45c <flatcc_builder_table_add_union_vector@@Base+0xcc>
   2a3c0:	clz	r3, r6
   2a3c4:	clz	r2, r4
   2a3c8:	lsr	r3, r3, #5
   2a3cc:	lsr	r2, r2, #5
   2a3d0:	cmp	r2, r3
   2a3d4:	beq	2a404 <flatcc_builder_table_add_union_vector@@Base+0x74>
   2a3d8:	adds	r4, r4, #0
   2a3dc:	movne	r4, #1
   2a3e0:	cmp	r4, r3
   2a3e4:	mvnne	r4, #0
   2a3e8:	beq	2a478 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   2a3ec:	mov	r0, r4
   2a3f0:	add	sp, sp, #12
   2a3f4:	ldrd	r4, [sp]
   2a3f8:	ldrd	r6, [sp, #8]
   2a3fc:	add	sp, sp, #16
   2a400:	pop	{pc}		; (ldr pc, [sp], #4)
   2a404:	cmp	r4, #0
   2a408:	beq	2a3ec <flatcc_builder_table_add_union_vector@@Base+0x5c>
   2a40c:	sub	r1, r7, #1
   2a410:	mov	r5, r0
   2a414:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   2a418:	subs	r3, r0, #0
   2a41c:	beq	2a494 <flatcc_builder_table_add_union_vector@@Base+0x104>
   2a420:	mov	r1, r7
   2a424:	mov	r0, r5
   2a428:	str	r4, [r3]
   2a42c:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   2a430:	cmp	r0, #0
   2a434:	movne	r4, #0
   2a438:	strne	r6, [r0]
   2a43c:	bne	2a3ec <flatcc_builder_table_add_union_vector@@Base+0x5c>
   2a440:	movw	r1, #23364	; 0x5b44
   2a444:	movt	r1, #4
   2a448:	ldr	r3, [pc, #96]	; 2a4b0 <flatcc_builder_table_add_union_vector@@Base+0x120>
   2a44c:	movw	r0, #24336	; 0x5f10
   2a450:	movt	r0, #4
   2a454:	movw	r2, #1544	; 0x608
   2a458:	bl	145f0 <__assert_fail@plt>
   2a45c:	movw	r1, #23364	; 0x5b44
   2a460:	movt	r1, #4
   2a464:	ldr	r3, [pc, #68]	; 2a4b0 <flatcc_builder_table_add_union_vector@@Base+0x120>
   2a468:	movw	r0, #24080	; 0x5e10
   2a46c:	movt	r0, #4
   2a470:	mov	r2, #1536	; 0x600
   2a474:	bl	145f0 <__assert_fail@plt>
   2a478:	movw	r1, #23364	; 0x5b44
   2a47c:	movt	r1, #4
   2a480:	ldr	r3, [pc, #40]	; 2a4b0 <flatcc_builder_table_add_union_vector@@Base+0x120>
   2a484:	movw	r0, #24360	; 0x5f28
   2a488:	movt	r0, #4
   2a48c:	movw	r2, #1537	; 0x601
   2a490:	bl	145f0 <__assert_fail@plt>
   2a494:	movw	r1, #23364	; 0x5b44
   2a498:	movt	r1, #4
   2a49c:	ldr	r3, [pc, #12]	; 2a4b0 <flatcc_builder_table_add_union_vector@@Base+0x120>
   2a4a0:	movw	r0, #24336	; 0x5f10
   2a4a4:	movt	r0, #4
   2a4a8:	movw	r2, #1540	; 0x604
   2a4ac:	bl	145f0 <__assert_fail@plt>
   2a4b0:	strdeq	r5, [r4], -ip

0002a4b4 <flatcc_builder_push_buffer_alignment@@Base>:
   2a4b4:	mov	r3, r0
   2a4b8:	mov	r2, #4
   2a4bc:	ldrh	r0, [r0, #128]	; 0x80
   2a4c0:	strh	r2, [r3, #128]	; 0x80
   2a4c4:	bx	lr

0002a4c8 <flatcc_builder_pop_buffer_alignment@@Base>:
   2a4c8:	ldrh	r3, [r0, #128]	; 0x80
   2a4cc:	cmp	r3, r1
   2a4d0:	strhcc	r1, [r0, #128]	; 0x80
   2a4d4:	bx	lr

0002a4d8 <flatcc_builder_get_buffer_alignment@@Base>:
   2a4d8:	ldrh	r0, [r0, #128]	; 0x80
   2a4dc:	bx	lr

0002a4e0 <flatcc_builder_set_vtable_clustering@@Base>:
   2a4e0:	clz	r1, r1
   2a4e4:	lsr	r1, r1, #5
   2a4e8:	str	r1, [r0, #180]	; 0xb4
   2a4ec:	bx	lr

0002a4f0 <flatcc_builder_set_block_align@@Base>:
   2a4f0:	strh	r1, [r0, #132]	; 0x84
   2a4f4:	bx	lr

0002a4f8 <flatcc_builder_get_level@@Base>:
   2a4f8:	ldr	r0, [r0, #156]	; 0x9c
   2a4fc:	bx	lr

0002a500 <flatcc_builder_set_max_level@@Base>:
   2a500:	ldr	r3, [r0, #160]	; 0xa0
   2a504:	str	r1, [r0, #176]	; 0xb0
   2a508:	cmp	r3, r1
   2a50c:	strlt	r1, [r0, #160]	; 0xa0
   2a510:	bx	lr

0002a514 <flatcc_builder_get_buffer_size@@Base>:
   2a514:	ldr	r3, [r0, #136]	; 0x88
   2a518:	ldr	r0, [r0, #140]	; 0x8c
   2a51c:	sub	r0, r0, r3
   2a520:	bx	lr

0002a524 <flatcc_builder_get_buffer_start@@Base>:
   2a524:	ldr	r0, [r0, #136]	; 0x88
   2a528:	bx	lr

0002a52c <flatcc_builder_get_buffer_end@@Base>:
   2a52c:	ldr	r0, [r0, #140]	; 0x8c
   2a530:	bx	lr

0002a534 <flatcc_builder_set_vtable_cache_limit@@Base>:
   2a534:	str	r1, [r0, #172]	; 0xac
   2a538:	bx	lr

0002a53c <flatcc_builder_set_identifier@@Base>:
   2a53c:	ldr	r3, [pc, #16]	; 2a554 <flatcc_builder_set_identifier@@Base+0x18>
   2a540:	cmp	r1, #0
   2a544:	moveq	r1, r3
   2a548:	ldr	r3, [r1]
   2a54c:	str	r3, [r0, #168]	; 0xa8
   2a550:	bx	lr
   2a554:	muleq	r4, ip, r4

0002a558 <flatcc_builder_get_type@@Base>:
   2a558:	ldr	r0, [r0, #32]
   2a55c:	cmp	r0, #0
   2a560:	ldrhne	r0, [r0, #14]
   2a564:	bx	lr

0002a568 <flatcc_builder_get_type_at@@Base>:
   2a568:	cmp	r1, #0
   2a56c:	ble	2a594 <flatcc_builder_get_type_at@@Base+0x2c>
   2a570:	ldr	r3, [r0, #156]	; 0x9c
   2a574:	cmp	r3, r1
   2a578:	blt	2a594 <flatcc_builder_get_type_at@@Base+0x2c>
   2a57c:	ldr	r2, [r0, #32]
   2a580:	sub	r1, r1, r3
   2a584:	add	r1, r1, r1, lsl #3
   2a588:	add	r1, r2, r1, lsl #2
   2a58c:	ldrh	r0, [r1, #14]
   2a590:	bx	lr
   2a594:	mov	r0, #0
   2a598:	bx	lr

0002a59c <flatcc_builder_get_direct_buffer@@Base>:
   2a59c:	ldr	r3, [r0, #184]	; 0xb8
   2a5a0:	cmp	r3, #0
   2a5a4:	bne	2a5c0 <flatcc_builder_get_direct_buffer@@Base+0x24>
   2a5a8:	cmp	r1, #0
   2a5ac:	movne	r3, #0
   2a5b0:	movne	r0, r3
   2a5b4:	moveq	r0, r1
   2a5b8:	strne	r3, [r1]
   2a5bc:	bx	lr
   2a5c0:	ldrd	r2, [r0, #188]	; 0xbc
   2a5c4:	cmp	r2, r3
   2a5c8:	bne	2a5a8 <flatcc_builder_get_direct_buffer@@Base+0xc>
   2a5cc:	cmp	r1, #0
   2a5d0:	ldrne	r3, [r0, #212]	; 0xd4
   2a5d4:	ldr	r0, [r0, #196]	; 0xc4
   2a5d8:	strne	r3, [r1]
   2a5dc:	bx	lr

0002a5e0 <flatcc_builder_copy_buffer@@Base>:
   2a5e0:	ldr	r3, [r0, #184]	; 0xb8
   2a5e4:	cmp	r3, #0
   2a5e8:	beq	2a610 <flatcc_builder_copy_buffer@@Base+0x30>
   2a5ec:	add	r0, r0, #188	; 0xbc
   2a5f0:	str	r4, [sp, #-8]!
   2a5f4:	str	lr, [sp, #4]
   2a5f8:	bl	2ad4c <flatcc_emitter_copy_buffer@@Base>
   2a5fc:	cmp	r0, #0
   2a600:	beq	2a618 <flatcc_builder_copy_buffer@@Base+0x38>
   2a604:	ldr	r4, [sp]
   2a608:	add	sp, sp, #4
   2a60c:	pop	{pc}		; (ldr pc, [sp], #4)
   2a610:	mov	r0, r3
   2a614:	bx	lr
   2a618:	bl	24eac <flatcc_builder_default_alloc@@Base+0x23c>

0002a61c <flatcc_builder_finalize_buffer@@Base>:
   2a61c:	strd	r4, [sp, #-16]!
   2a620:	cmp	r1, #0
   2a624:	mov	r5, r0
   2a628:	ldr	r2, [r0, #136]	; 0x88
   2a62c:	ldr	r4, [r0, #140]	; 0x8c
   2a630:	str	r6, [sp, #8]
   2a634:	str	lr, [sp, #12]
   2a638:	sub	r4, r4, r2
   2a63c:	mov	r0, r4
   2a640:	strne	r4, [r1]
   2a644:	bl	14554 <malloc@plt>
   2a648:	subs	r6, r0, #0
   2a64c:	beq	2a6a4 <flatcc_builder_finalize_buffer@@Base+0x88>
   2a650:	ldr	r3, [r5, #184]	; 0xb8
   2a654:	cmp	r3, #0
   2a658:	beq	2a688 <flatcc_builder_finalize_buffer@@Base+0x6c>
   2a65c:	mov	r2, r4
   2a660:	add	r0, r5, #188	; 0xbc
   2a664:	mov	r1, r6
   2a668:	bl	2ad4c <flatcc_emitter_copy_buffer@@Base>
   2a66c:	cmp	r0, #0
   2a670:	beq	2a6c0 <flatcc_builder_finalize_buffer@@Base+0xa4>
   2a674:	mov	r0, r6
   2a678:	ldrd	r4, [sp]
   2a67c:	ldr	r6, [sp, #8]
   2a680:	add	sp, sp, #12
   2a684:	pop	{pc}		; (ldr pc, [sp], #4)
   2a688:	movw	r1, #23364	; 0x5b44
   2a68c:	movt	r1, #4
   2a690:	ldr	r3, [pc, #44]	; 2a6c4 <flatcc_builder_finalize_buffer@@Base+0xa8>
   2a694:	movw	r0, #23556	; 0x5c04
   2a698:	movt	r0, #4
   2a69c:	movw	r2, #1948	; 0x79c
   2a6a0:	bl	145f0 <__assert_fail@plt>
   2a6a4:	movw	r1, #23364	; 0x5b44
   2a6a8:	movt	r1, #4
   2a6ac:	ldr	r3, [pc, #16]	; 2a6c4 <flatcc_builder_finalize_buffer@@Base+0xa8>
   2a6b0:	movw	r0, #23556	; 0x5c04
   2a6b4:	movt	r0, #4
   2a6b8:	movw	r2, #1944	; 0x798
   2a6bc:	bl	145f0 <__assert_fail@plt>
   2a6c0:	bl	24eac <flatcc_builder_default_alloc@@Base+0x23c>
   2a6c4:	andeq	r5, r4, r4, lsr #22

0002a6c8 <flatcc_builder_finalize_aligned_buffer@@Base>:
   2a6c8:	strd	r4, [sp, #-20]!	; 0xffffffec
   2a6cc:	mov	r2, #0
   2a6d0:	mov	r5, r0
   2a6d4:	ldr	r3, [r0, #136]	; 0x88
   2a6d8:	ldr	r4, [r0, #140]	; 0x8c
   2a6dc:	strd	r6, [sp, #8]
   2a6e0:	subs	r6, r1, #0
   2a6e4:	ldrh	r1, [r0, #128]	; 0x80
   2a6e8:	str	lr, [sp, #16]
   2a6ec:	sub	sp, sp, #12
   2a6f0:	add	r0, sp, #4
   2a6f4:	sub	r3, r4, r3
   2a6f8:	str	r2, [sp, #4]
   2a6fc:	sub	r4, r1, #1
   2a700:	rsb	r2, r1, #0
   2a704:	strne	r3, [r6]
   2a708:	add	r4, r4, r3
   2a70c:	cmp	r1, #4
   2a710:	and	r4, r4, r2
   2a714:	movcc	r1, #4
   2a718:	mov	r2, r4
   2a71c:	bl	14590 <posix_memalign@plt>
   2a720:	cmp	r0, #0
   2a724:	beq	2a764 <flatcc_builder_finalize_aligned_buffer@@Base+0x9c>
   2a728:	ldr	r0, [sp, #4]
   2a72c:	cmp	r0, #0
   2a730:	beq	2a738 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   2a734:	bl	14518 <free@plt>
   2a738:	cmp	r6, #0
   2a73c:	movne	r3, #0
   2a740:	moveq	r7, r6
   2a744:	movne	r7, r3
   2a748:	strne	r3, [r6]
   2a74c:	mov	r0, r7
   2a750:	add	sp, sp, #12
   2a754:	ldrd	r4, [sp]
   2a758:	ldrd	r6, [sp, #8]
   2a75c:	add	sp, sp, #16
   2a760:	pop	{pc}		; (ldr pc, [sp], #4)
   2a764:	ldr	r7, [sp, #4]
   2a768:	cmp	r7, #0
   2a76c:	beq	2a738 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   2a770:	ldr	r3, [r5, #184]	; 0xb8
   2a774:	cmp	r3, #0
   2a778:	beq	2a798 <flatcc_builder_finalize_aligned_buffer@@Base+0xd0>
   2a77c:	mov	r2, r4
   2a780:	add	r0, r5, #188	; 0xbc
   2a784:	mov	r1, r7
   2a788:	bl	2ad4c <flatcc_emitter_copy_buffer@@Base>
   2a78c:	cmp	r0, #0
   2a790:	bne	2a74c <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   2a794:	bl	24eac <flatcc_builder_default_alloc@@Base+0x23c>
   2a798:	mov	r0, r7
   2a79c:	b	2a734 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>

0002a7a0 <flatcc_builder_aligned_alloc@@Base>:
   2a7a0:	cmp	r0, #4
   2a7a4:	str	r4, [sp, #-8]!
   2a7a8:	mov	r4, #0
   2a7ac:	str	lr, [sp, #4]
   2a7b0:	sub	sp, sp, #8
   2a7b4:	mov	r2, r1
   2a7b8:	movcs	r1, r0
   2a7bc:	movcc	r1, #4
   2a7c0:	add	r0, sp, #4
   2a7c4:	str	r4, [sp, #4]
   2a7c8:	bl	14590 <posix_memalign@plt>
   2a7cc:	cmp	r0, r4
   2a7d0:	ldr	r0, [sp, #4]
   2a7d4:	beq	2a7e8 <flatcc_builder_aligned_alloc@@Base+0x48>
   2a7d8:	cmp	r0, #0
   2a7dc:	beq	2a7e8 <flatcc_builder_aligned_alloc@@Base+0x48>
   2a7e0:	bl	14518 <free@plt>
   2a7e4:	mov	r0, r4
   2a7e8:	add	sp, sp, #8
   2a7ec:	ldr	r4, [sp]
   2a7f0:	add	sp, sp, #4
   2a7f4:	pop	{pc}		; (ldr pc, [sp], #4)

0002a7f8 <flatcc_builder_aligned_free@@Base>:
   2a7f8:	b	14518 <free@plt>

0002a7fc <flatcc_builder_get_emit_context@@Base>:
   2a7fc:	ldr	r0, [r0, #36]	; 0x24
   2a800:	bx	lr

0002a804 <flatcc_emitter_recycle_page@@Base>:
   2a804:	ldr	r3, [r0]
   2a808:	cmp	r3, r1
   2a80c:	beq	2a850 <flatcc_emitter_recycle_page@@Base+0x4c>
   2a810:	ldr	r2, [r0, #4]
   2a814:	cmp	r2, r1
   2a818:	beq	2a850 <flatcc_emitter_recycle_page@@Base+0x4c>
   2a81c:	push	{lr}		; (str lr, [sp, #-4]!)
   2a820:	mov	r0, #0
   2a824:	ldr	lr, [r1, #2944]	; 0xb80
   2a828:	ldr	ip, [r1, #2948]	; 0xb84
   2a82c:	str	ip, [lr, #2948]	; 0xb84
   2a830:	ldr	r2, [r3, #2948]	; 0xb84
   2a834:	str	lr, [ip, #2944]	; 0xb80
   2a838:	str	r3, [r1, #2944]	; 0xb80
   2a83c:	str	r2, [r1, #2948]	; 0xb84
   2a840:	str	r1, [r2, #2944]	; 0xb80
   2a844:	ldr	r3, [r1, #2944]	; 0xb80
   2a848:	str	r1, [r3, #2948]	; 0xb84
   2a84c:	pop	{pc}		; (ldr pc, [sp], #4)
   2a850:	mvn	r0, #0
   2a854:	bx	lr

0002a858 <flatcc_emitter_reset@@Base>:
   2a858:	ldr	r2, [r0]
   2a85c:	cmp	r2, #0
   2a860:	bxeq	lr
   2a864:	strd	r4, [sp, #-16]!
   2a868:	movw	ip, #64064	; 0xfa40
   2a86c:	movt	ip, #65535	; 0xffff
   2a870:	ldr	r1, [r0, #24]
   2a874:	add	r4, r2, #1472	; 0x5c0
   2a878:	ldr	r3, [r0, #32]
   2a87c:	ldr	r5, [r0, #28]
   2a880:	str	r6, [sp, #8]
   2a884:	str	lr, [sp, #12]
   2a888:	mov	lr, #1472	; 0x5c0
   2a88c:	cmp	r3, #0
   2a890:	stmib	r0, {r2, r4}
   2a894:	moveq	r3, r1
   2a898:	lsr	r1, r1, #2
   2a89c:	str	lr, [r0, #12]
   2a8a0:	add	r3, r3, r3, lsl #1
   2a8a4:	str	r4, [r0, #16]
   2a8a8:	str	lr, [r0, #20]
   2a8ac:	add	r3, r1, r3, lsr #2
   2a8b0:	str	ip, [r2, #2952]	; 0xb88
   2a8b4:	mov	ip, #0
   2a8b8:	cmp	r5, r3, lsl #1
   2a8bc:	str	ip, [r0, #24]
   2a8c0:	str	r3, [r0, #32]
   2a8c4:	bls	2a91c <flatcc_emitter_reset@@Base+0xc4>
   2a8c8:	ldr	r3, [r2, #2944]	; 0xb80
   2a8cc:	mov	r4, r0
   2a8d0:	cmp	r2, r3
   2a8d4:	bne	2a8ec <flatcc_emitter_reset@@Base+0x94>
   2a8d8:	b	2a91c <flatcc_emitter_reset@@Base+0xc4>
   2a8dc:	ldm	r4, {r1, r2}
   2a8e0:	ldr	r3, [r2, #2944]	; 0xb80
   2a8e4:	cmp	r3, r1
   2a8e8:	beq	2a91c <flatcc_emitter_reset@@Base+0xc4>
   2a8ec:	ldr	r1, [r3, #2944]	; 0xb80
   2a8f0:	mov	r0, r3
   2a8f4:	str	r1, [r2, #2944]	; 0xb80
   2a8f8:	ldr	r3, [r3, #2944]	; 0xb80
   2a8fc:	str	r2, [r3, #2948]	; 0xb84
   2a900:	bl	14518 <free@plt>
   2a904:	ldr	r3, [r4, #28]
   2a908:	ldr	r2, [r4, #32]
   2a90c:	sub	r3, r3, #2944	; 0xb80
   2a910:	cmp	r3, r2, lsl #1
   2a914:	str	r3, [r4, #28]
   2a918:	bhi	2a8dc <flatcc_emitter_reset@@Base+0x84>
   2a91c:	ldrd	r4, [sp]
   2a920:	ldr	r6, [sp, #8]
   2a924:	add	sp, sp, #12
   2a928:	pop	{pc}		; (ldr pc, [sp], #4)

0002a92c <flatcc_emitter_clear@@Base>:
   2a92c:	ldr	r3, [r0]
   2a930:	cmp	r3, #0
   2a934:	bxeq	lr
   2a938:	mov	r1, #0
   2a93c:	strd	r4, [sp, #-16]!
   2a940:	mov	r5, r0
   2a944:	ldr	r2, [r3, #2948]	; 0xb84
   2a948:	str	r6, [sp, #8]
   2a94c:	str	lr, [sp, #12]
   2a950:	str	r1, [r2, #2944]	; 0xb80
   2a954:	ldr	r4, [r3, #2944]	; 0xb80
   2a958:	cmp	r4, r1
   2a95c:	bne	2a968 <flatcc_emitter_clear@@Base+0x3c>
   2a960:	b	2a9a4 <flatcc_emitter_clear@@Base+0x78>
   2a964:	mov	r4, r3
   2a968:	ldr	r0, [r4, #2948]	; 0xb84
   2a96c:	bl	14518 <free@plt>
   2a970:	ldr	r3, [r4, #2944]	; 0xb80
   2a974:	cmp	r3, #0
   2a978:	bne	2a964 <flatcc_emitter_clear@@Base+0x38>
   2a97c:	mov	r0, r4
   2a980:	bl	14518 <free@plt>
   2a984:	mov	r0, r5
   2a988:	mov	r2, #36	; 0x24
   2a98c:	ldrd	r4, [sp]
   2a990:	mov	r1, #0
   2a994:	ldr	r6, [sp, #8]
   2a998:	ldr	lr, [sp, #12]
   2a99c:	add	sp, sp, #16
   2a9a0:	b	1459c <memset@plt>
   2a9a4:	mov	r4, r3
   2a9a8:	b	2a97c <flatcc_emitter_clear@@Base+0x50>

0002a9ac <flatcc_emitter@@Base>:
   2a9ac:	cmp	r3, #0
   2a9b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2a9b4:	mov	r4, r0
   2a9b8:	ldr	r3, [r0, #24]
   2a9bc:	strd	r6, [sp, #8]
   2a9c0:	strd	r8, [sp, #16]
   2a9c4:	sub	r8, r2, #1
   2a9c8:	strd	sl, [sp, #24]
   2a9cc:	str	lr, [sp, #32]
   2a9d0:	sub	sp, sp, #12
   2a9d4:	ldr	ip, [sp, #48]	; 0x30
   2a9d8:	add	r3, r3, ip
   2a9dc:	str	r3, [r0, #24]
   2a9e0:	blt	2abc4 <flatcc_emitter@@Base+0x218>
   2a9e4:	ldr	r0, [r0, #20]
   2a9e8:	cmp	r0, ip
   2a9ec:	bcs	2aa84 <flatcc_emitter@@Base+0xd8>
   2a9f0:	cmp	r2, #0
   2a9f4:	beq	2aac8 <flatcc_emitter@@Base+0x11c>
   2a9f8:	movw	r3, #64064	; 0xfa40
   2a9fc:	movt	r3, #65535	; 0xffff
   2aa00:	add	r5, r1, #8
   2aa04:	mov	r8, r2
   2aa08:	mov	r9, #1472	; 0x5c0
   2aa0c:	str	r3, [sp, #4]
   2aa10:	ldr	r7, [r5, #-8]
   2aa14:	ldr	r6, [r5, #-4]
   2aa18:	cmp	r6, #0
   2aa1c:	beq	2ab60 <flatcc_emitter@@Base+0x1b4>
   2aa20:	mov	r3, r0
   2aa24:	cmp	r6, r3
   2aa28:	bls	2aa7c <flatcc_emitter@@Base+0xd0>
   2aa2c:	cmp	r3, #0
   2aa30:	beq	2aae8 <flatcc_emitter@@Base+0x13c>
   2aa34:	sub	fp, r6, r3
   2aa38:	mov	r6, r3
   2aa3c:	mov	r2, r6
   2aa40:	mov	r1, r7
   2aa44:	ldr	r0, [r4, #16]
   2aa48:	bl	14524 <memcpy@plt>
   2aa4c:	ldr	r2, [r4, #16]
   2aa50:	cmp	fp, #0
   2aa54:	add	r7, r7, r6
   2aa58:	ldr	r0, [r4, #20]
   2aa5c:	add	r2, r2, r6
   2aa60:	sub	r3, r0, r6
   2aa64:	mov	r0, r3
   2aa68:	strd	r2, [r4, #16]
   2aa6c:	beq	2ab60 <flatcc_emitter@@Base+0x1b4>
   2aa70:	mov	r6, fp
   2aa74:	cmp	r6, r3
   2aa78:	bhi	2aa2c <flatcc_emitter@@Base+0x80>
   2aa7c:	mov	fp, #0
   2aa80:	b	2aa3c <flatcc_emitter@@Base+0x90>
   2aa84:	ldr	r3, [r4, #16]
   2aa88:	sub	r0, r0, ip
   2aa8c:	str	r0, [r4, #20]
   2aa90:	add	ip, r3, ip
   2aa94:	str	ip, [r4, #16]
   2aa98:	cmp	r2, #0
   2aa9c:	addne	r4, r1, #8
   2aaa0:	beq	2aac8 <flatcc_emitter@@Base+0x11c>
   2aaa4:	mov	r0, r3
   2aaa8:	ldmdb	r4, {r1, r2}
   2aaac:	sub	r8, r8, #1
   2aab0:	bl	14524 <memcpy@plt>
   2aab4:	ldr	r2, [r4, #-4]
   2aab8:	cmn	r8, #1
   2aabc:	add	r4, r4, #8
   2aac0:	add	r3, r0, r2
   2aac4:	bne	2aaa4 <flatcc_emitter@@Base+0xf8>
   2aac8:	mov	r0, #0
   2aacc:	add	sp, sp, #12
   2aad0:	ldrd	r4, [sp]
   2aad4:	ldrd	r6, [sp, #8]
   2aad8:	ldrd	r8, [sp, #16]
   2aadc:	ldrd	sl, [sp, #24]
   2aae0:	add	sp, sp, #32
   2aae4:	pop	{pc}		; (ldr pc, [sp], #4)
   2aae8:	ldr	fp, [r4, #4]
   2aaec:	cmp	fp, #0
   2aaf0:	beq	2ab70 <flatcc_emitter@@Base+0x1c4>
   2aaf4:	ldr	sl, [r4]
   2aaf8:	ldr	r0, [fp, #2944]	; 0xb80
   2aafc:	cmp	r0, sl
   2ab00:	beq	2ab2c <flatcc_emitter@@Base+0x180>
   2ab04:	str	r0, [r4, #4]
   2ab08:	ldr	r1, [r0, #2948]	; 0xb84
   2ab0c:	mov	r2, #2944	; 0xb80
   2ab10:	mov	r3, r2
   2ab14:	str	r0, [r4, #16]
   2ab18:	str	r2, [r4, #20]
   2ab1c:	ldr	r2, [r1, #2952]	; 0xb88
   2ab20:	add	r2, r2, r3
   2ab24:	str	r2, [r0, #2952]	; 0xb88
   2ab28:	b	2aa24 <flatcc_emitter@@Base+0x78>
   2ab2c:	movw	r0, #2956	; 0xb8c
   2ab30:	bl	14554 <malloc@plt>
   2ab34:	cmp	r0, #0
   2ab38:	beq	2abbc <flatcc_emitter@@Base+0x210>
   2ab3c:	ldr	r2, [r4, #28]
   2ab40:	str	sl, [r0, #2944]	; 0xb80
   2ab44:	str	fp, [r0, #2948]	; 0xb84
   2ab48:	add	r2, r2, #2944	; 0xb80
   2ab4c:	str	r2, [r4, #28]
   2ab50:	str	r0, [sl, #2948]	; 0xb84
   2ab54:	str	r0, [fp, #2944]	; 0xb80
   2ab58:	str	r0, [r4, #4]
   2ab5c:	b	2ab08 <flatcc_emitter@@Base+0x15c>
   2ab60:	subs	r8, r8, #1
   2ab64:	add	r5, r5, #8
   2ab68:	bne	2aa10 <flatcc_emitter@@Base+0x64>
   2ab6c:	b	2aac8 <flatcc_emitter@@Base+0x11c>
   2ab70:	movw	r0, #2956	; 0xb8c
   2ab74:	bl	14554 <malloc@plt>
   2ab78:	cmp	r0, #0
   2ab7c:	beq	2abbc <flatcc_emitter@@Base+0x210>
   2ab80:	ldr	r2, [r4, #28]
   2ab84:	add	r1, r0, #1472	; 0x5c0
   2ab88:	mov	r3, #1472	; 0x5c0
   2ab8c:	str	r0, [r4]
   2ab90:	strd	r0, [r4, #4]
   2ab94:	str	r9, [r4, #12]
   2ab98:	str	r1, [r4, #16]
   2ab9c:	add	r2, r2, #2944	; 0xb80
   2aba0:	str	r9, [r4, #20]
   2aba4:	str	r0, [r0, #2944]	; 0xb80
   2aba8:	str	r2, [r4, #28]
   2abac:	ldr	r2, [sp, #4]
   2abb0:	str	r0, [r0, #2948]	; 0xb84
   2abb4:	str	r2, [r0, #2952]	; 0xb88
   2abb8:	b	2aa24 <flatcc_emitter@@Base+0x78>
   2abbc:	mvn	r0, #0
   2abc0:	b	2aacc <flatcc_emitter@@Base+0x120>
   2abc4:	ldr	r0, [r0, #12]
   2abc8:	cmp	r0, ip
   2abcc:	bcs	2ad34 <flatcc_emitter@@Base+0x388>
   2abd0:	add	r5, r1, r2, lsl #3
   2abd4:	movw	r3, #64064	; 0xfa40
   2abd8:	movt	r3, #65535	; 0xffff
   2abdc:	str	r3, [sp, #4]
   2abe0:	cmn	r8, #1
   2abe4:	beq	2aac8 <flatcc_emitter@@Base+0x11c>
   2abe8:	ldr	r7, [r5, #-8]
   2abec:	ldr	r6, [r5, #-4]
   2abf0:	cmp	r6, #0
   2abf4:	add	r7, r7, r6
   2abf8:	beq	2ac48 <flatcc_emitter@@Base+0x29c>
   2abfc:	mov	r9, #1472	; 0x5c0
   2ac00:	ldr	r2, [r4, #12]
   2ac04:	cmp	r2, r6
   2ac08:	bcs	2acac <flatcc_emitter@@Base+0x300>
   2ac0c:	cmp	r2, #0
   2ac10:	beq	2ac54 <flatcc_emitter@@Base+0x2a8>
   2ac14:	sub	r6, r6, r2
   2ac18:	mov	r1, #0
   2ac1c:	ldr	r3, [r4, #8]
   2ac20:	rsb	r0, r2, #0
   2ac24:	add	r7, r7, r0
   2ac28:	str	r1, [r4, #12]
   2ac2c:	mov	r1, r7
   2ac30:	add	r3, r3, r0
   2ac34:	mov	r0, r3
   2ac38:	str	r3, [r4, #8]
   2ac3c:	bl	14524 <memcpy@plt>
   2ac40:	cmp	r6, #0
   2ac44:	bne	2ac00 <flatcc_emitter@@Base+0x254>
   2ac48:	sub	r5, r5, #8
   2ac4c:	sub	r8, r8, #1
   2ac50:	b	2abe0 <flatcc_emitter@@Base+0x234>
   2ac54:	ldr	fp, [r4]
   2ac58:	cmp	fp, #0
   2ac5c:	beq	2acf0 <flatcc_emitter@@Base+0x344>
   2ac60:	ldr	sl, [r4, #4]
   2ac64:	ldr	r0, [fp, #2948]	; 0xb84
   2ac68:	cmp	r0, sl
   2ac6c:	beq	2acbc <flatcc_emitter@@Base+0x310>
   2ac70:	ldr	r3, [fp, #2952]	; 0xb88
   2ac74:	sub	r3, r3, #2944	; 0xb80
   2ac78:	str	r3, [r0, #2952]	; 0xb88
   2ac7c:	str	r0, [r4]
   2ac80:	ldr	r3, [r0, #2944]	; 0xb80
   2ac84:	mov	r2, #2944	; 0xb80
   2ac88:	add	r1, r0, #2944	; 0xb80
   2ac8c:	ldr	r3, [r3, #2952]	; 0xb88
   2ac90:	str	r1, [r4, #8]
   2ac94:	str	r2, [r4, #12]
   2ac98:	sub	r3, r3, #2944	; 0xb80
   2ac9c:	str	r3, [r0, #2952]	; 0xb88
   2aca0:	ldr	r2, [r4, #12]
   2aca4:	cmp	r2, r6
   2aca8:	bcc	2ac0c <flatcc_emitter@@Base+0x260>
   2acac:	sub	r1, r2, r6
   2acb0:	mov	r2, r6
   2acb4:	mov	r6, #0
   2acb8:	b	2ac1c <flatcc_emitter@@Base+0x270>
   2acbc:	movw	r0, #2956	; 0xb8c
   2acc0:	bl	14554 <malloc@plt>
   2acc4:	cmp	r0, #0
   2acc8:	beq	2abbc <flatcc_emitter@@Base+0x210>
   2accc:	ldr	r2, [r4, #28]
   2acd0:	str	fp, [r0, #2944]	; 0xb80
   2acd4:	str	sl, [r0, #2948]	; 0xb84
   2acd8:	add	r2, r2, #2944	; 0xb80
   2acdc:	str	r2, [r4, #28]
   2ace0:	str	r0, [fp, #2948]	; 0xb84
   2ace4:	str	r0, [sl, #2944]	; 0xb80
   2ace8:	str	r0, [r4]
   2acec:	b	2ac80 <flatcc_emitter@@Base+0x2d4>
   2acf0:	movw	r0, #2956	; 0xb8c
   2acf4:	bl	14554 <malloc@plt>
   2acf8:	cmp	r0, #0
   2acfc:	beq	2abbc <flatcc_emitter@@Base+0x210>
   2ad00:	ldr	r3, [r4, #28]
   2ad04:	add	r2, r0, #1472	; 0x5c0
   2ad08:	str	r0, [r4]
   2ad0c:	stmib	r4, {r0, r2, r9}
   2ad10:	add	r3, r3, #2944	; 0xb80
   2ad14:	str	r2, [r4, #16]
   2ad18:	str	r9, [r4, #20]
   2ad1c:	str	r3, [r4, #28]
   2ad20:	ldr	r3, [sp, #4]
   2ad24:	str	r0, [r0, #2944]	; 0xb80
   2ad28:	str	r0, [r0, #2948]	; 0xb84
   2ad2c:	str	r3, [r0, #2952]	; 0xb88
   2ad30:	b	2ac00 <flatcc_emitter@@Base+0x254>
   2ad34:	ldr	r3, [r4, #8]
   2ad38:	sub	r0, r0, ip
   2ad3c:	str	r0, [r4, #12]
   2ad40:	sub	r3, r3, ip
   2ad44:	str	r3, [r4, #8]
   2ad48:	b	2aa98 <flatcc_emitter@@Base+0xec>

0002ad4c <flatcc_emitter_copy_buffer@@Base>:
   2ad4c:	ldr	r3, [r0, #24]
   2ad50:	strd	r4, [sp, #-16]!
   2ad54:	str	r6, [sp, #8]
   2ad58:	str	lr, [sp, #12]
   2ad5c:	cmp	r3, r2
   2ad60:	movhi	r5, #0
   2ad64:	bhi	2ade4 <flatcc_emitter_copy_buffer@@Base+0x98>
   2ad68:	ldr	r5, [r0]
   2ad6c:	mov	r6, r0
   2ad70:	cmp	r5, #0
   2ad74:	beq	2ade4 <flatcc_emitter_copy_buffer@@Base+0x98>
   2ad78:	ldr	r2, [r6, #4]
   2ad7c:	mov	r0, r1
   2ad80:	ldr	r1, [r6, #8]
   2ad84:	cmp	r5, r2
   2ad88:	beq	2adf8 <flatcc_emitter_copy_buffer@@Base+0xac>
   2ad8c:	ldr	r2, [r6, #12]
   2ad90:	rsb	r2, r2, #2944	; 0xb80
   2ad94:	add	r5, r0, r2
   2ad98:	bl	14524 <memcpy@plt>
   2ad9c:	ldrd	r2, [r6]
   2ada0:	ldr	r4, [r2, #2944]	; 0xb80
   2ada4:	cmp	r4, r3
   2ada8:	beq	2add0 <flatcc_emitter_copy_buffer@@Base+0x84>
   2adac:	mov	r2, #2944	; 0xb80
   2adb0:	mov	r1, r4
   2adb4:	mov	r0, r5
   2adb8:	add	r5, r5, r2
   2adbc:	bl	14524 <memcpy@plt>
   2adc0:	ldr	r3, [r6, #4]
   2adc4:	ldr	r4, [r4, #2944]	; 0xb80
   2adc8:	cmp	r3, r4
   2adcc:	bne	2adac <flatcc_emitter_copy_buffer@@Base+0x60>
   2add0:	ldr	r2, [r6, #20]
   2add4:	mov	r1, r4
   2add8:	mov	r0, r5
   2addc:	rsb	r2, r2, #2944	; 0xb80
   2ade0:	bl	14524 <memcpy@plt>
   2ade4:	mov	r0, r5
   2ade8:	ldrd	r4, [sp]
   2adec:	ldr	r6, [sp, #8]
   2adf0:	add	sp, sp, #12
   2adf4:	pop	{pc}		; (ldr pc, [sp], #4)
   2adf8:	mov	r2, r3
   2adfc:	mov	r5, r0
   2ae00:	bl	14524 <memcpy@plt>
   2ae04:	b	2ade4 <flatcc_emitter_copy_buffer@@Base+0x98>

0002ae08 <flatcc_verify_error_string@@Base>:
   2ae08:	cmp	r0, #36	; 0x24
   2ae0c:	bhi	2ae20 <flatcc_verify_error_string@@Base+0x18>
   2ae10:	movw	r3, #24400	; 0x5f50
   2ae14:	movt	r3, #4
   2ae18:	ldr	r0, [r3, r0, lsl #2]
   2ae1c:	bx	lr
   2ae20:	movw	r0, #24548	; 0x5fe4
   2ae24:	movt	r0, #4
   2ae28:	bx	lr

0002ae2c <flatcc_verify_field@@Base>:
   2ae2c:	ldrh	ip, [r0, #22]
   2ae30:	add	r1, r1, #2
   2ae34:	lsl	r1, r1, #1
   2ae38:	uxth	r1, r1
   2ae3c:	cmp	ip, r1
   2ae40:	bls	2ae88 <flatcc_verify_field@@Base+0x5c>
   2ae44:	ldr	ip, [r0, #12]
   2ae48:	ldrh	r1, [ip, r1]
   2ae4c:	cmp	r1, #0
   2ae50:	beq	2ae88 <flatcc_verify_field@@Base+0x5c>
   2ae54:	ldrh	ip, [r0, #20]
   2ae58:	add	r2, r2, r1
   2ae5c:	cmp	r2, ip
   2ae60:	bhi	2ae90 <flatcc_verify_field@@Base+0x64>
   2ae64:	ldr	r2, [r0]
   2ae68:	sub	r3, r3, #1
   2ae6c:	ldr	r0, [r0, #16]
   2ae70:	add	r2, r2, r0
   2ae74:	add	r1, r2, r1
   2ae78:	tst	r1, r3
   2ae7c:	moveq	r0, #0
   2ae80:	movne	r0, #12
   2ae84:	bx	lr
   2ae88:	mov	r0, #0
   2ae8c:	bx	lr
   2ae90:	mov	r0, #13
   2ae94:	bx	lr

0002ae98 <flatcc_verify_string_field@@Base>:
   2ae98:	ldrh	r3, [r0, #22]
   2ae9c:	add	r1, r1, #2
   2aea0:	lsl	r1, r1, #1
   2aea4:	uxth	r1, r1
   2aea8:	cmp	r3, r1
   2aeac:	bls	2af48 <flatcc_verify_string_field@@Base+0xb0>
   2aeb0:	ldr	r3, [r0, #12]
   2aeb4:	ldrh	r3, [r3, r1]
   2aeb8:	cmp	r3, #0
   2aebc:	beq	2af48 <flatcc_verify_string_field@@Base+0xb0>
   2aec0:	ldrh	r2, [r0, #20]
   2aec4:	add	r1, r3, #4
   2aec8:	cmp	r1, r2
   2aecc:	bhi	2af58 <flatcc_verify_string_field@@Base+0xc0>
   2aed0:	ldr	r2, [r0, #16]
   2aed4:	add	r3, r3, r2
   2aed8:	tst	r3, #3
   2aedc:	bne	2af60 <flatcc_verify_string_field@@Base+0xc8>
   2aee0:	cmp	r3, #0
   2aee4:	beq	2af70 <flatcc_verify_string_field@@Base+0xd8>
   2aee8:	ldr	r1, [r0]
   2aeec:	ldr	r2, [r1, r3]
   2aef0:	add	r2, r3, r2
   2aef4:	cmp	r3, r2
   2aef8:	bcs	2af40 <flatcc_verify_string_field@@Base+0xa8>
   2aefc:	ldr	r3, [r0, #4]
   2af00:	add	r0, r2, #4
   2af04:	cmp	r3, r0
   2af08:	bcc	2af40 <flatcc_verify_string_field@@Base+0xa8>
   2af0c:	tst	r2, #3
   2af10:	bne	2af40 <flatcc_verify_string_field@@Base+0xa8>
   2af14:	ldr	r2, [r1, r2]
   2af18:	sub	r3, r3, r0
   2af1c:	add	ip, r2, #1
   2af20:	cmp	r3, ip
   2af24:	bcc	2af68 <flatcc_verify_string_field@@Base+0xd0>
   2af28:	add	r1, r1, r0
   2af2c:	ldrb	r3, [r1, r2]
   2af30:	cmp	r3, #0
   2af34:	moveq	r0, #0
   2af38:	movne	r0, #7
   2af3c:	bx	lr
   2af40:	mov	r0, #17
   2af44:	bx	lr
   2af48:	cmp	r2, #0
   2af4c:	moveq	r0, #0
   2af50:	movne	r0, #4
   2af54:	bx	lr
   2af58:	mov	r0, #13
   2af5c:	bx	lr
   2af60:	mov	r0, #12
   2af64:	bx	lr
   2af68:	mov	r0, #8
   2af6c:	bx	lr
   2af70:	mov	r0, r3
   2af74:	bx	lr

0002af78 <flatcc_verify_vector_field@@Base>:
   2af78:	ldrh	ip, [r0, #22]
   2af7c:	add	r1, r1, #2
   2af80:	lsl	r1, r1, #1
   2af84:	str	r4, [sp, #-8]!
   2af88:	str	lr, [sp, #4]
   2af8c:	uxth	r1, r1
   2af90:	ldrh	lr, [sp, #8]
   2af94:	cmp	ip, r1
   2af98:	bls	2b05c <flatcc_verify_vector_field@@Base+0xe4>
   2af9c:	ldr	ip, [r0, #12]
   2afa0:	ldrh	r1, [ip, r1]
   2afa4:	cmp	r1, #0
   2afa8:	beq	2b05c <flatcc_verify_vector_field@@Base+0xe4>
   2afac:	ldrh	r2, [r0, #20]
   2afb0:	add	ip, r1, #4
   2afb4:	cmp	ip, r2
   2afb8:	movhi	r0, #13
   2afbc:	bhi	2b040 <flatcc_verify_vector_field@@Base+0xc8>
   2afc0:	ldr	r2, [r0, #16]
   2afc4:	add	r2, r1, r2
   2afc8:	tst	r2, #3
   2afcc:	movne	r0, #12
   2afd0:	bne	2b040 <flatcc_verify_vector_field@@Base+0xc8>
   2afd4:	cmp	r2, #0
   2afd8:	beq	2b074 <flatcc_verify_vector_field@@Base+0xfc>
   2afdc:	ldr	r4, [r0]
   2afe0:	ldr	ip, [r4, r2]
   2afe4:	add	ip, r2, ip
   2afe8:	cmp	r2, ip
   2afec:	bcs	2b04c <flatcc_verify_vector_field@@Base+0xd4>
   2aff0:	ldr	r1, [r0, #4]
   2aff4:	add	r0, ip, #4
   2aff8:	cmp	r1, r0
   2affc:	bcc	2b04c <flatcc_verify_vector_field@@Base+0xd4>
   2b000:	cmp	lr, #4
   2b004:	movcc	lr, #4
   2b008:	sub	lr, lr, #1
   2b00c:	orr	lr, lr, #3
   2b010:	tst	lr, r0
   2b014:	bne	2b04c <flatcc_verify_vector_field@@Base+0xd4>
   2b018:	ldr	r2, [r4, ip]
   2b01c:	ldr	ip, [sp, #12]
   2b020:	cmp	ip, r2
   2b024:	movcc	r0, #25
   2b028:	bcc	2b040 <flatcc_verify_vector_field@@Base+0xc8>
   2b02c:	mul	r2, r2, r3
   2b030:	sub	r0, r1, r0
   2b034:	cmp	r0, r2
   2b038:	movcc	r0, #26
   2b03c:	movcs	r0, #0
   2b040:	ldr	r4, [sp]
   2b044:	add	sp, sp, #4
   2b048:	pop	{pc}		; (ldr pc, [sp], #4)
   2b04c:	ldr	r4, [sp]
   2b050:	add	sp, sp, #4
   2b054:	mov	r0, #16
   2b058:	pop	{pc}		; (ldr pc, [sp], #4)
   2b05c:	cmp	r2, #0
   2b060:	ldr	r4, [sp]
   2b064:	add	sp, sp, #4
   2b068:	moveq	r0, #0
   2b06c:	movne	r0, #4
   2b070:	pop	{pc}		; (ldr pc, [sp], #4)
   2b074:	mov	r0, r2
   2b078:	b	2b040 <flatcc_verify_vector_field@@Base+0xc8>

0002b07c <flatcc_verify_string_vector_field@@Base>:
   2b07c:	ldrh	r3, [r0, #22]
   2b080:	add	r1, r1, #2
   2b084:	lsl	r1, r1, #1
   2b088:	uxth	r1, r1
   2b08c:	cmp	r3, r1
   2b090:	bls	2b1ec <flatcc_verify_string_vector_field@@Base+0x170>
   2b094:	ldr	r3, [r0, #12]
   2b098:	ldrh	r3, [r3, r1]
   2b09c:	cmp	r3, #0
   2b0a0:	beq	2b1ec <flatcc_verify_string_vector_field@@Base+0x170>
   2b0a4:	ldrh	r2, [r0, #20]
   2b0a8:	add	r1, r3, #4
   2b0ac:	cmp	r1, r2
   2b0b0:	bhi	2b1fc <flatcc_verify_string_vector_field@@Base+0x180>
   2b0b4:	ldr	r2, [r0, #16]
   2b0b8:	add	r3, r3, r2
   2b0bc:	tst	r3, #3
   2b0c0:	bne	2b204 <flatcc_verify_string_vector_field@@Base+0x188>
   2b0c4:	cmp	r3, #0
   2b0c8:	beq	2b23c <flatcc_verify_string_vector_field@@Base+0x1c0>
   2b0cc:	ldr	r1, [r0]
   2b0d0:	ldr	r2, [r1, r3]
   2b0d4:	add	r2, r3, r2
   2b0d8:	cmp	r3, r2
   2b0dc:	bcs	2b1e4 <flatcc_verify_string_vector_field@@Base+0x168>
   2b0e0:	ldr	ip, [r0, #4]
   2b0e4:	add	r0, r2, #4
   2b0e8:	cmp	ip, r0
   2b0ec:	bcc	2b1e4 <flatcc_verify_string_vector_field@@Base+0x168>
   2b0f0:	tst	r0, #3
   2b0f4:	bne	2b1e4 <flatcc_verify_string_vector_field@@Base+0x168>
   2b0f8:	ldr	r3, [r1, r2]
   2b0fc:	strd	r4, [sp, #-16]!
   2b100:	str	r6, [sp, #8]
   2b104:	str	lr, [sp, #12]
   2b108:	cmn	r3, #-1073741823	; 0xc0000001
   2b10c:	bhi	2b20c <flatcc_verify_string_vector_field@@Base+0x190>
   2b110:	lsl	lr, r3, #2
   2b114:	sub	r4, ip, r0
   2b118:	cmp	r4, lr
   2b11c:	bcc	2b20c <flatcc_verify_string_vector_field@@Base+0x190>
   2b120:	cmp	r3, #0
   2b124:	beq	2b258 <flatcc_verify_string_vector_field@@Base+0x1dc>
   2b128:	ldr	r2, [r1, r0]
   2b12c:	add	r2, r0, r2
   2b130:	cmp	r0, r2
   2b134:	bcs	2b250 <flatcc_verify_string_vector_field@@Base+0x1d4>
   2b138:	add	r4, r2, #4
   2b13c:	cmp	ip, r4
   2b140:	bcc	2b250 <flatcc_verify_string_vector_field@@Base+0x1d4>
   2b144:	tst	r2, #3
   2b148:	bne	2b250 <flatcc_verify_string_vector_field@@Base+0x1d4>
   2b14c:	ldr	r3, [r1, r2]
   2b150:	sub	r5, ip, r4
   2b154:	add	r6, r3, #1
   2b158:	cmp	r6, r5
   2b15c:	addls	lr, r0, lr
   2b160:	bhi	2b1b8 <flatcc_verify_string_vector_field@@Base+0x13c>
   2b164:	add	r3, r1, r3
   2b168:	add	r0, r0, #4
   2b16c:	ldrb	r3, [r3, r4]
   2b170:	cmp	r3, #0
   2b174:	bne	2b244 <flatcc_verify_string_vector_field@@Base+0x1c8>
   2b178:	cmp	r0, lr
   2b17c:	beq	2b258 <flatcc_verify_string_vector_field@@Base+0x1dc>
   2b180:	ldr	r2, [r1, r0]
   2b184:	add	r2, r0, r2
   2b188:	cmp	r2, r0
   2b18c:	add	r4, r2, #4
   2b190:	bls	2b250 <flatcc_verify_string_vector_field@@Base+0x1d4>
   2b194:	cmp	ip, r4
   2b198:	bcc	2b250 <flatcc_verify_string_vector_field@@Base+0x1d4>
   2b19c:	tst	r2, #3
   2b1a0:	sub	r5, ip, r4
   2b1a4:	bne	2b250 <flatcc_verify_string_vector_field@@Base+0x1d4>
   2b1a8:	ldr	r3, [r1, r2]
   2b1ac:	add	r6, r3, #1
   2b1b0:	cmp	r5, r6
   2b1b4:	bcs	2b164 <flatcc_verify_string_vector_field@@Base+0xe8>
   2b1b8:	ldr	r3, [r1, r2]
   2b1bc:	add	r2, r3, #1
   2b1c0:	cmp	r5, r2
   2b1c4:	movcc	r0, #8
   2b1c8:	bcc	2b22c <flatcc_verify_string_vector_field@@Base+0x1b0>
   2b1cc:	add	r3, r1, r3
   2b1d0:	ldrb	r3, [r3, r4]
   2b1d4:	cmp	r3, #0
   2b1d8:	moveq	r0, #0
   2b1dc:	movne	r0, #7
   2b1e0:	b	2b22c <flatcc_verify_string_vector_field@@Base+0x1b0>
   2b1e4:	mov	r0, #16
   2b1e8:	bx	lr
   2b1ec:	cmp	r2, #0
   2b1f0:	movne	r0, #4
   2b1f4:	moveq	r0, #0
   2b1f8:	bx	lr
   2b1fc:	mov	r0, #13
   2b200:	bx	lr
   2b204:	mov	r0, #12
   2b208:	bx	lr
   2b20c:	ldr	r3, [r1, r2]
   2b210:	cmn	r3, #-1073741823	; 0xc0000001
   2b214:	movhi	r0, #25
   2b218:	bhi	2b22c <flatcc_verify_string_vector_field@@Base+0x1b0>
   2b21c:	sub	r0, ip, r0
   2b220:	cmp	r0, r3, lsl #2
   2b224:	movcs	r0, #0
   2b228:	movcc	r0, #26
   2b22c:	ldrd	r4, [sp]
   2b230:	ldr	r6, [sp, #8]
   2b234:	add	sp, sp, #12
   2b238:	pop	{pc}		; (ldr pc, [sp], #4)
   2b23c:	mov	r0, r3
   2b240:	bx	lr
   2b244:	cmp	ip, r4
   2b248:	subcs	r5, ip, r4
   2b24c:	bcs	2b1b8 <flatcc_verify_string_vector_field@@Base+0x13c>
   2b250:	mov	r0, #17
   2b254:	b	2b22c <flatcc_verify_string_vector_field@@Base+0x1b0>
   2b258:	mov	r0, r3
   2b25c:	b	2b22c <flatcc_verify_string_vector_field@@Base+0x1b0>

0002b260 <flatcc_verify_table_field@@Base>:
   2b260:	ldrh	ip, [r0, #22]
   2b264:	add	r1, r1, #2
   2b268:	lsl	r1, r1, #1
   2b26c:	uxth	r1, r1
   2b270:	cmp	ip, r1
   2b274:	bls	2b394 <flatcc_verify_table_field@@Base+0x134>
   2b278:	ldr	ip, [r0, #12]
   2b27c:	ldrh	r1, [ip, r1]
   2b280:	cmp	r1, #0
   2b284:	beq	2b394 <flatcc_verify_table_field@@Base+0x134>
   2b288:	ldrh	r2, [r0, #20]
   2b28c:	add	ip, r1, #4
   2b290:	cmp	ip, r2
   2b294:	bhi	2b3a4 <flatcc_verify_table_field@@Base+0x144>
   2b298:	ldr	r2, [r0, #16]
   2b29c:	add	r1, r1, r2
   2b2a0:	tst	r1, #3
   2b2a4:	bne	2b3ac <flatcc_verify_table_field@@Base+0x14c>
   2b2a8:	cmp	r1, #0
   2b2ac:	beq	2b3b4 <flatcc_verify_table_field@@Base+0x154>
   2b2b0:	ldr	ip, [r0]
   2b2b4:	strd	r4, [sp, #-12]!
   2b2b8:	ldr	r2, [r0, #8]
   2b2bc:	str	lr, [sp, #8]
   2b2c0:	sub	sp, sp, #28
   2b2c4:	ldr	lr, [r0, #4]
   2b2c8:	ldr	r0, [ip, r1]
   2b2cc:	sub	r2, r2, #1
   2b2d0:	cmp	r2, #0
   2b2d4:	moveq	r0, #3
   2b2d8:	str	r2, [sp, #8]
   2b2dc:	beq	2b384 <flatcc_verify_table_field@@Base+0x124>
   2b2e0:	add	r2, r1, r0
   2b2e4:	cmp	r1, r2
   2b2e8:	bcs	2b380 <flatcc_verify_table_field@@Base+0x120>
   2b2ec:	add	r1, r2, #4
   2b2f0:	cmp	lr, r1
   2b2f4:	bcc	2b380 <flatcc_verify_table_field@@Base+0x120>
   2b2f8:	tst	r2, #3
   2b2fc:	bne	2b380 <flatcc_verify_table_field@@Base+0x120>
   2b300:	str	r2, [sp, #16]
   2b304:	ldr	r1, [ip, r2]
   2b308:	subs	r1, r2, r1
   2b30c:	bmi	2b3bc <flatcc_verify_table_field@@Base+0x15c>
   2b310:	tst	r1, #1
   2b314:	bne	2b3bc <flatcc_verify_table_field@@Base+0x15c>
   2b318:	add	r4, r1, #2
   2b31c:	cmp	lr, r4
   2b320:	movcc	r0, #27
   2b324:	bcc	2b384 <flatcc_verify_table_field@@Base+0x124>
   2b328:	ldrh	r0, [ip, r1]
   2b32c:	add	r5, ip, r1
   2b330:	add	r1, r0, r1
   2b334:	strh	r0, [sp, #22]
   2b338:	cmp	lr, r1
   2b33c:	bcc	2b3c4 <flatcc_verify_table_field@@Base+0x164>
   2b340:	tst	r0, #1
   2b344:	bne	2b3c4 <flatcc_verify_table_field@@Base+0x164>
   2b348:	cmp	r0, #3
   2b34c:	movls	r0, #28
   2b350:	bls	2b384 <flatcc_verify_table_field@@Base+0x124>
   2b354:	ldrh	r1, [ip, r4]
   2b358:	sub	r2, lr, r2
   2b35c:	cmp	r2, r1
   2b360:	strh	r1, [sp, #20]
   2b364:	movcc	r0, #20
   2b368:	bcc	2b384 <flatcc_verify_table_field@@Base+0x124>
   2b36c:	mov	r0, sp
   2b370:	stm	sp, {ip, lr}
   2b374:	str	r5, [sp, #12]
   2b378:	blx	r3
   2b37c:	b	2b384 <flatcc_verify_table_field@@Base+0x124>
   2b380:	mov	r0, #15
   2b384:	add	sp, sp, #28
   2b388:	ldrd	r4, [sp]
   2b38c:	add	sp, sp, #8
   2b390:	pop	{pc}		; (ldr pc, [sp], #4)
   2b394:	cmp	r2, #0
   2b398:	moveq	r0, #0
   2b39c:	movne	r0, #4
   2b3a0:	bx	lr
   2b3a4:	mov	r0, #13
   2b3a8:	bx	lr
   2b3ac:	mov	r0, #12
   2b3b0:	bx	lr
   2b3b4:	mov	r0, r1
   2b3b8:	bx	lr
   2b3bc:	mov	r0, #29
   2b3c0:	b	2b384 <flatcc_verify_table_field@@Base+0x124>
   2b3c4:	mov	r0, #30
   2b3c8:	b	2b384 <flatcc_verify_table_field@@Base+0x124>

0002b3cc <flatcc_verify_table_vector_field@@Base>:
   2b3cc:	ldrh	ip, [r0, #22]
   2b3d0:	add	r1, r1, #2
   2b3d4:	lsl	r1, r1, #1
   2b3d8:	uxth	r1, r1
   2b3dc:	cmp	ip, r1
   2b3e0:	bls	2b658 <flatcc_verify_table_vector_field@@Base+0x28c>
   2b3e4:	ldr	ip, [r0, #12]
   2b3e8:	ldrh	r1, [ip, r1]
   2b3ec:	cmp	r1, #0
   2b3f0:	beq	2b658 <flatcc_verify_table_vector_field@@Base+0x28c>
   2b3f4:	ldrh	r2, [r0, #20]
   2b3f8:	add	ip, r1, #4
   2b3fc:	cmp	ip, r2
   2b400:	bhi	2b668 <flatcc_verify_table_vector_field@@Base+0x29c>
   2b404:	ldr	r2, [r0, #16]
   2b408:	add	r1, r1, r2
   2b40c:	tst	r1, #3
   2b410:	bne	2b680 <flatcc_verify_table_vector_field@@Base+0x2b4>
   2b414:	cmp	r1, #0
   2b418:	beq	2b660 <flatcc_verify_table_vector_field@@Base+0x294>
   2b41c:	ldr	ip, [r0, #8]
   2b420:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2b424:	strd	r6, [sp, #8]
   2b428:	ldr	r6, [r0]
   2b42c:	strd	r8, [sp, #16]
   2b430:	cmp	ip, #0
   2b434:	strd	sl, [sp, #24]
   2b438:	str	lr, [sp, #32]
   2b43c:	sub	sp, sp, #36	; 0x24
   2b440:	ldr	r2, [r6, r1]
   2b444:	ble	2b678 <flatcc_verify_table_vector_field@@Base+0x2ac>
   2b448:	add	r2, r1, r2
   2b44c:	cmp	r1, r2
   2b450:	bcs	2b638 <flatcc_verify_table_vector_field@@Base+0x26c>
   2b454:	ldr	r8, [r0, #4]
   2b458:	add	r5, r2, #4
   2b45c:	cmp	r8, r5
   2b460:	bcc	2b638 <flatcc_verify_table_vector_field@@Base+0x26c>
   2b464:	tst	r5, #3
   2b468:	bne	2b638 <flatcc_verify_table_vector_field@@Base+0x26c>
   2b46c:	ldr	r1, [r6, r2]
   2b470:	cmn	r1, #-1073741823	; 0xc0000001
   2b474:	bhi	2b688 <flatcc_verify_table_vector_field@@Base+0x2bc>
   2b478:	lsl	r9, r1, #2
   2b47c:	sub	r0, r8, r5
   2b480:	cmp	r0, r9
   2b484:	bcc	2b688 <flatcc_verify_table_vector_field@@Base+0x2bc>
   2b488:	cmp	r1, #0
   2b48c:	beq	2b6a8 <flatcc_verify_table_vector_field@@Base+0x2dc>
   2b490:	sub	r7, ip, #2
   2b494:	add	fp, r6, r5
   2b498:	ldr	r1, [r6, r5]
   2b49c:	cmp	r7, #0
   2b4a0:	str	r7, [sp, #16]
   2b4a4:	beq	2b678 <flatcc_verify_table_vector_field@@Base+0x2ac>
   2b4a8:	add	r1, r5, r1
   2b4ac:	mov	sl, r3
   2b4b0:	cmp	r5, r1
   2b4b4:	bcs	2b6c8 <flatcc_verify_table_vector_field@@Base+0x2fc>
   2b4b8:	add	r3, r1, #4
   2b4bc:	cmp	r8, r3
   2b4c0:	bcc	2b6c8 <flatcc_verify_table_vector_field@@Base+0x2fc>
   2b4c4:	tst	r1, #3
   2b4c8:	bne	2b6c8 <flatcc_verify_table_vector_field@@Base+0x2fc>
   2b4cc:	movw	r3, #65532	; 0xfffc
   2b4d0:	movt	r3, #65535	; 0xffff
   2b4d4:	sub	r3, r3, r2
   2b4d8:	add	r2, r2, #8
   2b4dc:	add	r9, r5, r9
   2b4e0:	add	fp, fp, r3
   2b4e4:	add	r4, r6, r2
   2b4e8:	str	r1, [sp, #24]
   2b4ec:	add	r3, fp, r5
   2b4f0:	ldr	r2, [r6, r1]
   2b4f4:	subs	r2, r1, r2
   2b4f8:	bmi	2b58c <flatcc_verify_table_vector_field@@Base+0x1c0>
   2b4fc:	tst	r2, #1
   2b500:	bne	2b58c <flatcc_verify_table_vector_field@@Base+0x1c0>
   2b504:	add	lr, r2, #2
   2b508:	cmp	r8, lr
   2b50c:	bcc	2b58c <flatcc_verify_table_vector_field@@Base+0x1c0>
   2b510:	ldrh	r0, [r6, r2]
   2b514:	add	ip, r6, r2
   2b518:	add	r2, r0, r2
   2b51c:	strh	r0, [sp, #30]
   2b520:	cmp	r8, r2
   2b524:	bcc	2b58c <flatcc_verify_table_vector_field@@Base+0x1c0>
   2b528:	tst	r0, #1
   2b52c:	bne	2b58c <flatcc_verify_table_vector_field@@Base+0x1c0>
   2b530:	cmp	r0, #3
   2b534:	bls	2b58c <flatcc_verify_table_vector_field@@Base+0x1c0>
   2b538:	ldrh	r2, [r6, lr]
   2b53c:	sub	r1, r8, r1
   2b540:	cmp	r1, r2
   2b544:	strh	r2, [sp, #28]
   2b548:	bcc	2b58c <flatcc_verify_table_vector_field@@Base+0x1c0>
   2b54c:	add	r0, sp, #8
   2b550:	stmib	sp, {r3, r6, r8}
   2b554:	str	ip, [sp, #20]
   2b558:	blx	sl
   2b55c:	cmp	r0, #0
   2b560:	ldr	r3, [sp, #4]
   2b564:	bne	2b58c <flatcc_verify_table_vector_field@@Base+0x1c0>
   2b568:	add	r5, r5, #4
   2b56c:	cmp	r5, r9
   2b570:	beq	2b6a8 <flatcc_verify_table_vector_field@@Base+0x2dc>
   2b574:	mov	r3, r4
   2b578:	ldr	r1, [r4], #4
   2b57c:	str	r7, [sp, #16]
   2b580:	add	r1, r1, r5
   2b584:	cmp	r5, r1
   2b588:	bcc	2b6b0 <flatcc_verify_table_vector_field@@Base+0x2e4>
   2b58c:	ldr	r3, [r3]
   2b590:	str	r7, [sp, #16]
   2b594:	add	r3, r5, r3
   2b598:	cmp	r3, r5
   2b59c:	bls	2b6d0 <flatcc_verify_table_vector_field@@Base+0x304>
   2b5a0:	add	r2, r3, #4
   2b5a4:	cmp	r8, r2
   2b5a8:	bcc	2b6d0 <flatcc_verify_table_vector_field@@Base+0x304>
   2b5ac:	tst	r3, #3
   2b5b0:	bne	2b6d0 <flatcc_verify_table_vector_field@@Base+0x304>
   2b5b4:	str	r3, [sp, #24]
   2b5b8:	ldr	r2, [r6, r3]
   2b5bc:	subs	r2, r3, r2
   2b5c0:	bmi	2b6d8 <flatcc_verify_table_vector_field@@Base+0x30c>
   2b5c4:	tst	r2, #1
   2b5c8:	bne	2b6d8 <flatcc_verify_table_vector_field@@Base+0x30c>
   2b5cc:	add	r0, r2, #2
   2b5d0:	cmp	r8, r0
   2b5d4:	movcc	r0, #27
   2b5d8:	bcc	2b63c <flatcc_verify_table_vector_field@@Base+0x270>
   2b5dc:	ldrh	r1, [r6, r2]
   2b5e0:	add	ip, r6, r2
   2b5e4:	add	r2, r1, r2
   2b5e8:	strh	r1, [sp, #30]
   2b5ec:	cmp	r8, r2
   2b5f0:	bcc	2b6e0 <flatcc_verify_table_vector_field@@Base+0x314>
   2b5f4:	tst	r1, #1
   2b5f8:	bne	2b6e0 <flatcc_verify_table_vector_field@@Base+0x314>
   2b5fc:	cmp	r1, #3
   2b600:	movls	r0, #28
   2b604:	bls	2b63c <flatcc_verify_table_vector_field@@Base+0x270>
   2b608:	ldrh	r2, [r6, r0]
   2b60c:	sub	r3, r8, r3
   2b610:	cmp	r3, r2
   2b614:	strh	r2, [sp, #28]
   2b618:	movcc	r0, #20
   2b61c:	bcc	2b63c <flatcc_verify_table_vector_field@@Base+0x270>
   2b620:	add	r0, sp, #8
   2b624:	str	r6, [sp, #8]
   2b628:	str	r8, [sp, #12]
   2b62c:	str	ip, [sp, #20]
   2b630:	blx	sl
   2b634:	b	2b63c <flatcc_verify_table_vector_field@@Base+0x270>
   2b638:	mov	r0, #16
   2b63c:	add	sp, sp, #36	; 0x24
   2b640:	ldrd	r4, [sp]
   2b644:	ldrd	r6, [sp, #8]
   2b648:	ldrd	r8, [sp, #16]
   2b64c:	ldrd	sl, [sp, #24]
   2b650:	add	sp, sp, #32
   2b654:	pop	{pc}		; (ldr pc, [sp], #4)
   2b658:	cmp	r2, #0
   2b65c:	bne	2b670 <flatcc_verify_table_vector_field@@Base+0x2a4>
   2b660:	mov	r0, #0
   2b664:	bx	lr
   2b668:	mov	r0, #13
   2b66c:	bx	lr
   2b670:	mov	r0, #4
   2b674:	bx	lr
   2b678:	mov	r0, #3
   2b67c:	b	2b63c <flatcc_verify_table_vector_field@@Base+0x270>
   2b680:	mov	r0, #12
   2b684:	bx	lr
   2b688:	ldr	r3, [r6, r2]
   2b68c:	cmn	r3, #-1073741823	; 0xc0000001
   2b690:	movhi	r0, #25
   2b694:	bhi	2b63c <flatcc_verify_table_vector_field@@Base+0x270>
   2b698:	sub	r5, r8, r5
   2b69c:	cmp	r5, r3, lsl #2
   2b6a0:	movcc	r0, #26
   2b6a4:	bcc	2b63c <flatcc_verify_table_vector_field@@Base+0x270>
   2b6a8:	mov	r0, #0
   2b6ac:	b	2b63c <flatcc_verify_table_vector_field@@Base+0x270>
   2b6b0:	add	r2, r1, #4
   2b6b4:	cmp	r8, r2
   2b6b8:	bcc	2b58c <flatcc_verify_table_vector_field@@Base+0x1c0>
   2b6bc:	tst	r1, #3
   2b6c0:	beq	2b4e8 <flatcc_verify_table_vector_field@@Base+0x11c>
   2b6c4:	b	2b58c <flatcc_verify_table_vector_field@@Base+0x1c0>
   2b6c8:	mov	r3, fp
   2b6cc:	b	2b58c <flatcc_verify_table_vector_field@@Base+0x1c0>
   2b6d0:	mov	r0, #15
   2b6d4:	b	2b63c <flatcc_verify_table_vector_field@@Base+0x270>
   2b6d8:	mov	r0, #29
   2b6dc:	b	2b63c <flatcc_verify_table_vector_field@@Base+0x270>
   2b6e0:	mov	r0, #30
   2b6e4:	b	2b63c <flatcc_verify_table_vector_field@@Base+0x270>

0002b6e8 <flatcc_verify_union_table@@Base>:
   2b6e8:	strd	r4, [sp, #-12]!
   2b6ec:	ldr	r3, [r0, #8]
   2b6f0:	ldr	ip, [r0, #4]
   2b6f4:	ldr	r2, [r0, #16]
   2b6f8:	sub	r3, r3, #1
   2b6fc:	str	lr, [sp, #8]
   2b700:	sub	sp, sp, #28
   2b704:	cmp	r3, #0
   2b708:	ldr	lr, [r0]
   2b70c:	str	r3, [sp, #8]
   2b710:	ldr	r3, [r0, #20]
   2b714:	moveq	r0, #3
   2b718:	beq	2b72c <flatcc_verify_union_table@@Base+0x44>
   2b71c:	add	r3, r2, r3
   2b720:	cmp	r2, r3
   2b724:	bcc	2b73c <flatcc_verify_union_table@@Base+0x54>
   2b728:	mov	r0, #15
   2b72c:	add	sp, sp, #28
   2b730:	ldrd	r4, [sp]
   2b734:	add	sp, sp, #8
   2b738:	pop	{pc}		; (ldr pc, [sp], #4)
   2b73c:	add	r2, r3, #4
   2b740:	cmp	ip, r2
   2b744:	bcc	2b728 <flatcc_verify_union_table@@Base+0x40>
   2b748:	tst	r3, #3
   2b74c:	bne	2b728 <flatcc_verify_union_table@@Base+0x40>
   2b750:	str	r3, [sp, #16]
   2b754:	ldr	r2, [lr, r3]
   2b758:	subs	r2, r3, r2
   2b75c:	bmi	2b7dc <flatcc_verify_union_table@@Base+0xf4>
   2b760:	tst	r2, #1
   2b764:	bne	2b7dc <flatcc_verify_union_table@@Base+0xf4>
   2b768:	add	r4, r2, #2
   2b76c:	cmp	ip, r4
   2b770:	movcc	r0, #27
   2b774:	bcc	2b72c <flatcc_verify_union_table@@Base+0x44>
   2b778:	ldrh	r0, [lr, r2]
   2b77c:	add	r5, lr, r2
   2b780:	add	r2, r0, r2
   2b784:	strh	r0, [sp, #22]
   2b788:	cmp	ip, r2
   2b78c:	bcc	2b7d4 <flatcc_verify_union_table@@Base+0xec>
   2b790:	tst	r0, #1
   2b794:	bne	2b7d4 <flatcc_verify_union_table@@Base+0xec>
   2b798:	cmp	r0, #3
   2b79c:	movls	r0, #28
   2b7a0:	bls	2b72c <flatcc_verify_union_table@@Base+0x44>
   2b7a4:	ldrh	r2, [lr, r4]
   2b7a8:	sub	r3, ip, r3
   2b7ac:	cmp	r3, r2
   2b7b0:	strh	r2, [sp, #20]
   2b7b4:	movcc	r0, #20
   2b7b8:	bcc	2b72c <flatcc_verify_union_table@@Base+0x44>
   2b7bc:	mov	r0, sp
   2b7c0:	str	lr, [sp]
   2b7c4:	str	ip, [sp, #4]
   2b7c8:	str	r5, [sp, #12]
   2b7cc:	blx	r1
   2b7d0:	b	2b72c <flatcc_verify_union_table@@Base+0x44>
   2b7d4:	mov	r0, #30
   2b7d8:	b	2b72c <flatcc_verify_union_table@@Base+0x44>
   2b7dc:	mov	r0, #29
   2b7e0:	b	2b72c <flatcc_verify_union_table@@Base+0x44>

0002b7e4 <flatcc_verify_union_struct@@Base>:
   2b7e4:	push	{lr}		; (str lr, [sp, #-4]!)
   2b7e8:	ldr	ip, [r0, #20]
   2b7ec:	ldr	lr, [r0, #4]
   2b7f0:	ldr	r3, [r0, #16]
   2b7f4:	cmp	ip, #0
   2b7f8:	beq	2b82c <flatcc_verify_union_struct@@Base+0x48>
   2b7fc:	add	r3, r3, ip
   2b800:	cmp	lr, r3
   2b804:	bcc	2b82c <flatcc_verify_union_struct@@Base+0x48>
   2b808:	adds	r1, r1, r3
   2b80c:	bcs	2b83c <flatcc_verify_union_struct@@Base+0x58>
   2b810:	cmp	lr, r1
   2b814:	bcc	2b834 <flatcc_verify_union_struct@@Base+0x50>
   2b818:	sub	r2, r2, #1
   2b81c:	tst	r2, r3
   2b820:	moveq	r0, #0
   2b824:	movne	r0, #11
   2b828:	pop	{pc}		; (ldr pc, [sp], #4)
   2b82c:	mov	r0, #18
   2b830:	pop	{pc}		; (ldr pc, [sp], #4)
   2b834:	mov	r0, #9
   2b838:	pop	{pc}		; (ldr pc, [sp], #4)
   2b83c:	mov	r0, #10
   2b840:	b	2b828 <flatcc_verify_union_struct@@Base+0x44>

0002b844 <flatcc_verify_union_string@@Base>:
   2b844:	ldrd	r2, [r0, #16]
   2b848:	add	r3, r2, r3
   2b84c:	cmp	r2, r3
   2b850:	bcs	2b89c <flatcc_verify_union_string@@Base+0x58>
   2b854:	ldr	r2, [r0, #4]
   2b858:	add	r1, r3, #4
   2b85c:	cmp	r2, r1
   2b860:	bcc	2b89c <flatcc_verify_union_string@@Base+0x58>
   2b864:	tst	r3, #3
   2b868:	bne	2b89c <flatcc_verify_union_string@@Base+0x58>
   2b86c:	ldr	r0, [r0]
   2b870:	sub	r2, r2, r1
   2b874:	ldr	r3, [r0, r3]
   2b878:	add	ip, r3, #1
   2b87c:	cmp	r2, ip
   2b880:	bcc	2b8a4 <flatcc_verify_union_string@@Base+0x60>
   2b884:	add	r1, r0, r1
   2b888:	ldrb	r3, [r1, r3]
   2b88c:	cmp	r3, #0
   2b890:	moveq	r0, #0
   2b894:	movne	r0, #7
   2b898:	bx	lr
   2b89c:	mov	r0, #17
   2b8a0:	bx	lr
   2b8a4:	mov	r0, #8
   2b8a8:	bx	lr

0002b8ac <flatcc_verify_buffer_header@@Base>:
   2b8ac:	tst	r0, #3
   2b8b0:	bne	2b91c <flatcc_verify_buffer_header@@Base+0x70>
   2b8b4:	cmn	r1, #9
   2b8b8:	bhi	2b924 <flatcc_verify_buffer_header@@Base+0x78>
   2b8bc:	cmp	r1, #7
   2b8c0:	bls	2b914 <flatcc_verify_buffer_header@@Base+0x68>
   2b8c4:	cmp	r2, #0
   2b8c8:	beq	2b92c <flatcc_verify_buffer_header@@Base+0x80>
   2b8cc:	mov	r1, r2
   2b8d0:	mov	r2, #4
   2b8d4:	str	r4, [sp, #-8]!
   2b8d8:	str	lr, [sp, #4]
   2b8dc:	sub	sp, sp, #8
   2b8e0:	mov	r4, r0
   2b8e4:	add	r0, sp, r2
   2b8e8:	bl	145a8 <strncpy@plt>
   2b8ec:	ldr	r2, [r4, #4]
   2b8f0:	ldr	r3, [sp, #4]
   2b8f4:	cmp	r3, #0
   2b8f8:	cmpne	r2, r3
   2b8fc:	movne	r0, #2
   2b900:	moveq	r0, #0
   2b904:	add	sp, sp, #8
   2b908:	ldr	r4, [sp]
   2b90c:	add	sp, sp, #4
   2b910:	pop	{pc}		; (ldr pc, [sp], #4)
   2b914:	mov	r0, #1
   2b918:	bx	lr
   2b91c:	mov	r0, #5
   2b920:	bx	lr
   2b924:	mov	r0, #6
   2b928:	bx	lr
   2b92c:	mov	r0, #0
   2b930:	bx	lr

0002b934 <flatcc_verify_typed_buffer_header@@Base>:
   2b934:	tst	r0, #3
   2b938:	bne	2b970 <flatcc_verify_typed_buffer_header@@Base+0x3c>
   2b93c:	cmn	r1, #9
   2b940:	bhi	2b980 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   2b944:	cmp	r1, #7
   2b948:	bls	2b968 <flatcc_verify_typed_buffer_header@@Base+0x34>
   2b94c:	cmp	r2, #0
   2b950:	beq	2b978 <flatcc_verify_typed_buffer_header@@Base+0x44>
   2b954:	ldr	r0, [r0, #4]
   2b958:	cmp	r2, r0
   2b95c:	movne	r0, #2
   2b960:	moveq	r0, #0
   2b964:	bx	lr
   2b968:	mov	r0, #1
   2b96c:	bx	lr
   2b970:	mov	r0, #5
   2b974:	bx	lr
   2b978:	mov	r0, r2
   2b97c:	bx	lr
   2b980:	mov	r0, #6
   2b984:	bx	lr

0002b988 <flatcc_verify_struct_as_root@@Base>:
   2b988:	tst	r0, #3
   2b98c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2b990:	strd	r6, [sp, #8]
   2b994:	movne	r0, #5
   2b998:	strd	r8, [sp, #16]
   2b99c:	str	lr, [sp, #24]
   2b9a0:	sub	sp, sp, #12
   2b9a4:	ldrh	r5, [sp, #40]	; 0x28
   2b9a8:	bne	2ba44 <flatcc_verify_struct_as_root@@Base+0xbc>
   2b9ac:	cmn	r1, #9
   2b9b0:	movhi	r0, #6
   2b9b4:	bhi	2ba44 <flatcc_verify_struct_as_root@@Base+0xbc>
   2b9b8:	cmp	r1, #7
   2b9bc:	movls	r0, #1
   2b9c0:	bls	2ba44 <flatcc_verify_struct_as_root@@Base+0xbc>
   2b9c4:	cmp	r2, #0
   2b9c8:	mov	r7, r3
   2b9cc:	mov	r8, r2
   2b9d0:	mov	r6, r1
   2b9d4:	mov	r4, r0
   2b9d8:	beq	2ba00 <flatcc_verify_struct_as_root@@Base+0x78>
   2b9dc:	mov	r2, #4
   2b9e0:	mov	r1, r8
   2b9e4:	add	r0, sp, r2
   2b9e8:	bl	145a8 <strncpy@plt>
   2b9ec:	ldr	r9, [r4, #4]
   2b9f0:	ldr	r3, [sp, #4]
   2b9f4:	cmp	r3, r9
   2b9f8:	cmpne	r3, #0
   2b9fc:	bne	2ba6c <flatcc_verify_struct_as_root@@Base+0xe4>
   2ba00:	ldr	r2, [r4]
   2ba04:	cmp	r6, r2
   2ba08:	movcs	r0, #0
   2ba0c:	movcc	r0, #1
   2ba10:	cmp	r2, #0
   2ba14:	moveq	r0, #1
   2ba18:	cmp	r0, #0
   2ba1c:	bne	2ba5c <flatcc_verify_struct_as_root@@Base+0xd4>
   2ba20:	adds	r3, r7, r2
   2ba24:	bcs	2ba94 <flatcc_verify_struct_as_root@@Base+0x10c>
   2ba28:	cmp	r6, r3
   2ba2c:	bcc	2ba64 <flatcc_verify_struct_as_root@@Base+0xdc>
   2ba30:	sub	r5, r5, #1
   2ba34:	tst	r5, r2
   2ba38:	movne	r0, #11
   2ba3c:	bne	2ba44 <flatcc_verify_struct_as_root@@Base+0xbc>
   2ba40:	mov	r0, #0
   2ba44:	add	sp, sp, #12
   2ba48:	ldrd	r4, [sp]
   2ba4c:	ldrd	r6, [sp, #8]
   2ba50:	ldrd	r8, [sp, #16]
   2ba54:	add	sp, sp, #24
   2ba58:	pop	{pc}		; (ldr pc, [sp], #4)
   2ba5c:	mov	r0, #18
   2ba60:	b	2ba44 <flatcc_verify_struct_as_root@@Base+0xbc>
   2ba64:	mov	r0, #9
   2ba68:	b	2ba44 <flatcc_verify_struct_as_root@@Base+0xbc>
   2ba6c:	mov	r1, r8
   2ba70:	add	r0, sp, #4
   2ba74:	mov	r2, #4
   2ba78:	bl	145a8 <strncpy@plt>
   2ba7c:	ldr	r3, [sp, #4]
   2ba80:	cmp	r9, r3
   2ba84:	cmpne	r3, #0
   2ba88:	beq	2ba40 <flatcc_verify_struct_as_root@@Base+0xb8>
   2ba8c:	mov	r0, #2
   2ba90:	b	2ba44 <flatcc_verify_struct_as_root@@Base+0xbc>
   2ba94:	mov	r0, #10
   2ba98:	b	2ba44 <flatcc_verify_struct_as_root@@Base+0xbc>

0002ba9c <flatcc_verify_struct_as_typed_root@@Base>:
   2ba9c:	tst	r0, #3
   2baa0:	push	{lr}		; (str lr, [sp, #-4]!)
   2baa4:	movne	r0, #5
   2baa8:	ldrh	ip, [sp, #4]
   2baac:	bne	2bb24 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   2bab0:	cmn	r1, #9
   2bab4:	movhi	r0, #6
   2bab8:	bhi	2bb24 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   2babc:	cmp	r1, #7
   2bac0:	movls	r0, #1
   2bac4:	bls	2bb24 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   2bac8:	cmp	r2, #0
   2bacc:	beq	2bae0 <flatcc_verify_struct_as_typed_root@@Base+0x44>
   2bad0:	ldr	lr, [r0, #4]
   2bad4:	cmp	r2, lr
   2bad8:	movne	r0, #2
   2badc:	bne	2bb24 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   2bae0:	ldr	r2, [r0]
   2bae4:	cmp	r1, r2
   2bae8:	movcs	r0, #0
   2baec:	movcc	r0, #1
   2baf0:	cmp	r2, #0
   2baf4:	moveq	r0, #1
   2baf8:	cmp	r0, #0
   2bafc:	movne	r0, #18
   2bb00:	bne	2bb24 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   2bb04:	adds	r3, r3, r2
   2bb08:	bcs	2bb30 <flatcc_verify_struct_as_typed_root@@Base+0x94>
   2bb0c:	cmp	r1, r3
   2bb10:	bcc	2bb28 <flatcc_verify_struct_as_typed_root@@Base+0x8c>
   2bb14:	sub	ip, ip, #1
   2bb18:	tst	ip, r2
   2bb1c:	moveq	r0, #0
   2bb20:	movne	r0, #11
   2bb24:	pop	{pc}		; (ldr pc, [sp], #4)
   2bb28:	mov	r0, #9
   2bb2c:	b	2bb24 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   2bb30:	mov	r0, #10
   2bb34:	b	2bb24 <flatcc_verify_struct_as_typed_root@@Base+0x88>

0002bb38 <flatcc_verify_table_as_root@@Base>:
   2bb38:	tst	r0, #3
   2bb3c:	bne	2bc6c <flatcc_verify_table_as_root@@Base+0x134>
   2bb40:	cmn	r1, #9
   2bb44:	bhi	2bc9c <flatcc_verify_table_as_root@@Base+0x164>
   2bb48:	cmp	r1, #7
   2bb4c:	bls	2bc48 <flatcc_verify_table_as_root@@Base+0x110>
   2bb50:	cmp	r2, #0
   2bb54:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2bb58:	mov	r4, r2
   2bb5c:	mov	r5, r0
   2bb60:	strd	r6, [sp, #8]
   2bb64:	mov	r7, r3
   2bb68:	mov	r6, r1
   2bb6c:	str	r8, [sp, #16]
   2bb70:	str	lr, [sp, #20]
   2bb74:	sub	sp, sp, #24
   2bb78:	beq	2bba0 <flatcc_verify_table_as_root@@Base+0x68>
   2bb7c:	mov	r2, #4
   2bb80:	mov	r0, sp
   2bb84:	mov	r1, r4
   2bb88:	bl	145a8 <strncpy@plt>
   2bb8c:	ldr	r3, [sp]
   2bb90:	ldr	r8, [r5, #4]
   2bb94:	cmp	r3, r8
   2bb98:	cmpne	r3, #0
   2bb9c:	bne	2bc74 <flatcc_verify_table_as_root@@Base+0x13c>
   2bba0:	ldr	r2, [r5]
   2bba4:	mov	r3, #99	; 0x63
   2bba8:	str	r3, [sp, #8]
   2bbac:	cmp	r2, #0
   2bbb0:	beq	2bc50 <flatcc_verify_table_as_root@@Base+0x118>
   2bbb4:	add	r3, r2, #4
   2bbb8:	cmp	r6, r3
   2bbbc:	bcc	2bc50 <flatcc_verify_table_as_root@@Base+0x118>
   2bbc0:	tst	r2, #3
   2bbc4:	bne	2bc50 <flatcc_verify_table_as_root@@Base+0x118>
   2bbc8:	ldr	r3, [r5, r2]
   2bbcc:	str	r2, [sp, #16]
   2bbd0:	subs	r3, r2, r3
   2bbd4:	bmi	2bca4 <flatcc_verify_table_as_root@@Base+0x16c>
   2bbd8:	tst	r3, #1
   2bbdc:	bne	2bca4 <flatcc_verify_table_as_root@@Base+0x16c>
   2bbe0:	add	r0, r3, #2
   2bbe4:	cmp	r6, r0
   2bbe8:	movcc	r0, #27
   2bbec:	bcc	2bc54 <flatcc_verify_table_as_root@@Base+0x11c>
   2bbf0:	ldrh	r1, [r5, r3]
   2bbf4:	add	ip, r5, r3
   2bbf8:	add	r3, r1, r3
   2bbfc:	strh	r1, [sp, #22]
   2bc00:	cmp	r6, r3
   2bc04:	bcc	2bcac <flatcc_verify_table_as_root@@Base+0x174>
   2bc08:	tst	r1, #1
   2bc0c:	bne	2bcac <flatcc_verify_table_as_root@@Base+0x174>
   2bc10:	cmp	r1, #3
   2bc14:	movls	r0, #28
   2bc18:	bls	2bc54 <flatcc_verify_table_as_root@@Base+0x11c>
   2bc1c:	ldrh	r3, [r5, r0]
   2bc20:	sub	r2, r6, r2
   2bc24:	cmp	r2, r3
   2bc28:	strh	r3, [sp, #20]
   2bc2c:	movcc	r0, #20
   2bc30:	bcc	2bc54 <flatcc_verify_table_as_root@@Base+0x11c>
   2bc34:	mov	r0, sp
   2bc38:	stm	sp, {r5, r6}
   2bc3c:	str	ip, [sp, #12]
   2bc40:	blx	r7
   2bc44:	b	2bc54 <flatcc_verify_table_as_root@@Base+0x11c>
   2bc48:	mov	r0, #1
   2bc4c:	bx	lr
   2bc50:	mov	r0, #15
   2bc54:	add	sp, sp, #24
   2bc58:	ldrd	r4, [sp]
   2bc5c:	ldrd	r6, [sp, #8]
   2bc60:	ldr	r8, [sp, #16]
   2bc64:	add	sp, sp, #20
   2bc68:	pop	{pc}		; (ldr pc, [sp], #4)
   2bc6c:	mov	r0, #5
   2bc70:	bx	lr
   2bc74:	mov	r1, r4
   2bc78:	mov	r0, sp
   2bc7c:	mov	r2, #4
   2bc80:	bl	145a8 <strncpy@plt>
   2bc84:	ldr	r3, [sp]
   2bc88:	cmp	r8, r3
   2bc8c:	cmpne	r3, #0
   2bc90:	moveq	r0, #0
   2bc94:	movne	r0, #2
   2bc98:	b	2bc54 <flatcc_verify_table_as_root@@Base+0x11c>
   2bc9c:	mov	r0, #6
   2bca0:	bx	lr
   2bca4:	mov	r0, #29
   2bca8:	b	2bc54 <flatcc_verify_table_as_root@@Base+0x11c>
   2bcac:	mov	r0, #30
   2bcb0:	b	2bc54 <flatcc_verify_table_as_root@@Base+0x11c>

0002bcb4 <flatcc_verify_table_as_typed_root@@Base>:
   2bcb4:	tst	r0, #3
   2bcb8:	bne	2bda4 <flatcc_verify_table_as_typed_root@@Base+0xf0>
   2bcbc:	cmn	r1, #9
   2bcc0:	bhi	2bdc0 <flatcc_verify_table_as_typed_root@@Base+0x10c>
   2bcc4:	cmp	r1, #7
   2bcc8:	bls	2bd9c <flatcc_verify_table_as_typed_root@@Base+0xe8>
   2bccc:	cmp	r2, #0
   2bcd0:	beq	2bce0 <flatcc_verify_table_as_typed_root@@Base+0x2c>
   2bcd4:	ldr	ip, [r0, #4]
   2bcd8:	cmp	r2, ip
   2bcdc:	bne	2bdc8 <flatcc_verify_table_as_typed_root@@Base+0x114>
   2bce0:	ldr	r2, [r0]
   2bce4:	mov	ip, #99	; 0x63
   2bce8:	strd	r4, [sp, #-12]!
   2bcec:	str	lr, [sp, #8]
   2bcf0:	sub	sp, sp, #28
   2bcf4:	str	ip, [sp, #8]
   2bcf8:	cmp	r2, #0
   2bcfc:	beq	2bdac <flatcc_verify_table_as_typed_root@@Base+0xf8>
   2bd00:	add	ip, r2, #4
   2bd04:	cmp	r1, ip
   2bd08:	bcc	2bdac <flatcc_verify_table_as_typed_root@@Base+0xf8>
   2bd0c:	tst	r2, #3
   2bd10:	bne	2bdac <flatcc_verify_table_as_typed_root@@Base+0xf8>
   2bd14:	ldr	ip, [r0, r2]
   2bd18:	str	r2, [sp, #16]
   2bd1c:	subs	ip, r2, ip
   2bd20:	bmi	2bdd0 <flatcc_verify_table_as_typed_root@@Base+0x11c>
   2bd24:	tst	ip, #1
   2bd28:	bne	2bdd0 <flatcc_verify_table_as_typed_root@@Base+0x11c>
   2bd2c:	add	r4, ip, #2
   2bd30:	cmp	r1, r4
   2bd34:	movcc	r0, #27
   2bd38:	bcc	2bdb0 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   2bd3c:	ldrh	lr, [r0, ip]
   2bd40:	add	r5, r0, ip
   2bd44:	add	ip, lr, ip
   2bd48:	strh	lr, [sp, #22]
   2bd4c:	cmp	r1, ip
   2bd50:	bcc	2bdd8 <flatcc_verify_table_as_typed_root@@Base+0x124>
   2bd54:	tst	lr, #1
   2bd58:	bne	2bdd8 <flatcc_verify_table_as_typed_root@@Base+0x124>
   2bd5c:	cmp	lr, #3
   2bd60:	movls	r0, #28
   2bd64:	bls	2bdb0 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   2bd68:	ldrh	ip, [r0, r4]
   2bd6c:	sub	r2, r1, r2
   2bd70:	cmp	r2, ip
   2bd74:	strh	ip, [sp, #20]
   2bd78:	movcc	r0, #20
   2bd7c:	bcc	2bdb0 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   2bd80:	mov	r2, r0
   2bd84:	mov	r0, sp
   2bd88:	str	r2, [sp]
   2bd8c:	str	r1, [sp, #4]
   2bd90:	str	r5, [sp, #12]
   2bd94:	blx	r3
   2bd98:	b	2bdb0 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   2bd9c:	mov	r0, #1
   2bda0:	bx	lr
   2bda4:	mov	r0, #5
   2bda8:	bx	lr
   2bdac:	mov	r0, #15
   2bdb0:	add	sp, sp, #28
   2bdb4:	ldrd	r4, [sp]
   2bdb8:	add	sp, sp, #8
   2bdbc:	pop	{pc}		; (ldr pc, [sp], #4)
   2bdc0:	mov	r0, #6
   2bdc4:	bx	lr
   2bdc8:	mov	r0, #2
   2bdcc:	bx	lr
   2bdd0:	mov	r0, #29
   2bdd4:	b	2bdb0 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   2bdd8:	mov	r0, #30
   2bddc:	b	2bdb0 <flatcc_verify_table_as_typed_root@@Base+0xfc>

0002bde0 <flatcc_verify_struct_as_nested_root@@Base>:
   2bde0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2bde4:	add	ip, r1, #2
   2bde8:	lsl	ip, ip, #1
   2bdec:	strd	r6, [sp, #8]
   2bdf0:	str	lr, [sp, #20]
   2bdf4:	ldrh	lr, [r0, #22]
   2bdf8:	uxth	ip, ip
   2bdfc:	str	r8, [sp, #16]
   2be00:	sub	sp, sp, #8
   2be04:	ldrh	r4, [sp, #36]	; 0x24
   2be08:	cmp	lr, ip
   2be0c:	bls	2bf5c <flatcc_verify_struct_as_nested_root@@Base+0x17c>
   2be10:	ldr	r1, [r0, #12]
   2be14:	ldrh	ip, [r1, ip]
   2be18:	cmp	ip, #0
   2be1c:	beq	2bf5c <flatcc_verify_struct_as_nested_root@@Base+0x17c>
   2be20:	ldrh	r2, [r0, #20]
   2be24:	add	r1, ip, #4
   2be28:	cmp	r1, r2
   2be2c:	movhi	r0, #13
   2be30:	bhi	2bf3c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   2be34:	ldr	r2, [r0, #16]
   2be38:	add	r2, ip, r2
   2be3c:	tst	r2, #3
   2be40:	movne	r0, #12
   2be44:	bne	2bf3c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   2be48:	cmp	r2, #0
   2be4c:	ldr	ip, [r0]
   2be50:	beq	2be94 <flatcc_verify_struct_as_nested_root@@Base+0xb4>
   2be54:	ldr	lr, [ip, r2]
   2be58:	add	lr, r2, lr
   2be5c:	cmp	r2, lr
   2be60:	bcs	2bf54 <flatcc_verify_struct_as_nested_root@@Base+0x174>
   2be64:	ldr	r1, [r0, #4]
   2be68:	add	r0, lr, #4
   2be6c:	cmp	r1, r0
   2be70:	bcc	2bf54 <flatcc_verify_struct_as_nested_root@@Base+0x174>
   2be74:	tst	r0, #3
   2be78:	bne	2bf54 <flatcc_verify_struct_as_nested_root@@Base+0x174>
   2be7c:	ldr	lr, [ip, lr]
   2be80:	sub	r1, r1, r0
   2be84:	mul	r0, lr, r4
   2be88:	cmp	r1, r0
   2be8c:	movcc	r0, #26
   2be90:	bcc	2bf3c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   2be94:	adds	r1, ip, r2
   2be98:	beq	2bf64 <flatcc_verify_struct_as_nested_root@@Base+0x184>
   2be9c:	ldr	r2, [ip, r2]
   2bea0:	add	r7, r1, r2
   2bea4:	tst	r7, #3
   2bea8:	movne	r0, #5
   2beac:	bne	2bf3c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   2beb0:	ldr	r6, [r1, r2]
   2beb4:	cmn	r6, #9
   2beb8:	movhi	r0, #6
   2bebc:	bhi	2bf3c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   2bec0:	cmp	r6, #7
   2bec4:	movls	r0, #1
   2bec8:	bls	2bf3c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   2becc:	cmp	r3, #0
   2bed0:	beq	2befc <flatcc_verify_struct_as_nested_root@@Base+0x11c>
   2bed4:	mov	r2, #4
   2bed8:	mov	r1, r3
   2bedc:	add	r0, sp, r2
   2bee0:	mov	r5, r3
   2bee4:	bl	145a8 <strncpy@plt>
   2bee8:	ldr	r3, [sp, #4]
   2beec:	ldr	r8, [r7, #8]
   2bef0:	cmp	r3, r8
   2bef4:	cmpne	r3, #0
   2bef8:	bne	2bf84 <flatcc_verify_struct_as_nested_root@@Base+0x1a4>
   2befc:	ldr	r2, [r7, #4]
   2bf00:	clz	r3, r2
   2bf04:	lsr	r3, r3, #5
   2bf08:	cmp	r6, r2
   2bf0c:	orrcc	r3, r3, #1
   2bf10:	cmp	r3, #0
   2bf14:	bne	2bf74 <flatcc_verify_struct_as_nested_root@@Base+0x194>
   2bf18:	ldr	r3, [sp, #32]
   2bf1c:	adds	r3, r3, r2
   2bf20:	bcs	2bfac <flatcc_verify_struct_as_nested_root@@Base+0x1cc>
   2bf24:	cmp	r6, r3
   2bf28:	bcc	2bf7c <flatcc_verify_struct_as_nested_root@@Base+0x19c>
   2bf2c:	sub	r4, r4, #1
   2bf30:	tst	r4, r2
   2bf34:	movne	r0, #11
   2bf38:	beq	2bf64 <flatcc_verify_struct_as_nested_root@@Base+0x184>
   2bf3c:	add	sp, sp, #8
   2bf40:	ldrd	r4, [sp]
   2bf44:	ldrd	r6, [sp, #8]
   2bf48:	ldr	r8, [sp, #16]
   2bf4c:	add	sp, sp, #20
   2bf50:	pop	{pc}		; (ldr pc, [sp], #4)
   2bf54:	mov	r0, #16
   2bf58:	b	2bf3c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   2bf5c:	cmp	r2, #0
   2bf60:	bne	2bf6c <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   2bf64:	mov	r0, #0
   2bf68:	b	2bf3c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   2bf6c:	mov	r0, #4
   2bf70:	b	2bf3c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   2bf74:	mov	r0, #18
   2bf78:	b	2bf3c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   2bf7c:	mov	r0, #9
   2bf80:	b	2bf3c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   2bf84:	mov	r1, r5
   2bf88:	add	r0, sp, #4
   2bf8c:	mov	r2, #4
   2bf90:	bl	145a8 <strncpy@plt>
   2bf94:	ldr	r3, [sp, #4]
   2bf98:	cmp	r8, r3
   2bf9c:	cmpne	r3, #0
   2bfa0:	beq	2bf64 <flatcc_verify_struct_as_nested_root@@Base+0x184>
   2bfa4:	mov	r0, #2
   2bfa8:	b	2bf3c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   2bfac:	mov	r0, #10
   2bfb0:	b	2bf3c <flatcc_verify_struct_as_nested_root@@Base+0x15c>

0002bfb4 <flatcc_verify_table_as_nested_root@@Base>:
   2bfb4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2bfb8:	add	ip, r1, #2
   2bfbc:	lsl	ip, ip, #1
   2bfc0:	strd	r6, [sp, #8]
   2bfc4:	str	lr, [sp, #24]
   2bfc8:	ldrh	lr, [r0, #22]
   2bfcc:	uxth	ip, ip
   2bfd0:	strd	r8, [sp, #16]
   2bfd4:	sub	sp, sp, #28
   2bfd8:	ldrh	r4, [sp, #56]	; 0x38
   2bfdc:	cmp	lr, ip
   2bfe0:	bls	2c1ac <flatcc_verify_table_as_nested_root@@Base+0x1f8>
   2bfe4:	ldr	r1, [r0, #12]
   2bfe8:	ldrh	ip, [r1, ip]
   2bfec:	cmp	ip, #0
   2bff0:	beq	2c1ac <flatcc_verify_table_as_nested_root@@Base+0x1f8>
   2bff4:	ldrh	r2, [r0, #20]
   2bff8:	add	r1, ip, #4
   2bffc:	cmp	r1, r2
   2c000:	movhi	r0, #13
   2c004:	bhi	2c18c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c008:	ldr	r2, [r0, #16]
   2c00c:	add	r2, ip, r2
   2c010:	tst	r2, #3
   2c014:	movne	r0, #12
   2c018:	bne	2c18c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c01c:	cmp	r2, #0
   2c020:	ldr	ip, [r0]
   2c024:	beq	2c068 <flatcc_verify_table_as_nested_root@@Base+0xb4>
   2c028:	ldr	lr, [ip, r2]
   2c02c:	add	lr, r2, lr
   2c030:	cmp	r2, lr
   2c034:	bcs	2c1a4 <flatcc_verify_table_as_nested_root@@Base+0x1f0>
   2c038:	ldr	r1, [r0, #4]
   2c03c:	add	r5, lr, #4
   2c040:	cmp	r1, r5
   2c044:	bcc	2c1a4 <flatcc_verify_table_as_nested_root@@Base+0x1f0>
   2c048:	tst	r5, #3
   2c04c:	bne	2c1a4 <flatcc_verify_table_as_nested_root@@Base+0x1f0>
   2c050:	ldr	lr, [ip, lr]
   2c054:	sub	r1, r1, r5
   2c058:	mul	r4, lr, r4
   2c05c:	cmp	r1, r4
   2c060:	movcc	r0, #26
   2c064:	bcc	2c18c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c068:	adds	r1, ip, r2
   2c06c:	beq	2c1b4 <flatcc_verify_table_as_nested_root@@Base+0x200>
   2c070:	ldr	r2, [ip, r2]
   2c074:	add	r6, r1, r2
   2c078:	add	r7, r6, #4
   2c07c:	tst	r7, #3
   2c080:	movne	r0, #5
   2c084:	bne	2c18c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c088:	ldr	r8, [r1, r2]
   2c08c:	cmn	r8, #9
   2c090:	movhi	r0, #6
   2c094:	bhi	2c18c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c098:	cmp	r8, #7
   2c09c:	movls	r0, #1
   2c0a0:	bls	2c18c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c0a4:	cmp	r3, #0
   2c0a8:	mov	r5, r3
   2c0ac:	mov	r4, r0
   2c0b0:	beq	2c0d8 <flatcc_verify_table_as_nested_root@@Base+0x124>
   2c0b4:	mov	r1, r3
   2c0b8:	mov	r2, #4
   2c0bc:	mov	r0, sp
   2c0c0:	bl	145a8 <strncpy@plt>
   2c0c4:	ldr	r3, [sp]
   2c0c8:	ldr	r9, [r6, #8]
   2c0cc:	cmp	r3, r9
   2c0d0:	cmpne	r3, #0
   2c0d4:	bne	2c1d4 <flatcc_verify_table_as_nested_root@@Base+0x220>
   2c0d8:	ldr	r3, [r4, #8]
   2c0dc:	ldr	r2, [r6, #4]
   2c0e0:	sub	r3, r3, #1
   2c0e4:	cmp	r3, #0
   2c0e8:	str	r3, [sp, #8]
   2c0ec:	beq	2c1cc <flatcc_verify_table_as_nested_root@@Base+0x218>
   2c0f0:	cmp	r2, #0
   2c0f4:	beq	2c1bc <flatcc_verify_table_as_nested_root@@Base+0x208>
   2c0f8:	add	r3, r2, #4
   2c0fc:	cmp	r8, r3
   2c100:	bcc	2c1bc <flatcc_verify_table_as_nested_root@@Base+0x208>
   2c104:	tst	r2, #3
   2c108:	bne	2c1bc <flatcc_verify_table_as_nested_root@@Base+0x208>
   2c10c:	str	r2, [sp, #16]
   2c110:	ldr	r3, [r7, r2]
   2c114:	subs	r3, r2, r3
   2c118:	bmi	2c1fc <flatcc_verify_table_as_nested_root@@Base+0x248>
   2c11c:	tst	r3, #1
   2c120:	bne	2c1fc <flatcc_verify_table_as_nested_root@@Base+0x248>
   2c124:	add	r0, r3, #2
   2c128:	cmp	r8, r0
   2c12c:	movcc	r0, #27
   2c130:	bcc	2c18c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c134:	ldrh	r1, [r7, r3]
   2c138:	add	ip, r7, r3
   2c13c:	add	r3, r1, r3
   2c140:	strh	r1, [sp, #22]
   2c144:	cmp	r8, r3
   2c148:	bcc	2c204 <flatcc_verify_table_as_nested_root@@Base+0x250>
   2c14c:	tst	r1, #1
   2c150:	bne	2c204 <flatcc_verify_table_as_nested_root@@Base+0x250>
   2c154:	cmp	r1, #3
   2c158:	movls	r0, #28
   2c15c:	bls	2c18c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c160:	ldrh	r3, [r7, r0]
   2c164:	sub	r2, r8, r2
   2c168:	cmp	r2, r3
   2c16c:	strh	r3, [sp, #20]
   2c170:	movcc	r0, #20
   2c174:	bcc	2c18c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c178:	mov	r0, sp
   2c17c:	ldr	r3, [sp, #60]	; 0x3c
   2c180:	stm	sp, {r7, r8}
   2c184:	str	ip, [sp, #12]
   2c188:	blx	r3
   2c18c:	add	sp, sp, #28
   2c190:	ldrd	r4, [sp]
   2c194:	ldrd	r6, [sp, #8]
   2c198:	ldrd	r8, [sp, #16]
   2c19c:	add	sp, sp, #24
   2c1a0:	pop	{pc}		; (ldr pc, [sp], #4)
   2c1a4:	mov	r0, #16
   2c1a8:	b	2c18c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c1ac:	cmp	r2, #0
   2c1b0:	bne	2c1c4 <flatcc_verify_table_as_nested_root@@Base+0x210>
   2c1b4:	mov	r0, #0
   2c1b8:	b	2c18c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c1bc:	mov	r0, #15
   2c1c0:	b	2c18c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c1c4:	mov	r0, #4
   2c1c8:	b	2c18c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c1cc:	mov	r0, #3
   2c1d0:	b	2c18c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c1d4:	mov	r1, r5
   2c1d8:	mov	r0, sp
   2c1dc:	mov	r2, #4
   2c1e0:	bl	145a8 <strncpy@plt>
   2c1e4:	ldr	r3, [sp]
   2c1e8:	cmp	r9, r3
   2c1ec:	cmpne	r3, #0
   2c1f0:	movne	r0, #2
   2c1f4:	beq	2c1b4 <flatcc_verify_table_as_nested_root@@Base+0x200>
   2c1f8:	b	2c18c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c1fc:	mov	r0, #29
   2c200:	b	2c18c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c204:	mov	r0, #30
   2c208:	b	2c18c <flatcc_verify_table_as_nested_root@@Base+0x1d8>

0002c20c <flatcc_verify_union_field@@Base>:
   2c20c:	strd	r4, [sp, #-20]!	; 0xffffffec
   2c210:	add	r1, r1, #1
   2c214:	ldr	r4, [r0, #12]
   2c218:	lsl	r1, r1, #1
   2c21c:	strd	r6, [sp, #8]
   2c220:	str	lr, [sp, #16]
   2c224:	uxth	r1, r1
   2c228:	sub	sp, sp, #28
   2c22c:	ldrh	lr, [r0, #22]
   2c230:	cmp	r1, lr
   2c234:	bcs	2c2e0 <flatcc_verify_union_field@@Base+0xd4>
   2c238:	ldrh	ip, [r4, r1]
   2c23c:	cmp	ip, #0
   2c240:	beq	2c2e0 <flatcc_verify_union_field@@Base+0xd4>
   2c244:	ldrh	r5, [r0, #20]
   2c248:	add	r6, ip, #1
   2c24c:	cmp	r6, r5
   2c250:	bhi	2c330 <flatcc_verify_union_field@@Base+0x124>
   2c254:	ldr	r6, [r0]
   2c258:	add	r1, r1, #2
   2c25c:	uxth	r1, r1
   2c260:	ldr	r7, [r0, #16]
   2c264:	cmp	lr, r1
   2c268:	add	lr, ip, r7
   2c26c:	ldrb	ip, [r6, lr]
   2c270:	bls	2c338 <flatcc_verify_union_field@@Base+0x12c>
   2c274:	cmp	ip, #0
   2c278:	ldrh	r1, [r4, r1]
   2c27c:	beq	2c320 <flatcc_verify_union_field@@Base+0x114>
   2c280:	cmp	r1, #0
   2c284:	beq	2c348 <flatcc_verify_union_field@@Base+0x13c>
   2c288:	add	r2, r1, #4
   2c28c:	cmp	r5, r2
   2c290:	bcc	2c330 <flatcc_verify_union_field@@Base+0x124>
   2c294:	add	r1, r1, r7
   2c298:	tst	r1, #3
   2c29c:	movne	r0, #12
   2c2a0:	bne	2c30c <flatcc_verify_union_field@@Base+0x100>
   2c2a4:	cmp	r1, #0
   2c2a8:	beq	2c358 <flatcc_verify_union_field@@Base+0x14c>
   2c2ac:	mov	r2, r0
   2c2b0:	str	r1, [sp, #16]
   2c2b4:	mov	r0, sp
   2c2b8:	ldr	ip, [r2, #4]
   2c2bc:	ldr	r2, [r2, #8]
   2c2c0:	stm	sp, {r6, ip}
   2c2c4:	str	r2, [sp, #8]
   2c2c8:	ldr	r2, [r6, r1]
   2c2cc:	str	r2, [sp, #20]
   2c2d0:	ldrb	r2, [r6, lr]
   2c2d4:	strb	r2, [sp, #12]
   2c2d8:	blx	r3
   2c2dc:	b	2c30c <flatcc_verify_union_field@@Base+0x100>
   2c2e0:	add	r1, r1, #2
   2c2e4:	uxth	r1, r1
   2c2e8:	cmp	lr, r1
   2c2ec:	bls	2c300 <flatcc_verify_union_field@@Base+0xf4>
   2c2f0:	ldrh	r3, [r4, r1]
   2c2f4:	cmp	r3, #0
   2c2f8:	movne	r0, #23
   2c2fc:	bne	2c30c <flatcc_verify_union_field@@Base+0x100>
   2c300:	cmp	r2, #0
   2c304:	moveq	r0, #0
   2c308:	movne	r0, #21
   2c30c:	add	sp, sp, #28
   2c310:	ldrd	r4, [sp]
   2c314:	ldrd	r6, [sp, #8]
   2c318:	add	sp, sp, #16
   2c31c:	pop	{pc}		; (ldr pc, [sp], #4)
   2c320:	cmp	r1, #0
   2c324:	movne	r0, #24
   2c328:	moveq	r0, #0
   2c32c:	b	2c30c <flatcc_verify_union_field@@Base+0x100>
   2c330:	mov	r0, #13
   2c334:	b	2c30c <flatcc_verify_union_field@@Base+0x100>
   2c338:	cmp	ip, #0
   2c33c:	bne	2c348 <flatcc_verify_union_field@@Base+0x13c>
   2c340:	mov	r0, ip
   2c344:	b	2c30c <flatcc_verify_union_field@@Base+0x100>
   2c348:	cmp	r2, #0
   2c34c:	moveq	r0, #0
   2c350:	movne	r0, #4
   2c354:	b	2c30c <flatcc_verify_union_field@@Base+0x100>
   2c358:	mov	r0, r1
   2c35c:	b	2c30c <flatcc_verify_union_field@@Base+0x100>

0002c360 <flatcc_verify_union_vector_field@@Base>:
   2c360:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2c364:	add	r1, r1, #1
   2c368:	ldrh	r4, [r0, #22]
   2c36c:	lsl	r1, r1, #1
   2c370:	uxth	r1, r1
   2c374:	ldr	r5, [r0, #12]
   2c378:	strd	r6, [sp, #8]
   2c37c:	strd	r8, [sp, #16]
   2c380:	cmp	r1, r4
   2c384:	strd	sl, [sp, #24]
   2c388:	str	lr, [sp, #32]
   2c38c:	sub	sp, sp, #28
   2c390:	bcs	2c498 <flatcc_verify_union_vector_field@@Base+0x138>
   2c394:	ldrh	ip, [r5, r1]
   2c398:	cmp	ip, #0
   2c39c:	beq	2c498 <flatcc_verify_union_vector_field@@Base+0x138>
   2c3a0:	ldrh	r7, [r0, #20]
   2c3a4:	add	lr, ip, #4
   2c3a8:	cmp	lr, r7
   2c3ac:	bhi	2c4d4 <flatcc_verify_union_vector_field@@Base+0x174>
   2c3b0:	ldr	r8, [r0, #16]
   2c3b4:	add	ip, ip, r8
   2c3b8:	tst	ip, #3
   2c3bc:	bne	2c500 <flatcc_verify_union_vector_field@@Base+0x1a0>
   2c3c0:	ldr	r6, [r0]
   2c3c4:	cmp	ip, #0
   2c3c8:	add	lr, r6, ip
   2c3cc:	beq	2c410 <flatcc_verify_union_vector_field@@Base+0xb0>
   2c3d0:	ldr	r9, [r6, ip]
   2c3d4:	add	sl, ip, r9
   2c3d8:	cmp	ip, sl
   2c3dc:	bcs	2c478 <flatcc_verify_union_vector_field@@Base+0x118>
   2c3e0:	ldr	ip, [r0, #4]
   2c3e4:	add	fp, sl, #4
   2c3e8:	cmp	ip, fp
   2c3ec:	bcc	2c478 <flatcc_verify_union_vector_field@@Base+0x118>
   2c3f0:	tst	fp, #3
   2c3f4:	bne	2c478 <flatcc_verify_union_vector_field@@Base+0x118>
   2c3f8:	ldr	sl, [r6, sl]
   2c3fc:	sub	ip, ip, fp
   2c400:	cmp	sl, ip
   2c404:	bls	2c41c <flatcc_verify_union_vector_field@@Base+0xbc>
   2c408:	mov	r0, #26
   2c40c:	b	2c47c <flatcc_verify_union_vector_field@@Base+0x11c>
   2c410:	cmp	lr, #0
   2c414:	beq	2c4f8 <flatcc_verify_union_vector_field@@Base+0x198>
   2c418:	ldr	r9, [r6]
   2c41c:	add	r1, r1, #2
   2c420:	uxth	r1, r1
   2c424:	cmp	r4, r1
   2c428:	bls	2c4b4 <flatcc_verify_union_vector_field@@Base+0x154>
   2c42c:	ldrh	r1, [r5, r1]
   2c430:	cmp	r1, #0
   2c434:	beq	2c4b4 <flatcc_verify_union_vector_field@@Base+0x154>
   2c438:	add	r2, r1, #4
   2c43c:	cmp	r2, r7
   2c440:	bhi	2c4d4 <flatcc_verify_union_vector_field@@Base+0x174>
   2c444:	add	r8, r1, r8
   2c448:	tst	r8, #3
   2c44c:	bne	2c500 <flatcc_verify_union_vector_field@@Base+0x1a0>
   2c450:	cmp	r8, #0
   2c454:	beq	2c4f8 <flatcc_verify_union_vector_field@@Base+0x198>
   2c458:	ldr	r1, [r0, #8]
   2c45c:	ldr	r2, [r6, r8]
   2c460:	cmp	r1, #0
   2c464:	movle	r0, #3
   2c468:	ble	2c47c <flatcc_verify_union_vector_field@@Base+0x11c>
   2c46c:	add	r2, r8, r2
   2c470:	cmp	r8, r2
   2c474:	bcc	2c508 <flatcc_verify_union_vector_field@@Base+0x1a8>
   2c478:	mov	r0, #16
   2c47c:	add	sp, sp, #28
   2c480:	ldrd	r4, [sp]
   2c484:	ldrd	r6, [sp, #8]
   2c488:	ldrd	r8, [sp, #16]
   2c48c:	ldrd	sl, [sp, #24]
   2c490:	add	sp, sp, #32
   2c494:	pop	{pc}		; (ldr pc, [sp], #4)
   2c498:	add	r1, r1, #2
   2c49c:	uxth	r1, r1
   2c4a0:	cmp	r4, r1
   2c4a4:	bls	2c4c4 <flatcc_verify_union_vector_field@@Base+0x164>
   2c4a8:	ldrh	r3, [r5, r1]
   2c4ac:	cmp	r3, #0
   2c4b0:	beq	2c4c4 <flatcc_verify_union_vector_field@@Base+0x164>
   2c4b4:	cmp	r2, #0
   2c4b8:	moveq	r0, #0
   2c4bc:	movne	r0, #4
   2c4c0:	b	2c47c <flatcc_verify_union_vector_field@@Base+0x11c>
   2c4c4:	cmp	r2, #0
   2c4c8:	moveq	r0, #0
   2c4cc:	movne	r0, #22
   2c4d0:	b	2c47c <flatcc_verify_union_vector_field@@Base+0x11c>
   2c4d4:	mov	r0, #13
   2c4d8:	b	2c47c <flatcc_verify_union_vector_field@@Base+0x11c>
   2c4dc:	ldr	r3, [r6, r2]
   2c4e0:	cmn	r3, #-1073741823	; 0xc0000001
   2c4e4:	movhi	r0, #25
   2c4e8:	bhi	2c47c <flatcc_verify_union_vector_field@@Base+0x11c>
   2c4ec:	sub	r0, r4, r0
   2c4f0:	cmp	r0, r3, lsl #2
   2c4f4:	bcc	2c408 <flatcc_verify_union_vector_field@@Base+0xa8>
   2c4f8:	mov	r0, #0
   2c4fc:	b	2c47c <flatcc_verify_union_vector_field@@Base+0x11c>
   2c500:	mov	r0, #12
   2c504:	b	2c47c <flatcc_verify_union_vector_field@@Base+0x11c>
   2c508:	ldr	r4, [r0, #4]
   2c50c:	add	r0, r2, #4
   2c510:	cmp	r4, r0
   2c514:	bcc	2c478 <flatcc_verify_union_vector_field@@Base+0x118>
   2c518:	tst	r0, #3
   2c51c:	bne	2c478 <flatcc_verify_union_vector_field@@Base+0x118>
   2c520:	ldr	ip, [r6, r2]
   2c524:	add	r5, r6, r2
   2c528:	cmn	ip, #-1073741823	; 0xc0000001
   2c52c:	bhi	2c4dc <flatcc_verify_union_vector_field@@Base+0x17c>
   2c530:	sub	r7, r4, r0
   2c534:	cmp	r7, ip, lsl #2
   2c538:	bcc	2c4dc <flatcc_verify_union_vector_field@@Base+0x17c>
   2c53c:	ldr	r2, [lr, r9]
   2c540:	add	r0, lr, r9
   2c544:	cmp	r2, ip
   2c548:	bne	2c5d4 <flatcc_verify_union_vector_field@@Base+0x274>
   2c54c:	sub	r1, r1, #1
   2c550:	cmp	ip, #0
   2c554:	str	r6, [sp]
   2c558:	str	r4, [sp, #4]
   2c55c:	str	r1, [sp, #8]
   2c560:	beq	2c4f8 <flatcc_verify_union_vector_field@@Base+0x198>
   2c564:	add	ip, ip, #4
   2c568:	mov	r7, r3
   2c56c:	add	r8, ip, r0
   2c570:	add	r4, r0, #4
   2c574:	rsb	r6, r6, #4
   2c578:	b	2c58c <flatcc_verify_union_vector_field@@Base+0x22c>
   2c57c:	cmp	r2, #0
   2c580:	bne	2c5dc <flatcc_verify_union_vector_field@@Base+0x27c>
   2c584:	cmp	r8, r4
   2c588:	beq	2c4f8 <flatcc_verify_union_vector_field@@Base+0x198>
   2c58c:	add	r1, r6, r5
   2c590:	ldr	r3, [r5, #4]!
   2c594:	mov	r0, sp
   2c598:	add	r4, r4, #1
   2c59c:	ldrb	r2, [r4, #-1]
   2c5a0:	cmp	r3, #0
   2c5a4:	beq	2c57c <flatcc_verify_union_vector_field@@Base+0x21c>
   2c5a8:	cmp	r2, #0
   2c5ac:	beq	2c5e4 <flatcc_verify_union_vector_field@@Base+0x284>
   2c5b0:	strb	r2, [sp, #12]
   2c5b4:	str	r1, [sp, #16]
   2c5b8:	str	r3, [sp, #20]
   2c5bc:	blx	r7
   2c5c0:	cmp	r0, #0
   2c5c4:	beq	2c584 <flatcc_verify_union_vector_field@@Base+0x224>
   2c5c8:	mov	r0, sp
   2c5cc:	blx	r7
   2c5d0:	b	2c47c <flatcc_verify_union_vector_field@@Base+0x11c>
   2c5d4:	mov	r0, #34	; 0x22
   2c5d8:	b	2c47c <flatcc_verify_union_vector_field@@Base+0x11c>
   2c5dc:	mov	r0, #32
   2c5e0:	b	2c47c <flatcc_verify_union_vector_field@@Base+0x11c>
   2c5e4:	mov	r0, #33	; 0x21
   2c5e8:	b	2c47c <flatcc_verify_union_vector_field@@Base+0x11c>
   2c5ec:	andeq	r0, r0, r0
   2c5f0:	movw	r3, #25720	; 0x6478
   2c5f4:	movt	r3, #4
   2c5f8:	str	r4, [sp, #-8]!
   2c5fc:	movw	r1, #27920	; 0x6d10
   2c600:	movt	r1, #4
   2c604:	str	lr, [sp, #4]
   2c608:	movw	r0, #28008	; 0x6d68
   2c60c:	movt	r0, #4
   2c610:	mov	r2, #260	; 0x104
   2c614:	bl	145f0 <__assert_fail@plt>
   2c618:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2c61c:	mov	ip, #0
   2c620:	cmp	r1, r2
   2c624:	strd	r6, [sp, #8]
   2c628:	strd	r8, [sp, #16]
   2c62c:	strd	sl, [sp, #24]
   2c630:	str	lr, [sp, #32]
   2c634:	sub	sp, sp, #36	; 0x24
   2c638:	ldr	r7, [sp, #72]	; 0x48
   2c63c:	strb	ip, [r7]
   2c640:	beq	2c678 <flatcc_verify_union_vector_field@@Base+0x318>
   2c644:	ldrb	ip, [r1]
   2c648:	cmp	ip, #34	; 0x22
   2c64c:	beq	2c698 <flatcc_verify_union_vector_field@@Base+0x338>
   2c650:	ldr	r3, [r0, #20]
   2c654:	cmp	r3, #0
   2c658:	bne	2c678 <flatcc_verify_union_vector_field@@Base+0x318>
   2c65c:	ldr	r3, [r0, #4]
   2c660:	mov	ip, #5
   2c664:	str	ip, [r0, #20]
   2c668:	str	r1, [r0, #32]
   2c66c:	sub	r3, r1, r3
   2c670:	add	r3, r3, #1
   2c674:	str	r3, [r0, #16]
   2c678:	mov	r0, r2
   2c67c:	add	sp, sp, #36	; 0x24
   2c680:	ldrd	r4, [sp]
   2c684:	ldrd	r6, [sp, #8]
   2c688:	ldrd	r8, [sp, #16]
   2c68c:	ldrd	sl, [sp, #24]
   2c690:	add	sp, sp, #32
   2c694:	pop	{pc}		; (ldr pc, [sp], #4)
   2c698:	mov	r8, r0
   2c69c:	add	r0, r1, #1
   2c6a0:	mov	fp, r3
   2c6a4:	sub	r3, r2, r0
   2c6a8:	cmp	r3, #1
   2c6ac:	mov	r5, r2
   2c6b0:	ble	2c6c4 <flatcc_verify_union_vector_field@@Base+0x364>
   2c6b4:	ldrb	r3, [r1, #1]
   2c6b8:	cmp	r3, #32
   2c6bc:	bhi	2c70c <flatcc_verify_union_vector_field@@Base+0x3ac>
   2c6c0:	beq	2c6fc <flatcc_verify_union_vector_field@@Base+0x39c>
   2c6c4:	cmp	r5, r0
   2c6c8:	beq	2c67c <flatcc_verify_union_vector_field@@Base+0x31c>
   2c6cc:	ldrb	r2, [r0]
   2c6d0:	cmp	r2, #32
   2c6d4:	bne	2c7a8 <flatcc_verify_union_vector_field@@Base+0x448>
   2c6d8:	add	r3, r0, #1
   2c6dc:	b	2c6ec <flatcc_verify_union_vector_field@@Base+0x38c>
   2c6e0:	ldrb	r2, [r3], #1
   2c6e4:	cmp	r2, #32
   2c6e8:	bne	2c7a8 <flatcc_verify_union_vector_field@@Base+0x448>
   2c6ec:	cmp	r5, r3
   2c6f0:	mov	r0, r3
   2c6f4:	bne	2c6e0 <flatcc_verify_union_vector_field@@Base+0x380>
   2c6f8:	b	2c67c <flatcc_verify_union_vector_field@@Base+0x31c>
   2c6fc:	ldrb	r3, [r1, #2]
   2c700:	cmp	r3, #32
   2c704:	addhi	r0, r1, #2
   2c708:	bls	2c6c4 <flatcc_verify_union_vector_field@@Base+0x364>
   2c70c:	cmp	r5, r0
   2c710:	beq	2c67c <flatcc_verify_union_vector_field@@Base+0x31c>
   2c714:	add	sl, sp, #20
   2c718:	add	r9, sp, #24
   2c71c:	mov	r4, fp
   2c720:	mov	r6, r0
   2c724:	b	2c740 <flatcc_verify_union_vector_field@@Base+0x3e0>
   2c728:	cmp	r6, r0
   2c72c:	mov	r6, r0
   2c730:	bne	2c768 <flatcc_verify_union_vector_field@@Base+0x408>
   2c734:	ldr	r3, [r4, #4]!
   2c738:	cmp	r3, #0
   2c73c:	beq	2c8e0 <flatcc_verify_union_vector_field@@Base+0x580>
   2c740:	mov	r1, r0
   2c744:	add	r3, sp, #16
   2c748:	stm	sp, {r9, sl}
   2c74c:	mov	r2, r5
   2c750:	mov	r0, r8
   2c754:	ldr	ip, [r4]
   2c758:	blx	ip
   2c75c:	cmp	r5, r0
   2c760:	bne	2c728 <flatcc_verify_union_vector_field@@Base+0x3c8>
   2c764:	b	2c67c <flatcc_verify_union_vector_field@@Base+0x31c>
   2c768:	ldr	r3, [sp, #16]
   2c76c:	cmp	r3, #0
   2c770:	bne	2c8bc <flatcc_verify_union_vector_field@@Base+0x55c>
   2c774:	ldrd	r2, [sp, #24]
   2c778:	cmp	r3, #0
   2c77c:	strd	r2, [sp, #8]
   2c780:	cmpeq	r2, #255	; 0xff
   2c784:	bhi	2c8a8 <flatcc_verify_union_vector_field@@Base+0x548>
   2c788:	ldrb	r3, [r7]
   2c78c:	ldr	r2, [sp, #8]
   2c790:	ldr	r1, [sp, #20]
   2c794:	add	r3, r3, r2
   2c798:	cmp	r1, #0
   2c79c:	strb	r3, [r7]
   2c7a0:	bne	2c71c <flatcc_verify_union_vector_field@@Base+0x3bc>
   2c7a4:	b	2c67c <flatcc_verify_union_vector_field@@Base+0x31c>
   2c7a8:	cmp	r2, #32
   2c7ac:	bhi	2c714 <flatcc_verify_union_vector_field@@Base+0x3b4>
   2c7b0:	sub	r2, r2, #9
   2c7b4:	cmp	r2, #23
   2c7b8:	ldrls	pc, [pc, r2, lsl #2]
   2c7bc:	b	2c878 <flatcc_verify_union_vector_field@@Base+0x518>
   2c7c0:	andeq	ip, r2, r0, ror r8
   2c7c4:	andeq	ip, r2, r4, asr #16
   2c7c8:	andeq	ip, r2, r8, ror r8
   2c7cc:	andeq	ip, r2, r8, ror r8
   2c7d0:	andeq	ip, r2, r0, lsr #16
   2c7d4:	andeq	ip, r2, r8, ror r8
   2c7d8:	andeq	ip, r2, r8, ror r8
   2c7dc:	andeq	ip, r2, r8, ror r8
   2c7e0:	andeq	ip, r2, r8, ror r8
   2c7e4:	andeq	ip, r2, r8, ror r8
   2c7e8:	andeq	ip, r2, r8, ror r8
   2c7ec:	andeq	ip, r2, r8, ror r8
   2c7f0:	andeq	ip, r2, r8, ror r8
   2c7f4:	andeq	ip, r2, r8, ror r8
   2c7f8:	andeq	ip, r2, r8, ror r8
   2c7fc:	andeq	ip, r2, r8, ror r8
   2c800:	andeq	ip, r2, r8, ror r8
   2c804:	andeq	ip, r2, r8, ror r8
   2c808:	andeq	ip, r2, r8, ror r8
   2c80c:	andeq	ip, r2, r8, ror r8
   2c810:	andeq	ip, r2, r8, ror r8
   2c814:	andeq	ip, r2, r8, ror r8
   2c818:	andeq	ip, r2, r8, ror r8
   2c81c:	andeq	ip, r2, r4, asr #13
   2c820:	sub	r3, r5, r0
   2c824:	add	r2, r0, #1
   2c828:	cmp	r3, #1
   2c82c:	ble	2c83c <flatcc_verify_union_vector_field@@Base+0x4dc>
   2c830:	ldrb	r3, [r0, #1]
   2c834:	cmp	r3, #10
   2c838:	addeq	r2, r0, #2
   2c83c:	mov	r0, r2
   2c840:	b	2c848 <flatcc_verify_union_vector_field@@Base+0x4e8>
   2c844:	add	r0, r0, #1
   2c848:	ldr	r3, [r8, #12]
   2c84c:	str	r0, [r8, #4]
   2c850:	add	r3, r3, #1
   2c854:	str	r3, [r8, #12]
   2c858:	cmp	r5, r0
   2c85c:	beq	2c67c <flatcc_verify_union_vector_field@@Base+0x31c>
   2c860:	ldrb	r2, [r0]
   2c864:	cmp	r2, #32
   2c868:	bls	2c7b0 <flatcc_verify_union_vector_field@@Base+0x450>
   2c86c:	b	2c714 <flatcc_verify_union_vector_field@@Base+0x3b4>
   2c870:	add	r0, r0, #1
   2c874:	b	2c858 <flatcc_verify_union_vector_field@@Base+0x4f8>
   2c878:	ldr	r3, [r8, #20]
   2c87c:	cmp	r3, #0
   2c880:	bne	2c8b4 <flatcc_verify_union_vector_field@@Base+0x554>
   2c884:	ldr	r3, [r8, #4]
   2c888:	mov	r2, #5
   2c88c:	sub	r3, r0, r3
   2c890:	str	r2, [r8, #20]
   2c894:	add	r3, r3, #1
   2c898:	str	r3, [r8, #16]
   2c89c:	str	r0, [r8, #32]
   2c8a0:	mov	r0, r5
   2c8a4:	b	2c67c <flatcc_verify_union_vector_field@@Base+0x31c>
   2c8a8:	ldr	r3, [r8, #20]
   2c8ac:	cmp	r3, #0
   2c8b0:	beq	2c8d4 <flatcc_verify_union_vector_field@@Base+0x574>
   2c8b4:	mov	r0, r5
   2c8b8:	b	2c67c <flatcc_verify_union_vector_field@@Base+0x31c>
   2c8bc:	ldr	r3, [r8, #20]
   2c8c0:	cmp	r3, #0
   2c8c4:	bne	2c8b4 <flatcc_verify_union_vector_field@@Base+0x554>
   2c8c8:	mov	r2, #8
   2c8cc:	ldr	r3, [r8, #4]
   2c8d0:	b	2c88c <flatcc_verify_union_vector_field@@Base+0x52c>
   2c8d4:	mov	r2, #7
   2c8d8:	ldr	r3, [r8, #4]
   2c8dc:	b	2c88c <flatcc_verify_union_vector_field@@Base+0x52c>
   2c8e0:	ldr	r3, [r8, #20]
   2c8e4:	cmp	r3, #0
   2c8e8:	bne	2c8b4 <flatcc_verify_union_vector_field@@Base+0x554>
   2c8ec:	mov	r2, #23
   2c8f0:	ldr	r3, [r8, #4]
   2c8f4:	b	2c88c <flatcc_verify_union_vector_field@@Base+0x52c>

0002c8f8 <grisu3_diy_fp_encode_double@@Base>:
   2c8f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2c8fc:	sub	r2, r2, r3
   2c900:	strd	r6, [sp, #8]
   2c904:	strd	r8, [sp, #16]
   2c908:	strd	sl, [sp, #24]
   2c90c:	mov	sl, r0
   2c910:	mov	fp, r1
   2c914:	str	lr, [sp, #32]
   2c918:	sub	sp, sp, #60	; 0x3c
   2c91c:	ldr	ip, [sp, #96]	; 0x60
   2c920:	cmp	ip, #0
   2c924:	movne	ip, #4
   2c928:	orrs	r1, sl, fp
   2c92c:	beq	2cdc0 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   2c930:	mov	lr, #0
   2c934:	mov	r4, lr
   2c938:	mov	r0, lr
   2c93c:	movt	r4, #65472	; 0xffc0
   2c940:	and	r1, fp, r4
   2c944:	orrs	r1, r0, r1
   2c948:	movne	r1, lr
   2c94c:	bne	2c988 <grisu3_diy_fp_encode_double@@Base+0x90>
   2c950:	mvn	r5, #9
   2c954:	str	r4, [sp, #16]
   2c958:	lsl	r0, fp, #10
   2c95c:	mov	r6, lr
   2c960:	mov	r1, r5
   2c964:	lsl	r4, sl, #10
   2c968:	sub	r5, r5, #10
   2c96c:	orr	r0, r0, sl, lsr #22
   2c970:	mov	sl, r4
   2c974:	mov	fp, r0
   2c978:	ldr	r0, [sp, #16]
   2c97c:	and	r7, fp, r0
   2c980:	orrs	r0, r6, r7
   2c984:	beq	2c958 <grisu3_diy_fp_encode_double@@Base+0x60>
   2c988:	cmp	sl, #0
   2c98c:	sbcs	r0, fp, #0
   2c990:	blt	2c9b4 <grisu3_diy_fp_encode_double@@Base+0xbc>
   2c994:	sub	r0, r1, #1
   2c998:	adds	sl, sl, sl
   2c99c:	mov	r1, r0
   2c9a0:	adc	fp, fp, fp
   2c9a4:	cmp	sl, #0
   2c9a8:	sbcs	lr, fp, #0
   2c9ac:	sub	r0, r0, #1
   2c9b0:	bge	2c998 <grisu3_diy_fp_encode_double@@Base+0xa0>
   2c9b4:	rsb	r0, r1, #0
   2c9b8:	cmn	r2, #348	; 0x15c
   2c9bc:	lsl	r0, ip, r0
   2c9c0:	str	r0, [sp, #20]
   2c9c4:	blt	2ce18 <grisu3_diy_fp_encode_double@@Base+0x520>
   2c9c8:	cmp	r2, #348	; 0x15c
   2c9cc:	bge	2cde0 <grisu3_diy_fp_encode_double@@Base+0x4e8>
   2c9d0:	add	r0, r2, #348	; 0x15c
   2c9d4:	movw	ip, #25720	; 0x6478
   2c9d8:	movt	ip, #4
   2c9dc:	asr	r0, r0, #3
   2c9e0:	add	r0, ip, r0, lsl #4
   2c9e4:	ldrsh	r5, [r0, #66]	; 0x42
   2c9e8:	ldrsh	lr, [r0, #64]	; 0x40
   2c9ec:	ldr	r7, [r0, #56]	; 0x38
   2c9f0:	cmp	r2, r5
   2c9f4:	ldr	r0, [r0, #60]	; 0x3c
   2c9f8:	str	r0, [sp, #16]
   2c9fc:	blt	2cdfc <grisu3_diy_fp_encode_double@@Base+0x504>
   2ca00:	add	r0, r5, #7
   2ca04:	cmp	r2, r0
   2ca08:	bgt	2cdc4 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   2ca0c:	cmp	r2, r5
   2ca10:	beq	2cac8 <grisu3_diy_fp_encode_double@@Base+0x1d0>
   2ca14:	sub	r5, r2, r5
   2ca18:	sub	r5, r5, #1
   2ca1c:	cmp	r5, #6
   2ca20:	bhi	2ce34 <grisu3_diy_fp_encode_double@@Base+0x53c>
   2ca24:	movw	r2, #33600	; 0x8340
   2ca28:	movt	r2, #5
   2ca2c:	add	r4, r2, r5, lsl #4
   2ca30:	ldr	r2, [r2, r5, lsl #4]
   2ca34:	add	r3, r3, #1
   2ca38:	add	r5, r3, r5
   2ca3c:	mov	ip, #0
   2ca40:	ldr	r6, [r4, #4]
   2ca44:	str	r6, [sp, #32]
   2ca48:	str	r5, [sp, #36]	; 0x24
   2ca4c:	ldr	r6, [r4, #8]
   2ca50:	umull	r4, r5, fp, r2
   2ca54:	umull	r2, r3, sl, r2
   2ca58:	ldr	r0, [sp, #32]
   2ca5c:	strd	r4, [sp, #40]	; 0x28
   2ca60:	mov	r2, r3
   2ca64:	ldr	r3, [sp, #32]
   2ca68:	add	r1, r1, r6
   2ca6c:	add	r1, r1, #64	; 0x40
   2ca70:	umull	r4, r5, sl, r3
   2ca74:	ldr	r3, [sp, #40]	; 0x28
   2ca78:	strd	r4, [sp]
   2ca7c:	ldr	r5, [sp, #36]	; 0x24
   2ca80:	adds	r4, r2, r3
   2ca84:	ldrd	r2, [sp]
   2ca88:	adc	r6, ip, ip
   2ca8c:	adds	r4, r4, #-2147483648	; 0x80000000
   2ca90:	adc	r6, r6, ip
   2ca94:	adds	r4, r4, r2
   2ca98:	ldr	r2, [sp, #44]	; 0x2c
   2ca9c:	adc	r6, r6, ip
   2caa0:	adds	r2, r2, r3
   2caa4:	str	r2, [sp, #24]
   2caa8:	adc	r2, ip, ip
   2caac:	str	r2, [sp, #28]
   2cab0:	ldrd	r2, [sp, #24]
   2cab4:	umlal	r2, r3, r0, fp
   2cab8:	adds	sl, r6, r2
   2cabc:	adc	fp, ip, r3
   2cac0:	cmp	r5, #19
   2cac4:	bgt	2cd80 <grisu3_diy_fp_encode_double@@Base+0x488>
   2cac8:	umull	r2, r3, fp, r7
   2cacc:	add	lr, r1, lr
   2cad0:	mov	ip, #0
   2cad4:	umull	r0, r1, sl, r7
   2cad8:	add	r7, lr, #64	; 0x40
   2cadc:	strd	r2, [sp]
   2cae0:	strd	r0, [sp, #24]
   2cae4:	ldr	r3, [sp, #16]
   2cae8:	ldr	r2, [sp]
   2caec:	ldr	r1, [sp, #28]
   2caf0:	umull	r4, r5, sl, r3
   2caf4:	ldr	r3, [sp, #4]
   2caf8:	adds	r2, r1, r2
   2cafc:	mov	r1, r4
   2cb00:	adc	r0, ip, ip
   2cb04:	adds	r2, r2, #-2147483648	; 0x80000000
   2cb08:	adc	r0, r0, ip
   2cb0c:	adds	r2, r2, r1
   2cb10:	ldr	r2, [sp, #16]
   2cb14:	adc	r0, r0, ip
   2cb18:	adds	r1, r3, r5
   2cb1c:	ldr	r3, [sp, #20]
   2cb20:	str	r1, [sp, #8]
   2cb24:	adc	r1, ip, ip
   2cb28:	str	r1, [sp, #12]
   2cb2c:	ldrd	r4, [sp, #8]
   2cb30:	umlal	r4, r5, r2, fp
   2cb34:	adds	r8, r0, r4
   2cb38:	adc	r9, ip, r5
   2cb3c:	cmp	r3, ip
   2cb40:	movne	r2, #9
   2cb44:	moveq	r2, #8
   2cb48:	orrs	r1, r8, r9
   2cb4c:	add	r2, r3, r2
   2cb50:	beq	2cdc0 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   2cb54:	mov	r3, ip
   2cb58:	mov	r4, ip
   2cb5c:	movt	r3, #65472	; 0xffc0
   2cb60:	and	r5, r9, r3
   2cb64:	orrs	r1, r4, r5
   2cb68:	bne	2cda8 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   2cb6c:	add	r1, lr, #54	; 0x36
   2cb70:	mov	r0, r3
   2cb74:	lsl	lr, r9, #10
   2cb78:	mov	r4, ip
   2cb7c:	mov	r3, r1
   2cb80:	lsl	r6, r8, #10
   2cb84:	sub	r1, r1, #10
   2cb88:	orr	lr, lr, r8, lsr #22
   2cb8c:	mov	r8, r6
   2cb90:	and	r5, lr, r0
   2cb94:	mov	r9, lr
   2cb98:	orrs	lr, r4, r5
   2cb9c:	beq	2cb74 <grisu3_diy_fp_encode_double@@Base+0x27c>
   2cba0:	cmp	r8, #0
   2cba4:	sbcs	r1, r9, #0
   2cba8:	blt	2cbcc <grisu3_diy_fp_encode_double@@Base+0x2d4>
   2cbac:	sub	r1, r3, #1
   2cbb0:	adds	r8, r8, r8
   2cbb4:	mov	r3, r1
   2cbb8:	adc	r9, r9, r9
   2cbbc:	cmp	r8, #0
   2cbc0:	sbcs	r0, r9, #0
   2cbc4:	sub	r1, r1, #1
   2cbc8:	bge	2cbb0 <grisu3_diy_fp_encode_double@@Base+0x2b8>
   2cbcc:	movw	r1, #64526	; 0xfc0e
   2cbd0:	movt	r1, #65535	; 0xffff
   2cbd4:	add	r0, r3, #64	; 0x40
   2cbd8:	sub	r7, r7, r3
   2cbdc:	cmp	r0, r1
   2cbe0:	lsl	r2, r2, r7
   2cbe4:	blt	2cd24 <grisu3_diy_fp_encode_double@@Base+0x42c>
   2cbe8:	add	ip, r2, #4
   2cbec:	mov	r1, #4
   2cbf0:	cmp	ip, #0
   2cbf4:	mov	r0, #0
   2cbf8:	bgt	2cc44 <grisu3_diy_fp_encode_double@@Base+0x34c>
   2cbfc:	adds	r8, r8, #1
   2cc00:	mov	r4, #0
   2cc04:	adc	r9, r9, #0
   2cc08:	and	r5, r9, #2097152	; 0x200000
   2cc0c:	orrs	lr, r4, r5
   2cc10:	beq	2cc2c <grisu3_diy_fp_encode_double@@Base+0x334>
   2cc14:	lsr	lr, r8, #1
   2cc18:	add	r3, r3, #1
   2cc1c:	lsr	r4, r9, #1
   2cc20:	orr	lr, lr, r9, lsl #31
   2cc24:	mov	r9, r4
   2cc28:	mov	r8, lr
   2cc2c:	movw	r5, #65535	; 0xffff
   2cc30:	movt	r5, #31
   2cc34:	mvn	r4, #0
   2cc38:	cmp	r9, r5
   2cc3c:	cmpeq	r8, r4
   2cc40:	bls	2cc7c <grisu3_diy_fp_encode_double@@Base+0x384>
   2cc44:	movw	r5, #65535	; 0xffff
   2cc48:	movt	r5, #31
   2cc4c:	add	r6, r3, #1
   2cc50:	mvn	r4, #0
   2cc54:	lsr	lr, r8, #1
   2cc58:	mov	r3, r6
   2cc5c:	add	r6, r6, #1
   2cc60:	lsr	r7, r9, #1
   2cc64:	orr	lr, lr, r9, lsl #31
   2cc68:	cmp	r7, r5
   2cc6c:	mov	r9, r7
   2cc70:	cmpeq	lr, r4
   2cc74:	mov	r8, lr
   2cc78:	bhi	2cc54 <grisu3_diy_fp_encode_double@@Base+0x35c>
   2cc7c:	movw	lr, #64462	; 0xfbce
   2cc80:	movt	lr, #65535	; 0xffff
   2cc84:	cmp	r3, lr
   2cc88:	mov	r6, #0
   2cc8c:	movlt	r7, #0
   2cc90:	blt	2ccec <grisu3_diy_fp_encode_double@@Base+0x3f4>
   2cc94:	mov	r4, r6
   2cc98:	and	r5, r9, #1048576	; 0x100000
   2cc9c:	beq	2ccd4 <grisu3_diy_fp_encode_double@@Base+0x3dc>
   2cca0:	orrs	r7, r4, r5
   2cca4:	beq	2ccb8 <grisu3_diy_fp_encode_double@@Base+0x3c0>
   2cca8:	b	2cdb0 <grisu3_diy_fp_encode_double@@Base+0x4b8>
   2ccac:	orrs	sl, r4, r5
   2ccb0:	bne	2cd90 <grisu3_diy_fp_encode_double@@Base+0x498>
   2ccb4:	mov	r3, r7
   2ccb8:	adds	r8, r8, r8
   2ccbc:	sub	r7, r3, #1
   2ccc0:	adc	r9, r9, r9
   2ccc4:	cmp	r7, lr
   2ccc8:	mov	r4, r6
   2cccc:	and	r5, r9, #1048576	; 0x100000
   2ccd0:	bne	2ccac <grisu3_diy_fp_encode_double@@Base+0x3b4>
   2ccd4:	orrs	r3, r4, r5
   2ccd8:	movne	r4, #0
   2ccdc:	movne	r5, #1048576	; 0x100000
   2cce0:	ubfx	r3, r9, #0, #20
   2cce4:	orr	r6, r8, r4
   2cce8:	orr	r7, r3, r5
   2ccec:	ldr	r3, [sp, #100]	; 0x64
   2ccf0:	sub	r2, r1, r2
   2ccf4:	cmp	r0, ip
   2ccf8:	cmplt	r2, r0
   2ccfc:	movge	r0, #1
   2cd00:	movlt	r0, #0
   2cd04:	strd	r6, [r3]
   2cd08:	add	sp, sp, #60	; 0x3c
   2cd0c:	ldrd	r4, [sp]
   2cd10:	ldrd	r6, [sp, #8]
   2cd14:	ldrd	r8, [sp, #16]
   2cd18:	ldrd	sl, [sp, #24]
   2cd1c:	add	sp, sp, #32
   2cd20:	pop	{pc}		; (ldr pc, [sp], #4)
   2cd24:	mvn	r1, #1072	; 0x430
   2cd28:	cmp	r0, r1
   2cd2c:	blt	2cda0 <grisu3_diy_fp_encode_double@@Base+0x4a8>
   2cd30:	add	r0, r3, #1136	; 0x470
   2cd34:	add	r0, r0, #2
   2cd38:	rsb	lr, r0, #64	; 0x40
   2cd3c:	cmp	lr, #60	; 0x3c
   2cd40:	rsbgt	r0, r0, #2
   2cd44:	ble	2ce50 <grisu3_diy_fp_encode_double@@Base+0x558>
   2cd48:	asr	r2, r2, r0
   2cd4c:	add	r3, r3, r0
   2cd50:	mov	lr, #62	; 0x3e
   2cd54:	lsr	r1, r9, r0
   2cd58:	mov	r9, #0
   2cd5c:	add	r3, r3, #62	; 0x3e
   2cd60:	add	r2, r2, #9
   2cd64:	mov	r0, r9
   2cd68:	lsr	r8, r1, #30
   2cd6c:	mov	ip, r2
   2cd70:	mov	r1, r9
   2cd74:	cmp	lr, ip
   2cd78:	blt	2cc2c <grisu3_diy_fp_encode_double@@Base+0x334>
   2cd7c:	b	2cbfc <grisu3_diy_fp_encode_double@@Base+0x304>
   2cd80:	ldr	r3, [sp, #20]
   2cd84:	add	r3, r3, #4
   2cd88:	str	r3, [sp, #20]
   2cd8c:	b	2cac8 <grisu3_diy_fp_encode_double@@Base+0x1d0>
   2cd90:	add	r3, r3, #1072	; 0x430
   2cd94:	add	r3, r3, #2
   2cd98:	lsl	r5, r3, #20
   2cd9c:	b	2cce0 <grisu3_diy_fp_encode_double@@Base+0x3e8>
   2cda0:	mov	r0, #2
   2cda4:	b	2cd48 <grisu3_diy_fp_encode_double@@Base+0x450>
   2cda8:	mov	r3, r7
   2cdac:	b	2cba0 <grisu3_diy_fp_encode_double@@Base+0x2a8>
   2cdb0:	add	r3, r3, #1072	; 0x430
   2cdb4:	add	r3, r3, #3
   2cdb8:	lsl	r5, r3, #20
   2cdbc:	b	2cce0 <grisu3_diy_fp_encode_double@@Base+0x3e8>
   2cdc0:	bl	2c5f0 <flatcc_verify_union_vector_field@@Base+0x290>
   2cdc4:	movw	r1, #28020	; 0x6d74
   2cdc8:	movt	r1, #4
   2cdcc:	movw	r0, #28200	; 0x6e28
   2cdd0:	movt	r0, #4
   2cdd4:	add	r3, ip, #24
   2cdd8:	mov	r2, #89	; 0x59
   2cddc:	bl	145f0 <__assert_fail@plt>
   2cde0:	movw	r1, #28020	; 0x6d74
   2cde4:	movt	r1, #4
   2cde8:	ldr	r3, [pc, #164]	; 2ce94 <grisu3_diy_fp_encode_double@@Base+0x59c>
   2cdec:	movw	r0, #28140	; 0x6dec
   2cdf0:	movt	r0, #4
   2cdf4:	mov	r2, #81	; 0x51
   2cdf8:	bl	145f0 <__assert_fail@plt>
   2cdfc:	movw	r1, #28020	; 0x6d74
   2ce00:	movt	r1, #4
   2ce04:	movw	r0, #28184	; 0x6e18
   2ce08:	movt	r0, #4
   2ce0c:	add	r3, ip, #24
   2ce10:	mov	r2, #88	; 0x58
   2ce14:	bl	145f0 <__assert_fail@plt>
   2ce18:	movw	r1, #28020	; 0x6d74
   2ce1c:	movt	r1, #4
   2ce20:	ldr	r3, [pc, #108]	; 2ce94 <grisu3_diy_fp_encode_double@@Base+0x59c>
   2ce24:	movw	r0, #28108	; 0x6dcc
   2ce28:	movt	r0, #4
   2ce2c:	mov	r2, #80	; 0x50
   2ce30:	bl	145f0 <__assert_fail@plt>
   2ce34:	movw	r1, #28020	; 0x6d74
   2ce38:	movt	r1, #4
   2ce3c:	ldr	r3, [pc, #84]	; 2ce98 <grisu3_diy_fp_encode_double@@Base+0x5a0>
   2ce40:	movw	r0, #28228	; 0x6e44
   2ce44:	movt	r0, #4
   2ce48:	mov	r2, #185	; 0xb9
   2ce4c:	bl	145f0 <__assert_fail@plt>
   2ce50:	lsr	ip, r8, lr
   2ce54:	rsb	r1, lr, #32
   2ce58:	rsb	r0, r0, #63	; 0x3f
   2ce5c:	sub	r5, lr, #32
   2ce60:	mov	r4, #1
   2ce64:	orr	ip, ip, r9, lsl r1
   2ce68:	mov	r1, #8
   2ce6c:	add	r3, r3, lr
   2ce70:	and	r4, r8, r4, lsl r0
   2ce74:	orr	ip, ip, r9, lsr r5
   2ce78:	lsl	r1, r1, r0
   2ce7c:	lsr	r5, r9, lr
   2ce80:	mov	r8, ip
   2ce84:	lsl	r0, r4, #3
   2ce88:	add	ip, r2, r1
   2ce8c:	mov	r9, r5
   2ce90:	b	2cd74 <grisu3_diy_fp_encode_double@@Base+0x47c>
   2ce94:	muleq	r4, r0, r4
   2ce98:	andeq	r6, r4, r0, lsr #20
   2ce9c:	cmp	r1, #1000	; 0x3e8
   2cea0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2cea4:	mov	r4, #0
   2cea8:	addgt	ip, r0, #1000	; 0x3e8
   2ceac:	addle	r1, r1, #1
   2ceb0:	strd	r6, [sp, #8]
   2ceb4:	addle	ip, r0, r1
   2ceb8:	addgt	ip, ip, #1
   2cebc:	strd	r8, [sp, #16]
   2cec0:	mov	r5, #0
   2cec4:	strd	sl, [sp, #24]
   2cec8:	cmp	ip, r0
   2cecc:	str	lr, [sp, #32]
   2ced0:	sub	sp, sp, #52	; 0x34
   2ced4:	moveq	r6, ip
   2ced8:	strd	r4, [r2]
   2cedc:	str	r2, [sp, #16]
   2cee0:	beq	2d078 <grisu3_diy_fp_encode_double@@Base+0x780>
   2cee4:	ldrb	r4, [r0]
   2cee8:	cmp	r4, #45	; 0x2d
   2ceec:	beq	2d170 <grisu3_diy_fp_encode_double@@Base+0x878>
   2cef0:	cmp	r4, #48	; 0x30
   2cef4:	beq	2d098 <grisu3_diy_fp_encode_double@@Base+0x7a0>
   2cef8:	sub	r3, r4, #49	; 0x31
   2cefc:	cmp	r3, #8
   2cf00:	bhi	2d220 <grisu3_diy_fp_encode_double@@Base+0x928>
   2cf04:	mov	r2, #0
   2cf08:	mov	r3, r0
   2cf0c:	str	r2, [sp, #20]
   2cf10:	add	r7, r3, #1
   2cf14:	sub	r4, r4, #48	; 0x30
   2cf18:	cmp	ip, r7
   2cf1c:	asr	r5, r4, #31
   2cf20:	beq	2d0e8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2cf24:	ldrb	r1, [r3, #1]
   2cf28:	sub	r3, r1, #48	; 0x30
   2cf2c:	cmp	r3, #9
   2cf30:	movhi	sl, #0
   2cf34:	movhi	lr, sl
   2cf38:	bhi	2d870 <grisu3_diy_fp_encode_double@@Base+0xf78>
   2cf3c:	add	fp, pc, #996	; 0x3e4
   2cf40:	ldrd	sl, [fp]
   2cf44:	add	lr, r7, #1
   2cf48:	b	2cf58 <grisu3_diy_fp_encode_double@@Base+0x660>
   2cf4c:	cmp	r5, fp
   2cf50:	cmpeq	r4, sl
   2cf54:	bhi	2d0f0 <grisu3_diy_fp_encode_double@@Base+0x7f8>
   2cf58:	lsl	r2, r5, #2
   2cf5c:	mov	r6, lr
   2cf60:	lsl	r3, r4, #2
   2cf64:	orr	r2, r2, r4, lsr #30
   2cf68:	adds	r3, r3, r4
   2cf6c:	adc	r2, r2, r5
   2cf70:	adds	r8, r3, r3
   2cf74:	adc	r9, r2, r2
   2cf78:	adds	r2, r8, r1
   2cf7c:	adc	r3, r9, #0
   2cf80:	subs	r4, r2, #48	; 0x30
   2cf84:	sbc	r5, r3, #0
   2cf88:	cmp	ip, lr
   2cf8c:	beq	2d0e8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2cf90:	ldrb	r1, [lr]
   2cf94:	add	lr, lr, #1
   2cf98:	sub	r3, r1, #48	; 0x30
   2cf9c:	cmp	r3, #9
   2cfa0:	bls	2cf4c <grisu3_diy_fp_encode_double@@Base+0x654>
   2cfa4:	mov	lr, #0
   2cfa8:	sub	sl, r6, r7
   2cfac:	mov	r7, lr
   2cfb0:	sub	r3, r1, #49	; 0x31
   2cfb4:	cmp	r3, #8
   2cfb8:	bls	2d1b0 <grisu3_diy_fp_encode_double@@Base+0x8b8>
   2cfbc:	cmp	r1, #46	; 0x2e
   2cfc0:	beq	2d228 <grisu3_diy_fp_encode_double@@Base+0x930>
   2cfc4:	orr	r1, r1, #32
   2cfc8:	add	r7, r7, sl
   2cfcc:	cmp	r1, #101	; 0x65
   2cfd0:	beq	2d3e0 <grisu3_diy_fp_encode_double@@Base+0xae8>
   2cfd4:	orrs	r3, r4, r5
   2cfd8:	mov	r9, r0
   2cfdc:	ldr	r8, [sp, #16]
   2cfe0:	moveq	r2, #1
   2cfe4:	movne	r2, #0
   2cfe8:	cmn	r7, #324	; 0x144
   2cfec:	movge	r3, #0
   2cff0:	movlt	r3, #1
   2cff4:	orrs	r3, r2, r3
   2cff8:	bne	2d154 <grisu3_diy_fp_encode_double@@Base+0x85c>
   2cffc:	movw	r3, #310	; 0x136
   2d000:	cmp	r7, r3
   2d004:	bgt	2d200 <grisu3_diy_fp_encode_double@@Base+0x908>
   2d008:	movw	r3, #65535	; 0xffff
   2d00c:	movt	r3, #31
   2d010:	cmp	r5, r3
   2d014:	mvn	r2, #0
   2d018:	cmpeq	r4, r2
   2d01c:	movls	r3, #1
   2d020:	movhi	r3, #0
   2d024:	cmp	r7, #22
   2d028:	movhi	r3, #0
   2d02c:	andls	r3, r3, #1
   2d030:	cmp	r3, #0
   2d034:	bne	2d4fc <grisu3_diy_fp_encode_double@@Base+0xc04>
   2d038:	mov	r3, sl
   2d03c:	mov	r2, r7
   2d040:	str	lr, [sp]
   2d044:	mov	r0, r4
   2d048:	mov	r1, r5
   2d04c:	str	r8, [sp, #4]
   2d050:	bl	2c8f8 <grisu3_diy_fp_encode_double@@Base>
   2d054:	cmp	r0, #0
   2d058:	bne	2d154 <grisu3_diy_fp_encode_double@@Base+0x85c>
   2d05c:	mov	r0, r9
   2d060:	add	r1, sp, #44	; 0x2c
   2d064:	bl	145b4 <strtod@plt>
   2d068:	ldr	r3, [sp, #44]	; 0x2c
   2d06c:	vstr	d0, [r8]
   2d070:	cmp	r6, r3
   2d074:	movcs	r6, r3
   2d078:	mov	r0, r6
   2d07c:	add	sp, sp, #52	; 0x34
   2d080:	ldrd	r4, [sp]
   2d084:	ldrd	r6, [sp, #8]
   2d088:	ldrd	r8, [sp, #16]
   2d08c:	ldrd	sl, [sp, #24]
   2d090:	add	sp, sp, #32
   2d094:	pop	{pc}		; (ldr pc, [sp], #4)
   2d098:	mov	r2, #0
   2d09c:	mov	r3, r0
   2d0a0:	str	r2, [sp, #20]
   2d0a4:	add	r7, r3, #1
   2d0a8:	cmp	ip, r7
   2d0ac:	beq	2d0e8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d0b0:	ldrb	r1, [r3, #1]
   2d0b4:	orr	r2, r1, #32
   2d0b8:	cmp	r2, #120	; 0x78
   2d0bc:	beq	2d220 <grisu3_diy_fp_encode_double@@Base+0x928>
   2d0c0:	cmp	r1, #48	; 0x30
   2d0c4:	addeq	r3, r3, #2
   2d0c8:	beq	2d0dc <grisu3_diy_fp_encode_double@@Base+0x7e4>
   2d0cc:	b	2d484 <grisu3_diy_fp_encode_double@@Base+0xb8c>
   2d0d0:	ldrb	r1, [r3], #1
   2d0d4:	cmp	r1, #48	; 0x30
   2d0d8:	bne	2d484 <grisu3_diy_fp_encode_double@@Base+0xb8c>
   2d0dc:	cmp	ip, r3
   2d0e0:	mov	r7, r3
   2d0e4:	bne	2d0d0 <grisu3_diy_fp_encode_double@@Base+0x7d8>
   2d0e8:	mov	r6, #0
   2d0ec:	b	2d078 <grisu3_diy_fp_encode_double@@Base+0x780>
   2d0f0:	cmp	r1, #52	; 0x34
   2d0f4:	sub	sl, r6, r7
   2d0f8:	movls	r3, #0
   2d0fc:	movhi	r3, #1
   2d100:	adds	r4, r4, r3
   2d104:	adc	r5, r5, #0
   2d108:	cmp	r1, #48	; 0x30
   2d10c:	movne	r7, r6
   2d110:	movne	lr, #1
   2d114:	bne	2d870 <grisu3_diy_fp_encode_double@@Base+0xf78>
   2d118:	add	r3, r6, #1
   2d11c:	mov	r7, #0
   2d120:	b	2d134 <grisu3_diy_fp_encode_double@@Base+0x83c>
   2d124:	ldrb	r1, [r3]
   2d128:	add	r3, r3, #1
   2d12c:	cmp	r1, #48	; 0x30
   2d130:	bne	2d1a0 <grisu3_diy_fp_encode_double@@Base+0x8a8>
   2d134:	cmp	r3, ip
   2d138:	mov	r6, r3
   2d13c:	add	r7, r7, #1
   2d140:	bne	2d124 <grisu3_diy_fp_encode_double@@Base+0x82c>
   2d144:	b	2d0e8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d148:	vldr	d6, [pc, #480]	; 2d330 <grisu3_diy_fp_encode_double@@Base+0xa38>
   2d14c:	vmul.f64	d7, d7, d6
   2d150:	vstr	d7, [r8]
   2d154:	ldr	r3, [sp, #20]
   2d158:	cmp	r3, #0
   2d15c:	beq	2d078 <grisu3_diy_fp_encode_double@@Base+0x780>
   2d160:	vldr	d7, [r8]
   2d164:	vneg.f64	d7, d7
   2d168:	vstr	d7, [r8]
   2d16c:	b	2d078 <grisu3_diy_fp_encode_double@@Base+0x780>
   2d170:	add	r3, r0, #1
   2d174:	cmp	ip, r3
   2d178:	beq	2d0e8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d17c:	ldrb	r4, [r0, #1]
   2d180:	cmp	r4, #48	; 0x30
   2d184:	beq	2d214 <grisu3_diy_fp_encode_double@@Base+0x91c>
   2d188:	sub	r2, r4, #49	; 0x31
   2d18c:	cmp	r2, #8
   2d190:	bhi	2d0e8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d194:	mov	r2, #1
   2d198:	str	r2, [sp, #20]
   2d19c:	b	2cf10 <grisu3_diy_fp_encode_double@@Base+0x618>
   2d1a0:	sub	r3, r1, #49	; 0x31
   2d1a4:	mov	lr, #1
   2d1a8:	cmp	r3, #8
   2d1ac:	bhi	2cfbc <grisu3_diy_fp_encode_double@@Base+0x6c4>
   2d1b0:	add	r3, r6, #1
   2d1b4:	add	lr, r7, #1
   2d1b8:	cmp	ip, r3
   2d1bc:	beq	2d0e8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d1c0:	ldrb	r1, [r6, #1]
   2d1c4:	sub	r2, r1, #48	; 0x30
   2d1c8:	cmp	r2, #9
   2d1cc:	bhi	2d854 <grisu3_diy_fp_encode_double@@Base+0xf5c>
   2d1d0:	sub	r8, r7, r6
   2d1d4:	add	r3, r6, #2
   2d1d8:	cmp	ip, r3
   2d1dc:	add	r7, r8, r3
   2d1e0:	mov	r6, r3
   2d1e4:	beq	2d0e8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d1e8:	ldrb	r1, [r3], #1
   2d1ec:	sub	r2, r1, #48	; 0x30
   2d1f0:	cmp	r2, #9
   2d1f4:	bls	2d1d8 <grisu3_diy_fp_encode_double@@Base+0x8e0>
   2d1f8:	mov	lr, #1
   2d1fc:	b	2cfbc <grisu3_diy_fp_encode_double@@Base+0x6c4>
   2d200:	mov	r2, #0
   2d204:	mov	r3, #0
   2d208:	movt	r3, #32752	; 0x7ff0
   2d20c:	strd	r2, [r8]
   2d210:	b	2d154 <grisu3_diy_fp_encode_double@@Base+0x85c>
   2d214:	mov	r2, #1
   2d218:	str	r2, [sp, #20]
   2d21c:	b	2d0a4 <grisu3_diy_fp_encode_double@@Base+0x7ac>
   2d220:	mov	r6, r0
   2d224:	b	2d078 <grisu3_diy_fp_encode_double@@Base+0x780>
   2d228:	ldrb	r9, [r6, #1]
   2d22c:	add	fp, r6, #1
   2d230:	sub	r3, r9, #48	; 0x30
   2d234:	cmp	r3, #9
   2d238:	bhi	2d0e8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d23c:	cmp	ip, fp
   2d240:	beq	2d0e8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d244:	add	r3, pc, #220	; 0xdc
   2d248:	ldrd	r2, [r3]
   2d24c:	cmp	r5, r3
   2d250:	cmpeq	r4, r2
   2d254:	bhi	2d860 <grisu3_diy_fp_encode_double@@Base+0xf68>
   2d258:	add	r7, r6, r7
   2d25c:	add	r6, r6, #2
   2d260:	strd	r2, [sp, #8]
   2d264:	add	r1, r7, #1
   2d268:	str	fp, [sp, #24]
   2d26c:	mov	fp, r6
   2d270:	str	r0, [sp, #28]
   2d274:	b	2d288 <grisu3_diy_fp_encode_double@@Base+0x990>
   2d278:	ldrd	r2, [sp, #8]
   2d27c:	cmp	r5, r3
   2d280:	cmpeq	r4, r2
   2d284:	bhi	2d814 <grisu3_diy_fp_encode_double@@Base+0xf1c>
   2d288:	lsl	r2, r5, #2
   2d28c:	mov	r8, fp
   2d290:	sub	r0, r1, fp
   2d294:	lsl	r3, r4, #2
   2d298:	orr	r2, r2, r4, lsr #30
   2d29c:	adds	r3, r3, r4
   2d2a0:	adc	r2, r2, r5
   2d2a4:	adds	r6, r3, r3
   2d2a8:	adc	r7, r2, r2
   2d2ac:	adds	r2, r6, r9
   2d2b0:	adc	r3, r7, #0
   2d2b4:	subs	r4, r2, #48	; 0x30
   2d2b8:	sbc	r5, r3, #0
   2d2bc:	cmp	ip, fp
   2d2c0:	beq	2d0e8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d2c4:	ldrb	r9, [fp]
   2d2c8:	add	fp, fp, #1
   2d2cc:	sub	r3, r9, #48	; 0x30
   2d2d0:	cmp	r3, #9
   2d2d4:	bls	2d278 <grisu3_diy_fp_encode_double@@Base+0x980>
   2d2d8:	ldr	fp, [sp, #24]
   2d2dc:	mov	r7, r0
   2d2e0:	ldr	r0, [sp, #28]
   2d2e4:	sub	fp, r8, fp
   2d2e8:	add	sl, sl, fp
   2d2ec:	ldrb	r1, [r8]
   2d2f0:	cmp	r1, #48	; 0x30
   2d2f4:	bne	2d490 <grisu3_diy_fp_encode_double@@Base+0xb98>
   2d2f8:	sub	r3, r7, r8
   2d2fc:	add	r8, r8, #1
   2d300:	b	2d310 <grisu3_diy_fp_encode_double@@Base+0xa18>
   2d304:	ldrb	r1, [r8], #1
   2d308:	cmp	r1, #48	; 0x30
   2d30c:	bne	2d494 <grisu3_diy_fp_encode_double@@Base+0xb9c>
   2d310:	cmp	ip, r8
   2d314:	add	r7, r3, r8
   2d318:	mov	r6, r8
   2d31c:	bne	2d304 <grisu3_diy_fp_encode_double@@Base+0xa0c>
   2d320:	b	2d0e8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d324:	nop	{0}
   2d328:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   2d32c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   2d330:	usatle	lr, #2, r0, asr #30
   2d334:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   2d338:	ldmvc	r5!, {r6, sl, fp, pc}
   2d33c:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   2d340:	addsvs	r3, r1, r0, lsl #26
   2d344:	mvnmi	r5, #228, 16	; 0xe40000
   2d348:	strbvs	ip, [lr, -r0, lsl #16]
   2d34c:			; <UNDEFINED> instruction: 0x43abc16d
   2d350:	ldrbhi	sl, [r8]
   2d354:	cmnmi	r6, #1459617792	; 0x57000000
   2d358:	strbcc	r8, [r0, r0]!
   2d35c:	movtmi	ip, #4985	; 0x1379
   2d360:	andeq	r0, r0, r0
   2d364:	sbcmi	r8, r3, r0, lsl #16
   2d368:	andeq	r0, r0, r0
   2d36c:	addmi	r4, pc, r0
   2d370:	andeq	r0, r0, r0
   2d374:	smlawbmi	lr, r0, r4, r8
   2d378:	andeq	r0, r0, r0
   2d37c:	orrsmi	sp, r7, r4, lsl #15
   2d380:	andcs	r0, r0, r0
   2d384:	andmi	sl, r2, #95	; 0x5f
   2d388:	andge	r0, r0, #0
   2d38c:	rsbmi	r1, sp, #148, 20	; 0x94000
   2d390:	cdpne	0, 9, cr0, cr0, cr0, {0}
   2d394:	sbcsmi	fp, r6, #196, 24	; 0xc400
   2d398:	ldrtcs	r0, [r4], -r0
   2d39c:	movwmi	r6, #52213	; 0xcbf5
   2d3a0:	strb	r0, [r0, #-0]
   2d3a4:	adcmi	r3, r2, #156	; 0x9c
   2d3a8:	stmda	r0, {}	; <UNPREDICTABLE>
   2d3ac:	eorsmi	r4, r7, #7733248	; 0x760000
   2d3b0:	andeq	r0, r0, r0
   2d3b4:	bicmi	ip, sp, r5, ror #26
   2d3b8:	andeq	r0, r0, r0
   2d3bc:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   2d3c0:	andeq	r0, r0, r0
   2d3c4:	rscsmi	r6, r8, r0, lsl #20
   2d3c8:	andeq	r0, r0, r0
   2d3cc:	subsmi	r0, r9, r0
   2d3d0:			; <UNDEFINED> instruction: 0x064dd592
   2d3d4:	strmi	pc, [r0], #207	; 0xcf
   2d3d8:	andeq	r0, r0, r0
   2d3dc:	eormi	r0, r4, r0
   2d3e0:	sub	r3, ip, r6
   2d3e4:	cmp	r3, #1
   2d3e8:	ble	2d0e8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d3ec:	ldrb	r8, [r6, #1]
   2d3f0:	cmp	r8, #43	; 0x2b
   2d3f4:	beq	2d7d8 <grisu3_diy_fp_encode_double@@Base+0xee0>
   2d3f8:	cmp	r8, #45	; 0x2d
   2d3fc:	beq	2d7fc <grisu3_diy_fp_encode_double@@Base+0xf04>
   2d400:	add	r2, r6, #1
   2d404:	mov	fp, #0
   2d408:	sub	r8, r8, #48	; 0x30
   2d40c:	uxtb	r3, r8
   2d410:	cmp	r3, #9
   2d414:	bhi	2d0e8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d418:	add	r6, r2, #1
   2d41c:	mov	r3, r8
   2d420:	cmp	ip, r6
   2d424:	beq	2d0e8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d428:	ldrb	r1, [r2, #1]
   2d42c:	sub	r9, r1, #48	; 0x30
   2d430:	cmp	r9, #9
   2d434:	bhi	2d4e8 <grisu3_diy_fp_encode_double@@Base+0xbf0>
   2d438:	add	r2, r2, #2
   2d43c:	add	r8, r3, r3, lsl #2
   2d440:	cmp	r3, #32768	; 0x8000
   2d444:	mov	r6, r2
   2d448:	addlt	r3, r1, r8, lsl #1
   2d44c:	sublt	r3, r3, #48	; 0x30
   2d450:	cmp	ip, r2
   2d454:	beq	2d7f0 <grisu3_diy_fp_encode_double@@Base+0xef8>
   2d458:	ldrb	r1, [r2]
   2d45c:	add	r2, r2, #1
   2d460:	sub	r8, r1, #48	; 0x30
   2d464:	cmp	r8, #9
   2d468:	bls	2d43c <grisu3_diy_fp_encode_double@@Base+0xb44>
   2d46c:	cmp	fp, #0
   2d470:	beq	2d4f4 <grisu3_diy_fp_encode_double@@Base+0xbfc>
   2d474:	cmp	ip, r6
   2d478:	sub	r7, r7, r3
   2d47c:	bne	2cfd4 <grisu3_diy_fp_encode_double@@Base+0x6dc>
   2d480:	b	2d0e8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d484:	mov	r4, #0
   2d488:	mov	r5, #0
   2d48c:	b	2cf28 <grisu3_diy_fp_encode_double@@Base+0x630>
   2d490:	mov	r6, r8
   2d494:	sub	r3, r1, #49	; 0x31
   2d498:	cmp	r3, #8
   2d49c:	bhi	2cfc4 <grisu3_diy_fp_encode_double@@Base+0x6cc>
   2d4a0:	add	r3, r6, #1
   2d4a4:	cmp	ip, r3
   2d4a8:	beq	2d0e8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d4ac:	ldrb	r1, [r6, #1]
   2d4b0:	sub	r2, r1, #48	; 0x30
   2d4b4:	cmp	r2, #9
   2d4b8:	bhi	2d868 <grisu3_diy_fp_encode_double@@Base+0xf70>
   2d4bc:	add	r3, r6, #2
   2d4c0:	cmp	ip, r3
   2d4c4:	mov	r6, r3
   2d4c8:	beq	2d0e8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d4cc:	ldrb	r1, [r3]
   2d4d0:	add	r3, r3, #1
   2d4d4:	sub	r2, r1, #48	; 0x30
   2d4d8:	cmp	r2, #9
   2d4dc:	bls	2d4c0 <grisu3_diy_fp_encode_double@@Base+0xbc8>
   2d4e0:	mov	lr, #1
   2d4e4:	b	2cfc4 <grisu3_diy_fp_encode_double@@Base+0x6cc>
   2d4e8:	cmp	fp, #0
   2d4ec:	subne	r7, r7, r8
   2d4f0:	bne	2cfd4 <grisu3_diy_fp_encode_double@@Base+0x6dc>
   2d4f4:	add	r7, r7, r3
   2d4f8:	b	2cfd4 <grisu3_diy_fp_encode_double@@Base+0x6dc>
   2d4fc:	mov	r0, r4
   2d500:	mov	r1, r5
   2d504:	bl	41d98 <flatcc_json_printer_clear@@Base+0x390>
   2d508:	sub	r3, r7, sl
   2d50c:	vmov	d7, r0, r1
   2d510:	add	r3, r3, #22
   2d514:	cmp	r3, #44	; 0x2c
   2d518:	ldrls	pc, [pc, r3, lsl #2]
   2d51c:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d520:			; <UNDEFINED> instruction: 0x0002d7b4
   2d524:	andeq	sp, r2, ip, asr #15
   2d528:	andeq	sp, r2, r0, asr #15
   2d52c:	andeq	sp, r2, r8, lsr #15
   2d530:	muleq	r2, ip, r7
   2d534:	muleq	r2, r0, r7
   2d538:	andeq	sp, r2, r4, lsl #15
   2d53c:	andeq	sp, r2, r8, ror r7
   2d540:	andeq	sp, r2, ip, ror #14
   2d544:	andeq	sp, r2, r0, ror #14
   2d548:	andeq	sp, r2, r4, asr r7
   2d54c:	andeq	sp, r2, r8, asr #14
   2d550:	andeq	sp, r2, ip, lsr r7
   2d554:	andeq	sp, r2, r0, lsr r7
   2d558:	andeq	sp, r2, r4, lsr #14
   2d55c:	andeq	sp, r2, r8, lsl r7
   2d560:	andeq	sp, r2, ip, lsl #14
   2d564:	andeq	sp, r2, r0, lsl #14
   2d568:	strdeq	sp, [r2], -r4
   2d56c:	andeq	sp, r2, r8, ror #13
   2d570:	ldrdeq	sp, [r2], -ip
   2d574:	ldrdeq	sp, [r2], -r0
   2d578:	andeq	sp, r2, r0, asr r1
   2d57c:			; <UNDEFINED> instruction: 0x0002d6b8
   2d580:	andeq	sp, r2, ip, lsr #13
   2d584:	andeq	sp, r2, r0, lsr #13
   2d588:	muleq	r2, r4, r6
   2d58c:	andeq	sp, r2, r8, lsl #13
   2d590:	andeq	sp, r2, ip, ror r6
   2d594:	andeq	sp, r2, r0, ror r6
   2d598:	andeq	sp, r2, r4, ror #12
   2d59c:	andeq	sp, r2, r8, asr r6
   2d5a0:	andeq	sp, r2, ip, asr #12
   2d5a4:	andeq	sp, r2, r0, asr #12
   2d5a8:	andeq	sp, r2, r4, lsr r6
   2d5ac:	andeq	sp, r2, r8, lsr #12
   2d5b0:	andeq	sp, r2, ip, lsl r6
   2d5b4:	andeq	sp, r2, r0, lsl r6
   2d5b8:	andeq	sp, r2, r4, lsl #12
   2d5bc:	strdeq	sp, [r2], -r8
   2d5c0:	andeq	sp, r2, ip, ror #11
   2d5c4:	andeq	sp, r2, r0, ror #11
   2d5c8:	ldrdeq	sp, [r2], -r4
   2d5cc:	andeq	sp, r2, r8, asr #2
   2d5d0:	andeq	sp, r2, r4, asr #13
   2d5d4:	vldr	d6, [pc, #-676]	; 2d338 <grisu3_diy_fp_encode_double@@Base+0xa40>
   2d5d8:	vmul.f64	d7, d7, d6
   2d5dc:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d5e0:	vldr	d6, [pc, #-680]	; 2d340 <grisu3_diy_fp_encode_double@@Base+0xa48>
   2d5e4:	vmul.f64	d7, d7, d6
   2d5e8:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d5ec:	vldr	d6, [pc, #-684]	; 2d348 <grisu3_diy_fp_encode_double@@Base+0xa50>
   2d5f0:	vmul.f64	d7, d7, d6
   2d5f4:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d5f8:	vldr	d6, [pc, #-688]	; 2d350 <grisu3_diy_fp_encode_double@@Base+0xa58>
   2d5fc:	vmul.f64	d7, d7, d6
   2d600:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d604:	vldr	d6, [pc, #-692]	; 2d358 <grisu3_diy_fp_encode_double@@Base+0xa60>
   2d608:	vmul.f64	d7, d7, d6
   2d60c:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d610:	vldr	d6, [pc, #-640]	; 2d398 <grisu3_diy_fp_encode_double@@Base+0xaa0>
   2d614:	vmul.f64	d7, d7, d6
   2d618:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d61c:	vldr	d6, [pc, #-660]	; 2d390 <grisu3_diy_fp_encode_double@@Base+0xa98>
   2d620:	vmul.f64	d7, d7, d6
   2d624:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d628:	vldr	d6, [pc, #-656]	; 2d3a0 <grisu3_diy_fp_encode_double@@Base+0xaa8>
   2d62c:	vmul.f64	d7, d7, d6
   2d630:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d634:	vldr	d6, [pc, #-692]	; 2d388 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2d638:	vmul.f64	d7, d7, d6
   2d63c:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d640:	vldr	d6, [pc, #-672]	; 2d3a8 <grisu3_diy_fp_encode_double@@Base+0xab0>
   2d644:	vmul.f64	d7, d7, d6
   2d648:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d64c:	vldr	d6, [pc, #-724]	; 2d380 <grisu3_diy_fp_encode_double@@Base+0xa88>
   2d650:	vmul.f64	d7, d7, d6
   2d654:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d658:	vldr	d6, [pc, #-688]	; 2d3b0 <grisu3_diy_fp_encode_double@@Base+0xab8>
   2d65c:	vmul.f64	d7, d7, d6
   2d660:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d664:	vldr	d6, [pc, #-756]	; 2d378 <grisu3_diy_fp_encode_double@@Base+0xa80>
   2d668:	vmul.f64	d7, d7, d6
   2d66c:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d670:	vldr	d6, [pc, #-704]	; 2d3b8 <grisu3_diy_fp_encode_double@@Base+0xac0>
   2d674:	vmul.f64	d7, d7, d6
   2d678:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d67c:	vldr	d6, [pc, #-788]	; 2d370 <grisu3_diy_fp_encode_double@@Base+0xa78>
   2d680:	vmul.f64	d7, d7, d6
   2d684:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d688:	vldr	d6, [pc, #-720]	; 2d3c0 <grisu3_diy_fp_encode_double@@Base+0xac8>
   2d68c:	vmul.f64	d7, d7, d6
   2d690:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d694:	vldr	d6, [pc, #-828]	; 2d360 <grisu3_diy_fp_encode_double@@Base+0xa68>
   2d698:	vmul.f64	d7, d7, d6
   2d69c:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d6a0:	vldr	d6, [pc, #-832]	; 2d368 <grisu3_diy_fp_encode_double@@Base+0xa70>
   2d6a4:	vmul.f64	d7, d7, d6
   2d6a8:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d6ac:	vldr	d6, [pc, #-748]	; 2d3c8 <grisu3_diy_fp_encode_double@@Base+0xad0>
   2d6b0:	vmul.f64	d7, d7, d6
   2d6b4:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d6b8:	vldr	d6, [pc, #-744]	; 2d3d8 <grisu3_diy_fp_encode_double@@Base+0xae0>
   2d6bc:	vmul.f64	d7, d7, d6
   2d6c0:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d6c4:	vldr	d6, [pc, #-764]	; 2d3d0 <grisu3_diy_fp_encode_double@@Base+0xad8>
   2d6c8:	vmul.f64	d7, d7, d6
   2d6cc:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d6d0:	vldr	d6, [pc, #-768]	; 2d3d8 <grisu3_diy_fp_encode_double@@Base+0xae0>
   2d6d4:	vdiv.f64	d7, d7, d6
   2d6d8:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d6dc:	vldr	d6, [pc, #-796]	; 2d3c8 <grisu3_diy_fp_encode_double@@Base+0xad0>
   2d6e0:	vdiv.f64	d7, d7, d6
   2d6e4:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d6e8:	vldr	d6, [pc, #-904]	; 2d368 <grisu3_diy_fp_encode_double@@Base+0xa70>
   2d6ec:	vdiv.f64	d7, d7, d6
   2d6f0:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d6f4:	vldr	d6, [pc, #-924]	; 2d360 <grisu3_diy_fp_encode_double@@Base+0xa68>
   2d6f8:	vdiv.f64	d7, d7, d6
   2d6fc:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d700:	vldr	d6, [pc, #-840]	; 2d3c0 <grisu3_diy_fp_encode_double@@Base+0xac8>
   2d704:	vdiv.f64	d7, d7, d6
   2d708:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d70c:	vldr	d6, [pc, #-932]	; 2d370 <grisu3_diy_fp_encode_double@@Base+0xa78>
   2d710:	vdiv.f64	d7, d7, d6
   2d714:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d718:	vldr	d6, [pc, #-872]	; 2d3b8 <grisu3_diy_fp_encode_double@@Base+0xac0>
   2d71c:	vdiv.f64	d7, d7, d6
   2d720:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d724:	vldr	d6, [pc, #-948]	; 2d378 <grisu3_diy_fp_encode_double@@Base+0xa80>
   2d728:	vdiv.f64	d7, d7, d6
   2d72c:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d730:	vldr	d6, [pc, #-904]	; 2d3b0 <grisu3_diy_fp_encode_double@@Base+0xab8>
   2d734:	vdiv.f64	d7, d7, d6
   2d738:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d73c:	vldr	d6, [pc, #-964]	; 2d380 <grisu3_diy_fp_encode_double@@Base+0xa88>
   2d740:	vdiv.f64	d7, d7, d6
   2d744:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d748:	vldr	d6, [pc, #-936]	; 2d3a8 <grisu3_diy_fp_encode_double@@Base+0xab0>
   2d74c:	vdiv.f64	d7, d7, d6
   2d750:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d754:	vldr	d6, [pc, #-980]	; 2d388 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2d758:	vdiv.f64	d7, d7, d6
   2d75c:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d760:	vldr	d6, [pc, #-968]	; 2d3a0 <grisu3_diy_fp_encode_double@@Base+0xaa8>
   2d764:	vdiv.f64	d7, d7, d6
   2d768:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d76c:	vldr	d6, [pc, #-996]	; 2d390 <grisu3_diy_fp_encode_double@@Base+0xa98>
   2d770:	vdiv.f64	d7, d7, d6
   2d774:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d778:	vldr	d6, [pc, #-1000]	; 2d398 <grisu3_diy_fp_encode_double@@Base+0xaa0>
   2d77c:	vdiv.f64	d7, d7, d6
   2d780:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d784:	vldr	d6, [pc, #244]	; 2d880 <grisu3_diy_fp_encode_double@@Base+0xf88>
   2d788:	vdiv.f64	d7, d7, d6
   2d78c:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d790:	vldr	d6, [pc, #240]	; 2d888 <grisu3_diy_fp_encode_double@@Base+0xf90>
   2d794:	vdiv.f64	d7, d7, d6
   2d798:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d79c:	vldr	d6, [pc, #236]	; 2d890 <grisu3_diy_fp_encode_double@@Base+0xf98>
   2d7a0:	vdiv.f64	d7, d7, d6
   2d7a4:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d7a8:	vldr	d6, [pc, #232]	; 2d898 <grisu3_diy_fp_encode_double@@Base+0xfa0>
   2d7ac:	vdiv.f64	d7, d7, d6
   2d7b0:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d7b4:	vldr	d6, [pc, #228]	; 2d8a0 <grisu3_diy_fp_encode_double@@Base+0xfa8>
   2d7b8:	vdiv.f64	d7, d7, d6
   2d7bc:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d7c0:	vldr	d6, [pc, #224]	; 2d8a8 <grisu3_diy_fp_encode_double@@Base+0xfb0>
   2d7c4:	vdiv.f64	d7, d7, d6
   2d7c8:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d7cc:	vldr	d6, [pc, #220]	; 2d8b0 <grisu3_diy_fp_encode_double@@Base+0xfb8>
   2d7d0:	vdiv.f64	d7, d7, d6
   2d7d4:	b	2d150 <grisu3_diy_fp_encode_double@@Base+0x858>
   2d7d8:	add	r2, r6, #2
   2d7dc:	cmp	ip, r2
   2d7e0:	beq	2d0e8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d7e4:	ldrb	r8, [r6, #2]
   2d7e8:	mov	fp, #0
   2d7ec:	b	2d408 <grisu3_diy_fp_encode_double@@Base+0xb10>
   2d7f0:	cmp	fp, #0
   2d7f4:	bne	2d474 <grisu3_diy_fp_encode_double@@Base+0xb7c>
   2d7f8:	b	2d0e8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d7fc:	add	r2, r6, #2
   2d800:	cmp	ip, r2
   2d804:	beq	2d0e8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d808:	ldrb	r8, [r6, #2]
   2d80c:	mov	fp, #1
   2d810:	b	2d408 <grisu3_diy_fp_encode_double@@Base+0xb10>
   2d814:	ldr	fp, [sp, #24]
   2d818:	mov	r7, r0
   2d81c:	ldr	r0, [sp, #28]
   2d820:	sub	fp, r8, fp
   2d824:	add	sl, sl, fp
   2d828:	cmp	lr, #0
   2d82c:	bne	2d2ec <grisu3_diy_fp_encode_double@@Base+0x9f4>
   2d830:	cmp	r9, #52	; 0x34
   2d834:	movls	r9, #0
   2d838:	movhi	r9, #1
   2d83c:	adds	r4, r4, r9
   2d840:	adc	r5, r5, #0
   2d844:	cmp	ip, r8
   2d848:	movne	lr, #1
   2d84c:	bne	2d2ec <grisu3_diy_fp_encode_double@@Base+0x9f4>
   2d850:	b	2d0e8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d854:	mov	r7, lr
   2d858:	mov	r6, r3
   2d85c:	b	2d1f8 <grisu3_diy_fp_encode_double@@Base+0x900>
   2d860:	mov	r8, fp
   2d864:	b	2d828 <grisu3_diy_fp_encode_double@@Base+0xf30>
   2d868:	mov	r6, r3
   2d86c:	b	2d4e0 <grisu3_diy_fp_encode_double@@Base+0xbe8>
   2d870:	mov	r6, r7
   2d874:	mov	r7, #0
   2d878:	b	2cfb0 <grisu3_diy_fp_encode_double@@Base+0x6b8>
   2d87c:	nop	{0}
   2d880:	strbcc	r8, [r0, r0]!
   2d884:	movtmi	ip, #4985	; 0x1379
   2d888:	ldrbhi	sl, [r8]
   2d88c:	cmnmi	r6, #1459617792	; 0x57000000
   2d890:	strbvs	ip, [lr, -r0, lsl #16]
   2d894:			; <UNDEFINED> instruction: 0x43abc16d
   2d898:	addsvs	r3, r1, r0, lsl #26
   2d89c:	mvnmi	r5, #228, 16	; 0xe40000
   2d8a0:			; <UNDEFINED> instruction: 0x064dd592
   2d8a4:	strmi	pc, [r0], #207	; 0xcf
   2d8a8:	ldmvc	r5!, {r6, sl, fp, pc}
   2d8ac:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   2d8b0:	usatle	lr, #2, r0, asr #30
   2d8b4:	strbmi	r1, [fp], #-2788	; 0xfffff51c

0002d8b8 <flatcc_json_parser_error_string@@Base>:
   2d8b8:	cmp	r0, #34	; 0x22
   2d8bc:	bhi	2d8d4 <flatcc_json_parser_error_string@@Base+0x1c>
   2d8c0:	movw	r3, #25720	; 0x6478
   2d8c4:	movt	r3, #4
   2d8c8:	add	r3, r3, r0, lsl #2
   2d8cc:	ldr	r0, [r3, #1476]	; 0x5c4
   2d8d0:	bx	lr
   2d8d4:	movw	r0, #24548	; 0x5fe4
   2d8d8:	movt	r0, #4
   2d8dc:	bx	lr

0002d8e0 <flatcc_json_parser_set_error@@Base>:
   2d8e0:	ldr	ip, [r0, #20]
   2d8e4:	cmp	ip, #0
   2d8e8:	bne	2d904 <flatcc_json_parser_set_error@@Base+0x24>
   2d8ec:	ldr	ip, [r0, #4]
   2d8f0:	str	r3, [r0, #20]
   2d8f4:	str	r1, [r0, #32]
   2d8f8:	sub	r1, r1, ip
   2d8fc:	add	r1, r1, #1
   2d900:	str	r1, [r0, #16]
   2d904:	mov	r0, r2
   2d908:	bx	lr

0002d90c <flatcc_json_parser_string_part@@Base>:
   2d90c:	cmp	r1, r2
   2d910:	push	{lr}		; (str lr, [sp, #-4]!)
   2d914:	mov	lr, r0
   2d918:	beq	2d9c0 <flatcc_json_parser_string_part@@Base+0xb4>
   2d91c:	ldrb	r3, [r1]
   2d920:	cmp	r3, #34	; 0x22
   2d924:	cmpne	r3, #31
   2d928:	movhi	ip, #1
   2d92c:	movls	ip, #0
   2d930:	cmp	r3, #92	; 0x5c
   2d934:	moveq	ip, #0
   2d938:	andne	ip, ip, #1
   2d93c:	cmp	ip, #0
   2d940:	beq	2d9dc <flatcc_json_parser_string_part@@Base+0xd0>
   2d944:	add	r1, r1, #1
   2d948:	cmp	r1, r2
   2d94c:	mov	r0, r1
   2d950:	beq	2d9c4 <flatcc_json_parser_string_part@@Base+0xb8>
   2d954:	ldrb	r3, [r1], #1
   2d958:	cmp	r3, #34	; 0x22
   2d95c:	cmpne	r3, #31
   2d960:	movhi	ip, #1
   2d964:	movls	ip, #0
   2d968:	cmp	r3, #92	; 0x5c
   2d96c:	moveq	ip, #0
   2d970:	andne	ip, ip, #1
   2d974:	cmp	ip, #0
   2d978:	bne	2d948 <flatcc_json_parser_string_part@@Base+0x3c>
   2d97c:	cmp	r3, #31
   2d980:	bls	2d988 <flatcc_json_parser_string_part@@Base+0x7c>
   2d984:	pop	{pc}		; (ldr pc, [sp], #4)
   2d988:	ldr	r3, [lr, #20]
   2d98c:	cmp	r3, #0
   2d990:	bne	2d9b8 <flatcc_json_parser_string_part@@Base+0xac>
   2d994:	ldr	r3, [lr, #4]
   2d998:	mov	r1, #17
   2d99c:	sub	r3, r0, r3
   2d9a0:	str	r1, [lr, #20]
   2d9a4:	add	r3, r3, #1
   2d9a8:	str	r3, [lr, #16]
   2d9ac:	str	r0, [lr, #32]
   2d9b0:	mov	r0, r2
   2d9b4:	pop	{pc}		; (ldr pc, [sp], #4)
   2d9b8:	mov	r0, r2
   2d9bc:	pop	{pc}		; (ldr pc, [sp], #4)
   2d9c0:	mov	r0, r2
   2d9c4:	ldr	r3, [lr, #20]
   2d9c8:	cmp	r3, #0
   2d9cc:	bne	2d9b8 <flatcc_json_parser_string_part@@Base+0xac>
   2d9d0:	mov	r1, #20
   2d9d4:	ldr	r3, [lr, #4]
   2d9d8:	b	2d99c <flatcc_json_parser_string_part@@Base+0x90>
   2d9dc:	mov	r0, r1
   2d9e0:	b	2d97c <flatcc_json_parser_string_part@@Base+0x70>

0002d9e4 <flatcc_json_parser_space_ext@@Base>:
   2d9e4:	cmp	r1, r2
   2d9e8:	beq	2daa0 <flatcc_json_parser_space_ext@@Base+0xbc>
   2d9ec:	ldrb	ip, [r1]
   2d9f0:	cmp	ip, #32
   2d9f4:	bne	2da20 <flatcc_json_parser_space_ext@@Base+0x3c>
   2d9f8:	add	r3, r1, #1
   2d9fc:	b	2da0c <flatcc_json_parser_space_ext@@Base+0x28>
   2da00:	ldrb	ip, [r3], #1
   2da04:	cmp	ip, #32
   2da08:	bne	2da20 <flatcc_json_parser_space_ext@@Base+0x3c>
   2da0c:	cmp	r3, r2
   2da10:	mov	r1, r3
   2da14:	bne	2da00 <flatcc_json_parser_space_ext@@Base+0x1c>
   2da18:	mov	r0, r1
   2da1c:	bx	lr
   2da20:	cmp	ip, #32
   2da24:	bhi	2da18 <flatcc_json_parser_space_ext@@Base+0x34>
   2da28:	sub	ip, ip, #9
   2da2c:	cmp	ip, #23
   2da30:	ldrls	pc, [pc, ip, lsl #2]
   2da34:	b	2db04 <flatcc_json_parser_space_ext@@Base+0x120>
   2da38:	strdeq	sp, [r2], -ip
   2da3c:	ldrdeq	sp, [r2], -r0
   2da40:	andeq	sp, r2, r4, lsl #22
   2da44:	andeq	sp, r2, r4, lsl #22
   2da48:	andeq	sp, r2, ip, lsr #21
   2da4c:	andeq	sp, r2, r4, lsl #22
   2da50:	andeq	sp, r2, r4, lsl #22
   2da54:	andeq	sp, r2, r4, lsl #22
   2da58:	andeq	sp, r2, r4, lsl #22
   2da5c:	andeq	sp, r2, r4, lsl #22
   2da60:	andeq	sp, r2, r4, lsl #22
   2da64:	andeq	sp, r2, r4, lsl #22
   2da68:	andeq	sp, r2, r4, lsl #22
   2da6c:	andeq	sp, r2, r4, lsl #22
   2da70:	andeq	sp, r2, r4, lsl #22
   2da74:	andeq	sp, r2, r4, lsl #22
   2da78:	andeq	sp, r2, r4, lsl #22
   2da7c:	andeq	sp, r2, r4, lsl #22
   2da80:	andeq	sp, r2, r4, lsl #22
   2da84:	andeq	sp, r2, r4, lsl #22
   2da88:	andeq	sp, r2, r4, lsl #22
   2da8c:	andeq	sp, r2, r4, lsl #22
   2da90:	andeq	sp, r2, r4, lsl #22
   2da94:	muleq	r2, r8, sl
   2da98:	cmp	r2, r1
   2da9c:	bne	2d9ec <flatcc_json_parser_space_ext@@Base+0x8>
   2daa0:	mov	r1, r2
   2daa4:	mov	r0, r1
   2daa8:	bx	lr
   2daac:	sub	r3, r2, r1
   2dab0:	add	ip, r1, #1
   2dab4:	cmp	r3, #1
   2dab8:	ble	2dac8 <flatcc_json_parser_space_ext@@Base+0xe4>
   2dabc:	ldrb	r3, [r1, #1]
   2dac0:	cmp	r3, #10
   2dac4:	addeq	ip, r1, #2
   2dac8:	mov	r1, ip
   2dacc:	b	2dad4 <flatcc_json_parser_space_ext@@Base+0xf0>
   2dad0:	add	r1, r1, #1
   2dad4:	ldr	r3, [r0, #12]
   2dad8:	str	r1, [r0, #4]
   2dadc:	add	r3, r3, #1
   2dae0:	str	r3, [r0, #12]
   2dae4:	cmp	r2, r1
   2dae8:	beq	2da18 <flatcc_json_parser_space_ext@@Base+0x34>
   2daec:	ldrb	ip, [r1]
   2daf0:	cmp	ip, #32
   2daf4:	bls	2da28 <flatcc_json_parser_space_ext@@Base+0x44>
   2daf8:	b	2da18 <flatcc_json_parser_space_ext@@Base+0x34>
   2dafc:	add	r1, r1, #1
   2db00:	b	2dae4 <flatcc_json_parser_space_ext@@Base+0x100>
   2db04:	ldr	r3, [r0, #20]
   2db08:	cmp	r3, #0
   2db0c:	bne	2daa0 <flatcc_json_parser_space_ext@@Base+0xbc>
   2db10:	ldr	r3, [r0, #4]
   2db14:	mov	ip, #5
   2db18:	str	r1, [r0, #32]
   2db1c:	str	ip, [r0, #20]
   2db20:	sub	r3, r1, r3
   2db24:	mov	r1, r2
   2db28:	add	r3, r3, #1
   2db2c:	str	r3, [r0, #16]
   2db30:	mov	r0, r1
   2db34:	bx	lr
   2db38:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2db3c:	mov	r5, r0
   2db40:	mov	ip, #0
   2db44:	strd	r6, [sp, #8]
   2db48:	mov	r4, r2
   2db4c:	strd	r8, [sp, #16]
   2db50:	mov	r8, r3
   2db54:	strd	sl, [sp, #24]
   2db58:	mov	sl, r1
   2db5c:	str	lr, [sp, #32]
   2db60:	sub	sp, sp, #28
   2db64:	ldrh	r0, [sp, #68]	; 0x44
   2db68:	ldr	r7, [sp, #64]	; 0x40
   2db6c:	str	r0, [sp, #12]
   2db70:	ldr	r0, [r5]
   2db74:	str	ip, [sp, #20]
   2db78:	bl	27228 <flatcc_builder_start_offset_vector@@Base>
   2db7c:	cmp	r0, #0
   2db80:	beq	2dbd8 <flatcc_json_parser_space_ext@@Base+0x1f4>
   2db84:	ldr	r3, [r5, #20]
   2db88:	cmp	r3, #0
   2db8c:	beq	2dbb4 <flatcc_json_parser_space_ext@@Base+0x1d0>
   2db90:	mov	fp, r4
   2db94:	mov	r0, fp
   2db98:	add	sp, sp, #28
   2db9c:	ldrd	r4, [sp]
   2dba0:	ldrd	r6, [sp, #8]
   2dba4:	ldrd	r8, [sp, #16]
   2dba8:	ldrd	sl, [sp, #24]
   2dbac:	add	sp, sp, #32
   2dbb0:	pop	{pc}		; (ldr pc, [sp], #4)
   2dbb4:	ldr	r2, [r5, #4]
   2dbb8:	mov	r1, #33	; 0x21
   2dbbc:	mov	fp, r4
   2dbc0:	str	sl, [r5, #32]
   2dbc4:	str	r1, [r5, #20]
   2dbc8:	sub	sl, sl, r2
   2dbcc:	add	sl, sl, #1
   2dbd0:	str	sl, [r5, #16]
   2dbd4:	b	2db94 <flatcc_json_parser_space_ext@@Base+0x1b0>
   2dbd8:	cmp	sl, r4
   2dbdc:	beq	2dbec <flatcc_json_parser_space_ext@@Base+0x208>
   2dbe0:	ldrb	r3, [sl]
   2dbe4:	cmp	r3, #91	; 0x5b
   2dbe8:	beq	2dc70 <flatcc_json_parser_space_ext@@Base+0x28c>
   2dbec:	ldr	r6, [r5, #20]
   2dbf0:	cmp	r6, #0
   2dbf4:	beq	2dc50 <flatcc_json_parser_space_ext@@Base+0x26c>
   2dbf8:	mov	r6, #0
   2dbfc:	cmp	r7, r6
   2dc00:	moveq	sl, r4
   2dc04:	bne	2db90 <flatcc_json_parser_space_ext@@Base+0x1ac>
   2dc08:	mov	r1, r8
   2dc0c:	ldr	r0, [r5]
   2dc10:	bl	25718 <flatcc_builder_get_user_frame_ptr@@Base>
   2dc14:	mov	r1, r0
   2dc18:	ldr	r0, [r5]
   2dc1c:	bl	28afc <flatcc_builder_end_offset_vector_for_unions@@Base>
   2dc20:	cmp	r0, #0
   2dc24:	str	r0, [sp, #20]
   2dc28:	beq	2db84 <flatcc_json_parser_space_ext@@Base+0x1a0>
   2dc2c:	ldr	r0, [r5]
   2dc30:	ldr	r1, [sp, #12]
   2dc34:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   2dc38:	cmp	r0, #0
   2dc3c:	beq	2db84 <flatcc_json_parser_space_ext@@Base+0x1a0>
   2dc40:	ldr	r2, [sp, #20]
   2dc44:	mov	fp, sl
   2dc48:	str	r2, [r0]
   2dc4c:	b	2db94 <flatcc_json_parser_space_ext@@Base+0x1b0>
   2dc50:	ldr	r3, [r5, #4]
   2dc54:	mov	r2, #22
   2dc58:	str	sl, [r5, #32]
   2dc5c:	str	r2, [r5, #20]
   2dc60:	sub	sl, sl, r3
   2dc64:	add	sl, sl, #1
   2dc68:	str	sl, [r5, #16]
   2dc6c:	b	2dbfc <flatcc_json_parser_space_ext@@Base+0x218>
   2dc70:	add	r9, sl, #1
   2dc74:	sub	r3, r4, r9
   2dc78:	cmp	r3, #1
   2dc7c:	ble	2dc90 <flatcc_json_parser_space_ext@@Base+0x2ac>
   2dc80:	ldrb	r1, [sl, #1]
   2dc84:	cmp	r1, #32
   2dc88:	bhi	2e2ac <flatcc_json_parser_space_ext@@Base+0x8c8>
   2dc8c:	beq	2e29c <flatcc_json_parser_space_ext@@Base+0x8b8>
   2dc90:	cmp	r4, r9
   2dc94:	beq	2dcc4 <flatcc_json_parser_space_ext@@Base+0x2e0>
   2dc98:	ldrb	r1, [r9]
   2dc9c:	cmp	r1, #32
   2dca0:	bne	2e134 <flatcc_json_parser_space_ext@@Base+0x750>
   2dca4:	add	r3, r9, #1
   2dca8:	b	2dcb8 <flatcc_json_parser_space_ext@@Base+0x2d4>
   2dcac:	ldrb	r1, [r3], #1
   2dcb0:	cmp	r1, #32
   2dcb4:	bne	2e134 <flatcc_json_parser_space_ext@@Base+0x750>
   2dcb8:	cmp	r4, r3
   2dcbc:	mov	r9, r3
   2dcc0:	bne	2dcac <flatcc_json_parser_space_ext@@Base+0x2c8>
   2dcc4:	cmp	r7, #0
   2dcc8:	beq	2df48 <flatcc_json_parser_space_ext@@Base+0x564>
   2dccc:	mov	r6, #0
   2dcd0:	add	sl, sp, #20
   2dcd4:	mov	r1, r8
   2dcd8:	ldr	r0, [r5]
   2dcdc:	bl	25718 <flatcc_builder_get_user_frame_ptr@@Base>
   2dce0:	ldrb	r3, [r0, r6]
   2dce4:	mov	r1, r9
   2dce8:	mov	r2, r4
   2dcec:	mov	r0, r5
   2dcf0:	str	sl, [sp]
   2dcf4:	ldr	ip, [sp, #72]	; 0x48
   2dcf8:	blx	ip
   2dcfc:	cmp	r4, r0
   2dd00:	mov	fp, r0
   2dd04:	beq	2db94 <flatcc_json_parser_space_ext@@Base+0x1b0>
   2dd08:	mov	r1, #1
   2dd0c:	ldr	r0, [r5]
   2dd10:	bl	2677c <flatcc_builder_extend_offset_vector@@Base>
   2dd14:	cmp	r0, #0
   2dd18:	beq	2e280 <flatcc_json_parser_space_ext@@Base+0x89c>
   2dd1c:	ldr	r2, [sp, #20]
   2dd20:	sub	r1, r4, fp
   2dd24:	cmp	r1, #1
   2dd28:	str	r2, [r0]
   2dd2c:	ble	2dd40 <flatcc_json_parser_space_ext@@Base+0x35c>
   2dd30:	ldrb	r2, [fp]
   2dd34:	cmp	r2, #32
   2dd38:	bhi	2dd60 <flatcc_json_parser_space_ext@@Base+0x37c>
   2dd3c:	beq	2dddc <flatcc_json_parser_space_ext@@Base+0x3f8>
   2dd40:	mov	r1, fp
   2dd44:	mov	r2, r4
   2dd48:	mov	r0, r5
   2dd4c:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   2dd50:	mov	fp, r0
   2dd54:	cmp	r4, fp
   2dd58:	beq	2dda0 <flatcc_json_parser_space_ext@@Base+0x3bc>
   2dd5c:	ldrb	r2, [fp]
   2dd60:	cmp	r2, #44	; 0x2c
   2dd64:	beq	2ddf0 <flatcc_json_parser_space_ext@@Base+0x40c>
   2dd68:	cmp	r2, #93	; 0x5d
   2dd6c:	add	r6, r6, #1
   2dd70:	beq	2dfc0 <flatcc_json_parser_space_ext@@Base+0x5dc>
   2dd74:	ldr	r2, [r5, #20]
   2dd78:	cmp	r2, #0
   2dd7c:	bne	2dbfc <flatcc_json_parser_space_ext@@Base+0x218>
   2dd80:	ldr	r2, [r5, #4]
   2dd84:	mov	r1, #9
   2dd88:	sub	r3, fp, r2
   2dd8c:	str	r1, [r5, #20]
   2dd90:	add	r3, r3, #1
   2dd94:	str	r3, [r5, #16]
   2dd98:	str	fp, [r5, #32]
   2dd9c:	b	2dbfc <flatcc_json_parser_space_ext@@Base+0x218>
   2dda0:	add	r6, r6, #1
   2dda4:	cmp	r7, r6
   2dda8:	beq	2e520 <flatcc_json_parser_space_ext@@Base+0xb3c>
   2ddac:	ldr	r2, [r5, #20]
   2ddb0:	cmp	r2, #0
   2ddb4:	bne	2db90 <flatcc_json_parser_space_ext@@Base+0x1ac>
   2ddb8:	ldr	r2, [r5, #4]
   2ddbc:	mov	r1, #30
   2ddc0:	str	r1, [r5, #20]
   2ddc4:	str	fp, [r5, #32]
   2ddc8:	sub	r2, fp, r2
   2ddcc:	mov	fp, r4
   2ddd0:	add	r2, r2, #1
   2ddd4:	str	r2, [r5, #16]
   2ddd8:	b	2db94 <flatcc_json_parser_space_ext@@Base+0x1b0>
   2dddc:	ldrb	r2, [fp, #1]
   2dde0:	cmp	r2, #32
   2dde4:	addhi	fp, fp, #1
   2dde8:	bls	2dd40 <flatcc_json_parser_space_ext@@Base+0x35c>
   2ddec:	b	2dd54 <flatcc_json_parser_space_ext@@Base+0x370>
   2ddf0:	add	r9, fp, #1
   2ddf4:	sub	r1, r4, r9
   2ddf8:	cmp	r1, #1
   2ddfc:	ble	2de10 <flatcc_json_parser_space_ext@@Base+0x42c>
   2de00:	ldrb	r1, [fp, #1]
   2de04:	cmp	r1, #32
   2de08:	bhi	2e128 <flatcc_json_parser_space_ext@@Base+0x744>
   2de0c:	beq	2e118 <flatcc_json_parser_space_ext@@Base+0x734>
   2de10:	cmp	r4, r9
   2de14:	beq	2de44 <flatcc_json_parser_space_ext@@Base+0x460>
   2de18:	ldrb	r1, [r9]
   2de1c:	cmp	r1, #32
   2de20:	bne	2de78 <flatcc_json_parser_space_ext@@Base+0x494>
   2de24:	add	r3, r9, #1
   2de28:	b	2de38 <flatcc_json_parser_space_ext@@Base+0x454>
   2de2c:	ldrb	r1, [r3], #1
   2de30:	cmp	r1, #32
   2de34:	bne	2de78 <flatcc_json_parser_space_ext@@Base+0x494>
   2de38:	cmp	r4, r3
   2de3c:	mov	r9, r3
   2de40:	bne	2de2c <flatcc_json_parser_space_ext@@Base+0x448>
   2de44:	ldr	r3, [r5, #20]
   2de48:	add	r6, r6, #1
   2de4c:	mov	r1, r6
   2de50:	cmp	r3, #0
   2de54:	bne	2dfb8 <flatcc_json_parser_space_ext@@Base+0x5d4>
   2de58:	ldr	r3, [r5, #4]
   2de5c:	mov	r1, #9
   2de60:	str	r1, [r5, #20]
   2de64:	str	r9, [r5, #32]
   2de68:	sub	r3, r9, r3
   2de6c:	add	r3, r3, #1
   2de70:	str	r3, [r5, #16]
   2de74:	b	2dbfc <flatcc_json_parser_space_ext@@Base+0x218>
   2de78:	cmp	r1, #32
   2de7c:	bhi	2df34 <flatcc_json_parser_space_ext@@Base+0x550>
   2de80:	sub	r1, r1, #9
   2de84:	cmp	r1, #23
   2de88:	ldrls	pc, [pc, r1, lsl #2]
   2de8c:	b	2df88 <flatcc_json_parser_space_ext@@Base+0x5a4>
   2de90:	andeq	sp, r2, r0, lsl #31
   2de94:	andeq	sp, r2, r8, ror pc
   2de98:	andeq	sp, r2, r8, lsl #31
   2de9c:	andeq	sp, r2, r8, lsl #31
   2dea0:	strdeq	sp, [r2], -r0
   2dea4:	andeq	sp, r2, r8, lsl #31
   2dea8:	andeq	sp, r2, r8, lsl #31
   2deac:	andeq	sp, r2, r8, lsl #31
   2deb0:	andeq	sp, r2, r8, lsl #31
   2deb4:	andeq	sp, r2, r8, lsl #31
   2deb8:	andeq	sp, r2, r8, lsl #31
   2debc:	andeq	sp, r2, r8, lsl #31
   2dec0:	andeq	sp, r2, r8, lsl #31
   2dec4:	andeq	sp, r2, r8, lsl #31
   2dec8:	andeq	sp, r2, r8, lsl #31
   2decc:	andeq	sp, r2, r8, lsl #31
   2ded0:	andeq	sp, r2, r8, lsl #31
   2ded4:	andeq	sp, r2, r8, lsl #31
   2ded8:	andeq	sp, r2, r8, lsl #31
   2dedc:	andeq	sp, r2, r8, lsl #31
   2dee0:	andeq	sp, r2, r8, lsl #31
   2dee4:	andeq	sp, r2, r8, lsl #31
   2dee8:	andeq	sp, r2, r8, lsl #31
   2deec:	andeq	sp, r2, r0, lsl lr
   2def0:	sub	r3, r4, r9
   2def4:	add	r1, r9, #1
   2def8:	cmp	r3, #1
   2defc:	ble	2df0c <flatcc_json_parser_space_ext@@Base+0x528>
   2df00:	ldrb	r3, [r9, #1]
   2df04:	cmp	r3, #10
   2df08:	addeq	r1, r9, #2
   2df0c:	mov	r9, r1
   2df10:	ldr	r3, [r5, #12]
   2df14:	str	r9, [r5, #4]
   2df18:	add	r3, r3, #1
   2df1c:	str	r3, [r5, #12]
   2df20:	cmp	r4, r9
   2df24:	beq	2de44 <flatcc_json_parser_space_ext@@Base+0x460>
   2df28:	ldrb	r1, [r9]
   2df2c:	cmp	r1, #32
   2df30:	bls	2de80 <flatcc_json_parser_space_ext@@Base+0x49c>
   2df34:	cmp	r1, #93	; 0x5d
   2df38:	add	r6, r6, #1
   2df3c:	beq	2e2b8 <flatcc_json_parser_space_ext@@Base+0x8d4>
   2df40:	cmp	r7, r6
   2df44:	bne	2dcd4 <flatcc_json_parser_space_ext@@Base+0x2f0>
   2df48:	ldr	r3, [r5, #20]
   2df4c:	cmp	r3, #0
   2df50:	bne	2db90 <flatcc_json_parser_space_ext@@Base+0x1ac>
   2df54:	ldr	r1, [r5, #4]
   2df58:	mov	r0, #30
   2df5c:	mov	fp, r4
   2df60:	str	r0, [r5, #20]
   2df64:	str	r9, [r5, #32]
   2df68:	sub	r2, r9, r1
   2df6c:	add	r2, r2, #1
   2df70:	str	r2, [r5, #16]
   2df74:	b	2db94 <flatcc_json_parser_space_ext@@Base+0x1b0>
   2df78:	add	r9, r9, #1
   2df7c:	b	2df10 <flatcc_json_parser_space_ext@@Base+0x52c>
   2df80:	add	r9, r9, #1
   2df84:	b	2df20 <flatcc_json_parser_space_ext@@Base+0x53c>
   2df88:	ldr	r3, [r5, #20]
   2df8c:	cmp	r3, #0
   2df90:	addne	r1, r6, #1
   2df94:	bne	2dfb8 <flatcc_json_parser_space_ext@@Base+0x5d4>
   2df98:	ldr	r3, [r5, #4]
   2df9c:	mov	r0, #5
   2dfa0:	add	r1, r6, #1
   2dfa4:	str	r0, [r5, #20]
   2dfa8:	str	r9, [r5, #32]
   2dfac:	sub	r2, r9, r3
   2dfb0:	add	r2, r2, #1
   2dfb4:	str	r2, [r5, #16]
   2dfb8:	mov	r6, r1
   2dfbc:	b	2dbfc <flatcc_json_parser_space_ext@@Base+0x218>
   2dfc0:	add	r1, fp, #1
   2dfc4:	sub	r2, r4, r1
   2dfc8:	cmp	r2, #1
   2dfcc:	ble	2dfe0 <flatcc_json_parser_space_ext@@Base+0x5fc>
   2dfd0:	ldrb	r2, [fp, #1]
   2dfd4:	cmp	r2, #32
   2dfd8:	bhi	2e014 <flatcc_json_parser_space_ext@@Base+0x630>
   2dfdc:	beq	2e288 <flatcc_json_parser_space_ext@@Base+0x8a4>
   2dfe0:	cmp	r4, r1
   2dfe4:	beq	2e014 <flatcc_json_parser_space_ext@@Base+0x630>
   2dfe8:	ldrb	r2, [r1]
   2dfec:	cmp	r2, #32
   2dff0:	bne	2e01c <flatcc_json_parser_space_ext@@Base+0x638>
   2dff4:	add	r3, r1, #1
   2dff8:	b	2e008 <flatcc_json_parser_space_ext@@Base+0x624>
   2dffc:	ldrb	r2, [r3], #1
   2e000:	cmp	r2, #32
   2e004:	bne	2e01c <flatcc_json_parser_space_ext@@Base+0x638>
   2e008:	cmp	r3, r4
   2e00c:	mov	r1, r3
   2e010:	bne	2dffc <flatcc_json_parser_space_ext@@Base+0x618>
   2e014:	mov	fp, r1
   2e018:	b	2dda4 <flatcc_json_parser_space_ext@@Base+0x3c0>
   2e01c:	cmp	r2, #32
   2e020:	bhi	2e014 <flatcc_json_parser_space_ext@@Base+0x630>
   2e024:	sub	r2, r2, #9
   2e028:	cmp	r2, #23
   2e02c:	ldrls	pc, [pc, r2, lsl #2]
   2e030:	b	2e0ec <flatcc_json_parser_space_ext@@Base+0x708>
   2e034:	andeq	lr, r2, r4, ror #1
   2e038:	ldrdeq	lr, [r2], -ip
   2e03c:	andeq	lr, r2, ip, ror #1
   2e040:	andeq	lr, r2, ip, ror #1
   2e044:	muleq	r2, r4, r0
   2e048:	andeq	lr, r2, ip, ror #1
   2e04c:	andeq	lr, r2, ip, ror #1
   2e050:	andeq	lr, r2, ip, ror #1
   2e054:	andeq	lr, r2, ip, ror #1
   2e058:	andeq	lr, r2, ip, ror #1
   2e05c:	andeq	lr, r2, ip, ror #1
   2e060:	andeq	lr, r2, ip, ror #1
   2e064:	andeq	lr, r2, ip, ror #1
   2e068:	andeq	lr, r2, ip, ror #1
   2e06c:	andeq	lr, r2, ip, ror #1
   2e070:	andeq	lr, r2, ip, ror #1
   2e074:	andeq	lr, r2, ip, ror #1
   2e078:	andeq	lr, r2, ip, ror #1
   2e07c:	andeq	lr, r2, ip, ror #1
   2e080:	andeq	lr, r2, ip, ror #1
   2e084:	andeq	lr, r2, ip, ror #1
   2e088:	andeq	lr, r2, ip, ror #1
   2e08c:	andeq	lr, r2, ip, ror #1
   2e090:	andeq	sp, r2, r0, ror #31
   2e094:	sub	r3, r4, r1
   2e098:	add	r2, r1, #1
   2e09c:	cmp	r3, #1
   2e0a0:	ble	2e0b0 <flatcc_json_parser_space_ext@@Base+0x6cc>
   2e0a4:	ldrb	r3, [r1, #1]
   2e0a8:	cmp	r3, #10
   2e0ac:	addeq	r2, r1, #2
   2e0b0:	mov	r1, r2
   2e0b4:	ldr	r3, [r5, #12]
   2e0b8:	str	r1, [r5, #4]
   2e0bc:	add	r3, r3, #1
   2e0c0:	str	r3, [r5, #12]
   2e0c4:	cmp	r4, r1
   2e0c8:	beq	2e420 <flatcc_json_parser_space_ext@@Base+0xa3c>
   2e0cc:	ldrb	r2, [r1]
   2e0d0:	cmp	r2, #32
   2e0d4:	bls	2e024 <flatcc_json_parser_space_ext@@Base+0x640>
   2e0d8:	b	2e014 <flatcc_json_parser_space_ext@@Base+0x630>
   2e0dc:	add	r1, r1, #1
   2e0e0:	b	2e0b4 <flatcc_json_parser_space_ext@@Base+0x6d0>
   2e0e4:	add	r1, r1, #1
   2e0e8:	b	2e0c4 <flatcc_json_parser_space_ext@@Base+0x6e0>
   2e0ec:	ldr	r3, [r5, #20]
   2e0f0:	cmp	r3, #0
   2e0f4:	bne	2dbfc <flatcc_json_parser_space_ext@@Base+0x218>
   2e0f8:	ldr	r3, [r5, #4]
   2e0fc:	mov	r2, #5
   2e100:	str	r1, [r5, #32]
   2e104:	str	r2, [r5, #20]
   2e108:	sub	r1, r1, r3
   2e10c:	add	r1, r1, #1
   2e110:	str	r1, [r5, #16]
   2e114:	b	2dbfc <flatcc_json_parser_space_ext@@Base+0x218>
   2e118:	ldrb	r1, [fp, #2]
   2e11c:	cmp	r1, #32
   2e120:	addhi	r9, fp, #2
   2e124:	bls	2de10 <flatcc_json_parser_space_ext@@Base+0x42c>
   2e128:	cmp	r4, r9
   2e12c:	bne	2df34 <flatcc_json_parser_space_ext@@Base+0x550>
   2e130:	b	2de44 <flatcc_json_parser_space_ext@@Base+0x460>
   2e134:	cmp	r1, #32
   2e138:	bhi	2e1f8 <flatcc_json_parser_space_ext@@Base+0x814>
   2e13c:	sub	r1, r1, #9
   2e140:	cmp	r1, #23
   2e144:	ldrls	pc, [pc, r1, lsl #2]
   2e148:	b	2e264 <flatcc_json_parser_space_ext@@Base+0x880>
   2e14c:	andeq	lr, r2, ip, asr r2
   2e150:	ldrdeq	lr, [r2], -r0
   2e154:	andeq	lr, r2, r4, ror #4
   2e158:	andeq	lr, r2, r4, ror #4
   2e15c:	andeq	lr, r2, ip, lsr #3
   2e160:	andeq	lr, r2, r4, ror #4
   2e164:	andeq	lr, r2, r4, ror #4
   2e168:	andeq	lr, r2, r4, ror #4
   2e16c:	andeq	lr, r2, r4, ror #4
   2e170:	andeq	lr, r2, r4, ror #4
   2e174:	andeq	lr, r2, r4, ror #4
   2e178:	andeq	lr, r2, r4, ror #4
   2e17c:	andeq	lr, r2, r4, ror #4
   2e180:	andeq	lr, r2, r4, ror #4
   2e184:	andeq	lr, r2, r4, ror #4
   2e188:	andeq	lr, r2, r4, ror #4
   2e18c:	andeq	lr, r2, r4, ror #4
   2e190:	andeq	lr, r2, r4, ror #4
   2e194:	andeq	lr, r2, r4, ror #4
   2e198:	andeq	lr, r2, r4, ror #4
   2e19c:	andeq	lr, r2, r4, ror #4
   2e1a0:	andeq	lr, r2, r4, ror #4
   2e1a4:	andeq	lr, r2, r4, ror #4
   2e1a8:	muleq	r2, r0, ip
   2e1ac:	sub	r3, r4, r9
   2e1b0:	add	r1, r9, #1
   2e1b4:	cmp	r3, #1
   2e1b8:	ble	2e1c8 <flatcc_json_parser_space_ext@@Base+0x7e4>
   2e1bc:	ldrb	r3, [r9, #1]
   2e1c0:	cmp	r3, #10
   2e1c4:	addeq	r1, r9, #2
   2e1c8:	mov	r9, r1
   2e1cc:	b	2e1d4 <flatcc_json_parser_space_ext@@Base+0x7f0>
   2e1d0:	add	r9, r9, #1
   2e1d4:	ldr	r3, [r5, #12]
   2e1d8:	str	r9, [r5, #4]
   2e1dc:	add	r3, r3, #1
   2e1e0:	str	r3, [r5, #12]
   2e1e4:	cmp	r4, r9
   2e1e8:	beq	2dcc4 <flatcc_json_parser_space_ext@@Base+0x2e0>
   2e1ec:	ldrb	r1, [r9]
   2e1f0:	cmp	r1, #32
   2e1f4:	bls	2e13c <flatcc_json_parser_space_ext@@Base+0x758>
   2e1f8:	cmp	r1, #93	; 0x5d
   2e1fc:	bne	2dcc4 <flatcc_json_parser_space_ext@@Base+0x2e0>
   2e200:	add	fp, r9, #1
   2e204:	sub	r1, r4, fp
   2e208:	cmp	r1, #1
   2e20c:	ble	2e220 <flatcc_json_parser_space_ext@@Base+0x83c>
   2e210:	ldrb	r1, [r9, #1]
   2e214:	cmp	r1, #32
   2e218:	bhi	2e254 <flatcc_json_parser_space_ext@@Base+0x870>
   2e21c:	beq	2e508 <flatcc_json_parser_space_ext@@Base+0xb24>
   2e220:	cmp	r4, fp
   2e224:	beq	2e254 <flatcc_json_parser_space_ext@@Base+0x870>
   2e228:	ldrb	r1, [fp]
   2e22c:	cmp	r1, #32
   2e230:	bne	2e428 <flatcc_json_parser_space_ext@@Base+0xa44>
   2e234:	add	r2, fp, #1
   2e238:	b	2e248 <flatcc_json_parser_space_ext@@Base+0x864>
   2e23c:	ldrb	r1, [r2], #1
   2e240:	cmp	r1, #32
   2e244:	bne	2e428 <flatcc_json_parser_space_ext@@Base+0xa44>
   2e248:	cmp	r2, r4
   2e24c:	mov	fp, r2
   2e250:	bne	2e23c <flatcc_json_parser_space_ext@@Base+0x858>
   2e254:	mov	r6, #0
   2e258:	b	2dda4 <flatcc_json_parser_space_ext@@Base+0x3c0>
   2e25c:	add	r9, r9, #1
   2e260:	b	2e1e4 <flatcc_json_parser_space_ext@@Base+0x800>
   2e264:	ldr	r3, [r5, #20]
   2e268:	cmp	r3, #0
   2e26c:	beq	2e3e8 <flatcc_json_parser_space_ext@@Base+0xa04>
   2e270:	cmp	r7, #0
   2e274:	beq	2db90 <flatcc_json_parser_space_ext@@Base+0x1ac>
   2e278:	mov	r9, r4
   2e27c:	b	2dccc <flatcc_json_parser_space_ext@@Base+0x2e8>
   2e280:	mov	sl, fp
   2e284:	b	2db84 <flatcc_json_parser_space_ext@@Base+0x1a0>
   2e288:	ldrb	r2, [fp, #2]
   2e28c:	cmp	r2, #32
   2e290:	addhi	fp, fp, #2
   2e294:	bls	2dfe0 <flatcc_json_parser_space_ext@@Base+0x5fc>
   2e298:	b	2dda4 <flatcc_json_parser_space_ext@@Base+0x3c0>
   2e29c:	ldrb	r1, [sl, #2]
   2e2a0:	cmp	r1, #32
   2e2a4:	addhi	r9, sl, #2
   2e2a8:	bls	2dc90 <flatcc_json_parser_space_ext@@Base+0x2ac>
   2e2ac:	cmp	r4, r9
   2e2b0:	bne	2e1f8 <flatcc_json_parser_space_ext@@Base+0x814>
   2e2b4:	b	2dcc4 <flatcc_json_parser_space_ext@@Base+0x2e0>
   2e2b8:	add	fp, r9, #1
   2e2bc:	sub	r1, r4, fp
   2e2c0:	cmp	r1, #1
   2e2c4:	ble	2e2e8 <flatcc_json_parser_space_ext@@Base+0x904>
   2e2c8:	ldrb	r1, [r9, #1]
   2e2cc:	cmp	r1, #32
   2e2d0:	bhi	2dda4 <flatcc_json_parser_space_ext@@Base+0x3c0>
   2e2d4:	bne	2e2e8 <flatcc_json_parser_space_ext@@Base+0x904>
   2e2d8:	ldrb	r1, [r9, #2]
   2e2dc:	cmp	r1, #32
   2e2e0:	addhi	fp, r9, #2
   2e2e4:	bhi	2dda4 <flatcc_json_parser_space_ext@@Base+0x3c0>
   2e2e8:	cmp	r4, fp
   2e2ec:	beq	2dda4 <flatcc_json_parser_space_ext@@Base+0x3c0>
   2e2f0:	ldrb	r1, [fp]
   2e2f4:	cmp	r1, #32
   2e2f8:	bne	2e318 <flatcc_json_parser_space_ext@@Base+0x934>
   2e2fc:	add	r2, fp, #1
   2e300:	cmp	r2, r4
   2e304:	mov	fp, r2
   2e308:	beq	2dda4 <flatcc_json_parser_space_ext@@Base+0x3c0>
   2e30c:	ldrb	r1, [r2], #1
   2e310:	cmp	r1, #32
   2e314:	beq	2e300 <flatcc_json_parser_space_ext@@Base+0x91c>
   2e318:	cmp	r1, #32
   2e31c:	bhi	2dda4 <flatcc_json_parser_space_ext@@Base+0x3c0>
   2e320:	sub	r1, r1, #9
   2e324:	cmp	r1, #23
   2e328:	ldrls	pc, [pc, r1, lsl #2]
   2e32c:	b	2e408 <flatcc_json_parser_space_ext@@Base+0xa24>
   2e330:	andeq	lr, r2, r0, ror #7
   2e334:	ldrdeq	lr, [r2], -r8
   2e338:	andeq	lr, r2, r8, lsl #8
   2e33c:	andeq	lr, r2, r8, lsl #8
   2e340:	muleq	r2, r0, r3
   2e344:	andeq	lr, r2, r8, lsl #8
   2e348:	andeq	lr, r2, r8, lsl #8
   2e34c:	andeq	lr, r2, r8, lsl #8
   2e350:	andeq	lr, r2, r8, lsl #8
   2e354:	andeq	lr, r2, r8, lsl #8
   2e358:	andeq	lr, r2, r8, lsl #8
   2e35c:	andeq	lr, r2, r8, lsl #8
   2e360:	andeq	lr, r2, r8, lsl #8
   2e364:	andeq	lr, r2, r8, lsl #8
   2e368:	andeq	lr, r2, r8, lsl #8
   2e36c:	andeq	lr, r2, r8, lsl #8
   2e370:	andeq	lr, r2, r8, lsl #8
   2e374:	andeq	lr, r2, r8, lsl #8
   2e378:	andeq	lr, r2, r8, lsl #8
   2e37c:	andeq	lr, r2, r8, lsl #8
   2e380:	andeq	lr, r2, r8, lsl #8
   2e384:	andeq	lr, r2, r8, lsl #8
   2e388:	andeq	lr, r2, r8, lsl #8
   2e38c:	andeq	lr, r2, r8, ror #5
   2e390:	sub	r2, r4, fp
   2e394:	add	r1, fp, #1
   2e398:	cmp	r2, #1
   2e39c:	ble	2e3ac <flatcc_json_parser_space_ext@@Base+0x9c8>
   2e3a0:	ldrb	r2, [fp, #1]
   2e3a4:	cmp	r2, #10
   2e3a8:	addeq	r1, fp, #2
   2e3ac:	mov	fp, r1
   2e3b0:	ldr	r2, [r5, #12]
   2e3b4:	str	fp, [r5, #4]
   2e3b8:	add	r2, r2, #1
   2e3bc:	str	r2, [r5, #12]
   2e3c0:	cmp	r4, fp
   2e3c4:	beq	2dda4 <flatcc_json_parser_space_ext@@Base+0x3c0>
   2e3c8:	ldrb	r1, [fp]
   2e3cc:	cmp	r1, #32
   2e3d0:	bls	2e320 <flatcc_json_parser_space_ext@@Base+0x93c>
   2e3d4:	b	2dda4 <flatcc_json_parser_space_ext@@Base+0x3c0>
   2e3d8:	add	fp, fp, #1
   2e3dc:	b	2e3b0 <flatcc_json_parser_space_ext@@Base+0x9cc>
   2e3e0:	add	fp, fp, #1
   2e3e4:	b	2e3c0 <flatcc_json_parser_space_ext@@Base+0x9dc>
   2e3e8:	ldr	r3, [r5, #4]
   2e3ec:	mov	r1, #5
   2e3f0:	str	r1, [r5, #20]
   2e3f4:	str	r9, [r5, #32]
   2e3f8:	sub	r3, r9, r3
   2e3fc:	add	r3, r3, #1
   2e400:	str	r3, [r5, #16]
   2e404:	b	2e270 <flatcc_json_parser_space_ext@@Base+0x88c>
   2e408:	ldr	r2, [r5, #20]
   2e40c:	cmp	r2, #0
   2e410:	bne	2dbfc <flatcc_json_parser_space_ext@@Base+0x218>
   2e414:	mov	r1, #5
   2e418:	ldr	r2, [r5, #4]
   2e41c:	b	2dd88 <flatcc_json_parser_space_ext@@Base+0x3a4>
   2e420:	mov	fp, r4
   2e424:	b	2dda4 <flatcc_json_parser_space_ext@@Base+0x3c0>
   2e428:	cmp	r1, #32
   2e42c:	bhi	2e254 <flatcc_json_parser_space_ext@@Base+0x870>
   2e430:	sub	r1, r1, #9
   2e434:	cmp	r1, #23
   2e438:	ldrls	pc, [pc, r1, lsl #2]
   2e43c:	b	2e4f8 <flatcc_json_parser_space_ext@@Base+0xb14>
   2e440:	strdeq	lr, [r2], -r0
   2e444:	andeq	lr, r2, r8, ror #9
   2e448:	strdeq	lr, [r2], -r8
   2e44c:	strdeq	lr, [r2], -r8
   2e450:	andeq	lr, r2, r0, lsr #9
   2e454:	strdeq	lr, [r2], -r8
   2e458:	strdeq	lr, [r2], -r8
   2e45c:	strdeq	lr, [r2], -r8
   2e460:	strdeq	lr, [r2], -r8
   2e464:	strdeq	lr, [r2], -r8
   2e468:	strdeq	lr, [r2], -r8
   2e46c:	strdeq	lr, [r2], -r8
   2e470:	strdeq	lr, [r2], -r8
   2e474:	strdeq	lr, [r2], -r8
   2e478:	strdeq	lr, [r2], -r8
   2e47c:	strdeq	lr, [r2], -r8
   2e480:	strdeq	lr, [r2], -r8
   2e484:	strdeq	lr, [r2], -r8
   2e488:	strdeq	lr, [r2], -r8
   2e48c:	strdeq	lr, [r2], -r8
   2e490:	strdeq	lr, [r2], -r8
   2e494:	strdeq	lr, [r2], -r8
   2e498:	strdeq	lr, [r2], -r8
   2e49c:	andeq	lr, r2, r0, lsr #4
   2e4a0:	sub	r2, r4, fp
   2e4a4:	add	r1, fp, #1
   2e4a8:	cmp	r2, #1
   2e4ac:	ble	2e4bc <flatcc_json_parser_space_ext@@Base+0xad8>
   2e4b0:	ldrb	r2, [fp, #1]
   2e4b4:	cmp	r2, #10
   2e4b8:	addeq	r1, fp, #2
   2e4bc:	mov	fp, r1
   2e4c0:	ldr	r2, [r5, #12]
   2e4c4:	str	fp, [r5, #4]
   2e4c8:	add	r2, r2, #1
   2e4cc:	str	r2, [r5, #12]
   2e4d0:	cmp	r4, fp
   2e4d4:	beq	2e254 <flatcc_json_parser_space_ext@@Base+0x870>
   2e4d8:	ldrb	r1, [fp]
   2e4dc:	cmp	r1, #32
   2e4e0:	bls	2e430 <flatcc_json_parser_space_ext@@Base+0xa4c>
   2e4e4:	b	2e254 <flatcc_json_parser_space_ext@@Base+0x870>
   2e4e8:	add	fp, fp, #1
   2e4ec:	b	2e4c0 <flatcc_json_parser_space_ext@@Base+0xadc>
   2e4f0:	add	fp, fp, #1
   2e4f4:	b	2e4d0 <flatcc_json_parser_space_ext@@Base+0xaec>
   2e4f8:	ldr	r6, [r5, #20]
   2e4fc:	cmp	r6, #0
   2e500:	bne	2dbf8 <flatcc_json_parser_space_ext@@Base+0x214>
   2e504:	b	2e414 <flatcc_json_parser_space_ext@@Base+0xa30>
   2e508:	ldrb	r1, [r9, #2]
   2e50c:	cmp	r1, #32
   2e510:	addhi	fp, r9, #2
   2e514:	movhi	r6, #0
   2e518:	bls	2e220 <flatcc_json_parser_space_ext@@Base+0x83c>
   2e51c:	b	2dda4 <flatcc_json_parser_space_ext@@Base+0x3c0>
   2e520:	mov	sl, fp
   2e524:	b	2dc08 <flatcc_json_parser_space_ext@@Base+0x224>

0002e528 <flatcc_json_parser_string_escape@@Base>:
   2e528:	sub	ip, r2, r1
   2e52c:	strd	r4, [sp, #-12]!
   2e530:	cmp	ip, #1
   2e534:	str	lr, [sp, #8]
   2e538:	ble	2e548 <flatcc_json_parser_string_escape@@Base+0x20>
   2e53c:	ldrb	lr, [r1]
   2e540:	cmp	lr, #92	; 0x5c
   2e544:	beq	2e588 <flatcc_json_parser_string_escape@@Base+0x60>
   2e548:	mov	ip, #0
   2e54c:	strb	ip, [r3]
   2e550:	ldr	r3, [r0, #20]
   2e554:	cmp	r3, ip
   2e558:	bne	2e578 <flatcc_json_parser_string_escape@@Base+0x50>
   2e55c:	ldr	r3, [r0, #4]
   2e560:	mov	ip, #18
   2e564:	str	ip, [r0, #20]
   2e568:	str	r1, [r0, #32]
   2e56c:	sub	r3, r1, r3
   2e570:	add	r3, r3, #1
   2e574:	str	r3, [r0, #16]
   2e578:	ldrd	r4, [sp]
   2e57c:	add	sp, sp, #8
   2e580:	mov	r0, r2
   2e584:	pop	{pc}		; (ldr pc, [sp], #4)
   2e588:	ldrb	lr, [r1, #1]
   2e58c:	sub	lr, lr, #34	; 0x22
   2e590:	cmp	lr, #86	; 0x56
   2e594:	ldrls	pc, [pc, lr, lsl #2]
   2e598:	b	2e548 <flatcc_json_parser_string_escape@@Base+0x20>
   2e59c:	andeq	lr, r2, r0, lsl #15
   2e5a0:	andeq	lr, r2, r8, asr #10
   2e5a4:	andeq	lr, r2, r8, asr #10
   2e5a8:	andeq	lr, r2, r8, asr #10
   2e5ac:	andeq	lr, r2, r8, asr #10
   2e5b0:	andeq	lr, r2, r8, asr #10
   2e5b4:	andeq	lr, r2, r8, asr #10
   2e5b8:	andeq	lr, r2, r8, asr #10
   2e5bc:	andeq	lr, r2, r8, asr #10
   2e5c0:	andeq	lr, r2, r8, asr #10
   2e5c4:	andeq	lr, r2, r8, asr #10
   2e5c8:	andeq	lr, r2, r8, asr #10
   2e5cc:	andeq	lr, r2, r8, asr #10
   2e5d0:	muleq	r2, r8, r7
   2e5d4:	andeq	lr, r2, r8, asr #10
   2e5d8:	andeq	lr, r2, r8, asr #10
   2e5dc:	andeq	lr, r2, r8, asr #10
   2e5e0:	andeq	lr, r2, r8, asr #10
   2e5e4:	andeq	lr, r2, r8, asr #10
   2e5e8:	andeq	lr, r2, r8, asr #10
   2e5ec:	andeq	lr, r2, r8, asr #10
   2e5f0:	andeq	lr, r2, r8, asr #10
   2e5f4:	andeq	lr, r2, r8, asr #10
   2e5f8:	andeq	lr, r2, r8, asr #10
   2e5fc:	andeq	lr, r2, r8, asr #10
   2e600:	andeq	lr, r2, r8, asr #10
   2e604:	andeq	lr, r2, r8, asr #10
   2e608:	andeq	lr, r2, r8, asr #10
   2e60c:	andeq	lr, r2, r8, asr #10
   2e610:	andeq	lr, r2, r8, asr #10
   2e614:	andeq	lr, r2, r8, asr #10
   2e618:	andeq	lr, r2, r8, asr #10
   2e61c:	andeq	lr, r2, r8, asr #10
   2e620:	andeq	lr, r2, r8, asr #10
   2e624:	andeq	lr, r2, r8, asr #10
   2e628:	andeq	lr, r2, r8, asr #10
   2e62c:	andeq	lr, r2, r8, asr #10
   2e630:	andeq	lr, r2, r8, asr #10
   2e634:	andeq	lr, r2, r8, asr #10
   2e638:	andeq	lr, r2, r8, asr #10
   2e63c:	andeq	lr, r2, r8, asr #10
   2e640:	andeq	lr, r2, r8, asr #10
   2e644:	andeq	lr, r2, r8, asr #10
   2e648:	andeq	lr, r2, r8, asr #10
   2e64c:	andeq	lr, r2, r8, asr #10
   2e650:	andeq	lr, r2, r8, asr #10
   2e654:	andeq	lr, r2, r8, asr #10
   2e658:	andeq	lr, r2, r8, asr #10
   2e65c:	andeq	lr, r2, r8, asr #10
   2e660:	andeq	lr, r2, r8, asr #10
   2e664:	andeq	lr, r2, r8, asr #10
   2e668:	andeq	lr, r2, r8, asr #10
   2e66c:	andeq	lr, r2, r8, asr #10
   2e670:	andeq	lr, r2, r8, asr #10
   2e674:	andeq	lr, r2, r8, asr #10
   2e678:	andeq	lr, r2, r8, asr #10
   2e67c:	andeq	lr, r2, r8, asr #10
   2e680:	andeq	lr, r2, r8, asr #10
   2e684:			; <UNDEFINED> instruction: 0x0002e7b0
   2e688:	andeq	lr, r2, r8, asr #10
   2e68c:	andeq	lr, r2, r8, asr #10
   2e690:	andeq	lr, r2, r8, asr #10
   2e694:	andeq	lr, r2, r8, asr #10
   2e698:	andeq	lr, r2, r8, asr #10
   2e69c:	andeq	lr, r2, r8, asr #15
   2e6a0:	andeq	lr, r2, r8, asr #10
   2e6a4:	andeq	lr, r2, r8, asr #10
   2e6a8:	andeq	lr, r2, r8, asr #10
   2e6ac:	andeq	lr, r2, r0, ror #15
   2e6b0:	andeq	lr, r2, r8, asr #10
   2e6b4:	andeq	lr, r2, r8, asr #10
   2e6b8:	andeq	lr, r2, r8, asr #10
   2e6bc:	andeq	lr, r2, r8, asr #10
   2e6c0:	andeq	lr, r2, r8, asr #10
   2e6c4:	andeq	lr, r2, r8, asr #10
   2e6c8:	andeq	lr, r2, r8, asr #10
   2e6cc:	strdeq	lr, [r2], -r8
   2e6d0:	andeq	lr, r2, r8, asr #10
   2e6d4:	andeq	lr, r2, r8, asr #10
   2e6d8:	andeq	lr, r2, r8, asr #10
   2e6dc:	andeq	lr, r2, r0, lsl r8
   2e6e0:	andeq	lr, r2, r8, asr #10
   2e6e4:	andeq	lr, r2, r8, lsr #16
   2e6e8:	andeq	lr, r2, r0, asr #16
   2e6ec:	andeq	lr, r2, r8, asr #10
   2e6f0:	andeq	lr, r2, r8, asr #10
   2e6f4:	strdeq	lr, [r2], -r8
   2e6f8:	mov	lr, #1
   2e6fc:	cmp	ip, #3
   2e700:	strb	lr, [r3]
   2e704:	ble	2e910 <flatcc_json_parser_string_escape@@Base+0x3e8>
   2e708:	ldrb	ip, [r1, #2]
   2e70c:	sub	lr, ip, #48	; 0x30
   2e710:	uxtb	r4, lr
   2e714:	cmp	r4, #9
   2e718:	lslls	ip, lr, #4
   2e71c:	uxtbls	ip, ip
   2e720:	bls	2e740 <flatcc_json_parser_string_escape@@Base+0x218>
   2e724:	orr	ip, ip, #32
   2e728:	sub	lr, ip, #97	; 0x61
   2e72c:	cmp	lr, #5
   2e730:	bhi	2e548 <flatcc_json_parser_string_escape@@Base+0x20>
   2e734:	sub	ip, ip, #87	; 0x57
   2e738:	lsl	ip, ip, #4
   2e73c:	uxtb	ip, ip
   2e740:	ldrb	lr, [r1, #3]
   2e744:	sub	r4, lr, #48	; 0x30
   2e748:	uxtb	r4, r4
   2e74c:	cmp	r4, #9
   2e750:	orrls	ip, r4, ip
   2e754:	bls	2e774 <flatcc_json_parser_string_escape@@Base+0x24c>
   2e758:	orr	lr, lr, #32
   2e75c:	sub	r4, lr, #97	; 0x61
   2e760:	cmp	r4, #5
   2e764:	bhi	2e548 <flatcc_json_parser_string_escape@@Base+0x20>
   2e768:	sub	lr, lr, #87	; 0x57
   2e76c:	orr	ip, lr, ip
   2e770:	uxtb	ip, ip
   2e774:	add	r2, r1, #4
   2e778:	strb	ip, [r3, #1]
   2e77c:	b	2e578 <flatcc_json_parser_string_escape@@Base+0x50>
   2e780:	mov	ip, #1
   2e784:	mov	r0, #34	; 0x22
   2e788:	add	r2, r1, #2
   2e78c:	strb	ip, [r3]
   2e790:	strb	r0, [r3, #1]
   2e794:	b	2e578 <flatcc_json_parser_string_escape@@Base+0x50>
   2e798:	mov	ip, #1
   2e79c:	mov	r0, #47	; 0x2f
   2e7a0:	add	r2, r1, #2
   2e7a4:	strb	ip, [r3]
   2e7a8:	strb	r0, [r3, #1]
   2e7ac:	b	2e578 <flatcc_json_parser_string_escape@@Base+0x50>
   2e7b0:	mov	ip, #1
   2e7b4:	mov	r0, #92	; 0x5c
   2e7b8:	add	r2, r1, #2
   2e7bc:	strb	ip, [r3]
   2e7c0:	strb	r0, [r3, #1]
   2e7c4:	b	2e578 <flatcc_json_parser_string_escape@@Base+0x50>
   2e7c8:	mov	ip, #1
   2e7cc:	mov	r0, #8
   2e7d0:	add	r2, r1, #2
   2e7d4:	strb	ip, [r3]
   2e7d8:	strb	r0, [r3, #1]
   2e7dc:	b	2e578 <flatcc_json_parser_string_escape@@Base+0x50>
   2e7e0:	mov	ip, #1
   2e7e4:	mov	r0, #12
   2e7e8:	add	r2, r1, #2
   2e7ec:	strb	ip, [r3]
   2e7f0:	strb	r0, [r3, #1]
   2e7f4:	b	2e578 <flatcc_json_parser_string_escape@@Base+0x50>
   2e7f8:	mov	ip, #1
   2e7fc:	mov	r0, #10
   2e800:	add	r2, r1, #2
   2e804:	strb	ip, [r3]
   2e808:	strb	r0, [r3, #1]
   2e80c:	b	2e578 <flatcc_json_parser_string_escape@@Base+0x50>
   2e810:	mov	ip, #1
   2e814:	mov	r0, #13
   2e818:	add	r2, r1, #2
   2e81c:	strb	ip, [r3]
   2e820:	strb	r0, [r3, #1]
   2e824:	b	2e578 <flatcc_json_parser_string_escape@@Base+0x50>
   2e828:	mov	ip, #1
   2e82c:	mov	r0, #9
   2e830:	add	r2, r1, #2
   2e834:	strb	ip, [r3]
   2e838:	strb	r0, [r3, #1]
   2e83c:	b	2e578 <flatcc_json_parser_string_escape@@Base+0x50>
   2e840:	cmp	ip, #5
   2e844:	ble	2e548 <flatcc_json_parser_string_escape@@Base+0x20>
   2e848:	ldrb	ip, [r1, #2]
   2e84c:	sub	lr, ip, #48	; 0x30
   2e850:	uxtb	r4, lr
   2e854:	cmp	r4, #9
   2e858:	lslls	ip, lr, #12
   2e85c:	uxthls	ip, ip
   2e860:	bls	2e880 <flatcc_json_parser_string_escape@@Base+0x358>
   2e864:	orr	ip, ip, #32
   2e868:	sub	lr, ip, #97	; 0x61
   2e86c:	cmp	lr, #5
   2e870:	bhi	2e548 <flatcc_json_parser_string_escape@@Base+0x20>
   2e874:	sub	ip, ip, #87	; 0x57
   2e878:	lsl	ip, ip, #12
   2e87c:	and	ip, ip, #61440	; 0xf000
   2e880:	ldrb	lr, [r1, #3]
   2e884:	sub	r4, lr, #48	; 0x30
   2e888:	uxtb	r5, r4
   2e88c:	cmp	r5, #9
   2e890:	bhi	2e944 <flatcc_json_parser_string_escape@@Base+0x41c>
   2e894:	uxth	r4, r4
   2e898:	orr	ip, ip, r4, lsl #8
   2e89c:	sxth	ip, ip
   2e8a0:	ldrb	lr, [r1, #4]
   2e8a4:	sub	r4, lr, #48	; 0x30
   2e8a8:	uxtb	r5, r4
   2e8ac:	cmp	r5, #9
   2e8b0:	bhi	2e968 <flatcc_json_parser_string_escape@@Base+0x440>
   2e8b4:	orr	ip, ip, r4, lsl #4
   2e8b8:	uxth	ip, ip
   2e8bc:	ldrb	lr, [r1, #5]
   2e8c0:	sub	r4, lr, #48	; 0x30
   2e8c4:	uxtb	r5, r4
   2e8c8:	cmp	r5, #9
   2e8cc:	orrls	r2, ip, r4
   2e8d0:	uxthls	r2, r2
   2e8d4:	bls	2e8f4 <flatcc_json_parser_string_escape@@Base+0x3cc>
   2e8d8:	orr	lr, lr, #32
   2e8dc:	sub	r4, lr, #97	; 0x61
   2e8e0:	cmp	r4, #5
   2e8e4:	bhi	2e548 <flatcc_json_parser_string_escape@@Base+0x20>
   2e8e8:	sub	r2, lr, #87	; 0x57
   2e8ec:	orr	r2, ip, r2
   2e8f0:	uxth	r2, r2
   2e8f4:	cmp	r2, #127	; 0x7f
   2e8f8:	bhi	2e988 <flatcc_json_parser_string_escape@@Base+0x460>
   2e8fc:	mov	r0, #1
   2e900:	strb	r0, [r3]
   2e904:	strb	r2, [r3, #1]
   2e908:	add	r2, r1, #6
   2e90c:	b	2e578 <flatcc_json_parser_string_escape@@Base+0x50>
   2e910:	mov	ip, #0
   2e914:	strb	ip, [r3]
   2e918:	ldr	r3, [r0, #20]
   2e91c:	cmp	r3, ip
   2e920:	bne	2e578 <flatcc_json_parser_string_escape@@Base+0x50>
   2e924:	ldr	r3, [r0, #4]
   2e928:	mov	ip, #18
   2e92c:	str	ip, [r0, #20]
   2e930:	str	r1, [r0, #32]
   2e934:	sub	r3, r1, r3
   2e938:	add	r3, r3, lr
   2e93c:	str	r3, [r0, #16]
   2e940:	b	2e578 <flatcc_json_parser_string_escape@@Base+0x50>
   2e944:	orr	lr, lr, #32
   2e948:	sub	r4, lr, #97	; 0x61
   2e94c:	cmp	r4, #5
   2e950:	bhi	2e548 <flatcc_json_parser_string_escape@@Base+0x20>
   2e954:	sub	lr, lr, #87	; 0x57
   2e958:	uxth	lr, lr
   2e95c:	orr	ip, ip, lr, lsl #8
   2e960:	sxth	ip, ip
   2e964:	b	2e8a0 <flatcc_json_parser_string_escape@@Base+0x378>
   2e968:	orr	lr, lr, #32
   2e96c:	sub	r4, lr, #97	; 0x61
   2e970:	cmp	r4, #5
   2e974:	bhi	2e548 <flatcc_json_parser_string_escape@@Base+0x20>
   2e978:	sub	lr, lr, #87	; 0x57
   2e97c:	orr	ip, ip, lr, lsl #4
   2e980:	uxth	ip, ip
   2e984:	b	2e8bc <flatcc_json_parser_string_escape@@Base+0x394>
   2e988:	and	r0, r2, #63	; 0x3f
   2e98c:	cmp	r2, #2048	; 0x800
   2e990:	lsr	ip, r2, #6
   2e994:	orr	r0, r0, #128	; 0x80
   2e998:	mvn	lr, #127	; 0x7f
   2e99c:	bcs	2e9bc <flatcc_json_parser_string_escape@@Base+0x494>
   2e9a0:	mvn	ip, ip, lsl #26
   2e9a4:	mov	r2, #2
   2e9a8:	mvn	ip, ip, lsr #26
   2e9ac:	strb	r2, [r3]
   2e9b0:	strb	r0, [r3, #2]
   2e9b4:	strb	ip, [r3, #1]
   2e9b8:	b	2e908 <flatcc_json_parser_string_escape@@Base+0x3e0>
   2e9bc:	mvn	r4, #31
   2e9c0:	and	ip, ip, #63	; 0x3f
   2e9c4:	strb	r0, [r3, #3]
   2e9c8:	orr	r2, r4, r2, lsr #12
   2e9cc:	orr	ip, lr, ip
   2e9d0:	mov	r0, #3
   2e9d4:	strb	r0, [r3]
   2e9d8:	strb	r2, [r3, #1]
   2e9dc:	strb	ip, [r3, #2]
   2e9e0:	b	2e908 <flatcc_json_parser_string_escape@@Base+0x3e0>

0002e9e4 <flatcc_json_parser_skip_constant@@Base>:
   2e9e4:	cmp	r1, r2
   2e9e8:	beq	2ebc8 <flatcc_json_parser_skip_constant@@Base+0x1e4>
   2e9ec:	push	{lr}		; (str lr, [sp, #-4]!)
   2e9f0:	ldrb	r3, [r1]
   2e9f4:	sub	ip, r3, #95	; 0x5f
   2e9f8:	clz	ip, ip
   2e9fc:	lsr	ip, ip, #5
   2ea00:	orrs	ip, ip, r3, lsr #7
   2ea04:	bne	2ea8c <flatcc_json_parser_skip_constant@@Base+0xa8>
   2ea08:	sub	ip, r3, #48	; 0x30
   2ea0c:	cmp	r3, #46	; 0x2e
   2ea10:	cmpne	ip, #9
   2ea14:	bls	2ea8c <flatcc_json_parser_skip_constant@@Base+0xa8>
   2ea18:	orr	ip, r3, #32
   2ea1c:	sub	ip, ip, #97	; 0x61
   2ea20:	cmp	ip, #25
   2ea24:	bls	2ea8c <flatcc_json_parser_skip_constant@@Base+0xa8>
   2ea28:	sub	ip, r2, r1
   2ea2c:	cmp	ip, #1
   2ea30:	ble	2ea40 <flatcc_json_parser_skip_constant@@Base+0x5c>
   2ea34:	cmp	r3, #32
   2ea38:	bhi	2ebb8 <flatcc_json_parser_skip_constant@@Base+0x1d4>
   2ea3c:	beq	2ea80 <flatcc_json_parser_skip_constant@@Base+0x9c>
   2ea40:	cmp	r2, r1
   2ea44:	beq	2ebc0 <flatcc_json_parser_skip_constant@@Base+0x1dc>
   2ea48:	mov	lr, r1
   2ea4c:	ldrb	r3, [lr]
   2ea50:	cmp	r3, #32
   2ea54:	bne	2eaa4 <flatcc_json_parser_skip_constant@@Base+0xc0>
   2ea58:	add	ip, lr, #1
   2ea5c:	b	2ea6c <flatcc_json_parser_skip_constant@@Base+0x88>
   2ea60:	ldrb	r3, [ip], #1
   2ea64:	cmp	r3, #32
   2ea68:	bne	2eaa4 <flatcc_json_parser_skip_constant@@Base+0xc0>
   2ea6c:	cmp	r2, ip
   2ea70:	mov	lr, ip
   2ea74:	bne	2ea60 <flatcc_json_parser_skip_constant@@Base+0x7c>
   2ea78:	mov	r2, lr
   2ea7c:	b	2ebb4 <flatcc_json_parser_skip_constant@@Base+0x1d0>
   2ea80:	ldrb	r3, [r1, #1]
   2ea84:	cmp	r3, #32
   2ea88:	bls	2ea40 <flatcc_json_parser_skip_constant@@Base+0x5c>
   2ea8c:	add	ip, r1, #1
   2ea90:	cmp	r2, ip
   2ea94:	beq	2ebb4 <flatcc_json_parser_skip_constant@@Base+0x1d0>
   2ea98:	ldrb	r3, [r1, #1]
   2ea9c:	mov	r1, ip
   2eaa0:	b	2e9f4 <flatcc_json_parser_skip_constant@@Base+0x10>
   2eaa4:	cmp	r3, #32
   2eaa8:	bhi	2eb6c <flatcc_json_parser_skip_constant@@Base+0x188>
   2eaac:	sub	r3, r3, #9
   2eab0:	cmp	r3, #23
   2eab4:	ldrls	pc, [pc, r3, lsl #2]
   2eab8:	b	2eb8c <flatcc_json_parser_skip_constant@@Base+0x1a8>
   2eabc:	andeq	lr, r2, r4, lsl #23
   2eac0:	andeq	lr, r2, ip, ror fp
   2eac4:	andeq	lr, r2, ip, lsl #23
   2eac8:	andeq	lr, r2, ip, lsl #23
   2eacc:	andeq	lr, r2, r8, lsr #22
   2ead0:	andeq	lr, r2, ip, lsl #23
   2ead4:	andeq	lr, r2, ip, lsl #23
   2ead8:	andeq	lr, r2, ip, lsl #23
   2eadc:	andeq	lr, r2, ip, lsl #23
   2eae0:	andeq	lr, r2, ip, lsl #23
   2eae4:	andeq	lr, r2, ip, lsl #23
   2eae8:	andeq	lr, r2, ip, lsl #23
   2eaec:	andeq	lr, r2, ip, lsl #23
   2eaf0:	andeq	lr, r2, ip, lsl #23
   2eaf4:	andeq	lr, r2, ip, lsl #23
   2eaf8:	andeq	lr, r2, ip, lsl #23
   2eafc:	andeq	lr, r2, ip, lsl #23
   2eb00:	andeq	lr, r2, ip, lsl #23
   2eb04:	andeq	lr, r2, ip, lsl #23
   2eb08:	andeq	lr, r2, ip, lsl #23
   2eb0c:	andeq	lr, r2, ip, lsl #23
   2eb10:	andeq	lr, r2, ip, lsl #23
   2eb14:	andeq	lr, r2, ip, lsl #23
   2eb18:	andeq	lr, r2, ip, lsl fp
   2eb1c:	cmp	r2, lr
   2eb20:	bne	2ea4c <flatcc_json_parser_skip_constant@@Base+0x68>
   2eb24:	b	2ea78 <flatcc_json_parser_skip_constant@@Base+0x94>
   2eb28:	sub	r3, r2, lr
   2eb2c:	add	ip, lr, #1
   2eb30:	cmp	r3, #1
   2eb34:	ble	2eb44 <flatcc_json_parser_skip_constant@@Base+0x160>
   2eb38:	ldrb	r3, [lr, #1]
   2eb3c:	cmp	r3, #10
   2eb40:	addeq	ip, lr, #2
   2eb44:	mov	lr, ip
   2eb48:	ldr	r3, [r0, #12]
   2eb4c:	str	lr, [r0, #4]
   2eb50:	add	r3, r3, #1
   2eb54:	str	r3, [r0, #12]
   2eb58:	cmp	r2, lr
   2eb5c:	beq	2ebb4 <flatcc_json_parser_skip_constant@@Base+0x1d0>
   2eb60:	ldrb	r3, [lr]
   2eb64:	cmp	r3, #32
   2eb68:	bls	2eaac <flatcc_json_parser_skip_constant@@Base+0xc8>
   2eb6c:	cmp	lr, r1
   2eb70:	beq	2ebb8 <flatcc_json_parser_skip_constant@@Base+0x1d4>
   2eb74:	mov	r1, lr
   2eb78:	b	2e9f4 <flatcc_json_parser_skip_constant@@Base+0x10>
   2eb7c:	add	lr, lr, #1
   2eb80:	b	2eb48 <flatcc_json_parser_skip_constant@@Base+0x164>
   2eb84:	add	lr, lr, #1
   2eb88:	b	2eb58 <flatcc_json_parser_skip_constant@@Base+0x174>
   2eb8c:	ldr	r3, [r0, #20]
   2eb90:	cmp	r3, #0
   2eb94:	bne	2ebb4 <flatcc_json_parser_skip_constant@@Base+0x1d0>
   2eb98:	ldr	r3, [r0, #4]
   2eb9c:	mov	r1, #5
   2eba0:	str	lr, [r0, #32]
   2eba4:	str	r1, [r0, #20]
   2eba8:	sub	lr, lr, r3
   2ebac:	add	lr, lr, #1
   2ebb0:	str	lr, [r0, #16]
   2ebb4:	mov	r1, r2
   2ebb8:	mov	r0, r1
   2ebbc:	pop	{pc}		; (ldr pc, [sp], #4)
   2ebc0:	mov	lr, r2
   2ebc4:	b	2ea78 <flatcc_json_parser_skip_constant@@Base+0x94>
   2ebc8:	mov	r0, r1
   2ebcc:	bx	lr

0002ebd0 <flatcc_json_parser_match_constant@@Base>:
   2ebd0:	sub	ip, r2, r1
   2ebd4:	cmp	ip, r3
   2ebd8:	ble	2ec3c <flatcc_json_parser_match_constant@@Base+0x6c>
   2ebdc:	ldrb	ip, [r1, r3]
   2ebe0:	add	r3, r1, r3
   2ebe4:	cmp	ip, #32
   2ebe8:	beq	2ec54 <flatcc_json_parser_match_constant@@Base+0x84>
   2ebec:	cmp	ip, #34	; 0x22
   2ebf0:	beq	2ecbc <flatcc_json_parser_match_constant@@Base+0xec>
   2ebf4:	cmp	ip, #92	; 0x5c
   2ebf8:	bne	2ec3c <flatcc_json_parser_match_constant@@Base+0x6c>
   2ebfc:	ldr	ip, [sp]
   2ec00:	mov	r1, #0
   2ec04:	str	r1, [ip]
   2ec08:	ldr	r1, [r0, #20]
   2ec0c:	cmp	r1, #0
   2ec10:	movne	r3, r2
   2ec14:	bne	2ec4c <flatcc_json_parser_match_constant@@Base+0x7c>
   2ec18:	ldr	r1, [r0, #4]
   2ec1c:	mov	ip, #18
   2ec20:	str	ip, [r0, #20]
   2ec24:	str	r3, [r0, #32]
   2ec28:	sub	r1, r3, r1
   2ec2c:	mov	r3, r2
   2ec30:	add	r1, r1, #1
   2ec34:	str	r1, [r0, #16]
   2ec38:	b	2ec4c <flatcc_json_parser_match_constant@@Base+0x7c>
   2ec3c:	mov	r3, r1
   2ec40:	ldr	r1, [sp]
   2ec44:	mov	r2, #0
   2ec48:	str	r2, [r1]
   2ec4c:	mov	r0, r3
   2ec50:	bx	lr
   2ec54:	add	r1, r3, #1
   2ec58:	cmp	r2, r1
   2ec5c:	beq	2ee28 <flatcc_json_parser_match_constant@@Base+0x258>
   2ec60:	ldrb	ip, [r3, #1]
   2ec64:	cmp	ip, #32
   2ec68:	bne	2eca0 <flatcc_json_parser_match_constant@@Base+0xd0>
   2ec6c:	add	r1, r3, #2
   2ec70:	b	2ec80 <flatcc_json_parser_match_constant@@Base+0xb0>
   2ec74:	ldrb	ip, [r1], #1
   2ec78:	cmp	ip, #32
   2ec7c:	bne	2eca4 <flatcc_json_parser_match_constant@@Base+0xd4>
   2ec80:	cmp	r2, r1
   2ec84:	mov	r3, r1
   2ec88:	bne	2ec74 <flatcc_json_parser_match_constant@@Base+0xa4>
   2ec8c:	ldr	r1, [sp]
   2ec90:	mov	r2, #0
   2ec94:	str	r2, [r1]
   2ec98:	mov	r0, r3
   2ec9c:	bx	lr
   2eca0:	mov	r3, r1
   2eca4:	cmp	ip, #34	; 0x22
   2eca8:	beq	2ecbc <flatcc_json_parser_match_constant@@Base+0xec>
   2ecac:	ldr	r1, [sp]
   2ecb0:	mov	r2, #1
   2ecb4:	str	r2, [r1]
   2ecb8:	b	2ec4c <flatcc_json_parser_match_constant@@Base+0x7c>
   2ecbc:	add	r1, r3, #1
   2ecc0:	cmn	r1, #1
   2ecc4:	bge	2ecd8 <flatcc_json_parser_match_constant@@Base+0x108>
   2ecc8:	ldrb	r2, [r3, #1]
   2eccc:	cmp	r2, #32
   2ecd0:	bhi	2ee0c <flatcc_json_parser_match_constant@@Base+0x23c>
   2ecd4:	beq	2ee14 <flatcc_json_parser_match_constant@@Base+0x244>
   2ecd8:	cmp	r1, #0
   2ecdc:	beq	2ed0c <flatcc_json_parser_match_constant@@Base+0x13c>
   2ece0:	ldrb	r2, [r1]
   2ece4:	cmp	r2, #32
   2ece8:	bne	2ed58 <flatcc_json_parser_match_constant@@Base+0x188>
   2ecec:	add	r3, r1, #1
   2ecf0:	b	2ed00 <flatcc_json_parser_match_constant@@Base+0x130>
   2ecf4:	ldrb	r2, [r3], #1
   2ecf8:	cmp	r2, #32
   2ecfc:	bne	2ed58 <flatcc_json_parser_match_constant@@Base+0x188>
   2ed00:	cmp	r3, #0
   2ed04:	mov	r1, r3
   2ed08:	bne	2ecf4 <flatcc_json_parser_match_constant@@Base+0x124>
   2ed0c:	ldr	r1, [sp]
   2ed10:	mov	r2, #0
   2ed14:	mov	r3, #0
   2ed18:	str	r2, [r1]
   2ed1c:	b	2ec98 <flatcc_json_parser_match_constant@@Base+0xc8>
   2ed20:	cmn	r1, #1
   2ed24:	add	r3, r1, #1
   2ed28:	bge	2ed38 <flatcc_json_parser_match_constant@@Base+0x168>
   2ed2c:	ldrb	r2, [r1, #1]
   2ed30:	cmp	r2, #10
   2ed34:	addeq	r3, r1, #2
   2ed38:	mov	r1, r3
   2ed3c:	ldr	r3, [r0, #12]
   2ed40:	str	r1, [r0, #4]
   2ed44:	add	r3, r3, #1
   2ed48:	str	r3, [r0, #12]
   2ed4c:	cmp	r1, #0
   2ed50:	beq	2ed0c <flatcc_json_parser_match_constant@@Base+0x13c>
   2ed54:	ldrb	r2, [r1]
   2ed58:	cmp	r2, #32
   2ed5c:	bhi	2ee0c <flatcc_json_parser_match_constant@@Base+0x23c>
   2ed60:	sub	r2, r2, #9
   2ed64:	cmp	r2, #23
   2ed68:	ldrls	pc, [pc, r2, lsl #2]
   2ed6c:	b	2ede0 <flatcc_json_parser_match_constant@@Base+0x210>
   2ed70:	ldrdeq	lr, [r2], -r8
   2ed74:	ldrdeq	lr, [r2], -r0
   2ed78:	andeq	lr, r2, r0, ror #27
   2ed7c:	andeq	lr, r2, r0, ror #27
   2ed80:	andeq	lr, r2, r0, lsr #26
   2ed84:	andeq	lr, r2, r0, ror #27
   2ed88:	andeq	lr, r2, r0, ror #27
   2ed8c:	andeq	lr, r2, r0, ror #27
   2ed90:	andeq	lr, r2, r0, ror #27
   2ed94:	andeq	lr, r2, r0, ror #27
   2ed98:	andeq	lr, r2, r0, ror #27
   2ed9c:	andeq	lr, r2, r0, ror #27
   2eda0:	andeq	lr, r2, r0, ror #27
   2eda4:	andeq	lr, r2, r0, ror #27
   2eda8:	andeq	lr, r2, r0, ror #27
   2edac:	andeq	lr, r2, r0, ror #27
   2edb0:	andeq	lr, r2, r0, ror #27
   2edb4:	andeq	lr, r2, r0, ror #27
   2edb8:	andeq	lr, r2, r0, ror #27
   2edbc:	andeq	lr, r2, r0, ror #27
   2edc0:	andeq	lr, r2, r0, ror #27
   2edc4:	andeq	lr, r2, r0, ror #27
   2edc8:	andeq	lr, r2, r0, ror #27
   2edcc:	andeq	lr, r2, r0, ror #25
   2edd0:	add	r1, r1, #1
   2edd4:	b	2ed3c <flatcc_json_parser_match_constant@@Base+0x16c>
   2edd8:	add	r1, r1, #1
   2eddc:	b	2ed4c <flatcc_json_parser_match_constant@@Base+0x17c>
   2ede0:	ldr	r3, [r0, #20]
   2ede4:	cmp	r3, #0
   2ede8:	bne	2ed0c <flatcc_json_parser_match_constant@@Base+0x13c>
   2edec:	ldr	r2, [r0, #4]
   2edf0:	mov	ip, #5
   2edf4:	str	r1, [r0, #32]
   2edf8:	str	ip, [r0, #20]
   2edfc:	sub	r1, r1, r2
   2ee00:	add	r1, r1, #1
   2ee04:	str	r1, [r0, #16]
   2ee08:	b	2ec8c <flatcc_json_parser_match_constant@@Base+0xbc>
   2ee0c:	mov	r3, r1
   2ee10:	b	2ec8c <flatcc_json_parser_match_constant@@Base+0xbc>
   2ee14:	ldrb	r2, [r3, #2]
   2ee18:	cmp	r2, #32
   2ee1c:	addhi	r3, r3, #2
   2ee20:	bls	2ecd8 <flatcc_json_parser_match_constant@@Base+0x108>
   2ee24:	b	2ec8c <flatcc_json_parser_match_constant@@Base+0xbc>
   2ee28:	mov	r3, r2
   2ee2c:	b	2ec8c <flatcc_json_parser_match_constant@@Base+0xbc>

0002ee30 <flatcc_json_parser_double@@Base>:
   2ee30:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2ee34:	cmp	r1, r2
   2ee38:	mov	r5, r2
   2ee3c:	strd	r6, [sp, #8]
   2ee40:	strd	r8, [sp, #16]
   2ee44:	mov	r8, #0
   2ee48:	mov	r9, #0
   2ee4c:	str	sl, [sp, #24]
   2ee50:	str	lr, [sp, #28]
   2ee54:	strd	r8, [r3]
   2ee58:	beq	2ef18 <flatcc_json_parser_double@@Base+0xe8>
   2ee5c:	mov	r6, r3
   2ee60:	ldrb	r3, [r1]
   2ee64:	mov	r4, r1
   2ee68:	mov	r7, r0
   2ee6c:	cmp	r3, #45	; 0x2d
   2ee70:	addeq	r3, r1, #1
   2ee74:	movne	r3, r1
   2ee78:	sub	r2, r2, r3
   2ee7c:	cmp	r2, #1
   2ee80:	ble	2ee98 <flatcc_json_parser_double@@Base+0x68>
   2ee84:	ldrb	r2, [r3]
   2ee88:	cmp	r2, #46	; 0x2e
   2ee8c:	beq	2ef44 <flatcc_json_parser_double@@Base+0x114>
   2ee90:	cmp	r2, #48	; 0x30
   2ee94:	beq	2ef38 <flatcc_json_parser_double@@Base+0x108>
   2ee98:	mov	r2, r6
   2ee9c:	sub	r1, r5, r4
   2eea0:	mov	r0, r4
   2eea4:	bl	2ce9c <grisu3_diy_fp_encode_double@@Base+0x5a4>
   2eea8:	cmp	r4, r0
   2eeac:	cmpne	r0, #0
   2eeb0:	mov	r3, r0
   2eeb4:	bne	2eefc <flatcc_json_parser_double@@Base+0xcc>
   2eeb8:	vldr	d7, [r6]
   2eebc:	vldr	d6, [pc, #156]	; 2ef60 <flatcc_json_parser_double@@Base+0x130>
   2eec0:	ldr	r3, [r7, #20]
   2eec4:	vabs.f64	d7, d7
   2eec8:	vcmp.f64	d7, d6
   2eecc:	vmrs	APSR_nzcv, fpscr
   2eed0:	bgt	2ef20 <flatcc_json_parser_double@@Base+0xf0>
   2eed4:	cmp	r3, #0
   2eed8:	bne	2ef18 <flatcc_json_parser_double@@Base+0xe8>
   2eedc:	ldr	r2, [r7, #4]
   2eee0:	mov	r3, r5
   2eee4:	mov	r1, #6
   2eee8:	str	r1, [r7, #20]
   2eeec:	str	r4, [r7, #32]
   2eef0:	sub	r4, r4, r2
   2eef4:	add	r4, r4, #1
   2eef8:	str	r4, [r7, #16]
   2eefc:	ldrd	r4, [sp]
   2ef00:	mov	r0, r3
   2ef04:	ldrd	r6, [sp, #8]
   2ef08:	ldrd	r8, [sp, #16]
   2ef0c:	ldr	sl, [sp, #24]
   2ef10:	add	sp, sp, #28
   2ef14:	pop	{pc}		; (ldr pc, [sp], #4)
   2ef18:	mov	r3, r5
   2ef1c:	b	2eefc <flatcc_json_parser_double@@Base+0xcc>
   2ef20:	cmp	r3, #0
   2ef24:	bne	2ef18 <flatcc_json_parser_double@@Base+0xe8>
   2ef28:	mov	r1, #7
   2ef2c:	mov	r3, r5
   2ef30:	ldr	r2, [r7, #4]
   2ef34:	b	2eee8 <flatcc_json_parser_double@@Base+0xb8>
   2ef38:	ldrb	r3, [r3, #1]
   2ef3c:	cmp	r3, #48	; 0x30
   2ef40:	bne	2ee98 <flatcc_json_parser_double@@Base+0x68>
   2ef44:	ldr	r3, [r7, #20]
   2ef48:	cmp	r3, #0
   2ef4c:	bne	2ef18 <flatcc_json_parser_double@@Base+0xe8>
   2ef50:	mov	r1, #6
   2ef54:	mov	r3, r5
   2ef58:	ldr	r2, [r7, #4]
   2ef5c:	b	2eee8 <flatcc_json_parser_double@@Base+0xb8>
   2ef60:			; <UNDEFINED> instruction: 0xffffffff
   2ef64:	svcvc	0x00efffff

0002ef68 <flatcc_json_parser_float@@Base>:
   2ef68:	mov	ip, #0
   2ef6c:	cmp	r1, r2
   2ef70:	strd	r4, [sp, #-20]!	; 0xffffffec
   2ef74:	mov	r5, r2
   2ef78:	strd	r6, [sp, #8]
   2ef7c:	str	lr, [sp, #16]
   2ef80:	sub	sp, sp, #12
   2ef84:	str	ip, [r3]
   2ef88:	beq	2f04c <flatcc_json_parser_float@@Base+0xe4>
   2ef8c:	mov	r6, r3
   2ef90:	ldrb	r3, [r1]
   2ef94:	mov	r4, r1
   2ef98:	mov	r7, r0
   2ef9c:	cmp	r3, #45	; 0x2d
   2efa0:	addeq	r3, r1, #1
   2efa4:	movne	r3, r1
   2efa8:	sub	r2, r2, r3
   2efac:	cmp	r2, #1
   2efb0:	ble	2efc8 <flatcc_json_parser_float@@Base+0x60>
   2efb4:	ldrb	r2, [r3]
   2efb8:	cmp	r2, #46	; 0x2e
   2efbc:	beq	2f060 <flatcc_json_parser_float@@Base+0xf8>
   2efc0:	cmp	r2, #48	; 0x30
   2efc4:	beq	2f054 <flatcc_json_parser_float@@Base+0xec>
   2efc8:	mov	r2, sp
   2efcc:	sub	r1, r5, r4
   2efd0:	mov	r0, r4
   2efd4:	bl	2ce9c <grisu3_diy_fp_encode_double@@Base+0x5a4>
   2efd8:	vldr	d6, [sp]
   2efdc:	vldr	s14, [pc, #200]	; 2f0ac <flatcc_json_parser_float@@Base+0x144>
   2efe0:	vcvt.f32.f64	s15, d6
   2efe4:	vabs.f32	s11, s15
   2efe8:	vstr	s15, [r6]
   2efec:	vcmp.f32	s11, s14
   2eff0:	vmrs	APSR_nzcv, fpscr
   2eff4:	bgt	2f018 <flatcc_json_parser_float@@Base+0xb0>
   2eff8:	cmp	r4, r0
   2effc:	cmpne	r0, #0
   2f000:	beq	2f090 <flatcc_json_parser_float@@Base+0x128>
   2f004:	add	sp, sp, #12
   2f008:	ldrd	r4, [sp]
   2f00c:	ldrd	r6, [sp, #8]
   2f010:	add	sp, sp, #16
   2f014:	pop	{pc}		; (ldr pc, [sp], #4)
   2f018:	vcmpe.f64	d6, #0.0
   2f01c:	vldr	s15, [pc, #140]	; 2f0b0 <flatcc_json_parser_float@@Base+0x148>
   2f020:	vldr	s14, [pc, #140]	; 2f0b4 <flatcc_json_parser_float@@Base+0x14c>
   2f024:	ldr	r3, [r7, #20]
   2f028:	vmrs	APSR_nzcv, fpscr
   2f02c:	vmovpl.f32	s15, s14
   2f030:	cmp	r3, #0
   2f034:	vstr	s15, [r6]
   2f038:	bne	2f04c <flatcc_json_parser_float@@Base+0xe4>
   2f03c:	mov	r2, #7
   2f040:	mov	r0, r5
   2f044:	ldr	r3, [r7, #4]
   2f048:	b	2f078 <flatcc_json_parser_float@@Base+0x110>
   2f04c:	mov	r0, r5
   2f050:	b	2f004 <flatcc_json_parser_float@@Base+0x9c>
   2f054:	ldrb	r3, [r3, #1]
   2f058:	cmp	r3, #48	; 0x30
   2f05c:	bne	2efc8 <flatcc_json_parser_float@@Base+0x60>
   2f060:	ldr	r3, [r7, #20]
   2f064:	cmp	r3, #0
   2f068:	bne	2f04c <flatcc_json_parser_float@@Base+0xe4>
   2f06c:	ldr	r3, [r7, #4]
   2f070:	mov	r2, #6
   2f074:	mov	r0, r5
   2f078:	str	r2, [r7, #20]
   2f07c:	str	r4, [r7, #32]
   2f080:	sub	r4, r4, r3
   2f084:	add	r4, r4, #1
   2f088:	str	r4, [r7, #16]
   2f08c:	b	2f004 <flatcc_json_parser_float@@Base+0x9c>
   2f090:	ldr	r3, [r7, #20]
   2f094:	cmp	r3, #0
   2f098:	bne	2f04c <flatcc_json_parser_float@@Base+0xe4>
   2f09c:	mov	r0, r5
   2f0a0:	mov	r2, #6
   2f0a4:	ldr	r3, [r7, #4]
   2f0a8:	b	2f078 <flatcc_json_parser_float@@Base+0x110>
   2f0ac:	svcvc	0x007fffff
   2f0b0:			; <UNDEFINED> instruction: 0xff800000
   2f0b4:	svcvc	0x00800000

0002f0b8 <flatcc_json_parser_generic_json@@Base>:
   2f0b8:	cmp	r1, r2
   2f0bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2f0c0:	mov	r4, r2
   2f0c4:	strd	r6, [sp, #8]
   2f0c8:	strd	r8, [sp, #16]
   2f0cc:	strd	sl, [sp, #24]
   2f0d0:	str	lr, [sp, #32]
   2f0d4:	sub	sp, sp, #524	; 0x20c
   2f0d8:	beq	2f2f8 <flatcc_json_parser_generic_json@@Base+0x240>
   2f0dc:	ldrb	r3, [r1]
   2f0e0:	add	r8, sp, #8
   2f0e4:	movw	r9, #10532	; 0x2924
   2f0e8:	movt	r9, #4
   2f0ec:	mov	r5, r1
   2f0f0:	mov	r6, r0
   2f0f4:	mov	r7, r8
   2f0f8:	mov	sl, #17
   2f0fc:	cmp	r7, r8
   2f100:	beq	2f4c0 <flatcc_json_parser_generic_json@@Base+0x408>
   2f104:	ldrb	r2, [r7, #-1]
   2f108:	cmp	r2, #125	; 0x7d
   2f10c:	beq	2f6a8 <flatcc_json_parser_generic_json@@Base+0x5f0>
   2f110:	sub	r2, r3, #34	; 0x22
   2f114:	cmp	r2, #89	; 0x59
   2f118:	ldrls	pc, [pc, r2, lsl #2]
   2f11c:	b	2f4b0 <flatcc_json_parser_generic_json@@Base+0x3f8>
   2f120:	andeq	pc, r2, r4, ror #14
   2f124:			; <UNDEFINED> instruction: 0x0002f4b0
   2f128:			; <UNDEFINED> instruction: 0x0002f4b0
   2f12c:			; <UNDEFINED> instruction: 0x0002f4b0
   2f130:			; <UNDEFINED> instruction: 0x0002f4b0
   2f134:			; <UNDEFINED> instruction: 0x0002f4b0
   2f138:			; <UNDEFINED> instruction: 0x0002f4b0
   2f13c:			; <UNDEFINED> instruction: 0x0002f4b0
   2f140:			; <UNDEFINED> instruction: 0x0002f4b0
   2f144:			; <UNDEFINED> instruction: 0x0002f4b0
   2f148:			; <UNDEFINED> instruction: 0x0002f4b0
   2f14c:	andeq	pc, r2, r8, asr #7
   2f150:			; <UNDEFINED> instruction: 0x0002f4b0
   2f154:			; <UNDEFINED> instruction: 0x0002f4b0
   2f158:	andeq	pc, r2, r8, asr #7
   2f15c:	andeq	pc, r2, r8, asr #7
   2f160:	andeq	pc, r2, r8, asr #7
   2f164:	andeq	pc, r2, r8, asr #7
   2f168:	andeq	pc, r2, r8, asr #7
   2f16c:	andeq	pc, r2, r8, asr #7
   2f170:	andeq	pc, r2, r8, asr #7
   2f174:	andeq	pc, r2, r8, asr #7
   2f178:	andeq	pc, r2, r8, asr #7
   2f17c:	andeq	pc, r2, r8, asr #7
   2f180:			; <UNDEFINED> instruction: 0x0002f4b0
   2f184:			; <UNDEFINED> instruction: 0x0002f4b0
   2f188:			; <UNDEFINED> instruction: 0x0002f4b0
   2f18c:			; <UNDEFINED> instruction: 0x0002f4b0
   2f190:			; <UNDEFINED> instruction: 0x0002f4b0
   2f194:			; <UNDEFINED> instruction: 0x0002f4b0
   2f198:			; <UNDEFINED> instruction: 0x0002f4b0
   2f19c:			; <UNDEFINED> instruction: 0x0002f4b0
   2f1a0:			; <UNDEFINED> instruction: 0x0002f4b0
   2f1a4:			; <UNDEFINED> instruction: 0x0002f4b0
   2f1a8:			; <UNDEFINED> instruction: 0x0002f4b0
   2f1ac:			; <UNDEFINED> instruction: 0x0002f4b0
   2f1b0:			; <UNDEFINED> instruction: 0x0002f4b0
   2f1b4:			; <UNDEFINED> instruction: 0x0002f4b0
   2f1b8:			; <UNDEFINED> instruction: 0x0002f4b0
   2f1bc:			; <UNDEFINED> instruction: 0x0002f4b0
   2f1c0:			; <UNDEFINED> instruction: 0x0002f4b0
   2f1c4:			; <UNDEFINED> instruction: 0x0002f4b0
   2f1c8:			; <UNDEFINED> instruction: 0x0002f4b0
   2f1cc:			; <UNDEFINED> instruction: 0x0002f4b0
   2f1d0:			; <UNDEFINED> instruction: 0x0002f4b0
   2f1d4:			; <UNDEFINED> instruction: 0x0002f4b0
   2f1d8:			; <UNDEFINED> instruction: 0x0002f4b0
   2f1dc:			; <UNDEFINED> instruction: 0x0002f4b0
   2f1e0:			; <UNDEFINED> instruction: 0x0002f4b0
   2f1e4:			; <UNDEFINED> instruction: 0x0002f4b0
   2f1e8:			; <UNDEFINED> instruction: 0x0002f4b0
   2f1ec:			; <UNDEFINED> instruction: 0x0002f4b0
   2f1f0:			; <UNDEFINED> instruction: 0x0002f4b0
   2f1f4:			; <UNDEFINED> instruction: 0x0002f4b0
   2f1f8:			; <UNDEFINED> instruction: 0x0002f4b0
   2f1fc:			; <UNDEFINED> instruction: 0x0002f4b0
   2f200:			; <UNDEFINED> instruction: 0x0002f4b0
   2f204:	andeq	pc, r2, ip, lsr r6	; <UNPREDICTABLE>
   2f208:			; <UNDEFINED> instruction: 0x0002f4b0
   2f20c:			; <UNDEFINED> instruction: 0x0002f4b0
   2f210:			; <UNDEFINED> instruction: 0x0002f4b0
   2f214:			; <UNDEFINED> instruction: 0x0002f4b0
   2f218:			; <UNDEFINED> instruction: 0x0002f4b0
   2f21c:			; <UNDEFINED> instruction: 0x0002f4b0
   2f220:			; <UNDEFINED> instruction: 0x0002f4b0
   2f224:			; <UNDEFINED> instruction: 0x0002f4b0
   2f228:			; <UNDEFINED> instruction: 0x0002f4b0
   2f22c:			; <UNDEFINED> instruction: 0x0002f4b0
   2f230:	andeq	pc, r2, r0, ror #6
   2f234:			; <UNDEFINED> instruction: 0x0002f4b0
   2f238:			; <UNDEFINED> instruction: 0x0002f4b0
   2f23c:			; <UNDEFINED> instruction: 0x0002f4b0
   2f240:			; <UNDEFINED> instruction: 0x0002f4b0
   2f244:			; <UNDEFINED> instruction: 0x0002f4b0
   2f248:			; <UNDEFINED> instruction: 0x0002f4b0
   2f24c:			; <UNDEFINED> instruction: 0x0002f4b0
   2f250:	andeq	pc, r2, r8, lsl r3	; <UNPREDICTABLE>
   2f254:			; <UNDEFINED> instruction: 0x0002f4b0
   2f258:			; <UNDEFINED> instruction: 0x0002f4b0
   2f25c:			; <UNDEFINED> instruction: 0x0002f4b0
   2f260:			; <UNDEFINED> instruction: 0x0002f4b0
   2f264:			; <UNDEFINED> instruction: 0x0002f4b0
   2f268:	andeq	pc, r2, r0, ror #6
   2f26c:			; <UNDEFINED> instruction: 0x0002f4b0
   2f270:			; <UNDEFINED> instruction: 0x0002f4b0
   2f274:			; <UNDEFINED> instruction: 0x0002f4b0
   2f278:			; <UNDEFINED> instruction: 0x0002f4b0
   2f27c:			; <UNDEFINED> instruction: 0x0002f4b0
   2f280:			; <UNDEFINED> instruction: 0x0002f4b0
   2f284:	andeq	pc, r2, ip, lsl #5
   2f288:	mov	r5, r4
   2f28c:	add	r3, sp, #520	; 0x208
   2f290:	cmp	r7, r3
   2f294:	beq	30df8 <flatcc_json_parser_generic_json@@Base+0x1d40>
   2f298:	add	r1, r5, #1
   2f29c:	mov	r3, #125	; 0x7d
   2f2a0:	sub	r2, r4, r1
   2f2a4:	cmp	r2, #1
   2f2a8:	strb	r3, [r7], #1
   2f2ac:	ble	2f2c0 <flatcc_json_parser_generic_json@@Base+0x208>
   2f2b0:	ldrb	r3, [r5, #1]
   2f2b4:	cmp	r3, #32
   2f2b8:	bhi	30d40 <flatcc_json_parser_generic_json@@Base+0x1c88>
   2f2bc:	beq	30e80 <flatcc_json_parser_generic_json@@Base+0x1dc8>
   2f2c0:	cmp	r1, r4
   2f2c4:	beq	2f2f4 <flatcc_json_parser_generic_json@@Base+0x23c>
   2f2c8:	ldrb	r3, [r1]
   2f2cc:	cmp	r3, #32
   2f2d0:	bne	30970 <flatcc_json_parser_generic_json@@Base+0x18b8>
   2f2d4:	add	r2, r1, #1
   2f2d8:	b	2f2e8 <flatcc_json_parser_generic_json@@Base+0x230>
   2f2dc:	ldrb	r3, [r2], #1
   2f2e0:	cmp	r3, #32
   2f2e4:	bne	30970 <flatcc_json_parser_generic_json@@Base+0x18b8>
   2f2e8:	cmp	r4, r2
   2f2ec:	mov	r1, r2
   2f2f0:	bne	2f2dc <flatcc_json_parser_generic_json@@Base+0x224>
   2f2f4:	mov	r4, r1
   2f2f8:	mov	r0, r4
   2f2fc:	add	sp, sp, #524	; 0x20c
   2f300:	ldrd	r4, [sp]
   2f304:	ldrd	r6, [sp, #8]
   2f308:	ldrd	r8, [sp, #16]
   2f30c:	ldrd	sl, [sp, #24]
   2f310:	add	sp, sp, #32
   2f314:	pop	{pc}		; (ldr pc, [sp], #4)
   2f318:	sub	r3, r4, r5
   2f31c:	cmp	r3, #3
   2f320:	ble	2f398 <flatcc_json_parser_generic_json@@Base+0x2e0>
   2f324:	ldrb	r3, [r5]
   2f328:	cmp	r3, #110	; 0x6e
   2f32c:	bne	2f398 <flatcc_json_parser_generic_json@@Base+0x2e0>
   2f330:	ldrb	r3, [r5, #1]
   2f334:	add	r2, r5, #1
   2f338:	cmp	r3, #117	; 0x75
   2f33c:	bne	2f398 <flatcc_json_parser_generic_json@@Base+0x2e0>
   2f340:	ldrb	r3, [r2, #1]!
   2f344:	cmp	r3, #108	; 0x6c
   2f348:	bne	2f398 <flatcc_json_parser_generic_json@@Base+0x2e0>
   2f34c:	ldrb	r3, [r2, #1]
   2f350:	cmp	r3, #108	; 0x6c
   2f354:	bne	2f398 <flatcc_json_parser_generic_json@@Base+0x2e0>
   2f358:	add	r0, r5, #4
   2f35c:	b	2f80c <flatcc_json_parser_generic_json@@Base+0x754>
   2f360:	sub	r3, r4, r5
   2f364:	cmp	r3, #3
   2f368:	ble	2f398 <flatcc_json_parser_generic_json@@Base+0x2e0>
   2f36c:	ldrb	r2, [r5]
   2f370:	cmp	r2, #116	; 0x74
   2f374:	beq	30e50 <flatcc_json_parser_generic_json@@Base+0x1d98>
   2f378:	cmp	r3, #4
   2f37c:	beq	2f398 <flatcc_json_parser_generic_json@@Base+0x2e0>
   2f380:	mov	r2, #5
   2f384:	mov	r1, r9
   2f388:	mov	r0, r5
   2f38c:	bl	14530 <memcmp@plt>
   2f390:	cmp	r0, #0
   2f394:	beq	30e10 <flatcc_json_parser_generic_json@@Base+0x1d58>
   2f398:	ldr	r3, [r6, #20]
   2f39c:	cmp	r3, #0
   2f3a0:	bne	2f2f8 <flatcc_json_parser_generic_json@@Base+0x240>
   2f3a4:	ldr	r3, [r6, #4]
   2f3a8:	mov	r2, #5
   2f3ac:	sub	r3, r5, r3
   2f3b0:	mov	r0, r4
   2f3b4:	str	r2, [r6, #20]
   2f3b8:	add	r3, r3, #1
   2f3bc:	str	r3, [r6, #16]
   2f3c0:	str	r5, [r6, #32]
   2f3c4:	b	2f2fc <flatcc_json_parser_generic_json@@Base+0x244>
   2f3c8:	cmp	r4, r5
   2f3cc:	beq	2f954 <flatcc_json_parser_generic_json@@Base+0x89c>
   2f3d0:	cmp	r3, #45	; 0x2d
   2f3d4:	beq	30d14 <flatcc_json_parser_generic_json@@Base+0x1c5c>
   2f3d8:	cmp	r3, #48	; 0x30
   2f3dc:	beq	30d2c <flatcc_json_parser_generic_json@@Base+0x1c74>
   2f3e0:	sub	r3, r3, #49	; 0x31
   2f3e4:	uxtb	r3, r3
   2f3e8:	cmp	r3, #8
   2f3ec:	bhi	30e20 <flatcc_json_parser_generic_json@@Base+0x1d68>
   2f3f0:	add	r0, r5, #1
   2f3f4:	cmp	r4, r0
   2f3f8:	beq	2f948 <flatcc_json_parser_generic_json@@Base+0x890>
   2f3fc:	ldrb	r3, [r5, #1]
   2f400:	sub	r2, r3, #48	; 0x30
   2f404:	cmp	r2, #9
   2f408:	bhi	2f42c <flatcc_json_parser_generic_json@@Base+0x374>
   2f40c:	add	r5, r5, #2
   2f410:	cmp	r4, r5
   2f414:	mov	r0, r5
   2f418:	beq	2f948 <flatcc_json_parser_generic_json@@Base+0x890>
   2f41c:	ldrb	r3, [r5], #1
   2f420:	sub	r2, r3, #48	; 0x30
   2f424:	cmp	r2, #9
   2f428:	bls	2f410 <flatcc_json_parser_generic_json@@Base+0x358>
   2f42c:	cmp	r3, #46	; 0x2e
   2f430:	beq	30ea8 <flatcc_json_parser_generic_json@@Base+0x1df0>
   2f434:	and	r2, r3, #223	; 0xdf
   2f438:	cmp	r2, #69	; 0x45
   2f43c:	bne	2f920 <flatcc_json_parser_generic_json@@Base+0x868>
   2f440:	add	r2, r0, #1
   2f444:	cmp	r4, r2
   2f448:	beq	31270 <flatcc_json_parser_generic_json@@Base+0x21b8>
   2f44c:	ldrb	r3, [r0, #1]
   2f450:	sub	r1, r3, #43	; 0x2b
   2f454:	tst	r1, #253	; 0xfd
   2f458:	bne	2f46c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2f45c:	add	r2, r0, #2
   2f460:	cmp	r4, r2
   2f464:	beq	2f478 <flatcc_json_parser_generic_json@@Base+0x3c0>
   2f468:	ldrb	r3, [r0, #2]
   2f46c:	sub	r3, r3, #48	; 0x30
   2f470:	cmp	r3, #9
   2f474:	bls	2f8e4 <flatcc_json_parser_generic_json@@Base+0x82c>
   2f478:	ldr	r3, [r6, #20]
   2f47c:	cmp	r3, #0
   2f480:	bne	2f954 <flatcc_json_parser_generic_json@@Base+0x89c>
   2f484:	ldr	r3, [r6, #4]
   2f488:	mov	r1, #6
   2f48c:	mov	r0, r4
   2f490:	str	r2, [r6, #32]
   2f494:	str	r1, [r6, #20]
   2f498:	sub	r2, r2, r3
   2f49c:	add	r3, r2, #1
   2f4a0:	str	r3, [r6, #16]
   2f4a4:	b	2f958 <flatcc_json_parser_generic_json@@Base+0x8a0>
   2f4a8:	cmp	r4, r5
   2f4ac:	bne	304e4 <flatcc_json_parser_generic_json@@Base+0x142c>
   2f4b0:	ldr	r3, [r6, #20]
   2f4b4:	cmp	r3, #0
   2f4b8:	bne	2f2f8 <flatcc_json_parser_generic_json@@Base+0x240>
   2f4bc:	b	2f3a4 <flatcc_json_parser_generic_json@@Base+0x2ec>
   2f4c0:	sub	r2, r3, #34	; 0x22
   2f4c4:	cmp	r2, #89	; 0x59
   2f4c8:	ldrls	pc, [pc, r2, lsl #2]
   2f4cc:	b	2f4b0 <flatcc_json_parser_generic_json@@Base+0x3f8>
   2f4d0:	andeq	pc, r2, r4, ror #14
   2f4d4:			; <UNDEFINED> instruction: 0x0002f4b0
   2f4d8:			; <UNDEFINED> instruction: 0x0002f4b0
   2f4dc:			; <UNDEFINED> instruction: 0x0002f4b0
   2f4e0:			; <UNDEFINED> instruction: 0x0002f4b0
   2f4e4:			; <UNDEFINED> instruction: 0x0002f4b0
   2f4e8:			; <UNDEFINED> instruction: 0x0002f4b0
   2f4ec:			; <UNDEFINED> instruction: 0x0002f4b0
   2f4f0:			; <UNDEFINED> instruction: 0x0002f4b0
   2f4f4:			; <UNDEFINED> instruction: 0x0002f4b0
   2f4f8:			; <UNDEFINED> instruction: 0x0002f4b0
   2f4fc:	andeq	pc, r2, r8, asr #7
   2f500:			; <UNDEFINED> instruction: 0x0002f4b0
   2f504:			; <UNDEFINED> instruction: 0x0002f4b0
   2f508:	andeq	pc, r2, r8, asr #7
   2f50c:	andeq	pc, r2, r8, asr #7
   2f510:	andeq	pc, r2, r8, asr #7
   2f514:	andeq	pc, r2, r8, asr #7
   2f518:	andeq	pc, r2, r8, asr #7
   2f51c:	andeq	pc, r2, r8, asr #7
   2f520:	andeq	pc, r2, r8, asr #7
   2f524:	andeq	pc, r2, r8, asr #7
   2f528:	andeq	pc, r2, r8, asr #7
   2f52c:	andeq	pc, r2, r8, asr #7
   2f530:			; <UNDEFINED> instruction: 0x0002f4b0
   2f534:			; <UNDEFINED> instruction: 0x0002f4b0
   2f538:			; <UNDEFINED> instruction: 0x0002f4b0
   2f53c:			; <UNDEFINED> instruction: 0x0002f4b0
   2f540:			; <UNDEFINED> instruction: 0x0002f4b0
   2f544:			; <UNDEFINED> instruction: 0x0002f4b0
   2f548:			; <UNDEFINED> instruction: 0x0002f4b0
   2f54c:			; <UNDEFINED> instruction: 0x0002f4b0
   2f550:			; <UNDEFINED> instruction: 0x0002f4b0
   2f554:			; <UNDEFINED> instruction: 0x0002f4b0
   2f558:			; <UNDEFINED> instruction: 0x0002f4b0
   2f55c:			; <UNDEFINED> instruction: 0x0002f4b0
   2f560:			; <UNDEFINED> instruction: 0x0002f4b0
   2f564:			; <UNDEFINED> instruction: 0x0002f4b0
   2f568:			; <UNDEFINED> instruction: 0x0002f4b0
   2f56c:			; <UNDEFINED> instruction: 0x0002f4b0
   2f570:			; <UNDEFINED> instruction: 0x0002f4b0
   2f574:			; <UNDEFINED> instruction: 0x0002f4b0
   2f578:			; <UNDEFINED> instruction: 0x0002f4b0
   2f57c:			; <UNDEFINED> instruction: 0x0002f4b0
   2f580:			; <UNDEFINED> instruction: 0x0002f4b0
   2f584:			; <UNDEFINED> instruction: 0x0002f4b0
   2f588:			; <UNDEFINED> instruction: 0x0002f4b0
   2f58c:			; <UNDEFINED> instruction: 0x0002f4b0
   2f590:			; <UNDEFINED> instruction: 0x0002f4b0
   2f594:			; <UNDEFINED> instruction: 0x0002f4b0
   2f598:			; <UNDEFINED> instruction: 0x0002f4b0
   2f59c:			; <UNDEFINED> instruction: 0x0002f4b0
   2f5a0:			; <UNDEFINED> instruction: 0x0002f4b0
   2f5a4:			; <UNDEFINED> instruction: 0x0002f4b0
   2f5a8:			; <UNDEFINED> instruction: 0x0002f4b0
   2f5ac:			; <UNDEFINED> instruction: 0x0002f4b0
   2f5b0:			; <UNDEFINED> instruction: 0x0002f4b0
   2f5b4:	andeq	pc, r2, r8, asr #12
   2f5b8:			; <UNDEFINED> instruction: 0x0002f4b0
   2f5bc:			; <UNDEFINED> instruction: 0x0002f4b0
   2f5c0:			; <UNDEFINED> instruction: 0x0002f4b0
   2f5c4:			; <UNDEFINED> instruction: 0x0002f4b0
   2f5c8:			; <UNDEFINED> instruction: 0x0002f4b0
   2f5cc:			; <UNDEFINED> instruction: 0x0002f4b0
   2f5d0:			; <UNDEFINED> instruction: 0x0002f4b0
   2f5d4:			; <UNDEFINED> instruction: 0x0002f4b0
   2f5d8:			; <UNDEFINED> instruction: 0x0002f4b0
   2f5dc:			; <UNDEFINED> instruction: 0x0002f4b0
   2f5e0:	andeq	pc, r2, r0, ror #6
   2f5e4:			; <UNDEFINED> instruction: 0x0002f4b0
   2f5e8:			; <UNDEFINED> instruction: 0x0002f4b0
   2f5ec:			; <UNDEFINED> instruction: 0x0002f4b0
   2f5f0:			; <UNDEFINED> instruction: 0x0002f4b0
   2f5f4:			; <UNDEFINED> instruction: 0x0002f4b0
   2f5f8:			; <UNDEFINED> instruction: 0x0002f4b0
   2f5fc:			; <UNDEFINED> instruction: 0x0002f4b0
   2f600:	andeq	pc, r2, r8, lsl r3	; <UNPREDICTABLE>
   2f604:			; <UNDEFINED> instruction: 0x0002f4b0
   2f608:			; <UNDEFINED> instruction: 0x0002f4b0
   2f60c:			; <UNDEFINED> instruction: 0x0002f4b0
   2f610:			; <UNDEFINED> instruction: 0x0002f4b0
   2f614:			; <UNDEFINED> instruction: 0x0002f4b0
   2f618:	andeq	pc, r2, r0, ror #6
   2f61c:			; <UNDEFINED> instruction: 0x0002f4b0
   2f620:			; <UNDEFINED> instruction: 0x0002f4b0
   2f624:			; <UNDEFINED> instruction: 0x0002f4b0
   2f628:			; <UNDEFINED> instruction: 0x0002f4b0
   2f62c:			; <UNDEFINED> instruction: 0x0002f4b0
   2f630:			; <UNDEFINED> instruction: 0x0002f4b0
   2f634:	andeq	pc, r2, ip, lsl #5
   2f638:	mov	r5, r4
   2f63c:	add	r3, sp, #520	; 0x208
   2f640:	cmp	r7, r3
   2f644:	beq	30df8 <flatcc_json_parser_generic_json@@Base+0x1d40>
   2f648:	add	r1, r5, #1
   2f64c:	mov	r3, #93	; 0x5d
   2f650:	sub	r2, r4, r1
   2f654:	cmp	r2, #1
   2f658:	strb	r3, [r7], #1
   2f65c:	ble	2f670 <flatcc_json_parser_generic_json@@Base+0x5b8>
   2f660:	ldrb	r3, [r5, #1]
   2f664:	cmp	r3, #32
   2f668:	bhi	30d5c <flatcc_json_parser_generic_json@@Base+0x1ca4>
   2f66c:	beq	30e94 <flatcc_json_parser_generic_json@@Base+0x1ddc>
   2f670:	cmp	r1, r4
   2f674:	beq	2f2f4 <flatcc_json_parser_generic_json@@Base+0x23c>
   2f678:	ldrb	r3, [r1]
   2f67c:	cmp	r3, #32
   2f680:	bne	30a50 <flatcc_json_parser_generic_json@@Base+0x1998>
   2f684:	add	r2, r1, #1
   2f688:	b	2f698 <flatcc_json_parser_generic_json@@Base+0x5e0>
   2f68c:	ldrb	r3, [r2], #1
   2f690:	cmp	r3, #32
   2f694:	bne	30a50 <flatcc_json_parser_generic_json@@Base+0x1998>
   2f698:	cmp	r4, r2
   2f69c:	mov	r1, r2
   2f6a0:	bne	2f68c <flatcc_json_parser_generic_json@@Base+0x5d4>
   2f6a4:	b	2f2f4 <flatcc_json_parser_generic_json@@Base+0x23c>
   2f6a8:	cmp	r3, #34	; 0x22
   2f6ac:	bne	2f730 <flatcc_json_parser_generic_json@@Base+0x678>
   2f6b0:	add	r3, r5, #1
   2f6b4:	cmp	r4, r3
   2f6b8:	beq	2f700 <flatcc_json_parser_generic_json@@Base+0x648>
   2f6bc:	ldrb	r1, [r5, #1]
   2f6c0:	cmp	r1, #34	; 0x22
   2f6c4:	bne	2f6e4 <flatcc_json_parser_generic_json@@Base+0x62c>
   2f6c8:	b	30368 <flatcc_json_parser_generic_json@@Base+0x12b0>
   2f6cc:	add	r3, r2, #1
   2f6d0:	cmp	r4, r3
   2f6d4:	beq	2f700 <flatcc_json_parser_generic_json@@Base+0x648>
   2f6d8:	ldrb	r1, [r2, #1]
   2f6dc:	cmp	r1, #34	; 0x22
   2f6e0:	beq	30368 <flatcc_json_parser_generic_json@@Base+0x12b0>
   2f6e4:	cmp	r1, #92	; 0x5c
   2f6e8:	mov	r2, r3
   2f6ec:	bne	2f6cc <flatcc_json_parser_generic_json@@Base+0x614>
   2f6f0:	sub	r1, r4, r3
   2f6f4:	add	r2, r3, #1
   2f6f8:	cmp	r1, #1
   2f6fc:	bgt	2f6cc <flatcc_json_parser_generic_json@@Base+0x614>
   2f700:	ldr	r2, [r6, #20]
   2f704:	cmp	r2, #0
   2f708:	bne	2f75c <flatcc_json_parser_generic_json@@Base+0x6a4>
   2f70c:	ldr	r0, [r6, #4]
   2f710:	mov	r1, #20
   2f714:	mov	r2, r1
   2f718:	str	r3, [r6, #32]
   2f71c:	str	r1, [r6, #20]
   2f720:	sub	r3, r3, r0
   2f724:	add	r3, r3, #1
   2f728:	str	r3, [r6, #16]
   2f72c:	b	2f75c <flatcc_json_parser_generic_json@@Base+0x6a4>
   2f730:	ldr	r2, [r6, #20]
   2f734:	cmp	r2, #0
   2f738:	bne	2f75c <flatcc_json_parser_generic_json@@Base+0x6a4>
   2f73c:	ldr	r3, [r6, #4]
   2f740:	mov	r1, #5
   2f744:	mov	r2, r1
   2f748:	str	r1, [r6, #20]
   2f74c:	str	r5, [r6, #32]
   2f750:	sub	r3, r5, r3
   2f754:	add	r3, r3, #1
   2f758:	str	r3, [r6, #16]
   2f75c:	mov	r1, r4
   2f760:	b	303c0 <flatcc_json_parser_generic_json@@Base+0x1308>
   2f764:	add	r1, r5, #1
   2f768:	cmp	r4, r1
   2f76c:	beq	30cd4 <flatcc_json_parser_generic_json@@Base+0x1c1c>
   2f770:	ldrb	r3, [r5, #1]
   2f774:	cmp	r3, #34	; 0x22
   2f778:	beq	2f808 <flatcc_json_parser_generic_json@@Base+0x750>
   2f77c:	mov	r5, #20
   2f780:	cmp	r4, r1
   2f784:	beq	30324 <flatcc_json_parser_generic_json@@Base+0x126c>
   2f788:	cmp	r3, #92	; 0x5c
   2f78c:	cmpne	r3, #31
   2f790:	addhi	r0, r1, #1
   2f794:	bls	30190 <flatcc_json_parser_generic_json@@Base+0x10d8>
   2f798:	cmp	r4, r0
   2f79c:	mov	r1, r0
   2f7a0:	beq	30324 <flatcc_json_parser_generic_json@@Base+0x126c>
   2f7a4:	ldrb	r3, [r0]
   2f7a8:	add	r0, r0, #1
   2f7ac:	cmp	r3, #34	; 0x22
   2f7b0:	cmpne	r3, #31
   2f7b4:	movhi	r2, #1
   2f7b8:	movls	r2, #0
   2f7bc:	cmp	r3, #92	; 0x5c
   2f7c0:	moveq	r2, #0
   2f7c4:	andne	r2, r2, #1
   2f7c8:	cmp	r2, #0
   2f7cc:	bne	2f798 <flatcc_json_parser_generic_json@@Base+0x6e0>
   2f7d0:	cmp	r3, #31
   2f7d4:	bls	30198 <flatcc_json_parser_generic_json@@Base+0x10e0>
   2f7d8:	cmp	r3, #34	; 0x22
   2f7dc:	beq	2f808 <flatcc_json_parser_generic_json@@Base+0x750>
   2f7e0:	add	r3, sp, #4
   2f7e4:	mov	r2, r4
   2f7e8:	mov	r0, r6
   2f7ec:	bl	2e528 <flatcc_json_parser_string_escape@@Base>
   2f7f0:	cmp	r4, r0
   2f7f4:	mov	r1, r0
   2f7f8:	beq	30cd4 <flatcc_json_parser_generic_json@@Base+0x1c1c>
   2f7fc:	ldrb	r3, [r0]
   2f800:	cmp	r3, #34	; 0x22
   2f804:	bne	2f780 <flatcc_json_parser_generic_json@@Base+0x6c8>
   2f808:	add	r0, r1, #1
   2f80c:	cmp	r4, r0
   2f810:	beq	2f958 <flatcc_json_parser_generic_json@@Base+0x8a0>
   2f814:	cmp	r7, r8
   2f818:	beq	2f2fc <flatcc_json_parser_generic_json@@Base+0x244>
   2f81c:	ldrb	r3, [r7, #-1]
   2f820:	sub	fp, r7, #1
   2f824:	sub	r2, r4, r0
   2f828:	cmp	r3, #93	; 0x5d
   2f82c:	beq	2f9b8 <flatcc_json_parser_generic_json@@Base+0x900>
   2f830:	cmp	r2, #1
   2f834:	ble	2f848 <flatcc_json_parser_generic_json@@Base+0x790>
   2f838:	ldrb	r3, [r0]
   2f83c:	cmp	r3, #32
   2f840:	bhi	2f858 <flatcc_json_parser_generic_json@@Base+0x7a0>
   2f844:	beq	2fb9c <flatcc_json_parser_generic_json@@Base+0xae4>
   2f848:	mov	r1, r0
   2f84c:	mov	r2, r4
   2f850:	mov	r0, r6
   2f854:	bl	2d9e4 <flatcc_json_parser_space_ext@@Base>
   2f858:	cmp	r4, r0
   2f85c:	beq	2f8a0 <flatcc_json_parser_generic_json@@Base+0x7e8>
   2f860:	ldrb	r3, [r0]
   2f864:	cmp	r3, #44	; 0x2c
   2f868:	beq	2fbb0 <flatcc_json_parser_generic_json@@Base+0xaf8>
   2f86c:	cmp	r3, #125	; 0x7d
   2f870:	beq	2fe78 <flatcc_json_parser_generic_json@@Base+0xdc0>
   2f874:	ldr	r3, [r6, #20]
   2f878:	cmp	r3, #0
   2f87c:	bne	2f9b0 <flatcc_json_parser_generic_json@@Base+0x8f8>
   2f880:	ldr	r3, [r6, #4]
   2f884:	mov	r2, #10
   2f888:	sub	r3, r0, r3
   2f88c:	str	r2, [r6, #20]
   2f890:	add	r3, r3, #1
   2f894:	str	r0, [r6, #32]
   2f898:	mov	r0, r4
   2f89c:	str	r3, [r6, #16]
   2f8a0:	cmp	fp, r8
   2f8a4:	beq	2f2fc <flatcc_json_parser_generic_json@@Base+0x244>
   2f8a8:	ldrb	r2, [fp, #-1]
   2f8ac:	ldr	r3, [r6, #20]
   2f8b0:	cmp	r2, #93	; 0x5d
   2f8b4:	moveq	r2, #9
   2f8b8:	movne	r2, #10
   2f8bc:	cmp	r3, #0
   2f8c0:	bne	2f2f8 <flatcc_json_parser_generic_json@@Base+0x240>
   2f8c4:	ldr	r3, [r6, #4]
   2f8c8:	str	r2, [r6, #20]
   2f8cc:	str	r0, [r6, #32]
   2f8d0:	sub	r3, r0, r3
   2f8d4:	mov	r0, r4
   2f8d8:	add	r3, r3, #1
   2f8dc:	str	r3, [r6, #16]
   2f8e0:	b	2f2fc <flatcc_json_parser_generic_json@@Base+0x244>
   2f8e4:	add	r0, r2, #1
   2f8e8:	cmp	r4, r0
   2f8ec:	beq	2f948 <flatcc_json_parser_generic_json@@Base+0x890>
   2f8f0:	ldrb	r3, [r2, #1]
   2f8f4:	sub	r1, r3, #48	; 0x30
   2f8f8:	cmp	r1, #9
   2f8fc:	bhi	312a8 <flatcc_json_parser_generic_json@@Base+0x21f0>
   2f900:	add	r2, r2, #2
   2f904:	cmp	r4, r2
   2f908:	mov	r0, r2
   2f90c:	beq	2f948 <flatcc_json_parser_generic_json@@Base+0x890>
   2f910:	ldrb	r3, [r2], #1
   2f914:	sub	r1, r3, #48	; 0x30
   2f918:	cmp	r1, #9
   2f91c:	bls	2f904 <flatcc_json_parser_generic_json@@Base+0x84c>
   2f920:	cmp	r3, #32
   2f924:	beq	2f80c <flatcc_json_parser_generic_json@@Base+0x754>
   2f928:	bls	2f960 <flatcc_json_parser_generic_json@@Base+0x8a8>
   2f92c:	cmp	r3, #58	; 0x3a
   2f930:	beq	2f80c <flatcc_json_parser_generic_json@@Base+0x754>
   2f934:	bls	2f97c <flatcc_json_parser_generic_json@@Base+0x8c4>
   2f938:	cmp	r3, #93	; 0x5d
   2f93c:	beq	2f80c <flatcc_json_parser_generic_json@@Base+0x754>
   2f940:	cmp	r3, #125	; 0x7d
   2f944:	beq	2f80c <flatcc_json_parser_generic_json@@Base+0x754>
   2f948:	ldr	r3, [r6, #20]
   2f94c:	cmp	r3, #0
   2f950:	beq	30d74 <flatcc_json_parser_generic_json@@Base+0x1cbc>
   2f954:	mov	r0, r4
   2f958:	mov	fp, r7
   2f95c:	b	2f8a0 <flatcc_json_parser_generic_json@@Base+0x7e8>
   2f960:	cmp	r3, #9
   2f964:	bcc	2f948 <flatcc_json_parser_generic_json@@Base+0x890>
   2f968:	cmp	r3, #11
   2f96c:	bls	2f80c <flatcc_json_parser_generic_json@@Base+0x754>
   2f970:	cmp	r3, #13
   2f974:	bne	2f948 <flatcc_json_parser_generic_json@@Base+0x890>
   2f978:	b	2f80c <flatcc_json_parser_generic_json@@Base+0x754>
   2f97c:	cmp	r3, #44	; 0x2c
   2f980:	bne	2f948 <flatcc_json_parser_generic_json@@Base+0x890>
   2f984:	b	2f80c <flatcc_json_parser_generic_json@@Base+0x754>
   2f988:	ldr	r3, [r6, #20]
   2f98c:	cmp	r3, #0
   2f990:	bne	2f9b0 <flatcc_json_parser_generic_json@@Base+0x8f8>
   2f994:	ldr	r3, [r6, #4]
   2f998:	mov	r2, #5
   2f99c:	str	r2, [r6, #20]
   2f9a0:	str	r5, [r6, #32]
   2f9a4:	sub	r3, r5, r3
   2f9a8:	add	r3, r3, #1
   2f9ac:	str	r3, [r6, #16]
   2f9b0:	mov	r0, r4
   2f9b4:	b	2f8a0 <flatcc_json_parser_generic_json@@Base+0x7e8>
   2f9b8:	cmp	r2, #1
   2f9bc:	ble	2f9d0 <flatcc_json_parser_generic_json@@Base+0x918>
   2f9c0:	ldrb	r3, [r0]
   2f9c4:	cmp	r3, #32
   2f9c8:	bhi	2fb1c <flatcc_json_parser_generic_json@@Base+0xa64>
   2f9cc:	beq	2fb0c <flatcc_json_parser_generic_json@@Base+0xa54>
   2f9d0:	cmp	r4, r0
   2f9d4:	beq	2f8a0 <flatcc_json_parser_generic_json@@Base+0x7e8>
   2f9d8:	ldrb	r3, [r0]
   2f9dc:	cmp	r3, #32
   2f9e0:	bne	2fa00 <flatcc_json_parser_generic_json@@Base+0x948>
   2f9e4:	add	r2, r0, #1
   2f9e8:	cmp	r4, r2
   2f9ec:	mov	r0, r2
   2f9f0:	beq	2f8a0 <flatcc_json_parser_generic_json@@Base+0x7e8>
   2f9f4:	ldrb	r3, [r2], #1
   2f9f8:	cmp	r3, #32
   2f9fc:	beq	2f9e8 <flatcc_json_parser_generic_json@@Base+0x930>
   2fa00:	cmp	r3, #32
   2fa04:	bhi	2fabc <flatcc_json_parser_generic_json@@Base+0xa04>
   2fa08:	sub	r3, r3, #9
   2fa0c:	cmp	r3, #23
   2fa10:	ldrls	pc, [pc, r3, lsl #2]
   2fa14:	b	2faf4 <flatcc_json_parser_generic_json@@Base+0xa3c>
   2fa18:	andeq	pc, r2, ip, ror #21
   2fa1c:	andeq	pc, r2, r4, ror #21
   2fa20:	strdeq	pc, [r2], -r4
   2fa24:	strdeq	pc, [r2], -r4
   2fa28:	andeq	pc, r2, r8, ror sl	; <UNPREDICTABLE>
   2fa2c:	strdeq	pc, [r2], -r4
   2fa30:	strdeq	pc, [r2], -r4
   2fa34:	strdeq	pc, [r2], -r4
   2fa38:	strdeq	pc, [r2], -r4
   2fa3c:	strdeq	pc, [r2], -r4
   2fa40:	strdeq	pc, [r2], -r4
   2fa44:	strdeq	pc, [r2], -r4
   2fa48:	strdeq	pc, [r2], -r4
   2fa4c:	strdeq	pc, [r2], -r4
   2fa50:	strdeq	pc, [r2], -r4
   2fa54:	strdeq	pc, [r2], -r4
   2fa58:	strdeq	pc, [r2], -r4
   2fa5c:	strdeq	pc, [r2], -r4
   2fa60:	strdeq	pc, [r2], -r4
   2fa64:	strdeq	pc, [r2], -r4
   2fa68:	strdeq	pc, [r2], -r4
   2fa6c:	strdeq	pc, [r2], -r4
   2fa70:	strdeq	pc, [r2], -r4
   2fa74:	ldrdeq	pc, [r2], -r0
   2fa78:	sub	r3, r4, r0
   2fa7c:	add	r2, r0, #1
   2fa80:	cmp	r3, #1
   2fa84:	ble	2fa94 <flatcc_json_parser_generic_json@@Base+0x9dc>
   2fa88:	ldrb	r3, [r0, #1]
   2fa8c:	cmp	r3, #10
   2fa90:	addeq	r2, r0, #2
   2fa94:	mov	r0, r2
   2fa98:	ldr	r3, [r6, #12]
   2fa9c:	str	r0, [r6, #4]
   2faa0:	add	r3, r3, #1
   2faa4:	str	r3, [r6, #12]
   2faa8:	cmp	r4, r0
   2faac:	beq	2f8a0 <flatcc_json_parser_generic_json@@Base+0x7e8>
   2fab0:	ldrb	r3, [r0]
   2fab4:	cmp	r3, #32
   2fab8:	bls	2fa08 <flatcc_json_parser_generic_json@@Base+0x950>
   2fabc:	cmp	r3, #44	; 0x2c
   2fac0:	beq	2fb2c <flatcc_json_parser_generic_json@@Base+0xa74>
   2fac4:	cmp	r3, #93	; 0x5d
   2fac8:	beq	301cc <flatcc_json_parser_generic_json@@Base+0x1114>
   2facc:	ldr	r3, [r6, #20]
   2fad0:	cmp	r3, #0
   2fad4:	bne	2f9b0 <flatcc_json_parser_generic_json@@Base+0x8f8>
   2fad8:	mov	r2, #9
   2fadc:	ldr	r3, [r6, #4]
   2fae0:	b	2f888 <flatcc_json_parser_generic_json@@Base+0x7d0>
   2fae4:	add	r0, r0, #1
   2fae8:	b	2fa98 <flatcc_json_parser_generic_json@@Base+0x9e0>
   2faec:	add	r0, r0, #1
   2faf0:	b	2faa8 <flatcc_json_parser_generic_json@@Base+0x9f0>
   2faf4:	ldr	r3, [r6, #20]
   2faf8:	cmp	r3, #0
   2fafc:	bne	2f9b0 <flatcc_json_parser_generic_json@@Base+0x8f8>
   2fb00:	mov	r2, #5
   2fb04:	ldr	r3, [r6, #4]
   2fb08:	b	2f888 <flatcc_json_parser_generic_json@@Base+0x7d0>
   2fb0c:	ldrb	r3, [r0, #1]
   2fb10:	cmp	r3, #32
   2fb14:	addhi	r0, r0, #1
   2fb18:	bls	2f9d0 <flatcc_json_parser_generic_json@@Base+0x918>
   2fb1c:	cmp	r4, r0
   2fb20:	beq	2f8a0 <flatcc_json_parser_generic_json@@Base+0x7e8>
   2fb24:	cmp	r3, #44	; 0x2c
   2fb28:	bne	2fac4 <flatcc_json_parser_generic_json@@Base+0xa0c>
   2fb2c:	add	r5, r0, #1
   2fb30:	sub	r3, r4, r5
   2fb34:	cmp	r3, #1
   2fb38:	ble	2fb4c <flatcc_json_parser_generic_json@@Base+0xa94>
   2fb3c:	ldrb	r3, [r0, #1]
   2fb40:	cmp	r3, #32
   2fb44:	bhi	3034c <flatcc_json_parser_generic_json@@Base+0x1294>
   2fb48:	beq	3033c <flatcc_json_parser_generic_json@@Base+0x1284>
   2fb4c:	cmp	r4, r5
   2fb50:	beq	2fb84 <flatcc_json_parser_generic_json@@Base+0xacc>
   2fb54:	ldrb	r3, [r5]
   2fb58:	cmp	r3, #32
   2fb5c:	bne	2fff4 <flatcc_json_parser_generic_json@@Base+0xf3c>
   2fb60:	add	r2, r5, #1
   2fb64:	b	2fb74 <flatcc_json_parser_generic_json@@Base+0xabc>
   2fb68:	ldrb	r3, [r2], #1
   2fb6c:	cmp	r3, #32
   2fb70:	bne	2fff4 <flatcc_json_parser_generic_json@@Base+0xf3c>
   2fb74:	cmp	r2, r4
   2fb78:	mov	r5, r2
   2fb7c:	bne	2fb68 <flatcc_json_parser_generic_json@@Base+0xab0>
   2fb80:	mov	r5, r4
   2fb84:	ldr	r3, [r6, #20]
   2fb88:	cmp	r3, #0
   2fb8c:	bne	2f9b0 <flatcc_json_parser_generic_json@@Base+0x8f8>
   2fb90:	mov	r2, #9
   2fb94:	ldr	r3, [r6, #4]
   2fb98:	b	2fc18 <flatcc_json_parser_generic_json@@Base+0xb60>
   2fb9c:	ldrb	r3, [r0, #1]
   2fba0:	cmp	r3, #32
   2fba4:	addhi	r0, r0, #1
   2fba8:	bls	2f848 <flatcc_json_parser_generic_json@@Base+0x790>
   2fbac:	b	2f858 <flatcc_json_parser_generic_json@@Base+0x7a0>
   2fbb0:	add	r5, r0, #1
   2fbb4:	sub	r3, r4, r5
   2fbb8:	cmp	r3, #1
   2fbbc:	ble	2fbd0 <flatcc_json_parser_generic_json@@Base+0xb18>
   2fbc0:	ldrb	r3, [r0, #1]
   2fbc4:	cmp	r3, #32
   2fbc8:	bhi	2ffe8 <flatcc_json_parser_generic_json@@Base+0xf30>
   2fbcc:	beq	2ffd8 <flatcc_json_parser_generic_json@@Base+0xf20>
   2fbd0:	cmp	r4, r5
   2fbd4:	beq	2fc04 <flatcc_json_parser_generic_json@@Base+0xb4c>
   2fbd8:	ldrb	r3, [r5]
   2fbdc:	cmp	r3, #32
   2fbe0:	bne	2fc34 <flatcc_json_parser_generic_json@@Base+0xb7c>
   2fbe4:	add	r2, r5, #1
   2fbe8:	b	2fbf8 <flatcc_json_parser_generic_json@@Base+0xb40>
   2fbec:	ldrb	r3, [r2], #1
   2fbf0:	cmp	r3, #32
   2fbf4:	bne	2fc34 <flatcc_json_parser_generic_json@@Base+0xb7c>
   2fbf8:	cmp	r4, r2
   2fbfc:	mov	r5, r2
   2fc00:	bne	2fbec <flatcc_json_parser_generic_json@@Base+0xb34>
   2fc04:	ldr	r3, [r6, #20]
   2fc08:	cmp	r3, #0
   2fc0c:	bne	2f9b0 <flatcc_json_parser_generic_json@@Base+0x8f8>
   2fc10:	ldr	r3, [r6, #4]
   2fc14:	mov	r2, #10
   2fc18:	sub	r3, r5, r3
   2fc1c:	mov	r0, r4
   2fc20:	str	r2, [r6, #20]
   2fc24:	add	r3, r3, #1
   2fc28:	str	r3, [r6, #16]
   2fc2c:	str	r5, [r6, #32]
   2fc30:	b	2f8a0 <flatcc_json_parser_generic_json@@Base+0x7e8>
   2fc34:	cmp	r3, #32
   2fc38:	bhi	2fcf0 <flatcc_json_parser_generic_json@@Base+0xc38>
   2fc3c:	sub	r3, r3, #9
   2fc40:	cmp	r3, #23
   2fc44:	ldrls	pc, [pc, r3, lsl #2]
   2fc48:	b	2fd48 <flatcc_json_parser_generic_json@@Base+0xc90>
   2fc4c:	andeq	pc, r2, r0, asr #26
   2fc50:	andeq	pc, r2, r8, lsr sp	; <UNPREDICTABLE>
   2fc54:	andeq	pc, r2, r8, asr #26
   2fc58:	andeq	pc, r2, r8, asr #26
   2fc5c:	andeq	pc, r2, ip, lsr #25
   2fc60:	andeq	pc, r2, r8, asr #26
   2fc64:	andeq	pc, r2, r8, asr #26
   2fc68:	andeq	pc, r2, r8, asr #26
   2fc6c:	andeq	pc, r2, r8, asr #26
   2fc70:	andeq	pc, r2, r8, asr #26
   2fc74:	andeq	pc, r2, r8, asr #26
   2fc78:	andeq	pc, r2, r8, asr #26
   2fc7c:	andeq	pc, r2, r8, asr #26
   2fc80:	andeq	pc, r2, r8, asr #26
   2fc84:	andeq	pc, r2, r8, asr #26
   2fc88:	andeq	pc, r2, r8, asr #26
   2fc8c:	andeq	pc, r2, r8, asr #26
   2fc90:	andeq	pc, r2, r8, asr #26
   2fc94:	andeq	pc, r2, r8, asr #26
   2fc98:	andeq	pc, r2, r8, asr #26
   2fc9c:	andeq	pc, r2, r8, asr #26
   2fca0:	andeq	pc, r2, r8, asr #26
   2fca4:	andeq	pc, r2, r8, asr #26
   2fca8:	ldrdeq	pc, [r2], -r0
   2fcac:	sub	r3, r4, r5
   2fcb0:	add	r2, r5, #1
   2fcb4:	cmp	r3, #1
   2fcb8:	ble	2fcc8 <flatcc_json_parser_generic_json@@Base+0xc10>
   2fcbc:	ldrb	r3, [r5, #1]
   2fcc0:	cmp	r3, #10
   2fcc4:	addeq	r2, r5, #2
   2fcc8:	mov	r5, r2
   2fccc:	ldr	r3, [r6, #12]
   2fcd0:	str	r5, [r6, #4]
   2fcd4:	add	r3, r3, #1
   2fcd8:	str	r3, [r6, #12]
   2fcdc:	cmp	r4, r5
   2fce0:	beq	2fc04 <flatcc_json_parser_generic_json@@Base+0xb4c>
   2fce4:	ldrb	r3, [r5]
   2fce8:	cmp	r3, #32
   2fcec:	bls	2fc3c <flatcc_json_parser_generic_json@@Base+0xb84>
   2fcf0:	cmp	r3, #125	; 0x7d
   2fcf4:	bne	2f0fc <flatcc_json_parser_generic_json@@Base+0x44>
   2fcf8:	add	r0, r5, #1
   2fcfc:	sub	r3, r4, r0
   2fd00:	cmp	r3, #1
   2fd04:	ble	2fd78 <flatcc_json_parser_generic_json@@Base+0xcc0>
   2fd08:	ldrb	r3, [r5, #1]
   2fd0c:	cmp	r3, #32
   2fd10:	bhi	2fd28 <flatcc_json_parser_generic_json@@Base+0xc70>
   2fd14:	bne	2fd78 <flatcc_json_parser_generic_json@@Base+0xcc0>
   2fd18:	ldrb	r3, [r5, #2]
   2fd1c:	cmp	r3, #32
   2fd20:	bls	2fd78 <flatcc_json_parser_generic_json@@Base+0xcc0>
   2fd24:	add	r0, r5, #2
   2fd28:	cmp	r4, r0
   2fd2c:	beq	2f8a0 <flatcc_json_parser_generic_json@@Base+0x7e8>
   2fd30:	mov	r7, fp
   2fd34:	b	2f814 <flatcc_json_parser_generic_json@@Base+0x75c>
   2fd38:	add	r5, r5, #1
   2fd3c:	b	2fccc <flatcc_json_parser_generic_json@@Base+0xc14>
   2fd40:	add	r5, r5, #1
   2fd44:	b	2fcdc <flatcc_json_parser_generic_json@@Base+0xc24>
   2fd48:	ldr	r3, [r6, #20]
   2fd4c:	cmp	r3, #0
   2fd50:	bne	2f9b0 <flatcc_json_parser_generic_json@@Base+0x8f8>
   2fd54:	ldr	r3, [r6, #4]
   2fd58:	mov	r2, #5
   2fd5c:	mov	r0, r4
   2fd60:	str	r5, [r6, #32]
   2fd64:	str	r2, [r6, #20]
   2fd68:	sub	r5, r5, r3
   2fd6c:	add	r5, r5, #1
   2fd70:	str	r5, [r6, #16]
   2fd74:	b	2f8a0 <flatcc_json_parser_generic_json@@Base+0x7e8>
   2fd78:	cmp	r4, r0
   2fd7c:	beq	2f8a0 <flatcc_json_parser_generic_json@@Base+0x7e8>
   2fd80:	ldrb	r2, [r0]
   2fd84:	cmp	r2, #32
   2fd88:	bne	2fda8 <flatcc_json_parser_generic_json@@Base+0xcf0>
   2fd8c:	add	r3, r0, #1
   2fd90:	cmp	r3, r4
   2fd94:	mov	r0, r3
   2fd98:	beq	2f8a0 <flatcc_json_parser_generic_json@@Base+0x7e8>
   2fd9c:	ldrb	r2, [r3], #1
   2fda0:	cmp	r2, #32
   2fda4:	beq	2fd90 <flatcc_json_parser_generic_json@@Base+0xcd8>
   2fda8:	cmp	r2, #32
   2fdac:	bhi	2fd30 <flatcc_json_parser_generic_json@@Base+0xc78>
   2fdb0:	sub	r2, r2, #9
   2fdb4:	cmp	r2, #23
   2fdb8:	ldrls	pc, [pc, r2, lsl #2]
   2fdbc:	b	2faf4 <flatcc_json_parser_generic_json@@Base+0xa3c>
   2fdc0:	andeq	pc, r2, r0, ror lr	; <UNPREDICTABLE>
   2fdc4:	andeq	pc, r2, r4, asr #28
   2fdc8:	strdeq	pc, [r2], -r4
   2fdcc:	strdeq	pc, [r2], -r4
   2fdd0:	andeq	pc, r2, r0, lsr #28
   2fdd4:	strdeq	pc, [r2], -r4
   2fdd8:	strdeq	pc, [r2], -r4
   2fddc:	strdeq	pc, [r2], -r4
   2fde0:	strdeq	pc, [r2], -r4
   2fde4:	strdeq	pc, [r2], -r4
   2fde8:	strdeq	pc, [r2], -r4
   2fdec:	strdeq	pc, [r2], -r4
   2fdf0:	strdeq	pc, [r2], -r4
   2fdf4:	strdeq	pc, [r2], -r4
   2fdf8:	strdeq	pc, [r2], -r4
   2fdfc:	strdeq	pc, [r2], -r4
   2fe00:	strdeq	pc, [r2], -r4
   2fe04:	strdeq	pc, [r2], -r4
   2fe08:	strdeq	pc, [r2], -r4
   2fe0c:	strdeq	pc, [r2], -r4
   2fe10:	strdeq	pc, [r2], -r4
   2fe14:	strdeq	pc, [r2], -r4
   2fe18:	strdeq	pc, [r2], -r4
   2fe1c:	andeq	pc, r2, r8, ror sp	; <UNPREDICTABLE>
   2fe20:	sub	r3, r4, r0
   2fe24:	add	r2, r0, #1
   2fe28:	cmp	r3, #1
   2fe2c:	ble	2fe3c <flatcc_json_parser_generic_json@@Base+0xd84>
   2fe30:	ldrb	r3, [r0, #1]
   2fe34:	cmp	r3, #10
   2fe38:	addeq	r2, r0, #2
   2fe3c:	mov	r0, r2
   2fe40:	b	2fe48 <flatcc_json_parser_generic_json@@Base+0xd90>
   2fe44:	add	r0, r0, #1
   2fe48:	ldr	r3, [r6, #12]
   2fe4c:	str	r0, [r6, #4]
   2fe50:	add	r3, r3, #1
   2fe54:	str	r3, [r6, #12]
   2fe58:	cmp	r4, r0
   2fe5c:	beq	2f8a0 <flatcc_json_parser_generic_json@@Base+0x7e8>
   2fe60:	ldrb	r2, [r0]
   2fe64:	cmp	r2, #32
   2fe68:	bls	2fdb0 <flatcc_json_parser_generic_json@@Base+0xcf8>
   2fe6c:	b	2fd30 <flatcc_json_parser_generic_json@@Base+0xc78>
   2fe70:	add	r0, r0, #1
   2fe74:	b	2fe58 <flatcc_json_parser_generic_json@@Base+0xda0>
   2fe78:	add	r1, r0, #1
   2fe7c:	sub	r3, r4, r1
   2fe80:	cmp	r3, #1
   2fe84:	ble	2fe98 <flatcc_json_parser_generic_json@@Base+0xde0>
   2fe88:	ldrb	r3, [r0, #1]
   2fe8c:	cmp	r3, #32
   2fe90:	bhi	30360 <flatcc_json_parser_generic_json@@Base+0x12a8>
   2fe94:	beq	30b30 <flatcc_json_parser_generic_json@@Base+0x1a78>
   2fe98:	cmp	r4, r1
   2fe9c:	beq	2fecc <flatcc_json_parser_generic_json@@Base+0xe14>
   2fea0:	ldrb	r2, [r1]
   2fea4:	cmp	r2, #32
   2fea8:	bne	2fed4 <flatcc_json_parser_generic_json@@Base+0xe1c>
   2feac:	add	r3, r1, #1
   2feb0:	b	2fec0 <flatcc_json_parser_generic_json@@Base+0xe08>
   2feb4:	ldrb	r2, [r3], #1
   2feb8:	cmp	r2, #32
   2febc:	bne	2fed4 <flatcc_json_parser_generic_json@@Base+0xe1c>
   2fec0:	cmp	r3, r4
   2fec4:	mov	r1, r3
   2fec8:	bne	2feb4 <flatcc_json_parser_generic_json@@Base+0xdfc>
   2fecc:	mov	r0, r1
   2fed0:	b	2f8a0 <flatcc_json_parser_generic_json@@Base+0x7e8>
   2fed4:	cmp	r2, #32
   2fed8:	bhi	2ff90 <flatcc_json_parser_generic_json@@Base+0xed8>
   2fedc:	sub	r2, r2, #9
   2fee0:	cmp	r2, #23
   2fee4:	ldrls	pc, [pc, r2, lsl #2]
   2fee8:	b	2ffa8 <flatcc_json_parser_generic_json@@Base+0xef0>
   2feec:	andeq	pc, r2, r0, lsr #31
   2fef0:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   2fef4:	andeq	pc, r2, r8, lsr #31
   2fef8:	andeq	pc, r2, r8, lsr #31
   2fefc:	andeq	pc, r2, ip, asr #30
   2ff00:	andeq	pc, r2, r8, lsr #31
   2ff04:	andeq	pc, r2, r8, lsr #31
   2ff08:	andeq	pc, r2, r8, lsr #31
   2ff0c:	andeq	pc, r2, r8, lsr #31
   2ff10:	andeq	pc, r2, r8, lsr #31
   2ff14:	andeq	pc, r2, r8, lsr #31
   2ff18:	andeq	pc, r2, r8, lsr #31
   2ff1c:	andeq	pc, r2, r8, lsr #31
   2ff20:	andeq	pc, r2, r8, lsr #31
   2ff24:	andeq	pc, r2, r8, lsr #31
   2ff28:	andeq	pc, r2, r8, lsr #31
   2ff2c:	andeq	pc, r2, r8, lsr #31
   2ff30:	andeq	pc, r2, r8, lsr #31
   2ff34:	andeq	pc, r2, r8, lsr #31
   2ff38:	andeq	pc, r2, r8, lsr #31
   2ff3c:	andeq	pc, r2, r8, lsr #31
   2ff40:	andeq	pc, r2, r8, lsr #31
   2ff44:	andeq	pc, r2, r8, lsr #31
   2ff48:	muleq	r2, r8, lr
   2ff4c:	sub	r3, r4, r1
   2ff50:	add	r2, r1, #1
   2ff54:	cmp	r3, #1
   2ff58:	ble	2ff68 <flatcc_json_parser_generic_json@@Base+0xeb0>
   2ff5c:	ldrb	r3, [r1, #1]
   2ff60:	cmp	r3, #10
   2ff64:	addeq	r2, r1, #2
   2ff68:	mov	r1, r2
   2ff6c:	ldr	r3, [r6, #12]
   2ff70:	str	r1, [r6, #4]
   2ff74:	add	r3, r3, #1
   2ff78:	str	r3, [r6, #12]
   2ff7c:	cmp	r4, r1
   2ff80:	beq	2f9b0 <flatcc_json_parser_generic_json@@Base+0x8f8>
   2ff84:	ldrb	r2, [r1]
   2ff88:	cmp	r2, #32
   2ff8c:	bls	2fedc <flatcc_json_parser_generic_json@@Base+0xe24>
   2ff90:	mov	r0, r1
   2ff94:	b	2fd30 <flatcc_json_parser_generic_json@@Base+0xc78>
   2ff98:	add	r1, r1, #1
   2ff9c:	b	2ff6c <flatcc_json_parser_generic_json@@Base+0xeb4>
   2ffa0:	add	r1, r1, #1
   2ffa4:	b	2ff7c <flatcc_json_parser_generic_json@@Base+0xec4>
   2ffa8:	ldr	r3, [r6, #20]
   2ffac:	cmp	r3, #0
   2ffb0:	bne	2f9b0 <flatcc_json_parser_generic_json@@Base+0x8f8>
   2ffb4:	ldr	r3, [r6, #4]
   2ffb8:	mov	r2, #5
   2ffbc:	mov	r0, r4
   2ffc0:	str	r1, [r6, #32]
   2ffc4:	str	r2, [r6, #20]
   2ffc8:	sub	r1, r1, r3
   2ffcc:	add	r1, r1, #1
   2ffd0:	str	r1, [r6, #16]
   2ffd4:	b	2f8a0 <flatcc_json_parser_generic_json@@Base+0x7e8>
   2ffd8:	ldrb	r3, [r0, #2]
   2ffdc:	cmp	r3, #32
   2ffe0:	addhi	r5, r0, #2
   2ffe4:	bls	2fbd0 <flatcc_json_parser_generic_json@@Base+0xb18>
   2ffe8:	cmp	r4, r5
   2ffec:	bne	2fcf0 <flatcc_json_parser_generic_json@@Base+0xc38>
   2fff0:	b	2fc04 <flatcc_json_parser_generic_json@@Base+0xb4c>
   2fff4:	cmp	r3, #32
   2fff8:	bhi	300b0 <flatcc_json_parser_generic_json@@Base+0xff8>
   2fffc:	sub	r3, r3, #9
   30000:	cmp	r3, #23
   30004:	ldrls	pc, [pc, r3, lsl #2]
   30008:	b	2f988 <flatcc_json_parser_generic_json@@Base+0x8d0>
   3000c:	andeq	r0, r3, r8, lsl #3
   30010:	andeq	r0, r3, r0, lsl #3
   30014:	andeq	pc, r2, r8, lsl #19
   30018:	andeq	pc, r2, r8, lsl #19
   3001c:	andeq	r0, r3, ip, rrx
   30020:	andeq	pc, r2, r8, lsl #19
   30024:	andeq	pc, r2, r8, lsl #19
   30028:	andeq	pc, r2, r8, lsl #19
   3002c:	andeq	pc, r2, r8, lsl #19
   30030:	andeq	pc, r2, r8, lsl #19
   30034:	andeq	pc, r2, r8, lsl #19
   30038:	andeq	pc, r2, r8, lsl #19
   3003c:	andeq	pc, r2, r8, lsl #19
   30040:	andeq	pc, r2, r8, lsl #19
   30044:	andeq	pc, r2, r8, lsl #19
   30048:	andeq	pc, r2, r8, lsl #19
   3004c:	andeq	pc, r2, r8, lsl #19
   30050:	andeq	pc, r2, r8, lsl #19
   30054:	andeq	pc, r2, r8, lsl #19
   30058:	andeq	pc, r2, r8, lsl #19
   3005c:	andeq	pc, r2, r8, lsl #19
   30060:	andeq	pc, r2, r8, lsl #19
   30064:	andeq	pc, r2, r8, lsl #19
   30068:	andeq	pc, r2, ip, asr #22
   3006c:	sub	r3, r4, r5
   30070:	add	r2, r5, #1
   30074:	cmp	r3, #1
   30078:	ble	30088 <flatcc_json_parser_generic_json@@Base+0xfd0>
   3007c:	ldrb	r3, [r5, #1]
   30080:	cmp	r3, #10
   30084:	addeq	r2, r5, #2
   30088:	mov	r5, r2
   3008c:	ldr	r3, [r6, #12]
   30090:	str	r5, [r6, #4]
   30094:	add	r3, r3, #1
   30098:	str	r3, [r6, #12]
   3009c:	cmp	r4, r5
   300a0:	beq	2fb84 <flatcc_json_parser_generic_json@@Base+0xacc>
   300a4:	ldrb	r3, [r5]
   300a8:	cmp	r3, #32
   300ac:	bls	2fffc <flatcc_json_parser_generic_json@@Base+0xf44>
   300b0:	cmp	r3, #93	; 0x5d
   300b4:	bne	2f0fc <flatcc_json_parser_generic_json@@Base+0x44>
   300b8:	add	r0, r5, #1
   300bc:	sub	r3, r4, r0
   300c0:	cmp	r3, #1
   300c4:	ble	300d8 <flatcc_json_parser_generic_json@@Base+0x1020>
   300c8:	ldrb	r3, [r5, #1]
   300cc:	cmp	r3, #32
   300d0:	bhi	2fd28 <flatcc_json_parser_generic_json@@Base+0xc70>
   300d4:	beq	31248 <flatcc_json_parser_generic_json@@Base+0x2190>
   300d8:	cmp	r4, r0
   300dc:	beq	2f8a0 <flatcc_json_parser_generic_json@@Base+0x7e8>
   300e0:	ldrb	r2, [r0]
   300e4:	cmp	r2, #32
   300e8:	bne	30108 <flatcc_json_parser_generic_json@@Base+0x1050>
   300ec:	add	r3, r0, #1
   300f0:	cmp	r4, r3
   300f4:	mov	r0, r3
   300f8:	beq	2f8a0 <flatcc_json_parser_generic_json@@Base+0x7e8>
   300fc:	ldrb	r2, [r3], #1
   30100:	cmp	r2, #32
   30104:	beq	300f0 <flatcc_json_parser_generic_json@@Base+0x1038>
   30108:	cmp	r2, #32
   3010c:	bhi	2fd30 <flatcc_json_parser_generic_json@@Base+0xc78>
   30110:	sub	r2, r2, #9
   30114:	cmp	r2, #23
   30118:	ldrls	pc, [pc, r2, lsl #2]
   3011c:	b	2faf4 <flatcc_json_parser_generic_json@@Base+0xa3c>
   30120:	andeq	r0, r3, r8, ror #27
   30124:	andeq	r0, r3, r0, ror #27
   30128:	strdeq	pc, [r2], -r4
   3012c:	strdeq	pc, [r2], -r4
   30130:	muleq	r3, r8, sp
   30134:	strdeq	pc, [r2], -r4
   30138:	strdeq	pc, [r2], -r4
   3013c:	strdeq	pc, [r2], -r4
   30140:	strdeq	pc, [r2], -r4
   30144:	strdeq	pc, [r2], -r4
   30148:	strdeq	pc, [r2], -r4
   3014c:	strdeq	pc, [r2], -r4
   30150:	strdeq	pc, [r2], -r4
   30154:	strdeq	pc, [r2], -r4
   30158:	strdeq	pc, [r2], -r4
   3015c:	strdeq	pc, [r2], -r4
   30160:	strdeq	pc, [r2], -r4
   30164:	strdeq	pc, [r2], -r4
   30168:	strdeq	pc, [r2], -r4
   3016c:	strdeq	pc, [r2], -r4
   30170:	strdeq	pc, [r2], -r4
   30174:	strdeq	pc, [r2], -r4
   30178:	strdeq	pc, [r2], -r4
   3017c:	ldrdeq	r0, [r3], -r8
   30180:	add	r5, r5, #1
   30184:	b	3008c <flatcc_json_parser_generic_json@@Base+0xfd4>
   30188:	add	r5, r5, #1
   3018c:	b	3009c <flatcc_json_parser_generic_json@@Base+0xfe4>
   30190:	cmp	r3, #31
   30194:	bhi	2f7e0 <flatcc_json_parser_generic_json@@Base+0x728>
   30198:	ldr	r3, [r6, #20]
   3019c:	cmp	r3, #0
   301a0:	bne	301c4 <flatcc_json_parser_generic_json@@Base+0x110c>
   301a4:	ldr	r3, [r6, #4]
   301a8:	str	sl, [r6, #20]
   301ac:	sub	r3, r1, r3
   301b0:	str	r1, [r6, #32]
   301b4:	mov	r1, r4
   301b8:	add	r3, r3, #1
   301bc:	str	r3, [r6, #16]
   301c0:	b	2f7e0 <flatcc_json_parser_generic_json@@Base+0x728>
   301c4:	mov	r1, r4
   301c8:	b	2f7e0 <flatcc_json_parser_generic_json@@Base+0x728>
   301cc:	add	r1, r0, #1
   301d0:	sub	r3, r4, r1
   301d4:	cmp	r3, #1
   301d8:	ble	301ec <flatcc_json_parser_generic_json@@Base+0x1134>
   301dc:	ldrb	r3, [r0, #1]
   301e0:	cmp	r3, #32
   301e4:	bhi	30360 <flatcc_json_parser_generic_json@@Base+0x12a8>
   301e8:	beq	30d04 <flatcc_json_parser_generic_json@@Base+0x1c4c>
   301ec:	cmp	r4, r1
   301f0:	beq	2fecc <flatcc_json_parser_generic_json@@Base+0xe14>
   301f4:	ldrb	r2, [r1]
   301f8:	cmp	r2, #32
   301fc:	bne	30224 <flatcc_json_parser_generic_json@@Base+0x116c>
   30200:	add	r3, r1, #1
   30204:	b	30214 <flatcc_json_parser_generic_json@@Base+0x115c>
   30208:	ldrb	r2, [r3], #1
   3020c:	cmp	r2, #32
   30210:	bne	30224 <flatcc_json_parser_generic_json@@Base+0x116c>
   30214:	cmp	r4, r3
   30218:	mov	r1, r3
   3021c:	bne	30208 <flatcc_json_parser_generic_json@@Base+0x1150>
   30220:	b	2fecc <flatcc_json_parser_generic_json@@Base+0xe14>
   30224:	cmp	r2, #32
   30228:	bhi	2ff90 <flatcc_json_parser_generic_json@@Base+0xed8>
   3022c:	sub	r2, r2, #9
   30230:	cmp	r2, #23
   30234:	ldrls	pc, [pc, r2, lsl #2]
   30238:	b	302f4 <flatcc_json_parser_generic_json@@Base+0x123c>
   3023c:	andeq	r0, r3, ip, ror #5
   30240:	andeq	r0, r3, r4, ror #5
   30244:	strdeq	r0, [r3], -r4
   30248:	strdeq	r0, [r3], -r4
   3024c:	muleq	r3, ip, r2
   30250:	strdeq	r0, [r3], -r4
   30254:	strdeq	r0, [r3], -r4
   30258:	strdeq	r0, [r3], -r4
   3025c:	strdeq	r0, [r3], -r4
   30260:	strdeq	r0, [r3], -r4
   30264:	strdeq	r0, [r3], -r4
   30268:	strdeq	r0, [r3], -r4
   3026c:	strdeq	r0, [r3], -r4
   30270:	strdeq	r0, [r3], -r4
   30274:	strdeq	r0, [r3], -r4
   30278:	strdeq	r0, [r3], -r4
   3027c:	strdeq	r0, [r3], -r4
   30280:	strdeq	r0, [r3], -r4
   30284:	strdeq	r0, [r3], -r4
   30288:	strdeq	r0, [r3], -r4
   3028c:	strdeq	r0, [r3], -r4
   30290:	strdeq	r0, [r3], -r4
   30294:	strdeq	r0, [r3], -r4
   30298:	andeq	r0, r3, ip, ror #3
   3029c:	sub	r3, r4, r1
   302a0:	add	r2, r1, #1
   302a4:	cmp	r3, #1
   302a8:	ble	302b8 <flatcc_json_parser_generic_json@@Base+0x1200>
   302ac:	ldrb	r3, [r1, #1]
   302b0:	cmp	r3, #10
   302b4:	addeq	r2, r1, #2
   302b8:	mov	r1, r2
   302bc:	ldr	r3, [r6, #12]
   302c0:	str	r1, [r6, #4]
   302c4:	add	r3, r3, #1
   302c8:	str	r3, [r6, #12]
   302cc:	cmp	r4, r1
   302d0:	beq	2f9b0 <flatcc_json_parser_generic_json@@Base+0x8f8>
   302d4:	ldrb	r2, [r1]
   302d8:	cmp	r2, #32
   302dc:	bls	3022c <flatcc_json_parser_generic_json@@Base+0x1174>
   302e0:	b	2ff90 <flatcc_json_parser_generic_json@@Base+0xed8>
   302e4:	add	r1, r1, #1
   302e8:	b	302bc <flatcc_json_parser_generic_json@@Base+0x1204>
   302ec:	add	r1, r1, #1
   302f0:	b	302cc <flatcc_json_parser_generic_json@@Base+0x1214>
   302f4:	ldr	r3, [r6, #20]
   302f8:	cmp	r3, #0
   302fc:	bne	2f9b0 <flatcc_json_parser_generic_json@@Base+0x8f8>
   30300:	ldr	r3, [r6, #4]
   30304:	mov	r2, #5
   30308:	mov	r0, r4
   3030c:	str	r2, [r6, #20]
   30310:	str	r1, [r6, #32]
   30314:	sub	r3, r1, r3
   30318:	add	r3, r3, #1
   3031c:	str	r3, [r6, #16]
   30320:	b	2f8a0 <flatcc_json_parser_generic_json@@Base+0x7e8>
   30324:	ldr	r3, [r6, #20]
   30328:	cmp	r3, #0
   3032c:	bne	301c4 <flatcc_json_parser_generic_json@@Base+0x110c>
   30330:	str	r5, [r6, #20]
   30334:	ldr	r3, [r6, #4]
   30338:	b	301ac <flatcc_json_parser_generic_json@@Base+0x10f4>
   3033c:	ldrb	r3, [r0, #2]
   30340:	cmp	r3, #32
   30344:	addhi	r5, r0, #2
   30348:	bls	2fb4c <flatcc_json_parser_generic_json@@Base+0xa94>
   3034c:	cmp	r4, r5
   30350:	beq	2fb84 <flatcc_json_parser_generic_json@@Base+0xacc>
   30354:	cmp	r3, #93	; 0x5d
   30358:	bne	2f0fc <flatcc_json_parser_generic_json@@Base+0x44>
   3035c:	b	300b8 <flatcc_json_parser_generic_json@@Base+0x1000>
   30360:	mov	r0, r1
   30364:	b	2fd28 <flatcc_json_parser_generic_json@@Base+0xc70>
   30368:	add	r1, r3, #1
   3036c:	sub	r2, r4, r1
   30370:	cmp	r2, #1
   30374:	ble	30388 <flatcc_json_parser_generic_json@@Base+0x12d0>
   30378:	ldrb	r2, [r3, #1]
   3037c:	cmp	r2, #32
   30380:	bhi	30964 <flatcc_json_parser_generic_json@@Base+0x18ac>
   30384:	beq	30954 <flatcc_json_parser_generic_json@@Base+0x189c>
   30388:	cmp	r4, r1
   3038c:	beq	303bc <flatcc_json_parser_generic_json@@Base+0x1304>
   30390:	ldrb	r2, [r1]
   30394:	cmp	r2, #32
   30398:	bne	303ec <flatcc_json_parser_generic_json@@Base+0x1334>
   3039c:	add	r3, r1, #1
   303a0:	b	303b0 <flatcc_json_parser_generic_json@@Base+0x12f8>
   303a4:	ldrb	r2, [r3], #1
   303a8:	cmp	r2, #32
   303ac:	bne	303ec <flatcc_json_parser_generic_json@@Base+0x1334>
   303b0:	cmp	r4, r3
   303b4:	mov	r1, r3
   303b8:	bne	303a4 <flatcc_json_parser_generic_json@@Base+0x12ec>
   303bc:	ldr	r2, [r6, #20]
   303c0:	cmp	r2, #0
   303c4:	bne	2f2f8 <flatcc_json_parser_generic_json@@Base+0x240>
   303c8:	ldr	r3, [r6, #4]
   303cc:	mov	r2, #10
   303d0:	sub	r3, r1, r3
   303d4:	mov	r0, r4
   303d8:	str	r2, [r6, #20]
   303dc:	add	r3, r3, #1
   303e0:	str	r3, [r6, #16]
   303e4:	str	r1, [r6, #32]
   303e8:	b	2f2fc <flatcc_json_parser_generic_json@@Base+0x244>
   303ec:	cmp	r2, #32
   303f0:	bhi	304a8 <flatcc_json_parser_generic_json@@Base+0x13f0>
   303f4:	sub	r2, r2, #9
   303f8:	cmp	r2, #23
   303fc:	ldrls	pc, [pc, r2, lsl #2]
   30400:	b	30580 <flatcc_json_parser_generic_json@@Base+0x14c8>
   30404:	andeq	r0, r3, r8, ror r5
   30408:	andeq	r0, r3, r0, ror r5
   3040c:	andeq	r0, r3, r0, lsl #11
   30410:	andeq	r0, r3, r0, lsl #11
   30414:	andeq	r0, r3, r4, ror #8
   30418:	andeq	r0, r3, r0, lsl #11
   3041c:	andeq	r0, r3, r0, lsl #11
   30420:	andeq	r0, r3, r0, lsl #11
   30424:	andeq	r0, r3, r0, lsl #11
   30428:	andeq	r0, r3, r0, lsl #11
   3042c:	andeq	r0, r3, r0, lsl #11
   30430:	andeq	r0, r3, r0, lsl #11
   30434:	andeq	r0, r3, r0, lsl #11
   30438:	andeq	r0, r3, r0, lsl #11
   3043c:	andeq	r0, r3, r0, lsl #11
   30440:	andeq	r0, r3, r0, lsl #11
   30444:	andeq	r0, r3, r0, lsl #11
   30448:	andeq	r0, r3, r0, lsl #11
   3044c:	andeq	r0, r3, r0, lsl #11
   30450:	andeq	r0, r3, r0, lsl #11
   30454:	andeq	r0, r3, r0, lsl #11
   30458:	andeq	r0, r3, r0, lsl #11
   3045c:	andeq	r0, r3, r0, lsl #11
   30460:	andeq	r0, r3, r8, lsl #7
   30464:	sub	r3, r4, r1
   30468:	add	r2, r1, #1
   3046c:	cmp	r3, #1
   30470:	ble	30480 <flatcc_json_parser_generic_json@@Base+0x13c8>
   30474:	ldrb	r3, [r1, #1]
   30478:	cmp	r3, #10
   3047c:	addeq	r2, r1, #2
   30480:	mov	r1, r2
   30484:	ldr	r3, [r6, #12]
   30488:	str	r1, [r6, #4]
   3048c:	add	r3, r3, #1
   30490:	str	r3, [r6, #12]
   30494:	cmp	r4, r1
   30498:	beq	303bc <flatcc_json_parser_generic_json@@Base+0x1304>
   3049c:	ldrb	r2, [r1]
   304a0:	cmp	r2, #32
   304a4:	bls	303f4 <flatcc_json_parser_generic_json@@Base+0x133c>
   304a8:	cmp	r2, #58	; 0x3a
   304ac:	bne	31258 <flatcc_json_parser_generic_json@@Base+0x21a0>
   304b0:	add	r5, r1, #1
   304b4:	sub	r3, r4, r5
   304b8:	cmp	r3, #1
   304bc:	ble	30ccc <flatcc_json_parser_generic_json@@Base+0x1c14>
   304c0:	ldrb	r3, [r1, #1]
   304c4:	cmp	r3, #32
   304c8:	mov	r2, r3
   304cc:	bhi	30b54 <flatcc_json_parser_generic_json@@Base+0x1a9c>
   304d0:	beq	30b44 <flatcc_json_parser_generic_json@@Base+0x1a8c>
   304d4:	cmp	r5, r4
   304d8:	mov	r3, r2
   304dc:	bne	304f0 <flatcc_json_parser_generic_json@@Base+0x1438>
   304e0:	b	310d0 <flatcc_json_parser_generic_json@@Base+0x2018>
   304e4:	ldrb	r3, [r5, #1]!
   304e8:	cmp	r4, r5
   304ec:	beq	310d0 <flatcc_json_parser_generic_json@@Base+0x2018>
   304f0:	cmp	r3, #32
   304f4:	beq	304e4 <flatcc_json_parser_generic_json@@Base+0x142c>
   304f8:	cmp	r3, #32
   304fc:	bhi	2f110 <flatcc_json_parser_generic_json@@Base+0x58>
   30500:	sub	r3, r3, #9
   30504:	cmp	r3, #23
   30508:	ldrls	pc, [pc, r3, lsl #2]
   3050c:	b	30778 <flatcc_json_parser_generic_json@@Base+0x16c0>
   30510:	andeq	r0, r3, r0, ror r7
   30514:	andeq	r0, r3, r8, ror #14
   30518:	andeq	r0, r3, r8, ror r7
   3051c:	andeq	r0, r3, r8, ror r7
   30520:	andeq	r0, r3, ip, lsr #11
   30524:	andeq	r0, r3, r8, ror r7
   30528:	andeq	r0, r3, r8, ror r7
   3052c:	andeq	r0, r3, r8, ror r7
   30530:	andeq	r0, r3, r8, ror r7
   30534:	andeq	r0, r3, r8, ror r7
   30538:	andeq	r0, r3, r8, ror r7
   3053c:	andeq	r0, r3, r8, ror r7
   30540:	andeq	r0, r3, r8, ror r7
   30544:	andeq	r0, r3, r8, ror r7
   30548:	andeq	r0, r3, r8, ror r7
   3054c:	andeq	r0, r3, r8, ror r7
   30550:	andeq	r0, r3, r8, ror r7
   30554:	andeq	r0, r3, r8, ror r7
   30558:	andeq	r0, r3, r8, ror r7
   3055c:	andeq	r0, r3, r8, ror r7
   30560:	andeq	r0, r3, r8, ror r7
   30564:	andeq	r0, r3, r8, ror r7
   30568:	andeq	r0, r3, r8, ror r7
   3056c:	andeq	pc, r2, r8, lsr #9
   30570:	add	r1, r1, #1
   30574:	b	30484 <flatcc_json_parser_generic_json@@Base+0x13cc>
   30578:	add	r1, r1, #1
   3057c:	b	30494 <flatcc_json_parser_generic_json@@Base+0x13dc>
   30580:	ldr	r3, [r6, #20]
   30584:	cmp	r3, #0
   30588:	bne	2f2f8 <flatcc_json_parser_generic_json@@Base+0x240>
   3058c:	ldr	r3, [r6, #4]
   30590:	mov	r2, #5
   30594:	str	r2, [r6, #20]
   30598:	str	r1, [r6, #32]
   3059c:	sub	r3, r1, r3
   305a0:	add	r3, r3, #1
   305a4:	str	r3, [r6, #16]
   305a8:	b	2f2f8 <flatcc_json_parser_generic_json@@Base+0x240>
   305ac:	sub	r3, r4, r5
   305b0:	add	r2, r5, #1
   305b4:	cmp	r3, #1
   305b8:	ble	305c8 <flatcc_json_parser_generic_json@@Base+0x1510>
   305bc:	ldrb	r3, [r5, #1]
   305c0:	cmp	r3, #10
   305c4:	addeq	r2, r5, #2
   305c8:	mov	r5, r2
   305cc:	ldr	r3, [r6, #12]
   305d0:	str	r5, [r6, #4]
   305d4:	add	r3, r3, #1
   305d8:	str	r3, [r6, #12]
   305dc:	cmp	r4, r5
   305e0:	ldrb	r3, [r5]
   305e4:	beq	30ef8 <flatcc_json_parser_generic_json@@Base+0x1e40>
   305e8:	cmp	r3, #32
   305ec:	bls	30500 <flatcc_json_parser_generic_json@@Base+0x1448>
   305f0:	sub	r2, r3, #34	; 0x22
   305f4:	cmp	r2, #89	; 0x59
   305f8:	ldrls	pc, [pc, r2, lsl #2]
   305fc:	b	2f4b0 <flatcc_json_parser_generic_json@@Base+0x3f8>
   30600:	andeq	pc, r2, r4, ror #14
   30604:			; <UNDEFINED> instruction: 0x0002f4b0
   30608:			; <UNDEFINED> instruction: 0x0002f4b0
   3060c:			; <UNDEFINED> instruction: 0x0002f4b0
   30610:			; <UNDEFINED> instruction: 0x0002f4b0
   30614:			; <UNDEFINED> instruction: 0x0002f4b0
   30618:			; <UNDEFINED> instruction: 0x0002f4b0
   3061c:			; <UNDEFINED> instruction: 0x0002f4b0
   30620:			; <UNDEFINED> instruction: 0x0002f4b0
   30624:			; <UNDEFINED> instruction: 0x0002f4b0
   30628:			; <UNDEFINED> instruction: 0x0002f4b0
   3062c:	ldrdeq	pc, [r2], -r0
   30630:			; <UNDEFINED> instruction: 0x0002f4b0
   30634:			; <UNDEFINED> instruction: 0x0002f4b0
   30638:	ldrdeq	pc, [r2], -r0
   3063c:	ldrdeq	pc, [r2], -r0
   30640:	ldrdeq	pc, [r2], -r0
   30644:	ldrdeq	pc, [r2], -r0
   30648:	ldrdeq	pc, [r2], -r0
   3064c:	ldrdeq	pc, [r2], -r0
   30650:	ldrdeq	pc, [r2], -r0
   30654:	ldrdeq	pc, [r2], -r0
   30658:	ldrdeq	pc, [r2], -r0
   3065c:	ldrdeq	pc, [r2], -r0
   30660:			; <UNDEFINED> instruction: 0x0002f4b0
   30664:			; <UNDEFINED> instruction: 0x0002f4b0
   30668:			; <UNDEFINED> instruction: 0x0002f4b0
   3066c:			; <UNDEFINED> instruction: 0x0002f4b0
   30670:			; <UNDEFINED> instruction: 0x0002f4b0
   30674:			; <UNDEFINED> instruction: 0x0002f4b0
   30678:			; <UNDEFINED> instruction: 0x0002f4b0
   3067c:			; <UNDEFINED> instruction: 0x0002f4b0
   30680:			; <UNDEFINED> instruction: 0x0002f4b0
   30684:			; <UNDEFINED> instruction: 0x0002f4b0
   30688:			; <UNDEFINED> instruction: 0x0002f4b0
   3068c:			; <UNDEFINED> instruction: 0x0002f4b0
   30690:			; <UNDEFINED> instruction: 0x0002f4b0
   30694:			; <UNDEFINED> instruction: 0x0002f4b0
   30698:			; <UNDEFINED> instruction: 0x0002f4b0
   3069c:			; <UNDEFINED> instruction: 0x0002f4b0
   306a0:			; <UNDEFINED> instruction: 0x0002f4b0
   306a4:			; <UNDEFINED> instruction: 0x0002f4b0
   306a8:			; <UNDEFINED> instruction: 0x0002f4b0
   306ac:			; <UNDEFINED> instruction: 0x0002f4b0
   306b0:			; <UNDEFINED> instruction: 0x0002f4b0
   306b4:			; <UNDEFINED> instruction: 0x0002f4b0
   306b8:			; <UNDEFINED> instruction: 0x0002f4b0
   306bc:			; <UNDEFINED> instruction: 0x0002f4b0
   306c0:			; <UNDEFINED> instruction: 0x0002f4b0
   306c4:			; <UNDEFINED> instruction: 0x0002f4b0
   306c8:			; <UNDEFINED> instruction: 0x0002f4b0
   306cc:			; <UNDEFINED> instruction: 0x0002f4b0
   306d0:			; <UNDEFINED> instruction: 0x0002f4b0
   306d4:			; <UNDEFINED> instruction: 0x0002f4b0
   306d8:			; <UNDEFINED> instruction: 0x0002f4b0
   306dc:			; <UNDEFINED> instruction: 0x0002f4b0
   306e0:			; <UNDEFINED> instruction: 0x0002f4b0
   306e4:	andeq	pc, r2, ip, lsr r6	; <UNPREDICTABLE>
   306e8:			; <UNDEFINED> instruction: 0x0002f4b0
   306ec:			; <UNDEFINED> instruction: 0x0002f4b0
   306f0:			; <UNDEFINED> instruction: 0x0002f4b0
   306f4:			; <UNDEFINED> instruction: 0x0002f4b0
   306f8:			; <UNDEFINED> instruction: 0x0002f4b0
   306fc:			; <UNDEFINED> instruction: 0x0002f4b0
   30700:			; <UNDEFINED> instruction: 0x0002f4b0
   30704:			; <UNDEFINED> instruction: 0x0002f4b0
   30708:			; <UNDEFINED> instruction: 0x0002f4b0
   3070c:			; <UNDEFINED> instruction: 0x0002f4b0
   30710:	andeq	pc, r2, r0, ror #6
   30714:			; <UNDEFINED> instruction: 0x0002f4b0
   30718:			; <UNDEFINED> instruction: 0x0002f4b0
   3071c:			; <UNDEFINED> instruction: 0x0002f4b0
   30720:			; <UNDEFINED> instruction: 0x0002f4b0
   30724:			; <UNDEFINED> instruction: 0x0002f4b0
   30728:			; <UNDEFINED> instruction: 0x0002f4b0
   3072c:			; <UNDEFINED> instruction: 0x0002f4b0
   30730:	andeq	pc, r2, r8, lsl r3	; <UNPREDICTABLE>
   30734:			; <UNDEFINED> instruction: 0x0002f4b0
   30738:			; <UNDEFINED> instruction: 0x0002f4b0
   3073c:			; <UNDEFINED> instruction: 0x0002f4b0
   30740:			; <UNDEFINED> instruction: 0x0002f4b0
   30744:			; <UNDEFINED> instruction: 0x0002f4b0
   30748:	andeq	pc, r2, r0, ror #6
   3074c:			; <UNDEFINED> instruction: 0x0002f4b0
   30750:			; <UNDEFINED> instruction: 0x0002f4b0
   30754:			; <UNDEFINED> instruction: 0x0002f4b0
   30758:			; <UNDEFINED> instruction: 0x0002f4b0
   3075c:			; <UNDEFINED> instruction: 0x0002f4b0
   30760:			; <UNDEFINED> instruction: 0x0002f4b0
   30764:	andeq	pc, r2, ip, lsl #5
   30768:	add	r5, r5, #1
   3076c:	b	305cc <flatcc_json_parser_generic_json@@Base+0x1514>
   30770:	add	r5, r5, #1
   30774:	b	305dc <flatcc_json_parser_generic_json@@Base+0x1524>
   30778:	ldr	r3, [r6, #20]
   3077c:	cmp	r3, #0
   30780:	bne	3079c <flatcc_json_parser_generic_json@@Base+0x16e4>
   30784:	ldr	r2, [r6, #4]
   30788:	mov	r3, #5
   3078c:	str	r5, [r6, #32]
   30790:	sub	r2, r5, r2
   30794:	add	r2, r2, #1
   30798:	strd	r2, [r6, #16]
   3079c:	ldrb	r2, [r4]
   307a0:	sub	r2, r2, #34	; 0x22
   307a4:	cmp	r2, #89	; 0x59
   307a8:	ldrls	pc, [pc, r2, lsl #2]
   307ac:	b	30df0 <flatcc_json_parser_generic_json@@Base+0x1d38>
   307b0:	andeq	r0, r3, ip, lsr #18
   307b4:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   307b8:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   307bc:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   307c0:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   307c4:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   307c8:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   307cc:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   307d0:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   307d4:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   307d8:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   307dc:	andeq	pc, r2, r4, asr r9	; <UNPREDICTABLE>
   307e0:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   307e4:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   307e8:	andeq	pc, r2, r4, asr r9	; <UNPREDICTABLE>
   307ec:	andeq	pc, r2, r4, asr r9	; <UNPREDICTABLE>
   307f0:	andeq	pc, r2, r4, asr r9	; <UNPREDICTABLE>
   307f4:	andeq	pc, r2, r4, asr r9	; <UNPREDICTABLE>
   307f8:	andeq	pc, r2, r4, asr r9	; <UNPREDICTABLE>
   307fc:	andeq	pc, r2, r4, asr r9	; <UNPREDICTABLE>
   30800:	andeq	pc, r2, r4, asr r9	; <UNPREDICTABLE>
   30804:	andeq	pc, r2, r4, asr r9	; <UNPREDICTABLE>
   30808:	andeq	pc, r2, r4, asr r9	; <UNPREDICTABLE>
   3080c:	andeq	pc, r2, r4, asr r9	; <UNPREDICTABLE>
   30810:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30814:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30818:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   3081c:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30820:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30824:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30828:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   3082c:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30830:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30834:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30838:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   3083c:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30840:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30844:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30848:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   3084c:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30850:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30854:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30858:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   3085c:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30860:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30864:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30868:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   3086c:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30870:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30874:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30878:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   3087c:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30880:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30884:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30888:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   3088c:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30890:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30894:	andeq	pc, r2, r8, lsr r6	; <UNPREDICTABLE>
   30898:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   3089c:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308a0:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308a4:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308a8:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308ac:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308b0:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308b4:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308b8:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308bc:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308c0:	andeq	r0, r3, r8, lsl r9
   308c4:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308c8:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308cc:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308d0:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308d4:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308d8:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308dc:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308e0:	andeq	r0, r3, r8, lsl r9
   308e4:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308e8:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308ec:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308f0:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308f4:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308f8:	andeq	r0, r3, r8, lsl r9
   308fc:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30900:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30904:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30908:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   3090c:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30910:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30914:	andeq	pc, r2, r8, lsl #5
   30918:	mov	r5, r4
   3091c:	b	2f398 <flatcc_json_parser_generic_json@@Base+0x2e0>
   30920:	cmp	r5, r4
   30924:	bne	2f764 <flatcc_json_parser_generic_json@@Base+0x6ac>
   30928:	ldr	r3, [r6, #20]
   3092c:	cmp	r3, #0
   30930:	bne	2f954 <flatcc_json_parser_generic_json@@Base+0x89c>
   30934:	ldr	r3, [r6, #4]
   30938:	mov	r2, #16
   3093c:	str	r2, [r6, #20]
   30940:	str	r4, [r6, #32]
   30944:	sub	r3, r4, r3
   30948:	add	r3, r3, #1
   3094c:	str	r3, [r6, #16]
   30950:	b	2f954 <flatcc_json_parser_generic_json@@Base+0x89c>
   30954:	ldrb	r2, [r3, #2]
   30958:	cmp	r2, #32
   3095c:	addhi	r1, r3, #2
   30960:	bls	30388 <flatcc_json_parser_generic_json@@Base+0x12d0>
   30964:	cmp	r4, r1
   30968:	bne	304a8 <flatcc_json_parser_generic_json@@Base+0x13f0>
   3096c:	b	303bc <flatcc_json_parser_generic_json@@Base+0x1304>
   30970:	cmp	r3, #32
   30974:	bhi	30a38 <flatcc_json_parser_generic_json@@Base+0x1980>
   30978:	sub	r3, r3, #9
   3097c:	cmp	r3, #23
   30980:	ldrls	pc, [pc, r3, lsl #2]
   30984:	b	30580 <flatcc_json_parser_generic_json@@Base+0x14c8>
   30988:	andeq	r0, r3, r8, asr #20
   3098c:	andeq	r0, r3, r0, asr #20
   30990:	andeq	r0, r3, r0, lsl #11
   30994:	andeq	r0, r3, r0, lsl #11
   30998:	strdeq	r0, [r3], -r4
   3099c:	andeq	r0, r3, r0, lsl #11
   309a0:	andeq	r0, r3, r0, lsl #11
   309a4:	andeq	r0, r3, r0, lsl #11
   309a8:	andeq	r0, r3, r0, lsl #11
   309ac:	andeq	r0, r3, r0, lsl #11
   309b0:	andeq	r0, r3, r0, lsl #11
   309b4:	andeq	r0, r3, r0, lsl #11
   309b8:	andeq	r0, r3, r0, lsl #11
   309bc:	andeq	r0, r3, r0, lsl #11
   309c0:	andeq	r0, r3, r0, lsl #11
   309c4:	andeq	r0, r3, r0, lsl #11
   309c8:	andeq	r0, r3, r0, lsl #11
   309cc:	andeq	r0, r3, r0, lsl #11
   309d0:	andeq	r0, r3, r0, lsl #11
   309d4:	andeq	r0, r3, r0, lsl #11
   309d8:	andeq	r0, r3, r0, lsl #11
   309dc:	andeq	r0, r3, r0, lsl #11
   309e0:	andeq	r0, r3, r0, lsl #11
   309e4:	andeq	r0, r3, r8, ror #19
   309e8:	cmp	r4, r1
   309ec:	bne	2f2c8 <flatcc_json_parser_generic_json@@Base+0x210>
   309f0:	b	2f2f4 <flatcc_json_parser_generic_json@@Base+0x23c>
   309f4:	sub	r3, r4, r1
   309f8:	add	r2, r1, #1
   309fc:	cmp	r3, #1
   30a00:	ble	30a10 <flatcc_json_parser_generic_json@@Base+0x1958>
   30a04:	ldrb	r3, [r1, #1]
   30a08:	cmp	r3, #10
   30a0c:	addeq	r2, r1, #2
   30a10:	mov	r1, r2
   30a14:	ldr	r3, [r6, #12]
   30a18:	str	r1, [r6, #4]
   30a1c:	add	r3, r3, #1
   30a20:	str	r3, [r6, #12]
   30a24:	cmp	r4, r1
   30a28:	beq	2f2f8 <flatcc_json_parser_generic_json@@Base+0x240>
   30a2c:	ldrb	r3, [r1]
   30a30:	cmp	r3, #32
   30a34:	bls	30978 <flatcc_json_parser_generic_json@@Base+0x18c0>
   30a38:	mov	r5, r1
   30a3c:	b	30d4c <flatcc_json_parser_generic_json@@Base+0x1c94>
   30a40:	add	r1, r1, #1
   30a44:	b	30a14 <flatcc_json_parser_generic_json@@Base+0x195c>
   30a48:	add	r1, r1, #1
   30a4c:	b	30a24 <flatcc_json_parser_generic_json@@Base+0x196c>
   30a50:	cmp	r3, #32
   30a54:	bhi	30b18 <flatcc_json_parser_generic_json@@Base+0x1a60>
   30a58:	sub	r3, r3, #9
   30a5c:	cmp	r3, #23
   30a60:	ldrls	pc, [pc, r3, lsl #2]
   30a64:	b	30580 <flatcc_json_parser_generic_json@@Base+0x14c8>
   30a68:	andeq	r0, r3, r8, lsr #22
   30a6c:	andeq	r0, r3, r0, lsr #22
   30a70:	andeq	r0, r3, r0, lsl #11
   30a74:	andeq	r0, r3, r0, lsl #11
   30a78:	ldrdeq	r0, [r3], -r4
   30a7c:	andeq	r0, r3, r0, lsl #11
   30a80:	andeq	r0, r3, r0, lsl #11
   30a84:	andeq	r0, r3, r0, lsl #11
   30a88:	andeq	r0, r3, r0, lsl #11
   30a8c:	andeq	r0, r3, r0, lsl #11
   30a90:	andeq	r0, r3, r0, lsl #11
   30a94:	andeq	r0, r3, r0, lsl #11
   30a98:	andeq	r0, r3, r0, lsl #11
   30a9c:	andeq	r0, r3, r0, lsl #11
   30aa0:	andeq	r0, r3, r0, lsl #11
   30aa4:	andeq	r0, r3, r0, lsl #11
   30aa8:	andeq	r0, r3, r0, lsl #11
   30aac:	andeq	r0, r3, r0, lsl #11
   30ab0:	andeq	r0, r3, r0, lsl #11
   30ab4:	andeq	r0, r3, r0, lsl #11
   30ab8:	andeq	r0, r3, r0, lsl #11
   30abc:	andeq	r0, r3, r0, lsl #11
   30ac0:	andeq	r0, r3, r0, lsl #11
   30ac4:	andeq	r0, r3, r8, asr #21
   30ac8:	cmp	r4, r1
   30acc:	bne	2f678 <flatcc_json_parser_generic_json@@Base+0x5c0>
   30ad0:	b	2f2f4 <flatcc_json_parser_generic_json@@Base+0x23c>
   30ad4:	sub	r3, r4, r1
   30ad8:	add	r2, r1, #1
   30adc:	cmp	r3, #1
   30ae0:	ble	30af0 <flatcc_json_parser_generic_json@@Base+0x1a38>
   30ae4:	ldrb	r3, [r1, #1]
   30ae8:	cmp	r3, #10
   30aec:	addeq	r2, r1, #2
   30af0:	mov	r1, r2
   30af4:	ldr	r3, [r6, #12]
   30af8:	str	r1, [r6, #4]
   30afc:	add	r3, r3, #1
   30b00:	str	r3, [r6, #12]
   30b04:	cmp	r4, r1
   30b08:	beq	2f2f8 <flatcc_json_parser_generic_json@@Base+0x240>
   30b0c:	ldrb	r3, [r1]
   30b10:	cmp	r3, #32
   30b14:	bls	30a58 <flatcc_json_parser_generic_json@@Base+0x19a0>
   30b18:	mov	r5, r1
   30b1c:	b	30d68 <flatcc_json_parser_generic_json@@Base+0x1cb0>
   30b20:	add	r1, r1, #1
   30b24:	b	30af4 <flatcc_json_parser_generic_json@@Base+0x1a3c>
   30b28:	add	r1, r1, #1
   30b2c:	b	30b04 <flatcc_json_parser_generic_json@@Base+0x1a4c>
   30b30:	ldrb	r3, [r0, #2]
   30b34:	cmp	r3, #32
   30b38:	bls	2fe98 <flatcc_json_parser_generic_json@@Base+0xde0>
   30b3c:	add	r0, r0, #2
   30b40:	b	2fd28 <flatcc_json_parser_generic_json@@Base+0xc70>
   30b44:	ldrb	r3, [r1, #2]
   30b48:	cmp	r3, #32
   30b4c:	addhi	r5, r1, #2
   30b50:	bls	304d4 <flatcc_json_parser_generic_json@@Base+0x141c>
   30b54:	sub	r2, r3, #34	; 0x22
   30b58:	cmp	r2, #89	; 0x59
   30b5c:	ldrls	pc, [pc, r2, lsl #2]
   30b60:	b	2f4b0 <flatcc_json_parser_generic_json@@Base+0x3f8>
   30b64:	andeq	r0, r3, r0, lsr #18
   30b68:			; <UNDEFINED> instruction: 0x0002f4b0
   30b6c:			; <UNDEFINED> instruction: 0x0002f4b0
   30b70:			; <UNDEFINED> instruction: 0x0002f4b0
   30b74:			; <UNDEFINED> instruction: 0x0002f4b0
   30b78:			; <UNDEFINED> instruction: 0x0002f4b0
   30b7c:			; <UNDEFINED> instruction: 0x0002f4b0
   30b80:			; <UNDEFINED> instruction: 0x0002f4b0
   30b84:			; <UNDEFINED> instruction: 0x0002f4b0
   30b88:			; <UNDEFINED> instruction: 0x0002f4b0
   30b8c:			; <UNDEFINED> instruction: 0x0002f4b0
   30b90:	andeq	pc, r2, r8, asr #7
   30b94:			; <UNDEFINED> instruction: 0x0002f4b0
   30b98:			; <UNDEFINED> instruction: 0x0002f4b0
   30b9c:	andeq	pc, r2, r8, asr #7
   30ba0:	andeq	pc, r2, r8, asr #7
   30ba4:	andeq	pc, r2, r8, asr #7
   30ba8:	andeq	pc, r2, r8, asr #7
   30bac:	andeq	pc, r2, r8, asr #7
   30bb0:	andeq	pc, r2, r8, asr #7
   30bb4:	andeq	pc, r2, r8, asr #7
   30bb8:	andeq	pc, r2, r8, asr #7
   30bbc:	andeq	pc, r2, r8, asr #7
   30bc0:	andeq	pc, r2, r8, asr #7
   30bc4:			; <UNDEFINED> instruction: 0x0002f4b0
   30bc8:			; <UNDEFINED> instruction: 0x0002f4b0
   30bcc:			; <UNDEFINED> instruction: 0x0002f4b0
   30bd0:			; <UNDEFINED> instruction: 0x0002f4b0
   30bd4:			; <UNDEFINED> instruction: 0x0002f4b0
   30bd8:			; <UNDEFINED> instruction: 0x0002f4b0
   30bdc:			; <UNDEFINED> instruction: 0x0002f4b0
   30be0:			; <UNDEFINED> instruction: 0x0002f4b0
   30be4:			; <UNDEFINED> instruction: 0x0002f4b0
   30be8:			; <UNDEFINED> instruction: 0x0002f4b0
   30bec:			; <UNDEFINED> instruction: 0x0002f4b0
   30bf0:			; <UNDEFINED> instruction: 0x0002f4b0
   30bf4:			; <UNDEFINED> instruction: 0x0002f4b0
   30bf8:			; <UNDEFINED> instruction: 0x0002f4b0
   30bfc:			; <UNDEFINED> instruction: 0x0002f4b0
   30c00:			; <UNDEFINED> instruction: 0x0002f4b0
   30c04:			; <UNDEFINED> instruction: 0x0002f4b0
   30c08:			; <UNDEFINED> instruction: 0x0002f4b0
   30c0c:			; <UNDEFINED> instruction: 0x0002f4b0
   30c10:			; <UNDEFINED> instruction: 0x0002f4b0
   30c14:			; <UNDEFINED> instruction: 0x0002f4b0
   30c18:			; <UNDEFINED> instruction: 0x0002f4b0
   30c1c:			; <UNDEFINED> instruction: 0x0002f4b0
   30c20:			; <UNDEFINED> instruction: 0x0002f4b0
   30c24:			; <UNDEFINED> instruction: 0x0002f4b0
   30c28:			; <UNDEFINED> instruction: 0x0002f4b0
   30c2c:			; <UNDEFINED> instruction: 0x0002f4b0
   30c30:			; <UNDEFINED> instruction: 0x0002f4b0
   30c34:			; <UNDEFINED> instruction: 0x0002f4b0
   30c38:			; <UNDEFINED> instruction: 0x0002f4b0
   30c3c:			; <UNDEFINED> instruction: 0x0002f4b0
   30c40:			; <UNDEFINED> instruction: 0x0002f4b0
   30c44:			; <UNDEFINED> instruction: 0x0002f4b0
   30c48:	andeq	pc, r2, ip, lsr r6	; <UNPREDICTABLE>
   30c4c:			; <UNDEFINED> instruction: 0x0002f4b0
   30c50:			; <UNDEFINED> instruction: 0x0002f4b0
   30c54:			; <UNDEFINED> instruction: 0x0002f4b0
   30c58:			; <UNDEFINED> instruction: 0x0002f4b0
   30c5c:			; <UNDEFINED> instruction: 0x0002f4b0
   30c60:			; <UNDEFINED> instruction: 0x0002f4b0
   30c64:			; <UNDEFINED> instruction: 0x0002f4b0
   30c68:			; <UNDEFINED> instruction: 0x0002f4b0
   30c6c:			; <UNDEFINED> instruction: 0x0002f4b0
   30c70:			; <UNDEFINED> instruction: 0x0002f4b0
   30c74:	andeq	pc, r2, r0, ror #6
   30c78:			; <UNDEFINED> instruction: 0x0002f4b0
   30c7c:			; <UNDEFINED> instruction: 0x0002f4b0
   30c80:			; <UNDEFINED> instruction: 0x0002f4b0
   30c84:			; <UNDEFINED> instruction: 0x0002f4b0
   30c88:			; <UNDEFINED> instruction: 0x0002f4b0
   30c8c:			; <UNDEFINED> instruction: 0x0002f4b0
   30c90:			; <UNDEFINED> instruction: 0x0002f4b0
   30c94:	andeq	pc, r2, r8, lsl r3	; <UNPREDICTABLE>
   30c98:			; <UNDEFINED> instruction: 0x0002f4b0
   30c9c:			; <UNDEFINED> instruction: 0x0002f4b0
   30ca0:			; <UNDEFINED> instruction: 0x0002f4b0
   30ca4:			; <UNDEFINED> instruction: 0x0002f4b0
   30ca8:			; <UNDEFINED> instruction: 0x0002f4b0
   30cac:	andeq	pc, r2, r0, ror #6
   30cb0:			; <UNDEFINED> instruction: 0x0002f4b0
   30cb4:			; <UNDEFINED> instruction: 0x0002f4b0
   30cb8:			; <UNDEFINED> instruction: 0x0002f4b0
   30cbc:			; <UNDEFINED> instruction: 0x0002f4b0
   30cc0:			; <UNDEFINED> instruction: 0x0002f4b0
   30cc4:			; <UNDEFINED> instruction: 0x0002f4b0
   30cc8:	andeq	pc, r2, ip, lsl #5
   30ccc:	ldrb	r2, [r1, #1]
   30cd0:	b	304d4 <flatcc_json_parser_generic_json@@Base+0x141c>
   30cd4:	ldr	r3, [r6, #20]
   30cd8:	cmp	r3, #0
   30cdc:	bne	2f954 <flatcc_json_parser_generic_json@@Base+0x89c>
   30ce0:	ldr	r3, [r6, #4]
   30ce4:	mov	r2, #20
   30ce8:	mov	r0, r4
   30cec:	str	r2, [r6, #20]
   30cf0:	str	r1, [r6, #32]
   30cf4:	sub	r3, r1, r3
   30cf8:	add	r3, r3, #1
   30cfc:	str	r3, [r6, #16]
   30d00:	b	2f958 <flatcc_json_parser_generic_json@@Base+0x8a0>
   30d04:	ldrb	r3, [r0, #2]
   30d08:	cmp	r3, #32
   30d0c:	bls	301ec <flatcc_json_parser_generic_json@@Base+0x1134>
   30d10:	b	30b3c <flatcc_json_parser_generic_json@@Base+0x1a84>
   30d14:	add	r0, r5, #1
   30d18:	cmp	r4, r0
   30d1c:	beq	31070 <flatcc_json_parser_generic_json@@Base+0x1fb8>
   30d20:	ldrb	r3, [r5, #1]
   30d24:	mov	r5, r0
   30d28:	b	2f3d8 <flatcc_json_parser_generic_json@@Base+0x320>
   30d2c:	add	r0, r5, #1
   30d30:	cmp	r4, r0
   30d34:	beq	2f948 <flatcc_json_parser_generic_json@@Base+0x890>
   30d38:	ldrb	r3, [r5, #1]
   30d3c:	b	2f42c <flatcc_json_parser_generic_json@@Base+0x374>
   30d40:	mov	r5, r1
   30d44:	cmp	r4, r5
   30d48:	beq	2f2f8 <flatcc_json_parser_generic_json@@Base+0x240>
   30d4c:	cmp	r3, #125	; 0x7d
   30d50:	bne	2f0fc <flatcc_json_parser_generic_json@@Base+0x44>
   30d54:	mov	r0, r5
   30d58:	b	2f814 <flatcc_json_parser_generic_json@@Base+0x75c>
   30d5c:	mov	r5, r1
   30d60:	cmp	r4, r5
   30d64:	beq	2f2f8 <flatcc_json_parser_generic_json@@Base+0x240>
   30d68:	cmp	r3, #93	; 0x5d
   30d6c:	bne	2f0fc <flatcc_json_parser_generic_json@@Base+0x44>
   30d70:	b	30d54 <flatcc_json_parser_generic_json@@Base+0x1c9c>
   30d74:	ldr	r3, [r6, #4]
   30d78:	mov	r2, #6
   30d7c:	str	r2, [r6, #20]
   30d80:	str	r0, [r6, #32]
   30d84:	sub	r3, r0, r3
   30d88:	mov	r0, r4
   30d8c:	add	r3, r3, #1
   30d90:	str	r3, [r6, #16]
   30d94:	b	2f958 <flatcc_json_parser_generic_json@@Base+0x8a0>
   30d98:	sub	r3, r4, r0
   30d9c:	add	r2, r0, #1
   30da0:	cmp	r3, #1
   30da4:	ble	30db4 <flatcc_json_parser_generic_json@@Base+0x1cfc>
   30da8:	ldrb	r3, [r0, #1]
   30dac:	cmp	r3, #10
   30db0:	addeq	r2, r0, #2
   30db4:	mov	r0, r2
   30db8:	ldr	r3, [r6, #12]
   30dbc:	str	r0, [r6, #4]
   30dc0:	add	r3, r3, #1
   30dc4:	str	r3, [r6, #12]
   30dc8:	cmp	r4, r0
   30dcc:	beq	2f8a0 <flatcc_json_parser_generic_json@@Base+0x7e8>
   30dd0:	ldrb	r2, [r0]
   30dd4:	cmp	r2, #32
   30dd8:	bls	30110 <flatcc_json_parser_generic_json@@Base+0x1058>
   30ddc:	b	2fd30 <flatcc_json_parser_generic_json@@Base+0xc78>
   30de0:	add	r0, r0, #1
   30de4:	b	30db8 <flatcc_json_parser_generic_json@@Base+0x1d00>
   30de8:	add	r0, r0, #1
   30dec:	b	30dc8 <flatcc_json_parser_generic_json@@Base+0x1d10>
   30df0:	mov	r5, r4
   30df4:	b	2f4b4 <flatcc_json_parser_generic_json@@Base+0x3fc>
   30df8:	ldr	r3, [r6, #20]
   30dfc:	cmp	r3, #0
   30e00:	bne	2f2f8 <flatcc_json_parser_generic_json@@Base+0x240>
   30e04:	mov	r2, #2
   30e08:	ldr	r3, [r6, #4]
   30e0c:	b	2f3ac <flatcc_json_parser_generic_json@@Base+0x2f4>
   30e10:	add	r0, r5, #5
   30e14:	cmp	r0, r5
   30e18:	bne	2f80c <flatcc_json_parser_generic_json@@Base+0x754>
   30e1c:	b	2f398 <flatcc_json_parser_generic_json@@Base+0x2e0>
   30e20:	ldr	r3, [r6, #20]
   30e24:	cmp	r3, #0
   30e28:	bne	2f954 <flatcc_json_parser_generic_json@@Base+0x89c>
   30e2c:	ldr	r3, [r6, #4]
   30e30:	mov	r2, #6
   30e34:	mov	r0, r4
   30e38:	str	r2, [r6, #20]
   30e3c:	str	r5, [r6, #32]
   30e40:	sub	r3, r5, r3
   30e44:	add	r3, r3, #1
   30e48:	str	r3, [r6, #16]
   30e4c:	b	2f958 <flatcc_json_parser_generic_json@@Base+0x8a0>
   30e50:	ldrb	r2, [r5, #1]
   30e54:	add	r1, r5, #1
   30e58:	cmp	r2, #114	; 0x72
   30e5c:	bne	2f378 <flatcc_json_parser_generic_json@@Base+0x2c0>
   30e60:	ldrb	r2, [r1, #1]!
   30e64:	cmp	r2, #117	; 0x75
   30e68:	bne	2f378 <flatcc_json_parser_generic_json@@Base+0x2c0>
   30e6c:	ldrb	r2, [r1, #1]
   30e70:	cmp	r2, #101	; 0x65
   30e74:	addeq	r0, r5, #4
   30e78:	bne	2f378 <flatcc_json_parser_generic_json@@Base+0x2c0>
   30e7c:	b	30e14 <flatcc_json_parser_generic_json@@Base+0x1d5c>
   30e80:	ldrb	r3, [r5, #2]
   30e84:	cmp	r3, #32
   30e88:	addhi	r5, r5, #2
   30e8c:	bls	2f2c0 <flatcc_json_parser_generic_json@@Base+0x208>
   30e90:	b	30d44 <flatcc_json_parser_generic_json@@Base+0x1c8c>
   30e94:	ldrb	r3, [r5, #2]
   30e98:	cmp	r3, #32
   30e9c:	addhi	r5, r5, #2
   30ea0:	bls	2f670 <flatcc_json_parser_generic_json@@Base+0x5b8>
   30ea4:	b	30d60 <flatcc_json_parser_generic_json@@Base+0x1ca8>
   30ea8:	ldrb	r3, [r0, #1]
   30eac:	sub	r3, r3, #48	; 0x30
   30eb0:	cmp	r3, #9
   30eb4:	bhi	3109c <flatcc_json_parser_generic_json@@Base+0x1fe4>
   30eb8:	add	r2, r0, #2
   30ebc:	cmp	r4, r2
   30ec0:	beq	312d4 <flatcc_json_parser_generic_json@@Base+0x221c>
   30ec4:	ldrb	r3, [r0, #2]
   30ec8:	sub	r1, r3, #48	; 0x30
   30ecc:	cmp	r1, #9
   30ed0:	bhi	312a0 <flatcc_json_parser_generic_json@@Base+0x21e8>
   30ed4:	add	r2, r0, #3
   30ed8:	cmp	r4, r2
   30edc:	mov	r0, r2
   30ee0:	beq	2f948 <flatcc_json_parser_generic_json@@Base+0x890>
   30ee4:	ldrb	r3, [r2], #1
   30ee8:	sub	r1, r3, #48	; 0x30
   30eec:	cmp	r1, #9
   30ef0:	bls	30ed8 <flatcc_json_parser_generic_json@@Base+0x1e20>
   30ef4:	b	2f434 <flatcc_json_parser_generic_json@@Base+0x37c>
   30ef8:	sub	r3, r3, #34	; 0x22
   30efc:	cmp	r3, #89	; 0x59
   30f00:	ldrls	pc, [pc, r3, lsl #2]
   30f04:	b	2f4b0 <flatcc_json_parser_generic_json@@Base+0x3f8>
   30f08:	andeq	r0, r3, r8, lsr #18
   30f0c:			; <UNDEFINED> instruction: 0x0002f4b0
   30f10:			; <UNDEFINED> instruction: 0x0002f4b0
   30f14:			; <UNDEFINED> instruction: 0x0002f4b0
   30f18:			; <UNDEFINED> instruction: 0x0002f4b0
   30f1c:			; <UNDEFINED> instruction: 0x0002f4b0
   30f20:			; <UNDEFINED> instruction: 0x0002f4b0
   30f24:			; <UNDEFINED> instruction: 0x0002f4b0
   30f28:			; <UNDEFINED> instruction: 0x0002f4b0
   30f2c:			; <UNDEFINED> instruction: 0x0002f4b0
   30f30:			; <UNDEFINED> instruction: 0x0002f4b0
   30f34:	andeq	pc, r2, r4, asr r9	; <UNPREDICTABLE>
   30f38:			; <UNDEFINED> instruction: 0x0002f4b0
   30f3c:			; <UNDEFINED> instruction: 0x0002f4b0
   30f40:	andeq	pc, r2, r4, asr r9	; <UNPREDICTABLE>
   30f44:	andeq	pc, r2, r4, asr r9	; <UNPREDICTABLE>
   30f48:	andeq	pc, r2, r4, asr r9	; <UNPREDICTABLE>
   30f4c:	andeq	pc, r2, r4, asr r9	; <UNPREDICTABLE>
   30f50:	andeq	pc, r2, r4, asr r9	; <UNPREDICTABLE>
   30f54:	andeq	pc, r2, r4, asr r9	; <UNPREDICTABLE>
   30f58:	andeq	pc, r2, r4, asr r9	; <UNPREDICTABLE>
   30f5c:	andeq	pc, r2, r4, asr r9	; <UNPREDICTABLE>
   30f60:	andeq	pc, r2, r4, asr r9	; <UNPREDICTABLE>
   30f64:	andeq	pc, r2, r4, asr r9	; <UNPREDICTABLE>
   30f68:			; <UNDEFINED> instruction: 0x0002f4b0
   30f6c:			; <UNDEFINED> instruction: 0x0002f4b0
   30f70:			; <UNDEFINED> instruction: 0x0002f4b0
   30f74:			; <UNDEFINED> instruction: 0x0002f4b0
   30f78:			; <UNDEFINED> instruction: 0x0002f4b0
   30f7c:			; <UNDEFINED> instruction: 0x0002f4b0
   30f80:			; <UNDEFINED> instruction: 0x0002f4b0
   30f84:			; <UNDEFINED> instruction: 0x0002f4b0
   30f88:			; <UNDEFINED> instruction: 0x0002f4b0
   30f8c:			; <UNDEFINED> instruction: 0x0002f4b0
   30f90:			; <UNDEFINED> instruction: 0x0002f4b0
   30f94:			; <UNDEFINED> instruction: 0x0002f4b0
   30f98:			; <UNDEFINED> instruction: 0x0002f4b0
   30f9c:			; <UNDEFINED> instruction: 0x0002f4b0
   30fa0:			; <UNDEFINED> instruction: 0x0002f4b0
   30fa4:			; <UNDEFINED> instruction: 0x0002f4b0
   30fa8:			; <UNDEFINED> instruction: 0x0002f4b0
   30fac:			; <UNDEFINED> instruction: 0x0002f4b0
   30fb0:			; <UNDEFINED> instruction: 0x0002f4b0
   30fb4:			; <UNDEFINED> instruction: 0x0002f4b0
   30fb8:			; <UNDEFINED> instruction: 0x0002f4b0
   30fbc:			; <UNDEFINED> instruction: 0x0002f4b0
   30fc0:			; <UNDEFINED> instruction: 0x0002f4b0
   30fc4:			; <UNDEFINED> instruction: 0x0002f4b0
   30fc8:			; <UNDEFINED> instruction: 0x0002f4b0
   30fcc:			; <UNDEFINED> instruction: 0x0002f4b0
   30fd0:			; <UNDEFINED> instruction: 0x0002f4b0
   30fd4:			; <UNDEFINED> instruction: 0x0002f4b0
   30fd8:			; <UNDEFINED> instruction: 0x0002f4b0
   30fdc:			; <UNDEFINED> instruction: 0x0002f4b0
   30fe0:			; <UNDEFINED> instruction: 0x0002f4b0
   30fe4:			; <UNDEFINED> instruction: 0x0002f4b0
   30fe8:			; <UNDEFINED> instruction: 0x0002f4b0
   30fec:	andeq	pc, r2, ip, lsr r6	; <UNPREDICTABLE>
   30ff0:			; <UNDEFINED> instruction: 0x0002f4b0
   30ff4:			; <UNDEFINED> instruction: 0x0002f4b0
   30ff8:			; <UNDEFINED> instruction: 0x0002f4b0
   30ffc:			; <UNDEFINED> instruction: 0x0002f4b0
   31000:			; <UNDEFINED> instruction: 0x0002f4b0
   31004:			; <UNDEFINED> instruction: 0x0002f4b0
   31008:			; <UNDEFINED> instruction: 0x0002f4b0
   3100c:			; <UNDEFINED> instruction: 0x0002f4b0
   31010:			; <UNDEFINED> instruction: 0x0002f4b0
   31014:			; <UNDEFINED> instruction: 0x0002f4b0
   31018:	andeq	pc, r2, r0, ror #6
   3101c:			; <UNDEFINED> instruction: 0x0002f4b0
   31020:			; <UNDEFINED> instruction: 0x0002f4b0
   31024:			; <UNDEFINED> instruction: 0x0002f4b0
   31028:			; <UNDEFINED> instruction: 0x0002f4b0
   3102c:			; <UNDEFINED> instruction: 0x0002f4b0
   31030:			; <UNDEFINED> instruction: 0x0002f4b0
   31034:			; <UNDEFINED> instruction: 0x0002f4b0
   31038:	andeq	pc, r2, r8, lsl r3	; <UNPREDICTABLE>
   3103c:			; <UNDEFINED> instruction: 0x0002f4b0
   31040:			; <UNDEFINED> instruction: 0x0002f4b0
   31044:			; <UNDEFINED> instruction: 0x0002f4b0
   31048:			; <UNDEFINED> instruction: 0x0002f4b0
   3104c:			; <UNDEFINED> instruction: 0x0002f4b0
   31050:	andeq	pc, r2, r0, ror #6
   31054:			; <UNDEFINED> instruction: 0x0002f4b0
   31058:			; <UNDEFINED> instruction: 0x0002f4b0
   3105c:			; <UNDEFINED> instruction: 0x0002f4b0
   31060:			; <UNDEFINED> instruction: 0x0002f4b0
   31064:			; <UNDEFINED> instruction: 0x0002f4b0
   31068:			; <UNDEFINED> instruction: 0x0002f4b0
   3106c:	andeq	pc, r2, ip, lsl #5
   31070:	ldr	r3, [r6, #20]
   31074:	cmp	r3, #0
   31078:	bne	2f958 <flatcc_json_parser_generic_json@@Base+0x8a0>
   3107c:	ldr	r3, [r6, #4]
   31080:	mov	r2, #6
   31084:	str	r2, [r6, #20]
   31088:	str	r4, [r6, #32]
   3108c:	sub	r3, r4, r3
   31090:	add	r3, r3, #1
   31094:	str	r3, [r6, #16]
   31098:	b	2f958 <flatcc_json_parser_generic_json@@Base+0x8a0>
   3109c:	ldr	r3, [r6, #20]
   310a0:	cmp	r3, #0
   310a4:	bne	2f954 <flatcc_json_parser_generic_json@@Base+0x89c>
   310a8:	ldr	r2, [r6, #4]
   310ac:	add	r3, r0, #1
   310b0:	mov	r1, #6
   310b4:	mov	r0, r4
   310b8:	str	r1, [r6, #20]
   310bc:	str	r3, [r6, #32]
   310c0:	sub	r3, r3, r2
   310c4:	add	r3, r3, #1
   310c8:	str	r3, [r6, #16]
   310cc:	b	2f958 <flatcc_json_parser_generic_json@@Base+0x8a0>
   310d0:	sub	r2, r3, #34	; 0x22
   310d4:	cmp	r2, #89	; 0x59
   310d8:	ldrls	pc, [pc, r2, lsl #2]
   310dc:	b	2f4b0 <flatcc_json_parser_generic_json@@Base+0x3f8>
   310e0:	andeq	r0, r3, r8, lsr #18
   310e4:			; <UNDEFINED> instruction: 0x0002f4b0
   310e8:			; <UNDEFINED> instruction: 0x0002f4b0
   310ec:			; <UNDEFINED> instruction: 0x0002f4b0
   310f0:			; <UNDEFINED> instruction: 0x0002f4b0
   310f4:			; <UNDEFINED> instruction: 0x0002f4b0
   310f8:			; <UNDEFINED> instruction: 0x0002f4b0
   310fc:			; <UNDEFINED> instruction: 0x0002f4b0
   31100:			; <UNDEFINED> instruction: 0x0002f4b0
   31104:			; <UNDEFINED> instruction: 0x0002f4b0
   31108:			; <UNDEFINED> instruction: 0x0002f4b0
   3110c:	andeq	pc, r2, r8, asr #7
   31110:			; <UNDEFINED> instruction: 0x0002f4b0
   31114:			; <UNDEFINED> instruction: 0x0002f4b0
   31118:	andeq	pc, r2, r8, asr #7
   3111c:	andeq	pc, r2, r8, asr #7
   31120:	andeq	pc, r2, r8, asr #7
   31124:	andeq	pc, r2, r8, asr #7
   31128:	andeq	pc, r2, r8, asr #7
   3112c:	andeq	pc, r2, r8, asr #7
   31130:	andeq	pc, r2, r8, asr #7
   31134:	andeq	pc, r2, r8, asr #7
   31138:	andeq	pc, r2, r8, asr #7
   3113c:	andeq	pc, r2, r8, asr #7
   31140:			; <UNDEFINED> instruction: 0x0002f4b0
   31144:			; <UNDEFINED> instruction: 0x0002f4b0
   31148:			; <UNDEFINED> instruction: 0x0002f4b0
   3114c:			; <UNDEFINED> instruction: 0x0002f4b0
   31150:			; <UNDEFINED> instruction: 0x0002f4b0
   31154:			; <UNDEFINED> instruction: 0x0002f4b0
   31158:			; <UNDEFINED> instruction: 0x0002f4b0
   3115c:			; <UNDEFINED> instruction: 0x0002f4b0
   31160:			; <UNDEFINED> instruction: 0x0002f4b0
   31164:			; <UNDEFINED> instruction: 0x0002f4b0
   31168:			; <UNDEFINED> instruction: 0x0002f4b0
   3116c:			; <UNDEFINED> instruction: 0x0002f4b0
   31170:			; <UNDEFINED> instruction: 0x0002f4b0
   31174:			; <UNDEFINED> instruction: 0x0002f4b0
   31178:			; <UNDEFINED> instruction: 0x0002f4b0
   3117c:			; <UNDEFINED> instruction: 0x0002f4b0
   31180:			; <UNDEFINED> instruction: 0x0002f4b0
   31184:			; <UNDEFINED> instruction: 0x0002f4b0
   31188:			; <UNDEFINED> instruction: 0x0002f4b0
   3118c:			; <UNDEFINED> instruction: 0x0002f4b0
   31190:			; <UNDEFINED> instruction: 0x0002f4b0
   31194:			; <UNDEFINED> instruction: 0x0002f4b0
   31198:			; <UNDEFINED> instruction: 0x0002f4b0
   3119c:			; <UNDEFINED> instruction: 0x0002f4b0
   311a0:			; <UNDEFINED> instruction: 0x0002f4b0
   311a4:			; <UNDEFINED> instruction: 0x0002f4b0
   311a8:			; <UNDEFINED> instruction: 0x0002f4b0
   311ac:			; <UNDEFINED> instruction: 0x0002f4b0
   311b0:			; <UNDEFINED> instruction: 0x0002f4b0
   311b4:			; <UNDEFINED> instruction: 0x0002f4b0
   311b8:			; <UNDEFINED> instruction: 0x0002f4b0
   311bc:			; <UNDEFINED> instruction: 0x0002f4b0
   311c0:			; <UNDEFINED> instruction: 0x0002f4b0
   311c4:	andeq	pc, r2, ip, lsr r6	; <UNPREDICTABLE>
   311c8:			; <UNDEFINED> instruction: 0x0002f4b0
   311cc:			; <UNDEFINED> instruction: 0x0002f4b0
   311d0:			; <UNDEFINED> instruction: 0x0002f4b0
   311d4:			; <UNDEFINED> instruction: 0x0002f4b0
   311d8:			; <UNDEFINED> instruction: 0x0002f4b0
   311dc:			; <UNDEFINED> instruction: 0x0002f4b0
   311e0:			; <UNDEFINED> instruction: 0x0002f4b0
   311e4:			; <UNDEFINED> instruction: 0x0002f4b0
   311e8:			; <UNDEFINED> instruction: 0x0002f4b0
   311ec:			; <UNDEFINED> instruction: 0x0002f4b0
   311f0:	andeq	pc, r2, r0, ror #6
   311f4:			; <UNDEFINED> instruction: 0x0002f4b0
   311f8:			; <UNDEFINED> instruction: 0x0002f4b0
   311fc:			; <UNDEFINED> instruction: 0x0002f4b0
   31200:			; <UNDEFINED> instruction: 0x0002f4b0
   31204:			; <UNDEFINED> instruction: 0x0002f4b0
   31208:			; <UNDEFINED> instruction: 0x0002f4b0
   3120c:			; <UNDEFINED> instruction: 0x0002f4b0
   31210:	andeq	pc, r2, r8, lsl r3	; <UNPREDICTABLE>
   31214:			; <UNDEFINED> instruction: 0x0002f4b0
   31218:			; <UNDEFINED> instruction: 0x0002f4b0
   3121c:			; <UNDEFINED> instruction: 0x0002f4b0
   31220:			; <UNDEFINED> instruction: 0x0002f4b0
   31224:			; <UNDEFINED> instruction: 0x0002f4b0
   31228:	andeq	pc, r2, r0, ror #6
   3122c:			; <UNDEFINED> instruction: 0x0002f4b0
   31230:			; <UNDEFINED> instruction: 0x0002f4b0
   31234:			; <UNDEFINED> instruction: 0x0002f4b0
   31238:			; <UNDEFINED> instruction: 0x0002f4b0
   3123c:			; <UNDEFINED> instruction: 0x0002f4b0
   31240:			; <UNDEFINED> instruction: 0x0002f4b0
   31244:	andeq	pc, r2, ip, lsl #5
   31248:	ldrb	r3, [r5, #2]
   3124c:	cmp	r3, #32
   31250:	bls	300d8 <flatcc_json_parser_generic_json@@Base+0x1020>
   31254:	b	2fd24 <flatcc_json_parser_generic_json@@Base+0xc6c>
   31258:	ldr	r3, [r6, #20]
   3125c:	cmp	r3, #0
   31260:	bne	2f2f8 <flatcc_json_parser_generic_json@@Base+0x240>
   31264:	mov	r2, #4
   31268:	ldr	r3, [r6, #4]
   3126c:	b	303d0 <flatcc_json_parser_generic_json@@Base+0x1318>
   31270:	ldr	r3, [r6, #20]
   31274:	cmp	r3, #0
   31278:	bne	2f954 <flatcc_json_parser_generic_json@@Base+0x89c>
   3127c:	ldr	r3, [r6, #4]
   31280:	mov	r2, #6
   31284:	mov	r0, r4
   31288:	str	r2, [r6, #20]
   3128c:	str	r4, [r6, #32]
   31290:	sub	r3, r4, r3
   31294:	add	r3, r3, #1
   31298:	str	r3, [r6, #16]
   3129c:	b	2f958 <flatcc_json_parser_generic_json@@Base+0x8a0>
   312a0:	mov	r0, r2
   312a4:	b	2f434 <flatcc_json_parser_generic_json@@Base+0x37c>
   312a8:	cmp	r3, #32
   312ac:	beq	2f814 <flatcc_json_parser_generic_json@@Base+0x75c>
   312b0:	bls	312e8 <flatcc_json_parser_generic_json@@Base+0x2230>
   312b4:	cmp	r3, #58	; 0x3a
   312b8:	beq	2f814 <flatcc_json_parser_generic_json@@Base+0x75c>
   312bc:	bls	312dc <flatcc_json_parser_generic_json@@Base+0x2224>
   312c0:	cmp	r3, #93	; 0x5d
   312c4:	beq	2f814 <flatcc_json_parser_generic_json@@Base+0x75c>
   312c8:	cmp	r3, #125	; 0x7d
   312cc:	bne	2f948 <flatcc_json_parser_generic_json@@Base+0x890>
   312d0:	b	2f814 <flatcc_json_parser_generic_json@@Base+0x75c>
   312d4:	mov	r0, r4
   312d8:	b	2f948 <flatcc_json_parser_generic_json@@Base+0x890>
   312dc:	cmp	r3, #44	; 0x2c
   312e0:	bne	2f948 <flatcc_json_parser_generic_json@@Base+0x890>
   312e4:	b	2f814 <flatcc_json_parser_generic_json@@Base+0x75c>
   312e8:	cmp	r3, #9
   312ec:	bcc	2f948 <flatcc_json_parser_generic_json@@Base+0x890>
   312f0:	cmp	r3, #11
   312f4:	bls	2f814 <flatcc_json_parser_generic_json@@Base+0x75c>
   312f8:	cmp	r3, #13
   312fc:	bne	2f948 <flatcc_json_parser_generic_json@@Base+0x890>
   31300:	b	2f814 <flatcc_json_parser_generic_json@@Base+0x75c>

00031304 <flatcc_json_parser_unmatched_symbol@@Base>:
   31304:	ldr	r3, [r0, #8]
   31308:	tst	r3, #1
   3130c:	bne	31340 <flatcc_json_parser_unmatched_symbol@@Base+0x3c>
   31310:	ldr	r3, [r0, #20]
   31314:	cmp	r3, #0
   31318:	bne	31338 <flatcc_json_parser_unmatched_symbol@@Base+0x34>
   3131c:	ldr	r3, [r0, #4]
   31320:	mov	ip, #13
   31324:	str	r1, [r0, #32]
   31328:	str	ip, [r0, #20]
   3132c:	sub	r1, r1, r3
   31330:	add	r1, r1, #1
   31334:	str	r1, [r0, #16]
   31338:	mov	r0, r2
   3133c:	bx	lr
   31340:	cmp	r1, r2
   31344:	push	{lr}		; (str lr, [sp, #-4]!)
   31348:	beq	31390 <flatcc_json_parser_unmatched_symbol@@Base+0x8c>
   3134c:	ldrb	ip, [r1]
   31350:	cmp	ip, #34	; 0x22
   31354:	bne	31374 <flatcc_json_parser_unmatched_symbol@@Base+0x70>
   31358:	b	313c4 <flatcc_json_parser_unmatched_symbol@@Base+0xc0>
   3135c:	add	r1, r3, #1
   31360:	cmp	r2, r1
   31364:	beq	31390 <flatcc_json_parser_unmatched_symbol@@Base+0x8c>
   31368:	ldrb	ip, [r3, #1]
   3136c:	cmp	ip, #34	; 0x22
   31370:	beq	313c4 <flatcc_json_parser_unmatched_symbol@@Base+0xc0>
   31374:	cmp	ip, #92	; 0x5c
   31378:	mov	r3, r1
   3137c:	bne	3135c <flatcc_json_parser_unmatched_symbol@@Base+0x58>
   31380:	sub	ip, r2, r1
   31384:	add	r3, r1, #1
   31388:	cmp	ip, #1
   3138c:	bgt	3135c <flatcc_json_parser_unmatched_symbol@@Base+0x58>
   31390:	ldr	r3, [r0, #20]
   31394:	cmp	r3, #0
   31398:	bne	313bc <flatcc_json_parser_unmatched_symbol@@Base+0xb8>
   3139c:	ldr	ip, [r0, #4]
   313a0:	mov	lr, #20
   313a4:	mov	r3, lr
   313a8:	str	r1, [r0, #32]
   313ac:	str	lr, [r0, #20]
   313b0:	sub	r1, r1, ip
   313b4:	add	r1, r1, #1
   313b8:	str	r1, [r0, #16]
   313bc:	mov	ip, r2
   313c0:	b	3141c <flatcc_json_parser_unmatched_symbol@@Base+0x118>
   313c4:	add	ip, r1, #1
   313c8:	sub	r3, r2, ip
   313cc:	cmp	r3, #1
   313d0:	ble	313e4 <flatcc_json_parser_unmatched_symbol@@Base+0xe0>
   313d4:	ldrb	r3, [r1, #1]
   313d8:	cmp	r3, #32
   313dc:	bhi	31458 <flatcc_json_parser_unmatched_symbol@@Base+0x154>
   313e0:	beq	31448 <flatcc_json_parser_unmatched_symbol@@Base+0x144>
   313e4:	cmp	r2, ip
   313e8:	beq	31418 <flatcc_json_parser_unmatched_symbol@@Base+0x114>
   313ec:	ldrb	r3, [ip]
   313f0:	cmp	r3, #32
   313f4:	bne	314d4 <flatcc_json_parser_unmatched_symbol@@Base+0x1d0>
   313f8:	add	r1, ip, #1
   313fc:	b	3140c <flatcc_json_parser_unmatched_symbol@@Base+0x108>
   31400:	ldrb	r3, [r1], #1
   31404:	cmp	r3, #32
   31408:	bne	314d4 <flatcc_json_parser_unmatched_symbol@@Base+0x1d0>
   3140c:	cmp	r2, r1
   31410:	mov	ip, r1
   31414:	bne	31400 <flatcc_json_parser_unmatched_symbol@@Base+0xfc>
   31418:	ldr	r3, [r0, #20]
   3141c:	cmp	r3, #0
   31420:	bne	31440 <flatcc_json_parser_unmatched_symbol@@Base+0x13c>
   31424:	ldr	r3, [r0, #4]
   31428:	mov	r1, #4
   3142c:	str	r1, [r0, #20]
   31430:	str	ip, [r0, #32]
   31434:	sub	ip, ip, r3
   31438:	add	ip, ip, #1
   3143c:	str	ip, [r0, #16]
   31440:	mov	r0, r2
   31444:	pop	{pc}		; (ldr pc, [sp], #4)
   31448:	ldrb	r3, [r1, #2]
   3144c:	cmp	r3, #32
   31450:	addhi	ip, r1, #2
   31454:	bls	313e4 <flatcc_json_parser_unmatched_symbol@@Base+0xe0>
   31458:	cmp	r2, ip
   3145c:	beq	31418 <flatcc_json_parser_unmatched_symbol@@Base+0x114>
   31460:	cmp	r3, #58	; 0x3a
   31464:	bne	31418 <flatcc_json_parser_unmatched_symbol@@Base+0x114>
   31468:	add	r1, ip, #1
   3146c:	sub	r3, r2, r1
   31470:	cmp	r3, #1
   31474:	ble	31498 <flatcc_json_parser_unmatched_symbol@@Base+0x194>
   31478:	ldrb	r3, [ip, #1]
   3147c:	cmp	r3, #32
   31480:	bhi	314cc <flatcc_json_parser_unmatched_symbol@@Base+0x1c8>
   31484:	bne	31498 <flatcc_json_parser_unmatched_symbol@@Base+0x194>
   31488:	ldrb	r3, [ip, #2]
   3148c:	cmp	r3, #32
   31490:	addhi	r1, ip, #2
   31494:	bhi	314cc <flatcc_json_parser_unmatched_symbol@@Base+0x1c8>
   31498:	cmp	r2, r1
   3149c:	beq	314cc <flatcc_json_parser_unmatched_symbol@@Base+0x1c8>
   314a0:	ldrb	ip, [r1]
   314a4:	cmp	ip, #32
   314a8:	bne	315bc <flatcc_json_parser_unmatched_symbol@@Base+0x2b8>
   314ac:	add	r3, r1, #1
   314b0:	b	314c0 <flatcc_json_parser_unmatched_symbol@@Base+0x1bc>
   314b4:	ldrb	ip, [r3], #1
   314b8:	cmp	ip, #32
   314bc:	bne	315bc <flatcc_json_parser_unmatched_symbol@@Base+0x2b8>
   314c0:	cmp	r2, r3
   314c4:	mov	r1, r3
   314c8:	bne	314b4 <flatcc_json_parser_unmatched_symbol@@Base+0x1b0>
   314cc:	pop	{lr}		; (ldr lr, [sp], #4)
   314d0:	b	2f0b8 <flatcc_json_parser_generic_json@@Base>
   314d4:	cmp	r3, #32
   314d8:	bhi	31460 <flatcc_json_parser_unmatched_symbol@@Base+0x15c>
   314dc:	sub	r3, r3, #9
   314e0:	cmp	r3, #23
   314e4:	ldrls	pc, [pc, r3, lsl #2]
   314e8:	b	315a4 <flatcc_json_parser_unmatched_symbol@@Base+0x2a0>
   314ec:	muleq	r3, ip, r5
   314f0:	andeq	r1, r3, r0, ror r5
   314f4:	andeq	r1, r3, r4, lsr #11
   314f8:	andeq	r1, r3, r4, lsr #11
   314fc:	andeq	r1, r3, ip, asr #10
   31500:	andeq	r1, r3, r4, lsr #11
   31504:	andeq	r1, r3, r4, lsr #11
   31508:	andeq	r1, r3, r4, lsr #11
   3150c:	andeq	r1, r3, r4, lsr #11
   31510:	andeq	r1, r3, r4, lsr #11
   31514:	andeq	r1, r3, r4, lsr #11
   31518:	andeq	r1, r3, r4, lsr #11
   3151c:	andeq	r1, r3, r4, lsr #11
   31520:	andeq	r1, r3, r4, lsr #11
   31524:	andeq	r1, r3, r4, lsr #11
   31528:	andeq	r1, r3, r4, lsr #11
   3152c:	andeq	r1, r3, r4, lsr #11
   31530:	andeq	r1, r3, r4, lsr #11
   31534:	andeq	r1, r3, r4, lsr #11
   31538:	andeq	r1, r3, r4, lsr #11
   3153c:	andeq	r1, r3, r4, lsr #11
   31540:	andeq	r1, r3, r4, lsr #11
   31544:	andeq	r1, r3, r4, lsr #11
   31548:	andeq	r1, r3, r4, ror #7
   3154c:	sub	r3, r2, ip
   31550:	add	r1, ip, #1
   31554:	cmp	r3, #1
   31558:	ble	31568 <flatcc_json_parser_unmatched_symbol@@Base+0x264>
   3155c:	ldrb	r3, [ip, #1]
   31560:	cmp	r3, #10
   31564:	addeq	r1, ip, #2
   31568:	mov	ip, r1
   3156c:	b	31574 <flatcc_json_parser_unmatched_symbol@@Base+0x270>
   31570:	add	ip, ip, #1
   31574:	ldr	r3, [r0, #12]
   31578:	str	ip, [r0, #4]
   3157c:	add	r3, r3, #1
   31580:	str	r3, [r0, #12]
   31584:	cmp	r2, ip
   31588:	beq	31418 <flatcc_json_parser_unmatched_symbol@@Base+0x114>
   3158c:	ldrb	r3, [ip]
   31590:	cmp	r3, #32
   31594:	bls	314dc <flatcc_json_parser_unmatched_symbol@@Base+0x1d8>
   31598:	b	31460 <flatcc_json_parser_unmatched_symbol@@Base+0x15c>
   3159c:	add	ip, ip, #1
   315a0:	b	31584 <flatcc_json_parser_unmatched_symbol@@Base+0x280>
   315a4:	ldr	r3, [r0, #20]
   315a8:	cmp	r3, #0
   315ac:	bne	31440 <flatcc_json_parser_unmatched_symbol@@Base+0x13c>
   315b0:	mov	r1, #5
   315b4:	ldr	r3, [r0, #4]
   315b8:	b	3142c <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   315bc:	cmp	ip, #32
   315c0:	bhi	314cc <flatcc_json_parser_unmatched_symbol@@Base+0x1c8>
   315c4:	sub	ip, ip, #9
   315c8:	cmp	ip, #23
   315cc:	ldrls	pc, [pc, ip, lsl #2]
   315d0:	b	3168c <flatcc_json_parser_unmatched_symbol@@Base+0x388>
   315d4:	andeq	r1, r3, r4, lsl #13
   315d8:	andeq	r1, r3, ip, ror r6
   315dc:	andeq	r1, r3, ip, lsl #13
   315e0:	andeq	r1, r3, ip, lsl #13
   315e4:	andeq	r1, r3, r4, lsr r6
   315e8:	andeq	r1, r3, ip, lsl #13
   315ec:	andeq	r1, r3, ip, lsl #13
   315f0:	andeq	r1, r3, ip, lsl #13
   315f4:	andeq	r1, r3, ip, lsl #13
   315f8:	andeq	r1, r3, ip, lsl #13
   315fc:	andeq	r1, r3, ip, lsl #13
   31600:	andeq	r1, r3, ip, lsl #13
   31604:	andeq	r1, r3, ip, lsl #13
   31608:	andeq	r1, r3, ip, lsl #13
   3160c:	andeq	r1, r3, ip, lsl #13
   31610:	andeq	r1, r3, ip, lsl #13
   31614:	andeq	r1, r3, ip, lsl #13
   31618:	andeq	r1, r3, ip, lsl #13
   3161c:	andeq	r1, r3, ip, lsl #13
   31620:	andeq	r1, r3, ip, lsl #13
   31624:	andeq	r1, r3, ip, lsl #13
   31628:	andeq	r1, r3, ip, lsl #13
   3162c:	andeq	r1, r3, ip, lsl #13
   31630:	muleq	r3, r8, r4
   31634:	sub	r3, r2, r1
   31638:	add	ip, r1, #1
   3163c:	cmp	r3, #1
   31640:	ble	31650 <flatcc_json_parser_unmatched_symbol@@Base+0x34c>
   31644:	ldrb	r3, [r1, #1]
   31648:	cmp	r3, #10
   3164c:	addeq	ip, r1, #2
   31650:	mov	r1, ip
   31654:	ldr	r3, [r0, #12]
   31658:	str	r1, [r0, #4]
   3165c:	add	r3, r3, #1
   31660:	str	r3, [r0, #12]
   31664:	cmp	r2, r1
   31668:	beq	314cc <flatcc_json_parser_unmatched_symbol@@Base+0x1c8>
   3166c:	ldrb	ip, [r1]
   31670:	cmp	ip, #32
   31674:	bls	315c4 <flatcc_json_parser_unmatched_symbol@@Base+0x2c0>
   31678:	b	314cc <flatcc_json_parser_unmatched_symbol@@Base+0x1c8>
   3167c:	add	r1, r1, #1
   31680:	b	31654 <flatcc_json_parser_unmatched_symbol@@Base+0x350>
   31684:	add	r1, r1, #1
   31688:	b	31664 <flatcc_json_parser_unmatched_symbol@@Base+0x360>
   3168c:	ldr	r3, [r0, #20]
   31690:	cmp	r3, #0
   31694:	movne	r1, r2
   31698:	bne	314cc <flatcc_json_parser_unmatched_symbol@@Base+0x1c8>
   3169c:	ldr	r3, [r0, #4]
   316a0:	mov	ip, #5
   316a4:	str	ip, [r0, #20]
   316a8:	str	r1, [r0, #32]
   316ac:	sub	r3, r1, r3
   316b0:	mov	r1, r2
   316b4:	add	r3, r3, #1
   316b8:	str	r3, [r0, #16]
   316bc:	b	314cc <flatcc_json_parser_unmatched_symbol@@Base+0x1c8>

000316c0 <flatcc_json_parser_integer@@Base>:
   316c0:	cmp	r1, r2
   316c4:	beq	31810 <flatcc_json_parser_integer@@Base+0x150>
   316c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   316cc:	mov	ip, r0
   316d0:	strd	r6, [sp, #8]
   316d4:	strd	r8, [sp, #16]
   316d8:	strd	sl, [sp, #24]
   316dc:	str	lr, [sp, #32]
   316e0:	ldrb	lr, [r1]
   316e4:	sub	lr, lr, #45	; 0x2d
   316e8:	clz	lr, lr
   316ec:	lsr	lr, lr, #5
   316f0:	add	r0, r1, lr
   316f4:	cmp	r2, r0
   316f8:	str	lr, [r3]
   316fc:	beq	31824 <flatcc_json_parser_integer@@Base+0x164>
   31700:	ldrb	r8, [r1, lr]
   31704:	sub	r3, r8, #48	; 0x30
   31708:	cmp	r3, #9
   3170c:	bhi	31818 <flatcc_json_parser_integer@@Base+0x158>
   31710:	uxtb	r8, r8
   31714:	mov	r9, #0
   31718:	subs	r4, r8, #48	; 0x30
   3171c:	add	lr, r0, #1
   31720:	sbc	r5, r9, #0
   31724:	b	3175c <flatcc_json_parser_integer@@Base+0x9c>
   31728:	adds	r9, r9, r4
   3172c:	adc	r3, r3, r5
   31730:	adds	r9, r9, r9
   31734:	adc	r3, r3, r3
   31738:	subs	r6, r9, #48	; 0x30
   3173c:	sbc	r7, r3, #0
   31740:	adds	sl, r6, r8
   31744:	adc	fp, r7, #0
   31748:	cmp	fp, r5
   3174c:	mov	r5, fp
   31750:	cmpeq	sl, r4
   31754:	mov	r4, sl
   31758:	bcc	317f8 <flatcc_json_parser_integer@@Base+0x138>
   3175c:	lsl	r3, r5, #2
   31760:	cmp	lr, r2
   31764:	mov	r0, lr
   31768:	lsl	r9, r4, #2
   3176c:	orr	r3, r3, r4, lsr #30
   31770:	beq	317a0 <flatcc_json_parser_integer@@Base+0xe0>
   31774:	ldrb	r8, [lr]
   31778:	add	lr, lr, #1
   3177c:	sub	sl, r8, #48	; 0x30
   31780:	cmp	sl, #9
   31784:	bls	31728 <flatcc_json_parser_integer@@Base+0x68>
   31788:	cmp	r1, r0
   3178c:	beq	317a8 <flatcc_json_parser_integer@@Base+0xe8>
   31790:	and	r3, r8, #223	; 0xdf
   31794:	cmp	r8, #46	; 0x2e
   31798:	cmpne	r3, #69	; 0x45
   3179c:	beq	317c0 <flatcc_json_parser_integer@@Base+0x100>
   317a0:	ldr	r3, [sp, #36]	; 0x24
   317a4:	strd	r4, [r3]
   317a8:	ldrd	r4, [sp]
   317ac:	ldrd	r6, [sp, #8]
   317b0:	ldrd	r8, [sp, #16]
   317b4:	ldrd	sl, [sp, #24]
   317b8:	add	sp, sp, #32
   317bc:	pop	{pc}		; (ldr pc, [sp], #4)
   317c0:	ldr	r3, [ip, #20]
   317c4:	cmp	r3, #0
   317c8:	bne	317f0 <flatcc_json_parser_integer@@Base+0x130>
   317cc:	ldr	r3, [ip, #4]
   317d0:	mov	r1, #12
   317d4:	sub	r3, r0, r3
   317d8:	str	r1, [ip, #20]
   317dc:	add	r3, r3, #1
   317e0:	str	r3, [ip, #16]
   317e4:	str	r0, [ip, #32]
   317e8:	mov	r0, r2
   317ec:	b	317a8 <flatcc_json_parser_integer@@Base+0xe8>
   317f0:	mov	r0, r2
   317f4:	b	317a8 <flatcc_json_parser_integer@@Base+0xe8>
   317f8:	ldr	r3, [ip, #20]
   317fc:	cmp	r3, #0
   31800:	bne	317f0 <flatcc_json_parser_integer@@Base+0x130>
   31804:	mov	r1, #8
   31808:	ldr	r3, [ip, #4]
   3180c:	b	317d4 <flatcc_json_parser_integer@@Base+0x114>
   31810:	mov	r0, r2
   31814:	bx	lr
   31818:	mov	r4, #0
   3181c:	mov	r5, #0
   31820:	b	31788 <flatcc_json_parser_integer@@Base+0xc8>
   31824:	mov	r4, #0
   31828:	mov	r5, #0
   3182c:	b	317a0 <flatcc_json_parser_integer@@Base+0xe0>

00031830 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   31830:	cmp	r1, r2
   31834:	strd	r4, [sp, #-36]!	; 0xffffffdc
   31838:	mov	r5, r2
   3183c:	mov	r4, r0
   31840:	strd	r6, [sp, #8]
   31844:	strd	r8, [sp, #16]
   31848:	mov	r8, r3
   3184c:	strd	sl, [sp, #24]
   31850:	str	lr, [sp, #32]
   31854:	sub	sp, sp, #44	; 0x2c
   31858:	beq	319f8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c8>
   3185c:	ldrb	r3, [r1]
   31860:	cmp	r3, #34	; 0x22
   31864:	bne	319f8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c8>
   31868:	add	sl, r1, #1
   3186c:	cmp	r2, sl
   31870:	beq	31b0c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2dc>
   31874:	ldrb	r3, [r1, #1]
   31878:	cmp	r3, #34	; 0x22
   3187c:	cmpne	r3, #31
   31880:	movhi	r2, #1
   31884:	movls	r2, #0
   31888:	cmp	r3, #92	; 0x5c
   3188c:	moveq	r2, #0
   31890:	andne	r2, r2, #1
   31894:	cmp	r2, #0
   31898:	beq	31b34 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x304>
   3189c:	add	r1, r1, #2
   318a0:	cmp	r1, r5
   318a4:	mov	r6, r1
   318a8:	beq	31b10 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e0>
   318ac:	ldrb	r3, [r1], #1
   318b0:	cmp	r3, #34	; 0x22
   318b4:	cmpne	r3, #31
   318b8:	movhi	r2, #1
   318bc:	movls	r2, #0
   318c0:	cmp	r3, #92	; 0x5c
   318c4:	moveq	r2, #0
   318c8:	andne	r2, r2, #1
   318cc:	cmp	r2, #0
   318d0:	bne	318a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x70>
   318d4:	cmp	r3, #31
   318d8:	bls	31ac0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x290>
   318dc:	cmp	r3, #34	; 0x22
   318e0:	bne	31a24 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f4>
   318e4:	sub	r9, r6, sl
   318e8:	lsr	r7, r9, #2
   318ec:	and	r3, r9, #3
   318f0:	cmp	r3, #2
   318f4:	add	r7, r7, r7, lsl #1
   318f8:	addeq	r7, r7, #1
   318fc:	beq	31908 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd8>
   31900:	cmp	r3, #3
   31904:	addeq	r7, r7, #2
   31908:	mov	r2, #1
   3190c:	mvn	r3, #0
   31910:	ldr	r0, [r4]
   31914:	mov	r1, r2
   31918:	bl	270b0 <flatcc_builder_start_vector@@Base>
   3191c:	cmp	r0, #0
   31920:	bne	31a80 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x250>
   31924:	mov	r1, r7
   31928:	ldr	r0, [r4]
   3192c:	bl	2640c <flatcc_builder_extend_vector@@Base>
   31930:	subs	fp, r0, #0
   31934:	beq	31a80 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x250>
   31938:	ldr	r3, [pc, #1028]	; 31d44 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x514>
   3193c:	ldr	r1, [sp, #80]	; 0x50
   31940:	add	r2, r3, #256	; 0x100
   31944:	cmp	r1, #0
   31948:	moveq	r3, r2
   3194c:	cmp	r7, #0
   31950:	movne	r1, r7
   31954:	mvneq	r1, #0
   31958:	cmp	r9, #0
   3195c:	beq	31d24 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4f4>
   31960:	sub	r2, fp, #3
   31964:	add	r0, fp, r1
   31968:	str	fp, [sp, #4]
   3196c:	add	r2, r2, r1
   31970:	mov	lr, sl
   31974:	str	r9, [sp, #8]
   31978:	str	r0, [sp, #12]
   3197c:	str	r2, [sp, #24]
   31980:	mov	r2, fp
   31984:	ldrd	r0, [sp, #8]
   31988:	str	r2, [sp, #16]
   3198c:	sub	r2, r1, r2
   31990:	mov	r1, #0
   31994:	str	r2, [sp, #20]
   31998:	ldrb	r2, [lr, r1]
   3199c:	ldrb	ip, [r3, r2]
   319a0:	add	r2, sp, #40	; 0x28
   319a4:	add	r2, r2, r1
   319a8:	cmp	ip, #63	; 0x3f
   319ac:	strb	ip, [r2, #-4]
   319b0:	bls	31af0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c0>
   319b4:	cmp	ip, #65	; 0x41
   319b8:	beq	31b28 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2f8>
   319bc:	cmp	ip, #66	; 0x42
   319c0:	movne	r2, r1
   319c4:	beq	31b3c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x30c>
   319c8:	sub	r2, r0, r2
   319cc:	cmp	r1, #2
   319d0:	beq	31b90 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x360>
   319d4:	cmp	r1, #3
   319d8:	beq	31cd0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4a0>
   319dc:	cmp	r1, #0
   319e0:	subeq	r2, r9, r2
   319e4:	beq	31cc4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x494>
   319e8:	ldr	r3, [sp, #8]
   319ec:	sub	r6, r9, r3
   319f0:	add	r6, sl, r6
   319f4:	b	31a24 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f4>
   319f8:	ldr	r3, [r4, #20]
   319fc:	cmp	r3, #0
   31a00:	bne	31a20 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
   31a04:	ldr	r3, [r4, #4]
   31a08:	mov	r2, #16
   31a0c:	str	r1, [r4, #32]
   31a10:	str	r2, [r4, #20]
   31a14:	sub	r1, r1, r3
   31a18:	add	r1, r1, #1
   31a1c:	str	r1, [r4, #16]
   31a20:	mov	r6, r5
   31a24:	ldr	r2, [sp, #80]	; 0x50
   31a28:	mov	r3, #0
   31a2c:	str	r3, [r8]
   31a30:	cmp	r2, r3
   31a34:	ldr	r3, [r4, #20]
   31a38:	movne	r2, #32
   31a3c:	moveq	r2, #31
   31a40:	cmp	r3, #0
   31a44:	bne	31ab8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x288>
   31a48:	ldr	r3, [r4, #4]
   31a4c:	mov	r0, r5
   31a50:	str	r2, [r4, #20]
   31a54:	str	r6, [r4, #32]
   31a58:	sub	r6, r6, r3
   31a5c:	add	r6, r6, #1
   31a60:	str	r6, [r4, #16]
   31a64:	add	sp, sp, #44	; 0x2c
   31a68:	ldrd	r4, [sp]
   31a6c:	ldrd	r6, [sp, #8]
   31a70:	ldrd	r8, [sp, #16]
   31a74:	ldrd	sl, [sp, #24]
   31a78:	add	sp, sp, #32
   31a7c:	pop	{pc}		; (ldr pc, [sp], #4)
   31a80:	mov	r3, #0
   31a84:	str	r3, [r8]
   31a88:	ldr	r3, [r4, #20]
   31a8c:	cmp	r3, #0
   31a90:	bne	31ab8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x288>
   31a94:	ldr	r3, [r4, #4]
   31a98:	mov	r2, #33	; 0x21
   31a9c:	mov	r0, r5
   31aa0:	str	r6, [r4, #32]
   31aa4:	str	r2, [r4, #20]
   31aa8:	sub	r6, r6, r3
   31aac:	add	r6, r6, #1
   31ab0:	str	r6, [r4, #16]
   31ab4:	b	31a64 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x234>
   31ab8:	mov	r0, r5
   31abc:	b	31a64 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x234>
   31ac0:	ldr	r3, [r4, #20]
   31ac4:	cmp	r3, #0
   31ac8:	bne	31a20 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
   31acc:	ldr	r3, [r4, #4]
   31ad0:	mov	r2, #17
   31ad4:	sub	r3, r6, r3
   31ad8:	str	r2, [r4, #20]
   31adc:	add	r3, r3, #1
   31ae0:	str	r3, [r4, #16]
   31ae4:	str	r6, [r4, #32]
   31ae8:	mov	r6, r5
   31aec:	b	31a24 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f4>
   31af0:	add	r1, r1, #1
   31af4:	cmp	r1, #3
   31af8:	bhi	31c38 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x408>
   31afc:	cmp	r0, r1
   31b00:	bne	31998 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
   31b04:	mov	r2, #0
   31b08:	b	319cc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x19c>
   31b0c:	mov	r6, r2
   31b10:	ldr	r3, [r4, #20]
   31b14:	cmp	r3, #0
   31b18:	bne	31a20 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
   31b1c:	mov	r2, #20
   31b20:	ldr	r3, [r4, #4]
   31b24:	b	31ad4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2a4>
   31b28:	add	lr, lr, #1
   31b2c:	sub	r0, r0, #1
   31b30:	b	31af4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c4>
   31b34:	mov	r6, sl
   31b38:	b	318d4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa4>
   31b3c:	add	r2, r1, #1
   31b40:	cmp	r2, #7
   31b44:	cmpls	r2, r0
   31b48:	bcs	319c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   31b4c:	ldrb	ip, [lr, r2]
   31b50:	add	lr, lr, r2
   31b54:	ldrb	ip, [r3, ip]
   31b58:	sub	ip, ip, #65	; 0x41
   31b5c:	cmp	ip, #1
   31b60:	bls	31b7c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x34c>
   31b64:	b	319c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   31b68:	ldrb	ip, [lr, #1]!
   31b6c:	ldrb	ip, [r3, ip]
   31b70:	sub	ip, ip, #65	; 0x41
   31b74:	cmp	ip, #1
   31b78:	bhi	319c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   31b7c:	add	r2, r2, #1
   31b80:	cmp	r2, #7
   31b84:	cmpls	r2, r0
   31b88:	bcc	31b68 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x338>
   31b8c:	b	319c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   31b90:	ldrb	r3, [sp, #37]	; 0x25
   31b94:	lsl	r1, r3, #4
   31b98:	tst	r1, #240	; 0xf0
   31b9c:	bne	319e8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   31ba0:	ldrb	r0, [sp, #36]	; 0x24
   31ba4:	lsr	r3, r3, #4
   31ba8:	sub	r2, r9, r2
   31bac:	ldr	r1, [sp, #4]
   31bb0:	orr	r3, r3, r0, lsl #2
   31bb4:	strb	r3, [r1], #1
   31bb8:	sub	r1, r1, fp
   31bbc:	cmp	r9, r2
   31bc0:	addne	r6, sl, r2
   31bc4:	bne	31a24 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f4>
   31bc8:	cmp	r7, r1
   31bcc:	ldr	r0, [r4]
   31bd0:	bls	31be8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3b8>
   31bd4:	sub	r1, r7, r1
   31bd8:	bl	26ec8 <flatcc_builder_truncate_vector@@Base>
   31bdc:	cmp	r0, #0
   31be0:	bne	31a80 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x250>
   31be4:	ldr	r0, [r4]
   31be8:	bl	284e4 <flatcc_builder_end_vector@@Base>
   31bec:	cmp	r0, #0
   31bf0:	str	r0, [r8]
   31bf4:	beq	31a80 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x250>
   31bf8:	ldrb	r3, [r6]
   31bfc:	cmp	r3, #34	; 0x22
   31c00:	addeq	r0, r6, #1
   31c04:	beq	31a64 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x234>
   31c08:	ldr	r3, [r4, #20]
   31c0c:	cmp	r3, #0
   31c10:	bne	31ab8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x288>
   31c14:	ldr	r3, [r4, #4]
   31c18:	mov	r2, #20
   31c1c:	mov	r0, r5
   31c20:	str	r2, [r4, #20]
   31c24:	str	r6, [r4, #32]
   31c28:	sub	r3, r6, r3
   31c2c:	add	r3, r3, #1
   31c30:	str	r3, [r4, #16]
   31c34:	b	31a64 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x234>
   31c38:	ldr	r2, [sp, #20]
   31c3c:	cmp	r2, #2
   31c40:	bls	319e8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   31c44:	ldr	r2, [sp, #4]
   31c48:	sub	r0, r0, #4
   31c4c:	add	lr, lr, #4
   31c50:	ldr	ip, [sp, #24]
   31c54:	str	r0, [sp, #8]
   31c58:	ldrb	r1, [sp, #37]	; 0x25
   31c5c:	add	r0, r2, #3
   31c60:	cmp	ip, r2
   31c64:	ldrb	ip, [sp, #36]	; 0x24
   31c68:	str	r0, [sp, #16]
   31c6c:	ldrb	r2, [sp, #38]	; 0x26
   31c70:	lsr	r0, r1, #4
   31c74:	str	r1, [sp, #20]
   31c78:	ldrb	r1, [sp, #39]	; 0x27
   31c7c:	orr	r0, r0, ip, lsl #2
   31c80:	ldr	ip, [sp, #20]
   31c84:	str	r1, [sp, #28]
   31c88:	lsr	r1, r2, #2
   31c8c:	orr	r1, r1, ip, lsl #4
   31c90:	ldr	ip, [sp, #28]
   31c94:	orr	r2, ip, r2, lsl #6
   31c98:	ldr	ip, [sp, #4]
   31c9c:	strb	r0, [ip]
   31ca0:	strb	r1, [ip, #1]
   31ca4:	strb	r2, [ip, #2]
   31ca8:	beq	31d30 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x500>
   31cac:	ldr	r2, [sp, #8]
   31cb0:	cmp	r2, #0
   31cb4:	ldr	r2, [sp, #16]
   31cb8:	str	r2, [sp, #4]
   31cbc:	bne	31984 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x154>
   31cc0:	mov	r2, r9
   31cc4:	ldr	r3, [sp, #16]
   31cc8:	sub	r1, r3, fp
   31ccc:	b	31bbc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x38c>
   31cd0:	ldrb	r3, [sp, #38]	; 0x26
   31cd4:	lsl	r1, r3, #6
   31cd8:	tst	r1, #192	; 0xc0
   31cdc:	bne	319e8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   31ce0:	ldr	r1, [sp, #20]
   31ce4:	cmp	r1, #1
   31ce8:	beq	319e8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   31cec:	ldrb	r0, [sp, #37]	; 0x25
   31cf0:	lsr	r3, r3, #2
   31cf4:	sub	r2, r9, r2
   31cf8:	ldrb	lr, [sp, #36]	; 0x24
   31cfc:	ldr	r1, [sp, #4]
   31d00:	lsr	ip, r0, #4
   31d04:	orr	r0, r3, r0, lsl #4
   31d08:	orr	r3, ip, lr, lsl #2
   31d0c:	ldr	ip, [sp, #4]
   31d10:	add	r1, r1, #2
   31d14:	sub	r1, r1, fp
   31d18:	strb	r3, [ip]
   31d1c:	strb	r0, [ip, #1]
   31d20:	b	31bbc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x38c>
   31d24:	mov	r2, r9
   31d28:	str	fp, [sp, #16]
   31d2c:	b	31cc4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x494>
   31d30:	ldr	r3, [sp, #16]
   31d34:	sub	r1, r3, fp
   31d38:	ldr	r3, [sp, #8]
   31d3c:	sub	r2, r9, r3
   31d40:	b	31bbc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x38c>
   31d44:	andeq	r6, r4, r8, asr #21

00031d48 <flatcc_json_parser_build_string@@Base>:
   31d48:	cmp	r1, r2
   31d4c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   31d50:	mov	r5, r0
   31d54:	strd	r6, [sp, #8]
   31d58:	mov	r6, r2
   31d5c:	mov	r7, r3
   31d60:	str	r8, [sp, #16]
   31d64:	str	lr, [sp, #20]
   31d68:	sub	sp, sp, #8
   31d6c:	beq	31f10 <flatcc_json_parser_build_string@@Base+0x1c8>
   31d70:	ldrb	r3, [r1]
   31d74:	cmp	r3, #34	; 0x22
   31d78:	bne	31f10 <flatcc_json_parser_build_string@@Base+0x1c8>
   31d7c:	add	r8, r1, #1
   31d80:	cmp	r2, r8
   31d84:	beq	32060 <flatcc_json_parser_build_string@@Base+0x318>
   31d88:	ldrb	r2, [r1, #1]
   31d8c:	cmp	r2, #34	; 0x22
   31d90:	cmpne	r2, #31
   31d94:	movhi	r3, #1
   31d98:	movls	r3, #0
   31d9c:	cmp	r2, #92	; 0x5c
   31da0:	moveq	r3, #0
   31da4:	andne	r3, r3, #1
   31da8:	cmp	r3, #0
   31dac:	beq	32080 <flatcc_json_parser_build_string@@Base+0x338>
   31db0:	add	r3, r1, #2
   31db4:	cmp	r3, r6
   31db8:	mov	r4, r3
   31dbc:	beq	32064 <flatcc_json_parser_build_string@@Base+0x31c>
   31dc0:	ldrb	r2, [r3], #1
   31dc4:	cmp	r2, #34	; 0x22
   31dc8:	cmpne	r2, #31
   31dcc:	movhi	r0, #1
   31dd0:	movls	r0, #0
   31dd4:	cmp	r2, #92	; 0x5c
   31dd8:	moveq	r0, #0
   31ddc:	andne	r0, r0, #1
   31de0:	cmp	r0, #0
   31de4:	bne	31db4 <flatcc_json_parser_build_string@@Base+0x6c>
   31de8:	cmp	r2, #31
   31dec:	ldr	r0, [r5]
   31df0:	bls	31fdc <flatcc_json_parser_build_string@@Base+0x294>
   31df4:	cmp	r2, #34	; 0x22
   31df8:	beq	32014 <flatcc_json_parser_build_string@@Base+0x2cc>
   31dfc:	bl	275d8 <flatcc_builder_start_string@@Base>
   31e00:	cmp	r0, #0
   31e04:	bne	31eec <flatcc_json_parser_build_string@@Base+0x1a4>
   31e08:	sub	r2, r4, r8
   31e0c:	mov	r1, r8
   31e10:	ldr	r0, [r5]
   31e14:	bl	26b94 <flatcc_builder_append_string@@Base>
   31e18:	cmp	r0, #0
   31e1c:	beq	31eec <flatcc_json_parser_build_string@@Base+0x1a4>
   31e20:	cmp	r6, r4
   31e24:	beq	32088 <flatcc_json_parser_build_string@@Base+0x340>
   31e28:	ldrb	r3, [r4]
   31e2c:	cmp	r3, #34	; 0x22
   31e30:	beq	32048 <flatcc_json_parser_build_string@@Base+0x300>
   31e34:	mov	r1, r4
   31e38:	add	r3, sp, #4
   31e3c:	mov	r2, r6
   31e40:	mov	r0, r5
   31e44:	bl	2e528 <flatcc_json_parser_string_escape@@Base>
   31e48:	mov	r8, r0
   31e4c:	ldrb	r2, [sp, #4]
   31e50:	add	r1, sp, #5
   31e54:	ldr	r0, [r5]
   31e58:	bl	26b94 <flatcc_builder_append_string@@Base>
   31e5c:	cmp	r0, #0
   31e60:	beq	32058 <flatcc_json_parser_build_string@@Base+0x310>
   31e64:	cmp	r6, r8
   31e68:	beq	31f94 <flatcc_json_parser_build_string@@Base+0x24c>
   31e6c:	ldrb	r3, [r8]
   31e70:	cmp	r3, #34	; 0x22
   31e74:	cmpne	r3, #31
   31e78:	movhi	r2, #1
   31e7c:	movls	r2, #0
   31e80:	cmp	r3, #92	; 0x5c
   31e84:	moveq	r2, #0
   31e88:	andne	r2, r2, #1
   31e8c:	cmp	r2, #0
   31e90:	beq	31fd4 <flatcc_json_parser_build_string@@Base+0x28c>
   31e94:	add	r2, r8, #1
   31e98:	cmp	r6, r2
   31e9c:	mov	r4, r2
   31ea0:	beq	31f98 <flatcc_json_parser_build_string@@Base+0x250>
   31ea4:	ldrb	r3, [r2], #1
   31ea8:	cmp	r3, #34	; 0x22
   31eac:	cmpne	r3, #31
   31eb0:	movhi	r1, #1
   31eb4:	movls	r1, #0
   31eb8:	cmp	r3, #92	; 0x5c
   31ebc:	moveq	r1, #0
   31ec0:	andne	r1, r1, #1
   31ec4:	cmp	r1, #0
   31ec8:	bne	31e98 <flatcc_json_parser_build_string@@Base+0x150>
   31ecc:	cmp	r3, #31
   31ed0:	ldr	r0, [r5]
   31ed4:	bls	31f48 <flatcc_json_parser_build_string@@Base+0x200>
   31ed8:	sub	r2, r4, r8
   31edc:	mov	r1, r8
   31ee0:	bl	26b94 <flatcc_builder_append_string@@Base>
   31ee4:	cmp	r0, #0
   31ee8:	bne	31e28 <flatcc_json_parser_build_string@@Base+0xe0>
   31eec:	mov	r3, #0
   31ef0:	str	r3, [r7]
   31ef4:	mov	r0, r4
   31ef8:	add	sp, sp, #8
   31efc:	ldrd	r4, [sp]
   31f00:	ldrd	r6, [sp, #8]
   31f04:	ldr	r8, [sp, #16]
   31f08:	add	sp, sp, #20
   31f0c:	pop	{pc}		; (ldr pc, [sp], #4)
   31f10:	ldr	r3, [r5, #20]
   31f14:	cmp	r3, #0
   31f18:	bne	31f38 <flatcc_json_parser_build_string@@Base+0x1f0>
   31f1c:	ldr	r3, [r5, #4]
   31f20:	mov	r2, #16
   31f24:	str	r2, [r5, #20]
   31f28:	str	r1, [r5, #32]
   31f2c:	sub	r3, r1, r3
   31f30:	add	r3, r3, #1
   31f34:	str	r3, [r5, #16]
   31f38:	mov	r4, r6
   31f3c:	mov	r8, r6
   31f40:	ldr	r0, [r5]
   31f44:	b	31dfc <flatcc_json_parser_build_string@@Base+0xb4>
   31f48:	ldr	r3, [r5, #20]
   31f4c:	cmp	r3, #0
   31f50:	beq	31fc8 <flatcc_json_parser_build_string@@Base+0x280>
   31f54:	bl	299e4 <flatcc_builder_end_string@@Base>
   31f58:	str	r0, [r7]
   31f5c:	mov	r4, r6
   31f60:	ldr	r3, [r5, #20]
   31f64:	cmp	r3, #0
   31f68:	movne	r4, r6
   31f6c:	bne	31ef4 <flatcc_json_parser_build_string@@Base+0x1ac>
   31f70:	ldr	r3, [r5, #4]
   31f74:	mov	r2, #20
   31f78:	str	r2, [r5, #20]
   31f7c:	str	r4, [r5, #32]
   31f80:	sub	r3, r4, r3
   31f84:	mov	r4, r6
   31f88:	add	r3, r3, #1
   31f8c:	str	r3, [r5, #16]
   31f90:	b	31ef4 <flatcc_json_parser_build_string@@Base+0x1ac>
   31f94:	mov	r4, r6
   31f98:	ldr	r0, [r5]
   31f9c:	ldr	r3, [r5, #20]
   31fa0:	cmp	r3, #0
   31fa4:	bne	31f54 <flatcc_json_parser_build_string@@Base+0x20c>
   31fa8:	ldr	r3, [r5, #4]
   31fac:	mov	r2, #20
   31fb0:	str	r2, [r5, #20]
   31fb4:	str	r4, [r5, #32]
   31fb8:	sub	r4, r4, r3
   31fbc:	add	r4, r4, #1
   31fc0:	str	r4, [r5, #16]
   31fc4:	b	31f54 <flatcc_json_parser_build_string@@Base+0x20c>
   31fc8:	mov	r2, #17
   31fcc:	ldr	r3, [r5, #4]
   31fd0:	b	31fb0 <flatcc_json_parser_build_string@@Base+0x268>
   31fd4:	mov	r4, r8
   31fd8:	b	31ecc <flatcc_json_parser_build_string@@Base+0x184>
   31fdc:	ldr	r3, [r5, #20]
   31fe0:	cmp	r3, #0
   31fe4:	bne	3200c <flatcc_json_parser_build_string@@Base+0x2c4>
   31fe8:	ldr	r3, [r5, #4]
   31fec:	mov	r2, #17
   31ff0:	sub	r3, r4, r3
   31ff4:	str	r2, [r5, #20]
   31ff8:	add	r3, r3, #1
   31ffc:	str	r3, [r5, #16]
   32000:	str	r4, [r5, #32]
   32004:	mov	r4, r6
   32008:	b	31dfc <flatcc_json_parser_build_string@@Base+0xb4>
   3200c:	mov	r4, r6
   32010:	b	31dfc <flatcc_json_parser_build_string@@Base+0xb4>
   32014:	sub	r2, r4, r8
   32018:	mov	r1, r8
   3201c:	bl	296d8 <flatcc_builder_create_string@@Base>
   32020:	str	r0, [r7]
   32024:	ldrb	r3, [r4]
   32028:	cmp	r3, #34	; 0x22
   3202c:	addeq	r4, r4, #1
   32030:	beq	31ef4 <flatcc_json_parser_build_string@@Base+0x1ac>
   32034:	ldr	r3, [r5, #20]
   32038:	cmp	r3, #0
   3203c:	movne	r4, r6
   32040:	bne	31ef4 <flatcc_json_parser_build_string@@Base+0x1ac>
   32044:	b	31f70 <flatcc_json_parser_build_string@@Base+0x228>
   32048:	ldr	r0, [r5]
   3204c:	bl	299e4 <flatcc_builder_end_string@@Base>
   32050:	str	r0, [r7]
   32054:	b	32024 <flatcc_json_parser_build_string@@Base+0x2dc>
   32058:	mov	r4, r8
   3205c:	b	31eec <flatcc_json_parser_build_string@@Base+0x1a4>
   32060:	mov	r4, r2
   32064:	ldr	r0, [r5]
   32068:	ldr	r3, [r5, #20]
   3206c:	cmp	r3, #0
   32070:	bne	3200c <flatcc_json_parser_build_string@@Base+0x2c4>
   32074:	mov	r2, #20
   32078:	ldr	r3, [r5, #4]
   3207c:	b	31ff0 <flatcc_json_parser_build_string@@Base+0x2a8>
   32080:	mov	r4, r8
   32084:	b	31de8 <flatcc_json_parser_build_string@@Base+0xa0>
   32088:	ldr	r0, [r5]
   3208c:	b	31f54 <flatcc_json_parser_build_string@@Base+0x20c>

00032090 <flatcc_json_parser_prepare_unions@@Base>:
   32090:	add	ip, r3, r3, lsl #1
   32094:	strd	r4, [sp, #-24]!	; 0xffffffe8
   32098:	mov	r4, r0
   3209c:	ldr	r0, [r0]
   320a0:	mov	r5, r2
   320a4:	strd	r6, [sp, #8]
   320a8:	mov	r7, r1
   320ac:	lsl	r1, ip, #3
   320b0:	str	r8, [sp, #16]
   320b4:	mov	r6, r3
   320b8:	ldr	r8, [sp, #24]
   320bc:	add	r1, r1, #8
   320c0:	str	lr, [sp, #20]
   320c4:	bl	255c0 <flatcc_builder_enter_user_frame@@Base>
   320c8:	cmp	r0, #0
   320cc:	str	r0, [r8]
   320d0:	bne	32114 <flatcc_json_parser_prepare_unions@@Base+0x84>
   320d4:	ldr	r3, [r4, #20]
   320d8:	cmp	r3, #0
   320dc:	bne	320fc <flatcc_json_parser_prepare_unions@@Base+0x6c>
   320e0:	ldr	r3, [r4, #4]
   320e4:	mov	r1, #33	; 0x21
   320e8:	str	r7, [r4, #32]
   320ec:	str	r1, [r4, #20]
   320f0:	sub	r7, r7, r3
   320f4:	add	r7, r7, #1
   320f8:	str	r7, [r4, #16]
   320fc:	mov	r0, r5
   32100:	ldrd	r4, [sp]
   32104:	ldrd	r6, [sp, #8]
   32108:	ldr	r8, [sp, #16]
   3210c:	add	sp, sp, #20
   32110:	pop	{pc}		; (ldr pc, [sp], #4)
   32114:	mov	r1, r0
   32118:	ldr	r0, [r4]
   3211c:	mov	r5, r7
   32120:	bl	25718 <flatcc_builder_get_user_frame_ptr@@Base>
   32124:	str	r6, [r0]
   32128:	b	320fc <flatcc_json_parser_prepare_unions@@Base+0x6c>

0003212c <flatcc_json_parser_finalize_unions@@Base>:
   3212c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   32130:	mov	r4, r0
   32134:	mov	r5, r1
   32138:	mov	r1, r3
   3213c:	ldr	r0, [r0]
   32140:	strd	r6, [sp, #8]
   32144:	mov	r6, r3
   32148:	mov	r7, r2
   3214c:	str	r8, [sp, #16]
   32150:	str	lr, [sp, #20]
   32154:	bl	25718 <flatcc_builder_get_user_frame_ptr@@Base>
   32158:	ldr	r3, [r0, #4]
   3215c:	cmp	r3, #0
   32160:	beq	32194 <flatcc_json_parser_finalize_unions@@Base+0x68>
   32164:	ldr	r3, [r4, #20]
   32168:	cmp	r3, #0
   3216c:	movne	r5, r7
   32170:	bne	32194 <flatcc_json_parser_finalize_unions@@Base+0x68>
   32174:	ldr	r3, [r4, #4]
   32178:	mov	r2, #27
   3217c:	str	r5, [r4, #32]
   32180:	str	r2, [r4, #20]
   32184:	sub	r3, r5, r3
   32188:	mov	r5, r7
   3218c:	add	r3, r3, #1
   32190:	str	r3, [r4, #16]
   32194:	mov	r1, r6
   32198:	ldr	r0, [r4]
   3219c:	bl	256a0 <flatcc_builder_exit_user_frame_at@@Base>
   321a0:	mov	r0, r5
   321a4:	ldrd	r4, [sp]
   321a8:	ldrd	r6, [sp, #8]
   321ac:	ldr	r8, [sp, #16]
   321b0:	add	sp, sp, #20
   321b4:	pop	{pc}		; (ldr pc, [sp], #4)

000321b8 <flatcc_json_parser_union@@Base>:
   321b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   321bc:	mov	r5, r0
   321c0:	mov	r4, r3
   321c4:	ldr	r0, [r0]
   321c8:	strd	r6, [sp, #8]
   321cc:	mov	r7, r1
   321d0:	mov	r6, r2
   321d4:	str	r8, [sp, #16]
   321d8:	str	lr, [sp, #20]
   321dc:	sub	sp, sp, #16
   321e0:	ldr	r1, [sp, #44]	; 0x2c
   321e4:	ldrh	r8, [sp, #40]	; 0x28
   321e8:	bl	25718 <flatcc_builder_get_user_frame_ptr@@Base>
   321ec:	add	r3, r4, r4, lsl #1
   321f0:	add	r3, r0, r3, lsl #3
   321f4:	ldr	r2, [r3, #8]
   321f8:	cmp	r2, #0
   321fc:	beq	32250 <flatcc_json_parser_union@@Base+0x98>
   32200:	ldr	r3, [r5, #20]
   32204:	cmp	r3, #0
   32208:	bne	32230 <flatcc_json_parser_union@@Base+0x78>
   3220c:	ldr	r3, [r5, #4]
   32210:	mov	r2, #28
   32214:	mov	r4, r6
   32218:	str	r2, [r5, #20]
   3221c:	str	r7, [r5, #32]
   32220:	sub	r7, r7, r3
   32224:	add	r7, r7, #1
   32228:	str	r7, [r5, #16]
   3222c:	b	32234 <flatcc_json_parser_union@@Base+0x7c>
   32230:	mov	r4, r6
   32234:	mov	r0, r4
   32238:	add	sp, sp, #16
   3223c:	ldrd	r4, [sp]
   32240:	ldrd	r6, [sp, #8]
   32244:	ldr	r8, [sp, #16]
   32248:	add	sp, sp, #20
   3224c:	pop	{pc}		; (ldr pc, [sp], #4)
   32250:	ldrb	r2, [r3, #20]
   32254:	mov	ip, r0
   32258:	cmp	r2, #0
   3225c:	beq	322f0 <flatcc_json_parser_union@@Base+0x138>
   32260:	ldrb	r3, [r3, #21]
   32264:	cmp	r3, #0
   32268:	strb	r3, [sp, #8]
   3226c:	beq	32328 <flatcc_json_parser_union@@Base+0x170>
   32270:	ldr	lr, [ip, #4]
   32274:	add	r4, sp, #12
   32278:	mov	r1, r7
   3227c:	mov	r2, r6
   32280:	mov	r0, r5
   32284:	add	r7, sp, #8
   32288:	sub	lr, lr, #1
   3228c:	str	lr, [ip, #4]
   32290:	str	r4, [sp]
   32294:	ldr	ip, [sp, #48]	; 0x30
   32298:	blx	ip
   3229c:	cmp	r6, r0
   322a0:	mov	r4, r0
   322a4:	beq	32234 <flatcc_json_parser_union@@Base+0x7c>
   322a8:	mov	r1, r8
   322ac:	ldm	r7, {r2, r3}
   322b0:	ldr	r0, [r5]
   322b4:	bl	2a12c <flatcc_builder_table_add_union@@Base>
   322b8:	cmp	r0, #0
   322bc:	beq	32234 <flatcc_json_parser_union@@Base+0x7c>
   322c0:	ldr	r3, [r5, #20]
   322c4:	cmp	r3, #0
   322c8:	bne	32230 <flatcc_json_parser_union@@Base+0x78>
   322cc:	ldr	r3, [r5, #4]
   322d0:	mov	r2, #28
   322d4:	str	r2, [r5, #20]
   322d8:	str	r4, [r5, #32]
   322dc:	sub	r3, r4, r3
   322e0:	mov	r4, r6
   322e4:	add	r3, r3, #1
   322e8:	str	r3, [r5, #16]
   322ec:	b	32234 <flatcc_json_parser_union@@Base+0x7c>
   322f0:	ldr	lr, [ip, #4]
   322f4:	mov	r2, r6
   322f8:	mov	r1, r7
   322fc:	mov	r0, r5
   32300:	ldr	r6, [r5, #4]
   32304:	ldr	r4, [r5, #12]
   32308:	add	lr, lr, #1
   3230c:	str	lr, [ip, #4]
   32310:	str	r7, [r3, #8]
   32314:	str	r6, [r3, #12]
   32318:	str	r4, [r3, #16]
   3231c:	bl	2f0b8 <flatcc_json_parser_generic_json@@Base>
   32320:	mov	r4, r0
   32324:	b	32234 <flatcc_json_parser_union@@Base+0x7c>
   32328:	ldr	r3, [r5, #20]
   3232c:	cmp	r3, #0
   32330:	bne	32230 <flatcc_json_parser_union@@Base+0x78>
   32334:	mov	r2, #25
   32338:	ldr	r3, [r5, #4]
   3233c:	b	32214 <flatcc_json_parser_union@@Base+0x5c>

00032340 <flatcc_json_parser_union_type@@Base>:
   32340:	strd	r4, [sp, #-36]!	; 0xffffffdc
   32344:	mov	r5, r0
   32348:	add	r4, r3, r3, lsl #1
   3234c:	ldr	r0, [r0]
   32350:	strd	r6, [sp, #8]
   32354:	lsl	r4, r4, #3
   32358:	mov	r7, r2
   3235c:	strd	r8, [sp, #16]
   32360:	strd	sl, [sp, #24]
   32364:	mov	sl, r1
   32368:	str	lr, [sp, #32]
   3236c:	sub	sp, sp, #36	; 0x24
   32370:	ldrh	r3, [sp, #72]	; 0x48
   32374:	ldr	r1, [sp, #76]	; 0x4c
   32378:	str	r3, [sp, #12]
   3237c:	bl	25718 <flatcc_builder_get_user_frame_ptr@@Base>
   32380:	add	fp, r0, #8
   32384:	add	r6, fp, r4
   32388:	ldrb	r3, [r6, #12]
   3238c:	cmp	r3, #0
   32390:	beq	323e8 <flatcc_json_parser_union_type@@Base+0xa8>
   32394:	ldr	r3, [r5, #20]
   32398:	cmp	r3, #0
   3239c:	beq	323c4 <flatcc_json_parser_union_type@@Base+0x84>
   323a0:	mov	r9, r7
   323a4:	mov	r0, r9
   323a8:	add	sp, sp, #36	; 0x24
   323ac:	ldrd	r4, [sp]
   323b0:	ldrd	r6, [sp, #8]
   323b4:	ldrd	r8, [sp, #16]
   323b8:	ldrd	sl, [sp, #24]
   323bc:	add	sp, sp, #32
   323c0:	pop	{pc}		; (ldr pc, [sp], #4)
   323c4:	ldr	r3, [r5, #4]
   323c8:	mov	r2, #28
   323cc:	mov	r9, r7
   323d0:	str	sl, [r5, #32]
   323d4:	str	r2, [r5, #20]
   323d8:	sub	sl, sl, r3
   323dc:	add	sl, sl, #1
   323e0:	str	sl, [r5, #16]
   323e4:	b	323a4 <flatcc_json_parser_union_type@@Base+0x64>
   323e8:	mov	r8, r0
   323ec:	mov	r1, #0
   323f0:	str	r3, [sp, #20]
   323f4:	mov	r0, #0
   323f8:	mov	r3, #1
   323fc:	cmp	sl, r7
   32400:	strd	r0, [sp, #24]
   32404:	strh	r3, [r6, #12]
   32408:	beq	32508 <flatcc_json_parser_union_type@@Base+0x1c8>
   3240c:	add	r0, sp, #24
   32410:	add	r3, sp, #20
   32414:	mov	r2, r7
   32418:	mov	r1, sl
   3241c:	str	r0, [sp]
   32420:	mov	r0, r5
   32424:	bl	316c0 <flatcc_json_parser_integer@@Base>
   32428:	cmp	sl, r0
   3242c:	mov	r9, r0
   32430:	bne	32510 <flatcc_json_parser_union_type@@Base+0x1d0>
   32434:	add	r0, r6, #13
   32438:	mov	r1, r9
   3243c:	ldr	r3, [sp, #80]	; 0x50
   32440:	mov	r2, r7
   32444:	str	r0, [sp]
   32448:	mov	r0, r5
   3244c:	bl	2c618 <flatcc_verify_union_vector_field@@Base+0x2b8>
   32450:	mov	r9, r0
   32454:	ldr	r1, [fp, r4]
   32458:	ldr	r3, [r8, #4]
   3245c:	cmp	r1, #0
   32460:	beq	32560 <flatcc_json_parser_union_type@@Base+0x220>
   32464:	cmp	r3, #0
   32468:	beq	325a0 <flatcc_json_parser_union_type@@Base+0x260>
   3246c:	ldr	lr, [r6, #4]
   32470:	sub	r3, r3, #1
   32474:	add	ip, sp, #28
   32478:	mov	r2, r7
   3247c:	mov	r0, r5
   32480:	ldr	sl, [r6, #8]
   32484:	add	r4, sp, #24
   32488:	str	r3, [r8, #4]
   3248c:	ldr	r8, [r5, #12]
   32490:	str	sl, [r5, #12]
   32494:	ldr	sl, [r5, #4]
   32498:	str	lr, [r5, #4]
   3249c:	ldrb	r3, [r6, #13]
   324a0:	str	ip, [sp]
   324a4:	ldr	ip, [sp, #84]	; 0x54
   324a8:	strb	r3, [sp, #24]
   324ac:	blx	ip
   324b0:	cmp	r7, r0
   324b4:	beq	323a0 <flatcc_json_parser_union_type@@Base+0x60>
   324b8:	ldm	r4, {r2, r3}
   324bc:	ldr	r0, [r5]
   324c0:	ldr	r1, [sp, #12]
   324c4:	bl	2a12c <flatcc_builder_table_add_union@@Base>
   324c8:	cmp	r0, #0
   324cc:	streq	sl, [r5, #4]
   324d0:	streq	r8, [r5, #12]
   324d4:	beq	323a4 <flatcc_json_parser_union_type@@Base+0x64>
   324d8:	ldr	r3, [r5, #20]
   324dc:	cmp	r3, #0
   324e0:	bne	323a0 <flatcc_json_parser_union_type@@Base+0x60>
   324e4:	ldr	r3, [r5, #4]
   324e8:	mov	r2, #28
   324ec:	str	r2, [r5, #20]
   324f0:	str	r9, [r5, #32]
   324f4:	sub	r3, r9, r3
   324f8:	mov	r9, r7
   324fc:	add	r3, r3, #1
   32500:	str	r3, [r5, #16]
   32504:	b	323a4 <flatcc_json_parser_union_type@@Base+0x64>
   32508:	mov	r9, r7
   3250c:	b	32434 <flatcc_json_parser_union_type@@Base+0xf4>
   32510:	ldr	r3, [sp, #20]
   32514:	cmp	r3, #0
   32518:	bne	32574 <flatcc_json_parser_union_type@@Base+0x234>
   3251c:	ldrd	r2, [sp, #24]
   32520:	cmp	r3, #0
   32524:	cmpeq	r2, #255	; 0xff
   32528:	strbls	r2, [r6, #13]
   3252c:	bls	32454 <flatcc_json_parser_union_type@@Base+0x114>
   32530:	ldr	r3, [r5, #20]
   32534:	cmp	r3, #0
   32538:	bne	32558 <flatcc_json_parser_union_type@@Base+0x218>
   3253c:	ldr	r3, [r5, #4]
   32540:	mov	r2, #7
   32544:	str	r2, [r5, #20]
   32548:	str	r0, [r5, #32]
   3254c:	sub	r3, r0, r3
   32550:	add	r3, r3, #1
   32554:	str	r3, [r5, #16]
   32558:	mov	r9, r7
   3255c:	b	32454 <flatcc_json_parser_union_type@@Base+0x114>
   32560:	ldrb	r2, [r6, #13]
   32564:	cmp	r2, #0
   32568:	addne	r3, r3, #1
   3256c:	str	r3, [r8, #4]
   32570:	b	323a4 <flatcc_json_parser_union_type@@Base+0x64>
   32574:	ldr	r3, [r5, #20]
   32578:	cmp	r3, #0
   3257c:	bne	32558 <flatcc_json_parser_union_type@@Base+0x218>
   32580:	ldr	r3, [r5, #4]
   32584:	mov	r2, #8
   32588:	str	r2, [r5, #20]
   3258c:	str	r0, [r5, #32]
   32590:	sub	r9, r0, r3
   32594:	add	r9, r9, #1
   32598:	str	r9, [r5, #16]
   3259c:	b	32558 <flatcc_json_parser_union_type@@Base+0x218>
   325a0:	movw	r1, #28256	; 0x6e60
   325a4:	movt	r1, #4
   325a8:	ldr	r3, [pc, #12]	; 325bc <flatcc_json_parser_union_type@@Base+0x27c>
   325ac:	movw	r0, #28332	; 0x6eac
   325b0:	movt	r0, #4
   325b4:	movw	r2, #965	; 0x3c5
   325b8:	bl	145f0 <__assert_fail@plt>
   325bc:	andeq	r6, r4, r8, asr #25

000325c0 <flatcc_json_parser_union_vector@@Base>:
   325c0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   325c4:	mov	r4, r3
   325c8:	mov	r5, r0
   325cc:	ldr	r0, [r0]
   325d0:	strd	r6, [sp, #8]
   325d4:	mov	r6, r1
   325d8:	ldr	r1, [sp, #36]	; 0x24
   325dc:	strd	r8, [sp, #16]
   325e0:	mov	r9, r2
   325e4:	ldrh	r8, [sp, #32]
   325e8:	str	sl, [sp, #24]
   325ec:	str	lr, [sp, #28]
   325f0:	ldr	r7, [sp, #40]	; 0x28
   325f4:	bl	25718 <flatcc_builder_get_user_frame_ptr@@Base>
   325f8:	add	r3, r4, r4, lsl #1
   325fc:	add	ip, r0, #8
   32600:	lsl	r3, r3, #3
   32604:	ldr	r2, [ip, r3]
   32608:	add	r4, ip, r3
   3260c:	cmp	r2, #0
   32610:	beq	32658 <flatcc_json_parser_union_vector@@Base+0x98>
   32614:	ldr	r3, [r5, #20]
   32618:	cmp	r3, #0
   3261c:	bne	3263c <flatcc_json_parser_union_vector@@Base+0x7c>
   32620:	ldr	r3, [r5, #4]
   32624:	mov	r2, #28
   32628:	str	r6, [r5, #32]
   3262c:	str	r2, [r5, #20]
   32630:	sub	r6, r6, r3
   32634:	add	r6, r6, #1
   32638:	str	r6, [r5, #16]
   3263c:	mov	r0, r9
   32640:	ldrd	r4, [sp]
   32644:	ldrd	r6, [sp, #8]
   32648:	ldrd	r8, [sp, #16]
   3264c:	ldr	sl, [sp, #24]
   32650:	add	sp, sp, #28
   32654:	pop	{pc}		; (ldr pc, [sp], #4)
   32658:	ldrb	r1, [r4, #12]
   3265c:	mov	lr, r0
   32660:	ldr	r2, [r0, #4]
   32664:	cmp	r1, #0
   32668:	bne	326b0 <flatcc_json_parser_union_vector@@Base+0xf0>
   3266c:	ldr	r8, [r5, #4]
   32670:	add	r1, r2, #1
   32674:	mov	r0, r5
   32678:	mov	r2, r9
   3267c:	ldr	r7, [r5, #12]
   32680:	ldr	sl, [sp, #24]
   32684:	str	r1, [lr, #4]
   32688:	mov	r1, r6
   3268c:	str	r8, [r4, #4]
   32690:	str	r7, [r4, #8]
   32694:	str	r6, [ip, r3]
   32698:	ldrd	r4, [sp]
   3269c:	ldrd	r6, [sp, #8]
   326a0:	ldrd	r8, [sp, #16]
   326a4:	ldr	lr, [sp, #28]
   326a8:	add	sp, sp, #32
   326ac:	b	2f0b8 <flatcc_json_parser_generic_json@@Base>
   326b0:	sub	ip, r2, #1
   326b4:	ldr	r3, [r4, #20]
   326b8:	mov	r2, r9
   326bc:	mov	r1, r6
   326c0:	mov	r0, r5
   326c4:	ldr	sl, [sp, #24]
   326c8:	str	ip, [lr, #4]
   326cc:	str	r8, [sp, #36]	; 0x24
   326d0:	str	r7, [sp, #40]	; 0x28
   326d4:	ldr	ip, [r4, #16]
   326d8:	ldrd	r4, [sp]
   326dc:	ldrd	r6, [sp, #8]
   326e0:	str	ip, [sp, #32]
   326e4:	ldrd	r8, [sp, #16]
   326e8:	ldr	lr, [sp, #28]
   326ec:	add	sp, sp, #32
   326f0:	b	2db38 <flatcc_json_parser_space_ext@@Base+0x154>

000326f4 <flatcc_json_parser_union_type_vector@@Base>:
   326f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   326f8:	mov	r5, r2
   326fc:	strd	r6, [sp, #8]
   32700:	mov	r6, r0
   32704:	mov	r7, r1
   32708:	strd	r8, [sp, #16]
   3270c:	mov	r8, r3
   32710:	strd	sl, [sp, #24]
   32714:	add	r8, r8, r8, lsl #1
   32718:	str	lr, [sp, #32]
   3271c:	sub	sp, sp, #44	; 0x2c
   32720:	ldrh	r3, [sp, #80]	; 0x50
   32724:	lsl	r8, r8, #3
   32728:	ldr	r0, [r0]
   3272c:	ldr	r1, [sp, #84]	; 0x54
   32730:	str	r3, [sp, #20]
   32734:	bl	25718 <flatcc_builder_get_user_frame_ptr@@Base>
   32738:	add	r0, r0, #8
   3273c:	add	fp, r0, r8
   32740:	ldrb	r3, [fp, #12]
   32744:	cmp	r3, #0
   32748:	beq	327a0 <flatcc_json_parser_union_type_vector@@Base+0xac>
   3274c:	ldr	r3, [r6, #20]
   32750:	cmp	r3, #0
   32754:	bne	3277c <flatcc_json_parser_union_type_vector@@Base+0x88>
   32758:	ldr	r3, [r6, #4]
   3275c:	mov	r2, #28
   32760:	mov	r4, r5
   32764:	str	r2, [r6, #20]
   32768:	str	r7, [r6, #32]
   3276c:	sub	r7, r7, r3
   32770:	add	r7, r7, #1
   32774:	str	r7, [r6, #16]
   32778:	b	32780 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   3277c:	mov	r4, r5
   32780:	mov	r0, r4
   32784:	add	sp, sp, #44	; 0x2c
   32788:	ldrd	r4, [sp]
   3278c:	ldrd	r6, [sp, #8]
   32790:	ldrd	r8, [sp, #16]
   32794:	ldrd	sl, [sp, #24]
   32798:	add	sp, sp, #32
   3279c:	pop	{pc}		; (ldr pc, [sp], #4)
   327a0:	mov	r0, #1
   327a4:	mvn	r3, #0
   327a8:	mov	r2, r0
   327ac:	mov	r1, r0
   327b0:	strb	r0, [fp, #12]
   327b4:	ldr	r0, [r6]
   327b8:	bl	270b0 <flatcc_builder_start_vector@@Base>
   327bc:	cmp	r0, #0
   327c0:	bne	32860 <flatcc_json_parser_union_type_vector@@Base+0x16c>
   327c4:	cmp	r7, r5
   327c8:	beq	327d8 <flatcc_json_parser_union_type_vector@@Base+0xe4>
   327cc:	ldrb	r3, [r7]
   327d0:	cmp	r3, #91	; 0x5b
   327d4:	beq	328a8 <flatcc_json_parser_union_type_vector@@Base+0x1b4>
   327d8:	ldr	r3, [r6, #20]
   327dc:	cmp	r3, #0
   327e0:	bne	328a0 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   327e4:	ldr	r3, [r6, #4]
   327e8:	mov	r2, #22
   327ec:	mov	r4, r5
   327f0:	str	r7, [r6, #32]
   327f4:	str	r2, [r6, #20]
   327f8:	sub	r7, r7, r3
   327fc:	add	r7, r7, #1
   32800:	str	r7, [r6, #16]
   32804:	ldr	r0, [r6]
   32808:	bl	286f4 <flatcc_builder_vector_count@@Base>
   3280c:	mov	r7, r0
   32810:	mov	r1, r0
   32814:	ldr	r0, [r6]
   32818:	str	r7, [fp, #16]
   3281c:	bl	255c0 <flatcc_builder_enter_user_frame@@Base>
   32820:	mov	r1, r0
   32824:	mov	r9, r0
   32828:	ldr	r0, [r6]
   3282c:	bl	25718 <flatcc_builder_get_user_frame_ptr@@Base>
   32830:	mov	sl, r0
   32834:	ldr	r0, [r6]
   32838:	bl	28700 <flatcc_builder_vector_edit@@Base>
   3283c:	mov	r1, r0
   32840:	mov	r2, r7
   32844:	mov	r0, sl
   32848:	bl	14524 <memcpy@plt>
   3284c:	ldr	r0, [r6]
   32850:	bl	284e4 <flatcc_builder_end_vector@@Base>
   32854:	subs	sl, r0, #0
   32858:	bne	32bcc <flatcc_json_parser_union_type_vector@@Base+0x4d8>
   3285c:	mov	r7, r4
   32860:	ldr	r3, [r6, #20]
   32864:	cmp	r3, #0
   32868:	bne	3277c <flatcc_json_parser_union_type_vector@@Base+0x88>
   3286c:	mov	r2, #33	; 0x21
   32870:	ldr	r3, [r6, #4]
   32874:	b	32760 <flatcc_json_parser_union_type_vector@@Base+0x6c>
   32878:	ldr	r3, [r6, #20]
   3287c:	cmp	r3, #0
   32880:	bne	328a0 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   32884:	ldr	r3, [r6, #4]
   32888:	mov	r2, #5
   3288c:	str	r7, [r6, #32]
   32890:	str	r2, [r6, #20]
   32894:	sub	r7, r7, r3
   32898:	add	r7, r7, #1
   3289c:	str	r7, [r6, #16]
   328a0:	mov	r4, r5
   328a4:	b	32804 <flatcc_json_parser_union_type_vector@@Base+0x110>
   328a8:	add	r1, r7, #1
   328ac:	sub	r3, r5, r1
   328b0:	cmp	r3, #1
   328b4:	ble	32a60 <flatcc_json_parser_union_type_vector@@Base+0x36c>
   328b8:	ldrb	r2, [r7, #1]
   328bc:	cmp	r2, #32
   328c0:	bhi	331dc <flatcc_json_parser_union_type_vector@@Base+0xae8>
   328c4:	bne	32a60 <flatcc_json_parser_union_type_vector@@Base+0x36c>
   328c8:	ldrb	r2, [r7, #2]
   328cc:	cmp	r2, #32
   328d0:	addhi	r7, r7, #2
   328d4:	bls	32a60 <flatcc_json_parser_union_type_vector@@Base+0x36c>
   328d8:	cmp	r5, r7
   328dc:	beq	328e8 <flatcc_json_parser_union_type_vector@@Base+0x1f4>
   328e0:	cmp	r2, #93	; 0x5d
   328e4:	beq	331f8 <flatcc_json_parser_union_type_vector@@Base+0xb04>
   328e8:	mov	r9, #0
   328ec:	mov	r1, #1
   328f0:	ldr	r0, [r6]
   328f4:	bl	2640c <flatcc_builder_extend_vector@@Base>
   328f8:	subs	sl, r0, #0
   328fc:	beq	32860 <flatcc_json_parser_union_type_vector@@Base+0x16c>
   32900:	mov	r2, #0
   32904:	mov	r3, #0
   32908:	strb	r9, [sp, #27]
   3290c:	cmp	r5, r7
   32910:	str	r9, [sp, #28]
   32914:	strd	r2, [sp, #32]
   32918:	beq	32944 <flatcc_json_parser_union_type_vector@@Base+0x250>
   3291c:	add	r0, sp, #32
   32920:	add	r3, sp, #28
   32924:	mov	r2, r5
   32928:	mov	r1, r7
   3292c:	str	r0, [sp]
   32930:	mov	r0, r6
   32934:	bl	316c0 <flatcc_json_parser_integer@@Base>
   32938:	cmp	r0, r7
   3293c:	mov	r4, r0
   32940:	bne	32db0 <flatcc_json_parser_union_type_vector@@Base+0x6bc>
   32944:	add	r0, sp, #27
   32948:	mov	r2, r5
   3294c:	ldr	r3, [sp, #88]	; 0x58
   32950:	mov	r1, r7
   32954:	str	r0, [sp]
   32958:	mov	r0, r6
   3295c:	bl	2c618 <flatcc_verify_union_vector_field@@Base+0x2b8>
   32960:	cmp	r5, r0
   32964:	cmpne	r0, r7
   32968:	mov	r4, r0
   3296c:	beq	3285c <flatcc_json_parser_union_type_vector@@Base+0x168>
   32970:	ldrb	r0, [sp, #27]
   32974:	ldr	r3, [sp, #96]	; 0x60
   32978:	blx	r3
   3297c:	cmp	r0, #0
   32980:	bne	32da8 <flatcc_json_parser_union_type_vector@@Base+0x6b4>
   32984:	ldr	r3, [r6, #8]
   32988:	tst	r3, #1
   3298c:	beq	331ac <flatcc_json_parser_union_type_vector@@Base+0xab8>
   32990:	mov	r1, r0
   32994:	strb	r0, [sp, #27]
   32998:	sub	r3, r5, r4
   3299c:	strb	r1, [sl]
   329a0:	cmp	r3, #1
   329a4:	ble	329b8 <flatcc_json_parser_union_type_vector@@Base+0x2c4>
   329a8:	ldrb	r3, [r4]
   329ac:	cmp	r3, #32
   329b0:	bhi	32d14 <flatcc_json_parser_union_type_vector@@Base+0x620>
   329b4:	beq	32d04 <flatcc_json_parser_union_type_vector@@Base+0x610>
   329b8:	cmp	r4, r5
   329bc:	beq	32804 <flatcc_json_parser_union_type_vector@@Base+0x110>
   329c0:	ldrb	r3, [r4]
   329c4:	cmp	r3, #32
   329c8:	bne	329e8 <flatcc_json_parser_union_type_vector@@Base+0x2f4>
   329cc:	add	r2, r4, #1
   329d0:	cmp	r5, r2
   329d4:	mov	r4, r2
   329d8:	beq	32804 <flatcc_json_parser_union_type_vector@@Base+0x110>
   329dc:	ldrb	r3, [r2], #1
   329e0:	cmp	r3, #32
   329e4:	beq	329d0 <flatcc_json_parser_union_type_vector@@Base+0x2dc>
   329e8:	cmp	r3, #32
   329ec:	bhi	32b64 <flatcc_json_parser_union_type_vector@@Base+0x470>
   329f0:	sub	r3, r3, #9
   329f4:	cmp	r3, #23
   329f8:	ldrls	pc, [pc, r3, lsl #2]
   329fc:	b	32bb4 <flatcc_json_parser_union_type_vector@@Base+0x4c0>
   32a00:	andeq	r2, r3, ip, lsr #23
   32a04:	andeq	r2, r3, r4, lsr #23
   32a08:			; <UNDEFINED> instruction: 0x00032bb4
   32a0c:			; <UNDEFINED> instruction: 0x00032bb4
   32a10:	andeq	r2, r3, r0, lsr #22
   32a14:			; <UNDEFINED> instruction: 0x00032bb4
   32a18:			; <UNDEFINED> instruction: 0x00032bb4
   32a1c:			; <UNDEFINED> instruction: 0x00032bb4
   32a20:			; <UNDEFINED> instruction: 0x00032bb4
   32a24:			; <UNDEFINED> instruction: 0x00032bb4
   32a28:			; <UNDEFINED> instruction: 0x00032bb4
   32a2c:			; <UNDEFINED> instruction: 0x00032bb4
   32a30:			; <UNDEFINED> instruction: 0x00032bb4
   32a34:			; <UNDEFINED> instruction: 0x00032bb4
   32a38:			; <UNDEFINED> instruction: 0x00032bb4
   32a3c:			; <UNDEFINED> instruction: 0x00032bb4
   32a40:			; <UNDEFINED> instruction: 0x00032bb4
   32a44:			; <UNDEFINED> instruction: 0x00032bb4
   32a48:			; <UNDEFINED> instruction: 0x00032bb4
   32a4c:			; <UNDEFINED> instruction: 0x00032bb4
   32a50:			; <UNDEFINED> instruction: 0x00032bb4
   32a54:			; <UNDEFINED> instruction: 0x00032bb4
   32a58:			; <UNDEFINED> instruction: 0x00032bb4
   32a5c:	andeq	r2, r3, r4, lsl fp
   32a60:	cmp	r5, r1
   32a64:	beq	32a94 <flatcc_json_parser_union_type_vector@@Base+0x3a0>
   32a68:	ldrb	r2, [r1]
   32a6c:	cmp	r2, #32
   32a70:	bne	32a9c <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   32a74:	add	r3, r1, #1
   32a78:	b	32a88 <flatcc_json_parser_union_type_vector@@Base+0x394>
   32a7c:	ldrb	r2, [r3], #1
   32a80:	cmp	r2, #32
   32a84:	bne	32a9c <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   32a88:	cmp	r5, r3
   32a8c:	mov	r1, r3
   32a90:	bne	32a7c <flatcc_json_parser_union_type_vector@@Base+0x388>
   32a94:	mov	r7, r1
   32a98:	b	328e8 <flatcc_json_parser_union_type_vector@@Base+0x1f4>
   32a9c:	cmp	r2, #32
   32aa0:	bhi	32cb8 <flatcc_json_parser_union_type_vector@@Base+0x5c4>
   32aa4:	sub	r2, r2, #9
   32aa8:	cmp	r2, #23
   32aac:	ldrls	pc, [pc, r2, lsl #2]
   32ab0:	b	32cd0 <flatcc_json_parser_union_type_vector@@Base+0x5dc>
   32ab4:	andeq	r2, r3, r8, asr #25
   32ab8:	andeq	r2, r3, r0, asr #25
   32abc:	ldrdeq	r2, [r3], -r0
   32ac0:	ldrdeq	r2, [r3], -r0
   32ac4:	andeq	r2, r3, r4, ror ip
   32ac8:	ldrdeq	r2, [r3], -r0
   32acc:	ldrdeq	r2, [r3], -r0
   32ad0:	ldrdeq	r2, [r3], -r0
   32ad4:	ldrdeq	r2, [r3], -r0
   32ad8:	ldrdeq	r2, [r3], -r0
   32adc:	ldrdeq	r2, [r3], -r0
   32ae0:	ldrdeq	r2, [r3], -r0
   32ae4:	ldrdeq	r2, [r3], -r0
   32ae8:	ldrdeq	r2, [r3], -r0
   32aec:	ldrdeq	r2, [r3], -r0
   32af0:	ldrdeq	r2, [r3], -r0
   32af4:	ldrdeq	r2, [r3], -r0
   32af8:	ldrdeq	r2, [r3], -r0
   32afc:	ldrdeq	r2, [r3], -r0
   32b00:	ldrdeq	r2, [r3], -r0
   32b04:	ldrdeq	r2, [r3], -r0
   32b08:	ldrdeq	r2, [r3], -r0
   32b0c:	ldrdeq	r2, [r3], -r0
   32b10:	andeq	r2, r3, r0, ror #20
   32b14:	cmp	r5, r4
   32b18:	bne	329c0 <flatcc_json_parser_union_type_vector@@Base+0x2cc>
   32b1c:	b	32804 <flatcc_json_parser_union_type_vector@@Base+0x110>
   32b20:	sub	r3, r5, r4
   32b24:	add	r2, r4, #1
   32b28:	cmp	r3, #1
   32b2c:	ble	32b3c <flatcc_json_parser_union_type_vector@@Base+0x448>
   32b30:	ldrb	r3, [r4, #1]
   32b34:	cmp	r3, #10
   32b38:	addeq	r2, r4, #2
   32b3c:	mov	r4, r2
   32b40:	ldr	r3, [r6, #12]
   32b44:	str	r4, [r6, #4]
   32b48:	add	r3, r3, #1
   32b4c:	str	r3, [r6, #12]
   32b50:	cmp	r5, r4
   32b54:	beq	32804 <flatcc_json_parser_union_type_vector@@Base+0x110>
   32b58:	ldrb	r3, [r4]
   32b5c:	cmp	r3, #32
   32b60:	bls	329f0 <flatcc_json_parser_union_type_vector@@Base+0x2fc>
   32b64:	cmp	r3, #44	; 0x2c
   32b68:	beq	32d24 <flatcc_json_parser_union_type_vector@@Base+0x630>
   32b6c:	cmp	r3, #93	; 0x5d
   32b70:	beq	32ffc <flatcc_json_parser_union_type_vector@@Base+0x908>
   32b74:	ldr	r3, [r6, #20]
   32b78:	cmp	r3, #0
   32b7c:	bne	328a0 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   32b80:	ldr	r3, [r6, #4]
   32b84:	mov	r2, #9
   32b88:	sub	r3, r4, r3
   32b8c:	str	r2, [r6, #20]
   32b90:	add	r3, r3, #1
   32b94:	str	r3, [r6, #16]
   32b98:	str	r4, [r6, #32]
   32b9c:	mov	r4, r5
   32ba0:	b	32804 <flatcc_json_parser_union_type_vector@@Base+0x110>
   32ba4:	add	r4, r4, #1
   32ba8:	b	32b40 <flatcc_json_parser_union_type_vector@@Base+0x44c>
   32bac:	add	r4, r4, #1
   32bb0:	b	32b50 <flatcc_json_parser_union_type_vector@@Base+0x45c>
   32bb4:	ldr	r3, [r6, #20]
   32bb8:	cmp	r3, #0
   32bbc:	bne	328a0 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   32bc0:	mov	r2, #5
   32bc4:	ldr	r3, [r6, #4]
   32bc8:	b	32b88 <flatcc_json_parser_union_type_vector@@Base+0x494>
   32bcc:	ldr	r3, [sp, #20]
   32bd0:	ldr	r0, [r6]
   32bd4:	sub	r1, r3, #1
   32bd8:	bl	29f8c <flatcc_builder_table_add_offset@@Base>
   32bdc:	cmp	r0, #0
   32be0:	beq	3285c <flatcc_json_parser_union_type_vector@@Base+0x168>
   32be4:	str	sl, [r0]
   32be8:	ldr	r0, [r6]
   32bec:	ldr	r1, [sp, #84]	; 0x54
   32bf0:	bl	25718 <flatcc_builder_get_user_frame_ptr@@Base>
   32bf4:	add	r3, r0, #8
   32bf8:	ldr	r1, [r3, r8]
   32bfc:	add	r8, r3, r8
   32c00:	ldr	r3, [r0, #4]
   32c04:	str	r9, [r8, #20]
   32c08:	cmp	r1, #0
   32c0c:	addeq	r3, r3, #1
   32c10:	streq	r3, [r0, #4]
   32c14:	beq	32780 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   32c18:	cmp	r3, #0
   32c1c:	beq	33328 <flatcc_json_parser_union_type_vector@@Base+0xc34>
   32c20:	sub	r2, r3, #1
   32c24:	ldmib	r8, {ip, lr}
   32c28:	mov	r3, r9
   32c2c:	str	r2, [r0, #4]
   32c30:	mov	r2, r5
   32c34:	mov	r0, r6
   32c38:	str	r7, [sp]
   32c3c:	ldr	r7, [sp, #20]
   32c40:	str	r7, [sp, #4]
   32c44:	ldr	r7, [sp, #92]	; 0x5c
   32c48:	str	r7, [sp, #8]
   32c4c:	ldr	r8, [r6, #4]
   32c50:	str	ip, [r6, #4]
   32c54:	ldr	r7, [r6, #12]
   32c58:	str	lr, [r6, #12]
   32c5c:	bl	2db38 <flatcc_json_parser_space_ext@@Base+0x154>
   32c60:	cmp	r5, r0
   32c64:	beq	3277c <flatcc_json_parser_union_type_vector@@Base+0x88>
   32c68:	str	r8, [r6, #4]
   32c6c:	str	r7, [r6, #12]
   32c70:	b	32780 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   32c74:	sub	r3, r5, r1
   32c78:	add	r2, r1, #1
   32c7c:	cmp	r3, #1
   32c80:	ble	32c90 <flatcc_json_parser_union_type_vector@@Base+0x59c>
   32c84:	ldrb	r3, [r1, #1]
   32c88:	cmp	r3, #10
   32c8c:	addeq	r2, r1, #2
   32c90:	mov	r1, r2
   32c94:	ldr	r3, [r6, #12]
   32c98:	str	r1, [r6, #4]
   32c9c:	add	r3, r3, #1
   32ca0:	str	r3, [r6, #12]
   32ca4:	cmp	r5, r1
   32ca8:	beq	32a94 <flatcc_json_parser_union_type_vector@@Base+0x3a0>
   32cac:	ldrb	r2, [r1]
   32cb0:	cmp	r2, #32
   32cb4:	bls	32aa4 <flatcc_json_parser_union_type_vector@@Base+0x3b0>
   32cb8:	mov	r7, r1
   32cbc:	b	328e0 <flatcc_json_parser_union_type_vector@@Base+0x1ec>
   32cc0:	add	r1, r1, #1
   32cc4:	b	32c94 <flatcc_json_parser_union_type_vector@@Base+0x5a0>
   32cc8:	add	r1, r1, #1
   32ccc:	b	32ca4 <flatcc_json_parser_union_type_vector@@Base+0x5b0>
   32cd0:	ldr	r3, [r6, #20]
   32cd4:	cmp	r3, #0
   32cd8:	movne	r7, r5
   32cdc:	bne	328e8 <flatcc_json_parser_union_type_vector@@Base+0x1f4>
   32ce0:	ldr	r3, [r6, #4]
   32ce4:	mov	r2, #5
   32ce8:	mov	r7, r5
   32cec:	str	r2, [r6, #20]
   32cf0:	str	r1, [r6, #32]
   32cf4:	sub	r3, r1, r3
   32cf8:	add	r3, r3, #1
   32cfc:	str	r3, [r6, #16]
   32d00:	b	328e8 <flatcc_json_parser_union_type_vector@@Base+0x1f4>
   32d04:	ldrb	r3, [r4, #1]
   32d08:	cmp	r3, #32
   32d0c:	addhi	r4, r4, #1
   32d10:	bls	329b8 <flatcc_json_parser_union_type_vector@@Base+0x2c4>
   32d14:	cmp	r5, r4
   32d18:	beq	32804 <flatcc_json_parser_union_type_vector@@Base+0x110>
   32d1c:	cmp	r3, #44	; 0x2c
   32d20:	bne	32b6c <flatcc_json_parser_union_type_vector@@Base+0x478>
   32d24:	add	r7, r4, #1
   32d28:	sub	r3, r5, r7
   32d2c:	cmp	r3, #1
   32d30:	ble	32d44 <flatcc_json_parser_union_type_vector@@Base+0x650>
   32d34:	ldrb	r3, [r4, #1]
   32d38:	cmp	r3, #32
   32d3c:	bhi	33168 <flatcc_json_parser_union_type_vector@@Base+0xa74>
   32d40:	beq	33158 <flatcc_json_parser_union_type_vector@@Base+0xa64>
   32d44:	cmp	r5, r7
   32d48:	beq	32d78 <flatcc_json_parser_union_type_vector@@Base+0x684>
   32d4c:	ldrb	r3, [r7]
   32d50:	cmp	r3, #32
   32d54:	bne	32e08 <flatcc_json_parser_union_type_vector@@Base+0x714>
   32d58:	add	r2, r7, #1
   32d5c:	b	32d6c <flatcc_json_parser_union_type_vector@@Base+0x678>
   32d60:	ldrb	r3, [r2], #1
   32d64:	cmp	r3, #32
   32d68:	bne	32e08 <flatcc_json_parser_union_type_vector@@Base+0x714>
   32d6c:	cmp	r5, r2
   32d70:	mov	r7, r2
   32d74:	bne	32d60 <flatcc_json_parser_union_type_vector@@Base+0x66c>
   32d78:	ldr	r3, [r6, #20]
   32d7c:	cmp	r3, #0
   32d80:	bne	328a0 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   32d84:	ldr	r3, [r6, #4]
   32d88:	mov	r2, #9
   32d8c:	mov	r4, r5
   32d90:	str	r2, [r6, #20]
   32d94:	str	r7, [r6, #32]
   32d98:	sub	r3, r7, r3
   32d9c:	add	r3, r3, #1
   32da0:	str	r3, [r6, #16]
   32da4:	b	32804 <flatcc_json_parser_union_type_vector@@Base+0x110>
   32da8:	ldrb	r1, [sp, #27]
   32dac:	b	32998 <flatcc_json_parser_union_type_vector@@Base+0x2a4>
   32db0:	ldr	r3, [sp, #28]
   32db4:	cmp	r3, #0
   32db8:	bne	33174 <flatcc_json_parser_union_type_vector@@Base+0xa80>
   32dbc:	ldrd	r0, [sp, #32]
   32dc0:	cmp	r1, #0
   32dc4:	cmpeq	r0, #255	; 0xff
   32dc8:	uxtbls	r0, r0
   32dcc:	strbls	r0, [sp, #27]
   32dd0:	bls	32974 <flatcc_json_parser_union_type_vector@@Base+0x280>
   32dd4:	ldr	r3, [r6, #20]
   32dd8:	ldrb	r0, [sp, #27]
   32ddc:	cmp	r3, #0
   32de0:	bne	33190 <flatcc_json_parser_union_type_vector@@Base+0xa9c>
   32de4:	ldr	r3, [r6, #4]
   32de8:	mov	r1, #7
   32dec:	sub	r3, r4, r3
   32df0:	str	r1, [r6, #20]
   32df4:	add	r3, r3, #1
   32df8:	str	r3, [r6, #16]
   32dfc:	str	r4, [r6, #32]
   32e00:	mov	r4, r5
   32e04:	b	32974 <flatcc_json_parser_union_type_vector@@Base+0x280>
   32e08:	cmp	r3, #32
   32e0c:	bhi	32ec4 <flatcc_json_parser_union_type_vector@@Base+0x7d0>
   32e10:	sub	r3, r3, #9
   32e14:	cmp	r3, #23
   32e18:	ldrls	pc, [pc, r3, lsl #2]
   32e1c:	b	32878 <flatcc_json_parser_union_type_vector@@Base+0x184>
   32e20:	muleq	r3, r4, pc	; <UNPREDICTABLE>
   32e24:	muleq	r3, ip, pc	; <UNPREDICTABLE>
   32e28:	andeq	r2, r3, r8, ror r8
   32e2c:	andeq	r2, r3, r8, ror r8
   32e30:	andeq	r2, r3, r0, lsl #29
   32e34:	andeq	r2, r3, r8, ror r8
   32e38:	andeq	r2, r3, r8, ror r8
   32e3c:	andeq	r2, r3, r8, ror r8
   32e40:	andeq	r2, r3, r8, ror r8
   32e44:	andeq	r2, r3, r8, ror r8
   32e48:	andeq	r2, r3, r8, ror r8
   32e4c:	andeq	r2, r3, r8, ror r8
   32e50:	andeq	r2, r3, r8, ror r8
   32e54:	andeq	r2, r3, r8, ror r8
   32e58:	andeq	r2, r3, r8, ror r8
   32e5c:	andeq	r2, r3, r8, ror r8
   32e60:	andeq	r2, r3, r8, ror r8
   32e64:	andeq	r2, r3, r8, ror r8
   32e68:	andeq	r2, r3, r8, ror r8
   32e6c:	andeq	r2, r3, r8, ror r8
   32e70:	andeq	r2, r3, r8, ror r8
   32e74:	andeq	r2, r3, r8, ror r8
   32e78:	andeq	r2, r3, r8, ror r8
   32e7c:	andeq	r2, r3, r4, asr #26
   32e80:	sub	r3, r5, r7
   32e84:	add	r2, r7, #1
   32e88:	cmp	r3, #1
   32e8c:	ble	32e9c <flatcc_json_parser_union_type_vector@@Base+0x7a8>
   32e90:	ldrb	r3, [r7, #1]
   32e94:	cmp	r3, #10
   32e98:	addeq	r2, r7, #2
   32e9c:	mov	r7, r2
   32ea0:	ldr	r3, [r6, #12]
   32ea4:	str	r7, [r6, #4]
   32ea8:	add	r3, r3, #1
   32eac:	str	r3, [r6, #12]
   32eb0:	cmp	r5, r7
   32eb4:	beq	32d78 <flatcc_json_parser_union_type_vector@@Base+0x684>
   32eb8:	ldrb	r3, [r7]
   32ebc:	cmp	r3, #32
   32ec0:	bls	32e10 <flatcc_json_parser_union_type_vector@@Base+0x71c>
   32ec4:	cmp	r3, #93	; 0x5d
   32ec8:	bne	328ec <flatcc_json_parser_union_type_vector@@Base+0x1f8>
   32ecc:	add	r4, r7, #1
   32ed0:	sub	r3, r5, r4
   32ed4:	cmp	r3, #1
   32ed8:	ble	32eec <flatcc_json_parser_union_type_vector@@Base+0x7f8>
   32edc:	ldrb	r3, [r7, #1]
   32ee0:	cmp	r3, #32
   32ee4:	bhi	32804 <flatcc_json_parser_union_type_vector@@Base+0x110>
   32ee8:	beq	331e4 <flatcc_json_parser_union_type_vector@@Base+0xaf0>
   32eec:	cmp	r5, r4
   32ef0:	beq	32804 <flatcc_json_parser_union_type_vector@@Base+0x110>
   32ef4:	ldrb	r2, [r4]
   32ef8:	cmp	r2, #32
   32efc:	bne	32f1c <flatcc_json_parser_union_type_vector@@Base+0x828>
   32f00:	add	r3, r4, #1
   32f04:	cmp	r5, r3
   32f08:	mov	r4, r3
   32f0c:	beq	32804 <flatcc_json_parser_union_type_vector@@Base+0x110>
   32f10:	ldrb	r2, [r3], #1
   32f14:	cmp	r2, #32
   32f18:	beq	32f04 <flatcc_json_parser_union_type_vector@@Base+0x810>
   32f1c:	cmp	r2, #32
   32f20:	bhi	32804 <flatcc_json_parser_union_type_vector@@Base+0x110>
   32f24:	sub	r2, r2, #9
   32f28:	cmp	r2, #23
   32f2c:	ldrls	pc, [pc, r2, lsl #2]
   32f30:	b	32bb4 <flatcc_json_parser_union_type_vector@@Base+0x4c0>
   32f34:	strdeq	r2, [r3], -r4
   32f38:	andeq	r2, r3, ip, ror #31
   32f3c:			; <UNDEFINED> instruction: 0x00032bb4
   32f40:			; <UNDEFINED> instruction: 0x00032bb4
   32f44:	andeq	r2, r3, r4, lsr #31
   32f48:			; <UNDEFINED> instruction: 0x00032bb4
   32f4c:			; <UNDEFINED> instruction: 0x00032bb4
   32f50:			; <UNDEFINED> instruction: 0x00032bb4
   32f54:			; <UNDEFINED> instruction: 0x00032bb4
   32f58:			; <UNDEFINED> instruction: 0x00032bb4
   32f5c:			; <UNDEFINED> instruction: 0x00032bb4
   32f60:			; <UNDEFINED> instruction: 0x00032bb4
   32f64:			; <UNDEFINED> instruction: 0x00032bb4
   32f68:			; <UNDEFINED> instruction: 0x00032bb4
   32f6c:			; <UNDEFINED> instruction: 0x00032bb4
   32f70:			; <UNDEFINED> instruction: 0x00032bb4
   32f74:			; <UNDEFINED> instruction: 0x00032bb4
   32f78:			; <UNDEFINED> instruction: 0x00032bb4
   32f7c:			; <UNDEFINED> instruction: 0x00032bb4
   32f80:			; <UNDEFINED> instruction: 0x00032bb4
   32f84:			; <UNDEFINED> instruction: 0x00032bb4
   32f88:			; <UNDEFINED> instruction: 0x00032bb4
   32f8c:			; <UNDEFINED> instruction: 0x00032bb4
   32f90:	andeq	r2, r3, ip, ror #29
   32f94:	add	r7, r7, #1
   32f98:	b	32eb0 <flatcc_json_parser_union_type_vector@@Base+0x7bc>
   32f9c:	add	r7, r7, #1
   32fa0:	b	32ea0 <flatcc_json_parser_union_type_vector@@Base+0x7ac>
   32fa4:	sub	r3, r5, r4
   32fa8:	add	r2, r4, #1
   32fac:	cmp	r3, #1
   32fb0:	ble	32fc0 <flatcc_json_parser_union_type_vector@@Base+0x8cc>
   32fb4:	ldrb	r3, [r4, #1]
   32fb8:	cmp	r3, #10
   32fbc:	addeq	r2, r4, #2
   32fc0:	mov	r4, r2
   32fc4:	ldr	r3, [r6, #12]
   32fc8:	str	r4, [r6, #4]
   32fcc:	add	r3, r3, #1
   32fd0:	str	r3, [r6, #12]
   32fd4:	cmp	r5, r4
   32fd8:	beq	32804 <flatcc_json_parser_union_type_vector@@Base+0x110>
   32fdc:	ldrb	r2, [r4]
   32fe0:	cmp	r2, #32
   32fe4:	bls	32f24 <flatcc_json_parser_union_type_vector@@Base+0x830>
   32fe8:	b	32804 <flatcc_json_parser_union_type_vector@@Base+0x110>
   32fec:	add	r4, r4, #1
   32ff0:	b	32fc4 <flatcc_json_parser_union_type_vector@@Base+0x8d0>
   32ff4:	add	r4, r4, #1
   32ff8:	b	32fd4 <flatcc_json_parser_union_type_vector@@Base+0x8e0>
   32ffc:	add	r1, r4, #1
   33000:	sub	r3, r5, r1
   33004:	cmp	r3, #1
   33008:	ble	3301c <flatcc_json_parser_union_type_vector@@Base+0x928>
   3300c:	ldrb	r3, [r4, #1]
   33010:	cmp	r3, #32
   33014:	bhi	33050 <flatcc_json_parser_union_type_vector@@Base+0x95c>
   33018:	beq	33198 <flatcc_json_parser_union_type_vector@@Base+0xaa4>
   3301c:	cmp	r5, r1
   33020:	beq	33050 <flatcc_json_parser_union_type_vector@@Base+0x95c>
   33024:	ldrb	r2, [r1]
   33028:	cmp	r2, #32
   3302c:	bne	33058 <flatcc_json_parser_union_type_vector@@Base+0x964>
   33030:	add	r3, r1, #1
   33034:	b	33044 <flatcc_json_parser_union_type_vector@@Base+0x950>
   33038:	ldrb	r2, [r3], #1
   3303c:	cmp	r2, #32
   33040:	bne	33058 <flatcc_json_parser_union_type_vector@@Base+0x964>
   33044:	cmp	r3, r5
   33048:	mov	r1, r3
   3304c:	bne	33038 <flatcc_json_parser_union_type_vector@@Base+0x944>
   33050:	mov	r4, r1
   33054:	b	32804 <flatcc_json_parser_union_type_vector@@Base+0x110>
   33058:	cmp	r2, #32
   3305c:	bhi	33050 <flatcc_json_parser_union_type_vector@@Base+0x95c>
   33060:	sub	r2, r2, #9
   33064:	cmp	r2, #23
   33068:	ldrls	pc, [pc, r2, lsl #2]
   3306c:	b	33128 <flatcc_json_parser_union_type_vector@@Base+0xa34>
   33070:	andeq	r3, r3, r0, lsr #2
   33074:	andeq	r3, r3, r8, lsl r1
   33078:	andeq	r3, r3, r8, lsr #2
   3307c:	andeq	r3, r3, r8, lsr #2
   33080:	ldrdeq	r3, [r3], -r0
   33084:	andeq	r3, r3, r8, lsr #2
   33088:	andeq	r3, r3, r8, lsr #2
   3308c:	andeq	r3, r3, r8, lsr #2
   33090:	andeq	r3, r3, r8, lsr #2
   33094:	andeq	r3, r3, r8, lsr #2
   33098:	andeq	r3, r3, r8, lsr #2
   3309c:	andeq	r3, r3, r8, lsr #2
   330a0:	andeq	r3, r3, r8, lsr #2
   330a4:	andeq	r3, r3, r8, lsr #2
   330a8:	andeq	r3, r3, r8, lsr #2
   330ac:	andeq	r3, r3, r8, lsr #2
   330b0:	andeq	r3, r3, r8, lsr #2
   330b4:	andeq	r3, r3, r8, lsr #2
   330b8:	andeq	r3, r3, r8, lsr #2
   330bc:	andeq	r3, r3, r8, lsr #2
   330c0:	andeq	r3, r3, r8, lsr #2
   330c4:	andeq	r3, r3, r8, lsr #2
   330c8:	andeq	r3, r3, r8, lsr #2
   330cc:	andeq	r3, r3, ip, lsl r0
   330d0:	sub	r3, r5, r1
   330d4:	add	r2, r1, #1
   330d8:	cmp	r3, #1
   330dc:	ble	330ec <flatcc_json_parser_union_type_vector@@Base+0x9f8>
   330e0:	ldrb	r3, [r1, #1]
   330e4:	cmp	r3, #10
   330e8:	addeq	r2, r1, #2
   330ec:	mov	r1, r2
   330f0:	ldr	r3, [r6, #12]
   330f4:	str	r1, [r6, #4]
   330f8:	add	r3, r3, #1
   330fc:	str	r3, [r6, #12]
   33100:	cmp	r5, r1
   33104:	beq	328a0 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   33108:	ldrb	r2, [r1]
   3310c:	cmp	r2, #32
   33110:	bls	33060 <flatcc_json_parser_union_type_vector@@Base+0x96c>
   33114:	b	33050 <flatcc_json_parser_union_type_vector@@Base+0x95c>
   33118:	add	r1, r1, #1
   3311c:	b	330f0 <flatcc_json_parser_union_type_vector@@Base+0x9fc>
   33120:	add	r1, r1, #1
   33124:	b	33100 <flatcc_json_parser_union_type_vector@@Base+0xa0c>
   33128:	ldr	r3, [r6, #20]
   3312c:	cmp	r3, #0
   33130:	bne	328a0 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   33134:	ldr	r3, [r6, #4]
   33138:	mov	r2, #5
   3313c:	mov	r4, r5
   33140:	str	r1, [r6, #32]
   33144:	str	r2, [r6, #20]
   33148:	sub	r1, r1, r3
   3314c:	add	r1, r1, #1
   33150:	str	r1, [r6, #16]
   33154:	b	32804 <flatcc_json_parser_union_type_vector@@Base+0x110>
   33158:	ldrb	r3, [r4, #2]
   3315c:	cmp	r3, #32
   33160:	addhi	r7, r4, #2
   33164:	bls	32d44 <flatcc_json_parser_union_type_vector@@Base+0x650>
   33168:	cmp	r5, r7
   3316c:	bne	32ec4 <flatcc_json_parser_union_type_vector@@Base+0x7d0>
   33170:	b	32d78 <flatcc_json_parser_union_type_vector@@Base+0x684>
   33174:	ldr	r3, [r6, #20]
   33178:	ldrb	r0, [sp, #27]
   3317c:	cmp	r3, #0
   33180:	bne	33190 <flatcc_json_parser_union_type_vector@@Base+0xa9c>
   33184:	mov	r1, #8
   33188:	ldr	r3, [r6, #4]
   3318c:	b	32dec <flatcc_json_parser_union_type_vector@@Base+0x6f8>
   33190:	mov	r4, r5
   33194:	b	32974 <flatcc_json_parser_union_type_vector@@Base+0x280>
   33198:	ldrb	r3, [r4, #2]
   3319c:	cmp	r3, #32
   331a0:	addhi	r4, r4, #2
   331a4:	bls	3301c <flatcc_json_parser_union_type_vector@@Base+0x928>
   331a8:	b	32804 <flatcc_json_parser_union_type_vector@@Base+0x110>
   331ac:	ldr	r3, [r6, #20]
   331b0:	cmp	r3, #0
   331b4:	bne	3277c <flatcc_json_parser_union_type_vector@@Base+0x88>
   331b8:	ldr	r3, [r6, #4]
   331bc:	mov	r2, #15
   331c0:	str	r2, [r6, #20]
   331c4:	str	r4, [r6, #32]
   331c8:	sub	r3, r4, r3
   331cc:	mov	r4, r5
   331d0:	add	r3, r3, #1
   331d4:	str	r3, [r6, #16]
   331d8:	b	32780 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   331dc:	mov	r7, r1
   331e0:	b	328d8 <flatcc_json_parser_union_type_vector@@Base+0x1e4>
   331e4:	ldrb	r3, [r7, #2]
   331e8:	cmp	r3, #32
   331ec:	bls	32eec <flatcc_json_parser_union_type_vector@@Base+0x7f8>
   331f0:	add	r4, r7, #2
   331f4:	b	32804 <flatcc_json_parser_union_type_vector@@Base+0x110>
   331f8:	add	r4, r7, #1
   331fc:	sub	r3, r5, r4
   33200:	cmp	r3, #1
   33204:	ble	33218 <flatcc_json_parser_union_type_vector@@Base+0xb24>
   33208:	ldrb	r3, [r7, #1]
   3320c:	cmp	r3, #32
   33210:	bhi	32804 <flatcc_json_parser_union_type_vector@@Base+0x110>
   33214:	beq	33318 <flatcc_json_parser_union_type_vector@@Base+0xc24>
   33218:	cmp	r5, r4
   3321c:	beq	32804 <flatcc_json_parser_union_type_vector@@Base+0x110>
   33220:	ldrb	r2, [r4]
   33224:	cmp	r2, #32
   33228:	bne	33248 <flatcc_json_parser_union_type_vector@@Base+0xb54>
   3322c:	add	r3, r4, #1
   33230:	cmp	r3, r5
   33234:	mov	r4, r3
   33238:	beq	32804 <flatcc_json_parser_union_type_vector@@Base+0x110>
   3323c:	ldrb	r2, [r3], #1
   33240:	cmp	r2, #32
   33244:	beq	33230 <flatcc_json_parser_union_type_vector@@Base+0xb3c>
   33248:	cmp	r2, #32
   3324c:	bhi	32804 <flatcc_json_parser_union_type_vector@@Base+0x110>
   33250:	sub	r2, r2, #9
   33254:	cmp	r2, #23
   33258:	ldrls	pc, [pc, r2, lsl #2]
   3325c:	b	32bb4 <flatcc_json_parser_union_type_vector@@Base+0x4c0>
   33260:	andeq	r3, r3, r0, lsl r3
   33264:	andeq	r3, r3, r8, lsl #6
   33268:			; <UNDEFINED> instruction: 0x00032bb4
   3326c:			; <UNDEFINED> instruction: 0x00032bb4
   33270:	andeq	r3, r3, r0, asr #5
   33274:			; <UNDEFINED> instruction: 0x00032bb4
   33278:			; <UNDEFINED> instruction: 0x00032bb4
   3327c:			; <UNDEFINED> instruction: 0x00032bb4
   33280:			; <UNDEFINED> instruction: 0x00032bb4
   33284:			; <UNDEFINED> instruction: 0x00032bb4
   33288:			; <UNDEFINED> instruction: 0x00032bb4
   3328c:			; <UNDEFINED> instruction: 0x00032bb4
   33290:			; <UNDEFINED> instruction: 0x00032bb4
   33294:			; <UNDEFINED> instruction: 0x00032bb4
   33298:			; <UNDEFINED> instruction: 0x00032bb4
   3329c:			; <UNDEFINED> instruction: 0x00032bb4
   332a0:			; <UNDEFINED> instruction: 0x00032bb4
   332a4:			; <UNDEFINED> instruction: 0x00032bb4
   332a8:			; <UNDEFINED> instruction: 0x00032bb4
   332ac:			; <UNDEFINED> instruction: 0x00032bb4
   332b0:			; <UNDEFINED> instruction: 0x00032bb4
   332b4:			; <UNDEFINED> instruction: 0x00032bb4
   332b8:			; <UNDEFINED> instruction: 0x00032bb4
   332bc:	andeq	r3, r3, r8, lsl r2
   332c0:	sub	r3, r5, r4
   332c4:	add	r2, r4, #1
   332c8:	cmp	r3, #1
   332cc:	ble	332dc <flatcc_json_parser_union_type_vector@@Base+0xbe8>
   332d0:	ldrb	r3, [r4, #1]
   332d4:	cmp	r3, #10
   332d8:	addeq	r2, r4, #2
   332dc:	mov	r4, r2
   332e0:	ldr	r3, [r6, #12]
   332e4:	str	r4, [r6, #4]
   332e8:	add	r3, r3, #1
   332ec:	str	r3, [r6, #12]
   332f0:	cmp	r5, r4
   332f4:	beq	32804 <flatcc_json_parser_union_type_vector@@Base+0x110>
   332f8:	ldrb	r2, [r4]
   332fc:	cmp	r2, #32
   33300:	bls	33250 <flatcc_json_parser_union_type_vector@@Base+0xb5c>
   33304:	b	32804 <flatcc_json_parser_union_type_vector@@Base+0x110>
   33308:	add	r4, r4, #1
   3330c:	b	332e0 <flatcc_json_parser_union_type_vector@@Base+0xbec>
   33310:	add	r4, r4, #1
   33314:	b	332f0 <flatcc_json_parser_union_type_vector@@Base+0xbfc>
   33318:	ldrb	r3, [r7, #2]
   3331c:	cmp	r3, #32
   33320:	bls	33218 <flatcc_json_parser_union_type_vector@@Base+0xb24>
   33324:	b	331f0 <flatcc_json_parser_union_type_vector@@Base+0xafc>
   33328:	movw	r1, #28256	; 0x6e60
   3332c:	movt	r1, #4
   33330:	ldr	r3, [pc, #12]	; 33344 <flatcc_json_parser_union_type_vector@@Base+0xc50>
   33334:	movw	r0, #28332	; 0x6eac
   33338:	movt	r0, #4
   3333c:	movw	r2, #1122	; 0x462
   33340:	bl	145f0 <__assert_fail@plt>
   33344:	andeq	r6, r4, r8, ror #25

00033348 <flatcc_json_parser_table_as_root@@Base>:
   33348:	strd	r4, [sp, #-20]!	; 0xffffffec
   3334c:	subs	r4, r1, #0
   33350:	mov	r5, r2
   33354:	strd	r6, [sp, #8]
   33358:	mov	r7, r0
   3335c:	add	r6, r5, r3
   33360:	str	lr, [sp, #16]
   33364:	sub	sp, sp, #52	; 0x34
   33368:	mov	r0, #0
   3336c:	ldr	ip, [sp, #72]	; 0x48
   33370:	addeq	r4, sp, #8
   33374:	mov	lr, #1
   33378:	str	r7, [r4]
   3337c:	ldr	r1, [sp, #76]	; 0x4c
   33380:	asr	r2, ip, #1
   33384:	stmib	r4, {r5, ip, lr}
   33388:	and	r2, r2, #2
   3338c:	mov	r3, r2
   33390:	mov	r2, r0
   33394:	str	r0, [r4, #16]
   33398:	str	r0, [r4, #20]
   3339c:	str	r5, [r4, #24]
   333a0:	str	r6, [r4, #28]
   333a4:	str	r5, [r4, #32]
   333a8:	str	r0, [r4, #36]	; 0x24
   333ac:	mov	r0, r7
   333b0:	bl	25d5c <flatcc_builder_start_buffer@@Base>
   333b4:	cmp	r0, #0
   333b8:	bne	33414 <flatcc_json_parser_table_as_root@@Base+0xcc>
   333bc:	mov	r2, r6
   333c0:	add	r3, sp, #4
   333c4:	ldr	ip, [sp, #80]	; 0x50
   333c8:	mov	r1, r5
   333cc:	mov	r0, r4
   333d0:	blx	ip
   333d4:	ldr	r6, [r4, #20]
   333d8:	cmp	r6, #0
   333dc:	beq	333f8 <flatcc_json_parser_table_as_root@@Base+0xb0>
   333e0:	mov	r0, r6
   333e4:	add	sp, sp, #52	; 0x34
   333e8:	ldrd	r4, [sp]
   333ec:	ldrd	r6, [sp, #8]
   333f0:	add	sp, sp, #16
   333f4:	pop	{pc}		; (ldr pc, [sp], #4)
   333f8:	mov	r0, r7
   333fc:	ldr	r1, [sp, #4]
   33400:	bl	25f08 <flatcc_builder_end_buffer@@Base>
   33404:	cmp	r0, #0
   33408:	beq	33414 <flatcc_json_parser_table_as_root@@Base+0xcc>
   3340c:	str	r5, [r4, #36]	; 0x24
   33410:	b	333e0 <flatcc_json_parser_table_as_root@@Base+0x98>
   33414:	mvn	r6, #0
   33418:	b	333e0 <flatcc_json_parser_table_as_root@@Base+0x98>

0003341c <flatcc_json_parser_struct_as_root@@Base>:
   3341c:	strd	r4, [sp, #-20]!	; 0xffffffec
   33420:	subs	r4, r1, #0
   33424:	mov	r5, r2
   33428:	strd	r6, [sp, #8]
   3342c:	mov	r7, r0
   33430:	add	r6, r5, r3
   33434:	str	lr, [sp, #16]
   33438:	sub	sp, sp, #52	; 0x34
   3343c:	mov	r0, #0
   33440:	ldr	ip, [sp, #72]	; 0x48
   33444:	addeq	r4, sp, #8
   33448:	mov	lr, #1
   3344c:	str	r7, [r4]
   33450:	ldr	r1, [sp, #76]	; 0x4c
   33454:	asr	r2, ip, #1
   33458:	stmib	r4, {r5, ip, lr}
   3345c:	and	r2, r2, #2
   33460:	mov	r3, r2
   33464:	mov	r2, r0
   33468:	str	r0, [r4, #16]
   3346c:	str	r0, [r4, #20]
   33470:	str	r5, [r4, #24]
   33474:	str	r6, [r4, #28]
   33478:	str	r5, [r4, #32]
   3347c:	str	r0, [r4, #36]	; 0x24
   33480:	mov	r0, r7
   33484:	bl	25d5c <flatcc_builder_start_buffer@@Base>
   33488:	cmp	r0, #0
   3348c:	bne	334e8 <flatcc_json_parser_struct_as_root@@Base+0xcc>
   33490:	mov	r2, r6
   33494:	add	r3, sp, #4
   33498:	ldr	ip, [sp, #80]	; 0x50
   3349c:	mov	r1, r5
   334a0:	mov	r0, r4
   334a4:	blx	ip
   334a8:	ldr	r6, [r4, #20]
   334ac:	cmp	r6, #0
   334b0:	beq	334cc <flatcc_json_parser_struct_as_root@@Base+0xb0>
   334b4:	mov	r0, r6
   334b8:	add	sp, sp, #52	; 0x34
   334bc:	ldrd	r4, [sp]
   334c0:	ldrd	r6, [sp, #8]
   334c4:	add	sp, sp, #16
   334c8:	pop	{pc}		; (ldr pc, [sp], #4)
   334cc:	mov	r0, r7
   334d0:	ldr	r1, [sp, #4]
   334d4:	bl	25f08 <flatcc_builder_end_buffer@@Base>
   334d8:	cmp	r0, #0
   334dc:	beq	334e8 <flatcc_json_parser_struct_as_root@@Base+0xcc>
   334e0:	str	r5, [r4, #36]	; 0x24
   334e4:	b	334b4 <flatcc_json_parser_struct_as_root@@Base+0x98>
   334e8:	mvn	r6, #0
   334ec:	b	334b4 <flatcc_json_parser_struct_as_root@@Base+0x98>
   334f0:	cmp	r0, #1000	; 0x3e8
   334f4:	strd	r4, [sp, #-16]!
   334f8:	str	r6, [sp, #8]
   334fc:	str	lr, [sp, #12]
   33500:	bcc	335e8 <flatcc_json_parser_struct_as_root@@Base+0x1cc>
   33504:	movw	r3, #34079	; 0x851f
   33508:	movt	r3, #20971	; 0x51eb
   3350c:	mov	r2, #100	; 0x64
   33510:	movw	lr, #9999	; 0x270f
   33514:	umull	ip, r3, r3, r0
   33518:	cmp	r0, lr
   3351c:	movw	ip, #28992	; 0x7140
   33520:	movt	ip, #4
   33524:	lsr	r3, r3, #5
   33528:	uxth	r6, r3
   3352c:	mls	r3, r2, r3, r0
   33530:	uxth	r3, r3
   33534:	add	r0, ip, r3, lsl #1
   33538:	bls	335a0 <flatcc_json_parser_struct_as_root@@Base+0x184>
   3353c:	mov	r2, #0
   33540:	add	r4, r1, #3
   33544:	mov	lr, #5
   33548:	strb	r2, [r1, #5]
   3354c:	ldrb	r3, [ip, r3, lsl #1]
   33550:	strb	r3, [r1, #3]
   33554:	ldrb	r3, [r0, #1]
   33558:	strb	r3, [r1, #4]
   3355c:	movw	r1, #34079	; 0x851f
   33560:	movt	r1, #20971	; 0x51eb
   33564:	mov	r2, #100	; 0x64
   33568:	sub	r5, r4, #2
   3356c:	umull	r3, r1, r1, r6
   33570:	lsr	r1, r1, #5
   33574:	uxth	r0, r1
   33578:	mls	r2, r2, r1, r6
   3357c:	uxth	r2, r2
   33580:	ldrb	r3, [ip, r2, lsl #1]
   33584:	add	r2, ip, r2, lsl #1
   33588:	strb	r3, [r4, #-2]
   3358c:	ldrb	r3, [r2, #1]
   33590:	strb	r3, [r4, #-1]
   33594:	add	r3, r0, #48	; 0x30
   33598:	strb	r3, [r5, #-1]
   3359c:	b	335d4 <flatcc_json_parser_struct_as_root@@Base+0x1b8>
   335a0:	mov	lr, #0
   335a4:	add	r2, r1, #2
   335a8:	strb	lr, [r1, #4]
   335ac:	mov	lr, #4
   335b0:	ldrb	r3, [ip, r3, lsl #1]
   335b4:	strb	r3, [r1, #2]
   335b8:	ldrb	r3, [r0, #1]
   335bc:	strb	r3, [r1, #3]
   335c0:	ldrb	r1, [ip, r6, lsl #1]
   335c4:	add	r3, ip, r6, lsl #1
   335c8:	strb	r1, [r2, #-2]
   335cc:	ldrb	r3, [r3, #1]
   335d0:	strb	r3, [r2, #-1]
   335d4:	ldrd	r4, [sp]
   335d8:	mov	r0, lr
   335dc:	ldr	r6, [sp, #8]
   335e0:	add	sp, sp, #12
   335e4:	pop	{pc}		; (ldr pc, [sp], #4)
   335e8:	cmp	r0, #99	; 0x63
   335ec:	bhi	3360c <flatcc_json_parser_struct_as_root@@Base+0x1f0>
   335f0:	cmp	r0, #9
   335f4:	mov	r3, #0
   335f8:	bhi	3362c <flatcc_json_parser_struct_as_root@@Base+0x210>
   335fc:	add	r5, r1, #1
   33600:	mov	lr, #1
   33604:	strb	r3, [r1, #1]
   33608:	b	33594 <flatcc_json_parser_struct_as_root@@Base+0x178>
   3360c:	mov	r3, #0
   33610:	movw	ip, #28992	; 0x7140
   33614:	movt	ip, #4
   33618:	mov	r6, r0
   3361c:	add	r4, r1, #3
   33620:	mov	lr, #3
   33624:	strb	r3, [r1, #3]
   33628:	b	3355c <flatcc_json_parser_struct_as_root@@Base+0x140>
   3362c:	movw	ip, #28992	; 0x7140
   33630:	movt	ip, #4
   33634:	strb	r3, [r1, #2]
   33638:	mov	r6, r0
   3363c:	add	r2, r1, #2
   33640:	mov	lr, #2
   33644:	b	335c0 <flatcc_json_parser_struct_as_root@@Base+0x1a4>
   33648:	movw	r2, #9999	; 0x270f
   3364c:	mov	r3, r0
   33650:	strd	r4, [sp, #-32]!	; 0xffffffe0
   33654:	cmp	r0, r2
   33658:	strd	r6, [sp, #8]
   3365c:	strd	r8, [sp, #16]
   33660:	str	sl, [sp, #24]
   33664:	str	lr, [sp, #28]
   33668:	bls	337a0 <flatcc_json_parser_struct_as_root@@Base+0x384>
   3366c:	movw	r2, #34079	; 0x851f
   33670:	movt	r2, #20971	; 0x51eb
   33674:	mov	r6, #100	; 0x64
   33678:	movw	r4, #5977	; 0x1759
   3367c:	movt	r4, #53687	; 0xd1b7
   33680:	umull	ip, r0, r2, r0
   33684:	movw	ip, #38527	; 0x967f
   33688:	movt	ip, #152	; 0x98
   3368c:	movw	lr, #28992	; 0x7140
   33690:	movt	lr, #4
   33694:	cmp	r3, ip
   33698:	umull	r5, r4, r4, r3
   3369c:	lsr	ip, r0, #5
   336a0:	lsr	r4, r4, #13
   336a4:	umull	r5, r0, r2, ip
   336a8:	mls	r8, r6, ip, r3
   336ac:	lsr	r0, r0, #5
   336b0:	add	r7, lr, r8, lsl #1
   336b4:	mls	r0, r6, r0, ip
   336b8:	add	r5, lr, r0, lsl #1
   336bc:	bls	33808 <flatcc_json_parser_struct_as_root@@Base+0x3ec>
   336c0:	umull	r0, r9, r2, r4
   336c4:	movw	r0, #56963	; 0xde83
   336c8:	movt	r0, #17179	; 0x431b
   336cc:	movw	ip, #51711	; 0xc9ff
   336d0:	movt	ip, #15258	; 0x3b9a
   336d4:	umull	sl, r0, r0, r3
   336d8:	cmp	r3, ip
   336dc:	lsr	r9, r9, #5
   336e0:	mls	r9, r6, r9, r4
   336e4:	lsr	r4, r0, #18
   336e8:	add	r9, lr, r9, lsl #1
   336ec:	bhi	33898 <flatcc_json_parser_struct_as_root@@Base+0x47c>
   336f0:	movw	r2, #57599	; 0xe0ff
   336f4:	movt	r2, #1525	; 0x5f5
   336f8:	cmp	r3, r2
   336fc:	mov	r3, #0
   33700:	bls	33920 <flatcc_json_parser_struct_as_root@@Base+0x504>
   33704:	strb	r3, [r1, #9]
   33708:	add	ip, r1, #7
   3370c:	mov	r0, #9
   33710:	ldrb	r3, [lr, r8, lsl #1]
   33714:	strb	r3, [r1, #7]
   33718:	ldrb	r3, [r7, #1]
   3371c:	mov	r7, r5
   33720:	mov	r5, r9
   33724:	strb	r3, [r1, #8]
   33728:	movw	r3, #34079	; 0x851f
   3372c:	movt	r3, #20971	; 0x51eb
   33730:	ldrb	r6, [r7]
   33734:	mov	r2, #100	; 0x64
   33738:	umull	r1, r3, r3, r4
   3373c:	sub	r1, ip, #2
   33740:	lsr	r3, r3, #5
   33744:	strb	r6, [ip, #-2]
   33748:	ldrb	r6, [r7, #1]
   3374c:	mls	r2, r2, r3, r4
   33750:	add	r2, lr, r2, lsl #1
   33754:	strb	r6, [ip, #-1]
   33758:	ldrb	lr, [r5]
   3375c:	sub	ip, r1, #2
   33760:	strb	lr, [r1, #-2]
   33764:	ldrb	lr, [r5, #1]
   33768:	strb	lr, [r1, #-1]
   3376c:	ldrb	r1, [r2]
   33770:	sub	lr, ip, #2
   33774:	strb	r1, [ip, #-2]
   33778:	ldrb	r2, [r2, #1]
   3377c:	strb	r2, [ip, #-1]
   33780:	add	r3, r3, #48	; 0x30
   33784:	strb	r3, [lr, #-1]
   33788:	ldrd	r4, [sp]
   3378c:	ldrd	r6, [sp, #8]
   33790:	ldrd	r8, [sp, #16]
   33794:	ldr	sl, [sp, #24]
   33798:	add	sp, sp, #28
   3379c:	pop	{pc}		; (ldr pc, [sp], #4)
   337a0:	cmp	r0, #99	; 0x63
   337a4:	bls	337ec <flatcc_json_parser_struct_as_root@@Base+0x3d0>
   337a8:	movw	ip, #34079	; 0x851f
   337ac:	movt	ip, #20971	; 0x51eb
   337b0:	cmp	r0, #1000	; 0x3e8
   337b4:	mov	r2, #100	; 0x64
   337b8:	umull	r0, ip, ip, r3
   337bc:	movw	lr, #28992	; 0x7140
   337c0:	movt	lr, #4
   337c4:	lsr	ip, ip, #5
   337c8:	mov	r4, ip
   337cc:	mls	r2, r2, ip, r3
   337d0:	add	r2, lr, r2, lsl #1
   337d4:	bcc	33880 <flatcc_json_parser_struct_as_root@@Base+0x464>
   337d8:	mov	r0, #0
   337dc:	add	r3, r1, #4
   337e0:	strb	r0, [r1, #4]
   337e4:	mov	r0, #4
   337e8:	b	33854 <flatcc_json_parser_struct_as_root@@Base+0x438>
   337ec:	cmp	r0, #9
   337f0:	mov	r2, #0
   337f4:	bhi	33904 <flatcc_json_parser_struct_as_root@@Base+0x4e8>
   337f8:	add	lr, r1, #1
   337fc:	mov	r0, #1
   33800:	strb	r2, [r1, #1]
   33804:	b	33780 <flatcc_json_parser_struct_as_root@@Base+0x364>
   33808:	movw	r2, #16959	; 0x423f
   3380c:	movt	r2, #15
   33810:	cmp	r3, r2
   33814:	bhi	338f0 <flatcc_json_parser_struct_as_root@@Base+0x4d4>
   33818:	movw	r2, #34463	; 0x869f
   3381c:	movt	r2, #1
   33820:	cmp	r3, r2
   33824:	bls	3393c <flatcc_json_parser_struct_as_root@@Base+0x520>
   33828:	mov	r3, #0
   3382c:	mov	r2, r5
   33830:	mov	r9, r7
   33834:	add	ip, r1, #6
   33838:	mov	r0, #6
   3383c:	strb	r3, [r1, #6]
   33840:	ldrb	r1, [r9]
   33844:	sub	r3, ip, #2
   33848:	strb	r1, [ip, #-2]
   3384c:	ldrb	r1, [r9, #1]
   33850:	strb	r1, [ip, #-1]
   33854:	ldrb	r1, [r2]
   33858:	sub	ip, r3, #2
   3385c:	strb	r1, [r3, #-2]
   33860:	ldrb	r2, [r2, #1]
   33864:	strb	r2, [r3, #-1]
   33868:	ldrb	r3, [lr, r4, lsl #1]
   3386c:	add	r2, lr, r4, lsl #1
   33870:	strb	r3, [ip, #-2]
   33874:	ldrb	r3, [r2, #1]
   33878:	strb	r3, [ip, #-1]
   3387c:	b	33788 <flatcc_json_parser_struct_as_root@@Base+0x36c>
   33880:	mov	lr, #0
   33884:	mov	r3, ip
   33888:	mov	r0, #3
   3388c:	add	ip, r1, #3
   33890:	strb	lr, [r1, #3]
   33894:	b	3376c <flatcc_json_parser_struct_as_root@@Base+0x350>
   33898:	umull	r0, r2, r2, r4
   3389c:	mov	ip, #0
   338a0:	movw	r0, #15241	; 0x3b89
   338a4:	movt	r0, #21990	; 0x55e6
   338a8:	strb	ip, [r1, #10]
   338ac:	ldrb	sl, [lr, r8, lsl #1]
   338b0:	lsr	ip, r2, #5
   338b4:	add	r8, r1, #8
   338b8:	umull	r2, r3, r0, r3
   338bc:	mov	r0, #10
   338c0:	mls	ip, r6, ip, r4
   338c4:	lsr	r4, r3, #25
   338c8:	strb	sl, [r1, #8]
   338cc:	ldrb	r3, [r7, #1]
   338d0:	add	r2, lr, ip, lsl #1
   338d4:	strb	r3, [r1, #9]
   338d8:	ldrb	r3, [r5]
   338dc:	sub	ip, r8, #2
   338e0:	strb	r3, [r8, #-2]
   338e4:	ldrb	r3, [r5, #1]
   338e8:	strb	r3, [r8, #-1]
   338ec:	b	33840 <flatcc_json_parser_struct_as_root@@Base+0x424>
   338f0:	mov	r3, #0
   338f4:	add	ip, r1, #7
   338f8:	mov	r0, #7
   338fc:	strb	r3, [r1, #7]
   33900:	b	33728 <flatcc_json_parser_struct_as_root@@Base+0x30c>
   33904:	mov	r4, r0
   33908:	movw	lr, #28992	; 0x7140
   3390c:	movt	lr, #4
   33910:	add	ip, r1, #2
   33914:	strb	r2, [r1, #2]
   33918:	mov	r0, #2
   3391c:	b	33868 <flatcc_json_parser_struct_as_root@@Base+0x44c>
   33920:	mov	r2, r9
   33924:	add	r8, r1, #8
   33928:	strb	r3, [r1, #8]
   3392c:	mov	r9, r5
   33930:	mov	r0, #8
   33934:	mov	r5, r7
   33938:	b	338d8 <flatcc_json_parser_struct_as_root@@Base+0x4bc>
   3393c:	mov	r0, #0
   33940:	mov	r2, r5
   33944:	mov	r3, r4
   33948:	mov	r5, r7
   3394c:	add	r1, r1, #5
   33950:	strb	r0, [r1]
   33954:	mov	r0, #5
   33958:	b	33758 <flatcc_json_parser_struct_as_root@@Base+0x33c>
   3395c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   33960:	strd	r6, [sp, #8]
   33964:	add	r7, pc, #916	; 0x394
   33968:	ldrd	r6, [r7]
   3396c:	strd	r8, [sp, #16]
   33970:	strd	sl, [sp, #24]
   33974:	mov	sl, r0
   33978:	str	lr, [sp, #32]
   3397c:	sub	sp, sp, #28
   33980:	cmp	r1, r7
   33984:	cmpeq	r0, r6
   33988:	bls	33cd8 <flatcc_json_parser_struct_as_root@@Base+0x8bc>
   3398c:	mov	r6, r2
   33990:	mov	r3, #0
   33994:	mov	r2, #100	; 0x64
   33998:	mov	fp, r1
   3399c:	bl	42130 <flatcc_json_printer_clear@@Base+0x728>
   339a0:	mov	ip, r2
   339a4:	mov	r3, #0
   339a8:	mov	r2, #100	; 0x64
   339ac:	movw	r4, #28992	; 0x7140
   339b0:	movt	r4, #4
   339b4:	mov	r0, sl
   339b8:	str	ip, [sp, #16]
   339bc:	mov	r1, fp
   339c0:	add	r5, r4, ip, lsl #1
   339c4:	bl	42130 <flatcc_json_printer_clear@@Base+0x728>
   339c8:	add	r3, pc, #824	; 0x338
   339cc:	ldrd	r2, [r3]
   339d0:	mov	r9, r0
   339d4:	str	r1, [sp]
   339d8:	cmp	fp, r3
   339dc:	cmpeq	sl, r2
   339e0:	bls	33c08 <flatcc_json_parser_struct_as_root@@Base+0x7ec>
   339e4:	mov	r2, #100	; 0x64
   339e8:	mov	r3, #0
   339ec:	bl	42130 <flatcc_json_printer_clear@@Base+0x728>
   339f0:	add	r3, r4, r2, lsl #1
   339f4:	mov	r0, sl
   339f8:	movw	r2, #10000	; 0x2710
   339fc:	mov	r1, fp
   33a00:	str	r3, [sp, #12]
   33a04:	mov	r3, #0
   33a08:	bl	42130 <flatcc_json_printer_clear@@Base+0x728>
   33a0c:	mov	r2, #100	; 0x64
   33a10:	mov	r3, #0
   33a14:	str	r1, [sp]
   33a18:	mov	r9, r0
   33a1c:	bl	42130 <flatcc_json_printer_clear@@Base+0x728>
   33a20:	add	r1, r4, r2, lsl #1
   33a24:	mov	r3, #0
   33a28:	mov	r0, sl
   33a2c:	movw	r2, #16960	; 0x4240
   33a30:	movt	r2, #15
   33a34:	str	r1, [sp, #8]
   33a38:	mov	r1, fp
   33a3c:	bl	42130 <flatcc_json_printer_clear@@Base+0x728>
   33a40:	add	r3, pc, #712	; 0x2c8
   33a44:	ldrd	r2, [r3]
   33a48:	mov	r8, r0
   33a4c:	mov	r7, r1
   33a50:	cmp	fp, r3
   33a54:	cmpeq	sl, r2
   33a58:	bhi	33d68 <flatcc_json_parser_struct_as_root@@Base+0x94c>
   33a5c:	add	r3, pc, #692	; 0x2b4
   33a60:	ldrd	r2, [r3]
   33a64:	cmp	fp, r3
   33a68:	cmpeq	sl, r2
   33a6c:	bls	33ecc <flatcc_json_parser_struct_as_root@@Base+0xab0>
   33a70:	ldr	r2, [sp, #8]
   33a74:	mov	r3, #0
   33a78:	add	ip, r6, #16
   33a7c:	mov	sl, #16
   33a80:	str	r5, [sp, #8]
   33a84:	strb	r3, [r6, #16]
   33a88:	mov	r5, r2
   33a8c:	ldr	r9, [sp, #8]
   33a90:	mov	r0, r8
   33a94:	mov	r1, r7
   33a98:	mov	r2, #100	; 0x64
   33a9c:	mov	r3, #0
   33aa0:	sub	r6, ip, #2
   33aa4:	ldrb	lr, [r9]
   33aa8:	strb	lr, [ip, #-2]
   33aac:	ldrb	lr, [r9, #1]
   33ab0:	strb	lr, [ip, #-1]
   33ab4:	bl	42130 <flatcc_json_printer_clear@@Base+0x728>
   33ab8:	add	r3, r4, r2, lsl #1
   33abc:	mov	r0, r8
   33ac0:	mov	r1, r7
   33ac4:	mov	r2, #100	; 0x64
   33ac8:	str	r3, [sp, #4]
   33acc:	mov	r3, #0
   33ad0:	bl	42130 <flatcc_json_printer_clear@@Base+0x728>
   33ad4:	mov	r8, r0
   33ad8:	mov	r7, r1
   33adc:	ldr	r1, [sp, #12]
   33ae0:	sub	r3, r6, #2
   33ae4:	ldrb	r2, [r1]
   33ae8:	strb	r2, [r6, #-2]
   33aec:	ldrb	r2, [r1, #1]
   33af0:	strb	r2, [r6, #-1]
   33af4:	ldrb	r2, [r5]
   33af8:	sub	r6, r3, #2
   33afc:	strb	r2, [r3, #-2]
   33b00:	ldrb	r2, [r5, #1]
   33b04:	strb	r2, [r3, #-1]
   33b08:	ldr	r2, [sp, #4]
   33b0c:	sub	r5, r6, #2
   33b10:	ldrb	r3, [r2]
   33b14:	strb	r3, [r6, #-2]
   33b18:	ldrb	r3, [r2, #1]
   33b1c:	strb	r3, [r6, #-1]
   33b20:	mov	r0, r8
   33b24:	mov	r1, r7
   33b28:	mov	r2, #100	; 0x64
   33b2c:	mov	r3, #0
   33b30:	bl	42130 <flatcc_json_printer_clear@@Base+0x728>
   33b34:	ldrb	lr, [r4, r2, lsl #1]
   33b38:	add	ip, r4, r2, lsl #1
   33b3c:	mov	r0, r8
   33b40:	mov	r1, r7
   33b44:	mov	r2, #100	; 0x64
   33b48:	mov	r3, #0
   33b4c:	strb	lr, [r5, #-2]
   33b50:	ldrb	ip, [ip, #1]
   33b54:	strb	ip, [r5, #-1]
   33b58:	bl	42130 <flatcc_json_printer_clear@@Base+0x728>
   33b5c:	mov	r2, #100	; 0x64
   33b60:	mov	r3, #0
   33b64:	bl	42130 <flatcc_json_printer_clear@@Base+0x728>
   33b68:	ldrb	lr, [r4, r2, lsl #1]
   33b6c:	add	ip, r4, r2, lsl #1
   33b70:	mov	r0, r8
   33b74:	mov	r1, r7
   33b78:	movw	r2, #10000	; 0x2710
   33b7c:	mov	r3, #0
   33b80:	strb	lr, [r5, #-4]
   33b84:	ldrb	ip, [ip, #1]
   33b88:	strb	ip, [r5, #-3]
   33b8c:	bl	42130 <flatcc_json_printer_clear@@Base+0x728>
   33b90:	mov	r2, #100	; 0x64
   33b94:	mov	r3, #0
   33b98:	bl	42130 <flatcc_json_printer_clear@@Base+0x728>
   33b9c:	ldrb	lr, [r4, r2, lsl #1]
   33ba0:	add	ip, r4, r2, lsl #1
   33ba4:	mov	r0, r8
   33ba8:	mov	r1, r7
   33bac:	mov	r3, #0
   33bb0:	movw	r2, #16960	; 0x4240
   33bb4:	movt	r2, #15
   33bb8:	strb	lr, [r5, #-6]
   33bbc:	ldrb	ip, [ip, #1]
   33bc0:	strb	ip, [r5, #-5]
   33bc4:	bl	42130 <flatcc_json_printer_clear@@Base+0x728>
   33bc8:	mov	r2, #100	; 0x64
   33bcc:	mov	r3, #0
   33bd0:	bl	42130 <flatcc_json_printer_clear@@Base+0x728>
   33bd4:	ldrb	r3, [r4, r2, lsl #1]
   33bd8:	add	r4, r4, r2, lsl #1
   33bdc:	mov	r0, sl
   33be0:	strb	r3, [r5, #-8]
   33be4:	ldrb	r3, [r4, #1]
   33be8:	strb	r3, [r5, #-7]
   33bec:	add	sp, sp, #28
   33bf0:	ldrd	r4, [sp]
   33bf4:	ldrd	r6, [sp, #8]
   33bf8:	ldrd	r8, [sp, #16]
   33bfc:	ldrd	sl, [sp, #24]
   33c00:	add	sp, sp, #32
   33c04:	pop	{pc}		; (ldr pc, [sp], #4)
   33c08:	add	r3, pc, #272	; 0x110
   33c0c:	ldrd	r2, [r3]
   33c10:	cmp	fp, r3
   33c14:	cmpeq	sl, r2
   33c18:	bls	33e4c <flatcc_json_parser_struct_as_root@@Base+0xa30>
   33c1c:	mov	r2, #100	; 0x64
   33c20:	mov	r3, #0
   33c24:	bl	42130 <flatcc_json_printer_clear@@Base+0x728>
   33c28:	add	r3, r4, r2, lsl #1
   33c2c:	mov	r0, sl
   33c30:	movw	r2, #10000	; 0x2710
   33c34:	mov	r1, fp
   33c38:	str	r3, [sp, #4]
   33c3c:	mov	r3, #0
   33c40:	bl	42130 <flatcc_json_printer_clear@@Base+0x728>
   33c44:	add	r3, pc, #220	; 0xdc
   33c48:	ldrd	r2, [r3]
   33c4c:	mov	r8, r0
   33c50:	mov	r7, r1
   33c54:	cmp	fp, r3
   33c58:	cmpeq	sl, r2
   33c5c:	mov	r2, #0
   33c60:	bls	33f5c <flatcc_json_parser_struct_as_root@@Base+0xb40>
   33c64:	add	r3, r6, #13
   33c68:	mov	sl, #13
   33c6c:	strb	r2, [r6, #13]
   33c70:	ldrb	r2, [r5]
   33c74:	sub	r6, r3, #2
   33c78:	strb	r2, [r3, #-2]
   33c7c:	ldrb	r2, [r5, #1]
   33c80:	strb	r2, [r3, #-1]
   33c84:	ldr	lr, [sp, #4]
   33c88:	mov	r0, r8
   33c8c:	mov	r1, r7
   33c90:	mov	r2, #10
   33c94:	mov	r3, #0
   33c98:	sub	r5, r6, #3
   33c9c:	ldrb	ip, [lr]
   33ca0:	strb	ip, [r6, #-2]
   33ca4:	ldrb	ip, [lr, #1]
   33ca8:	strb	ip, [r6, #-1]
   33cac:	bl	42130 <flatcc_json_printer_clear@@Base+0x728>
   33cb0:	add	r2, r2, #48	; 0x30
   33cb4:	mov	r0, r9
   33cb8:	ldr	r1, [sp]
   33cbc:	mov	r3, #0
   33cc0:	strb	r2, [r6, #-3]
   33cc4:	mov	r2, #1000	; 0x3e8
   33cc8:	bl	42130 <flatcc_json_printer_clear@@Base+0x728>
   33ccc:	mov	r8, r0
   33cd0:	mov	r7, r1
   33cd4:	b	33b20 <flatcc_json_parser_struct_as_root@@Base+0x704>
   33cd8:	mov	r1, r2
   33cdc:	add	sp, sp, #28
   33ce0:	ldrd	r4, [sp]
   33ce4:	ldrd	r6, [sp, #8]
   33ce8:	ldrd	r8, [sp, #16]
   33cec:	ldrd	sl, [sp, #24]
   33cf0:	ldr	lr, [sp, #32]
   33cf4:	add	sp, sp, #36	; 0x24
   33cf8:	b	33648 <flatcc_json_parser_struct_as_root@@Base+0x22c>
   33cfc:	nop	{0}
   33d00:	blcc	fe6e6504 <__bss_end__@@Base+0xfe68e148>
   33d04:	andeq	r0, r0, r0
   33d08:	mrcmi	15, 3, r9, cr2, cr15, {7}
   33d0c:	andeq	r0, r0, r8, lsl r9
   33d10:	svcvs	0x00c0ffff
   33d14:	strdeq	r8, [r3], -r2	; <UNPREDICTABLE>
   33d18:	strbge	r7, [r6], #4095	; 0xfff
   33d1c:	andeq	r8, r3, lr, ror sp
   33d20:	ldmdami	r6!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr, pc}^
   33d24:	andeq	r0, r0, r7, lsl r0
   33d28:	strtle	r0, [r5], #4095	; 0xfff
   33d2c:	andeq	r0, r0, r8, ror #1
   33d30:	ldrbeq	lr, [r5, #256]!	; 0x100
   33d34:	andeq	r0, r0, r0
   33d38:			; <UNDEFINED> instruction: 0xa763ffff
   33d3c:	stcleq	6, cr11, [r0, #716]!	; 0x2cc
   33d40:	strpl	lr, [fp], #-1024	; 0xfffffc00
   33d44:	andeq	r0, r0, r2
   33d48:	stmibhi	r7!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   33d4c:	bhi	ff1fc964 <__bss_end__@@Base+0xff1a45a8>
   33d50:	strpl	lr, [fp], #-1023	; 0xfffffc01
   33d54:	andeq	r0, r0, r2
   33d58:	ldrshtne	r3, [sl], #-255	; 0xffffff01
   33d5c:	strdeq	r5, [r0], -r3
   33d60:	stcpl	15, cr15, [r9, #1020]	; 0x3fc
   33d64:	smceq	13400	; 0x3458
   33d68:	mov	r2, #100	; 0x64
   33d6c:	mov	r3, #0
   33d70:	bl	42130 <flatcc_json_printer_clear@@Base+0x728>
   33d74:	add	r1, r4, r2, lsl #1
   33d78:	mov	r0, sl
   33d7c:	sub	r3, pc, #84	; 0x54
   33d80:	ldrd	r2, [r3]
   33d84:	str	r1, [sp, #20]
   33d88:	mov	r1, fp
   33d8c:	bl	42130 <flatcc_json_printer_clear@@Base+0x728>
   33d90:	sub	r3, pc, #96	; 0x60
   33d94:	ldrd	r2, [r3]
   33d98:	mov	r9, r0
   33d9c:	str	r1, [sp]
   33da0:	cmp	fp, r3
   33da4:	cmpeq	sl, r2
   33da8:	bls	33f00 <flatcc_json_parser_struct_as_root@@Base+0xae4>
   33dac:	mov	r2, #100	; 0x64
   33db0:	mov	r3, #0
   33db4:	bl	42130 <flatcc_json_printer_clear@@Base+0x728>
   33db8:	add	r0, r4, r2, lsl #1
   33dbc:	mov	r1, fp
   33dc0:	sub	r3, pc, #136	; 0x88
   33dc4:	ldrd	r2, [r3]
   33dc8:	str	r0, [sp, #4]
   33dcc:	mov	r0, sl
   33dd0:	bl	42130 <flatcc_json_printer_clear@@Base+0x728>
   33dd4:	sub	r3, pc, #148	; 0x94
   33dd8:	ldrd	r2, [r3]
   33ddc:	mov	r8, r0
   33de0:	mov	r7, r1
   33de4:	cmp	fp, r3
   33de8:	cmpeq	sl, r2
   33dec:	bhi	33e80 <flatcc_json_parser_struct_as_root@@Base+0xa64>
   33df0:	mov	r2, #0
   33df4:	add	r3, r6, #17
   33df8:	mov	sl, #19
   33dfc:	strb	r2, [r6, #19]
   33e00:	ldr	r2, [sp, #16]
   33e04:	ldrb	r2, [r4, r2, lsl #1]
   33e08:	strb	r2, [r6, #17]
   33e0c:	ldrb	r2, [r5, #1]
   33e10:	ldr	r5, [sp, #20]
   33e14:	strb	r2, [r6, #18]
   33e18:	ldr	r1, [sp, #12]
   33e1c:	sub	r6, r3, #2
   33e20:	ldrb	r2, [r1]
   33e24:	strb	r2, [r3, #-2]
   33e28:	ldrb	r2, [r1, #1]
   33e2c:	strb	r2, [r3, #-1]
   33e30:	ldr	r1, [sp, #8]
   33e34:	sub	r3, r6, #2
   33e38:	ldrb	r2, [r1]
   33e3c:	strb	r2, [r6, #-2]
   33e40:	ldrb	r2, [r1, #1]
   33e44:	strb	r2, [r6, #-1]
   33e48:	b	33c70 <flatcc_json_parser_struct_as_root@@Base+0x854>
   33e4c:	sub	r3, pc, #260	; 0x104
   33e50:	ldrd	r2, [r3]
   33e54:	mov	r7, r1
   33e58:	mov	r8, r0
   33e5c:	str	r5, [sp, #4]
   33e60:	cmp	fp, r3
   33e64:	mov	r3, #0
   33e68:	cmpeq	sl, r2
   33e6c:	bhi	33f44 <flatcc_json_parser_struct_as_root@@Base+0xb28>
   33e70:	mov	sl, #10
   33e74:	add	r6, r6, #10
   33e78:	strb	r3, [r6]
   33e7c:	b	33b08 <flatcc_json_parser_struct_as_root@@Base+0x6ec>
   33e80:	mov	r1, #0
   33e84:	mov	sl, #20
   33e88:	ldr	r2, [sp, #12]
   33e8c:	ldr	ip, [sp, #16]
   33e90:	strb	r1, [r6, #20]
   33e94:	ldr	r3, [sp, #20]
   33e98:	ldrb	r1, [r4, ip, lsl #1]
   33e9c:	str	r3, [sp, #12]
   33ea0:	add	r3, r6, #18
   33ea4:	strb	r1, [r6, #18]
   33ea8:	ldrb	r1, [r5, #1]
   33eac:	ldr	r5, [sp, #4]
   33eb0:	strb	r1, [r6, #19]
   33eb4:	ldrb	r1, [r2]
   33eb8:	sub	ip, r3, #2
   33ebc:	strb	r1, [r3, #-2]
   33ec0:	ldrb	r2, [r2, #1]
   33ec4:	strb	r2, [r3, #-1]
   33ec8:	b	33a8c <flatcc_json_parser_struct_as_root@@Base+0x670>
   33ecc:	sub	r3, pc, #380	; 0x17c
   33ed0:	ldrd	r2, [r3]
   33ed4:	cmp	fp, r3
   33ed8:	mov	r3, #0
   33edc:	cmpeq	sl, r2
   33ee0:	bls	33fa8 <flatcc_json_parser_struct_as_root@@Base+0xb8c>
   33ee4:	ldr	r2, [sp, #8]
   33ee8:	mov	sl, #15
   33eec:	add	r6, r6, #15
   33ef0:	strb	r3, [r6]
   33ef4:	stmib	sp, {r2, r5}
   33ef8:	ldr	r5, [sp, #12]
   33efc:	b	33e30 <flatcc_json_parser_struct_as_root@@Base+0xa14>
   33f00:	sub	r3, pc, #424	; 0x1a8
   33f04:	ldrd	r2, [r3]
   33f08:	cmp	fp, r3
   33f0c:	cmpeq	sl, r2
   33f10:	bls	33f6c <flatcc_json_parser_struct_as_root@@Base+0xb50>
   33f14:	mov	r7, r1
   33f18:	mov	r8, r0
   33f1c:	ldr	r1, [sp, #8]
   33f20:	mov	r3, #0
   33f24:	mov	r2, r5
   33f28:	ldr	r0, [sp, #12]
   33f2c:	mov	sl, #18
   33f30:	strb	r3, [r6, #18]
   33f34:	add	r3, r6, #18
   33f38:	ldr	r5, [sp, #20]
   33f3c:	strd	r0, [sp, #8]
   33f40:	b	33eb4 <flatcc_json_parser_struct_as_root@@Base+0xa98>
   33f44:	mov	r9, sl
   33f48:	add	r6, r6, #11
   33f4c:	strb	r3, [r6]
   33f50:	mov	sl, #11
   33f54:	str	fp, [sp]
   33f58:	b	33c84 <flatcc_json_parser_struct_as_root@@Base+0x868>
   33f5c:	add	r3, r6, #12
   33f60:	mov	sl, #12
   33f64:	strb	r2, [r6, #12]
   33f68:	b	33af4 <flatcc_json_parser_struct_as_root@@Base+0x6d8>
   33f6c:	ldr	r3, [sp, #12]
   33f70:	mov	r2, #0
   33f74:	mov	r9, r8
   33f78:	mov	sl, #17
   33f7c:	mov	r8, r0
   33f80:	str	r7, [sp]
   33f84:	str	r5, [sp, #12]
   33f88:	mov	r7, r1
   33f8c:	ldr	r5, [sp, #8]
   33f90:	strb	r2, [r6, #17]
   33f94:	str	r3, [sp, #8]
   33f98:	ldr	r3, [sp, #20]
   33f9c:	str	r3, [sp, #4]
   33fa0:	add	r3, r6, #17
   33fa4:	b	33e18 <flatcc_json_parser_struct_as_root@@Base+0x9fc>
   33fa8:	ldr	r1, [sp, #8]
   33fac:	mov	sl, #14
   33fb0:	add	r6, r6, #14
   33fb4:	strb	r3, [r6]
   33fb8:	ldr	r2, [sp, #12]
   33fbc:	str	r1, [sp, #4]
   33fc0:	str	r5, [sp, #12]
   33fc4:	mov	r5, r2
   33fc8:	b	33adc <flatcc_json_parser_struct_as_root@@Base+0x6c0>
   33fcc:	ldrd	r2, [r0, #16]
   33fd0:	cmp	r3, r2
   33fd4:	bcc	34004 <flatcc_json_parser_struct_as_root@@Base+0xbe8>
   33fd8:	ldr	r1, [r0]
   33fdc:	ldr	r2, [r0, #36]	; 0x24
   33fe0:	sub	ip, r3, r1
   33fe4:	mov	r3, r1
   33fe8:	str	r1, [r0, #20]
   33fec:	cmp	r2, #0
   33ff0:	moveq	r2, #3
   33ff4:	streq	r2, [r0, #36]	; 0x24
   33ff8:	ldr	r2, [r0, #12]
   33ffc:	add	r2, r2, ip
   34000:	str	r2, [r0, #12]
   34004:	mov	r2, #0
   34008:	strb	r2, [r3]
   3400c:	bx	lr
   34010:	strd	r4, [sp, #-24]!	; 0xffffffe8
   34014:	mov	r5, r0
   34018:	ldr	r4, [r0, #16]
   3401c:	ldr	r3, [r0, #20]
   34020:	strd	r6, [sp, #8]
   34024:	mov	r6, r1
   34028:	mov	r7, r2
   3402c:	str	r8, [sp, #16]
   34030:	str	lr, [sp, #20]
   34034:	cmp	r3, r4
   34038:	bcc	34050 <flatcc_json_parser_struct_as_root@@Base+0xc34>
   3403c:	mov	r1, #0
   34040:	ldr	r3, [r0, #44]	; 0x2c
   34044:	blx	r3
   34048:	ldr	r4, [r5, #16]
   3404c:	ldr	r3, [r5, #20]
   34050:	sub	r4, r4, r3
   34054:	cmp	r4, r7
   34058:	bcs	340a4 <flatcc_json_parser_struct_as_root@@Base+0xc88>
   3405c:	mov	r2, r4
   34060:	mov	r1, r6
   34064:	mov	r0, r3
   34068:	sub	r7, r7, r4
   3406c:	bl	14524 <memcpy@plt>
   34070:	ldr	r3, [r5, #20]
   34074:	add	r6, r6, r4
   34078:	mov	r1, #0
   3407c:	mov	r0, r5
   34080:	ldr	r2, [r5, #44]	; 0x2c
   34084:	add	r4, r3, r4
   34088:	str	r4, [r5, #20]
   3408c:	blx	r2
   34090:	ldr	r4, [r5, #16]
   34094:	ldr	r3, [r5, #20]
   34098:	sub	r4, r4, r3
   3409c:	cmp	r7, r4
   340a0:	bhi	3405c <flatcc_json_parser_struct_as_root@@Base+0xc40>
   340a4:	mov	r1, r6
   340a8:	mov	r0, r3
   340ac:	mov	r2, r7
   340b0:	bl	14524 <memcpy@plt>
   340b4:	ldr	r3, [r5, #20]
   340b8:	ldr	r8, [sp, #16]
   340bc:	add	r7, r3, r7
   340c0:	str	r7, [r5, #20]
   340c4:	ldrd	r4, [sp]
   340c8:	ldrd	r6, [sp, #8]
   340cc:	add	sp, sp, #20
   340d0:	pop	{pc}		; (ldr pc, [sp], #4)
   340d4:	strd	r4, [sp, #-16]!
   340d8:	mov	r4, r0
   340dc:	ldr	r5, [r0, #16]
   340e0:	ldr	r3, [r0, #20]
   340e4:	str	r6, [sp, #8]
   340e8:	mov	r6, r1
   340ec:	str	lr, [sp, #12]
   340f0:	cmp	r3, r5
   340f4:	bcc	3410c <flatcc_json_parser_struct_as_root@@Base+0xcf0>
   340f8:	mov	r1, #0
   340fc:	ldr	r3, [r0, #44]	; 0x2c
   34100:	blx	r3
   34104:	ldr	r5, [r4, #16]
   34108:	ldr	r3, [r4, #20]
   3410c:	sub	r5, r5, r3
   34110:	cmp	r5, r6
   34114:	bcs	3415c <flatcc_json_parser_struct_as_root@@Base+0xd40>
   34118:	mov	r2, r5
   3411c:	mov	r0, r3
   34120:	mov	r1, #32
   34124:	sub	r6, r6, r5
   34128:	bl	1459c <memset@plt>
   3412c:	ldr	r3, [r4, #20]
   34130:	mov	r1, #0
   34134:	mov	r0, r4
   34138:	ldr	r2, [r4, #44]	; 0x2c
   3413c:	add	r5, r3, r5
   34140:	str	r5, [r4, #20]
   34144:	blx	r2
   34148:	ldr	r5, [r4, #16]
   3414c:	ldr	r3, [r4, #20]
   34150:	sub	r5, r5, r3
   34154:	cmp	r6, r5
   34158:	bhi	34118 <flatcc_json_parser_struct_as_root@@Base+0xcfc>
   3415c:	mov	r0, r3
   34160:	mov	r2, r6
   34164:	mov	r1, #32
   34168:	bl	1459c <memset@plt>
   3416c:	ldr	r3, [r4, #20]
   34170:	add	r6, r3, r6
   34174:	str	r6, [r4, #20]
   34178:	ldrd	r4, [sp]
   3417c:	ldr	r6, [sp, #8]
   34180:	add	sp, sp, #12
   34184:	pop	{pc}		; (ldr pc, [sp], #4)
   34188:	strd	r4, [sp, #-16]!
   3418c:	ldr	ip, [r0, #16]
   34190:	ldr	r2, [r0, #20]
   34194:	ldr	r5, [r0, #32]
   34198:	str	r6, [sp, #8]
   3419c:	str	lr, [sp, #12]
   341a0:	ldrb	r1, [r0, #25]
   341a4:	mul	r5, r5, r1
   341a8:	add	r1, r2, r5
   341ac:	cmp	ip, r1
   341b0:	bcs	341cc <flatcc_json_parser_struct_as_root@@Base+0xdb0>
   341b4:	mov	r1, r5
   341b8:	ldrd	r4, [sp]
   341bc:	ldr	r6, [sp, #8]
   341c0:	ldr	lr, [sp, #12]
   341c4:	add	sp, sp, #16
   341c8:	b	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   341cc:	mov	r4, r0
   341d0:	mov	r1, #32
   341d4:	mov	r0, r2
   341d8:	mov	r2, r5
   341dc:	bl	1459c <memset@plt>
   341e0:	ldr	r3, [r4, #20]
   341e4:	ldr	r6, [sp, #8]
   341e8:	add	r5, r3, r5
   341ec:	str	r5, [r4, #20]
   341f0:	ldrd	r4, [sp]
   341f4:	add	sp, sp, #12
   341f8:	pop	{pc}		; (ldr pc, [sp], #4)
   341fc:	cmp	r1, #0
   34200:	strd	r4, [sp, #-16]!
   34204:	mov	r4, r0
   34208:	ldr	r0, [r0]
   3420c:	ldr	ip, [r4, #20]
   34210:	ldr	r3, [r4, #40]	; 0x28
   34214:	str	r6, [sp, #8]
   34218:	str	lr, [sp, #12]
   3421c:	bne	3422c <flatcc_json_parser_struct_as_root@@Base+0xe10>
   34220:	ldr	r5, [r4, #16]
   34224:	cmp	r5, ip
   34228:	bls	34268 <flatcc_json_parser_struct_as_root@@Base+0xe4c>
   3422c:	sub	r5, ip, r0
   34230:	mov	r2, #1
   34234:	mov	r1, r5
   34238:	bl	14548 <fwrite@plt>
   3423c:	ldr	r3, [r4]
   34240:	ldr	ip, [r4, #12]
   34244:	str	r3, [r4, #20]
   34248:	add	ip, ip, r5
   3424c:	str	ip, [r4, #12]
   34250:	mov	r2, #0
   34254:	strb	r2, [r3]
   34258:	ldrd	r4, [sp]
   3425c:	ldr	r6, [sp, #8]
   34260:	add	sp, sp, #12
   34264:	pop	{pc}		; (ldr pc, [sp], #4)
   34268:	mov	r2, #1
   3426c:	ldr	r1, [r4, #8]
   34270:	sub	r5, ip, r5
   34274:	bl	14548 <fwrite@plt>
   34278:	ldr	r3, [r4]
   3427c:	mov	r2, r5
   34280:	ldr	r1, [r4, #8]
   34284:	mov	r0, r3
   34288:	add	r1, r3, r1
   3428c:	bl	14524 <memcpy@plt>
   34290:	ldr	r3, [r4]
   34294:	ldr	r1, [r4, #8]
   34298:	ldr	r2, [r4, #12]
   3429c:	add	r3, r3, r5
   342a0:	str	r3, [r4, #20]
   342a4:	add	r2, r2, r1
   342a8:	str	r2, [r4, #12]
   342ac:	b	34250 <flatcc_json_parser_struct_as_root@@Base+0xe34>
   342b0:	ldr	r3, [r0, #20]
   342b4:	mov	r2, #0
   342b8:	strd	r4, [sp, #-16]!
   342bc:	ldr	r5, [r0]
   342c0:	str	r6, [sp, #8]
   342c4:	str	lr, [sp, #12]
   342c8:	strb	r2, [r3]
   342cc:	ldr	r2, [r0, #16]
   342d0:	ldr	r1, [r0, #20]
   342d4:	cmp	r1, r2
   342d8:	bcs	342ec <flatcc_json_parser_struct_as_root@@Base+0xed0>
   342dc:	ldrd	r4, [sp]
   342e0:	ldr	r6, [sp, #8]
   342e4:	add	sp, sp, #12
   342e8:	pop	{pc}		; (ldr pc, [sp], #4)
   342ec:	mov	r4, r0
   342f0:	ldrd	r0, [r0]
   342f4:	sub	r5, r3, r5
   342f8:	lsl	r1, r1, #1
   342fc:	bl	1453c <realloc@plt>
   34300:	cmp	r0, #0
   34304:	beq	34344 <flatcc_json_parser_struct_as_root@@Base+0xf28>
   34308:	ldr	r3, [r4, #4]
   3430c:	add	r2, r0, r5
   34310:	str	r2, [r4, #20]
   34314:	lsl	r3, r3, #1
   34318:	sub	r1, r3, #64	; 0x40
   3431c:	stm	r4, {r0, r3}
   34320:	add	r0, r0, r1
   34324:	str	r1, [r4, #8]
   34328:	str	r0, [r4, #16]
   3432c:	mov	r3, #0
   34330:	strb	r3, [r2]
   34334:	ldrd	r4, [sp]
   34338:	ldr	r6, [sp, #8]
   3433c:	add	sp, sp, #12
   34340:	pop	{pc}		; (ldr pc, [sp], #4)
   34344:	ldr	r2, [r4]
   34348:	ldr	r3, [r4, #36]	; 0x24
   3434c:	str	r2, [r4, #20]
   34350:	cmp	r3, #0
   34354:	moveq	r3, #3
   34358:	streq	r3, [r4, #36]	; 0x24
   3435c:	ldr	r3, [r4, #12]
   34360:	add	r3, r3, r5
   34364:	str	r3, [r4, #12]
   34368:	b	3432c <flatcc_json_parser_struct_as_root@@Base+0xf10>
   3436c:	cmp	r0, #99	; 0x63
   34370:	mov	r3, r0
   34374:	bhi	34398 <flatcc_json_parser_struct_as_root@@Base+0xf7c>
   34378:	cmp	r0, #9
   3437c:	bhi	343ec <flatcc_json_parser_struct_as_root@@Base+0xfd0>
   34380:	add	r3, r0, #48	; 0x30
   34384:	mov	r2, #0
   34388:	mov	r0, #1
   3438c:	strb	r3, [r1]
   34390:	strb	r2, [r1, #1]
   34394:	bx	lr
   34398:	movw	r2, #34079	; 0x851f
   3439c:	movt	r2, #20971	; 0x51eb
   343a0:	push	{lr}		; (str lr, [sp, #-4]!)
   343a4:	mov	lr, #100	; 0x64
   343a8:	mov	r0, #0
   343ac:	umull	ip, r2, r2, r3
   343b0:	movw	ip, #28992	; 0x7140
   343b4:	movt	ip, #4
   343b8:	strb	r0, [r1, #3]
   343bc:	mov	r0, #3
   343c0:	lsr	r2, r2, #5
   343c4:	mls	r3, lr, r2, r3
   343c8:	add	r2, r2, #48	; 0x30
   343cc:	uxtb	r3, r3
   343d0:	ldrb	lr, [ip, r3, lsl #1]
   343d4:	add	ip, ip, r3, lsl #1
   343d8:	strb	lr, [r1, #1]
   343dc:	ldrb	r3, [ip, #1]
   343e0:	strb	r2, [r1]
   343e4:	strb	r3, [r1, #2]
   343e8:	pop	{pc}		; (ldr pc, [sp], #4)
   343ec:	mov	r0, #0
   343f0:	sxth	r3, r3
   343f4:	movw	r2, #28992	; 0x7140
   343f8:	movt	r2, #4
   343fc:	add	ip, r2, r3, lsl #1
   34400:	strb	r0, [r1, #2]
   34404:	mov	r0, #2
   34408:	ldrb	r3, [r2, r3, lsl #1]
   3440c:	strb	r3, [r1]
   34410:	ldrb	r3, [ip, #1]
   34414:	strb	r3, [r1, #1]
   34418:	bx	lr
   3441c:	movw	r1, #27920	; 0x6d10
   34420:	movt	r1, #4
   34424:	ldr	r3, [pc, #20]	; 34440 <flatcc_json_parser_struct_as_root@@Base+0x1024>
   34428:	movw	r0, #28008	; 0x6d68
   3442c:	movt	r0, #4
   34430:	str	r4, [sp, #-8]!
   34434:	mov	r2, #260	; 0x104
   34438:	str	lr, [sp, #4]
   3443c:	bl	145f0 <__assert_fail@plt>
   34440:	andeq	r7, r4, ip, lsl #4
   34444:	movw	r1, #27920	; 0x6d10
   34448:	movt	r1, #4
   3444c:	ldr	r3, [pc, #20]	; 34468 <flatcc_json_parser_struct_as_root@@Base+0x104c>
   34450:	movw	r0, #30864	; 0x7890
   34454:	movt	r0, #4
   34458:	str	r4, [sp, #-8]!
   3445c:	mov	r2, #239	; 0xef
   34460:	str	lr, [sp, #4]
   34464:	bl	145f0 <__assert_fail@plt>
   34468:	andeq	r7, r4, r4, lsr #4
   3446c:	ldr	r3, [r0, #20]
   34470:	strd	r4, [sp, #-32]!	; 0xffffffe0
   34474:	strd	r6, [sp, #8]
   34478:	mov	r6, r0
   3447c:	strd	r8, [sp, #16]
   34480:	mov	r8, r2
   34484:	mov	r9, #92	; 0x5c
   34488:	mov	r2, #34	; 0x22
   3448c:	str	sl, [sp, #24]
   34490:	mov	sl, #102	; 0x66
   34494:	add	r0, r3, #1
   34498:	str	lr, [sp, #28]
   3449c:	str	r0, [r6, #20]
   344a0:	strb	r2, [r3]
   344a4:	ldrb	r4, [r1]
   344a8:	mov	r5, r1
   344ac:	cmp	r4, #34	; 0x22
   344b0:	cmpne	r4, #31
   344b4:	movhi	r7, #1
   344b8:	movls	r7, #0
   344bc:	bls	344ec <flatcc_json_parser_struct_as_root@@Base+0x10d0>
   344c0:	cmp	r4, #92	; 0x5c
   344c4:	bne	344d4 <flatcc_json_parser_struct_as_root@@Base+0x10b8>
   344c8:	b	346b4 <flatcc_json_parser_struct_as_root@@Base+0x1298>
   344cc:	cmp	r4, #92	; 0x5c
   344d0:	beq	344e4 <flatcc_json_parser_struct_as_root@@Base+0x10c8>
   344d4:	ldrb	r4, [r5, #1]!
   344d8:	cmp	r4, #34	; 0x22
   344dc:	cmpne	r4, #31
   344e0:	bhi	344cc <flatcc_json_parser_struct_as_root@@Base+0x10b0>
   344e4:	sub	r7, r5, r1
   344e8:	sub	r8, r8, r7
   344ec:	ldr	r2, [r6, #16]
   344f0:	ldr	r0, [r6, #20]
   344f4:	add	r3, r0, r7
   344f8:	cmp	r2, r3
   344fc:	mov	r2, r7
   34500:	bhi	34604 <flatcc_json_parser_struct_as_root@@Base+0x11e8>
   34504:	mov	r0, r6
   34508:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   3450c:	ldr	r7, [r6, #20]
   34510:	cmp	r8, #0
   34514:	add	r3, r7, #1
   34518:	beq	34620 <flatcc_json_parser_struct_as_root@@Base+0x1204>
   3451c:	cmp	r4, #12
   34520:	str	r3, [r6, #20]
   34524:	strb	r9, [r7]
   34528:	beq	34670 <flatcc_json_parser_struct_as_root@@Base+0x1254>
   3452c:	bhi	345d4 <flatcc_json_parser_struct_as_root@@Base+0x11b8>
   34530:	cmp	r4, #9
   34534:	beq	3469c <flatcc_json_parser_struct_as_root@@Base+0x1280>
   34538:	cmp	r4, #10
   3453c:	beq	34684 <flatcc_json_parser_struct_as_root@@Base+0x1268>
   34540:	cmp	r4, #8
   34544:	beq	34658 <flatcc_json_parser_struct_as_root@@Base+0x123c>
   34548:	ldr	r2, [r6, #20]
   3454c:	mov	r1, #117	; 0x75
   34550:	mov	r0, #48	; 0x30
   34554:	lsr	r3, r4, #4
   34558:	and	r4, r4, #15
   3455c:	cmp	r3, #10
   34560:	add	ip, r2, #1
   34564:	str	ip, [r6, #20]
   34568:	strb	r1, [r2]
   3456c:	movcc	r2, r0
   34570:	movcs	r2, #87	; 0x57
   34574:	ldr	r1, [r6, #20]
   34578:	cmp	r4, #10
   3457c:	add	r2, r2, r3
   34580:	movcc	r3, r0
   34584:	movcs	r3, #87	; 0x57
   34588:	add	r3, r3, r4
   3458c:	add	ip, r1, #1
   34590:	str	ip, [r6, #20]
   34594:	strb	r0, [r1]
   34598:	ldr	r1, [r6, #20]
   3459c:	add	ip, r1, #1
   345a0:	str	ip, [r6, #20]
   345a4:	strb	r0, [r1]
   345a8:	ldr	r1, [r6, #20]
   345ac:	add	r0, r1, #1
   345b0:	str	r0, [r6, #20]
   345b4:	strb	r2, [r1]
   345b8:	ldr	r2, [r6, #20]
   345bc:	add	r1, r2, #1
   345c0:	str	r1, [r6, #20]
   345c4:	strb	r3, [r2]
   345c8:	sub	r8, r8, #1
   345cc:	add	r1, r5, #1
   345d0:	b	344a4 <flatcc_json_parser_struct_as_root@@Base+0x1088>
   345d4:	cmp	r4, #34	; 0x22
   345d8:	beq	34644 <flatcc_json_parser_struct_as_root@@Base+0x1228>
   345dc:	cmp	r4, #92	; 0x5c
   345e0:	beq	34644 <flatcc_json_parser_struct_as_root@@Base+0x1228>
   345e4:	cmp	r4, #13
   345e8:	bne	34548 <flatcc_json_parser_struct_as_root@@Base+0x112c>
   345ec:	ldr	r3, [r6, #20]
   345f0:	mov	r2, #114	; 0x72
   345f4:	add	r1, r3, #1
   345f8:	str	r1, [r6, #20]
   345fc:	strb	r2, [r3]
   34600:	b	345c8 <flatcc_json_parser_struct_as_root@@Base+0x11ac>
   34604:	bl	14524 <memcpy@plt>
   34608:	ldr	r3, [r6, #20]
   3460c:	cmp	r8, #0
   34610:	add	r7, r3, r7
   34614:	add	r3, r7, #1
   34618:	str	r7, [r6, #20]
   3461c:	bne	3451c <flatcc_json_parser_struct_as_root@@Base+0x1100>
   34620:	mov	r2, #34	; 0x22
   34624:	str	r3, [r6, #20]
   34628:	strb	r2, [r7]
   3462c:	ldrd	r4, [sp]
   34630:	ldrd	r6, [sp, #8]
   34634:	ldrd	r8, [sp, #16]
   34638:	ldr	sl, [sp, #24]
   3463c:	add	sp, sp, #28
   34640:	pop	{pc}		; (ldr pc, [sp], #4)
   34644:	ldr	r3, [r6, #20]
   34648:	add	r2, r3, #1
   3464c:	str	r2, [r6, #20]
   34650:	strb	r4, [r3]
   34654:	b	345c8 <flatcc_json_parser_struct_as_root@@Base+0x11ac>
   34658:	ldr	r3, [r6, #20]
   3465c:	mov	r2, #98	; 0x62
   34660:	add	r1, r3, #1
   34664:	str	r1, [r6, #20]
   34668:	strb	r2, [r3]
   3466c:	b	345c8 <flatcc_json_parser_struct_as_root@@Base+0x11ac>
   34670:	ldr	r3, [r6, #20]
   34674:	add	r2, r3, #1
   34678:	str	r2, [r6, #20]
   3467c:	strb	sl, [r3]
   34680:	b	345c8 <flatcc_json_parser_struct_as_root@@Base+0x11ac>
   34684:	ldr	r3, [r6, #20]
   34688:	mov	r2, #110	; 0x6e
   3468c:	add	r1, r3, #1
   34690:	str	r1, [r6, #20]
   34694:	strb	r2, [r3]
   34698:	b	345c8 <flatcc_json_parser_struct_as_root@@Base+0x11ac>
   3469c:	ldr	r3, [r6, #20]
   346a0:	mov	r2, #116	; 0x74
   346a4:	add	r1, r3, #1
   346a8:	str	r1, [r6, #20]
   346ac:	strb	r2, [r3]
   346b0:	b	345c8 <flatcc_json_parser_struct_as_root@@Base+0x11ac>
   346b4:	mov	r7, #0
   346b8:	b	344ec <flatcc_json_parser_struct_as_root@@Base+0x10d0>
   346bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   346c0:	mov	r5, r2
   346c4:	mov	r4, r0
   346c8:	ldr	r2, [r0, #20]
   346cc:	strd	r6, [sp, #8]
   346d0:	mov	r6, r1
   346d4:	str	r8, [sp, #16]
   346d8:	str	lr, [sp, #20]
   346dc:	ldrb	r1, [r0, #25]
   346e0:	cmp	r1, #0
   346e4:	bne	347c0 <flatcc_json_parser_struct_as_root@@Base+0x13a4>
   346e8:	ldr	r3, [r0, #16]
   346ec:	cmp	r3, r2
   346f0:	bls	34798 <flatcc_json_parser_struct_as_root@@Base+0x137c>
   346f4:	mov	r3, #34	; 0x22
   346f8:	strb	r3, [r2]
   346fc:	ldrb	r3, [r4, #26]
   34700:	ldr	r2, [r4, #16]
   34704:	ldr	r0, [r4, #20]
   34708:	cmp	r3, #0
   3470c:	addeq	r0, r0, #1
   34710:	add	r3, r0, r5
   34714:	cmp	r2, r3
   34718:	str	r0, [r4, #20]
   3471c:	bls	347a8 <flatcc_json_parser_struct_as_root@@Base+0x138c>
   34720:	mov	r2, r5
   34724:	mov	r1, r6
   34728:	bl	14524 <memcpy@plt>
   3472c:	ldr	r2, [r4, #20]
   34730:	add	r2, r2, r5
   34734:	str	r2, [r4, #20]
   34738:	mov	r3, #34	; 0x22
   3473c:	mov	ip, #58	; 0x3a
   34740:	mov	r0, #32
   34744:	strb	r3, [r2]
   34748:	ldrb	r3, [r4, #26]
   3474c:	ldr	r1, [r4, #20]
   34750:	clz	r3, r3
   34754:	lsr	r3, r3, #5
   34758:	add	r2, r1, r3
   3475c:	add	r2, r2, #1
   34760:	str	r2, [r4, #20]
   34764:	strb	ip, [r1, r3]
   34768:	ldr	r3, [r4, #20]
   3476c:	strb	r0, [r3]
   34770:	ldrb	r2, [r4, #25]
   34774:	ldr	r3, [r4, #20]
   34778:	ldrd	r6, [sp, #8]
   3477c:	ldr	r8, [sp, #16]
   34780:	cmp	r2, #0
   34784:	addne	r3, r3, #1
   34788:	str	r3, [r4, #20]
   3478c:	ldrd	r4, [sp]
   34790:	add	sp, sp, #20
   34794:	pop	{pc}		; (ldr pc, [sp], #4)
   34798:	ldr	r3, [r0, #44]	; 0x2c
   3479c:	blx	r3
   347a0:	ldr	r2, [r4, #20]
   347a4:	b	346f4 <flatcc_json_parser_struct_as_root@@Base+0x12d8>
   347a8:	mov	r2, r5
   347ac:	mov	r1, r6
   347b0:	mov	r0, r4
   347b4:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   347b8:	ldr	r2, [r4, #20]
   347bc:	b	34738 <flatcc_json_parser_struct_as_root@@Base+0x131c>
   347c0:	add	r1, r2, #1
   347c4:	mov	r3, #10
   347c8:	str	r1, [r0, #20]
   347cc:	strb	r3, [r2]
   347d0:	ldrb	r7, [r0, #25]
   347d4:	ldr	r1, [r0, #16]
   347d8:	ldr	r2, [r0, #32]
   347dc:	ldr	r3, [r0, #20]
   347e0:	mul	r7, r2, r7
   347e4:	add	r2, r3, r7
   347e8:	cmp	r1, r2
   347ec:	bcs	34800 <flatcc_json_parser_struct_as_root@@Base+0x13e4>
   347f0:	mov	r1, r7
   347f4:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   347f8:	ldr	r2, [r4, #20]
   347fc:	b	346f4 <flatcc_json_parser_struct_as_root@@Base+0x12d8>
   34800:	mov	r2, r7
   34804:	mov	r0, r3
   34808:	mov	r1, #32
   3480c:	bl	1459c <memset@plt>
   34810:	ldr	r2, [r4, #20]
   34814:	add	r2, r2, r7
   34818:	str	r2, [r4, #20]
   3481c:	b	346f4 <flatcc_json_parser_struct_as_root@@Base+0x12d8>
   34820:	subs	r1, r0, #0
   34824:	strd	r4, [sp, #-36]!	; 0xffffffdc
   34828:	strd	r6, [sp, #8]
   3482c:	strd	r8, [sp, #16]
   34830:	strd	sl, [sp, #24]
   34834:	str	lr, [sp, #32]
   34838:	sub	sp, sp, #332	; 0x14c
   3483c:	vstr	d0, [sp, #24]
   34840:	str	r1, [sp, #176]	; 0xb0
   34844:	beq	35900 <flatcc_json_parser_struct_as_root@@Base+0x24e4>
   34848:	vmov	r4, r5, d0
   3484c:	mov	r7, #0
   34850:	movt	r7, #65504	; 0xffe0
   34854:	mov	r6, #0
   34858:	adds	r2, r4, r4
   3485c:	adc	r3, r5, r5
   34860:	cmp	r3, r7
   34864:	cmpeq	r2, r6
   34868:	bhi	35308 <flatcc_json_parser_struct_as_root@@Base+0x1eec>
   3486c:	cmp	r4, #0
   34870:	sbcs	r3, r5, #0
   34874:	movge	r3, r1
   34878:	strge	r3, [sp, #44]	; 0x2c
   3487c:	blt	352a0 <flatcc_json_parser_struct_as_root@@Base+0x1e84>
   34880:	orrs	r3, r4, r5
   34884:	beq	352cc <flatcc_json_parser_struct_as_root@@Base+0x1eb0>
   34888:	mov	r3, #0
   3488c:	movt	r3, #32752	; 0x7ff0
   34890:	mov	r2, #0
   34894:	cmp	r5, r3
   34898:	cmpeq	r4, r2
   3489c:	beq	35324 <flatcc_json_parser_struct_as_root@@Base+0x1f08>
   348a0:	ldrd	r2, [sp, #24]
   348a4:	mov	r1, #0
   348a8:	mov	r0, #0
   348ac:	strd	r0, [sp, #48]	; 0x30
   348b0:	mov	r6, r3
   348b4:	str	r2, [sp, #80]	; 0x50
   348b8:	bic	r1, r6, #-2147483648	; 0x80000000
   348bc:	lsr	r2, r1, #20
   348c0:	lsl	r3, r2, #20
   348c4:	str	r3, [sp, #52]	; 0x34
   348c8:	ubfx	r3, r6, #0, #20
   348cc:	str	r3, [sp, #84]	; 0x54
   348d0:	ldrd	r2, [sp, #48]	; 0x30
   348d4:	orrs	r3, r2, r3
   348d8:	beq	35340 <flatcc_json_parser_struct_as_root@@Base+0x1f24>
   348dc:	ldrd	r2, [sp, #80]	; 0x50
   348e0:	ubfx	r6, r6, #20, #11
   348e4:	sub	r6, r6, #1072	; 0x430
   348e8:	sub	lr, r6, #3
   348ec:	sub	r6, r6, #4
   348f0:	adds	r0, r2, #0
   348f4:	adc	r5, r3, #1048576	; 0x100000
   348f8:	str	r0, [sp, #16]
   348fc:	mov	r1, #0
   34900:	movt	r1, #65472	; 0xffc0
   34904:	str	r5, [sp, #20]
   34908:	sub	r2, lr, #10
   3490c:	mov	ip, #0
   34910:	ldrd	r8, [sp, #16]
   34914:	strd	sl, [sp, #160]	; 0xa0
   34918:	mov	fp, r5
   3491c:	lsl	r3, r9, #10
   34920:	mov	r7, r2
   34924:	mov	r4, ip
   34928:	lsl	r2, r8, #10
   3492c:	orr	r3, r3, r8, lsr #22
   34930:	mov	r8, r2
   34934:	sub	r2, r7, #10
   34938:	and	r5, r3, r1
   3493c:	mov	r9, r3
   34940:	orrs	r3, r4, r5
   34944:	beq	3491c <flatcc_json_parser_struct_as_root@@Base+0x1500>
   34948:	cmp	r8, #0
   3494c:	mov	r5, fp
   34950:	strd	r8, [sp, #16]
   34954:	sbcs	r3, r9, #0
   34958:	str	r7, [sp, #120]	; 0x78
   3495c:	blt	34984 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   34960:	mov	r3, r7
   34964:	adds	r8, r8, r8
   34968:	sub	r3, r3, #1
   3496c:	adc	r9, r9, r9
   34970:	cmp	r8, #0
   34974:	sbcs	r2, r9, #0
   34978:	bge	34964 <flatcc_json_parser_struct_as_root@@Base+0x1548>
   3497c:	strd	r8, [sp, #16]
   34980:	str	r3, [sp, #120]	; 0x78
   34984:	adds	r2, r0, r0
   34988:	mov	r7, #0
   3498c:	str	r6, [sp, #160]	; 0xa0
   34990:	adc	r3, r5, r5
   34994:	adds	sl, r2, #1
   34998:	mov	r4, #0
   3499c:	movt	r4, #65472	; 0xffc0
   349a0:	sub	r1, r6, #10
   349a4:	adc	fp, r3, #0
   349a8:	str	r3, [sp, #180]	; 0xb4
   349ac:	mov	r8, r7
   349b0:	mov	r9, r2
   349b4:	lsl	r3, fp, #10
   349b8:	mov	r6, r8
   349bc:	mov	r2, r1
   349c0:	lsl	ip, sl, #10
   349c4:	sub	r1, r1, #10
   349c8:	orr	r3, r3, sl, lsr #22
   349cc:	mov	sl, ip
   349d0:	and	r7, r3, r4
   349d4:	mov	fp, r3
   349d8:	orrs	r3, r6, r7
   349dc:	beq	349b4 <flatcc_json_parser_struct_as_root@@Base+0x1598>
   349e0:	mov	r3, r2
   349e4:	cmp	ip, #0
   349e8:	ldr	r6, [sp, #160]	; 0xa0
   349ec:	sbcs	r1, fp, #0
   349f0:	mov	r2, r9
   349f4:	str	r3, [sp, #168]	; 0xa8
   349f8:	blt	34a28 <flatcc_json_parser_struct_as_root@@Base+0x160c>
   349fc:	ldrd	r8, [sp, #16]
   34a00:	sub	r3, r3, #1
   34a04:	adds	sl, sl, sl
   34a08:	mov	r1, r3
   34a0c:	adc	fp, fp, fp
   34a10:	cmp	sl, #0
   34a14:	sbcs	ip, fp, #0
   34a18:	sub	r3, r3, #1
   34a1c:	bge	34a04 <flatcc_json_parser_struct_as_root@@Base+0x15e8>
   34a20:	strd	r8, [sp, #16]
   34a24:	str	r1, [sp, #168]	; 0xa8
   34a28:	vldr	d7, [sp, #24]
   34a2c:	vcmpe.f64	d7, #0.0
   34a30:	vmrs	APSR_nzcv, fpscr
   34a34:	ble	3591c <flatcc_json_parser_struct_as_root@@Base+0x2500>
   34a38:	vmov.f64	d6, d7
   34a3c:	vldr	d7, [pc, #924]	; 34de0 <flatcc_json_parser_struct_as_root@@Base+0x19c4>
   34a40:	vcmpe.f64	d6, d7
   34a44:	vmrs	APSR_nzcv, fpscr
   34a48:	bhi	3591c <flatcc_json_parser_struct_as_root@@Base+0x2500>
   34a4c:	ldrd	r8, [sp, #80]	; 0x50
   34a50:	mov	r3, r8
   34a54:	orrs	r3, r3, r9
   34a58:	ldrd	r8, [sp, #48]	; 0x30
   34a5c:	moveq	r3, #1
   34a60:	movne	r3, #0
   34a64:	mov	r1, r8
   34a68:	orrs	r1, r1, r9
   34a6c:	moveq	r3, #0
   34a70:	cmp	r3, #0
   34a74:	bne	3564c <flatcc_json_parser_struct_as_root@@Base+0x2230>
   34a78:	ldr	r3, [sp, #180]	; 0xb4
   34a7c:	subs	r2, r2, #1
   34a80:	sbc	lr, r3, #0
   34a84:	ldr	r1, [sp, #168]	; 0xa8
   34a88:	mvn	r3, #60	; 0x3c
   34a8c:	vldr	d6, [pc, #852]	; 34de8 <flatcc_json_parser_struct_as_root@@Base+0x19cc>
   34a90:	sub	r6, r6, r1
   34a94:	ldr	r1, [sp, #120]	; 0x78
   34a98:	lsl	r0, r2, r6
   34a9c:	str	r0, [sp, #48]	; 0x30
   34aa0:	sub	r3, r3, r1
   34aa4:	sub	r1, r6, #32
   34aa8:	vmov	s14, r3
   34aac:	lsl	r3, lr, r6
   34ab0:	orr	r1, r3, r2, lsl r1
   34ab4:	rsb	r3, r6, #32
   34ab8:	orr	r3, r1, r2, lsr r3
   34abc:	str	r3, [sp, #80]	; 0x50
   34ac0:	vcvt.f64.s32	d7, s14
   34ac4:	vmul.f64	d7, d7, d6
   34ac8:	vcmpe.f64	d7, #0.0
   34acc:	vcvt.s32.f64	s13, d7
   34ad0:	vmrs	APSR_nzcv, fpscr
   34ad4:	bmi	34af8 <flatcc_json_parser_struct_as_root@@Base+0x16dc>
   34ad8:	vcvt.f64.s32	d5, s13
   34adc:	vsub.f64	d7, d7, d5
   34ae0:	vcmp.f64	d7, #0.0
   34ae4:	vmrs	APSR_nzcv, fpscr
   34ae8:	beq	34af8 <flatcc_json_parser_struct_as_root@@Base+0x16dc>
   34aec:	vmov	r3, s13
   34af0:	add	r3, r3, #1
   34af4:	vmov	s13, r3
   34af8:	vmov	r3, s13
   34afc:	movw	lr, #28992	; 0x7140
   34b00:	movt	lr, #4
   34b04:	ldrd	r6, [sp, #16]
   34b08:	add	r2, lr, #288	; 0x120
   34b0c:	str	lr, [sp, #180]	; 0xb4
   34b10:	add	lr, lr, #280	; 0x118
   34b14:	mov	r4, r7
   34b18:	add	ip, r3, #344	; 0x158
   34b1c:	mov	r3, #0
   34b20:	add	r0, ip, #10
   34b24:	add	ip, ip, #3
   34b28:	cmp	ip, #0
   34b2c:	str	r3, [sp, #196]	; 0xc4
   34b30:	movlt	ip, r0
   34b34:	asr	ip, ip, #3
   34b38:	add	ip, ip, #1
   34b3c:	lsl	r0, ip, #4
   34b40:	add	r2, r2, r0
   34b44:	add	ip, lr, r0
   34b48:	ldmdb	r2, {r0, r2}
   34b4c:	ldrsh	r8, [ip, #8]
   34b50:	umull	r4, r5, r4, r0
   34b54:	umull	r6, r7, r6, r0
   34b58:	strd	r6, [sp, #160]	; 0xa0
   34b5c:	mov	r6, r4
   34b60:	ldr	r4, [sp, #16]
   34b64:	str	r5, [sp, #192]	; 0xc0
   34b68:	ldr	r7, [sp, #164]	; 0xa4
   34b6c:	umull	r4, r5, r4, r2
   34b70:	adds	r6, r7, r6
   34b74:	mov	r7, r4
   34b78:	mov	r4, r5
   34b7c:	ldr	r5, [sp, #192]	; 0xc0
   34b80:	adc	r1, r3, r3
   34b84:	adds	r6, r6, #-2147483648	; 0x80000000
   34b88:	adc	r1, r1, r3
   34b8c:	adds	r6, r6, r7
   34b90:	adc	r1, r1, r3
   34b94:	adds	r4, r5, r4
   34b98:	adc	lr, r3, r3
   34b9c:	str	r4, [sp, #152]	; 0x98
   34ba0:	str	lr, [sp, #156]	; 0x9c
   34ba4:	ldr	lr, [sp, #80]	; 0x50
   34ba8:	ldrd	r4, [sp, #152]	; 0x98
   34bac:	umull	r6, r7, r0, lr
   34bb0:	mov	lr, r1
   34bb4:	ldrsh	r1, [ip, #10]
   34bb8:	ldr	ip, [sp, #120]	; 0x78
   34bbc:	strd	r6, [sp, #160]	; 0xa0
   34bc0:	str	r1, [sp, #192]	; 0xc0
   34bc4:	ldr	r1, [sp, #48]	; 0x30
   34bc8:	add	r9, r8, ip
   34bcc:	umull	r6, r7, r0, r1
   34bd0:	ldr	r1, [sp, #20]
   34bd4:	mov	ip, r7
   34bd8:	ldr	r7, [sp, #48]	; 0x30
   34bdc:	umlal	r4, r5, r2, r1
   34be0:	umull	r6, r7, r2, r7
   34be4:	strd	r6, [sp, #16]
   34be8:	adds	r7, lr, r4
   34bec:	ldr	lr, [sp, #80]	; 0x50
   34bf0:	adc	r1, r3, r5
   34bf4:	str	r7, [sp, #112]	; 0x70
   34bf8:	ldrd	r6, [sp, #160]	; 0xa0
   34bfc:	str	r1, [sp, #116]	; 0x74
   34c00:	umull	r4, r5, r2, lr
   34c04:	adds	ip, ip, r6
   34c08:	mov	lr, r7
   34c0c:	ldrd	r6, [sp, #16]
   34c10:	adc	r1, r3, r3
   34c14:	adds	ip, ip, #-2147483648	; 0x80000000
   34c18:	adc	r8, r1, r3
   34c1c:	adds	ip, ip, r6
   34c20:	str	r7, [sp, #48]	; 0x30
   34c24:	umull	r6, r7, r0, fp
   34c28:	umull	r0, r1, r0, sl
   34c2c:	adc	r8, r8, r3
   34c30:	subs	ip, r4, #1
   34c34:	strd	r0, [sp, #16]
   34c38:	sbc	r0, r5, #0
   34c3c:	adds	lr, ip, lr
   34c40:	ldr	r1, [sp, #48]	; 0x30
   34c44:	adc	r0, r0, r3
   34c48:	umull	r4, r5, r2, sl
   34c4c:	umull	sl, fp, r2, fp
   34c50:	adds	lr, lr, r1
   34c54:	ldr	r1, [sp, #20]
   34c58:	adc	r0, r0, r3
   34c5c:	adds	ip, r8, lr
   34c60:	adc	r2, r3, r0
   34c64:	str	ip, [sp, #104]	; 0x68
   34c68:	str	r2, [sp, #108]	; 0x6c
   34c6c:	adds	r1, r1, r6
   34c70:	adc	r2, r3, r3
   34c74:	adds	r1, r1, #-2147483648	; 0x80000000
   34c78:	adc	r2, r2, r3
   34c7c:	adds	r1, r1, r4
   34c80:	adc	r2, r2, r3
   34c84:	adds	ip, sl, #1
   34c88:	mov	r4, r5
   34c8c:	adc	r5, fp, r3
   34c90:	adds	r1, ip, r7
   34c94:	adc	lr, r5, r3
   34c98:	adds	r1, r1, r4
   34c9c:	adc	lr, lr, r3
   34ca0:	adds	r2, r2, r1
   34ca4:	ldrd	r0, [sp, #104]	; 0x68
   34ca8:	str	r2, [sp, #32]
   34cac:	adc	r2, r3, lr
   34cb0:	str	r2, [sp, #36]	; 0x24
   34cb4:	ldrd	r4, [sp, #32]
   34cb8:	subs	r2, r4, r0
   34cbc:	str	r2, [sp, #56]	; 0x38
   34cc0:	sbc	r2, r5, r1
   34cc4:	cmp	r1, r5
   34cc8:	cmpeq	r0, r4
   34ccc:	str	r2, [sp, #60]	; 0x3c
   34cd0:	bhi	358fc <flatcc_json_parser_struct_as_root@@Base+0x24e0>
   34cd4:	add	r1, r9, #129	; 0x81
   34cd8:	movw	r0, #1233	; 0x4d1
   34cdc:	ldrd	r4, [sp, #32]
   34ce0:	mvn	r2, #63	; 0x3f
   34ce4:	mov	r3, #1
   34ce8:	sub	r9, r2, r9
   34cec:	mul	r1, r0, r1
   34cf0:	sub	r6, r9, #32
   34cf4:	rsb	r8, r9, #32
   34cf8:	lsl	ip, r3, r9
   34cfc:	lsl	r0, r3, r6
   34d00:	asr	lr, r1, #12
   34d04:	orr	r1, r0, r3, lsr r8
   34d08:	lsr	r2, r4, r9
   34d0c:	add	r0, lr, r3
   34d10:	str	r6, [sp, #48]	; 0x30
   34d14:	orr	r2, r2, r5, lsl r8
   34d18:	str	ip, [sp, #80]	; 0x50
   34d1c:	str	r1, [sp, #84]	; 0x54
   34d20:	ldr	r1, [sp, #180]	; 0xb4
   34d24:	orr	r2, r2, r5, lsr r6
   34d28:	str	lr, [sp, #16]
   34d2c:	ldrd	r6, [sp, #80]	; 0x50
   34d30:	add	r1, r1, r0, lsl #2
   34d34:	ldr	ip, [r1, #1672]	; 0x688
   34d38:	subs	r3, r6, #1
   34d3c:	sbc	r1, r7, #0
   34d40:	and	sl, r4, r3
   34d44:	and	fp, r5, r1
   34d48:	str	r3, [sp, #152]	; 0x98
   34d4c:	str	r1, [sp, #160]	; 0xa0
   34d50:	cmp	r2, ip
   34d54:	bcs	34d70 <flatcc_json_parser_struct_as_root@@Base+0x1954>
   34d58:	ldr	r3, [sp, #180]	; 0xb4
   34d5c:	mov	r0, lr
   34d60:	add	r3, r3, lr, lsl #2
   34d64:	ldr	ip, [r3, #1672]	; 0x688
   34d68:	sub	r3, lr, #1
   34d6c:	str	r3, [sp, #16]
   34d70:	cmp	r0, #0
   34d74:	ble	3587c <flatcc_json_parser_struct_as_root@@Base+0x2460>
   34d78:	udiv	r3, r2, ip
   34d7c:	ldrd	r0, [sp, #44]	; 0x2c
   34d80:	mls	r2, ip, r3, r2
   34d84:	add	r3, r3, #48	; 0x30
   34d88:	uxtb	r3, r3
   34d8c:	lsl	r1, r2, r1
   34d90:	strb	r3, [r0]
   34d94:	lsl	r0, r2, r9
   34d98:	orr	r1, r1, r2, lsr r8
   34d9c:	adds	r0, r0, sl
   34da0:	adc	r1, r1, fp
   34da4:	strd	r0, [sp]
   34da8:	ldrd	r4, [sp]
   34dac:	ldrd	r0, [sp, #56]	; 0x38
   34db0:	cmp	r1, r5
   34db4:	cmpeq	r0, r4
   34db8:	bhi	358d0 <flatcc_json_parser_struct_as_root@@Base+0x24b4>
   34dbc:	movw	r5, #52429	; 0xcccd
   34dc0:	movt	r5, #52428	; 0xcccc
   34dc4:	ldr	lr, [sp, #16]
   34dc8:	mov	r4, #1
   34dcc:	ldr	r3, [sp, #44]	; 0x2c
   34dd0:	add	r0, r3, #1
   34dd4:	str	r0, [sp, #16]
   34dd8:	b	34e48 <flatcc_json_parser_struct_as_root@@Base+0x1a2c>
   34ddc:	nop	{0}
   34de0:			; <UNDEFINED> instruction: 0xffffffff
   34de4:	svcvc	0x00efffff
   34de8:			; <UNDEFINED> instruction: 0x509f79fe
   34dec:	svccc	0x00d34413
   34df0:	andeq	r7, r4, r8, lsr r2
   34df4:	andeq	r7, r4, ip, asr #4
   34df8:	mov	r0, r3
   34dfc:	udiv	r3, r2, ip
   34e00:	ldr	r1, [sp, #48]	; 0x30
   34e04:	mov	r4, r6
   34e08:	mls	r2, ip, r3, r2
   34e0c:	add	r3, r3, #48	; 0x30
   34e10:	uxtb	r3, r3
   34e14:	lsl	r1, r2, r1
   34e18:	strb	r3, [r0], #1
   34e1c:	lsl	r6, r2, r9
   34e20:	str	r0, [sp, #16]
   34e24:	orr	r1, r1, r2, lsr r8
   34e28:	adds	r0, r6, sl
   34e2c:	ldrd	r6, [sp, #56]	; 0x38
   34e30:	adc	r1, r1, fp
   34e34:	strd	r0, [sp]
   34e38:	ldrd	r0, [sp]
   34e3c:	cmp	r7, r1
   34e40:	cmpeq	r6, r0
   34e44:	bhi	3540c <flatcc_json_parser_struct_as_root@@Base+0x1ff0>
   34e48:	umull	r3, ip, r5, ip
   34e4c:	ldr	r3, [sp, #16]
   34e50:	sub	lr, lr, #1
   34e54:	add	r6, r4, #1
   34e58:	cmn	lr, #1
   34e5c:	lsr	ip, ip, #3
   34e60:	str	r6, [sp, #104]	; 0x68
   34e64:	str	r3, [sp, #180]	; 0xb4
   34e68:	bne	34df8 <flatcc_json_parser_struct_as_root@@Base+0x19dc>
   34e6c:	mov	r0, #0
   34e70:	add	r3, r0, r4
   34e74:	mov	r5, #1
   34e78:	mov	ip, #0
   34e7c:	str	r3, [sp, #88]	; 0x58
   34e80:	ldr	r3, [sp, #44]	; 0x2c
   34e84:	str	r9, [sp, #96]	; 0x60
   34e88:	str	r8, [sp, #104]	; 0x68
   34e8c:	ldrd	r8, [sp, #56]	; 0x38
   34e90:	add	r0, r3, r4
   34e94:	mov	r4, r0
   34e98:	b	34ea8 <flatcc_json_parser_struct_as_root@@Base+0x1a8c>
   34e9c:	mov	r5, r2
   34ea0:	mov	ip, lr
   34ea4:	add	r6, r6, #1
   34ea8:	ldr	r3, [sp, #88]	; 0x58
   34eac:	mov	r7, r4
   34eb0:	lsl	r0, fp, #2
   34eb4:	lsl	r1, sl, #2
   34eb8:	str	r6, [sp, #56]	; 0x38
   34ebc:	ldr	r4, [sp, #152]	; 0x98
   34ec0:	orr	r0, r0, sl, lsr #30
   34ec4:	adds	r1, r1, sl
   34ec8:	lsl	lr, ip, #2
   34ecc:	adc	r0, r0, fp
   34ed0:	adds	r1, r1, r1
   34ed4:	lsl	r2, r5, #2
   34ed8:	sub	r3, r3, r6
   34edc:	adc	r0, r0, r0
   34ee0:	str	r3, [sp, #16]
   34ee4:	and	sl, r4, r1
   34ee8:	lsl	r4, r9, #2
   34eec:	ldr	r3, [sp, #96]	; 0x60
   34ef0:	str	lr, [sp, #144]	; 0x90
   34ef4:	orr	lr, lr, r5, lsr #30
   34ef8:	str	r2, [sp, #136]	; 0x88
   34efc:	adds	r2, r2, r5
   34f00:	orr	r4, r4, r8, lsr #30
   34f04:	adc	lr, lr, ip
   34f08:	adds	r2, r2, r2
   34f0c:	adc	lr, lr, lr
   34f10:	lsr	r3, r1, r3
   34f14:	ldr	r1, [sp, #160]	; 0xa0
   34f18:	and	fp, r1, r0
   34f1c:	ldr	r1, [sp, #104]	; 0x68
   34f20:	orr	r3, r3, r0, lsl r1
   34f24:	lsl	r1, r8, #2
   34f28:	str	r1, [sp]
   34f2c:	ldr	r1, [sp, #48]	; 0x30
   34f30:	orr	r3, r3, r0, lsr r1
   34f34:	ldr	r1, [sp]
   34f38:	add	r3, r3, #48	; 0x30
   34f3c:	uxtb	r3, r3
   34f40:	adds	r1, r1, r8
   34f44:	strb	r3, [r7]
   34f48:	adc	r0, r4, r9
   34f4c:	adds	r1, r1, r1
   34f50:	adc	r0, r0, r0
   34f54:	mov	r8, r1
   34f58:	cmp	r0, fp
   34f5c:	mov	r9, r0
   34f60:	cmpeq	r1, sl
   34f64:	add	r4, r7, #1
   34f68:	bls	34e9c <flatcc_json_parser_struct_as_root@@Base+0x1a80>
   34f6c:	mov	r4, r6
   34f70:	str	r7, [sp, #48]	; 0x30
   34f74:	strd	r8, [sp, #56]	; 0x38
   34f78:	ldrd	r8, [sp, #32]
   34f7c:	str	ip, [sp, #96]	; 0x60
   34f80:	mov	ip, lr
   34f84:	mov	lr, r0
   34f88:	ldrd	r6, [sp, #112]	; 0x70
   34f8c:	str	r1, [sp, #104]	; 0x68
   34f90:	mov	r0, r9
   34f94:	subs	r1, r8, r6
   34f98:	ldrd	r8, [sp, #32]
   34f9c:	sbc	r0, r0, r7
   34fa0:	cmp	r7, r9
   34fa4:	ldr	r7, [sp, #120]	; 0x78
   34fa8:	cmpeq	r6, r8
   34fac:	ldr	r9, [sp, #168]	; 0xa8
   34fb0:	movhi	r6, #1
   34fb4:	movls	r6, #0
   34fb8:	cmp	r7, r9
   34fbc:	orrne	r6, r6, #1
   34fc0:	cmp	r6, #0
   34fc4:	bne	358fc <flatcc_json_parser_struct_as_root@@Base+0x24e0>
   34fc8:	mul	r0, r2, r0
   34fcc:	umull	r6, r7, r2, r1
   34fd0:	mla	r0, r1, ip, r0
   34fd4:	strd	r6, [sp]
   34fd8:	add	r1, r0, r7
   34fdc:	str	r1, [sp, #4]
   34fe0:	ldrd	r6, [sp]
   34fe4:	subs	r1, r6, r2
   34fe8:	str	r1, [sp, #128]	; 0x80
   34fec:	sbc	r1, r7, ip
   34ff0:	str	r1, [sp, #132]	; 0x84
   34ff4:	ldrd	r0, [sp, #128]	; 0x80
   34ff8:	cmp	fp, r1
   34ffc:	cmpeq	sl, r0
   35000:	bcs	35848 <flatcc_json_parser_struct_as_root@@Base+0x242c>
   35004:	ldrd	r8, [sp, #56]	; 0x38
   35008:	ldrd	r6, [sp, #80]	; 0x50
   3500c:	subs	r1, r8, sl
   35010:	str	r1, [sp, #200]	; 0xc8
   35014:	sbc	r1, r9, fp
   35018:	str	r1, [sp, #204]	; 0xcc
   3501c:	ldrd	r0, [sp, #200]	; 0xc8
   35020:	cmp	r7, r1
   35024:	cmpeq	r6, r0
   35028:	bhi	358dc <flatcc_json_parser_struct_as_root@@Base+0x24c0>
   3502c:	subs	r1, r8, r6
   35030:	str	r4, [sp, #32]
   35034:	mov	r4, r6
   35038:	sbc	r0, r9, r7
   3503c:	subs	r1, r1, sl
   35040:	ldrd	r8, [sp, #128]	; 0x80
   35044:	str	r2, [sp, #56]	; 0x38
   35048:	str	ip, [sp, #88]	; 0x58
   3504c:	mov	ip, r5
   35050:	mov	r5, r7
   35054:	str	r1, [sp, #208]	; 0xd0
   35058:	sbc	r1, r0, fp
   3505c:	str	r1, [sp, #212]	; 0xd4
   35060:	ldrd	r0, [sp, #208]	; 0xd0
   35064:	adds	r2, r4, sl
   35068:	str	r2, [sp, #8]
   3506c:	adc	r2, r5, fp
   35070:	str	r2, [sp, #12]
   35074:	ldrd	r6, [sp, #8]
   35078:	cmp	r9, r7
   3507c:	cmpeq	r8, r6
   35080:	bhi	353d4 <flatcc_json_parser_struct_as_root@@Base+0x1fb8>
   35084:	subs	r7, r8, sl
   35088:	mov	r5, ip
   3508c:	ldr	r4, [sp, #32]
   35090:	sbc	r1, r9, fp
   35094:	str	r7, [sp, #64]	; 0x40
   35098:	ldrd	r6, [sp]
   3509c:	str	r1, [sp, #68]	; 0x44
   350a0:	ldr	r2, [sp, #56]	; 0x38
   350a4:	ldrd	r8, [sp, #8]
   350a8:	ldr	ip, [sp, #88]	; 0x58
   350ac:	subs	r1, r2, r6
   350b0:	sbc	r0, ip, r7
   350b4:	adds	r1, r1, r8
   350b8:	str	r1, [sp, #72]	; 0x48
   350bc:	adc	r1, r0, r9
   350c0:	str	r1, [sp, #76]	; 0x4c
   350c4:	ldrd	r0, [sp, #64]	; 0x40
   350c8:	ldrd	r6, [sp, #72]	; 0x48
   350cc:	cmp	r1, r7
   350d0:	cmpeq	r0, r6
   350d4:	bcc	35848 <flatcc_json_parser_struct_as_root@@Base+0x242c>
   350d8:	ldr	r1, [sp, #48]	; 0x30
   350dc:	sub	r3, r3, #1
   350e0:	strb	r3, [r1]
   350e4:	ldrd	r0, [sp]
   350e8:	adds	r3, r2, r0
   350ec:	str	r3, [sp, #240]	; 0xf0
   350f0:	adc	r3, ip, r1
   350f4:	str	r3, [sp, #244]	; 0xf4
   350f8:	ldrd	r2, [sp, #8]
   350fc:	ldrd	r0, [sp, #240]	; 0xf0
   35100:	cmp	r1, r3
   35104:	cmpeq	r0, r2
   35108:	bls	3519c <flatcc_json_parser_struct_as_root@@Base+0x1d80>
   3510c:	ldrd	r6, [sp, #80]	; 0x50
   35110:	ldr	ip, [sp, #104]	; 0x68
   35114:	subs	ip, ip, r2
   35118:	str	ip, [sp, #264]	; 0x108
   3511c:	sbc	ip, lr, r3
   35120:	str	ip, [sp, #268]	; 0x10c
   35124:	add	ip, sp, #264	; 0x108
   35128:	ldrd	r8, [ip]
   3512c:	cmp	r7, r9
   35130:	cmpeq	r6, r8
   35134:	bhi	3519c <flatcc_json_parser_struct_as_root@@Base+0x1d80>
   35138:	adds	ip, r6, r2
   3513c:	str	ip, [sp, #288]	; 0x120
   35140:	adc	ip, r7, r3
   35144:	str	ip, [sp, #292]	; 0x124
   35148:	add	ip, sp, #288	; 0x120
   3514c:	ldrd	r6, [ip]
   35150:	cmp	r1, r7
   35154:	cmpeq	r0, r6
   35158:	bhi	353ac <flatcc_json_parser_struct_as_root@@Base+0x1f90>
   3515c:	subs	ip, r0, r2
   35160:	sbc	r3, r1, r3
   35164:	str	ip, [sp, #296]	; 0x128
   35168:	mov	ip, r1
   3516c:	add	r1, sp, #304	; 0x130
   35170:	str	r3, [sp, #300]	; 0x12c
   35174:	subs	r3, r6, r0
   35178:	str	r3, [sp, #304]	; 0x130
   3517c:	sbc	r3, r7, ip
   35180:	str	r3, [sp, #308]	; 0x134
   35184:	add	r3, sp, #296	; 0x128
   35188:	ldrd	r0, [r1]
   3518c:	ldrd	r2, [r3]
   35190:	cmp	r3, r1
   35194:	cmpeq	r2, r0
   35198:	bhi	353ac <flatcc_json_parser_struct_as_root@@Base+0x1f90>
   3519c:	ldr	ip, [sp, #96]	; 0x60
   351a0:	ldr	r8, [sp, #136]	; 0x88
   351a4:	ldr	r3, [sp, #144]	; 0x90
   351a8:	adds	r2, r8, r5
   351ac:	orr	r3, r3, r5, lsr #30
   351b0:	str	r2, [sp, #184]	; 0xb8
   351b4:	adc	r2, r3, ip
   351b8:	str	r2, [sp, #188]	; 0xbc
   351bc:	ldrd	r6, [sp, #184]	; 0xb8
   351c0:	lsl	r2, r7, #2
   351c4:	lsl	r1, r6, #2
   351c8:	orr	r2, r2, r6, lsr #30
   351cc:	str	r1, [sp, #184]	; 0xb8
   351d0:	str	r2, [sp, #188]	; 0xbc
   351d4:	ldrd	r0, [sp, #8]
   351d8:	ldrd	r6, [sp, #184]	; 0xb8
   351dc:	cmp	r1, r7
   351e0:	cmpeq	r0, r6
   351e4:	bcc	353ac <flatcc_json_parser_struct_as_root@@Base+0x1f90>
   351e8:	adds	r5, r8, r5
   351ec:	adc	r3, r3, ip
   351f0:	lsl	r2, r5, #3
   351f4:	lsl	r3, r3, #3
   351f8:	orr	r3, r3, r5, lsr #29
   351fc:	mov	r5, r2
   35200:	ldr	r2, [sp, #104]	; 0x68
   35204:	subs	r2, r2, r5
   35208:	sbc	r3, lr, r3
   3520c:	strd	r2, [sp, #248]	; 0xf8
   35210:	ldrd	r2, [sp, #248]	; 0xf8
   35214:	cmp	r1, r3
   35218:	cmpeq	r0, r2
   3521c:	bhi	353ac <flatcc_json_parser_struct_as_root@@Base+0x1f90>
   35220:	ldr	r3, [sp, #16]
   35224:	ldr	r2, [sp, #192]	; 0xc0
   35228:	sub	r5, r3, r2
   3522c:	mov	r3, r2
   35230:	ldr	r2, [sp, #16]
   35234:	cmp	r4, #2
   35238:	sub	r1, r3, r2
   3523c:	movge	r3, r4
   35240:	movlt	r3, #2
   35244:	cmp	r3, r1
   35248:	suble	r7, r3, #1
   3524c:	movgt	r7, r1
   35250:	cmp	r5, #0
   35254:	blt	35698 <flatcc_json_parser_struct_as_root@@Base+0x227c>
   35258:	ldr	r3, [sp, #44]	; 0x2c
   3525c:	cmp	r5, #2
   35260:	add	lr, r3, r4
   35264:	bgt	35850 <flatcc_json_parser_struct_as_root@@Base+0x2434>
   35268:	cmp	r5, #0
   3526c:	ble	3528c <flatcc_json_parser_struct_as_root@@Base+0x1e70>
   35270:	mov	r0, lr
   35274:	mov	r2, r5
   35278:	mov	r1, #48	; 0x30
   3527c:	bl	1459c <memset@plt>
   35280:	ldr	r3, [sp, #44]	; 0x2c
   35284:	add	r4, r4, r5
   35288:	add	lr, r3, r4
   3528c:	ldr	r2, [sp, #176]	; 0xb0
   35290:	mov	r3, #0
   35294:	strb	r3, [lr]
   35298:	sub	r0, lr, r2
   3529c:	b	352ec <flatcc_json_parser_struct_as_root@@Base+0x1ed0>
   352a0:	vldr	d7, [sp, #24]
   352a4:	add	r3, r5, #-2147483648	; 0x80000000
   352a8:	mov	r0, r1
   352ac:	mov	r2, #45	; 0x2d
   352b0:	mov	r5, r3
   352b4:	orrs	r3, r4, r5
   352b8:	strb	r2, [r0], #1
   352bc:	str	r0, [sp, #44]	; 0x2c
   352c0:	vneg.f64	d7, d7
   352c4:	vstr	d7, [sp, #24]
   352c8:	bne	34888 <flatcc_json_parser_struct_as_root@@Base+0x146c>
   352cc:	ldr	r1, [sp, #44]	; 0x2c
   352d0:	mov	r3, #0
   352d4:	mov	r2, #48	; 0x30
   352d8:	mov	r0, r1
   352dc:	strb	r2, [r1]
   352e0:	strb	r3, [r0, #1]!
   352e4:	ldr	r3, [sp, #176]	; 0xb0
   352e8:	sub	r0, r0, r3
   352ec:	add	sp, sp, #332	; 0x14c
   352f0:	ldrd	r4, [sp]
   352f4:	ldrd	r6, [sp, #8]
   352f8:	ldrd	r8, [sp, #16]
   352fc:	ldrd	sl, [sp, #24]
   35300:	add	sp, sp, #32
   35304:	pop	{pc}		; (ldr pc, [sp], #4)
   35308:	movw	r1, #30984	; 0x7908
   3530c:	movt	r1, #4
   35310:	vmov	r3, s0
   35314:	mov	r2, r5
   35318:	bl	145d8 <sprintf@plt>
   3531c:	mov	r0, #21
   35320:	b	352ec <flatcc_json_parser_struct_as_root@@Base+0x1ed0>
   35324:	ldr	r0, [sp, #44]	; 0x2c
   35328:	movw	r3, #28265	; 0x6e69
   3532c:	movt	r3, #102	; 0x66
   35330:	str	r3, [r0], #3
   35334:	ldr	r3, [sp, #176]	; 0xb0
   35338:	sub	r0, r0, r3
   3533c:	b	352ec <flatcc_json_parser_struct_as_root@@Base+0x1ed0>
   35340:	ldrd	r2, [sp, #80]	; 0x50
   35344:	orrs	r1, r2, r3
   35348:	beq	35938 <flatcc_json_parser_struct_as_root@@Base+0x251c>
   3534c:	movw	r6, #64461	; 0xfbcd
   35350:	movt	r6, #65535	; 0xffff
   35354:	movw	lr, #64462	; 0xfbce
   35358:	movt	lr, #65535	; 0xffff
   3535c:	mov	r0, r2
   35360:	mov	r5, r3
   35364:	b	348f8 <flatcc_json_parser_struct_as_root@@Base+0x14dc>
   35368:	mov	r2, sl
   3536c:	mov	r3, fp
   35370:	strd	r2, [sp, #144]	; 0x90
   35374:	ldrd	r2, [sp, #144]	; 0x90
   35378:	cmp	r3, #0
   3537c:	cmpeq	r2, #1
   35380:	bls	353ac <flatcc_json_parser_struct_as_root@@Base+0x1f90>
   35384:	ldrd	r0, [sp, #56]	; 0x38
   35388:	subs	ip, r0, #4
   3538c:	sbc	r1, r1, #0
   35390:	str	ip, [sp, #256]	; 0x100
   35394:	str	r1, [sp, #260]	; 0x104
   35398:	add	r1, sp, #256	; 0x100
   3539c:	ldrd	r0, [r1]
   353a0:	cmp	r1, r3
   353a4:	cmpeq	r0, r2
   353a8:	bcs	35680 <flatcc_json_parser_struct_as_root@@Base+0x2264>
   353ac:	movw	r1, #31040	; 0x7940
   353b0:	movt	r1, #4
   353b4:	ldrd	r2, [sp, #24]
   353b8:	ldr	r4, [sp, #44]	; 0x2c
   353bc:	mov	r0, r4
   353c0:	bl	145d8 <sprintf@plt>
   353c4:	ldr	r2, [sp, #176]	; 0xb0
   353c8:	sub	r3, r4, r2
   353cc:	add	r0, r3, r0
   353d0:	b	352ec <flatcc_json_parser_struct_as_root@@Base+0x1ed0>
   353d4:	subs	r2, r0, r4
   353d8:	mov	sl, r6
   353dc:	sbc	r6, r1, r5
   353e0:	cmp	r5, r1
   353e4:	ldr	r1, [sp, #48]	; 0x30
   353e8:	sub	r3, r3, #1
   353ec:	cmpeq	r4, r0
   353f0:	uxtb	r3, r3
   353f4:	mov	fp, r7
   353f8:	strb	r3, [r1]
   353fc:	bhi	35668 <flatcc_json_parser_struct_as_root@@Base+0x224c>
   35400:	mov	r0, r2
   35404:	mov	r1, r6
   35408:	b	35064 <flatcc_json_parser_struct_as_root@@Base+0x1c48>
   3540c:	str	lr, [sp, #16]
   35410:	mov	r7, r4
   35414:	ldr	lr, [sp, #180]	; 0xb4
   35418:	ldrd	sl, [sp, #32]
   3541c:	ldrd	r0, [sp, #112]	; 0x70
   35420:	subs	r6, sl, r0
   35424:	sbc	r2, fp, r1
   35428:	cmp	r1, fp
   3542c:	ldr	r1, [sp, #120]	; 0x78
   35430:	cmpeq	r0, sl
   35434:	str	r6, [sp, #64]	; 0x40
   35438:	ldr	r0, [sp, #168]	; 0xa8
   3543c:	movhi	r5, #1
   35440:	movls	r5, #0
   35444:	cmp	r1, r0
   35448:	orrne	r5, r5, #1
   3544c:	cmp	r5, #0
   35450:	bne	358fc <flatcc_json_parser_struct_as_root@@Base+0x24e0>
   35454:	subs	r4, r6, #1
   35458:	ldrd	sl, [sp]
   3545c:	lsl	r0, ip, r9
   35460:	str	r4, [sp, #136]	; 0x88
   35464:	sbc	r4, r2, #0
   35468:	str	r4, [sp, #140]	; 0x8c
   3546c:	ldr	r4, [sp, #48]	; 0x30
   35470:	lsl	r1, ip, r4
   35474:	ldrd	r4, [sp, #136]	; 0x88
   35478:	orr	r1, r1, ip, lsr r8
   3547c:	cmp	r5, fp
   35480:	cmpeq	r4, sl
   35484:	bls	358e4 <flatcc_json_parser_struct_as_root@@Base+0x24c8>
   35488:	ldrd	r8, [sp, #56]	; 0x38
   3548c:	subs	ip, r8, sl
   35490:	str	ip, [sp, #216]	; 0xd8
   35494:	sbc	ip, r9, fp
   35498:	str	ip, [sp, #220]	; 0xdc
   3549c:	ldrd	r8, [sp, #216]	; 0xd8
   354a0:	cmp	r1, r9
   354a4:	cmpeq	r0, r8
   354a8:	bhi	35368 <flatcc_json_parser_struct_as_root@@Base+0x1f4c>
   354ac:	subs	ip, r8, r0
   354b0:	str	r7, [sp]
   354b4:	ldrd	r4, [sp, #136]	; 0x88
   354b8:	str	r2, [sp, #8]
   354bc:	str	ip, [sp, #224]	; 0xe0
   354c0:	sbc	ip, r9, r1
   354c4:	str	ip, [sp, #228]	; 0xe4
   354c8:	ldrd	r6, [sp, #224]	; 0xe0
   354cc:	adds	r8, r0, sl
   354d0:	adc	r9, r1, fp
   354d4:	cmp	r5, r9
   354d8:	cmpeq	r4, r8
   354dc:	bhi	35618 <flatcc_json_parser_struct_as_root@@Base+0x21fc>
   354e0:	ldr	r7, [sp]
   354e4:	strd	sl, [sp]
   354e8:	mov	sl, r8
   354ec:	mov	r8, r4
   354f0:	ldr	r4, [sp]
   354f4:	mov	fp, r9
   354f8:	strd	sl, [sp, #144]	; 0x90
   354fc:	ldr	r2, [sp, #8]
   35500:	subs	ip, r8, r4
   35504:	ldr	r4, [sp, #4]
   35508:	ldrd	r8, [sp, #112]	; 0x70
   3550c:	str	ip, [sp, #88]	; 0x58
   35510:	sbc	ip, r5, r4
   35514:	str	ip, [sp, #92]	; 0x5c
   35518:	adds	ip, r8, #1
   3551c:	adc	r5, r9, #0
   35520:	ldrd	r8, [sp, #32]
   35524:	subs	ip, ip, r8
   35528:	sbc	r5, r5, r9
   3552c:	adds	ip, ip, sl
   35530:	ldrd	r8, [sp, #88]	; 0x58
   35534:	str	ip, [sp, #96]	; 0x60
   35538:	adc	ip, r5, fp
   3553c:	str	ip, [sp, #100]	; 0x64
   35540:	ldrd	sl, [sp, #96]	; 0x60
   35544:	cmp	r9, fp
   35548:	cmpeq	r8, sl
   3554c:	subcs	r3, r3, #1
   35550:	strbcs	r3, [lr]
   35554:	bcc	35870 <flatcc_json_parser_struct_as_root@@Base+0x2454>
   35558:	ldr	r3, [sp, #64]	; 0x40
   3555c:	adds	r3, r3, #1
   35560:	str	r3, [sp, #232]	; 0xe8
   35564:	adc	r3, r2, #0
   35568:	str	r3, [sp, #236]	; 0xec
   3556c:	ldrd	r2, [sp, #144]	; 0x90
   35570:	ldrd	r4, [sp, #232]	; 0xe8
   35574:	cmp	r5, r3
   35578:	cmpeq	r4, r2
   3557c:	bls	35374 <flatcc_json_parser_struct_as_root@@Base+0x1f58>
   35580:	ldrd	r8, [sp, #56]	; 0x38
   35584:	subs	ip, r8, r2
   35588:	str	ip, [sp, #280]	; 0x118
   3558c:	sbc	ip, r9, r3
   35590:	str	ip, [sp, #284]	; 0x11c
   35594:	add	ip, sp, #280	; 0x118
   35598:	ldrd	r8, [ip]
   3559c:	cmp	r1, r9
   355a0:	cmpeq	r0, r8
   355a4:	bhi	35374 <flatcc_json_parser_struct_as_root@@Base+0x1f58>
   355a8:	adds	ip, r0, r2
   355ac:	adc	r3, r1, r3
   355b0:	str	ip, [sp, #272]	; 0x110
   355b4:	str	r3, [sp, #276]	; 0x114
   355b8:	add	r3, sp, #272	; 0x110
   355bc:	ldrd	r2, [r3]
   355c0:	cmp	r5, r3
   355c4:	cmpeq	r4, r2
   355c8:	bhi	353ac <flatcc_json_parser_struct_as_root@@Base+0x1f90>
   355cc:	ldrd	r0, [sp, #144]	; 0x90
   355d0:	subs	ip, r4, r0
   355d4:	sbc	r1, r5, r1
   355d8:	str	ip, [sp, #312]	; 0x138
   355dc:	str	r1, [sp, #316]	; 0x13c
   355e0:	add	r1, sp, #272	; 0x110
   355e4:	ldrd	r0, [r1]
   355e8:	subs	ip, r0, r4
   355ec:	sbc	r3, r1, r5
   355f0:	add	r1, sp, #320	; 0x140
   355f4:	str	ip, [sp, #320]	; 0x140
   355f8:	str	r3, [sp, #324]	; 0x144
   355fc:	add	r3, sp, #312	; 0x138
   35600:	ldrd	r0, [r1]
   35604:	ldrd	r2, [r3]
   35608:	cmp	r3, r1
   3560c:	cmpeq	r2, r0
   35610:	bls	35374 <flatcc_json_parser_struct_as_root@@Base+0x1f58>
   35614:	b	353ac <flatcc_json_parser_struct_as_root@@Base+0x1f90>
   35618:	subs	ip, r6, r0
   3561c:	sub	r3, r3, #1
   35620:	uxtb	r3, r3
   35624:	sbc	r2, r7, r1
   35628:	cmp	r1, r7
   3562c:	mov	sl, r8
   35630:	cmpeq	r0, r6
   35634:	mov	fp, r9
   35638:	strb	r3, [lr]
   3563c:	bhi	35674 <flatcc_json_parser_struct_as_root@@Base+0x2258>
   35640:	mov	r6, ip
   35644:	mov	r7, r2
   35648:	b	354cc <flatcc_json_parser_struct_as_root@@Base+0x20b0>
   3564c:	lsl	r3, r5, #2
   35650:	sub	r6, lr, #2
   35654:	lsl	r2, r0, #2
   35658:	orr	r3, r3, r0, lsr #30
   3565c:	subs	r2, r2, #1
   35660:	sbc	lr, r3, #0
   35664:	b	34a84 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   35668:	mov	r5, ip
   3566c:	ldr	r4, [sp, #32]
   35670:	b	3519c <flatcc_json_parser_struct_as_root@@Base+0x1d80>
   35674:	strd	r8, [sp, #144]	; 0x90
   35678:	ldr	r7, [sp]
   3567c:	b	35374 <flatcc_json_parser_struct_as_root@@Base+0x1f58>
   35680:	ldr	r3, [sp, #16]
   35684:	mov	r4, r7
   35688:	ldr	r2, [sp, #192]	; 0xc0
   3568c:	sub	r5, r3, r2
   35690:	mov	r3, r2
   35694:	b	35230 <flatcc_json_parser_struct_as_root@@Base+0x1e14>
   35698:	add	r0, r5, r4
   3569c:	cmp	r1, r4
   356a0:	cmnge	r0, #2
   356a4:	bge	35888 <flatcc_json_parser_struct_as_root@@Base+0x246c>
   356a8:	cmp	r4, #1
   356ac:	beq	357a0 <flatcc_json_parser_struct_as_root@@Base+0x2384>
   356b0:	cmp	r7, #0
   356b4:	add	r6, r4, #1
   356b8:	sub	r8, r4, r7
   356bc:	ble	356d8 <flatcc_json_parser_struct_as_root@@Base+0x22bc>
   356c0:	ldr	r3, [sp, #44]	; 0x2c
   356c4:	sub	r0, r6, r7
   356c8:	mov	r2, r7
   356cc:	add	r1, r3, r8
   356d0:	add	r0, r3, r0
   356d4:	bl	1450c <memmove@plt>
   356d8:	ldr	r2, [sp, #44]	; 0x2c
   356dc:	add	r5, r7, r5
   356e0:	mov	r3, #46	; 0x2e
   356e4:	cmp	r5, #0
   356e8:	add	lr, r2, r6
   356ec:	strb	r3, [r2, r8]
   356f0:	beq	3528c <flatcc_json_parser_struct_as_root@@Base+0x1e70>
   356f4:	mov	r3, #101	; 0x65
   356f8:	add	r4, r4, #2
   356fc:	add	lr, r2, r4
   35700:	movge	r0, lr
   35704:	strb	r3, [r2, r6]
   35708:	bge	3571c <flatcc_json_parser_struct_as_root@@Base+0x2300>
   3570c:	mov	r3, #45	; 0x2d
   35710:	rsb	r5, r5, #0
   35714:	add	r0, lr, #1
   35718:	strb	r3, [r2, r4]
   3571c:	movw	ip, #52429	; 0xcccd
   35720:	movt	ip, #52428	; 0xcccc
   35724:	mov	r3, r0
   35728:	mvn	r6, #9
   3572c:	umull	r1, r2, ip, r5
   35730:	lsr	r2, r2, #3
   35734:	mla	r1, r6, r2, r5
   35738:	subs	r5, r2, #0
   3573c:	add	r2, r1, #48	; 0x30
   35740:	strb	r2, [r3], #1
   35744:	bne	3572c <flatcc_json_parser_struct_as_root@@Base+0x2310>
   35748:	sub	r2, r3, r0
   3574c:	strb	r5, [r3]
   35750:	add	r7, r2, r2, lsr #31
   35754:	cmp	r2, #1
   35758:	subgt	r2, r0, #1
   3575c:	movgt	ip, r3
   35760:	asr	r7, r7, #1
   35764:	ble	3578c <flatcc_json_parser_struct_as_root@@Base+0x2370>
   35768:	ldrb	r5, [r2, #1]
   3576c:	add	r1, r2, #2
   35770:	add	r2, r2, #1
   35774:	sub	r1, r1, r0
   35778:	ldrb	r6, [ip, #-1]!
   3577c:	cmp	r1, r7
   35780:	strb	r6, [r2]
   35784:	strb	r5, [ip]
   35788:	blt	35768 <flatcc_json_parser_struct_as_root@@Base+0x234c>
   3578c:	sub	lr, r3, lr
   35790:	ldr	r3, [sp, #44]	; 0x2c
   35794:	add	lr, lr, r4
   35798:	add	lr, r3, lr
   3579c:	b	3528c <flatcc_json_parser_struct_as_root@@Base+0x1e70>
   357a0:	ldr	r0, [sp, #44]	; 0x2c
   357a4:	mov	r2, #101	; 0x65
   357a8:	mov	r3, #45	; 0x2d
   357ac:	mov	lr, #2
   357b0:	add	r5, r0, #2
   357b4:	add	ip, r0, #3
   357b8:	strb	r2, [r0, #1]
   357bc:	strb	r3, [r0, #2]
   357c0:	movw	r4, #26215	; 0x6667
   357c4:	movt	r4, #26214	; 0x6666
   357c8:	mov	r3, ip
   357cc:	mvn	r6, #9
   357d0:	smull	r2, r0, r4, r1
   357d4:	asr	r2, r1, #31
   357d8:	rsb	r2, r2, r0, asr #2
   357dc:	mla	r0, r6, r2, r1
   357e0:	subs	r1, r2, #0
   357e4:	add	r2, r0, #48	; 0x30
   357e8:	strb	r2, [r3], #1
   357ec:	bne	357d0 <flatcc_json_parser_struct_as_root@@Base+0x23b4>
   357f0:	sub	r2, r3, ip
   357f4:	strb	r1, [r3]
   357f8:	add	r7, r2, r2, lsr #31
   357fc:	cmp	r2, #1
   35800:	subgt	r2, ip, #1
   35804:	movgt	r0, r3
   35808:	asr	r7, r7, #1
   3580c:	ble	35834 <flatcc_json_parser_struct_as_root@@Base+0x2418>
   35810:	ldrb	r4, [r2, #1]
   35814:	add	r1, r2, #2
   35818:	add	r2, r2, #1
   3581c:	sub	r1, r1, ip
   35820:	ldrb	r6, [r0, #-1]!
   35824:	cmp	r7, r1
   35828:	strb	r6, [r2]
   3582c:	strb	r4, [r0]
   35830:	bgt	35810 <flatcc_json_parser_struct_as_root@@Base+0x23f4>
   35834:	sub	r3, r3, r5
   35838:	add	lr, r3, lr
   3583c:	ldr	r3, [sp, #44]	; 0x2c
   35840:	add	lr, r3, lr
   35844:	b	3528c <flatcc_json_parser_struct_as_root@@Base+0x1e70>
   35848:	strd	sl, [sp, #8]
   3584c:	b	350e4 <flatcc_json_parser_struct_as_root@@Base+0x1cc8>
   35850:	mov	r2, r3
   35854:	add	lr, r4, #1
   35858:	mov	r3, #101	; 0x65
   3585c:	add	ip, r2, lr
   35860:	mov	r1, r5
   35864:	mov	r5, ip
   35868:	strb	r3, [r2, r4]
   3586c:	b	357c0 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   35870:	ldrd	r4, [sp]
   35874:	strd	r4, [sp, #144]	; 0x90
   35878:	b	35558 <flatcc_json_parser_struct_as_root@@Base+0x213c>
   3587c:	mov	r4, #0
   35880:	mov	r6, #1
   35884:	b	34e70 <flatcc_json_parser_struct_as_root@@Base+0x1a54>
   35888:	ldr	r6, [sp, #44]	; 0x2c
   3588c:	rsb	r0, r0, #2
   35890:	mov	r2, r4
   35894:	rsb	r5, r5, #2
   35898:	sub	r5, r5, r4
   3589c:	mov	r1, r6
   358a0:	add	r0, r6, r0
   358a4:	bl	1450c <memmove@plt>
   358a8:	mov	r1, #48	; 0x30
   358ac:	mov	r3, #46	; 0x2e
   358b0:	cmp	r5, #2
   358b4:	strb	r1, [r6]
   358b8:	strb	r3, [r6, #1]
   358bc:	ble	358f4 <flatcc_json_parser_struct_as_root@@Base+0x24d8>
   358c0:	sub	r2, r5, #2
   358c4:	add	r0, r6, #2
   358c8:	bl	1459c <memset@plt>
   358cc:	b	35280 <flatcc_json_parser_struct_as_root@@Base+0x1e64>
   358d0:	mov	r7, #1
   358d4:	ldr	lr, [sp, #44]	; 0x2c
   358d8:	b	35418 <flatcc_json_parser_struct_as_root@@Base+0x1ffc>
   358dc:	strd	sl, [sp, #8]
   358e0:	b	3519c <flatcc_json_parser_struct_as_root@@Base+0x1d80>
   358e4:	mov	r4, sl
   358e8:	mov	r5, fp
   358ec:	strd	r4, [sp, #144]	; 0x90
   358f0:	b	35558 <flatcc_json_parser_struct_as_root@@Base+0x213c>
   358f4:	mov	r5, #2
   358f8:	b	35280 <flatcc_json_parser_struct_as_root@@Base+0x1e64>
   358fc:	bl	34444 <flatcc_json_parser_struct_as_root@@Base+0x1028>
   35900:	movw	r1, #30892	; 0x78ac
   35904:	movt	r1, #4
   35908:	ldr	r3, [pc, #-2848]	; 34df0 <flatcc_json_parser_struct_as_root@@Base+0x19d4>
   3590c:	movw	r0, #30980	; 0x7904
   35910:	movt	r0, #4
   35914:	mov	r2, #189	; 0xbd
   35918:	bl	145f0 <__assert_fail@plt>
   3591c:	movw	r1, #30892	; 0x78ac
   35920:	movt	r1, #4
   35924:	ldr	r3, [pc, #-2872]	; 34df4 <flatcc_json_parser_struct_as_root@@Base+0x19d8>
   35928:	movw	r0, #31000	; 0x7918
   3592c:	movt	r0, #4
   35930:	mov	r2, #138	; 0x8a
   35934:	bl	145f0 <__assert_fail@plt>
   35938:	bl	3441c <flatcc_json_parser_struct_as_root@@Base+0x1000>

0003593c <flatcc_json_printer_error_string@@Base>:
   3593c:	cmp	r0, #3
   35940:	bhi	35958 <flatcc_json_printer_error_string@@Base+0x1c>
   35944:	movw	r3, #28992	; 0x7140
   35948:	movt	r3, #4
   3594c:	add	r3, r3, r0, lsl #2
   35950:	ldr	r0, [r3, #1716]	; 0x6b4
   35954:	bx	lr
   35958:	movw	r0, #24548	; 0x5fe4
   3595c:	movt	r0, #4
   35960:	bx	lr

00035964 <flatcc_json_printer_fmt_float@@Base>:
   35964:	vcvt.f64.f32	d0, s0
   35968:	b	34820 <flatcc_json_parser_struct_as_root@@Base+0x1404>

0003596c <flatcc_json_printer_fmt_double@@Base>:
   3596c:	b	34820 <flatcc_json_parser_struct_as_root@@Base+0x1404>

00035970 <flatcc_json_printer_fmt_bool@@Base>:
   35970:	cmp	r1, #0
   35974:	mov	r2, r0
   35978:	bne	3599c <flatcc_json_printer_fmt_bool@@Base+0x2c>
   3597c:	movw	r3, #10532	; 0x2924
   35980:	movt	r3, #4
   35984:	ldrb	r1, [r3, #4]
   35988:	mov	r0, #5
   3598c:	ldr	r3, [r3]
   35990:	str	r3, [r2]
   35994:	strb	r1, [r2, #4]
   35998:	bx	lr
   3599c:	movw	r3, #10524	; 0x291c
   359a0:	movt	r3, #4
   359a4:	ldr	r3, [r3]
   359a8:	mov	r0, #4
   359ac:	str	r3, [r2]
   359b0:	bx	lr

000359b4 <flatcc_json_printer_string@@Base>:
   359b4:	b	3446c <flatcc_json_parser_struct_as_root@@Base+0x1050>

000359b8 <flatcc_json_printer_write@@Base>:
   359b8:	strd	r4, [sp, #-16]!
   359bc:	ldr	ip, [r0, #16]
   359c0:	str	r6, [sp, #8]
   359c4:	str	lr, [sp, #12]
   359c8:	ldr	lr, [r0, #20]
   359cc:	add	r4, lr, r2
   359d0:	cmp	ip, r4
   359d4:	bhi	359ec <flatcc_json_printer_write@@Base+0x34>
   359d8:	ldrd	r4, [sp]
   359dc:	ldr	r6, [sp, #8]
   359e0:	ldr	lr, [sp, #12]
   359e4:	add	sp, sp, #16
   359e8:	b	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   359ec:	mov	r4, r0
   359f0:	mov	r0, lr
   359f4:	mov	r5, r2
   359f8:	bl	14524 <memcpy@plt>
   359fc:	ldr	ip, [r4, #20]
   35a00:	ldr	r6, [sp, #8]
   35a04:	add	ip, ip, r5
   35a08:	str	ip, [r4, #20]
   35a0c:	ldrd	r4, [sp]
   35a10:	add	sp, sp, #12
   35a14:	pop	{pc}		; (ldr pc, [sp], #4)

00035a18 <flatcc_json_printer_nl@@Base>:
   35a18:	ldr	r2, [r0, #20]
   35a1c:	mov	r1, #10
   35a20:	add	ip, r2, #1
   35a24:	str	ip, [r0, #20]
   35a28:	strb	r1, [r2]
   35a2c:	ldr	r2, [r0, #16]
   35a30:	ldr	r1, [r0, #20]
   35a34:	cmp	r1, r2
   35a38:	bcc	35a48 <flatcc_json_printer_nl@@Base+0x30>
   35a3c:	mov	r1, #0
   35a40:	ldr	r3, [r0, #44]	; 0x2c
   35a44:	bx	r3
   35a48:	bx	lr

00035a4c <flatcc_json_printer_char@@Base>:
   35a4c:	ldr	r3, [r0, #20]
   35a50:	add	r2, r3, #1
   35a54:	str	r2, [r0, #20]
   35a58:	strb	r1, [r3]
   35a5c:	bx	lr

00035a60 <flatcc_json_printer_indent@@Base>:
   35a60:	strd	r4, [sp, #-16]!
   35a64:	ldr	ip, [r0, #16]
   35a68:	ldr	r2, [r0, #20]
   35a6c:	ldr	r5, [r0, #32]
   35a70:	str	r6, [sp, #8]
   35a74:	str	lr, [sp, #12]
   35a78:	ldrb	r1, [r0, #25]
   35a7c:	mul	r5, r5, r1
   35a80:	add	r1, r2, r5
   35a84:	cmp	ip, r1
   35a88:	bcs	35aa4 <flatcc_json_printer_indent@@Base+0x44>
   35a8c:	mov	r1, r5
   35a90:	ldrd	r4, [sp]
   35a94:	ldr	r6, [sp, #8]
   35a98:	ldr	lr, [sp, #12]
   35a9c:	add	sp, sp, #16
   35aa0:	b	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   35aa4:	mov	r4, r0
   35aa8:	mov	r1, #32
   35aac:	mov	r0, r2
   35ab0:	mov	r2, r5
   35ab4:	bl	1459c <memset@plt>
   35ab8:	ldr	r3, [r4, #20]
   35abc:	ldr	r6, [sp, #8]
   35ac0:	add	r5, r3, r5
   35ac4:	str	r5, [r4, #20]
   35ac8:	ldrd	r4, [sp]
   35acc:	add	sp, sp, #12
   35ad0:	pop	{pc}		; (ldr pc, [sp], #4)

00035ad4 <flatcc_json_printer_add_level@@Base>:
   35ad4:	ldr	r3, [r0, #32]
   35ad8:	add	r1, r3, r1
   35adc:	str	r1, [r0, #32]
   35ae0:	bx	lr

00035ae4 <flatcc_json_printer_get_level@@Base>:
   35ae4:	ldr	r0, [r0, #32]
   35ae8:	bx	lr

00035aec <flatcc_json_printer_uint8@@Base>:
   35aec:	cmp	r1, #99	; 0x63
   35af0:	str	r4, [sp, #-8]!
   35af4:	str	lr, [sp, #4]
   35af8:	ldr	r2, [r0, #20]
   35afc:	bhi	35b34 <flatcc_json_printer_uint8@@Base+0x48>
   35b00:	cmp	r1, #9
   35b04:	bhi	35b84 <flatcc_json_printer_uint8@@Base+0x98>
   35b08:	add	r1, r1, #48	; 0x30
   35b0c:	mov	r3, #0
   35b10:	mov	lr, #1
   35b14:	strb	r1, [r2]
   35b18:	strb	r3, [r2, #1]
   35b1c:	ldr	r3, [r0, #20]
   35b20:	ldr	r4, [sp]
   35b24:	add	sp, sp, #4
   35b28:	add	r3, r3, lr
   35b2c:	str	r3, [r0, #20]
   35b30:	pop	{pc}		; (ldr pc, [sp], #4)
   35b34:	movw	ip, #34079	; 0x851f
   35b38:	movt	ip, #20971	; 0x51eb
   35b3c:	mov	r4, #100	; 0x64
   35b40:	mov	lr, #0
   35b44:	umull	r3, ip, ip, r1
   35b48:	movw	r3, #28992	; 0x7140
   35b4c:	movt	r3, #4
   35b50:	strb	lr, [r2, #3]
   35b54:	mov	lr, #3
   35b58:	lsr	ip, ip, #5
   35b5c:	mls	r1, r4, ip, r1
   35b60:	add	ip, ip, #48	; 0x30
   35b64:	uxtb	r1, r1
   35b68:	ldrb	r4, [r3, r1, lsl #1]
   35b6c:	add	r3, r3, r1, lsl #1
   35b70:	strb	r4, [r2, #1]
   35b74:	ldrb	r3, [r3, #1]
   35b78:	strb	ip, [r2]
   35b7c:	strb	r3, [r2, #2]
   35b80:	b	35b1c <flatcc_json_printer_uint8@@Base+0x30>
   35b84:	mov	ip, #0
   35b88:	sxth	r1, r1
   35b8c:	movw	r3, #28992	; 0x7140
   35b90:	movt	r3, #4
   35b94:	strb	ip, [r2, #2]
   35b98:	add	ip, r3, r1, lsl #1
   35b9c:	mov	lr, #2
   35ba0:	ldrb	r3, [r3, r1, lsl #1]
   35ba4:	strb	r3, [r2]
   35ba8:	ldrb	r3, [ip, #1]
   35bac:	strb	r3, [r2, #1]
   35bb0:	b	35b1c <flatcc_json_printer_uint8@@Base+0x30>

00035bb4 <flatcc_json_printer_uint16@@Base>:
   35bb4:	str	r4, [sp, #-8]!
   35bb8:	mov	r4, r0
   35bbc:	mov	r0, r1
   35bc0:	ldr	r1, [r4, #20]
   35bc4:	str	lr, [sp, #4]
   35bc8:	bl	334f0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   35bcc:	ldr	r3, [r4, #20]
   35bd0:	add	r0, r3, r0
   35bd4:	str	r0, [r4, #20]
   35bd8:	ldr	r4, [sp]
   35bdc:	add	sp, sp, #4
   35be0:	pop	{pc}		; (ldr pc, [sp], #4)

00035be4 <flatcc_json_printer_uint32@@Base>:
   35be4:	str	r4, [sp, #-8]!
   35be8:	mov	r4, r0
   35bec:	mov	r0, r1
   35bf0:	ldr	r1, [r4, #20]
   35bf4:	str	lr, [sp, #4]
   35bf8:	bl	33648 <flatcc_json_parser_struct_as_root@@Base+0x22c>
   35bfc:	ldr	r3, [r4, #20]
   35c00:	add	r0, r3, r0
   35c04:	str	r0, [r4, #20]
   35c08:	ldr	r4, [sp]
   35c0c:	add	sp, sp, #4
   35c10:	pop	{pc}		; (ldr pc, [sp], #4)

00035c14 <flatcc_json_printer_uint64@@Base>:
   35c14:	str	r4, [sp, #-8]!
   35c18:	mov	r4, r0
   35c1c:	mov	r1, r3
   35c20:	mov	r0, r2
   35c24:	ldr	r2, [r4, #20]
   35c28:	str	lr, [sp, #4]
   35c2c:	bl	3395c <flatcc_json_parser_struct_as_root@@Base+0x540>
   35c30:	ldr	r3, [r4, #20]
   35c34:	add	r0, r3, r0
   35c38:	str	r0, [r4, #20]
   35c3c:	ldr	r4, [sp]
   35c40:	add	sp, sp, #4
   35c44:	pop	{pc}		; (ldr pc, [sp], #4)

00035c48 <flatcc_json_printer_int8@@Base>:
   35c48:	cmp	r1, #0
   35c4c:	lsr	r2, r1, #31
   35c50:	uxtb	r1, r1
   35c54:	strd	r4, [sp, #-16]!
   35c58:	str	r6, [sp, #8]
   35c5c:	str	lr, [sp, #12]
   35c60:	ldr	r4, [r0, #20]
   35c64:	bge	35c80 <flatcc_json_printer_int8@@Base+0x38>
   35c68:	mov	ip, r4
   35c6c:	mov	r3, #45	; 0x2d
   35c70:	rsb	r1, r1, #0
   35c74:	uxtb	r1, r1
   35c78:	strb	r3, [ip], #1
   35c7c:	mov	r4, ip
   35c80:	cmp	r1, #99	; 0x63
   35c84:	bhi	35cc4 <flatcc_json_printer_int8@@Base+0x7c>
   35c88:	cmp	r1, #9
   35c8c:	bhi	35d14 <flatcc_json_printer_int8@@Base+0xcc>
   35c90:	add	r1, r1, #48	; 0x30
   35c94:	mov	lr, #0
   35c98:	mov	r5, #1
   35c9c:	strb	r1, [r4]
   35ca0:	strb	lr, [r4, #1]
   35ca4:	ldr	r3, [r0, #20]
   35ca8:	add	r2, r2, r5
   35cac:	ldrd	r4, [sp]
   35cb0:	ldr	r6, [sp, #8]
   35cb4:	add	sp, sp, #12
   35cb8:	add	r3, r3, r2
   35cbc:	str	r3, [r0, #20]
   35cc0:	pop	{pc}		; (ldr pc, [sp], #4)
   35cc4:	movw	ip, #34079	; 0x851f
   35cc8:	movt	ip, #20971	; 0x51eb
   35ccc:	mov	r3, #100	; 0x64
   35cd0:	mov	lr, #0
   35cd4:	umull	r5, ip, ip, r1
   35cd8:	mov	r6, #49	; 0x31
   35cdc:	mov	r5, #3
   35ce0:	strb	lr, [r4, #3]
   35ce4:	movw	lr, #28992	; 0x7140
   35ce8:	movt	lr, #4
   35cec:	lsr	ip, ip, #5
   35cf0:	mls	r1, r3, ip, r1
   35cf4:	uxtb	r1, r1
   35cf8:	ldrb	r3, [lr, r1, lsl #1]
   35cfc:	add	r1, lr, r1, lsl #1
   35d00:	strb	r3, [r4, #1]
   35d04:	ldrb	r3, [r1, #1]
   35d08:	strb	r6, [r4]
   35d0c:	strb	r3, [r4, #2]
   35d10:	b	35ca4 <flatcc_json_printer_int8@@Base+0x5c>
   35d14:	mov	r3, #0
   35d18:	sxth	r1, r1
   35d1c:	movw	lr, #28992	; 0x7140
   35d20:	movt	lr, #4
   35d24:	strb	r3, [r4, #2]
   35d28:	add	r3, lr, r1, lsl #1
   35d2c:	mov	r5, #2
   35d30:	ldrb	r1, [lr, r1, lsl #1]
   35d34:	strb	r1, [r4]
   35d38:	ldrb	r3, [r3, #1]
   35d3c:	strb	r3, [r4, #1]
   35d40:	b	35ca4 <flatcc_json_printer_int8@@Base+0x5c>

00035d44 <flatcc_json_printer_int16@@Base>:
   35d44:	cmp	r1, #0
   35d48:	strd	r4, [sp, #-16]!
   35d4c:	mov	r4, r0
   35d50:	lsr	r5, r1, #31
   35d54:	uxth	r0, r1
   35d58:	ldr	r1, [r4, #20]
   35d5c:	str	r6, [sp, #8]
   35d60:	str	lr, [sp, #12]
   35d64:	bge	35d78 <flatcc_json_printer_int16@@Base+0x34>
   35d68:	rsb	r0, r0, #0
   35d6c:	mov	r3, #45	; 0x2d
   35d70:	uxth	r0, r0
   35d74:	strb	r3, [r1], #1
   35d78:	bl	334f0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   35d7c:	ldr	r3, [r4, #20]
   35d80:	add	r0, r5, r0
   35d84:	ldr	r6, [sp, #8]
   35d88:	add	r3, r3, r0
   35d8c:	str	r3, [r4, #20]
   35d90:	ldrd	r4, [sp]
   35d94:	add	sp, sp, #12
   35d98:	pop	{pc}		; (ldr pc, [sp], #4)

00035d9c <flatcc_json_printer_int32@@Base>:
   35d9c:	cmp	r1, #0
   35da0:	mov	r3, r1
   35da4:	strd	r4, [sp, #-16]!
   35da8:	lsr	r5, r1, #31
   35dac:	mov	r4, r0
   35db0:	ldr	r1, [r0, #20]
   35db4:	str	r6, [sp, #8]
   35db8:	str	lr, [sp, #12]
   35dbc:	bge	35dcc <flatcc_json_printer_int32@@Base+0x30>
   35dc0:	mov	r2, #45	; 0x2d
   35dc4:	rsb	r3, r3, #0
   35dc8:	strb	r2, [r1], #1
   35dcc:	mov	r0, r3
   35dd0:	bl	33648 <flatcc_json_parser_struct_as_root@@Base+0x22c>
   35dd4:	ldr	r3, [r4, #20]
   35dd8:	add	r0, r5, r0
   35ddc:	ldr	r6, [sp, #8]
   35de0:	add	r3, r3, r0
   35de4:	str	r3, [r4, #20]
   35de8:	ldrd	r4, [sp]
   35dec:	add	sp, sp, #12
   35df0:	pop	{pc}		; (ldr pc, [sp], #4)

00035df4 <flatcc_json_printer_int64@@Base>:
   35df4:	cmp	r2, #0
   35df8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   35dfc:	mov	r5, r3
   35e00:	sbcs	r3, r3, #0
   35e04:	mov	r4, r2
   35e08:	ldr	r2, [r0, #20]
   35e0c:	strd	r6, [sp, #8]
   35e10:	mov	r6, r0
   35e14:	lsr	r7, r5, #31
   35e18:	str	r8, [sp, #16]
   35e1c:	str	lr, [sp, #20]
   35e20:	bge	35e34 <flatcc_json_printer_int64@@Base+0x40>
   35e24:	rsbs	r4, r4, #0
   35e28:	mov	r3, #45	; 0x2d
   35e2c:	rsc	r5, r5, #0
   35e30:	strb	r3, [r2], #1
   35e34:	mov	r0, r4
   35e38:	mov	r1, r5
   35e3c:	bl	3395c <flatcc_json_parser_struct_as_root@@Base+0x540>
   35e40:	ldr	r3, [r6, #20]
   35e44:	add	r0, r7, r0
   35e48:	ldrd	r4, [sp]
   35e4c:	ldr	r8, [sp, #16]
   35e50:	add	r3, r3, r0
   35e54:	str	r3, [r6, #20]
   35e58:	ldrd	r6, [sp, #8]
   35e5c:	add	sp, sp, #20
   35e60:	pop	{pc}		; (ldr pc, [sp], #4)

00035e64 <flatcc_json_printer_float@@Base>:
   35e64:	vcvt.f64.f32	d0, s0
   35e68:	str	r4, [sp, #-8]!
   35e6c:	mov	r4, r0
   35e70:	ldr	r0, [r0, #20]
   35e74:	str	lr, [sp, #4]
   35e78:	bl	34820 <flatcc_json_parser_struct_as_root@@Base+0x1404>
   35e7c:	ldr	r3, [r4, #20]
   35e80:	add	r0, r3, r0
   35e84:	str	r0, [r4, #20]
   35e88:	ldr	r4, [sp]
   35e8c:	add	sp, sp, #4
   35e90:	pop	{pc}		; (ldr pc, [sp], #4)

00035e94 <flatcc_json_printer_double@@Base>:
   35e94:	str	r4, [sp, #-8]!
   35e98:	mov	r4, r0
   35e9c:	ldr	r0, [r0, #20]
   35ea0:	str	lr, [sp, #4]
   35ea4:	bl	34820 <flatcc_json_parser_struct_as_root@@Base+0x1404>
   35ea8:	ldr	r3, [r4, #20]
   35eac:	add	r0, r3, r0
   35eb0:	str	r0, [r4, #20]
   35eb4:	ldr	r4, [sp]
   35eb8:	add	sp, sp, #4
   35ebc:	pop	{pc}		; (ldr pc, [sp], #4)

00035ec0 <flatcc_json_printer_enum@@Base>:
   35ec0:	ldr	r3, [r0, #20]
   35ec4:	mov	ip, #34	; 0x22
   35ec8:	strd	r4, [sp, #-16]!
   35ecc:	mov	r4, r0
   35ed0:	str	r6, [sp, #8]
   35ed4:	str	lr, [sp, #12]
   35ed8:	strb	ip, [r3]
   35edc:	ldrb	ip, [r0, #26]
   35ee0:	ldr	lr, [r0, #16]
   35ee4:	ldr	r3, [r0, #20]
   35ee8:	cmp	ip, #0
   35eec:	addeq	r3, r3, #1
   35ef0:	add	ip, r3, r2
   35ef4:	cmp	lr, ip
   35ef8:	str	r3, [r0, #20]
   35efc:	bls	35f44 <flatcc_json_printer_enum@@Base+0x84>
   35f00:	mov	r0, r3
   35f04:	mov	r5, r2
   35f08:	bl	14524 <memcpy@plt>
   35f0c:	ldr	r2, [r4, #20]
   35f10:	add	r2, r2, r5
   35f14:	str	r2, [r4, #20]
   35f18:	mov	r3, #34	; 0x22
   35f1c:	strb	r3, [r2]
   35f20:	ldrb	r2, [r4, #26]
   35f24:	ldr	r3, [r4, #20]
   35f28:	ldr	r6, [sp, #8]
   35f2c:	cmp	r2, #0
   35f30:	addeq	r3, r3, #1
   35f34:	str	r3, [r4, #20]
   35f38:	ldrd	r4, [sp]
   35f3c:	add	sp, sp, #12
   35f40:	pop	{pc}		; (ldr pc, [sp], #4)
   35f44:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   35f48:	ldr	r2, [r4, #20]
   35f4c:	b	35f18 <flatcc_json_printer_enum@@Base+0x58>

00035f50 <flatcc_json_printer_delimit_enum_flags@@Base>:
   35f50:	ldr	r3, [r0, #20]
   35f54:	mov	ip, #34	; 0x22
   35f58:	adds	r1, r1, #0
   35f5c:	movne	r1, #1
   35f60:	ldrb	r2, [r0, #26]
   35f64:	strb	ip, [r3]
   35f68:	ldr	r3, [r0, #20]
   35f6c:	cmp	r2, #0
   35f70:	moveq	r1, #1
   35f74:	add	r3, r3, r1
   35f78:	str	r3, [r0, #20]
   35f7c:	bx	lr

00035f80 <flatcc_json_printer_enum_flag@@Base>:
   35f80:	strd	r4, [sp, #-16]!
   35f84:	mov	r5, #32
   35f88:	mov	r4, r2
   35f8c:	str	r6, [sp, #8]
   35f90:	str	lr, [sp, #12]
   35f94:	ldr	lr, [r0, #20]
   35f98:	strb	r5, [lr]
   35f9c:	ldr	r5, [r0, #16]
   35fa0:	ldr	lr, [r0, #20]
   35fa4:	cmp	r1, #0
   35fa8:	addgt	lr, lr, #1
   35fac:	add	r2, lr, r3
   35fb0:	cmp	r5, r2
   35fb4:	str	lr, [r0, #20]
   35fb8:	bhi	35fd8 <flatcc_json_printer_enum_flag@@Base+0x58>
   35fbc:	mov	r1, r4
   35fc0:	mov	r2, r3
   35fc4:	ldrd	r4, [sp]
   35fc8:	ldr	r6, [sp, #8]
   35fcc:	ldr	lr, [sp, #12]
   35fd0:	add	sp, sp, #16
   35fd4:	b	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   35fd8:	mov	r1, r4
   35fdc:	mov	r2, r3
   35fe0:	mov	r4, r0
   35fe4:	mov	r0, lr
   35fe8:	mov	r5, r3
   35fec:	bl	14524 <memcpy@plt>
   35ff0:	ldr	r3, [r4, #20]
   35ff4:	ldr	r6, [sp, #8]
   35ff8:	add	r3, r3, r5
   35ffc:	str	r3, [r4, #20]
   36000:	ldrd	r4, [sp]
   36004:	add	sp, sp, #12
   36008:	pop	{pc}		; (ldr pc, [sp], #4)

0003600c <flatcc_json_printer_string_field@@Base>:
   3600c:	ldr	ip, [r1, #8]
   36010:	add	r2, r2, #2
   36014:	lsl	r2, r2, #1
   36018:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3601c:	strd	r6, [sp, #8]
   36020:	strd	r8, [sp, #16]
   36024:	str	sl, [sp, #24]
   36028:	cmp	r2, ip
   3602c:	str	lr, [sp, #28]
   36030:	ldr	r7, [sp, #32]
   36034:	bge	36160 <flatcc_json_printer_string_field@@Base+0x154>
   36038:	ldr	ip, [r1, #4]
   3603c:	ldrh	r5, [ip, r2]
   36040:	cmp	r5, #0
   36044:	beq	36160 <flatcc_json_printer_string_field@@Base+0x154>
   36048:	ldr	r6, [r1]
   3604c:	adds	r8, r6, r5
   36050:	beq	36160 <flatcc_json_printer_string_field@@Base+0x154>
   36054:	ldr	ip, [r1, #16]
   36058:	ldr	r2, [r0, #20]
   3605c:	cmp	ip, #0
   36060:	add	ip, ip, #1
   36064:	str	ip, [r1, #16]
   36068:	beq	36080 <flatcc_json_printer_string_field@@Base+0x74>
   3606c:	add	ip, r2, #1
   36070:	mov	r1, #44	; 0x2c
   36074:	str	ip, [r0, #20]
   36078:	strb	r1, [r2]
   3607c:	ldr	r2, [r0, #20]
   36080:	mov	r9, r3
   36084:	mov	r4, r0
   36088:	ldrb	r1, [r0, #25]
   3608c:	cmp	r1, #0
   36090:	bne	361a0 <flatcc_json_printer_string_field@@Base+0x194>
   36094:	ldr	r3, [r0, #16]
   36098:	cmp	r3, r2
   3609c:	bls	36190 <flatcc_json_printer_string_field@@Base+0x184>
   360a0:	mov	r3, #34	; 0x22
   360a4:	strb	r3, [r2]
   360a8:	ldrb	r3, [r4, #26]
   360ac:	ldr	r2, [r4, #16]
   360b0:	ldr	r0, [r4, #20]
   360b4:	cmp	r3, #0
   360b8:	addeq	r0, r0, #1
   360bc:	add	r3, r0, r7
   360c0:	cmp	r2, r3
   360c4:	str	r0, [r4, #20]
   360c8:	bls	36178 <flatcc_json_printer_string_field@@Base+0x16c>
   360cc:	mov	r2, r7
   360d0:	mov	r1, r9
   360d4:	bl	14524 <memcpy@plt>
   360d8:	ldr	r3, [r4, #20]
   360dc:	add	r7, r3, r7
   360e0:	str	r7, [r4, #20]
   360e4:	mov	r3, #34	; 0x22
   360e8:	mov	lr, #58	; 0x3a
   360ec:	mov	ip, #32
   360f0:	mov	r0, r4
   360f4:	strb	r3, [r7]
   360f8:	ldrb	r3, [r4, #26]
   360fc:	ldr	r1, [r4, #20]
   36100:	clz	r3, r3
   36104:	lsr	r3, r3, #5
   36108:	add	r2, r1, r3
   3610c:	add	r2, r2, #1
   36110:	str	r2, [r4, #20]
   36114:	strb	lr, [r1, r3]
   36118:	ldr	r3, [r4, #20]
   3611c:	strb	ip, [r3]
   36120:	ldrb	r1, [r4, #25]
   36124:	ldr	r3, [r4, #20]
   36128:	ldr	r2, [r6, r5]
   3612c:	ldrd	r6, [sp, #8]
   36130:	cmp	r1, #0
   36134:	addne	r3, r3, #1
   36138:	ldr	sl, [sp, #24]
   3613c:	add	r1, r8, r2
   36140:	add	r1, r1, #4
   36144:	ldr	r2, [r8, r2]
   36148:	ldrd	r8, [sp, #16]
   3614c:	ldr	lr, [sp, #28]
   36150:	str	r3, [r4, #20]
   36154:	ldrd	r4, [sp]
   36158:	add	sp, sp, #32
   3615c:	b	3446c <flatcc_json_parser_struct_as_root@@Base+0x1050>
   36160:	ldrd	r4, [sp]
   36164:	ldrd	r6, [sp, #8]
   36168:	ldrd	r8, [sp, #16]
   3616c:	ldr	sl, [sp, #24]
   36170:	add	sp, sp, #28
   36174:	pop	{pc}		; (ldr pc, [sp], #4)
   36178:	mov	r2, r7
   3617c:	mov	r1, r9
   36180:	mov	r0, r4
   36184:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   36188:	ldr	r7, [r4, #20]
   3618c:	b	360e4 <flatcc_json_printer_string_field@@Base+0xd8>
   36190:	ldr	r3, [r0, #44]	; 0x2c
   36194:	blx	r3
   36198:	ldr	r2, [r4, #20]
   3619c:	b	360a0 <flatcc_json_printer_string_field@@Base+0x94>
   361a0:	add	r1, r2, #1
   361a4:	mov	r3, #10
   361a8:	str	r1, [r0, #20]
   361ac:	strb	r3, [r2]
   361b0:	ldrb	r3, [r0, #25]
   361b4:	ldr	r2, [r4, #32]
   361b8:	ldr	r1, [r0, #16]
   361bc:	ldr	r0, [r0, #20]
   361c0:	mul	sl, r2, r3
   361c4:	add	r3, r0, sl
   361c8:	cmp	r1, r3
   361cc:	bcs	361e4 <flatcc_json_printer_string_field@@Base+0x1d8>
   361d0:	mov	r1, sl
   361d4:	mov	r0, r4
   361d8:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   361dc:	ldr	r2, [r4, #20]
   361e0:	b	360a0 <flatcc_json_printer_string_field@@Base+0x94>
   361e4:	mov	r2, sl
   361e8:	mov	r1, #32
   361ec:	bl	1459c <memset@plt>
   361f0:	ldr	r2, [r4, #20]
   361f4:	add	r2, r2, sl
   361f8:	str	r2, [r4, #20]
   361fc:	b	360a0 <flatcc_json_printer_string_field@@Base+0x94>

00036200 <flatcc_json_printer_uint8_vector_base64_field@@Base>:
   36200:	ldr	ip, [r1, #8]
   36204:	add	r2, r2, #2
   36208:	lsl	r2, r2, #1
   3620c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   36210:	strd	r6, [sp, #8]
   36214:	strd	r8, [sp, #16]
   36218:	strd	sl, [sp, #24]
   3621c:	cmp	r2, ip
   36220:	str	lr, [sp, #32]
   36224:	sub	sp, sp, #4
   36228:	ldr	r5, [sp, #40]	; 0x28
   3622c:	bge	36638 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x438>
   36230:	ldr	ip, [r1, #4]
   36234:	ldrh	r7, [ip, r2]
   36238:	cmp	r7, #0
   3623c:	beq	36638 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x438>
   36240:	ldr	r6, [r1]
   36244:	adds	r8, r6, r7
   36248:	beq	36638 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x438>
   3624c:	ldr	ip, [r1, #16]
   36250:	ldr	r2, [r0, #20]
   36254:	cmp	ip, #0
   36258:	add	ip, ip, #1
   3625c:	str	ip, [r1, #16]
   36260:	beq	36278 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x78>
   36264:	add	ip, r2, #1
   36268:	mov	r1, #44	; 0x2c
   3626c:	str	ip, [r0, #20]
   36270:	strb	r1, [r2]
   36274:	ldr	r2, [r0, #20]
   36278:	mov	r9, r3
   3627c:	mov	r4, r0
   36280:	ldrb	r1, [r0, #25]
   36284:	cmp	r1, #0
   36288:	bne	36654 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x454>
   3628c:	ldr	r3, [r0, #16]
   36290:	cmp	r2, r3
   36294:	bcc	362a4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xa4>
   36298:	ldr	r3, [r0, #44]	; 0x2c
   3629c:	blx	r3
   362a0:	ldr	r2, [r4, #20]
   362a4:	mov	r3, #34	; 0x22
   362a8:	strb	r3, [r2]
   362ac:	ldrb	r3, [r4, #26]
   362b0:	ldr	r2, [r4, #16]
   362b4:	ldr	r0, [r4, #20]
   362b8:	cmp	r3, #0
   362bc:	addeq	r0, r0, #1
   362c0:	add	r3, r0, r5
   362c4:	cmp	r2, r3
   362c8:	str	r0, [r4, #20]
   362cc:	bls	366c8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x4c8>
   362d0:	mov	r2, r5
   362d4:	mov	r1, r9
   362d8:	bl	14524 <memcpy@plt>
   362dc:	ldr	r3, [r4, #20]
   362e0:	add	r5, r3, r5
   362e4:	str	r5, [r4, #20]
   362e8:	mov	r1, #34	; 0x22
   362ec:	mov	lr, #58	; 0x3a
   362f0:	movw	r2, #43691	; 0xaaab
   362f4:	movt	r2, #43690	; 0xaaaa
   362f8:	strb	r1, [r5]
   362fc:	mov	r5, #32
   36300:	ldrb	r3, [r4, #26]
   36304:	ldr	ip, [r4, #20]
   36308:	clz	r3, r3
   3630c:	lsr	r3, r3, #5
   36310:	add	r0, ip, r3
   36314:	add	r0, r0, #1
   36318:	str	r0, [r4, #20]
   3631c:	strb	lr, [ip, r3]
   36320:	ldr	r3, [r4, #20]
   36324:	strb	r5, [r3]
   36328:	ldr	r0, [r6, r7]
   3632c:	ldrb	r3, [r4, #25]
   36330:	ldr	ip, [r4, #20]
   36334:	add	r7, r8, r0
   36338:	ldr	r6, [r8, r0]
   3633c:	add	r7, r7, #4
   36340:	adds	r3, r3, #0
   36344:	movne	r3, #1
   36348:	add	r0, ip, r3
   3634c:	add	r0, r0, #1
   36350:	lsl	r9, r6, #2
   36354:	str	r0, [r4, #20]
   36358:	strb	r1, [ip, r3]
   3635c:	umull	r3, r9, r2, r9
   36360:	ldr	r3, [r4, #16]
   36364:	ldr	r2, [r4, #20]
   36368:	lsr	r9, r9, #1
   3636c:	add	r9, r9, #3
   36370:	bic	r9, r9, #3
   36374:	add	r1, r2, r9
   36378:	cmp	r1, r3
   3637c:	bcc	3639c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x19c>
   36380:	mov	r1, #0
   36384:	mov	r0, r4
   36388:	ldr	r3, [r4, #44]	; 0x2c
   3638c:	blx	r3
   36390:	ldr	r3, [r4, #16]
   36394:	ldr	r2, [r4, #20]
   36398:	add	r1, r2, r9
   3639c:	cmp	r3, r1
   363a0:	bcs	36530 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x330>
   363a4:	sub	r3, r3, r2
   363a8:	bic	r3, r3, #3
   363ac:	add	ip, r3, r3, lsl #1
   363b0:	cmp	ip, #3
   363b4:	lsr	ip, ip, #2
   363b8:	bls	36514 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x314>
   363bc:	ldr	r0, [sp, #44]	; 0x2c
   363c0:	movw	r1, #31048	; 0x7948
   363c4:	movt	r1, #4
   363c8:	movw	r5, #31116	; 0x798c
   363cc:	movt	r5, #4
   363d0:	movw	r8, #43691	; 0xaaab
   363d4:	movt	r8, #43690	; 0xaaaa
   363d8:	cmp	r0, #0
   363dc:	moveq	r5, r1
   363e0:	cmp	ip, #2
   363e4:	bls	366bc <flatcc_json_printer_uint8_vector_base64_field@@Base+0x4bc>
   363e8:	add	lr, r2, #4
   363ec:	add	r1, r7, #3
   363f0:	mov	sl, ip
   363f4:	ldrb	r9, [r1, #-3]
   363f8:	sub	sl, sl, #3
   363fc:	mov	r0, r1
   36400:	cmp	sl, #2
   36404:	mov	r2, lr
   36408:	add	r1, r1, #3
   3640c:	add	lr, lr, #4
   36410:	ldrb	r9, [r5, r9, lsr #2]
   36414:	strb	r9, [lr, #-8]
   36418:	ldrb	r9, [r1, #-6]
   3641c:	ldrb	fp, [r1, #-5]
   36420:	lsl	r9, r9, #4
   36424:	and	r9, r9, #48	; 0x30
   36428:	orr	r9, r9, fp, lsr #4
   3642c:	ldrb	r9, [r5, r9]
   36430:	strb	r9, [lr, #-7]
   36434:	ldrb	r9, [r1, #-5]
   36438:	ldrb	fp, [r1, #-4]
   3643c:	lsl	r9, r9, #2
   36440:	and	r9, r9, #60	; 0x3c
   36444:	orr	r9, r9, fp, lsr #6
   36448:	ldrb	r9, [r5, r9]
   3644c:	strb	r9, [lr, #-6]
   36450:	ldrb	r9, [r1, #-4]
   36454:	and	r9, r9, #63	; 0x3f
   36458:	ldrb	r9, [r5, r9]
   3645c:	strb	r9, [lr, #-5]
   36460:	bhi	363f4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1f4>
   36464:	cmp	sl, #1
   36468:	beq	36698 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x498>
   3646c:	cmp	sl, #2
   36470:	bne	364b0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2b0>
   36474:	ldrb	r1, [r0]
   36478:	ldrb	r1, [r5, r1, lsr #2]
   3647c:	strb	r1, [r2]
   36480:	ldrb	r1, [r0]
   36484:	ldrb	lr, [r0, #1]
   36488:	lsl	r1, r1, #4
   3648c:	and	r1, r1, #48	; 0x30
   36490:	orr	r1, r1, lr, lsr #4
   36494:	ldrb	r1, [r5, r1]
   36498:	strb	r1, [r2, #1]
   3649c:	ldrb	r1, [r0, #1]
   364a0:	lsl	r1, r1, #2
   364a4:	and	r1, r1, #60	; 0x3c
   364a8:	ldrb	r1, [r5, r1]
   364ac:	strb	r1, [r2, #2]
   364b0:	ldr	r2, [r4, #20]
   364b4:	mov	r1, #0
   364b8:	sub	r6, r6, ip
   364bc:	mov	r0, r4
   364c0:	add	r7, r7, ip
   364c4:	ldr	r9, [r4, #44]	; 0x2c
   364c8:	add	r3, r2, r3
   364cc:	str	r3, [r4, #20]
   364d0:	blx	r9
   364d4:	lsl	r9, r6, #2
   364d8:	ldr	r3, [r4, #16]
   364dc:	ldr	r2, [r4, #20]
   364e0:	umull	r1, r9, r8, r9
   364e4:	lsr	r9, r9, #1
   364e8:	add	r9, r9, #3
   364ec:	bic	r9, r9, #3
   364f0:	add	r1, r2, r9
   364f4:	cmp	r3, r1
   364f8:	bcs	36530 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x330>
   364fc:	sub	r3, r3, r2
   36500:	bic	r3, r3, #3
   36504:	add	ip, r3, r3, lsl #1
   36508:	cmp	ip, #3
   3650c:	lsr	ip, ip, #2
   36510:	bhi	363e0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1e0>
   36514:	movw	r1, #31184	; 0x79d0
   36518:	movt	r1, #4
   3651c:	ldr	r3, [pc, #520]	; 3672c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x52c>
   36520:	movw	r0, #31260	; 0x7a1c
   36524:	movt	r0, #4
   36528:	movw	r2, #277	; 0x115
   3652c:	bl	145f0 <__assert_fail@plt>
   36530:	ldr	r0, [sp, #44]	; 0x2c
   36534:	movw	r3, #31116	; 0x798c
   36538:	movt	r3, #4
   3653c:	movw	r1, #31048	; 0x7948
   36540:	movt	r1, #4
   36544:	cmp	r0, #0
   36548:	movne	r1, r3
   3654c:	cmp	r6, #2
   36550:	bls	365cc <flatcc_json_printer_uint8_vector_base64_field@@Base+0x3cc>
   36554:	add	ip, r2, #4
   36558:	add	r3, r7, #3
   3655c:	ldrb	r0, [r3, #-3]
   36560:	sub	r6, r6, #3
   36564:	mov	r7, r3
   36568:	cmp	r6, #2
   3656c:	mov	r2, ip
   36570:	add	r3, r3, #3
   36574:	add	ip, ip, #4
   36578:	ldrb	r0, [r1, r0, lsr #2]
   3657c:	strb	r0, [ip, #-8]
   36580:	ldrb	r0, [r3, #-6]
   36584:	ldrb	lr, [r3, #-5]
   36588:	lsl	r0, r0, #4
   3658c:	and	r0, r0, #48	; 0x30
   36590:	orr	r0, r0, lr, lsr #4
   36594:	ldrb	r0, [r1, r0]
   36598:	strb	r0, [ip, #-7]
   3659c:	ldrb	r0, [r3, #-5]
   365a0:	ldrb	lr, [r3, #-4]
   365a4:	lsl	r0, r0, #2
   365a8:	and	r0, r0, #60	; 0x3c
   365ac:	orr	r0, r0, lr, lsr #6
   365b0:	ldrb	r0, [r1, r0]
   365b4:	strb	r0, [ip, #-6]
   365b8:	ldrb	r0, [r3, #-4]
   365bc:	and	r0, r0, #63	; 0x3f
   365c0:	ldrb	r0, [r1, r0]
   365c4:	strb	r0, [ip, #-5]
   365c8:	bhi	3655c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x35c>
   365cc:	cmp	r6, #1
   365d0:	beq	366fc <flatcc_json_printer_uint8_vector_base64_field@@Base+0x4fc>
   365d4:	cmp	r6, #2
   365d8:	bne	36620 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x420>
   365dc:	ldrb	r3, [r7]
   365e0:	mov	r0, #61	; 0x3d
   365e4:	ldrb	r3, [r1, r3, lsr #2]
   365e8:	strb	r3, [r2]
   365ec:	ldrb	r3, [r7]
   365f0:	ldrb	ip, [r7, #1]
   365f4:	lsl	r3, r3, #4
   365f8:	and	r3, r3, #48	; 0x30
   365fc:	orr	r3, r3, ip, lsr #4
   36600:	ldrb	r3, [r1, r3]
   36604:	strb	r3, [r2, #1]
   36608:	ldrb	r3, [r7, #1]
   3660c:	lsl	r3, r3, #2
   36610:	and	r3, r3, #60	; 0x3c
   36614:	ldrb	r3, [r1, r3]
   36618:	strb	r3, [r2, #2]
   3661c:	strb	r0, [r2, #3]
   36620:	ldr	r2, [r4, #20]
   36624:	mov	r1, #34	; 0x22
   36628:	add	r3, r2, r9
   3662c:	add	r3, r3, #1
   36630:	str	r3, [r4, #20]
   36634:	strb	r1, [r2, r9]
   36638:	add	sp, sp, #4
   3663c:	ldrd	r4, [sp]
   36640:	ldrd	r6, [sp, #8]
   36644:	ldrd	r8, [sp, #16]
   36648:	ldrd	sl, [sp, #24]
   3664c:	add	sp, sp, #32
   36650:	pop	{pc}		; (ldr pc, [sp], #4)
   36654:	add	r1, r2, #1
   36658:	mov	r3, #10
   3665c:	str	r1, [r0, #20]
   36660:	strb	r3, [r2]
   36664:	ldrb	r3, [r0, #25]
   36668:	ldr	r2, [r4, #32]
   3666c:	ldr	r1, [r0, #16]
   36670:	ldr	r0, [r0, #20]
   36674:	mul	sl, r2, r3
   36678:	add	r3, r0, sl
   3667c:	cmp	r1, r3
   36680:	bcs	366e0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x4e0>
   36684:	mov	r1, sl
   36688:	mov	r0, r4
   3668c:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   36690:	ldr	r2, [r4, #20]
   36694:	b	362a4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xa4>
   36698:	ldrb	r1, [r0]
   3669c:	ldrb	r1, [r5, r1, lsr #2]
   366a0:	strb	r1, [r2]
   366a4:	ldrb	r1, [r0]
   366a8:	lsl	r1, r1, #4
   366ac:	and	r1, r1, #48	; 0x30
   366b0:	ldrb	r1, [r5, r1]
   366b4:	strb	r1, [r2, #1]
   366b8:	b	364b0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2b0>
   366bc:	mov	sl, ip
   366c0:	mov	r0, r7
   366c4:	b	36464 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x264>
   366c8:	mov	r2, r5
   366cc:	mov	r1, r9
   366d0:	mov	r0, r4
   366d4:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   366d8:	ldr	r5, [r4, #20]
   366dc:	b	362e8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xe8>
   366e0:	mov	r2, sl
   366e4:	mov	r1, #32
   366e8:	bl	1459c <memset@plt>
   366ec:	ldr	r2, [r4, #20]
   366f0:	add	r2, r2, sl
   366f4:	str	r2, [r4, #20]
   366f8:	b	362a4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xa4>
   366fc:	ldrb	r3, [r7]
   36700:	mov	r0, #61	; 0x3d
   36704:	ldrb	r3, [r1, r3, lsr #2]
   36708:	strb	r3, [r2]
   3670c:	ldrb	r3, [r7]
   36710:	lsl	r3, r3, #4
   36714:	and	r3, r3, #48	; 0x30
   36718:	ldrb	r3, [r1, r3]
   3671c:	strb	r3, [r2, #1]
   36720:	strb	r0, [r2, #2]
   36724:	strb	r0, [r2, #3]
   36728:	b	36620 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x420>
   3672c:	andeq	r7, r4, r4, lsl #16

00036730 <flatcc_json_printer_uint8_field@@Base>:
   36730:	ldr	ip, [r1, #8]
   36734:	add	r2, r2, #2
   36738:	lsl	r2, r2, #1
   3673c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36740:	strd	r6, [sp, #8]
   36744:	str	r8, [sp, #16]
   36748:	str	lr, [sp, #20]
   3674c:	cmp	r2, ip
   36750:	ldrb	lr, [sp, #28]
   36754:	ldr	r6, [sp, #24]
   36758:	bge	368b4 <flatcc_json_printer_uint8_field@@Base+0x184>
   3675c:	ldr	ip, [r1, #4]
   36760:	ldrh	r2, [ip, r2]
   36764:	cmp	r2, #0
   36768:	beq	368b4 <flatcc_json_printer_uint8_field@@Base+0x184>
   3676c:	ldr	ip, [r1]
   36770:	cmn	ip, r2
   36774:	beq	368b4 <flatcc_json_printer_uint8_field@@Base+0x184>
   36778:	ldrb	r5, [ip, r2]
   3677c:	cmp	lr, r5
   36780:	beq	36990 <flatcc_json_printer_uint8_field@@Base+0x260>
   36784:	ldr	ip, [r1, #16]
   36788:	ldr	r2, [r0, #20]
   3678c:	cmp	ip, #0
   36790:	add	ip, ip, #1
   36794:	str	ip, [r1, #16]
   36798:	beq	367b0 <flatcc_json_printer_uint8_field@@Base+0x80>
   3679c:	add	ip, r2, #1
   367a0:	mov	r1, #44	; 0x2c
   367a4:	str	ip, [r0, #20]
   367a8:	strb	r1, [r2]
   367ac:	ldr	r2, [r0, #20]
   367b0:	mov	r7, r3
   367b4:	mov	r4, r0
   367b8:	ldrb	r1, [r0, #25]
   367bc:	cmp	r1, #0
   367c0:	bne	368e0 <flatcc_json_printer_uint8_field@@Base+0x1b0>
   367c4:	ldr	r3, [r0, #16]
   367c8:	cmp	r3, r2
   367cc:	bhi	367dc <flatcc_json_printer_uint8_field@@Base+0xac>
   367d0:	ldr	r3, [r0, #44]	; 0x2c
   367d4:	blx	r3
   367d8:	ldr	r2, [r4, #20]
   367dc:	mov	r3, #34	; 0x22
   367e0:	strb	r3, [r2]
   367e4:	ldrb	r3, [r4, #26]
   367e8:	ldr	r2, [r4, #16]
   367ec:	ldr	r0, [r4, #20]
   367f0:	cmp	r3, #0
   367f4:	addeq	r0, r0, #1
   367f8:	add	r3, r0, r6
   367fc:	cmp	r2, r3
   36800:	str	r0, [r4, #20]
   36804:	bls	368c8 <flatcc_json_printer_uint8_field@@Base+0x198>
   36808:	mov	r2, r6
   3680c:	mov	r1, r7
   36810:	bl	14524 <memcpy@plt>
   36814:	ldr	r3, [r4, #20]
   36818:	add	r6, r3, r6
   3681c:	str	r6, [r4, #20]
   36820:	mov	r3, #34	; 0x22
   36824:	mov	ip, #58	; 0x3a
   36828:	mov	r0, #32
   3682c:	strb	r3, [r6]
   36830:	ldrb	r3, [r4, #26]
   36834:	ldr	r1, [r4, #20]
   36838:	clz	r3, r3
   3683c:	lsr	r3, r3, #5
   36840:	add	r2, r1, r3
   36844:	add	r2, r2, #1
   36848:	str	r2, [r4, #20]
   3684c:	strb	ip, [r1, r3]
   36850:	ldr	r3, [r4, #20]
   36854:	strb	r0, [r3]
   36858:	ldrb	r3, [r4, #25]
   3685c:	ldr	r0, [r4, #20]
   36860:	adds	r3, r3, #0
   36864:	movne	r3, #1
   36868:	cmp	r5, #99	; 0x63
   3686c:	add	r1, r0, r3
   36870:	str	r1, [r4, #20]
   36874:	bhi	36940 <flatcc_json_printer_uint8_field@@Base+0x210>
   36878:	cmp	r5, #9
   3687c:	bhi	369a0 <flatcc_json_printer_uint8_field@@Base+0x270>
   36880:	add	r5, r5, #48	; 0x30
   36884:	mov	r2, #0
   36888:	mov	ip, #1
   3688c:	strb	r2, [r1, #1]
   36890:	strb	r5, [r0, r3]
   36894:	ldr	r3, [r4, #20]
   36898:	add	r3, r3, ip
   3689c:	str	r3, [r4, #20]
   368a0:	ldrd	r4, [sp]
   368a4:	ldrd	r6, [sp, #8]
   368a8:	ldr	r8, [sp, #16]
   368ac:	add	sp, sp, #20
   368b0:	pop	{pc}		; (ldr pc, [sp], #4)
   368b4:	ldrb	r2, [r0, #29]
   368b8:	cmp	r2, #0
   368bc:	beq	368a0 <flatcc_json_printer_uint8_field@@Base+0x170>
   368c0:	mov	r5, lr
   368c4:	b	36784 <flatcc_json_printer_uint8_field@@Base+0x54>
   368c8:	mov	r2, r6
   368cc:	mov	r1, r7
   368d0:	mov	r0, r4
   368d4:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   368d8:	ldr	r6, [r4, #20]
   368dc:	b	36820 <flatcc_json_printer_uint8_field@@Base+0xf0>
   368e0:	add	r1, r2, #1
   368e4:	mov	r3, #10
   368e8:	str	r1, [r0, #20]
   368ec:	strb	r3, [r2]
   368f0:	ldrb	r8, [r0, #25]
   368f4:	ldr	r2, [r4, #32]
   368f8:	ldr	r1, [r0, #16]
   368fc:	ldr	r0, [r0, #20]
   36900:	mul	r8, r2, r8
   36904:	add	r3, r0, r8
   36908:	cmp	r1, r3
   3690c:	bcs	36924 <flatcc_json_printer_uint8_field@@Base+0x1f4>
   36910:	mov	r1, r8
   36914:	mov	r0, r4
   36918:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3691c:	ldr	r2, [r4, #20]
   36920:	b	367dc <flatcc_json_printer_uint8_field@@Base+0xac>
   36924:	mov	r2, r8
   36928:	mov	r1, #32
   3692c:	bl	1459c <memset@plt>
   36930:	ldr	r2, [r4, #20]
   36934:	add	r2, r2, r8
   36938:	str	r2, [r4, #20]
   3693c:	b	367dc <flatcc_json_printer_uint8_field@@Base+0xac>
   36940:	movw	r2, #34079	; 0x851f
   36944:	movt	r2, #20971	; 0x51eb
   36948:	mov	r6, #100	; 0x64
   3694c:	mov	ip, #0
   36950:	umull	lr, r2, r2, r5
   36954:	movw	lr, #28992	; 0x7140
   36958:	movt	lr, #4
   3695c:	strb	ip, [r1, #3]
   36960:	mov	ip, #3
   36964:	lsr	r2, r2, #5
   36968:	mls	r5, r6, r2, r5
   3696c:	add	r2, r2, #48	; 0x30
   36970:	uxtb	r5, r5
   36974:	ldrb	r6, [lr, r5, lsl #1]
   36978:	add	lr, lr, r5, lsl #1
   3697c:	strb	r6, [r1, #1]
   36980:	ldrb	lr, [lr, #1]
   36984:	strb	lr, [r1, #2]
   36988:	strb	r2, [r0, r3]
   3698c:	b	36894 <flatcc_json_printer_uint8_field@@Base+0x164>
   36990:	ldrb	r2, [r0, #28]
   36994:	cmp	r2, #0
   36998:	beq	36784 <flatcc_json_printer_uint8_field@@Base+0x54>
   3699c:	b	368a0 <flatcc_json_printer_uint8_field@@Base+0x170>
   369a0:	mov	ip, #0
   369a4:	sxth	r5, r5
   369a8:	movw	r2, #28992	; 0x7140
   369ac:	movt	r2, #4
   369b0:	add	lr, r2, r5, lsl #1
   369b4:	strb	ip, [r1, #2]
   369b8:	mov	ip, #2
   369bc:	ldrb	r2, [r2, r5, lsl #1]
   369c0:	strb	r2, [r0, r3]
   369c4:	ldrb	r3, [lr, #1]
   369c8:	strb	r3, [r1, #1]
   369cc:	b	36894 <flatcc_json_printer_uint8_field@@Base+0x164>

000369d0 <flatcc_json_printer_uint16_field@@Base>:
   369d0:	ldr	ip, [r1, #8]
   369d4:	add	r2, r2, #2
   369d8:	lsl	r2, r2, #1
   369dc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   369e0:	strd	r6, [sp, #8]
   369e4:	str	r8, [sp, #16]
   369e8:	str	lr, [sp, #20]
   369ec:	cmp	r2, ip
   369f0:	ldrh	lr, [sp, #28]
   369f4:	ldr	r5, [sp, #24]
   369f8:	bge	36b38 <flatcc_json_printer_uint16_field@@Base+0x168>
   369fc:	ldr	ip, [r1, #4]
   36a00:	ldrh	r2, [ip, r2]
   36a04:	cmp	r2, #0
   36a08:	beq	36b38 <flatcc_json_printer_uint16_field@@Base+0x168>
   36a0c:	ldr	ip, [r1]
   36a10:	cmn	ip, r2
   36a14:	beq	36b38 <flatcc_json_printer_uint16_field@@Base+0x168>
   36a18:	ldrh	r6, [ip, r2]
   36a1c:	cmp	lr, r6
   36a20:	beq	36bc4 <flatcc_json_printer_uint16_field@@Base+0x1f4>
   36a24:	ldr	ip, [r1, #16]
   36a28:	ldr	r2, [r0, #20]
   36a2c:	cmp	ip, #0
   36a30:	add	ip, ip, #1
   36a34:	str	ip, [r1, #16]
   36a38:	beq	36a50 <flatcc_json_printer_uint16_field@@Base+0x80>
   36a3c:	add	ip, r2, #1
   36a40:	mov	r1, #44	; 0x2c
   36a44:	str	ip, [r0, #20]
   36a48:	strb	r1, [r2]
   36a4c:	ldr	r2, [r0, #20]
   36a50:	mov	r7, r3
   36a54:	mov	r4, r0
   36a58:	ldrb	r1, [r0, #25]
   36a5c:	cmp	r1, #0
   36a60:	bne	36b64 <flatcc_json_printer_uint16_field@@Base+0x194>
   36a64:	ldr	r3, [r0, #16]
   36a68:	cmp	r3, r2
   36a6c:	bhi	36a7c <flatcc_json_printer_uint16_field@@Base+0xac>
   36a70:	ldr	r3, [r0, #44]	; 0x2c
   36a74:	blx	r3
   36a78:	ldr	r2, [r4, #20]
   36a7c:	mov	r3, #34	; 0x22
   36a80:	strb	r3, [r2]
   36a84:	ldrb	r3, [r4, #26]
   36a88:	ldr	r2, [r4, #16]
   36a8c:	ldr	r0, [r4, #20]
   36a90:	cmp	r3, #0
   36a94:	addeq	r0, r0, #1
   36a98:	add	r3, r0, r5
   36a9c:	cmp	r2, r3
   36aa0:	str	r0, [r4, #20]
   36aa4:	bls	36b4c <flatcc_json_printer_uint16_field@@Base+0x17c>
   36aa8:	mov	r2, r5
   36aac:	mov	r1, r7
   36ab0:	bl	14524 <memcpy@plt>
   36ab4:	ldr	r3, [r4, #20]
   36ab8:	add	r5, r3, r5
   36abc:	str	r5, [r4, #20]
   36ac0:	mov	r3, #34	; 0x22
   36ac4:	mov	lr, #58	; 0x3a
   36ac8:	mov	ip, #32
   36acc:	mov	r0, r6
   36ad0:	strb	r3, [r5]
   36ad4:	ldrb	r3, [r4, #26]
   36ad8:	ldr	r1, [r4, #20]
   36adc:	clz	r3, r3
   36ae0:	lsr	r3, r3, #5
   36ae4:	add	r2, r1, r3
   36ae8:	add	r2, r2, #1
   36aec:	str	r2, [r4, #20]
   36af0:	strb	lr, [r1, r3]
   36af4:	ldr	r3, [r4, #20]
   36af8:	strb	ip, [r3]
   36afc:	ldrb	r2, [r4, #25]
   36b00:	ldr	r3, [r4, #20]
   36b04:	cmp	r2, #0
   36b08:	addne	r3, r3, #1
   36b0c:	mov	r1, r3
   36b10:	str	r3, [r4, #20]
   36b14:	bl	334f0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   36b18:	ldr	r3, [r4, #20]
   36b1c:	add	r0, r3, r0
   36b20:	str	r0, [r4, #20]
   36b24:	ldrd	r4, [sp]
   36b28:	ldrd	r6, [sp, #8]
   36b2c:	ldr	r8, [sp, #16]
   36b30:	add	sp, sp, #20
   36b34:	pop	{pc}		; (ldr pc, [sp], #4)
   36b38:	ldrb	r2, [r0, #29]
   36b3c:	cmp	r2, #0
   36b40:	beq	36b24 <flatcc_json_printer_uint16_field@@Base+0x154>
   36b44:	mov	r6, lr
   36b48:	b	36a24 <flatcc_json_printer_uint16_field@@Base+0x54>
   36b4c:	mov	r2, r5
   36b50:	mov	r1, r7
   36b54:	mov	r0, r4
   36b58:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   36b5c:	ldr	r5, [r4, #20]
   36b60:	b	36ac0 <flatcc_json_printer_uint16_field@@Base+0xf0>
   36b64:	add	r1, r2, #1
   36b68:	mov	r3, #10
   36b6c:	str	r1, [r0, #20]
   36b70:	strb	r3, [r2]
   36b74:	ldrb	r8, [r0, #25]
   36b78:	ldr	r2, [r4, #32]
   36b7c:	ldr	r1, [r0, #16]
   36b80:	ldr	r0, [r0, #20]
   36b84:	mul	r8, r2, r8
   36b88:	add	r3, r0, r8
   36b8c:	cmp	r1, r3
   36b90:	bcs	36ba8 <flatcc_json_printer_uint16_field@@Base+0x1d8>
   36b94:	mov	r1, r8
   36b98:	mov	r0, r4
   36b9c:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   36ba0:	ldr	r2, [r4, #20]
   36ba4:	b	36a7c <flatcc_json_printer_uint16_field@@Base+0xac>
   36ba8:	mov	r2, r8
   36bac:	mov	r1, #32
   36bb0:	bl	1459c <memset@plt>
   36bb4:	ldr	r2, [r4, #20]
   36bb8:	add	r2, r2, r8
   36bbc:	str	r2, [r4, #20]
   36bc0:	b	36a7c <flatcc_json_printer_uint16_field@@Base+0xac>
   36bc4:	ldrb	r2, [r0, #28]
   36bc8:	cmp	r2, #0
   36bcc:	beq	36a24 <flatcc_json_printer_uint16_field@@Base+0x54>
   36bd0:	b	36b24 <flatcc_json_printer_uint16_field@@Base+0x154>

00036bd4 <flatcc_json_printer_uint32_field@@Base>:
   36bd4:	ldr	ip, [r1, #8]
   36bd8:	add	r2, r2, #2
   36bdc:	lsl	r2, r2, #1
   36be0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36be4:	strd	r6, [sp, #8]
   36be8:	str	r8, [sp, #16]
   36bec:	str	lr, [sp, #20]
   36bf0:	cmp	r2, ip
   36bf4:	ldr	r5, [sp, #24]
   36bf8:	bge	36d3c <flatcc_json_printer_uint32_field@@Base+0x168>
   36bfc:	ldr	ip, [r1, #4]
   36c00:	ldrh	r2, [ip, r2]
   36c04:	cmp	r2, #0
   36c08:	beq	36d3c <flatcc_json_printer_uint32_field@@Base+0x168>
   36c0c:	ldr	ip, [r1]
   36c10:	cmn	ip, r2
   36c14:	beq	36d3c <flatcc_json_printer_uint32_field@@Base+0x168>
   36c18:	ldr	r6, [ip, r2]
   36c1c:	ldr	r2, [sp, #28]
   36c20:	cmp	r2, r6
   36c24:	beq	36dc8 <flatcc_json_printer_uint32_field@@Base+0x1f4>
   36c28:	ldr	ip, [r1, #16]
   36c2c:	ldr	r2, [r0, #20]
   36c30:	cmp	ip, #0
   36c34:	add	ip, ip, #1
   36c38:	str	ip, [r1, #16]
   36c3c:	beq	36c54 <flatcc_json_printer_uint32_field@@Base+0x80>
   36c40:	add	ip, r2, #1
   36c44:	mov	r1, #44	; 0x2c
   36c48:	str	ip, [r0, #20]
   36c4c:	strb	r1, [r2]
   36c50:	ldr	r2, [r0, #20]
   36c54:	mov	r7, r3
   36c58:	mov	r4, r0
   36c5c:	ldrb	r1, [r0, #25]
   36c60:	cmp	r1, #0
   36c64:	bne	36d68 <flatcc_json_printer_uint32_field@@Base+0x194>
   36c68:	ldr	r3, [r0, #16]
   36c6c:	cmp	r3, r2
   36c70:	bhi	36c80 <flatcc_json_printer_uint32_field@@Base+0xac>
   36c74:	ldr	r3, [r0, #44]	; 0x2c
   36c78:	blx	r3
   36c7c:	ldr	r2, [r4, #20]
   36c80:	mov	r3, #34	; 0x22
   36c84:	strb	r3, [r2]
   36c88:	ldrb	r3, [r4, #26]
   36c8c:	ldr	r2, [r4, #16]
   36c90:	ldr	r0, [r4, #20]
   36c94:	cmp	r3, #0
   36c98:	addeq	r0, r0, #1
   36c9c:	add	r3, r0, r5
   36ca0:	cmp	r2, r3
   36ca4:	str	r0, [r4, #20]
   36ca8:	bls	36d50 <flatcc_json_printer_uint32_field@@Base+0x17c>
   36cac:	mov	r2, r5
   36cb0:	mov	r1, r7
   36cb4:	bl	14524 <memcpy@plt>
   36cb8:	ldr	r3, [r4, #20]
   36cbc:	add	r5, r3, r5
   36cc0:	str	r5, [r4, #20]
   36cc4:	mov	r3, #34	; 0x22
   36cc8:	mov	lr, #58	; 0x3a
   36ccc:	mov	ip, #32
   36cd0:	mov	r0, r6
   36cd4:	strb	r3, [r5]
   36cd8:	ldrb	r3, [r4, #26]
   36cdc:	ldr	r1, [r4, #20]
   36ce0:	clz	r3, r3
   36ce4:	lsr	r3, r3, #5
   36ce8:	add	r2, r1, r3
   36cec:	add	r2, r2, #1
   36cf0:	str	r2, [r4, #20]
   36cf4:	strb	lr, [r1, r3]
   36cf8:	ldr	r3, [r4, #20]
   36cfc:	strb	ip, [r3]
   36d00:	ldrb	r2, [r4, #25]
   36d04:	ldr	r3, [r4, #20]
   36d08:	cmp	r2, #0
   36d0c:	addne	r3, r3, #1
   36d10:	mov	r1, r3
   36d14:	str	r3, [r4, #20]
   36d18:	bl	33648 <flatcc_json_parser_struct_as_root@@Base+0x22c>
   36d1c:	ldr	r3, [r4, #20]
   36d20:	add	r0, r3, r0
   36d24:	str	r0, [r4, #20]
   36d28:	ldrd	r4, [sp]
   36d2c:	ldrd	r6, [sp, #8]
   36d30:	ldr	r8, [sp, #16]
   36d34:	add	sp, sp, #20
   36d38:	pop	{pc}		; (ldr pc, [sp], #4)
   36d3c:	ldrb	r2, [r0, #29]
   36d40:	cmp	r2, #0
   36d44:	beq	36d28 <flatcc_json_printer_uint32_field@@Base+0x154>
   36d48:	ldr	r6, [sp, #28]
   36d4c:	b	36c28 <flatcc_json_printer_uint32_field@@Base+0x54>
   36d50:	mov	r2, r5
   36d54:	mov	r1, r7
   36d58:	mov	r0, r4
   36d5c:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   36d60:	ldr	r5, [r4, #20]
   36d64:	b	36cc4 <flatcc_json_printer_uint32_field@@Base+0xf0>
   36d68:	add	r1, r2, #1
   36d6c:	mov	r3, #10
   36d70:	str	r1, [r0, #20]
   36d74:	strb	r3, [r2]
   36d78:	ldrb	r8, [r0, #25]
   36d7c:	ldr	r2, [r4, #32]
   36d80:	ldr	r1, [r0, #16]
   36d84:	ldr	r0, [r0, #20]
   36d88:	mul	r8, r2, r8
   36d8c:	add	r3, r0, r8
   36d90:	cmp	r1, r3
   36d94:	bcs	36dac <flatcc_json_printer_uint32_field@@Base+0x1d8>
   36d98:	mov	r1, r8
   36d9c:	mov	r0, r4
   36da0:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   36da4:	ldr	r2, [r4, #20]
   36da8:	b	36c80 <flatcc_json_printer_uint32_field@@Base+0xac>
   36dac:	mov	r2, r8
   36db0:	mov	r1, #32
   36db4:	bl	1459c <memset@plt>
   36db8:	ldr	r2, [r4, #20]
   36dbc:	add	r2, r2, r8
   36dc0:	str	r2, [r4, #20]
   36dc4:	b	36c80 <flatcc_json_printer_uint32_field@@Base+0xac>
   36dc8:	ldrb	r2, [r0, #28]
   36dcc:	cmp	r2, #0
   36dd0:	beq	36c28 <flatcc_json_printer_uint32_field@@Base+0x54>
   36dd4:	b	36d28 <flatcc_json_printer_uint32_field@@Base+0x154>

00036dd8 <flatcc_json_printer_uint64_field@@Base>:
   36dd8:	ldr	ip, [r1, #8]
   36ddc:	add	r2, r2, #2
   36de0:	lsl	r2, r2, #1
   36de4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   36de8:	strd	r6, [sp, #8]
   36dec:	strd	r8, [sp, #16]
   36df0:	str	sl, [sp, #24]
   36df4:	cmp	r2, ip
   36df8:	str	lr, [sp, #28]
   36dfc:	ldr	r5, [sp, #32]
   36e00:	bge	36f50 <flatcc_json_printer_uint64_field@@Base+0x178>
   36e04:	ldr	ip, [r1, #4]
   36e08:	ldrh	r2, [ip, r2]
   36e0c:	cmp	r2, #0
   36e10:	beq	36f50 <flatcc_json_printer_uint64_field@@Base+0x178>
   36e14:	ldr	ip, [r1]
   36e18:	cmn	ip, r2
   36e1c:	beq	36f50 <flatcc_json_printer_uint64_field@@Base+0x178>
   36e20:	ldrd	r6, [ip, r2]
   36e24:	ldrd	r8, [sp, #40]	; 0x28
   36e28:	cmp	r9, r7
   36e2c:	cmpeq	r8, r6
   36e30:	beq	36fdc <flatcc_json_printer_uint64_field@@Base+0x204>
   36e34:	ldr	ip, [r1, #16]
   36e38:	ldr	r2, [r0, #20]
   36e3c:	cmp	ip, #0
   36e40:	add	ip, ip, #1
   36e44:	str	ip, [r1, #16]
   36e48:	beq	36e60 <flatcc_json_printer_uint64_field@@Base+0x88>
   36e4c:	add	ip, r2, #1
   36e50:	mov	r1, #44	; 0x2c
   36e54:	str	ip, [r0, #20]
   36e58:	strb	r1, [r2]
   36e5c:	ldr	r2, [r0, #20]
   36e60:	mov	r8, r3
   36e64:	mov	r4, r0
   36e68:	ldrb	r1, [r0, #25]
   36e6c:	cmp	r1, #0
   36e70:	bne	36f7c <flatcc_json_printer_uint64_field@@Base+0x1a4>
   36e74:	ldr	r3, [r0, #16]
   36e78:	cmp	r3, r2
   36e7c:	bhi	36e8c <flatcc_json_printer_uint64_field@@Base+0xb4>
   36e80:	ldr	r3, [r0, #44]	; 0x2c
   36e84:	blx	r3
   36e88:	ldr	r2, [r4, #20]
   36e8c:	mov	r3, #34	; 0x22
   36e90:	strb	r3, [r2]
   36e94:	ldrb	r3, [r4, #26]
   36e98:	ldr	r2, [r4, #16]
   36e9c:	ldr	r0, [r4, #20]
   36ea0:	cmp	r3, #0
   36ea4:	addeq	r0, r0, #1
   36ea8:	add	r3, r0, r5
   36eac:	cmp	r2, r3
   36eb0:	str	r0, [r4, #20]
   36eb4:	bls	36f64 <flatcc_json_printer_uint64_field@@Base+0x18c>
   36eb8:	mov	r2, r5
   36ebc:	mov	r1, r8
   36ec0:	bl	14524 <memcpy@plt>
   36ec4:	ldr	r3, [r4, #20]
   36ec8:	add	r5, r3, r5
   36ecc:	str	r5, [r4, #20]
   36ed0:	mov	r3, #34	; 0x22
   36ed4:	mov	r0, r6
   36ed8:	mov	r6, #58	; 0x3a
   36edc:	mov	lr, #32
   36ee0:	strb	r3, [r5]
   36ee4:	mov	r1, r7
   36ee8:	ldrb	r3, [r4, #26]
   36eec:	ldr	ip, [r4, #20]
   36ef0:	clz	r3, r3
   36ef4:	lsr	r3, r3, #5
   36ef8:	add	r2, ip, r3
   36efc:	add	r2, r2, #1
   36f00:	str	r2, [r4, #20]
   36f04:	strb	r6, [ip, r3]
   36f08:	ldr	r3, [r4, #20]
   36f0c:	strb	lr, [r3]
   36f10:	ldrb	r2, [r4, #25]
   36f14:	ldr	r3, [r4, #20]
   36f18:	cmp	r2, #0
   36f1c:	addne	r3, r3, #1
   36f20:	mov	r2, r3
   36f24:	str	r3, [r4, #20]
   36f28:	bl	3395c <flatcc_json_parser_struct_as_root@@Base+0x540>
   36f2c:	ldr	r3, [r4, #20]
   36f30:	add	r0, r3, r0
   36f34:	str	r0, [r4, #20]
   36f38:	ldrd	r4, [sp]
   36f3c:	ldrd	r6, [sp, #8]
   36f40:	ldrd	r8, [sp, #16]
   36f44:	ldr	sl, [sp, #24]
   36f48:	add	sp, sp, #28
   36f4c:	pop	{pc}		; (ldr pc, [sp], #4)
   36f50:	ldrb	r2, [r0, #29]
   36f54:	cmp	r2, #0
   36f58:	beq	36f38 <flatcc_json_printer_uint64_field@@Base+0x160>
   36f5c:	ldrd	r6, [sp, #40]	; 0x28
   36f60:	b	36e34 <flatcc_json_printer_uint64_field@@Base+0x5c>
   36f64:	mov	r2, r5
   36f68:	mov	r1, r8
   36f6c:	mov	r0, r4
   36f70:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   36f74:	ldr	r5, [r4, #20]
   36f78:	b	36ed0 <flatcc_json_printer_uint64_field@@Base+0xf8>
   36f7c:	add	r1, r2, #1
   36f80:	mov	r3, #10
   36f84:	str	r1, [r0, #20]
   36f88:	strb	r3, [r2]
   36f8c:	ldrb	r3, [r0, #25]
   36f90:	ldr	r2, [r4, #32]
   36f94:	ldr	r1, [r0, #16]
   36f98:	ldr	r0, [r0, #20]
   36f9c:	mul	r9, r2, r3
   36fa0:	add	r3, r0, r9
   36fa4:	cmp	r1, r3
   36fa8:	bcs	36fc0 <flatcc_json_printer_uint64_field@@Base+0x1e8>
   36fac:	mov	r1, r9
   36fb0:	mov	r0, r4
   36fb4:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   36fb8:	ldr	r2, [r4, #20]
   36fbc:	b	36e8c <flatcc_json_printer_uint64_field@@Base+0xb4>
   36fc0:	mov	r2, r9
   36fc4:	mov	r1, #32
   36fc8:	bl	1459c <memset@plt>
   36fcc:	ldr	r2, [r4, #20]
   36fd0:	add	r2, r2, r9
   36fd4:	str	r2, [r4, #20]
   36fd8:	b	36e8c <flatcc_json_printer_uint64_field@@Base+0xb4>
   36fdc:	ldrb	r2, [r0, #28]
   36fe0:	cmp	r2, #0
   36fe4:	beq	36e34 <flatcc_json_printer_uint64_field@@Base+0x5c>
   36fe8:	b	36f38 <flatcc_json_printer_uint64_field@@Base+0x160>

00036fec <flatcc_json_printer_int8_field@@Base>:
   36fec:	ldr	ip, [r1, #8]
   36ff0:	add	r2, r2, #2
   36ff4:	lsl	r2, r2, #1
   36ff8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36ffc:	strd	r6, [sp, #8]
   37000:	str	r8, [sp, #16]
   37004:	str	lr, [sp, #20]
   37008:	cmp	r2, ip
   3700c:	ldrsb	lr, [sp, #28]
   37010:	ldr	r6, [sp, #24]
   37014:	bge	37198 <flatcc_json_printer_int8_field@@Base+0x1ac>
   37018:	ldr	ip, [r1, #4]
   3701c:	ldrh	r2, [ip, r2]
   37020:	cmp	r2, #0
   37024:	beq	37198 <flatcc_json_printer_int8_field@@Base+0x1ac>
   37028:	ldr	ip, [r1]
   3702c:	cmn	ip, r2
   37030:	beq	37198 <flatcc_json_printer_int8_field@@Base+0x1ac>
   37034:	ldrsb	r5, [ip, r2]
   37038:	cmp	lr, r5
   3703c:	beq	37274 <flatcc_json_printer_int8_field@@Base+0x288>
   37040:	ldr	ip, [r1, #16]
   37044:	ldr	r2, [r0, #20]
   37048:	cmp	ip, #0
   3704c:	add	ip, ip, #1
   37050:	str	ip, [r1, #16]
   37054:	beq	3706c <flatcc_json_printer_int8_field@@Base+0x80>
   37058:	add	ip, r2, #1
   3705c:	mov	r1, #44	; 0x2c
   37060:	str	ip, [r0, #20]
   37064:	strb	r1, [r2]
   37068:	ldr	r2, [r0, #20]
   3706c:	mov	r7, r3
   37070:	mov	r4, r0
   37074:	ldrb	r1, [r0, #25]
   37078:	cmp	r1, #0
   3707c:	bne	371c4 <flatcc_json_printer_int8_field@@Base+0x1d8>
   37080:	ldr	r3, [r0, #16]
   37084:	cmp	r3, r2
   37088:	bhi	37098 <flatcc_json_printer_int8_field@@Base+0xac>
   3708c:	ldr	r3, [r0, #44]	; 0x2c
   37090:	blx	r3
   37094:	ldr	r2, [r4, #20]
   37098:	mov	r3, #34	; 0x22
   3709c:	strb	r3, [r2]
   370a0:	ldrb	r3, [r4, #26]
   370a4:	ldr	r2, [r4, #16]
   370a8:	ldr	r0, [r4, #20]
   370ac:	cmp	r3, #0
   370b0:	addeq	r0, r0, #1
   370b4:	add	r3, r0, r6
   370b8:	cmp	r2, r3
   370bc:	str	r0, [r4, #20]
   370c0:	bls	371ac <flatcc_json_printer_int8_field@@Base+0x1c0>
   370c4:	mov	r2, r6
   370c8:	mov	r1, r7
   370cc:	bl	14524 <memcpy@plt>
   370d0:	ldr	r3, [r4, #20]
   370d4:	add	r6, r3, r6
   370d8:	str	r6, [r4, #20]
   370dc:	mov	r3, #34	; 0x22
   370e0:	mov	r7, #58	; 0x3a
   370e4:	lsr	r0, r5, #31
   370e8:	mov	lr, #32
   370ec:	strb	r3, [r6]
   370f0:	uxtb	r3, r5
   370f4:	ldrb	r2, [r4, #26]
   370f8:	ldr	ip, [r4, #20]
   370fc:	clz	r2, r2
   37100:	lsr	r2, r2, #5
   37104:	add	r1, ip, r2
   37108:	add	r1, r1, #1
   3710c:	str	r1, [r4, #20]
   37110:	strb	r7, [ip, r2]
   37114:	ldr	r2, [r4, #20]
   37118:	strb	lr, [r2]
   3711c:	ldrb	r1, [r4, #25]
   37120:	ldr	ip, [r4, #20]
   37124:	adds	r1, r1, #0
   37128:	movne	r1, #1
   3712c:	cmp	r5, #0
   37130:	add	r2, ip, r1
   37134:	str	r2, [r4, #20]
   37138:	bge	37150 <flatcc_json_printer_int8_field@@Base+0x164>
   3713c:	rsb	r3, r3, #0
   37140:	mov	lr, #45	; 0x2d
   37144:	add	r2, r2, #1
   37148:	uxtb	r3, r3
   3714c:	strb	lr, [ip, r1]
   37150:	cmp	r3, #99	; 0x63
   37154:	bhi	37224 <flatcc_json_printer_int8_field@@Base+0x238>
   37158:	cmp	r3, #9
   3715c:	bhi	37284 <flatcc_json_printer_int8_field@@Base+0x298>
   37160:	add	r3, r3, #48	; 0x30
   37164:	mov	r1, #0
   37168:	mov	ip, #1
   3716c:	strb	r3, [r2]
   37170:	strb	r1, [r2, #1]
   37174:	ldr	r3, [r4, #20]
   37178:	add	r2, r0, ip
   3717c:	add	r3, r3, r2
   37180:	str	r3, [r4, #20]
   37184:	ldrd	r4, [sp]
   37188:	ldrd	r6, [sp, #8]
   3718c:	ldr	r8, [sp, #16]
   37190:	add	sp, sp, #20
   37194:	pop	{pc}		; (ldr pc, [sp], #4)
   37198:	ldrb	r2, [r0, #29]
   3719c:	cmp	r2, #0
   371a0:	beq	37184 <flatcc_json_printer_int8_field@@Base+0x198>
   371a4:	mov	r5, lr
   371a8:	b	37040 <flatcc_json_printer_int8_field@@Base+0x54>
   371ac:	mov	r2, r6
   371b0:	mov	r1, r7
   371b4:	mov	r0, r4
   371b8:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   371bc:	ldr	r6, [r4, #20]
   371c0:	b	370dc <flatcc_json_printer_int8_field@@Base+0xf0>
   371c4:	add	r1, r2, #1
   371c8:	mov	r3, #10
   371cc:	str	r1, [r0, #20]
   371d0:	strb	r3, [r2]
   371d4:	ldrb	r8, [r0, #25]
   371d8:	ldr	r2, [r4, #32]
   371dc:	ldr	r1, [r0, #16]
   371e0:	ldr	r0, [r0, #20]
   371e4:	mul	r8, r2, r8
   371e8:	add	r3, r0, r8
   371ec:	cmp	r1, r3
   371f0:	bcs	37208 <flatcc_json_printer_int8_field@@Base+0x21c>
   371f4:	mov	r1, r8
   371f8:	mov	r0, r4
   371fc:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   37200:	ldr	r2, [r4, #20]
   37204:	b	37098 <flatcc_json_printer_int8_field@@Base+0xac>
   37208:	mov	r2, r8
   3720c:	mov	r1, #32
   37210:	bl	1459c <memset@plt>
   37214:	ldr	r2, [r4, #20]
   37218:	add	r2, r2, r8
   3721c:	str	r2, [r4, #20]
   37220:	b	37098 <flatcc_json_printer_int8_field@@Base+0xac>
   37224:	movw	ip, #34079	; 0x851f
   37228:	movt	ip, #20971	; 0x51eb
   3722c:	mov	r6, #100	; 0x64
   37230:	mov	lr, #0
   37234:	umull	ip, r1, ip, r3
   37238:	mov	r5, #49	; 0x31
   3723c:	mov	ip, #3
   37240:	strb	lr, [r2, #3]
   37244:	movw	lr, #28992	; 0x7140
   37248:	movt	lr, #4
   3724c:	lsr	r1, r1, #5
   37250:	mls	r1, r6, r1, r3
   37254:	uxtb	r1, r1
   37258:	ldrb	r3, [lr, r1, lsl #1]
   3725c:	add	r1, lr, r1, lsl #1
   37260:	strb	r3, [r2, #1]
   37264:	ldrb	r3, [r1, #1]
   37268:	strb	r5, [r2]
   3726c:	strb	r3, [r2, #2]
   37270:	b	37174 <flatcc_json_printer_int8_field@@Base+0x188>
   37274:	ldrb	r2, [r0, #28]
   37278:	cmp	r2, #0
   3727c:	beq	37040 <flatcc_json_printer_int8_field@@Base+0x54>
   37280:	b	37184 <flatcc_json_printer_int8_field@@Base+0x198>
   37284:	mov	ip, #0
   37288:	sxth	r3, r3
   3728c:	movw	r1, #28992	; 0x7140
   37290:	movt	r1, #4
   37294:	add	lr, r1, r3, lsl #1
   37298:	strb	ip, [r2, #2]
   3729c:	mov	ip, #2
   372a0:	ldrb	r3, [r1, r3, lsl #1]
   372a4:	strb	r3, [r2]
   372a8:	ldrb	r3, [lr, #1]
   372ac:	strb	r3, [r2, #1]
   372b0:	b	37174 <flatcc_json_printer_int8_field@@Base+0x188>

000372b4 <flatcc_json_printer_int16_field@@Base>:
   372b4:	ldr	ip, [r1, #8]
   372b8:	add	r2, r2, #2
   372bc:	lsl	r2, r2, #1
   372c0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   372c4:	strd	r6, [sp, #8]
   372c8:	str	r8, [sp, #16]
   372cc:	str	lr, [sp, #20]
   372d0:	cmp	r2, ip
   372d4:	ldrsh	lr, [sp, #28]
   372d8:	ldr	r6, [sp, #24]
   372dc:	bge	37440 <flatcc_json_printer_int16_field@@Base+0x18c>
   372e0:	ldr	ip, [r1, #4]
   372e4:	ldrh	r2, [ip, r2]
   372e8:	cmp	r2, #0
   372ec:	beq	37440 <flatcc_json_printer_int16_field@@Base+0x18c>
   372f0:	ldr	ip, [r1]
   372f4:	cmn	ip, r2
   372f8:	beq	37440 <flatcc_json_printer_int16_field@@Base+0x18c>
   372fc:	ldrsh	r5, [ip, r2]
   37300:	cmp	lr, r5
   37304:	beq	374cc <flatcc_json_printer_int16_field@@Base+0x218>
   37308:	ldr	ip, [r1, #16]
   3730c:	ldr	r2, [r0, #20]
   37310:	cmp	ip, #0
   37314:	add	ip, ip, #1
   37318:	str	ip, [r1, #16]
   3731c:	beq	37334 <flatcc_json_printer_int16_field@@Base+0x80>
   37320:	add	ip, r2, #1
   37324:	mov	r1, #44	; 0x2c
   37328:	str	ip, [r0, #20]
   3732c:	strb	r1, [r2]
   37330:	ldr	r2, [r0, #20]
   37334:	mov	r7, r3
   37338:	mov	r4, r0
   3733c:	ldrb	r1, [r0, #25]
   37340:	cmp	r1, #0
   37344:	bne	3746c <flatcc_json_printer_int16_field@@Base+0x1b8>
   37348:	ldr	r3, [r0, #16]
   3734c:	cmp	r3, r2
   37350:	bhi	37360 <flatcc_json_printer_int16_field@@Base+0xac>
   37354:	ldr	r3, [r0, #44]	; 0x2c
   37358:	blx	r3
   3735c:	ldr	r2, [r4, #20]
   37360:	mov	r3, #34	; 0x22
   37364:	strb	r3, [r2]
   37368:	ldrb	r3, [r4, #26]
   3736c:	ldr	r2, [r4, #16]
   37370:	ldr	r0, [r4, #20]
   37374:	cmp	r3, #0
   37378:	addeq	r0, r0, #1
   3737c:	add	r3, r0, r6
   37380:	cmp	r2, r3
   37384:	str	r0, [r4, #20]
   37388:	bls	37454 <flatcc_json_printer_int16_field@@Base+0x1a0>
   3738c:	mov	r2, r6
   37390:	mov	r1, r7
   37394:	bl	14524 <memcpy@plt>
   37398:	ldr	r3, [r4, #20]
   3739c:	add	r6, r3, r6
   373a0:	str	r6, [r4, #20]
   373a4:	mov	r3, #34	; 0x22
   373a8:	mov	lr, #58	; 0x3a
   373ac:	lsr	r7, r5, #31
   373b0:	mov	ip, #32
   373b4:	uxth	r0, r5
   373b8:	strb	r3, [r6]
   373bc:	ldrb	r3, [r4, #26]
   373c0:	ldr	r1, [r4, #20]
   373c4:	clz	r3, r3
   373c8:	lsr	r3, r3, #5
   373cc:	add	r2, r1, r3
   373d0:	add	r2, r2, #1
   373d4:	str	r2, [r4, #20]
   373d8:	strb	lr, [r1, r3]
   373dc:	ldr	r3, [r4, #20]
   373e0:	strb	ip, [r3]
   373e4:	ldrb	r3, [r4, #25]
   373e8:	ldr	r2, [r4, #20]
   373ec:	adds	r3, r3, #0
   373f0:	movne	r3, #1
   373f4:	cmp	r5, #0
   373f8:	add	r1, r2, r3
   373fc:	str	r1, [r4, #20]
   37400:	bge	37418 <flatcc_json_printer_int16_field@@Base+0x164>
   37404:	rsb	r0, r0, #0
   37408:	mov	ip, #45	; 0x2d
   3740c:	add	r1, r1, #1
   37410:	uxth	r0, r0
   37414:	strb	ip, [r2, r3]
   37418:	bl	334f0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   3741c:	ldr	r3, [r4, #20]
   37420:	add	r0, r7, r0
   37424:	add	r3, r3, r0
   37428:	str	r3, [r4, #20]
   3742c:	ldrd	r4, [sp]
   37430:	ldrd	r6, [sp, #8]
   37434:	ldr	r8, [sp, #16]
   37438:	add	sp, sp, #20
   3743c:	pop	{pc}		; (ldr pc, [sp], #4)
   37440:	ldrb	r2, [r0, #29]
   37444:	cmp	r2, #0
   37448:	beq	3742c <flatcc_json_printer_int16_field@@Base+0x178>
   3744c:	mov	r5, lr
   37450:	b	37308 <flatcc_json_printer_int16_field@@Base+0x54>
   37454:	mov	r2, r6
   37458:	mov	r1, r7
   3745c:	mov	r0, r4
   37460:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   37464:	ldr	r6, [r4, #20]
   37468:	b	373a4 <flatcc_json_printer_int16_field@@Base+0xf0>
   3746c:	add	r1, r2, #1
   37470:	mov	r3, #10
   37474:	str	r1, [r0, #20]
   37478:	strb	r3, [r2]
   3747c:	ldrb	r8, [r0, #25]
   37480:	ldr	r2, [r4, #32]
   37484:	ldr	r1, [r0, #16]
   37488:	ldr	r0, [r0, #20]
   3748c:	mul	r8, r2, r8
   37490:	add	r3, r0, r8
   37494:	cmp	r1, r3
   37498:	bcs	374b0 <flatcc_json_printer_int16_field@@Base+0x1fc>
   3749c:	mov	r1, r8
   374a0:	mov	r0, r4
   374a4:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   374a8:	ldr	r2, [r4, #20]
   374ac:	b	37360 <flatcc_json_printer_int16_field@@Base+0xac>
   374b0:	mov	r2, r8
   374b4:	mov	r1, #32
   374b8:	bl	1459c <memset@plt>
   374bc:	ldr	r2, [r4, #20]
   374c0:	add	r2, r2, r8
   374c4:	str	r2, [r4, #20]
   374c8:	b	37360 <flatcc_json_printer_int16_field@@Base+0xac>
   374cc:	ldrb	r2, [r0, #28]
   374d0:	cmp	r2, #0
   374d4:	beq	37308 <flatcc_json_printer_int16_field@@Base+0x54>
   374d8:	b	3742c <flatcc_json_printer_int16_field@@Base+0x178>

000374dc <flatcc_json_printer_int32_field@@Base>:
   374dc:	ldr	ip, [r1, #8]
   374e0:	add	r2, r2, #2
   374e4:	lsl	r2, r2, #1
   374e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   374ec:	strd	r6, [sp, #8]
   374f0:	str	r8, [sp, #16]
   374f4:	str	lr, [sp, #20]
   374f8:	cmp	r2, ip
   374fc:	ldr	r6, [sp, #24]
   37500:	bge	37664 <flatcc_json_printer_int32_field@@Base+0x188>
   37504:	ldr	ip, [r1, #4]
   37508:	ldrh	r2, [ip, r2]
   3750c:	cmp	r2, #0
   37510:	beq	37664 <flatcc_json_printer_int32_field@@Base+0x188>
   37514:	ldr	ip, [r1]
   37518:	cmn	ip, r2
   3751c:	beq	37664 <flatcc_json_printer_int32_field@@Base+0x188>
   37520:	ldr	r5, [ip, r2]
   37524:	ldr	r2, [sp, #28]
   37528:	cmp	r2, r5
   3752c:	beq	376f0 <flatcc_json_printer_int32_field@@Base+0x214>
   37530:	ldr	ip, [r1, #16]
   37534:	ldr	r2, [r0, #20]
   37538:	cmp	ip, #0
   3753c:	add	ip, ip, #1
   37540:	str	ip, [r1, #16]
   37544:	beq	3755c <flatcc_json_printer_int32_field@@Base+0x80>
   37548:	add	ip, r2, #1
   3754c:	mov	r1, #44	; 0x2c
   37550:	str	ip, [r0, #20]
   37554:	strb	r1, [r2]
   37558:	ldr	r2, [r0, #20]
   3755c:	mov	r7, r3
   37560:	mov	r4, r0
   37564:	ldrb	r1, [r0, #25]
   37568:	cmp	r1, #0
   3756c:	bne	37690 <flatcc_json_printer_int32_field@@Base+0x1b4>
   37570:	ldr	r3, [r0, #16]
   37574:	cmp	r3, r2
   37578:	bhi	37588 <flatcc_json_printer_int32_field@@Base+0xac>
   3757c:	ldr	r3, [r0, #44]	; 0x2c
   37580:	blx	r3
   37584:	ldr	r2, [r4, #20]
   37588:	mov	r3, #34	; 0x22
   3758c:	strb	r3, [r2]
   37590:	ldrb	r3, [r4, #26]
   37594:	ldr	r2, [r4, #16]
   37598:	ldr	r0, [r4, #20]
   3759c:	cmp	r3, #0
   375a0:	addeq	r0, r0, #1
   375a4:	add	r3, r0, r6
   375a8:	cmp	r2, r3
   375ac:	str	r0, [r4, #20]
   375b0:	bls	37678 <flatcc_json_printer_int32_field@@Base+0x19c>
   375b4:	mov	r2, r6
   375b8:	mov	r1, r7
   375bc:	bl	14524 <memcpy@plt>
   375c0:	ldr	r3, [r4, #20]
   375c4:	add	r6, r3, r6
   375c8:	str	r6, [r4, #20]
   375cc:	mov	r3, #34	; 0x22
   375d0:	mov	ip, #58	; 0x3a
   375d4:	lsr	r7, r5, #31
   375d8:	mov	r0, #32
   375dc:	strb	r3, [r6]
   375e0:	ldrb	r3, [r4, #26]
   375e4:	ldr	r1, [r4, #20]
   375e8:	clz	r3, r3
   375ec:	lsr	r3, r3, #5
   375f0:	add	r2, r1, r3
   375f4:	add	r2, r2, #1
   375f8:	str	r2, [r4, #20]
   375fc:	strb	ip, [r1, r3]
   37600:	ldr	r3, [r4, #20]
   37604:	strb	r0, [r3]
   37608:	ldrb	r3, [r4, #25]
   3760c:	ldr	r2, [r4, #20]
   37610:	adds	r3, r3, #0
   37614:	movne	r3, #1
   37618:	cmp	r5, #0
   3761c:	add	r1, r2, r3
   37620:	str	r1, [r4, #20]
   37624:	bge	37638 <flatcc_json_printer_int32_field@@Base+0x15c>
   37628:	mov	r0, #45	; 0x2d
   3762c:	rsb	r5, r5, #0
   37630:	add	r1, r1, #1
   37634:	strb	r0, [r2, r3]
   37638:	mov	r0, r5
   3763c:	bl	33648 <flatcc_json_parser_struct_as_root@@Base+0x22c>
   37640:	ldr	r3, [r4, #20]
   37644:	add	r0, r7, r0
   37648:	add	r3, r3, r0
   3764c:	str	r3, [r4, #20]
   37650:	ldrd	r4, [sp]
   37654:	ldrd	r6, [sp, #8]
   37658:	ldr	r8, [sp, #16]
   3765c:	add	sp, sp, #20
   37660:	pop	{pc}		; (ldr pc, [sp], #4)
   37664:	ldrb	r2, [r0, #29]
   37668:	cmp	r2, #0
   3766c:	beq	37650 <flatcc_json_printer_int32_field@@Base+0x174>
   37670:	ldr	r5, [sp, #28]
   37674:	b	37530 <flatcc_json_printer_int32_field@@Base+0x54>
   37678:	mov	r2, r6
   3767c:	mov	r1, r7
   37680:	mov	r0, r4
   37684:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   37688:	ldr	r6, [r4, #20]
   3768c:	b	375cc <flatcc_json_printer_int32_field@@Base+0xf0>
   37690:	add	r1, r2, #1
   37694:	mov	r3, #10
   37698:	str	r1, [r0, #20]
   3769c:	strb	r3, [r2]
   376a0:	ldrb	r8, [r0, #25]
   376a4:	ldr	r2, [r4, #32]
   376a8:	ldr	r1, [r0, #16]
   376ac:	ldr	r0, [r0, #20]
   376b0:	mul	r8, r2, r8
   376b4:	add	r3, r0, r8
   376b8:	cmp	r1, r3
   376bc:	bcs	376d4 <flatcc_json_printer_int32_field@@Base+0x1f8>
   376c0:	mov	r1, r8
   376c4:	mov	r0, r4
   376c8:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   376cc:	ldr	r2, [r4, #20]
   376d0:	b	37588 <flatcc_json_printer_int32_field@@Base+0xac>
   376d4:	mov	r2, r8
   376d8:	mov	r1, #32
   376dc:	bl	1459c <memset@plt>
   376e0:	ldr	r2, [r4, #20]
   376e4:	add	r2, r2, r8
   376e8:	str	r2, [r4, #20]
   376ec:	b	37588 <flatcc_json_printer_int32_field@@Base+0xac>
   376f0:	ldrb	r2, [r0, #28]
   376f4:	cmp	r2, #0
   376f8:	beq	37530 <flatcc_json_printer_int32_field@@Base+0x54>
   376fc:	b	37650 <flatcc_json_printer_int32_field@@Base+0x174>

00037700 <flatcc_json_printer_int64_field@@Base>:
   37700:	ldr	ip, [r1, #8]
   37704:	add	r2, r2, #2
   37708:	lsl	r2, r2, #1
   3770c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   37710:	strd	r6, [sp, #8]
   37714:	strd	r8, [sp, #16]
   37718:	str	sl, [sp, #24]
   3771c:	cmp	r2, ip
   37720:	str	lr, [sp, #28]
   37724:	ldr	r5, [sp, #32]
   37728:	bge	378a0 <flatcc_json_printer_int64_field@@Base+0x1a0>
   3772c:	ldr	ip, [r1, #4]
   37730:	ldrh	r2, [ip, r2]
   37734:	cmp	r2, #0
   37738:	beq	378a0 <flatcc_json_printer_int64_field@@Base+0x1a0>
   3773c:	ldr	ip, [r1]
   37740:	cmn	ip, r2
   37744:	beq	378a0 <flatcc_json_printer_int64_field@@Base+0x1a0>
   37748:	ldrd	r6, [ip, r2]
   3774c:	ldrd	r8, [sp, #40]	; 0x28
   37750:	cmp	r9, r7
   37754:	cmpeq	r8, r6
   37758:	beq	3792c <flatcc_json_printer_int64_field@@Base+0x22c>
   3775c:	ldr	ip, [r1, #16]
   37760:	ldr	r2, [r0, #20]
   37764:	cmp	ip, #0
   37768:	add	ip, ip, #1
   3776c:	str	ip, [r1, #16]
   37770:	beq	37788 <flatcc_json_printer_int64_field@@Base+0x88>
   37774:	add	ip, r2, #1
   37778:	mov	r1, #44	; 0x2c
   3777c:	str	ip, [r0, #20]
   37780:	strb	r1, [r2]
   37784:	ldr	r2, [r0, #20]
   37788:	mov	r8, r3
   3778c:	mov	r4, r0
   37790:	ldrb	r1, [r0, #25]
   37794:	cmp	r1, #0
   37798:	bne	378cc <flatcc_json_printer_int64_field@@Base+0x1cc>
   3779c:	ldr	r3, [r0, #16]
   377a0:	cmp	r3, r2
   377a4:	bhi	377b4 <flatcc_json_printer_int64_field@@Base+0xb4>
   377a8:	ldr	r3, [r0, #44]	; 0x2c
   377ac:	blx	r3
   377b0:	ldr	r2, [r4, #20]
   377b4:	mov	r3, #34	; 0x22
   377b8:	strb	r3, [r2]
   377bc:	ldrb	r3, [r4, #26]
   377c0:	ldr	r2, [r4, #16]
   377c4:	ldr	r0, [r4, #20]
   377c8:	cmp	r3, #0
   377cc:	addeq	r0, r0, #1
   377d0:	add	r3, r0, r5
   377d4:	cmp	r2, r3
   377d8:	str	r0, [r4, #20]
   377dc:	bls	378b4 <flatcc_json_printer_int64_field@@Base+0x1b4>
   377e0:	mov	r2, r5
   377e4:	mov	r1, r8
   377e8:	bl	14524 <memcpy@plt>
   377ec:	ldr	r3, [r4, #20]
   377f0:	add	r5, r3, r5
   377f4:	str	r5, [r4, #20]
   377f8:	mov	r3, #34	; 0x22
   377fc:	mov	ip, #58	; 0x3a
   37800:	lsr	r8, r7, #31
   37804:	mov	r0, #32
   37808:	strb	r3, [r5]
   3780c:	ldrb	r3, [r4, #26]
   37810:	ldr	r1, [r4, #20]
   37814:	clz	r3, r3
   37818:	lsr	r3, r3, #5
   3781c:	add	r2, r1, r3
   37820:	add	r2, r2, #1
   37824:	str	r2, [r4, #20]
   37828:	strb	ip, [r1, r3]
   3782c:	ldr	r3, [r4, #20]
   37830:	strb	r0, [r3]
   37834:	ldrb	r3, [r4, #25]
   37838:	ldr	r1, [r4, #20]
   3783c:	adds	r3, r3, #0
   37840:	movne	r3, #1
   37844:	cmp	r6, #0
   37848:	sbcs	r2, r7, #0
   3784c:	add	r2, r1, r3
   37850:	str	r2, [r4, #20]
   37854:	bge	3786c <flatcc_json_printer_int64_field@@Base+0x16c>
   37858:	rsbs	r6, r6, #0
   3785c:	mov	r0, #45	; 0x2d
   37860:	rsc	r7, r7, #0
   37864:	add	r2, r2, #1
   37868:	strb	r0, [r1, r3]
   3786c:	mov	r0, r6
   37870:	mov	r1, r7
   37874:	bl	3395c <flatcc_json_parser_struct_as_root@@Base+0x540>
   37878:	ldr	r3, [r4, #20]
   3787c:	add	r0, r8, r0
   37880:	add	r3, r3, r0
   37884:	str	r3, [r4, #20]
   37888:	ldrd	r4, [sp]
   3788c:	ldrd	r6, [sp, #8]
   37890:	ldrd	r8, [sp, #16]
   37894:	ldr	sl, [sp, #24]
   37898:	add	sp, sp, #28
   3789c:	pop	{pc}		; (ldr pc, [sp], #4)
   378a0:	ldrb	r2, [r0, #29]
   378a4:	cmp	r2, #0
   378a8:	beq	37888 <flatcc_json_printer_int64_field@@Base+0x188>
   378ac:	ldrd	r6, [sp, #40]	; 0x28
   378b0:	b	3775c <flatcc_json_printer_int64_field@@Base+0x5c>
   378b4:	mov	r2, r5
   378b8:	mov	r1, r8
   378bc:	mov	r0, r4
   378c0:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   378c4:	ldr	r5, [r4, #20]
   378c8:	b	377f8 <flatcc_json_printer_int64_field@@Base+0xf8>
   378cc:	add	r1, r2, #1
   378d0:	mov	r3, #10
   378d4:	str	r1, [r0, #20]
   378d8:	strb	r3, [r2]
   378dc:	ldrb	r3, [r0, #25]
   378e0:	ldr	r2, [r4, #32]
   378e4:	ldr	r1, [r0, #16]
   378e8:	ldr	r0, [r0, #20]
   378ec:	mul	r9, r2, r3
   378f0:	add	r3, r0, r9
   378f4:	cmp	r1, r3
   378f8:	bcs	37910 <flatcc_json_printer_int64_field@@Base+0x210>
   378fc:	mov	r1, r9
   37900:	mov	r0, r4
   37904:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   37908:	ldr	r2, [r4, #20]
   3790c:	b	377b4 <flatcc_json_printer_int64_field@@Base+0xb4>
   37910:	mov	r2, r9
   37914:	mov	r1, #32
   37918:	bl	1459c <memset@plt>
   3791c:	ldr	r2, [r4, #20]
   37920:	add	r2, r2, r9
   37924:	str	r2, [r4, #20]
   37928:	b	377b4 <flatcc_json_printer_int64_field@@Base+0xb4>
   3792c:	ldrb	r2, [r0, #28]
   37930:	cmp	r2, #0
   37934:	beq	3775c <flatcc_json_printer_int64_field@@Base+0x5c>
   37938:	b	37888 <flatcc_json_printer_int64_field@@Base+0x188>

0003793c <flatcc_json_printer_bool_field@@Base>:
   3793c:	ldr	ip, [r1, #8]
   37940:	add	r2, r2, #2
   37944:	lsl	r2, r2, #1
   37948:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3794c:	strd	r6, [sp, #8]
   37950:	str	r8, [sp, #16]
   37954:	str	lr, [sp, #20]
   37958:	cmp	r2, ip
   3795c:	ldrb	lr, [sp, #28]
   37960:	ldr	r6, [sp, #24]
   37964:	bge	37ac4 <flatcc_json_printer_bool_field@@Base+0x188>
   37968:	ldr	ip, [r1, #4]
   3796c:	ldrh	r2, [ip, r2]
   37970:	cmp	r2, #0
   37974:	beq	37ac4 <flatcc_json_printer_bool_field@@Base+0x188>
   37978:	ldr	ip, [r1]
   3797c:	cmn	ip, r2
   37980:	beq	37ac4 <flatcc_json_printer_bool_field@@Base+0x188>
   37984:	ldrb	r5, [ip, r2]
   37988:	cmp	lr, r5
   3798c:	beq	37b74 <flatcc_json_printer_bool_field@@Base+0x238>
   37990:	ldr	ip, [r1, #16]
   37994:	ldr	r2, [r0, #20]
   37998:	cmp	ip, #0
   3799c:	add	ip, ip, #1
   379a0:	str	ip, [r1, #16]
   379a4:	beq	379bc <flatcc_json_printer_bool_field@@Base+0x80>
   379a8:	add	ip, r2, #1
   379ac:	mov	r1, #44	; 0x2c
   379b0:	str	ip, [r0, #20]
   379b4:	strb	r1, [r2]
   379b8:	ldr	r2, [r0, #20]
   379bc:	mov	r7, r3
   379c0:	mov	r4, r0
   379c4:	ldrb	r1, [r0, #25]
   379c8:	cmp	r1, #0
   379cc:	bne	37b14 <flatcc_json_printer_bool_field@@Base+0x1d8>
   379d0:	ldr	r3, [r0, #16]
   379d4:	cmp	r3, r2
   379d8:	bhi	379e8 <flatcc_json_printer_bool_field@@Base+0xac>
   379dc:	ldr	r3, [r0, #44]	; 0x2c
   379e0:	blx	r3
   379e4:	ldr	r2, [r4, #20]
   379e8:	mov	r3, #34	; 0x22
   379ec:	strb	r3, [r2]
   379f0:	ldrb	r3, [r4, #26]
   379f4:	ldr	r2, [r4, #16]
   379f8:	ldr	r0, [r4, #20]
   379fc:	cmp	r3, #0
   37a00:	addeq	r0, r0, #1
   37a04:	add	r3, r0, r6
   37a08:	cmp	r2, r3
   37a0c:	str	r0, [r4, #20]
   37a10:	bls	37afc <flatcc_json_printer_bool_field@@Base+0x1c0>
   37a14:	mov	r2, r6
   37a18:	mov	r1, r7
   37a1c:	bl	14524 <memcpy@plt>
   37a20:	ldr	r3, [r4, #20]
   37a24:	add	r6, r3, r6
   37a28:	str	r6, [r4, #20]
   37a2c:	mov	r3, #34	; 0x22
   37a30:	mov	ip, #58	; 0x3a
   37a34:	mov	r0, #32
   37a38:	strb	r3, [r6]
   37a3c:	ldrb	r3, [r4, #26]
   37a40:	ldr	r1, [r4, #20]
   37a44:	clz	r3, r3
   37a48:	lsr	r3, r3, #5
   37a4c:	add	r2, r1, r3
   37a50:	add	r2, r2, #1
   37a54:	str	r2, [r4, #20]
   37a58:	strb	ip, [r1, r3]
   37a5c:	ldr	r3, [r4, #20]
   37a60:	strb	r0, [r3]
   37a64:	ldrb	r3, [r4, #25]
   37a68:	ldr	r1, [r4, #20]
   37a6c:	adds	r3, r3, #0
   37a70:	movne	r3, #1
   37a74:	cmp	r5, #0
   37a78:	add	r2, r1, r3
   37a7c:	str	r2, [r4, #20]
   37a80:	beq	37ad8 <flatcc_json_printer_bool_field@@Base+0x19c>
   37a84:	ldr	ip, [pc, #248]	; 37b84 <flatcc_json_printer_bool_field@@Base+0x248>
   37a88:	movw	r0, #28992	; 0x7140
   37a8c:	movt	r0, #4
   37a90:	ldr	lr, [r0, #1768]	; 0x6e8
   37a94:	mov	r0, #4
   37a98:	ldrb	ip, [ip, #4]
   37a9c:	str	lr, [r1, r3]
   37aa0:	strb	ip, [r2, #4]
   37aa4:	ldr	r3, [r4, #20]
   37aa8:	add	r3, r3, r0
   37aac:	str	r3, [r4, #20]
   37ab0:	ldrd	r4, [sp]
   37ab4:	ldrd	r6, [sp, #8]
   37ab8:	ldr	r8, [sp, #16]
   37abc:	add	sp, sp, #20
   37ac0:	pop	{pc}		; (ldr pc, [sp], #4)
   37ac4:	ldrb	r2, [r0, #29]
   37ac8:	cmp	r2, #0
   37acc:	beq	37ab0 <flatcc_json_printer_bool_field@@Base+0x174>
   37ad0:	mov	r5, lr
   37ad4:	b	37990 <flatcc_json_printer_bool_field@@Base+0x54>
   37ad8:	movw	r0, #28992	; 0x7140
   37adc:	movt	r0, #4
   37ae0:	add	ip, r0, #1776	; 0x6f0
   37ae4:	ldr	lr, [r0, #1776]	; 0x6f0
   37ae8:	mov	r0, #5
   37aec:	ldrh	ip, [ip, #4]
   37af0:	str	lr, [r1, r3]
   37af4:	strh	ip, [r2, #4]
   37af8:	b	37aa4 <flatcc_json_printer_bool_field@@Base+0x168>
   37afc:	mov	r2, r6
   37b00:	mov	r1, r7
   37b04:	mov	r0, r4
   37b08:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   37b0c:	ldr	r6, [r4, #20]
   37b10:	b	37a2c <flatcc_json_printer_bool_field@@Base+0xf0>
   37b14:	add	r1, r2, #1
   37b18:	mov	r3, #10
   37b1c:	str	r1, [r0, #20]
   37b20:	strb	r3, [r2]
   37b24:	ldrb	r8, [r0, #25]
   37b28:	ldr	r2, [r4, #32]
   37b2c:	ldr	r1, [r0, #16]
   37b30:	ldr	r0, [r0, #20]
   37b34:	mul	r8, r2, r8
   37b38:	add	r3, r0, r8
   37b3c:	cmp	r1, r3
   37b40:	bcs	37b58 <flatcc_json_printer_bool_field@@Base+0x21c>
   37b44:	mov	r1, r8
   37b48:	mov	r0, r4
   37b4c:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   37b50:	ldr	r2, [r4, #20]
   37b54:	b	379e8 <flatcc_json_printer_bool_field@@Base+0xac>
   37b58:	mov	r2, r8
   37b5c:	mov	r1, #32
   37b60:	bl	1459c <memset@plt>
   37b64:	ldr	r2, [r4, #20]
   37b68:	add	r2, r2, r8
   37b6c:	str	r2, [r4, #20]
   37b70:	b	379e8 <flatcc_json_printer_bool_field@@Base+0xac>
   37b74:	ldrb	r2, [r0, #28]
   37b78:	cmp	r2, #0
   37b7c:	beq	37990 <flatcc_json_printer_bool_field@@Base+0x54>
   37b80:	b	37ab0 <flatcc_json_printer_bool_field@@Base+0x174>
   37b84:	andeq	r7, r4, r8, lsr #16

00037b88 <flatcc_json_printer_float_field@@Base>:
   37b88:	ldr	ip, [r1, #8]
   37b8c:	add	r2, r2, #2
   37b90:	lsl	r2, r2, #1
   37b94:	strd	r4, [sp, #-24]!	; 0xffffffe8
   37b98:	strd	r6, [sp, #8]
   37b9c:	str	r8, [sp, #16]
   37ba0:	str	lr, [sp, #20]
   37ba4:	cmp	r2, ip
   37ba8:	vpush	{d8}
   37bac:	ldr	r5, [sp, #32]
   37bb0:	bge	37c04 <flatcc_json_printer_float_field@@Base+0x7c>
   37bb4:	ldr	ip, [r1, #4]
   37bb8:	ldrh	ip, [ip, r2]
   37bbc:	cmp	ip, #0
   37bc0:	beq	37c04 <flatcc_json_printer_float_field@@Base+0x7c>
   37bc4:	ldr	r2, [r1]
   37bc8:	adds	r2, r2, ip
   37bcc:	beq	37c04 <flatcc_json_printer_float_field@@Base+0x7c>
   37bd0:	vldr	s16, [r2]
   37bd4:	vcmp.f32	s0, s16
   37bd8:	vmrs	APSR_nzcv, fpscr
   37bdc:	bne	37c14 <flatcc_json_printer_float_field@@Base+0x8c>
   37be0:	ldrb	r2, [r0, #28]
   37be4:	cmp	r2, #0
   37be8:	beq	37c14 <flatcc_json_printer_float_field@@Base+0x8c>
   37bec:	vpop	{d8}
   37bf0:	ldrd	r4, [sp]
   37bf4:	ldrd	r6, [sp, #8]
   37bf8:	ldr	r8, [sp, #16]
   37bfc:	add	sp, sp, #20
   37c00:	pop	{pc}		; (ldr pc, [sp], #4)
   37c04:	ldrb	r2, [r0, #29]
   37c08:	cmp	r2, #0
   37c0c:	beq	37bec <flatcc_json_printer_float_field@@Base+0x64>
   37c10:	vmov.f32	s16, s0
   37c14:	ldr	ip, [r1, #16]
   37c18:	ldr	r2, [r0, #20]
   37c1c:	cmp	ip, #0
   37c20:	add	ip, ip, #1
   37c24:	str	ip, [r1, #16]
   37c28:	beq	37c40 <flatcc_json_printer_float_field@@Base+0xb8>
   37c2c:	add	ip, r2, #1
   37c30:	mov	r1, #44	; 0x2c
   37c34:	str	ip, [r0, #20]
   37c38:	strb	r1, [r2]
   37c3c:	ldr	r2, [r0, #20]
   37c40:	mov	r6, r3
   37c44:	mov	r4, r0
   37c48:	ldrb	r1, [r0, #25]
   37c4c:	cmp	r1, #0
   37c50:	bne	37d30 <flatcc_json_printer_float_field@@Base+0x1a8>
   37c54:	ldr	r3, [r0, #16]
   37c58:	cmp	r3, r2
   37c5c:	bhi	37c6c <flatcc_json_printer_float_field@@Base+0xe4>
   37c60:	ldr	r3, [r0, #44]	; 0x2c
   37c64:	blx	r3
   37c68:	ldr	r2, [r4, #20]
   37c6c:	mov	r3, #34	; 0x22
   37c70:	strb	r3, [r2]
   37c74:	ldrb	r3, [r4, #26]
   37c78:	ldr	r2, [r4, #16]
   37c7c:	ldr	r0, [r4, #20]
   37c80:	cmp	r3, #0
   37c84:	addeq	r0, r0, #1
   37c88:	add	r3, r0, r5
   37c8c:	cmp	r2, r3
   37c90:	str	r0, [r4, #20]
   37c94:	bls	37d18 <flatcc_json_printer_float_field@@Base+0x190>
   37c98:	mov	r2, r5
   37c9c:	mov	r1, r6
   37ca0:	bl	14524 <memcpy@plt>
   37ca4:	ldr	r3, [r4, #20]
   37ca8:	add	r5, r3, r5
   37cac:	str	r5, [r4, #20]
   37cb0:	mov	r3, #34	; 0x22
   37cb4:	mov	ip, #58	; 0x3a
   37cb8:	vcvt.f64.f32	d0, s16
   37cbc:	mov	r0, #32
   37cc0:	strb	r3, [r5]
   37cc4:	ldrb	r3, [r4, #26]
   37cc8:	ldr	r1, [r4, #20]
   37ccc:	clz	r3, r3
   37cd0:	lsr	r3, r3, #5
   37cd4:	add	r2, r1, r3
   37cd8:	add	r2, r2, #1
   37cdc:	str	r2, [r4, #20]
   37ce0:	strb	ip, [r1, r3]
   37ce4:	ldr	r3, [r4, #20]
   37ce8:	strb	r0, [r3]
   37cec:	ldrb	r2, [r4, #25]
   37cf0:	ldr	r3, [r4, #20]
   37cf4:	cmp	r2, #0
   37cf8:	addne	r3, r3, #1
   37cfc:	mov	r0, r3
   37d00:	str	r3, [r4, #20]
   37d04:	bl	34820 <flatcc_json_parser_struct_as_root@@Base+0x1404>
   37d08:	ldr	r3, [r4, #20]
   37d0c:	add	r0, r3, r0
   37d10:	str	r0, [r4, #20]
   37d14:	b	37bec <flatcc_json_printer_float_field@@Base+0x64>
   37d18:	mov	r2, r5
   37d1c:	mov	r1, r6
   37d20:	mov	r0, r4
   37d24:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   37d28:	ldr	r5, [r4, #20]
   37d2c:	b	37cb0 <flatcc_json_printer_float_field@@Base+0x128>
   37d30:	add	r1, r2, #1
   37d34:	mov	r3, #10
   37d38:	str	r1, [r0, #20]
   37d3c:	strb	r3, [r2]
   37d40:	ldrb	r7, [r0, #25]
   37d44:	ldr	r2, [r4, #32]
   37d48:	ldr	r1, [r0, #16]
   37d4c:	ldr	r0, [r0, #20]
   37d50:	mul	r7, r2, r7
   37d54:	add	r3, r0, r7
   37d58:	cmp	r1, r3
   37d5c:	bcs	37d74 <flatcc_json_printer_float_field@@Base+0x1ec>
   37d60:	mov	r1, r7
   37d64:	mov	r0, r4
   37d68:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   37d6c:	ldr	r2, [r4, #20]
   37d70:	b	37c6c <flatcc_json_printer_float_field@@Base+0xe4>
   37d74:	mov	r2, r7
   37d78:	mov	r1, #32
   37d7c:	bl	1459c <memset@plt>
   37d80:	ldr	r2, [r4, #20]
   37d84:	add	r2, r2, r7
   37d88:	str	r2, [r4, #20]
   37d8c:	b	37c6c <flatcc_json_printer_float_field@@Base+0xe4>

00037d90 <flatcc_json_printer_double_field@@Base>:
   37d90:	ldr	ip, [r1, #8]
   37d94:	add	r2, r2, #2
   37d98:	lsl	r2, r2, #1
   37d9c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   37da0:	strd	r6, [sp, #8]
   37da4:	str	r8, [sp, #16]
   37da8:	str	lr, [sp, #20]
   37dac:	cmp	r2, ip
   37db0:	vpush	{d8}
   37db4:	ldr	r5, [sp, #32]
   37db8:	bge	37e0c <flatcc_json_printer_double_field@@Base+0x7c>
   37dbc:	ldr	ip, [r1, #4]
   37dc0:	ldrh	ip, [ip, r2]
   37dc4:	cmp	ip, #0
   37dc8:	beq	37e0c <flatcc_json_printer_double_field@@Base+0x7c>
   37dcc:	ldr	r2, [r1]
   37dd0:	adds	r2, r2, ip
   37dd4:	beq	37e0c <flatcc_json_printer_double_field@@Base+0x7c>
   37dd8:	vldr	d8, [r2]
   37ddc:	vcmp.f64	d0, d8
   37de0:	vmrs	APSR_nzcv, fpscr
   37de4:	bne	37e1c <flatcc_json_printer_double_field@@Base+0x8c>
   37de8:	ldrb	r2, [r0, #28]
   37dec:	cmp	r2, #0
   37df0:	beq	37e1c <flatcc_json_printer_double_field@@Base+0x8c>
   37df4:	vpop	{d8}
   37df8:	ldrd	r4, [sp]
   37dfc:	ldrd	r6, [sp, #8]
   37e00:	ldr	r8, [sp, #16]
   37e04:	add	sp, sp, #20
   37e08:	pop	{pc}		; (ldr pc, [sp], #4)
   37e0c:	ldrb	r2, [r0, #29]
   37e10:	cmp	r2, #0
   37e14:	beq	37df4 <flatcc_json_printer_double_field@@Base+0x64>
   37e18:	vmov.f64	d8, d0
   37e1c:	ldr	ip, [r1, #16]
   37e20:	ldr	r2, [r0, #20]
   37e24:	cmp	ip, #0
   37e28:	add	ip, ip, #1
   37e2c:	str	ip, [r1, #16]
   37e30:	beq	37e48 <flatcc_json_printer_double_field@@Base+0xb8>
   37e34:	add	ip, r2, #1
   37e38:	mov	r1, #44	; 0x2c
   37e3c:	str	ip, [r0, #20]
   37e40:	strb	r1, [r2]
   37e44:	ldr	r2, [r0, #20]
   37e48:	mov	r6, r3
   37e4c:	mov	r4, r0
   37e50:	ldrb	r1, [r0, #25]
   37e54:	cmp	r1, #0
   37e58:	bne	37f38 <flatcc_json_printer_double_field@@Base+0x1a8>
   37e5c:	ldr	r3, [r0, #16]
   37e60:	cmp	r3, r2
   37e64:	bhi	37e74 <flatcc_json_printer_double_field@@Base+0xe4>
   37e68:	ldr	r3, [r0, #44]	; 0x2c
   37e6c:	blx	r3
   37e70:	ldr	r2, [r4, #20]
   37e74:	mov	r3, #34	; 0x22
   37e78:	strb	r3, [r2]
   37e7c:	ldrb	r3, [r4, #26]
   37e80:	ldr	r2, [r4, #16]
   37e84:	ldr	r0, [r4, #20]
   37e88:	cmp	r3, #0
   37e8c:	addeq	r0, r0, #1
   37e90:	add	r3, r0, r5
   37e94:	cmp	r2, r3
   37e98:	str	r0, [r4, #20]
   37e9c:	bls	37f20 <flatcc_json_printer_double_field@@Base+0x190>
   37ea0:	mov	r2, r5
   37ea4:	mov	r1, r6
   37ea8:	bl	14524 <memcpy@plt>
   37eac:	ldr	r3, [r4, #20]
   37eb0:	add	r5, r3, r5
   37eb4:	str	r5, [r4, #20]
   37eb8:	mov	r3, #34	; 0x22
   37ebc:	mov	ip, #58	; 0x3a
   37ec0:	vmov.f64	d0, d8
   37ec4:	mov	r0, #32
   37ec8:	strb	r3, [r5]
   37ecc:	ldrb	r3, [r4, #26]
   37ed0:	ldr	r1, [r4, #20]
   37ed4:	clz	r3, r3
   37ed8:	lsr	r3, r3, #5
   37edc:	add	r2, r1, r3
   37ee0:	add	r2, r2, #1
   37ee4:	str	r2, [r4, #20]
   37ee8:	strb	ip, [r1, r3]
   37eec:	ldr	r3, [r4, #20]
   37ef0:	strb	r0, [r3]
   37ef4:	ldrb	r2, [r4, #25]
   37ef8:	ldr	r3, [r4, #20]
   37efc:	cmp	r2, #0
   37f00:	addne	r3, r3, #1
   37f04:	mov	r0, r3
   37f08:	str	r3, [r4, #20]
   37f0c:	bl	34820 <flatcc_json_parser_struct_as_root@@Base+0x1404>
   37f10:	ldr	r3, [r4, #20]
   37f14:	add	r0, r3, r0
   37f18:	str	r0, [r4, #20]
   37f1c:	b	37df4 <flatcc_json_printer_double_field@@Base+0x64>
   37f20:	mov	r2, r5
   37f24:	mov	r1, r6
   37f28:	mov	r0, r4
   37f2c:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   37f30:	ldr	r5, [r4, #20]
   37f34:	b	37eb8 <flatcc_json_printer_double_field@@Base+0x128>
   37f38:	add	r1, r2, #1
   37f3c:	mov	r3, #10
   37f40:	str	r1, [r0, #20]
   37f44:	strb	r3, [r2]
   37f48:	ldrb	r7, [r0, #25]
   37f4c:	ldr	r2, [r4, #32]
   37f50:	ldr	r1, [r0, #16]
   37f54:	ldr	r0, [r0, #20]
   37f58:	mul	r7, r2, r7
   37f5c:	add	r3, r0, r7
   37f60:	cmp	r1, r3
   37f64:	bcs	37f7c <flatcc_json_printer_double_field@@Base+0x1ec>
   37f68:	mov	r1, r7
   37f6c:	mov	r0, r4
   37f70:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   37f74:	ldr	r2, [r4, #20]
   37f78:	b	37e74 <flatcc_json_printer_double_field@@Base+0xe4>
   37f7c:	mov	r2, r7
   37f80:	mov	r1, #32
   37f84:	bl	1459c <memset@plt>
   37f88:	ldr	r2, [r4, #20]
   37f8c:	add	r2, r2, r7
   37f90:	str	r2, [r4, #20]
   37f94:	b	37e74 <flatcc_json_printer_double_field@@Base+0xe4>

00037f98 <flatcc_json_printer_uint8_enum_field@@Base>:
   37f98:	ldr	ip, [r1, #8]
   37f9c:	add	r2, r2, #2
   37fa0:	lsl	r2, r2, #1
   37fa4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   37fa8:	strd	r6, [sp, #8]
   37fac:	strd	r8, [sp, #16]
   37fb0:	str	sl, [sp, #24]
   37fb4:	cmp	r2, ip
   37fb8:	str	lr, [sp, #28]
   37fbc:	ldrb	lr, [sp, #36]	; 0x24
   37fc0:	ldr	r7, [sp, #32]
   37fc4:	ldr	r5, [sp, #40]	; 0x28
   37fc8:	bge	38110 <flatcc_json_printer_uint8_enum_field@@Base+0x178>
   37fcc:	ldr	ip, [r1, #4]
   37fd0:	ldrh	r2, [ip, r2]
   37fd4:	cmp	r2, #0
   37fd8:	beq	38110 <flatcc_json_printer_uint8_enum_field@@Base+0x178>
   37fdc:	ldr	ip, [r1]
   37fe0:	cmn	ip, r2
   37fe4:	beq	38110 <flatcc_json_printer_uint8_enum_field@@Base+0x178>
   37fe8:	ldrb	r6, [ip, r2]
   37fec:	cmp	lr, r6
   37ff0:	beq	381c8 <flatcc_json_printer_uint8_enum_field@@Base+0x230>
   37ff4:	ldr	ip, [r1, #16]
   37ff8:	ldr	r2, [r0, #20]
   37ffc:	cmp	ip, #0
   38000:	add	ip, ip, #1
   38004:	str	ip, [r1, #16]
   38008:	beq	38020 <flatcc_json_printer_uint8_enum_field@@Base+0x88>
   3800c:	add	ip, r2, #1
   38010:	mov	r1, #44	; 0x2c
   38014:	str	ip, [r0, #20]
   38018:	strb	r1, [r2]
   3801c:	ldr	r2, [r0, #20]
   38020:	mov	r8, r3
   38024:	mov	r4, r0
   38028:	ldrb	r1, [r0, #25]
   3802c:	cmp	r1, #0
   38030:	bne	38168 <flatcc_json_printer_uint8_enum_field@@Base+0x1d0>
   38034:	ldr	r3, [r0, #16]
   38038:	cmp	r3, r2
   3803c:	bhi	3804c <flatcc_json_printer_uint8_enum_field@@Base+0xb4>
   38040:	ldr	r3, [r0, #44]	; 0x2c
   38044:	blx	r3
   38048:	ldr	r2, [r4, #20]
   3804c:	mov	r3, #34	; 0x22
   38050:	strb	r3, [r2]
   38054:	ldrb	r3, [r4, #26]
   38058:	ldr	r2, [r4, #16]
   3805c:	ldr	r0, [r4, #20]
   38060:	cmp	r3, #0
   38064:	addeq	r0, r0, #1
   38068:	add	r3, r0, r7
   3806c:	cmp	r2, r3
   38070:	str	r0, [r4, #20]
   38074:	bls	38150 <flatcc_json_printer_uint8_enum_field@@Base+0x1b8>
   38078:	mov	r2, r7
   3807c:	mov	r1, r8
   38080:	bl	14524 <memcpy@plt>
   38084:	ldr	r3, [r4, #20]
   38088:	add	r7, r3, r7
   3808c:	str	r7, [r4, #20]
   38090:	mov	r3, #34	; 0x22
   38094:	mov	ip, #58	; 0x3a
   38098:	mov	r0, #32
   3809c:	strb	r3, [r7]
   380a0:	ldrb	r3, [r4, #26]
   380a4:	ldr	r1, [r4, #20]
   380a8:	clz	r3, r3
   380ac:	lsr	r3, r3, #5
   380b0:	add	r2, r1, r3
   380b4:	add	r2, r2, #1
   380b8:	str	r2, [r4, #20]
   380bc:	strb	ip, [r1, r3]
   380c0:	ldr	r3, [r4, #20]
   380c4:	strb	r0, [r3]
   380c8:	ldrb	r2, [r4, #25]
   380cc:	ldr	r1, [r4, #20]
   380d0:	ldrb	r3, [r4, #27]
   380d4:	cmp	r2, #0
   380d8:	addne	r1, r1, #1
   380dc:	cmp	r3, #0
   380e0:	str	r1, [r4, #20]
   380e4:	bne	38124 <flatcc_json_printer_uint8_enum_field@@Base+0x18c>
   380e8:	mov	r1, r6
   380ec:	mov	r0, r4
   380f0:	ldrd	r6, [sp, #8]
   380f4:	mov	r3, r5
   380f8:	ldrd	r4, [sp]
   380fc:	ldrd	r8, [sp, #16]
   38100:	ldr	sl, [sp, #24]
   38104:	ldr	lr, [sp, #28]
   38108:	add	sp, sp, #32
   3810c:	bx	r3
   38110:	ldrb	r2, [r0, #29]
   38114:	cmp	r2, #0
   38118:	beq	38138 <flatcc_json_printer_uint8_enum_field@@Base+0x1a0>
   3811c:	mov	r6, lr
   38120:	b	37ff4 <flatcc_json_printer_uint8_enum_field@@Base+0x5c>
   38124:	mov	r0, r6
   38128:	bl	3436c <flatcc_json_parser_struct_as_root@@Base+0xf50>
   3812c:	ldr	r3, [r4, #20]
   38130:	add	r0, r3, r0
   38134:	str	r0, [r4, #20]
   38138:	ldrd	r4, [sp]
   3813c:	ldrd	r6, [sp, #8]
   38140:	ldrd	r8, [sp, #16]
   38144:	ldr	sl, [sp, #24]
   38148:	add	sp, sp, #28
   3814c:	pop	{pc}		; (ldr pc, [sp], #4)
   38150:	mov	r2, r7
   38154:	mov	r1, r8
   38158:	mov	r0, r4
   3815c:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   38160:	ldr	r7, [r4, #20]
   38164:	b	38090 <flatcc_json_printer_uint8_enum_field@@Base+0xf8>
   38168:	add	r1, r2, #1
   3816c:	mov	r3, #10
   38170:	str	r1, [r0, #20]
   38174:	strb	r3, [r2]
   38178:	ldrb	r3, [r0, #25]
   3817c:	ldr	r2, [r4, #32]
   38180:	ldr	r1, [r0, #16]
   38184:	ldr	r0, [r0, #20]
   38188:	mul	r9, r2, r3
   3818c:	add	r3, r0, r9
   38190:	cmp	r1, r3
   38194:	bcs	381ac <flatcc_json_printer_uint8_enum_field@@Base+0x214>
   38198:	mov	r1, r9
   3819c:	mov	r0, r4
   381a0:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   381a4:	ldr	r2, [r4, #20]
   381a8:	b	3804c <flatcc_json_printer_uint8_enum_field@@Base+0xb4>
   381ac:	mov	r2, r9
   381b0:	mov	r1, #32
   381b4:	bl	1459c <memset@plt>
   381b8:	ldr	r2, [r4, #20]
   381bc:	add	r2, r2, r9
   381c0:	str	r2, [r4, #20]
   381c4:	b	3804c <flatcc_json_printer_uint8_enum_field@@Base+0xb4>
   381c8:	ldrb	r2, [r0, #28]
   381cc:	cmp	r2, #0
   381d0:	beq	37ff4 <flatcc_json_printer_uint8_enum_field@@Base+0x5c>
   381d4:	b	38138 <flatcc_json_printer_uint8_enum_field@@Base+0x1a0>

000381d8 <flatcc_json_printer_uint16_enum_field@@Base>:
   381d8:	ldr	ip, [r1, #8]
   381dc:	add	r2, r2, #2
   381e0:	lsl	r2, r2, #1
   381e4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   381e8:	strd	r6, [sp, #8]
   381ec:	strd	r8, [sp, #16]
   381f0:	str	sl, [sp, #24]
   381f4:	cmp	r2, ip
   381f8:	str	lr, [sp, #28]
   381fc:	ldrh	lr, [sp, #36]	; 0x24
   38200:	ldr	r7, [sp, #32]
   38204:	ldr	r5, [sp, #40]	; 0x28
   38208:	bge	38350 <flatcc_json_printer_uint16_enum_field@@Base+0x178>
   3820c:	ldr	ip, [r1, #4]
   38210:	ldrh	r2, [ip, r2]
   38214:	cmp	r2, #0
   38218:	beq	38350 <flatcc_json_printer_uint16_enum_field@@Base+0x178>
   3821c:	ldr	ip, [r1]
   38220:	cmn	ip, r2
   38224:	beq	38350 <flatcc_json_printer_uint16_enum_field@@Base+0x178>
   38228:	ldrh	r6, [ip, r2]
   3822c:	cmp	lr, r6
   38230:	beq	38408 <flatcc_json_printer_uint16_enum_field@@Base+0x230>
   38234:	ldr	ip, [r1, #16]
   38238:	ldr	r2, [r0, #20]
   3823c:	cmp	ip, #0
   38240:	add	ip, ip, #1
   38244:	str	ip, [r1, #16]
   38248:	beq	38260 <flatcc_json_printer_uint16_enum_field@@Base+0x88>
   3824c:	add	ip, r2, #1
   38250:	mov	r1, #44	; 0x2c
   38254:	str	ip, [r0, #20]
   38258:	strb	r1, [r2]
   3825c:	ldr	r2, [r0, #20]
   38260:	mov	r8, r3
   38264:	mov	r4, r0
   38268:	ldrb	r1, [r0, #25]
   3826c:	cmp	r1, #0
   38270:	bne	383a8 <flatcc_json_printer_uint16_enum_field@@Base+0x1d0>
   38274:	ldr	r3, [r0, #16]
   38278:	cmp	r3, r2
   3827c:	bhi	3828c <flatcc_json_printer_uint16_enum_field@@Base+0xb4>
   38280:	ldr	r3, [r0, #44]	; 0x2c
   38284:	blx	r3
   38288:	ldr	r2, [r4, #20]
   3828c:	mov	r3, #34	; 0x22
   38290:	strb	r3, [r2]
   38294:	ldrb	r3, [r4, #26]
   38298:	ldr	r2, [r4, #16]
   3829c:	ldr	r0, [r4, #20]
   382a0:	cmp	r3, #0
   382a4:	addeq	r0, r0, #1
   382a8:	add	r3, r0, r7
   382ac:	cmp	r2, r3
   382b0:	str	r0, [r4, #20]
   382b4:	bls	38390 <flatcc_json_printer_uint16_enum_field@@Base+0x1b8>
   382b8:	mov	r2, r7
   382bc:	mov	r1, r8
   382c0:	bl	14524 <memcpy@plt>
   382c4:	ldr	r3, [r4, #20]
   382c8:	add	r7, r3, r7
   382cc:	str	r7, [r4, #20]
   382d0:	mov	r3, #34	; 0x22
   382d4:	mov	ip, #58	; 0x3a
   382d8:	mov	r0, #32
   382dc:	strb	r3, [r7]
   382e0:	ldrb	r3, [r4, #26]
   382e4:	ldr	r1, [r4, #20]
   382e8:	clz	r3, r3
   382ec:	lsr	r3, r3, #5
   382f0:	add	r2, r1, r3
   382f4:	add	r2, r2, #1
   382f8:	str	r2, [r4, #20]
   382fc:	strb	ip, [r1, r3]
   38300:	ldr	r3, [r4, #20]
   38304:	strb	r0, [r3]
   38308:	ldrb	r2, [r4, #25]
   3830c:	ldr	r1, [r4, #20]
   38310:	ldrb	r3, [r4, #27]
   38314:	cmp	r2, #0
   38318:	addne	r1, r1, #1
   3831c:	cmp	r3, #0
   38320:	str	r1, [r4, #20]
   38324:	bne	38364 <flatcc_json_printer_uint16_enum_field@@Base+0x18c>
   38328:	mov	r1, r6
   3832c:	mov	r0, r4
   38330:	ldrd	r6, [sp, #8]
   38334:	mov	r3, r5
   38338:	ldrd	r4, [sp]
   3833c:	ldrd	r8, [sp, #16]
   38340:	ldr	sl, [sp, #24]
   38344:	ldr	lr, [sp, #28]
   38348:	add	sp, sp, #32
   3834c:	bx	r3
   38350:	ldrb	r2, [r0, #29]
   38354:	cmp	r2, #0
   38358:	beq	38378 <flatcc_json_printer_uint16_enum_field@@Base+0x1a0>
   3835c:	mov	r6, lr
   38360:	b	38234 <flatcc_json_printer_uint16_enum_field@@Base+0x5c>
   38364:	mov	r0, r6
   38368:	bl	334f0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   3836c:	ldr	r3, [r4, #20]
   38370:	add	r0, r3, r0
   38374:	str	r0, [r4, #20]
   38378:	ldrd	r4, [sp]
   3837c:	ldrd	r6, [sp, #8]
   38380:	ldrd	r8, [sp, #16]
   38384:	ldr	sl, [sp, #24]
   38388:	add	sp, sp, #28
   3838c:	pop	{pc}		; (ldr pc, [sp], #4)
   38390:	mov	r2, r7
   38394:	mov	r1, r8
   38398:	mov	r0, r4
   3839c:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   383a0:	ldr	r7, [r4, #20]
   383a4:	b	382d0 <flatcc_json_printer_uint16_enum_field@@Base+0xf8>
   383a8:	add	r1, r2, #1
   383ac:	mov	r3, #10
   383b0:	str	r1, [r0, #20]
   383b4:	strb	r3, [r2]
   383b8:	ldrb	r3, [r0, #25]
   383bc:	ldr	r2, [r4, #32]
   383c0:	ldr	r1, [r0, #16]
   383c4:	ldr	r0, [r0, #20]
   383c8:	mul	r9, r2, r3
   383cc:	add	r3, r0, r9
   383d0:	cmp	r1, r3
   383d4:	bcs	383ec <flatcc_json_printer_uint16_enum_field@@Base+0x214>
   383d8:	mov	r1, r9
   383dc:	mov	r0, r4
   383e0:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   383e4:	ldr	r2, [r4, #20]
   383e8:	b	3828c <flatcc_json_printer_uint16_enum_field@@Base+0xb4>
   383ec:	mov	r2, r9
   383f0:	mov	r1, #32
   383f4:	bl	1459c <memset@plt>
   383f8:	ldr	r2, [r4, #20]
   383fc:	add	r2, r2, r9
   38400:	str	r2, [r4, #20]
   38404:	b	3828c <flatcc_json_printer_uint16_enum_field@@Base+0xb4>
   38408:	ldrb	r2, [r0, #28]
   3840c:	cmp	r2, #0
   38410:	beq	38234 <flatcc_json_printer_uint16_enum_field@@Base+0x5c>
   38414:	b	38378 <flatcc_json_printer_uint16_enum_field@@Base+0x1a0>

00038418 <flatcc_json_printer_uint32_enum_field@@Base>:
   38418:	ldr	ip, [r1, #8]
   3841c:	add	r2, r2, #2
   38420:	lsl	r2, r2, #1
   38424:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38428:	strd	r6, [sp, #8]
   3842c:	strd	r8, [sp, #16]
   38430:	str	sl, [sp, #24]
   38434:	cmp	r2, ip
   38438:	str	lr, [sp, #28]
   3843c:	ldr	r5, [sp, #32]
   38440:	ldr	lr, [sp, #36]	; 0x24
   38444:	ldr	r6, [sp, #40]	; 0x28
   38448:	bge	38590 <flatcc_json_printer_uint32_enum_field@@Base+0x178>
   3844c:	ldr	ip, [r1, #4]
   38450:	ldrh	r2, [ip, r2]
   38454:	cmp	r2, #0
   38458:	beq	38590 <flatcc_json_printer_uint32_enum_field@@Base+0x178>
   3845c:	ldr	ip, [r1]
   38460:	cmn	ip, r2
   38464:	beq	38590 <flatcc_json_printer_uint32_enum_field@@Base+0x178>
   38468:	ldr	r7, [ip, r2]
   3846c:	cmp	lr, r7
   38470:	beq	38648 <flatcc_json_printer_uint32_enum_field@@Base+0x230>
   38474:	ldr	ip, [r1, #16]
   38478:	ldr	r2, [r0, #20]
   3847c:	cmp	ip, #0
   38480:	add	ip, ip, #1
   38484:	str	ip, [r1, #16]
   38488:	beq	384a0 <flatcc_json_printer_uint32_enum_field@@Base+0x88>
   3848c:	add	ip, r2, #1
   38490:	mov	r1, #44	; 0x2c
   38494:	str	ip, [r0, #20]
   38498:	strb	r1, [r2]
   3849c:	ldr	r2, [r0, #20]
   384a0:	mov	r8, r3
   384a4:	mov	r4, r0
   384a8:	ldrb	r1, [r0, #25]
   384ac:	cmp	r1, #0
   384b0:	bne	385e8 <flatcc_json_printer_uint32_enum_field@@Base+0x1d0>
   384b4:	ldr	r3, [r0, #16]
   384b8:	cmp	r3, r2
   384bc:	bhi	384cc <flatcc_json_printer_uint32_enum_field@@Base+0xb4>
   384c0:	ldr	r3, [r0, #44]	; 0x2c
   384c4:	blx	r3
   384c8:	ldr	r2, [r4, #20]
   384cc:	mov	r3, #34	; 0x22
   384d0:	strb	r3, [r2]
   384d4:	ldrb	r3, [r4, #26]
   384d8:	ldr	r2, [r4, #16]
   384dc:	ldr	r0, [r4, #20]
   384e0:	cmp	r3, #0
   384e4:	addeq	r0, r0, #1
   384e8:	add	r3, r0, r5
   384ec:	cmp	r2, r3
   384f0:	str	r0, [r4, #20]
   384f4:	bls	385d0 <flatcc_json_printer_uint32_enum_field@@Base+0x1b8>
   384f8:	mov	r2, r5
   384fc:	mov	r1, r8
   38500:	bl	14524 <memcpy@plt>
   38504:	ldr	r3, [r4, #20]
   38508:	add	r5, r3, r5
   3850c:	str	r5, [r4, #20]
   38510:	mov	r3, #34	; 0x22
   38514:	mov	ip, #58	; 0x3a
   38518:	mov	r0, #32
   3851c:	strb	r3, [r5]
   38520:	ldrb	r3, [r4, #26]
   38524:	ldr	r1, [r4, #20]
   38528:	clz	r3, r3
   3852c:	lsr	r3, r3, #5
   38530:	add	r2, r1, r3
   38534:	add	r2, r2, #1
   38538:	str	r2, [r4, #20]
   3853c:	strb	ip, [r1, r3]
   38540:	ldr	r3, [r4, #20]
   38544:	strb	r0, [r3]
   38548:	ldrb	r2, [r4, #25]
   3854c:	ldr	r1, [r4, #20]
   38550:	ldrb	r3, [r4, #27]
   38554:	cmp	r2, #0
   38558:	addne	r1, r1, #1
   3855c:	cmp	r3, #0
   38560:	str	r1, [r4, #20]
   38564:	bne	385a4 <flatcc_json_printer_uint32_enum_field@@Base+0x18c>
   38568:	mov	r1, r7
   3856c:	mov	r0, r4
   38570:	ldrd	r4, [sp]
   38574:	mov	r3, r6
   38578:	ldrd	r6, [sp, #8]
   3857c:	ldrd	r8, [sp, #16]
   38580:	ldr	sl, [sp, #24]
   38584:	ldr	lr, [sp, #28]
   38588:	add	sp, sp, #32
   3858c:	bx	r3
   38590:	ldrb	r2, [r0, #29]
   38594:	cmp	r2, #0
   38598:	beq	385b8 <flatcc_json_printer_uint32_enum_field@@Base+0x1a0>
   3859c:	mov	r7, lr
   385a0:	b	38474 <flatcc_json_printer_uint32_enum_field@@Base+0x5c>
   385a4:	mov	r0, r7
   385a8:	bl	33648 <flatcc_json_parser_struct_as_root@@Base+0x22c>
   385ac:	ldr	r3, [r4, #20]
   385b0:	add	r0, r3, r0
   385b4:	str	r0, [r4, #20]
   385b8:	ldrd	r4, [sp]
   385bc:	ldrd	r6, [sp, #8]
   385c0:	ldrd	r8, [sp, #16]
   385c4:	ldr	sl, [sp, #24]
   385c8:	add	sp, sp, #28
   385cc:	pop	{pc}		; (ldr pc, [sp], #4)
   385d0:	mov	r2, r5
   385d4:	mov	r1, r8
   385d8:	mov	r0, r4
   385dc:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   385e0:	ldr	r5, [r4, #20]
   385e4:	b	38510 <flatcc_json_printer_uint32_enum_field@@Base+0xf8>
   385e8:	add	r1, r2, #1
   385ec:	mov	r3, #10
   385f0:	str	r1, [r0, #20]
   385f4:	strb	r3, [r2]
   385f8:	ldrb	r3, [r0, #25]
   385fc:	ldr	r2, [r4, #32]
   38600:	ldr	r1, [r0, #16]
   38604:	ldr	r0, [r0, #20]
   38608:	mul	r9, r2, r3
   3860c:	add	r3, r0, r9
   38610:	cmp	r1, r3
   38614:	bcs	3862c <flatcc_json_printer_uint32_enum_field@@Base+0x214>
   38618:	mov	r1, r9
   3861c:	mov	r0, r4
   38620:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   38624:	ldr	r2, [r4, #20]
   38628:	b	384cc <flatcc_json_printer_uint32_enum_field@@Base+0xb4>
   3862c:	mov	r2, r9
   38630:	mov	r1, #32
   38634:	bl	1459c <memset@plt>
   38638:	ldr	r2, [r4, #20]
   3863c:	add	r2, r2, r9
   38640:	str	r2, [r4, #20]
   38644:	b	384cc <flatcc_json_printer_uint32_enum_field@@Base+0xb4>
   38648:	ldrb	r2, [r0, #28]
   3864c:	cmp	r2, #0
   38650:	beq	38474 <flatcc_json_printer_uint32_enum_field@@Base+0x5c>
   38654:	b	385b8 <flatcc_json_printer_uint32_enum_field@@Base+0x1a0>

00038658 <flatcc_json_printer_uint64_enum_field@@Base>:
   38658:	ldr	ip, [r1, #8]
   3865c:	add	r2, r2, #2
   38660:	lsl	r2, r2, #1
   38664:	strd	r4, [sp, #-36]!	; 0xffffffdc
   38668:	strd	r6, [sp, #8]
   3866c:	strd	r8, [sp, #16]
   38670:	strd	sl, [sp, #24]
   38674:	cmp	r2, ip
   38678:	str	lr, [sp, #32]
   3867c:	sub	sp, sp, #4
   38680:	ldr	r8, [sp, #40]	; 0x28
   38684:	ldrd	sl, [sp, #48]	; 0x30
   38688:	ldr	r5, [sp, #56]	; 0x38
   3868c:	bge	387e0 <flatcc_json_printer_uint64_enum_field@@Base+0x188>
   38690:	ldr	ip, [r1, #4]
   38694:	ldrh	r2, [ip, r2]
   38698:	cmp	r2, #0
   3869c:	beq	387e0 <flatcc_json_printer_uint64_enum_field@@Base+0x188>
   386a0:	ldr	ip, [r1]
   386a4:	cmn	ip, r2
   386a8:	beq	387e0 <flatcc_json_printer_uint64_enum_field@@Base+0x188>
   386ac:	ldrd	r6, [ip, r2]
   386b0:	cmp	fp, r7
   386b4:	cmpeq	sl, r6
   386b8:	beq	388a4 <flatcc_json_printer_uint64_enum_field@@Base+0x24c>
   386bc:	ldr	ip, [r1, #16]
   386c0:	ldr	r2, [r0, #20]
   386c4:	cmp	ip, #0
   386c8:	add	ip, ip, #1
   386cc:	str	ip, [r1, #16]
   386d0:	beq	386e8 <flatcc_json_printer_uint64_enum_field@@Base+0x90>
   386d4:	add	ip, r2, #1
   386d8:	mov	r1, #44	; 0x2c
   386dc:	str	ip, [r0, #20]
   386e0:	strb	r1, [r2]
   386e4:	ldr	r2, [r0, #20]
   386e8:	mov	r9, r3
   386ec:	mov	r4, r0
   386f0:	ldrb	r1, [r0, #25]
   386f4:	cmp	r1, #0
   386f8:	bne	38844 <flatcc_json_printer_uint64_enum_field@@Base+0x1ec>
   386fc:	ldr	r3, [r0, #16]
   38700:	cmp	r3, r2
   38704:	bhi	38714 <flatcc_json_printer_uint64_enum_field@@Base+0xbc>
   38708:	ldr	r3, [r0, #44]	; 0x2c
   3870c:	blx	r3
   38710:	ldr	r2, [r4, #20]
   38714:	mov	r3, #34	; 0x22
   38718:	strb	r3, [r2]
   3871c:	ldrb	r3, [r4, #26]
   38720:	ldr	r2, [r4, #16]
   38724:	ldr	r0, [r4, #20]
   38728:	cmp	r3, #0
   3872c:	addeq	r0, r0, #1
   38730:	add	r3, r0, r8
   38734:	cmp	r2, r3
   38738:	str	r0, [r4, #20]
   3873c:	bls	3882c <flatcc_json_printer_uint64_enum_field@@Base+0x1d4>
   38740:	mov	r2, r8
   38744:	mov	r1, r9
   38748:	bl	14524 <memcpy@plt>
   3874c:	ldr	r3, [r4, #20]
   38750:	add	r8, r3, r8
   38754:	str	r8, [r4, #20]
   38758:	mov	r3, #34	; 0x22
   3875c:	mov	ip, #58	; 0x3a
   38760:	mov	r0, #32
   38764:	strb	r3, [r8]
   38768:	ldrb	r3, [r4, #26]
   3876c:	ldr	r1, [r4, #20]
   38770:	clz	r3, r3
   38774:	lsr	r3, r3, #5
   38778:	add	r2, r1, r3
   3877c:	add	r2, r2, #1
   38780:	str	r2, [r4, #20]
   38784:	strb	ip, [r1, r3]
   38788:	ldr	r3, [r4, #20]
   3878c:	strb	r0, [r3]
   38790:	ldrb	r1, [r4, #25]
   38794:	ldr	r2, [r4, #20]
   38798:	ldrb	r3, [r4, #27]
   3879c:	cmp	r1, #0
   387a0:	addne	r2, r2, #1
   387a4:	cmp	r3, #0
   387a8:	str	r2, [r4, #20]
   387ac:	bne	387f8 <flatcc_json_printer_uint64_enum_field@@Base+0x1a0>
   387b0:	mov	r2, r6
   387b4:	mov	r3, r7
   387b8:	mov	r0, r4
   387bc:	mov	r1, r5
   387c0:	add	sp, sp, #4
   387c4:	ldrd	r4, [sp]
   387c8:	ldrd	r6, [sp, #8]
   387cc:	ldrd	r8, [sp, #16]
   387d0:	ldrd	sl, [sp, #24]
   387d4:	ldr	lr, [sp, #32]
   387d8:	add	sp, sp, #36	; 0x24
   387dc:	bx	r1
   387e0:	ldrb	r2, [r0, #29]
   387e4:	cmp	r2, #0
   387e8:	beq	38810 <flatcc_json_printer_uint64_enum_field@@Base+0x1b8>
   387ec:	mov	r6, sl
   387f0:	mov	r7, fp
   387f4:	b	386bc <flatcc_json_printer_uint64_enum_field@@Base+0x64>
   387f8:	mov	r0, r6
   387fc:	mov	r1, r7
   38800:	bl	3395c <flatcc_json_parser_struct_as_root@@Base+0x540>
   38804:	ldr	r3, [r4, #20]
   38808:	add	r0, r3, r0
   3880c:	str	r0, [r4, #20]
   38810:	add	sp, sp, #4
   38814:	ldrd	r4, [sp]
   38818:	ldrd	r6, [sp, #8]
   3881c:	ldrd	r8, [sp, #16]
   38820:	ldrd	sl, [sp, #24]
   38824:	add	sp, sp, #32
   38828:	pop	{pc}		; (ldr pc, [sp], #4)
   3882c:	mov	r2, r8
   38830:	mov	r1, r9
   38834:	mov	r0, r4
   38838:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   3883c:	ldr	r8, [r4, #20]
   38840:	b	38758 <flatcc_json_printer_uint64_enum_field@@Base+0x100>
   38844:	add	r1, r2, #1
   38848:	mov	r3, #10
   3884c:	str	r1, [r0, #20]
   38850:	strb	r3, [r2]
   38854:	ldrb	r3, [r0, #25]
   38858:	ldr	r2, [r4, #32]
   3885c:	ldr	r1, [r0, #16]
   38860:	ldr	r0, [r0, #20]
   38864:	mul	sl, r2, r3
   38868:	add	r3, r0, sl
   3886c:	cmp	r1, r3
   38870:	bcs	38888 <flatcc_json_printer_uint64_enum_field@@Base+0x230>
   38874:	mov	r1, sl
   38878:	mov	r0, r4
   3887c:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   38880:	ldr	r2, [r4, #20]
   38884:	b	38714 <flatcc_json_printer_uint64_enum_field@@Base+0xbc>
   38888:	mov	r2, sl
   3888c:	mov	r1, #32
   38890:	bl	1459c <memset@plt>
   38894:	ldr	r2, [r4, #20]
   38898:	add	r2, r2, sl
   3889c:	str	r2, [r4, #20]
   388a0:	b	38714 <flatcc_json_printer_uint64_enum_field@@Base+0xbc>
   388a4:	ldrb	r2, [r0, #28]
   388a8:	cmp	r2, #0
   388ac:	beq	386bc <flatcc_json_printer_uint64_enum_field@@Base+0x64>
   388b0:	b	38810 <flatcc_json_printer_uint64_enum_field@@Base+0x1b8>

000388b4 <flatcc_json_printer_int8_enum_field@@Base>:
   388b4:	ldr	ip, [r1, #8]
   388b8:	add	r2, r2, #2
   388bc:	lsl	r2, r2, #1
   388c0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   388c4:	strd	r6, [sp, #8]
   388c8:	strd	r8, [sp, #16]
   388cc:	str	sl, [sp, #24]
   388d0:	cmp	r2, ip
   388d4:	str	lr, [sp, #28]
   388d8:	ldrsb	lr, [sp, #36]	; 0x24
   388dc:	ldr	r7, [sp, #32]
   388e0:	ldr	r6, [sp, #40]	; 0x28
   388e4:	bge	38a78 <flatcc_json_printer_int8_enum_field@@Base+0x1c4>
   388e8:	ldr	ip, [r1, #4]
   388ec:	ldrh	r2, [ip, r2]
   388f0:	cmp	r2, #0
   388f4:	beq	38a78 <flatcc_json_printer_int8_enum_field@@Base+0x1c4>
   388f8:	ldr	ip, [r1]
   388fc:	cmn	ip, r2
   38900:	beq	38a78 <flatcc_json_printer_int8_enum_field@@Base+0x1c4>
   38904:	ldrsb	r5, [ip, r2]
   38908:	cmp	lr, r5
   3890c:	beq	38b2c <flatcc_json_printer_int8_enum_field@@Base+0x278>
   38910:	ldr	ip, [r1, #16]
   38914:	ldr	r2, [r0, #20]
   38918:	cmp	ip, #0
   3891c:	add	ip, ip, #1
   38920:	str	ip, [r1, #16]
   38924:	beq	3893c <flatcc_json_printer_int8_enum_field@@Base+0x88>
   38928:	add	ip, r2, #1
   3892c:	mov	r1, #44	; 0x2c
   38930:	str	ip, [r0, #20]
   38934:	strb	r1, [r2]
   38938:	ldr	r2, [r0, #20]
   3893c:	mov	r8, r3
   38940:	mov	r4, r0
   38944:	ldrb	r1, [r0, #25]
   38948:	cmp	r1, #0
   3894c:	bne	38acc <flatcc_json_printer_int8_enum_field@@Base+0x218>
   38950:	ldr	r3, [r0, #16]
   38954:	cmp	r3, r2
   38958:	bhi	38968 <flatcc_json_printer_int8_enum_field@@Base+0xb4>
   3895c:	ldr	r3, [r0, #44]	; 0x2c
   38960:	blx	r3
   38964:	ldr	r2, [r4, #20]
   38968:	mov	r3, #34	; 0x22
   3896c:	strb	r3, [r2]
   38970:	ldrb	r3, [r4, #26]
   38974:	ldr	r2, [r4, #16]
   38978:	ldr	r0, [r4, #20]
   3897c:	cmp	r3, #0
   38980:	addeq	r0, r0, #1
   38984:	add	r3, r0, r7
   38988:	cmp	r2, r3
   3898c:	str	r0, [r4, #20]
   38990:	bls	38ab4 <flatcc_json_printer_int8_enum_field@@Base+0x200>
   38994:	mov	r2, r7
   38998:	mov	r1, r8
   3899c:	bl	14524 <memcpy@plt>
   389a0:	ldr	r3, [r4, #20]
   389a4:	add	r7, r3, r7
   389a8:	str	r7, [r4, #20]
   389ac:	mov	r3, #34	; 0x22
   389b0:	mov	ip, #58	; 0x3a
   389b4:	mov	r0, #32
   389b8:	strb	r3, [r7]
   389bc:	ldrb	r3, [r4, #26]
   389c0:	ldr	r1, [r4, #20]
   389c4:	clz	r3, r3
   389c8:	lsr	r3, r3, #5
   389cc:	add	r2, r1, r3
   389d0:	add	r2, r2, #1
   389d4:	str	r2, [r4, #20]
   389d8:	strb	ip, [r1, r3]
   389dc:	ldr	r3, [r4, #20]
   389e0:	strb	r0, [r3]
   389e4:	ldrb	r3, [r4, #25]
   389e8:	ldr	r1, [r4, #20]
   389ec:	ldrb	r0, [r4, #27]
   389f0:	adds	r3, r3, #0
   389f4:	movne	r3, #1
   389f8:	add	r2, r1, r3
   389fc:	cmp	r0, #0
   38a00:	str	r2, [r4, #20]
   38a04:	beq	38a8c <flatcc_json_printer_int8_enum_field@@Base+0x1d8>
   38a08:	cmp	r5, #0
   38a0c:	lsr	r0, r5, #31
   38a10:	uxtb	r5, r5
   38a14:	bge	38a2c <flatcc_json_printer_int8_enum_field@@Base+0x178>
   38a18:	rsb	r5, r5, #0
   38a1c:	mov	ip, #45	; 0x2d
   38a20:	add	r2, r2, #1
   38a24:	uxtb	r5, r5
   38a28:	strb	ip, [r1, r3]
   38a2c:	cmp	r5, #99	; 0x63
   38a30:	bhi	38b3c <flatcc_json_printer_int8_enum_field@@Base+0x288>
   38a34:	cmp	r5, #9
   38a38:	bhi	38b8c <flatcc_json_printer_int8_enum_field@@Base+0x2d8>
   38a3c:	add	r5, r5, #48	; 0x30
   38a40:	mov	r1, #0
   38a44:	mov	lr, #1
   38a48:	strb	r5, [r2]
   38a4c:	strb	r1, [r2, #1]
   38a50:	ldr	r3, [r4, #20]
   38a54:	add	r2, r0, lr
   38a58:	add	r3, r3, r2
   38a5c:	str	r3, [r4, #20]
   38a60:	ldrd	r4, [sp]
   38a64:	ldrd	r6, [sp, #8]
   38a68:	ldrd	r8, [sp, #16]
   38a6c:	ldr	sl, [sp, #24]
   38a70:	add	sp, sp, #28
   38a74:	pop	{pc}		; (ldr pc, [sp], #4)
   38a78:	ldrb	r2, [r0, #29]
   38a7c:	cmp	r2, #0
   38a80:	beq	38a60 <flatcc_json_printer_int8_enum_field@@Base+0x1ac>
   38a84:	mov	r5, lr
   38a88:	b	38910 <flatcc_json_printer_int8_enum_field@@Base+0x5c>
   38a8c:	mov	r1, r5
   38a90:	mov	r0, r4
   38a94:	ldrd	r4, [sp]
   38a98:	mov	r3, r6
   38a9c:	ldrd	r6, [sp, #8]
   38aa0:	ldrd	r8, [sp, #16]
   38aa4:	ldr	sl, [sp, #24]
   38aa8:	ldr	lr, [sp, #28]
   38aac:	add	sp, sp, #32
   38ab0:	bx	r3
   38ab4:	mov	r2, r7
   38ab8:	mov	r1, r8
   38abc:	mov	r0, r4
   38ac0:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   38ac4:	ldr	r7, [r4, #20]
   38ac8:	b	389ac <flatcc_json_printer_int8_enum_field@@Base+0xf8>
   38acc:	add	r1, r2, #1
   38ad0:	mov	r3, #10
   38ad4:	str	r1, [r0, #20]
   38ad8:	strb	r3, [r2]
   38adc:	ldrb	r3, [r0, #25]
   38ae0:	ldr	r2, [r4, #32]
   38ae4:	ldr	ip, [r0, #16]
   38ae8:	ldr	r0, [r0, #20]
   38aec:	mul	r9, r2, r3
   38af0:	add	r3, r0, r9
   38af4:	cmp	ip, r3
   38af8:	bcs	38b10 <flatcc_json_printer_int8_enum_field@@Base+0x25c>
   38afc:	mov	r1, r9
   38b00:	mov	r0, r4
   38b04:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   38b08:	ldr	r2, [r4, #20]
   38b0c:	b	38968 <flatcc_json_printer_int8_enum_field@@Base+0xb4>
   38b10:	mov	r2, r9
   38b14:	mov	r1, #32
   38b18:	bl	1459c <memset@plt>
   38b1c:	ldr	r2, [r4, #20]
   38b20:	add	r2, r2, r9
   38b24:	str	r2, [r4, #20]
   38b28:	b	38968 <flatcc_json_printer_int8_enum_field@@Base+0xb4>
   38b2c:	ldrb	r2, [r0, #28]
   38b30:	cmp	r2, #0
   38b34:	beq	38910 <flatcc_json_printer_int8_enum_field@@Base+0x5c>
   38b38:	b	38a60 <flatcc_json_printer_int8_enum_field@@Base+0x1ac>
   38b3c:	movw	r3, #34079	; 0x851f
   38b40:	movt	r3, #20971	; 0x51eb
   38b44:	mov	r1, #0
   38b48:	mov	r7, #100	; 0x64
   38b4c:	umull	ip, r3, r3, r5
   38b50:	movw	ip, #28992	; 0x7140
   38b54:	movt	ip, #4
   38b58:	strb	r1, [r2, #3]
   38b5c:	mov	r6, #49	; 0x31
   38b60:	mov	lr, #3
   38b64:	lsr	r1, r3, #5
   38b68:	mls	r5, r7, r1, r5
   38b6c:	uxtb	r5, r5
   38b70:	ldrb	r3, [ip, r5, lsl #1]
   38b74:	add	r5, ip, r5, lsl #1
   38b78:	strb	r3, [r2, #1]
   38b7c:	ldrb	r3, [r5, #1]
   38b80:	strb	r6, [r2]
   38b84:	strb	r3, [r2, #2]
   38b88:	b	38a50 <flatcc_json_printer_int8_enum_field@@Base+0x19c>
   38b8c:	mov	r3, #0
   38b90:	sxth	r5, r5
   38b94:	movw	r1, #28992	; 0x7140
   38b98:	movt	r1, #4
   38b9c:	strb	r3, [r2, #2]
   38ba0:	add	r3, r1, r5, lsl #1
   38ba4:	mov	lr, #2
   38ba8:	ldrb	r1, [r1, r5, lsl #1]
   38bac:	strb	r1, [r2]
   38bb0:	ldrb	r3, [r3, #1]
   38bb4:	strb	r3, [r2, #1]
   38bb8:	b	38a50 <flatcc_json_printer_int8_enum_field@@Base+0x19c>

00038bbc <flatcc_json_printer_int16_enum_field@@Base>:
   38bbc:	ldr	ip, [r1, #8]
   38bc0:	add	r2, r2, #2
   38bc4:	lsl	r2, r2, #1
   38bc8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38bcc:	strd	r6, [sp, #8]
   38bd0:	strd	r8, [sp, #16]
   38bd4:	str	sl, [sp, #24]
   38bd8:	cmp	r2, ip
   38bdc:	str	lr, [sp, #28]
   38be0:	ldrsh	lr, [sp, #36]	; 0x24
   38be4:	ldr	r7, [sp, #32]
   38be8:	ldr	r6, [sp, #40]	; 0x28
   38bec:	bge	38d60 <flatcc_json_printer_int16_enum_field@@Base+0x1a4>
   38bf0:	ldr	ip, [r1, #4]
   38bf4:	ldrh	r2, [ip, r2]
   38bf8:	cmp	r2, #0
   38bfc:	beq	38d60 <flatcc_json_printer_int16_enum_field@@Base+0x1a4>
   38c00:	ldr	ip, [r1]
   38c04:	cmn	ip, r2
   38c08:	beq	38d60 <flatcc_json_printer_int16_enum_field@@Base+0x1a4>
   38c0c:	ldrsh	r5, [ip, r2]
   38c10:	cmp	lr, r5
   38c14:	beq	38e14 <flatcc_json_printer_int16_enum_field@@Base+0x258>
   38c18:	ldr	ip, [r1, #16]
   38c1c:	ldr	r2, [r0, #20]
   38c20:	cmp	ip, #0
   38c24:	add	ip, ip, #1
   38c28:	str	ip, [r1, #16]
   38c2c:	beq	38c44 <flatcc_json_printer_int16_enum_field@@Base+0x88>
   38c30:	add	ip, r2, #1
   38c34:	mov	r1, #44	; 0x2c
   38c38:	str	ip, [r0, #20]
   38c3c:	strb	r1, [r2]
   38c40:	ldr	r2, [r0, #20]
   38c44:	mov	r8, r3
   38c48:	mov	r4, r0
   38c4c:	ldrb	r1, [r0, #25]
   38c50:	cmp	r1, #0
   38c54:	bne	38db4 <flatcc_json_printer_int16_enum_field@@Base+0x1f8>
   38c58:	ldr	r3, [r0, #16]
   38c5c:	cmp	r3, r2
   38c60:	bhi	38c70 <flatcc_json_printer_int16_enum_field@@Base+0xb4>
   38c64:	ldr	r3, [r0, #44]	; 0x2c
   38c68:	blx	r3
   38c6c:	ldr	r2, [r4, #20]
   38c70:	mov	r3, #34	; 0x22
   38c74:	strb	r3, [r2]
   38c78:	ldrb	r3, [r4, #26]
   38c7c:	ldr	r2, [r4, #16]
   38c80:	ldr	r0, [r4, #20]
   38c84:	cmp	r3, #0
   38c88:	addeq	r0, r0, #1
   38c8c:	add	r3, r0, r7
   38c90:	cmp	r2, r3
   38c94:	str	r0, [r4, #20]
   38c98:	bls	38d9c <flatcc_json_printer_int16_enum_field@@Base+0x1e0>
   38c9c:	mov	r2, r7
   38ca0:	mov	r1, r8
   38ca4:	bl	14524 <memcpy@plt>
   38ca8:	ldr	r3, [r4, #20]
   38cac:	add	r7, r3, r7
   38cb0:	str	r7, [r4, #20]
   38cb4:	mov	r3, #34	; 0x22
   38cb8:	mov	ip, #58	; 0x3a
   38cbc:	mov	r0, #32
   38cc0:	strb	r3, [r7]
   38cc4:	ldrb	r3, [r4, #26]
   38cc8:	ldr	r1, [r4, #20]
   38ccc:	clz	r3, r3
   38cd0:	lsr	r3, r3, #5
   38cd4:	add	r2, r1, r3
   38cd8:	add	r2, r2, #1
   38cdc:	str	r2, [r4, #20]
   38ce0:	strb	ip, [r1, r3]
   38ce4:	ldr	r3, [r4, #20]
   38ce8:	strb	r0, [r3]
   38cec:	ldrb	r3, [r4, #25]
   38cf0:	ldr	r2, [r4, #20]
   38cf4:	ldrb	r0, [r4, #27]
   38cf8:	adds	r3, r3, #0
   38cfc:	movne	r3, #1
   38d00:	add	r1, r2, r3
   38d04:	cmp	r0, #0
   38d08:	str	r1, [r4, #20]
   38d0c:	beq	38d74 <flatcc_json_printer_int16_enum_field@@Base+0x1b8>
   38d10:	cmp	r5, #0
   38d14:	lsr	r6, r5, #31
   38d18:	uxth	r0, r5
   38d1c:	bge	38d34 <flatcc_json_printer_int16_enum_field@@Base+0x178>
   38d20:	rsb	r0, r0, #0
   38d24:	mov	ip, #45	; 0x2d
   38d28:	add	r1, r1, #1
   38d2c:	uxth	r0, r0
   38d30:	strb	ip, [r2, r3]
   38d34:	bl	334f0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   38d38:	ldr	r3, [r4, #20]
   38d3c:	add	r0, r6, r0
   38d40:	add	r3, r3, r0
   38d44:	str	r3, [r4, #20]
   38d48:	ldrd	r4, [sp]
   38d4c:	ldrd	r6, [sp, #8]
   38d50:	ldrd	r8, [sp, #16]
   38d54:	ldr	sl, [sp, #24]
   38d58:	add	sp, sp, #28
   38d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   38d60:	ldrb	r2, [r0, #29]
   38d64:	cmp	r2, #0
   38d68:	beq	38d48 <flatcc_json_printer_int16_enum_field@@Base+0x18c>
   38d6c:	mov	r5, lr
   38d70:	b	38c18 <flatcc_json_printer_int16_enum_field@@Base+0x5c>
   38d74:	mov	r1, r5
   38d78:	mov	r0, r4
   38d7c:	ldrd	r4, [sp]
   38d80:	mov	r3, r6
   38d84:	ldrd	r6, [sp, #8]
   38d88:	ldrd	r8, [sp, #16]
   38d8c:	ldr	sl, [sp, #24]
   38d90:	ldr	lr, [sp, #28]
   38d94:	add	sp, sp, #32
   38d98:	bx	r3
   38d9c:	mov	r2, r7
   38da0:	mov	r1, r8
   38da4:	mov	r0, r4
   38da8:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   38dac:	ldr	r7, [r4, #20]
   38db0:	b	38cb4 <flatcc_json_printer_int16_enum_field@@Base+0xf8>
   38db4:	add	r1, r2, #1
   38db8:	mov	r3, #10
   38dbc:	str	r1, [r0, #20]
   38dc0:	strb	r3, [r2]
   38dc4:	ldrb	r3, [r0, #25]
   38dc8:	ldr	r2, [r4, #32]
   38dcc:	ldr	r1, [r0, #16]
   38dd0:	ldr	r0, [r0, #20]
   38dd4:	mul	r9, r2, r3
   38dd8:	add	r3, r0, r9
   38ddc:	cmp	r1, r3
   38de0:	bcs	38df8 <flatcc_json_printer_int16_enum_field@@Base+0x23c>
   38de4:	mov	r1, r9
   38de8:	mov	r0, r4
   38dec:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   38df0:	ldr	r2, [r4, #20]
   38df4:	b	38c70 <flatcc_json_printer_int16_enum_field@@Base+0xb4>
   38df8:	mov	r2, r9
   38dfc:	mov	r1, #32
   38e00:	bl	1459c <memset@plt>
   38e04:	ldr	r2, [r4, #20]
   38e08:	add	r2, r2, r9
   38e0c:	str	r2, [r4, #20]
   38e10:	b	38c70 <flatcc_json_printer_int16_enum_field@@Base+0xb4>
   38e14:	ldrb	r2, [r0, #28]
   38e18:	cmp	r2, #0
   38e1c:	beq	38c18 <flatcc_json_printer_int16_enum_field@@Base+0x5c>
   38e20:	b	38d48 <flatcc_json_printer_int16_enum_field@@Base+0x18c>

00038e24 <flatcc_json_printer_int32_enum_field@@Base>:
   38e24:	ldr	ip, [r1, #8]
   38e28:	add	r2, r2, #2
   38e2c:	lsl	r2, r2, #1
   38e30:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38e34:	strd	r6, [sp, #8]
   38e38:	strd	r8, [sp, #16]
   38e3c:	str	sl, [sp, #24]
   38e40:	cmp	r2, ip
   38e44:	str	lr, [sp, #28]
   38e48:	ldr	r6, [sp, #32]
   38e4c:	ldr	lr, [sp, #36]	; 0x24
   38e50:	ldr	r5, [sp, #40]	; 0x28
   38e54:	bge	38fc4 <flatcc_json_printer_int32_enum_field@@Base+0x1a0>
   38e58:	ldr	ip, [r1, #4]
   38e5c:	ldrh	r2, [ip, r2]
   38e60:	cmp	r2, #0
   38e64:	beq	38fc4 <flatcc_json_printer_int32_enum_field@@Base+0x1a0>
   38e68:	ldr	ip, [r1]
   38e6c:	cmn	ip, r2
   38e70:	beq	38fc4 <flatcc_json_printer_int32_enum_field@@Base+0x1a0>
   38e74:	ldr	r7, [ip, r2]
   38e78:	cmp	lr, r7
   38e7c:	beq	39078 <flatcc_json_printer_int32_enum_field@@Base+0x254>
   38e80:	ldr	ip, [r1, #16]
   38e84:	ldr	r2, [r0, #20]
   38e88:	cmp	ip, #0
   38e8c:	add	ip, ip, #1
   38e90:	str	ip, [r1, #16]
   38e94:	beq	38eac <flatcc_json_printer_int32_enum_field@@Base+0x88>
   38e98:	add	ip, r2, #1
   38e9c:	mov	r1, #44	; 0x2c
   38ea0:	str	ip, [r0, #20]
   38ea4:	strb	r1, [r2]
   38ea8:	ldr	r2, [r0, #20]
   38eac:	mov	r8, r3
   38eb0:	mov	r4, r0
   38eb4:	ldrb	r1, [r0, #25]
   38eb8:	cmp	r1, #0
   38ebc:	bne	39018 <flatcc_json_printer_int32_enum_field@@Base+0x1f4>
   38ec0:	ldr	r3, [r0, #16]
   38ec4:	cmp	r2, r3
   38ec8:	bcc	38ed8 <flatcc_json_printer_int32_enum_field@@Base+0xb4>
   38ecc:	ldr	r3, [r0, #44]	; 0x2c
   38ed0:	blx	r3
   38ed4:	ldr	r2, [r4, #20]
   38ed8:	mov	r3, #34	; 0x22
   38edc:	strb	r3, [r2]
   38ee0:	ldrb	r3, [r4, #26]
   38ee4:	ldr	r2, [r4, #16]
   38ee8:	ldr	r0, [r4, #20]
   38eec:	cmp	r3, #0
   38ef0:	addeq	r0, r0, #1
   38ef4:	add	r3, r0, r6
   38ef8:	cmp	r2, r3
   38efc:	str	r0, [r4, #20]
   38f00:	bls	39000 <flatcc_json_printer_int32_enum_field@@Base+0x1dc>
   38f04:	mov	r2, r6
   38f08:	mov	r1, r8
   38f0c:	bl	14524 <memcpy@plt>
   38f10:	ldr	r3, [r4, #20]
   38f14:	add	r6, r3, r6
   38f18:	str	r6, [r4, #20]
   38f1c:	mov	r3, #34	; 0x22
   38f20:	mov	ip, #58	; 0x3a
   38f24:	mov	r0, #32
   38f28:	strb	r3, [r6]
   38f2c:	ldrb	r3, [r4, #26]
   38f30:	ldr	r1, [r4, #20]
   38f34:	clz	r3, r3
   38f38:	lsr	r3, r3, #5
   38f3c:	add	r2, r1, r3
   38f40:	add	r2, r2, #1
   38f44:	str	r2, [r4, #20]
   38f48:	strb	ip, [r1, r3]
   38f4c:	ldr	r3, [r4, #20]
   38f50:	strb	r0, [r3]
   38f54:	ldrb	r3, [r4, #25]
   38f58:	ldr	r2, [r4, #20]
   38f5c:	ldrb	r0, [r4, #27]
   38f60:	adds	r3, r3, #0
   38f64:	movne	r3, #1
   38f68:	add	r1, r2, r3
   38f6c:	cmp	r0, #0
   38f70:	str	r1, [r4, #20]
   38f74:	beq	38fd8 <flatcc_json_printer_int32_enum_field@@Base+0x1b4>
   38f78:	cmp	r7, #0
   38f7c:	lsr	r5, r7, #31
   38f80:	bge	38f94 <flatcc_json_printer_int32_enum_field@@Base+0x170>
   38f84:	mov	r0, #45	; 0x2d
   38f88:	rsb	r7, r7, #0
   38f8c:	add	r1, r1, #1
   38f90:	strb	r0, [r2, r3]
   38f94:	mov	r0, r7
   38f98:	bl	33648 <flatcc_json_parser_struct_as_root@@Base+0x22c>
   38f9c:	ldr	r3, [r4, #20]
   38fa0:	add	r0, r5, r0
   38fa4:	add	r3, r3, r0
   38fa8:	str	r3, [r4, #20]
   38fac:	ldrd	r4, [sp]
   38fb0:	ldrd	r6, [sp, #8]
   38fb4:	ldrd	r8, [sp, #16]
   38fb8:	ldr	sl, [sp, #24]
   38fbc:	add	sp, sp, #28
   38fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   38fc4:	ldrb	r2, [r0, #29]
   38fc8:	cmp	r2, #0
   38fcc:	beq	38fac <flatcc_json_printer_int32_enum_field@@Base+0x188>
   38fd0:	mov	r7, lr
   38fd4:	b	38e80 <flatcc_json_printer_int32_enum_field@@Base+0x5c>
   38fd8:	mov	r1, r7
   38fdc:	mov	r0, r4
   38fe0:	ldrd	r6, [sp, #8]
   38fe4:	mov	r3, r5
   38fe8:	ldrd	r4, [sp]
   38fec:	ldrd	r8, [sp, #16]
   38ff0:	ldr	sl, [sp, #24]
   38ff4:	ldr	lr, [sp, #28]
   38ff8:	add	sp, sp, #32
   38ffc:	bx	r3
   39000:	mov	r2, r6
   39004:	mov	r1, r8
   39008:	mov	r0, r4
   3900c:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   39010:	ldr	r6, [r4, #20]
   39014:	b	38f1c <flatcc_json_printer_int32_enum_field@@Base+0xf8>
   39018:	add	r1, r2, #1
   3901c:	mov	r3, #10
   39020:	str	r1, [r0, #20]
   39024:	strb	r3, [r2]
   39028:	ldrb	r3, [r0, #25]
   3902c:	ldr	r2, [r4, #32]
   39030:	ldr	r1, [r0, #16]
   39034:	ldr	r0, [r0, #20]
   39038:	mul	r9, r2, r3
   3903c:	add	r3, r0, r9
   39040:	cmp	r1, r3
   39044:	bcs	3905c <flatcc_json_printer_int32_enum_field@@Base+0x238>
   39048:	mov	r1, r9
   3904c:	mov	r0, r4
   39050:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   39054:	ldr	r2, [r4, #20]
   39058:	b	38ed8 <flatcc_json_printer_int32_enum_field@@Base+0xb4>
   3905c:	mov	r2, r9
   39060:	mov	r1, #32
   39064:	bl	1459c <memset@plt>
   39068:	ldr	r2, [r4, #20]
   3906c:	add	r2, r2, r9
   39070:	str	r2, [r4, #20]
   39074:	b	38ed8 <flatcc_json_printer_int32_enum_field@@Base+0xb4>
   39078:	ldrb	r2, [r0, #28]
   3907c:	cmp	r2, #0
   39080:	beq	38e80 <flatcc_json_printer_int32_enum_field@@Base+0x5c>
   39084:	b	38fac <flatcc_json_printer_int32_enum_field@@Base+0x188>

00039088 <flatcc_json_printer_int64_enum_field@@Base>:
   39088:	ldr	ip, [r1, #8]
   3908c:	add	r2, r2, #2
   39090:	lsl	r2, r2, #1
   39094:	strd	r4, [sp, #-36]!	; 0xffffffdc
   39098:	strd	r6, [sp, #8]
   3909c:	strd	r8, [sp, #16]
   390a0:	strd	sl, [sp, #24]
   390a4:	cmp	r2, ip
   390a8:	str	lr, [sp, #32]
   390ac:	sub	sp, sp, #4
   390b0:	ldr	r8, [sp, #40]	; 0x28
   390b4:	ldrd	sl, [sp, #48]	; 0x30
   390b8:	ldr	r5, [sp, #56]	; 0x38
   390bc:	bge	39240 <flatcc_json_printer_int64_enum_field@@Base+0x1b8>
   390c0:	ldr	ip, [r1, #4]
   390c4:	ldrh	r2, [ip, r2]
   390c8:	cmp	r2, #0
   390cc:	beq	39240 <flatcc_json_printer_int64_enum_field@@Base+0x1b8>
   390d0:	ldr	ip, [r1]
   390d4:	cmn	ip, r2
   390d8:	beq	39240 <flatcc_json_printer_int64_enum_field@@Base+0x1b8>
   390dc:	ldrd	r6, [ip, r2]
   390e0:	cmp	fp, r7
   390e4:	cmpeq	sl, r6
   390e8:	beq	39300 <flatcc_json_printer_int64_enum_field@@Base+0x278>
   390ec:	ldr	ip, [r1, #16]
   390f0:	ldr	r2, [r0, #20]
   390f4:	cmp	ip, #0
   390f8:	add	ip, ip, #1
   390fc:	str	ip, [r1, #16]
   39100:	beq	39118 <flatcc_json_printer_int64_enum_field@@Base+0x90>
   39104:	add	ip, r2, #1
   39108:	mov	r1, #44	; 0x2c
   3910c:	str	ip, [r0, #20]
   39110:	strb	r1, [r2]
   39114:	ldr	r2, [r0, #20]
   39118:	mov	r9, r3
   3911c:	mov	r4, r0
   39120:	ldrb	r1, [r0, #25]
   39124:	cmp	r1, #0
   39128:	bne	392a0 <flatcc_json_printer_int64_enum_field@@Base+0x218>
   3912c:	ldr	r3, [r0, #16]
   39130:	cmp	r2, r3
   39134:	bcc	39144 <flatcc_json_printer_int64_enum_field@@Base+0xbc>
   39138:	ldr	r3, [r0, #44]	; 0x2c
   3913c:	blx	r3
   39140:	ldr	r2, [r4, #20]
   39144:	mov	r3, #34	; 0x22
   39148:	strb	r3, [r2]
   3914c:	ldrb	r3, [r4, #26]
   39150:	ldr	r2, [r4, #16]
   39154:	ldr	r0, [r4, #20]
   39158:	cmp	r3, #0
   3915c:	addeq	r0, r0, #1
   39160:	add	r3, r0, r8
   39164:	cmp	r2, r3
   39168:	str	r0, [r4, #20]
   3916c:	bls	39288 <flatcc_json_printer_int64_enum_field@@Base+0x200>
   39170:	mov	r2, r8
   39174:	mov	r1, r9
   39178:	bl	14524 <memcpy@plt>
   3917c:	ldr	r3, [r4, #20]
   39180:	add	r8, r3, r8
   39184:	str	r8, [r4, #20]
   39188:	mov	r3, #34	; 0x22
   3918c:	mov	ip, #58	; 0x3a
   39190:	mov	r0, #32
   39194:	strb	r3, [r8]
   39198:	ldrb	r3, [r4, #26]
   3919c:	ldr	r1, [r4, #20]
   391a0:	clz	r3, r3
   391a4:	lsr	r3, r3, #5
   391a8:	add	r2, r1, r3
   391ac:	add	r2, r2, #1
   391b0:	str	r2, [r4, #20]
   391b4:	strb	ip, [r1, r3]
   391b8:	ldr	r3, [r4, #20]
   391bc:	strb	r0, [r3]
   391c0:	ldrb	r3, [r4, #25]
   391c4:	ldr	r1, [r4, #20]
   391c8:	ldrb	r0, [r4, #27]
   391cc:	adds	r3, r3, #0
   391d0:	movne	r3, #1
   391d4:	add	r2, r1, r3
   391d8:	cmp	r0, #0
   391dc:	str	r2, [r4, #20]
   391e0:	beq	39258 <flatcc_json_printer_int64_enum_field@@Base+0x1d0>
   391e4:	cmp	r6, #0
   391e8:	lsr	r5, r7, #31
   391ec:	sbcs	r0, r7, #0
   391f0:	bge	39208 <flatcc_json_printer_int64_enum_field@@Base+0x180>
   391f4:	rsbs	r6, r6, #0
   391f8:	mov	r0, #45	; 0x2d
   391fc:	rsc	r7, r7, #0
   39200:	add	r2, r2, #1
   39204:	strb	r0, [r1, r3]
   39208:	mov	r0, r6
   3920c:	mov	r1, r7
   39210:	bl	3395c <flatcc_json_parser_struct_as_root@@Base+0x540>
   39214:	ldr	r3, [r4, #20]
   39218:	add	r0, r5, r0
   3921c:	add	r3, r3, r0
   39220:	str	r3, [r4, #20]
   39224:	add	sp, sp, #4
   39228:	ldrd	r4, [sp]
   3922c:	ldrd	r6, [sp, #8]
   39230:	ldrd	r8, [sp, #16]
   39234:	ldrd	sl, [sp, #24]
   39238:	add	sp, sp, #32
   3923c:	pop	{pc}		; (ldr pc, [sp], #4)
   39240:	ldrb	r2, [r0, #29]
   39244:	cmp	r2, #0
   39248:	beq	39224 <flatcc_json_printer_int64_enum_field@@Base+0x19c>
   3924c:	mov	r6, sl
   39250:	mov	r7, fp
   39254:	b	390ec <flatcc_json_printer_int64_enum_field@@Base+0x64>
   39258:	mov	r2, r6
   3925c:	mov	r3, r7
   39260:	mov	r0, r4
   39264:	mov	r1, r5
   39268:	add	sp, sp, #4
   3926c:	ldrd	r4, [sp]
   39270:	ldrd	r6, [sp, #8]
   39274:	ldrd	r8, [sp, #16]
   39278:	ldrd	sl, [sp, #24]
   3927c:	ldr	lr, [sp, #32]
   39280:	add	sp, sp, #36	; 0x24
   39284:	bx	r1
   39288:	mov	r2, r8
   3928c:	mov	r1, r9
   39290:	mov	r0, r4
   39294:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   39298:	ldr	r8, [r4, #20]
   3929c:	b	39188 <flatcc_json_printer_int64_enum_field@@Base+0x100>
   392a0:	add	r1, r2, #1
   392a4:	mov	r3, #10
   392a8:	str	r1, [r0, #20]
   392ac:	strb	r3, [r2]
   392b0:	ldrb	r3, [r0, #25]
   392b4:	ldr	r2, [r4, #32]
   392b8:	ldr	r1, [r0, #16]
   392bc:	ldr	r0, [r0, #20]
   392c0:	mul	sl, r2, r3
   392c4:	add	r3, r0, sl
   392c8:	cmp	r1, r3
   392cc:	bcs	392e4 <flatcc_json_printer_int64_enum_field@@Base+0x25c>
   392d0:	mov	r1, sl
   392d4:	mov	r0, r4
   392d8:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   392dc:	ldr	r2, [r4, #20]
   392e0:	b	39144 <flatcc_json_printer_int64_enum_field@@Base+0xbc>
   392e4:	mov	r2, sl
   392e8:	mov	r1, #32
   392ec:	bl	1459c <memset@plt>
   392f0:	ldr	r2, [r4, #20]
   392f4:	add	r2, r2, sl
   392f8:	str	r2, [r4, #20]
   392fc:	b	39144 <flatcc_json_printer_int64_enum_field@@Base+0xbc>
   39300:	ldrb	r2, [r0, #28]
   39304:	cmp	r2, #0
   39308:	beq	390ec <flatcc_json_printer_int64_enum_field@@Base+0x64>
   3930c:	b	39224 <flatcc_json_printer_int64_enum_field@@Base+0x19c>

00039310 <flatcc_json_printer_bool_enum_field@@Base>:
   39310:	ldr	ip, [r1, #8]
   39314:	add	r2, r2, #2
   39318:	lsl	r2, r2, #1
   3931c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   39320:	strd	r6, [sp, #8]
   39324:	strd	r8, [sp, #16]
   39328:	str	sl, [sp, #24]
   3932c:	cmp	r2, ip
   39330:	str	lr, [sp, #28]
   39334:	ldrb	lr, [sp, #36]	; 0x24
   39338:	ldr	r7, [sp, #32]
   3933c:	ldr	r5, [sp, #40]	; 0x28
   39340:	bge	3948c <flatcc_json_printer_bool_enum_field@@Base+0x17c>
   39344:	ldr	ip, [r1, #4]
   39348:	ldrh	r2, [ip, r2]
   3934c:	cmp	r2, #0
   39350:	beq	3948c <flatcc_json_printer_bool_enum_field@@Base+0x17c>
   39354:	ldr	ip, [r1]
   39358:	cmn	ip, r2
   3935c:	beq	3948c <flatcc_json_printer_bool_enum_field@@Base+0x17c>
   39360:	ldrb	r6, [ip, r2]
   39364:	cmp	lr, r6
   39368:	beq	39588 <flatcc_json_printer_bool_enum_field@@Base+0x278>
   3936c:	ldr	ip, [r1, #16]
   39370:	ldr	r2, [r0, #20]
   39374:	cmp	ip, #0
   39378:	add	ip, ip, #1
   3937c:	str	ip, [r1, #16]
   39380:	beq	39398 <flatcc_json_printer_bool_enum_field@@Base+0x88>
   39384:	add	ip, r2, #1
   39388:	mov	r1, #44	; 0x2c
   3938c:	str	ip, [r0, #20]
   39390:	strb	r1, [r2]
   39394:	ldr	r2, [r0, #20]
   39398:	mov	r8, r3
   3939c:	mov	r4, r0
   393a0:	ldrb	r1, [r0, #25]
   393a4:	cmp	r1, #0
   393a8:	bne	39504 <flatcc_json_printer_bool_enum_field@@Base+0x1f4>
   393ac:	ldr	r3, [r0, #16]
   393b0:	cmp	r3, r2
   393b4:	bhi	393c4 <flatcc_json_printer_bool_enum_field@@Base+0xb4>
   393b8:	ldr	r3, [r0, #44]	; 0x2c
   393bc:	blx	r3
   393c0:	ldr	r2, [r4, #20]
   393c4:	mov	r3, #34	; 0x22
   393c8:	strb	r3, [r2]
   393cc:	ldrb	r3, [r4, #26]
   393d0:	ldr	r2, [r4, #16]
   393d4:	ldr	r0, [r4, #20]
   393d8:	cmp	r3, #0
   393dc:	addeq	r0, r0, #1
   393e0:	add	r3, r0, r7
   393e4:	cmp	r2, r3
   393e8:	str	r0, [r4, #20]
   393ec:	bls	394ec <flatcc_json_printer_bool_enum_field@@Base+0x1dc>
   393f0:	mov	r2, r7
   393f4:	mov	r1, r8
   393f8:	bl	14524 <memcpy@plt>
   393fc:	ldr	r3, [r4, #20]
   39400:	add	r7, r3, r7
   39404:	str	r7, [r4, #20]
   39408:	mov	r3, #34	; 0x22
   3940c:	mov	ip, #58	; 0x3a
   39410:	mov	r0, #32
   39414:	strb	r3, [r7]
   39418:	ldrb	r3, [r4, #26]
   3941c:	ldr	r1, [r4, #20]
   39420:	clz	r3, r3
   39424:	lsr	r3, r3, #5
   39428:	add	r2, r1, r3
   3942c:	add	r2, r2, #1
   39430:	str	r2, [r4, #20]
   39434:	strb	ip, [r1, r3]
   39438:	ldr	r3, [r4, #20]
   3943c:	strb	r0, [r3]
   39440:	ldrb	r3, [r4, #25]
   39444:	ldr	r0, [r4, #20]
   39448:	ldrb	r1, [r4, #27]
   3944c:	adds	r3, r3, #0
   39450:	movne	r3, #1
   39454:	add	r2, r0, r3
   39458:	cmp	r1, #0
   3945c:	str	r2, [r4, #20]
   39460:	bne	394a0 <flatcc_json_printer_bool_enum_field@@Base+0x190>
   39464:	mov	r1, r6
   39468:	mov	r0, r4
   3946c:	ldrd	r6, [sp, #8]
   39470:	mov	r3, r5
   39474:	ldrd	r4, [sp]
   39478:	ldrd	r8, [sp, #16]
   3947c:	ldr	sl, [sp, #24]
   39480:	ldr	lr, [sp, #28]
   39484:	add	sp, sp, #32
   39488:	bx	r3
   3948c:	ldrb	r2, [r0, #29]
   39490:	cmp	r2, #0
   39494:	beq	394d4 <flatcc_json_printer_bool_enum_field@@Base+0x1c4>
   39498:	mov	r6, lr
   3949c:	b	3936c <flatcc_json_printer_bool_enum_field@@Base+0x5c>
   394a0:	cmp	r6, #0
   394a4:	bne	39548 <flatcc_json_printer_bool_enum_field@@Base+0x238>
   394a8:	movw	r1, #28992	; 0x7140
   394ac:	movt	r1, #4
   394b0:	add	ip, r1, #1776	; 0x6f0
   394b4:	ldr	lr, [r1, #1776]	; 0x6f0
   394b8:	mov	r1, #5
   394bc:	ldrh	ip, [ip, #4]
   394c0:	str	lr, [r0, r3]
   394c4:	strh	ip, [r2, #4]
   394c8:	ldr	r3, [r4, #20]
   394cc:	add	r3, r3, r1
   394d0:	str	r3, [r4, #20]
   394d4:	ldrd	r4, [sp]
   394d8:	ldrd	r6, [sp, #8]
   394dc:	ldrd	r8, [sp, #16]
   394e0:	ldr	sl, [sp, #24]
   394e4:	add	sp, sp, #28
   394e8:	pop	{pc}		; (ldr pc, [sp], #4)
   394ec:	mov	r2, r7
   394f0:	mov	r1, r8
   394f4:	mov	r0, r4
   394f8:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   394fc:	ldr	r7, [r4, #20]
   39500:	b	39408 <flatcc_json_printer_bool_enum_field@@Base+0xf8>
   39504:	add	r1, r2, #1
   39508:	mov	r3, #10
   3950c:	str	r1, [r0, #20]
   39510:	strb	r3, [r2]
   39514:	ldrb	r3, [r0, #25]
   39518:	ldr	r2, [r4, #32]
   3951c:	ldr	r1, [r0, #16]
   39520:	ldr	r0, [r0, #20]
   39524:	mul	r9, r2, r3
   39528:	add	r3, r0, r9
   3952c:	cmp	r1, r3
   39530:	bcs	3956c <flatcc_json_printer_bool_enum_field@@Base+0x25c>
   39534:	mov	r1, r9
   39538:	mov	r0, r4
   3953c:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   39540:	ldr	r2, [r4, #20]
   39544:	b	393c4 <flatcc_json_printer_bool_enum_field@@Base+0xb4>
   39548:	ldr	ip, [pc, #72]	; 39598 <flatcc_json_printer_bool_enum_field@@Base+0x288>
   3954c:	movw	r1, #28992	; 0x7140
   39550:	movt	r1, #4
   39554:	ldr	lr, [r1, #1768]	; 0x6e8
   39558:	mov	r1, #4
   3955c:	ldrb	ip, [ip, #4]
   39560:	str	lr, [r0, r3]
   39564:	strb	ip, [r2, #4]
   39568:	b	394c8 <flatcc_json_printer_bool_enum_field@@Base+0x1b8>
   3956c:	mov	r2, r9
   39570:	mov	r1, #32
   39574:	bl	1459c <memset@plt>
   39578:	ldr	r2, [r4, #20]
   3957c:	add	r2, r2, r9
   39580:	str	r2, [r4, #20]
   39584:	b	393c4 <flatcc_json_printer_bool_enum_field@@Base+0xb4>
   39588:	ldrb	r2, [r0, #28]
   3958c:	cmp	r2, #0
   39590:	beq	3936c <flatcc_json_printer_bool_enum_field@@Base+0x5c>
   39594:	b	394d4 <flatcc_json_printer_bool_enum_field@@Base+0x1c4>
   39598:	andeq	r7, r4, r8, lsr #16

0003959c <flatcc_json_printer_uint8_struct_field@@Base>:
   3959c:	cmp	r1, #0
   395a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   395a4:	mov	r4, r0
   395a8:	strd	r6, [sp, #8]
   395ac:	str	r8, [sp, #16]
   395b0:	str	lr, [sp, #20]
   395b4:	ldrb	r5, [r2, r3]
   395b8:	ldr	r2, [r0, #20]
   395bc:	ldr	r6, [sp, #28]
   395c0:	beq	395d8 <flatcc_json_printer_uint8_struct_field@@Base+0x3c>
   395c4:	add	r1, r2, #1
   395c8:	mov	r3, #44	; 0x2c
   395cc:	str	r1, [r0, #20]
   395d0:	strb	r3, [r2]
   395d4:	ldr	r2, [r0, #20]
   395d8:	ldrb	r1, [r4, #25]
   395dc:	cmp	r1, #0
   395e0:	bne	396e8 <flatcc_json_printer_uint8_struct_field@@Base+0x14c>
   395e4:	ldr	r3, [r4, #16]
   395e8:	cmp	r3, r2
   395ec:	bhi	39600 <flatcc_json_printer_uint8_struct_field@@Base+0x64>
   395f0:	mov	r0, r4
   395f4:	ldr	r3, [r4, #44]	; 0x2c
   395f8:	blx	r3
   395fc:	ldr	r2, [r4, #20]
   39600:	mov	r3, #34	; 0x22
   39604:	ldr	r1, [sp, #24]
   39608:	strb	r3, [r2]
   3960c:	ldrb	r3, [r4, #26]
   39610:	ldr	r2, [r4, #16]
   39614:	ldr	r0, [r4, #20]
   39618:	cmp	r3, #0
   3961c:	addeq	r0, r0, #1
   39620:	add	r3, r0, r6
   39624:	cmp	r2, r3
   39628:	mov	r2, r6
   3962c:	str	r0, [r4, #20]
   39630:	bhi	396d4 <flatcc_json_printer_uint8_struct_field@@Base+0x138>
   39634:	mov	r0, r4
   39638:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   3963c:	ldr	r2, [r4, #20]
   39640:	mov	r3, #34	; 0x22
   39644:	mov	ip, #58	; 0x3a
   39648:	mov	r0, #32
   3964c:	strb	r3, [r2]
   39650:	ldrb	r3, [r4, #26]
   39654:	ldr	r1, [r4, #20]
   39658:	clz	r3, r3
   3965c:	lsr	r3, r3, #5
   39660:	add	r2, r1, r3
   39664:	add	r2, r2, #1
   39668:	str	r2, [r4, #20]
   3966c:	strb	ip, [r1, r3]
   39670:	ldr	r3, [r4, #20]
   39674:	strb	r0, [r3]
   39678:	ldrb	r3, [r4, #25]
   3967c:	ldr	r0, [r4, #20]
   39680:	adds	r3, r3, #0
   39684:	movne	r3, #1
   39688:	cmp	r5, #99	; 0x63
   3968c:	add	r1, r0, r3
   39690:	str	r1, [r4, #20]
   39694:	bhi	3972c <flatcc_json_printer_uint8_struct_field@@Base+0x190>
   39698:	cmp	r5, #9
   3969c:	bhi	39798 <flatcc_json_printer_uint8_struct_field@@Base+0x1fc>
   396a0:	add	r5, r5, #48	; 0x30
   396a4:	mov	r2, #0
   396a8:	mov	ip, #1
   396ac:	strb	r2, [r1, #1]
   396b0:	strb	r5, [r0, r3]
   396b4:	ldr	r3, [r4, #20]
   396b8:	ldrd	r6, [sp, #8]
   396bc:	ldr	r8, [sp, #16]
   396c0:	add	r3, r3, ip
   396c4:	str	r3, [r4, #20]
   396c8:	ldrd	r4, [sp]
   396cc:	add	sp, sp, #20
   396d0:	pop	{pc}		; (ldr pc, [sp], #4)
   396d4:	bl	14524 <memcpy@plt>
   396d8:	ldr	r2, [r4, #20]
   396dc:	add	r2, r2, r6
   396e0:	str	r2, [r4, #20]
   396e4:	b	39640 <flatcc_json_printer_uint8_struct_field@@Base+0xa4>
   396e8:	add	r1, r2, #1
   396ec:	mov	r3, #10
   396f0:	str	r1, [r4, #20]
   396f4:	strb	r3, [r2]
   396f8:	ldrb	r7, [r4, #25]
   396fc:	ldr	r1, [r4, #16]
   39700:	ldr	r2, [r4, #32]
   39704:	ldr	r0, [r4, #20]
   39708:	mul	r7, r2, r7
   3970c:	add	r3, r0, r7
   39710:	cmp	r1, r3
   39714:	bcs	3977c <flatcc_json_printer_uint8_struct_field@@Base+0x1e0>
   39718:	mov	r1, r7
   3971c:	mov	r0, r4
   39720:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   39724:	ldr	r2, [r4, #20]
   39728:	b	39600 <flatcc_json_printer_uint8_struct_field@@Base+0x64>
   3972c:	movw	r2, #34079	; 0x851f
   39730:	movt	r2, #20971	; 0x51eb
   39734:	mov	r6, #100	; 0x64
   39738:	mov	ip, #0
   3973c:	umull	lr, r2, r2, r5
   39740:	movw	lr, #28992	; 0x7140
   39744:	movt	lr, #4
   39748:	strb	ip, [r1, #3]
   3974c:	mov	ip, #3
   39750:	lsr	r2, r2, #5
   39754:	mls	r5, r6, r2, r5
   39758:	add	r2, r2, #48	; 0x30
   3975c:	uxtb	r5, r5
   39760:	ldrb	r6, [lr, r5, lsl #1]
   39764:	add	lr, lr, r5, lsl #1
   39768:	strb	r6, [r1, #1]
   3976c:	ldrb	lr, [lr, #1]
   39770:	strb	lr, [r1, #2]
   39774:	strb	r2, [r0, r3]
   39778:	b	396b4 <flatcc_json_printer_uint8_struct_field@@Base+0x118>
   3977c:	mov	r2, r7
   39780:	mov	r1, #32
   39784:	bl	1459c <memset@plt>
   39788:	ldr	r2, [r4, #20]
   3978c:	add	r2, r2, r7
   39790:	str	r2, [r4, #20]
   39794:	b	39600 <flatcc_json_printer_uint8_struct_field@@Base+0x64>
   39798:	mov	ip, #0
   3979c:	sxth	r5, r5
   397a0:	movw	r2, #28992	; 0x7140
   397a4:	movt	r2, #4
   397a8:	add	lr, r2, r5, lsl #1
   397ac:	strb	ip, [r1, #2]
   397b0:	mov	ip, #2
   397b4:	ldrb	r2, [r2, r5, lsl #1]
   397b8:	strb	r2, [r0, r3]
   397bc:	ldrb	r3, [lr, #1]
   397c0:	strb	r3, [r1, #1]
   397c4:	b	396b4 <flatcc_json_printer_uint8_struct_field@@Base+0x118>

000397c8 <flatcc_json_printer_uint16_struct_field@@Base>:
   397c8:	cmp	r1, #0
   397cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   397d0:	mov	r4, r0
   397d4:	ldrh	r5, [r2, r3]
   397d8:	ldr	r2, [r0, #20]
   397dc:	strd	r6, [sp, #8]
   397e0:	str	r8, [sp, #16]
   397e4:	str	lr, [sp, #20]
   397e8:	ldr	r6, [sp, #28]
   397ec:	beq	39804 <flatcc_json_printer_uint16_struct_field@@Base+0x3c>
   397f0:	add	r1, r2, #1
   397f4:	mov	r3, #44	; 0x2c
   397f8:	str	r1, [r0, #20]
   397fc:	strb	r3, [r2]
   39800:	ldr	r2, [r0, #20]
   39804:	ldrb	r1, [r4, #25]
   39808:	cmp	r1, #0
   3980c:	bne	398f8 <flatcc_json_printer_uint16_struct_field@@Base+0x130>
   39810:	ldr	r3, [r4, #16]
   39814:	cmp	r3, r2
   39818:	bhi	3982c <flatcc_json_printer_uint16_struct_field@@Base+0x64>
   3981c:	mov	r0, r4
   39820:	ldr	r3, [r4, #44]	; 0x2c
   39824:	blx	r3
   39828:	ldr	r2, [r4, #20]
   3982c:	mov	r3, #34	; 0x22
   39830:	ldr	r1, [sp, #24]
   39834:	strb	r3, [r2]
   39838:	ldrb	r3, [r4, #26]
   3983c:	ldr	r2, [r4, #16]
   39840:	ldr	r0, [r4, #20]
   39844:	cmp	r3, #0
   39848:	addeq	r0, r0, #1
   3984c:	add	r3, r0, r6
   39850:	cmp	r2, r3
   39854:	mov	r2, r6
   39858:	str	r0, [r4, #20]
   3985c:	bhi	398e4 <flatcc_json_printer_uint16_struct_field@@Base+0x11c>
   39860:	mov	r0, r4
   39864:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   39868:	ldr	r2, [r4, #20]
   3986c:	mov	r3, #34	; 0x22
   39870:	mov	lr, #58	; 0x3a
   39874:	mov	ip, #32
   39878:	mov	r0, r5
   3987c:	strb	r3, [r2]
   39880:	ldrb	r3, [r4, #26]
   39884:	ldr	r1, [r4, #20]
   39888:	clz	r3, r3
   3988c:	lsr	r3, r3, #5
   39890:	add	r2, r1, r3
   39894:	add	r2, r2, #1
   39898:	str	r2, [r4, #20]
   3989c:	strb	lr, [r1, r3]
   398a0:	ldr	r3, [r4, #20]
   398a4:	strb	ip, [r3]
   398a8:	ldrb	r2, [r4, #25]
   398ac:	ldr	r3, [r4, #20]
   398b0:	cmp	r2, #0
   398b4:	addne	r3, r3, #1
   398b8:	mov	r1, r3
   398bc:	str	r3, [r4, #20]
   398c0:	bl	334f0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   398c4:	ldr	r3, [r4, #20]
   398c8:	ldrd	r6, [sp, #8]
   398cc:	ldr	r8, [sp, #16]
   398d0:	add	r0, r3, r0
   398d4:	str	r0, [r4, #20]
   398d8:	ldrd	r4, [sp]
   398dc:	add	sp, sp, #20
   398e0:	pop	{pc}		; (ldr pc, [sp], #4)
   398e4:	bl	14524 <memcpy@plt>
   398e8:	ldr	r2, [r4, #20]
   398ec:	add	r2, r2, r6
   398f0:	str	r2, [r4, #20]
   398f4:	b	3986c <flatcc_json_printer_uint16_struct_field@@Base+0xa4>
   398f8:	add	r1, r2, #1
   398fc:	mov	r3, #10
   39900:	str	r1, [r4, #20]
   39904:	strb	r3, [r2]
   39908:	ldrb	r7, [r4, #25]
   3990c:	ldr	r1, [r4, #16]
   39910:	ldr	r2, [r4, #32]
   39914:	ldr	r0, [r4, #20]
   39918:	mul	r7, r2, r7
   3991c:	add	r3, r0, r7
   39920:	cmp	r1, r3
   39924:	bcs	3993c <flatcc_json_printer_uint16_struct_field@@Base+0x174>
   39928:	mov	r1, r7
   3992c:	mov	r0, r4
   39930:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   39934:	ldr	r2, [r4, #20]
   39938:	b	3982c <flatcc_json_printer_uint16_struct_field@@Base+0x64>
   3993c:	mov	r2, r7
   39940:	mov	r1, #32
   39944:	bl	1459c <memset@plt>
   39948:	ldr	r2, [r4, #20]
   3994c:	add	r2, r2, r7
   39950:	str	r2, [r4, #20]
   39954:	b	3982c <flatcc_json_printer_uint16_struct_field@@Base+0x64>

00039958 <flatcc_json_printer_uint32_struct_field@@Base>:
   39958:	cmp	r1, #0
   3995c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   39960:	mov	r4, r0
   39964:	ldr	r5, [r2, r3]
   39968:	ldr	r2, [r0, #20]
   3996c:	strd	r6, [sp, #8]
   39970:	str	r8, [sp, #16]
   39974:	str	lr, [sp, #20]
   39978:	ldr	r6, [sp, #28]
   3997c:	beq	39994 <flatcc_json_printer_uint32_struct_field@@Base+0x3c>
   39980:	add	r1, r2, #1
   39984:	mov	r3, #44	; 0x2c
   39988:	str	r1, [r0, #20]
   3998c:	strb	r3, [r2]
   39990:	ldr	r2, [r0, #20]
   39994:	ldrb	r1, [r4, #25]
   39998:	cmp	r1, #0
   3999c:	bne	39a88 <flatcc_json_printer_uint32_struct_field@@Base+0x130>
   399a0:	ldr	r3, [r4, #16]
   399a4:	cmp	r3, r2
   399a8:	bhi	399bc <flatcc_json_printer_uint32_struct_field@@Base+0x64>
   399ac:	mov	r0, r4
   399b0:	ldr	r3, [r4, #44]	; 0x2c
   399b4:	blx	r3
   399b8:	ldr	r2, [r4, #20]
   399bc:	mov	r3, #34	; 0x22
   399c0:	ldr	r1, [sp, #24]
   399c4:	strb	r3, [r2]
   399c8:	ldrb	r3, [r4, #26]
   399cc:	ldr	r2, [r4, #16]
   399d0:	ldr	r0, [r4, #20]
   399d4:	cmp	r3, #0
   399d8:	addeq	r0, r0, #1
   399dc:	add	r3, r0, r6
   399e0:	cmp	r2, r3
   399e4:	mov	r2, r6
   399e8:	str	r0, [r4, #20]
   399ec:	bhi	39a74 <flatcc_json_printer_uint32_struct_field@@Base+0x11c>
   399f0:	mov	r0, r4
   399f4:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   399f8:	ldr	r2, [r4, #20]
   399fc:	mov	r3, #34	; 0x22
   39a00:	mov	lr, #58	; 0x3a
   39a04:	mov	ip, #32
   39a08:	mov	r0, r5
   39a0c:	strb	r3, [r2]
   39a10:	ldrb	r3, [r4, #26]
   39a14:	ldr	r1, [r4, #20]
   39a18:	clz	r3, r3
   39a1c:	lsr	r3, r3, #5
   39a20:	add	r2, r1, r3
   39a24:	add	r2, r2, #1
   39a28:	str	r2, [r4, #20]
   39a2c:	strb	lr, [r1, r3]
   39a30:	ldr	r3, [r4, #20]
   39a34:	strb	ip, [r3]
   39a38:	ldrb	r2, [r4, #25]
   39a3c:	ldr	r3, [r4, #20]
   39a40:	cmp	r2, #0
   39a44:	addne	r3, r3, #1
   39a48:	mov	r1, r3
   39a4c:	str	r3, [r4, #20]
   39a50:	bl	33648 <flatcc_json_parser_struct_as_root@@Base+0x22c>
   39a54:	ldr	r3, [r4, #20]
   39a58:	ldrd	r6, [sp, #8]
   39a5c:	ldr	r8, [sp, #16]
   39a60:	add	r0, r3, r0
   39a64:	str	r0, [r4, #20]
   39a68:	ldrd	r4, [sp]
   39a6c:	add	sp, sp, #20
   39a70:	pop	{pc}		; (ldr pc, [sp], #4)
   39a74:	bl	14524 <memcpy@plt>
   39a78:	ldr	r2, [r4, #20]
   39a7c:	add	r2, r2, r6
   39a80:	str	r2, [r4, #20]
   39a84:	b	399fc <flatcc_json_printer_uint32_struct_field@@Base+0xa4>
   39a88:	add	r1, r2, #1
   39a8c:	mov	r3, #10
   39a90:	str	r1, [r4, #20]
   39a94:	strb	r3, [r2]
   39a98:	ldrb	r7, [r4, #25]
   39a9c:	ldr	r1, [r4, #16]
   39aa0:	ldr	r2, [r4, #32]
   39aa4:	ldr	r0, [r4, #20]
   39aa8:	mul	r7, r2, r7
   39aac:	add	r3, r0, r7
   39ab0:	cmp	r1, r3
   39ab4:	bcs	39acc <flatcc_json_printer_uint32_struct_field@@Base+0x174>
   39ab8:	mov	r1, r7
   39abc:	mov	r0, r4
   39ac0:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   39ac4:	ldr	r2, [r4, #20]
   39ac8:	b	399bc <flatcc_json_printer_uint32_struct_field@@Base+0x64>
   39acc:	mov	r2, r7
   39ad0:	mov	r1, #32
   39ad4:	bl	1459c <memset@plt>
   39ad8:	ldr	r2, [r4, #20]
   39adc:	add	r2, r2, r7
   39ae0:	str	r2, [r4, #20]
   39ae4:	b	399bc <flatcc_json_printer_uint32_struct_field@@Base+0x64>

00039ae8 <flatcc_json_printer_uint64_struct_field@@Base>:
   39ae8:	cmp	r1, #0
   39aec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   39af0:	mov	r4, r0
   39af4:	strd	r6, [sp, #8]
   39af8:	str	r8, [sp, #16]
   39afc:	str	lr, [sp, #20]
   39b00:	ldrd	r6, [r2, r3]
   39b04:	ldr	r2, [r0, #20]
   39b08:	ldr	r5, [sp, #28]
   39b0c:	beq	39b24 <flatcc_json_printer_uint64_struct_field@@Base+0x3c>
   39b10:	add	r1, r2, #1
   39b14:	mov	r3, #44	; 0x2c
   39b18:	str	r1, [r0, #20]
   39b1c:	strb	r3, [r2]
   39b20:	ldr	r2, [r0, #20]
   39b24:	ldrb	r1, [r4, #25]
   39b28:	cmp	r1, #0
   39b2c:	bne	39c1c <flatcc_json_printer_uint64_struct_field@@Base+0x134>
   39b30:	ldr	r3, [r4, #16]
   39b34:	cmp	r3, r2
   39b38:	bhi	39b4c <flatcc_json_printer_uint64_struct_field@@Base+0x64>
   39b3c:	mov	r0, r4
   39b40:	ldr	r3, [r4, #44]	; 0x2c
   39b44:	blx	r3
   39b48:	ldr	r2, [r4, #20]
   39b4c:	mov	r3, #34	; 0x22
   39b50:	ldr	r1, [sp, #24]
   39b54:	strb	r3, [r2]
   39b58:	ldrb	r3, [r4, #26]
   39b5c:	ldr	r2, [r4, #16]
   39b60:	ldr	r0, [r4, #20]
   39b64:	cmp	r3, #0
   39b68:	addeq	r0, r0, #1
   39b6c:	add	r3, r0, r5
   39b70:	cmp	r2, r3
   39b74:	mov	r2, r5
   39b78:	str	r0, [r4, #20]
   39b7c:	bhi	39c08 <flatcc_json_printer_uint64_struct_field@@Base+0x120>
   39b80:	mov	r0, r4
   39b84:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   39b88:	ldr	r2, [r4, #20]
   39b8c:	mov	r3, #34	; 0x22
   39b90:	mov	r5, #58	; 0x3a
   39b94:	mov	lr, #32
   39b98:	mov	r0, r6
   39b9c:	strb	r3, [r2]
   39ba0:	mov	r1, r7
   39ba4:	ldrb	r3, [r4, #26]
   39ba8:	ldr	ip, [r4, #20]
   39bac:	clz	r3, r3
   39bb0:	lsr	r3, r3, #5
   39bb4:	add	r2, ip, r3
   39bb8:	add	r2, r2, #1
   39bbc:	str	r2, [r4, #20]
   39bc0:	strb	r5, [ip, r3]
   39bc4:	ldr	r3, [r4, #20]
   39bc8:	strb	lr, [r3]
   39bcc:	ldrb	r2, [r4, #25]
   39bd0:	ldr	r3, [r4, #20]
   39bd4:	cmp	r2, #0
   39bd8:	addne	r3, r3, #1
   39bdc:	mov	r2, r3
   39be0:	str	r3, [r4, #20]
   39be4:	bl	3395c <flatcc_json_parser_struct_as_root@@Base+0x540>
   39be8:	ldr	r3, [r4, #20]
   39bec:	ldrd	r6, [sp, #8]
   39bf0:	ldr	r8, [sp, #16]
   39bf4:	add	r0, r3, r0
   39bf8:	str	r0, [r4, #20]
   39bfc:	ldrd	r4, [sp]
   39c00:	add	sp, sp, #20
   39c04:	pop	{pc}		; (ldr pc, [sp], #4)
   39c08:	bl	14524 <memcpy@plt>
   39c0c:	ldr	r2, [r4, #20]
   39c10:	add	r2, r2, r5
   39c14:	str	r2, [r4, #20]
   39c18:	b	39b8c <flatcc_json_printer_uint64_struct_field@@Base+0xa4>
   39c1c:	add	r1, r2, #1
   39c20:	mov	r3, #10
   39c24:	str	r1, [r4, #20]
   39c28:	strb	r3, [r2]
   39c2c:	ldrb	r8, [r4, #25]
   39c30:	ldr	r1, [r4, #16]
   39c34:	ldr	r2, [r4, #32]
   39c38:	ldr	r0, [r4, #20]
   39c3c:	mul	r8, r2, r8
   39c40:	add	r3, r0, r8
   39c44:	cmp	r1, r3
   39c48:	bcs	39c60 <flatcc_json_printer_uint64_struct_field@@Base+0x178>
   39c4c:	mov	r1, r8
   39c50:	mov	r0, r4
   39c54:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   39c58:	ldr	r2, [r4, #20]
   39c5c:	b	39b4c <flatcc_json_printer_uint64_struct_field@@Base+0x64>
   39c60:	mov	r2, r8
   39c64:	mov	r1, #32
   39c68:	bl	1459c <memset@plt>
   39c6c:	ldr	r2, [r4, #20]
   39c70:	add	r2, r2, r8
   39c74:	str	r2, [r4, #20]
   39c78:	b	39b4c <flatcc_json_printer_uint64_struct_field@@Base+0x64>

00039c7c <flatcc_json_printer_int8_struct_field@@Base>:
   39c7c:	cmp	r1, #0
   39c80:	strd	r4, [sp, #-24]!	; 0xffffffe8
   39c84:	mov	r4, r0
   39c88:	strd	r6, [sp, #8]
   39c8c:	str	r8, [sp, #16]
   39c90:	str	lr, [sp, #20]
   39c94:	ldrsb	r5, [r2, r3]
   39c98:	ldr	r2, [r0, #20]
   39c9c:	ldr	r6, [sp, #28]
   39ca0:	beq	39cb8 <flatcc_json_printer_int8_struct_field@@Base+0x3c>
   39ca4:	add	r1, r2, #1
   39ca8:	mov	r3, #44	; 0x2c
   39cac:	str	r1, [r0, #20]
   39cb0:	strb	r3, [r2]
   39cb4:	ldr	r2, [r0, #20]
   39cb8:	ldrb	r1, [r4, #25]
   39cbc:	cmp	r1, #0
   39cc0:	bne	39df0 <flatcc_json_printer_int8_struct_field@@Base+0x174>
   39cc4:	ldr	r3, [r4, #16]
   39cc8:	cmp	r3, r2
   39ccc:	bhi	39ce0 <flatcc_json_printer_int8_struct_field@@Base+0x64>
   39cd0:	mov	r0, r4
   39cd4:	ldr	r3, [r4, #44]	; 0x2c
   39cd8:	blx	r3
   39cdc:	ldr	r2, [r4, #20]
   39ce0:	mov	r3, #34	; 0x22
   39ce4:	ldr	r1, [sp, #24]
   39ce8:	strb	r3, [r2]
   39cec:	ldrb	r3, [r4, #26]
   39cf0:	ldr	r2, [r4, #16]
   39cf4:	ldr	r0, [r4, #20]
   39cf8:	cmp	r3, #0
   39cfc:	addeq	r0, r0, #1
   39d00:	add	r3, r0, r6
   39d04:	cmp	r2, r3
   39d08:	mov	r2, r6
   39d0c:	str	r0, [r4, #20]
   39d10:	bhi	39ddc <flatcc_json_printer_int8_struct_field@@Base+0x160>
   39d14:	mov	r0, r4
   39d18:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   39d1c:	ldr	r2, [r4, #20]
   39d20:	mov	r3, #34	; 0x22
   39d24:	mov	r6, #58	; 0x3a
   39d28:	lsr	r0, r5, #31
   39d2c:	mov	lr, #32
   39d30:	strb	r3, [r2]
   39d34:	uxtb	r3, r5
   39d38:	ldrb	r2, [r4, #26]
   39d3c:	ldr	ip, [r4, #20]
   39d40:	clz	r2, r2
   39d44:	lsr	r2, r2, #5
   39d48:	add	r1, ip, r2
   39d4c:	add	r1, r1, #1
   39d50:	str	r1, [r4, #20]
   39d54:	strb	r6, [ip, r2]
   39d58:	ldr	r2, [r4, #20]
   39d5c:	strb	lr, [r2]
   39d60:	ldrb	r1, [r4, #25]
   39d64:	ldr	ip, [r4, #20]
   39d68:	adds	r1, r1, #0
   39d6c:	movne	r1, #1
   39d70:	cmp	r5, #0
   39d74:	add	r2, ip, r1
   39d78:	str	r2, [r4, #20]
   39d7c:	bge	39d94 <flatcc_json_printer_int8_struct_field@@Base+0x118>
   39d80:	rsb	r3, r3, #0
   39d84:	mov	lr, #45	; 0x2d
   39d88:	add	r2, r2, #1
   39d8c:	uxtb	r3, r3
   39d90:	strb	lr, [ip, r1]
   39d94:	cmp	r3, #99	; 0x63
   39d98:	bhi	39e34 <flatcc_json_printer_int8_struct_field@@Base+0x1b8>
   39d9c:	cmp	r3, #9
   39da0:	bhi	39ea0 <flatcc_json_printer_int8_struct_field@@Base+0x224>
   39da4:	add	r3, r3, #48	; 0x30
   39da8:	mov	r1, #0
   39dac:	mov	ip, #1
   39db0:	strb	r3, [r2]
   39db4:	strb	r1, [r2, #1]
   39db8:	ldr	r3, [r4, #20]
   39dbc:	add	r2, r0, ip
   39dc0:	ldrd	r6, [sp, #8]
   39dc4:	ldr	r8, [sp, #16]
   39dc8:	add	r3, r3, r2
   39dcc:	str	r3, [r4, #20]
   39dd0:	ldrd	r4, [sp]
   39dd4:	add	sp, sp, #20
   39dd8:	pop	{pc}		; (ldr pc, [sp], #4)
   39ddc:	bl	14524 <memcpy@plt>
   39de0:	ldr	r2, [r4, #20]
   39de4:	add	r2, r2, r6
   39de8:	str	r2, [r4, #20]
   39dec:	b	39d20 <flatcc_json_printer_int8_struct_field@@Base+0xa4>
   39df0:	add	r1, r2, #1
   39df4:	mov	r3, #10
   39df8:	str	r1, [r4, #20]
   39dfc:	strb	r3, [r2]
   39e00:	ldrb	r7, [r4, #25]
   39e04:	ldr	r1, [r4, #16]
   39e08:	ldr	r2, [r4, #32]
   39e0c:	ldr	r0, [r4, #20]
   39e10:	mul	r7, r2, r7
   39e14:	add	r3, r0, r7
   39e18:	cmp	r1, r3
   39e1c:	bcs	39e84 <flatcc_json_printer_int8_struct_field@@Base+0x208>
   39e20:	mov	r1, r7
   39e24:	mov	r0, r4
   39e28:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   39e2c:	ldr	r2, [r4, #20]
   39e30:	b	39ce0 <flatcc_json_printer_int8_struct_field@@Base+0x64>
   39e34:	movw	ip, #34079	; 0x851f
   39e38:	movt	ip, #20971	; 0x51eb
   39e3c:	mov	r6, #100	; 0x64
   39e40:	mov	lr, #0
   39e44:	umull	ip, r1, ip, r3
   39e48:	mov	r5, #49	; 0x31
   39e4c:	mov	ip, #3
   39e50:	strb	lr, [r2, #3]
   39e54:	movw	lr, #28992	; 0x7140
   39e58:	movt	lr, #4
   39e5c:	lsr	r1, r1, #5
   39e60:	mls	r1, r6, r1, r3
   39e64:	uxtb	r1, r1
   39e68:	ldrb	r3, [lr, r1, lsl #1]
   39e6c:	add	r1, lr, r1, lsl #1
   39e70:	strb	r3, [r2, #1]
   39e74:	ldrb	r3, [r1, #1]
   39e78:	strb	r5, [r2]
   39e7c:	strb	r3, [r2, #2]
   39e80:	b	39db8 <flatcc_json_printer_int8_struct_field@@Base+0x13c>
   39e84:	mov	r2, r7
   39e88:	mov	r1, #32
   39e8c:	bl	1459c <memset@plt>
   39e90:	ldr	r2, [r4, #20]
   39e94:	add	r2, r2, r7
   39e98:	str	r2, [r4, #20]
   39e9c:	b	39ce0 <flatcc_json_printer_int8_struct_field@@Base+0x64>
   39ea0:	mov	ip, #0
   39ea4:	sxth	r3, r3
   39ea8:	movw	r1, #28992	; 0x7140
   39eac:	movt	r1, #4
   39eb0:	add	lr, r1, r3, lsl #1
   39eb4:	strb	ip, [r2, #2]
   39eb8:	mov	ip, #2
   39ebc:	ldrb	r3, [r1, r3, lsl #1]
   39ec0:	strb	r3, [r2]
   39ec4:	ldrb	r3, [lr, #1]
   39ec8:	strb	r3, [r2, #1]
   39ecc:	b	39db8 <flatcc_json_printer_int8_struct_field@@Base+0x13c>

00039ed0 <flatcc_json_printer_int16_struct_field@@Base>:
   39ed0:	cmp	r1, #0
   39ed4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   39ed8:	mov	r4, r0
   39edc:	ldrsh	r5, [r2, r3]
   39ee0:	ldr	r2, [r0, #20]
   39ee4:	strd	r6, [sp, #8]
   39ee8:	str	r8, [sp, #16]
   39eec:	str	lr, [sp, #20]
   39ef0:	ldr	r6, [sp, #28]
   39ef4:	beq	39f0c <flatcc_json_printer_int16_struct_field@@Base+0x3c>
   39ef8:	add	r1, r2, #1
   39efc:	mov	r3, #44	; 0x2c
   39f00:	str	r1, [r0, #20]
   39f04:	strb	r3, [r2]
   39f08:	ldr	r2, [r0, #20]
   39f0c:	ldrb	r1, [r4, #25]
   39f10:	cmp	r1, #0
   39f14:	bne	3a024 <flatcc_json_printer_int16_struct_field@@Base+0x154>
   39f18:	ldr	r3, [r4, #16]
   39f1c:	cmp	r3, r2
   39f20:	bhi	39f34 <flatcc_json_printer_int16_struct_field@@Base+0x64>
   39f24:	mov	r0, r4
   39f28:	ldr	r3, [r4, #44]	; 0x2c
   39f2c:	blx	r3
   39f30:	ldr	r2, [r4, #20]
   39f34:	mov	r3, #34	; 0x22
   39f38:	ldr	r1, [sp, #24]
   39f3c:	strb	r3, [r2]
   39f40:	ldrb	r3, [r4, #26]
   39f44:	ldr	r2, [r4, #16]
   39f48:	ldr	r0, [r4, #20]
   39f4c:	cmp	r3, #0
   39f50:	addeq	r0, r0, #1
   39f54:	add	r3, r0, r6
   39f58:	cmp	r2, r3
   39f5c:	mov	r2, r6
   39f60:	str	r0, [r4, #20]
   39f64:	bhi	3a010 <flatcc_json_printer_int16_struct_field@@Base+0x140>
   39f68:	mov	r0, r4
   39f6c:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   39f70:	ldr	r2, [r4, #20]
   39f74:	mov	r3, #34	; 0x22
   39f78:	mov	lr, #58	; 0x3a
   39f7c:	lsr	r6, r5, #31
   39f80:	mov	ip, #32
   39f84:	uxth	r0, r5
   39f88:	strb	r3, [r2]
   39f8c:	ldrb	r3, [r4, #26]
   39f90:	ldr	r1, [r4, #20]
   39f94:	clz	r3, r3
   39f98:	lsr	r3, r3, #5
   39f9c:	add	r2, r1, r3
   39fa0:	add	r2, r2, #1
   39fa4:	str	r2, [r4, #20]
   39fa8:	strb	lr, [r1, r3]
   39fac:	ldr	r3, [r4, #20]
   39fb0:	strb	ip, [r3]
   39fb4:	ldrb	r3, [r4, #25]
   39fb8:	ldr	r2, [r4, #20]
   39fbc:	adds	r3, r3, #0
   39fc0:	movne	r3, #1
   39fc4:	cmp	r5, #0
   39fc8:	add	r1, r2, r3
   39fcc:	str	r1, [r4, #20]
   39fd0:	bge	39fe8 <flatcc_json_printer_int16_struct_field@@Base+0x118>
   39fd4:	rsb	r0, r0, #0
   39fd8:	mov	ip, #45	; 0x2d
   39fdc:	add	r1, r1, #1
   39fe0:	uxth	r0, r0
   39fe4:	strb	ip, [r2, r3]
   39fe8:	bl	334f0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   39fec:	ldr	r3, [r4, #20]
   39ff0:	add	r0, r6, r0
   39ff4:	ldrd	r6, [sp, #8]
   39ff8:	ldr	r8, [sp, #16]
   39ffc:	add	r3, r3, r0
   3a000:	str	r3, [r4, #20]
   3a004:	ldrd	r4, [sp]
   3a008:	add	sp, sp, #20
   3a00c:	pop	{pc}		; (ldr pc, [sp], #4)
   3a010:	bl	14524 <memcpy@plt>
   3a014:	ldr	r2, [r4, #20]
   3a018:	add	r2, r2, r6
   3a01c:	str	r2, [r4, #20]
   3a020:	b	39f74 <flatcc_json_printer_int16_struct_field@@Base+0xa4>
   3a024:	add	r1, r2, #1
   3a028:	mov	r3, #10
   3a02c:	str	r1, [r4, #20]
   3a030:	strb	r3, [r2]
   3a034:	ldrb	r7, [r4, #25]
   3a038:	ldr	r1, [r4, #16]
   3a03c:	ldr	r2, [r4, #32]
   3a040:	ldr	r0, [r4, #20]
   3a044:	mul	r7, r2, r7
   3a048:	add	r3, r0, r7
   3a04c:	cmp	r1, r3
   3a050:	bcs	3a068 <flatcc_json_printer_int16_struct_field@@Base+0x198>
   3a054:	mov	r1, r7
   3a058:	mov	r0, r4
   3a05c:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3a060:	ldr	r2, [r4, #20]
   3a064:	b	39f34 <flatcc_json_printer_int16_struct_field@@Base+0x64>
   3a068:	mov	r2, r7
   3a06c:	mov	r1, #32
   3a070:	bl	1459c <memset@plt>
   3a074:	ldr	r2, [r4, #20]
   3a078:	add	r2, r2, r7
   3a07c:	str	r2, [r4, #20]
   3a080:	b	39f34 <flatcc_json_printer_int16_struct_field@@Base+0x64>

0003a084 <flatcc_json_printer_int32_struct_field@@Base>:
   3a084:	cmp	r1, #0
   3a088:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3a08c:	mov	r4, r0
   3a090:	ldr	r5, [r2, r3]
   3a094:	ldr	r2, [r0, #20]
   3a098:	strd	r6, [sp, #8]
   3a09c:	str	r8, [sp, #16]
   3a0a0:	str	lr, [sp, #20]
   3a0a4:	ldr	r6, [sp, #28]
   3a0a8:	beq	3a0c0 <flatcc_json_printer_int32_struct_field@@Base+0x3c>
   3a0ac:	add	r1, r2, #1
   3a0b0:	mov	r3, #44	; 0x2c
   3a0b4:	str	r1, [r0, #20]
   3a0b8:	strb	r3, [r2]
   3a0bc:	ldr	r2, [r0, #20]
   3a0c0:	ldrb	r1, [r4, #25]
   3a0c4:	cmp	r1, #0
   3a0c8:	bne	3a1d4 <flatcc_json_printer_int32_struct_field@@Base+0x150>
   3a0cc:	ldr	r3, [r4, #16]
   3a0d0:	cmp	r3, r2
   3a0d4:	bhi	3a0e8 <flatcc_json_printer_int32_struct_field@@Base+0x64>
   3a0d8:	mov	r0, r4
   3a0dc:	ldr	r3, [r4, #44]	; 0x2c
   3a0e0:	blx	r3
   3a0e4:	ldr	r2, [r4, #20]
   3a0e8:	mov	r3, #34	; 0x22
   3a0ec:	ldr	r1, [sp, #24]
   3a0f0:	strb	r3, [r2]
   3a0f4:	ldrb	r3, [r4, #26]
   3a0f8:	ldr	r2, [r4, #16]
   3a0fc:	ldr	r0, [r4, #20]
   3a100:	cmp	r3, #0
   3a104:	addeq	r0, r0, #1
   3a108:	add	r3, r0, r6
   3a10c:	cmp	r2, r3
   3a110:	mov	r2, r6
   3a114:	str	r0, [r4, #20]
   3a118:	bhi	3a1c0 <flatcc_json_printer_int32_struct_field@@Base+0x13c>
   3a11c:	mov	r0, r4
   3a120:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   3a124:	ldr	r2, [r4, #20]
   3a128:	mov	r3, #34	; 0x22
   3a12c:	mov	ip, #58	; 0x3a
   3a130:	lsr	r6, r5, #31
   3a134:	mov	r0, #32
   3a138:	strb	r3, [r2]
   3a13c:	ldrb	r3, [r4, #26]
   3a140:	ldr	r1, [r4, #20]
   3a144:	clz	r3, r3
   3a148:	lsr	r3, r3, #5
   3a14c:	add	r2, r1, r3
   3a150:	add	r2, r2, #1
   3a154:	str	r2, [r4, #20]
   3a158:	strb	ip, [r1, r3]
   3a15c:	ldr	r3, [r4, #20]
   3a160:	strb	r0, [r3]
   3a164:	ldrb	r3, [r4, #25]
   3a168:	ldr	r2, [r4, #20]
   3a16c:	adds	r3, r3, #0
   3a170:	movne	r3, #1
   3a174:	cmp	r5, #0
   3a178:	add	r1, r2, r3
   3a17c:	str	r1, [r4, #20]
   3a180:	bge	3a194 <flatcc_json_printer_int32_struct_field@@Base+0x110>
   3a184:	mov	r0, #45	; 0x2d
   3a188:	rsb	r5, r5, #0
   3a18c:	add	r1, r1, #1
   3a190:	strb	r0, [r2, r3]
   3a194:	mov	r0, r5
   3a198:	bl	33648 <flatcc_json_parser_struct_as_root@@Base+0x22c>
   3a19c:	ldr	r3, [r4, #20]
   3a1a0:	add	r0, r6, r0
   3a1a4:	ldrd	r6, [sp, #8]
   3a1a8:	ldr	r8, [sp, #16]
   3a1ac:	add	r3, r3, r0
   3a1b0:	str	r3, [r4, #20]
   3a1b4:	ldrd	r4, [sp]
   3a1b8:	add	sp, sp, #20
   3a1bc:	pop	{pc}		; (ldr pc, [sp], #4)
   3a1c0:	bl	14524 <memcpy@plt>
   3a1c4:	ldr	r2, [r4, #20]
   3a1c8:	add	r2, r2, r6
   3a1cc:	str	r2, [r4, #20]
   3a1d0:	b	3a128 <flatcc_json_printer_int32_struct_field@@Base+0xa4>
   3a1d4:	add	r1, r2, #1
   3a1d8:	mov	r3, #10
   3a1dc:	str	r1, [r4, #20]
   3a1e0:	strb	r3, [r2]
   3a1e4:	ldrb	r7, [r4, #25]
   3a1e8:	ldr	r1, [r4, #16]
   3a1ec:	ldr	r2, [r4, #32]
   3a1f0:	ldr	r0, [r4, #20]
   3a1f4:	mul	r7, r2, r7
   3a1f8:	add	r3, r0, r7
   3a1fc:	cmp	r1, r3
   3a200:	bcs	3a218 <flatcc_json_printer_int32_struct_field@@Base+0x194>
   3a204:	mov	r1, r7
   3a208:	mov	r0, r4
   3a20c:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3a210:	ldr	r2, [r4, #20]
   3a214:	b	3a0e8 <flatcc_json_printer_int32_struct_field@@Base+0x64>
   3a218:	mov	r2, r7
   3a21c:	mov	r1, #32
   3a220:	bl	1459c <memset@plt>
   3a224:	ldr	r2, [r4, #20]
   3a228:	add	r2, r2, r7
   3a22c:	str	r2, [r4, #20]
   3a230:	b	3a0e8 <flatcc_json_printer_int32_struct_field@@Base+0x64>

0003a234 <flatcc_json_printer_int64_struct_field@@Base>:
   3a234:	cmp	r1, #0
   3a238:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3a23c:	mov	r4, r0
   3a240:	strd	r6, [sp, #8]
   3a244:	str	r8, [sp, #16]
   3a248:	str	lr, [sp, #20]
   3a24c:	ldrd	r6, [r2, r3]
   3a250:	ldr	r2, [r0, #20]
   3a254:	ldr	r5, [sp, #28]
   3a258:	beq	3a270 <flatcc_json_printer_int64_struct_field@@Base+0x3c>
   3a25c:	add	r1, r2, #1
   3a260:	mov	r3, #44	; 0x2c
   3a264:	str	r1, [r0, #20]
   3a268:	strb	r3, [r2]
   3a26c:	ldr	r2, [r0, #20]
   3a270:	ldrb	r1, [r4, #25]
   3a274:	cmp	r1, #0
   3a278:	bne	3a390 <flatcc_json_printer_int64_struct_field@@Base+0x15c>
   3a27c:	ldr	r3, [r4, #16]
   3a280:	cmp	r3, r2
   3a284:	bhi	3a298 <flatcc_json_printer_int64_struct_field@@Base+0x64>
   3a288:	mov	r0, r4
   3a28c:	ldr	r3, [r4, #44]	; 0x2c
   3a290:	blx	r3
   3a294:	ldr	r2, [r4, #20]
   3a298:	mov	r3, #34	; 0x22
   3a29c:	ldr	r1, [sp, #24]
   3a2a0:	strb	r3, [r2]
   3a2a4:	ldrb	r3, [r4, #26]
   3a2a8:	ldr	r2, [r4, #16]
   3a2ac:	ldr	r0, [r4, #20]
   3a2b0:	cmp	r3, #0
   3a2b4:	addeq	r0, r0, #1
   3a2b8:	add	r3, r0, r5
   3a2bc:	cmp	r2, r3
   3a2c0:	mov	r2, r5
   3a2c4:	str	r0, [r4, #20]
   3a2c8:	bhi	3a37c <flatcc_json_printer_int64_struct_field@@Base+0x148>
   3a2cc:	mov	r0, r4
   3a2d0:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   3a2d4:	ldr	r2, [r4, #20]
   3a2d8:	mov	r3, #34	; 0x22
   3a2dc:	mov	ip, #58	; 0x3a
   3a2e0:	lsr	r5, r7, #31
   3a2e4:	mov	r0, #32
   3a2e8:	strb	r3, [r2]
   3a2ec:	ldrb	r3, [r4, #26]
   3a2f0:	ldr	r1, [r4, #20]
   3a2f4:	clz	r3, r3
   3a2f8:	lsr	r3, r3, #5
   3a2fc:	add	r2, r1, r3
   3a300:	add	r2, r2, #1
   3a304:	str	r2, [r4, #20]
   3a308:	strb	ip, [r1, r3]
   3a30c:	ldr	r3, [r4, #20]
   3a310:	strb	r0, [r3]
   3a314:	ldrb	r3, [r4, #25]
   3a318:	ldr	r1, [r4, #20]
   3a31c:	adds	r3, r3, #0
   3a320:	movne	r3, #1
   3a324:	cmp	r6, #0
   3a328:	sbcs	r2, r7, #0
   3a32c:	add	r2, r1, r3
   3a330:	str	r2, [r4, #20]
   3a334:	bge	3a34c <flatcc_json_printer_int64_struct_field@@Base+0x118>
   3a338:	rsbs	r6, r6, #0
   3a33c:	mov	r0, #45	; 0x2d
   3a340:	rsc	r7, r7, #0
   3a344:	add	r2, r2, #1
   3a348:	strb	r0, [r1, r3]
   3a34c:	mov	r0, r6
   3a350:	mov	r1, r7
   3a354:	bl	3395c <flatcc_json_parser_struct_as_root@@Base+0x540>
   3a358:	ldr	r3, [r4, #20]
   3a35c:	add	r0, r5, r0
   3a360:	ldrd	r6, [sp, #8]
   3a364:	ldr	r8, [sp, #16]
   3a368:	add	r3, r3, r0
   3a36c:	str	r3, [r4, #20]
   3a370:	ldrd	r4, [sp]
   3a374:	add	sp, sp, #20
   3a378:	pop	{pc}		; (ldr pc, [sp], #4)
   3a37c:	bl	14524 <memcpy@plt>
   3a380:	ldr	r2, [r4, #20]
   3a384:	add	r2, r2, r5
   3a388:	str	r2, [r4, #20]
   3a38c:	b	3a2d8 <flatcc_json_printer_int64_struct_field@@Base+0xa4>
   3a390:	add	r1, r2, #1
   3a394:	mov	r3, #10
   3a398:	str	r1, [r4, #20]
   3a39c:	strb	r3, [r2]
   3a3a0:	ldrb	r8, [r4, #25]
   3a3a4:	ldr	r1, [r4, #16]
   3a3a8:	ldr	r2, [r4, #32]
   3a3ac:	ldr	r0, [r4, #20]
   3a3b0:	mul	r8, r2, r8
   3a3b4:	add	r3, r0, r8
   3a3b8:	cmp	r1, r3
   3a3bc:	bcs	3a3d4 <flatcc_json_printer_int64_struct_field@@Base+0x1a0>
   3a3c0:	mov	r1, r8
   3a3c4:	mov	r0, r4
   3a3c8:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3a3cc:	ldr	r2, [r4, #20]
   3a3d0:	b	3a298 <flatcc_json_printer_int64_struct_field@@Base+0x64>
   3a3d4:	mov	r2, r8
   3a3d8:	mov	r1, #32
   3a3dc:	bl	1459c <memset@plt>
   3a3e0:	ldr	r2, [r4, #20]
   3a3e4:	add	r2, r2, r8
   3a3e8:	str	r2, [r4, #20]
   3a3ec:	b	3a298 <flatcc_json_printer_int64_struct_field@@Base+0x64>

0003a3f0 <flatcc_json_printer_bool_struct_field@@Base>:
   3a3f0:	cmp	r1, #0
   3a3f4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3a3f8:	mov	r4, r0
   3a3fc:	strd	r6, [sp, #8]
   3a400:	str	r8, [sp, #16]
   3a404:	str	lr, [sp, #20]
   3a408:	ldrb	r5, [r2, r3]
   3a40c:	ldr	r2, [r0, #20]
   3a410:	ldr	r6, [sp, #28]
   3a414:	beq	3a42c <flatcc_json_printer_bool_struct_field@@Base+0x3c>
   3a418:	add	r1, r2, #1
   3a41c:	mov	r3, #44	; 0x2c
   3a420:	str	r1, [r0, #20]
   3a424:	strb	r3, [r2]
   3a428:	ldr	r2, [r0, #20]
   3a42c:	ldrb	r1, [r4, #25]
   3a430:	cmp	r1, #0
   3a434:	bne	3a564 <flatcc_json_printer_bool_struct_field@@Base+0x174>
   3a438:	ldr	r3, [r4, #16]
   3a43c:	cmp	r3, r2
   3a440:	bhi	3a454 <flatcc_json_printer_bool_struct_field@@Base+0x64>
   3a444:	mov	r0, r4
   3a448:	ldr	r3, [r4, #44]	; 0x2c
   3a44c:	blx	r3
   3a450:	ldr	r2, [r4, #20]
   3a454:	mov	r3, #34	; 0x22
   3a458:	ldr	r1, [sp, #24]
   3a45c:	strb	r3, [r2]
   3a460:	ldrb	r3, [r4, #26]
   3a464:	ldr	r2, [r4, #16]
   3a468:	ldr	r0, [r4, #20]
   3a46c:	cmp	r3, #0
   3a470:	addeq	r0, r0, #1
   3a474:	add	r3, r0, r6
   3a478:	cmp	r2, r3
   3a47c:	mov	r2, r6
   3a480:	str	r0, [r4, #20]
   3a484:	bhi	3a52c <flatcc_json_printer_bool_struct_field@@Base+0x13c>
   3a488:	mov	r0, r4
   3a48c:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   3a490:	ldr	r2, [r4, #20]
   3a494:	mov	r3, #34	; 0x22
   3a498:	mov	ip, #58	; 0x3a
   3a49c:	mov	r0, #32
   3a4a0:	strb	r3, [r2]
   3a4a4:	ldrb	r3, [r4, #26]
   3a4a8:	ldr	r1, [r4, #20]
   3a4ac:	clz	r3, r3
   3a4b0:	lsr	r3, r3, #5
   3a4b4:	add	r2, r1, r3
   3a4b8:	add	r2, r2, #1
   3a4bc:	str	r2, [r4, #20]
   3a4c0:	strb	ip, [r1, r3]
   3a4c4:	ldr	r3, [r4, #20]
   3a4c8:	strb	r0, [r3]
   3a4cc:	ldrb	r3, [r4, #25]
   3a4d0:	ldr	r1, [r4, #20]
   3a4d4:	adds	r3, r3, #0
   3a4d8:	movne	r3, #1
   3a4dc:	cmp	r5, #0
   3a4e0:	add	r2, r1, r3
   3a4e4:	str	r2, [r4, #20]
   3a4e8:	beq	3a540 <flatcc_json_printer_bool_struct_field@@Base+0x150>
   3a4ec:	ldr	ip, [pc, #208]	; 3a5c4 <flatcc_json_printer_bool_struct_field@@Base+0x1d4>
   3a4f0:	movw	r0, #28992	; 0x7140
   3a4f4:	movt	r0, #4
   3a4f8:	ldr	lr, [r0, #1768]	; 0x6e8
   3a4fc:	mov	r0, #4
   3a500:	ldrb	ip, [ip, #4]
   3a504:	str	lr, [r1, r3]
   3a508:	strb	ip, [r2, #4]
   3a50c:	ldr	r3, [r4, #20]
   3a510:	ldrd	r6, [sp, #8]
   3a514:	ldr	r8, [sp, #16]
   3a518:	add	r3, r3, r0
   3a51c:	str	r3, [r4, #20]
   3a520:	ldrd	r4, [sp]
   3a524:	add	sp, sp, #20
   3a528:	pop	{pc}		; (ldr pc, [sp], #4)
   3a52c:	bl	14524 <memcpy@plt>
   3a530:	ldr	r2, [r4, #20]
   3a534:	add	r2, r2, r6
   3a538:	str	r2, [r4, #20]
   3a53c:	b	3a494 <flatcc_json_printer_bool_struct_field@@Base+0xa4>
   3a540:	movw	r0, #28992	; 0x7140
   3a544:	movt	r0, #4
   3a548:	add	ip, r0, #1776	; 0x6f0
   3a54c:	ldr	lr, [r0, #1776]	; 0x6f0
   3a550:	mov	r0, #5
   3a554:	ldrh	ip, [ip, #4]
   3a558:	str	lr, [r1, r3]
   3a55c:	strh	ip, [r2, #4]
   3a560:	b	3a50c <flatcc_json_printer_bool_struct_field@@Base+0x11c>
   3a564:	add	r1, r2, #1
   3a568:	mov	r3, #10
   3a56c:	str	r1, [r4, #20]
   3a570:	strb	r3, [r2]
   3a574:	ldrb	r7, [r4, #25]
   3a578:	ldr	r1, [r4, #16]
   3a57c:	ldr	r2, [r4, #32]
   3a580:	ldr	r0, [r4, #20]
   3a584:	mul	r7, r2, r7
   3a588:	add	r3, r0, r7
   3a58c:	cmp	r1, r3
   3a590:	bcs	3a5a8 <flatcc_json_printer_bool_struct_field@@Base+0x1b8>
   3a594:	mov	r1, r7
   3a598:	mov	r0, r4
   3a59c:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3a5a0:	ldr	r2, [r4, #20]
   3a5a4:	b	3a454 <flatcc_json_printer_bool_struct_field@@Base+0x64>
   3a5a8:	mov	r2, r7
   3a5ac:	mov	r1, #32
   3a5b0:	bl	1459c <memset@plt>
   3a5b4:	ldr	r2, [r4, #20]
   3a5b8:	add	r2, r2, r7
   3a5bc:	str	r2, [r4, #20]
   3a5c0:	b	3a454 <flatcc_json_printer_bool_struct_field@@Base+0x64>
   3a5c4:	andeq	r7, r4, r8, lsr #16

0003a5c8 <flatcc_json_printer_float_struct_field@@Base>:
   3a5c8:	add	r3, r2, r3
   3a5cc:	cmp	r1, #0
   3a5d0:	strd	r4, [sp, #-16]!
   3a5d4:	ldr	r2, [r0, #20]
   3a5d8:	mov	r4, r0
   3a5dc:	str	r6, [sp, #8]
   3a5e0:	str	lr, [sp, #12]
   3a5e4:	vpush	{d8}
   3a5e8:	vldr	s16, [r3]
   3a5ec:	ldr	r5, [sp, #28]
   3a5f0:	beq	3a608 <flatcc_json_printer_float_struct_field@@Base+0x40>
   3a5f4:	add	r1, r2, #1
   3a5f8:	mov	r3, #44	; 0x2c
   3a5fc:	str	r1, [r0, #20]
   3a600:	strb	r3, [r2]
   3a604:	ldr	r2, [r0, #20]
   3a608:	ldrb	r1, [r4, #25]
   3a60c:	cmp	r1, #0
   3a610:	bne	3a6fc <flatcc_json_printer_float_struct_field@@Base+0x134>
   3a614:	ldr	r3, [r4, #16]
   3a618:	cmp	r3, r2
   3a61c:	bhi	3a630 <flatcc_json_printer_float_struct_field@@Base+0x68>
   3a620:	mov	r0, r4
   3a624:	ldr	r3, [r4, #44]	; 0x2c
   3a628:	blx	r3
   3a62c:	ldr	r2, [r4, #20]
   3a630:	mov	r3, #34	; 0x22
   3a634:	ldr	r1, [sp, #24]
   3a638:	strb	r3, [r2]
   3a63c:	ldrb	r3, [r4, #26]
   3a640:	ldr	r2, [r4, #16]
   3a644:	ldr	r0, [r4, #20]
   3a648:	cmp	r3, #0
   3a64c:	addeq	r0, r0, #1
   3a650:	add	r3, r0, r5
   3a654:	cmp	r2, r3
   3a658:	mov	r2, r5
   3a65c:	str	r0, [r4, #20]
   3a660:	bhi	3a6e8 <flatcc_json_printer_float_struct_field@@Base+0x120>
   3a664:	mov	r0, r4
   3a668:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   3a66c:	ldr	r2, [r4, #20]
   3a670:	mov	r3, #34	; 0x22
   3a674:	mov	ip, #58	; 0x3a
   3a678:	vcvt.f64.f32	d0, s16
   3a67c:	mov	r0, #32
   3a680:	strb	r3, [r2]
   3a684:	ldrb	r3, [r4, #26]
   3a688:	ldr	r1, [r4, #20]
   3a68c:	clz	r3, r3
   3a690:	lsr	r3, r3, #5
   3a694:	add	r2, r1, r3
   3a698:	add	r2, r2, #1
   3a69c:	str	r2, [r4, #20]
   3a6a0:	strb	ip, [r1, r3]
   3a6a4:	ldr	r3, [r4, #20]
   3a6a8:	strb	r0, [r3]
   3a6ac:	ldrb	r2, [r4, #25]
   3a6b0:	ldr	r3, [r4, #20]
   3a6b4:	cmp	r2, #0
   3a6b8:	addne	r3, r3, #1
   3a6bc:	mov	r0, r3
   3a6c0:	str	r3, [r4, #20]
   3a6c4:	bl	34820 <flatcc_json_parser_struct_as_root@@Base+0x1404>
   3a6c8:	ldr	r3, [r4, #20]
   3a6cc:	vpop	{d8}
   3a6d0:	add	r0, r3, r0
   3a6d4:	ldr	r6, [sp, #8]
   3a6d8:	str	r0, [r4, #20]
   3a6dc:	ldrd	r4, [sp]
   3a6e0:	add	sp, sp, #12
   3a6e4:	pop	{pc}		; (ldr pc, [sp], #4)
   3a6e8:	bl	14524 <memcpy@plt>
   3a6ec:	ldr	r2, [r4, #20]
   3a6f0:	add	r2, r2, r5
   3a6f4:	str	r2, [r4, #20]
   3a6f8:	b	3a670 <flatcc_json_printer_float_struct_field@@Base+0xa8>
   3a6fc:	add	r1, r2, #1
   3a700:	mov	r3, #10
   3a704:	str	r1, [r4, #20]
   3a708:	strb	r3, [r2]
   3a70c:	ldrb	r6, [r4, #25]
   3a710:	ldr	r1, [r4, #16]
   3a714:	ldr	r2, [r4, #32]
   3a718:	ldr	r0, [r4, #20]
   3a71c:	mul	r6, r2, r6
   3a720:	add	r3, r0, r6
   3a724:	cmp	r1, r3
   3a728:	bcs	3a740 <flatcc_json_printer_float_struct_field@@Base+0x178>
   3a72c:	mov	r1, r6
   3a730:	mov	r0, r4
   3a734:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3a738:	ldr	r2, [r4, #20]
   3a73c:	b	3a630 <flatcc_json_printer_float_struct_field@@Base+0x68>
   3a740:	mov	r2, r6
   3a744:	mov	r1, #32
   3a748:	bl	1459c <memset@plt>
   3a74c:	ldr	r2, [r4, #20]
   3a750:	add	r2, r2, r6
   3a754:	str	r2, [r4, #20]
   3a758:	b	3a630 <flatcc_json_printer_float_struct_field@@Base+0x68>

0003a75c <flatcc_json_printer_double_struct_field@@Base>:
   3a75c:	add	r3, r2, r3
   3a760:	cmp	r1, #0
   3a764:	strd	r4, [sp, #-16]!
   3a768:	ldr	r2, [r0, #20]
   3a76c:	mov	r4, r0
   3a770:	str	r6, [sp, #8]
   3a774:	str	lr, [sp, #12]
   3a778:	vpush	{d8}
   3a77c:	vldr	d8, [r3]
   3a780:	ldr	r5, [sp, #28]
   3a784:	beq	3a79c <flatcc_json_printer_double_struct_field@@Base+0x40>
   3a788:	add	r1, r2, #1
   3a78c:	mov	r3, #44	; 0x2c
   3a790:	str	r1, [r0, #20]
   3a794:	strb	r3, [r2]
   3a798:	ldr	r2, [r0, #20]
   3a79c:	ldrb	r1, [r4, #25]
   3a7a0:	cmp	r1, #0
   3a7a4:	bne	3a890 <flatcc_json_printer_double_struct_field@@Base+0x134>
   3a7a8:	ldr	r3, [r4, #16]
   3a7ac:	cmp	r3, r2
   3a7b0:	bhi	3a7c4 <flatcc_json_printer_double_struct_field@@Base+0x68>
   3a7b4:	mov	r0, r4
   3a7b8:	ldr	r3, [r4, #44]	; 0x2c
   3a7bc:	blx	r3
   3a7c0:	ldr	r2, [r4, #20]
   3a7c4:	mov	r3, #34	; 0x22
   3a7c8:	ldr	r1, [sp, #24]
   3a7cc:	strb	r3, [r2]
   3a7d0:	ldrb	r3, [r4, #26]
   3a7d4:	ldr	r2, [r4, #16]
   3a7d8:	ldr	r0, [r4, #20]
   3a7dc:	cmp	r3, #0
   3a7e0:	addeq	r0, r0, #1
   3a7e4:	add	r3, r0, r5
   3a7e8:	cmp	r2, r3
   3a7ec:	mov	r2, r5
   3a7f0:	str	r0, [r4, #20]
   3a7f4:	bhi	3a87c <flatcc_json_printer_double_struct_field@@Base+0x120>
   3a7f8:	mov	r0, r4
   3a7fc:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   3a800:	ldr	r2, [r4, #20]
   3a804:	mov	r3, #34	; 0x22
   3a808:	mov	ip, #58	; 0x3a
   3a80c:	vmov.f64	d0, d8
   3a810:	mov	r0, #32
   3a814:	strb	r3, [r2]
   3a818:	ldrb	r3, [r4, #26]
   3a81c:	ldr	r1, [r4, #20]
   3a820:	clz	r3, r3
   3a824:	lsr	r3, r3, #5
   3a828:	add	r2, r1, r3
   3a82c:	add	r2, r2, #1
   3a830:	str	r2, [r4, #20]
   3a834:	strb	ip, [r1, r3]
   3a838:	ldr	r3, [r4, #20]
   3a83c:	strb	r0, [r3]
   3a840:	ldrb	r2, [r4, #25]
   3a844:	ldr	r3, [r4, #20]
   3a848:	cmp	r2, #0
   3a84c:	addne	r3, r3, #1
   3a850:	mov	r0, r3
   3a854:	str	r3, [r4, #20]
   3a858:	bl	34820 <flatcc_json_parser_struct_as_root@@Base+0x1404>
   3a85c:	ldr	r3, [r4, #20]
   3a860:	vpop	{d8}
   3a864:	add	r0, r3, r0
   3a868:	ldr	r6, [sp, #8]
   3a86c:	str	r0, [r4, #20]
   3a870:	ldrd	r4, [sp]
   3a874:	add	sp, sp, #12
   3a878:	pop	{pc}		; (ldr pc, [sp], #4)
   3a87c:	bl	14524 <memcpy@plt>
   3a880:	ldr	r2, [r4, #20]
   3a884:	add	r2, r2, r5
   3a888:	str	r2, [r4, #20]
   3a88c:	b	3a804 <flatcc_json_printer_double_struct_field@@Base+0xa8>
   3a890:	add	r1, r2, #1
   3a894:	mov	r3, #10
   3a898:	str	r1, [r4, #20]
   3a89c:	strb	r3, [r2]
   3a8a0:	ldrb	r6, [r4, #25]
   3a8a4:	ldr	r1, [r4, #16]
   3a8a8:	ldr	r2, [r4, #32]
   3a8ac:	ldr	r0, [r4, #20]
   3a8b0:	mul	r6, r2, r6
   3a8b4:	add	r3, r0, r6
   3a8b8:	cmp	r1, r3
   3a8bc:	bcs	3a8d4 <flatcc_json_printer_double_struct_field@@Base+0x178>
   3a8c0:	mov	r1, r6
   3a8c4:	mov	r0, r4
   3a8c8:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3a8cc:	ldr	r2, [r4, #20]
   3a8d0:	b	3a7c4 <flatcc_json_printer_double_struct_field@@Base+0x68>
   3a8d4:	mov	r2, r6
   3a8d8:	mov	r1, #32
   3a8dc:	bl	1459c <memset@plt>
   3a8e0:	ldr	r2, [r4, #20]
   3a8e4:	add	r2, r2, r6
   3a8e8:	str	r2, [r4, #20]
   3a8ec:	b	3a7c4 <flatcc_json_printer_double_struct_field@@Base+0x68>

0003a8f0 <flatcc_json_printer_uint8_enum_struct_field@@Base>:
   3a8f0:	cmp	r1, #0
   3a8f4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3a8f8:	mov	r4, r0
   3a8fc:	strd	r6, [sp, #8]
   3a900:	strd	r8, [sp, #16]
   3a904:	str	sl, [sp, #24]
   3a908:	str	lr, [sp, #28]
   3a90c:	ldrb	r5, [r2, r3]
   3a910:	ldr	r2, [r0, #20]
   3a914:	ldr	r8, [sp, #32]
   3a918:	ldr	r7, [sp, #36]	; 0x24
   3a91c:	ldr	r6, [sp, #40]	; 0x28
   3a920:	beq	3a938 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x48>
   3a924:	add	r1, r2, #1
   3a928:	mov	r3, #44	; 0x2c
   3a92c:	str	r1, [r0, #20]
   3a930:	strb	r3, [r2]
   3a934:	ldr	r2, [r0, #20]
   3a938:	ldrb	r1, [r4, #25]
   3a93c:	cmp	r1, #0
   3a940:	bne	3aa88 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x198>
   3a944:	ldr	r3, [r4, #16]
   3a948:	cmp	r2, r3
   3a94c:	bcc	3a960 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x70>
   3a950:	mov	r0, r4
   3a954:	ldr	r3, [r4, #44]	; 0x2c
   3a958:	blx	r3
   3a95c:	ldr	r2, [r4, #20]
   3a960:	mov	r3, #34	; 0x22
   3a964:	strb	r3, [r2]
   3a968:	ldrb	r3, [r4, #26]
   3a96c:	ldr	r2, [r4, #16]
   3a970:	ldr	r0, [r4, #20]
   3a974:	cmp	r3, #0
   3a978:	addeq	r0, r0, #1
   3a97c:	add	r3, r0, r7
   3a980:	cmp	r2, r3
   3a984:	str	r0, [r4, #20]
   3a988:	bhi	3aa24 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x134>
   3a98c:	mov	r2, r7
   3a990:	mov	r1, r8
   3a994:	mov	r0, r4
   3a998:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   3a99c:	ldr	r2, [r4, #20]
   3a9a0:	mov	r3, #34	; 0x22
   3a9a4:	mov	ip, #58	; 0x3a
   3a9a8:	mov	r0, #32
   3a9ac:	strb	r3, [r2]
   3a9b0:	ldrb	r3, [r4, #26]
   3a9b4:	ldr	r1, [r4, #20]
   3a9b8:	clz	r3, r3
   3a9bc:	lsr	r3, r3, #5
   3a9c0:	add	r2, r1, r3
   3a9c4:	add	r2, r2, #1
   3a9c8:	str	r2, [r4, #20]
   3a9cc:	strb	ip, [r1, r3]
   3a9d0:	ldr	r3, [r4, #20]
   3a9d4:	strb	r0, [r3]
   3a9d8:	ldrb	r3, [r4, #25]
   3a9dc:	ldr	r0, [r4, #20]
   3a9e0:	ldrb	r2, [r4, #27]
   3a9e4:	adds	r3, r3, #0
   3a9e8:	movne	r3, #1
   3a9ec:	add	r1, r0, r3
   3a9f0:	cmp	r2, #0
   3a9f4:	str	r1, [r4, #20]
   3a9f8:	bne	3aa40 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x150>
   3a9fc:	mov	r1, r5
   3aa00:	mov	r0, r4
   3aa04:	ldrd	r4, [sp]
   3aa08:	mov	r3, r6
   3aa0c:	ldrd	r6, [sp, #8]
   3aa10:	ldrd	r8, [sp, #16]
   3aa14:	ldr	sl, [sp, #24]
   3aa18:	ldr	lr, [sp, #28]
   3aa1c:	add	sp, sp, #32
   3aa20:	bx	r3
   3aa24:	mov	r2, r7
   3aa28:	mov	r1, r8
   3aa2c:	bl	14524 <memcpy@plt>
   3aa30:	ldr	r2, [r4, #20]
   3aa34:	add	r2, r2, r7
   3aa38:	str	r2, [r4, #20]
   3aa3c:	b	3a9a0 <flatcc_json_printer_uint8_enum_struct_field@@Base+0xb0>
   3aa40:	cmp	r5, #99	; 0x63
   3aa44:	bhi	3aae8 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x1f8>
   3aa48:	cmp	r5, #9
   3aa4c:	bhi	3ab38 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x248>
   3aa50:	add	r5, r5, #48	; 0x30
   3aa54:	mov	r2, #0
   3aa58:	mov	ip, #1
   3aa5c:	strb	r2, [r1, #1]
   3aa60:	strb	r5, [r0, r3]
   3aa64:	ldr	r3, [r4, #20]
   3aa68:	ldrd	r6, [sp, #8]
   3aa6c:	ldrd	r8, [sp, #16]
   3aa70:	add	r3, r3, ip
   3aa74:	ldr	sl, [sp, #24]
   3aa78:	str	r3, [r4, #20]
   3aa7c:	ldrd	r4, [sp]
   3aa80:	add	sp, sp, #28
   3aa84:	pop	{pc}		; (ldr pc, [sp], #4)
   3aa88:	add	r1, r2, #1
   3aa8c:	mov	r3, #10
   3aa90:	str	r1, [r4, #20]
   3aa94:	strb	r3, [r2]
   3aa98:	ldrb	r3, [r4, #25]
   3aa9c:	ldr	r1, [r4, #16]
   3aaa0:	ldr	r2, [r4, #32]
   3aaa4:	ldr	r0, [r4, #20]
   3aaa8:	mul	r9, r2, r3
   3aaac:	add	r3, r0, r9
   3aab0:	cmp	r1, r3
   3aab4:	bcs	3aacc <flatcc_json_printer_uint8_enum_struct_field@@Base+0x1dc>
   3aab8:	mov	r1, r9
   3aabc:	mov	r0, r4
   3aac0:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3aac4:	ldr	r2, [r4, #20]
   3aac8:	b	3a960 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x70>
   3aacc:	mov	r2, r9
   3aad0:	mov	r1, #32
   3aad4:	bl	1459c <memset@plt>
   3aad8:	ldr	r2, [r4, #20]
   3aadc:	add	r2, r2, r9
   3aae0:	str	r2, [r4, #20]
   3aae4:	b	3a960 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x70>
   3aae8:	movw	r2, #34079	; 0x851f
   3aaec:	movt	r2, #20971	; 0x51eb
   3aaf0:	mov	r6, #100	; 0x64
   3aaf4:	mov	ip, #0
   3aaf8:	umull	lr, r2, r2, r5
   3aafc:	movw	lr, #28992	; 0x7140
   3ab00:	movt	lr, #4
   3ab04:	strb	ip, [r1, #3]
   3ab08:	mov	ip, #3
   3ab0c:	lsr	r2, r2, #5
   3ab10:	mls	r5, r6, r2, r5
   3ab14:	add	r2, r2, #48	; 0x30
   3ab18:	uxtb	r5, r5
   3ab1c:	ldrb	r6, [lr, r5, lsl #1]
   3ab20:	add	lr, lr, r5, lsl #1
   3ab24:	strb	r6, [r1, #1]
   3ab28:	ldrb	lr, [lr, #1]
   3ab2c:	strb	lr, [r1, #2]
   3ab30:	strb	r2, [r0, r3]
   3ab34:	b	3aa64 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x174>
   3ab38:	mov	ip, #0
   3ab3c:	sxth	r5, r5
   3ab40:	movw	r2, #28992	; 0x7140
   3ab44:	movt	r2, #4
   3ab48:	add	lr, r2, r5, lsl #1
   3ab4c:	strb	ip, [r1, #2]
   3ab50:	mov	ip, #2
   3ab54:	ldrb	r2, [r2, r5, lsl #1]
   3ab58:	strb	r2, [r0, r3]
   3ab5c:	ldrb	r3, [lr, #1]
   3ab60:	strb	r3, [r1, #1]
   3ab64:	b	3aa64 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x174>

0003ab68 <flatcc_json_printer_uint16_enum_struct_field@@Base>:
   3ab68:	cmp	r1, #0
   3ab6c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3ab70:	mov	r4, r0
   3ab74:	ldrh	r5, [r2, r3]
   3ab78:	ldr	r2, [r0, #20]
   3ab7c:	strd	r6, [sp, #8]
   3ab80:	strd	r8, [sp, #16]
   3ab84:	str	sl, [sp, #24]
   3ab88:	str	lr, [sp, #28]
   3ab8c:	ldr	r8, [sp, #32]
   3ab90:	ldr	r7, [sp, #36]	; 0x24
   3ab94:	ldr	r6, [sp, #40]	; 0x28
   3ab98:	beq	3abb0 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x48>
   3ab9c:	add	r1, r2, #1
   3aba0:	mov	r3, #44	; 0x2c
   3aba4:	str	r1, [r0, #20]
   3aba8:	strb	r3, [r2]
   3abac:	ldr	r2, [r0, #20]
   3abb0:	ldrb	r1, [r4, #25]
   3abb4:	cmp	r1, #0
   3abb8:	bne	3ace0 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x178>
   3abbc:	ldr	r3, [r4, #16]
   3abc0:	cmp	r3, r2
   3abc4:	bhi	3abd8 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x70>
   3abc8:	mov	r0, r4
   3abcc:	ldr	r3, [r4, #44]	; 0x2c
   3abd0:	blx	r3
   3abd4:	ldr	r2, [r4, #20]
   3abd8:	mov	r3, #34	; 0x22
   3abdc:	strb	r3, [r2]
   3abe0:	ldrb	r3, [r4, #26]
   3abe4:	ldr	r2, [r4, #16]
   3abe8:	ldr	r0, [r4, #20]
   3abec:	cmp	r3, #0
   3abf0:	addeq	r0, r0, #1
   3abf4:	add	r3, r0, r7
   3abf8:	cmp	r2, r3
   3abfc:	str	r0, [r4, #20]
   3ac00:	bhi	3ac98 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x130>
   3ac04:	mov	r2, r7
   3ac08:	mov	r1, r8
   3ac0c:	mov	r0, r4
   3ac10:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   3ac14:	ldr	r2, [r4, #20]
   3ac18:	mov	r3, #34	; 0x22
   3ac1c:	mov	ip, #58	; 0x3a
   3ac20:	mov	r0, #32
   3ac24:	strb	r3, [r2]
   3ac28:	ldrb	r3, [r4, #26]
   3ac2c:	ldr	r1, [r4, #20]
   3ac30:	clz	r3, r3
   3ac34:	lsr	r3, r3, #5
   3ac38:	add	r2, r1, r3
   3ac3c:	add	r2, r2, #1
   3ac40:	str	r2, [r4, #20]
   3ac44:	strb	ip, [r1, r3]
   3ac48:	ldr	r3, [r4, #20]
   3ac4c:	strb	r0, [r3]
   3ac50:	ldrb	r2, [r4, #25]
   3ac54:	ldr	r1, [r4, #20]
   3ac58:	ldrb	r3, [r4, #27]
   3ac5c:	cmp	r2, #0
   3ac60:	addne	r1, r1, #1
   3ac64:	cmp	r3, #0
   3ac68:	str	r1, [r4, #20]
   3ac6c:	bne	3acb4 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x14c>
   3ac70:	mov	r1, r5
   3ac74:	mov	r0, r4
   3ac78:	ldrd	r4, [sp]
   3ac7c:	mov	r3, r6
   3ac80:	ldrd	r6, [sp, #8]
   3ac84:	ldrd	r8, [sp, #16]
   3ac88:	ldr	sl, [sp, #24]
   3ac8c:	ldr	lr, [sp, #28]
   3ac90:	add	sp, sp, #32
   3ac94:	bx	r3
   3ac98:	mov	r2, r7
   3ac9c:	mov	r1, r8
   3aca0:	bl	14524 <memcpy@plt>
   3aca4:	ldr	r2, [r4, #20]
   3aca8:	add	r2, r2, r7
   3acac:	str	r2, [r4, #20]
   3acb0:	b	3ac18 <flatcc_json_printer_uint16_enum_struct_field@@Base+0xb0>
   3acb4:	mov	r0, r5
   3acb8:	bl	334f0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   3acbc:	ldr	r3, [r4, #20]
   3acc0:	ldrd	r6, [sp, #8]
   3acc4:	ldrd	r8, [sp, #16]
   3acc8:	add	r0, r3, r0
   3accc:	ldr	sl, [sp, #24]
   3acd0:	str	r0, [r4, #20]
   3acd4:	ldrd	r4, [sp]
   3acd8:	add	sp, sp, #28
   3acdc:	pop	{pc}		; (ldr pc, [sp], #4)
   3ace0:	add	r1, r2, #1
   3ace4:	mov	r3, #10
   3ace8:	str	r1, [r4, #20]
   3acec:	strb	r3, [r2]
   3acf0:	ldrb	r3, [r4, #25]
   3acf4:	ldr	r1, [r4, #16]
   3acf8:	ldr	r2, [r4, #32]
   3acfc:	ldr	r0, [r4, #20]
   3ad00:	mul	r9, r2, r3
   3ad04:	add	r3, r0, r9
   3ad08:	cmp	r1, r3
   3ad0c:	bcs	3ad24 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x1bc>
   3ad10:	mov	r1, r9
   3ad14:	mov	r0, r4
   3ad18:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3ad1c:	ldr	r2, [r4, #20]
   3ad20:	b	3abd8 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x70>
   3ad24:	mov	r2, r9
   3ad28:	mov	r1, #32
   3ad2c:	bl	1459c <memset@plt>
   3ad30:	ldr	r2, [r4, #20]
   3ad34:	add	r2, r2, r9
   3ad38:	str	r2, [r4, #20]
   3ad3c:	b	3abd8 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x70>

0003ad40 <flatcc_json_printer_uint32_enum_struct_field@@Base>:
   3ad40:	cmp	r1, #0
   3ad44:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3ad48:	mov	r4, r0
   3ad4c:	ldr	r5, [r2, r3]
   3ad50:	ldr	r2, [r0, #20]
   3ad54:	strd	r6, [sp, #8]
   3ad58:	strd	r8, [sp, #16]
   3ad5c:	str	sl, [sp, #24]
   3ad60:	str	lr, [sp, #28]
   3ad64:	ldr	r8, [sp, #32]
   3ad68:	ldr	r7, [sp, #36]	; 0x24
   3ad6c:	ldr	r6, [sp, #40]	; 0x28
   3ad70:	beq	3ad88 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x48>
   3ad74:	add	r1, r2, #1
   3ad78:	mov	r3, #44	; 0x2c
   3ad7c:	str	r1, [r0, #20]
   3ad80:	strb	r3, [r2]
   3ad84:	ldr	r2, [r0, #20]
   3ad88:	ldrb	r1, [r4, #25]
   3ad8c:	cmp	r1, #0
   3ad90:	bne	3aeb8 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x178>
   3ad94:	ldr	r3, [r4, #16]
   3ad98:	cmp	r3, r2
   3ad9c:	bhi	3adb0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x70>
   3ada0:	mov	r0, r4
   3ada4:	ldr	r3, [r4, #44]	; 0x2c
   3ada8:	blx	r3
   3adac:	ldr	r2, [r4, #20]
   3adb0:	mov	r3, #34	; 0x22
   3adb4:	strb	r3, [r2]
   3adb8:	ldrb	r3, [r4, #26]
   3adbc:	ldr	r2, [r4, #16]
   3adc0:	ldr	r0, [r4, #20]
   3adc4:	cmp	r3, #0
   3adc8:	addeq	r0, r0, #1
   3adcc:	add	r3, r0, r7
   3add0:	cmp	r2, r3
   3add4:	str	r0, [r4, #20]
   3add8:	bhi	3ae70 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x130>
   3addc:	mov	r2, r7
   3ade0:	mov	r1, r8
   3ade4:	mov	r0, r4
   3ade8:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   3adec:	ldr	r2, [r4, #20]
   3adf0:	mov	r3, #34	; 0x22
   3adf4:	mov	ip, #58	; 0x3a
   3adf8:	mov	r0, #32
   3adfc:	strb	r3, [r2]
   3ae00:	ldrb	r3, [r4, #26]
   3ae04:	ldr	r1, [r4, #20]
   3ae08:	clz	r3, r3
   3ae0c:	lsr	r3, r3, #5
   3ae10:	add	r2, r1, r3
   3ae14:	add	r2, r2, #1
   3ae18:	str	r2, [r4, #20]
   3ae1c:	strb	ip, [r1, r3]
   3ae20:	ldr	r3, [r4, #20]
   3ae24:	strb	r0, [r3]
   3ae28:	ldrb	r2, [r4, #25]
   3ae2c:	ldr	r1, [r4, #20]
   3ae30:	ldrb	r3, [r4, #27]
   3ae34:	cmp	r2, #0
   3ae38:	addne	r1, r1, #1
   3ae3c:	cmp	r3, #0
   3ae40:	str	r1, [r4, #20]
   3ae44:	bne	3ae8c <flatcc_json_printer_uint32_enum_struct_field@@Base+0x14c>
   3ae48:	mov	r1, r5
   3ae4c:	mov	r0, r4
   3ae50:	ldrd	r4, [sp]
   3ae54:	mov	r3, r6
   3ae58:	ldrd	r6, [sp, #8]
   3ae5c:	ldrd	r8, [sp, #16]
   3ae60:	ldr	sl, [sp, #24]
   3ae64:	ldr	lr, [sp, #28]
   3ae68:	add	sp, sp, #32
   3ae6c:	bx	r3
   3ae70:	mov	r2, r7
   3ae74:	mov	r1, r8
   3ae78:	bl	14524 <memcpy@plt>
   3ae7c:	ldr	r2, [r4, #20]
   3ae80:	add	r2, r2, r7
   3ae84:	str	r2, [r4, #20]
   3ae88:	b	3adf0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0xb0>
   3ae8c:	mov	r0, r5
   3ae90:	bl	33648 <flatcc_json_parser_struct_as_root@@Base+0x22c>
   3ae94:	ldr	r3, [r4, #20]
   3ae98:	ldrd	r6, [sp, #8]
   3ae9c:	ldrd	r8, [sp, #16]
   3aea0:	add	r0, r3, r0
   3aea4:	ldr	sl, [sp, #24]
   3aea8:	str	r0, [r4, #20]
   3aeac:	ldrd	r4, [sp]
   3aeb0:	add	sp, sp, #28
   3aeb4:	pop	{pc}		; (ldr pc, [sp], #4)
   3aeb8:	add	r1, r2, #1
   3aebc:	mov	r3, #10
   3aec0:	str	r1, [r4, #20]
   3aec4:	strb	r3, [r2]
   3aec8:	ldrb	r3, [r4, #25]
   3aecc:	ldr	r1, [r4, #16]
   3aed0:	ldr	r2, [r4, #32]
   3aed4:	ldr	r0, [r4, #20]
   3aed8:	mul	r9, r2, r3
   3aedc:	add	r3, r0, r9
   3aee0:	cmp	r1, r3
   3aee4:	bcs	3aefc <flatcc_json_printer_uint32_enum_struct_field@@Base+0x1bc>
   3aee8:	mov	r1, r9
   3aeec:	mov	r0, r4
   3aef0:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3aef4:	ldr	r2, [r4, #20]
   3aef8:	b	3adb0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x70>
   3aefc:	mov	r2, r9
   3af00:	mov	r1, #32
   3af04:	bl	1459c <memset@plt>
   3af08:	ldr	r2, [r4, #20]
   3af0c:	add	r2, r2, r9
   3af10:	str	r2, [r4, #20]
   3af14:	b	3adb0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x70>

0003af18 <flatcc_json_printer_uint64_enum_struct_field@@Base>:
   3af18:	cmp	r1, #0
   3af1c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3af20:	mov	r4, r0
   3af24:	strd	r6, [sp, #8]
   3af28:	strd	r8, [sp, #16]
   3af2c:	str	sl, [sp, #24]
   3af30:	str	lr, [sp, #28]
   3af34:	ldrd	r6, [r2, r3]
   3af38:	ldr	r2, [r0, #20]
   3af3c:	ldr	r9, [sp, #32]
   3af40:	ldr	r8, [sp, #36]	; 0x24
   3af44:	ldr	r5, [sp, #40]	; 0x28
   3af48:	beq	3af60 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x48>
   3af4c:	add	r1, r2, #1
   3af50:	mov	r3, #44	; 0x2c
   3af54:	str	r1, [r0, #20]
   3af58:	strb	r3, [r2]
   3af5c:	ldr	r2, [r0, #20]
   3af60:	ldrb	r1, [r4, #25]
   3af64:	cmp	r1, #0
   3af68:	bne	3b098 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x180>
   3af6c:	ldr	r3, [r4, #16]
   3af70:	cmp	r3, r2
   3af74:	bhi	3af88 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x70>
   3af78:	mov	r0, r4
   3af7c:	ldr	r3, [r4, #44]	; 0x2c
   3af80:	blx	r3
   3af84:	ldr	r2, [r4, #20]
   3af88:	mov	r3, #34	; 0x22
   3af8c:	strb	r3, [r2]
   3af90:	ldrb	r3, [r4, #26]
   3af94:	ldr	r2, [r4, #16]
   3af98:	ldr	r0, [r4, #20]
   3af9c:	cmp	r3, #0
   3afa0:	addeq	r0, r0, #1
   3afa4:	add	r3, r0, r8
   3afa8:	cmp	r2, r3
   3afac:	str	r0, [r4, #20]
   3afb0:	bhi	3b04c <flatcc_json_printer_uint64_enum_struct_field@@Base+0x134>
   3afb4:	mov	r2, r8
   3afb8:	mov	r1, r9
   3afbc:	mov	r0, r4
   3afc0:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   3afc4:	ldr	r8, [r4, #20]
   3afc8:	mov	r3, #34	; 0x22
   3afcc:	mov	ip, #58	; 0x3a
   3afd0:	mov	r0, #32
   3afd4:	strb	r3, [r8]
   3afd8:	ldrb	r3, [r4, #26]
   3afdc:	ldr	r1, [r4, #20]
   3afe0:	clz	r3, r3
   3afe4:	lsr	r3, r3, #5
   3afe8:	add	r2, r1, r3
   3afec:	add	r2, r2, #1
   3aff0:	str	r2, [r4, #20]
   3aff4:	strb	ip, [r1, r3]
   3aff8:	ldr	r3, [r4, #20]
   3affc:	strb	r0, [r3]
   3b000:	ldrb	r1, [r4, #25]
   3b004:	ldr	r2, [r4, #20]
   3b008:	ldrb	r3, [r4, #27]
   3b00c:	cmp	r1, #0
   3b010:	addne	r2, r2, #1
   3b014:	cmp	r3, #0
   3b018:	str	r2, [r4, #20]
   3b01c:	bne	3b068 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x150>
   3b020:	mov	r2, r6
   3b024:	mov	r3, r7
   3b028:	ldrd	r6, [sp, #8]
   3b02c:	mov	r0, r4
   3b030:	mov	r1, r5
   3b034:	ldrd	r4, [sp]
   3b038:	ldrd	r8, [sp, #16]
   3b03c:	ldr	sl, [sp, #24]
   3b040:	ldr	lr, [sp, #28]
   3b044:	add	sp, sp, #32
   3b048:	bx	r1
   3b04c:	mov	r2, r8
   3b050:	mov	r1, r9
   3b054:	bl	14524 <memcpy@plt>
   3b058:	ldr	r3, [r4, #20]
   3b05c:	add	r8, r3, r8
   3b060:	str	r8, [r4, #20]
   3b064:	b	3afc8 <flatcc_json_printer_uint64_enum_struct_field@@Base+0xb0>
   3b068:	mov	r0, r6
   3b06c:	mov	r1, r7
   3b070:	bl	3395c <flatcc_json_parser_struct_as_root@@Base+0x540>
   3b074:	ldr	r3, [r4, #20]
   3b078:	ldrd	r6, [sp, #8]
   3b07c:	ldrd	r8, [sp, #16]
   3b080:	add	r0, r3, r0
   3b084:	ldr	sl, [sp, #24]
   3b088:	str	r0, [r4, #20]
   3b08c:	ldrd	r4, [sp]
   3b090:	add	sp, sp, #28
   3b094:	pop	{pc}		; (ldr pc, [sp], #4)
   3b098:	add	r1, r2, #1
   3b09c:	mov	r3, #10
   3b0a0:	str	r1, [r4, #20]
   3b0a4:	strb	r3, [r2]
   3b0a8:	ldrb	r3, [r4, #25]
   3b0ac:	ldr	r1, [r4, #16]
   3b0b0:	ldr	r2, [r4, #32]
   3b0b4:	ldr	r0, [r4, #20]
   3b0b8:	mul	sl, r2, r3
   3b0bc:	add	r3, r0, sl
   3b0c0:	cmp	r1, r3
   3b0c4:	bcs	3b0dc <flatcc_json_printer_uint64_enum_struct_field@@Base+0x1c4>
   3b0c8:	mov	r1, sl
   3b0cc:	mov	r0, r4
   3b0d0:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3b0d4:	ldr	r2, [r4, #20]
   3b0d8:	b	3af88 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x70>
   3b0dc:	mov	r2, sl
   3b0e0:	mov	r1, #32
   3b0e4:	bl	1459c <memset@plt>
   3b0e8:	ldr	r2, [r4, #20]
   3b0ec:	add	r2, r2, sl
   3b0f0:	str	r2, [r4, #20]
   3b0f4:	b	3af88 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x70>

0003b0f8 <flatcc_json_printer_int8_enum_struct_field@@Base>:
   3b0f8:	cmp	r1, #0
   3b0fc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3b100:	mov	r4, r0
   3b104:	strd	r6, [sp, #8]
   3b108:	strd	r8, [sp, #16]
   3b10c:	str	sl, [sp, #24]
   3b110:	str	lr, [sp, #28]
   3b114:	ldrsb	r5, [r2, r3]
   3b118:	ldr	r2, [r0, #20]
   3b11c:	ldr	r8, [sp, #32]
   3b120:	ldr	r7, [sp, #36]	; 0x24
   3b124:	ldr	r6, [sp, #40]	; 0x28
   3b128:	beq	3b140 <flatcc_json_printer_int8_enum_struct_field@@Base+0x48>
   3b12c:	add	r1, r2, #1
   3b130:	mov	r3, #44	; 0x2c
   3b134:	str	r1, [r0, #20]
   3b138:	strb	r3, [r2]
   3b13c:	ldr	r2, [r0, #20]
   3b140:	ldrb	r1, [r4, #25]
   3b144:	cmp	r1, #0
   3b148:	bne	3b2b8 <flatcc_json_printer_int8_enum_struct_field@@Base+0x1c0>
   3b14c:	ldr	r3, [r4, #16]
   3b150:	cmp	r3, r2
   3b154:	bhi	3b168 <flatcc_json_printer_int8_enum_struct_field@@Base+0x70>
   3b158:	mov	r0, r4
   3b15c:	ldr	r3, [r4, #44]	; 0x2c
   3b160:	blx	r3
   3b164:	ldr	r2, [r4, #20]
   3b168:	mov	r3, #34	; 0x22
   3b16c:	strb	r3, [r2]
   3b170:	ldrb	r3, [r4, #26]
   3b174:	ldr	r2, [r4, #16]
   3b178:	ldr	r0, [r4, #20]
   3b17c:	cmp	r3, #0
   3b180:	addeq	r0, r0, #1
   3b184:	add	r3, r0, r7
   3b188:	cmp	r2, r3
   3b18c:	str	r0, [r4, #20]
   3b190:	bhi	3b274 <flatcc_json_printer_int8_enum_struct_field@@Base+0x17c>
   3b194:	mov	r2, r7
   3b198:	mov	r1, r8
   3b19c:	mov	r0, r4
   3b1a0:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   3b1a4:	ldr	r2, [r4, #20]
   3b1a8:	mov	r3, #34	; 0x22
   3b1ac:	mov	ip, #58	; 0x3a
   3b1b0:	mov	r0, #32
   3b1b4:	strb	r3, [r2]
   3b1b8:	ldrb	r3, [r4, #26]
   3b1bc:	ldr	r1, [r4, #20]
   3b1c0:	clz	r3, r3
   3b1c4:	lsr	r3, r3, #5
   3b1c8:	add	r2, r1, r3
   3b1cc:	add	r2, r2, #1
   3b1d0:	str	r2, [r4, #20]
   3b1d4:	strb	ip, [r1, r3]
   3b1d8:	ldr	r3, [r4, #20]
   3b1dc:	strb	r0, [r3]
   3b1e0:	ldrb	r3, [r4, #25]
   3b1e4:	ldr	r1, [r4, #20]
   3b1e8:	ldrb	r0, [r4, #27]
   3b1ec:	adds	r3, r3, #0
   3b1f0:	movne	r3, #1
   3b1f4:	add	r2, r1, r3
   3b1f8:	cmp	r0, #0
   3b1fc:	str	r2, [r4, #20]
   3b200:	beq	3b290 <flatcc_json_printer_int8_enum_struct_field@@Base+0x198>
   3b204:	cmp	r5, #0
   3b208:	lsr	r0, r5, #31
   3b20c:	uxtb	r5, r5
   3b210:	bge	3b228 <flatcc_json_printer_int8_enum_struct_field@@Base+0x130>
   3b214:	rsb	r5, r5, #0
   3b218:	mov	ip, #45	; 0x2d
   3b21c:	add	r2, r2, #1
   3b220:	uxtb	r5, r5
   3b224:	strb	ip, [r1, r3]
   3b228:	cmp	r5, #99	; 0x63
   3b22c:	bhi	3b318 <flatcc_json_printer_int8_enum_struct_field@@Base+0x220>
   3b230:	cmp	r5, #9
   3b234:	bhi	3b368 <flatcc_json_printer_int8_enum_struct_field@@Base+0x270>
   3b238:	add	r5, r5, #48	; 0x30
   3b23c:	mov	r1, #0
   3b240:	mov	lr, #1
   3b244:	strb	r5, [r2]
   3b248:	strb	r1, [r2, #1]
   3b24c:	ldr	r3, [r4, #20]
   3b250:	add	r2, r0, lr
   3b254:	ldrd	r6, [sp, #8]
   3b258:	ldrd	r8, [sp, #16]
   3b25c:	add	r3, r3, r2
   3b260:	ldr	sl, [sp, #24]
   3b264:	str	r3, [r4, #20]
   3b268:	ldrd	r4, [sp]
   3b26c:	add	sp, sp, #28
   3b270:	pop	{pc}		; (ldr pc, [sp], #4)
   3b274:	mov	r2, r7
   3b278:	mov	r1, r8
   3b27c:	bl	14524 <memcpy@plt>
   3b280:	ldr	r2, [r4, #20]
   3b284:	add	r2, r2, r7
   3b288:	str	r2, [r4, #20]
   3b28c:	b	3b1a8 <flatcc_json_printer_int8_enum_struct_field@@Base+0xb0>
   3b290:	mov	r1, r5
   3b294:	mov	r0, r4
   3b298:	ldrd	r4, [sp]
   3b29c:	mov	r3, r6
   3b2a0:	ldrd	r6, [sp, #8]
   3b2a4:	ldrd	r8, [sp, #16]
   3b2a8:	ldr	sl, [sp, #24]
   3b2ac:	ldr	lr, [sp, #28]
   3b2b0:	add	sp, sp, #32
   3b2b4:	bx	r3
   3b2b8:	add	r1, r2, #1
   3b2bc:	mov	r3, #10
   3b2c0:	str	r1, [r4, #20]
   3b2c4:	strb	r3, [r2]
   3b2c8:	ldrb	r3, [r4, #25]
   3b2cc:	ldr	r1, [r4, #16]
   3b2d0:	ldr	r2, [r4, #32]
   3b2d4:	ldr	r0, [r4, #20]
   3b2d8:	mul	r9, r2, r3
   3b2dc:	add	r3, r0, r9
   3b2e0:	cmp	r1, r3
   3b2e4:	bcs	3b2fc <flatcc_json_printer_int8_enum_struct_field@@Base+0x204>
   3b2e8:	mov	r1, r9
   3b2ec:	mov	r0, r4
   3b2f0:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3b2f4:	ldr	r2, [r4, #20]
   3b2f8:	b	3b168 <flatcc_json_printer_int8_enum_struct_field@@Base+0x70>
   3b2fc:	mov	r2, r9
   3b300:	mov	r1, #32
   3b304:	bl	1459c <memset@plt>
   3b308:	ldr	r2, [r4, #20]
   3b30c:	add	r2, r2, r9
   3b310:	str	r2, [r4, #20]
   3b314:	b	3b168 <flatcc_json_printer_int8_enum_struct_field@@Base+0x70>
   3b318:	movw	r3, #34079	; 0x851f
   3b31c:	movt	r3, #20971	; 0x51eb
   3b320:	mov	r1, #0
   3b324:	mov	r7, #100	; 0x64
   3b328:	umull	ip, r3, r3, r5
   3b32c:	movw	ip, #28992	; 0x7140
   3b330:	movt	ip, #4
   3b334:	strb	r1, [r2, #3]
   3b338:	mov	r6, #49	; 0x31
   3b33c:	mov	lr, #3
   3b340:	lsr	r1, r3, #5
   3b344:	mls	r5, r7, r1, r5
   3b348:	uxtb	r5, r5
   3b34c:	ldrb	r3, [ip, r5, lsl #1]
   3b350:	add	r5, ip, r5, lsl #1
   3b354:	strb	r3, [r2, #1]
   3b358:	ldrb	r3, [r5, #1]
   3b35c:	strb	r6, [r2]
   3b360:	strb	r3, [r2, #2]
   3b364:	b	3b24c <flatcc_json_printer_int8_enum_struct_field@@Base+0x154>
   3b368:	mov	r3, #0
   3b36c:	sxth	r5, r5
   3b370:	movw	r1, #28992	; 0x7140
   3b374:	movt	r1, #4
   3b378:	strb	r3, [r2, #2]
   3b37c:	add	r3, r1, r5, lsl #1
   3b380:	mov	lr, #2
   3b384:	ldrb	r1, [r1, r5, lsl #1]
   3b388:	strb	r1, [r2]
   3b38c:	ldrb	r3, [r3, #1]
   3b390:	strb	r3, [r2, #1]
   3b394:	b	3b24c <flatcc_json_printer_int8_enum_struct_field@@Base+0x154>

0003b398 <flatcc_json_printer_int16_enum_struct_field@@Base>:
   3b398:	cmp	r1, #0
   3b39c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3b3a0:	mov	r4, r0
   3b3a4:	ldrsh	r5, [r2, r3]
   3b3a8:	ldr	r2, [r0, #20]
   3b3ac:	strd	r6, [sp, #8]
   3b3b0:	strd	r8, [sp, #16]
   3b3b4:	str	sl, [sp, #24]
   3b3b8:	str	lr, [sp, #28]
   3b3bc:	ldr	r8, [sp, #32]
   3b3c0:	ldr	r7, [sp, #36]	; 0x24
   3b3c4:	ldr	r6, [sp, #40]	; 0x28
   3b3c8:	beq	3b3e0 <flatcc_json_printer_int16_enum_struct_field@@Base+0x48>
   3b3cc:	add	r1, r2, #1
   3b3d0:	mov	r3, #44	; 0x2c
   3b3d4:	str	r1, [r0, #20]
   3b3d8:	strb	r3, [r2]
   3b3dc:	ldr	r2, [r0, #20]
   3b3e0:	ldrb	r1, [r4, #25]
   3b3e4:	cmp	r1, #0
   3b3e8:	bne	3b538 <flatcc_json_printer_int16_enum_struct_field@@Base+0x1a0>
   3b3ec:	ldr	r3, [r4, #16]
   3b3f0:	cmp	r3, r2
   3b3f4:	bhi	3b408 <flatcc_json_printer_int16_enum_struct_field@@Base+0x70>
   3b3f8:	mov	r0, r4
   3b3fc:	ldr	r3, [r4, #44]	; 0x2c
   3b400:	blx	r3
   3b404:	ldr	r2, [r4, #20]
   3b408:	mov	r3, #34	; 0x22
   3b40c:	strb	r3, [r2]
   3b410:	ldrb	r3, [r4, #26]
   3b414:	ldr	r2, [r4, #16]
   3b418:	ldr	r0, [r4, #20]
   3b41c:	cmp	r3, #0
   3b420:	addeq	r0, r0, #1
   3b424:	add	r3, r0, r7
   3b428:	cmp	r2, r3
   3b42c:	str	r0, [r4, #20]
   3b430:	bhi	3b4f4 <flatcc_json_printer_int16_enum_struct_field@@Base+0x15c>
   3b434:	mov	r2, r7
   3b438:	mov	r1, r8
   3b43c:	mov	r0, r4
   3b440:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   3b444:	ldr	r2, [r4, #20]
   3b448:	mov	r3, #34	; 0x22
   3b44c:	mov	ip, #58	; 0x3a
   3b450:	mov	r0, #32
   3b454:	strb	r3, [r2]
   3b458:	ldrb	r3, [r4, #26]
   3b45c:	ldr	r1, [r4, #20]
   3b460:	clz	r3, r3
   3b464:	lsr	r3, r3, #5
   3b468:	add	r2, r1, r3
   3b46c:	add	r2, r2, #1
   3b470:	str	r2, [r4, #20]
   3b474:	strb	ip, [r1, r3]
   3b478:	ldr	r3, [r4, #20]
   3b47c:	strb	r0, [r3]
   3b480:	ldrb	r3, [r4, #25]
   3b484:	ldr	r2, [r4, #20]
   3b488:	ldrb	r0, [r4, #27]
   3b48c:	adds	r3, r3, #0
   3b490:	movne	r3, #1
   3b494:	add	r1, r2, r3
   3b498:	cmp	r0, #0
   3b49c:	str	r1, [r4, #20]
   3b4a0:	beq	3b510 <flatcc_json_printer_int16_enum_struct_field@@Base+0x178>
   3b4a4:	cmp	r5, #0
   3b4a8:	lsr	r6, r5, #31
   3b4ac:	uxth	r0, r5
   3b4b0:	bge	3b4c8 <flatcc_json_printer_int16_enum_struct_field@@Base+0x130>
   3b4b4:	rsb	r0, r0, #0
   3b4b8:	mov	ip, #45	; 0x2d
   3b4bc:	add	r1, r1, #1
   3b4c0:	uxth	r0, r0
   3b4c4:	strb	ip, [r2, r3]
   3b4c8:	bl	334f0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   3b4cc:	ldr	r3, [r4, #20]
   3b4d0:	add	r0, r6, r0
   3b4d4:	ldrd	r6, [sp, #8]
   3b4d8:	ldrd	r8, [sp, #16]
   3b4dc:	add	r3, r3, r0
   3b4e0:	ldr	sl, [sp, #24]
   3b4e4:	str	r3, [r4, #20]
   3b4e8:	ldrd	r4, [sp]
   3b4ec:	add	sp, sp, #28
   3b4f0:	pop	{pc}		; (ldr pc, [sp], #4)
   3b4f4:	mov	r2, r7
   3b4f8:	mov	r1, r8
   3b4fc:	bl	14524 <memcpy@plt>
   3b500:	ldr	r2, [r4, #20]
   3b504:	add	r2, r2, r7
   3b508:	str	r2, [r4, #20]
   3b50c:	b	3b448 <flatcc_json_printer_int16_enum_struct_field@@Base+0xb0>
   3b510:	mov	r1, r5
   3b514:	mov	r0, r4
   3b518:	ldrd	r4, [sp]
   3b51c:	mov	r3, r6
   3b520:	ldrd	r6, [sp, #8]
   3b524:	ldrd	r8, [sp, #16]
   3b528:	ldr	sl, [sp, #24]
   3b52c:	ldr	lr, [sp, #28]
   3b530:	add	sp, sp, #32
   3b534:	bx	r3
   3b538:	add	r1, r2, #1
   3b53c:	mov	r3, #10
   3b540:	str	r1, [r4, #20]
   3b544:	strb	r3, [r2]
   3b548:	ldrb	r3, [r4, #25]
   3b54c:	ldr	r1, [r4, #16]
   3b550:	ldr	r2, [r4, #32]
   3b554:	ldr	r0, [r4, #20]
   3b558:	mul	r9, r2, r3
   3b55c:	add	r3, r0, r9
   3b560:	cmp	r1, r3
   3b564:	bcs	3b57c <flatcc_json_printer_int16_enum_struct_field@@Base+0x1e4>
   3b568:	mov	r1, r9
   3b56c:	mov	r0, r4
   3b570:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3b574:	ldr	r2, [r4, #20]
   3b578:	b	3b408 <flatcc_json_printer_int16_enum_struct_field@@Base+0x70>
   3b57c:	mov	r2, r9
   3b580:	mov	r1, #32
   3b584:	bl	1459c <memset@plt>
   3b588:	ldr	r2, [r4, #20]
   3b58c:	add	r2, r2, r9
   3b590:	str	r2, [r4, #20]
   3b594:	b	3b408 <flatcc_json_printer_int16_enum_struct_field@@Base+0x70>

0003b598 <flatcc_json_printer_int32_enum_struct_field@@Base>:
   3b598:	cmp	r1, #0
   3b59c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3b5a0:	mov	r4, r0
   3b5a4:	strd	r6, [sp, #8]
   3b5a8:	strd	r8, [sp, #16]
   3b5ac:	str	sl, [sp, #24]
   3b5b0:	str	lr, [sp, #28]
   3b5b4:	ldr	r6, [r2, r3]
   3b5b8:	ldr	r2, [r0, #20]
   3b5bc:	ldr	r8, [sp, #32]
   3b5c0:	ldr	r7, [sp, #36]	; 0x24
   3b5c4:	ldr	r5, [sp, #40]	; 0x28
   3b5c8:	beq	3b5e0 <flatcc_json_printer_int32_enum_struct_field@@Base+0x48>
   3b5cc:	add	r1, r2, #1
   3b5d0:	mov	r3, #44	; 0x2c
   3b5d4:	str	r1, [r0, #20]
   3b5d8:	strb	r3, [r2]
   3b5dc:	ldr	r2, [r0, #20]
   3b5e0:	ldrb	r1, [r4, #25]
   3b5e4:	cmp	r1, #0
   3b5e8:	bne	3b734 <flatcc_json_printer_int32_enum_struct_field@@Base+0x19c>
   3b5ec:	ldr	r3, [r4, #16]
   3b5f0:	cmp	r3, r2
   3b5f4:	bhi	3b608 <flatcc_json_printer_int32_enum_struct_field@@Base+0x70>
   3b5f8:	mov	r0, r4
   3b5fc:	ldr	r3, [r4, #44]	; 0x2c
   3b600:	blx	r3
   3b604:	ldr	r2, [r4, #20]
   3b608:	mov	r3, #34	; 0x22
   3b60c:	strb	r3, [r2]
   3b610:	ldrb	r3, [r4, #26]
   3b614:	ldr	r2, [r4, #16]
   3b618:	ldr	r0, [r4, #20]
   3b61c:	cmp	r3, #0
   3b620:	addeq	r0, r0, #1
   3b624:	add	r3, r0, r7
   3b628:	cmp	r2, r3
   3b62c:	str	r0, [r4, #20]
   3b630:	bhi	3b6f0 <flatcc_json_printer_int32_enum_struct_field@@Base+0x158>
   3b634:	mov	r2, r7
   3b638:	mov	r1, r8
   3b63c:	mov	r0, r4
   3b640:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   3b644:	ldr	r2, [r4, #20]
   3b648:	mov	r3, #34	; 0x22
   3b64c:	mov	ip, #58	; 0x3a
   3b650:	mov	r0, #32
   3b654:	strb	r3, [r2]
   3b658:	ldrb	r3, [r4, #26]
   3b65c:	ldr	r1, [r4, #20]
   3b660:	clz	r3, r3
   3b664:	lsr	r3, r3, #5
   3b668:	add	r2, r1, r3
   3b66c:	add	r2, r2, #1
   3b670:	str	r2, [r4, #20]
   3b674:	strb	ip, [r1, r3]
   3b678:	ldr	r3, [r4, #20]
   3b67c:	strb	r0, [r3]
   3b680:	ldrb	r3, [r4, #25]
   3b684:	ldr	r2, [r4, #20]
   3b688:	ldrb	r0, [r4, #27]
   3b68c:	adds	r3, r3, #0
   3b690:	movne	r3, #1
   3b694:	add	r1, r2, r3
   3b698:	cmp	r0, #0
   3b69c:	str	r1, [r4, #20]
   3b6a0:	beq	3b70c <flatcc_json_printer_int32_enum_struct_field@@Base+0x174>
   3b6a4:	cmp	r6, #0
   3b6a8:	lsr	r5, r6, #31
   3b6ac:	bge	3b6c0 <flatcc_json_printer_int32_enum_struct_field@@Base+0x128>
   3b6b0:	mov	r0, #45	; 0x2d
   3b6b4:	rsb	r6, r6, #0
   3b6b8:	add	r1, r1, #1
   3b6bc:	strb	r0, [r2, r3]
   3b6c0:	mov	r0, r6
   3b6c4:	bl	33648 <flatcc_json_parser_struct_as_root@@Base+0x22c>
   3b6c8:	ldr	r3, [r4, #20]
   3b6cc:	add	r0, r5, r0
   3b6d0:	ldrd	r6, [sp, #8]
   3b6d4:	ldrd	r8, [sp, #16]
   3b6d8:	add	r3, r3, r0
   3b6dc:	ldr	sl, [sp, #24]
   3b6e0:	str	r3, [r4, #20]
   3b6e4:	ldrd	r4, [sp]
   3b6e8:	add	sp, sp, #28
   3b6ec:	pop	{pc}		; (ldr pc, [sp], #4)
   3b6f0:	mov	r2, r7
   3b6f4:	mov	r1, r8
   3b6f8:	bl	14524 <memcpy@plt>
   3b6fc:	ldr	r2, [r4, #20]
   3b700:	add	r2, r2, r7
   3b704:	str	r2, [r4, #20]
   3b708:	b	3b648 <flatcc_json_printer_int32_enum_struct_field@@Base+0xb0>
   3b70c:	mov	r1, r6
   3b710:	mov	r0, r4
   3b714:	ldrd	r6, [sp, #8]
   3b718:	mov	r3, r5
   3b71c:	ldrd	r4, [sp]
   3b720:	ldrd	r8, [sp, #16]
   3b724:	ldr	sl, [sp, #24]
   3b728:	ldr	lr, [sp, #28]
   3b72c:	add	sp, sp, #32
   3b730:	bx	r3
   3b734:	add	r1, r2, #1
   3b738:	mov	r3, #10
   3b73c:	str	r1, [r4, #20]
   3b740:	strb	r3, [r2]
   3b744:	ldrb	r3, [r4, #25]
   3b748:	ldr	r1, [r4, #16]
   3b74c:	ldr	r2, [r4, #32]
   3b750:	ldr	r0, [r4, #20]
   3b754:	mul	r9, r2, r3
   3b758:	add	r3, r0, r9
   3b75c:	cmp	r1, r3
   3b760:	bcs	3b778 <flatcc_json_printer_int32_enum_struct_field@@Base+0x1e0>
   3b764:	mov	r1, r9
   3b768:	mov	r0, r4
   3b76c:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3b770:	ldr	r2, [r4, #20]
   3b774:	b	3b608 <flatcc_json_printer_int32_enum_struct_field@@Base+0x70>
   3b778:	mov	r2, r9
   3b77c:	mov	r1, #32
   3b780:	bl	1459c <memset@plt>
   3b784:	ldr	r2, [r4, #20]
   3b788:	add	r2, r2, r9
   3b78c:	str	r2, [r4, #20]
   3b790:	b	3b608 <flatcc_json_printer_int32_enum_struct_field@@Base+0x70>

0003b794 <flatcc_json_printer_int64_enum_struct_field@@Base>:
   3b794:	cmp	r1, #0
   3b798:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3b79c:	mov	r4, r0
   3b7a0:	strd	r6, [sp, #8]
   3b7a4:	strd	r8, [sp, #16]
   3b7a8:	str	sl, [sp, #24]
   3b7ac:	str	lr, [sp, #28]
   3b7b0:	ldrd	r6, [r2, r3]
   3b7b4:	ldr	r2, [r0, #20]
   3b7b8:	ldr	r9, [sp, #32]
   3b7bc:	ldr	r8, [sp, #36]	; 0x24
   3b7c0:	ldr	r5, [sp, #40]	; 0x28
   3b7c4:	beq	3b7dc <flatcc_json_printer_int64_enum_struct_field@@Base+0x48>
   3b7c8:	add	r1, r2, #1
   3b7cc:	mov	r3, #44	; 0x2c
   3b7d0:	str	r1, [r0, #20]
   3b7d4:	strb	r3, [r2]
   3b7d8:	ldr	r2, [r0, #20]
   3b7dc:	ldrb	r1, [r4, #25]
   3b7e0:	cmp	r1, #0
   3b7e4:	bne	3b940 <flatcc_json_printer_int64_enum_struct_field@@Base+0x1ac>
   3b7e8:	ldr	r3, [r4, #16]
   3b7ec:	cmp	r3, r2
   3b7f0:	bhi	3b804 <flatcc_json_printer_int64_enum_struct_field@@Base+0x70>
   3b7f4:	mov	r0, r4
   3b7f8:	ldr	r3, [r4, #44]	; 0x2c
   3b7fc:	blx	r3
   3b800:	ldr	r2, [r4, #20]
   3b804:	mov	r3, #34	; 0x22
   3b808:	strb	r3, [r2]
   3b80c:	ldrb	r3, [r4, #26]
   3b810:	ldr	r2, [r4, #16]
   3b814:	ldr	r0, [r4, #20]
   3b818:	cmp	r3, #0
   3b81c:	addeq	r0, r0, #1
   3b820:	add	r3, r0, r8
   3b824:	cmp	r2, r3
   3b828:	str	r0, [r4, #20]
   3b82c:	bhi	3b8f8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x164>
   3b830:	mov	r2, r8
   3b834:	mov	r1, r9
   3b838:	mov	r0, r4
   3b83c:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   3b840:	ldr	r8, [r4, #20]
   3b844:	mov	r3, #34	; 0x22
   3b848:	mov	ip, #58	; 0x3a
   3b84c:	mov	r0, #32
   3b850:	strb	r3, [r8]
   3b854:	ldrb	r3, [r4, #26]
   3b858:	ldr	r1, [r4, #20]
   3b85c:	clz	r3, r3
   3b860:	lsr	r3, r3, #5
   3b864:	add	r2, r1, r3
   3b868:	add	r2, r2, #1
   3b86c:	str	r2, [r4, #20]
   3b870:	strb	ip, [r1, r3]
   3b874:	ldr	r3, [r4, #20]
   3b878:	strb	r0, [r3]
   3b87c:	ldrb	r3, [r4, #25]
   3b880:	ldr	r1, [r4, #20]
   3b884:	ldrb	r0, [r4, #27]
   3b888:	adds	r3, r3, #0
   3b88c:	movne	r3, #1
   3b890:	add	r2, r1, r3
   3b894:	cmp	r0, #0
   3b898:	str	r2, [r4, #20]
   3b89c:	beq	3b914 <flatcc_json_printer_int64_enum_struct_field@@Base+0x180>
   3b8a0:	cmp	r6, #0
   3b8a4:	lsr	r5, r7, #31
   3b8a8:	sbcs	r0, r7, #0
   3b8ac:	bge	3b8c4 <flatcc_json_printer_int64_enum_struct_field@@Base+0x130>
   3b8b0:	rsbs	r6, r6, #0
   3b8b4:	mov	r0, #45	; 0x2d
   3b8b8:	rsc	r7, r7, #0
   3b8bc:	add	r2, r2, #1
   3b8c0:	strb	r0, [r1, r3]
   3b8c4:	mov	r0, r6
   3b8c8:	mov	r1, r7
   3b8cc:	bl	3395c <flatcc_json_parser_struct_as_root@@Base+0x540>
   3b8d0:	ldr	r3, [r4, #20]
   3b8d4:	add	r0, r5, r0
   3b8d8:	ldrd	r6, [sp, #8]
   3b8dc:	ldrd	r8, [sp, #16]
   3b8e0:	add	r3, r3, r0
   3b8e4:	ldr	sl, [sp, #24]
   3b8e8:	str	r3, [r4, #20]
   3b8ec:	ldrd	r4, [sp]
   3b8f0:	add	sp, sp, #28
   3b8f4:	pop	{pc}		; (ldr pc, [sp], #4)
   3b8f8:	mov	r2, r8
   3b8fc:	mov	r1, r9
   3b900:	bl	14524 <memcpy@plt>
   3b904:	ldr	r3, [r4, #20]
   3b908:	add	r8, r3, r8
   3b90c:	str	r8, [r4, #20]
   3b910:	b	3b844 <flatcc_json_printer_int64_enum_struct_field@@Base+0xb0>
   3b914:	mov	r2, r6
   3b918:	mov	r3, r7
   3b91c:	ldrd	r6, [sp, #8]
   3b920:	mov	r0, r4
   3b924:	mov	r1, r5
   3b928:	ldrd	r4, [sp]
   3b92c:	ldrd	r8, [sp, #16]
   3b930:	ldr	sl, [sp, #24]
   3b934:	ldr	lr, [sp, #28]
   3b938:	add	sp, sp, #32
   3b93c:	bx	r1
   3b940:	add	r1, r2, #1
   3b944:	mov	r3, #10
   3b948:	str	r1, [r4, #20]
   3b94c:	strb	r3, [r2]
   3b950:	ldrb	r3, [r4, #25]
   3b954:	ldr	r1, [r4, #16]
   3b958:	ldr	r2, [r4, #32]
   3b95c:	ldr	r0, [r4, #20]
   3b960:	mul	sl, r2, r3
   3b964:	add	r3, r0, sl
   3b968:	cmp	r1, r3
   3b96c:	bcs	3b984 <flatcc_json_printer_int64_enum_struct_field@@Base+0x1f0>
   3b970:	mov	r1, sl
   3b974:	mov	r0, r4
   3b978:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3b97c:	ldr	r2, [r4, #20]
   3b980:	b	3b804 <flatcc_json_printer_int64_enum_struct_field@@Base+0x70>
   3b984:	mov	r2, sl
   3b988:	mov	r1, #32
   3b98c:	bl	1459c <memset@plt>
   3b990:	ldr	r2, [r4, #20]
   3b994:	add	r2, r2, sl
   3b998:	str	r2, [r4, #20]
   3b99c:	b	3b804 <flatcc_json_printer_int64_enum_struct_field@@Base+0x70>

0003b9a0 <flatcc_json_printer_bool_enum_struct_field@@Base>:
   3b9a0:	cmp	r1, #0
   3b9a4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3b9a8:	mov	r4, r0
   3b9ac:	strd	r6, [sp, #8]
   3b9b0:	strd	r8, [sp, #16]
   3b9b4:	str	sl, [sp, #24]
   3b9b8:	str	lr, [sp, #28]
   3b9bc:	ldrb	r5, [r2, r3]
   3b9c0:	ldr	r2, [r0, #20]
   3b9c4:	ldr	r8, [sp, #32]
   3b9c8:	ldr	r7, [sp, #36]	; 0x24
   3b9cc:	ldr	r6, [sp, #40]	; 0x28
   3b9d0:	beq	3b9e8 <flatcc_json_printer_bool_enum_struct_field@@Base+0x48>
   3b9d4:	add	r1, r2, #1
   3b9d8:	mov	r3, #44	; 0x2c
   3b9dc:	str	r1, [r0, #20]
   3b9e0:	strb	r3, [r2]
   3b9e4:	ldr	r2, [r0, #20]
   3b9e8:	ldrb	r1, [r4, #25]
   3b9ec:	cmp	r1, #0
   3b9f0:	bne	3bb3c <flatcc_json_printer_bool_enum_struct_field@@Base+0x19c>
   3b9f4:	ldr	r3, [r4, #16]
   3b9f8:	cmp	r3, r2
   3b9fc:	bhi	3ba10 <flatcc_json_printer_bool_enum_struct_field@@Base+0x70>
   3ba00:	mov	r0, r4
   3ba04:	ldr	r3, [r4, #44]	; 0x2c
   3ba08:	blx	r3
   3ba0c:	ldr	r2, [r4, #20]
   3ba10:	mov	r3, #34	; 0x22
   3ba14:	strb	r3, [r2]
   3ba18:	ldrb	r3, [r4, #26]
   3ba1c:	ldr	r2, [r4, #16]
   3ba20:	ldr	r0, [r4, #20]
   3ba24:	cmp	r3, #0
   3ba28:	addeq	r0, r0, #1
   3ba2c:	add	r3, r0, r7
   3ba30:	cmp	r2, r3
   3ba34:	str	r0, [r4, #20]
   3ba38:	bhi	3bad4 <flatcc_json_printer_bool_enum_struct_field@@Base+0x134>
   3ba3c:	mov	r2, r7
   3ba40:	mov	r1, r8
   3ba44:	mov	r0, r4
   3ba48:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   3ba4c:	ldr	r2, [r4, #20]
   3ba50:	mov	r3, #34	; 0x22
   3ba54:	mov	ip, #58	; 0x3a
   3ba58:	mov	r0, #32
   3ba5c:	strb	r3, [r2]
   3ba60:	ldrb	r3, [r4, #26]
   3ba64:	ldr	r1, [r4, #20]
   3ba68:	clz	r3, r3
   3ba6c:	lsr	r3, r3, #5
   3ba70:	add	r2, r1, r3
   3ba74:	add	r2, r2, #1
   3ba78:	str	r2, [r4, #20]
   3ba7c:	strb	ip, [r1, r3]
   3ba80:	ldr	r3, [r4, #20]
   3ba84:	strb	r0, [r3]
   3ba88:	ldrb	r3, [r4, #25]
   3ba8c:	ldr	r0, [r4, #20]
   3ba90:	ldrb	r1, [r4, #27]
   3ba94:	adds	r3, r3, #0
   3ba98:	movne	r3, #1
   3ba9c:	add	r2, r0, r3
   3baa0:	cmp	r1, #0
   3baa4:	str	r2, [r4, #20]
   3baa8:	bne	3baf0 <flatcc_json_printer_bool_enum_struct_field@@Base+0x150>
   3baac:	mov	r1, r5
   3bab0:	mov	r0, r4
   3bab4:	ldrd	r4, [sp]
   3bab8:	mov	r3, r6
   3babc:	ldrd	r6, [sp, #8]
   3bac0:	ldrd	r8, [sp, #16]
   3bac4:	ldr	sl, [sp, #24]
   3bac8:	ldr	lr, [sp, #28]
   3bacc:	add	sp, sp, #32
   3bad0:	bx	r3
   3bad4:	mov	r2, r7
   3bad8:	mov	r1, r8
   3badc:	bl	14524 <memcpy@plt>
   3bae0:	ldr	r2, [r4, #20]
   3bae4:	add	r2, r2, r7
   3bae8:	str	r2, [r4, #20]
   3baec:	b	3ba50 <flatcc_json_printer_bool_enum_struct_field@@Base+0xb0>
   3baf0:	cmp	r5, #0
   3baf4:	bne	3bb9c <flatcc_json_printer_bool_enum_struct_field@@Base+0x1fc>
   3baf8:	movw	r1, #28992	; 0x7140
   3bafc:	movt	r1, #4
   3bb00:	add	ip, r1, #1776	; 0x6f0
   3bb04:	ldr	lr, [r1, #1776]	; 0x6f0
   3bb08:	mov	r1, #5
   3bb0c:	ldrh	ip, [ip, #4]
   3bb10:	str	lr, [r0, r3]
   3bb14:	strh	ip, [r2, #4]
   3bb18:	ldr	r3, [r4, #20]
   3bb1c:	ldrd	r6, [sp, #8]
   3bb20:	ldrd	r8, [sp, #16]
   3bb24:	add	r3, r3, r1
   3bb28:	ldr	sl, [sp, #24]
   3bb2c:	str	r3, [r4, #20]
   3bb30:	ldrd	r4, [sp]
   3bb34:	add	sp, sp, #28
   3bb38:	pop	{pc}		; (ldr pc, [sp], #4)
   3bb3c:	add	r1, r2, #1
   3bb40:	mov	r3, #10
   3bb44:	str	r1, [r4, #20]
   3bb48:	strb	r3, [r2]
   3bb4c:	ldrb	r3, [r4, #25]
   3bb50:	ldr	r1, [r4, #16]
   3bb54:	ldr	r2, [r4, #32]
   3bb58:	ldr	r0, [r4, #20]
   3bb5c:	mul	r9, r2, r3
   3bb60:	add	r3, r0, r9
   3bb64:	cmp	r1, r3
   3bb68:	bcs	3bb80 <flatcc_json_printer_bool_enum_struct_field@@Base+0x1e0>
   3bb6c:	mov	r1, r9
   3bb70:	mov	r0, r4
   3bb74:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3bb78:	ldr	r2, [r4, #20]
   3bb7c:	b	3ba10 <flatcc_json_printer_bool_enum_struct_field@@Base+0x70>
   3bb80:	mov	r2, r9
   3bb84:	mov	r1, #32
   3bb88:	bl	1459c <memset@plt>
   3bb8c:	ldr	r2, [r4, #20]
   3bb90:	add	r2, r2, r9
   3bb94:	str	r2, [r4, #20]
   3bb98:	b	3ba10 <flatcc_json_printer_bool_enum_struct_field@@Base+0x70>
   3bb9c:	ldr	ip, [pc, #28]	; 3bbc0 <flatcc_json_printer_bool_enum_struct_field@@Base+0x220>
   3bba0:	movw	r1, #28992	; 0x7140
   3bba4:	movt	r1, #4
   3bba8:	ldr	lr, [r1, #1768]	; 0x6e8
   3bbac:	mov	r1, #4
   3bbb0:	ldrb	ip, [ip, #4]
   3bbb4:	str	lr, [r0, r3]
   3bbb8:	strb	ip, [r2, #4]
   3bbbc:	b	3bb18 <flatcc_json_printer_bool_enum_struct_field@@Base+0x178>
   3bbc0:	andeq	r7, r4, r8, lsr #16

0003bbc4 <flatcc_json_printer_uint8_vector_field@@Base>:
   3bbc4:	ldr	ip, [r1, #8]
   3bbc8:	add	r2, r2, #2
   3bbcc:	lsl	r2, r2, #1
   3bbd0:	cmp	ip, r2
   3bbd4:	bxle	lr
   3bbd8:	ldr	ip, [r1, #4]
   3bbdc:	ldrh	r2, [ip, r2]
   3bbe0:	cmp	r2, #0
   3bbe4:	bxeq	lr
   3bbe8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3bbec:	ldr	ip, [r1]
   3bbf0:	strd	r6, [sp, #8]
   3bbf4:	strd	r8, [sp, #16]
   3bbf8:	str	sl, [sp, #24]
   3bbfc:	str	lr, [sp, #28]
   3bc00:	adds	r6, ip, r2
   3bc04:	beq	3be0c <flatcc_json_printer_uint8_vector_field@@Base+0x248>
   3bc08:	ldr	lr, [r1, #16]
   3bc0c:	add	r5, lr, #1
   3bc10:	cmp	lr, #0
   3bc14:	str	r5, [r1, #16]
   3bc18:	beq	3bc30 <flatcc_json_printer_uint8_vector_field@@Base+0x6c>
   3bc1c:	ldr	r1, [r0, #20]
   3bc20:	mov	lr, #44	; 0x2c
   3bc24:	add	r4, r1, #1
   3bc28:	str	r4, [r0, #20]
   3bc2c:	strb	lr, [r1]
   3bc30:	mov	r1, r3
   3bc34:	ldr	r3, [ip, r2]
   3bc38:	mov	r4, r0
   3bc3c:	ldr	r2, [sp, #32]
   3bc40:	add	r5, r6, r3
   3bc44:	ldr	r6, [r6, r3]
   3bc48:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   3bc4c:	ldr	r2, [r4, #20]
   3bc50:	mov	r1, #91	; 0x5b
   3bc54:	ldr	r3, [r4, #32]
   3bc58:	cmp	r6, #0
   3bc5c:	add	r0, r2, #1
   3bc60:	add	r3, r3, #1
   3bc64:	str	r0, [r4, #20]
   3bc68:	str	r3, [r4, #32]
   3bc6c:	strb	r1, [r2]
   3bc70:	beq	3bdec <flatcc_json_printer_uint8_vector_field@@Base+0x228>
   3bc74:	ldrb	r3, [r4, #25]
   3bc78:	ldr	r1, [r4, #20]
   3bc7c:	cmp	r3, #0
   3bc80:	bne	3be24 <flatcc_json_printer_uint8_vector_field@@Base+0x260>
   3bc84:	ldr	r2, [r4, #16]
   3bc88:	cmp	r2, r1
   3bc8c:	bhi	3bca4 <flatcc_json_printer_uint8_vector_field@@Base+0xe0>
   3bc90:	mov	r1, r3
   3bc94:	mov	r0, r4
   3bc98:	ldr	r3, [r4, #44]	; 0x2c
   3bc9c:	blx	r3
   3bca0:	ldr	r1, [r4, #20]
   3bca4:	add	r9, r5, #5
   3bca8:	ldrb	r0, [r5, #4]
   3bcac:	bl	3436c <flatcc_json_parser_struct_as_root@@Base+0xf50>
   3bcb0:	ldr	r3, [r4, #20]
   3bcb4:	cmp	r6, #1
   3bcb8:	add	r0, r3, r0
   3bcbc:	str	r0, [r4, #20]
   3bcc0:	beq	3bdf0 <flatcc_json_printer_uint8_vector_field@@Base+0x22c>
   3bcc4:	add	r6, r6, #4
   3bcc8:	movw	r7, #28992	; 0x7140
   3bccc:	movt	r7, #4
   3bcd0:	add	r5, r5, r6
   3bcd4:	movw	r8, #34079	; 0x851f
   3bcd8:	movt	r8, #20971	; 0x51eb
   3bcdc:	mov	r6, #44	; 0x2c
   3bce0:	b	3bd44 <flatcc_json_printer_uint8_vector_field@@Base+0x180>
   3bce4:	ldr	r3, [r4, #16]
   3bce8:	ldr	r2, [r4, #20]
   3bcec:	cmp	r2, r3
   3bcf0:	bcc	3bd04 <flatcc_json_printer_uint8_vector_field@@Base+0x140>
   3bcf4:	mov	r0, r4
   3bcf8:	ldr	r3, [r4, #44]	; 0x2c
   3bcfc:	blx	r3
   3bd00:	ldr	r2, [r4, #20]
   3bd04:	ldrb	r3, [r9]
   3bd08:	cmp	r3, #99	; 0x63
   3bd0c:	bhi	3bdac <flatcc_json_printer_uint8_vector_field@@Base+0x1e8>
   3bd10:	cmp	r3, #9
   3bd14:	bhi	3be44 <flatcc_json_printer_uint8_vector_field@@Base+0x280>
   3bd18:	add	r3, r3, #48	; 0x30
   3bd1c:	mov	r0, #0
   3bd20:	mov	r1, #1
   3bd24:	strb	r3, [r2]
   3bd28:	strb	r0, [r2, #1]
   3bd2c:	ldr	r0, [r4, #20]
   3bd30:	add	r9, r9, #1
   3bd34:	cmp	r5, r9
   3bd38:	add	r0, r0, r1
   3bd3c:	str	r0, [r4, #20]
   3bd40:	beq	3bdf0 <flatcc_json_printer_uint8_vector_field@@Base+0x22c>
   3bd44:	add	r3, r0, #1
   3bd48:	str	r3, [r4, #20]
   3bd4c:	strb	r6, [r0]
   3bd50:	ldrb	r1, [r4, #25]
   3bd54:	cmp	r1, #0
   3bd58:	beq	3bce4 <flatcc_json_printer_uint8_vector_field@@Base+0x120>
   3bd5c:	ldr	r3, [r4, #20]
   3bd60:	mov	r2, #10
   3bd64:	add	r1, r3, #1
   3bd68:	str	r1, [r4, #20]
   3bd6c:	strb	r2, [r3]
   3bd70:	ldrb	r3, [r4, #25]
   3bd74:	ldr	r1, [r4, #16]
   3bd78:	ldr	r2, [r4, #32]
   3bd7c:	ldr	r0, [r4, #20]
   3bd80:	mul	sl, r2, r3
   3bd84:	add	r3, r0, sl
   3bd88:	cmp	r1, r3
   3bd8c:	bcs	3be6c <flatcc_json_printer_uint8_vector_field@@Base+0x2a8>
   3bd90:	mov	r1, sl
   3bd94:	mov	r0, r4
   3bd98:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3bd9c:	ldrb	r3, [r9]
   3bda0:	ldr	r2, [r4, #20]
   3bda4:	cmp	r3, #99	; 0x63
   3bda8:	bls	3bd10 <flatcc_json_printer_uint8_vector_field@@Base+0x14c>
   3bdac:	umull	r1, ip, r8, r3
   3bdb0:	mov	r0, #100	; 0x64
   3bdb4:	mov	r1, #0
   3bdb8:	strb	r1, [r2, #3]
   3bdbc:	mov	r1, #3
   3bdc0:	lsr	ip, ip, #5
   3bdc4:	mls	r3, r0, ip, r3
   3bdc8:	add	ip, ip, #48	; 0x30
   3bdcc:	uxtb	r3, r3
   3bdd0:	ldrb	r0, [r7, r3, lsl #1]
   3bdd4:	add	r3, r7, r3, lsl #1
   3bdd8:	strb	r0, [r2, #1]
   3bddc:	ldrb	r3, [r3, #1]
   3bde0:	strb	ip, [r2]
   3bde4:	strb	r3, [r2, #2]
   3bde8:	b	3bd2c <flatcc_json_printer_uint8_vector_field@@Base+0x168>
   3bdec:	ldr	r0, [r4, #20]
   3bdf0:	add	r3, r0, #1
   3bdf4:	ldrb	r2, [r4, #25]
   3bdf8:	cmp	r2, #0
   3bdfc:	bne	3be88 <flatcc_json_printer_uint8_vector_field@@Base+0x2c4>
   3be00:	mov	r2, #93	; 0x5d
   3be04:	str	r3, [r4, #20]
   3be08:	strb	r2, [r0]
   3be0c:	ldrd	r4, [sp]
   3be10:	ldrd	r6, [sp, #8]
   3be14:	ldrd	r8, [sp, #16]
   3be18:	ldr	sl, [sp, #24]
   3be1c:	add	sp, sp, #28
   3be20:	pop	{pc}		; (ldr pc, [sp], #4)
   3be24:	add	r2, r1, #1
   3be28:	mov	r3, #10
   3be2c:	mov	r0, r4
   3be30:	str	r2, [r4, #20]
   3be34:	strb	r3, [r1]
   3be38:	bl	34188 <flatcc_json_parser_struct_as_root@@Base+0xd6c>
   3be3c:	ldr	r1, [r4, #20]
   3be40:	b	3bca4 <flatcc_json_printer_uint8_vector_field@@Base+0xe0>
   3be44:	mov	r1, #0
   3be48:	sxth	r3, r3
   3be4c:	add	r0, r7, r3, lsl #1
   3be50:	strb	r1, [r2, #2]
   3be54:	mov	r1, #2
   3be58:	ldrb	r3, [r7, r3, lsl #1]
   3be5c:	strb	r3, [r2]
   3be60:	ldrb	r3, [r0, #1]
   3be64:	strb	r3, [r2, #1]
   3be68:	b	3bd2c <flatcc_json_printer_uint8_vector_field@@Base+0x168>
   3be6c:	mov	r2, sl
   3be70:	mov	r1, #32
   3be74:	bl	1459c <memset@plt>
   3be78:	ldr	r2, [r4, #20]
   3be7c:	add	r2, r2, sl
   3be80:	str	r2, [r4, #20]
   3be84:	b	3bd04 <flatcc_json_printer_uint8_vector_field@@Base+0x140>
   3be88:	mov	r2, #10
   3be8c:	str	r3, [r4, #20]
   3be90:	strb	r2, [r0]
   3be94:	ldrb	r5, [r4, #25]
   3be98:	ldr	r3, [r4, #32]
   3be9c:	ldr	r2, [r4, #16]
   3bea0:	ldr	r0, [r4, #20]
   3bea4:	sub	r3, r3, #1
   3bea8:	mul	r5, r3, r5
   3beac:	str	r3, [r4, #32]
   3beb0:	add	r3, r0, r5
   3beb4:	cmp	r2, r3
   3beb8:	bcs	3bed4 <flatcc_json_printer_uint8_vector_field@@Base+0x310>
   3bebc:	mov	r0, r4
   3bec0:	mov	r1, r5
   3bec4:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3bec8:	ldr	r0, [r4, #20]
   3becc:	add	r3, r0, #1
   3bed0:	b	3be00 <flatcc_json_printer_uint8_vector_field@@Base+0x23c>
   3bed4:	mov	r2, r5
   3bed8:	mov	r1, #32
   3bedc:	bl	1459c <memset@plt>
   3bee0:	ldr	r0, [r4, #20]
   3bee4:	add	r0, r0, r5
   3bee8:	add	r3, r0, #1
   3beec:	b	3be00 <flatcc_json_printer_uint8_vector_field@@Base+0x23c>

0003bef0 <flatcc_json_printer_utype_vector_field@@Base>:
   3bef0:	b	3bbc4 <flatcc_json_printer_uint8_vector_field@@Base>

0003bef4 <flatcc_json_printer_uint16_vector_field@@Base>:
   3bef4:	ldr	ip, [r1, #8]
   3bef8:	add	r2, r2, #2
   3befc:	lsl	r2, r2, #1
   3bf00:	cmp	ip, r2
   3bf04:	bxle	lr
   3bf08:	ldr	ip, [r1, #4]
   3bf0c:	ldrh	r2, [ip, r2]
   3bf10:	cmp	r2, #0
   3bf14:	bxeq	lr
   3bf18:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3bf1c:	ldr	ip, [r1]
   3bf20:	strd	r6, [sp, #8]
   3bf24:	str	lr, [sp, #28]
   3bf28:	strd	r8, [sp, #16]
   3bf2c:	str	sl, [sp, #24]
   3bf30:	adds	lr, ip, r2
   3bf34:	beq	3c134 <flatcc_json_printer_uint16_vector_field@@Base+0x240>
   3bf38:	ldr	r4, [r1, #16]
   3bf3c:	add	r5, r4, #1
   3bf40:	cmp	r4, #0
   3bf44:	str	r5, [r1, #16]
   3bf48:	beq	3bf60 <flatcc_json_printer_uint16_vector_field@@Base+0x6c>
   3bf4c:	ldr	r1, [r0, #20]
   3bf50:	mov	r4, #44	; 0x2c
   3bf54:	add	r5, r1, #1
   3bf58:	str	r5, [r0, #20]
   3bf5c:	strb	r4, [r1]
   3bf60:	mov	r1, r3
   3bf64:	ldr	r3, [ip, r2]
   3bf68:	mov	r4, r0
   3bf6c:	ldr	r2, [sp, #32]
   3bf70:	add	r5, lr, r3
   3bf74:	ldr	r7, [lr, r3]
   3bf78:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   3bf7c:	ldr	r2, [r4, #20]
   3bf80:	mov	r1, #91	; 0x5b
   3bf84:	ldr	r3, [r4, #32]
   3bf88:	cmp	r7, #0
   3bf8c:	add	r0, r2, #1
   3bf90:	add	r3, r3, #1
   3bf94:	str	r0, [r4, #20]
   3bf98:	str	r3, [r4, #32]
   3bf9c:	strb	r1, [r2]
   3bfa0:	beq	3c114 <flatcc_json_printer_uint16_vector_field@@Base+0x220>
   3bfa4:	ldrb	r3, [r4, #25]
   3bfa8:	ldr	r1, [r4, #20]
   3bfac:	cmp	r3, #0
   3bfb0:	bne	3c14c <flatcc_json_printer_uint16_vector_field@@Base+0x258>
   3bfb4:	ldr	r2, [r4, #16]
   3bfb8:	cmp	r2, r1
   3bfbc:	bhi	3bfd4 <flatcc_json_printer_uint16_vector_field@@Base+0xe0>
   3bfc0:	mov	r1, r3
   3bfc4:	mov	r0, r4
   3bfc8:	ldr	r3, [r4, #44]	; 0x2c
   3bfcc:	blx	r3
   3bfd0:	ldr	r1, [r4, #20]
   3bfd4:	add	r6, r5, #6
   3bfd8:	ldrh	r0, [r5, #4]
   3bfdc:	sub	r5, r7, #2
   3bfe0:	bl	334f0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   3bfe4:	ldr	r3, [r4, #20]
   3bfe8:	cmp	r7, #1
   3bfec:	add	r0, r3, r0
   3bff0:	str	r0, [r4, #20]
   3bff4:	beq	3c118 <flatcc_json_printer_uint16_vector_field@@Base+0x224>
   3bff8:	movw	r9, #34079	; 0x851f
   3bffc:	movt	r9, #20971	; 0x51eb
   3c000:	movw	r7, #28992	; 0x7140
   3c004:	movt	r7, #4
   3c008:	mov	r8, #44	; 0x2c
   3c00c:	b	3c0ac <flatcc_json_printer_uint16_vector_field@@Base+0x1b8>
   3c010:	umull	r0, r1, r9, r3
   3c014:	mov	r0, #100	; 0x64
   3c018:	movw	ip, #9999	; 0x270f
   3c01c:	cmp	r3, ip
   3c020:	lsr	r1, r1, #5
   3c024:	uxth	ip, r1
   3c028:	mls	r3, r0, r1, r3
   3c02c:	mov	r1, #0
   3c030:	uxth	r3, r3
   3c034:	add	lr, r7, r3, lsl #1
   3c038:	bls	3c1d8 <flatcc_json_printer_uint16_vector_field@@Base+0x2e4>
   3c03c:	strb	r1, [r2, #5]
   3c040:	add	r0, r2, #3
   3c044:	mov	r1, #5
   3c048:	ldrb	r3, [r7, r3, lsl #1]
   3c04c:	strb	r3, [r2, #3]
   3c050:	ldrb	r3, [lr, #1]
   3c054:	strb	r3, [r2, #4]
   3c058:	umull	r2, r3, r9, ip
   3c05c:	mov	r2, #100	; 0x64
   3c060:	sub	lr, r0, #2
   3c064:	lsr	r3, r3, #5
   3c068:	mls	ip, r2, r3, ip
   3c06c:	uxth	r3, r3
   3c070:	uxth	ip, ip
   3c074:	ldrb	r2, [r7, ip, lsl #1]
   3c078:	add	ip, r7, ip, lsl #1
   3c07c:	strb	r2, [r0, #-2]
   3c080:	ldrb	r2, [ip, #1]
   3c084:	strb	r2, [r0, #-1]
   3c088:	add	r3, r3, #48	; 0x30
   3c08c:	strb	r3, [lr, #-1]
   3c090:	ldr	r0, [r4, #20]
   3c094:	sub	r5, r5, #1
   3c098:	add	r6, r6, #2
   3c09c:	cmn	r5, #1
   3c0a0:	add	r0, r0, r1
   3c0a4:	str	r0, [r4, #20]
   3c0a8:	beq	3c118 <flatcc_json_printer_uint16_vector_field@@Base+0x224>
   3c0ac:	add	r3, r0, #1
   3c0b0:	str	r3, [r4, #20]
   3c0b4:	strb	r8, [r0]
   3c0b8:	ldrb	r1, [r4, #25]
   3c0bc:	cmp	r1, #0
   3c0c0:	bne	3c190 <flatcc_json_printer_uint16_vector_field@@Base+0x29c>
   3c0c4:	ldr	r3, [r4, #16]
   3c0c8:	ldr	r2, [r4, #20]
   3c0cc:	cmp	r2, r3
   3c0d0:	bcc	3c0e4 <flatcc_json_printer_uint16_vector_field@@Base+0x1f0>
   3c0d4:	mov	r0, r4
   3c0d8:	ldr	r3, [r4, #44]	; 0x2c
   3c0dc:	blx	r3
   3c0e0:	ldr	r2, [r4, #20]
   3c0e4:	ldrh	r3, [r6]
   3c0e8:	cmp	r3, #1000	; 0x3e8
   3c0ec:	bcs	3c010 <flatcc_json_printer_uint16_vector_field@@Base+0x11c>
   3c0f0:	cmp	r3, #99	; 0x63
   3c0f4:	mov	r1, #0
   3c0f8:	bhi	3c220 <flatcc_json_printer_uint16_vector_field@@Base+0x32c>
   3c0fc:	cmp	r3, #9
   3c100:	bhi	3c250 <flatcc_json_printer_uint16_vector_field@@Base+0x35c>
   3c104:	add	lr, r2, #1
   3c108:	strb	r1, [r2, #1]
   3c10c:	mov	r1, #1
   3c110:	b	3c088 <flatcc_json_printer_uint16_vector_field@@Base+0x194>
   3c114:	ldr	r0, [r4, #20]
   3c118:	add	r3, r0, #1
   3c11c:	ldrb	r2, [r4, #25]
   3c120:	cmp	r2, #0
   3c124:	bne	3c264 <flatcc_json_printer_uint16_vector_field@@Base+0x370>
   3c128:	mov	r2, #93	; 0x5d
   3c12c:	str	r3, [r4, #20]
   3c130:	strb	r2, [r0]
   3c134:	ldrd	r4, [sp]
   3c138:	ldrd	r6, [sp, #8]
   3c13c:	ldrd	r8, [sp, #16]
   3c140:	ldr	sl, [sp, #24]
   3c144:	add	sp, sp, #28
   3c148:	pop	{pc}		; (ldr pc, [sp], #4)
   3c14c:	add	r2, r1, #1
   3c150:	mov	r3, #10
   3c154:	str	r2, [r4, #20]
   3c158:	strb	r3, [r1]
   3c15c:	ldrb	r6, [r4, #25]
   3c160:	ldr	r2, [r4, #16]
   3c164:	ldr	r1, [r4, #32]
   3c168:	ldr	r0, [r4, #20]
   3c16c:	mul	r6, r1, r6
   3c170:	add	r3, r0, r6
   3c174:	cmp	r2, r3
   3c178:	bcs	3c2cc <flatcc_json_printer_uint16_vector_field@@Base+0x3d8>
   3c17c:	mov	r1, r6
   3c180:	mov	r0, r4
   3c184:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3c188:	ldr	r1, [r4, #20]
   3c18c:	b	3bfd4 <flatcc_json_printer_uint16_vector_field@@Base+0xe0>
   3c190:	ldr	r3, [r4, #20]
   3c194:	mov	r2, #10
   3c198:	add	r1, r3, #1
   3c19c:	str	r1, [r4, #20]
   3c1a0:	strb	r2, [r3]
   3c1a4:	ldrb	r3, [r4, #25]
   3c1a8:	ldr	r1, [r4, #16]
   3c1ac:	ldr	r2, [r4, #32]
   3c1b0:	ldr	r0, [r4, #20]
   3c1b4:	mul	sl, r2, r3
   3c1b8:	add	r3, r0, sl
   3c1bc:	cmp	r1, r3
   3c1c0:	bcs	3c234 <flatcc_json_printer_uint16_vector_field@@Base+0x340>
   3c1c4:	mov	r1, sl
   3c1c8:	mov	r0, r4
   3c1cc:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3c1d0:	ldr	r2, [r4, #20]
   3c1d4:	b	3c0e4 <flatcc_json_printer_uint16_vector_field@@Base+0x1f0>
   3c1d8:	strb	r1, [r2, #4]
   3c1dc:	add	r0, r2, #2
   3c1e0:	mov	r1, #4
   3c1e4:	ldrb	r3, [r7, r3, lsl #1]
   3c1e8:	strb	r3, [r2, #2]
   3c1ec:	ldrb	r3, [lr, #1]
   3c1f0:	strb	r3, [r2, #3]
   3c1f4:	umull	r2, r3, r9, ip
   3c1f8:	mov	r2, #100	; 0x64
   3c1fc:	lsr	r3, r3, #5
   3c200:	mls	r3, r2, r3, ip
   3c204:	uxth	r3, r3
   3c208:	ldrb	r2, [r7, r3, lsl #1]
   3c20c:	add	r3, r7, r3, lsl #1
   3c210:	strb	r2, [r0, #-2]
   3c214:	ldrb	r3, [r3, #1]
   3c218:	strb	r3, [r0, #-1]
   3c21c:	b	3c090 <flatcc_json_printer_uint16_vector_field@@Base+0x19c>
   3c220:	mov	ip, r3
   3c224:	add	r0, r2, #3
   3c228:	strb	r1, [r2, #3]
   3c22c:	mov	r1, #3
   3c230:	b	3c058 <flatcc_json_printer_uint16_vector_field@@Base+0x164>
   3c234:	mov	r2, sl
   3c238:	mov	r1, #32
   3c23c:	bl	1459c <memset@plt>
   3c240:	ldr	r2, [r4, #20]
   3c244:	add	r2, r2, sl
   3c248:	str	r2, [r4, #20]
   3c24c:	b	3c0e4 <flatcc_json_printer_uint16_vector_field@@Base+0x1f0>
   3c250:	mov	ip, r3
   3c254:	add	r0, r2, #2
   3c258:	strb	r1, [r2, #2]
   3c25c:	mov	r1, #2
   3c260:	b	3c1f4 <flatcc_json_printer_uint16_vector_field@@Base+0x300>
   3c264:	mov	r2, #10
   3c268:	str	r3, [r4, #20]
   3c26c:	strb	r2, [r0]
   3c270:	ldrb	r5, [r4, #25]
   3c274:	ldr	r3, [r4, #32]
   3c278:	ldr	r2, [r4, #16]
   3c27c:	ldr	r0, [r4, #20]
   3c280:	sub	r3, r3, #1
   3c284:	mul	r5, r3, r5
   3c288:	str	r3, [r4, #32]
   3c28c:	add	r3, r0, r5
   3c290:	cmp	r2, r3
   3c294:	bcs	3c2b0 <flatcc_json_printer_uint16_vector_field@@Base+0x3bc>
   3c298:	mov	r0, r4
   3c29c:	mov	r1, r5
   3c2a0:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3c2a4:	ldr	r0, [r4, #20]
   3c2a8:	add	r3, r0, #1
   3c2ac:	b	3c128 <flatcc_json_printer_uint16_vector_field@@Base+0x234>
   3c2b0:	mov	r2, r5
   3c2b4:	mov	r1, #32
   3c2b8:	bl	1459c <memset@plt>
   3c2bc:	ldr	r0, [r4, #20]
   3c2c0:	add	r0, r0, r5
   3c2c4:	add	r3, r0, #1
   3c2c8:	b	3c128 <flatcc_json_printer_uint16_vector_field@@Base+0x234>
   3c2cc:	mov	r1, #32
   3c2d0:	mov	r2, r6
   3c2d4:	bl	1459c <memset@plt>
   3c2d8:	ldr	r1, [r4, #20]
   3c2dc:	add	r1, r1, r6
   3c2e0:	str	r1, [r4, #20]
   3c2e4:	b	3bfd4 <flatcc_json_printer_uint16_vector_field@@Base+0xe0>

0003c2e8 <flatcc_json_printer_uint32_vector_field@@Base>:
   3c2e8:	ldr	ip, [r1, #8]
   3c2ec:	add	r2, r2, #2
   3c2f0:	lsl	r2, r2, #1
   3c2f4:	cmp	ip, r2
   3c2f8:	bxle	lr
   3c2fc:	ldr	ip, [r1, #4]
   3c300:	ldrh	r2, [ip, r2]
   3c304:	cmp	r2, #0
   3c308:	bxeq	lr
   3c30c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3c310:	ldr	ip, [r1]
   3c314:	strd	r6, [sp, #8]
   3c318:	str	lr, [sp, #28]
   3c31c:	strd	r8, [sp, #16]
   3c320:	str	sl, [sp, #24]
   3c324:	adds	lr, ip, r2
   3c328:	beq	3c4c0 <flatcc_json_printer_uint32_vector_field@@Base+0x1d8>
   3c32c:	ldr	r4, [r1, #16]
   3c330:	add	r5, r4, #1
   3c334:	cmp	r4, #0
   3c338:	str	r5, [r1, #16]
   3c33c:	beq	3c354 <flatcc_json_printer_uint32_vector_field@@Base+0x6c>
   3c340:	ldr	r1, [r0, #20]
   3c344:	mov	r4, #44	; 0x2c
   3c348:	add	r5, r1, #1
   3c34c:	str	r5, [r0, #20]
   3c350:	strb	r4, [r1]
   3c354:	mov	r1, r3
   3c358:	ldr	r3, [ip, r2]
   3c35c:	mov	r4, r0
   3c360:	ldr	r2, [sp, #32]
   3c364:	add	r5, lr, r3
   3c368:	ldr	r7, [lr, r3]
   3c36c:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   3c370:	ldr	r2, [r4, #20]
   3c374:	mov	r1, #91	; 0x5b
   3c378:	ldr	r3, [r4, #32]
   3c37c:	cmp	r7, #0
   3c380:	add	r0, r2, #1
   3c384:	add	r3, r3, #1
   3c388:	str	r0, [r4, #20]
   3c38c:	str	r3, [r4, #32]
   3c390:	strb	r1, [r2]
   3c394:	beq	3c4a0 <flatcc_json_printer_uint32_vector_field@@Base+0x1b8>
   3c398:	ldrb	r3, [r4, #25]
   3c39c:	ldr	r1, [r4, #20]
   3c3a0:	cmp	r3, #0
   3c3a4:	bne	3c4d8 <flatcc_json_printer_uint32_vector_field@@Base+0x1f0>
   3c3a8:	ldr	r2, [r4, #16]
   3c3ac:	cmp	r2, r1
   3c3b0:	bhi	3c3c8 <flatcc_json_printer_uint32_vector_field@@Base+0xe0>
   3c3b4:	mov	r1, r3
   3c3b8:	mov	r0, r4
   3c3bc:	ldr	r3, [r4, #44]	; 0x2c
   3c3c0:	blx	r3
   3c3c4:	ldr	r1, [r4, #20]
   3c3c8:	add	r6, r5, #8
   3c3cc:	ldr	r0, [r5, #4]
   3c3d0:	sub	r5, r7, #2
   3c3d4:	bl	33648 <flatcc_json_parser_struct_as_root@@Base+0x22c>
   3c3d8:	ldr	r3, [r4, #20]
   3c3dc:	cmp	r7, #1
   3c3e0:	add	r0, r3, r0
   3c3e4:	str	r0, [r4, #20]
   3c3e8:	beq	3c4a4 <flatcc_json_printer_uint32_vector_field@@Base+0x1bc>
   3c3ec:	mov	r7, #44	; 0x2c
   3c3f0:	mov	r8, #10
   3c3f4:	b	3c43c <flatcc_json_printer_uint32_vector_field@@Base+0x154>
   3c3f8:	ldr	r3, [r4, #16]
   3c3fc:	mov	r0, r4
   3c400:	ldr	r2, [r4, #20]
   3c404:	cmp	r2, r3
   3c408:	bcc	3c418 <flatcc_json_printer_uint32_vector_field@@Base+0x130>
   3c40c:	ldr	r3, [r4, #44]	; 0x2c
   3c410:	blx	r3
   3c414:	ldr	r2, [r4, #20]
   3c418:	mov	r1, r2
   3c41c:	sub	r5, r5, #1
   3c420:	ldr	r0, [r6], #4
   3c424:	bl	33648 <flatcc_json_parser_struct_as_root@@Base+0x22c>
   3c428:	ldr	r3, [r4, #20]
   3c42c:	cmn	r5, #1
   3c430:	add	r0, r3, r0
   3c434:	str	r0, [r4, #20]
   3c438:	beq	3c4a4 <flatcc_json_printer_uint32_vector_field@@Base+0x1bc>
   3c43c:	add	r3, r0, #1
   3c440:	str	r3, [r4, #20]
   3c444:	strb	r7, [r0]
   3c448:	ldrb	r1, [r4, #25]
   3c44c:	cmp	r1, #0
   3c450:	beq	3c3f8 <flatcc_json_printer_uint32_vector_field@@Base+0x110>
   3c454:	ldr	r3, [r4, #20]
   3c458:	mov	r1, #32
   3c45c:	mov	r0, r4
   3c460:	add	r2, r3, #1
   3c464:	str	r2, [r4, #20]
   3c468:	strb	r8, [r3]
   3c46c:	ldrb	r2, [r4, #25]
   3c470:	ldr	lr, [r4, #16]
   3c474:	ldr	r9, [r4, #32]
   3c478:	ldr	r3, [r4, #20]
   3c47c:	mul	r9, r9, r2
   3c480:	add	ip, r3, r9
   3c484:	mov	r2, r9
   3c488:	cmp	lr, ip
   3c48c:	bcs	3c4f8 <flatcc_json_printer_uint32_vector_field@@Base+0x210>
   3c490:	mov	r1, r9
   3c494:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3c498:	ldr	r2, [r4, #20]
   3c49c:	b	3c418 <flatcc_json_printer_uint32_vector_field@@Base+0x130>
   3c4a0:	ldr	r0, [r4, #20]
   3c4a4:	add	r3, r0, #1
   3c4a8:	ldrb	r2, [r4, #25]
   3c4ac:	cmp	r2, #0
   3c4b0:	bne	3c510 <flatcc_json_printer_uint32_vector_field@@Base+0x228>
   3c4b4:	mov	r2, #93	; 0x5d
   3c4b8:	str	r3, [r4, #20]
   3c4bc:	strb	r2, [r0]
   3c4c0:	ldrd	r4, [sp]
   3c4c4:	ldrd	r6, [sp, #8]
   3c4c8:	ldrd	r8, [sp, #16]
   3c4cc:	ldr	sl, [sp, #24]
   3c4d0:	add	sp, sp, #28
   3c4d4:	pop	{pc}		; (ldr pc, [sp], #4)
   3c4d8:	add	r2, r1, #1
   3c4dc:	mov	r3, #10
   3c4e0:	mov	r0, r4
   3c4e4:	str	r2, [r4, #20]
   3c4e8:	strb	r3, [r1]
   3c4ec:	bl	34188 <flatcc_json_parser_struct_as_root@@Base+0xd6c>
   3c4f0:	ldr	r1, [r4, #20]
   3c4f4:	b	3c3c8 <flatcc_json_printer_uint32_vector_field@@Base+0xe0>
   3c4f8:	mov	r0, r3
   3c4fc:	bl	1459c <memset@plt>
   3c500:	ldr	r2, [r4, #20]
   3c504:	add	r2, r2, r9
   3c508:	str	r2, [r4, #20]
   3c50c:	b	3c418 <flatcc_json_printer_uint32_vector_field@@Base+0x130>
   3c510:	mov	r2, #10
   3c514:	str	r3, [r4, #20]
   3c518:	strb	r2, [r0]
   3c51c:	ldrb	r5, [r4, #25]
   3c520:	ldr	r3, [r4, #32]
   3c524:	ldr	r2, [r4, #16]
   3c528:	ldr	r0, [r4, #20]
   3c52c:	sub	r3, r3, #1
   3c530:	mul	r5, r3, r5
   3c534:	str	r3, [r4, #32]
   3c538:	add	r3, r0, r5
   3c53c:	cmp	r2, r3
   3c540:	bcs	3c55c <flatcc_json_printer_uint32_vector_field@@Base+0x274>
   3c544:	mov	r0, r4
   3c548:	mov	r1, r5
   3c54c:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3c550:	ldr	r0, [r4, #20]
   3c554:	add	r3, r0, #1
   3c558:	b	3c4b4 <flatcc_json_printer_uint32_vector_field@@Base+0x1cc>
   3c55c:	mov	r2, r5
   3c560:	mov	r1, #32
   3c564:	bl	1459c <memset@plt>
   3c568:	ldr	r0, [r4, #20]
   3c56c:	add	r0, r0, r5
   3c570:	add	r3, r0, #1
   3c574:	b	3c4b4 <flatcc_json_printer_uint32_vector_field@@Base+0x1cc>

0003c578 <flatcc_json_printer_uint64_vector_field@@Base>:
   3c578:	ldr	ip, [r1, #8]
   3c57c:	add	r2, r2, #2
   3c580:	lsl	r2, r2, #1
   3c584:	cmp	ip, r2
   3c588:	bxle	lr
   3c58c:	ldr	ip, [r1, #4]
   3c590:	ldrh	r2, [ip, r2]
   3c594:	cmp	r2, #0
   3c598:	bxeq	lr
   3c59c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3c5a0:	ldr	ip, [r1]
   3c5a4:	strd	r6, [sp, #8]
   3c5a8:	str	lr, [sp, #28]
   3c5ac:	strd	r8, [sp, #16]
   3c5b0:	str	sl, [sp, #24]
   3c5b4:	adds	lr, ip, r2
   3c5b8:	beq	3c748 <flatcc_json_printer_uint64_vector_field@@Base+0x1d0>
   3c5bc:	ldr	r4, [r1, #16]
   3c5c0:	add	r5, r4, #1
   3c5c4:	cmp	r4, #0
   3c5c8:	str	r5, [r1, #16]
   3c5cc:	beq	3c5e4 <flatcc_json_printer_uint64_vector_field@@Base+0x6c>
   3c5d0:	ldr	r1, [r0, #20]
   3c5d4:	mov	r4, #44	; 0x2c
   3c5d8:	add	r5, r1, #1
   3c5dc:	str	r5, [r0, #20]
   3c5e0:	strb	r4, [r1]
   3c5e4:	mov	r1, r3
   3c5e8:	ldr	r3, [ip, r2]
   3c5ec:	mov	r4, r0
   3c5f0:	ldr	r2, [sp, #32]
   3c5f4:	add	r5, lr, r3
   3c5f8:	ldr	r7, [lr, r3]
   3c5fc:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   3c600:	ldr	r2, [r4, #20]
   3c604:	mov	r1, #91	; 0x5b
   3c608:	ldr	r3, [r4, #32]
   3c60c:	cmp	r7, #0
   3c610:	add	r0, r2, #1
   3c614:	add	r3, r3, #1
   3c618:	str	r0, [r4, #20]
   3c61c:	str	r3, [r4, #32]
   3c620:	strb	r1, [r2]
   3c624:	beq	3c728 <flatcc_json_printer_uint64_vector_field@@Base+0x1b0>
   3c628:	ldrb	r1, [r4, #25]
   3c62c:	ldr	r2, [r4, #20]
   3c630:	cmp	r1, #0
   3c634:	bne	3c760 <flatcc_json_printer_uint64_vector_field@@Base+0x1e8>
   3c638:	ldr	r3, [r4, #16]
   3c63c:	cmp	r3, r2
   3c640:	bhi	3c654 <flatcc_json_printer_uint64_vector_field@@Base+0xdc>
   3c644:	mov	r0, r4
   3c648:	ldr	r3, [r4, #44]	; 0x2c
   3c64c:	blx	r3
   3c650:	ldr	r2, [r4, #20]
   3c654:	add	r6, r5, #12
   3c658:	ldrd	r0, [r5, #4]
   3c65c:	sub	r5, r7, #2
   3c660:	bl	3395c <flatcc_json_parser_struct_as_root@@Base+0x540>
   3c664:	ldr	r3, [r4, #20]
   3c668:	cmp	r7, #1
   3c66c:	add	r0, r3, r0
   3c670:	str	r0, [r4, #20]
   3c674:	beq	3c72c <flatcc_json_printer_uint64_vector_field@@Base+0x1b4>
   3c678:	mov	r7, #44	; 0x2c
   3c67c:	mov	r8, #10
   3c680:	b	3c6c4 <flatcc_json_printer_uint64_vector_field@@Base+0x14c>
   3c684:	ldr	r3, [r4, #16]
   3c688:	mov	r0, r4
   3c68c:	ldr	r2, [r4, #20]
   3c690:	cmp	r2, r3
   3c694:	bcc	3c6a4 <flatcc_json_printer_uint64_vector_field@@Base+0x12c>
   3c698:	ldr	r3, [r4, #44]	; 0x2c
   3c69c:	blx	r3
   3c6a0:	ldr	r2, [r4, #20]
   3c6a4:	sub	r5, r5, #1
   3c6a8:	ldrd	r0, [r6], #8
   3c6ac:	bl	3395c <flatcc_json_parser_struct_as_root@@Base+0x540>
   3c6b0:	ldr	r3, [r4, #20]
   3c6b4:	cmn	r5, #1
   3c6b8:	add	r0, r3, r0
   3c6bc:	str	r0, [r4, #20]
   3c6c0:	beq	3c72c <flatcc_json_printer_uint64_vector_field@@Base+0x1b4>
   3c6c4:	add	r3, r0, #1
   3c6c8:	str	r3, [r4, #20]
   3c6cc:	strb	r7, [r0]
   3c6d0:	ldrb	r1, [r4, #25]
   3c6d4:	cmp	r1, #0
   3c6d8:	beq	3c684 <flatcc_json_printer_uint64_vector_field@@Base+0x10c>
   3c6dc:	ldr	r3, [r4, #20]
   3c6e0:	mov	r1, #32
   3c6e4:	mov	r0, r4
   3c6e8:	add	r2, r3, #1
   3c6ec:	str	r2, [r4, #20]
   3c6f0:	strb	r8, [r3]
   3c6f4:	ldrb	r2, [r4, #25]
   3c6f8:	ldr	lr, [r4, #16]
   3c6fc:	ldr	r9, [r4, #32]
   3c700:	ldr	r3, [r4, #20]
   3c704:	mul	r9, r9, r2
   3c708:	add	ip, r3, r9
   3c70c:	mov	r2, r9
   3c710:	cmp	lr, ip
   3c714:	bcs	3c780 <flatcc_json_printer_uint64_vector_field@@Base+0x208>
   3c718:	mov	r1, r9
   3c71c:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3c720:	ldr	r2, [r4, #20]
   3c724:	b	3c6a4 <flatcc_json_printer_uint64_vector_field@@Base+0x12c>
   3c728:	ldr	r0, [r4, #20]
   3c72c:	add	r3, r0, #1
   3c730:	ldrb	r2, [r4, #25]
   3c734:	cmp	r2, #0
   3c738:	bne	3c798 <flatcc_json_printer_uint64_vector_field@@Base+0x220>
   3c73c:	mov	r2, #93	; 0x5d
   3c740:	str	r3, [r4, #20]
   3c744:	strb	r2, [r0]
   3c748:	ldrd	r4, [sp]
   3c74c:	ldrd	r6, [sp, #8]
   3c750:	ldrd	r8, [sp, #16]
   3c754:	ldr	sl, [sp, #24]
   3c758:	add	sp, sp, #28
   3c75c:	pop	{pc}		; (ldr pc, [sp], #4)
   3c760:	add	r1, r2, #1
   3c764:	mov	r3, #10
   3c768:	mov	r0, r4
   3c76c:	str	r1, [r4, #20]
   3c770:	strb	r3, [r2]
   3c774:	bl	34188 <flatcc_json_parser_struct_as_root@@Base+0xd6c>
   3c778:	ldr	r2, [r4, #20]
   3c77c:	b	3c654 <flatcc_json_printer_uint64_vector_field@@Base+0xdc>
   3c780:	mov	r0, r3
   3c784:	bl	1459c <memset@plt>
   3c788:	ldr	r2, [r4, #20]
   3c78c:	add	r2, r2, r9
   3c790:	str	r2, [r4, #20]
   3c794:	b	3c6a4 <flatcc_json_printer_uint64_vector_field@@Base+0x12c>
   3c798:	mov	r2, #10
   3c79c:	str	r3, [r4, #20]
   3c7a0:	strb	r2, [r0]
   3c7a4:	ldrb	r5, [r4, #25]
   3c7a8:	ldr	r3, [r4, #32]
   3c7ac:	ldr	r2, [r4, #16]
   3c7b0:	ldr	r0, [r4, #20]
   3c7b4:	sub	r3, r3, #1
   3c7b8:	mul	r5, r3, r5
   3c7bc:	str	r3, [r4, #32]
   3c7c0:	add	r3, r0, r5
   3c7c4:	cmp	r2, r3
   3c7c8:	bcs	3c7e4 <flatcc_json_printer_uint64_vector_field@@Base+0x26c>
   3c7cc:	mov	r0, r4
   3c7d0:	mov	r1, r5
   3c7d4:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3c7d8:	ldr	r0, [r4, #20]
   3c7dc:	add	r3, r0, #1
   3c7e0:	b	3c73c <flatcc_json_printer_uint64_vector_field@@Base+0x1c4>
   3c7e4:	mov	r2, r5
   3c7e8:	mov	r1, #32
   3c7ec:	bl	1459c <memset@plt>
   3c7f0:	ldr	r0, [r4, #20]
   3c7f4:	add	r0, r0, r5
   3c7f8:	add	r3, r0, #1
   3c7fc:	b	3c73c <flatcc_json_printer_uint64_vector_field@@Base+0x1c4>

0003c800 <flatcc_json_printer_int8_vector_field@@Base>:
   3c800:	ldr	ip, [r1, #8]
   3c804:	add	r2, r2, #2
   3c808:	lsl	r2, r2, #1
   3c80c:	cmp	ip, r2
   3c810:	bxle	lr
   3c814:	ldr	ip, [r1, #4]
   3c818:	ldrh	r2, [ip, r2]
   3c81c:	cmp	r2, #0
   3c820:	bxeq	lr
   3c824:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3c828:	ldr	ip, [r1]
   3c82c:	strd	r6, [sp, #8]
   3c830:	strd	r8, [sp, #16]
   3c834:	str	sl, [sp, #24]
   3c838:	str	lr, [sp, #28]
   3c83c:	adds	r6, ip, r2
   3c840:	beq	3ca48 <flatcc_json_printer_int8_vector_field@@Base+0x248>
   3c844:	ldr	lr, [r1, #16]
   3c848:	add	r5, lr, #1
   3c84c:	cmp	lr, #0
   3c850:	str	r5, [r1, #16]
   3c854:	beq	3c86c <flatcc_json_printer_int8_vector_field@@Base+0x6c>
   3c858:	ldr	r1, [r0, #20]
   3c85c:	mov	lr, #44	; 0x2c
   3c860:	add	r4, r1, #1
   3c864:	str	r4, [r0, #20]
   3c868:	strb	lr, [r1]
   3c86c:	mov	r1, r3
   3c870:	ldr	r3, [ip, r2]
   3c874:	mov	r4, r0
   3c878:	ldr	r2, [sp, #32]
   3c87c:	add	r5, r6, r3
   3c880:	ldr	r6, [r6, r3]
   3c884:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   3c888:	ldr	r2, [r4, #20]
   3c88c:	mov	r1, #91	; 0x5b
   3c890:	ldr	r3, [r4, #32]
   3c894:	cmp	r6, #0
   3c898:	add	r0, r2, #1
   3c89c:	add	r3, r3, #1
   3c8a0:	str	r0, [r4, #20]
   3c8a4:	str	r3, [r4, #32]
   3c8a8:	strb	r1, [r2]
   3c8ac:	beq	3ca28 <flatcc_json_printer_int8_vector_field@@Base+0x228>
   3c8b0:	ldrb	r3, [r4, #25]
   3c8b4:	ldr	r1, [r4, #20]
   3c8b8:	cmp	r3, #0
   3c8bc:	bne	3ca60 <flatcc_json_printer_int8_vector_field@@Base+0x260>
   3c8c0:	ldr	r2, [r4, #16]
   3c8c4:	cmp	r2, r1
   3c8c8:	bhi	3c8e0 <flatcc_json_printer_int8_vector_field@@Base+0xe0>
   3c8cc:	mov	r1, r3
   3c8d0:	mov	r0, r4
   3c8d4:	ldr	r3, [r4, #44]	; 0x2c
   3c8d8:	blx	r3
   3c8dc:	ldr	r1, [r4, #20]
   3c8e0:	ldrsb	r0, [r5, #4]
   3c8e4:	cmp	r0, #0
   3c8e8:	lsr	r7, r0, #31
   3c8ec:	uxtb	r0, r0
   3c8f0:	bge	3c904 <flatcc_json_printer_int8_vector_field@@Base+0x104>
   3c8f4:	rsb	r0, r0, #0
   3c8f8:	mov	r3, #45	; 0x2d
   3c8fc:	uxtb	r0, r0
   3c900:	strb	r3, [r1], #1
   3c904:	bl	3436c <flatcc_json_parser_struct_as_root@@Base+0xf50>
   3c908:	ldr	r3, [r4, #20]
   3c90c:	add	r0, r7, r0
   3c910:	cmp	r6, #1
   3c914:	add	r9, r5, #5
   3c918:	add	r3, r3, r0
   3c91c:	str	r3, [r4, #20]
   3c920:	beq	3ca2c <flatcc_json_printer_int8_vector_field@@Base+0x22c>
   3c924:	add	r6, r6, #4
   3c928:	movw	r7, #28992	; 0x7140
   3c92c:	movt	r7, #4
   3c930:	add	r5, r5, r6
   3c934:	movw	r8, #34079	; 0x851f
   3c938:	movt	r8, #20971	; 0x51eb
   3c93c:	mov	r6, #44	; 0x2c
   3c940:	b	3c9c8 <flatcc_json_printer_int8_vector_field@@Base+0x1c8>
   3c944:	ldr	r3, [r4, #16]
   3c948:	ldr	r2, [r4, #20]
   3c94c:	cmp	r2, r3
   3c950:	bcc	3c964 <flatcc_json_printer_int8_vector_field@@Base+0x164>
   3c954:	mov	r0, r4
   3c958:	ldr	r3, [r4, #44]	; 0x2c
   3c95c:	blx	r3
   3c960:	ldr	r2, [r4, #20]
   3c964:	ldrsb	ip, [r9]
   3c968:	cmp	ip, #0
   3c96c:	lsr	r0, ip, #31
   3c970:	uxtb	r3, ip
   3c974:	bge	3c988 <flatcc_json_printer_int8_vector_field@@Base+0x188>
   3c978:	rsb	r3, r3, #0
   3c97c:	mov	r1, #45	; 0x2d
   3c980:	uxtb	r3, r3
   3c984:	strb	r1, [r2], #1
   3c988:	cmp	r3, #99	; 0x63
   3c98c:	bhi	3ca80 <flatcc_json_printer_int8_vector_field@@Base+0x280>
   3c990:	cmp	r3, #9
   3c994:	bhi	3cac0 <flatcc_json_printer_int8_vector_field@@Base+0x2c0>
   3c998:	add	r3, r3, #48	; 0x30
   3c99c:	mov	r1, #0
   3c9a0:	mov	ip, #1
   3c9a4:	strb	r3, [r2]
   3c9a8:	strb	r1, [r2, #1]
   3c9ac:	ldr	r3, [r4, #20]
   3c9b0:	add	r0, r0, ip
   3c9b4:	add	r9, r9, #1
   3c9b8:	cmp	r5, r9
   3c9bc:	add	r3, r3, r0
   3c9c0:	str	r3, [r4, #20]
   3c9c4:	beq	3ca2c <flatcc_json_printer_int8_vector_field@@Base+0x22c>
   3c9c8:	add	r2, r3, #1
   3c9cc:	str	r2, [r4, #20]
   3c9d0:	strb	r6, [r3]
   3c9d4:	ldrb	r1, [r4, #25]
   3c9d8:	cmp	r1, #0
   3c9dc:	beq	3c944 <flatcc_json_printer_int8_vector_field@@Base+0x144>
   3c9e0:	ldr	r3, [r4, #20]
   3c9e4:	mov	r2, #10
   3c9e8:	add	r1, r3, #1
   3c9ec:	str	r1, [r4, #20]
   3c9f0:	strb	r2, [r3]
   3c9f4:	ldrb	r3, [r4, #25]
   3c9f8:	ldr	r1, [r4, #16]
   3c9fc:	ldr	r2, [r4, #32]
   3ca00:	ldr	r0, [r4, #20]
   3ca04:	mul	sl, r2, r3
   3ca08:	add	r3, r0, sl
   3ca0c:	cmp	r1, r3
   3ca10:	bcs	3cae8 <flatcc_json_printer_int8_vector_field@@Base+0x2e8>
   3ca14:	mov	r1, sl
   3ca18:	mov	r0, r4
   3ca1c:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3ca20:	ldr	r2, [r4, #20]
   3ca24:	b	3c964 <flatcc_json_printer_int8_vector_field@@Base+0x164>
   3ca28:	ldr	r3, [r4, #20]
   3ca2c:	add	r2, r3, #1
   3ca30:	ldrb	r1, [r4, #25]
   3ca34:	cmp	r1, #0
   3ca38:	bne	3cb04 <flatcc_json_printer_int8_vector_field@@Base+0x304>
   3ca3c:	mov	r1, #93	; 0x5d
   3ca40:	str	r2, [r4, #20]
   3ca44:	strb	r1, [r3]
   3ca48:	ldrd	r4, [sp]
   3ca4c:	ldrd	r6, [sp, #8]
   3ca50:	ldrd	r8, [sp, #16]
   3ca54:	ldr	sl, [sp, #24]
   3ca58:	add	sp, sp, #28
   3ca5c:	pop	{pc}		; (ldr pc, [sp], #4)
   3ca60:	add	r2, r1, #1
   3ca64:	mov	r3, #10
   3ca68:	mov	r0, r4
   3ca6c:	str	r2, [r4, #20]
   3ca70:	strb	r3, [r1]
   3ca74:	bl	34188 <flatcc_json_parser_struct_as_root@@Base+0xd6c>
   3ca78:	ldr	r1, [r4, #20]
   3ca7c:	b	3c8e0 <flatcc_json_printer_int8_vector_field@@Base+0xe0>
   3ca80:	umull	ip, r1, r8, r3
   3ca84:	mov	sl, #100	; 0x64
   3ca88:	mov	ip, #0
   3ca8c:	mov	lr, #49	; 0x31
   3ca90:	strb	ip, [r2, #3]
   3ca94:	mov	ip, #3
   3ca98:	lsr	r1, r1, #5
   3ca9c:	mls	r1, sl, r1, r3
   3caa0:	uxtb	r1, r1
   3caa4:	ldrb	r3, [r7, r1, lsl #1]
   3caa8:	add	r1, r7, r1, lsl #1
   3caac:	strb	r3, [r2, #1]
   3cab0:	ldrb	r3, [r1, #1]
   3cab4:	strb	lr, [r2]
   3cab8:	strb	r3, [r2, #2]
   3cabc:	b	3c9ac <flatcc_json_printer_int8_vector_field@@Base+0x1ac>
   3cac0:	mov	ip, #0
   3cac4:	sxth	r3, r3
   3cac8:	add	r1, r7, r3, lsl #1
   3cacc:	strb	ip, [r2, #2]
   3cad0:	mov	ip, #2
   3cad4:	ldrb	r3, [r7, r3, lsl #1]
   3cad8:	strb	r3, [r2]
   3cadc:	ldrb	r3, [r1, #1]
   3cae0:	strb	r3, [r2, #1]
   3cae4:	b	3c9ac <flatcc_json_printer_int8_vector_field@@Base+0x1ac>
   3cae8:	mov	r2, sl
   3caec:	mov	r1, #32
   3caf0:	bl	1459c <memset@plt>
   3caf4:	ldr	r2, [r4, #20]
   3caf8:	add	r2, r2, sl
   3cafc:	str	r2, [r4, #20]
   3cb00:	b	3c964 <flatcc_json_printer_int8_vector_field@@Base+0x164>
   3cb04:	mov	r1, #10
   3cb08:	str	r2, [r4, #20]
   3cb0c:	strb	r1, [r3]
   3cb10:	ldrb	r3, [r4, #25]
   3cb14:	ldr	r2, [r4, #32]
   3cb18:	ldr	r1, [r4, #16]
   3cb1c:	ldr	r0, [r4, #20]
   3cb20:	sub	r2, r2, #1
   3cb24:	mul	r5, r2, r3
   3cb28:	str	r2, [r4, #32]
   3cb2c:	add	r3, r0, r5
   3cb30:	cmp	r1, r3
   3cb34:	bcs	3cb50 <flatcc_json_printer_int8_vector_field@@Base+0x350>
   3cb38:	mov	r1, r5
   3cb3c:	mov	r0, r4
   3cb40:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3cb44:	ldr	r3, [r4, #20]
   3cb48:	add	r2, r3, #1
   3cb4c:	b	3ca3c <flatcc_json_printer_int8_vector_field@@Base+0x23c>
   3cb50:	mov	r2, r5
   3cb54:	mov	r1, #32
   3cb58:	bl	1459c <memset@plt>
   3cb5c:	ldr	r3, [r4, #20]
   3cb60:	add	r3, r3, r5
   3cb64:	add	r2, r3, #1
   3cb68:	b	3ca3c <flatcc_json_printer_int8_vector_field@@Base+0x23c>

0003cb6c <flatcc_json_printer_int16_vector_field@@Base>:
   3cb6c:	ldr	ip, [r1, #8]
   3cb70:	add	r2, r2, #2
   3cb74:	lsl	r2, r2, #1
   3cb78:	cmp	ip, r2
   3cb7c:	bxle	lr
   3cb80:	ldr	ip, [r1, #4]
   3cb84:	ldrh	r2, [ip, r2]
   3cb88:	cmp	r2, #0
   3cb8c:	bxeq	lr
   3cb90:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3cb94:	ldr	ip, [r1]
   3cb98:	strd	r6, [sp, #8]
   3cb9c:	str	lr, [sp, #28]
   3cba0:	strd	r8, [sp, #16]
   3cba4:	str	sl, [sp, #24]
   3cba8:	adds	lr, ip, r2
   3cbac:	beq	3cd38 <flatcc_json_printer_int16_vector_field@@Base+0x1cc>
   3cbb0:	ldr	r4, [r1, #16]
   3cbb4:	add	r5, r4, #1
   3cbb8:	cmp	r4, #0
   3cbbc:	str	r5, [r1, #16]
   3cbc0:	beq	3cbd8 <flatcc_json_printer_int16_vector_field@@Base+0x6c>
   3cbc4:	ldr	r1, [r0, #20]
   3cbc8:	mov	r4, #44	; 0x2c
   3cbcc:	add	r5, r1, #1
   3cbd0:	str	r5, [r0, #20]
   3cbd4:	strb	r4, [r1]
   3cbd8:	mov	r1, r3
   3cbdc:	ldr	r3, [ip, r2]
   3cbe0:	mov	r4, r0
   3cbe4:	ldr	r2, [sp, #32]
   3cbe8:	add	r6, lr, r3
   3cbec:	ldr	r5, [lr, r3]
   3cbf0:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   3cbf4:	ldr	r2, [r4, #20]
   3cbf8:	mov	r1, #91	; 0x5b
   3cbfc:	ldr	r3, [r4, #32]
   3cc00:	cmp	r5, #0
   3cc04:	add	r0, r2, #1
   3cc08:	add	r3, r3, #1
   3cc0c:	str	r0, [r4, #20]
   3cc10:	str	r3, [r4, #32]
   3cc14:	strb	r1, [r2]
   3cc18:	beq	3cd18 <flatcc_json_printer_int16_vector_field@@Base+0x1ac>
   3cc1c:	ldrb	r3, [r4, #25]
   3cc20:	ldr	r1, [r4, #20]
   3cc24:	cmp	r3, #0
   3cc28:	bne	3cd50 <flatcc_json_printer_int16_vector_field@@Base+0x1e4>
   3cc2c:	ldr	r2, [r4, #16]
   3cc30:	cmp	r2, r1
   3cc34:	bhi	3cc4c <flatcc_json_printer_int16_vector_field@@Base+0xe0>
   3cc38:	mov	r1, r3
   3cc3c:	mov	r0, r4
   3cc40:	ldr	r3, [r4, #44]	; 0x2c
   3cc44:	blx	r3
   3cc48:	ldr	r1, [r4, #20]
   3cc4c:	ldrsh	r0, [r6, #4]
   3cc50:	cmp	r0, #0
   3cc54:	lsr	r7, r0, #31
   3cc58:	uxth	r0, r0
   3cc5c:	bge	3cc70 <flatcc_json_printer_int16_vector_field@@Base+0x104>
   3cc60:	rsb	r0, r0, #0
   3cc64:	mov	r3, #45	; 0x2d
   3cc68:	uxth	r0, r0
   3cc6c:	strb	r3, [r1], #1
   3cc70:	bl	334f0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   3cc74:	ldr	r3, [r4, #20]
   3cc78:	add	r0, r7, r0
   3cc7c:	cmp	r5, #1
   3cc80:	add	r6, r6, #6
   3cc84:	sub	r5, r5, #2
   3cc88:	add	r0, r3, r0
   3cc8c:	str	r0, [r4, #20]
   3cc90:	beq	3cd1c <flatcc_json_printer_int16_vector_field@@Base+0x1b0>
   3cc94:	mov	r7, #44	; 0x2c
   3cc98:	mov	r8, #10
   3cc9c:	add	r3, r0, #1
   3cca0:	str	r3, [r4, #20]
   3cca4:	strb	r7, [r0]
   3cca8:	ldrb	r1, [r4, #25]
   3ccac:	cmp	r1, #0
   3ccb0:	bne	3cda4 <flatcc_json_printer_int16_vector_field@@Base+0x238>
   3ccb4:	ldr	r3, [r4, #16]
   3ccb8:	mov	r0, r4
   3ccbc:	ldr	r2, [r4, #20]
   3ccc0:	cmp	r2, r3
   3ccc4:	bcc	3ccd4 <flatcc_json_printer_int16_vector_field@@Base+0x168>
   3ccc8:	ldr	r3, [r4, #44]	; 0x2c
   3cccc:	blx	r3
   3ccd0:	ldr	r2, [r4, #20]
   3ccd4:	mov	r3, r2
   3ccd8:	mov	r1, r2
   3ccdc:	ldrsh	r0, [r6]
   3cce0:	mov	ip, #45	; 0x2d
   3cce4:	cmp	r0, #0
   3cce8:	uxth	r0, r0
   3ccec:	rsb	r2, r0, #0
   3ccf0:	blt	3cd70 <flatcc_json_printer_int16_vector_field@@Base+0x204>
   3ccf4:	bl	334f0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   3ccf8:	ldr	r3, [r4, #20]
   3ccfc:	sub	r5, r5, #1
   3cd00:	add	r6, r6, #2
   3cd04:	cmn	r5, #1
   3cd08:	add	r0, r3, r0
   3cd0c:	str	r0, [r4, #20]
   3cd10:	bne	3cc9c <flatcc_json_printer_int16_vector_field@@Base+0x130>
   3cd14:	b	3cd1c <flatcc_json_printer_int16_vector_field@@Base+0x1b0>
   3cd18:	ldr	r0, [r4, #20]
   3cd1c:	add	r3, r0, #1
   3cd20:	ldrb	r2, [r4, #25]
   3cd24:	cmp	r2, #0
   3cd28:	bne	3ce08 <flatcc_json_printer_int16_vector_field@@Base+0x29c>
   3cd2c:	mov	r2, #93	; 0x5d
   3cd30:	str	r3, [r4, #20]
   3cd34:	strb	r2, [r0]
   3cd38:	ldrd	r4, [sp]
   3cd3c:	ldrd	r6, [sp, #8]
   3cd40:	ldrd	r8, [sp, #16]
   3cd44:	ldr	sl, [sp, #24]
   3cd48:	add	sp, sp, #28
   3cd4c:	pop	{pc}		; (ldr pc, [sp], #4)
   3cd50:	add	r2, r1, #1
   3cd54:	mov	r3, #10
   3cd58:	mov	r0, r4
   3cd5c:	str	r2, [r4, #20]
   3cd60:	strb	r3, [r1]
   3cd64:	bl	34188 <flatcc_json_parser_struct_as_root@@Base+0xd6c>
   3cd68:	ldr	r1, [r4, #20]
   3cd6c:	b	3cc4c <flatcc_json_printer_int16_vector_field@@Base+0xe0>
   3cd70:	uxth	r0, r2
   3cd74:	strb	ip, [r3], #1
   3cd78:	mov	r1, r3
   3cd7c:	bl	334f0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   3cd80:	ldr	r3, [r4, #20]
   3cd84:	add	r0, r0, #1
   3cd88:	sub	r5, r5, #1
   3cd8c:	cmn	r5, #1
   3cd90:	add	r6, r6, #2
   3cd94:	add	r0, r3, r0
   3cd98:	str	r0, [r4, #20]
   3cd9c:	bne	3cc9c <flatcc_json_printer_int16_vector_field@@Base+0x130>
   3cda0:	b	3cd1c <flatcc_json_printer_int16_vector_field@@Base+0x1b0>
   3cda4:	ldr	r3, [r4, #20]
   3cda8:	mov	r1, #32
   3cdac:	mov	r0, r4
   3cdb0:	add	r2, r3, #1
   3cdb4:	str	r2, [r4, #20]
   3cdb8:	strb	r8, [r3]
   3cdbc:	ldrb	r2, [r4, #25]
   3cdc0:	ldr	lr, [r4, #16]
   3cdc4:	ldr	r9, [r4, #32]
   3cdc8:	ldr	r3, [r4, #20]
   3cdcc:	mul	r9, r9, r2
   3cdd0:	add	ip, r3, r9
   3cdd4:	mov	r2, r9
   3cdd8:	cmp	lr, ip
   3cddc:	bcs	3cdf0 <flatcc_json_printer_int16_vector_field@@Base+0x284>
   3cde0:	mov	r1, r9
   3cde4:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3cde8:	ldr	r2, [r4, #20]
   3cdec:	b	3ccd4 <flatcc_json_printer_int16_vector_field@@Base+0x168>
   3cdf0:	mov	r0, r3
   3cdf4:	bl	1459c <memset@plt>
   3cdf8:	ldr	r2, [r4, #20]
   3cdfc:	add	r2, r2, r9
   3ce00:	str	r2, [r4, #20]
   3ce04:	b	3ccd4 <flatcc_json_printer_int16_vector_field@@Base+0x168>
   3ce08:	mov	r2, #10
   3ce0c:	str	r3, [r4, #20]
   3ce10:	strb	r2, [r0]
   3ce14:	ldrb	r5, [r4, #25]
   3ce18:	ldr	r3, [r4, #32]
   3ce1c:	ldr	r2, [r4, #16]
   3ce20:	ldr	r0, [r4, #20]
   3ce24:	sub	r3, r3, #1
   3ce28:	mul	r5, r3, r5
   3ce2c:	str	r3, [r4, #32]
   3ce30:	add	r3, r0, r5
   3ce34:	cmp	r2, r3
   3ce38:	bcs	3ce54 <flatcc_json_printer_int16_vector_field@@Base+0x2e8>
   3ce3c:	mov	r0, r4
   3ce40:	mov	r1, r5
   3ce44:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3ce48:	ldr	r0, [r4, #20]
   3ce4c:	add	r3, r0, #1
   3ce50:	b	3cd2c <flatcc_json_printer_int16_vector_field@@Base+0x1c0>
   3ce54:	mov	r2, r5
   3ce58:	mov	r1, #32
   3ce5c:	bl	1459c <memset@plt>
   3ce60:	ldr	r0, [r4, #20]
   3ce64:	add	r0, r0, r5
   3ce68:	add	r3, r0, #1
   3ce6c:	b	3cd2c <flatcc_json_printer_int16_vector_field@@Base+0x1c0>

0003ce70 <flatcc_json_printer_int32_vector_field@@Base>:
   3ce70:	ldr	ip, [r1, #8]
   3ce74:	add	r2, r2, #2
   3ce78:	lsl	r2, r2, #1
   3ce7c:	cmp	ip, r2
   3ce80:	bxle	lr
   3ce84:	ldr	ip, [r1, #4]
   3ce88:	ldrh	r2, [ip, r2]
   3ce8c:	cmp	r2, #0
   3ce90:	bxeq	lr
   3ce94:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3ce98:	ldr	ip, [r1]
   3ce9c:	strd	r6, [sp, #8]
   3cea0:	str	lr, [sp, #28]
   3cea4:	strd	r8, [sp, #16]
   3cea8:	str	sl, [sp, #24]
   3ceac:	adds	lr, ip, r2
   3ceb0:	beq	3d02c <flatcc_json_printer_int32_vector_field@@Base+0x1bc>
   3ceb4:	ldr	r4, [r1, #16]
   3ceb8:	add	r5, r4, #1
   3cebc:	cmp	r4, #0
   3cec0:	str	r5, [r1, #16]
   3cec4:	beq	3cedc <flatcc_json_printer_int32_vector_field@@Base+0x6c>
   3cec8:	ldr	r1, [r0, #20]
   3cecc:	mov	r4, #44	; 0x2c
   3ced0:	add	r5, r1, #1
   3ced4:	str	r5, [r0, #20]
   3ced8:	strb	r4, [r1]
   3cedc:	mov	r1, r3
   3cee0:	ldr	r3, [ip, r2]
   3cee4:	mov	r4, r0
   3cee8:	ldr	r2, [sp, #32]
   3ceec:	add	r6, lr, r3
   3cef0:	ldr	r5, [lr, r3]
   3cef4:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   3cef8:	ldr	r2, [r4, #20]
   3cefc:	mov	r1, #91	; 0x5b
   3cf00:	ldr	r3, [r4, #32]
   3cf04:	cmp	r5, #0
   3cf08:	add	r0, r2, #1
   3cf0c:	add	r3, r3, #1
   3cf10:	str	r0, [r4, #20]
   3cf14:	str	r3, [r4, #32]
   3cf18:	strb	r1, [r2]
   3cf1c:	beq	3d00c <flatcc_json_printer_int32_vector_field@@Base+0x19c>
   3cf20:	ldrb	r3, [r4, #25]
   3cf24:	ldr	r1, [r4, #20]
   3cf28:	cmp	r3, #0
   3cf2c:	bne	3d044 <flatcc_json_printer_int32_vector_field@@Base+0x1d4>
   3cf30:	ldr	r2, [r4, #16]
   3cf34:	cmp	r2, r1
   3cf38:	bhi	3cf50 <flatcc_json_printer_int32_vector_field@@Base+0xe0>
   3cf3c:	mov	r1, r3
   3cf40:	mov	r0, r4
   3cf44:	ldr	r3, [r4, #44]	; 0x2c
   3cf48:	blx	r3
   3cf4c:	ldr	r1, [r4, #20]
   3cf50:	ldr	r0, [r6, #4]
   3cf54:	cmp	r0, #0
   3cf58:	lsr	r7, r0, #31
   3cf5c:	bge	3cf6c <flatcc_json_printer_int32_vector_field@@Base+0xfc>
   3cf60:	mov	r3, #45	; 0x2d
   3cf64:	rsb	r0, r0, #0
   3cf68:	strb	r3, [r1], #1
   3cf6c:	bl	33648 <flatcc_json_parser_struct_as_root@@Base+0x22c>
   3cf70:	ldr	r3, [r4, #20]
   3cf74:	add	r0, r7, r0
   3cf78:	cmp	r5, #1
   3cf7c:	add	r6, r6, #8
   3cf80:	sub	r5, r5, #2
   3cf84:	add	r0, r3, r0
   3cf88:	str	r0, [r4, #20]
   3cf8c:	beq	3d010 <flatcc_json_printer_int32_vector_field@@Base+0x1a0>
   3cf90:	mov	r7, #44	; 0x2c
   3cf94:	mov	r8, #10
   3cf98:	add	r3, r0, #1
   3cf9c:	str	r3, [r4, #20]
   3cfa0:	strb	r7, [r0]
   3cfa4:	ldrb	r1, [r4, #25]
   3cfa8:	cmp	r1, #0
   3cfac:	bne	3d098 <flatcc_json_printer_int32_vector_field@@Base+0x228>
   3cfb0:	ldr	r3, [r4, #16]
   3cfb4:	mov	r0, r4
   3cfb8:	ldr	r2, [r4, #20]
   3cfbc:	cmp	r2, r3
   3cfc0:	bcc	3cfd0 <flatcc_json_printer_int32_vector_field@@Base+0x160>
   3cfc4:	ldr	r3, [r4, #44]	; 0x2c
   3cfc8:	blx	r3
   3cfcc:	ldr	r2, [r4, #20]
   3cfd0:	mov	lr, #45	; 0x2d
   3cfd4:	mov	ip, r2
   3cfd8:	ldr	r3, [r6]
   3cfdc:	mov	r1, r2
   3cfe0:	subs	r0, r3, #0
   3cfe4:	blt	3d064 <flatcc_json_printer_int32_vector_field@@Base+0x1f4>
   3cfe8:	bl	33648 <flatcc_json_parser_struct_as_root@@Base+0x22c>
   3cfec:	ldr	r3, [r4, #20]
   3cff0:	sub	r5, r5, #1
   3cff4:	add	r6, r6, #4
   3cff8:	cmn	r5, #1
   3cffc:	add	r0, r3, r0
   3d000:	str	r0, [r4, #20]
   3d004:	bne	3cf98 <flatcc_json_printer_int32_vector_field@@Base+0x128>
   3d008:	b	3d010 <flatcc_json_printer_int32_vector_field@@Base+0x1a0>
   3d00c:	ldr	r0, [r4, #20]
   3d010:	add	r3, r0, #1
   3d014:	ldrb	r2, [r4, #25]
   3d018:	cmp	r2, #0
   3d01c:	bne	3d0fc <flatcc_json_printer_int32_vector_field@@Base+0x28c>
   3d020:	mov	r2, #93	; 0x5d
   3d024:	str	r3, [r4, #20]
   3d028:	strb	r2, [r0]
   3d02c:	ldrd	r4, [sp]
   3d030:	ldrd	r6, [sp, #8]
   3d034:	ldrd	r8, [sp, #16]
   3d038:	ldr	sl, [sp, #24]
   3d03c:	add	sp, sp, #28
   3d040:	pop	{pc}		; (ldr pc, [sp], #4)
   3d044:	add	r2, r1, #1
   3d048:	mov	r3, #10
   3d04c:	mov	r0, r4
   3d050:	str	r2, [r4, #20]
   3d054:	strb	r3, [r1]
   3d058:	bl	34188 <flatcc_json_parser_struct_as_root@@Base+0xd6c>
   3d05c:	ldr	r1, [r4, #20]
   3d060:	b	3cf50 <flatcc_json_printer_int32_vector_field@@Base+0xe0>
   3d064:	rsb	r0, r3, #0
   3d068:	strb	lr, [ip], #1
   3d06c:	mov	r1, ip
   3d070:	bl	33648 <flatcc_json_parser_struct_as_root@@Base+0x22c>
   3d074:	ldr	r3, [r4, #20]
   3d078:	add	r0, r0, #1
   3d07c:	sub	r5, r5, #1
   3d080:	cmn	r5, #1
   3d084:	add	r6, r6, #4
   3d088:	add	r0, r3, r0
   3d08c:	str	r0, [r4, #20]
   3d090:	bne	3cf98 <flatcc_json_printer_int32_vector_field@@Base+0x128>
   3d094:	b	3d010 <flatcc_json_printer_int32_vector_field@@Base+0x1a0>
   3d098:	ldr	r3, [r4, #20]
   3d09c:	mov	r1, #32
   3d0a0:	mov	r0, r4
   3d0a4:	add	r2, r3, #1
   3d0a8:	str	r2, [r4, #20]
   3d0ac:	strb	r8, [r3]
   3d0b0:	ldrb	r2, [r4, #25]
   3d0b4:	ldr	lr, [r4, #16]
   3d0b8:	ldr	r9, [r4, #32]
   3d0bc:	ldr	r3, [r4, #20]
   3d0c0:	mul	r9, r9, r2
   3d0c4:	add	ip, r3, r9
   3d0c8:	mov	r2, r9
   3d0cc:	cmp	lr, ip
   3d0d0:	bcs	3d0e4 <flatcc_json_printer_int32_vector_field@@Base+0x274>
   3d0d4:	mov	r1, r9
   3d0d8:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3d0dc:	ldr	r2, [r4, #20]
   3d0e0:	b	3cfd0 <flatcc_json_printer_int32_vector_field@@Base+0x160>
   3d0e4:	mov	r0, r3
   3d0e8:	bl	1459c <memset@plt>
   3d0ec:	ldr	r2, [r4, #20]
   3d0f0:	add	r2, r2, r9
   3d0f4:	str	r2, [r4, #20]
   3d0f8:	b	3cfd0 <flatcc_json_printer_int32_vector_field@@Base+0x160>
   3d0fc:	mov	r2, #10
   3d100:	str	r3, [r4, #20]
   3d104:	strb	r2, [r0]
   3d108:	ldrb	r5, [r4, #25]
   3d10c:	ldr	r3, [r4, #32]
   3d110:	ldr	r2, [r4, #16]
   3d114:	ldr	r0, [r4, #20]
   3d118:	sub	r3, r3, #1
   3d11c:	mul	r5, r3, r5
   3d120:	str	r3, [r4, #32]
   3d124:	add	r3, r0, r5
   3d128:	cmp	r2, r3
   3d12c:	bcs	3d148 <flatcc_json_printer_int32_vector_field@@Base+0x2d8>
   3d130:	mov	r0, r4
   3d134:	mov	r1, r5
   3d138:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3d13c:	ldr	r0, [r4, #20]
   3d140:	add	r3, r0, #1
   3d144:	b	3d020 <flatcc_json_printer_int32_vector_field@@Base+0x1b0>
   3d148:	mov	r2, r5
   3d14c:	mov	r1, #32
   3d150:	bl	1459c <memset@plt>
   3d154:	ldr	r0, [r4, #20]
   3d158:	add	r0, r0, r5
   3d15c:	add	r3, r0, #1
   3d160:	b	3d020 <flatcc_json_printer_int32_vector_field@@Base+0x1b0>

0003d164 <flatcc_json_printer_int64_vector_field@@Base>:
   3d164:	ldr	ip, [r1, #8]
   3d168:	add	r2, r2, #2
   3d16c:	lsl	r2, r2, #1
   3d170:	cmp	ip, r2
   3d174:	bxle	lr
   3d178:	ldr	ip, [r1, #4]
   3d17c:	ldrh	r2, [ip, r2]
   3d180:	cmp	r2, #0
   3d184:	bxeq	lr
   3d188:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3d18c:	ldr	ip, [r1]
   3d190:	strd	r6, [sp, #8]
   3d194:	str	lr, [sp, #28]
   3d198:	strd	r8, [sp, #16]
   3d19c:	str	sl, [sp, #24]
   3d1a0:	adds	lr, ip, r2
   3d1a4:	beq	3d32c <flatcc_json_printer_int64_vector_field@@Base+0x1c8>
   3d1a8:	ldr	r4, [r1, #16]
   3d1ac:	add	r5, r4, #1
   3d1b0:	cmp	r4, #0
   3d1b4:	str	r5, [r1, #16]
   3d1b8:	beq	3d1d0 <flatcc_json_printer_int64_vector_field@@Base+0x6c>
   3d1bc:	ldr	r1, [r0, #20]
   3d1c0:	mov	r4, #44	; 0x2c
   3d1c4:	add	r5, r1, #1
   3d1c8:	str	r5, [r0, #20]
   3d1cc:	strb	r4, [r1]
   3d1d0:	mov	r1, r3
   3d1d4:	ldr	r3, [ip, r2]
   3d1d8:	mov	r4, r0
   3d1dc:	ldr	r2, [sp, #32]
   3d1e0:	add	r8, lr, r3
   3d1e4:	ldr	r5, [lr, r3]
   3d1e8:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   3d1ec:	ldr	r2, [r4, #20]
   3d1f0:	mov	r1, #91	; 0x5b
   3d1f4:	ldr	r3, [r4, #32]
   3d1f8:	cmp	r5, #0
   3d1fc:	add	r0, r2, #1
   3d200:	add	r3, r3, #1
   3d204:	str	r0, [r4, #20]
   3d208:	str	r3, [r4, #32]
   3d20c:	strb	r1, [r2]
   3d210:	beq	3d30c <flatcc_json_printer_int64_vector_field@@Base+0x1a8>
   3d214:	ldrb	r1, [r4, #25]
   3d218:	ldr	r2, [r4, #20]
   3d21c:	cmp	r1, #0
   3d220:	bne	3d344 <flatcc_json_printer_int64_vector_field@@Base+0x1e0>
   3d224:	ldr	r3, [r4, #16]
   3d228:	cmp	r3, r2
   3d22c:	bhi	3d240 <flatcc_json_printer_int64_vector_field@@Base+0xdc>
   3d230:	mov	r0, r4
   3d234:	ldr	r3, [r4, #44]	; 0x2c
   3d238:	blx	r3
   3d23c:	ldr	r2, [r4, #20]
   3d240:	ldrd	r0, [r8, #4]
   3d244:	cmp	r0, #0
   3d248:	lsr	r6, r1, #31
   3d24c:	sbcs	r3, r1, #0
   3d250:	bge	3d264 <flatcc_json_printer_int64_vector_field@@Base+0x100>
   3d254:	rsbs	r0, r0, #0
   3d258:	mov	r3, #45	; 0x2d
   3d25c:	rsc	r1, r1, #0
   3d260:	strb	r3, [r2], #1
   3d264:	bl	3395c <flatcc_json_parser_struct_as_root@@Base+0x540>
   3d268:	ldr	r3, [r4, #20]
   3d26c:	add	r0, r6, r0
   3d270:	cmp	r5, #1
   3d274:	add	r8, r8, #12
   3d278:	sub	r5, r5, #2
   3d27c:	add	r0, r3, r0
   3d280:	str	r0, [r4, #20]
   3d284:	beq	3d310 <flatcc_json_printer_int64_vector_field@@Base+0x1ac>
   3d288:	mov	r9, #44	; 0x2c
   3d28c:	mov	sl, #10
   3d290:	add	r3, r0, #1
   3d294:	str	r3, [r4, #20]
   3d298:	strb	r9, [r0]
   3d29c:	ldrb	r1, [r4, #25]
   3d2a0:	cmp	r1, #0
   3d2a4:	bne	3d39c <flatcc_json_printer_int64_vector_field@@Base+0x238>
   3d2a8:	ldr	r3, [r4, #16]
   3d2ac:	mov	r0, r4
   3d2b0:	ldr	r2, [r4, #20]
   3d2b4:	cmp	r2, r3
   3d2b8:	bcc	3d2c8 <flatcc_json_printer_int64_vector_field@@Base+0x164>
   3d2bc:	ldr	r3, [r4, #44]	; 0x2c
   3d2c0:	blx	r3
   3d2c4:	ldr	r2, [r4, #20]
   3d2c8:	mov	ip, #45	; 0x2d
   3d2cc:	mov	r3, r2
   3d2d0:	ldrd	r6, [r8]
   3d2d4:	cmp	r6, #0
   3d2d8:	mov	r0, r6
   3d2dc:	sbcs	lr, r7, #0
   3d2e0:	mov	r1, r7
   3d2e4:	blt	3d364 <flatcc_json_printer_int64_vector_field@@Base+0x200>
   3d2e8:	bl	3395c <flatcc_json_parser_struct_as_root@@Base+0x540>
   3d2ec:	ldr	r3, [r4, #20]
   3d2f0:	sub	r5, r5, #1
   3d2f4:	add	r8, r8, #8
   3d2f8:	cmn	r5, #1
   3d2fc:	add	r0, r3, r0
   3d300:	str	r0, [r4, #20]
   3d304:	bne	3d290 <flatcc_json_printer_int64_vector_field@@Base+0x12c>
   3d308:	b	3d310 <flatcc_json_printer_int64_vector_field@@Base+0x1ac>
   3d30c:	ldr	r0, [r4, #20]
   3d310:	add	r3, r0, #1
   3d314:	ldrb	r2, [r4, #25]
   3d318:	cmp	r2, #0
   3d31c:	bne	3d400 <flatcc_json_printer_int64_vector_field@@Base+0x29c>
   3d320:	mov	r2, #93	; 0x5d
   3d324:	str	r3, [r4, #20]
   3d328:	strb	r2, [r0]
   3d32c:	ldrd	r4, [sp]
   3d330:	ldrd	r6, [sp, #8]
   3d334:	ldrd	r8, [sp, #16]
   3d338:	ldr	sl, [sp, #24]
   3d33c:	add	sp, sp, #28
   3d340:	pop	{pc}		; (ldr pc, [sp], #4)
   3d344:	add	r1, r2, #1
   3d348:	mov	r3, #10
   3d34c:	mov	r0, r4
   3d350:	str	r1, [r4, #20]
   3d354:	strb	r3, [r2]
   3d358:	bl	34188 <flatcc_json_parser_struct_as_root@@Base+0xd6c>
   3d35c:	ldr	r2, [r4, #20]
   3d360:	b	3d240 <flatcc_json_printer_int64_vector_field@@Base+0xdc>
   3d364:	rsbs	r0, r6, #0
   3d368:	strb	ip, [r3], #1
   3d36c:	mov	r2, r3
   3d370:	rsc	r1, r7, #0
   3d374:	sub	r5, r5, #1
   3d378:	bl	3395c <flatcc_json_parser_struct_as_root@@Base+0x540>
   3d37c:	ldr	r3, [r4, #20]
   3d380:	add	r0, r0, #1
   3d384:	cmn	r5, #1
   3d388:	add	r8, r8, #8
   3d38c:	add	r0, r3, r0
   3d390:	str	r0, [r4, #20]
   3d394:	bne	3d290 <flatcc_json_printer_int64_vector_field@@Base+0x12c>
   3d398:	b	3d310 <flatcc_json_printer_int64_vector_field@@Base+0x1ac>
   3d39c:	ldr	r3, [r4, #20]
   3d3a0:	mov	r1, #32
   3d3a4:	mov	r0, r4
   3d3a8:	add	r2, r3, #1
   3d3ac:	str	r2, [r4, #20]
   3d3b0:	strb	sl, [r3]
   3d3b4:	ldrb	r2, [r4, #25]
   3d3b8:	ldr	lr, [r4, #16]
   3d3bc:	ldr	r6, [r4, #32]
   3d3c0:	ldr	r3, [r4, #20]
   3d3c4:	mul	r6, r6, r2
   3d3c8:	add	ip, r3, r6
   3d3cc:	mov	r2, r6
   3d3d0:	cmp	lr, ip
   3d3d4:	bcs	3d3e8 <flatcc_json_printer_int64_vector_field@@Base+0x284>
   3d3d8:	mov	r1, r6
   3d3dc:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3d3e0:	ldr	r2, [r4, #20]
   3d3e4:	b	3d2c8 <flatcc_json_printer_int64_vector_field@@Base+0x164>
   3d3e8:	mov	r0, r3
   3d3ec:	bl	1459c <memset@plt>
   3d3f0:	ldr	r2, [r4, #20]
   3d3f4:	add	r2, r2, r6
   3d3f8:	str	r2, [r4, #20]
   3d3fc:	b	3d2c8 <flatcc_json_printer_int64_vector_field@@Base+0x164>
   3d400:	mov	r2, #10
   3d404:	str	r3, [r4, #20]
   3d408:	strb	r2, [r0]
   3d40c:	ldrb	r5, [r4, #25]
   3d410:	ldr	r3, [r4, #32]
   3d414:	ldr	r2, [r4, #16]
   3d418:	ldr	r0, [r4, #20]
   3d41c:	sub	r3, r3, #1
   3d420:	mul	r5, r3, r5
   3d424:	str	r3, [r4, #32]
   3d428:	add	r3, r0, r5
   3d42c:	cmp	r2, r3
   3d430:	bcs	3d44c <flatcc_json_printer_int64_vector_field@@Base+0x2e8>
   3d434:	mov	r0, r4
   3d438:	mov	r1, r5
   3d43c:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3d440:	ldr	r0, [r4, #20]
   3d444:	add	r3, r0, #1
   3d448:	b	3d320 <flatcc_json_printer_int64_vector_field@@Base+0x1bc>
   3d44c:	mov	r2, r5
   3d450:	mov	r1, #32
   3d454:	bl	1459c <memset@plt>
   3d458:	ldr	r0, [r4, #20]
   3d45c:	add	r0, r0, r5
   3d460:	add	r3, r0, #1
   3d464:	b	3d320 <flatcc_json_printer_int64_vector_field@@Base+0x1bc>

0003d468 <flatcc_json_printer_bool_vector_field@@Base>:
   3d468:	ldr	ip, [r1, #8]
   3d46c:	add	r2, r2, #2
   3d470:	lsl	r2, r2, #1
   3d474:	cmp	ip, r2
   3d478:	bxle	lr
   3d47c:	ldr	ip, [r1, #4]
   3d480:	ldrh	r2, [ip, r2]
   3d484:	cmp	r2, #0
   3d488:	bxeq	lr
   3d48c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3d490:	ldr	ip, [r1]
   3d494:	strd	r6, [sp, #8]
   3d498:	strd	r8, [sp, #16]
   3d49c:	str	sl, [sp, #24]
   3d4a0:	str	lr, [sp, #28]
   3d4a4:	adds	r7, ip, r2
   3d4a8:	beq	3d62c <flatcc_json_printer_bool_vector_field@@Base+0x1c4>
   3d4ac:	ldr	lr, [r1, #16]
   3d4b0:	add	r5, lr, #1
   3d4b4:	cmp	lr, #0
   3d4b8:	str	r5, [r1, #16]
   3d4bc:	beq	3d4d4 <flatcc_json_printer_bool_vector_field@@Base+0x6c>
   3d4c0:	ldr	r1, [r0, #20]
   3d4c4:	mov	lr, #44	; 0x2c
   3d4c8:	add	r4, r1, #1
   3d4cc:	str	r4, [r0, #20]
   3d4d0:	strb	lr, [r1]
   3d4d4:	mov	r1, r3
   3d4d8:	ldr	r3, [ip, r2]
   3d4dc:	mov	r4, r0
   3d4e0:	ldr	r2, [sp, #32]
   3d4e4:	add	r6, r7, r3
   3d4e8:	ldr	r8, [r7, r3]
   3d4ec:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   3d4f0:	ldr	r2, [r4, #20]
   3d4f4:	mov	r1, #91	; 0x5b
   3d4f8:	ldr	r3, [r4, #32]
   3d4fc:	cmp	r8, #0
   3d500:	add	r0, r2, #1
   3d504:	add	r3, r3, #1
   3d508:	str	r0, [r4, #20]
   3d50c:	str	r3, [r4, #32]
   3d510:	strb	r1, [r2]
   3d514:	beq	3d60c <flatcc_json_printer_bool_vector_field@@Base+0x1a4>
   3d518:	ldrb	r1, [r4, #25]
   3d51c:	ldr	r2, [r4, #20]
   3d520:	cmp	r1, #0
   3d524:	bne	3d644 <flatcc_json_printer_bool_vector_field@@Base+0x1dc>
   3d528:	ldr	r3, [r4, #16]
   3d52c:	cmp	r3, r2
   3d530:	bhi	3d544 <flatcc_json_printer_bool_vector_field@@Base+0xdc>
   3d534:	mov	r0, r4
   3d538:	ldr	r3, [r4, #44]	; 0x2c
   3d53c:	blx	r3
   3d540:	ldr	r2, [r4, #20]
   3d544:	ldrb	r3, [r6, #4]
   3d548:	cmp	r3, #0
   3d54c:	beq	3d744 <flatcc_json_printer_bool_vector_field@@Base+0x2dc>
   3d550:	ldr	ip, [pc, #556]	; 3d784 <flatcc_json_printer_bool_vector_field@@Base+0x31c>
   3d554:	movw	r3, #28992	; 0x7140
   3d558:	movt	r3, #4
   3d55c:	mov	r1, #4
   3d560:	ldr	r0, [r3, #1768]	; 0x6e8
   3d564:	ldrb	r3, [ip, #4]
   3d568:	str	r0, [r2]
   3d56c:	strb	r3, [r2, #4]
   3d570:	ldr	r3, [r4, #20]
   3d574:	cmp	r8, #1
   3d578:	add	r5, r6, #5
   3d57c:	add	r3, r3, r1
   3d580:	str	r3, [r4, #20]
   3d584:	beq	3d610 <flatcc_json_printer_bool_vector_field@@Base+0x1a8>
   3d588:	ldr	r7, [pc, #504]	; 3d788 <flatcc_json_printer_bool_vector_field@@Base+0x320>
   3d58c:	add	r2, r8, #4
   3d590:	mov	r8, #44	; 0x2c
   3d594:	add	r6, r6, r2
   3d598:	sub	r9, r7, #8
   3d59c:	add	r2, r3, #1
   3d5a0:	str	r2, [r4, #20]
   3d5a4:	strb	r8, [r3]
   3d5a8:	ldrb	r1, [r4, #25]
   3d5ac:	cmp	r1, #0
   3d5b0:	bne	3d690 <flatcc_json_printer_bool_vector_field@@Base+0x228>
   3d5b4:	ldr	r3, [r4, #16]
   3d5b8:	mov	r0, r4
   3d5bc:	ldr	r2, [r4, #20]
   3d5c0:	cmp	r2, r3
   3d5c4:	bcc	3d5d4 <flatcc_json_printer_bool_vector_field@@Base+0x16c>
   3d5c8:	ldr	r3, [r4, #44]	; 0x2c
   3d5cc:	blx	r3
   3d5d0:	ldr	r2, [r4, #20]
   3d5d4:	ldrb	r3, [r5]
   3d5d8:	cmp	r3, #0
   3d5dc:	beq	3d664 <flatcc_json_printer_bool_vector_field@@Base+0x1fc>
   3d5e0:	ldrb	r3, [r9, #4]
   3d5e4:	add	r5, r5, #1
   3d5e8:	cmp	r6, r5
   3d5ec:	ldr	r1, [r9]
   3d5f0:	str	r1, [r2]
   3d5f4:	strb	r3, [r2, #4]
   3d5f8:	ldr	r3, [r4, #20]
   3d5fc:	add	r3, r3, #4
   3d600:	str	r3, [r4, #20]
   3d604:	bne	3d59c <flatcc_json_printer_bool_vector_field@@Base+0x134>
   3d608:	b	3d610 <flatcc_json_printer_bool_vector_field@@Base+0x1a8>
   3d60c:	ldr	r3, [r4, #20]
   3d610:	add	r2, r3, #1
   3d614:	ldrb	r1, [r4, #25]
   3d618:	cmp	r1, #0
   3d61c:	bne	3d6f8 <flatcc_json_printer_bool_vector_field@@Base+0x290>
   3d620:	mov	r1, #93	; 0x5d
   3d624:	str	r2, [r4, #20]
   3d628:	strb	r1, [r3]
   3d62c:	ldrd	r4, [sp]
   3d630:	ldrd	r6, [sp, #8]
   3d634:	ldrd	r8, [sp, #16]
   3d638:	ldr	sl, [sp, #24]
   3d63c:	add	sp, sp, #28
   3d640:	pop	{pc}		; (ldr pc, [sp], #4)
   3d644:	add	r1, r2, #1
   3d648:	mov	r3, #10
   3d64c:	mov	r0, r4
   3d650:	str	r1, [r4, #20]
   3d654:	strb	r3, [r2]
   3d658:	bl	34188 <flatcc_json_parser_struct_as_root@@Base+0xd6c>
   3d65c:	ldr	r2, [r4, #20]
   3d660:	b	3d544 <flatcc_json_printer_bool_vector_field@@Base+0xdc>
   3d664:	ldrh	r3, [r7, #4]
   3d668:	add	r5, r5, #1
   3d66c:	cmp	r6, r5
   3d670:	ldr	r1, [r7]
   3d674:	str	r1, [r2]
   3d678:	strh	r3, [r2, #4]
   3d67c:	ldr	r3, [r4, #20]
   3d680:	add	r3, r3, #5
   3d684:	str	r3, [r4, #20]
   3d688:	bne	3d59c <flatcc_json_printer_bool_vector_field@@Base+0x134>
   3d68c:	b	3d610 <flatcc_json_printer_bool_vector_field@@Base+0x1a8>
   3d690:	ldr	r3, [r4, #20]
   3d694:	mov	r2, #10
   3d698:	mov	r1, #32
   3d69c:	mov	r0, r4
   3d6a0:	add	ip, r3, #1
   3d6a4:	str	ip, [r4, #20]
   3d6a8:	strb	r2, [r3]
   3d6ac:	ldrb	r2, [r4, #25]
   3d6b0:	ldr	lr, [r4, #16]
   3d6b4:	ldr	sl, [r4, #32]
   3d6b8:	ldr	r3, [r4, #20]
   3d6bc:	mul	sl, sl, r2
   3d6c0:	add	ip, r3, sl
   3d6c4:	mov	r2, sl
   3d6c8:	cmp	lr, ip
   3d6cc:	bcs	3d6e0 <flatcc_json_printer_bool_vector_field@@Base+0x278>
   3d6d0:	mov	r1, sl
   3d6d4:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3d6d8:	ldr	r2, [r4, #20]
   3d6dc:	b	3d5d4 <flatcc_json_printer_bool_vector_field@@Base+0x16c>
   3d6e0:	mov	r0, r3
   3d6e4:	bl	1459c <memset@plt>
   3d6e8:	ldr	r2, [r4, #20]
   3d6ec:	add	r2, r2, sl
   3d6f0:	str	r2, [r4, #20]
   3d6f4:	b	3d5d4 <flatcc_json_printer_bool_vector_field@@Base+0x16c>
   3d6f8:	mov	r1, #10
   3d6fc:	str	r2, [r4, #20]
   3d700:	strb	r1, [r3]
   3d704:	ldrb	r3, [r4, #25]
   3d708:	ldr	r2, [r4, #32]
   3d70c:	ldr	r1, [r4, #16]
   3d710:	ldr	r0, [r4, #20]
   3d714:	sub	r2, r2, #1
   3d718:	mul	r5, r2, r3
   3d71c:	str	r2, [r4, #32]
   3d720:	add	r3, r0, r5
   3d724:	cmp	r1, r3
   3d728:	bcs	3d768 <flatcc_json_printer_bool_vector_field@@Base+0x300>
   3d72c:	mov	r1, r5
   3d730:	mov	r0, r4
   3d734:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3d738:	ldr	r3, [r4, #20]
   3d73c:	add	r2, r3, #1
   3d740:	b	3d620 <flatcc_json_printer_bool_vector_field@@Base+0x1b8>
   3d744:	movw	r3, #28992	; 0x7140
   3d748:	movt	r3, #4
   3d74c:	add	ip, r3, #1776	; 0x6f0
   3d750:	ldr	r0, [r3, #1776]	; 0x6f0
   3d754:	mov	r1, #5
   3d758:	ldrh	r3, [ip, #4]
   3d75c:	str	r0, [r2]
   3d760:	strh	r3, [r2, #4]
   3d764:	b	3d570 <flatcc_json_printer_bool_vector_field@@Base+0x108>
   3d768:	mov	r2, r5
   3d76c:	mov	r1, #32
   3d770:	bl	1459c <memset@plt>
   3d774:	ldr	r3, [r4, #20]
   3d778:	add	r3, r3, r5
   3d77c:	add	r2, r3, #1
   3d780:	b	3d620 <flatcc_json_printer_bool_vector_field@@Base+0x1b8>
   3d784:	andeq	r7, r4, r8, lsr #16
   3d788:	andeq	r7, r4, r0, lsr r8

0003d78c <flatcc_json_printer_float_vector_field@@Base>:
   3d78c:	ldr	ip, [r1, #8]
   3d790:	add	r2, r2, #2
   3d794:	lsl	r2, r2, #1
   3d798:	cmp	ip, r2
   3d79c:	bxle	lr
   3d7a0:	ldr	ip, [r1, #4]
   3d7a4:	ldrh	r2, [ip, r2]
   3d7a8:	cmp	r2, #0
   3d7ac:	bxeq	lr
   3d7b0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3d7b4:	ldr	ip, [r1]
   3d7b8:	strd	r6, [sp, #8]
   3d7bc:	str	lr, [sp, #28]
   3d7c0:	strd	r8, [sp, #16]
   3d7c4:	str	sl, [sp, #24]
   3d7c8:	adds	lr, ip, r2
   3d7cc:	beq	3d96c <flatcc_json_printer_float_vector_field@@Base+0x1e0>
   3d7d0:	ldr	r4, [r1, #16]
   3d7d4:	add	r5, r4, #1
   3d7d8:	cmp	r4, #0
   3d7dc:	str	r5, [r1, #16]
   3d7e0:	beq	3d7f8 <flatcc_json_printer_float_vector_field@@Base+0x6c>
   3d7e4:	ldr	r1, [r0, #20]
   3d7e8:	mov	r4, #44	; 0x2c
   3d7ec:	add	r5, r1, #1
   3d7f0:	str	r5, [r0, #20]
   3d7f4:	strb	r4, [r1]
   3d7f8:	mov	r1, r3
   3d7fc:	ldr	r3, [ip, r2]
   3d800:	mov	r4, r0
   3d804:	ldr	r2, [sp, #32]
   3d808:	add	r5, lr, r3
   3d80c:	ldr	r7, [lr, r3]
   3d810:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   3d814:	ldr	r2, [r4, #20]
   3d818:	mov	r1, #91	; 0x5b
   3d81c:	ldr	r3, [r4, #32]
   3d820:	cmp	r7, #0
   3d824:	add	r0, r2, #1
   3d828:	add	r3, r3, #1
   3d82c:	str	r0, [r4, #20]
   3d830:	str	r3, [r4, #32]
   3d834:	strb	r1, [r2]
   3d838:	beq	3d94c <flatcc_json_printer_float_vector_field@@Base+0x1c0>
   3d83c:	ldrb	r1, [r4, #25]
   3d840:	ldr	r3, [r4, #20]
   3d844:	cmp	r1, #0
   3d848:	bne	3d984 <flatcc_json_printer_float_vector_field@@Base+0x1f8>
   3d84c:	ldr	r2, [r4, #16]
   3d850:	cmp	r2, r3
   3d854:	bhi	3d868 <flatcc_json_printer_float_vector_field@@Base+0xdc>
   3d858:	mov	r0, r4
   3d85c:	ldr	r3, [r4, #44]	; 0x2c
   3d860:	blx	r3
   3d864:	ldr	r3, [r4, #20]
   3d868:	mov	r0, r3
   3d86c:	add	r6, r5, #8
   3d870:	vldr	s0, [r5, #4]
   3d874:	sub	r5, r7, #2
   3d878:	vcvt.f64.f32	d0, s0
   3d87c:	bl	34820 <flatcc_json_parser_struct_as_root@@Base+0x1404>
   3d880:	ldr	r3, [r4, #20]
   3d884:	cmp	r7, #1
   3d888:	add	r0, r3, r0
   3d88c:	str	r0, [r4, #20]
   3d890:	beq	3d950 <flatcc_json_printer_float_vector_field@@Base+0x1c4>
   3d894:	mov	r7, #44	; 0x2c
   3d898:	mov	r8, #10
   3d89c:	b	3d8e8 <flatcc_json_printer_float_vector_field@@Base+0x15c>
   3d8a0:	ldr	r3, [r4, #16]
   3d8a4:	mov	r0, r4
   3d8a8:	ldr	r2, [r4, #20]
   3d8ac:	cmp	r2, r3
   3d8b0:	bcc	3d8c0 <flatcc_json_printer_float_vector_field@@Base+0x134>
   3d8b4:	ldr	r3, [r4, #44]	; 0x2c
   3d8b8:	blx	r3
   3d8bc:	ldr	r2, [r4, #20]
   3d8c0:	mov	r0, r2
   3d8c4:	sub	r5, r5, #1
   3d8c8:	vldmia	r6!, {s0}
   3d8cc:	vcvt.f64.f32	d0, s0
   3d8d0:	bl	34820 <flatcc_json_parser_struct_as_root@@Base+0x1404>
   3d8d4:	ldr	r3, [r4, #20]
   3d8d8:	cmn	r5, #1
   3d8dc:	add	r0, r3, r0
   3d8e0:	str	r0, [r4, #20]
   3d8e4:	beq	3d950 <flatcc_json_printer_float_vector_field@@Base+0x1c4>
   3d8e8:	add	r3, r0, #1
   3d8ec:	str	r3, [r4, #20]
   3d8f0:	strb	r7, [r0]
   3d8f4:	ldrb	r1, [r4, #25]
   3d8f8:	cmp	r1, #0
   3d8fc:	beq	3d8a0 <flatcc_json_printer_float_vector_field@@Base+0x114>
   3d900:	ldr	r3, [r4, #20]
   3d904:	mov	r1, #32
   3d908:	mov	r0, r4
   3d90c:	add	r2, r3, #1
   3d910:	str	r2, [r4, #20]
   3d914:	strb	r8, [r3]
   3d918:	ldrb	r2, [r4, #25]
   3d91c:	ldr	lr, [r4, #16]
   3d920:	ldr	r9, [r4, #32]
   3d924:	ldr	r3, [r4, #20]
   3d928:	mul	r9, r9, r2
   3d92c:	add	ip, r3, r9
   3d930:	mov	r2, r9
   3d934:	cmp	lr, ip
   3d938:	bcs	3d9a4 <flatcc_json_printer_float_vector_field@@Base+0x218>
   3d93c:	mov	r1, r9
   3d940:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3d944:	ldr	r2, [r4, #20]
   3d948:	b	3d8c0 <flatcc_json_printer_float_vector_field@@Base+0x134>
   3d94c:	ldr	r0, [r4, #20]
   3d950:	add	r3, r0, #1
   3d954:	ldrb	r2, [r4, #25]
   3d958:	cmp	r2, #0
   3d95c:	bne	3d9bc <flatcc_json_printer_float_vector_field@@Base+0x230>
   3d960:	mov	r2, #93	; 0x5d
   3d964:	str	r3, [r4, #20]
   3d968:	strb	r2, [r0]
   3d96c:	ldrd	r4, [sp]
   3d970:	ldrd	r6, [sp, #8]
   3d974:	ldrd	r8, [sp, #16]
   3d978:	ldr	sl, [sp, #24]
   3d97c:	add	sp, sp, #28
   3d980:	pop	{pc}		; (ldr pc, [sp], #4)
   3d984:	add	r1, r3, #1
   3d988:	mov	r2, #10
   3d98c:	mov	r0, r4
   3d990:	str	r1, [r4, #20]
   3d994:	strb	r2, [r3]
   3d998:	bl	34188 <flatcc_json_parser_struct_as_root@@Base+0xd6c>
   3d99c:	ldr	r3, [r4, #20]
   3d9a0:	b	3d868 <flatcc_json_printer_float_vector_field@@Base+0xdc>
   3d9a4:	mov	r0, r3
   3d9a8:	bl	1459c <memset@plt>
   3d9ac:	ldr	r2, [r4, #20]
   3d9b0:	add	r2, r2, r9
   3d9b4:	str	r2, [r4, #20]
   3d9b8:	b	3d8c0 <flatcc_json_printer_float_vector_field@@Base+0x134>
   3d9bc:	mov	r2, #10
   3d9c0:	str	r3, [r4, #20]
   3d9c4:	strb	r2, [r0]
   3d9c8:	ldrb	r5, [r4, #25]
   3d9cc:	ldr	r3, [r4, #32]
   3d9d0:	ldr	r2, [r4, #16]
   3d9d4:	ldr	r0, [r4, #20]
   3d9d8:	sub	r3, r3, #1
   3d9dc:	mul	r5, r3, r5
   3d9e0:	str	r3, [r4, #32]
   3d9e4:	add	r3, r0, r5
   3d9e8:	cmp	r2, r3
   3d9ec:	bcs	3da08 <flatcc_json_printer_float_vector_field@@Base+0x27c>
   3d9f0:	mov	r0, r4
   3d9f4:	mov	r1, r5
   3d9f8:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3d9fc:	ldr	r0, [r4, #20]
   3da00:	add	r3, r0, #1
   3da04:	b	3d960 <flatcc_json_printer_float_vector_field@@Base+0x1d4>
   3da08:	mov	r2, r5
   3da0c:	mov	r1, #32
   3da10:	bl	1459c <memset@plt>
   3da14:	ldr	r0, [r4, #20]
   3da18:	add	r0, r0, r5
   3da1c:	add	r3, r0, #1
   3da20:	b	3d960 <flatcc_json_printer_float_vector_field@@Base+0x1d4>

0003da24 <flatcc_json_printer_double_vector_field@@Base>:
   3da24:	ldr	ip, [r1, #8]
   3da28:	add	r2, r2, #2
   3da2c:	lsl	r2, r2, #1
   3da30:	cmp	ip, r2
   3da34:	bxle	lr
   3da38:	ldr	ip, [r1, #4]
   3da3c:	ldrh	r2, [ip, r2]
   3da40:	cmp	r2, #0
   3da44:	bxeq	lr
   3da48:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3da4c:	ldr	ip, [r1]
   3da50:	strd	r6, [sp, #8]
   3da54:	str	lr, [sp, #28]
   3da58:	strd	r8, [sp, #16]
   3da5c:	str	sl, [sp, #24]
   3da60:	adds	lr, ip, r2
   3da64:	beq	3dbfc <flatcc_json_printer_double_vector_field@@Base+0x1d8>
   3da68:	ldr	r4, [r1, #16]
   3da6c:	add	r5, r4, #1
   3da70:	cmp	r4, #0
   3da74:	str	r5, [r1, #16]
   3da78:	beq	3da90 <flatcc_json_printer_double_vector_field@@Base+0x6c>
   3da7c:	ldr	r1, [r0, #20]
   3da80:	mov	r4, #44	; 0x2c
   3da84:	add	r5, r1, #1
   3da88:	str	r5, [r0, #20]
   3da8c:	strb	r4, [r1]
   3da90:	mov	r1, r3
   3da94:	ldr	r3, [ip, r2]
   3da98:	mov	r4, r0
   3da9c:	ldr	r2, [sp, #32]
   3daa0:	add	r5, lr, r3
   3daa4:	ldr	r7, [lr, r3]
   3daa8:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   3daac:	ldr	r2, [r4, #20]
   3dab0:	mov	r1, #91	; 0x5b
   3dab4:	ldr	r3, [r4, #32]
   3dab8:	cmp	r7, #0
   3dabc:	add	r0, r2, #1
   3dac0:	add	r3, r3, #1
   3dac4:	str	r0, [r4, #20]
   3dac8:	str	r3, [r4, #32]
   3dacc:	strb	r1, [r2]
   3dad0:	beq	3dbdc <flatcc_json_printer_double_vector_field@@Base+0x1b8>
   3dad4:	ldrb	r1, [r4, #25]
   3dad8:	ldr	r3, [r4, #20]
   3dadc:	cmp	r1, #0
   3dae0:	bne	3dc14 <flatcc_json_printer_double_vector_field@@Base+0x1f0>
   3dae4:	ldr	r2, [r4, #16]
   3dae8:	cmp	r2, r3
   3daec:	bhi	3db00 <flatcc_json_printer_double_vector_field@@Base+0xdc>
   3daf0:	mov	r0, r4
   3daf4:	ldr	r3, [r4, #44]	; 0x2c
   3daf8:	blx	r3
   3dafc:	ldr	r3, [r4, #20]
   3db00:	mov	r0, r3
   3db04:	add	r6, r5, #12
   3db08:	vldr	d0, [r5, #4]
   3db0c:	sub	r5, r7, #2
   3db10:	bl	34820 <flatcc_json_parser_struct_as_root@@Base+0x1404>
   3db14:	ldr	r3, [r4, #20]
   3db18:	cmp	r7, #1
   3db1c:	add	r0, r3, r0
   3db20:	str	r0, [r4, #20]
   3db24:	beq	3dbe0 <flatcc_json_printer_double_vector_field@@Base+0x1bc>
   3db28:	mov	r7, #44	; 0x2c
   3db2c:	mov	r8, #10
   3db30:	b	3db78 <flatcc_json_printer_double_vector_field@@Base+0x154>
   3db34:	ldr	r3, [r4, #16]
   3db38:	mov	r0, r4
   3db3c:	ldr	r2, [r4, #20]
   3db40:	cmp	r2, r3
   3db44:	bcc	3db54 <flatcc_json_printer_double_vector_field@@Base+0x130>
   3db48:	ldr	r3, [r4, #44]	; 0x2c
   3db4c:	blx	r3
   3db50:	ldr	r2, [r4, #20]
   3db54:	mov	r0, r2
   3db58:	sub	r5, r5, #1
   3db5c:	vldmia	r6!, {d0}
   3db60:	bl	34820 <flatcc_json_parser_struct_as_root@@Base+0x1404>
   3db64:	ldr	r3, [r4, #20]
   3db68:	cmn	r5, #1
   3db6c:	add	r0, r3, r0
   3db70:	str	r0, [r4, #20]
   3db74:	beq	3dbe0 <flatcc_json_printer_double_vector_field@@Base+0x1bc>
   3db78:	add	r3, r0, #1
   3db7c:	str	r3, [r4, #20]
   3db80:	strb	r7, [r0]
   3db84:	ldrb	r1, [r4, #25]
   3db88:	cmp	r1, #0
   3db8c:	beq	3db34 <flatcc_json_printer_double_vector_field@@Base+0x110>
   3db90:	ldr	r3, [r4, #20]
   3db94:	mov	r1, #32
   3db98:	mov	r0, r4
   3db9c:	add	r2, r3, #1
   3dba0:	str	r2, [r4, #20]
   3dba4:	strb	r8, [r3]
   3dba8:	ldrb	r2, [r4, #25]
   3dbac:	ldr	lr, [r4, #16]
   3dbb0:	ldr	r9, [r4, #32]
   3dbb4:	ldr	r3, [r4, #20]
   3dbb8:	mul	r9, r9, r2
   3dbbc:	add	ip, r3, r9
   3dbc0:	mov	r2, r9
   3dbc4:	cmp	lr, ip
   3dbc8:	bcs	3dc34 <flatcc_json_printer_double_vector_field@@Base+0x210>
   3dbcc:	mov	r1, r9
   3dbd0:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3dbd4:	ldr	r2, [r4, #20]
   3dbd8:	b	3db54 <flatcc_json_printer_double_vector_field@@Base+0x130>
   3dbdc:	ldr	r0, [r4, #20]
   3dbe0:	add	r3, r0, #1
   3dbe4:	ldrb	r2, [r4, #25]
   3dbe8:	cmp	r2, #0
   3dbec:	bne	3dc4c <flatcc_json_printer_double_vector_field@@Base+0x228>
   3dbf0:	mov	r2, #93	; 0x5d
   3dbf4:	str	r3, [r4, #20]
   3dbf8:	strb	r2, [r0]
   3dbfc:	ldrd	r4, [sp]
   3dc00:	ldrd	r6, [sp, #8]
   3dc04:	ldrd	r8, [sp, #16]
   3dc08:	ldr	sl, [sp, #24]
   3dc0c:	add	sp, sp, #28
   3dc10:	pop	{pc}		; (ldr pc, [sp], #4)
   3dc14:	add	r1, r3, #1
   3dc18:	mov	r2, #10
   3dc1c:	mov	r0, r4
   3dc20:	str	r1, [r4, #20]
   3dc24:	strb	r2, [r3]
   3dc28:	bl	34188 <flatcc_json_parser_struct_as_root@@Base+0xd6c>
   3dc2c:	ldr	r3, [r4, #20]
   3dc30:	b	3db00 <flatcc_json_printer_double_vector_field@@Base+0xdc>
   3dc34:	mov	r0, r3
   3dc38:	bl	1459c <memset@plt>
   3dc3c:	ldr	r2, [r4, #20]
   3dc40:	add	r2, r2, r9
   3dc44:	str	r2, [r4, #20]
   3dc48:	b	3db54 <flatcc_json_printer_double_vector_field@@Base+0x130>
   3dc4c:	mov	r2, #10
   3dc50:	str	r3, [r4, #20]
   3dc54:	strb	r2, [r0]
   3dc58:	ldrb	r5, [r4, #25]
   3dc5c:	ldr	r3, [r4, #32]
   3dc60:	ldr	r2, [r4, #16]
   3dc64:	ldr	r0, [r4, #20]
   3dc68:	sub	r3, r3, #1
   3dc6c:	mul	r5, r3, r5
   3dc70:	str	r3, [r4, #32]
   3dc74:	add	r3, r0, r5
   3dc78:	cmp	r2, r3
   3dc7c:	bcs	3dc98 <flatcc_json_printer_double_vector_field@@Base+0x274>
   3dc80:	mov	r0, r4
   3dc84:	mov	r1, r5
   3dc88:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3dc8c:	ldr	r0, [r4, #20]
   3dc90:	add	r3, r0, #1
   3dc94:	b	3dbf0 <flatcc_json_printer_double_vector_field@@Base+0x1cc>
   3dc98:	mov	r2, r5
   3dc9c:	mov	r1, #32
   3dca0:	bl	1459c <memset@plt>
   3dca4:	ldr	r0, [r4, #20]
   3dca8:	add	r0, r0, r5
   3dcac:	add	r3, r0, #1
   3dcb0:	b	3dbf0 <flatcc_json_printer_double_vector_field@@Base+0x1cc>

0003dcb4 <flatcc_json_printer_uint8_enum_vector_field@@Base>:
   3dcb4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3dcb8:	strd	r6, [sp, #8]
   3dcbc:	strd	r8, [sp, #16]
   3dcc0:	str	sl, [sp, #24]
   3dcc4:	str	lr, [sp, #28]
   3dcc8:	ldrb	r8, [r0, #27]
   3dccc:	ldr	r7, [sp, #32]
   3dcd0:	ldr	r6, [sp, #36]	; 0x24
   3dcd4:	cmp	r8, #0
   3dcd8:	bne	3dea4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1f0>
   3dcdc:	mov	r5, r3
   3dce0:	ldr	r3, [r1, #8]
   3dce4:	add	r2, r2, #2
   3dce8:	lsl	r2, r2, #1
   3dcec:	mov	lr, r1
   3dcf0:	cmp	r3, r2
   3dcf4:	ble	3de8c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1d8>
   3dcf8:	ldr	r3, [r1, #4]
   3dcfc:	ldrh	r2, [r3, r2]
   3dd00:	cmp	r2, #0
   3dd04:	beq	3de8c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1d8>
   3dd08:	ldr	r3, [r1]
   3dd0c:	adds	ip, r3, r2
   3dd10:	beq	3de8c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1d8>
   3dd14:	ldr	r1, [r1, #16]
   3dd18:	mov	r4, r0
   3dd1c:	add	r0, r1, #1
   3dd20:	cmp	r1, #0
   3dd24:	str	r0, [lr, #16]
   3dd28:	beq	3dd40 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x8c>
   3dd2c:	ldr	r1, [r4, #20]
   3dd30:	mov	r0, #44	; 0x2c
   3dd34:	add	lr, r1, #1
   3dd38:	str	lr, [r4, #20]
   3dd3c:	strb	r0, [r1]
   3dd40:	ldr	r3, [r3, r2]
   3dd44:	mov	r1, r5
   3dd48:	mov	r2, r7
   3dd4c:	mov	r0, r4
   3dd50:	add	r7, ip, r3
   3dd54:	ldr	r8, [ip, r3]
   3dd58:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   3dd5c:	ldr	r2, [r4, #20]
   3dd60:	mov	r1, #91	; 0x5b
   3dd64:	ldr	r3, [r4, #32]
   3dd68:	cmp	r8, #0
   3dd6c:	add	r0, r2, #1
   3dd70:	add	r3, r3, #1
   3dd74:	str	r0, [r4, #20]
   3dd78:	str	r3, [r4, #32]
   3dd7c:	strb	r1, [r2]
   3dd80:	beq	3de6c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1b8>
   3dd84:	ldrb	r1, [r4, #25]
   3dd88:	ldr	r3, [r4, #20]
   3dd8c:	cmp	r1, #0
   3dd90:	bne	3df24 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x270>
   3dd94:	ldr	r2, [r4, #16]
   3dd98:	cmp	r2, r3
   3dd9c:	bhi	3ddac <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf8>
   3dda0:	mov	r0, r4
   3dda4:	ldr	r3, [r4, #44]	; 0x2c
   3dda8:	blx	r3
   3ddac:	ldrb	r1, [r7, #4]
   3ddb0:	mov	r0, r4
   3ddb4:	add	r5, r7, #5
   3ddb8:	blx	r6
   3ddbc:	cmp	r8, #1
   3ddc0:	beq	3de6c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1b8>
   3ddc4:	add	r3, r8, #4
   3ddc8:	mov	r9, #10
   3ddcc:	mov	r8, #44	; 0x2c
   3ddd0:	add	r7, r7, r3
   3ddd4:	b	3de08 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x154>
   3ddd8:	ldr	r3, [r4, #16]
   3dddc:	mov	r0, r4
   3dde0:	ldr	r2, [r4, #20]
   3dde4:	cmp	r2, r3
   3dde8:	bcc	3ddf4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x140>
   3ddec:	ldr	r3, [r4, #44]	; 0x2c
   3ddf0:	blx	r3
   3ddf4:	ldrb	r1, [r5], #1
   3ddf8:	mov	r0, r4
   3ddfc:	blx	r6
   3de00:	cmp	r5, r7
   3de04:	beq	3de6c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1b8>
   3de08:	ldr	r3, [r4, #20]
   3de0c:	add	r2, r3, #1
   3de10:	str	r2, [r4, #20]
   3de14:	strb	r8, [r3]
   3de18:	ldrb	r1, [r4, #25]
   3de1c:	cmp	r1, #0
   3de20:	beq	3ddd8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x124>
   3de24:	ldr	r3, [r4, #20]
   3de28:	mov	r1, #32
   3de2c:	mov	r0, r4
   3de30:	add	r2, r3, #1
   3de34:	str	r2, [r4, #20]
   3de38:	strb	r9, [r3]
   3de3c:	ldrb	r2, [r4, #25]
   3de40:	ldr	lr, [r4, #16]
   3de44:	ldr	sl, [r4, #32]
   3de48:	ldr	r3, [r4, #20]
   3de4c:	mul	sl, sl, r2
   3de50:	add	ip, r3, sl
   3de54:	mov	r2, sl
   3de58:	cmp	lr, ip
   3de5c:	bcs	3dec0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x20c>
   3de60:	mov	r1, sl
   3de64:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3de68:	b	3ddf4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x140>
   3de6c:	ldrb	r2, [r4, #25]
   3de70:	ldr	r3, [r4, #20]
   3de74:	cmp	r2, #0
   3de78:	add	r2, r3, #1
   3de7c:	bne	3ded8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x224>
   3de80:	mov	r1, #93	; 0x5d
   3de84:	str	r2, [r4, #20]
   3de88:	strb	r1, [r3]
   3de8c:	ldrd	r4, [sp]
   3de90:	ldrd	r6, [sp, #8]
   3de94:	ldrd	r8, [sp, #16]
   3de98:	ldr	sl, [sp, #24]
   3de9c:	add	sp, sp, #28
   3dea0:	pop	{pc}		; (ldr pc, [sp], #4)
   3dea4:	ldrd	r4, [sp]
   3dea8:	ldrd	r6, [sp, #8]
   3deac:	ldrd	r8, [sp, #16]
   3deb0:	ldr	sl, [sp, #24]
   3deb4:	ldr	lr, [sp, #28]
   3deb8:	add	sp, sp, #32
   3debc:	b	3bbc4 <flatcc_json_printer_uint8_vector_field@@Base>
   3dec0:	mov	r0, r3
   3dec4:	bl	1459c <memset@plt>
   3dec8:	ldr	r3, [r4, #20]
   3decc:	add	sl, r3, sl
   3ded0:	str	sl, [r4, #20]
   3ded4:	b	3ddf4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x140>
   3ded8:	mov	r1, #10
   3dedc:	str	r2, [r4, #20]
   3dee0:	strb	r1, [r3]
   3dee4:	ldrb	r3, [r4, #25]
   3dee8:	ldr	r2, [r4, #32]
   3deec:	ldr	r1, [r4, #16]
   3def0:	ldr	r0, [r4, #20]
   3def4:	sub	r2, r2, #1
   3def8:	mul	r5, r2, r3
   3defc:	str	r2, [r4, #32]
   3df00:	add	r3, r0, r5
   3df04:	cmp	r1, r3
   3df08:	bcs	3df40 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x28c>
   3df0c:	mov	r1, r5
   3df10:	mov	r0, r4
   3df14:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3df18:	ldr	r3, [r4, #20]
   3df1c:	add	r2, r3, #1
   3df20:	b	3de80 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1cc>
   3df24:	add	r1, r3, #1
   3df28:	mov	r2, #10
   3df2c:	mov	r0, r4
   3df30:	str	r1, [r4, #20]
   3df34:	strb	r2, [r3]
   3df38:	bl	34188 <flatcc_json_parser_struct_as_root@@Base+0xd6c>
   3df3c:	b	3ddac <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf8>
   3df40:	mov	r2, r5
   3df44:	mov	r1, #32
   3df48:	bl	1459c <memset@plt>
   3df4c:	ldr	r3, [r4, #20]
   3df50:	add	r3, r3, r5
   3df54:	add	r2, r3, #1
   3df58:	b	3de80 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1cc>

0003df5c <flatcc_json_printer_utype_enum_vector_field@@Base>:
   3df5c:	b	3dcb4 <flatcc_json_printer_uint8_enum_vector_field@@Base>

0003df60 <flatcc_json_printer_uint16_enum_vector_field@@Base>:
   3df60:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3df64:	strd	r6, [sp, #8]
   3df68:	strd	r8, [sp, #16]
   3df6c:	str	sl, [sp, #24]
   3df70:	str	lr, [sp, #28]
   3df74:	ldrb	r8, [r0, #27]
   3df78:	ldrd	r6, [sp, #32]
   3df7c:	cmp	r8, #0
   3df80:	bne	3e14c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1ec>
   3df84:	mov	r5, r3
   3df88:	ldr	r3, [r1, #8]
   3df8c:	add	r2, r2, #2
   3df90:	lsl	r2, r2, #1
   3df94:	mov	lr, r1
   3df98:	cmp	r3, r2
   3df9c:	ble	3e134 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1d4>
   3dfa0:	ldr	r3, [r1, #4]
   3dfa4:	ldrh	r2, [r3, r2]
   3dfa8:	cmp	r2, #0
   3dfac:	beq	3e134 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1d4>
   3dfb0:	ldr	r3, [r1]
   3dfb4:	adds	ip, r3, r2
   3dfb8:	beq	3e134 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1d4>
   3dfbc:	ldr	r1, [r1, #16]
   3dfc0:	mov	r4, r0
   3dfc4:	add	r0, r1, #1
   3dfc8:	cmp	r1, #0
   3dfcc:	str	r0, [lr, #16]
   3dfd0:	beq	3dfe8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x88>
   3dfd4:	ldr	r1, [r4, #20]
   3dfd8:	mov	r0, #44	; 0x2c
   3dfdc:	add	lr, r1, #1
   3dfe0:	str	lr, [r4, #20]
   3dfe4:	strb	r0, [r1]
   3dfe8:	ldr	r3, [r3, r2]
   3dfec:	mov	r1, r5
   3dff0:	mov	r2, r6
   3dff4:	mov	r0, r4
   3dff8:	add	r6, ip, r3
   3dffc:	ldr	r5, [ip, r3]
   3e000:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   3e004:	ldr	r2, [r4, #20]
   3e008:	mov	r1, #91	; 0x5b
   3e00c:	ldr	r3, [r4, #32]
   3e010:	cmp	r5, #0
   3e014:	add	r0, r2, #1
   3e018:	add	r3, r3, #1
   3e01c:	str	r0, [r4, #20]
   3e020:	str	r3, [r4, #32]
   3e024:	strb	r1, [r2]
   3e028:	beq	3e114 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1b4>
   3e02c:	ldrb	r1, [r4, #25]
   3e030:	ldr	r3, [r4, #20]
   3e034:	cmp	r1, #0
   3e038:	bne	3e1cc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x26c>
   3e03c:	ldr	r2, [r4, #16]
   3e040:	cmp	r2, r3
   3e044:	bhi	3e054 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xf4>
   3e048:	mov	r0, r4
   3e04c:	ldr	r3, [r4, #44]	; 0x2c
   3e050:	blx	r3
   3e054:	ldrh	r1, [r6, #4]
   3e058:	mov	r0, r4
   3e05c:	add	r6, r6, #6
   3e060:	blx	r7
   3e064:	cmp	r5, #1
   3e068:	sub	r5, r5, #2
   3e06c:	beq	3e114 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1b4>
   3e070:	mov	r8, #44	; 0x2c
   3e074:	mov	r9, #10
   3e078:	b	3e0b0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x150>
   3e07c:	ldr	r3, [r4, #16]
   3e080:	mov	r0, r4
   3e084:	ldr	r2, [r4, #20]
   3e088:	cmp	r2, r3
   3e08c:	bcc	3e098 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x138>
   3e090:	ldr	r3, [r4, #44]	; 0x2c
   3e094:	blx	r3
   3e098:	sub	r5, r5, #1
   3e09c:	ldrh	r1, [r6], #2
   3e0a0:	mov	r0, r4
   3e0a4:	blx	r7
   3e0a8:	cmn	r5, #1
   3e0ac:	beq	3e114 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1b4>
   3e0b0:	ldr	r3, [r4, #20]
   3e0b4:	add	r2, r3, #1
   3e0b8:	str	r2, [r4, #20]
   3e0bc:	strb	r8, [r3]
   3e0c0:	ldrb	r1, [r4, #25]
   3e0c4:	cmp	r1, #0
   3e0c8:	beq	3e07c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x11c>
   3e0cc:	ldr	r3, [r4, #20]
   3e0d0:	mov	r1, #32
   3e0d4:	mov	r0, r4
   3e0d8:	add	r2, r3, #1
   3e0dc:	str	r2, [r4, #20]
   3e0e0:	strb	r9, [r3]
   3e0e4:	ldrb	r2, [r4, #25]
   3e0e8:	ldr	lr, [r4, #16]
   3e0ec:	ldr	sl, [r4, #32]
   3e0f0:	ldr	r3, [r4, #20]
   3e0f4:	mul	sl, sl, r2
   3e0f8:	add	ip, r3, sl
   3e0fc:	mov	r2, sl
   3e100:	cmp	lr, ip
   3e104:	bcs	3e168 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x208>
   3e108:	mov	r1, sl
   3e10c:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3e110:	b	3e098 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x138>
   3e114:	ldrb	r2, [r4, #25]
   3e118:	ldr	r3, [r4, #20]
   3e11c:	cmp	r2, #0
   3e120:	add	r2, r3, #1
   3e124:	bne	3e180 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x220>
   3e128:	mov	r1, #93	; 0x5d
   3e12c:	str	r2, [r4, #20]
   3e130:	strb	r1, [r3]
   3e134:	ldrd	r4, [sp]
   3e138:	ldrd	r6, [sp, #8]
   3e13c:	ldrd	r8, [sp, #16]
   3e140:	ldr	sl, [sp, #24]
   3e144:	add	sp, sp, #28
   3e148:	pop	{pc}		; (ldr pc, [sp], #4)
   3e14c:	ldrd	r4, [sp]
   3e150:	ldrd	r6, [sp, #8]
   3e154:	ldrd	r8, [sp, #16]
   3e158:	ldr	sl, [sp, #24]
   3e15c:	ldr	lr, [sp, #28]
   3e160:	add	sp, sp, #32
   3e164:	b	3bef4 <flatcc_json_printer_uint16_vector_field@@Base>
   3e168:	mov	r0, r3
   3e16c:	bl	1459c <memset@plt>
   3e170:	ldr	r3, [r4, #20]
   3e174:	add	sl, r3, sl
   3e178:	str	sl, [r4, #20]
   3e17c:	b	3e098 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x138>
   3e180:	mov	r1, #10
   3e184:	str	r2, [r4, #20]
   3e188:	strb	r1, [r3]
   3e18c:	ldrb	r3, [r4, #25]
   3e190:	ldr	r2, [r4, #32]
   3e194:	ldr	r1, [r4, #16]
   3e198:	ldr	r0, [r4, #20]
   3e19c:	sub	r2, r2, #1
   3e1a0:	mul	r5, r2, r3
   3e1a4:	str	r2, [r4, #32]
   3e1a8:	add	r3, r0, r5
   3e1ac:	cmp	r1, r3
   3e1b0:	bcs	3e1e8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x288>
   3e1b4:	mov	r1, r5
   3e1b8:	mov	r0, r4
   3e1bc:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3e1c0:	ldr	r3, [r4, #20]
   3e1c4:	add	r2, r3, #1
   3e1c8:	b	3e128 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1c8>
   3e1cc:	add	r1, r3, #1
   3e1d0:	mov	r2, #10
   3e1d4:	mov	r0, r4
   3e1d8:	str	r1, [r4, #20]
   3e1dc:	strb	r2, [r3]
   3e1e0:	bl	34188 <flatcc_json_parser_struct_as_root@@Base+0xd6c>
   3e1e4:	b	3e054 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xf4>
   3e1e8:	mov	r2, r5
   3e1ec:	mov	r1, #32
   3e1f0:	bl	1459c <memset@plt>
   3e1f4:	ldr	r3, [r4, #20]
   3e1f8:	add	r3, r3, r5
   3e1fc:	add	r2, r3, #1
   3e200:	b	3e128 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1c8>

0003e204 <flatcc_json_printer_uint32_enum_vector_field@@Base>:
   3e204:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3e208:	strd	r6, [sp, #8]
   3e20c:	strd	r8, [sp, #16]
   3e210:	str	sl, [sp, #24]
   3e214:	str	lr, [sp, #28]
   3e218:	ldrb	r8, [r0, #27]
   3e21c:	ldrd	r6, [sp, #32]
   3e220:	cmp	r8, #0
   3e224:	bne	3e3f0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1ec>
   3e228:	mov	r5, r3
   3e22c:	ldr	r3, [r1, #8]
   3e230:	add	r2, r2, #2
   3e234:	lsl	r2, r2, #1
   3e238:	mov	lr, r1
   3e23c:	cmp	r3, r2
   3e240:	ble	3e3d8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1d4>
   3e244:	ldr	r3, [r1, #4]
   3e248:	ldrh	r2, [r3, r2]
   3e24c:	cmp	r2, #0
   3e250:	beq	3e3d8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1d4>
   3e254:	ldr	r3, [r1]
   3e258:	adds	ip, r3, r2
   3e25c:	beq	3e3d8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1d4>
   3e260:	ldr	r1, [r1, #16]
   3e264:	mov	r4, r0
   3e268:	add	r0, r1, #1
   3e26c:	cmp	r1, #0
   3e270:	str	r0, [lr, #16]
   3e274:	beq	3e28c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x88>
   3e278:	ldr	r1, [r4, #20]
   3e27c:	mov	r0, #44	; 0x2c
   3e280:	add	lr, r1, #1
   3e284:	str	lr, [r4, #20]
   3e288:	strb	r0, [r1]
   3e28c:	ldr	r3, [r3, r2]
   3e290:	mov	r1, r5
   3e294:	mov	r2, r6
   3e298:	mov	r0, r4
   3e29c:	add	r6, ip, r3
   3e2a0:	ldr	r5, [ip, r3]
   3e2a4:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   3e2a8:	ldr	r2, [r4, #20]
   3e2ac:	mov	r1, #91	; 0x5b
   3e2b0:	ldr	r3, [r4, #32]
   3e2b4:	cmp	r5, #0
   3e2b8:	add	r0, r2, #1
   3e2bc:	add	r3, r3, #1
   3e2c0:	str	r0, [r4, #20]
   3e2c4:	str	r3, [r4, #32]
   3e2c8:	strb	r1, [r2]
   3e2cc:	beq	3e3b8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1b4>
   3e2d0:	ldrb	r1, [r4, #25]
   3e2d4:	ldr	r3, [r4, #20]
   3e2d8:	cmp	r1, #0
   3e2dc:	bne	3e470 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x26c>
   3e2e0:	ldr	r2, [r4, #16]
   3e2e4:	cmp	r2, r3
   3e2e8:	bhi	3e2f8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf4>
   3e2ec:	mov	r0, r4
   3e2f0:	ldr	r3, [r4, #44]	; 0x2c
   3e2f4:	blx	r3
   3e2f8:	mov	r0, r4
   3e2fc:	ldr	r1, [r6, #4]
   3e300:	add	r6, r6, #8
   3e304:	blx	r7
   3e308:	cmp	r5, #1
   3e30c:	sub	r5, r5, #2
   3e310:	beq	3e3b8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1b4>
   3e314:	mov	r8, #44	; 0x2c
   3e318:	mov	r9, #10
   3e31c:	b	3e354 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x150>
   3e320:	ldr	r3, [r4, #16]
   3e324:	mov	r0, r4
   3e328:	ldr	r2, [r4, #20]
   3e32c:	cmp	r2, r3
   3e330:	bcc	3e33c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x138>
   3e334:	ldr	r3, [r4, #44]	; 0x2c
   3e338:	blx	r3
   3e33c:	sub	r5, r5, #1
   3e340:	mov	r0, r4
   3e344:	ldr	r1, [r6], #4
   3e348:	blx	r7
   3e34c:	cmn	r5, #1
   3e350:	beq	3e3b8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1b4>
   3e354:	ldr	r3, [r4, #20]
   3e358:	add	r2, r3, #1
   3e35c:	str	r2, [r4, #20]
   3e360:	strb	r8, [r3]
   3e364:	ldrb	r1, [r4, #25]
   3e368:	cmp	r1, #0
   3e36c:	beq	3e320 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x11c>
   3e370:	ldr	r3, [r4, #20]
   3e374:	mov	r1, #32
   3e378:	mov	r0, r4
   3e37c:	add	r2, r3, #1
   3e380:	str	r2, [r4, #20]
   3e384:	strb	r9, [r3]
   3e388:	ldrb	r2, [r4, #25]
   3e38c:	ldr	lr, [r4, #16]
   3e390:	ldr	sl, [r4, #32]
   3e394:	ldr	r3, [r4, #20]
   3e398:	mul	sl, sl, r2
   3e39c:	add	ip, r3, sl
   3e3a0:	mov	r2, sl
   3e3a4:	cmp	lr, ip
   3e3a8:	bcs	3e40c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x208>
   3e3ac:	mov	r1, sl
   3e3b0:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3e3b4:	b	3e33c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x138>
   3e3b8:	ldrb	r2, [r4, #25]
   3e3bc:	ldr	r3, [r4, #20]
   3e3c0:	cmp	r2, #0
   3e3c4:	add	r2, r3, #1
   3e3c8:	bne	3e424 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x220>
   3e3cc:	mov	r1, #93	; 0x5d
   3e3d0:	str	r2, [r4, #20]
   3e3d4:	strb	r1, [r3]
   3e3d8:	ldrd	r4, [sp]
   3e3dc:	ldrd	r6, [sp, #8]
   3e3e0:	ldrd	r8, [sp, #16]
   3e3e4:	ldr	sl, [sp, #24]
   3e3e8:	add	sp, sp, #28
   3e3ec:	pop	{pc}		; (ldr pc, [sp], #4)
   3e3f0:	ldrd	r4, [sp]
   3e3f4:	ldrd	r6, [sp, #8]
   3e3f8:	ldrd	r8, [sp, #16]
   3e3fc:	ldr	sl, [sp, #24]
   3e400:	ldr	lr, [sp, #28]
   3e404:	add	sp, sp, #32
   3e408:	b	3c2e8 <flatcc_json_printer_uint32_vector_field@@Base>
   3e40c:	mov	r0, r3
   3e410:	bl	1459c <memset@plt>
   3e414:	ldr	r3, [r4, #20]
   3e418:	add	sl, r3, sl
   3e41c:	str	sl, [r4, #20]
   3e420:	b	3e33c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x138>
   3e424:	mov	r1, #10
   3e428:	str	r2, [r4, #20]
   3e42c:	strb	r1, [r3]
   3e430:	ldrb	r3, [r4, #25]
   3e434:	ldr	r2, [r4, #32]
   3e438:	ldr	r1, [r4, #16]
   3e43c:	ldr	r0, [r4, #20]
   3e440:	sub	r2, r2, #1
   3e444:	mul	r5, r2, r3
   3e448:	str	r2, [r4, #32]
   3e44c:	add	r3, r0, r5
   3e450:	cmp	r1, r3
   3e454:	bcs	3e48c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x288>
   3e458:	mov	r1, r5
   3e45c:	mov	r0, r4
   3e460:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3e464:	ldr	r3, [r4, #20]
   3e468:	add	r2, r3, #1
   3e46c:	b	3e3cc <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1c8>
   3e470:	add	r1, r3, #1
   3e474:	mov	r2, #10
   3e478:	mov	r0, r4
   3e47c:	str	r1, [r4, #20]
   3e480:	strb	r2, [r3]
   3e484:	bl	34188 <flatcc_json_parser_struct_as_root@@Base+0xd6c>
   3e488:	b	3e2f8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf4>
   3e48c:	mov	r2, r5
   3e490:	mov	r1, #32
   3e494:	bl	1459c <memset@plt>
   3e498:	ldr	r3, [r4, #20]
   3e49c:	add	r3, r3, r5
   3e4a0:	add	r2, r3, #1
   3e4a4:	b	3e3cc <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1c8>

0003e4a8 <flatcc_json_printer_uint64_enum_vector_field@@Base>:
   3e4a8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3e4ac:	strd	r6, [sp, #8]
   3e4b0:	strd	r8, [sp, #16]
   3e4b4:	str	sl, [sp, #24]
   3e4b8:	str	lr, [sp, #28]
   3e4bc:	ldrb	r8, [r0, #27]
   3e4c0:	ldrd	r6, [sp, #32]
   3e4c4:	cmp	r8, #0
   3e4c8:	bne	3e694 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1ec>
   3e4cc:	mov	r5, r3
   3e4d0:	ldr	r3, [r1, #8]
   3e4d4:	add	r2, r2, #2
   3e4d8:	lsl	r2, r2, #1
   3e4dc:	mov	lr, r1
   3e4e0:	cmp	r3, r2
   3e4e4:	ble	3e67c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1d4>
   3e4e8:	ldr	r3, [r1, #4]
   3e4ec:	ldrh	r2, [r3, r2]
   3e4f0:	cmp	r2, #0
   3e4f4:	beq	3e67c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1d4>
   3e4f8:	ldr	r3, [r1]
   3e4fc:	adds	ip, r3, r2
   3e500:	beq	3e67c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1d4>
   3e504:	ldr	r1, [r1, #16]
   3e508:	mov	r4, r0
   3e50c:	add	r0, r1, #1
   3e510:	cmp	r1, #0
   3e514:	str	r0, [lr, #16]
   3e518:	beq	3e530 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x88>
   3e51c:	ldr	r1, [r4, #20]
   3e520:	mov	r0, #44	; 0x2c
   3e524:	add	lr, r1, #1
   3e528:	str	lr, [r4, #20]
   3e52c:	strb	r0, [r1]
   3e530:	ldr	r3, [r3, r2]
   3e534:	mov	r1, r5
   3e538:	mov	r2, r6
   3e53c:	mov	r0, r4
   3e540:	add	r6, ip, r3
   3e544:	ldr	r5, [ip, r3]
   3e548:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   3e54c:	ldr	r2, [r4, #20]
   3e550:	mov	r1, #91	; 0x5b
   3e554:	ldr	r3, [r4, #32]
   3e558:	cmp	r5, #0
   3e55c:	add	r0, r2, #1
   3e560:	add	r3, r3, #1
   3e564:	str	r0, [r4, #20]
   3e568:	str	r3, [r4, #32]
   3e56c:	strb	r1, [r2]
   3e570:	beq	3e65c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1b4>
   3e574:	ldrb	r1, [r4, #25]
   3e578:	ldr	r3, [r4, #20]
   3e57c:	cmp	r1, #0
   3e580:	bne	3e714 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x26c>
   3e584:	ldr	r2, [r4, #16]
   3e588:	cmp	r2, r3
   3e58c:	bhi	3e59c <flatcc_json_printer_uint64_enum_vector_field@@Base+0xf4>
   3e590:	mov	r0, r4
   3e594:	ldr	r3, [r4, #44]	; 0x2c
   3e598:	blx	r3
   3e59c:	mov	r0, r4
   3e5a0:	ldrd	r2, [r6, #4]
   3e5a4:	add	r6, r6, #12
   3e5a8:	blx	r7
   3e5ac:	cmp	r5, #1
   3e5b0:	sub	r5, r5, #2
   3e5b4:	beq	3e65c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1b4>
   3e5b8:	mov	r8, #44	; 0x2c
   3e5bc:	mov	r9, #10
   3e5c0:	b	3e5f8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x150>
   3e5c4:	ldr	r3, [r4, #16]
   3e5c8:	mov	r0, r4
   3e5cc:	ldr	r2, [r4, #20]
   3e5d0:	cmp	r2, r3
   3e5d4:	bcc	3e5e0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x138>
   3e5d8:	ldr	r3, [r4, #44]	; 0x2c
   3e5dc:	blx	r3
   3e5e0:	sub	r5, r5, #1
   3e5e4:	mov	r0, r4
   3e5e8:	ldrd	r2, [r6], #8
   3e5ec:	blx	r7
   3e5f0:	cmn	r5, #1
   3e5f4:	beq	3e65c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1b4>
   3e5f8:	ldr	r3, [r4, #20]
   3e5fc:	add	r2, r3, #1
   3e600:	str	r2, [r4, #20]
   3e604:	strb	r8, [r3]
   3e608:	ldrb	r1, [r4, #25]
   3e60c:	cmp	r1, #0
   3e610:	beq	3e5c4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x11c>
   3e614:	ldr	r3, [r4, #20]
   3e618:	mov	r1, #32
   3e61c:	mov	r0, r4
   3e620:	add	r2, r3, #1
   3e624:	str	r2, [r4, #20]
   3e628:	strb	r9, [r3]
   3e62c:	ldrb	r2, [r4, #25]
   3e630:	ldr	lr, [r4, #16]
   3e634:	ldr	sl, [r4, #32]
   3e638:	ldr	r3, [r4, #20]
   3e63c:	mul	sl, sl, r2
   3e640:	add	ip, r3, sl
   3e644:	mov	r2, sl
   3e648:	cmp	lr, ip
   3e64c:	bcs	3e6b0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x208>
   3e650:	mov	r1, sl
   3e654:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3e658:	b	3e5e0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x138>
   3e65c:	ldrb	r2, [r4, #25]
   3e660:	ldr	r3, [r4, #20]
   3e664:	cmp	r2, #0
   3e668:	add	r2, r3, #1
   3e66c:	bne	3e6c8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x220>
   3e670:	mov	r1, #93	; 0x5d
   3e674:	str	r2, [r4, #20]
   3e678:	strb	r1, [r3]
   3e67c:	ldrd	r4, [sp]
   3e680:	ldrd	r6, [sp, #8]
   3e684:	ldrd	r8, [sp, #16]
   3e688:	ldr	sl, [sp, #24]
   3e68c:	add	sp, sp, #28
   3e690:	pop	{pc}		; (ldr pc, [sp], #4)
   3e694:	ldrd	r4, [sp]
   3e698:	ldrd	r6, [sp, #8]
   3e69c:	ldrd	r8, [sp, #16]
   3e6a0:	ldr	sl, [sp, #24]
   3e6a4:	ldr	lr, [sp, #28]
   3e6a8:	add	sp, sp, #32
   3e6ac:	b	3c578 <flatcc_json_printer_uint64_vector_field@@Base>
   3e6b0:	mov	r0, r3
   3e6b4:	bl	1459c <memset@plt>
   3e6b8:	ldr	r3, [r4, #20]
   3e6bc:	add	sl, r3, sl
   3e6c0:	str	sl, [r4, #20]
   3e6c4:	b	3e5e0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x138>
   3e6c8:	mov	r1, #10
   3e6cc:	str	r2, [r4, #20]
   3e6d0:	strb	r1, [r3]
   3e6d4:	ldrb	r3, [r4, #25]
   3e6d8:	ldr	r2, [r4, #32]
   3e6dc:	ldr	r1, [r4, #16]
   3e6e0:	ldr	r0, [r4, #20]
   3e6e4:	sub	r2, r2, #1
   3e6e8:	mul	r5, r2, r3
   3e6ec:	str	r2, [r4, #32]
   3e6f0:	add	r3, r0, r5
   3e6f4:	cmp	r1, r3
   3e6f8:	bcs	3e730 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x288>
   3e6fc:	mov	r1, r5
   3e700:	mov	r0, r4
   3e704:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3e708:	ldr	r3, [r4, #20]
   3e70c:	add	r2, r3, #1
   3e710:	b	3e670 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1c8>
   3e714:	add	r1, r3, #1
   3e718:	mov	r2, #10
   3e71c:	mov	r0, r4
   3e720:	str	r1, [r4, #20]
   3e724:	strb	r2, [r3]
   3e728:	bl	34188 <flatcc_json_parser_struct_as_root@@Base+0xd6c>
   3e72c:	b	3e59c <flatcc_json_printer_uint64_enum_vector_field@@Base+0xf4>
   3e730:	mov	r2, r5
   3e734:	mov	r1, #32
   3e738:	bl	1459c <memset@plt>
   3e73c:	ldr	r3, [r4, #20]
   3e740:	add	r3, r3, r5
   3e744:	add	r2, r3, #1
   3e748:	b	3e670 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1c8>

0003e74c <flatcc_json_printer_int8_enum_vector_field@@Base>:
   3e74c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3e750:	strd	r6, [sp, #8]
   3e754:	strd	r8, [sp, #16]
   3e758:	str	sl, [sp, #24]
   3e75c:	str	lr, [sp, #28]
   3e760:	ldrb	r8, [r0, #27]
   3e764:	ldr	r7, [sp, #32]
   3e768:	ldr	r6, [sp, #36]	; 0x24
   3e76c:	cmp	r8, #0
   3e770:	bne	3e93c <flatcc_json_printer_int8_enum_vector_field@@Base+0x1f0>
   3e774:	mov	r5, r3
   3e778:	ldr	r3, [r1, #8]
   3e77c:	add	r2, r2, #2
   3e780:	lsl	r2, r2, #1
   3e784:	mov	lr, r1
   3e788:	cmp	r3, r2
   3e78c:	ble	3e924 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1d8>
   3e790:	ldr	r3, [r1, #4]
   3e794:	ldrh	r2, [r3, r2]
   3e798:	cmp	r2, #0
   3e79c:	beq	3e924 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1d8>
   3e7a0:	ldr	r3, [r1]
   3e7a4:	adds	ip, r3, r2
   3e7a8:	beq	3e924 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1d8>
   3e7ac:	ldr	r1, [r1, #16]
   3e7b0:	mov	r4, r0
   3e7b4:	add	r0, r1, #1
   3e7b8:	cmp	r1, #0
   3e7bc:	str	r0, [lr, #16]
   3e7c0:	beq	3e7d8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x8c>
   3e7c4:	ldr	r1, [r4, #20]
   3e7c8:	mov	r0, #44	; 0x2c
   3e7cc:	add	lr, r1, #1
   3e7d0:	str	lr, [r4, #20]
   3e7d4:	strb	r0, [r1]
   3e7d8:	ldr	r3, [r3, r2]
   3e7dc:	mov	r1, r5
   3e7e0:	mov	r2, r7
   3e7e4:	mov	r0, r4
   3e7e8:	add	r7, ip, r3
   3e7ec:	ldr	r8, [ip, r3]
   3e7f0:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   3e7f4:	ldr	r2, [r4, #20]
   3e7f8:	mov	r1, #91	; 0x5b
   3e7fc:	ldr	r3, [r4, #32]
   3e800:	cmp	r8, #0
   3e804:	add	r0, r2, #1
   3e808:	add	r3, r3, #1
   3e80c:	str	r0, [r4, #20]
   3e810:	str	r3, [r4, #32]
   3e814:	strb	r1, [r2]
   3e818:	beq	3e904 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1b8>
   3e81c:	ldrb	r1, [r4, #25]
   3e820:	ldr	r3, [r4, #20]
   3e824:	cmp	r1, #0
   3e828:	bne	3e9bc <flatcc_json_printer_int8_enum_vector_field@@Base+0x270>
   3e82c:	ldr	r2, [r4, #16]
   3e830:	cmp	r2, r3
   3e834:	bhi	3e844 <flatcc_json_printer_int8_enum_vector_field@@Base+0xf8>
   3e838:	mov	r0, r4
   3e83c:	ldr	r3, [r4, #44]	; 0x2c
   3e840:	blx	r3
   3e844:	ldrsb	r1, [r7, #4]
   3e848:	mov	r0, r4
   3e84c:	add	r5, r7, #5
   3e850:	blx	r6
   3e854:	cmp	r8, #1
   3e858:	beq	3e904 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1b8>
   3e85c:	add	r3, r8, #4
   3e860:	mov	r9, #10
   3e864:	mov	r8, #44	; 0x2c
   3e868:	add	r7, r7, r3
   3e86c:	b	3e8a0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x154>
   3e870:	ldr	r3, [r4, #16]
   3e874:	mov	r0, r4
   3e878:	ldr	r2, [r4, #20]
   3e87c:	cmp	r2, r3
   3e880:	bcc	3e88c <flatcc_json_printer_int8_enum_vector_field@@Base+0x140>
   3e884:	ldr	r3, [r4, #44]	; 0x2c
   3e888:	blx	r3
   3e88c:	ldrsb	r1, [r5], #1
   3e890:	mov	r0, r4
   3e894:	blx	r6
   3e898:	cmp	r5, r7
   3e89c:	beq	3e904 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1b8>
   3e8a0:	ldr	r3, [r4, #20]
   3e8a4:	add	r2, r3, #1
   3e8a8:	str	r2, [r4, #20]
   3e8ac:	strb	r8, [r3]
   3e8b0:	ldrb	r1, [r4, #25]
   3e8b4:	cmp	r1, #0
   3e8b8:	beq	3e870 <flatcc_json_printer_int8_enum_vector_field@@Base+0x124>
   3e8bc:	ldr	r3, [r4, #20]
   3e8c0:	mov	r1, #32
   3e8c4:	mov	r0, r4
   3e8c8:	add	r2, r3, #1
   3e8cc:	str	r2, [r4, #20]
   3e8d0:	strb	r9, [r3]
   3e8d4:	ldrb	r2, [r4, #25]
   3e8d8:	ldr	lr, [r4, #16]
   3e8dc:	ldr	sl, [r4, #32]
   3e8e0:	ldr	r3, [r4, #20]
   3e8e4:	mul	sl, sl, r2
   3e8e8:	add	ip, r3, sl
   3e8ec:	mov	r2, sl
   3e8f0:	cmp	lr, ip
   3e8f4:	bcs	3e958 <flatcc_json_printer_int8_enum_vector_field@@Base+0x20c>
   3e8f8:	mov	r1, sl
   3e8fc:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3e900:	b	3e88c <flatcc_json_printer_int8_enum_vector_field@@Base+0x140>
   3e904:	ldrb	r2, [r4, #25]
   3e908:	ldr	r3, [r4, #20]
   3e90c:	cmp	r2, #0
   3e910:	add	r2, r3, #1
   3e914:	bne	3e970 <flatcc_json_printer_int8_enum_vector_field@@Base+0x224>
   3e918:	mov	r1, #93	; 0x5d
   3e91c:	str	r2, [r4, #20]
   3e920:	strb	r1, [r3]
   3e924:	ldrd	r4, [sp]
   3e928:	ldrd	r6, [sp, #8]
   3e92c:	ldrd	r8, [sp, #16]
   3e930:	ldr	sl, [sp, #24]
   3e934:	add	sp, sp, #28
   3e938:	pop	{pc}		; (ldr pc, [sp], #4)
   3e93c:	ldrd	r4, [sp]
   3e940:	ldrd	r6, [sp, #8]
   3e944:	ldrd	r8, [sp, #16]
   3e948:	ldr	sl, [sp, #24]
   3e94c:	ldr	lr, [sp, #28]
   3e950:	add	sp, sp, #32
   3e954:	b	3c800 <flatcc_json_printer_int8_vector_field@@Base>
   3e958:	mov	r0, r3
   3e95c:	bl	1459c <memset@plt>
   3e960:	ldr	r3, [r4, #20]
   3e964:	add	sl, r3, sl
   3e968:	str	sl, [r4, #20]
   3e96c:	b	3e88c <flatcc_json_printer_int8_enum_vector_field@@Base+0x140>
   3e970:	mov	r1, #10
   3e974:	str	r2, [r4, #20]
   3e978:	strb	r1, [r3]
   3e97c:	ldrb	r3, [r4, #25]
   3e980:	ldr	r2, [r4, #32]
   3e984:	ldr	r1, [r4, #16]
   3e988:	ldr	r0, [r4, #20]
   3e98c:	sub	r2, r2, #1
   3e990:	mul	r5, r2, r3
   3e994:	str	r2, [r4, #32]
   3e998:	add	r3, r0, r5
   3e99c:	cmp	r1, r3
   3e9a0:	bcs	3e9d8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x28c>
   3e9a4:	mov	r1, r5
   3e9a8:	mov	r0, r4
   3e9ac:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3e9b0:	ldr	r3, [r4, #20]
   3e9b4:	add	r2, r3, #1
   3e9b8:	b	3e918 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1cc>
   3e9bc:	add	r1, r3, #1
   3e9c0:	mov	r2, #10
   3e9c4:	mov	r0, r4
   3e9c8:	str	r1, [r4, #20]
   3e9cc:	strb	r2, [r3]
   3e9d0:	bl	34188 <flatcc_json_parser_struct_as_root@@Base+0xd6c>
   3e9d4:	b	3e844 <flatcc_json_printer_int8_enum_vector_field@@Base+0xf8>
   3e9d8:	mov	r2, r5
   3e9dc:	mov	r1, #32
   3e9e0:	bl	1459c <memset@plt>
   3e9e4:	ldr	r3, [r4, #20]
   3e9e8:	add	r3, r3, r5
   3e9ec:	add	r2, r3, #1
   3e9f0:	b	3e918 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1cc>

0003e9f4 <flatcc_json_printer_int16_enum_vector_field@@Base>:
   3e9f4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3e9f8:	strd	r6, [sp, #8]
   3e9fc:	strd	r8, [sp, #16]
   3ea00:	str	sl, [sp, #24]
   3ea04:	str	lr, [sp, #28]
   3ea08:	ldrb	r8, [r0, #27]
   3ea0c:	ldrd	r6, [sp, #32]
   3ea10:	cmp	r8, #0
   3ea14:	bne	3ebe0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1ec>
   3ea18:	mov	r5, r3
   3ea1c:	ldr	r3, [r1, #8]
   3ea20:	add	r2, r2, #2
   3ea24:	lsl	r2, r2, #1
   3ea28:	mov	lr, r1
   3ea2c:	cmp	r3, r2
   3ea30:	ble	3ebc8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1d4>
   3ea34:	ldr	r3, [r1, #4]
   3ea38:	ldrh	r2, [r3, r2]
   3ea3c:	cmp	r2, #0
   3ea40:	beq	3ebc8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1d4>
   3ea44:	ldr	r3, [r1]
   3ea48:	adds	ip, r3, r2
   3ea4c:	beq	3ebc8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1d4>
   3ea50:	ldr	r1, [r1, #16]
   3ea54:	mov	r4, r0
   3ea58:	add	r0, r1, #1
   3ea5c:	cmp	r1, #0
   3ea60:	str	r0, [lr, #16]
   3ea64:	beq	3ea7c <flatcc_json_printer_int16_enum_vector_field@@Base+0x88>
   3ea68:	ldr	r1, [r4, #20]
   3ea6c:	mov	r0, #44	; 0x2c
   3ea70:	add	lr, r1, #1
   3ea74:	str	lr, [r4, #20]
   3ea78:	strb	r0, [r1]
   3ea7c:	ldr	r3, [r3, r2]
   3ea80:	mov	r1, r5
   3ea84:	mov	r2, r6
   3ea88:	mov	r0, r4
   3ea8c:	add	r6, ip, r3
   3ea90:	ldr	r5, [ip, r3]
   3ea94:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   3ea98:	ldr	r2, [r4, #20]
   3ea9c:	mov	r1, #91	; 0x5b
   3eaa0:	ldr	r3, [r4, #32]
   3eaa4:	cmp	r5, #0
   3eaa8:	add	r0, r2, #1
   3eaac:	add	r3, r3, #1
   3eab0:	str	r0, [r4, #20]
   3eab4:	str	r3, [r4, #32]
   3eab8:	strb	r1, [r2]
   3eabc:	beq	3eba8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1b4>
   3eac0:	ldrb	r1, [r4, #25]
   3eac4:	ldr	r3, [r4, #20]
   3eac8:	cmp	r1, #0
   3eacc:	bne	3ec60 <flatcc_json_printer_int16_enum_vector_field@@Base+0x26c>
   3ead0:	ldr	r2, [r4, #16]
   3ead4:	cmp	r2, r3
   3ead8:	bhi	3eae8 <flatcc_json_printer_int16_enum_vector_field@@Base+0xf4>
   3eadc:	mov	r0, r4
   3eae0:	ldr	r3, [r4, #44]	; 0x2c
   3eae4:	blx	r3
   3eae8:	ldrsh	r1, [r6, #4]
   3eaec:	mov	r0, r4
   3eaf0:	add	r6, r6, #6
   3eaf4:	blx	r7
   3eaf8:	cmp	r5, #1
   3eafc:	sub	r5, r5, #2
   3eb00:	beq	3eba8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1b4>
   3eb04:	mov	r8, #44	; 0x2c
   3eb08:	mov	r9, #10
   3eb0c:	b	3eb44 <flatcc_json_printer_int16_enum_vector_field@@Base+0x150>
   3eb10:	ldr	r3, [r4, #16]
   3eb14:	mov	r0, r4
   3eb18:	ldr	r2, [r4, #20]
   3eb1c:	cmp	r2, r3
   3eb20:	bcc	3eb2c <flatcc_json_printer_int16_enum_vector_field@@Base+0x138>
   3eb24:	ldr	r3, [r4, #44]	; 0x2c
   3eb28:	blx	r3
   3eb2c:	sub	r5, r5, #1
   3eb30:	ldrsh	r1, [r6], #2
   3eb34:	mov	r0, r4
   3eb38:	blx	r7
   3eb3c:	cmn	r5, #1
   3eb40:	beq	3eba8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1b4>
   3eb44:	ldr	r3, [r4, #20]
   3eb48:	add	r2, r3, #1
   3eb4c:	str	r2, [r4, #20]
   3eb50:	strb	r8, [r3]
   3eb54:	ldrb	r1, [r4, #25]
   3eb58:	cmp	r1, #0
   3eb5c:	beq	3eb10 <flatcc_json_printer_int16_enum_vector_field@@Base+0x11c>
   3eb60:	ldr	r3, [r4, #20]
   3eb64:	mov	r1, #32
   3eb68:	mov	r0, r4
   3eb6c:	add	r2, r3, #1
   3eb70:	str	r2, [r4, #20]
   3eb74:	strb	r9, [r3]
   3eb78:	ldrb	r2, [r4, #25]
   3eb7c:	ldr	lr, [r4, #16]
   3eb80:	ldr	sl, [r4, #32]
   3eb84:	ldr	r3, [r4, #20]
   3eb88:	mul	sl, sl, r2
   3eb8c:	add	ip, r3, sl
   3eb90:	mov	r2, sl
   3eb94:	cmp	lr, ip
   3eb98:	bcs	3ebfc <flatcc_json_printer_int16_enum_vector_field@@Base+0x208>
   3eb9c:	mov	r1, sl
   3eba0:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3eba4:	b	3eb2c <flatcc_json_printer_int16_enum_vector_field@@Base+0x138>
   3eba8:	ldrb	r2, [r4, #25]
   3ebac:	ldr	r3, [r4, #20]
   3ebb0:	cmp	r2, #0
   3ebb4:	add	r2, r3, #1
   3ebb8:	bne	3ec14 <flatcc_json_printer_int16_enum_vector_field@@Base+0x220>
   3ebbc:	mov	r1, #93	; 0x5d
   3ebc0:	str	r2, [r4, #20]
   3ebc4:	strb	r1, [r3]
   3ebc8:	ldrd	r4, [sp]
   3ebcc:	ldrd	r6, [sp, #8]
   3ebd0:	ldrd	r8, [sp, #16]
   3ebd4:	ldr	sl, [sp, #24]
   3ebd8:	add	sp, sp, #28
   3ebdc:	pop	{pc}		; (ldr pc, [sp], #4)
   3ebe0:	ldrd	r4, [sp]
   3ebe4:	ldrd	r6, [sp, #8]
   3ebe8:	ldrd	r8, [sp, #16]
   3ebec:	ldr	sl, [sp, #24]
   3ebf0:	ldr	lr, [sp, #28]
   3ebf4:	add	sp, sp, #32
   3ebf8:	b	3cb6c <flatcc_json_printer_int16_vector_field@@Base>
   3ebfc:	mov	r0, r3
   3ec00:	bl	1459c <memset@plt>
   3ec04:	ldr	r3, [r4, #20]
   3ec08:	add	sl, r3, sl
   3ec0c:	str	sl, [r4, #20]
   3ec10:	b	3eb2c <flatcc_json_printer_int16_enum_vector_field@@Base+0x138>
   3ec14:	mov	r1, #10
   3ec18:	str	r2, [r4, #20]
   3ec1c:	strb	r1, [r3]
   3ec20:	ldrb	r3, [r4, #25]
   3ec24:	ldr	r2, [r4, #32]
   3ec28:	ldr	r1, [r4, #16]
   3ec2c:	ldr	r0, [r4, #20]
   3ec30:	sub	r2, r2, #1
   3ec34:	mul	r5, r2, r3
   3ec38:	str	r2, [r4, #32]
   3ec3c:	add	r3, r0, r5
   3ec40:	cmp	r1, r3
   3ec44:	bcs	3ec7c <flatcc_json_printer_int16_enum_vector_field@@Base+0x288>
   3ec48:	mov	r1, r5
   3ec4c:	mov	r0, r4
   3ec50:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3ec54:	ldr	r3, [r4, #20]
   3ec58:	add	r2, r3, #1
   3ec5c:	b	3ebbc <flatcc_json_printer_int16_enum_vector_field@@Base+0x1c8>
   3ec60:	add	r1, r3, #1
   3ec64:	mov	r2, #10
   3ec68:	mov	r0, r4
   3ec6c:	str	r1, [r4, #20]
   3ec70:	strb	r2, [r3]
   3ec74:	bl	34188 <flatcc_json_parser_struct_as_root@@Base+0xd6c>
   3ec78:	b	3eae8 <flatcc_json_printer_int16_enum_vector_field@@Base+0xf4>
   3ec7c:	mov	r2, r5
   3ec80:	mov	r1, #32
   3ec84:	bl	1459c <memset@plt>
   3ec88:	ldr	r3, [r4, #20]
   3ec8c:	add	r3, r3, r5
   3ec90:	add	r2, r3, #1
   3ec94:	b	3ebbc <flatcc_json_printer_int16_enum_vector_field@@Base+0x1c8>

0003ec98 <flatcc_json_printer_int32_enum_vector_field@@Base>:
   3ec98:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3ec9c:	strd	r6, [sp, #8]
   3eca0:	strd	r8, [sp, #16]
   3eca4:	str	sl, [sp, #24]
   3eca8:	str	lr, [sp, #28]
   3ecac:	ldrb	r8, [r0, #27]
   3ecb0:	ldrd	r6, [sp, #32]
   3ecb4:	cmp	r8, #0
   3ecb8:	bne	3ee84 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1ec>
   3ecbc:	mov	r5, r3
   3ecc0:	ldr	r3, [r1, #8]
   3ecc4:	add	r2, r2, #2
   3ecc8:	lsl	r2, r2, #1
   3eccc:	mov	lr, r1
   3ecd0:	cmp	r3, r2
   3ecd4:	ble	3ee6c <flatcc_json_printer_int32_enum_vector_field@@Base+0x1d4>
   3ecd8:	ldr	r3, [r1, #4]
   3ecdc:	ldrh	r2, [r3, r2]
   3ece0:	cmp	r2, #0
   3ece4:	beq	3ee6c <flatcc_json_printer_int32_enum_vector_field@@Base+0x1d4>
   3ece8:	ldr	r3, [r1]
   3ecec:	adds	ip, r3, r2
   3ecf0:	beq	3ee6c <flatcc_json_printer_int32_enum_vector_field@@Base+0x1d4>
   3ecf4:	ldr	r1, [r1, #16]
   3ecf8:	mov	r4, r0
   3ecfc:	add	r0, r1, #1
   3ed00:	cmp	r1, #0
   3ed04:	str	r0, [lr, #16]
   3ed08:	beq	3ed20 <flatcc_json_printer_int32_enum_vector_field@@Base+0x88>
   3ed0c:	ldr	r1, [r4, #20]
   3ed10:	mov	r0, #44	; 0x2c
   3ed14:	add	lr, r1, #1
   3ed18:	str	lr, [r4, #20]
   3ed1c:	strb	r0, [r1]
   3ed20:	ldr	r3, [r3, r2]
   3ed24:	mov	r1, r5
   3ed28:	mov	r2, r6
   3ed2c:	mov	r0, r4
   3ed30:	add	r6, ip, r3
   3ed34:	ldr	r5, [ip, r3]
   3ed38:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   3ed3c:	ldr	r2, [r4, #20]
   3ed40:	mov	r1, #91	; 0x5b
   3ed44:	ldr	r3, [r4, #32]
   3ed48:	cmp	r5, #0
   3ed4c:	add	r0, r2, #1
   3ed50:	add	r3, r3, #1
   3ed54:	str	r0, [r4, #20]
   3ed58:	str	r3, [r4, #32]
   3ed5c:	strb	r1, [r2]
   3ed60:	beq	3ee4c <flatcc_json_printer_int32_enum_vector_field@@Base+0x1b4>
   3ed64:	ldrb	r1, [r4, #25]
   3ed68:	ldr	r3, [r4, #20]
   3ed6c:	cmp	r1, #0
   3ed70:	bne	3ef04 <flatcc_json_printer_int32_enum_vector_field@@Base+0x26c>
   3ed74:	ldr	r2, [r4, #16]
   3ed78:	cmp	r2, r3
   3ed7c:	bhi	3ed8c <flatcc_json_printer_int32_enum_vector_field@@Base+0xf4>
   3ed80:	mov	r0, r4
   3ed84:	ldr	r3, [r4, #44]	; 0x2c
   3ed88:	blx	r3
   3ed8c:	mov	r0, r4
   3ed90:	ldr	r1, [r6, #4]
   3ed94:	add	r6, r6, #8
   3ed98:	blx	r7
   3ed9c:	cmp	r5, #1
   3eda0:	sub	r5, r5, #2
   3eda4:	beq	3ee4c <flatcc_json_printer_int32_enum_vector_field@@Base+0x1b4>
   3eda8:	mov	r8, #44	; 0x2c
   3edac:	mov	r9, #10
   3edb0:	b	3ede8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x150>
   3edb4:	ldr	r3, [r4, #16]
   3edb8:	mov	r0, r4
   3edbc:	ldr	r2, [r4, #20]
   3edc0:	cmp	r2, r3
   3edc4:	bcc	3edd0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x138>
   3edc8:	ldr	r3, [r4, #44]	; 0x2c
   3edcc:	blx	r3
   3edd0:	sub	r5, r5, #1
   3edd4:	mov	r0, r4
   3edd8:	ldr	r1, [r6], #4
   3eddc:	blx	r7
   3ede0:	cmn	r5, #1
   3ede4:	beq	3ee4c <flatcc_json_printer_int32_enum_vector_field@@Base+0x1b4>
   3ede8:	ldr	r3, [r4, #20]
   3edec:	add	r2, r3, #1
   3edf0:	str	r2, [r4, #20]
   3edf4:	strb	r8, [r3]
   3edf8:	ldrb	r1, [r4, #25]
   3edfc:	cmp	r1, #0
   3ee00:	beq	3edb4 <flatcc_json_printer_int32_enum_vector_field@@Base+0x11c>
   3ee04:	ldr	r3, [r4, #20]
   3ee08:	mov	r1, #32
   3ee0c:	mov	r0, r4
   3ee10:	add	r2, r3, #1
   3ee14:	str	r2, [r4, #20]
   3ee18:	strb	r9, [r3]
   3ee1c:	ldrb	r2, [r4, #25]
   3ee20:	ldr	lr, [r4, #16]
   3ee24:	ldr	sl, [r4, #32]
   3ee28:	ldr	r3, [r4, #20]
   3ee2c:	mul	sl, sl, r2
   3ee30:	add	ip, r3, sl
   3ee34:	mov	r2, sl
   3ee38:	cmp	lr, ip
   3ee3c:	bcs	3eea0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x208>
   3ee40:	mov	r1, sl
   3ee44:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3ee48:	b	3edd0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x138>
   3ee4c:	ldrb	r2, [r4, #25]
   3ee50:	ldr	r3, [r4, #20]
   3ee54:	cmp	r2, #0
   3ee58:	add	r2, r3, #1
   3ee5c:	bne	3eeb8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x220>
   3ee60:	mov	r1, #93	; 0x5d
   3ee64:	str	r2, [r4, #20]
   3ee68:	strb	r1, [r3]
   3ee6c:	ldrd	r4, [sp]
   3ee70:	ldrd	r6, [sp, #8]
   3ee74:	ldrd	r8, [sp, #16]
   3ee78:	ldr	sl, [sp, #24]
   3ee7c:	add	sp, sp, #28
   3ee80:	pop	{pc}		; (ldr pc, [sp], #4)
   3ee84:	ldrd	r4, [sp]
   3ee88:	ldrd	r6, [sp, #8]
   3ee8c:	ldrd	r8, [sp, #16]
   3ee90:	ldr	sl, [sp, #24]
   3ee94:	ldr	lr, [sp, #28]
   3ee98:	add	sp, sp, #32
   3ee9c:	b	3ce70 <flatcc_json_printer_int32_vector_field@@Base>
   3eea0:	mov	r0, r3
   3eea4:	bl	1459c <memset@plt>
   3eea8:	ldr	r3, [r4, #20]
   3eeac:	add	sl, r3, sl
   3eeb0:	str	sl, [r4, #20]
   3eeb4:	b	3edd0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x138>
   3eeb8:	mov	r1, #10
   3eebc:	str	r2, [r4, #20]
   3eec0:	strb	r1, [r3]
   3eec4:	ldrb	r3, [r4, #25]
   3eec8:	ldr	r2, [r4, #32]
   3eecc:	ldr	r1, [r4, #16]
   3eed0:	ldr	r0, [r4, #20]
   3eed4:	sub	r2, r2, #1
   3eed8:	mul	r5, r2, r3
   3eedc:	str	r2, [r4, #32]
   3eee0:	add	r3, r0, r5
   3eee4:	cmp	r1, r3
   3eee8:	bcs	3ef20 <flatcc_json_printer_int32_enum_vector_field@@Base+0x288>
   3eeec:	mov	r1, r5
   3eef0:	mov	r0, r4
   3eef4:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3eef8:	ldr	r3, [r4, #20]
   3eefc:	add	r2, r3, #1
   3ef00:	b	3ee60 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1c8>
   3ef04:	add	r1, r3, #1
   3ef08:	mov	r2, #10
   3ef0c:	mov	r0, r4
   3ef10:	str	r1, [r4, #20]
   3ef14:	strb	r2, [r3]
   3ef18:	bl	34188 <flatcc_json_parser_struct_as_root@@Base+0xd6c>
   3ef1c:	b	3ed8c <flatcc_json_printer_int32_enum_vector_field@@Base+0xf4>
   3ef20:	mov	r2, r5
   3ef24:	mov	r1, #32
   3ef28:	bl	1459c <memset@plt>
   3ef2c:	ldr	r3, [r4, #20]
   3ef30:	add	r3, r3, r5
   3ef34:	add	r2, r3, #1
   3ef38:	b	3ee60 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1c8>

0003ef3c <flatcc_json_printer_int64_enum_vector_field@@Base>:
   3ef3c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3ef40:	strd	r6, [sp, #8]
   3ef44:	strd	r8, [sp, #16]
   3ef48:	str	sl, [sp, #24]
   3ef4c:	str	lr, [sp, #28]
   3ef50:	ldrb	r8, [r0, #27]
   3ef54:	ldrd	r6, [sp, #32]
   3ef58:	cmp	r8, #0
   3ef5c:	bne	3f128 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1ec>
   3ef60:	mov	r5, r3
   3ef64:	ldr	r3, [r1, #8]
   3ef68:	add	r2, r2, #2
   3ef6c:	lsl	r2, r2, #1
   3ef70:	mov	lr, r1
   3ef74:	cmp	r3, r2
   3ef78:	ble	3f110 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1d4>
   3ef7c:	ldr	r3, [r1, #4]
   3ef80:	ldrh	r2, [r3, r2]
   3ef84:	cmp	r2, #0
   3ef88:	beq	3f110 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1d4>
   3ef8c:	ldr	r3, [r1]
   3ef90:	adds	ip, r3, r2
   3ef94:	beq	3f110 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1d4>
   3ef98:	ldr	r1, [r1, #16]
   3ef9c:	mov	r4, r0
   3efa0:	add	r0, r1, #1
   3efa4:	cmp	r1, #0
   3efa8:	str	r0, [lr, #16]
   3efac:	beq	3efc4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x88>
   3efb0:	ldr	r1, [r4, #20]
   3efb4:	mov	r0, #44	; 0x2c
   3efb8:	add	lr, r1, #1
   3efbc:	str	lr, [r4, #20]
   3efc0:	strb	r0, [r1]
   3efc4:	ldr	r3, [r3, r2]
   3efc8:	mov	r1, r5
   3efcc:	mov	r2, r6
   3efd0:	mov	r0, r4
   3efd4:	add	r6, ip, r3
   3efd8:	ldr	r5, [ip, r3]
   3efdc:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   3efe0:	ldr	r2, [r4, #20]
   3efe4:	mov	r1, #91	; 0x5b
   3efe8:	ldr	r3, [r4, #32]
   3efec:	cmp	r5, #0
   3eff0:	add	r0, r2, #1
   3eff4:	add	r3, r3, #1
   3eff8:	str	r0, [r4, #20]
   3effc:	str	r3, [r4, #32]
   3f000:	strb	r1, [r2]
   3f004:	beq	3f0f0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1b4>
   3f008:	ldrb	r1, [r4, #25]
   3f00c:	ldr	r3, [r4, #20]
   3f010:	cmp	r1, #0
   3f014:	bne	3f1a8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x26c>
   3f018:	ldr	r2, [r4, #16]
   3f01c:	cmp	r2, r3
   3f020:	bhi	3f030 <flatcc_json_printer_int64_enum_vector_field@@Base+0xf4>
   3f024:	mov	r0, r4
   3f028:	ldr	r3, [r4, #44]	; 0x2c
   3f02c:	blx	r3
   3f030:	mov	r0, r4
   3f034:	ldrd	r2, [r6, #4]
   3f038:	add	r6, r6, #12
   3f03c:	blx	r7
   3f040:	cmp	r5, #1
   3f044:	sub	r5, r5, #2
   3f048:	beq	3f0f0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1b4>
   3f04c:	mov	r8, #44	; 0x2c
   3f050:	mov	r9, #10
   3f054:	b	3f08c <flatcc_json_printer_int64_enum_vector_field@@Base+0x150>
   3f058:	ldr	r3, [r4, #16]
   3f05c:	mov	r0, r4
   3f060:	ldr	r2, [r4, #20]
   3f064:	cmp	r2, r3
   3f068:	bcc	3f074 <flatcc_json_printer_int64_enum_vector_field@@Base+0x138>
   3f06c:	ldr	r3, [r4, #44]	; 0x2c
   3f070:	blx	r3
   3f074:	sub	r5, r5, #1
   3f078:	mov	r0, r4
   3f07c:	ldrd	r2, [r6], #8
   3f080:	blx	r7
   3f084:	cmn	r5, #1
   3f088:	beq	3f0f0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1b4>
   3f08c:	ldr	r3, [r4, #20]
   3f090:	add	r2, r3, #1
   3f094:	str	r2, [r4, #20]
   3f098:	strb	r8, [r3]
   3f09c:	ldrb	r1, [r4, #25]
   3f0a0:	cmp	r1, #0
   3f0a4:	beq	3f058 <flatcc_json_printer_int64_enum_vector_field@@Base+0x11c>
   3f0a8:	ldr	r3, [r4, #20]
   3f0ac:	mov	r1, #32
   3f0b0:	mov	r0, r4
   3f0b4:	add	r2, r3, #1
   3f0b8:	str	r2, [r4, #20]
   3f0bc:	strb	r9, [r3]
   3f0c0:	ldrb	r2, [r4, #25]
   3f0c4:	ldr	lr, [r4, #16]
   3f0c8:	ldr	sl, [r4, #32]
   3f0cc:	ldr	r3, [r4, #20]
   3f0d0:	mul	sl, sl, r2
   3f0d4:	add	ip, r3, sl
   3f0d8:	mov	r2, sl
   3f0dc:	cmp	lr, ip
   3f0e0:	bcs	3f144 <flatcc_json_printer_int64_enum_vector_field@@Base+0x208>
   3f0e4:	mov	r1, sl
   3f0e8:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3f0ec:	b	3f074 <flatcc_json_printer_int64_enum_vector_field@@Base+0x138>
   3f0f0:	ldrb	r2, [r4, #25]
   3f0f4:	ldr	r3, [r4, #20]
   3f0f8:	cmp	r2, #0
   3f0fc:	add	r2, r3, #1
   3f100:	bne	3f15c <flatcc_json_printer_int64_enum_vector_field@@Base+0x220>
   3f104:	mov	r1, #93	; 0x5d
   3f108:	str	r2, [r4, #20]
   3f10c:	strb	r1, [r3]
   3f110:	ldrd	r4, [sp]
   3f114:	ldrd	r6, [sp, #8]
   3f118:	ldrd	r8, [sp, #16]
   3f11c:	ldr	sl, [sp, #24]
   3f120:	add	sp, sp, #28
   3f124:	pop	{pc}		; (ldr pc, [sp], #4)
   3f128:	ldrd	r4, [sp]
   3f12c:	ldrd	r6, [sp, #8]
   3f130:	ldrd	r8, [sp, #16]
   3f134:	ldr	sl, [sp, #24]
   3f138:	ldr	lr, [sp, #28]
   3f13c:	add	sp, sp, #32
   3f140:	b	3d164 <flatcc_json_printer_int64_vector_field@@Base>
   3f144:	mov	r0, r3
   3f148:	bl	1459c <memset@plt>
   3f14c:	ldr	r3, [r4, #20]
   3f150:	add	sl, r3, sl
   3f154:	str	sl, [r4, #20]
   3f158:	b	3f074 <flatcc_json_printer_int64_enum_vector_field@@Base+0x138>
   3f15c:	mov	r1, #10
   3f160:	str	r2, [r4, #20]
   3f164:	strb	r1, [r3]
   3f168:	ldrb	r3, [r4, #25]
   3f16c:	ldr	r2, [r4, #32]
   3f170:	ldr	r1, [r4, #16]
   3f174:	ldr	r0, [r4, #20]
   3f178:	sub	r2, r2, #1
   3f17c:	mul	r5, r2, r3
   3f180:	str	r2, [r4, #32]
   3f184:	add	r3, r0, r5
   3f188:	cmp	r1, r3
   3f18c:	bcs	3f1c4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x288>
   3f190:	mov	r1, r5
   3f194:	mov	r0, r4
   3f198:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3f19c:	ldr	r3, [r4, #20]
   3f1a0:	add	r2, r3, #1
   3f1a4:	b	3f104 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1c8>
   3f1a8:	add	r1, r3, #1
   3f1ac:	mov	r2, #10
   3f1b0:	mov	r0, r4
   3f1b4:	str	r1, [r4, #20]
   3f1b8:	strb	r2, [r3]
   3f1bc:	bl	34188 <flatcc_json_parser_struct_as_root@@Base+0xd6c>
   3f1c0:	b	3f030 <flatcc_json_printer_int64_enum_vector_field@@Base+0xf4>
   3f1c4:	mov	r2, r5
   3f1c8:	mov	r1, #32
   3f1cc:	bl	1459c <memset@plt>
   3f1d0:	ldr	r3, [r4, #20]
   3f1d4:	add	r3, r3, r5
   3f1d8:	add	r2, r3, #1
   3f1dc:	b	3f104 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1c8>

0003f1e0 <flatcc_json_printer_bool_enum_vector_field@@Base>:
   3f1e0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3f1e4:	strd	r6, [sp, #8]
   3f1e8:	strd	r8, [sp, #16]
   3f1ec:	str	sl, [sp, #24]
   3f1f0:	str	lr, [sp, #28]
   3f1f4:	ldrb	r8, [r0, #27]
   3f1f8:	ldr	r7, [sp, #32]
   3f1fc:	ldr	r6, [sp, #36]	; 0x24
   3f200:	cmp	r8, #0
   3f204:	bne	3f3d0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1f0>
   3f208:	mov	r5, r3
   3f20c:	ldr	r3, [r1, #8]
   3f210:	add	r2, r2, #2
   3f214:	lsl	r2, r2, #1
   3f218:	mov	lr, r1
   3f21c:	cmp	r3, r2
   3f220:	ble	3f3b8 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1d8>
   3f224:	ldr	r3, [r1, #4]
   3f228:	ldrh	r2, [r3, r2]
   3f22c:	cmp	r2, #0
   3f230:	beq	3f3b8 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1d8>
   3f234:	ldr	r3, [r1]
   3f238:	adds	ip, r3, r2
   3f23c:	beq	3f3b8 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1d8>
   3f240:	ldr	r1, [r1, #16]
   3f244:	mov	r4, r0
   3f248:	add	r0, r1, #1
   3f24c:	cmp	r1, #0
   3f250:	str	r0, [lr, #16]
   3f254:	beq	3f26c <flatcc_json_printer_bool_enum_vector_field@@Base+0x8c>
   3f258:	ldr	r1, [r4, #20]
   3f25c:	mov	r0, #44	; 0x2c
   3f260:	add	lr, r1, #1
   3f264:	str	lr, [r4, #20]
   3f268:	strb	r0, [r1]
   3f26c:	ldr	r3, [r3, r2]
   3f270:	mov	r1, r5
   3f274:	mov	r2, r7
   3f278:	mov	r0, r4
   3f27c:	add	r7, ip, r3
   3f280:	ldr	r8, [ip, r3]
   3f284:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   3f288:	ldr	r2, [r4, #20]
   3f28c:	mov	r1, #91	; 0x5b
   3f290:	ldr	r3, [r4, #32]
   3f294:	cmp	r8, #0
   3f298:	add	r0, r2, #1
   3f29c:	add	r3, r3, #1
   3f2a0:	str	r0, [r4, #20]
   3f2a4:	str	r3, [r4, #32]
   3f2a8:	strb	r1, [r2]
   3f2ac:	beq	3f398 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1b8>
   3f2b0:	ldrb	r1, [r4, #25]
   3f2b4:	ldr	r3, [r4, #20]
   3f2b8:	cmp	r1, #0
   3f2bc:	bne	3f450 <flatcc_json_printer_bool_enum_vector_field@@Base+0x270>
   3f2c0:	ldr	r2, [r4, #16]
   3f2c4:	cmp	r2, r3
   3f2c8:	bhi	3f2d8 <flatcc_json_printer_bool_enum_vector_field@@Base+0xf8>
   3f2cc:	mov	r0, r4
   3f2d0:	ldr	r3, [r4, #44]	; 0x2c
   3f2d4:	blx	r3
   3f2d8:	ldrb	r1, [r7, #4]
   3f2dc:	mov	r0, r4
   3f2e0:	add	r5, r7, #5
   3f2e4:	blx	r6
   3f2e8:	cmp	r8, #1
   3f2ec:	beq	3f398 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1b8>
   3f2f0:	add	r3, r8, #4
   3f2f4:	mov	r9, #10
   3f2f8:	mov	r8, #44	; 0x2c
   3f2fc:	add	r7, r7, r3
   3f300:	b	3f334 <flatcc_json_printer_bool_enum_vector_field@@Base+0x154>
   3f304:	ldr	r3, [r4, #16]
   3f308:	mov	r0, r4
   3f30c:	ldr	r2, [r4, #20]
   3f310:	cmp	r2, r3
   3f314:	bcc	3f320 <flatcc_json_printer_bool_enum_vector_field@@Base+0x140>
   3f318:	ldr	r3, [r4, #44]	; 0x2c
   3f31c:	blx	r3
   3f320:	ldrb	r1, [r5], #1
   3f324:	mov	r0, r4
   3f328:	blx	r6
   3f32c:	cmp	r5, r7
   3f330:	beq	3f398 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1b8>
   3f334:	ldr	r3, [r4, #20]
   3f338:	add	r2, r3, #1
   3f33c:	str	r2, [r4, #20]
   3f340:	strb	r8, [r3]
   3f344:	ldrb	r1, [r4, #25]
   3f348:	cmp	r1, #0
   3f34c:	beq	3f304 <flatcc_json_printer_bool_enum_vector_field@@Base+0x124>
   3f350:	ldr	r3, [r4, #20]
   3f354:	mov	r1, #32
   3f358:	mov	r0, r4
   3f35c:	add	r2, r3, #1
   3f360:	str	r2, [r4, #20]
   3f364:	strb	r9, [r3]
   3f368:	ldrb	r2, [r4, #25]
   3f36c:	ldr	lr, [r4, #16]
   3f370:	ldr	sl, [r4, #32]
   3f374:	ldr	r3, [r4, #20]
   3f378:	mul	sl, sl, r2
   3f37c:	add	ip, r3, sl
   3f380:	mov	r2, sl
   3f384:	cmp	lr, ip
   3f388:	bcs	3f3ec <flatcc_json_printer_bool_enum_vector_field@@Base+0x20c>
   3f38c:	mov	r1, sl
   3f390:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3f394:	b	3f320 <flatcc_json_printer_bool_enum_vector_field@@Base+0x140>
   3f398:	ldrb	r2, [r4, #25]
   3f39c:	ldr	r3, [r4, #20]
   3f3a0:	cmp	r2, #0
   3f3a4:	add	r2, r3, #1
   3f3a8:	bne	3f404 <flatcc_json_printer_bool_enum_vector_field@@Base+0x224>
   3f3ac:	mov	r1, #93	; 0x5d
   3f3b0:	str	r2, [r4, #20]
   3f3b4:	strb	r1, [r3]
   3f3b8:	ldrd	r4, [sp]
   3f3bc:	ldrd	r6, [sp, #8]
   3f3c0:	ldrd	r8, [sp, #16]
   3f3c4:	ldr	sl, [sp, #24]
   3f3c8:	add	sp, sp, #28
   3f3cc:	pop	{pc}		; (ldr pc, [sp], #4)
   3f3d0:	ldrd	r4, [sp]
   3f3d4:	ldrd	r6, [sp, #8]
   3f3d8:	ldrd	r8, [sp, #16]
   3f3dc:	ldr	sl, [sp, #24]
   3f3e0:	ldr	lr, [sp, #28]
   3f3e4:	add	sp, sp, #32
   3f3e8:	b	3d468 <flatcc_json_printer_bool_vector_field@@Base>
   3f3ec:	mov	r0, r3
   3f3f0:	bl	1459c <memset@plt>
   3f3f4:	ldr	r3, [r4, #20]
   3f3f8:	add	sl, r3, sl
   3f3fc:	str	sl, [r4, #20]
   3f400:	b	3f320 <flatcc_json_printer_bool_enum_vector_field@@Base+0x140>
   3f404:	mov	r1, #10
   3f408:	str	r2, [r4, #20]
   3f40c:	strb	r1, [r3]
   3f410:	ldrb	r3, [r4, #25]
   3f414:	ldr	r2, [r4, #32]
   3f418:	ldr	r1, [r4, #16]
   3f41c:	ldr	r0, [r4, #20]
   3f420:	sub	r2, r2, #1
   3f424:	mul	r5, r2, r3
   3f428:	str	r2, [r4, #32]
   3f42c:	add	r3, r0, r5
   3f430:	cmp	r1, r3
   3f434:	bcs	3f46c <flatcc_json_printer_bool_enum_vector_field@@Base+0x28c>
   3f438:	mov	r1, r5
   3f43c:	mov	r0, r4
   3f440:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3f444:	ldr	r3, [r4, #20]
   3f448:	add	r2, r3, #1
   3f44c:	b	3f3ac <flatcc_json_printer_bool_enum_vector_field@@Base+0x1cc>
   3f450:	add	r1, r3, #1
   3f454:	mov	r2, #10
   3f458:	mov	r0, r4
   3f45c:	str	r1, [r4, #20]
   3f460:	strb	r2, [r3]
   3f464:	bl	34188 <flatcc_json_parser_struct_as_root@@Base+0xd6c>
   3f468:	b	3f2d8 <flatcc_json_printer_bool_enum_vector_field@@Base+0xf8>
   3f46c:	mov	r2, r5
   3f470:	mov	r1, #32
   3f474:	bl	1459c <memset@plt>
   3f478:	ldr	r3, [r4, #20]
   3f47c:	add	r3, r3, r5
   3f480:	add	r2, r3, #1
   3f484:	b	3f3ac <flatcc_json_printer_bool_enum_vector_field@@Base+0x1cc>

0003f488 <flatcc_json_printer_struct_vector_field@@Base>:
   3f488:	ldr	ip, [r1, #8]
   3f48c:	add	r2, r2, #2
   3f490:	lsl	r2, r2, #1
   3f494:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3f498:	strd	r6, [sp, #8]
   3f49c:	strd	r8, [sp, #16]
   3f4a0:	strd	sl, [sp, #24]
   3f4a4:	cmp	r2, ip
   3f4a8:	str	lr, [sp, #32]
   3f4ac:	sub	sp, sp, #4
   3f4b0:	ldr	r8, [sp, #44]	; 0x2c
   3f4b4:	ldr	r7, [sp, #48]	; 0x30
   3f4b8:	bge	3f6cc <flatcc_json_printer_struct_vector_field@@Base+0x244>
   3f4bc:	ldr	ip, [r1, #4]
   3f4c0:	ldrh	r2, [ip, r2]
   3f4c4:	cmp	r2, #0
   3f4c8:	beq	3f6cc <flatcc_json_printer_struct_vector_field@@Base+0x244>
   3f4cc:	ldr	ip, [r1]
   3f4d0:	adds	lr, ip, r2
   3f4d4:	beq	3f6cc <flatcc_json_printer_struct_vector_field@@Base+0x244>
   3f4d8:	ldr	r4, [r1, #16]
   3f4dc:	add	r5, r4, #1
   3f4e0:	cmp	r4, #0
   3f4e4:	str	r5, [r1, #16]
   3f4e8:	beq	3f500 <flatcc_json_printer_struct_vector_field@@Base+0x78>
   3f4ec:	ldr	r1, [r0, #20]
   3f4f0:	mov	r4, #44	; 0x2c
   3f4f4:	add	r5, r1, #1
   3f4f8:	str	r5, [r0, #20]
   3f4fc:	strb	r4, [r1]
   3f500:	mov	r1, r3
   3f504:	ldr	r3, [ip, r2]
   3f508:	mov	r4, r0
   3f50c:	ldr	r2, [sp, #40]	; 0x28
   3f510:	add	r6, lr, r3
   3f514:	ldr	r5, [lr, r3]
   3f518:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   3f51c:	ldr	r2, [r4, #20]
   3f520:	mov	r1, #91	; 0x5b
   3f524:	ldr	r3, [r4, #32]
   3f528:	cmp	r5, #0
   3f52c:	add	r0, r2, #1
   3f530:	add	r3, r3, #1
   3f534:	str	r0, [r4, #20]
   3f538:	str	r3, [r4, #32]
   3f53c:	strb	r1, [r2]
   3f540:	beq	3f6ac <flatcc_json_printer_struct_vector_field@@Base+0x224>
   3f544:	ldrb	r1, [r4, #25]
   3f548:	ldr	r3, [r4, #20]
   3f54c:	cmp	r1, #0
   3f550:	bne	3f6e8 <flatcc_json_printer_struct_vector_field@@Base+0x260>
   3f554:	ldr	r2, [r4, #16]
   3f558:	cmp	r2, r3
   3f55c:	bhi	3f570 <flatcc_json_printer_struct_vector_field@@Base+0xe8>
   3f560:	mov	r0, r4
   3f564:	ldr	r3, [r4, #44]	; 0x2c
   3f568:	blx	r3
   3f56c:	ldr	r3, [r4, #20]
   3f570:	add	r1, r3, #1
   3f574:	mov	ip, #123	; 0x7b
   3f578:	ldr	r2, [r4, #32]
   3f57c:	add	r6, r6, #4
   3f580:	mov	r0, r4
   3f584:	str	r1, [r4, #20]
   3f588:	mov	r1, r6
   3f58c:	add	r2, r2, #1
   3f590:	str	r2, [r4, #32]
   3f594:	strb	ip, [r3]
   3f598:	blx	r7
   3f59c:	ldrb	r3, [r4, #25]
   3f5a0:	cmp	r3, #0
   3f5a4:	bne	3f7cc <flatcc_json_printer_struct_vector_field@@Base+0x344>
   3f5a8:	ldr	r3, [r4, #20]
   3f5ac:	mov	r2, #125	; 0x7d
   3f5b0:	cmp	r5, #1
   3f5b4:	sub	r5, r5, #2
   3f5b8:	add	r1, r3, #1
   3f5bc:	str	r1, [r4, #20]
   3f5c0:	strb	r2, [r3]
   3f5c4:	beq	3f6ac <flatcc_json_printer_struct_vector_field@@Base+0x224>
   3f5c8:	mov	r9, #44	; 0x2c
   3f5cc:	mov	sl, #10
   3f5d0:	b	3f648 <flatcc_json_printer_struct_vector_field@@Base+0x1c0>
   3f5d4:	ldr	r3, [r4, #16]
   3f5d8:	ldr	r2, [r4, #20]
   3f5dc:	cmp	r2, r3
   3f5e0:	bcc	3f5f4 <flatcc_json_printer_struct_vector_field@@Base+0x16c>
   3f5e4:	mov	r0, r4
   3f5e8:	ldr	r3, [r4, #44]	; 0x2c
   3f5ec:	blx	r3
   3f5f0:	ldr	r2, [r4, #20]
   3f5f4:	add	r0, r2, #1
   3f5f8:	mov	ip, #123	; 0x7b
   3f5fc:	ldr	r3, [r4, #32]
   3f600:	mov	r1, r6
   3f604:	str	r0, [r4, #20]
   3f608:	mov	r0, r4
   3f60c:	add	r3, r3, #1
   3f610:	str	r3, [r4, #32]
   3f614:	strb	ip, [r2]
   3f618:	blx	r7
   3f61c:	ldrb	r3, [r4, #25]
   3f620:	cmp	r3, #0
   3f624:	bne	3f708 <flatcc_json_printer_struct_vector_field@@Base+0x280>
   3f628:	ldr	r1, [r4, #20]
   3f62c:	sub	r5, r5, #1
   3f630:	add	r2, r1, #1
   3f634:	mov	r3, #125	; 0x7d
   3f638:	cmn	r5, #1
   3f63c:	str	r2, [r4, #20]
   3f640:	strb	r3, [r1]
   3f644:	beq	3f6ac <flatcc_json_printer_struct_vector_field@@Base+0x224>
   3f648:	ldr	r3, [r4, #20]
   3f64c:	add	r6, r6, r8
   3f650:	add	r2, r3, #1
   3f654:	str	r2, [r4, #20]
   3f658:	strb	r9, [r3]
   3f65c:	ldrb	r1, [r4, #25]
   3f660:	cmp	r1, #0
   3f664:	beq	3f5d4 <flatcc_json_printer_struct_vector_field@@Base+0x14c>
   3f668:	ldr	r3, [r4, #20]
   3f66c:	add	r2, r3, #1
   3f670:	str	r2, [r4, #20]
   3f674:	strb	sl, [r3]
   3f678:	ldrb	r3, [r4, #25]
   3f67c:	ldr	r1, [r4, #16]
   3f680:	ldr	r2, [r4, #32]
   3f684:	ldr	r0, [r4, #20]
   3f688:	mul	fp, r2, r3
   3f68c:	add	r3, r0, fp
   3f690:	cmp	r1, r3
   3f694:	bcs	3f750 <flatcc_json_printer_struct_vector_field@@Base+0x2c8>
   3f698:	mov	r1, fp
   3f69c:	mov	r0, r4
   3f6a0:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3f6a4:	ldr	r2, [r4, #20]
   3f6a8:	b	3f5f4 <flatcc_json_printer_struct_vector_field@@Base+0x16c>
   3f6ac:	ldrb	r2, [r4, #25]
   3f6b0:	ldr	r3, [r4, #20]
   3f6b4:	cmp	r2, #0
   3f6b8:	add	r2, r3, #1
   3f6bc:	bne	3f780 <flatcc_json_printer_struct_vector_field@@Base+0x2f8>
   3f6c0:	mov	r1, #93	; 0x5d
   3f6c4:	str	r2, [r4, #20]
   3f6c8:	strb	r1, [r3]
   3f6cc:	add	sp, sp, #4
   3f6d0:	ldrd	r4, [sp]
   3f6d4:	ldrd	r6, [sp, #8]
   3f6d8:	ldrd	r8, [sp, #16]
   3f6dc:	ldrd	sl, [sp, #24]
   3f6e0:	add	sp, sp, #32
   3f6e4:	pop	{pc}		; (ldr pc, [sp], #4)
   3f6e8:	add	r1, r3, #1
   3f6ec:	mov	r2, #10
   3f6f0:	mov	r0, r4
   3f6f4:	str	r1, [r4, #20]
   3f6f8:	strb	r2, [r3]
   3f6fc:	bl	34188 <flatcc_json_parser_struct_as_root@@Base+0xd6c>
   3f700:	ldr	r3, [r4, #20]
   3f704:	b	3f570 <flatcc_json_printer_struct_vector_field@@Base+0xe8>
   3f708:	ldr	r3, [r4, #20]
   3f70c:	add	r2, r3, #1
   3f710:	str	r2, [r4, #20]
   3f714:	strb	sl, [r3]
   3f718:	ldrb	r1, [r4, #25]
   3f71c:	ldr	r3, [r4, #32]
   3f720:	ldr	r2, [r4, #16]
   3f724:	ldr	r0, [r4, #20]
   3f728:	sub	r3, r3, #1
   3f72c:	mul	fp, r3, r1
   3f730:	str	r3, [r4, #32]
   3f734:	add	r3, r0, fp
   3f738:	cmp	r2, r3
   3f73c:	bcs	3f768 <flatcc_json_printer_struct_vector_field@@Base+0x2e0>
   3f740:	mov	r1, fp
   3f744:	mov	r0, r4
   3f748:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3f74c:	b	3f628 <flatcc_json_printer_struct_vector_field@@Base+0x1a0>
   3f750:	mov	r2, fp
   3f754:	mov	r1, #32
   3f758:	bl	1459c <memset@plt>
   3f75c:	ldr	r2, [r4, #20]
   3f760:	add	r2, r2, fp
   3f764:	b	3f5f4 <flatcc_json_printer_struct_vector_field@@Base+0x16c>
   3f768:	mov	r1, #32
   3f76c:	mov	r2, fp
   3f770:	bl	1459c <memset@plt>
   3f774:	ldr	r1, [r4, #20]
   3f778:	add	r1, r1, fp
   3f77c:	b	3f62c <flatcc_json_printer_struct_vector_field@@Base+0x1a4>
   3f780:	mov	r1, #10
   3f784:	str	r2, [r4, #20]
   3f788:	strb	r1, [r3]
   3f78c:	ldrb	r3, [r4, #25]
   3f790:	ldr	r2, [r4, #32]
   3f794:	ldr	r1, [r4, #16]
   3f798:	ldr	r0, [r4, #20]
   3f79c:	sub	r2, r2, #1
   3f7a0:	mul	r5, r2, r3
   3f7a4:	str	r2, [r4, #32]
   3f7a8:	add	r3, r0, r5
   3f7ac:	cmp	r1, r3
   3f7b0:	bcs	3f7f8 <flatcc_json_printer_struct_vector_field@@Base+0x370>
   3f7b4:	mov	r1, r5
   3f7b8:	mov	r0, r4
   3f7bc:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3f7c0:	ldr	r3, [r4, #20]
   3f7c4:	add	r2, r3, #1
   3f7c8:	b	3f6c0 <flatcc_json_printer_struct_vector_field@@Base+0x238>
   3f7cc:	ldr	r3, [r4, #20]
   3f7d0:	mov	r2, #10
   3f7d4:	mov	r0, r4
   3f7d8:	add	r1, r3, #1
   3f7dc:	str	r1, [r4, #20]
   3f7e0:	strb	r2, [r3]
   3f7e4:	ldr	r3, [r4, #32]
   3f7e8:	sub	r3, r3, #1
   3f7ec:	str	r3, [r4, #32]
   3f7f0:	bl	34188 <flatcc_json_parser_struct_as_root@@Base+0xd6c>
   3f7f4:	b	3f5a8 <flatcc_json_printer_struct_vector_field@@Base+0x120>
   3f7f8:	mov	r2, r5
   3f7fc:	mov	r1, #32
   3f800:	bl	1459c <memset@plt>
   3f804:	ldr	r3, [r4, #20]
   3f808:	add	r3, r3, r5
   3f80c:	add	r2, r3, #1
   3f810:	b	3f6c0 <flatcc_json_printer_struct_vector_field@@Base+0x238>

0003f814 <flatcc_json_printer_string_vector_field@@Base>:
   3f814:	ldr	ip, [r1, #8]
   3f818:	add	r2, r2, #2
   3f81c:	lsl	r2, r2, #1
   3f820:	cmp	ip, r2
   3f824:	bxle	lr
   3f828:	ldr	ip, [r1, #4]
   3f82c:	ldrh	r2, [ip, r2]
   3f830:	cmp	r2, #0
   3f834:	bxeq	lr
   3f838:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3f83c:	ldr	ip, [r1]
   3f840:	strd	r6, [sp, #8]
   3f844:	str	lr, [sp, #28]
   3f848:	strd	r8, [sp, #16]
   3f84c:	str	sl, [sp, #24]
   3f850:	adds	lr, ip, r2
   3f854:	beq	3f9f0 <flatcc_json_printer_string_vector_field@@Base+0x1dc>
   3f858:	ldr	r4, [r1, #16]
   3f85c:	add	r5, r4, #1
   3f860:	cmp	r4, #0
   3f864:	str	r5, [r1, #16]
   3f868:	beq	3f880 <flatcc_json_printer_string_vector_field@@Base+0x6c>
   3f86c:	ldr	r1, [r0, #20]
   3f870:	mov	r4, #44	; 0x2c
   3f874:	add	r5, r1, #1
   3f878:	str	r5, [r0, #20]
   3f87c:	strb	r4, [r1]
   3f880:	mov	r1, r3
   3f884:	ldr	r3, [ip, r2]
   3f888:	mov	r4, r0
   3f88c:	ldr	r2, [sp, #32]
   3f890:	add	r6, lr, r3
   3f894:	ldr	r5, [lr, r3]
   3f898:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   3f89c:	ldr	r2, [r4, #20]
   3f8a0:	mov	r1, #91	; 0x5b
   3f8a4:	ldr	r3, [r4, #32]
   3f8a8:	cmp	r5, #0
   3f8ac:	add	r0, r2, #1
   3f8b0:	add	r3, r3, #1
   3f8b4:	str	r0, [r4, #20]
   3f8b8:	str	r3, [r4, #32]
   3f8bc:	strb	r1, [r2]
   3f8c0:	beq	3f9d0 <flatcc_json_printer_string_vector_field@@Base+0x1bc>
   3f8c4:	ldrb	r1, [r4, #25]
   3f8c8:	ldr	r3, [r4, #20]
   3f8cc:	cmp	r1, #0
   3f8d0:	bne	3fa08 <flatcc_json_printer_string_vector_field@@Base+0x1f4>
   3f8d4:	ldr	r2, [r4, #16]
   3f8d8:	cmp	r2, r3
   3f8dc:	bhi	3f8ec <flatcc_json_printer_string_vector_field@@Base+0xd8>
   3f8e0:	mov	r0, r4
   3f8e4:	ldr	r3, [r4, #44]	; 0x2c
   3f8e8:	blx	r3
   3f8ec:	ldr	r3, [r6, #4]
   3f8f0:	mov	r0, r4
   3f8f4:	sub	r7, r5, #2
   3f8f8:	add	r3, r3, #4
   3f8fc:	add	r1, r6, r3
   3f900:	ldr	r2, [r6, r3]
   3f904:	add	r1, r1, #4
   3f908:	bl	3446c <flatcc_json_parser_struct_as_root@@Base+0x1050>
   3f90c:	cmp	r5, #1
   3f910:	beq	3f9d0 <flatcc_json_printer_string_vector_field@@Base+0x1bc>
   3f914:	add	r6, r6, #8
   3f918:	mov	r8, #44	; 0x2c
   3f91c:	mov	r9, #10
   3f920:	b	3f968 <flatcc_json_printer_string_vector_field@@Base+0x154>
   3f924:	ldr	r3, [r4, #16]
   3f928:	mov	r0, r4
   3f92c:	ldr	r2, [r4, #20]
   3f930:	cmp	r2, r3
   3f934:	bcc	3f940 <flatcc_json_printer_string_vector_field@@Base+0x12c>
   3f938:	ldr	r3, [r4, #44]	; 0x2c
   3f93c:	blx	r3
   3f940:	ldr	r3, [r5]
   3f944:	sub	r7, r7, #1
   3f948:	mov	r0, r4
   3f94c:	add	r6, r6, #4
   3f950:	add	r1, r5, r3
   3f954:	ldr	r2, [r5, r3]
   3f958:	add	r1, r1, #4
   3f95c:	bl	3446c <flatcc_json_parser_struct_as_root@@Base+0x1050>
   3f960:	cmn	r7, #1
   3f964:	beq	3f9d0 <flatcc_json_printer_string_vector_field@@Base+0x1bc>
   3f968:	ldr	r3, [r4, #20]
   3f96c:	mov	r5, r6
   3f970:	add	r2, r3, #1
   3f974:	str	r2, [r4, #20]
   3f978:	strb	r8, [r3]
   3f97c:	ldrb	r1, [r4, #25]
   3f980:	cmp	r1, #0
   3f984:	beq	3f924 <flatcc_json_printer_string_vector_field@@Base+0x110>
   3f988:	ldr	r3, [r4, #20]
   3f98c:	mov	r1, #32
   3f990:	mov	r0, r4
   3f994:	add	r2, r3, #1
   3f998:	str	r2, [r4, #20]
   3f99c:	strb	r9, [r3]
   3f9a0:	ldrb	r2, [r4, #25]
   3f9a4:	ldr	lr, [r4, #16]
   3f9a8:	ldr	sl, [r4, #32]
   3f9ac:	ldr	r3, [r4, #20]
   3f9b0:	mul	sl, sl, r2
   3f9b4:	add	ip, r3, sl
   3f9b8:	mov	r2, sl
   3f9bc:	cmp	lr, ip
   3f9c0:	bcs	3fa48 <flatcc_json_printer_string_vector_field@@Base+0x234>
   3f9c4:	mov	r1, sl
   3f9c8:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3f9cc:	b	3f940 <flatcc_json_printer_string_vector_field@@Base+0x12c>
   3f9d0:	ldrb	r2, [r4, #25]
   3f9d4:	ldr	r3, [r4, #20]
   3f9d8:	cmp	r2, #0
   3f9dc:	add	r2, r3, #1
   3f9e0:	bne	3fa60 <flatcc_json_printer_string_vector_field@@Base+0x24c>
   3f9e4:	mov	r1, #93	; 0x5d
   3f9e8:	str	r2, [r4, #20]
   3f9ec:	strb	r1, [r3]
   3f9f0:	ldrd	r4, [sp]
   3f9f4:	ldrd	r6, [sp, #8]
   3f9f8:	ldrd	r8, [sp, #16]
   3f9fc:	ldr	sl, [sp, #24]
   3fa00:	add	sp, sp, #28
   3fa04:	pop	{pc}		; (ldr pc, [sp], #4)
   3fa08:	add	r1, r3, #1
   3fa0c:	mov	r2, #10
   3fa10:	str	r1, [r4, #20]
   3fa14:	strb	r2, [r3]
   3fa18:	ldrb	r3, [r4, #25]
   3fa1c:	ldr	r2, [r4, #16]
   3fa20:	ldr	r7, [r4, #32]
   3fa24:	ldr	r0, [r4, #20]
   3fa28:	mul	r7, r7, r3
   3fa2c:	add	r3, r0, r7
   3fa30:	cmp	r2, r3
   3fa34:	bcs	3fac8 <flatcc_json_printer_string_vector_field@@Base+0x2b4>
   3fa38:	mov	r1, r7
   3fa3c:	mov	r0, r4
   3fa40:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3fa44:	b	3f8ec <flatcc_json_printer_string_vector_field@@Base+0xd8>
   3fa48:	mov	r0, r3
   3fa4c:	bl	1459c <memset@plt>
   3fa50:	ldr	r3, [r4, #20]
   3fa54:	add	sl, r3, sl
   3fa58:	str	sl, [r4, #20]
   3fa5c:	b	3f940 <flatcc_json_printer_string_vector_field@@Base+0x12c>
   3fa60:	mov	r1, #10
   3fa64:	str	r2, [r4, #20]
   3fa68:	strb	r1, [r3]
   3fa6c:	ldrb	r3, [r4, #25]
   3fa70:	ldr	r2, [r4, #32]
   3fa74:	ldr	r1, [r4, #16]
   3fa78:	ldr	r0, [r4, #20]
   3fa7c:	sub	r2, r2, #1
   3fa80:	mul	r5, r2, r3
   3fa84:	str	r2, [r4, #32]
   3fa88:	add	r3, r0, r5
   3fa8c:	cmp	r1, r3
   3fa90:	bcs	3faac <flatcc_json_printer_string_vector_field@@Base+0x298>
   3fa94:	mov	r1, r5
   3fa98:	mov	r0, r4
   3fa9c:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3faa0:	ldr	r3, [r4, #20]
   3faa4:	add	r2, r3, #1
   3faa8:	b	3f9e4 <flatcc_json_printer_string_vector_field@@Base+0x1d0>
   3faac:	mov	r2, r5
   3fab0:	mov	r1, #32
   3fab4:	bl	1459c <memset@plt>
   3fab8:	ldr	r3, [r4, #20]
   3fabc:	add	r3, r3, r5
   3fac0:	add	r2, r3, #1
   3fac4:	b	3f9e4 <flatcc_json_printer_string_vector_field@@Base+0x1d0>
   3fac8:	mov	r2, r7
   3facc:	mov	r1, #32
   3fad0:	bl	1459c <memset@plt>
   3fad4:	ldr	r3, [r4, #20]
   3fad8:	add	r7, r3, r7
   3fadc:	str	r7, [r4, #20]
   3fae0:	b	3f8ec <flatcc_json_printer_string_vector_field@@Base+0xd8>

0003fae4 <flatcc_json_printer_table_vector_field@@Base>:
   3fae4:	ldr	ip, [r1, #8]
   3fae8:	add	r2, r2, #2
   3faec:	lsl	r2, r2, #1
   3faf0:	cmp	ip, r2
   3faf4:	bxle	lr
   3faf8:	ldr	ip, [r1, #4]
   3fafc:	ldrh	r2, [ip, r2]
   3fb00:	cmp	r2, #0
   3fb04:	bxeq	lr
   3fb08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3fb0c:	strd	r6, [sp, #8]
   3fb10:	str	lr, [sp, #32]
   3fb14:	ldr	lr, [r1]
   3fb18:	strd	r8, [sp, #16]
   3fb1c:	strd	sl, [sp, #24]
   3fb20:	sub	sp, sp, #28
   3fb24:	adds	r6, lr, r2
   3fb28:	beq	3fc64 <flatcc_json_printer_table_vector_field@@Base+0x180>
   3fb2c:	ldr	r4, [r1, #16]
   3fb30:	ldr	ip, [r0, #20]
   3fb34:	cmp	r4, #0
   3fb38:	add	r4, r4, #1
   3fb3c:	str	r4, [r1, #16]
   3fb40:	beq	3fb58 <flatcc_json_printer_table_vector_field@@Base+0x74>
   3fb44:	add	r5, ip, #1
   3fb48:	mov	r4, #44	; 0x2c
   3fb4c:	str	r5, [r0, #20]
   3fb50:	strb	r4, [ip]
   3fb54:	ldr	ip, [r0, #20]
   3fb58:	mov	r7, r1
   3fb5c:	mov	r5, r3
   3fb60:	ldrb	r1, [r0, #25]
   3fb64:	mov	r4, r0
   3fb68:	ldr	r3, [lr, r2]
   3fb6c:	cmp	r1, #0
   3fb70:	add	r8, r6, r3
   3fb74:	ldr	r6, [r6, r3]
   3fb78:	bne	3fca0 <flatcc_json_printer_table_vector_field@@Base+0x1bc>
   3fb7c:	ldr	r3, [r0, #16]
   3fb80:	cmp	r3, ip
   3fb84:	bls	3fc90 <flatcc_json_printer_table_vector_field@@Base+0x1ac>
   3fb88:	mov	r3, #34	; 0x22
   3fb8c:	mov	r1, r5
   3fb90:	strb	r3, [ip]
   3fb94:	ldrb	r3, [r4, #26]
   3fb98:	ldr	r2, [r4, #16]
   3fb9c:	ldr	r0, [r4, #20]
   3fba0:	cmp	r3, #0
   3fba4:	addeq	r0, r0, #1
   3fba8:	ldr	r3, [sp, #64]	; 0x40
   3fbac:	str	r0, [r4, #20]
   3fbb0:	add	r3, r0, r3
   3fbb4:	cmp	r2, r3
   3fbb8:	ldr	r2, [sp, #64]	; 0x40
   3fbbc:	bls	3fc80 <flatcc_json_printer_table_vector_field@@Base+0x19c>
   3fbc0:	bl	14524 <memcpy@plt>
   3fbc4:	ldr	r3, [r4, #20]
   3fbc8:	ldr	r2, [sp, #64]	; 0x40
   3fbcc:	add	r3, r3, r2
   3fbd0:	str	r3, [r4, #20]
   3fbd4:	mov	r2, #34	; 0x22
   3fbd8:	mov	ip, #58	; 0x3a
   3fbdc:	mov	r9, #32
   3fbe0:	mov	r0, #91	; 0x5b
   3fbe4:	strb	r2, [r3]
   3fbe8:	ldrb	r3, [r4, #26]
   3fbec:	ldr	r1, [r4, #20]
   3fbf0:	clz	r3, r3
   3fbf4:	lsr	r3, r3, #5
   3fbf8:	add	r2, r1, r3
   3fbfc:	add	r2, r2, #1
   3fc00:	str	r2, [r4, #20]
   3fc04:	strb	ip, [r1, r3]
   3fc08:	ldr	r3, [r4, #20]
   3fc0c:	strb	r9, [r3]
   3fc10:	ldrb	r3, [r4, #25]
   3fc14:	ldr	ip, [r4, #20]
   3fc18:	ldr	r2, [r4, #32]
   3fc1c:	adds	r3, r3, #0
   3fc20:	movne	r3, #1
   3fc24:	cmp	r6, #0
   3fc28:	add	r1, ip, r3
   3fc2c:	add	r1, r1, #1
   3fc30:	add	r2, r2, #1
   3fc34:	str	r1, [r4, #20]
   3fc38:	str	r2, [r4, #32]
   3fc3c:	strb	r0, [ip, r3]
   3fc40:	bne	3fd30 <flatcc_json_printer_table_vector_field@@Base+0x24c>
   3fc44:	ldr	r3, [r4, #20]
   3fc48:	add	r2, r3, #1
   3fc4c:	ldrb	r1, [r4, #25]
   3fc50:	cmp	r1, #0
   3fc54:	bne	3fce4 <flatcc_json_printer_table_vector_field@@Base+0x200>
   3fc58:	mov	r1, #93	; 0x5d
   3fc5c:	str	r2, [r4, #20]
   3fc60:	strb	r1, [r3]
   3fc64:	add	sp, sp, #28
   3fc68:	ldrd	r4, [sp]
   3fc6c:	ldrd	r6, [sp, #8]
   3fc70:	ldrd	r8, [sp, #16]
   3fc74:	ldrd	sl, [sp, #24]
   3fc78:	add	sp, sp, #32
   3fc7c:	pop	{pc}		; (ldr pc, [sp], #4)
   3fc80:	mov	r0, r4
   3fc84:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   3fc88:	ldr	r3, [r4, #20]
   3fc8c:	b	3fbd4 <flatcc_json_printer_table_vector_field@@Base+0xf0>
   3fc90:	ldr	r3, [r0, #44]	; 0x2c
   3fc94:	blx	r3
   3fc98:	ldr	ip, [r4, #20]
   3fc9c:	b	3fb88 <flatcc_json_printer_table_vector_field@@Base+0xa4>
   3fca0:	add	r2, ip, #1
   3fca4:	mov	r3, #10
   3fca8:	str	r2, [r0, #20]
   3fcac:	strb	r3, [ip]
   3fcb0:	ldrb	r3, [r0, #25]
   3fcb4:	ldr	ip, [r4, #32]
   3fcb8:	ldr	r2, [r0, #16]
   3fcbc:	ldr	r0, [r0, #20]
   3fcc0:	mul	r9, ip, r3
   3fcc4:	add	r3, r0, r9
   3fcc8:	cmp	r2, r3
   3fccc:	bcs	3fefc <flatcc_json_printer_table_vector_field@@Base+0x418>
   3fcd0:	mov	r1, r9
   3fcd4:	mov	r0, r4
   3fcd8:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3fcdc:	ldr	ip, [r4, #20]
   3fce0:	b	3fb88 <flatcc_json_printer_table_vector_field@@Base+0xa4>
   3fce4:	mov	r1, #10
   3fce8:	str	r2, [r4, #20]
   3fcec:	strb	r1, [r3]
   3fcf0:	ldrb	r3, [r4, #25]
   3fcf4:	ldr	r2, [r4, #32]
   3fcf8:	ldr	r1, [r4, #16]
   3fcfc:	ldr	r0, [r4, #20]
   3fd00:	sub	r2, r2, #1
   3fd04:	mul	r5, r2, r3
   3fd08:	str	r2, [r4, #32]
   3fd0c:	add	r3, r0, r5
   3fd10:	cmp	r1, r3
   3fd14:	bcs	3ff18 <flatcc_json_printer_table_vector_field@@Base+0x434>
   3fd18:	mov	r1, r5
   3fd1c:	mov	r0, r4
   3fd20:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3fd24:	ldr	r3, [r4, #20]
   3fd28:	add	r2, r3, #1
   3fd2c:	b	3fc58 <flatcc_json_printer_table_vector_field@@Base+0x174>
   3fd30:	ldr	r2, [r7, #12]
   3fd34:	add	r5, r8, #4
   3fd38:	ldr	r3, [r4, #20]
   3fd3c:	subs	r2, r2, #1
   3fd40:	beq	3ff34 <flatcc_json_printer_table_vector_field@@Base+0x450>
   3fd44:	ldr	r1, [r4, #32]
   3fd48:	add	sl, r3, #1
   3fd4c:	mov	r0, #123	; 0x7b
   3fd50:	mov	lr, #0
   3fd54:	ldr	ip, [r8, #4]
   3fd58:	str	sl, [r4, #20]
   3fd5c:	add	r1, r1, #1
   3fd60:	str	r1, [r4, #32]
   3fd64:	add	r1, sp, #4
   3fd68:	strb	r0, [r3]
   3fd6c:	add	r3, r5, ip
   3fd70:	mov	r0, r4
   3fd74:	str	r2, [sp, #16]
   3fd78:	str	lr, [sp, #20]
   3fd7c:	ldr	r2, [r5, ip]
   3fd80:	str	r3, [sp, #4]
   3fd84:	sub	r3, r3, r2
   3fd88:	ldrh	r2, [r3]
   3fd8c:	str	r3, [sp, #8]
   3fd90:	ldr	r3, [sp, #68]	; 0x44
   3fd94:	str	r2, [sp, #12]
   3fd98:	blx	r3
   3fd9c:	ldrb	r3, [r4, #25]
   3fda0:	cmp	r3, #0
   3fda4:	ldr	r3, [r4, #20]
   3fda8:	bne	3ff48 <flatcc_json_printer_table_vector_field@@Base+0x464>
   3fdac:	add	r1, r3, #1
   3fdb0:	mov	r2, #125	; 0x7d
   3fdb4:	str	r1, [r4, #20]
   3fdb8:	strb	r2, [r3]
   3fdbc:	ldr	r3, [r4, #20]
   3fdc0:	cmp	r6, #1
   3fdc4:	add	r2, r3, #1
   3fdc8:	sub	r6, r6, #2
   3fdcc:	beq	3fc4c <flatcc_json_printer_table_vector_field@@Base+0x168>
   3fdd0:	mov	r8, #44	; 0x2c
   3fdd4:	mov	sl, #123	; 0x7b
   3fdd8:	mov	r9, #0
   3fddc:	b	3fe60 <flatcc_json_printer_table_vector_field@@Base+0x37c>
   3fde0:	ldr	lr, [r4, #20]
   3fde4:	ldr	r2, [r4, #32]
   3fde8:	ldr	ip, [r5]
   3fdec:	add	fp, lr, #1
   3fdf0:	add	r2, r2, #1
   3fdf4:	str	fp, [r4, #20]
   3fdf8:	str	r2, [r4, #32]
   3fdfc:	add	r2, r5, ip
   3fe00:	strb	sl, [lr]
   3fe04:	str	r3, [sp, #16]
   3fe08:	str	r9, [sp, #20]
   3fe0c:	ldr	r3, [r5, ip]
   3fe10:	str	r2, [sp, #4]
   3fe14:	sub	r3, r2, r3
   3fe18:	ldrh	r2, [r3]
   3fe1c:	str	r3, [sp, #8]
   3fe20:	ldr	r3, [sp, #68]	; 0x44
   3fe24:	str	r2, [sp, #12]
   3fe28:	blx	r3
   3fe2c:	ldrb	r3, [r4, #25]
   3fe30:	cmp	r3, #0
   3fe34:	bne	3fe94 <flatcc_json_printer_table_vector_field@@Base+0x3b0>
   3fe38:	ldr	fp, [r4, #20]
   3fe3c:	add	r2, fp, #1
   3fe40:	mov	r3, #125	; 0x7d
   3fe44:	str	r2, [r4, #20]
   3fe48:	strb	r3, [fp]
   3fe4c:	ldr	r3, [r4, #20]
   3fe50:	sub	r6, r6, #1
   3fe54:	cmn	r6, #1
   3fe58:	add	r2, r3, #1
   3fe5c:	beq	3fc4c <flatcc_json_printer_table_vector_field@@Base+0x168>
   3fe60:	str	r2, [r4, #20]
   3fe64:	add	r1, sp, #4
   3fe68:	mov	r0, r4
   3fe6c:	strb	r8, [r3]
   3fe70:	add	r5, r5, #4
   3fe74:	ldr	r3, [r7, #12]
   3fe78:	subs	r3, r3, #1
   3fe7c:	bne	3fde0 <flatcc_json_printer_table_vector_field@@Base+0x2fc>
   3fe80:	ldr	r3, [r4, #36]	; 0x24
   3fe84:	mov	r2, #2
   3fe88:	cmp	r3, #0
   3fe8c:	streq	r2, [r4, #36]	; 0x24
   3fe90:	b	3fe4c <flatcc_json_printer_table_vector_field@@Base+0x368>
   3fe94:	ldr	r3, [r4, #20]
   3fe98:	mov	r2, #10
   3fe9c:	mov	r1, #32
   3fea0:	mov	r0, r4
   3fea4:	add	ip, r3, #1
   3fea8:	str	ip, [r4, #20]
   3feac:	strb	r2, [r3]
   3feb0:	ldrb	fp, [r4, #25]
   3feb4:	ldr	r2, [r4, #32]
   3feb8:	ldr	lr, [r4, #16]
   3febc:	ldr	r3, [r4, #20]
   3fec0:	sub	r2, r2, #1
   3fec4:	mul	fp, r2, fp
   3fec8:	str	r2, [r4, #32]
   3fecc:	add	ip, r3, fp
   3fed0:	mov	r2, fp
   3fed4:	cmp	lr, ip
   3fed8:	bcs	3fee8 <flatcc_json_printer_table_vector_field@@Base+0x404>
   3fedc:	mov	r1, fp
   3fee0:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3fee4:	b	3fe38 <flatcc_json_printer_table_vector_field@@Base+0x354>
   3fee8:	mov	r0, r3
   3feec:	bl	1459c <memset@plt>
   3fef0:	ldr	r3, [r4, #20]
   3fef4:	add	fp, r3, fp
   3fef8:	b	3fe3c <flatcc_json_printer_table_vector_field@@Base+0x358>
   3fefc:	mov	r2, r9
   3ff00:	mov	r1, #32
   3ff04:	bl	1459c <memset@plt>
   3ff08:	ldr	ip, [r4, #20]
   3ff0c:	add	ip, ip, r9
   3ff10:	str	ip, [r4, #20]
   3ff14:	b	3fb88 <flatcc_json_printer_table_vector_field@@Base+0xa4>
   3ff18:	mov	r2, r5
   3ff1c:	mov	r1, #32
   3ff20:	bl	1459c <memset@plt>
   3ff24:	ldr	r3, [r4, #20]
   3ff28:	add	r3, r3, r5
   3ff2c:	add	r2, r3, #1
   3ff30:	b	3fc58 <flatcc_json_printer_table_vector_field@@Base+0x174>
   3ff34:	ldr	r2, [r4, #36]	; 0x24
   3ff38:	cmp	r2, #0
   3ff3c:	moveq	r2, #2
   3ff40:	streq	r2, [r4, #36]	; 0x24
   3ff44:	b	3fdc0 <flatcc_json_printer_table_vector_field@@Base+0x2dc>
   3ff48:	add	r1, r3, #1
   3ff4c:	mov	r2, #10
   3ff50:	str	r1, [r4, #20]
   3ff54:	strb	r2, [r3]
   3ff58:	ldrb	r3, [r4, #25]
   3ff5c:	ldr	r2, [r4, #32]
   3ff60:	ldr	r1, [r4, #16]
   3ff64:	ldr	r0, [r4, #20]
   3ff68:	sub	r2, r2, #1
   3ff6c:	mul	r8, r2, r3
   3ff70:	str	r2, [r4, #32]
   3ff74:	add	r3, r0, r8
   3ff78:	cmp	r1, r3
   3ff7c:	bcs	3ff94 <flatcc_json_printer_table_vector_field@@Base+0x4b0>
   3ff80:	mov	r1, r8
   3ff84:	mov	r0, r4
   3ff88:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   3ff8c:	ldr	r3, [r4, #20]
   3ff90:	b	3fdac <flatcc_json_printer_table_vector_field@@Base+0x2c8>
   3ff94:	mov	r1, r9
   3ff98:	mov	r2, r8
   3ff9c:	bl	1459c <memset@plt>
   3ffa0:	ldr	r3, [r4, #20]
   3ffa4:	add	r3, r3, r8
   3ffa8:	b	3fdac <flatcc_json_printer_table_vector_field@@Base+0x2c8>

0003ffac <flatcc_json_printer_union_vector_field@@Base>:
   3ffac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3ffb0:	mov	r5, r1
   3ffb4:	mov	r4, r0
   3ffb8:	ldr	r1, [r1, #8]
   3ffbc:	strd	r6, [sp, #8]
   3ffc0:	strd	r8, [sp, #16]
   3ffc4:	mov	r9, r2
   3ffc8:	add	r2, r2, #1
   3ffcc:	lsl	r2, r2, #1
   3ffd0:	strd	sl, [sp, #24]
   3ffd4:	mov	fp, r3
   3ffd8:	str	lr, [sp, #32]
   3ffdc:	sub	sp, sp, #140	; 0x8c
   3ffe0:	cmp	r2, r1
   3ffe4:	ldr	r6, [sp, #176]	; 0xb0
   3ffe8:	movge	r7, #0
   3ffec:	bge	40004 <flatcc_json_printer_union_vector_field@@Base+0x58>
   3fff0:	ldr	r3, [r5, #4]
   3fff4:	ldrh	r7, [r3, r2]
   3fff8:	cmp	r7, #0
   3fffc:	ldrne	r3, [r5]
   40000:	addne	r7, r3, r7
   40004:	add	r2, r2, #2
   40008:	ldr	r3, [r5, #12]
   4000c:	cmp	r2, r1
   40010:	bge	401c0 <flatcc_json_printer_union_vector_field@@Base+0x214>
   40014:	ldr	r1, [r5, #4]
   40018:	ldrh	r8, [r1, r2]
   4001c:	cmp	r8, #0
   40020:	beq	401c0 <flatcc_json_printer_union_vector_field@@Base+0x214>
   40024:	ldr	r2, [r5]
   40028:	cmp	r6, #100	; 0x64
   4002c:	add	sl, r2, r8
   40030:	str	r2, [sp, #12]
   40034:	str	r3, [sp, #20]
   40038:	bgt	401cc <flatcc_json_printer_union_vector_field@@Base+0x220>
   4003c:	add	r3, sp, #28
   40040:	mov	r2, r6
   40044:	mov	r0, r3
   40048:	mov	r1, fp
   4004c:	bl	14524 <memcpy@plt>
   40050:	movw	r2, #31296	; 0x7a40
   40054:	movt	r2, #4
   40058:	mov	r3, r0
   4005c:	ldrb	r0, [r2, #4]
   40060:	cmp	sl, #0
   40064:	cmpne	r7, #0
   40068:	add	r1, r3, r6
   4006c:	ldr	r2, [r2]
   40070:	str	r2, [r3, r6]
   40074:	strb	r0, [r1, #4]
   40078:	bne	40098 <flatcc_json_printer_union_vector_field@@Base+0xec>
   4007c:	add	sp, sp, #140	; 0x8c
   40080:	ldrd	r4, [sp]
   40084:	ldrd	r6, [sp, #8]
   40088:	ldrd	r8, [sp, #16]
   4008c:	ldrd	sl, [sp, #24]
   40090:	add	sp, sp, #32
   40094:	pop	{pc}		; (ldr pc, [sp], #4)
   40098:	ldr	r2, [sp, #180]	; 0xb4
   4009c:	add	r0, r6, #5
   400a0:	mov	r1, r5
   400a4:	stm	sp, {r0, r2}
   400a8:	sub	r2, r9, #1
   400ac:	mov	r0, r4
   400b0:	bl	3dcb4 <flatcc_json_printer_uint8_enum_vector_field@@Base>
   400b4:	ldr	r3, [r5, #16]
   400b8:	add	r2, r3, #1
   400bc:	cmp	r3, #0
   400c0:	str	r2, [r5, #16]
   400c4:	beq	400dc <flatcc_json_printer_union_vector_field@@Base+0x130>
   400c8:	ldr	r3, [r4, #20]
   400cc:	mov	r2, #44	; 0x2c
   400d0:	add	r1, r3, #1
   400d4:	str	r1, [r4, #20]
   400d8:	strb	r2, [r3]
   400dc:	ldr	r3, [sp, #12]
   400e0:	mov	r2, r6
   400e4:	mov	r1, fp
   400e8:	mov	r0, r4
   400ec:	ldr	r5, [r7]
   400f0:	ldr	r3, [r3, r8]
   400f4:	add	r6, sl, r3
   400f8:	ldr	r8, [sl, r3]
   400fc:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   40100:	ldr	r2, [r4, #20]
   40104:	mov	r1, #91	; 0x5b
   40108:	ldr	r3, [r4, #32]
   4010c:	cmp	r8, #0
   40110:	add	r0, r2, #1
   40114:	add	r3, r3, #1
   40118:	str	r0, [r4, #20]
   4011c:	str	r3, [r4, #32]
   40120:	strb	r1, [r2]
   40124:	beq	401f8 <flatcc_json_printer_union_vector_field@@Base+0x24c>
   40128:	add	r7, r7, r5
   4012c:	add	r6, r6, #4
   40130:	ldrb	r3, [r7, #4]
   40134:	cmp	r3, #0
   40138:	beq	402a0 <flatcc_json_printer_union_vector_field@@Base+0x2f4>
   4013c:	add	r1, sp, #16
   40140:	mov	r0, r4
   40144:	str	r6, [sp, #16]
   40148:	strb	r3, [sp, #24]
   4014c:	ldr	r3, [sp, #184]	; 0xb8
   40150:	blx	r3
   40154:	ldr	r3, [r4, #20]
   40158:	cmp	r8, #1
   4015c:	add	r5, r7, #4
   40160:	add	r1, r3, #1
   40164:	beq	40200 <flatcc_json_printer_union_vector_field@@Base+0x254>
   40168:	add	r8, r8, #3
   4016c:	mov	sl, #44	; 0x2c
   40170:	add	r7, r7, r8
   40174:	mov	r9, #110	; 0x6e
   40178:	mov	r8, #117	; 0x75
   4017c:	ldrb	r2, [r5, #1]!
   40180:	add	r6, r6, #4
   40184:	str	r1, [r4, #20]
   40188:	strb	sl, [r3]
   4018c:	cmp	r2, #0
   40190:	beq	4021c <flatcc_json_printer_union_vector_field@@Base+0x270>
   40194:	add	r1, sp, #16
   40198:	mov	r0, r4
   4019c:	ldr	r3, [sp, #184]	; 0xb8
   401a0:	str	r6, [sp, #16]
   401a4:	strb	r2, [sp, #24]
   401a8:	blx	r3
   401ac:	ldr	r3, [r4, #20]
   401b0:	cmp	r7, r5
   401b4:	add	r1, r3, #1
   401b8:	bne	4017c <flatcc_json_printer_union_vector_field@@Base+0x1d0>
   401bc:	b	40200 <flatcc_json_printer_union_vector_field@@Base+0x254>
   401c0:	cmp	r6, #100	; 0x64
   401c4:	str	r3, [sp, #20]
   401c8:	ble	4007c <flatcc_json_printer_union_vector_field@@Base+0xd0>
   401cc:	ldr	r3, [r4, #36]	; 0x24
   401d0:	movw	r1, #31184	; 0x79d0
   401d4:	movt	r1, #4
   401d8:	movw	r0, #31268	; 0x7a24
   401dc:	movt	r0, #4
   401e0:	movw	r2, #843	; 0x34b
   401e4:	cmp	r3, #0
   401e8:	moveq	r3, #1
   401ec:	streq	r3, [r4, #36]	; 0x24
   401f0:	ldr	r3, [pc, #248]	; 402f0 <flatcc_json_printer_union_vector_field@@Base+0x344>
   401f4:	bl	145f0 <__assert_fail@plt>
   401f8:	ldr	r3, [r4, #20]
   401fc:	add	r1, r3, #1
   40200:	ldrb	r2, [r4, #25]
   40204:	cmp	r2, #0
   40208:	bne	40274 <flatcc_json_printer_union_vector_field@@Base+0x2c8>
   4020c:	mov	r2, #93	; 0x5d
   40210:	str	r1, [r4, #20]
   40214:	strb	r2, [r3]
   40218:	b	4007c <flatcc_json_printer_union_vector_field@@Base+0xd0>
   4021c:	ldr	r3, [r4, #20]
   40220:	mov	r2, #108	; 0x6c
   40224:	cmp	r7, r5
   40228:	add	r1, r3, #1
   4022c:	str	r1, [r4, #20]
   40230:	strb	r9, [r3]
   40234:	ldr	r3, [r4, #20]
   40238:	add	r1, r3, #1
   4023c:	str	r1, [r4, #20]
   40240:	strb	r8, [r3]
   40244:	ldr	r3, [r4, #20]
   40248:	add	r1, r3, #1
   4024c:	str	r1, [r4, #20]
   40250:	strb	r2, [r3]
   40254:	ldr	r3, [r4, #20]
   40258:	add	r1, r3, #1
   4025c:	str	r1, [r4, #20]
   40260:	strb	r2, [r3]
   40264:	ldr	r3, [r4, #20]
   40268:	add	r1, r3, #1
   4026c:	bne	4017c <flatcc_json_printer_union_vector_field@@Base+0x1d0>
   40270:	b	40200 <flatcc_json_printer_union_vector_field@@Base+0x254>
   40274:	mov	r2, #10
   40278:	str	r1, [r4, #20]
   4027c:	mov	r0, r4
   40280:	strb	r2, [r3]
   40284:	ldr	r3, [r4, #32]
   40288:	sub	r3, r3, #1
   4028c:	str	r3, [r4, #32]
   40290:	bl	34188 <flatcc_json_parser_struct_as_root@@Base+0xd6c>
   40294:	ldr	r3, [r4, #20]
   40298:	add	r1, r3, #1
   4029c:	b	4020c <flatcc_json_printer_union_vector_field@@Base+0x260>
   402a0:	ldr	r3, [r4, #20]
   402a4:	mov	r0, #110	; 0x6e
   402a8:	mov	r1, #117	; 0x75
   402ac:	mov	r2, #108	; 0x6c
   402b0:	add	ip, r3, #1
   402b4:	str	ip, [r4, #20]
   402b8:	strb	r0, [r3]
   402bc:	ldr	r3, [r4, #20]
   402c0:	add	r0, r3, #1
   402c4:	str	r0, [r4, #20]
   402c8:	strb	r1, [r3]
   402cc:	ldr	r3, [r4, #20]
   402d0:	add	r1, r3, #1
   402d4:	str	r1, [r4, #20]
   402d8:	strb	r2, [r3]
   402dc:	ldr	r3, [r4, #20]
   402e0:	add	r1, r3, #1
   402e4:	str	r1, [r4, #20]
   402e8:	strb	r2, [r3]
   402ec:	b	40154 <flatcc_json_printer_union_vector_field@@Base+0x1a8>
   402f0:	andeq	r7, r4, r8, lsr r8

000402f4 <flatcc_json_printer_table_field@@Base>:
   402f4:	ldr	ip, [r1, #8]
   402f8:	add	r2, r2, #2
   402fc:	lsl	r2, r2, #1
   40300:	cmp	r2, ip
   40304:	bxge	lr
   40308:	strd	r4, [sp, #-32]!	; 0xffffffe0
   4030c:	ldr	ip, [r1, #4]
   40310:	strd	r6, [sp, #8]
   40314:	strd	r8, [sp, #16]
   40318:	str	sl, [sp, #24]
   4031c:	str	lr, [sp, #28]
   40320:	sub	sp, sp, #24
   40324:	ldrh	r6, [ip, r2]
   40328:	cmp	r6, #0
   4032c:	beq	404ac <flatcc_json_printer_table_field@@Base+0x1b8>
   40330:	ldr	r8, [r1]
   40334:	adds	r7, r8, r6
   40338:	beq	404ac <flatcc_json_printer_table_field@@Base+0x1b8>
   4033c:	ldr	ip, [r1, #16]
   40340:	ldr	r2, [r0, #20]
   40344:	cmp	ip, #0
   40348:	add	ip, ip, #1
   4034c:	str	ip, [r1, #16]
   40350:	beq	40368 <flatcc_json_printer_table_field@@Base+0x74>
   40354:	add	lr, r2, #1
   40358:	mov	ip, #44	; 0x2c
   4035c:	str	lr, [r0, #20]
   40360:	strb	ip, [r2]
   40364:	ldr	r2, [r0, #20]
   40368:	mov	r5, r1
   4036c:	mov	r9, r3
   40370:	ldrb	r1, [r0, #25]
   40374:	mov	r4, r0
   40378:	cmp	r1, #0
   4037c:	bne	404fc <flatcc_json_printer_table_field@@Base+0x208>
   40380:	ldr	r3, [r0, #16]
   40384:	cmp	r3, r2
   40388:	bls	404d8 <flatcc_json_printer_table_field@@Base+0x1e4>
   4038c:	mov	r3, #34	; 0x22
   40390:	mov	r1, r9
   40394:	strb	r3, [r2]
   40398:	ldrb	r3, [r4, #26]
   4039c:	ldr	r2, [r4, #16]
   403a0:	ldr	r0, [r4, #20]
   403a4:	cmp	r3, #0
   403a8:	addeq	r0, r0, #1
   403ac:	ldr	r3, [sp, #56]	; 0x38
   403b0:	str	r0, [r4, #20]
   403b4:	add	r3, r0, r3
   403b8:	cmp	r2, r3
   403bc:	ldr	r2, [sp, #56]	; 0x38
   403c0:	bls	404c8 <flatcc_json_printer_table_field@@Base+0x1d4>
   403c4:	bl	14524 <memcpy@plt>
   403c8:	ldr	r3, [r4, #20]
   403cc:	ldr	r2, [sp, #56]	; 0x38
   403d0:	add	r3, r3, r2
   403d4:	str	r3, [r4, #20]
   403d8:	mov	r2, #34	; 0x22
   403dc:	mov	r0, #58	; 0x3a
   403e0:	mov	r9, #32
   403e4:	strb	r2, [r3]
   403e8:	ldrb	r3, [r4, #26]
   403ec:	ldr	r1, [r4, #20]
   403f0:	clz	r3, r3
   403f4:	lsr	r3, r3, #5
   403f8:	add	r2, r1, r3
   403fc:	add	r2, r2, #1
   40400:	str	r2, [r4, #20]
   40404:	strb	r0, [r1, r3]
   40408:	ldr	r3, [r4, #20]
   4040c:	strb	r9, [r3]
   40410:	ldrb	r3, [r4, #25]
   40414:	ldr	r0, [r4, #20]
   40418:	ldr	r1, [r5, #12]
   4041c:	adds	r3, r3, #0
   40420:	movne	r3, #1
   40424:	add	r2, r0, r3
   40428:	subs	ip, r1, #1
   4042c:	str	r2, [r4, #20]
   40430:	beq	404e8 <flatcc_json_printer_table_field@@Base+0x1f4>
   40434:	ldr	lr, [r4, #32]
   40438:	add	r2, r2, #1
   4043c:	add	r1, sp, #4
   40440:	ldr	r5, [r8, r6]
   40444:	mov	r6, #0
   40448:	mov	r8, #123	; 0x7b
   4044c:	str	r2, [r4, #20]
   40450:	add	r2, lr, #1
   40454:	str	r2, [r4, #32]
   40458:	strb	r8, [r0, r3]
   4045c:	add	r3, r7, r5
   40460:	mov	r0, r4
   40464:	str	ip, [sp, #16]
   40468:	str	r6, [sp, #20]
   4046c:	ldr	r2, [r7, r5]
   40470:	str	r3, [sp, #4]
   40474:	sub	r3, r3, r2
   40478:	ldrh	r2, [r3]
   4047c:	str	r3, [sp, #8]
   40480:	ldr	r3, [sp, #60]	; 0x3c
   40484:	str	r2, [sp, #12]
   40488:	blx	r3
   4048c:	ldrb	r3, [r4, #25]
   40490:	cmp	r3, r6
   40494:	ldr	r3, [r4, #20]
   40498:	bne	40540 <flatcc_json_printer_table_field@@Base+0x24c>
   4049c:	add	r1, r3, #1
   404a0:	mov	r2, #125	; 0x7d
   404a4:	str	r1, [r4, #20]
   404a8:	strb	r2, [r3]
   404ac:	add	sp, sp, #24
   404b0:	ldrd	r4, [sp]
   404b4:	ldrd	r6, [sp, #8]
   404b8:	ldrd	r8, [sp, #16]
   404bc:	ldr	sl, [sp, #24]
   404c0:	add	sp, sp, #28
   404c4:	pop	{pc}		; (ldr pc, [sp], #4)
   404c8:	mov	r0, r4
   404cc:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   404d0:	ldr	r3, [r4, #20]
   404d4:	b	403d8 <flatcc_json_printer_table_field@@Base+0xe4>
   404d8:	ldr	r3, [r0, #44]	; 0x2c
   404dc:	blx	r3
   404e0:	ldr	r2, [r4, #20]
   404e4:	b	4038c <flatcc_json_printer_table_field@@Base+0x98>
   404e8:	ldr	r3, [r4, #36]	; 0x24
   404ec:	cmp	r3, #0
   404f0:	moveq	r3, #2
   404f4:	streq	r3, [r4, #36]	; 0x24
   404f8:	b	404ac <flatcc_json_printer_table_field@@Base+0x1b8>
   404fc:	add	r1, r2, #1
   40500:	mov	r3, #10
   40504:	str	r1, [r0, #20]
   40508:	strb	r3, [r2]
   4050c:	ldrb	r3, [r0, #25]
   40510:	ldr	r2, [r4, #32]
   40514:	ldr	r1, [r0, #16]
   40518:	ldr	r0, [r0, #20]
   4051c:	mul	sl, r2, r3
   40520:	add	r3, r0, sl
   40524:	cmp	r1, r3
   40528:	bcs	4058c <flatcc_json_printer_table_field@@Base+0x298>
   4052c:	mov	r1, sl
   40530:	mov	r0, r4
   40534:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   40538:	ldr	r2, [r4, #20]
   4053c:	b	4038c <flatcc_json_printer_table_field@@Base+0x98>
   40540:	add	r1, r3, #1
   40544:	mov	r2, #10
   40548:	str	r1, [r4, #20]
   4054c:	strb	r2, [r3]
   40550:	ldrb	r3, [r4, #25]
   40554:	ldr	r2, [r4, #32]
   40558:	ldr	r1, [r4, #16]
   4055c:	ldr	r0, [r4, #20]
   40560:	sub	r2, r2, #1
   40564:	mul	r5, r2, r3
   40568:	str	r2, [r4, #32]
   4056c:	add	r3, r0, r5
   40570:	cmp	r1, r3
   40574:	bcs	405a8 <flatcc_json_printer_table_field@@Base+0x2b4>
   40578:	mov	r1, r5
   4057c:	mov	r0, r4
   40580:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   40584:	ldr	r3, [r4, #20]
   40588:	b	4049c <flatcc_json_printer_table_field@@Base+0x1a8>
   4058c:	mov	r2, sl
   40590:	mov	r1, #32
   40594:	bl	1459c <memset@plt>
   40598:	ldr	r2, [r4, #20]
   4059c:	add	r2, r2, sl
   405a0:	str	r2, [r4, #20]
   405a4:	b	4038c <flatcc_json_printer_table_field@@Base+0x98>
   405a8:	mov	r1, r9
   405ac:	mov	r2, r5
   405b0:	bl	1459c <memset@plt>
   405b4:	ldr	r3, [r4, #20]
   405b8:	add	r3, r3, r5
   405bc:	b	4049c <flatcc_json_printer_table_field@@Base+0x1a8>

000405c0 <flatcc_json_printer_union_field@@Base>:
   405c0:	ldr	ip, [r1, #8]
   405c4:	add	r2, r2, #1
   405c8:	lsl	r2, r2, #1
   405cc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   405d0:	strd	r6, [sp, #8]
   405d4:	strd	r8, [sp, #16]
   405d8:	str	sl, [sp, #24]
   405dc:	cmp	r2, ip
   405e0:	str	lr, [sp, #28]
   405e4:	sub	sp, sp, #16
   405e8:	movge	lr, #0
   405ec:	ldr	r6, [sp, #48]	; 0x30
   405f0:	bge	40608 <flatcc_json_printer_union_field@@Base+0x48>
   405f4:	ldr	lr, [r1, #4]
   405f8:	ldrh	lr, [lr, r2]
   405fc:	cmp	lr, #0
   40600:	ldrne	r4, [r1]
   40604:	addne	lr, r4, lr
   40608:	add	r2, r2, #2
   4060c:	cmp	r2, ip
   40610:	bge	407c4 <flatcc_json_printer_union_field@@Base+0x204>
   40614:	ldr	ip, [r1, #4]
   40618:	ldrh	r2, [ip, r2]
   4061c:	cmp	r2, #0
   40620:	beq	407c4 <flatcc_json_printer_union_field@@Base+0x204>
   40624:	ldr	r8, [r1]
   40628:	adds	r8, r8, r2
   4062c:	moveq	r2, #1
   40630:	movne	r2, #0
   40634:	cmp	lr, #0
   40638:	moveq	r2, #1
   4063c:	cmp	r2, #0
   40640:	bne	407c4 <flatcc_json_printer_union_field@@Base+0x204>
   40644:	ldr	ip, [r1, #16]
   40648:	ldrb	r9, [lr]
   4064c:	ldr	r2, [r0, #20]
   40650:	cmp	ip, #0
   40654:	add	ip, ip, #1
   40658:	str	ip, [r1, #16]
   4065c:	beq	40674 <flatcc_json_printer_union_field@@Base+0xb4>
   40660:	add	lr, r2, #1
   40664:	mov	ip, #44	; 0x2c
   40668:	str	lr, [r0, #20]
   4066c:	strb	ip, [r2]
   40670:	ldr	r2, [r0, #20]
   40674:	mov	r5, r1
   40678:	mov	r7, r3
   4067c:	ldrb	r1, [r0, #25]
   40680:	mov	r4, r0
   40684:	cmp	r1, #0
   40688:	bne	407e0 <flatcc_json_printer_union_field@@Base+0x220>
   4068c:	ldr	r3, [r0, #16]
   40690:	cmp	r3, r2
   40694:	bhi	406a4 <flatcc_json_printer_union_field@@Base+0xe4>
   40698:	ldr	r3, [r0, #44]	; 0x2c
   4069c:	blx	r3
   406a0:	ldr	r2, [r4, #20]
   406a4:	mov	r3, #34	; 0x22
   406a8:	mov	r1, r7
   406ac:	strb	r3, [r2]
   406b0:	ldrb	r3, [r4, #26]
   406b4:	ldr	r2, [r4, #16]
   406b8:	ldr	r0, [r4, #20]
   406bc:	cmp	r3, #0
   406c0:	addeq	r0, r0, #1
   406c4:	add	r3, r0, r6
   406c8:	cmp	r2, r3
   406cc:	mov	r2, r6
   406d0:	str	r0, [r4, #20]
   406d4:	bls	4084c <flatcc_json_printer_union_field@@Base+0x28c>
   406d8:	bl	14524 <memcpy@plt>
   406dc:	ldr	r3, [r4, #20]
   406e0:	add	r3, r3, r6
   406e4:	str	r3, [r4, #20]
   406e8:	ldr	r1, [r4, #16]
   406ec:	add	r2, r3, #5
   406f0:	cmp	r1, r2
   406f4:	bhi	40824 <flatcc_json_printer_union_field@@Base+0x264>
   406f8:	movw	r1, #31296	; 0x7a40
   406fc:	movt	r1, #4
   40700:	mov	r2, #5
   40704:	mov	r0, r4
   40708:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   4070c:	ldr	r3, [r4, #20]
   40710:	mov	r2, #34	; 0x22
   40714:	mov	ip, #58	; 0x3a
   40718:	mov	r0, #32
   4071c:	strb	r2, [r3]
   40720:	ldrb	r2, [r4, #26]
   40724:	ldr	r1, [r4, #20]
   40728:	clz	r2, r2
   4072c:	lsr	r2, r2, #5
   40730:	add	r3, r1, r2
   40734:	add	r3, r3, #1
   40738:	str	r3, [r4, #20]
   4073c:	strb	ip, [r1, r2]
   40740:	ldr	r3, [r4, #20]
   40744:	strb	r0, [r3]
   40748:	ldrb	r2, [r4, #25]
   4074c:	ldr	r1, [r4, #20]
   40750:	ldrb	r3, [r4, #27]
   40754:	cmp	r2, #0
   40758:	addne	r1, r1, #1
   4075c:	cmp	r3, #0
   40760:	str	r1, [r4, #20]
   40764:	bne	4085c <flatcc_json_printer_union_field@@Base+0x29c>
   40768:	mov	r1, r9
   4076c:	mov	r0, r4
   40770:	ldr	r3, [sp, #52]	; 0x34
   40774:	blx	r3
   40778:	cmp	r9, #0
   4077c:	beq	407c4 <flatcc_json_printer_union_field@@Base+0x204>
   40780:	ldr	r3, [r4, #20]
   40784:	mov	ip, #44	; 0x2c
   40788:	mov	r1, r7
   4078c:	mov	r0, r4
   40790:	mov	r2, r6
   40794:	add	lr, r3, #1
   40798:	str	lr, [r4, #20]
   4079c:	strb	ip, [r3]
   407a0:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   407a4:	ldr	r3, [r5, #12]
   407a8:	mov	r0, r4
   407ac:	add	r1, sp, #4
   407b0:	str	r8, [sp, #4]
   407b4:	str	r3, [sp, #8]
   407b8:	ldr	r3, [sp, #56]	; 0x38
   407bc:	strb	r9, [sp, #12]
   407c0:	blx	r3
   407c4:	add	sp, sp, #16
   407c8:	ldrd	r4, [sp]
   407cc:	ldrd	r6, [sp, #8]
   407d0:	ldrd	r8, [sp, #16]
   407d4:	ldr	sl, [sp, #24]
   407d8:	add	sp, sp, #28
   407dc:	pop	{pc}		; (ldr pc, [sp], #4)
   407e0:	add	r1, r2, #1
   407e4:	mov	r3, #10
   407e8:	str	r1, [r0, #20]
   407ec:	strb	r3, [r2]
   407f0:	ldrb	r3, [r0, #25]
   407f4:	ldr	r2, [r4, #32]
   407f8:	ldr	r1, [r0, #16]
   407fc:	ldr	r0, [r0, #20]
   40800:	mul	sl, r2, r3
   40804:	add	r3, r0, sl
   40808:	cmp	r1, r3
   4080c:	bcs	40874 <flatcc_json_printer_union_field@@Base+0x2b4>
   40810:	mov	r1, sl
   40814:	mov	r0, r4
   40818:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   4081c:	ldr	r2, [r4, #20]
   40820:	b	406a4 <flatcc_json_printer_union_field@@Base+0xe4>
   40824:	movw	r2, #31296	; 0x7a40
   40828:	movt	r2, #4
   4082c:	ldr	r1, [r2]
   40830:	ldrb	r2, [r2, #4]
   40834:	str	r1, [r3]
   40838:	strb	r2, [r3, #4]
   4083c:	ldr	r3, [r4, #20]
   40840:	add	r3, r3, #5
   40844:	str	r3, [r4, #20]
   40848:	b	40710 <flatcc_json_printer_union_field@@Base+0x150>
   4084c:	mov	r0, r4
   40850:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   40854:	ldr	r3, [r4, #20]
   40858:	b	406e8 <flatcc_json_printer_union_field@@Base+0x128>
   4085c:	mov	r0, r9
   40860:	bl	3436c <flatcc_json_parser_struct_as_root@@Base+0xf50>
   40864:	ldr	r3, [r4, #20]
   40868:	add	r0, r3, r0
   4086c:	str	r0, [r4, #20]
   40870:	b	40778 <flatcc_json_printer_union_field@@Base+0x1b8>
   40874:	mov	r2, sl
   40878:	mov	r1, #32
   4087c:	bl	1459c <memset@plt>
   40880:	ldr	r2, [r4, #20]
   40884:	add	r2, r2, sl
   40888:	str	r2, [r4, #20]
   4088c:	b	406a4 <flatcc_json_printer_union_field@@Base+0xe4>

00040890 <flatcc_json_printer_union_table@@Base>:
   40890:	ldr	r3, [r1, #4]
   40894:	strd	r4, [sp, #-24]!	; 0xffffffe8
   40898:	mov	r4, r0
   4089c:	strd	r6, [sp, #8]
   408a0:	str	r8, [sp, #16]
   408a4:	str	lr, [sp, #20]
   408a8:	sub	sp, sp, #24
   408ac:	subs	ip, r3, #1
   408b0:	beq	40990 <flatcc_json_printer_union_table@@Base+0x100>
   408b4:	ldr	lr, [r1]
   408b8:	mov	r6, #0
   408bc:	mov	r7, #123	; 0x7b
   408c0:	ldr	r1, [r0, #20]
   408c4:	ldr	r3, [r0, #32]
   408c8:	ldr	r5, [lr]
   408cc:	add	r8, r1, #1
   408d0:	add	r3, r3, #1
   408d4:	str	r8, [r0, #20]
   408d8:	str	r3, [r0, #32]
   408dc:	add	r3, lr, r5
   408e0:	strb	r7, [r1]
   408e4:	add	r1, sp, #4
   408e8:	str	ip, [sp, #16]
   408ec:	str	r6, [sp, #20]
   408f0:	ldr	ip, [lr, r5]
   408f4:	str	r3, [sp, #4]
   408f8:	sub	r3, r3, ip
   408fc:	ldrh	ip, [r3]
   40900:	str	r3, [sp, #8]
   40904:	str	ip, [sp, #12]
   40908:	blx	r2
   4090c:	ldrb	r3, [r4, #25]
   40910:	cmp	r3, r6
   40914:	bne	40944 <flatcc_json_printer_union_table@@Base+0xb4>
   40918:	ldr	r1, [r4, #20]
   4091c:	add	r2, r1, #1
   40920:	mov	r3, #125	; 0x7d
   40924:	str	r2, [r4, #20]
   40928:	strb	r3, [r1]
   4092c:	add	sp, sp, #24
   40930:	ldrd	r4, [sp]
   40934:	ldrd	r6, [sp, #8]
   40938:	ldr	r8, [sp, #16]
   4093c:	add	sp, sp, #20
   40940:	pop	{pc}		; (ldr pc, [sp], #4)
   40944:	ldr	r3, [r4, #20]
   40948:	mov	r2, #10
   4094c:	add	r1, r3, #1
   40950:	str	r1, [r4, #20]
   40954:	strb	r2, [r3]
   40958:	ldrb	r1, [r4, #25]
   4095c:	ldr	r3, [r4, #32]
   40960:	ldr	r2, [r4, #16]
   40964:	ldr	r0, [r4, #20]
   40968:	sub	r3, r3, #1
   4096c:	mul	r5, r3, r1
   40970:	str	r3, [r4, #32]
   40974:	add	r3, r0, r5
   40978:	cmp	r2, r3
   4097c:	bcs	409a4 <flatcc_json_printer_union_table@@Base+0x114>
   40980:	mov	r1, r5
   40984:	mov	r0, r4
   40988:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   4098c:	b	40918 <flatcc_json_printer_union_table@@Base+0x88>
   40990:	ldr	r3, [r0, #36]	; 0x24
   40994:	cmp	r3, #0
   40998:	moveq	r3, #2
   4099c:	streq	r3, [r0, #36]	; 0x24
   409a0:	b	4092c <flatcc_json_printer_union_table@@Base+0x9c>
   409a4:	mov	r1, #32
   409a8:	mov	r2, r5
   409ac:	bl	1459c <memset@plt>
   409b0:	ldr	r1, [r4, #20]
   409b4:	add	r1, r1, r5
   409b8:	b	4091c <flatcc_json_printer_union_table@@Base+0x8c>

000409bc <flatcc_json_printer_union_struct@@Base>:
   409bc:	ldr	ip, [r0, #20]
   409c0:	strd	r4, [sp, #-16]!
   409c4:	mov	r4, r0
   409c8:	ldr	r3, [r0, #32]
   409cc:	str	r6, [sp, #8]
   409d0:	str	lr, [sp, #12]
   409d4:	mov	lr, #123	; 0x7b
   409d8:	add	r5, ip, #1
   409dc:	add	r3, r3, #1
   409e0:	str	r5, [r0, #20]
   409e4:	str	r3, [r0, #32]
   409e8:	strb	lr, [ip]
   409ec:	ldr	r3, [r1]
   409f0:	ldr	r1, [r3]
   409f4:	add	r1, r3, r1
   409f8:	blx	r2
   409fc:	ldrb	r3, [r4, #25]
   40a00:	cmp	r3, #0
   40a04:	bne	40a2c <flatcc_json_printer_union_struct@@Base+0x70>
   40a08:	ldr	r1, [r4, #20]
   40a0c:	add	r2, r1, #1
   40a10:	mov	r3, #125	; 0x7d
   40a14:	str	r2, [r4, #20]
   40a18:	strb	r3, [r1]
   40a1c:	ldrd	r4, [sp]
   40a20:	ldr	r6, [sp, #8]
   40a24:	add	sp, sp, #12
   40a28:	pop	{pc}		; (ldr pc, [sp], #4)
   40a2c:	ldr	r3, [r4, #20]
   40a30:	mov	r2, #10
   40a34:	add	r1, r3, #1
   40a38:	str	r1, [r4, #20]
   40a3c:	strb	r2, [r3]
   40a40:	ldrb	r1, [r4, #25]
   40a44:	ldr	r3, [r4, #32]
   40a48:	ldr	r2, [r4, #16]
   40a4c:	ldr	r0, [r4, #20]
   40a50:	sub	r3, r3, #1
   40a54:	mul	r5, r3, r1
   40a58:	str	r3, [r4, #32]
   40a5c:	add	r3, r0, r5
   40a60:	cmp	r2, r3
   40a64:	bcs	40a78 <flatcc_json_printer_union_struct@@Base+0xbc>
   40a68:	mov	r1, r5
   40a6c:	mov	r0, r4
   40a70:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   40a74:	b	40a08 <flatcc_json_printer_union_struct@@Base+0x4c>
   40a78:	mov	r1, #32
   40a7c:	mov	r2, r5
   40a80:	bl	1459c <memset@plt>
   40a84:	ldr	r1, [r4, #20]
   40a88:	add	r1, r1, r5
   40a8c:	b	40a0c <flatcc_json_printer_union_struct@@Base+0x50>

00040a90 <flatcc_json_printer_union_string@@Base>:
   40a90:	ldr	r3, [r1]
   40a94:	ldr	r2, [r3]
   40a98:	add	r1, r3, r2
   40a9c:	ldr	r2, [r3, r2]
   40aa0:	add	r1, r1, #4
   40aa4:	b	3446c <flatcc_json_parser_struct_as_root@@Base+0x1050>

00040aa8 <flatcc_json_printer_embedded_struct_field@@Base>:
   40aa8:	cmp	r1, #0
   40aac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   40ab0:	mov	r4, r0
   40ab4:	strd	r6, [sp, #8]
   40ab8:	mov	r7, r3
   40abc:	strd	r8, [sp, #16]
   40ac0:	mov	r8, r2
   40ac4:	str	sl, [sp, #24]
   40ac8:	str	lr, [sp, #28]
   40acc:	ldr	r2, [r0, #20]
   40ad0:	ldr	r5, [sp, #36]	; 0x24
   40ad4:	ldr	r6, [sp, #40]	; 0x28
   40ad8:	beq	40af0 <flatcc_json_printer_embedded_struct_field@@Base+0x48>
   40adc:	add	r1, r2, #1
   40ae0:	mov	r3, #44	; 0x2c
   40ae4:	str	r1, [r0, #20]
   40ae8:	strb	r3, [r2]
   40aec:	ldr	r2, [r0, #20]
   40af0:	ldrb	r1, [r4, #25]
   40af4:	cmp	r1, #0
   40af8:	bne	40c64 <flatcc_json_printer_embedded_struct_field@@Base+0x1bc>
   40afc:	ldr	r3, [r4, #16]
   40b00:	cmp	r3, r2
   40b04:	bhi	40b18 <flatcc_json_printer_embedded_struct_field@@Base+0x70>
   40b08:	mov	r0, r4
   40b0c:	ldr	r3, [r4, #44]	; 0x2c
   40b10:	blx	r3
   40b14:	ldr	r2, [r4, #20]
   40b18:	mov	r3, #34	; 0x22
   40b1c:	ldr	r1, [sp, #32]
   40b20:	strb	r3, [r2]
   40b24:	ldrb	r3, [r4, #26]
   40b28:	ldr	r2, [r4, #16]
   40b2c:	ldr	r0, [r4, #20]
   40b30:	cmp	r3, #0
   40b34:	addeq	r0, r0, #1
   40b38:	add	r3, r0, r5
   40b3c:	cmp	r2, r3
   40b40:	mov	r2, r5
   40b44:	str	r0, [r4, #20]
   40b48:	bhi	40c04 <flatcc_json_printer_embedded_struct_field@@Base+0x15c>
   40b4c:	mov	r0, r4
   40b50:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   40b54:	ldr	r5, [r4, #20]
   40b58:	mov	r3, #34	; 0x22
   40b5c:	mov	ip, #58	; 0x3a
   40b60:	add	r1, r8, r7
   40b64:	mov	r7, #32
   40b68:	strb	r3, [r5]
   40b6c:	mov	lr, #123	; 0x7b
   40b70:	mov	r0, r4
   40b74:	ldrb	r3, [r4, #26]
   40b78:	ldr	r5, [r4, #20]
   40b7c:	clz	r3, r3
   40b80:	lsr	r3, r3, #5
   40b84:	add	r2, r5, r3
   40b88:	add	r2, r2, #1
   40b8c:	str	r2, [r4, #20]
   40b90:	strb	ip, [r5, r3]
   40b94:	ldr	r3, [r4, #20]
   40b98:	strb	r7, [r3]
   40b9c:	ldrb	r3, [r4, #25]
   40ba0:	ldr	r5, [r4, #20]
   40ba4:	ldr	r2, [r4, #32]
   40ba8:	adds	r3, r3, #0
   40bac:	movne	r3, #1
   40bb0:	add	ip, r5, r3
   40bb4:	add	ip, ip, #1
   40bb8:	add	r2, r2, #1
   40bbc:	str	ip, [r4, #20]
   40bc0:	str	r2, [r4, #32]
   40bc4:	strb	lr, [r5, r3]
   40bc8:	blx	r6
   40bcc:	ldrb	r3, [r4, #25]
   40bd0:	cmp	r3, #0
   40bd4:	bne	40c18 <flatcc_json_printer_embedded_struct_field@@Base+0x170>
   40bd8:	ldr	r1, [r4, #20]
   40bdc:	add	r2, r1, #1
   40be0:	mov	r3, #125	; 0x7d
   40be4:	str	r2, [r4, #20]
   40be8:	strb	r3, [r1]
   40bec:	ldrd	r4, [sp]
   40bf0:	ldrd	r6, [sp, #8]
   40bf4:	ldrd	r8, [sp, #16]
   40bf8:	ldr	sl, [sp, #24]
   40bfc:	add	sp, sp, #28
   40c00:	pop	{pc}		; (ldr pc, [sp], #4)
   40c04:	bl	14524 <memcpy@plt>
   40c08:	ldr	r3, [r4, #20]
   40c0c:	add	r5, r3, r5
   40c10:	str	r5, [r4, #20]
   40c14:	b	40b58 <flatcc_json_printer_embedded_struct_field@@Base+0xb0>
   40c18:	ldr	r3, [r4, #20]
   40c1c:	mov	r2, #10
   40c20:	add	r1, r3, #1
   40c24:	str	r1, [r4, #20]
   40c28:	strb	r2, [r3]
   40c2c:	ldrb	r1, [r4, #25]
   40c30:	ldr	r3, [r4, #32]
   40c34:	ldr	r2, [r4, #16]
   40c38:	ldr	r0, [r4, #20]
   40c3c:	sub	r3, r3, #1
   40c40:	mul	r5, r3, r1
   40c44:	str	r3, [r4, #32]
   40c48:	add	r3, r0, r5
   40c4c:	cmp	r2, r3
   40c50:	bcs	40cc4 <flatcc_json_printer_embedded_struct_field@@Base+0x21c>
   40c54:	mov	r1, r5
   40c58:	mov	r0, r4
   40c5c:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   40c60:	b	40bd8 <flatcc_json_printer_embedded_struct_field@@Base+0x130>
   40c64:	add	r1, r2, #1
   40c68:	mov	r3, #10
   40c6c:	str	r1, [r4, #20]
   40c70:	strb	r3, [r2]
   40c74:	ldrb	r3, [r4, #25]
   40c78:	ldr	r1, [r4, #16]
   40c7c:	ldr	r2, [r4, #32]
   40c80:	ldr	r0, [r4, #20]
   40c84:	mul	r9, r2, r3
   40c88:	add	r3, r0, r9
   40c8c:	cmp	r1, r3
   40c90:	bcs	40ca8 <flatcc_json_printer_embedded_struct_field@@Base+0x200>
   40c94:	mov	r1, r9
   40c98:	mov	r0, r4
   40c9c:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   40ca0:	ldr	r2, [r4, #20]
   40ca4:	b	40b18 <flatcc_json_printer_embedded_struct_field@@Base+0x70>
   40ca8:	mov	r2, r9
   40cac:	mov	r1, #32
   40cb0:	bl	1459c <memset@plt>
   40cb4:	ldr	r2, [r4, #20]
   40cb8:	add	r2, r2, r9
   40cbc:	str	r2, [r4, #20]
   40cc0:	b	40b18 <flatcc_json_printer_embedded_struct_field@@Base+0x70>
   40cc4:	mov	r1, r7
   40cc8:	mov	r2, r5
   40ccc:	bl	1459c <memset@plt>
   40cd0:	ldr	r1, [r4, #20]
   40cd4:	add	r1, r1, r5
   40cd8:	b	40bdc <flatcc_json_printer_embedded_struct_field@@Base+0x134>

00040cdc <flatcc_json_printer_struct_field@@Base>:
   40cdc:	ldr	ip, [r1, #8]
   40ce0:	add	r2, r2, #2
   40ce4:	lsl	r2, r2, #1
   40ce8:	cmp	r2, ip
   40cec:	bxge	lr
   40cf0:	ldr	ip, [r1, #4]
   40cf4:	ldrh	r2, [ip, r2]
   40cf8:	cmp	r2, #0
   40cfc:	bxeq	lr
   40d00:	strd	r4, [sp, #-24]!	; 0xffffffe8
   40d04:	ldr	r5, [r1]
   40d08:	strd	r6, [sp, #8]
   40d0c:	str	r8, [sp, #16]
   40d10:	str	lr, [sp, #20]
   40d14:	adds	r5, r5, r2
   40d18:	beq	40e4c <flatcc_json_printer_struct_field@@Base+0x170>
   40d1c:	ldr	ip, [r1, #16]
   40d20:	ldr	r2, [r0, #20]
   40d24:	cmp	ip, #0
   40d28:	add	ip, ip, #1
   40d2c:	str	ip, [r1, #16]
   40d30:	beq	40d48 <flatcc_json_printer_struct_field@@Base+0x6c>
   40d34:	add	ip, r2, #1
   40d38:	mov	r1, #44	; 0x2c
   40d3c:	str	ip, [r0, #20]
   40d40:	strb	r1, [r2]
   40d44:	ldr	r2, [r0, #20]
   40d48:	mov	r6, r3
   40d4c:	mov	r4, r0
   40d50:	ldrb	r1, [r0, #25]
   40d54:	cmp	r1, #0
   40d58:	bne	40e80 <flatcc_json_printer_struct_field@@Base+0x1a4>
   40d5c:	ldr	r3, [r0, #16]
   40d60:	cmp	r3, r2
   40d64:	bls	40e70 <flatcc_json_printer_struct_field@@Base+0x194>
   40d68:	mov	r3, #34	; 0x22
   40d6c:	mov	r1, r6
   40d70:	strb	r3, [r2]
   40d74:	ldrb	r3, [r4, #26]
   40d78:	ldr	r2, [r4, #16]
   40d7c:	ldr	r0, [r4, #20]
   40d80:	cmp	r3, #0
   40d84:	addeq	r0, r0, #1
   40d88:	ldr	r3, [sp, #24]
   40d8c:	str	r0, [r4, #20]
   40d90:	add	r3, r0, r3
   40d94:	cmp	r2, r3
   40d98:	ldr	r2, [sp, #24]
   40d9c:	bls	40e60 <flatcc_json_printer_struct_field@@Base+0x184>
   40da0:	bl	14524 <memcpy@plt>
   40da4:	ldr	r3, [r4, #20]
   40da8:	ldr	r2, [sp, #24]
   40dac:	add	r3, r3, r2
   40db0:	str	r3, [r4, #20]
   40db4:	mov	r2, #34	; 0x22
   40db8:	mov	r6, #58	; 0x3a
   40dbc:	mov	r1, r5
   40dc0:	mov	r5, #32
   40dc4:	strb	r2, [r3]
   40dc8:	mov	lr, #123	; 0x7b
   40dcc:	mov	r0, r4
   40dd0:	ldrb	r3, [r4, #26]
   40dd4:	ldr	ip, [r4, #20]
   40dd8:	clz	r3, r3
   40ddc:	lsr	r3, r3, #5
   40de0:	add	r2, ip, r3
   40de4:	add	r2, r2, #1
   40de8:	str	r2, [r4, #20]
   40dec:	strb	r6, [ip, r3]
   40df0:	ldr	r3, [r4, #20]
   40df4:	strb	r5, [r3]
   40df8:	ldrb	r3, [r4, #25]
   40dfc:	ldr	r6, [r4, #20]
   40e00:	ldr	r2, [r4, #32]
   40e04:	adds	r3, r3, #0
   40e08:	movne	r3, #1
   40e0c:	add	ip, r6, r3
   40e10:	add	ip, ip, #1
   40e14:	add	r2, r2, #1
   40e18:	str	ip, [r4, #20]
   40e1c:	str	r2, [r4, #32]
   40e20:	strb	lr, [r6, r3]
   40e24:	ldr	r3, [sp, #28]
   40e28:	blx	r3
   40e2c:	ldrb	r3, [r4, #25]
   40e30:	cmp	r3, #0
   40e34:	bne	40ec4 <flatcc_json_printer_struct_field@@Base+0x1e8>
   40e38:	ldr	r1, [r4, #20]
   40e3c:	add	r2, r1, #1
   40e40:	mov	r3, #125	; 0x7d
   40e44:	str	r2, [r4, #20]
   40e48:	strb	r3, [r1]
   40e4c:	ldrd	r4, [sp]
   40e50:	ldrd	r6, [sp, #8]
   40e54:	ldr	r8, [sp, #16]
   40e58:	add	sp, sp, #20
   40e5c:	pop	{pc}		; (ldr pc, [sp], #4)
   40e60:	mov	r0, r4
   40e64:	bl	34010 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   40e68:	ldr	r3, [r4, #20]
   40e6c:	b	40db4 <flatcc_json_printer_struct_field@@Base+0xd8>
   40e70:	ldr	r3, [r0, #44]	; 0x2c
   40e74:	blx	r3
   40e78:	ldr	r2, [r4, #20]
   40e7c:	b	40d68 <flatcc_json_printer_struct_field@@Base+0x8c>
   40e80:	add	r1, r2, #1
   40e84:	mov	r3, #10
   40e88:	str	r1, [r0, #20]
   40e8c:	strb	r3, [r2]
   40e90:	ldrb	r7, [r0, #25]
   40e94:	ldr	r2, [r4, #32]
   40e98:	ldr	r1, [r0, #16]
   40e9c:	ldr	r0, [r0, #20]
   40ea0:	mul	r7, r2, r7
   40ea4:	add	r3, r0, r7
   40ea8:	cmp	r1, r3
   40eac:	bcs	40f10 <flatcc_json_printer_struct_field@@Base+0x234>
   40eb0:	mov	r1, r7
   40eb4:	mov	r0, r4
   40eb8:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   40ebc:	ldr	r2, [r4, #20]
   40ec0:	b	40d68 <flatcc_json_printer_struct_field@@Base+0x8c>
   40ec4:	ldr	r3, [r4, #20]
   40ec8:	mov	r2, #10
   40ecc:	add	r1, r3, #1
   40ed0:	str	r1, [r4, #20]
   40ed4:	strb	r2, [r3]
   40ed8:	ldrb	r1, [r4, #25]
   40edc:	ldr	r3, [r4, #32]
   40ee0:	ldr	r2, [r4, #16]
   40ee4:	ldr	r0, [r4, #20]
   40ee8:	sub	r3, r3, #1
   40eec:	mul	r6, r3, r1
   40ef0:	str	r3, [r4, #32]
   40ef4:	add	r3, r0, r6
   40ef8:	cmp	r2, r3
   40efc:	bcs	40f2c <flatcc_json_printer_struct_field@@Base+0x250>
   40f00:	mov	r1, r6
   40f04:	mov	r0, r4
   40f08:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   40f0c:	b	40e38 <flatcc_json_printer_struct_field@@Base+0x15c>
   40f10:	mov	r2, r7
   40f14:	mov	r1, #32
   40f18:	bl	1459c <memset@plt>
   40f1c:	ldr	r2, [r4, #20]
   40f20:	add	r2, r2, r7
   40f24:	str	r2, [r4, #20]
   40f28:	b	40d68 <flatcc_json_printer_struct_field@@Base+0x8c>
   40f2c:	mov	r1, r5
   40f30:	mov	r2, r6
   40f34:	bl	1459c <memset@plt>
   40f38:	ldr	r1, [r4, #20]
   40f3c:	add	r1, r1, r6
   40f40:	b	40e3c <flatcc_json_printer_struct_field@@Base+0x160>

00040f44 <flatcc_json_printer_struct_as_root@@Base>:
   40f44:	mov	ip, #0
   40f48:	strd	r4, [sp, #-12]!
   40f4c:	mov	r4, r0
   40f50:	str	lr, [sp, #8]
   40f54:	sub	sp, sp, #12
   40f58:	cmp	r1, ip
   40f5c:	cmpne	r2, #7
   40f60:	str	ip, [sp, #4]
   40f64:	bls	410c8 <flatcc_json_printer_struct_as_root@@Base+0x184>
   40f68:	cmp	r3, #0
   40f6c:	mov	r5, r1
   40f70:	beq	40f98 <flatcc_json_printer_struct_as_root@@Base+0x54>
   40f74:	mov	r2, #4
   40f78:	mov	r1, r3
   40f7c:	add	r0, sp, r2
   40f80:	bl	145a8 <strncpy@plt>
   40f84:	ldr	r2, [r5, #4]
   40f88:	ldr	r3, [sp, #4]
   40f8c:	cmp	r2, r3
   40f90:	cmpne	r3, #0
   40f94:	bne	410f4 <flatcc_json_printer_struct_as_root@@Base+0x1b0>
   40f98:	ldr	r2, [r4, #20]
   40f9c:	mov	r1, #123	; 0x7b
   40fa0:	mov	r0, r4
   40fa4:	ldr	r3, [r4, #32]
   40fa8:	add	ip, r2, #1
   40fac:	add	r3, r3, #1
   40fb0:	str	ip, [r4, #20]
   40fb4:	str	r3, [r4, #32]
   40fb8:	strb	r1, [r2]
   40fbc:	ldr	r1, [r5]
   40fc0:	ldr	r3, [sp, #24]
   40fc4:	add	r1, r5, r1
   40fc8:	blx	r3
   40fcc:	ldrb	r3, [r4, #25]
   40fd0:	cmp	r3, #0
   40fd4:	bne	4105c <flatcc_json_printer_struct_as_root@@Base+0x118>
   40fd8:	ldr	r1, [r4, #20]
   40fdc:	mov	r3, #125	; 0x7d
   40fe0:	add	r2, r1, #1
   40fe4:	str	r2, [r4, #20]
   40fe8:	strb	r3, [r1]
   40fec:	ldrb	r3, [r4, #25]
   40ff0:	cmp	r3, #0
   40ff4:	bne	41038 <flatcc_json_printer_struct_as_root@@Base+0xf4>
   40ff8:	mov	r1, #1
   40ffc:	mov	r0, r4
   41000:	ldr	r3, [r4, #44]	; 0x2c
   41004:	blx	r3
   41008:	ldr	r3, [r4, #36]	; 0x24
   4100c:	cmp	r3, #0
   41010:	bne	410c0 <flatcc_json_printer_struct_as_root@@Base+0x17c>
   41014:	ldr	r2, [r4]
   41018:	ldr	r3, [r4, #12]
   4101c:	ldr	r0, [r4, #20]
   41020:	sub	r0, r0, r2
   41024:	add	r0, r0, r3
   41028:	add	sp, sp, #12
   4102c:	ldrd	r4, [sp]
   41030:	add	sp, sp, #8
   41034:	pop	{pc}		; (ldr pc, [sp], #4)
   41038:	ldr	r3, [r4, #32]
   4103c:	cmp	r3, #0
   41040:	bne	40ff8 <flatcc_json_printer_struct_as_root@@Base+0xb4>
   41044:	ldr	r3, [r4, #20]
   41048:	mov	r2, #10
   4104c:	add	r1, r3, #1
   41050:	str	r1, [r4, #20]
   41054:	strb	r2, [r3]
   41058:	b	40ff8 <flatcc_json_printer_struct_as_root@@Base+0xb4>
   4105c:	ldr	r3, [r4, #20]
   41060:	mov	r2, #10
   41064:	add	r1, r3, #1
   41068:	str	r1, [r4, #20]
   4106c:	strb	r2, [r3]
   41070:	ldrb	r1, [r4, #25]
   41074:	ldr	r3, [r4, #32]
   41078:	ldr	r2, [r4, #16]
   4107c:	ldr	r0, [r4, #20]
   41080:	sub	r3, r3, #1
   41084:	mul	r5, r3, r1
   41088:	str	r3, [r4, #32]
   4108c:	add	r3, r0, r5
   41090:	cmp	r2, r3
   41094:	bcs	410a8 <flatcc_json_printer_struct_as_root@@Base+0x164>
   41098:	mov	r1, r5
   4109c:	mov	r0, r4
   410a0:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   410a4:	b	40fd8 <flatcc_json_printer_struct_as_root@@Base+0x94>
   410a8:	mov	r1, #32
   410ac:	mov	r2, r5
   410b0:	bl	1459c <memset@plt>
   410b4:	ldr	r1, [r4, #20]
   410b8:	add	r1, r1, r5
   410bc:	b	40fdc <flatcc_json_printer_struct_as_root@@Base+0x98>
   410c0:	mvn	r0, #0
   410c4:	b	41028 <flatcc_json_printer_struct_as_root@@Base+0xe4>
   410c8:	ldr	r3, [r0, #36]	; 0x24
   410cc:	movw	r1, #31184	; 0x79d0
   410d0:	movt	r1, #4
   410d4:	movw	r2, #1019	; 0x3fb
   410d8:	cmp	r3, ip
   410dc:	moveq	r3, #1
   410e0:	streq	r3, [r0, #36]	; 0x24
   410e4:	movw	r0, #31304	; 0x7a48
   410e8:	movt	r0, #4
   410ec:	ldr	r3, [pc, #44]	; 41120 <flatcc_json_printer_struct_as_root@@Base+0x1dc>
   410f0:	bl	145f0 <__assert_fail@plt>
   410f4:	ldr	r3, [r4, #36]	; 0x24
   410f8:	movw	r1, #31184	; 0x79d0
   410fc:	movt	r1, #4
   41100:	movw	r0, #31336	; 0x7a68
   41104:	movt	r0, #4
   41108:	movw	r2, #1028	; 0x404
   4110c:	cmp	r3, #0
   41110:	moveq	r3, #1
   41114:	streq	r3, [r4, #36]	; 0x24
   41118:	ldr	r3, [pc]	; 41120 <flatcc_json_printer_struct_as_root@@Base+0x1dc>
   4111c:	bl	145f0 <__assert_fail@plt>
   41120:	andeq	r7, r4, r0, ror #16

00041124 <flatcc_json_printer_table_as_root@@Base>:
   41124:	mov	ip, #0
   41128:	strd	r4, [sp, #-20]!	; 0xffffffec
   4112c:	mov	r4, r0
   41130:	strd	r6, [sp, #8]
   41134:	cmp	r1, ip
   41138:	cmpne	r2, #7
   4113c:	str	lr, [sp, #16]
   41140:	sub	sp, sp, #28
   41144:	str	ip, [sp, #4]
   41148:	bls	412e0 <flatcc_json_printer_table_as_root@@Base+0x1bc>
   4114c:	cmp	r3, #0
   41150:	mov	r5, r1
   41154:	add	r6, sp, #4
   41158:	beq	41180 <flatcc_json_printer_table_as_root@@Base+0x5c>
   4115c:	mov	r1, r3
   41160:	mov	r2, #4
   41164:	mov	r0, r6
   41168:	bl	145a8 <strncpy@plt>
   4116c:	ldr	r2, [r5, #4]
   41170:	ldr	r3, [sp, #4]
   41174:	cmp	r2, r3
   41178:	cmpne	r3, #0
   4117c:	bne	4130c <flatcc_json_printer_table_as_root@@Base+0x1e8>
   41180:	ldr	r0, [r4, #20]
   41184:	mov	r1, r6
   41188:	mov	ip, #0
   4118c:	mov	lr, #99	; 0x63
   41190:	mov	r6, #123	; 0x7b
   41194:	ldr	r3, [r4, #32]
   41198:	ldr	r2, [r5]
   4119c:	add	r7, r0, #1
   411a0:	add	r3, r3, #1
   411a4:	str	r7, [r4, #20]
   411a8:	str	r3, [r4, #32]
   411ac:	add	r3, r5, r2
   411b0:	strb	r6, [r0]
   411b4:	mov	r0, r4
   411b8:	str	lr, [sp, #16]
   411bc:	str	ip, [sp, #20]
   411c0:	ldr	r2, [r5, r2]
   411c4:	str	r3, [sp, #4]
   411c8:	sub	r3, r3, r2
   411cc:	ldrh	r2, [r3]
   411d0:	str	r3, [sp, #8]
   411d4:	ldr	r3, [sp, #48]	; 0x30
   411d8:	str	r2, [sp, #12]
   411dc:	blx	r3
   411e0:	ldrb	r3, [r4, #25]
   411e4:	cmp	r3, #0
   411e8:	bne	41274 <flatcc_json_printer_table_as_root@@Base+0x150>
   411ec:	ldr	r1, [r4, #20]
   411f0:	mov	r3, #125	; 0x7d
   411f4:	add	r2, r1, #1
   411f8:	str	r2, [r4, #20]
   411fc:	strb	r3, [r1]
   41200:	ldrb	r3, [r4, #25]
   41204:	cmp	r3, #0
   41208:	bne	41250 <flatcc_json_printer_table_as_root@@Base+0x12c>
   4120c:	mov	r1, #1
   41210:	mov	r0, r4
   41214:	ldr	r3, [r4, #44]	; 0x2c
   41218:	blx	r3
   4121c:	ldr	r3, [r4, #36]	; 0x24
   41220:	cmp	r3, #0
   41224:	bne	412d8 <flatcc_json_printer_table_as_root@@Base+0x1b4>
   41228:	ldr	r2, [r4]
   4122c:	ldr	r3, [r4, #12]
   41230:	ldr	r0, [r4, #20]
   41234:	sub	r0, r0, r2
   41238:	add	r0, r0, r3
   4123c:	add	sp, sp, #28
   41240:	ldrd	r4, [sp]
   41244:	ldrd	r6, [sp, #8]
   41248:	add	sp, sp, #16
   4124c:	pop	{pc}		; (ldr pc, [sp], #4)
   41250:	ldr	r3, [r4, #32]
   41254:	cmp	r3, #0
   41258:	bne	4120c <flatcc_json_printer_table_as_root@@Base+0xe8>
   4125c:	ldr	r3, [r4, #20]
   41260:	mov	r2, #10
   41264:	add	r1, r3, #1
   41268:	str	r1, [r4, #20]
   4126c:	strb	r2, [r3]
   41270:	b	4120c <flatcc_json_printer_table_as_root@@Base+0xe8>
   41274:	ldr	r3, [r4, #20]
   41278:	mov	r2, #10
   4127c:	add	r1, r3, #1
   41280:	str	r1, [r4, #20]
   41284:	strb	r2, [r3]
   41288:	ldrb	r1, [r4, #25]
   4128c:	ldr	r3, [r4, #32]
   41290:	ldr	r2, [r4, #16]
   41294:	ldr	r0, [r4, #20]
   41298:	sub	r3, r3, #1
   4129c:	mul	r5, r3, r1
   412a0:	str	r3, [r4, #32]
   412a4:	add	r3, r0, r5
   412a8:	cmp	r2, r3
   412ac:	bcs	412c0 <flatcc_json_printer_table_as_root@@Base+0x19c>
   412b0:	mov	r1, r5
   412b4:	mov	r0, r4
   412b8:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   412bc:	b	411ec <flatcc_json_printer_table_as_root@@Base+0xc8>
   412c0:	mov	r1, #32
   412c4:	mov	r2, r5
   412c8:	bl	1459c <memset@plt>
   412cc:	ldr	r1, [r4, #20]
   412d0:	add	r1, r1, r5
   412d4:	b	411f0 <flatcc_json_printer_table_as_root@@Base+0xcc>
   412d8:	mvn	r0, #0
   412dc:	b	4123c <flatcc_json_printer_table_as_root@@Base+0x118>
   412e0:	ldr	r3, [r0, #36]	; 0x24
   412e4:	movw	r1, #31184	; 0x79d0
   412e8:	movt	r1, #4
   412ec:	movw	r2, #1019	; 0x3fb
   412f0:	cmp	r3, ip
   412f4:	moveq	r3, #1
   412f8:	streq	r3, [r0, #36]	; 0x24
   412fc:	movw	r0, #31304	; 0x7a48
   41300:	movt	r0, #4
   41304:	ldr	r3, [pc, #44]	; 41338 <flatcc_json_printer_table_as_root@@Base+0x214>
   41308:	bl	145f0 <__assert_fail@plt>
   4130c:	ldr	r3, [r4, #36]	; 0x24
   41310:	movw	r1, #31184	; 0x79d0
   41314:	movt	r1, #4
   41318:	movw	r0, #31336	; 0x7a68
   4131c:	movt	r0, #4
   41320:	movw	r2, #1028	; 0x404
   41324:	cmp	r3, #0
   41328:	moveq	r3, #1
   4132c:	streq	r3, [r4, #36]	; 0x24
   41330:	ldr	r3, [pc]	; 41338 <flatcc_json_printer_table_as_root@@Base+0x214>
   41334:	bl	145f0 <__assert_fail@plt>
   41338:	andeq	r7, r4, r0, ror #16

0004133c <flatcc_json_printer_struct_as_nested_root@@Base>:
   4133c:	ldr	ip, [r1, #8]
   41340:	add	r2, r2, #2
   41344:	lsl	r2, r2, #1
   41348:	cmp	r2, ip
   4134c:	bxge	lr
   41350:	ldr	ip, [r1, #4]
   41354:	ldrh	r2, [ip, r2]
   41358:	cmp	r2, #0
   4135c:	bxeq	lr
   41360:	strd	r4, [sp, #-28]!	; 0xffffffe4
   41364:	ldr	ip, [r1]
   41368:	strd	r6, [sp, #8]
   4136c:	strd	r8, [sp, #16]
   41370:	str	lr, [sp, #24]
   41374:	sub	sp, sp, #12
   41378:	adds	r6, ip, r2
   4137c:	beq	41474 <flatcc_json_printer_struct_as_nested_root@@Base+0x138>
   41380:	ldr	r5, [ip, r2]
   41384:	mov	r7, r3
   41388:	mov	r8, r1
   4138c:	mov	r1, #0
   41390:	mov	r4, r0
   41394:	ldr	r3, [r6, r5]
   41398:	adds	r9, r6, r5
   4139c:	moveq	r2, #1
   413a0:	movne	r2, r1
   413a4:	str	r1, [sp, #4]
   413a8:	cmp	r3, #7
   413ac:	orrls	r2, r2, #1
   413b0:	cmp	r2, r1
   413b4:	bne	414f0 <flatcc_json_printer_struct_as_nested_root@@Base+0x1b4>
   413b8:	ldr	r3, [sp, #44]	; 0x2c
   413bc:	cmp	r3, #0
   413c0:	beq	413e8 <flatcc_json_printer_struct_as_nested_root@@Base+0xac>
   413c4:	mov	r2, #4
   413c8:	mov	r1, r3
   413cc:	add	r0, sp, r2
   413d0:	bl	145a8 <strncpy@plt>
   413d4:	ldr	r2, [r9, #4]
   413d8:	ldr	r3, [sp, #4]
   413dc:	cmp	r2, r3
   413e0:	cmpne	r3, #0
   413e4:	bne	4151c <flatcc_json_printer_struct_as_nested_root@@Base+0x1e0>
   413e8:	ldr	r3, [r8, #16]
   413ec:	add	r2, r3, #1
   413f0:	cmp	r3, #0
   413f4:	str	r2, [r8, #16]
   413f8:	beq	41410 <flatcc_json_printer_struct_as_nested_root@@Base+0xd4>
   413fc:	ldr	r3, [r4, #20]
   41400:	mov	r2, #44	; 0x2c
   41404:	add	r1, r3, #1
   41408:	str	r1, [r4, #20]
   4140c:	strb	r2, [r3]
   41410:	mov	r1, r7
   41414:	mov	r0, r4
   41418:	ldr	r2, [sp, #40]	; 0x28
   4141c:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   41420:	ldr	r2, [r4, #20]
   41424:	mov	r1, #123	; 0x7b
   41428:	mov	r0, r4
   4142c:	ldr	r3, [r4, #32]
   41430:	add	ip, r2, #1
   41434:	add	r3, r3, #1
   41438:	str	ip, [r4, #20]
   4143c:	str	r3, [r4, #32]
   41440:	strb	r1, [r2]
   41444:	ldr	r1, [r6, r5]
   41448:	ldr	r3, [sp, #48]	; 0x30
   4144c:	add	r1, r9, r1
   41450:	blx	r3
   41454:	ldrb	r3, [r4, #25]
   41458:	cmp	r3, #0
   4145c:	ldr	r3, [r4, #20]
   41460:	bne	4148c <flatcc_json_printer_struct_as_nested_root@@Base+0x150>
   41464:	add	r1, r3, #1
   41468:	mov	r2, #125	; 0x7d
   4146c:	str	r1, [r4, #20]
   41470:	strb	r2, [r3]
   41474:	add	sp, sp, #12
   41478:	ldrd	r4, [sp]
   4147c:	ldrd	r6, [sp, #8]
   41480:	ldrd	r8, [sp, #16]
   41484:	add	sp, sp, #24
   41488:	pop	{pc}		; (ldr pc, [sp], #4)
   4148c:	add	r1, r3, #1
   41490:	mov	r2, #10
   41494:	str	r1, [r4, #20]
   41498:	strb	r2, [r3]
   4149c:	ldrb	r3, [r4, #25]
   414a0:	ldr	r2, [r4, #32]
   414a4:	ldr	r1, [r4, #16]
   414a8:	ldr	r0, [r4, #20]
   414ac:	sub	r2, r2, #1
   414b0:	mul	r5, r2, r3
   414b4:	str	r2, [r4, #32]
   414b8:	add	r3, r0, r5
   414bc:	cmp	r1, r3
   414c0:	bcs	414d8 <flatcc_json_printer_struct_as_nested_root@@Base+0x19c>
   414c4:	mov	r1, r5
   414c8:	mov	r0, r4
   414cc:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   414d0:	ldr	r3, [r4, #20]
   414d4:	b	41464 <flatcc_json_printer_struct_as_nested_root@@Base+0x128>
   414d8:	mov	r2, r5
   414dc:	mov	r1, #32
   414e0:	bl	1459c <memset@plt>
   414e4:	ldr	r3, [r4, #20]
   414e8:	add	r3, r3, r5
   414ec:	b	41464 <flatcc_json_printer_struct_as_nested_root@@Base+0x128>
   414f0:	ldr	r3, [r0, #36]	; 0x24
   414f4:	movw	r2, #1019	; 0x3fb
   414f8:	cmp	r3, r1
   414fc:	movw	r1, #31184	; 0x79d0
   41500:	movt	r1, #4
   41504:	moveq	r3, #1
   41508:	streq	r3, [r0, #36]	; 0x24
   4150c:	movw	r0, #31304	; 0x7a48
   41510:	movt	r0, #4
   41514:	ldr	r3, [pc, #44]	; 41548 <flatcc_json_printer_struct_as_nested_root@@Base+0x20c>
   41518:	bl	145f0 <__assert_fail@plt>
   4151c:	ldr	r3, [r4, #36]	; 0x24
   41520:	movw	r1, #31184	; 0x79d0
   41524:	movt	r1, #4
   41528:	movw	r0, #31336	; 0x7a68
   4152c:	movt	r0, #4
   41530:	movw	r2, #1028	; 0x404
   41534:	cmp	r3, #0
   41538:	moveq	r3, #1
   4153c:	streq	r3, [r4, #36]	; 0x24
   41540:	ldr	r3, [pc]	; 41548 <flatcc_json_printer_struct_as_nested_root@@Base+0x20c>
   41544:	bl	145f0 <__assert_fail@plt>
   41548:	andeq	r7, r4, r0, ror #16

0004154c <flatcc_json_printer_table_as_nested_root@@Base>:
   4154c:	ldr	ip, [r1, #8]
   41550:	add	r2, r2, #2
   41554:	lsl	r2, r2, #1
   41558:	cmp	r2, ip
   4155c:	bxge	lr
   41560:	ldr	ip, [r1, #4]
   41564:	ldrh	r2, [ip, r2]
   41568:	cmp	r2, #0
   4156c:	bxeq	lr
   41570:	strd	r4, [sp, #-24]!	; 0xffffffe8
   41574:	ldr	ip, [r1]
   41578:	strd	r6, [sp, #8]
   4157c:	str	r8, [sp, #16]
   41580:	str	lr, [sp, #20]
   41584:	sub	sp, sp, #24
   41588:	adds	r5, ip, r2
   4158c:	beq	416b8 <flatcc_json_printer_table_as_nested_root@@Base+0x16c>
   41590:	mov	r6, r3
   41594:	ldr	r3, [ip, r2]
   41598:	mov	r7, r1
   4159c:	mov	r2, #0
   415a0:	mov	r4, r0
   415a4:	ldr	r1, [r5, r3]
   415a8:	add	r5, r5, r3
   415ac:	adds	r8, r5, #4
   415b0:	str	r2, [sp, #4]
   415b4:	moveq	r2, #1
   415b8:	cmp	r1, #7
   415bc:	orrls	r2, r2, #1
   415c0:	cmp	r2, #0
   415c4:	bne	41748 <flatcc_json_printer_table_as_nested_root@@Base+0x1fc>
   415c8:	ldr	r3, [sp, #52]	; 0x34
   415cc:	cmp	r3, #0
   415d0:	beq	415f8 <flatcc_json_printer_table_as_nested_root@@Base+0xac>
   415d4:	mov	r2, #4
   415d8:	mov	r1, r3
   415dc:	add	r0, sp, r2
   415e0:	bl	145a8 <strncpy@plt>
   415e4:	ldr	r3, [sp, #4]
   415e8:	ldr	r2, [r5, #8]
   415ec:	cmp	r2, r3
   415f0:	cmpne	r3, #0
   415f4:	bne	41774 <flatcc_json_printer_table_as_nested_root@@Base+0x228>
   415f8:	ldr	r3, [r7, #16]
   415fc:	add	r2, r3, #1
   41600:	cmp	r3, #0
   41604:	str	r2, [r7, #16]
   41608:	beq	41620 <flatcc_json_printer_table_as_nested_root@@Base+0xd4>
   4160c:	ldr	r3, [r4, #20]
   41610:	mov	r2, #44	; 0x2c
   41614:	add	r1, r3, #1
   41618:	str	r1, [r4, #20]
   4161c:	strb	r2, [r3]
   41620:	mov	r1, r6
   41624:	mov	r0, r4
   41628:	ldr	r2, [sp, #48]	; 0x30
   4162c:	bl	346bc <flatcc_json_parser_struct_as_root@@Base+0x12a0>
   41630:	ldr	r3, [r7, #12]
   41634:	subs	r3, r3, #1
   41638:	beq	4171c <flatcc_json_printer_table_as_nested_root@@Base+0x1d0>
   4163c:	ldr	r1, [r4, #20]
   41640:	mov	r0, #123	; 0x7b
   41644:	mov	lr, #0
   41648:	ldr	r2, [r4, #32]
   4164c:	ldr	ip, [r5, #4]
   41650:	add	r5, r1, #1
   41654:	add	r2, r2, #1
   41658:	str	r5, [r4, #20]
   4165c:	str	r2, [r4, #32]
   41660:	add	r2, r8, ip
   41664:	strb	r0, [r1]
   41668:	add	r1, sp, #4
   4166c:	mov	r0, r4
   41670:	str	r3, [sp, #16]
   41674:	str	lr, [sp, #20]
   41678:	ldr	r3, [r8, ip]
   4167c:	str	r2, [sp, #4]
   41680:	sub	r3, r2, r3
   41684:	ldrh	r2, [r3]
   41688:	str	r3, [sp, #8]
   4168c:	ldr	r3, [sp, #56]	; 0x38
   41690:	str	r2, [sp, #12]
   41694:	blx	r3
   41698:	ldrb	r3, [r4, #25]
   4169c:	cmp	r3, #0
   416a0:	ldr	r3, [r4, #20]
   416a4:	bne	416d0 <flatcc_json_printer_table_as_nested_root@@Base+0x184>
   416a8:	add	r1, r3, #1
   416ac:	mov	r2, #125	; 0x7d
   416b0:	str	r1, [r4, #20]
   416b4:	strb	r2, [r3]
   416b8:	add	sp, sp, #24
   416bc:	ldrd	r4, [sp]
   416c0:	ldrd	r6, [sp, #8]
   416c4:	ldr	r8, [sp, #16]
   416c8:	add	sp, sp, #20
   416cc:	pop	{pc}		; (ldr pc, [sp], #4)
   416d0:	add	r1, r3, #1
   416d4:	mov	r2, #10
   416d8:	str	r1, [r4, #20]
   416dc:	strb	r2, [r3]
   416e0:	ldrb	r3, [r4, #25]
   416e4:	ldr	r2, [r4, #32]
   416e8:	ldr	r1, [r4, #16]
   416ec:	ldr	r0, [r4, #20]
   416f0:	sub	r2, r2, #1
   416f4:	mul	r5, r2, r3
   416f8:	str	r2, [r4, #32]
   416fc:	add	r3, r0, r5
   41700:	cmp	r1, r3
   41704:	bcs	41730 <flatcc_json_printer_table_as_nested_root@@Base+0x1e4>
   41708:	mov	r1, r5
   4170c:	mov	r0, r4
   41710:	bl	340d4 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   41714:	ldr	r3, [r4, #20]
   41718:	b	416a8 <flatcc_json_printer_table_as_nested_root@@Base+0x15c>
   4171c:	ldr	r3, [r4, #36]	; 0x24
   41720:	cmp	r3, #0
   41724:	moveq	r3, #2
   41728:	streq	r3, [r4, #36]	; 0x24
   4172c:	b	416b8 <flatcc_json_printer_table_as_nested_root@@Base+0x16c>
   41730:	mov	r2, r5
   41734:	mov	r1, #32
   41738:	bl	1459c <memset@plt>
   4173c:	ldr	r3, [r4, #20]
   41740:	add	r3, r3, r5
   41744:	b	416a8 <flatcc_json_printer_table_as_nested_root@@Base+0x15c>
   41748:	ldr	r3, [r0, #36]	; 0x24
   4174c:	movw	r1, #31184	; 0x79d0
   41750:	movt	r1, #4
   41754:	movw	r2, #1019	; 0x3fb
   41758:	cmp	r3, #0
   4175c:	moveq	r3, #1
   41760:	streq	r3, [r0, #36]	; 0x24
   41764:	movw	r0, #31304	; 0x7a48
   41768:	movt	r0, #4
   4176c:	ldr	r3, [pc, #44]	; 417a0 <flatcc_json_printer_table_as_nested_root@@Base+0x254>
   41770:	bl	145f0 <__assert_fail@plt>
   41774:	ldr	r3, [r4, #36]	; 0x24
   41778:	movw	r1, #31184	; 0x79d0
   4177c:	movt	r1, #4
   41780:	movw	r0, #31336	; 0x7a68
   41784:	movt	r0, #4
   41788:	movw	r2, #1028	; 0x404
   4178c:	cmp	r3, #0
   41790:	moveq	r3, #1
   41794:	streq	r3, [r4, #36]	; 0x24
   41798:	ldr	r3, [pc]	; 417a0 <flatcc_json_printer_table_as_nested_root@@Base+0x254>
   4179c:	bl	145f0 <__assert_fail@plt>
   417a0:	andeq	r7, r4, r0, ror #16

000417a4 <flatcc_json_printer_init@@Base>:
   417a4:	mov	r2, #48	; 0x30
   417a8:	strd	r4, [sp, #-16]!
   417ac:	mov	r5, r1
   417b0:	mov	r1, #0
   417b4:	mov	r4, r0
   417b8:	str	r6, [sp, #8]
   417bc:	str	lr, [sp, #12]
   417c0:	bl	1459c <memset@plt>
   417c4:	cmp	r5, #0
   417c8:	beq	41824 <flatcc_json_printer_init@@Base+0x80>
   417cc:	movw	r3, #16892	; 0x41fc
   417d0:	movt	r3, #3
   417d4:	str	r5, [r4, #40]	; 0x28
   417d8:	movw	r0, #16448	; 0x4040
   417dc:	str	r3, [r4, #44]	; 0x2c
   417e0:	bl	14554 <malloc@plt>
   417e4:	cmp	r0, #0
   417e8:	str	r0, [r4]
   417ec:	beq	41834 <flatcc_json_printer_init@@Base+0x90>
   417f0:	add	ip, r0, #16384	; 0x4000
   417f4:	mov	r3, #1
   417f8:	movw	r1, #16448	; 0x4040
   417fc:	mov	r2, #16384	; 0x4000
   41800:	str	r0, [r4, #20]
   41804:	mov	r0, #0
   41808:	stmib	r4, {r1, r2}
   4180c:	str	ip, [r4, #16]
   41810:	strb	r3, [r4, #24]
   41814:	ldrd	r4, [sp]
   41818:	ldr	r6, [sp, #8]
   4181c:	add	sp, sp, #12
   41820:	pop	{pc}		; (ldr pc, [sp], #4)
   41824:	movw	r3, #33716	; 0x83b4
   41828:	movt	r3, #5
   4182c:	ldr	r5, [r3]
   41830:	b	417cc <flatcc_json_printer_init@@Base+0x28>
   41834:	mvn	r0, #0
   41838:	b	41814 <flatcc_json_printer_init@@Base+0x70>

0004183c <flatcc_json_printer_init_buffer@@Base>:
   4183c:	cmp	r2, #63	; 0x3f
   41840:	strd	r4, [sp, #-16]!
   41844:	str	r6, [sp, #8]
   41848:	str	lr, [sp, #12]
   4184c:	bls	418a8 <flatcc_json_printer_init_buffer@@Base+0x6c>
   41850:	mov	r4, r0
   41854:	mov	r6, r1
   41858:	mov	r5, r2
   4185c:	mov	r1, #0
   41860:	mov	r2, #32
   41864:	add	r0, r0, #12
   41868:	bl	1459c <memset@plt>
   4186c:	sub	r2, r5, #64	; 0x40
   41870:	movw	r3, #16332	; 0x3fcc
   41874:	movt	r3, #3
   41878:	add	r1, r6, r2
   4187c:	str	r6, [r4]
   41880:	str	r5, [r4, #4]
   41884:	mov	r0, #0
   41888:	str	r2, [r4, #8]
   4188c:	str	r1, [r4, #16]
   41890:	str	r6, [r4, #20]
   41894:	str	r3, [r4, #44]	; 0x2c
   41898:	ldrd	r4, [sp]
   4189c:	ldr	r6, [sp, #8]
   418a0:	add	sp, sp, #12
   418a4:	pop	{pc}		; (ldr pc, [sp], #4)
   418a8:	movw	r1, #31184	; 0x79d0
   418ac:	movt	r1, #4
   418b0:	ldr	r3, [pc, #12]	; 418c4 <flatcc_json_printer_init_buffer@@Base+0x88>
   418b4:	movw	r0, #31364	; 0x7a84
   418b8:	movt	r0, #4
   418bc:	movw	r2, #1165	; 0x48d
   418c0:	bl	145f0 <__assert_fail@plt>
   418c4:	andeq	r7, r4, r0, ror r8

000418c8 <flatcc_json_printer_init_dynamic_buffer@@Base>:
   418c8:	cmp	r1, #0
   418cc:	strd	r4, [sp, #-16]!
   418d0:	mov	r4, r0
   418d4:	moveq	r5, #4096	; 0x1000
   418d8:	str	r6, [sp, #8]
   418dc:	moveq	r6, #4032	; 0xfc0
   418e0:	str	lr, [sp, #12]
   418e4:	beq	418f8 <flatcc_json_printer_init_dynamic_buffer@@Base+0x30>
   418e8:	cmp	r1, #64	; 0x40
   418ec:	movcs	r5, r1
   418f0:	movcc	r5, #64	; 0x40
   418f4:	sub	r6, r5, #64	; 0x40
   418f8:	mov	r2, #32
   418fc:	mov	r1, #0
   41900:	add	r0, r4, #12
   41904:	bl	1459c <memset@plt>
   41908:	mov	r0, r5
   4190c:	bl	14554 <malloc@plt>
   41910:	add	r1, r0, r6
   41914:	movw	r3, #17072	; 0x42b0
   41918:	movt	r3, #3
   4191c:	mov	r2, #1
   41920:	stm	r4, {r0, r5, r6}
   41924:	cmp	r0, #0
   41928:	str	r1, [r4, #16]
   4192c:	str	r0, [r4, #20]
   41930:	movne	r0, #0
   41934:	strb	r2, [r4, #24]
   41938:	str	r3, [r4, #44]	; 0x2c
   4193c:	beq	41950 <flatcc_json_printer_init_dynamic_buffer@@Base+0x88>
   41940:	ldrd	r4, [sp]
   41944:	ldr	r6, [sp, #8]
   41948:	add	sp, sp, #12
   4194c:	pop	{pc}		; (ldr pc, [sp], #4)
   41950:	ldr	r3, [r4, #36]	; 0x24
   41954:	cmp	r3, #0
   41958:	moveq	r3, #3
   4195c:	mvneq	r0, #0
   41960:	mvnne	r0, #0
   41964:	streq	r3, [r4, #36]	; 0x24
   41968:	b	41940 <flatcc_json_printer_init_dynamic_buffer@@Base+0x78>

0004196c <flatcc_json_printer_get_buffer@@Base>:
   4196c:	strd	r4, [sp, #-16]!
   41970:	mov	r5, r1
   41974:	mov	r1, #0
   41978:	ldr	r3, [r0, #44]	; 0x2c
   4197c:	mov	r4, r0
   41980:	str	r6, [sp, #8]
   41984:	str	lr, [sp, #12]
   41988:	blx	r3
   4198c:	cmp	r5, #0
   41990:	ldr	r0, [r4]
   41994:	ldrne	r3, [r4, #20]
   41998:	ldr	r6, [sp, #8]
   4199c:	subne	r3, r3, r0
   419a0:	strne	r3, [r5]
   419a4:	ldrd	r4, [sp]
   419a8:	add	sp, sp, #12
   419ac:	pop	{pc}		; (ldr pc, [sp], #4)

000419b0 <flatcc_json_printer_finalize_dynamic_buffer@@Base>:
   419b0:	strd	r4, [sp, #-16]!
   419b4:	mov	r4, r0
   419b8:	ldr	r3, [r0, #44]	; 0x2c
   419bc:	str	r6, [sp, #8]
   419c0:	mov	r6, r1
   419c4:	mov	r1, #0
   419c8:	str	lr, [sp, #12]
   419cc:	blx	r3
   419d0:	cmp	r6, #0
   419d4:	ldr	r5, [r4]
   419d8:	mov	r0, r4
   419dc:	mov	r2, #48	; 0x30
   419e0:	mov	r1, #0
   419e4:	ldrne	r3, [r4, #20]
   419e8:	subne	r3, r3, r5
   419ec:	strne	r3, [r6]
   419f0:	bl	1459c <memset@plt>
   419f4:	mov	r0, r5
   419f8:	ldrd	r4, [sp]
   419fc:	ldr	r6, [sp, #8]
   41a00:	add	sp, sp, #12
   41a04:	pop	{pc}		; (ldr pc, [sp], #4)

00041a08 <flatcc_json_printer_clear@@Base>:
   41a08:	str	r4, [sp, #-8]!
   41a0c:	mov	r4, r0
   41a10:	str	lr, [sp, #4]
   41a14:	ldrb	r3, [r0, #24]
   41a18:	cmp	r3, #0
   41a1c:	beq	41a30 <flatcc_json_printer_clear@@Base+0x28>
   41a20:	ldr	r0, [r0]
   41a24:	cmp	r0, #0
   41a28:	beq	41a30 <flatcc_json_printer_clear@@Base+0x28>
   41a2c:	bl	14518 <free@plt>
   41a30:	mov	r0, r4
   41a34:	mov	r2, #48	; 0x30
   41a38:	ldr	r4, [sp]
   41a3c:	mov	r1, #0
   41a40:	ldr	lr, [sp, #4]
   41a44:	add	sp, sp, #8
   41a48:	b	1459c <memset@plt>
   41a4c:	eor	r1, r1, #-2147483648	; 0x80000000
   41a50:	b	41a58 <flatcc_json_printer_clear@@Base+0x50>
   41a54:	eor	r3, r3, #-2147483648	; 0x80000000
   41a58:	push	{r4, r5, lr}
   41a5c:	lsl	r4, r1, #1
   41a60:	lsl	r5, r3, #1
   41a64:	teq	r4, r5
   41a68:	teqeq	r0, r2
   41a6c:	orrsne	ip, r4, r0
   41a70:	orrsne	ip, r5, r2
   41a74:	mvnsne	ip, r4, asr #21
   41a78:	mvnsne	ip, r5, asr #21
   41a7c:	beq	41c68 <flatcc_json_printer_clear@@Base+0x260>
   41a80:	lsr	r4, r4, #21
   41a84:	rsbs	r5, r4, r5, lsr #21
   41a88:	rsblt	r5, r5, #0
   41a8c:	ble	41aac <flatcc_json_printer_clear@@Base+0xa4>
   41a90:	add	r4, r4, r5
   41a94:	eor	r2, r0, r2
   41a98:	eor	r3, r1, r3
   41a9c:	eor	r0, r2, r0
   41aa0:	eor	r1, r3, r1
   41aa4:	eor	r2, r0, r2
   41aa8:	eor	r3, r1, r3
   41aac:	cmp	r5, #54	; 0x36
   41ab0:	pophi	{r4, r5, pc}
   41ab4:	tst	r1, #-2147483648	; 0x80000000
   41ab8:	lsl	r1, r1, #12
   41abc:	mov	ip, #1048576	; 0x100000
   41ac0:	orr	r1, ip, r1, lsr #12
   41ac4:	beq	41ad0 <flatcc_json_printer_clear@@Base+0xc8>
   41ac8:	rsbs	r0, r0, #0
   41acc:	rsc	r1, r1, #0
   41ad0:	tst	r3, #-2147483648	; 0x80000000
   41ad4:	lsl	r3, r3, #12
   41ad8:	orr	r3, ip, r3, lsr #12
   41adc:	beq	41ae8 <flatcc_json_printer_clear@@Base+0xe0>
   41ae0:	rsbs	r2, r2, #0
   41ae4:	rsc	r3, r3, #0
   41ae8:	teq	r4, r5
   41aec:	beq	41c50 <flatcc_json_printer_clear@@Base+0x248>
   41af0:	sub	r4, r4, #1
   41af4:	rsbs	lr, r5, #32
   41af8:	blt	41b14 <flatcc_json_printer_clear@@Base+0x10c>
   41afc:	lsl	ip, r2, lr
   41b00:	adds	r0, r0, r2, lsr r5
   41b04:	adc	r1, r1, #0
   41b08:	adds	r0, r0, r3, lsl lr
   41b0c:	adcs	r1, r1, r3, asr r5
   41b10:	b	41b30 <flatcc_json_printer_clear@@Base+0x128>
   41b14:	sub	r5, r5, #32
   41b18:	add	lr, lr, #32
   41b1c:	cmp	r2, #1
   41b20:	lsl	ip, r3, lr
   41b24:	orrcs	ip, ip, #2
   41b28:	adds	r0, r0, r3, asr r5
   41b2c:	adcs	r1, r1, r3, asr #31
   41b30:	and	r5, r1, #-2147483648	; 0x80000000
   41b34:	bpl	41b44 <flatcc_json_printer_clear@@Base+0x13c>
   41b38:	rsbs	ip, ip, #0
   41b3c:	rscs	r0, r0, #0
   41b40:	rsc	r1, r1, #0
   41b44:	cmp	r1, #1048576	; 0x100000
   41b48:	bcc	41b88 <flatcc_json_printer_clear@@Base+0x180>
   41b4c:	cmp	r1, #2097152	; 0x200000
   41b50:	bcc	41b70 <flatcc_json_printer_clear@@Base+0x168>
   41b54:	lsrs	r1, r1, #1
   41b58:	rrxs	r0, r0
   41b5c:	rrx	ip, ip
   41b60:	add	r4, r4, #1
   41b64:	lsl	r2, r4, #21
   41b68:	cmn	r2, #4194304	; 0x400000
   41b6c:	bcs	41cc8 <flatcc_json_printer_clear@@Base+0x2c0>
   41b70:	cmp	ip, #-2147483648	; 0x80000000
   41b74:	lsrseq	ip, r0, #1
   41b78:	adcs	r0, r0, #0
   41b7c:	adc	r1, r1, r4, lsl #20
   41b80:	orr	r1, r1, r5
   41b84:	pop	{r4, r5, pc}
   41b88:	lsls	ip, ip, #1
   41b8c:	adcs	r0, r0, r0
   41b90:	adc	r1, r1, r1
   41b94:	tst	r1, #1048576	; 0x100000
   41b98:	sub	r4, r4, #1
   41b9c:	bne	41b70 <flatcc_json_printer_clear@@Base+0x168>
   41ba0:	teq	r1, #0
   41ba4:	moveq	r1, r0
   41ba8:	moveq	r0, #0
   41bac:	clz	r3, r1
   41bb0:	addeq	r3, r3, #32
   41bb4:	sub	r3, r3, #11
   41bb8:	subs	r2, r3, #32
   41bbc:	bge	41be0 <flatcc_json_printer_clear@@Base+0x1d8>
   41bc0:	adds	r2, r2, #12
   41bc4:	ble	41bdc <flatcc_json_printer_clear@@Base+0x1d4>
   41bc8:	add	ip, r2, #20
   41bcc:	rsb	r2, r2, #12
   41bd0:	lsl	r0, r1, ip
   41bd4:	lsr	r1, r1, r2
   41bd8:	b	41bf0 <flatcc_json_printer_clear@@Base+0x1e8>
   41bdc:	add	r2, r2, #20
   41be0:	rsble	ip, r2, #32
   41be4:	lsl	r1, r1, r2
   41be8:	orrle	r1, r1, r0, lsr ip
   41bec:	lslle	r0, r0, r2
   41bf0:	subs	r4, r4, r3
   41bf4:	addge	r1, r1, r4, lsl #20
   41bf8:	orrge	r1, r1, r5
   41bfc:	popge	{r4, r5, pc}
   41c00:	mvn	r4, r4
   41c04:	subs	r4, r4, #31
   41c08:	bge	41c44 <flatcc_json_printer_clear@@Base+0x23c>
   41c0c:	adds	r4, r4, #12
   41c10:	bgt	41c2c <flatcc_json_printer_clear@@Base+0x224>
   41c14:	add	r4, r4, #20
   41c18:	rsb	r2, r4, #32
   41c1c:	lsr	r0, r0, r4
   41c20:	orr	r0, r0, r1, lsl r2
   41c24:	orr	r1, r5, r1, lsr r4
   41c28:	pop	{r4, r5, pc}
   41c2c:	rsb	r4, r4, #12
   41c30:	rsb	r2, r4, #32
   41c34:	lsr	r0, r0, r2
   41c38:	orr	r0, r0, r1, lsl r4
   41c3c:	mov	r1, r5
   41c40:	pop	{r4, r5, pc}
   41c44:	lsr	r0, r1, r4
   41c48:	mov	r1, r5
   41c4c:	pop	{r4, r5, pc}
   41c50:	teq	r4, #0
   41c54:	eor	r3, r3, #1048576	; 0x100000
   41c58:	eoreq	r1, r1, #1048576	; 0x100000
   41c5c:	addeq	r4, r4, #1
   41c60:	subne	r5, r5, #1
   41c64:	b	41af0 <flatcc_json_printer_clear@@Base+0xe8>
   41c68:	mvns	ip, r4, asr #21
   41c6c:	mvnsne	ip, r5, asr #21
   41c70:	beq	41cd8 <flatcc_json_printer_clear@@Base+0x2d0>
   41c74:	teq	r4, r5
   41c78:	teqeq	r0, r2
   41c7c:	beq	41c90 <flatcc_json_printer_clear@@Base+0x288>
   41c80:	orrs	ip, r4, r0
   41c84:	moveq	r1, r3
   41c88:	moveq	r0, r2
   41c8c:	pop	{r4, r5, pc}
   41c90:	teq	r1, r3
   41c94:	movne	r1, #0
   41c98:	movne	r0, #0
   41c9c:	popne	{r4, r5, pc}
   41ca0:	lsrs	ip, r4, #21
   41ca4:	bne	41cb8 <flatcc_json_printer_clear@@Base+0x2b0>
   41ca8:	lsls	r0, r0, #1
   41cac:	adcs	r1, r1, r1
   41cb0:	orrcs	r1, r1, #-2147483648	; 0x80000000
   41cb4:	pop	{r4, r5, pc}
   41cb8:	adds	r4, r4, #4194304	; 0x400000
   41cbc:	addcc	r1, r1, #1048576	; 0x100000
   41cc0:	popcc	{r4, r5, pc}
   41cc4:	and	r5, r1, #-2147483648	; 0x80000000
   41cc8:	orr	r1, r5, #2130706432	; 0x7f000000
   41ccc:	orr	r1, r1, #15728640	; 0xf00000
   41cd0:	mov	r0, #0
   41cd4:	pop	{r4, r5, pc}
   41cd8:	mvns	ip, r4, asr #21
   41cdc:	movne	r1, r3
   41ce0:	movne	r0, r2
   41ce4:	mvnseq	ip, r5, asr #21
   41ce8:	movne	r3, r1
   41cec:	movne	r2, r0
   41cf0:	orrs	r4, r0, r1, lsl #12
   41cf4:	orrseq	r5, r2, r3, lsl #12
   41cf8:	teqeq	r1, r3
   41cfc:	orrne	r1, r1, #524288	; 0x80000
   41d00:	pop	{r4, r5, pc}
   41d04:	teq	r0, #0
   41d08:	moveq	r1, #0
   41d0c:	bxeq	lr
   41d10:	push	{r4, r5, lr}
   41d14:	mov	r4, #1024	; 0x400
   41d18:	add	r4, r4, #50	; 0x32
   41d1c:	mov	r5, #0
   41d20:	mov	r1, #0
   41d24:	b	41ba0 <flatcc_json_printer_clear@@Base+0x198>
   41d28:	teq	r0, #0
   41d2c:	moveq	r1, #0
   41d30:	bxeq	lr
   41d34:	push	{r4, r5, lr}
   41d38:	mov	r4, #1024	; 0x400
   41d3c:	add	r4, r4, #50	; 0x32
   41d40:	ands	r5, r0, #-2147483648	; 0x80000000
   41d44:	rsbmi	r0, r0, #0
   41d48:	mov	r1, #0
   41d4c:	b	41ba0 <flatcc_json_printer_clear@@Base+0x198>
   41d50:	lsls	r2, r0, #1
   41d54:	asr	r1, r2, #3
   41d58:	rrx	r1, r1
   41d5c:	lsl	r0, r2, #28
   41d60:	andsne	r3, r2, #-16777216	; 0xff000000
   41d64:	teqne	r3, #-16777216	; 0xff000000
   41d68:	eorne	r1, r1, #939524096	; 0x38000000
   41d6c:	bxne	lr
   41d70:	bics	r2, r2, #-16777216	; 0xff000000
   41d74:	bxeq	lr
   41d78:	teq	r3, #-16777216	; 0xff000000
   41d7c:	orreq	r1, r1, #524288	; 0x80000
   41d80:	bxeq	lr
   41d84:	push	{r4, r5, lr}
   41d88:	mov	r4, #896	; 0x380
   41d8c:	and	r5, r1, #-2147483648	; 0x80000000
   41d90:	bic	r1, r1, #-2147483648	; 0x80000000
   41d94:	b	41ba0 <flatcc_json_printer_clear@@Base+0x198>
   41d98:	orrs	r2, r0, r1
   41d9c:	bxeq	lr
   41da0:	push	{r4, r5, lr}
   41da4:	mov	r5, #0
   41da8:	b	41dc8 <flatcc_json_printer_clear@@Base+0x3c0>
   41dac:	orrs	r2, r0, r1
   41db0:	bxeq	lr
   41db4:	push	{r4, r5, lr}
   41db8:	ands	r5, r1, #-2147483648	; 0x80000000
   41dbc:	bpl	41dc8 <flatcc_json_printer_clear@@Base+0x3c0>
   41dc0:	rsbs	r0, r0, #0
   41dc4:	rsc	r1, r1, #0
   41dc8:	mov	r4, #1024	; 0x400
   41dcc:	add	r4, r4, #50	; 0x32
   41dd0:	lsrs	ip, r1, #22
   41dd4:	beq	41b44 <flatcc_json_printer_clear@@Base+0x13c>
   41dd8:	mov	r2, #3
   41ddc:	lsrs	ip, ip, #3
   41de0:	addne	r2, r2, #3
   41de4:	lsrs	ip, ip, #3
   41de8:	addne	r2, r2, #3
   41dec:	add	r2, r2, ip, lsr #3
   41df0:	rsb	r3, r2, #32
   41df4:	lsl	ip, r0, r3
   41df8:	lsr	r0, r0, r2
   41dfc:	orr	r0, r0, r1, lsl r3
   41e00:	lsr	r1, r1, r2
   41e04:	add	r4, r4, r2
   41e08:	b	41b44 <flatcc_json_printer_clear@@Base+0x13c>
   41e0c:	eor	r0, r0, #-2147483648	; 0x80000000
   41e10:	b	41e18 <flatcc_json_printer_clear@@Base+0x410>
   41e14:	eor	r1, r1, #-2147483648	; 0x80000000
   41e18:	lsls	r2, r0, #1
   41e1c:	lslsne	r3, r1, #1
   41e20:	teqne	r2, r3
   41e24:	mvnsne	ip, r2, asr #24
   41e28:	mvnsne	ip, r3, asr #24
   41e2c:	beq	41f24 <flatcc_json_printer_clear@@Base+0x51c>
   41e30:	lsr	r2, r2, #24
   41e34:	rsbs	r3, r2, r3, lsr #24
   41e38:	addgt	r2, r2, r3
   41e3c:	eorgt	r1, r0, r1
   41e40:	eorgt	r0, r1, r0
   41e44:	eorgt	r1, r0, r1
   41e48:	rsblt	r3, r3, #0
   41e4c:	cmp	r3, #25
   41e50:	bxhi	lr
   41e54:	tst	r0, #-2147483648	; 0x80000000
   41e58:	orr	r0, r0, #8388608	; 0x800000
   41e5c:	bic	r0, r0, #-16777216	; 0xff000000
   41e60:	rsbne	r0, r0, #0
   41e64:	tst	r1, #-2147483648	; 0x80000000
   41e68:	orr	r1, r1, #8388608	; 0x800000
   41e6c:	bic	r1, r1, #-16777216	; 0xff000000
   41e70:	rsbne	r1, r1, #0
   41e74:	teq	r2, r3
   41e78:	beq	41f0c <flatcc_json_printer_clear@@Base+0x504>
   41e7c:	sub	r2, r2, #1
   41e80:	adds	r0, r0, r1, asr r3
   41e84:	rsb	r3, r3, #32
   41e88:	lsl	r1, r1, r3
   41e8c:	and	r3, r0, #-2147483648	; 0x80000000
   41e90:	bpl	41e9c <flatcc_json_printer_clear@@Base+0x494>
   41e94:	rsbs	r1, r1, #0
   41e98:	rsc	r0, r0, #0
   41e9c:	cmp	r0, #8388608	; 0x800000
   41ea0:	bcc	41ed4 <flatcc_json_printer_clear@@Base+0x4cc>
   41ea4:	cmp	r0, #16777216	; 0x1000000
   41ea8:	bcc	41ec0 <flatcc_json_printer_clear@@Base+0x4b8>
   41eac:	lsrs	r0, r0, #1
   41eb0:	rrx	r1, r1
   41eb4:	add	r2, r2, #1
   41eb8:	cmp	r2, #254	; 0xfe
   41ebc:	bcs	41f78 <flatcc_json_printer_clear@@Base+0x570>
   41ec0:	cmp	r1, #-2147483648	; 0x80000000
   41ec4:	adc	r0, r0, r2, lsl #23
   41ec8:	biceq	r0, r0, #1
   41ecc:	orr	r0, r0, r3
   41ed0:	bx	lr
   41ed4:	lsls	r1, r1, #1
   41ed8:	adc	r0, r0, r0
   41edc:	tst	r0, #8388608	; 0x800000
   41ee0:	sub	r2, r2, #1
   41ee4:	bne	41ec0 <flatcc_json_printer_clear@@Base+0x4b8>
   41ee8:	clz	ip, r0
   41eec:	sub	ip, ip, #8
   41ef0:	subs	r2, r2, ip
   41ef4:	lsl	r0, r0, ip
   41ef8:	addge	r0, r0, r2, lsl #23
   41efc:	rsblt	r2, r2, #0
   41f00:	orrge	r0, r0, r3
   41f04:	orrlt	r0, r3, r0, lsr r2
   41f08:	bx	lr
   41f0c:	teq	r2, #0
   41f10:	eor	r1, r1, #8388608	; 0x800000
   41f14:	eoreq	r0, r0, #8388608	; 0x800000
   41f18:	addeq	r2, r2, #1
   41f1c:	subne	r3, r3, #1
   41f20:	b	41e7c <flatcc_json_printer_clear@@Base+0x474>
   41f24:	lsl	r3, r1, #1
   41f28:	mvns	ip, r2, asr #24
   41f2c:	mvnsne	ip, r3, asr #24
   41f30:	beq	41f84 <flatcc_json_printer_clear@@Base+0x57c>
   41f34:	teq	r2, r3
   41f38:	beq	41f48 <flatcc_json_printer_clear@@Base+0x540>
   41f3c:	teq	r2, #0
   41f40:	moveq	r0, r1
   41f44:	bx	lr
   41f48:	teq	r0, r1
   41f4c:	movne	r0, #0
   41f50:	bxne	lr
   41f54:	tst	r2, #-16777216	; 0xff000000
   41f58:	bne	41f68 <flatcc_json_printer_clear@@Base+0x560>
   41f5c:	lsls	r0, r0, #1
   41f60:	orrcs	r0, r0, #-2147483648	; 0x80000000
   41f64:	bx	lr
   41f68:	adds	r2, r2, #33554432	; 0x2000000
   41f6c:	addcc	r0, r0, #8388608	; 0x800000
   41f70:	bxcc	lr
   41f74:	and	r3, r0, #-2147483648	; 0x80000000
   41f78:	orr	r0, r3, #2130706432	; 0x7f000000
   41f7c:	orr	r0, r0, #8388608	; 0x800000
   41f80:	bx	lr
   41f84:	mvns	r2, r2, asr #24
   41f88:	movne	r0, r1
   41f8c:	mvnseq	r3, r3, asr #24
   41f90:	movne	r1, r0
   41f94:	lsls	r2, r0, #9
   41f98:	lslseq	r3, r1, #9
   41f9c:	teqeq	r0, r1
   41fa0:	orrne	r0, r0, #4194304	; 0x400000
   41fa4:	bx	lr
   41fa8:	mov	r3, #0
   41fac:	b	41fb8 <flatcc_json_printer_clear@@Base+0x5b0>
   41fb0:	ands	r3, r0, #-2147483648	; 0x80000000
   41fb4:	rsbmi	r0, r0, #0
   41fb8:	movs	ip, r0
   41fbc:	bxeq	lr
   41fc0:	orr	r3, r3, #1258291200	; 0x4b000000
   41fc4:	mov	r1, r0
   41fc8:	mov	r0, #0
   41fcc:	b	42010 <flatcc_json_printer_clear@@Base+0x608>
   41fd0:	orrs	r2, r0, r1
   41fd4:	bxeq	lr
   41fd8:	mov	r3, #0
   41fdc:	b	41ff8 <flatcc_json_printer_clear@@Base+0x5f0>
   41fe0:	orrs	r2, r0, r1
   41fe4:	bxeq	lr
   41fe8:	ands	r3, r1, #-2147483648	; 0x80000000
   41fec:	bpl	41ff8 <flatcc_json_printer_clear@@Base+0x5f0>
   41ff0:	rsbs	r0, r0, #0
   41ff4:	rsc	r1, r1, #0
   41ff8:	movs	ip, r1
   41ffc:	moveq	ip, r0
   42000:	moveq	r1, r0
   42004:	moveq	r0, #0
   42008:	orr	r3, r3, #1526726656	; 0x5b000000
   4200c:	subeq	r3, r3, #268435456	; 0x10000000
   42010:	sub	r3, r3, #8388608	; 0x800000
   42014:	clz	r2, ip
   42018:	subs	r2, r2, #8
   4201c:	sub	r3, r3, r2, lsl #23
   42020:	blt	42040 <flatcc_json_printer_clear@@Base+0x638>
   42024:	add	r3, r3, r1, lsl r2
   42028:	lsl	ip, r0, r2
   4202c:	rsb	r2, r2, #32
   42030:	cmp	ip, #-2147483648	; 0x80000000
   42034:	adc	r0, r3, r0, lsr r2
   42038:	biceq	r0, r0, #1
   4203c:	bx	lr
   42040:	add	r2, r2, #32
   42044:	lsl	ip, r1, r2
   42048:	rsb	r2, r2, #32
   4204c:	orrs	r0, r0, ip, lsl #1
   42050:	adc	r0, r3, r1, lsr r2
   42054:	biceq	r0, r0, ip, lsr #31
   42058:	bx	lr
   4205c:	cmp	r3, #0
   42060:	cmpeq	r2, #0
   42064:	bne	42088 <flatcc_json_printer_clear@@Base+0x680>
   42068:	cmp	r1, #0
   4206c:	movlt	r1, #-2147483648	; 0x80000000
   42070:	movlt	r0, #0
   42074:	blt	42084 <flatcc_json_printer_clear@@Base+0x67c>
   42078:	cmpeq	r0, #0
   4207c:	mvnne	r1, #-2147483648	; 0x80000000
   42080:	mvnne	r0, #0
   42084:	b	4216c <flatcc_json_printer_clear@@Base+0x764>
   42088:	sub	sp, sp, #8
   4208c:	push	{sp, lr}
   42090:	cmp	r1, #0
   42094:	blt	420b4 <flatcc_json_printer_clear@@Base+0x6ac>
   42098:	cmp	r3, #0
   4209c:	blt	420e8 <flatcc_json_printer_clear@@Base+0x6e0>
   420a0:	bl	4217c <flatcc_json_printer_clear@@Base+0x774>
   420a4:	ldr	lr, [sp, #4]
   420a8:	add	sp, sp, #8
   420ac:	pop	{r2, r3}
   420b0:	bx	lr
   420b4:	rsbs	r0, r0, #0
   420b8:	sbc	r1, r1, r1, lsl #1
   420bc:	cmp	r3, #0
   420c0:	blt	4210c <flatcc_json_printer_clear@@Base+0x704>
   420c4:	bl	4217c <flatcc_json_printer_clear@@Base+0x774>
   420c8:	ldr	lr, [sp, #4]
   420cc:	add	sp, sp, #8
   420d0:	pop	{r2, r3}
   420d4:	rsbs	r0, r0, #0
   420d8:	sbc	r1, r1, r1, lsl #1
   420dc:	rsbs	r2, r2, #0
   420e0:	sbc	r3, r3, r3, lsl #1
   420e4:	bx	lr
   420e8:	rsbs	r2, r2, #0
   420ec:	sbc	r3, r3, r3, lsl #1
   420f0:	bl	4217c <flatcc_json_printer_clear@@Base+0x774>
   420f4:	ldr	lr, [sp, #4]
   420f8:	add	sp, sp, #8
   420fc:	pop	{r2, r3}
   42100:	rsbs	r0, r0, #0
   42104:	sbc	r1, r1, r1, lsl #1
   42108:	bx	lr
   4210c:	rsbs	r2, r2, #0
   42110:	sbc	r3, r3, r3, lsl #1
   42114:	bl	4217c <flatcc_json_printer_clear@@Base+0x774>
   42118:	ldr	lr, [sp, #4]
   4211c:	add	sp, sp, #8
   42120:	pop	{r2, r3}
   42124:	rsbs	r2, r2, #0
   42128:	sbc	r3, r3, r3, lsl #1
   4212c:	bx	lr
   42130:	cmp	r3, #0
   42134:	cmpeq	r2, #0
   42138:	bne	42150 <flatcc_json_printer_clear@@Base+0x748>
   4213c:	cmp	r1, #0
   42140:	cmpeq	r0, #0
   42144:	mvnne	r1, #0
   42148:	mvnne	r0, #0
   4214c:	b	4216c <flatcc_json_printer_clear@@Base+0x764>
   42150:	sub	sp, sp, #8
   42154:	push	{sp, lr}
   42158:	bl	4217c <flatcc_json_printer_clear@@Base+0x774>
   4215c:	ldr	lr, [sp, #4]
   42160:	add	sp, sp, #8
   42164:	pop	{r2, r3}
   42168:	bx	lr
   4216c:	push	{r1, lr}
   42170:	mov	r0, #8
   42174:	bl	144f4 <raise@plt>
   42178:	pop	{r1, pc}
   4217c:	cmp	r1, r3
   42180:	cmpeq	r0, r2
   42184:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42188:	mov	r4, r0
   4218c:	movcc	r0, #0
   42190:	mov	r5, r1
   42194:	ldr	lr, [sp, #36]	; 0x24
   42198:	movcc	r1, r0
   4219c:	bcc	42298 <flatcc_json_printer_clear@@Base+0x890>
   421a0:	cmp	r3, #0
   421a4:	clzeq	ip, r2
   421a8:	clzne	ip, r3
   421ac:	addeq	ip, ip, #32
   421b0:	cmp	r5, #0
   421b4:	clzeq	r1, r4
   421b8:	addeq	r1, r1, #32
   421bc:	clzne	r1, r5
   421c0:	sub	ip, ip, r1
   421c4:	sub	sl, ip, #32
   421c8:	lsl	r9, r3, ip
   421cc:	rsb	fp, ip, #32
   421d0:	orr	r9, r9, r2, lsl sl
   421d4:	orr	r9, r9, r2, lsr fp
   421d8:	lsl	r8, r2, ip
   421dc:	cmp	r5, r9
   421e0:	cmpeq	r4, r8
   421e4:	movcc	r0, #0
   421e8:	movcc	r1, r0
   421ec:	bcc	42208 <flatcc_json_printer_clear@@Base+0x800>
   421f0:	mov	r0, #1
   421f4:	subs	r4, r4, r8
   421f8:	lsl	r1, r0, sl
   421fc:	orr	r1, r1, r0, lsr fp
   42200:	lsl	r0, r0, ip
   42204:	sbc	r5, r5, r9
   42208:	cmp	ip, #0
   4220c:	beq	42298 <flatcc_json_printer_clear@@Base+0x890>
   42210:	lsr	r6, r8, #1
   42214:	orr	r6, r6, r9, lsl #31
   42218:	lsr	r7, r9, #1
   4221c:	mov	r2, ip
   42220:	b	42244 <flatcc_json_printer_clear@@Base+0x83c>
   42224:	subs	r3, r4, r6
   42228:	sbc	r8, r5, r7
   4222c:	adds	r3, r3, r3
   42230:	adc	r8, r8, r8
   42234:	adds	r4, r3, #1
   42238:	adc	r5, r8, #0
   4223c:	subs	r2, r2, #1
   42240:	beq	42260 <flatcc_json_printer_clear@@Base+0x858>
   42244:	cmp	r5, r7
   42248:	cmpeq	r4, r6
   4224c:	bcs	42224 <flatcc_json_printer_clear@@Base+0x81c>
   42250:	adds	r4, r4, r4
   42254:	adc	r5, r5, r5
   42258:	subs	r2, r2, #1
   4225c:	bne	42244 <flatcc_json_printer_clear@@Base+0x83c>
   42260:	lsr	r3, r4, ip
   42264:	orr	r3, r3, r5, lsl fp
   42268:	lsr	r2, r5, ip
   4226c:	orr	r3, r3, r5, lsr sl
   42270:	adds	r0, r0, r4
   42274:	mov	r4, r3
   42278:	lsl	r3, r2, ip
   4227c:	orr	r3, r3, r4, lsl sl
   42280:	lsl	ip, r4, ip
   42284:	orr	r3, r3, r4, lsr fp
   42288:	adc	r1, r1, r5
   4228c:	subs	r0, r0, ip
   42290:	mov	r5, r2
   42294:	sbc	r1, r1, r3
   42298:	cmp	lr, #0
   4229c:	strdne	r4, [lr]
   422a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000422a4 <__libc_csu_init@@Base>:
   422a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   422a8:	mov	r7, r0
   422ac:	ldr	r6, [pc, #72]	; 422fc <__libc_csu_init@@Base+0x58>
   422b0:	ldr	r5, [pc, #72]	; 42300 <__libc_csu_init@@Base+0x5c>
   422b4:	add	r6, pc, r6
   422b8:	add	r5, pc, r5
   422bc:	sub	r6, r6, r5
   422c0:	mov	r8, r1
   422c4:	mov	r9, r2
   422c8:	bl	144d4 <raise@plt-0x20>
   422cc:	asrs	r6, r6, #2
   422d0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   422d4:	mov	r4, #0
   422d8:	add	r4, r4, #1
   422dc:	ldr	r3, [r5], #4
   422e0:	mov	r2, r9
   422e4:	mov	r1, r8
   422e8:	mov	r0, r7
   422ec:	blx	r3
   422f0:	cmp	r6, r4
   422f4:	bne	422d8 <__libc_csu_init@@Base+0x34>
   422f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   422fc:	andeq	r5, r1, r8, asr ip
   42300:	andeq	r5, r1, r0, asr ip

00042304 <__libc_csu_fini@@Base>:
   42304:	bx	lr

Disassembly of section .fini:

00042308 <.fini>:
   42308:	push	{r3, lr}
   4230c:	pop	{r3, pc}
