
../repos/coreutils/src/unexpand:     file format elf32-littlearm


Disassembly of section .init:

00010c4c <.init>:
   10c4c:	push	{r3, lr}
   10c50:	bl	10f0c <__assert_fail@plt+0x48>
   10c54:	pop	{r3, pc}

Disassembly of section .plt:

00010c58 <calloc@plt-0x14>:
   10c58:	push	{lr}		; (str lr, [sp, #-4]!)
   10c5c:	ldr	lr, [pc, #4]	; 10c68 <calloc@plt-0x4>
   10c60:	add	lr, pc, lr
   10c64:	ldr	pc, [lr, #8]!
   10c68:	muleq	r1, r8, r3

00010c6c <calloc@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #90112	; 0x16000
   10c74:	ldr	pc, [ip, #920]!	; 0x398

00010c78 <fputs_unlocked@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #90112	; 0x16000
   10c80:	ldr	pc, [ip, #912]!	; 0x390

00010c84 <raise@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #90112	; 0x16000
   10c8c:	ldr	pc, [ip, #904]!	; 0x388

00010c90 <strcmp@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #90112	; 0x16000
   10c98:	ldr	pc, [ip, #896]!	; 0x380

00010c9c <posix_fadvise64@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #90112	; 0x16000
   10ca4:	ldr	pc, [ip, #888]!	; 0x378

00010ca8 <fflush@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #90112	; 0x16000
   10cb0:	ldr	pc, [ip, #880]!	; 0x370

00010cb4 <free@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #90112	; 0x16000
   10cbc:	ldr	pc, [ip, #872]!	; 0x368

00010cc0 <_exit@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #90112	; 0x16000
   10cc8:	ldr	pc, [ip, #864]!	; 0x360

00010ccc <memcpy@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #90112	; 0x16000
   10cd4:	ldr	pc, [ip, #856]!	; 0x358

00010cd8 <mbsinit@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #90112	; 0x16000
   10ce0:	ldr	pc, [ip, #848]!	; 0x350

00010ce4 <fwrite_unlocked@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #90112	; 0x16000
   10cec:	ldr	pc, [ip, #840]!	; 0x348

00010cf0 <memcmp@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #90112	; 0x16000
   10cf8:	ldr	pc, [ip, #832]!	; 0x340

00010cfc <fputc_unlocked@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #90112	; 0x16000
   10d04:	ldr	pc, [ip, #824]!	; 0x338

00010d08 <dcgettext@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #90112	; 0x16000
   10d10:	ldr	pc, [ip, #816]!	; 0x330

00010d14 <realloc@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #90112	; 0x16000
   10d1c:	ldr	pc, [ip, #808]!	; 0x328

00010d20 <textdomain@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #90112	; 0x16000
   10d28:	ldr	pc, [ip, #800]!	; 0x320

00010d2c <iswprint@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #90112	; 0x16000
   10d34:	ldr	pc, [ip, #792]!	; 0x318

00010d38 <fwrite@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #90112	; 0x16000
   10d40:	ldr	pc, [ip, #784]!	; 0x310

00010d44 <lseek64@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #90112	; 0x16000
   10d4c:	ldr	pc, [ip, #776]!	; 0x308

00010d50 <__ctype_get_mb_cur_max@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #90112	; 0x16000
   10d58:	ldr	pc, [ip, #768]!	; 0x300

00010d5c <__fpending@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #90112	; 0x16000
   10d64:	ldr	pc, [ip, #760]!	; 0x2f8

00010d68 <mbrtowc@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #90112	; 0x16000
   10d70:	ldr	pc, [ip, #752]!	; 0x2f0

00010d74 <error@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #90112	; 0x16000
   10d7c:	ldr	pc, [ip, #744]!	; 0x2e8

00010d80 <malloc@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #90112	; 0x16000
   10d88:	ldr	pc, [ip, #736]!	; 0x2e0

00010d8c <__libc_start_main@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #90112	; 0x16000
   10d94:	ldr	pc, [ip, #728]!	; 0x2d8

00010d98 <__freading@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #90112	; 0x16000
   10da0:	ldr	pc, [ip, #720]!	; 0x2d0

00010da4 <__gmon_start__@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #90112	; 0x16000
   10dac:	ldr	pc, [ip, #712]!	; 0x2c8

00010db0 <getopt_long@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #90112	; 0x16000
   10db8:	ldr	pc, [ip, #704]!	; 0x2c0

00010dbc <__ctype_b_loc@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #90112	; 0x16000
   10dc4:	ldr	pc, [ip, #696]!	; 0x2b8

00010dc8 <exit@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #688]!	; 0x2b0

00010dd4 <strlen@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #680]!	; 0x2a8

00010de0 <__errno_location@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #672]!	; 0x2a0

00010dec <__cxa_atexit@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #664]!	; 0x298

00010df8 <memset@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #656]!	; 0x290

00010e04 <__printf_chk@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #648]!	; 0x288

00010e10 <fileno@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #640]!	; 0x280

00010e1c <__fprintf_chk@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #632]!	; 0x278

00010e28 <fclose@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #624]!	; 0x270

00010e34 <fseeko64@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #616]!	; 0x268

00010e40 <__uflow@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #608]!	; 0x260

00010e4c <__overflow@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #600]!	; 0x258

00010e58 <setlocale@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #592]!	; 0x250

00010e64 <strrchr@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #584]!	; 0x248

00010e70 <nl_langinfo@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #576]!	; 0x240

00010e7c <clearerr_unlocked@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #568]!	; 0x238

00010e88 <fopen64@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #560]!	; 0x230

00010e94 <bindtextdomain@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #552]!	; 0x228

00010ea0 <strncmp@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #544]!	; 0x220

00010eac <abort@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #536]!	; 0x218

00010eb8 <strspn@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #528]!	; 0x210

00010ec4 <__assert_fail@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #520]!	; 0x208

Disassembly of section .text:

00010ed0 <.text>:
   10ed0:	mov	fp, #0
   10ed4:	mov	lr, #0
   10ed8:	pop	{r1}		; (ldr r1, [sp], #4)
   10edc:	mov	r2, sp
   10ee0:	push	{r2}		; (str r2, [sp, #-4]!)
   10ee4:	push	{r0}		; (str r0, [sp, #-4]!)
   10ee8:	ldr	ip, [pc, #16]	; 10f00 <__assert_fail@plt+0x3c>
   10eec:	push	{ip}		; (str ip, [sp, #-4]!)
   10ef0:	ldr	r0, [pc, #12]	; 10f04 <__assert_fail@plt+0x40>
   10ef4:	ldr	r3, [pc, #12]	; 10f08 <__assert_fail@plt+0x44>
   10ef8:	bl	10d8c <__libc_start_main@plt>
   10efc:	bl	10eac <abort@plt>
   10f00:	muleq	r1, ip, ip
   10f04:	andeq	r1, r1, r8, lsl #7
   10f08:	andeq	r5, r1, ip, lsr ip
   10f0c:	ldr	r3, [pc, #20]	; 10f28 <__assert_fail@plt+0x64>
   10f10:	ldr	r2, [pc, #20]	; 10f2c <__assert_fail@plt+0x68>
   10f14:	add	r3, pc, r3
   10f18:	ldr	r2, [r3, r2]
   10f1c:	cmp	r2, #0
   10f20:	bxeq	lr
   10f24:	b	10da4 <__gmon_start__@plt>
   10f28:	andeq	r6, r1, r4, ror #1
   10f2c:	ldrdeq	r0, [r0], -r8
   10f30:	ldr	r0, [pc, #24]	; 10f50 <__assert_fail@plt+0x8c>
   10f34:	ldr	r3, [pc, #24]	; 10f54 <__assert_fail@plt+0x90>
   10f38:	cmp	r3, r0
   10f3c:	bxeq	lr
   10f40:	ldr	r3, [pc, #16]	; 10f58 <__assert_fail@plt+0x94>
   10f44:	cmp	r3, #0
   10f48:	bxeq	lr
   10f4c:	bx	r3
   10f50:	andeq	r7, r2, r4, lsr r1
   10f54:	andeq	r7, r2, r4, lsr r1
   10f58:	andeq	r0, r0, r0
   10f5c:	ldr	r0, [pc, #36]	; 10f88 <__assert_fail@plt+0xc4>
   10f60:	ldr	r1, [pc, #36]	; 10f8c <__assert_fail@plt+0xc8>
   10f64:	sub	r1, r1, r0
   10f68:	asr	r1, r1, #2
   10f6c:	add	r1, r1, r1, lsr #31
   10f70:	asrs	r1, r1, #1
   10f74:	bxeq	lr
   10f78:	ldr	r3, [pc, #16]	; 10f90 <__assert_fail@plt+0xcc>
   10f7c:	cmp	r3, #0
   10f80:	bxeq	lr
   10f84:	bx	r3
   10f88:	andeq	r7, r2, r4, lsr r1
   10f8c:	andeq	r7, r2, r4, lsr r1
   10f90:	andeq	r0, r0, r0
   10f94:	push	{r4, lr}
   10f98:	ldr	r4, [pc, #24]	; 10fb8 <__assert_fail@plt+0xf4>
   10f9c:	ldrb	r3, [r4]
   10fa0:	cmp	r3, #0
   10fa4:	popne	{r4, pc}
   10fa8:	bl	10f30 <__assert_fail@plt+0x6c>
   10fac:	mov	r3, #1
   10fb0:	strb	r3, [r4]
   10fb4:	pop	{r4, pc}
   10fb8:	andeq	r7, r2, ip, asr r1
   10fbc:	b	10f5c <__assert_fail@plt+0x98>
   10fc0:	push	{lr}		; (str lr, [sp, #-4]!)
   10fc4:	sub	sp, sp, #60	; 0x3c
   10fc8:	subs	r4, r0, #0
   10fcc:	beq	11014 <__assert_fail@plt+0x150>
   10fd0:	movw	r3, #29000	; 0x7148
   10fd4:	movt	r3, #2
   10fd8:	ldr	r5, [r3]
   10fdc:	mov	r2, #5
   10fe0:	movw	r1, #23912	; 0x5d68
   10fe4:	movt	r1, #1
   10fe8:	mov	r0, #0
   10fec:	bl	10d08 <dcgettext@plt>
   10ff0:	movw	r3, #29092	; 0x71a4
   10ff4:	movt	r3, #2
   10ff8:	ldr	r3, [r3]
   10ffc:	mov	r2, r0
   11000:	mov	r1, #1
   11004:	mov	r0, r5
   11008:	bl	10e1c <__fprintf_chk@plt>
   1100c:	mov	r0, r4
   11010:	bl	10dc8 <exit@plt>
   11014:	mov	r2, #5
   11018:	movw	r1, #23952	; 0x5d90
   1101c:	movt	r1, #1
   11020:	mov	r0, #0
   11024:	bl	10d08 <dcgettext@plt>
   11028:	movw	r3, #29092	; 0x71a4
   1102c:	movt	r3, #2
   11030:	ldr	r2, [r3]
   11034:	mov	r1, r0
   11038:	mov	r0, #1
   1103c:	bl	10e04 <__printf_chk@plt>
   11040:	mov	r2, #5
   11044:	movw	r1, #23988	; 0x5db4
   11048:	movt	r1, #1
   1104c:	mov	r0, #0
   11050:	bl	10d08 <dcgettext@plt>
   11054:	movw	r5, #29012	; 0x7154
   11058:	movt	r5, #2
   1105c:	ldr	r1, [r5]
   11060:	bl	10c78 <fputs_unlocked@plt>
   11064:	mov	r2, #5
   11068:	movw	r1, #24056	; 0x5df8
   1106c:	movt	r1, #1
   11070:	mov	r0, #0
   11074:	bl	10d08 <dcgettext@plt>
   11078:	ldr	r1, [r5]
   1107c:	bl	10c78 <fputs_unlocked@plt>
   11080:	mov	r2, #5
   11084:	movw	r1, #24112	; 0x5e30
   11088:	movt	r1, #1
   1108c:	mov	r0, #0
   11090:	bl	10d08 <dcgettext@plt>
   11094:	ldr	r1, [r5]
   11098:	bl	10c78 <fputs_unlocked@plt>
   1109c:	mov	r2, #5
   110a0:	movw	r1, #24188	; 0x5e7c
   110a4:	movt	r1, #1
   110a8:	mov	r0, #0
   110ac:	bl	10d08 <dcgettext@plt>
   110b0:	ldr	r1, [r5]
   110b4:	bl	10c78 <fputs_unlocked@plt>
   110b8:	bl	1253c <__assert_fail@plt+0x1678>
   110bc:	mov	r2, #5
   110c0:	movw	r1, #24412	; 0x5f5c
   110c4:	movt	r1, #1
   110c8:	mov	r0, #0
   110cc:	bl	10d08 <dcgettext@plt>
   110d0:	ldr	r1, [r5]
   110d4:	bl	10c78 <fputs_unlocked@plt>
   110d8:	mov	r2, #5
   110dc:	movw	r1, #24460	; 0x5f8c
   110e0:	movt	r1, #1
   110e4:	mov	r0, #0
   110e8:	bl	10d08 <dcgettext@plt>
   110ec:	ldr	r1, [r5]
   110f0:	bl	10c78 <fputs_unlocked@plt>
   110f4:	movw	r0, #23748	; 0x5cc4
   110f8:	movt	r0, #1
   110fc:	ldr	r1, [r0]
   11100:	ldr	r3, [r0, #4]
   11104:	str	r1, [sp]
   11108:	str	r3, [sp, #4]
   1110c:	ldrd	r2, [r0, #8]
   11110:	strd	r2, [sp, #8]
   11114:	ldrd	r2, [r0, #16]
   11118:	strd	r2, [sp, #16]
   1111c:	ldrd	r2, [r0, #24]
   11120:	strd	r2, [sp, #24]
   11124:	ldrd	r2, [r0, #32]
   11128:	strd	r2, [sp, #32]
   1112c:	ldrd	r2, [r0, #40]	; 0x28
   11130:	strd	r2, [sp, #40]	; 0x28
   11134:	ldrd	r2, [r0, #48]	; 0x30
   11138:	strd	r2, [sp, #48]	; 0x30
   1113c:	cmp	r1, #0
   11140:	moveq	r5, sp
   11144:	beq	11170 <__assert_fail@plt+0x2ac>
   11148:	mov	r5, sp
   1114c:	movw	r6, #23900	; 0x5d5c
   11150:	movt	r6, #1
   11154:	mov	r0, r6
   11158:	bl	10c90 <strcmp@plt>
   1115c:	cmp	r0, #0
   11160:	beq	11170 <__assert_fail@plt+0x2ac>
   11164:	ldr	r1, [r5, #8]!
   11168:	cmp	r1, #0
   1116c:	bne	11154 <__assert_fail@plt+0x290>
   11170:	ldr	r5, [r5, #4]
   11174:	cmp	r5, #0
   11178:	beq	112d4 <__assert_fail@plt+0x410>
   1117c:	mov	r2, #5
   11180:	movw	r1, #24516	; 0x5fc4
   11184:	movt	r1, #1
   11188:	mov	r0, #0
   1118c:	bl	10d08 <dcgettext@plt>
   11190:	movw	r3, #24540	; 0x5fdc
   11194:	movt	r3, #1
   11198:	movw	r2, #24580	; 0x6004
   1119c:	movt	r2, #1
   111a0:	mov	r1, r0
   111a4:	mov	r0, #1
   111a8:	bl	10e04 <__printf_chk@plt>
   111ac:	mov	r1, #0
   111b0:	mov	r0, #5
   111b4:	bl	10e58 <setlocale@plt>
   111b8:	cmp	r0, #0
   111bc:	beq	111d8 <__assert_fail@plt+0x314>
   111c0:	mov	r2, #3
   111c4:	movw	r1, #24596	; 0x6014
   111c8:	movt	r1, #1
   111cc:	bl	10ea0 <strncmp@plt>
   111d0:	cmp	r0, #0
   111d4:	bne	11254 <__assert_fail@plt+0x390>
   111d8:	mov	r2, #5
   111dc:	movw	r1, #24672	; 0x6060
   111e0:	movt	r1, #1
   111e4:	mov	r0, #0
   111e8:	bl	10d08 <dcgettext@plt>
   111ec:	movw	r6, #23900	; 0x5d5c
   111f0:	movt	r6, #1
   111f4:	mov	r3, r6
   111f8:	movw	r2, #24540	; 0x5fdc
   111fc:	movt	r2, #1
   11200:	mov	r1, r0
   11204:	mov	r0, #1
   11208:	bl	10e04 <__printf_chk@plt>
   1120c:	mov	r2, #5
   11210:	movw	r1, #24700	; 0x607c
   11214:	movt	r1, #1
   11218:	mov	r0, #0
   1121c:	bl	10d08 <dcgettext@plt>
   11220:	mov	r1, r0
   11224:	movw	r2, #24880	; 0x6130
   11228:	movt	r2, #1
   1122c:	movw	r3, #24408	; 0x5f58
   11230:	movt	r3, #1
   11234:	cmp	r5, r6
   11238:	moveq	r3, r2
   1123c:	mov	r2, r5
   11240:	mov	r0, #1
   11244:	bl	10e04 <__printf_chk@plt>
   11248:	b	1100c <__assert_fail@plt+0x148>
   1124c:	movw	r5, #23900	; 0x5d5c
   11250:	movt	r5, #1
   11254:	mov	r2, #5
   11258:	movw	r1, #24600	; 0x6018
   1125c:	movt	r1, #1
   11260:	mov	r0, #0
   11264:	bl	10d08 <dcgettext@plt>
   11268:	movw	r3, #29012	; 0x7154
   1126c:	movt	r3, #2
   11270:	ldr	r1, [r3]
   11274:	bl	10c78 <fputs_unlocked@plt>
   11278:	b	111d8 <__assert_fail@plt+0x314>
   1127c:	mov	r2, #5
   11280:	movw	r1, #24672	; 0x6060
   11284:	movt	r1, #1
   11288:	mov	r0, #0
   1128c:	bl	10d08 <dcgettext@plt>
   11290:	movw	r5, #23900	; 0x5d5c
   11294:	movt	r5, #1
   11298:	mov	r3, r5
   1129c:	movw	r2, #24540	; 0x5fdc
   112a0:	movt	r2, #1
   112a4:	mov	r1, r0
   112a8:	mov	r0, #1
   112ac:	bl	10e04 <__printf_chk@plt>
   112b0:	mov	r2, #5
   112b4:	movw	r1, #24700	; 0x607c
   112b8:	movt	r1, #1
   112bc:	mov	r0, #0
   112c0:	bl	10d08 <dcgettext@plt>
   112c4:	mov	r1, r0
   112c8:	movw	r3, #24880	; 0x6130
   112cc:	movt	r3, #1
   112d0:	b	1123c <__assert_fail@plt+0x378>
   112d4:	mov	r2, #5
   112d8:	movw	r1, #24516	; 0x5fc4
   112dc:	movt	r1, #1
   112e0:	mov	r0, #0
   112e4:	bl	10d08 <dcgettext@plt>
   112e8:	movw	r3, #24540	; 0x5fdc
   112ec:	movt	r3, #1
   112f0:	movw	r2, #24580	; 0x6004
   112f4:	movt	r2, #1
   112f8:	mov	r1, r0
   112fc:	mov	r0, #1
   11300:	bl	10e04 <__printf_chk@plt>
   11304:	mov	r1, #0
   11308:	mov	r0, #5
   1130c:	bl	10e58 <setlocale@plt>
   11310:	cmp	r0, #0
   11314:	beq	1127c <__assert_fail@plt+0x3b8>
   11318:	mov	r2, #3
   1131c:	movw	r1, #24596	; 0x6014
   11320:	movt	r1, #1
   11324:	bl	10ea0 <strncmp@plt>
   11328:	cmp	r0, #0
   1132c:	bne	1124c <__assert_fail@plt+0x388>
   11330:	mov	r2, #5
   11334:	movw	r1, #24672	; 0x6060
   11338:	movt	r1, #1
   1133c:	mov	r0, #0
   11340:	bl	10d08 <dcgettext@plt>
   11344:	movw	r5, #23900	; 0x5d5c
   11348:	movt	r5, #1
   1134c:	mov	r3, r5
   11350:	movw	r2, #24540	; 0x5fdc
   11354:	movt	r2, #1
   11358:	mov	r1, r0
   1135c:	mov	r0, #1
   11360:	bl	10e04 <__printf_chk@plt>
   11364:	mov	r2, #5
   11368:	movw	r1, #24700	; 0x607c
   1136c:	movt	r1, #1
   11370:	mov	r0, #0
   11374:	bl	10d08 <dcgettext@plt>
   11378:	mov	r1, r0
   1137c:	movw	r3, #24880	; 0x6130
   11380:	movt	r3, #1
   11384:	b	1123c <__assert_fail@plt+0x378>
   11388:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1138c:	strd	r6, [sp, #8]
   11390:	strd	r8, [sp, #16]
   11394:	strd	sl, [sp, #24]
   11398:	str	lr, [sp, #32]
   1139c:	sub	sp, sp, #44	; 0x2c
   113a0:	mov	r8, r0
   113a4:	mov	r7, r1
   113a8:	ldr	r0, [r1]
   113ac:	bl	1297c <__assert_fail@plt+0x1ab8>
   113b0:	movw	r1, #24408	; 0x5f58
   113b4:	movt	r1, #1
   113b8:	mov	r0, #6
   113bc:	bl	10e58 <setlocale@plt>
   113c0:	movw	r4, #24584	; 0x6008
   113c4:	movt	r4, #1
   113c8:	movw	r1, #24752	; 0x60b0
   113cc:	movt	r1, #1
   113d0:	mov	r0, r4
   113d4:	bl	10e94 <bindtextdomain@plt>
   113d8:	mov	r0, r4
   113dc:	bl	10d20 <textdomain@plt>
   113e0:	movw	r0, #9648	; 0x25b0
   113e4:	movt	r0, #1
   113e8:	bl	15ca0 <__assert_fail@plt+0x4ddc>
   113ec:	mov	r4, #0
   113f0:	mov	r5, #0
   113f4:	mov	sl, #0
   113f8:	mov	fp, sl
   113fc:	ldr	r9, [pc, #1036]	; 11810 <__assert_fail@plt+0x94c>
   11400:	movw	r6, #24820	; 0x60f4
   11404:	movt	r6, #1
   11408:	strd	r4, [sp, #8]
   1140c:	b	11544 <__assert_fail@plt+0x680>
   11410:	cmn	r0, #2
   11414:	beq	114cc <__assert_fail@plt+0x608>
   11418:	cmp	r0, #44	; 0x2c
   1141c:	beq	114b4 <__assert_fail@plt+0x5f0>
   11420:	cmn	r0, #3
   11424:	beq	114d4 <__assert_fail@plt+0x610>
   11428:	cmp	fp, #0
   1142c:	beq	119b4 <__assert_fail@plt+0xaf0>
   11430:	add	r3, pc, #976	; 0x3d0
   11434:	ldrd	r2, [r3]
   11438:	ldrd	r4, [sp, #8]
   1143c:	cmp	r5, r3
   11440:	cmpeq	r4, r2
   11444:	bhi	1151c <__assert_fail@plt+0x658>
   11448:	mov	r1, #10
   1144c:	ldr	r3, [sp, #8]
   11450:	umull	r2, r3, r3, r1
   11454:	ldr	ip, [sp, #12]
   11458:	mla	r3, r1, ip, r3
   1145c:	sub	r0, r0, #48	; 0x30
   11460:	adds	r4, r2, r0
   11464:	adc	r5, r3, r0, asr #31
   11468:	mov	r2, r4
   1146c:	mov	r3, r5
   11470:	ldrd	r0, [sp, #8]
   11474:	cmp	r5, r1
   11478:	cmpeq	r4, r0
   1147c:	bcc	1151c <__assert_fail@plt+0x658>
   11480:	strd	r2, [sp, #8]
   11484:	b	11544 <__assert_fail@plt+0x680>
   11488:	mov	r0, #1
   1148c:	bl	10fc0 <__assert_fail@plt+0xfc>
   11490:	movw	r3, #29080	; 0x7198
   11494:	movt	r3, #2
   11498:	mov	r2, #1
   1149c:	strb	r2, [r3]
   114a0:	movw	r3, #29016	; 0x7158
   114a4:	movt	r3, #2
   114a8:	ldr	r0, [r3]
   114ac:	bl	11c0c <__assert_fail@plt+0xd48>
   114b0:	b	11544 <__assert_fail@plt+0x680>
   114b4:	cmp	fp, #0
   114b8:	beq	11544 <__assert_fail@plt+0x680>
   114bc:	ldrd	r0, [sp, #8]
   114c0:	bl	11ab8 <__assert_fail@plt+0xbf4>
   114c4:	mov	fp, #0
   114c8:	b	11544 <__assert_fail@plt+0x680>
   114cc:	mov	r0, #0
   114d0:	bl	10fc0 <__assert_fail@plt+0xfc>
   114d4:	movw	r3, #28908	; 0x70ec
   114d8:	movt	r3, #2
   114dc:	movw	r0, #29012	; 0x7154
   114e0:	movt	r0, #2
   114e4:	mov	r4, #0
   114e8:	str	r4, [sp, #4]
   114ec:	movw	r2, #24776	; 0x60c8
   114f0:	movt	r2, #1
   114f4:	str	r2, [sp]
   114f8:	ldr	r3, [r3]
   114fc:	movw	r2, #24580	; 0x6004
   11500:	movt	r2, #1
   11504:	movw	r1, #23900	; 0x5d5c
   11508:	movt	r1, #1
   1150c:	ldr	r0, [r0]
   11510:	bl	15174 <__assert_fail@plt+0x42b0>
   11514:	mov	r0, r4
   11518:	bl	10dc8 <exit@plt>
   1151c:	mov	r2, #5
   11520:	movw	r1, #24792	; 0x60d8
   11524:	movt	r1, #1
   11528:	mov	r0, #0
   1152c:	bl	10d08 <dcgettext@plt>
   11530:	mov	r2, r0
   11534:	mov	r1, #0
   11538:	mov	r0, #1
   1153c:	bl	10d74 <error@plt>
   11540:	mov	sl, #1
   11544:	mov	r3, #0
   11548:	str	r3, [sp]
   1154c:	mov	r3, r9
   11550:	mov	r2, r6
   11554:	mov	r1, r7
   11558:	mov	r0, r8
   1155c:	bl	10db0 <getopt_long@plt>
   11560:	cmn	r0, #1
   11564:	beq	115a0 <__assert_fail@plt+0x6dc>
   11568:	cmp	r0, #63	; 0x3f
   1156c:	beq	11488 <__assert_fail@plt+0x5c4>
   11570:	ble	11410 <__assert_fail@plt+0x54c>
   11574:	cmp	r0, #116	; 0x74
   11578:	beq	11490 <__assert_fail@plt+0x5cc>
   1157c:	cmp	r0, #256	; 0x100
   11580:	beq	11540 <__assert_fail@plt+0x67c>
   11584:	cmp	r0, #97	; 0x61
   11588:	bne	11428 <__assert_fail@plt+0x564>
   1158c:	movw	r3, #29080	; 0x7198
   11590:	movt	r3, #2
   11594:	mov	r2, #1
   11598:	strb	r2, [r3]
   1159c:	b	11544 <__assert_fail@plt+0x680>
   115a0:	ldrd	r4, [sp, #8]
   115a4:	cmp	sl, #0
   115a8:	beq	115bc <__assert_fail@plt+0x6f8>
   115ac:	movw	r3, #29080	; 0x7198
   115b0:	movt	r3, #2
   115b4:	mov	r2, #0
   115b8:	strb	r2, [r3]
   115bc:	cmp	fp, #0
   115c0:	bne	11644 <__assert_fail@plt+0x780>
   115c4:	bl	11fa8 <__assert_fail@plt+0x10e4>
   115c8:	movw	r3, #28992	; 0x7140
   115cc:	movt	r3, #2
   115d0:	ldr	r0, [r3]
   115d4:	cmp	r0, r8
   115d8:	addlt	r0, r7, r0, lsl #2
   115dc:	movge	r0, #0
   115e0:	bl	122d4 <__assert_fail@plt+0x1410>
   115e4:	mov	r0, #0
   115e8:	bl	12304 <__assert_fail@plt+0x1440>
   115ec:	subs	sl, r0, #0
   115f0:	beq	1194c <__assert_fail@plt+0xa88>
   115f4:	movw	r3, #29052	; 0x717c
   115f8:	movt	r3, #2
   115fc:	ldr	r0, [r3]
   11600:	bl	1524c <__assert_fail@plt+0x4388>
   11604:	str	r0, [sp, #28]
   11608:	movw	r3, #29080	; 0x7198
   1160c:	movt	r3, #2
   11610:	str	r3, [sp, #24]
   11614:	movw	fp, #29012	; 0x7154
   11618:	movt	fp, #2
   1161c:	mov	r3, #0
   11620:	str	r3, [sp, #36]	; 0x24
   11624:	mov	r6, r3
   11628:	mov	r3, #1
   1162c:	str	r3, [sp, #8]
   11630:	str	r6, [sp, #20]
   11634:	mov	r8, #0
   11638:	mov	r9, #0
   1163c:	mov	r5, #1
   11640:	b	11880 <__assert_fail@plt+0x9bc>
   11644:	mov	r0, r4
   11648:	mov	r1, r5
   1164c:	bl	11ab8 <__assert_fail@plt+0xbf4>
   11650:	b	115c4 <__assert_fail@plt+0x700>
   11654:	mov	r0, sl
   11658:	bl	10e40 <__uflow@plt>
   1165c:	subs	r4, r0, #0
   11660:	bge	1189c <__assert_fail@plt+0x9d8>
   11664:	mov	r0, sl
   11668:	bl	12304 <__assert_fail@plt+0x1440>
   1166c:	subs	sl, r0, #0
   11670:	bne	11880 <__assert_fail@plt+0x9bc>
   11674:	cmp	r5, #0
   11678:	beq	11944 <__assert_fail@plt+0xa80>
   1167c:	bl	10dbc <__ctype_b_loc@plt>
   11680:	ldr	r2, [r0]
   11684:	lsl	r3, r4, #1
   11688:	ldrh	r3, [r2, r3]
   1168c:	and	r3, r3, #1
   11690:	cmp	r3, #0
   11694:	movne	r7, #1
   11698:	moveq	r7, #0
   1169c:	streq	r7, [sp, #8]
   116a0:	beq	118d4 <__assert_fail@plt+0xa10>
   116a4:	add	r3, sp, #35	; 0x23
   116a8:	add	r2, sp, #36	; 0x24
   116ac:	mov	r0, r8
   116b0:	mov	r1, r9
   116b4:	bl	1215c <__assert_fail@plt+0x1298>
   116b8:	ldrb	r3, [sp, #35]	; 0x23
   116bc:	cmp	r3, #0
   116c0:	bne	1178c <__assert_fail@plt+0x8c8>
   116c4:	cmp	r9, r1
   116c8:	cmpeq	r8, r0
   116cc:	bhi	11728 <__assert_fail@plt+0x864>
   116d0:	cmp	r4, #9
   116d4:	beq	1174c <__assert_fail@plt+0x888>
   116d8:	adds	r8, r8, #1
   116dc:	adc	r9, r9, #0
   116e0:	ldr	r3, [sp, #8]
   116e4:	eor	r5, r3, #1
   116e8:	cmp	r1, r9
   116ec:	cmpeq	r0, r8
   116f0:	orrne	r5, r5, #1
   116f4:	ands	r5, r5, #255	; 0xff
   116f8:	bne	11764 <__assert_fail@plt+0x8a0>
   116fc:	mov	r3, #9
   11700:	ldr	r2, [sp, #28]
   11704:	strb	r3, [r2]
   11708:	mov	r0, r8
   1170c:	mov	r1, r9
   11710:	ldr	r6, [sp, #20]
   11714:	mov	r8, r0
   11718:	mov	r9, r1
   1171c:	mov	r5, #1
   11720:	mov	r4, #9
   11724:	b	11790 <__assert_fail@plt+0x8cc>
   11728:	mov	r2, #5
   1172c:	movw	r1, #24836	; 0x6104
   11730:	movt	r1, #1
   11734:	mov	r0, #0
   11738:	bl	10d08 <dcgettext@plt>
   1173c:	mov	r2, r0
   11740:	mov	r1, #0
   11744:	mov	r0, #1
   11748:	bl	10d74 <error@plt>
   1174c:	cmp	r6, #0
   11750:	beq	11710 <__assert_fail@plt+0x84c>
   11754:	mov	r3, #9
   11758:	ldr	r2, [sp, #28]
   1175c:	strb	r3, [r2]
   11760:	b	11710 <__assert_fail@plt+0x84c>
   11764:	cmp	r1, r9
   11768:	cmpeq	r0, r8
   1176c:	ldr	r3, [sp, #20]
   11770:	moveq	r3, r5
   11774:	str	r3, [sp, #20]
   11778:	ldr	r3, [sp, #28]
   1177c:	strb	r4, [r3, r6]
   11780:	add	r6, r6, #1
   11784:	str	r5, [sp, #8]
   11788:	b	11878 <__assert_fail@plt+0x9b4>
   1178c:	mov	r5, #0
   11790:	str	r7, [sp, #8]
   11794:	b	118e8 <__assert_fail@plt+0xa24>
   11798:	orrs	r3, r8, r9
   1179c:	movne	r3, #1
   117a0:	moveq	r3, #0
   117a4:	mov	r2, #0
   117a8:	subs	r8, r8, r3
   117ac:	sbc	r9, r9, r2
   117b0:	ldr	r3, [sp, #36]	; 0x24
   117b4:	cmp	r3, r2
   117b8:	subne	r3, r3, #1
   117bc:	str	r3, [sp, #36]	; 0x24
   117c0:	cmp	r6, r2
   117c4:	bne	11800 <__assert_fail@plt+0x93c>
   117c8:	ldr	r3, [sp, #24]
   117cc:	ldrb	r5, [r3]
   117d0:	orr	r5, r7, r5
   117d4:	str	r7, [sp, #8]
   117d8:	b	11858 <__assert_fail@plt+0x994>
   117dc:	mov	r2, #5
   117e0:	movw	r1, #24836	; 0x6104
   117e4:	movt	r1, #1
   117e8:	mov	r0, #0
   117ec:	bl	10d08 <dcgettext@plt>
   117f0:	mov	r2, r0
   117f4:	mov	r1, #0
   117f8:	mov	r0, #1
   117fc:	bl	10d74 <error@plt>
   11800:	str	r7, [sp, #8]
   11804:	b	118f0 <__assert_fail@plt+0xa2c>
   11808:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1180c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11810:	strdeq	r5, [r1], -ip
   11814:	ldr	r3, [fp]
   11818:	mov	r2, r6
   1181c:	mov	r1, #1
   11820:	ldr	r0, [sp, #28]
   11824:	bl	10ce4 <fwrite_unlocked@plt>
   11828:	cmp	r0, r6
   1182c:	bne	11918 <__assert_fail@plt+0xa54>
   11830:	mov	r3, #0
   11834:	str	r3, [sp, #20]
   11838:	ldr	r3, [sp, #24]
   1183c:	ldrb	r3, [r3]
   11840:	ldr	r2, [sp, #8]
   11844:	orr	r3, r2, r3
   11848:	and	r5, r5, r3
   1184c:	cmp	r4, #0
   11850:	blt	11944 <__assert_fail@plt+0xa80>
   11854:	mov	r6, #0
   11858:	ldr	r0, [fp]
   1185c:	ldr	r3, [r0, #20]
   11860:	ldr	r2, [r0, #24]
   11864:	cmp	r3, r2
   11868:	addcc	r2, r3, #1
   1186c:	strcc	r2, [r0, #20]
   11870:	strbcc	r4, [r3]
   11874:	bcs	11978 <__assert_fail@plt+0xab4>
   11878:	cmp	r4, #10
   1187c:	beq	1161c <__assert_fail@plt+0x758>
   11880:	ldr	r3, [sl, #4]
   11884:	ldr	r2, [sl, #8]
   11888:	cmp	r3, r2
   1188c:	bcs	11654 <__assert_fail@plt+0x790>
   11890:	add	r2, r3, #1
   11894:	str	r2, [sl, #4]
   11898:	ldrb	r4, [r3]
   1189c:	cmp	r5, #0
   118a0:	beq	11858 <__assert_fail@plt+0x994>
   118a4:	bl	10dbc <__ctype_b_loc@plt>
   118a8:	ldr	r2, [r0]
   118ac:	lsl	r3, r4, #1
   118b0:	ldrh	r3, [r2, r3]
   118b4:	and	r3, r3, #1
   118b8:	cmp	r3, #0
   118bc:	movne	r7, #1
   118c0:	moveq	r7, #0
   118c4:	bne	116a4 <__assert_fail@plt+0x7e0>
   118c8:	cmp	r4, #8
   118cc:	strne	r7, [sp, #8]
   118d0:	beq	11798 <__assert_fail@plt+0x8d4>
   118d4:	adds	r8, r8, #1
   118d8:	adc	r9, r9, #0
   118dc:	orrs	r3, r8, r9
   118e0:	beq	117dc <__assert_fail@plt+0x918>
   118e4:	mov	r5, #1
   118e8:	cmp	r6, #0
   118ec:	beq	11838 <__assert_fail@plt+0x974>
   118f0:	ldr	r3, [sp, #20]
   118f4:	cmp	r6, #1
   118f8:	movls	r3, #0
   118fc:	andhi	r3, r3, #1
   11900:	cmp	r3, #0
   11904:	beq	11814 <__assert_fail@plt+0x950>
   11908:	mov	r3, #9
   1190c:	ldr	r2, [sp, #28]
   11910:	strb	r3, [r2]
   11914:	b	11814 <__assert_fail@plt+0x950>
   11918:	bl	10de0 <__errno_location@plt>
   1191c:	ldr	r4, [r0]
   11920:	mov	r2, #5
   11924:	movw	r1, #24860	; 0x611c
   11928:	movt	r1, #1
   1192c:	mov	r0, #0
   11930:	bl	10d08 <dcgettext@plt>
   11934:	mov	r2, r0
   11938:	mov	r1, r4
   1193c:	mov	r0, #1
   11940:	bl	10d74 <error@plt>
   11944:	ldr	r0, [sp, #28]
   11948:	bl	1285c <__assert_fail@plt+0x1998>
   1194c:	bl	124e4 <__assert_fail@plt+0x1620>
   11950:	movw	r3, #29076	; 0x7194
   11954:	movt	r3, #2
   11958:	ldr	r0, [r3]
   1195c:	add	sp, sp, #44	; 0x2c
   11960:	ldrd	r4, [sp]
   11964:	ldrd	r6, [sp, #8]
   11968:	ldrd	r8, [sp, #16]
   1196c:	ldrd	sl, [sp, #24]
   11970:	add	sp, sp, #32
   11974:	pop	{pc}		; (ldr pc, [sp], #4)
   11978:	uxtb	r1, r4
   1197c:	bl	10e4c <__overflow@plt>
   11980:	cmp	r0, #0
   11984:	bge	11878 <__assert_fail@plt+0x9b4>
   11988:	bl	10de0 <__errno_location@plt>
   1198c:	ldr	r4, [r0]
   11990:	mov	r2, #5
   11994:	movw	r1, #24860	; 0x611c
   11998:	movt	r1, #1
   1199c:	mov	r0, #0
   119a0:	bl	10d08 <dcgettext@plt>
   119a4:	mov	r2, r0
   119a8:	mov	r1, r4
   119ac:	mov	r0, #1
   119b0:	bl	10d74 <error@plt>
   119b4:	sub	r0, r0, #48	; 0x30
   119b8:	mov	r2, r0
   119bc:	asr	r3, r0, #31
   119c0:	strd	r2, [sp, #8]
   119c4:	mov	fp, #1
   119c8:	b	11544 <__assert_fail@plt+0x680>
   119cc:	andeq	r0, r0, r0
   119d0:	strd	r4, [sp, #-16]!
   119d4:	str	r6, [sp, #8]
   119d8:	str	lr, [sp, #12]
   119dc:	mov	r4, r0
   119e0:	mov	r5, r1
   119e4:	movw	r3, #29024	; 0x7160
   119e8:	movt	r3, #2
   119ec:	ldrd	r2, [r3]
   119f0:	orrs	r3, r2, r3
   119f4:	moveq	r0, #1
   119f8:	bne	11a18 <__assert_fail@plt+0xb54>
   119fc:	movw	r3, #29024	; 0x7160
   11a00:	movt	r3, #2
   11a04:	strd	r4, [r3]
   11a08:	ldrd	r4, [sp]
   11a0c:	ldr	r6, [sp, #8]
   11a10:	add	sp, sp, #12
   11a14:	pop	{pc}		; (ldr pc, [sp], #4)
   11a18:	mov	r2, #5
   11a1c:	movw	r1, #25032	; 0x61c8
   11a20:	movt	r1, #1
   11a24:	mov	r0, #0
   11a28:	bl	10d08 <dcgettext@plt>
   11a2c:	mov	r2, r0
   11a30:	mov	r1, #0
   11a34:	mov	r0, r1
   11a38:	bl	10d74 <error@plt>
   11a3c:	mov	r0, #0
   11a40:	b	119fc <__assert_fail@plt+0xb38>
   11a44:	strd	r4, [sp, #-16]!
   11a48:	str	r6, [sp, #8]
   11a4c:	str	lr, [sp, #12]
   11a50:	mov	r4, r0
   11a54:	mov	r5, r1
   11a58:	movw	r3, #29024	; 0x7160
   11a5c:	movt	r3, #2
   11a60:	ldrd	r2, [r3, #8]
   11a64:	orrs	r3, r2, r3
   11a68:	moveq	r0, #1
   11a6c:	bne	11a8c <__assert_fail@plt+0xbc8>
   11a70:	movw	r3, #29024	; 0x7160
   11a74:	movt	r3, #2
   11a78:	strd	r4, [r3, #8]
   11a7c:	ldrd	r4, [sp]
   11a80:	ldr	r6, [sp, #8]
   11a84:	add	sp, sp, #12
   11a88:	pop	{pc}		; (ldr pc, [sp], #4)
   11a8c:	mov	r2, #5
   11a90:	movw	r1, #25080	; 0x61f8
   11a94:	movt	r1, #1
   11a98:	mov	r0, #0
   11a9c:	bl	10d08 <dcgettext@plt>
   11aa0:	mov	r2, r0
   11aa4:	mov	r1, #0
   11aa8:	mov	r0, r1
   11aac:	bl	10d74 <error@plt>
   11ab0:	mov	r0, #0
   11ab4:	b	11a70 <__assert_fail@plt+0xbac>
   11ab8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11abc:	strd	r6, [sp, #8]
   11ac0:	str	r8, [sp, #16]
   11ac4:	str	lr, [sp, #20]
   11ac8:	mov	r4, r0
   11acc:	mov	r5, r1
   11ad0:	movw	r3, #29024	; 0x7160
   11ad4:	movt	r3, #2
   11ad8:	ldr	r3, [r3, #16]
   11adc:	cmp	r3, #0
   11ae0:	beq	11b34 <__assert_fail@plt+0xc70>
   11ae4:	movw	r2, #29024	; 0x7160
   11ae8:	movt	r2, #2
   11aec:	ldr	ip, [r2, #20]
   11af0:	add	r2, ip, r3, lsl #3
   11af4:	ldrd	r0, [r2, #-8]
   11af8:	cmp	r1, r5
   11afc:	cmpeq	r0, r4
   11b00:	bls	11b3c <__assert_fail@plt+0xc78>
   11b04:	movw	r2, #29024	; 0x7160
   11b08:	movt	r2, #2
   11b0c:	ldr	r2, [r2, #24]
   11b10:	cmp	r3, r2
   11b14:	beq	11bc0 <__assert_fail@plt+0xcfc>
   11b18:	movw	r2, #29024	; 0x7160
   11b1c:	movt	r2, #2
   11b20:	add	r1, r3, #1
   11b24:	str	r1, [r2, #16]
   11b28:	lsl	r3, r3, #3
   11b2c:	strd	r4, [ip, r3]
   11b30:	b	11bac <__assert_fail@plt+0xce8>
   11b34:	mov	r0, #0
   11b38:	mov	r1, #0
   11b3c:	subs	r6, r4, r0
   11b40:	sbc	r7, r5, r1
   11b44:	movw	r2, #29024	; 0x7160
   11b48:	movt	r2, #2
   11b4c:	ldr	r2, [r2, #24]
   11b50:	cmp	r3, r2
   11b54:	beq	11bc8 <__assert_fail@plt+0xd04>
   11b58:	movw	r3, #29024	; 0x7160
   11b5c:	movt	r3, #2
   11b60:	ldr	r1, [r3, #20]
   11b64:	ldr	r2, [r3, #16]
   11b68:	add	r0, r2, #1
   11b6c:	str	r0, [r3, #16]
   11b70:	lsl	r2, r2, #3
   11b74:	strd	r4, [r1, r2]
   11b78:	ldr	r2, [r3, #28]
   11b7c:	mov	r3, #0
   11b80:	cmp	r3, r7
   11b84:	cmpeq	r2, r6
   11b88:	bcs	11bac <__assert_fail@plt+0xce8>
   11b8c:	mvn	r2, #0
   11b90:	mov	r3, #0
   11b94:	cmp	r7, r3
   11b98:	cmpeq	r6, r2
   11b9c:	movwls	r3, #29024	; 0x7160
   11ba0:	movtls	r3, #2
   11ba4:	strls	r6, [r3, #28]
   11ba8:	bhi	11be8 <__assert_fail@plt+0xd24>
   11bac:	ldrd	r4, [sp]
   11bb0:	ldrd	r6, [sp, #8]
   11bb4:	ldr	r8, [sp, #16]
   11bb8:	add	sp, sp, #20
   11bbc:	pop	{pc}		; (ldr pc, [sp], #4)
   11bc0:	mov	r6, #0
   11bc4:	mov	r7, #0
   11bc8:	movw	r8, #29024	; 0x7160
   11bcc:	movt	r8, #2
   11bd0:	mov	r2, #8
   11bd4:	add	r1, r8, #24
   11bd8:	ldr	r0, [r8, #20]
   11bdc:	bl	15414 <__assert_fail@plt+0x4550>
   11be0:	str	r0, [r8, #20]
   11be4:	b	11b58 <__assert_fail@plt+0xc94>
   11be8:	mov	r2, #5
   11bec:	movw	r1, #25128	; 0x6228
   11bf0:	movt	r1, #1
   11bf4:	mov	r0, #0
   11bf8:	bl	10d08 <dcgettext@plt>
   11bfc:	mov	r2, r0
   11c00:	mov	r1, #0
   11c04:	mov	r0, #1
   11c08:	bl	10d74 <error@plt>
   11c0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11c10:	strd	r6, [sp, #8]
   11c14:	strd	r8, [sp, #16]
   11c18:	strd	sl, [sp, #24]
   11c1c:	str	lr, [sp, #32]
   11c20:	sub	sp, sp, #28
   11c24:	ldrb	r4, [r0]
   11c28:	cmp	r4, #0
   11c2c:	beq	11f44 <__assert_fail@plt+0x1080>
   11c30:	mov	r5, r0
   11c34:	mov	sl, #0
   11c38:	mov	fp, #0
   11c3c:	mov	r3, #1
   11c40:	str	r3, [sp, #4]
   11c44:	mov	r9, #0
   11c48:	mov	r8, r9
   11c4c:	mov	r7, r9
   11c50:	mov	r6, r9
   11c54:	movw	r3, #25240	; 0x6298
   11c58:	movt	r3, #1
   11c5c:	str	r3, [sp, #16]
   11c60:	movw	r3, #25252	; 0x62a4
   11c64:	movt	r3, #1
   11c68:	str	r3, [sp, #20]
   11c6c:	b	11ea0 <__assert_fail@plt+0xfdc>
   11c70:	mov	r0, sl
   11c74:	mov	r1, fp
   11c78:	bl	119d0 <__assert_fail@plt+0xb0c>
   11c7c:	subs	r7, r0, #0
   11c80:	beq	11e84 <__assert_fail@plt+0xfc0>
   11c84:	mov	r4, r5
   11c88:	mov	r6, #0
   11c8c:	b	11e90 <__assert_fail@plt+0xfcc>
   11c90:	mov	r0, sl
   11c94:	mov	r1, fp
   11c98:	bl	11ab8 <__assert_fail@plt+0xbf4>
   11c9c:	mov	r7, r8
   11ca0:	mov	r6, r8
   11ca4:	mov	r4, r5
   11ca8:	b	11e90 <__assert_fail@plt+0xfcc>
   11cac:	cmp	r4, #47	; 0x2f
   11cb0:	beq	11d90 <__assert_fail@plt+0xecc>
   11cb4:	cmp	r4, #43	; 0x2b
   11cb8:	beq	11df0 <__assert_fail@plt+0xf2c>
   11cbc:	sub	r1, r4, #48	; 0x30
   11cc0:	cmp	r1, #9
   11cc4:	bhi	11e50 <__assert_fail@plt+0xf8c>
   11cc8:	cmp	r6, #0
   11ccc:	beq	11f84 <__assert_fail@plt+0x10c0>
   11cd0:	add	r3, pc, #712	; 0x2c8
   11cd4:	ldrd	r2, [r3]
   11cd8:	cmp	fp, r3
   11cdc:	cmpeq	sl, r2
   11ce0:	bhi	11d24 <__assert_fail@plt+0xe60>
   11ce4:	lsl	r1, fp, #2
   11ce8:	lsl	r3, sl, #2
   11cec:	orr	r2, r1, sl, lsr #30
   11cf0:	adds	r3, r3, sl
   11cf4:	adc	r2, r2, fp
   11cf8:	adds	r3, r3, r3
   11cfc:	str	r3, [sp, #8]
   11d00:	adc	r3, r2, r2
   11d04:	str	r3, [sp, #12]
   11d08:	sub	r4, r4, #48	; 0x30
   11d0c:	ldrd	r2, [sp, #8]
   11d10:	adds	r2, r2, r4
   11d14:	adc	r3, r3, r4, asr #31
   11d18:	cmp	r3, fp
   11d1c:	cmpeq	r2, sl
   11d20:	bcs	11ef8 <__assert_fail@plt+0x1034>
   11d24:	ldr	r1, [sp, #16]
   11d28:	mov	r0, r9
   11d2c:	bl	10eb8 <strspn@plt>
   11d30:	mov	r4, r0
   11d34:	mov	r1, r0
   11d38:	mov	r0, r9
   11d3c:	bl	15678 <__assert_fail@plt+0x47b4>
   11d40:	mov	r5, r0
   11d44:	mov	r2, #5
   11d48:	ldr	r1, [sp, #20]
   11d4c:	mov	r0, #0
   11d50:	bl	10d08 <dcgettext@plt>
   11d54:	str	r0, [sp, #4]
   11d58:	mov	r0, r5
   11d5c:	bl	14c78 <__assert_fail@plt+0x3db4>
   11d60:	mov	r3, r0
   11d64:	ldr	r2, [sp, #4]
   11d68:	mov	r1, #0
   11d6c:	mov	r0, r1
   11d70:	bl	10d74 <error@plt>
   11d74:	mov	r0, r5
   11d78:	bl	1285c <__assert_fail@plt+0x1998>
   11d7c:	sub	r4, r4, #1
   11d80:	add	r4, r9, r4
   11d84:	mov	r3, #0
   11d88:	str	r3, [sp, #4]
   11d8c:	b	11e90 <__assert_fail@plt+0xfcc>
   11d90:	cmp	r6, #0
   11d94:	moveq	r8, r6
   11d98:	moveq	r4, r5
   11d9c:	moveq	r7, #1
   11da0:	beq	11e90 <__assert_fail@plt+0xfcc>
   11da4:	mov	r2, #5
   11da8:	movw	r1, #25152	; 0x6240
   11dac:	movt	r1, #1
   11db0:	mov	r0, #0
   11db4:	bl	10d08 <dcgettext@plt>
   11db8:	mov	r4, r0
   11dbc:	mov	r0, r5
   11dc0:	bl	14c78 <__assert_fail@plt+0x3db4>
   11dc4:	mov	r3, r0
   11dc8:	mov	r2, r4
   11dcc:	mov	r1, #0
   11dd0:	mov	r0, r1
   11dd4:	bl	10d74 <error@plt>
   11dd8:	mov	r7, r6
   11ddc:	mov	r4, r5
   11de0:	mov	r3, #0
   11de4:	str	r3, [sp, #4]
   11de8:	mov	r8, r3
   11dec:	b	11e90 <__assert_fail@plt+0xfcc>
   11df0:	cmp	r6, #0
   11df4:	moveq	r7, r6
   11df8:	moveq	r4, r5
   11dfc:	moveq	r8, #1
   11e00:	beq	11e90 <__assert_fail@plt+0xfcc>
   11e04:	mov	r2, #5
   11e08:	movw	r1, #25196	; 0x626c
   11e0c:	movt	r1, #1
   11e10:	mov	r0, #0
   11e14:	bl	10d08 <dcgettext@plt>
   11e18:	mov	r4, r0
   11e1c:	mov	r0, r5
   11e20:	bl	14c78 <__assert_fail@plt+0x3db4>
   11e24:	mov	r3, r0
   11e28:	mov	r2, r4
   11e2c:	mov	r1, #0
   11e30:	mov	r0, r1
   11e34:	bl	10d74 <error@plt>
   11e38:	mov	r8, r6
   11e3c:	mov	r4, r5
   11e40:	mov	r3, #0
   11e44:	str	r3, [sp, #4]
   11e48:	mov	r7, r3
   11e4c:	b	11e90 <__assert_fail@plt+0xfcc>
   11e50:	mov	r2, #5
   11e54:	movw	r1, #25280	; 0x62c0
   11e58:	movt	r1, #1
   11e5c:	mov	r0, #0
   11e60:	bl	10d08 <dcgettext@plt>
   11e64:	mov	r4, r0
   11e68:	mov	r0, r5
   11e6c:	bl	14c78 <__assert_fail@plt+0x3db4>
   11e70:	mov	r3, r0
   11e74:	mov	r2, r4
   11e78:	mov	r1, #0
   11e7c:	mov	r0, r1
   11e80:	bl	10d74 <error@plt>
   11e84:	mov	r0, #1
   11e88:	bl	10dc8 <exit@plt>
   11e8c:	mov	r4, r5
   11e90:	add	r5, r4, #1
   11e94:	ldrb	r4, [r4, #1]
   11e98:	cmp	r4, #0
   11e9c:	beq	11f08 <__assert_fail@plt+0x1044>
   11ea0:	cmp	r4, #44	; 0x2c
   11ea4:	beq	11ec0 <__assert_fail@plt+0xffc>
   11ea8:	bl	10dbc <__ctype_b_loc@plt>
   11eac:	ldr	r2, [r0]
   11eb0:	lsl	r3, r4, #1
   11eb4:	ldrh	r3, [r2, r3]
   11eb8:	tst	r3, #1
   11ebc:	beq	11cac <__assert_fail@plt+0xde8>
   11ec0:	cmp	r6, #0
   11ec4:	beq	11e8c <__assert_fail@plt+0xfc8>
   11ec8:	cmp	r7, #0
   11ecc:	bne	11c70 <__assert_fail@plt+0xdac>
   11ed0:	cmp	r8, #0
   11ed4:	beq	11c90 <__assert_fail@plt+0xdcc>
   11ed8:	mov	r0, sl
   11edc:	mov	r1, fp
   11ee0:	bl	11a44 <__assert_fail@plt+0xb80>
   11ee4:	subs	r8, r0, #0
   11ee8:	beq	11e84 <__assert_fail@plt+0xfc0>
   11eec:	mov	r6, r7
   11ef0:	mov	r4, r5
   11ef4:	b	11e90 <__assert_fail@plt+0xfcc>
   11ef8:	mov	sl, r2
   11efc:	mov	fp, r3
   11f00:	mov	r4, r5
   11f04:	b	11e90 <__assert_fail@plt+0xfcc>
   11f08:	ldr	r3, [sp, #4]
   11f0c:	and	r6, r6, r3
   11f10:	tst	r6, #255	; 0xff
   11f14:	beq	11f38 <__assert_fail@plt+0x1074>
   11f18:	cmp	r7, #0
   11f1c:	bne	11f60 <__assert_fail@plt+0x109c>
   11f20:	cmp	r8, #0
   11f24:	beq	11f74 <__assert_fail@plt+0x10b0>
   11f28:	mov	r0, sl
   11f2c:	mov	r1, fp
   11f30:	bl	11a44 <__assert_fail@plt+0xb80>
   11f34:	str	r0, [sp, #4]
   11f38:	ldr	r3, [sp, #4]
   11f3c:	cmp	r3, #0
   11f40:	beq	11e84 <__assert_fail@plt+0xfc0>
   11f44:	add	sp, sp, #28
   11f48:	ldrd	r4, [sp]
   11f4c:	ldrd	r6, [sp, #8]
   11f50:	ldrd	r8, [sp, #16]
   11f54:	ldrd	sl, [sp, #24]
   11f58:	add	sp, sp, #32
   11f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   11f60:	mov	r0, sl
   11f64:	mov	r1, fp
   11f68:	bl	119d0 <__assert_fail@plt+0xb0c>
   11f6c:	str	r0, [sp, #4]
   11f70:	b	11f38 <__assert_fail@plt+0x1074>
   11f74:	mov	r0, sl
   11f78:	mov	r1, fp
   11f7c:	bl	11ab8 <__assert_fail@plt+0xbf4>
   11f80:	b	11f44 <__assert_fail@plt+0x1080>
   11f84:	sub	r4, r4, #48	; 0x30
   11f88:	mov	sl, r4
   11f8c:	asr	fp, r4, #31
   11f90:	mov	r9, r5
   11f94:	mov	r4, r5
   11f98:	mov	r6, #1
   11f9c:	b	11e90 <__assert_fail@plt+0xfcc>
   11fa0:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11fa4:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11fa8:	strd	r4, [sp, #-16]!
   11fac:	str	r6, [sp, #8]
   11fb0:	str	lr, [sp, #12]
   11fb4:	movw	r3, #29024	; 0x7160
   11fb8:	movt	r3, #2
   11fbc:	ldr	ip, [r3, #20]
   11fc0:	ldr	r0, [r3, #16]
   11fc4:	cmp	r0, #0
   11fc8:	beq	1208c <__assert_fail@plt+0x11c8>
   11fcc:	ldrd	r4, [ip]
   11fd0:	orrs	r3, r4, r5
   11fd4:	movne	lr, ip
   11fd8:	movne	r1, #0
   11fdc:	beq	12010 <__assert_fail@plt+0x114c>
   11fe0:	add	r1, r1, #1
   11fe4:	cmp	r0, r1
   11fe8:	beq	120dc <__assert_fail@plt+0x1218>
   11fec:	ldrd	r2, [lr, #8]!
   11ff0:	orrs	r6, r2, r3
   11ff4:	beq	12010 <__assert_fail@plt+0x114c>
   11ff8:	cmp	r3, r5
   11ffc:	cmpeq	r2, r4
   12000:	bls	12034 <__assert_fail@plt+0x1170>
   12004:	mov	r4, r2
   12008:	mov	r5, r3
   1200c:	b	11fe0 <__assert_fail@plt+0x111c>
   12010:	mov	r2, #5
   12014:	movw	r1, #25324	; 0x62ec
   12018:	movt	r1, #1
   1201c:	mov	r0, #0
   12020:	bl	10d08 <dcgettext@plt>
   12024:	mov	r2, r0
   12028:	mov	r1, #0
   1202c:	mov	r0, #1
   12030:	bl	10d74 <error@plt>
   12034:	mov	r2, #5
   12038:	movw	r1, #25348	; 0x6304
   1203c:	movt	r1, #1
   12040:	mov	r0, #0
   12044:	bl	10d08 <dcgettext@plt>
   12048:	mov	r2, r0
   1204c:	mov	r1, #0
   12050:	mov	r0, #1
   12054:	bl	10d74 <error@plt>
   12058:	movw	r1, #29024	; 0x7160
   1205c:	movt	r1, #2
   12060:	ldr	r4, [r1]
   12064:	ldr	lr, [r1, #4]
   12068:	orr	r0, r2, r4
   1206c:	orr	r1, r3, lr
   12070:	orrs	r3, r0, r1
   12074:	bne	1210c <__assert_fail@plt+0x1248>
   12078:	movw	r3, #29024	; 0x7160
   1207c:	movt	r3, #2
   12080:	ldrd	r0, [ip]
   12084:	strd	r0, [r3, #32]
   12088:	b	120cc <__assert_fail@plt+0x1208>
   1208c:	movw	r3, #29024	; 0x7160
   12090:	movt	r3, #2
   12094:	ldrd	r2, [r3, #8]
   12098:	orrs	r1, r2, r3
   1209c:	bne	12124 <__assert_fail@plt+0x1260>
   120a0:	movw	r3, #29024	; 0x7160
   120a4:	movt	r3, #2
   120a8:	ldrd	r2, [r3]
   120ac:	orrs	r1, r2, r3
   120b0:	moveq	r2, #8
   120b4:	movw	r3, #29024	; 0x7160
   120b8:	movt	r3, #2
   120bc:	str	r2, [r3, #28]
   120c0:	str	r2, [r3, #32]
   120c4:	mov	r2, #0
   120c8:	str	r2, [r3, #36]	; 0x24
   120cc:	ldrd	r4, [sp]
   120d0:	ldr	r6, [sp, #8]
   120d4:	add	sp, sp, #12
   120d8:	pop	{pc}		; (ldr pc, [sp], #4)
   120dc:	movw	r3, #29024	; 0x7160
   120e0:	movt	r3, #2
   120e4:	ldrd	r2, [r3, #8]
   120e8:	orrs	r1, r2, r3
   120ec:	beq	12104 <__assert_fail@plt+0x1240>
   120f0:	movw	r1, #29024	; 0x7160
   120f4:	movt	r1, #2
   120f8:	ldrd	r4, [r1]
   120fc:	orrs	r1, r4, r5
   12100:	bne	12138 <__assert_fail@plt+0x1274>
   12104:	cmp	r0, #1
   12108:	beq	12058 <__assert_fail@plt+0x1194>
   1210c:	movw	r3, #29024	; 0x7160
   12110:	movt	r3, #2
   12114:	mov	r0, #0
   12118:	mov	r1, #0
   1211c:	strd	r0, [r3, #32]
   12120:	b	120cc <__assert_fail@plt+0x1208>
   12124:	movw	r1, #29024	; 0x7160
   12128:	movt	r1, #2
   1212c:	ldrd	r0, [r1]
   12130:	orrs	r1, r0, r1
   12134:	beq	120b4 <__assert_fail@plt+0x11f0>
   12138:	mov	r2, #5
   1213c:	movw	r1, #25376	; 0x6320
   12140:	movt	r1, #1
   12144:	mov	r0, #0
   12148:	bl	10d08 <dcgettext@plt>
   1214c:	mov	r2, r0
   12150:	mov	r1, #0
   12154:	mov	r0, #1
   12158:	bl	10d74 <error@plt>
   1215c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12160:	strd	r6, [sp, #8]
   12164:	strd	r8, [sp, #16]
   12168:	str	sl, [sp, #24]
   1216c:	str	lr, [sp, #28]
   12170:	mov	r6, r0
   12174:	mov	r7, r1
   12178:	mov	r1, #0
   1217c:	strb	r1, [r3]
   12180:	movw	r1, #29024	; 0x7160
   12184:	movt	r1, #2
   12188:	ldrd	r0, [r1, #32]
   1218c:	orrs	ip, r0, r1
   12190:	bne	121f8 <__assert_fail@plt+0x1334>
   12194:	ldr	r1, [r2]
   12198:	movw	r0, #29024	; 0x7160
   1219c:	movt	r0, #2
   121a0:	ldr	ip, [r0, #16]
   121a4:	cmp	r1, ip
   121a8:	bcs	1223c <__assert_fail@plt+0x1378>
   121ac:	movw	r0, #29024	; 0x7160
   121b0:	movt	r0, #2
   121b4:	lsl	lr, r1, #3
   121b8:	ldr	r4, [r0, #20]
   121bc:	add	r0, r4, lr
   121c0:	ldrd	r4, [r4, lr]
   121c4:	cmp	r7, r5
   121c8:	cmpeq	r6, r4
   121cc:	bcc	1221c <__assert_fail@plt+0x1358>
   121d0:	add	r1, r1, #1
   121d4:	str	r1, [r2]
   121d8:	cmp	r1, ip
   121dc:	beq	1223c <__assert_fail@plt+0x1378>
   121e0:	ldrd	r4, [r0, #8]!
   121e4:	add	r1, r1, #1
   121e8:	cmp	r7, r5
   121ec:	cmpeq	r6, r4
   121f0:	bcs	121d4 <__assert_fail@plt+0x1310>
   121f4:	b	1221c <__assert_fail@plt+0x1358>
   121f8:	adds	r8, r0, r6
   121fc:	adc	r9, r1, r7
   12200:	mov	r2, r0
   12204:	mov	r3, r1
   12208:	mov	r0, r6
   1220c:	mov	r1, r7
   12210:	bl	15ac8 <__assert_fail@plt+0x4c04>
   12214:	subs	r4, r8, r2
   12218:	sbc	r5, r9, r3
   1221c:	mov	r0, r4
   12220:	mov	r1, r5
   12224:	ldrd	r4, [sp]
   12228:	ldrd	r6, [sp, #8]
   1222c:	ldrd	r8, [sp, #16]
   12230:	ldr	sl, [sp, #24]
   12234:	add	sp, sp, #28
   12238:	pop	{pc}		; (ldr pc, [sp], #4)
   1223c:	movw	r2, #29024	; 0x7160
   12240:	movt	r2, #2
   12244:	ldrd	r0, [r2]
   12248:	orrs	r2, r0, r1
   1224c:	bne	122ac <__assert_fail@plt+0x13e8>
   12250:	movw	r2, #29024	; 0x7160
   12254:	movt	r2, #2
   12258:	ldrd	r4, [r2, #8]
   1225c:	orrs	r2, r4, r5
   12260:	moveq	r2, #1
   12264:	strbeq	r2, [r3]
   12268:	beq	1221c <__assert_fail@plt+0x1358>
   1226c:	adds	r8, r4, r6
   12270:	adc	r9, r5, r7
   12274:	movw	r3, #29024	; 0x7160
   12278:	movt	r3, #2
   1227c:	ldr	r3, [r3, #20]
   12280:	add	ip, r3, ip, lsl #3
   12284:	ldr	r0, [ip, #-8]
   12288:	ldr	r1, [ip, #-4]
   1228c:	mov	r2, r4
   12290:	mov	r3, r5
   12294:	subs	r0, r6, r0
   12298:	sbc	r1, r7, r1
   1229c:	bl	15ac8 <__assert_fail@plt+0x4c04>
   122a0:	subs	r4, r8, r2
   122a4:	sbc	r5, r9, r3
   122a8:	b	1221c <__assert_fail@plt+0x1358>
   122ac:	adds	r8, r0, r6
   122b0:	adc	r9, r1, r7
   122b4:	mov	r2, r0
   122b8:	mov	r3, r1
   122bc:	mov	r0, r6
   122c0:	mov	r1, r7
   122c4:	bl	15ac8 <__assert_fail@plt+0x4c04>
   122c8:	subs	r4, r8, r2
   122cc:	sbc	r5, r9, r3
   122d0:	b	1221c <__assert_fail@plt+0x1358>
   122d4:	movw	r3, #29024	; 0x7160
   122d8:	movt	r3, #2
   122dc:	mov	r2, #0
   122e0:	strb	r2, [r3, #40]	; 0x28
   122e4:	movw	r3, #28900	; 0x70e4
   122e8:	movt	r3, #2
   122ec:	cmp	r0, r2
   122f0:	moveq	r0, r3
   122f4:	movw	r3, #29024	; 0x7160
   122f8:	movt	r3, #2
   122fc:	str	r0, [r3, #44]	; 0x2c
   12300:	bx	lr
   12304:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12308:	strd	r6, [sp, #8]
   1230c:	str	r8, [sp, #16]
   12310:	str	lr, [sp, #20]
   12314:	subs	r5, r0, #0
   12318:	beq	12374 <__assert_fail@plt+0x14b0>
   1231c:	movw	r3, #29024	; 0x7160
   12320:	movt	r3, #2
   12324:	ldr	r6, [r3, #48]	; 0x30
   12328:	cmp	r6, #0
   1232c:	beq	123ac <__assert_fail@plt+0x14e8>
   12330:	bl	10de0 <__errno_location@plt>
   12334:	mov	r7, r0
   12338:	ldr	r4, [r0]
   1233c:	ldr	r3, [r5]
   12340:	and	r3, r3, #32
   12344:	cmp	r3, #0
   12348:	moveq	r4, r3
   1234c:	movw	r1, #25456	; 0x6370
   12350:	movt	r1, #1
   12354:	mov	r0, r6
   12358:	bl	10c90 <strcmp@plt>
   1235c:	cmp	r0, #0
   12360:	bne	123cc <__assert_fail@plt+0x1508>
   12364:	mov	r0, r5
   12368:	bl	10e7c <clearerr_unlocked@plt>
   1236c:	cmp	r4, #0
   12370:	bne	123e0 <__assert_fail@plt+0x151c>
   12374:	movw	r3, #29024	; 0x7160
   12378:	movt	r3, #2
   1237c:	ldr	r2, [r3, #44]	; 0x2c
   12380:	add	r1, r2, #4
   12384:	str	r1, [r3, #44]	; 0x2c
   12388:	ldr	r4, [r2]
   1238c:	cmp	r4, #0
   12390:	beq	124cc <__assert_fail@plt+0x1608>
   12394:	movw	r7, #25456	; 0x6370
   12398:	movt	r7, #1
   1239c:	movw	r8, #25460	; 0x6374
   123a0:	movt	r8, #1
   123a4:	mov	r5, r3
   123a8:	b	12484 <__assert_fail@plt+0x15c0>
   123ac:	movw	r3, #25020	; 0x61bc
   123b0:	movt	r3, #1
   123b4:	mov	r2, #340	; 0x154
   123b8:	movw	r1, #25424	; 0x6350
   123bc:	movt	r1, #1
   123c0:	movw	r0, #25444	; 0x6364
   123c4:	movt	r0, #1
   123c8:	bl	10ec4 <__assert_fail@plt>
   123cc:	mov	r0, r5
   123d0:	bl	12730 <__assert_fail@plt+0x186c>
   123d4:	cmp	r0, #0
   123d8:	ldrne	r4, [r7]
   123dc:	b	1236c <__assert_fail@plt+0x14a8>
   123e0:	movw	r5, #29024	; 0x7160
   123e4:	movt	r5, #2
   123e8:	ldr	r2, [r5, #48]	; 0x30
   123ec:	mov	r1, #3
   123f0:	mov	r0, #0
   123f4:	bl	14aac <__assert_fail@plt+0x3be8>
   123f8:	mov	r3, r0
   123fc:	movw	r2, #25320	; 0x62e8
   12400:	movt	r2, #1
   12404:	mov	r1, r4
   12408:	mov	r0, #0
   1240c:	bl	10d74 <error@plt>
   12410:	mov	r3, #1
   12414:	str	r3, [r5, #52]	; 0x34
   12418:	b	12374 <__assert_fail@plt+0x14b0>
   1241c:	mov	r1, r8
   12420:	mov	r0, r4
   12424:	bl	10e88 <fopen64@plt>
   12428:	mov	r6, r0
   1242c:	cmp	r6, #0
   12430:	bne	124b0 <__assert_fail@plt+0x15ec>
   12434:	bl	10de0 <__errno_location@plt>
   12438:	ldr	r6, [r0]
   1243c:	mov	r2, r4
   12440:	mov	r1, #3
   12444:	mov	r0, #0
   12448:	bl	14aac <__assert_fail@plt+0x3be8>
   1244c:	mov	r3, r0
   12450:	movw	r2, #25320	; 0x62e8
   12454:	movt	r2, #1
   12458:	mov	r1, r6
   1245c:	mov	r0, #0
   12460:	bl	10d74 <error@plt>
   12464:	mov	r3, #1
   12468:	str	r3, [r5, #52]	; 0x34
   1246c:	ldr	r3, [r5, #44]	; 0x2c
   12470:	add	r2, r3, #4
   12474:	str	r2, [r5, #44]	; 0x2c
   12478:	ldr	r4, [r3]
   1247c:	cmp	r4, #0
   12480:	beq	124cc <__assert_fail@plt+0x1608>
   12484:	mov	r1, r7
   12488:	mov	r0, r4
   1248c:	bl	10c90 <strcmp@plt>
   12490:	cmp	r0, #0
   12494:	bne	1241c <__assert_fail@plt+0x1558>
   12498:	mov	r3, #1
   1249c:	strb	r3, [r5, #40]	; 0x28
   124a0:	movw	r3, #29008	; 0x7150
   124a4:	movt	r3, #2
   124a8:	ldr	r6, [r3]
   124ac:	b	1242c <__assert_fail@plt+0x1568>
   124b0:	movw	r3, #29024	; 0x7160
   124b4:	movt	r3, #2
   124b8:	str	r4, [r3, #48]	; 0x30
   124bc:	mov	r1, #2
   124c0:	mov	r0, r6
   124c4:	bl	126f0 <__assert_fail@plt+0x182c>
   124c8:	mov	r4, r6
   124cc:	mov	r0, r4
   124d0:	ldrd	r4, [sp]
   124d4:	ldrd	r6, [sp, #8]
   124d8:	ldr	r8, [sp, #16]
   124dc:	add	sp, sp, #20
   124e0:	pop	{pc}		; (ldr pc, [sp], #4)
   124e4:	movw	r3, #29024	; 0x7160
   124e8:	movt	r3, #2
   124ec:	ldrb	r3, [r3, #40]	; 0x28
   124f0:	cmp	r3, #0
   124f4:	bxeq	lr
   124f8:	str	r4, [sp, #-8]!
   124fc:	str	lr, [sp, #4]
   12500:	movw	r3, #29008	; 0x7150
   12504:	movt	r3, #2
   12508:	ldr	r0, [r3]
   1250c:	bl	12730 <__assert_fail@plt+0x186c>
   12510:	cmp	r0, #0
   12514:	bne	12524 <__assert_fail@plt+0x1660>
   12518:	ldr	r4, [sp]
   1251c:	add	sp, sp, #4
   12520:	pop	{pc}		; (ldr pc, [sp], #4)
   12524:	bl	10de0 <__errno_location@plt>
   12528:	movw	r2, #25456	; 0x6370
   1252c:	movt	r2, #1
   12530:	ldr	r1, [r0]
   12534:	mov	r0, #1
   12538:	bl	10d74 <error@plt>
   1253c:	str	r4, [sp, #-8]!
   12540:	str	lr, [sp, #4]
   12544:	mov	r2, #5
   12548:	movw	r1, #25464	; 0x6378
   1254c:	movt	r1, #1
   12550:	mov	r0, #0
   12554:	bl	10d08 <dcgettext@plt>
   12558:	movw	r4, #29012	; 0x7154
   1255c:	movt	r4, #2
   12560:	ldr	r1, [r4]
   12564:	bl	10c78 <fputs_unlocked@plt>
   12568:	mov	r2, #5
   1256c:	movw	r1, #25528	; 0x63b8
   12570:	movt	r1, #1
   12574:	mov	r0, #0
   12578:	bl	10d08 <dcgettext@plt>
   1257c:	ldr	r1, [r4]
   12580:	bl	10c78 <fputs_unlocked@plt>
   12584:	ldr	r4, [sp]
   12588:	add	sp, sp, #4
   1258c:	pop	{pc}		; (ldr pc, [sp], #4)
   12590:	movw	r3, #29084	; 0x719c
   12594:	movt	r3, #2
   12598:	str	r0, [r3]
   1259c:	bx	lr
   125a0:	movw	r3, #29084	; 0x719c
   125a4:	movt	r3, #2
   125a8:	strb	r0, [r3, #4]
   125ac:	bx	lr
   125b0:	strd	r4, [sp, #-16]!
   125b4:	str	r6, [sp, #8]
   125b8:	str	lr, [sp, #12]
   125bc:	sub	sp, sp, #8
   125c0:	movw	r3, #29012	; 0x7154
   125c4:	movt	r3, #2
   125c8:	ldr	r0, [r3]
   125cc:	bl	15830 <__assert_fail@plt+0x496c>
   125d0:	cmp	r0, #0
   125d4:	beq	125fc <__assert_fail@plt+0x1738>
   125d8:	movw	r3, #29084	; 0x719c
   125dc:	movt	r3, #2
   125e0:	ldrb	r3, [r3, #4]
   125e4:	cmp	r3, #0
   125e8:	beq	12628 <__assert_fail@plt+0x1764>
   125ec:	bl	10de0 <__errno_location@plt>
   125f0:	ldr	r3, [r0]
   125f4:	cmp	r3, #32
   125f8:	bne	12628 <__assert_fail@plt+0x1764>
   125fc:	movw	r3, #29000	; 0x7148
   12600:	movt	r3, #2
   12604:	ldr	r0, [r3]
   12608:	bl	15830 <__assert_fail@plt+0x496c>
   1260c:	cmp	r0, #0
   12610:	bne	126b0 <__assert_fail@plt+0x17ec>
   12614:	add	sp, sp, #8
   12618:	ldrd	r4, [sp]
   1261c:	ldr	r6, [sp, #8]
   12620:	add	sp, sp, #12
   12624:	pop	{pc}		; (ldr pc, [sp], #4)
   12628:	mov	r2, #5
   1262c:	movw	r1, #24860	; 0x611c
   12630:	movt	r1, #1
   12634:	mov	r0, #0
   12638:	bl	10d08 <dcgettext@plt>
   1263c:	mov	r4, r0
   12640:	movw	r3, #29084	; 0x719c
   12644:	movt	r3, #2
   12648:	ldr	r5, [r3]
   1264c:	cmp	r5, #0
   12650:	beq	12690 <__assert_fail@plt+0x17cc>
   12654:	bl	10de0 <__errno_location@plt>
   12658:	ldr	r6, [r0]
   1265c:	mov	r0, r5
   12660:	bl	14a74 <__assert_fail@plt+0x3bb0>
   12664:	str	r4, [sp]
   12668:	mov	r3, r0
   1266c:	movw	r2, #25912	; 0x6538
   12670:	movt	r2, #1
   12674:	mov	r1, r6
   12678:	mov	r0, #0
   1267c:	bl	10d74 <error@plt>
   12680:	movw	r3, #28912	; 0x70f0
   12684:	movt	r3, #2
   12688:	ldr	r0, [r3]
   1268c:	bl	10cc0 <_exit@plt>
   12690:	bl	10de0 <__errno_location@plt>
   12694:	mov	r3, r4
   12698:	movw	r2, #25320	; 0x62e8
   1269c:	movt	r2, #1
   126a0:	ldr	r1, [r0]
   126a4:	mov	r0, #0
   126a8:	bl	10d74 <error@plt>
   126ac:	b	12680 <__assert_fail@plt+0x17bc>
   126b0:	movw	r3, #28912	; 0x70f0
   126b4:	movt	r3, #2
   126b8:	ldr	r0, [r3]
   126bc:	bl	10cc0 <_exit@plt>
   126c0:	strd	r4, [sp, #-12]!
   126c4:	str	lr, [sp, #8]
   126c8:	sub	sp, sp, #20
   126cc:	ldr	r1, [sp, #40]	; 0x28
   126d0:	str	r1, [sp, #8]
   126d4:	ldrd	r4, [sp, #32]
   126d8:	strd	r4, [sp]
   126dc:	bl	10c9c <posix_fadvise64@plt>
   126e0:	add	sp, sp, #20
   126e4:	ldrd	r4, [sp]
   126e8:	add	sp, sp, #8
   126ec:	pop	{pc}		; (ldr pc, [sp], #4)
   126f0:	cmp	r0, #0
   126f4:	bxeq	lr
   126f8:	str	r4, [sp, #-8]!
   126fc:	str	lr, [sp, #4]
   12700:	sub	sp, sp, #16
   12704:	mov	r4, r1
   12708:	bl	10e10 <fileno@plt>
   1270c:	str	r4, [sp, #8]
   12710:	mov	r2, #0
   12714:	mov	r3, #0
   12718:	strd	r2, [sp]
   1271c:	bl	10c9c <posix_fadvise64@plt>
   12720:	add	sp, sp, #16
   12724:	ldr	r4, [sp]
   12728:	add	sp, sp, #4
   1272c:	pop	{pc}		; (ldr pc, [sp], #4)
   12730:	strd	r4, [sp, #-16]!
   12734:	str	r6, [sp, #8]
   12738:	str	lr, [sp, #12]
   1273c:	sub	sp, sp, #8
   12740:	mov	r4, r0
   12744:	bl	10e10 <fileno@plt>
   12748:	cmp	r0, #0
   1274c:	blt	127c4 <__assert_fail@plt+0x1900>
   12750:	mov	r0, r4
   12754:	bl	10d98 <__freading@plt>
   12758:	cmp	r0, #0
   1275c:	beq	12790 <__assert_fail@plt+0x18cc>
   12760:	mov	r0, r4
   12764:	bl	10e10 <fileno@plt>
   12768:	mov	r3, #1
   1276c:	str	r3, [sp]
   12770:	mov	r2, #0
   12774:	mov	r3, #0
   12778:	bl	10d44 <lseek64@plt>
   1277c:	mvn	r2, #0
   12780:	mvn	r3, #0
   12784:	cmp	r1, r3
   12788:	cmpeq	r0, r2
   1278c:	beq	127d0 <__assert_fail@plt+0x190c>
   12790:	mov	r0, r4
   12794:	bl	127ec <__assert_fail@plt+0x1928>
   12798:	cmp	r0, #0
   1279c:	beq	127d0 <__assert_fail@plt+0x190c>
   127a0:	bl	10de0 <__errno_location@plt>
   127a4:	mov	r5, r0
   127a8:	ldr	r6, [r0]
   127ac:	mov	r0, r4
   127b0:	bl	10e28 <fclose@plt>
   127b4:	cmp	r6, #0
   127b8:	strne	r6, [r5]
   127bc:	mvnne	r0, #0
   127c0:	b	127d8 <__assert_fail@plt+0x1914>
   127c4:	mov	r0, r4
   127c8:	bl	10e28 <fclose@plt>
   127cc:	b	127d8 <__assert_fail@plt+0x1914>
   127d0:	mov	r0, r4
   127d4:	bl	10e28 <fclose@plt>
   127d8:	add	sp, sp, #8
   127dc:	ldrd	r4, [sp]
   127e0:	ldr	r6, [sp, #8]
   127e4:	add	sp, sp, #12
   127e8:	pop	{pc}		; (ldr pc, [sp], #4)
   127ec:	str	r4, [sp, #-8]!
   127f0:	str	lr, [sp, #4]
   127f4:	sub	sp, sp, #8
   127f8:	subs	r4, r0, #0
   127fc:	beq	12810 <__assert_fail@plt+0x194c>
   12800:	mov	r0, r4
   12804:	bl	10d98 <__freading@plt>
   12808:	cmp	r0, #0
   1280c:	bne	12828 <__assert_fail@plt+0x1964>
   12810:	mov	r0, r4
   12814:	bl	10ca8 <fflush@plt>
   12818:	add	sp, sp, #8
   1281c:	ldr	r4, [sp]
   12820:	add	sp, sp, #4
   12824:	pop	{pc}		; (ldr pc, [sp], #4)
   12828:	ldr	r3, [r4]
   1282c:	tst	r3, #256	; 0x100
   12830:	bne	12840 <__assert_fail@plt+0x197c>
   12834:	mov	r0, r4
   12838:	bl	10ca8 <fflush@plt>
   1283c:	b	12818 <__assert_fail@plt+0x1954>
   12840:	mov	r3, #1
   12844:	str	r3, [sp]
   12848:	mov	r2, #0
   1284c:	mov	r3, #0
   12850:	mov	r0, r4
   12854:	bl	128bc <__assert_fail@plt+0x19f8>
   12858:	b	12834 <__assert_fail@plt+0x1970>
   1285c:	strd	r4, [sp, #-12]!
   12860:	str	lr, [sp, #8]
   12864:	sub	sp, sp, #12
   12868:	mov	r5, r0
   1286c:	bl	10de0 <__errno_location@plt>
   12870:	mov	r4, r0
   12874:	ldr	r3, [r0]
   12878:	str	r3, [sp]
   1287c:	str	r3, [sp, #4]
   12880:	mov	r3, #0
   12884:	str	r3, [r0]
   12888:	mov	r0, r5
   1288c:	bl	10cb4 <free@plt>
   12890:	ldr	r3, [r4]
   12894:	clz	r3, r3
   12898:	lsr	r3, r3, #5
   1289c:	add	r2, sp, #8
   128a0:	add	r3, r2, r3, lsl #2
   128a4:	ldr	r3, [r3, #-8]
   128a8:	str	r3, [r4]
   128ac:	add	sp, sp, #12
   128b0:	ldrd	r4, [sp]
   128b4:	add	sp, sp, #8
   128b8:	pop	{pc}		; (ldr pc, [sp], #4)
   128bc:	str	r4, [sp, #-16]!
   128c0:	strd	r6, [sp, #4]
   128c4:	str	lr, [sp, #12]
   128c8:	sub	sp, sp, #8
   128cc:	mov	r4, r0
   128d0:	mov	r6, r2
   128d4:	mov	r7, r3
   128d8:	ldr	r2, [r0, #8]
   128dc:	ldr	r3, [r0, #4]
   128e0:	cmp	r2, r3
   128e4:	beq	12914 <__assert_fail@plt+0x1a50>
   128e8:	ldr	r3, [sp, #24]
   128ec:	str	r3, [sp]
   128f0:	mov	r2, r6
   128f4:	mov	r3, r7
   128f8:	mov	r0, r4
   128fc:	bl	10e34 <fseeko64@plt>
   12900:	add	sp, sp, #8
   12904:	ldr	r4, [sp]
   12908:	ldrd	r6, [sp, #4]
   1290c:	add	sp, sp, #12
   12910:	pop	{pc}		; (ldr pc, [sp], #4)
   12914:	ldr	r2, [r0, #20]
   12918:	ldr	r3, [r0, #16]
   1291c:	cmp	r2, r3
   12920:	bne	128e8 <__assert_fail@plt+0x1a24>
   12924:	ldr	r3, [r0, #36]	; 0x24
   12928:	cmp	r3, #0
   1292c:	bne	128e8 <__assert_fail@plt+0x1a24>
   12930:	bl	10e10 <fileno@plt>
   12934:	ldr	r3, [sp, #24]
   12938:	str	r3, [sp]
   1293c:	mov	r2, r6
   12940:	mov	r3, r7
   12944:	bl	10d44 <lseek64@plt>
   12948:	mvn	r2, #0
   1294c:	mvn	r3, #0
   12950:	cmp	r1, r3
   12954:	cmpeq	r0, r2
   12958:	beq	12974 <__assert_fail@plt+0x1ab0>
   1295c:	ldr	r3, [r4]
   12960:	bic	r3, r3, #16
   12964:	str	r3, [r4]
   12968:	strd	r0, [r4, #80]	; 0x50
   1296c:	mov	r0, #0
   12970:	b	12900 <__assert_fail@plt+0x1a3c>
   12974:	mvn	r0, #0
   12978:	b	12900 <__assert_fail@plt+0x1a3c>
   1297c:	strd	r4, [sp, #-16]!
   12980:	str	r6, [sp, #8]
   12984:	str	lr, [sp, #12]
   12988:	subs	r4, r0, #0
   1298c:	beq	12a28 <__assert_fail@plt+0x1b64>
   12990:	mov	r1, #47	; 0x2f
   12994:	mov	r0, r4
   12998:	bl	10e64 <strrchr@plt>
   1299c:	subs	r5, r0, #0
   129a0:	beq	12a00 <__assert_fail@plt+0x1b3c>
   129a4:	add	r6, r5, #1
   129a8:	sub	r3, r6, r4
   129ac:	cmp	r3, #6
   129b0:	ble	12a00 <__assert_fail@plt+0x1b3c>
   129b4:	mov	r2, #7
   129b8:	movw	r1, #25976	; 0x6578
   129bc:	movt	r1, #1
   129c0:	sub	r0, r5, #6
   129c4:	bl	10ea0 <strncmp@plt>
   129c8:	cmp	r0, #0
   129cc:	bne	12a00 <__assert_fail@plt+0x1b3c>
   129d0:	mov	r2, #3
   129d4:	movw	r1, #25984	; 0x6580
   129d8:	movt	r1, #1
   129dc:	mov	r0, r6
   129e0:	bl	10ea0 <strncmp@plt>
   129e4:	cmp	r0, #0
   129e8:	movne	r4, r6
   129ec:	bne	12a00 <__assert_fail@plt+0x1b3c>
   129f0:	add	r4, r5, #4
   129f4:	movw	r3, #28984	; 0x7138
   129f8:	movt	r3, #2
   129fc:	str	r4, [r3]
   12a00:	movw	r3, #29092	; 0x71a4
   12a04:	movt	r3, #2
   12a08:	str	r4, [r3]
   12a0c:	movw	r3, #28988	; 0x713c
   12a10:	movt	r3, #2
   12a14:	str	r4, [r3]
   12a18:	ldrd	r4, [sp]
   12a1c:	ldr	r6, [sp, #8]
   12a20:	add	sp, sp, #12
   12a24:	pop	{pc}		; (ldr pc, [sp], #4)
   12a28:	movw	r3, #29000	; 0x7148
   12a2c:	movt	r3, #2
   12a30:	ldr	r3, [r3]
   12a34:	mov	r2, #55	; 0x37
   12a38:	mov	r1, #1
   12a3c:	movw	r0, #25920	; 0x6540
   12a40:	movt	r0, #1
   12a44:	bl	10d38 <fwrite@plt>
   12a48:	bl	10eac <abort@plt>
   12a4c:	mov	r2, #0
   12a50:	mov	r3, #0
   12a54:	strd	r2, [r0]
   12a58:	strd	r2, [r0, #8]
   12a5c:	strd	r2, [r0, #16]
   12a60:	strd	r2, [r0, #24]
   12a64:	strd	r2, [r0, #32]
   12a68:	strd	r2, [r0, #40]	; 0x28
   12a6c:	cmp	r1, #10
   12a70:	beq	12a7c <__assert_fail@plt+0x1bb8>
   12a74:	str	r1, [r0]
   12a78:	bx	lr
   12a7c:	str	r4, [sp, #-8]!
   12a80:	str	lr, [sp, #4]
   12a84:	bl	10eac <abort@plt>
   12a88:	strd	r4, [sp, #-16]!
   12a8c:	str	r6, [sp, #8]
   12a90:	str	lr, [sp, #12]
   12a94:	mov	r5, r0
   12a98:	mov	r6, r1
   12a9c:	mov	r2, #5
   12aa0:	mov	r1, r0
   12aa4:	mov	r0, #0
   12aa8:	bl	10d08 <dcgettext@plt>
   12aac:	mov	r4, r0
   12ab0:	cmp	r5, r0
   12ab4:	beq	12acc <__assert_fail@plt+0x1c08>
   12ab8:	mov	r0, r4
   12abc:	ldrd	r4, [sp]
   12ac0:	ldr	r6, [sp, #8]
   12ac4:	add	sp, sp, #12
   12ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   12acc:	bl	158bc <__assert_fail@plt+0x49f8>
   12ad0:	ldrb	r3, [r0]
   12ad4:	bic	r3, r3, #32
   12ad8:	cmp	r3, #85	; 0x55
   12adc:	bne	12b60 <__assert_fail@plt+0x1c9c>
   12ae0:	ldrb	r3, [r0, #1]
   12ae4:	bic	r3, r3, #32
   12ae8:	cmp	r3, #84	; 0x54
   12aec:	bne	12b24 <__assert_fail@plt+0x1c60>
   12af0:	ldrb	r3, [r0, #2]
   12af4:	bic	r3, r3, #32
   12af8:	cmp	r3, #70	; 0x46
   12afc:	bne	12b24 <__assert_fail@plt+0x1c60>
   12b00:	ldrb	r3, [r0, #3]
   12b04:	cmp	r3, #45	; 0x2d
   12b08:	bne	12b24 <__assert_fail@plt+0x1c60>
   12b0c:	ldrb	r3, [r0, #4]
   12b10:	cmp	r3, #56	; 0x38
   12b14:	bne	12b24 <__assert_fail@plt+0x1c60>
   12b18:	ldrb	r3, [r0, #5]
   12b1c:	cmp	r3, #0
   12b20:	beq	12b40 <__assert_fail@plt+0x1c7c>
   12b24:	movw	r4, #26072	; 0x65d8
   12b28:	movt	r4, #1
   12b2c:	movw	r3, #26092	; 0x65ec
   12b30:	movt	r3, #1
   12b34:	cmp	r6, #9
   12b38:	movne	r4, r3
   12b3c:	b	12ab8 <__assert_fail@plt+0x1bf4>
   12b40:	ldrb	r2, [r4]
   12b44:	movw	r4, #26088	; 0x65e8
   12b48:	movt	r4, #1
   12b4c:	movw	r3, #26076	; 0x65dc
   12b50:	movt	r3, #1
   12b54:	cmp	r2, #96	; 0x60
   12b58:	movne	r4, r3
   12b5c:	b	12ab8 <__assert_fail@plt+0x1bf4>
   12b60:	cmp	r3, #71	; 0x47
   12b64:	bne	12b24 <__assert_fail@plt+0x1c60>
   12b68:	ldrb	r3, [r0, #1]
   12b6c:	bic	r3, r3, #32
   12b70:	cmp	r3, #66	; 0x42
   12b74:	bne	12b24 <__assert_fail@plt+0x1c60>
   12b78:	ldrb	r3, [r0, #2]
   12b7c:	cmp	r3, #49	; 0x31
   12b80:	bne	12b24 <__assert_fail@plt+0x1c60>
   12b84:	ldrb	r3, [r0, #3]
   12b88:	cmp	r3, #56	; 0x38
   12b8c:	bne	12b24 <__assert_fail@plt+0x1c60>
   12b90:	ldrb	r3, [r0, #4]
   12b94:	cmp	r3, #48	; 0x30
   12b98:	bne	12b24 <__assert_fail@plt+0x1c60>
   12b9c:	ldrb	r3, [r0, #5]
   12ba0:	cmp	r3, #51	; 0x33
   12ba4:	bne	12b24 <__assert_fail@plt+0x1c60>
   12ba8:	ldrb	r3, [r0, #6]
   12bac:	cmp	r3, #48	; 0x30
   12bb0:	bne	12b24 <__assert_fail@plt+0x1c60>
   12bb4:	ldrb	r3, [r0, #7]
   12bb8:	cmp	r3, #0
   12bbc:	bne	12b24 <__assert_fail@plt+0x1c60>
   12bc0:	ldrb	r2, [r4]
   12bc4:	movw	r4, #26084	; 0x65e4
   12bc8:	movt	r4, #1
   12bcc:	movw	r3, #26080	; 0x65e0
   12bd0:	movt	r3, #1
   12bd4:	cmp	r2, #96	; 0x60
   12bd8:	movne	r4, r3
   12bdc:	b	12ab8 <__assert_fail@plt+0x1bf4>
   12be0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12be4:	strd	r6, [sp, #8]
   12be8:	strd	r8, [sp, #16]
   12bec:	strd	sl, [sp, #24]
   12bf0:	str	lr, [sp, #32]
   12bf4:	sub	sp, sp, #116	; 0x74
   12bf8:	str	r0, [sp, #64]	; 0x40
   12bfc:	mov	r8, r1
   12c00:	str	r2, [sp, #48]	; 0x30
   12c04:	str	r3, [sp, #24]
   12c08:	ldr	r7, [sp, #152]	; 0x98
   12c0c:	bl	10d50 <__ctype_get_mb_cur_max@plt>
   12c10:	str	r0, [sp, #76]	; 0x4c
   12c14:	ldr	r3, [sp, #156]	; 0x9c
   12c18:	ubfx	r3, r3, #1, #1
   12c1c:	str	r3, [sp, #32]
   12c20:	mov	r3, #1
   12c24:	str	r3, [sp, #40]	; 0x28
   12c28:	mov	r3, #0
   12c2c:	str	r3, [sp, #68]	; 0x44
   12c30:	str	r3, [sp, #36]	; 0x24
   12c34:	str	r3, [sp, #28]
   12c38:	str	r3, [sp, #52]	; 0x34
   12c3c:	str	r3, [sp, #60]	; 0x3c
   12c40:	str	r3, [sp, #72]	; 0x48
   12c44:	movw	r3, #26096	; 0x65f0
   12c48:	movt	r3, #1
   12c4c:	str	r3, [sp, #80]	; 0x50
   12c50:	mov	r9, r8
   12c54:	mov	sl, r7
   12c58:	cmp	sl, #10
   12c5c:	ldrls	pc, [pc, sl, lsl #2]
   12c60:	b	12e24 <__assert_fail@plt+0x1f60>
   12c64:	andeq	r2, r1, r4, asr #25
   12c68:	muleq	r1, r8, ip
   12c6c:	strdeq	r2, [r1], -ip
   12c70:	muleq	r1, r0, ip
   12c74:			; <UNDEFINED> instruction: 0x00012db0
   12c78:	ldrdeq	r2, [r1], -r4
   12c7c:	andeq	r4, r1, r0, lsr #1
   12c80:	andeq	r2, r1, r8, lsr #28
   12c84:	andeq	r2, r1, r0, lsl sp
   12c88:	andeq	r2, r1, r0, lsl sp
   12c8c:	andeq	r2, r1, r0, lsl sp
   12c90:	mov	r3, #1
   12c94:	str	r3, [sp, #28]
   12c98:	mov	r3, #1
   12c9c:	str	r3, [sp, #32]
   12ca0:	str	r3, [sp, #52]	; 0x34
   12ca4:	movw	r3, #26092	; 0x65ec
   12ca8:	movt	r3, #1
   12cac:	str	r3, [sp, #60]	; 0x3c
   12cb0:	mov	fp, #0
   12cb4:	mov	sl, #2
   12cb8:	mov	r6, #0
   12cbc:	ldr	r8, [sp, #64]	; 0x40
   12cc0:	b	13538 <__assert_fail@plt+0x2674>
   12cc4:	mov	fp, sl
   12cc8:	mov	r3, #0
   12ccc:	str	r3, [sp, #32]
   12cd0:	b	12cb8 <__assert_fail@plt+0x1df4>
   12cd4:	ldr	r3, [sp, #32]
   12cd8:	cmp	r3, #0
   12cdc:	bne	12e3c <__assert_fail@plt+0x1f78>
   12ce0:	cmp	r9, #0
   12ce4:	beq	12e60 <__assert_fail@plt+0x1f9c>
   12ce8:	mov	r3, #34	; 0x22
   12cec:	ldr	r2, [sp, #64]	; 0x40
   12cf0:	strb	r3, [r2]
   12cf4:	mov	fp, #1
   12cf8:	str	fp, [sp, #28]
   12cfc:	str	fp, [sp, #52]	; 0x34
   12d00:	movw	r3, #26072	; 0x65d8
   12d04:	movt	r3, #1
   12d08:	str	r3, [sp, #60]	; 0x3c
   12d0c:	b	12cb8 <__assert_fail@plt+0x1df4>
   12d10:	cmp	sl, #10
   12d14:	bne	12d48 <__assert_fail@plt+0x1e84>
   12d18:	ldr	r3, [sp, #32]
   12d1c:	cmp	r3, #0
   12d20:	movne	fp, #0
   12d24:	beq	12d70 <__assert_fail@plt+0x1eac>
   12d28:	ldr	r0, [sp, #168]	; 0xa8
   12d2c:	bl	10dd4 <strlen@plt>
   12d30:	str	r0, [sp, #52]	; 0x34
   12d34:	ldr	r3, [sp, #168]	; 0xa8
   12d38:	str	r3, [sp, #60]	; 0x3c
   12d3c:	mov	r3, #1
   12d40:	str	r3, [sp, #28]
   12d44:	b	12cb8 <__assert_fail@plt+0x1df4>
   12d48:	mov	r1, sl
   12d4c:	ldr	r0, [sp, #80]	; 0x50
   12d50:	bl	12a88 <__assert_fail@plt+0x1bc4>
   12d54:	str	r0, [sp, #164]	; 0xa4
   12d58:	mov	r1, sl
   12d5c:	movw	r0, #26092	; 0x65ec
   12d60:	movt	r0, #1
   12d64:	bl	12a88 <__assert_fail@plt+0x1bc4>
   12d68:	str	r0, [sp, #168]	; 0xa8
   12d6c:	b	12d18 <__assert_fail@plt+0x1e54>
   12d70:	ldr	r3, [sp, #164]	; 0xa4
   12d74:	ldrb	r3, [r3]
   12d78:	cmp	r3, #0
   12d7c:	beq	12da8 <__assert_fail@plt+0x1ee4>
   12d80:	ldr	r2, [sp, #164]	; 0xa4
   12d84:	mov	fp, #0
   12d88:	ldr	r1, [sp, #64]	; 0x40
   12d8c:	cmp	r9, fp
   12d90:	strbhi	r3, [r1, fp]
   12d94:	add	fp, fp, #1
   12d98:	ldrb	r3, [r2, #1]!
   12d9c:	cmp	r3, #0
   12da0:	bne	12d8c <__assert_fail@plt+0x1ec8>
   12da4:	b	12d28 <__assert_fail@plt+0x1e64>
   12da8:	mov	fp, #0
   12dac:	b	12d28 <__assert_fail@plt+0x1e64>
   12db0:	ldr	r3, [sp, #32]
   12db4:	cmp	r3, #0
   12db8:	bne	12c98 <__assert_fail@plt+0x1dd4>
   12dbc:	mov	r3, #1
   12dc0:	str	r3, [sp, #28]
   12dc4:	cmp	r9, #0
   12dc8:	beq	12e7c <__assert_fail@plt+0x1fb8>
   12dcc:	mov	r3, #39	; 0x27
   12dd0:	ldr	r2, [sp, #64]	; 0x40
   12dd4:	strb	r3, [r2]
   12dd8:	mov	r3, #0
   12ddc:	str	r3, [sp, #32]
   12de0:	mov	fp, #1
   12de4:	str	fp, [sp, #52]	; 0x34
   12de8:	movw	r3, #26092	; 0x65ec
   12dec:	movt	r3, #1
   12df0:	str	r3, [sp, #60]	; 0x3c
   12df4:	mov	sl, #2
   12df8:	b	12cb8 <__assert_fail@plt+0x1df4>
   12dfc:	ldr	r3, [sp, #32]
   12e00:	cmp	r3, #0
   12e04:	beq	12dc4 <__assert_fail@plt+0x1f00>
   12e08:	mov	r3, #1
   12e0c:	str	r3, [sp, #52]	; 0x34
   12e10:	movw	r3, #26092	; 0x65ec
   12e14:	movt	r3, #1
   12e18:	str	r3, [sp, #60]	; 0x3c
   12e1c:	mov	fp, #0
   12e20:	b	12cb8 <__assert_fail@plt+0x1df4>
   12e24:	bl	10eac <abort@plt>
   12e28:	mov	fp, #0
   12e2c:	str	fp, [sp, #32]
   12e30:	mov	r3, #1
   12e34:	str	r3, [sp, #28]
   12e38:	b	12cb8 <__assert_fail@plt+0x1df4>
   12e3c:	ldr	r3, [sp, #32]
   12e40:	str	r3, [sp, #28]
   12e44:	mov	r3, #1
   12e48:	str	r3, [sp, #52]	; 0x34
   12e4c:	movw	r3, #26072	; 0x65d8
   12e50:	movt	r3, #1
   12e54:	str	r3, [sp, #60]	; 0x3c
   12e58:	mov	fp, #0
   12e5c:	b	12cb8 <__assert_fail@plt+0x1df4>
   12e60:	mov	fp, #1
   12e64:	str	fp, [sp, #28]
   12e68:	str	fp, [sp, #52]	; 0x34
   12e6c:	movw	r3, #26072	; 0x65d8
   12e70:	movt	r3, #1
   12e74:	str	r3, [sp, #60]	; 0x3c
   12e78:	b	12cb8 <__assert_fail@plt+0x1df4>
   12e7c:	mov	r3, #0
   12e80:	str	r3, [sp, #32]
   12e84:	mov	fp, #1
   12e88:	str	fp, [sp, #52]	; 0x34
   12e8c:	movw	r3, #26092	; 0x65ec
   12e90:	movt	r3, #1
   12e94:	str	r3, [sp, #60]	; 0x3c
   12e98:	mov	sl, #2
   12e9c:	b	12cb8 <__assert_fail@plt+0x1df4>
   12ea0:	mov	r3, r2
   12ea4:	add	r4, r6, r2
   12ea8:	ldr	r2, [sp, #24]
   12eac:	cmp	r3, #1
   12eb0:	movls	r3, #0
   12eb4:	movhi	r3, #1
   12eb8:	cmn	r2, #1
   12ebc:	movne	r3, #0
   12ec0:	cmp	r3, #0
   12ec4:	beq	12ed4 <__assert_fail@plt+0x2010>
   12ec8:	ldr	r0, [sp, #48]	; 0x30
   12ecc:	bl	10dd4 <strlen@plt>
   12ed0:	str	r0, [sp, #24]
   12ed4:	ldr	r3, [sp, #24]
   12ed8:	cmp	r4, r3
   12edc:	bhi	140c8 <__assert_fail@plt+0x3204>
   12ee0:	ldr	r3, [sp, #48]	; 0x30
   12ee4:	add	r4, r3, r6
   12ee8:	ldr	r2, [sp, #52]	; 0x34
   12eec:	ldr	r1, [sp, #60]	; 0x3c
   12ef0:	mov	r0, r4
   12ef4:	bl	10cf0 <memcmp@plt>
   12ef8:	cmp	r0, #0
   12efc:	bne	140c8 <__assert_fail@plt+0x3204>
   12f00:	ldr	r3, [sp, #32]
   12f04:	cmp	r3, #0
   12f08:	bne	13118 <__assert_fail@plt+0x2254>
   12f0c:	ldrb	r4, [r4]
   12f10:	cmp	r4, #126	; 0x7e
   12f14:	ldrls	pc, [pc, r4, lsl #2]
   12f18:	b	139cc <__assert_fail@plt+0x2b08>
   12f1c:	andeq	r3, r1, ip, asr r1
   12f20:	andeq	r3, r1, ip, asr #19
   12f24:	andeq	r3, r1, ip, asr #19
   12f28:	andeq	r3, r1, ip, asr #19
   12f2c:	andeq	r3, r1, ip, asr #19
   12f30:	andeq	r3, r1, ip, asr #19
   12f34:	andeq	r3, r1, ip, asr #19
   12f38:	andeq	r3, r1, r4, ror r8
   12f3c:	strdeq	r3, [r1], -r8
   12f40:	muleq	r1, ip, r7
   12f44:	andeq	r3, r1, r8, asr #16
   12f48:			; <UNDEFINED> instruction: 0x000137b0
   12f4c:	andeq	r3, r1, ip, lsl #8
   12f50:	andeq	r3, r1, r0, lsr #8
   12f54:	andeq	r3, r1, ip, asr #19
   12f58:	andeq	r3, r1, ip, asr #19
   12f5c:	andeq	r3, r1, ip, asr #19
   12f60:	andeq	r3, r1, ip, asr #19
   12f64:	andeq	r3, r1, ip, asr #19
   12f68:	andeq	r3, r1, ip, asr #19
   12f6c:	andeq	r3, r1, ip, asr #19
   12f70:	andeq	r3, r1, ip, asr #19
   12f74:	andeq	r3, r1, ip, asr #19
   12f78:	andeq	r3, r1, ip, asr #19
   12f7c:	andeq	r3, r1, ip, asr #19
   12f80:	andeq	r3, r1, ip, asr #19
   12f84:	andeq	r3, r1, ip, asr #19
   12f88:	andeq	r3, r1, ip, asr #19
   12f8c:	andeq	r3, r1, ip, asr #19
   12f90:	andeq	r3, r1, ip, asr #19
   12f94:	andeq	r3, r1, ip, asr #19
   12f98:	andeq	r3, r1, ip, asr #19
   12f9c:	andeq	r3, r1, r8, ror #17
   12fa0:	andeq	r3, r1, ip, lsl #18
   12fa4:	andeq	r3, r1, ip, lsl #18
   12fa8:	andeq	r3, r1, r4, lsr #17
   12fac:	andeq	r3, r1, ip, lsl #18
   12fb0:	andeq	r3, r1, ip, lsr #28
   12fb4:	andeq	r3, r1, ip, lsl #18
   12fb8:	andeq	r3, r1, ip, lsr #18
   12fbc:	andeq	r3, r1, ip, lsl #18
   12fc0:	andeq	r3, r1, ip, lsl #18
   12fc4:	andeq	r3, r1, ip, lsl #18
   12fc8:	andeq	r3, r1, ip, lsr #28
   12fcc:	andeq	r3, r1, ip, lsr #28
   12fd0:	andeq	r3, r1, ip, lsr #28
   12fd4:	andeq	r3, r1, ip, lsr #28
   12fd8:	andeq	r3, r1, ip, lsr #28
   12fdc:	andeq	r3, r1, ip, lsr #28
   12fe0:	andeq	r3, r1, ip, lsr #28
   12fe4:	andeq	r3, r1, ip, lsr #28
   12fe8:	andeq	r3, r1, ip, lsr #28
   12fec:	andeq	r3, r1, ip, lsr #28
   12ff0:	andeq	r3, r1, ip, lsr #28
   12ff4:	andeq	r3, r1, ip, lsr #28
   12ff8:	andeq	r3, r1, ip, lsr #28
   12ffc:	andeq	r3, r1, ip, lsr #28
   13000:	andeq	r3, r1, ip, lsr #28
   13004:	andeq	r3, r1, ip, lsr #28
   13008:	andeq	r3, r1, ip, lsl #18
   1300c:	andeq	r3, r1, ip, lsl #18
   13010:	andeq	r3, r1, ip, lsl #18
   13014:	andeq	r3, r1, ip, lsl #18
   13018:	andeq	r3, r1, ip, lsl #5
   1301c:	andeq	r3, r1, ip, asr #19
   13020:	andeq	r3, r1, ip, lsr #28
   13024:	andeq	r3, r1, ip, lsr #28
   13028:	andeq	r3, r1, ip, lsr #28
   1302c:	andeq	r3, r1, ip, lsr #28
   13030:	andeq	r3, r1, ip, lsr #28
   13034:	andeq	r3, r1, ip, lsr #28
   13038:	andeq	r3, r1, ip, lsr #28
   1303c:	andeq	r3, r1, ip, lsr #28
   13040:	andeq	r3, r1, ip, lsr #28
   13044:	andeq	r3, r1, ip, lsr #28
   13048:	andeq	r3, r1, ip, lsr #28
   1304c:	andeq	r3, r1, ip, lsr #28
   13050:	andeq	r3, r1, ip, lsr #28
   13054:	andeq	r3, r1, ip, lsr #28
   13058:	andeq	r3, r1, ip, lsr #28
   1305c:	andeq	r3, r1, ip, lsr #28
   13060:	andeq	r3, r1, ip, lsr #28
   13064:	andeq	r3, r1, ip, lsr #28
   13068:	andeq	r3, r1, ip, lsr #28
   1306c:	andeq	r3, r1, ip, lsr #28
   13070:	andeq	r3, r1, ip, lsr #28
   13074:	andeq	r3, r1, ip, lsr #28
   13078:	andeq	r3, r1, ip, lsr #28
   1307c:	andeq	r3, r1, ip, lsr #28
   13080:	andeq	r3, r1, ip, lsr #28
   13084:	andeq	r3, r1, ip, lsr #28
   13088:	andeq	r3, r1, ip, lsl #18
   1308c:	andeq	r3, r1, r4, asr #15
   13090:	andeq	r3, r1, ip, lsr #28
   13094:	andeq	r3, r1, ip, lsl #18
   13098:	andeq	r3, r1, ip, lsr #28
   1309c:	andeq	r3, r1, ip, lsl #18
   130a0:	andeq	r3, r1, ip, lsr #28
   130a4:	andeq	r3, r1, ip, lsr #28
   130a8:	andeq	r3, r1, ip, lsr #28
   130ac:	andeq	r3, r1, ip, lsr #28
   130b0:	andeq	r3, r1, ip, lsr #28
   130b4:	andeq	r3, r1, ip, lsr #28
   130b8:	andeq	r3, r1, ip, lsr #28
   130bc:	andeq	r3, r1, ip, lsr #28
   130c0:	andeq	r3, r1, ip, lsr #28
   130c4:	andeq	r3, r1, ip, lsr #28
   130c8:	andeq	r3, r1, ip, lsr #28
   130cc:	andeq	r3, r1, ip, lsr #28
   130d0:	andeq	r3, r1, ip, lsr #28
   130d4:	andeq	r3, r1, ip, lsr #28
   130d8:	andeq	r3, r1, ip, lsr #28
   130dc:	andeq	r3, r1, ip, lsr #28
   130e0:	andeq	r3, r1, ip, lsr #28
   130e4:	andeq	r3, r1, ip, lsr #28
   130e8:	andeq	r3, r1, ip, lsr #28
   130ec:	andeq	r3, r1, ip, lsr #28
   130f0:	andeq	r3, r1, ip, lsr #28
   130f4:	andeq	r3, r1, ip, lsr #28
   130f8:	andeq	r3, r1, ip, lsr #28
   130fc:	andeq	r3, r1, ip, lsr #28
   13100:	andeq	r3, r1, ip, lsr #28
   13104:	andeq	r3, r1, ip, lsr #28
   13108:	andeq	r3, r1, r4, lsl #17
   1310c:	andeq	r3, r1, ip, lsl #18
   13110:	andeq	r3, r1, r4, lsl #17
   13114:	andeq	r3, r1, r4, lsr #17
   13118:	mov	r8, r9
   1311c:	mov	r7, sl
   13120:	b	14020 <__assert_fail@plt+0x315c>
   13124:	ldr	r3, [sp, #28]
   13128:	cmp	r3, #0
   1312c:	bne	1314c <__assert_fail@plt+0x2288>
   13130:	ldr	r3, [sp, #156]	; 0x9c
   13134:	tst	r3, #1
   13138:	bne	13534 <__assert_fail@plt+0x2670>
   1313c:	ldr	r3, [sp, #28]
   13140:	str	r3, [sp, #44]	; 0x2c
   13144:	mov	r5, r3
   13148:	b	13454 <__assert_fail@plt+0x2590>
   1314c:	ldr	r3, [sp, #32]
   13150:	cmp	r3, #0
   13154:	bne	13fd0 <__assert_fail@plt+0x310c>
   13158:	str	r3, [sp, #44]	; 0x2c
   1315c:	ldr	r3, [sp, #36]	; 0x24
   13160:	eor	r3, r3, #1
   13164:	cmp	sl, #2
   13168:	movne	r3, #0
   1316c:	andeq	r3, r3, #1
   13170:	cmp	r3, #0
   13174:	beq	131cc <__assert_fail@plt+0x2308>
   13178:	cmp	r9, fp
   1317c:	movhi	r2, #39	; 0x27
   13180:	strbhi	r2, [r8, fp]
   13184:	add	r2, fp, #1
   13188:	cmp	r9, r2
   1318c:	movhi	r1, #36	; 0x24
   13190:	strbhi	r1, [r8, r2]
   13194:	add	r2, fp, #2
   13198:	cmp	r9, r2
   1319c:	movhi	r1, #39	; 0x27
   131a0:	strbhi	r1, [r8, r2]
   131a4:	add	r2, fp, #3
   131a8:	cmp	r9, r2
   131ac:	bls	1408c <__assert_fail@plt+0x31c8>
   131b0:	mov	r1, #92	; 0x5c
   131b4:	strb	r1, [r8, r2]
   131b8:	add	fp, fp, #4
   131bc:	str	r3, [sp, #36]	; 0x24
   131c0:	mov	r5, #0
   131c4:	mov	r4, #48	; 0x30
   131c8:	b	134a0 <__assert_fail@plt+0x25dc>
   131cc:	cmp	r9, fp
   131d0:	bhi	131f8 <__assert_fail@plt+0x2334>
   131d4:	add	r1, fp, #1
   131d8:	ldr	r2, [sp, #56]	; 0x38
   131dc:	cmp	r2, #0
   131e0:	bne	13220 <__assert_fail@plt+0x235c>
   131e4:	mov	r3, r5
   131e8:	ldr	r5, [sp, #56]	; 0x38
   131ec:	mov	fp, r1
   131f0:	mov	r4, #48	; 0x30
   131f4:	b	13454 <__assert_fail@plt+0x2590>
   131f8:	mov	r2, #92	; 0x5c
   131fc:	strb	r2, [r8, fp]
   13200:	add	r1, fp, #1
   13204:	ldr	r2, [sp, #56]	; 0x38
   13208:	cmp	r2, #0
   1320c:	moveq	r3, r5
   13210:	moveq	r5, r2
   13214:	moveq	fp, r1
   13218:	moveq	r4, #48	; 0x30
   1321c:	beq	134a0 <__assert_fail@plt+0x25dc>
   13220:	add	r2, r6, #1
   13224:	ldr	r0, [sp, #24]
   13228:	cmp	r2, r0
   1322c:	bcs	13248 <__assert_fail@plt+0x2384>
   13230:	ldr	r0, [sp, #48]	; 0x30
   13234:	ldrb	r2, [r0, r2]
   13238:	sub	r2, r2, #48	; 0x30
   1323c:	uxtb	r2, r2
   13240:	cmp	r2, #9
   13244:	bls	13260 <__assert_fail@plt+0x239c>
   13248:	mov	r2, r3
   1324c:	mov	r3, r5
   13250:	mov	r5, r2
   13254:	mov	fp, r1
   13258:	mov	r4, #48	; 0x30
   1325c:	b	13478 <__assert_fail@plt+0x25b4>
   13260:	cmp	r9, r1
   13264:	movhi	r2, #48	; 0x30
   13268:	strbhi	r2, [r8, r1]
   1326c:	add	r2, fp, #2
   13270:	cmp	r9, r2
   13274:	movhi	r1, #48	; 0x30
   13278:	strbhi	r1, [r8, r2]
   1327c:	add	r1, fp, #3
   13280:	b	13248 <__assert_fail@plt+0x2384>
   13284:	mov	r3, #0
   13288:	str	r3, [sp, #44]	; 0x2c
   1328c:	cmp	sl, #2
   13290:	beq	132ac <__assert_fail@plt+0x23e8>
   13294:	cmp	sl, #5
   13298:	beq	132c4 <__assert_fail@plt+0x2400>
   1329c:	mov	r5, #0
   132a0:	mov	r3, r5
   132a4:	mov	r4, #63	; 0x3f
   132a8:	b	13454 <__assert_fail@plt+0x2590>
   132ac:	ldr	r3, [sp, #32]
   132b0:	cmp	r3, #0
   132b4:	bne	13fdc <__assert_fail@plt+0x3118>
   132b8:	mov	r5, r3
   132bc:	mov	r4, #63	; 0x3f
   132c0:	b	139bc <__assert_fail@plt+0x2af8>
   132c4:	ldr	r3, [sp, #156]	; 0x9c
   132c8:	tst	r3, #4
   132cc:	beq	13df4 <__assert_fail@plt+0x2f30>
   132d0:	add	r2, r6, #2
   132d4:	ldr	r3, [sp, #24]
   132d8:	cmp	r2, r3
   132dc:	bcs	13e04 <__assert_fail@plt+0x2f40>
   132e0:	ldr	r3, [sp, #48]	; 0x30
   132e4:	add	r3, r3, r6
   132e8:	ldrb	r4, [r3, #1]
   132ec:	cmp	r4, #63	; 0x3f
   132f0:	movne	r5, #0
   132f4:	movne	r3, r5
   132f8:	movne	r4, #63	; 0x3f
   132fc:	bne	13454 <__assert_fail@plt+0x2590>
   13300:	ldr	r3, [sp, #48]	; 0x30
   13304:	ldrb	r1, [r3, r2]
   13308:	sub	r3, r1, #33	; 0x21
   1330c:	cmp	r3, #29
   13310:	ldrls	pc, [pc, r3, lsl #2]
   13314:	b	13e14 <__assert_fail@plt+0x2f50>
   13318:	muleq	r1, r0, r3
   1331c:	andeq	r3, r1, r4, lsl lr
   13320:	andeq	r3, r1, r4, lsl lr
   13324:	andeq	r3, r1, r4, lsl lr
   13328:	andeq	r3, r1, r4, lsl lr
   1332c:	andeq	r3, r1, r4, lsl lr
   13330:	muleq	r1, r0, r3
   13334:	muleq	r1, r0, r3
   13338:	muleq	r1, r0, r3
   1333c:	andeq	r3, r1, r4, lsl lr
   13340:	andeq	r3, r1, r4, lsl lr
   13344:	andeq	r3, r1, r4, lsl lr
   13348:	muleq	r1, r0, r3
   1334c:	andeq	r3, r1, r4, lsl lr
   13350:	muleq	r1, r0, r3
   13354:	andeq	r3, r1, r4, lsl lr
   13358:	andeq	r3, r1, r4, lsl lr
   1335c:	andeq	r3, r1, r4, lsl lr
   13360:	andeq	r3, r1, r4, lsl lr
   13364:	andeq	r3, r1, r4, lsl lr
   13368:	andeq	r3, r1, r4, lsl lr
   1336c:	andeq	r3, r1, r4, lsl lr
   13370:	andeq	r3, r1, r4, lsl lr
   13374:	andeq	r3, r1, r4, lsl lr
   13378:	andeq	r3, r1, r4, lsl lr
   1337c:	andeq	r3, r1, r4, lsl lr
   13380:	andeq	r3, r1, r4, lsl lr
   13384:	muleq	r1, r0, r3
   13388:	muleq	r1, r0, r3
   1338c:	muleq	r1, r0, r3
   13390:	ldr	r3, [sp, #32]
   13394:	cmp	r3, #0
   13398:	bne	14080 <__assert_fail@plt+0x31bc>
   1339c:	cmp	r9, fp
   133a0:	movhi	r3, #63	; 0x3f
   133a4:	strbhi	r3, [r8, fp]
   133a8:	add	r3, fp, #1
   133ac:	cmp	r9, r3
   133b0:	movhi	r0, #34	; 0x22
   133b4:	strbhi	r0, [r8, r3]
   133b8:	add	r3, fp, #2
   133bc:	cmp	r9, r3
   133c0:	movhi	r0, #34	; 0x22
   133c4:	strbhi	r0, [r8, r3]
   133c8:	add	r3, fp, #3
   133cc:	cmp	r9, r3
   133d0:	movhi	r0, #63	; 0x3f
   133d4:	strbhi	r0, [r8, r3]
   133d8:	add	fp, fp, #4
   133dc:	ldr	r3, [sp, #32]
   133e0:	mov	r5, r3
   133e4:	mov	r4, r1
   133e8:	mov	r6, r2
   133ec:	b	13454 <__assert_fail@plt+0x2590>
   133f0:	mov	r3, #0
   133f4:	str	r3, [sp, #44]	; 0x2c
   133f8:	mov	r4, #8
   133fc:	mov	r3, #98	; 0x62
   13400:	b	13440 <__assert_fail@plt+0x257c>
   13404:	mov	r3, #0
   13408:	str	r3, [sp, #44]	; 0x2c
   1340c:	mov	r4, #12
   13410:	mov	r3, #102	; 0x66
   13414:	b	13440 <__assert_fail@plt+0x257c>
   13418:	mov	r3, #0
   1341c:	str	r3, [sp, #44]	; 0x2c
   13420:	mov	r4, #13
   13424:	mov	r3, #114	; 0x72
   13428:	ldr	r2, [sp, #32]
   1342c:	cmp	sl, #2
   13430:	movne	r2, #0
   13434:	andeq	r2, r2, #1
   13438:	cmp	r2, #0
   1343c:	bne	13860 <__assert_fail@plt+0x299c>
   13440:	ldr	r2, [sp, #28]
   13444:	cmp	r2, #0
   13448:	bne	13e48 <__assert_fail@plt+0x2f84>
   1344c:	mov	r5, r2
   13450:	mov	r3, r2
   13454:	ldr	r2, [sp, #28]
   13458:	eor	r2, r2, #1
   1345c:	cmp	sl, #2
   13460:	orreq	r2, r2, #1
   13464:	eor	r2, r2, #1
   13468:	ldr	r1, [sp, #32]
   1346c:	orr	r2, r1, r2
   13470:	tst	r2, #255	; 0xff
   13474:	beq	134a0 <__assert_fail@plt+0x25dc>
   13478:	ldr	r2, [sp, #160]	; 0xa0
   1347c:	cmp	r2, #0
   13480:	beq	134a0 <__assert_fail@plt+0x25dc>
   13484:	ubfx	r1, r4, #5, #8
   13488:	and	r2, r4, #31
   1348c:	ldr	r0, [sp, #160]	; 0xa0
   13490:	ldr	r1, [r0, r1, lsl #2]
   13494:	lsr	r2, r1, r2
   13498:	tst	r2, #1
   1349c:	bne	134ac <__assert_fail@plt+0x25e8>
   134a0:	ldr	r2, [sp, #44]	; 0x2c
   134a4:	cmp	r2, #0
   134a8:	beq	13800 <__assert_fail@plt+0x293c>
   134ac:	ldr	r3, [sp, #32]
   134b0:	cmp	r3, #0
   134b4:	bne	14000 <__assert_fail@plt+0x313c>
   134b8:	ldr	r3, [sp, #36]	; 0x24
   134bc:	eor	r3, r3, #1
   134c0:	cmp	sl, #2
   134c4:	movne	r3, #0
   134c8:	andeq	r3, r3, #1
   134cc:	cmp	r3, #0
   134d0:	beq	13508 <__assert_fail@plt+0x2644>
   134d4:	cmp	r9, fp
   134d8:	movhi	r2, #39	; 0x27
   134dc:	strbhi	r2, [r8, fp]
   134e0:	add	r2, fp, #1
   134e4:	cmp	r9, r2
   134e8:	movhi	r1, #36	; 0x24
   134ec:	strbhi	r1, [r8, r2]
   134f0:	add	r2, fp, #2
   134f4:	cmp	r9, r2
   134f8:	movhi	r1, #39	; 0x27
   134fc:	strbhi	r1, [r8, r2]
   13500:	add	fp, fp, #3
   13504:	str	r3, [sp, #36]	; 0x24
   13508:	cmp	r9, fp
   1350c:	movhi	r3, #92	; 0x5c
   13510:	strbhi	r3, [r8, fp]
   13514:	add	fp, fp, #1
   13518:	cmp	fp, r9
   1351c:	strbcc	r4, [r8, fp]
   13520:	add	fp, fp, #1
   13524:	cmp	r5, #0
   13528:	ldr	r3, [sp, #40]	; 0x28
   1352c:	moveq	r3, r5
   13530:	str	r3, [sp, #40]	; 0x28
   13534:	add	r6, r6, #1
   13538:	ldr	r3, [sp, #24]
   1353c:	cmn	r3, #1
   13540:	beq	13e70 <__assert_fail@plt+0x2fac>
   13544:	ldr	r3, [sp, #24]
   13548:	subs	r5, r3, r6
   1354c:	movne	r5, #1
   13550:	cmp	r5, #0
   13554:	beq	13e84 <__assert_fail@plt+0x2fc0>
   13558:	ldr	r3, [sp, #28]
   1355c:	cmp	sl, #2
   13560:	moveq	r3, #0
   13564:	andne	r3, r3, #1
   13568:	str	r3, [sp, #56]	; 0x38
   1356c:	ldr	r2, [sp, #52]	; 0x34
   13570:	adds	r7, r2, #0
   13574:	movne	r7, #1
   13578:	ands	r3, r3, r7
   1357c:	str	r3, [sp, #44]	; 0x2c
   13580:	bne	12ea0 <__assert_fail@plt+0x1fdc>
   13584:	ldr	r3, [sp, #48]	; 0x30
   13588:	ldrb	r4, [r3, r6]
   1358c:	cmp	r4, #126	; 0x7e
   13590:	ldrls	pc, [pc, r4, lsl #2]
   13594:	b	139cc <__assert_fail@plt+0x2b08>
   13598:	andeq	r3, r1, r4, lsr #2
   1359c:	andeq	r3, r1, ip, asr #19
   135a0:	andeq	r3, r1, ip, asr #19
   135a4:	andeq	r3, r1, ip, asr #19
   135a8:	andeq	r3, r1, ip, asr #19
   135ac:	andeq	r3, r1, ip, asr #19
   135b0:	andeq	r3, r1, ip, asr #19
   135b4:	andeq	r3, r1, ip, ror #16
   135b8:	strdeq	r3, [r1], -r8
   135bc:	muleq	r1, ip, r7
   135c0:	andeq	r3, r1, r0, asr #16
   135c4:			; <UNDEFINED> instruction: 0x000137b0
   135c8:	andeq	r3, r1, ip, lsl #8
   135cc:	andeq	r3, r1, r0, lsr #8
   135d0:	andeq	r3, r1, ip, asr #19
   135d4:	andeq	r3, r1, ip, asr #19
   135d8:	andeq	r3, r1, ip, asr #19
   135dc:	andeq	r3, r1, ip, asr #19
   135e0:	andeq	r3, r1, ip, asr #19
   135e4:	andeq	r3, r1, ip, asr #19
   135e8:	andeq	r3, r1, ip, asr #19
   135ec:	andeq	r3, r1, ip, asr #19
   135f0:	andeq	r3, r1, ip, asr #19
   135f4:	andeq	r3, r1, ip, asr #19
   135f8:	andeq	r3, r1, ip, asr #19
   135fc:	andeq	r3, r1, ip, asr #19
   13600:	andeq	r3, r1, ip, asr #19
   13604:	andeq	r3, r1, ip, asr #19
   13608:	andeq	r3, r1, ip, asr #19
   1360c:	andeq	r3, r1, ip, asr #19
   13610:	andeq	r3, r1, ip, asr #19
   13614:	andeq	r3, r1, ip, asr #19
   13618:	andeq	r3, r1, r8, ror #17
   1361c:	andeq	r3, r1, r4, ror #17
   13620:	andeq	r3, r1, r4, ror #17
   13624:	andeq	r3, r1, r4, lsr #17
   13628:	andeq	r3, r1, r4, ror #17
   1362c:	andeq	r3, r1, ip, ror #27
   13630:	andeq	r3, r1, r4, ror #17
   13634:	andeq	r3, r1, ip, lsr #18
   13638:	andeq	r3, r1, r4, ror #17
   1363c:	andeq	r3, r1, r4, ror #17
   13640:	andeq	r3, r1, r4, ror #17
   13644:	andeq	r3, r1, ip, ror #27
   13648:	andeq	r3, r1, ip, ror #27
   1364c:	andeq	r3, r1, ip, ror #27
   13650:	andeq	r3, r1, ip, ror #27
   13654:	andeq	r3, r1, ip, ror #27
   13658:	andeq	r3, r1, ip, ror #27
   1365c:	andeq	r3, r1, ip, ror #27
   13660:	andeq	r3, r1, ip, ror #27
   13664:	andeq	r3, r1, ip, ror #27
   13668:	andeq	r3, r1, ip, ror #27
   1366c:	andeq	r3, r1, ip, ror #27
   13670:	andeq	r3, r1, ip, ror #27
   13674:	andeq	r3, r1, ip, ror #27
   13678:	andeq	r3, r1, ip, ror #27
   1367c:	andeq	r3, r1, ip, ror #27
   13680:	andeq	r3, r1, ip, ror #27
   13684:	andeq	r3, r1, r4, ror #17
   13688:	andeq	r3, r1, r4, ror #17
   1368c:	andeq	r3, r1, r4, ror #17
   13690:	andeq	r3, r1, r4, ror #17
   13694:	andeq	r3, r1, ip, lsl #5
   13698:	andeq	r3, r1, ip, asr #19
   1369c:	andeq	r3, r1, ip, ror #27
   136a0:	andeq	r3, r1, ip, ror #27
   136a4:	andeq	r3, r1, ip, ror #27
   136a8:	andeq	r3, r1, ip, ror #27
   136ac:	andeq	r3, r1, ip, ror #27
   136b0:	andeq	r3, r1, ip, ror #27
   136b4:	andeq	r3, r1, ip, ror #27
   136b8:	andeq	r3, r1, ip, ror #27
   136bc:	andeq	r3, r1, ip, ror #27
   136c0:	andeq	r3, r1, ip, ror #27
   136c4:	andeq	r3, r1, ip, ror #27
   136c8:	andeq	r3, r1, ip, ror #27
   136cc:	andeq	r3, r1, ip, ror #27
   136d0:	andeq	r3, r1, ip, ror #27
   136d4:	andeq	r3, r1, ip, ror #27
   136d8:	andeq	r3, r1, ip, ror #27
   136dc:	andeq	r3, r1, ip, ror #27
   136e0:	andeq	r3, r1, ip, ror #27
   136e4:	andeq	r3, r1, ip, ror #27
   136e8:	andeq	r3, r1, ip, ror #27
   136ec:	andeq	r3, r1, ip, ror #27
   136f0:	andeq	r3, r1, ip, ror #27
   136f4:	andeq	r3, r1, ip, ror #27
   136f8:	andeq	r3, r1, ip, ror #27
   136fc:	andeq	r3, r1, ip, ror #27
   13700:	andeq	r3, r1, ip, ror #27
   13704:	andeq	r3, r1, r4, ror #17
   13708:	andeq	r3, r1, r4, asr #15
   1370c:	andeq	r3, r1, ip, ror #27
   13710:	andeq	r3, r1, r4, ror #17
   13714:	andeq	r3, r1, ip, ror #27
   13718:	andeq	r3, r1, r4, ror #17
   1371c:	andeq	r3, r1, ip, ror #27
   13720:	andeq	r3, r1, ip, ror #27
   13724:	andeq	r3, r1, ip, ror #27
   13728:	andeq	r3, r1, ip, ror #27
   1372c:	andeq	r3, r1, ip, ror #27
   13730:	andeq	r3, r1, ip, ror #27
   13734:	andeq	r3, r1, ip, ror #27
   13738:	andeq	r3, r1, ip, ror #27
   1373c:	andeq	r3, r1, ip, ror #27
   13740:	andeq	r3, r1, ip, ror #27
   13744:	andeq	r3, r1, ip, ror #27
   13748:	andeq	r3, r1, ip, ror #27
   1374c:	andeq	r3, r1, ip, ror #27
   13750:	andeq	r3, r1, ip, ror #27
   13754:	andeq	r3, r1, ip, ror #27
   13758:	andeq	r3, r1, ip, ror #27
   1375c:	andeq	r3, r1, ip, ror #27
   13760:	andeq	r3, r1, ip, ror #27
   13764:	andeq	r3, r1, ip, ror #27
   13768:	andeq	r3, r1, ip, ror #27
   1376c:	andeq	r3, r1, ip, ror #27
   13770:	andeq	r3, r1, ip, ror #27
   13774:	andeq	r3, r1, ip, ror #27
   13778:	andeq	r3, r1, ip, ror #27
   1377c:	andeq	r3, r1, ip, ror #27
   13780:	andeq	r3, r1, ip, ror #27
   13784:	andeq	r3, r1, r4, lsl #17
   13788:	andeq	r3, r1, r4, ror #17
   1378c:	andeq	r3, r1, r4, lsl #17
   13790:	andeq	r3, r1, r4, lsr #17
   13794:	mov	r3, #0
   13798:	str	r3, [sp, #44]	; 0x2c
   1379c:	mov	r4, #9
   137a0:	mov	r3, #116	; 0x74
   137a4:	b	13428 <__assert_fail@plt+0x2564>
   137a8:	mov	r3, #0
   137ac:	str	r3, [sp, #44]	; 0x2c
   137b0:	mov	r4, #11
   137b4:	mov	r3, #118	; 0x76
   137b8:	b	13440 <__assert_fail@plt+0x257c>
   137bc:	mov	r3, #0
   137c0:	str	r3, [sp, #44]	; 0x2c
   137c4:	cmp	sl, #2
   137c8:	beq	137ec <__assert_fail@plt+0x2928>
   137cc:	ldr	r3, [sp, #28]
   137d0:	ldr	r2, [sp, #32]
   137d4:	and	r3, r3, r2
   137d8:	tst	r7, r3
   137dc:	bne	13e60 <__assert_fail@plt+0x2f9c>
   137e0:	mov	r4, #92	; 0x5c
   137e4:	mov	r3, r4
   137e8:	b	13440 <__assert_fail@plt+0x257c>
   137ec:	ldr	r3, [sp, #32]
   137f0:	cmp	r3, #0
   137f4:	bne	13fe8 <__assert_fail@plt+0x3124>
   137f8:	mov	r5, r3
   137fc:	mov	r4, #92	; 0x5c
   13800:	eor	r3, r3, #1
   13804:	ldr	r2, [sp, #36]	; 0x24
   13808:	and	r3, r3, r2
   1380c:	tst	r3, #255	; 0xff
   13810:	beq	13518 <__assert_fail@plt+0x2654>
   13814:	cmp	r9, fp
   13818:	movhi	r3, #39	; 0x27
   1381c:	strbhi	r3, [r8, fp]
   13820:	add	r3, fp, #1
   13824:	cmp	r9, r3
   13828:	movhi	r2, #39	; 0x27
   1382c:	strbhi	r2, [r8, r3]
   13830:	add	fp, fp, #2
   13834:	mov	r3, #0
   13838:	str	r3, [sp, #36]	; 0x24
   1383c:	b	13518 <__assert_fail@plt+0x2654>
   13840:	mov	r3, #110	; 0x6e
   13844:	b	13428 <__assert_fail@plt+0x2564>
   13848:	mov	r3, #110	; 0x6e
   1384c:	b	13428 <__assert_fail@plt+0x2564>
   13850:	mov	r3, #0
   13854:	str	r3, [sp, #44]	; 0x2c
   13858:	mov	r3, #110	; 0x6e
   1385c:	b	13428 <__assert_fail@plt+0x2564>
   13860:	mov	r8, r9
   13864:	mov	r7, #2
   13868:	b	14008 <__assert_fail@plt+0x3144>
   1386c:	mov	r3, #97	; 0x61
   13870:	b	13440 <__assert_fail@plt+0x257c>
   13874:	mov	r3, #97	; 0x61
   13878:	b	13440 <__assert_fail@plt+0x257c>
   1387c:	mov	r3, #0
   13880:	str	r3, [sp, #44]	; 0x2c
   13884:	ldr	r3, [sp, #24]
   13888:	cmn	r3, #1
   1388c:	beq	138b8 <__assert_fail@plt+0x29f4>
   13890:	ldr	r3, [sp, #24]
   13894:	subs	r3, r3, #1
   13898:	movne	r3, #1
   1389c:	cmp	r3, #0
   138a0:	bne	13e20 <__assert_fail@plt+0x2f5c>
   138a4:	cmp	r6, #0
   138a8:	beq	138e8 <__assert_fail@plt+0x2a24>
   138ac:	mov	r5, #0
   138b0:	mov	r3, r5
   138b4:	b	13454 <__assert_fail@plt+0x2590>
   138b8:	ldr	r3, [sp, #48]	; 0x30
   138bc:	ldrb	r3, [r3, #1]
   138c0:	adds	r3, r3, #0
   138c4:	movne	r3, #1
   138c8:	b	1389c <__assert_fail@plt+0x29d8>
   138cc:	mov	r3, #0
   138d0:	str	r3, [sp, #44]	; 0x2c
   138d4:	b	138a4 <__assert_fail@plt+0x29e0>
   138d8:	mov	r3, #0
   138dc:	str	r3, [sp, #44]	; 0x2c
   138e0:	b	138e8 <__assert_fail@plt+0x2a24>
   138e4:	ldr	r5, [sp, #44]	; 0x2c
   138e8:	ldr	r3, [sp, #32]
   138ec:	cmp	sl, #2
   138f0:	movne	r3, #0
   138f4:	andeq	r3, r3, #1
   138f8:	cmp	r3, #0
   138fc:	beq	13454 <__assert_fail@plt+0x2590>
   13900:	mov	r8, r9
   13904:	mov	r7, #2
   13908:	b	14008 <__assert_fail@plt+0x3144>
   1390c:	ldr	r5, [sp, #32]
   13910:	b	138e8 <__assert_fail@plt+0x2a24>
   13914:	mov	r3, #0
   13918:	str	r3, [sp, #44]	; 0x2c
   1391c:	mov	r5, r3
   13920:	b	138e8 <__assert_fail@plt+0x2a24>
   13924:	mov	r3, #0
   13928:	str	r3, [sp, #44]	; 0x2c
   1392c:	cmp	sl, #2
   13930:	strne	r5, [sp, #68]	; 0x44
   13934:	movne	r3, #0
   13938:	movne	r4, #39	; 0x27
   1393c:	bne	13454 <__assert_fail@plt+0x2590>
   13940:	ldr	r3, [sp, #32]
   13944:	cmp	r3, #0
   13948:	bne	13ff4 <__assert_fail@plt+0x3130>
   1394c:	ldr	r3, [sp, #72]	; 0x48
   13950:	clz	r3, r3
   13954:	lsr	r3, r3, #5
   13958:	cmp	r9, #0
   1395c:	moveq	r3, #0
   13960:	cmp	r3, #0
   13964:	movne	r3, #0
   13968:	bne	13990 <__assert_fail@plt+0x2acc>
   1396c:	cmp	r9, fp
   13970:	movhi	r3, #39	; 0x27
   13974:	strbhi	r3, [r8, fp]
   13978:	add	r3, fp, #1
   1397c:	cmp	r9, r3
   13980:	movhi	r2, #92	; 0x5c
   13984:	strbhi	r2, [r8, r3]
   13988:	mov	r3, r9
   1398c:	ldr	r9, [sp, #72]	; 0x48
   13990:	add	r2, fp, #2
   13994:	cmp	r2, r3
   13998:	movcc	r1, #39	; 0x27
   1399c:	strbcc	r1, [r8, r2]
   139a0:	add	fp, fp, #3
   139a4:	str	r5, [sp, #68]	; 0x44
   139a8:	ldr	r2, [sp, #32]
   139ac:	str	r2, [sp, #36]	; 0x24
   139b0:	str	r9, [sp, #72]	; 0x48
   139b4:	mov	r9, r3
   139b8:	mov	r4, #39	; 0x27
   139bc:	mov	r3, #0
   139c0:	b	134a0 <__assert_fail@plt+0x25dc>
   139c4:	mov	r3, #0
   139c8:	str	r3, [sp, #44]	; 0x2c
   139cc:	ldr	r7, [sp, #76]	; 0x4c
   139d0:	cmp	r7, #1
   139d4:	bne	13a0c <__assert_fail@plt+0x2b48>
   139d8:	bl	10dbc <__ctype_b_loc@plt>
   139dc:	ldr	r2, [r0]
   139e0:	lsl	r3, r4, #1
   139e4:	ldrh	r5, [r2, r3]
   139e8:	ubfx	r5, r5, #14, #1
   139ec:	mov	ip, r7
   139f0:	eor	r3, r5, #1
   139f4:	ldr	r2, [sp, #28]
   139f8:	and	r3, r3, r2
   139fc:	ands	r3, r3, #255	; 0xff
   13a00:	beq	13454 <__assert_fail@plt+0x2590>
   13a04:	mov	r5, #0
   13a08:	b	13c68 <__assert_fail@plt+0x2da4>
   13a0c:	mov	r2, #0
   13a10:	mov	r3, #0
   13a14:	strd	r2, [sp, #104]	; 0x68
   13a18:	ldr	r3, [sp, #24]
   13a1c:	cmn	r3, #1
   13a20:	beq	13a44 <__assert_fail@plt+0x2b80>
   13a24:	mov	r3, #0
   13a28:	str	r4, [sp, #88]	; 0x58
   13a2c:	str	fp, [sp, #92]	; 0x5c
   13a30:	str	r8, [sp, #56]	; 0x38
   13a34:	mov	r8, r3
   13a38:	str	r9, [sp, #84]	; 0x54
   13a3c:	ldr	r9, [sp, #48]	; 0x30
   13a40:	b	13b90 <__assert_fail@plt+0x2ccc>
   13a44:	ldr	r0, [sp, #48]	; 0x30
   13a48:	bl	10dd4 <strlen@plt>
   13a4c:	str	r0, [sp, #24]
   13a50:	b	13a24 <__assert_fail@plt+0x2b60>
   13a54:	mov	r1, fp
   13a58:	ldr	r4, [sp, #88]	; 0x58
   13a5c:	mov	r2, r8
   13a60:	mov	ip, r8
   13a64:	ldr	fp, [sp, #92]	; 0x5c
   13a68:	ldr	r8, [sp, #56]	; 0x38
   13a6c:	ldr	r9, [sp, #84]	; 0x54
   13a70:	ldr	r0, [sp, #24]
   13a74:	cmp	r7, r0
   13a78:	bcs	13c30 <__assert_fail@plt+0x2d6c>
   13a7c:	ldrb	r3, [r1]
   13a80:	cmp	r3, #0
   13a84:	beq	13c38 <__assert_fail@plt+0x2d74>
   13a88:	mov	r3, r1
   13a8c:	add	r2, r2, #1
   13a90:	add	r1, r6, r2
   13a94:	cmp	r0, r1
   13a98:	bls	13c40 <__assert_fail@plt+0x2d7c>
   13a9c:	ldrb	r1, [r3, #1]!
   13aa0:	cmp	r1, #0
   13aa4:	bne	13a8c <__assert_fail@plt+0x2bc8>
   13aa8:	mov	ip, r2
   13aac:	mov	r5, #0
   13ab0:	b	13c60 <__assert_fail@plt+0x2d9c>
   13ab4:	ldr	r3, [sp, #56]	; 0x38
   13ab8:	str	r3, [sp, #64]	; 0x40
   13abc:	ldr	r8, [sp, #84]	; 0x54
   13ac0:	mov	r7, #2
   13ac4:	b	14008 <__assert_fail@plt+0x3144>
   13ac8:	cmp	r2, r7
   13acc:	beq	13b6c <__assert_fail@plt+0x2ca8>
   13ad0:	ldrb	r3, [r2], #1
   13ad4:	sub	r3, r3, #91	; 0x5b
   13ad8:	cmp	r3, #33	; 0x21
   13adc:	ldrls	pc, [pc, r3, lsl #2]
   13ae0:	b	13ac8 <__assert_fail@plt+0x2c04>
   13ae4:			; <UNDEFINED> instruction: 0x00013ab4
   13ae8:			; <UNDEFINED> instruction: 0x00013ab4
   13aec:	andeq	r3, r1, r8, asr #21
   13af0:			; <UNDEFINED> instruction: 0x00013ab4
   13af4:	andeq	r3, r1, r8, asr #21
   13af8:			; <UNDEFINED> instruction: 0x00013ab4
   13afc:	andeq	r3, r1, r8, asr #21
   13b00:	andeq	r3, r1, r8, asr #21
   13b04:	andeq	r3, r1, r8, asr #21
   13b08:	andeq	r3, r1, r8, asr #21
   13b0c:	andeq	r3, r1, r8, asr #21
   13b10:	andeq	r3, r1, r8, asr #21
   13b14:	andeq	r3, r1, r8, asr #21
   13b18:	andeq	r3, r1, r8, asr #21
   13b1c:	andeq	r3, r1, r8, asr #21
   13b20:	andeq	r3, r1, r8, asr #21
   13b24:	andeq	r3, r1, r8, asr #21
   13b28:	andeq	r3, r1, r8, asr #21
   13b2c:	andeq	r3, r1, r8, asr #21
   13b30:	andeq	r3, r1, r8, asr #21
   13b34:	andeq	r3, r1, r8, asr #21
   13b38:	andeq	r3, r1, r8, asr #21
   13b3c:	andeq	r3, r1, r8, asr #21
   13b40:	andeq	r3, r1, r8, asr #21
   13b44:	andeq	r3, r1, r8, asr #21
   13b48:	andeq	r3, r1, r8, asr #21
   13b4c:	andeq	r3, r1, r8, asr #21
   13b50:	andeq	r3, r1, r8, asr #21
   13b54:	andeq	r3, r1, r8, asr #21
   13b58:	andeq	r3, r1, r8, asr #21
   13b5c:	andeq	r3, r1, r8, asr #21
   13b60:	andeq	r3, r1, r8, asr #21
   13b64:	andeq	r3, r1, r8, asr #21
   13b68:			; <UNDEFINED> instruction: 0x00013ab4
   13b6c:	ldr	r0, [sp, #100]	; 0x64
   13b70:	bl	10d2c <iswprint@plt>
   13b74:	cmp	r0, #0
   13b78:	moveq	r5, #0
   13b7c:	add	r8, r8, r4
   13b80:	add	r0, sp, #104	; 0x68
   13b84:	bl	10cd8 <mbsinit@plt>
   13b88:	cmp	r0, #0
   13b8c:	bne	13bfc <__assert_fail@plt+0x2d38>
   13b90:	add	r7, r6, r8
   13b94:	add	fp, r9, r7
   13b98:	add	r3, sp, #104	; 0x68
   13b9c:	ldr	r2, [sp, #24]
   13ba0:	sub	r2, r2, r7
   13ba4:	mov	r1, fp
   13ba8:	add	r0, sp, #100	; 0x64
   13bac:	bl	15900 <__assert_fail@plt+0x4a3c>
   13bb0:	subs	r4, r0, #0
   13bb4:	beq	13c4c <__assert_fail@plt+0x2d88>
   13bb8:	cmn	r4, #1
   13bbc:	beq	13c14 <__assert_fail@plt+0x2d50>
   13bc0:	cmn	r4, #2
   13bc4:	beq	13a54 <__assert_fail@plt+0x2b90>
   13bc8:	ldr	r3, [sp, #32]
   13bcc:	cmp	sl, #2
   13bd0:	movne	r3, #0
   13bd4:	andeq	r3, r3, #1
   13bd8:	cmp	r3, #0
   13bdc:	beq	13b6c <__assert_fail@plt+0x2ca8>
   13be0:	cmp	r4, #1
   13be4:	bls	13b6c <__assert_fail@plt+0x2ca8>
   13be8:	add	r2, r7, #1
   13bec:	add	r2, r9, r2
   13bf0:	add	r3, r9, r4
   13bf4:	add	r7, r3, r7
   13bf8:	b	13ad0 <__assert_fail@plt+0x2c0c>
   13bfc:	ldr	r4, [sp, #88]	; 0x58
   13c00:	mov	ip, r8
   13c04:	ldr	fp, [sp, #92]	; 0x5c
   13c08:	ldr	r8, [sp, #56]	; 0x38
   13c0c:	ldr	r9, [sp, #84]	; 0x54
   13c10:	b	13c60 <__assert_fail@plt+0x2d9c>
   13c14:	ldr	r4, [sp, #88]	; 0x58
   13c18:	mov	ip, r8
   13c1c:	ldr	fp, [sp, #92]	; 0x5c
   13c20:	ldr	r8, [sp, #56]	; 0x38
   13c24:	ldr	r9, [sp, #84]	; 0x54
   13c28:	mov	r5, #0
   13c2c:	b	13c60 <__assert_fail@plt+0x2d9c>
   13c30:	mov	r5, #0
   13c34:	b	13c60 <__assert_fail@plt+0x2d9c>
   13c38:	mov	r5, #0
   13c3c:	b	13c60 <__assert_fail@plt+0x2d9c>
   13c40:	mov	ip, r2
   13c44:	mov	r5, #0
   13c48:	b	13c60 <__assert_fail@plt+0x2d9c>
   13c4c:	ldr	r4, [sp, #88]	; 0x58
   13c50:	mov	ip, r8
   13c54:	ldr	fp, [sp, #92]	; 0x5c
   13c58:	ldr	r8, [sp, #56]	; 0x38
   13c5c:	ldr	r9, [sp, #84]	; 0x54
   13c60:	cmp	ip, #1
   13c64:	bls	139f0 <__assert_fail@plt+0x2b2c>
   13c68:	add	lr, r6, ip
   13c6c:	ldr	r3, [sp, #48]	; 0x30
   13c70:	add	r1, r3, r6
   13c74:	mov	r3, #0
   13c78:	eor	r0, r5, #1
   13c7c:	ldr	r2, [sp, #28]
   13c80:	and	r0, r0, r2
   13c84:	uxtb	r0, r0
   13c88:	str	r0, [sp, #56]	; 0x38
   13c8c:	mov	r7, #92	; 0x5c
   13c90:	ldr	ip, [sp, #36]	; 0x24
   13c94:	str	r5, [sp, #84]	; 0x54
   13c98:	ldr	r2, [sp, #44]	; 0x2c
   13c9c:	b	13d0c <__assert_fail@plt+0x2e48>
   13ca0:	cmp	r2, #0
   13ca4:	beq	13cb4 <__assert_fail@plt+0x2df0>
   13ca8:	cmp	r9, fp
   13cac:	strbhi	r7, [r8, fp]
   13cb0:	add	fp, fp, #1
   13cb4:	add	r5, r6, #1
   13cb8:	cmp	r5, lr
   13cbc:	bcs	13dc8 <__assert_fail@plt+0x2f04>
   13cc0:	eor	r2, r3, #1
   13cc4:	and	r2, r2, ip
   13cc8:	ands	r2, r2, #255	; 0xff
   13ccc:	beq	13de4 <__assert_fail@plt+0x2f20>
   13cd0:	cmp	r9, fp
   13cd4:	movhi	r2, #39	; 0x27
   13cd8:	strbhi	r2, [r8, fp]
   13cdc:	add	r2, fp, #1
   13ce0:	cmp	r9, r2
   13ce4:	movhi	ip, #39	; 0x27
   13ce8:	strbhi	ip, [r8, r2]
   13cec:	add	fp, fp, #2
   13cf0:	ldr	ip, [sp, #56]	; 0x38
   13cf4:	mov	r2, ip
   13cf8:	mov	r6, r5
   13cfc:	cmp	r9, fp
   13d00:	strbhi	r4, [r8, fp]
   13d04:	add	fp, fp, #1
   13d08:	ldrb	r4, [r1, #1]!
   13d0c:	cmp	r0, #0
   13d10:	beq	13ca0 <__assert_fail@plt+0x2ddc>
   13d14:	ldr	r3, [sp, #32]
   13d18:	cmp	r3, #0
   13d1c:	bne	13fb0 <__assert_fail@plt+0x30ec>
   13d20:	eor	r3, ip, #1
   13d24:	cmp	sl, #2
   13d28:	movne	r3, #0
   13d2c:	andeq	r3, r3, #1
   13d30:	cmp	r3, #0
   13d34:	beq	13d6c <__assert_fail@plt+0x2ea8>
   13d38:	cmp	r9, fp
   13d3c:	movhi	ip, #39	; 0x27
   13d40:	strbhi	ip, [r8, fp]
   13d44:	add	ip, fp, #1
   13d48:	cmp	r9, ip
   13d4c:	movhi	r5, #36	; 0x24
   13d50:	strbhi	r5, [r8, ip]
   13d54:	add	ip, fp, #2
   13d58:	cmp	r9, ip
   13d5c:	movhi	r5, #39	; 0x27
   13d60:	strbhi	r5, [r8, ip]
   13d64:	add	fp, fp, #3
   13d68:	mov	ip, r3
   13d6c:	cmp	r9, fp
   13d70:	strbhi	r7, [r8, fp]
   13d74:	add	r3, fp, #1
   13d78:	cmp	r9, r3
   13d7c:	bls	13d8c <__assert_fail@plt+0x2ec8>
   13d80:	lsr	r5, r4, #6
   13d84:	add	r5, r5, #48	; 0x30
   13d88:	strb	r5, [r8, r3]
   13d8c:	add	r3, fp, #2
   13d90:	cmp	r9, r3
   13d94:	bls	13da4 <__assert_fail@plt+0x2ee0>
   13d98:	ubfx	r5, r4, #3, #3
   13d9c:	add	r5, r5, #48	; 0x30
   13da0:	strb	r5, [r8, r3]
   13da4:	add	fp, fp, #3
   13da8:	and	r4, r4, #7
   13dac:	add	r4, r4, #48	; 0x30
   13db0:	add	r5, r6, #1
   13db4:	cmp	r5, lr
   13db8:	bcs	13dd4 <__assert_fail@plt+0x2f10>
   13dbc:	ldr	r3, [sp, #56]	; 0x38
   13dc0:	mov	r6, r5
   13dc4:	b	13cfc <__assert_fail@plt+0x2e38>
   13dc8:	str	ip, [sp, #36]	; 0x24
   13dcc:	ldr	r5, [sp, #84]	; 0x54
   13dd0:	b	13800 <__assert_fail@plt+0x293c>
   13dd4:	str	ip, [sp, #36]	; 0x24
   13dd8:	ldr	r5, [sp, #84]	; 0x54
   13ddc:	mov	r3, r0
   13de0:	b	13800 <__assert_fail@plt+0x293c>
   13de4:	mov	r6, r5
   13de8:	b	13cfc <__assert_fail@plt+0x2e38>
   13dec:	ldr	r3, [sp, #44]	; 0x2c
   13df0:	b	13454 <__assert_fail@plt+0x2590>
   13df4:	mov	r5, #0
   13df8:	mov	r3, r5
   13dfc:	mov	r4, #63	; 0x3f
   13e00:	b	13454 <__assert_fail@plt+0x2590>
   13e04:	mov	r5, #0
   13e08:	mov	r3, r5
   13e0c:	mov	r4, #63	; 0x3f
   13e10:	b	13454 <__assert_fail@plt+0x2590>
   13e14:	mov	r5, #0
   13e18:	mov	r3, r5
   13e1c:	b	13454 <__assert_fail@plt+0x2590>
   13e20:	mov	r5, #0
   13e24:	mov	r3, r5
   13e28:	b	13454 <__assert_fail@plt+0x2590>
   13e2c:	ldr	r5, [sp, #44]	; 0x2c
   13e30:	ldr	r3, [sp, #32]
   13e34:	b	13454 <__assert_fail@plt+0x2590>
   13e38:	ldr	r5, [sp, #44]	; 0x2c
   13e3c:	mov	r3, #0
   13e40:	str	r3, [sp, #44]	; 0x2c
   13e44:	b	13454 <__assert_fail@plt+0x2590>
   13e48:	mov	r4, r3
   13e4c:	mov	r5, #0
   13e50:	b	134ac <__assert_fail@plt+0x25e8>
   13e54:	mov	r5, #0
   13e58:	mov	r4, #97	; 0x61
   13e5c:	b	134ac <__assert_fail@plt+0x25e8>
   13e60:	mov	r5, #0
   13e64:	mov	r3, r5
   13e68:	mov	r4, #92	; 0x5c
   13e6c:	b	13800 <__assert_fail@plt+0x293c>
   13e70:	ldr	r3, [sp, #48]	; 0x30
   13e74:	ldrb	r5, [r3, r6]
   13e78:	adds	r5, r5, #0
   13e7c:	movne	r5, #1
   13e80:	b	13550 <__assert_fail@plt+0x268c>
   13e84:	cmp	sl, #2
   13e88:	movne	r3, #0
   13e8c:	moveq	r3, #1
   13e90:	ldr	r1, [sp, #32]
   13e94:	cmp	fp, #0
   13e98:	andeq	r2, r3, r1
   13e9c:	movne	r2, #0
   13ea0:	cmp	r2, #0
   13ea4:	bne	13fc4 <__assert_fail@plt+0x3100>
   13ea8:	eor	r2, r1, #1
   13eac:	uxtb	r2, r2
   13eb0:	and	r3, r3, r2
   13eb4:	ldr	r1, [sp, #68]	; 0x44
   13eb8:	ands	r3, r1, r3
   13ebc:	beq	13f50 <__assert_fail@plt+0x308c>
   13ec0:	ldr	r2, [sp, #40]	; 0x28
   13ec4:	cmp	r2, #0
   13ec8:	bne	13f00 <__assert_fail@plt+0x303c>
   13ecc:	ldr	r2, [sp, #72]	; 0x48
   13ed0:	adds	r2, r2, #0
   13ed4:	movne	r2, #1
   13ed8:	cmp	r9, #0
   13edc:	movne	r2, #0
   13ee0:	str	r2, [sp, #68]	; 0x44
   13ee4:	mov	sl, #2
   13ee8:	ldr	r1, [sp, #40]	; 0x28
   13eec:	str	r1, [sp, #32]
   13ef0:	cmp	r2, #0
   13ef4:	beq	13f44 <__assert_fail@plt+0x3080>
   13ef8:	ldr	r9, [sp, #72]	; 0x48
   13efc:	b	12c58 <__assert_fail@plt+0x1d94>
   13f00:	ldr	r3, [sp, #168]	; 0xa8
   13f04:	str	r3, [sp, #16]
   13f08:	ldr	r3, [sp, #164]	; 0xa4
   13f0c:	str	r3, [sp, #12]
   13f10:	ldr	r3, [sp, #160]	; 0xa0
   13f14:	str	r3, [sp, #8]
   13f18:	ldr	r3, [sp, #156]	; 0x9c
   13f1c:	str	r3, [sp, #4]
   13f20:	mov	r3, #5
   13f24:	str	r3, [sp]
   13f28:	ldr	r3, [sp, #24]
   13f2c:	ldr	r2, [sp, #48]	; 0x30
   13f30:	ldr	r1, [sp, #72]	; 0x48
   13f34:	ldr	r0, [sp, #64]	; 0x40
   13f38:	bl	12be0 <__assert_fail@plt+0x1d1c>
   13f3c:	mov	fp, r0
   13f40:	b	14060 <__assert_fail@plt+0x319c>
   13f44:	mov	r8, r9
   13f48:	mov	r2, r3
   13f4c:	b	13f54 <__assert_fail@plt+0x3090>
   13f50:	mov	r8, r9
   13f54:	ldr	r3, [sp, #60]	; 0x3c
   13f58:	cmp	r3, #0
   13f5c:	moveq	r2, #0
   13f60:	andne	r2, r2, #1
   13f64:	cmp	r2, #0
   13f68:	beq	13f98 <__assert_fail@plt+0x30d4>
   13f6c:	mov	r2, r3
   13f70:	ldrb	r3, [r3]
   13f74:	cmp	r3, #0
   13f78:	beq	13f98 <__assert_fail@plt+0x30d4>
   13f7c:	ldr	r1, [sp, #64]	; 0x40
   13f80:	cmp	r8, fp
   13f84:	strbhi	r3, [r1, fp]
   13f88:	add	fp, fp, #1
   13f8c:	ldrb	r3, [r2, #1]!
   13f90:	cmp	r3, #0
   13f94:	bne	13f80 <__assert_fail@plt+0x30bc>
   13f98:	cmp	r8, fp
   13f9c:	bls	14060 <__assert_fail@plt+0x319c>
   13fa0:	mov	r3, #0
   13fa4:	ldr	r2, [sp, #64]	; 0x40
   13fa8:	strb	r3, [r2, fp]
   13fac:	b	14060 <__assert_fail@plt+0x319c>
   13fb0:	mov	r8, r9
   13fb4:	mov	r7, sl
   13fb8:	ldr	r3, [sp, #32]
   13fbc:	str	r3, [sp, #28]
   13fc0:	b	14008 <__assert_fail@plt+0x3144>
   13fc4:	mov	r8, r9
   13fc8:	mov	r7, #2
   13fcc:	b	14008 <__assert_fail@plt+0x3144>
   13fd0:	mov	r8, r9
   13fd4:	mov	r7, sl
   13fd8:	b	14008 <__assert_fail@plt+0x3144>
   13fdc:	mov	r8, r9
   13fe0:	mov	r7, sl
   13fe4:	b	14008 <__assert_fail@plt+0x3144>
   13fe8:	mov	r8, r9
   13fec:	mov	r7, sl
   13ff0:	b	14008 <__assert_fail@plt+0x3144>
   13ff4:	mov	r8, r9
   13ff8:	mov	r7, sl
   13ffc:	b	14008 <__assert_fail@plt+0x3144>
   14000:	mov	r8, r9
   14004:	mov	r7, sl
   14008:	ldr	r3, [sp, #28]
   1400c:	cmp	r7, #2
   14010:	movne	r3, #0
   14014:	andeq	r3, r3, #1
   14018:	cmp	r3, #0
   1401c:	movne	r7, #4
   14020:	ldr	r3, [sp, #168]	; 0xa8
   14024:	str	r3, [sp, #16]
   14028:	ldr	r3, [sp, #164]	; 0xa4
   1402c:	str	r3, [sp, #12]
   14030:	mov	r3, #0
   14034:	str	r3, [sp, #8]
   14038:	ldr	r3, [sp, #156]	; 0x9c
   1403c:	bic	r3, r3, #2
   14040:	str	r3, [sp, #4]
   14044:	str	r7, [sp]
   14048:	ldr	r3, [sp, #24]
   1404c:	ldr	r2, [sp, #48]	; 0x30
   14050:	mov	r1, r8
   14054:	ldr	r0, [sp, #64]	; 0x40
   14058:	bl	12be0 <__assert_fail@plt+0x1d1c>
   1405c:	mov	fp, r0
   14060:	mov	r0, fp
   14064:	add	sp, sp, #116	; 0x74
   14068:	ldrd	r4, [sp]
   1406c:	ldrd	r6, [sp, #8]
   14070:	ldrd	r8, [sp, #16]
   14074:	ldrd	sl, [sp, #24]
   14078:	add	sp, sp, #32
   1407c:	pop	{pc}		; (ldr pc, [sp], #4)
   14080:	mov	r8, r9
   14084:	mov	r7, sl
   14088:	b	14020 <__assert_fail@plt+0x315c>
   1408c:	add	fp, fp, #4
   14090:	str	r3, [sp, #36]	; 0x24
   14094:	mov	r5, #0
   14098:	mov	r4, #48	; 0x30
   1409c:	b	13454 <__assert_fail@plt+0x2590>
   140a0:	mov	r3, #1
   140a4:	str	r3, [sp, #32]
   140a8:	str	r3, [sp, #28]
   140ac:	str	r3, [sp, #52]	; 0x34
   140b0:	movw	r3, #26072	; 0x65d8
   140b4:	movt	r3, #1
   140b8:	str	r3, [sp, #60]	; 0x3c
   140bc:	mov	fp, #0
   140c0:	mov	sl, #5
   140c4:	b	12cb8 <__assert_fail@plt+0x1df4>
   140c8:	ldr	r3, [sp, #48]	; 0x30
   140cc:	ldrb	r4, [r3, r6]
   140d0:	cmp	r4, #126	; 0x7e
   140d4:	ldrls	pc, [pc, r4, lsl #2]
   140d8:	b	139c4 <__assert_fail@plt+0x2b00>
   140dc:	andeq	r3, r1, ip, asr #2
   140e0:	andeq	r3, r1, r4, asr #19
   140e4:	andeq	r3, r1, r4, asr #19
   140e8:	andeq	r3, r1, r4, asr #19
   140ec:	andeq	r3, r1, r4, asr #19
   140f0:	andeq	r3, r1, r4, asr #19
   140f4:	andeq	r3, r1, r4, asr #19
   140f8:	andeq	r3, r1, r4, asr lr
   140fc:	strdeq	r3, [r1], -r0
   14100:	muleq	r1, r4, r7
   14104:	andeq	r3, r1, r0, asr r8
   14108:	andeq	r3, r1, r8, lsr #15
   1410c:	andeq	r3, r1, r4, lsl #8
   14110:	andeq	r3, r1, r8, lsl r4
   14114:	andeq	r3, r1, r4, asr #19
   14118:	andeq	r3, r1, r4, asr #19
   1411c:	andeq	r3, r1, r4, asr #19
   14120:	andeq	r3, r1, r4, asr #19
   14124:	andeq	r3, r1, r4, asr #19
   14128:	andeq	r3, r1, r4, asr #19
   1412c:	andeq	r3, r1, r4, asr #19
   14130:	andeq	r3, r1, r4, asr #19
   14134:	andeq	r3, r1, r4, asr #19
   14138:	andeq	r3, r1, r4, asr #19
   1413c:	andeq	r3, r1, r4, asr #19
   14140:	andeq	r3, r1, r4, asr #19
   14144:	andeq	r3, r1, r4, asr #19
   14148:	andeq	r3, r1, r4, asr #19
   1414c:	andeq	r3, r1, r4, asr #19
   14150:	andeq	r3, r1, r4, asr #19
   14154:	andeq	r3, r1, r4, asr #19
   14158:	andeq	r3, r1, r4, asr #19
   1415c:	ldrdeq	r3, [r1], -r8
   14160:	andeq	r3, r1, r4, lsl r9
   14164:	andeq	r3, r1, r4, lsl r9
   14168:	andeq	r3, r1, ip, asr #17
   1416c:	andeq	r3, r1, r4, lsl r9
   14170:	andeq	r3, r1, r8, lsr lr
   14174:	andeq	r3, r1, r4, lsl r9
   14178:	andeq	r3, r1, r4, lsr #18
   1417c:	andeq	r3, r1, r4, lsl r9
   14180:	andeq	r3, r1, r4, lsl r9
   14184:	andeq	r3, r1, r4, lsl r9
   14188:	andeq	r3, r1, r8, lsr lr
   1418c:	andeq	r3, r1, r8, lsr lr
   14190:	andeq	r3, r1, r8, lsr lr
   14194:	andeq	r3, r1, r8, lsr lr
   14198:	andeq	r3, r1, r8, lsr lr
   1419c:	andeq	r3, r1, r8, lsr lr
   141a0:	andeq	r3, r1, r8, lsr lr
   141a4:	andeq	r3, r1, r8, lsr lr
   141a8:	andeq	r3, r1, r8, lsr lr
   141ac:	andeq	r3, r1, r8, lsr lr
   141b0:	andeq	r3, r1, r8, lsr lr
   141b4:	andeq	r3, r1, r8, lsr lr
   141b8:	andeq	r3, r1, r8, lsr lr
   141bc:	andeq	r3, r1, r8, lsr lr
   141c0:	andeq	r3, r1, r8, lsr lr
   141c4:	andeq	r3, r1, r8, lsr lr
   141c8:	andeq	r3, r1, r4, lsl r9
   141cc:	andeq	r3, r1, r4, lsl r9
   141d0:	andeq	r3, r1, r4, lsl r9
   141d4:	andeq	r3, r1, r4, lsl r9
   141d8:	andeq	r3, r1, r4, lsl #5
   141dc:	andeq	r3, r1, r4, asr #19
   141e0:	andeq	r3, r1, r8, lsr lr
   141e4:	andeq	r3, r1, r8, lsr lr
   141e8:	andeq	r3, r1, r8, lsr lr
   141ec:	andeq	r3, r1, r8, lsr lr
   141f0:	andeq	r3, r1, r8, lsr lr
   141f4:	andeq	r3, r1, r8, lsr lr
   141f8:	andeq	r3, r1, r8, lsr lr
   141fc:	andeq	r3, r1, r8, lsr lr
   14200:	andeq	r3, r1, r8, lsr lr
   14204:	andeq	r3, r1, r8, lsr lr
   14208:	andeq	r3, r1, r8, lsr lr
   1420c:	andeq	r3, r1, r8, lsr lr
   14210:	andeq	r3, r1, r8, lsr lr
   14214:	andeq	r3, r1, r8, lsr lr
   14218:	andeq	r3, r1, r8, lsr lr
   1421c:	andeq	r3, r1, r8, lsr lr
   14220:	andeq	r3, r1, r8, lsr lr
   14224:	andeq	r3, r1, r8, lsr lr
   14228:	andeq	r3, r1, r8, lsr lr
   1422c:	andeq	r3, r1, r8, lsr lr
   14230:	andeq	r3, r1, r8, lsr lr
   14234:	andeq	r3, r1, r8, lsr lr
   14238:	andeq	r3, r1, r8, lsr lr
   1423c:	andeq	r3, r1, r8, lsr lr
   14240:	andeq	r3, r1, r8, lsr lr
   14244:	andeq	r3, r1, r8, lsr lr
   14248:	andeq	r3, r1, r4, lsl r9
   1424c:			; <UNDEFINED> instruction: 0x000137bc
   14250:	andeq	r3, r1, r8, lsr lr
   14254:	andeq	r3, r1, r4, lsl r9
   14258:	andeq	r3, r1, r8, lsr lr
   1425c:	andeq	r3, r1, r4, lsl r9
   14260:	andeq	r3, r1, r8, lsr lr
   14264:	andeq	r3, r1, r8, lsr lr
   14268:	andeq	r3, r1, r8, lsr lr
   1426c:	andeq	r3, r1, r8, lsr lr
   14270:	andeq	r3, r1, r8, lsr lr
   14274:	andeq	r3, r1, r8, lsr lr
   14278:	andeq	r3, r1, r8, lsr lr
   1427c:	andeq	r3, r1, r8, lsr lr
   14280:	andeq	r3, r1, r8, lsr lr
   14284:	andeq	r3, r1, r8, lsr lr
   14288:	andeq	r3, r1, r8, lsr lr
   1428c:	andeq	r3, r1, r8, lsr lr
   14290:	andeq	r3, r1, r8, lsr lr
   14294:	andeq	r3, r1, r8, lsr lr
   14298:	andeq	r3, r1, r8, lsr lr
   1429c:	andeq	r3, r1, r8, lsr lr
   142a0:	andeq	r3, r1, r8, lsr lr
   142a4:	andeq	r3, r1, r8, lsr lr
   142a8:	andeq	r3, r1, r8, lsr lr
   142ac:	andeq	r3, r1, r8, lsr lr
   142b0:	andeq	r3, r1, r8, lsr lr
   142b4:	andeq	r3, r1, r8, lsr lr
   142b8:	andeq	r3, r1, r8, lsr lr
   142bc:	andeq	r3, r1, r8, lsr lr
   142c0:	andeq	r3, r1, r8, lsr lr
   142c4:	andeq	r3, r1, r8, lsr lr
   142c8:	andeq	r3, r1, ip, ror r8
   142cc:	andeq	r3, r1, r4, lsl r9
   142d0:	andeq	r3, r1, ip, ror r8
   142d4:	andeq	r3, r1, ip, asr #17
   142d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   142dc:	strd	r6, [sp, #8]
   142e0:	strd	r8, [sp, #16]
   142e4:	strd	sl, [sp, #24]
   142e8:	str	lr, [sp, #32]
   142ec:	sub	sp, sp, #52	; 0x34
   142f0:	mov	r5, r0
   142f4:	str	r1, [sp, #24]
   142f8:	str	r2, [sp, #28]
   142fc:	mov	r4, r3
   14300:	bl	10de0 <__errno_location@plt>
   14304:	str	r0, [sp, #32]
   14308:	ldr	r3, [r0]
   1430c:	str	r3, [sp, #36]	; 0x24
   14310:	movw	r3, #28916	; 0x70f4
   14314:	movt	r3, #2
   14318:	ldr	r6, [r3]
   1431c:	cmn	r5, #-2147483647	; 0x80000001
   14320:	movne	r3, #0
   14324:	moveq	r3, #1
   14328:	orrs	r3, r3, r5, lsr #31
   1432c:	bne	14490 <__assert_fail@plt+0x35cc>
   14330:	movw	r3, #28916	; 0x70f4
   14334:	movt	r3, #2
   14338:	ldr	r2, [r3, #4]
   1433c:	cmp	r2, r5
   14340:	bgt	143b0 <__assert_fail@plt+0x34ec>
   14344:	str	r2, [sp, #44]	; 0x2c
   14348:	add	r3, r3, #8
   1434c:	cmp	r6, r3
   14350:	beq	14494 <__assert_fail@plt+0x35d0>
   14354:	sub	r2, r5, r2
   14358:	mov	r3, #8
   1435c:	str	r3, [sp]
   14360:	mvn	r3, #-2147483648	; 0x80000000
   14364:	add	r2, r2, #1
   14368:	add	r1, sp, #44	; 0x2c
   1436c:	mov	r0, r6
   14370:	bl	15498 <__assert_fail@plt+0x45d4>
   14374:	mov	r6, r0
   14378:	movw	r3, #28916	; 0x70f4
   1437c:	movt	r3, #2
   14380:	str	r0, [r3]
   14384:	movw	r7, #28916	; 0x70f4
   14388:	movt	r7, #2
   1438c:	ldr	r0, [r7, #4]
   14390:	ldr	r2, [sp, #44]	; 0x2c
   14394:	sub	r2, r2, r0
   14398:	lsl	r2, r2, #3
   1439c:	mov	r1, #0
   143a0:	add	r0, r6, r0, lsl #3
   143a4:	bl	10df8 <memset@plt>
   143a8:	ldr	r3, [sp, #44]	; 0x2c
   143ac:	str	r3, [r7, #4]
   143b0:	add	fp, r6, r5, lsl #3
   143b4:	ldr	r8, [r6, r5, lsl #3]
   143b8:	ldr	r7, [fp, #4]
   143bc:	ldr	r3, [r4, #4]
   143c0:	orr	r9, r3, #1
   143c4:	add	sl, r4, #8
   143c8:	ldr	r3, [r4, #44]	; 0x2c
   143cc:	str	r3, [sp, #16]
   143d0:	ldr	r3, [r4, #40]	; 0x28
   143d4:	str	r3, [sp, #12]
   143d8:	str	sl, [sp, #8]
   143dc:	str	r9, [sp, #4]
   143e0:	ldr	r3, [r4]
   143e4:	str	r3, [sp]
   143e8:	ldr	r3, [sp, #28]
   143ec:	ldr	r2, [sp, #24]
   143f0:	mov	r1, r8
   143f4:	mov	r0, r7
   143f8:	bl	12be0 <__assert_fail@plt+0x1d1c>
   143fc:	cmp	r8, r0
   14400:	bhi	14464 <__assert_fail@plt+0x35a0>
   14404:	add	r8, r0, #1
   14408:	str	r8, [r6, r5, lsl #3]
   1440c:	movw	r3, #29096	; 0x71a8
   14410:	movt	r3, #2
   14414:	cmp	r7, r3
   14418:	beq	14424 <__assert_fail@plt+0x3560>
   1441c:	mov	r0, r7
   14420:	bl	1285c <__assert_fail@plt+0x1998>
   14424:	mov	r0, r8
   14428:	bl	15294 <__assert_fail@plt+0x43d0>
   1442c:	mov	r7, r0
   14430:	str	r0, [fp, #4]
   14434:	ldr	r3, [r4, #44]	; 0x2c
   14438:	str	r3, [sp, #16]
   1443c:	ldr	r3, [r4, #40]	; 0x28
   14440:	str	r3, [sp, #12]
   14444:	str	sl, [sp, #8]
   14448:	str	r9, [sp, #4]
   1444c:	ldr	r3, [r4]
   14450:	str	r3, [sp]
   14454:	ldr	r3, [sp, #28]
   14458:	ldr	r2, [sp, #24]
   1445c:	mov	r1, r8
   14460:	bl	12be0 <__assert_fail@plt+0x1d1c>
   14464:	ldr	r3, [sp, #32]
   14468:	ldr	r2, [sp, #36]	; 0x24
   1446c:	str	r2, [r3]
   14470:	mov	r0, r7
   14474:	add	sp, sp, #52	; 0x34
   14478:	ldrd	r4, [sp]
   1447c:	ldrd	r6, [sp, #8]
   14480:	ldrd	r8, [sp, #16]
   14484:	ldrd	sl, [sp, #24]
   14488:	add	sp, sp, #32
   1448c:	pop	{pc}		; (ldr pc, [sp], #4)
   14490:	bl	10eac <abort@plt>
   14494:	sub	r2, r5, r2
   14498:	mov	r3, #8
   1449c:	str	r3, [sp]
   144a0:	mvn	r3, #-2147483648	; 0x80000000
   144a4:	add	r2, r2, #1
   144a8:	add	r1, sp, #44	; 0x2c
   144ac:	mov	r0, #0
   144b0:	bl	15498 <__assert_fail@plt+0x45d4>
   144b4:	mov	r6, r0
   144b8:	movw	r3, #28916	; 0x70f4
   144bc:	movt	r3, #2
   144c0:	str	r0, [r3]
   144c4:	ldrd	r2, [r3, #8]
   144c8:	strd	r2, [r0]
   144cc:	b	14384 <__assert_fail@plt+0x34c0>
   144d0:	strd	r4, [sp, #-16]!
   144d4:	str	r6, [sp, #8]
   144d8:	str	lr, [sp, #12]
   144dc:	mov	r4, r0
   144e0:	bl	10de0 <__errno_location@plt>
   144e4:	mov	r5, r0
   144e8:	ldr	r6, [r0]
   144ec:	cmp	r4, #0
   144f0:	ldr	r3, [pc, #32]	; 14518 <__assert_fail@plt+0x3654>
   144f4:	moveq	r4, r3
   144f8:	mov	r1, #48	; 0x30
   144fc:	mov	r0, r4
   14500:	bl	15608 <__assert_fail@plt+0x4744>
   14504:	str	r6, [r5]
   14508:	ldrd	r4, [sp]
   1450c:	ldr	r6, [sp, #8]
   14510:	add	sp, sp, #12
   14514:	pop	{pc}		; (ldr pc, [sp], #4)
   14518:	andeq	r7, r2, r8, lsr #5
   1451c:	subs	r3, r0, #0
   14520:	ldr	r2, [pc, #8]	; 14530 <__assert_fail@plt+0x366c>
   14524:	moveq	r3, r2
   14528:	ldr	r0, [r3]
   1452c:	bx	lr
   14530:	andeq	r7, r2, r8, lsr #5
   14534:	subs	r3, r0, #0
   14538:	ldr	r2, [pc, #8]	; 14548 <__assert_fail@plt+0x3684>
   1453c:	moveq	r3, r2
   14540:	str	r1, [r3]
   14544:	bx	lr
   14548:	andeq	r7, r2, r8, lsr #5
   1454c:	push	{lr}		; (str lr, [sp, #-4]!)
   14550:	subs	r3, r0, #0
   14554:	ldr	r0, [pc, #44]	; 14588 <__assert_fail@plt+0x36c4>
   14558:	moveq	r3, r0
   1455c:	add	r3, r3, #8
   14560:	lsr	lr, r1, #5
   14564:	and	r1, r1, #31
   14568:	ldr	ip, [r3, lr, lsl #2]
   1456c:	lsr	r0, ip, r1
   14570:	eor	r2, r2, r0
   14574:	and	r2, r2, #1
   14578:	eor	r1, ip, r2, lsl r1
   1457c:	str	r1, [r3, lr, lsl #2]
   14580:	and	r0, r0, #1
   14584:	pop	{pc}		; (ldr pc, [sp], #4)
   14588:	andeq	r7, r2, r8, lsr #5
   1458c:	subs	r3, r0, #0
   14590:	ldr	r2, [pc, #12]	; 145a4 <__assert_fail@plt+0x36e0>
   14594:	moveq	r3, r2
   14598:	ldr	r0, [r3, #4]
   1459c:	str	r1, [r3, #4]
   145a0:	bx	lr
   145a4:	andeq	r7, r2, r8, lsr #5
   145a8:	subs	r3, r0, #0
   145ac:	ldr	r0, [pc, #44]	; 145e0 <__assert_fail@plt+0x371c>
   145b0:	moveq	r3, r0
   145b4:	mov	r0, #10
   145b8:	str	r0, [r3]
   145bc:	cmp	r2, #0
   145c0:	cmpne	r1, #0
   145c4:	beq	145d4 <__assert_fail@plt+0x3710>
   145c8:	str	r1, [r3, #40]	; 0x28
   145cc:	str	r2, [r3, #44]	; 0x2c
   145d0:	bx	lr
   145d4:	str	r4, [sp, #-8]!
   145d8:	str	lr, [sp, #4]
   145dc:	bl	10eac <abort@plt>
   145e0:	andeq	r7, r2, r8, lsr #5
   145e4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   145e8:	strd	r6, [sp, #8]
   145ec:	strd	r8, [sp, #16]
   145f0:	str	sl, [sp, #24]
   145f4:	str	lr, [sp, #28]
   145f8:	sub	sp, sp, #24
   145fc:	mov	r7, r0
   14600:	mov	r8, r1
   14604:	mov	r9, r2
   14608:	mov	sl, r3
   1460c:	ldr	r4, [sp, #56]	; 0x38
   14610:	cmp	r4, #0
   14614:	ldr	r3, [pc, #104]	; 14684 <__assert_fail@plt+0x37c0>
   14618:	moveq	r4, r3
   1461c:	bl	10de0 <__errno_location@plt>
   14620:	mov	r5, r0
   14624:	ldr	r6, [r0]
   14628:	ldr	r3, [r4, #44]	; 0x2c
   1462c:	str	r3, [sp, #16]
   14630:	ldr	r3, [r4, #40]	; 0x28
   14634:	str	r3, [sp, #12]
   14638:	add	r3, r4, #8
   1463c:	str	r3, [sp, #8]
   14640:	ldr	r3, [r4, #4]
   14644:	str	r3, [sp, #4]
   14648:	ldr	r3, [r4]
   1464c:	str	r3, [sp]
   14650:	mov	r3, sl
   14654:	mov	r2, r9
   14658:	mov	r1, r8
   1465c:	mov	r0, r7
   14660:	bl	12be0 <__assert_fail@plt+0x1d1c>
   14664:	str	r6, [r5]
   14668:	add	sp, sp, #24
   1466c:	ldrd	r4, [sp]
   14670:	ldrd	r6, [sp, #8]
   14674:	ldrd	r8, [sp, #16]
   14678:	ldr	sl, [sp, #24]
   1467c:	add	sp, sp, #28
   14680:	pop	{pc}		; (ldr pc, [sp], #4)
   14684:	andeq	r7, r2, r8, lsr #5
   14688:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1468c:	strd	r6, [sp, #8]
   14690:	strd	r8, [sp, #16]
   14694:	strd	sl, [sp, #24]
   14698:	str	lr, [sp, #32]
   1469c:	sub	sp, sp, #44	; 0x2c
   146a0:	mov	r8, r0
   146a4:	mov	sl, r1
   146a8:	mov	r6, r2
   146ac:	subs	r4, r3, #0
   146b0:	ldr	r3, [pc, #200]	; 14780 <__assert_fail@plt+0x38bc>
   146b4:	moveq	r4, r3
   146b8:	bl	10de0 <__errno_location@plt>
   146bc:	mov	r7, r0
   146c0:	ldr	fp, [r0]
   146c4:	ldr	r5, [r4, #4]
   146c8:	cmp	r6, #0
   146cc:	orreq	r5, r5, #1
   146d0:	add	r9, r4, #8
   146d4:	ldr	r3, [r4, #44]	; 0x2c
   146d8:	str	r3, [sp, #16]
   146dc:	ldr	r3, [r4, #40]	; 0x28
   146e0:	str	r3, [sp, #12]
   146e4:	str	r9, [sp, #8]
   146e8:	str	r5, [sp, #4]
   146ec:	ldr	r3, [r4]
   146f0:	str	r3, [sp]
   146f4:	str	sl, [sp, #36]	; 0x24
   146f8:	mov	r3, sl
   146fc:	str	r8, [sp, #32]
   14700:	mov	r2, r8
   14704:	mov	r1, #0
   14708:	mov	r0, r1
   1470c:	bl	12be0 <__assert_fail@plt+0x1d1c>
   14710:	mov	sl, r0
   14714:	add	r8, r0, #1
   14718:	mov	r0, r8
   1471c:	bl	15294 <__assert_fail@plt+0x43d0>
   14720:	str	r0, [sp, #28]
   14724:	ldr	r3, [r4, #44]	; 0x2c
   14728:	str	r3, [sp, #16]
   1472c:	ldr	r3, [r4, #40]	; 0x28
   14730:	str	r3, [sp, #12]
   14734:	str	r9, [sp, #8]
   14738:	str	r5, [sp, #4]
   1473c:	ldr	r3, [r4]
   14740:	str	r3, [sp]
   14744:	ldr	r3, [sp, #36]	; 0x24
   14748:	ldr	r2, [sp, #32]
   1474c:	mov	r1, r8
   14750:	bl	12be0 <__assert_fail@plt+0x1d1c>
   14754:	str	fp, [r7]
   14758:	cmp	r6, #0
   1475c:	strne	sl, [r6]
   14760:	ldr	r0, [sp, #28]
   14764:	add	sp, sp, #44	; 0x2c
   14768:	ldrd	r4, [sp]
   1476c:	ldrd	r6, [sp, #8]
   14770:	ldrd	r8, [sp, #16]
   14774:	ldrd	sl, [sp, #24]
   14778:	add	sp, sp, #32
   1477c:	pop	{pc}		; (ldr pc, [sp], #4)
   14780:	andeq	r7, r2, r8, lsr #5
   14784:	str	r4, [sp, #-8]!
   14788:	str	lr, [sp, #4]
   1478c:	mov	r3, r2
   14790:	mov	r2, #0
   14794:	bl	14688 <__assert_fail@plt+0x37c4>
   14798:	ldr	r4, [sp]
   1479c:	add	sp, sp, #4
   147a0:	pop	{pc}		; (ldr pc, [sp], #4)
   147a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   147a8:	strd	r6, [sp, #8]
   147ac:	str	r8, [sp, #16]
   147b0:	str	lr, [sp, #20]
   147b4:	movw	r3, #28916	; 0x70f4
   147b8:	movt	r3, #2
   147bc:	ldr	r7, [r3]
   147c0:	ldr	r3, [r3, #4]
   147c4:	cmp	r3, #1
   147c8:	ble	147f4 <__assert_fail@plt+0x3930>
   147cc:	mov	r4, #1
   147d0:	add	r6, r7, #4
   147d4:	movw	r5, #28916	; 0x70f4
   147d8:	movt	r5, #2
   147dc:	ldr	r0, [r6, r4, lsl #3]
   147e0:	bl	1285c <__assert_fail@plt+0x1998>
   147e4:	add	r4, r4, #1
   147e8:	ldr	r3, [r5, #4]
   147ec:	cmp	r3, r4
   147f0:	bgt	147dc <__assert_fail@plt+0x3918>
   147f4:	ldr	r0, [r7, #4]
   147f8:	movw	r3, #29096	; 0x71a8
   147fc:	movt	r3, #2
   14800:	cmp	r0, r3
   14804:	beq	14828 <__assert_fail@plt+0x3964>
   14808:	bl	1285c <__assert_fail@plt+0x1998>
   1480c:	movw	r3, #28916	; 0x70f4
   14810:	movt	r3, #2
   14814:	mov	r2, #256	; 0x100
   14818:	str	r2, [r3, #8]
   1481c:	movw	r2, #29096	; 0x71a8
   14820:	movt	r2, #2
   14824:	str	r2, [r3, #12]
   14828:	ldr	r3, [pc, #64]	; 14870 <__assert_fail@plt+0x39ac>
   1482c:	cmp	r7, r3
   14830:	beq	1484c <__assert_fail@plt+0x3988>
   14834:	mov	r0, r7
   14838:	bl	1285c <__assert_fail@plt+0x1998>
   1483c:	movw	r3, #28916	; 0x70f4
   14840:	movt	r3, #2
   14844:	add	r2, r3, #8
   14848:	str	r2, [r3]
   1484c:	movw	r3, #28916	; 0x70f4
   14850:	movt	r3, #2
   14854:	mov	r2, #1
   14858:	str	r2, [r3, #4]
   1485c:	ldrd	r4, [sp]
   14860:	ldrd	r6, [sp, #8]
   14864:	ldr	r8, [sp, #16]
   14868:	add	sp, sp, #20
   1486c:	pop	{pc}		; (ldr pc, [sp], #4)
   14870:	strdeq	r7, [r2], -ip
   14874:	str	r4, [sp, #-8]!
   14878:	str	lr, [sp, #4]
   1487c:	ldr	r3, [pc, #16]	; 14894 <__assert_fail@plt+0x39d0>
   14880:	mvn	r2, #0
   14884:	bl	142d8 <__assert_fail@plt+0x3414>
   14888:	ldr	r4, [sp]
   1488c:	add	sp, sp, #4
   14890:	pop	{pc}		; (ldr pc, [sp], #4)
   14894:	andeq	r7, r2, r8, lsr #5
   14898:	str	r4, [sp, #-8]!
   1489c:	str	lr, [sp, #4]
   148a0:	ldr	r3, [pc, #12]	; 148b4 <__assert_fail@plt+0x39f0>
   148a4:	bl	142d8 <__assert_fail@plt+0x3414>
   148a8:	ldr	r4, [sp]
   148ac:	add	sp, sp, #4
   148b0:	pop	{pc}		; (ldr pc, [sp], #4)
   148b4:	andeq	r7, r2, r8, lsr #5
   148b8:	str	r4, [sp, #-8]!
   148bc:	str	lr, [sp, #4]
   148c0:	mov	r1, r0
   148c4:	mov	r0, #0
   148c8:	bl	14874 <__assert_fail@plt+0x39b0>
   148cc:	ldr	r4, [sp]
   148d0:	add	sp, sp, #4
   148d4:	pop	{pc}		; (ldr pc, [sp], #4)
   148d8:	str	r4, [sp, #-8]!
   148dc:	str	lr, [sp, #4]
   148e0:	mov	r2, r1
   148e4:	mov	r1, r0
   148e8:	mov	r0, #0
   148ec:	bl	14898 <__assert_fail@plt+0x39d4>
   148f0:	ldr	r4, [sp]
   148f4:	add	sp, sp, #4
   148f8:	pop	{pc}		; (ldr pc, [sp], #4)
   148fc:	strd	r4, [sp, #-12]!
   14900:	str	lr, [sp, #8]
   14904:	sub	sp, sp, #52	; 0x34
   14908:	mov	r4, r0
   1490c:	mov	r5, r2
   14910:	mov	r0, sp
   14914:	bl	12a4c <__assert_fail@plt+0x1b88>
   14918:	mov	r3, sp
   1491c:	mvn	r2, #0
   14920:	mov	r1, r5
   14924:	mov	r0, r4
   14928:	bl	142d8 <__assert_fail@plt+0x3414>
   1492c:	add	sp, sp, #52	; 0x34
   14930:	ldrd	r4, [sp]
   14934:	add	sp, sp, #8
   14938:	pop	{pc}		; (ldr pc, [sp], #4)
   1493c:	strd	r4, [sp, #-16]!
   14940:	str	r6, [sp, #8]
   14944:	str	lr, [sp, #12]
   14948:	sub	sp, sp, #48	; 0x30
   1494c:	mov	r4, r0
   14950:	mov	r5, r2
   14954:	mov	r6, r3
   14958:	mov	r0, sp
   1495c:	bl	12a4c <__assert_fail@plt+0x1b88>
   14960:	mov	r3, sp
   14964:	mov	r2, r6
   14968:	mov	r1, r5
   1496c:	mov	r0, r4
   14970:	bl	142d8 <__assert_fail@plt+0x3414>
   14974:	add	sp, sp, #48	; 0x30
   14978:	ldrd	r4, [sp]
   1497c:	ldr	r6, [sp, #8]
   14980:	add	sp, sp, #12
   14984:	pop	{pc}		; (ldr pc, [sp], #4)
   14988:	str	r4, [sp, #-8]!
   1498c:	str	lr, [sp, #4]
   14990:	mov	r2, r1
   14994:	mov	r1, r0
   14998:	mov	r0, #0
   1499c:	bl	148fc <__assert_fail@plt+0x3a38>
   149a0:	ldr	r4, [sp]
   149a4:	add	sp, sp, #4
   149a8:	pop	{pc}		; (ldr pc, [sp], #4)
   149ac:	str	r4, [sp, #-8]!
   149b0:	str	lr, [sp, #4]
   149b4:	mov	r3, r2
   149b8:	mov	r2, r1
   149bc:	mov	r1, r0
   149c0:	mov	r0, #0
   149c4:	bl	1493c <__assert_fail@plt+0x3a78>
   149c8:	ldr	r4, [sp]
   149cc:	add	sp, sp, #4
   149d0:	pop	{pc}		; (ldr pc, [sp], #4)
   149d4:	strd	r4, [sp, #-12]!
   149d8:	str	lr, [sp, #8]
   149dc:	sub	sp, sp, #52	; 0x34
   149e0:	mov	r4, r0
   149e4:	mov	r5, r1
   149e8:	mov	r1, r2
   149ec:	ldr	r0, [pc, #92]	; 14a50 <__assert_fail@plt+0x3b8c>
   149f0:	ldrd	r2, [r0]
   149f4:	strd	r2, [sp]
   149f8:	ldrd	r2, [r0, #8]
   149fc:	strd	r2, [sp, #8]
   14a00:	ldrd	r2, [r0, #16]
   14a04:	strd	r2, [sp, #16]
   14a08:	ldrd	r2, [r0, #24]
   14a0c:	strd	r2, [sp, #24]
   14a10:	ldrd	r2, [r0, #32]
   14a14:	strd	r2, [sp, #32]
   14a18:	ldrd	r2, [r0, #40]	; 0x28
   14a1c:	strd	r2, [sp, #40]	; 0x28
   14a20:	mov	r2, #1
   14a24:	mov	r0, sp
   14a28:	bl	1454c <__assert_fail@plt+0x3688>
   14a2c:	mov	r3, sp
   14a30:	mov	r2, r5
   14a34:	mov	r1, r4
   14a38:	mov	r0, #0
   14a3c:	bl	142d8 <__assert_fail@plt+0x3414>
   14a40:	add	sp, sp, #52	; 0x34
   14a44:	ldrd	r4, [sp]
   14a48:	add	sp, sp, #8
   14a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a50:	andeq	r7, r2, r8, lsr #5
   14a54:	str	r4, [sp, #-8]!
   14a58:	str	lr, [sp, #4]
   14a5c:	mov	r2, r1
   14a60:	mvn	r1, #0
   14a64:	bl	149d4 <__assert_fail@plt+0x3b10>
   14a68:	ldr	r4, [sp]
   14a6c:	add	sp, sp, #4
   14a70:	pop	{pc}		; (ldr pc, [sp], #4)
   14a74:	str	r4, [sp, #-8]!
   14a78:	str	lr, [sp, #4]
   14a7c:	mov	r1, #58	; 0x3a
   14a80:	bl	14a54 <__assert_fail@plt+0x3b90>
   14a84:	ldr	r4, [sp]
   14a88:	add	sp, sp, #4
   14a8c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a90:	str	r4, [sp, #-8]!
   14a94:	str	lr, [sp, #4]
   14a98:	mov	r2, #58	; 0x3a
   14a9c:	bl	149d4 <__assert_fail@plt+0x3b10>
   14aa0:	ldr	r4, [sp]
   14aa4:	add	sp, sp, #4
   14aa8:	pop	{pc}		; (ldr pc, [sp], #4)
   14aac:	strd	r4, [sp, #-12]!
   14ab0:	str	lr, [sp, #8]
   14ab4:	sub	sp, sp, #100	; 0x64
   14ab8:	mov	r4, r0
   14abc:	mov	r5, r2
   14ac0:	mov	r0, sp
   14ac4:	bl	12a4c <__assert_fail@plt+0x1b88>
   14ac8:	ldrd	r2, [sp]
   14acc:	strd	r2, [sp, #48]	; 0x30
   14ad0:	ldrd	r2, [sp, #8]
   14ad4:	strd	r2, [sp, #56]	; 0x38
   14ad8:	ldrd	r2, [sp, #16]
   14adc:	strd	r2, [sp, #64]	; 0x40
   14ae0:	ldrd	r2, [sp, #24]
   14ae4:	strd	r2, [sp, #72]	; 0x48
   14ae8:	ldrd	r2, [sp, #32]
   14aec:	strd	r2, [sp, #80]	; 0x50
   14af0:	ldrd	r2, [sp, #40]	; 0x28
   14af4:	strd	r2, [sp, #88]	; 0x58
   14af8:	mov	r2, #1
   14afc:	mov	r1, #58	; 0x3a
   14b00:	add	r0, sp, #48	; 0x30
   14b04:	bl	1454c <__assert_fail@plt+0x3688>
   14b08:	add	r3, sp, #48	; 0x30
   14b0c:	mvn	r2, #0
   14b10:	mov	r1, r5
   14b14:	mov	r0, r4
   14b18:	bl	142d8 <__assert_fail@plt+0x3414>
   14b1c:	add	sp, sp, #100	; 0x64
   14b20:	ldrd	r4, [sp]
   14b24:	add	sp, sp, #8
   14b28:	pop	{pc}		; (ldr pc, [sp], #4)
   14b2c:	strd	r4, [sp, #-20]!	; 0xffffffec
   14b30:	strd	r6, [sp, #8]
   14b34:	str	lr, [sp, #16]
   14b38:	sub	sp, sp, #52	; 0x34
   14b3c:	mov	r4, r0
   14b40:	mov	r5, r3
   14b44:	ldr	r3, [pc, #92]	; 14ba8 <__assert_fail@plt+0x3ce4>
   14b48:	ldrd	r6, [r3]
   14b4c:	strd	r6, [sp]
   14b50:	ldrd	r6, [r3, #8]
   14b54:	strd	r6, [sp, #8]
   14b58:	ldrd	r6, [r3, #16]
   14b5c:	strd	r6, [sp, #16]
   14b60:	ldrd	r6, [r3, #24]
   14b64:	strd	r6, [sp, #24]
   14b68:	ldrd	r6, [r3, #32]
   14b6c:	strd	r6, [sp, #32]
   14b70:	ldrd	r6, [r3, #40]	; 0x28
   14b74:	strd	r6, [sp, #40]	; 0x28
   14b78:	mov	r0, sp
   14b7c:	bl	145a8 <__assert_fail@plt+0x36e4>
   14b80:	mov	r3, sp
   14b84:	ldr	r2, [sp, #72]	; 0x48
   14b88:	mov	r1, r5
   14b8c:	mov	r0, r4
   14b90:	bl	142d8 <__assert_fail@plt+0x3414>
   14b94:	add	sp, sp, #52	; 0x34
   14b98:	ldrd	r4, [sp]
   14b9c:	ldrd	r6, [sp, #8]
   14ba0:	add	sp, sp, #16
   14ba4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ba8:	andeq	r7, r2, r8, lsr #5
   14bac:	push	{lr}		; (str lr, [sp, #-4]!)
   14bb0:	sub	sp, sp, #12
   14bb4:	mvn	ip, #0
   14bb8:	str	ip, [sp]
   14bbc:	bl	14b2c <__assert_fail@plt+0x3c68>
   14bc0:	add	sp, sp, #12
   14bc4:	pop	{pc}		; (ldr pc, [sp], #4)
   14bc8:	str	r4, [sp, #-8]!
   14bcc:	str	lr, [sp, #4]
   14bd0:	mov	r3, r2
   14bd4:	mov	r2, r1
   14bd8:	mov	r1, r0
   14bdc:	mov	r0, #0
   14be0:	bl	14bac <__assert_fail@plt+0x3ce8>
   14be4:	ldr	r4, [sp]
   14be8:	add	sp, sp, #4
   14bec:	pop	{pc}		; (ldr pc, [sp], #4)
   14bf0:	push	{lr}		; (str lr, [sp, #-4]!)
   14bf4:	sub	sp, sp, #12
   14bf8:	str	r3, [sp]
   14bfc:	mov	r3, r2
   14c00:	mov	r2, r1
   14c04:	mov	r1, r0
   14c08:	mov	r0, #0
   14c0c:	bl	14b2c <__assert_fail@plt+0x3c68>
   14c10:	add	sp, sp, #12
   14c14:	pop	{pc}		; (ldr pc, [sp], #4)
   14c18:	str	r4, [sp, #-8]!
   14c1c:	str	lr, [sp, #4]
   14c20:	ldr	r3, [pc, #12]	; 14c34 <__assert_fail@plt+0x3d70>
   14c24:	bl	142d8 <__assert_fail@plt+0x3414>
   14c28:	ldr	r4, [sp]
   14c2c:	add	sp, sp, #4
   14c30:	pop	{pc}		; (ldr pc, [sp], #4)
   14c34:	andeq	r7, r2, r4, lsl #2
   14c38:	str	r4, [sp, #-8]!
   14c3c:	str	lr, [sp, #4]
   14c40:	mov	r2, r1
   14c44:	mov	r1, r0
   14c48:	mov	r0, #0
   14c4c:	bl	14c18 <__assert_fail@plt+0x3d54>
   14c50:	ldr	r4, [sp]
   14c54:	add	sp, sp, #4
   14c58:	pop	{pc}		; (ldr pc, [sp], #4)
   14c5c:	str	r4, [sp, #-8]!
   14c60:	str	lr, [sp, #4]
   14c64:	mvn	r2, #0
   14c68:	bl	14c18 <__assert_fail@plt+0x3d54>
   14c6c:	ldr	r4, [sp]
   14c70:	add	sp, sp, #4
   14c74:	pop	{pc}		; (ldr pc, [sp], #4)
   14c78:	str	r4, [sp, #-8]!
   14c7c:	str	lr, [sp, #4]
   14c80:	mov	r1, r0
   14c84:	mov	r0, #0
   14c88:	bl	14c5c <__assert_fail@plt+0x3d98>
   14c8c:	ldr	r4, [sp]
   14c90:	add	sp, sp, #4
   14c94:	pop	{pc}		; (ldr pc, [sp], #4)
   14c98:	strd	r4, [sp, #-16]!
   14c9c:	str	r6, [sp, #8]
   14ca0:	str	lr, [sp, #12]
   14ca4:	sub	sp, sp, #32
   14ca8:	mov	r4, r0
   14cac:	ldr	r5, [sp, #48]	; 0x30
   14cb0:	ldr	r6, [sp, #52]	; 0x34
   14cb4:	cmp	r1, #0
   14cb8:	beq	14d84 <__assert_fail@plt+0x3ec0>
   14cbc:	str	r3, [sp, #4]
   14cc0:	str	r2, [sp]
   14cc4:	mov	r3, r1
   14cc8:	movw	r2, #26204	; 0x665c
   14ccc:	movt	r2, #1
   14cd0:	mov	r1, #1
   14cd4:	bl	10e1c <__fprintf_chk@plt>
   14cd8:	mov	r2, #5
   14cdc:	movw	r1, #26224	; 0x6670
   14ce0:	movt	r1, #1
   14ce4:	mov	r0, #0
   14ce8:	bl	10d08 <dcgettext@plt>
   14cec:	movw	r3, #2022	; 0x7e6
   14cf0:	str	r3, [sp]
   14cf4:	mov	r3, r0
   14cf8:	movw	r2, #26952	; 0x6948
   14cfc:	movt	r2, #1
   14d00:	mov	r1, #1
   14d04:	mov	r0, r4
   14d08:	bl	10e1c <__fprintf_chk@plt>
   14d0c:	mov	r1, r4
   14d10:	mov	r0, #10
   14d14:	bl	10cfc <fputc_unlocked@plt>
   14d18:	mov	r2, #5
   14d1c:	movw	r1, #26228	; 0x6674
   14d20:	movt	r1, #1
   14d24:	mov	r0, #0
   14d28:	bl	10d08 <dcgettext@plt>
   14d2c:	movw	r3, #26400	; 0x6720
   14d30:	movt	r3, #1
   14d34:	mov	r2, r0
   14d38:	mov	r1, #1
   14d3c:	mov	r0, r4
   14d40:	bl	10e1c <__fprintf_chk@plt>
   14d44:	mov	r1, r4
   14d48:	mov	r0, #10
   14d4c:	bl	10cfc <fputc_unlocked@plt>
   14d50:	cmp	r6, #9
   14d54:	ldrls	pc, [pc, r6, lsl #2]
   14d58:	b	1505c <__assert_fail@plt+0x4198>
   14d5c:	andeq	r4, r1, r8, asr #27
   14d60:	andeq	r4, r1, r0, lsr #27
   14d64:	ldrdeq	r4, [r1], -ip
   14d68:	andeq	r4, r1, r0, lsl lr
   14d6c:	andeq	r4, r1, ip, asr #28
   14d70:	muleq	r1, r0, lr
   14d74:	ldrdeq	r4, [r1], -ip
   14d78:	andeq	r4, r1, r0, lsr pc
   14d7c:	andeq	r4, r1, ip, lsl #31
   14d80:	strdeq	r4, [r1], -r0
   14d84:	str	r3, [sp]
   14d88:	mov	r3, r2
   14d8c:	movw	r2, #26216	; 0x6668
   14d90:	movt	r2, #1
   14d94:	mov	r1, #1
   14d98:	bl	10e1c <__fprintf_chk@plt>
   14d9c:	b	14cd8 <__assert_fail@plt+0x3e14>
   14da0:	mov	r2, #5
   14da4:	movw	r1, #26436	; 0x6744
   14da8:	movt	r1, #1
   14dac:	mov	r0, #0
   14db0:	bl	10d08 <dcgettext@plt>
   14db4:	ldr	r3, [r5]
   14db8:	mov	r2, r0
   14dbc:	mov	r1, #1
   14dc0:	mov	r0, r4
   14dc4:	bl	10e1c <__fprintf_chk@plt>
   14dc8:	add	sp, sp, #32
   14dcc:	ldrd	r4, [sp]
   14dd0:	ldr	r6, [sp, #8]
   14dd4:	add	sp, sp, #12
   14dd8:	pop	{pc}		; (ldr pc, [sp], #4)
   14ddc:	mov	r2, #5
   14de0:	movw	r1, #26452	; 0x6754
   14de4:	movt	r1, #1
   14de8:	mov	r0, #0
   14dec:	bl	10d08 <dcgettext@plt>
   14df0:	ldr	r3, [r5, #4]
   14df4:	str	r3, [sp]
   14df8:	ldr	r3, [r5]
   14dfc:	mov	r2, r0
   14e00:	mov	r1, #1
   14e04:	mov	r0, r4
   14e08:	bl	10e1c <__fprintf_chk@plt>
   14e0c:	b	14dc8 <__assert_fail@plt+0x3f04>
   14e10:	mov	r2, #5
   14e14:	movw	r1, #26476	; 0x676c
   14e18:	movt	r1, #1
   14e1c:	mov	r0, #0
   14e20:	bl	10d08 <dcgettext@plt>
   14e24:	ldr	r3, [r5, #8]
   14e28:	str	r3, [sp, #4]
   14e2c:	ldr	r3, [r5, #4]
   14e30:	str	r3, [sp]
   14e34:	ldr	r3, [r5]
   14e38:	mov	r2, r0
   14e3c:	mov	r1, #1
   14e40:	mov	r0, r4
   14e44:	bl	10e1c <__fprintf_chk@plt>
   14e48:	b	14dc8 <__assert_fail@plt+0x3f04>
   14e4c:	mov	r2, #5
   14e50:	movw	r1, #26504	; 0x6788
   14e54:	movt	r1, #1
   14e58:	mov	r0, #0
   14e5c:	bl	10d08 <dcgettext@plt>
   14e60:	ldr	r3, [r5, #12]
   14e64:	str	r3, [sp, #8]
   14e68:	ldr	r3, [r5, #8]
   14e6c:	str	r3, [sp, #4]
   14e70:	ldr	r3, [r5, #4]
   14e74:	str	r3, [sp]
   14e78:	ldr	r3, [r5]
   14e7c:	mov	r2, r0
   14e80:	mov	r1, #1
   14e84:	mov	r0, r4
   14e88:	bl	10e1c <__fprintf_chk@plt>
   14e8c:	b	14dc8 <__assert_fail@plt+0x3f04>
   14e90:	mov	r2, #5
   14e94:	movw	r1, #26536	; 0x67a8
   14e98:	movt	r1, #1
   14e9c:	mov	r0, #0
   14ea0:	bl	10d08 <dcgettext@plt>
   14ea4:	ldr	r3, [r5, #16]
   14ea8:	str	r3, [sp, #12]
   14eac:	ldr	r3, [r5, #12]
   14eb0:	str	r3, [sp, #8]
   14eb4:	ldr	r3, [r5, #8]
   14eb8:	str	r3, [sp, #4]
   14ebc:	ldr	r3, [r5, #4]
   14ec0:	str	r3, [sp]
   14ec4:	ldr	r3, [r5]
   14ec8:	mov	r2, r0
   14ecc:	mov	r1, #1
   14ed0:	mov	r0, r4
   14ed4:	bl	10e1c <__fprintf_chk@plt>
   14ed8:	b	14dc8 <__assert_fail@plt+0x3f04>
   14edc:	mov	r2, #5
   14ee0:	movw	r1, #26572	; 0x67cc
   14ee4:	movt	r1, #1
   14ee8:	mov	r0, #0
   14eec:	bl	10d08 <dcgettext@plt>
   14ef0:	ldr	r3, [r5, #20]
   14ef4:	str	r3, [sp, #16]
   14ef8:	ldr	r3, [r5, #16]
   14efc:	str	r3, [sp, #12]
   14f00:	ldr	r3, [r5, #12]
   14f04:	str	r3, [sp, #8]
   14f08:	ldr	r3, [r5, #8]
   14f0c:	str	r3, [sp, #4]
   14f10:	ldr	r3, [r5, #4]
   14f14:	str	r3, [sp]
   14f18:	ldr	r3, [r5]
   14f1c:	mov	r2, r0
   14f20:	mov	r1, #1
   14f24:	mov	r0, r4
   14f28:	bl	10e1c <__fprintf_chk@plt>
   14f2c:	b	14dc8 <__assert_fail@plt+0x3f04>
   14f30:	mov	r2, #5
   14f34:	movw	r1, #26612	; 0x67f4
   14f38:	movt	r1, #1
   14f3c:	mov	r0, #0
   14f40:	bl	10d08 <dcgettext@plt>
   14f44:	ldr	r3, [r5, #24]
   14f48:	str	r3, [sp, #20]
   14f4c:	ldr	r3, [r5, #20]
   14f50:	str	r3, [sp, #16]
   14f54:	ldr	r3, [r5, #16]
   14f58:	str	r3, [sp, #12]
   14f5c:	ldr	r3, [r5, #12]
   14f60:	str	r3, [sp, #8]
   14f64:	ldr	r3, [r5, #8]
   14f68:	str	r3, [sp, #4]
   14f6c:	ldr	r3, [r5, #4]
   14f70:	str	r3, [sp]
   14f74:	ldr	r3, [r5]
   14f78:	mov	r2, r0
   14f7c:	mov	r1, #1
   14f80:	mov	r0, r4
   14f84:	bl	10e1c <__fprintf_chk@plt>
   14f88:	b	14dc8 <__assert_fail@plt+0x3f04>
   14f8c:	mov	r2, #5
   14f90:	movw	r1, #26656	; 0x6820
   14f94:	movt	r1, #1
   14f98:	mov	r0, #0
   14f9c:	bl	10d08 <dcgettext@plt>
   14fa0:	ldr	r3, [r5, #28]
   14fa4:	str	r3, [sp, #24]
   14fa8:	ldr	r3, [r5, #24]
   14fac:	str	r3, [sp, #20]
   14fb0:	ldr	r3, [r5, #20]
   14fb4:	str	r3, [sp, #16]
   14fb8:	ldr	r3, [r5, #16]
   14fbc:	str	r3, [sp, #12]
   14fc0:	ldr	r3, [r5, #12]
   14fc4:	str	r3, [sp, #8]
   14fc8:	ldr	r3, [r5, #8]
   14fcc:	str	r3, [sp, #4]
   14fd0:	ldr	r3, [r5, #4]
   14fd4:	str	r3, [sp]
   14fd8:	ldr	r3, [r5]
   14fdc:	mov	r2, r0
   14fe0:	mov	r1, #1
   14fe4:	mov	r0, r4
   14fe8:	bl	10e1c <__fprintf_chk@plt>
   14fec:	b	14dc8 <__assert_fail@plt+0x3f04>
   14ff0:	mov	r2, #5
   14ff4:	movw	r1, #26704	; 0x6850
   14ff8:	movt	r1, #1
   14ffc:	mov	r0, #0
   15000:	bl	10d08 <dcgettext@plt>
   15004:	ldr	r3, [r5, #32]
   15008:	str	r3, [sp, #28]
   1500c:	ldr	r3, [r5, #28]
   15010:	str	r3, [sp, #24]
   15014:	ldr	r3, [r5, #24]
   15018:	str	r3, [sp, #20]
   1501c:	ldr	r3, [r5, #20]
   15020:	str	r3, [sp, #16]
   15024:	ldr	r3, [r5, #16]
   15028:	str	r3, [sp, #12]
   1502c:	ldr	r3, [r5, #12]
   15030:	str	r3, [sp, #8]
   15034:	ldr	r3, [r5, #8]
   15038:	str	r3, [sp, #4]
   1503c:	ldr	r3, [r5, #4]
   15040:	str	r3, [sp]
   15044:	ldr	r3, [r5]
   15048:	mov	r2, r0
   1504c:	mov	r1, #1
   15050:	mov	r0, r4
   15054:	bl	10e1c <__fprintf_chk@plt>
   15058:	b	14dc8 <__assert_fail@plt+0x3f04>
   1505c:	mov	r2, #5
   15060:	movw	r1, #26756	; 0x6884
   15064:	movt	r1, #1
   15068:	mov	r0, #0
   1506c:	bl	10d08 <dcgettext@plt>
   15070:	ldr	r3, [r5, #32]
   15074:	str	r3, [sp, #28]
   15078:	ldr	r3, [r5, #28]
   1507c:	str	r3, [sp, #24]
   15080:	ldr	r3, [r5, #24]
   15084:	str	r3, [sp, #20]
   15088:	ldr	r3, [r5, #20]
   1508c:	str	r3, [sp, #16]
   15090:	ldr	r3, [r5, #16]
   15094:	str	r3, [sp, #12]
   15098:	ldr	r3, [r5, #12]
   1509c:	str	r3, [sp, #8]
   150a0:	ldr	r3, [r5, #8]
   150a4:	str	r3, [sp, #4]
   150a8:	ldr	r3, [r5, #4]
   150ac:	str	r3, [sp]
   150b0:	ldr	r3, [r5]
   150b4:	mov	r2, r0
   150b8:	mov	r1, #1
   150bc:	mov	r0, r4
   150c0:	bl	10e1c <__fprintf_chk@plt>
   150c4:	b	14dc8 <__assert_fail@plt+0x3f04>
   150c8:	strd	r4, [sp, #-12]!
   150cc:	str	lr, [sp, #8]
   150d0:	sub	sp, sp, #12
   150d4:	ldr	r5, [sp, #24]
   150d8:	ldr	ip, [r5]
   150dc:	cmp	ip, #0
   150e0:	beq	15118 <__assert_fail@plt+0x4254>
   150e4:	mov	lr, r5
   150e8:	mov	ip, #0
   150ec:	add	ip, ip, #1
   150f0:	ldr	r4, [lr, #4]!
   150f4:	cmp	r4, #0
   150f8:	bne	150ec <__assert_fail@plt+0x4228>
   150fc:	str	ip, [sp, #4]
   15100:	str	r5, [sp]
   15104:	bl	14c98 <__assert_fail@plt+0x3dd4>
   15108:	add	sp, sp, #12
   1510c:	ldrd	r4, [sp]
   15110:	add	sp, sp, #8
   15114:	pop	{pc}		; (ldr pc, [sp], #4)
   15118:	mov	ip, #0
   1511c:	b	150fc <__assert_fail@plt+0x4238>
   15120:	strd	r4, [sp, #-12]!
   15124:	str	lr, [sp, #8]
   15128:	sub	sp, sp, #52	; 0x34
   1512c:	ldr	r5, [sp, #64]	; 0x40
   15130:	add	r4, sp, #8
   15134:	mov	ip, #0
   15138:	ldr	lr, [r5], #4
   1513c:	str	lr, [r4], #4
   15140:	cmp	lr, #0
   15144:	beq	15154 <__assert_fail@plt+0x4290>
   15148:	add	ip, ip, #1
   1514c:	cmp	ip, #10
   15150:	bne	15138 <__assert_fail@plt+0x4274>
   15154:	str	ip, [sp, #4]
   15158:	add	ip, sp, #8
   1515c:	str	ip, [sp]
   15160:	bl	14c98 <__assert_fail@plt+0x3dd4>
   15164:	add	sp, sp, #52	; 0x34
   15168:	ldrd	r4, [sp]
   1516c:	add	sp, sp, #8
   15170:	pop	{pc}		; (ldr pc, [sp], #4)
   15174:	push	{r3}		; (str r3, [sp, #-4]!)
   15178:	push	{lr}		; (str lr, [sp, #-4]!)
   1517c:	sub	sp, sp, #16
   15180:	add	r3, sp, #24
   15184:	str	r3, [sp, #12]
   15188:	str	r3, [sp]
   1518c:	ldr	r3, [sp, #20]
   15190:	bl	15120 <__assert_fail@plt+0x425c>
   15194:	add	sp, sp, #16
   15198:	pop	{lr}		; (ldr lr, [sp], #4)
   1519c:	add	sp, sp, #4
   151a0:	bx	lr
   151a4:	str	r4, [sp, #-8]!
   151a8:	str	lr, [sp, #4]
   151ac:	movw	r3, #29012	; 0x7154
   151b0:	movt	r3, #2
   151b4:	ldr	r1, [r3]
   151b8:	mov	r0, #10
   151bc:	bl	10cfc <fputc_unlocked@plt>
   151c0:	mov	r2, #5
   151c4:	movw	r1, #26816	; 0x68c0
   151c8:	movt	r1, #1
   151cc:	mov	r0, #0
   151d0:	bl	10d08 <dcgettext@plt>
   151d4:	movw	r2, #26836	; 0x68d4
   151d8:	movt	r2, #1
   151dc:	mov	r1, r0
   151e0:	mov	r0, #1
   151e4:	bl	10e04 <__printf_chk@plt>
   151e8:	mov	r2, #5
   151ec:	movw	r1, #26860	; 0x68ec
   151f0:	movt	r1, #1
   151f4:	mov	r0, #0
   151f8:	bl	10d08 <dcgettext@plt>
   151fc:	movw	r3, #24540	; 0x5fdc
   15200:	movt	r3, #1
   15204:	movw	r2, #24580	; 0x6004
   15208:	movt	r2, #1
   1520c:	mov	r1, r0
   15210:	mov	r0, #1
   15214:	bl	10e04 <__printf_chk@plt>
   15218:	mov	r2, #5
   1521c:	movw	r1, #26880	; 0x6900
   15220:	movt	r1, #1
   15224:	mov	r0, #0
   15228:	bl	10d08 <dcgettext@plt>
   1522c:	movw	r2, #26920	; 0x6928
   15230:	movt	r2, #1
   15234:	mov	r1, r0
   15238:	mov	r0, #1
   1523c:	bl	10e04 <__printf_chk@plt>
   15240:	ldr	r4, [sp]
   15244:	add	sp, sp, #4
   15248:	pop	{pc}		; (ldr pc, [sp], #4)
   1524c:	str	r4, [sp, #-8]!
   15250:	str	lr, [sp, #4]
   15254:	bl	15798 <__assert_fail@plt+0x48d4>
   15258:	cmp	r0, #0
   1525c:	beq	1526c <__assert_fail@plt+0x43a8>
   15260:	ldr	r4, [sp]
   15264:	add	sp, sp, #4
   15268:	pop	{pc}		; (ldr pc, [sp], #4)
   1526c:	bl	156e0 <__assert_fail@plt+0x481c>
   15270:	str	r4, [sp, #-8]!
   15274:	str	lr, [sp, #4]
   15278:	bl	15798 <__assert_fail@plt+0x48d4>
   1527c:	cmp	r0, #0
   15280:	beq	15290 <__assert_fail@plt+0x43cc>
   15284:	ldr	r4, [sp]
   15288:	add	sp, sp, #4
   1528c:	pop	{pc}		; (ldr pc, [sp], #4)
   15290:	bl	156e0 <__assert_fail@plt+0x481c>
   15294:	str	r4, [sp, #-8]!
   15298:	str	lr, [sp, #4]
   1529c:	bl	1524c <__assert_fail@plt+0x4388>
   152a0:	ldr	r4, [sp]
   152a4:	add	sp, sp, #4
   152a8:	pop	{pc}		; (ldr pc, [sp], #4)
   152ac:	strd	r4, [sp, #-16]!
   152b0:	str	r6, [sp, #8]
   152b4:	str	lr, [sp, #12]
   152b8:	mov	r5, r0
   152bc:	mov	r4, r1
   152c0:	bl	157d4 <__assert_fail@plt+0x4910>
   152c4:	cmp	r0, #0
   152c8:	beq	152dc <__assert_fail@plt+0x4418>
   152cc:	ldrd	r4, [sp]
   152d0:	ldr	r6, [sp, #8]
   152d4:	add	sp, sp, #12
   152d8:	pop	{pc}		; (ldr pc, [sp], #4)
   152dc:	adds	r4, r4, #0
   152e0:	movne	r4, #1
   152e4:	cmp	r5, #0
   152e8:	moveq	r4, #1
   152ec:	cmp	r4, #0
   152f0:	beq	152cc <__assert_fail@plt+0x4408>
   152f4:	bl	156e0 <__assert_fail@plt+0x481c>
   152f8:	str	r4, [sp, #-8]!
   152fc:	str	lr, [sp, #4]
   15300:	cmp	r1, #0
   15304:	orreq	r1, r1, #1
   15308:	bl	157d4 <__assert_fail@plt+0x4910>
   1530c:	cmp	r0, #0
   15310:	beq	15320 <__assert_fail@plt+0x445c>
   15314:	ldr	r4, [sp]
   15318:	add	sp, sp, #4
   1531c:	pop	{pc}		; (ldr pc, [sp], #4)
   15320:	bl	156e0 <__assert_fail@plt+0x481c>
   15324:	strd	r4, [sp, #-16]!
   15328:	str	r6, [sp, #8]
   1532c:	str	lr, [sp, #12]
   15330:	mov	r4, r0
   15334:	mov	r6, r1
   15338:	mov	r5, r2
   1533c:	bl	15970 <__assert_fail@plt+0x4aac>
   15340:	cmp	r0, #0
   15344:	beq	15358 <__assert_fail@plt+0x4494>
   15348:	ldrd	r4, [sp]
   1534c:	ldr	r6, [sp, #8]
   15350:	add	sp, sp, #12
   15354:	pop	{pc}		; (ldr pc, [sp], #4)
   15358:	cmp	r4, #0
   1535c:	beq	1536c <__assert_fail@plt+0x44a8>
   15360:	cmp	r6, #0
   15364:	cmpne	r5, #0
   15368:	beq	15348 <__assert_fail@plt+0x4484>
   1536c:	bl	156e0 <__assert_fail@plt+0x481c>
   15370:	str	r4, [sp, #-8]!
   15374:	str	lr, [sp, #4]
   15378:	bl	15324 <__assert_fail@plt+0x4460>
   1537c:	ldr	r4, [sp]
   15380:	add	sp, sp, #4
   15384:	pop	{pc}		; (ldr pc, [sp], #4)
   15388:	str	r4, [sp, #-8]!
   1538c:	str	lr, [sp, #4]
   15390:	mov	ip, r1
   15394:	mov	r3, r2
   15398:	cmp	r2, #0
   1539c:	cmpne	r1, #0
   153a0:	moveq	r3, #1
   153a4:	moveq	ip, r3
   153a8:	mov	r2, r3
   153ac:	mov	r1, ip
   153b0:	bl	15970 <__assert_fail@plt+0x4aac>
   153b4:	cmp	r0, #0
   153b8:	beq	153c8 <__assert_fail@plt+0x4504>
   153bc:	ldr	r4, [sp]
   153c0:	add	sp, sp, #4
   153c4:	pop	{pc}		; (ldr pc, [sp], #4)
   153c8:	bl	156e0 <__assert_fail@plt+0x481c>
   153cc:	str	r4, [sp, #-8]!
   153d0:	str	lr, [sp, #4]
   153d4:	mov	r2, r1
   153d8:	mov	r1, r0
   153dc:	mov	r0, #0
   153e0:	bl	15324 <__assert_fail@plt+0x4460>
   153e4:	ldr	r4, [sp]
   153e8:	add	sp, sp, #4
   153ec:	pop	{pc}		; (ldr pc, [sp], #4)
   153f0:	str	r4, [sp, #-8]!
   153f4:	str	lr, [sp, #4]
   153f8:	mov	r2, r1
   153fc:	mov	r1, r0
   15400:	mov	r0, #0
   15404:	bl	15388 <__assert_fail@plt+0x44c4>
   15408:	ldr	r4, [sp]
   1540c:	add	sp, sp, #4
   15410:	pop	{pc}		; (ldr pc, [sp], #4)
   15414:	strd	r4, [sp, #-16]!
   15418:	str	r6, [sp, #8]
   1541c:	str	lr, [sp, #12]
   15420:	mov	r5, r1
   15424:	ldr	r4, [r1]
   15428:	cmp	r0, #0
   1542c:	beq	1545c <__assert_fail@plt+0x4598>
   15430:	lsr	r3, r4, #1
   15434:	add	r3, r3, #1
   15438:	adds	r4, r4, r3
   1543c:	bcs	15478 <__assert_fail@plt+0x45b4>
   15440:	mov	r1, r4
   15444:	bl	15324 <__assert_fail@plt+0x4460>
   15448:	str	r4, [r5]
   1544c:	ldrd	r4, [sp]
   15450:	ldr	r6, [sp, #8]
   15454:	add	sp, sp, #12
   15458:	pop	{pc}		; (ldr pc, [sp], #4)
   1545c:	cmp	r4, #0
   15460:	bne	15440 <__assert_fail@plt+0x457c>
   15464:	mov	r4, #64	; 0x40
   15468:	udiv	r4, r4, r2
   1546c:	cmp	r2, #64	; 0x40
   15470:	addhi	r4, r4, #1
   15474:	b	15440 <__assert_fail@plt+0x457c>
   15478:	bl	156e0 <__assert_fail@plt+0x481c>
   1547c:	str	r4, [sp, #-8]!
   15480:	str	lr, [sp, #4]
   15484:	mov	r2, #1
   15488:	bl	15414 <__assert_fail@plt+0x4550>
   1548c:	ldr	r4, [sp]
   15490:	add	sp, sp, #4
   15494:	pop	{pc}		; (ldr pc, [sp], #4)
   15498:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1549c:	strd	r6, [sp, #8]
   154a0:	str	r8, [sp, #16]
   154a4:	str	lr, [sp, #20]
   154a8:	mov	r5, r1
   154ac:	ldr	lr, [sp, #24]
   154b0:	ldr	ip, [r1]
   154b4:	asr	r4, ip, #1
   154b8:	adds	r4, ip, r4
   154bc:	movvs	r1, #1
   154c0:	movvc	r1, #0
   154c4:	cmp	r1, #0
   154c8:	mvnne	r4, #-2147483648	; 0x80000000
   154cc:	mvn	r8, r3
   154d0:	lsr	r8, r8, #31
   154d4:	cmp	r3, r4
   154d8:	movge	r1, #0
   154dc:	andlt	r1, r8, #1
   154e0:	cmp	r1, #0
   154e4:	movne	r4, r3
   154e8:	smull	r6, r7, r4, lr
   154ec:	asr	r1, r6, #31
   154f0:	cmp	r1, r7
   154f4:	bne	1550c <__assert_fail@plt+0x4648>
   154f8:	mov	r1, r6
   154fc:	cmp	r6, #63	; 0x3f
   15500:	movle	r1, #64	; 0x40
   15504:	ble	15510 <__assert_fail@plt+0x464c>
   15508:	b	1551c <__assert_fail@plt+0x4658>
   1550c:	mvn	r1, #-2147483648	; 0x80000000
   15510:	sdiv	r4, r1, lr
   15514:	mls	r6, lr, r4, r1
   15518:	sub	r1, r1, r6
   1551c:	cmp	r0, #0
   15520:	moveq	r6, #0
   15524:	streq	r6, [r5]
   15528:	sub	r6, r4, ip
   1552c:	cmp	r6, r2
   15530:	bge	15568 <__assert_fail@plt+0x46a4>
   15534:	adds	r2, ip, r2
   15538:	mov	r4, r2
   1553c:	bvs	15584 <__assert_fail@plt+0x46c0>
   15540:	cmp	r2, r3
   15544:	movle	r3, #0
   15548:	andgt	r3, r8, #1
   1554c:	cmp	r3, #0
   15550:	bne	15584 <__assert_fail@plt+0x46c0>
   15554:	smull	r2, r3, r2, lr
   15558:	asr	ip, r2, #31
   1555c:	mov	r1, r2
   15560:	cmp	ip, r3
   15564:	bne	15584 <__assert_fail@plt+0x46c0>
   15568:	bl	152ac <__assert_fail@plt+0x43e8>
   1556c:	str	r4, [r5]
   15570:	ldrd	r4, [sp]
   15574:	ldrd	r6, [sp, #8]
   15578:	ldr	r8, [sp, #16]
   1557c:	add	sp, sp, #20
   15580:	pop	{pc}		; (ldr pc, [sp], #4)
   15584:	bl	156e0 <__assert_fail@plt+0x481c>
   15588:	str	r4, [sp, #-8]!
   1558c:	str	lr, [sp, #4]
   15590:	bl	15724 <__assert_fail@plt+0x4860>
   15594:	cmp	r0, #0
   15598:	beq	155a8 <__assert_fail@plt+0x46e4>
   1559c:	ldr	r4, [sp]
   155a0:	add	sp, sp, #4
   155a4:	pop	{pc}		; (ldr pc, [sp], #4)
   155a8:	bl	156e0 <__assert_fail@plt+0x481c>
   155ac:	str	r4, [sp, #-8]!
   155b0:	str	lr, [sp, #4]
   155b4:	mov	r1, #1
   155b8:	bl	15588 <__assert_fail@plt+0x46c4>
   155bc:	ldr	r4, [sp]
   155c0:	add	sp, sp, #4
   155c4:	pop	{pc}		; (ldr pc, [sp], #4)
   155c8:	str	r4, [sp, #-8]!
   155cc:	str	lr, [sp, #4]
   155d0:	bl	15724 <__assert_fail@plt+0x4860>
   155d4:	cmp	r0, #0
   155d8:	beq	155e8 <__assert_fail@plt+0x4724>
   155dc:	ldr	r4, [sp]
   155e0:	add	sp, sp, #4
   155e4:	pop	{pc}		; (ldr pc, [sp], #4)
   155e8:	bl	156e0 <__assert_fail@plt+0x481c>
   155ec:	str	r4, [sp, #-8]!
   155f0:	str	lr, [sp, #4]
   155f4:	mov	r1, #1
   155f8:	bl	155c8 <__assert_fail@plt+0x4704>
   155fc:	ldr	r4, [sp]
   15600:	add	sp, sp, #4
   15604:	pop	{pc}		; (ldr pc, [sp], #4)
   15608:	strd	r4, [sp, #-16]!
   1560c:	str	r6, [sp, #8]
   15610:	str	lr, [sp, #12]
   15614:	mov	r5, r0
   15618:	mov	r4, r1
   1561c:	mov	r0, r1
   15620:	bl	1524c <__assert_fail@plt+0x4388>
   15624:	mov	r2, r4
   15628:	mov	r1, r5
   1562c:	bl	10ccc <memcpy@plt>
   15630:	ldrd	r4, [sp]
   15634:	ldr	r6, [sp, #8]
   15638:	add	sp, sp, #12
   1563c:	pop	{pc}		; (ldr pc, [sp], #4)
   15640:	strd	r4, [sp, #-16]!
   15644:	str	r6, [sp, #8]
   15648:	str	lr, [sp, #12]
   1564c:	mov	r5, r0
   15650:	mov	r4, r1
   15654:	mov	r0, r1
   15658:	bl	15270 <__assert_fail@plt+0x43ac>
   1565c:	mov	r2, r4
   15660:	mov	r1, r5
   15664:	bl	10ccc <memcpy@plt>
   15668:	ldrd	r4, [sp]
   1566c:	ldr	r6, [sp, #8]
   15670:	add	sp, sp, #12
   15674:	pop	{pc}		; (ldr pc, [sp], #4)
   15678:	strd	r4, [sp, #-16]!
   1567c:	str	r6, [sp, #8]
   15680:	str	lr, [sp, #12]
   15684:	mov	r5, r0
   15688:	mov	r4, r1
   1568c:	add	r0, r1, #1
   15690:	bl	15270 <__assert_fail@plt+0x43ac>
   15694:	mov	r2, #0
   15698:	strb	r2, [r0, r4]
   1569c:	mov	r2, r4
   156a0:	mov	r1, r5
   156a4:	bl	10ccc <memcpy@plt>
   156a8:	ldrd	r4, [sp]
   156ac:	ldr	r6, [sp, #8]
   156b0:	add	sp, sp, #12
   156b4:	pop	{pc}		; (ldr pc, [sp], #4)
   156b8:	str	r4, [sp, #-8]!
   156bc:	str	lr, [sp, #4]
   156c0:	mov	r4, r0
   156c4:	bl	10dd4 <strlen@plt>
   156c8:	add	r1, r0, #1
   156cc:	mov	r0, r4
   156d0:	bl	15608 <__assert_fail@plt+0x4744>
   156d4:	ldr	r4, [sp]
   156d8:	add	sp, sp, #4
   156dc:	pop	{pc}		; (ldr pc, [sp], #4)
   156e0:	str	r4, [sp, #-8]!
   156e4:	str	lr, [sp, #4]
   156e8:	movw	r3, #28912	; 0x70f0
   156ec:	movt	r3, #2
   156f0:	ldr	r4, [r3]
   156f4:	mov	r2, #5
   156f8:	movw	r1, #27000	; 0x6978
   156fc:	movt	r1, #1
   15700:	mov	r0, #0
   15704:	bl	10d08 <dcgettext@plt>
   15708:	mov	r3, r0
   1570c:	movw	r2, #25320	; 0x62e8
   15710:	movt	r2, #1
   15714:	mov	r1, #0
   15718:	mov	r0, r4
   1571c:	bl	10d74 <error@plt>
   15720:	bl	10eac <abort@plt>
   15724:	strd	r4, [sp, #-16]!
   15728:	str	r6, [sp, #8]
   1572c:	str	lr, [sp, #12]
   15730:	cmp	r1, #0
   15734:	cmpne	r0, #0
   15738:	beq	15774 <__assert_fail@plt+0x48b0>
   1573c:	mov	r2, r0
   15740:	mov	r3, r1
   15744:	umull	r4, r5, r0, r1
   15748:	adds	r1, r5, #0
   1574c:	movne	r1, #1
   15750:	cmp	r4, #0
   15754:	movlt	r1, #1
   15758:	cmp	r1, #0
   1575c:	beq	1577c <__assert_fail@plt+0x48b8>
   15760:	bl	10de0 <__errno_location@plt>
   15764:	mov	r3, #12
   15768:	str	r3, [r0]
   1576c:	mov	r0, #0
   15770:	b	15788 <__assert_fail@plt+0x48c4>
   15774:	mov	r3, #1
   15778:	mov	r2, r3
   1577c:	mov	r1, r3
   15780:	mov	r0, r2
   15784:	bl	10c6c <calloc@plt>
   15788:	ldrd	r4, [sp]
   1578c:	ldr	r6, [sp, #8]
   15790:	add	sp, sp, #12
   15794:	pop	{pc}		; (ldr pc, [sp], #4)
   15798:	str	r4, [sp, #-8]!
   1579c:	str	lr, [sp, #4]
   157a0:	cmp	r0, #0
   157a4:	beq	157c0 <__assert_fail@plt+0x48fc>
   157a8:	bge	157c4 <__assert_fail@plt+0x4900>
   157ac:	bl	10de0 <__errno_location@plt>
   157b0:	mov	r3, #12
   157b4:	str	r3, [r0]
   157b8:	mov	r0, #0
   157bc:	b	157c8 <__assert_fail@plt+0x4904>
   157c0:	mov	r0, #1
   157c4:	bl	10d80 <malloc@plt>
   157c8:	ldr	r4, [sp]
   157cc:	add	sp, sp, #4
   157d0:	pop	{pc}		; (ldr pc, [sp], #4)
   157d4:	str	r4, [sp, #-8]!
   157d8:	str	lr, [sp, #4]
   157dc:	cmp	r0, #0
   157e0:	beq	15804 <__assert_fail@plt+0x4940>
   157e4:	cmp	r1, #0
   157e8:	beq	15810 <__assert_fail@plt+0x494c>
   157ec:	cmp	r1, #0
   157f0:	blt	1581c <__assert_fail@plt+0x4958>
   157f4:	bl	10d14 <realloc@plt>
   157f8:	ldr	r4, [sp]
   157fc:	add	sp, sp, #4
   15800:	pop	{pc}		; (ldr pc, [sp], #4)
   15804:	mov	r0, r1
   15808:	bl	15798 <__assert_fail@plt+0x48d4>
   1580c:	b	157f8 <__assert_fail@plt+0x4934>
   15810:	bl	1285c <__assert_fail@plt+0x1998>
   15814:	mov	r0, #0
   15818:	b	157f8 <__assert_fail@plt+0x4934>
   1581c:	bl	10de0 <__errno_location@plt>
   15820:	mov	r3, #12
   15824:	str	r3, [r0]
   15828:	mov	r0, #0
   1582c:	b	157f8 <__assert_fail@plt+0x4934>
   15830:	strd	r4, [sp, #-16]!
   15834:	str	r6, [sp, #8]
   15838:	str	lr, [sp, #12]
   1583c:	mov	r5, r0
   15840:	bl	10d5c <__fpending@plt>
   15844:	mov	r6, r0
   15848:	ldr	r4, [r5]
   1584c:	and	r4, r4, #32
   15850:	mov	r0, r5
   15854:	bl	12730 <__assert_fail@plt+0x186c>
   15858:	cmp	r4, #0
   1585c:	bne	15890 <__assert_fail@plt+0x49cc>
   15860:	cmp	r0, #0
   15864:	beq	15880 <__assert_fail@plt+0x49bc>
   15868:	cmp	r6, #0
   1586c:	bne	158ac <__assert_fail@plt+0x49e8>
   15870:	bl	10de0 <__errno_location@plt>
   15874:	ldr	r0, [r0]
   15878:	subs	r0, r0, #9
   1587c:	mvnne	r0, #0
   15880:	ldrd	r4, [sp]
   15884:	ldr	r6, [sp, #8]
   15888:	add	sp, sp, #12
   1588c:	pop	{pc}		; (ldr pc, [sp], #4)
   15890:	cmp	r0, #0
   15894:	bne	158b4 <__assert_fail@plt+0x49f0>
   15898:	bl	10de0 <__errno_location@plt>
   1589c:	mov	r3, #0
   158a0:	str	r3, [r0]
   158a4:	mvn	r0, #0
   158a8:	b	15880 <__assert_fail@plt+0x49bc>
   158ac:	mvn	r0, #0
   158b0:	b	15880 <__assert_fail@plt+0x49bc>
   158b4:	mvn	r0, #0
   158b8:	b	15880 <__assert_fail@plt+0x49bc>
   158bc:	str	r4, [sp, #-8]!
   158c0:	str	lr, [sp, #4]
   158c4:	mov	r0, #14
   158c8:	bl	10e70 <nl_langinfo@plt>
   158cc:	cmp	r0, #0
   158d0:	beq	158f4 <__assert_fail@plt+0x4a30>
   158d4:	ldrb	r2, [r0]
   158d8:	movw	r3, #27020	; 0x698c
   158dc:	movt	r3, #1
   158e0:	cmp	r2, #0
   158e4:	moveq	r0, r3
   158e8:	ldr	r4, [sp]
   158ec:	add	sp, sp, #4
   158f0:	pop	{pc}		; (ldr pc, [sp], #4)
   158f4:	movw	r0, #27020	; 0x698c
   158f8:	movt	r0, #1
   158fc:	b	158e8 <__assert_fail@plt+0x4a24>
   15900:	strd	r4, [sp, #-20]!	; 0xffffffec
   15904:	strd	r6, [sp, #8]
   15908:	str	lr, [sp, #16]
   1590c:	sub	sp, sp, #12
   15910:	mov	r7, r1
   15914:	mov	r5, r2
   15918:	subs	r6, r0, #0
   1591c:	addeq	r6, sp, #4
   15920:	mov	r0, r6
   15924:	bl	10d68 <mbrtowc@plt>
   15928:	mov	r4, r0
   1592c:	cmp	r5, #0
   15930:	cmnne	r0, #3
   15934:	bhi	15950 <__assert_fail@plt+0x4a8c>
   15938:	mov	r0, r4
   1593c:	add	sp, sp, #12
   15940:	ldrd	r4, [sp]
   15944:	ldrd	r6, [sp, #8]
   15948:	add	sp, sp, #16
   1594c:	pop	{pc}		; (ldr pc, [sp], #4)
   15950:	mov	r0, #0
   15954:	bl	159ac <__assert_fail@plt+0x4ae8>
   15958:	cmp	r0, #0
   1595c:	bne	15938 <__assert_fail@plt+0x4a74>
   15960:	ldrb	r3, [r7]
   15964:	str	r3, [r6]
   15968:	mov	r4, #1
   1596c:	b	15938 <__assert_fail@plt+0x4a74>
   15970:	str	r4, [sp, #-8]!
   15974:	str	lr, [sp, #4]
   15978:	umull	r2, r3, r1, r2
   1597c:	cmp	r3, #0
   15980:	bne	15998 <__assert_fail@plt+0x4ad4>
   15984:	mov	r1, r2
   15988:	bl	157d4 <__assert_fail@plt+0x4910>
   1598c:	ldr	r4, [sp]
   15990:	add	sp, sp, #4
   15994:	pop	{pc}		; (ldr pc, [sp], #4)
   15998:	bl	10de0 <__errno_location@plt>
   1599c:	mov	r3, #12
   159a0:	str	r3, [r0]
   159a4:	mov	r0, #0
   159a8:	b	1598c <__assert_fail@plt+0x4ac8>
   159ac:	push	{lr}		; (str lr, [sp, #-4]!)
   159b0:	sub	sp, sp, #268	; 0x10c
   159b4:	movw	r2, #257	; 0x101
   159b8:	add	r1, sp, #4
   159bc:	bl	15a08 <__assert_fail@plt+0x4b44>
   159c0:	cmp	r0, #0
   159c4:	movne	r0, #0
   159c8:	bne	15a00 <__assert_fail@plt+0x4b3c>
   159cc:	movw	r1, #27028	; 0x6994
   159d0:	movt	r1, #1
   159d4:	add	r0, sp, #4
   159d8:	bl	10c90 <strcmp@plt>
   159dc:	cmp	r0, #0
   159e0:	beq	159fc <__assert_fail@plt+0x4b38>
   159e4:	movw	r1, #27032	; 0x6998
   159e8:	movt	r1, #1
   159ec:	add	r0, sp, #4
   159f0:	bl	10c90 <strcmp@plt>
   159f4:	adds	r0, r0, #0
   159f8:	movne	r0, #1
   159fc:	and	r0, r0, #1
   15a00:	add	sp, sp, #268	; 0x10c
   15a04:	pop	{pc}		; (ldr pc, [sp], #4)
   15a08:	strd	r4, [sp, #-16]!
   15a0c:	str	r6, [sp, #8]
   15a10:	str	lr, [sp, #12]
   15a14:	mov	r6, r1
   15a18:	mov	r4, r2
   15a1c:	mov	r1, #0
   15a20:	bl	10e58 <setlocale@plt>
   15a24:	subs	r5, r0, #0
   15a28:	beq	15a6c <__assert_fail@plt+0x4ba8>
   15a2c:	mov	r0, r5
   15a30:	bl	10dd4 <strlen@plt>
   15a34:	cmp	r4, r0
   15a38:	bhi	15a88 <__assert_fail@plt+0x4bc4>
   15a3c:	cmp	r4, #0
   15a40:	moveq	r0, #34	; 0x22
   15a44:	beq	15a9c <__assert_fail@plt+0x4bd8>
   15a48:	sub	r4, r4, #1
   15a4c:	mov	r2, r4
   15a50:	mov	r1, r5
   15a54:	mov	r0, r6
   15a58:	bl	10ccc <memcpy@plt>
   15a5c:	mov	r3, #0
   15a60:	strb	r3, [r6, r4]
   15a64:	mov	r0, #34	; 0x22
   15a68:	b	15a9c <__assert_fail@plt+0x4bd8>
   15a6c:	cmp	r4, #0
   15a70:	moveq	r0, #22
   15a74:	beq	15a9c <__assert_fail@plt+0x4bd8>
   15a78:	mov	r3, #0
   15a7c:	strb	r3, [r6]
   15a80:	mov	r0, #22
   15a84:	b	15a9c <__assert_fail@plt+0x4bd8>
   15a88:	add	r2, r0, #1
   15a8c:	mov	r1, r5
   15a90:	mov	r0, r6
   15a94:	bl	10ccc <memcpy@plt>
   15a98:	mov	r0, #0
   15a9c:	ldrd	r4, [sp]
   15aa0:	ldr	r6, [sp, #8]
   15aa4:	add	sp, sp, #12
   15aa8:	pop	{pc}		; (ldr pc, [sp], #4)
   15aac:	str	r4, [sp, #-8]!
   15ab0:	str	lr, [sp, #4]
   15ab4:	mov	r1, #0
   15ab8:	bl	10e58 <setlocale@plt>
   15abc:	ldr	r4, [sp]
   15ac0:	add	sp, sp, #4
   15ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ac8:	cmp	r3, #0
   15acc:	cmpeq	r2, #0
   15ad0:	bne	15ae8 <__assert_fail@plt+0x4c24>
   15ad4:	cmp	r1, #0
   15ad8:	cmpeq	r0, #0
   15adc:	mvnne	r1, #0
   15ae0:	mvnne	r0, #0
   15ae4:	b	15b04 <__assert_fail@plt+0x4c40>
   15ae8:	sub	sp, sp, #8
   15aec:	push	{sp, lr}
   15af0:	bl	15b14 <__assert_fail@plt+0x4c50>
   15af4:	ldr	lr, [sp, #4]
   15af8:	add	sp, sp, #8
   15afc:	pop	{r2, r3}
   15b00:	bx	lr
   15b04:	push	{r1, lr}
   15b08:	mov	r0, #8
   15b0c:	bl	10c84 <raise@plt>
   15b10:	pop	{r1, pc}
   15b14:	cmp	r1, r3
   15b18:	cmpeq	r0, r2
   15b1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b20:	mov	r4, r0
   15b24:	movcc	r0, #0
   15b28:	mov	r5, r1
   15b2c:	ldr	lr, [sp, #36]	; 0x24
   15b30:	movcc	r1, r0
   15b34:	bcc	15c30 <__assert_fail@plt+0x4d6c>
   15b38:	cmp	r3, #0
   15b3c:	clzeq	ip, r2
   15b40:	clzne	ip, r3
   15b44:	addeq	ip, ip, #32
   15b48:	cmp	r5, #0
   15b4c:	clzeq	r1, r4
   15b50:	addeq	r1, r1, #32
   15b54:	clzne	r1, r5
   15b58:	sub	ip, ip, r1
   15b5c:	sub	sl, ip, #32
   15b60:	lsl	r9, r3, ip
   15b64:	rsb	fp, ip, #32
   15b68:	orr	r9, r9, r2, lsl sl
   15b6c:	orr	r9, r9, r2, lsr fp
   15b70:	lsl	r8, r2, ip
   15b74:	cmp	r5, r9
   15b78:	cmpeq	r4, r8
   15b7c:	movcc	r0, #0
   15b80:	movcc	r1, r0
   15b84:	bcc	15ba0 <__assert_fail@plt+0x4cdc>
   15b88:	mov	r0, #1
   15b8c:	subs	r4, r4, r8
   15b90:	lsl	r1, r0, sl
   15b94:	orr	r1, r1, r0, lsr fp
   15b98:	lsl	r0, r0, ip
   15b9c:	sbc	r5, r5, r9
   15ba0:	cmp	ip, #0
   15ba4:	beq	15c30 <__assert_fail@plt+0x4d6c>
   15ba8:	lsr	r6, r8, #1
   15bac:	orr	r6, r6, r9, lsl #31
   15bb0:	lsr	r7, r9, #1
   15bb4:	mov	r2, ip
   15bb8:	b	15bdc <__assert_fail@plt+0x4d18>
   15bbc:	subs	r3, r4, r6
   15bc0:	sbc	r8, r5, r7
   15bc4:	adds	r3, r3, r3
   15bc8:	adc	r8, r8, r8
   15bcc:	adds	r4, r3, #1
   15bd0:	adc	r5, r8, #0
   15bd4:	subs	r2, r2, #1
   15bd8:	beq	15bf8 <__assert_fail@plt+0x4d34>
   15bdc:	cmp	r5, r7
   15be0:	cmpeq	r4, r6
   15be4:	bcs	15bbc <__assert_fail@plt+0x4cf8>
   15be8:	adds	r4, r4, r4
   15bec:	adc	r5, r5, r5
   15bf0:	subs	r2, r2, #1
   15bf4:	bne	15bdc <__assert_fail@plt+0x4d18>
   15bf8:	lsr	r3, r4, ip
   15bfc:	orr	r3, r3, r5, lsl fp
   15c00:	lsr	r2, r5, ip
   15c04:	orr	r3, r3, r5, lsr sl
   15c08:	adds	r0, r0, r4
   15c0c:	mov	r4, r3
   15c10:	lsl	r3, r2, ip
   15c14:	orr	r3, r3, r4, lsl sl
   15c18:	lsl	ip, r4, ip
   15c1c:	orr	r3, r3, r4, lsr fp
   15c20:	adc	r1, r1, r5
   15c24:	subs	r0, r0, ip
   15c28:	mov	r5, r2
   15c2c:	sbc	r1, r1, r3
   15c30:	cmp	lr, #0
   15c34:	strdne	r4, [lr]
   15c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15c40:	mov	r7, r0
   15c44:	ldr	r6, [pc, #72]	; 15c94 <__assert_fail@plt+0x4dd0>
   15c48:	ldr	r5, [pc, #72]	; 15c98 <__assert_fail@plt+0x4dd4>
   15c4c:	add	r6, pc, r6
   15c50:	add	r5, pc, r5
   15c54:	sub	r6, r6, r5
   15c58:	mov	r8, r1
   15c5c:	mov	r9, r2
   15c60:	bl	10c4c <calloc@plt-0x20>
   15c64:	asrs	r6, r6, #2
   15c68:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15c6c:	mov	r4, #0
   15c70:	add	r4, r4, #1
   15c74:	ldr	r3, [r5], #4
   15c78:	mov	r2, r9
   15c7c:	mov	r1, r8
   15c80:	mov	r0, r7
   15c84:	blx	r3
   15c88:	cmp	r6, r4
   15c8c:	bne	15c70 <__assert_fail@plt+0x4dac>
   15c90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15c94:	andeq	r1, r1, r0, asr #5
   15c98:			; <UNDEFINED> instruction: 0x000112b8
   15c9c:	bx	lr
   15ca0:	ldr	r3, [pc, #12]	; 15cb4 <__assert_fail@plt+0x4df0>
   15ca4:	mov	r1, #0
   15ca8:	add	r3, pc, r3
   15cac:	ldr	r2, [r3]
   15cb0:	b	10dec <__cxa_atexit@plt>
   15cb4:	andeq	r1, r1, r0, lsr r4

Disassembly of section .fini:

00015cb8 <.fini>:
   15cb8:	push	{r3, lr}
   15cbc:	pop	{r3, pc}
