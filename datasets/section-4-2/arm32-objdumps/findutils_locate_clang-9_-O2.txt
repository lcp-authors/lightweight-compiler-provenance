
../repos/findutils/locate/locate:     file format elf32-littlearm


Disassembly of section .init:

000117e8 <.init>:
   117e8:	push	{r3, lr}
   117ec:	bl	11cfc <__assert_fail@plt+0x50>
   117f0:	pop	{r3, pc}

Disassembly of section .plt:

000117f4 <pthread_mutex_unlock@plt-0x14>:
   117f4:	push	{lr}		; (str lr, [sp, #-4]!)
   117f8:	ldr	lr, [pc, #4]	; 11804 <pthread_mutex_unlock@plt-0x4>
   117fc:	add	lr, pc, lr
   11800:	ldr	pc, [lr, #8]!
   11804:	strdeq	r0, [r3], -ip

00011808 <pthread_mutex_unlock@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #48, 20	; 0x30000
   11810:	ldr	pc, [ip, #2044]!	; 0x7fc

00011814 <fdopen@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #48, 20	; 0x30000
   1181c:	ldr	pc, [ip, #2036]!	; 0x7f4

00011820 <calloc@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #48, 20	; 0x30000
   11828:	ldr	pc, [ip, #2028]!	; 0x7ec

0001182c <wctype@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #48, 20	; 0x30000
   11834:	ldr	pc, [ip, #2020]!	; 0x7e4

00011838 <raise@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #48, 20	; 0x30000
   11840:	ldr	pc, [ip, #2012]!	; 0x7dc

00011844 <wcrtomb@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #48, 20	; 0x30000
   1184c:	ldr	pc, [ip, #2004]!	; 0x7d4

00011850 <iswctype@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #48, 20	; 0x30000
   11858:	ldr	pc, [ip, #1996]!	; 0x7cc

0001185c <strcmp@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #48, 20	; 0x30000
   11864:	ldr	pc, [ip, #1988]!	; 0x7c4

00011868 <printf@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #48, 20	; 0x30000
   11870:	ldr	pc, [ip, #1980]!	; 0x7bc

00011874 <pthread_mutex_destroy@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #48, 20	; 0x30000
   1187c:	ldr	pc, [ip, #1972]!	; 0x7b4

00011880 <fflush@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #48, 20	; 0x30000
   11888:	ldr	pc, [ip, #1964]!	; 0x7ac

0001188c <wcwidth@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #48, 20	; 0x30000
   11894:	ldr	pc, [ip, #1956]!	; 0x7a4

00011898 <getuid@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #48, 20	; 0x30000
   118a0:	ldr	pc, [ip, #1948]!	; 0x79c

000118a4 <memmove@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #48, 20	; 0x30000
   118ac:	ldr	pc, [ip, #1940]!	; 0x794

000118b0 <free@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #48, 20	; 0x30000
   118b8:	ldr	pc, [ip, #1932]!	; 0x78c

000118bc <pthread_mutex_lock@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #48, 20	; 0x30000
   118c4:	ldr	pc, [ip, #1924]!	; 0x784

000118c8 <ferror@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #48, 20	; 0x30000
   118d0:	ldr	pc, [ip, #1916]!	; 0x77c

000118d4 <strndup@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #48, 20	; 0x30000
   118dc:	ldr	pc, [ip, #1908]!	; 0x774

000118e0 <_exit@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #48, 20	; 0x30000
   118e8:	ldr	pc, [ip, #1900]!	; 0x76c

000118ec <memcpy@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #48, 20	; 0x30000
   118f4:	ldr	pc, [ip, #1892]!	; 0x764

000118f8 <pthread_mutex_init@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #48, 20	; 0x30000
   11900:	ldr	pc, [ip, #1884]!	; 0x75c

00011904 <__strtoull_internal@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #48, 20	; 0x30000
   1190c:	ldr	pc, [ip, #1876]!	; 0x754

00011910 <towlower@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #48, 20	; 0x30000
   11918:	ldr	pc, [ip, #1868]!	; 0x74c

0001191c <mbsinit@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #48, 20	; 0x30000
   11924:	ldr	pc, [ip, #1860]!	; 0x744

00011928 <time@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #48, 20	; 0x30000
   11930:	ldr	pc, [ip, #1852]!	; 0x73c

00011934 <dcgettext@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #48, 20	; 0x30000
   1193c:	ldr	pc, [ip, #1844]!	; 0x734

00011940 <realloc@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #48, 20	; 0x30000
   11948:	ldr	pc, [ip, #1836]!	; 0x72c

0001194c <textdomain@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #48, 20	; 0x30000
   11954:	ldr	pc, [ip, #1828]!	; 0x724

00011958 <iswcntrl@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #48, 20	; 0x30000
   11960:	ldr	pc, [ip, #1820]!	; 0x71c

00011964 <geteuid@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #48, 20	; 0x30000
   1196c:	ldr	pc, [ip, #1812]!	; 0x714

00011970 <iswprint@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #48, 20	; 0x30000
   11978:	ldr	pc, [ip, #1804]!	; 0x70c

0001197c <setgroups@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #48, 20	; 0x30000
   11984:	ldr	pc, [ip, #1796]!	; 0x704

00011988 <__fxstat64@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #48, 20	; 0x30000
   11990:	ldr	pc, [ip, #1788]!	; 0x6fc

00011994 <fwrite@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #48, 20	; 0x30000
   1199c:	ldr	pc, [ip, #1780]!	; 0x6f4

000119a0 <lseek64@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #48, 20	; 0x30000
   119a8:	ldr	pc, [ip, #1772]!	; 0x6ec

000119ac <__ctype_get_mb_cur_max@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #48, 20	; 0x30000
   119b4:	ldr	pc, [ip, #1764]!	; 0x6e4

000119b8 <fread@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #48, 20	; 0x30000
   119c0:	ldr	pc, [ip, #1756]!	; 0x6dc

000119c4 <__fpending@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #48, 20	; 0x30000
   119cc:	ldr	pc, [ip, #1748]!	; 0x6d4

000119d0 <mbrtowc@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #48, 20	; 0x30000
   119d8:	ldr	pc, [ip, #1740]!	; 0x6cc

000119dc <error@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #48, 20	; 0x30000
   119e4:	ldr	pc, [ip, #1732]!	; 0x6c4

000119e8 <fnmatch@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #48, 20	; 0x30000
   119f0:	ldr	pc, [ip, #1724]!	; 0x6bc

000119f4 <open64@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #48, 20	; 0x30000
   119fc:	ldr	pc, [ip, #1716]!	; 0x6b4

00011a00 <getenv@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #48, 20	; 0x30000
   11a08:	ldr	pc, [ip, #1708]!	; 0x6ac

00011a0c <setgid@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #48, 20	; 0x30000
   11a14:	ldr	pc, [ip, #1700]!	; 0x6a4

00011a18 <malloc@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #48, 20	; 0x30000
   11a20:	ldr	pc, [ip, #1692]!	; 0x69c

00011a24 <__libc_start_main@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #48, 20	; 0x30000
   11a2c:	ldr	pc, [ip, #1684]!	; 0x694

00011a30 <strftime@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #48, 20	; 0x30000
   11a38:	ldr	pc, [ip, #1676]!	; 0x68c

00011a3c <__freading@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #48, 20	; 0x30000
   11a44:	ldr	pc, [ip, #1668]!	; 0x684

00011a48 <localtime@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #48, 20	; 0x30000
   11a50:	ldr	pc, [ip, #1660]!	; 0x67c

00011a54 <__ctype_tolower_loc@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #48, 20	; 0x30000
   11a5c:	ldr	pc, [ip, #1652]!	; 0x674

00011a60 <__ctype_toupper_loc@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #48, 20	; 0x30000
   11a68:	ldr	pc, [ip, #1644]!	; 0x66c

00011a6c <__gmon_start__@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #48, 20	; 0x30000
   11a74:	ldr	pc, [ip, #1636]!	; 0x664

00011a78 <getopt_long@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #48, 20	; 0x30000
   11a80:	ldr	pc, [ip, #1628]!	; 0x65c

00011a84 <__ctype_b_loc@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #48, 20	; 0x30000
   11a8c:	ldr	pc, [ip, #1620]!	; 0x654

00011a90 <exit@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #48, 20	; 0x30000
   11a98:	ldr	pc, [ip, #1612]!	; 0x64c

00011a9c <feof@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #48, 20	; 0x30000
   11aa4:	ldr	pc, [ip, #1604]!	; 0x644

00011aa8 <bcmp@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #48, 20	; 0x30000
   11ab0:	ldr	pc, [ip, #1596]!	; 0x63c

00011ab4 <strtoul@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #48, 20	; 0x30000
   11abc:	ldr	pc, [ip, #1588]!	; 0x634

00011ac0 <strlen@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #48, 20	; 0x30000
   11ac8:	ldr	pc, [ip, #1580]!	; 0x62c

00011acc <strchr@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #48, 20	; 0x30000
   11ad4:	ldr	pc, [ip, #1572]!	; 0x624

00011ad8 <fprintf@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #48, 20	; 0x30000
   11ae0:	ldr	pc, [ip, #1564]!	; 0x61c

00011ae4 <ungetc@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #48, 20	; 0x30000
   11aec:	ldr	pc, [ip, #1556]!	; 0x614

00011af0 <__errno_location@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #48, 20	; 0x30000
   11af8:	ldr	pc, [ip, #1548]!	; 0x60c

00011afc <iswalnum@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #48, 20	; 0x30000
   11b04:	ldr	pc, [ip, #1540]!	; 0x604

00011b08 <strncasecmp@plt>:
   11b08:	add	ip, pc, #0, 12
   11b0c:	add	ip, ip, #48, 20	; 0x30000
   11b10:	ldr	pc, [ip, #1532]!	; 0x5fc

00011b14 <__cxa_atexit@plt>:
   11b14:	add	ip, pc, #0, 12
   11b18:	add	ip, ip, #48, 20	; 0x30000
   11b1c:	ldr	pc, [ip, #1524]!	; 0x5f4

00011b20 <getgid@plt>:
   11b20:	add	ip, pc, #0, 12
   11b24:	add	ip, ip, #48, 20	; 0x30000
   11b28:	ldr	pc, [ip, #1516]!	; 0x5ec

00011b2c <memset@plt>:
   11b2c:	add	ip, pc, #0, 12
   11b30:	add	ip, ip, #48, 20	; 0x30000
   11b34:	ldr	pc, [ip, #1508]!	; 0x5e4

00011b38 <btowc@plt>:
   11b38:	add	ip, pc, #0, 12
   11b3c:	add	ip, ip, #48, 20	; 0x30000
   11b40:	ldr	pc, [ip, #1500]!	; 0x5dc

00011b44 <fgetc@plt>:
   11b44:	add	ip, pc, #0, 12
   11b48:	add	ip, ip, #48, 20	; 0x30000
   11b4c:	ldr	pc, [ip, #1492]!	; 0x5d4

00011b50 <fileno@plt>:
   11b50:	add	ip, pc, #0, 12
   11b54:	add	ip, ip, #48, 20	; 0x30000
   11b58:	ldr	pc, [ip, #1484]!	; 0x5cc

00011b5c <difftime@plt>:
   11b5c:	add	ip, pc, #0, 12
   11b60:	add	ip, ip, #48, 20	; 0x30000
   11b64:	ldr	pc, [ip, #1476]!	; 0x5c4

00011b68 <memchr@plt>:
   11b68:	add	ip, pc, #0, 12
   11b6c:	add	ip, ip, #48, 20	; 0x30000
   11b70:	ldr	pc, [ip, #1468]!	; 0x5bc

00011b74 <fclose@plt>:
   11b74:	add	ip, pc, #0, 12
   11b78:	add	ip, ip, #48, 20	; 0x30000
   11b7c:	ldr	pc, [ip, #1460]!	; 0x5b4

00011b80 <strnlen@plt>:
   11b80:	add	ip, pc, #0, 12
   11b84:	add	ip, ip, #48, 20	; 0x30000
   11b88:	ldr	pc, [ip, #1452]!	; 0x5ac

00011b8c <fseeko64@plt>:
   11b8c:	add	ip, pc, #0, 12
   11b90:	add	ip, ip, #48, 20	; 0x30000
   11b94:	ldr	pc, [ip, #1444]!	; 0x5a4

00011b98 <fcntl64@plt>:
   11b98:	add	ip, pc, #0, 12
   11b9c:	add	ip, ip, #48, 20	; 0x30000
   11ba0:	ldr	pc, [ip, #1436]!	; 0x59c

00011ba4 <setlocale@plt>:
   11ba4:	add	ip, pc, #0, 12
   11ba8:	add	ip, ip, #48, 20	; 0x30000
   11bac:	ldr	pc, [ip, #1428]!	; 0x594

00011bb0 <strrchr@plt>:
   11bb0:	add	ip, pc, #0, 12
   11bb4:	add	ip, ip, #48, 20	; 0x30000
   11bb8:	ldr	pc, [ip, #1420]!	; 0x58c

00011bbc <nl_langinfo@plt>:
   11bbc:	add	ip, pc, #0, 12
   11bc0:	add	ip, ip, #48, 20	; 0x30000
   11bc4:	ldr	pc, [ip, #1412]!	; 0x584

00011bc8 <fputc@plt>:
   11bc8:	add	ip, pc, #0, 12
   11bcc:	add	ip, ip, #48, 20	; 0x30000
   11bd0:	ldr	pc, [ip, #1404]!	; 0x57c

00011bd4 <setuid@plt>:
   11bd4:	add	ip, pc, #0, 12
   11bd8:	add	ip, ip, #48, 20	; 0x30000
   11bdc:	ldr	pc, [ip, #1396]!	; 0x574

00011be0 <localeconv@plt>:
   11be0:	add	ip, pc, #0, 12
   11be4:	add	ip, ip, #48, 20	; 0x30000
   11be8:	ldr	pc, [ip, #1388]!	; 0x56c

00011bec <clearerr@plt>:
   11bec:	add	ip, pc, #0, 12
   11bf0:	add	ip, ip, #48, 20	; 0x30000
   11bf4:	ldr	pc, [ip, #1380]!	; 0x564

00011bf8 <sprintf@plt>:
   11bf8:	add	ip, pc, #0, 12
   11bfc:	add	ip, ip, #48, 20	; 0x30000
   11c00:	ldr	pc, [ip, #1372]!	; 0x55c

00011c04 <putc@plt>:
   11c04:	add	ip, pc, #0, 12
   11c08:	add	ip, ip, #48, 20	; 0x30000
   11c0c:	ldr	pc, [ip, #1364]!	; 0x554

00011c10 <strpbrk@plt>:
   11c10:	add	ip, pc, #0, 12
   11c14:	add	ip, ip, #48, 20	; 0x30000
   11c18:	ldr	pc, [ip, #1356]!	; 0x54c

00011c1c <bindtextdomain@plt>:
   11c1c:	add	ip, pc, #0, 12
   11c20:	add	ip, ip, #48, 20	; 0x30000
   11c24:	ldr	pc, [ip, #1348]!	; 0x544

00011c28 <getdelim@plt>:
   11c28:	add	ip, pc, #0, 12
   11c2c:	add	ip, ip, #48, 20	; 0x30000
   11c30:	ldr	pc, [ip, #1340]!	; 0x53c

00011c34 <__xstat64@plt>:
   11c34:	add	ip, pc, #0, 12
   11c38:	add	ip, ip, #48, 20	; 0x30000
   11c3c:	ldr	pc, [ip, #1332]!	; 0x534

00011c40 <isatty@plt>:
   11c40:	add	ip, pc, #0, 12
   11c44:	add	ip, ip, #48, 20	; 0x30000
   11c48:	ldr	pc, [ip, #1324]!	; 0x52c

00011c4c <towupper@plt>:
   11c4c:	add	ip, pc, #0, 12
   11c50:	add	ip, ip, #48, 20	; 0x30000
   11c54:	ldr	pc, [ip, #1316]!	; 0x524

00011c58 <fputs@plt>:
   11c58:	add	ip, pc, #0, 12
   11c5c:	add	ip, ip, #48, 20	; 0x30000
   11c60:	ldr	pc, [ip, #1308]!	; 0x51c

00011c64 <strncmp@plt>:
   11c64:	add	ip, pc, #0, 12
   11c68:	add	ip, ip, #48, 20	; 0x30000
   11c6c:	ldr	pc, [ip, #1300]!	; 0x514

00011c70 <abort@plt>:
   11c70:	add	ip, pc, #0, 12
   11c74:	add	ip, ip, #48, 20	; 0x30000
   11c78:	ldr	pc, [ip, #1292]!	; 0x50c

00011c7c <getc@plt>:
   11c7c:	add	ip, pc, #0, 12
   11c80:	add	ip, ip, #48, 20	; 0x30000
   11c84:	ldr	pc, [ip, #1284]!	; 0x504

00011c88 <close@plt>:
   11c88:	add	ip, pc, #0, 12
   11c8c:	add	ip, ip, #48, 20	; 0x30000
   11c90:	ldr	pc, [ip, #1276]!	; 0x4fc

00011c94 <__lxstat64@plt>:
   11c94:	add	ip, pc, #0, 12
   11c98:	add	ip, ip, #48, 20	; 0x30000
   11c9c:	ldr	pc, [ip, #1268]!	; 0x4f4

00011ca0 <dcngettext@plt>:
   11ca0:	add	ip, pc, #0, 12
   11ca4:	add	ip, ip, #48, 20	; 0x30000
   11ca8:	ldr	pc, [ip, #1260]!	; 0x4ec

00011cac <__assert_fail@plt>:
   11cac:	add	ip, pc, #0, 12
   11cb0:	add	ip, ip, #48, 20	; 0x30000
   11cb4:	ldr	pc, [ip, #1252]!	; 0x4e4

Disassembly of section .text:

00011cc0 <.text>:
   11cc0:	mov	fp, #0
   11cc4:	mov	lr, #0
   11cc8:	pop	{r1}		; (ldr r1, [sp], #4)
   11ccc:	mov	r2, sp
   11cd0:	push	{r2}		; (str r2, [sp, #-4]!)
   11cd4:	push	{r0}		; (str r0, [sp, #-4]!)
   11cd8:	ldr	ip, [pc, #16]	; 11cf0 <__assert_fail@plt+0x44>
   11cdc:	push	{ip}		; (str ip, [sp, #-4]!)
   11ce0:	ldr	r0, [pc, #12]	; 11cf4 <__assert_fail@plt+0x48>
   11ce4:	ldr	r3, [pc, #12]	; 11cf8 <__assert_fail@plt+0x4c>
   11ce8:	bl	11a24 <__libc_start_main@plt>
   11cec:	bl	11c70 <abort@plt>
   11cf0:	andeq	pc, r2, r8, asr ip	; <UNPREDICTABLE>
   11cf4:			; <UNDEFINED> instruction: 0x00011db0
   11cf8:	strdeq	pc, [r2], -r8
   11cfc:	ldr	r3, [pc, #20]	; 11d18 <__assert_fail@plt+0x6c>
   11d00:	ldr	r2, [pc, #20]	; 11d1c <__assert_fail@plt+0x70>
   11d04:	add	r3, pc, r3
   11d08:	ldr	r2, [r3, r2]
   11d0c:	cmp	r2, #0
   11d10:	bxeq	lr
   11d14:	b	11a6c <__gmon_start__@plt>
   11d18:	strdeq	r0, [r3], -r4
   11d1c:	muleq	r0, ip, r1
   11d20:	ldr	r0, [pc, #24]	; 11d40 <__assert_fail@plt+0x94>
   11d24:	ldr	r3, [pc, #24]	; 11d44 <__assert_fail@plt+0x98>
   11d28:	cmp	r3, r0
   11d2c:	bxeq	lr
   11d30:	ldr	r3, [pc, #16]	; 11d48 <__assert_fail@plt+0x9c>
   11d34:	cmp	r3, #0
   11d38:	bxeq	lr
   11d3c:	bx	r3
   11d40:	strdeq	r2, [r4], -ip
   11d44:	strdeq	r2, [r4], -ip
   11d48:	andeq	r0, r0, r0
   11d4c:	ldr	r0, [pc, #36]	; 11d78 <__assert_fail@plt+0xcc>
   11d50:	ldr	r1, [pc, #36]	; 11d7c <__assert_fail@plt+0xd0>
   11d54:	sub	r1, r1, r0
   11d58:	asr	r1, r1, #2
   11d5c:	add	r1, r1, r1, lsr #31
   11d60:	asrs	r1, r1, #1
   11d64:	bxeq	lr
   11d68:	ldr	r3, [pc, #16]	; 11d80 <__assert_fail@plt+0xd4>
   11d6c:	cmp	r3, #0
   11d70:	bxeq	lr
   11d74:	bx	r3
   11d78:	strdeq	r2, [r4], -ip
   11d7c:	strdeq	r2, [r4], -ip
   11d80:	andeq	r0, r0, r0
   11d84:	push	{r4, lr}
   11d88:	ldr	r4, [pc, #24]	; 11da8 <__assert_fail@plt+0xfc>
   11d8c:	ldrb	r3, [r4]
   11d90:	cmp	r3, #0
   11d94:	popne	{r4, pc}
   11d98:	bl	11d20 <__assert_fail@plt+0x74>
   11d9c:	mov	r3, #1
   11da0:	strb	r3, [r4]
   11da4:	pop	{r4, pc}
   11da8:	andeq	r2, r4, ip, lsl r2
   11dac:	b	11d4c <__assert_fail@plt+0xa0>
   11db0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11db4:	add	fp, sp, #28
   11db8:	sub	sp, sp, #4
   11dbc:	vpush	{d8-d12}
   11dc0:	sub	sp, sp, #3248	; 0xcb0
   11dc4:	str	r0, [sp, #160]	; 0xa0
   11dc8:	movw	r0, #64644	; 0xfc84
   11dcc:	mov	r8, r1
   11dd0:	mov	r1, #131072	; 0x20000
   11dd4:	movt	r0, #2
   11dd8:	bl	15320 <__assert_fail@plt+0x3674>
   11ddc:	movw	r4, #2344	; 0x928
   11de0:	cmp	r0, #0
   11de4:	movt	r4, #3
   11de8:	bmi	11e0c <__assert_fail@plt+0x160>
   11dec:	mov	r1, #2
   11df0:	mov	r2, #1
   11df4:	mov	r5, r0
   11df8:	bl	1b2ac <__assert_fail@plt+0x9600>
   11dfc:	cmp	r0, #0
   11e00:	beq	11e50 <__assert_fail@plt+0x1a4>
   11e04:	mov	r0, r5
   11e08:	bl	11c88 <close@plt>
   11e0c:	movw	r0, #64668	; 0xfc9c
   11e10:	mov	r1, #131072	; 0x20000
   11e14:	movt	r0, #2
   11e18:	bl	15320 <__assert_fail@plt+0x3674>
   11e1c:	cmp	r0, #0
   11e20:	bmi	11e44 <__assert_fail@plt+0x198>
   11e24:	mov	r1, #2
   11e28:	mov	r2, #1
   11e2c:	mov	r5, r0
   11e30:	bl	1b2ac <__assert_fail@plt+0x9600>
   11e34:	cmp	r0, #0
   11e38:	beq	11e58 <__assert_fail@plt+0x1ac>
   11e3c:	mov	r0, r5
   11e40:	bl	11c88 <close@plt>
   11e44:	mvn	r0, #0
   11e48:	str	r0, [sp, #132]	; 0x84
   11e4c:	b	11e70 <__assert_fail@plt+0x1c4>
   11e50:	str	r5, [sp, #132]	; 0x84
   11e54:	b	11e60 <__assert_fail@plt+0x1b4>
   11e58:	str	r5, [sp, #132]	; 0x84
   11e5c:	add	r4, r4, #4
   11e60:	ldr	r0, [r4]
   11e64:	movw	r1, #8736	; 0x2220
   11e68:	movt	r1, #4
   11e6c:	str	r0, [r1]
   11e70:	bl	11964 <geteuid@plt>
   11e74:	mov	r5, r0
   11e78:	bl	11898 <getuid@plt>
   11e7c:	mov	r6, r0
   11e80:	bl	11b20 <getgid@plt>
   11e84:	mov	r4, r0
   11e88:	cmp	r5, #0
   11e8c:	bne	11ea8 <__assert_fail@plt+0x1fc>
   11e90:	sub	r1, fp, #728	; 0x2d8
   11e94:	mov	r0, #1
   11e98:	str	r4, [fp, #-728]	; 0xfffffd28
   11e9c:	bl	1197c <setgroups@plt>
   11ea0:	cmp	r0, #0
   11ea4:	bne	13b74 <__assert_fail@plt+0x1ec8>
   11ea8:	bl	11af0 <__errno_location@plt>
   11eac:	cmp	r6, r5
   11eb0:	str	r0, [sp, #196]	; 0xc4
   11eb4:	cmpne	r6, #0
   11eb8:	beq	11eec <__assert_fail@plt+0x240>
   11ebc:	ldr	r1, [sp, #196]	; 0xc4
   11ec0:	mov	r0, #0
   11ec4:	str	r0, [r1]
   11ec8:	bl	11898 <getuid@plt>
   11ecc:	bl	11bd4 <setuid@plt>
   11ed0:	cmp	r0, #0
   11ed4:	bne	13b98 <__assert_fail@plt+0x1eec>
   11ed8:	mov	r0, #0
   11edc:	mov	r5, #0
   11ee0:	bl	11bd4 <setuid@plt>
   11ee4:	cmp	r0, #0
   11ee8:	beq	13bb4 <__assert_fail@plt+0x1f08>
   11eec:	ldr	r1, [sp, #196]	; 0xc4
   11ef0:	mov	r0, #0
   11ef4:	str	r0, [r1]
   11ef8:	mov	r0, r4
   11efc:	bl	11a0c <setgid@plt>
   11f00:	cmp	r0, #0
   11f04:	bne	13ad8 <__assert_fail@plt+0x1e2c>
   11f08:	ldr	r0, [r8]
   11f0c:	ldr	r5, [sp, #160]	; 0xa0
   11f10:	cmp	r0, #0
   11f14:	movweq	r0, #650	; 0x28a
   11f18:	movteq	r0, #3
   11f1c:	bl	17adc <__assert_fail@plt+0x5e30>
   11f20:	movw	r1, #2311	; 0x907
   11f24:	mov	r0, #6
   11f28:	movt	r1, #3
   11f2c:	bl	11ba4 <setlocale@plt>
   11f30:	movw	r4, #2873	; 0xb39
   11f34:	movw	r1, #64826	; 0xfd3a
   11f38:	movt	r4, #3
   11f3c:	movt	r1, #2
   11f40:	mov	r0, r4
   11f44:	bl	11c1c <bindtextdomain@plt>
   11f48:	mov	r0, r4
   11f4c:	bl	1194c <textdomain@plt>
   11f50:	mov	r0, #0
   11f54:	bl	17ba0 <__assert_fail@plt+0x5ef4>
   11f58:	movw	r1, #8740	; 0x2224
   11f5c:	movt	r1, #4
   11f60:	str	r0, [r1]
   11f64:	movw	r0, #21048	; 0x5238
   11f68:	movt	r0, #1
   11f6c:	bl	2fc5c <__assert_fail@plt+0x1dfb0>
   11f70:	cmp	r0, #0
   11f74:	bne	13aac <__assert_fail@plt+0x1e00>
   11f78:	movw	r0, #15364	; 0x3c04
   11f7c:	movt	r0, #1
   11f80:	bl	2fc5c <__assert_fail@plt+0x1dfb0>
   11f84:	cmp	r0, #0
   11f88:	bne	13aac <__assert_fail@plt+0x1e00>
   11f8c:	add	r0, sp, #232	; 0xe8
   11f90:	add	r1, sp, #344	; 0x158
   11f94:	vmov.i32	q8, #0	; 0x00000000
   11f98:	add	r2, r0, #48	; 0x30
   11f9c:	add	r0, r0, #80	; 0x50
   11fa0:	str	r0, [sp, #108]	; 0x6c
   11fa4:	add	r0, r1, #36	; 0x24
   11fa8:	mov	r1, #1
   11fac:	str	r2, [sp, #112]	; 0x70
   11fb0:	str	r0, [sp, #140]	; 0x8c
   11fb4:	movw	r0, #8760	; 0x2238
   11fb8:	movt	r0, #4
   11fbc:	strb	r1, [r0]
   11fc0:	movw	r0, #8744	; 0x2228
   11fc4:	movt	r0, #4
   11fc8:	vst1.64	{d16-d17}, [r0]
   11fcc:	movw	r0, #64885	; 0xfd75
   11fd0:	movt	r0, #2
   11fd4:	bl	11a00 <getenv@plt>
   11fd8:	str	r0, [sp, #164]	; 0xa4
   11fdc:	movw	r0, #8764	; 0x223c
   11fe0:	mov	r7, #0
   11fe4:	movw	r4, #64897	; 0xfd81
   11fe8:	movw	r6, #2356	; 0x934
   11fec:	sub	lr, fp, #1024	; 0x400
   11ff0:	mvn	sl, #0
   11ff4:	movt	r0, #4
   11ff8:	movt	r4, #2
   11ffc:	movt	r6, #3
   12000:	sub	r9, lr, #356	; 0x164
   12004:	str	r7, [r0]
   12008:	mov	r0, #0
   1200c:	str	r0, [sp, #212]	; 0xd4
   12010:	mov	r0, #0
   12014:	str	r0, [sp, #180]	; 0xb4
   12018:	mov	r0, #0
   1201c:	str	r0, [sp, #116]	; 0x74
   12020:	mov	r0, #0
   12024:	str	r0, [sp, #148]	; 0x94
   12028:	mov	r0, #0
   1202c:	str	r0, [sp, #204]	; 0xcc
   12030:	mov	r0, #0
   12034:	str	r0, [sp, #220]	; 0xdc
   12038:	mov	r0, #0
   1203c:	str	r0, [sp, #216]	; 0xd8
   12040:	mov	r0, #0
   12044:	str	r0, [sp, #176]	; 0xb0
   12048:	mov	r0, #0
   1204c:	str	r0, [sp, #208]	; 0xd0
   12050:	mov	r0, r5
   12054:	mov	r1, r8
   12058:	mov	r2, r4
   1205c:	mov	r3, r6
   12060:	str	sl, [fp, #-1380]	; 0xfffffa9c
   12064:	str	r9, [sp]
   12068:	bl	11a78 <getopt_long@plt>
   1206c:	sub	r1, r0, #48	; 0x30
   12070:	cmp	r1, #209	; 0xd1
   12074:	bhi	12588 <__assert_fail@plt+0x8dc>
   12078:	add	r0, pc, #0
   1207c:	ldr	pc, [r0, r1, lsl #2]
   12080:	strdeq	r2, [r1], -r4
   12084:	muleq	r1, r0, r9
   12088:	muleq	r1, r0, r9
   1208c:	muleq	r1, r0, r9
   12090:	muleq	r1, r0, r9
   12094:	muleq	r1, r0, r9
   12098:	muleq	r1, r0, r9
   1209c:	muleq	r1, r0, r9
   120a0:	muleq	r1, r0, r9
   120a4:	muleq	r1, r0, r9
   120a8:	muleq	r1, r0, r9
   120ac:	muleq	r1, r0, r9
   120b0:	muleq	r1, r0, r9
   120b4:	muleq	r1, r0, r9
   120b8:	muleq	r1, r0, r9
   120bc:	muleq	r1, r0, r9
   120c0:	muleq	r1, r0, r9
   120c4:	andeq	r2, r1, r0, lsl #11
   120c8:	muleq	r1, r0, r9
   120cc:	muleq	r1, r0, r9
   120d0:	muleq	r1, r0, r9
   120d4:	andeq	r2, r1, r4, lsl r5
   120d8:	muleq	r1, r0, r9
   120dc:	muleq	r1, r0, r9
   120e0:	andeq	r2, r1, r8, asr #7
   120e4:	muleq	r1, r0, r9
   120e8:	muleq	r1, r0, r9
   120ec:	muleq	r1, r0, r9
   120f0:	andeq	r2, r1, ip, asr #8
   120f4:	muleq	r1, r0, r9
   120f8:	muleq	r1, r0, r9
   120fc:	muleq	r1, r0, r9
   12100:	andeq	r2, r1, r8, asr #7
   12104:	muleq	r1, r0, r9
   12108:	muleq	r1, r0, r9
   1210c:	andeq	r2, r1, ip, asr r4
   12110:	muleq	r1, r0, r9
   12114:	muleq	r1, r0, r9
   12118:	muleq	r1, r0, r9
   1211c:	muleq	r1, r0, r9
   12120:	muleq	r1, r0, r9
   12124:	muleq	r1, r0, r9
   12128:	muleq	r1, r0, r9
   1212c:	muleq	r1, r0, r9
   12130:	muleq	r1, r0, r9
   12134:	muleq	r1, r0, r9
   12138:	muleq	r1, r0, r9
   1213c:	muleq	r1, r0, r9
   12140:	muleq	r1, r0, r9
   12144:	muleq	r1, r0, r9
   12148:	andeq	r2, r1, r4, lsr r4
   1214c:	muleq	r1, r4, r4
   12150:	andeq	r2, r1, r8, lsl r4
   12154:	andeq	r2, r1, r0, lsl #9
   12158:	muleq	r1, r0, r9
   1215c:	muleq	r1, r0, r9
   12160:	muleq	r1, r8, r9
   12164:	andeq	r2, r1, r8, lsr #10
   12168:	muleq	r1, r0, r9
   1216c:	muleq	r1, r0, r9
   12170:	ldrdeq	r2, [r1], -ip
   12174:	andeq	r2, r1, r0, asr r0
   12178:	muleq	r1, r0, r9
   1217c:	muleq	r1, r0, r9
   12180:	andeq	r2, r1, r0, asr #8
   12184:	muleq	r1, r0, r9
   12188:	andeq	r2, r1, r4, lsr r5
   1218c:	andeq	r2, r1, r0, asr r0
   12190:	muleq	r1, r0, r9
   12194:	muleq	r1, r0, r9
   12198:	andeq	r2, r1, r0, asr #11
   1219c:	andeq	r2, r1, r0, asr #10
   121a0:	muleq	r1, r0, r9
   121a4:	muleq	r1, r0, r9
   121a8:	muleq	r1, r0, r9
   121ac:	muleq	r1, r0, r9
   121b0:	muleq	r1, r0, r9
   121b4:	muleq	r1, r0, r9
   121b8:	muleq	r1, r0, r9
   121bc:	muleq	r1, r0, r9
   121c0:	muleq	r1, r0, r9
   121c4:	muleq	r1, r0, r9
   121c8:	muleq	r1, r0, r9
   121cc:	muleq	r1, r0, r9
   121d0:	muleq	r1, r0, r9
   121d4:	muleq	r1, r0, r9
   121d8:	muleq	r1, r0, r9
   121dc:	muleq	r1, r0, r9
   121e0:	muleq	r1, r0, r9
   121e4:	muleq	r1, r0, r9
   121e8:	muleq	r1, r0, r9
   121ec:	muleq	r1, r0, r9
   121f0:	muleq	r1, r0, r9
   121f4:	muleq	r1, r0, r9
   121f8:	muleq	r1, r0, r9
   121fc:	muleq	r1, r0, r9
   12200:	muleq	r1, r0, r9
   12204:	muleq	r1, r0, r9
   12208:	muleq	r1, r0, r9
   1220c:	muleq	r1, r0, r9
   12210:	muleq	r1, r0, r9
   12214:	muleq	r1, r0, r9
   12218:	muleq	r1, r0, r9
   1221c:	muleq	r1, r0, r9
   12220:	muleq	r1, r0, r9
   12224:	muleq	r1, r0, r9
   12228:	muleq	r1, r0, r9
   1222c:	muleq	r1, r0, r9
   12230:	muleq	r1, r0, r9
   12234:	muleq	r1, r0, r9
   12238:	muleq	r1, r0, r9
   1223c:	muleq	r1, r0, r9
   12240:	muleq	r1, r0, r9
   12244:	muleq	r1, r0, r9
   12248:	muleq	r1, r0, r9
   1224c:	muleq	r1, r0, r9
   12250:	muleq	r1, r0, r9
   12254:	muleq	r1, r0, r9
   12258:	muleq	r1, r0, r9
   1225c:	muleq	r1, r0, r9
   12260:	muleq	r1, r0, r9
   12264:	muleq	r1, r0, r9
   12268:	muleq	r1, r0, r9
   1226c:	muleq	r1, r0, r9
   12270:	muleq	r1, r0, r9
   12274:	muleq	r1, r0, r9
   12278:	muleq	r1, r0, r9
   1227c:	muleq	r1, r0, r9
   12280:	muleq	r1, r0, r9
   12284:	muleq	r1, r0, r9
   12288:	muleq	r1, r0, r9
   1228c:	muleq	r1, r0, r9
   12290:	muleq	r1, r0, r9
   12294:	muleq	r1, r0, r9
   12298:	muleq	r1, r0, r9
   1229c:	muleq	r1, r0, r9
   122a0:	muleq	r1, r0, r9
   122a4:	muleq	r1, r0, r9
   122a8:	muleq	r1, r0, r9
   122ac:	muleq	r1, r0, r9
   122b0:	muleq	r1, r0, r9
   122b4:	muleq	r1, r0, r9
   122b8:	muleq	r1, r0, r9
   122bc:	muleq	r1, r0, r9
   122c0:	muleq	r1, r0, r9
   122c4:	muleq	r1, r0, r9
   122c8:	muleq	r1, r0, r9
   122cc:	muleq	r1, r0, r9
   122d0:	muleq	r1, r0, r9
   122d4:	muleq	r1, r0, r9
   122d8:	muleq	r1, r0, r9
   122dc:	muleq	r1, r0, r9
   122e0:	muleq	r1, r0, r9
   122e4:	muleq	r1, r0, r9
   122e8:	muleq	r1, r0, r9
   122ec:	muleq	r1, r0, r9
   122f0:	muleq	r1, r0, r9
   122f4:	muleq	r1, r0, r9
   122f8:	muleq	r1, r0, r9
   122fc:	muleq	r1, r0, r9
   12300:	muleq	r1, r0, r9
   12304:	muleq	r1, r0, r9
   12308:	muleq	r1, r0, r9
   1230c:	muleq	r1, r0, r9
   12310:	muleq	r1, r0, r9
   12314:	muleq	r1, r0, r9
   12318:	muleq	r1, r0, r9
   1231c:	muleq	r1, r0, r9
   12320:	muleq	r1, r0, r9
   12324:	muleq	r1, r0, r9
   12328:	muleq	r1, r0, r9
   1232c:	muleq	r1, r0, r9
   12330:	muleq	r1, r0, r9
   12334:	muleq	r1, r0, r9
   12338:	muleq	r1, r0, r9
   1233c:	muleq	r1, r0, r9
   12340:	muleq	r1, r0, r9
   12344:	muleq	r1, r0, r9
   12348:	muleq	r1, r0, r9
   1234c:	muleq	r1, r0, r9
   12350:	muleq	r1, r0, r9
   12354:	muleq	r1, r0, r9
   12358:	muleq	r1, r0, r9
   1235c:	muleq	r1, r0, r9
   12360:	muleq	r1, r0, r9
   12364:	muleq	r1, r0, r9
   12368:	muleq	r1, r0, r9
   1236c:	muleq	r1, r0, r9
   12370:	muleq	r1, r0, r9
   12374:	muleq	r1, r0, r9
   12378:	muleq	r1, r0, r9
   1237c:	muleq	r1, r0, r9
   12380:	muleq	r1, r0, r9
   12384:	muleq	r1, r0, r9
   12388:	muleq	r1, r0, r9
   1238c:	muleq	r1, r0, r9
   12390:	muleq	r1, r0, r9
   12394:	muleq	r1, r0, r9
   12398:	muleq	r1, r0, r9
   1239c:	muleq	r1, r0, r9
   123a0:	muleq	r1, r0, r9
   123a4:	muleq	r1, r0, r9
   123a8:	muleq	r1, r0, r9
   123ac:	muleq	r1, r0, r9
   123b0:	muleq	r1, r0, r9
   123b4:	muleq	r1, r0, r9
   123b8:	muleq	r1, r0, r9
   123bc:	muleq	r1, r0, r9
   123c0:	andeq	r2, r1, r8, ror #8
   123c4:	andeq	r2, r1, r0, lsr #9
   123c8:	movw	r0, #8772	; 0x2244
   123cc:	mov	r1, #1
   123d0:	movt	r0, #4
   123d4:	strb	r1, [r0]
   123d8:	b	12050 <__assert_fail@plt+0x3a4>
   123dc:	movw	r0, #8728	; 0x2218
   123e0:	movw	r3, #8744	; 0x2228
   123e4:	sub	r1, fp, #728	; 0x2d8
   123e8:	mov	r2, #10
   123ec:	str	r7, [sp]
   123f0:	movt	r0, #4
   123f4:	movt	r3, #4
   123f8:	ldr	r0, [r0]
   123fc:	str	r0, [fp, #-728]	; 0xfffffd28
   12400:	bl	1a5c4 <__assert_fail@plt+0x8918>
   12404:	cmp	r0, #0
   12408:	bne	139a0 <__assert_fail@plt+0x1cf4>
   1240c:	mov	r0, #1
   12410:	str	r0, [sp, #204]	; 0xcc
   12414:	b	12050 <__assert_fail@plt+0x3a4>
   12418:	movw	r0, #8728	; 0x2218
   1241c:	movt	r0, #4
   12420:	ldr	r0, [r0]
   12424:	cmp	r0, #0
   12428:	str	r0, [sp, #164]	; 0xa4
   1242c:	bne	12050 <__assert_fail@plt+0x3a4>
   12430:	b	139c4 <__assert_fail@plt+0x1d18>
   12434:	mov	r0, #1
   12438:	str	r0, [sp, #148]	; 0x94
   1243c:	b	12050 <__assert_fail@plt+0x3a4>
   12440:	mov	r0, #1
   12444:	str	r0, [sp, #180]	; 0xb4
   12448:	b	12050 <__assert_fail@plt+0x3a4>
   1244c:	movw	r0, #8772	; 0x2244
   12450:	movt	r0, #4
   12454:	strb	r7, [r0]
   12458:	b	12050 <__assert_fail@plt+0x3a4>
   1245c:	mov	r0, #1
   12460:	str	r0, [sp, #176]	; 0xb0
   12464:	b	12050 <__assert_fail@plt+0x3a4>
   12468:	movw	r0, #8728	; 0x2218
   1246c:	movt	r0, #4
   12470:	ldr	r0, [r0]
   12474:	bl	14eb0 <__assert_fail@plt+0x3204>
   12478:	str	r0, [sp, #216]	; 0xd8
   1247c:	b	12050 <__assert_fail@plt+0x3a4>
   12480:	movw	r0, #8764	; 0x223c
   12484:	mov	r1, #1
   12488:	movt	r0, #4
   1248c:	str	r1, [r0]
   12490:	b	12050 <__assert_fail@plt+0x3a4>
   12494:	mov	r0, #1
   12498:	str	r0, [sp, #116]	; 0x74
   1249c:	b	12050 <__assert_fail@plt+0x3a4>
   124a0:	movw	r0, #8728	; 0x2218
   124a4:	movt	r0, #4
   124a8:	ldr	r5, [r0]
   124ac:	ldrb	r0, [r5]
   124b0:	cmp	r0, #0
   124b4:	beq	139e4 <__assert_fail@plt+0x1d38>
   124b8:	ldr	r0, [sp, #196]	; 0xc4
   124bc:	sub	r1, fp, #728	; 0x2d8
   124c0:	mov	r2, #10
   124c4:	str	r7, [r0]
   124c8:	mov	r0, r5
   124cc:	bl	11ab4 <strtoul@plt>
   124d0:	cmp	r0, #0
   124d4:	beq	1254c <__assert_fail@plt+0x8a0>
   124d8:	cmn	r0, #1
   124dc:	bne	1255c <__assert_fail@plt+0x8b0>
   124e0:	ldr	r1, [sp, #196]	; 0xc4
   124e4:	ldr	r1, [r1]
   124e8:	cmp	r1, #34	; 0x22
   124ec:	bne	1255c <__assert_fail@plt+0x8b0>
   124f0:	b	13a08 <__assert_fail@plt+0x1d5c>
   124f4:	movw	r0, #8760	; 0x2238
   124f8:	movw	r1, #8768	; 0x2240
   124fc:	movt	r0, #4
   12500:	movt	r1, #4
   12504:	strb	r7, [r0]
   12508:	mov	r0, #1
   1250c:	strb	r0, [r1]
   12510:	b	12050 <__assert_fail@plt+0x3a4>
   12514:	movw	r0, #8764	; 0x223c
   12518:	mov	r1, #2
   1251c:	movt	r0, #4
   12520:	str	r1, [r0]
   12524:	b	12050 <__assert_fail@plt+0x3a4>
   12528:	mov	r0, #1
   1252c:	str	r0, [sp, #212]	; 0xd4
   12530:	b	12050 <__assert_fail@plt+0x3a4>
   12534:	mov	r0, #1
   12538:	str	r0, [sp, #220]	; 0xdc
   1253c:	b	12050 <__assert_fail@plt+0x3a4>
   12540:	mov	r0, #0
   12544:	str	r0, [sp, #148]	; 0x94
   12548:	b	12050 <__assert_fail@plt+0x3a4>
   1254c:	ldr	r1, [sp, #196]	; 0xc4
   12550:	ldr	r1, [r1]
   12554:	cmp	r1, #22
   12558:	beq	13a10 <__assert_fail@plt+0x1d64>
   1255c:	ldr	r1, [fp, #-728]	; 0xfffffd28
   12560:	ldrb	r1, [r1]
   12564:	cmp	r1, #0
   12568:	bne	13a50 <__assert_fail@plt+0x1da4>
   1256c:	movw	r1, #8616	; 0x21a8
   12570:	ldr	r5, [sp, #160]	; 0xa0
   12574:	movt	r1, #4
   12578:	str	r0, [r1]
   1257c:	b	12050 <__assert_fail@plt+0x3a4>
   12580:	mov	r0, #1
   12584:	b	1204c <__assert_fail@plt+0x3a0>
   12588:	cmn	r0, #1
   1258c:	bne	13990 <__assert_fail@plt+0x1ce4>
   12590:	ldr	r0, [sp, #132]	; 0x84
   12594:	cmp	r0, #0
   12598:	bmi	125d4 <__assert_fail@plt+0x928>
   1259c:	ldr	r1, [sp, #164]	; 0xa4
   125a0:	ldr	r9, [sp, #176]	; 0xb0
   125a4:	add	r7, sp, #344	; 0x158
   125a8:	cmp	r1, #0
   125ac:	beq	125dc <__assert_fail@plt+0x930>
   125b0:	bl	11c88 <close@plt>
   125b4:	mvn	r0, #0
   125b8:	str	r0, [sp, #132]	; 0x84
   125bc:	b	125dc <__assert_fail@plt+0x930>
   125c0:	movw	r0, #650	; 0x28a
   125c4:	movt	r0, #3
   125c8:	bl	1491c <__assert_fail@plt+0x2c70>
   125cc:	mov	r5, #0
   125d0:	b	13938 <__assert_fail@plt+0x1c8c>
   125d4:	ldr	r9, [sp, #176]	; 0xb0
   125d8:	add	r7, sp, #344	; 0x158
   125dc:	ldr	r0, [sp, #116]	; 0x74
   125e0:	orrs	r0, r9, r0
   125e4:	ldr	r0, [sp, #180]	; 0xb4
   125e8:	movweq	r0, #1
   125ec:	cmp	r9, #0
   125f0:	str	r0, [sp, #180]	; 0xb4
   125f4:	movw	r0, #8712	; 0x2208
   125f8:	movt	r0, #4
   125fc:	beq	1261c <__assert_fail@plt+0x970>
   12600:	ldr	r0, [r0]
   12604:	ldr	r1, [sp, #204]	; 0xcc
   12608:	subs	r0, r0, r5
   1260c:	ldr	r5, [sp, #164]	; 0xa4
   12610:	moveq	r1, r0
   12614:	str	r1, [sp, #204]	; 0xcc
   12618:	b	12668 <__assert_fail@plt+0x9bc>
   1261c:	ldr	r0, [r0]
   12620:	cmp	r0, r5
   12624:	bne	12664 <__assert_fail@plt+0x9b8>
   12628:	ldr	r0, [sp, #116]	; 0x74
   1262c:	ldr	r5, [sp, #164]	; 0xa4
   12630:	cmp	r0, #0
   12634:	bne	12668 <__assert_fail@plt+0x9bc>
   12638:	movw	r1, #64974	; 0xfdce
   1263c:	mov	r0, #0
   12640:	mov	r2, #5
   12644:	movt	r1, #2
   12648:	bl	11934 <dcgettext@plt>
   1264c:	mov	r2, r0
   12650:	mov	r0, #0
   12654:	mov	r1, #0
   12658:	bl	119dc <error@plt>
   1265c:	mov	r0, #1
   12660:	bl	13c14 <__assert_fail@plt+0x1f68>
   12664:	ldr	r5, [sp, #164]	; 0xa4
   12668:	mov	r0, #1
   1266c:	bl	11c40 <isatty@plt>
   12670:	sub	r0, r0, #1
   12674:	movw	r1, #8773	; 0x2245
   12678:	cmp	r5, #0
   1267c:	clz	r0, r0
   12680:	movt	r1, #4
   12684:	lsr	r0, r0, #5
   12688:	strb	r0, [r1]
   1268c:	beq	126b0 <__assert_fail@plt+0xa04>
   12690:	movw	r1, #5736	; 0x1668
   12694:	add	r0, sp, #336	; 0x150
   12698:	add	r3, sp, #340	; 0x154
   1269c:	mov	r2, #1
   126a0:	movt	r1, #3
   126a4:	str	r0, [sp]
   126a8:	mov	r0, r5
   126ac:	bl	15098 <__assert_fail@plt+0x33ec>
   126b0:	ldr	r2, [sp, #208]	; 0xd0
   126b4:	movw	r0, #18080	; 0x46a0
   126b8:	movw	r1, #17912	; 0x45f8
   126bc:	vldr	d9, [pc, #740]	; 129a8 <__assert_fail@plt+0xcfc>
   126c0:	vldr	d12, [pc, #744]	; 129b0 <__assert_fail@plt+0xd04>
   126c4:	movw	r4, #8776	; 0x2248
   126c8:	vmov.i32	q5, #0	; 0x00000000
   126cc:	mov	sl, #0
   126d0:	str	r8, [sp, #104]	; 0x68
   126d4:	movt	r0, #1
   126d8:	movt	r1, #1
   126dc:	movt	r4, #4
   126e0:	cmp	r2, #0
   126e4:	movw	r2, #17116	; 0x42dc
   126e8:	moveq	r1, r0
   126ec:	movw	r0, #17080	; 0x42b8
   126f0:	movt	r2, #1
   126f4:	str	r1, [sp, #96]	; 0x60
   126f8:	ldr	r1, [sp, #212]	; 0xd4
   126fc:	movt	r0, #1
   12700:	cmp	r1, #0
   12704:	movne	r2, r0
   12708:	movw	r0, #16896	; 0x4200
   1270c:	movt	r0, #1
   12710:	str	r2, [sp, #192]	; 0xc0
   12714:	movw	r2, #16988	; 0x425c
   12718:	movt	r2, #1
   1271c:	movne	r2, r0
   12720:	ldr	r0, [sp, #216]	; 0xd8
   12724:	cmp	r1, #0
   12728:	str	r2, [sp, #188]	; 0xbc
   1272c:	orrne	r0, r0, #4194304	; 0x400000
   12730:	str	r0, [sp, #216]	; 0xd8
   12734:	ldr	r0, [sp, #180]	; 0xb4
   12738:	orr	r0, r0, r9
   1273c:	str	r0, [sp, #24]
   12740:	ldr	r0, [sp, #140]	; 0x8c
   12744:	add	r1, r0, #240	; 0xf0
   12748:	str	r1, [sp, #92]	; 0x5c
   1274c:	add	r1, r0, #112	; 0x70
   12750:	str	r1, [sp, #88]	; 0x58
   12754:	add	r1, r0, #224	; 0xe0
   12758:	str	r1, [sp, #84]	; 0x54
   1275c:	add	r1, r0, #96	; 0x60
   12760:	str	r1, [sp, #80]	; 0x50
   12764:	add	r1, r0, #208	; 0xd0
   12768:	str	r1, [sp, #76]	; 0x4c
   1276c:	add	r1, r0, #80	; 0x50
   12770:	str	r1, [sp, #72]	; 0x48
   12774:	add	r1, r0, #192	; 0xc0
   12778:	str	r1, [sp, #68]	; 0x44
   1277c:	add	r1, r0, #64	; 0x40
   12780:	str	r1, [sp, #64]	; 0x40
   12784:	add	r1, r0, #176	; 0xb0
   12788:	str	r1, [sp, #60]	; 0x3c
   1278c:	add	r1, r0, #48	; 0x30
   12790:	str	r1, [sp, #56]	; 0x38
   12794:	add	r1, r0, #160	; 0xa0
   12798:	str	r1, [sp, #52]	; 0x34
   1279c:	add	r1, r0, #32
   127a0:	str	r1, [sp, #48]	; 0x30
   127a4:	add	r1, r0, #144	; 0x90
   127a8:	str	r1, [sp, #44]	; 0x2c
   127ac:	add	r1, r0, #16
   127b0:	add	r0, r0, #128	; 0x80
   127b4:	str	r0, [sp, #36]	; 0x24
   127b8:	add	r0, r7, #292	; 0x124
   127bc:	str	r1, [sp, #40]	; 0x28
   127c0:	str	r0, [sp, #100]	; 0x64
   127c4:	add	r0, r7, #16
   127c8:	str	r0, [sp, #32]
   127cc:	mov	r0, #0
   127d0:	str	r0, [sp, #28]
   127d4:	ldr	r0, [sp, #204]	; 0xcc
   127d8:	cmp	r0, #0
   127dc:	beq	12800 <__assert_fail@plt+0xb54>
   127e0:	movw	r0, #8744	; 0x2228
   127e4:	movt	r0, #4
   127e8:	mov	r3, r0
   127ec:	ldr	r0, [r0]
   127f0:	ldmib	r3, {r1, r2, r3}
   127f4:	subs	r0, r2, r0
   127f8:	sbcs	r0, r3, r1
   127fc:	bcs	1388c <__assert_fail@plt+0x1be0>
   12800:	add	r0, r4, #16
   12804:	mov	r1, #32
   12808:	cmp	r5, #0
   1280c:	vst1.64	{d10-d11}, [r0]
   12810:	mov	r0, r4
   12814:	vst1.64	{d10-d11}, [r0], r1
   12818:	vst1.64	{d10-d11}, [r0]
   1281c:	beq	12898 <__assert_fail@plt+0xbec>
   12820:	ldr	r1, [sp, #336]	; 0x150
   12824:	mov	r7, #0
   12828:	cmp	r1, #0
   1282c:	beq	128d4 <__assert_fail@plt+0xc28>
   12830:	movw	r6, #8824	; 0x2278
   12834:	cmp	r1, #1
   12838:	sub	r8, fp, #728	; 0x2d8
   1283c:	mov	sl, #0
   12840:	movt	r6, #4
   12844:	bne	128f0 <__assert_fail@plt+0xc44>
   12848:	ldr	r0, [sp, #340]	; 0x154
   1284c:	movw	r9, #64644	; 0xfc84
   12850:	movt	r9, #2
   12854:	ldrb	r2, [r5, r0]
   12858:	cmp	r2, #46	; 0x2e
   1285c:	beq	12904 <__assert_fail@plt+0xc58>
   12860:	cmp	r2, #45	; 0x2d
   12864:	bne	128f4 <__assert_fail@plt+0xc48>
   12868:	ldr	r0, [sp, #28]
   1286c:	tst	r0, #1
   12870:	bne	1394c <__assert_fail@plt+0x1ca0>
   12874:	mov	r0, #0
   12878:	movw	r9, #65063	; 0xfe27
   1287c:	mov	r4, #0
   12880:	add	r7, sp, #344	; 0x158
   12884:	str	r0, [sp, #172]	; 0xac
   12888:	mov	r0, #1
   1288c:	movt	r9, #2
   12890:	str	r0, [sp, #28]
   12894:	b	12938 <__assert_fail@plt+0xc8c>
   12898:	ldr	r4, [sp, #132]	; 0x84
   1289c:	cmn	r4, #1
   128a0:	beq	1388c <__assert_fail@plt+0x1be0>
   128a4:	movw	r1, #8736	; 0x2220
   128a8:	movw	r6, #8824	; 0x2278
   128ac:	mvn	r0, #0
   128b0:	sub	r8, fp, #728	; 0x2d8
   128b4:	mov	sl, #0
   128b8:	movt	r1, #4
   128bc:	movt	r6, #4
   128c0:	str	r0, [sp, #132]	; 0x84
   128c4:	ldr	r9, [r1]
   128c8:	mov	r1, #0
   128cc:	str	r1, [sp, #172]	; 0xac
   128d0:	b	12938 <__assert_fail@plt+0xc8c>
   128d4:	movw	r9, #64644	; 0xfc84
   128d8:	movw	r6, #8824	; 0x2278
   128dc:	sub	r8, fp, #728	; 0x2d8
   128e0:	mov	sl, #0
   128e4:	movt	r9, #2
   128e8:	movt	r6, #4
   128ec:	b	12904 <__assert_fail@plt+0xc58>
   128f0:	ldr	r0, [sp, #340]	; 0x154
   128f4:	add	r0, r5, r0
   128f8:	bl	118d4 <strndup@plt>
   128fc:	mov	r9, r0
   12900:	mov	r7, r0
   12904:	mov	r0, r9
   12908:	mov	r1, #131072	; 0x20000
   1290c:	str	r7, [sp, #172]	; 0xac
   12910:	bl	15320 <__assert_fail@plt+0x3674>
   12914:	cmp	r0, #0
   12918:	bmi	13904 <__assert_fail@plt+0x1c58>
   1291c:	mov	r1, #2
   12920:	mov	r2, #1
   12924:	mov	r4, r0
   12928:	bl	1b2ac <__assert_fail@plt+0x9600>
   1292c:	cmp	r0, #0
   12930:	bne	138fc <__assert_fail@plt+0x1c50>
   12934:	add	r7, sp, #344	; 0x158
   12938:	mov	r0, #3
   1293c:	mov	r1, r4
   12940:	add	r2, sp, #232	; 0xe8
   12944:	bl	11988 <__fxstat64@plt>
   12948:	cmp	r0, #0
   1294c:	str	r9, [sp, #120]	; 0x78
   12950:	beq	129b8 <__assert_fail@plt+0xd0c>
   12954:	ldr	r0, [sp, #196]	; 0xc4
   12958:	mov	r1, #8
   1295c:	mov	r2, r9
   12960:	ldr	r5, [r0]
   12964:	mov	r0, #0
   12968:	str	r0, [sp, #184]	; 0xb8
   1296c:	mov	r0, #0
   12970:	bl	19160 <__assert_fail@plt+0x74b4>
   12974:	movw	r2, #5748	; 0x1674
   12978:	mov	r3, r0
   1297c:	mov	r0, #0
   12980:	mov	r1, r5
   12984:	movt	r2, #3
   12988:	bl	119dc <error@plt>
   1298c:	mov	r0, #0
   12990:	movw	r8, #8828	; 0x227c
   12994:	str	r0, [sp, #168]	; 0xa8
   12998:	mov	r0, #0
   1299c:	movt	r8, #4
   129a0:	str	r0, [sp, #136]	; 0x88
   129a4:	b	12b14 <__assert_fail@plt+0xe68>
   129a8:	andeq	r0, r0, r0
   129ac:	rscsmi	r1, r5, r0, lsl #16
   129b0:	andeq	r0, r0, r0
   129b4:	subsmi	r0, r9, r0
   129b8:	ldr	r0, [sp, #112]	; 0x70
   129bc:	ldrd	r0, [r0]
   129c0:	str	r0, [sp, #168]	; 0xa8
   129c4:	ldr	r0, [sp, #108]	; 0x6c
   129c8:	str	r1, [sp, #136]	; 0x88
   129cc:	ldrd	r0, [r0]
   129d0:	str	r0, [sp, #224]	; 0xe0
   129d4:	mov	r0, r8
   129d8:	str	r1, [sp, #228]	; 0xe4
   129dc:	bl	11928 <time@plt>
   129e0:	cmn	r0, #1
   129e4:	beq	12ad8 <__assert_fail@plt+0xe2c>
   129e8:	ldr	r1, [sp, #312]	; 0x138
   129ec:	ldr	r0, [fp, #-728]	; 0xfffffd28
   129f0:	bl	11b5c <difftime@plt>
   129f4:	movw	r0, #8616	; 0x21a8
   129f8:	movw	r1, #20864	; 0x5180
   129fc:	vmov.f64	d8, d0
   12a00:	movw	r8, #8828	; 0x227c
   12a04:	movt	r0, #4
   12a08:	movt	r1, #1
   12a0c:	movt	r8, #4
   12a10:	ldr	r0, [r0]
   12a14:	mul	r0, r0, r1
   12a18:	vmov	s0, r0
   12a1c:	vcvt.f64.u32	d16, s0
   12a20:	vcmpe.f64	d8, d16
   12a24:	vmrs	APSR_nzcv, fpscr
   12a28:	ble	12b0c <__assert_fail@plt+0xe60>
   12a2c:	movw	r1, #65095	; 0xfe47
   12a30:	mov	r0, #0
   12a34:	mov	r2, #5
   12a38:	movt	r1, #2
   12a3c:	bl	11934 <dcgettext@plt>
   12a40:	mov	r8, r0
   12a44:	mov	r0, #0
   12a48:	mov	r1, #8
   12a4c:	mov	r2, r9
   12a50:	bl	19160 <__assert_fail@plt+0x74b4>
   12a54:	mov	r9, r0
   12a58:	movw	r0, #8616	; 0x21a8
   12a5c:	movw	r7, #2724	; 0xaa4
   12a60:	mov	r2, #5
   12a64:	movt	r0, #4
   12a68:	movt	r7, #3
   12a6c:	ldr	sl, [r0]
   12a70:	mov	r0, #0
   12a74:	mov	r1, r7
   12a78:	bl	11934 <dcgettext@plt>
   12a7c:	mov	r5, r0
   12a80:	mov	r0, #0
   12a84:	mov	r1, r7
   12a88:	mov	r2, #5
   12a8c:	bl	11934 <dcgettext@plt>
   12a90:	vdiv.f64	d16, d8, d9
   12a94:	mov	r3, r9
   12a98:	ldr	r9, [sp, #120]	; 0x78
   12a9c:	movw	r6, #8824	; 0x2278
   12aa0:	str	r0, [sp, #16]
   12aa4:	mov	r2, r8
   12aa8:	movw	r8, #8828	; 0x227c
   12aac:	mov	r0, #0
   12ab0:	mov	r1, #0
   12ab4:	str	sl, [sp]
   12ab8:	mov	sl, #0
   12abc:	str	r5, [sp, #4]
   12ac0:	add	r7, sp, #344	; 0x158
   12ac4:	movt	r6, #4
   12ac8:	movt	r8, #4
   12acc:	vstr	d16, [sp, #8]
   12ad0:	bl	119dc <error@plt>
   12ad4:	b	12b0c <__assert_fail@plt+0xe60>
   12ad8:	ldr	r0, [sp, #196]	; 0xc4
   12adc:	movw	r1, #65071	; 0xfe2f
   12ae0:	mov	r2, #5
   12ae4:	movt	r1, #2
   12ae8:	ldr	r5, [r0]
   12aec:	mov	r0, #0
   12af0:	bl	11934 <dcgettext@plt>
   12af4:	mov	r2, r0
   12af8:	mov	r0, #0
   12afc:	mov	r1, r5
   12b00:	bl	119dc <error@plt>
   12b04:	movw	r8, #8828	; 0x227c
   12b08:	movt	r8, #4
   12b0c:	mov	r0, #1
   12b10:	str	r0, [sp, #184]	; 0xb8
   12b14:	movw	r1, #2853	; 0xb25
   12b18:	mov	r0, r4
   12b1c:	movt	r1, #3
   12b20:	bl	11814 <fdopen@plt>
   12b24:	cmp	r0, #0
   12b28:	beq	13904 <__assert_fail@plt+0x1c58>
   12b2c:	mov	r4, r0
   12b30:	movw	r0, #8832	; 0x2280
   12b34:	mov	r1, r9
   12b38:	str	sl, [sp, #376]	; 0x178
   12b3c:	str	sl, [r6]
   12b40:	str	sl, [r8]
   12b44:	movt	r0, #4
   12b48:	str	r1, [sp, #372]	; 0x174
   12b4c:	str	sl, [sp, #352]	; 0x160
   12b50:	str	sl, [sp, #348]	; 0x15c
   12b54:	str	r4, [sp, #368]	; 0x170
   12b58:	str	sl, [r0]
   12b5c:	movw	r0, #8836	; 0x2284
   12b60:	movt	r0, #4
   12b64:	strb	sl, [r0]
   12b68:	movw	r0, #8712	; 0x2208
   12b6c:	movt	r0, #4
   12b70:	ldr	r9, [r0]
   12b74:	mov	r0, #128	; 0x80
   12b78:	str	r0, [sp, #360]	; 0x168
   12b7c:	movw	r0, #8764	; 0x223c
   12b80:	movt	r0, #4
   12b84:	ldr	r0, [r0]
   12b88:	str	r0, [sp, #156]	; 0x9c
   12b8c:	mov	r0, #128	; 0x80
   12b90:	bl	19f80 <__assert_fail@plt+0x82d4>
   12b94:	mov	r1, #1
   12b98:	mov	r2, #2
   12b9c:	mov	r3, r4
   12ba0:	mov	r5, r0
   12ba4:	str	r0, [sp, #356]	; 0x164
   12ba8:	str	r4, [sp, #200]	; 0xc8
   12bac:	bl	119b8 <fread@plt>
   12bb0:	mov	r4, r0
   12bb4:	ldr	r0, [sp, #184]	; 0xb8
   12bb8:	cmp	r0, #0
   12bbc:	mov	r1, r0
   12bc0:	add	r0, sp, #224	; 0xe0
   12bc4:	movne	r1, r0
   12bc8:	cmp	r4, #3
   12bcc:	str	r1, [sp, #144]	; 0x90
   12bd0:	bcs	13a8c <__assert_fail@plt+0x1de0>
   12bd4:	cmp	r4, #2
   12bd8:	bne	12c04 <__assert_fail@plt+0xf58>
   12bdc:	ldrb	r0, [r5, #1]
   12be0:	cmp	r0, #0
   12be4:	bne	12c04 <__assert_fail@plt+0xf58>
   12be8:	bl	11a84 <__ctype_b_loc@plt>
   12bec:	ldrb	r1, [r5]
   12bf0:	ldr	r0, [r0]
   12bf4:	add	r0, r0, r1, lsl #1
   12bf8:	ldrb	r0, [r0, #1]
   12bfc:	tst	r0, #8
   12c00:	bne	13280 <__assert_fail@plt+0x15d4>
   12c04:	ldr	r3, [sp, #200]	; 0xc8
   12c08:	add	r0, r5, r4
   12c0c:	rsb	r2, r4, #10
   12c10:	mov	r1, #1
   12c14:	bl	119b8 <fread@plt>
   12c18:	add	r5, r0, r4
   12c1c:	ldr	r4, [sp, #356]	; 0x164
   12c20:	cmp	r5, #10
   12c24:	bcc	12c44 <__assert_fail@plt+0xf98>
   12c28:	movw	r1, #2729	; 0xaa9
   12c2c:	mov	r0, r4
   12c30:	mov	r2, #10
   12c34:	movt	r1, #3
   12c38:	bl	11aa8 <bcmp@plt>
   12c3c:	cmp	r0, #0
   12c40:	beq	1308c <__assert_fail@plt+0x13e0>
   12c44:	ldr	r0, [sp, #360]	; 0x168
   12c48:	cmp	r0, #255	; 0xff
   12c4c:	bhi	12c70 <__assert_fail@plt+0xfc4>
   12c50:	ldr	r1, [sp, #32]
   12c54:	mov	r0, #256	; 0x100
   12c58:	mov	r2, #1
   12c5c:	str	r0, [sp, #360]	; 0x168
   12c60:	mov	r0, r4
   12c64:	bl	1a12c <__assert_fail@plt+0x8480>
   12c68:	mov	r4, r0
   12c6c:	str	r0, [sp, #356]	; 0x164
   12c70:	cmp	r5, #255	; 0xff
   12c74:	bgt	12c9c <__assert_fail@plt+0xff0>
   12c78:	ldr	r3, [sp, #368]	; 0x170
   12c7c:	add	r0, r4, r5
   12c80:	rsb	r2, r5, #256	; 0x100
   12c84:	mov	r1, #1
   12c88:	bl	119b8 <fread@plt>
   12c8c:	add	r0, r0, r5
   12c90:	cmp	r0, #256	; 0x100
   12c94:	bne	13ae4 <__assert_fail@plt+0x1e38>
   12c98:	ldr	r4, [sp, #356]	; 0x164
   12c9c:	ldr	r1, [sp, #140]	; 0x8c
   12ca0:	add	r0, r4, #256	; 0x100
   12ca4:	ldr	r5, [sp, #160]	; 0xa0
   12ca8:	cmp	r1, r0
   12cac:	ldrcc	r0, [sp, #100]	; 0x64
   12cb0:	cmpcc	r4, r0
   12cb4:	bcc	12dac <__assert_fail@plt+0x1100>
   12cb8:	mov	r0, r4
   12cbc:	mov	r1, #224	; 0xe0
   12cc0:	vld2.8	{d16-d19}, [r0], r1
   12cc4:	ldr	r1, [sp, #140]	; 0x8c
   12cc8:	vst1.32	{d16-d17}, [r1]
   12ccc:	ldr	r1, [sp, #36]	; 0x24
   12cd0:	vst1.32	{d18-d19}, [r1]
   12cd4:	add	r1, r4, #32
   12cd8:	vld2.8	{d16-d19}, [r1]
   12cdc:	ldr	r1, [sp, #40]	; 0x28
   12ce0:	vst1.32	{d16-d17}, [r1]
   12ce4:	ldr	r1, [sp, #44]	; 0x2c
   12ce8:	vst1.32	{d18-d19}, [r1]
   12cec:	add	r1, r4, #64	; 0x40
   12cf0:	vld2.8	{d16-d19}, [r1]
   12cf4:	ldr	r1, [sp, #48]	; 0x30
   12cf8:	vst1.32	{d16-d17}, [r1]
   12cfc:	ldr	r1, [sp, #52]	; 0x34
   12d00:	vst1.32	{d18-d19}, [r1]
   12d04:	add	r1, r4, #96	; 0x60
   12d08:	vld2.8	{d16-d19}, [r1]
   12d0c:	ldr	r1, [sp, #56]	; 0x38
   12d10:	vst1.32	{d16-d17}, [r1]
   12d14:	ldr	r1, [sp, #60]	; 0x3c
   12d18:	vst1.32	{d18-d19}, [r1]
   12d1c:	add	r1, r4, #128	; 0x80
   12d20:	vld2.8	{d16-d19}, [r1]
   12d24:	ldr	r1, [sp, #64]	; 0x40
   12d28:	vorr	q10, q8, q8
   12d2c:	vorr	q8, q9, q9
   12d30:	vst1.32	{d20-d21}, [r1]
   12d34:	ldr	r1, [sp, #68]	; 0x44
   12d38:	vst1.32	{d16-d17}, [r1]
   12d3c:	add	r1, r4, #160	; 0xa0
   12d40:	vld2.8	{d16-d19}, [r1]
   12d44:	ldr	r1, [sp, #72]	; 0x48
   12d48:	vorr	q10, q8, q8
   12d4c:	vorr	q8, q9, q9
   12d50:	vst1.32	{d20-d21}, [r1]
   12d54:	ldr	r1, [sp, #76]	; 0x4c
   12d58:	vst1.32	{d16-d17}, [r1]
   12d5c:	add	r1, r4, #192	; 0xc0
   12d60:	vld2.8	{d16-d19}, [r1]
   12d64:	ldr	r1, [sp, #80]	; 0x50
   12d68:	vorr	q10, q8, q8
   12d6c:	vorr	q8, q9, q9
   12d70:	vst1.32	{d20-d21}, [r1]
   12d74:	ldr	r1, [sp, #84]	; 0x54
   12d78:	vst1.32	{d16-d17}, [r1]
   12d7c:	vld2.8	{d16-d19}, [r0]
   12d80:	ldr	r0, [sp, #88]	; 0x58
   12d84:	vorr	q10, q8, q8
   12d88:	vorr	q8, q9, q9
   12d8c:	vst1.32	{d20-d21}, [r0]
   12d90:	ldr	r0, [sp, #92]	; 0x5c
   12d94:	vst1.32	{d16-d17}, [r0]
   12d98:	mov	r0, #1
   12d9c:	str	r0, [sp, #128]	; 0x80
   12da0:	mov	r0, #0
   12da4:	str	r0, [sp, #152]	; 0x98
   12da8:	b	12de8 <__assert_fail@plt+0x113c>
   12dac:	mov	r1, #0
   12db0:	add	r0, r4, #1
   12db4:	str	r1, [sp, #152]	; 0x98
   12db8:	mov	r1, #0
   12dbc:	ldrb	r3, [r0, #-1]
   12dc0:	add	r2, r7, r1
   12dc4:	add	r1, r1, #1
   12dc8:	cmp	r1, #128	; 0x80
   12dcc:	strb	r3, [r2, #36]	; 0x24
   12dd0:	ldrb	r3, [r0]
   12dd4:	add	r0, r0, #2
   12dd8:	strb	r3, [r2, #164]	; 0xa4
   12ddc:	bne	12dbc <__assert_fail@plt+0x1110>
   12de0:	mov	r0, #1
   12de4:	str	r0, [sp, #128]	; 0x80
   12de8:	movw	r4, #16124	; 0x3efc
   12dec:	movw	r0, #725	; 0x2d5
   12df0:	movt	r4, #1
   12df4:	movt	r0, #3
   12df8:	str	r0, [sp, #124]	; 0x7c
   12dfc:	sub	r0, r5, r9
   12e00:	str	r0, [sp, #208]	; 0xd0
   12e04:	mov	r0, #12
   12e08:	bl	19f80 <__assert_fail@plt+0x82d4>
   12e0c:	stm	r0, {r4, sl}
   12e10:	mov	r5, r0
   12e14:	str	sl, [r0, #8]
   12e18:	ldr	r0, [r8]
   12e1c:	mov	r1, r6
   12e20:	cmp	r0, #0
   12e24:	addne	r1, r0, #8
   12e28:	ldr	r0, [sp, #148]	; 0x94
   12e2c:	str	r5, [r1]
   12e30:	str	r5, [r8]
   12e34:	cmp	r0, #0
   12e38:	beq	12e70 <__assert_fail@plt+0x11c4>
   12e3c:	mov	r0, #12
   12e40:	bl	19f80 <__assert_fail@plt+0x82d4>
   12e44:	mov	r5, r0
   12e48:	movw	r0, #16684	; 0x412c
   12e4c:	mov	r1, r6
   12e50:	movt	r0, #1
   12e54:	stm	r5, {r0, sl}
   12e58:	ldr	r0, [r8]
   12e5c:	str	sl, [r5, #8]
   12e60:	cmp	r0, #0
   12e64:	addne	r1, r0, #8
   12e68:	str	r5, [r1]
   12e6c:	str	r5, [r8]
   12e70:	ldr	r0, [sp, #208]	; 0xd0
   12e74:	cmp	r0, #1
   12e78:	blt	12ff0 <__assert_fail@plt+0x1344>
   12e7c:	ldr	r0, [sp, #104]	; 0x68
   12e80:	add	r8, r0, r9, lsl #2
   12e84:	ldr	r9, [sp, #208]	; 0xd0
   12e88:	b	12ee8 <__assert_fail@plt+0x123c>
   12e8c:	bl	119ac <__ctype_get_mb_cur_max@plt>
   12e90:	cmp	r0, #1
   12e94:	ldr	r0, [sp, #188]	; 0xbc
   12e98:	ldr	r7, [sp, #192]	; 0xc0
   12e9c:	moveq	r7, r0
   12ea0:	mov	r0, #12
   12ea4:	bl	19f80 <__assert_fail@plt+0x82d4>
   12ea8:	mov	r5, r0
   12eac:	str	r7, [r0]
   12eb0:	mov	r7, r4
   12eb4:	movw	r0, #8828	; 0x227c
   12eb8:	mov	r1, r6
   12ebc:	add	r8, r8, #4
   12ec0:	stmib	r5, {r7, sl}
   12ec4:	movt	r0, #4
   12ec8:	mov	r2, r0
   12ecc:	ldr	r0, [r0]
   12ed0:	cmp	r0, #0
   12ed4:	addne	r1, r0, #8
   12ed8:	subs	r9, r9, #1
   12edc:	str	r5, [r1]
   12ee0:	str	r5, [r2]
   12ee4:	beq	12ff0 <__assert_fail@plt+0x1344>
   12ee8:	movw	r1, #8836	; 0x2284
   12eec:	mov	r0, #1
   12ef0:	movt	r1, #4
   12ef4:	strb	r0, [r1]
   12ef8:	ldr	r0, [sp, #220]	; 0xdc
   12efc:	ldr	r4, [r8]
   12f00:	cmp	r0, #0
   12f04:	beq	12fa0 <__assert_fail@plt+0x12f4>
   12f08:	mov	r0, #32
   12f0c:	bl	19f80 <__assert_fail@plt+0x82d4>
   12f10:	ldr	sl, [sp, #216]	; 0xd8
   12f14:	mov	r7, r0
   12f18:	add	r0, r0, #16
   12f1c:	mov	r6, #0
   12f20:	vst1.32	{d10-d11}, [r0]
   12f24:	mov	r5, r7
   12f28:	mov	r0, #20
   12f2c:	vst1.32	{d10-d11}, [r5], r0
   12f30:	mov	r0, sl
   12f34:	bl	1cc58 <__assert_fail@plt+0xafac>
   12f38:	mov	r0, #100	; 0x64
   12f3c:	str	r0, [r7, #4]
   12f40:	mov	r0, #100	; 0x64
   12f44:	bl	19f80 <__assert_fail@plt+0x82d4>
   12f48:	str	r0, [r7]
   12f4c:	str	r6, [r5]
   12f50:	str	sl, [r7, #12]
   12f54:	mov	sl, #0
   12f58:	mov	r0, r4
   12f5c:	str	sl, [r7, #16]
   12f60:	bl	11ac0 <strlen@plt>
   12f64:	mov	r1, r0
   12f68:	mov	r0, r4
   12f6c:	mov	r2, r7
   12f70:	bl	1b6e0 <__assert_fail@plt+0x9a34>
   12f74:	cmp	r0, #0
   12f78:	bne	13978 <__assert_fail@plt+0x1ccc>
   12f7c:	mov	r0, #12
   12f80:	bl	19f80 <__assert_fail@plt+0x82d4>
   12f84:	mov	r5, r0
   12f88:	movw	r0, #16716	; 0x414c
   12f8c:	movw	r6, #8824	; 0x2278
   12f90:	movt	r0, #1
   12f94:	movt	r6, #4
   12f98:	str	r0, [r5]
   12f9c:	b	12eb4 <__assert_fail@plt+0x1208>
   12fa0:	movw	r1, #1510	; 0x5e6
   12fa4:	mov	r0, r4
   12fa8:	movt	r1, #3
   12fac:	bl	11c10 <strpbrk@plt>
   12fb0:	cmp	r0, #0
   12fb4:	beq	12e8c <__assert_fail@plt+0x11e0>
   12fb8:	mov	r0, #12
   12fbc:	bl	19f80 <__assert_fail@plt+0x82d4>
   12fc0:	mov	r5, r0
   12fc4:	ldr	r0, [sp, #212]	; 0xd4
   12fc8:	cmp	r0, #0
   12fcc:	beq	12fe0 <__assert_fail@plt+0x1334>
   12fd0:	movw	r0, #16800	; 0x41a0
   12fd4:	movt	r0, #1
   12fd8:	str	r0, [r5]
   12fdc:	b	12eb0 <__assert_fail@plt+0x1204>
   12fe0:	movw	r0, #16848	; 0x41d0
   12fe4:	movt	r0, #1
   12fe8:	str	r0, [r5]
   12fec:	b	12eb0 <__assert_fail@plt+0x1204>
   12ff0:	ldr	r0, [sp, #156]	; 0x9c
   12ff4:	cmp	r0, #2
   12ff8:	beq	13048 <__assert_fail@plt+0x139c>
   12ffc:	ldr	r9, [sp, #176]	; 0xb0
   13000:	movw	r4, #8828	; 0x227c
   13004:	cmp	r0, #1
   13008:	movt	r4, #4
   1300c:	bne	130f0 <__assert_fail@plt+0x1444>
   13010:	movw	r1, #8836	; 0x2284
   13014:	mov	r0, #1
   13018:	movt	r1, #4
   1301c:	strb	r0, [r1]
   13020:	movw	r0, #8772	; 0x2244
   13024:	movt	r0, #4
   13028:	ldrb	r7, [r0]
   1302c:	mov	r0, #12
   13030:	bl	19f80 <__assert_fail@plt+0x82d4>
   13034:	cmp	r7, #0
   13038:	beq	130b8 <__assert_fail@plt+0x140c>
   1303c:	movw	r1, #17204	; 0x4334
   13040:	movt	r1, #1
   13044:	b	130cc <__assert_fail@plt+0x1420>
   13048:	movw	r1, #8836	; 0x2284
   1304c:	mov	r0, #1
   13050:	movt	r1, #4
   13054:	strb	r0, [r1]
   13058:	movw	r0, #8772	; 0x2244
   1305c:	movt	r0, #4
   13060:	ldrb	r4, [r0]
   13064:	mov	r0, #12
   13068:	bl	19f80 <__assert_fail@plt+0x82d4>
   1306c:	ldr	r9, [sp, #176]	; 0xb0
   13070:	cmp	r4, #0
   13074:	movw	r4, #8828	; 0x227c
   13078:	movt	r4, #4
   1307c:	beq	130c4 <__assert_fail@plt+0x1418>
   13080:	movw	r1, #17308	; 0x439c
   13084:	movt	r1, #1
   13088:	b	130cc <__assert_fail@plt+0x1420>
   1308c:	mov	r0, #0
   13090:	ldr	r5, [sp, #160]	; 0xa0
   13094:	movw	r4, #15540	; 0x3cb4
   13098:	str	r0, [sp, #152]	; 0x98
   1309c:	movw	r0, #657	; 0x291
   130a0:	movt	r4, #1
   130a4:	movt	r0, #3
   130a8:	str	r0, [sp, #124]	; 0x7c
   130ac:	mov	r0, #0
   130b0:	str	r0, [sp, #128]	; 0x80
   130b4:	b	12dfc <__assert_fail@plt+0x1150>
   130b8:	movw	r1, #17152	; 0x4300
   130bc:	movt	r1, #1
   130c0:	b	130cc <__assert_fail@plt+0x1420>
   130c4:	movw	r1, #17256	; 0x4368
   130c8:	movt	r1, #1
   130cc:	str	r1, [r0]
   130d0:	ldr	r1, [r4]
   130d4:	mov	r2, r6
   130d8:	str	sl, [r0, #4]
   130dc:	str	sl, [r0, #8]
   130e0:	cmp	r1, #0
   130e4:	addne	r2, r1, #8
   130e8:	str	r0, [r2]
   130ec:	str	r0, [r4]
   130f0:	cmp	r9, #0
   130f4:	beq	13130 <__assert_fail@plt+0x1484>
   130f8:	mov	r0, #12
   130fc:	bl	19f80 <__assert_fail@plt+0x82d4>
   13100:	movw	r1, #17360	; 0x43d0
   13104:	mov	r2, r6
   13108:	movt	r1, #1
   1310c:	str	r1, [r0]
   13110:	movw	r1, #8776	; 0x2248
   13114:	movt	r1, #4
   13118:	stmib	r0, {r1, sl}
   1311c:	ldr	r1, [r4]
   13120:	cmp	r1, #0
   13124:	addne	r2, r1, #8
   13128:	str	r0, [r2]
   1312c:	str	r0, [r4]
   13130:	ldr	r0, [sp, #180]	; 0xb4
   13134:	add	r7, sp, #344	; 0x158
   13138:	cmp	r0, #0
   1313c:	beq	13194 <__assert_fail@plt+0x14e8>
   13140:	movw	r0, #8760	; 0x2238
   13144:	mov	r8, r7
   13148:	movt	r0, #4
   1314c:	ldrb	r7, [r0]
   13150:	mov	r0, #12
   13154:	bl	19f80 <__assert_fail@plt+0x82d4>
   13158:	movw	r2, #17640	; 0x44e8
   1315c:	movw	r1, #17756	; 0x455c
   13160:	cmp	r7, #0
   13164:	mov	r7, r8
   13168:	movt	r2, #1
   1316c:	movt	r1, #1
   13170:	movne	r1, r2
   13174:	mov	r2, r6
   13178:	stm	r0, {r1, sl}
   1317c:	ldr	r1, [r4]
   13180:	str	sl, [r0, #8]
   13184:	cmp	r1, #0
   13188:	addne	r2, r1, #8
   1318c:	str	r0, [r2]
   13190:	str	r0, [r4]
   13194:	mov	r0, #12
   13198:	bl	19f80 <__assert_fail@plt+0x82d4>
   1319c:	ldr	r1, [sp, #204]	; 0xcc
   131a0:	cmp	r1, #0
   131a4:	beq	131b4 <__assert_fail@plt+0x1508>
   131a8:	movw	r1, #17824	; 0x45a0
   131ac:	movt	r1, #1
   131b0:	b	131bc <__assert_fail@plt+0x1510>
   131b4:	movw	r1, #17880	; 0x45d8
   131b8:	movt	r1, #1
   131bc:	ldr	r2, [r4]
   131c0:	str	r1, [r0]
   131c4:	movw	r1, #8744	; 0x2228
   131c8:	movt	r1, #4
   131cc:	str	r1, [r0, #4]
   131d0:	mov	r1, r6
   131d4:	str	sl, [r0, #8]
   131d8:	ldr	r6, [sp, #168]	; 0xa8
   131dc:	cmp	r2, #0
   131e0:	addne	r1, r2, #8
   131e4:	str	r0, [r1]
   131e8:	str	r0, [r4]
   131ec:	ldr	r0, [sp, #208]	; 0xd0
   131f0:	movw	r4, #8840	; 0x2288
   131f4:	movt	r4, #4
   131f8:	cmp	r0, #2
   131fc:	movw	r0, #18256	; 0x4750
   13200:	movt	r0, #1
   13204:	blt	1321c <__assert_fail@plt+0x1570>
   13208:	ldr	r0, [r5, #8]
   1320c:	movw	r1, #8832	; 0x2280
   13210:	movt	r1, #4
   13214:	str	r0, [r1]
   13218:	ldr	r0, [sp, #96]	; 0x60
   1321c:	cmp	r9, #0
   13220:	str	r0, [r4]
   13224:	beq	13248 <__assert_fail@plt+0x159c>
   13228:	movw	r1, #729	; 0x2d9
   1322c:	mov	r0, #0
   13230:	mov	r2, #5
   13234:	movt	r1, #3
   13238:	bl	11934 <dcgettext@plt>
   1323c:	ldr	r1, [sp, #372]	; 0x174
   13240:	ldr	r2, [sp, #124]	; 0x7c
   13244:	bl	11868 <printf@plt>
   13248:	ldr	r0, [sp, #368]	; 0x170
   1324c:	bl	11c7c <getc@plt>
   13250:	ldr	r1, [sp, #152]	; 0x98
   13254:	str	r0, [sp, #344]	; 0x158
   13258:	cmp	r1, #0
   1325c:	cmnne	r0, #1
   13260:	bne	13270 <__assert_fail@plt+0x15c4>
   13264:	cmn	r0, #1
   13268:	bne	13434 <__assert_fail@plt+0x1788>
   1326c:	b	13454 <__assert_fail@plt+0x17a8>
   13270:	ldr	r1, [sp, #368]	; 0x170
   13274:	bl	11ae4 <ungetc@plt>
   13278:	str	sl, [sp, #344]	; 0x158
   1327c:	b	13434 <__assert_fail@plt+0x1788>
   13280:	sub	r8, r1, #48	; 0x30
   13284:	cmp	r8, #2
   13288:	blt	13320 <__assert_fail@plt+0x1674>
   1328c:	movw	r1, #1012	; 0x3f4
   13290:	mov	r0, #0
   13294:	mov	r2, #5
   13298:	mov	sl, #0
   1329c:	movt	r1, #3
   132a0:	bl	11934 <dcgettext@plt>
   132a4:	ldr	r4, [sp, #120]	; 0x78
   132a8:	mov	r9, r0
   132ac:	mov	r0, #0
   132b0:	mov	r1, #8
   132b4:	mov	r2, r4
   132b8:	bl	19160 <__assert_fail@plt+0x74b4>
   132bc:	mov	r3, r0
   132c0:	ldrb	r0, [r5, #1]
   132c4:	mov	r1, #0
   132c8:	mov	r2, r9
   132cc:	str	r0, [sp]
   132d0:	mov	r0, #0
   132d4:	bl	119dc <error@plt>
   132d8:	movw	r1, #348	; 0x15c
   132dc:	mov	r0, #0
   132e0:	mov	r2, #5
   132e4:	movt	r1, #3
   132e8:	bl	11934 <dcgettext@plt>
   132ec:	mov	r5, r0
   132f0:	mov	r0, #0
   132f4:	mov	r1, #8
   132f8:	mov	r2, r4
   132fc:	bl	19160 <__assert_fail@plt+0x74b4>
   13300:	mov	r3, r0
   13304:	mov	r0, #0
   13308:	mov	r1, #0
   1330c:	mov	r2, r5
   13310:	str	r8, [sp]
   13314:	bl	119dc <error@plt>
   13318:	ldr	r9, [sp, #176]	; 0xb0
   1331c:	b	1382c <__assert_fail@plt+0x1b80>
   13320:	cmp	r8, #1
   13324:	bne	1336c <__assert_fail@plt+0x16c0>
   13328:	movw	r0, #8764	; 0x223c
   1332c:	movt	r0, #4
   13330:	ldr	r0, [r0]
   13334:	cmp	r0, #2
   13338:	bne	1339c <__assert_fail@plt+0x16f0>
   1333c:	movw	r1, #421	; 0x1a5
   13340:	mov	r0, #0
   13344:	mov	r2, #5
   13348:	mov	sl, #0
   1334c:	movt	r1, #3
   13350:	bl	11934 <dcgettext@plt>
   13354:	mov	r2, r0
   13358:	mov	r0, #0
   1335c:	mov	r1, #0
   13360:	bl	119dc <error@plt>
   13364:	ldr	r9, [sp, #176]	; 0xb0
   13368:	b	1382c <__assert_fail@plt+0x1b80>
   1336c:	mov	r0, #1
   13370:	ldr	r5, [sp, #160]	; 0xa0
   13374:	movw	r4, #15540	; 0x3cb4
   13378:	movw	r8, #8828	; 0x227c
   1337c:	str	r0, [sp, #152]	; 0x98
   13380:	mov	r0, #0
   13384:	movt	r4, #1
   13388:	movt	r8, #4
   1338c:	str	r0, [sp, #128]	; 0x80
   13390:	movw	r0, #649	; 0x289
   13394:	movt	r0, #3
   13398:	b	12df8 <__assert_fail@plt+0x114c>
   1339c:	mov	r0, #1
   133a0:	ldr	r5, [sp, #160]	; 0xa0
   133a4:	movw	r8, #8828	; 0x227c
   133a8:	str	r0, [sp, #152]	; 0x98
   133ac:	ldr	r0, [sp, #24]
   133b0:	movt	r8, #4
   133b4:	cmp	r0, #0
   133b8:	ldrne	r0, [sp, #156]	; 0x9c
   133bc:	cmpne	r0, #1
   133c0:	bne	133d0 <__assert_fail@plt+0x1724>
   133c4:	mov	r0, #0
   133c8:	str	r0, [sp, #128]	; 0x80
   133cc:	b	13414 <__assert_fail@plt+0x1768>
   133d0:	movw	r1, #593	; 0x251
   133d4:	mov	r0, #0
   133d8:	mov	r2, #5
   133dc:	movt	r1, #3
   133e0:	str	r0, [sp, #128]	; 0x80
   133e4:	mov	r0, #0
   133e8:	bl	11934 <dcgettext@plt>
   133ec:	ldr	r2, [sp, #120]	; 0x78
   133f0:	mov	r4, r0
   133f4:	mov	r0, #0
   133f8:	mov	r1, #8
   133fc:	bl	19160 <__assert_fail@plt+0x74b4>
   13400:	mov	r3, r0
   13404:	mov	r0, #0
   13408:	mov	r1, #0
   1340c:	mov	r2, r4
   13410:	bl	119dc <error@plt>
   13414:	movw	r0, #649	; 0x289
   13418:	movw	r4, #15540	; 0x3cb4
   1341c:	movt	r0, #3
   13420:	movt	r4, #1
   13424:	str	r0, [sp, #124]	; 0x7c
   13428:	mov	r0, #1
   1342c:	str	r0, [sp, #156]	; 0x9c
   13430:	b	12dfc <__assert_fail@plt+0x1150>
   13434:	ldr	r1, [r4]
   13438:	mov	r0, r7
   1343c:	blx	r1
   13440:	cmp	r0, #8
   13444:	beq	13454 <__assert_fail@plt+0x17a8>
   13448:	ldr	r0, [sp, #344]	; 0x158
   1344c:	cmn	r0, #1
   13450:	bne	13434 <__assert_fail@plt+0x1788>
   13454:	cmp	r9, #0
   13458:	beq	137d8 <__assert_fail@plt+0x1b2c>
   1345c:	ldr	r0, [sp, #128]	; 0x80
   13460:	cmp	r0, #0
   13464:	beq	134e0 <__assert_fail@plt+0x1834>
   13468:	movw	r1, #763	; 0x2fb
   1346c:	mov	r0, #0
   13470:	mov	r2, #5
   13474:	movt	r1, #3
   13478:	bl	11934 <dcgettext@plt>
   1347c:	movw	r1, #818	; 0x332
   13480:	mov	r4, r0
   13484:	mov	r0, #0
   13488:	mov	r2, #5
   1348c:	movt	r1, #3
   13490:	bl	11934 <dcgettext@plt>
   13494:	mov	r1, r0
   13498:	ldr	r0, [sp, #376]	; 0x178
   1349c:	cmp	r0, #2
   134a0:	beq	134b8 <__assert_fail@plt+0x180c>
   134a4:	cmp	r0, #1
   134a8:	bne	134c8 <__assert_fail@plt+0x181c>
   134ac:	movw	r0, #5748	; 0x1674
   134b0:	mov	r1, r4
   134b4:	b	134bc <__assert_fail@plt+0x1810>
   134b8:	movw	r0, #5748	; 0x1674
   134bc:	movt	r0, #3
   134c0:	bl	11868 <printf@plt>
   134c4:	b	134e0 <__assert_fail@plt+0x1834>
   134c8:	movw	r1, #870	; 0x366
   134cc:	mov	r0, #0
   134d0:	mov	r2, #5
   134d4:	movt	r1, #3
   134d8:	bl	11934 <dcgettext@plt>
   134dc:	bl	11868 <printf@plt>
   134e0:	ldr	r0, [sp, #136]	; 0x88
   134e4:	orrs	r0, r6, r0
   134e8:	ldreq	r0, [sp, #144]	; 0x90
   134ec:	cmpeq	r0, #0
   134f0:	beq	137d8 <__assert_fail@plt+0x1b2c>
   134f4:	ldr	r0, [sp, #184]	; 0xb8
   134f8:	sub	r9, fp, #728	; 0x2d8
   134fc:	cmp	r0, #0
   13500:	beq	135a4 <__assert_fail@plt+0x18f8>
   13504:	ldr	r0, [sp, #144]	; 0x90
   13508:	bl	11a48 <localtime@plt>
   1350c:	cmp	r0, #0
   13510:	beq	135a4 <__assert_fail@plt+0x18f8>
   13514:	movw	r2, #1680	; 0x690
   13518:	mov	r4, r0
   1351c:	mov	r0, r9
   13520:	mov	r1, #20
   13524:	movt	r2, #3
   13528:	mov	r3, r4
   1352c:	bl	11a30 <strftime@plt>
   13530:	cmp	r0, #19
   13534:	bne	13b0c <__assert_fail@plt+0x1e60>
   13538:	ldrb	r0, [fp, #-709]	; 0xfffffd3b
   1353c:	cmp	r0, #0
   13540:	bne	13b24 <__assert_fail@plt+0x1e78>
   13544:	ldrb	r0, [fp, #-710]	; 0xfffffd3a
   13548:	cmp	r0, #0
   1354c:	beq	13b3c <__assert_fail@plt+0x1e90>
   13550:	movw	r1, #1837	; 0x72d
   13554:	mov	r0, #0
   13558:	mov	r2, #5
   1355c:	movt	r1, #3
   13560:	bl	11934 <dcgettext@plt>
   13564:	ldr	r1, [sp, #144]	; 0x90
   13568:	ldr	r2, [r1, #4]
   1356c:	mov	r1, r9
   13570:	bl	11868 <printf@plt>
   13574:	movw	r2, #1876	; 0x754
   13578:	mov	r0, r9
   1357c:	mov	r1, #20
   13580:	mov	r3, r4
   13584:	movt	r2, #3
   13588:	bl	11a30 <strftime@plt>
   1358c:	cmp	r0, #5
   13590:	bne	13b54 <__assert_fail@plt+0x1ea8>
   13594:	movw	r0, #4079	; 0xfef
   13598:	mov	r1, r9
   1359c:	movt	r0, #3
   135a0:	bl	11868 <printf@plt>
   135a4:	movw	r1, #1892	; 0x764
   135a8:	movw	r2, #1923	; 0x783
   135ac:	mov	r0, #5
   135b0:	mov	r3, r6
   135b4:	movt	r1, #3
   135b8:	movt	r2, #3
   135bc:	str	r0, [sp]
   135c0:	mov	r0, #0
   135c4:	bl	11ca0 <dcngettext@plt>
   135c8:	mov	r4, r0
   135cc:	mov	r5, #1
   135d0:	mov	r0, r6
   135d4:	mov	r1, #0
   135d8:	mov	r2, r9
   135dc:	mov	r3, #0
   135e0:	stm	sp, {r5, sl}
   135e4:	str	r5, [sp, #8]
   135e8:	str	sl, [sp, #12]
   135ec:	bl	15360 <__assert_fail@plt+0x36b4>
   135f0:	mov	r1, r0
   135f4:	mov	r0, r4
   135f8:	bl	11868 <printf@plt>
   135fc:	movw	r0, #8836	; 0x2284
   13600:	movw	r1, #1979	; 0x7bb
   13604:	mov	r2, #5
   13608:	movt	r0, #4
   1360c:	movt	r1, #3
   13610:	ldrb	r0, [r0]
   13614:	cmp	r0, #0
   13618:	movw	r0, #1955	; 0x7a3
   1361c:	movt	r0, #3
   13620:	movne	r1, r0
   13624:	mov	r0, #0
   13628:	bl	11934 <dcgettext@plt>
   1362c:	movw	r8, #8776	; 0x2248
   13630:	mov	r4, r0
   13634:	mov	r2, r9
   13638:	mov	r3, #0
   1363c:	stm	sp, {r5, sl}
   13640:	str	r5, [sp, #8]
   13644:	str	sl, [sp, #12]
   13648:	movt	r8, #4
   1364c:	ldrd	r0, [r8, #8]
   13650:	bl	15360 <__assert_fail@plt+0x36b4>
   13654:	mov	r1, r0
   13658:	mov	r0, r4
   1365c:	bl	11868 <printf@plt>
   13660:	movw	r1, #1998	; 0x7ce
   13664:	mov	r0, #0
   13668:	mov	r2, #5
   1366c:	movt	r1, #3
   13670:	bl	11934 <dcgettext@plt>
   13674:	str	r0, [sp, #184]	; 0xb8
   13678:	ldrd	r0, [r8, #16]
   1367c:	mov	r2, r9
   13680:	mov	r3, #0
   13684:	stm	sp, {r5, sl}
   13688:	str	r5, [sp, #8]
   1368c:	str	sl, [sp, #12]
   13690:	bl	15360 <__assert_fail@plt+0x36b4>
   13694:	mov	r9, r0
   13698:	ldrd	r0, [r8, #24]
   1369c:	sub	lr, fp, #1024	; 0x400
   136a0:	mov	r3, #0
   136a4:	stm	sp, {r5, sl}
   136a8:	str	r5, [sp, #8]
   136ac:	str	sl, [sp, #12]
   136b0:	sub	r2, lr, #356	; 0x164
   136b4:	bl	15360 <__assert_fail@plt+0x36b4>
   136b8:	mov	sl, r0
   136bc:	ldrd	r0, [r8, #32]
   136c0:	add	lr, sp, #1024	; 0x400
   136c4:	mov	r6, #0
   136c8:	mov	r3, #0
   136cc:	stm	sp, {r5, r6}
   136d0:	str	r5, [sp, #8]
   136d4:	add	r2, lr, #264	; 0x108
   136d8:	str	r6, [sp, #12]
   136dc:	bl	15360 <__assert_fail@plt+0x36b4>
   136e0:	mov	r4, r0
   136e4:	ldrd	r0, [r8, #40]	; 0x28
   136e8:	add	r2, sp, #636	; 0x27c
   136ec:	mov	r3, #0
   136f0:	stm	sp, {r5, r6}
   136f4:	str	r5, [sp, #8]
   136f8:	str	r6, [sp, #12]
   136fc:	bl	15360 <__assert_fail@plt+0x36b4>
   13700:	str	r0, [sp]
   13704:	ldr	r0, [sp, #184]	; 0xb8
   13708:	mov	r1, r9
   1370c:	ldr	r9, [sp, #176]	; 0xb0
   13710:	mov	r2, sl
   13714:	mov	r3, r4
   13718:	bl	11868 <printf@plt>
   1371c:	ldr	r0, [sp, #208]	; 0xd0
   13720:	cmp	r0, #0
   13724:	bne	137c4 <__assert_fail@plt+0x1b18>
   13728:	movw	r0, #8836	; 0x2284
   1372c:	movt	r0, #4
   13730:	ldrb	r0, [r0]
   13734:	cmp	r0, #1
   13738:	bne	1374c <__assert_fail@plt+0x1aa0>
   1373c:	movw	r1, #2178	; 0x882
   13740:	mov	r0, #0
   13744:	movt	r1, #3
   13748:	b	137b8 <__assert_fail@plt+0x1b0c>
   1374c:	movw	r5, #8776	; 0x2248
   13750:	movt	r5, #4
   13754:	ldrd	r0, [r5, #16]
   13758:	orrs	r0, r0, r1
   1375c:	beq	137ac <__assert_fail@plt+0x1b00>
   13760:	movw	r1, #2266	; 0x8da
   13764:	mov	r0, #0
   13768:	mov	r2, #5
   1376c:	movt	r1, #3
   13770:	bl	11934 <dcgettext@plt>
   13774:	mov	r4, r0
   13778:	ldrd	r0, [r5, #16]
   1377c:	bl	2f9d0 <__assert_fail@plt+0x1dd24>
   13780:	ldr	r2, [sp, #168]	; 0xa8
   13784:	vmov	d17, r0, r1
   13788:	mov	r0, r4
   1378c:	vmov	s0, r2
   13790:	vcvt.f64.u32	d16, s0
   13794:	vsub.f64	d16, d17, d16
   13798:	vmul.f64	d16, d16, d12
   1379c:	vdiv.f64	d16, d16, d17
   137a0:	vmov	r2, r3, d16
   137a4:	bl	11868 <printf@plt>
   137a8:	b	137c4 <__assert_fail@plt+0x1b18>
   137ac:	movw	r1, #2312	; 0x908
   137b0:	mov	r0, #0
   137b4:	movt	r1, #3
   137b8:	mov	r2, #5
   137bc:	bl	11934 <dcgettext@plt>
   137c0:	bl	11868 <printf@plt>
   137c4:	movw	r0, #8724	; 0x2214
   137c8:	movt	r0, #4
   137cc:	ldr	r1, [r0]
   137d0:	mov	r0, #10
   137d4:	bl	11c04 <putc@plt>
   137d8:	ldr	r0, [sp, #368]	; 0x170
   137dc:	bl	118c8 <ferror@plt>
   137e0:	cmp	r0, #0
   137e4:	beq	13820 <__assert_fail@plt+0x1b74>
   137e8:	ldr	r0, [sp, #196]	; 0xc4
   137ec:	ldr	r2, [sp, #372]	; 0x174
   137f0:	mov	r1, #8
   137f4:	mov	sl, #0
   137f8:	ldr	r5, [r0]
   137fc:	mov	r0, #0
   13800:	bl	19160 <__assert_fail@plt+0x74b4>
   13804:	movw	r2, #5748	; 0x1674
   13808:	mov	r3, r0
   1380c:	mov	r0, #0
   13810:	mov	r1, r5
   13814:	movt	r2, #3
   13818:	bl	119dc <error@plt>
   1381c:	b	1382c <__assert_fail@plt+0x1b80>
   13820:	movw	r0, #8744	; 0x2228
   13824:	movt	r0, #4
   13828:	ldr	sl, [r0, #8]
   1382c:	ldr	r0, [sp, #200]	; 0xc8
   13830:	bl	11b74 <fclose@plt>
   13834:	ldr	r5, [sp, #164]	; 0xa4
   13838:	cmn	r0, #1
   1383c:	beq	138e8 <__assert_fail@plt+0x1c3c>
   13840:	ldr	r0, [sp, #172]	; 0xac
   13844:	cmp	r0, #0
   13848:	beq	13850 <__assert_fail@plt+0x1ba4>
   1384c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   13850:	cmp	r5, #0
   13854:	beq	1388c <__assert_fail@plt+0x1be0>
   13858:	movw	r1, #5736	; 0x1668
   1385c:	add	r0, sp, #336	; 0x150
   13860:	mov	r2, #0
   13864:	add	r3, sp, #340	; 0x154
   13868:	movt	r1, #3
   1386c:	str	r0, [sp]
   13870:	mov	r0, r5
   13874:	bl	15098 <__assert_fail@plt+0x33ec>
   13878:	cmp	r0, #0
   1387c:	beq	1388c <__assert_fail@plt+0x1be0>
   13880:	movw	r4, #8776	; 0x2248
   13884:	movt	r4, #4
   13888:	b	127d4 <__assert_fail@plt+0xb28>
   1388c:	ldr	r0, [sp, #116]	; 0x74
   13890:	cmp	r0, #0
   13894:	beq	138a8 <__assert_fail@plt+0x1bfc>
   13898:	movw	r0, #65163	; 0xfe8b
   1389c:	mov	r1, sl
   138a0:	movt	r0, #2
   138a4:	bl	11868 <printf@plt>
   138a8:	mov	r5, #0
   138ac:	cmp	sl, #0
   138b0:	bne	13938 <__assert_fail@plt+0x1c8c>
   138b4:	movw	r1, #8744	; 0x2228
   138b8:	ldr	r0, [sp, #204]	; 0xcc
   138bc:	movt	r1, #4
   138c0:	ldrd	r2, [r1]
   138c4:	clz	r0, r0
   138c8:	lsr	r0, r0, #5
   138cc:	orrs	r1, r2, r3
   138d0:	movwne	r1, #1
   138d4:	orr	r0, r0, r1
   138d8:	clz	r1, r9
   138dc:	lsr	r1, r1, #5
   138e0:	and	r5, r1, r0
   138e4:	b	13938 <__assert_fail@plt+0x1c8c>
   138e8:	ldr	r0, [sp, #196]	; 0xc4
   138ec:	ldr	r2, [sp, #120]	; 0x78
   138f0:	mov	r5, #0
   138f4:	mov	r1, #8
   138f8:	b	13914 <__assert_fail@plt+0x1c68>
   138fc:	mov	r0, r4
   13900:	bl	11c88 <close@plt>
   13904:	ldr	r0, [sp, #196]	; 0xc4
   13908:	mov	r5, #0
   1390c:	mov	r1, #8
   13910:	mov	r2, r9
   13914:	ldr	r4, [r0]
   13918:	mov	r0, #0
   1391c:	bl	19160 <__assert_fail@plt+0x74b4>
   13920:	movw	r2, #5748	; 0x1674
   13924:	mov	r3, r0
   13928:	mov	r0, #0
   1392c:	mov	r1, r4
   13930:	movt	r2, #3
   13934:	bl	119dc <error@plt>
   13938:	mov	r0, r5
   1393c:	sub	sp, fp, #72	; 0x48
   13940:	vpop	{d8-d12}
   13944:	add	sp, sp, #4
   13948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1394c:	movw	r1, #65000	; 0xfde8
   13950:	mov	r0, #0
   13954:	mov	r2, #5
   13958:	mov	r5, #0
   1395c:	movt	r1, #2
   13960:	bl	11934 <dcgettext@plt>
   13964:	mov	r2, r0
   13968:	mov	r0, #0
   1396c:	mov	r1, #0
   13970:	bl	119dc <error@plt>
   13974:	b	13938 <__assert_fail@plt+0x1c8c>
   13978:	movw	r2, #5748	; 0x1674
   1397c:	mov	r3, r0
   13980:	mov	r0, #1
   13984:	mov	r1, #0
   13988:	movt	r2, #3
   1398c:	bl	119dc <error@plt>
   13990:	mov	r0, #1
   13994:	bl	13c14 <__assert_fail@plt+0x1f68>
   13998:	mov	r0, #0
   1399c:	bl	13c14 <__assert_fail@plt+0x1f68>
   139a0:	movw	r1, #8728	; 0x2218
   139a4:	movw	r3, #2356	; 0x934
   139a8:	movt	r1, #4
   139ac:	movt	r3, #3
   139b0:	ldr	r2, [r1]
   139b4:	ldr	r1, [fp, #-1380]	; 0xfffffa9c
   139b8:	str	r2, [sp]
   139bc:	mov	r2, #108	; 0x6c
   139c0:	bl	1a500 <__assert_fail@plt+0x8854>
   139c4:	movw	r0, #64918	; 0xfd96
   139c8:	movw	r1, #64933	; 0xfda5
   139cc:	movw	r3, #64942	; 0xfdae
   139d0:	movw	r2, #1613	; 0x64d
   139d4:	movt	r0, #2
   139d8:	movt	r1, #2
   139dc:	movt	r3, #2
   139e0:	bl	11cac <__assert_fail@plt>
   139e4:	movw	r1, #237	; 0xed
   139e8:	mov	r0, #0
   139ec:	mov	r2, #5
   139f0:	movt	r1, #3
   139f4:	bl	11934 <dcgettext@plt>
   139f8:	mov	r2, r0
   139fc:	mov	r0, #1
   13a00:	mov	r1, #0
   13a04:	bl	119dc <error@plt>
   13a08:	mov	r4, #34	; 0x22
   13a0c:	b	13a14 <__assert_fail@plt+0x1d68>
   13a10:	mov	r4, #22
   13a14:	movw	r1, #298	; 0x12a
   13a18:	mov	r0, #0
   13a1c:	mov	r2, #5
   13a20:	movt	r1, #3
   13a24:	bl	11934 <dcgettext@plt>
   13a28:	mov	r6, r0
   13a2c:	mov	r0, #0
   13a30:	mov	r1, #8
   13a34:	mov	r2, r5
   13a38:	bl	19160 <__assert_fail@plt+0x74b4>
   13a3c:	mov	r3, r0
   13a40:	mov	r0, #1
   13a44:	mov	r1, r4
   13a48:	mov	r2, r6
   13a4c:	bl	119dc <error@plt>
   13a50:	movw	r1, #298	; 0x12a
   13a54:	mov	r0, #0
   13a58:	mov	r2, #5
   13a5c:	movt	r1, #3
   13a60:	bl	11934 <dcgettext@plt>
   13a64:	mov	r4, r0
   13a68:	mov	r0, #0
   13a6c:	mov	r1, #8
   13a70:	mov	r2, r5
   13a74:	bl	19160 <__assert_fail@plt+0x74b4>
   13a78:	mov	r3, r0
   13a7c:	mov	r0, #1
   13a80:	mov	r1, #0
   13a84:	mov	r2, r4
   13a88:	bl	119dc <error@plt>
   13a8c:	movw	r0, #928	; 0x3a0
   13a90:	movw	r1, #64933	; 0xfda5
   13a94:	movw	r3, #937	; 0x3a9
   13a98:	movw	r2, #935	; 0x3a7
   13a9c:	movt	r0, #3
   13aa0:	movt	r1, #2
   13aa4:	movt	r3, #3
   13aa8:	bl	11cac <__assert_fail@plt>
   13aac:	ldr	r0, [sp, #196]	; 0xc4
   13ab0:	movw	r1, #64850	; 0xfd52
   13ab4:	mov	r2, #5
   13ab8:	movt	r1, #2
   13abc:	ldr	r4, [r0]
   13ac0:	mov	r0, #0
   13ac4:	bl	11934 <dcgettext@plt>
   13ac8:	mov	r2, r0
   13acc:	mov	r0, #1
   13ad0:	mov	r1, r4
   13ad4:	bl	119dc <error@plt>
   13ad8:	movw	r1, #64793	; 0xfd19
   13adc:	movt	r1, #2
   13ae0:	b	13ba0 <__assert_fail@plt+0x1ef4>
   13ae4:	movw	r1, #670	; 0x29e
   13ae8:	mov	r0, #0
   13aec:	mov	r2, #5
   13af0:	movt	r1, #3
   13af4:	bl	11934 <dcgettext@plt>
   13af8:	ldr	r2, [sp, #120]	; 0x78
   13afc:	mov	r4, r0
   13b00:	mov	r0, #0
   13b04:	mov	r1, #8
   13b08:	b	13a74 <__assert_fail@plt+0x1dc8>
   13b0c:	movw	r0, #1698	; 0x6a2
   13b10:	movw	r1, #64933	; 0xfda5
   13b14:	movw	r3, #1724	; 0x6bc
   13b18:	movw	r2, #845	; 0x34d
   13b1c:	movt	r0, #3
   13b20:	b	13b68 <__assert_fail@plt+0x1ebc>
   13b24:	movw	r0, #1779	; 0x6f3
   13b28:	movw	r1, #64933	; 0xfda5
   13b2c:	movw	r3, #1724	; 0x6bc
   13b30:	movw	r2, #846	; 0x34e
   13b34:	movt	r0, #3
   13b38:	b	13b68 <__assert_fail@plt+0x1ebc>
   13b3c:	movw	r0, #1808	; 0x710
   13b40:	movw	r1, #64933	; 0xfda5
   13b44:	movw	r3, #1724	; 0x6bc
   13b48:	movw	r2, #847	; 0x34f
   13b4c:	movt	r0, #3
   13b50:	b	13b68 <__assert_fail@plt+0x1ebc>
   13b54:	movw	r0, #1879	; 0x757
   13b58:	movw	r1, #64933	; 0xfda5
   13b5c:	movw	r3, #1724	; 0x6bc
   13b60:	movw	r2, #851	; 0x353
   13b64:	movt	r0, #3
   13b68:	movt	r1, #2
   13b6c:	movt	r3, #3
   13b70:	bl	11cac <__assert_fail@plt>
   13b74:	movw	r1, #64696	; 0xfcb8
   13b78:	mov	r0, #0
   13b7c:	mov	r2, #5
   13b80:	movt	r1, #2
   13b84:	bl	11934 <dcgettext@plt>
   13b88:	mov	r4, r0
   13b8c:	bl	11af0 <__errno_location@plt>
   13b90:	str	r0, [sp, #196]	; 0xc4
   13b94:	b	13bd4 <__assert_fail@plt+0x1f28>
   13b98:	movw	r1, #64728	; 0xfcd8
   13b9c:	movt	r1, #2
   13ba0:	mov	r0, #0
   13ba4:	mov	r2, #5
   13ba8:	bl	11934 <dcgettext@plt>
   13bac:	mov	r4, r0
   13bb0:	b	13bd4 <__assert_fail@plt+0x1f28>
   13bb4:	movw	r1, #64761	; 0xfcf9
   13bb8:	mov	r0, #0
   13bbc:	mov	r2, #5
   13bc0:	movt	r1, #2
   13bc4:	bl	11934 <dcgettext@plt>
   13bc8:	mov	r4, r0
   13bcc:	ldr	r0, [sp, #196]	; 0xc4
   13bd0:	str	r5, [r0]
   13bd4:	ldr	r0, [sp, #196]	; 0xc4
   13bd8:	mov	r1, #8
   13bdc:	mov	r2, r4
   13be0:	ldr	r5, [r0]
   13be4:	mov	r0, #0
   13be8:	bl	19160 <__assert_fail@plt+0x74b4>
   13bec:	movw	r2, #5748	; 0x1674
   13bf0:	mov	r3, r0
   13bf4:	mov	r0, #1
   13bf8:	mov	r1, r5
   13bfc:	movt	r2, #3
   13c00:	bl	119dc <error@plt>
   13c04:	movw	r0, #8740	; 0x2224
   13c08:	movt	r0, #4
   13c0c:	ldr	r0, [r0]
   13c10:	b	1b4e8 <__assert_fail@plt+0x983c>
   13c14:	push	{fp, lr}
   13c18:	mov	fp, sp
   13c1c:	cmp	r0, #0
   13c20:	bne	13c70 <__assert_fail@plt+0x1fc4>
   13c24:	movw	r5, #8724	; 0x2214
   13c28:	movw	r1, #65357	; 0xff4d
   13c2c:	mov	r0, #0
   13c30:	mov	r2, #5
   13c34:	movt	r5, #4
   13c38:	movt	r1, #2
   13c3c:	ldr	r4, [r5]
   13c40:	bl	11934 <dcgettext@plt>
   13c44:	movw	r6, #8852	; 0x2294
   13c48:	mov	r1, r0
   13c4c:	mov	r0, r4
   13c50:	movt	r6, #4
   13c54:	ldr	r2, [r6]
   13c58:	bl	11ad8 <fprintf@plt>
   13c5c:	ldr	r0, [r5]
   13c60:	ldr	r1, [r6]
   13c64:	bl	15128 <__assert_fail@plt+0x347c>
   13c68:	mov	r0, #0
   13c6c:	bl	11a90 <exit@plt>
   13c70:	mov	r4, r0
   13c74:	movw	r0, #8720	; 0x2210
   13c78:	movw	r1, #65318	; 0xff26
   13c7c:	mov	r2, #5
   13c80:	movt	r0, #4
   13c84:	movt	r1, #2
   13c88:	ldr	r5, [r0]
   13c8c:	mov	r0, #0
   13c90:	bl	11934 <dcgettext@plt>
   13c94:	mov	r1, r0
   13c98:	movw	r0, #8852	; 0x2294
   13c9c:	movt	r0, #4
   13ca0:	ldr	r2, [r0]
   13ca4:	mov	r0, r5
   13ca8:	bl	11ad8 <fprintf@plt>
   13cac:	mov	r0, r4
   13cb0:	bl	11a90 <exit@plt>
   13cb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13cb8:	add	fp, sp, #24
   13cbc:	sub	sp, sp, #8
   13cc0:	mov	r4, r0
   13cc4:	ldr	r0, [r0]
   13cc8:	cmp	r0, #128	; 0x80
   13ccc:	bne	13cfc <__assert_fail@plt+0x2050>
   13cd0:	ldr	r5, [r4, #24]
   13cd4:	mov	r0, r5
   13cd8:	bl	11b44 <fgetc@plt>
   13cdc:	mov	r6, r0
   13ce0:	mov	r0, r5
   13ce4:	bl	11b44 <fgetc@plt>
   13ce8:	uxtb	r0, r0
   13cec:	ldr	r1, [r4, #4]
   13cf0:	orr	r0, r0, r6, lsl #8
   13cf4:	sxtah	r6, r1, r0
   13cf8:	b	13d0c <__assert_fail@plt+0x2060>
   13cfc:	ldr	r1, [r4, #4]
   13d00:	addlt	r6, r1, r0
   13d04:	addge	r0, r0, r1
   13d08:	subge	r6, r0, #256	; 0x100
   13d0c:	cmp	r6, #0
   13d10:	str	r6, [r4, #4]
   13d14:	bmi	13e70 <__assert_fail@plt+0x21c4>
   13d18:	ldr	r0, [r4, #8]
   13d1c:	cmp	r6, r0
   13d20:	bgt	13e70 <__assert_fail@plt+0x21c4>
   13d24:	ldr	r3, [r4, #24]
   13d28:	mov	r0, #0
   13d2c:	mov	r1, sp
   13d30:	mov	r2, #0
   13d34:	str	r0, [sp, #4]
   13d38:	str	r0, [sp]
   13d3c:	add	r0, sp, #4
   13d40:	bl	11c28 <getdelim@plt>
   13d44:	cmp	r0, #0
   13d48:	bmi	13e64 <__assert_fail@plt+0x21b8>
   13d4c:	ldr	r1, [sp, #4]
   13d50:	cmp	r1, #0
   13d54:	beq	13eac <__assert_fail@plt+0x2200>
   13d58:	ldr	r2, [r4, #16]
   13d5c:	add	r8, r0, #1
   13d60:	mov	r5, r0
   13d64:	ldr	r0, [r4, #12]
   13d68:	add	r7, r8, r6
   13d6c:	cmp	r7, r2
   13d70:	bls	13d90 <__assert_fail@plt+0x20e4>
   13d74:	mov	r1, r7
   13d78:	bl	1b64c <__assert_fail@plt+0x99a0>
   13d7c:	cmp	r0, #0
   13d80:	beq	13e64 <__assert_fail@plt+0x21b8>
   13d84:	str	r0, [r4, #12]
   13d88:	str	r7, [r4, #16]
   13d8c:	ldr	r1, [sp, #4]
   13d90:	add	r0, r0, r6
   13d94:	mov	r2, r8
   13d98:	bl	118ec <memcpy@plt>
   13d9c:	ldr	r0, [sp, #4]
   13da0:	bl	1b4e8 <__assert_fail@plt+0x983c>
   13da4:	cmp	r5, #1
   13da8:	blt	13e64 <__assert_fail@plt+0x21b8>
   13dac:	ldr	r0, [r4, #24]
   13db0:	bl	11c7c <getc@plt>
   13db4:	str	r0, [r4]
   13db8:	ldr	r0, [r4, #4]
   13dbc:	add	r0, r0, r5
   13dc0:	subs	r1, r0, #1
   13dc4:	str	r1, [r4, #8]
   13dc8:	bgt	13e0c <__assert_fail@plt+0x2160>
   13dcc:	movw	r1, #1149	; 0x47d
   13dd0:	mov	r0, #0
   13dd4:	mov	r2, #5
   13dd8:	movt	r1, #3
   13ddc:	bl	11934 <dcgettext@plt>
   13de0:	ldr	r2, [r4, #28]
   13de4:	mov	r5, r0
   13de8:	mov	r0, #0
   13dec:	mov	r1, #8
   13df0:	bl	19160 <__assert_fail@plt+0x74b4>
   13df4:	mov	r3, r0
   13df8:	mov	r0, #1
   13dfc:	mov	r1, #0
   13e00:	mov	r2, r5
   13e04:	bl	119dc <error@plt>
   13e08:	ldr	r1, [r4, #8]
   13e0c:	ldr	r0, [r4, #12]
   13e10:	add	r2, r0, r1
   13e14:	ldrb	r3, [r2, #-1]
   13e18:	cmp	r3, #0
   13e1c:	beq	13ecc <__assert_fail@plt+0x2220>
   13e20:	ldrb	r1, [r0, r1]
   13e24:	cmp	r1, #0
   13e28:	bne	13ee4 <__assert_fail@plt+0x2238>
   13e2c:	ldrb	r1, [r2, #1]
   13e30:	cmp	r1, #0
   13e34:	streq	r0, [r4, #20]
   13e38:	moveq	r0, #1
   13e3c:	subeq	sp, fp, #24
   13e40:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e44:	movw	r0, #1273	; 0x4f9
   13e48:	movw	r1, #64933	; 0xfda5
   13e4c:	movw	r3, #1203	; 0x4b3
   13e50:	movw	r2, #570	; 0x23a
   13e54:	movt	r0, #3
   13e58:	movt	r1, #2
   13e5c:	movt	r3, #3
   13e60:	bl	11cac <__assert_fail@plt>
   13e64:	mov	r0, #8
   13e68:	sub	sp, fp, #24
   13e6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e70:	movw	r1, #1149	; 0x47d
   13e74:	mov	r0, #0
   13e78:	mov	r2, #5
   13e7c:	movt	r1, #3
   13e80:	bl	11934 <dcgettext@plt>
   13e84:	ldr	r2, [r4, #28]
   13e88:	mov	r5, r0
   13e8c:	mov	r0, #0
   13e90:	mov	r1, #8
   13e94:	bl	19160 <__assert_fail@plt+0x74b4>
   13e98:	mov	r3, r0
   13e9c:	mov	r0, #1
   13ea0:	mov	r1, #0
   13ea4:	mov	r2, r5
   13ea8:	bl	119dc <error@plt>
   13eac:	movw	r0, #1286	; 0x506
   13eb0:	movw	r1, #64933	; 0xfda5
   13eb4:	movw	r3, #1296	; 0x510
   13eb8:	mov	r2, #245	; 0xf5
   13ebc:	movt	r0, #3
   13ec0:	movt	r1, #2
   13ec4:	movt	r3, #3
   13ec8:	bl	11cac <__assert_fail@plt>
   13ecc:	movw	r0, #1190	; 0x4a6
   13ed0:	movw	r1, #64933	; 0xfda5
   13ed4:	movw	r3, #1203	; 0x4b3
   13ed8:	mov	r2, #568	; 0x238
   13edc:	movt	r0, #3
   13ee0:	b	13e58 <__assert_fail@plt+0x21ac>
   13ee4:	movw	r0, #1260	; 0x4ec
   13ee8:	movw	r1, #64933	; 0xfda5
   13eec:	movw	r3, #1203	; 0x4b3
   13ef0:	movw	r2, #569	; 0x239
   13ef4:	movt	r0, #3
   13ef8:	b	13e58 <__assert_fail@plt+0x21ac>
   13efc:	push	{r4, r5, r6, r7, fp, lr}
   13f00:	add	fp, sp, #16
   13f04:	mov	r4, r0
   13f08:	ldr	r0, [r0]
   13f0c:	cmn	r0, #1
   13f10:	beq	13f78 <__assert_fail@plt+0x22cc>
   13f14:	cmp	r0, #30
   13f18:	bne	13f80 <__assert_fail@plt+0x22d4>
   13f1c:	ldr	r5, [r4, #4]
   13f20:	ldr	r2, [r4, #8]
   13f24:	ldr	r0, [r4, #24]
   13f28:	ldr	r1, [r4, #28]
   13f2c:	sub	r3, r5, #14
   13f30:	cmp	r3, #0
   13f34:	str	r3, [r4, #4]
   13f38:	subgt	r2, r2, r3
   13f3c:	add	r3, r4, #32
   13f40:	bl	147d0 <__assert_fail@plt+0x2b24>
   13f44:	rsb	r1, r5, #14
   13f48:	cmp	r0, r1
   13f4c:	blt	140f4 <__assert_fail@plt+0x2448>
   13f50:	ldr	r1, [r4, #4]
   13f54:	add	r6, r1, r0
   13f58:	cmn	r6, #1
   13f5c:	str	r6, [r4, #4]
   13f60:	bgt	13f98 <__assert_fail@plt+0x22ec>
   13f64:	movw	r0, #1489	; 0x5d1
   13f68:	movw	r1, #64933	; 0xfda5
   13f6c:	movw	r3, #1437	; 0x59d
   13f70:	mov	r2, #480	; 0x1e0
   13f74:	b	1411c <__assert_fail@plt+0x2470>
   13f78:	mov	r0, #8
   13f7c:	pop	{r4, r5, r6, r7, fp, pc}
   13f80:	ldr	r1, [r4, #4]
   13f84:	add	r0, r0, r1
   13f88:	sub	r6, r0, #14
   13f8c:	cmn	r6, #1
   13f90:	str	r6, [r4, #4]
   13f94:	ble	1410c <__assert_fail@plt+0x2460>
   13f98:	ldr	r0, [r4, #24]
   13f9c:	bl	11c7c <getc@plt>
   13fa0:	cmp	r0, #31
   13fa4:	str	r0, [r4]
   13fa8:	blt	140a0 <__assert_fail@plt+0x23f4>
   13fac:	add	r5, r4, #16
   13fb0:	cmp	r0, #127	; 0x7f
   13fb4:	ble	1402c <__assert_fail@plt+0x2380>
   13fb8:	b	14050 <__assert_fail@plt+0x23a4>
   13fbc:	str	r7, [r4, #16]
   13fc0:	mov	r1, r5
   13fc4:	mov	r2, #1
   13fc8:	ldr	r0, [r4, #12]
   13fcc:	bl	1a12c <__assert_fail@plt+0x8480>
   13fd0:	str	r0, [r4, #12]
   13fd4:	mov	r1, r0
   13fd8:	ldr	r0, [r4]
   13fdc:	and	r0, r0, #127	; 0x7f
   13fe0:	str	r0, [r4]
   13fe4:	add	r0, r4, r0
   13fe8:	ldrb	r0, [r0, #36]	; 0x24
   13fec:	strb	r0, [r1, r6]
   13ff0:	ldr	r0, [r4]
   13ff4:	ldr	r1, [r4, #12]
   13ff8:	add	r0, r4, r0
   13ffc:	add	r1, r6, r1
   14000:	ldrb	r0, [r0, #164]	; 0xa4
   14004:	add	r1, r1, #1
   14008:	strb	r0, [r1]
   1400c:	mov	r6, r7
   14010:	ldr	r0, [r4, #24]
   14014:	bl	11c7c <getc@plt>
   14018:	cmp	r0, #30
   1401c:	str	r0, [r4]
   14020:	ble	14098 <__assert_fail@plt+0x23ec>
   14024:	cmp	r0, #127	; 0x7f
   14028:	bgt	14050 <__assert_fail@plt+0x23a4>
   1402c:	cmn	r6, #1
   14030:	beq	140ec <__assert_fail@plt+0x2440>
   14034:	ldr	r1, [r5]
   14038:	add	r7, r6, #1
   1403c:	cmp	r1, r6
   14040:	bls	14070 <__assert_fail@plt+0x23c4>
   14044:	ldr	r1, [r4, #12]
   14048:	add	r1, r1, r6
   1404c:	b	14008 <__assert_fail@plt+0x235c>
   14050:	cmn	r6, #2
   14054:	bcs	140ec <__assert_fail@plt+0x2440>
   14058:	ldr	r1, [r5]
   1405c:	add	r7, r6, #2
   14060:	cmp	r1, r7
   14064:	bcc	13fbc <__assert_fail@plt+0x2310>
   14068:	ldr	r1, [r4, #12]
   1406c:	b	13fdc <__assert_fail@plt+0x2330>
   14070:	str	r7, [r4, #16]
   14074:	mov	r1, r5
   14078:	mov	r2, #1
   1407c:	ldr	r0, [r4, #12]
   14080:	bl	1a12c <__assert_fail@plt+0x8480>
   14084:	str	r0, [r4, #12]
   14088:	mov	r1, r0
   1408c:	ldr	r0, [r4]
   14090:	add	r1, r1, r6
   14094:	b	14008 <__assert_fail@plt+0x235c>
   14098:	cmn	r6, #1
   1409c:	beq	140ec <__assert_fail@plt+0x2440>
   140a0:	mov	r1, r4
   140a4:	ldr	r0, [r1, #16]!
   140a8:	cmp	r0, r6
   140ac:	bls	140b8 <__assert_fail@plt+0x240c>
   140b0:	ldr	r0, [r4, #12]
   140b4:	b	140d0 <__assert_fail@plt+0x2424>
   140b8:	add	r0, r6, #1
   140bc:	mov	r2, #1
   140c0:	str	r0, [r4, #16]
   140c4:	ldr	r0, [r4, #12]
   140c8:	bl	1a12c <__assert_fail@plt+0x8480>
   140cc:	str	r0, [r4, #12]
   140d0:	mov	r1, #0
   140d4:	strb	r1, [r0, r6]
   140d8:	str	r6, [r4, #8]
   140dc:	ldr	r0, [r4, #12]
   140e0:	str	r0, [r4, #20]
   140e4:	mov	r0, #1
   140e8:	pop	{r4, r5, r6, r7, fp, pc}
   140ec:	mov	r0, r4
   140f0:	bl	1479c <__assert_fail@plt+0x2af0>
   140f4:	movw	r0, #1422	; 0x58e
   140f8:	movw	r1, #64933	; 0xfda5
   140fc:	movw	r3, #1437	; 0x59d
   14100:	movw	r2, #478	; 0x1de
   14104:	movt	r0, #3
   14108:	b	14120 <__assert_fail@plt+0x2474>
   1410c:	movw	r0, #1489	; 0x5d1
   14110:	movw	r1, #64933	; 0xfda5
   14114:	movw	r3, #1437	; 0x59d
   14118:	movw	r2, #485	; 0x1e5
   1411c:	movt	r0, #3
   14120:	movt	r1, #2
   14124:	movt	r3, #3
   14128:	bl	11cac <__assert_fail@plt>
   1412c:	push	{r4, sl, fp, lr}
   14130:	add	fp, sp, #8
   14134:	mov	r4, r0
   14138:	ldr	r0, [r0, #12]
   1413c:	bl	15194 <__assert_fail@plt+0x34e8>
   14140:	str	r0, [r4, #20]
   14144:	mov	r0, #1
   14148:	pop	{r4, sl, fp, pc}
   1414c:	push	{r4, r5, fp, lr}
   14150:	add	fp, sp, #8
   14154:	sub	sp, sp, #8
   14158:	ldr	r5, [r0, #20]
   1415c:	mov	r4, r1
   14160:	mov	r0, r5
   14164:	bl	11ac0 <strlen@plt>
   14168:	mov	r2, r0
   1416c:	mov	r0, #0
   14170:	mov	r1, r5
   14174:	mov	r3, #0
   14178:	str	r0, [sp, #4]
   1417c:	mov	r0, r4
   14180:	str	r2, [sp]
   14184:	bl	2083c <__assert_fail@plt+0xeb90>
   14188:	cmp	r0, #0
   1418c:	mov	r1, #2
   14190:	movwmi	r1, #4
   14194:	mov	r0, r1
   14198:	sub	sp, fp, #8
   1419c:	pop	{r4, r5, fp, pc}
   141a0:	push	{fp, lr}
   141a4:	mov	fp, sp
   141a8:	mov	r2, r1
   141ac:	ldr	r1, [r0, #20]
   141b0:	mov	r0, r2
   141b4:	mov	r2, #16
   141b8:	bl	119e8 <fnmatch@plt>
   141bc:	cmp	r0, #0
   141c0:	mov	r1, #4
   141c4:	movweq	r1, #2
   141c8:	mov	r0, r1
   141cc:	pop	{fp, pc}
   141d0:	push	{fp, lr}
   141d4:	mov	fp, sp
   141d8:	mov	r2, r1
   141dc:	ldr	r1, [r0, #20]
   141e0:	mov	r0, r2
   141e4:	mov	r2, #0
   141e8:	bl	119e8 <fnmatch@plt>
   141ec:	cmp	r0, #0
   141f0:	mov	r1, #4
   141f4:	movweq	r1, #2
   141f8:	mov	r0, r1
   141fc:	pop	{fp, pc}
   14200:	push	{r4, r5, fp, lr}
   14204:	add	fp, sp, #8
   14208:	mov	r4, r1
   1420c:	mov	r5, r0
   14210:	bl	119ac <__ctype_get_mb_cur_max@plt>
   14214:	cmp	r0, #1
   14218:	bne	1423c <__assert_fail@plt+0x2590>
   1421c:	ldr	r0, [r5, #20]
   14220:	mov	r1, r4
   14224:	bl	2d4d0 <__assert_fail@plt+0x1b824>
   14228:	cmp	r0, #0
   1422c:	mov	r1, #2
   14230:	movweq	r1, #4
   14234:	mov	r0, r1
   14238:	pop	{r4, r5, fp, pc}
   1423c:	movw	r0, #1516	; 0x5ec
   14240:	movw	r1, #64933	; 0xfda5
   14244:	movw	r3, #1532	; 0x5fc
   14248:	movw	r2, #714	; 0x2ca
   1424c:	movt	r0, #3
   14250:	movt	r1, #2
   14254:	movt	r3, #3
   14258:	bl	11cac <__assert_fail@plt>
   1425c:	push	{r4, r5, fp, lr}
   14260:	add	fp, sp, #8
   14264:	mov	r4, r1
   14268:	mov	r5, r0
   1426c:	bl	119ac <__ctype_get_mb_cur_max@plt>
   14270:	cmp	r0, #1
   14274:	bne	14298 <__assert_fail@plt+0x25ec>
   14278:	ldr	r0, [r5, #20]
   1427c:	mov	r1, r4
   14280:	bl	2e310 <__assert_fail@plt+0x1c664>
   14284:	cmp	r0, #0
   14288:	mov	r1, #2
   1428c:	movweq	r1, #4
   14290:	mov	r0, r1
   14294:	pop	{r4, r5, fp, pc}
   14298:	movw	r0, #1516	; 0x5ec
   1429c:	movw	r1, #64933	; 0xfda5
   142a0:	movw	r3, #1605	; 0x645
   142a4:	movw	r2, #690	; 0x2b2
   142a8:	movt	r0, #3
   142ac:	movt	r1, #2
   142b0:	movt	r3, #3
   142b4:	bl	11cac <__assert_fail@plt>
   142b8:	push	{fp, lr}
   142bc:	mov	fp, sp
   142c0:	ldr	r0, [r0, #20]
   142c4:	bl	16028 <__assert_fail@plt+0x437c>
   142c8:	cmp	r0, #0
   142cc:	mov	r1, #2
   142d0:	movweq	r1, #4
   142d4:	mov	r0, r1
   142d8:	pop	{fp, pc}
   142dc:	push	{fp, lr}
   142e0:	mov	fp, sp
   142e4:	ldr	r0, [r0, #20]
   142e8:	bl	16e2c <__assert_fail@plt+0x5180>
   142ec:	cmp	r0, #0
   142f0:	mov	r1, #2
   142f4:	movweq	r1, #4
   142f8:	mov	r0, r1
   142fc:	pop	{fp, pc}
   14300:	push	{fp, lr}
   14304:	mov	fp, sp
   14308:	sub	sp, sp, #104	; 0x68
   1430c:	ldr	r1, [r0, #12]
   14310:	mov	r2, sp
   14314:	mov	r0, #3
   14318:	bl	11c34 <__xstat64@plt>
   1431c:	cmp	r0, #0
   14320:	mov	r1, #4
   14324:	movweq	r1, #1
   14328:	mov	r0, r1
   1432c:	mov	sp, fp
   14330:	pop	{fp, pc}
   14334:	push	{fp, lr}
   14338:	mov	fp, sp
   1433c:	sub	sp, sp, #104	; 0x68
   14340:	ldr	r1, [r0, #12]
   14344:	mov	r2, sp
   14348:	mov	r0, #3
   1434c:	bl	11c94 <__lxstat64@plt>
   14350:	cmp	r0, #0
   14354:	mov	r1, #4
   14358:	movweq	r1, #1
   1435c:	mov	r0, r1
   14360:	mov	sp, fp
   14364:	pop	{fp, pc}
   14368:	push	{fp, lr}
   1436c:	mov	fp, sp
   14370:	sub	sp, sp, #104	; 0x68
   14374:	ldr	r1, [r0, #12]
   14378:	mov	r2, sp
   1437c:	mov	r0, #3
   14380:	bl	11c34 <__xstat64@plt>
   14384:	cmp	r0, #0
   14388:	mov	r1, #1
   1438c:	movweq	r1, #4
   14390:	mov	r0, r1
   14394:	mov	sp, fp
   14398:	pop	{fp, pc}
   1439c:	push	{fp, lr}
   143a0:	mov	fp, sp
   143a4:	sub	sp, sp, #104	; 0x68
   143a8:	ldr	r1, [r0, #12]
   143ac:	mov	r2, sp
   143b0:	mov	r0, #3
   143b4:	bl	11c94 <__lxstat64@plt>
   143b8:	cmp	r0, #0
   143bc:	mov	r1, #1
   143c0:	movweq	r1, #4
   143c4:	mov	r0, r1
   143c8:	mov	sp, fp
   143cc:	pop	{fp, pc}
   143d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143d4:	add	fp, sp, #28
   143d8:	sub	sp, sp, #4
   143dc:	vpush	{d8-d9}
   143e0:	ldr	r4, [r0, #12]
   143e4:	vldr	s17, [pc, #244]	; 144e0 <__assert_fail@plt+0x2834>
   143e8:	vldr	s16, [pc, #244]	; 144e4 <__assert_fail@plt+0x2838>
   143ec:	add	r8, r1, #8
   143f0:	mov	r0, r4
   143f4:	bl	11ac0 <strlen@plt>
   143f8:	vld1.64	{d16-d17}, [r8]
   143fc:	vmov	s18, r0
   14400:	vmov.f32	s19, s17
   14404:	vadd.i64	q8, q8, q4
   14408:	vst1.64	{d16-d17}, [r8]
   1440c:	ldrb	r1, [r4]
   14410:	cmp	r1, #0
   14414:	beq	144d0 <__assert_fail@plt+0x2824>
   14418:	add	r4, r4, #1
   1441c:	mov	r5, #0
   14420:	mov	r9, #1
   14424:	mov	r6, #0
   14428:	mov	sl, #0
   1442c:	b	14444 <__assert_fail@plt+0x2798>
   14430:	ldrb	r1, [r4], #1
   14434:	mov	r5, r0
   14438:	mov	r6, r2
   1443c:	cmp	r1, #0
   14440:	beq	14488 <__assert_fail@plt+0x27dc>
   14444:	sxtb	r0, r1
   14448:	uxtb	r7, r1
   1444c:	mov	r2, #1
   14450:	cmp	r0, #0
   14454:	mov	r0, #1
   14458:	movwmi	sl, #1
   1445c:	cmp	r7, #10
   14460:	beq	14430 <__assert_fail@plt+0x2784>
   14464:	bl	11a84 <__ctype_b_loc@plt>
   14468:	ldr	r0, [r0]
   1446c:	add	r0, r0, r7, lsl #1
   14470:	ldrb	r0, [r0, #1]
   14474:	tst	r0, #32
   14478:	mov	r0, r5
   1447c:	movne	r6, r9
   14480:	mov	r2, r6
   14484:	b	14430 <__assert_fail@plt+0x2784>
   14488:	cmp	sl, #0
   1448c:	beq	144a0 <__assert_fail@plt+0x27f4>
   14490:	ldrd	r4, [r8, #32]
   14494:	adds	r4, r4, #1
   14498:	adc	r5, r5, #0
   1449c:	strd	r4, [r8, #32]
   144a0:	cmp	r2, #0
   144a4:	beq	144b8 <__assert_fail@plt+0x280c>
   144a8:	ldrd	r2, [r8, #16]
   144ac:	adds	r2, r2, #1
   144b0:	adc	r3, r3, #0
   144b4:	strd	r2, [r8, #16]
   144b8:	cmp	r0, #0
   144bc:	beq	144d0 <__assert_fail@plt+0x2824>
   144c0:	ldrd	r0, [r8, #24]
   144c4:	adds	r0, r0, #1
   144c8:	adc	r1, r1, #0
   144cc:	strd	r0, [r8, #24]
   144d0:	mov	r0, #1
   144d4:	vpop	{d8-d9}
   144d8:	add	sp, sp, #4
   144dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144e0:	andeq	r0, r0, r0
   144e4:	andeq	r0, r0, r1
   144e8:	push	{r4, sl, fp, lr}
   144ec:	add	fp, sp, #8
   144f0:	sub	sp, sp, #8
   144f4:	movw	r1, #8773	; 0x2245
   144f8:	movw	r4, #8724	; 0x2214
   144fc:	ldr	r0, [r0, #12]
   14500:	movw	r3, #5748	; 0x1674
   14504:	movt	r1, #4
   14508:	movt	r4, #4
   1450c:	movt	r3, #3
   14510:	ldrb	r2, [r1]
   14514:	movw	r1, #8740	; 0x2224
   14518:	ldr	ip, [r4]
   1451c:	movt	r1, #4
   14520:	str	r0, [sp]
   14524:	ldr	r1, [r1]
   14528:	mov	r0, ip
   1452c:	bl	149cc <__assert_fail@plt+0x2d20>
   14530:	movw	r0, #8768	; 0x2240
   14534:	movt	r0, #4
   14538:	ldrb	r1, [r0]
   1453c:	mov	r0, #10
   14540:	cmp	r1, #0
   14544:	ldr	r1, [r4]
   14548:	movwne	r0, #0
   1454c:	bl	11c04 <putc@plt>
   14550:	mov	r0, #1
   14554:	sub	sp, fp, #8
   14558:	pop	{r4, sl, fp, pc}
   1455c:	push	{r4, sl, fp, lr}
   14560:	add	fp, sp, #8
   14564:	movw	r4, #8724	; 0x2214
   14568:	ldr	r0, [r0, #12]
   1456c:	movt	r4, #4
   14570:	ldr	r1, [r4]
   14574:	bl	11c58 <fputs@plt>
   14578:	movw	r0, #8768	; 0x2240
   1457c:	movt	r0, #4
   14580:	ldrb	r1, [r0]
   14584:	mov	r0, #10
   14588:	cmp	r1, #0
   1458c:	ldr	r1, [r4]
   14590:	movwne	r0, #0
   14594:	bl	11c04 <putc@plt>
   14598:	mov	r0, #1
   1459c:	pop	{r4, sl, fp, pc}
   145a0:	push	{r4, r5, fp, lr}
   145a4:	add	fp, sp, #8
   145a8:	ldr	r0, [r1, #8]
   145ac:	ldr	r2, [r1, #12]
   145b0:	ldr	ip, [r1]
   145b4:	ldr	r3, [r1, #4]
   145b8:	adds	r4, r0, #1
   145bc:	mov	r0, #8
   145c0:	adc	r5, r2, #0
   145c4:	strd	r4, [r1, #8]
   145c8:	subs	r1, r4, ip
   145cc:	sbcs	r1, r5, r3
   145d0:	movwcc	r0, #1
   145d4:	pop	{r4, r5, fp, pc}
   145d8:	ldr	r0, [r1, #8]
   145dc:	ldr	r3, [r1, #12]
   145e0:	adds	r0, r0, #1
   145e4:	str	r0, [r1, #8]
   145e8:	adc	r3, r3, #0
   145ec:	mov	r0, #1
   145f0:	str	r3, [r1, #12]
   145f4:	bx	lr
   145f8:	push	{r4, r5, r6, r7, fp, lr}
   145fc:	add	fp, sp, #16
   14600:	movw	r6, #8832	; 0x2280
   14604:	mov	r4, r0
   14608:	movw	r0, #8824	; 0x2278
   1460c:	movt	r6, #4
   14610:	movt	r0, #4
   14614:	ldr	r7, [r6]
   14618:	ldr	r5, [r0]
   1461c:	cmp	r5, r7
   14620:	beq	14664 <__assert_fail@plt+0x29b8>
   14624:	ldr	r2, [r5]
   14628:	ldr	r1, [r5, #4]
   1462c:	mov	r0, r4
   14630:	blx	r2
   14634:	ldr	r5, [r5, #8]
   14638:	mov	r1, r0
   1463c:	cmp	r5, r7
   14640:	andsne	r0, r1, #3
   14644:	bne	14624 <__assert_fail@plt+0x2978>
   14648:	mov	r0, #4
   1464c:	cmp	r1, #1
   14650:	beq	14694 <__assert_fail@plt+0x29e8>
   14654:	tst	r1, #12
   14658:	mov	r0, r1
   1465c:	popne	{r4, r5, r6, r7, fp, pc}
   14660:	ldr	r5, [r6]
   14664:	cmp	r5, #0
   14668:	beq	14698 <__assert_fail@plt+0x29ec>
   1466c:	ldr	r2, [r5]
   14670:	ldr	r1, [r5, #4]
   14674:	mov	r0, r4
   14678:	blx	r2
   1467c:	ldr	r5, [r5, #8]
   14680:	cmp	r5, #0
   14684:	andsne	r1, r0, #1
   14688:	bne	1466c <__assert_fail@plt+0x29c0>
   1468c:	cmp	r0, #1
   14690:	moveq	r0, #2
   14694:	pop	{r4, r5, r6, r7, fp, pc}
   14698:	mov	r0, #2
   1469c:	pop	{r4, r5, r6, r7, fp, pc}
   146a0:	push	{r4, r5, r6, r7, fp, lr}
   146a4:	add	fp, sp, #16
   146a8:	movw	r5, #8832	; 0x2280
   146ac:	mov	r4, r0
   146b0:	movw	r0, #8824	; 0x2278
   146b4:	movt	r5, #4
   146b8:	movt	r0, #4
   146bc:	ldr	r6, [r5]
   146c0:	ldr	r7, [r0]
   146c4:	cmp	r7, r6
   146c8:	beq	14740 <__assert_fail@plt+0x2a94>
   146cc:	ldr	r2, [r7]
   146d0:	ldr	r1, [r7, #4]
   146d4:	mov	r0, r4
   146d8:	blx	r2
   146dc:	ldr	r7, [r7, #8]
   146e0:	mov	r1, r0
   146e4:	cmp	r7, r6
   146e8:	andsne	r0, r1, #5
   146ec:	bne	146cc <__assert_fail@plt+0x2a20>
   146f0:	mov	r0, #4
   146f4:	cmp	r1, #1
   146f8:	beq	1473c <__assert_fail@plt+0x2a90>
   146fc:	tst	r1, #12
   14700:	mov	r0, r1
   14704:	popne	{r4, r5, r6, r7, fp, pc}
   14708:	ldr	r5, [r5]
   1470c:	cmp	r5, #0
   14710:	beq	14748 <__assert_fail@plt+0x2a9c>
   14714:	ldr	r2, [r5]
   14718:	ldr	r1, [r5, #4]
   1471c:	mov	r0, r4
   14720:	blx	r2
   14724:	ldr	r5, [r5, #8]
   14728:	cmp	r5, #0
   1472c:	andsne	r1, r0, #1
   14730:	bne	14714 <__assert_fail@plt+0x2a68>
   14734:	cmp	r0, #1
   14738:	moveq	r0, #2
   1473c:	pop	{r4, r5, r6, r7, fp, pc}
   14740:	mov	r0, #5
   14744:	pop	{r4, r5, r6, r7, fp, pc}
   14748:	mov	r0, #2
   1474c:	pop	{r4, r5, r6, r7, fp, pc}
   14750:	push	{r4, r5, fp, lr}
   14754:	add	fp, sp, #8
   14758:	mov	r4, r0
   1475c:	movw	r0, #8824	; 0x2278
   14760:	movt	r0, #4
   14764:	ldr	r5, [r0]
   14768:	cmp	r5, #0
   1476c:	beq	14794 <__assert_fail@plt+0x2ae8>
   14770:	ldr	r2, [r5]
   14774:	ldr	r1, [r5, #4]
   14778:	mov	r0, r4
   1477c:	blx	r2
   14780:	ldr	r5, [r5, #8]
   14784:	cmp	r5, #0
   14788:	andsne	r1, r0, #3
   1478c:	bne	14770 <__assert_fail@plt+0x2ac4>
   14790:	pop	{r4, r5, fp, pc}
   14794:	mov	r0, #3
   14798:	pop	{r4, r5, fp, pc}
   1479c:	push	{fp, lr}
   147a0:	mov	fp, sp
   147a4:	movw	r1, #1353	; 0x549
   147a8:	mov	r4, r0
   147ac:	mov	r0, #0
   147b0:	mov	r2, #5
   147b4:	movt	r1, #3
   147b8:	bl	11934 <dcgettext@plt>
   147bc:	ldr	r3, [r4, #28]
   147c0:	mov	r2, r0
   147c4:	mov	r0, #1
   147c8:	mov	r1, #0
   147cc:	bl	119dc <error@plt>
   147d0:	push	{r4, r5, r6, r7, fp, lr}
   147d4:	add	fp, sp, #16
   147d8:	sub	sp, sp, #8
   147dc:	mov	r4, r3
   147e0:	mov	r6, r2
   147e4:	mov	r5, r1
   147e8:	mov	r7, r0
   147ec:	bl	11bec <clearerr@plt>
   147f0:	add	r0, sp, #4
   147f4:	mov	r1, #4
   147f8:	mov	r2, #1
   147fc:	mov	r3, r7
   14800:	bl	119b8 <fread@plt>
   14804:	cmp	r0, #1
   14808:	bne	148a0 <__assert_fail@plt+0x2bf4>
   1480c:	ldr	r1, [r4]
   14810:	ldr	r0, [sp, #4]
   14814:	rev	r7, r0
   14818:	cmp	r1, #2
   1481c:	beq	1487c <__assert_fail@plt+0x2bd0>
   14820:	cmp	r1, #0
   14824:	bne	14880 <__assert_fail@plt+0x2bd4>
   14828:	cmp	r0, r6
   1482c:	ble	14888 <__assert_fail@plt+0x2bdc>
   14830:	cmp	r7, r6
   14834:	bgt	14880 <__assert_fail@plt+0x2bd4>
   14838:	movw	r1, #2789	; 0xae5
   1483c:	mov	r0, #0
   14840:	mov	r2, #5
   14844:	movt	r1, #3
   14848:	bl	11934 <dcgettext@plt>
   1484c:	mov	r6, r0
   14850:	mov	r0, #0
   14854:	mov	r1, #8
   14858:	mov	r2, r5
   1485c:	bl	19160 <__assert_fail@plt+0x74b4>
   14860:	mov	r3, r0
   14864:	mov	r0, #0
   14868:	mov	r1, #0
   1486c:	mov	r2, r6
   14870:	bl	119dc <error@plt>
   14874:	mov	r0, #2
   14878:	str	r0, [r4]
   1487c:	mov	r0, r7
   14880:	sub	sp, fp, #16
   14884:	pop	{r4, r5, r6, r7, fp, pc}
   14888:	cmp	r7, r6
   1488c:	ble	14880 <__assert_fail@plt+0x2bd4>
   14890:	mov	r1, #1
   14894:	str	r1, [r4]
   14898:	sub	sp, fp, #16
   1489c:	pop	{r4, r5, r6, r7, fp, pc}
   148a0:	mov	r0, #0
   148a4:	mov	r1, #8
   148a8:	mov	r2, r5
   148ac:	bl	19160 <__assert_fail@plt+0x74b4>
   148b0:	mov	r4, r0
   148b4:	mov	r0, r7
   148b8:	bl	11a9c <feof@plt>
   148bc:	cmp	r0, #0
   148c0:	bne	148f4 <__assert_fail@plt+0x2c48>
   148c4:	bl	11af0 <__errno_location@plt>
   148c8:	movw	r1, #2760	; 0xac8
   148cc:	ldr	r5, [r0]
   148d0:	mov	r0, #0
   148d4:	mov	r2, #5
   148d8:	movt	r1, #3
   148dc:	bl	11934 <dcgettext@plt>
   148e0:	mov	r2, r0
   148e4:	mov	r0, #1
   148e8:	mov	r1, r5
   148ec:	mov	r3, r4
   148f0:	bl	119dc <error@plt>
   148f4:	movw	r1, #2739	; 0xab3
   148f8:	mov	r0, #0
   148fc:	mov	r2, #5
   14900:	movt	r1, #3
   14904:	bl	11934 <dcgettext@plt>
   14908:	mov	r2, r0
   1490c:	mov	r0, #1
   14910:	mov	r1, #0
   14914:	mov	r3, r4
   14918:	bl	119dc <error@plt>
   1491c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14920:	add	fp, sp, #24
   14924:	sub	sp, sp, #16
   14928:	mov	r8, r0
   1492c:	movw	r0, #8720	; 0x2210
   14930:	movt	r0, #4
   14934:	ldr	r0, [r0]
   14938:	bl	1b48c <__assert_fail@plt+0x97e0>
   1493c:	movw	r0, #8724	; 0x2214
   14940:	movw	r1, #2883	; 0xb43
   14944:	mov	r2, #5
   14948:	mov	r9, #0
   1494c:	movt	r0, #4
   14950:	movt	r1, #3
   14954:	ldr	r6, [r0]
   14958:	movw	r0, #8620	; 0x21ac
   1495c:	movt	r0, #4
   14960:	ldr	r5, [r0]
   14964:	mov	r0, #0
   14968:	bl	11934 <dcgettext@plt>
   1496c:	movw	r1, #2898	; 0xb52
   14970:	mov	r7, r0
   14974:	mov	r0, #0
   14978:	mov	r2, #5
   1497c:	movt	r1, #3
   14980:	bl	11934 <dcgettext@plt>
   14984:	movw	r1, #2913	; 0xb61
   14988:	mov	r4, r0
   1498c:	mov	r0, #0
   14990:	mov	r2, #5
   14994:	movt	r1, #3
   14998:	bl	11934 <dcgettext@plt>
   1499c:	movw	r2, #2869	; 0xb35
   149a0:	str	r0, [sp, #8]
   149a4:	mov	r0, r6
   149a8:	mov	r1, r8
   149ac:	mov	r3, r5
   149b0:	str	r7, [sp]
   149b4:	str	r4, [sp, #4]
   149b8:	str	r9, [sp, #12]
   149bc:	movt	r2, #3
   149c0:	bl	19d68 <__assert_fail@plt+0x80bc>
   149c4:	sub	sp, fp, #24
   149c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   149cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149d0:	add	fp, sp, #28
   149d4:	sub	sp, sp, #12
   149d8:	sub	sp, sp, #8192	; 0x2000
   149dc:	ldr	r7, [fp, #8]
   149e0:	mov	r9, r3
   149e4:	mov	sl, r0
   149e8:	cmp	r2, #0
   149ec:	beq	14a8c <__assert_fail@plt+0x2de0>
   149f0:	add	r4, sp, #8
   149f4:	mov	r8, r1
   149f8:	str	r1, [sp]
   149fc:	mov	r1, #8192	; 0x2000
   14a00:	mov	r2, r7
   14a04:	mvn	r3, #0
   14a08:	mov	r0, r4
   14a0c:	bl	17ca0 <__assert_fail@plt+0x5ff4>
   14a10:	mov	r5, r0
   14a14:	cmp	r0, #8192	; 0x2000
   14a18:	mov	r6, r4
   14a1c:	bcc	14a48 <__assert_fail@plt+0x2d9c>
   14a20:	add	r4, r5, #1
   14a24:	mov	r0, r4
   14a28:	bl	19f80 <__assert_fail@plt+0x82d4>
   14a2c:	mov	r1, r4
   14a30:	mov	r2, r7
   14a34:	mvn	r3, #0
   14a38:	mov	r6, r0
   14a3c:	str	r8, [sp]
   14a40:	add	r4, sp, #8
   14a44:	bl	17ca0 <__assert_fail@plt+0x5ff4>
   14a48:	mov	r0, r6
   14a4c:	mov	r1, r5
   14a50:	bl	14aa4 <__assert_fail@plt+0x2df8>
   14a54:	mov	r1, #0
   14a58:	mov	r2, r6
   14a5c:	strb	r1, [r6, r0]
   14a60:	mov	r0, sl
   14a64:	mov	r1, r9
   14a68:	bl	11ad8 <fprintf@plt>
   14a6c:	mov	r5, r0
   14a70:	cmp	r6, r4
   14a74:	beq	14a80 <__assert_fail@plt+0x2dd4>
   14a78:	mov	r0, r6
   14a7c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   14a80:	mov	r0, r5
   14a84:	sub	sp, fp, #28
   14a88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a8c:	mov	r0, sl
   14a90:	mov	r1, r9
   14a94:	mov	r2, r7
   14a98:	sub	sp, fp, #28
   14a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14aa0:	b	11ad8 <fprintf@plt>
   14aa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14aa8:	add	fp, sp, #28
   14aac:	sub	sp, sp, #28
   14ab0:	mov	r5, r1
   14ab4:	mov	sl, r0
   14ab8:	add	r6, r0, r1
   14abc:	bl	119ac <__ctype_get_mb_cur_max@plt>
   14ac0:	cmp	r0, #2
   14ac4:	bcs	14b00 <__assert_fail@plt+0x2e54>
   14ac8:	cmp	r5, #1
   14acc:	blt	14ea4 <__assert_fail@plt+0x31f8>
   14ad0:	bl	11a84 <__ctype_b_loc@plt>
   14ad4:	mov	r1, #63	; 0x3f
   14ad8:	ldrb	r2, [sl]
   14adc:	ldr	r3, [r0]
   14ae0:	add	r2, r3, r2, lsl #1
   14ae4:	ldrb	r2, [r2, #1]
   14ae8:	tst	r2, #64	; 0x40
   14aec:	strbeq	r1, [sl]
   14af0:	add	sl, sl, #1
   14af4:	cmp	sl, r6
   14af8:	bcc	14ad8 <__assert_fail@plt+0x2e2c>
   14afc:	b	14ea4 <__assert_fail@plt+0x31f8>
   14b00:	cmp	r5, #1
   14b04:	mov	r4, sl
   14b08:	blt	14ea0 <__assert_fail@plt+0x31f4>
   14b0c:	mov	r3, #0
   14b10:	add	r8, sp, #12
   14b14:	add	r9, sp, #16
   14b18:	mov	r4, sl
   14b1c:	mov	r7, sl
   14b20:	ldrb	r0, [r7]
   14b24:	sub	r1, r0, #32
   14b28:	cmp	r1, #94	; 0x5e
   14b2c:	bhi	14cc8 <__assert_fail@plt+0x301c>
   14b30:	add	r2, pc, #0
   14b34:	ldr	pc, [r2, r1, lsl #2]
   14b38:			; <UNDEFINED> instruction: 0x00014cb4
   14b3c:			; <UNDEFINED> instruction: 0x00014cb4
   14b40:			; <UNDEFINED> instruction: 0x00014cb4
   14b44:			; <UNDEFINED> instruction: 0x00014cb4
   14b48:	andeq	r4, r1, r8, asr #25
   14b4c:			; <UNDEFINED> instruction: 0x00014cb4
   14b50:			; <UNDEFINED> instruction: 0x00014cb4
   14b54:			; <UNDEFINED> instruction: 0x00014cb4
   14b58:			; <UNDEFINED> instruction: 0x00014cb4
   14b5c:			; <UNDEFINED> instruction: 0x00014cb4
   14b60:			; <UNDEFINED> instruction: 0x00014cb4
   14b64:			; <UNDEFINED> instruction: 0x00014cb4
   14b68:			; <UNDEFINED> instruction: 0x00014cb4
   14b6c:			; <UNDEFINED> instruction: 0x00014cb4
   14b70:			; <UNDEFINED> instruction: 0x00014cb4
   14b74:			; <UNDEFINED> instruction: 0x00014cb4
   14b78:			; <UNDEFINED> instruction: 0x00014cb4
   14b7c:			; <UNDEFINED> instruction: 0x00014cb4
   14b80:			; <UNDEFINED> instruction: 0x00014cb4
   14b84:			; <UNDEFINED> instruction: 0x00014cb4
   14b88:			; <UNDEFINED> instruction: 0x00014cb4
   14b8c:			; <UNDEFINED> instruction: 0x00014cb4
   14b90:			; <UNDEFINED> instruction: 0x00014cb4
   14b94:			; <UNDEFINED> instruction: 0x00014cb4
   14b98:			; <UNDEFINED> instruction: 0x00014cb4
   14b9c:			; <UNDEFINED> instruction: 0x00014cb4
   14ba0:			; <UNDEFINED> instruction: 0x00014cb4
   14ba4:			; <UNDEFINED> instruction: 0x00014cb4
   14ba8:			; <UNDEFINED> instruction: 0x00014cb4
   14bac:			; <UNDEFINED> instruction: 0x00014cb4
   14bb0:			; <UNDEFINED> instruction: 0x00014cb4
   14bb4:			; <UNDEFINED> instruction: 0x00014cb4
   14bb8:	andeq	r4, r1, r8, asr #25
   14bbc:			; <UNDEFINED> instruction: 0x00014cb4
   14bc0:			; <UNDEFINED> instruction: 0x00014cb4
   14bc4:			; <UNDEFINED> instruction: 0x00014cb4
   14bc8:			; <UNDEFINED> instruction: 0x00014cb4
   14bcc:			; <UNDEFINED> instruction: 0x00014cb4
   14bd0:			; <UNDEFINED> instruction: 0x00014cb4
   14bd4:			; <UNDEFINED> instruction: 0x00014cb4
   14bd8:			; <UNDEFINED> instruction: 0x00014cb4
   14bdc:			; <UNDEFINED> instruction: 0x00014cb4
   14be0:			; <UNDEFINED> instruction: 0x00014cb4
   14be4:			; <UNDEFINED> instruction: 0x00014cb4
   14be8:			; <UNDEFINED> instruction: 0x00014cb4
   14bec:			; <UNDEFINED> instruction: 0x00014cb4
   14bf0:			; <UNDEFINED> instruction: 0x00014cb4
   14bf4:			; <UNDEFINED> instruction: 0x00014cb4
   14bf8:			; <UNDEFINED> instruction: 0x00014cb4
   14bfc:			; <UNDEFINED> instruction: 0x00014cb4
   14c00:			; <UNDEFINED> instruction: 0x00014cb4
   14c04:			; <UNDEFINED> instruction: 0x00014cb4
   14c08:			; <UNDEFINED> instruction: 0x00014cb4
   14c0c:			; <UNDEFINED> instruction: 0x00014cb4
   14c10:			; <UNDEFINED> instruction: 0x00014cb4
   14c14:			; <UNDEFINED> instruction: 0x00014cb4
   14c18:			; <UNDEFINED> instruction: 0x00014cb4
   14c1c:			; <UNDEFINED> instruction: 0x00014cb4
   14c20:			; <UNDEFINED> instruction: 0x00014cb4
   14c24:			; <UNDEFINED> instruction: 0x00014cb4
   14c28:			; <UNDEFINED> instruction: 0x00014cb4
   14c2c:			; <UNDEFINED> instruction: 0x00014cb4
   14c30:			; <UNDEFINED> instruction: 0x00014cb4
   14c34:			; <UNDEFINED> instruction: 0x00014cb4
   14c38:	andeq	r4, r1, r8, asr #25
   14c3c:			; <UNDEFINED> instruction: 0x00014cb4
   14c40:			; <UNDEFINED> instruction: 0x00014cb4
   14c44:			; <UNDEFINED> instruction: 0x00014cb4
   14c48:			; <UNDEFINED> instruction: 0x00014cb4
   14c4c:			; <UNDEFINED> instruction: 0x00014cb4
   14c50:			; <UNDEFINED> instruction: 0x00014cb4
   14c54:			; <UNDEFINED> instruction: 0x00014cb4
   14c58:			; <UNDEFINED> instruction: 0x00014cb4
   14c5c:			; <UNDEFINED> instruction: 0x00014cb4
   14c60:			; <UNDEFINED> instruction: 0x00014cb4
   14c64:			; <UNDEFINED> instruction: 0x00014cb4
   14c68:			; <UNDEFINED> instruction: 0x00014cb4
   14c6c:			; <UNDEFINED> instruction: 0x00014cb4
   14c70:			; <UNDEFINED> instruction: 0x00014cb4
   14c74:			; <UNDEFINED> instruction: 0x00014cb4
   14c78:			; <UNDEFINED> instruction: 0x00014cb4
   14c7c:			; <UNDEFINED> instruction: 0x00014cb4
   14c80:			; <UNDEFINED> instruction: 0x00014cb4
   14c84:			; <UNDEFINED> instruction: 0x00014cb4
   14c88:			; <UNDEFINED> instruction: 0x00014cb4
   14c8c:			; <UNDEFINED> instruction: 0x00014cb4
   14c90:			; <UNDEFINED> instruction: 0x00014cb4
   14c94:			; <UNDEFINED> instruction: 0x00014cb4
   14c98:			; <UNDEFINED> instruction: 0x00014cb4
   14c9c:			; <UNDEFINED> instruction: 0x00014cb4
   14ca0:			; <UNDEFINED> instruction: 0x00014cb4
   14ca4:			; <UNDEFINED> instruction: 0x00014cb4
   14ca8:			; <UNDEFINED> instruction: 0x00014cb4
   14cac:			; <UNDEFINED> instruction: 0x00014cb4
   14cb0:			; <UNDEFINED> instruction: 0x00014cb4
   14cb4:	strb	r0, [r4], #1
   14cb8:	add	r7, r7, #1
   14cbc:	cmp	r7, r6
   14cc0:	bcc	14b20 <__assert_fail@plt+0x2e74>
   14cc4:	b	14ea0 <__assert_fail@plt+0x31f4>
   14cc8:	str	r3, [sp, #20]
   14ccc:	str	r3, [sp, #16]
   14cd0:	str	r6, [sp]
   14cd4:	b	14cf4 <__assert_fail@plt+0x3048>
   14cd8:	mov	r0, #63	; 0x3f
   14cdc:	add	r7, r7, r5
   14ce0:	strb	r0, [r4], #1
   14ce4:	mov	r0, r9
   14ce8:	bl	1191c <mbsinit@plt>
   14cec:	cmp	r0, #0
   14cf0:	bne	14e94 <__assert_fail@plt+0x31e8>
   14cf4:	sub	r2, r6, r7
   14cf8:	mov	r0, r8
   14cfc:	mov	r1, r7
   14d00:	mov	r3, r9
   14d04:	bl	1b5e8 <__assert_fail@plt+0x993c>
   14d08:	cmp	r0, #0
   14d0c:	beq	14d28 <__assert_fail@plt+0x307c>
   14d10:	mov	r5, r0
   14d14:	cmn	r0, #2
   14d18:	beq	14e80 <__assert_fail@plt+0x31d4>
   14d1c:	cmn	r5, #1
   14d20:	bne	14d2c <__assert_fail@plt+0x3080>
   14d24:	b	14e88 <__assert_fail@plt+0x31dc>
   14d28:	mov	r5, #1
   14d2c:	ldr	r0, [sp, #12]
   14d30:	bl	1188c <wcwidth@plt>
   14d34:	cmp	r0, #0
   14d38:	bmi	14cd8 <__assert_fail@plt+0x302c>
   14d3c:	cmp	r5, #16
   14d40:	bcc	14e24 <__assert_fail@plt+0x3178>
   14d44:	add	r0, r7, r5
   14d48:	cmp	r4, r0
   14d4c:	addcc	r0, r4, r5
   14d50:	cmpcc	r7, r0
   14d54:	bcc	14e24 <__assert_fail@plt+0x3178>
   14d58:	bic	r0, r5, #15
   14d5c:	mov	r2, #0
   14d60:	mov	lr, #48	; 0x30
   14d64:	sub	r1, r0, #16
   14d68:	str	r0, [sp, #4]
   14d6c:	mov	r0, #1
   14d70:	add	r3, r0, r1, lsr #4
   14d74:	cmp	r1, #48	; 0x30
   14d78:	and	r0, r3, #3
   14d7c:	str	r0, [sp, #8]
   14d80:	bcc	14ddc <__assert_fail@plt+0x3130>
   14d84:	ldr	r0, [sp, #8]
   14d88:	mov	r2, #0
   14d8c:	sub	r3, r3, r0
   14d90:	add	r1, r7, r2
   14d94:	add	r9, r4, r2
   14d98:	subs	r3, r3, #4
   14d9c:	add	r2, r2, #64	; 0x40
   14da0:	mov	r0, r1
   14da4:	mov	ip, r9
   14da8:	add	r8, r1, #16
   14dac:	add	r6, r9, #16
   14db0:	add	r1, r1, #32
   14db4:	vld1.8	{d16-d17}, [r0], lr
   14db8:	vst1.8	{d16-d17}, [ip], lr
   14dbc:	vld1.8	{d16-d17}, [r8]
   14dc0:	vst1.8	{d16-d17}, [r6]
   14dc4:	vld1.8	{d16-d17}, [r1]
   14dc8:	add	r1, r9, #32
   14dcc:	vst1.8	{d16-d17}, [r1]
   14dd0:	vld1.8	{d16-d17}, [r0]
   14dd4:	vst1.8	{d16-d17}, [ip]
   14dd8:	bne	14d90 <__assert_fail@plt+0x30e4>
   14ddc:	ldr	r0, [sp, #8]
   14de0:	cmp	r0, #0
   14de4:	beq	14e04 <__assert_fail@plt+0x3158>
   14de8:	add	r3, r4, r2
   14dec:	add	r2, r7, r2
   14df0:	rsb	r1, r0, #0
   14df4:	vld1.8	{d16-d17}, [r2]!
   14df8:	adds	r1, r1, #1
   14dfc:	vst1.8	{d16-d17}, [r3]!
   14e00:	bcc	14df4 <__assert_fail@plt+0x3148>
   14e04:	ldr	r0, [sp, #4]
   14e08:	ldr	r6, [sp]
   14e0c:	add	r8, sp, #12
   14e10:	add	r9, sp, #16
   14e14:	add	r7, r7, r0
   14e18:	add	r4, r4, r0
   14e1c:	subs	r5, r5, r0
   14e20:	beq	14ce4 <__assert_fail@plt+0x3038>
   14e24:	ands	r1, r5, #3
   14e28:	sub	r0, r5, #1
   14e2c:	beq	14e44 <__assert_fail@plt+0x3198>
   14e30:	ldrb	r2, [r7], #1
   14e34:	subs	r1, r1, #1
   14e38:	sub	r5, r5, #1
   14e3c:	strb	r2, [r4], #1
   14e40:	bne	14e30 <__assert_fail@plt+0x3184>
   14e44:	cmp	r0, #3
   14e48:	bcc	14ce4 <__assert_fail@plt+0x3038>
   14e4c:	ldrb	r0, [r7]
   14e50:	subs	r5, r5, #4
   14e54:	strb	r0, [r4]
   14e58:	ldrb	r0, [r7, #1]
   14e5c:	strb	r0, [r4, #1]
   14e60:	ldrb	r0, [r7, #2]
   14e64:	strb	r0, [r4, #2]
   14e68:	ldrb	r0, [r7, #3]
   14e6c:	add	r7, r7, #4
   14e70:	strb	r0, [r4, #3]
   14e74:	add	r4, r4, #4
   14e78:	bne	14e4c <__assert_fail@plt+0x31a0>
   14e7c:	b	14ce4 <__assert_fail@plt+0x3038>
   14e80:	mov	r7, r6
   14e84:	b	14e8c <__assert_fail@plt+0x31e0>
   14e88:	add	r7, r7, #1
   14e8c:	mov	r0, #63	; 0x3f
   14e90:	strb	r0, [r4], #1
   14e94:	mov	r3, #0
   14e98:	cmp	r7, r6
   14e9c:	bcc	14b20 <__assert_fail@plt+0x2e74>
   14ea0:	sub	r5, r4, sl
   14ea4:	mov	r0, r5
   14ea8:	sub	sp, fp, #28
   14eac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14eb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14eb4:	add	fp, sp, #28
   14eb8:	sub	sp, sp, #12
   14ebc:	movw	sl, #2928	; 0xb70
   14ec0:	mov	r7, r0
   14ec4:	mov	r4, #0
   14ec8:	mov	r6, #0
   14ecc:	movt	sl, #3
   14ed0:	ldr	r5, [sl, r4]
   14ed4:	mov	r1, r7
   14ed8:	mov	r0, r5
   14edc:	bl	1185c <strcmp@plt>
   14ee0:	cmp	r0, #0
   14ee4:	beq	14fa4 <__assert_fail@plt+0x32f8>
   14ee8:	mov	r0, r5
   14eec:	bl	19730 <__assert_fail@plt+0x7a84>
   14ef0:	bl	11ac0 <strlen@plt>
   14ef4:	add	r0, r6, r0
   14ef8:	add	r4, r4, #12
   14efc:	add	r6, r0, #2
   14f00:	cmp	r4, #156	; 0x9c
   14f04:	bne	14ed0 <__assert_fail@plt+0x3224>
   14f08:	add	r0, r6, #1
   14f0c:	str	r7, [sp, #8]
   14f10:	bl	19f80 <__assert_fail@plt+0x82d4>
   14f14:	mov	r6, r0
   14f18:	mov	r4, #0
   14f1c:	movw	r8, #8236	; 0x202c
   14f20:	mov	r9, #0
   14f24:	str	r0, [sp, #4]
   14f28:	ldr	r0, [sl, -r9]
   14f2c:	cmp	r9, #0
   14f30:	strhne	r8, [r6]
   14f34:	strbne	r4, [r6, #2]!
   14f38:	bl	19730 <__assert_fail@plt+0x7a84>
   14f3c:	mov	r7, r0
   14f40:	bl	11ac0 <strlen@plt>
   14f44:	mov	r5, r0
   14f48:	add	r2, r0, #1
   14f4c:	mov	r0, r6
   14f50:	mov	r1, r7
   14f54:	bl	118ec <memcpy@plt>
   14f58:	sub	r9, r9, #12
   14f5c:	add	r6, r6, r5
   14f60:	cmn	r9, #156	; 0x9c
   14f64:	bne	14f28 <__assert_fail@plt+0x327c>
   14f68:	movw	r1, #3087	; 0xc0f
   14f6c:	mov	r0, #0
   14f70:	mov	r2, #5
   14f74:	movt	r1, #3
   14f78:	bl	11934 <dcgettext@plt>
   14f7c:	mov	r5, r0
   14f80:	ldr	r0, [sp, #8]
   14f84:	bl	19730 <__assert_fail@plt+0x7a84>
   14f88:	mov	r3, r0
   14f8c:	ldr	r0, [sp, #4]
   14f90:	mov	r1, #0
   14f94:	mov	r2, r5
   14f98:	str	r0, [sp]
   14f9c:	mov	r0, #1
   14fa0:	bl	119dc <error@plt>
   14fa4:	add	r0, sl, r4
   14fa8:	ldr	r0, [r0, #8]
   14fac:	sub	sp, fp, #28
   14fb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fb4:	mov	r1, r0
   14fb8:	mov	r0, #0
   14fbc:	cmp	r1, #12
   14fc0:	bxhi	lr
   14fc4:	add	r0, r1, r1, lsl #1
   14fc8:	movw	r1, #2928	; 0xb70
   14fcc:	movt	r1, #3
   14fd0:	ldr	r0, [r1, r0, lsl #2]
   14fd4:	bx	lr
   14fd8:	mov	r1, r0
   14fdc:	mvn	r0, #0
   14fe0:	cmp	r1, #12
   14fe4:	bxhi	lr
   14fe8:	add	r0, r1, r1, lsl #1
   14fec:	movw	r1, #2928	; 0xb70
   14ff0:	movt	r1, #3
   14ff4:	add	r0, r1, r0, lsl #2
   14ff8:	ldr	r0, [r0, #8]
   14ffc:	bx	lr
   15000:	mov	r1, r0
   15004:	mov	r0, #0
   15008:	cmp	r1, #12
   1500c:	bxhi	lr
   15010:	add	r0, r1, r1, lsl #1
   15014:	movw	r1, #2928	; 0xb70
   15018:	movt	r1, #3
   1501c:	add	r0, r1, r0, lsl #2
   15020:	ldr	r0, [r0, #4]
   15024:	bx	lr
   15028:	push	{r4, sl, fp, lr}
   1502c:	add	fp, sp, #8
   15030:	mov	lr, r0
   15034:	mvn	r0, #0
   15038:	cmp	lr, #12
   1503c:	pophi	{r4, sl, fp, pc}
   15040:	cmp	lr, #0
   15044:	beq	15094 <__assert_fail@plt+0x33e8>
   15048:	movw	r3, #2928	; 0xb70
   1504c:	add	r2, lr, lr, lsl #1
   15050:	movt	r3, #3
   15054:	add	r2, r3, r2, lsl #2
   15058:	ldr	ip, [r2, #8]
   1505c:	add	r2, r3, #4
   15060:	mov	r3, #0
   15064:	b	15078 <__assert_fail@plt+0x33cc>
   15068:	add	r3, r3, #1
   1506c:	add	r2, r2, #12
   15070:	cmp	lr, r3
   15074:	beq	15094 <__assert_fail@plt+0x33e8>
   15078:	ldr	r4, [r2]
   1507c:	tst	r4, r1
   15080:	beq	15068 <__assert_fail@plt+0x33bc>
   15084:	ldr	r4, [r2, #4]
   15088:	cmp	ip, r4
   1508c:	bne	15068 <__assert_fail@plt+0x33bc>
   15090:	mov	r0, r3
   15094:	pop	{r4, sl, fp, pc}
   15098:	push	{r4, r5, fp, lr}
   1509c:	add	fp, sp, #8
   150a0:	ldr	r5, [fp, #8]
   150a4:	cmp	r2, #0
   150a8:	beq	150c0 <__assert_fail@plt+0x3414>
   150ac:	mov	r2, #0
   150b0:	str	r2, [r3]
   150b4:	str	r2, [r5]
   150b8:	ldr	r2, [r3]
   150bc:	b	150e4 <__assert_fail@plt+0x3438>
   150c0:	ldr	r2, [r5]
   150c4:	ldr	r4, [r3]
   150c8:	add	r2, r4, r2
   150cc:	str	r2, [r3]
   150d0:	ldrb	r4, [r0, r2]
   150d4:	cmp	r4, #0
   150d8:	beq	15120 <__assert_fail@plt+0x3474>
   150dc:	add	r2, r2, #1
   150e0:	str	r2, [r3]
   150e4:	add	r4, r0, r2
   150e8:	ldrb	r0, [r1]
   150ec:	cmp	r0, #0
   150f0:	beq	1510c <__assert_fail@plt+0x3460>
   150f4:	mov	r0, r4
   150f8:	bl	11c10 <strpbrk@plt>
   150fc:	cmp	r0, #0
   15100:	beq	1510c <__assert_fail@plt+0x3460>
   15104:	sub	r0, r0, r4
   15108:	b	15114 <__assert_fail@plt+0x3468>
   1510c:	mov	r0, r4
   15110:	bl	11ac0 <strlen@plt>
   15114:	str	r0, [r5]
   15118:	mov	r0, #1
   1511c:	pop	{r4, r5, fp, pc}
   15120:	mov	r0, #0
   15124:	pop	{r4, r5, fp, pc}
   15128:	push	{r4, r5, fp, lr}
   1512c:	add	fp, sp, #8
   15130:	sub	sp, sp, #16
   15134:	mov	r4, r1
   15138:	movw	r1, #3248	; 0xcb0
   1513c:	mov	r5, r0
   15140:	mov	r0, #0
   15144:	mov	r2, #5
   15148:	movt	r1, #3
   1514c:	bl	11934 <dcgettext@plt>
   15150:	movw	r2, #3493	; 0xda5
   15154:	movw	r3, #2869	; 0xb35
   15158:	mov	r1, r0
   1515c:	movw	r0, #3540	; 0xdd4
   15160:	movt	r2, #3
   15164:	movt	r0, #3
   15168:	movt	r3, #3
   1516c:	str	r2, [sp, #4]
   15170:	movw	r2, #3454	; 0xd7e
   15174:	str	r3, [sp]
   15178:	str	r0, [sp, #8]
   1517c:	mov	r0, r5
   15180:	mov	r3, r4
   15184:	movt	r2, #3
   15188:	bl	11ad8 <fprintf@plt>
   1518c:	sub	sp, fp, #8
   15190:	pop	{r4, r5, fp, pc}
   15194:	sub	r0, r0, #1
   15198:	ldrb	r3, [r0, #1]!
   1519c:	cmp	r3, #47	; 0x2f
   151a0:	beq	15198 <__assert_fail@plt+0x34ec>
   151a4:	mov	r2, #0
   151a8:	mov	r1, r0
   151ac:	b	151b8 <__assert_fail@plt+0x350c>
   151b0:	ldrb	r3, [r1, #1]!
   151b4:	mov	r2, #1
   151b8:	uxtb	r3, r3
   151bc:	cmp	r3, #47	; 0x2f
   151c0:	beq	151b0 <__assert_fail@plt+0x3504>
   151c4:	cmp	r3, #0
   151c8:	bxeq	lr
   151cc:	tst	r2, #1
   151d0:	mov	r2, #0
   151d4:	movne	r0, r1
   151d8:	ldrb	r3, [r1, #1]!
   151dc:	b	151b8 <__assert_fail@plt+0x350c>
   151e0:	push	{r4, sl, fp, lr}
   151e4:	add	fp, sp, #8
   151e8:	mov	r4, r0
   151ec:	bl	11ac0 <strlen@plt>
   151f0:	mov	r1, r0
   151f4:	sub	r2, r4, #1
   151f8:	mov	r0, r1
   151fc:	cmp	r1, #2
   15200:	bcc	15214 <__assert_fail@plt+0x3568>
   15204:	ldrb	r3, [r2, r0]
   15208:	sub	r1, r0, #1
   1520c:	cmp	r3, #47	; 0x2f
   15210:	beq	151f8 <__assert_fail@plt+0x354c>
   15214:	pop	{r4, sl, fp, pc}
   15218:	movw	r1, #8844	; 0x228c
   1521c:	movt	r1, #4
   15220:	str	r0, [r1]
   15224:	bx	lr
   15228:	movw	r1, #8848	; 0x2290
   1522c:	movt	r1, #4
   15230:	strb	r0, [r1]
   15234:	bx	lr
   15238:	push	{r4, r5, r6, sl, fp, lr}
   1523c:	add	fp, sp, #16
   15240:	sub	sp, sp, #8
   15244:	movw	r0, #8724	; 0x2214
   15248:	movt	r0, #4
   1524c:	ldr	r0, [r0]
   15250:	bl	2f2a0 <__assert_fail@plt+0x1d5f4>
   15254:	cmp	r0, #0
   15258:	beq	15280 <__assert_fail@plt+0x35d4>
   1525c:	movw	r0, #8848	; 0x2290
   15260:	movt	r0, #4
   15264:	ldrb	r0, [r0]
   15268:	cmp	r0, #0
   1526c:	beq	152a0 <__assert_fail@plt+0x35f4>
   15270:	bl	11af0 <__errno_location@plt>
   15274:	ldr	r0, [r0]
   15278:	cmp	r0, #32
   1527c:	bne	152a0 <__assert_fail@plt+0x35f4>
   15280:	movw	r0, #8720	; 0x2210
   15284:	movt	r0, #4
   15288:	ldr	r0, [r0]
   1528c:	bl	2f2a0 <__assert_fail@plt+0x1d5f4>
   15290:	cmp	r0, #0
   15294:	subeq	sp, fp, #16
   15298:	popeq	{r4, r5, r6, sl, fp, pc}
   1529c:	b	15310 <__assert_fail@plt+0x3664>
   152a0:	movw	r1, #3562	; 0xdea
   152a4:	mov	r0, #0
   152a8:	mov	r2, #5
   152ac:	movt	r1, #3
   152b0:	bl	11934 <dcgettext@plt>
   152b4:	mov	r4, r0
   152b8:	movw	r0, #8844	; 0x228c
   152bc:	movt	r0, #4
   152c0:	ldr	r6, [r0]
   152c4:	bl	11af0 <__errno_location@plt>
   152c8:	ldr	r5, [r0]
   152cc:	cmp	r6, #0
   152d0:	bne	152ec <__assert_fail@plt+0x3640>
   152d4:	movw	r2, #5748	; 0x1674
   152d8:	mov	r0, #0
   152dc:	mov	r1, r5
   152e0:	mov	r3, r4
   152e4:	movt	r2, #3
   152e8:	b	1530c <__assert_fail@plt+0x3660>
   152ec:	mov	r0, r6
   152f0:	bl	193a8 <__assert_fail@plt+0x76fc>
   152f4:	movw	r2, #3574	; 0xdf6
   152f8:	mov	r3, r0
   152fc:	str	r4, [sp]
   15300:	mov	r0, #0
   15304:	mov	r1, r5
   15308:	movt	r2, #3
   1530c:	bl	119dc <error@plt>
   15310:	movw	r0, #8624	; 0x21b0
   15314:	movt	r0, #4
   15318:	ldr	r0, [r0]
   1531c:	bl	118e0 <_exit@plt>
   15320:	sub	sp, sp, #8
   15324:	push	{fp, lr}
   15328:	mov	fp, sp
   1532c:	sub	sp, sp, #8
   15330:	str	r2, [fp, #8]
   15334:	str	r3, [fp, #12]
   15338:	tst	r1, #64	; 0x40
   1533c:	mov	r2, #0
   15340:	ldrne	r2, [fp, #8]
   15344:	bl	119f4 <open64@plt>
   15348:	bl	198ac <__assert_fail@plt+0x7c00>
   1534c:	mov	sp, fp
   15350:	pop	{fp, lr}
   15354:	add	sp, sp, #8
   15358:	bx	lr
   1535c:	andeq	r0, r0, r0
   15360:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15364:	add	fp, sp, #28
   15368:	sub	sp, sp, #4
   1536c:	vpush	{d8-d9}
   15370:	sub	sp, sp, #96	; 0x60
   15374:	mov	r7, r3
   15378:	mov	r5, r2
   1537c:	mov	r8, r1
   15380:	mov	sl, r0
   15384:	bl	11be0 <localeconv@plt>
   15388:	ldr	r6, [r0]
   1538c:	mov	r4, r0
   15390:	mov	r0, r6
   15394:	bl	11ac0 <strlen@plt>
   15398:	sub	r1, r0, #1
   1539c:	movw	r2, #65061	; 0xfe25
   153a0:	cmp	r1, #16
   153a4:	movt	r2, #2
   153a8:	movcs	r0, #1
   153ac:	movcc	r2, r6
   153b0:	ldr	r6, [r4, #4]
   153b4:	str	r0, [sp, #40]	; 0x28
   153b8:	ldr	r0, [r4, #8]
   153bc:	str	r2, [sp, #8]
   153c0:	str	r0, [sp, #16]
   153c4:	mov	r0, r6
   153c8:	bl	11ac0 <strlen@plt>
   153cc:	cmp	r0, #17
   153d0:	movw	r0, #647	; 0x287
   153d4:	movw	r1, #2311	; 0x907
   153d8:	str	r5, [sp, #28]
   153dc:	str	r7, [sp, #32]
   153e0:	ldr	r4, [fp, #20]
   153e4:	add	r0, r5, r0
   153e8:	movt	r1, #3
   153ec:	movcc	r1, r6
   153f0:	ldr	r5, [fp, #16]
   153f4:	ldr	r6, [fp, #8]
   153f8:	str	r0, [sp, #24]
   153fc:	ands	r0, r7, #32
   15400:	str	r1, [sp, #12]
   15404:	str	r0, [sp, #20]
   15408:	mov	r0, #1000	; 0x3e8
   1540c:	movwne	r0, #1024	; 0x400
   15410:	str	r0, [sp, #36]	; 0x24
   15414:	and	r0, r7, #3
   15418:	ldr	r7, [fp, #12]
   1541c:	str	r0, [sp, #44]	; 0x2c
   15420:	subs	r0, r6, r5
   15424:	sbcs	r0, r7, r4
   15428:	bcs	15518 <__assert_fail@plt+0x386c>
   1542c:	orrs	r0, r6, r7
   15430:	beq	1566c <__assert_fail@plt+0x39c0>
   15434:	ldr	r9, [fp, #16]
   15438:	ldr	r5, [fp, #20]
   1543c:	mov	r2, r6
   15440:	mov	r3, r7
   15444:	mov	r0, r9
   15448:	mov	r1, r5
   1544c:	bl	2fa44 <__assert_fail@plt+0x1dd98>
   15450:	mov	r4, r0
   15454:	mov	r3, r1
   15458:	umull	r0, r1, r0, r6
   1545c:	mla	r1, r4, r7, r1
   15460:	mla	r1, r3, r6, r1
   15464:	subs	r0, r9, r0
   15468:	sbc	r1, r5, r1
   1546c:	orrs	r0, r0, r1
   15470:	bne	1566c <__assert_fail@plt+0x39c0>
   15474:	mov	r0, sl
   15478:	mov	r1, r8
   1547c:	mov	r2, r4
   15480:	mov	r6, r8
   15484:	mov	r8, r3
   15488:	bl	2fa44 <__assert_fail@plt+0x1dd98>
   1548c:	mov	r5, r0
   15490:	mov	r9, r1
   15494:	umull	r0, r1, r0, r4
   15498:	mov	r2, #10
   1549c:	mov	r3, r8
   154a0:	mla	r1, r5, r8, r1
   154a4:	mla	r1, r9, r4, r1
   154a8:	subs	r0, sl, r0
   154ac:	umull	sl, r0, r0, r2
   154b0:	mov	r2, r4
   154b4:	sbc	r1, r6, r1
   154b8:	add	r1, r1, r1, lsl #2
   154bc:	add	r7, r0, r1, lsl #1
   154c0:	mov	r0, sl
   154c4:	mov	r1, r7
   154c8:	bl	2fa44 <__assert_fail@plt+0x1dd98>
   154cc:	mov	r6, r0
   154d0:	umull	r0, r2, r0, r4
   154d4:	mla	r2, r6, r8, r2
   154d8:	mla	r1, r1, r4, r2
   154dc:	mov	r2, #2
   154e0:	subs	r0, sl, r0
   154e4:	sbc	r1, r7, r1
   154e8:	subs	r3, r4, r0, lsl #1
   154ec:	lsl	r1, r1, #1
   154f0:	orr	r1, r1, r0, lsr #31
   154f4:	orr	r7, r1, r0, lsl #1
   154f8:	sbcs	r3, r8, r1
   154fc:	movwcc	r2, #3
   15500:	cmp	r7, #0
   15504:	movwne	r7, #1
   15508:	rsbs	r0, r4, r0, lsl #1
   1550c:	sbcs	r0, r1, r8
   15510:	movcs	r7, r2
   15514:	b	15584 <__assert_fail@plt+0x38d8>
   15518:	mov	r0, r6
   1551c:	mov	r1, r7
   15520:	mov	r2, r5
   15524:	mov	r3, r4
   15528:	bl	2fa44 <__assert_fail@plt+0x1dd98>
   1552c:	mov	r2, r0
   15530:	mov	r3, r1
   15534:	umull	r0, r1, r0, r5
   15538:	mla	r1, r2, r4, r1
   1553c:	mla	r1, r3, r5, r1
   15540:	subs	r0, r6, r0
   15544:	sbc	r1, r7, r1
   15548:	orrs	r0, r0, r1
   1554c:	bne	1566c <__assert_fail@plt+0x39c0>
   15550:	umull	r5, r0, r2, sl
   15554:	mov	r4, r8
   15558:	mla	r0, r2, r8, r0
   1555c:	mla	r9, r3, sl, r0
   15560:	mov	r0, r5
   15564:	mov	r1, r9
   15568:	bl	2fa44 <__assert_fail@plt+0x1dd98>
   1556c:	eor	r1, r1, r8
   15570:	eor	r0, r0, sl
   15574:	orrs	r0, r0, r1
   15578:	bne	1566c <__assert_fail@plt+0x39c0>
   1557c:	mov	r7, #0
   15580:	mov	r6, #0
   15584:	ldr	r0, [sp, #32]
   15588:	ldr	r1, [sp, #24]
   1558c:	ldr	r2, [sp, #36]	; 0x24
   15590:	ands	r4, r0, #16
   15594:	beq	158d8 <__assert_fail@plt+0x3c2c>
   15598:	subs	r0, r5, r2
   1559c:	mov	r8, #0
   155a0:	sbcs	r0, r9, #0
   155a4:	bcs	155b8 <__assert_fail@plt+0x390c>
   155a8:	ldr	r0, [sp, #24]
   155ac:	mov	sl, r5
   155b0:	str	r0, [sp, #4]
   155b4:	b	15c10 <__assert_fail@plt+0x3f64>
   155b8:	ldr	r2, [sp, #36]	; 0x24
   155bc:	mov	r0, r5
   155c0:	mov	r1, r9
   155c4:	mov	r3, #0
   155c8:	bl	2fa44 <__assert_fail@plt+0x1dd98>
   155cc:	ldr	r2, [sp, #36]	; 0x24
   155d0:	mov	sl, r0
   155d4:	mov	r9, r1
   155d8:	mls	r0, r0, r2, r5
   155dc:	add	r0, r0, r0, lsl #2
   155e0:	add	r0, r6, r0, lsl #1
   155e4:	udiv	r6, r0, r2
   155e8:	mls	r0, r6, r2, r0
   155ec:	lsl	r0, r0, #1
   155f0:	add	r0, r0, r7, lsr #1
   155f4:	cmp	r0, r2
   155f8:	bcs	1560c <__assert_fail@plt+0x3960>
   155fc:	rsb	r1, r7, #0
   15600:	subs	r7, r0, r1
   15604:	movwne	r7, #1
   15608:	b	1561c <__assert_fail@plt+0x3970>
   1560c:	add	r0, r0, r7
   15610:	mov	r7, #2
   15614:	cmp	r2, r0
   15618:	movwcc	r7, #3
   1561c:	mov	r0, r8
   15620:	add	r0, r8, #1
   15624:	mov	r8, r0
   15628:	cmp	r0, #7
   1562c:	bhi	15640 <__assert_fail@plt+0x3994>
   15630:	subs	r0, sl, r2
   15634:	mov	r5, sl
   15638:	sbcs	r0, r9, #0
   1563c:	bcs	155b8 <__assert_fail@plt+0x390c>
   15640:	rsbs	r0, sl, #9
   15644:	rscs	r0, r9, #0
   15648:	bcc	15b70 <__assert_fail@plt+0x3ec4>
   1564c:	ldr	r0, [sp, #44]	; 0x2c
   15650:	cmp	r0, #1
   15654:	bne	15b7c <__assert_fail@plt+0x3ed0>
   15658:	and	r0, r6, #1
   1565c:	add	r0, r7, r0
   15660:	cmp	r0, #2
   15664:	bhi	15b8c <__assert_fail@plt+0x3ee0>
   15668:	b	15bc4 <__assert_fail@plt+0x3f18>
   1566c:	ldr	r9, [fp, #20]
   15670:	ldr	r0, [fp, #16]
   15674:	mov	r1, r9
   15678:	bl	2f9d0 <__assert_fail@plt+0x1dd24>
   1567c:	vmov	d8, r0, r1
   15680:	mov	r0, sl
   15684:	mov	r1, r8
   15688:	bl	2f9d0 <__assert_fail@plt+0x1dd24>
   1568c:	mov	r4, r0
   15690:	mov	r5, r1
   15694:	mov	r0, r6
   15698:	mov	r1, r7
   1569c:	bl	2f9d0 <__assert_fail@plt+0x1dd24>
   156a0:	vmov	d16, r0, r1
   156a4:	vmov	d17, r4, r5
   156a8:	ldr	r7, [sp, #32]
   156ac:	tst	r7, #16
   156b0:	vdiv.f64	d16, d16, d8
   156b4:	vmul.f64	d8, d16, d17
   156b8:	bne	15738 <__assert_fail@plt+0x3a8c>
   156bc:	ldr	r6, [sp, #44]	; 0x2c
   156c0:	cmp	r6, #1
   156c4:	beq	158ec <__assert_fail@plt+0x3c40>
   156c8:	vldr	d16, [pc, #592]	; 15920 <__assert_fail@plt+0x3c74>
   156cc:	ldr	sl, [sp, #28]
   156d0:	ldr	r8, [sp, #24]
   156d4:	vcmpe.f64	d8, d16
   156d8:	vmrs	APSR_nzcv, fpscr
   156dc:	bpl	158f4 <__assert_fail@plt+0x3c48>
   156e0:	vmov	r0, r1, d8
   156e4:	bl	2fa90 <__assert_fail@plt+0x1dde4>
   156e8:	mov	r4, r0
   156ec:	mov	r5, r1
   156f0:	mov	r0, #0
   156f4:	cmp	r6, #0
   156f8:	mov	r2, #0
   156fc:	bne	15724 <__assert_fail@plt+0x3a78>
   15700:	mov	r0, r4
   15704:	mov	r1, r5
   15708:	bl	2f9d0 <__assert_fail@plt+0x1dd24>
   1570c:	vmov	d16, r0, r1
   15710:	mov	r2, #0
   15714:	mov	r0, #0
   15718:	vcmp.f64	d8, d16
   1571c:	vmrs	APSR_nzcv, fpscr
   15720:	movwne	r0, #1
   15724:	adds	r0, r0, r4
   15728:	adc	r1, r2, r5
   1572c:	bl	2f9d0 <__assert_fail@plt+0x1dd24>
   15730:	vmov	d8, r0, r1
   15734:	b	158f4 <__assert_fail@plt+0x3c48>
   15738:	ldr	r0, [sp, #36]	; 0x24
   1573c:	mov	r6, #1
   15740:	vmov	s0, r0
   15744:	vcvt.f64.u32	d16, s0
   15748:	vmul.f64	d17, d16, d16
   1574c:	vcmpe.f64	d17, d8
   15750:	vmrs	APSR_nzcv, fpscr
   15754:	bls	15768 <__assert_fail@plt+0x3abc>
   15758:	ldr	sl, [sp, #40]	; 0x28
   1575c:	ldr	r8, [sp, #24]
   15760:	vmov.f64	d17, d16
   15764:	b	15800 <__assert_fail@plt+0x3b54>
   15768:	vmul.f64	d18, d17, d16
   1576c:	ldr	sl, [sp, #40]	; 0x28
   15770:	ldr	r8, [sp, #24]
   15774:	mov	r6, #2
   15778:	vcmpe.f64	d18, d8
   1577c:	vmrs	APSR_nzcv, fpscr
   15780:	bhi	15800 <__assert_fail@plt+0x3b54>
   15784:	vmul.f64	d19, d18, d16
   15788:	vmov.f64	d17, d18
   1578c:	mov	r6, #3
   15790:	vcmpe.f64	d19, d8
   15794:	vmrs	APSR_nzcv, fpscr
   15798:	bhi	15800 <__assert_fail@plt+0x3b54>
   1579c:	vmul.f64	d18, d19, d16
   157a0:	vmov.f64	d17, d19
   157a4:	mov	r6, #4
   157a8:	vcmpe.f64	d18, d8
   157ac:	vmrs	APSR_nzcv, fpscr
   157b0:	bhi	15800 <__assert_fail@plt+0x3b54>
   157b4:	vmul.f64	d19, d18, d16
   157b8:	vmov.f64	d17, d18
   157bc:	mov	r6, #5
   157c0:	vcmpe.f64	d19, d8
   157c4:	vmrs	APSR_nzcv, fpscr
   157c8:	bhi	15800 <__assert_fail@plt+0x3b54>
   157cc:	vmul.f64	d18, d19, d16
   157d0:	vmov.f64	d17, d19
   157d4:	mov	r6, #6
   157d8:	vcmpe.f64	d18, d8
   157dc:	vmrs	APSR_nzcv, fpscr
   157e0:	bhi	15800 <__assert_fail@plt+0x3b54>
   157e4:	vmul.f64	d16, d18, d16
   157e8:	mov	r6, #7
   157ec:	vmov.f64	d17, d18
   157f0:	vcmpe.f64	d16, d8
   157f4:	vmrs	APSR_nzcv, fpscr
   157f8:	movls	r6, #8
   157fc:	vmovls.f64	d17, d16
   15800:	vdiv.f64	d8, d8, d17
   15804:	ldr	r0, [sp, #44]	; 0x2c
   15808:	cmp	r0, #1
   1580c:	vmov.f64	d16, d8
   15810:	beq	15880 <__assert_fail@plt+0x3bd4>
   15814:	vldr	d16, [pc, #260]	; 15920 <__assert_fail@plt+0x3c74>
   15818:	vcmpe.f64	d8, d16
   1581c:	vmov.f64	d16, d8
   15820:	vmrs	APSR_nzcv, fpscr
   15824:	bpl	15880 <__assert_fail@plt+0x3bd4>
   15828:	vmov	r0, r1, d8
   1582c:	bl	2fa90 <__assert_fail@plt+0x1dde4>
   15830:	mov	r5, r1
   15834:	ldr	r1, [sp, #44]	; 0x2c
   15838:	mov	r4, r0
   1583c:	mov	r0, #0
   15840:	mov	r2, #0
   15844:	cmp	r1, #0
   15848:	bne	15870 <__assert_fail@plt+0x3bc4>
   1584c:	mov	r0, r4
   15850:	mov	r1, r5
   15854:	bl	2f9d0 <__assert_fail@plt+0x1dd24>
   15858:	vmov	d16, r0, r1
   1585c:	mov	r2, #0
   15860:	mov	r0, #0
   15864:	vcmp.f64	d8, d16
   15868:	vmrs	APSR_nzcv, fpscr
   1586c:	movwne	r0, #1
   15870:	adds	r0, r0, r4
   15874:	adc	r1, r2, r5
   15878:	bl	2f9d0 <__assert_fail@plt+0x1dd24>
   1587c:	vmov	d16, r0, r1
   15880:	ldr	r5, [sp, #28]
   15884:	vmov	r2, r3, d16
   15888:	movw	r1, #3587	; 0xe03
   1588c:	movt	r1, #3
   15890:	mov	r0, r5
   15894:	bl	11bf8 <sprintf@plt>
   15898:	ldr	r1, [sp, #20]
   1589c:	mov	r0, #3
   158a0:	cmp	r1, #0
   158a4:	movwne	r0, #2
   158a8:	add	r4, r0, sl
   158ac:	mov	r0, r5
   158b0:	bl	11ac0 <strlen@plt>
   158b4:	cmp	r4, r0
   158b8:	bcc	1593c <__assert_fail@plt+0x3c90>
   158bc:	ldr	r7, [sp, #32]
   158c0:	mov	r2, r0
   158c4:	add	r5, sl, #1
   158c8:	tst	r7, #8
   158cc:	bne	15928 <__assert_fail@plt+0x3c7c>
   158d0:	ldr	sl, [sp, #28]
   158d4:	b	159e4 <__assert_fail@plt+0x3d38>
   158d8:	mov	r0, r1
   158dc:	mvn	r8, #0
   158e0:	str	r1, [sp, #4]
   158e4:	mov	sl, r5
   158e8:	b	15c10 <__assert_fail@plt+0x3f64>
   158ec:	ldr	sl, [sp, #28]
   158f0:	ldr	r8, [sp, #24]
   158f4:	vmov	r2, r3, d8
   158f8:	movw	r1, #3581	; 0xdfd
   158fc:	mov	r0, sl
   15900:	movt	r1, #3
   15904:	bl	11bf8 <sprintf@plt>
   15908:	mov	r0, sl
   1590c:	bl	11ac0 <strlen@plt>
   15910:	mov	r2, r0
   15914:	mov	r5, #0
   15918:	mvn	r6, #0
   1591c:	b	159e4 <__assert_fail@plt+0x3d38>
   15920:	andeq	r0, r0, r0
   15924:	mvnsmi	r0, #0
   15928:	ldr	r0, [sp, #28]
   1592c:	add	r0, r2, r0
   15930:	ldrb	r0, [r0, #-1]
   15934:	cmp	r0, #48	; 0x30
   15938:	bne	15b64 <__assert_fail@plt+0x3eb8>
   1593c:	vmov.f64	d9, #36	; 0x41200000  10.0
   15940:	ldr	r4, [sp, #44]	; 0x2c
   15944:	vmul.f64	d8, d8, d9
   15948:	cmp	r4, #1
   1594c:	beq	159b4 <__assert_fail@plt+0x3d08>
   15950:	vldr	d16, [pc, #-56]	; 15920 <__assert_fail@plt+0x3c74>
   15954:	vcmpe.f64	d8, d16
   15958:	vmrs	APSR_nzcv, fpscr
   1595c:	bpl	159b4 <__assert_fail@plt+0x3d08>
   15960:	vmov	r0, r1, d8
   15964:	bl	2fa90 <__assert_fail@plt+0x1dde4>
   15968:	mov	sl, r0
   1596c:	mov	r5, r1
   15970:	mov	r0, #0
   15974:	cmp	r4, #0
   15978:	mov	r2, #0
   1597c:	bne	159a4 <__assert_fail@plt+0x3cf8>
   15980:	mov	r0, sl
   15984:	mov	r1, r5
   15988:	bl	2f9d0 <__assert_fail@plt+0x1dd24>
   1598c:	vmov	d16, r0, r1
   15990:	mov	r2, #0
   15994:	mov	r0, #0
   15998:	vcmp.f64	d8, d16
   1599c:	vmrs	APSR_nzcv, fpscr
   159a0:	movwne	r0, #1
   159a4:	adds	r0, r0, sl
   159a8:	adc	r1, r2, r5
   159ac:	bl	2f9d0 <__assert_fail@plt+0x1dd24>
   159b0:	vmov	d8, r0, r1
   159b4:	vdiv.f64	d16, d8, d9
   159b8:	ldr	sl, [sp, #28]
   159bc:	movw	r1, #3581	; 0xdfd
   159c0:	ldr	r7, [sp, #32]
   159c4:	movt	r1, #3
   159c8:	mov	r0, sl
   159cc:	vmov	r2, r3, d16
   159d0:	bl	11bf8 <sprintf@plt>
   159d4:	mov	r0, sl
   159d8:	bl	11ac0 <strlen@plt>
   159dc:	mov	r2, r0
   159e0:	mov	r5, #0
   159e4:	sub	r4, r8, r2
   159e8:	mov	r1, sl
   159ec:	mov	r0, r4
   159f0:	bl	118a4 <memmove@plt>
   159f4:	sub	r5, r8, r5
   159f8:	tst	r7, #4
   159fc:	bne	15d1c <__assert_fail@plt+0x4070>
   15a00:	tst	r7, #128	; 0x80
   15a04:	beq	15e34 <__assert_fail@plt+0x4188>
   15a08:	cmn	r6, #1
   15a0c:	bgt	15af8 <__assert_fail@plt+0x3e4c>
   15a10:	ldr	r0, [fp, #16]
   15a14:	mov	r6, #0
   15a18:	subs	r0, r0, #2
   15a1c:	sbcs	r0, r9, #0
   15a20:	bcc	15af8 <__assert_fail@plt+0x3e4c>
   15a24:	ldr	r0, [sp, #36]	; 0x24
   15a28:	ldr	r1, [fp, #16]
   15a2c:	mov	r6, #1
   15a30:	subs	r0, r0, r1
   15a34:	rscs	r0, r9, #0
   15a38:	bcs	15af8 <__assert_fail@plt+0x3e4c>
   15a3c:	ldr	r0, [sp, #36]	; 0x24
   15a40:	ldr	r2, [fp, #16]
   15a44:	mov	r6, #2
   15a48:	umull	r1, r0, r0, r0
   15a4c:	subs	r2, r1, r2
   15a50:	sbcs	r2, r0, r9
   15a54:	bcs	15af8 <__assert_fail@plt+0x3e4c>
   15a58:	ldr	r3, [sp, #36]	; 0x24
   15a5c:	mov	r6, #3
   15a60:	umull	r1, r2, r1, r3
   15a64:	mla	r2, r0, r3, r2
   15a68:	ldr	r0, [fp, #16]
   15a6c:	subs	r0, r1, r0
   15a70:	sbcs	r0, r2, r9
   15a74:	bcs	15af8 <__assert_fail@plt+0x3e4c>
   15a78:	ldr	r3, [sp, #36]	; 0x24
   15a7c:	mov	r6, #4
   15a80:	umull	r0, r1, r1, r3
   15a84:	mla	r1, r2, r3, r1
   15a88:	ldr	r2, [fp, #16]
   15a8c:	subs	r2, r0, r2
   15a90:	sbcs	r2, r1, r9
   15a94:	bcs	15af8 <__assert_fail@plt+0x3e4c>
   15a98:	ldr	r3, [sp, #36]	; 0x24
   15a9c:	mov	r6, #5
   15aa0:	umull	r0, r2, r0, r3
   15aa4:	mla	r1, r1, r3, r2
   15aa8:	ldr	r2, [fp, #16]
   15aac:	subs	r2, r0, r2
   15ab0:	sbcs	r2, r1, r9
   15ab4:	bcs	15af8 <__assert_fail@plt+0x3e4c>
   15ab8:	ldr	r3, [sp, #36]	; 0x24
   15abc:	mov	r6, #6
   15ac0:	umull	r0, r2, r0, r3
   15ac4:	mla	r1, r1, r3, r2
   15ac8:	ldr	r2, [fp, #16]
   15acc:	subs	r2, r0, r2
   15ad0:	sbcs	r2, r1, r9
   15ad4:	bcs	15af8 <__assert_fail@plt+0x3e4c>
   15ad8:	ldr	r3, [sp, #36]	; 0x24
   15adc:	mov	r6, #7
   15ae0:	umull	r0, r2, r0, r3
   15ae4:	mla	r1, r1, r3, r2
   15ae8:	ldr	r2, [fp, #16]
   15aec:	subs	r0, r0, r2
   15af0:	sbcs	r0, r1, r9
   15af4:	movwcc	r6, #8
   15af8:	and	r0, r7, #256	; 0x100
   15afc:	tst	r7, #64	; 0x40
   15b00:	orrsne	r1, r6, r0
   15b04:	movne	r1, #32
   15b08:	addne	r8, sl, #648	; 0x288
   15b0c:	strbne	r1, [sl, #647]	; 0x287
   15b10:	cmp	r6, #0
   15b14:	beq	15b3c <__assert_fail@plt+0x3e90>
   15b18:	ldr	r1, [sp, #20]
   15b1c:	cmp	r1, #0
   15b20:	moveq	r1, #107	; 0x6b
   15b24:	cmpeq	r6, #1
   15b28:	beq	15b38 <__assert_fail@plt+0x3e8c>
   15b2c:	movw	r1, #3668	; 0xe54
   15b30:	movt	r1, #3
   15b34:	ldrb	r1, [r1, r6]
   15b38:	strb	r1, [r8], #1
   15b3c:	cmp	r0, #0
   15b40:	beq	15e34 <__assert_fail@plt+0x4188>
   15b44:	ldr	r0, [sp, #20]
   15b48:	cmp	r0, #0
   15b4c:	cmpne	r6, #0
   15b50:	movne	r0, #105	; 0x69
   15b54:	strbne	r0, [r8], #1
   15b58:	mov	r0, #66	; 0x42
   15b5c:	strb	r0, [r8], #1
   15b60:	b	15e34 <__assert_fail@plt+0x4188>
   15b64:	ldr	sl, [sp, #28]
   15b68:	ldr	r7, [sp, #32]
   15b6c:	b	159e4 <__assert_fail@plt+0x3d38>
   15b70:	ldr	r0, [sp, #24]
   15b74:	str	r0, [sp, #4]
   15b78:	b	15c10 <__assert_fail@plt+0x3f64>
   15b7c:	cmp	r0, #0
   15b80:	bne	15bc4 <__assert_fail@plt+0x3f18>
   15b84:	cmp	r7, #0
   15b88:	beq	15bc4 <__assert_fail@plt+0x3f18>
   15b8c:	adds	r0, sl, #1
   15b90:	add	r6, r6, #1
   15b94:	mov	r7, #0
   15b98:	adc	r1, r9, #0
   15b9c:	cmp	r6, #10
   15ba0:	bne	15bc4 <__assert_fail@plt+0x3f18>
   15ba4:	rsbs	r2, r0, #9
   15ba8:	mov	r6, #0
   15bac:	mov	sl, r0
   15bb0:	mov	r9, r1
   15bb4:	mov	r7, #0
   15bb8:	rscs	r2, r1, #0
   15bbc:	ldr	r2, [sp, #36]	; 0x24
   15bc0:	bcc	15e50 <__assert_fail@plt+0x41a4>
   15bc4:	ldr	r0, [sp, #32]
   15bc8:	tst	r0, #8
   15bcc:	beq	15be4 <__assert_fail@plt+0x3f38>
   15bd0:	cmp	r6, #0
   15bd4:	bne	15be4 <__assert_fail@plt+0x3f38>
   15bd8:	ldr	r0, [sp, #24]
   15bdc:	str	r0, [sp, #4]
   15be0:	b	15c0c <__assert_fail@plt+0x3f60>
   15be4:	ldr	r1, [sp, #28]
   15be8:	ldr	r2, [sp, #40]	; 0x28
   15bec:	add	r0, r6, #48	; 0x30
   15bf0:	strb	r0, [r1, #646]!	; 0x286
   15bf4:	sub	r0, r1, r2
   15bf8:	ldr	r1, [sp, #8]
   15bfc:	str	r0, [sp, #4]
   15c00:	bl	118ec <memcpy@plt>
   15c04:	ldr	r2, [sp, #36]	; 0x24
   15c08:	mov	r7, #0
   15c0c:	mov	r6, #0
   15c10:	ldr	r0, [sp, #44]	; 0x2c
   15c14:	cmp	r0, #0
   15c18:	beq	15c58 <__assert_fail@plt+0x3fac>
   15c1c:	cmp	r0, #1
   15c20:	bne	15c4c <__assert_fail@plt+0x3fa0>
   15c24:	mov	r0, #0
   15c28:	rsbs	r1, r7, #0
   15c2c:	and	r2, sl, #1
   15c30:	eor	r1, r2, r1
   15c34:	sbc	r0, r0, #0
   15c38:	ldr	r2, [sp, #36]	; 0x24
   15c3c:	orrs	r0, r1, r0
   15c40:	addne	r6, r6, #1
   15c44:	cmp	r6, #5
   15c48:	bgt	15c64 <__assert_fail@plt+0x3fb8>
   15c4c:	ldr	r7, [sp, #28]
   15c50:	ldr	r5, [sp, #32]
   15c54:	b	15cc0 <__assert_fail@plt+0x4014>
   15c58:	add	r0, r6, r7
   15c5c:	cmp	r0, #1
   15c60:	blt	15c4c <__assert_fail@plt+0x3fa0>
   15c64:	ldr	r7, [sp, #28]
   15c68:	ldr	r5, [sp, #32]
   15c6c:	adds	sl, sl, #1
   15c70:	adc	r9, r9, #0
   15c74:	cmp	r8, #7
   15c78:	bgt	15cc0 <__assert_fail@plt+0x4014>
   15c7c:	cmp	r4, #0
   15c80:	beq	15cc0 <__assert_fail@plt+0x4014>
   15c84:	eor	r0, sl, r2
   15c88:	orrs	r0, r0, r9
   15c8c:	addeq	r8, r8, #1
   15c90:	moveq	r9, #0
   15c94:	moveq	sl, #1
   15c98:	tsteq	r5, #8
   15c9c:	bne	15cc0 <__assert_fail@plt+0x4014>
   15ca0:	ldr	r0, [sp, #4]
   15ca4:	mov	r1, #48	; 0x30
   15ca8:	ldr	r2, [sp, #40]	; 0x28
   15cac:	strb	r1, [r0, #-1]!
   15cb0:	ldr	r1, [sp, #8]
   15cb4:	sub	r0, r0, r2
   15cb8:	str	r0, [sp, #4]
   15cbc:	bl	118ec <memcpy@plt>
   15cc0:	ldr	r4, [sp, #4]
   15cc4:	mov	r0, sl
   15cc8:	mov	r1, r9
   15ccc:	mov	r2, #10
   15cd0:	mov	r3, #0
   15cd4:	bl	2fa44 <__assert_fail@plt+0x1dd98>
   15cd8:	add	r2, r0, r0, lsl #2
   15cdc:	sub	r2, sl, r2, lsl #1
   15ce0:	orr	r2, r2, #48	; 0x30
   15ce4:	strb	r2, [r4, #-1]!
   15ce8:	rsbs	r2, sl, #9
   15cec:	mov	sl, r0
   15cf0:	rscs	r2, r9, #0
   15cf4:	mov	r9, r1
   15cf8:	bcc	15cc4 <__assert_fail@plt+0x4018>
   15cfc:	mov	r6, r8
   15d00:	mov	sl, r7
   15d04:	mov	r7, r5
   15d08:	ldr	r9, [fp, #20]
   15d0c:	ldr	r8, [sp, #24]
   15d10:	ldr	r5, [sp, #4]
   15d14:	tst	r7, #4
   15d18:	beq	15a00 <__assert_fail@plt+0x3d54>
   15d1c:	ldr	r9, [sp, #12]
   15d20:	str	r6, [sp, #8]
   15d24:	sub	r7, r5, r4
   15d28:	mov	r0, r9
   15d2c:	bl	11ac0 <strlen@plt>
   15d30:	str	r0, [sp, #44]	; 0x2c
   15d34:	add	r0, sp, #48	; 0x30
   15d38:	mov	r1, r4
   15d3c:	mov	r2, r7
   15d40:	bl	118ec <memcpy@plt>
   15d44:	ldr	r6, [sp, #16]
   15d48:	add	r0, sp, #48	; 0x30
   15d4c:	ldrb	r8, [r6]
   15d50:	cmp	r8, #255	; 0xff
   15d54:	mov	sl, r8
   15d58:	moveq	sl, r7
   15d5c:	cmp	r8, #0
   15d60:	mvneq	sl, #0
   15d64:	cmp	sl, r7
   15d68:	movhi	sl, r7
   15d6c:	sub	r4, r5, sl
   15d70:	sub	r5, r7, sl
   15d74:	mov	r2, sl
   15d78:	add	r1, r0, r5
   15d7c:	mov	r0, r4
   15d80:	bl	118ec <memcpy@plt>
   15d84:	cmp	r5, #0
   15d88:	beq	15e18 <__assert_fail@plt+0x416c>
   15d8c:	clz	r0, r8
   15d90:	lsr	r8, r0, #5
   15d94:	ldr	r0, [sp, #44]	; 0x2c
   15d98:	rsb	r0, r0, #0
   15d9c:	str	r0, [sp, #40]	; 0x28
   15da0:	ldr	r0, [sp, #40]	; 0x28
   15da4:	ldr	r2, [sp, #44]	; 0x2c
   15da8:	mov	r1, r9
   15dac:	add	r4, r4, r0
   15db0:	mov	r0, r4
   15db4:	bl	118ec <memcpy@plt>
   15db8:	tst	r8, #1
   15dbc:	add	r0, sp, #48	; 0x30
   15dc0:	addeq	r6, r6, #1
   15dc4:	mov	r8, r6
   15dc8:	ldrb	r6, [r6]
   15dcc:	cmp	r6, #255	; 0xff
   15dd0:	mov	r7, r6
   15dd4:	moveq	r7, r5
   15dd8:	cmp	r6, #0
   15ddc:	moveq	r7, sl
   15de0:	cmp	r5, r7
   15de4:	movcc	r7, r5
   15de8:	sub	r5, r5, r7
   15dec:	sub	r4, r4, r7
   15df0:	mov	r2, r7
   15df4:	add	r1, r0, r5
   15df8:	mov	r0, r4
   15dfc:	bl	118ec <memcpy@plt>
   15e00:	clz	r0, r6
   15e04:	mov	r6, r8
   15e08:	cmp	r5, #0
   15e0c:	mov	sl, r7
   15e10:	lsr	r8, r0, #5
   15e14:	bne	15da0 <__assert_fail@plt+0x40f4>
   15e18:	ldr	r8, [sp, #24]
   15e1c:	ldr	sl, [sp, #28]
   15e20:	ldr	r7, [sp, #32]
   15e24:	ldr	r9, [fp, #20]
   15e28:	ldr	r6, [sp, #8]
   15e2c:	tst	r7, #128	; 0x80
   15e30:	bne	15a08 <__assert_fail@plt+0x3d5c>
   15e34:	mov	r0, #0
   15e38:	strb	r0, [r8]
   15e3c:	mov	r0, r4
   15e40:	sub	sp, fp, #48	; 0x30
   15e44:	vpop	{d8-d9}
   15e48:	add	sp, sp, #4
   15e4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e50:	ldr	r0, [sp, #24]
   15e54:	mov	r7, #0
   15e58:	mov	sl, #10
   15e5c:	mov	r9, #0
   15e60:	str	r0, [sp, #4]
   15e64:	b	15c10 <__assert_fail@plt+0x3f64>
   15e68:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15e6c:	add	fp, sp, #24
   15e70:	sub	sp, sp, #8
   15e74:	mov	r4, r2
   15e78:	mov	r8, r1
   15e7c:	cmp	r0, #0
   15e80:	bne	15eac <__assert_fail@plt+0x4200>
   15e84:	movw	r0, #3593	; 0xe09
   15e88:	movt	r0, #3
   15e8c:	bl	11a00 <getenv@plt>
   15e90:	cmp	r0, #0
   15e94:	bne	15eac <__assert_fail@plt+0x4200>
   15e98:	movw	r0, #3604	; 0xe14
   15e9c:	movt	r0, #3
   15ea0:	bl	11a00 <getenv@plt>
   15ea4:	cmp	r0, #0
   15ea8:	beq	15fd0 <__assert_fail@plt+0x4324>
   15eac:	mov	r6, r0
   15eb0:	movw	r7, #3692	; 0xe6c
   15eb4:	movw	r1, #3680	; 0xe60
   15eb8:	mov	r3, #4
   15ebc:	ldrb	r5, [r6], #1
   15ec0:	movt	r7, #3
   15ec4:	movt	r1, #3
   15ec8:	mov	r2, r7
   15ecc:	cmp	r5, #39	; 0x27
   15ed0:	movne	r6, r0
   15ed4:	mov	r0, r6
   15ed8:	bl	2edf8 <__assert_fail@plt+0x1d14c>
   15edc:	sub	r1, r5, #39	; 0x27
   15ee0:	cmp	r0, #0
   15ee4:	clz	r1, r1
   15ee8:	lsr	r1, r1, #5
   15eec:	lsl	r5, r1, #2
   15ef0:	bmi	15f18 <__assert_fail@plt+0x426c>
   15ef4:	ldr	r0, [r7, r0, lsl #2]
   15ef8:	mov	r2, #1
   15efc:	mov	r1, #0
   15f00:	str	r2, [r4]
   15f04:	str	r1, [r4, #4]
   15f08:	orr	r1, r0, r5
   15f0c:	mov	r0, #0
   15f10:	str	r1, [r8]
   15f14:	b	15f48 <__assert_fail@plt+0x429c>
   15f18:	movw	r0, #3614	; 0xe1e
   15f1c:	add	r1, sp, #4
   15f20:	mov	r2, #0
   15f24:	mov	r3, r4
   15f28:	mov	r7, #0
   15f2c:	movt	r0, #3
   15f30:	str	r0, [sp]
   15f34:	mov	r0, r6
   15f38:	bl	1a5c4 <__assert_fail@plt+0x8918>
   15f3c:	cmp	r0, #0
   15f40:	beq	15f8c <__assert_fail@plt+0x42e0>
   15f44:	str	r7, [r8]
   15f48:	ldrd	r2, [r4]
   15f4c:	orrs	r1, r2, r3
   15f50:	beq	15f5c <__assert_fail@plt+0x42b0>
   15f54:	sub	sp, fp, #24
   15f58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15f5c:	movw	r0, #3650	; 0xe42
   15f60:	movt	r0, #3
   15f64:	bl	11a00 <getenv@plt>
   15f68:	cmp	r0, #0
   15f6c:	mov	r2, #512	; 0x200
   15f70:	mov	r0, #4
   15f74:	mov	r1, #0
   15f78:	movweq	r2, #1024	; 0x400
   15f7c:	str	r2, [r4]
   15f80:	str	r1, [r4, #4]
   15f84:	sub	sp, fp, #24
   15f88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15f8c:	ldrb	r0, [r6]
   15f90:	sub	r0, r0, #48	; 0x30
   15f94:	uxtb	r0, r0
   15f98:	cmp	r0, #10
   15f9c:	bcc	15fc8 <__assert_fail@plt+0x431c>
   15fa0:	ldr	r0, [sp, #4]
   15fa4:	cmp	r0, r6
   15fa8:	beq	15ff8 <__assert_fail@plt+0x434c>
   15fac:	ldrb	r2, [r6, #1]
   15fb0:	add	r1, r6, #1
   15fb4:	mov	r6, r1
   15fb8:	sub	r2, r2, #48	; 0x30
   15fbc:	uxtb	r2, r2
   15fc0:	cmp	r2, #10
   15fc4:	bcs	15fa4 <__assert_fail@plt+0x42f8>
   15fc8:	mov	r1, r5
   15fcc:	b	15f0c <__assert_fail@plt+0x4260>
   15fd0:	movw	r0, #3650	; 0xe42
   15fd4:	movt	r0, #3
   15fd8:	bl	11a00 <getenv@plt>
   15fdc:	cmp	r0, #0
   15fe0:	mov	r2, #512	; 0x200
   15fe4:	mov	r1, #0
   15fe8:	movweq	r2, #1024	; 0x400
   15fec:	str	r2, [r4]
   15ff0:	str	r1, [r4, #4]
   15ff4:	b	15f0c <__assert_fail@plt+0x4260>
   15ff8:	ldrb	r2, [r0, #-1]
   15ffc:	orr	r1, r5, #384	; 0x180
   16000:	cmp	r2, #66	; 0x42
   16004:	mov	r2, r1
   16008:	orrne	r2, r5, #128	; 0x80
   1600c:	bne	16020 <__assert_fail@plt+0x4374>
   16010:	ldrb	r0, [r0, #-2]
   16014:	cmp	r0, #105	; 0x69
   16018:	orreq	r1, r2, #32
   1601c:	b	15f0c <__assert_fail@plt+0x4260>
   16020:	orr	r1, r2, #32
   16024:	b	15f0c <__assert_fail@plt+0x4260>
   16028:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1602c:	add	fp, sp, #28
   16030:	sub	sp, sp, #396	; 0x18c
   16034:	mov	sl, r1
   16038:	str	r0, [sp, #28]
   1603c:	bl	119ac <__ctype_get_mb_cur_max@plt>
   16040:	cmp	r0, #2
   16044:	str	sl, [sp, #24]
   16048:	bcc	160b4 <__assert_fail@plt+0x4408>
   1604c:	sub	r6, fp, #88	; 0x58
   16050:	mov	r7, #0
   16054:	mov	r0, r6
   16058:	str	r7, [fp, #-80]	; 0xffffffb0
   1605c:	str	r7, [fp, #-84]	; 0xffffffac
   16060:	strb	r7, [fp, #-76]	; 0xffffffb4
   16064:	strb	r7, [fp, #-88]	; 0xffffffa8
   16068:	str	sl, [fp, #-72]	; 0xffffffb8
   1606c:	bl	178b8 <__assert_fail@plt+0x5c0c>
   16070:	ldrb	r5, [fp, #-64]	; 0xffffffc0
   16074:	ldr	r4, [fp, #-60]	; 0xffffffc4
   16078:	cmp	r5, #0
   1607c:	beq	16088 <__assert_fail@plt+0x43dc>
   16080:	cmp	r4, #0
   16084:	beq	16288 <__assert_fail@plt+0x45dc>
   16088:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1608c:	add	r0, r6, #32
   16090:	str	r7, [fp, #-136]	; 0xffffff78
   16094:	str	r7, [fp, #-140]	; 0xffffff74
   16098:	str	sl, [fp, #-128]	; 0xffffff80
   1609c:	strb	r7, [fp, #-132]	; 0xffffff7c
   160a0:	strb	r7, [fp, #-144]	; 0xffffff70
   160a4:	cmp	r1, r0
   160a8:	beq	16290 <__assert_fail@plt+0x45e4>
   160ac:	ldr	r6, [fp, #-68]	; 0xffffffbc
   160b0:	b	162ac <__assert_fail@plt+0x4600>
   160b4:	ldrb	r6, [sl]
   160b8:	cmp	r6, #0
   160bc:	beq	16288 <__assert_fail@plt+0x45dc>
   160c0:	bl	11a84 <__ctype_b_loc@plt>
   160c4:	ldr	r8, [r0]
   160c8:	str	r0, [sp, #4]
   160cc:	ldr	r4, [sp, #28]
   160d0:	add	r0, r8, r6, lsl #1
   160d4:	ldrb	r0, [r0, #1]
   160d8:	tst	r0, #1
   160dc:	beq	160ec <__assert_fail@plt+0x4440>
   160e0:	bl	11a54 <__ctype_tolower_loc@plt>
   160e4:	ldr	r0, [r0]
   160e8:	ldrb	r6, [r0, r6, lsl #2]
   160ec:	ldrb	sl, [r4]
   160f0:	cmp	sl, #0
   160f4:	beq	166b4 <__assert_fail@plt+0x4a08>
   160f8:	mov	r0, #0
   160fc:	mov	r7, #0
   16100:	mov	r9, #0
   16104:	str	r6, [sp]
   16108:	str	r0, [sp, #8]
   1610c:	mov	r0, #1
   16110:	str	r0, [sp, #12]
   16114:	ldr	r0, [sp, #24]
   16118:	str	r0, [sp, #16]
   1611c:	add	r0, r9, r9, lsl #2
   16120:	cmp	r7, r0
   16124:	cmpcs	r9, #10
   16128:	bcs	161d4 <__assert_fail@plt+0x4528>
   1612c:	uxtb	r4, sl
   16130:	str	r7, [sp, #20]
   16134:	add	r0, r8, r4, lsl #1
   16138:	ldrb	r0, [r0, #1]
   1613c:	tst	r0, #1
   16140:	beq	16150 <__assert_fail@plt+0x44a4>
   16144:	bl	11a54 <__ctype_tolower_loc@plt>
   16148:	ldr	r0, [r0]
   1614c:	ldr	r4, [r0, r4, lsl #2]
   16150:	ldr	sl, [sp, #28]
   16154:	ldr	r7, [sp, #24]
   16158:	cmp	r4, r6
   1615c:	bne	161c8 <__assert_fail@plt+0x451c>
   16160:	mov	r4, #1
   16164:	b	16174 <__assert_fail@plt+0x44c8>
   16168:	add	r4, r4, #1
   1616c:	cmp	r5, r6
   16170:	bne	1625c <__assert_fail@plt+0x45b0>
   16174:	ldrb	r6, [r7, r4]
   16178:	cmp	r6, #0
   1617c:	beq	166bc <__assert_fail@plt+0x4a10>
   16180:	ldrb	r5, [sl, r4]
   16184:	cmp	r5, #0
   16188:	beq	166b4 <__assert_fail@plt+0x4a08>
   1618c:	add	r0, r8, r5, lsl #1
   16190:	ldrb	r0, [r0, #1]
   16194:	tst	r0, #1
   16198:	beq	161a8 <__assert_fail@plt+0x44fc>
   1619c:	bl	11a54 <__ctype_tolower_loc@plt>
   161a0:	ldr	r0, [r0]
   161a4:	ldr	r5, [r0, r5, lsl #2]
   161a8:	add	r0, r8, r6, lsl #1
   161ac:	ldrb	r0, [r0, #1]
   161b0:	tst	r0, #1
   161b4:	beq	16168 <__assert_fail@plt+0x44bc>
   161b8:	bl	11a54 <__ctype_tolower_loc@plt>
   161bc:	ldr	r0, [r0]
   161c0:	ldr	r6, [r0, r6, lsl #2]
   161c4:	b	16168 <__assert_fail@plt+0x44bc>
   161c8:	ldr	r7, [sp, #20]
   161cc:	add	r7, r7, #1
   161d0:	b	16268 <__assert_fail@plt+0x45bc>
   161d4:	ldr	r0, [sp, #12]
   161d8:	tst	r0, #1
   161dc:	beq	1612c <__assert_fail@plt+0x4480>
   161e0:	ldr	r4, [sp, #16]
   161e4:	cmp	r4, #0
   161e8:	beq	16210 <__assert_fail@plt+0x4564>
   161ec:	ldr	r0, [sp, #8]
   161f0:	sub	r1, r7, r0
   161f4:	mov	r0, r4
   161f8:	bl	11b80 <strnlen@plt>
   161fc:	ldrb	r0, [r4, r0]!
   16200:	str	r7, [sp, #8]
   16204:	str	r4, [sp, #16]
   16208:	cmp	r0, #0
   1620c:	bne	1612c <__assert_fail@plt+0x4480>
   16210:	ldr	r4, [sp, #24]
   16214:	mov	r0, r4
   16218:	bl	11ac0 <strlen@plt>
   1621c:	ldr	r5, [sp, #28]
   16220:	mov	r2, r0
   16224:	mov	r1, r4
   16228:	sub	r3, fp, #88	; 0x58
   1622c:	mov	r0, r5
   16230:	bl	16b64 <__assert_fail@plt+0x4eb8>
   16234:	cmp	r0, #0
   16238:	bne	166dc <__assert_fail@plt+0x4a30>
   1623c:	ldr	r0, [sp, #4]
   16240:	ldrb	sl, [r5]
   16244:	ldr	r8, [r0]
   16248:	mov	r0, #0
   1624c:	str	r0, [sp, #16]
   16250:	mov	r0, #0
   16254:	str	r0, [sp, #12]
   16258:	b	1612c <__assert_fail@plt+0x4480>
   1625c:	ldr	r7, [sp, #20]
   16260:	ldr	r6, [sp]
   16264:	add	r7, r7, r4
   16268:	mov	r0, sl
   1626c:	add	r9, r9, #1
   16270:	mov	r4, #0
   16274:	ldrb	sl, [r0, #1]!
   16278:	str	r0, [sp, #28]
   1627c:	cmp	sl, #0
   16280:	bne	1611c <__assert_fail@plt+0x4470>
   16284:	b	166c8 <__assert_fail@plt+0x4a1c>
   16288:	ldr	r4, [sp, #28]
   1628c:	b	166c8 <__assert_fail@plt+0x4a1c>
   16290:	ldr	r6, [fp, #-68]	; 0xffffffbc
   16294:	sub	r0, fp, #184	; 0xb8
   16298:	add	r7, r0, #16
   1629c:	mov	r0, r7
   162a0:	mov	r2, r6
   162a4:	bl	118ec <memcpy@plt>
   162a8:	mov	r1, r7
   162ac:	cmp	r5, #0
   162b0:	strb	r5, [fp, #-176]	; 0xffffff50
   162b4:	str	r6, [fp, #-180]	; 0xffffff4c
   162b8:	str	r1, [fp, #-184]	; 0xffffff48
   162bc:	beq	162d0 <__assert_fail@plt+0x4624>
   162c0:	mov	r0, r4
   162c4:	str	r4, [fp, #-172]	; 0xffffff54
   162c8:	bl	11910 <towlower@plt>
   162cc:	str	r0, [fp, #-172]	; 0xffffff54
   162d0:	ldr	r0, [sp, #28]
   162d4:	mov	r4, #0
   162d8:	str	r4, [sp, #192]	; 0xc0
   162dc:	str	r4, [sp, #188]	; 0xbc
   162e0:	strb	r4, [sp, #196]	; 0xc4
   162e4:	strb	r4, [sp, #184]	; 0xb8
   162e8:	str	r0, [sp, #200]	; 0xc8
   162ec:	add	r0, sp, #184	; 0xb8
   162f0:	bl	178b8 <__assert_fail@plt+0x5c0c>
   162f4:	ldrb	r0, [sp, #208]	; 0xd0
   162f8:	cmp	r0, #0
   162fc:	beq	1630c <__assert_fail@plt+0x4660>
   16300:	ldr	r0, [sp, #212]	; 0xd4
   16304:	cmp	r0, #0
   16308:	beq	166c8 <__assert_fail@plt+0x4a1c>
   1630c:	add	r5, sp, #32
   16310:	mov	r6, #0
   16314:	mov	r1, #0
   16318:	mov	r8, #0
   1631c:	add	r0, r5, #4
   16320:	str	r0, [sp]
   16324:	add	r0, sp, #144	; 0x90
   16328:	add	r0, r0, #16
   1632c:	str	r0, [sp, #4]
   16330:	add	r0, sp, #184	; 0xb8
   16334:	add	r0, r0, #32
   16338:	str	r0, [sp, #20]
   1633c:	mov	r0, #1
   16340:	str	r0, [sp, #8]
   16344:	mov	r0, #0
   16348:	str	r0, [sp, #12]
   1634c:	add	r0, r1, r1, lsl #2
   16350:	mov	r9, r8
   16354:	str	r1, [sp, #16]
   16358:	cmp	r8, r0
   1635c:	bcc	16418 <__assert_fail@plt+0x476c>
   16360:	ldr	r0, [sp, #8]
   16364:	sub	r7, fp, #144	; 0x90
   16368:	tst	r0, #1
   1636c:	beq	16418 <__assert_fail@plt+0x476c>
   16370:	cmp	r1, #10
   16374:	bcc	16418 <__assert_fail@plt+0x476c>
   16378:	ldr	r1, [sp, #12]
   1637c:	subs	r0, r9, r1
   16380:	beq	163c8 <__assert_fail@plt+0x471c>
   16384:	sub	r4, r1, r9
   16388:	b	163a8 <__assert_fail@plt+0x46fc>
   1638c:	strb	r6, [fp, #-132]	; 0xffffff7c
   16390:	adds	r4, r4, #1
   16394:	ldr	r0, [fp, #-128]	; 0xffffff80
   16398:	ldr	r1, [fp, #-124]	; 0xffffff84
   1639c:	add	r0, r0, r1
   163a0:	str	r0, [fp, #-128]	; 0xffffff80
   163a4:	bcs	163c8 <__assert_fail@plt+0x471c>
   163a8:	mov	r0, r7
   163ac:	bl	178b8 <__assert_fail@plt+0x5c0c>
   163b0:	ldrb	r0, [fp, #-120]	; 0xffffff88
   163b4:	cmp	r0, #0
   163b8:	beq	1638c <__assert_fail@plt+0x46e0>
   163bc:	ldr	r0, [fp, #-116]	; 0xffffff8c
   163c0:	cmp	r0, #0
   163c4:	bne	1638c <__assert_fail@plt+0x46e0>
   163c8:	mov	r0, r7
   163cc:	bl	178b8 <__assert_fail@plt+0x5c0c>
   163d0:	ldrb	r0, [fp, #-120]	; 0xffffff88
   163d4:	cmp	r0, #0
   163d8:	beq	16414 <__assert_fail@plt+0x4768>
   163dc:	ldr	r0, [fp, #-116]	; 0xffffff8c
   163e0:	str	r9, [sp, #12]
   163e4:	cmp	r0, #0
   163e8:	bne	16418 <__assert_fail@plt+0x476c>
   163ec:	ldr	r0, [sp, #28]
   163f0:	mov	r1, sl
   163f4:	add	r2, sp, #88	; 0x58
   163f8:	bl	166e8 <__assert_fail@plt+0x4a3c>
   163fc:	mov	r1, #0
   16400:	cmp	r0, #0
   16404:	str	r9, [sp, #12]
   16408:	str	r1, [sp, #8]
   1640c:	beq	16418 <__assert_fail@plt+0x476c>
   16410:	b	166d4 <__assert_fail@plt+0x4a28>
   16414:	str	r9, [sp, #12]
   16418:	ldr	r0, [sp, #200]	; 0xc8
   1641c:	ldr	r1, [sp, #20]
   16420:	ldr	r4, [sp, #204]	; 0xcc
   16424:	cmp	r0, r1
   16428:	bne	16450 <__assert_fail@plt+0x47a4>
   1642c:	mov	r7, r5
   16430:	ldr	r5, [sp, #4]
   16434:	ldr	r1, [sp, #20]
   16438:	mov	r2, r4
   1643c:	mov	r0, r5
   16440:	bl	118ec <memcpy@plt>
   16444:	mov	r0, r5
   16448:	mov	r5, r7
   1644c:	mov	r6, #0
   16450:	str	r4, [sp, #148]	; 0x94
   16454:	str	r0, [sp, #144]	; 0x90
   16458:	ldrb	r0, [sp, #208]	; 0xd0
   1645c:	add	r8, r9, #1
   16460:	cmp	r0, #0
   16464:	strb	r0, [sp, #152]	; 0x98
   16468:	beq	16490 <__assert_fail@plt+0x47e4>
   1646c:	ldr	r0, [sp, #212]	; 0xd4
   16470:	str	r0, [sp, #156]	; 0x9c
   16474:	bl	11910 <towlower@plt>
   16478:	str	r0, [sp, #156]	; 0x9c
   1647c:	ldrb	r0, [sp, #152]	; 0x98
   16480:	cmp	r0, #0
   16484:	ldrbne	r0, [fp, #-176]	; 0xffffff50
   16488:	cmpne	r0, #0
   1648c:	bne	164b8 <__assert_fail@plt+0x480c>
   16490:	ldr	r2, [sp, #148]	; 0x94
   16494:	ldr	r0, [fp, #-180]	; 0xffffff4c
   16498:	cmp	r2, r0
   1649c:	bne	1666c <__assert_fail@plt+0x49c0>
   164a0:	ldr	r1, [fp, #-184]	; 0xffffff48
   164a4:	ldr	r0, [sp, #144]	; 0x90
   164a8:	bl	11aa8 <bcmp@plt>
   164ac:	cmp	r0, #0
   164b0:	bne	1666c <__assert_fail@plt+0x49c0>
   164b4:	b	164c8 <__assert_fail@plt+0x481c>
   164b8:	ldr	r0, [fp, #-172]	; 0xffffff54
   164bc:	ldr	r1, [sp, #156]	; 0x9c
   164c0:	cmp	r1, r0
   164c4:	bne	1666c <__assert_fail@plt+0x49c0>
   164c8:	add	r1, sp, #184	; 0xb8
   164cc:	mov	r2, #48	; 0x30
   164d0:	add	r3, sp, #88	; 0x58
   164d4:	str	sl, [sp, #48]	; 0x30
   164d8:	strb	r6, [sp, #32]
   164dc:	add	r0, r1, #16
   164e0:	vld1.64	{d16-d17}, [r1], r2
   164e4:	ldr	r2, [sp, #20]
   164e8:	vld1.64	{d18-d19}, [r0]
   164ec:	vldr	d22, [r1]
   164f0:	add	r0, r3, #16
   164f4:	mov	r1, #12
   164f8:	vld1.64	{d20-d21}, [r2]
   164fc:	vst1.64	{d18-d19}, [r0]
   16500:	add	r0, r3, #32
   16504:	vst1.64	{d20-d21}, [r0]
   16508:	mov	r0, r3
   1650c:	vst1.64	{d16-d17}, [r0], r1
   16510:	strb	r6, [r0]
   16514:	vstr	d22, [sp, #136]	; 0x88
   16518:	ldr	r0, [sp, #104]	; 0x68
   1651c:	ldr	r1, [sp, #108]	; 0x6c
   16520:	add	r0, r0, r1
   16524:	str	r0, [sp, #104]	; 0x68
   16528:	ldr	r0, [sp]
   1652c:	str	r6, [r0]
   16530:	str	r6, [r0, #4]
   16534:	mov	r0, r5
   16538:	strb	r6, [sp, #44]	; 0x2c
   1653c:	bl	178b8 <__assert_fail@plt+0x5c0c>
   16540:	ldrb	r0, [sp, #56]	; 0x38
   16544:	cmp	r0, #0
   16548:	beq	16558 <__assert_fail@plt+0x48ac>
   1654c:	ldr	r0, [sp, #60]	; 0x3c
   16550:	cmp	r0, #0
   16554:	beq	166e4 <__assert_fail@plt+0x4a38>
   16558:	strb	r6, [sp, #44]	; 0x2c
   1655c:	ldr	r0, [sp, #48]	; 0x30
   16560:	ldr	r1, [sp, #52]	; 0x34
   16564:	add	r0, r0, r1
   16568:	str	r0, [sp, #48]	; 0x30
   1656c:	mov	r0, r5
   16570:	bl	178b8 <__assert_fail@plt+0x5c0c>
   16574:	ldrb	r0, [sp, #56]	; 0x38
   16578:	cmp	r0, #0
   1657c:	beq	1658c <__assert_fail@plt+0x48e0>
   16580:	ldr	r0, [sp, #60]	; 0x3c
   16584:	cmp	r0, #0
   16588:	beq	166c4 <__assert_fail@plt+0x4a18>
   1658c:	add	r8, r9, #2
   16590:	add	r0, sp, #88	; 0x58
   16594:	bl	178b8 <__assert_fail@plt+0x5c0c>
   16598:	ldr	r0, [sp, #116]	; 0x74
   1659c:	ldrb	r1, [sp, #112]	; 0x70
   165a0:	cmp	r0, #0
   165a4:	bne	165b0 <__assert_fail@plt+0x4904>
   165a8:	cmp	r1, #0
   165ac:	bne	166b4 <__assert_fail@plt+0x4a08>
   165b0:	cmp	r1, #0
   165b4:	ldrbne	r1, [sp, #56]	; 0x38
   165b8:	cmpne	r1, #0
   165bc:	bne	165f8 <__assert_fail@plt+0x494c>
   165c0:	ldr	r4, [sp, #108]	; 0x6c
   165c4:	ldr	r0, [sp, #52]	; 0x34
   165c8:	cmp	r4, r0
   165cc:	bne	16664 <__assert_fail@plt+0x49b8>
   165d0:	ldr	sl, [sp, #48]	; 0x30
   165d4:	ldr	r6, [sp, #104]	; 0x68
   165d8:	mov	r2, r4
   165dc:	mov	r0, r6
   165e0:	mov	r1, sl
   165e4:	bl	11aa8 <bcmp@plt>
   165e8:	cmp	r0, #0
   165ec:	mov	r0, r4
   165f0:	beq	16620 <__assert_fail@plt+0x4974>
   165f4:	b	16664 <__assert_fail@plt+0x49b8>
   165f8:	bl	11910 <towlower@plt>
   165fc:	mov	r4, r0
   16600:	ldr	r0, [sp, #60]	; 0x3c
   16604:	bl	11910 <towlower@plt>
   16608:	cmp	r4, r0
   1660c:	bne	16664 <__assert_fail@plt+0x49b8>
   16610:	ldr	sl, [sp, #48]	; 0x30
   16614:	ldr	r4, [sp, #52]	; 0x34
   16618:	ldr	r6, [sp, #104]	; 0x68
   1661c:	ldr	r0, [sp, #108]	; 0x6c
   16620:	mov	r1, #0
   16624:	add	r0, r6, r0
   16628:	strb	r1, [sp, #100]	; 0x64
   1662c:	str	r0, [sp, #104]	; 0x68
   16630:	add	r0, sl, r4
   16634:	strb	r1, [sp, #44]	; 0x2c
   16638:	str	r0, [sp, #48]	; 0x30
   1663c:	mov	r0, r5
   16640:	bl	178b8 <__assert_fail@plt+0x5c0c>
   16644:	ldrb	r0, [sp, #56]	; 0x38
   16648:	add	r8, r8, #1
   1664c:	cmp	r0, #0
   16650:	beq	16590 <__assert_fail@plt+0x48e4>
   16654:	ldr	r0, [sp, #60]	; 0x3c
   16658:	cmp	r0, #0
   1665c:	bne	16590 <__assert_fail@plt+0x48e4>
   16660:	b	166c4 <__assert_fail@plt+0x4a18>
   16664:	ldr	sl, [sp, #24]
   16668:	mov	r6, #0
   1666c:	mov	r4, #0
   16670:	ldr	r7, [sp, #16]
   16674:	strb	r4, [sp, #196]	; 0xc4
   16678:	ldr	r0, [sp, #200]	; 0xc8
   1667c:	ldr	r1, [sp, #204]	; 0xcc
   16680:	add	r7, r7, #1
   16684:	add	r0, r0, r1
   16688:	str	r0, [sp, #200]	; 0xc8
   1668c:	add	r0, sp, #184	; 0xb8
   16690:	bl	178b8 <__assert_fail@plt+0x5c0c>
   16694:	ldrb	r0, [sp, #208]	; 0xd0
   16698:	mov	r1, r7
   1669c:	cmp	r0, #0
   166a0:	beq	1634c <__assert_fail@plt+0x46a0>
   166a4:	ldr	r0, [sp, #212]	; 0xd4
   166a8:	cmp	r0, #0
   166ac:	bne	1634c <__assert_fail@plt+0x46a0>
   166b0:	b	166c8 <__assert_fail@plt+0x4a1c>
   166b4:	mov	r4, #0
   166b8:	b	166c8 <__assert_fail@plt+0x4a1c>
   166bc:	mov	r4, sl
   166c0:	b	166c8 <__assert_fail@plt+0x4a1c>
   166c4:	ldr	r4, [sp, #200]	; 0xc8
   166c8:	mov	r0, r4
   166cc:	sub	sp, fp, #28
   166d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166d4:	ldr	r4, [sp, #88]	; 0x58
   166d8:	b	166c8 <__assert_fail@plt+0x4a1c>
   166dc:	ldr	r4, [fp, #-88]	; 0xffffffa8
   166e0:	b	166c8 <__assert_fail@plt+0x4a1c>
   166e4:	bl	11c70 <abort@plt>
   166e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166ec:	add	fp, sp, #28
   166f0:	sub	sp, sp, #180	; 0xb4
   166f4:	mov	r7, r0
   166f8:	mov	r0, r1
   166fc:	mov	sl, r2
   16700:	mov	r4, r1
   16704:	bl	16d78 <__assert_fail@plt+0x50cc>
   16708:	mov	r6, r0
   1670c:	movw	r0, #47662	; 0xba2e
   16710:	mov	r5, #0
   16714:	movt	r0, #744	; 0x2e8
   16718:	cmp	r6, r0
   1671c:	bhi	16b54 <__assert_fail@plt+0x4ea8>
   16720:	mov	r0, #44	; 0x2c
   16724:	mul	r0, r6, r0
   16728:	cmp	r0, #4016	; 0xfb0
   1672c:	bhi	16754 <__assert_fail@plt+0x4aa8>
   16730:	add	r0, r0, #22
   16734:	bic	r0, r0, #7
   16738:	sub	r0, sp, r0
   1673c:	add	r1, r0, #15
   16740:	bic	r8, r1, #15
   16744:	mov	sp, r0
   16748:	cmp	r8, #0
   1674c:	bne	16764 <__assert_fail@plt+0x4ab8>
   16750:	b	16b54 <__assert_fail@plt+0x4ea8>
   16754:	bl	2f48c <__assert_fail@plt+0x1d7e0>
   16758:	mov	r8, r0
   1675c:	cmp	r8, #0
   16760:	beq	16b54 <__assert_fail@plt+0x4ea8>
   16764:	mov	r9, #0
   16768:	str	r7, [fp, #-196]	; 0xffffff3c
   1676c:	str	r9, [fp, #-80]	; 0xffffffb0
   16770:	str	r9, [fp, #-84]	; 0xffffffac
   16774:	strb	r9, [fp, #-76]	; 0xffffffb4
   16778:	strb	r9, [fp, #-88]	; 0xffffffa8
   1677c:	str	r4, [fp, #-72]	; 0xffffffb8
   16780:	sub	r4, fp, #88	; 0x58
   16784:	mov	r0, r4
   16788:	bl	178b8 <__assert_fail@plt+0x5c0c>
   1678c:	add	r0, r6, r6, lsl #2
   16790:	add	r3, r8, r0, lsl #3
   16794:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16798:	str	r3, [fp, #-188]	; 0xffffff44
   1679c:	cmp	r0, #0
   167a0:	beq	167b0 <__assert_fail@plt+0x4b04>
   167a4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   167a8:	cmp	r0, #0
   167ac:	beq	16840 <__assert_fail@plt+0x4b94>
   167b0:	add	r7, r8, #16
   167b4:	add	r5, r4, #32
   167b8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   167bc:	cmp	r0, r5
   167c0:	bne	167d8 <__assert_fail@plt+0x4b2c>
   167c4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   167c8:	mov	r0, r7
   167cc:	mov	r1, r5
   167d0:	bl	118ec <memcpy@plt>
   167d4:	mov	r0, r7
   167d8:	str	r0, [r7, #-16]
   167dc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   167e0:	str	r0, [r7, #-12]
   167e4:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   167e8:	cmp	r0, #0
   167ec:	strb	r0, [r7, #-8]
   167f0:	beq	16804 <__assert_fail@plt+0x4b58>
   167f4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   167f8:	str	r0, [r7, #-4]
   167fc:	bl	11910 <towlower@plt>
   16800:	str	r0, [r7, #-4]
   16804:	strb	r9, [fp, #-76]	; 0xffffffb4
   16808:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1680c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16810:	add	r0, r0, r1
   16814:	str	r0, [fp, #-72]	; 0xffffffb8
   16818:	mov	r0, r4
   1681c:	bl	178b8 <__assert_fail@plt+0x5c0c>
   16820:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   16824:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16828:	ldr	r3, [fp, #-188]	; 0xffffff44
   1682c:	add	r7, r7, #40	; 0x28
   16830:	cmp	r1, #0
   16834:	beq	167b8 <__assert_fail@plt+0x4b0c>
   16838:	cmp	r0, #0
   1683c:	bne	167b8 <__assert_fail@plt+0x4b0c>
   16840:	mov	r0, #1
   16844:	cmp	r6, #3
   16848:	str	sl, [fp, #-204]	; 0xffffff34
   1684c:	str	r6, [fp, #-192]	; 0xffffff40
   16850:	str	r0, [r3, #4]
   16854:	bcc	16920 <__assert_fail@plt+0x4c74>
   16858:	mov	r4, #2
   1685c:	mov	r5, #0
   16860:	b	16880 <__assert_fail@plt+0x4bd4>
   16864:	mov	r5, #0
   16868:	mov	r0, r4
   1686c:	str	r0, [r3, r4, lsl #2]
   16870:	ldr	r0, [fp, #-192]	; 0xffffff40
   16874:	add	r4, r4, #1
   16878:	cmp	r4, r0
   1687c:	beq	16920 <__assert_fail@plt+0x4c74>
   16880:	add	r0, r4, r4, lsl #2
   16884:	add	r0, r8, r0, lsl #3
   16888:	ldrb	sl, [r0, #-32]	; 0xffffffe0
   1688c:	sub	r9, r0, #40	; 0x28
   16890:	sub	r6, r0, #36	; 0x24
   16894:	sub	r7, r0, #28
   16898:	cmp	sl, #0
   1689c:	beq	168c8 <__assert_fail@plt+0x4c1c>
   168a0:	add	r0, r5, r5, lsl #2
   168a4:	add	r0, r8, r0, lsl #3
   168a8:	ldrb	r1, [r0, #8]
   168ac:	cmp	r1, #0
   168b0:	beq	168c8 <__assert_fail@plt+0x4c1c>
   168b4:	ldr	r0, [r0, #12]
   168b8:	ldr	r1, [r7]
   168bc:	cmp	r1, r0
   168c0:	bne	168f8 <__assert_fail@plt+0x4c4c>
   168c4:	b	16914 <__assert_fail@plt+0x4c68>
   168c8:	add	r0, r5, r5, lsl #2
   168cc:	ldr	r2, [r6]
   168d0:	add	r1, r8, r0, lsl #3
   168d4:	ldr	r1, [r1, #4]
   168d8:	cmp	r2, r1
   168dc:	bne	168f8 <__assert_fail@plt+0x4c4c>
   168e0:	ldr	r1, [r8, r0, lsl #3]
   168e4:	ldr	r0, [r9]
   168e8:	bl	11aa8 <bcmp@plt>
   168ec:	ldr	r3, [fp, #-188]	; 0xffffff44
   168f0:	cmp	r0, #0
   168f4:	beq	16914 <__assert_fail@plt+0x4c68>
   168f8:	cmp	r5, #0
   168fc:	beq	16864 <__assert_fail@plt+0x4bb8>
   16900:	ldr	r0, [r3, r5, lsl #2]
   16904:	sub	r5, r5, r0
   16908:	cmp	sl, #0
   1690c:	bne	168a0 <__assert_fail@plt+0x4bf4>
   16910:	b	168c8 <__assert_fail@plt+0x4c1c>
   16914:	add	r5, r5, #1
   16918:	sub	r0, r4, r5
   1691c:	b	1686c <__assert_fail@plt+0x4bc0>
   16920:	ldr	r0, [fp, #-204]	; 0xffffff34
   16924:	mov	r1, #0
   16928:	str	r1, [r0]
   1692c:	ldr	r0, [fp, #-196]	; 0xffffff3c
   16930:	str	r1, [fp, #-80]	; 0xffffffb0
   16934:	str	r1, [fp, #-84]	; 0xffffffac
   16938:	strb	r1, [fp, #-76]	; 0xffffffb4
   1693c:	strb	r1, [fp, #-88]	; 0xffffffa8
   16940:	str	r1, [fp, #-136]	; 0xffffff78
   16944:	str	r1, [fp, #-140]	; 0xffffff74
   16948:	str	r0, [fp, #-128]	; 0xffffff80
   1694c:	str	r0, [fp, #-72]	; 0xffffffb8
   16950:	sub	r0, fp, #144	; 0x90
   16954:	strb	r1, [fp, #-132]	; 0xffffff7c
   16958:	strb	r1, [fp, #-144]	; 0xffffff70
   1695c:	bl	178b8 <__assert_fail@plt+0x5c0c>
   16960:	ldrb	r9, [fp, #-120]	; 0xffffff88
   16964:	ldr	r6, [fp, #-116]	; 0xffffff8c
   16968:	cmp	r9, #0
   1696c:	beq	16978 <__assert_fail@plt+0x4ccc>
   16970:	cmp	r6, #0
   16974:	beq	16b48 <__assert_fail@plt+0x4e9c>
   16978:	sub	r0, fp, #184	; 0xb8
   1697c:	sub	r4, fp, #88	; 0x58
   16980:	mov	r7, #0
   16984:	add	r0, r0, #16
   16988:	str	r0, [fp, #-200]	; 0xffffff38
   1698c:	sub	r0, fp, #144	; 0x90
   16990:	add	r0, r0, #32
   16994:	str	r0, [fp, #-196]	; 0xffffff3c
   16998:	ldr	sl, [fp, #-128]	; 0xffffff80
   1699c:	ldr	r1, [fp, #-196]	; 0xffffff3c
   169a0:	ldr	r5, [fp, #-124]	; 0xffffff84
   169a4:	cmp	sl, r1
   169a8:	bne	169c0 <__assert_fail@plt+0x4d14>
   169ac:	ldr	sl, [fp, #-200]	; 0xffffff38
   169b0:	ldr	r1, [fp, #-196]	; 0xffffff3c
   169b4:	mov	r2, r5
   169b8:	mov	r0, sl
   169bc:	bl	118ec <memcpy@plt>
   169c0:	tst	r9, #255	; 0xff
   169c4:	strb	r9, [fp, #-176]	; 0xffffff50
   169c8:	str	r5, [fp, #-180]	; 0xffffff4c
   169cc:	str	sl, [fp, #-184]	; 0xffffff48
   169d0:	beq	16a00 <__assert_fail@plt+0x4d54>
   169d4:	mov	r0, r6
   169d8:	str	r6, [fp, #-172]	; 0xffffff54
   169dc:	bl	11910 <towlower@plt>
   169e0:	str	r0, [fp, #-172]	; 0xffffff54
   169e4:	add	r0, r7, r7, lsl #2
   169e8:	add	r0, r8, r0, lsl #3
   169ec:	ldrb	r1, [r0, #8]
   169f0:	cmp	r1, #0
   169f4:	ldrbne	r1, [fp, #-176]	; 0xffffff50
   169f8:	cmpne	r1, #0
   169fc:	bne	16ae0 <__assert_fail@plt+0x4e34>
   16a00:	add	r0, r7, r7, lsl #2
   16a04:	add	r1, r8, r0, lsl #3
   16a08:	ldr	r2, [r1, #4]
   16a0c:	ldr	r1, [fp, #-180]	; 0xffffff4c
   16a10:	cmp	r2, r1
   16a14:	bne	16a2c <__assert_fail@plt+0x4d80>
   16a18:	ldr	r0, [r8, r0, lsl #3]
   16a1c:	ldr	r1, [fp, #-184]	; 0xffffff48
   16a20:	bl	11aa8 <bcmp@plt>
   16a24:	cmp	r0, #0
   16a28:	beq	16af0 <__assert_fail@plt+0x4e44>
   16a2c:	cmp	r7, #0
   16a30:	mov	r6, #0
   16a34:	beq	16a90 <__assert_fail@plt+0x4de4>
   16a38:	ldr	r0, [fp, #-188]	; 0xffffff44
   16a3c:	ldr	r5, [r0, r7, lsl #2]
   16a40:	sub	r7, r7, r5
   16a44:	cmp	r5, #0
   16a48:	bne	16a6c <__assert_fail@plt+0x4dc0>
   16a4c:	b	16b18 <__assert_fail@plt+0x4e6c>
   16a50:	strb	r6, [fp, #-76]	; 0xffffffb4
   16a54:	subs	r5, r5, #1
   16a58:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16a5c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16a60:	add	r0, r0, r1
   16a64:	str	r0, [fp, #-72]	; 0xffffffb8
   16a68:	beq	16b18 <__assert_fail@plt+0x4e6c>
   16a6c:	mov	r0, r4
   16a70:	bl	178b8 <__assert_fail@plt+0x5c0c>
   16a74:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16a78:	cmp	r0, #0
   16a7c:	beq	16a50 <__assert_fail@plt+0x4da4>
   16a80:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16a84:	cmp	r0, #0
   16a88:	bne	16a50 <__assert_fail@plt+0x4da4>
   16a8c:	b	16b60 <__assert_fail@plt+0x4eb4>
   16a90:	mov	r0, r4
   16a94:	bl	178b8 <__assert_fail@plt+0x5c0c>
   16a98:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16a9c:	cmp	r0, #0
   16aa0:	beq	16ab0 <__assert_fail@plt+0x4e04>
   16aa4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16aa8:	cmp	r0, #0
   16aac:	beq	16b60 <__assert_fail@plt+0x4eb4>
   16ab0:	mov	r7, #0
   16ab4:	strb	r7, [fp, #-76]	; 0xffffffb4
   16ab8:	strb	r7, [fp, #-132]	; 0xffffff7c
   16abc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16ac0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16ac4:	add	r0, r0, r1
   16ac8:	ldr	r1, [fp, #-124]	; 0xffffff84
   16acc:	str	r0, [fp, #-72]	; 0xffffffb8
   16ad0:	ldr	r0, [fp, #-128]	; 0xffffff80
   16ad4:	add	r0, r0, r1
   16ad8:	str	r0, [fp, #-128]	; 0xffffff80
   16adc:	b	16b18 <__assert_fail@plt+0x4e6c>
   16ae0:	ldr	r0, [r0, #12]
   16ae4:	ldr	r1, [fp, #-172]	; 0xffffff54
   16ae8:	cmp	r0, r1
   16aec:	bne	16a2c <__assert_fail@plt+0x4d80>
   16af0:	mov	r0, #0
   16af4:	add	r7, r7, #1
   16af8:	strb	r0, [fp, #-132]	; 0xffffff7c
   16afc:	ldr	r0, [fp, #-128]	; 0xffffff80
   16b00:	ldr	r1, [fp, #-124]	; 0xffffff84
   16b04:	add	r0, r0, r1
   16b08:	str	r0, [fp, #-128]	; 0xffffff80
   16b0c:	ldr	r0, [fp, #-192]	; 0xffffff40
   16b10:	cmp	r7, r0
   16b14:	beq	16b3c <__assert_fail@plt+0x4e90>
   16b18:	sub	r0, fp, #144	; 0x90
   16b1c:	bl	178b8 <__assert_fail@plt+0x5c0c>
   16b20:	ldrb	r9, [fp, #-120]	; 0xffffff88
   16b24:	ldr	r6, [fp, #-116]	; 0xffffff8c
   16b28:	cmp	r9, #0
   16b2c:	beq	16998 <__assert_fail@plt+0x4cec>
   16b30:	cmp	r6, #0
   16b34:	bne	16998 <__assert_fail@plt+0x4cec>
   16b38:	b	16b48 <__assert_fail@plt+0x4e9c>
   16b3c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16b40:	ldr	r1, [fp, #-204]	; 0xffffff34
   16b44:	str	r0, [r1]
   16b48:	mov	r0, r8
   16b4c:	bl	2f4fc <__assert_fail@plt+0x1d850>
   16b50:	mov	r5, #1
   16b54:	mov	r0, r5
   16b58:	sub	sp, fp, #28
   16b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b60:	bl	11c70 <abort@plt>
   16b64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b68:	add	fp, sp, #28
   16b6c:	sub	sp, sp, #28
   16b70:	mov	r4, #0
   16b74:	cmn	r2, #-536870911	; 0xe0000001
   16b78:	bhi	16d6c <__assert_fail@plt+0x50c0>
   16b7c:	str	r0, [fp, #-48]	; 0xffffffd0
   16b80:	lsl	r0, r2, #2
   16b84:	mov	r5, r3
   16b88:	mov	r8, r2
   16b8c:	mov	r9, r1
   16b90:	cmp	r0, #4016	; 0xfb0
   16b94:	bhi	16bbc <__assert_fail@plt+0x4f10>
   16b98:	add	r0, r0, #22
   16b9c:	bic	r0, r0, #7
   16ba0:	sub	r0, sp, r0
   16ba4:	add	r1, r0, #15
   16ba8:	bic	sl, r1, #15
   16bac:	mov	sp, r0
   16bb0:	cmp	sl, #0
   16bb4:	bne	16bcc <__assert_fail@plt+0x4f20>
   16bb8:	b	16d6c <__assert_fail@plt+0x50c0>
   16bbc:	bl	2f48c <__assert_fail@plt+0x1d7e0>
   16bc0:	mov	sl, r0
   16bc4:	cmp	sl, #0
   16bc8:	beq	16d6c <__assert_fail@plt+0x50c0>
   16bcc:	mov	r0, #1
   16bd0:	cmp	r8, #3
   16bd4:	str	r5, [fp, #-52]	; 0xffffffcc
   16bd8:	str	r0, [sl, #4]
   16bdc:	bcc	16c80 <__assert_fail@plt+0x4fd4>
   16be0:	bl	11a84 <__ctype_b_loc@plt>
   16be4:	ldr	r5, [r0]
   16be8:	mov	r4, #0
   16bec:	mov	r7, #2
   16bf0:	str	r8, [fp, #-36]	; 0xffffffdc
   16bf4:	b	16c14 <__assert_fail@plt+0x4f68>
   16bf8:	add	r4, r4, #1
   16bfc:	sub	r0, r7, r4
   16c00:	ldr	r8, [fp, #-36]	; 0xffffffdc
   16c04:	str	r0, [sl, r7, lsl #2]
   16c08:	add	r7, r7, #1
   16c0c:	cmp	r7, r8
   16c10:	beq	16c80 <__assert_fail@plt+0x4fd4>
   16c14:	add	r0, r7, r9
   16c18:	ldrb	r6, [r0, #-1]
   16c1c:	add	r0, r5, r6, lsl #1
   16c20:	ldrb	r0, [r0, #1]
   16c24:	tst	r0, #1
   16c28:	beq	16c38 <__assert_fail@plt+0x4f8c>
   16c2c:	bl	11a54 <__ctype_tolower_loc@plt>
   16c30:	ldr	r0, [r0]
   16c34:	ldrb	r6, [r0, r6, lsl #2]
   16c38:	ldrb	r8, [r9, r4]
   16c3c:	add	r0, r5, r8, lsl #1
   16c40:	ldrb	r0, [r0, #1]
   16c44:	tst	r0, #1
   16c48:	beq	16c58 <__assert_fail@plt+0x4fac>
   16c4c:	bl	11a54 <__ctype_tolower_loc@plt>
   16c50:	ldr	r0, [r0]
   16c54:	ldr	r8, [r0, r8, lsl #2]
   16c58:	cmp	r6, r8
   16c5c:	beq	16bf8 <__assert_fail@plt+0x4f4c>
   16c60:	cmp	r4, #0
   16c64:	beq	16c74 <__assert_fail@plt+0x4fc8>
   16c68:	ldr	r0, [sl, r4, lsl #2]
   16c6c:	sub	r4, r4, r0
   16c70:	b	16c38 <__assert_fail@plt+0x4f8c>
   16c74:	mov	r4, #0
   16c78:	mov	r0, r7
   16c7c:	b	16c00 <__assert_fail@plt+0x4f54>
   16c80:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16c84:	ldr	r7, [fp, #-48]	; 0xffffffd0
   16c88:	mov	r5, #0
   16c8c:	str	r5, [r0]
   16c90:	ldrb	r6, [r7]
   16c94:	cmp	r6, #0
   16c98:	beq	16d60 <__assert_fail@plt+0x50b4>
   16c9c:	bl	11a84 <__ctype_b_loc@plt>
   16ca0:	ldr	r1, [r0]
   16ca4:	str	r7, [fp, #-40]	; 0xffffffd8
   16ca8:	str	r1, [fp, #-44]	; 0xffffffd4
   16cac:	b	16cd0 <__assert_fail@plt+0x5024>
   16cb0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16cb4:	add	r7, r7, #1
   16cb8:	mov	r5, #0
   16cbc:	add	r0, r0, #1
   16cc0:	str	r0, [fp, #-40]	; 0xffffffd8
   16cc4:	ldrb	r6, [r7]
   16cc8:	cmp	r6, #0
   16ccc:	beq	16d60 <__assert_fail@plt+0x50b4>
   16cd0:	ldrb	r4, [r9, r5]
   16cd4:	add	r0, r1, r4, lsl #1
   16cd8:	ldrb	r0, [r0, #1]
   16cdc:	tst	r0, #1
   16ce0:	beq	16cf4 <__assert_fail@plt+0x5048>
   16ce4:	bl	11a54 <__ctype_tolower_loc@plt>
   16ce8:	ldr	r0, [r0]
   16cec:	ldr	r1, [fp, #-44]	; 0xffffffd4
   16cf0:	ldr	r4, [r0, r4, lsl #2]
   16cf4:	uxtb	r6, r6
   16cf8:	add	r0, r1, r6, lsl #1
   16cfc:	ldrb	r0, [r0, #1]
   16d00:	tst	r0, #1
   16d04:	beq	16d18 <__assert_fail@plt+0x506c>
   16d08:	bl	11a54 <__ctype_tolower_loc@plt>
   16d0c:	ldr	r0, [r0]
   16d10:	ldr	r1, [fp, #-44]	; 0xffffffd4
   16d14:	ldr	r6, [r0, r6, lsl #2]
   16d18:	cmp	r4, r6
   16d1c:	bne	16d34 <__assert_fail@plt+0x5088>
   16d20:	add	r5, r5, #1
   16d24:	cmp	r5, r8
   16d28:	beq	16d54 <__assert_fail@plt+0x50a8>
   16d2c:	add	r7, r7, #1
   16d30:	b	16cc4 <__assert_fail@plt+0x5018>
   16d34:	cmp	r5, #0
   16d38:	beq	16cb0 <__assert_fail@plt+0x5004>
   16d3c:	ldr	r0, [sl, r5, lsl #2]
   16d40:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16d44:	add	r2, r2, r0
   16d48:	sub	r5, r5, r0
   16d4c:	str	r2, [fp, #-40]	; 0xffffffd8
   16d50:	b	16cc4 <__assert_fail@plt+0x5018>
   16d54:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16d58:	ldr	r1, [fp, #-40]	; 0xffffffd8
   16d5c:	str	r1, [r0]
   16d60:	mov	r0, sl
   16d64:	bl	2f4fc <__assert_fail@plt+0x1d850>
   16d68:	mov	r4, #1
   16d6c:	mov	r0, r4
   16d70:	sub	sp, fp, #28
   16d74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d78:	push	{r4, r5, r6, sl, fp, lr}
   16d7c:	add	fp, sp, #16
   16d80:	sub	sp, sp, #56	; 0x38
   16d84:	mov	r5, r0
   16d88:	bl	119ac <__ctype_get_mb_cur_max@plt>
   16d8c:	cmp	r0, #2
   16d90:	bcc	16e1c <__assert_fail@plt+0x5170>
   16d94:	mov	r4, #0
   16d98:	mov	r0, sp
   16d9c:	str	r4, [sp, #8]
   16da0:	str	r4, [sp, #4]
   16da4:	strb	r4, [sp, #12]
   16da8:	strb	r4, [sp]
   16dac:	str	r5, [sp, #16]
   16db0:	bl	178b8 <__assert_fail@plt+0x5c0c>
   16db4:	ldrb	r0, [sp, #24]
   16db8:	cmp	r0, #0
   16dbc:	beq	16dcc <__assert_fail@plt+0x5120>
   16dc0:	ldr	r0, [sp, #28]
   16dc4:	cmp	r0, #0
   16dc8:	beq	16e10 <__assert_fail@plt+0x5164>
   16dcc:	mov	r6, #0
   16dd0:	mov	r5, sp
   16dd4:	mov	r4, #0
   16dd8:	strb	r6, [sp, #12]
   16ddc:	ldr	r0, [sp, #16]
   16de0:	ldr	r1, [sp, #20]
   16de4:	add	r0, r0, r1
   16de8:	str	r0, [sp, #16]
   16dec:	mov	r0, r5
   16df0:	bl	178b8 <__assert_fail@plt+0x5c0c>
   16df4:	ldrb	r1, [sp, #24]
   16df8:	ldr	r0, [sp, #28]
   16dfc:	add	r4, r4, #1
   16e00:	cmp	r1, #0
   16e04:	beq	16dd8 <__assert_fail@plt+0x512c>
   16e08:	cmp	r0, #0
   16e0c:	bne	16dd8 <__assert_fail@plt+0x512c>
   16e10:	mov	r0, r4
   16e14:	sub	sp, fp, #16
   16e18:	pop	{r4, r5, r6, sl, fp, pc}
   16e1c:	mov	r0, r5
   16e20:	sub	sp, fp, #16
   16e24:	pop	{r4, r5, r6, sl, fp, lr}
   16e28:	b	11ac0 <strlen@plt>
   16e2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e30:	add	fp, sp, #28
   16e34:	sub	sp, sp, #308	; 0x134
   16e38:	mov	r6, r1
   16e3c:	mov	sl, r0
   16e40:	bl	119ac <__ctype_get_mb_cur_max@plt>
   16e44:	cmp	r0, #2
   16e48:	bcc	171fc <__assert_fail@plt+0x5550>
   16e4c:	mov	r4, #0
   16e50:	sub	r0, fp, #88	; 0x58
   16e54:	str	r4, [fp, #-80]	; 0xffffffb0
   16e58:	str	r4, [fp, #-84]	; 0xffffffac
   16e5c:	strb	r4, [fp, #-76]	; 0xffffffb4
   16e60:	strb	r4, [fp, #-88]	; 0xffffffa8
   16e64:	str	r6, [fp, #-72]	; 0xffffffb8
   16e68:	bl	178b8 <__assert_fail@plt+0x5c0c>
   16e6c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16e70:	cmp	r0, #0
   16e74:	beq	16e84 <__assert_fail@plt+0x51d8>
   16e78:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16e7c:	cmp	r0, #0
   16e80:	beq	17318 <__assert_fail@plt+0x566c>
   16e84:	add	r0, sp, #136	; 0x88
   16e88:	str	r4, [fp, #-136]	; 0xffffff78
   16e8c:	str	r4, [fp, #-140]	; 0xffffff74
   16e90:	str	r6, [fp, #-128]	; 0xffffff80
   16e94:	strb	r4, [fp, #-132]	; 0xffffff7c
   16e98:	str	r6, [sp, #16]
   16e9c:	strb	r4, [fp, #-144]	; 0xffffff70
   16ea0:	str	r4, [sp, #144]	; 0x90
   16ea4:	str	r4, [sp, #140]	; 0x8c
   16ea8:	str	sl, [sp, #152]	; 0x98
   16eac:	strb	r4, [sp, #148]	; 0x94
   16eb0:	strb	r4, [sp, #136]	; 0x88
   16eb4:	bl	178b8 <__assert_fail@plt+0x5c0c>
   16eb8:	ldrb	r0, [sp, #160]	; 0xa0
   16ebc:	cmp	r0, #0
   16ec0:	beq	16ed0 <__assert_fail@plt+0x5224>
   16ec4:	ldr	r0, [sp, #164]	; 0xa4
   16ec8:	cmp	r0, #0
   16ecc:	beq	17324 <__assert_fail@plt+0x5678>
   16ed0:	add	r0, sp, #24
   16ed4:	mov	r8, #1
   16ed8:	mov	r6, #0
   16edc:	sub	r5, fp, #144	; 0x90
   16ee0:	mov	r1, #0
   16ee4:	mov	r7, #0
   16ee8:	mov	r9, #0
   16eec:	add	r0, r0, #4
   16ef0:	str	r0, [sp, #12]
   16ef4:	add	r0, sp, #136	; 0x88
   16ef8:	add	r0, r0, #16
   16efc:	str	r0, [sp, #8]
   16f00:	add	r0, r9, r9, lsl #2
   16f04:	mov	r4, r7
   16f08:	cmp	r7, r0
   16f0c:	bcc	16fb8 <__assert_fail@plt+0x530c>
   16f10:	tst	r8, #1
   16f14:	beq	16fb8 <__assert_fail@plt+0x530c>
   16f18:	cmp	r9, #10
   16f1c:	bcc	16fb8 <__assert_fail@plt+0x530c>
   16f20:	subs	r0, r4, r1
   16f24:	beq	16f6c <__assert_fail@plt+0x52c0>
   16f28:	sub	r7, r1, r4
   16f2c:	b	16f4c <__assert_fail@plt+0x52a0>
   16f30:	strb	r6, [fp, #-132]	; 0xffffff7c
   16f34:	adds	r7, r7, #1
   16f38:	ldr	r0, [fp, #-128]	; 0xffffff80
   16f3c:	ldr	r1, [fp, #-124]	; 0xffffff84
   16f40:	add	r0, r0, r1
   16f44:	str	r0, [fp, #-128]	; 0xffffff80
   16f48:	bcs	16f6c <__assert_fail@plt+0x52c0>
   16f4c:	mov	r0, r5
   16f50:	bl	178b8 <__assert_fail@plt+0x5c0c>
   16f54:	ldrb	r0, [fp, #-120]	; 0xffffff88
   16f58:	cmp	r0, #0
   16f5c:	beq	16f30 <__assert_fail@plt+0x5284>
   16f60:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16f64:	cmp	r0, #0
   16f68:	bne	16f30 <__assert_fail@plt+0x5284>
   16f6c:	mov	r0, r5
   16f70:	bl	178b8 <__assert_fail@plt+0x5c0c>
   16f74:	ldrb	r0, [fp, #-120]	; 0xffffff88
   16f78:	cmp	r0, #0
   16f7c:	beq	16fb4 <__assert_fail@plt+0x5308>
   16f80:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16f84:	mov	r1, r4
   16f88:	cmp	r0, #0
   16f8c:	bne	16fb8 <__assert_fail@plt+0x530c>
   16f90:	ldr	r1, [sp, #16]
   16f94:	mov	r0, sl
   16f98:	add	r2, sp, #80	; 0x50
   16f9c:	bl	1734c <__assert_fail@plt+0x56a0>
   16fa0:	mov	r8, #0
   16fa4:	cmp	r0, #0
   16fa8:	mov	r1, r4
   16fac:	beq	16fb8 <__assert_fail@plt+0x530c>
   16fb0:	b	17340 <__assert_fail@plt+0x5694>
   16fb4:	mov	r1, r4
   16fb8:	ldrb	r0, [sp, #160]	; 0xa0
   16fbc:	add	r7, r4, #1
   16fc0:	str	r1, [sp, #20]
   16fc4:	cmp	r0, #0
   16fc8:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   16fcc:	cmpne	r0, #0
   16fd0:	bne	16ffc <__assert_fail@plt+0x5350>
   16fd4:	ldr	r2, [sp, #156]	; 0x9c
   16fd8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16fdc:	cmp	r2, r0
   16fe0:	bne	171b8 <__assert_fail@plt+0x550c>
   16fe4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16fe8:	ldr	r0, [sp, #152]	; 0x98
   16fec:	bl	11aa8 <bcmp@plt>
   16ff0:	cmp	r0, #0
   16ff4:	bne	171b8 <__assert_fail@plt+0x550c>
   16ff8:	b	1700c <__assert_fail@plt+0x5360>
   16ffc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17000:	ldr	r1, [sp, #164]	; 0xa4
   17004:	cmp	r1, r0
   17008:	bne	171b8 <__assert_fail@plt+0x550c>
   1700c:	add	r2, sp, #136	; 0x88
   17010:	mov	r1, #48	; 0x30
   17014:	add	r3, sp, #80	; 0x50
   17018:	str	r9, [sp]
   1701c:	str	r8, [sp, #4]
   17020:	mov	r0, r2
   17024:	add	r2, r2, #32
   17028:	vld1.64	{d16-d17}, [r0], r1
   1702c:	ldr	r1, [sp, #8]
   17030:	vld1.64	{d20-d21}, [r2]
   17034:	vldr	d22, [r0]
   17038:	add	r0, r3, #32
   1703c:	vld1.64	{d18-d19}, [r1]
   17040:	add	r1, r3, #16
   17044:	vst1.64	{d20-d21}, [r0]
   17048:	mov	r0, r3
   1704c:	vst1.64	{d18-d19}, [r1]
   17050:	mov	r1, #12
   17054:	vst1.64	{d16-d17}, [r0], r1
   17058:	strb	r6, [r0]
   1705c:	ldr	r0, [sp, #16]
   17060:	vstr	d22, [sp, #128]	; 0x80
   17064:	ldr	r1, [sp, #100]	; 0x64
   17068:	str	r0, [sp, #40]	; 0x28
   1706c:	ldr	r0, [sp, #96]	; 0x60
   17070:	strb	r6, [sp, #24]
   17074:	add	r0, r0, r1
   17078:	str	r0, [sp, #96]	; 0x60
   1707c:	ldr	r0, [sp, #12]
   17080:	str	r6, [r0]
   17084:	str	r6, [r0, #4]
   17088:	add	r0, sp, #24
   1708c:	strb	r6, [sp, #36]	; 0x24
   17090:	bl	178b8 <__assert_fail@plt+0x5c0c>
   17094:	ldrb	r0, [sp, #48]	; 0x30
   17098:	cmp	r0, #0
   1709c:	beq	170ac <__assert_fail@plt+0x5400>
   170a0:	ldr	r0, [sp, #52]	; 0x34
   170a4:	cmp	r0, #0
   170a8:	beq	17348 <__assert_fail@plt+0x569c>
   170ac:	strb	r6, [sp, #36]	; 0x24
   170b0:	ldr	r0, [sp, #40]	; 0x28
   170b4:	ldr	r1, [sp, #44]	; 0x2c
   170b8:	add	r0, r0, r1
   170bc:	str	r0, [sp, #40]	; 0x28
   170c0:	add	r0, sp, #24
   170c4:	bl	178b8 <__assert_fail@plt+0x5c0c>
   170c8:	ldrb	r0, [sp, #48]	; 0x30
   170cc:	cmp	r0, #0
   170d0:	beq	170e0 <__assert_fail@plt+0x5434>
   170d4:	ldr	r0, [sp, #52]	; 0x34
   170d8:	cmp	r0, #0
   170dc:	beq	17330 <__assert_fail@plt+0x5684>
   170e0:	add	r7, r4, #2
   170e4:	add	r0, sp, #80	; 0x50
   170e8:	bl	178b8 <__assert_fail@plt+0x5c0c>
   170ec:	ldr	r0, [sp, #108]	; 0x6c
   170f0:	ldrb	r1, [sp, #104]	; 0x68
   170f4:	cmp	r0, #0
   170f8:	bne	17104 <__assert_fail@plt+0x5458>
   170fc:	cmp	r1, #0
   17100:	bne	17320 <__assert_fail@plt+0x5674>
   17104:	cmp	r1, #0
   17108:	ldrbne	r1, [sp, #48]	; 0x30
   1710c:	cmpne	r1, #0
   17110:	bne	1714c <__assert_fail@plt+0x54a0>
   17114:	ldr	r4, [sp, #100]	; 0x64
   17118:	ldr	r0, [sp, #44]	; 0x2c
   1711c:	cmp	r4, r0
   17120:	bne	171ac <__assert_fail@plt+0x5500>
   17124:	ldr	r8, [sp, #40]	; 0x28
   17128:	ldr	r9, [sp, #96]	; 0x60
   1712c:	mov	r2, r4
   17130:	mov	r0, r9
   17134:	mov	r1, r8
   17138:	bl	11aa8 <bcmp@plt>
   1713c:	cmp	r0, #0
   17140:	mov	r0, r4
   17144:	beq	17168 <__assert_fail@plt+0x54bc>
   17148:	b	171ac <__assert_fail@plt+0x5500>
   1714c:	ldr	r1, [sp, #52]	; 0x34
   17150:	cmp	r0, r1
   17154:	bne	171ac <__assert_fail@plt+0x5500>
   17158:	ldr	r8, [sp, #40]	; 0x28
   1715c:	ldr	r4, [sp, #44]	; 0x2c
   17160:	ldr	r9, [sp, #96]	; 0x60
   17164:	ldr	r0, [sp, #100]	; 0x64
   17168:	mov	r1, #0
   1716c:	add	r0, r9, r0
   17170:	strb	r1, [sp, #92]	; 0x5c
   17174:	str	r0, [sp, #96]	; 0x60
   17178:	add	r0, r8, r4
   1717c:	strb	r1, [sp, #36]	; 0x24
   17180:	str	r0, [sp, #40]	; 0x28
   17184:	add	r0, sp, #24
   17188:	bl	178b8 <__assert_fail@plt+0x5c0c>
   1718c:	ldrb	r0, [sp, #48]	; 0x30
   17190:	add	r7, r7, #1
   17194:	cmp	r0, #0
   17198:	beq	170e4 <__assert_fail@plt+0x5438>
   1719c:	ldr	r0, [sp, #52]	; 0x34
   171a0:	cmp	r0, #0
   171a4:	bne	170e4 <__assert_fail@plt+0x5438>
   171a8:	b	17330 <__assert_fail@plt+0x5684>
   171ac:	ldr	r8, [sp, #4]
   171b0:	ldr	r9, [sp]
   171b4:	mov	r6, #0
   171b8:	mov	r4, #0
   171bc:	add	r9, r9, #1
   171c0:	strb	r4, [sp, #148]	; 0x94
   171c4:	ldr	r0, [sp, #152]	; 0x98
   171c8:	ldr	r1, [sp, #156]	; 0x9c
   171cc:	add	r0, r0, r1
   171d0:	str	r0, [sp, #152]	; 0x98
   171d4:	add	r0, sp, #136	; 0x88
   171d8:	bl	178b8 <__assert_fail@plt+0x5c0c>
   171dc:	ldrb	r0, [sp, #160]	; 0xa0
   171e0:	ldr	r1, [sp, #20]
   171e4:	cmp	r0, #0
   171e8:	beq	16f00 <__assert_fail@plt+0x5254>
   171ec:	ldr	r0, [sp, #164]	; 0xa4
   171f0:	cmp	r0, #0
   171f4:	bne	16f00 <__assert_fail@plt+0x5254>
   171f8:	b	17324 <__assert_fail@plt+0x5678>
   171fc:	ldrb	r5, [r6]
   17200:	cmp	r5, #0
   17204:	beq	17318 <__assert_fail@plt+0x566c>
   17208:	ldrb	r9, [sl]
   1720c:	cmp	r9, #0
   17210:	beq	17320 <__assert_fail@plt+0x5674>
   17214:	mov	lr, #1
   17218:	mov	ip, #0
   1721c:	mov	r3, r6
   17220:	mov	r7, #0
   17224:	mov	r8, #0
   17228:	add	r0, r8, r8, lsl #2
   1722c:	cmp	r7, r0
   17230:	bcc	172c0 <__assert_fail@plt+0x5614>
   17234:	tst	lr, #1
   17238:	beq	172c0 <__assert_fail@plt+0x5614>
   1723c:	cmp	r8, #10
   17240:	bcc	172c0 <__assert_fail@plt+0x5614>
   17244:	cmp	r3, #0
   17248:	beq	17288 <__assert_fail@plt+0x55dc>
   1724c:	sub	r1, r7, ip
   17250:	mov	r0, r3
   17254:	str	r7, [sp, #20]
   17258:	mov	r7, r5
   1725c:	mov	r4, lr
   17260:	mov	r5, r3
   17264:	bl	11b80 <strnlen@plt>
   17268:	mov	r3, r5
   1726c:	mov	r5, r7
   17270:	ldr	r7, [sp, #20]
   17274:	mov	lr, r4
   17278:	ldrb	r0, [r3, r0]!
   1727c:	mov	ip, r7
   17280:	cmp	r0, #0
   17284:	bne	172c0 <__assert_fail@plt+0x5614>
   17288:	mov	r0, r6
   1728c:	mov	r4, ip
   17290:	bl	11ac0 <strlen@plt>
   17294:	mov	r2, r0
   17298:	mov	r0, sl
   1729c:	mov	r1, r6
   172a0:	sub	r3, fp, #88	; 0x58
   172a4:	bl	1775c <__assert_fail@plt+0x5ab0>
   172a8:	cmp	r0, #0
   172ac:	bne	17338 <__assert_fail@plt+0x568c>
   172b0:	ldrb	r9, [sl]
   172b4:	mov	lr, #0
   172b8:	mov	r3, #0
   172bc:	mov	ip, r4
   172c0:	uxtb	r0, r9
   172c4:	cmp	r0, r5
   172c8:	bne	172fc <__assert_fail@plt+0x5650>
   172cc:	mov	r0, #1
   172d0:	ldrb	r1, [r6, r0]
   172d4:	cmp	r1, #0
   172d8:	beq	17318 <__assert_fail@plt+0x566c>
   172dc:	ldrb	r2, [sl, r0]
   172e0:	cmp	r2, #0
   172e4:	beq	17320 <__assert_fail@plt+0x5674>
   172e8:	add	r0, r0, #1
   172ec:	cmp	r2, r1
   172f0:	beq	172d0 <__assert_fail@plt+0x5624>
   172f4:	add	r7, r7, r0
   172f8:	b	17300 <__assert_fail@plt+0x5654>
   172fc:	add	r7, r7, #1
   17300:	ldrb	r9, [sl, #1]!
   17304:	add	r8, r8, #1
   17308:	mov	r4, #0
   1730c:	cmp	r9, #0
   17310:	bne	17228 <__assert_fail@plt+0x557c>
   17314:	b	17324 <__assert_fail@plt+0x5678>
   17318:	mov	r4, sl
   1731c:	b	17324 <__assert_fail@plt+0x5678>
   17320:	mov	r4, #0
   17324:	mov	r0, r4
   17328:	sub	sp, fp, #28
   1732c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17330:	ldr	r4, [sp, #152]	; 0x98
   17334:	b	17324 <__assert_fail@plt+0x5678>
   17338:	ldr	r4, [fp, #-88]	; 0xffffffa8
   1733c:	b	17324 <__assert_fail@plt+0x5678>
   17340:	ldr	r4, [sp, #80]	; 0x50
   17344:	b	17324 <__assert_fail@plt+0x5678>
   17348:	bl	11c70 <abort@plt>
   1734c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17350:	add	fp, sp, #28
   17354:	sub	sp, sp, #132	; 0x84
   17358:	mov	r4, r0
   1735c:	mov	r0, r1
   17360:	mov	r8, r2
   17364:	mov	r7, r1
   17368:	bl	16d78 <__assert_fail@plt+0x50cc>
   1736c:	mov	sl, r0
   17370:	movw	r0, #47662	; 0xba2e
   17374:	mov	r5, #0
   17378:	movt	r0, #744	; 0x2e8
   1737c:	cmp	sl, r0
   17380:	bhi	1774c <__assert_fail@plt+0x5aa0>
   17384:	mov	r0, #44	; 0x2c
   17388:	mul	r0, sl, r0
   1738c:	cmp	r0, #4016	; 0xfb0
   17390:	bhi	173b8 <__assert_fail@plt+0x570c>
   17394:	add	r0, r0, #22
   17398:	bic	r0, r0, #7
   1739c:	sub	r0, sp, r0
   173a0:	add	r1, r0, #15
   173a4:	bic	r9, r1, #15
   173a8:	mov	sp, r0
   173ac:	cmp	r9, #0
   173b0:	bne	173c8 <__assert_fail@plt+0x571c>
   173b4:	b	1774c <__assert_fail@plt+0x5aa0>
   173b8:	bl	2f48c <__assert_fail@plt+0x1d7e0>
   173bc:	mov	r9, r0
   173c0:	cmp	r9, #0
   173c4:	beq	1774c <__assert_fail@plt+0x5aa0>
   173c8:	sub	r6, fp, #88	; 0x58
   173cc:	str	r4, [fp, #-160]	; 0xffffff60
   173d0:	mov	r4, #0
   173d4:	mov	r0, r6
   173d8:	str	r4, [fp, #-80]	; 0xffffffb0
   173dc:	str	r4, [fp, #-84]	; 0xffffffac
   173e0:	strb	r4, [fp, #-76]	; 0xffffffb4
   173e4:	strb	r4, [fp, #-88]	; 0xffffffa8
   173e8:	str	r7, [fp, #-72]	; 0xffffffb8
   173ec:	bl	178b8 <__assert_fail@plt+0x5c0c>
   173f0:	add	r0, sl, sl, lsl #2
   173f4:	add	r3, r9, r0, lsl #3
   173f8:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   173fc:	str	r3, [fp, #-148]	; 0xffffff6c
   17400:	cmp	r0, #0
   17404:	beq	17414 <__assert_fail@plt+0x5768>
   17408:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1740c:	cmp	r0, #0
   17410:	beq	17498 <__assert_fail@plt+0x57ec>
   17414:	add	r7, r9, #16
   17418:	add	r5, r6, #32
   1741c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17420:	cmp	r0, r5
   17424:	bne	1743c <__assert_fail@plt+0x5790>
   17428:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1742c:	mov	r0, r7
   17430:	mov	r1, r5
   17434:	bl	118ec <memcpy@plt>
   17438:	mov	r0, r7
   1743c:	str	r0, [r7, #-16]
   17440:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17444:	str	r0, [r7, #-12]
   17448:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1744c:	strb	r0, [r7, #-8]
   17450:	cmp	r0, #0
   17454:	ldrne	r0, [fp, #-60]	; 0xffffffc4
   17458:	strne	r0, [r7, #-4]
   1745c:	strb	r4, [fp, #-76]	; 0xffffffb4
   17460:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17464:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17468:	add	r0, r0, r1
   1746c:	str	r0, [fp, #-72]	; 0xffffffb8
   17470:	mov	r0, r6
   17474:	bl	178b8 <__assert_fail@plt+0x5c0c>
   17478:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   1747c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17480:	ldr	r3, [fp, #-148]	; 0xffffff6c
   17484:	add	r7, r7, #40	; 0x28
   17488:	cmp	r1, #0
   1748c:	beq	1741c <__assert_fail@plt+0x5770>
   17490:	cmp	r0, #0
   17494:	bne	1741c <__assert_fail@plt+0x5770>
   17498:	mov	r0, #1
   1749c:	cmp	sl, #3
   174a0:	str	r8, [fp, #-156]	; 0xffffff64
   174a4:	str	sl, [fp, #-152]	; 0xffffff68
   174a8:	str	r0, [r3, #4]
   174ac:	bcc	17578 <__assert_fail@plt+0x58cc>
   174b0:	mov	r4, #2
   174b4:	mov	r5, #0
   174b8:	b	174d8 <__assert_fail@plt+0x582c>
   174bc:	mov	r5, #0
   174c0:	mov	r0, r4
   174c4:	str	r0, [r3, r4, lsl #2]
   174c8:	ldr	r0, [fp, #-152]	; 0xffffff68
   174cc:	add	r4, r4, #1
   174d0:	cmp	r4, r0
   174d4:	beq	17578 <__assert_fail@plt+0x58cc>
   174d8:	add	r0, r4, r4, lsl #2
   174dc:	add	r0, r9, r0, lsl #3
   174e0:	ldrb	r8, [r0, #-32]	; 0xffffffe0
   174e4:	sub	sl, r0, #40	; 0x28
   174e8:	sub	r6, r0, #36	; 0x24
   174ec:	sub	r7, r0, #28
   174f0:	cmp	r8, #0
   174f4:	beq	17520 <__assert_fail@plt+0x5874>
   174f8:	add	r0, r5, r5, lsl #2
   174fc:	add	r0, r9, r0, lsl #3
   17500:	ldrb	r1, [r0, #8]
   17504:	cmp	r1, #0
   17508:	beq	17520 <__assert_fail@plt+0x5874>
   1750c:	ldr	r0, [r0, #12]
   17510:	ldr	r1, [r7]
   17514:	cmp	r1, r0
   17518:	bne	17550 <__assert_fail@plt+0x58a4>
   1751c:	b	1756c <__assert_fail@plt+0x58c0>
   17520:	add	r0, r5, r5, lsl #2
   17524:	ldr	r2, [r6]
   17528:	add	r1, r9, r0, lsl #3
   1752c:	ldr	r1, [r1, #4]
   17530:	cmp	r2, r1
   17534:	bne	17550 <__assert_fail@plt+0x58a4>
   17538:	ldr	r1, [r9, r0, lsl #3]
   1753c:	ldr	r0, [sl]
   17540:	bl	11aa8 <bcmp@plt>
   17544:	ldr	r3, [fp, #-148]	; 0xffffff6c
   17548:	cmp	r0, #0
   1754c:	beq	1756c <__assert_fail@plt+0x58c0>
   17550:	cmp	r5, #0
   17554:	beq	174bc <__assert_fail@plt+0x5810>
   17558:	ldr	r0, [r3, r5, lsl #2]
   1755c:	sub	r5, r5, r0
   17560:	cmp	r8, #0
   17564:	bne	174f8 <__assert_fail@plt+0x584c>
   17568:	b	17520 <__assert_fail@plt+0x5874>
   1756c:	add	r5, r5, #1
   17570:	sub	r0, r4, r5
   17574:	b	174c4 <__assert_fail@plt+0x5818>
   17578:	ldr	r8, [fp, #-156]	; 0xffffff64
   1757c:	ldr	r0, [fp, #-160]	; 0xffffff60
   17580:	mov	r6, #0
   17584:	str	r6, [r8]
   17588:	str	r6, [fp, #-80]	; 0xffffffb0
   1758c:	str	r6, [fp, #-84]	; 0xffffffac
   17590:	strb	r6, [fp, #-76]	; 0xffffffb4
   17594:	strb	r6, [fp, #-88]	; 0xffffffa8
   17598:	str	r6, [fp, #-136]	; 0xffffff78
   1759c:	str	r6, [fp, #-140]	; 0xffffff74
   175a0:	str	r0, [fp, #-128]	; 0xffffff80
   175a4:	str	r0, [fp, #-72]	; 0xffffffb8
   175a8:	sub	r0, fp, #144	; 0x90
   175ac:	strb	r6, [fp, #-132]	; 0xffffff7c
   175b0:	strb	r6, [fp, #-144]	; 0xffffff70
   175b4:	bl	178b8 <__assert_fail@plt+0x5c0c>
   175b8:	ldr	r0, [fp, #-116]	; 0xffffff8c
   175bc:	ldrb	r1, [fp, #-120]	; 0xffffff88
   175c0:	cmp	r0, #0
   175c4:	bne	175d0 <__assert_fail@plt+0x5924>
   175c8:	cmp	r1, #0
   175cc:	bne	17740 <__assert_fail@plt+0x5a94>
   175d0:	clz	r1, r1
   175d4:	sub	r4, fp, #88	; 0x58
   175d8:	mov	sl, #0
   175dc:	lsr	r1, r1, #5
   175e0:	add	r2, sl, sl, lsl #2
   175e4:	tst	r1, #1
   175e8:	add	r3, r9, r2, lsl #3
   175ec:	bne	17614 <__assert_fail@plt+0x5968>
   175f0:	ldrb	r1, [r3, #8]
   175f4:	cmp	r1, #0
   175f8:	beq	17614 <__assert_fail@plt+0x5968>
   175fc:	ldr	r1, [r3, #12]
   17600:	cmp	r1, r0
   17604:	bne	17640 <__assert_fail@plt+0x5994>
   17608:	ldr	r7, [fp, #-128]	; 0xffffff80
   1760c:	ldr	r5, [fp, #-124]	; 0xffffff84
   17610:	b	176a0 <__assert_fail@plt+0x59f4>
   17614:	ldr	r5, [r3, #4]
   17618:	ldr	r0, [fp, #-124]	; 0xffffff84
   1761c:	cmp	r5, r0
   17620:	bne	17640 <__assert_fail@plt+0x5994>
   17624:	ldr	r0, [r9, r2, lsl #3]
   17628:	ldr	r7, [fp, #-128]	; 0xffffff80
   1762c:	mov	r2, r5
   17630:	mov	r1, r7
   17634:	bl	11aa8 <bcmp@plt>
   17638:	cmp	r0, #0
   1763c:	beq	176a0 <__assert_fail@plt+0x59f4>
   17640:	cmp	sl, #0
   17644:	beq	176c0 <__assert_fail@plt+0x5a14>
   17648:	ldr	r0, [fp, #-148]	; 0xffffff6c
   1764c:	ldr	r5, [r0, sl, lsl #2]
   17650:	sub	sl, sl, r5
   17654:	cmp	r5, #0
   17658:	bne	1767c <__assert_fail@plt+0x59d0>
   1765c:	b	1770c <__assert_fail@plt+0x5a60>
   17660:	strb	r6, [fp, #-76]	; 0xffffffb4
   17664:	subs	r5, r5, #1
   17668:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1766c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17670:	add	r0, r0, r1
   17674:	str	r0, [fp, #-72]	; 0xffffffb8
   17678:	beq	1770c <__assert_fail@plt+0x5a60>
   1767c:	mov	r0, r4
   17680:	bl	178b8 <__assert_fail@plt+0x5c0c>
   17684:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   17688:	cmp	r0, #0
   1768c:	beq	17660 <__assert_fail@plt+0x59b4>
   17690:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17694:	cmp	r0, #0
   17698:	bne	17660 <__assert_fail@plt+0x59b4>
   1769c:	b	17758 <__assert_fail@plt+0x5aac>
   176a0:	add	r0, r7, r5
   176a4:	strb	r6, [fp, #-132]	; 0xffffff7c
   176a8:	add	sl, sl, #1
   176ac:	str	r0, [fp, #-128]	; 0xffffff80
   176b0:	ldr	r0, [fp, #-152]	; 0xffffff68
   176b4:	cmp	sl, r0
   176b8:	bne	1770c <__assert_fail@plt+0x5a60>
   176bc:	b	17738 <__assert_fail@plt+0x5a8c>
   176c0:	mov	r0, r4
   176c4:	bl	178b8 <__assert_fail@plt+0x5c0c>
   176c8:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   176cc:	cmp	r0, #0
   176d0:	beq	176e0 <__assert_fail@plt+0x5a34>
   176d4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   176d8:	cmp	r0, #0
   176dc:	beq	17758 <__assert_fail@plt+0x5aac>
   176e0:	mov	sl, #0
   176e4:	strb	sl, [fp, #-76]	; 0xffffffb4
   176e8:	strb	sl, [fp, #-132]	; 0xffffff7c
   176ec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   176f0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   176f4:	add	r0, r0, r1
   176f8:	ldr	r1, [fp, #-124]	; 0xffffff84
   176fc:	str	r0, [fp, #-72]	; 0xffffffb8
   17700:	ldr	r0, [fp, #-128]	; 0xffffff80
   17704:	add	r0, r0, r1
   17708:	str	r0, [fp, #-128]	; 0xffffff80
   1770c:	sub	r0, fp, #144	; 0x90
   17710:	bl	178b8 <__assert_fail@plt+0x5c0c>
   17714:	ldrb	r2, [fp, #-120]	; 0xffffff88
   17718:	clz	r0, r2
   1771c:	lsr	r1, r0, #5
   17720:	ldr	r0, [fp, #-116]	; 0xffffff8c
   17724:	cmp	r0, #0
   17728:	bne	175e0 <__assert_fail@plt+0x5934>
   1772c:	cmp	r2, #0
   17730:	beq	175e0 <__assert_fail@plt+0x5934>
   17734:	b	17740 <__assert_fail@plt+0x5a94>
   17738:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1773c:	str	r0, [r8]
   17740:	mov	r0, r9
   17744:	bl	2f4fc <__assert_fail@plt+0x1d850>
   17748:	mov	r5, #1
   1774c:	mov	r0, r5
   17750:	sub	sp, fp, #28
   17754:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17758:	bl	11c70 <abort@plt>
   1775c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17760:	add	fp, sp, #24
   17764:	mov	r4, #0
   17768:	cmn	r2, #-536870911	; 0xe0000001
   1776c:	bhi	178ac <__assert_fail@plt+0x5c00>
   17770:	mov	r7, r0
   17774:	lsl	r0, r2, #2
   17778:	mov	r8, r3
   1777c:	mov	r5, r2
   17780:	mov	r6, r1
   17784:	cmp	r0, #4016	; 0xfb0
   17788:	bhi	177b0 <__assert_fail@plt+0x5b04>
   1778c:	add	r0, r0, #22
   17790:	bic	r0, r0, #7
   17794:	sub	r1, sp, r0
   17798:	add	r0, r1, #15
   1779c:	bic	r0, r0, #15
   177a0:	mov	sp, r1
   177a4:	cmp	r0, #0
   177a8:	bne	177bc <__assert_fail@plt+0x5b10>
   177ac:	b	178ac <__assert_fail@plt+0x5c00>
   177b0:	bl	2f48c <__assert_fail@plt+0x1d7e0>
   177b4:	cmp	r0, #0
   177b8:	beq	178ac <__assert_fail@plt+0x5c00>
   177bc:	mov	r1, #1
   177c0:	cmp	r5, #3
   177c4:	str	r1, [r0, #4]
   177c8:	bcc	17830 <__assert_fail@plt+0x5b84>
   177cc:	mov	r1, #2
   177d0:	mov	r2, #0
   177d4:	b	177f0 <__assert_fail@plt+0x5b44>
   177d8:	add	r2, r2, #1
   177dc:	sub	r3, r1, r2
   177e0:	str	r3, [r0, r1, lsl #2]
   177e4:	add	r1, r1, #1
   177e8:	cmp	r1, r5
   177ec:	beq	17830 <__assert_fail@plt+0x5b84>
   177f0:	add	r3, r1, r6
   177f4:	ldrb	r4, [r6, r2]
   177f8:	ldrb	r3, [r3, #-1]
   177fc:	cmp	r3, r4
   17800:	beq	177d8 <__assert_fail@plt+0x5b2c>
   17804:	cmp	r2, #0
   17808:	beq	17824 <__assert_fail@plt+0x5b78>
   1780c:	ldr	r4, [r0, r2, lsl #2]
   17810:	sub	r2, r2, r4
   17814:	ldrb	r4, [r6, r2]
   17818:	cmp	r3, r4
   1781c:	bne	17804 <__assert_fail@plt+0x5b58>
   17820:	b	177d8 <__assert_fail@plt+0x5b2c>
   17824:	mov	r2, #0
   17828:	mov	r3, r1
   1782c:	b	177e0 <__assert_fail@plt+0x5b34>
   17830:	mov	r1, #0
   17834:	str	r1, [r8]
   17838:	ldrb	r3, [r7]
   1783c:	cmp	r3, #0
   17840:	beq	178a4 <__assert_fail@plt+0x5bf8>
   17844:	mov	r2, r7
   17848:	b	17864 <__assert_fail@plt+0x5bb8>
   1784c:	add	r7, r7, #1
   17850:	add	r2, r2, #1
   17854:	mov	r1, #0
   17858:	ldrb	r3, [r7]
   1785c:	cmp	r3, #0
   17860:	beq	178a4 <__assert_fail@plt+0x5bf8>
   17864:	ldrb	r4, [r6, r1]
   17868:	uxtb	r3, r3
   1786c:	cmp	r4, r3
   17870:	bne	17888 <__assert_fail@plt+0x5bdc>
   17874:	add	r1, r1, #1
   17878:	cmp	r1, r5
   1787c:	beq	178a0 <__assert_fail@plt+0x5bf4>
   17880:	add	r7, r7, #1
   17884:	b	17858 <__assert_fail@plt+0x5bac>
   17888:	cmp	r1, #0
   1788c:	beq	1784c <__assert_fail@plt+0x5ba0>
   17890:	ldr	r3, [r0, r1, lsl #2]
   17894:	sub	r1, r1, r3
   17898:	add	r2, r2, r3
   1789c:	b	17858 <__assert_fail@plt+0x5bac>
   178a0:	str	r2, [r8]
   178a4:	bl	2f4fc <__assert_fail@plt+0x1d850>
   178a8:	mov	r4, #1
   178ac:	mov	r0, r4
   178b0:	sub	sp, fp, #24
   178b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   178b8:	push	{r4, r5, r6, r7, fp, lr}
   178bc:	add	fp, sp, #16
   178c0:	mov	r4, r0
   178c4:	ldrb	r0, [r0, #12]
   178c8:	cmp	r0, #0
   178cc:	popne	{r4, r5, r6, r7, fp, pc}
   178d0:	ldrb	r0, [r4]
   178d4:	ldr	r5, [r4, #16]
   178d8:	cmp	r0, #0
   178dc:	beq	17938 <__assert_fail@plt+0x5c8c>
   178e0:	bl	119ac <__ctype_get_mb_cur_max@plt>
   178e4:	mov	r1, r0
   178e8:	mov	r0, r5
   178ec:	bl	1987c <__assert_fail@plt+0x7bd0>
   178f0:	add	r6, r4, #4
   178f4:	add	r7, r4, #28
   178f8:	mov	r2, r0
   178fc:	mov	r1, r5
   17900:	mov	r0, r7
   17904:	mov	r3, r6
   17908:	bl	1b5e8 <__assert_fail@plt+0x993c>
   1790c:	cmn	r0, #2
   17910:	str	r0, [r4, #20]
   17914:	beq	179b4 <__assert_fail@plt+0x5d08>
   17918:	cmp	r0, #0
   1791c:	beq	17970 <__assert_fail@plt+0x5cc4>
   17920:	cmn	r0, #1
   17924:	bne	17994 <__assert_fail@plt+0x5ce8>
   17928:	mov	r0, #0
   1792c:	strb	r0, [r4, #24]
   17930:	mov	r0, #1
   17934:	b	179c4 <__assert_fail@plt+0x5d18>
   17938:	ldrb	r0, [r5]
   1793c:	movw	r2, #5768	; 0x1688
   17940:	movt	r2, #3
   17944:	ubfx	r1, r0, #5, #3
   17948:	ldr	r1, [r2, r1, lsl #2]
   1794c:	and	r2, r0, #31
   17950:	mov	r0, #1
   17954:	tst	r1, r0, lsl r2
   17958:	beq	179d4 <__assert_fail@plt+0x5d28>
   1795c:	str	r0, [r4, #20]
   17960:	ldrb	r1, [r5]
   17964:	strb	r0, [r4, #24]
   17968:	str	r1, [r4, #28]
   1796c:	b	179c8 <__assert_fail@plt+0x5d1c>
   17970:	mov	r0, #1
   17974:	str	r0, [r4, #20]
   17978:	ldr	r0, [r4, #16]
   1797c:	ldrb	r0, [r0]
   17980:	cmp	r0, #0
   17984:	bne	179f0 <__assert_fail@plt+0x5d44>
   17988:	ldr	r0, [r7]
   1798c:	cmp	r0, #0
   17990:	bne	17a08 <__assert_fail@plt+0x5d5c>
   17994:	mov	r0, #1
   17998:	strb	r0, [r4, #24]
   1799c:	mov	r0, r6
   179a0:	bl	1191c <mbsinit@plt>
   179a4:	cmp	r0, #0
   179a8:	movne	r0, #0
   179ac:	strbne	r0, [r4]
   179b0:	b	179c8 <__assert_fail@plt+0x5d1c>
   179b4:	ldr	r0, [r4, #16]
   179b8:	bl	11ac0 <strlen@plt>
   179bc:	mov	r1, #0
   179c0:	strb	r1, [r4, #24]
   179c4:	str	r0, [r4, #20]
   179c8:	mov	r0, #1
   179cc:	strb	r0, [r4, #12]
   179d0:	pop	{r4, r5, r6, r7, fp, pc}
   179d4:	add	r0, r4, #4
   179d8:	bl	1191c <mbsinit@plt>
   179dc:	cmp	r0, #0
   179e0:	beq	17a20 <__assert_fail@plt+0x5d74>
   179e4:	mov	r0, #1
   179e8:	strb	r0, [r4]
   179ec:	b	178e0 <__assert_fail@plt+0x5c34>
   179f0:	movw	r0, #3783	; 0xec7
   179f4:	movw	r1, #3723	; 0xe8b
   179f8:	movw	r3, #3735	; 0xe97
   179fc:	mov	r2, #171	; 0xab
   17a00:	movt	r0, #3
   17a04:	b	17a34 <__assert_fail@plt+0x5d88>
   17a08:	movw	r0, #3806	; 0xede
   17a0c:	movw	r1, #3723	; 0xe8b
   17a10:	movw	r3, #3735	; 0xe97
   17a14:	mov	r2, #172	; 0xac
   17a18:	movt	r0, #3
   17a1c:	b	17a34 <__assert_fail@plt+0x5d88>
   17a20:	movw	r0, #3700	; 0xe74
   17a24:	movw	r1, #3723	; 0xe8b
   17a28:	movw	r3, #3735	; 0xe97
   17a2c:	mov	r2, #143	; 0x8f
   17a30:	movt	r0, #3
   17a34:	movt	r1, #3
   17a38:	movt	r3, #3
   17a3c:	bl	11cac <__assert_fail@plt>
   17a40:	ldr	r2, [r0, #16]
   17a44:	add	r1, r2, r1
   17a48:	str	r1, [r0, #16]
   17a4c:	bx	lr
   17a50:	push	{r4, r5, r6, sl, fp, lr}
   17a54:	add	fp, sp, #16
   17a58:	mov	r5, r1
   17a5c:	ldrb	r1, [r1]
   17a60:	mov	r4, r0
   17a64:	strb	r1, [r0], #4
   17a68:	cmp	r1, #0
   17a6c:	beq	17a7c <__assert_fail@plt+0x5dd0>
   17a70:	ldmib	r5, {r1, r2}
   17a74:	stm	r0, {r1, r2}
   17a78:	b	17a88 <__assert_fail@plt+0x5ddc>
   17a7c:	mov	r1, #0
   17a80:	str	r1, [r0]
   17a84:	str	r1, [r0, #4]
   17a88:	ldrb	r0, [r5, #12]
   17a8c:	strb	r0, [r4, #12]
   17a90:	add	r0, r5, #32
   17a94:	ldr	r1, [r5, #16]
   17a98:	cmp	r1, r0
   17a9c:	beq	17aa8 <__assert_fail@plt+0x5dfc>
   17aa0:	mov	r6, r1
   17aa4:	b	17ab8 <__assert_fail@plt+0x5e0c>
   17aa8:	ldr	r2, [r5, #20]
   17aac:	add	r6, r4, #32
   17ab0:	mov	r0, r6
   17ab4:	bl	118ec <memcpy@plt>
   17ab8:	str	r6, [r4, #16]
   17abc:	ldr	r0, [r5, #20]
   17ac0:	str	r0, [r4, #20]
   17ac4:	ldrb	r0, [r5, #24]
   17ac8:	strb	r0, [r4, #24]
   17acc:	cmp	r0, #0
   17ad0:	ldrne	r0, [r5, #28]
   17ad4:	strne	r0, [r4, #28]
   17ad8:	pop	{r4, r5, r6, sl, fp, pc}
   17adc:	push	{r4, r5, fp, lr}
   17ae0:	add	fp, sp, #8
   17ae4:	cmp	r0, #0
   17ae8:	beq	17b7c <__assert_fail@plt+0x5ed0>
   17aec:	mov	r1, #47	; 0x2f
   17af0:	mov	r4, r0
   17af4:	bl	11bb0 <strrchr@plt>
   17af8:	cmp	r0, #0
   17afc:	mov	r5, r4
   17b00:	addne	r5, r0, #1
   17b04:	sub	r0, r5, r4
   17b08:	cmp	r0, #7
   17b0c:	blt	17b60 <__assert_fail@plt+0x5eb4>
   17b10:	movw	r1, #3880	; 0xf28
   17b14:	sub	r0, r5, #7
   17b18:	mov	r2, #7
   17b1c:	movt	r1, #3
   17b20:	bl	11c64 <strncmp@plt>
   17b24:	cmp	r0, #0
   17b28:	bne	17b60 <__assert_fail@plt+0x5eb4>
   17b2c:	movw	r1, #3888	; 0xf30
   17b30:	mov	r0, r5
   17b34:	mov	r2, #3
   17b38:	movt	r1, #3
   17b3c:	bl	11c64 <strncmp@plt>
   17b40:	cmp	r0, #0
   17b44:	beq	17b50 <__assert_fail@plt+0x5ea4>
   17b48:	mov	r4, r5
   17b4c:	b	17b60 <__assert_fail@plt+0x5eb4>
   17b50:	movw	r0, #8704	; 0x2200
   17b54:	add	r4, r5, #3
   17b58:	movt	r0, #4
   17b5c:	str	r4, [r0]
   17b60:	movw	r0, #8708	; 0x2204
   17b64:	movt	r0, #4
   17b68:	str	r4, [r0]
   17b6c:	movw	r0, #8852	; 0x2294
   17b70:	movt	r0, #4
   17b74:	str	r4, [r0]
   17b78:	pop	{r4, r5, fp, pc}
   17b7c:	movw	r0, #8720	; 0x2210
   17b80:	mov	r1, #55	; 0x37
   17b84:	mov	r2, #1
   17b88:	movt	r0, #4
   17b8c:	ldr	r3, [r0]
   17b90:	movw	r0, #3824	; 0xef0
   17b94:	movt	r0, #3
   17b98:	bl	11994 <fwrite@plt>
   17b9c:	bl	11c70 <abort@plt>
   17ba0:	push	{r4, r5, r6, sl, fp, lr}
   17ba4:	add	fp, sp, #16
   17ba8:	mov	r4, r0
   17bac:	movw	r0, #8856	; 0x2298
   17bb0:	movt	r0, #4
   17bb4:	cmp	r4, #0
   17bb8:	moveq	r4, r0
   17bbc:	bl	11af0 <__errno_location@plt>
   17bc0:	ldr	r6, [r0]
   17bc4:	mov	r5, r0
   17bc8:	mov	r0, r4
   17bcc:	mov	r1, #48	; 0x30
   17bd0:	bl	1a3e0 <__assert_fail@plt+0x8734>
   17bd4:	str	r6, [r5]
   17bd8:	pop	{r4, r5, r6, sl, fp, pc}
   17bdc:	movw	r1, #8856	; 0x2298
   17be0:	cmp	r0, #0
   17be4:	movt	r1, #4
   17be8:	movne	r1, r0
   17bec:	ldr	r0, [r1]
   17bf0:	bx	lr
   17bf4:	movw	r2, #8856	; 0x2298
   17bf8:	cmp	r0, #0
   17bfc:	movt	r2, #4
   17c00:	movne	r2, r0
   17c04:	str	r1, [r2]
   17c08:	bx	lr
   17c0c:	movw	r3, #8856	; 0x2298
   17c10:	cmp	r0, #0
   17c14:	and	r2, r2, #1
   17c18:	movt	r3, #4
   17c1c:	movne	r3, r0
   17c20:	ubfx	r0, r1, #5, #3
   17c24:	and	r1, r1, #31
   17c28:	add	ip, r3, r0, lsl #2
   17c2c:	mov	r0, #1
   17c30:	ldr	r3, [ip, #8]
   17c34:	and	r0, r0, r3, lsr r1
   17c38:	eor	r2, r0, r2
   17c3c:	eor	r1, r3, r2, lsl r1
   17c40:	str	r1, [ip, #8]
   17c44:	bx	lr
   17c48:	movw	r2, #8856	; 0x2298
   17c4c:	cmp	r0, #0
   17c50:	movt	r2, #4
   17c54:	movne	r2, r0
   17c58:	ldr	r0, [r2, #4]
   17c5c:	str	r1, [r2, #4]
   17c60:	bx	lr
   17c64:	push	{fp, lr}
   17c68:	mov	fp, sp
   17c6c:	movw	r3, #8856	; 0x2298
   17c70:	cmp	r0, #0
   17c74:	movt	r3, #4
   17c78:	movne	r3, r0
   17c7c:	cmp	r1, #0
   17c80:	mov	r0, #10
   17c84:	cmpne	r2, #0
   17c88:	str	r0, [r3]
   17c8c:	bne	17c94 <__assert_fail@plt+0x5fe8>
   17c90:	bl	11c70 <abort@plt>
   17c94:	str	r1, [r3, #40]	; 0x28
   17c98:	str	r2, [r3, #44]	; 0x2c
   17c9c:	pop	{fp, pc}
   17ca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ca4:	add	fp, sp, #28
   17ca8:	sub	sp, sp, #20
   17cac:	mov	r7, r0
   17cb0:	ldr	r0, [fp, #8]
   17cb4:	movw	r5, #8856	; 0x2298
   17cb8:	mov	r8, r3
   17cbc:	mov	r9, r2
   17cc0:	mov	sl, r1
   17cc4:	movt	r5, #4
   17cc8:	cmp	r0, #0
   17ccc:	movne	r5, r0
   17cd0:	bl	11af0 <__errno_location@plt>
   17cd4:	ldr	r2, [r5, #40]	; 0x28
   17cd8:	ldr	r3, [r5, #44]	; 0x2c
   17cdc:	mov	r4, r0
   17ce0:	ldm	r5, {r0, r1}
   17ce4:	add	r5, r5, #8
   17ce8:	ldr	r6, [r4]
   17cec:	stm	sp, {r0, r1, r5}
   17cf0:	mov	r0, r7
   17cf4:	mov	r1, sl
   17cf8:	str	r2, [sp, #12]
   17cfc:	str	r3, [sp, #16]
   17d00:	mov	r2, r9
   17d04:	mov	r3, r8
   17d08:	bl	17d18 <__assert_fail@plt+0x606c>
   17d0c:	str	r6, [r4]
   17d10:	sub	sp, fp, #28
   17d14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d1c:	add	fp, sp, #28
   17d20:	sub	sp, sp, #156	; 0x9c
   17d24:	mov	r5, r0
   17d28:	add	r0, r2, #1
   17d2c:	mov	r6, r1
   17d30:	mov	sl, r3
   17d34:	str	r2, [fp, #-80]	; 0xffffffb0
   17d38:	str	r0, [sp, #72]	; 0x48
   17d3c:	ldr	r0, [fp, #12]
   17d40:	and	r1, r0, #1
   17d44:	str	r1, [sp, #36]	; 0x24
   17d48:	and	r1, r0, #4
   17d4c:	str	r1, [sp, #32]
   17d50:	ubfx	r9, r0, #1, #1
   17d54:	bl	119ac <__ctype_get_mb_cur_max@plt>
   17d58:	str	r0, [sp, #40]	; 0x28
   17d5c:	ldr	r0, [fp, #24]
   17d60:	ldr	r7, [fp, #8]
   17d64:	mov	r1, #0
   17d68:	str	r5, [fp, #-84]	; 0xffffffac
   17d6c:	str	r1, [fp, #-56]	; 0xffffffc8
   17d70:	mov	r1, #0
   17d74:	str	r1, [sp, #60]	; 0x3c
   17d78:	mov	r1, #1
   17d7c:	str	r1, [fp, #-48]	; 0xffffffd0
   17d80:	str	r0, [sp, #80]	; 0x50
   17d84:	ldr	r0, [fp, #20]
   17d88:	str	r0, [sp, #76]	; 0x4c
   17d8c:	mov	r0, #0
   17d90:	str	r0, [sp, #56]	; 0x38
   17d94:	mov	r0, #0
   17d98:	str	r0, [fp, #-88]	; 0xffffffa8
   17d9c:	mov	r0, #0
   17da0:	str	r0, [fp, #-72]	; 0xffffffb8
   17da4:	mov	r0, #0
   17da8:	cmp	r7, #10
   17dac:	bhi	18d40 <__assert_fail@plt+0x7094>
   17db0:	add	r1, pc, #24
   17db4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17db8:	mov	r4, r6
   17dbc:	mov	r8, #0
   17dc0:	mov	r2, #1
   17dc4:	mov	r3, #0
   17dc8:	mov	lr, sl
   17dcc:	ldr	pc, [r1, r7, lsl #2]
   17dd0:	muleq	r1, r4, lr
   17dd4:	andeq	r7, r1, r8, ror #29
   17dd8:	andeq	r7, r1, r8, lsr #29
   17ddc:	andeq	r7, r1, ip, lsl #29
   17de0:	ldrdeq	r7, [r1], -ip
   17de4:	andeq	r7, r1, r0, lsl pc
   17de8:			; <UNDEFINED> instruction: 0x00017eb8
   17dec:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   17df0:	strdeq	r7, [r1], -ip
   17df4:	strdeq	r7, [r1], -ip
   17df8:	andeq	r7, r1, r4, lsr #28
   17dfc:	movw	r0, #3970	; 0xf82
   17e00:	mov	r1, r7
   17e04:	movt	r0, #3
   17e08:	bl	19748 <__assert_fail@plt+0x7a9c>
   17e0c:	str	r0, [sp, #76]	; 0x4c
   17e10:	movw	r0, #1201	; 0x4b1
   17e14:	mov	r1, r7
   17e18:	movt	r0, #3
   17e1c:	bl	19748 <__assert_fail@plt+0x7a9c>
   17e20:	str	r0, [sp, #80]	; 0x50
   17e24:	mov	r8, #0
   17e28:	tst	r9, #1
   17e2c:	bne	17e64 <__assert_fail@plt+0x61b8>
   17e30:	ldr	r0, [sp, #76]	; 0x4c
   17e34:	ldrb	r0, [r0]
   17e38:	cmp	r0, #0
   17e3c:	beq	17e64 <__assert_fail@plt+0x61b8>
   17e40:	ldr	r1, [sp, #76]	; 0x4c
   17e44:	mov	r8, #0
   17e48:	add	r1, r1, #1
   17e4c:	cmp	r8, r4
   17e50:	strbcc	r0, [r5, r8]
   17e54:	ldrb	r0, [r1, r8]
   17e58:	add	r8, r8, #1
   17e5c:	cmp	r0, #0
   17e60:	bne	17e4c <__assert_fail@plt+0x61a0>
   17e64:	ldr	r6, [sp, #80]	; 0x50
   17e68:	mov	r0, r6
   17e6c:	bl	11ac0 <strlen@plt>
   17e70:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17e74:	str	r0, [fp, #-72]	; 0xffffffb8
   17e78:	str	r6, [fp, #-88]	; 0xffffffa8
   17e7c:	mov	r2, #1
   17e80:	mov	r3, r9
   17e84:	mov	lr, sl
   17e88:	b	17f94 <__assert_fail@plt+0x62e8>
   17e8c:	mov	r0, #1
   17e90:	b	17ee8 <__assert_fail@plt+0x623c>
   17e94:	mov	r7, #0
   17e98:	mov	r8, #0
   17e9c:	mov	r2, r0
   17ea0:	mov	r3, #0
   17ea4:	b	17f94 <__assert_fail@plt+0x62e8>
   17ea8:	tst	r9, #1
   17eac:	bne	17ee8 <__assert_fail@plt+0x623c>
   17eb0:	mov	r2, r0
   17eb4:	b	17f40 <__assert_fail@plt+0x6294>
   17eb8:	mov	r0, #1
   17ebc:	mov	r8, #0
   17ec0:	mov	r7, #5
   17ec4:	mov	r2, #1
   17ec8:	str	r0, [fp, #-72]	; 0xffffffb8
   17ecc:	movw	r0, #3968	; 0xf80
   17ed0:	movt	r0, #3
   17ed4:	str	r0, [fp, #-88]	; 0xffffffa8
   17ed8:	b	17f08 <__assert_fail@plt+0x625c>
   17edc:	mov	r2, #1
   17ee0:	tst	r9, #1
   17ee4:	beq	17f40 <__assert_fail@plt+0x6294>
   17ee8:	mov	r1, #1
   17eec:	mov	r8, #0
   17ef0:	mov	r7, #2
   17ef4:	mov	r2, r0
   17ef8:	str	r1, [fp, #-72]	; 0xffffffb8
   17efc:	movw	r1, #1201	; 0x4b1
   17f00:	movt	r1, #3
   17f04:	str	r1, [fp, #-88]	; 0xffffffa8
   17f08:	mov	r3, #1
   17f0c:	b	17f94 <__assert_fail@plt+0x62e8>
   17f10:	tst	r9, #1
   17f14:	beq	17f64 <__assert_fail@plt+0x62b8>
   17f18:	mov	r0, #1
   17f1c:	mov	r8, #0
   17f20:	mov	r2, #1
   17f24:	mov	r3, #1
   17f28:	mov	r7, #5
   17f2c:	str	r0, [fp, #-72]	; 0xffffffb8
   17f30:	movw	r0, #3968	; 0xf80
   17f34:	movt	r0, #3
   17f38:	str	r0, [fp, #-88]	; 0xffffffa8
   17f3c:	b	17f94 <__assert_fail@plt+0x62e8>
   17f40:	cmp	r4, #0
   17f44:	mov	r8, #1
   17f48:	mov	r3, #0
   17f4c:	mov	r7, #2
   17f50:	movne	r0, #39	; 0x27
   17f54:	strbne	r0, [r5]
   17f58:	movw	r0, #1201	; 0x4b1
   17f5c:	movt	r0, #3
   17f60:	b	17f88 <__assert_fail@plt+0x62dc>
   17f64:	cmp	r4, #0
   17f68:	mov	r8, #1
   17f6c:	mov	r2, #1
   17f70:	mov	r7, #5
   17f74:	mov	r3, #0
   17f78:	movne	r0, #34	; 0x22
   17f7c:	strbne	r0, [r5]
   17f80:	movw	r0, #3968	; 0xf80
   17f84:	movt	r0, #3
   17f88:	str	r0, [fp, #-88]	; 0xffffffa8
   17f8c:	mov	r0, #1
   17f90:	str	r0, [fp, #-72]	; 0xffffffb8
   17f94:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17f98:	eor	r6, r3, #1
   17f9c:	str	r7, [fp, #-68]	; 0xffffffbc
   17fa0:	str	r3, [fp, #-76]	; 0xffffffb4
   17fa4:	str	r2, [sp, #84]	; 0x54
   17fa8:	str	r6, [sp, #92]	; 0x5c
   17fac:	cmp	r0, #0
   17fb0:	movwne	r0, #1
   17fb4:	and	r1, r0, r3
   17fb8:	and	r1, r2, r1
   17fbc:	str	r1, [sp, #48]	; 0x30
   17fc0:	sub	r1, r7, #2
   17fc4:	clz	r1, r1
   17fc8:	lsr	r1, r1, #5
   17fcc:	and	r1, r1, r3
   17fd0:	str	r1, [sp, #64]	; 0x40
   17fd4:	subs	r1, r7, #2
   17fd8:	mov	r7, #0
   17fdc:	movwne	r1, #1
   17fe0:	orr	r6, r1, r6
   17fe4:	and	r1, r1, r2
   17fe8:	and	r0, r0, r1
   17fec:	str	r6, [sp, #68]	; 0x44
   17ff0:	str	r0, [fp, #-60]	; 0xffffffc4
   17ff4:	orr	r0, r1, r3
   17ff8:	ldr	r1, [fp, #16]
   17ffc:	eor	r0, r0, #1
   18000:	clz	r1, r1
   18004:	lsr	r1, r1, #5
   18008:	orr	r0, r1, r0
   1800c:	str	r0, [fp, #-64]	; 0xffffffc0
   18010:	eor	r0, r2, #1
   18014:	str	r0, [sp, #52]	; 0x34
   18018:	cmn	lr, #1
   1801c:	beq	1802c <__assert_fail@plt+0x6380>
   18020:	cmp	r7, lr
   18024:	bne	18038 <__assert_fail@plt+0x638c>
   18028:	b	18b80 <__assert_fail@plt+0x6ed4>
   1802c:	ldrb	r0, [ip, r7]
   18030:	cmp	r0, #0
   18034:	beq	18b88 <__assert_fail@plt+0x6edc>
   18038:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1803c:	mov	sl, #0
   18040:	cmp	r0, #0
   18044:	beq	1807c <__assert_fail@plt+0x63d0>
   18048:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1804c:	add	r5, r7, r0
   18050:	cmp	r0, #2
   18054:	bcc	18070 <__assert_fail@plt+0x63c4>
   18058:	cmn	lr, #1
   1805c:	bne	18070 <__assert_fail@plt+0x63c4>
   18060:	mov	r0, ip
   18064:	bl	11ac0 <strlen@plt>
   18068:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1806c:	mov	lr, r0
   18070:	cmp	r5, lr
   18074:	bls	18084 <__assert_fail@plt+0x63d8>
   18078:	ldr	r5, [fp, #-84]	; 0xffffffac
   1807c:	mov	r0, #0
   18080:	b	180d0 <__assert_fail@plt+0x6424>
   18084:	ldr	r1, [fp, #-88]	; 0xffffffa8
   18088:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1808c:	add	r0, ip, r7
   18090:	mov	r6, r4
   18094:	mov	r4, lr
   18098:	bl	11aa8 <bcmp@plt>
   1809c:	ldr	r2, [sp, #92]	; 0x5c
   180a0:	cmp	r0, #0
   180a4:	ldr	r5, [fp, #-84]	; 0xffffffac
   180a8:	mov	r1, r0
   180ac:	movwne	r1, #1
   180b0:	orr	r1, r1, r2
   180b4:	tst	r1, #1
   180b8:	beq	18c10 <__assert_fail@plt+0x6f64>
   180bc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   180c0:	clz	r0, r0
   180c4:	mov	lr, r4
   180c8:	mov	r4, r6
   180cc:	lsr	r0, r0, #5
   180d0:	str	r0, [fp, #-52]	; 0xffffffcc
   180d4:	ldrb	r6, [ip, r7]
   180d8:	cmp	r6, #126	; 0x7e
   180dc:	bhi	1860c <__assert_fail@plt+0x6960>
   180e0:	add	r3, pc, #16
   180e4:	mov	r9, #1
   180e8:	mov	r2, #110	; 0x6e
   180ec:	mov	r0, #97	; 0x61
   180f0:	mov	r1, #0
   180f4:	ldr	pc, [r3, r6, lsl #2]
   180f8:	andeq	r8, r1, ip, ror #8
   180fc:	andeq	r8, r1, ip, lsl #12
   18100:	andeq	r8, r1, ip, lsl #12
   18104:	andeq	r8, r1, ip, lsl #12
   18108:	andeq	r8, r1, ip, lsl #12
   1810c:	andeq	r8, r1, ip, lsl #12
   18110:	andeq	r8, r1, ip, lsl #12
   18114:	andeq	r8, r1, r8, ror #13
   18118:	andeq	r8, r1, ip, asr #8
   1811c:	andeq	r8, r1, r4, asr #8
   18120:	andeq	r8, r1, r8, asr r4
   18124:	andeq	r8, r1, r4, ror r5
   18128:	andeq	r8, r1, ip, lsr r4
   1812c:	andeq	r8, r1, r4, asr r4
   18130:	andeq	r8, r1, ip, lsl #12
   18134:	andeq	r8, r1, ip, lsl #12
   18138:	andeq	r8, r1, ip, lsl #12
   1813c:	andeq	r8, r1, ip, lsl #12
   18140:	andeq	r8, r1, ip, lsl #12
   18144:	andeq	r8, r1, ip, lsl #12
   18148:	andeq	r8, r1, ip, lsl #12
   1814c:	andeq	r8, r1, ip, lsl #12
   18150:	andeq	r8, r1, ip, lsl #12
   18154:	andeq	r8, r1, ip, lsl #12
   18158:	andeq	r8, r1, ip, lsl #12
   1815c:	andeq	r8, r1, ip, lsl #12
   18160:	andeq	r8, r1, ip, lsl #12
   18164:	andeq	r8, r1, ip, lsl #12
   18168:	andeq	r8, r1, ip, lsl #12
   1816c:	andeq	r8, r1, ip, lsl #12
   18170:	andeq	r8, r1, ip, lsl #12
   18174:	andeq	r8, r1, ip, lsl #12
   18178:	strdeq	r8, [r1], -r0
   1817c:	strdeq	r8, [r1], -r4
   18180:	strdeq	r8, [r1], -r4
   18184:	ldrdeq	r8, [r1], -ip
   18188:	strdeq	r8, [r1], -r4
   1818c:	strdeq	r8, [r1], -r4
   18190:	strdeq	r8, [r1], -r4
   18194:	andeq	r8, r1, ip, ror r5
   18198:	strdeq	r8, [r1], -r4
   1819c:	strdeq	r8, [r1], -r4
   181a0:	strdeq	r8, [r1], -r4
   181a4:	strdeq	r8, [r1], -r4
   181a8:	strdeq	r8, [r1], -r4
   181ac:	strdeq	r8, [r1], -r4
   181b0:	strdeq	r8, [r1], -r4
   181b4:	strdeq	r8, [r1], -r4
   181b8:	strdeq	r8, [r1], -r4
   181bc:	strdeq	r8, [r1], -r4
   181c0:	strdeq	r8, [r1], -r4
   181c4:	strdeq	r8, [r1], -r4
   181c8:	strdeq	r8, [r1], -r4
   181cc:	strdeq	r8, [r1], -r4
   181d0:	strdeq	r8, [r1], -r4
   181d4:	strdeq	r8, [r1], -r4
   181d8:	strdeq	r8, [r1], -r4
   181dc:	strdeq	r8, [r1], -r4
   181e0:	strdeq	r8, [r1], -r4
   181e4:	strdeq	r8, [r1], -r4
   181e8:	strdeq	r8, [r1], -r4
   181ec:	strdeq	r8, [r1], -r4
   181f0:	strdeq	r8, [r1], -r4
   181f4:	andeq	r8, r1, r4, asr #10
   181f8:	andeq	r8, r1, ip, lsl #12
   181fc:	strdeq	r8, [r1], -r4
   18200:	strdeq	r8, [r1], -r4
   18204:	strdeq	r8, [r1], -r4
   18208:	strdeq	r8, [r1], -r4
   1820c:	strdeq	r8, [r1], -r4
   18210:	strdeq	r8, [r1], -r4
   18214:	strdeq	r8, [r1], -r4
   18218:	strdeq	r8, [r1], -r4
   1821c:	strdeq	r8, [r1], -r4
   18220:	strdeq	r8, [r1], -r4
   18224:	strdeq	r8, [r1], -r4
   18228:	strdeq	r8, [r1], -r4
   1822c:	strdeq	r8, [r1], -r4
   18230:	strdeq	r8, [r1], -r4
   18234:	strdeq	r8, [r1], -r4
   18238:	strdeq	r8, [r1], -r4
   1823c:	strdeq	r8, [r1], -r4
   18240:	strdeq	r8, [r1], -r4
   18244:	strdeq	r8, [r1], -r4
   18248:	strdeq	r8, [r1], -r4
   1824c:	strdeq	r8, [r1], -r4
   18250:	strdeq	r8, [r1], -r4
   18254:	strdeq	r8, [r1], -r4
   18258:	strdeq	r8, [r1], -r4
   1825c:	strdeq	r8, [r1], -r4
   18260:	strdeq	r8, [r1], -r4
   18264:	strdeq	r8, [r1], -r4
   18268:	andeq	r8, r1, ip, lsl r4
   1826c:	strdeq	r8, [r1], -r4
   18270:	strdeq	r8, [r1], -r4
   18274:	strdeq	r8, [r1], -r4
   18278:	strdeq	r8, [r1], -r4
   1827c:	strdeq	r8, [r1], -r4
   18280:	strdeq	r8, [r1], -r4
   18284:	strdeq	r8, [r1], -r4
   18288:	strdeq	r8, [r1], -r4
   1828c:	strdeq	r8, [r1], -r4
   18290:	strdeq	r8, [r1], -r4
   18294:	strdeq	r8, [r1], -r4
   18298:	strdeq	r8, [r1], -r4
   1829c:	strdeq	r8, [r1], -r4
   182a0:	strdeq	r8, [r1], -r4
   182a4:	strdeq	r8, [r1], -r4
   182a8:	strdeq	r8, [r1], -r4
   182ac:	strdeq	r8, [r1], -r4
   182b0:	strdeq	r8, [r1], -r4
   182b4:	strdeq	r8, [r1], -r4
   182b8:	strdeq	r8, [r1], -r4
   182bc:	strdeq	r8, [r1], -r4
   182c0:	strdeq	r8, [r1], -r4
   182c4:	strdeq	r8, [r1], -r4
   182c8:	strdeq	r8, [r1], -r4
   182cc:	strdeq	r8, [r1], -r4
   182d0:	strdeq	r8, [r1], -r4
   182d4:	strdeq	r8, [r1], -r4
   182d8:	strdeq	r8, [r1], -r4
   182dc:	strdeq	r8, [r1], -r4
   182e0:	strdeq	r8, [r1], -r4
   182e4:			; <UNDEFINED> instruction: 0x000183b0
   182e8:	strdeq	r8, [r1], -r4
   182ec:			; <UNDEFINED> instruction: 0x000183b0
   182f0:	ldrdeq	r8, [r1], -ip
   182f4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   182f8:	tst	r0, #1
   182fc:	bne	18328 <__assert_fail@plt+0x667c>
   18300:	ldr	r1, [fp, #16]
   18304:	ubfx	r0, r6, #5, #3
   18308:	mov	r2, #1
   1830c:	ldr	r0, [r1, r0, lsl #2]
   18310:	and	r1, r6, #31
   18314:	tst	r0, r2, lsl r1
   18318:	beq	18328 <__assert_fail@plt+0x667c>
   1831c:	mov	r0, r6
   18320:	mov	r1, r9
   18324:	b	1833c <__assert_fail@plt+0x6690>
   18328:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1832c:	mov	r1, r9
   18330:	cmp	r0, #0
   18334:	mov	r0, r6
   18338:	beq	1867c <__assert_fail@plt+0x69d0>
   1833c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   18340:	tst	r2, #1
   18344:	bne	18c4c <__assert_fail@plt+0x6fa0>
   18348:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1834c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18350:	subs	r2, r2, #2
   18354:	movwne	r2, #1
   18358:	orr	r2, r2, r3
   1835c:	tst	r2, #1
   18360:	bne	1839c <__assert_fail@plt+0x66f0>
   18364:	cmp	r8, r4
   18368:	movcc	r2, #39	; 0x27
   1836c:	strbcc	r2, [r5, r8]
   18370:	add	r2, r8, #1
   18374:	cmp	r2, r4
   18378:	movcc	r3, #36	; 0x24
   1837c:	strbcc	r3, [r5, r2]
   18380:	add	r2, r8, #2
   18384:	add	r8, r8, #3
   18388:	cmp	r2, r4
   1838c:	movcc	r3, #39	; 0x27
   18390:	strbcc	r3, [r5, r2]
   18394:	mov	r2, #1
   18398:	str	r2, [fp, #-56]	; 0xffffffc8
   1839c:	cmp	r8, r4
   183a0:	movcc	r2, #92	; 0x5c
   183a4:	strbcc	r2, [r5, r8]
   183a8:	add	r8, r8, #1
   183ac:	b	186c0 <__assert_fail@plt+0x6a14>
   183b0:	cmp	lr, #1
   183b4:	beq	183dc <__assert_fail@plt+0x6730>
   183b8:	mov	r9, #0
   183bc:	cmn	lr, #1
   183c0:	bne	183e8 <__assert_fail@plt+0x673c>
   183c4:	ldrb	r0, [ip, #1]
   183c8:	cmp	r0, #0
   183cc:	beq	183dc <__assert_fail@plt+0x6730>
   183d0:	mvn	lr, #0
   183d4:	mov	sl, #0
   183d8:	b	182f4 <__assert_fail@plt+0x6648>
   183dc:	mov	r9, #0
   183e0:	cmp	r7, #0
   183e4:	beq	183f0 <__assert_fail@plt+0x6744>
   183e8:	mov	sl, #0
   183ec:	b	182f4 <__assert_fail@plt+0x6648>
   183f0:	mov	r1, #1
   183f4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   183f8:	cmp	r0, #2
   183fc:	bne	18414 <__assert_fail@plt+0x6768>
   18400:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18404:	mov	r9, r1
   18408:	tst	r0, #1
   1840c:	beq	182f4 <__assert_fail@plt+0x6648>
   18410:	b	18c4c <__assert_fail@plt+0x6fa0>
   18414:	mov	r9, r1
   18418:	b	182f4 <__assert_fail@plt+0x6648>
   1841c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18420:	cmp	r0, #2
   18424:	bne	18660 <__assert_fail@plt+0x69b4>
   18428:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1842c:	tst	r0, #1
   18430:	bne	18c4c <__assert_fail@plt+0x6fa0>
   18434:	mov	sl, #0
   18438:	b	18674 <__assert_fail@plt+0x69c8>
   1843c:	mov	r0, #102	; 0x66
   18440:	b	186e8 <__assert_fail@plt+0x6a3c>
   18444:	mov	r2, #116	; 0x74
   18448:	b	18458 <__assert_fail@plt+0x67ac>
   1844c:	mov	r0, #98	; 0x62
   18450:	b	186e8 <__assert_fail@plt+0x6a3c>
   18454:	mov	r2, #114	; 0x72
   18458:	ldr	r0, [sp, #68]	; 0x44
   1845c:	tst	r0, #1
   18460:	mov	r0, r2
   18464:	bne	186e8 <__assert_fail@plt+0x6a3c>
   18468:	b	18c4c <__assert_fail@plt+0x6fa0>
   1846c:	ldr	r0, [sp, #84]	; 0x54
   18470:	tst	r0, #1
   18474:	beq	18704 <__assert_fail@plt+0x6a58>
   18478:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1847c:	tst	r0, #1
   18480:	bne	18d38 <__assert_fail@plt+0x708c>
   18484:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18488:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1848c:	subs	r0, r0, #2
   18490:	movwne	r0, #1
   18494:	orr	r0, r0, r1
   18498:	tst	r0, #1
   1849c:	bne	184d8 <__assert_fail@plt+0x682c>
   184a0:	cmp	r8, r4
   184a4:	movcc	r0, #39	; 0x27
   184a8:	strbcc	r0, [r5, r8]
   184ac:	add	r0, r8, #1
   184b0:	cmp	r0, r4
   184b4:	movcc	r1, #36	; 0x24
   184b8:	strbcc	r1, [r5, r0]
   184bc:	add	r0, r8, #2
   184c0:	add	r8, r8, #3
   184c4:	cmp	r0, r4
   184c8:	movcc	r1, #39	; 0x27
   184cc:	strbcc	r1, [r5, r0]
   184d0:	mov	r0, #1
   184d4:	str	r0, [fp, #-56]	; 0xffffffc8
   184d8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   184dc:	cmp	r8, r4
   184e0:	mov	r9, #0
   184e4:	mov	sl, #1
   184e8:	mov	r6, #48	; 0x30
   184ec:	movcc	r0, #92	; 0x5c
   184f0:	strbcc	r0, [r5, r8]
   184f4:	add	r0, r8, #1
   184f8:	cmp	r1, #2
   184fc:	beq	188cc <__assert_fail@plt+0x6c20>
   18500:	add	r1, r7, #1
   18504:	cmp	r1, lr
   18508:	bcs	188cc <__assert_fail@plt+0x6c20>
   1850c:	ldrb	r1, [ip, r1]
   18510:	sub	r1, r1, #48	; 0x30
   18514:	uxtb	r1, r1
   18518:	cmp	r1, #9
   1851c:	bhi	188cc <__assert_fail@plt+0x6c20>
   18520:	cmp	r0, r4
   18524:	movcc	r1, #48	; 0x30
   18528:	strbcc	r1, [r5, r0]
   1852c:	add	r0, r8, #2
   18530:	add	r8, r8, #3
   18534:	cmp	r0, r4
   18538:	movcc	r1, #48	; 0x30
   1853c:	strbcc	r1, [r5, r0]
   18540:	b	182f4 <__assert_fail@plt+0x6648>
   18544:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18548:	mov	sl, #0
   1854c:	mov	r6, #63	; 0x3f
   18550:	cmp	r0, #5
   18554:	beq	188d4 <__assert_fail@plt+0x6c28>
   18558:	cmp	r0, #2
   1855c:	bne	1897c <__assert_fail@plt+0x6cd0>
   18560:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18564:	mov	r9, #0
   18568:	tst	r0, #1
   1856c:	beq	182f4 <__assert_fail@plt+0x6648>
   18570:	b	18c4c <__assert_fail@plt+0x6fa0>
   18574:	mov	r0, #118	; 0x76
   18578:	b	186e8 <__assert_fail@plt+0x6a3c>
   1857c:	mov	r0, #1
   18580:	mov	r6, #39	; 0x27
   18584:	str	r0, [sp, #60]	; 0x3c
   18588:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1858c:	cmp	r0, #2
   18590:	bne	18720 <__assert_fail@plt+0x6a74>
   18594:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18598:	tst	r0, #1
   1859c:	bne	18c4c <__assert_fail@plt+0x6fa0>
   185a0:	ldr	r2, [sp, #56]	; 0x38
   185a4:	clz	r1, r4
   185a8:	mov	sl, #0
   185ac:	mov	r9, #1
   185b0:	lsr	r1, r1, #5
   185b4:	cmp	r2, #0
   185b8:	mov	r0, r2
   185bc:	movwne	r0, #1
   185c0:	orrs	r0, r0, r1
   185c4:	moveq	r2, r4
   185c8:	moveq	r4, r0
   185cc:	cmp	r8, r4
   185d0:	str	r2, [sp, #56]	; 0x38
   185d4:	movcc	r0, #39	; 0x27
   185d8:	strbcc	r0, [r5, r8]
   185dc:	add	r0, r8, #1
   185e0:	cmp	r0, r4
   185e4:	movcc	r1, #92	; 0x5c
   185e8:	strbcc	r1, [r5, r0]
   185ec:	add	r0, r8, #2
   185f0:	add	r8, r8, #3
   185f4:	cmp	r0, r4
   185f8:	movcc	r1, #39	; 0x27
   185fc:	strbcc	r1, [r5, r0]
   18600:	mov	r0, #0
   18604:	str	r0, [fp, #-56]	; 0xffffffc8
   18608:	b	182f4 <__assert_fail@plt+0x6648>
   1860c:	ldr	r0, [sp, #40]	; 0x28
   18610:	str	r4, [sp, #88]	; 0x58
   18614:	cmp	r0, #1
   18618:	bne	18728 <__assert_fail@plt+0x6a7c>
   1861c:	str	lr, [sp, #28]
   18620:	bl	11a84 <__ctype_b_loc@plt>
   18624:	ldr	r0, [r0]
   18628:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1862c:	mov	r2, #1
   18630:	add	r0, r0, r6, lsl #1
   18634:	ldrb	r0, [r0, #1]
   18638:	ubfx	r9, r0, #6, #1
   1863c:	ldr	r0, [sp, #52]	; 0x34
   18640:	cmp	r2, #1
   18644:	orr	r0, r9, r0
   18648:	bhi	18984 <__assert_fail@plt+0x6cd8>
   1864c:	tst	r0, #1
   18650:	beq	18984 <__assert_fail@plt+0x6cd8>
   18654:	ldr	lr, [sp, #28]
   18658:	ldr	r4, [sp, #88]	; 0x58
   1865c:	b	182f4 <__assert_fail@plt+0x6648>
   18660:	ldr	r1, [sp, #48]	; 0x30
   18664:	mov	sl, #0
   18668:	mov	r0, #92	; 0x5c
   1866c:	cmp	r1, #0
   18670:	beq	186e8 <__assert_fail@plt+0x6a3c>
   18674:	mov	r6, #92	; 0x5c
   18678:	mov	r9, #0
   1867c:	cmp	sl, #0
   18680:	bne	186b8 <__assert_fail@plt+0x6a0c>
   18684:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18688:	tst	r0, #1
   1868c:	beq	186b8 <__assert_fail@plt+0x6a0c>
   18690:	cmp	r8, r4
   18694:	movcc	r0, #39	; 0x27
   18698:	strbcc	r0, [r5, r8]
   1869c:	add	r0, r8, #1
   186a0:	add	r8, r8, #2
   186a4:	cmp	r0, r4
   186a8:	movcc	r1, #39	; 0x27
   186ac:	strbcc	r1, [r5, r0]
   186b0:	mov	r0, #0
   186b4:	str	r0, [fp, #-56]	; 0xffffffc8
   186b8:	mov	r1, r9
   186bc:	mov	r0, r6
   186c0:	cmp	r8, r4
   186c4:	strbcc	r0, [r5, r8]
   186c8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   186cc:	add	r8, r8, #1
   186d0:	and	r0, r0, r1
   186d4:	str	r0, [fp, #-48]	; 0xffffffd0
   186d8:	add	r7, r7, #1
   186dc:	cmn	lr, #1
   186e0:	bne	18020 <__assert_fail@plt+0x6374>
   186e4:	b	1802c <__assert_fail@plt+0x6380>
   186e8:	ldr	r1, [sp, #84]	; 0x54
   186ec:	mov	sl, #0
   186f0:	mov	r9, #0
   186f4:	tst	r1, #1
   186f8:	mov	r1, #0
   186fc:	beq	182f4 <__assert_fail@plt+0x6648>
   18700:	b	1833c <__assert_fail@plt+0x6690>
   18704:	ldr	r0, [sp, #36]	; 0x24
   18708:	mov	r6, #0
   1870c:	mov	sl, #0
   18710:	mov	r9, #0
   18714:	cmp	r0, #0
   18718:	beq	182f4 <__assert_fail@plt+0x6648>
   1871c:	b	186d8 <__assert_fail@plt+0x6a2c>
   18720:	mov	r9, #1
   18724:	b	182f4 <__assert_fail@plt+0x6648>
   18728:	mov	r0, #0
   1872c:	cmn	lr, #1
   18730:	sub	r4, fp, #40	; 0x28
   18734:	str	r0, [fp, #-36]	; 0xffffffdc
   18738:	str	r0, [fp, #-40]	; 0xffffffd8
   1873c:	bne	18750 <__assert_fail@plt+0x6aa4>
   18740:	mov	r0, ip
   18744:	bl	11ac0 <strlen@plt>
   18748:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1874c:	mov	lr, r0
   18750:	ldr	r0, [sp, #72]	; 0x48
   18754:	mov	r9, #1
   18758:	mov	r2, #0
   1875c:	str	lr, [sp, #28]
   18760:	add	r0, r0, r7
   18764:	str	r0, [sp, #20]
   18768:	b	187ac <__assert_fail@plt+0x6b00>
   1876c:	ldr	r5, [sp, #44]	; 0x2c
   18770:	add	r5, r0, r5
   18774:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18778:	bl	11970 <iswprint@plt>
   1877c:	cmp	r0, #0
   18780:	sub	r4, fp, #40	; 0x28
   18784:	movwne	r0, #1
   18788:	and	r9, r9, r0
   1878c:	mov	r0, r4
   18790:	bl	1191c <mbsinit@plt>
   18794:	mov	r2, r5
   18798:	ldr	lr, [sp, #28]
   1879c:	ldr	r5, [fp, #-84]	; 0xffffffac
   187a0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   187a4:	cmp	r0, #0
   187a8:	bne	1863c <__assert_fail@plt+0x6990>
   187ac:	add	r0, r2, r7
   187b0:	str	r2, [sp, #44]	; 0x2c
   187b4:	mov	r3, r4
   187b8:	add	r1, ip, r0
   187bc:	str	r0, [sp, #24]
   187c0:	sub	r2, lr, r0
   187c4:	sub	r0, fp, #44	; 0x2c
   187c8:	bl	1b5e8 <__assert_fail@plt+0x993c>
   187cc:	cmp	r0, #0
   187d0:	beq	18b74 <__assert_fail@plt+0x6ec8>
   187d4:	cmn	r0, #1
   187d8:	beq	18b30 <__assert_fail@plt+0x6e84>
   187dc:	ldr	lr, [sp, #28]
   187e0:	cmn	r0, #2
   187e4:	beq	18b38 <__assert_fail@plt+0x6e8c>
   187e8:	ldr	r2, [sp, #64]	; 0x40
   187ec:	ldr	r4, [sp, #88]	; 0x58
   187f0:	ldr	ip, [sp, #84]	; 0x54
   187f4:	cmp	r0, #2
   187f8:	mov	r1, #0
   187fc:	movwcc	r1, #1
   18800:	eor	r2, r2, #1
   18804:	orrs	r1, r2, r1
   18808:	bne	1876c <__assert_fail@plt+0x6ac0>
   1880c:	ldr	r1, [sp, #44]	; 0x2c
   18810:	ldr	r2, [sp, #20]
   18814:	add	r1, r2, r1
   18818:	sub	r2, r0, #1
   1881c:	b	1882c <__assert_fail@plt+0x6b80>
   18820:	add	r1, r1, #1
   18824:	subs	r2, r2, #1
   18828:	beq	1876c <__assert_fail@plt+0x6ac0>
   1882c:	ldrb	r3, [r1]
   18830:	sub	r3, r3, #91	; 0x5b
   18834:	cmp	r3, #33	; 0x21
   18838:	bhi	18820 <__assert_fail@plt+0x6b74>
   1883c:	add	r5, pc, #0
   18840:	ldr	pc, [r5, r3, lsl #2]
   18844:	andeq	r8, r1, r8, lsr #24
   18848:	andeq	r8, r1, r8, lsr #24
   1884c:	andeq	r8, r1, r0, lsr #16
   18850:	andeq	r8, r1, r8, lsr #24
   18854:	andeq	r8, r1, r0, lsr #16
   18858:	andeq	r8, r1, r8, lsr #24
   1885c:	andeq	r8, r1, r0, lsr #16
   18860:	andeq	r8, r1, r0, lsr #16
   18864:	andeq	r8, r1, r0, lsr #16
   18868:	andeq	r8, r1, r0, lsr #16
   1886c:	andeq	r8, r1, r0, lsr #16
   18870:	andeq	r8, r1, r0, lsr #16
   18874:	andeq	r8, r1, r0, lsr #16
   18878:	andeq	r8, r1, r0, lsr #16
   1887c:	andeq	r8, r1, r0, lsr #16
   18880:	andeq	r8, r1, r0, lsr #16
   18884:	andeq	r8, r1, r0, lsr #16
   18888:	andeq	r8, r1, r0, lsr #16
   1888c:	andeq	r8, r1, r0, lsr #16
   18890:	andeq	r8, r1, r0, lsr #16
   18894:	andeq	r8, r1, r0, lsr #16
   18898:	andeq	r8, r1, r0, lsr #16
   1889c:	andeq	r8, r1, r0, lsr #16
   188a0:	andeq	r8, r1, r0, lsr #16
   188a4:	andeq	r8, r1, r0, lsr #16
   188a8:	andeq	r8, r1, r0, lsr #16
   188ac:	andeq	r8, r1, r0, lsr #16
   188b0:	andeq	r8, r1, r0, lsr #16
   188b4:	andeq	r8, r1, r0, lsr #16
   188b8:	andeq	r8, r1, r0, lsr #16
   188bc:	andeq	r8, r1, r0, lsr #16
   188c0:	andeq	r8, r1, r0, lsr #16
   188c4:	andeq	r8, r1, r0, lsr #16
   188c8:	andeq	r8, r1, r8, lsr #24
   188cc:	mov	r8, r0
   188d0:	b	182f4 <__assert_fail@plt+0x6648>
   188d4:	ldr	r0, [sp, #32]
   188d8:	cmp	r0, #0
   188dc:	beq	1897c <__assert_fail@plt+0x6cd0>
   188e0:	add	r0, r7, #2
   188e4:	cmp	r0, lr
   188e8:	bcs	1897c <__assert_fail@plt+0x6cd0>
   188ec:	add	r1, r7, ip
   188f0:	ldrb	r1, [r1, #1]
   188f4:	cmp	r1, #63	; 0x3f
   188f8:	bne	1897c <__assert_fail@plt+0x6cd0>
   188fc:	ldrb	r9, [ip, r0]
   18900:	sub	r2, r9, #33	; 0x21
   18904:	cmp	r2, #29
   18908:	bhi	1897c <__assert_fail@plt+0x6cd0>
   1890c:	movw	r1, #20929	; 0x51c1
   18910:	mov	r3, #1
   18914:	movt	r1, #14336	; 0x3800
   18918:	tst	r1, r3, lsl r2
   1891c:	beq	1897c <__assert_fail@plt+0x6cd0>
   18920:	ldr	r1, [fp, #-76]	; 0xffffffb4
   18924:	tst	r1, #1
   18928:	bne	18c4c <__assert_fail@plt+0x6fa0>
   1892c:	cmp	r8, r4
   18930:	add	r2, r8, #1
   18934:	mov	r6, r9
   18938:	mov	r7, r0
   1893c:	mov	r9, #0
   18940:	movcc	r1, #63	; 0x3f
   18944:	strbcc	r1, [r5, r8]
   18948:	cmp	r2, r4
   1894c:	movcc	r1, #34	; 0x22
   18950:	strbcc	r1, [r5, r2]
   18954:	add	r2, r8, #2
   18958:	cmp	r2, r4
   1895c:	movcc	r1, #34	; 0x22
   18960:	strbcc	r1, [r5, r2]
   18964:	add	r2, r8, #3
   18968:	add	r8, r8, #4
   1896c:	cmp	r2, r4
   18970:	movcc	r1, #63	; 0x3f
   18974:	strbcc	r1, [r5, r2]
   18978:	b	182f4 <__assert_fail@plt+0x6648>
   1897c:	mov	r9, #0
   18980:	b	182f4 <__assert_fail@plt+0x6648>
   18984:	ldr	lr, [sp, #28]
   18988:	ldr	r4, [fp, #-56]	; 0xffffffc8
   1898c:	add	r1, r2, r7
   18990:	mov	r2, #0
   18994:	str	r1, [sp, #44]	; 0x2c
   18998:	tst	r0, #1
   1899c:	bne	18ab8 <__assert_fail@plt+0x6e0c>
   189a0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   189a4:	tst	r1, #1
   189a8:	bne	18c48 <__assert_fail@plt+0x6f9c>
   189ac:	ldr	r1, [fp, #-68]	; 0xffffffbc
   189b0:	subs	r2, r1, #2
   189b4:	movwne	r2, #1
   189b8:	orr	r2, r2, r4
   189bc:	tst	r2, #1
   189c0:	bne	18a04 <__assert_fail@plt+0x6d58>
   189c4:	ldr	r1, [sp, #88]	; 0x58
   189c8:	add	r2, r8, #1
   189cc:	mov	r4, #1
   189d0:	cmp	r8, r1
   189d4:	movcc	r1, #39	; 0x27
   189d8:	strbcc	r1, [r5, r8]
   189dc:	ldr	r1, [sp, #88]	; 0x58
   189e0:	cmp	r2, r1
   189e4:	movcc	r1, #36	; 0x24
   189e8:	strbcc	r1, [r5, r2]
   189ec:	ldr	r1, [sp, #88]	; 0x58
   189f0:	add	r2, r8, #2
   189f4:	add	r8, r8, #3
   189f8:	cmp	r2, r1
   189fc:	movcc	r1, #39	; 0x27
   18a00:	strbcc	r1, [r5, r2]
   18a04:	ldr	r1, [sp, #88]	; 0x58
   18a08:	add	r2, r8, #1
   18a0c:	cmp	r8, r1
   18a10:	movcc	r1, #92	; 0x5c
   18a14:	strbcc	r1, [r5, r8]
   18a18:	ldr	r1, [sp, #88]	; 0x58
   18a1c:	cmp	r2, r1
   18a20:	bcs	18a34 <__assert_fail@plt+0x6d88>
   18a24:	uxtb	r3, r6
   18a28:	mov	r1, #48	; 0x30
   18a2c:	orr	r3, r1, r3, lsr #6
   18a30:	strb	r3, [r5, r2]
   18a34:	ldr	r1, [sp, #88]	; 0x58
   18a38:	add	r2, r8, #2
   18a3c:	add	r8, r8, #3
   18a40:	cmp	r2, r1
   18a44:	lsrcc	r3, r6, #3
   18a48:	movcc	r1, #6
   18a4c:	bficc	r3, r1, #3, #29
   18a50:	mov	r1, #6
   18a54:	bfi	r6, r1, #3, #29
   18a58:	strbcc	r3, [r5, r2]
   18a5c:	mov	r2, #1
   18a60:	b	18ae0 <__assert_fail@plt+0x6e34>
   18a64:	ldr	r1, [sp, #88]	; 0x58
   18a68:	ldr	r5, [fp, #-84]	; 0xffffffac
   18a6c:	ldr	r4, [sp, #88]	; 0x58
   18a70:	cmp	r8, r1
   18a74:	movcc	r1, #39	; 0x27
   18a78:	strbcc	r1, [r5, r8]
   18a7c:	add	r1, r8, #1
   18a80:	add	r8, r8, #2
   18a84:	cmp	r1, r4
   18a88:	movcc	r4, #39	; 0x27
   18a8c:	strbcc	r4, [r5, r1]
   18a90:	mov	r4, #0
   18a94:	ldr	r1, [sp, #88]	; 0x58
   18a98:	cmp	r8, r1
   18a9c:	ldr	r1, [sp, #72]	; 0x48
   18aa0:	strbcc	r6, [r5, r8]
   18aa4:	add	r8, r8, #1
   18aa8:	ldrb	r6, [r1, r7]
   18aac:	mov	r7, r3
   18ab0:	tst	r0, #1
   18ab4:	beq	189a0 <__assert_fail@plt+0x6cf4>
   18ab8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18abc:	tst	r1, #1
   18ac0:	beq	18ad8 <__assert_fail@plt+0x6e2c>
   18ac4:	ldr	r1, [sp, #88]	; 0x58
   18ac8:	cmp	r8, r1
   18acc:	movcc	r1, #92	; 0x5c
   18ad0:	strbcc	r1, [r5, r8]
   18ad4:	add	r8, r8, #1
   18ad8:	mov	r1, #0
   18adc:	str	r1, [fp, #-52]	; 0xffffffcc
   18ae0:	ldr	r1, [sp, #44]	; 0x2c
   18ae4:	add	r3, r7, #1
   18ae8:	and	sl, r2, #1
   18aec:	cmp	r1, r3
   18af0:	bls	18b14 <__assert_fail@plt+0x6e68>
   18af4:	cmp	sl, #0
   18af8:	mvn	r5, r4
   18afc:	movwne	sl, #1
   18b00:	orr	r5, r5, sl
   18b04:	tst	r5, #1
   18b08:	beq	18a64 <__assert_fail@plt+0x6db8>
   18b0c:	ldr	r5, [fp, #-84]	; 0xffffffac
   18b10:	b	18a94 <__assert_fail@plt+0x6de8>
   18b14:	str	r4, [fp, #-56]	; 0xffffffc8
   18b18:	ldr	r4, [sp, #88]	; 0x58
   18b1c:	cmp	sl, #0
   18b20:	movwne	sl, #1
   18b24:	cmp	sl, #0
   18b28:	beq	18684 <__assert_fail@plt+0x69d8>
   18b2c:	b	186b8 <__assert_fail@plt+0x6a0c>
   18b30:	mov	r9, #0
   18b34:	b	18b74 <__assert_fail@plt+0x6ec8>
   18b38:	ldr	r0, [sp, #24]
   18b3c:	mov	r9, #0
   18b40:	cmp	lr, r0
   18b44:	bls	18b74 <__assert_fail@plt+0x6ec8>
   18b48:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18b4c:	ldr	r2, [sp, #44]	; 0x2c
   18b50:	add	r0, ip, r7
   18b54:	ldrb	r1, [r0, r2]
   18b58:	cmp	r1, #0
   18b5c:	beq	1863c <__assert_fail@plt+0x6990>
   18b60:	add	r2, r2, #1
   18b64:	add	r1, r7, r2
   18b68:	cmp	r1, lr
   18b6c:	bcc	18b54 <__assert_fail@plt+0x6ea8>
   18b70:	b	1863c <__assert_fail@plt+0x6990>
   18b74:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18b78:	ldr	r2, [sp, #44]	; 0x2c
   18b7c:	b	1863c <__assert_fail@plt+0x6990>
   18b80:	mov	lr, r7
   18b84:	b	18b8c <__assert_fail@plt+0x6ee0>
   18b88:	mvn	lr, #0
   18b8c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   18b90:	ldr	r2, [fp, #-76]	; 0xffffffb4
   18b94:	eor	r0, r1, #2
   18b98:	orr	r0, r0, r8
   18b9c:	clz	r0, r0
   18ba0:	lsr	r0, r0, #5
   18ba4:	tst	r2, r0
   18ba8:	bne	18c4c <__assert_fail@plt+0x6fa0>
   18bac:	subs	r0, r1, #2
   18bb0:	movwne	r0, #1
   18bb4:	orr	r0, r2, r0
   18bb8:	tst	r0, #1
   18bbc:	ldreq	r0, [sp, #60]	; 0x3c
   18bc0:	eoreq	r0, r0, #1
   18bc4:	tsteq	r0, #1
   18bc8:	bne	18ce0 <__assert_fail@plt+0x7034>
   18bcc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18bd0:	mov	sl, lr
   18bd4:	tst	r0, #1
   18bd8:	bne	18cac <__assert_fail@plt+0x7000>
   18bdc:	ldr	r6, [sp, #56]	; 0x38
   18be0:	mov	r9, #0
   18be4:	cmp	r6, #0
   18be8:	beq	18cd8 <__assert_fail@plt+0x702c>
   18bec:	ldr	r0, [sp, #84]	; 0x54
   18bf0:	mov	r1, #0
   18bf4:	mov	r7, #2
   18bf8:	cmp	r4, #0
   18bfc:	str	r1, [fp, #-48]	; 0xffffffd0
   18c00:	mov	r1, #0
   18c04:	str	r1, [fp, #-76]	; 0xffffffb4
   18c08:	beq	17da8 <__assert_fail@plt+0x60fc>
   18c0c:	b	18ce0 <__assert_fail@plt+0x7034>
   18c10:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18c14:	ldr	r1, [fp, #12]
   18c18:	ldr	r2, [fp, #-68]	; 0xffffffbc
   18c1c:	mov	lr, r4
   18c20:	mov	r4, r6
   18c24:	b	18c6c <__assert_fail@plt+0x6fc0>
   18c28:	tst	ip, #1
   18c2c:	ldr	r5, [fp, #-84]	; 0xffffffac
   18c30:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18c34:	ldr	r1, [fp, #12]
   18c38:	mov	r0, #2
   18c3c:	movwne	r0, #4
   18c40:	mov	r2, r0
   18c44:	b	18c6c <__assert_fail@plt+0x6fc0>
   18c48:	ldr	r4, [sp, #88]	; 0x58
   18c4c:	ldr	r1, [sp, #84]	; 0x54
   18c50:	mov	r0, #2
   18c54:	tst	r1, #1
   18c58:	movwne	r0, #4
   18c5c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   18c60:	ldr	r1, [fp, #12]
   18c64:	cmp	r2, #2
   18c68:	moveq	r2, r0
   18c6c:	mov	r0, #0
   18c70:	bic	r1, r1, #2
   18c74:	str	r2, [sp]
   18c78:	mov	r2, ip
   18c7c:	mov	r3, lr
   18c80:	str	r0, [sp, #8]
   18c84:	ldr	r0, [sp, #76]	; 0x4c
   18c88:	str	r1, [sp, #4]
   18c8c:	mov	r1, r4
   18c90:	str	r0, [sp, #12]
   18c94:	ldr	r0, [sp, #80]	; 0x50
   18c98:	str	r0, [sp, #16]
   18c9c:	mov	r0, r5
   18ca0:	bl	17d18 <__assert_fail@plt+0x606c>
   18ca4:	mov	r8, r0
   18ca8:	b	18d2c <__assert_fail@plt+0x7080>
   18cac:	mov	r0, #5
   18cb0:	ldr	r1, [sp, #56]	; 0x38
   18cb4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   18cb8:	mov	r3, sl
   18cbc:	str	r0, [sp]
   18cc0:	ldr	r0, [fp, #12]
   18cc4:	str	r0, [sp, #4]
   18cc8:	ldr	r0, [fp, #16]
   18ccc:	str	r0, [sp, #8]
   18cd0:	ldr	r0, [sp, #76]	; 0x4c
   18cd4:	b	18c90 <__assert_fail@plt+0x6fe4>
   18cd8:	mov	r0, #0
   18cdc:	str	r0, [fp, #-76]	; 0xffffffb4
   18ce0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   18ce4:	cmp	r1, #0
   18ce8:	beq	18d20 <__assert_fail@plt+0x7074>
   18cec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18cf0:	tst	r0, #1
   18cf4:	bne	18d20 <__assert_fail@plt+0x7074>
   18cf8:	ldrb	r0, [r1]
   18cfc:	cmp	r0, #0
   18d00:	beq	18d20 <__assert_fail@plt+0x7074>
   18d04:	add	r1, r1, #1
   18d08:	cmp	r8, r4
   18d0c:	strbcc	r0, [r5, r8]
   18d10:	add	r8, r8, #1
   18d14:	ldrb	r0, [r1], #1
   18d18:	cmp	r0, #0
   18d1c:	bne	18d08 <__assert_fail@plt+0x705c>
   18d20:	cmp	r8, r4
   18d24:	movcc	r0, #0
   18d28:	strbcc	r0, [r5, r8]
   18d2c:	mov	r0, r8
   18d30:	sub	sp, fp, #28
   18d34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d38:	mov	r0, #4
   18d3c:	b	18c5c <__assert_fail@plt+0x6fb0>
   18d40:	bl	11c70 <abort@plt>
   18d44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d48:	add	fp, sp, #28
   18d4c:	sub	sp, sp, #28
   18d50:	movw	r5, #8856	; 0x2298
   18d54:	cmp	r2, #0
   18d58:	mov	r4, r1
   18d5c:	mov	r7, r0
   18d60:	str	r0, [sp, #20]
   18d64:	movt	r5, #4
   18d68:	movne	r5, r2
   18d6c:	bl	11af0 <__errno_location@plt>
   18d70:	mov	sl, r0
   18d74:	ldr	r2, [r5, #40]	; 0x28
   18d78:	ldr	r3, [r5, #44]	; 0x2c
   18d7c:	ldm	r5, {r0, r1}
   18d80:	orr	r8, r1, #1
   18d84:	add	r9, r5, #8
   18d88:	mov	r1, #0
   18d8c:	ldr	r6, [sl]
   18d90:	stm	sp, {r0, r8, r9}
   18d94:	mov	r0, #0
   18d98:	str	r2, [sp, #12]
   18d9c:	str	r3, [sp, #16]
   18da0:	mov	r2, r7
   18da4:	mov	r3, r4
   18da8:	str	r6, [sp, #24]
   18dac:	mov	r6, r4
   18db0:	bl	17d18 <__assert_fail@plt+0x606c>
   18db4:	add	r7, r0, #1
   18db8:	mov	r0, r7
   18dbc:	bl	19fb0 <__assert_fail@plt+0x8304>
   18dc0:	mov	r4, r0
   18dc4:	ldr	r0, [r5]
   18dc8:	ldr	r2, [r5, #44]	; 0x2c
   18dcc:	ldr	r1, [r5, #40]	; 0x28
   18dd0:	mov	r3, r6
   18dd4:	stm	sp, {r0, r8, r9}
   18dd8:	str	r2, [sp, #16]
   18ddc:	ldr	r2, [sp, #20]
   18de0:	str	r1, [sp, #12]
   18de4:	mov	r0, r4
   18de8:	mov	r1, r7
   18dec:	bl	17d18 <__assert_fail@plt+0x606c>
   18df0:	ldr	r0, [sp, #24]
   18df4:	str	r0, [sl]
   18df8:	mov	r0, r4
   18dfc:	sub	sp, fp, #28
   18e00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e08:	add	fp, sp, #28
   18e0c:	sub	sp, sp, #36	; 0x24
   18e10:	movw	r8, #8856	; 0x2298
   18e14:	cmp	r3, #0
   18e18:	mov	r4, r2
   18e1c:	str	r2, [sp, #24]
   18e20:	mov	r5, r1
   18e24:	mov	r6, r0
   18e28:	str	r0, [sp, #20]
   18e2c:	movt	r8, #4
   18e30:	movne	r8, r3
   18e34:	bl	11af0 <__errno_location@plt>
   18e38:	str	r0, [sp, #28]
   18e3c:	ldr	r1, [r8, #40]	; 0x28
   18e40:	ldr	r2, [r8, #44]	; 0x2c
   18e44:	ldr	r7, [r0]
   18e48:	cmp	r4, #0
   18e4c:	add	sl, r8, #8
   18e50:	mov	r0, #0
   18e54:	ldm	r8, {r3, r9}
   18e58:	orreq	r9, r9, #1
   18e5c:	stm	sp, {r3, r9, sl}
   18e60:	str	r1, [sp, #12]
   18e64:	str	r2, [sp, #16]
   18e68:	mov	r1, #0
   18e6c:	mov	r2, r6
   18e70:	mov	r3, r5
   18e74:	str	r7, [sp, #32]
   18e78:	mov	r7, r5
   18e7c:	bl	17d18 <__assert_fail@plt+0x606c>
   18e80:	add	r4, r0, #1
   18e84:	mov	r5, r0
   18e88:	mov	r0, r4
   18e8c:	bl	19fb0 <__assert_fail@plt+0x8304>
   18e90:	mov	r6, r0
   18e94:	ldr	r0, [r8]
   18e98:	ldr	r2, [r8, #44]	; 0x2c
   18e9c:	ldr	r1, [r8, #40]	; 0x28
   18ea0:	mov	r3, r7
   18ea4:	stm	sp, {r0, r9, sl}
   18ea8:	str	r2, [sp, #16]
   18eac:	ldr	r2, [sp, #20]
   18eb0:	str	r1, [sp, #12]
   18eb4:	mov	r0, r6
   18eb8:	mov	r1, r4
   18ebc:	bl	17d18 <__assert_fail@plt+0x606c>
   18ec0:	ldr	r0, [sp, #24]
   18ec4:	ldr	r1, [sp, #32]
   18ec8:	ldr	r2, [sp, #28]
   18ecc:	cmp	r0, #0
   18ed0:	str	r1, [r2]
   18ed4:	strne	r5, [r0]
   18ed8:	mov	r0, r6
   18edc:	sub	sp, fp, #28
   18ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ee4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18ee8:	add	fp, sp, #24
   18eec:	movw	r5, #8636	; 0x21bc
   18ef0:	movw	r8, #8632	; 0x21b8
   18ef4:	movt	r5, #4
   18ef8:	movt	r8, #4
   18efc:	ldr	r0, [r5]
   18f00:	ldr	r4, [r8]
   18f04:	cmp	r0, #2
   18f08:	blt	18f34 <__assert_fail@plt+0x7288>
   18f0c:	add	r7, r4, #12
   18f10:	mov	r6, #0
   18f14:	ldr	r0, [r7, r6, lsl #3]
   18f18:	bl	1b4e8 <__assert_fail@plt+0x983c>
   18f1c:	ldr	r1, [r5]
   18f20:	add	r2, r6, #2
   18f24:	add	r0, r6, #1
   18f28:	mov	r6, r0
   18f2c:	cmp	r2, r1
   18f30:	blt	18f14 <__assert_fail@plt+0x7268>
   18f34:	ldr	r0, [r4, #4]
   18f38:	movw	r9, #8904	; 0x22c8
   18f3c:	movw	r7, #8640	; 0x21c0
   18f40:	movt	r9, #4
   18f44:	movt	r7, #4
   18f48:	cmp	r0, r9
   18f4c:	beq	18f5c <__assert_fail@plt+0x72b0>
   18f50:	bl	1b4e8 <__assert_fail@plt+0x983c>
   18f54:	mov	r0, #256	; 0x100
   18f58:	stm	r7, {r0, r9}
   18f5c:	cmp	r4, r7
   18f60:	beq	18f70 <__assert_fail@plt+0x72c4>
   18f64:	mov	r0, r4
   18f68:	bl	1b4e8 <__assert_fail@plt+0x983c>
   18f6c:	str	r7, [r8]
   18f70:	mov	r0, #1
   18f74:	str	r0, [r5]
   18f78:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18f7c:	movw	r3, #8856	; 0x2298
   18f80:	mvn	r2, #0
   18f84:	movt	r3, #4
   18f88:	b	18f8c <__assert_fail@plt+0x72e0>
   18f8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f90:	add	fp, sp, #28
   18f94:	sub	sp, sp, #44	; 0x2c
   18f98:	mov	r7, r3
   18f9c:	str	r2, [sp, #36]	; 0x24
   18fa0:	str	r1, [sp, #32]
   18fa4:	mov	r5, r0
   18fa8:	bl	11af0 <__errno_location@plt>
   18fac:	cmp	r5, #0
   18fb0:	bmi	19120 <__assert_fail@plt+0x7474>
   18fb4:	cmn	r5, #-2147483647	; 0x80000001
   18fb8:	beq	19120 <__assert_fail@plt+0x7474>
   18fbc:	movw	r8, #8636	; 0x21bc
   18fc0:	movw	r4, #8632	; 0x21b8
   18fc4:	str	r0, [sp, #28]
   18fc8:	ldr	r0, [r0]
   18fcc:	movt	r8, #4
   18fd0:	movt	r4, #4
   18fd4:	ldr	r1, [r8]
   18fd8:	ldr	r6, [r4]
   18fdc:	str	r0, [sp, #24]
   18fe0:	cmp	r1, r5
   18fe4:	ble	18ff0 <__assert_fail@plt+0x7344>
   18fe8:	mov	sl, r6
   18fec:	b	1905c <__assert_fail@plt+0x73b0>
   18ff0:	movw	r9, #8640	; 0x21c0
   18ff4:	mov	r0, #8
   18ff8:	str	r1, [fp, #-32]	; 0xffffffe0
   18ffc:	sub	r1, r5, r1
   19000:	mvn	r3, #-2147483648	; 0x80000000
   19004:	movt	r9, #4
   19008:	str	r0, [sp]
   1900c:	add	r2, r1, #1
   19010:	sub	r1, fp, #32
   19014:	subs	r0, r6, r9
   19018:	movne	r0, r6
   1901c:	bl	1a1b0 <__assert_fail@plt+0x8504>
   19020:	mov	sl, r0
   19024:	cmp	r6, r9
   19028:	str	r0, [r4]
   1902c:	bne	19038 <__assert_fail@plt+0x738c>
   19030:	ldrd	r0, [r9]
   19034:	stm	sl, {r0, r1}
   19038:	ldr	r1, [r8]
   1903c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19040:	add	r0, sl, r1, lsl #3
   19044:	sub	r1, r2, r1
   19048:	lsl	r2, r1, #3
   1904c:	mov	r1, #0
   19050:	bl	11b2c <memset@plt>
   19054:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19058:	str	r0, [r8]
   1905c:	mov	r9, sl
   19060:	ldm	r7, {r0, r1}
   19064:	orr	r8, r1, #1
   19068:	add	r1, r7, #8
   1906c:	ldr	r2, [r7, #40]	; 0x28
   19070:	ldr	r3, [r7, #44]	; 0x2c
   19074:	ldr	r6, [r9, r5, lsl #3]!
   19078:	str	r1, [sp, #20]
   1907c:	ldr	r4, [r9, #4]!
   19080:	stm	sp, {r0, r8}
   19084:	add	r0, sp, #8
   19088:	stm	r0, {r1, r2, r3}
   1908c:	ldr	r2, [sp, #32]
   19090:	ldr	r3, [sp, #36]	; 0x24
   19094:	mov	r1, r6
   19098:	mov	r0, r4
   1909c:	bl	17d18 <__assert_fail@plt+0x606c>
   190a0:	cmp	r6, r0
   190a4:	bhi	19108 <__assert_fail@plt+0x745c>
   190a8:	add	r6, r0, #1
   190ac:	movw	r0, #8904	; 0x22c8
   190b0:	movt	r0, #4
   190b4:	str	r6, [sl, r5, lsl #3]
   190b8:	cmp	r4, r0
   190bc:	beq	190c8 <__assert_fail@plt+0x741c>
   190c0:	mov	r0, r4
   190c4:	bl	1b4e8 <__assert_fail@plt+0x983c>
   190c8:	mov	r0, r6
   190cc:	bl	19fb0 <__assert_fail@plt+0x8304>
   190d0:	str	r0, [r9]
   190d4:	mov	r4, r0
   190d8:	add	r3, sp, #8
   190dc:	ldr	r0, [r7]
   190e0:	ldr	r1, [r7, #40]	; 0x28
   190e4:	ldr	r2, [r7, #44]	; 0x2c
   190e8:	stm	sp, {r0, r8}
   190ec:	ldr	r0, [sp, #20]
   190f0:	stm	r3, {r0, r1, r2}
   190f4:	ldr	r2, [sp, #32]
   190f8:	ldr	r3, [sp, #36]	; 0x24
   190fc:	mov	r0, r4
   19100:	mov	r1, r6
   19104:	bl	17d18 <__assert_fail@plt+0x606c>
   19108:	ldr	r0, [sp, #28]
   1910c:	ldr	r1, [sp, #24]
   19110:	str	r1, [r0]
   19114:	mov	r0, r4
   19118:	sub	sp, fp, #28
   1911c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19120:	bl	11c70 <abort@plt>
   19124:	movw	r3, #8856	; 0x2298
   19128:	movt	r3, #4
   1912c:	b	18f8c <__assert_fail@plt+0x72e0>
   19130:	movw	r3, #8856	; 0x2298
   19134:	mov	r1, r0
   19138:	mov	r0, #0
   1913c:	mvn	r2, #0
   19140:	movt	r3, #4
   19144:	b	18f8c <__assert_fail@plt+0x72e0>
   19148:	movw	r3, #8856	; 0x2298
   1914c:	mov	r2, r1
   19150:	mov	r1, r0
   19154:	mov	r0, #0
   19158:	movt	r3, #4
   1915c:	b	18f8c <__assert_fail@plt+0x72e0>
   19160:	push	{fp, lr}
   19164:	mov	fp, sp
   19168:	sub	sp, sp, #48	; 0x30
   1916c:	vmov.i32	q8, #0	; 0x00000000
   19170:	mov	ip, #32
   19174:	mov	r3, sp
   19178:	mov	lr, r2
   1917c:	cmp	r1, #10
   19180:	add	r2, r3, #16
   19184:	vst1.64	{d16-d17}, [r3], ip
   19188:	vst1.64	{d16-d17}, [r2]
   1918c:	vst1.64	{d16-d17}, [r3]
   19190:	beq	191b0 <__assert_fail@plt+0x7504>
   19194:	str	r1, [sp]
   19198:	mov	r3, sp
   1919c:	mov	r1, lr
   191a0:	mvn	r2, #0
   191a4:	bl	18f8c <__assert_fail@plt+0x72e0>
   191a8:	mov	sp, fp
   191ac:	pop	{fp, pc}
   191b0:	bl	11c70 <abort@plt>
   191b4:	push	{r4, sl, fp, lr}
   191b8:	add	fp, sp, #8
   191bc:	sub	sp, sp, #48	; 0x30
   191c0:	vmov.i32	q8, #0	; 0x00000000
   191c4:	mov	ip, r3
   191c8:	mov	r3, sp
   191cc:	mov	lr, #32
   191d0:	cmp	r1, #10
   191d4:	add	r4, r3, #16
   191d8:	vst1.64	{d16-d17}, [r3], lr
   191dc:	vst1.64	{d16-d17}, [r4]
   191e0:	vst1.64	{d16-d17}, [r3]
   191e4:	beq	19204 <__assert_fail@plt+0x7558>
   191e8:	str	r1, [sp]
   191ec:	mov	r1, r2
   191f0:	mov	r3, sp
   191f4:	mov	r2, ip
   191f8:	bl	18f8c <__assert_fail@plt+0x72e0>
   191fc:	sub	sp, fp, #8
   19200:	pop	{r4, sl, fp, pc}
   19204:	bl	11c70 <abort@plt>
   19208:	push	{fp, lr}
   1920c:	mov	fp, sp
   19210:	sub	sp, sp, #48	; 0x30
   19214:	vmov.i32	q8, #0	; 0x00000000
   19218:	mov	r3, sp
   1921c:	mov	ip, #32
   19220:	cmp	r0, #10
   19224:	add	r2, r3, #16
   19228:	vst1.64	{d16-d17}, [r3], ip
   1922c:	vst1.64	{d16-d17}, [r2]
   19230:	vst1.64	{d16-d17}, [r3]
   19234:	beq	19254 <__assert_fail@plt+0x75a8>
   19238:	str	r0, [sp]
   1923c:	mov	r3, sp
   19240:	mov	r0, #0
   19244:	mvn	r2, #0
   19248:	bl	18f8c <__assert_fail@plt+0x72e0>
   1924c:	mov	sp, fp
   19250:	pop	{fp, pc}
   19254:	bl	11c70 <abort@plt>
   19258:	push	{fp, lr}
   1925c:	mov	fp, sp
   19260:	sub	sp, sp, #48	; 0x30
   19264:	vmov.i32	q8, #0	; 0x00000000
   19268:	mov	r3, sp
   1926c:	mov	ip, #32
   19270:	cmp	r0, #10
   19274:	add	lr, r3, #16
   19278:	vst1.64	{d16-d17}, [r3], ip
   1927c:	vst1.64	{d16-d17}, [lr]
   19280:	vst1.64	{d16-d17}, [r3]
   19284:	beq	192a0 <__assert_fail@plt+0x75f4>
   19288:	str	r0, [sp]
   1928c:	mov	r3, sp
   19290:	mov	r0, #0
   19294:	bl	18f8c <__assert_fail@plt+0x72e0>
   19298:	mov	sp, fp
   1929c:	pop	{fp, pc}
   192a0:	bl	11c70 <abort@plt>
   192a4:	push	{r4, sl, fp, lr}
   192a8:	add	fp, sp, #8
   192ac:	sub	sp, sp, #48	; 0x30
   192b0:	mov	lr, r0
   192b4:	movw	r0, #8856	; 0x2298
   192b8:	mov	ip, r1
   192bc:	mov	r1, #32
   192c0:	mov	r4, #1
   192c4:	movt	r0, #4
   192c8:	add	r3, r0, #16
   192cc:	vld1.64	{d16-d17}, [r0], r1
   192d0:	vld1.64	{d20-d21}, [r0]
   192d4:	vld1.64	{d18-d19}, [r3]
   192d8:	mov	r3, sp
   192dc:	add	r0, r3, #32
   192e0:	add	r1, r3, #16
   192e4:	vst1.64	{d20-d21}, [r0]
   192e8:	mov	r0, #28
   192ec:	vst1.64	{d18-d19}, [r1]
   192f0:	mov	r1, r3
   192f4:	and	r0, r0, r2, lsr #3
   192f8:	and	r2, r2, #31
   192fc:	vst1.64	{d16-d17}, [r1], r0
   19300:	ldr	r0, [r1, #8]
   19304:	bic	r4, r4, r0, lsr r2
   19308:	eor	r0, r0, r4, lsl r2
   1930c:	mov	r2, ip
   19310:	str	r0, [r1, #8]
   19314:	mov	r0, #0
   19318:	mov	r1, lr
   1931c:	bl	18f8c <__assert_fail@plt+0x72e0>
   19320:	sub	sp, fp, #8
   19324:	pop	{r4, sl, fp, pc}
   19328:	push	{fp, lr}
   1932c:	mov	fp, sp
   19330:	sub	sp, sp, #48	; 0x30
   19334:	mov	ip, r0
   19338:	movw	r0, #8856	; 0x2298
   1933c:	mov	r2, #32
   19340:	movt	r0, #4
   19344:	add	r3, r0, #16
   19348:	vld1.64	{d16-d17}, [r0], r2
   1934c:	vld1.64	{d20-d21}, [r0]
   19350:	vld1.64	{d18-d19}, [r3]
   19354:	mov	r3, sp
   19358:	add	r0, r3, #32
   1935c:	add	r2, r3, #16
   19360:	vst1.64	{d20-d21}, [r0]
   19364:	mov	r0, #28
   19368:	vst1.64	{d18-d19}, [r2]
   1936c:	mov	r2, r3
   19370:	and	r0, r0, r1, lsr #3
   19374:	and	r1, r1, #31
   19378:	vst1.64	{d16-d17}, [r2], r0
   1937c:	mov	r0, #1
   19380:	ldr	lr, [r2, #8]
   19384:	bic	r0, r0, lr, lsr r1
   19388:	eor	r0, lr, r0, lsl r1
   1938c:	mov	r1, ip
   19390:	str	r0, [r2, #8]
   19394:	mov	r0, #0
   19398:	mvn	r2, #0
   1939c:	bl	18f8c <__assert_fail@plt+0x72e0>
   193a0:	mov	sp, fp
   193a4:	pop	{fp, pc}
   193a8:	push	{fp, lr}
   193ac:	mov	fp, sp
   193b0:	sub	sp, sp, #48	; 0x30
   193b4:	mov	r1, r0
   193b8:	movw	r0, #8856	; 0x2298
   193bc:	mov	r3, #32
   193c0:	movt	r0, #4
   193c4:	add	r2, r0, #16
   193c8:	vld1.64	{d16-d17}, [r0], r3
   193cc:	mov	r3, sp
   193d0:	vld1.64	{d18-d19}, [r2]
   193d4:	vld1.64	{d20-d21}, [r0]
   193d8:	add	r2, r3, #16
   193dc:	add	r0, r3, #32
   193e0:	vst1.64	{d18-d19}, [r2]
   193e4:	vst1.64	{d20-d21}, [r0]
   193e8:	mov	r0, #12
   193ec:	mov	r2, r3
   193f0:	vst1.64	{d16-d17}, [r2], r0
   193f4:	ldr	r0, [r2]
   193f8:	orr	r0, r0, #67108864	; 0x4000000
   193fc:	str	r0, [r2]
   19400:	mov	r0, #0
   19404:	mvn	r2, #0
   19408:	bl	18f8c <__assert_fail@plt+0x72e0>
   1940c:	mov	sp, fp
   19410:	pop	{fp, pc}
   19414:	push	{fp, lr}
   19418:	mov	fp, sp
   1941c:	sub	sp, sp, #48	; 0x30
   19420:	mov	ip, r1
   19424:	mov	r1, r0
   19428:	movw	r0, #8856	; 0x2298
   1942c:	mov	r2, #32
   19430:	movt	r0, #4
   19434:	add	r3, r0, #16
   19438:	vld1.64	{d16-d17}, [r0], r2
   1943c:	vld1.64	{d18-d19}, [r3]
   19440:	vld1.64	{d20-d21}, [r0]
   19444:	mov	r3, sp
   19448:	add	r2, r3, #16
   1944c:	add	r0, r3, #32
   19450:	vst1.64	{d18-d19}, [r2]
   19454:	vst1.64	{d20-d21}, [r0]
   19458:	mov	r0, #12
   1945c:	mov	r2, r3
   19460:	vst1.64	{d16-d17}, [r2], r0
   19464:	ldr	r0, [r2]
   19468:	orr	r0, r0, #67108864	; 0x4000000
   1946c:	str	r0, [r2]
   19470:	mov	r0, #0
   19474:	mov	r2, ip
   19478:	bl	18f8c <__assert_fail@plt+0x72e0>
   1947c:	mov	sp, fp
   19480:	pop	{fp, pc}
   19484:	push	{r4, sl, fp, lr}
   19488:	add	fp, sp, #8
   1948c:	sub	sp, sp, #96	; 0x60
   19490:	vmov.i32	q8, #0	; 0x00000000
   19494:	mov	ip, r2
   19498:	mov	r2, sp
   1949c:	mov	r4, #28
   194a0:	cmp	r1, #10
   194a4:	mov	r3, r2
   194a8:	add	lr, r2, #16
   194ac:	vst1.64	{d16-d17}, [r3], r4
   194b0:	vst1.64	{d16-d17}, [lr]
   194b4:	vst1.32	{d16-d17}, [r3]
   194b8:	beq	19508 <__assert_fail@plt+0x785c>
   194bc:	vld1.64	{d16-d17}, [r2], r4
   194c0:	vld1.64	{d18-d19}, [lr]
   194c4:	add	r3, sp, #48	; 0x30
   194c8:	vld1.32	{d20-d21}, [r2]
   194cc:	add	r2, r3, #20
   194d0:	add	r4, r3, #4
   194d4:	vst1.32	{d18-d19}, [r2]
   194d8:	add	r2, r3, #32
   194dc:	vst1.32	{d16-d17}, [r4]
   194e0:	vst1.32	{d20-d21}, [r2]
   194e4:	str	r1, [sp, #48]	; 0x30
   194e8:	mvn	r2, #0
   194ec:	ldr	r1, [sp, #60]	; 0x3c
   194f0:	orr	r1, r1, #67108864	; 0x4000000
   194f4:	str	r1, [sp, #60]	; 0x3c
   194f8:	mov	r1, ip
   194fc:	bl	18f8c <__assert_fail@plt+0x72e0>
   19500:	sub	sp, fp, #8
   19504:	pop	{r4, sl, fp, pc}
   19508:	bl	11c70 <abort@plt>
   1950c:	push	{r4, r5, r6, sl, fp, lr}
   19510:	add	fp, sp, #16
   19514:	sub	sp, sp, #48	; 0x30
   19518:	mov	ip, r3
   1951c:	movw	r3, #8856	; 0x2298
   19520:	mov	r6, #32
   19524:	cmp	r1, #0
   19528:	mov	r4, sp
   1952c:	movt	r3, #4
   19530:	cmpne	r2, #0
   19534:	add	r5, r4, #16
   19538:	add	lr, r3, #16
   1953c:	vld1.64	{d16-d17}, [r3], r6
   19540:	vld1.64	{d18-d19}, [lr]
   19544:	vld1.64	{d20-d21}, [r3]
   19548:	mov	r3, #10
   1954c:	vst1.64	{d16-d17}, [r4], r6
   19550:	vst1.64	{d18-d19}, [r5]
   19554:	vst1.64	{d20-d21}, [r4]
   19558:	str	r3, [sp]
   1955c:	bne	19564 <__assert_fail@plt+0x78b8>
   19560:	bl	11c70 <abort@plt>
   19564:	str	r2, [sp, #44]	; 0x2c
   19568:	str	r1, [sp, #40]	; 0x28
   1956c:	mov	r3, sp
   19570:	mov	r1, ip
   19574:	mvn	r2, #0
   19578:	bl	18f8c <__assert_fail@plt+0x72e0>
   1957c:	sub	sp, fp, #16
   19580:	pop	{r4, r5, r6, sl, fp, pc}
   19584:	push	{r4, r5, r6, sl, fp, lr}
   19588:	add	fp, sp, #16
   1958c:	sub	sp, sp, #48	; 0x30
   19590:	mov	lr, r3
   19594:	movw	r3, #8856	; 0x2298
   19598:	mov	r6, #32
   1959c:	cmp	r1, #0
   195a0:	mov	r4, sp
   195a4:	movt	r3, #4
   195a8:	cmpne	r2, #0
   195ac:	add	r5, r4, #16
   195b0:	add	ip, r3, #16
   195b4:	vld1.64	{d16-d17}, [r3], r6
   195b8:	vld1.64	{d18-d19}, [ip]
   195bc:	vld1.64	{d20-d21}, [r3]
   195c0:	mov	r3, #10
   195c4:	vst1.64	{d16-d17}, [r4], r6
   195c8:	vst1.64	{d18-d19}, [r5]
   195cc:	vst1.64	{d20-d21}, [r4]
   195d0:	str	r3, [sp]
   195d4:	bne	195dc <__assert_fail@plt+0x7930>
   195d8:	bl	11c70 <abort@plt>
   195dc:	ldr	ip, [fp, #8]
   195e0:	str	r2, [sp, #44]	; 0x2c
   195e4:	str	r1, [sp, #40]	; 0x28
   195e8:	mov	r3, sp
   195ec:	mov	r1, lr
   195f0:	mov	r2, ip
   195f4:	bl	18f8c <__assert_fail@plt+0x72e0>
   195f8:	sub	sp, fp, #16
   195fc:	pop	{r4, r5, r6, sl, fp, pc}
   19600:	push	{r4, sl, fp, lr}
   19604:	add	fp, sp, #8
   19608:	sub	sp, sp, #48	; 0x30
   1960c:	movw	r3, #8856	; 0x2298
   19610:	mov	lr, #32
   19614:	mov	ip, r2
   19618:	cmp	r0, #0
   1961c:	movt	r3, #4
   19620:	cmpne	r1, #0
   19624:	add	r2, r3, #16
   19628:	vld1.64	{d16-d17}, [r3], lr
   1962c:	vld1.64	{d20-d21}, [r3]
   19630:	vld1.64	{d18-d19}, [r2]
   19634:	mov	r2, sp
   19638:	add	r4, r2, #16
   1963c:	vst1.64	{d16-d17}, [r2], lr
   19640:	vst1.64	{d20-d21}, [r2]
   19644:	mov	r2, #10
   19648:	vst1.64	{d18-d19}, [r4]
   1964c:	str	r2, [sp]
   19650:	bne	19658 <__assert_fail@plt+0x79ac>
   19654:	bl	11c70 <abort@plt>
   19658:	str	r1, [sp, #44]	; 0x2c
   1965c:	str	r0, [sp, #40]	; 0x28
   19660:	mov	r3, sp
   19664:	mov	r0, #0
   19668:	mov	r1, ip
   1966c:	mvn	r2, #0
   19670:	bl	18f8c <__assert_fail@plt+0x72e0>
   19674:	sub	sp, fp, #8
   19678:	pop	{r4, sl, fp, pc}
   1967c:	push	{r4, r5, fp, lr}
   19680:	add	fp, sp, #8
   19684:	sub	sp, sp, #48	; 0x30
   19688:	mov	ip, r3
   1968c:	movw	r3, #8856	; 0x2298
   19690:	mov	r4, #32
   19694:	mov	lr, r2
   19698:	cmp	r0, #0
   1969c:	movt	r3, #4
   196a0:	cmpne	r1, #0
   196a4:	add	r2, r3, #16
   196a8:	vld1.64	{d16-d17}, [r3], r4
   196ac:	vld1.64	{d20-d21}, [r3]
   196b0:	vld1.64	{d18-d19}, [r2]
   196b4:	mov	r2, sp
   196b8:	add	r5, r2, #16
   196bc:	vst1.64	{d16-d17}, [r2], r4
   196c0:	vst1.64	{d20-d21}, [r2]
   196c4:	mov	r2, #10
   196c8:	vst1.64	{d18-d19}, [r5]
   196cc:	str	r2, [sp]
   196d0:	bne	196d8 <__assert_fail@plt+0x7a2c>
   196d4:	bl	11c70 <abort@plt>
   196d8:	str	r1, [sp, #44]	; 0x2c
   196dc:	str	r0, [sp, #40]	; 0x28
   196e0:	mov	r3, sp
   196e4:	mov	r0, #0
   196e8:	mov	r1, lr
   196ec:	mov	r2, ip
   196f0:	bl	18f8c <__assert_fail@plt+0x72e0>
   196f4:	sub	sp, fp, #8
   196f8:	pop	{r4, r5, fp, pc}
   196fc:	movw	r3, #8648	; 0x21c8
   19700:	movt	r3, #4
   19704:	b	18f8c <__assert_fail@plt+0x72e0>
   19708:	movw	r3, #8648	; 0x21c8
   1970c:	mov	r2, r1
   19710:	mov	r1, r0
   19714:	mov	r0, #0
   19718:	movt	r3, #4
   1971c:	b	18f8c <__assert_fail@plt+0x72e0>
   19720:	movw	r3, #8648	; 0x21c8
   19724:	mvn	r2, #0
   19728:	movt	r3, #4
   1972c:	b	18f8c <__assert_fail@plt+0x72e0>
   19730:	movw	r3, #8648	; 0x21c8
   19734:	mov	r1, r0
   19738:	mov	r0, #0
   1973c:	mvn	r2, #0
   19740:	movt	r3, #4
   19744:	b	18f8c <__assert_fail@plt+0x72e0>
   19748:	push	{r4, r5, fp, lr}
   1974c:	add	fp, sp, #8
   19750:	mov	r5, r0
   19754:	mov	r4, r1
   19758:	mov	r0, #0
   1975c:	mov	r2, #5
   19760:	mov	r1, r5
   19764:	bl	11934 <dcgettext@plt>
   19768:	cmp	r0, r5
   1976c:	popne	{r4, r5, fp, pc}
   19770:	bl	2f454 <__assert_fail@plt+0x1d7a8>
   19774:	ldrb	r1, [r0]
   19778:	and	r1, r1, #223	; 0xdf
   1977c:	cmp	r1, #71	; 0x47
   19780:	beq	197e8 <__assert_fail@plt+0x7b3c>
   19784:	cmp	r1, #85	; 0x55
   19788:	bne	19840 <__assert_fail@plt+0x7b94>
   1978c:	ldrb	r1, [r0, #1]
   19790:	and	r1, r1, #223	; 0xdf
   19794:	cmp	r1, #84	; 0x54
   19798:	bne	19840 <__assert_fail@plt+0x7b94>
   1979c:	ldrb	r1, [r0, #2]
   197a0:	and	r1, r1, #223	; 0xdf
   197a4:	cmp	r1, #70	; 0x46
   197a8:	bne	19840 <__assert_fail@plt+0x7b94>
   197ac:	ldrb	r1, [r0, #3]
   197b0:	cmp	r1, #45	; 0x2d
   197b4:	bne	19840 <__assert_fail@plt+0x7b94>
   197b8:	ldrb	r1, [r0, #4]
   197bc:	cmp	r1, #56	; 0x38
   197c0:	bne	19840 <__assert_fail@plt+0x7b94>
   197c4:	ldrb	r0, [r0, #5]
   197c8:	cmp	r0, #0
   197cc:	bne	19840 <__assert_fail@plt+0x7b94>
   197d0:	ldrb	r1, [r5]
   197d4:	movw	r2, #3972	; 0xf84
   197d8:	movw	r0, #3976	; 0xf88
   197dc:	movt	r2, #3
   197e0:	movt	r0, #3
   197e4:	b	19870 <__assert_fail@plt+0x7bc4>
   197e8:	ldrb	r1, [r0, #1]
   197ec:	and	r1, r1, #223	; 0xdf
   197f0:	cmp	r1, #66	; 0x42
   197f4:	bne	19840 <__assert_fail@plt+0x7b94>
   197f8:	ldrb	r1, [r0, #2]
   197fc:	cmp	r1, #49	; 0x31
   19800:	bne	19840 <__assert_fail@plt+0x7b94>
   19804:	ldrb	r1, [r0, #3]
   19808:	cmp	r1, #56	; 0x38
   1980c:	bne	19840 <__assert_fail@plt+0x7b94>
   19810:	ldrb	r1, [r0, #4]
   19814:	cmp	r1, #48	; 0x30
   19818:	bne	19840 <__assert_fail@plt+0x7b94>
   1981c:	ldrb	r1, [r0, #5]
   19820:	cmp	r1, #51	; 0x33
   19824:	bne	19840 <__assert_fail@plt+0x7b94>
   19828:	ldrb	r1, [r0, #6]
   1982c:	cmp	r1, #48	; 0x30
   19830:	bne	19840 <__assert_fail@plt+0x7b94>
   19834:	ldrb	r0, [r0, #7]
   19838:	cmp	r0, #0
   1983c:	beq	1985c <__assert_fail@plt+0x7bb0>
   19840:	movw	r1, #3968	; 0xf80
   19844:	movw	r0, #1201	; 0x4b1
   19848:	cmp	r4, #9
   1984c:	movt	r1, #3
   19850:	movt	r0, #3
   19854:	moveq	r0, r1
   19858:	pop	{r4, r5, fp, pc}
   1985c:	ldrb	r1, [r5]
   19860:	movw	r2, #3980	; 0xf8c
   19864:	movw	r0, #3984	; 0xf90
   19868:	movt	r2, #3
   1986c:	movt	r0, #3
   19870:	cmp	r1, #96	; 0x60
   19874:	moveq	r0, r2
   19878:	pop	{r4, r5, fp, pc}
   1987c:	push	{r4, r5, fp, lr}
   19880:	add	fp, sp, #8
   19884:	mov	r4, r1
   19888:	mov	r1, #0
   1988c:	mov	r5, r0
   19890:	mov	r2, r4
   19894:	bl	11b68 <memchr@plt>
   19898:	sub	r1, r0, r5
   1989c:	cmp	r0, #0
   198a0:	addne	r4, r1, #1
   198a4:	mov	r0, r4
   198a8:	pop	{r4, r5, fp, pc}
   198ac:	push	{r4, r5, r6, r7, fp, lr}
   198b0:	add	fp, sp, #16
   198b4:	mov	r4, r0
   198b8:	cmp	r0, #2
   198bc:	bhi	198ec <__assert_fail@plt+0x7c40>
   198c0:	mov	r0, r4
   198c4:	bl	2f678 <__assert_fail@plt+0x1d9cc>
   198c8:	mov	r5, r0
   198cc:	bl	11af0 <__errno_location@plt>
   198d0:	ldr	r7, [r0]
   198d4:	mov	r6, r0
   198d8:	mov	r0, r4
   198dc:	bl	11c88 <close@plt>
   198e0:	mov	r0, r5
   198e4:	str	r7, [r6]
   198e8:	pop	{r4, r5, r6, r7, fp, pc}
   198ec:	mov	r0, r4
   198f0:	pop	{r4, r5, r6, r7, fp, pc}
   198f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   198f8:	add	fp, sp, #24
   198fc:	sub	sp, sp, #32
   19900:	ldr	r7, [fp, #12]
   19904:	ldr	r6, [fp, #8]
   19908:	mov	r4, r2
   1990c:	mov	r5, r0
   19910:	cmp	r1, #0
   19914:	beq	19934 <__assert_fail@plt+0x7c88>
   19918:	mov	r2, r1
   1991c:	movw	r1, #4072	; 0xfe8
   19920:	str	r3, [sp]
   19924:	mov	r0, r5
   19928:	mov	r3, r4
   1992c:	movt	r1, #3
   19930:	b	19944 <__assert_fail@plt+0x7c98>
   19934:	movw	r1, #4084	; 0xff4
   19938:	mov	r0, r5
   1993c:	mov	r2, r4
   19940:	movt	r1, #3
   19944:	bl	11ad8 <fprintf@plt>
   19948:	movw	r1, #4091	; 0xffb
   1994c:	mov	r0, #0
   19950:	mov	r2, #5
   19954:	movt	r1, #3
   19958:	bl	11934 <dcgettext@plt>
   1995c:	movw	r1, #4787	; 0x12b3
   19960:	mov	r2, r0
   19964:	mov	r0, r5
   19968:	movw	r3, #2022	; 0x7e6
   1996c:	movt	r1, #3
   19970:	bl	11ad8 <fprintf@plt>
   19974:	mov	r0, #10
   19978:	mov	r1, r5
   1997c:	bl	11bc8 <fputc@plt>
   19980:	movw	r1, #4095	; 0xfff
   19984:	mov	r0, #0
   19988:	mov	r2, #5
   1998c:	movt	r1, #3
   19990:	bl	11934 <dcgettext@plt>
   19994:	movw	r2, #4266	; 0x10aa
   19998:	mov	r1, r0
   1999c:	mov	r0, r5
   199a0:	movt	r2, #3
   199a4:	bl	11ad8 <fprintf@plt>
   199a8:	mov	r0, #10
   199ac:	mov	r1, r5
   199b0:	bl	11bc8 <fputc@plt>
   199b4:	cmp	r7, #9
   199b8:	bhi	199f4 <__assert_fail@plt+0x7d48>
   199bc:	add	r0, pc, #0
   199c0:	ldr	pc, [r0, r7, lsl #2]
   199c4:	andeq	r9, r1, ip, ror #19
   199c8:	andeq	r9, r1, r0, lsl #20
   199cc:	andeq	r9, r1, ip, lsr #20
   199d0:	andeq	r9, r1, r8, asr sl
   199d4:	andeq	r9, r1, r0, lsl #21
   199d8:	andeq	r9, r1, ip, lsr #21
   199dc:	andeq	r9, r1, r0, ror #21
   199e0:	andeq	r9, r1, r0, lsr #22
   199e4:			; <UNDEFINED> instruction: 0x00019bbc
   199e8:	andeq	r9, r1, r4, ror #22
   199ec:	sub	sp, fp, #24
   199f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   199f4:	movw	r1, #4619	; 0x120b
   199f8:	movt	r1, #3
   199fc:	b	19b6c <__assert_fail@plt+0x7ec0>
   19a00:	movw	r1, #4300	; 0x10cc
   19a04:	mov	r0, #0
   19a08:	mov	r2, #5
   19a0c:	movt	r1, #3
   19a10:	bl	11934 <dcgettext@plt>
   19a14:	ldr	r2, [r6]
   19a18:	mov	r1, r0
   19a1c:	mov	r0, r5
   19a20:	sub	sp, fp, #24
   19a24:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19a28:	b	11ad8 <fprintf@plt>
   19a2c:	movw	r1, #4316	; 0x10dc
   19a30:	mov	r0, #0
   19a34:	mov	r2, #5
   19a38:	movt	r1, #3
   19a3c:	bl	11934 <dcgettext@plt>
   19a40:	ldm	r6, {r2, r3}
   19a44:	mov	r1, r0
   19a48:	mov	r0, r5
   19a4c:	sub	sp, fp, #24
   19a50:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19a54:	b	11ad8 <fprintf@plt>
   19a58:	movw	r1, #4339	; 0x10f3
   19a5c:	mov	r0, #0
   19a60:	mov	r2, #5
   19a64:	movt	r1, #3
   19a68:	bl	11934 <dcgettext@plt>
   19a6c:	mov	r1, r0
   19a70:	ldr	r0, [r6, #8]
   19a74:	ldm	r6, {r2, r3}
   19a78:	str	r0, [sp]
   19a7c:	b	19b18 <__assert_fail@plt+0x7e6c>
   19a80:	movw	r1, #4367	; 0x110f
   19a84:	mov	r0, #0
   19a88:	mov	r2, #5
   19a8c:	movt	r1, #3
   19a90:	bl	11934 <dcgettext@plt>
   19a94:	mov	r1, r0
   19a98:	ldr	r0, [r6, #8]
   19a9c:	ldm	r6, {r2, r3}
   19aa0:	ldr	r7, [r6, #12]
   19aa4:	stm	sp, {r0, r7}
   19aa8:	b	19b18 <__assert_fail@plt+0x7e6c>
   19aac:	movw	r1, #4399	; 0x112f
   19ab0:	mov	r0, #0
   19ab4:	mov	r2, #5
   19ab8:	movt	r1, #3
   19abc:	bl	11934 <dcgettext@plt>
   19ac0:	mov	r1, r0
   19ac4:	ldm	r6, {r2, r3}
   19ac8:	ldr	r0, [r6, #8]
   19acc:	ldr	r7, [r6, #12]
   19ad0:	ldr	r6, [r6, #16]
   19ad4:	stm	sp, {r0, r7}
   19ad8:	str	r6, [sp, #8]
   19adc:	b	19b18 <__assert_fail@plt+0x7e6c>
   19ae0:	movw	r1, #4435	; 0x1153
   19ae4:	mov	r0, #0
   19ae8:	mov	r2, #5
   19aec:	movt	r1, #3
   19af0:	bl	11934 <dcgettext@plt>
   19af4:	mov	r1, r0
   19af8:	ldm	r6, {r2, r3}
   19afc:	ldr	r0, [r6, #8]
   19b00:	ldr	r7, [r6, #12]
   19b04:	ldr	r4, [r6, #16]
   19b08:	ldr	r6, [r6, #20]
   19b0c:	stm	sp, {r0, r7}
   19b10:	str	r4, [sp, #8]
   19b14:	str	r6, [sp, #12]
   19b18:	mov	r0, r5
   19b1c:	b	19c0c <__assert_fail@plt+0x7f60>
   19b20:	movw	r1, #4475	; 0x117b
   19b24:	mov	r0, #0
   19b28:	mov	r2, #5
   19b2c:	movt	r1, #3
   19b30:	bl	11934 <dcgettext@plt>
   19b34:	mov	ip, r0
   19b38:	ldm	r6, {r2, r3}
   19b3c:	ldr	r0, [r6, #8]
   19b40:	ldr	r7, [r6, #12]
   19b44:	ldr	r4, [r6, #16]
   19b48:	ldr	r1, [r6, #20]
   19b4c:	ldr	r6, [r6, #24]
   19b50:	stm	sp, {r0, r7}
   19b54:	str	r4, [sp, #8]
   19b58:	str	r1, [sp, #12]
   19b5c:	str	r6, [sp, #16]
   19b60:	b	19c04 <__assert_fail@plt+0x7f58>
   19b64:	movw	r1, #4567	; 0x11d7
   19b68:	movt	r1, #3
   19b6c:	mov	r0, #0
   19b70:	mov	r2, #5
   19b74:	bl	11934 <dcgettext@plt>
   19b78:	mov	ip, r0
   19b7c:	ldr	r2, [r6]
   19b80:	ldr	r3, [r6, #4]
   19b84:	ldr	r0, [r6, #8]
   19b88:	ldr	r7, [r6, #12]
   19b8c:	ldr	r4, [r6, #16]
   19b90:	ldr	r1, [r6, #20]
   19b94:	ldr	lr, [r6, #24]
   19b98:	ldr	r8, [r6, #28]
   19b9c:	ldr	r6, [r6, #32]
   19ba0:	stm	sp, {r0, r7}
   19ba4:	str	r4, [sp, #8]
   19ba8:	str	r1, [sp, #12]
   19bac:	str	lr, [sp, #16]
   19bb0:	str	r8, [sp, #20]
   19bb4:	str	r6, [sp, #24]
   19bb8:	b	19c04 <__assert_fail@plt+0x7f58>
   19bbc:	movw	r1, #4519	; 0x11a7
   19bc0:	mov	r0, #0
   19bc4:	mov	r2, #5
   19bc8:	movt	r1, #3
   19bcc:	bl	11934 <dcgettext@plt>
   19bd0:	mov	ip, r0
   19bd4:	ldm	r6, {r2, r3}
   19bd8:	ldr	r0, [r6, #8]
   19bdc:	ldr	r7, [r6, #12]
   19be0:	ldr	r4, [r6, #16]
   19be4:	ldr	r1, [r6, #20]
   19be8:	ldr	lr, [r6, #24]
   19bec:	ldr	r6, [r6, #28]
   19bf0:	stm	sp, {r0, r7}
   19bf4:	str	r4, [sp, #8]
   19bf8:	str	r1, [sp, #12]
   19bfc:	str	lr, [sp, #16]
   19c00:	str	r6, [sp, #20]
   19c04:	mov	r0, r5
   19c08:	mov	r1, ip
   19c0c:	bl	11ad8 <fprintf@plt>
   19c10:	sub	sp, fp, #24
   19c14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19c18:	push	{r4, sl, fp, lr}
   19c1c:	add	fp, sp, #8
   19c20:	sub	sp, sp, #8
   19c24:	ldr	ip, [fp, #8]
   19c28:	mov	lr, #0
   19c2c:	ldr	r4, [ip, lr, lsl #2]
   19c30:	add	lr, lr, #1
   19c34:	cmp	r4, #0
   19c38:	bne	19c2c <__assert_fail@plt+0x7f80>
   19c3c:	sub	r4, lr, #1
   19c40:	str	ip, [sp]
   19c44:	str	r4, [sp, #4]
   19c48:	bl	198f4 <__assert_fail@plt+0x7c48>
   19c4c:	sub	sp, fp, #8
   19c50:	pop	{r4, sl, fp, pc}
   19c54:	push	{fp, lr}
   19c58:	mov	fp, sp
   19c5c:	sub	sp, sp, #48	; 0x30
   19c60:	ldr	ip, [fp, #8]
   19c64:	ldr	lr, [ip]
   19c68:	cmp	lr, #0
   19c6c:	str	lr, [sp, #8]
   19c70:	beq	19d0c <__assert_fail@plt+0x8060>
   19c74:	ldr	lr, [ip, #4]
   19c78:	cmp	lr, #0
   19c7c:	str	lr, [sp, #12]
   19c80:	beq	19d14 <__assert_fail@plt+0x8068>
   19c84:	ldr	lr, [ip, #8]
   19c88:	cmp	lr, #0
   19c8c:	str	lr, [sp, #16]
   19c90:	beq	19d1c <__assert_fail@plt+0x8070>
   19c94:	ldr	lr, [ip, #12]
   19c98:	cmp	lr, #0
   19c9c:	str	lr, [sp, #20]
   19ca0:	beq	19d24 <__assert_fail@plt+0x8078>
   19ca4:	ldr	lr, [ip, #16]
   19ca8:	cmp	lr, #0
   19cac:	str	lr, [sp, #24]
   19cb0:	beq	19d2c <__assert_fail@plt+0x8080>
   19cb4:	ldr	lr, [ip, #20]
   19cb8:	cmp	lr, #0
   19cbc:	str	lr, [sp, #28]
   19cc0:	beq	19d34 <__assert_fail@plt+0x8088>
   19cc4:	ldr	lr, [ip, #24]
   19cc8:	cmp	lr, #0
   19ccc:	str	lr, [sp, #32]
   19cd0:	beq	19d3c <__assert_fail@plt+0x8090>
   19cd4:	ldr	lr, [ip, #28]
   19cd8:	cmp	lr, #0
   19cdc:	str	lr, [sp, #36]	; 0x24
   19ce0:	beq	19d44 <__assert_fail@plt+0x8098>
   19ce4:	ldr	lr, [ip, #32]
   19ce8:	cmp	lr, #0
   19cec:	str	lr, [sp, #40]	; 0x28
   19cf0:	beq	19d4c <__assert_fail@plt+0x80a0>
   19cf4:	ldr	lr, [ip, #36]	; 0x24
   19cf8:	mov	ip, #10
   19cfc:	cmp	lr, #0
   19d00:	str	lr, [sp, #44]	; 0x2c
   19d04:	movweq	ip, #9
   19d08:	b	19d50 <__assert_fail@plt+0x80a4>
   19d0c:	mov	ip, #0
   19d10:	b	19d50 <__assert_fail@plt+0x80a4>
   19d14:	mov	ip, #1
   19d18:	b	19d50 <__assert_fail@plt+0x80a4>
   19d1c:	mov	ip, #2
   19d20:	b	19d50 <__assert_fail@plt+0x80a4>
   19d24:	mov	ip, #3
   19d28:	b	19d50 <__assert_fail@plt+0x80a4>
   19d2c:	mov	ip, #4
   19d30:	b	19d50 <__assert_fail@plt+0x80a4>
   19d34:	mov	ip, #5
   19d38:	b	19d50 <__assert_fail@plt+0x80a4>
   19d3c:	mov	ip, #6
   19d40:	b	19d50 <__assert_fail@plt+0x80a4>
   19d44:	mov	ip, #7
   19d48:	b	19d50 <__assert_fail@plt+0x80a4>
   19d4c:	mov	ip, #8
   19d50:	add	lr, sp, #8
   19d54:	str	ip, [sp, #4]
   19d58:	str	lr, [sp]
   19d5c:	bl	198f4 <__assert_fail@plt+0x7c48>
   19d60:	mov	sp, fp
   19d64:	pop	{fp, pc}
   19d68:	push	{fp, lr}
   19d6c:	mov	fp, sp
   19d70:	sub	sp, sp, #56	; 0x38
   19d74:	add	ip, fp, #8
   19d78:	str	ip, [sp, #12]
   19d7c:	ldr	lr, [fp, #8]
   19d80:	cmp	lr, #0
   19d84:	str	lr, [sp, #16]
   19d88:	beq	19e24 <__assert_fail@plt+0x8178>
   19d8c:	ldr	lr, [ip, #4]
   19d90:	cmp	lr, #0
   19d94:	str	lr, [sp, #20]
   19d98:	beq	19e2c <__assert_fail@plt+0x8180>
   19d9c:	ldr	lr, [ip, #8]
   19da0:	cmp	lr, #0
   19da4:	str	lr, [sp, #24]
   19da8:	beq	19e34 <__assert_fail@plt+0x8188>
   19dac:	ldr	lr, [ip, #12]
   19db0:	cmp	lr, #0
   19db4:	str	lr, [sp, #28]
   19db8:	beq	19e3c <__assert_fail@plt+0x8190>
   19dbc:	ldr	lr, [ip, #16]
   19dc0:	cmp	lr, #0
   19dc4:	str	lr, [sp, #32]
   19dc8:	beq	19e44 <__assert_fail@plt+0x8198>
   19dcc:	ldr	lr, [ip, #20]
   19dd0:	cmp	lr, #0
   19dd4:	str	lr, [sp, #36]	; 0x24
   19dd8:	beq	19e4c <__assert_fail@plt+0x81a0>
   19ddc:	ldr	lr, [ip, #24]
   19de0:	cmp	lr, #0
   19de4:	str	lr, [sp, #40]	; 0x28
   19de8:	beq	19e54 <__assert_fail@plt+0x81a8>
   19dec:	ldr	lr, [ip, #28]
   19df0:	cmp	lr, #0
   19df4:	str	lr, [sp, #44]	; 0x2c
   19df8:	beq	19e5c <__assert_fail@plt+0x81b0>
   19dfc:	ldr	lr, [ip, #32]
   19e00:	cmp	lr, #0
   19e04:	str	lr, [sp, #48]	; 0x30
   19e08:	beq	19e64 <__assert_fail@plt+0x81b8>
   19e0c:	ldr	lr, [ip, #36]	; 0x24
   19e10:	mov	ip, #10
   19e14:	cmp	lr, #0
   19e18:	str	lr, [sp, #52]	; 0x34
   19e1c:	movweq	ip, #9
   19e20:	b	19e68 <__assert_fail@plt+0x81bc>
   19e24:	mov	ip, #0
   19e28:	b	19e68 <__assert_fail@plt+0x81bc>
   19e2c:	mov	ip, #1
   19e30:	b	19e68 <__assert_fail@plt+0x81bc>
   19e34:	mov	ip, #2
   19e38:	b	19e68 <__assert_fail@plt+0x81bc>
   19e3c:	mov	ip, #3
   19e40:	b	19e68 <__assert_fail@plt+0x81bc>
   19e44:	mov	ip, #4
   19e48:	b	19e68 <__assert_fail@plt+0x81bc>
   19e4c:	mov	ip, #5
   19e50:	b	19e68 <__assert_fail@plt+0x81bc>
   19e54:	mov	ip, #6
   19e58:	b	19e68 <__assert_fail@plt+0x81bc>
   19e5c:	mov	ip, #7
   19e60:	b	19e68 <__assert_fail@plt+0x81bc>
   19e64:	mov	ip, #8
   19e68:	add	lr, sp, #16
   19e6c:	str	ip, [sp, #4]
   19e70:	str	lr, [sp]
   19e74:	bl	198f4 <__assert_fail@plt+0x7c48>
   19e78:	mov	sp, fp
   19e7c:	pop	{fp, pc}
   19e80:	push	{fp, lr}
   19e84:	mov	fp, sp
   19e88:	movw	r0, #8724	; 0x2214
   19e8c:	movt	r0, #4
   19e90:	ldr	r1, [r0]
   19e94:	mov	r0, #10
   19e98:	bl	11bc8 <fputc@plt>
   19e9c:	movw	r1, #4679	; 0x1247
   19ea0:	mov	r0, #0
   19ea4:	mov	r2, #5
   19ea8:	movt	r1, #3
   19eac:	bl	11934 <dcgettext@plt>
   19eb0:	movw	r1, #3540	; 0xdd4
   19eb4:	movt	r1, #3
   19eb8:	bl	11868 <printf@plt>
   19ebc:	movw	r1, #4699	; 0x125b
   19ec0:	mov	r0, #0
   19ec4:	mov	r2, #5
   19ec8:	movt	r1, #3
   19ecc:	bl	11934 <dcgettext@plt>
   19ed0:	movw	r1, #2869	; 0xb35
   19ed4:	movw	r2, #3454	; 0xd7e
   19ed8:	movt	r1, #3
   19edc:	movt	r2, #3
   19ee0:	bl	11868 <printf@plt>
   19ee4:	movw	r1, #4719	; 0x126f
   19ee8:	mov	r0, #0
   19eec:	mov	r2, #5
   19ef0:	movt	r1, #3
   19ef4:	bl	11934 <dcgettext@plt>
   19ef8:	movw	r1, #4758	; 0x1296
   19efc:	movt	r1, #3
   19f00:	pop	{fp, lr}
   19f04:	b	11868 <printf@plt>
   19f08:	push	{r4, r5, r6, sl, fp, lr}
   19f0c:	add	fp, sp, #16
   19f10:	mov	r4, r2
   19f14:	mov	r5, r1
   19f18:	mov	r6, r0
   19f1c:	bl	1b6a0 <__assert_fail@plt+0x99f4>
   19f20:	cmp	r0, #0
   19f24:	popne	{r4, r5, r6, sl, fp, pc}
   19f28:	cmp	r6, #0
   19f2c:	beq	19f40 <__assert_fail@plt+0x8294>
   19f30:	cmp	r5, #0
   19f34:	cmpne	r4, #0
   19f38:	bne	19f40 <__assert_fail@plt+0x8294>
   19f3c:	pop	{r4, r5, r6, sl, fp, pc}
   19f40:	bl	1a4bc <__assert_fail@plt+0x8810>
   19f44:	push	{r4, r5, r6, sl, fp, lr}
   19f48:	add	fp, sp, #16
   19f4c:	mov	r4, r2
   19f50:	mov	r5, r1
   19f54:	mov	r6, r0
   19f58:	bl	1b6a0 <__assert_fail@plt+0x99f4>
   19f5c:	cmp	r0, #0
   19f60:	popne	{r4, r5, r6, sl, fp, pc}
   19f64:	cmp	r6, #0
   19f68:	beq	19f7c <__assert_fail@plt+0x82d0>
   19f6c:	cmp	r5, #0
   19f70:	cmpne	r4, #0
   19f74:	bne	19f7c <__assert_fail@plt+0x82d0>
   19f78:	pop	{r4, r5, r6, sl, fp, pc}
   19f7c:	bl	1a4bc <__assert_fail@plt+0x8810>
   19f80:	push	{fp, lr}
   19f84:	mov	fp, sp
   19f88:	bl	1b5b8 <__assert_fail@plt+0x990c>
   19f8c:	cmp	r0, #0
   19f90:	popne	{fp, pc}
   19f94:	bl	1a4bc <__assert_fail@plt+0x8810>
   19f98:	push	{fp, lr}
   19f9c:	mov	fp, sp
   19fa0:	bl	1b5b8 <__assert_fail@plt+0x990c>
   19fa4:	cmp	r0, #0
   19fa8:	popne	{fp, pc}
   19fac:	bl	1a4bc <__assert_fail@plt+0x8810>
   19fb0:	push	{fp, lr}
   19fb4:	mov	fp, sp
   19fb8:	bl	1b5b8 <__assert_fail@plt+0x990c>
   19fbc:	cmp	r0, #0
   19fc0:	popne	{fp, pc}
   19fc4:	bl	1a4bc <__assert_fail@plt+0x8810>
   19fc8:	push	{r4, r5, fp, lr}
   19fcc:	add	fp, sp, #8
   19fd0:	mov	r4, r1
   19fd4:	mov	r5, r0
   19fd8:	bl	1b64c <__assert_fail@plt+0x99a0>
   19fdc:	cmp	r0, #0
   19fe0:	popne	{r4, r5, fp, pc}
   19fe4:	cmp	r5, #0
   19fe8:	beq	19ff8 <__assert_fail@plt+0x834c>
   19fec:	cmp	r4, #0
   19ff0:	bne	19ff8 <__assert_fail@plt+0x834c>
   19ff4:	pop	{r4, r5, fp, pc}
   19ff8:	bl	1a4bc <__assert_fail@plt+0x8810>
   19ffc:	push	{fp, lr}
   1a000:	mov	fp, sp
   1a004:	cmp	r1, #0
   1a008:	orreq	r1, r1, #1
   1a00c:	bl	1b64c <__assert_fail@plt+0x99a0>
   1a010:	cmp	r0, #0
   1a014:	popne	{fp, pc}
   1a018:	bl	1a4bc <__assert_fail@plt+0x8810>
   1a01c:	push	{fp, lr}
   1a020:	mov	fp, sp
   1a024:	clz	r3, r2
   1a028:	lsr	ip, r3, #5
   1a02c:	clz	r3, r1
   1a030:	lsr	r3, r3, #5
   1a034:	orrs	r3, r3, ip
   1a038:	movwne	r1, #1
   1a03c:	movwne	r2, #1
   1a040:	bl	1b6a0 <__assert_fail@plt+0x99f4>
   1a044:	cmp	r0, #0
   1a048:	popne	{fp, pc}
   1a04c:	bl	1a4bc <__assert_fail@plt+0x8810>
   1a050:	push	{fp, lr}
   1a054:	mov	fp, sp
   1a058:	mov	r2, r1
   1a05c:	mov	r1, r0
   1a060:	mov	r0, #0
   1a064:	bl	1b6a0 <__assert_fail@plt+0x99f4>
   1a068:	cmp	r0, #0
   1a06c:	popne	{fp, pc}
   1a070:	bl	1a4bc <__assert_fail@plt+0x8810>
   1a074:	push	{fp, lr}
   1a078:	mov	fp, sp
   1a07c:	mov	r2, r1
   1a080:	mov	r1, r0
   1a084:	clz	r0, r2
   1a088:	clz	r3, r1
   1a08c:	lsr	r0, r0, #5
   1a090:	lsr	r3, r3, #5
   1a094:	orrs	r0, r3, r0
   1a098:	mov	r0, #0
   1a09c:	movwne	r1, #1
   1a0a0:	movwne	r2, #1
   1a0a4:	bl	1b6a0 <__assert_fail@plt+0x99f4>
   1a0a8:	cmp	r0, #0
   1a0ac:	popne	{fp, pc}
   1a0b0:	bl	1a4bc <__assert_fail@plt+0x8810>
   1a0b4:	push	{r4, r5, r6, sl, fp, lr}
   1a0b8:	add	fp, sp, #16
   1a0bc:	ldr	r5, [r1]
   1a0c0:	mov	r4, r1
   1a0c4:	mov	r6, r0
   1a0c8:	cmp	r0, #0
   1a0cc:	beq	1a0e4 <__assert_fail@plt+0x8438>
   1a0d0:	mov	r0, #1
   1a0d4:	add	r0, r0, r5, lsr #1
   1a0d8:	adds	r5, r5, r0
   1a0dc:	bcc	1a0ec <__assert_fail@plt+0x8440>
   1a0e0:	b	1a128 <__assert_fail@plt+0x847c>
   1a0e4:	cmp	r5, #0
   1a0e8:	movweq	r5, #64	; 0x40
   1a0ec:	mov	r0, r6
   1a0f0:	mov	r1, r5
   1a0f4:	mov	r2, #1
   1a0f8:	bl	1b6a0 <__assert_fail@plt+0x99f4>
   1a0fc:	cmp	r5, #0
   1a100:	mov	r1, r5
   1a104:	movwne	r1, #1
   1a108:	cmp	r0, #0
   1a10c:	bne	1a120 <__assert_fail@plt+0x8474>
   1a110:	clz	r2, r6
   1a114:	lsr	r2, r2, #5
   1a118:	orrs	r1, r2, r1
   1a11c:	bne	1a128 <__assert_fail@plt+0x847c>
   1a120:	str	r5, [r4]
   1a124:	pop	{r4, r5, r6, sl, fp, pc}
   1a128:	bl	1a4bc <__assert_fail@plt+0x8810>
   1a12c:	push	{r4, r5, r6, r7, fp, lr}
   1a130:	add	fp, sp, #16
   1a134:	ldr	r5, [r1]
   1a138:	mov	r6, r2
   1a13c:	mov	r4, r1
   1a140:	mov	r7, r0
   1a144:	cmp	r0, #0
   1a148:	beq	1a160 <__assert_fail@plt+0x84b4>
   1a14c:	mov	r0, #1
   1a150:	add	r0, r0, r5, lsr #1
   1a154:	adds	r5, r5, r0
   1a158:	bcc	1a178 <__assert_fail@plt+0x84cc>
   1a15c:	b	1a1ac <__assert_fail@plt+0x8500>
   1a160:	cmp	r5, #0
   1a164:	bne	1a178 <__assert_fail@plt+0x84cc>
   1a168:	mov	r0, #64	; 0x40
   1a16c:	cmp	r6, #64	; 0x40
   1a170:	udiv	r5, r0, r6
   1a174:	addhi	r5, r5, #1
   1a178:	mov	r0, r7
   1a17c:	mov	r1, r5
   1a180:	mov	r2, r6
   1a184:	bl	1b6a0 <__assert_fail@plt+0x99f4>
   1a188:	cmp	r0, #0
   1a18c:	bne	1a1a4 <__assert_fail@plt+0x84f8>
   1a190:	cmp	r7, #0
   1a194:	beq	1a1ac <__assert_fail@plt+0x8500>
   1a198:	cmp	r6, #0
   1a19c:	cmpne	r5, #0
   1a1a0:	bne	1a1ac <__assert_fail@plt+0x8500>
   1a1a4:	str	r5, [r4]
   1a1a8:	pop	{r4, r5, r6, r7, fp, pc}
   1a1ac:	bl	1a4bc <__assert_fail@plt+0x8810>
   1a1b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a1b4:	add	fp, sp, #24
   1a1b8:	mov	r8, r1
   1a1bc:	ldr	r1, [r1]
   1a1c0:	mov	r5, r0
   1a1c4:	add	r0, r1, r1, asr #1
   1a1c8:	cmp	r0, r1
   1a1cc:	mvnvs	r0, #-2147483648	; 0x80000000
   1a1d0:	cmp	r0, r3
   1a1d4:	mov	r7, r0
   1a1d8:	movgt	r7, r3
   1a1dc:	cmn	r3, #1
   1a1e0:	movle	r7, r0
   1a1e4:	ldr	r0, [fp, #8]
   1a1e8:	cmn	r0, #1
   1a1ec:	ble	1a214 <__assert_fail@plt+0x8568>
   1a1f0:	cmp	r0, #0
   1a1f4:	beq	1a268 <__assert_fail@plt+0x85bc>
   1a1f8:	cmn	r7, #1
   1a1fc:	ble	1a23c <__assert_fail@plt+0x8590>
   1a200:	mvn	r4, #-2147483648	; 0x80000000
   1a204:	udiv	r6, r4, r0
   1a208:	cmp	r6, r7
   1a20c:	bge	1a268 <__assert_fail@plt+0x85bc>
   1a210:	b	1a278 <__assert_fail@plt+0x85cc>
   1a214:	cmn	r7, #1
   1a218:	ble	1a258 <__assert_fail@plt+0x85ac>
   1a21c:	cmn	r0, #1
   1a220:	beq	1a268 <__assert_fail@plt+0x85bc>
   1a224:	mov	r6, #-2147483648	; 0x80000000
   1a228:	mvn	r4, #-2147483648	; 0x80000000
   1a22c:	sdiv	r6, r6, r0
   1a230:	cmp	r6, r7
   1a234:	bge	1a268 <__assert_fail@plt+0x85bc>
   1a238:	b	1a278 <__assert_fail@plt+0x85cc>
   1a23c:	beq	1a268 <__assert_fail@plt+0x85bc>
   1a240:	mov	r6, #-2147483648	; 0x80000000
   1a244:	mvn	r4, #-2147483648	; 0x80000000
   1a248:	sdiv	r6, r6, r7
   1a24c:	cmp	r6, r0
   1a250:	bge	1a268 <__assert_fail@plt+0x85bc>
   1a254:	b	1a278 <__assert_fail@plt+0x85cc>
   1a258:	mvn	r4, #-2147483648	; 0x80000000
   1a25c:	sdiv	r6, r4, r0
   1a260:	cmp	r7, r6
   1a264:	blt	1a278 <__assert_fail@plt+0x85cc>
   1a268:	mul	r6, r7, r0
   1a26c:	mov	r4, #64	; 0x40
   1a270:	cmp	r6, #63	; 0x3f
   1a274:	bgt	1a280 <__assert_fail@plt+0x85d4>
   1a278:	sdiv	r7, r4, r0
   1a27c:	mul	r6, r7, r0
   1a280:	cmp	r5, #0
   1a284:	moveq	r4, #0
   1a288:	streq	r4, [r8]
   1a28c:	sub	r4, r7, r1
   1a290:	cmp	r4, r2
   1a294:	bge	1a340 <__assert_fail@plt+0x8694>
   1a298:	add	r7, r1, r2
   1a29c:	mov	r6, #0
   1a2a0:	mov	r2, #0
   1a2a4:	cmp	r7, r3
   1a2a8:	movwgt	r6, #1
   1a2ac:	cmn	r3, #1
   1a2b0:	movwgt	r2, #1
   1a2b4:	cmp	r7, r1
   1a2b8:	bvs	1a374 <__assert_fail@plt+0x86c8>
   1a2bc:	ands	r1, r2, r6
   1a2c0:	bne	1a374 <__assert_fail@plt+0x86c8>
   1a2c4:	cmn	r0, #1
   1a2c8:	ble	1a2f0 <__assert_fail@plt+0x8644>
   1a2cc:	cmp	r0, #0
   1a2d0:	beq	1a33c <__assert_fail@plt+0x8690>
   1a2d4:	cmn	r7, #1
   1a2d8:	ble	1a314 <__assert_fail@plt+0x8668>
   1a2dc:	mvn	r1, #-2147483648	; 0x80000000
   1a2e0:	udiv	r1, r1, r0
   1a2e4:	cmp	r1, r7
   1a2e8:	bge	1a33c <__assert_fail@plt+0x8690>
   1a2ec:	b	1a374 <__assert_fail@plt+0x86c8>
   1a2f0:	cmn	r7, #1
   1a2f4:	ble	1a32c <__assert_fail@plt+0x8680>
   1a2f8:	cmn	r0, #1
   1a2fc:	beq	1a33c <__assert_fail@plt+0x8690>
   1a300:	mov	r1, #-2147483648	; 0x80000000
   1a304:	sdiv	r1, r1, r0
   1a308:	cmp	r1, r7
   1a30c:	bge	1a33c <__assert_fail@plt+0x8690>
   1a310:	b	1a374 <__assert_fail@plt+0x86c8>
   1a314:	beq	1a33c <__assert_fail@plt+0x8690>
   1a318:	mov	r1, #-2147483648	; 0x80000000
   1a31c:	sdiv	r1, r1, r7
   1a320:	cmp	r1, r0
   1a324:	bge	1a33c <__assert_fail@plt+0x8690>
   1a328:	b	1a374 <__assert_fail@plt+0x86c8>
   1a32c:	mvn	r1, #-2147483648	; 0x80000000
   1a330:	sdiv	r1, r1, r0
   1a334:	cmp	r7, r1
   1a338:	blt	1a374 <__assert_fail@plt+0x86c8>
   1a33c:	mul	r6, r7, r0
   1a340:	mov	r0, r5
   1a344:	mov	r1, r6
   1a348:	bl	1b64c <__assert_fail@plt+0x99a0>
   1a34c:	cmp	r6, #0
   1a350:	movwne	r6, #1
   1a354:	cmp	r0, #0
   1a358:	bne	1a36c <__assert_fail@plt+0x86c0>
   1a35c:	clz	r1, r5
   1a360:	lsr	r1, r1, #5
   1a364:	orrs	r1, r1, r6
   1a368:	bne	1a374 <__assert_fail@plt+0x86c8>
   1a36c:	str	r7, [r8]
   1a370:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a374:	bl	1a4bc <__assert_fail@plt+0x8810>
   1a378:	push	{fp, lr}
   1a37c:	mov	fp, sp
   1a380:	mov	r1, #1
   1a384:	bl	1b258 <__assert_fail@plt+0x95ac>
   1a388:	cmp	r0, #0
   1a38c:	popne	{fp, pc}
   1a390:	bl	1a4bc <__assert_fail@plt+0x8810>
   1a394:	push	{fp, lr}
   1a398:	mov	fp, sp
   1a39c:	bl	1b258 <__assert_fail@plt+0x95ac>
   1a3a0:	cmp	r0, #0
   1a3a4:	popne	{fp, pc}
   1a3a8:	bl	1a4bc <__assert_fail@plt+0x8810>
   1a3ac:	push	{fp, lr}
   1a3b0:	mov	fp, sp
   1a3b4:	mov	r1, #1
   1a3b8:	bl	1b258 <__assert_fail@plt+0x95ac>
   1a3bc:	cmp	r0, #0
   1a3c0:	popne	{fp, pc}
   1a3c4:	bl	1a4bc <__assert_fail@plt+0x8810>
   1a3c8:	push	{fp, lr}
   1a3cc:	mov	fp, sp
   1a3d0:	bl	1b258 <__assert_fail@plt+0x95ac>
   1a3d4:	cmp	r0, #0
   1a3d8:	popne	{fp, pc}
   1a3dc:	bl	1a4bc <__assert_fail@plt+0x8810>
   1a3e0:	push	{r4, r5, fp, lr}
   1a3e4:	add	fp, sp, #8
   1a3e8:	mov	r5, r0
   1a3ec:	mov	r0, r1
   1a3f0:	mov	r4, r1
   1a3f4:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1a3f8:	cmp	r0, #0
   1a3fc:	beq	1a410 <__assert_fail@plt+0x8764>
   1a400:	mov	r1, r5
   1a404:	mov	r2, r4
   1a408:	pop	{r4, r5, fp, lr}
   1a40c:	b	118ec <memcpy@plt>
   1a410:	bl	1a4bc <__assert_fail@plt+0x8810>
   1a414:	push	{r4, r5, fp, lr}
   1a418:	add	fp, sp, #8
   1a41c:	mov	r5, r0
   1a420:	mov	r0, r1
   1a424:	mov	r4, r1
   1a428:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1a42c:	cmp	r0, #0
   1a430:	beq	1a444 <__assert_fail@plt+0x8798>
   1a434:	mov	r1, r5
   1a438:	mov	r2, r4
   1a43c:	pop	{r4, r5, fp, lr}
   1a440:	b	118ec <memcpy@plt>
   1a444:	bl	1a4bc <__assert_fail@plt+0x8810>
   1a448:	push	{r4, r5, fp, lr}
   1a44c:	add	fp, sp, #8
   1a450:	mov	r5, r0
   1a454:	add	r0, r1, #1
   1a458:	mov	r4, r1
   1a45c:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1a460:	cmp	r0, #0
   1a464:	beq	1a480 <__assert_fail@plt+0x87d4>
   1a468:	mov	r1, #0
   1a46c:	mov	r2, r4
   1a470:	strb	r1, [r0, r4]
   1a474:	mov	r1, r5
   1a478:	pop	{r4, r5, fp, lr}
   1a47c:	b	118ec <memcpy@plt>
   1a480:	bl	1a4bc <__assert_fail@plt+0x8810>
   1a484:	push	{r4, r5, fp, lr}
   1a488:	add	fp, sp, #8
   1a48c:	mov	r4, r0
   1a490:	bl	11ac0 <strlen@plt>
   1a494:	add	r5, r0, #1
   1a498:	mov	r0, r5
   1a49c:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1a4a0:	cmp	r0, #0
   1a4a4:	beq	1a4b8 <__assert_fail@plt+0x880c>
   1a4a8:	mov	r1, r4
   1a4ac:	mov	r2, r5
   1a4b0:	pop	{r4, r5, fp, lr}
   1a4b4:	b	118ec <memcpy@plt>
   1a4b8:	bl	1a4bc <__assert_fail@plt+0x8810>
   1a4bc:	push	{fp, lr}
   1a4c0:	mov	fp, sp
   1a4c4:	movw	r0, #8624	; 0x21b0
   1a4c8:	movw	r1, #4834	; 0x12e2
   1a4cc:	mov	r2, #5
   1a4d0:	movt	r0, #4
   1a4d4:	movt	r1, #3
   1a4d8:	ldr	r4, [r0]
   1a4dc:	mov	r0, #0
   1a4e0:	bl	11934 <dcgettext@plt>
   1a4e4:	movw	r2, #5748	; 0x1674
   1a4e8:	mov	r3, r0
   1a4ec:	mov	r0, r4
   1a4f0:	mov	r1, #0
   1a4f4:	movt	r2, #3
   1a4f8:	bl	119dc <error@plt>
   1a4fc:	bl	11c70 <abort@plt>
   1a500:	push	{fp, lr}
   1a504:	mov	fp, sp
   1a508:	sub	sp, sp, #8
   1a50c:	movw	ip, #8624	; 0x21b0
   1a510:	movt	ip, #4
   1a514:	ldr	ip, [ip]
   1a518:	str	ip, [sp, #4]
   1a51c:	ldr	ip, [fp, #8]
   1a520:	str	ip, [sp]
   1a524:	bl	1a52c <__assert_fail@plt+0x8880>
   1a528:	bl	11c70 <abort@plt>
   1a52c:	push	{r4, r5, r6, r7, fp, lr}
   1a530:	add	fp, sp, #16
   1a534:	sub	sp, sp, #16
   1a538:	sub	r0, r0, #1
   1a53c:	cmp	r0, #4
   1a540:	bcs	1a5c0 <__assert_fail@plt+0x8914>
   1a544:	mov	r5, r1
   1a548:	movw	r1, #4948	; 0x1354
   1a54c:	ldr	r4, [fp, #12]
   1a550:	ldr	r6, [fp, #8]
   1a554:	movt	r1, #3
   1a558:	cmn	r5, #1
   1a55c:	ldr	r1, [r1, r0, lsl #2]
   1a560:	ble	1a574 <__assert_fail@plt+0x88c8>
   1a564:	ldr	r7, [r3, r5, lsl #4]
   1a568:	movw	r5, #4851	; 0x12f3
   1a56c:	movt	r5, #3
   1a570:	b	1a590 <__assert_fail@plt+0x88e4>
   1a574:	mov	r0, #0
   1a578:	add	r7, sp, #14
   1a57c:	strb	r0, [sp, #15]
   1a580:	movw	r0, #4851	; 0x12f3
   1a584:	strb	r2, [sp, #14]
   1a588:	movt	r0, #3
   1a58c:	sub	r5, r0, r5
   1a590:	mov	r0, #0
   1a594:	mov	r2, #5
   1a598:	bl	11934 <dcgettext@plt>
   1a59c:	mov	r2, r0
   1a5a0:	mov	r0, r4
   1a5a4:	mov	r1, #0
   1a5a8:	mov	r3, r5
   1a5ac:	str	r7, [sp]
   1a5b0:	str	r6, [sp, #4]
   1a5b4:	bl	119dc <error@plt>
   1a5b8:	sub	sp, fp, #16
   1a5bc:	pop	{r4, r5, r6, r7, fp, pc}
   1a5c0:	bl	11c70 <abort@plt>
   1a5c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5c8:	add	fp, sp, #28
   1a5cc:	sub	sp, sp, #44	; 0x2c
   1a5d0:	cmp	r2, #37	; 0x25
   1a5d4:	bcs	1b238 <__assert_fail@plt+0x958c>
   1a5d8:	ldr	sl, [fp, #8]
   1a5dc:	mov	r6, r2
   1a5e0:	mov	r7, r1
   1a5e4:	mov	r4, r0
   1a5e8:	str	r3, [sp, #36]	; 0x24
   1a5ec:	bl	11af0 <__errno_location@plt>
   1a5f0:	mov	r5, r0
   1a5f4:	mov	r0, #0
   1a5f8:	str	r0, [r5]
   1a5fc:	bl	11a84 <__ctype_b_loc@plt>
   1a600:	ldr	r1, [r0]
   1a604:	mov	r2, r4
   1a608:	ldrb	r0, [r2], #1
   1a60c:	add	r3, r1, r0, lsl #1
   1a610:	ldrb	r3, [r3, #1]
   1a614:	tst	r3, #32
   1a618:	bne	1a608 <__assert_fail@plt+0x895c>
   1a61c:	cmp	r7, #0
   1a620:	sub	r9, fp, #32
   1a624:	mov	r8, #4
   1a628:	movne	r9, r7
   1a62c:	cmp	r0, #45	; 0x2d
   1a630:	beq	1b22c <__assert_fail@plt+0x9580>
   1a634:	mov	r0, r4
   1a638:	mov	r1, r9
   1a63c:	mov	r2, r6
   1a640:	mov	r3, #0
   1a644:	bl	11904 <__strtoull_internal@plt>
   1a648:	mov	r7, r1
   1a64c:	ldr	r1, [r9]
   1a650:	cmp	r1, r4
   1a654:	beq	1a680 <__assert_fail@plt+0x89d4>
   1a658:	mov	r6, r0
   1a65c:	ldr	r0, [r5]
   1a660:	cmp	r0, #0
   1a664:	beq	1a6bc <__assert_fail@plt+0x8a10>
   1a668:	cmp	r0, #34	; 0x22
   1a66c:	bne	1b22c <__assert_fail@plt+0x9580>
   1a670:	mov	r8, #1
   1a674:	cmp	sl, #0
   1a678:	bne	1a6c8 <__assert_fail@plt+0x8a1c>
   1a67c:	b	1b224 <__assert_fail@plt+0x9578>
   1a680:	cmp	sl, #0
   1a684:	beq	1b22c <__assert_fail@plt+0x9580>
   1a688:	mov	r5, r1
   1a68c:	ldrb	r1, [r4]
   1a690:	cmp	r1, #0
   1a694:	beq	1b22c <__assert_fail@plt+0x9580>
   1a698:	mov	r0, sl
   1a69c:	bl	11acc <strchr@plt>
   1a6a0:	cmp	r0, #0
   1a6a4:	beq	1b22c <__assert_fail@plt+0x9580>
   1a6a8:	mov	r1, r5
   1a6ac:	mov	r8, #0
   1a6b0:	mov	r6, #1
   1a6b4:	mov	r7, #0
   1a6b8:	b	1a6c8 <__assert_fail@plt+0x8a1c>
   1a6bc:	mov	r8, r0
   1a6c0:	cmp	sl, #0
   1a6c4:	beq	1b224 <__assert_fail@plt+0x9578>
   1a6c8:	ldrb	r4, [r1]
   1a6cc:	cmp	r4, #0
   1a6d0:	beq	1b224 <__assert_fail@plt+0x9578>
   1a6d4:	str	r1, [sp, #32]
   1a6d8:	mov	r0, sl
   1a6dc:	mov	r1, r4
   1a6e0:	bl	11acc <strchr@plt>
   1a6e4:	cmp	r0, #0
   1a6e8:	beq	1a9ac <__assert_fail@plt+0x8d00>
   1a6ec:	sub	r0, r4, #69	; 0x45
   1a6f0:	mov	r1, #1
   1a6f4:	mov	r3, #0
   1a6f8:	mov	r5, #1024	; 0x400
   1a6fc:	cmp	r0, #47	; 0x2f
   1a700:	str	r1, [sp, #28]
   1a704:	bhi	1a808 <__assert_fail@plt+0x8b5c>
   1a708:	add	r1, pc, #0
   1a70c:	ldr	pc, [r1, r0, lsl #2]
   1a710:	ldrdeq	sl, [r1], -r0
   1a714:	andeq	sl, r1, r8, lsl #16
   1a718:	ldrdeq	sl, [r1], -r0
   1a71c:	andeq	sl, r1, r8, lsl #16
   1a720:	andeq	sl, r1, r8, lsl #16
   1a724:	andeq	sl, r1, r8, lsl #16
   1a728:	ldrdeq	sl, [r1], -r0
   1a72c:	andeq	sl, r1, r8, lsl #16
   1a730:	ldrdeq	sl, [r1], -r0
   1a734:	andeq	sl, r1, r8, lsl #16
   1a738:	andeq	sl, r1, r8, lsl #16
   1a73c:	ldrdeq	sl, [r1], -r0
   1a740:	andeq	sl, r1, r8, lsl #16
   1a744:	andeq	sl, r1, r8, lsl #16
   1a748:	andeq	sl, r1, r8, lsl #16
   1a74c:	ldrdeq	sl, [r1], -r0
   1a750:	andeq	sl, r1, r8, lsl #16
   1a754:	andeq	sl, r1, r8, lsl #16
   1a758:	andeq	sl, r1, r8, lsl #16
   1a75c:	andeq	sl, r1, r8, lsl #16
   1a760:	ldrdeq	sl, [r1], -r0
   1a764:	ldrdeq	sl, [r1], -r0
   1a768:	andeq	sl, r1, r8, lsl #16
   1a76c:	andeq	sl, r1, r8, lsl #16
   1a770:	andeq	sl, r1, r8, lsl #16
   1a774:	andeq	sl, r1, r8, lsl #16
   1a778:	andeq	sl, r1, r8, lsl #16
   1a77c:	andeq	sl, r1, r8, lsl #16
   1a780:	andeq	sl, r1, r8, lsl #16
   1a784:	andeq	sl, r1, r8, lsl #16
   1a788:	andeq	sl, r1, r8, lsl #16
   1a78c:	andeq	sl, r1, r8, lsl #16
   1a790:	andeq	sl, r1, r8, lsl #16
   1a794:	andeq	sl, r1, r8, lsl #16
   1a798:	ldrdeq	sl, [r1], -r0
   1a79c:	andeq	sl, r1, r8, lsl #16
   1a7a0:	andeq	sl, r1, r8, lsl #16
   1a7a4:	andeq	sl, r1, r8, lsl #16
   1a7a8:	ldrdeq	sl, [r1], -r0
   1a7ac:	andeq	sl, r1, r8, lsl #16
   1a7b0:	ldrdeq	sl, [r1], -r0
   1a7b4:	andeq	sl, r1, r8, lsl #16
   1a7b8:	andeq	sl, r1, r8, lsl #16
   1a7bc:	andeq	sl, r1, r8, lsl #16
   1a7c0:	andeq	sl, r1, r8, lsl #16
   1a7c4:	andeq	sl, r1, r8, lsl #16
   1a7c8:	andeq	sl, r1, r8, lsl #16
   1a7cc:	ldrdeq	sl, [r1], -r0
   1a7d0:	mov	r0, sl
   1a7d4:	mov	r1, #48	; 0x30
   1a7d8:	bl	11acc <strchr@plt>
   1a7dc:	cmp	r0, #0
   1a7e0:	beq	1a804 <__assert_fail@plt+0x8b58>
   1a7e4:	ldr	r1, [sp, #32]
   1a7e8:	ldrb	r0, [r1, #1]
   1a7ec:	cmp	r0, #66	; 0x42
   1a7f0:	cmpne	r0, #68	; 0x44
   1a7f4:	bne	1a9b8 <__assert_fail@plt+0x8d0c>
   1a7f8:	mov	r5, #1000	; 0x3e8
   1a7fc:	mov	r0, #2
   1a800:	str	r0, [sp, #28]
   1a804:	mov	r3, #0
   1a808:	sub	r0, r4, #66	; 0x42
   1a80c:	cmp	r0, #53	; 0x35
   1a810:	bhi	1a9ac <__assert_fail@plt+0x8d00>
   1a814:	add	r1, pc, #0
   1a818:	ldr	pc, [r1, r0, lsl #2]
   1a81c:	andeq	sl, r1, r4, lsr sp
   1a820:	andeq	sl, r1, ip, lsr #19
   1a824:	andeq	sl, r1, ip, lsr #19
   1a828:	andeq	sl, r1, ip, asr sp
   1a82c:	andeq	sl, r1, ip, lsr #19
   1a830:	strdeq	sl, [r1], -r4
   1a834:	andeq	sl, r1, ip, lsr #19
   1a838:	andeq	sl, r1, ip, lsr #19
   1a83c:	andeq	sl, r1, ip, lsr #19
   1a840:	ldrdeq	sl, [r1], -ip
   1a844:	andeq	sl, r1, ip, lsr #19
   1a848:	andeq	sl, r1, r4, lsr #20
   1a84c:	andeq	sl, r1, ip, lsr #19
   1a850:	andeq	sl, r1, ip, lsr #19
   1a854:			; <UNDEFINED> instruction: 0x0001aeb0
   1a858:	andeq	sl, r1, ip, lsr #19
   1a85c:	andeq	sl, r1, ip, lsr #19
   1a860:	andeq	sl, r1, ip, lsr #19
   1a864:			; <UNDEFINED> instruction: 0x0001aab0
   1a868:	andeq	sl, r1, ip, lsr #19
   1a86c:	andeq	sl, r1, ip, lsr #19
   1a870:	andeq	sl, r1, ip, lsr #19
   1a874:	andeq	sl, r1, ip, lsr #19
   1a878:	ldrdeq	sl, [r1], -r8
   1a87c:	muleq	r1, r8, fp
   1a880:	andeq	sl, r1, ip, lsr #19
   1a884:	andeq	sl, r1, ip, lsr #19
   1a888:	andeq	sl, r1, ip, lsr #19
   1a88c:	andeq	sl, r1, ip, lsr #19
   1a890:	andeq	sl, r1, ip, lsr #19
   1a894:	andeq	sl, r1, ip, lsr #19
   1a898:	andeq	sl, r1, ip, lsr #19
   1a89c:	andeq	fp, r1, ip, lsr #3
   1a8a0:	andeq	fp, r1, r4, lsl #4
   1a8a4:	andeq	sl, r1, ip, lsr #19
   1a8a8:	andeq	sl, r1, ip, lsr #19
   1a8ac:	andeq	sl, r1, ip, lsr #19
   1a8b0:	strdeq	sl, [r1], -r4
   1a8b4:	andeq	sl, r1, ip, lsr #19
   1a8b8:	andeq	sl, r1, ip, lsr #19
   1a8bc:	andeq	sl, r1, ip, lsr #19
   1a8c0:	ldrdeq	sl, [r1], -ip
   1a8c4:	andeq	sl, r1, ip, lsr #19
   1a8c8:	andeq	sl, r1, r4, lsr #20
   1a8cc:	andeq	sl, r1, ip, lsr #19
   1a8d0:	andeq	sl, r1, ip, lsr #19
   1a8d4:	andeq	sl, r1, ip, lsr #19
   1a8d8:	andeq	sl, r1, ip, lsr #19
   1a8dc:	andeq	sl, r1, ip, lsr #19
   1a8e0:	andeq	sl, r1, ip, lsr #19
   1a8e4:			; <UNDEFINED> instruction: 0x0001aab0
   1a8e8:	andeq	sl, r1, ip, lsr #19
   1a8ec:	andeq	sl, r1, ip, lsr #19
   1a8f0:	andeq	fp, r1, r0, ror #3
   1a8f4:	mvn	r0, #0
   1a8f8:	mvn	r1, #0
   1a8fc:	mov	r2, r5
   1a900:	mov	sl, r3
   1a904:	bl	2fa44 <__assert_fail@plt+0x1dd98>
   1a908:	subs	r3, r0, r6
   1a90c:	umull	r4, r2, r6, r5
   1a910:	mov	lr, #0
   1a914:	str	r1, [sp, #20]
   1a918:	sbcs	r3, r1, r7
   1a91c:	movwcc	lr, #1
   1a920:	mla	ip, r6, sl, r2
   1a924:	mov	r2, r1
   1a928:	mov	r2, #0
   1a92c:	cmp	lr, #0
   1a930:	mla	r7, r7, r5, ip
   1a934:	mvnne	r4, #0
   1a938:	mvnne	r7, #0
   1a93c:	subs	r6, r0, r4
   1a940:	sbcs	r6, r1, r7
   1a944:	umull	r3, r6, r4, r5
   1a948:	movwcc	r2, #1
   1a94c:	cmp	r2, #0
   1a950:	mvnne	r3, #0
   1a954:	cmp	r2, #0
   1a958:	str	r6, [sp, #16]
   1a95c:	umull	r6, ip, r3, r5
   1a960:	mla	r1, r3, sl, ip
   1a964:	ldr	ip, [sp, #16]
   1a968:	str	r1, [sp, #12]
   1a96c:	mla	r4, r4, sl, ip
   1a970:	mla	r4, r7, r5, r4
   1a974:	mvnne	r4, #0
   1a978:	subs	r0, r0, r3
   1a97c:	ldr	r0, [sp, #20]
   1a980:	ldr	r7, [sp, #12]
   1a984:	sbcs	r0, r0, r4
   1a988:	mov	r0, #0
   1a98c:	mla	r7, r4, r5, r7
   1a990:	movwcc	r0, #1
   1a994:	cmp	r0, #0
   1a998:	mov	r1, r0
   1a99c:	orr	r0, lr, r2
   1a9a0:	mvnne	r7, #0
   1a9a4:	mvnne	r6, #0
   1a9a8:	b	1afd0 <__assert_fail@plt+0x9324>
   1a9ac:	ldr	r0, [sp, #36]	; 0x24
   1a9b0:	orr	r8, r8, #2
   1a9b4:	b	1b228 <__assert_fail@plt+0x957c>
   1a9b8:	cmp	r0, #105	; 0x69
   1a9bc:	mov	r3, #0
   1a9c0:	bne	1a808 <__assert_fail@plt+0x8b5c>
   1a9c4:	ldrb	r0, [r1, #2]
   1a9c8:	mov	r1, #1
   1a9cc:	cmp	r0, #66	; 0x42
   1a9d0:	movweq	r1, #3
   1a9d4:	str	r1, [sp, #28]
   1a9d8:	b	1a808 <__assert_fail@plt+0x8b5c>
   1a9dc:	mvn	r0, #0
   1a9e0:	mvn	r1, #0
   1a9e4:	mov	r2, r5
   1a9e8:	mov	r4, r3
   1a9ec:	bl	2fa44 <__assert_fail@plt+0x1dd98>
   1a9f0:	subs	r0, r0, r6
   1a9f4:	mov	r2, #0
   1a9f8:	sbcs	r0, r1, r7
   1a9fc:	umull	r0, r1, r6, r5
   1aa00:	movwcc	r2, #1
   1aa04:	cmp	r2, #0
   1aa08:	mla	r1, r6, r4, r1
   1aa0c:	mov	r3, r2
   1aa10:	mvnne	r0, #0
   1aa14:	mla	r7, r7, r5, r1
   1aa18:	mvnne	r7, #0
   1aa1c:	mov	r6, r0
   1aa20:	b	1b204 <__assert_fail@plt+0x9558>
   1aa24:	mvn	r0, #0
   1aa28:	mvn	r1, #0
   1aa2c:	mov	r2, r5
   1aa30:	str	r3, [sp, #24]
   1aa34:	bl	2fa44 <__assert_fail@plt+0x1dd98>
   1aa38:	subs	r3, r0, r6
   1aa3c:	mov	ip, r0
   1aa40:	umull	r4, r0, r6, r5
   1aa44:	mov	sl, #0
   1aa48:	sbcs	r3, r1, r7
   1aa4c:	mov	r3, #0
   1aa50:	movwcc	r3, #1
   1aa54:	cmp	r3, #0
   1aa58:	str	r0, [sp, #20]
   1aa5c:	ldr	r0, [sp, #24]
   1aa60:	mvnne	r4, #0
   1aa64:	cmp	r3, #0
   1aa68:	umull	lr, r2, r4, r5
   1aa6c:	mla	r2, r4, r0, r2
   1aa70:	str	r2, [sp, #16]
   1aa74:	ldr	r2, [sp, #20]
   1aa78:	mla	r6, r6, r0, r2
   1aa7c:	ldr	r0, [sp, #16]
   1aa80:	mla	r6, r7, r5, r6
   1aa84:	mvnne	r6, #0
   1aa88:	mla	r7, r6, r5, r0
   1aa8c:	subs	r0, ip, r4
   1aa90:	sbcs	r0, r1, r6
   1aa94:	movwcc	sl, #1
   1aa98:	cmp	sl, #0
   1aa9c:	orr	r3, r3, sl
   1aaa0:	mvnne	lr, #0
   1aaa4:	mvnne	r7, #0
   1aaa8:	mov	r6, lr
   1aaac:	b	1b204 <__assert_fail@plt+0x9558>
   1aab0:	mvn	r0, #0
   1aab4:	mvn	r1, #0
   1aab8:	mov	r2, r5
   1aabc:	mov	sl, r3
   1aac0:	bl	2fa44 <__assert_fail@plt+0x1dd98>
   1aac4:	subs	r3, r0, r6
   1aac8:	mov	ip, r1
   1aacc:	umull	r2, lr, r6, r5
   1aad0:	str	r0, [sp, #20]
   1aad4:	sbcs	r3, r1, r7
   1aad8:	mov	r1, #0
   1aadc:	str	ip, [sp, #16]
   1aae0:	movwcc	r1, #1
   1aae4:	mla	r6, r6, sl, lr
   1aae8:	mov	lr, #0
   1aaec:	cmp	r1, #0
   1aaf0:	mla	r7, r7, r5, r6
   1aaf4:	mvnne	r2, #0
   1aaf8:	cmp	r1, #0
   1aafc:	umull	r3, r4, r2, r5
   1ab00:	mvnne	r7, #0
   1ab04:	mla	r4, r2, sl, r4
   1ab08:	subs	r2, r0, r2
   1ab0c:	sbcs	r2, ip, r7
   1ab10:	mla	r4, r7, r5, r4
   1ab14:	mov	r2, #0
   1ab18:	movwcc	lr, #1
   1ab1c:	cmp	lr, #0
   1ab20:	mvnne	r3, #0
   1ab24:	mvnne	r4, #0
   1ab28:	subs	r7, r0, r3
   1ab2c:	mov	r0, r5
   1ab30:	sbcs	r7, ip, r4
   1ab34:	umull	r5, r7, r3, r5
   1ab38:	movwcc	r2, #1
   1ab3c:	cmp	r2, #0
   1ab40:	mla	r3, r3, sl, r7
   1ab44:	mvnne	r5, #0
   1ab48:	cmp	r2, #0
   1ab4c:	mla	r3, r4, r0, r3
   1ab50:	umull	r6, ip, r5, r0
   1ab54:	mvnne	r3, #0
   1ab58:	mla	ip, r5, sl, ip
   1ab5c:	mla	r7, r3, r0, ip
   1ab60:	ldr	r0, [sp, #20]
   1ab64:	subs	r0, r0, r5
   1ab68:	ldr	r0, [sp, #16]
   1ab6c:	sbcs	r0, r0, r3
   1ab70:	mov	r0, #0
   1ab74:	movwcc	r0, #1
   1ab78:	cmp	r0, #0
   1ab7c:	mov	r3, r0
   1ab80:	orr	r0, r1, lr
   1ab84:	orr	r0, r0, r2
   1ab88:	mvnne	r7, #0
   1ab8c:	mvnne	r6, #0
   1ab90:	orr	r3, r0, r3
   1ab94:	b	1b204 <__assert_fail@plt+0x9558>
   1ab98:	mvn	r0, #0
   1ab9c:	mvn	r1, #0
   1aba0:	mov	r2, r5
   1aba4:	mov	r4, r3
   1aba8:	str	r3, [sp, #24]
   1abac:	bl	2fa44 <__assert_fail@plt+0x1dd98>
   1abb0:	umull	r3, r2, r6, r5
   1abb4:	mla	r2, r6, r4, r2
   1abb8:	subs	r6, r0, r6
   1abbc:	sbcs	r6, r1, r7
   1abc0:	mov	r6, #0
   1abc4:	mla	r2, r7, r5, r2
   1abc8:	mov	r7, #0
   1abcc:	movwcc	r6, #1
   1abd0:	cmp	r6, #0
   1abd4:	str	r6, [sp, #20]
   1abd8:	mvnne	r3, #0
   1abdc:	mvnne	r2, #0
   1abe0:	subs	r4, r0, r3
   1abe4:	umull	r6, ip, r3, r5
   1abe8:	sbcs	r4, r1, r2
   1abec:	ldr	r4, [sp, #24]
   1abf0:	movwcc	r7, #1
   1abf4:	cmp	r7, #0
   1abf8:	mov	lr, r7
   1abfc:	str	r7, [sp, #16]
   1ac00:	mvnne	r6, #0
   1ac04:	cmp	lr, #0
   1ac08:	mov	lr, #0
   1ac0c:	umull	sl, r7, r6, r5
   1ac10:	mla	r3, r3, r4, ip
   1ac14:	mla	r2, r2, r5, r3
   1ac18:	mvnne	r2, #0
   1ac1c:	subs	r3, r0, r6
   1ac20:	mla	r7, r6, r4, r7
   1ac24:	mov	r4, r0
   1ac28:	mov	r0, #0
   1ac2c:	mla	r7, r2, r5, r7
   1ac30:	sbcs	r2, r1, r2
   1ac34:	mov	r3, r4
   1ac38:	movwcc	r0, #1
   1ac3c:	str	r3, [sp, #4]
   1ac40:	cmp	r0, #0
   1ac44:	str	r0, [sp, #12]
   1ac48:	mov	r0, r1
   1ac4c:	mvnne	sl, #0
   1ac50:	mvnne	r7, #0
   1ac54:	str	r0, [sp, #8]
   1ac58:	subs	r2, r4, sl
   1ac5c:	ldr	r4, [sp, #24]
   1ac60:	sbcs	r2, r1, r7
   1ac64:	umull	r6, r2, sl, r5
   1ac68:	movwcc	lr, #1
   1ac6c:	cmp	lr, #0
   1ac70:	mvnne	r6, #0
   1ac74:	mla	r2, sl, r4, r2
   1ac78:	cmp	lr, #0
   1ac7c:	umull	r1, ip, r6, r5
   1ac80:	mla	r2, r7, r5, r2
   1ac84:	mvnne	r2, #0
   1ac88:	mla	ip, r6, r4, ip
   1ac8c:	subs	r6, r3, r6
   1ac90:	mla	r7, r2, r5, ip
   1ac94:	sbcs	r2, r0, r2
   1ac98:	mov	ip, #0
   1ac9c:	mov	r2, #0
   1aca0:	movwcc	ip, #1
   1aca4:	cmp	ip, #0
   1aca8:	mvnne	r1, #0
   1acac:	mvnne	r7, #0
   1acb0:	subs	r6, r3, r1
   1acb4:	ldr	r3, [sp, #24]
   1acb8:	sbcs	r6, r0, r7
   1acbc:	umull	r0, sl, r1, r5
   1acc0:	movwcc	r2, #1
   1acc4:	cmp	r2, #0
   1acc8:	mvnne	r0, #0
   1accc:	mla	r1, r1, r3, sl
   1acd0:	cmp	r2, #0
   1acd4:	umull	r6, r4, r0, r5
   1acd8:	mla	r1, r7, r5, r1
   1acdc:	mvnne	r1, #0
   1ace0:	mla	r4, r0, r3, r4
   1ace4:	ldr	r3, [sp, #4]
   1ace8:	mla	r7, r1, r5, r4
   1acec:	ldr	r5, [sp, #16]
   1acf0:	subs	r0, r3, r0
   1acf4:	ldr	r0, [sp, #8]
   1acf8:	sbcs	r0, r0, r1
   1acfc:	mov	r0, #0
   1ad00:	movwcc	r0, #1
   1ad04:	cmp	r0, #0
   1ad08:	mov	r1, r0
   1ad0c:	ldr	r0, [sp, #20]
   1ad10:	mvnne	r7, #0
   1ad14:	mvnne	r6, #0
   1ad18:	orr	r0, r0, r5
   1ad1c:	ldr	r5, [sp, #12]
   1ad20:	orr	r0, r0, r5
   1ad24:	orr	r0, r0, lr
   1ad28:	orr	r0, r0, ip
   1ad2c:	orr	r0, r0, r2
   1ad30:	b	1b1a0 <__assert_fail@plt+0x94f4>
   1ad34:	mov	r1, #0
   1ad38:	lsl	r2, r7, #10
   1ad3c:	lsl	r0, r6, #10
   1ad40:	lsr	r3, r7, #22
   1ad44:	cmp	r1, r7, lsr #22
   1ad48:	orr	r2, r2, r6, lsr #22
   1ad4c:	mvnne	r0, #0
   1ad50:	movwne	r3, #1
   1ad54:	cmp	r1, r7, lsr #22
   1ad58:	b	1b1d0 <__assert_fail@plt+0x9524>
   1ad5c:	mvn	r0, #0
   1ad60:	mvn	r1, #0
   1ad64:	mov	r2, r5
   1ad68:	mov	sl, r3
   1ad6c:	bl	2fa44 <__assert_fail@plt+0x1dd98>
   1ad70:	subs	r2, r0, r6
   1ad74:	mov	ip, r0
   1ad78:	mov	r0, #0
   1ad7c:	sbcs	r2, r1, r7
   1ad80:	umull	r4, r2, r6, r5
   1ad84:	movwcc	r0, #1
   1ad88:	cmp	r0, #0
   1ad8c:	mla	r2, r6, sl, r2
   1ad90:	str	r0, [sp, #20]
   1ad94:	mvnne	r4, #0
   1ad98:	cmp	r0, #0
   1ad9c:	mla	r2, r7, r5, r2
   1ada0:	mov	r0, #0
   1ada4:	umull	lr, r3, r4, r5
   1ada8:	mvnne	r2, #0
   1adac:	mla	r3, r4, sl, r3
   1adb0:	mla	r6, r2, r5, r3
   1adb4:	subs	r3, ip, r4
   1adb8:	mov	r3, r1
   1adbc:	sbcs	r2, r1, r2
   1adc0:	str	r3, [sp, #8]
   1adc4:	movwcc	r0, #1
   1adc8:	cmp	r0, #0
   1adcc:	str	r0, [sp, #16]
   1add0:	mov	r0, ip
   1add4:	mvnne	lr, #0
   1add8:	mvnne	r6, #0
   1addc:	str	r0, [sp, #12]
   1ade0:	subs	r2, ip, lr
   1ade4:	umull	r7, r4, lr, r5
   1ade8:	sbcs	r2, r1, r6
   1adec:	mov	r2, #0
   1adf0:	movwcc	r2, #1
   1adf4:	mla	r4, lr, sl, r4
   1adf8:	cmp	r2, #0
   1adfc:	mla	r6, r6, r5, r4
   1ae00:	mov	r4, #0
   1ae04:	mvnne	r7, #0
   1ae08:	cmp	r2, #0
   1ae0c:	umull	r1, ip, r7, r5
   1ae10:	mvnne	r6, #0
   1ae14:	mla	ip, r7, sl, ip
   1ae18:	subs	r7, r0, r7
   1ae1c:	sbcs	r7, r3, r6
   1ae20:	mla	lr, r6, r5, ip
   1ae24:	mov	ip, #0
   1ae28:	movwcc	ip, #1
   1ae2c:	cmp	ip, #0
   1ae30:	mvnne	r1, #0
   1ae34:	mvnne	lr, #0
   1ae38:	subs	r7, r0, r1
   1ae3c:	sbcs	r7, r3, lr
   1ae40:	umull	r0, r7, r1, r5
   1ae44:	movwcc	r4, #1
   1ae48:	cmp	r4, #0
   1ae4c:	mla	r1, r1, sl, r7
   1ae50:	mvnne	r0, #0
   1ae54:	cmp	r4, #0
   1ae58:	mla	r1, lr, r5, r1
   1ae5c:	umull	r6, r3, r0, r5
   1ae60:	mvnne	r1, #0
   1ae64:	mla	r3, r0, sl, r3
   1ae68:	mla	r7, r1, r5, r3
   1ae6c:	ldr	r3, [sp, #12]
   1ae70:	subs	r0, r3, r0
   1ae74:	ldr	r0, [sp, #8]
   1ae78:	ldr	r3, [sp, #16]
   1ae7c:	sbcs	r0, r0, r1
   1ae80:	mov	r0, #0
   1ae84:	movwcc	r0, #1
   1ae88:	cmp	r0, #0
   1ae8c:	mov	r1, r0
   1ae90:	ldr	r0, [sp, #20]
   1ae94:	mvnne	r7, #0
   1ae98:	mvnne	r6, #0
   1ae9c:	orr	r0, r0, r3
   1aea0:	orr	r0, r0, r2
   1aea4:	orr	r0, r0, ip
   1aea8:	orr	r0, r0, r4
   1aeac:	b	1afd0 <__assert_fail@plt+0x9324>
   1aeb0:	mvn	r0, #0
   1aeb4:	mvn	r1, #0
   1aeb8:	mov	r2, r5
   1aebc:	mov	sl, r3
   1aec0:	bl	2fa44 <__assert_fail@plt+0x1dd98>
   1aec4:	umull	r3, r2, r6, r5
   1aec8:	mov	lr, r1
   1aecc:	mov	r1, r0
   1aed0:	mla	r2, r6, sl, r2
   1aed4:	subs	r6, r0, r6
   1aed8:	mov	r0, #0
   1aedc:	sbcs	r6, lr, r7
   1aee0:	mla	r2, r7, r5, r2
   1aee4:	movwcc	r0, #1
   1aee8:	cmp	r0, #0
   1aeec:	str	r0, [sp, #20]
   1aef0:	mov	r0, r1
   1aef4:	mvnne	r3, #0
   1aef8:	mvnne	r2, #0
   1aefc:	str	r0, [sp, #16]
   1af00:	subs	r4, r1, r3
   1af04:	umull	r7, ip, r3, r5
   1af08:	sbcs	r4, lr, r2
   1af0c:	mov	r4, #0
   1af10:	movwcc	r4, #1
   1af14:	mla	r3, r3, sl, ip
   1af18:	mov	ip, #0
   1af1c:	cmp	r4, #0
   1af20:	mla	r2, r2, r5, r3
   1af24:	mvnne	r7, #0
   1af28:	cmp	r4, #0
   1af2c:	umull	r1, r6, r7, r5
   1af30:	mvnne	r2, #0
   1af34:	mla	r6, r7, sl, r6
   1af38:	mla	r3, r2, r5, r6
   1af3c:	subs	r6, r0, r7
   1af40:	sbcs	r2, lr, r2
   1af44:	mov	r2, #0
   1af48:	movwcc	ip, #1
   1af4c:	cmp	ip, #0
   1af50:	mvnne	r1, #0
   1af54:	mvnne	r3, #0
   1af58:	subs	r6, r0, r1
   1af5c:	sbcs	r6, lr, r3
   1af60:	umull	r0, r6, r1, r5
   1af64:	movwcc	r2, #1
   1af68:	cmp	r2, #0
   1af6c:	mvnne	r0, #0
   1af70:	cmp	r2, #0
   1af74:	str	r6, [sp, #12]
   1af78:	umull	r6, r7, r0, r5
   1af7c:	mla	r7, r0, sl, r7
   1af80:	str	r7, [sp, #8]
   1af84:	ldr	r7, [sp, #12]
   1af88:	mla	r1, r1, sl, r7
   1af8c:	mla	r1, r3, r5, r1
   1af90:	ldr	r3, [sp, #8]
   1af94:	mvnne	r1, #0
   1af98:	mla	r7, r1, r5, r3
   1af9c:	ldr	r3, [sp, #16]
   1afa0:	subs	r0, r3, r0
   1afa4:	sbcs	r0, lr, r1
   1afa8:	mov	r0, #0
   1afac:	movwcc	r0, #1
   1afb0:	cmp	r0, #0
   1afb4:	mov	r1, r0
   1afb8:	ldr	r0, [sp, #20]
   1afbc:	mvnne	r7, #0
   1afc0:	mvnne	r6, #0
   1afc4:	orr	r0, r0, r4
   1afc8:	orr	r0, r0, ip
   1afcc:	orr	r0, r0, r2
   1afd0:	orr	r3, r0, r1
   1afd4:	b	1b204 <__assert_fail@plt+0x9558>
   1afd8:	mvn	r0, #0
   1afdc:	mvn	r1, #0
   1afe0:	mov	r2, r5
   1afe4:	mov	sl, r3
   1afe8:	bl	2fa44 <__assert_fail@plt+0x1dd98>
   1afec:	mov	ip, r1
   1aff0:	subs	r1, r0, r6
   1aff4:	umull	r3, lr, r6, r5
   1aff8:	mov	r2, r5
   1affc:	sbcs	r1, ip, r7
   1b000:	mov	r1, #0
   1b004:	str	ip, [sp, #4]
   1b008:	movwcc	r1, #1
   1b00c:	mla	r6, r6, sl, lr
   1b010:	cmp	r1, #0
   1b014:	mla	r7, r7, r2, r6
   1b018:	str	r1, [sp, #20]
   1b01c:	mvnne	r3, #0
   1b020:	cmp	r1, #0
   1b024:	mov	r1, r0
   1b028:	umull	r4, r5, r3, r5
   1b02c:	mvnne	r7, #0
   1b030:	mov	lr, r1
   1b034:	mla	r5, r3, sl, r5
   1b038:	subs	r3, r0, r3
   1b03c:	sbcs	r0, ip, r7
   1b040:	mov	r0, #0
   1b044:	mla	r5, r7, r2, r5
   1b048:	movwcc	r0, #1
   1b04c:	cmp	r0, #0
   1b050:	str	r0, [sp, #16]
   1b054:	mvnne	r4, #0
   1b058:	mvnne	r5, #0
   1b05c:	subs	r0, r1, r4
   1b060:	mov	r1, #0
   1b064:	sbcs	r0, ip, r5
   1b068:	umull	r3, r0, r4, r2
   1b06c:	movwcc	r1, #1
   1b070:	cmp	r1, #0
   1b074:	mla	r0, r4, sl, r0
   1b078:	mov	r4, lr
   1b07c:	str	r1, [sp, #12]
   1b080:	mvnne	r3, #0
   1b084:	cmp	r1, #0
   1b088:	mla	r0, r5, r2, r0
   1b08c:	str	r4, [sp]
   1b090:	umull	r7, r6, r3, r2
   1b094:	mvnne	r0, #0
   1b098:	mla	r6, r3, sl, r6
   1b09c:	subs	r3, lr, r3
   1b0a0:	mov	r3, #0
   1b0a4:	mla	r5, r0, r2, r6
   1b0a8:	sbcs	r0, ip, r0
   1b0ac:	mov	r0, #0
   1b0b0:	movwcc	r0, #1
   1b0b4:	cmp	r0, #0
   1b0b8:	str	r0, [sp, #8]
   1b0bc:	mvnne	r7, #0
   1b0c0:	mvnne	r5, #0
   1b0c4:	subs	r0, lr, r7
   1b0c8:	sbcs	r0, ip, r5
   1b0cc:	umull	r6, r0, r7, r2
   1b0d0:	movwcc	r3, #1
   1b0d4:	cmp	r3, #0
   1b0d8:	mla	r7, r7, sl, r0
   1b0dc:	mov	r0, ip
   1b0e0:	mvnne	r6, #0
   1b0e4:	cmp	r3, #0
   1b0e8:	mla	r7, r5, r2, r7
   1b0ec:	mov	r5, #0
   1b0f0:	umull	r1, lr, r6, r2
   1b0f4:	mvnne	r7, #0
   1b0f8:	mla	lr, r6, sl, lr
   1b0fc:	subs	r6, r4, r6
   1b100:	mla	lr, r7, r2, lr
   1b104:	sbcs	r7, ip, r7
   1b108:	mov	ip, #0
   1b10c:	movwcc	ip, #1
   1b110:	cmp	ip, #0
   1b114:	mvnne	r1, #0
   1b118:	mvnne	lr, #0
   1b11c:	subs	r7, r4, r1
   1b120:	sbcs	r7, r0, lr
   1b124:	umull	r0, r7, r1, r2
   1b128:	movwcc	r5, #1
   1b12c:	cmp	r5, #0
   1b130:	mla	r1, r1, sl, r7
   1b134:	mvnne	r0, #0
   1b138:	cmp	r5, #0
   1b13c:	mla	r1, lr, r2, r1
   1b140:	umull	r6, r4, r0, r2
   1b144:	mvnne	r1, #0
   1b148:	mla	r4, r0, sl, r4
   1b14c:	mla	r7, r1, r2, r4
   1b150:	ldr	r2, [sp]
   1b154:	subs	r0, r2, r0
   1b158:	ldr	r0, [sp, #4]
   1b15c:	ldr	r2, [sp, #16]
   1b160:	sbcs	r0, r0, r1
   1b164:	mov	r0, #0
   1b168:	movwcc	r0, #1
   1b16c:	cmp	r0, #0
   1b170:	mov	r1, r0
   1b174:	ldr	r0, [sp, #20]
   1b178:	mvnne	r7, #0
   1b17c:	mvnne	r6, #0
   1b180:	orr	r0, r0, r2
   1b184:	ldr	r2, [sp, #12]
   1b188:	orr	r0, r0, r2
   1b18c:	ldr	r2, [sp, #8]
   1b190:	orr	r0, r0, r2
   1b194:	orr	r0, r0, r3
   1b198:	orr	r0, r0, ip
   1b19c:	orr	r0, r0, r5
   1b1a0:	orr	r0, r0, r1
   1b1a4:	and	r3, r0, #1
   1b1a8:	b	1b204 <__assert_fail@plt+0x9558>
   1b1ac:	mov	r1, #0
   1b1b0:	lsl	r2, r7, #9
   1b1b4:	lsl	r0, r6, #9
   1b1b8:	lsr	r3, r7, #23
   1b1bc:	cmp	r1, r7, lsr #23
   1b1c0:	orr	r2, r2, r6, lsr #23
   1b1c4:	mvnne	r0, #0
   1b1c8:	movwne	r3, #1
   1b1cc:	cmp	r1, r7, lsr #23
   1b1d0:	mvnne	r2, #0
   1b1d4:	mov	r6, r0
   1b1d8:	mov	r7, r2
   1b1dc:	b	1b204 <__assert_fail@plt+0x9558>
   1b1e0:	lsl	r1, r7, #1
   1b1e4:	cmp	r7, #0
   1b1e8:	lsl	r0, r6, #1
   1b1ec:	lsr	r3, r7, #31
   1b1f0:	orr	r1, r1, r6, lsr #31
   1b1f4:	mvnmi	r0, #0
   1b1f8:	mvnmi	r1, #0
   1b1fc:	mov	r6, r0
   1b200:	mov	r7, r1
   1b204:	ldr	r1, [sp, #32]
   1b208:	ldr	r2, [sp, #28]
   1b20c:	orr	r8, r3, r8
   1b210:	add	r0, r1, r2
   1b214:	str	r0, [r9]
   1b218:	ldrb	r0, [r1, r2]
   1b21c:	cmp	r0, #0
   1b220:	orrne	r8, r8, #2
   1b224:	ldr	r0, [sp, #36]	; 0x24
   1b228:	strd	r6, [r0]
   1b22c:	mov	r0, r8
   1b230:	sub	sp, fp, #28
   1b234:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b238:	movw	r0, #4964	; 0x1364
   1b23c:	movw	r1, #5002	; 0x138a
   1b240:	movw	r3, #5014	; 0x1396
   1b244:	mov	r2, #84	; 0x54
   1b248:	movt	r0, #3
   1b24c:	movt	r1, #3
   1b250:	movt	r3, #3
   1b254:	bl	11cac <__assert_fail@plt>
   1b258:	clz	r2, r1
   1b25c:	clz	r3, r0
   1b260:	lsr	r2, r2, #5
   1b264:	lsr	r3, r3, #5
   1b268:	orrs	r2, r3, r2
   1b26c:	movwne	r1, #1
   1b270:	movwne	r0, #1
   1b274:	cmp	r1, #0
   1b278:	beq	1b2a8 <__assert_fail@plt+0x95fc>
   1b27c:	mvn	r2, #-2147483648	; 0x80000000
   1b280:	udiv	r2, r2, r1
   1b284:	cmp	r2, r0
   1b288:	bcs	1b2a8 <__assert_fail@plt+0x95fc>
   1b28c:	push	{fp, lr}
   1b290:	mov	fp, sp
   1b294:	bl	11af0 <__errno_location@plt>
   1b298:	mov	r1, #12
   1b29c:	str	r1, [r0]
   1b2a0:	mov	r0, #0
   1b2a4:	pop	{fp, pc}
   1b2a8:	b	11820 <calloc@plt>
   1b2ac:	sub	sp, sp, #8
   1b2b0:	push	{r4, r5, r6, r7, fp, lr}
   1b2b4:	add	fp, sp, #16
   1b2b8:	sub	sp, sp, #8
   1b2bc:	mov	r5, r0
   1b2c0:	add	r0, fp, #8
   1b2c4:	cmp	r1, #11
   1b2c8:	str	r2, [fp, #8]
   1b2cc:	str	r3, [fp, #12]
   1b2d0:	str	r0, [sp, #4]
   1b2d4:	bhi	1b310 <__assert_fail@plt+0x9664>
   1b2d8:	mov	r0, #1
   1b2dc:	movw	r2, #1300	; 0x514
   1b2e0:	tst	r2, r0, lsl r1
   1b2e4:	bne	1b3d0 <__assert_fail@plt+0x9724>
   1b2e8:	movw	r2, #2570	; 0xa0a
   1b2ec:	tst	r2, r0, lsl r1
   1b2f0:	bne	1b338 <__assert_fail@plt+0x968c>
   1b2f4:	cmp	r1, #0
   1b2f8:	bne	1b310 <__assert_fail@plt+0x9664>
   1b2fc:	ldr	r0, [sp, #4]
   1b300:	add	r1, r0, #4
   1b304:	str	r1, [sp, #4]
   1b308:	mov	r1, #0
   1b30c:	b	1b3dc <__assert_fail@plt+0x9730>
   1b310:	sub	r0, r1, #1024	; 0x400
   1b314:	cmp	r0, #10
   1b318:	bhi	1b3d0 <__assert_fail@plt+0x9724>
   1b31c:	mov	r2, #1
   1b320:	movw	r3, #645	; 0x285
   1b324:	tst	r3, r2, lsl r0
   1b328:	bne	1b3d0 <__assert_fail@plt+0x9724>
   1b32c:	movw	r3, #1282	; 0x502
   1b330:	tst	r3, r2, lsl r0
   1b334:	beq	1b344 <__assert_fail@plt+0x9698>
   1b338:	mov	r0, r5
   1b33c:	bl	11b98 <fcntl64@plt>
   1b340:	b	1b3e8 <__assert_fail@plt+0x973c>
   1b344:	cmp	r0, #6
   1b348:	bne	1b3d0 <__assert_fail@plt+0x9724>
   1b34c:	ldr	r0, [sp, #4]
   1b350:	movw	r7, #9160	; 0x23c8
   1b354:	movt	r7, #4
   1b358:	add	r1, r0, #4
   1b35c:	str	r1, [sp, #4]
   1b360:	ldr	r6, [r0]
   1b364:	ldr	r0, [r7]
   1b368:	cmp	r0, #0
   1b36c:	bmi	1b40c <__assert_fail@plt+0x9760>
   1b370:	mov	r0, r5
   1b374:	movw	r1, #1030	; 0x406
   1b378:	mov	r2, r6
   1b37c:	bl	11b98 <fcntl64@plt>
   1b380:	mov	r4, r0
   1b384:	cmn	r0, #1
   1b388:	bgt	1b400 <__assert_fail@plt+0x9754>
   1b38c:	bl	11af0 <__errno_location@plt>
   1b390:	ldr	r0, [r0]
   1b394:	cmp	r0, #22
   1b398:	bne	1b400 <__assert_fail@plt+0x9754>
   1b39c:	mov	r0, r5
   1b3a0:	mov	r1, #0
   1b3a4:	mov	r2, r6
   1b3a8:	bl	11b98 <fcntl64@plt>
   1b3ac:	mov	r4, r0
   1b3b0:	cmp	r0, #0
   1b3b4:	bmi	1b3ec <__assert_fail@plt+0x9740>
   1b3b8:	mvn	r0, #0
   1b3bc:	str	r0, [r7]
   1b3c0:	mov	r0, #1
   1b3c4:	cmp	r0, #0
   1b3c8:	bne	1b438 <__assert_fail@plt+0x978c>
   1b3cc:	b	1b3ec <__assert_fail@plt+0x9740>
   1b3d0:	ldr	r0, [sp, #4]
   1b3d4:	add	r2, r0, #4
   1b3d8:	str	r2, [sp, #4]
   1b3dc:	ldr	r2, [r0]
   1b3e0:	mov	r0, r5
   1b3e4:	bl	11b98 <fcntl64@plt>
   1b3e8:	mov	r4, r0
   1b3ec:	mov	r0, r4
   1b3f0:	sub	sp, fp, #16
   1b3f4:	pop	{r4, r5, r6, r7, fp, lr}
   1b3f8:	add	sp, sp, #8
   1b3fc:	bx	lr
   1b400:	mov	r0, #1
   1b404:	str	r0, [r7]
   1b408:	b	1b3ec <__assert_fail@plt+0x9740>
   1b40c:	mov	r0, r5
   1b410:	mov	r1, #0
   1b414:	mov	r2, r6
   1b418:	bl	11b98 <fcntl64@plt>
   1b41c:	mov	r4, r0
   1b420:	ldr	r0, [r7]
   1b424:	add	r0, r0, #1
   1b428:	clz	r0, r0
   1b42c:	lsr	r0, r0, #5
   1b430:	cmp	r0, #0
   1b434:	beq	1b3ec <__assert_fail@plt+0x9740>
   1b438:	cmp	r4, #0
   1b43c:	bmi	1b3ec <__assert_fail@plt+0x9740>
   1b440:	mov	r0, r4
   1b444:	mov	r1, #1
   1b448:	bl	11b98 <fcntl64@plt>
   1b44c:	cmp	r0, #0
   1b450:	bmi	1b46c <__assert_fail@plt+0x97c0>
   1b454:	orr	r2, r0, #1
   1b458:	mov	r0, r4
   1b45c:	mov	r1, #2
   1b460:	bl	11b98 <fcntl64@plt>
   1b464:	cmn	r0, #1
   1b468:	bne	1b3ec <__assert_fail@plt+0x9740>
   1b46c:	bl	11af0 <__errno_location@plt>
   1b470:	ldr	r6, [r0]
   1b474:	mov	r5, r0
   1b478:	mov	r0, r4
   1b47c:	bl	11c88 <close@plt>
   1b480:	str	r6, [r5]
   1b484:	mvn	r4, #0
   1b488:	b	1b3ec <__assert_fail@plt+0x9740>
   1b48c:	push	{r4, sl, fp, lr}
   1b490:	add	fp, sp, #8
   1b494:	sub	sp, sp, #8
   1b498:	mov	r4, r0
   1b49c:	cmp	r0, #0
   1b4a0:	beq	1b4d8 <__assert_fail@plt+0x982c>
   1b4a4:	mov	r0, r4
   1b4a8:	bl	11a3c <__freading@plt>
   1b4ac:	cmp	r0, #0
   1b4b0:	beq	1b4d8 <__assert_fail@plt+0x982c>
   1b4b4:	ldrb	r0, [r4, #1]
   1b4b8:	tst	r0, #1
   1b4bc:	beq	1b4d8 <__assert_fail@plt+0x982c>
   1b4c0:	mov	r0, #1
   1b4c4:	mov	r2, #0
   1b4c8:	mov	r3, #0
   1b4cc:	str	r0, [sp]
   1b4d0:	mov	r0, r4
   1b4d4:	bl	1b510 <__assert_fail@plt+0x9864>
   1b4d8:	mov	r0, r4
   1b4dc:	sub	sp, fp, #8
   1b4e0:	pop	{r4, sl, fp, lr}
   1b4e4:	b	11880 <fflush@plt>
   1b4e8:	push	{r4, r5, r6, sl, fp, lr}
   1b4ec:	add	fp, sp, #16
   1b4f0:	mov	r4, r0
   1b4f4:	bl	11af0 <__errno_location@plt>
   1b4f8:	ldr	r6, [r0]
   1b4fc:	mov	r5, r0
   1b500:	mov	r0, r4
   1b504:	bl	118b0 <free@plt>
   1b508:	str	r6, [r5]
   1b50c:	pop	{r4, r5, r6, sl, fp, pc}
   1b510:	push	{r4, r5, r6, r7, fp, lr}
   1b514:	add	fp, sp, #16
   1b518:	sub	sp, sp, #8
   1b51c:	mov	r4, r0
   1b520:	ldr	r0, [r0, #4]
   1b524:	mov	r5, r3
   1b528:	mov	r6, r2
   1b52c:	ldr	r1, [r4, #8]
   1b530:	cmp	r1, r0
   1b534:	bne	1b550 <__assert_fail@plt+0x98a4>
   1b538:	ldrd	r0, [r4, #16]
   1b53c:	cmp	r1, r0
   1b540:	bne	1b550 <__assert_fail@plt+0x98a4>
   1b544:	ldr	r0, [r4, #36]	; 0x24
   1b548:	cmp	r0, #0
   1b54c:	beq	1b568 <__assert_fail@plt+0x98bc>
   1b550:	mov	r0, r4
   1b554:	mov	r2, r6
   1b558:	mov	r3, r5
   1b55c:	sub	sp, fp, #16
   1b560:	pop	{r4, r5, r6, r7, fp, lr}
   1b564:	b	11b8c <fseeko64@plt>
   1b568:	ldr	r7, [fp, #8]
   1b56c:	mov	r0, r4
   1b570:	bl	11b50 <fileno@plt>
   1b574:	mov	r2, r6
   1b578:	mov	r3, r5
   1b57c:	str	r7, [sp]
   1b580:	bl	119a0 <lseek64@plt>
   1b584:	and	r2, r0, r1
   1b588:	cmn	r2, #1
   1b58c:	beq	1b5ac <__assert_fail@plt+0x9900>
   1b590:	strd	r0, [r4, #80]	; 0x50
   1b594:	ldr	r0, [r4]
   1b598:	bic	r0, r0, #16
   1b59c:	str	r0, [r4]
   1b5a0:	mov	r0, #0
   1b5a4:	sub	sp, fp, #16
   1b5a8:	pop	{r4, r5, r6, r7, fp, pc}
   1b5ac:	mvn	r0, #0
   1b5b0:	sub	sp, fp, #16
   1b5b4:	pop	{r4, r5, r6, r7, fp, pc}
   1b5b8:	cmp	r0, #0
   1b5bc:	movweq	r0, #1
   1b5c0:	cmn	r0, #1
   1b5c4:	ble	1b5cc <__assert_fail@plt+0x9920>
   1b5c8:	b	11a18 <malloc@plt>
   1b5cc:	push	{fp, lr}
   1b5d0:	mov	fp, sp
   1b5d4:	bl	11af0 <__errno_location@plt>
   1b5d8:	mov	r1, #12
   1b5dc:	str	r1, [r0]
   1b5e0:	mov	r0, #0
   1b5e4:	pop	{fp, pc}
   1b5e8:	push	{r4, r5, r6, r7, fp, lr}
   1b5ec:	add	fp, sp, #16
   1b5f0:	sub	sp, sp, #8
   1b5f4:	cmp	r0, #0
   1b5f8:	add	r5, sp, #4
   1b5fc:	mov	r7, r2
   1b600:	mov	r4, r1
   1b604:	movne	r5, r0
   1b608:	mov	r0, r5
   1b60c:	bl	119d0 <mbrtowc@plt>
   1b610:	mov	r6, r0
   1b614:	cmp	r7, #0
   1b618:	beq	1b640 <__assert_fail@plt+0x9994>
   1b61c:	cmn	r6, #2
   1b620:	bcc	1b640 <__assert_fail@plt+0x9994>
   1b624:	mov	r0, #0
   1b628:	bl	2f3e8 <__assert_fail@plt+0x1d73c>
   1b62c:	cmp	r0, #0
   1b630:	bne	1b640 <__assert_fail@plt+0x9994>
   1b634:	ldrb	r0, [r4]
   1b638:	mov	r6, #1
   1b63c:	str	r0, [r5]
   1b640:	mov	r0, r6
   1b644:	sub	sp, fp, #16
   1b648:	pop	{r4, r5, r6, r7, fp, pc}
   1b64c:	push	{fp, lr}
   1b650:	mov	fp, sp
   1b654:	cmp	r0, #0
   1b658:	beq	1b674 <__assert_fail@plt+0x99c8>
   1b65c:	cmp	r1, #0
   1b660:	beq	1b680 <__assert_fail@plt+0x99d4>
   1b664:	cmn	r1, #1
   1b668:	ble	1b68c <__assert_fail@plt+0x99e0>
   1b66c:	pop	{fp, lr}
   1b670:	b	11940 <realloc@plt>
   1b674:	mov	r0, r1
   1b678:	pop	{fp, lr}
   1b67c:	b	1b5b8 <__assert_fail@plt+0x990c>
   1b680:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1b684:	mov	r0, #0
   1b688:	pop	{fp, pc}
   1b68c:	bl	11af0 <__errno_location@plt>
   1b690:	mov	r1, #12
   1b694:	str	r1, [r0]
   1b698:	mov	r0, #0
   1b69c:	pop	{fp, pc}
   1b6a0:	cmp	r2, #0
   1b6a4:	beq	1b6d4 <__assert_fail@plt+0x9a28>
   1b6a8:	mvn	r3, #0
   1b6ac:	udiv	r3, r3, r2
   1b6b0:	cmp	r3, r1
   1b6b4:	bcs	1b6d4 <__assert_fail@plt+0x9a28>
   1b6b8:	push	{fp, lr}
   1b6bc:	mov	fp, sp
   1b6c0:	bl	11af0 <__errno_location@plt>
   1b6c4:	mov	r1, #12
   1b6c8:	str	r1, [r0]
   1b6cc:	mov	r0, #0
   1b6d0:	pop	{fp, pc}
   1b6d4:	mul	r1, r2, r1
   1b6d8:	b	1b64c <__assert_fail@plt+0x99a0>
   1b6dc:	andeq	r0, r0, r0
   1b6e0:	push	{fp, lr}
   1b6e4:	mov	fp, sp
   1b6e8:	mov	lr, r0
   1b6ec:	movw	r0, #9164	; 0x23cc
   1b6f0:	mov	ip, r1
   1b6f4:	ldrb	r1, [r2, #28]
   1b6f8:	movt	r0, #4
   1b6fc:	ldr	r3, [r0]
   1b700:	mov	r0, #16
   1b704:	and	r1, r1, #111	; 0x6f
   1b708:	and	r0, r0, r3, lsr #21
   1b70c:	orr	r0, r1, r0
   1b710:	mov	r1, lr
   1b714:	orr	r0, r0, #128	; 0x80
   1b718:	strb	r0, [r2, #28]
   1b71c:	mov	r0, r2
   1b720:	mov	r2, ip
   1b724:	bl	1b760 <__assert_fail@plt+0x9ab4>
   1b728:	cmp	r0, #0
   1b72c:	beq	1b758 <__assert_fail@plt+0x9aac>
   1b730:	movw	r1, #5480	; 0x1568
   1b734:	mov	r2, #5
   1b738:	movt	r1, #3
   1b73c:	ldr	r0, [r1, r0, lsl #2]
   1b740:	movw	r1, #5096	; 0x13e8
   1b744:	movt	r1, #3
   1b748:	add	r1, r1, r0
   1b74c:	mov	r0, #0
   1b750:	pop	{fp, lr}
   1b754:	b	11934 <dcgettext@plt>
   1b758:	mov	r0, #0
   1b75c:	pop	{fp, pc}
   1b760:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b764:	add	fp, sp, #28
   1b768:	sub	sp, sp, #140	; 0x8c
   1b76c:	mov	sl, r0
   1b770:	mov	r0, #0
   1b774:	str	r3, [sp, #24]
   1b778:	mov	r5, r1
   1b77c:	mov	r9, r2
   1b780:	str	r0, [fp, #-52]	; 0xffffffcc
   1b784:	str	r0, [sl, #24]
   1b788:	str	r0, [sl, #8]
   1b78c:	str	r3, [sl, #12]
   1b790:	ldrb	r0, [sl, #28]
   1b794:	and	r0, r0, #144	; 0x90
   1b798:	strb	r0, [sl, #28]
   1b79c:	ldm	sl, {r0, r1}
   1b7a0:	cmp	r1, #159	; 0x9f
   1b7a4:	bls	1bf84 <__assert_fail@plt+0xa2d8>
   1b7a8:	mov	r1, #160	; 0xa0
   1b7ac:	mov	r2, #160	; 0xa0
   1b7b0:	str	r0, [sp, #28]
   1b7b4:	str	r1, [sl, #8]
   1b7b8:	mov	r1, #0
   1b7bc:	bl	11b2c <memset@plt>
   1b7c0:	ldr	r3, [sp, #28]
   1b7c4:	mov	r0, #31
   1b7c8:	str	r0, [r3, #64]	; 0x40
   1b7cc:	movw	r0, #43689	; 0xaaa9
   1b7d0:	movt	r0, #2730	; 0xaaa
   1b7d4:	cmp	r9, r0
   1b7d8:	bhi	1b978 <__assert_fail@plt+0x9ccc>
   1b7dc:	add	r7, r9, #1
   1b7e0:	mov	r4, r3
   1b7e4:	lsl	r0, r7, #3
   1b7e8:	str	r7, [r3, #4]
   1b7ec:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1b7f0:	str	r0, [r4]
   1b7f4:	mov	r0, #1
   1b7f8:	mov	r6, r0
   1b7fc:	lsl	r0, r0, #1
   1b800:	cmp	r6, r9
   1b804:	bls	1b7f8 <__assert_fail@plt+0x9b4c>
   1b808:	mov	r0, #12
   1b80c:	mov	r1, r6
   1b810:	str	r7, [sp, #12]
   1b814:	str	r5, [sp, #20]
   1b818:	bl	1b258 <__assert_fail@plt+0x95ac>
   1b81c:	ldr	r4, [sp, #28]
   1b820:	sub	r1, r6, #1
   1b824:	str	r1, [r4, #68]	; 0x44
   1b828:	str	r0, [r4, #32]
   1b82c:	bl	119ac <__ctype_get_mb_cur_max@plt>
   1b830:	str	r0, [r4, #92]	; 0x5c
   1b834:	mov	r0, #14
   1b838:	bl	11bbc <nl_langinfo@plt>
   1b83c:	ldrb	r1, [r0]
   1b840:	orr	r1, r1, #32
   1b844:	cmp	r1, #117	; 0x75
   1b848:	bne	1b89c <__assert_fail@plt+0x9bf0>
   1b84c:	ldrb	r1, [r0, #1]
   1b850:	orr	r1, r1, #32
   1b854:	cmp	r1, #116	; 0x74
   1b858:	bne	1b89c <__assert_fail@plt+0x9bf0>
   1b85c:	ldrb	r1, [r0, #2]
   1b860:	orr	r1, r1, #32
   1b864:	cmp	r1, #102	; 0x66
   1b868:	bne	1b89c <__assert_fail@plt+0x9bf0>
   1b86c:	ldrb	r1, [r0, #3]!
   1b870:	cmp	r1, #45	; 0x2d
   1b874:	movw	r1, #5596	; 0x15dc
   1b878:	movt	r1, #3
   1b87c:	addeq	r0, r0, #1
   1b880:	bl	1185c <strcmp@plt>
   1b884:	cmp	r0, #0
   1b888:	bne	1b89c <__assert_fail@plt+0x9bf0>
   1b88c:	ldr	r1, [sp, #28]
   1b890:	ldrb	r0, [r1, #88]	; 0x58
   1b894:	orr	r0, r0, #4
   1b898:	strb	r0, [r1, #88]	; 0x58
   1b89c:	ldr	r3, [sp, #28]
   1b8a0:	ldrb	r0, [r3, #88]	; 0x58
   1b8a4:	and	r1, r0, #247	; 0xf7
   1b8a8:	strb	r1, [r3, #88]	; 0x58
   1b8ac:	ldr	r1, [r3, #92]	; 0x5c
   1b8b0:	cmp	r1, #2
   1b8b4:	blt	1b960 <__assert_fail@plt+0x9cb4>
   1b8b8:	tst	r0, #4
   1b8bc:	bne	1b954 <__assert_fail@plt+0x9ca8>
   1b8c0:	mov	r0, #32
   1b8c4:	mov	r1, #1
   1b8c8:	mov	r4, #1
   1b8cc:	bl	1b258 <__assert_fail@plt+0x95ac>
   1b8d0:	ldr	r3, [sp, #28]
   1b8d4:	cmp	r0, #0
   1b8d8:	str	r0, [r3, #60]	; 0x3c
   1b8dc:	beq	1b978 <__assert_fail@plt+0x9ccc>
   1b8e0:	mov	r5, #0
   1b8e4:	mov	r7, #0
   1b8e8:	b	1b8fc <__assert_fail@plt+0x9c50>
   1b8ec:	add	r7, r7, #1
   1b8f0:	add	r5, r5, r8
   1b8f4:	cmp	r7, #8
   1b8f8:	beq	1b960 <__assert_fail@plt+0x9cb4>
   1b8fc:	mov	r8, #0
   1b900:	b	1b910 <__assert_fail@plt+0x9c64>
   1b904:	add	r8, r8, #1
   1b908:	cmp	r8, #32
   1b90c:	beq	1b8ec <__assert_fail@plt+0x9c40>
   1b910:	add	r6, r5, r8
   1b914:	mov	r0, r6
   1b918:	bl	11b38 <btowc@plt>
   1b91c:	ldr	r3, [sp, #28]
   1b920:	cmn	r0, #1
   1b924:	beq	1b938 <__assert_fail@plt+0x9c8c>
   1b928:	ldr	r1, [r3, #60]	; 0x3c
   1b92c:	ldr	r2, [r1, r7, lsl #2]
   1b930:	orr	r2, r2, r4, lsl r8
   1b934:	str	r2, [r1, r7, lsl #2]
   1b938:	cmp	r6, #127	; 0x7f
   1b93c:	bhi	1b904 <__assert_fail@plt+0x9c58>
   1b940:	cmp	r6, r0
   1b944:	ldrbne	r0, [r3, #88]	; 0x58
   1b948:	orrne	r0, r0, #8
   1b94c:	strbne	r0, [r3, #88]	; 0x58
   1b950:	b	1b904 <__assert_fail@plt+0x9c58>
   1b954:	movw	r0, #5548	; 0x15ac
   1b958:	movt	r0, #3
   1b95c:	str	r0, [r3, #60]	; 0x3c
   1b960:	ldr	r0, [r3]
   1b964:	ldr	r7, [sp, #20]
   1b968:	cmp	r0, #0
   1b96c:	ldrne	r0, [r3, #32]
   1b970:	cmpne	r0, #0
   1b974:	bne	1b998 <__assert_fail@plt+0x9cec>
   1b978:	mov	r4, #12
   1b97c:	mov	r0, r3
   1b980:	str	r4, [fp, #-52]	; 0xffffffcc
   1b984:	bl	1d30c <__assert_fail@plt+0xb660>
   1b988:	mov	r0, #0
   1b98c:	str	r0, [sl]
   1b990:	str	r0, [sl, #4]
   1b994:	b	1cba8 <__assert_fail@plt+0xaefc>
   1b998:	movw	r0, #0
   1b99c:	movw	r1, #0
   1b9a0:	mov	r6, #0
   1b9a4:	movt	r0, #0
   1b9a8:	movt	r1, #0
   1b9ac:	str	r6, [fp, #-52]	; 0xffffffcc
   1b9b0:	orrs	r4, r1, r0
   1b9b4:	beq	1b9d0 <__assert_fail@plt+0x9d24>
   1b9b8:	add	r0, r3, #136	; 0x88
   1b9bc:	mov	r1, #0
   1b9c0:	bl	118f8 <pthread_mutex_init@plt>
   1b9c4:	ldr	r3, [sp, #28]
   1b9c8:	cmp	r0, #0
   1b9cc:	bne	1b978 <__assert_fail@plt+0x9ccc>
   1b9d0:	vmov.i32	q8, #0	; 0x00000000
   1b9d4:	add	r1, sp, #32
   1b9d8:	str	r4, [sp, #8]
   1b9dc:	ldr	r4, [sl, #20]
   1b9e0:	ldr	r2, [sp, #24]
   1b9e4:	add	r0, r1, #64	; 0x40
   1b9e8:	vst1.32	{d16-d17}, [r0]
   1b9ec:	add	r0, r1, #52	; 0x34
   1b9f0:	vst1.32	{d16-d17}, [r0]
   1b9f4:	add	r0, r1, #36	; 0x24
   1b9f8:	vst1.32	{d16-d17}, [r0]
   1b9fc:	add	r0, r1, #20
   1ba00:	vst1.32	{d16-d17}, [r0]
   1ba04:	add	r0, r1, #4
   1ba08:	add	r1, r1, #44	; 0x2c
   1ba0c:	vst1.32	{d16-d17}, [r0]
   1ba10:	str	r7, [sp, #32]
   1ba14:	ubfx	r0, r2, #22, #1
   1ba18:	vdup.32	q8, r9
   1ba1c:	strb	r0, [sp, #104]	; 0x68
   1ba20:	and	r0, r2, #4194304	; 0x400000
   1ba24:	str	r4, [sp, #96]	; 0x60
   1ba28:	orrs	r5, r0, r4
   1ba2c:	str	r0, [sp, #16]
   1ba30:	movwne	r5, #1
   1ba34:	cmp	r9, #1
   1ba38:	strb	r5, [sp, #107]	; 0x6b
   1ba3c:	ldr	r0, [r3, #92]	; 0x5c
   1ba40:	str	r0, [sp, #112]	; 0x70
   1ba44:	ldrb	r2, [r3, #88]	; 0x58
   1ba48:	vst1.32	{d16-d17}, [r1]
   1ba4c:	ubfx	r1, r2, #3, #1
   1ba50:	strb	r1, [sp, #106]	; 0x6a
   1ba54:	ubfx	r1, r2, #2, #1
   1ba58:	strb	r1, [sp, #105]	; 0x69
   1ba5c:	blt	1bad4 <__assert_fail@plt+0x9e28>
   1ba60:	ldr	r8, [sp, #12]
   1ba64:	cmp	r0, #2
   1ba68:	blt	1ba94 <__assert_fail@plt+0x9de8>
   1ba6c:	mov	r6, #12
   1ba70:	cmn	r9, #-1073741822	; 0xc0000002
   1ba74:	bhi	1bf7c <__assert_fail@plt+0xa2d0>
   1ba78:	lsl	r1, r8, #2
   1ba7c:	mov	r0, #0
   1ba80:	bl	1b64c <__assert_fail@plt+0x99a0>
   1ba84:	ldr	r3, [sp, #28]
   1ba88:	cmp	r0, #0
   1ba8c:	beq	1bf7c <__assert_fail@plt+0xa2d0>
   1ba90:	str	r0, [sp, #40]	; 0x28
   1ba94:	cmp	r5, #0
   1ba98:	mov	r6, #0
   1ba9c:	mov	r5, #0
   1baa0:	beq	1bac8 <__assert_fail@plt+0x9e1c>
   1baa4:	mov	r0, #0
   1baa8:	mov	r1, r8
   1baac:	bl	1b64c <__assert_fail@plt+0x99a0>
   1bab0:	cmp	r0, #0
   1bab4:	beq	1bf78 <__assert_fail@plt+0xa2cc>
   1bab8:	ldr	r3, [sp, #28]
   1babc:	mov	r6, r0
   1bac0:	mov	r5, #1
   1bac4:	str	r0, [sp, #36]	; 0x24
   1bac8:	str	r8, [sp, #68]	; 0x44
   1bacc:	ldr	r0, [r3, #92]	; 0x5c
   1bad0:	b	1bad8 <__assert_fail@plt+0x9e2c>
   1bad4:	mov	r8, #0
   1bad8:	ldr	r1, [sp, #16]
   1badc:	cmp	r5, #0
   1bae0:	moveq	r6, r7
   1bae4:	str	r6, [sp, #36]	; 0x24
   1bae8:	cmp	r1, #0
   1baec:	beq	1bbd0 <__assert_fail@plt+0x9f24>
   1baf0:	cmp	r0, #2
   1baf4:	blt	1bbe4 <__assert_fail@plt+0x9f38>
   1baf8:	add	r0, sp, #32
   1bafc:	bl	20af0 <__assert_fail@plt+0xee44>
   1bb00:	cmp	r0, #0
   1bb04:	bne	1bf70 <__assert_fail@plt+0xa2c4>
   1bb08:	ldr	r1, [sp, #28]
   1bb0c:	add	r5, sp, #32
   1bb10:	b	1bb2c <__assert_fail@plt+0x9e80>
   1bb14:	mov	r0, r5
   1bb18:	str	r4, [sp, #68]	; 0x44
   1bb1c:	bl	20af0 <__assert_fail@plt+0xee44>
   1bb20:	ldr	r1, [sp, #28]
   1bb24:	cmp	r0, #0
   1bb28:	bne	1bf70 <__assert_fail@plt+0xa2c4>
   1bb2c:	ldr	r0, [sp, #64]	; 0x40
   1bb30:	cmp	r0, r9
   1bb34:	bge	1bcc0 <__assert_fail@plt+0xa014>
   1bb38:	ldr	r0, [r1, #92]	; 0x5c
   1bb3c:	ldr	r2, [sp, #60]	; 0x3c
   1bb40:	ldr	r1, [sp, #68]	; 0x44
   1bb44:	add	r0, r0, r2
   1bb48:	cmp	r1, r0
   1bb4c:	bgt	1bcc0 <__assert_fail@plt+0xa014>
   1bb50:	ldr	r0, [sp, #112]	; 0x70
   1bb54:	lsl	r4, r1, #1
   1bb58:	cmp	r0, #2
   1bb5c:	blt	1bba8 <__assert_fail@plt+0x9efc>
   1bb60:	mov	r6, #12
   1bb64:	cmn	r4, #-1073741823	; 0xc0000001
   1bb68:	bhi	1bf7c <__assert_fail@plt+0xa2d0>
   1bb6c:	ldr	r0, [sp, #40]	; 0x28
   1bb70:	lsl	r8, r1, #3
   1bb74:	mov	r1, r8
   1bb78:	bl	1b64c <__assert_fail@plt+0x99a0>
   1bb7c:	cmp	r0, #0
   1bb80:	beq	1bf7c <__assert_fail@plt+0xa2d0>
   1bb84:	str	r0, [sp, #40]	; 0x28
   1bb88:	ldr	r0, [sp, #44]	; 0x2c
   1bb8c:	cmp	r0, #0
   1bb90:	beq	1bba8 <__assert_fail@plt+0x9efc>
   1bb94:	mov	r1, r8
   1bb98:	bl	1b64c <__assert_fail@plt+0x99a0>
   1bb9c:	cmp	r0, #0
   1bba0:	beq	1bf7c <__assert_fail@plt+0xa2d0>
   1bba4:	str	r0, [sp, #44]	; 0x2c
   1bba8:	ldrb	r0, [sp, #107]	; 0x6b
   1bbac:	cmp	r0, #0
   1bbb0:	beq	1bb14 <__assert_fail@plt+0x9e68>
   1bbb4:	ldr	r0, [sp, #36]	; 0x24
   1bbb8:	mov	r1, r4
   1bbbc:	bl	1b64c <__assert_fail@plt+0x99a0>
   1bbc0:	cmp	r0, #0
   1bbc4:	beq	1bf78 <__assert_fail@plt+0xa2cc>
   1bbc8:	str	r0, [sp, #36]	; 0x24
   1bbcc:	b	1bb14 <__assert_fail@plt+0x9e68>
   1bbd0:	cmp	r0, #2
   1bbd4:	blt	1bc48 <__assert_fail@plt+0x9f9c>
   1bbd8:	add	r0, sp, #32
   1bbdc:	bl	213f0 <__assert_fail@plt+0xf744>
   1bbe0:	b	1bcc0 <__assert_fail@plt+0xa014>
   1bbe4:	cmp	r8, r9
   1bbe8:	movgt	r8, r9
   1bbec:	cmp	r8, #1
   1bbf0:	blt	1bcb4 <__assert_fail@plt+0xa008>
   1bbf4:	mov	r5, #0
   1bbf8:	bl	11a60 <__ctype_toupper_loc@plt>
   1bbfc:	mov	r1, #0
   1bc00:	add	r2, r7, r5
   1bc04:	cmp	r4, #0
   1bc08:	ldrb	r2, [r2, r1]
   1bc0c:	bne	1bc40 <__assert_fail@plt+0x9f94>
   1bc10:	ldr	r3, [r0]
   1bc14:	ldr	r2, [r3, r2, lsl #2]
   1bc18:	ldr	r3, [sp, #36]	; 0x24
   1bc1c:	strb	r2, [r3, r1]
   1bc20:	add	r2, r1, #1
   1bc24:	cmp	r2, r8
   1bc28:	bge	1bcac <__assert_fail@plt+0xa000>
   1bc2c:	ldr	r7, [sp, #32]
   1bc30:	ldr	r5, [sp, #56]	; 0x38
   1bc34:	ldr	r4, [sp, #96]	; 0x60
   1bc38:	mov	r1, r2
   1bc3c:	b	1bc00 <__assert_fail@plt+0x9f54>
   1bc40:	ldrb	r2, [r4, r2]
   1bc44:	b	1bc10 <__assert_fail@plt+0x9f64>
   1bc48:	cmp	r4, #0
   1bc4c:	beq	1bed0 <__assert_fail@plt+0xa224>
   1bc50:	cmp	r8, r9
   1bc54:	movgt	r8, r9
   1bc58:	cmp	r8, #1
   1bc5c:	blt	1bcb4 <__assert_fail@plt+0xa008>
   1bc60:	ldrb	r0, [r7]
   1bc64:	cmp	r8, #1
   1bc68:	ldrb	r0, [r4, r0]
   1bc6c:	strb	r0, [r6]
   1bc70:	mov	r0, #1
   1bc74:	beq	1bcb8 <__assert_fail@plt+0xa00c>
   1bc78:	mov	r0, #1
   1bc7c:	ldr	r1, [sp, #32]
   1bc80:	ldr	r3, [sp, #56]	; 0x38
   1bc84:	ldr	r7, [sp, #96]	; 0x60
   1bc88:	ldr	r2, [sp, #36]	; 0x24
   1bc8c:	add	r1, r1, r3
   1bc90:	ldrb	r1, [r1, r0]
   1bc94:	ldrb	r1, [r7, r1]
   1bc98:	strb	r1, [r2, r0]
   1bc9c:	add	r0, r0, #1
   1bca0:	cmp	r0, r8
   1bca4:	blt	1bc7c <__assert_fail@plt+0x9fd0>
   1bca8:	b	1bcb8 <__assert_fail@plt+0xa00c>
   1bcac:	add	r0, r1, #1
   1bcb0:	b	1bcb8 <__assert_fail@plt+0xa00c>
   1bcb4:	mov	r0, #0
   1bcb8:	str	r0, [sp, #64]	; 0x40
   1bcbc:	str	r0, [sp, #60]	; 0x3c
   1bcc0:	mov	r5, #0
   1bcc4:	ldr	r4, [sp, #24]
   1bcc8:	sub	r8, fp, #48	; 0x30
   1bccc:	add	r6, sp, #32
   1bcd0:	str	r5, [fp, #-52]	; 0xffffffcc
   1bcd4:	str	r5, [sl, #24]
   1bcd8:	mov	r0, r8
   1bcdc:	mov	r1, r6
   1bce0:	ldr	r7, [sl]
   1bce4:	orr	r2, r4, #8388608	; 0x800000
   1bce8:	str	r4, [r7, #128]	; 0x80
   1bcec:	bl	21860 <__assert_fail@plt+0xfbb4>
   1bcf0:	ldr	r1, [sp, #72]	; 0x48
   1bcf4:	mov	r2, r8
   1bcf8:	mov	r3, r4
   1bcfc:	str	r5, [sp]
   1bd00:	add	r0, r1, r0
   1bd04:	mov	r1, sl
   1bd08:	str	r0, [sp, #72]	; 0x48
   1bd0c:	sub	r0, fp, #52	; 0x34
   1bd10:	str	r0, [sp, #4]
   1bd14:	mov	r0, r6
   1bd18:	bl	215f4 <__assert_fail@plt+0xf948>
   1bd1c:	ldr	r5, [sp, #28]
   1bd20:	mov	r4, r0
   1bd24:	cmp	r0, #0
   1bd28:	bne	1bd38 <__assert_fail@plt+0xa08c>
   1bd2c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1bd30:	cmp	r0, #0
   1bd34:	bne	1c008 <__assert_fail@plt+0xa35c>
   1bd38:	ldr	r1, [r7, #64]	; 0x40
   1bd3c:	cmp	r1, #31
   1bd40:	beq	1bfa0 <__assert_fail@plt+0xa2f4>
   1bd44:	ldr	r0, [r7, #56]	; 0x38
   1bd48:	add	r0, r0, r1, lsl #5
   1bd4c:	add	r2, r1, #1
   1bd50:	vmov.i32	q8, #0	; 0x00000000
   1bd54:	mov	r1, #0
   1bd58:	str	r2, [r7, #64]	; 0x40
   1bd5c:	mov	r2, #2
   1bd60:	add	r6, r0, #4
   1bd64:	str	r1, [r0, #20]
   1bd68:	str	r1, [r0, #24]
   1bd6c:	str	r2, [r0, #28]
   1bd70:	mov	r0, #28
   1bd74:	mov	r1, r6
   1bd78:	vst1.32	{d16-d17}, [r1], r0
   1bd7c:	mvn	r0, #0
   1bd80:	str	r0, [r1]
   1bd84:	cmp	r4, #0
   1bd88:	mov	r0, r6
   1bd8c:	beq	1bde0 <__assert_fail@plt+0xa134>
   1bd90:	ldr	r1, [r7, #64]	; 0x40
   1bd94:	cmp	r1, #31
   1bd98:	beq	1bfd4 <__assert_fail@plt+0xa328>
   1bd9c:	ldr	r0, [r7, #56]	; 0x38
   1bda0:	add	r0, r0, r1, lsl #5
   1bda4:	add	r2, r1, #1
   1bda8:	mov	r1, #0
   1bdac:	cmp	r6, #0
   1bdb0:	mvn	r3, #0
   1bdb4:	str	r2, [r7, #64]	; 0x40
   1bdb8:	mov	r2, #16
   1bdbc:	str	r1, [r0, #4]!
   1bdc0:	add	ip, r0, #20
   1bdc4:	stmib	r0, {r4, r6}
   1bdc8:	str	r1, [r0, #12]
   1bdcc:	str	r1, [r0, #16]
   1bdd0:	stm	ip, {r1, r2, r3}
   1bdd4:	str	r0, [r4]
   1bdd8:	beq	1c000 <__assert_fail@plt+0xa354>
   1bddc:	str	r0, [r6]
   1bde0:	cmp	r6, #0
   1bde4:	cmpne	r0, #0
   1bde8:	beq	1c000 <__assert_fail@plt+0xa354>
   1bdec:	str	r0, [r5, #52]	; 0x34
   1bdf0:	ldr	r9, [sl]
   1bdf4:	ldr	r0, [r9, #4]
   1bdf8:	lsl	r0, r0, #2
   1bdfc:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1be00:	str	r0, [r9, #12]
   1be04:	ldr	r0, [r9, #4]
   1be08:	lsl	r0, r0, #2
   1be0c:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1be10:	str	r0, [r9, #16]
   1be14:	ldr	r0, [r9, #4]
   1be18:	add	r0, r0, r0, lsl #1
   1be1c:	lsl	r0, r0, #2
   1be20:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1be24:	str	r0, [r9, #20]
   1be28:	ldr	r0, [r9, #4]
   1be2c:	add	r0, r0, r0, lsl #1
   1be30:	lsl	r0, r0, #2
   1be34:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1be38:	str	r0, [r9, #24]
   1be3c:	ldr	r1, [r9, #12]
   1be40:	cmp	r1, #0
   1be44:	ldrne	r1, [r9, #16]
   1be48:	cmpne	r1, #0
   1be4c:	beq	1be60 <__assert_fail@plt+0xa1b4>
   1be50:	cmp	r0, #0
   1be54:	ldrne	r0, [r9, #20]
   1be58:	cmpne	r0, #0
   1be5c:	bne	1be6c <__assert_fail@plt+0xa1c0>
   1be60:	mov	r0, #12
   1be64:	str	r0, [fp, #-52]	; 0xffffffcc
   1be68:	b	1c010 <__assert_fail@plt+0xa364>
   1be6c:	ldr	r0, [sl, #24]
   1be70:	lsl	r0, r0, #2
   1be74:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1be78:	cmp	r0, #0
   1be7c:	str	r0, [r9, #132]	; 0x84
   1be80:	beq	1c294 <__assert_fail@plt+0xa5e8>
   1be84:	ldr	r1, [sl, #24]
   1be88:	cmp	r1, #0
   1be8c:	beq	1c0c8 <__assert_fail@plt+0xa41c>
   1be90:	mov	r2, #0
   1be94:	cmp	r1, #4
   1be98:	bcc	1c0b8 <__assert_fail@plt+0xa40c>
   1be9c:	bic	r2, r1, #3
   1bea0:	mov	r3, #1
   1bea4:	add	r7, pc, #964	; 0x3c4
   1bea8:	sub	r6, r2, #4
   1beac:	add	r3, r3, r6, lsr #2
   1beb0:	cmp	r6, #12
   1beb4:	and	ip, r3, #3
   1beb8:	bcs	1bedc <__assert_fail@plt+0xa230>
   1bebc:	vld1.64	{d16-d17}, [r7 :128]
   1bec0:	mov	r7, #0
   1bec4:	cmp	ip, #0
   1bec8:	bne	1bf4c <__assert_fail@plt+0xa2a0>
   1becc:	b	1c0c0 <__assert_fail@plt+0xa414>
   1bed0:	str	r8, [sp, #64]	; 0x40
   1bed4:	str	r8, [sp, #60]	; 0x3c
   1bed8:	b	1bcc0 <__assert_fail@plt+0xa014>
   1bedc:	sub	r6, r3, ip
   1bee0:	add	r3, pc, #904	; 0x388
   1bee4:	vmov.i32	q9, #12	; 0x0000000c
   1bee8:	vmov.i32	q10, #8	; 0x00000008
   1beec:	vmov.i32	q11, #4	; 0x00000004
   1bef0:	vmov.i32	q12, #16	; 0x00000010
   1bef4:	mov	r7, #0
   1bef8:	mov	lr, #64	; 0x40
   1befc:	mov	r4, r0
   1bf00:	vld1.64	{d16-d17}, [r3 :128]
   1bf04:	mov	r3, r0
   1bf08:	vadd.i32	q13, q8, q9
   1bf0c:	add	r5, r3, #48	; 0x30
   1bf10:	vadd.i32	q14, q8, q10
   1bf14:	vadd.i32	q15, q8, q11
   1bf18:	subs	r6, r6, #4
   1bf1c:	add	r7, r7, #16
   1bf20:	vst1.32	{d26-d27}, [r5]
   1bf24:	vst1.32	{d16-d17}, [r4], lr
   1bf28:	vadd.i32	q8, q8, q12
   1bf2c:	add	r5, r3, #32
   1bf30:	add	r3, r3, #16
   1bf34:	vst1.32	{d28-d29}, [r5]
   1bf38:	vst1.32	{d30-d31}, [r3]
   1bf3c:	mov	r3, r4
   1bf40:	bne	1bf08 <__assert_fail@plt+0xa25c>
   1bf44:	cmp	ip, #0
   1bf48:	beq	1c0c0 <__assert_fail@plt+0xa414>
   1bf4c:	vmov.i32	q9, #4	; 0x00000004
   1bf50:	add	r3, r0, r7, lsl #2
   1bf54:	rsb	r7, ip, #0
   1bf58:	vadd.i32	q10, q8, q9
   1bf5c:	vst1.32	{d16-d17}, [r3]!
   1bf60:	adds	r7, r7, #1
   1bf64:	vorr	q8, q10, q10
   1bf68:	bcc	1bf58 <__assert_fail@plt+0xa2ac>
   1bf6c:	b	1c0c0 <__assert_fail@plt+0xa414>
   1bf70:	mov	r6, r0
   1bf74:	b	1bf7c <__assert_fail@plt+0xa2d0>
   1bf78:	mov	r6, #12
   1bf7c:	str	r6, [fp, #-52]	; 0xffffffcc
   1bf80:	b	1c010 <__assert_fail@plt+0xa364>
   1bf84:	mov	r1, #160	; 0xa0
   1bf88:	mov	r4, #160	; 0xa0
   1bf8c:	bl	1b64c <__assert_fail@plt+0x99a0>
   1bf90:	cmp	r0, #0
   1bf94:	beq	1bfcc <__assert_fail@plt+0xa320>
   1bf98:	stm	sl, {r0, r4}
   1bf9c:	b	1b7a8 <__assert_fail@plt+0x9afc>
   1bfa0:	mov	r0, #996	; 0x3e4
   1bfa4:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1bfa8:	cmp	r0, #0
   1bfac:	beq	1c0ac <__assert_fail@plt+0xa400>
   1bfb0:	ldr	r1, [r7, #56]	; 0x38
   1bfb4:	ldr	r5, [sp, #28]
   1bfb8:	str	r1, [r0]
   1bfbc:	mov	r1, #0
   1bfc0:	str	r1, [r7, #64]	; 0x40
   1bfc4:	str	r0, [r7, #56]	; 0x38
   1bfc8:	b	1bd48 <__assert_fail@plt+0xa09c>
   1bfcc:	mov	r4, #12
   1bfd0:	b	1cba8 <__assert_fail@plt+0xaefc>
   1bfd4:	mov	r0, #996	; 0x3e4
   1bfd8:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1bfdc:	ldr	r5, [sp, #28]
   1bfe0:	cmp	r0, #0
   1bfe4:	beq	1c000 <__assert_fail@plt+0xa354>
   1bfe8:	ldr	r1, [r7, #56]	; 0x38
   1bfec:	str	r1, [r0]
   1bff0:	mov	r1, #0
   1bff4:	str	r1, [r7, #64]	; 0x40
   1bff8:	str	r0, [r7, #56]	; 0x38
   1bffc:	b	1bda0 <__assert_fail@plt+0xa0f4>
   1c000:	mov	r0, #12
   1c004:	str	r0, [fp, #-52]	; 0xffffffcc
   1c008:	mov	r0, #0
   1c00c:	str	r0, [r5, #52]	; 0x34
   1c010:	ldr	r4, [sl]
   1c014:	ldr	r0, [r4, #56]	; 0x38
   1c018:	cmp	r0, #0
   1c01c:	beq	1c034 <__assert_fail@plt+0xa388>
   1c020:	ldr	r5, [r0]
   1c024:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1c028:	cmp	r5, #0
   1c02c:	mov	r0, r5
   1c030:	bne	1c020 <__assert_fail@plt+0xa374>
   1c034:	mov	r0, #31
   1c038:	mov	r5, #0
   1c03c:	str	r0, [r4, #64]	; 0x40
   1c040:	str	r5, [r4, #52]	; 0x34
   1c044:	str	r5, [r4, #56]	; 0x38
   1c048:	ldr	r0, [r4, #16]
   1c04c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1c050:	str	r5, [r4, #16]
   1c054:	ldr	r0, [sp, #40]	; 0x28
   1c058:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1c05c:	ldr	r0, [sp, #44]	; 0x2c
   1c060:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1c064:	ldrb	r0, [sp, #107]	; 0x6b
   1c068:	cmp	r0, #0
   1c06c:	beq	1c078 <__assert_fail@plt+0xa3cc>
   1c070:	ldr	r0, [sp, #36]	; 0x24
   1c074:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1c078:	ldr	r0, [sp, #8]
   1c07c:	cmp	r0, #0
   1c080:	beq	1c090 <__assert_fail@plt+0xa3e4>
   1c084:	ldr	r0, [sp, #28]
   1c088:	add	r0, r0, #136	; 0x88
   1c08c:	bl	11874 <pthread_mutex_destroy@plt>
   1c090:	ldr	r0, [sp, #28]
   1c094:	bl	1d30c <__assert_fail@plt+0xb660>
   1c098:	mov	r0, #0
   1c09c:	str	r0, [sl]
   1c0a0:	str	r0, [sl, #4]
   1c0a4:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1c0a8:	b	1cba8 <__assert_fail@plt+0xaefc>
   1c0ac:	ldr	r5, [sp, #28]
   1c0b0:	mov	r6, #0
   1c0b4:	b	1bd84 <__assert_fail@plt+0xa0d8>
   1c0b8:	str	r2, [r0, r2, lsl #2]
   1c0bc:	add	r2, r2, #1
   1c0c0:	cmp	r1, r2
   1c0c4:	bne	1c0b8 <__assert_fail@plt+0xa40c>
   1c0c8:	ldr	r2, [r9, #52]	; 0x34
   1c0cc:	ldrb	r1, [r2, #24]
   1c0d0:	cmp	r1, #17
   1c0d4:	beq	1c100 <__assert_fail@plt+0xa454>
   1c0d8:	cmp	r1, #4
   1c0dc:	bne	1c150 <__assert_fail@plt+0xa4a4>
   1c0e0:	ldr	r1, [r2, #20]
   1c0e4:	mov	r3, #1
   1c0e8:	ldr	r0, [r0, r1, lsl #2]
   1c0ec:	str	r0, [r2, #20]
   1c0f0:	ldr	r1, [r9, #80]	; 0x50
   1c0f4:	orr	r0, r1, r3, lsl r0
   1c0f8:	str	r0, [r9, #80]	; 0x50
   1c0fc:	b	1c150 <__assert_fail@plt+0xa4a4>
   1c100:	ldr	r1, [r2, #4]
   1c104:	cmp	r1, #0
   1c108:	beq	1c150 <__assert_fail@plt+0xa4a4>
   1c10c:	ldrb	r3, [r1, #24]
   1c110:	cmp	r3, #17
   1c114:	bne	1c150 <__assert_fail@plt+0xa4a4>
   1c118:	ldr	r3, [r1, #4]
   1c11c:	ldr	r1, [r1, #20]
   1c120:	cmp	r3, #0
   1c124:	str	r3, [r2, #4]
   1c128:	strne	r2, [r3]
   1c12c:	cmp	r1, #31
   1c130:	ldr	r3, [r2, #20]
   1c134:	ldr	r3, [r0, r3, lsl #2]
   1c138:	str	r3, [r0, r1, lsl #2]
   1c13c:	bgt	1c150 <__assert_fail@plt+0xa4a4>
   1c140:	ldr	r0, [r9, #80]	; 0x50
   1c144:	mov	r3, #1
   1c148:	bic	r0, r0, r3, lsl r1
   1c14c:	b	1c0f8 <__assert_fail@plt+0xa44c>
   1c150:	mov	r0, #1
   1c154:	ldr	r7, [r2, #4]
   1c158:	cmp	r7, #0
   1c15c:	bne	1c18c <__assert_fail@plt+0xa4e0>
   1c160:	mov	r3, #0
   1c164:	ldr	r7, [r2, #8]
   1c168:	mov	r1, r2
   1c16c:	cmp	r7, r3
   1c170:	cmpne	r7, #0
   1c174:	bne	1c18c <__assert_fail@plt+0xa4e0>
   1c178:	ldr	r2, [r1]
   1c17c:	mov	r3, r1
   1c180:	cmp	r2, #0
   1c184:	bne	1c164 <__assert_fail@plt+0xa4b8>
   1c188:	b	1c230 <__assert_fail@plt+0xa584>
   1c18c:	ldrb	r1, [r7, #24]
   1c190:	cmp	r1, #17
   1c194:	beq	1c1d4 <__assert_fail@plt+0xa528>
   1c198:	cmp	r1, #4
   1c19c:	mov	r2, r7
   1c1a0:	bne	1c154 <__assert_fail@plt+0xa4a8>
   1c1a4:	ldr	r1, [r9, #132]	; 0x84
   1c1a8:	mov	r2, r7
   1c1ac:	cmp	r1, #0
   1c1b0:	beq	1c154 <__assert_fail@plt+0xa4a8>
   1c1b4:	ldr	r2, [r7, #20]
   1c1b8:	ldr	r1, [r1, r2, lsl #2]
   1c1bc:	str	r1, [r7, #20]
   1c1c0:	ldr	r2, [r9, #80]	; 0x50
   1c1c4:	orr	r1, r2, r0, lsl r1
   1c1c8:	str	r1, [r9, #80]	; 0x50
   1c1cc:	mov	r2, r7
   1c1d0:	b	1c154 <__assert_fail@plt+0xa4a8>
   1c1d4:	ldr	r3, [r7, #4]
   1c1d8:	mov	r2, r7
   1c1dc:	cmp	r3, #0
   1c1e0:	beq	1c154 <__assert_fail@plt+0xa4a8>
   1c1e4:	ldrb	r1, [r3, #24]
   1c1e8:	mov	r2, r7
   1c1ec:	cmp	r1, #17
   1c1f0:	bne	1c154 <__assert_fail@plt+0xa4a8>
   1c1f4:	ldr	r1, [r3, #4]
   1c1f8:	ldr	r3, [r3, #20]
   1c1fc:	cmp	r1, #0
   1c200:	str	r1, [r7, #4]
   1c204:	strne	r7, [r1]
   1c208:	cmp	r3, #31
   1c20c:	ldr	r1, [r7, #20]
   1c210:	ldr	r2, [r9, #132]	; 0x84
   1c214:	ldr	r1, [r2, r1, lsl #2]
   1c218:	str	r1, [r2, r3, lsl #2]
   1c21c:	mov	r2, r7
   1c220:	bgt	1c154 <__assert_fail@plt+0xa4a8>
   1c224:	ldr	r1, [r9, #80]	; 0x50
   1c228:	bic	r1, r1, r0, lsl r3
   1c22c:	b	1c1c8 <__assert_fail@plt+0xa51c>
   1c230:	ldr	r1, [sl, #24]
   1c234:	cmp	r1, #0
   1c238:	beq	1c260 <__assert_fail@plt+0xa5b4>
   1c23c:	ldr	r0, [r9, #132]	; 0x84
   1c240:	mov	r2, #0
   1c244:	ldr	r3, [r0, r2, lsl #2]
   1c248:	cmp	r2, r3
   1c24c:	bne	1c280 <__assert_fail@plt+0xa5d4>
   1c250:	add	r2, r2, #1
   1c254:	cmp	r1, r2
   1c258:	bne	1c244 <__assert_fail@plt+0xa598>
   1c25c:	b	1c288 <__assert_fail@plt+0xa5dc>
   1c260:	ldr	r0, [r9, #132]	; 0x84
   1c264:	b	1c288 <__assert_fail@plt+0xa5dc>
   1c268:	nop	{0}
   1c26c:	nop	{0}
   1c270:	andeq	r0, r0, r0
   1c274:	andeq	r0, r0, r1
   1c278:	andeq	r0, r0, r2
   1c27c:	andeq	r0, r0, r3
   1c280:	cmp	r1, r2
   1c284:	bne	1c294 <__assert_fail@plt+0xa5e8>
   1c288:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1c28c:	mov	r0, #0
   1c290:	str	r0, [r9, #132]	; 0x84
   1c294:	ldr	r0, [r9, #52]	; 0x34
   1c298:	mov	r7, #0
   1c29c:	sub	r8, fp, #48	; 0x30
   1c2a0:	mov	r4, r0
   1c2a4:	ldr	r0, [r0, #4]
   1c2a8:	cmp	r0, #0
   1c2ac:	bne	1c2a0 <__assert_fail@plt+0xa5f4>
   1c2b0:	ldr	r0, [r4, #8]
   1c2b4:	cmp	r0, #0
   1c2b8:	bne	1c2a0 <__assert_fail@plt+0xa5f4>
   1c2bc:	mov	r2, #0
   1c2c0:	cmp	r2, #0
   1c2c4:	str	r7, [fp, #-48]	; 0xffffffd0
   1c2c8:	beq	1c2f0 <__assert_fail@plt+0xa644>
   1c2cc:	ldrb	r0, [r2, #24]
   1c2d0:	cmp	r0, #17
   1c2d4:	bne	1c2f0 <__assert_fail@plt+0xa644>
   1c2d8:	mov	r0, r8
   1c2dc:	mov	r1, sl
   1c2e0:	bl	25c0c <__assert_fail@plt+0x13f60>
   1c2e4:	cmp	r0, #0
   1c2e8:	str	r0, [r4, #4]
   1c2ec:	strne	r4, [r0]
   1c2f0:	ldr	r2, [r4, #8]
   1c2f4:	cmp	r2, #0
   1c2f8:	beq	1c320 <__assert_fail@plt+0xa674>
   1c2fc:	ldrb	r0, [r2, #24]
   1c300:	cmp	r0, #17
   1c304:	bne	1c320 <__assert_fail@plt+0xa674>
   1c308:	mov	r0, r8
   1c30c:	mov	r1, sl
   1c310:	bl	25c0c <__assert_fail@plt+0x13f60>
   1c314:	cmp	r0, #0
   1c318:	str	r0, [r4, #8]
   1c31c:	strne	r4, [r0]
   1c320:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1c324:	cmp	r0, #0
   1c328:	bne	1be64 <__assert_fail@plt+0xa1b8>
   1c32c:	ldr	r1, [r4]
   1c330:	cmp	r1, #0
   1c334:	beq	1c354 <__assert_fail@plt+0xa6a8>
   1c338:	ldr	r0, [r1, #8]
   1c33c:	cmp	r0, r4
   1c340:	cmpne	r0, #0
   1c344:	bne	1c2a0 <__assert_fail@plt+0xa5f4>
   1c348:	ldr	r2, [r1, #4]
   1c34c:	mov	r4, r1
   1c350:	b	1c2c0 <__assert_fail@plt+0xa614>
   1c354:	ldr	r0, [r9, #52]	; 0x34
   1c358:	mov	r4, r0
   1c35c:	ldr	r0, [r0, #4]
   1c360:	cmp	r0, #0
   1c364:	bne	1c358 <__assert_fail@plt+0xa6ac>
   1c368:	ldr	r0, [r4, #8]
   1c36c:	cmp	r0, #0
   1c370:	bne	1c358 <__assert_fail@plt+0xa6ac>
   1c374:	ldr	r2, [r4, #24]
   1c378:	uxtb	r0, r2
   1c37c:	cmp	r0, #16
   1c380:	bne	1c39c <__assert_fail@plt+0xa6f0>
   1c384:	ldr	r0, [r4, #4]
   1c388:	ldr	r1, [r0, #12]
   1c38c:	str	r1, [r4, #12]
   1c390:	ldr	r0, [r0, #28]
   1c394:	str	r0, [r4, #28]
   1c398:	b	1c3dc <__assert_fail@plt+0xa730>
   1c39c:	str	r4, [r4, #12]
   1c3a0:	mov	r0, r9
   1c3a4:	ldr	r1, [r4, #20]
   1c3a8:	bl	25ec8 <__assert_fail@plt+0x1421c>
   1c3ac:	cmn	r0, #1
   1c3b0:	str	r0, [r4, #28]
   1c3b4:	beq	1be60 <__assert_fail@plt+0xa1b4>
   1c3b8:	ldrb	r1, [r4, #24]
   1c3bc:	cmp	r1, #12
   1c3c0:	bne	1c3dc <__assert_fail@plt+0xa730>
   1c3c4:	ldr	r1, [r9]
   1c3c8:	ldr	r2, [r4, #20]
   1c3cc:	add	r0, r1, r0, lsl #3
   1c3d0:	ldr	r1, [r0, #4]
   1c3d4:	bfi	r1, r2, #8, #10
   1c3d8:	str	r1, [r0, #4]
   1c3dc:	ldr	r1, [r4]
   1c3e0:	cmp	r1, #0
   1c3e4:	beq	1c408 <__assert_fail@plt+0xa75c>
   1c3e8:	ldr	r0, [r1, #8]
   1c3ec:	cmp	r0, r4
   1c3f0:	mov	r4, r1
   1c3f4:	beq	1c374 <__assert_fail@plt+0xa6c8>
   1c3f8:	cmp	r0, #0
   1c3fc:	mov	r4, r1
   1c400:	beq	1c374 <__assert_fail@plt+0xa6c8>
   1c404:	b	1c358 <__assert_fail@plt+0xa6ac>
   1c408:	ldr	r4, [r9, #52]	; 0x34
   1c40c:	ldrb	r0, [r4, #24]
   1c410:	cmp	r0, #16
   1c414:	beq	1c42c <__assert_fail@plt+0xa780>
   1c418:	cmp	r0, #11
   1c41c:	bne	1c43c <__assert_fail@plt+0xa790>
   1c420:	ldr	r0, [r4, #4]
   1c424:	str	r4, [r0, #16]
   1c428:	b	1c460 <__assert_fail@plt+0xa7b4>
   1c42c:	ldmib	r4, {r0, r1}
   1c430:	ldr	r2, [r1, #12]
   1c434:	str	r2, [r0, #16]
   1c438:	b	1c458 <__assert_fail@plt+0xa7ac>
   1c43c:	ldr	r0, [r4, #4]
   1c440:	cmp	r0, #0
   1c444:	ldrne	r1, [r4, #16]
   1c448:	strne	r1, [r0, #16]
   1c44c:	ldr	r1, [r4, #8]
   1c450:	cmp	r1, #0
   1c454:	beq	1c460 <__assert_fail@plt+0xa7b4>
   1c458:	ldr	r2, [r4, #16]
   1c45c:	str	r2, [r1, #16]
   1c460:	mov	r1, r4
   1c464:	cmp	r0, #0
   1c468:	bne	1c480 <__assert_fail@plt+0xa7d4>
   1c46c:	b	1c4d4 <__assert_fail@plt+0xa828>
   1c470:	ldr	r0, [r1, #4]
   1c474:	str	r1, [r0, #16]
   1c478:	cmp	r0, #0
   1c47c:	beq	1c4d4 <__assert_fail@plt+0xa828>
   1c480:	mov	r1, r0
   1c484:	ldrb	r0, [r0, #24]
   1c488:	cmp	r0, #16
   1c48c:	beq	1c4b8 <__assert_fail@plt+0xa80c>
   1c490:	cmp	r0, #11
   1c494:	beq	1c470 <__assert_fail@plt+0xa7c4>
   1c498:	ldr	r0, [r1, #4]
   1c49c:	cmp	r0, #0
   1c4a0:	ldrne	r2, [r1, #16]
   1c4a4:	strne	r2, [r0, #16]
   1c4a8:	ldr	r2, [r1, #8]
   1c4ac:	cmp	r2, #0
   1c4b0:	beq	1c478 <__assert_fail@plt+0xa7cc>
   1c4b4:	b	1c4c4 <__assert_fail@plt+0xa818>
   1c4b8:	ldmib	r1, {r0, r2}
   1c4bc:	ldr	r3, [r2, #12]
   1c4c0:	str	r3, [r0, #16]
   1c4c4:	ldr	r3, [r1, #16]
   1c4c8:	str	r3, [r2, #16]
   1c4cc:	cmp	r0, #0
   1c4d0:	bne	1c480 <__assert_fail@plt+0xa7d4>
   1c4d4:	mov	r3, #0
   1c4d8:	ldr	r0, [r1, #8]
   1c4dc:	mov	r2, r1
   1c4e0:	cmp	r0, r3
   1c4e4:	cmpne	r0, #0
   1c4e8:	bne	1c480 <__assert_fail@plt+0xa7d4>
   1c4ec:	ldr	r1, [r2]
   1c4f0:	mov	r3, r2
   1c4f4:	cmp	r1, #0
   1c4f8:	bne	1c4d8 <__assert_fail@plt+0xa82c>
   1c4fc:	mov	r0, r9
   1c500:	mov	r1, r4
   1c504:	bl	25a70 <__assert_fail@plt+0x13dc4>
   1c508:	cmp	r0, #0
   1c50c:	beq	1c52c <__assert_fail@plt+0xa880>
   1c510:	b	1be64 <__assert_fail@plt+0xa1b8>
   1c514:	mov	r0, r9
   1c518:	mov	r1, r7
   1c51c:	bl	25a70 <__assert_fail@plt+0x13dc4>
   1c520:	cmp	r0, #0
   1c524:	mov	r4, r7
   1c528:	bne	1be64 <__assert_fail@plt+0xa1b8>
   1c52c:	ldr	r7, [r4, #4]
   1c530:	cmp	r7, #0
   1c534:	bne	1c514 <__assert_fail@plt+0xa868>
   1c538:	mov	r1, #0
   1c53c:	ldr	r7, [r4, #8]
   1c540:	mov	r0, r4
   1c544:	cmp	r7, r1
   1c548:	cmpne	r7, #0
   1c54c:	bne	1c514 <__assert_fail@plt+0xa868>
   1c550:	ldr	r4, [r0]
   1c554:	mov	r1, r0
   1c558:	cmp	r4, #0
   1c55c:	bne	1c53c <__assert_fail@plt+0xa890>
   1c560:	mov	r5, #0
   1c564:	sub	r4, fp, #48	; 0x30
   1c568:	mov	r7, #0
   1c56c:	b	1c59c <__assert_fail@plt+0xa8f0>
   1c570:	mov	r1, r5
   1c574:	ldr	r2, [r9, #8]
   1c578:	add	r0, r7, #1
   1c57c:	subs	r3, r0, r2
   1c580:	mov	r7, r3
   1c584:	movwne	r3, #1
   1c588:	movne	r7, r0
   1c58c:	tst	r1, #1
   1c590:	and	r5, r1, r3
   1c594:	cmpeq	r0, r2
   1c598:	beq	1c5f8 <__assert_fail@plt+0xa94c>
   1c59c:	ldr	r0, [r9, #24]
   1c5a0:	add	r6, r7, r7, lsl #1
   1c5a4:	add	r0, r0, r6, lsl #2
   1c5a8:	ldr	r0, [r0, #4]
   1c5ac:	cmp	r0, #0
   1c5b0:	bne	1c570 <__assert_fail@plt+0xa8c4>
   1c5b4:	mov	r0, r4
   1c5b8:	mov	r1, r9
   1c5bc:	mov	r2, r7
   1c5c0:	mov	r3, #1
   1c5c4:	bl	26098 <__assert_fail@plt+0x143ec>
   1c5c8:	cmp	r0, #0
   1c5cc:	bne	1be64 <__assert_fail@plt+0xa1b8>
   1c5d0:	ldr	r0, [r9, #24]
   1c5d4:	mov	r1, r5
   1c5d8:	add	r0, r0, r6, lsl #2
   1c5dc:	ldr	r0, [r0, #4]
   1c5e0:	cmp	r0, #0
   1c5e4:	bne	1c574 <__assert_fail@plt+0xa8c8>
   1c5e8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1c5ec:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1c5f0:	mov	r1, #1
   1c5f4:	b	1c574 <__assert_fail@plt+0xa8c8>
   1c5f8:	ldrb	r1, [sl, #28]
   1c5fc:	str	sl, [sp, #12]
   1c600:	tst	r1, #16
   1c604:	bne	1c624 <__assert_fail@plt+0xa978>
   1c608:	ldr	r1, [sp, #12]
   1c60c:	ldr	r1, [r1, #24]
   1c610:	cmp	r1, #0
   1c614:	beq	1c624 <__assert_fail@plt+0xa978>
   1c618:	ldrb	r1, [r9, #88]	; 0x58
   1c61c:	tst	r1, #1
   1c620:	bne	1c630 <__assert_fail@plt+0xa984>
   1c624:	ldr	r1, [r9, #76]	; 0x4c
   1c628:	cmp	r1, #0
   1c62c:	beq	1c778 <__assert_fail@plt+0xaacc>
   1c630:	add	r0, r0, r0, lsl #1
   1c634:	lsl	r0, r0, #2
   1c638:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1c63c:	cmp	r0, #0
   1c640:	str	r0, [r9, #28]
   1c644:	beq	1cbb4 <__assert_fail@plt+0xaf08>
   1c648:	ldr	r1, [r9, #8]
   1c64c:	cmp	r1, #0
   1c650:	beq	1c778 <__assert_fail@plt+0xaacc>
   1c654:	mov	r1, #0
   1c658:	str	r1, [r0]
   1c65c:	str	r1, [r0, #4]
   1c660:	str	r1, [r0, #8]
   1c664:	ldr	r0, [r9, #8]
   1c668:	cmp	r0, #2
   1c66c:	bcc	1c69c <__assert_fail@plt+0xa9f0>
   1c670:	mov	r2, #1
   1c674:	mov	r3, #12
   1c678:	ldr	r0, [r9, #28]
   1c67c:	add	r2, r2, #1
   1c680:	str	r1, [r0, r3]!
   1c684:	add	r3, r3, #12
   1c688:	str	r1, [r0, #4]
   1c68c:	str	r1, [r0, #8]
   1c690:	ldr	r0, [r9, #8]
   1c694:	cmp	r2, r0
   1c698:	bcc	1c678 <__assert_fail@plt+0xa9cc>
   1c69c:	cmp	r0, #0
   1c6a0:	beq	1c778 <__assert_fail@plt+0xaacc>
   1c6a4:	ldr	ip, [r9, #24]
   1c6a8:	mov	r6, #0
   1c6ac:	b	1c6c0 <__assert_fail@plt+0xaa14>
   1c6b0:	ldr	r0, [r9, #8]
   1c6b4:	add	r6, r6, #1
   1c6b8:	cmp	r6, r0
   1c6bc:	bcs	1c778 <__assert_fail@plt+0xaacc>
   1c6c0:	add	lr, r6, r6, lsl #1
   1c6c4:	add	r2, ip, lr, lsl #2
   1c6c8:	ldr	r3, [r2, #4]
   1c6cc:	cmp	r3, #1
   1c6d0:	blt	1c6b4 <__assert_fail@plt+0xaa08>
   1c6d4:	ldr	r1, [r2, #8]
   1c6d8:	mov	r5, #0
   1c6dc:	str	lr, [sp, #24]
   1c6e0:	str	r1, [sp, #20]
   1c6e4:	b	1c710 <__assert_fail@plt+0xaa64>
   1c6e8:	add	r0, r4, r0, lsl #2
   1c6ec:	ldr	r0, [r0, #8]
   1c6f0:	add	r3, r2, #1
   1c6f4:	add	r5, r5, #1
   1c6f8:	str	r3, [r8]
   1c6fc:	str	r6, [r0, r2, lsl #2]
   1c700:	add	r0, ip, lr, lsl #2
   1c704:	ldr	r0, [r0, #4]
   1c708:	cmp	r5, r0
   1c70c:	bge	1c6b0 <__assert_fail@plt+0xaa04>
   1c710:	ldr	r0, [r1, r5, lsl #2]
   1c714:	ldr	r4, [r9, #28]
   1c718:	add	r0, r0, r0, lsl #1
   1c71c:	mov	r3, r4
   1c720:	ldr	r7, [r3, r0, lsl #2]!
   1c724:	mov	r8, r3
   1c728:	ldr	r2, [r8, #4]!
   1c72c:	cmp	r7, r2
   1c730:	bne	1c6e8 <__assert_fail@plt+0xaa3c>
   1c734:	mov	r1, #2
   1c738:	mov	sl, r9
   1c73c:	add	r9, r4, r0, lsl #2
   1c740:	add	r1, r1, r7, lsl #1
   1c744:	str	r1, [r3]
   1c748:	lsl	r1, r1, #2
   1c74c:	ldr	r0, [r9, #8]!
   1c750:	bl	1b64c <__assert_fail@plt+0x99a0>
   1c754:	cmp	r0, #0
   1c758:	beq	1cbb4 <__assert_fail@plt+0xaf08>
   1c75c:	str	r0, [r9]
   1c760:	ldr	lr, [sp, #24]
   1c764:	ldr	r1, [sp, #20]
   1c768:	mov	r9, sl
   1c76c:	ldr	ip, [sl, #24]
   1c770:	ldr	r2, [r8]
   1c774:	b	1c6f0 <__assert_fail@plt+0xaa44>
   1c778:	mov	r0, #0
   1c77c:	ldr	sl, [sp, #12]
   1c780:	str	r0, [fp, #-52]	; 0xffffffcc
   1c784:	ldr	r0, [sp, #16]
   1c788:	cmp	r0, #0
   1c78c:	bne	1c8d4 <__assert_fail@plt+0xac28>
   1c790:	ldr	r0, [sp, #28]
   1c794:	ldrb	r2, [r0, #88]	; 0x58
   1c798:	ands	r0, r2, #4
   1c79c:	beq	1c8d4 <__assert_fail@plt+0xac28>
   1c7a0:	ldr	r0, [sl, #20]
   1c7a4:	cmp	r0, #0
   1c7a8:	bne	1c8d4 <__assert_fail@plt+0xac28>
   1c7ac:	ldr	r5, [sp, #28]
   1c7b0:	mov	r9, #0
   1c7b4:	ldr	r7, [r5, #8]
   1c7b8:	cmp	r7, #0
   1c7bc:	beq	1c7dc <__assert_fail@plt+0xab30>
   1c7c0:	ldr	r3, [r5]
   1c7c4:	mov	r8, #0
   1c7c8:	mov	ip, #1
   1c7cc:	mov	lr, #139	; 0x8b
   1c7d0:	mov	r6, #0
   1c7d4:	mov	r4, #0
   1c7d8:	b	1c82c <__assert_fail@plt+0xab80>
   1c7dc:	mov	r8, #0
   1c7e0:	mov	r0, #1
   1c7e4:	and	r1, r2, #249	; 0xf9
   1c7e8:	str	r0, [r5, #92]	; 0x5c
   1c7ec:	ldr	r0, [r5, #76]	; 0x4c
   1c7f0:	cmp	r0, #0
   1c7f4:	movwgt	r9, #1
   1c7f8:	orr	r0, r8, r9
   1c7fc:	and	r0, r0, #1
   1c800:	orr	r0, r1, r0, lsl #1
   1c804:	strb	r0, [r5, #88]	; 0x58
   1c808:	b	1c8d4 <__assert_fail@plt+0xac28>
   1c80c:	ldrsb	r0, [r5]
   1c810:	cmp	r0, #0
   1c814:	mov	r0, #0
   1c818:	movwmi	r0, #1
   1c81c:	orr	r6, r6, r0
   1c820:	add	r4, r4, #1
   1c824:	cmp	r7, r4
   1c828:	beq	1cbc4 <__assert_fail@plt+0xaf18>
   1c82c:	add	r5, r3, r4, lsl #3
   1c830:	ldrb	r1, [r5, #4]
   1c834:	sub	r1, r1, #1
   1c838:	cmp	r1, #11
   1c83c:	bhi	1cc54 <__assert_fail@plt+0xafa8>
   1c840:	add	r0, pc, #0
   1c844:	ldr	pc, [r0, r1, lsl #2]
   1c848:	andeq	ip, r1, ip, lsl #16
   1c84c:	andeq	ip, r1, r0, lsr #16
   1c850:	andeq	ip, r1, r8, ror r8
   1c854:	andeq	ip, r1, r0, lsr #16
   1c858:	andeq	ip, r1, ip, asr #17
   1c85c:	ldrdeq	ip, [r1], -r4
   1c860:	andeq	ip, r1, r4, asr ip
   1c864:	andeq	ip, r1, r0, lsr #16
   1c868:	andeq	ip, r1, r0, lsr #16
   1c86c:	andeq	ip, r1, r0, lsr #16
   1c870:	andeq	ip, r1, r0, lsr #16
   1c874:	andeq	ip, r1, ip, lsr #17
   1c878:	ldr	r5, [r3, r4, lsl #3]
   1c87c:	ldr	r0, [r5, #16]
   1c880:	cmp	r0, #0
   1c884:	bne	1c8d4 <__assert_fail@plt+0xac28>
   1c888:	ldr	r0, [r5, #20]
   1c88c:	cmp	r0, #0
   1c890:	ldreq	r0, [r5, #24]
   1c894:	cmpeq	r0, #0
   1c898:	bne	1c8d4 <__assert_fail@plt+0xac28>
   1c89c:	ldr	r0, [r5, #28]
   1c8a0:	cmp	r0, #0
   1c8a4:	beq	1c820 <__assert_fail@plt+0xab74>
   1c8a8:	b	1c8d4 <__assert_fail@plt+0xac28>
   1c8ac:	ldr	r0, [r3, r4, lsl #3]
   1c8b0:	sub	r0, r0, #16
   1c8b4:	ror	r1, r0, #4
   1c8b8:	cmp	r1, #7
   1c8bc:	bhi	1c8d4 <__assert_fail@plt+0xac28>
   1c8c0:	tst	lr, ip, lsl r1
   1c8c4:	bne	1c820 <__assert_fail@plt+0xab74>
   1c8c8:	b	1c8d4 <__assert_fail@plt+0xac28>
   1c8cc:	mov	r8, #1
   1c8d0:	b	1c820 <__assert_fail@plt+0xab74>
   1c8d4:	ldr	lr, [sp, #28]
   1c8d8:	ldr	r1, [lr, #52]	; 0x34
   1c8dc:	ldr	r0, [lr, #24]
   1c8e0:	ldr	r1, [r1, #12]
   1c8e4:	ldr	r1, [r1, #28]
   1c8e8:	str	r1, [lr, #72]	; 0x48
   1c8ec:	add	r1, r1, r1, lsl #1
   1c8f0:	add	r5, r0, r1, lsl #2
   1c8f4:	mov	r4, r5
   1c8f8:	ldr	r7, [r4, #4]!
   1c8fc:	str	r7, [fp, #-44]	; 0xffffffd4
   1c900:	ldr	r0, [r4]
   1c904:	cmp	r0, #1
   1c908:	blt	1ca54 <__assert_fail@plt+0xada8>
   1c90c:	lsl	r0, r7, #2
   1c910:	str	r7, [fp, #-48]	; 0xffffffd0
   1c914:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1c918:	cmp	r0, #0
   1c91c:	str	r0, [fp, #-40]	; 0xffffffd8
   1c920:	beq	1cc3c <__assert_fail@plt+0xaf90>
   1c924:	mov	r6, r0
   1c928:	ldr	r0, [r4]
   1c92c:	ldr	r1, [r5, #8]
   1c930:	lsl	r2, r0, #2
   1c934:	mov	r0, r6
   1c938:	bl	118ec <memcpy@plt>
   1c93c:	ldr	lr, [sp, #28]
   1c940:	mov	r0, #0
   1c944:	cmp	r7, #1
   1c948:	str	r0, [fp, #-32]	; 0xffffffe0
   1c94c:	ldrge	r0, [lr, #76]	; 0x4c
   1c950:	cmpge	r0, #1
   1c954:	blt	1ca68 <__assert_fail@plt+0xadbc>
   1c958:	mov	r0, #0
   1c95c:	sub	r8, fp, #48	; 0x30
   1c960:	mov	r9, #1
   1c964:	ldr	r1, [r6, r0, lsl #2]
   1c968:	ldr	r2, [lr]
   1c96c:	add	r3, r2, r1, lsl #3
   1c970:	ldrb	r3, [r3, #4]
   1c974:	cmp	r3, #4
   1c978:	bne	1ca40 <__assert_fail@plt+0xad94>
   1c97c:	mov	r3, #0
   1c980:	cmp	r7, #1
   1c984:	bge	1c998 <__assert_fail@plt+0xacec>
   1c988:	b	1c9bc <__assert_fail@plt+0xad10>
   1c98c:	add	r3, r3, #1
   1c990:	cmp	r7, r3
   1c994:	beq	1ca40 <__assert_fail@plt+0xad94>
   1c998:	ldr	r5, [r6, r3, lsl #2]
   1c99c:	add	r4, r2, r5, lsl #3
   1c9a0:	ldrb	r4, [r4, #4]
   1c9a4:	cmp	r4, #9
   1c9a8:	bne	1c98c <__assert_fail@plt+0xace0>
   1c9ac:	ldr	r4, [r2, r1, lsl #3]
   1c9b0:	ldr	r5, [r2, r5, lsl #3]
   1c9b4:	cmp	r5, r4
   1c9b8:	bne	1c98c <__assert_fail@plt+0xace0>
   1c9bc:	cmp	r3, r7
   1c9c0:	beq	1ca40 <__assert_fail@plt+0xad94>
   1c9c4:	ldr	r2, [lr, #20]
   1c9c8:	add	r1, r1, r1, lsl #1
   1c9cc:	cmp	r7, #1
   1c9d0:	add	r1, r2, r1, lsl #2
   1c9d4:	ldr	r1, [r1, #8]
   1c9d8:	ldr	ip, [r1]
   1c9dc:	blt	1ca18 <__assert_fail@plt+0xad6c>
   1c9e0:	mov	r2, #0
   1c9e4:	subs	r3, r7, #1
   1c9e8:	beq	1ca0c <__assert_fail@plt+0xad60>
   1c9ec:	add	r5, r2, r3
   1c9f0:	lsr	r4, r5, #1
   1c9f4:	ldr	r1, [r6, r4, lsl #2]
   1c9f8:	cmp	r1, ip
   1c9fc:	addlt	r2, r9, r5, lsr #1
   1ca00:	movge	r3, r4
   1ca04:	cmp	r2, r3
   1ca08:	bcc	1c9ec <__assert_fail@plt+0xad40>
   1ca0c:	ldr	r1, [r6, r2, lsl #2]
   1ca10:	cmp	r1, ip
   1ca14:	beq	1ca40 <__assert_fail@plt+0xad94>
   1ca18:	ldr	r0, [lr, #24]
   1ca1c:	add	r1, ip, ip, lsl #1
   1ca20:	add	r1, r0, r1, lsl #2
   1ca24:	mov	r0, r8
   1ca28:	bl	26748 <__assert_fail@plt+0x14a9c>
   1ca2c:	cmp	r0, #0
   1ca30:	bne	1cb30 <__assert_fail@plt+0xae84>
   1ca34:	ldr	r7, [fp, #-44]	; 0xffffffd4
   1ca38:	ldr	lr, [sp, #28]
   1ca3c:	mov	r0, #0
   1ca40:	add	r0, r0, #1
   1ca44:	cmp	r0, r7
   1ca48:	bge	1ca68 <__assert_fail@plt+0xadbc>
   1ca4c:	ldr	r6, [fp, #-40]	; 0xffffffd8
   1ca50:	b	1c964 <__assert_fail@plt+0xacb8>
   1ca54:	mov	r0, #0
   1ca58:	str	r0, [fp, #-44]	; 0xffffffd4
   1ca5c:	str	r0, [fp, #-48]	; 0xffffffd0
   1ca60:	str	r0, [fp, #-40]	; 0xffffffd8
   1ca64:	str	r0, [fp, #-32]	; 0xffffffe0
   1ca68:	sub	r0, fp, #32
   1ca6c:	sub	r2, fp, #48	; 0x30
   1ca70:	mov	r1, lr
   1ca74:	mov	r3, #0
   1ca78:	bl	26a48 <__assert_fail@plt+0x14d9c>
   1ca7c:	ldr	r1, [sp, #28]
   1ca80:	cmp	r0, #0
   1ca84:	str	r0, [r1, #36]	; 0x24
   1ca88:	beq	1cb10 <__assert_fail@plt+0xae64>
   1ca8c:	ldrsb	r2, [r0, #52]	; 0x34
   1ca90:	cmn	r2, #1
   1ca94:	ble	1caa8 <__assert_fail@plt+0xadfc>
   1ca98:	str	r0, [r1, #40]	; 0x28
   1ca9c:	str	r0, [r1, #44]	; 0x2c
   1caa0:	str	r0, [r1, #48]	; 0x30
   1caa4:	b	1cb24 <__assert_fail@plt+0xae78>
   1caa8:	sub	r4, fp, #32
   1caac:	sub	r6, fp, #48	; 0x30
   1cab0:	mov	r3, #1
   1cab4:	mov	r0, r4
   1cab8:	mov	r2, r6
   1cabc:	bl	26a48 <__assert_fail@plt+0x14d9c>
   1cac0:	ldr	r1, [sp, #28]
   1cac4:	mov	r2, r6
   1cac8:	mov	r3, #2
   1cacc:	str	r0, [r1, #40]	; 0x28
   1cad0:	ldr	r1, [sp, #28]
   1cad4:	mov	r0, r4
   1cad8:	bl	26a48 <__assert_fail@plt+0x14d9c>
   1cadc:	ldr	r1, [sp, #28]
   1cae0:	mov	r2, r6
   1cae4:	mov	r3, #6
   1cae8:	str	r0, [r1, #44]	; 0x2c
   1caec:	ldr	r1, [sp, #28]
   1caf0:	mov	r0, r4
   1caf4:	bl	26a48 <__assert_fail@plt+0x14d9c>
   1caf8:	ldr	r2, [sp, #28]
   1cafc:	str	r0, [r2, #48]	; 0x30
   1cb00:	ldr	r1, [r2, #40]	; 0x28
   1cb04:	cmp	r1, #0
   1cb08:	cmpne	r0, #0
   1cb0c:	bne	1cb18 <__assert_fail@plt+0xae6c>
   1cb10:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1cb14:	b	1cb30 <__assert_fail@plt+0xae84>
   1cb18:	ldr	r0, [r2, #44]	; 0x2c
   1cb1c:	cmp	r0, #0
   1cb20:	beq	1cb10 <__assert_fail@plt+0xae64>
   1cb24:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1cb28:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1cb2c:	mov	r0, #0
   1cb30:	str	r0, [fp, #-52]	; 0xffffffcc
   1cb34:	ldr	r5, [sl]
   1cb38:	ldr	r0, [r5, #56]	; 0x38
   1cb3c:	cmp	r0, #0
   1cb40:	beq	1cb58 <__assert_fail@plt+0xaeac>
   1cb44:	ldr	r4, [r0]
   1cb48:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1cb4c:	cmp	r4, #0
   1cb50:	mov	r0, r4
   1cb54:	bne	1cb44 <__assert_fail@plt+0xae98>
   1cb58:	mov	r0, #31
   1cb5c:	mov	r4, #0
   1cb60:	str	r0, [r5, #64]	; 0x40
   1cb64:	str	r4, [r5, #52]	; 0x34
   1cb68:	str	r4, [r5, #56]	; 0x38
   1cb6c:	ldr	r0, [r5, #16]
   1cb70:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1cb74:	str	r4, [r5, #16]
   1cb78:	ldr	r0, [sp, #40]	; 0x28
   1cb7c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1cb80:	ldr	r0, [sp, #44]	; 0x2c
   1cb84:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1cb88:	ldrb	r0, [sp, #107]	; 0x6b
   1cb8c:	cmp	r0, #0
   1cb90:	beq	1cb9c <__assert_fail@plt+0xaef0>
   1cb94:	ldr	r0, [sp, #36]	; 0x24
   1cb98:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1cb9c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1cba0:	cmp	r0, #0
   1cba4:	bne	1c078 <__assert_fail@plt+0xa3cc>
   1cba8:	mov	r0, r4
   1cbac:	sub	sp, fp, #28
   1cbb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cbb4:	ldr	sl, [sp, #12]
   1cbb8:	mov	r0, #12
   1cbbc:	str	r0, [fp, #-52]	; 0xffffffcc
   1cbc0:	b	1c010 <__assert_fail@plt+0xa364>
   1cbc4:	orr	r0, r6, r8
   1cbc8:	tst	r0, #1
   1cbcc:	beq	1cc2c <__assert_fail@plt+0xaf80>
   1cbd0:	ldr	r5, [sp, #28]
   1cbd4:	mov	r2, #0
   1cbd8:	mov	r7, #7
   1cbdc:	add	r3, r3, r2, lsl #3
   1cbe0:	ldr	r6, [r3, #4]
   1cbe4:	uxtb	r1, r6
   1cbe8:	cmp	r1, #5
   1cbec:	beq	1cc0c <__assert_fail@plt+0xaf60>
   1cbf0:	cmp	r1, #1
   1cbf4:	bne	1cc14 <__assert_fail@plt+0xaf68>
   1cbf8:	ldrsb	r0, [r3]
   1cbfc:	cmn	r0, #1
   1cc00:	bicle	r0, r6, #2097152	; 0x200000
   1cc04:	strle	r0, [r3, #4]
   1cc08:	b	1cc14 <__assert_fail@plt+0xaf68>
   1cc0c:	bfi	r6, r7, #0, #8
   1cc10:	str	r6, [r3, #4]
   1cc14:	ldr	r0, [r5, #8]
   1cc18:	add	r2, r2, #1
   1cc1c:	cmp	r2, r0
   1cc20:	bcs	1cc34 <__assert_fail@plt+0xaf88>
   1cc24:	ldr	r3, [r5]
   1cc28:	b	1cbdc <__assert_fail@plt+0xaf30>
   1cc2c:	ldr	r5, [sp, #28]
   1cc30:	b	1c7e0 <__assert_fail@plt+0xab34>
   1cc34:	ldrb	r2, [r5, #88]	; 0x58
   1cc38:	b	1c7e0 <__assert_fail@plt+0xab34>
   1cc3c:	mov	r0, #0
   1cc40:	str	r0, [fp, #-48]	; 0xffffffd0
   1cc44:	str	r0, [fp, #-44]	; 0xffffffd4
   1cc48:	mov	r0, #12
   1cc4c:	str	r0, [fp, #-32]	; 0xffffffe0
   1cc50:	b	1cb30 <__assert_fail@plt+0xae84>
   1cc54:	bl	11c70 <abort@plt>
   1cc58:	movw	r2, #9164	; 0x23cc
   1cc5c:	movt	r2, #4
   1cc60:	ldr	r1, [r2]
   1cc64:	str	r0, [r2]
   1cc68:	mov	r0, r1
   1cc6c:	bx	lr
   1cc70:	push	{r4, r5, r6, sl, fp, lr}
   1cc74:	add	fp, sp, #16
   1cc78:	ldr	r5, [r0, #16]
   1cc7c:	ldr	r6, [r0]
   1cc80:	mov	r4, r0
   1cc84:	mov	r1, #0
   1cc88:	mov	r2, #256	; 0x100
   1cc8c:	mov	r0, r5
   1cc90:	bl	11b2c <memset@plt>
   1cc94:	ldr	r1, [r6, #36]	; 0x24
   1cc98:	mov	r0, r4
   1cc9c:	mov	r2, r5
   1cca0:	bl	1cd08 <__assert_fail@plt+0xb05c>
   1cca4:	ldr	r0, [r6, #36]	; 0x24
   1cca8:	ldr	r1, [r6, #40]	; 0x28
   1ccac:	cmp	r0, r1
   1ccb0:	beq	1ccc4 <__assert_fail@plt+0xb018>
   1ccb4:	mov	r0, r4
   1ccb8:	mov	r2, r5
   1ccbc:	bl	1cd08 <__assert_fail@plt+0xb05c>
   1ccc0:	ldr	r0, [r6, #36]	; 0x24
   1ccc4:	ldr	r1, [r6, #44]	; 0x2c
   1ccc8:	cmp	r0, r1
   1cccc:	beq	1cce0 <__assert_fail@plt+0xb034>
   1ccd0:	mov	r0, r4
   1ccd4:	mov	r2, r5
   1ccd8:	bl	1cd08 <__assert_fail@plt+0xb05c>
   1ccdc:	ldr	r0, [r6, #36]	; 0x24
   1cce0:	ldr	r1, [r6, #48]	; 0x30
   1cce4:	cmp	r0, r1
   1cce8:	movne	r0, r4
   1ccec:	movne	r2, r5
   1ccf0:	blne	1cd08 <__assert_fail@plt+0xb05c>
   1ccf4:	ldrb	r0, [r4, #28]
   1ccf8:	orr	r0, r0, #8
   1ccfc:	strb	r0, [r4, #28]
   1cd00:	mov	r0, #0
   1cd04:	pop	{r4, r5, r6, sl, fp, pc}
   1cd08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd0c:	add	fp, sp, #28
   1cd10:	sub	sp, sp, #316	; 0x13c
   1cd14:	ldr	sl, [r0]
   1cd18:	str	r0, [sp, #20]
   1cd1c:	mov	r3, #0
   1cd20:	str	r2, [sp, #36]	; 0x24
   1cd24:	ldr	r0, [sl, #92]	; 0x5c
   1cd28:	cmp	r0, #1
   1cd2c:	bne	1cd3c <__assert_fail@plt+0xb090>
   1cd30:	ldr	r0, [sp, #20]
   1cd34:	ldrb	r0, [r0, #14]
   1cd38:	ubfx	r3, r0, #6, #1
   1cd3c:	ldr	r0, [r1, #8]
   1cd40:	cmp	r0, #1
   1cd44:	blt	1d114 <__assert_fail@plt+0xb468>
   1cd48:	add	r0, sp, #40	; 0x28
   1cd4c:	mov	r4, #1
   1cd50:	mov	r2, #0
   1cd54:	str	r3, [sp, #32]
   1cd58:	str	r1, [sp, #12]
   1cd5c:	str	sl, [sp, #24]
   1cd60:	add	r0, r0, #1
   1cd64:	str	r0, [sp, #8]
   1cd68:	movw	r0, #1
   1cd6c:	movt	r0, #32
   1cd70:	add	r0, r0, #254	; 0xfe
   1cd74:	str	r0, [sp, #4]
   1cd78:	b	1cd98 <__assert_fail@plt+0xb0ec>
   1cd7c:	ldr	r3, [sp, #32]
   1cd80:	ldr	r1, [sp, #12]
   1cd84:	ldr	r2, [sp, #16]
   1cd88:	ldr	r0, [r1, #8]
   1cd8c:	add	r2, r2, #1
   1cd90:	cmp	r2, r0
   1cd94:	bge	1d114 <__assert_fail@plt+0xb468>
   1cd98:	ldr	r0, [r1, #12]
   1cd9c:	str	r2, [sp, #16]
   1cda0:	ldr	r5, [r0, r2, lsl #2]
   1cda4:	ldr	r0, [sl]
   1cda8:	add	r1, r0, r5, lsl #3
   1cdac:	ldrb	r6, [r1, #4]
   1cdb0:	sub	r1, r6, #1
   1cdb4:	cmp	r1, #6
   1cdb8:	bhi	1cd80 <__assert_fail@plt+0xb0d4>
   1cdbc:	add	r2, pc, #0
   1cdc0:	ldr	pc, [r2, r1, lsl #2]
   1cdc4:	andeq	ip, r1, r0, ror #27
   1cdc8:	andeq	sp, r1, ip, ror #1
   1cdcc:	strdeq	ip, [r1], -r4
   1cdd0:	andeq	ip, r1, r0, lsl #27
   1cdd4:	andeq	sp, r1, ip, ror #1
   1cdd8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1cddc:	andeq	sp, r1, ip, ror #1
   1cde0:	ldrb	r6, [r0, r5, lsl #3]
   1cde4:	ldr	r0, [sp, #36]	; 0x24
   1cde8:	cmp	r3, #0
   1cdec:	strb	r4, [r0, r6]
   1cdf0:	beq	1ce0c <__assert_fail@plt+0xb160>
   1cdf4:	bl	11a54 <__ctype_tolower_loc@plt>
   1cdf8:	ldr	r0, [r0]
   1cdfc:	ldr	r3, [sp, #32]
   1ce00:	ldr	r1, [sp, #36]	; 0x24
   1ce04:	ldr	r0, [r0, r6, lsl #2]
   1ce08:	strb	r4, [r1, r0]
   1ce0c:	ldr	r0, [sp, #20]
   1ce10:	ldrb	r0, [r0, #14]
   1ce14:	tst	r0, #64	; 0x40
   1ce18:	beq	1cd80 <__assert_fail@plt+0xb0d4>
   1ce1c:	ldr	r0, [sl, #92]	; 0x5c
   1ce20:	cmp	r0, #2
   1ce24:	blt	1cd80 <__assert_fail@plt+0xb0d4>
   1ce28:	ldr	r0, [sl]
   1ce2c:	add	r1, r5, #1
   1ce30:	ldr	r7, [sp, #4]
   1ce34:	movw	r6, #1
   1ce38:	add	r8, sp, #40	; 0x28
   1ce3c:	mov	ip, #0
   1ce40:	sub	r9, fp, #48	; 0x30
   1ce44:	movt	r6, #32
   1ce48:	ldrb	r0, [r0, r5, lsl #3]
   1ce4c:	strb	r0, [sp, #40]	; 0x28
   1ce50:	ldr	r0, [sl, #8]
   1ce54:	cmp	r1, r0
   1ce58:	ldr	r0, [sp, #8]
   1ce5c:	bcs	1ce9c <__assert_fail@plt+0xb1f0>
   1ce60:	ldr	r0, [sp, #8]
   1ce64:	ldr	r1, [sl]
   1ce68:	add	r1, r1, r5, lsl #3
   1ce6c:	ldr	r2, [r1, #12]
   1ce70:	and	r2, r2, r7
   1ce74:	cmp	r2, r6
   1ce78:	bne	1ce9c <__assert_fail@plt+0xb1f0>
   1ce7c:	ldrb	r1, [r1, #8]
   1ce80:	add	r3, r5, #2
   1ce84:	strb	r1, [r0], #1
   1ce88:	add	r1, r5, #1
   1ce8c:	ldr	r2, [sl, #8]
   1ce90:	mov	r5, r1
   1ce94:	cmp	r3, r2
   1ce98:	bcc	1ce64 <__assert_fail@plt+0xb1b8>
   1ce9c:	sub	r5, r0, r8
   1cea0:	sub	r0, fp, #36	; 0x24
   1cea4:	mov	r1, r8
   1cea8:	mov	r3, r9
   1ceac:	str	ip, [fp, #-44]	; 0xffffffd4
   1ceb0:	str	ip, [fp, #-48]	; 0xffffffd0
   1ceb4:	mov	r2, r5
   1ceb8:	bl	1b5e8 <__assert_fail@plt+0x993c>
   1cebc:	cmp	r0, r5
   1cec0:	bne	1cd7c <__assert_fail@plt+0xb0d0>
   1cec4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1cec8:	bl	11910 <towlower@plt>
   1cecc:	mov	r1, r0
   1ced0:	mov	r0, r8
   1ced4:	mov	r2, r9
   1ced8:	bl	11844 <wcrtomb@plt>
   1cedc:	cmn	r0, #1
   1cee0:	beq	1cd7c <__assert_fail@plt+0xb0d0>
   1cee4:	ldrb	r0, [sp, #40]	; 0x28
   1cee8:	ldr	r1, [sp, #36]	; 0x24
   1ceec:	strb	r4, [r1, r0]
   1cef0:	b	1cd7c <__assert_fail@plt+0xb0d0>
   1cef4:	mov	r7, #0
   1cef8:	mov	r6, #0
   1cefc:	str	r5, [sp, #28]
   1cf00:	ldr	r0, [r0, r5, lsl #3]
   1cf04:	ldr	r1, [sp, #36]	; 0x24
   1cf08:	lsl	sl, r7, #2
   1cf0c:	mov	r8, #0
   1cf10:	add	r9, r1, r7
   1cf14:	ldr	r5, [r0, r6, lsl #2]
   1cf18:	b	1cf44 <__assert_fail@plt+0xb298>
   1cf1c:	bl	11a54 <__ctype_tolower_loc@plt>
   1cf20:	ldr	r0, [r0]
   1cf24:	ldr	r3, [sp, #32]
   1cf28:	add	r0, r0, sl
   1cf2c:	ldr	r0, [r0, r8, lsl #2]
   1cf30:	ldr	r1, [sp, #36]	; 0x24
   1cf34:	strb	r4, [r1, r0]
   1cf38:	add	r8, r8, #1
   1cf3c:	cmp	r8, #32
   1cf40:	beq	1cf70 <__assert_fail@plt+0xb2c4>
   1cf44:	tst	r5, r4, lsl r8
   1cf48:	strbne	r4, [r9, r8]
   1cf4c:	cmpne	r3, #0
   1cf50:	beq	1cf38 <__assert_fail@plt+0xb28c>
   1cf54:	add	r0, r7, r8
   1cf58:	add	r0, r0, #128	; 0x80
   1cf5c:	lsr	r0, r0, #7
   1cf60:	cmp	r0, #2
   1cf64:	bls	1cf1c <__assert_fail@plt+0xb270>
   1cf68:	add	r0, r7, r8
   1cf6c:	b	1cf30 <__assert_fail@plt+0xb284>
   1cf70:	ldr	sl, [sp, #24]
   1cf74:	ldr	r5, [sp, #28]
   1cf78:	add	r6, r6, #1
   1cf7c:	cmp	r6, #8
   1cf80:	beq	1cd80 <__assert_fail@plt+0xb0d4>
   1cf84:	ldr	r0, [sl]
   1cf88:	add	r7, r7, r8
   1cf8c:	b	1cf00 <__assert_fail@plt+0xb254>
   1cf90:	ldr	r6, [r0, r5, lsl #3]
   1cf94:	ldr	r0, [sl, #92]	; 0x5c
   1cf98:	cmp	r0, #2
   1cf9c:	blt	1d018 <__assert_fail@plt+0xb36c>
   1cfa0:	ldr	r0, [r6, #36]	; 0x24
   1cfa4:	cmp	r0, #0
   1cfa8:	bne	1cfc4 <__assert_fail@plt+0xb318>
   1cfac:	ldrb	r0, [r6, #16]
   1cfb0:	tst	r0, #1
   1cfb4:	bne	1cfc4 <__assert_fail@plt+0xb318>
   1cfb8:	ldr	r0, [r6, #32]
   1cfbc:	cmp	r0, #0
   1cfc0:	beq	1d018 <__assert_fail@plt+0xb36c>
   1cfc4:	mov	r7, #0
   1cfc8:	add	r8, sp, #40	; 0x28
   1cfcc:	sub	r6, fp, #48	; 0x30
   1cfd0:	strb	r7, [fp, #-48]	; 0xffffffd0
   1cfd4:	mov	r0, #0
   1cfd8:	mov	r1, r6
   1cfdc:	mov	r2, #1
   1cfe0:	mov	r3, r8
   1cfe4:	str	r7, [sp, #44]	; 0x2c
   1cfe8:	str	r7, [sp, #40]	; 0x28
   1cfec:	bl	1b5e8 <__assert_fail@plt+0x993c>
   1cff0:	cmn	r0, #2
   1cff4:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   1cff8:	ldreq	r0, [sp, #36]	; 0x24
   1cffc:	strbeq	r4, [r0, r1]
   1d000:	add	r0, r1, #1
   1d004:	uxtb	r1, r0
   1d008:	strb	r0, [fp, #-48]	; 0xffffffd0
   1d00c:	cmp	r1, r0
   1d010:	beq	1cfd4 <__assert_fail@plt+0xb328>
   1d014:	b	1cd7c <__assert_fail@plt+0xb0d0>
   1d018:	ldr	r0, [r6, #20]
   1d01c:	cmp	r0, #1
   1d020:	blt	1cd80 <__assert_fail@plt+0xb0d4>
   1d024:	mov	r9, #0
   1d028:	b	1d03c <__assert_fail@plt+0xb390>
   1d02c:	ldr	r0, [r6, #20]
   1d030:	add	r9, r9, #1
   1d034:	cmp	r9, r0
   1d038:	bge	1cd80 <__assert_fail@plt+0xb0d4>
   1d03c:	mov	r0, #0
   1d040:	add	r8, sp, #40	; 0x28
   1d044:	sub	r2, fp, #48	; 0x30
   1d048:	str	r0, [fp, #-44]	; 0xffffffd4
   1d04c:	str	r0, [fp, #-48]	; 0xffffffd0
   1d050:	ldr	r0, [r6]
   1d054:	ldr	r1, [r0, r9, lsl #2]
   1d058:	mov	r0, r8
   1d05c:	bl	11844 <wcrtomb@plt>
   1d060:	ldr	r3, [sp, #32]
   1d064:	cmn	r0, #1
   1d068:	beq	1d098 <__assert_fail@plt+0xb3ec>
   1d06c:	ldrb	r7, [sp, #40]	; 0x28
   1d070:	ldr	r0, [sp, #36]	; 0x24
   1d074:	cmp	r3, #0
   1d078:	strb	r4, [r0, r7]
   1d07c:	beq	1d098 <__assert_fail@plt+0xb3ec>
   1d080:	bl	11a54 <__ctype_tolower_loc@plt>
   1d084:	ldr	r0, [r0]
   1d088:	ldr	r3, [sp, #32]
   1d08c:	ldr	r1, [sp, #36]	; 0x24
   1d090:	ldr	r0, [r0, r7, lsl #2]
   1d094:	strb	r4, [r1, r0]
   1d098:	ldr	r0, [sp, #20]
   1d09c:	ldrb	r0, [r0, #14]
   1d0a0:	tst	r0, #64	; 0x40
   1d0a4:	beq	1d02c <__assert_fail@plt+0xb380>
   1d0a8:	ldr	r0, [sl, #92]	; 0x5c
   1d0ac:	cmp	r0, #2
   1d0b0:	blt	1d02c <__assert_fail@plt+0xb380>
   1d0b4:	ldr	r0, [r6]
   1d0b8:	ldr	r0, [r0, r9, lsl #2]
   1d0bc:	bl	11910 <towlower@plt>
   1d0c0:	mov	r1, r0
   1d0c4:	mov	r0, r8
   1d0c8:	sub	r2, fp, #48	; 0x30
   1d0cc:	bl	11844 <wcrtomb@plt>
   1d0d0:	ldr	r3, [sp, #32]
   1d0d4:	cmn	r0, #1
   1d0d8:	beq	1d02c <__assert_fail@plt+0xb380>
   1d0dc:	ldrb	r0, [sp, #40]	; 0x28
   1d0e0:	ldr	r1, [sp, #36]	; 0x24
   1d0e4:	strb	r4, [r1, r0]
   1d0e8:	b	1d02c <__assert_fail@plt+0xb380>
   1d0ec:	ldr	r0, [sp, #36]	; 0x24
   1d0f0:	mov	r1, #1
   1d0f4:	mov	r2, #256	; 0x100
   1d0f8:	bl	11b2c <memset@plt>
   1d0fc:	cmp	r6, #2
   1d100:	bne	1d114 <__assert_fail@plt+0xb468>
   1d104:	ldr	r1, [sp, #20]
   1d108:	ldrb	r0, [r1, #28]
   1d10c:	orr	r0, r0, #1
   1d110:	strb	r0, [r1, #28]
   1d114:	sub	sp, fp, #28
   1d118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d11c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d120:	add	fp, sp, #24
   1d124:	mov	r4, r0
   1d128:	mov	r0, #0
   1d12c:	mov	r6, r2
   1d130:	mov	r8, r1
   1d134:	str	r0, [r4]
   1d138:	str	r0, [r4, #4]
   1d13c:	str	r0, [r4, #8]
   1d140:	mov	r0, #256	; 0x100
   1d144:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1d148:	cmp	r0, #0
   1d14c:	str	r0, [r4, #16]
   1d150:	beq	1d200 <__assert_fail@plt+0xb554>
   1d154:	movw	r0, #45820	; 0xb2fc
   1d158:	tst	r6, #1
   1d15c:	and	r1, r6, #2
   1d160:	movt	r0, #3
   1d164:	movweq	r0, #710	; 0x2c6
   1d168:	movteq	r0, #257	; 0x101
   1d16c:	tst	r6, #4
   1d170:	orr	r5, r0, r1, lsl #21
   1d174:	bne	1d188 <__assert_fail@plt+0xb4dc>
   1d178:	ldrb	r0, [r4, #28]
   1d17c:	and	r0, r0, #127	; 0x7f
   1d180:	strb	r0, [r4, #28]
   1d184:	b	1d1a8 <__assert_fail@plt+0xb4fc>
   1d188:	ldrb	r0, [r4, #28]
   1d18c:	mvn	r1, #127	; 0x7f
   1d190:	orr	r0, r0, r1
   1d194:	movw	r1, #45758	; 0xb2be
   1d198:	movt	r1, #323	; 0x143
   1d19c:	strb	r0, [r4, #28]
   1d1a0:	and	r1, r5, r1
   1d1a4:	orr	r5, r1, #256	; 0x100
   1d1a8:	and	r1, r6, #8
   1d1ac:	and	r0, r0, #239	; 0xef
   1d1b0:	mov	r7, #0
   1d1b4:	orr	r0, r0, r1, lsl #1
   1d1b8:	str	r7, [r4, #20]
   1d1bc:	strb	r0, [r4, #28]
   1d1c0:	mov	r0, r8
   1d1c4:	bl	11ac0 <strlen@plt>
   1d1c8:	mov	r2, r0
   1d1cc:	mov	r0, r4
   1d1d0:	mov	r1, r8
   1d1d4:	mov	r3, r5
   1d1d8:	bl	1b760 <__assert_fail@plt+0x9ab4>
   1d1dc:	cmp	r0, #16
   1d1e0:	mov	r5, r0
   1d1e4:	movweq	r5, #8
   1d1e8:	cmp	r5, #0
   1d1ec:	bne	1d20c <__assert_fail@plt+0xb560>
   1d1f0:	mov	r0, r4
   1d1f4:	bl	1cc70 <__assert_fail@plt+0xafc4>
   1d1f8:	mov	r0, r7
   1d1fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d200:	mov	r7, #12
   1d204:	mov	r0, r7
   1d208:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d20c:	ldr	r0, [r4, #16]
   1d210:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1d214:	mov	r0, r5
   1d218:	str	r7, [r4, #16]
   1d21c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d220:	push	{r4, r5, r6, r7, fp, lr}
   1d224:	add	fp, sp, #16
   1d228:	cmp	r0, #17
   1d22c:	bcs	1d2a0 <__assert_fail@plt+0xb5f4>
   1d230:	movw	r1, #5480	; 0x1568
   1d234:	mov	r4, r2
   1d238:	mov	r2, #5
   1d23c:	mov	r5, r3
   1d240:	movt	r1, #3
   1d244:	ldr	r0, [r1, r0, lsl #2]
   1d248:	movw	r1, #5096	; 0x13e8
   1d24c:	movt	r1, #3
   1d250:	add	r1, r1, r0
   1d254:	mov	r0, #0
   1d258:	bl	11934 <dcgettext@plt>
   1d25c:	mov	r6, r0
   1d260:	bl	11ac0 <strlen@plt>
   1d264:	add	r7, r0, #1
   1d268:	cmp	r5, #0
   1d26c:	beq	1d288 <__assert_fail@plt+0xb5dc>
   1d270:	cmp	r7, r5
   1d274:	mov	r2, r7
   1d278:	bhi	1d290 <__assert_fail@plt+0xb5e4>
   1d27c:	mov	r0, r4
   1d280:	mov	r1, r6
   1d284:	bl	118ec <memcpy@plt>
   1d288:	mov	r0, r7
   1d28c:	pop	{r4, r5, r6, r7, fp, pc}
   1d290:	sub	r2, r5, #1
   1d294:	mov	r0, #0
   1d298:	strb	r0, [r4, r2]
   1d29c:	b	1d27c <__assert_fail@plt+0xb5d0>
   1d2a0:	bl	11c70 <abort@plt>
   1d2a4:	push	{r4, r5, fp, lr}
   1d2a8:	add	fp, sp, #8
   1d2ac:	ldr	r5, [r0]
   1d2b0:	mov	r4, r0
   1d2b4:	cmp	r5, #0
   1d2b8:	beq	1d2e4 <__assert_fail@plt+0xb638>
   1d2bc:	movw	r0, #0
   1d2c0:	movw	r1, #0
   1d2c4:	movt	r0, #0
   1d2c8:	movt	r1, #0
   1d2cc:	orrs	r0, r1, r0
   1d2d0:	beq	1d2dc <__assert_fail@plt+0xb630>
   1d2d4:	add	r0, r5, #136	; 0x88
   1d2d8:	bl	11874 <pthread_mutex_destroy@plt>
   1d2dc:	mov	r0, r5
   1d2e0:	bl	1d30c <__assert_fail@plt+0xb660>
   1d2e4:	mov	r5, #0
   1d2e8:	str	r5, [r4]
   1d2ec:	str	r5, [r4, #4]
   1d2f0:	ldr	r0, [r4, #16]
   1d2f4:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1d2f8:	str	r5, [r4, #16]
   1d2fc:	ldr	r0, [r4, #20]
   1d300:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1d304:	str	r5, [r4, #20]
   1d308:	pop	{r4, r5, fp, pc}
   1d30c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d310:	add	fp, sp, #24
   1d314:	mov	r8, r0
   1d318:	ldr	r0, [r0]
   1d31c:	cmp	r0, #0
   1d320:	beq	1d3a4 <__assert_fail@plt+0xb6f8>
   1d324:	ldr	r1, [r8, #8]
   1d328:	cmp	r1, #0
   1d32c:	beq	1d3a4 <__assert_fail@plt+0xb6f8>
   1d330:	movw	r7, #255	; 0xff
   1d334:	mov	r6, #0
   1d338:	movt	r7, #4
   1d33c:	add	r1, r0, r6, lsl #3
   1d340:	ldr	r1, [r1, #4]
   1d344:	and	r1, r1, r7
   1d348:	cmp	r1, #3
   1d34c:	beq	1d380 <__assert_fail@plt+0xb6d4>
   1d350:	cmp	r1, #6
   1d354:	bne	1d38c <__assert_fail@plt+0xb6e0>
   1d358:	ldr	r5, [r0, r6, lsl #3]
   1d35c:	ldr	r0, [r5]
   1d360:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1d364:	ldr	r0, [r5, #4]
   1d368:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1d36c:	ldr	r0, [r5, #8]
   1d370:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1d374:	ldr	r0, [r5, #12]
   1d378:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1d37c:	b	1d384 <__assert_fail@plt+0xb6d8>
   1d380:	ldr	r5, [r0, r6, lsl #3]
   1d384:	mov	r0, r5
   1d388:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1d38c:	ldr	r0, [r8, #8]
   1d390:	add	r6, r6, #1
   1d394:	cmp	r6, r0
   1d398:	bcs	1d3a4 <__assert_fail@plt+0xb6f8>
   1d39c:	ldr	r0, [r8]
   1d3a0:	b	1d33c <__assert_fail@plt+0xb690>
   1d3a4:	ldr	r0, [r8, #12]
   1d3a8:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1d3ac:	ldr	r0, [r8, #8]
   1d3b0:	cmp	r0, #0
   1d3b4:	beq	1d418 <__assert_fail@plt+0xb76c>
   1d3b8:	mov	r5, #0
   1d3bc:	mov	r6, #8
   1d3c0:	b	1d3d8 <__assert_fail@plt+0xb72c>
   1d3c4:	ldr	r0, [r8, #8]
   1d3c8:	add	r5, r5, #1
   1d3cc:	add	r6, r6, #12
   1d3d0:	cmp	r5, r0
   1d3d4:	bcs	1d418 <__assert_fail@plt+0xb76c>
   1d3d8:	ldr	r0, [r8, #24]
   1d3dc:	cmp	r0, #0
   1d3e0:	beq	1d3ec <__assert_fail@plt+0xb740>
   1d3e4:	ldr	r0, [r0, r6]
   1d3e8:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1d3ec:	ldr	r0, [r8, #28]
   1d3f0:	cmp	r0, #0
   1d3f4:	beq	1d400 <__assert_fail@plt+0xb754>
   1d3f8:	ldr	r0, [r0, r6]
   1d3fc:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1d400:	ldr	r0, [r8, #20]
   1d404:	cmp	r0, #0
   1d408:	beq	1d3c4 <__assert_fail@plt+0xb718>
   1d40c:	ldr	r0, [r0, r6]
   1d410:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1d414:	b	1d3c4 <__assert_fail@plt+0xb718>
   1d418:	ldr	r0, [r8, #20]
   1d41c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1d420:	ldr	r0, [r8, #24]
   1d424:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1d428:	ldr	r0, [r8, #28]
   1d42c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1d430:	ldr	r0, [r8]
   1d434:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1d438:	ldr	r5, [r8, #32]
   1d43c:	cmp	r5, #0
   1d440:	beq	1d4a0 <__assert_fail@plt+0xb7f4>
   1d444:	mov	r6, #0
   1d448:	add	r0, r6, r6, lsl #1
   1d44c:	ldr	r0, [r5, r0, lsl #2]!
   1d450:	add	r7, r5, #8
   1d454:	cmp	r0, #1
   1d458:	blt	1d47c <__assert_fail@plt+0xb7d0>
   1d45c:	mov	r4, #0
   1d460:	ldr	r0, [r7]
   1d464:	ldr	r0, [r0, r4, lsl #2]
   1d468:	bl	20a88 <__assert_fail@plt+0xeddc>
   1d46c:	ldr	r0, [r5]
   1d470:	add	r4, r4, #1
   1d474:	cmp	r4, r0
   1d478:	blt	1d460 <__assert_fail@plt+0xb7b4>
   1d47c:	ldr	r0, [r7]
   1d480:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1d484:	ldr	r0, [r8, #68]	; 0x44
   1d488:	cmp	r6, r0
   1d48c:	bcs	1d49c <__assert_fail@plt+0xb7f0>
   1d490:	ldr	r5, [r8, #32]
   1d494:	add	r6, r6, #1
   1d498:	b	1d448 <__assert_fail@plt+0xb79c>
   1d49c:	ldr	r5, [r8, #32]
   1d4a0:	mov	r0, r5
   1d4a4:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1d4a8:	ldr	r0, [r8, #60]	; 0x3c
   1d4ac:	movw	r1, #5548	; 0x15ac
   1d4b0:	movt	r1, #3
   1d4b4:	cmp	r0, r1
   1d4b8:	beq	1d4c0 <__assert_fail@plt+0xb814>
   1d4bc:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1d4c0:	ldr	r0, [r8, #132]	; 0x84
   1d4c4:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1d4c8:	mov	r0, r8
   1d4cc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d4d0:	b	1b4e8 <__assert_fail@plt+0x983c>
   1d4d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4d8:	add	fp, sp, #28
   1d4dc:	sub	sp, sp, #28
   1d4e0:	ldr	sl, [fp, #8]
   1d4e4:	mov	r7, #2
   1d4e8:	cmp	sl, #7
   1d4ec:	bhi	1d5c0 <__assert_fail@plt+0xb914>
   1d4f0:	mov	r5, r0
   1d4f4:	ldr	r0, [r0]
   1d4f8:	mov	r6, r3
   1d4fc:	mov	r9, r2
   1d500:	mov	r4, r1
   1d504:	tst	sl, #4
   1d508:	str	r0, [sp, #24]
   1d50c:	bne	1d524 <__assert_fail@plt+0xb878>
   1d510:	mov	r0, r4
   1d514:	bl	11ac0 <strlen@plt>
   1d518:	mov	r7, r0
   1d51c:	mov	r8, #0
   1d520:	b	1d52c <__assert_fail@plt+0xb880>
   1d524:	ldr	r8, [r6]
   1d528:	ldr	r7, [r6, #4]
   1d52c:	movw	r0, #0
   1d530:	movw	r1, #0
   1d534:	movt	r0, #0
   1d538:	movt	r1, #0
   1d53c:	orrs	r0, r1, r0
   1d540:	str	r0, [sp, #20]
   1d544:	beq	1d554 <__assert_fail@plt+0xb8a8>
   1d548:	ldr	r0, [sp, #24]
   1d54c:	add	r0, r0, #136	; 0x88
   1d550:	bl	118bc <pthread_mutex_lock@plt>
   1d554:	ldrb	r0, [r5, #28]
   1d558:	tst	r0, #16
   1d55c:	bne	1d570 <__assert_fail@plt+0xb8c4>
   1d560:	str	r7, [sp]
   1d564:	stmib	sp, {r7, r9}
   1d568:	str	r6, [sp, #12]
   1d56c:	b	1d584 <__assert_fail@plt+0xb8d8>
   1d570:	mov	r0, #0
   1d574:	str	r7, [sp]
   1d578:	str	r7, [sp, #4]
   1d57c:	str	r0, [sp, #8]
   1d580:	str	r0, [sp, #12]
   1d584:	mov	r0, r5
   1d588:	mov	r1, r4
   1d58c:	mov	r2, r7
   1d590:	mov	r3, r8
   1d594:	str	sl, [sp, #16]
   1d598:	bl	1d5cc <__assert_fail@plt+0xb920>
   1d59c:	mov	r7, r0
   1d5a0:	ldr	r0, [sp, #20]
   1d5a4:	cmp	r0, #0
   1d5a8:	beq	1d5b8 <__assert_fail@plt+0xb90c>
   1d5ac:	ldr	r0, [sp, #24]
   1d5b0:	add	r0, r0, #136	; 0x88
   1d5b4:	bl	11808 <pthread_mutex_unlock@plt>
   1d5b8:	cmp	r7, #0
   1d5bc:	movwne	r7, #1
   1d5c0:	mov	r0, r7
   1d5c4:	sub	sp, fp, #28
   1d5c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d5cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d5d0:	add	fp, sp, #28
   1d5d4:	sub	sp, sp, #412	; 0x19c
   1d5d8:	ldr	r8, [r0]
   1d5dc:	str	r2, [sp, #68]	; 0x44
   1d5e0:	str	r1, [sp, #100]	; 0x64
   1d5e4:	mov	r4, r0
   1d5e8:	add	r0, sp, #104	; 0x68
   1d5ec:	mov	r1, #0
   1d5f0:	mov	r2, #136	; 0x88
   1d5f4:	mov	r6, r3
   1d5f8:	mov	r9, #0
   1d5fc:	bl	11b2c <memset@plt>
   1d600:	str	r8, [sp, #188]	; 0xbc
   1d604:	ldr	lr, [fp, #16]
   1d608:	ldr	ip, [fp, #8]
   1d60c:	mov	r5, #0
   1d610:	ldr	r1, [r4, #16]
   1d614:	cmp	r1, #0
   1d618:	beq	1d634 <__assert_fail@plt+0xb988>
   1d61c:	ldrb	r2, [r4, #28]
   1d620:	and	r2, r2, #9
   1d624:	cmp	r2, #8
   1d628:	movne	r1, #0
   1d62c:	subs	r5, r6, ip
   1d630:	movne	r5, r1
   1d634:	ldr	r2, [r4, #24]
   1d638:	ldr	r1, [r4, #8]
   1d63c:	mov	sl, #1
   1d640:	mvn	r3, r2
   1d644:	cmp	r2, lr
   1d648:	addcc	r9, r3, lr
   1d64c:	cmp	r1, #0
   1d650:	beq	20118 <__assert_fail@plt+0xe46c>
   1d654:	ldr	r1, [r8, #36]	; 0x24
   1d658:	cmp	r1, #0
   1d65c:	ldrne	r0, [r8, #40]	; 0x28
   1d660:	cmpne	r0, #0
   1d664:	beq	20118 <__assert_fail@plt+0xe46c>
   1d668:	ldr	r3, [r8, #44]	; 0x2c
   1d66c:	cmp	r3, #0
   1d670:	ldrne	r7, [r8, #48]	; 0x30
   1d674:	cmpne	r7, #0
   1d678:	beq	20118 <__assert_fail@plt+0xe46c>
   1d67c:	ldr	r1, [r1, #8]
   1d680:	ldr	r2, [r4, #20]
   1d684:	cmp	r1, #0
   1d688:	beq	1d694 <__assert_fail@plt+0xb9e8>
   1d68c:	ldr	r7, [sp, #100]	; 0x64
   1d690:	b	1d6a4 <__assert_fail@plt+0xb9f8>
   1d694:	ldr	r1, [r0, #8]
   1d698:	ldr	r7, [sp, #100]	; 0x64
   1d69c:	cmp	r1, #0
   1d6a0:	beq	1f224 <__assert_fail@plt+0xd578>
   1d6a4:	str	ip, [sp, #72]	; 0x48
   1d6a8:	subs	r0, lr, r9
   1d6ac:	str	r9, [sp, #32]
   1d6b0:	str	r0, [sp, #84]	; 0x54
   1d6b4:	mov	r0, #1
   1d6b8:	str	r0, [sp, #44]	; 0x2c
   1d6bc:	bne	1d6d0 <__assert_fail@plt+0xba24>
   1d6c0:	ldr	r0, [r8, #76]	; 0x4c
   1d6c4:	cmp	r0, #0
   1d6c8:	movwne	r0, #1
   1d6cc:	str	r0, [sp, #44]	; 0x2c
   1d6d0:	ldr	r0, [r4, #12]
   1d6d4:	ldr	sl, [r8, #92]	; 0x5c
   1d6d8:	ldr	ip, [r8, #8]
   1d6dc:	str	r2, [sp, #168]	; 0xa8
   1d6e0:	str	r7, [sp, #104]	; 0x68
   1d6e4:	mov	lr, r4
   1d6e8:	str	sl, [sp, #184]	; 0xb8
   1d6ec:	ubfx	r3, r0, #22, #1
   1d6f0:	ldr	r4, [sp, #68]	; 0x44
   1d6f4:	and	r0, r0, #4194304	; 0x400000
   1d6f8:	add	r1, ip, #1
   1d6fc:	orrs	r9, r2, r0
   1d700:	strb	r3, [sp, #176]	; 0xb0
   1d704:	add	r3, sp, #104	; 0x68
   1d708:	movwne	r9, #1
   1d70c:	add	r3, r3, #44	; 0x2c
   1d710:	cmp	sl, r1
   1d714:	strb	r9, [sp, #179]	; 0xb3
   1d718:	movgt	r1, sl
   1d71c:	vdup.32	q8, r4
   1d720:	ldrb	r0, [r8, #88]	; 0x58
   1d724:	vst1.32	{d16-d17}, [r3]
   1d728:	ubfx	r3, r0, #3, #1
   1d72c:	strb	r3, [sp, #178]	; 0xb2
   1d730:	ubfx	r0, r0, #2, #1
   1d734:	str	r8, [sp, #96]	; 0x60
   1d738:	str	lr, [sp, #52]	; 0x34
   1d73c:	str	r5, [sp, #92]	; 0x5c
   1d740:	str	r2, [sp, #88]	; 0x58
   1d744:	strb	r0, [sp, #177]	; 0xb1
   1d748:	add	r0, r4, #1
   1d74c:	cmp	r0, r1
   1d750:	movlt	r1, r0
   1d754:	cmp	sl, #2
   1d758:	mov	r0, lr
   1d75c:	str	r1, [sp, #80]	; 0x50
   1d760:	blt	1d7a0 <__assert_fail@plt+0xbaf4>
   1d764:	mov	sl, #12
   1d768:	cmn	r1, #-1073741823	; 0xc0000001
   1d76c:	bhi	200c4 <__assert_fail@plt+0xe418>
   1d770:	lsl	r1, r1, #2
   1d774:	mov	r0, #0
   1d778:	bl	1b64c <__assert_fail@plt+0x99a0>
   1d77c:	ldr	r1, [sp, #80]	; 0x50
   1d780:	ldr	r2, [sp, #88]	; 0x58
   1d784:	ldr	r5, [sp, #92]	; 0x5c
   1d788:	ldr	r7, [sp, #100]	; 0x64
   1d78c:	cmp	r0, #0
   1d790:	beq	200c4 <__assert_fail@plt+0xe418>
   1d794:	str	r0, [sp, #112]	; 0x70
   1d798:	ldr	r8, [sp, #96]	; 0x60
   1d79c:	ldr	r0, [sp, #52]	; 0x34
   1d7a0:	cmp	r9, #0
   1d7a4:	mov	r4, #1
   1d7a8:	mov	r9, r0
   1d7ac:	beq	1d7d8 <__assert_fail@plt+0xbb2c>
   1d7b0:	mov	r0, #0
   1d7b4:	mov	r4, #0
   1d7b8:	bl	1b64c <__assert_fail@plt+0x99a0>
   1d7bc:	cmp	r0, #0
   1d7c0:	beq	1ffac <__assert_fail@plt+0xe300>
   1d7c4:	ldr	r7, [sp, #100]	; 0x64
   1d7c8:	ldr	r5, [sp, #92]	; 0x5c
   1d7cc:	ldr	r2, [sp, #88]	; 0x58
   1d7d0:	ldr	r1, [sp, #80]	; 0x50
   1d7d4:	str	r0, [sp, #108]	; 0x6c
   1d7d8:	add	r3, r8, #96	; 0x60
   1d7dc:	str	r1, [sp, #140]	; 0x8c
   1d7e0:	ldr	r0, [fp, #12]
   1d7e4:	cmp	r4, #0
   1d7e8:	str	r3, [sp, #172]	; 0xac
   1d7ec:	ldrb	r3, [r8, #88]	; 0x58
   1d7f0:	ubfx	r3, r3, #4, #1
   1d7f4:	strb	r3, [sp, #182]	; 0xb6
   1d7f8:	mov	r3, #0
   1d7fc:	beq	1d814 <__assert_fail@plt+0xbb68>
   1d800:	str	r7, [sp, #108]	; 0x6c
   1d804:	ldr	r3, [r8, #92]	; 0x5c
   1d808:	cmp	r3, #1
   1d80c:	ldr	r3, [sp, #68]	; 0x44
   1d810:	movwgt	r3, #0
   1d814:	str	r0, [sp, #160]	; 0xa0
   1d818:	str	r3, [sp, #136]	; 0x88
   1d81c:	str	r3, [sp, #132]	; 0x84
   1d820:	str	r0, [sp, #156]	; 0x9c
   1d824:	ldrb	r0, [r9, #28]
   1d828:	lsr	r0, r0, #7
   1d82c:	strb	r0, [sp, #181]	; 0xb5
   1d830:	mvn	r0, #0
   1d834:	ldr	r8, [r8, #76]	; 0x4c
   1d838:	str	r0, [sp, #196]	; 0xc4
   1d83c:	ldr	r0, [fp, #24]
   1d840:	lsl	r9, r8, #1
   1d844:	cmp	r8, #1
   1d848:	str	r0, [sp, #192]	; 0xc0
   1d84c:	blt	1d8a4 <__assert_fail@plt+0xbbf8>
   1d850:	movw	r0, #43690	; 0xaaaa
   1d854:	mov	sl, #12
   1d858:	movt	r0, #2730	; 0xaaa
   1d85c:	cmp	r9, r0
   1d860:	bhi	200c4 <__assert_fail@plt+0xe418>
   1d864:	add	r0, r8, r8, lsl #1
   1d868:	lsl	r0, r0, #4
   1d86c:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1d870:	mov	r5, r0
   1d874:	str	r0, [sp, #220]	; 0xdc
   1d878:	lsl	r0, r8, #3
   1d87c:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1d880:	cmp	r0, #0
   1d884:	str	r0, [sp, #236]	; 0xec
   1d888:	beq	200c4 <__assert_fail@plt+0xe418>
   1d88c:	cmp	r5, #0
   1d890:	ldr	r7, [sp, #100]	; 0x64
   1d894:	ldr	r5, [sp, #92]	; 0x5c
   1d898:	ldr	r2, [sp, #88]	; 0x58
   1d89c:	ldr	r1, [sp, #80]	; 0x50
   1d8a0:	beq	200c4 <__assert_fail@plt+0xe418>
   1d8a4:	mov	r0, #1
   1d8a8:	str	r9, [sp, #232]	; 0xe8
   1d8ac:	str	r0, [sp, #224]	; 0xe0
   1d8b0:	ldr	r0, [sp, #84]	; 0x54
   1d8b4:	str	r9, [sp, #216]	; 0xd8
   1d8b8:	cmp	r0, #1
   1d8bc:	bhi	1d8d0 <__assert_fail@plt+0xbc24>
   1d8c0:	ldr	r0, [sp, #96]	; 0x60
   1d8c4:	ldrb	r0, [r0, #88]	; 0x58
   1d8c8:	tst	r0, #2
   1d8cc:	beq	1d900 <__assert_fail@plt+0xbc54>
   1d8d0:	mov	sl, #12
   1d8d4:	cmn	r1, #-1073741822	; 0xc0000002
   1d8d8:	bhi	200c4 <__assert_fail@plt+0xe418>
   1d8dc:	mov	r0, #4
   1d8e0:	add	r0, r0, r1, lsl #2
   1d8e4:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1d8e8:	ldr	r2, [sp, #88]	; 0x58
   1d8ec:	ldr	r5, [sp, #92]	; 0x5c
   1d8f0:	ldr	r7, [sp, #100]	; 0x64
   1d8f4:	cmp	r0, #0
   1d8f8:	str	r0, [sp, #204]	; 0xcc
   1d8fc:	beq	200c4 <__assert_fail@plt+0xe418>
   1d900:	ldr	r1, [fp, #24]
   1d904:	ldr	r3, [sp, #72]	; 0x48
   1d908:	str	r6, [fp, #-200]	; 0xffffff38
   1d90c:	mov	r0, #4
   1d910:	mov	r8, #1
   1d914:	mov	r9, r6
   1d918:	tst	r1, #1
   1d91c:	mov	r1, #4
   1d920:	mov	r4, r3
   1d924:	movweq	r1, #6
   1d928:	cmp	r3, r6
   1d92c:	str	r1, [sp, #164]	; 0xa4
   1d930:	ldr	r1, [sp, #96]	; 0x60
   1d934:	mvnlt	r8, #0
   1d938:	movlt	r4, r6
   1d93c:	movlt	r9, r3
   1d940:	cmp	r5, #0
   1d944:	ldr	r1, [r1, #92]	; 0x5c
   1d948:	str	r1, [sp, #56]	; 0x38
   1d94c:	beq	1d990 <__assert_fail@plt+0xbce4>
   1d950:	cmp	r1, #1
   1d954:	beq	1d974 <__assert_fail@plt+0xbcc8>
   1d958:	ldr	r0, [sp, #52]	; 0x34
   1d95c:	ldr	r0, [r0, #12]
   1d960:	and	r0, r0, #4194304	; 0x400000
   1d964:	orr	r0, r2, r0
   1d968:	clz	r0, r0
   1d96c:	lsr	r0, r0, #5
   1d970:	lsl	r0, r0, #2
   1d974:	cmp	r2, #0
   1d978:	mov	r1, r2
   1d97c:	movwne	r1, #1
   1d980:	cmp	r3, r6
   1d984:	orrge	r1, r1, #2
   1d988:	orr	r0, r1, r0
   1d98c:	b	1d994 <__assert_fail@plt+0xbce8>
   1d990:	mov	r0, #8
   1d994:	add	r1, sp, #104	; 0x68
   1d998:	cmp	r3, r6
   1d99c:	sub	r0, r0, #4
   1d9a0:	str	r8, [sp, #60]	; 0x3c
   1d9a4:	str	r4, [sp, #80]	; 0x50
   1d9a8:	str	r9, [sp, #76]	; 0x4c
   1d9ac:	add	r1, r1, #32
   1d9b0:	str	r0, [sp, #72]	; 0x48
   1d9b4:	str	r1, [sp, #28]
   1d9b8:	sub	r1, fp, #200	; 0xc8
   1d9bc:	movwlt	r1, #0
   1d9c0:	cmp	r1, #0
   1d9c4:	str	r1, [sp, #40]	; 0x28
   1d9c8:	movwne	r1, #1
   1d9cc:	str	r1, [sp, #48]	; 0x30
   1d9d0:	sub	r1, fp, #192	; 0xc0
   1d9d4:	add	r1, r1, #16
   1d9d8:	str	r1, [sp, #36]	; 0x24
   1d9dc:	ldr	r1, [sp, #72]	; 0x48
   1d9e0:	cmp	r1, #4
   1d9e4:	bhi	1dac8 <__assert_fail@plt+0xbe1c>
   1d9e8:	add	r0, pc, #0
   1d9ec:	ldr	pc, [r0, r1, lsl #2]
   1d9f0:	andeq	sp, r1, r4, lsl #20
   1d9f4:	andeq	sp, r1, r4, lsl #20
   1d9f8:	andeq	sp, r1, ip, ror sl
   1d9fc:	andeq	sp, r1, r4, asr sl
   1da00:	andeq	sp, r1, ip, asr #22
   1da04:	mov	sl, #1
   1da08:	cmp	r6, r9
   1da0c:	blt	200c4 <__assert_fail@plt+0xe418>
   1da10:	ldr	r1, [sp, #68]	; 0x44
   1da14:	cmp	r6, r1
   1da18:	mov	r0, #0
   1da1c:	ldrblt	r0, [r7, r6]
   1da20:	cmp	r2, #0
   1da24:	ldrbne	r0, [r2, r0]
   1da28:	ldrb	r0, [r5, r0]
   1da2c:	cmp	r0, #0
   1da30:	bne	1db4c <__assert_fail@plt+0xbea0>
   1da34:	sub	r0, r6, #1
   1da38:	cmp	r6, r9
   1da3c:	mov	r6, r0
   1da40:	str	r0, [fp, #-200]	; 0xffffff38
   1da44:	bgt	1da14 <__assert_fail@plt+0xbd68>
   1da48:	b	200c4 <__assert_fail@plt+0xe418>
   1da4c:	add	r6, r6, #1
   1da50:	str	r6, [fp, #-200]	; 0xffffff38
   1da54:	cmp	r6, r4
   1da58:	bge	1da94 <__assert_fail@plt+0xbde8>
   1da5c:	ldrb	r0, [r7, r6]
   1da60:	ldrb	r0, [r2, r0]
   1da64:	ldrb	r0, [r5, r0]
   1da68:	cmp	r0, #0
   1da6c:	beq	1da4c <__assert_fail@plt+0xbda0>
   1da70:	b	1da94 <__assert_fail@plt+0xbde8>
   1da74:	add	r6, r6, #1
   1da78:	str	r6, [fp, #-200]	; 0xffffff38
   1da7c:	cmp	r6, r4
   1da80:	bge	1da94 <__assert_fail@plt+0xbde8>
   1da84:	ldrb	r0, [r7, r6]
   1da88:	ldrb	r0, [r5, r0]
   1da8c:	cmp	r0, #0
   1da90:	beq	1da74 <__assert_fail@plt+0xbdc8>
   1da94:	cmp	r6, r4
   1da98:	bne	1db4c <__assert_fail@plt+0xbea0>
   1da9c:	ldr	r1, [sp, #68]	; 0x44
   1daa0:	mov	r0, #0
   1daa4:	mov	r6, r4
   1daa8:	cmp	r4, r1
   1daac:	ldrblt	r0, [r7, r4]
   1dab0:	cmp	r2, #0
   1dab4:	ldrbne	r0, [r2, r0]
   1dab8:	ldrb	r0, [r5, r0]
   1dabc:	cmp	r0, #0
   1dac0:	bne	1db4c <__assert_fail@plt+0xbea0>
   1dac4:	b	20280 <__assert_fail@plt+0xe5d4>
   1dac8:	ldr	r0, [sp, #128]	; 0x80
   1dacc:	ldr	r2, [sp, #136]	; 0x88
   1dad0:	sub	r1, r6, r0
   1dad4:	cmp	r1, r2
   1dad8:	bcs	1db20 <__assert_fail@plt+0xbe74>
   1dadc:	ldr	r3, [sp, #132]	; 0x84
   1dae0:	mov	r2, #0
   1dae4:	cmp	r1, r3
   1dae8:	bcs	1daf4 <__assert_fail@plt+0xbe48>
   1daec:	ldr	r2, [sp, #108]	; 0x6c
   1daf0:	ldrb	r2, [r2, r1]
   1daf4:	ldrb	r1, [r5, r2]
   1daf8:	cmp	r1, #0
   1dafc:	bne	1db4c <__assert_fail@plt+0xbea0>
   1db00:	add	r6, r6, r8
   1db04:	mov	sl, #1
   1db08:	cmp	r6, r9
   1db0c:	str	r6, [fp, #-200]	; 0xffffff38
   1db10:	blt	200c4 <__assert_fail@plt+0xe418>
   1db14:	cmp	r6, r4
   1db18:	ble	1dacc <__assert_fail@plt+0xbe20>
   1db1c:	b	200c4 <__assert_fail@plt+0xe418>
   1db20:	ldr	r2, [fp, #24]
   1db24:	add	r0, sp, #104	; 0x68
   1db28:	mov	r1, r6
   1db2c:	bl	2703c <__assert_fail@plt+0x15390>
   1db30:	cmp	r0, #0
   1db34:	bne	2012c <__assert_fail@plt+0xe480>
   1db38:	ldr	r0, [sp, #128]	; 0x80
   1db3c:	ldr	r6, [fp, #-200]	; 0xffffff38
   1db40:	ldr	r5, [sp, #92]	; 0x5c
   1db44:	sub	r1, r6, r0
   1db48:	b	1dadc <__assert_fail@plt+0xbe30>
   1db4c:	ldr	r2, [fp, #24]
   1db50:	add	r0, sp, #104	; 0x68
   1db54:	mov	r1, r6
   1db58:	bl	2703c <__assert_fail@plt+0x15390>
   1db5c:	cmp	r0, #0
   1db60:	bne	2012c <__assert_fail@plt+0xe480>
   1db64:	ldr	r0, [sp, #56]	; 0x38
   1db68:	cmp	r0, #1
   1db6c:	ldrne	r0, [sp, #132]	; 0x84
   1db70:	cmpne	r0, #0
   1db74:	bne	1dbb4 <__assert_fail@plt+0xbf08>
   1db78:	mov	r0, #0
   1db7c:	str	r0, [sp, #212]	; 0xd4
   1db80:	str	r0, [sp, #224]	; 0xe0
   1db84:	str	r0, [sp, #208]	; 0xd0
   1db88:	str	r0, [fp, #-196]	; 0xffffff3c
   1db8c:	ldr	r4, [sp, #188]	; 0xbc
   1db90:	ldr	r5, [sp, #144]	; 0x90
   1db94:	ldr	r9, [r4, #36]	; 0x24
   1db98:	ldrsb	r0, [r9, #52]	; 0x34
   1db9c:	cmn	r0, #1
   1dba0:	ble	1dbc8 <__assert_fail@plt+0xbf1c>
   1dba4:	ldr	r1, [sp, #48]	; 0x30
   1dba8:	cmp	r9, #0
   1dbac:	bne	1dcf8 <__assert_fail@plt+0xc04c>
   1dbb0:	b	1ffac <__assert_fail@plt+0xe300>
   1dbb4:	ldr	r0, [sp, #112]	; 0x70
   1dbb8:	ldr	r0, [r0]
   1dbbc:	cmn	r0, #1
   1dbc0:	bne	1db78 <__assert_fail@plt+0xbecc>
   1dbc4:	b	1efa0 <__assert_fail@plt+0xd2f4>
   1dbc8:	cmp	r5, #0
   1dbcc:	ble	1dc08 <__assert_fail@plt+0xbf5c>
   1dbd0:	ldr	r1, [sp, #152]	; 0x98
   1dbd4:	sub	r0, r5, #1
   1dbd8:	cmp	r1, r0
   1dbdc:	beq	1dcd4 <__assert_fail@plt+0xc028>
   1dbe0:	ldr	r1, [sp, #184]	; 0xb8
   1dbe4:	cmp	r1, #2
   1dbe8:	blt	1dc1c <__assert_fail@plt+0xbf70>
   1dbec:	ldr	r1, [sp, #112]	; 0x70
   1dbf0:	ldr	r6, [r1, r0, lsl #2]
   1dbf4:	cmn	r6, #1
   1dbf8:	bne	1dc50 <__assert_fail@plt+0xbfa4>
   1dbfc:	sub	r0, r0, #1
   1dc00:	cmn	r0, #1
   1dc04:	bne	1dbf0 <__assert_fail@plt+0xbf44>
   1dc08:	ldr	r3, [sp, #164]	; 0xa4
   1dc0c:	ldr	r1, [sp, #48]	; 0x30
   1dc10:	tst	r3, #1
   1dc14:	beq	1dc80 <__assert_fail@plt+0xbfd4>
   1dc18:	b	1dcec <__assert_fail@plt+0xc040>
   1dc1c:	ldr	r1, [sp, #108]	; 0x6c
   1dc20:	ldr	r2, [sp, #172]	; 0xac
   1dc24:	mov	r3, #1
   1dc28:	ldrb	r0, [r1, r0]
   1dc2c:	ubfx	r1, r0, #5, #3
   1dc30:	ldr	r1, [r2, r1, lsl #2]
   1dc34:	and	r2, r0, #31
   1dc38:	tst	r1, r3, lsl r2
   1dc3c:	ldr	r1, [sp, #48]	; 0x30
   1dc40:	bne	1dcec <__assert_fail@plt+0xc040>
   1dc44:	cmp	r0, #10
   1dc48:	beq	1dc68 <__assert_fail@plt+0xbfbc>
   1dc4c:	b	1dcf0 <__assert_fail@plt+0xc044>
   1dc50:	ldrb	r0, [sp, #182]	; 0xb6
   1dc54:	ldr	r1, [sp, #48]	; 0x30
   1dc58:	cmp	r0, #0
   1dc5c:	bne	1ebe8 <__assert_fail@plt+0xcf3c>
   1dc60:	cmp	r6, #10
   1dc64:	bne	1dcf0 <__assert_fail@plt+0xc044>
   1dc68:	ldrb	r0, [sp, #181]	; 0xb5
   1dc6c:	cmp	r0, #0
   1dc70:	movwne	r0, #1
   1dc74:	lsl	r3, r0, #1
   1dc78:	tst	r3, #1
   1dc7c:	bne	1dcec <__assert_fail@plt+0xc040>
   1dc80:	cmp	r3, #0
   1dc84:	beq	1dcf0 <__assert_fail@plt+0xc044>
   1dc88:	ands	r1, r3, #2
   1dc8c:	and	r0, r3, #4
   1dc90:	cmpne	r0, #0
   1dc94:	bne	1dcc4 <__assert_fail@plt+0xc018>
   1dc98:	cmp	r1, #0
   1dc9c:	bne	1dccc <__assert_fail@plt+0xc020>
   1dca0:	ldr	r9, [r4, #36]	; 0x24
   1dca4:	cmp	r0, #0
   1dca8:	beq	1dba4 <__assert_fail@plt+0xbef8>
   1dcac:	ldr	r2, [r9, #40]	; 0x28
   1dcb0:	sub	r0, fp, #196	; 0xc4
   1dcb4:	mov	r1, r4
   1dcb8:	bl	26a48 <__assert_fail@plt+0x14d9c>
   1dcbc:	mov	r9, r0
   1dcc0:	b	1dba4 <__assert_fail@plt+0xbef8>
   1dcc4:	ldr	r9, [r4, #48]	; 0x30
   1dcc8:	b	1dba4 <__assert_fail@plt+0xbef8>
   1dccc:	ldr	r9, [r4, #44]	; 0x2c
   1dcd0:	b	1dba4 <__assert_fail@plt+0xbef8>
   1dcd4:	ldr	r0, [sp, #192]	; 0xc0
   1dcd8:	ldr	r1, [sp, #48]	; 0x30
   1dcdc:	and	r0, r0, #2
   1dce0:	eor	r3, r0, #10
   1dce4:	tst	r3, #1
   1dce8:	beq	1dc80 <__assert_fail@plt+0xbfd4>
   1dcec:	ldr	r9, [r4, #40]	; 0x28
   1dcf0:	cmp	r9, #0
   1dcf4:	beq	1ffac <__assert_fail@plt+0xe300>
   1dcf8:	ldr	r0, [sp, #204]	; 0xcc
   1dcfc:	mov	r6, r1
   1dd00:	cmp	r0, #0
   1dd04:	beq	1dd1c <__assert_fail@plt+0xc070>
   1dd08:	str	r9, [r0, r5, lsl #2]
   1dd0c:	mov	r6, r1
   1dd10:	ldr	r0, [r4, #76]	; 0x4c
   1dd14:	cmp	r0, #0
   1dd18:	bne	1ea14 <__assert_fail@plt+0xcd68>
   1dd1c:	ldrb	r0, [r9, #52]	; 0x34
   1dd20:	mvn	sl, #0
   1dd24:	tst	r0, #16
   1dd28:	bne	1e9e8 <__assert_fail@plt+0xcd3c>
   1dd2c:	mov	r0, #0
   1dd30:	str	r0, [sp, #64]	; 0x40
   1dd34:	ldr	r0, [sp, #144]	; 0x90
   1dd38:	ldr	r1, [sp, #160]	; 0xa0
   1dd3c:	cmp	r1, r0
   1dd40:	ble	1dd4c <__assert_fail@plt+0xc0a0>
   1dd44:	ldr	r8, [sp, #40]	; 0x28
   1dd48:	b	1dd6c <__assert_fail@plt+0xc0c0>
   1dd4c:	ldr	r8, [sp, #40]	; 0x28
   1dd50:	b	1e60c <__assert_fail@plt+0xc960>
   1dd54:	ldr	r6, [sp, #24]
   1dd58:	mov	r5, lr
   1dd5c:	ldr	r0, [sp, #144]	; 0x90
   1dd60:	ldr	r1, [sp, #160]	; 0xa0
   1dd64:	cmp	r1, r0
   1dd68:	ble	1e60c <__assert_fail@plt+0xc960>
   1dd6c:	ldr	r2, [sp, #140]	; 0x8c
   1dd70:	ldr	r1, [sp, #152]	; 0x98
   1dd74:	add	r7, r0, #1
   1dd78:	mov	r4, r9
   1dd7c:	cmp	r7, r2
   1dd80:	blt	1dd8c <__assert_fail@plt+0xc0e0>
   1dd84:	cmp	r2, r1
   1dd88:	blt	1e4a4 <__assert_fail@plt+0xc7f8>
   1dd8c:	ldr	r2, [sp, #132]	; 0x84
   1dd90:	cmp	r7, r2
   1dd94:	blt	1dda0 <__assert_fail@plt+0xc0f4>
   1dd98:	cmp	r2, r1
   1dd9c:	blt	1e4a4 <__assert_fail@plt+0xc7f8>
   1dda0:	ldrb	r0, [r4, #52]	; 0x34
   1dda4:	tst	r0, #32
   1dda8:	bne	1e064 <__assert_fail@plt+0xc3b8>
   1ddac:	ldr	r1, [sp, #144]	; 0x90
   1ddb0:	ldr	r0, [sp, #108]	; 0x6c
   1ddb4:	add	r2, r1, #1
   1ddb8:	str	r2, [sp, #144]	; 0x90
   1ddbc:	ldrb	r9, [r0, r1]
   1ddc0:	ldr	r0, [r4, #44]	; 0x2c
   1ddc4:	cmp	r0, #0
   1ddc8:	bne	1ddfc <__assert_fail@plt+0xc150>
   1ddcc:	ldr	r2, [r4, #48]	; 0x30
   1ddd0:	cmp	r2, #0
   1ddd4:	bne	1e4c0 <__assert_fail@plt+0xc814>
   1ddd8:	ldr	r0, [sp, #188]	; 0xbc
   1dddc:	mov	r1, r4
   1dde0:	bl	2a88c <__assert_fail@plt+0x18be0>
   1dde4:	cmp	r0, #0
   1dde8:	bne	1ddc0 <__assert_fail@plt+0xc114>
   1ddec:	mov	r0, #12
   1ddf0:	mov	r9, #0
   1ddf4:	str	r0, [fp, #-196]	; 0xffffff3c
   1ddf8:	b	1de00 <__assert_fail@plt+0xc154>
   1ddfc:	ldr	r9, [r0, r9, lsl #2]
   1de00:	ldr	r0, [sp, #204]	; 0xcc
   1de04:	cmp	r0, #0
   1de08:	beq	1de20 <__assert_fail@plt+0xc174>
   1de0c:	sub	r0, fp, #196	; 0xc4
   1de10:	add	r1, sp, #104	; 0x68
   1de14:	mov	r2, r9
   1de18:	bl	2875c <__assert_fail@plt+0x16ab0>
   1de1c:	mov	r9, r0
   1de20:	cmp	r9, #0
   1de24:	beq	1de78 <__assert_fail@plt+0xc1cc>
   1de28:	sub	r0, r4, r9
   1de2c:	clz	r0, r0
   1de30:	lsr	r0, r0, #5
   1de34:	ands	r6, r6, r0
   1de38:	ldrb	r0, [r9, #52]	; 0x34
   1de3c:	moveq	r7, r5
   1de40:	mov	r5, r7
   1de44:	tst	r0, #16
   1de48:	beq	1dd5c <__assert_fail@plt+0xc0b0>
   1de4c:	sxtb	r0, r0
   1de50:	cmn	r0, #1
   1de54:	ble	1df04 <__assert_fail@plt+0xc258>
   1de58:	ldr	r0, [sp, #44]	; 0x2c
   1de5c:	ldr	sl, [sp, #144]	; 0x90
   1de60:	cmp	r0, #0
   1de64:	beq	1e620 <__assert_fail@plt+0xc974>
   1de68:	mov	r8, #0
   1de6c:	mov	r0, #1
   1de70:	str	r0, [sp, #64]	; 0x40
   1de74:	b	1dd5c <__assert_fail@plt+0xc0b0>
   1de78:	ldr	r0, [fp, #-196]	; 0xffffff3c
   1de7c:	cmp	r0, #0
   1de80:	bne	1ffac <__assert_fail@plt+0xe300>
   1de84:	ldr	r0, [sp, #64]	; 0x40
   1de88:	ldr	r1, [sp, #44]	; 0x2c
   1de8c:	cmp	r0, #0
   1de90:	mvn	r1, r1
   1de94:	movwne	r0, #1
   1de98:	tst	r1, r0
   1de9c:	bne	1e60c <__assert_fail@plt+0xc960>
   1dea0:	ldr	r0, [sp, #204]	; 0xcc
   1dea4:	cmp	r0, #0
   1dea8:	beq	1e60c <__assert_fail@plt+0xc960>
   1deac:	ldr	r2, [sp, #144]	; 0x90
   1deb0:	ldr	r1, [sp, #208]	; 0xd0
   1deb4:	add	r0, r0, #4
   1deb8:	cmp	r2, r1
   1debc:	bge	1e60c <__assert_fail@plt+0xc960>
   1dec0:	add	r3, r2, #1
   1dec4:	str	r3, [sp, #144]	; 0x90
   1dec8:	ldr	r2, [r0, r2, lsl #2]
   1decc:	cmp	r2, #0
   1ded0:	mov	r2, r3
   1ded4:	beq	1deb8 <__assert_fail@plt+0xc20c>
   1ded8:	sub	r0, fp, #196	; 0xc4
   1dedc:	add	r1, sp, #104	; 0x68
   1dee0:	mov	r2, #0
   1dee4:	bl	2875c <__assert_fail@plt+0x16ab0>
   1dee8:	cmp	r0, #0
   1deec:	mov	r9, r0
   1def0:	ldreq	r0, [fp, #-196]	; 0xffffff3c
   1def4:	cmpeq	r0, #0
   1def8:	bne	1df4c <__assert_fail@plt+0xc2a0>
   1defc:	ldr	r0, [sp, #204]	; 0xcc
   1df00:	b	1deac <__assert_fail@plt+0xc200>
   1df04:	ldr	r0, [sp, #144]	; 0x90
   1df08:	cmn	r0, #1
   1df0c:	ble	1df44 <__assert_fail@plt+0xc298>
   1df10:	ldr	r1, [sp, #152]	; 0x98
   1df14:	cmp	r1, r0
   1df18:	beq	1e578 <__assert_fail@plt+0xc8cc>
   1df1c:	ldr	r1, [sp, #184]	; 0xb8
   1df20:	cmp	r1, #2
   1df24:	blt	1df58 <__assert_fail@plt+0xc2ac>
   1df28:	ldr	r1, [sp, #112]	; 0x70
   1df2c:	ldr	r4, [r1, r0, lsl #2]
   1df30:	cmn	r4, #1
   1df34:	bne	1df88 <__assert_fail@plt+0xc2dc>
   1df38:	sub	r0, r0, #1
   1df3c:	cmn	r0, #1
   1df40:	bne	1df2c <__assert_fail@plt+0xc280>
   1df44:	ldr	r3, [sp, #164]	; 0xa4
   1df48:	b	1dfb0 <__assert_fail@plt+0xc304>
   1df4c:	cmp	r9, #0
   1df50:	bne	1de28 <__assert_fail@plt+0xc17c>
   1df54:	b	1e60c <__assert_fail@plt+0xc960>
   1df58:	ldr	r1, [sp, #108]	; 0x6c
   1df5c:	ldr	r2, [sp, #172]	; 0xac
   1df60:	mov	r3, #1
   1df64:	ldrb	r0, [r1, r0]
   1df68:	ubfx	r1, r0, #5, #3
   1df6c:	ldr	r1, [r2, r1, lsl #2]
   1df70:	and	r2, r0, #31
   1df74:	tst	r1, r3, lsl r2
   1df78:	moveq	r3, #0
   1df7c:	cmpeq	r0, #10
   1df80:	bne	1dfb0 <__assert_fail@plt+0xc304>
   1df84:	b	1dfa0 <__assert_fail@plt+0xc2f4>
   1df88:	ldrb	r0, [sp, #182]	; 0xb6
   1df8c:	cmp	r0, #0
   1df90:	bne	1e5a0 <__assert_fail@plt+0xc8f4>
   1df94:	mov	r3, #0
   1df98:	cmp	r4, #10
   1df9c:	bne	1dfb0 <__assert_fail@plt+0xc304>
   1dfa0:	ldrb	r0, [sp, #181]	; 0xb5
   1dfa4:	cmp	r0, #0
   1dfa8:	movwne	r0, #1
   1dfac:	lsl	r3, r0, #1
   1dfb0:	ldr	r0, [r9, #8]
   1dfb4:	cmp	r0, #1
   1dfb8:	blt	1dd5c <__assert_fail@plt+0xc0b0>
   1dfbc:	ldr	r1, [sp, #188]	; 0xbc
   1dfc0:	mov	lr, r5
   1dfc4:	ldr	r7, [r9, #12]
   1dfc8:	and	ip, r3, #8
   1dfcc:	and	r2, r3, #2
   1dfd0:	and	r3, r3, #1
   1dfd4:	str	r6, [sp, #24]
   1dfd8:	ldr	r5, [r1]
   1dfdc:	b	1dfec <__assert_fail@plt+0xc340>
   1dfe0:	add	r7, r7, #4
   1dfe4:	subs	r0, r0, #1
   1dfe8:	beq	1dd54 <__assert_fail@plt+0xc0a8>
   1dfec:	ldr	r4, [r7]
   1dff0:	add	r1, r5, r4, lsl #3
   1dff4:	ldr	r1, [r1, #4]
   1dff8:	uxtb	r6, r1
   1dffc:	cmp	r6, #2
   1e000:	bne	1dfe0 <__assert_fail@plt+0xc334>
   1e004:	movw	r6, #65280	; 0xff00
   1e008:	movt	r6, #3
   1e00c:	tst	r1, r6
   1e010:	beq	1e050 <__assert_fail@plt+0xc3a4>
   1e014:	cmp	r3, #0
   1e018:	bne	1e024 <__assert_fail@plt+0xc378>
   1e01c:	ands	r6, r1, #1024	; 0x400
   1e020:	bne	1dfe0 <__assert_fail@plt+0xc334>
   1e024:	cmp	r3, #0
   1e028:	andsne	r6, r1, #2048	; 0x800
   1e02c:	bne	1dfe0 <__assert_fail@plt+0xc334>
   1e030:	cmp	r2, #0
   1e034:	bne	1e040 <__assert_fail@plt+0xc394>
   1e038:	ands	r6, r1, #8192	; 0x2000
   1e03c:	bne	1dfe0 <__assert_fail@plt+0xc334>
   1e040:	cmp	ip, #0
   1e044:	bne	1e050 <__assert_fail@plt+0xc3a4>
   1e048:	ands	r1, r1, #32768	; 0x8000
   1e04c:	bne	1dfe0 <__assert_fail@plt+0xc334>
   1e050:	ldr	r6, [sp, #24]
   1e054:	cmp	r4, #0
   1e058:	mov	r5, lr
   1e05c:	bne	1de58 <__assert_fail@plt+0xc1ac>
   1e060:	b	1dd5c <__assert_fail@plt+0xc0b0>
   1e064:	ldr	r0, [r4, #8]
   1e068:	str	r6, [sp, #24]
   1e06c:	cmp	r0, #1
   1e070:	blt	1e50c <__assert_fail@plt+0xc860>
   1e074:	ldr	ip, [sp, #188]	; 0xbc
   1e078:	mov	r6, #0
   1e07c:	str	r5, [sp, #12]
   1e080:	str	ip, [sp, #20]
   1e084:	b	1e098 <__assert_fail@plt+0xc3ec>
   1e088:	ldr	r0, [r4, #8]
   1e08c:	add	r6, r6, #1
   1e090:	cmp	r6, r0
   1e094:	bge	1e50c <__assert_fail@plt+0xc860>
   1e098:	ldr	r0, [r4, #12]
   1e09c:	ldr	r1, [r0, r6, lsl #2]
   1e0a0:	ldr	r0, [ip]
   1e0a4:	add	r0, r0, r1, lsl #3
   1e0a8:	ldr	r3, [r0, #4]
   1e0ac:	tst	r3, #1048576	; 0x100000
   1e0b0:	beq	1e088 <__assert_fail@plt+0xc3dc>
   1e0b4:	movw	r0, #65280	; 0xff00
   1e0b8:	movt	r0, #3
   1e0bc:	tst	r3, r0
   1e0c0:	beq	1e1d0 <__assert_fail@plt+0xc524>
   1e0c4:	ldr	r0, [sp, #144]	; 0x90
   1e0c8:	cmn	r0, #1
   1e0cc:	ble	1e108 <__assert_fail@plt+0xc45c>
   1e0d0:	ldr	r2, [sp, #152]	; 0x98
   1e0d4:	cmp	r2, r0
   1e0d8:	beq	1e3ec <__assert_fail@plt+0xc740>
   1e0dc:	ldr	r2, [sp, #184]	; 0xb8
   1e0e0:	cmp	r2, #2
   1e0e4:	blt	1e110 <__assert_fail@plt+0xc464>
   1e0e8:	ldr	r2, [sp, #112]	; 0x70
   1e0ec:	ldr	r5, [sp, #12]
   1e0f0:	ldr	r9, [r2, r0, lsl #2]
   1e0f4:	cmn	r9, #1
   1e0f8:	bne	1e154 <__assert_fail@plt+0xc4a8>
   1e0fc:	sub	r0, r0, #1
   1e100:	cmn	r0, #1
   1e104:	bne	1e0f0 <__assert_fail@plt+0xc444>
   1e108:	ldr	lr, [sp, #164]	; 0xa4
   1e10c:	b	1e17c <__assert_fail@plt+0xc4d0>
   1e110:	mov	r9, r3
   1e114:	ldr	r3, [sp, #108]	; 0x6c
   1e118:	ldr	r2, [sp, #172]	; 0xac
   1e11c:	mov	lr, #1
   1e120:	ldrb	r0, [r3, r0]
   1e124:	ubfx	r3, r0, #5, #3
   1e128:	and	r5, r0, #31
   1e12c:	ldr	r3, [r2, r3, lsl #2]
   1e130:	mov	r2, #0
   1e134:	tst	r3, lr, lsl r5
   1e138:	ldr	r5, [sp, #12]
   1e13c:	bne	1e194 <__assert_fail@plt+0xc4e8>
   1e140:	mov	r3, r9
   1e144:	mov	lr, #0
   1e148:	cmp	r0, #10
   1e14c:	beq	1e16c <__assert_fail@plt+0xc4c0>
   1e150:	b	1e17c <__assert_fail@plt+0xc4d0>
   1e154:	ldrb	r0, [sp, #182]	; 0xb6
   1e158:	cmp	r0, #0
   1e15c:	bne	1e424 <__assert_fail@plt+0xc778>
   1e160:	mov	lr, #0
   1e164:	cmp	r9, #10
   1e168:	bne	1e17c <__assert_fail@plt+0xc4d0>
   1e16c:	ldrb	r0, [sp, #181]	; 0xb5
   1e170:	cmp	r0, #0
   1e174:	movwne	r0, #1
   1e178:	lsl	lr, r0, #1
   1e17c:	and	r0, lr, #1
   1e180:	tst	r3, #1024	; 0x400
   1e184:	eor	r2, r0, #1
   1e188:	beq	1e194 <__assert_fail@plt+0xc4e8>
   1e18c:	cmp	r0, #0
   1e190:	beq	1e088 <__assert_fail@plt+0xc3dc>
   1e194:	ldr	r0, [ip]
   1e198:	cmp	r2, #0
   1e19c:	add	r0, r0, r1, lsl #3
   1e1a0:	ldr	r0, [r0, #4]
   1e1a4:	bne	1e1b0 <__assert_fail@plt+0xc504>
   1e1a8:	ands	r2, r0, #2048	; 0x800
   1e1ac:	bne	1e088 <__assert_fail@plt+0xc3dc>
   1e1b0:	tst	lr, #2
   1e1b4:	bne	1e1c0 <__assert_fail@plt+0xc514>
   1e1b8:	ands	r2, r0, #8192	; 0x2000
   1e1bc:	bne	1e088 <__assert_fail@plt+0xc3dc>
   1e1c0:	tst	lr, #8
   1e1c4:	bne	1e1d0 <__assert_fail@plt+0xc524>
   1e1c8:	ands	r0, r0, #32768	; 0x8000
   1e1cc:	bne	1e088 <__assert_fail@plt+0xc3dc>
   1e1d0:	ldr	r3, [sp, #144]	; 0x90
   1e1d4:	mov	r0, ip
   1e1d8:	add	r2, sp, #104	; 0x68
   1e1dc:	str	r6, [sp, #16]
   1e1e0:	mov	r9, r1
   1e1e4:	bl	2a318 <__assert_fail@plt+0x1866c>
   1e1e8:	ldr	r6, [sp, #16]
   1e1ec:	ldr	ip, [sp, #20]
   1e1f0:	cmp	r0, #0
   1e1f4:	beq	1e088 <__assert_fail@plt+0xc3dc>
   1e1f8:	ldr	r1, [sp, #224]	; 0xe0
   1e1fc:	mov	r3, r9
   1e200:	cmp	r1, r0
   1e204:	movlt	r1, r0
   1e208:	str	r1, [sp, #224]	; 0xe0
   1e20c:	ldr	r6, [sp, #144]	; 0x90
   1e210:	ldr	r2, [sp, #140]	; 0x8c
   1e214:	ldr	r1, [sp, #152]	; 0x98
   1e218:	ldr	r5, [sp, #208]	; 0xd0
   1e21c:	add	r6, r6, r0
   1e220:	cmp	r2, r6
   1e224:	cmple	r2, r1
   1e228:	blt	1e23c <__assert_fail@plt+0xc590>
   1e22c:	ldr	r0, [sp, #132]	; 0x84
   1e230:	cmp	r0, r6
   1e234:	cmple	r0, r1
   1e238:	bge	1e258 <__assert_fail@plt+0xc5ac>
   1e23c:	add	r1, r6, #1
   1e240:	add	r0, sp, #104	; 0x68
   1e244:	bl	28560 <__assert_fail@plt+0x168b4>
   1e248:	ldr	ip, [sp, #20]
   1e24c:	mov	r3, r9
   1e250:	cmp	r0, #0
   1e254:	bne	1e588 <__assert_fail@plt+0xc8dc>
   1e258:	cmp	r6, r5
   1e25c:	ble	1e288 <__assert_fail@plt+0xc5dc>
   1e260:	sub	r0, r6, r5
   1e264:	mov	r1, #0
   1e268:	lsl	r2, r0, #2
   1e26c:	ldr	r0, [sp, #204]	; 0xcc
   1e270:	add	r0, r0, r5, lsl #2
   1e274:	add	r0, r0, #4
   1e278:	bl	11b2c <memset@plt>
   1e27c:	ldr	ip, [sp, #20]
   1e280:	mov	r3, r9
   1e284:	str	r6, [sp, #208]	; 0xd0
   1e288:	mov	r0, #0
   1e28c:	str	r0, [fp, #-48]	; 0xffffffd0
   1e290:	ldr	r0, [sp, #204]	; 0xcc
   1e294:	ldr	r1, [ip, #24]
   1e298:	ldr	r9, [r0, r6, lsl #2]
   1e29c:	ldr	r0, [ip, #12]
   1e2a0:	ldr	r0, [r0, r3, lsl #2]
   1e2a4:	cmp	r9, #0
   1e2a8:	add	r0, r0, r0, lsl #1
   1e2ac:	add	r2, r1, r0, lsl #2
   1e2b0:	beq	1e2d4 <__assert_fail@plt+0xc628>
   1e2b4:	ldr	r1, [r9, #40]	; 0x28
   1e2b8:	sub	r0, fp, #192	; 0xc0
   1e2bc:	bl	2896c <__assert_fail@plt+0x16cc0>
   1e2c0:	ldr	r5, [sp, #12]
   1e2c4:	cmp	r0, #0
   1e2c8:	str	r0, [fp, #-48]	; 0xffffffd0
   1e2cc:	beq	1e2e8 <__assert_fail@plt+0xc63c>
   1e2d0:	b	1e590 <__assert_fail@plt+0xc8e4>
   1e2d4:	vldr	d16, [r2]
   1e2d8:	ldr	r0, [r2, #8]
   1e2dc:	ldr	r5, [sp, #12]
   1e2e0:	str	r0, [fp, #-184]	; 0xffffff48
   1e2e4:	vstr	d16, [fp, #-192]	; 0xffffff40
   1e2e8:	cmp	r6, #0
   1e2ec:	str	r6, [sp, #8]
   1e2f0:	str	r9, [sp, #4]
   1e2f4:	ble	1e400 <__assert_fail@plt+0xc754>
   1e2f8:	ldr	r1, [sp, #152]	; 0x98
   1e2fc:	sub	r3, r6, #1
   1e300:	cmp	r1, r3
   1e304:	ldr	r1, [sp, #20]
   1e308:	beq	1e410 <__assert_fail@plt+0xc764>
   1e30c:	ldr	r0, [sp, #184]	; 0xb8
   1e310:	cmp	r0, #2
   1e314:	blt	1e340 <__assert_fail@plt+0xc694>
   1e318:	ldr	r2, [sp, #112]	; 0x70
   1e31c:	sub	r0, fp, #48	; 0x30
   1e320:	ldr	r9, [r2, r3, lsl #2]
   1e324:	cmn	r9, #1
   1e328:	bne	1e374 <__assert_fail@plt+0xc6c8>
   1e32c:	sub	r3, r3, #1
   1e330:	cmn	r3, #1
   1e334:	bne	1e320 <__assert_fail@plt+0xc674>
   1e338:	ldr	r3, [sp, #164]	; 0xa4
   1e33c:	b	1e39c <__assert_fail@plt+0xc6f0>
   1e340:	ldr	r0, [sp, #108]	; 0x6c
   1e344:	ldr	r2, [sp, #172]	; 0xac
   1e348:	ldrb	r6, [r0, r3]
   1e34c:	mov	r3, #1
   1e350:	ubfx	r0, r6, #5, #3
   1e354:	ldr	r0, [r2, r0, lsl #2]
   1e358:	and	r2, r6, #31
   1e35c:	tst	r0, r3, lsl r2
   1e360:	sub	r0, fp, #48	; 0x30
   1e364:	moveq	r3, #0
   1e368:	cmpeq	r6, #10
   1e36c:	bne	1e39c <__assert_fail@plt+0xc6f0>
   1e370:	b	1e38c <__assert_fail@plt+0xc6e0>
   1e374:	ldrb	r2, [sp, #182]	; 0xb6
   1e378:	cmp	r2, #0
   1e37c:	bne	1e460 <__assert_fail@plt+0xc7b4>
   1e380:	mov	r3, #0
   1e384:	cmp	r9, #10
   1e388:	bne	1e39c <__assert_fail@plt+0xc6f0>
   1e38c:	ldrb	r2, [sp, #181]	; 0xb5
   1e390:	cmp	r2, #0
   1e394:	movwne	r2, #1
   1e398:	lsl	r3, r2, #1
   1e39c:	sub	r2, fp, #192	; 0xc0
   1e3a0:	bl	26a48 <__assert_fail@plt+0x14d9c>
   1e3a4:	ldr	r1, [sp, #204]	; 0xcc
   1e3a8:	ldr	r6, [sp, #8]
   1e3ac:	str	r0, [r1, r6, lsl #2]
   1e3b0:	ldr	r0, [sp, #4]
   1e3b4:	cmp	r0, #0
   1e3b8:	beq	1e3c4 <__assert_fail@plt+0xc718>
   1e3bc:	ldr	r0, [fp, #-184]	; 0xffffff48
   1e3c0:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1e3c4:	ldr	r0, [sp, #204]	; 0xcc
   1e3c8:	ldr	ip, [sp, #20]
   1e3cc:	ldr	r0, [r0, r6, lsl #2]
   1e3d0:	ldr	r6, [sp, #16]
   1e3d4:	cmp	r0, #0
   1e3d8:	bne	1e088 <__assert_fail@plt+0xc3dc>
   1e3dc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e3e0:	cmp	r0, #0
   1e3e4:	beq	1e088 <__assert_fail@plt+0xc3dc>
   1e3e8:	b	1e590 <__assert_fail@plt+0xc8e4>
   1e3ec:	ldr	r0, [sp, #192]	; 0xc0
   1e3f0:	ldr	r5, [sp, #12]
   1e3f4:	and	r0, r0, #2
   1e3f8:	eor	lr, r0, #10
   1e3fc:	b	1e17c <__assert_fail@plt+0xc4d0>
   1e400:	ldr	r3, [sp, #164]	; 0xa4
   1e404:	ldr	r1, [sp, #20]
   1e408:	sub	r0, fp, #48	; 0x30
   1e40c:	b	1e39c <__assert_fail@plt+0xc6f0>
   1e410:	ldr	r0, [sp, #192]	; 0xc0
   1e414:	and	r0, r0, #2
   1e418:	eor	r3, r0, #10
   1e41c:	sub	r0, fp, #48	; 0x30
   1e420:	b	1e39c <__assert_fail@plt+0xc6f0>
   1e424:	mov	r0, r9
   1e428:	str	r3, [sp, #4]
   1e42c:	str	r1, [sp, #8]
   1e430:	bl	11afc <iswalnum@plt>
   1e434:	mov	lr, #1
   1e438:	mov	r2, #0
   1e43c:	cmp	r9, #95	; 0x5f
   1e440:	beq	1e48c <__assert_fail@plt+0xc7e0>
   1e444:	ldr	r5, [sp, #12]
   1e448:	ldr	ip, [sp, #20]
   1e44c:	ldr	r1, [sp, #8]
   1e450:	ldr	r3, [sp, #4]
   1e454:	cmp	r0, #0
   1e458:	beq	1e160 <__assert_fail@plt+0xc4b4>
   1e45c:	b	1e194 <__assert_fail@plt+0xc4e8>
   1e460:	mov	r0, r9
   1e464:	bl	11afc <iswalnum@plt>
   1e468:	mov	r3, #1
   1e46c:	cmp	r9, #95	; 0x5f
   1e470:	beq	1e49c <__assert_fail@plt+0xc7f0>
   1e474:	ldr	r5, [sp, #12]
   1e478:	ldr	r1, [sp, #20]
   1e47c:	cmp	r0, #0
   1e480:	sub	r0, fp, #48	; 0x30
   1e484:	beq	1e380 <__assert_fail@plt+0xc6d4>
   1e488:	b	1e39c <__assert_fail@plt+0xc6f0>
   1e48c:	ldr	r5, [sp, #12]
   1e490:	ldr	ip, [sp, #20]
   1e494:	ldr	r1, [sp, #8]
   1e498:	b	1e194 <__assert_fail@plt+0xc4e8>
   1e49c:	ldr	r5, [sp, #12]
   1e4a0:	b	1e404 <__assert_fail@plt+0xc758>
   1e4a4:	add	r1, r0, #2
   1e4a8:	add	r0, sp, #104	; 0x68
   1e4ac:	bl	28560 <__assert_fail@plt+0x168b4>
   1e4b0:	cmp	r0, #0
   1e4b4:	str	r0, [fp, #-196]	; 0xffffff3c
   1e4b8:	beq	1dda0 <__assert_fail@plt+0xc0f4>
   1e4bc:	b	1ffac <__assert_fail@plt+0xe300>
   1e4c0:	ldr	r0, [sp, #144]	; 0x90
   1e4c4:	cmp	r0, #0
   1e4c8:	ble	1e504 <__assert_fail@plt+0xc858>
   1e4cc:	ldr	r1, [sp, #152]	; 0x98
   1e4d0:	sub	r3, r0, #1
   1e4d4:	cmp	r1, r3
   1e4d8:	beq	1e5c0 <__assert_fail@plt+0xc914>
   1e4dc:	ldr	r1, [sp, #184]	; 0xb8
   1e4e0:	cmp	r1, #2
   1e4e4:	blt	1e51c <__assert_fail@plt+0xc870>
   1e4e8:	ldr	r1, [sp, #112]	; 0x70
   1e4ec:	ldr	r0, [r1, r3, lsl #2]
   1e4f0:	cmn	r0, #1
   1e4f4:	bne	1e544 <__assert_fail@plt+0xc898>
   1e4f8:	sub	r3, r3, #1
   1e4fc:	cmn	r3, #1
   1e500:	bne	1e4ec <__assert_fail@plt+0xc840>
   1e504:	ldr	r1, [sp, #164]	; 0xa4
   1e508:	b	1e56c <__assert_fail@plt+0xc8c0>
   1e50c:	ldr	r6, [sp, #24]
   1e510:	mov	r0, #0
   1e514:	str	r0, [fp, #-196]	; 0xffffff3c
   1e518:	b	1ddac <__assert_fail@plt+0xc100>
   1e51c:	ldr	r1, [sp, #108]	; 0x6c
   1e520:	ldr	ip, [sp, #172]	; 0xac
   1e524:	ldrb	r0, [r1, r3]
   1e528:	ubfx	r1, r0, #5, #3
   1e52c:	and	r3, r0, #31
   1e530:	ldr	ip, [ip, r1, lsl #2]
   1e534:	mov	r1, #1
   1e538:	tst	ip, r1, lsl r3
   1e53c:	bne	1e56c <__assert_fail@plt+0xc8c0>
   1e540:	b	1e550 <__assert_fail@plt+0xc8a4>
   1e544:	ldrb	r1, [sp, #182]	; 0xb6
   1e548:	cmp	r1, #0
   1e54c:	bne	1e5c8 <__assert_fail@plt+0xc91c>
   1e550:	mov	r1, #0
   1e554:	cmp	r0, #10
   1e558:	bne	1e56c <__assert_fail@plt+0xc8c0>
   1e55c:	ldrb	r0, [sp, #181]	; 0xb5
   1e560:	cmp	r0, #0
   1e564:	movwne	r0, #1
   1e568:	lsl	r1, r0, #1
   1e56c:	bfi	r9, r1, #8, #1
   1e570:	ldr	r9, [r2, r9, lsl #2]
   1e574:	b	1de00 <__assert_fail@plt+0xc154>
   1e578:	ldr	r0, [sp, #192]	; 0xc0
   1e57c:	and	r0, r0, #2
   1e580:	eor	r3, r0, #10
   1e584:	b	1dfb0 <__assert_fail@plt+0xc304>
   1e588:	ldr	r5, [sp, #12]
   1e58c:	str	r0, [fp, #-48]	; 0xffffffd0
   1e590:	ldr	r6, [sp, #24]
   1e594:	str	r0, [fp, #-196]	; 0xffffff3c
   1e598:	mov	r9, #0
   1e59c:	b	1de00 <__assert_fail@plt+0xc154>
   1e5a0:	mov	r0, r4
   1e5a4:	bl	11afc <iswalnum@plt>
   1e5a8:	mov	r3, #1
   1e5ac:	cmp	r4, #95	; 0x5f
   1e5b0:	beq	1dfb0 <__assert_fail@plt+0xc304>
   1e5b4:	cmp	r0, #0
   1e5b8:	beq	1df94 <__assert_fail@plt+0xc2e8>
   1e5bc:	b	1dfb0 <__assert_fail@plt+0xc304>
   1e5c0:	mov	r1, #10
   1e5c4:	b	1e56c <__assert_fail@plt+0xc8c0>
   1e5c8:	str	r5, [sp, #12]
   1e5cc:	str	r2, [sp, #24]
   1e5d0:	mov	r5, r0
   1e5d4:	bl	11afc <iswalnum@plt>
   1e5d8:	mov	r1, #1
   1e5dc:	cmp	r5, #95	; 0x5f
   1e5e0:	beq	1e600 <__assert_fail@plt+0xc954>
   1e5e4:	mov	r3, r5
   1e5e8:	ldr	r5, [sp, #12]
   1e5ec:	ldr	r2, [sp, #24]
   1e5f0:	cmp	r0, #0
   1e5f4:	mov	r0, r3
   1e5f8:	beq	1e550 <__assert_fail@plt+0xc8a4>
   1e5fc:	b	1e56c <__assert_fail@plt+0xc8c0>
   1e600:	ldr	r5, [sp, #12]
   1e604:	ldr	r2, [sp, #24]
   1e608:	b	1e56c <__assert_fail@plt+0xc8c0>
   1e60c:	cmp	r8, #0
   1e610:	beq	1e620 <__assert_fail@plt+0xc974>
   1e614:	ldr	r0, [r8]
   1e618:	add	r0, r0, r5
   1e61c:	str	r0, [r8]
   1e620:	ldr	r8, [sp, #60]	; 0x3c
   1e624:	ldr	r4, [sp, #80]	; 0x50
   1e628:	ldr	r9, [sp, #76]	; 0x4c
   1e62c:	cmn	sl, #1
   1e630:	beq	1ef98 <__assert_fail@plt+0xd2ec>
   1e634:	cmn	sl, #2
   1e638:	beq	1ffac <__assert_fail@plt+0xe300>
   1e63c:	ldr	r9, [sp, #52]	; 0x34
   1e640:	str	sl, [sp, #196]	; 0xc4
   1e644:	ldr	r2, [sp, #84]	; 0x54
   1e648:	ldr	lr, [sp, #96]	; 0x60
   1e64c:	ldrb	r0, [r9, #28]
   1e650:	cmp	r2, #2
   1e654:	bcc	1e660 <__assert_fail@plt+0xc9b4>
   1e658:	ands	r1, r0, #16
   1e65c:	beq	1e66c <__assert_fail@plt+0xc9c0>
   1e660:	ldr	r1, [lr, #76]	; 0x4c
   1e664:	cmp	r1, #0
   1e668:	beq	1e7cc <__assert_fail@plt+0xcb20>
   1e66c:	ldr	r0, [sp, #204]	; 0xcc
   1e670:	cmn	sl, #1
   1e674:	ldr	r6, [r0, sl, lsl #2]
   1e678:	ble	1e6b0 <__assert_fail@plt+0xca04>
   1e67c:	ldr	r0, [sp, #152]	; 0x98
   1e680:	cmp	r0, sl
   1e684:	beq	1eb08 <__assert_fail@plt+0xce5c>
   1e688:	ldr	r0, [sp, #184]	; 0xb8
   1e68c:	cmp	r0, #2
   1e690:	blt	1e6c0 <__assert_fail@plt+0xca14>
   1e694:	ldr	r0, [sp, #112]	; 0x70
   1e698:	ldr	r4, [r0, sl, lsl #2]
   1e69c:	cmn	r4, #1
   1e6a0:	bne	1e6f8 <__assert_fail@plt+0xca4c>
   1e6a4:	sub	sl, sl, #1
   1e6a8:	cmn	sl, #1
   1e6ac:	bne	1e698 <__assert_fail@plt+0xc9ec>
   1e6b0:	ldr	r3, [sp, #164]	; 0xa4
   1e6b4:	movw	sl, #65280	; 0xff00
   1e6b8:	movt	sl, #3
   1e6bc:	b	1e728 <__assert_fail@plt+0xca7c>
   1e6c0:	ldr	r0, [sp, #108]	; 0x6c
   1e6c4:	ldr	r1, [sp, #172]	; 0xac
   1e6c8:	mov	r3, #1
   1e6cc:	ldrb	r0, [r0, sl]
   1e6d0:	movw	sl, #65280	; 0xff00
   1e6d4:	movt	sl, #3
   1e6d8:	ubfx	r2, r0, #5, #3
   1e6dc:	ldr	r1, [r1, r2, lsl #2]
   1e6e0:	and	r2, r0, #31
   1e6e4:	tst	r1, r3, lsl r2
   1e6e8:	moveq	r3, #0
   1e6ec:	cmpeq	r0, #10
   1e6f0:	bne	1e728 <__assert_fail@plt+0xca7c>
   1e6f4:	b	1e718 <__assert_fail@plt+0xca6c>
   1e6f8:	ldrb	r0, [sp, #182]	; 0xb6
   1e6fc:	movw	sl, #65280	; 0xff00
   1e700:	movt	sl, #3
   1e704:	cmp	r0, #0
   1e708:	bne	1ebc0 <__assert_fail@plt+0xcf14>
   1e70c:	mov	r3, #0
   1e710:	cmp	r4, #10
   1e714:	bne	1e728 <__assert_fail@plt+0xca7c>
   1e718:	ldrb	r0, [sp, #181]	; 0xb5
   1e71c:	cmp	r0, #0
   1e720:	movwne	r0, #1
   1e724:	lsl	r3, r0, #1
   1e728:	ldr	r0, [r6, #8]
   1e72c:	cmp	r0, #1
   1e730:	blt	1e7bc <__assert_fail@plt+0xcb10>
   1e734:	ldr	r7, [r6, #12]
   1e738:	ldr	r6, [sp, #188]	; 0xbc
   1e73c:	and	ip, r3, #8
   1e740:	and	r2, r3, #2
   1e744:	and	r3, r3, #1
   1e748:	ldr	r6, [r6]
   1e74c:	b	1e75c <__assert_fail@plt+0xcab0>
   1e750:	add	r7, r7, #4
   1e754:	subs	r0, r0, #1
   1e758:	beq	1e7bc <__assert_fail@plt+0xcb10>
   1e75c:	ldr	r5, [r7]
   1e760:	add	r4, r6, r5, lsl #3
   1e764:	ldr	r4, [r4, #4]
   1e768:	uxtb	r1, r4
   1e76c:	cmp	r1, #2
   1e770:	bne	1e750 <__assert_fail@plt+0xcaa4>
   1e774:	tst	r4, sl
   1e778:	beq	1e7c0 <__assert_fail@plt+0xcb14>
   1e77c:	cmp	r3, #0
   1e780:	bne	1e78c <__assert_fail@plt+0xcae0>
   1e784:	ands	r1, r4, #1024	; 0x400
   1e788:	bne	1e750 <__assert_fail@plt+0xcaa4>
   1e78c:	cmp	r3, #0
   1e790:	andsne	r1, r4, #2048	; 0x800
   1e794:	bne	1e750 <__assert_fail@plt+0xcaa4>
   1e798:	cmp	r2, #0
   1e79c:	bne	1e7a8 <__assert_fail@plt+0xcafc>
   1e7a0:	ands	r1, r4, #8192	; 0x2000
   1e7a4:	bne	1e750 <__assert_fail@plt+0xcaa4>
   1e7a8:	cmp	ip, #0
   1e7ac:	bne	1e7c0 <__assert_fail@plt+0xcb14>
   1e7b0:	ands	r1, r4, #32768	; 0x8000
   1e7b4:	bne	1e750 <__assert_fail@plt+0xcaa4>
   1e7b8:	b	1e7c0 <__assert_fail@plt+0xcb14>
   1e7bc:	mov	r5, #0
   1e7c0:	str	r5, [sp, #200]	; 0xc8
   1e7c4:	ldr	r2, [sp, #84]	; 0x54
   1e7c8:	ldrb	r0, [r9, #28]
   1e7cc:	ldr	r4, [sp, #80]	; 0x50
   1e7d0:	ldr	r9, [sp, #76]	; 0x4c
   1e7d4:	cmp	r2, #2
   1e7d8:	bcc	1e7f0 <__assert_fail@plt+0xcb44>
   1e7dc:	ands	r0, r0, #16
   1e7e0:	bne	1e7f0 <__assert_fail@plt+0xcb44>
   1e7e4:	ldrb	r0, [lr, #88]	; 0x58
   1e7e8:	tst	r0, #1
   1e7ec:	bne	1e7fc <__assert_fail@plt+0xcb50>
   1e7f0:	ldr	r0, [lr, #76]	; 0x4c
   1e7f4:	cmp	r0, #0
   1e7f8:	beq	1f070 <__assert_fail@plt+0xd3c4>
   1e7fc:	ldr	r6, [sp, #196]	; 0xc4
   1e800:	cmn	r6, #-1073741823	; 0xc0000001
   1e804:	bcs	1ffac <__assert_fail@plt+0xe300>
   1e808:	ldr	r0, [sp, #188]	; 0xbc
   1e80c:	ldr	r8, [sp, #200]	; 0xc8
   1e810:	str	r0, [sp, #64]	; 0x40
   1e814:	mov	r0, #4
   1e818:	add	r5, r0, r6, lsl #2
   1e81c:	mov	r0, r5
   1e820:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1e824:	mov	r7, r0
   1e828:	cmp	r0, #0
   1e82c:	beq	20134 <__assert_fail@plt+0xe488>
   1e830:	ldr	r0, [sp, #64]	; 0x40
   1e834:	ldr	r0, [r0, #76]	; 0x4c
   1e838:	cmp	r0, #0
   1e83c:	beq	1e960 <__assert_fail@plt+0xccb4>
   1e840:	mov	r0, r5
   1e844:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1e848:	cmp	r0, #0
   1e84c:	beq	20134 <__assert_fail@plt+0xe488>
   1e850:	add	r9, r6, #1
   1e854:	mov	r1, #0
   1e858:	mov	r5, r0
   1e85c:	lsl	r2, r9, #2
   1e860:	bl	11b2c <memset@plt>
   1e864:	ldr	r0, [sp, #36]	; 0x24
   1e868:	mov	r1, #0
   1e86c:	str	r6, [fp, #-180]	; 0xffffff4c
   1e870:	str	r8, [fp, #-184]	; 0xffffff48
   1e874:	str	r5, [fp, #-188]	; 0xffffff44
   1e878:	str	r7, [fp, #-192]	; 0xffffff40
   1e87c:	str	r1, [r0]
   1e880:	str	r1, [r0, #4]
   1e884:	str	r1, [r0, #8]
   1e888:	add	r0, sp, #104	; 0x68
   1e88c:	sub	r1, fp, #192	; 0xc0
   1e890:	bl	2b9c0 <__assert_fail@plt+0x19d14>
   1e894:	mov	sl, r0
   1e898:	mov	r0, #0
   1e89c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1e8a0:	cmp	sl, #0
   1e8a4:	bne	1efd0 <__assert_fail@plt+0xd324>
   1e8a8:	ldr	r0, [r7]
   1e8ac:	cmp	r0, #0
   1e8b0:	beq	1ed64 <__assert_fail@plt+0xd0b8>
   1e8b4:	mov	r1, #0
   1e8b8:	cmp	r6, #0
   1e8bc:	mov	sl, #0
   1e8c0:	str	r5, [sp, #20]
   1e8c4:	str	r7, [sp, #24]
   1e8c8:	str	r6, [sp, #16]
   1e8cc:	str	r1, [sp, #12]
   1e8d0:	bmi	1e9bc <__assert_fail@plt+0xcd10>
   1e8d4:	ldr	r1, [sp, #24]
   1e8d8:	ldr	r6, [sp, #20]
   1e8dc:	sub	r7, r9, #1
   1e8e0:	add	r5, r1, #4
   1e8e4:	ldr	r2, [r6]
   1e8e8:	cmp	r0, #0
   1e8ec:	beq	1e944 <__assert_fail@plt+0xcc98>
   1e8f0:	cmp	r2, #0
   1e8f4:	beq	1e948 <__assert_fail@plt+0xcc9c>
   1e8f8:	sub	r4, fp, #48	; 0x30
   1e8fc:	add	r1, r0, #4
   1e900:	add	r2, r2, #4
   1e904:	mov	r0, r4
   1e908:	bl	2896c <__assert_fail@plt+0x16cc0>
   1e90c:	cmp	r0, #0
   1e910:	str	r0, [fp, #-196]	; 0xffffff3c
   1e914:	bne	1e9e0 <__assert_fail@plt+0xcd34>
   1e918:	ldr	r1, [sp, #64]	; 0x40
   1e91c:	sub	r0, fp, #196	; 0xc4
   1e920:	mov	r2, r4
   1e924:	bl	2a000 <__assert_fail@plt+0x18354>
   1e928:	str	r0, [r5, #-4]
   1e92c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1e930:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1e934:	ldr	sl, [fp, #-196]	; 0xffffff3c
   1e938:	cmp	sl, #0
   1e93c:	beq	1e948 <__assert_fail@plt+0xcc9c>
   1e940:	b	1e9bc <__assert_fail@plt+0xcd10>
   1e944:	str	r2, [r5, #-4]
   1e948:	cmp	r7, #0
   1e94c:	beq	1e9b8 <__assert_fail@plt+0xcd0c>
   1e950:	ldr	r0, [r5], #4
   1e954:	add	r6, r6, #4
   1e958:	sub	r7, r7, #1
   1e95c:	b	1e8e4 <__assert_fail@plt+0xcc38>
   1e960:	ldr	r0, [sp, #36]	; 0x24
   1e964:	mov	r1, #0
   1e968:	str	r6, [fp, #-180]	; 0xffffff4c
   1e96c:	str	r8, [fp, #-184]	; 0xffffff48
   1e970:	str	r1, [fp, #-188]	; 0xffffff44
   1e974:	str	r7, [fp, #-192]	; 0xffffff40
   1e978:	str	r1, [r0]
   1e97c:	str	r1, [r0, #4]
   1e980:	str	r1, [r0, #8]
   1e984:	add	r0, sp, #104	; 0x68
   1e988:	sub	r1, fp, #192	; 0xc0
   1e98c:	bl	2b9c0 <__assert_fail@plt+0x19d14>
   1e990:	mov	sl, r0
   1e994:	mov	r0, #0
   1e998:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1e99c:	cmp	sl, #0
   1e9a0:	bne	1ebb4 <__assert_fail@plt+0xcf08>
   1e9a4:	ldr	r0, [r7]
   1e9a8:	mov	r5, #0
   1e9ac:	cmp	r0, #0
   1e9b0:	beq	1ef84 <__assert_fail@plt+0xd2d8>
   1e9b4:	b	1f048 <__assert_fail@plt+0xd39c>
   1e9b8:	mov	sl, #0
   1e9bc:	ldr	r0, [sp, #20]
   1e9c0:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1e9c4:	ldr	r4, [sp, #80]	; 0x50
   1e9c8:	ldr	r9, [sp, #76]	; 0x4c
   1e9cc:	ldr	r7, [sp, #24]
   1e9d0:	ldr	r6, [sp, #16]
   1e9d4:	cmp	sl, #0
   1e9d8:	beq	1f048 <__assert_fail@plt+0xd39c>
   1e9dc:	b	1efdc <__assert_fail@plt+0xd330>
   1e9e0:	mov	sl, r0
   1e9e4:	b	1e9bc <__assert_fail@plt+0xcd10>
   1e9e8:	sxtb	r0, r0
   1e9ec:	cmn	r0, #1
   1e9f0:	ble	1eb18 <__assert_fail@plt+0xce6c>
   1e9f4:	mov	r0, #1
   1e9f8:	mov	sl, r5
   1e9fc:	str	r0, [sp, #64]	; 0x40
   1ea00:	ldr	r0, [sp, #44]	; 0x2c
   1ea04:	cmp	r0, #0
   1ea08:	bne	1dd34 <__assert_fail@plt+0xc088>
   1ea0c:	mov	sl, r5
   1ea10:	b	1e624 <__assert_fail@plt+0xc978>
   1ea14:	ldr	r0, [r9, #8]
   1ea18:	str	r5, [sp, #12]
   1ea1c:	cmp	r0, #1
   1ea20:	blt	1eaec <__assert_fail@plt+0xce40>
   1ea24:	ldr	r4, [sp, #188]	; 0xbc
   1ea28:	mov	r6, #0
   1ea2c:	b	1ea54 <__assert_fail@plt+0xcda8>
   1ea30:	add	r1, r1, #1
   1ea34:	str	r5, [r0, #4]
   1ea38:	str	r1, [sp, #228]	; 0xe4
   1ea3c:	mov	r1, #0
   1ea40:	str	r1, [r0]
   1ea44:	ldr	r0, [r9, #8]
   1ea48:	add	r6, r6, #1
   1ea4c:	cmp	r6, r0
   1ea50:	bge	1eaec <__assert_fail@plt+0xce40>
   1ea54:	ldr	r1, [r9, #12]
   1ea58:	ldr	r5, [r1, r6, lsl #2]
   1ea5c:	ldr	r1, [r4]
   1ea60:	add	r2, r1, r5, lsl #3
   1ea64:	ldrb	r2, [r2, #4]
   1ea68:	cmp	r2, #8
   1ea6c:	bne	1ea48 <__assert_fail@plt+0xcd9c>
   1ea70:	ldr	r1, [r1, r5, lsl #3]
   1ea74:	cmp	r1, #31
   1ea78:	bgt	1ea48 <__assert_fail@plt+0xcd9c>
   1ea7c:	ldr	r2, [r4, #80]	; 0x50
   1ea80:	mov	r3, #1
   1ea84:	tst	r2, r3, lsl r1
   1ea88:	beq	1ea48 <__assert_fail@plt+0xcd9c>
   1ea8c:	ldr	r0, [sp, #228]	; 0xe4
   1ea90:	ldr	r7, [sp, #232]	; 0xe8
   1ea94:	cmp	r0, r7
   1ea98:	beq	1eac8 <__assert_fail@plt+0xce1c>
   1ea9c:	mov	r0, #1
   1eaa0:	mov	r1, #24
   1eaa4:	bl	1b258 <__assert_fail@plt+0x95ac>
   1eaa8:	ldr	r1, [sp, #228]	; 0xe4
   1eaac:	ldr	r2, [sp, #236]	; 0xec
   1eab0:	str	r0, [r2, r1, lsl #2]
   1eab4:	ldr	r0, [sp, #236]	; 0xec
   1eab8:	ldr	r0, [r0, r1, lsl #2]
   1eabc:	cmp	r0, #0
   1eac0:	bne	1ea30 <__assert_fail@plt+0xcd84>
   1eac4:	b	1f010 <__assert_fail@plt+0xd364>
   1eac8:	ldr	r0, [sp, #236]	; 0xec
   1eacc:	lsl	r1, r7, #3
   1ead0:	bl	1b64c <__assert_fail@plt+0x99a0>
   1ead4:	cmp	r0, #0
   1ead8:	beq	1f010 <__assert_fail@plt+0xd364>
   1eadc:	str	r0, [sp, #236]	; 0xec
   1eae0:	lsl	r0, r7, #1
   1eae4:	str	r0, [sp, #232]	; 0xe8
   1eae8:	b	1ea9c <__assert_fail@plt+0xcdf0>
   1eaec:	mov	r6, #0
   1eaf0:	str	r6, [fp, #-196]	; 0xffffff3c
   1eaf4:	ldrb	r0, [r9, #52]	; 0x34
   1eaf8:	tst	r0, #64	; 0x40
   1eafc:	bne	1eb60 <__assert_fail@plt+0xceb4>
   1eb00:	ldr	r5, [sp, #12]
   1eb04:	b	1dd1c <__assert_fail@plt+0xc070>
   1eb08:	ldr	r0, [sp, #192]	; 0xc0
   1eb0c:	and	r0, r0, #2
   1eb10:	eor	r3, r0, #10
   1eb14:	b	1e6b4 <__assert_fail@plt+0xca08>
   1eb18:	cmn	r5, #1
   1eb1c:	ble	1eb58 <__assert_fail@plt+0xceac>
   1eb20:	ldr	r0, [sp, #152]	; 0x98
   1eb24:	cmp	r0, r5
   1eb28:	beq	1f018 <__assert_fail@plt+0xd36c>
   1eb2c:	ldr	r0, [sp, #184]	; 0xb8
   1eb30:	cmp	r0, #2
   1eb34:	blt	1eb84 <__assert_fail@plt+0xced8>
   1eb38:	ldr	r0, [sp, #112]	; 0x70
   1eb3c:	mov	r1, r5
   1eb40:	ldr	r4, [r0, r1, lsl #2]
   1eb44:	cmn	r4, #1
   1eb48:	bne	1ec08 <__assert_fail@plt+0xcf5c>
   1eb4c:	sub	r1, r1, #1
   1eb50:	cmn	r1, #1
   1eb54:	bne	1eb40 <__assert_fail@plt+0xce94>
   1eb58:	ldr	r3, [sp, #164]	; 0xa4
   1eb5c:	b	1ec30 <__assert_fail@plt+0xcf84>
   1eb60:	add	r1, r9, #4
   1eb64:	add	r0, sp, #104	; 0x68
   1eb68:	bl	27be0 <__assert_fail@plt+0x15f34>
   1eb6c:	ldr	r5, [sp, #12]
   1eb70:	cmp	r0, #0
   1eb74:	str	r0, [fp, #-196]	; 0xffffff3c
   1eb78:	beq	1dd1c <__assert_fail@plt+0xc070>
   1eb7c:	mov	sl, r0
   1eb80:	b	1e624 <__assert_fail@plt+0xc978>
   1eb84:	ldr	r0, [sp, #108]	; 0x6c
   1eb88:	ldr	r1, [sp, #172]	; 0xac
   1eb8c:	mov	r3, #1
   1eb90:	ldrb	r0, [r0, r5]
   1eb94:	ubfx	r2, r0, #5, #3
   1eb98:	ldr	r1, [r1, r2, lsl #2]
   1eb9c:	and	r2, r0, #31
   1eba0:	tst	r1, r3, lsl r2
   1eba4:	moveq	r3, #0
   1eba8:	cmpeq	r0, #10
   1ebac:	bne	1ec30 <__assert_fail@plt+0xcf84>
   1ebb0:	b	1ec20 <__assert_fail@plt+0xcf74>
   1ebb4:	mov	r0, #0
   1ebb8:	str	r0, [sp, #12]
   1ebbc:	b	1efdc <__assert_fail@plt+0xd330>
   1ebc0:	mov	r0, r4
   1ebc4:	mov	r5, lr
   1ebc8:	bl	11afc <iswalnum@plt>
   1ebcc:	mov	r3, #1
   1ebd0:	cmp	r4, #95	; 0x5f
   1ebd4:	beq	1f008 <__assert_fail@plt+0xd35c>
   1ebd8:	cmp	r0, #0
   1ebdc:	mov	lr, r5
   1ebe0:	beq	1e70c <__assert_fail@plt+0xca60>
   1ebe4:	b	1e728 <__assert_fail@plt+0xca7c>
   1ebe8:	mov	r0, r6
   1ebec:	bl	11afc <iswalnum@plt>
   1ebf0:	ldr	r1, [sp, #48]	; 0x30
   1ebf4:	cmp	r6, #95	; 0x5f
   1ebf8:	beq	1dcec <__assert_fail@plt+0xc040>
   1ebfc:	cmp	r0, #0
   1ec00:	beq	1dc60 <__assert_fail@plt+0xbfb4>
   1ec04:	b	1dcec <__assert_fail@plt+0xc040>
   1ec08:	ldrb	r0, [sp, #182]	; 0xb6
   1ec0c:	cmp	r0, #0
   1ec10:	bne	1f028 <__assert_fail@plt+0xd37c>
   1ec14:	mov	r3, #0
   1ec18:	cmp	r4, #10
   1ec1c:	bne	1ec30 <__assert_fail@plt+0xcf84>
   1ec20:	ldrb	r0, [sp, #181]	; 0xb5
   1ec24:	cmp	r0, #0
   1ec28:	movwne	r0, #1
   1ec2c:	lsl	r3, r0, #1
   1ec30:	ldr	r0, [r9, #8]
   1ec34:	cmp	r0, #1
   1ec38:	blt	1dd2c <__assert_fail@plt+0xc080>
   1ec3c:	str	r6, [sp, #24]
   1ec40:	ldr	r6, [sp, #188]	; 0xbc
   1ec44:	ldr	r7, [r9, #12]
   1ec48:	mov	ip, r5
   1ec4c:	and	r1, r3, #8
   1ec50:	and	r2, r3, #2
   1ec54:	and	r3, r3, #1
   1ec58:	ldr	r6, [r6]
   1ec5c:	b	1ec6c <__assert_fail@plt+0xcfc0>
   1ec60:	add	r7, r7, #4
   1ec64:	subs	r0, r0, #1
   1ec68:	beq	1ed0c <__assert_fail@plt+0xd060>
   1ec6c:	ldr	r4, [r7]
   1ec70:	add	r5, r6, r4, lsl #3
   1ec74:	mov	lr, r4
   1ec78:	ldr	r5, [r5, #4]
   1ec7c:	uxtb	r4, r5
   1ec80:	cmp	r4, #2
   1ec84:	bne	1ec60 <__assert_fail@plt+0xcfb4>
   1ec88:	movw	r4, #65280	; 0xff00
   1ec8c:	movt	r4, #3
   1ec90:	tst	r5, r4
   1ec94:	beq	1ecd4 <__assert_fail@plt+0xd028>
   1ec98:	cmp	r3, #0
   1ec9c:	bne	1eca8 <__assert_fail@plt+0xcffc>
   1eca0:	ands	r4, r5, #1024	; 0x400
   1eca4:	bne	1ec60 <__assert_fail@plt+0xcfb4>
   1eca8:	cmp	r3, #0
   1ecac:	andsne	r4, r5, #2048	; 0x800
   1ecb0:	bne	1ec60 <__assert_fail@plt+0xcfb4>
   1ecb4:	cmp	r2, #0
   1ecb8:	bne	1ecc4 <__assert_fail@plt+0xd018>
   1ecbc:	ands	r4, r5, #8192	; 0x2000
   1ecc0:	bne	1ec60 <__assert_fail@plt+0xcfb4>
   1ecc4:	cmp	r1, #0
   1ecc8:	bne	1ecd4 <__assert_fail@plt+0xd028>
   1eccc:	ands	r5, r5, #32768	; 0x8000
   1ecd0:	bne	1ec60 <__assert_fail@plt+0xcfb4>
   1ecd4:	ldr	r1, [sp, #44]	; 0x2c
   1ecd8:	clz	r0, lr
   1ecdc:	ldr	r6, [sp, #24]
   1ece0:	cmp	lr, #0
   1ece4:	mov	sl, ip
   1ece8:	mov	r5, ip
   1ecec:	lsr	r0, r0, #5
   1ecf0:	movwne	lr, #1
   1ecf4:	mvneq	sl, #0
   1ecf8:	str	lr, [sp, #64]	; 0x40
   1ecfc:	orr	r0, r1, r0
   1ed00:	cmp	r0, #0
   1ed04:	bne	1dd34 <__assert_fail@plt+0xc088>
   1ed08:	b	1ea0c <__assert_fail@plt+0xcd60>
   1ed0c:	ldr	r6, [sp, #24]
   1ed10:	mov	r0, #0
   1ed14:	mov	r5, ip
   1ed18:	b	1dd30 <__assert_fail@plt+0xc084>
   1ed1c:	ldr	r3, [sp, #164]	; 0xa4
   1ed20:	movw	lr, #65280	; 0xff00
   1ed24:	movt	lr, #3
   1ed28:	b	1ee74 <__assert_fail@plt+0xd1c8>
   1ed2c:	ldr	r0, [sp, #192]	; 0xc0
   1ed30:	and	r0, r0, #2
   1ed34:	eor	r3, r0, #10
   1ed38:	b	1ee74 <__assert_fail@plt+0xd1c8>
   1ed3c:	mov	r0, r7
   1ed40:	bl	11afc <iswalnum@plt>
   1ed44:	mov	r3, #1
   1ed48:	cmp	r7, #95	; 0x5f
   1ed4c:	beq	1ed20 <__assert_fail@plt+0xd074>
   1ed50:	movw	lr, #65280	; 0xff00
   1ed54:	cmp	r0, #0
   1ed58:	movt	lr, #3
   1ed5c:	beq	1ee58 <__assert_fail@plt+0xd1ac>
   1ed60:	b	1ee74 <__assert_fail@plt+0xd1c8>
   1ed64:	ldr	r1, [r5]
   1ed68:	cmp	r1, #0
   1ed6c:	bne	1e8b4 <__assert_fail@plt+0xcc08>
   1ed70:	cmp	r6, #1
   1ed74:	blt	1ef7c <__assert_fail@plt+0xd2d0>
   1ed78:	ldr	r0, [sp, #204]	; 0xcc
   1ed7c:	lsl	r4, r6, #2
   1ed80:	mov	r9, r6
   1ed84:	sub	r0, r0, #4
   1ed88:	b	1eda0 <__assert_fail@plt+0xd0f4>
   1ed8c:	sub	r9, r9, #1
   1ed90:	sub	r4, r4, #4
   1ed94:	add	r1, r9, #1
   1ed98:	cmp	r1, #2
   1ed9c:	blt	1ef7c <__assert_fail@plt+0xd2d0>
   1eda0:	ldr	r6, [r0, r9, lsl #2]
   1eda4:	cmp	r6, #0
   1eda8:	beq	1ed8c <__assert_fail@plt+0xd0e0>
   1edac:	ldrb	r1, [r6, #52]	; 0x34
   1edb0:	tst	r1, #16
   1edb4:	beq	1ed8c <__assert_fail@plt+0xd0e0>
   1edb8:	sub	sl, r9, #1
   1edbc:	cmp	r9, #0
   1edc0:	str	r7, [sp, #24]
   1edc4:	str	r5, [sp, #20]
   1edc8:	ble	1ed1c <__assert_fail@plt+0xd070>
   1edcc:	ldr	r0, [sp, #152]	; 0x98
   1edd0:	movw	lr, #65280	; 0xff00
   1edd4:	movt	lr, #3
   1edd8:	add	r0, r0, #1
   1eddc:	cmp	r0, r9
   1ede0:	beq	1ed2c <__assert_fail@plt+0xd080>
   1ede4:	ldr	r0, [sp, #184]	; 0xb8
   1ede8:	cmp	r0, #2
   1edec:	blt	1ee18 <__assert_fail@plt+0xd16c>
   1edf0:	ldr	r0, [sp, #112]	; 0x70
   1edf4:	mov	r1, sl
   1edf8:	ldr	r7, [r0, r1, lsl #2]
   1edfc:	cmn	r7, #1
   1ee00:	bne	1ee4c <__assert_fail@plt+0xd1a0>
   1ee04:	sub	r1, r1, #1
   1ee08:	cmn	r1, #1
   1ee0c:	bne	1edf8 <__assert_fail@plt+0xd14c>
   1ee10:	ldr	r3, [sp, #164]	; 0xa4
   1ee14:	b	1ee74 <__assert_fail@plt+0xd1c8>
   1ee18:	ldr	r0, [sp, #108]	; 0x6c
   1ee1c:	ldr	r1, [sp, #172]	; 0xac
   1ee20:	mov	r3, #1
   1ee24:	add	r0, r0, r9
   1ee28:	ldrb	r0, [r0, #-1]
   1ee2c:	ubfx	r2, r0, #5, #3
   1ee30:	ldr	r1, [r1, r2, lsl #2]
   1ee34:	and	r2, r0, #31
   1ee38:	tst	r1, r3, lsl r2
   1ee3c:	moveq	r3, #0
   1ee40:	cmpeq	r0, #10
   1ee44:	bne	1ee74 <__assert_fail@plt+0xd1c8>
   1ee48:	b	1ee64 <__assert_fail@plt+0xd1b8>
   1ee4c:	ldrb	r0, [sp, #182]	; 0xb6
   1ee50:	cmp	r0, #0
   1ee54:	bne	1ed3c <__assert_fail@plt+0xd090>
   1ee58:	mov	r3, #0
   1ee5c:	cmp	r7, #10
   1ee60:	bne	1ee74 <__assert_fail@plt+0xd1c8>
   1ee64:	ldrb	r0, [sp, #181]	; 0xb5
   1ee68:	cmp	r0, #0
   1ee6c:	movwne	r0, #1
   1ee70:	lsl	r3, r0, #1
   1ee74:	ldr	r0, [r6, #8]
   1ee78:	cmp	r0, #1
   1ee7c:	blt	1ef08 <__assert_fail@plt+0xd25c>
   1ee80:	ldr	r7, [r6, #12]
   1ee84:	ldr	r6, [sp, #188]	; 0xbc
   1ee88:	and	ip, r3, #8
   1ee8c:	and	r2, r3, #2
   1ee90:	and	r3, r3, #1
   1ee94:	ldr	r6, [r6]
   1ee98:	b	1eea8 <__assert_fail@plt+0xd1fc>
   1ee9c:	add	r7, r7, #4
   1eea0:	subs	r0, r0, #1
   1eea4:	beq	1ef08 <__assert_fail@plt+0xd25c>
   1eea8:	ldr	r8, [r7]
   1eeac:	add	r5, r6, r8, lsl #3
   1eeb0:	ldr	r5, [r5, #4]
   1eeb4:	uxtb	r1, r5
   1eeb8:	cmp	r1, #2
   1eebc:	bne	1ee9c <__assert_fail@plt+0xd1f0>
   1eec0:	tst	r5, lr
   1eec4:	beq	1ef0c <__assert_fail@plt+0xd260>
   1eec8:	cmp	r3, #0
   1eecc:	bne	1eed8 <__assert_fail@plt+0xd22c>
   1eed0:	ands	r1, r5, #1024	; 0x400
   1eed4:	bne	1ee9c <__assert_fail@plt+0xd1f0>
   1eed8:	cmp	r3, #0
   1eedc:	andsne	r1, r5, #2048	; 0x800
   1eee0:	bne	1ee9c <__assert_fail@plt+0xd1f0>
   1eee4:	cmp	r2, #0
   1eee8:	bne	1eef4 <__assert_fail@plt+0xd248>
   1eeec:	ands	r1, r5, #8192	; 0x2000
   1eef0:	bne	1ee9c <__assert_fail@plt+0xd1f0>
   1eef4:	cmp	ip, #0
   1eef8:	bne	1ef0c <__assert_fail@plt+0xd260>
   1eefc:	ands	r1, r5, #32768	; 0x8000
   1ef00:	bne	1ee9c <__assert_fail@plt+0xd1f0>
   1ef04:	b	1ef0c <__assert_fail@plt+0xd260>
   1ef08:	mov	r8, #0
   1ef0c:	ldr	r5, [sp, #20]
   1ef10:	mov	r1, #0
   1ef14:	mov	r2, r4
   1ef18:	mov	r0, r5
   1ef1c:	bl	11b2c <memset@plt>
   1ef20:	sub	r0, fp, #188	; 0xbc
   1ef24:	ldr	r7, [sp, #24]
   1ef28:	mov	r1, #0
   1ef2c:	mov	r6, sl
   1ef30:	stm	r0, {r5, r8, sl}
   1ef34:	ldr	r0, [sp, #36]	; 0x24
   1ef38:	str	r7, [fp, #-192]	; 0xffffff40
   1ef3c:	str	r1, [r0]
   1ef40:	str	r1, [r0, #4]
   1ef44:	str	r1, [r0, #8]
   1ef48:	add	r0, sp, #104	; 0x68
   1ef4c:	sub	r1, fp, #192	; 0xc0
   1ef50:	bl	2b9c0 <__assert_fail@plt+0x19d14>
   1ef54:	mov	sl, r0
   1ef58:	mov	r0, #0
   1ef5c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1ef60:	cmp	sl, #0
   1ef64:	bne	1efd0 <__assert_fail@plt+0xd324>
   1ef68:	ldr	r0, [r7]
   1ef6c:	cmp	r0, #0
   1ef70:	beq	1ed64 <__assert_fail@plt+0xd0b8>
   1ef74:	sub	r6, r9, #1
   1ef78:	b	1e8b4 <__assert_fail@plt+0xcc08>
   1ef7c:	ldr	r4, [sp, #80]	; 0x50
   1ef80:	ldr	r9, [sp, #76]	; 0x4c
   1ef84:	mov	r0, r7
   1ef88:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1ef8c:	mov	r0, r5
   1ef90:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1ef94:	ldr	r8, [sp, #60]	; 0x3c
   1ef98:	add	r0, sp, #104	; 0x68
   1ef9c:	bl	27a30 <__assert_fail@plt+0x15d84>
   1efa0:	ldr	r0, [fp, #-200]	; 0xffffff38
   1efa4:	mov	sl, #1
   1efa8:	add	r6, r0, r8
   1efac:	cmp	r6, r9
   1efb0:	str	r6, [fp, #-200]	; 0xffffff38
   1efb4:	blt	200c4 <__assert_fail@plt+0xe418>
   1efb8:	ldr	r7, [sp, #100]	; 0x64
   1efbc:	ldr	r5, [sp, #92]	; 0x5c
   1efc0:	ldr	r2, [sp, #88]	; 0x58
   1efc4:	cmp	r4, r6
   1efc8:	bge	1d9dc <__assert_fail@plt+0xbd30>
   1efcc:	b	200c4 <__assert_fail@plt+0xe418>
   1efd0:	ldr	r4, [sp, #80]	; 0x50
   1efd4:	ldr	r9, [sp, #76]	; 0x4c
   1efd8:	str	r5, [sp, #12]
   1efdc:	mov	r0, r7
   1efe0:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1efe4:	ldr	r0, [sp, #12]
   1efe8:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1efec:	ldr	r8, [sp, #60]	; 0x3c
   1eff0:	ldr	lr, [sp, #96]	; 0x60
   1eff4:	cmp	sl, #0
   1eff8:	beq	1f070 <__assert_fail@plt+0xd3c4>
   1effc:	cmp	sl, #1
   1f000:	beq	1ef98 <__assert_fail@plt+0xd2ec>
   1f004:	b	200c4 <__assert_fail@plt+0xe418>
   1f008:	mov	lr, r5
   1f00c:	b	1e728 <__assert_fail@plt+0xca7c>
   1f010:	mov	sl, #12
   1f014:	b	1e63c <__assert_fail@plt+0xc990>
   1f018:	ldr	r0, [sp, #192]	; 0xc0
   1f01c:	and	r0, r0, #2
   1f020:	eor	r3, r0, #10
   1f024:	b	1ec30 <__assert_fail@plt+0xcf84>
   1f028:	mov	r0, r4
   1f02c:	bl	11afc <iswalnum@plt>
   1f030:	mov	r3, #1
   1f034:	cmp	r4, #95	; 0x5f
   1f038:	beq	1ec30 <__assert_fail@plt+0xcf84>
   1f03c:	cmp	r0, #0
   1f040:	beq	1ec14 <__assert_fail@plt+0xcf68>
   1f044:	b	1ec30 <__assert_fail@plt+0xcf84>
   1f048:	ldr	r0, [sp, #204]	; 0xcc
   1f04c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1f050:	mov	r0, #0
   1f054:	str	r8, [sp, #200]	; 0xc8
   1f058:	str	r7, [sp, #204]	; 0xcc
   1f05c:	str	r6, [sp, #196]	; 0xc4
   1f060:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1f064:	mov	r0, #0
   1f068:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1f06c:	ldr	lr, [sp, #96]	; 0x60
   1f070:	ldr	r4, [sp, #84]	; 0x54
   1f074:	cmp	r4, #0
   1f078:	beq	200c0 <__assert_fail@plt+0xe414>
   1f07c:	ldr	r5, [sp, #32]
   1f080:	ldr	r9, [fp, #16]
   1f084:	cmp	r4, #1
   1f088:	beq	1f0b0 <__assert_fail@plt+0xd404>
   1f08c:	mvn	r0, r5
   1f090:	mov	r1, #255	; 0xff
   1f094:	mov	r6, lr
   1f098:	add	r0, r0, r9
   1f09c:	lsl	r2, r0, #3
   1f0a0:	ldr	r0, [fp, #20]
   1f0a4:	add	r0, r0, #8
   1f0a8:	bl	11b2c <memset@plt>
   1f0ac:	mov	lr, r6
   1f0b0:	ldr	r2, [fp, #20]
   1f0b4:	cmp	r4, #2
   1f0b8:	mov	r0, #0
   1f0bc:	ldr	r1, [sp, #196]	; 0xc4
   1f0c0:	stm	r2, {r0, r1}
   1f0c4:	bcc	1ff90 <__assert_fail@plt+0xe2e4>
   1f0c8:	ldr	r0, [sp, #52]	; 0x34
   1f0cc:	ldrb	r0, [r0, #28]
   1f0d0:	ands	r0, r0, #16
   1f0d4:	bne	1ff90 <__assert_fail@plt+0xe2e4>
   1f0d8:	ldrb	r1, [lr, #88]	; 0x58
   1f0dc:	mov	r0, #0
   1f0e0:	tst	r1, #1
   1f0e4:	mov	r1, #0
   1f0e8:	beq	1f0fc <__assert_fail@plt+0xd450>
   1f0ec:	ldr	r2, [lr, #76]	; 0x4c
   1f0f0:	mov	r1, #0
   1f0f4:	cmp	r2, #0
   1f0f8:	movwgt	r1, #1
   1f0fc:	ldr	r2, [sp, #52]	; 0x34
   1f100:	cmp	r1, #0
   1f104:	mov	r1, #0
   1f108:	ldr	r7, [r2]
   1f10c:	movw	r2, #5584	; 0x15d0
   1f110:	movt	r2, #3
   1f114:	vldr	d16, [r2]
   1f118:	ldr	r2, [r2, #8]
   1f11c:	str	r2, [fp, #-40]	; 0xffffffd8
   1f120:	sub	r2, fp, #192	; 0xc0
   1f124:	add	r6, r2, #12
   1f128:	mov	r2, #16
   1f12c:	vstr	d16, [fp, #-48]	; 0xffffffd0
   1f130:	str	r6, [fp, #-184]	; 0xffffff48
   1f134:	str	r2, [fp, #-188]	; 0xffffff44
   1f138:	str	r0, [fp, #-192]	; 0xffffff40
   1f13c:	beq	1f15c <__assert_fail@plt+0xd4b0>
   1f140:	mov	r0, #48	; 0x30
   1f144:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1f148:	cmp	r0, #0
   1f14c:	str	r0, [fp, #-40]	; 0xffffffd8
   1f150:	beq	1ffac <__assert_fail@plt+0xe300>
   1f154:	ldr	r0, [fp, #-192]	; 0xffffff40
   1f158:	sub	r1, fp, #48	; 0x30
   1f15c:	ldr	sl, [r7, #72]	; 0x48
   1f160:	cmp	r0, r4
   1f164:	str	r1, [sp, #88]	; 0x58
   1f168:	str	r6, [sp, #72]	; 0x48
   1f16c:	str	r7, [sp, #76]	; 0x4c
   1f170:	bcs	1f25c <__assert_fail@plt+0xd5b0>
   1f174:	sub	r0, fp, #192	; 0xc0
   1f178:	mov	r1, r4
   1f17c:	mov	r2, r6
   1f180:	mov	r3, #8
   1f184:	bl	2f324 <__assert_fail@plt+0x1d678>
   1f188:	cmp	r0, #0
   1f18c:	bne	1f260 <__assert_fail@plt+0xd5b4>
   1f190:	ldr	r0, [fp, #-184]	; 0xffffff48
   1f194:	ldr	r1, [sp, #72]	; 0x48
   1f198:	cmp	r0, r1
   1f19c:	beq	1f1a4 <__assert_fail@plt+0xd4f8>
   1f1a0:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1f1a4:	ldr	r0, [sp, #72]	; 0x48
   1f1a8:	mov	sl, #12
   1f1ac:	str	r0, [fp, #-184]	; 0xffffff48
   1f1b0:	mov	r0, #16
   1f1b4:	str	r0, [fp, #-188]	; 0xffffff44
   1f1b8:	mov	r0, #0
   1f1bc:	str	r0, [fp, #-192]	; 0xffffff40
   1f1c0:	ldr	r0, [sp, #88]	; 0x58
   1f1c4:	cmp	r0, #0
   1f1c8:	beq	200c4 <__assert_fail@plt+0xe418>
   1f1cc:	ldr	r0, [sp, #88]	; 0x58
   1f1d0:	ldr	r1, [r0]
   1f1d4:	ldr	r0, [r0, #8]
   1f1d8:	cmp	r1, #1
   1f1dc:	blt	201e0 <__assert_fail@plt+0xe534>
   1f1e0:	ldr	r4, [sp, #88]	; 0x58
   1f1e4:	mov	r5, #0
   1f1e8:	mov	r6, #0
   1f1ec:	add	r0, r0, r5
   1f1f0:	ldr	r0, [r0, #20]
   1f1f4:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1f1f8:	ldr	r0, [r4, #8]
   1f1fc:	add	r0, r0, r5
   1f200:	ldr	r0, [r0, #8]
   1f204:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1f208:	ldr	r1, [r4]
   1f20c:	ldr	r0, [r4, #8]
   1f210:	add	r6, r6, #1
   1f214:	add	r5, r5, #24
   1f218:	cmp	r6, r1
   1f21c:	blt	1f1ec <__assert_fail@plt+0xd540>
   1f220:	b	201e0 <__assert_fail@plt+0xe534>
   1f224:	ldr	r1, [r3, #8]
   1f228:	cmp	r1, #0
   1f22c:	beq	1f23c <__assert_fail@plt+0xd590>
   1f230:	ldrsb	r1, [r4, #28]
   1f234:	cmp	r1, #0
   1f238:	bmi	1d6a4 <__assert_fail@plt+0xb9f8>
   1f23c:	mov	r0, #0
   1f240:	cmp	r6, #0
   1f244:	str	r0, [sp, #72]	; 0x48
   1f248:	beq	1ffa4 <__assert_fail@plt+0xe2f8>
   1f24c:	cmp	ip, #0
   1f250:	mov	r6, #0
   1f254:	bne	20118 <__assert_fail@plt+0xe46c>
   1f258:	b	1d6a8 <__assert_fail@plt+0xb9fc>
   1f25c:	str	r4, [fp, #-192]	; 0xffffff40
   1f260:	ldr	r6, [fp, #20]
   1f264:	ldr	r0, [fp, #-184]	; 0xffffff48
   1f268:	lsl	r2, r4, #3
   1f26c:	str	r2, [sp, #64]	; 0x40
   1f270:	mov	r1, r6
   1f274:	str	r0, [sp, #68]	; 0x44
   1f278:	bl	118ec <memcpy@plt>
   1f27c:	ldr	r3, [r6]
   1f280:	ldr	r0, [r6, #4]
   1f284:	mov	r6, #0
   1f288:	cmp	r3, r0
   1f28c:	ble	1f334 <__assert_fail@plt+0xd688>
   1f290:	mov	r0, r6
   1f294:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1f298:	ldr	r0, [fp, #-184]	; 0xffffff48
   1f29c:	ldr	r6, [sp, #72]	; 0x48
   1f2a0:	cmp	r0, r6
   1f2a4:	beq	1f2ac <__assert_fail@plt+0xd600>
   1f2a8:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1f2ac:	str	r6, [fp, #-184]	; 0xffffff48
   1f2b0:	ldr	r6, [sp, #88]	; 0x58
   1f2b4:	ldr	lr, [sp, #96]	; 0x60
   1f2b8:	mov	r0, #16
   1f2bc:	str	r0, [fp, #-188]	; 0xffffff44
   1f2c0:	mov	r0, #0
   1f2c4:	str	r0, [fp, #-192]	; 0xffffff40
   1f2c8:	cmp	r6, #0
   1f2cc:	beq	1ff90 <__assert_fail@plt+0xe2e4>
   1f2d0:	ldr	r1, [r6]
   1f2d4:	ldr	r0, [r6, #8]
   1f2d8:	mov	r7, lr
   1f2dc:	cmp	r1, #1
   1f2e0:	blt	1f320 <__assert_fail@plt+0xd674>
   1f2e4:	mov	r4, #0
   1f2e8:	mov	r5, #0
   1f2ec:	add	r0, r0, r4
   1f2f0:	ldr	r0, [r0, #20]
   1f2f4:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1f2f8:	ldr	r0, [r6, #8]
   1f2fc:	add	r0, r0, r4
   1f300:	ldr	r0, [r0, #8]
   1f304:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1f308:	ldr	r1, [r6]
   1f30c:	ldr	r0, [r6, #8]
   1f310:	add	r5, r5, #1
   1f314:	add	r4, r4, #24
   1f318:	cmp	r5, r1
   1f31c:	blt	1f2ec <__assert_fail@plt+0xd640>
   1f320:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1f324:	ldr	r5, [sp, #32]
   1f328:	ldr	r4, [sp, #84]	; 0x54
   1f32c:	mov	lr, r7
   1f330:	b	1ff90 <__assert_fail@plt+0xe2e4>
   1f334:	ldr	r0, [fp, #20]
   1f338:	mov	r8, #1
   1f33c:	mov	ip, #0
   1f340:	mov	r6, #0
   1f344:	mov	lr, #0
   1f348:	add	r0, r0, #4
   1f34c:	str	r0, [sp, #52]	; 0x34
   1f350:	lsl	r0, r4, #4
   1f354:	str	r0, [sp, #44]	; 0x2c
   1f358:	mov	r0, #0
   1f35c:	str	r0, [sp, #60]	; 0x3c
   1f360:	ldr	r0, [sp, #76]	; 0x4c
   1f364:	ldr	r0, [r0]
   1f368:	add	r1, r0, sl, lsl #3
   1f36c:	ldr	r7, [r1, #4]
   1f370:	uxtb	r2, r7
   1f374:	cmp	r2, #9
   1f378:	beq	1f3a8 <__assert_fail@plt+0xd6fc>
   1f37c:	cmp	r2, #8
   1f380:	bne	1f430 <__assert_fail@plt+0xd784>
   1f384:	ldr	r0, [r0, sl, lsl #3]
   1f388:	add	r0, r0, #1
   1f38c:	cmp	r0, r4
   1f390:	bge	1f430 <__assert_fail@plt+0xd784>
   1f394:	ldr	r1, [fp, #20]
   1f398:	str	r3, [r1, r0, lsl #3]!
   1f39c:	mvn	r0, #0
   1f3a0:	str	r0, [r1, #4]
   1f3a4:	b	1f430 <__assert_fail@plt+0xd784>
   1f3a8:	ldr	r0, [r0, sl, lsl #3]
   1f3ac:	add	r0, r0, #1
   1f3b0:	cmp	r0, r4
   1f3b4:	bge	1f430 <__assert_fail@plt+0xd784>
   1f3b8:	ldr	r1, [fp, #20]
   1f3bc:	ldr	r2, [r1, r0, lsl #3]
   1f3c0:	cmp	r2, r3
   1f3c4:	bge	1f3d8 <__assert_fail@plt+0xd72c>
   1f3c8:	add	r0, r1, r0, lsl #3
   1f3cc:	str	r3, [r0, #4]
   1f3d0:	ldr	r0, [sp, #68]	; 0x44
   1f3d4:	b	1f3f8 <__assert_fail@plt+0xd74c>
   1f3d8:	tst	r7, #524288	; 0x80000
   1f3dc:	beq	1f424 <__assert_fail@plt+0xd778>
   1f3e0:	ldr	r1, [sp, #68]	; 0x44
   1f3e4:	ldr	r1, [r1, r0, lsl #3]
   1f3e8:	cmn	r1, #1
   1f3ec:	beq	1f424 <__assert_fail@plt+0xd778>
   1f3f0:	ldr	r0, [fp, #20]
   1f3f4:	ldr	r1, [sp, #68]	; 0x44
   1f3f8:	ldr	r2, [sp, #64]	; 0x40
   1f3fc:	str	r6, [sp, #48]	; 0x30
   1f400:	mov	r7, r3
   1f404:	mov	r6, ip
   1f408:	str	lr, [sp, #56]	; 0x38
   1f40c:	bl	118ec <memcpy@plt>
   1f410:	mov	ip, r6
   1f414:	ldr	lr, [sp, #56]	; 0x38
   1f418:	ldr	r6, [sp, #48]	; 0x30
   1f41c:	mov	r3, r7
   1f420:	b	1f430 <__assert_fail@plt+0xd784>
   1f424:	ldr	r1, [fp, #20]
   1f428:	add	r0, r1, r0, lsl #3
   1f42c:	str	r3, [r0, #4]
   1f430:	ldr	r0, [fp, #20]
   1f434:	ldr	r0, [r0, #4]
   1f438:	cmp	r3, r0
   1f43c:	ldreq	r0, [sp, #200]	; 0xc8
   1f440:	cmpeq	sl, r0
   1f444:	beq	1f4b0 <__assert_fail@plt+0xd804>
   1f448:	ldr	r0, [sp, #88]	; 0x58
   1f44c:	cmp	r0, #0
   1f450:	beq	1f580 <__assert_fail@plt+0xd8d4>
   1f454:	cmp	lr, #1
   1f458:	blt	1f580 <__assert_fail@plt+0xd8d4>
   1f45c:	mov	r0, lr
   1f460:	mov	lr, r6
   1f464:	subs	r1, r0, #1
   1f468:	str	r0, [sp, #56]	; 0x38
   1f46c:	beq	1f498 <__assert_fail@plt+0xd7ec>
   1f470:	mov	r0, #0
   1f474:	add	r2, r0, r1
   1f478:	lsr	r6, r2, #1
   1f47c:	ldr	r7, [ip, r6, lsl #2]
   1f480:	cmp	r7, sl
   1f484:	addlt	r0, r8, r2, lsr #1
   1f488:	movge	r1, r6
   1f48c:	cmp	r0, r1
   1f490:	bcc	1f474 <__assert_fail@plt+0xd7c8>
   1f494:	b	1f49c <__assert_fail@plt+0xd7f0>
   1f498:	mov	r0, #0
   1f49c:	ldr	r0, [ip, r0, lsl #2]
   1f4a0:	mov	r6, lr
   1f4a4:	ldr	lr, [sp, #56]	; 0x38
   1f4a8:	cmp	r0, sl
   1f4ac:	bne	1f580 <__assert_fail@plt+0xd8d4>
   1f4b0:	ldr	r7, [sp, #88]	; 0x58
   1f4b4:	cmp	r7, #0
   1f4b8:	beq	1fef4 <__assert_fail@plt+0xe248>
   1f4bc:	ldr	r1, [sp, #52]	; 0x34
   1f4c0:	mov	r0, r4
   1f4c4:	b	1f4d4 <__assert_fail@plt+0xd828>
   1f4c8:	subs	r0, r0, #1
   1f4cc:	add	r1, r1, #8
   1f4d0:	beq	1fef4 <__assert_fail@plt+0xe248>
   1f4d4:	ldr	r2, [r1, #-4]
   1f4d8:	cmp	r2, #0
   1f4dc:	bmi	1f4c8 <__assert_fail@plt+0xd81c>
   1f4e0:	ldr	r2, [r1]
   1f4e4:	cmn	r2, #1
   1f4e8:	bne	1f4c8 <__assert_fail@plt+0xd81c>
   1f4ec:	ldr	r0, [r7]
   1f4f0:	cmp	r0, #0
   1f4f4:	beq	1fef4 <__assert_fail@plt+0xe248>
   1f4f8:	sub	r0, r0, #1
   1f4fc:	mov	sl, r4
   1f500:	mov	r9, r6
   1f504:	ldr	r6, [sp, #64]	; 0x40
   1f508:	str	r0, [r7]
   1f50c:	add	r5, r0, r0, lsl #1
   1f510:	ldr	r4, [r7, #8]
   1f514:	mov	r2, r6
   1f518:	ldr	r0, [r4, r5, lsl #3]!
   1f51c:	ldr	r1, [r4, #8]
   1f520:	str	r0, [sp, #80]	; 0x50
   1f524:	ldr	r0, [fp, #20]
   1f528:	bl	118ec <memcpy@plt>
   1f52c:	ldr	r0, [r4, #8]
   1f530:	mov	r2, r6
   1f534:	add	r1, r0, sl, lsl #3
   1f538:	ldr	r0, [sp, #68]	; 0x44
   1f53c:	bl	118ec <memcpy@plt>
   1f540:	mov	r0, r9
   1f544:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1f548:	ldr	r0, [r7, #8]
   1f54c:	add	r0, r0, r5, lsl #3
   1f550:	ldr	r0, [r0, #8]
   1f554:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1f558:	ldr	r0, [r7, #8]
   1f55c:	ldr	r3, [sp, #80]	; 0x50
   1f560:	add	r0, r0, r5, lsl #3
   1f564:	ldr	r5, [sp, #32]
   1f568:	ldr	r6, [r0, #20]
   1f56c:	ldr	r1, [r0, #12]
   1f570:	ldr	sl, [r0, #4]
   1f574:	ldr	lr, [r0, #16]
   1f578:	mov	ip, r6
   1f57c:	str	r1, [sp, #60]	; 0x3c
   1f580:	ldr	r4, [sp, #188]	; 0xbc
   1f584:	str	r3, [sp, #80]	; 0x50
   1f588:	ldr	r0, [r4]
   1f58c:	add	r1, r0, sl, lsl #3
   1f590:	ldr	r1, [r1, #4]
   1f594:	tst	r1, #8
   1f598:	bne	1f630 <__assert_fail@plt+0xd984>
   1f59c:	tst	r1, #1048576	; 0x100000
   1f5a0:	bne	1f6a8 <__assert_fail@plt+0xd9fc>
   1f5a4:	uxtb	r1, r1
   1f5a8:	cmp	r1, #4
   1f5ac:	bne	1f6d0 <__assert_fail@plt+0xda24>
   1f5b0:	ldr	r0, [r0, sl, lsl #3]
   1f5b4:	ldr	r1, [sp, #84]	; 0x54
   1f5b8:	mov	r7, #0
   1f5bc:	add	r0, r0, #1
   1f5c0:	cmp	r0, r1
   1f5c4:	bge	1f5d8 <__assert_fail@plt+0xd92c>
   1f5c8:	ldr	r1, [fp, #20]
   1f5cc:	ldr	r2, [r1, r0, lsl #3]!
   1f5d0:	ldr	r1, [r1, #4]
   1f5d4:	sub	r7, r1, r2
   1f5d8:	ldr	r1, [sp, #88]	; 0x58
   1f5dc:	cmp	r1, #0
   1f5e0:	beq	1f9b8 <__assert_fail@plt+0xdd0c>
   1f5e4:	ldr	r1, [sp, #84]	; 0x54
   1f5e8:	cmp	r0, r1
   1f5ec:	bge	1f628 <__assert_fail@plt+0xd97c>
   1f5f0:	ldr	r2, [fp, #20]
   1f5f4:	ldr	r1, [r2, r0, lsl #3]
   1f5f8:	cmn	r1, #1
   1f5fc:	beq	1f628 <__assert_fail@plt+0xd97c>
   1f600:	add	r0, r2, r0, lsl #3
   1f604:	ldr	r0, [r0, #4]
   1f608:	cmn	r0, #1
   1f60c:	beq	1f628 <__assert_fail@plt+0xd97c>
   1f610:	cmp	r7, #0
   1f614:	beq	1f9dc <__assert_fail@plt+0xdd30>
   1f618:	ldr	r0, [sp, #132]	; 0x84
   1f61c:	sub	r0, r0, r3
   1f620:	cmp	r0, r7
   1f624:	bge	1fc3c <__assert_fail@plt+0xdf90>
   1f628:	ldr	r7, [sp, #88]	; 0x58
   1f62c:	b	1f8b4 <__assert_fail@plt+0xdc08>
   1f630:	ldr	r0, [sp, #204]	; 0xcc
   1f634:	ldr	r4, [r4, #20]
   1f638:	cmp	lr, #1
   1f63c:	ldr	r0, [r0, r3, lsl #2]
   1f640:	str	r0, [sp, #100]	; 0x64
   1f644:	blt	1f688 <__assert_fail@plt+0xd9dc>
   1f648:	mov	r0, #0
   1f64c:	subs	r1, lr, #1
   1f650:	beq	1f674 <__assert_fail@plt+0xd9c8>
   1f654:	add	r2, r0, r1
   1f658:	lsr	r3, r2, #1
   1f65c:	ldr	r7, [ip, r3, lsl #2]
   1f660:	cmp	r7, sl
   1f664:	addlt	r0, r8, r2, lsr #1
   1f668:	movge	r1, r3
   1f66c:	cmp	r0, r1
   1f670:	bcc	1f654 <__assert_fail@plt+0xd9a8>
   1f674:	ldr	r0, [ip, r0, lsl #2]
   1f678:	cmp	r0, sl
   1f67c:	bne	1f688 <__assert_fail@plt+0xd9dc>
   1f680:	str	lr, [sp, #56]	; 0x38
   1f684:	b	1f7c8 <__assert_fail@plt+0xdb1c>
   1f688:	ldr	r0, [sp, #60]	; 0x3c
   1f68c:	cmp	r0, #0
   1f690:	beq	1f79c <__assert_fail@plt+0xdaf0>
   1f694:	cmp	lr, #0
   1f698:	bne	1fc94 <__assert_fail@plt+0xdfe8>
   1f69c:	mov	r0, #1
   1f6a0:	str	sl, [ip]
   1f6a4:	b	1f7c4 <__assert_fail@plt+0xdb18>
   1f6a8:	mov	r0, r4
   1f6ac:	mov	r1, sl
   1f6b0:	add	r2, sp, #104	; 0x68
   1f6b4:	mov	r9, ip
   1f6b8:	bl	2a318 <__assert_fail@plt+0x1866c>
   1f6bc:	ldr	r3, [sp, #80]	; 0x50
   1f6c0:	mov	r1, r0
   1f6c4:	cmp	r1, #0
   1f6c8:	mov	ip, r9
   1f6cc:	bne	1f704 <__assert_fail@plt+0xda58>
   1f6d0:	ldr	r0, [r4]
   1f6d4:	mov	r2, r3
   1f6d8:	mov	r7, r6
   1f6dc:	mov	r6, ip
   1f6e0:	add	r1, r0, sl, lsl #3
   1f6e4:	add	r0, sp, #104	; 0x68
   1f6e8:	bl	2a67c <__assert_fail@plt+0x189d0>
   1f6ec:	ldr	r3, [sp, #80]	; 0x50
   1f6f0:	mov	ip, r6
   1f6f4:	mov	r6, r7
   1f6f8:	mov	r1, #1
   1f6fc:	cmp	r0, #0
   1f700:	beq	1f8a8 <__assert_fail@plt+0xdbfc>
   1f704:	ldr	r0, [r4, #12]
   1f708:	ldr	r7, [sp, #88]	; 0x58
   1f70c:	add	r3, r1, r3
   1f710:	ldr	sl, [r0, sl, lsl #2]
   1f714:	cmp	r7, #0
   1f718:	beq	1f950 <__assert_fail@plt+0xdca4>
   1f71c:	ldr	r0, [sp, #196]	; 0xc4
   1f720:	cmp	r3, r0
   1f724:	bgt	1f8b4 <__assert_fail@plt+0xdc08>
   1f728:	ldr	r0, [sp, #204]	; 0xcc
   1f72c:	ldr	r0, [r0, r3, lsl #2]
   1f730:	cmp	r0, #0
   1f734:	beq	1f8b4 <__assert_fail@plt+0xdc08>
   1f738:	ldr	r1, [r0, #8]
   1f73c:	cmp	r1, #1
   1f740:	blt	1f8b4 <__assert_fail@plt+0xdc08>
   1f744:	ldr	r0, [r0, #12]
   1f748:	mov	lr, ip
   1f74c:	mov	ip, r6
   1f750:	subs	r1, r1, #1
   1f754:	mov	r2, #0
   1f758:	beq	1f780 <__assert_fail@plt+0xdad4>
   1f75c:	mov	r2, #0
   1f760:	add	r4, r2, r1
   1f764:	lsr	r7, r4, #1
   1f768:	ldr	r6, [r0, r7, lsl #2]
   1f76c:	cmp	r6, sl
   1f770:	addlt	r2, r8, r4, lsr #1
   1f774:	movge	r1, r7
   1f778:	cmp	r2, r1
   1f77c:	bcc	1f760 <__assert_fail@plt+0xdab4>
   1f780:	ldr	r0, [r0, r2, lsl #2]
   1f784:	mov	r6, ip
   1f788:	mov	ip, lr
   1f78c:	mov	lr, #0
   1f790:	cmp	r0, sl
   1f794:	beq	1fb58 <__assert_fail@plt+0xdeac>
   1f798:	b	1f8a8 <__assert_fail@plt+0xdbfc>
   1f79c:	mov	r0, #4
   1f7a0:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1f7a4:	cmp	r0, #0
   1f7a8:	beq	20288 <__assert_fail@plt+0xe5dc>
   1f7ac:	mov	r6, r0
   1f7b0:	str	sl, [r0]
   1f7b4:	mov	r0, #1
   1f7b8:	str	r0, [sp, #60]	; 0x3c
   1f7bc:	mov	r0, #1
   1f7c0:	mov	ip, r6
   1f7c4:	str	r0, [sp, #56]	; 0x38
   1f7c8:	add	r0, sl, sl, lsl #1
   1f7cc:	add	r1, r4, r0, lsl #2
   1f7d0:	ldr	lr, [r1, #4]
   1f7d4:	cmp	lr, #1
   1f7d8:	blt	1f8a8 <__assert_fail@plt+0xdbfc>
   1f7dc:	ldr	r0, [sp, #100]	; 0x64
   1f7e0:	str	ip, [sp, #40]	; 0x28
   1f7e4:	ldr	ip, [r1, #8]
   1f7e8:	str	r6, [sp, #48]	; 0x30
   1f7ec:	mov	r6, #0
   1f7f0:	ldr	r2, [r0, #8]
   1f7f4:	mvn	r0, #0
   1f7f8:	str	r0, [sp, #92]	; 0x5c
   1f7fc:	sub	sl, r2, #1
   1f800:	cmp	r2, #1
   1f804:	bge	1f824 <__assert_fail@plt+0xdb78>
   1f808:	b	1f810 <__assert_fail@plt+0xdb64>
   1f80c:	ldr	r5, [sp, #32]
   1f810:	add	r6, r6, #1
   1f814:	cmp	r6, lr
   1f818:	beq	1f884 <__assert_fail@plt+0xdbd8>
   1f81c:	cmp	r2, #1
   1f820:	blt	1f810 <__assert_fail@plt+0xdb64>
   1f824:	ldr	r0, [sp, #100]	; 0x64
   1f828:	ldr	r4, [ip, r6, lsl #2]
   1f82c:	mov	r5, #0
   1f830:	cmp	sl, #0
   1f834:	ldr	r7, [r0, #12]
   1f838:	beq	1f860 <__assert_fail@plt+0xdbb4>
   1f83c:	mov	r3, sl
   1f840:	add	r0, r5, r3
   1f844:	lsr	r1, r0, #1
   1f848:	ldr	r9, [r7, r1, lsl #2]
   1f84c:	cmp	r9, r4
   1f850:	addlt	r5, r8, r0, lsr #1
   1f854:	movge	r3, r1
   1f858:	cmp	r5, r3
   1f85c:	bcc	1f840 <__assert_fail@plt+0xdb94>
   1f860:	ldr	r0, [r7, r5, lsl #2]
   1f864:	cmp	r0, r4
   1f868:	bne	1f80c <__assert_fail@plt+0xdb60>
   1f86c:	ldr	r0, [sp, #92]	; 0x5c
   1f870:	ldr	r5, [sp, #32]
   1f874:	cmn	r0, #1
   1f878:	bne	1f960 <__assert_fail@plt+0xdcb4>
   1f87c:	str	r4, [sp, #92]	; 0x5c
   1f880:	b	1f810 <__assert_fail@plt+0xdb64>
   1f884:	ldr	r6, [sp, #48]	; 0x30
   1f888:	ldr	r3, [sp, #80]	; 0x50
   1f88c:	ldr	ip, [sp, #40]	; 0x28
   1f890:	ldr	lr, [sp, #56]	; 0x38
   1f894:	ldr	sl, [sp, #92]	; 0x5c
   1f898:	cmn	sl, #1
   1f89c:	bgt	1fb60 <__assert_fail@plt+0xdeb4>
   1f8a0:	cmn	sl, #2
   1f8a4:	beq	201ec <__assert_fail@plt+0xe540>
   1f8a8:	ldr	r7, [sp, #88]	; 0x58
   1f8ac:	cmp	r7, #0
   1f8b0:	beq	2014c <__assert_fail@plt+0xe4a0>
   1f8b4:	ldr	r0, [r7]
   1f8b8:	cmp	r0, #0
   1f8bc:	beq	20124 <__assert_fail@plt+0xe478>
   1f8c0:	sub	r0, r0, #1
   1f8c4:	mov	sl, r6
   1f8c8:	ldr	r6, [sp, #64]	; 0x40
   1f8cc:	ldr	r9, [fp, #20]
   1f8d0:	str	r0, [r7]
   1f8d4:	add	r5, r0, r0, lsl #1
   1f8d8:	ldr	r4, [r7, #8]
   1f8dc:	mov	r2, r6
   1f8e0:	ldr	r0, [r4, r5, lsl #3]!
   1f8e4:	ldr	r1, [r4, #8]
   1f8e8:	str	r0, [sp, #80]	; 0x50
   1f8ec:	mov	r0, r9
   1f8f0:	bl	118ec <memcpy@plt>
   1f8f4:	ldr	r0, [r4, #8]
   1f8f8:	ldr	r4, [sp, #84]	; 0x54
   1f8fc:	mov	r2, r6
   1f900:	add	r1, r0, r4, lsl #3
   1f904:	ldr	r0, [sp, #68]	; 0x44
   1f908:	bl	118ec <memcpy@plt>
   1f90c:	mov	r0, sl
   1f910:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1f914:	ldr	r0, [r7, #8]
   1f918:	add	r0, r0, r5, lsl #3
   1f91c:	ldr	r0, [r0, #8]
   1f920:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1f924:	ldr	r0, [r7, #8]
   1f928:	ldr	r3, [sp, #80]	; 0x50
   1f92c:	add	r0, r0, r5, lsl #3
   1f930:	ldr	r5, [sp, #32]
   1f934:	ldr	r6, [r0, #20]
   1f938:	ldr	r1, [r0, #12]
   1f93c:	ldr	sl, [r0, #4]
   1f940:	ldr	lr, [r0, #16]
   1f944:	mov	ip, r6
   1f948:	str	r1, [sp, #60]	; 0x3c
   1f94c:	b	1fb68 <__assert_fail@plt+0xdebc>
   1f950:	mov	lr, #0
   1f954:	cmn	sl, #1
   1f958:	bgt	1fb60 <__assert_fail@plt+0xdeb4>
   1f95c:	b	1f8a0 <__assert_fail@plt+0xdbf4>
   1f960:	ldr	lr, [sp, #56]	; 0x38
   1f964:	ldr	sl, [sp, #88]	; 0x58
   1f968:	ldr	r6, [sp, #48]	; 0x30
   1f96c:	ldr	r3, [sp, #80]	; 0x50
   1f970:	ldr	ip, [sp, #40]	; 0x28
   1f974:	cmp	lr, #1
   1f978:	blt	1fa24 <__assert_fail@plt+0xdd78>
   1f97c:	mov	r0, lr
   1f980:	mov	r9, lr
   1f984:	mov	r0, #0
   1f988:	subs	r1, lr, #1
   1f98c:	beq	1f9fc <__assert_fail@plt+0xdd50>
   1f990:	ldr	lr, [sp, #92]	; 0x5c
   1f994:	add	r2, r0, r1
   1f998:	lsr	r6, r2, #1
   1f99c:	ldr	r7, [ip, r6, lsl #2]
   1f9a0:	cmp	r7, lr
   1f9a4:	addlt	r0, r8, r2, lsr #1
   1f9a8:	movge	r1, r6
   1f9ac:	cmp	r0, r1
   1f9b0:	bcc	1f994 <__assert_fail@plt+0xdce8>
   1f9b4:	b	1fa00 <__assert_fail@plt+0xdd54>
   1f9b8:	cmp	r7, #0
   1f9bc:	beq	1f9dc <__assert_fail@plt+0xdd30>
   1f9c0:	ldr	r0, [r4, #12]
   1f9c4:	add	r3, r7, r3
   1f9c8:	mov	lr, #0
   1f9cc:	ldr	sl, [r0, sl, lsl #2]
   1f9d0:	cmn	sl, #1
   1f9d4:	bgt	1fb60 <__assert_fail@plt+0xdeb4>
   1f9d8:	b	1f8a0 <__assert_fail@plt+0xdbf4>
   1f9dc:	ldr	r0, [sp, #60]	; 0x3c
   1f9e0:	cmp	r0, #0
   1f9e4:	beq	1fb7c <__assert_fail@plt+0xded0>
   1f9e8:	cmp	lr, #0
   1f9ec:	bne	1fdc0 <__assert_fail@plt+0xe114>
   1f9f0:	str	sl, [ip]
   1f9f4:	mov	r2, #1
   1f9f8:	b	1fba8 <__assert_fail@plt+0xdefc>
   1f9fc:	ldr	lr, [sp, #92]	; 0x5c
   1fa00:	ldr	r0, [ip, r0, lsl #2]
   1fa04:	ldr	r6, [sp, #48]	; 0x30
   1fa08:	cmp	r0, lr
   1fa0c:	mov	lr, r9
   1fa10:	bne	1fa24 <__assert_fail@plt+0xdd78>
   1fa14:	mov	sl, r4
   1fa18:	cmn	sl, #1
   1fa1c:	bgt	1fb60 <__assert_fail@plt+0xdeb4>
   1fa20:	b	1f8a0 <__assert_fail@plt+0xdbf4>
   1fa24:	cmp	sl, #0
   1fa28:	beq	1f894 <__assert_fail@plt+0xdbe8>
   1fa2c:	ldr	r6, [sl]
   1fa30:	ldr	r0, [sl, #4]
   1fa34:	add	r1, r6, #1
   1fa38:	cmp	r1, r0
   1fa3c:	str	r1, [sl]
   1fa40:	bne	1fa74 <__assert_fail@plt+0xddc8>
   1fa44:	ldr	r0, [sl, #8]
   1fa48:	add	r1, r1, r1, lsl #1
   1fa4c:	lsl	r1, r1, #4
   1fa50:	bl	1b64c <__assert_fail@plt+0x99a0>
   1fa54:	cmp	r0, #0
   1fa58:	beq	201e8 <__assert_fail@plt+0xe53c>
   1fa5c:	str	r0, [sl, #8]
   1fa60:	ldr	r3, [sp, #80]	; 0x50
   1fa64:	ldr	r1, [sl, #4]
   1fa68:	lsl	r1, r1, #1
   1fa6c:	str	r1, [sl, #4]
   1fa70:	b	1fa78 <__assert_fail@plt+0xddcc>
   1fa74:	ldr	r0, [sl, #8]
   1fa78:	add	r6, r6, r6, lsl #1
   1fa7c:	str	r3, [r0, r6, lsl #3]!
   1fa80:	str	r4, [r0, #4]
   1fa84:	ldr	r0, [sp, #44]	; 0x2c
   1fa88:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1fa8c:	ldr	r1, [sl, #8]
   1fa90:	cmp	r0, #0
   1fa94:	add	r4, r1, r6, lsl #3
   1fa98:	str	r0, [r4, #8]!
   1fa9c:	beq	201e8 <__assert_fail@plt+0xe53c>
   1faa0:	ldr	r5, [sp, #64]	; 0x40
   1faa4:	ldr	r1, [fp, #20]
   1faa8:	mov	r2, r5
   1faac:	bl	118ec <memcpy@plt>
   1fab0:	ldr	r0, [r4]
   1fab4:	ldr	r1, [sp, #84]	; 0x54
   1fab8:	mov	r2, r5
   1fabc:	add	r0, r0, r1, lsl #3
   1fac0:	ldr	r1, [sp, #68]	; 0x44
   1fac4:	bl	118ec <memcpy@plt>
   1fac8:	ldr	r0, [sl, #8]
   1facc:	ldr	lr, [sp, #56]	; 0x38
   1fad0:	add	r7, r0, r6, lsl #3
   1fad4:	cmp	lr, #1
   1fad8:	mov	r6, r7
   1fadc:	str	lr, [r6, #16]!
   1fae0:	sub	r5, r6, #4
   1fae4:	blt	1fb34 <__assert_fail@plt+0xde88>
   1fae8:	lsl	r4, lr, #2
   1faec:	str	lr, [r5]
   1faf0:	mov	r0, r4
   1faf4:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1faf8:	ldr	sl, [sp, #92]	; 0x5c
   1fafc:	cmp	r0, #0
   1fb00:	str	r0, [r7, #20]
   1fb04:	beq	20290 <__assert_fail@plt+0xe5e4>
   1fb08:	ldr	r6, [sp, #48]	; 0x30
   1fb0c:	mov	r2, r4
   1fb10:	mov	r1, r6
   1fb14:	bl	118ec <memcpy@plt>
   1fb18:	ldr	r5, [sp, #32]
   1fb1c:	ldr	r3, [sp, #80]	; 0x50
   1fb20:	ldr	ip, [sp, #40]	; 0x28
   1fb24:	ldr	lr, [sp, #56]	; 0x38
   1fb28:	cmn	sl, #1
   1fb2c:	bgt	1fb60 <__assert_fail@plt+0xdeb4>
   1fb30:	b	1f8a0 <__assert_fail@plt+0xdbf4>
   1fb34:	mov	r0, #0
   1fb38:	ldr	r6, [sp, #48]	; 0x30
   1fb3c:	ldr	r3, [sp, #80]	; 0x50
   1fb40:	ldr	ip, [sp, #40]	; 0x28
   1fb44:	ldr	sl, [sp, #92]	; 0x5c
   1fb48:	str	r0, [r5]
   1fb4c:	str	r0, [r5, #4]
   1fb50:	str	r0, [r5, #8]
   1fb54:	ldr	r5, [sp, #32]
   1fb58:	cmn	sl, #1
   1fb5c:	ble	1f8a0 <__assert_fail@plt+0xdbf4>
   1fb60:	ldr	r4, [sp, #84]	; 0x54
   1fb64:	ldr	r9, [fp, #20]
   1fb68:	ldr	r0, [r9, #4]
   1fb6c:	ldr	r9, [fp, #16]
   1fb70:	cmp	r3, r0
   1fb74:	ble	1f360 <__assert_fail@plt+0xd6b4>
   1fb78:	b	1f290 <__assert_fail@plt+0xd5e4>
   1fb7c:	mov	r0, #4
   1fb80:	bl	1b5b8 <__assert_fail@plt+0x990c>
   1fb84:	cmp	r0, #0
   1fb88:	beq	20288 <__assert_fail@plt+0xe5dc>
   1fb8c:	ldr	r3, [sp, #80]	; 0x50
   1fb90:	mov	r6, r0
   1fb94:	str	sl, [r0]
   1fb98:	mov	r0, #1
   1fb9c:	mov	r2, #1
   1fba0:	str	r0, [sp, #60]	; 0x3c
   1fba4:	mov	ip, r6
   1fba8:	ldr	r0, [sp, #204]	; 0xcc
   1fbac:	ldr	r0, [r0, r3, lsl #2]
   1fbb0:	ldr	r1, [r0, #8]
   1fbb4:	cmp	r1, #1
   1fbb8:	blt	1f6d0 <__assert_fail@plt+0xda24>
   1fbbc:	str	r2, [sp, #56]	; 0x38
   1fbc0:	ldr	r2, [r4, #20]
   1fbc4:	str	r7, [sp, #100]	; 0x64
   1fbc8:	add	r7, sl, sl, lsl #1
   1fbcc:	ldr	lr, [r0, #12]
   1fbd0:	mov	r9, ip
   1fbd4:	str	r6, [sp, #48]	; 0x30
   1fbd8:	add	r2, r2, r7, lsl #2
   1fbdc:	ldr	r2, [r2, #8]
   1fbe0:	ldr	r2, [r2]
   1fbe4:	str	r2, [sp, #92]	; 0x5c
   1fbe8:	subs	r2, r1, #1
   1fbec:	mov	r1, #0
   1fbf0:	beq	1fc1c <__assert_fail@plt+0xdf70>
   1fbf4:	ldr	ip, [sp, #92]	; 0x5c
   1fbf8:	add	r0, r1, r2
   1fbfc:	lsr	r7, r0, #1
   1fc00:	ldr	r6, [lr, r7, lsl #2]
   1fc04:	cmp	r6, ip
   1fc08:	addlt	r1, r8, r0, lsr #1
   1fc0c:	movge	r2, r7
   1fc10:	cmp	r1, r2
   1fc14:	bcc	1fbf8 <__assert_fail@plt+0xdf4c>
   1fc18:	b	1fc20 <__assert_fail@plt+0xdf74>
   1fc1c:	ldr	ip, [sp, #92]	; 0x5c
   1fc20:	ldr	r0, [lr, r1, lsl #2]
   1fc24:	ldr	r6, [sp, #48]	; 0x30
   1fc28:	ldr	r1, [sp, #100]	; 0x64
   1fc2c:	cmp	r0, ip
   1fc30:	bne	1f6c4 <__assert_fail@plt+0xda18>
   1fc34:	mov	ip, r9
   1fc38:	b	1f890 <__assert_fail@plt+0xdbe4>
   1fc3c:	ldr	r2, [sp, #108]	; 0x6c
   1fc40:	str	r6, [sp, #48]	; 0x30
   1fc44:	mov	r6, ip
   1fc48:	mov	r9, r3
   1fc4c:	add	r0, r2, r1
   1fc50:	add	r1, r2, r3
   1fc54:	mov	r2, r7
   1fc58:	bl	11aa8 <bcmp@plt>
   1fc5c:	cmp	r0, #0
   1fc60:	beq	1fc74 <__assert_fail@plt+0xdfc8>
   1fc64:	mov	ip, r6
   1fc68:	ldr	r7, [sp, #88]	; 0x58
   1fc6c:	ldr	r6, [sp, #48]	; 0x30
   1fc70:	b	1f8b4 <__assert_fail@plt+0xdc08>
   1fc74:	ldr	r0, [r4, #12]
   1fc78:	add	r9, r7, r9
   1fc7c:	mov	ip, r6
   1fc80:	ldr	r7, [sp, #88]	; 0x58
   1fc84:	ldr	r6, [sp, #48]	; 0x30
   1fc88:	mov	r3, r9
   1fc8c:	ldr	sl, [r0, sl, lsl #2]
   1fc90:	b	1f71c <__assert_fail@plt+0xda70>
   1fc94:	ldr	r1, [sp, #60]	; 0x3c
   1fc98:	mov	r9, ip
   1fc9c:	mov	r0, r6
   1fca0:	str	lr, [sp, #56]	; 0x38
   1fca4:	cmp	r1, lr
   1fca8:	bne	1fcdc <__assert_fail@plt+0xe030>
   1fcac:	ldr	r1, [sp, #60]	; 0x3c
   1fcb0:	lsl	r1, r1, #3
   1fcb4:	bl	1b64c <__assert_fail@plt+0x99a0>
   1fcb8:	cmp	r0, #0
   1fcbc:	mov	ip, r9
   1fcc0:	beq	201ec <__assert_fail@plt+0xe540>
   1fcc4:	mov	r1, r0
   1fcc8:	ldr	r0, [sp, #60]	; 0x3c
   1fccc:	mov	r9, r1
   1fcd0:	lsl	r0, r0, #1
   1fcd4:	str	r0, [sp, #60]	; 0x3c
   1fcd8:	mov	r0, r1
   1fcdc:	ldr	r1, [r9]
   1fce0:	cmp	r1, sl
   1fce4:	ble	1fd68 <__assert_fail@plt+0xe0bc>
   1fce8:	ldr	ip, [sp, #56]	; 0x38
   1fcec:	cmp	ip, #1
   1fcf0:	blt	1fda0 <__assert_fail@plt+0xe0f4>
   1fcf4:	ldr	r5, [sp, #56]	; 0x38
   1fcf8:	ands	r1, r5, #3
   1fcfc:	sub	r2, r5, #1
   1fd00:	beq	1fd28 <__assert_fail@plt+0xe07c>
   1fd04:	ldr	r5, [sp, #56]	; 0x38
   1fd08:	add	r7, r9, r5, lsl #2
   1fd0c:	mov	r3, r7
   1fd10:	ldr	r6, [r3, #-4]!
   1fd14:	subs	r1, r1, #1
   1fd18:	sub	r5, r5, #1
   1fd1c:	str	r6, [r7]
   1fd20:	mov	r7, r3
   1fd24:	bne	1fd10 <__assert_fail@plt+0xe064>
   1fd28:	mov	ip, #0
   1fd2c:	cmp	r2, #3
   1fd30:	bcc	1fda0 <__assert_fail@plt+0xe0f4>
   1fd34:	add	r2, r9, r5, lsl #2
   1fd38:	sub	r2, r2, #8
   1fd3c:	ldr	r6, [r2]
   1fd40:	ldr	r1, [r2, #4]
   1fd44:	ldmdb	r2, {r3, r7}
   1fd48:	sub	r5, r5, #4
   1fd4c:	cmp	r5, #0
   1fd50:	stmda	r2, {r3, r7}
   1fd54:	str	r6, [r2, #4]
   1fd58:	str	r1, [r2, #8]
   1fd5c:	sub	r2, r2, #16
   1fd60:	bgt	1fd3c <__assert_fail@plt+0xe090>
   1fd64:	b	1fda0 <__assert_fail@plt+0xe0f4>
   1fd68:	ldr	ip, [sp, #56]	; 0x38
   1fd6c:	add	r3, r9, ip, lsl #2
   1fd70:	ldr	r2, [r3, #-4]
   1fd74:	cmp	r2, sl
   1fd78:	ble	1fda0 <__assert_fail@plt+0xe0f4>
   1fd7c:	ldr	r1, [sp, #56]	; 0x38
   1fd80:	sub	r1, r1, #2
   1fd84:	str	r2, [r3]
   1fd88:	sub	r1, r1, #1
   1fd8c:	ldr	r2, [r3, #-8]
   1fd90:	sub	r3, r3, #4
   1fd94:	cmp	r2, sl
   1fd98:	bgt	1fd84 <__assert_fail@plt+0xe0d8>
   1fd9c:	add	ip, r1, #2
   1fda0:	ldr	r1, [sp, #56]	; 0x38
   1fda4:	ldr	r5, [sp, #32]
   1fda8:	str	sl, [r9, ip, lsl #2]
   1fdac:	mov	ip, r9
   1fdb0:	mov	r6, r0
   1fdb4:	add	r1, r1, #1
   1fdb8:	str	r1, [sp, #56]	; 0x38
   1fdbc:	b	1f7c8 <__assert_fail@plt+0xdb1c>
   1fdc0:	ldr	r1, [sp, #60]	; 0x3c
   1fdc4:	mov	r9, ip
   1fdc8:	mov	r0, r6
   1fdcc:	str	r7, [sp, #100]	; 0x64
   1fdd0:	str	lr, [sp, #56]	; 0x38
   1fdd4:	cmp	r1, lr
   1fdd8:	bne	1fe0c <__assert_fail@plt+0xe160>
   1fddc:	ldr	r1, [sp, #60]	; 0x3c
   1fde0:	lsl	r1, r1, #3
   1fde4:	bl	1b64c <__assert_fail@plt+0x99a0>
   1fde8:	cmp	r0, #0
   1fdec:	mov	ip, r9
   1fdf0:	beq	201ec <__assert_fail@plt+0xe540>
   1fdf4:	mov	r1, r0
   1fdf8:	ldr	r0, [sp, #60]	; 0x3c
   1fdfc:	mov	r9, r1
   1fe00:	lsl	r0, r0, #1
   1fe04:	str	r0, [sp, #60]	; 0x3c
   1fe08:	mov	r0, r1
   1fe0c:	ldr	r1, [r9]
   1fe10:	cmp	r1, sl
   1fe14:	ble	1fe98 <__assert_fail@plt+0xe1ec>
   1fe18:	ldr	ip, [sp, #56]	; 0x38
   1fe1c:	cmp	ip, #1
   1fe20:	blt	1fed0 <__assert_fail@plt+0xe224>
   1fe24:	ldr	r5, [sp, #56]	; 0x38
   1fe28:	ands	r1, r5, #3
   1fe2c:	sub	r2, r5, #1
   1fe30:	beq	1fe58 <__assert_fail@plt+0xe1ac>
   1fe34:	ldr	r5, [sp, #56]	; 0x38
   1fe38:	add	r7, r9, r5, lsl #2
   1fe3c:	mov	r3, r7
   1fe40:	ldr	r6, [r3, #-4]!
   1fe44:	subs	r1, r1, #1
   1fe48:	sub	r5, r5, #1
   1fe4c:	str	r6, [r7]
   1fe50:	mov	r7, r3
   1fe54:	bne	1fe40 <__assert_fail@plt+0xe194>
   1fe58:	mov	ip, #0
   1fe5c:	cmp	r2, #3
   1fe60:	bcc	1fed0 <__assert_fail@plt+0xe224>
   1fe64:	add	r2, r9, r5, lsl #2
   1fe68:	sub	r2, r2, #8
   1fe6c:	ldr	r6, [r2]
   1fe70:	ldr	r1, [r2, #4]
   1fe74:	ldmdb	r2, {r3, r7}
   1fe78:	sub	r5, r5, #4
   1fe7c:	cmp	r5, #0
   1fe80:	stmda	r2, {r3, r7}
   1fe84:	str	r6, [r2, #4]
   1fe88:	str	r1, [r2, #8]
   1fe8c:	sub	r2, r2, #16
   1fe90:	bgt	1fe6c <__assert_fail@plt+0xe1c0>
   1fe94:	b	1fed0 <__assert_fail@plt+0xe224>
   1fe98:	ldr	ip, [sp, #56]	; 0x38
   1fe9c:	add	r3, r9, ip, lsl #2
   1fea0:	ldr	r2, [r3, #-4]
   1fea4:	cmp	r2, sl
   1fea8:	ble	1fed0 <__assert_fail@plt+0xe224>
   1feac:	ldr	r1, [sp, #56]	; 0x38
   1feb0:	sub	r1, r1, #2
   1feb4:	str	r2, [r3]
   1feb8:	sub	r1, r1, #1
   1febc:	ldr	r2, [r3, #-8]
   1fec0:	sub	r3, r3, #4
   1fec4:	cmp	r2, sl
   1fec8:	bgt	1feb4 <__assert_fail@plt+0xe208>
   1fecc:	add	ip, r1, #2
   1fed0:	ldr	r2, [sp, #56]	; 0x38
   1fed4:	ldr	r5, [sp, #32]
   1fed8:	ldr	r3, [sp, #80]	; 0x50
   1fedc:	ldr	r7, [sp, #100]	; 0x64
   1fee0:	str	sl, [r9, ip, lsl #2]
   1fee4:	mov	ip, r9
   1fee8:	mov	r6, r0
   1feec:	add	r2, r2, #1
   1fef0:	b	1fba8 <__assert_fail@plt+0xdefc>
   1fef4:	mov	r0, r6
   1fef8:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1fefc:	ldr	r0, [fp, #-184]	; 0xffffff48
   1ff00:	ldr	r6, [sp, #72]	; 0x48
   1ff04:	cmp	r0, r6
   1ff08:	beq	1ff10 <__assert_fail@plt+0xe264>
   1ff0c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1ff10:	ldr	lr, [sp, #96]	; 0x60
   1ff14:	mov	r0, #16
   1ff18:	str	r6, [fp, #-184]	; 0xffffff48
   1ff1c:	cmp	r7, #0
   1ff20:	str	r0, [fp, #-188]	; 0xffffff44
   1ff24:	mov	r0, #0
   1ff28:	str	r0, [fp, #-192]	; 0xffffff40
   1ff2c:	beq	1ff90 <__assert_fail@plt+0xe2e4>
   1ff30:	ldr	r1, [r7]
   1ff34:	ldr	r0, [r7, #8]
   1ff38:	mov	r6, lr
   1ff3c:	cmp	r1, #1
   1ff40:	blt	1ff80 <__assert_fail@plt+0xe2d4>
   1ff44:	mov	r4, #0
   1ff48:	mov	r5, #0
   1ff4c:	add	r0, r0, r4
   1ff50:	ldr	r0, [r0, #20]
   1ff54:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1ff58:	ldr	r0, [r7, #8]
   1ff5c:	add	r0, r0, r4
   1ff60:	ldr	r0, [r0, #8]
   1ff64:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1ff68:	ldr	r1, [r7]
   1ff6c:	ldr	r0, [r7, #8]
   1ff70:	add	r5, r5, #1
   1ff74:	add	r4, r4, #24
   1ff78:	cmp	r5, r1
   1ff7c:	blt	1ff4c <__assert_fail@plt+0xe2a0>
   1ff80:	bl	1b4e8 <__assert_fail@plt+0x983c>
   1ff84:	ldr	r5, [sp, #32]
   1ff88:	ldr	r4, [sp, #84]	; 0x54
   1ff8c:	mov	lr, r6
   1ff90:	ldr	r0, [fp, #20]
   1ff94:	ldrb	r1, [sp, #180]	; 0xb4
   1ff98:	mov	r2, r9
   1ff9c:	add	r0, r0, #4
   1ffa0:	b	2000c <__assert_fail@plt+0xe360>
   1ffa4:	mov	r6, #0
   1ffa8:	b	1d6a8 <__assert_fail@plt+0xb9fc>
   1ffac:	mov	sl, #12
   1ffb0:	b	200c4 <__assert_fail@plt+0xe418>
   1ffb4:	ldr	r7, [sp, #132]	; 0x84
   1ffb8:	ldr	r6, [sp, #28]
   1ffbc:	ldr	ip, [sp, #116]	; 0x74
   1ffc0:	cmp	r3, r7
   1ffc4:	mov	r5, r6
   1ffc8:	addne	r5, ip, r3, lsl #2
   1ffcc:	ldr	r3, [r5]
   1ffd0:	str	r3, [r0, #-4]
   1ffd4:	ldr	r5, [r0]
   1ffd8:	cmp	r5, r7
   1ffdc:	addne	r6, ip, r5, lsl #2
   1ffe0:	ldr	r5, [sp, #32]
   1ffe4:	ldr	r7, [r6]
   1ffe8:	str	r7, [r0]
   1ffec:	ldr	r6, [fp, #-200]	; 0xffffff38
   1fff0:	add	r3, r3, r6
   1fff4:	add	r7, r7, r6
   1fff8:	stmda	r0, {r3, r7}
   1fffc:	sub	r2, r2, #1
   20000:	add	r0, r0, #8
   20004:	cmp	r5, r2
   20008:	beq	20028 <__assert_fail@plt+0xe37c>
   2000c:	ldr	r3, [r0, #-4]
   20010:	cmn	r3, #1
   20014:	beq	1fffc <__assert_fail@plt+0xe350>
   20018:	cmp	r1, #0
   2001c:	bne	1ffb4 <__assert_fail@plt+0xe308>
   20020:	ldr	r7, [r0]
   20024:	b	1ffec <__assert_fail@plt+0xe340>
   20028:	cmp	r5, #1
   2002c:	blt	2004c <__assert_fail@plt+0xe3a0>
   20030:	ldr	r0, [fp, #20]
   20034:	lsl	r2, r5, #3
   20038:	mov	r1, #255	; 0xff
   2003c:	add	r0, r0, r4, lsl #3
   20040:	mov	r4, lr
   20044:	bl	11b2c <memset@plt>
   20048:	mov	lr, r4
   2004c:	ldr	r0, [lr, #132]	; 0x84
   20050:	mov	sl, #0
   20054:	cmp	r0, #0
   20058:	beq	200c4 <__assert_fail@plt+0xe418>
   2005c:	ldr	r1, [sp, #84]	; 0x54
   20060:	cmp	r1, #2
   20064:	bcc	200c4 <__assert_fail@plt+0xe418>
   20068:	ldr	r1, [sp, #32]
   2006c:	ldr	r2, [fp, #16]
   20070:	ldr	r6, [fp, #20]
   20074:	mvn	r1, r1
   20078:	add	r1, r1, r2
   2007c:	mov	r2, #0
   20080:	b	20090 <__assert_fail@plt+0xe3e4>
   20084:	add	r2, r2, #1
   20088:	cmp	r1, r2
   2008c:	beq	200c0 <__assert_fail@plt+0xe414>
   20090:	ldr	r3, [r0, r2, lsl #2]
   20094:	cmp	r2, r3
   20098:	beq	20084 <__assert_fail@plt+0xe3d8>
   2009c:	add	r3, r6, r3, lsl #3
   200a0:	add	r7, r6, r2, lsl #3
   200a4:	ldr	r3, [r3, #8]
   200a8:	str	r3, [r7, #8]
   200ac:	ldr	r3, [r0, r2, lsl #2]
   200b0:	add	r3, r6, r3, lsl #3
   200b4:	ldr	r3, [r3, #12]
   200b8:	str	r3, [r7, #12]
   200bc:	b	20084 <__assert_fail@plt+0xe3d8>
   200c0:	mov	sl, #0
   200c4:	ldr	r0, [sp, #204]	; 0xcc
   200c8:	bl	1b4e8 <__assert_fail@plt+0x983c>
   200cc:	ldr	r0, [sp, #96]	; 0x60
   200d0:	ldr	r0, [r0, #76]	; 0x4c
   200d4:	cmp	r0, #0
   200d8:	beq	200f4 <__assert_fail@plt+0xe448>
   200dc:	add	r0, sp, #104	; 0x68
   200e0:	bl	27a30 <__assert_fail@plt+0x15d84>
   200e4:	ldr	r0, [sp, #236]	; 0xec
   200e8:	bl	1b4e8 <__assert_fail@plt+0x983c>
   200ec:	ldr	r0, [sp, #220]	; 0xdc
   200f0:	bl	1b4e8 <__assert_fail@plt+0x983c>
   200f4:	ldr	r0, [sp, #112]	; 0x70
   200f8:	bl	1b4e8 <__assert_fail@plt+0x983c>
   200fc:	ldr	r0, [sp, #116]	; 0x74
   20100:	bl	1b4e8 <__assert_fail@plt+0x983c>
   20104:	ldrb	r0, [sp, #179]	; 0xb3
   20108:	cmp	r0, #0
   2010c:	beq	20118 <__assert_fail@plt+0xe46c>
   20110:	ldr	r0, [sp, #108]	; 0x6c
   20114:	bl	1b4e8 <__assert_fail@plt+0x983c>
   20118:	mov	r0, sl
   2011c:	sub	sp, fp, #28
   20120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20124:	mov	r5, #0
   20128:	b	20150 <__assert_fail@plt+0xe4a4>
   2012c:	mov	sl, r0
   20130:	b	200c4 <__assert_fail@plt+0xe418>
   20134:	mov	r0, r7
   20138:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2013c:	mov	r0, #0
   20140:	bl	1b4e8 <__assert_fail@plt+0x983c>
   20144:	mov	sl, #12
   20148:	b	200c4 <__assert_fail@plt+0xe418>
   2014c:	mov	r5, #1
   20150:	mov	r0, ip
   20154:	bl	1b4e8 <__assert_fail@plt+0x983c>
   20158:	ldr	r0, [fp, #-184]	; 0xffffff48
   2015c:	ldr	r4, [sp, #72]	; 0x48
   20160:	cmp	r0, r4
   20164:	beq	2016c <__assert_fail@plt+0xe4c0>
   20168:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2016c:	mov	r0, #16
   20170:	str	r4, [fp, #-184]	; 0xffffff48
   20174:	mov	sl, #1
   20178:	cmp	r5, #0
   2017c:	str	r0, [fp, #-188]	; 0xffffff44
   20180:	mov	r0, #0
   20184:	str	r0, [fp, #-192]	; 0xffffff40
   20188:	bne	200c4 <__assert_fail@plt+0xe418>
   2018c:	ldr	r0, [sp, #88]	; 0x58
   20190:	ldr	r1, [r0]
   20194:	ldr	r0, [r0, #8]
   20198:	cmp	r1, #1
   2019c:	blt	201e0 <__assert_fail@plt+0xe534>
   201a0:	ldr	r4, [sp, #88]	; 0x58
   201a4:	mov	r5, #0
   201a8:	mov	r6, #0
   201ac:	add	r0, r0, r5
   201b0:	ldr	r0, [r0, #20]
   201b4:	bl	1b4e8 <__assert_fail@plt+0x983c>
   201b8:	ldr	r0, [r4, #8]
   201bc:	add	r0, r0, r5
   201c0:	ldr	r0, [r0, #8]
   201c4:	bl	1b4e8 <__assert_fail@plt+0x983c>
   201c8:	ldr	r1, [r4]
   201cc:	ldr	r0, [r4, #8]
   201d0:	add	r6, r6, #1
   201d4:	add	r5, r5, #24
   201d8:	cmp	r6, r1
   201dc:	blt	201ac <__assert_fail@plt+0xe500>
   201e0:	bl	1b4e8 <__assert_fail@plt+0x983c>
   201e4:	b	200c4 <__assert_fail@plt+0xe418>
   201e8:	ldr	ip, [sp, #40]	; 0x28
   201ec:	mov	r0, ip
   201f0:	bl	1b4e8 <__assert_fail@plt+0x983c>
   201f4:	ldr	r0, [fp, #-184]	; 0xffffff48
   201f8:	ldr	r4, [sp, #72]	; 0x48
   201fc:	cmp	r0, r4
   20200:	beq	20208 <__assert_fail@plt+0xe55c>
   20204:	bl	1b4e8 <__assert_fail@plt+0x983c>
   20208:	mov	r0, #16
   2020c:	str	r4, [fp, #-184]	; 0xffffff48
   20210:	mov	sl, #12
   20214:	str	r0, [fp, #-188]	; 0xffffff44
   20218:	mov	r0, #0
   2021c:	str	r0, [fp, #-192]	; 0xffffff40
   20220:	ldr	r0, [sp, #88]	; 0x58
   20224:	cmp	r0, #0
   20228:	beq	200c4 <__assert_fail@plt+0xe418>
   2022c:	ldr	r1, [r0]
   20230:	ldr	r0, [r0, #8]
   20234:	cmp	r1, #1
   20238:	blt	201e0 <__assert_fail@plt+0xe534>
   2023c:	ldr	r4, [sp, #88]	; 0x58
   20240:	mov	r5, #0
   20244:	mov	r6, #0
   20248:	add	r0, r0, r5
   2024c:	ldr	r0, [r0, #20]
   20250:	bl	1b4e8 <__assert_fail@plt+0x983c>
   20254:	ldr	r0, [r4, #8]
   20258:	add	r0, r0, r5
   2025c:	ldr	r0, [r0, #8]
   20260:	bl	1b4e8 <__assert_fail@plt+0x983c>
   20264:	ldr	r1, [r4]
   20268:	ldr	r0, [r4, #8]
   2026c:	add	r6, r6, #1
   20270:	add	r5, r5, #24
   20274:	cmp	r6, r1
   20278:	blt	20248 <__assert_fail@plt+0xe59c>
   2027c:	b	201e0 <__assert_fail@plt+0xe534>
   20280:	mov	sl, #1
   20284:	b	200c4 <__assert_fail@plt+0xe418>
   20288:	mov	ip, #0
   2028c:	b	201ec <__assert_fail@plt+0xe540>
   20290:	ldr	ip, [sp, #40]	; 0x28
   20294:	mov	r0, #0
   20298:	str	r0, [r6]
   2029c:	str	r0, [r5]
   202a0:	b	201ec <__assert_fail@plt+0xe540>
   202a4:	push	{fp, lr}
   202a8:	mov	fp, sp
   202ac:	sub	sp, sp, #16
   202b0:	mov	ip, #1
   202b4:	str	r2, [sp, #4]
   202b8:	str	ip, [sp, #12]
   202bc:	mov	ip, #0
   202c0:	str	ip, [sp]
   202c4:	ldr	ip, [fp, #8]
   202c8:	str	ip, [sp, #8]
   202cc:	bl	202d8 <__assert_fail@plt+0xe62c>
   202d0:	mov	sp, fp
   202d4:	pop	{fp, pc}
   202d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   202dc:	add	fp, sp, #28
   202e0:	sub	sp, sp, #60	; 0x3c
   202e4:	mvn	r4, #0
   202e8:	cmp	r3, #0
   202ec:	bmi	20474 <__assert_fail@plt+0xe7c8>
   202f0:	mov	r5, r3
   202f4:	mov	r8, r2
   202f8:	cmp	r3, r2
   202fc:	bgt	20474 <__assert_fail@plt+0xe7c8>
   20300:	mov	r6, r0
   20304:	ldr	r0, [fp, #8]
   20308:	mov	sl, r1
   2030c:	movw	r1, #0
   20310:	mov	r9, r8
   20314:	ldr	r7, [r6]
   20318:	movt	r1, #0
   2031c:	add	r0, r0, r5
   20320:	cmp	r0, r8
   20324:	bicle	r9, r0, r0, asr #31
   20328:	movw	r0, #0
   2032c:	movt	r0, #0
   20330:	orrs	r4, r1, r0
   20334:	beq	20340 <__assert_fail@plt+0xe694>
   20338:	add	r0, r7, #136	; 0x88
   2033c:	bl	118bc <pthread_mutex_lock@plt>
   20340:	ldrb	r0, [r6, #28]
   20344:	ldr	r3, [fp, #16]
   20348:	str	r6, [fp, #-32]	; 0xffffffe0
   2034c:	cmp	r9, r5
   20350:	ubfx	r1, r0, #5, #2
   20354:	str	r7, [fp, #-36]	; 0xffffffdc
   20358:	str	r4, [fp, #-40]	; 0xffffffd8
   2035c:	str	sl, [sp, #44]	; 0x2c
   20360:	str	r1, [sp, #40]	; 0x28
   20364:	ble	20398 <__assert_fail@plt+0xe6ec>
   20368:	tst	r0, #8
   2036c:	bne	20398 <__assert_fail@plt+0xe6ec>
   20370:	ldr	r1, [fp, #-32]	; 0xffffffe0
   20374:	ldr	r1, [r1, #16]
   20378:	cmp	r1, #0
   2037c:	beq	20398 <__assert_fail@plt+0xe6ec>
   20380:	ldr	r4, [fp, #-32]	; 0xffffffe0
   20384:	mov	r6, r3
   20388:	mov	r0, r4
   2038c:	bl	1cc70 <__assert_fail@plt+0xafc4>
   20390:	ldrb	r0, [r4, #28]
   20394:	mov	r3, r6
   20398:	mov	sl, #1
   2039c:	mov	r2, #0
   203a0:	cmp	r3, #0
   203a4:	beq	203f4 <__assert_fail@plt+0xe748>
   203a8:	ands	r1, r0, #16
   203ac:	bne	203f4 <__assert_fail@plt+0xe748>
   203b0:	and	r0, r0, #6
   203b4:	cmp	r0, #4
   203b8:	bne	203e4 <__assert_fail@plt+0xe738>
   203bc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   203c0:	ldr	sl, [r3]
   203c4:	ldr	r0, [r0, #24]
   203c8:	cmp	sl, r0
   203cc:	bhi	203ec <__assert_fail@plt+0xe740>
   203d0:	cmp	sl, #1
   203d4:	bge	203f0 <__assert_fail@plt+0xe744>
   203d8:	mov	sl, #1
   203dc:	mov	r2, #0
   203e0:	b	203f4 <__assert_fail@plt+0xe748>
   203e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   203e8:	ldr	r0, [r0, #24]
   203ec:	add	sl, r0, #1
   203f0:	mov	r2, r3
   203f4:	lsl	r0, sl, #3
   203f8:	str	r2, [sp, #36]	; 0x24
   203fc:	bl	1b5b8 <__assert_fail@plt+0x990c>
   20400:	cmp	r0, #0
   20404:	beq	20794 <__assert_fail@plt+0xeae8>
   20408:	mov	r6, r0
   2040c:	ldr	r0, [fp, #12]
   20410:	str	r9, [sp]
   20414:	ldr	r9, [fp, #-32]	; 0xffffffe0
   20418:	ldr	r1, [sp, #44]	; 0x2c
   2041c:	mov	r2, r8
   20420:	mov	r3, r5
   20424:	stmib	sp, {r0, sl}
   20428:	ldr	r0, [sp, #40]	; 0x28
   2042c:	str	r6, [sp, #12]
   20430:	str	r0, [sp, #16]
   20434:	mov	r0, r9
   20438:	bl	1d5cc <__assert_fail@plt+0xb920>
   2043c:	cmp	r0, #0
   20440:	mov	r8, r6
   20444:	beq	20480 <__assert_fail@plt+0xe7d4>
   20448:	cmp	r0, #1
   2044c:	mvn	r4, #1
   20450:	mvneq	r4, #0
   20454:	ldr	r6, [fp, #-40]	; 0xffffffd8
   20458:	ldr	r5, [fp, #-36]	; 0xffffffdc
   2045c:	mov	r0, r8
   20460:	bl	1b4e8 <__assert_fail@plt+0x983c>
   20464:	cmp	r6, #0
   20468:	beq	20474 <__assert_fail@plt+0xe7c8>
   2046c:	add	r0, r5, #136	; 0x88
   20470:	bl	11808 <pthread_mutex_unlock@plt>
   20474:	mov	r0, r4
   20478:	sub	sp, fp, #28
   2047c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20480:	ldr	lr, [sp, #36]	; 0x24
   20484:	str	r5, [sp, #44]	; 0x2c
   20488:	cmp	lr, #0
   2048c:	beq	20768 <__assert_fail@plt+0xeabc>
   20490:	ldrb	r0, [r9, #28]
   20494:	add	r7, sl, #1
   20498:	ubfx	r0, r0, #1, #2
   2049c:	cmp	r0, #1
   204a0:	beq	20500 <__assert_fail@plt+0xe854>
   204a4:	cmp	r0, #0
   204a8:	bne	2052c <__assert_fail@plt+0xe880>
   204ac:	mov	r4, r8
   204b0:	lsl	r8, r7, #2
   204b4:	mov	r5, lr
   204b8:	mov	r0, r8
   204bc:	bl	1b5b8 <__assert_fail@plt+0x990c>
   204c0:	mov	r6, #0
   204c4:	cmp	r0, #0
   204c8:	str	r0, [r5, #4]
   204cc:	beq	207ac <__assert_fail@plt+0xeb00>
   204d0:	mov	r0, r8
   204d4:	bl	1b5b8 <__assert_fail@plt+0x990c>
   204d8:	cmp	r0, #0
   204dc:	mov	lr, r5
   204e0:	str	r0, [r5, #8]
   204e4:	beq	20818 <__assert_fail@plt+0xeb6c>
   204e8:	str	r7, [lr]
   204ec:	mov	r6, #1
   204f0:	mov	r8, r4
   204f4:	cmp	sl, #1
   204f8:	bge	2053c <__assert_fail@plt+0xe890>
   204fc:	b	2051c <__assert_fail@plt+0xe870>
   20500:	ldr	r0, [lr]
   20504:	mov	r6, #1
   20508:	cmp	r7, r0
   2050c:	bhi	207b4 <__assert_fail@plt+0xeb08>
   20510:	mov	r7, r0
   20514:	cmp	sl, #1
   20518:	bge	2053c <__assert_fail@plt+0xe890>
   2051c:	mov	sl, #0
   20520:	cmp	sl, r7
   20524:	bcc	20730 <__assert_fail@plt+0xea84>
   20528:	b	20750 <__assert_fail@plt+0xeaa4>
   2052c:	ldr	r7, [lr]
   20530:	mov	r6, #2
   20534:	cmp	sl, #1
   20538:	blt	2051c <__assert_fail@plt+0xe870>
   2053c:	ldr	r5, [lr, #4]
   20540:	ldr	r4, [lr, #8]
   20544:	mov	r2, #0
   20548:	cmp	sl, #3
   2054c:	str	r6, [sp, #40]	; 0x28
   20550:	bhi	205e0 <__assert_fail@plt+0xe934>
   20554:	tst	sl, #1
   20558:	mov	r3, r2
   2055c:	beq	20578 <__assert_fail@plt+0xe8cc>
   20560:	mov	r0, r8
   20564:	orr	r3, r2, #1
   20568:	ldr	r1, [r0, r2, lsl #3]!
   2056c:	str	r1, [r5, r2, lsl #2]
   20570:	ldr	r0, [r0, #4]
   20574:	str	r0, [r4, r2, lsl #2]
   20578:	orr	r0, r2, #1
   2057c:	cmp	sl, r0
   20580:	beq	20720 <__assert_fail@plt+0xea74>
   20584:	add	r2, r3, #1
   20588:	add	ip, r8, r3, lsl #3
   2058c:	sub	r0, sl, r3
   20590:	mov	r6, #0
   20594:	add	r1, r5, r2, lsl #2
   20598:	add	r2, r4, r2, lsl #2
   2059c:	add	r7, ip, #12
   205a0:	ldr	r4, [r7, #-12]
   205a4:	add	r5, r1, r6
   205a8:	subs	r0, r0, #2
   205ac:	str	r4, [r5, #-4]
   205b0:	add	r4, ip, r6, lsl #1
   205b4:	add	r5, r2, r6
   205b8:	ldr	r3, [r4, #4]
   205bc:	str	r3, [r5, #-4]
   205c0:	ldr	r3, [r4, #8]
   205c4:	str	r3, [r1, r6]
   205c8:	ldr	r3, [r7]
   205cc:	add	r7, r7, #16
   205d0:	str	r3, [r2, r6]
   205d4:	add	r6, r6, #8
   205d8:	bne	205a0 <__assert_fail@plt+0xe8f4>
   205dc:	b	20720 <__assert_fail@plt+0xea74>
   205e0:	add	lr, r4, sl, lsl #2
   205e4:	add	r7, r8, sl, lsl #3
   205e8:	add	r6, r5, sl, lsl #2
   205ec:	mov	r9, #0
   205f0:	mov	r1, #0
   205f4:	mov	r3, #0
   205f8:	mov	r0, #0
   205fc:	mov	r2, #0
   20600:	cmp	r8, lr
   20604:	movwcc	r9, #1
   20608:	cmp	r7, r4
   2060c:	movwhi	r1, #1
   20610:	cmp	r8, r6
   20614:	movwcc	r3, #1
   20618:	cmp	r7, r5
   2061c:	mov	r7, #0
   20620:	movwhi	r7, #1
   20624:	cmp	r4, r6
   20628:	mov	r6, #0
   2062c:	movwcc	r6, #1
   20630:	cmp	r5, lr
   20634:	movwcc	r0, #1
   20638:	tst	r0, r6
   2063c:	andseq	r0, r7, r3
   20640:	bne	206cc <__assert_fail@plt+0xea20>
   20644:	ands	r0, r1, r9
   20648:	ldr	r9, [fp, #-32]	; 0xffffffe0
   2064c:	ldr	lr, [sp, #36]	; 0x24
   20650:	bne	20554 <__assert_fail@plt+0xe8a8>
   20654:	bic	r0, sl, #3
   20658:	mov	r1, #1
   2065c:	str	r4, [sp, #32]
   20660:	str	r0, [sp, #28]
   20664:	subs	r0, r0, #4
   20668:	add	r0, r1, r0, lsr #2
   2066c:	and	r1, r0, #1
   20670:	str	r1, [sp, #24]
   20674:	beq	206d8 <__assert_fail@plt+0xea2c>
   20678:	sub	r6, r0, r1
   2067c:	mov	r1, r4
   20680:	mov	r3, #0
   20684:	mov	r7, #64	; 0x40
   20688:	mov	r0, #32
   2068c:	mov	lr, r5
   20690:	mov	r4, r8
   20694:	mov	r9, r8
   20698:	add	ip, r9, #32
   2069c:	vld2.32	{d16-d19}, [r9], r7
   206a0:	add	r8, lr, #16
   206a4:	add	r2, r1, #16
   206a8:	subs	r6, r6, #2
   206ac:	add	r3, r3, #8
   206b0:	vst1.32	{d16-d17}, [lr], r0
   206b4:	vst1.32	{d18-d19}, [r1], r0
   206b8:	vld2.32	{d16-d19}, [ip]
   206bc:	vst1.32	{d16-d17}, [r8]
   206c0:	vst1.32	{d18-d19}, [r2]
   206c4:	bne	20698 <__assert_fail@plt+0xe9ec>
   206c8:	b	206e0 <__assert_fail@plt+0xea34>
   206cc:	ldr	r9, [fp, #-32]	; 0xffffffe0
   206d0:	ldr	lr, [sp, #36]	; 0x24
   206d4:	b	20554 <__assert_fail@plt+0xe8a8>
   206d8:	mov	r4, r8
   206dc:	mov	r3, #0
   206e0:	ldr	r0, [sp, #24]
   206e4:	mov	r8, r4
   206e8:	ldr	r9, [fp, #-32]	; 0xffffffe0
   206ec:	ldr	lr, [sp, #36]	; 0x24
   206f0:	ldr	r4, [sp, #32]
   206f4:	cmp	r0, #0
   206f8:	beq	20714 <__assert_fail@plt+0xea68>
   206fc:	add	r0, r8, r3, lsl #3
   20700:	vld2.32	{d16-d19}, [r0]
   20704:	add	r0, r5, r3, lsl #2
   20708:	vst1.32	{d16-d17}, [r0]
   2070c:	add	r0, r4, r3, lsl #2
   20710:	vst1.32	{d18-d19}, [r0]
   20714:	ldr	r2, [sp, #28]
   20718:	cmp	sl, r2
   2071c:	bne	20554 <__assert_fail@plt+0xe8a8>
   20720:	ldr	r7, [lr]
   20724:	ldr	r6, [sp, #40]	; 0x28
   20728:	cmp	sl, r7
   2072c:	bcs	20750 <__assert_fail@plt+0xeaa4>
   20730:	ldmib	lr, {r0, r1}
   20734:	mvn	r2, #0
   20738:	str	r2, [r1, sl, lsl #2]
   2073c:	str	r2, [r0, sl, lsl #2]
   20740:	add	sl, sl, #1
   20744:	ldr	r3, [lr]
   20748:	cmp	sl, r3
   2074c:	bcc	20738 <__assert_fail@plt+0xea8c>
   20750:	ldrb	r0, [r9, #28]
   20754:	cmp	r6, #0
   20758:	and	r0, r0, #249	; 0xf9
   2075c:	orr	r0, r0, r6, lsl #1
   20760:	strb	r0, [r9, #28]
   20764:	beq	2078c <__assert_fail@plt+0xeae0>
   20768:	ldr	r0, [fp, #20]
   2076c:	cmp	r0, #0
   20770:	beq	20784 <__assert_fail@plt+0xead8>
   20774:	ldr	r0, [r8, #4]
   20778:	ldr	r1, [sp, #44]	; 0x2c
   2077c:	sub	r4, r0, r1
   20780:	b	20454 <__assert_fail@plt+0xe7a8>
   20784:	ldr	r4, [r8]
   20788:	b	20454 <__assert_fail@plt+0xe7a8>
   2078c:	mvn	r4, #1
   20790:	b	20454 <__assert_fail@plt+0xe7a8>
   20794:	ldr	r6, [fp, #-40]	; 0xffffffd8
   20798:	ldr	r5, [fp, #-36]	; 0xffffffdc
   2079c:	mvn	r4, #1
   207a0:	cmp	r6, #0
   207a4:	bne	2046c <__assert_fail@plt+0xe7c0>
   207a8:	b	20474 <__assert_fail@plt+0xe7c8>
   207ac:	mov	r8, r4
   207b0:	b	20750 <__assert_fail@plt+0xeaa4>
   207b4:	ldr	r0, [lr, #4]
   207b8:	mov	r4, r8
   207bc:	lsl	r8, r7, #2
   207c0:	mov	r1, r8
   207c4:	bl	1b64c <__assert_fail@plt+0x99a0>
   207c8:	mov	r6, #0
   207cc:	cmp	r0, #0
   207d0:	beq	20830 <__assert_fail@plt+0xeb84>
   207d4:	mov	r5, r0
   207d8:	ldr	r0, [sp, #36]	; 0x24
   207dc:	mov	r1, r8
   207e0:	ldr	r0, [r0, #8]
   207e4:	bl	1b64c <__assert_fail@plt+0x99a0>
   207e8:	cmp	r0, #0
   207ec:	beq	20828 <__assert_fail@plt+0xeb7c>
   207f0:	ldr	lr, [sp, #36]	; 0x24
   207f4:	ldr	r9, [fp, #-32]	; 0xffffffe0
   207f8:	mov	r8, r4
   207fc:	mov	r6, #1
   20800:	str	r7, [lr]
   20804:	str	r5, [lr, #4]
   20808:	str	r0, [lr, #8]
   2080c:	cmp	sl, #1
   20810:	bge	2053c <__assert_fail@plt+0xe890>
   20814:	b	2051c <__assert_fail@plt+0xe870>
   20818:	ldr	r0, [lr, #4]
   2081c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   20820:	mov	r8, r4
   20824:	b	20750 <__assert_fail@plt+0xeaa4>
   20828:	mov	r0, r5
   2082c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   20830:	ldr	r9, [fp, #-32]	; 0xffffffe0
   20834:	mov	r8, r4
   20838:	b	20750 <__assert_fail@plt+0xeaa4>
   2083c:	push	{fp, lr}
   20840:	mov	fp, sp
   20844:	sub	sp, sp, #16
   20848:	mov	ip, #0
   2084c:	str	r2, [sp, #4]
   20850:	str	ip, [sp, #12]
   20854:	ldr	ip, [fp, #12]
   20858:	str	ip, [sp, #8]
   2085c:	ldr	ip, [fp, #8]
   20860:	str	ip, [sp]
   20864:	bl	202d8 <__assert_fail@plt+0xe62c>
   20868:	mov	sp, fp
   2086c:	pop	{fp, pc}
   20870:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20874:	add	fp, sp, #28
   20878:	sub	sp, sp, #20
   2087c:	ldr	r4, [fp, #8]
   20880:	mov	r8, r1
   20884:	mov	r1, r0
   20888:	mov	r6, r2
   2088c:	orr	r0, r4, r2
   20890:	ldr	r2, [fp, #20]
   20894:	orrs	r0, r0, r2
   20898:	bmi	20958 <__assert_fail@plt+0xecac>
   2089c:	adds	sl, r6, r4
   208a0:	bvs	20958 <__assert_fail@plt+0xecac>
   208a4:	mov	r5, #0
   208a8:	cmp	r4, #1
   208ac:	blt	20904 <__assert_fail@plt+0xec58>
   208b0:	mov	r9, r3
   208b4:	cmp	r6, #1
   208b8:	blt	2090c <__assert_fail@plt+0xec60>
   208bc:	mov	r0, sl
   208c0:	mov	r5, r1
   208c4:	bl	1b5b8 <__assert_fail@plt+0x990c>
   208c8:	cmp	r0, #0
   208cc:	beq	20958 <__assert_fail@plt+0xecac>
   208d0:	mov	r1, r8
   208d4:	mov	r2, r6
   208d8:	mov	r7, r0
   208dc:	bl	118ec <memcpy@plt>
   208e0:	add	r0, r7, r6
   208e4:	mov	r1, r9
   208e8:	mov	r2, r4
   208ec:	bl	118ec <memcpy@plt>
   208f0:	ldr	r2, [fp, #20]
   208f4:	mov	r1, r5
   208f8:	mov	r4, r7
   208fc:	mov	r5, #0
   20900:	b	20914 <__assert_fail@plt+0xec68>
   20904:	mov	r7, r8
   20908:	b	20910 <__assert_fail@plt+0xec64>
   2090c:	mov	r7, r9
   20910:	mov	r4, #0
   20914:	ldr	r0, [fp, #16]
   20918:	ldr	r3, [fp, #12]
   2091c:	mov	r6, #1
   20920:	str	r2, [sp, #4]
   20924:	mov	r2, sl
   20928:	str	r5, [sp]
   2092c:	str	r6, [sp, #12]
   20930:	str	r0, [sp, #8]
   20934:	mov	r0, r1
   20938:	mov	r1, r7
   2093c:	bl	202d8 <__assert_fail@plt+0xe62c>
   20940:	mov	r5, r0
   20944:	mov	r0, r4
   20948:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2094c:	mov	r0, r5
   20950:	sub	sp, fp, #28
   20954:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20958:	mvn	r0, #1
   2095c:	sub	sp, fp, #28
   20960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20964:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20968:	add	fp, sp, #28
   2096c:	sub	sp, sp, #20
   20970:	ldr	r4, [fp, #8]
   20974:	mov	r8, r1
   20978:	mov	r1, r0
   2097c:	mov	r6, r2
   20980:	orr	r0, r4, r2
   20984:	ldr	r2, [fp, #24]
   20988:	orrs	r0, r0, r2
   2098c:	bmi	20a4c <__assert_fail@plt+0xeda0>
   20990:	adds	sl, r6, r4
   20994:	bvs	20a4c <__assert_fail@plt+0xeda0>
   20998:	mov	r5, #0
   2099c:	cmp	r4, #1
   209a0:	blt	209f8 <__assert_fail@plt+0xed4c>
   209a4:	mov	r9, r3
   209a8:	cmp	r6, #1
   209ac:	blt	20a00 <__assert_fail@plt+0xed54>
   209b0:	mov	r0, sl
   209b4:	mov	r5, r1
   209b8:	bl	1b5b8 <__assert_fail@plt+0x990c>
   209bc:	cmp	r0, #0
   209c0:	beq	20a4c <__assert_fail@plt+0xeda0>
   209c4:	mov	r1, r8
   209c8:	mov	r2, r6
   209cc:	mov	r7, r0
   209d0:	bl	118ec <memcpy@plt>
   209d4:	add	r0, r7, r6
   209d8:	mov	r1, r9
   209dc:	mov	r2, r4
   209e0:	bl	118ec <memcpy@plt>
   209e4:	ldr	r2, [fp, #24]
   209e8:	mov	r1, r5
   209ec:	mov	r4, r7
   209f0:	mov	r5, #0
   209f4:	b	20a08 <__assert_fail@plt+0xed5c>
   209f8:	mov	r7, r8
   209fc:	b	20a04 <__assert_fail@plt+0xed58>
   20a00:	mov	r7, r9
   20a04:	mov	r4, #0
   20a08:	ldr	r0, [fp, #20]
   20a0c:	ldr	r6, [fp, #16]
   20a10:	ldr	r3, [fp, #12]
   20a14:	str	r2, [sp, #4]
   20a18:	mov	r2, sl
   20a1c:	str	r5, [sp, #12]
   20a20:	str	r0, [sp, #8]
   20a24:	mov	r0, r1
   20a28:	mov	r1, r7
   20a2c:	str	r6, [sp]
   20a30:	bl	202d8 <__assert_fail@plt+0xe62c>
   20a34:	mov	r5, r0
   20a38:	mov	r0, r4
   20a3c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   20a40:	mov	r0, r5
   20a44:	sub	sp, fp, #28
   20a48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a4c:	mvn	r0, #1
   20a50:	sub	sp, fp, #28
   20a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a58:	ldrb	ip, [r0, #28]
   20a5c:	cmp	r2, #0
   20a60:	bic	ip, ip, #6
   20a64:	orrne	ip, ip, #2
   20a68:	strb	ip, [r0, #28]
   20a6c:	ldr	r0, [sp]
   20a70:	moveq	r0, r2
   20a74:	cmp	r2, #0
   20a78:	moveq	r3, r2
   20a7c:	stm	r1, {r2, r3}
   20a80:	str	r0, [r1, #8]
   20a84:	bx	lr
   20a88:	push	{r4, sl, fp, lr}
   20a8c:	add	fp, sp, #8
   20a90:	mov	r4, r0
   20a94:	ldr	r0, [r0, #24]
   20a98:	bl	1b4e8 <__assert_fail@plt+0x983c>
   20a9c:	ldr	r0, [r4, #36]	; 0x24
   20aa0:	bl	1b4e8 <__assert_fail@plt+0x983c>
   20aa4:	ldr	r0, [r4, #40]	; 0x28
   20aa8:	add	r1, r4, #4
   20aac:	cmp	r0, r1
   20ab0:	beq	20ac4 <__assert_fail@plt+0xee18>
   20ab4:	ldr	r0, [r0, #8]
   20ab8:	bl	1b4e8 <__assert_fail@plt+0x983c>
   20abc:	ldr	r0, [r4, #40]	; 0x28
   20ac0:	bl	1b4e8 <__assert_fail@plt+0x983c>
   20ac4:	ldr	r0, [r4, #12]
   20ac8:	bl	1b4e8 <__assert_fail@plt+0x983c>
   20acc:	ldr	r0, [r4, #48]	; 0x30
   20ad0:	bl	1b4e8 <__assert_fail@plt+0x983c>
   20ad4:	ldr	r0, [r4, #44]	; 0x2c
   20ad8:	bl	1b4e8 <__assert_fail@plt+0x983c>
   20adc:	mov	r0, r4
   20ae0:	pop	{r4, sl, fp, lr}
   20ae4:	b	1b4e8 <__assert_fail@plt+0x983c>
   20ae8:	nop	{0}
   20aec:	nop	{0}
   20af0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20af4:	add	fp, sp, #28
   20af8:	sub	sp, sp, #108	; 0x6c
   20afc:	mov	r3, r0
   20b00:	ldrb	r0, [r0, #74]	; 0x4a
   20b04:	ldr	r9, [r3, #36]	; 0x24
   20b08:	ldr	r1, [r3, #48]	; 0x30
   20b0c:	ldr	r8, [r3, #28]
   20b10:	str	r3, [sp, #20]
   20b14:	cmp	r9, r1
   20b18:	movgt	r9, r1
   20b1c:	cmp	r0, #0
   20b20:	bne	20b3c <__assert_fail@plt+0xee90>
   20b24:	ldr	r0, [r3, #64]	; 0x40
   20b28:	cmp	r0, #0
   20b2c:	bne	20b3c <__assert_fail@plt+0xee90>
   20b30:	ldrb	r0, [r3, #76]	; 0x4c
   20b34:	cmp	r0, #0
   20b38:	beq	20b44 <__assert_fail@plt+0xee98>
   20b3c:	ldr	r7, [r3, #32]
   20b40:	b	20d5c <__assert_fail@plt+0xf0b0>
   20b44:	cmp	r9, r8
   20b48:	ble	20d34 <__assert_fail@plt+0xf088>
   20b4c:	add	r5, r3, #16
   20b50:	add	sl, sp, #32
   20b54:	str	r9, [sp, #16]
   20b58:	b	20b78 <__assert_fail@plt+0xeecc>
   20b5c:	mov	r8, r9
   20b60:	ldr	r9, [sp, #16]
   20b64:	mov	r3, sl
   20b68:	add	sl, sp, #32
   20b6c:	cmp	r9, r8
   20b70:	mov	r7, r8
   20b74:	ble	2112c <__assert_fail@plt+0xf480>
   20b78:	ldr	r6, [r3, #24]
   20b7c:	ldr	r4, [r3]
   20b80:	add	r0, r6, r8
   20b84:	ldrb	r7, [r4, r0]
   20b88:	tst	r7, #128	; 0x80
   20b8c:	bne	20bd8 <__assert_fail@plt+0xef2c>
   20b90:	mov	r0, r5
   20b94:	bl	1191c <mbsinit@plt>
   20b98:	cmp	r0, #0
   20b9c:	beq	20bd8 <__assert_fail@plt+0xef2c>
   20ba0:	mov	r0, r7
   20ba4:	bl	11c4c <towupper@plt>
   20ba8:	cmp	r0, #128	; 0x80
   20bac:	bcs	20bcc <__assert_fail@plt+0xef20>
   20bb0:	ldr	r3, [sp, #20]
   20bb4:	ldr	r1, [r3, #4]
   20bb8:	strb	r0, [r1, r8]
   20bbc:	ldr	r1, [r3, #8]
   20bc0:	str	r0, [r1, r8, lsl #2]
   20bc4:	add	r8, r8, #1
   20bc8:	b	20b6c <__assert_fail@plt+0xeec0>
   20bcc:	ldr	r0, [sp, #20]
   20bd0:	ldr	r4, [r0]
   20bd4:	ldr	r6, [r0, #24]
   20bd8:	ldm	r5, {r0, r1}
   20bdc:	str	r1, [fp, #-36]	; 0xffffffdc
   20be0:	sub	r2, r9, r8
   20be4:	mov	r3, r5
   20be8:	str	r0, [fp, #-40]	; 0xffffffd8
   20bec:	add	r0, r4, r6
   20bf0:	add	r1, r0, r8
   20bf4:	add	r0, sp, #28
   20bf8:	bl	1b5e8 <__assert_fail@plt+0x993c>
   20bfc:	sub	r4, r0, #1
   20c00:	mov	r6, r0
   20c04:	cmn	r4, #4
   20c08:	bhi	20ce8 <__assert_fail@plt+0xf03c>
   20c0c:	ldr	r0, [sp, #28]
   20c10:	bl	11c4c <towupper@plt>
   20c14:	mov	r7, r0
   20c18:	ldr	r0, [sp, #28]
   20c1c:	cmp	r7, r0
   20c20:	bne	20c44 <__assert_fail@plt+0xef98>
   20c24:	ldr	sl, [sp, #20]
   20c28:	ldr	r1, [sl]
   20c2c:	ldr	r2, [sl, #24]
   20c30:	ldr	r0, [sl, #4]
   20c34:	add	r1, r1, r2
   20c38:	add	r0, r0, r8
   20c3c:	add	r1, r1, r8
   20c40:	b	20c6c <__assert_fail@plt+0xefc0>
   20c44:	mov	r0, sl
   20c48:	mov	r1, r7
   20c4c:	sub	r2, fp, #40	; 0x28
   20c50:	bl	11844 <wcrtomb@plt>
   20c54:	cmp	r6, r0
   20c58:	bne	20d3c <__assert_fail@plt+0xf090>
   20c5c:	mov	r1, sl
   20c60:	ldr	sl, [sp, #20]
   20c64:	ldr	r0, [sl, #4]
   20c68:	add	r0, r0, r8
   20c6c:	mov	r2, r6
   20c70:	bl	118ec <memcpy@plt>
   20c74:	ldr	r0, [sl, #8]
   20c78:	add	r9, r8, #1
   20c7c:	str	r7, [r0, r8, lsl #2]
   20c80:	add	r7, r6, r8
   20c84:	cmp	r9, r7
   20c88:	bge	20b5c <__assert_fail@plt+0xeeb0>
   20c8c:	add	r0, r0, r8, lsl #2
   20c90:	mvn	r1, #3
   20c94:	add	r2, r1, r6, lsl #2
   20c98:	mov	r1, #255	; 0xff
   20c9c:	add	r0, r0, #4
   20ca0:	bl	11b2c <memset@plt>
   20ca4:	sub	r0, r6, #2
   20ca8:	ands	r1, r4, #7
   20cac:	add	sl, sp, #32
   20cb0:	beq	20cc0 <__assert_fail@plt+0xf014>
   20cb4:	subs	r1, r1, #1
   20cb8:	add	r9, r9, #1
   20cbc:	bne	20cb4 <__assert_fail@plt+0xf008>
   20cc0:	ldr	r3, [sp, #20]
   20cc4:	cmp	r0, #7
   20cc8:	bcc	20cdc <__assert_fail@plt+0xf030>
   20ccc:	add	r0, r6, r8
   20cd0:	sub	r0, r0, r9
   20cd4:	subs	r0, r0, #8
   20cd8:	bne	20cd4 <__assert_fail@plt+0xf028>
   20cdc:	ldr	r9, [sp, #16]
   20ce0:	mov	r8, r7
   20ce4:	b	20b6c <__assert_fail@plt+0xeec0>
   20ce8:	ldr	r3, [sp, #20]
   20cec:	add	r0, r6, #1
   20cf0:	cmp	r0, #2
   20cf4:	bcc	20d08 <__assert_fail@plt+0xf05c>
   20cf8:	ldr	r0, [r3, #36]	; 0x24
   20cfc:	ldr	r1, [r3, #48]	; 0x30
   20d00:	cmp	r0, r1
   20d04:	blt	20d48 <__assert_fail@plt+0xf09c>
   20d08:	ldr	r0, [r3, #4]
   20d0c:	cmn	r6, #1
   20d10:	strb	r7, [r0, r8]
   20d14:	ldr	r0, [r3, #8]
   20d18:	str	r7, [r0, r8, lsl #2]
   20d1c:	add	r8, r8, #1
   20d20:	bne	20b6c <__assert_fail@plt+0xeec0>
   20d24:	ldr	r0, [fp, #-40]	; 0xffffffd8
   20d28:	ldr	r1, [fp, #-36]	; 0xffffffdc
   20d2c:	stm	r5, {r0, r1}
   20d30:	b	20b6c <__assert_fail@plt+0xeec0>
   20d34:	mov	r7, r8
   20d38:	b	2112c <__assert_fail@plt+0xf480>
   20d3c:	ldr	r3, [sp, #20]
   20d40:	mov	r7, r8
   20d44:	b	20d64 <__assert_fail@plt+0xf0b8>
   20d48:	ldr	r0, [fp, #-40]	; 0xffffffd8
   20d4c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   20d50:	mov	r7, r8
   20d54:	stm	r5, {r0, r1}
   20d58:	b	2112c <__assert_fail@plt+0xf480>
   20d5c:	cmp	r8, r9
   20d60:	bge	2112c <__assert_fail@plt+0xf480>
   20d64:	mov	r4, r3
   20d68:	mov	sl, r9
   20d6c:	sub	r2, r9, r8
   20d70:	ldr	r0, [r4, #16]!
   20d74:	ldr	r1, [r4, #4]
   20d78:	str	r0, [fp, #-40]	; 0xffffffd8
   20d7c:	str	r1, [fp, #-36]	; 0xffffffdc
   20d80:	ldr	r0, [r4, #48]	; 0x30
   20d84:	cmp	r0, #0
   20d88:	bne	20ea8 <__assert_fail@plt+0xf1fc>
   20d8c:	ldr	r0, [r3]
   20d90:	ldr	r1, [r3, #24]
   20d94:	mov	r9, r7
   20d98:	add	r0, r0, r1
   20d9c:	add	r7, r0, r7
   20da0:	add	r0, sp, #24
   20da4:	mov	r1, r7
   20da8:	mov	r3, r4
   20dac:	bl	1b5e8 <__assert_fail@plt+0x993c>
   20db0:	mov	r5, r0
   20db4:	sub	r0, r0, #1
   20db8:	cmn	r0, #4
   20dbc:	str	r0, [sp, #16]
   20dc0:	bhi	20efc <__assert_fail@plt+0xf250>
   20dc4:	ldr	r0, [sp, #24]
   20dc8:	bl	11c4c <towupper@plt>
   20dcc:	mov	r6, r0
   20dd0:	ldr	r0, [sp, #24]
   20dd4:	cmp	r6, r0
   20dd8:	bne	20de8 <__assert_fail@plt+0xf13c>
   20ddc:	ldr	r4, [sp, #20]
   20de0:	mov	r1, r7
   20de4:	b	20e08 <__assert_fail@plt+0xf15c>
   20de8:	add	r0, sp, #32
   20dec:	sub	r2, fp, #40	; 0x28
   20df0:	mov	r1, r6
   20df4:	bl	11844 <wcrtomb@plt>
   20df8:	cmp	r0, r5
   20dfc:	bne	20f7c <__assert_fail@plt+0xf2d0>
   20e00:	ldr	r4, [sp, #20]
   20e04:	add	r1, sp, #32
   20e08:	ldr	r0, [r4, #4]
   20e0c:	add	r0, r0, r8
   20e10:	mov	r2, r5
   20e14:	bl	118ec <memcpy@plt>
   20e18:	ldrb	r0, [r4, #76]	; 0x4c
   20e1c:	mov	r7, r9
   20e20:	mov	r9, sl
   20e24:	mov	r3, r4
   20e28:	cmp	r0, #0
   20e2c:	bne	21030 <__assert_fail@plt+0xf384>
   20e30:	ldr	r0, [r3, #8]
   20e34:	add	r4, r5, r8
   20e38:	add	r7, r5, r7
   20e3c:	str	r6, [r0, r8, lsl #2]
   20e40:	add	r6, r8, #1
   20e44:	cmp	r6, r4
   20e48:	bge	20ea0 <__assert_fail@plt+0xf1f4>
   20e4c:	mvn	r1, #3
   20e50:	add	r0, r0, r6, lsl #2
   20e54:	add	r2, r1, r5, lsl #2
   20e58:	mov	r1, #255	; 0xff
   20e5c:	bl	11b2c <memset@plt>
   20e60:	ldr	r1, [sp, #16]
   20e64:	sub	r0, r5, #2
   20e68:	ands	r1, r1, #7
   20e6c:	beq	20e7c <__assert_fail@plt+0xf1d0>
   20e70:	subs	r1, r1, #1
   20e74:	add	r6, r6, #1
   20e78:	bne	20e70 <__assert_fail@plt+0xf1c4>
   20e7c:	ldr	r3, [sp, #20]
   20e80:	cmp	r0, #7
   20e84:	bcc	20e98 <__assert_fail@plt+0xf1ec>
   20e88:	add	r0, r5, r8
   20e8c:	sub	r0, r0, r6
   20e90:	subs	r0, r0, #8
   20e94:	bne	20e90 <__assert_fail@plt+0xf1e4>
   20e98:	mov	r8, r4
   20e9c:	b	20d5c <__assert_fail@plt+0xf0b0>
   20ea0:	mov	r8, r6
   20ea4:	b	20d5c <__assert_fail@plt+0xf0b0>
   20ea8:	cmp	r2, #1
   20eac:	mov	r9, r7
   20eb0:	add	r7, sp, #32
   20eb4:	ldrge	r1, [r3, #80]	; 0x50
   20eb8:	cmpge	r1, #1
   20ebc:	blt	20da0 <__assert_fail@plt+0xf0f4>
   20ec0:	ldr	r7, [r3, #24]
   20ec4:	ldr	r6, [r3]
   20ec8:	add	r7, r9, r7
   20ecc:	add	r3, r6, r7
   20ed0:	mov	r6, #0
   20ed4:	add	r7, sp, #32
   20ed8:	ldrb	r5, [r3, r6]
   20edc:	ldrb	r5, [r0, r5]
   20ee0:	strb	r5, [r7, r6]
   20ee4:	add	r6, r6, #1
   20ee8:	cmp	r6, r2
   20eec:	bge	20da0 <__assert_fail@plt+0xf0f4>
   20ef0:	cmp	r6, r1
   20ef4:	blt	20ed8 <__assert_fail@plt+0xf22c>
   20ef8:	b	20da0 <__assert_fail@plt+0xf0f4>
   20efc:	ldr	r3, [sp, #20]
   20f00:	add	r0, r5, #1
   20f04:	cmp	r0, #2
   20f08:	bcc	20f1c <__assert_fail@plt+0xf270>
   20f0c:	ldr	r0, [r3, #36]	; 0x24
   20f10:	ldr	r1, [r3, #48]	; 0x30
   20f14:	cmp	r0, r1
   20f18:	blt	2111c <__assert_fail@plt+0xf470>
   20f1c:	ldr	r2, [r3, #24]
   20f20:	ldr	r0, [r3]
   20f24:	ldr	r1, [r3, #64]	; 0x40
   20f28:	mov	r7, r9
   20f2c:	add	r2, r2, r9
   20f30:	cmp	r1, #0
   20f34:	ldrb	r0, [r0, r2]
   20f38:	bne	213b0 <__assert_fail@plt+0xf704>
   20f3c:	ldr	r1, [r3, #4]
   20f40:	mov	r9, sl
   20f44:	strb	r0, [r1, r8]
   20f48:	ldrb	r1, [r3, #76]	; 0x4c
   20f4c:	cmp	r1, #0
   20f50:	bne	213b8 <__assert_fail@plt+0xf70c>
   20f54:	ldr	r1, [r3, #8]
   20f58:	add	r7, r7, #1
   20f5c:	cmn	r5, #1
   20f60:	str	r0, [r1, r8, lsl #2]
   20f64:	add	r8, r8, #1
   20f68:	bne	20d5c <__assert_fail@plt+0xf0b0>
   20f6c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   20f70:	ldr	r1, [fp, #-36]	; 0xffffffdc
   20f74:	stm	r4, {r0, r1}
   20f78:	b	20d5c <__assert_fail@plt+0xf0b0>
   20f7c:	ldr	r3, [sp, #20]
   20f80:	mov	r2, r0
   20f84:	cmn	r0, #1
   20f88:	beq	210ac <__assert_fail@plt+0xf400>
   20f8c:	ldr	r1, [r3, #36]	; 0x24
   20f90:	add	r0, r2, r8
   20f94:	cmp	r0, r1
   20f98:	bhi	2111c <__assert_fail@plt+0xf470>
   20f9c:	str	r0, [sp, #12]
   20fa0:	ldr	r0, [r3, #12]
   20fa4:	mov	r7, r9
   20fa8:	cmp	r0, #0
   20fac:	bne	20fd0 <__assert_fail@plt+0xf324>
   20fb0:	lsl	r0, r1, #2
   20fb4:	mov	r4, r2
   20fb8:	bl	1b5b8 <__assert_fail@plt+0x990c>
   20fbc:	ldr	r3, [sp, #20]
   20fc0:	mov	r2, r4
   20fc4:	cmp	r0, #0
   20fc8:	str	r0, [r3, #12]
   20fcc:	beq	213a4 <__assert_fail@plt+0xf6f8>
   20fd0:	ldrb	r1, [r3, #76]	; 0x4c
   20fd4:	ldr	r9, [sp, #16]
   20fd8:	cmp	r1, #0
   20fdc:	bne	211fc <__assert_fail@plt+0xf550>
   20fe0:	cmp	r8, #0
   20fe4:	beq	211f4 <__assert_fail@plt+0xf548>
   20fe8:	mov	r1, #0
   20fec:	cmp	r8, #4
   20ff0:	bcc	211e4 <__assert_fail@plt+0xf538>
   20ff4:	bic	r1, r8, #3
   20ff8:	stmib	sp, {r2, r7}
   20ffc:	mov	r2, #1
   21000:	add	r3, pc, #968	; 0x3c8
   21004:	sub	r7, r1, #4
   21008:	add	r2, r2, r7, lsr #2
   2100c:	cmp	r7, #12
   21010:	and	r4, r2, #3
   21014:	bcs	21140 <__assert_fail@plt+0xf494>
   21018:	vld1.64	{d16-d17}, [r3 :128]
   2101c:	mov	sl, r4
   21020:	mov	r3, #0
   21024:	cmp	sl, #0
   21028:	bne	211b4 <__assert_fail@plt+0xf508>
   2102c:	b	211d4 <__assert_fail@plt+0xf528>
   21030:	ldr	lr, [r3, #12]
   21034:	mov	r1, #0
   21038:	cmp	r5, #4
   2103c:	bcc	210f8 <__assert_fail@plt+0xf44c>
   21040:	vdup.32	q8, r7
   21044:	bic	r1, r5, #3
   21048:	mov	r3, #1
   2104c:	mov	r9, r7
   21050:	subs	r2, r1, #4
   21054:	add	r2, r3, r2, lsr #2
   21058:	add	r3, pc, #880	; 0x370
   2105c:	and	ip, r2, #1
   21060:	beq	210c4 <__assert_fail@plt+0xf418>
   21064:	sub	r4, r2, ip
   21068:	add	r2, pc, #864	; 0x360
   2106c:	vmov.i32	q10, #4	; 0x00000004
   21070:	vmov.i32	q11, #8	; 0x00000008
   21074:	add	r7, lr, r8, lsl #2
   21078:	mov	r3, #0
   2107c:	vld1.64	{d18-d19}, [r2 :128]
   21080:	mov	r2, #32
   21084:	vadd.i32	q12, q9, q8
   21088:	vadd.i32	q9, q9, q11
   2108c:	add	r0, r7, #16
   21090:	subs	r4, r4, #2
   21094:	add	r3, r3, #8
   21098:	vadd.i32	q13, q12, q10
   2109c:	vst1.32	{d24-d25}, [r7], r2
   210a0:	vst1.32	{d26-d27}, [r0]
   210a4:	bne	21084 <__assert_fail@plt+0xf3d8>
   210a8:	b	210cc <__assert_fail@plt+0xf420>
   210ac:	ldr	r0, [r3, #4]
   210b0:	mov	r1, r7
   210b4:	mov	r2, r5
   210b8:	mov	r4, r3
   210bc:	add	r0, r0, r8
   210c0:	b	20e14 <__assert_fail@plt+0xf168>
   210c4:	vld1.64	{d18-d19}, [r3 :128]
   210c8:	mov	r3, #0
   210cc:	cmp	ip, #0
   210d0:	beq	210e4 <__assert_fail@plt+0xf438>
   210d4:	add	r0, r3, r8
   210d8:	vadd.i32	q8, q9, q8
   210dc:	add	r0, lr, r0, lsl #2
   210e0:	vst1.32	{d16-d17}, [r0]
   210e4:	ldr	r3, [sp, #20]
   210e8:	mov	r7, r9
   210ec:	cmp	r5, r1
   210f0:	mov	r9, sl
   210f4:	beq	20e30 <__assert_fail@plt+0xf184>
   210f8:	add	r0, r8, r1
   210fc:	add	r2, r7, r1
   21100:	sub	r4, r5, r1
   21104:	add	r0, lr, r0, lsl #2
   21108:	str	r2, [r0], #4
   2110c:	add	r2, r2, #1
   21110:	subs	r4, r4, #1
   21114:	bne	21108 <__assert_fail@plt+0xf45c>
   21118:	b	20e30 <__assert_fail@plt+0xf184>
   2111c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   21120:	mov	r7, r9
   21124:	ldr	r1, [fp, #-36]	; 0xffffffdc
   21128:	stm	r4, {r0, r1}
   2112c:	str	r8, [r3, #28]
   21130:	str	r7, [r3, #32]
   21134:	mov	r0, #0
   21138:	sub	sp, fp, #28
   2113c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21140:	mov	sl, r4
   21144:	sub	r4, r2, r4
   21148:	add	r2, pc, #640	; 0x280
   2114c:	vmov.i32	q9, #12	; 0x0000000c
   21150:	vmov.i32	q10, #8	; 0x00000008
   21154:	vmov.i32	q11, #4	; 0x00000004
   21158:	vmov.i32	q12, #16	; 0x00000010
   2115c:	mov	r3, #0
   21160:	mov	lr, #64	; 0x40
   21164:	mov	r7, r0
   21168:	vld1.64	{d16-d17}, [r2 :128]
   2116c:	mov	r2, r0
   21170:	vadd.i32	q13, q8, q9
   21174:	add	ip, r2, #48	; 0x30
   21178:	vadd.i32	q14, q8, q10
   2117c:	vadd.i32	q15, q8, q11
   21180:	subs	r4, r4, #4
   21184:	add	r3, r3, #16
   21188:	vst1.32	{d26-d27}, [ip]
   2118c:	vst1.32	{d16-d17}, [r7], lr
   21190:	vadd.i32	q8, q8, q12
   21194:	add	ip, r2, #32
   21198:	add	r2, r2, #16
   2119c:	vst1.32	{d28-d29}, [ip]
   211a0:	vst1.32	{d30-d31}, [r2]
   211a4:	mov	r2, r7
   211a8:	bne	21170 <__assert_fail@plt+0xf4c4>
   211ac:	cmp	sl, #0
   211b0:	beq	211d4 <__assert_fail@plt+0xf528>
   211b4:	vmov.i32	q9, #4	; 0x00000004
   211b8:	add	r2, r0, r3, lsl #2
   211bc:	rsb	r3, sl, #0
   211c0:	vadd.i32	q10, q8, q9
   211c4:	vst1.32	{d16-d17}, [r2]!
   211c8:	adds	r3, r3, #1
   211cc:	vorr	q8, q10, q10
   211d0:	bcc	211c0 <__assert_fail@plt+0xf514>
   211d4:	ldr	r3, [sp, #20]
   211d8:	ldmib	sp, {r2, r7}
   211dc:	cmp	r8, r1
   211e0:	beq	211f4 <__assert_fail@plt+0xf548>
   211e4:	str	r1, [r0, r1, lsl #2]
   211e8:	add	r1, r1, #1
   211ec:	cmp	r8, r1
   211f0:	bne	211e4 <__assert_fail@plt+0xf538>
   211f4:	mov	r0, #1
   211f8:	strb	r0, [r3, #76]	; 0x4c
   211fc:	ldr	r0, [r3, #4]
   21200:	add	r1, sp, #32
   21204:	mov	r4, r3
   21208:	mov	sl, r2
   2120c:	add	r0, r0, r8
   21210:	bl	118ec <memcpy@plt>
   21214:	ldr	r0, [r4, #8]
   21218:	cmp	sl, #2
   2121c:	str	r6, [r0, r8, lsl #2]
   21220:	mov	r6, r7
   21224:	ldr	r1, [r4, #12]
   21228:	str	r7, [r1, r8, lsl #2]
   2122c:	bcc	2135c <__assert_fail@plt+0xf6b0>
   21230:	sub	lr, sl, #1
   21234:	mov	ip, r6
   21238:	mov	r2, #1
   2123c:	cmp	lr, #4
   21240:	bcc	212c4 <__assert_fail@plt+0xf618>
   21244:	add	r7, sl, r8
   21248:	add	r4, r8, #1
   2124c:	str	ip, [sp, #8]
   21250:	add	r6, r0, r4, lsl #2
   21254:	add	r3, r0, r7, lsl #2
   21258:	add	r4, r1, r4, lsl #2
   2125c:	cmp	r4, r3
   21260:	addcc	r3, r1, r7, lsl #2
   21264:	cmpcc	r6, r3
   21268:	bcc	212c4 <__assert_fail@plt+0xf618>
   2126c:	add	r2, pc, #364	; 0x16c
   21270:	ldr	r3, [sp, #8]
   21274:	vdup.32	q9, r9
   21278:	vdup.32	q10, r5
   2127c:	vmov.i32	q12, #4	; 0x00000004
   21280:	vmov.i8	q13, #255	; 0xff
   21284:	vld1.64	{d22-d23}, [r2 :128]
   21288:	vdup.32	q8, r3
   2128c:	bic	r3, lr, #3
   21290:	orr	r2, r3, #1
   21294:	mov	r7, r3
   21298:	vcgt.u32	q14, q10, q11
   2129c:	subs	r7, r7, #4
   212a0:	vbsl	q14, q11, q9
   212a4:	vadd.i32	q11, q11, q12
   212a8:	vadd.i32	q14, q14, q8
   212ac:	vst1.32	{d28-d29}, [r4]!
   212b0:	vst1.32	{d26-d27}, [r6]!
   212b4:	bne	21298 <__assert_fail@plt+0xf5ec>
   212b8:	cmp	lr, r3
   212bc:	mov	r6, ip
   212c0:	beq	2135c <__assert_fail@plt+0xf6b0>
   212c4:	tst	sl, #1
   212c8:	mov	r3, r2
   212cc:	bne	212f4 <__assert_fail@plt+0xf648>
   212d0:	cmp	r2, r5
   212d4:	mov	r3, r9
   212d8:	add	r7, r2, r8
   212dc:	movcc	r3, r2
   212e0:	add	r3, r3, ip
   212e4:	str	r3, [r1, r7, lsl #2]
   212e8:	mvn	r3, #0
   212ec:	str	r3, [r0, r7, lsl #2]
   212f0:	add	r3, r2, #1
   212f4:	add	r2, r2, #1
   212f8:	mov	r6, ip
   212fc:	cmp	sl, r2
   21300:	beq	2135c <__assert_fail@plt+0xf6b0>
   21304:	add	r2, r8, r3
   21308:	add	r2, r2, #1
   2130c:	add	r1, r1, r2, lsl #2
   21310:	add	r0, r0, r2, lsl #2
   21314:	mvn	r2, #0
   21318:	cmp	r3, r5
   2131c:	mov	r7, r9
   21320:	movcc	r7, r3
   21324:	add	r7, r7, r6
   21328:	str	r7, [r1, #-4]
   2132c:	add	r7, r3, #1
   21330:	add	r3, r3, #2
   21334:	str	r2, [r0, #-4]
   21338:	cmp	r7, r5
   2133c:	movcs	r7, r9
   21340:	cmp	r3, sl
   21344:	add	r7, r7, r6
   21348:	str	r7, [r1]
   2134c:	str	r2, [r0]
   21350:	add	r1, r1, #8
   21354:	add	r0, r0, #8
   21358:	bne	21318 <__assert_fail@plt+0xf66c>
   2135c:	ldr	r3, [sp, #20]
   21360:	sub	r1, sl, r5
   21364:	mov	r7, r6
   21368:	ldr	r0, [r3, #48]	; 0x30
   2136c:	ldr	r2, [r3, #52]	; 0x34
   21370:	add	r0, r0, r1
   21374:	cmp	r2, r6
   21378:	str	r0, [r3, #48]	; 0x30
   2137c:	ble	2138c <__assert_fail@plt+0xf6e0>
   21380:	ldr	r2, [r3, #56]	; 0x38
   21384:	add	r1, r2, r1
   21388:	str	r1, [r3, #56]	; 0x38
   2138c:	ldr	r9, [r3, #36]	; 0x24
   21390:	ldr	r8, [sp, #12]
   21394:	add	r7, r5, r7
   21398:	cmp	r9, r0
   2139c:	movgt	r9, r0
   213a0:	b	20d5c <__assert_fail@plt+0xf0b0>
   213a4:	mov	r0, #12
   213a8:	sub	sp, fp, #28
   213ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   213b0:	ldrb	r0, [r1, r0]
   213b4:	b	20f3c <__assert_fail@plt+0xf290>
   213b8:	ldr	r1, [r3, #12]
   213bc:	str	r7, [r1, r8, lsl #2]
   213c0:	b	20f54 <__assert_fail@plt+0xf2a8>
   213c4:	nop	{0}
   213c8:	nop	{0}
   213cc:	nop	{0}
   213d0:	andeq	r0, r0, r0
   213d4:	andeq	r0, r0, r1
   213d8:	andeq	r0, r0, r2
   213dc:	andeq	r0, r0, r3
   213e0:	andeq	r0, r0, r1
   213e4:	andeq	r0, r0, r2
   213e8:	andeq	r0, r0, r3
   213ec:	andeq	r0, r0, r4
   213f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   213f4:	add	fp, sp, #28
   213f8:	sub	sp, sp, #68	; 0x44
   213fc:	mov	r4, r0
   21400:	ldr	r8, [r0, #28]
   21404:	ldr	r5, [r0, #36]	; 0x24
   21408:	ldr	r0, [r0, #48]	; 0x30
   2140c:	cmp	r5, r0
   21410:	movgt	r5, r0
   21414:	cmp	r5, r8
   21418:	ble	215e4 <__assert_fail@plt+0xf938>
   2141c:	add	r9, r4, #16
   21420:	mov	r0, sp
   21424:	ldr	r3, [r4, #64]	; 0x40
   21428:	ldm	r9, {r6, sl}
   2142c:	sub	r2, r5, r8
   21430:	cmp	r3, #0
   21434:	bne	21528 <__assert_fail@plt+0xf87c>
   21438:	ldr	r3, [r4]
   2143c:	ldr	r1, [r4, #24]
   21440:	add	r1, r3, r1
   21444:	add	r1, r1, r8
   21448:	mov	r3, r9
   2144c:	bl	1b5e8 <__assert_fail@plt+0x993c>
   21450:	mov	r7, r0
   21454:	add	r0, r0, #1
   21458:	cmp	r0, #2
   2145c:	bcc	21478 <__assert_fail@plt+0xf7cc>
   21460:	cmn	r7, #2
   21464:	bne	214a4 <__assert_fail@plt+0xf7f8>
   21468:	ldr	r0, [r4, #36]	; 0x24
   2146c:	ldr	r1, [r4, #48]	; 0x30
   21470:	cmp	r0, r1
   21474:	blt	215e0 <__assert_fail@plt+0xf934>
   21478:	ldr	r1, [r4, #24]
   2147c:	ldr	r0, [r4]
   21480:	add	r1, r1, r8
   21484:	ldrb	r0, [r0, r1]
   21488:	str	r0, [sp]
   2148c:	ldr	r1, [r4, #64]	; 0x40
   21490:	cmp	r1, #0
   21494:	bne	215d4 <__assert_fail@plt+0xf928>
   21498:	mov	r7, #1
   2149c:	stm	r9, {r6, sl}
   214a0:	b	214a8 <__assert_fail@plt+0xf7fc>
   214a4:	ldr	r0, [sp]
   214a8:	ldr	r1, [r4, #8]
   214ac:	add	sl, r7, r8
   214b0:	add	r6, r8, #1
   214b4:	cmp	r6, sl
   214b8:	str	r0, [r1, r8, lsl #2]
   214bc:	bge	21514 <__assert_fail@plt+0xf868>
   214c0:	mvn	r0, #3
   214c4:	add	r2, r0, r7, lsl #2
   214c8:	add	r0, r1, r8, lsl #2
   214cc:	mov	r1, #255	; 0xff
   214d0:	add	r0, r0, #4
   214d4:	bl	11b2c <memset@plt>
   214d8:	sub	r1, r7, #1
   214dc:	sub	r0, r7, #2
   214e0:	ands	r1, r1, #7
   214e4:	beq	214f4 <__assert_fail@plt+0xf848>
   214e8:	subs	r1, r1, #1
   214ec:	add	r6, r6, #1
   214f0:	bne	214e8 <__assert_fail@plt+0xf83c>
   214f4:	cmp	r0, #7
   214f8:	bcc	2150c <__assert_fail@plt+0xf860>
   214fc:	add	r0, r7, r8
   21500:	sub	r0, r0, r6
   21504:	subs	r0, r0, #8
   21508:	bne	21504 <__assert_fail@plt+0xf858>
   2150c:	mov	r8, sl
   21510:	b	21518 <__assert_fail@plt+0xf86c>
   21514:	mov	r8, r6
   21518:	mov	r0, sp
   2151c:	cmp	r5, r8
   21520:	bgt	21424 <__assert_fail@plt+0xf778>
   21524:	b	215e4 <__assert_fail@plt+0xf938>
   21528:	cmp	r2, #1
   2152c:	add	r1, sp, #4
   21530:	blt	21448 <__assert_fail@plt+0xf79c>
   21534:	ldr	r1, [r4, #80]	; 0x50
   21538:	cmp	r1, #1
   2153c:	add	r1, sp, #4
   21540:	blt	21448 <__assert_fail@plt+0xf79c>
   21544:	ldr	r7, [r4, #24]
   21548:	ldm	r4, {r1, ip}
   2154c:	cmp	r2, #2
   21550:	add	r7, r8, r7
   21554:	ldrb	r1, [r1, r7]
   21558:	ldrb	r1, [r3, r1]
   2155c:	strb	r1, [ip, r8]
   21560:	strb	r1, [sp, #4]
   21564:	add	r1, sp, #4
   21568:	blt	21448 <__assert_fail@plt+0xf79c>
   2156c:	ldr	r1, [r4, #80]	; 0x50
   21570:	cmp	r1, #2
   21574:	add	r1, sp, #4
   21578:	blt	21448 <__assert_fail@plt+0xf79c>
   2157c:	mov	lr, r0
   21580:	mov	r0, #1
   21584:	ldr	r7, [r4, #24]
   21588:	ldm	r4, {r1, ip}
   2158c:	ldr	r3, [r4, #64]	; 0x40
   21590:	add	r1, r1, r7
   21594:	add	r1, r1, r8
   21598:	ldrb	r1, [r1, r0]
   2159c:	ldrb	r1, [r3, r1]
   215a0:	add	r3, ip, r8
   215a4:	strb	r1, [r3, r0]
   215a8:	add	r3, sp, #4
   215ac:	strb	r1, [r3, r0]
   215b0:	add	r0, r0, #1
   215b4:	cmp	r0, r2
   215b8:	bge	215c8 <__assert_fail@plt+0xf91c>
   215bc:	ldr	r1, [r4, #80]	; 0x50
   215c0:	cmp	r0, r1
   215c4:	blt	21584 <__assert_fail@plt+0xf8d8>
   215c8:	add	r1, sp, #4
   215cc:	mov	r0, lr
   215d0:	b	21448 <__assert_fail@plt+0xf79c>
   215d4:	ldrb	r0, [r1, r0]
   215d8:	str	r0, [sp]
   215dc:	b	21498 <__assert_fail@plt+0xf7ec>
   215e0:	stm	r9, {r6, sl}
   215e4:	str	r8, [r4, #28]
   215e8:	str	r8, [r4, #32]
   215ec:	sub	sp, fp, #28
   215f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   215f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   215f8:	add	fp, sp, #28
   215fc:	sub	sp, sp, #28
   21600:	ldr	r9, [r1]
   21604:	mov	r5, r0
   21608:	ldr	r4, [fp, #12]
   2160c:	mov	r6, r2
   21610:	str	r1, [sp, #16]
   21614:	str	r3, [sp, #20]
   21618:	ldr	r0, [r9, #84]	; 0x54
   2161c:	str	r4, [sp, #4]
   21620:	str	r0, [sp, #12]
   21624:	ldr	r0, [fp, #8]
   21628:	str	r0, [sp]
   2162c:	mov	r0, r5
   21630:	bl	2209c <__assert_fail@plt+0x103f0>
   21634:	mov	r7, r0
   21638:	cmp	r0, #0
   2163c:	bne	2164c <__assert_fail@plt+0xf9a0>
   21640:	ldr	r0, [r4]
   21644:	cmp	r0, #0
   21648:	bne	21858 <__assert_fail@plt+0xfbac>
   2164c:	ldrb	r0, [r6, #4]
   21650:	cmp	r0, #10
   21654:	bne	21794 <__assert_fail@plt+0xfae8>
   21658:	ldr	r0, [sp, #20]
   2165c:	mov	sl, #0
   21660:	orr	r0, r0, #8388608	; 0x800000
   21664:	str	r0, [sp, #24]
   21668:	ldr	r2, [sp, #24]
   2166c:	mov	r0, r6
   21670:	mov	r1, r5
   21674:	bl	21860 <__assert_fail@plt+0xfbb4>
   21678:	ldr	r1, [r5, #40]	; 0x28
   2167c:	mov	r8, #0
   21680:	add	r0, r1, r0
   21684:	str	r0, [r5, #40]	; 0x28
   21688:	ldrb	r0, [r6, #4]
   2168c:	orr	r1, r0, #8
   21690:	cmp	r1, #10
   21694:	bne	216f8 <__assert_fail@plt+0xfa4c>
   21698:	ldr	r1, [r9, #64]	; 0x40
   2169c:	cmp	r1, #31
   216a0:	beq	2176c <__assert_fail@plt+0xfac0>
   216a4:	ldr	r0, [r9, #56]	; 0x38
   216a8:	add	r4, r0, r1, lsl #5
   216ac:	add	r2, r1, #1
   216b0:	mov	r0, #10
   216b4:	cmp	r7, #0
   216b8:	str	r2, [r9, #64]	; 0x40
   216bc:	str	sl, [r4, #4]!
   216c0:	stmib	r4, {r7, r8, sl}
   216c4:	str	sl, [r4, #16]
   216c8:	str	sl, [r4, #20]
   216cc:	str	r0, [r4, #24]
   216d0:	mvn	r0, #0
   216d4:	str	r0, [r4, #28]
   216d8:	strne	r4, [r7]
   216dc:	cmp	r8, #0
   216e0:	mov	r7, r4
   216e4:	strne	r4, [r8]
   216e8:	ldrb	r0, [r6, #4]
   216ec:	cmp	r0, #10
   216f0:	beq	21668 <__assert_fail@plt+0xf9bc>
   216f4:	b	21798 <__assert_fail@plt+0xfaec>
   216f8:	ldr	r1, [fp, #8]
   216fc:	cmp	r1, #0
   21700:	beq	21710 <__assert_fail@plt+0xfa64>
   21704:	cmp	r0, #9
   21708:	mov	r8, #0
   2170c:	beq	21698 <__assert_fail@plt+0xf9ec>
   21710:	ldr	r0, [sp, #12]
   21714:	ldr	r4, [r9, #84]	; 0x54
   21718:	ldr	r1, [sp, #16]
   2171c:	ldr	r3, [sp, #20]
   21720:	mov	r2, r6
   21724:	str	r0, [r9, #84]	; 0x54
   21728:	ldr	r0, [fp, #8]
   2172c:	str	r0, [sp]
   21730:	ldr	r0, [fp, #12]
   21734:	str	r0, [sp, #4]
   21738:	mov	r0, r5
   2173c:	bl	2209c <__assert_fail@plt+0x103f0>
   21740:	mov	r8, r0
   21744:	cmp	r0, #0
   21748:	bne	2175c <__assert_fail@plt+0xfab0>
   2174c:	ldr	r0, [fp, #12]
   21750:	ldr	r0, [r0]
   21754:	cmp	r0, #0
   21758:	bne	217a4 <__assert_fail@plt+0xfaf8>
   2175c:	ldr	r0, [r9, #84]	; 0x54
   21760:	orr	r0, r0, r4
   21764:	str	r0, [r9, #84]	; 0x54
   21768:	b	21698 <__assert_fail@plt+0xf9ec>
   2176c:	mov	r0, #996	; 0x3e4
   21770:	bl	1b5b8 <__assert_fail@plt+0x990c>
   21774:	cmp	r0, #0
   21778:	beq	2184c <__assert_fail@plt+0xfba0>
   2177c:	ldr	r1, [r9, #56]	; 0x38
   21780:	str	r1, [r0]
   21784:	mov	r1, #0
   21788:	str	r1, [r9, #64]	; 0x40
   2178c:	str	r0, [r9, #56]	; 0x38
   21790:	b	216a8 <__assert_fail@plt+0xf9fc>
   21794:	mov	r4, r7
   21798:	mov	r0, r4
   2179c:	sub	sp, fp, #28
   217a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217a4:	mov	r4, #0
   217a8:	cmp	r7, #0
   217ac:	beq	21798 <__assert_fail@plt+0xfaec>
   217b0:	movw	r8, #255	; 0xff
   217b4:	movt	r8, #4
   217b8:	mov	r6, r7
   217bc:	ldr	r7, [r7, #4]
   217c0:	cmp	r7, #0
   217c4:	bne	217b8 <__assert_fail@plt+0xfb0c>
   217c8:	ldr	r7, [r6, #8]
   217cc:	cmp	r7, #0
   217d0:	bne	217b8 <__assert_fail@plt+0xfb0c>
   217d4:	ldr	r0, [r6, #24]
   217d8:	and	r0, r0, r8
   217dc:	cmp	r0, #3
   217e0:	beq	21814 <__assert_fail@plt+0xfb68>
   217e4:	cmp	r0, #6
   217e8:	bne	21820 <__assert_fail@plt+0xfb74>
   217ec:	ldr	r5, [r6, #20]
   217f0:	ldr	r0, [r5]
   217f4:	bl	1b4e8 <__assert_fail@plt+0x983c>
   217f8:	ldr	r0, [r5, #4]
   217fc:	bl	1b4e8 <__assert_fail@plt+0x983c>
   21800:	ldr	r0, [r5, #8]
   21804:	bl	1b4e8 <__assert_fail@plt+0x983c>
   21808:	ldr	r0, [r5, #12]
   2180c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   21810:	b	21818 <__assert_fail@plt+0xfb6c>
   21814:	ldr	r5, [r6, #20]
   21818:	mov	r0, r5
   2181c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   21820:	ldr	r0, [r6]
   21824:	cmp	r0, #0
   21828:	beq	21798 <__assert_fail@plt+0xfaec>
   2182c:	ldr	r7, [r0, #8]
   21830:	cmp	r7, r6
   21834:	mov	r6, r0
   21838:	beq	217d4 <__assert_fail@plt+0xfb28>
   2183c:	cmp	r7, #0
   21840:	mov	r6, r0
   21844:	beq	217d4 <__assert_fail@plt+0xfb28>
   21848:	b	217b8 <__assert_fail@plt+0xfb0c>
   2184c:	ldr	r1, [fp, #12]
   21850:	mov	r0, #12
   21854:	str	r0, [r1]
   21858:	mov	r4, #0
   2185c:	b	21798 <__assert_fail@plt+0xfaec>
   21860:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21864:	add	fp, sp, #24
   21868:	sub	sp, sp, #8
   2186c:	mov	r9, r0
   21870:	mov	r7, r1
   21874:	ldr	r0, [r1, #40]	; 0x28
   21878:	ldr	r1, [r1, #56]	; 0x38
   2187c:	cmp	r1, r0
   21880:	ble	21968 <__assert_fail@plt+0xfcbc>
   21884:	ldr	r1, [r7, #4]
   21888:	mov	r5, r9
   2188c:	mov	r8, r2
   21890:	ldrb	r6, [r1, r0]
   21894:	strb	r6, [r5], #4
   21898:	ldr	r0, [r5]
   2189c:	bic	r1, r0, #6291456	; 0x600000
   218a0:	str	r1, [r5]
   218a4:	ldr	r3, [r7, #80]	; 0x50
   218a8:	cmp	r3, #2
   218ac:	blt	218d0 <__assert_fail@plt+0xfc24>
   218b0:	ldr	r2, [r7, #28]
   218b4:	ldr	r1, [r7, #40]	; 0x28
   218b8:	cmp	r1, r2
   218bc:	beq	218d0 <__assert_fail@plt+0xfc24>
   218c0:	ldr	r2, [r7, #8]
   218c4:	ldr	r1, [r2, r1, lsl #2]
   218c8:	cmn	r1, #1
   218cc:	beq	21da4 <__assert_fail@plt+0x100f8>
   218d0:	movw	r1, #65280	; 0xff00
   218d4:	cmp	r6, #92	; 0x5c
   218d8:	movt	r1, #65439	; 0xff9f
   218dc:	bne	21978 <__assert_fail@plt+0xfccc>
   218e0:	ldr	r6, [r7, #40]	; 0x28
   218e4:	ldr	r4, [r7, #48]	; 0x30
   218e8:	add	r2, r6, #1
   218ec:	cmp	r2, r4
   218f0:	bge	219cc <__assert_fail@plt+0xfd20>
   218f4:	ldrb	r4, [r7, #75]	; 0x4b
   218f8:	cmp	r4, #0
   218fc:	bne	22028 <__assert_fail@plt+0x1037c>
   21900:	ldr	r3, [r7, #4]
   21904:	ldrb	r6, [r3, r2]
   21908:	and	r0, r0, r1
   2190c:	strb	r6, [r9]
   21910:	orr	r4, r0, #1
   21914:	str	r4, [r9, #4]
   21918:	ldr	r0, [r7, #80]	; 0x50
   2191c:	cmp	r0, #2
   21920:	blt	21bf0 <__assert_fail@plt+0xff44>
   21924:	ldr	r0, [r7, #8]
   21928:	ldr	r1, [r7, #40]	; 0x28
   2192c:	add	r0, r0, r1, lsl #2
   21930:	ldr	r4, [r0, #4]
   21934:	mov	r0, r4
   21938:	bl	11afc <iswalnum@plt>
   2193c:	sub	r1, r4, #95	; 0x5f
   21940:	cmp	r0, #0
   21944:	clz	r1, r1
   21948:	movwne	r0, #1
   2194c:	lsr	r1, r1, #5
   21950:	orr	r0, r1, r0
   21954:	ldr	r1, [r5]
   21958:	bic	r1, r1, #4194304	; 0x400000
   2195c:	orr	r0, r1, r0, lsl #22
   21960:	uxtb	r1, r6
   21964:	b	21c14 <__assert_fail@plt+0xff68>
   21968:	mov	r0, #2
   2196c:	mov	r4, #0
   21970:	strb	r0, [r9, #4]
   21974:	b	2201c <__assert_fail@plt+0x10370>
   21978:	and	r0, r0, r1
   2197c:	orr	r4, r0, #1
   21980:	str	r4, [r5]
   21984:	ldr	r0, [r7, #80]	; 0x50
   21988:	cmp	r0, #2
   2198c:	blt	219d8 <__assert_fail@plt+0xfd2c>
   21990:	ldr	r0, [r7, #8]
   21994:	ldr	r1, [r7, #40]	; 0x28
   21998:	ldr	r4, [r0, r1, lsl #2]
   2199c:	mov	r0, r4
   219a0:	bl	11afc <iswalnum@plt>
   219a4:	sub	r1, r4, #95	; 0x5f
   219a8:	cmp	r0, #0
   219ac:	clz	r1, r1
   219b0:	movwne	r0, #1
   219b4:	lsr	r1, r1, #5
   219b8:	orr	r0, r1, r0
   219bc:	ldr	r1, [r5]
   219c0:	bic	r1, r1, #4194304	; 0x400000
   219c4:	orr	r0, r1, r0, lsl #22
   219c8:	b	219f8 <__assert_fail@plt+0xfd4c>
   219cc:	and	r0, r0, r1
   219d0:	orr	r0, r0, #36	; 0x24
   219d4:	b	21db8 <__assert_fail@plt+0x1010c>
   219d8:	bl	11a84 <__ctype_b_loc@plt>
   219dc:	ldr	r0, [r0]
   219e0:	cmp	r6, #95	; 0x5f
   219e4:	add	r0, r0, r6, lsl #1
   219e8:	ldrh	r0, [r0]
   219ec:	ubfx	r0, r0, #3, #1
   219f0:	movweq	r0, #1
   219f4:	orr	r0, r4, r0, lsl #22
   219f8:	sub	r1, r6, #10
   219fc:	mov	r4, #1
   21a00:	str	r0, [r5]
   21a04:	cmp	r1, #115	; 0x73
   21a08:	bhi	2201c <__assert_fail@plt+0x10370>
   21a0c:	add	r2, pc, #0
   21a10:	ldr	pc, [r2, r1, lsl #2]
   21a14:	andeq	r1, r2, r4, ror #23
   21a18:	andeq	r2, r2, ip, lsl r0
   21a1c:	andeq	r2, r2, ip, lsl r0
   21a20:	andeq	r2, r2, ip, lsl r0
   21a24:	andeq	r2, r2, ip, lsl r0
   21a28:	andeq	r2, r2, ip, lsl r0
   21a2c:	andeq	r2, r2, ip, lsl r0
   21a30:	andeq	r2, r2, ip, lsl r0
   21a34:	andeq	r2, r2, ip, lsl r0
   21a38:	andeq	r2, r2, ip, lsl r0
   21a3c:	andeq	r2, r2, ip, lsl r0
   21a40:	andeq	r2, r2, ip, lsl r0
   21a44:	andeq	r2, r2, ip, lsl r0
   21a48:	andeq	r2, r2, ip, lsl r0
   21a4c:	andeq	r2, r2, ip, lsl r0
   21a50:	andeq	r2, r2, ip, lsl r0
   21a54:	andeq	r2, r2, ip, lsl r0
   21a58:	andeq	r2, r2, ip, lsl r0
   21a5c:	andeq	r2, r2, ip, lsl r0
   21a60:	andeq	r2, r2, ip, lsl r0
   21a64:	andeq	r2, r2, ip, lsl r0
   21a68:	andeq	r2, r2, ip, lsl r0
   21a6c:	andeq	r2, r2, ip, lsl r0
   21a70:	andeq	r2, r2, ip, lsl r0
   21a74:	andeq	r2, r2, ip, lsl r0
   21a78:	andeq	r2, r2, ip, lsl r0
   21a7c:	andeq	r1, r2, r4, asr #27
   21a80:	andeq	r2, r2, ip, lsl r0
   21a84:	andeq	r2, r2, ip, lsl r0
   21a88:	andeq	r2, r2, ip, lsl r0
   21a8c:	andeq	r1, r2, ip, lsl lr
   21a90:	andeq	r1, r2, r8, lsr #28
   21a94:	andeq	r1, r2, r4, lsr lr
   21a98:	andeq	r1, r2, ip, lsr lr
   21a9c:	andeq	r2, r2, ip, lsl r0
   21aa0:	andeq	r2, r2, ip, lsl r0
   21aa4:	andeq	r1, r2, ip, asr #28
   21aa8:	andeq	r2, r2, ip, lsl r0
   21aac:	andeq	r2, r2, ip, lsl r0
   21ab0:	andeq	r2, r2, ip, lsl r0
   21ab4:	andeq	r2, r2, ip, lsl r0
   21ab8:	andeq	r2, r2, ip, lsl r0
   21abc:	andeq	r2, r2, ip, lsl r0
   21ac0:	andeq	r2, r2, ip, lsl r0
   21ac4:	andeq	r2, r2, ip, lsl r0
   21ac8:	andeq	r2, r2, ip, lsl r0
   21acc:	andeq	r2, r2, ip, lsl r0
   21ad0:	andeq	r2, r2, ip, lsl r0
   21ad4:	andeq	r2, r2, ip, lsl r0
   21ad8:	andeq	r2, r2, ip, lsl r0
   21adc:	andeq	r2, r2, ip, lsl r0
   21ae0:	andeq	r2, r2, ip, lsl r0
   21ae4:	andeq	r2, r2, ip, lsl r0
   21ae8:	andeq	r1, r2, r4, asr lr
   21aec:	andeq	r2, r2, ip, lsl r0
   21af0:	andeq	r2, r2, ip, lsl r0
   21af4:	andeq	r2, r2, ip, lsl r0
   21af8:	andeq	r2, r2, ip, lsl r0
   21afc:	andeq	r2, r2, ip, lsl r0
   21b00:	andeq	r2, r2, ip, lsl r0
   21b04:	andeq	r2, r2, ip, lsl r0
   21b08:	andeq	r2, r2, ip, lsl r0
   21b0c:	andeq	r2, r2, ip, lsl r0
   21b10:	andeq	r2, r2, ip, lsl r0
   21b14:	andeq	r2, r2, ip, lsl r0
   21b18:	andeq	r2, r2, ip, lsl r0
   21b1c:	andeq	r2, r2, ip, lsl r0
   21b20:	andeq	r2, r2, ip, lsl r0
   21b24:	andeq	r2, r2, ip, lsl r0
   21b28:	andeq	r2, r2, ip, lsl r0
   21b2c:	andeq	r2, r2, ip, lsl r0
   21b30:	andeq	r2, r2, ip, lsl r0
   21b34:	andeq	r2, r2, ip, lsl r0
   21b38:	andeq	r2, r2, ip, lsl r0
   21b3c:	andeq	r2, r2, ip, lsl r0
   21b40:	andeq	r2, r2, ip, lsl r0
   21b44:	andeq	r2, r2, ip, lsl r0
   21b48:	andeq	r2, r2, ip, lsl r0
   21b4c:	andeq	r2, r2, ip, lsl r0
   21b50:	andeq	r2, r2, ip, lsl r0
   21b54:	andeq	r2, r2, ip, lsl r0
   21b58:	andeq	r1, r2, r4, ror #28
   21b5c:	andeq	r2, r2, ip, lsl r0
   21b60:	andeq	r2, r2, ip, lsl r0
   21b64:	andeq	r1, r2, ip, ror #28
   21b68:	andeq	r2, r2, ip, lsl r0
   21b6c:	andeq	r2, r2, ip, lsl r0
   21b70:	andeq	r2, r2, ip, lsl r0
   21b74:	andeq	r2, r2, ip, lsl r0
   21b78:	andeq	r2, r2, ip, lsl r0
   21b7c:	andeq	r2, r2, ip, lsl r0
   21b80:	andeq	r2, r2, ip, lsl r0
   21b84:	andeq	r2, r2, ip, lsl r0
   21b88:	andeq	r2, r2, ip, lsl r0
   21b8c:	andeq	r2, r2, ip, lsl r0
   21b90:	andeq	r2, r2, ip, lsl r0
   21b94:	andeq	r2, r2, ip, lsl r0
   21b98:	andeq	r2, r2, ip, lsl r0
   21b9c:	andeq	r2, r2, ip, lsl r0
   21ba0:	andeq	r2, r2, ip, lsl r0
   21ba4:	andeq	r2, r2, ip, lsl r0
   21ba8:	andeq	r2, r2, ip, lsl r0
   21bac:	andeq	r2, r2, ip, lsl r0
   21bb0:	andeq	r2, r2, ip, lsl r0
   21bb4:	andeq	r2, r2, ip, lsl r0
   21bb8:	andeq	r2, r2, ip, lsl r0
   21bbc:	andeq	r2, r2, ip, lsl r0
   21bc0:	andeq	r2, r2, ip, lsl r0
   21bc4:	andeq	r2, r2, ip, lsl r0
   21bc8:	andeq	r2, r2, ip, lsl r0
   21bcc:	andeq	r2, r2, ip, lsl r0
   21bd0:	andeq	r2, r2, ip, lsl r0
   21bd4:	andeq	r2, r2, ip, lsl r0
   21bd8:	muleq	r2, r4, lr
   21bdc:	andeq	r1, r2, r4, lsr #29
   21be0:			; <UNDEFINED> instruction: 0x00021eb8
   21be4:	tst	r8, #2048	; 0x800
   21be8:	bne	21eb0 <__assert_fail@plt+0x10204>
   21bec:	b	2201c <__assert_fail@plt+0x10370>
   21bf0:	bl	11a84 <__ctype_b_loc@plt>
   21bf4:	ldr	r0, [r0]
   21bf8:	uxtb	r1, r6
   21bfc:	cmp	r1, #95	; 0x5f
   21c00:	add	r0, r0, r1, lsl #1
   21c04:	ldrh	r0, [r0]
   21c08:	ubfx	r0, r0, #3, #1
   21c0c:	movweq	r0, #1
   21c10:	orr	r0, r4, r0, lsl #22
   21c14:	mvn	r2, #38	; 0x26
   21c18:	mov	r4, #2
   21c1c:	str	r0, [r5]
   21c20:	uxtab	r2, r2, r6
   21c24:	cmp	r2, #86	; 0x56
   21c28:	bhi	2201c <__assert_fail@plt+0x10370>
   21c2c:	add	r3, pc, #0
   21c30:	ldr	pc, [r3, r2, lsl #2]
   21c34:	strdeq	r1, [r2], -r4
   21c38:	andeq	r1, r2, r4, lsl #30
   21c3c:	andeq	r1, r2, r4, lsl pc
   21c40:	andeq	r2, r2, ip, lsl r0
   21c44:	andeq	r1, r2, r4, lsr #30
   21c48:	andeq	r2, r2, ip, lsl r0
   21c4c:	andeq	r2, r2, ip, lsl r0
   21c50:	andeq	r2, r2, ip, lsl r0
   21c54:	andeq	r2, r2, ip, lsl r0
   21c58:	andeq	r2, r2, ip, lsl r0
   21c5c:	muleq	r2, r0, sp
   21c60:	muleq	r2, r0, sp
   21c64:	muleq	r2, r0, sp
   21c68:	muleq	r2, r0, sp
   21c6c:	muleq	r2, r0, sp
   21c70:	muleq	r2, r0, sp
   21c74:	muleq	r2, r0, sp
   21c78:	muleq	r2, r0, sp
   21c7c:	muleq	r2, r0, sp
   21c80:	andeq	r2, r2, ip, lsl r0
   21c84:	andeq	r2, r2, ip, lsl r0
   21c88:	andeq	r1, r2, ip, lsr pc
   21c8c:	andeq	r2, r2, ip, lsl r0
   21c90:	andeq	r1, r2, ip, asr #30
   21c94:	andeq	r1, r2, ip, asr pc
   21c98:	andeq	r2, r2, ip, lsl r0
   21c9c:	andeq	r2, r2, ip, lsl r0
   21ca0:	andeq	r1, r2, r4, ror pc
   21ca4:	andeq	r2, r2, ip, lsl r0
   21ca8:	andeq	r2, r2, ip, lsl r0
   21cac:	andeq	r2, r2, ip, lsl r0
   21cb0:	andeq	r2, r2, ip, lsl r0
   21cb4:	andeq	r2, r2, ip, lsl r0
   21cb8:	andeq	r2, r2, ip, lsl r0
   21cbc:	andeq	r2, r2, ip, lsl r0
   21cc0:	andeq	r2, r2, ip, lsl r0
   21cc4:	andeq	r2, r2, ip, lsl r0
   21cc8:	andeq	r2, r2, ip, lsl r0
   21ccc:	andeq	r2, r2, ip, lsl r0
   21cd0:	andeq	r2, r2, ip, lsl r0
   21cd4:	andeq	r2, r2, ip, lsl r0
   21cd8:	andeq	r2, r2, ip, lsl r0
   21cdc:	andeq	r2, r2, ip, lsl r0
   21ce0:	andeq	r2, r2, ip, lsl r0
   21ce4:	andeq	r1, r2, r4, lsl #31
   21ce8:	andeq	r2, r2, ip, lsl r0
   21cec:	andeq	r2, r2, ip, lsl r0
   21cf0:	andeq	r2, r2, ip, lsl r0
   21cf4:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   21cf8:	andeq	r2, r2, ip, lsl r0
   21cfc:	andeq	r2, r2, ip, lsl r0
   21d00:	andeq	r2, r2, ip, lsl r0
   21d04:	andeq	r2, r2, ip, lsl r0
   21d08:	andeq	r2, r2, ip, lsl r0
   21d0c:	andeq	r2, r2, ip, lsl r0
   21d10:	andeq	r2, r2, ip, lsl r0
   21d14:	andeq	r2, r2, ip, lsl r0
   21d18:	andeq	r1, r2, r4, lsr #31
   21d1c:	andeq	r2, r2, ip, lsl r0
   21d20:			; <UNDEFINED> instruction: 0x00021fb4
   21d24:	andeq	r2, r2, ip, lsl r0
   21d28:	andeq	r2, r2, ip, lsl r0
   21d2c:	andeq	r2, r2, ip, lsl r0
   21d30:	andeq	r2, r2, ip, lsl r0
   21d34:	andeq	r2, r2, ip, lsl r0
   21d38:	andeq	r2, r2, ip, lsl r0
   21d3c:	andeq	r2, r2, ip, lsl r0
   21d40:	andeq	r2, r2, ip, lsl r0
   21d44:	andeq	r2, r2, ip, lsl r0
   21d48:	andeq	r2, r2, ip, lsl r0
   21d4c:	andeq	r2, r2, ip, lsl r0
   21d50:	andeq	r2, r2, ip, lsl r0
   21d54:	andeq	r2, r2, ip, lsl r0
   21d58:	andeq	r2, r2, ip, lsl r0
   21d5c:	andeq	r2, r2, ip, lsl r0
   21d60:	andeq	r2, r2, ip, lsl r0
   21d64:	andeq	r1, r2, r4, asr #31
   21d68:	andeq	r2, r2, ip, lsl r0
   21d6c:	andeq	r2, r2, ip, lsl r0
   21d70:	andeq	r2, r2, ip, lsl r0
   21d74:	ldrdeq	r1, [r2], -r4
   21d78:	andeq	r2, r2, ip, lsl r0
   21d7c:	andeq	r2, r2, ip, lsl r0
   21d80:	andeq	r2, r2, ip, lsl r0
   21d84:	andeq	r1, r2, r4, ror #31
   21d88:	strdeq	r1, [r2], -r8
   21d8c:	andeq	r2, r2, r4
   21d90:	tst	r8, #16384	; 0x4000
   21d94:	bne	2201c <__assert_fail@plt+0x10370>
   21d98:	sub	r1, r1, #49	; 0x31
   21d9c:	mov	r2, #4
   21da0:	b	21e84 <__assert_fail@plt+0x101d8>
   21da4:	movw	r1, #65280	; 0xff00
   21da8:	movt	r1, #65439	; 0xff9f
   21dac:	and	r0, r0, r1
   21db0:	orr	r0, r0, #1
   21db4:	orr	r0, r0, #2097152	; 0x200000
   21db8:	str	r0, [r5]
   21dbc:	mov	r4, #1
   21dc0:	b	2201c <__assert_fail@plt+0x10370>
   21dc4:	tst	r8, #8
   21dc8:	bne	21e14 <__assert_fail@plt+0x10168>
   21dcc:	ldr	r1, [r7, #40]	; 0x28
   21dd0:	ldr	r2, [r7, #48]	; 0x30
   21dd4:	add	r1, r1, #1
   21dd8:	cmp	r1, r2
   21ddc:	beq	21e14 <__assert_fail@plt+0x10168>
   21de0:	str	r1, [r7, #40]	; 0x28
   21de4:	mov	r0, sp
   21de8:	mov	r1, r7
   21dec:	mov	r2, r8
   21df0:	bl	21860 <__assert_fail@plt+0xfbb4>
   21df4:	ldr	r0, [r7, #40]	; 0x28
   21df8:	sub	r0, r0, #1
   21dfc:	str	r0, [r7, #40]	; 0x28
   21e00:	ldrb	r0, [sp, #4]
   21e04:	sub	r0, r0, #9
   21e08:	cmp	r0, #1
   21e0c:	bhi	2201c <__assert_fail@plt+0x10370>
   21e10:	ldr	r0, [r5]
   21e14:	mov	r1, #32
   21e18:	b	21e80 <__assert_fail@plt+0x101d4>
   21e1c:	tst	r8, #8192	; 0x2000
   21e20:	bne	21f0c <__assert_fail@plt+0x10260>
   21e24:	b	2201c <__assert_fail@plt+0x10370>
   21e28:	tst	r8, #8192	; 0x2000
   21e2c:	bne	21f1c <__assert_fail@plt+0x10270>
   21e30:	b	2201c <__assert_fail@plt+0x10370>
   21e34:	mov	r1, #11
   21e38:	b	22014 <__assert_fail@plt+0x10368>
   21e3c:	movw	r1, #1026	; 0x402
   21e40:	tst	r8, r1
   21e44:	bne	2201c <__assert_fail@plt+0x10370>
   21e48:	b	21f34 <__assert_fail@plt+0x10288>
   21e4c:	mov	r1, #5
   21e50:	b	22014 <__assert_fail@plt+0x10368>
   21e54:	movw	r1, #1026	; 0x402
   21e58:	tst	r8, r1
   21e5c:	bne	2201c <__assert_fail@plt+0x10370>
   21e60:	b	21f6c <__assert_fail@plt+0x102c0>
   21e64:	mov	r1, #20
   21e68:	b	22014 <__assert_fail@plt+0x10368>
   21e6c:	movw	r1, #8
   21e70:	movt	r1, #128	; 0x80
   21e74:	tst	r8, r1
   21e78:	beq	21ec8 <__assert_fail@plt+0x1021c>
   21e7c:	mov	r1, #16
   21e80:	mov	r2, #12
   21e84:	bfi	r0, r2, #0, #8
   21e88:	str	r1, [r9]
   21e8c:	str	r0, [r9, #4]
   21e90:	b	2201c <__assert_fail@plt+0x10370>
   21e94:	and	r1, r8, #4608	; 0x1200
   21e98:	cmp	r1, #4608	; 0x1200
   21e9c:	beq	21ff0 <__assert_fail@plt+0x10344>
   21ea0:	b	2201c <__assert_fail@plt+0x10370>
   21ea4:	and	r1, r8, #33792	; 0x8400
   21ea8:	cmp	r1, #32768	; 0x8000
   21eac:	bne	2201c <__assert_fail@plt+0x10370>
   21eb0:	mov	r1, #10
   21eb4:	b	22014 <__assert_fail@plt+0x10368>
   21eb8:	and	r1, r8, #4608	; 0x1200
   21ebc:	cmp	r1, #4608	; 0x1200
   21ec0:	beq	22010 <__assert_fail@plt+0x10364>
   21ec4:	b	2201c <__assert_fail@plt+0x10370>
   21ec8:	ldr	r1, [r7, #40]	; 0x28
   21ecc:	cmp	r1, #0
   21ed0:	beq	21e7c <__assert_fail@plt+0x101d0>
   21ed4:	tst	r8, #2048	; 0x800
   21ed8:	beq	2201c <__assert_fail@plt+0x10370>
   21edc:	ldr	r2, [r7, #4]
   21ee0:	add	r1, r1, r2
   21ee4:	ldrb	r1, [r1, #-1]
   21ee8:	cmp	r1, #10
   21eec:	beq	21e7c <__assert_fail@plt+0x101d0>
   21ef0:	b	2201c <__assert_fail@plt+0x10370>
   21ef4:	tst	r8, #524288	; 0x80000
   21ef8:	bne	2201c <__assert_fail@plt+0x10370>
   21efc:	mov	r1, #128	; 0x80
   21f00:	b	21e80 <__assert_fail@plt+0x101d4>
   21f04:	tst	r8, #8192	; 0x2000
   21f08:	bne	2201c <__assert_fail@plt+0x10370>
   21f0c:	mov	r1, #8
   21f10:	b	22014 <__assert_fail@plt+0x10368>
   21f14:	tst	r8, #8192	; 0x2000
   21f18:	bne	2201c <__assert_fail@plt+0x10370>
   21f1c:	mov	r1, #9
   21f20:	b	22014 <__assert_fail@plt+0x10368>
   21f24:	movw	r1, #1026	; 0x402
   21f28:	and	r1, r8, r1
   21f2c:	cmp	r1, #2
   21f30:	bne	2201c <__assert_fail@plt+0x10370>
   21f34:	mov	r1, #18
   21f38:	b	22014 <__assert_fail@plt+0x10368>
   21f3c:	tst	r8, #524288	; 0x80000
   21f40:	bne	2201c <__assert_fail@plt+0x10370>
   21f44:	mov	r1, #6
   21f48:	b	21e80 <__assert_fail@plt+0x101d4>
   21f4c:	tst	r8, #524288	; 0x80000
   21f50:	bne	2201c <__assert_fail@plt+0x10370>
   21f54:	mov	r1, #9
   21f58:	b	21e80 <__assert_fail@plt+0x101d4>
   21f5c:	movw	r1, #1026	; 0x402
   21f60:	and	r1, r8, r1
   21f64:	cmp	r1, #2
   21f68:	bne	2201c <__assert_fail@plt+0x10370>
   21f6c:	mov	r1, #19
   21f70:	b	22014 <__assert_fail@plt+0x10368>
   21f74:	tst	r8, #524288	; 0x80000
   21f78:	bne	2201c <__assert_fail@plt+0x10370>
   21f7c:	mov	r1, #512	; 0x200
   21f80:	b	21e80 <__assert_fail@plt+0x101d4>
   21f84:	tst	r8, #524288	; 0x80000
   21f88:	bne	2201c <__assert_fail@plt+0x10370>
   21f8c:	mov	r1, #35	; 0x23
   21f90:	b	22014 <__assert_fail@plt+0x10368>
   21f94:	tst	r8, #524288	; 0x80000
   21f98:	bne	2201c <__assert_fail@plt+0x10370>
   21f9c:	mov	r1, #33	; 0x21
   21fa0:	b	22014 <__assert_fail@plt+0x10368>
   21fa4:	tst	r8, #524288	; 0x80000
   21fa8:	bne	2201c <__assert_fail@plt+0x10370>
   21fac:	mov	r1, #64	; 0x40
   21fb0:	b	21e80 <__assert_fail@plt+0x101d4>
   21fb4:	tst	r8, #524288	; 0x80000
   21fb8:	bne	2201c <__assert_fail@plt+0x10370>
   21fbc:	mov	r1, #256	; 0x100
   21fc0:	b	21e80 <__assert_fail@plt+0x101d4>
   21fc4:	tst	r8, #524288	; 0x80000
   21fc8:	bne	2201c <__assert_fail@plt+0x10370>
   21fcc:	mov	r1, #34	; 0x22
   21fd0:	b	22014 <__assert_fail@plt+0x10368>
   21fd4:	tst	r8, #524288	; 0x80000
   21fd8:	bne	2201c <__assert_fail@plt+0x10370>
   21fdc:	mov	r1, #32
   21fe0:	b	22014 <__assert_fail@plt+0x10368>
   21fe4:	and	r1, r8, #4608	; 0x1200
   21fe8:	cmp	r1, #512	; 0x200
   21fec:	bne	2201c <__assert_fail@plt+0x10370>
   21ff0:	mov	r1, #23
   21ff4:	b	22014 <__assert_fail@plt+0x10368>
   21ff8:	tst	r8, #33792	; 0x8400
   21ffc:	bne	2201c <__assert_fail@plt+0x10370>
   22000:	b	21eb0 <__assert_fail@plt+0x10204>
   22004:	and	r1, r8, #4608	; 0x1200
   22008:	cmp	r1, #512	; 0x200
   2200c:	bne	2201c <__assert_fail@plt+0x10370>
   22010:	mov	r1, #24
   22014:	bfi	r0, r1, #0, #8
   22018:	str	r0, [r5]
   2201c:	mov	r0, r4
   22020:	sub	sp, fp, #24
   22024:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22028:	cmp	r3, #2
   2202c:	blt	2205c <__assert_fail@plt+0x103b0>
   22030:	ldr	r3, [r7, #8]
   22034:	ldr	r4, [r3, r2, lsl #2]
   22038:	cmn	r4, #1
   2203c:	beq	21900 <__assert_fail@plt+0xfc54>
   22040:	ldr	r4, [r7, #28]
   22044:	add	r6, r6, #2
   22048:	cmp	r4, r6
   2204c:	beq	2205c <__assert_fail@plt+0x103b0>
   22050:	ldr	r3, [r3, r6, lsl #2]
   22054:	cmn	r3, #1
   22058:	beq	21900 <__assert_fail@plt+0xfc54>
   2205c:	ldrb	r3, [r7, #76]	; 0x4c
   22060:	mov	r6, r2
   22064:	cmp	r3, #0
   22068:	beq	22074 <__assert_fail@plt+0x103c8>
   2206c:	ldr	r6, [r7, #12]
   22070:	ldr	r6, [r6, r2, lsl #2]
   22074:	ldr	r4, [r7, #24]
   22078:	ldr	ip, [r7]
   2207c:	cmp	r3, #0
   22080:	add	r6, r4, r6
   22084:	add	r6, ip, r6
   22088:	ldrsb	r6, [r6]
   2208c:	beq	21908 <__assert_fail@plt+0xfc5c>
   22090:	cmn	r6, #1
   22094:	ble	21900 <__assert_fail@plt+0xfc54>
   22098:	b	21908 <__assert_fail@plt+0xfc5c>
   2209c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   220a0:	add	fp, sp, #28
   220a4:	sub	sp, sp, #20
   220a8:	ldr	r4, [fp, #12]
   220ac:	ldr	r7, [fp, #8]
   220b0:	ldr	sl, [r1]
   220b4:	mov	r6, r2
   220b8:	str	r0, [sp, #12]
   220bc:	str	r1, [sp, #8]
   220c0:	str	r3, [sp, #16]
   220c4:	str	r4, [sp, #4]
   220c8:	str	r7, [sp]
   220cc:	bl	223f0 <__assert_fail@plt+0x10744>
   220d0:	mov	r3, r4
   220d4:	mov	r4, r0
   220d8:	cmp	r0, #0
   220dc:	bne	22108 <__assert_fail@plt+0x1045c>
   220e0:	ldr	r0, [r3]
   220e4:	cmp	r0, #0
   220e8:	beq	22108 <__assert_fail@plt+0x1045c>
   220ec:	b	223d8 <__assert_fail@plt+0x1072c>
   220f0:	cmp	r4, #0
   220f4:	cmpne	r5, #0
   220f8:	bne	2216c <__assert_fail@plt+0x104c0>
   220fc:	cmp	r4, #0
   22100:	mov	r7, r8
   22104:	moveq	r4, r5
   22108:	ldrb	r0, [r6, #4]
   2210c:	orr	r1, r0, #8
   22110:	cmp	r1, #10
   22114:	beq	223dc <__assert_fail@plt+0x10730>
   22118:	cmp	r7, #0
   2211c:	beq	22128 <__assert_fail@plt+0x1047c>
   22120:	cmp	r0, #9
   22124:	beq	223dc <__assert_fail@plt+0x10730>
   22128:	str	r3, [sp, #4]
   2212c:	mov	r9, r3
   22130:	ldr	r0, [sp, #12]
   22134:	ldr	r1, [sp, #8]
   22138:	ldr	r3, [sp, #16]
   2213c:	mov	r2, r6
   22140:	mov	r8, r7
   22144:	str	r7, [sp]
   22148:	bl	223f0 <__assert_fail@plt+0x10744>
   2214c:	mov	r3, r9
   22150:	mov	r5, r0
   22154:	cmp	r0, #0
   22158:	bne	220f0 <__assert_fail@plt+0x10444>
   2215c:	ldr	r0, [r3]
   22160:	cmp	r0, #0
   22164:	beq	220f0 <__assert_fail@plt+0x10444>
   22168:	b	221f0 <__assert_fail@plt+0x10544>
   2216c:	ldr	r1, [sl, #64]	; 0x40
   22170:	cmp	r1, #31
   22174:	beq	221c4 <__assert_fail@plt+0x10518>
   22178:	ldr	r0, [sl, #56]	; 0x38
   2217c:	add	r0, r0, r1, lsl #5
   22180:	add	r2, r1, #1
   22184:	mov	r1, #0
   22188:	mov	r7, r8
   2218c:	str	r2, [sl, #64]	; 0x40
   22190:	str	r1, [r0, #4]!
   22194:	stmib	r0, {r4, r5}
   22198:	str	r1, [r0, #12]
   2219c:	str	r1, [r0, #16]
   221a0:	str	r1, [r0, #20]
   221a4:	mov	r1, #16
   221a8:	str	r1, [r0, #24]
   221ac:	mvn	r1, #0
   221b0:	str	r1, [r0, #28]
   221b4:	str	r0, [r4]
   221b8:	str	r0, [r5]
   221bc:	mov	r4, r0
   221c0:	b	22108 <__assert_fail@plt+0x1045c>
   221c4:	mov	r0, #996	; 0x3e4
   221c8:	bl	1b5b8 <__assert_fail@plt+0x990c>
   221cc:	cmp	r0, #0
   221d0:	beq	22294 <__assert_fail@plt+0x105e8>
   221d4:	ldr	r1, [sl, #56]	; 0x38
   221d8:	mov	r3, r9
   221dc:	str	r1, [r0]
   221e0:	mov	r1, #0
   221e4:	str	r1, [sl, #64]	; 0x40
   221e8:	str	r0, [sl, #56]	; 0x38
   221ec:	b	2217c <__assert_fail@plt+0x104d0>
   221f0:	cmp	r4, #0
   221f4:	beq	223d8 <__assert_fail@plt+0x1072c>
   221f8:	movw	r5, #255	; 0xff
   221fc:	movt	r5, #4
   22200:	mov	r6, r4
   22204:	ldr	r4, [r4, #4]
   22208:	cmp	r4, #0
   2220c:	bne	22200 <__assert_fail@plt+0x10554>
   22210:	ldr	r4, [r6, #8]
   22214:	cmp	r4, #0
   22218:	bne	22200 <__assert_fail@plt+0x10554>
   2221c:	ldr	r0, [r6, #24]
   22220:	and	r0, r0, r5
   22224:	cmp	r0, #3
   22228:	beq	2225c <__assert_fail@plt+0x105b0>
   2222c:	cmp	r0, #6
   22230:	bne	22268 <__assert_fail@plt+0x105bc>
   22234:	ldr	r4, [r6, #20]
   22238:	ldr	r0, [r4]
   2223c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   22240:	ldr	r0, [r4, #4]
   22244:	bl	1b4e8 <__assert_fail@plt+0x983c>
   22248:	ldr	r0, [r4, #8]
   2224c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   22250:	ldr	r0, [r4, #12]
   22254:	bl	1b4e8 <__assert_fail@plt+0x983c>
   22258:	b	22260 <__assert_fail@plt+0x105b4>
   2225c:	ldr	r4, [r6, #20]
   22260:	mov	r0, r4
   22264:	bl	1b4e8 <__assert_fail@plt+0x983c>
   22268:	ldr	r0, [r6]
   2226c:	cmp	r0, #0
   22270:	beq	223d8 <__assert_fail@plt+0x1072c>
   22274:	ldr	r4, [r0, #8]
   22278:	cmp	r4, r6
   2227c:	mov	r6, r0
   22280:	beq	2221c <__assert_fail@plt+0x10570>
   22284:	cmp	r4, #0
   22288:	mov	r6, r0
   2228c:	beq	2221c <__assert_fail@plt+0x10570>
   22290:	b	22200 <__assert_fail@plt+0x10554>
   22294:	movw	r6, #255	; 0xff
   22298:	mov	r1, r9
   2229c:	movt	r6, #4
   222a0:	mov	r7, r5
   222a4:	ldr	r5, [r5, #4]
   222a8:	cmp	r5, #0
   222ac:	bne	222a0 <__assert_fail@plt+0x105f4>
   222b0:	ldr	r5, [r7, #8]
   222b4:	cmp	r5, #0
   222b8:	bne	222a0 <__assert_fail@plt+0x105f4>
   222bc:	ldr	r0, [r7, #24]
   222c0:	and	r0, r0, r6
   222c4:	cmp	r0, #3
   222c8:	beq	222fc <__assert_fail@plt+0x10650>
   222cc:	cmp	r0, #6
   222d0:	bne	2230c <__assert_fail@plt+0x10660>
   222d4:	ldr	r5, [r7, #20]
   222d8:	ldr	r0, [r5]
   222dc:	bl	1b4e8 <__assert_fail@plt+0x983c>
   222e0:	ldr	r0, [r5, #4]
   222e4:	bl	1b4e8 <__assert_fail@plt+0x983c>
   222e8:	ldr	r0, [r5, #8]
   222ec:	bl	1b4e8 <__assert_fail@plt+0x983c>
   222f0:	ldr	r0, [r5, #12]
   222f4:	bl	1b4e8 <__assert_fail@plt+0x983c>
   222f8:	b	22300 <__assert_fail@plt+0x10654>
   222fc:	ldr	r5, [r7, #20]
   22300:	mov	r0, r5
   22304:	bl	1b4e8 <__assert_fail@plt+0x983c>
   22308:	mov	r1, r9
   2230c:	ldr	r0, [r7]
   22310:	cmp	r0, #0
   22314:	beq	22338 <__assert_fail@plt+0x1068c>
   22318:	ldr	r5, [r0, #8]
   2231c:	cmp	r5, r7
   22320:	mov	r7, r0
   22324:	beq	222bc <__assert_fail@plt+0x10610>
   22328:	cmp	r5, #0
   2232c:	mov	r7, r0
   22330:	beq	222bc <__assert_fail@plt+0x10610>
   22334:	b	222a0 <__assert_fail@plt+0x105f4>
   22338:	mov	r5, r4
   2233c:	ldr	r4, [r4, #4]
   22340:	cmp	r4, #0
   22344:	bne	22338 <__assert_fail@plt+0x1068c>
   22348:	ldr	r4, [r5, #8]
   2234c:	cmp	r4, #0
   22350:	bne	22338 <__assert_fail@plt+0x1068c>
   22354:	ldr	r0, [r5, #24]
   22358:	and	r0, r0, r6
   2235c:	cmp	r0, #3
   22360:	beq	22394 <__assert_fail@plt+0x106e8>
   22364:	cmp	r0, #6
   22368:	bne	223a4 <__assert_fail@plt+0x106f8>
   2236c:	ldr	r4, [r5, #20]
   22370:	ldr	r0, [r4]
   22374:	bl	1b4e8 <__assert_fail@plt+0x983c>
   22378:	ldr	r0, [r4, #4]
   2237c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   22380:	ldr	r0, [r4, #8]
   22384:	bl	1b4e8 <__assert_fail@plt+0x983c>
   22388:	ldr	r0, [r4, #12]
   2238c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   22390:	b	22398 <__assert_fail@plt+0x106ec>
   22394:	ldr	r4, [r5, #20]
   22398:	mov	r0, r4
   2239c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   223a0:	mov	r1, r9
   223a4:	ldr	r0, [r5]
   223a8:	cmp	r0, #0
   223ac:	beq	223d0 <__assert_fail@plt+0x10724>
   223b0:	ldr	r4, [r0, #8]
   223b4:	cmp	r4, r5
   223b8:	mov	r5, r0
   223bc:	beq	22354 <__assert_fail@plt+0x106a8>
   223c0:	cmp	r4, #0
   223c4:	mov	r5, r0
   223c8:	beq	22354 <__assert_fail@plt+0x106a8>
   223cc:	b	22338 <__assert_fail@plt+0x1068c>
   223d0:	mov	r0, #12
   223d4:	str	r0, [r1]
   223d8:	mov	r4, #0
   223dc:	mov	r0, r4
   223e0:	sub	sp, fp, #28
   223e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   223e8:	nop	{0}
   223ec:	nop	{0}
   223f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   223f4:	add	fp, sp, #28
   223f8:	sub	sp, sp, #156	; 0x9c
   223fc:	mov	r5, r0
   22400:	mov	lr, r2
   22404:	ldr	r0, [r2, #4]
   22408:	ldr	r2, [fp, #12]
   2240c:	mov	r7, r1
   22410:	mvn	r1, #0
   22414:	mov	r9, #0
   22418:	mov	ip, r3
   2241c:	ldr	sl, [r7]
   22420:	str	r2, [sp, #20]
   22424:	uxtab	r1, r1, r0
   22428:	ldr	r6, [fp, #8]
   2242c:	add	r2, pc, #12
   22430:	str	r5, [sp, #28]
   22434:	str	r3, [sp, #48]	; 0x30
   22438:	str	lr, [sp, #44]	; 0x2c
   2243c:	ldr	pc, [r2, r1, lsl #2]
   22440:	andeq	r2, r2, r8, lsl r7
   22444:	strdeq	r4, [r2], -r8
   22448:	muleq	r2, r0, r9
   2244c:	ldrdeq	r2, [r2], -r8
   22450:	andeq	r2, r2, r8, asr r9
   22454:	muleq	r2, r0, r9
   22458:	muleq	r2, r0, r9
   2245c:	andeq	r2, r2, r0, asr #19
   22460:	strdeq	r2, [r2], -r0
   22464:	strdeq	r4, [r2], -r8
   22468:	andeq	r2, r2, r0, ror #9
   2246c:	andeq	r2, r2, r4, ror #11
   22470:	muleq	r2, r0, r9
   22474:	muleq	r2, r0, r9
   22478:	muleq	r2, r0, r9
   2247c:	muleq	r2, r0, r9
   22480:	muleq	r2, r0, r9
   22484:	andeq	r2, r2, r0, ror #9
   22488:	andeq	r2, r2, r0, ror #9
   2248c:	andeq	r2, r2, r4, lsr #13
   22490:	muleq	r2, r0, r9
   22494:	muleq	r2, r0, r9
   22498:	andeq	r2, r2, ip, lsr sl
   2249c:	andeq	r2, r2, r0, lsl #10
   224a0:	muleq	r2, r0, r9
   224a4:	muleq	r2, r0, r9
   224a8:	muleq	r2, r0, r9
   224ac:	muleq	r2, r0, r9
   224b0:	muleq	r2, r0, r9
   224b4:	muleq	r2, r0, r9
   224b8:	muleq	r2, r0, r9
   224bc:	andeq	r2, r2, ip, asr r5
   224c0:	andeq	r2, r2, ip, asr r5
   224c4:	andeq	r2, r2, ip, ror r5
   224c8:	andeq	r2, r2, ip, ror r5
   224cc:	andeq	r2, r2, ip, asr #20
   224d0:	andeq	r0, r0, r0
   224d4:	mvnseq	r0, #0
   224d8:			; <UNDEFINED> instruction: 0x87fffffe
   224dc:			; <UNDEFINED> instruction: 0x07fffffe
   224e0:	tst	ip, #32
   224e4:	bne	22a44 <__assert_fail@plt+0x10d98>
   224e8:	tst	ip, #16
   224ec:	bne	22a5c <__assert_fail@plt+0x10db0>
   224f0:	tst	ip, #131072	; 0x20000
   224f4:	uxtbeq	r1, r0
   224f8:	cmpeq	r1, #9
   224fc:	beq	22a9c <__assert_fail@plt+0x10df0>
   22500:	mov	r1, #1
   22504:	bfi	r0, r1, #0, #8
   22508:	str	r0, [lr, #4]
   2250c:	ldr	r1, [sl, #64]	; 0x40
   22510:	cmp	r1, #31
   22514:	beq	244a4 <__assert_fail@plt+0x127f8>
   22518:	ldr	r0, [sl, #56]	; 0x38
   2251c:	add	r7, r0, r1, lsl #5
   22520:	add	r2, r1, #1
   22524:	mov	r0, #0
   22528:	mvn	r3, #0
   2252c:	str	r2, [sl, #64]	; 0x40
   22530:	str	r0, [r7, #4]!
   22534:	str	r0, [r7, #8]
   22538:	str	r0, [r7, #4]
   2253c:	ldm	lr, {r1, r2}
   22540:	str	r3, [r7, #28]
   22544:	str	r0, [r7, #16]
   22548:	str	r0, [r7, #12]
   2254c:	bic	r0, r2, #786432	; 0xc0000
   22550:	str	r1, [r7, #20]
   22554:	str	r0, [r7, #24]
   22558:	b	23480 <__assert_fail@plt+0x117d4>
   2255c:	mvn	r2, #32
   22560:	ldr	r1, [r5, #64]	; 0x40
   22564:	movw	r3, #5604	; 0x15e4
   22568:	uxtab	r0, r2, r0
   2256c:	movw	r2, #5598	; 0x15de
   22570:	movt	r3, #3
   22574:	movt	r2, #3
   22578:	b	22598 <__assert_fail@plt+0x108ec>
   2257c:	mvn	r2, #34	; 0x22
   22580:	ldr	r1, [r5, #64]	; 0x40
   22584:	movw	r3, #2311	; 0x907
   22588:	uxtab	r0, r2, r0
   2258c:	movw	r2, #5606	; 0x15e6
   22590:	movt	r3, #3
   22594:	movt	r2, #3
   22598:	clz	r0, r0
   2259c:	lsr	r0, r0, #5
   225a0:	str	r0, [sp]
   225a4:	ldr	r4, [sp, #20]
   225a8:	str	r4, [sp, #4]
   225ac:	mov	r0, sl
   225b0:	bl	24990 <__assert_fail@plt+0x12ce4>
   225b4:	mov	r7, r0
   225b8:	cmp	r0, #0
   225bc:	bne	225d8 <__assert_fail@plt+0x1092c>
   225c0:	ldr	r0, [r4]
   225c4:	cmp	r0, #0
   225c8:	ldr	ip, [sp, #48]	; 0x30
   225cc:	ldr	lr, [sp, #44]	; 0x2c
   225d0:	beq	23480 <__assert_fail@plt+0x117d4>
   225d4:	b	242f8 <__assert_fail@plt+0x1264c>
   225d8:	ldr	ip, [sp, #48]	; 0x30
   225dc:	ldr	lr, [sp, #44]	; 0x2c
   225e0:	b	23480 <__assert_fail@plt+0x117d4>
   225e4:	ldr	r0, [lr]
   225e8:	movw	r1, #783	; 0x30f
   225ec:	tst	r0, r1
   225f0:	beq	22638 <__assert_fail@plt+0x1098c>
   225f4:	ldrb	r0, [sl, #88]	; 0x58
   225f8:	tst	r0, #16
   225fc:	bne	22634 <__assert_fail@plt+0x10988>
   22600:	orr	r1, r0, #16
   22604:	tst	r0, #8
   22608:	strb	r1, [sl, #88]	; 0x58
   2260c:	bne	247a8 <__assert_fail@plt+0x12afc>
   22610:	sub	r1, pc, #328	; 0x148
   22614:	tst	r0, #4
   22618:	vld1.64	{d16-d17}, [r1 :128]
   2261c:	add	r1, sl, #96	; 0x60
   22620:	vst1.32	{d16-d17}, [r1]
   22624:	beq	247b4 <__assert_fail@plt+0x12b08>
   22628:	vmov.i32	q8, #0	; 0x00000000
   2262c:	add	r0, sl, #112	; 0x70
   22630:	vst1.32	{d16-d17}, [r0]
   22634:	ldr	r0, [lr]
   22638:	cmp	r0, #512	; 0x200
   2263c:	beq	23280 <__assert_fail@plt+0x115d4>
   22640:	cmp	r0, #256	; 0x100
   22644:	bne	2338c <__assert_fail@plt+0x116e0>
   22648:	mov	r0, #6
   2264c:	str	r0, [lr]
   22650:	ldr	r1, [sl, #64]	; 0x40
   22654:	cmp	r1, #31
   22658:	beq	24708 <__assert_fail@plt+0x12a5c>
   2265c:	ldr	r0, [sl, #56]	; 0x38
   22660:	add	r4, r0, r1, lsl #5
   22664:	add	r2, r1, #1
   22668:	mov	r0, #0
   2266c:	mvn	r3, #0
   22670:	str	r2, [sl, #64]	; 0x40
   22674:	str	r0, [r4, #4]!
   22678:	str	r0, [r4, #8]
   2267c:	str	r0, [r4, #4]
   22680:	ldm	lr, {r1, r2}
   22684:	str	r3, [r4, #28]
   22688:	str	r0, [r4, #16]
   2268c:	str	r0, [r4, #12]
   22690:	bic	r0, r2, #786432	; 0xc0000
   22694:	str	r1, [r4, #20]
   22698:	str	r0, [r4, #24]
   2269c:	mov	r0, #9
   226a0:	b	232d8 <__assert_fail@plt+0x1162c>
   226a4:	mov	r9, #0
   226a8:	mov	r0, #32
   226ac:	mov	r1, #1
   226b0:	str	r9, [fp, #-32]	; 0xffffffe0
   226b4:	bl	1b258 <__assert_fail@plt+0x95ac>
   226b8:	mov	r8, r0
   226bc:	mov	r0, #40	; 0x28
   226c0:	mov	r1, #1
   226c4:	bl	1b258 <__assert_fail@plt+0x95ac>
   226c8:	mov	r7, r0
   226cc:	cmp	r8, #0
   226d0:	cmpne	r7, #0
   226d4:	beq	24504 <__assert_fail@plt+0x12858>
   226d8:	ldr	r6, [sp, #44]	; 0x2c
   226dc:	ldr	r4, [sp, #48]	; 0x30
   226e0:	mov	r1, r5
   226e4:	mov	r0, r6
   226e8:	mov	r2, r4
   226ec:	bl	24d4c <__assert_fail@plt+0x130a0>
   226f0:	mov	r3, r0
   226f4:	ldr	r0, [r6, #4]
   226f8:	str	r7, [sp, #60]	; 0x3c
   226fc:	uxtb	r1, r0
   22700:	cmp	r1, #25
   22704:	beq	22aa4 <__assert_fail@plt+0x10df8>
   22708:	cmp	r1, #2
   2270c:	beq	244f0 <__assert_fail@plt+0x12844>
   22710:	mov	r1, #0
   22714:	b	22afc <__assert_fail@plt+0x10e50>
   22718:	ldr	r1, [sl, #64]	; 0x40
   2271c:	cmp	r1, #31
   22720:	beq	24518 <__assert_fail@plt+0x1286c>
   22724:	ldr	r0, [sl, #56]	; 0x38
   22728:	add	r4, r0, r1, lsl #5
   2272c:	add	r2, r1, #1
   22730:	mov	r0, #0
   22734:	mvn	r3, #0
   22738:	str	r2, [sl, #64]	; 0x40
   2273c:	str	r0, [r4, #4]!
   22740:	str	r0, [r4, #8]
   22744:	str	r0, [r4, #4]
   22748:	ldm	lr, {r1, r2}
   2274c:	str	r3, [r4, #28]
   22750:	str	r0, [r4, #16]
   22754:	str	r0, [r4, #12]
   22758:	bic	r0, r2, #786432	; 0xc0000
   2275c:	str	r1, [r4, #20]
   22760:	str	r0, [r4, #24]
   22764:	ldr	r0, [sl, #92]	; 0x5c
   22768:	cmp	r0, #2
   2276c:	blt	22a54 <__assert_fail@plt+0x10da8>
   22770:	ldr	r0, [r5, #40]	; 0x28
   22774:	ldr	r1, [r5, #56]	; 0x38
   22778:	cmp	r1, r0
   2277c:	ble	22a54 <__assert_fail@plt+0x10da8>
   22780:	mov	r8, #0
   22784:	mvn	r9, #0
   22788:	ldr	r1, [r5, #28]
   2278c:	cmp	r0, r1
   22790:	beq	22a54 <__assert_fail@plt+0x10da8>
   22794:	ldr	r1, [r5, #8]
   22798:	ldr	r0, [r1, r0, lsl #2]
   2279c:	cmn	r0, #1
   227a0:	bne	22a54 <__assert_fail@plt+0x10da8>
   227a4:	mov	r0, lr
   227a8:	mov	r1, r5
   227ac:	mov	r2, ip
   227b0:	bl	21860 <__assert_fail@plt+0xfbb4>
   227b4:	ldr	r1, [r5, #40]	; 0x28
   227b8:	add	r0, r1, r0
   227bc:	str	r0, [r5, #40]	; 0x28
   227c0:	ldr	r1, [sl, #64]	; 0x40
   227c4:	cmp	r1, #31
   227c8:	beq	22870 <__assert_fail@plt+0x10bc4>
   227cc:	ldr	r0, [sl, #56]	; 0x38
   227d0:	add	r6, r0, r1, lsl #5
   227d4:	ldr	lr, [sp, #44]	; 0x2c
   227d8:	add	r2, r1, #1
   227dc:	ldr	ip, [sp, #48]	; 0x30
   227e0:	str	r2, [sl, #64]	; 0x40
   227e4:	str	r8, [r6, #4]!
   227e8:	str	r8, [r6, #8]
   227ec:	str	r8, [r6, #4]
   227f0:	ldm	lr, {r0, r1}
   227f4:	str	r9, [r6, #28]
   227f8:	str	r8, [r6, #16]
   227fc:	str	r8, [r6, #12]
   22800:	str	r0, [r6, #20]
   22804:	bic	r0, r1, #786432	; 0xc0000
   22808:	str	r0, [r6, #24]
   2280c:	ldr	r1, [sl, #64]	; 0x40
   22810:	cmp	r1, #31
   22814:	beq	22898 <__assert_fail@plt+0x10bec>
   22818:	ldr	r0, [sl, #56]	; 0x38
   2281c:	add	r7, r0, r1, lsl #5
   22820:	add	r2, r1, #1
   22824:	mov	r0, #16
   22828:	cmp	r6, #0
   2282c:	str	r2, [sl, #64]	; 0x40
   22830:	str	r8, [r7, #4]!
   22834:	stmib	r7, {r4, r6, r8}
   22838:	str	r8, [r7, #16]
   2283c:	str	r8, [r7, #20]
   22840:	str	r0, [r7, #24]
   22844:	str	r9, [r7, #28]
   22848:	str	r7, [r4]
   2284c:	beq	247a0 <__assert_fail@plt+0x12af4>
   22850:	ldr	r5, [sp, #28]
   22854:	str	r7, [r6]
   22858:	mov	r4, r7
   2285c:	ldr	r0, [r5, #40]	; 0x28
   22860:	ldr	r1, [r5, #56]	; 0x38
   22864:	cmp	r1, r0
   22868:	bgt	22788 <__assert_fail@plt+0x10adc>
   2286c:	b	23480 <__assert_fail@plt+0x117d4>
   22870:	mov	r0, #996	; 0x3e4
   22874:	bl	1b5b8 <__assert_fail@plt+0x990c>
   22878:	cmp	r0, #0
   2287c:	beq	228c8 <__assert_fail@plt+0x10c1c>
   22880:	ldr	r1, [sl, #56]	; 0x38
   22884:	str	r1, [r0]
   22888:	mov	r1, #0
   2288c:	str	r1, [sl, #64]	; 0x40
   22890:	str	r0, [sl, #56]	; 0x38
   22894:	b	227d0 <__assert_fail@plt+0x10b24>
   22898:	mov	r0, #996	; 0x3e4
   2289c:	bl	1b5b8 <__assert_fail@plt+0x990c>
   228a0:	ldr	lr, [sp, #44]	; 0x2c
   228a4:	ldr	ip, [sp, #48]	; 0x30
   228a8:	cmp	r0, #0
   228ac:	beq	247a0 <__assert_fail@plt+0x12af4>
   228b0:	ldr	r1, [sl, #56]	; 0x38
   228b4:	str	r1, [r0]
   228b8:	mov	r1, #0
   228bc:	str	r1, [sl, #64]	; 0x40
   228c0:	str	r0, [sl, #56]	; 0x38
   228c4:	b	2281c <__assert_fail@plt+0x10b70>
   228c8:	ldr	ip, [sp, #48]	; 0x30
   228cc:	ldr	lr, [sp, #44]	; 0x2c
   228d0:	mov	r6, #0
   228d4:	b	2280c <__assert_fail@plt+0x10b60>
   228d8:	ldr	r0, [lr]
   228dc:	ldr	r2, [sl, #84]	; 0x54
   228e0:	mov	r1, #1
   228e4:	tst	r2, r1, lsl r0
   228e8:	beq	2454c <__assert_fail@plt+0x128a0>
   228ec:	lsl	r0, r1, r0
   228f0:	ldr	r1, [sl, #64]	; 0x40
   228f4:	ldr	r2, [sl, #80]	; 0x50
   228f8:	orr	r0, r2, r0
   228fc:	cmp	r1, #31
   22900:	str	r0, [sl, #80]	; 0x50
   22904:	beq	24588 <__assert_fail@plt+0x128dc>
   22908:	ldr	r0, [sl, #56]	; 0x38
   2290c:	add	r7, r0, r1, lsl #5
   22910:	add	r2, r1, #1
   22914:	mov	r0, #0
   22918:	mvn	r3, #0
   2291c:	str	r2, [sl, #64]	; 0x40
   22920:	str	r0, [r7, #4]!
   22924:	str	r0, [r7, #8]
   22928:	str	r0, [r7, #4]
   2292c:	ldm	lr, {r1, r2}
   22930:	str	r3, [r7, #28]
   22934:	str	r0, [r7, #16]
   22938:	str	r0, [r7, #12]
   2293c:	bic	r0, r2, #786432	; 0xc0000
   22940:	str	r1, [r7, #20]
   22944:	str	r0, [r7, #24]
   22948:	ldr	r0, [sl, #76]	; 0x4c
   2294c:	add	r0, r0, #1
   22950:	str	r0, [sl, #76]	; 0x4c
   22954:	b	229b0 <__assert_fail@plt+0x10d04>
   22958:	ldr	r1, [sl, #64]	; 0x40
   2295c:	cmp	r1, #31
   22960:	beq	24554 <__assert_fail@plt+0x128a8>
   22964:	ldr	r0, [sl, #56]	; 0x38
   22968:	add	r7, r0, r1, lsl #5
   2296c:	add	r2, r1, #1
   22970:	mov	r0, #0
   22974:	mvn	r3, #0
   22978:	str	r2, [sl, #64]	; 0x40
   2297c:	str	r0, [r7, #4]!
   22980:	str	r0, [r7, #8]
   22984:	str	r0, [r7, #4]
   22988:	ldm	lr, {r1, r2}
   2298c:	str	r3, [r7, #28]
   22990:	str	r0, [r7, #16]
   22994:	str	r0, [r7, #12]
   22998:	bic	r0, r2, #786432	; 0xc0000
   2299c:	str	r1, [r7, #20]
   229a0:	str	r0, [r7, #24]
   229a4:	ldr	r0, [sl, #92]	; 0x5c
   229a8:	cmp	r0, #2
   229ac:	blt	23480 <__assert_fail@plt+0x117d4>
   229b0:	ldrb	r0, [sl, #88]	; 0x58
   229b4:	orr	r0, r0, #2
   229b8:	strb	r0, [sl, #88]	; 0x58
   229bc:	b	23480 <__assert_fail@plt+0x117d4>
   229c0:	ldr	r4, [r7, #24]
   229c4:	orr	r2, ip, #8388608	; 0x800000
   229c8:	mov	r1, r5
   229cc:	add	r0, r4, #1
   229d0:	str	r0, [r7, #24]
   229d4:	mov	r0, lr
   229d8:	bl	21860 <__assert_fail@plt+0xfbb4>
   229dc:	ldr	r1, [r5, #40]	; 0x28
   229e0:	ldr	lr, [sp, #44]	; 0x2c
   229e4:	mov	r9, #0
   229e8:	add	r0, r1, r0
   229ec:	str	r0, [r5, #40]	; 0x28
   229f0:	ldrb	r0, [lr, #4]
   229f4:	cmp	r0, #9
   229f8:	beq	23410 <__assert_fail@plt+0x11764>
   229fc:	add	r0, r6, #1
   22a00:	mov	r1, r7
   22a04:	mov	r2, lr
   22a08:	mov	r7, lr
   22a0c:	str	r0, [sp]
   22a10:	mov	r0, r5
   22a14:	ldr	r6, [sp, #20]
   22a18:	str	r6, [sp, #4]
   22a1c:	ldr	r3, [sp, #48]	; 0x30
   22a20:	bl	215f4 <__assert_fail@plt+0xf948>
   22a24:	mov	r9, r0
   22a28:	ldr	r0, [r6]
   22a2c:	cmp	r0, #0
   22a30:	beq	23400 <__assert_fail@plt+0x11754>
   22a34:	mov	r9, #0
   22a38:	b	242f8 <__assert_fail@plt+0x1264c>
   22a3c:	tst	ip, #16777216	; 0x1000000
   22a40:	beq	224e0 <__assert_fail@plt+0x10834>
   22a44:	mov	r0, #13
   22a48:	b	23384 <__assert_fail@plt+0x116d8>
   22a4c:	mov	r0, #5
   22a50:	b	23384 <__assert_fail@plt+0x116d8>
   22a54:	mov	r7, r4
   22a58:	b	23480 <__assert_fail@plt+0x117d4>
   22a5c:	mov	r0, lr
   22a60:	mov	r1, r5
   22a64:	mov	r2, ip
   22a68:	mov	r4, ip
   22a6c:	mov	r6, lr
   22a70:	bl	21860 <__assert_fail@plt+0xfbb4>
   22a74:	ldr	r1, [r5, #40]	; 0x28
   22a78:	mov	r2, r6
   22a7c:	mov	r3, r4
   22a80:	add	r0, r1, r0
   22a84:	mov	r1, r7
   22a88:	str	r0, [r5, #40]	; 0x28
   22a8c:	mov	r0, r5
   22a90:	sub	sp, fp, #28
   22a94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a98:	b	223f0 <__assert_fail@plt+0x10744>
   22a9c:	mov	r0, #16
   22aa0:	b	23384 <__assert_fail@plt+0x116d8>
   22aa4:	ldrb	r0, [r7, #16]
   22aa8:	tst	r4, #256	; 0x100
   22aac:	orr	r0, r0, #1
   22ab0:	strb	r0, [r7, #16]
   22ab4:	beq	22ac4 <__assert_fail@plt+0x10e18>
   22ab8:	ldr	r0, [r8]
   22abc:	orr	r0, r0, #1024	; 0x400
   22ac0:	str	r0, [r8]
   22ac4:	ldr	r0, [r5, #40]	; 0x28
   22ac8:	mov	r1, r5
   22acc:	mov	r2, r4
   22ad0:	add	r0, r0, r3
   22ad4:	str	r0, [r5, #40]	; 0x28
   22ad8:	mov	r0, r6
   22adc:	bl	24d4c <__assert_fail@plt+0x130a0>
   22ae0:	ldr	r6, [sp, #44]	; 0x2c
   22ae4:	mov	r3, r0
   22ae8:	ldr	r0, [r6, #4]
   22aec:	uxtb	r1, r0
   22af0:	cmp	r1, #2
   22af4:	beq	244f0 <__assert_fail@plt+0x12844>
   22af8:	mov	r1, #1
   22afc:	str	r1, [sp, #56]	; 0x38
   22b00:	uxtb	r1, r0
   22b04:	mov	r2, r6
   22b08:	ldr	r7, [sp, #48]	; 0x30
   22b0c:	cmp	r1, #21
   22b10:	moveq	r1, #1
   22b14:	bfieq	r0, r1, #0, #8
   22b18:	mov	r1, r5
   22b1c:	streq	r0, [r6, #4]
   22b20:	sub	r0, fp, #80	; 0x50
   22b24:	str	r0, [fp, #-36]	; 0xffffffdc
   22b28:	mov	r0, #3
   22b2c:	str	r0, [fp, #-40]	; 0xffffffd8
   22b30:	mov	r0, #1
   22b34:	str	r7, [sp]
   22b38:	str	r0, [sp, #4]
   22b3c:	sub	r0, fp, #40	; 0x28
   22b40:	bl	24ec4 <__assert_fail@plt+0x13218>
   22b44:	cmp	r0, #0
   22b48:	bne	244d8 <__assert_fail@plt+0x1282c>
   22b4c:	and	r0, r7, #65536	; 0x10000
   22b50:	mov	r2, r7
   22b54:	str	r0, [sp, #40]	; 0x28
   22b58:	mov	r0, #0
   22b5c:	str	r0, [sp, #36]	; 0x24
   22b60:	mov	r0, #0
   22b64:	str	r0, [sp, #32]
   22b68:	ldr	r4, [sp, #44]	; 0x2c
   22b6c:	ldr	r7, [sp, #60]	; 0x3c
   22b70:	mov	r0, r4
   22b74:	mov	r1, r5
   22b78:	bl	24d4c <__assert_fail@plt+0x130a0>
   22b7c:	ldr	r6, [fp, #-40]	; 0xffffffd8
   22b80:	mov	r9, r0
   22b84:	cmp	r6, #2
   22b88:	beq	22d68 <__assert_fail@plt+0x110bc>
   22b8c:	cmp	r6, #4
   22b90:	bne	22bd4 <__assert_fail@plt+0x10f28>
   22b94:	ldr	r5, [sp, #28]
   22b98:	ldr	r1, [fp, #-36]	; 0xffffffdc
   22b9c:	mov	r2, r7
   22ba0:	sub	r3, fp, #32
   22ba4:	ldr	r0, [r5, #64]	; 0x40
   22ba8:	str	r1, [sp]
   22bac:	ldr	r1, [sp, #48]	; 0x30
   22bb0:	str	r1, [sp, #4]
   22bb4:	mov	r1, r8
   22bb8:	bl	25190 <__assert_fail@plt+0x134e4>
   22bbc:	ldr	r1, [sp, #20]
   22bc0:	ldr	lr, [sp, #44]	; 0x2c
   22bc4:	cmp	r0, #0
   22bc8:	str	r0, [r1]
   22bcc:	beq	22db0 <__assert_fail@plt+0x11104>
   22bd0:	b	24460 <__assert_fail@plt+0x127b4>
   22bd4:	ldr	r0, [sp, #44]	; 0x2c
   22bd8:	ldr	r2, [sp, #48]	; 0x30
   22bdc:	mov	r4, r9
   22be0:	mov	r9, #7
   22be4:	str	sl, [sp, #52]	; 0x34
   22be8:	ldrb	r0, [r0, #4]
   22bec:	cmp	r0, #22
   22bf0:	beq	22c00 <__assert_fail@plt+0x10f54>
   22bf4:	cmp	r0, #2
   22bf8:	bne	22d1c <__assert_fail@plt+0x11070>
   22bfc:	b	2444c <__assert_fail@plt+0x127a0>
   22c00:	ldr	r7, [sp, #28]
   22c04:	mov	r5, r4
   22c08:	ldr	r0, [r7, #40]	; 0x28
   22c0c:	mov	r1, r7
   22c10:	add	r0, r0, r4
   22c14:	str	r0, [r7, #40]	; 0x28
   22c18:	add	r0, sp, #64	; 0x40
   22c1c:	bl	24d4c <__assert_fail@plt+0x130a0>
   22c20:	mov	r3, r0
   22c24:	ldrb	r0, [sp, #68]	; 0x44
   22c28:	cmp	r0, #21
   22c2c:	beq	22d04 <__assert_fail@plt+0x11058>
   22c30:	ldr	r4, [sp, #48]	; 0x30
   22c34:	cmp	r0, #2
   22c38:	beq	2444c <__assert_fail@plt+0x127a0>
   22c3c:	mov	r0, #3
   22c40:	str	r8, [sp, #24]
   22c44:	add	r2, sp, #64	; 0x40
   22c48:	str	r0, [fp, #-48]	; 0xffffffd0
   22c4c:	add	r0, sp, #72	; 0x48
   22c50:	str	r0, [fp, #-44]	; 0xffffffd4
   22c54:	mov	r0, #1
   22c58:	str	r4, [sp]
   22c5c:	str	r0, [sp, #4]
   22c60:	sub	r0, fp, #48	; 0x30
   22c64:	ldr	r7, [sp, #28]
   22c68:	mov	r1, r7
   22c6c:	bl	24ec4 <__assert_fail@plt+0x13218>
   22c70:	cmp	r0, #0
   22c74:	bne	248fc <__assert_fail@plt+0x12c50>
   22c78:	ldr	r0, [sp, #44]	; 0x2c
   22c7c:	mov	r1, r7
   22c80:	mov	r2, r4
   22c84:	bl	24d4c <__assert_fail@plt+0x130a0>
   22c88:	ldr	r8, [fp, #-48]	; 0xffffffd0
   22c8c:	mov	r9, #11
   22c90:	str	r0, [sp, #16]
   22c94:	cmp	r8, #2
   22c98:	beq	24448 <__assert_fail@plt+0x1279c>
   22c9c:	cmp	r8, #4
   22ca0:	beq	24448 <__assert_fail@plt+0x1279c>
   22ca4:	cmp	r6, #3
   22ca8:	bne	22cbc <__assert_fail@plt+0x11010>
   22cac:	ldr	r0, [fp, #-36]	; 0xffffffdc
   22cb0:	bl	11ac0 <strlen@plt>
   22cb4:	cmp	r0, #1
   22cb8:	bhi	24908 <__assert_fail@plt+0x12c5c>
   22cbc:	cmp	r8, #3
   22cc0:	bne	22cd4 <__assert_fail@plt+0x11028>
   22cc4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   22cc8:	bl	11ac0 <strlen@plt>
   22ccc:	cmp	r0, #1
   22cd0:	bhi	24908 <__assert_fail@plt+0x12c5c>
   22cd4:	ldr	lr, [sp, #44]	; 0x2c
   22cd8:	cmp	r6, #3
   22cdc:	beq	22e54 <__assert_fail@plt+0x111a8>
   22ce0:	cmp	r6, #0
   22ce4:	mov	r7, #0
   22ce8:	ldrbeq	r7, [fp, #-36]	; 0xffffffdc
   22cec:	cmp	r8, #3
   22cf0:	beq	22e64 <__assert_fail@plt+0x111b8>
   22cf4:	cmp	r8, #0
   22cf8:	mov	sl, #0
   22cfc:	ldrbeq	sl, [fp, #-44]	; 0xffffffd4
   22d00:	b	22e6c <__assert_fail@plt+0x111c0>
   22d04:	ldr	r0, [r7, #40]	; 0x28
   22d08:	mov	r1, #1
   22d0c:	sub	r0, r0, r5
   22d10:	str	r0, [r7, #40]	; 0x28
   22d14:	ldr	r0, [sp, #44]	; 0x2c
   22d18:	strb	r1, [r0, #4]
   22d1c:	add	r0, pc, #12
   22d20:	ldr	sl, [sp, #52]	; 0x34
   22d24:	ldr	r7, [sp, #60]	; 0x3c
   22d28:	mov	r9, r4
   22d2c:	ldr	pc, [r0, r6, lsl #2]
   22d30:	andeq	r2, r2, r0, asr #26
   22d34:	andeq	r2, r2, ip, lsl #28
   22d38:	andeq	r2, r2, r8, ror #26
   22d3c:	andeq	r2, r2, ip, lsr lr
   22d40:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   22d44:	mov	r3, #1
   22d48:	ubfx	r1, r0, #5, #3
   22d4c:	and	r0, r0, #31
   22d50:	ldr	r5, [sp, #28]
   22d54:	ldr	lr, [sp, #44]	; 0x2c
   22d58:	ldr	r2, [r8, r1, lsl #2]
   22d5c:	orr	r0, r2, r3, lsl r0
   22d60:	str	r0, [r8, r1, lsl #2]
   22d64:	b	22db0 <__assert_fail@plt+0x11104>
   22d68:	ldr	r7, [fp, #-36]	; 0xffffffdc
   22d6c:	mov	r0, r7
   22d70:	bl	11ac0 <strlen@plt>
   22d74:	cmp	r0, #1
   22d78:	bne	2464c <__assert_fail@plt+0x129a0>
   22d7c:	ldrb	r0, [r7]
   22d80:	mov	r3, #1
   22d84:	ubfx	r1, r0, #5, #3
   22d88:	and	r0, r0, #31
   22d8c:	ldr	r2, [r8, r1, lsl #2]
   22d90:	orr	r0, r2, r3, lsl r0
   22d94:	str	r0, [r8, r1, lsl #2]
   22d98:	mov	r1, #0
   22d9c:	ldr	r0, [sp, #20]
   22da0:	ldr	r5, [sp, #28]
   22da4:	ldr	lr, [sp, #44]	; 0x2c
   22da8:	ldr	r7, [sp, #60]	; 0x3c
   22dac:	str	r1, [r0]
   22db0:	ldrb	r0, [lr, #4]
   22db4:	cmp	r0, #21
   22db8:	beq	23038 <__assert_fail@plt+0x1138c>
   22dbc:	cmp	r0, #2
   22dc0:	ldr	r0, [sp, #48]	; 0x30
   22dc4:	beq	244e4 <__assert_fail@plt+0x12838>
   22dc8:	sub	r1, fp, #80	; 0x50
   22dcc:	mov	r2, lr
   22dd0:	mov	r3, r9
   22dd4:	mov	r4, lr
   22dd8:	str	r1, [fp, #-36]	; 0xffffffdc
   22ddc:	mov	r1, #3
   22de0:	str	r1, [fp, #-40]	; 0xffffffd8
   22de4:	str	r0, [sp]
   22de8:	mov	r0, #0
   22dec:	mov	r1, r5
   22df0:	str	r0, [sp, #4]
   22df4:	sub	r0, fp, #40	; 0x28
   22df8:	bl	24ec4 <__assert_fail@plt+0x13218>
   22dfc:	ldr	r2, [sp, #48]	; 0x30
   22e00:	cmp	r0, #0
   22e04:	beq	22b70 <__assert_fail@plt+0x10ec4>
   22e08:	b	244d8 <__assert_fail@plt+0x1282c>
   22e0c:	ldr	r1, [r7, #20]
   22e10:	ldr	r0, [sp, #36]	; 0x24
   22e14:	cmp	r0, r1
   22e18:	beq	22f9c <__assert_fail@plt+0x112f0>
   22e1c:	ldr	r0, [r7]
   22e20:	ldr	r5, [sp, #28]
   22e24:	ldr	lr, [sp, #44]	; 0x2c
   22e28:	ldr	r3, [fp, #-36]	; 0xffffffdc
   22e2c:	add	r2, r1, #1
   22e30:	str	r2, [r7, #20]
   22e34:	str	r3, [r0, r1, lsl #2]
   22e38:	b	22db0 <__assert_fail@plt+0x11104>
   22e3c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   22e40:	mov	r0, r7
   22e44:	bl	11ac0 <strlen@plt>
   22e48:	cmp	r0, #1
   22e4c:	beq	22d7c <__assert_fail@plt+0x110d0>
   22e50:	b	24650 <__assert_fail@plt+0x129a4>
   22e54:	ldr	r0, [fp, #-36]	; 0xffffffdc
   22e58:	ldrb	r7, [r0]
   22e5c:	cmp	r8, #3
   22e60:	bne	22cf4 <__assert_fail@plt+0x11048>
   22e64:	ldr	r0, [fp, #-44]	; 0xffffffd4
   22e68:	ldrb	sl, [r0]
   22e6c:	cmp	r6, #3
   22e70:	cmpne	r6, #0
   22e74:	bne	22e9c <__assert_fail@plt+0x111f0>
   22e78:	ldr	r0, [sp, #52]	; 0x34
   22e7c:	ldr	r0, [r0, #92]	; 0x5c
   22e80:	cmp	r0, #2
   22e84:	blt	22ea0 <__assert_fail@plt+0x111f4>
   22e88:	mov	r0, r7
   22e8c:	bl	11b38 <btowc@plt>
   22e90:	ldr	lr, [sp, #44]	; 0x2c
   22e94:	mov	r7, r0
   22e98:	b	22ea0 <__assert_fail@plt+0x111f4>
   22e9c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   22ea0:	cmp	r8, #3
   22ea4:	cmpne	r8, #0
   22ea8:	bne	22ed0 <__assert_fail@plt+0x11224>
   22eac:	ldr	r0, [sp, #52]	; 0x34
   22eb0:	ldr	r0, [r0, #92]	; 0x5c
   22eb4:	cmp	r0, #2
   22eb8:	blt	22ed4 <__assert_fail@plt+0x11228>
   22ebc:	mov	r0, sl
   22ec0:	bl	11b38 <btowc@plt>
   22ec4:	ldr	lr, [sp, #44]	; 0x2c
   22ec8:	mov	sl, r0
   22ecc:	b	22ed4 <__assert_fail@plt+0x11228>
   22ed0:	ldr	sl, [fp, #-44]	; 0xffffffd4
   22ed4:	ldr	r8, [sp, #24]
   22ed8:	cmn	r7, #1
   22edc:	mov	r9, #3
   22ee0:	cmnne	sl, #1
   22ee4:	beq	2444c <__assert_fail@plt+0x127a0>
   22ee8:	ldr	r0, [sp, #40]	; 0x28
   22eec:	cmp	r0, #0
   22ef0:	beq	22f00 <__assert_fail@plt+0x11254>
   22ef4:	cmp	r7, sl
   22ef8:	mov	r9, #11
   22efc:	bhi	2444c <__assert_fail@plt+0x127a0>
   22f00:	ldr	r0, [sp, #52]	; 0x34
   22f04:	ldr	r0, [r0, #92]	; 0x5c
   22f08:	cmp	r0, #2
   22f0c:	blt	22f44 <__assert_fail@plt+0x11298>
   22f10:	ldr	r4, [sp, #60]	; 0x3c
   22f14:	ldr	r1, [sp, #32]
   22f18:	ldr	r5, [sp, #28]
   22f1c:	ldr	r0, [r4, #32]
   22f20:	cmp	r1, r0
   22f24:	beq	22fdc <__assert_fail@plt+0x11330>
   22f28:	ldmib	r4, {r6, r9}
   22f2c:	str	r7, [r6, r0, lsl #2]
   22f30:	ldr	r0, [r4, #32]
   22f34:	add	r1, r0, #1
   22f38:	str	r1, [r4, #32]
   22f3c:	str	sl, [r9, r0, lsl #2]
   22f40:	b	22f48 <__assert_fail@plt+0x1129c>
   22f44:	ldr	r5, [sp, #28]
   22f48:	ldr	r9, [sp, #16]
   22f4c:	mov	r0, #0
   22f50:	b	22f60 <__assert_fail@plt+0x112b4>
   22f54:	add	r0, r0, #1
   22f58:	cmp	r0, #256	; 0x100
   22f5c:	beq	22f88 <__assert_fail@plt+0x112dc>
   22f60:	cmp	r7, r0
   22f64:	cmpls	r0, sl
   22f68:	bhi	22f54 <__assert_fail@plt+0x112a8>
   22f6c:	ubfx	r1, r0, #5, #3
   22f70:	and	r3, r0, #31
   22f74:	mov	r4, #1
   22f78:	ldr	r2, [r8, r1, lsl #2]
   22f7c:	orr	r2, r2, r4, lsl r3
   22f80:	str	r2, [r8, r1, lsl #2]
   22f84:	b	22f54 <__assert_fail@plt+0x112a8>
   22f88:	ldr	r0, [sp, #20]
   22f8c:	ldr	sl, [sp, #52]	; 0x34
   22f90:	ldr	r7, [sp, #60]	; 0x3c
   22f94:	mov	r1, #0
   22f98:	b	22dac <__assert_fail@plt+0x11100>
   22f9c:	ldr	r1, [sp, #36]	; 0x24
   22fa0:	mov	r0, #1
   22fa4:	orr	r1, r0, r1, lsl #1
   22fa8:	ldr	r0, [r7]
   22fac:	str	r1, [sp, #36]	; 0x24
   22fb0:	lsl	r1, r1, #2
   22fb4:	bl	1b64c <__assert_fail@plt+0x99a0>
   22fb8:	cmp	r0, #0
   22fbc:	beq	2495c <__assert_fail@plt+0x12cb0>
   22fc0:	ldr	r7, [sp, #60]	; 0x3c
   22fc4:	ldr	r5, [sp, #28]
   22fc8:	ldr	lr, [sp, #44]	; 0x2c
   22fcc:	mov	r9, r4
   22fd0:	str	r0, [r7]
   22fd4:	ldr	r1, [r7, #20]
   22fd8:	b	22e28 <__assert_fail@plt+0x1117c>
   22fdc:	ldr	r1, [sp, #32]
   22fe0:	mov	r0, #1
   22fe4:	orr	r1, r0, r1, lsl #1
   22fe8:	ldr	r0, [r4, #4]
   22fec:	lsl	r9, r1, #2
   22ff0:	str	r1, [sp, #32]
   22ff4:	mov	r1, r9
   22ff8:	bl	1b64c <__assert_fail@plt+0x99a0>
   22ffc:	mov	r6, r0
   23000:	ldr	r0, [r4, #8]
   23004:	mov	r1, r9
   23008:	bl	1b64c <__assert_fail@plt+0x99a0>
   2300c:	mov	r9, r0
   23010:	cmp	r6, #0
   23014:	cmpne	r9, #0
   23018:	beq	24974 <__assert_fail@plt+0x12cc8>
   2301c:	ldr	r4, [sp, #60]	; 0x3c
   23020:	stmib	r4, {r6, r9}
   23024:	ldr	r0, [r4, #32]
   23028:	ldr	r5, [sp, #28]
   2302c:	ldr	lr, [sp, #44]	; 0x2c
   23030:	ldr	r8, [sp, #24]
   23034:	b	22f2c <__assert_fail@plt+0x11280>
   23038:	ldr	r0, [r5, #40]	; 0x28
   2303c:	ldr	ip, [sp, #48]	; 0x30
   23040:	add	r0, r0, r9
   23044:	str	r0, [r5, #40]	; 0x28
   23048:	ldr	r0, [sp, #56]	; 0x38
   2304c:	cmp	r0, #0
   23050:	beq	23070 <__assert_fail@plt+0x113c4>
   23054:	vld1.32	{d16-d17}, [r8]
   23058:	mov	r0, r8
   2305c:	vmvn	q8, q8
   23060:	vst1.32	{d16-d17}, [r0]!
   23064:	vld1.32	{d16-d17}, [r0]
   23068:	vmvn	q8, q8
   2306c:	vst1.32	{d16-d17}, [r0]
   23070:	ldr	r0, [sl, #92]	; 0x5c
   23074:	cmp	r0, #2
   23078:	blt	230fc <__assert_fail@plt+0x11450>
   2307c:	ldr	r6, [sl, #60]	; 0x3c
   23080:	ldm	r8, {r1, r2, r3, r7}
   23084:	ldr	r5, [r6]
   23088:	and	r1, r1, r5
   2308c:	ldr	r5, [sp, #28]
   23090:	str	r1, [r8]
   23094:	ldr	r1, [r6, #4]
   23098:	and	r1, r2, r1
   2309c:	str	r1, [r8, #4]
   230a0:	ldr	r1, [r6, #8]
   230a4:	and	r1, r3, r1
   230a8:	str	r1, [r8, #8]
   230ac:	ldr	r1, [r6, #12]
   230b0:	and	r1, r7, r1
   230b4:	ldr	r7, [sp, #60]	; 0x3c
   230b8:	str	r1, [r8, #12]
   230bc:	ldr	r1, [r8, #16]
   230c0:	ldr	r2, [r6, #16]
   230c4:	and	r1, r1, r2
   230c8:	str	r1, [r8, #16]
   230cc:	ldr	r1, [r6, #20]
   230d0:	ldr	r2, [r8, #20]
   230d4:	and	r1, r2, r1
   230d8:	str	r1, [r8, #20]
   230dc:	ldr	r1, [r6, #24]
   230e0:	ldr	r2, [r8, #24]
   230e4:	and	r1, r2, r1
   230e8:	str	r1, [r8, #24]
   230ec:	ldr	r1, [r6, #28]
   230f0:	ldr	r2, [r8, #28]
   230f4:	and	r1, r2, r1
   230f8:	str	r1, [r8, #28]
   230fc:	ldr	r1, [r7, #20]
   23100:	cmp	r1, #0
   23104:	bne	2312c <__assert_fail@plt+0x11480>
   23108:	ldr	r1, [r7, #24]
   2310c:	cmp	r1, #0
   23110:	bne	2312c <__assert_fail@plt+0x11480>
   23114:	ldr	r1, [r7, #28]
   23118:	cmp	r1, #0
   2311c:	bne	2312c <__assert_fail@plt+0x11480>
   23120:	ldr	r1, [r7, #32]
   23124:	cmp	r1, #0
   23128:	beq	243a8 <__assert_fail@plt+0x126fc>
   2312c:	ldrb	r0, [sl, #88]	; 0x58
   23130:	orr	r0, r0, #2
   23134:	strb	r0, [sl, #88]	; 0x58
   23138:	ldr	r1, [sl, #64]	; 0x40
   2313c:	cmp	r1, #31
   23140:	beq	245bc <__assert_fail@plt+0x12910>
   23144:	ldr	r0, [sl, #56]	; 0x38
   23148:	add	r0, r0, r1, lsl #5
   2314c:	add	r2, r1, #1
   23150:	vmov.i32	q8, #0	; 0x00000000
   23154:	mov	r1, #6
   23158:	str	r2, [sl, #64]	; 0x40
   2315c:	mov	r2, #0
   23160:	add	r4, r0, #4
   23164:	str	r2, [r0, #20]
   23168:	str	r7, [r0, #24]
   2316c:	str	r1, [r0, #28]
   23170:	mov	r0, #28
   23174:	mov	r1, r4
   23178:	vst1.32	{d16-d17}, [r1], r0
   2317c:	mvn	r0, #0
   23180:	str	r0, [r1]
   23184:	ldr	r0, [r8]
   23188:	cmp	r0, #0
   2318c:	bne	231e4 <__assert_fail@plt+0x11538>
   23190:	ldr	r0, [r8, #4]
   23194:	cmp	r0, #0
   23198:	bne	231e4 <__assert_fail@plt+0x11538>
   2319c:	ldr	r0, [r8, #8]
   231a0:	cmp	r0, #0
   231a4:	bne	231e4 <__assert_fail@plt+0x11538>
   231a8:	ldr	r0, [r8, #12]
   231ac:	cmp	r0, #0
   231b0:	bne	231e4 <__assert_fail@plt+0x11538>
   231b4:	ldr	r0, [r8, #16]
   231b8:	cmp	r0, #0
   231bc:	bne	231e4 <__assert_fail@plt+0x11538>
   231c0:	ldr	r0, [r8, #20]
   231c4:	cmp	r0, #0
   231c8:	bne	231e4 <__assert_fail@plt+0x11538>
   231cc:	ldr	r0, [r8, #24]
   231d0:	cmp	r0, #0
   231d4:	bne	231e4 <__assert_fail@plt+0x11538>
   231d8:	ldr	r0, [r8, #28]
   231dc:	cmp	r0, #0
   231e0:	beq	24658 <__assert_fail@plt+0x129ac>
   231e4:	ldr	r1, [sl, #64]	; 0x40
   231e8:	cmp	r1, #31
   231ec:	beq	245ec <__assert_fail@plt+0x12940>
   231f0:	ldr	r0, [sl, #56]	; 0x38
   231f4:	add	r0, r0, r1, lsl #5
   231f8:	add	r2, r1, #1
   231fc:	vmov.i32	q8, #0	; 0x00000000
   23200:	mov	r1, #3
   23204:	str	r2, [sl, #64]	; 0x40
   23208:	mov	r2, #0
   2320c:	add	r6, r0, #4
   23210:	str	r2, [r0, #20]
   23214:	str	r8, [r0, #24]
   23218:	str	r1, [r0, #28]
   2321c:	mov	r0, #28
   23220:	mov	r1, r6
   23224:	vst1.32	{d16-d17}, [r1], r0
   23228:	mvn	r0, #0
   2322c:	str	r0, [r1]
   23230:	ldr	r1, [sl, #64]	; 0x40
   23234:	cmp	r1, #31
   23238:	beq	2461c <__assert_fail@plt+0x12970>
   2323c:	ldr	r0, [sl, #56]	; 0x38
   23240:	add	r7, r0, r1, lsl #5
   23244:	add	r2, r1, #1
   23248:	mov	r0, #0
   2324c:	mov	r1, #10
   23250:	str	r2, [sl, #64]	; 0x40
   23254:	mvn	r2, #0
   23258:	str	r0, [r7, #4]!
   2325c:	add	r3, r7, #20
   23260:	str	r6, [r7, #4]
   23264:	str	r4, [r7, #8]
   23268:	str	r0, [r7, #12]
   2326c:	str	r0, [r7, #16]
   23270:	stm	r3, {r0, r1, r2}
   23274:	str	r7, [r6]
   23278:	str	r7, [r4]
   2327c:	b	23480 <__assert_fail@plt+0x117d4>
   23280:	mov	r0, #5
   23284:	str	r0, [lr]
   23288:	ldr	r1, [sl, #64]	; 0x40
   2328c:	cmp	r1, #31
   23290:	beq	2473c <__assert_fail@plt+0x12a90>
   23294:	ldr	r0, [sl, #56]	; 0x38
   23298:	add	r4, r0, r1, lsl #5
   2329c:	add	r2, r1, #1
   232a0:	mov	r0, #0
   232a4:	mvn	r3, #0
   232a8:	str	r2, [sl, #64]	; 0x40
   232ac:	str	r0, [r4, #4]!
   232b0:	str	r0, [r4, #8]
   232b4:	str	r0, [r4, #4]
   232b8:	ldm	lr, {r1, r2}
   232bc:	str	r3, [r4, #28]
   232c0:	str	r0, [r4, #16]
   232c4:	str	r0, [r4, #12]
   232c8:	bic	r0, r2, #786432	; 0xc0000
   232cc:	str	r1, [r4, #20]
   232d0:	str	r0, [r4, #24]
   232d4:	mov	r0, #10
   232d8:	str	r0, [lr]
   232dc:	ldr	r1, [sl, #64]	; 0x40
   232e0:	cmp	r1, #31
   232e4:	beq	246a4 <__assert_fail@plt+0x129f8>
   232e8:	ldr	r0, [sl, #56]	; 0x38
   232ec:	add	r5, r0, r1, lsl #5
   232f0:	add	r2, r1, #1
   232f4:	mov	r0, #0
   232f8:	mvn	r3, #0
   232fc:	str	r2, [sl, #64]	; 0x40
   23300:	str	r0, [r5, #4]!
   23304:	str	r0, [r5, #8]
   23308:	str	r0, [r5, #4]
   2330c:	ldm	lr, {r1, r2}
   23310:	str	r3, [r5, #28]
   23314:	str	r0, [r5, #16]
   23318:	str	r0, [r5, #12]
   2331c:	bic	r0, r2, #786432	; 0xc0000
   23320:	str	r1, [r5, #20]
   23324:	str	r0, [r5, #24]
   23328:	ldr	r1, [sl, #64]	; 0x40
   2332c:	cmp	r1, #31
   23330:	beq	246d8 <__assert_fail@plt+0x12a2c>
   23334:	ldr	r0, [sl, #56]	; 0x38
   23338:	add	r6, r0, r1, lsl #5
   2333c:	add	r2, r1, #1
   23340:	mov	r0, #0
   23344:	cmp	r4, #0
   23348:	mov	r1, #10
   2334c:	str	r2, [sl, #64]	; 0x40
   23350:	mvn	r2, #0
   23354:	str	r0, [r6, #4]!
   23358:	add	r3, r6, #20
   2335c:	stmib	r6, {r4, r5}
   23360:	str	r0, [r6, #12]
   23364:	str	r0, [r6, #16]
   23368:	stm	r3, {r0, r1, r2}
   2336c:	strne	r6, [r4]
   23370:	cmp	r5, #0
   23374:	strne	r6, [r5]
   23378:	cmpne	r4, #0
   2337c:	bne	233d8 <__assert_fail@plt+0x1172c>
   23380:	mov	r0, #12
   23384:	ldr	r1, [sp, #20]
   23388:	b	242f4 <__assert_fail@plt+0x12648>
   2338c:	ldr	r1, [sl, #64]	; 0x40
   23390:	cmp	r1, #31
   23394:	beq	24770 <__assert_fail@plt+0x12ac4>
   23398:	ldr	r0, [sl, #56]	; 0x38
   2339c:	add	r6, r0, r1, lsl #5
   233a0:	add	r2, r1, #1
   233a4:	mov	r0, #0
   233a8:	mvn	r3, #0
   233ac:	str	r2, [sl, #64]	; 0x40
   233b0:	str	r0, [r6, #4]!
   233b4:	str	r0, [r6, #8]
   233b8:	str	r0, [r6, #4]
   233bc:	ldm	lr, {r1, r2}
   233c0:	str	r3, [r6, #28]
   233c4:	str	r0, [r6, #16]
   233c8:	str	r0, [r6, #12]
   233cc:	bic	r0, r2, #786432	; 0xc0000
   233d0:	str	r1, [r6, #20]
   233d4:	str	r0, [r6, #24]
   233d8:	ldr	r4, [sp, #28]
   233dc:	mov	r0, lr
   233e0:	mov	r2, ip
   233e4:	mov	r1, r4
   233e8:	bl	21860 <__assert_fail@plt+0xfbb4>
   233ec:	ldr	r1, [r4, #40]	; 0x28
   233f0:	mov	r9, r6
   233f4:	add	r0, r1, r0
   233f8:	str	r0, [r4, #40]	; 0x28
   233fc:	b	242f8 <__assert_fail@plt+0x1264c>
   23400:	ldrb	r0, [r7, #4]
   23404:	cmp	r0, #9
   23408:	bne	24850 <__assert_fail@plt+0x12ba4>
   2340c:	mov	lr, r7
   23410:	cmp	r4, #8
   23414:	bhi	23428 <__assert_fail@plt+0x1177c>
   23418:	ldr	r0, [sl, #84]	; 0x54
   2341c:	mov	r1, #1
   23420:	orr	r0, r0, r1, lsl r4
   23424:	str	r0, [sl, #84]	; 0x54
   23428:	ldr	r1, [sl, #64]	; 0x40
   2342c:	ldr	ip, [sp, #48]	; 0x30
   23430:	cmp	r1, #31
   23434:	beq	24670 <__assert_fail@plt+0x129c4>
   23438:	ldr	r0, [sl, #56]	; 0x38
   2343c:	add	r0, r0, r1, lsl #5
   23440:	add	r2, r1, #1
   23444:	mov	r1, #0
   23448:	cmp	r9, #0
   2344c:	mvn	r3, #0
   23450:	str	r2, [sl, #64]	; 0x40
   23454:	mov	r2, #17
   23458:	mov	r7, r0
   2345c:	str	r1, [r7, #4]!
   23460:	add	r6, r7, #20
   23464:	str	r9, [r7, #4]
   23468:	str	r1, [r7, #8]
   2346c:	str	r1, [r7, #12]
   23470:	str	r1, [r7, #16]
   23474:	stm	r6, {r1, r2, r3}
   23478:	strne	r7, [r9]
   2347c:	str	r4, [r0, #24]
   23480:	mov	r0, lr
   23484:	mov	r1, r5
   23488:	mov	r2, ip
   2348c:	bl	21860 <__assert_fail@plt+0xfbb4>
   23490:	ldr	r1, [r5, #40]	; 0x28
   23494:	ldr	ip, [sp, #48]	; 0x30
   23498:	ldr	lr, [sp, #44]	; 0x2c
   2349c:	mov	r4, #0
   234a0:	add	r0, r1, r0
   234a4:	str	r0, [r5, #40]	; 0x28
   234a8:	and	r0, ip, #16777216	; 0x1000000
   234ac:	str	r0, [sp, #32]
   234b0:	and	r0, ip, #2097152	; 0x200000
   234b4:	str	r0, [sp, #16]
   234b8:	add	r0, sl, #56	; 0x38
   234bc:	str	r0, [sp, #60]	; 0x3c
   234c0:	add	r0, sl, #64	; 0x40
   234c4:	str	r0, [sp, #24]
   234c8:	ldrb	r0, [lr, #4]
   234cc:	mov	r9, r7
   234d0:	cmp	r0, #23
   234d4:	bhi	242f8 <__assert_fail@plt+0x1264c>
   234d8:	movw	r2, #2048	; 0x800
   234dc:	mov	r1, #1
   234e0:	movt	r2, #140	; 0x8c
   234e4:	tst	r2, r1, lsl r0
   234e8:	beq	242f8 <__assert_fail@plt+0x1264c>
   234ec:	cmp	r0, #23
   234f0:	str	r9, [sp, #40]	; 0x28
   234f4:	bne	235a4 <__assert_fail@plt+0x118f8>
   234f8:	ldr	r9, [r5, #40]	; 0x28
   234fc:	ldm	lr, {r7, sl}
   23500:	mov	r6, r5
   23504:	mvn	r2, #0
   23508:	mov	r8, r2
   2350c:	mov	r0, lr
   23510:	mov	r1, r6
   23514:	mov	r2, ip
   23518:	mov	r5, r6
   2351c:	bl	21860 <__assert_fail@plt+0xfbb4>
   23520:	ldr	r1, [r6, #40]	; 0x28
   23524:	ldr	lr, [sp, #44]	; 0x2c
   23528:	add	r0, r1, r0
   2352c:	str	r0, [r6, #40]	; 0x28
   23530:	ldrb	r0, [lr, #4]
   23534:	ldrb	r1, [lr]
   23538:	cmp	r0, #24
   2353c:	beq	235c0 <__assert_fail@plt+0x11914>
   23540:	cmp	r0, #2
   23544:	beq	23bd4 <__assert_fail@plt+0x11f28>
   23548:	cmp	r1, #44	; 0x2c
   2354c:	beq	235c0 <__assert_fail@plt+0x11914>
   23550:	ldr	ip, [sp, #48]	; 0x30
   23554:	mvn	r2, #1
   23558:	cmp	r1, #48	; 0x30
   2355c:	bcc	23508 <__assert_fail@plt+0x1185c>
   23560:	cmp	r0, #1
   23564:	bne	23508 <__assert_fail@plt+0x1185c>
   23568:	cmn	r8, #2
   2356c:	beq	23508 <__assert_fail@plt+0x1185c>
   23570:	cmp	r1, #57	; 0x39
   23574:	bhi	23508 <__assert_fail@plt+0x1185c>
   23578:	cmn	r8, #1
   2357c:	beq	2359c <__assert_fail@plt+0x118f0>
   23580:	add	r0, r8, r8, lsl #2
   23584:	add	r0, r1, r0, lsl #1
   23588:	movw	r1, #32816	; 0x8030
   2358c:	cmp	r0, r1
   23590:	movge	r0, r1
   23594:	sub	r2, r0, #48	; 0x30
   23598:	b	23508 <__assert_fail@plt+0x1185c>
   2359c:	sub	r2, r1, #48	; 0x30
   235a0:	b	23508 <__assert_fail@plt+0x1185c>
   235a4:	cmp	r0, #19
   235a8:	sub	r0, r0, #18
   235ac:	mvn	sl, #0
   235b0:	clz	r0, r0
   235b4:	movweq	sl, #1
   235b8:	lsr	r8, r0, #5
   235bc:	b	23754 <__assert_fail@plt+0x11aa8>
   235c0:	cmn	r8, #1
   235c4:	bne	235f8 <__assert_fail@plt+0x1194c>
   235c8:	ldr	ip, [sp, #48]	; 0x30
   235cc:	cmp	r1, #44	; 0x2c
   235d0:	moveq	r8, #0
   235d4:	cmpeq	r0, #1
   235d8:	beq	23644 <__assert_fail@plt+0x11998>
   235dc:	ldr	r0, [sp, #20]
   235e0:	mov	r1, #10
   235e4:	str	r1, [r0]
   235e8:	ldr	r9, [sp, #40]	; 0x28
   235ec:	mov	r7, #0
   235f0:	mov	r5, r6
   235f4:	b	24208 <__assert_fail@plt+0x1255c>
   235f8:	ldr	ip, [sp, #48]	; 0x30
   235fc:	cmn	r8, #2
   23600:	beq	23618 <__assert_fail@plt+0x1196c>
   23604:	cmp	r0, #24
   23608:	beq	23700 <__assert_fail@plt+0x11a54>
   2360c:	cmp	r0, #1
   23610:	cmpeq	r1, #44	; 0x2c
   23614:	beq	23644 <__assert_fail@plt+0x11998>
   23618:	ldr	r1, [sp, #16]
   2361c:	cmp	r1, #0
   23620:	beq	24164 <__assert_fail@plt+0x124b8>
   23624:	mov	r0, #1
   23628:	str	r9, [r6, #40]	; 0x28
   2362c:	mov	r5, r6
   23630:	bfi	sl, r0, #0, #8
   23634:	stm	lr, {r7, sl}
   23638:	ldr	r9, [sp, #40]	; 0x28
   2363c:	mov	r7, r9
   23640:	b	24208 <__assert_fail@plt+0x1255c>
   23644:	mvn	r2, #0
   23648:	str	r9, [sp, #56]	; 0x38
   2364c:	mov	r9, r2
   23650:	mov	r0, lr
   23654:	mov	r1, r6
   23658:	mov	r2, ip
   2365c:	mov	r5, r6
   23660:	bl	21860 <__assert_fail@plt+0xfbb4>
   23664:	ldr	r1, [r6, #40]	; 0x28
   23668:	ldr	lr, [sp, #44]	; 0x2c
   2366c:	add	r0, r1, r0
   23670:	str	r0, [r6, #40]	; 0x28
   23674:	ldrb	r0, [lr, #4]
   23678:	cmp	r0, #24
   2367c:	beq	236e8 <__assert_fail@plt+0x11a3c>
   23680:	cmp	r0, #2
   23684:	beq	23fd8 <__assert_fail@plt+0x1232c>
   23688:	ldrb	r1, [lr]
   2368c:	ldr	ip, [sp, #48]	; 0x30
   23690:	cmp	r1, #44	; 0x2c
   23694:	beq	236ec <__assert_fail@plt+0x11a40>
   23698:	mvn	r2, #1
   2369c:	cmp	r1, #48	; 0x30
   236a0:	bcc	2364c <__assert_fail@plt+0x119a0>
   236a4:	cmp	r0, #1
   236a8:	bne	2364c <__assert_fail@plt+0x119a0>
   236ac:	cmn	r9, #2
   236b0:	beq	2364c <__assert_fail@plt+0x119a0>
   236b4:	cmp	r1, #57	; 0x39
   236b8:	bhi	2364c <__assert_fail@plt+0x119a0>
   236bc:	cmn	r9, #1
   236c0:	beq	236e0 <__assert_fail@plt+0x11a34>
   236c4:	add	r0, r9, r9, lsl #2
   236c8:	add	r0, r1, r0, lsl #1
   236cc:	movw	r1, #32816	; 0x8030
   236d0:	cmp	r0, r1
   236d4:	movge	r0, r1
   236d8:	sub	r2, r0, #48	; 0x30
   236dc:	b	2364c <__assert_fail@plt+0x119a0>
   236e0:	sub	r2, r1, #48	; 0x30
   236e4:	b	2364c <__assert_fail@plt+0x119a0>
   236e8:	ldr	ip, [sp, #48]	; 0x30
   236ec:	mov	r2, r9
   236f0:	ldr	r9, [sp, #56]	; 0x38
   236f4:	cmn	r2, #2
   236f8:	bne	2370c <__assert_fail@plt+0x11a60>
   236fc:	b	23618 <__assert_fail@plt+0x1196c>
   23700:	mov	r2, r8
   23704:	cmn	r2, #2
   23708:	beq	23618 <__assert_fail@plt+0x1196c>
   2370c:	ldr	r9, [sp, #40]	; 0x28
   23710:	cmp	r8, r2
   23714:	mov	r1, #0
   23718:	mov	r5, r6
   2371c:	movwle	r1, #1
   23720:	cmp	r0, #24
   23724:	bne	23f98 <__assert_fail@plt+0x122ec>
   23728:	add	r0, r2, #1
   2372c:	mov	sl, r2
   23730:	clz	r0, r0
   23734:	lsr	r0, r0, #5
   23738:	orrs	r0, r1, r0
   2373c:	beq	23f98 <__assert_fail@plt+0x122ec>
   23740:	cmn	sl, #1
   23744:	mov	r0, sl
   23748:	moveq	r0, r8
   2374c:	cmp	r0, #32768	; 0x8000
   23750:	bge	24150 <__assert_fail@plt+0x124a4>
   23754:	mov	r0, lr
   23758:	mov	r1, r5
   2375c:	mov	r2, ip
   23760:	bl	21860 <__assert_fail@plt+0xfbb4>
   23764:	ldr	r1, [r5, #40]	; 0x28
   23768:	mov	r7, #0
   2376c:	cmp	r9, #0
   23770:	add	r0, r1, r0
   23774:	str	r0, [r5, #40]	; 0x28
   23778:	beq	23bdc <__assert_fail@plt+0x11f30>
   2377c:	ldr	ip, [sp, #48]	; 0x30
   23780:	orrs	r0, sl, r8
   23784:	beq	23be8 <__assert_fail@plt+0x11f3c>
   23788:	mov	r0, #0
   2378c:	cmp	r8, #1
   23790:	mov	r7, r9
   23794:	str	r0, [sp, #36]	; 0x24
   23798:	ldr	lr, [sp, #44]	; 0x2c
   2379c:	ldr	r5, [sp, #24]
   237a0:	bge	23c9c <__assert_fail@plt+0x11ff0>
   237a4:	ldrb	r0, [r7, #24]
   237a8:	cmp	r0, #17
   237ac:	bne	23820 <__assert_fail@plt+0x11b74>
   237b0:	ldr	r0, [r7, #20]
   237b4:	mov	r2, r7
   237b8:	mov	r1, r2
   237bc:	ldr	r2, [r2, #4]
   237c0:	cmp	r2, #0
   237c4:	bne	237b8 <__assert_fail@plt+0x11b0c>
   237c8:	ldr	r2, [r1, #8]
   237cc:	cmp	r2, #0
   237d0:	bne	237b8 <__assert_fail@plt+0x11b0c>
   237d4:	ldr	r2, [r1, #24]
   237d8:	uxtb	r3, r2
   237dc:	cmp	r3, #17
   237e0:	bne	237f4 <__assert_fail@plt+0x11b48>
   237e4:	ldr	r3, [r1, #20]
   237e8:	cmp	r3, r0
   237ec:	orreq	r2, r2, #524288	; 0x80000
   237f0:	streq	r2, [r1, #24]
   237f4:	ldr	r3, [r1]
   237f8:	cmp	r3, #0
   237fc:	beq	23820 <__assert_fail@plt+0x11b74>
   23800:	ldr	r2, [r3, #8]
   23804:	cmp	r2, r1
   23808:	mov	r1, r3
   2380c:	beq	237d4 <__assert_fail@plt+0x11b28>
   23810:	cmp	r2, #0
   23814:	mov	r1, r3
   23818:	beq	237d4 <__assert_fail@plt+0x11b28>
   2381c:	b	237b8 <__assert_fail@plt+0x11b0c>
   23820:	ldr	r1, [r5]
   23824:	cmn	sl, #1
   23828:	mov	r6, #10
   2382c:	movweq	r6, #11
   23830:	cmp	r1, #31
   23834:	beq	23f48 <__assert_fail@plt+0x1229c>
   23838:	ldr	r0, [sp, #60]	; 0x3c
   2383c:	ldr	r0, [r0]
   23840:	add	r9, r0, r1, lsl #5
   23844:	add	r2, r1, #1
   23848:	mvn	r0, #0
   2384c:	str	r2, [r5]
   23850:	str	r4, [r9, #4]!
   23854:	str	r7, [r9, #4]
   23858:	str	r4, [r9, #8]
   2385c:	str	r4, [r9, #12]
   23860:	str	r4, [r9, #16]
   23864:	str	r4, [r9, #20]
   23868:	str	r6, [r9, #24]
   2386c:	str	r0, [r9, #28]
   23870:	add	r0, r8, #2
   23874:	str	r9, [r7]
   23878:	cmp	r0, sl
   2387c:	bgt	23b60 <__assert_fail@plt+0x11eb4>
   23880:	str	sl, [sp, #52]	; 0x34
   23884:	mov	sl, r9
   23888:	ldr	r1, [r5]
   2388c:	str	r0, [sp, #56]	; 0x38
   23890:	cmp	r1, #31
   23894:	beq	23aa0 <__assert_fail@plt+0x11df4>
   23898:	ldr	r0, [sp, #60]	; 0x3c
   2389c:	ldr	r0, [r0]
   238a0:	add	r8, r0, r1, lsl #5
   238a4:	add	r3, r1, #1
   238a8:	add	r2, r7, #20
   238ac:	sub	r6, fp, #80	; 0x50
   238b0:	str	r3, [r5]
   238b4:	str	r4, [r8, #4]!
   238b8:	str	r4, [r8, #8]
   238bc:	str	r4, [r8, #4]
   238c0:	ldm	r2, {r0, r1}
   238c4:	mvn	r2, #0
   238c8:	str	r2, [r8, #28]
   238cc:	str	r4, [r8, #16]
   238d0:	str	r4, [r8, #12]
   238d4:	str	r0, [r8, #20]
   238d8:	bic	r0, r1, #786432	; 0xc0000
   238dc:	str	r0, [r8, #24]
   238e0:	mov	r0, r8
   238e4:	str	r8, [fp, #-80]	; 0xffffffb0
   238e8:	str	r9, [r0]
   238ec:	ldr	r0, [r6]
   238f0:	ldr	r1, [r0, #24]
   238f4:	orr	r1, r1, #262144	; 0x40000
   238f8:	str	r1, [r0, #24]
   238fc:	ldr	r0, [r7, #4]
   23900:	ldr	r9, [r6]
   23904:	cmp	r0, #0
   23908:	beq	23918 <__assert_fail@plt+0x11c6c>
   2390c:	add	r6, r9, #4
   23910:	mov	r7, r0
   23914:	b	2394c <__assert_fail@plt+0x11ca0>
   23918:	mov	r1, #0
   2391c:	mov	r0, r7
   23920:	ldr	r7, [r7, #8]
   23924:	cmp	r7, r1
   23928:	cmpne	r7, #0
   2392c:	bne	23948 <__assert_fail@plt+0x11c9c>
   23930:	ldr	r7, [r0]
   23934:	ldr	r9, [r9]
   23938:	mov	r1, r0
   2393c:	cmp	r7, #0
   23940:	bne	2391c <__assert_fail@plt+0x11c70>
   23944:	b	239d8 <__assert_fail@plt+0x11d2c>
   23948:	add	r6, r9, #8
   2394c:	ldr	r1, [r5]
   23950:	cmp	r1, #31
   23954:	beq	239a4 <__assert_fail@plt+0x11cf8>
   23958:	ldr	r0, [sp, #60]	; 0x3c
   2395c:	ldr	r0, [r0]
   23960:	add	r0, r0, r1, lsl #5
   23964:	add	r3, r1, #1
   23968:	add	r2, r7, #20
   2396c:	str	r3, [r5]
   23970:	mvn	r3, #0
   23974:	str	r4, [r0, #4]!
   23978:	str	r4, [r0, #8]
   2397c:	str	r4, [r0, #4]
   23980:	ldm	r2, {r1, r2}
   23984:	str	r3, [r0, #28]
   23988:	str	r4, [r0, #16]
   2398c:	str	r4, [r0, #12]
   23990:	str	r1, [r0, #20]
   23994:	bic	r1, r2, #786432	; 0xc0000
   23998:	str	r1, [r0, #24]
   2399c:	str	r0, [r6]
   239a0:	b	238e8 <__assert_fail@plt+0x11c3c>
   239a4:	mov	r0, #996	; 0x3e4
   239a8:	bl	1b5b8 <__assert_fail@plt+0x990c>
   239ac:	cmp	r0, #0
   239b0:	beq	23b48 <__assert_fail@plt+0x11e9c>
   239b4:	ldr	r2, [sp, #60]	; 0x3c
   239b8:	ldr	ip, [sp, #48]	; 0x30
   239bc:	ldr	lr, [sp, #44]	; 0x2c
   239c0:	ldr	r1, [r2]
   239c4:	str	r1, [r0]
   239c8:	mov	r1, #0
   239cc:	str	r0, [r2]
   239d0:	str	r1, [r5]
   239d4:	b	23960 <__assert_fail@plt+0x11cb4>
   239d8:	mov	r7, r8
   239dc:	ldr	r1, [r5]
   239e0:	cmp	r1, #31
   239e4:	beq	23ad4 <__assert_fail@plt+0x11e28>
   239e8:	ldr	r0, [sp, #60]	; 0x3c
   239ec:	ldr	r0, [r0]
   239f0:	add	r6, r0, r1, lsl #5
   239f4:	add	r2, r1, #1
   239f8:	mov	r0, #16
   239fc:	cmp	r7, #0
   23a00:	str	r2, [r5]
   23a04:	str	r4, [r6, #4]!
   23a08:	str	sl, [r6, #4]
   23a0c:	str	r7, [r6, #8]
   23a10:	str	r4, [r6, #12]
   23a14:	str	r4, [r6, #16]
   23a18:	str	r4, [r6, #20]
   23a1c:	str	r0, [r6, #24]
   23a20:	mvn	r0, #0
   23a24:	str	r0, [r6, #28]
   23a28:	str	r6, [sl]
   23a2c:	beq	241f0 <__assert_fail@plt+0x12544>
   23a30:	str	r6, [r7]
   23a34:	ldr	r1, [r5]
   23a38:	cmp	r1, #31
   23a3c:	beq	23b08 <__assert_fail@plt+0x11e5c>
   23a40:	ldr	r0, [sp, #60]	; 0x3c
   23a44:	ldr	r0, [r0]
   23a48:	add	sl, r0, r1, lsl #5
   23a4c:	add	r2, r1, #1
   23a50:	mov	r0, #10
   23a54:	ldr	r1, [sp, #56]	; 0x38
   23a58:	str	r2, [r5]
   23a5c:	str	r4, [sl, #4]!
   23a60:	str	r6, [sl, #4]
   23a64:	str	r4, [sl, #8]
   23a68:	str	r4, [sl, #12]
   23a6c:	str	r4, [sl, #16]
   23a70:	str	r4, [sl, #20]
   23a74:	str	r0, [sl, #24]
   23a78:	mvn	r0, #0
   23a7c:	str	r0, [sl, #28]
   23a80:	ldr	r0, [sp, #52]	; 0x34
   23a84:	str	sl, [r6]
   23a88:	cmp	r1, r0
   23a8c:	bge	23b5c <__assert_fail@plt+0x11eb0>
   23a90:	ldr	r9, [r7]
   23a94:	mov	r0, r1
   23a98:	add	r0, r1, #1
   23a9c:	b	23888 <__assert_fail@plt+0x11bdc>
   23aa0:	mov	r0, #996	; 0x3e4
   23aa4:	bl	1b5b8 <__assert_fail@plt+0x990c>
   23aa8:	cmp	r0, #0
   23aac:	beq	23b3c <__assert_fail@plt+0x11e90>
   23ab0:	ldr	r2, [sp, #60]	; 0x3c
   23ab4:	ldr	ip, [sp, #48]	; 0x30
   23ab8:	ldr	lr, [sp, #44]	; 0x2c
   23abc:	ldr	r1, [r2]
   23ac0:	str	r1, [r0]
   23ac4:	mov	r1, #0
   23ac8:	str	r0, [r2]
   23acc:	str	r1, [r5]
   23ad0:	b	238a0 <__assert_fail@plt+0x11bf4>
   23ad4:	mov	r0, #996	; 0x3e4
   23ad8:	bl	1b5b8 <__assert_fail@plt+0x990c>
   23adc:	ldr	lr, [sp, #44]	; 0x2c
   23ae0:	ldr	ip, [sp, #48]	; 0x30
   23ae4:	cmp	r0, #0
   23ae8:	beq	241f0 <__assert_fail@plt+0x12544>
   23aec:	ldr	r2, [sp, #60]	; 0x3c
   23af0:	ldr	r1, [r2]
   23af4:	str	r1, [r0]
   23af8:	mov	r1, #0
   23afc:	str	r0, [r2]
   23b00:	str	r1, [r5]
   23b04:	b	239f0 <__assert_fail@plt+0x11d44>
   23b08:	mov	r0, #996	; 0x3e4
   23b0c:	bl	1b5b8 <__assert_fail@plt+0x990c>
   23b10:	ldr	lr, [sp, #44]	; 0x2c
   23b14:	ldr	ip, [sp, #48]	; 0x30
   23b18:	cmp	r0, #0
   23b1c:	beq	241f0 <__assert_fail@plt+0x12544>
   23b20:	ldr	r2, [sp, #60]	; 0x3c
   23b24:	ldr	r1, [r2]
   23b28:	str	r1, [r0]
   23b2c:	mov	r1, #0
   23b30:	str	r0, [r2]
   23b34:	str	r1, [r5]
   23b38:	b	23a48 <__assert_fail@plt+0x11d9c>
   23b3c:	mov	r7, #0
   23b40:	str	r7, [fp, #-80]	; 0xffffffb0
   23b44:	b	23b50 <__assert_fail@plt+0x11ea4>
   23b48:	mov	r7, #0
   23b4c:	str	r7, [r6]
   23b50:	ldr	ip, [sp, #48]	; 0x30
   23b54:	ldr	lr, [sp, #44]	; 0x2c
   23b58:	b	239dc <__assert_fail@plt+0x11d30>
   23b5c:	mov	r9, sl
   23b60:	ldr	r6, [sp, #36]	; 0x24
   23b64:	ldr	r8, [sp, #28]
   23b68:	cmp	r6, #0
   23b6c:	beq	23bc4 <__assert_fail@plt+0x11f18>
   23b70:	ldr	r1, [r5]
   23b74:	cmp	r1, #31
   23b78:	beq	23fa4 <__assert_fail@plt+0x122f8>
   23b7c:	ldr	r0, [sp, #60]	; 0x3c
   23b80:	ldr	r0, [r0]
   23b84:	add	r7, r0, r1, lsl #5
   23b88:	add	r2, r1, #1
   23b8c:	mov	r0, #0
   23b90:	mov	r1, #16
   23b94:	str	r2, [r5]
   23b98:	str	r0, [r7, #4]!
   23b9c:	stmib	r7, {r6, r9}
   23ba0:	str	r0, [r7, #12]
   23ba4:	str	r0, [r7, #16]
   23ba8:	str	r0, [r7, #20]
   23bac:	str	r1, [r7, #24]
   23bb0:	mvn	r1, #0
   23bb4:	str	r1, [r7, #28]
   23bb8:	str	r7, [r6]
   23bbc:	str	r7, [r9]
   23bc0:	b	23bcc <__assert_fail@plt+0x11f20>
   23bc4:	mov	r0, #0
   23bc8:	mov	r7, r9
   23bcc:	mov	r5, r8
   23bd0:	b	24228 <__assert_fail@plt+0x1257c>
   23bd4:	ldr	ip, [sp, #48]	; 0x30
   23bd8:	b	23618 <__assert_fail@plt+0x1196c>
   23bdc:	ldr	ip, [sp, #48]	; 0x30
   23be0:	ldr	lr, [sp, #44]	; 0x2c
   23be4:	b	24208 <__assert_fail@plt+0x1255c>
   23be8:	ldr	lr, [sp, #44]	; 0x2c
   23bec:	mov	r0, r9
   23bf0:	mov	r6, r0
   23bf4:	ldr	r0, [r0, #4]
   23bf8:	cmp	r0, #0
   23bfc:	bne	23bf0 <__assert_fail@plt+0x11f44>
   23c00:	ldr	r0, [r6, #8]
   23c04:	cmp	r0, #0
   23c08:	bne	23bf0 <__assert_fail@plt+0x11f44>
   23c0c:	ldr	r0, [r6, #24]
   23c10:	movw	r1, #255	; 0xff
   23c14:	movt	r1, #4
   23c18:	and	r0, r0, r1
   23c1c:	cmp	r0, #3
   23c20:	beq	23c54 <__assert_fail@plt+0x11fa8>
   23c24:	cmp	r0, #6
   23c28:	bne	23c68 <__assert_fail@plt+0x11fbc>
   23c2c:	ldr	r5, [r6, #20]
   23c30:	ldr	r0, [r5]
   23c34:	bl	1b4e8 <__assert_fail@plt+0x983c>
   23c38:	ldr	r0, [r5, #4]
   23c3c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   23c40:	ldr	r0, [r5, #8]
   23c44:	bl	1b4e8 <__assert_fail@plt+0x983c>
   23c48:	ldr	r0, [r5, #12]
   23c4c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   23c50:	b	23c58 <__assert_fail@plt+0x11fac>
   23c54:	ldr	r5, [r6, #20]
   23c58:	mov	r0, r5
   23c5c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   23c60:	ldr	ip, [sp, #48]	; 0x30
   23c64:	ldr	lr, [sp, #44]	; 0x2c
   23c68:	ldr	r1, [r6]
   23c6c:	cmp	r1, #0
   23c70:	beq	23c94 <__assert_fail@plt+0x11fe8>
   23c74:	ldr	r0, [r1, #8]
   23c78:	cmp	r0, r6
   23c7c:	mov	r6, r1
   23c80:	beq	23c0c <__assert_fail@plt+0x11f60>
   23c84:	cmp	r0, #0
   23c88:	mov	r6, r1
   23c8c:	beq	23c0c <__assert_fail@plt+0x11f60>
   23c90:	b	23bf0 <__assert_fail@plt+0x11f44>
   23c94:	ldr	r5, [sp, #28]
   23c98:	b	24208 <__assert_fail@plt+0x1255c>
   23c9c:	mov	r3, r9
   23ca0:	str	sl, [sp, #52]	; 0x34
   23ca4:	str	r9, [sp, #36]	; 0x24
   23ca8:	beq	23f7c <__assert_fail@plt+0x122d0>
   23cac:	ldr	sl, [sp, #40]	; 0x28
   23cb0:	ldr	r0, [sl]
   23cb4:	mov	r3, sl
   23cb8:	str	r0, [sp, #36]	; 0x24
   23cbc:	mov	r0, #2
   23cc0:	ldr	r1, [r5]
   23cc4:	str	r0, [sp, #56]	; 0x38
   23cc8:	cmp	r1, #31
   23ccc:	beq	23ea0 <__assert_fail@plt+0x121f4>
   23cd0:	ldr	r0, [sp, #60]	; 0x3c
   23cd4:	ldr	r0, [r0]
   23cd8:	add	r6, r0, r1, lsl #5
   23cdc:	add	r2, r3, #20
   23ce0:	mov	r9, r3
   23ce4:	add	r3, r1, #1
   23ce8:	sub	r7, fp, #80	; 0x50
   23cec:	str	r3, [r5]
   23cf0:	str	r4, [r6, #4]!
   23cf4:	str	r4, [r6, #8]
   23cf8:	str	r4, [r6, #4]
   23cfc:	ldm	r2, {r0, r1}
   23d00:	mvn	r2, #0
   23d04:	str	r2, [r6, #28]
   23d08:	str	r4, [r6, #16]
   23d0c:	str	r4, [r6, #12]
   23d10:	str	r0, [r6, #20]
   23d14:	bic	r0, r1, #786432	; 0xc0000
   23d18:	str	r0, [r6, #24]
   23d1c:	mov	r0, r6
   23d20:	str	r6, [fp, #-80]	; 0xffffffb0
   23d24:	ldr	r1, [sp, #36]	; 0x24
   23d28:	str	r1, [r0]
   23d2c:	ldr	r0, [r7]
   23d30:	ldr	r1, [r0, #24]
   23d34:	orr	r1, r1, #262144	; 0x40000
   23d38:	str	r1, [r0, #24]
   23d3c:	ldr	r0, [r9, #4]
   23d40:	ldr	r1, [r7]
   23d44:	cmp	r0, #0
   23d48:	str	r1, [sp, #36]	; 0x24
   23d4c:	beq	23d5c <__assert_fail@plt+0x120b0>
   23d50:	add	r7, r1, #4
   23d54:	mov	r9, r0
   23d58:	b	23d9c <__assert_fail@plt+0x120f0>
   23d5c:	mov	r1, #0
   23d60:	mov	r0, r9
   23d64:	ldr	r9, [r9, #8]
   23d68:	cmp	r9, r1
   23d6c:	cmpne	r9, #0
   23d70:	bne	23d94 <__assert_fail@plt+0x120e8>
   23d74:	ldr	r1, [sp, #36]	; 0x24
   23d78:	ldr	r9, [r0]
   23d7c:	ldr	r1, [r1]
   23d80:	cmp	r9, #0
   23d84:	str	r1, [sp, #36]	; 0x24
   23d88:	mov	r1, r0
   23d8c:	bne	23d60 <__assert_fail@plt+0x120b4>
   23d90:	b	23e28 <__assert_fail@plt+0x1217c>
   23d94:	ldr	r0, [sp, #36]	; 0x24
   23d98:	add	r7, r0, #8
   23d9c:	ldr	r1, [r5]
   23da0:	cmp	r1, #31
   23da4:	beq	23df4 <__assert_fail@plt+0x12148>
   23da8:	ldr	r0, [sp, #60]	; 0x3c
   23dac:	ldr	r0, [r0]
   23db0:	add	r0, r0, r1, lsl #5
   23db4:	add	r3, r1, #1
   23db8:	add	r2, r9, #20
   23dbc:	str	r3, [r5]
   23dc0:	mvn	r3, #0
   23dc4:	str	r4, [r0, #4]!
   23dc8:	str	r4, [r0, #8]
   23dcc:	str	r4, [r0, #4]
   23dd0:	ldm	r2, {r1, r2}
   23dd4:	str	r3, [r0, #28]
   23dd8:	str	r4, [r0, #16]
   23ddc:	str	r4, [r0, #12]
   23de0:	str	r1, [r0, #20]
   23de4:	bic	r1, r2, #786432	; 0xc0000
   23de8:	str	r1, [r0, #24]
   23dec:	str	r0, [r7]
   23df0:	b	23d24 <__assert_fail@plt+0x12078>
   23df4:	mov	r0, #996	; 0x3e4
   23df8:	bl	1b5b8 <__assert_fail@plt+0x990c>
   23dfc:	cmp	r0, #0
   23e00:	beq	23f34 <__assert_fail@plt+0x12288>
   23e04:	ldr	r2, [sp, #60]	; 0x3c
   23e08:	ldr	ip, [sp, #48]	; 0x30
   23e0c:	ldr	lr, [sp, #44]	; 0x2c
   23e10:	ldr	r1, [r2]
   23e14:	str	r1, [r0]
   23e18:	mov	r1, #0
   23e1c:	str	r0, [r2]
   23e20:	str	r1, [r5]
   23e24:	b	23db0 <__assert_fail@plt+0x12104>
   23e28:	mov	r3, r6
   23e2c:	ldr	r1, [r5]
   23e30:	cmp	r1, #31
   23e34:	beq	23ee0 <__assert_fail@plt+0x12234>
   23e38:	ldr	r0, [sp, #60]	; 0x3c
   23e3c:	ldr	r0, [r0]
   23e40:	add	r2, r1, #1
   23e44:	add	r1, r0, r1, lsl #5
   23e48:	mov	r0, #16
   23e4c:	cmp	r3, #0
   23e50:	str	r2, [r5]
   23e54:	str	r4, [r1, #4]!
   23e58:	str	sl, [r1, #4]
   23e5c:	str	r3, [r1, #8]
   23e60:	str	r4, [r1, #12]
   23e64:	str	r4, [r1, #16]
   23e68:	str	r4, [r1, #20]
   23e6c:	str	r0, [r1, #24]
   23e70:	mvn	r0, #0
   23e74:	str	r1, [sp, #36]	; 0x24
   23e78:	str	r0, [r1, #28]
   23e7c:	str	r1, [sl]
   23e80:	beq	241f0 <__assert_fail@plt+0x12544>
   23e84:	ldr	r1, [sp, #56]	; 0x38
   23e88:	ldr	sl, [sp, #36]	; 0x24
   23e8c:	add	r0, r1, #1
   23e90:	cmp	r1, r8
   23e94:	str	sl, [r3]
   23e98:	bne	23cc0 <__assert_fail@plt+0x12014>
   23e9c:	b	23f7c <__assert_fail@plt+0x122d0>
   23ea0:	mov	r0, #996	; 0x3e4
   23ea4:	mov	r6, r3
   23ea8:	bl	1b5b8 <__assert_fail@plt+0x990c>
   23eac:	cmp	r0, #0
   23eb0:	beq	23f1c <__assert_fail@plt+0x12270>
   23eb4:	ldr	r2, [sp, #60]	; 0x3c
   23eb8:	ldr	r5, [sp, #24]
   23ebc:	ldr	ip, [sp, #48]	; 0x30
   23ec0:	ldr	lr, [sp, #44]	; 0x2c
   23ec4:	mov	r3, r6
   23ec8:	ldr	r1, [r2]
   23ecc:	str	r1, [r0]
   23ed0:	mov	r1, #0
   23ed4:	str	r0, [r2]
   23ed8:	str	r1, [r5]
   23edc:	b	23cd8 <__assert_fail@plt+0x1202c>
   23ee0:	mov	r0, #996	; 0x3e4
   23ee4:	mov	r6, r3
   23ee8:	bl	1b5b8 <__assert_fail@plt+0x990c>
   23eec:	ldr	lr, [sp, #44]	; 0x2c
   23ef0:	ldr	ip, [sp, #48]	; 0x30
   23ef4:	cmp	r0, #0
   23ef8:	beq	241f0 <__assert_fail@plt+0x12544>
   23efc:	ldr	r2, [sp, #60]	; 0x3c
   23f00:	mov	r3, r6
   23f04:	ldr	r1, [r2]
   23f08:	str	r1, [r0]
   23f0c:	mov	r1, #0
   23f10:	str	r0, [r2]
   23f14:	str	r1, [r5]
   23f18:	b	23e40 <__assert_fail@plt+0x12194>
   23f1c:	ldr	ip, [sp, #48]	; 0x30
   23f20:	ldr	lr, [sp, #44]	; 0x2c
   23f24:	ldr	r5, [sp, #24]
   23f28:	mov	r3, #0
   23f2c:	str	r3, [fp, #-80]	; 0xffffffb0
   23f30:	b	23e2c <__assert_fail@plt+0x12180>
   23f34:	ldr	ip, [sp, #48]	; 0x30
   23f38:	ldr	lr, [sp, #44]	; 0x2c
   23f3c:	mov	r3, #0
   23f40:	str	r3, [r7]
   23f44:	b	23e2c <__assert_fail@plt+0x12180>
   23f48:	mov	r0, #996	; 0x3e4
   23f4c:	bl	1b5b8 <__assert_fail@plt+0x990c>
   23f50:	ldr	lr, [sp, #44]	; 0x2c
   23f54:	ldr	ip, [sp, #48]	; 0x30
   23f58:	cmp	r0, #0
   23f5c:	beq	241f0 <__assert_fail@plt+0x12544>
   23f60:	ldr	r2, [sp, #60]	; 0x3c
   23f64:	ldr	r1, [r2]
   23f68:	str	r1, [r0]
   23f6c:	mov	r1, #0
   23f70:	str	r0, [r2]
   23f74:	str	r1, [r5]
   23f78:	b	23840 <__assert_fail@plt+0x11b94>
   23f7c:	ldr	sl, [sp, #52]	; 0x34
   23f80:	mov	r0, #0
   23f84:	cmp	r8, sl
   23f88:	bne	23fe4 <__assert_fail@plt+0x12338>
   23f8c:	ldr	r7, [sp, #36]	; 0x24
   23f90:	ldr	r5, [sp, #28]
   23f94:	b	24228 <__assert_fail@plt+0x1257c>
   23f98:	ldr	r0, [sp, #20]
   23f9c:	mov	r1, #10
   23fa0:	b	24158 <__assert_fail@plt+0x124ac>
   23fa4:	mov	r0, #996	; 0x3e4
   23fa8:	bl	1b5b8 <__assert_fail@plt+0x990c>
   23fac:	cmp	r0, #0
   23fb0:	beq	2417c <__assert_fail@plt+0x124d0>
   23fb4:	ldr	r2, [sp, #60]	; 0x3c
   23fb8:	ldr	ip, [sp, #48]	; 0x30
   23fbc:	ldr	lr, [sp, #44]	; 0x2c
   23fc0:	ldr	r1, [r2]
   23fc4:	str	r1, [r0]
   23fc8:	mov	r1, #0
   23fcc:	str	r0, [r2]
   23fd0:	str	r1, [r5]
   23fd4:	b	23b84 <__assert_fail@plt+0x11ed8>
   23fd8:	ldr	ip, [sp, #48]	; 0x30
   23fdc:	ldr	r9, [sp, #56]	; 0x38
   23fe0:	b	23618 <__assert_fail@plt+0x1196c>
   23fe4:	mov	r6, r3
   23fe8:	ldr	r1, [r5]
   23fec:	ldr	r9, [r6], #20
   23ff0:	cmp	r1, #31
   23ff4:	beq	24194 <__assert_fail@plt+0x124e8>
   23ff8:	ldr	r0, [sp, #60]	; 0x3c
   23ffc:	ldr	r0, [r0]
   24000:	add	r7, r0, r1, lsl #5
   24004:	add	r2, r1, #1
   24008:	str	r2, [r5]
   2400c:	mvn	r2, #0
   24010:	str	r4, [r7, #4]!
   24014:	str	r4, [r7, #8]
   24018:	str	r4, [r7, #4]
   2401c:	ldm	r6, {r0, r1}
   24020:	str	r2, [r7, #28]
   24024:	str	r4, [r7, #16]
   24028:	str	r4, [r7, #12]
   2402c:	sub	r6, fp, #80	; 0x50
   24030:	str	r0, [r7, #20]
   24034:	bic	r0, r1, #786432	; 0xc0000
   24038:	str	r0, [r7, #24]
   2403c:	mov	r0, r7
   24040:	str	r7, [fp, #-80]	; 0xffffffb0
   24044:	str	r9, [r0]
   24048:	ldr	r0, [r6]
   2404c:	ldr	r1, [r0, #24]
   24050:	orr	r1, r1, #262144	; 0x40000
   24054:	str	r1, [r0, #24]
   24058:	ldr	r0, [r3, #4]
   2405c:	ldr	r9, [r6]
   24060:	cmp	r0, #0
   24064:	beq	24074 <__assert_fail@plt+0x123c8>
   24068:	add	r2, r9, #4
   2406c:	mov	r6, r0
   24070:	b	240a8 <__assert_fail@plt+0x123fc>
   24074:	mov	r1, #0
   24078:	ldr	r6, [r3, #8]
   2407c:	mov	r0, r3
   24080:	cmp	r6, r1
   24084:	cmpne	r6, #0
   24088:	bne	240a4 <__assert_fail@plt+0x123f8>
   2408c:	ldr	r3, [r0]
   24090:	ldr	r9, [r9]
   24094:	mov	r1, r0
   24098:	cmp	r3, #0
   2409c:	bne	24078 <__assert_fail@plt+0x123cc>
   240a0:	b	237a4 <__assert_fail@plt+0x11af8>
   240a4:	add	r2, r9, #8
   240a8:	ldr	r1, [r5]
   240ac:	str	r2, [sp, #56]	; 0x38
   240b0:	cmp	r1, #31
   240b4:	beq	2410c <__assert_fail@plt+0x12460>
   240b8:	ldr	r0, [sp, #60]	; 0x3c
   240bc:	ldr	r0, [r0]
   240c0:	add	r0, r0, r1, lsl #5
   240c4:	add	r3, r1, #1
   240c8:	add	r2, r6, #20
   240cc:	str	r3, [r5]
   240d0:	mvn	r3, #0
   240d4:	str	r4, [r0, #4]!
   240d8:	str	r4, [r0, #8]
   240dc:	str	r4, [r0, #4]
   240e0:	ldm	r2, {r1, r2}
   240e4:	str	r3, [r0, #28]
   240e8:	mov	r3, r6
   240ec:	ldr	r6, [sp, #56]	; 0x38
   240f0:	str	r4, [r0, #16]
   240f4:	str	r4, [r0, #12]
   240f8:	str	r1, [r0, #20]
   240fc:	bic	r1, r2, #786432	; 0xc0000
   24100:	str	r1, [r0, #24]
   24104:	str	r0, [r6]
   24108:	b	24044 <__assert_fail@plt+0x12398>
   2410c:	mov	r0, #996	; 0x3e4
   24110:	str	r6, [sp, #12]
   24114:	bl	1b5b8 <__assert_fail@plt+0x990c>
   24118:	cmp	r0, #0
   2411c:	beq	241e0 <__assert_fail@plt+0x12534>
   24120:	ldr	r2, [sp, #60]	; 0x3c
   24124:	ldr	r5, [sp, #24]
   24128:	ldr	ip, [sp, #48]	; 0x30
   2412c:	ldr	lr, [sp, #44]	; 0x2c
   24130:	ldr	sl, [sp, #52]	; 0x34
   24134:	ldr	r6, [sp, #12]
   24138:	ldr	r1, [r2]
   2413c:	str	r1, [r0]
   24140:	mov	r1, #0
   24144:	str	r0, [r2]
   24148:	str	r1, [r5]
   2414c:	b	240c0 <__assert_fail@plt+0x12414>
   24150:	ldr	r0, [sp, #20]
   24154:	mov	r1, #15
   24158:	str	r1, [r0]
   2415c:	mov	r7, #0
   24160:	b	24208 <__assert_fail@plt+0x1255c>
   24164:	ldr	r1, [sp, #20]
   24168:	cmp	r0, #2
   2416c:	mov	r0, #10
   24170:	movweq	r0, #9
   24174:	str	r0, [r1]
   24178:	b	235e8 <__assert_fail@plt+0x1193c>
   2417c:	ldr	ip, [sp, #48]	; 0x30
   24180:	ldr	lr, [sp, #44]	; 0x2c
   24184:	ldr	r9, [sp, #40]	; 0x28
   24188:	mov	r7, #0
   2418c:	mov	r5, r8
   24190:	b	24208 <__assert_fail@plt+0x1255c>
   24194:	mov	r0, #996	; 0x3e4
   24198:	mov	r7, r3
   2419c:	bl	1b5b8 <__assert_fail@plt+0x990c>
   241a0:	cmp	r0, #0
   241a4:	beq	241d8 <__assert_fail@plt+0x1252c>
   241a8:	ldr	r2, [sp, #60]	; 0x3c
   241ac:	ldr	r5, [sp, #24]
   241b0:	ldr	ip, [sp, #48]	; 0x30
   241b4:	ldr	lr, [sp, #44]	; 0x2c
   241b8:	ldr	sl, [sp, #52]	; 0x34
   241bc:	mov	r3, r7
   241c0:	ldr	r1, [r2]
   241c4:	str	r1, [r0]
   241c8:	mov	r1, #0
   241cc:	str	r0, [r2]
   241d0:	str	r1, [r5]
   241d4:	b	24000 <__assert_fail@plt+0x12354>
   241d8:	str	r4, [fp, #-80]	; 0xffffffb0
   241dc:	b	241e8 <__assert_fail@plt+0x1253c>
   241e0:	ldr	r0, [sp, #56]	; 0x38
   241e4:	str	r4, [r0]
   241e8:	ldr	ip, [sp, #48]	; 0x30
   241ec:	ldr	lr, [sp, #44]	; 0x2c
   241f0:	ldr	r0, [sp, #20]
   241f4:	ldr	r5, [sp, #28]
   241f8:	ldr	r9, [sp, #40]	; 0x28
   241fc:	mov	r1, #12
   24200:	mov	r7, #0
   24204:	str	r1, [r0]
   24208:	clz	r0, r7
   2420c:	cmp	r7, #0
   24210:	lsr	r0, r0, #5
   24214:	bne	24228 <__assert_fail@plt+0x1257c>
   24218:	ldr	r1, [sp, #20]
   2421c:	ldr	r1, [r1]
   24220:	cmp	r1, #0
   24224:	bne	24304 <__assert_fail@plt+0x12658>
   24228:	ldr	r1, [sp, #32]
   2422c:	cmp	r1, #0
   24230:	beq	234c8 <__assert_fail@plt+0x1181c>
   24234:	ldrb	r1, [lr, #4]
   24238:	cmp	r1, #23
   2423c:	cmpne	r1, #11
   24240:	bne	234c8 <__assert_fail@plt+0x1181c>
   24244:	movw	r6, #255	; 0xff
   24248:	cmp	r0, #0
   2424c:	movt	r6, #4
   24250:	bne	242e8 <__assert_fail@plt+0x1263c>
   24254:	mov	r5, r7
   24258:	ldr	r7, [r7, #4]
   2425c:	cmp	r7, #0
   24260:	bne	24254 <__assert_fail@plt+0x125a8>
   24264:	ldr	r7, [r5, #8]
   24268:	cmp	r7, #0
   2426c:	bne	24254 <__assert_fail@plt+0x125a8>
   24270:	ldr	r0, [r5, #24]
   24274:	and	r0, r0, r6
   24278:	cmp	r0, #3
   2427c:	beq	242b0 <__assert_fail@plt+0x12604>
   24280:	cmp	r0, #6
   24284:	bne	242bc <__assert_fail@plt+0x12610>
   24288:	ldr	r4, [r5, #20]
   2428c:	ldr	r0, [r4]
   24290:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24294:	ldr	r0, [r4, #4]
   24298:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2429c:	ldr	r0, [r4, #8]
   242a0:	bl	1b4e8 <__assert_fail@plt+0x983c>
   242a4:	ldr	r0, [r4, #12]
   242a8:	bl	1b4e8 <__assert_fail@plt+0x983c>
   242ac:	b	242b4 <__assert_fail@plt+0x12608>
   242b0:	ldr	r4, [r5, #20]
   242b4:	mov	r0, r4
   242b8:	bl	1b4e8 <__assert_fail@plt+0x983c>
   242bc:	ldr	r0, [r5]
   242c0:	cmp	r0, #0
   242c4:	beq	242e8 <__assert_fail@plt+0x1263c>
   242c8:	ldr	r7, [r0, #8]
   242cc:	cmp	r7, r5
   242d0:	mov	r5, r0
   242d4:	beq	24270 <__assert_fail@plt+0x125c4>
   242d8:	cmp	r7, #0
   242dc:	mov	r5, r0
   242e0:	beq	24270 <__assert_fail@plt+0x125c4>
   242e4:	b	24254 <__assert_fail@plt+0x125a8>
   242e8:	mov	r0, #13
   242ec:	ldr	r1, [sp, #20]
   242f0:	mov	r9, #0
   242f4:	str	r0, [r1]
   242f8:	mov	r0, r9
   242fc:	sub	sp, fp, #28
   24300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24304:	cmp	r9, #0
   24308:	beq	22a34 <__assert_fail@plt+0x10d88>
   2430c:	movw	r6, #255	; 0xff
   24310:	movt	r6, #4
   24314:	mov	r5, r9
   24318:	ldr	r9, [r9, #4]
   2431c:	cmp	r9, #0
   24320:	bne	24314 <__assert_fail@plt+0x12668>
   24324:	ldr	r9, [r5, #8]
   24328:	cmp	r9, #0
   2432c:	bne	24314 <__assert_fail@plt+0x12668>
   24330:	ldr	r0, [r5, #24]
   24334:	and	r0, r0, r6
   24338:	cmp	r0, #3
   2433c:	beq	24370 <__assert_fail@plt+0x126c4>
   24340:	cmp	r0, #6
   24344:	bne	2437c <__assert_fail@plt+0x126d0>
   24348:	ldr	r4, [r5, #20]
   2434c:	ldr	r0, [r4]
   24350:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24354:	ldr	r0, [r4, #4]
   24358:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2435c:	ldr	r0, [r4, #8]
   24360:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24364:	ldr	r0, [r4, #12]
   24368:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2436c:	b	24374 <__assert_fail@plt+0x126c8>
   24370:	ldr	r4, [r5, #20]
   24374:	mov	r0, r4
   24378:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2437c:	ldr	r0, [r5]
   24380:	cmp	r0, #0
   24384:	beq	22a34 <__assert_fail@plt+0x10d88>
   24388:	ldr	r9, [r0, #8]
   2438c:	cmp	r9, r5
   24390:	mov	r5, r0
   24394:	beq	24330 <__assert_fail@plt+0x12684>
   24398:	cmp	r9, #0
   2439c:	mov	r5, r0
   243a0:	beq	24330 <__assert_fail@plt+0x12684>
   243a4:	b	24314 <__assert_fail@plt+0x12668>
   243a8:	cmp	r0, #2
   243ac:	blt	243c8 <__assert_fail@plt+0x1271c>
   243b0:	ldr	r0, [r7, #36]	; 0x24
   243b4:	cmp	r0, #0
   243b8:	bne	2312c <__assert_fail@plt+0x11480>
   243bc:	ldrb	r0, [r7, #16]
   243c0:	tst	r0, #1
   243c4:	bne	2312c <__assert_fail@plt+0x11480>
   243c8:	ldr	r0, [r7]
   243cc:	bl	1b4e8 <__assert_fail@plt+0x983c>
   243d0:	ldr	r0, [r7, #4]
   243d4:	bl	1b4e8 <__assert_fail@plt+0x983c>
   243d8:	ldr	r0, [r7, #8]
   243dc:	bl	1b4e8 <__assert_fail@plt+0x983c>
   243e0:	ldr	r0, [r7, #12]
   243e4:	bl	1b4e8 <__assert_fail@plt+0x983c>
   243e8:	mov	r0, r7
   243ec:	bl	1b4e8 <__assert_fail@plt+0x983c>
   243f0:	ldr	r1, [sl, #64]	; 0x40
   243f4:	cmp	r1, #31
   243f8:	beq	24934 <__assert_fail@plt+0x12c88>
   243fc:	ldr	r0, [sl, #56]	; 0x38
   24400:	add	r0, r0, r1, lsl #5
   24404:	add	r2, r1, #1
   24408:	vmov.i32	q8, #0	; 0x00000000
   2440c:	ldr	ip, [sp, #48]	; 0x30
   24410:	ldr	lr, [sp, #44]	; 0x2c
   24414:	mov	r1, #3
   24418:	str	r2, [sl, #64]	; 0x40
   2441c:	mov	r2, #0
   24420:	add	r7, r0, #4
   24424:	str	r2, [r0, #20]
   24428:	str	r8, [r0, #24]
   2442c:	str	r1, [r0, #28]
   24430:	mov	r0, #28
   24434:	mov	r1, r7
   24438:	vst1.32	{d16-d17}, [r1], r0
   2443c:	mvn	r0, #0
   24440:	str	r0, [r1]
   24444:	b	23480 <__assert_fail@plt+0x117d4>
   24448:	ldr	r8, [sp, #24]
   2444c:	ldr	r0, [sp, #20]
   24450:	ldr	r5, [sp, #28]
   24454:	ldr	sl, [sp, #52]	; 0x34
   24458:	ldr	r7, [sp, #60]	; 0x3c
   2445c:	str	r9, [r0]
   24460:	ldr	r4, [sp, #20]
   24464:	mov	r0, r8
   24468:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2446c:	ldr	r0, [r7]
   24470:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24474:	ldr	r0, [r7, #4]
   24478:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2447c:	ldr	r0, [r7, #8]
   24480:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24484:	ldr	r0, [r7, #12]
   24488:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2448c:	mov	r0, r7
   24490:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24494:	ldr	r0, [r4]
   24498:	mov	r7, #0
   2449c:	mov	r9, #0
   244a0:	b	225c4 <__assert_fail@plt+0x10918>
   244a4:	mov	r0, #996	; 0x3e4
   244a8:	bl	1b5b8 <__assert_fail@plt+0x990c>
   244ac:	cmp	r0, #0
   244b0:	beq	247a0 <__assert_fail@plt+0x12af4>
   244b4:	ldr	r1, [sl, #56]	; 0x38
   244b8:	ldr	r5, [sp, #28]
   244bc:	ldr	ip, [sp, #48]	; 0x30
   244c0:	ldr	lr, [sp, #44]	; 0x2c
   244c4:	str	r1, [r0]
   244c8:	mov	r1, #0
   244cc:	str	r1, [sl, #64]	; 0x40
   244d0:	str	r0, [sl, #56]	; 0x38
   244d4:	b	2251c <__assert_fail@plt+0x10870>
   244d8:	mov	r9, r0
   244dc:	str	sl, [sp, #52]	; 0x34
   244e0:	b	2444c <__assert_fail@plt+0x127a0>
   244e4:	mov	r9, #7
   244e8:	str	sl, [sp, #52]	; 0x34
   244ec:	b	2444c <__assert_fail@plt+0x127a0>
   244f0:	ldr	r4, [sp, #20]
   244f4:	ldr	r7, [sp, #60]	; 0x3c
   244f8:	mov	r0, #2
   244fc:	str	r0, [r4]
   24500:	b	24464 <__assert_fail@plt+0x127b8>
   24504:	mov	r0, r8
   24508:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2450c:	mov	r0, r7
   24510:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24514:	b	23380 <__assert_fail@plt+0x116d4>
   24518:	mov	r0, #996	; 0x3e4
   2451c:	bl	1b5b8 <__assert_fail@plt+0x990c>
   24520:	cmp	r0, #0
   24524:	beq	247a0 <__assert_fail@plt+0x12af4>
   24528:	ldr	r1, [sl, #56]	; 0x38
   2452c:	ldr	r5, [sp, #28]
   24530:	ldr	ip, [sp, #48]	; 0x30
   24534:	ldr	lr, [sp, #44]	; 0x2c
   24538:	str	r1, [r0]
   2453c:	mov	r1, #0
   24540:	str	r1, [sl, #64]	; 0x40
   24544:	str	r0, [sl, #56]	; 0x38
   24548:	b	22728 <__assert_fail@plt+0x10a7c>
   2454c:	mov	r0, #6
   24550:	b	23384 <__assert_fail@plt+0x116d8>
   24554:	mov	r0, #996	; 0x3e4
   24558:	bl	1b5b8 <__assert_fail@plt+0x990c>
   2455c:	cmp	r0, #0
   24560:	beq	247a0 <__assert_fail@plt+0x12af4>
   24564:	ldr	r1, [sl, #56]	; 0x38
   24568:	ldr	r5, [sp, #28]
   2456c:	ldr	ip, [sp, #48]	; 0x30
   24570:	ldr	lr, [sp, #44]	; 0x2c
   24574:	str	r1, [r0]
   24578:	mov	r1, #0
   2457c:	str	r1, [sl, #64]	; 0x40
   24580:	str	r0, [sl, #56]	; 0x38
   24584:	b	22968 <__assert_fail@plt+0x10cbc>
   24588:	mov	r0, #996	; 0x3e4
   2458c:	bl	1b5b8 <__assert_fail@plt+0x990c>
   24590:	cmp	r0, #0
   24594:	beq	247a0 <__assert_fail@plt+0x12af4>
   24598:	ldr	r1, [sl, #56]	; 0x38
   2459c:	ldr	r5, [sp, #28]
   245a0:	ldr	ip, [sp, #48]	; 0x30
   245a4:	ldr	lr, [sp, #44]	; 0x2c
   245a8:	str	r1, [r0]
   245ac:	mov	r1, #0
   245b0:	str	r1, [sl, #64]	; 0x40
   245b4:	str	r0, [sl, #56]	; 0x38
   245b8:	b	2290c <__assert_fail@plt+0x10c60>
   245bc:	mov	r0, #996	; 0x3e4
   245c0:	bl	1b5b8 <__assert_fail@plt+0x990c>
   245c4:	cmp	r0, #0
   245c8:	beq	24964 <__assert_fail@plt+0x12cb8>
   245cc:	ldr	r1, [sl, #56]	; 0x38
   245d0:	ldr	ip, [sp, #48]	; 0x30
   245d4:	ldr	lr, [sp, #44]	; 0x2c
   245d8:	str	r1, [r0]
   245dc:	mov	r1, #0
   245e0:	str	r1, [sl, #64]	; 0x40
   245e4:	str	r0, [sl, #56]	; 0x38
   245e8:	b	23148 <__assert_fail@plt+0x1149c>
   245ec:	mov	r0, #996	; 0x3e4
   245f0:	bl	1b5b8 <__assert_fail@plt+0x990c>
   245f4:	cmp	r0, #0
   245f8:	beq	24964 <__assert_fail@plt+0x12cb8>
   245fc:	ldr	r1, [sl, #56]	; 0x38
   24600:	ldr	ip, [sp, #48]	; 0x30
   24604:	ldr	lr, [sp, #44]	; 0x2c
   24608:	str	r1, [r0]
   2460c:	mov	r1, #0
   24610:	str	r1, [sl, #64]	; 0x40
   24614:	str	r0, [sl, #56]	; 0x38
   24618:	b	231f4 <__assert_fail@plt+0x11548>
   2461c:	mov	r0, #996	; 0x3e4
   24620:	bl	1b5b8 <__assert_fail@plt+0x990c>
   24624:	cmp	r0, #0
   24628:	beq	24964 <__assert_fail@plt+0x12cb8>
   2462c:	ldr	r1, [sl, #56]	; 0x38
   24630:	ldr	ip, [sp, #48]	; 0x30
   24634:	ldr	lr, [sp, #44]	; 0x2c
   24638:	str	r1, [r0]
   2463c:	mov	r1, #0
   24640:	str	r1, [sl, #64]	; 0x40
   24644:	str	r0, [sl, #56]	; 0x38
   24648:	b	23240 <__assert_fail@plt+0x11594>
   2464c:	str	sl, [sp, #52]	; 0x34
   24650:	mov	r9, #3
   24654:	b	2444c <__assert_fail@plt+0x127a0>
   24658:	mov	r0, r8
   2465c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24660:	ldr	lr, [sp, #44]	; 0x2c
   24664:	ldr	ip, [sp, #48]	; 0x30
   24668:	mov	r7, r4
   2466c:	b	23480 <__assert_fail@plt+0x117d4>
   24670:	mov	r0, #996	; 0x3e4
   24674:	bl	1b5b8 <__assert_fail@plt+0x990c>
   24678:	cmp	r0, #0
   2467c:	beq	247a0 <__assert_fail@plt+0x12af4>
   24680:	ldr	r1, [sl, #56]	; 0x38
   24684:	ldr	r5, [sp, #28]
   24688:	ldr	ip, [sp, #48]	; 0x30
   2468c:	ldr	lr, [sp, #44]	; 0x2c
   24690:	str	r1, [r0]
   24694:	mov	r1, #0
   24698:	str	r1, [sl, #64]	; 0x40
   2469c:	str	r0, [sl, #56]	; 0x38
   246a0:	b	2343c <__assert_fail@plt+0x11790>
   246a4:	mov	r0, #996	; 0x3e4
   246a8:	bl	1b5b8 <__assert_fail@plt+0x990c>
   246ac:	cmp	r0, #0
   246b0:	beq	2483c <__assert_fail@plt+0x12b90>
   246b4:	ldr	r1, [sl, #56]	; 0x38
   246b8:	ldr	ip, [sp, #48]	; 0x30
   246bc:	ldr	lr, [sp, #44]	; 0x2c
   246c0:	mov	r9, #0
   246c4:	str	r1, [r0]
   246c8:	mov	r1, #0
   246cc:	str	r1, [sl, #64]	; 0x40
   246d0:	str	r0, [sl, #56]	; 0x38
   246d4:	b	232ec <__assert_fail@plt+0x11640>
   246d8:	mov	r0, #996	; 0x3e4
   246dc:	bl	1b5b8 <__assert_fail@plt+0x990c>
   246e0:	ldr	lr, [sp, #44]	; 0x2c
   246e4:	ldr	ip, [sp, #48]	; 0x30
   246e8:	cmp	r0, #0
   246ec:	beq	23380 <__assert_fail@plt+0x116d4>
   246f0:	ldr	r1, [sl, #56]	; 0x38
   246f4:	str	r1, [r0]
   246f8:	mov	r1, #0
   246fc:	str	r1, [sl, #64]	; 0x40
   24700:	str	r0, [sl, #56]	; 0x38
   24704:	b	23338 <__assert_fail@plt+0x1168c>
   24708:	mov	r0, #996	; 0x3e4
   2470c:	bl	1b5b8 <__assert_fail@plt+0x990c>
   24710:	cmp	r0, #0
   24714:	beq	24910 <__assert_fail@plt+0x12c64>
   24718:	ldr	r1, [sl, #56]	; 0x38
   2471c:	ldr	ip, [sp, #48]	; 0x30
   24720:	ldr	lr, [sp, #44]	; 0x2c
   24724:	mov	r9, #0
   24728:	str	r1, [r0]
   2472c:	mov	r1, #0
   24730:	str	r1, [sl, #64]	; 0x40
   24734:	str	r0, [sl, #56]	; 0x38
   24738:	b	22660 <__assert_fail@plt+0x109b4>
   2473c:	mov	r0, #996	; 0x3e4
   24740:	bl	1b5b8 <__assert_fail@plt+0x990c>
   24744:	cmp	r0, #0
   24748:	beq	2491c <__assert_fail@plt+0x12c70>
   2474c:	ldr	r1, [sl, #56]	; 0x38
   24750:	ldr	ip, [sp, #48]	; 0x30
   24754:	ldr	lr, [sp, #44]	; 0x2c
   24758:	mov	r9, #0
   2475c:	str	r1, [r0]
   24760:	mov	r1, #0
   24764:	str	r1, [sl, #64]	; 0x40
   24768:	str	r0, [sl, #56]	; 0x38
   2476c:	b	23298 <__assert_fail@plt+0x115ec>
   24770:	mov	r0, #996	; 0x3e4
   24774:	bl	1b5b8 <__assert_fail@plt+0x990c>
   24778:	cmp	r0, #0
   2477c:	beq	247a0 <__assert_fail@plt+0x12af4>
   24780:	ldr	r1, [sl, #56]	; 0x38
   24784:	ldr	ip, [sp, #48]	; 0x30
   24788:	ldr	lr, [sp, #44]	; 0x2c
   2478c:	str	r1, [r0]
   24790:	mov	r1, #0
   24794:	str	r1, [sl, #64]	; 0x40
   24798:	str	r0, [sl, #56]	; 0x38
   2479c:	b	2339c <__assert_fail@plt+0x116f0>
   247a0:	mov	r0, #12
   247a4:	b	242ec <__assert_fail@plt+0x12640>
   247a8:	mov	r4, #0
   247ac:	mov	r5, #0
   247b0:	b	247bc <__assert_fail@plt+0x12b10>
   247b4:	mov	r5, #4
   247b8:	mov	r4, #128	; 0x80
   247bc:	bl	11a84 <__ctype_b_loc@plt>
   247c0:	ldr	r0, [r0]
   247c4:	ldr	ip, [sp, #48]	; 0x30
   247c8:	ldr	lr, [sp, #44]	; 0x2c
   247cc:	mov	r1, #1
   247d0:	mov	r9, #0
   247d4:	add	r7, r0, r4, lsl #1
   247d8:	b	247f0 <__assert_fail@plt+0x12b44>
   247dc:	add	r5, r5, #1
   247e0:	add	r7, r7, #64	; 0x40
   247e4:	add	r4, r4, #32
   247e8:	cmp	r5, #8
   247ec:	beq	22634 <__assert_fail@plt+0x10988>
   247f0:	add	r0, sl, r5, lsl #2
   247f4:	mov	r3, #0
   247f8:	add	r2, r0, #96	; 0x60
   247fc:	mov	r0, r7
   24800:	b	24820 <__assert_fail@plt+0x12b74>
   24804:	ldr	r6, [r2]
   24808:	orr	r6, r6, r1, lsl r3
   2480c:	str	r6, [r2]
   24810:	add	r3, r3, #1
   24814:	add	r0, r0, #2
   24818:	cmp	r3, #32
   2481c:	beq	247dc <__assert_fail@plt+0x12b30>
   24820:	add	r6, r4, r3
   24824:	cmp	r6, #95	; 0x5f
   24828:	beq	24804 <__assert_fail@plt+0x12b58>
   2482c:	ldrh	r6, [r0]
   24830:	ands	r6, r6, #8
   24834:	beq	24810 <__assert_fail@plt+0x12b64>
   24838:	b	24804 <__assert_fail@plt+0x12b58>
   2483c:	ldr	ip, [sp, #48]	; 0x30
   24840:	ldr	lr, [sp, #44]	; 0x2c
   24844:	mov	r5, #0
   24848:	mov	r9, #0
   2484c:	b	23328 <__assert_fail@plt+0x1167c>
   24850:	cmp	r9, #0
   24854:	beq	248f4 <__assert_fail@plt+0x12c48>
   24858:	movw	r5, #255	; 0xff
   2485c:	movt	r5, #4
   24860:	mov	r6, r9
   24864:	ldr	r9, [r9, #4]
   24868:	cmp	r9, #0
   2486c:	bne	24860 <__assert_fail@plt+0x12bb4>
   24870:	ldr	r9, [r6, #8]
   24874:	cmp	r9, #0
   24878:	bne	24860 <__assert_fail@plt+0x12bb4>
   2487c:	ldr	r0, [r6, #24]
   24880:	and	r0, r0, r5
   24884:	cmp	r0, #3
   24888:	beq	248bc <__assert_fail@plt+0x12c10>
   2488c:	cmp	r0, #6
   24890:	bne	248c8 <__assert_fail@plt+0x12c1c>
   24894:	ldr	r4, [r6, #20]
   24898:	ldr	r0, [r4]
   2489c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   248a0:	ldr	r0, [r4, #4]
   248a4:	bl	1b4e8 <__assert_fail@plt+0x983c>
   248a8:	ldr	r0, [r4, #8]
   248ac:	bl	1b4e8 <__assert_fail@plt+0x983c>
   248b0:	ldr	r0, [r4, #12]
   248b4:	bl	1b4e8 <__assert_fail@plt+0x983c>
   248b8:	b	248c0 <__assert_fail@plt+0x12c14>
   248bc:	ldr	r4, [r6, #20]
   248c0:	mov	r0, r4
   248c4:	bl	1b4e8 <__assert_fail@plt+0x983c>
   248c8:	ldr	r0, [r6]
   248cc:	cmp	r0, #0
   248d0:	beq	248f4 <__assert_fail@plt+0x12c48>
   248d4:	ldr	r9, [r0, #8]
   248d8:	cmp	r9, r6
   248dc:	mov	r6, r0
   248e0:	beq	2487c <__assert_fail@plt+0x12bd0>
   248e4:	cmp	r9, #0
   248e8:	mov	r6, r0
   248ec:	beq	2487c <__assert_fail@plt+0x12bd0>
   248f0:	b	24860 <__assert_fail@plt+0x12bb4>
   248f4:	mov	r0, #8
   248f8:	b	242ec <__assert_fail@plt+0x12640>
   248fc:	ldr	r8, [sp, #24]
   24900:	mov	r9, r0
   24904:	b	2444c <__assert_fail@plt+0x127a0>
   24908:	ldr	r8, [sp, #24]
   2490c:	b	24650 <__assert_fail@plt+0x129a4>
   24910:	mov	r4, #0
   24914:	mov	r0, #9
   24918:	b	24924 <__assert_fail@plt+0x12c78>
   2491c:	mov	r4, #0
   24920:	mov	r0, #10
   24924:	ldr	ip, [sp, #48]	; 0x30
   24928:	ldr	lr, [sp, #44]	; 0x2c
   2492c:	mov	r9, #0
   24930:	b	232d8 <__assert_fail@plt+0x1162c>
   24934:	mov	r0, #996	; 0x3e4
   24938:	bl	1b5b8 <__assert_fail@plt+0x990c>
   2493c:	cmp	r0, #0
   24940:	beq	24964 <__assert_fail@plt+0x12cb8>
   24944:	ldr	r1, [sl, #56]	; 0x38
   24948:	str	r1, [r0]
   2494c:	mov	r1, #0
   24950:	str	r1, [sl, #64]	; 0x40
   24954:	str	r0, [sl, #56]	; 0x38
   24958:	b	24400 <__assert_fail@plt+0x12754>
   2495c:	ldr	r5, [sp, #28]
   24960:	ldr	r7, [sp, #60]	; 0x3c
   24964:	ldr	r4, [sp, #20]
   24968:	mov	r0, #12
   2496c:	str	r0, [r4]
   24970:	b	24464 <__assert_fail@plt+0x127b8>
   24974:	mov	r0, r6
   24978:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2497c:	mov	r0, r9
   24980:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24984:	ldr	r8, [sp, #24]
   24988:	mov	r9, #12
   2498c:	b	2444c <__assert_fail@plt+0x127a0>
   24990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24994:	add	fp, sp, #28
   24998:	sub	sp, sp, #12
   2499c:	mov	r9, r1
   249a0:	mov	r6, r0
   249a4:	mov	r4, #0
   249a8:	mov	r0, #32
   249ac:	mov	r1, #1
   249b0:	mov	sl, r3
   249b4:	mov	r5, r2
   249b8:	str	r4, [sp, #8]
   249bc:	bl	1b258 <__assert_fail@plt+0x95ac>
   249c0:	ldr	r1, [fp, #12]
   249c4:	cmp	r0, #0
   249c8:	beq	24d18 <__assert_fail@plt+0x1306c>
   249cc:	mov	r7, r0
   249d0:	mov	r0, #40	; 0x28
   249d4:	mov	r1, #1
   249d8:	bl	1b258 <__assert_fail@plt+0x95ac>
   249dc:	cmp	r0, #0
   249e0:	beq	24c38 <__assert_fail@plt+0x12f8c>
   249e4:	mov	r8, r0
   249e8:	ldrb	r0, [r0, #16]
   249ec:	ldr	r1, [fp, #8]
   249f0:	mov	r4, #0
   249f4:	add	r3, sp, #8
   249f8:	str	r5, [sp]
   249fc:	mov	r2, r8
   24a00:	str	r4, [sp, #4]
   24a04:	and	r0, r0, #254	; 0xfe
   24a08:	orr	r0, r0, r1
   24a0c:	mov	r1, r7
   24a10:	strb	r0, [r8, #16]
   24a14:	mov	r0, r9
   24a18:	bl	25190 <__assert_fail@plt+0x134e4>
   24a1c:	cmp	r0, #0
   24a20:	bne	24c54 <__assert_fail@plt+0x12fa8>
   24a24:	ldrb	r0, [sl]
   24a28:	cmp	r0, #0
   24a2c:	beq	24a58 <__assert_fail@plt+0x12dac>
   24a30:	add	r1, sl, #1
   24a34:	mov	r2, #1
   24a38:	ubfx	r3, r0, #5, #3
   24a3c:	and	r0, r0, #31
   24a40:	ldr	r5, [r7, r3, lsl #2]
   24a44:	orr	r0, r5, r2, lsl r0
   24a48:	str	r0, [r7, r3, lsl #2]
   24a4c:	ldrb	r0, [r1], #1
   24a50:	cmp	r0, #0
   24a54:	bne	24a38 <__assert_fail@plt+0x12d8c>
   24a58:	ldr	r0, [fp, #8]
   24a5c:	cmp	r0, #0
   24a60:	beq	24a80 <__assert_fail@plt+0x12dd4>
   24a64:	vld1.32	{d16-d17}, [r7]
   24a68:	mov	r0, r7
   24a6c:	vmvn	q8, q8
   24a70:	vst1.32	{d16-d17}, [r0]!
   24a74:	vld1.32	{d16-d17}, [r0]
   24a78:	vmvn	q8, q8
   24a7c:	vst1.32	{d16-d17}, [r0]
   24a80:	ldr	r0, [r6, #92]	; 0x5c
   24a84:	cmp	r0, #2
   24a88:	blt	24b04 <__assert_fail@plt+0x12e58>
   24a8c:	ldr	r5, [r6, #60]	; 0x3c
   24a90:	ldm	r7, {r0, r1, r2, ip}
   24a94:	ldr	r3, [r5]
   24a98:	and	r0, r0, r3
   24a9c:	str	r0, [r7]
   24aa0:	ldr	r0, [r5, #4]
   24aa4:	and	r0, r1, r0
   24aa8:	str	r0, [r7, #4]
   24aac:	ldr	r0, [r5, #8]
   24ab0:	and	r0, r2, r0
   24ab4:	str	r0, [r7, #8]
   24ab8:	ldr	r0, [r5, #12]
   24abc:	and	r0, ip, r0
   24ac0:	str	r0, [r7, #12]
   24ac4:	ldr	r0, [r7, #16]
   24ac8:	ldr	r1, [r5, #16]
   24acc:	and	r0, r0, r1
   24ad0:	str	r0, [r7, #16]
   24ad4:	ldr	r0, [r5, #20]
   24ad8:	ldr	r1, [r7, #20]
   24adc:	and	r0, r1, r0
   24ae0:	str	r0, [r7, #20]
   24ae4:	ldr	r0, [r5, #24]
   24ae8:	ldr	r1, [r7, #24]
   24aec:	and	r0, r1, r0
   24af0:	str	r0, [r7, #24]
   24af4:	ldr	r0, [r5, #28]
   24af8:	ldr	r1, [r7, #28]
   24afc:	and	r0, r1, r0
   24b00:	str	r0, [r7, #28]
   24b04:	ldr	r1, [r6, #64]	; 0x40
   24b08:	cmp	r1, #31
   24b0c:	beq	24c94 <__assert_fail@plt+0x12fe8>
   24b10:	ldr	r0, [r6, #56]	; 0x38
   24b14:	add	r0, r0, r1, lsl #5
   24b18:	add	r2, r1, #1
   24b1c:	vmov.i32	q8, #0	; 0x00000000
   24b20:	mov	r1, #3
   24b24:	str	r2, [r6, #64]	; 0x40
   24b28:	mov	r2, #0
   24b2c:	add	r5, r0, #4
   24b30:	str	r2, [r0, #20]
   24b34:	str	r7, [r0, #24]
   24b38:	str	r1, [r0, #28]
   24b3c:	mov	r0, #28
   24b40:	mov	r1, r5
   24b44:	vst1.32	{d16-d17}, [r1], r0
   24b48:	mvn	r0, #0
   24b4c:	str	r0, [r1]
   24b50:	ldr	r0, [r6, #92]	; 0x5c
   24b54:	cmp	r0, #2
   24b58:	blt	24c00 <__assert_fail@plt+0x12f54>
   24b5c:	ldrb	r0, [r6, #88]	; 0x58
   24b60:	orr	r0, r0, #2
   24b64:	strb	r0, [r6, #88]	; 0x58
   24b68:	ldr	r1, [r6, #64]	; 0x40
   24b6c:	cmp	r1, #31
   24b70:	beq	24cbc <__assert_fail@plt+0x13010>
   24b74:	ldr	r0, [r6, #56]	; 0x38
   24b78:	add	r0, r0, r1, lsl #5
   24b7c:	vmov.i32	q8, #0	; 0x00000000
   24b80:	add	r2, r1, #1
   24b84:	mov	r1, #6
   24b88:	mov	r4, #0
   24b8c:	str	r2, [r6, #64]	; 0x40
   24b90:	add	r7, r0, #4
   24b94:	str	r4, [r0, #20]
   24b98:	str	r8, [r0, #24]
   24b9c:	str	r1, [r0, #28]
   24ba0:	mov	r0, #28
   24ba4:	mov	r1, r7
   24ba8:	vst1.32	{d16-d17}, [r1], r0
   24bac:	mvn	r0, #0
   24bb0:	str	r0, [r1]
   24bb4:	ldr	r1, [r6, #64]	; 0x40
   24bb8:	cmp	r1, #31
   24bbc:	beq	24d24 <__assert_fail@plt+0x13078>
   24bc0:	ldr	r0, [r6, #56]	; 0x38
   24bc4:	add	r4, r0, r1, lsl #5
   24bc8:	add	r2, r1, #1
   24bcc:	mov	r0, #0
   24bd0:	mov	r1, #10
   24bd4:	str	r2, [r6, #64]	; 0x40
   24bd8:	mvn	r2, #0
   24bdc:	str	r0, [r4, #4]!
   24be0:	add	r3, r4, #20
   24be4:	stmib	r4, {r5, r7}
   24be8:	str	r0, [r4, #12]
   24bec:	str	r0, [r4, #16]
   24bf0:	stm	r3, {r0, r1, r2}
   24bf4:	str	r4, [r5]
   24bf8:	str	r4, [r7]
   24bfc:	b	24c2c <__assert_fail@plt+0x12f80>
   24c00:	ldr	r0, [r8]
   24c04:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24c08:	ldr	r0, [r8, #4]
   24c0c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24c10:	ldr	r0, [r8, #8]
   24c14:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24c18:	ldr	r0, [r8, #12]
   24c1c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24c20:	mov	r0, r8
   24c24:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24c28:	mov	r4, r5
   24c2c:	mov	r0, r4
   24c30:	sub	sp, fp, #28
   24c34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24c38:	mov	r0, r7
   24c3c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24c40:	ldr	r1, [fp, #12]
   24c44:	mov	r0, #12
   24c48:	mov	r4, #0
   24c4c:	str	r0, [r1]
   24c50:	b	24c2c <__assert_fail@plt+0x12f80>
   24c54:	mov	r5, r0
   24c58:	mov	r0, r7
   24c5c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24c60:	ldr	r0, [r8]
   24c64:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24c68:	ldr	r0, [r8, #4]
   24c6c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24c70:	ldr	r0, [r8, #8]
   24c74:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24c78:	ldr	r0, [r8, #12]
   24c7c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24c80:	mov	r0, r8
   24c84:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24c88:	ldr	r0, [fp, #12]
   24c8c:	str	r5, [r0]
   24c90:	b	24c2c <__assert_fail@plt+0x12f80>
   24c94:	mov	r0, #996	; 0x3e4
   24c98:	bl	1b5b8 <__assert_fail@plt+0x990c>
   24c9c:	cmp	r0, #0
   24ca0:	beq	24ce4 <__assert_fail@plt+0x13038>
   24ca4:	ldr	r1, [r6, #56]	; 0x38
   24ca8:	str	r1, [r0]
   24cac:	mov	r1, #0
   24cb0:	str	r1, [r6, #64]	; 0x40
   24cb4:	str	r0, [r6, #56]	; 0x38
   24cb8:	b	24b14 <__assert_fail@plt+0x12e68>
   24cbc:	mov	r0, #996	; 0x3e4
   24cc0:	bl	1b5b8 <__assert_fail@plt+0x990c>
   24cc4:	cmp	r0, #0
   24cc8:	beq	24ce4 <__assert_fail@plt+0x13038>
   24ccc:	ldr	r1, [r6, #56]	; 0x38
   24cd0:	str	r1, [r0]
   24cd4:	mov	r1, #0
   24cd8:	str	r1, [r6, #64]	; 0x40
   24cdc:	str	r0, [r6, #56]	; 0x38
   24ce0:	b	24b78 <__assert_fail@plt+0x12ecc>
   24ce4:	mov	r0, r7
   24ce8:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24cec:	ldr	r0, [r8]
   24cf0:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24cf4:	ldr	r0, [r8, #4]
   24cf8:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24cfc:	ldr	r0, [r8, #8]
   24d00:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24d04:	ldr	r0, [r8, #12]
   24d08:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24d0c:	mov	r0, r8
   24d10:	bl	1b4e8 <__assert_fail@plt+0x983c>
   24d14:	ldr	r1, [fp, #12]
   24d18:	mov	r0, #12
   24d1c:	str	r0, [r1]
   24d20:	b	24c2c <__assert_fail@plt+0x12f80>
   24d24:	mov	r0, #996	; 0x3e4
   24d28:	bl	1b5b8 <__assert_fail@plt+0x990c>
   24d2c:	cmp	r0, #0
   24d30:	beq	24c2c <__assert_fail@plt+0x12f80>
   24d34:	ldr	r1, [r6, #56]	; 0x38
   24d38:	str	r1, [r0]
   24d3c:	mov	r1, #0
   24d40:	str	r1, [r6, #64]	; 0x40
   24d44:	str	r0, [r6, #56]	; 0x38
   24d48:	b	24bc4 <__assert_fail@plt+0x12f18>
   24d4c:	push	{fp, lr}
   24d50:	mov	fp, sp
   24d54:	ldr	ip, [r1, #40]	; 0x28
   24d58:	ldr	r3, [r1, #56]	; 0x38
   24d5c:	cmp	r3, ip
   24d60:	ble	24de0 <__assert_fail@plt+0x13134>
   24d64:	ldr	r3, [r1, #4]
   24d68:	ldrb	lr, [r3, ip]
   24d6c:	strb	lr, [r0]
   24d70:	ldr	r3, [r1, #80]	; 0x50
   24d74:	cmp	r3, #2
   24d78:	blt	24d9c <__assert_fail@plt+0x130f0>
   24d7c:	ldr	r3, [r1, #28]
   24d80:	ldr	ip, [r1, #40]	; 0x28
   24d84:	cmp	ip, r3
   24d88:	beq	24d9c <__assert_fail@plt+0x130f0>
   24d8c:	ldr	r3, [r1, #8]
   24d90:	ldr	r3, [r3, ip, lsl #2]
   24d94:	cmn	r3, #1
   24d98:	beq	24e90 <__assert_fail@plt+0x131e4>
   24d9c:	tst	r2, #1
   24da0:	beq	24df4 <__assert_fail@plt+0x13148>
   24da4:	cmp	lr, #92	; 0x5c
   24da8:	bne	24df4 <__assert_fail@plt+0x13148>
   24dac:	ldr	r2, [r1, #40]	; 0x28
   24db0:	ldr	r3, [r1, #48]	; 0x30
   24db4:	add	r2, r2, #1
   24db8:	cmp	r2, r3
   24dbc:	bge	24e90 <__assert_fail@plt+0x131e4>
   24dc0:	str	r2, [r1, #40]	; 0x28
   24dc4:	ldr	r1, [r1, #4]
   24dc8:	ldrb	r2, [r1, r2]
   24dcc:	mov	r1, #1
   24dd0:	strb	r1, [r0, #4]
   24dd4:	strb	r2, [r0]
   24dd8:	mov	r0, r1
   24ddc:	pop	{fp, pc}
   24de0:	mov	r1, #2
   24de4:	strb	r1, [r0, #4]
   24de8:	mov	r1, #0
   24dec:	mov	r0, r1
   24df0:	pop	{fp, pc}
   24df4:	cmp	lr, #92	; 0x5c
   24df8:	bgt	24e4c <__assert_fail@plt+0x131a0>
   24dfc:	cmp	lr, #45	; 0x2d
   24e00:	beq	24e64 <__assert_fail@plt+0x131b8>
   24e04:	cmp	lr, #91	; 0x5b
   24e08:	bne	24e90 <__assert_fail@plt+0x131e4>
   24e0c:	ldr	r3, [r1, #40]	; 0x28
   24e10:	ldr	ip, [r1, #48]	; 0x30
   24e14:	add	r3, r3, #1
   24e18:	cmp	r3, ip
   24e1c:	bge	24e80 <__assert_fail@plt+0x131d4>
   24e20:	ldr	r1, [r1, #4]
   24e24:	ldrb	r1, [r1, r3]
   24e28:	cmp	r1, #61	; 0x3d
   24e2c:	strb	r1, [r0]
   24e30:	beq	24ea0 <__assert_fail@plt+0x131f4>
   24e34:	cmp	r1, #58	; 0x3a
   24e38:	beq	24ea8 <__assert_fail@plt+0x131fc>
   24e3c:	cmp	r1, #46	; 0x2e
   24e40:	bne	24e88 <__assert_fail@plt+0x131dc>
   24e44:	mov	r1, #26
   24e48:	b	24eb4 <__assert_fail@plt+0x13208>
   24e4c:	cmp	lr, #93	; 0x5d
   24e50:	beq	24e6c <__assert_fail@plt+0x131c0>
   24e54:	cmp	lr, #94	; 0x5e
   24e58:	bne	24e90 <__assert_fail@plt+0x131e4>
   24e5c:	mov	r1, #25
   24e60:	b	24e70 <__assert_fail@plt+0x131c4>
   24e64:	mov	r1, #22
   24e68:	b	24e70 <__assert_fail@plt+0x131c4>
   24e6c:	mov	r1, #21
   24e70:	strb	r1, [r0, #4]
   24e74:	mov	r1, #1
   24e78:	mov	r0, r1
   24e7c:	pop	{fp, pc}
   24e80:	mov	r1, #0
   24e84:	strb	r1, [r0]
   24e88:	mov	r1, #91	; 0x5b
   24e8c:	strb	r1, [r0]
   24e90:	mov	r1, #1
   24e94:	strb	r1, [r0, #4]
   24e98:	mov	r0, r1
   24e9c:	pop	{fp, pc}
   24ea0:	mov	r1, #28
   24ea4:	b	24eb4 <__assert_fail@plt+0x13208>
   24ea8:	tst	r2, #4
   24eac:	beq	24e88 <__assert_fail@plt+0x131dc>
   24eb0:	mov	r1, #30
   24eb4:	strb	r1, [r0, #4]
   24eb8:	mov	r1, #2
   24ebc:	mov	r0, r1
   24ec0:	pop	{fp, pc}
   24ec4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   24ec8:	add	fp, sp, #24
   24ecc:	sub	sp, sp, #8
   24ed0:	mov	r5, r2
   24ed4:	ldr	r2, [r1, #80]	; 0x50
   24ed8:	mov	r9, r0
   24edc:	ldr	r0, [r1, #40]	; 0x28
   24ee0:	cmp	r2, #1
   24ee4:	beq	24f5c <__assert_fail@plt+0x132b0>
   24ee8:	ldr	r2, [r1, #28]
   24eec:	add	r6, r0, #1
   24ef0:	cmp	r6, r2
   24ef4:	bge	24f5c <__assert_fail@plt+0x132b0>
   24ef8:	ldr	lr, [r1, #8]
   24efc:	sub	r4, r0, r2
   24f00:	sub	ip, r2, r0
   24f04:	mvn	r2, #0
   24f08:	add	r6, lr, r0, lsl #2
   24f0c:	ldr	r7, [r6, -r2, lsl #2]
   24f10:	cmn	r7, #1
   24f14:	bne	24f28 <__assert_fail@plt+0x1327c>
   24f18:	sub	r2, r2, #1
   24f1c:	cmp	r4, r2
   24f20:	bne	24f0c <__assert_fail@plt+0x13260>
   24f24:	b	24f34 <__assert_fail@plt+0x13288>
   24f28:	rsb	ip, r2, #0
   24f2c:	cmp	ip, #2
   24f30:	bcc	24f5c <__assert_fail@plt+0x132b0>
   24f34:	mov	r2, #1
   24f38:	str	r2, [r9]
   24f3c:	ldr	r0, [lr, r0, lsl #2]
   24f40:	str	r0, [r9, #4]
   24f44:	ldr	r0, [r1, #40]	; 0x28
   24f48:	add	r0, r0, ip
   24f4c:	str	r0, [r1, #40]	; 0x28
   24f50:	mov	r0, #0
   24f54:	sub	sp, fp, #24
   24f58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24f5c:	add	r2, r0, r3
   24f60:	str	r2, [r1, #40]	; 0x28
   24f64:	ldrb	r6, [r5, #4]
   24f68:	sub	r0, r6, #22
   24f6c:	cmp	r0, #8
   24f70:	bhi	25178 <__assert_fail@plt+0x134cc>
   24f74:	add	r3, pc, #0
   24f78:	ldr	pc, [r3, r0, lsl #2]
   24f7c:	andeq	r5, r2, r0, asr r1
   24f80:	andeq	r5, r2, r8, ror r1
   24f84:	andeq	r5, r2, r8, ror r1
   24f88:	andeq	r5, r2, r8, ror r1
   24f8c:	andeq	r4, r2, r0, lsr #31
   24f90:	andeq	r5, r2, r8, ror r1
   24f94:	andeq	r4, r2, r0, lsr #31
   24f98:	andeq	r5, r2, r8, ror r1
   24f9c:	andeq	r4, r2, r0, lsr #31
   24fa0:	ldr	r3, [r1, #56]	; 0x38
   24fa4:	mov	r0, #7
   24fa8:	cmp	r3, r2
   24fac:	ble	25188 <__assert_fail@plt+0x134dc>
   24fb0:	ldrb	r3, [r5]
   24fb4:	mov	r2, #0
   24fb8:	uxtb	r7, r6
   24fbc:	cmp	r7, #30
   24fc0:	bne	24fd0 <__assert_fail@plt+0x13324>
   24fc4:	ldrb	r7, [r1, #75]	; 0x4b
   24fc8:	cmp	r7, #0
   24fcc:	bne	25028 <__assert_fail@plt+0x1337c>
   24fd0:	ldr	r4, [r1, #40]	; 0x28
   24fd4:	ldr	r7, [r1, #4]
   24fd8:	add	r6, r4, #1
   24fdc:	str	r6, [r1, #40]	; 0x28
   24fe0:	ldrb	r4, [r7, r4]
   24fe4:	ldr	r7, [r1, #56]	; 0x38
   24fe8:	cmp	r7, r6
   24fec:	ble	25188 <__assert_fail@plt+0x134dc>
   24ff0:	uxtb	r7, r4
   24ff4:	cmp	r7, r3
   24ff8:	bne	2500c <__assert_fail@plt+0x13360>
   24ffc:	ldr	r7, [r1, #4]
   25000:	ldrb	r7, [r7, r6]
   25004:	cmp	r7, #93	; 0x5d
   25008:	beq	25100 <__assert_fail@plt+0x13454>
   2500c:	ldr	r7, [r9, #4]
   25010:	strb	r4, [r7, r2]
   25014:	add	r2, r2, #1
   25018:	cmp	r2, #32
   2501c:	beq	25188 <__assert_fail@plt+0x134dc>
   25020:	ldrb	r6, [r5, #4]
   25024:	b	24fb8 <__assert_fail@plt+0x1330c>
   25028:	ldrb	r7, [r1, #76]	; 0x4c
   2502c:	cmp	r7, #0
   25030:	beq	250cc <__assert_fail@plt+0x13420>
   25034:	ldr	lr, [r1, #28]
   25038:	ldr	ip, [r1, #40]	; 0x28
   2503c:	cmp	lr, ip
   25040:	beq	25054 <__assert_fail@plt+0x133a8>
   25044:	ldr	r4, [r1, #8]
   25048:	ldr	r4, [r4, ip, lsl #2]
   2504c:	cmn	r4, #1
   25050:	beq	250ec <__assert_fail@plt+0x13440>
   25054:	ldr	r6, [r1, #12]
   25058:	ldr	r7, [r1, #24]
   2505c:	ldr	r4, [r1]
   25060:	ldr	r6, [r6, ip, lsl #2]
   25064:	add	r6, r7, r6
   25068:	add	r4, r4, r6
   2506c:	ldrsb	r4, [r4]
   25070:	cmn	r4, #1
   25074:	ble	250ec <__assert_fail@plt+0x13440>
   25078:	ldr	r7, [r1, #80]	; 0x50
   2507c:	mov	r6, #1
   25080:	cmp	r7, #1
   25084:	beq	250c0 <__assert_fail@plt+0x13414>
   25088:	add	r7, ip, #1
   2508c:	cmp	r7, lr
   25090:	bge	250c0 <__assert_fail@plt+0x13414>
   25094:	ldr	r6, [r1, #8]
   25098:	sub	lr, lr, ip
   2509c:	add	r8, r6, ip, lsl #2
   250a0:	mov	r6, #1
   250a4:	ldr	r7, [r8, r6, lsl #2]
   250a8:	cmn	r7, #1
   250ac:	bne	250c0 <__assert_fail@plt+0x13414>
   250b0:	add	r6, r6, #1
   250b4:	cmp	lr, r6
   250b8:	bne	250a4 <__assert_fail@plt+0x133f8>
   250bc:	mov	r6, lr
   250c0:	add	r6, r6, ip
   250c4:	str	r6, [r1, #40]	; 0x28
   250c8:	b	24fe4 <__assert_fail@plt+0x13338>
   250cc:	ldr	r7, [r1, #40]	; 0x28
   250d0:	ldr	r4, [r1, #24]
   250d4:	ldr	ip, [r1]
   250d8:	add	r6, r7, #1
   250dc:	add	r7, r7, r4
   250e0:	str	r6, [r1, #40]	; 0x28
   250e4:	ldrb	r4, [ip, r7]
   250e8:	b	24fe4 <__assert_fail@plt+0x13338>
   250ec:	add	r6, ip, #1
   250f0:	str	r6, [r1, #40]	; 0x28
   250f4:	ldr	r7, [r1, #4]
   250f8:	ldrb	r4, [r7, ip]
   250fc:	b	24fe4 <__assert_fail@plt+0x13338>
   25100:	add	r0, r6, #1
   25104:	str	r0, [r1, #40]	; 0x28
   25108:	mov	r0, #0
   2510c:	ldr	r1, [r9, #4]
   25110:	strb	r0, [r1, r2]
   25114:	ldrb	r1, [r5, #4]
   25118:	cmp	r1, #30
   2511c:	beq	25138 <__assert_fail@plt+0x1348c>
   25120:	cmp	r1, #28
   25124:	beq	25140 <__assert_fail@plt+0x13494>
   25128:	cmp	r1, #26
   2512c:	bne	25188 <__assert_fail@plt+0x134dc>
   25130:	mov	r1, #3
   25134:	b	25144 <__assert_fail@plt+0x13498>
   25138:	mov	r1, #4
   2513c:	b	25144 <__assert_fail@plt+0x13498>
   25140:	mov	r1, #2
   25144:	str	r1, [r9]
   25148:	sub	sp, fp, #24
   2514c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25150:	ldr	r0, [fp, #12]
   25154:	cmp	r0, #0
   25158:	bne	25178 <__assert_fail@plt+0x134cc>
   2515c:	ldr	r2, [fp, #8]
   25160:	mov	r0, sp
   25164:	bl	24d4c <__assert_fail@plt+0x130a0>
   25168:	ldrb	r1, [sp, #4]
   2516c:	mov	r0, #11
   25170:	cmp	r1, #21
   25174:	bne	25188 <__assert_fail@plt+0x134dc>
   25178:	mov	r0, #0
   2517c:	str	r0, [r9]
   25180:	ldrb	r1, [r5]
   25184:	strb	r1, [r9, #4]
   25188:	sub	sp, fp, #24
   2518c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25190:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   25194:	add	fp, sp, #24
   25198:	mov	r8, r0
   2519c:	ldrb	r0, [fp, #14]
   251a0:	ldr	r6, [fp, #8]
   251a4:	mov	r5, r3
   251a8:	mov	r7, r2
   251ac:	mov	r4, r1
   251b0:	tst	r0, #64	; 0x40
   251b4:	beq	251f0 <__assert_fail@plt+0x13544>
   251b8:	movw	r1, #5612	; 0x15ec
   251bc:	mov	r0, r6
   251c0:	movt	r1, #3
   251c4:	bl	1185c <strcmp@plt>
   251c8:	cmp	r0, #0
   251cc:	beq	251e8 <__assert_fail@plt+0x1353c>
   251d0:	movw	r1, #5618	; 0x15f2
   251d4:	mov	r0, r6
   251d8:	movt	r1, #3
   251dc:	bl	1185c <strcmp@plt>
   251e0:	cmp	r0, #0
   251e4:	bne	251f0 <__assert_fail@plt+0x13544>
   251e8:	movw	r6, #5624	; 0x15f8
   251ec:	movt	r6, #3
   251f0:	ldr	r0, [r5]
   251f4:	ldr	r1, [r7, #36]	; 0x24
   251f8:	cmp	r0, r1
   251fc:	beq	25724 <__assert_fail@plt+0x13a78>
   25200:	mov	r0, r6
   25204:	bl	1182c <wctype@plt>
   25208:	ldr	r2, [r7, #36]	; 0x24
   2520c:	ldr	r1, [r7, #12]
   25210:	add	r3, r2, #1
   25214:	str	r3, [r7, #36]	; 0x24
   25218:	str	r0, [r1, r2, lsl #2]
   2521c:	movw	r1, #5598	; 0x15de
   25220:	mov	r0, r6
   25224:	movt	r1, #3
   25228:	bl	1185c <strcmp@plt>
   2522c:	cmp	r0, #0
   25230:	beq	25360 <__assert_fail@plt+0x136b4>
   25234:	movw	r1, #5630	; 0x15fe
   25238:	mov	r0, r6
   2523c:	movt	r1, #3
   25240:	bl	1185c <strcmp@plt>
   25244:	cmp	r0, #0
   25248:	beq	253b0 <__assert_fail@plt+0x13704>
   2524c:	movw	r1, #5618	; 0x15f2
   25250:	mov	r0, r6
   25254:	movt	r1, #3
   25258:	bl	1185c <strcmp@plt>
   2525c:	cmp	r0, #0
   25260:	beq	25400 <__assert_fail@plt+0x13754>
   25264:	movw	r1, #5606	; 0x15e6
   25268:	mov	r0, r6
   2526c:	movt	r1, #3
   25270:	bl	1185c <strcmp@plt>
   25274:	cmp	r0, #0
   25278:	beq	25450 <__assert_fail@plt+0x137a4>
   2527c:	movw	r1, #5624	; 0x15f8
   25280:	mov	r0, r6
   25284:	movt	r1, #3
   25288:	bl	1185c <strcmp@plt>
   2528c:	cmp	r0, #0
   25290:	beq	254d8 <__assert_fail@plt+0x1382c>
   25294:	movw	r1, #5655	; 0x1617
   25298:	mov	r0, r6
   2529c:	movt	r1, #3
   252a0:	bl	1185c <strcmp@plt>
   252a4:	cmp	r0, #0
   252a8:	beq	25528 <__assert_fail@plt+0x1387c>
   252ac:	movw	r1, #65259	; 0xfeeb
   252b0:	mov	r0, r6
   252b4:	movt	r1, #2
   252b8:	bl	1185c <strcmp@plt>
   252bc:	cmp	r0, #0
   252c0:	beq	25580 <__assert_fail@plt+0x138d4>
   252c4:	movw	r1, #5612	; 0x15ec
   252c8:	mov	r0, r6
   252cc:	movt	r1, #3
   252d0:	bl	1185c <strcmp@plt>
   252d4:	cmp	r0, #0
   252d8:	beq	255d4 <__assert_fail@plt+0x13928>
   252dc:	movw	r1, #5636	; 0x1604
   252e0:	mov	r0, r6
   252e4:	movt	r1, #3
   252e8:	bl	1185c <strcmp@plt>
   252ec:	cmp	r0, #0
   252f0:	beq	25628 <__assert_fail@plt+0x1397c>
   252f4:	movw	r1, #5642	; 0x160a
   252f8:	mov	r0, r6
   252fc:	movt	r1, #3
   25300:	bl	1185c <strcmp@plt>
   25304:	cmp	r0, #0
   25308:	beq	2567c <__assert_fail@plt+0x139d0>
   2530c:	movw	r1, #5648	; 0x1610
   25310:	mov	r0, r6
   25314:	movt	r1, #3
   25318:	bl	1185c <strcmp@plt>
   2531c:	cmp	r0, #0
   25320:	beq	256d0 <__assert_fail@plt+0x13a24>
   25324:	movw	r1, #5654	; 0x1616
   25328:	mov	r0, r6
   2532c:	movt	r1, #3
   25330:	bl	1185c <strcmp@plt>
   25334:	mov	r1, r0
   25338:	mov	r0, #4
   2533c:	cmp	r1, #0
   25340:	bne	25a64 <__assert_fail@plt+0x13db8>
   25344:	bl	11a84 <__ctype_b_loc@plt>
   25348:	ldr	r1, [r0]
   2534c:	mov	r2, #0
   25350:	mov	r3, #1
   25354:	cmp	r8, #0
   25358:	beq	254b4 <__assert_fail@plt+0x13808>
   2535c:	b	259ac <__assert_fail@plt+0x13d00>
   25360:	bl	11a84 <__ctype_b_loc@plt>
   25364:	ldr	r1, [r0]
   25368:	cmp	r8, #0
   2536c:	bne	257c4 <__assert_fail@plt+0x13b18>
   25370:	mov	r0, #0
   25374:	mov	r2, #1
   25378:	b	2538c <__assert_fail@plt+0x136e0>
   2537c:	add	r0, r0, #1
   25380:	add	r1, r1, #2
   25384:	cmp	r0, #256	; 0x100
   25388:	beq	25578 <__assert_fail@plt+0x138cc>
   2538c:	ldrb	r3, [r1]
   25390:	tst	r3, #8
   25394:	beq	2537c <__assert_fail@plt+0x136d0>
   25398:	ubfx	r3, r0, #5, #3
   2539c:	and	r6, r0, #31
   253a0:	ldr	r7, [r4, r3, lsl #2]
   253a4:	orr	r7, r7, r2, lsl r6
   253a8:	str	r7, [r4, r3, lsl #2]
   253ac:	b	2537c <__assert_fail@plt+0x136d0>
   253b0:	bl	11a84 <__ctype_b_loc@plt>
   253b4:	ldr	r1, [r0]
   253b8:	cmp	r8, #0
   253bc:	bne	25848 <__assert_fail@plt+0x13b9c>
   253c0:	mov	r0, #0
   253c4:	mov	r2, #1
   253c8:	b	253dc <__assert_fail@plt+0x13730>
   253cc:	add	r0, r0, #1
   253d0:	add	r1, r1, #2
   253d4:	cmp	r0, #256	; 0x100
   253d8:	beq	25578 <__assert_fail@plt+0x138cc>
   253dc:	ldrb	r3, [r1]
   253e0:	tst	r3, #2
   253e4:	beq	253cc <__assert_fail@plt+0x13720>
   253e8:	ubfx	r3, r0, #5, #3
   253ec:	and	r6, r0, #31
   253f0:	ldr	r7, [r4, r3, lsl #2]
   253f4:	orr	r7, r7, r2, lsl r6
   253f8:	str	r7, [r4, r3, lsl #2]
   253fc:	b	253cc <__assert_fail@plt+0x13720>
   25400:	bl	11a84 <__ctype_b_loc@plt>
   25404:	ldr	r1, [r0]
   25408:	cmp	r8, #0
   2540c:	bne	258cc <__assert_fail@plt+0x13c20>
   25410:	mov	r0, #0
   25414:	mov	r2, #1
   25418:	b	2542c <__assert_fail@plt+0x13780>
   2541c:	add	r0, r0, #1
   25420:	add	r1, r1, #2
   25424:	cmp	r0, #256	; 0x100
   25428:	beq	25578 <__assert_fail@plt+0x138cc>
   2542c:	ldrb	r3, [r1, #1]
   25430:	tst	r3, #2
   25434:	beq	2541c <__assert_fail@plt+0x13770>
   25438:	ubfx	r3, r0, #5, #3
   2543c:	and	r6, r0, #31
   25440:	ldr	r7, [r4, r3, lsl #2]
   25444:	orr	r7, r7, r2, lsl r6
   25448:	str	r7, [r4, r3, lsl #2]
   2544c:	b	2541c <__assert_fail@plt+0x13770>
   25450:	bl	11a84 <__ctype_b_loc@plt>
   25454:	ldr	r1, [r0]
   25458:	cmp	r8, #0
   2545c:	bne	25950 <__assert_fail@plt+0x13ca4>
   25460:	mov	r0, #0
   25464:	mov	r2, #1
   25468:	b	2547c <__assert_fail@plt+0x137d0>
   2546c:	add	r0, r0, #1
   25470:	add	r1, r1, #2
   25474:	cmp	r0, #256	; 0x100
   25478:	beq	25578 <__assert_fail@plt+0x138cc>
   2547c:	ldrb	r3, [r1, #1]
   25480:	tst	r3, #32
   25484:	beq	2546c <__assert_fail@plt+0x137c0>
   25488:	ubfx	r3, r0, #5, #3
   2548c:	and	r6, r0, #31
   25490:	ldr	r7, [r4, r3, lsl #2]
   25494:	orr	r7, r7, r2, lsl r6
   25498:	str	r7, [r4, r3, lsl #2]
   2549c:	b	2546c <__assert_fail@plt+0x137c0>
   254a0:	add	r2, r2, #1
   254a4:	add	r1, r1, #2
   254a8:	mov	r0, #0
   254ac:	cmp	r2, #256	; 0x100
   254b0:	beq	25a64 <__assert_fail@plt+0x13db8>
   254b4:	ldrb	r0, [r1, #1]
   254b8:	tst	r0, #16
   254bc:	beq	254a0 <__assert_fail@plt+0x137f4>
   254c0:	ubfx	r0, r2, #5, #3
   254c4:	and	r6, r2, #31
   254c8:	ldr	r7, [r4, r0, lsl #2]
   254cc:	orr	r7, r7, r3, lsl r6
   254d0:	str	r7, [r4, r0, lsl #2]
   254d4:	b	254a0 <__assert_fail@plt+0x137f4>
   254d8:	bl	11a84 <__ctype_b_loc@plt>
   254dc:	ldr	r1, [r0]
   254e0:	cmp	r8, #0
   254e4:	bne	259d4 <__assert_fail@plt+0x13d28>
   254e8:	mov	r0, #0
   254ec:	mov	r2, #1
   254f0:	b	25504 <__assert_fail@plt+0x13858>
   254f4:	add	r0, r0, #1
   254f8:	add	r1, r1, #2
   254fc:	cmp	r0, #256	; 0x100
   25500:	beq	25578 <__assert_fail@plt+0x138cc>
   25504:	ldrb	r3, [r1, #1]
   25508:	tst	r3, #4
   2550c:	beq	254f4 <__assert_fail@plt+0x13848>
   25510:	ubfx	r3, r0, #5, #3
   25514:	and	r6, r0, #31
   25518:	ldr	r7, [r4, r3, lsl #2]
   2551c:	orr	r7, r7, r2, lsl r6
   25520:	str	r7, [r4, r3, lsl #2]
   25524:	b	254f4 <__assert_fail@plt+0x13848>
   25528:	bl	11a84 <__ctype_b_loc@plt>
   2552c:	ldr	r1, [r0]
   25530:	cmp	r8, #0
   25534:	bne	25a1c <__assert_fail@plt+0x13d70>
   25538:	mov	r0, #0
   2553c:	mov	r2, #1
   25540:	b	25554 <__assert_fail@plt+0x138a8>
   25544:	add	r0, r0, #1
   25548:	add	r1, r1, #2
   2554c:	cmp	r0, #256	; 0x100
   25550:	beq	25578 <__assert_fail@plt+0x138cc>
   25554:	ldrb	r3, [r1, #1]
   25558:	tst	r3, #8
   2555c:	beq	25544 <__assert_fail@plt+0x13898>
   25560:	ubfx	r3, r0, #5, #3
   25564:	and	r6, r0, #31
   25568:	ldr	r7, [r4, r3, lsl #2]
   2556c:	orr	r7, r7, r2, lsl r6
   25570:	str	r7, [r4, r3, lsl #2]
   25574:	b	25544 <__assert_fail@plt+0x13898>
   25578:	mov	r0, #0
   2557c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25580:	bl	11a84 <__ctype_b_loc@plt>
   25584:	ldr	r1, [r0]
   25588:	mov	r2, #0
   2558c:	mov	r3, #1
   25590:	cmp	r8, #0
   25594:	beq	255b0 <__assert_fail@plt+0x13904>
   25598:	b	25760 <__assert_fail@plt+0x13ab4>
   2559c:	add	r2, r2, #1
   255a0:	add	r1, r1, #2
   255a4:	mov	r0, #0
   255a8:	cmp	r2, #256	; 0x100
   255ac:	beq	25a64 <__assert_fail@plt+0x13db8>
   255b0:	ldrb	r0, [r1, #1]
   255b4:	tst	r0, #64	; 0x40
   255b8:	beq	2559c <__assert_fail@plt+0x138f0>
   255bc:	ubfx	r0, r2, #5, #3
   255c0:	and	r6, r2, #31
   255c4:	ldr	r7, [r4, r0, lsl #2]
   255c8:	orr	r7, r7, r3, lsl r6
   255cc:	str	r7, [r4, r0, lsl #2]
   255d0:	b	2559c <__assert_fail@plt+0x138f0>
   255d4:	bl	11a84 <__ctype_b_loc@plt>
   255d8:	ldr	r1, [r0]
   255dc:	mov	r2, #0
   255e0:	mov	r3, #1
   255e4:	cmp	r8, #0
   255e8:	beq	25604 <__assert_fail@plt+0x13958>
   255ec:	b	2579c <__assert_fail@plt+0x13af0>
   255f0:	add	r2, r2, #1
   255f4:	add	r1, r1, #2
   255f8:	mov	r0, #0
   255fc:	cmp	r2, #256	; 0x100
   25600:	beq	25a64 <__assert_fail@plt+0x13db8>
   25604:	ldrb	r0, [r1, #1]
   25608:	tst	r0, #1
   2560c:	beq	255f0 <__assert_fail@plt+0x13944>
   25610:	ubfx	r0, r2, #5, #3
   25614:	and	r6, r2, #31
   25618:	ldr	r7, [r4, r0, lsl #2]
   2561c:	orr	r7, r7, r3, lsl r6
   25620:	str	r7, [r4, r0, lsl #2]
   25624:	b	255f0 <__assert_fail@plt+0x13944>
   25628:	bl	11a84 <__ctype_b_loc@plt>
   2562c:	ldr	r1, [r0]
   25630:	mov	r2, #0
   25634:	mov	r3, #1
   25638:	cmp	r8, #0
   2563c:	beq	25658 <__assert_fail@plt+0x139ac>
   25640:	b	25820 <__assert_fail@plt+0x13b74>
   25644:	add	r2, r2, #1
   25648:	add	r1, r1, #2
   2564c:	mov	r0, #0
   25650:	cmp	r2, #256	; 0x100
   25654:	beq	25a64 <__assert_fail@plt+0x13db8>
   25658:	ldrb	r0, [r1]
   2565c:	tst	r0, #1
   25660:	beq	25644 <__assert_fail@plt+0x13998>
   25664:	ubfx	r0, r2, #5, #3
   25668:	and	r6, r2, #31
   2566c:	ldr	r7, [r4, r0, lsl #2]
   25670:	orr	r7, r7, r3, lsl r6
   25674:	str	r7, [r4, r0, lsl #2]
   25678:	b	25644 <__assert_fail@plt+0x13998>
   2567c:	bl	11a84 <__ctype_b_loc@plt>
   25680:	ldr	r1, [r0]
   25684:	mov	r2, #0
   25688:	mov	r3, #1
   2568c:	cmp	r8, #0
   25690:	beq	256ac <__assert_fail@plt+0x13a00>
   25694:	b	258a4 <__assert_fail@plt+0x13bf8>
   25698:	add	r2, r2, #1
   2569c:	add	r1, r1, #2
   256a0:	mov	r0, #0
   256a4:	cmp	r2, #256	; 0x100
   256a8:	beq	25a64 <__assert_fail@plt+0x13db8>
   256ac:	ldrsh	r0, [r1]
   256b0:	cmn	r0, #1
   256b4:	bgt	25698 <__assert_fail@plt+0x139ec>
   256b8:	ubfx	r0, r2, #5, #3
   256bc:	and	r6, r2, #31
   256c0:	ldr	r7, [r4, r0, lsl #2]
   256c4:	orr	r7, r7, r3, lsl r6
   256c8:	str	r7, [r4, r0, lsl #2]
   256cc:	b	25698 <__assert_fail@plt+0x139ec>
   256d0:	bl	11a84 <__ctype_b_loc@plt>
   256d4:	ldr	r1, [r0]
   256d8:	mov	r2, #0
   256dc:	mov	r3, #1
   256e0:	cmp	r8, #0
   256e4:	beq	25700 <__assert_fail@plt+0x13a54>
   256e8:	b	25928 <__assert_fail@plt+0x13c7c>
   256ec:	add	r2, r2, #1
   256f0:	add	r1, r1, #2
   256f4:	mov	r0, #0
   256f8:	cmp	r2, #256	; 0x100
   256fc:	beq	25a64 <__assert_fail@plt+0x13db8>
   25700:	ldrb	r0, [r1]
   25704:	tst	r0, #4
   25708:	beq	256ec <__assert_fail@plt+0x13a40>
   2570c:	ubfx	r0, r2, #5, #3
   25710:	and	r6, r2, #31
   25714:	ldr	r7, [r4, r0, lsl #2]
   25718:	orr	r7, r7, r3, lsl r6
   2571c:	str	r7, [r4, r0, lsl #2]
   25720:	b	256ec <__assert_fail@plt+0x13a40>
   25724:	mov	r1, #1
   25728:	orr	r9, r1, r0, lsl #1
   2572c:	ldr	r0, [r7, #12]
   25730:	lsl	r1, r9, #2
   25734:	bl	1b64c <__assert_fail@plt+0x99a0>
   25738:	cmp	r0, #0
   2573c:	beq	25a68 <__assert_fail@plt+0x13dbc>
   25740:	str	r0, [r7, #12]
   25744:	str	r9, [r5]
   25748:	b	25200 <__assert_fail@plt+0x13554>
   2574c:	add	r2, r2, #1
   25750:	add	r1, r1, #2
   25754:	mov	r0, #0
   25758:	cmp	r2, #256	; 0x100
   2575c:	beq	25a64 <__assert_fail@plt+0x13db8>
   25760:	ldrb	r0, [r1, #1]
   25764:	tst	r0, #64	; 0x40
   25768:	beq	2574c <__assert_fail@plt+0x13aa0>
   2576c:	ldrb	r0, [r8, r2]
   25770:	ubfx	r7, r0, #5, #3
   25774:	and	r0, r0, #31
   25778:	ldr	r6, [r4, r7, lsl #2]
   2577c:	orr	r0, r6, r3, lsl r0
   25780:	str	r0, [r4, r7, lsl #2]
   25784:	b	2574c <__assert_fail@plt+0x13aa0>
   25788:	add	r2, r2, #1
   2578c:	add	r1, r1, #2
   25790:	mov	r0, #0
   25794:	cmp	r2, #256	; 0x100
   25798:	beq	25a64 <__assert_fail@plt+0x13db8>
   2579c:	ldrb	r0, [r1, #1]
   257a0:	tst	r0, #1
   257a4:	beq	25788 <__assert_fail@plt+0x13adc>
   257a8:	ldrb	r0, [r8, r2]
   257ac:	ubfx	r7, r0, #5, #3
   257b0:	and	r0, r0, #31
   257b4:	ldr	r6, [r4, r7, lsl #2]
   257b8:	orr	r0, r6, r3, lsl r0
   257bc:	str	r0, [r4, r7, lsl #2]
   257c0:	b	25788 <__assert_fail@plt+0x13adc>
   257c4:	mov	r2, #0
   257c8:	mov	r3, #1
   257cc:	b	257e4 <__assert_fail@plt+0x13b38>
   257d0:	add	r2, r2, #1
   257d4:	add	r1, r1, #2
   257d8:	mov	r0, #0
   257dc:	cmp	r2, #256	; 0x100
   257e0:	beq	25a64 <__assert_fail@plt+0x13db8>
   257e4:	ldrb	r0, [r1]
   257e8:	tst	r0, #8
   257ec:	beq	257d0 <__assert_fail@plt+0x13b24>
   257f0:	ldrb	r0, [r8, r2]
   257f4:	ubfx	r7, r0, #5, #3
   257f8:	and	r0, r0, #31
   257fc:	ldr	r6, [r4, r7, lsl #2]
   25800:	orr	r0, r6, r3, lsl r0
   25804:	str	r0, [r4, r7, lsl #2]
   25808:	b	257d0 <__assert_fail@plt+0x13b24>
   2580c:	add	r2, r2, #1
   25810:	add	r1, r1, #2
   25814:	mov	r0, #0
   25818:	cmp	r2, #256	; 0x100
   2581c:	beq	25a64 <__assert_fail@plt+0x13db8>
   25820:	ldrb	r0, [r1]
   25824:	tst	r0, #1
   25828:	beq	2580c <__assert_fail@plt+0x13b60>
   2582c:	ldrb	r0, [r8, r2]
   25830:	ubfx	r7, r0, #5, #3
   25834:	and	r0, r0, #31
   25838:	ldr	r6, [r4, r7, lsl #2]
   2583c:	orr	r0, r6, r3, lsl r0
   25840:	str	r0, [r4, r7, lsl #2]
   25844:	b	2580c <__assert_fail@plt+0x13b60>
   25848:	mov	r2, #0
   2584c:	mov	r3, #1
   25850:	b	25868 <__assert_fail@plt+0x13bbc>
   25854:	add	r2, r2, #1
   25858:	add	r1, r1, #2
   2585c:	mov	r0, #0
   25860:	cmp	r2, #256	; 0x100
   25864:	beq	25a64 <__assert_fail@plt+0x13db8>
   25868:	ldrb	r0, [r1]
   2586c:	tst	r0, #2
   25870:	beq	25854 <__assert_fail@plt+0x13ba8>
   25874:	ldrb	r0, [r8, r2]
   25878:	ubfx	r7, r0, #5, #3
   2587c:	and	r0, r0, #31
   25880:	ldr	r6, [r4, r7, lsl #2]
   25884:	orr	r0, r6, r3, lsl r0
   25888:	str	r0, [r4, r7, lsl #2]
   2588c:	b	25854 <__assert_fail@plt+0x13ba8>
   25890:	add	r2, r2, #1
   25894:	add	r1, r1, #2
   25898:	mov	r0, #0
   2589c:	cmp	r2, #256	; 0x100
   258a0:	beq	25a64 <__assert_fail@plt+0x13db8>
   258a4:	ldrsh	r0, [r1]
   258a8:	cmn	r0, #1
   258ac:	bgt	25890 <__assert_fail@plt+0x13be4>
   258b0:	ldrb	r0, [r8, r2]
   258b4:	ubfx	r7, r0, #5, #3
   258b8:	and	r0, r0, #31
   258bc:	ldr	r6, [r4, r7, lsl #2]
   258c0:	orr	r0, r6, r3, lsl r0
   258c4:	str	r0, [r4, r7, lsl #2]
   258c8:	b	25890 <__assert_fail@plt+0x13be4>
   258cc:	mov	r2, #0
   258d0:	mov	r3, #1
   258d4:	b	258ec <__assert_fail@plt+0x13c40>
   258d8:	add	r2, r2, #1
   258dc:	add	r1, r1, #2
   258e0:	mov	r0, #0
   258e4:	cmp	r2, #256	; 0x100
   258e8:	beq	25a64 <__assert_fail@plt+0x13db8>
   258ec:	ldrb	r0, [r1, #1]
   258f0:	tst	r0, #2
   258f4:	beq	258d8 <__assert_fail@plt+0x13c2c>
   258f8:	ldrb	r0, [r8, r2]
   258fc:	ubfx	r7, r0, #5, #3
   25900:	and	r0, r0, #31
   25904:	ldr	r6, [r4, r7, lsl #2]
   25908:	orr	r0, r6, r3, lsl r0
   2590c:	str	r0, [r4, r7, lsl #2]
   25910:	b	258d8 <__assert_fail@plt+0x13c2c>
   25914:	add	r2, r2, #1
   25918:	add	r1, r1, #2
   2591c:	mov	r0, #0
   25920:	cmp	r2, #256	; 0x100
   25924:	beq	25a64 <__assert_fail@plt+0x13db8>
   25928:	ldrb	r0, [r1]
   2592c:	tst	r0, #4
   25930:	beq	25914 <__assert_fail@plt+0x13c68>
   25934:	ldrb	r0, [r8, r2]
   25938:	ubfx	r7, r0, #5, #3
   2593c:	and	r0, r0, #31
   25940:	ldr	r6, [r4, r7, lsl #2]
   25944:	orr	r0, r6, r3, lsl r0
   25948:	str	r0, [r4, r7, lsl #2]
   2594c:	b	25914 <__assert_fail@plt+0x13c68>
   25950:	mov	r2, #0
   25954:	mov	r3, #1
   25958:	b	25970 <__assert_fail@plt+0x13cc4>
   2595c:	add	r2, r2, #1
   25960:	add	r1, r1, #2
   25964:	mov	r0, #0
   25968:	cmp	r2, #256	; 0x100
   2596c:	beq	25a64 <__assert_fail@plt+0x13db8>
   25970:	ldrb	r0, [r1, #1]
   25974:	tst	r0, #32
   25978:	beq	2595c <__assert_fail@plt+0x13cb0>
   2597c:	ldrb	r0, [r8, r2]
   25980:	ubfx	r7, r0, #5, #3
   25984:	and	r0, r0, #31
   25988:	ldr	r6, [r4, r7, lsl #2]
   2598c:	orr	r0, r6, r3, lsl r0
   25990:	str	r0, [r4, r7, lsl #2]
   25994:	b	2595c <__assert_fail@plt+0x13cb0>
   25998:	add	r2, r2, #1
   2599c:	add	r1, r1, #2
   259a0:	mov	r0, #0
   259a4:	cmp	r2, #256	; 0x100
   259a8:	beq	25a64 <__assert_fail@plt+0x13db8>
   259ac:	ldrb	r0, [r1, #1]
   259b0:	tst	r0, #16
   259b4:	beq	25998 <__assert_fail@plt+0x13cec>
   259b8:	ldrb	r0, [r8, r2]
   259bc:	ubfx	r7, r0, #5, #3
   259c0:	and	r0, r0, #31
   259c4:	ldr	r6, [r4, r7, lsl #2]
   259c8:	orr	r0, r6, r3, lsl r0
   259cc:	str	r0, [r4, r7, lsl #2]
   259d0:	b	25998 <__assert_fail@plt+0x13cec>
   259d4:	mov	r2, #0
   259d8:	mov	r3, #1
   259dc:	b	259f4 <__assert_fail@plt+0x13d48>
   259e0:	add	r2, r2, #1
   259e4:	add	r1, r1, #2
   259e8:	mov	r0, #0
   259ec:	cmp	r2, #256	; 0x100
   259f0:	beq	25a64 <__assert_fail@plt+0x13db8>
   259f4:	ldrb	r0, [r1, #1]
   259f8:	tst	r0, #4
   259fc:	beq	259e0 <__assert_fail@plt+0x13d34>
   25a00:	ldrb	r0, [r8, r2]
   25a04:	ubfx	r7, r0, #5, #3
   25a08:	and	r0, r0, #31
   25a0c:	ldr	r6, [r4, r7, lsl #2]
   25a10:	orr	r0, r6, r3, lsl r0
   25a14:	str	r0, [r4, r7, lsl #2]
   25a18:	b	259e0 <__assert_fail@plt+0x13d34>
   25a1c:	mov	r2, #0
   25a20:	mov	r3, #1
   25a24:	b	25a3c <__assert_fail@plt+0x13d90>
   25a28:	add	r2, r2, #1
   25a2c:	add	r1, r1, #2
   25a30:	mov	r0, #0
   25a34:	cmp	r2, #256	; 0x100
   25a38:	beq	25a64 <__assert_fail@plt+0x13db8>
   25a3c:	ldrb	r0, [r1, #1]
   25a40:	tst	r0, #8
   25a44:	beq	25a28 <__assert_fail@plt+0x13d7c>
   25a48:	ldrb	r0, [r8, r2]
   25a4c:	ubfx	r7, r0, #5, #3
   25a50:	and	r0, r0, #31
   25a54:	ldr	r6, [r4, r7, lsl #2]
   25a58:	orr	r0, r6, r3, lsl r0
   25a5c:	str	r0, [r4, r7, lsl #2]
   25a60:	b	25a28 <__assert_fail@plt+0x13d7c>
   25a64:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25a68:	mov	r0, #12
   25a6c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25a70:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   25a74:	add	fp, sp, #24
   25a78:	ldr	r3, [r1, #24]
   25a7c:	mvn	r7, #1
   25a80:	ldr	r2, [r1, #28]
   25a84:	mov	r4, #0
   25a88:	uxtab	r3, r7, r3
   25a8c:	cmp	r3, #14
   25a90:	bhi	25bb4 <__assert_fail@plt+0x13f08>
   25a94:	add	r7, pc, #0
   25a98:	ldr	pc, [r7, r3, lsl #2]
   25a9c:	andeq	r5, r2, r8, ror #23
   25aa0:			; <UNDEFINED> instruction: 0x00025bb4
   25aa4:	andeq	r5, r2, ip, asr #23
   25aa8:			; <UNDEFINED> instruction: 0x00025bb4
   25aac:			; <UNDEFINED> instruction: 0x00025bb4
   25ab0:			; <UNDEFINED> instruction: 0x00025bb4
   25ab4:	ldrdeq	r5, [r2], -r8
   25ab8:	ldrdeq	r5, [r2], -r8
   25abc:	andeq	r5, r2, ip, lsr #22
   25ac0:	andeq	r5, r2, ip, lsr #22
   25ac4:	ldrdeq	r5, [r2], -r8
   25ac8:			; <UNDEFINED> instruction: 0x00025bb4
   25acc:			; <UNDEFINED> instruction: 0x00025bb4
   25ad0:			; <UNDEFINED> instruction: 0x00025bb4
   25ad4:	andeq	r5, r2, r8, ror #23
   25ad8:	ldr	r1, [r1, #16]
   25adc:	ldr	r5, [r1, #28]
   25ae0:	ldr	r6, [r0, #20]
   25ae4:	add	r0, r2, r2, lsl #1
   25ae8:	mov	r1, #1
   25aec:	str	r1, [r6, r0, lsl #2]!
   25af0:	mov	r0, #4
   25af4:	mov	r7, r6
   25af8:	str	r1, [r7, #4]!
   25afc:	bl	1b5b8 <__assert_fail@plt+0x990c>
   25b00:	cmp	r0, #0
   25b04:	str	r0, [r6, #8]
   25b08:	strne	r5, [r0]
   25b0c:	movne	r0, r4
   25b10:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   25b14:	mov	r0, #0
   25b18:	str	r0, [r7]
   25b1c:	str	r0, [r6]
   25b20:	mov	r4, #12
   25b24:	mov	r0, r4
   25b28:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25b2c:	ldrb	r3, [r0, #88]	; 0x58
   25b30:	add	r6, r1, #16
   25b34:	add	r5, r2, r2, lsl #1
   25b38:	orr	r3, r3, #1
   25b3c:	strb	r3, [r0, #88]	; 0x58
   25b40:	mov	r3, r6
   25b44:	ldr	r7, [r1, #4]
   25b48:	ldr	r1, [r1, #8]
   25b4c:	cmp	r1, #0
   25b50:	addne	r3, r1, #12
   25b54:	cmp	r7, #0
   25b58:	ldr	r1, [r3]
   25b5c:	addne	r6, r7, #12
   25b60:	ldr	r8, [r1, #28]
   25b64:	ldr	r1, [r6]
   25b68:	ldr	r6, [r0, #20]
   25b6c:	mov	r0, #2
   25b70:	ldr	r9, [r1, #28]
   25b74:	mov	r7, r6
   25b78:	str	r0, [r7, r5, lsl #2]!
   25b7c:	mov	r0, #8
   25b80:	bl	1b5b8 <__assert_fail@plt+0x990c>
   25b84:	cmp	r0, #0
   25b88:	str	r0, [r7, #8]
   25b8c:	beq	25b20 <__assert_fail@plt+0x13e74>
   25b90:	add	r1, r6, r5, lsl #2
   25b94:	cmp	r9, r8
   25b98:	add	r1, r1, #4
   25b9c:	bne	25bf0 <__assert_fail@plt+0x13f44>
   25ba0:	mov	r2, #1
   25ba4:	str	r2, [r1]
   25ba8:	str	r9, [r0]
   25bac:	mov	r0, r4
   25bb0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25bb4:	ldr	r1, [r1, #16]
   25bb8:	ldr	r0, [r0, #12]
   25bbc:	ldr	r1, [r1, #28]
   25bc0:	str	r1, [r0, r2, lsl #2]
   25bc4:	mov	r0, r4
   25bc8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25bcc:	ldr	r7, [r1, #16]
   25bd0:	ldr	r3, [r0, #12]
   25bd4:	ldr	r5, [r7, #28]
   25bd8:	str	r5, [r3, r2, lsl #2]
   25bdc:	ldrb	r1, [r1, #24]
   25be0:	cmp	r1, #4
   25be4:	beq	25ae0 <__assert_fail@plt+0x13e34>
   25be8:	mov	r0, r4
   25bec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25bf0:	mov	r2, #2
   25bf4:	str	r2, [r1]
   25bf8:	stmcs	r0, {r8, r9}
   25bfc:	strcc	r9, [r0]
   25c00:	strcc	r8, [r0, #4]
   25c04:	mov	r0, r4
   25c08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25c0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25c10:	add	fp, sp, #28
   25c14:	sub	sp, sp, #4
   25c18:	ldr	r6, [r2, #4]
   25c1c:	mov	r8, r0
   25c20:	ldr	r5, [r1]
   25c24:	mov	r9, r2
   25c28:	cmp	r6, #0
   25c2c:	ldrbne	r0, [r1, #28]
   25c30:	andsne	r0, r0, #16
   25c34:	bne	25dd8 <__assert_fail@plt+0x1412c>
   25c38:	ldr	r1, [r5, #64]	; 0x40
   25c3c:	cmp	r1, #31
   25c40:	beq	25e00 <__assert_fail@plt+0x14154>
   25c44:	ldr	r0, [r5, #56]	; 0x38
   25c48:	add	r0, r0, r1, lsl #5
   25c4c:	add	r2, r1, #1
   25c50:	vmov.i32	q8, #0	; 0x00000000
   25c54:	mov	r1, #0
   25c58:	str	r2, [r5, #64]	; 0x40
   25c5c:	mov	r2, #8
   25c60:	add	sl, r0, #4
   25c64:	str	r1, [r0, #20]
   25c68:	str	r1, [r0, #24]
   25c6c:	str	r2, [r0, #28]
   25c70:	mov	r0, #28
   25c74:	mov	r1, sl
   25c78:	vst1.32	{d16-d17}, [r1], r0
   25c7c:	mvn	r0, #0
   25c80:	str	r0, [r1]
   25c84:	ldr	r1, [r5, #64]	; 0x40
   25c88:	cmp	r1, #31
   25c8c:	beq	25e28 <__assert_fail@plt+0x1417c>
   25c90:	ldr	r0, [r5, #56]	; 0x38
   25c94:	add	r0, r0, r1, lsl #5
   25c98:	add	r2, r1, #1
   25c9c:	vmov.i32	q8, #0	; 0x00000000
   25ca0:	mov	r1, #0
   25ca4:	str	r2, [r5, #64]	; 0x40
   25ca8:	mov	r2, #9
   25cac:	add	r7, r0, #4
   25cb0:	str	r1, [r0, #20]
   25cb4:	str	r1, [r0, #24]
   25cb8:	str	r2, [r0, #28]
   25cbc:	mov	r0, #28
   25cc0:	mov	r1, r7
   25cc4:	vst1.32	{d16-d17}, [r1], r0
   25cc8:	mvn	r0, #0
   25ccc:	str	r0, [r1]
   25cd0:	cmp	r6, #0
   25cd4:	mov	r4, r7
   25cd8:	beq	25d28 <__assert_fail@plt+0x1407c>
   25cdc:	ldr	r1, [r5, #64]	; 0x40
   25ce0:	cmp	r1, #31
   25ce4:	beq	25e78 <__assert_fail@plt+0x141cc>
   25ce8:	ldr	r0, [r5, #56]	; 0x38
   25cec:	add	r4, r0, r1, lsl #5
   25cf0:	add	r2, r1, #1
   25cf4:	mov	r0, #0
   25cf8:	cmp	r7, #0
   25cfc:	mov	r1, #16
   25d00:	str	r2, [r5, #64]	; 0x40
   25d04:	mvn	r2, #0
   25d08:	str	r0, [r4, #4]!
   25d0c:	add	r3, r4, #20
   25d10:	stmib	r4, {r6, r7}
   25d14:	str	r0, [r4, #12]
   25d18:	str	r0, [r4, #16]
   25d1c:	stm	r3, {r0, r1, r2}
   25d20:	str	r4, [r6]
   25d24:	strne	r4, [r7]
   25d28:	ldr	r1, [r5, #64]	; 0x40
   25d2c:	cmp	r1, #31
   25d30:	beq	25e50 <__assert_fail@plt+0x141a4>
   25d34:	ldr	r0, [r5, #56]	; 0x38
   25d38:	add	r6, r0, r1, lsl #5
   25d3c:	add	r2, r1, #1
   25d40:	mov	r0, #0
   25d44:	cmp	sl, #0
   25d48:	mov	r1, #16
   25d4c:	str	r2, [r5, #64]	; 0x40
   25d50:	mvn	r2, #0
   25d54:	str	r0, [r6, #4]!
   25d58:	add	r3, r6, #20
   25d5c:	str	sl, [r6, #4]
   25d60:	str	r4, [r6, #8]
   25d64:	str	r0, [r6, #12]
   25d68:	str	r0, [r6, #16]
   25d6c:	stm	r3, {r0, r1, r2}
   25d70:	strne	r6, [sl]
   25d74:	cmp	r4, #0
   25d78:	strne	r6, [r4]
   25d7c:	cmp	r7, #0
   25d80:	beq	25d90 <__assert_fail@plt+0x140e4>
   25d84:	cmp	sl, #0
   25d88:	cmpne	r4, #0
   25d8c:	bne	25da0 <__assert_fail@plt+0x140f4>
   25d90:	mov	r0, #12
   25d94:	mov	r6, #0
   25d98:	str	r0, [r8]
   25d9c:	b	25df4 <__assert_fail@plt+0x14148>
   25da0:	cmp	r6, #0
   25da4:	beq	25d90 <__assert_fail@plt+0x140e4>
   25da8:	ldr	r0, [r9, #20]
   25dac:	str	r0, [r7, #20]
   25db0:	str	r0, [sl, #20]
   25db4:	ldr	r1, [r9, #24]
   25db8:	ldr	r0, [r7, #24]
   25dbc:	lsr	r1, r1, #19
   25dc0:	bfi	r0, r1, #19, #1
   25dc4:	str	r0, [r7, #24]
   25dc8:	ldr	r0, [sl, #24]
   25dcc:	bfi	r0, r1, #19, #1
   25dd0:	str	r0, [sl, #24]
   25dd4:	b	25df4 <__assert_fail@plt+0x14148>
   25dd8:	ldr	r0, [r9, #20]
   25ddc:	cmp	r0, #31
   25de0:	bgt	25df4 <__assert_fail@plt+0x14148>
   25de4:	ldr	r1, [r5, #80]	; 0x50
   25de8:	mov	r2, #1
   25dec:	tst	r1, r2, lsl r0
   25df0:	bne	25c38 <__assert_fail@plt+0x13f8c>
   25df4:	mov	r0, r6
   25df8:	sub	sp, fp, #28
   25dfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25e00:	mov	r0, #996	; 0x3e4
   25e04:	bl	1b5b8 <__assert_fail@plt+0x990c>
   25e08:	cmp	r0, #0
   25e0c:	beq	25ea0 <__assert_fail@plt+0x141f4>
   25e10:	ldr	r1, [r5, #56]	; 0x38
   25e14:	str	r1, [r0]
   25e18:	mov	r1, #0
   25e1c:	str	r1, [r5, #64]	; 0x40
   25e20:	str	r0, [r5, #56]	; 0x38
   25e24:	b	25c48 <__assert_fail@plt+0x13f9c>
   25e28:	mov	r0, #996	; 0x3e4
   25e2c:	bl	1b5b8 <__assert_fail@plt+0x990c>
   25e30:	cmp	r0, #0
   25e34:	beq	25ea8 <__assert_fail@plt+0x141fc>
   25e38:	ldr	r1, [r5, #56]	; 0x38
   25e3c:	str	r1, [r0]
   25e40:	mov	r1, #0
   25e44:	str	r1, [r5, #64]	; 0x40
   25e48:	str	r0, [r5, #56]	; 0x38
   25e4c:	b	25c94 <__assert_fail@plt+0x13fe8>
   25e50:	mov	r0, #996	; 0x3e4
   25e54:	bl	1b5b8 <__assert_fail@plt+0x990c>
   25e58:	cmp	r0, #0
   25e5c:	beq	25eb0 <__assert_fail@plt+0x14204>
   25e60:	ldr	r1, [r5, #56]	; 0x38
   25e64:	str	r1, [r0]
   25e68:	mov	r1, #0
   25e6c:	str	r1, [r5, #64]	; 0x40
   25e70:	str	r0, [r5, #56]	; 0x38
   25e74:	b	25d38 <__assert_fail@plt+0x1408c>
   25e78:	mov	r0, #996	; 0x3e4
   25e7c:	bl	1b5b8 <__assert_fail@plt+0x990c>
   25e80:	cmp	r0, #0
   25e84:	beq	25ec0 <__assert_fail@plt+0x14214>
   25e88:	ldr	r1, [r5, #56]	; 0x38
   25e8c:	str	r1, [r0]
   25e90:	mov	r1, #0
   25e94:	str	r1, [r5, #64]	; 0x40
   25e98:	str	r0, [r5, #56]	; 0x38
   25e9c:	b	25cec <__assert_fail@plt+0x14040>
   25ea0:	mov	sl, #0
   25ea4:	b	25c84 <__assert_fail@plt+0x13fd8>
   25ea8:	mov	r7, #0
   25eac:	b	25cd0 <__assert_fail@plt+0x14024>
   25eb0:	mov	r6, #0
   25eb4:	cmp	r7, #0
   25eb8:	bne	25d84 <__assert_fail@plt+0x140d8>
   25ebc:	b	25d90 <__assert_fail@plt+0x140e4>
   25ec0:	mov	r4, #0
   25ec4:	b	25d28 <__assert_fail@plt+0x1407c>
   25ec8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25ecc:	add	fp, sp, #28
   25ed0:	sub	sp, sp, #12
   25ed4:	mov	r4, r0
   25ed8:	ldr	r7, [r0, #4]
   25edc:	ldr	r0, [r0, #8]
   25ee0:	mov	r5, r2
   25ee4:	mov	r9, r1
   25ee8:	cmp	r0, r7
   25eec:	bcs	25fb8 <__assert_fail@plt+0x1430c>
   25ef0:	ldr	r1, [r4]
   25ef4:	str	r9, [r1, r0, lsl #3]!
   25ef8:	str	r5, [r1, #4]
   25efc:	ldr	r0, [r4]
   25f00:	ldr	r1, [r4, #8]
   25f04:	add	r0, r0, r1, lsl #3
   25f08:	ldr	r1, [r0, #4]
   25f0c:	bfc	r1, #8, #10
   25f10:	str	r1, [r0, #4]
   25f14:	uxtb	r1, r5
   25f18:	cmp	r1, #5
   25f1c:	bne	25f30 <__assert_fail@plt+0x14284>
   25f20:	ldr	r2, [r4, #92]	; 0x5c
   25f24:	mov	r0, #1048576	; 0x100000
   25f28:	cmp	r2, #1
   25f2c:	bgt	25f40 <__assert_fail@plt+0x14294>
   25f30:	sub	r0, r1, #6
   25f34:	clz	r0, r0
   25f38:	lsr	r0, r0, #5
   25f3c:	lsl	r0, r0, #20
   25f40:	ldr	r1, [r4]
   25f44:	ldr	r2, [r4, #8]
   25f48:	add	r1, r1, r2, lsl #3
   25f4c:	ldr	r2, [r1, #4]
   25f50:	bic	r2, r2, #1048576	; 0x100000
   25f54:	orr	r0, r2, r0
   25f58:	mvn	r2, #0
   25f5c:	str	r0, [r1, #4]
   25f60:	ldr	r0, [r4, #8]
   25f64:	ldr	r1, [r4, #12]
   25f68:	str	r2, [r1, r0, lsl #2]
   25f6c:	mov	r2, #0
   25f70:	ldr	r0, [r4, #8]
   25f74:	ldr	r1, [r4, #20]
   25f78:	add	r0, r0, r0, lsl #1
   25f7c:	str	r2, [r1, r0, lsl #2]!
   25f80:	str	r2, [r1, #4]
   25f84:	str	r2, [r1, #8]
   25f88:	ldr	r0, [r4, #8]
   25f8c:	ldr	r1, [r4, #24]
   25f90:	add	r0, r0, r0, lsl #1
   25f94:	str	r2, [r1, r0, lsl #2]!
   25f98:	str	r2, [r1, #4]
   25f9c:	str	r2, [r1, #8]
   25fa0:	ldr	r6, [r4, #8]
   25fa4:	add	r0, r6, #1
   25fa8:	str	r0, [r4, #8]
   25fac:	mov	r0, r6
   25fb0:	sub	sp, fp, #28
   25fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25fb8:	movw	r0, #21845	; 0x5555
   25fbc:	lsl	r1, r7, #1
   25fc0:	mvn	r6, #0
   25fc4:	movt	r0, #5461	; 0x1555
   25fc8:	cmp	r1, r0
   25fcc:	bhi	25fac <__assert_fail@plt+0x14300>
   25fd0:	ldr	r0, [r4]
   25fd4:	str	r1, [sp, #8]
   25fd8:	lsl	r1, r7, #4
   25fdc:	bl	1b64c <__assert_fail@plt+0x99a0>
   25fe0:	cmp	r0, #0
   25fe4:	beq	25fac <__assert_fail@plt+0x14300>
   25fe8:	str	r0, [r4]
   25fec:	lsl	r8, r7, #3
   25ff0:	ldr	r0, [r4, #12]
   25ff4:	mov	r1, r8
   25ff8:	bl	1b64c <__assert_fail@plt+0x99a0>
   25ffc:	str	r0, [sp, #4]
   26000:	ldr	r0, [r4, #16]
   26004:	mov	r1, r8
   26008:	bl	1b64c <__assert_fail@plt+0x99a0>
   2600c:	mov	r2, r0
   26010:	add	r1, r7, r7, lsl #1
   26014:	ldr	r0, [r4, #20]
   26018:	mov	r7, r2
   2601c:	lsl	r8, r1, #3
   26020:	mov	r1, r8
   26024:	bl	1b64c <__assert_fail@plt+0x99a0>
   26028:	mov	sl, r0
   2602c:	ldr	r0, [r4, #24]
   26030:	mov	r1, r8
   26034:	bl	1b64c <__assert_fail@plt+0x99a0>
   26038:	mov	r8, r0
   2603c:	ldr	r0, [sp, #4]
   26040:	cmp	r0, #0
   26044:	beq	26054 <__assert_fail@plt+0x143a8>
   26048:	cmp	r7, #0
   2604c:	cmpne	sl, #0
   26050:	bne	26074 <__assert_fail@plt+0x143c8>
   26054:	bl	1b4e8 <__assert_fail@plt+0x983c>
   26058:	mov	r0, r7
   2605c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   26060:	mov	r0, sl
   26064:	bl	1b4e8 <__assert_fail@plt+0x983c>
   26068:	mov	r0, r8
   2606c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   26070:	b	25fac <__assert_fail@plt+0x14300>
   26074:	cmp	r8, #0
   26078:	beq	26054 <__assert_fail@plt+0x143a8>
   2607c:	add	r1, r4, #12
   26080:	stm	r1, {r0, r7, sl}
   26084:	str	r8, [r4, #24]
   26088:	ldr	r0, [sp, #8]
   2608c:	str	r0, [r4, #4]
   26090:	ldr	r0, [r4, #8]
   26094:	b	25ef0 <__assert_fail@plt+0x14244>
   26098:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2609c:	add	fp, sp, #28
   260a0:	sub	sp, sp, #44	; 0x2c
   260a4:	mov	r8, r0
   260a8:	ldr	r0, [r1, #20]
   260ac:	add	r4, r2, r2, lsl #1
   260b0:	mov	r5, r1
   260b4:	mov	r1, #0
   260b8:	mov	r9, r3
   260bc:	mov	r6, r2
   260c0:	add	r0, r0, r4, lsl #2
   260c4:	ldr	r0, [r0, #4]
   260c8:	str	r1, [sp, #36]	; 0x24
   260cc:	add	r0, r0, #1
   260d0:	str	r0, [sp, #32]
   260d4:	lsl	r0, r0, #2
   260d8:	bl	1b5b8 <__assert_fail@plt+0x990c>
   260dc:	cmp	r0, #0
   260e0:	str	r0, [sp, #40]	; 0x28
   260e4:	beq	262b4 <__assert_fail@plt+0x14608>
   260e8:	mov	r1, #1
   260ec:	str	r6, [r0]
   260f0:	str	r1, [sp, #36]	; 0x24
   260f4:	mvn	r1, #0
   260f8:	ldr	r0, [r5, #24]
   260fc:	add	r0, r0, r4, lsl #2
   26100:	str	r1, [r0, #4]
   26104:	ldr	r2, [r5]
   26108:	add	r0, r2, r6, lsl #3
   2610c:	ldr	r0, [r0, #4]
   26110:	ubfx	r1, r0, #8, #10
   26114:	cmp	r1, #0
   26118:	beq	26174 <__assert_fail@plt+0x144c8>
   2611c:	ldr	r3, [r5, #20]
   26120:	add	r3, r3, r4, lsl #2
   26124:	ldr	r7, [r3, #4]
   26128:	cmp	r7, #0
   2612c:	beq	26174 <__assert_fail@plt+0x144c8>
   26130:	ldr	r3, [r3, #8]
   26134:	ldr	r3, [r3]
   26138:	add	r2, r2, r3, lsl #3
   2613c:	ldrb	r2, [r2, #6]
   26140:	tst	r2, #4
   26144:	bne	26174 <__assert_fail@plt+0x144c8>
   26148:	str	r1, [sp]
   2614c:	mov	r0, r5
   26150:	mov	r1, r6
   26154:	mov	r2, r6
   26158:	mov	r3, r6
   2615c:	bl	262c0 <__assert_fail@plt+0x14614>
   26160:	cmp	r0, #0
   26164:	bne	262ac <__assert_fail@plt+0x14600>
   26168:	ldr	r0, [r5]
   2616c:	add	r0, r0, r6, lsl #3
   26170:	ldr	r0, [r0, #4]
   26174:	tst	r0, #8
   26178:	beq	26280 <__assert_fail@plt+0x145d4>
   2617c:	ldr	r0, [r5, #20]
   26180:	add	r1, r0, r4, lsl #2
   26184:	ldr	r1, [r1, #4]
   26188:	cmp	r1, #1
   2618c:	blt	26280 <__assert_fail@plt+0x145d4>
   26190:	str	r8, [sp, #12]
   26194:	mov	r8, #0
   26198:	add	r7, sp, #16
   2619c:	add	sl, sp, #32
   261a0:	mov	r6, #0
   261a4:	str	r9, [sp, #8]
   261a8:	b	261c8 <__assert_fail@plt+0x1451c>
   261ac:	mov	r8, #1
   261b0:	ldr	r0, [r5, #20]
   261b4:	add	r6, r6, #1
   261b8:	add	r1, r0, r4, lsl #2
   261bc:	ldr	r1, [r1, #4]
   261c0:	cmp	r6, r1
   261c4:	bge	26254 <__assert_fail@plt+0x145a8>
   261c8:	add	r0, r0, r4, lsl #2
   261cc:	ldr	r0, [r0, #8]
   261d0:	ldr	r2, [r0, r6, lsl #2]
   261d4:	ldr	r0, [r5, #24]
   261d8:	add	r9, r2, r2, lsl #1
   261dc:	add	r0, r0, r9, lsl #2
   261e0:	ldr	r1, [r0, #4]
   261e4:	cmn	r1, #1
   261e8:	beq	261ac <__assert_fail@plt+0x14500>
   261ec:	cmp	r1, #0
   261f0:	bne	26210 <__assert_fail@plt+0x14564>
   261f4:	mov	r0, r7
   261f8:	mov	r1, r5
   261fc:	mov	r3, #0
   26200:	bl	26098 <__assert_fail@plt+0x143ec>
   26204:	cmp	r0, #0
   26208:	beq	26220 <__assert_fail@plt+0x14574>
   2620c:	b	262ac <__assert_fail@plt+0x14600>
   26210:	vldr	d16, [r0]
   26214:	ldr	r0, [r0, #8]
   26218:	str	r0, [sp, #24]
   2621c:	vstr	d16, [sp, #16]
   26220:	mov	r0, sl
   26224:	mov	r1, r7
   26228:	bl	26748 <__assert_fail@plt+0x14a9c>
   2622c:	cmp	r0, #0
   26230:	bne	262ac <__assert_fail@plt+0x14600>
   26234:	ldr	r0, [r5, #24]
   26238:	add	r0, r0, r9, lsl #2
   2623c:	ldr	r0, [r0, #4]
   26240:	cmp	r0, #0
   26244:	bne	261b0 <__assert_fail@plt+0x14504>
   26248:	ldr	r0, [sp, #24]
   2624c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   26250:	b	261ac <__assert_fail@plt+0x14500>
   26254:	tst	r8, #1
   26258:	ldr	r8, [sp, #12]
   2625c:	ldr	r0, [sp, #8]
   26260:	beq	26280 <__assert_fail@plt+0x145d4>
   26264:	cmp	r0, #0
   26268:	bne	26280 <__assert_fail@plt+0x145d4>
   2626c:	ldr	r0, [r5, #24]
   26270:	mov	r1, #0
   26274:	add	r0, r0, r4, lsl #2
   26278:	str	r1, [r0, #4]
   2627c:	b	26298 <__assert_fail@plt+0x145ec>
   26280:	ldr	r0, [r5, #24]
   26284:	vldr	d16, [sp, #32]
   26288:	ldr	r1, [sp, #40]	; 0x28
   2628c:	add	r0, r0, r4, lsl #2
   26290:	str	r1, [r0, #8]
   26294:	vstr	d16, [r0]
   26298:	ldr	r0, [sp, #40]	; 0x28
   2629c:	vldr	d16, [sp, #32]
   262a0:	str	r0, [r8, #8]
   262a4:	mov	r0, #0
   262a8:	vstr	d16, [r8]
   262ac:	sub	sp, fp, #28
   262b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   262b4:	mov	r0, #12
   262b8:	sub	sp, fp, #28
   262bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   262c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   262c4:	add	fp, sp, #28
   262c8:	sub	sp, sp, #20
   262cc:	mov	r9, r0
   262d0:	ldr	r0, [fp, #8]
   262d4:	mov	r8, r2
   262d8:	mov	r5, r1
   262dc:	str	r3, [sp, #8]
   262e0:	str	r0, [sp, #12]
   262e4:	ldr	r1, [sp, #12]
   262e8:	movw	r0, #65280	; 0xff00
   262ec:	movt	r0, #3
   262f0:	and	r0, r0, r1, lsl #8
   262f4:	str	r0, [sp, #16]
   262f8:	ldr	r2, [r9]
   262fc:	add	r3, r2, r5, lsl #3
   26300:	ldrb	r0, [r3, #4]!
   26304:	cmp	r0, #4
   26308:	bne	263e0 <__assert_fail@plt+0x14734>
   2630c:	ldr	r0, [r9, #12]
   26310:	ldr	r1, [r9, #20]
   26314:	add	r7, r8, r8, lsl #1
   26318:	ldr	r6, [r0, r5, lsl #2]
   2631c:	add	r0, r1, r7, lsl #2
   26320:	mov	r1, #0
   26324:	str	r1, [r0, #4]
   26328:	mov	r0, r9
   2632c:	ldr	r1, [r2, r6, lsl #3]!
   26330:	ldr	r2, [r2, #4]
   26334:	bl	25ec8 <__assert_fail@plt+0x1421c>
   26338:	cmn	r0, #1
   2633c:	beq	26740 <__assert_fail@plt+0x14a94>
   26340:	mov	r4, r0
   26344:	ldr	r0, [r9]
   26348:	movw	r2, #255	; 0xff
   2634c:	movt	r2, #65532	; 0xfffc
   26350:	add	r0, r0, r4, lsl #3
   26354:	ldr	r1, [r0, #4]
   26358:	and	r1, r1, r2
   2635c:	ldr	r2, [sp, #16]
   26360:	orr	r1, r1, r2
   26364:	movw	r2, #65280	; 0xff00
   26368:	str	r1, [r0, #4]
   2636c:	movt	r2, #3
   26370:	ldr	r0, [r9]
   26374:	add	r1, r0, r6, lsl #3
   26378:	add	r0, r0, r4, lsl #3
   2637c:	ldr	r1, [r1, #4]
   26380:	and	r1, r1, r2
   26384:	ldr	r2, [r0, #4]
   26388:	orr	r1, r1, r2
   2638c:	str	r1, [r0, #4]
   26390:	ldr	r0, [r9]
   26394:	add	r0, r0, r4, lsl #3
   26398:	ldr	r1, [r0, #4]
   2639c:	orr	r1, r1, #262144	; 0x40000
   263a0:	str	r1, [r0, #4]
   263a4:	ldr	r0, [r9, #16]
   263a8:	str	r6, [r0, r4, lsl #2]
   263ac:	ldr	r0, [r9, #12]
   263b0:	ldr	r1, [r0, r5, lsl #2]
   263b4:	str	r1, [r0, r8, lsl #2]
   263b8:	mov	r1, r4
   263bc:	ldr	r0, [r9, #20]
   263c0:	add	r0, r0, r7, lsl #2
   263c4:	bl	268d4 <__assert_fail@plt+0x14c28>
   263c8:	cmp	r0, #0
   263cc:	mov	r5, r6
   263d0:	mov	r8, r4
   263d4:	mov	r7, #12
   263d8:	bne	262f8 <__assert_fail@plt+0x1464c>
   263dc:	b	26710 <__assert_fail@plt+0x14a64>
   263e0:	ldr	r0, [r9, #20]
   263e4:	add	ip, r5, r5, lsl #1
   263e8:	add	r7, r0, ip, lsl #2
   263ec:	ldr	r1, [r7, #4]
   263f0:	cmp	r1, #0
   263f4:	beq	266f4 <__assert_fail@plt+0x14a48>
   263f8:	ldr	r7, [r7, #8]
   263fc:	add	r4, r8, r8, lsl #1
   26400:	cmp	r1, #1
   26404:	add	r0, r0, r4, lsl #2
   26408:	ldr	sl, [r7]
   2640c:	mov	r7, #0
   26410:	str	r7, [r0, #4]
   26414:	beq	2661c <__assert_fail@plt+0x14970>
   26418:	ldr	r1, [r9, #8]
   2641c:	mov	r8, r4
   26420:	ldr	r4, [sp, #12]
   26424:	sub	r3, r1, #1
   26428:	cmp	r3, #1
   2642c:	blt	2647c <__assert_fail@plt+0x147d0>
   26430:	add	r3, r2, r3, lsl #3
   26434:	ldr	r7, [r3, #4]
   26438:	ands	r3, r7, #262144	; 0x40000
   2643c:	beq	2647c <__assert_fail@plt+0x147d0>
   26440:	ldr	r6, [r9, #16]
   26444:	sub	r3, r2, #12
   26448:	sub	r6, r6, #4
   2644c:	ldr	r5, [r6, r1, lsl #2]
   26450:	cmp	r5, sl
   26454:	ubfxeq	r7, r7, #8, #10
   26458:	cmpeq	r7, r4
   2645c:	beq	26600 <__assert_fail@plt+0x14954>
   26460:	sub	r7, r1, #2
   26464:	cmp	r7, #1
   26468:	blt	2647c <__assert_fail@plt+0x147d0>
   2646c:	ldr	r7, [r3, r1, lsl #3]
   26470:	sub	r1, r1, #1
   26474:	ands	r5, r7, #262144	; 0x40000
   26478:	bne	2644c <__assert_fail@plt+0x147a0>
   2647c:	ldr	r1, [r2, sl, lsl #3]!
   26480:	mov	r0, r9
   26484:	mov	r5, ip
   26488:	ldr	r2, [r2, #4]
   2648c:	bl	25ec8 <__assert_fail@plt+0x1421c>
   26490:	mov	r7, #12
   26494:	cmn	r0, #1
   26498:	beq	26710 <__assert_fail@plt+0x14a64>
   2649c:	mov	r6, r0
   264a0:	ldr	r0, [r9]
   264a4:	movw	r2, #255	; 0xff
   264a8:	mov	r4, r8
   264ac:	movt	r2, #65532	; 0xfffc
   264b0:	add	r0, r0, r6, lsl #3
   264b4:	ldr	r1, [r0, #4]
   264b8:	and	r1, r1, r2
   264bc:	ldr	r2, [sp, #16]
   264c0:	orr	r1, r1, r2
   264c4:	movw	r2, #65280	; 0xff00
   264c8:	str	r1, [r0, #4]
   264cc:	movt	r2, #3
   264d0:	ldr	r0, [r9]
   264d4:	add	r1, r0, sl, lsl #3
   264d8:	add	r0, r0, r6, lsl #3
   264dc:	ldr	r1, [r1, #4]
   264e0:	and	r1, r1, r2
   264e4:	ldr	r2, [r0, #4]
   264e8:	orr	r1, r1, r2
   264ec:	str	r1, [r0, #4]
   264f0:	ldr	r0, [r9]
   264f4:	add	r0, r0, r6, lsl #3
   264f8:	ldr	r1, [r0, #4]
   264fc:	orr	r1, r1, #262144	; 0x40000
   26500:	str	r1, [r0, #4]
   26504:	mov	r1, r6
   26508:	ldr	r0, [r9, #16]
   2650c:	str	sl, [r0, r6, lsl #2]
   26510:	ldr	r0, [r9, #20]
   26514:	add	r0, r0, r8, lsl #2
   26518:	bl	268d4 <__assert_fail@plt+0x14c28>
   2651c:	cmp	r0, #0
   26520:	beq	26710 <__assert_fail@plt+0x14a64>
   26524:	ldr	r0, [sp, #12]
   26528:	ldr	r3, [sp, #8]
   2652c:	mov	r1, sl
   26530:	mov	r2, r6
   26534:	str	r0, [sp]
   26538:	mov	r0, r9
   2653c:	bl	262c0 <__assert_fail@plt+0x14614>
   26540:	cmp	r0, #0
   26544:	bne	2670c <__assert_fail@plt+0x14a60>
   26548:	ldr	r1, [r9, #20]
   2654c:	ldr	r0, [r9]
   26550:	add	r1, r1, r5, lsl #2
   26554:	ldr	r1, [r1, #8]
   26558:	ldr	r5, [r1, #4]
   2655c:	ldr	r1, [r0, r5, lsl #3]!
   26560:	ldr	r2, [r0, #4]
   26564:	mov	r0, r9
   26568:	bl	25ec8 <__assert_fail@plt+0x1421c>
   2656c:	mov	r7, #12
   26570:	cmn	r0, #1
   26574:	beq	26710 <__assert_fail@plt+0x14a64>
   26578:	mov	r8, r0
   2657c:	ldr	r0, [r9]
   26580:	movw	r2, #255	; 0xff
   26584:	movt	r2, #65532	; 0xfffc
   26588:	add	r0, r0, r8, lsl #3
   2658c:	ldr	r1, [r0, #4]
   26590:	and	r1, r1, r2
   26594:	ldr	r2, [sp, #16]
   26598:	orr	r1, r1, r2
   2659c:	movw	r2, #65280	; 0xff00
   265a0:	str	r1, [r0, #4]
   265a4:	movt	r2, #3
   265a8:	ldr	r0, [r9]
   265ac:	add	r1, r0, r5, lsl #3
   265b0:	add	r0, r0, r8, lsl #3
   265b4:	ldr	r1, [r1, #4]
   265b8:	and	r1, r1, r2
   265bc:	ldr	r2, [r0, #4]
   265c0:	orr	r1, r1, r2
   265c4:	str	r1, [r0, #4]
   265c8:	ldr	r0, [r9]
   265cc:	add	r0, r0, r8, lsl #3
   265d0:	ldr	r1, [r0, #4]
   265d4:	orr	r1, r1, #262144	; 0x40000
   265d8:	str	r1, [r0, #4]
   265dc:	mov	r1, r8
   265e0:	ldr	r0, [r9, #16]
   265e4:	str	r5, [r0, r8, lsl #2]
   265e8:	ldr	r0, [r9, #20]
   265ec:	add	r0, r0, r4, lsl #2
   265f0:	bl	268d4 <__assert_fail@plt+0x14c28>
   265f4:	cmp	r0, #0
   265f8:	bne	262f8 <__assert_fail@plt+0x1464c>
   265fc:	b	26710 <__assert_fail@plt+0x14a64>
   26600:	sub	r1, r1, #1
   26604:	mov	r5, ip
   26608:	bl	268d4 <__assert_fail@plt+0x14c28>
   2660c:	cmp	r0, #0
   26610:	mov	r4, r8
   26614:	bne	26548 <__assert_fail@plt+0x1489c>
   26618:	b	26740 <__assert_fail@plt+0x14a94>
   2661c:	ldr	r1, [sp, #8]
   26620:	cmp	r5, r1
   26624:	bne	26630 <__assert_fail@plt+0x14984>
   26628:	cmp	r8, r5
   2662c:	bne	2671c <__assert_fail@plt+0x14a70>
   26630:	ldr	r1, [r2, sl, lsl #3]!
   26634:	ldr	r6, [r3]
   26638:	mov	r0, r9
   2663c:	ldr	r2, [r2, #4]
   26640:	bl	25ec8 <__assert_fail@plt+0x1421c>
   26644:	mov	r8, r0
   26648:	ubfx	r0, r6, #8, #10
   2664c:	mov	r7, #12
   26650:	cmn	r8, #1
   26654:	beq	26710 <__assert_fail@plt+0x14a64>
   26658:	ldr	r1, [sp, #12]
   2665c:	movw	r7, #255	; 0xff
   26660:	movt	r7, #65532	; 0xfffc
   26664:	orr	r1, r0, r1
   26668:	movw	r0, #65280	; 0xff00
   2666c:	movt	r0, #3
   26670:	str	r1, [sp, #12]
   26674:	mov	r3, r0
   26678:	and	r0, r0, r1, lsl #8
   2667c:	ldr	r1, [r9]
   26680:	add	r1, r1, r8, lsl #3
   26684:	ldr	r2, [r1, #4]
   26688:	and	r2, r2, r7
   2668c:	mov	r7, #12
   26690:	orr	r0, r2, r0
   26694:	str	r0, [r1, #4]
   26698:	ldr	r0, [r9]
   2669c:	add	r1, r0, sl, lsl #3
   266a0:	add	r0, r0, r8, lsl #3
   266a4:	ldr	r1, [r1, #4]
   266a8:	ldr	r2, [r0, #4]
   266ac:	and	r1, r1, r3
   266b0:	orr	r1, r1, r2
   266b4:	str	r1, [r0, #4]
   266b8:	ldr	r0, [r9]
   266bc:	add	r0, r0, r8, lsl #3
   266c0:	ldr	r1, [r0, #4]
   266c4:	orr	r1, r1, #262144	; 0x40000
   266c8:	str	r1, [r0, #4]
   266cc:	mov	r1, r8
   266d0:	ldr	r0, [r9, #16]
   266d4:	str	sl, [r0, r8, lsl #2]
   266d8:	ldr	r0, [r9, #20]
   266dc:	add	r0, r0, r4, lsl #2
   266e0:	bl	268d4 <__assert_fail@plt+0x14c28>
   266e4:	cmp	r0, #0
   266e8:	mov	r5, sl
   266ec:	bne	262e4 <__assert_fail@plt+0x14638>
   266f0:	b	26710 <__assert_fail@plt+0x14a64>
   266f4:	ldr	r0, [r9, #12]
   266f8:	ldr	r1, [r0, r5, lsl #2]
   266fc:	str	r1, [r0, r8, lsl #2]
   26700:	mov	r0, #0
   26704:	sub	sp, fp, #28
   26708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2670c:	mov	r7, r0
   26710:	mov	r0, r7
   26714:	sub	sp, fp, #28
   26718:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2671c:	mov	r1, sl
   26720:	bl	268d4 <__assert_fail@plt+0x14c28>
   26724:	mov	r1, r0
   26728:	mov	r7, #12
   2672c:	mov	r0, #0
   26730:	cmp	r1, #0
   26734:	moveq	r0, r7
   26738:	sub	sp, fp, #28
   2673c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26740:	mov	r7, #12
   26744:	b	26710 <__assert_fail@plt+0x14a64>
   26748:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2674c:	add	fp, sp, #24
   26750:	mov	r8, #0
   26754:	cmp	r1, #0
   26758:	beq	268a8 <__assert_fail@plt+0x14bfc>
   2675c:	mov	r6, r1
   26760:	ldr	r1, [r1, #4]
   26764:	cmp	r1, #0
   26768:	beq	268a8 <__assert_fail@plt+0x14bfc>
   2676c:	mov	r9, r0
   26770:	ldr	r2, [r0]
   26774:	ldr	r0, [r0, #4]
   26778:	add	r3, r0, r1, lsl #1
   2677c:	cmp	r2, r3
   26780:	bge	267ac <__assert_fail@plt+0x14b00>
   26784:	ldr	r0, [r9, #8]
   26788:	add	r7, r2, r1
   2678c:	lsl	r1, r7, #3
   26790:	bl	1b64c <__assert_fail@plt+0x99a0>
   26794:	cmp	r0, #0
   26798:	beq	268c8 <__assert_fail@plt+0x14c1c>
   2679c:	str	r0, [r9, #8]
   267a0:	lsl	r0, r7, #1
   267a4:	str	r0, [r9]
   267a8:	ldr	r0, [r9, #4]
   267ac:	cmp	r0, #0
   267b0:	beq	268b0 <__assert_fail@plt+0x14c04>
   267b4:	ldr	r2, [r6, #4]
   267b8:	sub	r1, r0, #1
   267bc:	add	r7, r0, r2, lsl #1
   267c0:	sub	r0, r2, #1
   267c4:	orrs	r2, r0, r1
   267c8:	bmi	26810 <__assert_fail@plt+0x14b64>
   267cc:	ldr	r2, [r6, #8]
   267d0:	ldr	r3, [r9, #8]
   267d4:	b	267f4 <__assert_fail@plt+0x14b48>
   267d8:	sublt	r7, r7, #1
   267dc:	subge	r1, r1, #1
   267e0:	sublt	r0, r0, #1
   267e4:	strlt	r4, [r3, r7, lsl #2]
   267e8:	orr	r5, r0, r1
   267ec:	cmn	r5, #1
   267f0:	ble	26810 <__assert_fail@plt+0x14b64>
   267f4:	ldr	r4, [r2, r0, lsl #2]
   267f8:	ldr	r5, [r3, r1, lsl #2]
   267fc:	cmp	r5, r4
   26800:	bne	267d8 <__assert_fail@plt+0x14b2c>
   26804:	sub	r1, r1, #1
   26808:	sub	r0, r0, #1
   2680c:	b	267e8 <__assert_fail@plt+0x14b3c>
   26810:	cmp	r0, #0
   26814:	bmi	26834 <__assert_fail@plt+0x14b88>
   26818:	add	r2, r0, #1
   2681c:	ldr	r0, [r9, #8]
   26820:	ldr	r1, [r6, #8]
   26824:	sub	r7, r7, r2
   26828:	lsl	r2, r2, #2
   2682c:	add	r0, r0, r7, lsl #2
   26830:	bl	118ec <memcpy@plt>
   26834:	ldr	r0, [r9, #4]
   26838:	ldr	r2, [r6, #4]
   2683c:	sub	r1, r0, #1
   26840:	add	r3, r1, r2, lsl #1
   26844:	sub	r2, r3, r7
   26848:	adds	r2, r2, #1
   2684c:	bcs	268a8 <__assert_fail@plt+0x14bfc>
   26850:	add	r0, r2, r0
   26854:	str	r0, [r9, #4]
   26858:	ldr	r0, [r9, #8]
   2685c:	ldr	r6, [r0, r1, lsl #2]
   26860:	ldr	r5, [r0, r3, lsl #2]
   26864:	cmp	r5, r6
   26868:	ble	26884 <__assert_fail@plt+0x14bd8>
   2686c:	add	r6, r2, r1
   26870:	subs	r2, r2, #1
   26874:	sub	r3, r3, #1
   26878:	str	r5, [r0, r6, lsl #2]
   2687c:	bne	2685c <__assert_fail@plt+0x14bb0>
   26880:	b	268a8 <__assert_fail@plt+0x14bfc>
   26884:	add	r5, r2, r1
   26888:	cmp	r1, #0
   2688c:	str	r6, [r0, r5, lsl #2]
   26890:	sub	r6, r1, #1
   26894:	mov	r1, r6
   26898:	bgt	2685c <__assert_fail@plt+0x14bb0>
   2689c:	add	r1, r0, r7, lsl #2
   268a0:	lsl	r2, r2, #2
   268a4:	bl	118ec <memcpy@plt>
   268a8:	mov	r0, r8
   268ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   268b0:	ldr	r0, [r6, #4]
   268b4:	str	r0, [r9, #4]
   268b8:	ldr	r0, [r9, #8]
   268bc:	ldr	r2, [r6, #4]
   268c0:	ldr	r1, [r6, #8]
   268c4:	b	268a0 <__assert_fail@plt+0x14bf4>
   268c8:	mov	r8, #12
   268cc:	mov	r0, r8
   268d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   268d4:	push	{r4, r5, r6, sl, fp, lr}
   268d8:	add	fp, sp, #16
   268dc:	ldr	r2, [r0]
   268e0:	mov	r5, r1
   268e4:	mov	r4, r0
   268e8:	cmp	r2, #0
   268ec:	beq	2691c <__assert_fail@plt+0x14c70>
   268f0:	ldr	r1, [r4, #4]
   268f4:	cmp	r1, #0
   268f8:	bne	26958 <__assert_fail@plt+0x14cac>
   268fc:	ldr	r0, [r4, #8]
   26900:	str	r5, [r0]
   26904:	ldr	r0, [r4, #4]
   26908:	mov	r6, #1
   2690c:	add	r0, r0, #1
   26910:	str	r0, [r4, #4]
   26914:	mov	r0, r6
   26918:	pop	{r4, r5, r6, sl, fp, pc}
   2691c:	mov	r6, #1
   26920:	mov	r0, #4
   26924:	str	r6, [r4]
   26928:	str	r6, [r4, #4]
   2692c:	bl	1b5b8 <__assert_fail@plt+0x990c>
   26930:	cmp	r0, #0
   26934:	str	r0, [r4, #8]
   26938:	strne	r5, [r0]
   2693c:	movne	r0, r6
   26940:	popne	{r4, r5, r6, sl, fp, pc}
   26944:	mov	r6, #0
   26948:	mov	r0, r6
   2694c:	str	r6, [r4]
   26950:	str	r6, [r4, #4]
   26954:	pop	{r4, r5, r6, sl, fp, pc}
   26958:	cmp	r2, r1
   2695c:	bne	26988 <__assert_fail@plt+0x14cdc>
   26960:	lsl	r0, r2, #1
   26964:	lsl	r1, r2, #3
   26968:	str	r0, [r4]
   2696c:	ldr	r0, [r4, #8]
   26970:	bl	1b64c <__assert_fail@plt+0x99a0>
   26974:	cmp	r0, #0
   26978:	beq	26a3c <__assert_fail@plt+0x14d90>
   2697c:	str	r0, [r4, #8]
   26980:	ldr	r1, [r4, #4]
   26984:	b	2698c <__assert_fail@plt+0x14ce0>
   26988:	ldr	r0, [r4, #8]
   2698c:	ldr	r2, [r0]
   26990:	cmp	r2, r5
   26994:	ble	26a04 <__assert_fail@plt+0x14d58>
   26998:	cmp	r1, #1
   2699c:	blt	26a34 <__assert_fail@plt+0x14d88>
   269a0:	ands	r3, r1, #3
   269a4:	sub	ip, r1, #1
   269a8:	beq	269cc <__assert_fail@plt+0x14d20>
   269ac:	add	lr, r0, r1, lsl #2
   269b0:	mov	r6, lr
   269b4:	ldr	r2, [r6, #-4]!
   269b8:	subs	r3, r3, #1
   269bc:	sub	r1, r1, #1
   269c0:	str	r2, [lr]
   269c4:	mov	lr, r6
   269c8:	bne	269b4 <__assert_fail@plt+0x14d08>
   269cc:	cmp	ip, #3
   269d0:	bcc	269fc <__assert_fail@plt+0x14d50>
   269d4:	add	r2, r0, r1, lsl #2
   269d8:	sub	r2, r2, #8
   269dc:	sub	lr, r2, #8
   269e0:	sub	r1, r1, #4
   269e4:	sub	sl, r2, #4
   269e8:	sub	r2, r2, #16
   269ec:	ldm	lr, {r3, r6, ip, lr}
   269f0:	cmp	r1, #0
   269f4:	stm	sl, {r3, r6, ip, lr}
   269f8:	bgt	269dc <__assert_fail@plt+0x14d30>
   269fc:	mov	r1, #0
   26a00:	b	26a34 <__assert_fail@plt+0x14d88>
   26a04:	add	r2, r0, r1, lsl #2
   26a08:	ldr	r3, [r2, #-4]
   26a0c:	cmp	r3, r5
   26a10:	ble	26a34 <__assert_fail@plt+0x14d88>
   26a14:	sub	r1, r1, #2
   26a18:	str	r3, [r2]
   26a1c:	sub	r1, r1, #1
   26a20:	ldr	r3, [r2, #-8]
   26a24:	sub	r2, r2, #4
   26a28:	cmp	r3, r5
   26a2c:	bgt	26a18 <__assert_fail@plt+0x14d6c>
   26a30:	add	r1, r1, #2
   26a34:	str	r5, [r0, r1, lsl #2]
   26a38:	b	26904 <__assert_fail@plt+0x14c58>
   26a3c:	mov	r6, #0
   26a40:	mov	r0, r6
   26a44:	pop	{r4, r5, r6, sl, fp, pc}
   26a48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26a4c:	add	fp, sp, #28
   26a50:	sub	sp, sp, #28
   26a54:	ldr	r8, [r2, #4]
   26a58:	str	r2, [sp, #24]
   26a5c:	cmp	r8, #0
   26a60:	beq	26c6c <__assert_fail@plt+0x14fc0>
   26a64:	mov	r9, r3
   26a68:	add	r7, r8, r3
   26a6c:	cmp	r8, #1
   26a70:	str	r0, [sp, #4]
   26a74:	blt	26b58 <__assert_fail@plt+0x14eac>
   26a78:	ldr	r0, [sp, #24]
   26a7c:	mov	sl, #0
   26a80:	cmp	r8, #4
   26a84:	ldr	ip, [r0, #8]
   26a88:	bcc	26b40 <__assert_fail@plt+0x14e94>
   26a8c:	mov	r3, #0
   26a90:	bic	sl, r8, #3
   26a94:	mov	r0, #1
   26a98:	vdup.32	q8, r3
   26a9c:	sub	r2, sl, #4
   26aa0:	add	r0, r0, r2, lsr #2
   26aa4:	cmp	r2, #12
   26aa8:	and	lr, r0, #3
   26aac:	vmov.32	d16[0], r7
   26ab0:	bcc	26b04 <__assert_fail@plt+0x14e58>
   26ab4:	sub	r5, r0, lr
   26ab8:	mov	r3, #0
   26abc:	mov	r4, #64	; 0x40
   26ac0:	mov	r7, ip
   26ac4:	mov	r6, ip
   26ac8:	vld1.32	{d18-d19}, [r6], r4
   26acc:	add	r2, r7, #16
   26ad0:	add	r0, r7, #32
   26ad4:	subs	r5, r5, #4
   26ad8:	add	r3, r3, #16
   26adc:	vld1.32	{d20-d21}, [r2]
   26ae0:	vadd.i32	q8, q9, q8
   26ae4:	vld1.32	{d18-d19}, [r0]
   26ae8:	add	r0, r7, #48	; 0x30
   26aec:	mov	r7, r6
   26af0:	vadd.i32	q8, q10, q8
   26af4:	vld1.32	{d20-d21}, [r0]
   26af8:	vadd.i32	q8, q9, q8
   26afc:	vadd.i32	q8, q10, q8
   26b00:	bne	26ac8 <__assert_fail@plt+0x14e1c>
   26b04:	cmp	lr, #0
   26b08:	beq	26b24 <__assert_fail@plt+0x14e78>
   26b0c:	add	r0, ip, r3, lsl #2
   26b10:	rsb	r3, lr, #0
   26b14:	vld1.32	{d18-d19}, [r0]!
   26b18:	adds	r3, r3, #1
   26b1c:	vadd.i32	q8, q9, q8
   26b20:	bcc	26b14 <__assert_fail@plt+0x14e68>
   26b24:	vext.8	q9, q8, q8, #8
   26b28:	cmp	r8, sl
   26b2c:	vadd.i32	q8, q8, q9
   26b30:	vdup.32	q9, d16[1]
   26b34:	vadd.i32	q8, q8, q9
   26b38:	vmov.32	r7, d16[0]
   26b3c:	beq	26b58 <__assert_fail@plt+0x14eac>
   26b40:	add	r3, ip, sl, lsl #2
   26b44:	sub	r2, r8, sl
   26b48:	ldr	r0, [r3], #4
   26b4c:	subs	r2, r2, #1
   26b50:	add	r7, r0, r7
   26b54:	bne	26b48 <__assert_fail@plt+0x14e9c>
   26b58:	ldr	r0, [r1, #32]
   26b5c:	mov	sl, r1
   26b60:	ldr	r1, [r1, #68]	; 0x44
   26b64:	and	r1, r1, r7
   26b68:	add	r2, r1, r1, lsl #1
   26b6c:	ldr	r1, [r0, r2, lsl #2]
   26b70:	cmp	r1, #1
   26b74:	blt	26c0c <__assert_fail@plt+0x14f60>
   26b78:	add	r0, r0, r2, lsl #2
   26b7c:	sub	ip, r8, #1
   26b80:	mov	r5, #0
   26b84:	ldr	lr, [r0, #8]
   26b88:	b	26b98 <__assert_fail@plt+0x14eec>
   26b8c:	add	r5, r5, #1
   26b90:	cmp	r5, r1
   26b94:	bge	26c0c <__assert_fail@plt+0x14f60>
   26b98:	ldr	r4, [lr, r5, lsl #2]
   26b9c:	ldr	r0, [r4]
   26ba0:	cmp	r0, r7
   26ba4:	bne	26b8c <__assert_fail@plt+0x14ee0>
   26ba8:	ldrb	r0, [r4, #52]	; 0x34
   26bac:	and	r0, r0, #15
   26bb0:	cmp	r0, r9
   26bb4:	bne	26b8c <__assert_fail@plt+0x14ee0>
   26bb8:	ldr	r0, [sp, #24]
   26bbc:	cmp	r0, #0
   26bc0:	ldrne	r3, [r4, #40]	; 0x28
   26bc4:	cmpne	r3, #0
   26bc8:	beq	26b8c <__assert_fail@plt+0x14ee0>
   26bcc:	ldr	r0, [r3, #4]
   26bd0:	cmp	r0, r8
   26bd4:	bne	26b8c <__assert_fail@plt+0x14ee0>
   26bd8:	mov	r0, ip
   26bdc:	add	r6, r0, #1
   26be0:	cmp	r6, #1
   26be4:	blt	26eac <__assert_fail@plt+0x15200>
   26be8:	ldr	r2, [sp, #24]
   26bec:	ldr	r6, [r2, #8]
   26bf0:	ldr	r2, [r3, #8]
   26bf4:	ldr	r6, [r6, r0, lsl #2]
   26bf8:	ldr	r2, [r2, r0, lsl #2]
   26bfc:	sub	r0, r0, #1
   26c00:	cmp	r2, r6
   26c04:	beq	26bdc <__assert_fail@plt+0x14f30>
   26c08:	b	26b8c <__assert_fail@plt+0x14ee0>
   26c0c:	mov	r0, #56	; 0x38
   26c10:	mov	r1, #1
   26c14:	bl	1b258 <__assert_fail@plt+0x95ac>
   26c18:	cmp	r0, #0
   26c1c:	beq	26ecc <__assert_fail@plt+0x15220>
   26c20:	mov	r4, r0
   26c24:	ldr	r0, [sp, #24]
   26c28:	add	r6, r4, #4
   26c2c:	ldr	r8, [r0, #4]
   26c30:	cmp	r8, #1
   26c34:	str	r8, [r4, #8]
   26c38:	blt	26c78 <__assert_fail@plt+0x14fcc>
   26c3c:	lsl	r0, r8, #2
   26c40:	str	r8, [r4, #4]
   26c44:	bl	1b5b8 <__assert_fail@plt+0x990c>
   26c48:	cmp	r0, #0
   26c4c:	str	r0, [r4, #12]
   26c50:	beq	26ee0 <__assert_fail@plt+0x15234>
   26c54:	ldr	r1, [sp, #24]
   26c58:	ldr	r8, [r1, #4]
   26c5c:	ldr	r1, [r1, #8]
   26c60:	lsl	r2, r8, #2
   26c64:	bl	118ec <memcpy@plt>
   26c68:	b	26c88 <__assert_fail@plt+0x14fdc>
   26c6c:	mov	r4, #0
   26c70:	str	r4, [r0]
   26c74:	b	26eac <__assert_fail@plt+0x15200>
   26c78:	mov	r0, #0
   26c7c:	str	r0, [r6]
   26c80:	str	r0, [r6, #4]
   26c84:	str	r0, [r6, #8]
   26c88:	str	r6, [r4, #40]	; 0x28
   26c8c:	and	r0, r9, #15
   26c90:	cmp	r8, #1
   26c94:	ldrb	r1, [r4, #52]	; 0x34
   26c98:	and	r1, r1, #240	; 0xf0
   26c9c:	orr	r0, r1, r0
   26ca0:	strb	r0, [r4, #52]	; 0x34
   26ca4:	mov	r0, sl
   26ca8:	blt	26e98 <__assert_fail@plt+0x151ec>
   26cac:	movw	lr, #65280	; 0xff00
   26cb0:	and	r1, r9, #4
   26cb4:	and	ip, r9, #1
   26cb8:	mov	sl, #0
   26cbc:	mov	r5, #0
   26cc0:	str	r0, [sp, #16]
   26cc4:	movt	lr, #3
   26cc8:	str	r1, [sp]
   26ccc:	and	r1, r9, #2
   26cd0:	str	ip, [sp, #12]
   26cd4:	str	r1, [sp, #8]
   26cd8:	add	r1, lr, #255	; 0xff
   26cdc:	str	r1, [sp, #20]
   26ce0:	b	26cf4 <__assert_fail@plt+0x15048>
   26ce4:	add	r5, r5, #1
   26ce8:	add	sl, sl, #1
   26cec:	cmp	sl, r8
   26cf0:	bge	26e98 <__assert_fail@plt+0x151ec>
   26cf4:	ldr	r1, [sp, #24]
   26cf8:	ldr	r2, [r0]
   26cfc:	ldr	r1, [r1, #8]
   26d00:	ldr	r1, [r1, sl, lsl #2]
   26d04:	add	r1, r2, r1, lsl #3
   26d08:	ldr	r9, [r1, #4]
   26d0c:	ldr	r1, [sp, #20]
   26d10:	and	r1, r9, r1
   26d14:	cmp	r1, #1
   26d18:	beq	26ce8 <__assert_fail@plt+0x1503c>
   26d1c:	ldrb	r3, [r4, #52]	; 0x34
   26d20:	mov	r2, #32
   26d24:	and	r1, r9, lr
   26d28:	and	r2, r2, r9, lsr #15
   26d2c:	orr	r2, r3, r2
   26d30:	uxtb	r3, r9
   26d34:	strb	r2, [r4, #52]	; 0x34
   26d38:	cmp	r3, #2
   26d3c:	beq	26d50 <__assert_fail@plt+0x150a4>
   26d40:	cmp	r3, #4
   26d44:	bne	26d5c <__assert_fail@plt+0x150b0>
   26d48:	mov	r3, #64	; 0x40
   26d4c:	b	26d54 <__assert_fail@plt+0x150a8>
   26d50:	mov	r3, #16
   26d54:	orr	r2, r2, r3
   26d58:	strb	r2, [r4, #52]	; 0x34
   26d5c:	cmp	r1, #0
   26d60:	beq	26ce8 <__assert_fail@plt+0x1503c>
   26d64:	ldr	r1, [r4, #40]	; 0x28
   26d68:	cmp	r1, r6
   26d6c:	beq	26d84 <__assert_fail@plt+0x150d8>
   26d70:	cmp	ip, #0
   26d74:	bne	26e18 <__assert_fail@plt+0x1516c>
   26d78:	ands	r1, r9, #256	; 0x100
   26d7c:	bne	26e4c <__assert_fail@plt+0x151a0>
   26d80:	b	26e18 <__assert_fail@plt+0x1516c>
   26d84:	mov	r0, #12
   26d88:	bl	1b5b8 <__assert_fail@plt+0x990c>
   26d8c:	cmp	r0, #0
   26d90:	beq	26ec4 <__assert_fail@plt+0x15218>
   26d94:	mov	r5, r0
   26d98:	str	r0, [r4, #40]	; 0x28
   26d9c:	ldr	r0, [sp, #24]
   26da0:	ldr	r8, [r0, #4]
   26da4:	cmp	r8, #1
   26da8:	str	r8, [r5, #4]
   26dac:	blt	26de0 <__assert_fail@plt+0x15134>
   26db0:	lsl	r0, r8, #2
   26db4:	str	r8, [r5]
   26db8:	bl	1b5b8 <__assert_fail@plt+0x990c>
   26dbc:	cmp	r0, #0
   26dc0:	str	r0, [r5, #8]
   26dc4:	beq	26eb8 <__assert_fail@plt+0x1520c>
   26dc8:	ldr	r1, [sp, #24]
   26dcc:	ldr	r8, [r1, #4]
   26dd0:	ldr	r1, [r1, #8]
   26dd4:	lsl	r2, r8, #2
   26dd8:	bl	118ec <memcpy@plt>
   26ddc:	b	26df0 <__assert_fail@plt+0x15144>
   26de0:	mov	r0, #0
   26de4:	str	r0, [r5]
   26de8:	str	r0, [r5, #4]
   26dec:	str	r0, [r5, #8]
   26df0:	ldrb	r0, [r4, #52]	; 0x34
   26df4:	ldr	ip, [sp, #12]
   26df8:	movw	lr, #65280	; 0xff00
   26dfc:	mov	r5, #0
   26e00:	movt	lr, #3
   26e04:	orr	r0, r0, #128	; 0x80
   26e08:	strb	r0, [r4, #52]	; 0x34
   26e0c:	ldr	r0, [sp, #16]
   26e10:	cmp	ip, #0
   26e14:	beq	26d78 <__assert_fail@plt+0x150cc>
   26e18:	cmp	ip, #0
   26e1c:	andsne	r1, r9, #512	; 0x200
   26e20:	bne	26e4c <__assert_fail@plt+0x151a0>
   26e24:	ldr	r1, [sp, #8]
   26e28:	cmp	r1, #0
   26e2c:	bne	26e38 <__assert_fail@plt+0x1518c>
   26e30:	ands	r1, r9, #4096	; 0x1000
   26e34:	bne	26e4c <__assert_fail@plt+0x151a0>
   26e38:	ldr	r1, [sp]
   26e3c:	cmp	r1, #0
   26e40:	bne	26ce8 <__assert_fail@plt+0x1503c>
   26e44:	ands	r1, r9, #16384	; 0x4000
   26e48:	beq	26ce8 <__assert_fail@plt+0x1503c>
   26e4c:	subs	r1, sl, r5
   26e50:	bmi	26ce4 <__assert_fail@plt+0x15038>
   26e54:	ldr	r2, [r4, #8]
   26e58:	cmp	r2, r1
   26e5c:	subgt	r2, r2, #1
   26e60:	strgt	r2, [r4, #8]
   26e64:	cmpgt	r2, r1
   26e68:	ble	26ce4 <__assert_fail@plt+0x15038>
   26e6c:	ldr	r2, [r4, #12]
   26e70:	add	r3, r2, r1, lsl #2
   26e74:	ldr	r3, [r3, #4]
   26e78:	str	r3, [r2, r1, lsl #2]
   26e7c:	add	r1, r1, #1
   26e80:	ldr	r3, [r4, #8]
   26e84:	cmp	r1, r3
   26e88:	blt	26e70 <__assert_fail@plt+0x151c4>
   26e8c:	ldr	r1, [sp, #24]
   26e90:	ldr	r8, [r1, #4]
   26e94:	b	26ce4 <__assert_fail@plt+0x15038>
   26e98:	mov	r1, r4
   26e9c:	mov	r2, r7
   26ea0:	bl	26ef8 <__assert_fail@plt+0x1524c>
   26ea4:	cmp	r0, #0
   26ea8:	bne	26ec4 <__assert_fail@plt+0x15218>
   26eac:	mov	r0, r4
   26eb0:	sub	sp, fp, #28
   26eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26eb8:	mov	r0, #0
   26ebc:	str	r0, [r5]
   26ec0:	str	r0, [r5, #4]
   26ec4:	mov	r0, r4
   26ec8:	bl	20a88 <__assert_fail@plt+0xeddc>
   26ecc:	ldr	r1, [sp, #4]
   26ed0:	mov	r0, #12
   26ed4:	mov	r4, #0
   26ed8:	str	r0, [r1]
   26edc:	b	26eac <__assert_fail@plt+0x15200>
   26ee0:	mov	r0, #0
   26ee4:	str	r0, [r4, #4]
   26ee8:	str	r0, [r4, #8]
   26eec:	mov	r0, r4
   26ef0:	bl	1b4e8 <__assert_fail@plt+0x983c>
   26ef4:	b	26ecc <__assert_fail@plt+0x15220>
   26ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26efc:	add	fp, sp, #28
   26f00:	sub	sp, sp, #4
   26f04:	str	r2, [r1]
   26f08:	mov	r4, r1
   26f0c:	mov	r7, r0
   26f10:	mov	r0, #0
   26f14:	mov	r9, r2
   26f18:	ldr	r1, [r1, #8]
   26f1c:	str	r1, [r4, #16]
   26f20:	str	r0, [r4, #20]
   26f24:	lsl	r0, r1, #2
   26f28:	bl	1b5b8 <__assert_fail@plt+0x990c>
   26f2c:	mov	r8, #12
   26f30:	cmp	r0, #0
   26f34:	str	r0, [r4, #24]
   26f38:	beq	27000 <__assert_fail@plt+0x15354>
   26f3c:	ldr	r1, [r4, #8]
   26f40:	cmp	r1, #1
   26f44:	blt	26fc0 <__assert_fail@plt+0x15314>
   26f48:	mov	r5, #0
   26f4c:	mov	sl, #2
   26f50:	b	26f70 <__assert_fail@plt+0x152c4>
   26f54:	add	r2, r1, #1
   26f58:	str	r2, [r4, #20]
   26f5c:	str	r6, [r0, r1, lsl #2]
   26f60:	ldr	r1, [r4, #8]
   26f64:	add	r5, r5, #1
   26f68:	cmp	r5, r1
   26f6c:	bge	26fc0 <__assert_fail@plt+0x15314>
   26f70:	ldr	r2, [r4, #12]
   26f74:	ldr	r6, [r2, r5, lsl #2]
   26f78:	ldr	r2, [r7]
   26f7c:	add	r2, r2, r6, lsl #3
   26f80:	ldrb	r2, [r2, #4]
   26f84:	tst	r2, #8
   26f88:	bne	26f64 <__assert_fail@plt+0x152b8>
   26f8c:	ldr	r2, [r4, #16]
   26f90:	ldr	r1, [r4, #20]
   26f94:	cmp	r2, r1
   26f98:	bne	26f54 <__assert_fail@plt+0x152a8>
   26f9c:	add	r1, sl, r2, lsl #1
   26fa0:	str	r1, [r4, #16]
   26fa4:	lsl	r1, r1, #2
   26fa8:	bl	1b64c <__assert_fail@plt+0x99a0>
   26fac:	cmp	r0, #0
   26fb0:	beq	27000 <__assert_fail@plt+0x15354>
   26fb4:	str	r0, [r4, #24]
   26fb8:	ldr	r1, [r4, #20]
   26fbc:	b	26f54 <__assert_fail@plt+0x152a8>
   26fc0:	ldr	r1, [r7, #68]	; 0x44
   26fc4:	ldr	r0, [r7, #32]
   26fc8:	and	r1, r1, r9
   26fcc:	mov	r5, r0
   26fd0:	add	r2, r1, r1, lsl #1
   26fd4:	ldr	r1, [r5, r2, lsl #2]!
   26fd8:	mov	r6, r5
   26fdc:	ldr	r3, [r6, #4]!
   26fe0:	cmp	r3, r1
   26fe4:	ble	2700c <__assert_fail@plt+0x15360>
   26fe8:	add	r0, r0, r2, lsl #2
   26fec:	ldr	r0, [r0, #8]
   26ff0:	add	r2, r1, #1
   26ff4:	mov	r8, #0
   26ff8:	str	r2, [r5]
   26ffc:	str	r4, [r0, r1, lsl #2]
   27000:	mov	r0, r8
   27004:	sub	sp, fp, #28
   27008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2700c:	add	r7, r0, r2, lsl #2
   27010:	mov	r2, #2
   27014:	add	r9, r2, r1, lsl #1
   27018:	ldr	r0, [r7, #8]!
   2701c:	lsl	r1, r9, #2
   27020:	bl	1b64c <__assert_fail@plt+0x99a0>
   27024:	cmp	r0, #0
   27028:	beq	27000 <__assert_fail@plt+0x15354>
   2702c:	str	r0, [r7]
   27030:	str	r9, [r6]
   27034:	ldr	r1, [r5]
   27038:	b	26ff0 <__assert_fail@plt+0x15344>
   2703c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27040:	add	fp, sp, #28
   27044:	sub	sp, sp, #36	; 0x24
   27048:	mov	r4, r0
   2704c:	ldr	r0, [r0, #24]
   27050:	mov	r6, r2
   27054:	mov	r9, r1
   27058:	cmp	r0, r1
   2705c:	ble	27258 <__assert_fail@plt+0x155ac>
   27060:	ldr	r0, [r4, #80]	; 0x50
   27064:	mov	r1, #4
   27068:	cmp	r0, #2
   2706c:	movge	r0, #0
   27070:	strge	r0, [r4, #16]
   27074:	strge	r0, [r4, #20]
   27078:	mov	r0, #0
   2707c:	tst	r6, #1
   27080:	strb	r0, [r4, #76]	; 0x4c
   27084:	str	r0, [r4, #24]
   27088:	str	r0, [r4, #28]
   2708c:	str	r0, [r4, #32]
   27090:	movweq	r1, #6
   27094:	ldr	r2, [r4, #44]	; 0x2c
   27098:	ldr	r3, [r4, #52]	; 0x34
   2709c:	str	r2, [r4, #48]	; 0x30
   270a0:	str	r3, [r4, #56]	; 0x38
   270a4:	str	r1, [r4, #60]	; 0x3c
   270a8:	ldrb	r1, [r4, #75]	; 0x4b
   270ac:	cmp	r1, #0
   270b0:	bne	270bc <__assert_fail@plt+0x15410>
   270b4:	ldr	r1, [r4]
   270b8:	str	r1, [r4, #4]
   270bc:	mov	r5, r9
   270c0:	cmp	r5, #0
   270c4:	beq	271e0 <__assert_fail@plt+0x15534>
   270c8:	ldr	r1, [r4, #32]
   270cc:	cmp	r5, r1
   270d0:	bge	27268 <__assert_fail@plt+0x155bc>
   270d4:	ldrb	r0, [r4, #76]	; 0x4c
   270d8:	cmp	r0, #0
   270dc:	bne	273e4 <__assert_fail@plt+0x15738>
   270e0:	cmp	r5, #0
   270e4:	ble	27120 <__assert_fail@plt+0x15474>
   270e8:	ldr	r1, [r4, #48]	; 0x30
   270ec:	sub	r0, r5, #1
   270f0:	cmp	r1, r0
   270f4:	beq	2749c <__assert_fail@plt+0x157f0>
   270f8:	ldr	r1, [r4, #80]	; 0x50
   270fc:	cmp	r1, #2
   27100:	blt	27128 <__assert_fail@plt+0x1547c>
   27104:	ldr	r1, [r4, #8]
   27108:	ldr	r6, [r1, r0, lsl #2]
   2710c:	cmn	r6, #1
   27110:	bne	27158 <__assert_fail@plt+0x154ac>
   27114:	sub	r0, r0, #1
   27118:	cmn	r0, #1
   2711c:	bne	27108 <__assert_fail@plt+0x1545c>
   27120:	ldr	r1, [r4, #60]	; 0x3c
   27124:	b	27180 <__assert_fail@plt+0x154d4>
   27128:	ldr	r1, [r4, #4]
   2712c:	ldr	r2, [r4, #68]	; 0x44
   27130:	ldrb	r0, [r1, r0]
   27134:	ubfx	r1, r0, #5, #3
   27138:	and	r3, r0, #31
   2713c:	ldr	r2, [r2, r1, lsl #2]
   27140:	mov	r1, #1
   27144:	tst	r2, r1, lsl r3
   27148:	moveq	r1, #0
   2714c:	cmpeq	r0, #10
   27150:	bne	27180 <__assert_fail@plt+0x154d4>
   27154:	b	27170 <__assert_fail@plt+0x154c4>
   27158:	ldrb	r0, [r4, #78]	; 0x4e
   2715c:	cmp	r0, #0
   27160:	bne	27734 <__assert_fail@plt+0x15a88>
   27164:	mov	r1, #0
   27168:	cmp	r6, #10
   2716c:	bne	27180 <__assert_fail@plt+0x154d4>
   27170:	ldrb	r0, [r4, #77]	; 0x4d
   27174:	cmp	r0, #0
   27178:	movwne	r0, #1
   2717c:	lsl	r1, r0, #1
   27180:	str	r1, [r4, #60]	; 0x3c
   27184:	ldr	r0, [r4, #80]	; 0x50
   27188:	cmp	r0, #2
   2718c:	blt	271a8 <__assert_fail@plt+0x154fc>
   27190:	ldr	r2, [r4, #28]
   27194:	ldr	r0, [r4, #8]
   27198:	sub	r2, r2, r5
   2719c:	add	r1, r0, r5, lsl #2
   271a0:	lsl	r2, r2, #2
   271a4:	bl	118a4 <memmove@plt>
   271a8:	ldrb	r0, [r4, #75]	; 0x4b
   271ac:	cmp	r0, #0
   271b0:	bne	27484 <__assert_fail@plt+0x157d8>
   271b4:	ldr	r0, [r4, #28]
   271b8:	ldr	r1, [r4, #32]
   271bc:	sub	r0, r0, r5
   271c0:	sub	r1, r1, r5
   271c4:	str	r0, [r4, #28]
   271c8:	str	r1, [r4, #32]
   271cc:	ldrb	r0, [r4, #75]	; 0x4b
   271d0:	cmp	r0, #0
   271d4:	ldreq	r0, [r4, #4]
   271d8:	addeq	r0, r0, r5
   271dc:	streq	r0, [r4, #4]
   271e0:	str	r9, [r4, #24]
   271e4:	ldr	r0, [r4, #48]	; 0x30
   271e8:	ldr	r3, [r4, #80]	; 0x50
   271ec:	ldr	r1, [r4, #56]	; 0x38
   271f0:	sub	r2, r0, r5
   271f4:	cmp	r3, #2
   271f8:	sub	r0, r1, r5
   271fc:	str	r2, [r4, #48]	; 0x30
   27200:	str	r0, [r4, #56]	; 0x38
   27204:	blt	2722c <__assert_fail@plt+0x15580>
   27208:	ldrb	r0, [r4, #72]	; 0x48
   2720c:	cmp	r0, #0
   27210:	beq	27240 <__assert_fail@plt+0x15594>
   27214:	mov	r0, r4
   27218:	bl	20af0 <__assert_fail@plt+0xee44>
   2721c:	cmp	r0, #0
   27220:	beq	27248 <__assert_fail@plt+0x1559c>
   27224:	sub	sp, fp, #28
   27228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2722c:	ldrb	r0, [r4, #75]	; 0x4b
   27230:	cmp	r0, #0
   27234:	bne	274a8 <__assert_fail@plt+0x157fc>
   27238:	str	r2, [r4, #28]
   2723c:	b	27248 <__assert_fail@plt+0x1559c>
   27240:	mov	r0, r4
   27244:	bl	213f0 <__assert_fail@plt+0xf744>
   27248:	mov	r0, #0
   2724c:	str	r0, [r4, #40]	; 0x28
   27250:	sub	sp, fp, #28
   27254:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27258:	sub	r5, r9, r0
   2725c:	cmp	r5, #0
   27260:	bne	270c8 <__assert_fail@plt+0x1541c>
   27264:	b	271e0 <__assert_fail@plt+0x15534>
   27268:	ldrb	r2, [r4, #76]	; 0x4c
   2726c:	ldr	lr, [r4, #28]
   27270:	cmp	r2, #0
   27274:	bne	278f4 <__assert_fail@plt+0x15c48>
   27278:	mov	r2, #0
   2727c:	str	r2, [r4, #28]
   27280:	ldr	r3, [r4, #80]	; 0x50
   27284:	cmp	r3, #2
   27288:	blt	27518 <__assert_fail@plt+0x1586c>
   2728c:	ldrb	r2, [r4, #73]	; 0x49
   27290:	cmp	r2, #0
   27294:	beq	27350 <__assert_fail@plt+0x156a4>
   27298:	ldr	r7, [r4]
   2729c:	sub	r3, r5, r3
   272a0:	add	ip, r7, r0
   272a4:	add	r3, ip, r3
   272a8:	add	r8, ip, r5
   272ac:	cmp	r3, r7
   272b0:	movcc	r3, r7
   272b4:	mov	r7, r8
   272b8:	sub	r7, r7, #1
   272bc:	cmp	r7, r3
   272c0:	bcc	27350 <__assert_fail@plt+0x156a4>
   272c4:	ldrb	r2, [r7]
   272c8:	and	r2, r2, #192	; 0xc0
   272cc:	cmp	r2, #128	; 0x80
   272d0:	beq	272b8 <__assert_fail@plt+0x1560c>
   272d4:	ldr	r0, [r4, #48]	; 0x30
   272d8:	mov	sl, lr
   272dc:	mov	r1, r7
   272e0:	add	r0, ip, r0
   272e4:	sub	r2, r0, r7
   272e8:	ldr	r0, [r4, #64]	; 0x40
   272ec:	cmp	r0, #0
   272f0:	bne	279cc <__assert_fail@plt+0x15d20>
   272f4:	mov	r0, #0
   272f8:	add	r3, sp, #24
   272fc:	str	r0, [sp, #28]
   27300:	str	r0, [sp, #24]
   27304:	add	r0, sp, #20
   27308:	bl	1b5e8 <__assert_fail@plt+0x993c>
   2730c:	sub	r1, r8, r7
   27310:	mvn	r7, #0
   27314:	cmp	r0, r1
   27318:	bcc	2733c <__assert_fail@plt+0x15690>
   2731c:	cmn	r0, #3
   27320:	bhi	2733c <__assert_fail@plt+0x15690>
   27324:	mov	r2, #0
   27328:	sub	r0, r0, r1
   2732c:	str	r2, [r4, #16]
   27330:	str	r2, [r4, #20]
   27334:	str	r0, [r4, #28]
   27338:	ldr	r7, [sp, #20]
   2733c:	cmn	r7, #1
   27340:	bne	27774 <__assert_fail@plt+0x15ac8>
   27344:	ldr	r0, [r4, #24]
   27348:	ldr	r1, [r4, #32]
   2734c:	mov	lr, sl
   27350:	add	r8, r1, r0
   27354:	cmp	r8, r9
   27358:	bge	27754 <__assert_fail@plt+0x15aa8>
   2735c:	add	sl, r4, #16
   27360:	str	lr, [sp]
   27364:	ldr	r0, [r4]
   27368:	ldr	r2, [r4, #44]	; 0x2c
   2736c:	mov	r3, sl
   27370:	add	r1, r0, r8
   27374:	ldr	r0, [sl]
   27378:	sub	r7, r2, r8
   2737c:	mov	r2, r7
   27380:	str	r0, [sp, #8]
   27384:	ldr	r0, [sl, #4]
   27388:	str	r0, [sp, #4]
   2738c:	add	r0, sp, #24
   27390:	bl	1b5e8 <__assert_fail@plt+0x993c>
   27394:	sub	r1, r0, #1
   27398:	cmn	r1, #3
   2739c:	bcs	273b4 <__assert_fail@plt+0x15708>
   273a0:	ldr	r7, [sp, #24]
   273a4:	add	r8, r0, r8
   273a8:	cmp	r8, r9
   273ac:	blt	27364 <__assert_fail@plt+0x156b8>
   273b0:	b	27760 <__assert_fail@plt+0x15ab4>
   273b4:	ldr	r3, [sp, #4]
   273b8:	ldr	r2, [sp, #8]
   273bc:	cmp	r7, #0
   273c0:	mov	r1, #0
   273c4:	cmpne	r0, #0
   273c8:	beq	273d4 <__assert_fail@plt+0x15728>
   273cc:	ldr	r0, [r4]
   273d0:	ldrb	r1, [r0, r8]
   273d4:	stm	sl, {r2, r3}
   273d8:	mov	r0, #1
   273dc:	mov	r7, r1
   273e0:	b	273a4 <__assert_fail@plt+0x156f8>
   273e4:	ldr	ip, [r4, #12]
   273e8:	ldr	r0, [r4, #28]
   273ec:	mov	r2, #0
   273f0:	b	27400 <__assert_fail@plt+0x15754>
   273f4:	cmp	r2, r3
   273f8:	mov	r0, r3
   273fc:	bge	2742c <__assert_fail@plt+0x15780>
   27400:	add	r1, r2, r0
   27404:	add	r1, r1, r1, lsr #31
   27408:	asr	r1, r1, #1
   2740c:	ldr	r7, [ip, r1, lsl #2]
   27410:	mov	r3, r1
   27414:	cmp	r7, r5
   27418:	bgt	273f4 <__assert_fail@plt+0x15748>
   2741c:	bge	2742c <__assert_fail@plt+0x15780>
   27420:	add	r2, r1, #1
   27424:	mov	r3, r0
   27428:	b	273f4 <__assert_fail@plt+0x15748>
   2742c:	cmp	r7, r5
   27430:	mov	r0, #0
   27434:	movwlt	r0, #1
   27438:	add	r7, r1, r0
   2743c:	cmp	r7, #0
   27440:	ble	2747c <__assert_fail@plt+0x157d0>
   27444:	ldr	r1, [r4, #48]	; 0x30
   27448:	sub	r0, r7, #1
   2744c:	cmp	r1, r0
   27450:	beq	2791c <__assert_fail@plt+0x15c70>
   27454:	ldr	r1, [r4, #80]	; 0x50
   27458:	cmp	r1, #2
   2745c:	blt	27564 <__assert_fail@plt+0x158b8>
   27460:	ldr	r1, [r4, #8]
   27464:	ldr	r6, [r1, r0, lsl #2]
   27468:	cmn	r6, #1
   2746c:	bne	27594 <__assert_fail@plt+0x158e8>
   27470:	sub	r0, r0, #1
   27474:	cmn	r0, #1
   27478:	bne	27464 <__assert_fail@plt+0x157b8>
   2747c:	ldr	r1, [r4, #60]	; 0x3c
   27480:	b	275bc <__assert_fail@plt+0x15910>
   27484:	ldr	r2, [r4, #28]
   27488:	ldr	r0, [r4, #4]
   2748c:	add	r1, r0, r5
   27490:	sub	r2, r2, r5
   27494:	bl	118a4 <memmove@plt>
   27498:	b	271b4 <__assert_fail@plt+0x15508>
   2749c:	and	r0, r6, #2
   274a0:	eor	r1, r0, #10
   274a4:	b	27180 <__assert_fail@plt+0x154d4>
   274a8:	ldrb	r0, [r4, #72]	; 0x48
   274ac:	cmp	r0, #0
   274b0:	beq	277d8 <__assert_fail@plt+0x15b2c>
   274b4:	ldr	r6, [r4, #36]	; 0x24
   274b8:	ldr	r5, [r4, #28]
   274bc:	cmp	r6, r2
   274c0:	movgt	r6, r2
   274c4:	cmp	r5, r6
   274c8:	bge	27844 <__assert_fail@plt+0x15b98>
   274cc:	bl	11a60 <__ctype_toupper_loc@plt>
   274d0:	ldr	r1, [r4]
   274d4:	ldr	r2, [r4, #64]	; 0x40
   274d8:	add	r1, r1, r9
   274dc:	cmp	r2, #0
   274e0:	ldrb	r1, [r1, r5]
   274e4:	bne	27510 <__assert_fail@plt+0x15864>
   274e8:	ldr	r2, [r0]
   274ec:	ldr	r1, [r2, r1, lsl #2]
   274f0:	ldr	r2, [r4, #4]
   274f4:	strb	r1, [r2, r5]
   274f8:	add	r1, r5, #1
   274fc:	cmp	r1, r6
   27500:	bge	27840 <__assert_fail@plt+0x15b94>
   27504:	ldr	r9, [r4, #24]
   27508:	mov	r5, r1
   2750c:	b	274d0 <__assert_fail@plt+0x15824>
   27510:	ldrb	r1, [r2, r1]
   27514:	b	274e8 <__assert_fail@plt+0x1583c>
   27518:	ldr	r3, [r4]
   2751c:	add	r0, r5, r0
   27520:	ldr	r1, [r4, #64]	; 0x40
   27524:	add	r0, r0, r3
   27528:	cmp	r1, #0
   2752c:	ldrb	r0, [r0, #-1]
   27530:	str	r2, [r4, #32]
   27534:	ldrbne	r0, [r1, r0]
   27538:	ldr	r1, [r4, #68]	; 0x44
   2753c:	ubfx	r2, r0, #5, #3
   27540:	and	r3, r0, #31
   27544:	ldr	r2, [r1, r2, lsl #2]
   27548:	mov	r1, #1
   2754c:	tst	r2, r1, lsl r3
   27550:	moveq	r1, #0
   27554:	cmpeq	r0, #10
   27558:	beq	2789c <__assert_fail@plt+0x15bf0>
   2755c:	str	r1, [r4, #60]	; 0x3c
   27560:	b	271cc <__assert_fail@plt+0x15520>
   27564:	ldr	r1, [r4, #4]
   27568:	ldr	r2, [r4, #68]	; 0x44
   2756c:	ldrb	r0, [r1, r0]
   27570:	ubfx	r1, r0, #5, #3
   27574:	and	r3, r0, #31
   27578:	ldr	r2, [r2, r1, lsl #2]
   2757c:	mov	r1, #1
   27580:	tst	r2, r1, lsl r3
   27584:	moveq	r1, #0
   27588:	cmpeq	r0, #10
   2758c:	bne	275bc <__assert_fail@plt+0x15910>
   27590:	b	275ac <__assert_fail@plt+0x15900>
   27594:	ldrb	r0, [r4, #78]	; 0x4e
   27598:	cmp	r0, #0
   2759c:	bne	2797c <__assert_fail@plt+0x15cd0>
   275a0:	mov	r1, #0
   275a4:	cmp	r6, #10
   275a8:	bne	275bc <__assert_fail@plt+0x15910>
   275ac:	ldrb	r0, [r4, #77]	; 0x4d
   275b0:	cmp	r0, #0
   275b4:	movwne	r0, #1
   275b8:	lsl	r1, r0, #1
   275bc:	str	r1, [r4, #60]	; 0x3c
   275c0:	cmp	r7, r5
   275c4:	ldr	r2, [r4, #28]
   275c8:	bne	27658 <__assert_fail@plt+0x159ac>
   275cc:	cmp	r2, r5
   275d0:	ble	27658 <__assert_fail@plt+0x159ac>
   275d4:	ldr	r0, [r4, #12]
   275d8:	ldr	r0, [r0, r5, lsl #2]
   275dc:	cmp	r0, r5
   275e0:	bne	27658 <__assert_fail@plt+0x159ac>
   275e4:	ldr	r0, [r4, #8]
   275e8:	sub	r2, r2, r5
   275ec:	lsl	r2, r2, #2
   275f0:	add	r1, r0, r5, lsl #2
   275f4:	bl	118a4 <memmove@plt>
   275f8:	ldr	r2, [r4, #28]
   275fc:	ldr	r0, [r4, #4]
   27600:	add	r1, r0, r5
   27604:	sub	r2, r2, r5
   27608:	bl	118a4 <memmove@plt>
   2760c:	ldr	r0, [r4, #28]
   27610:	ldr	r1, [r4, #32]
   27614:	sub	r0, r0, r5
   27618:	sub	r1, r1, r5
   2761c:	cmp	r0, #1
   27620:	str	r0, [r4, #28]
   27624:	str	r1, [r4, #32]
   27628:	blt	271cc <__assert_fail@plt+0x15520>
   2762c:	ldr	r0, [r4, #12]
   27630:	mov	r2, #0
   27634:	add	r1, r0, r5, lsl #2
   27638:	ldr	r3, [r1, r2, lsl #2]
   2763c:	sub	r3, r3, r5
   27640:	str	r3, [r0, r2, lsl #2]
   27644:	add	r2, r2, #1
   27648:	ldr	r3, [r4, #28]
   2764c:	cmp	r2, r3
   27650:	blt	27638 <__assert_fail@plt+0x1598c>
   27654:	b	271cc <__assert_fail@plt+0x15520>
   27658:	mov	r0, #0
   2765c:	strb	r0, [r4, #76]	; 0x4c
   27660:	sub	r0, r5, r9
   27664:	ldr	r1, [r4, #44]	; 0x2c
   27668:	ldr	r3, [r4, #52]	; 0x34
   2766c:	add	r1, r0, r1
   27670:	add	r0, r0, r3
   27674:	str	r1, [r4, #48]	; 0x30
   27678:	sub	r1, r7, #1
   2767c:	str	r0, [r4, #56]	; 0x38
   27680:	add	r0, r1, #1
   27684:	cmp	r0, #1
   27688:	blt	276a0 <__assert_fail@plt+0x159f4>
   2768c:	ldr	r3, [r4, #12]
   27690:	ldr	r3, [r3, r1, lsl #2]
   27694:	sub	r1, r1, #1
   27698:	cmp	r3, r5
   2769c:	beq	27680 <__assert_fail@plt+0x159d4>
   276a0:	cmp	r0, r2
   276a4:	bge	276c8 <__assert_fail@plt+0x15a1c>
   276a8:	ldr	r1, [r4, #8]
   276ac:	ldr	r3, [r1, r0, lsl #2]
   276b0:	cmn	r3, #1
   276b4:	bne	276c8 <__assert_fail@plt+0x15a1c>
   276b8:	add	r0, r0, #1
   276bc:	cmp	r2, r0
   276c0:	bne	276ac <__assert_fail@plt+0x15a00>
   276c4:	b	276d0 <__assert_fail@plt+0x15a24>
   276c8:	cmp	r0, r2
   276cc:	bne	276e0 <__assert_fail@plt+0x15a34>
   276d0:	mov	r0, #0
   276d4:	str	r0, [r4, #28]
   276d8:	str	r0, [r4, #32]
   276dc:	b	271cc <__assert_fail@plt+0x15520>
   276e0:	ldr	r1, [r4, #12]
   276e4:	ldr	r0, [r1, r0, lsl #2]
   276e8:	subs	r2, r0, r5
   276ec:	str	r2, [r4, #28]
   276f0:	beq	27890 <__assert_fail@plt+0x15be4>
   276f4:	cmp	r2, #1
   276f8:	blt	2771c <__assert_fail@plt+0x15a70>
   276fc:	ldr	r0, [r4, #8]
   27700:	mov	r1, #0
   27704:	mvn	r3, #0
   27708:	str	r3, [r0, r1, lsl #2]
   2770c:	add	r1, r1, #1
   27710:	ldr	r2, [r4, #28]
   27714:	cmp	r1, r2
   27718:	blt	27708 <__assert_fail@plt+0x15a5c>
   2771c:	ldr	r0, [r4, #4]
   27720:	mov	r1, #255	; 0xff
   27724:	bl	11b2c <memset@plt>
   27728:	ldr	r0, [r4, #28]
   2772c:	str	r0, [r4, #32]
   27730:	b	271cc <__assert_fail@plt+0x15520>
   27734:	mov	r0, r6
   27738:	bl	11afc <iswalnum@plt>
   2773c:	mov	r1, #1
   27740:	cmp	r6, #95	; 0x5f
   27744:	beq	27180 <__assert_fail@plt+0x154d4>
   27748:	cmp	r0, #0
   2774c:	beq	27164 <__assert_fail@plt+0x154b8>
   27750:	b	27180 <__assert_fail@plt+0x154d4>
   27754:	sub	r0, r8, r9
   27758:	str	r0, [r4, #28]
   2775c:	b	27790 <__assert_fail@plt+0x15ae4>
   27760:	ldr	lr, [sp]
   27764:	sub	r0, r8, r9
   27768:	cmn	r7, #1
   2776c:	str	r0, [r4, #28]
   27770:	beq	27790 <__assert_fail@plt+0x15ae4>
   27774:	ldrb	r0, [r4, #78]	; 0x4e
   27778:	cmp	r0, #0
   2777c:	bne	2799c <__assert_fail@plt+0x15cf0>
   27780:	mov	r1, #0
   27784:	cmp	r7, #10
   27788:	beq	278c8 <__assert_fail@plt+0x15c1c>
   2778c:	b	278d8 <__assert_fail@plt+0x15c2c>
   27790:	cmp	lr, #0
   27794:	ble	277d0 <__assert_fail@plt+0x15b24>
   27798:	ldr	r1, [r4, #48]	; 0x30
   2779c:	sub	r0, lr, #1
   277a0:	cmp	r1, r0
   277a4:	beq	27970 <__assert_fail@plt+0x15cc4>
   277a8:	ldr	r1, [r4, #80]	; 0x50
   277ac:	cmp	r1, #2
   277b0:	blt	27850 <__assert_fail@plt+0x15ba4>
   277b4:	ldr	r1, [r4, #8]
   277b8:	ldr	r6, [r1, r0, lsl #2]
   277bc:	cmn	r6, #1
   277c0:	bne	278b0 <__assert_fail@plt+0x15c04>
   277c4:	sub	r0, r0, #1
   277c8:	cmn	r0, #1
   277cc:	bne	277b8 <__assert_fail@plt+0x15b0c>
   277d0:	ldr	r1, [r4, #60]	; 0x3c
   277d4:	b	278d8 <__assert_fail@plt+0x15c2c>
   277d8:	ldr	r3, [r4, #64]	; 0x40
   277dc:	cmp	r3, #0
   277e0:	beq	27248 <__assert_fail@plt+0x1559c>
   277e4:	ldr	r1, [r4, #36]	; 0x24
   277e8:	ldr	r0, [r4, #28]
   277ec:	cmp	r1, r2
   277f0:	movgt	r1, r2
   277f4:	cmp	r0, r1
   277f8:	bge	27884 <__assert_fail@plt+0x15bd8>
   277fc:	ldr	r7, [r4]
   27800:	add	r2, r0, r9
   27804:	ldr	r6, [r4, #4]
   27808:	ldrb	r2, [r7, r2]
   2780c:	ldrb	r2, [r3, r2]
   27810:	strb	r2, [r6, r0]
   27814:	add	r0, r0, #1
   27818:	cmp	r0, r1
   2781c:	bge	27884 <__assert_fail@plt+0x15bd8>
   27820:	ldr	r7, [r4, #24]
   27824:	ldm	r4, {r2, r3}
   27828:	ldr	r6, [r4, #64]	; 0x40
   2782c:	add	r2, r2, r7
   27830:	ldrb	r2, [r2, r0]
   27834:	ldrb	r2, [r6, r2]
   27838:	strb	r2, [r3, r0]
   2783c:	b	27814 <__assert_fail@plt+0x15b68>
   27840:	add	r5, r5, #1
   27844:	str	r5, [r4, #28]
   27848:	str	r5, [r4, #32]
   2784c:	b	27248 <__assert_fail@plt+0x1559c>
   27850:	ldr	r1, [r4, #4]
   27854:	ldr	r2, [r4, #68]	; 0x44
   27858:	ldrb	r0, [r1, r0]
   2785c:	ubfx	r1, r0, #5, #3
   27860:	and	r3, r0, #31
   27864:	ldr	r2, [r2, r1, lsl #2]
   27868:	mov	r1, #1
   2786c:	tst	r2, r1, lsl r3
   27870:	bne	278d8 <__assert_fail@plt+0x15c2c>
   27874:	mov	r1, #0
   27878:	cmp	r0, #10
   2787c:	beq	278c8 <__assert_fail@plt+0x15c1c>
   27880:	b	278d8 <__assert_fail@plt+0x15c2c>
   27884:	str	r0, [r4, #28]
   27888:	str	r0, [r4, #32]
   2788c:	b	27248 <__assert_fail@plt+0x1559c>
   27890:	mov	r0, #0
   27894:	str	r0, [r4, #32]
   27898:	b	271cc <__assert_fail@plt+0x15520>
   2789c:	ldrb	r0, [r4, #77]	; 0x4d
   278a0:	cmp	r0, #0
   278a4:	movwne	r0, #1
   278a8:	lsl	r1, r0, #1
   278ac:	b	2755c <__assert_fail@plt+0x158b0>
   278b0:	ldrb	r0, [r4, #78]	; 0x4e
   278b4:	cmp	r0, #0
   278b8:	bne	27a08 <__assert_fail@plt+0x15d5c>
   278bc:	mov	r1, #0
   278c0:	cmp	r6, #10
   278c4:	bne	278d8 <__assert_fail@plt+0x15c2c>
   278c8:	ldrb	r0, [r4, #77]	; 0x4d
   278cc:	cmp	r0, #0
   278d0:	movwne	r0, #1
   278d4:	lsl	r1, r0, #1
   278d8:	str	r1, [r4, #60]	; 0x3c
   278dc:	mov	r0, #0
   278e0:	ldr	r2, [r4, #28]
   278e4:	cmp	r2, #0
   278e8:	bne	27928 <__assert_fail@plt+0x15c7c>
   278ec:	str	r0, [r4, #32]
   278f0:	b	271cc <__assert_fail@plt+0x15520>
   278f4:	mov	r2, #0
   278f8:	strb	r2, [r4, #76]	; 0x4c
   278fc:	sub	r2, r5, r9
   27900:	ldr	r3, [r4, #44]	; 0x2c
   27904:	ldr	r7, [r4, #52]	; 0x34
   27908:	add	r3, r2, r3
   2790c:	add	r2, r2, r7
   27910:	str	r3, [r4, #48]	; 0x30
   27914:	str	r2, [r4, #56]	; 0x38
   27918:	b	27278 <__assert_fail@plt+0x155cc>
   2791c:	and	r0, r6, #2
   27920:	eor	r1, r0, #10
   27924:	b	275bc <__assert_fail@plt+0x15910>
   27928:	cmp	r2, #1
   2792c:	blt	27950 <__assert_fail@plt+0x15ca4>
   27930:	ldr	r0, [r4, #8]
   27934:	mov	r1, #0
   27938:	mvn	r3, #0
   2793c:	str	r3, [r0, r1, lsl #2]
   27940:	add	r1, r1, #1
   27944:	ldr	r2, [r4, #28]
   27948:	cmp	r1, r2
   2794c:	blt	2793c <__assert_fail@plt+0x15c90>
   27950:	ldrb	r0, [r4, #75]	; 0x4b
   27954:	cmp	r0, #0
   27958:	beq	279c0 <__assert_fail@plt+0x15d14>
   2795c:	ldr	r0, [r4, #4]
   27960:	mov	r1, #255	; 0xff
   27964:	bl	11b2c <memset@plt>
   27968:	ldr	r0, [r4, #28]
   2796c:	b	278ec <__assert_fail@plt+0x15c40>
   27970:	and	r0, r6, #2
   27974:	eor	r1, r0, #10
   27978:	b	278d8 <__assert_fail@plt+0x15c2c>
   2797c:	mov	r0, r6
   27980:	bl	11afc <iswalnum@plt>
   27984:	mov	r1, #1
   27988:	cmp	r6, #95	; 0x5f
   2798c:	beq	275bc <__assert_fail@plt+0x15910>
   27990:	cmp	r0, #0
   27994:	beq	275a0 <__assert_fail@plt+0x158f4>
   27998:	b	275bc <__assert_fail@plt+0x15910>
   2799c:	mov	r0, r7
   279a0:	bl	11afc <iswalnum@plt>
   279a4:	mov	r1, #1
   279a8:	cmp	r7, #95	; 0x5f
   279ac:	beq	278d8 <__assert_fail@plt+0x15c2c>
   279b0:	cmp	r0, #0
   279b4:	mov	r2, r7
   279b8:	beq	27780 <__assert_fail@plt+0x15ad4>
   279bc:	b	278d8 <__assert_fail@plt+0x15c2c>
   279c0:	mov	r0, r2
   279c4:	str	r2, [r4, #32]
   279c8:	b	271cc <__assert_fail@plt+0x15520>
   279cc:	cmp	r2, #1
   279d0:	blt	27a28 <__assert_fail@plt+0x15d7c>
   279d4:	cmp	r2, #6
   279d8:	mov	r1, r2
   279dc:	movge	r1, #6
   279e0:	sub	ip, r1, #1
   279e4:	add	r1, sp, #14
   279e8:	ldrb	r3, [r7, ip]
   279ec:	cmp	ip, #0
   279f0:	ldrb	r3, [r0, r3]
   279f4:	strb	r3, [r1, ip]
   279f8:	sub	r3, ip, #1
   279fc:	mov	ip, r3
   27a00:	bgt	279e8 <__assert_fail@plt+0x15d3c>
   27a04:	b	272f4 <__assert_fail@plt+0x15648>
   27a08:	mov	r0, r6
   27a0c:	bl	11afc <iswalnum@plt>
   27a10:	mov	r1, #1
   27a14:	cmp	r6, #95	; 0x5f
   27a18:	beq	278d8 <__assert_fail@plt+0x15c2c>
   27a1c:	cmp	r0, #0
   27a20:	beq	278bc <__assert_fail@plt+0x15c10>
   27a24:	b	278d8 <__assert_fail@plt+0x15c2c>
   27a28:	add	r1, sp, #14
   27a2c:	b	272f4 <__assert_fail@plt+0x15648>
   27a30:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   27a34:	add	fp, sp, #24
   27a38:	mov	r8, r0
   27a3c:	ldr	r0, [r0, #124]	; 0x7c
   27a40:	cmp	r0, #1
   27a44:	blt	27ad0 <__assert_fail@plt+0x15e24>
   27a48:	mov	r7, #0
   27a4c:	b	27a68 <__assert_fail@plt+0x15dbc>
   27a50:	mov	r0, r5
   27a54:	bl	1b4e8 <__assert_fail@plt+0x983c>
   27a58:	ldr	r0, [r8, #124]	; 0x7c
   27a5c:	add	r7, r7, #1
   27a60:	cmp	r7, r0
   27a64:	bge	27ad0 <__assert_fail@plt+0x15e24>
   27a68:	ldr	r0, [r8, #132]	; 0x84
   27a6c:	ldr	r5, [r0, r7, lsl #2]
   27a70:	ldr	r0, [r5, #16]
   27a74:	cmp	r0, #1
   27a78:	blt	27aa8 <__assert_fail@plt+0x15dfc>
   27a7c:	mov	r4, #0
   27a80:	ldr	r0, [r5, #20]
   27a84:	ldr	r6, [r0, r4, lsl #2]
   27a88:	ldr	r0, [r6, #16]
   27a8c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   27a90:	mov	r0, r6
   27a94:	bl	1b4e8 <__assert_fail@plt+0x983c>
   27a98:	ldr	r0, [r5, #16]
   27a9c:	add	r4, r4, #1
   27aa0:	cmp	r4, r0
   27aa4:	blt	27a80 <__assert_fail@plt+0x15dd4>
   27aa8:	ldr	r0, [r5, #20]
   27aac:	bl	1b4e8 <__assert_fail@plt+0x983c>
   27ab0:	ldr	r0, [r5, #8]
   27ab4:	cmp	r0, #0
   27ab8:	beq	27a50 <__assert_fail@plt+0x15da4>
   27abc:	ldr	r0, [r0, #8]
   27ac0:	bl	1b4e8 <__assert_fail@plt+0x983c>
   27ac4:	ldr	r0, [r5, #8]
   27ac8:	bl	1b4e8 <__assert_fail@plt+0x983c>
   27acc:	b	27a50 <__assert_fail@plt+0x15da4>
   27ad0:	mov	r0, #0
   27ad4:	str	r0, [r8, #108]	; 0x6c
   27ad8:	str	r0, [r8, #124]	; 0x7c
   27adc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   27ae0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27ae4:	add	fp, sp, #28
   27ae8:	sub	sp, sp, #4
   27aec:	mov	sl, r0
   27af0:	ldr	r0, [r1, #4]
   27af4:	cmp	r0, #1
   27af8:	blt	27bc8 <__assert_fail@plt+0x15f1c>
   27afc:	ldr	r7, [sl, #84]	; 0x54
   27b00:	mov	r8, r2
   27b04:	mov	r5, r1
   27b08:	mov	r4, #0
   27b0c:	b	27b1c <__assert_fail@plt+0x15e70>
   27b10:	add	r4, r4, #1
   27b14:	cmp	r4, r0
   27b18:	bge	27bc8 <__assert_fail@plt+0x15f1c>
   27b1c:	ldr	r1, [r5, #8]
   27b20:	ldr	r6, [r1, r4, lsl #2]
   27b24:	ldr	r1, [r7]
   27b28:	add	r2, r1, r6, lsl #3
   27b2c:	ldrb	r2, [r2, #4]
   27b30:	cmp	r2, #8
   27b34:	bne	27b10 <__assert_fail@plt+0x15e64>
   27b38:	ldr	r1, [r1, r6, lsl #3]
   27b3c:	cmp	r1, #31
   27b40:	bgt	27b10 <__assert_fail@plt+0x15e64>
   27b44:	ldr	r2, [r7, #80]	; 0x50
   27b48:	mov	r3, #1
   27b4c:	tst	r2, r3, lsl r1
   27b50:	beq	27b10 <__assert_fail@plt+0x15e64>
   27b54:	ldr	r0, [sl, #124]	; 0x7c
   27b58:	ldr	r9, [sl, #128]	; 0x80
   27b5c:	cmp	r0, r9
   27b60:	beq	27ba4 <__assert_fail@plt+0x15ef8>
   27b64:	mov	r0, #1
   27b68:	mov	r1, #24
   27b6c:	bl	1b258 <__assert_fail@plt+0x95ac>
   27b70:	ldr	r1, [sl, #124]	; 0x7c
   27b74:	ldr	r2, [sl, #132]	; 0x84
   27b78:	str	r0, [r2, r1, lsl #2]
   27b7c:	ldr	r0, [sl, #132]	; 0x84
   27b80:	ldr	r0, [r0, r1, lsl #2]
   27b84:	cmp	r0, #0
   27b88:	beq	27bd4 <__assert_fail@plt+0x15f28>
   27b8c:	add	r1, r1, #1
   27b90:	str	r6, [r0, #4]
   27b94:	str	r1, [sl, #124]	; 0x7c
   27b98:	str	r8, [r0]
   27b9c:	ldr	r0, [r5, #4]
   27ba0:	b	27b10 <__assert_fail@plt+0x15e64>
   27ba4:	ldr	r0, [sl, #132]	; 0x84
   27ba8:	lsl	r1, r9, #3
   27bac:	bl	1b64c <__assert_fail@plt+0x99a0>
   27bb0:	cmp	r0, #0
   27bb4:	beq	27bd4 <__assert_fail@plt+0x15f28>
   27bb8:	lsl	r1, r9, #1
   27bbc:	str	r1, [sl, #128]	; 0x80
   27bc0:	str	r0, [sl, #132]	; 0x84
   27bc4:	b	27b64 <__assert_fail@plt+0x15eb8>
   27bc8:	mov	r0, #0
   27bcc:	sub	sp, fp, #28
   27bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27bd4:	mov	r0, #12
   27bd8:	sub	sp, fp, #28
   27bdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27be0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27be4:	add	fp, sp, #28
   27be8:	sub	sp, sp, #76	; 0x4c
   27bec:	mov	ip, r0
   27bf0:	ldr	r0, [r1, #4]
   27bf4:	cmp	r0, #1
   27bf8:	blt	28524 <__assert_fail@plt+0x16878>
   27bfc:	ldr	r2, [ip, #84]	; 0x54
   27c00:	ldr	r0, [ip, #40]	; 0x28
   27c04:	mov	r3, #0
   27c08:	str	ip, [sp, #44]	; 0x2c
   27c0c:	str	r1, [sp, #12]
   27c10:	str	r0, [sp, #52]	; 0x34
   27c14:	str	r2, [sp, #24]
   27c18:	b	27c38 <__assert_fail@plt+0x15f8c>
   27c1c:	ldr	r1, [sp, #12]
   27c20:	ldr	r3, [sp, #16]
   27c24:	ldr	r2, [sp, #24]
   27c28:	ldr	r0, [r1, #4]
   27c2c:	add	r3, r3, #1
   27c30:	cmp	r3, r0
   27c34:	bge	28524 <__assert_fail@plt+0x16878>
   27c38:	ldr	r0, [r1, #8]
   27c3c:	str	r3, [sp, #16]
   27c40:	ldr	r3, [r0, r3, lsl #2]
   27c44:	ldr	r0, [r2]
   27c48:	add	r4, r0, r3, lsl #3
   27c4c:	mov	r1, r3
   27c50:	str	r3, [sp, #48]	; 0x30
   27c54:	ldr	r5, [r4, #4]!
   27c58:	uxtb	r0, r5
   27c5c:	cmp	r0, #4
   27c60:	bne	27c1c <__assert_fail@plt+0x15f70>
   27c64:	movw	r0, #65280	; 0xff00
   27c68:	movt	r0, #3
   27c6c:	tst	r5, r0
   27c70:	beq	27d70 <__assert_fail@plt+0x160c4>
   27c74:	ldr	r1, [sp, #52]	; 0x34
   27c78:	cmn	r1, #1
   27c7c:	ble	27cb8 <__assert_fail@plt+0x1600c>
   27c80:	ldr	r0, [ip, #48]	; 0x30
   27c84:	cmp	r0, r1
   27c88:	beq	284e4 <__assert_fail@plt+0x16838>
   27c8c:	ldr	r0, [ip, #80]	; 0x50
   27c90:	cmp	r0, #2
   27c94:	blt	27cc0 <__assert_fail@plt+0x16014>
   27c98:	ldr	r0, [ip, #8]
   27c9c:	ldr	r1, [sp, #52]	; 0x34
   27ca0:	ldr	r6, [r0, r1, lsl #2]
   27ca4:	cmn	r6, #1
   27ca8:	bne	27cfc <__assert_fail@plt+0x16050>
   27cac:	sub	r1, r1, #1
   27cb0:	cmn	r1, #1
   27cb4:	bne	27ca0 <__assert_fail@plt+0x15ff4>
   27cb8:	ldr	r1, [ip, #60]	; 0x3c
   27cbc:	b	27d24 <__assert_fail@plt+0x16078>
   27cc0:	ldr	r0, [ip, #4]
   27cc4:	ldr	r2, [sp, #52]	; 0x34
   27cc8:	ldr	r1, [ip, #68]	; 0x44
   27ccc:	ldrb	r0, [r0, r2]
   27cd0:	ubfx	r2, r0, #5, #3
   27cd4:	and	r7, r0, #31
   27cd8:	ldr	r3, [r1, r2, lsl #2]
   27cdc:	mov	r1, #1
   27ce0:	mov	r2, #0
   27ce4:	tst	r3, r1, lsl r7
   27ce8:	bne	27d3c <__assert_fail@plt+0x16090>
   27cec:	mov	r1, #0
   27cf0:	cmp	r0, #10
   27cf4:	beq	27d14 <__assert_fail@plt+0x16068>
   27cf8:	b	27d24 <__assert_fail@plt+0x16078>
   27cfc:	ldrb	r0, [ip, #78]	; 0x4e
   27d00:	cmp	r0, #0
   27d04:	bne	284f4 <__assert_fail@plt+0x16848>
   27d08:	mov	r1, #0
   27d0c:	cmp	r6, #10
   27d10:	bne	27d24 <__assert_fail@plt+0x16078>
   27d14:	ldrb	r0, [ip, #77]	; 0x4d
   27d18:	cmp	r0, #0
   27d1c:	movwne	r0, #1
   27d20:	lsl	r1, r0, #1
   27d24:	and	r0, r1, #1
   27d28:	tst	r5, #1024	; 0x400
   27d2c:	eor	r2, r0, #1
   27d30:	beq	27d3c <__assert_fail@plt+0x16090>
   27d34:	cmp	r0, #0
   27d38:	beq	27c1c <__assert_fail@plt+0x15f70>
   27d3c:	ldr	r0, [r4]
   27d40:	cmp	r2, #0
   27d44:	bne	27d50 <__assert_fail@plt+0x160a4>
   27d48:	ands	r2, r0, #2048	; 0x800
   27d4c:	bne	27c1c <__assert_fail@plt+0x15f70>
   27d50:	tst	r1, #2
   27d54:	bne	27d60 <__assert_fail@plt+0x160b4>
   27d58:	ands	r2, r0, #8192	; 0x2000
   27d5c:	bne	27c1c <__assert_fail@plt+0x15f70>
   27d60:	tst	r1, #8
   27d64:	bne	27d70 <__assert_fail@plt+0x160c4>
   27d68:	ands	r0, r0, #32768	; 0x8000
   27d6c:	bne	27c1c <__assert_fail@plt+0x15f70>
   27d70:	ldr	r2, [ip, #108]	; 0x6c
   27d74:	ldr	r0, [ip, #84]	; 0x54
   27d78:	ldr	r9, [ip, #4]
   27d7c:	cmp	r2, #1
   27d80:	str	r0, [sp, #36]	; 0x24
   27d84:	str	r2, [sp, #20]
   27d88:	blt	27dd0 <__assert_fail@plt+0x16124>
   27d8c:	ldr	r4, [sp, #52]	; 0x34
   27d90:	ldr	r1, [ip, #116]	; 0x74
   27d94:	mov	r0, #0
   27d98:	mov	r5, #1
   27d9c:	mov	lr, r4
   27da0:	add	r3, r2, r0
   27da4:	add	r3, r3, r3, lsr #31
   27da8:	asr	r7, r3, #1
   27dac:	add	r6, r7, r7, lsl #1
   27db0:	add	r6, r1, r6, lsl #3
   27db4:	ldr	r6, [r6, #4]
   27db8:	cmp	r6, lr
   27dbc:	addlt	r0, r5, r3, asr #1
   27dc0:	movge	r2, r7
   27dc4:	cmp	r0, r2
   27dc8:	blt	27da0 <__assert_fail@plt+0x160f4>
   27dcc:	b	27ddc <__assert_fail@plt+0x16130>
   27dd0:	ldr	r4, [sp, #52]	; 0x34
   27dd4:	mov	r0, #0
   27dd8:	mov	lr, r4
   27ddc:	ldr	r1, [sp, #20]
   27de0:	cmp	r0, r1
   27de4:	bge	27e28 <__assert_fail@plt+0x1617c>
   27de8:	cmn	r0, #1
   27dec:	beq	27e28 <__assert_fail@plt+0x1617c>
   27df0:	ldr	r1, [ip, #116]	; 0x74
   27df4:	add	r0, r0, r0, lsl #1
   27df8:	add	r0, r1, r0, lsl #3
   27dfc:	ldr	r1, [r0, #4]
   27e00:	cmp	r1, lr
   27e04:	bne	27e28 <__assert_fail@plt+0x1617c>
   27e08:	ldr	r1, [r0]
   27e0c:	ldr	r2, [sp, #48]	; 0x30
   27e10:	cmp	r1, r2
   27e14:	beq	28230 <__assert_fail@plt+0x16584>
   27e18:	ldrb	r1, [r0, #20]
   27e1c:	add	r0, r0, #24
   27e20:	cmp	r1, #0
   27e24:	bne	27e08 <__assert_fail@plt+0x1615c>
   27e28:	ldr	r0, [ip, #124]	; 0x7c
   27e2c:	cmp	r0, #1
   27e30:	ldr	r0, [sp, #20]
   27e34:	blt	28234 <__assert_fail@plt+0x16588>
   27e38:	ldr	r0, [sp, #36]	; 0x24
   27e3c:	ldr	r1, [sp, #48]	; 0x30
   27e40:	mov	r3, #0
   27e44:	ldr	r0, [r0]
   27e48:	ldr	r2, [r0, r1, lsl #3]
   27e4c:	str	r2, [sp, #32]
   27e50:	ldr	r1, [ip, #132]	; 0x84
   27e54:	str	r3, [sp, #28]
   27e58:	ldr	r6, [r1, r3, lsl #2]
   27e5c:	ldr	r1, [r6, #4]
   27e60:	ldr	r0, [r0, r1, lsl #3]
   27e64:	cmp	r0, r2
   27e68:	bne	28204 <__assert_fail@plt+0x16558>
   27e6c:	ldr	r0, [r6, #16]
   27e70:	ldr	r1, [r6]
   27e74:	mov	r8, #0
   27e78:	mov	r7, lr
   27e7c:	str	r6, [sp, #40]	; 0x28
   27e80:	cmp	r0, #1
   27e84:	blt	27fbc <__assert_fail@plt+0x16310>
   27e88:	mov	r5, r1
   27e8c:	ldr	r1, [r6, #20]
   27e90:	ldr	r4, [r1, r8, lsl #2]
   27e94:	ldr	r1, [r4, #4]
   27e98:	sub	sl, r1, r5
   27e9c:	str	r1, [fp, #-48]	; 0xffffffd0
   27ea0:	cmp	sl, #1
   27ea4:	blt	27ed8 <__assert_fail@plt+0x1622c>
   27ea8:	ldr	r1, [ip, #28]
   27eac:	add	r3, sl, r7
   27eb0:	cmp	r3, r1
   27eb4:	bgt	27f2c <__assert_fail@plt+0x16280>
   27eb8:	add	r0, r9, r7
   27ebc:	add	r1, r9, r5
   27ec0:	mov	r2, sl
   27ec4:	bl	11aa8 <bcmp@plt>
   27ec8:	ldr	ip, [sp, #44]	; 0x2c
   27ecc:	ldr	lr, [sp, #52]	; 0x34
   27ed0:	cmp	r0, #0
   27ed4:	bne	27fb4 <__assert_fail@plt+0x16308>
   27ed8:	ldr	r3, [sp, #48]	; 0x30
   27edc:	mov	r2, r4
   27ee0:	mov	r0, ip
   27ee4:	mov	r1, r6
   27ee8:	str	lr, [sp]
   27eec:	mov	r4, ip
   27ef0:	bl	28bf4 <__assert_fail@plt+0x16f48>
   27ef4:	cmp	r0, #1
   27ef8:	bhi	28538 <__assert_fail@plt+0x1688c>
   27efc:	ldr	r1, [fp, #-48]	; 0xffffffd0
   27f00:	ldr	r0, [r6, #16]
   27f04:	ldr	r9, [r4, #4]
   27f08:	mov	ip, r4
   27f0c:	ldr	r4, [sp, #52]	; 0x34
   27f10:	add	r8, r8, #1
   27f14:	add	r7, sl, r7
   27f18:	cmp	r8, r0
   27f1c:	mov	r5, r1
   27f20:	mov	lr, r4
   27f24:	blt	27e8c <__assert_fail@plt+0x161e0>
   27f28:	b	27fbc <__assert_fail@plt+0x16310>
   27f2c:	ldr	r2, [ip, #48]	; 0x30
   27f30:	cmp	r3, r2
   27f34:	bgt	281f8 <__assert_fail@plt+0x1654c>
   27f38:	ldr	r0, [ip, #36]	; 0x24
   27f3c:	ldr	r6, [ip, #104]	; 0x68
   27f40:	cmp	r0, r3
   27f44:	cmple	r0, r2
   27f48:	blt	27f58 <__assert_fail@plt+0x162ac>
   27f4c:	cmp	r1, r3
   27f50:	cmple	r1, r2
   27f54:	bge	27f78 <__assert_fail@plt+0x162cc>
   27f58:	add	r1, r3, #1
   27f5c:	mov	r0, ip
   27f60:	mov	r9, r3
   27f64:	bl	28560 <__assert_fail@plt+0x168b4>
   27f68:	ldr	ip, [sp, #44]	; 0x2c
   27f6c:	mov	r3, r9
   27f70:	cmp	r0, #0
   27f74:	bne	28538 <__assert_fail@plt+0x1688c>
   27f78:	cmp	r3, r6
   27f7c:	ble	27fa8 <__assert_fail@plt+0x162fc>
   27f80:	sub	r0, r3, r6
   27f84:	mov	r1, #0
   27f88:	lsl	r2, r0, #2
   27f8c:	ldr	r0, [ip, #100]	; 0x64
   27f90:	add	r0, r0, r6, lsl #2
   27f94:	mov	r6, r3
   27f98:	add	r0, r0, #4
   27f9c:	bl	11b2c <memset@plt>
   27fa0:	ldr	ip, [sp, #44]	; 0x2c
   27fa4:	str	r6, [ip, #104]	; 0x68
   27fa8:	ldr	r9, [ip, #4]
   27fac:	ldr	r6, [sp, #40]	; 0x28
   27fb0:	b	27eb8 <__assert_fail@plt+0x1620c>
   27fb4:	ldr	r0, [r6, #16]
   27fb8:	mov	r1, r5
   27fbc:	cmp	r8, r0
   27fc0:	blt	28204 <__assert_fail@plt+0x16558>
   27fc4:	cmp	r8, #0
   27fc8:	addne	r1, r1, #1
   27fcc:	cmp	r1, lr
   27fd0:	ble	27fec <__assert_fail@plt+0x16340>
   27fd4:	b	28204 <__assert_fail@plt+0x16558>
   27fd8:	ldr	r6, [sp, #40]	; 0x28
   27fdc:	add	r1, sl, #1
   27fe0:	cmp	sl, lr
   27fe4:	mov	r9, r8
   27fe8:	bge	28204 <__assert_fail@plt+0x16558>
   27fec:	ldr	r0, [r6]
   27ff0:	mov	sl, r1
   27ff4:	cmp	r1, r0
   27ff8:	ble	28024 <__assert_fail@plt+0x16378>
   27ffc:	ldr	r0, [ip, #28]
   28000:	cmp	r7, r0
   28004:	bge	28188 <__assert_fail@plt+0x164dc>
   28008:	add	r5, r7, #1
   2800c:	add	r1, sl, r9
   28010:	ldrb	r0, [r9, r7]
   28014:	ldrb	r1, [r1, #-1]
   28018:	cmp	r0, r1
   2801c:	beq	28028 <__assert_fail@plt+0x1637c>
   28020:	b	28204 <__assert_fail@plt+0x16558>
   28024:	mov	r5, r7
   28028:	ldr	r0, [ip, #100]	; 0x64
   2802c:	mov	r8, r9
   28030:	mov	r7, r5
   28034:	ldr	r2, [r0, sl, lsl #2]
   28038:	cmp	r2, #0
   2803c:	beq	27fd8 <__assert_fail@plt+0x1632c>
   28040:	ldr	r0, [r2, #8]
   28044:	cmp	r0, #1
   28048:	blt	27fd8 <__assert_fail@plt+0x1632c>
   2804c:	ldr	r1, [sp, #36]	; 0x24
   28050:	ldr	r2, [r2, #12]
   28054:	ldr	r4, [sp, #32]
   28058:	ldr	r1, [r1]
   2805c:	b	2806c <__assert_fail@plt+0x163c0>
   28060:	add	r2, r2, #4
   28064:	subs	r0, r0, #1
   28068:	beq	27fd8 <__assert_fail@plt+0x1632c>
   2806c:	ldr	r5, [r2]
   28070:	add	r3, r1, r5, lsl #3
   28074:	ldrb	r3, [r3, #4]
   28078:	cmp	r3, #9
   2807c:	bne	28060 <__assert_fail@plt+0x163b4>
   28080:	ldr	r3, [r1, r5, lsl #3]
   28084:	cmp	r3, r4
   28088:	bne	28060 <__assert_fail@plt+0x163b4>
   2808c:	cmn	r5, #1
   28090:	beq	27fd8 <__assert_fail@plt+0x1632c>
   28094:	ldr	r1, [r6, #8]
   28098:	mov	r4, lr
   2809c:	str	r7, [fp, #-48]	; 0xffffffd0
   280a0:	cmp	r1, #0
   280a4:	bne	280d4 <__assert_fail@plt+0x16428>
   280a8:	ldr	r0, [r6]
   280ac:	mov	r9, #12
   280b0:	sub	r0, sl, r0
   280b4:	add	r1, r0, #1
   280b8:	mov	r0, #12
   280bc:	bl	1b258 <__assert_fail@plt+0x95ac>
   280c0:	ldr	ip, [sp, #44]	; 0x2c
   280c4:	mov	r1, r0
   280c8:	cmp	r0, #0
   280cc:	str	r0, [r6, #8]
   280d0:	beq	28528 <__assert_fail@plt+0x1687c>
   280d4:	ldr	r3, [r6]
   280d8:	ldr	r2, [r6, #4]
   280dc:	mov	r0, #9
   280e0:	stm	sp, {r5, sl}
   280e4:	str	r0, [sp, #8]
   280e8:	mov	r0, ip
   280ec:	bl	28dbc <__assert_fail@plt+0x17110>
   280f0:	ldr	ip, [sp, #44]	; 0x2c
   280f4:	ldr	r7, [fp, #-48]	; 0xffffffd0
   280f8:	cmp	r0, #1
   280fc:	mov	lr, r4
   28100:	beq	27fd8 <__assert_fail@plt+0x1632c>
   28104:	mov	r9, r0
   28108:	cmp	r0, #0
   2810c:	bne	28528 <__assert_fail@plt+0x1687c>
   28110:	ldr	r7, [sp, #40]	; 0x28
   28114:	ldr	r1, [r7, #12]
   28118:	ldr	r0, [r7, #16]
   2811c:	cmp	r0, r1
   28120:	beq	281d0 <__assert_fail@plt+0x16524>
   28124:	mov	r0, #1
   28128:	mov	r1, #20
   2812c:	bl	1b258 <__assert_fail@plt+0x95ac>
   28130:	cmp	r0, #0
   28134:	beq	28550 <__assert_fail@plt+0x168a4>
   28138:	mov	r2, r0
   2813c:	ldr	r0, [r7, #16]
   28140:	ldr	r1, [r7, #20]
   28144:	ldr	r3, [sp, #48]	; 0x30
   28148:	str	r2, [r1, r0, lsl #2]
   2814c:	stm	r2, {r5, sl}
   28150:	ldr	r5, [sp, #44]	; 0x2c
   28154:	add	r0, r0, #1
   28158:	mov	r1, r7
   2815c:	str	r0, [r7, #16]
   28160:	str	r4, [sp]
   28164:	mov	r0, r5
   28168:	bl	28bf4 <__assert_fail@plt+0x16f48>
   2816c:	cmp	r0, #1
   28170:	bhi	28538 <__assert_fail@plt+0x1688c>
   28174:	ldr	r8, [r5, #4]
   28178:	ldr	r7, [fp, #-48]	; 0xffffffd0
   2817c:	mov	ip, r5
   28180:	mov	lr, r4
   28184:	b	27fd8 <__assert_fail@plt+0x1632c>
   28188:	ldr	r0, [ip, #48]	; 0x30
   2818c:	cmp	r7, r0
   28190:	bge	28204 <__assert_fail@plt+0x16558>
   28194:	add	r5, r7, #1
   28198:	mov	r0, ip
   2819c:	mov	r8, r7
   281a0:	mov	r4, ip
   281a4:	mov	r1, r5
   281a8:	bl	28560 <__assert_fail@plt+0x168b4>
   281ac:	cmp	r0, #0
   281b0:	bne	28538 <__assert_fail@plt+0x1688c>
   281b4:	ldr	r9, [r4, #4]
   281b8:	mov	ip, r4
   281bc:	ldr	r4, [sp, #52]	; 0x34
   281c0:	ldr	r6, [sp, #40]	; 0x28
   281c4:	mov	r7, r8
   281c8:	mov	lr, r4
   281cc:	b	2800c <__assert_fail@plt+0x16360>
   281d0:	mov	r1, #1
   281d4:	orr	r6, r1, r0, lsl #1
   281d8:	ldr	r0, [r7, #20]
   281dc:	lsl	r1, r6, #2
   281e0:	bl	1b64c <__assert_fail@plt+0x99a0>
   281e4:	cmp	r0, #0
   281e8:	beq	28550 <__assert_fail@plt+0x168a4>
   281ec:	str	r6, [r7, #12]
   281f0:	str	r0, [r7, #20]
   281f4:	b	28124 <__assert_fail@plt+0x16478>
   281f8:	mov	r1, r5
   281fc:	cmp	r8, r0
   28200:	bge	27fc4 <__assert_fail@plt+0x16318>
   28204:	ldr	r3, [sp, #28]
   28208:	ldr	r0, [ip, #124]	; 0x7c
   2820c:	add	r3, r3, #1
   28210:	cmp	r3, r0
   28214:	bge	28228 <__assert_fail@plt+0x1657c>
   28218:	ldr	r0, [sp, #36]	; 0x24
   2821c:	ldr	r2, [sp, #32]
   28220:	ldr	r0, [r0]
   28224:	b	27e50 <__assert_fail@plt+0x161a4>
   28228:	ldr	r0, [ip, #108]	; 0x6c
   2822c:	b	28234 <__assert_fail@plt+0x16588>
   28230:	ldr	r0, [sp, #20]
   28234:	ldr	r7, [sp, #20]
   28238:	mov	r1, #0
   2823c:	str	r1, [fp, #-32]	; 0xffffffe0
   28240:	cmp	r7, r0
   28244:	blt	2825c <__assert_fail@plt+0x165b0>
   28248:	b	27c1c <__assert_fail@plt+0x15f70>
   2824c:	ldr	r0, [ip, #108]	; 0x6c
   28250:	add	r7, r7, #1
   28254:	cmp	r7, r0
   28258:	bge	27c1c <__assert_fail@plt+0x15f70>
   2825c:	ldr	r0, [ip, #116]	; 0x74
   28260:	add	r1, r7, r7, lsl #1
   28264:	ldr	r3, [sp, #48]	; 0x30
   28268:	ldr	r2, [r0, r1, lsl #3]
   2826c:	cmp	r2, r3
   28270:	bne	2824c <__assert_fail@plt+0x165a0>
   28274:	add	r0, r0, r1, lsl #3
   28278:	ldr	r2, [sp, #52]	; 0x34
   2827c:	ldr	r1, [r0, #4]
   28280:	cmp	r1, r2
   28284:	bne	2824c <__assert_fail@plt+0x165a0>
   28288:	str	r7, [sp, #20]
   2828c:	ldr	r4, [r0, #8]
   28290:	ldr	r7, [r0, #12]
   28294:	ldr	r0, [sp, #24]
   28298:	ldr	r8, [r0, #24]
   2829c:	cmp	r7, r4
   282a0:	bne	282bc <__assert_fail@plt+0x16610>
   282a4:	ldr	r1, [sp, #48]	; 0x30
   282a8:	ldr	r0, [r0, #20]
   282ac:	add	r1, r1, r1, lsl #1
   282b0:	add	r0, r0, r1, lsl #2
   282b4:	ldr	r0, [r0, #8]
   282b8:	b	282c8 <__assert_fail@plt+0x1661c>
   282bc:	ldr	r0, [r0, #12]
   282c0:	ldr	r1, [sp, #48]	; 0x30
   282c4:	add	r0, r0, r1, lsl #2
   282c8:	ldr	r9, [r0]
   282cc:	ldr	r0, [sp, #52]	; 0x34
   282d0:	add	r0, r7, r0
   282d4:	sub	r5, r0, r4
   282d8:	cmp	r5, #0
   282dc:	ble	28318 <__assert_fail@plt+0x1666c>
   282e0:	ldr	r1, [ip, #48]	; 0x30
   282e4:	sub	r0, r5, #1
   282e8:	cmp	r1, r0
   282ec:	beq	284a8 <__assert_fail@plt+0x167fc>
   282f0:	ldr	r1, [ip, #80]	; 0x50
   282f4:	cmp	r1, #2
   282f8:	blt	28320 <__assert_fail@plt+0x16674>
   282fc:	ldr	r1, [ip, #8]
   28300:	ldr	r6, [r1, r0, lsl #2]
   28304:	cmn	r6, #1
   28308:	bne	28350 <__assert_fail@plt+0x166a4>
   2830c:	sub	r0, r0, #1
   28310:	cmn	r0, #1
   28314:	bne	28300 <__assert_fail@plt+0x16654>
   28318:	ldr	sl, [ip, #60]	; 0x3c
   2831c:	b	28378 <__assert_fail@plt+0x166cc>
   28320:	ldr	r1, [ip, #4]
   28324:	ldr	r2, [ip, #68]	; 0x44
   28328:	mov	sl, #1
   2832c:	ldrb	r0, [r1, r0]
   28330:	ubfx	r1, r0, #5, #3
   28334:	ldr	r1, [r2, r1, lsl #2]
   28338:	and	r2, r0, #31
   2833c:	tst	r1, sl, lsl r2
   28340:	moveq	sl, #0
   28344:	cmpeq	r0, #10
   28348:	bne	28378 <__assert_fail@plt+0x166cc>
   2834c:	b	28368 <__assert_fail@plt+0x166bc>
   28350:	ldrb	r0, [ip, #78]	; 0x4e
   28354:	cmp	r0, #0
   28358:	bne	284b8 <__assert_fail@plt+0x1680c>
   2835c:	mov	sl, #0
   28360:	cmp	r6, #10
   28364:	bne	28378 <__assert_fail@plt+0x166cc>
   28368:	ldrb	r0, [ip, #77]	; 0x4d
   2836c:	cmp	r0, #0
   28370:	movwne	r0, #1
   28374:	lsl	sl, r0, #1
   28378:	ldr	r0, [ip, #100]	; 0x64
   2837c:	ldr	r2, [sp, #52]	; 0x34
   28380:	add	r1, r9, r9, lsl #1
   28384:	ldr	r2, [r0, r2, lsl #2]
   28388:	ldr	r0, [r0, r5, lsl #2]
   2838c:	cmp	r2, #0
   28390:	beq	2839c <__assert_fail@plt+0x166f0>
   28394:	ldr	r2, [r2, #8]
   28398:	b	283a0 <__assert_fail@plt+0x166f4>
   2839c:	mov	r2, #0
   283a0:	add	r8, r8, r1, lsl #2
   283a4:	sub	r6, fp, #44	; 0x2c
   283a8:	cmp	r0, #0
   283ac:	str	r2, [fp, #-48]	; 0xffffffd0
   283b0:	beq	28404 <__assert_fail@plt+0x16758>
   283b4:	ldr	r1, [r0, #40]	; 0x28
   283b8:	mov	r0, r6
   283bc:	mov	r2, r8
   283c0:	bl	2896c <__assert_fail@plt+0x16cc0>
   283c4:	cmp	r0, #0
   283c8:	str	r0, [fp, #-32]	; 0xffffffe0
   283cc:	bne	28540 <__assert_fail@plt+0x16894>
   283d0:	ldr	r1, [sp, #24]
   283d4:	sub	r0, fp, #32
   283d8:	mov	r2, r6
   283dc:	mov	r3, sl
   283e0:	bl	26a48 <__assert_fail@plt+0x14d9c>
   283e4:	ldr	r6, [sp, #44]	; 0x2c
   283e8:	ldr	r1, [r6, #100]	; 0x64
   283ec:	str	r0, [r1, r5, lsl #2]
   283f0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   283f4:	bl	1b4e8 <__assert_fail@plt+0x983c>
   283f8:	ldr	r0, [r6, #100]	; 0x64
   283fc:	mov	ip, r6
   28400:	b	28428 <__assert_fail@plt+0x1677c>
   28404:	ldr	r1, [sp, #24]
   28408:	sub	r0, fp, #32
   2840c:	mov	r2, r8
   28410:	mov	r3, sl
   28414:	bl	26a48 <__assert_fail@plt+0x14d9c>
   28418:	ldr	ip, [sp, #44]	; 0x2c
   2841c:	ldr	r1, [ip, #100]	; 0x64
   28420:	str	r0, [r1, r5, lsl #2]
   28424:	ldr	r0, [ip, #100]	; 0x64
   28428:	ldr	r1, [r0, r5, lsl #2]
   2842c:	cmp	r1, #0
   28430:	bne	28440 <__assert_fail@plt+0x16794>
   28434:	ldr	r9, [fp, #-32]	; 0xffffffe0
   28438:	cmp	r9, #0
   2843c:	bne	2852c <__assert_fail@plt+0x16880>
   28440:	cmp	r7, r4
   28444:	ldr	r7, [sp, #20]
   28448:	bne	2824c <__assert_fail@plt+0x165a0>
   2844c:	ldr	r1, [sp, #52]	; 0x34
   28450:	ldr	r0, [r0, r1, lsl #2]
   28454:	ldr	r1, [fp, #-48]	; 0xffffffd0
   28458:	ldr	r0, [r0, #8]
   2845c:	cmp	r0, r1
   28460:	ble	2824c <__assert_fail@plt+0x165a0>
   28464:	ldr	r2, [sp, #52]	; 0x34
   28468:	mov	r0, ip
   2846c:	mov	r1, r8
   28470:	mov	r4, ip
   28474:	bl	27ae0 <__assert_fail@plt+0x15e34>
   28478:	cmp	r0, #0
   2847c:	str	r0, [fp, #-32]	; 0xffffffe0
   28480:	bne	28558 <__assert_fail@plt+0x168ac>
   28484:	mov	r0, r4
   28488:	mov	r1, r8
   2848c:	bl	27be0 <__assert_fail@plt+0x15f34>
   28490:	ldr	r7, [sp, #20]
   28494:	cmp	r0, #0
   28498:	mov	ip, r4
   2849c:	str	r0, [fp, #-32]	; 0xffffffe0
   284a0:	beq	2824c <__assert_fail@plt+0x165a0>
   284a4:	b	28558 <__assert_fail@plt+0x168ac>
   284a8:	ldr	r0, [ip, #88]	; 0x58
   284ac:	and	r0, r0, #2
   284b0:	eor	sl, r0, #10
   284b4:	b	28378 <__assert_fail@plt+0x166cc>
   284b8:	mov	r0, r6
   284bc:	bl	11afc <iswalnum@plt>
   284c0:	mov	sl, #1
   284c4:	cmp	r6, #95	; 0x5f
   284c8:	beq	284dc <__assert_fail@plt+0x16830>
   284cc:	ldr	ip, [sp, #44]	; 0x2c
   284d0:	cmp	r0, #0
   284d4:	beq	2835c <__assert_fail@plt+0x166b0>
   284d8:	b	28378 <__assert_fail@plt+0x166cc>
   284dc:	ldr	ip, [sp, #44]	; 0x2c
   284e0:	b	28378 <__assert_fail@plt+0x166cc>
   284e4:	ldr	r0, [ip, #88]	; 0x58
   284e8:	and	r0, r0, #2
   284ec:	eor	r1, r0, #10
   284f0:	b	27d24 <__assert_fail@plt+0x16078>
   284f4:	mov	r0, r6
   284f8:	bl	11afc <iswalnum@plt>
   284fc:	mov	r1, #1
   28500:	mov	r2, #0
   28504:	cmp	r6, #95	; 0x5f
   28508:	beq	2851c <__assert_fail@plt+0x16870>
   2850c:	ldr	ip, [sp, #44]	; 0x2c
   28510:	cmp	r0, #0
   28514:	beq	27d08 <__assert_fail@plt+0x1605c>
   28518:	b	27d3c <__assert_fail@plt+0x16090>
   2851c:	ldr	ip, [sp, #44]	; 0x2c
   28520:	b	27d3c <__assert_fail@plt+0x16090>
   28524:	mov	r9, #0
   28528:	str	r9, [fp, #-32]	; 0xffffffe0
   2852c:	mov	r0, r9
   28530:	sub	sp, fp, #28
   28534:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28538:	mov	r9, r0
   2853c:	b	28528 <__assert_fail@plt+0x1687c>
   28540:	mov	r9, r0
   28544:	ldr	r0, [fp, #-36]	; 0xffffffdc
   28548:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2854c:	b	2852c <__assert_fail@plt+0x16880>
   28550:	mov	r9, #12
   28554:	b	28528 <__assert_fail@plt+0x1687c>
   28558:	mov	r9, r0
   2855c:	b	2852c <__assert_fail@plt+0x16880>
   28560:	push	{r4, r5, r6, r7, fp, lr}
   28564:	add	fp, sp, #16
   28568:	mov	r4, r0
   2856c:	ldr	r0, [r0, #36]	; 0x24
   28570:	mov	r5, #12
   28574:	cmn	r0, #-536870910	; 0xe0000002
   28578:	bhi	28754 <__assert_fail@plt+0x16aa8>
   2857c:	ldr	r6, [r4, #48]	; 0x30
   28580:	ldr	r2, [r4, #80]	; 0x50
   28584:	cmp	r6, r0, lsl #1
   28588:	lslge	r6, r0, #1
   2858c:	cmp	r6, r1
   28590:	movle	r6, r1
   28594:	cmp	r2, #2
   28598:	blt	285e0 <__assert_fail@plt+0x16934>
   2859c:	cmn	r6, #-1073741823	; 0xc0000001
   285a0:	bhi	28754 <__assert_fail@plt+0x16aa8>
   285a4:	ldr	r0, [r4, #8]
   285a8:	lsl	r7, r6, #2
   285ac:	mov	r1, r7
   285b0:	bl	1b64c <__assert_fail@plt+0x99a0>
   285b4:	cmp	r0, #0
   285b8:	beq	28754 <__assert_fail@plt+0x16aa8>
   285bc:	str	r0, [r4, #8]
   285c0:	ldr	r0, [r4, #12]
   285c4:	cmp	r0, #0
   285c8:	beq	285e0 <__assert_fail@plt+0x16934>
   285cc:	mov	r1, r7
   285d0:	bl	1b64c <__assert_fail@plt+0x99a0>
   285d4:	cmp	r0, #0
   285d8:	beq	28754 <__assert_fail@plt+0x16aa8>
   285dc:	str	r0, [r4, #12]
   285e0:	ldrb	r0, [r4, #75]	; 0x4b
   285e4:	cmp	r0, #0
   285e8:	beq	28604 <__assert_fail@plt+0x16958>
   285ec:	ldr	r0, [r4, #4]
   285f0:	mov	r1, r6
   285f4:	bl	1b64c <__assert_fail@plt+0x99a0>
   285f8:	cmp	r0, #0
   285fc:	beq	28754 <__assert_fail@plt+0x16aa8>
   28600:	str	r0, [r4, #4]
   28604:	str	r6, [r4, #36]	; 0x24
   28608:	ldr	r0, [r4, #100]	; 0x64
   2860c:	cmp	r0, #0
   28610:	beq	2862c <__assert_fail@plt+0x16980>
   28614:	mov	r1, #4
   28618:	add	r1, r1, r6, lsl #2
   2861c:	bl	1b64c <__assert_fail@plt+0x99a0>
   28620:	cmp	r0, #0
   28624:	beq	28754 <__assert_fail@plt+0x16aa8>
   28628:	str	r0, [r4, #100]	; 0x64
   2862c:	ldrb	r1, [r4, #72]	; 0x48
   28630:	ldr	r0, [r4, #80]	; 0x50
   28634:	cmp	r1, #0
   28638:	beq	28658 <__assert_fail@plt+0x169ac>
   2863c:	cmp	r0, #2
   28640:	blt	2866c <__assert_fail@plt+0x169c0>
   28644:	mov	r0, r4
   28648:	bl	20af0 <__assert_fail@plt+0xee44>
   2864c:	cmp	r0, #0
   28650:	beq	28750 <__assert_fail@plt+0x16aa4>
   28654:	pop	{r4, r5, r6, r7, fp, pc}
   28658:	cmp	r0, #2
   2865c:	blt	286dc <__assert_fail@plt+0x16a30>
   28660:	mov	r0, r4
   28664:	bl	213f0 <__assert_fail@plt+0xf744>
   28668:	b	28750 <__assert_fail@plt+0x16aa4>
   2866c:	ldr	r6, [r4, #36]	; 0x24
   28670:	ldr	r0, [r4, #48]	; 0x30
   28674:	ldr	r5, [r4, #28]
   28678:	cmp	r6, r0
   2867c:	movgt	r6, r0
   28680:	cmp	r5, r6
   28684:	bge	286d0 <__assert_fail@plt+0x16a24>
   28688:	bl	11a60 <__ctype_toupper_loc@plt>
   2868c:	ldr	r1, [r4]
   28690:	ldr	r3, [r4, #24]
   28694:	ldr	r2, [r4, #64]	; 0x40
   28698:	add	r1, r1, r3
   2869c:	cmp	r2, #0
   286a0:	ldrb	r1, [r1, r5]
   286a4:	bne	286c8 <__assert_fail@plt+0x16a1c>
   286a8:	ldr	r2, [r0]
   286ac:	ldr	r1, [r2, r1, lsl #2]
   286b0:	ldr	r2, [r4, #4]
   286b4:	strb	r1, [r2, r5]
   286b8:	add	r5, r5, #1
   286bc:	cmp	r5, r6
   286c0:	blt	2868c <__assert_fail@plt+0x169e0>
   286c4:	b	286d0 <__assert_fail@plt+0x16a24>
   286c8:	ldrb	r1, [r2, r1]
   286cc:	b	286a8 <__assert_fail@plt+0x169fc>
   286d0:	str	r5, [r4, #28]
   286d4:	str	r5, [r4, #32]
   286d8:	b	28750 <__assert_fail@plt+0x16aa4>
   286dc:	ldr	r2, [r4, #64]	; 0x40
   286e0:	cmp	r2, #0
   286e4:	beq	28750 <__assert_fail@plt+0x16aa4>
   286e8:	ldr	r1, [r4, #36]	; 0x24
   286ec:	ldr	r3, [r4, #48]	; 0x30
   286f0:	ldr	r0, [r4, #28]
   286f4:	cmp	r1, r3
   286f8:	movgt	r1, r3
   286fc:	cmp	r0, r1
   28700:	bge	28748 <__assert_fail@plt+0x16a9c>
   28704:	ldr	r6, [r4, #24]
   28708:	ldm	r4, {r3, r7}
   2870c:	add	r6, r6, r0
   28710:	ldrb	r3, [r3, r6]
   28714:	ldrb	r2, [r2, r3]
   28718:	strb	r2, [r7, r0]
   2871c:	add	r0, r0, #1
   28720:	cmp	r0, r1
   28724:	bge	28748 <__assert_fail@plt+0x16a9c>
   28728:	ldr	r7, [r4, #24]
   2872c:	ldm	r4, {r2, r3}
   28730:	ldr	r6, [r4, #64]	; 0x40
   28734:	add	r2, r2, r7
   28738:	ldrb	r2, [r2, r0]
   2873c:	ldrb	r2, [r6, r2]
   28740:	strb	r2, [r3, r0]
   28744:	b	2871c <__assert_fail@plt+0x16a70>
   28748:	str	r0, [r4, #28]
   2874c:	str	r0, [r4, #32]
   28750:	mov	r5, #0
   28754:	mov	r0, r5
   28758:	pop	{r4, r5, r6, r7, fp, pc}
   2875c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   28760:	add	fp, sp, #24
   28764:	sub	sp, sp, #16
   28768:	mov	r9, r0
   2876c:	mov	r4, r1
   28770:	ldr	r5, [r1, #40]	; 0x28
   28774:	ldr	r7, [r1, #84]	; 0x54
   28778:	ldr	r0, [r1, #100]	; 0x64
   2877c:	ldr	r1, [r1, #104]	; 0x68
   28780:	mov	r6, r2
   28784:	cmp	r5, r1
   28788:	ble	28798 <__assert_fail@plt+0x16aec>
   2878c:	str	r6, [r0, r5, lsl #2]
   28790:	str	r5, [r4, #104]	; 0x68
   28794:	b	288c8 <__assert_fail@plt+0x16c1c>
   28798:	ldr	r1, [r0, r5, lsl #2]
   2879c:	cmp	r1, #0
   287a0:	beq	287dc <__assert_fail@plt+0x16b30>
   287a4:	ldr	r2, [r1, #40]	; 0x28
   287a8:	cmp	r6, #0
   287ac:	beq	287e4 <__assert_fail@plt+0x16b38>
   287b0:	ldr	r8, [r6, #40]	; 0x28
   287b4:	mov	r0, sp
   287b8:	mov	r1, r8
   287bc:	bl	2896c <__assert_fail@plt+0x16cc0>
   287c0:	cmp	r0, #0
   287c4:	str	r0, [r9]
   287c8:	bne	28934 <__assert_fail@plt+0x16c88>
   287cc:	ldr	r0, [r4, #40]	; 0x28
   287d0:	cmp	r0, #0
   287d4:	bgt	28804 <__assert_fail@plt+0x16b58>
   287d8:	b	2883c <__assert_fail@plt+0x16b90>
   287dc:	str	r6, [r0, r5, lsl #2]
   287e0:	b	288c8 <__assert_fail@plt+0x16c1c>
   287e4:	vldr	d16, [r2]
   287e8:	ldr	r0, [r2, #8]
   287ec:	mov	r8, #0
   287f0:	str	r0, [sp, #8]
   287f4:	mov	r0, r5
   287f8:	vstr	d16, [sp]
   287fc:	cmp	r0, #0
   28800:	ble	2883c <__assert_fail@plt+0x16b90>
   28804:	ldr	r1, [r4, #48]	; 0x30
   28808:	sub	r0, r0, #1
   2880c:	cmp	r1, r0
   28810:	beq	2893c <__assert_fail@plt+0x16c90>
   28814:	ldr	r1, [r4, #80]	; 0x50
   28818:	cmp	r1, #2
   2881c:	blt	28844 <__assert_fail@plt+0x16b98>
   28820:	ldr	r1, [r4, #8]
   28824:	ldr	r6, [r1, r0, lsl #2]
   28828:	cmn	r6, #1
   2882c:	bne	28874 <__assert_fail@plt+0x16bc8>
   28830:	sub	r0, r0, #1
   28834:	cmn	r0, #1
   28838:	bne	28824 <__assert_fail@plt+0x16b78>
   2883c:	ldr	r3, [r4, #60]	; 0x3c
   28840:	b	2889c <__assert_fail@plt+0x16bf0>
   28844:	ldr	r1, [r4, #4]
   28848:	ldr	r2, [r4, #68]	; 0x44
   2884c:	mov	r3, #1
   28850:	ldrb	r0, [r1, r0]
   28854:	ubfx	r1, r0, #5, #3
   28858:	ldr	r1, [r2, r1, lsl #2]
   2885c:	and	r2, r0, #31
   28860:	tst	r1, r3, lsl r2
   28864:	moveq	r3, #0
   28868:	cmpeq	r0, #10
   2886c:	bne	2889c <__assert_fail@plt+0x16bf0>
   28870:	b	2888c <__assert_fail@plt+0x16be0>
   28874:	ldrb	r0, [r4, #78]	; 0x4e
   28878:	cmp	r0, #0
   2887c:	bne	2894c <__assert_fail@plt+0x16ca0>
   28880:	mov	r3, #0
   28884:	cmp	r6, #10
   28888:	bne	2889c <__assert_fail@plt+0x16bf0>
   2888c:	ldrb	r0, [r4, #77]	; 0x4d
   28890:	cmp	r0, #0
   28894:	movwne	r0, #1
   28898:	lsl	r3, r0, #1
   2889c:	mov	r2, sp
   288a0:	mov	r0, r9
   288a4:	mov	r1, r7
   288a8:	bl	26a48 <__assert_fail@plt+0x14d9c>
   288ac:	mov	r6, r0
   288b0:	ldr	r0, [r4, #100]	; 0x64
   288b4:	cmp	r8, #0
   288b8:	str	r6, [r0, r5, lsl #2]
   288bc:	beq	288c8 <__assert_fail@plt+0x16c1c>
   288c0:	ldr	r0, [sp, #8]
   288c4:	bl	1b4e8 <__assert_fail@plt+0x983c>
   288c8:	cmp	r6, #0
   288cc:	ldrne	r0, [r7, #76]	; 0x4c
   288d0:	cmpne	r0, #0
   288d4:	bne	288e4 <__assert_fail@plt+0x16c38>
   288d8:	mov	r0, r6
   288dc:	sub	sp, fp, #24
   288e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   288e4:	add	r7, r6, #4
   288e8:	mov	r0, r4
   288ec:	mov	r2, r5
   288f0:	mov	r1, r7
   288f4:	bl	27ae0 <__assert_fail@plt+0x15e34>
   288f8:	cmp	r0, #0
   288fc:	str	r0, [r9]
   28900:	bne	28934 <__assert_fail@plt+0x16c88>
   28904:	ldrb	r0, [r6, #52]	; 0x34
   28908:	tst	r0, #64	; 0x40
   2890c:	beq	288d8 <__assert_fail@plt+0x16c2c>
   28910:	mov	r0, r4
   28914:	mov	r1, r7
   28918:	bl	27be0 <__assert_fail@plt+0x15f34>
   2891c:	str	r0, [r9]
   28920:	cmp	r0, #0
   28924:	mov	r6, #0
   28928:	ldreq	r0, [r4, #100]	; 0x64
   2892c:	ldreq	r6, [r0, r5, lsl #2]
   28930:	b	288d8 <__assert_fail@plt+0x16c2c>
   28934:	mov	r6, #0
   28938:	b	288d8 <__assert_fail@plt+0x16c2c>
   2893c:	ldr	r0, [r4, #88]	; 0x58
   28940:	and	r0, r0, #2
   28944:	eor	r3, r0, #10
   28948:	b	2889c <__assert_fail@plt+0x16bf0>
   2894c:	mov	r0, r6
   28950:	bl	11afc <iswalnum@plt>
   28954:	mov	r3, #1
   28958:	cmp	r6, #95	; 0x5f
   2895c:	beq	2889c <__assert_fail@plt+0x16bf0>
   28960:	cmp	r0, #0
   28964:	beq	28880 <__assert_fail@plt+0x16bd4>
   28968:	b	2889c <__assert_fail@plt+0x16bf0>
   2896c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28970:	add	fp, sp, #28
   28974:	sub	sp, sp, #20
   28978:	mov	sl, r2
   2897c:	cmp	r1, #0
   28980:	str	r0, [sp, #16]
   28984:	beq	28af8 <__assert_fail@plt+0x16e4c>
   28988:	ldr	r0, [r1, #4]
   2898c:	mov	r8, r1
   28990:	cmp	sl, #0
   28994:	beq	28ab4 <__assert_fail@plt+0x16e08>
   28998:	cmp	r0, #1
   2899c:	blt	28ab4 <__assert_fail@plt+0x16e08>
   289a0:	ldr	r1, [sl, #4]
   289a4:	cmp	r1, #1
   289a8:	blt	28ab4 <__assert_fail@plt+0x16e08>
   289ac:	ldr	r4, [sp, #16]
   289b0:	add	r0, r1, r0
   289b4:	str	r0, [r4]
   289b8:	lsl	r0, r0, #2
   289bc:	bl	1b5b8 <__assert_fail@plt+0x990c>
   289c0:	cmp	r0, #0
   289c4:	str	r0, [r4, #8]
   289c8:	beq	28be8 <__assert_fail@plt+0x16f3c>
   289cc:	ldr	r9, [sl, #4]
   289d0:	ldr	lr, [r8, #4]
   289d4:	mov	r7, #0
   289d8:	mov	r1, #0
   289dc:	cmp	r9, #0
   289e0:	movwgt	r1, #1
   289e4:	cmp	lr, #1
   289e8:	blt	28b6c <__assert_fail@plt+0x16ec0>
   289ec:	mov	r2, #0
   289f0:	mov	ip, #0
   289f4:	str	r2, [sp, #8]
   289f8:	mov	r2, #0
   289fc:	str	r2, [sp, #12]
   28a00:	mov	r2, #0
   28a04:	ldr	r4, [sp, #12]
   28a08:	mov	r7, ip
   28a0c:	tst	r1, #1
   28a10:	beq	28b9c <__assert_fail@plt+0x16ef0>
   28a14:	ldr	r1, [sl, #8]
   28a18:	ldr	r5, [r1, r7, lsl #2]
   28a1c:	ldr	r1, [r8, #8]
   28a20:	ldr	r3, [r1, r2, lsl #2]
   28a24:	cmp	r3, r5
   28a28:	ble	28a50 <__assert_fail@plt+0x16da4>
   28a2c:	add	r7, r7, #1
   28a30:	str	r5, [r0, r4, lsl #2]
   28a34:	mov	r1, #0
   28a38:	add	r4, r4, #1
   28a3c:	cmp	r9, r7
   28a40:	movwgt	r1, #1
   28a44:	cmp	lr, r2
   28a48:	bgt	28a0c <__assert_fail@plt+0x16d60>
   28a4c:	b	28b70 <__assert_fail@plt+0x16ec4>
   28a50:	str	r3, [r0, r4, lsl #2]
   28a54:	ldr	r6, [sp, #8]
   28a58:	add	r1, r7, #1
   28a5c:	mov	ip, r7
   28a60:	add	r2, r2, #1
   28a64:	ldr	r9, [sl, #4]
   28a68:	ldr	lr, [r8, #4]
   28a6c:	moveq	ip, r1
   28a70:	str	r1, [sp, #4]
   28a74:	mov	r1, #0
   28a78:	sub	r6, r6, #1
   28a7c:	cmp	r9, ip
   28a80:	str	r6, [sp, #8]
   28a84:	add	r6, r4, #1
   28a88:	movwgt	r1, #1
   28a8c:	cmp	lr, r2
   28a90:	str	r6, [sp, #12]
   28a94:	bgt	28a04 <__assert_fail@plt+0x16d58>
   28a98:	ldr	r2, [sp, #4]
   28a9c:	cmp	r3, r5
   28aa0:	add	r4, r4, #1
   28aa4:	moveq	r7, r2
   28aa8:	cmp	r1, #0
   28aac:	bne	28b78 <__assert_fail@plt+0x16ecc>
   28ab0:	b	28bc4 <__assert_fail@plt+0x16f18>
   28ab4:	cmp	r0, #1
   28ab8:	blt	28af8 <__assert_fail@plt+0x16e4c>
   28abc:	ldr	r1, [sp, #16]
   28ac0:	str	r0, [r1, #4]
   28ac4:	ldr	r1, [r8, #4]
   28ac8:	cmp	r1, #1
   28acc:	blt	28b50 <__assert_fail@plt+0x16ea4>
   28ad0:	ldr	r4, [sp, #16]
   28ad4:	str	r0, [r4]
   28ad8:	lsl	r0, r0, #2
   28adc:	bl	1b5b8 <__assert_fail@plt+0x990c>
   28ae0:	cmp	r0, #0
   28ae4:	str	r0, [r4, #8]
   28ae8:	beq	28bd8 <__assert_fail@plt+0x16f2c>
   28aec:	ldr	r2, [r8, #4]
   28af0:	ldr	r1, [r8, #8]
   28af4:	b	28b44 <__assert_fail@plt+0x16e98>
   28af8:	cmp	sl, #0
   28afc:	beq	28b50 <__assert_fail@plt+0x16ea4>
   28b00:	ldr	r0, [sl, #4]
   28b04:	cmp	r0, #1
   28b08:	blt	28b50 <__assert_fail@plt+0x16ea4>
   28b0c:	ldr	r1, [sp, #16]
   28b10:	str	r0, [r1, #4]
   28b14:	ldr	r1, [sl, #4]
   28b18:	cmp	r1, #1
   28b1c:	blt	28b50 <__assert_fail@plt+0x16ea4>
   28b20:	ldr	r4, [sp, #16]
   28b24:	str	r0, [r4]
   28b28:	lsl	r0, r0, #2
   28b2c:	bl	1b5b8 <__assert_fail@plt+0x990c>
   28b30:	cmp	r0, #0
   28b34:	str	r0, [r4, #8]
   28b38:	beq	28bd8 <__assert_fail@plt+0x16f2c>
   28b3c:	ldr	r2, [sl, #4]
   28b40:	ldr	r1, [sl, #8]
   28b44:	lsl	r2, r2, #2
   28b48:	bl	118ec <memcpy@plt>
   28b4c:	b	28bcc <__assert_fail@plt+0x16f20>
   28b50:	ldr	r1, [sp, #16]
   28b54:	mov	r0, #0
   28b58:	str	r0, [r1]
   28b5c:	str	r0, [r1, #4]
   28b60:	str	r0, [r1, #8]
   28b64:	sub	sp, fp, #28
   28b68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28b6c:	mov	r4, #0
   28b70:	cmp	r1, #0
   28b74:	beq	28bc4 <__assert_fail@plt+0x16f18>
   28b78:	ldr	r1, [sl, #8]
   28b7c:	sub	r2, r9, r7
   28b80:	add	r0, r0, r4, lsl #2
   28b84:	lsl	r2, r2, #2
   28b88:	add	r1, r1, r7, lsl #2
   28b8c:	bl	118ec <memcpy@plt>
   28b90:	sub	r0, r4, r7
   28b94:	add	r4, r0, r9
   28b98:	b	28bc4 <__assert_fail@plt+0x16f18>
   28b9c:	ldr	r1, [r8, #8]
   28ba0:	add	r0, r0, r4, lsl #2
   28ba4:	add	r1, r1, r2, lsl #2
   28ba8:	sub	r2, lr, r2
   28bac:	lsl	r2, r2, #2
   28bb0:	bl	118ec <memcpy@plt>
   28bb4:	ldr	r0, [r8, #4]
   28bb8:	ldr	r1, [sp, #8]
   28bbc:	add	r0, r0, r1
   28bc0:	add	r4, r0, r4
   28bc4:	ldr	r0, [sp, #16]
   28bc8:	str	r4, [r0, #4]
   28bcc:	mov	r0, #0
   28bd0:	sub	sp, fp, #28
   28bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28bd8:	ldr	r1, [sp, #16]
   28bdc:	mov	r0, #0
   28be0:	str	r0, [r1]
   28be4:	str	r0, [r1, #4]
   28be8:	mov	r0, #12
   28bec:	sub	sp, fp, #28
   28bf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28bf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28bf8:	add	fp, sp, #28
   28bfc:	sub	sp, sp, #12
   28c00:	mov	r6, r2
   28c04:	mov	r7, r3
   28c08:	ldr	r2, [r2]
   28c0c:	mov	r4, r0
   28c10:	mov	r0, #8
   28c14:	mov	r8, r1
   28c18:	ldr	r9, [fp, #8]
   28c1c:	ldr	r3, [r6, #4]
   28c20:	str	r0, [sp, #8]
   28c24:	add	r1, r6, #8
   28c28:	mov	r0, r4
   28c2c:	stm	sp, {r7, r9}
   28c30:	bl	28dbc <__assert_fail@plt+0x17110>
   28c34:	mov	r5, r0
   28c38:	cmp	r0, #0
   28c3c:	beq	28c4c <__assert_fail@plt+0x16fa0>
   28c40:	mov	r0, r5
   28c44:	sub	sp, fp, #28
   28c48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28c4c:	ldr	r0, [r4, #108]	; 0x6c
   28c50:	ldr	r1, [r4, #112]	; 0x70
   28c54:	ldr	sl, [r6, #4]
   28c58:	ldr	r5, [r8]
   28c5c:	cmp	r0, r1
   28c60:	blt	28cb0 <__assert_fail@plt+0x17004>
   28c64:	ldr	r0, [r4, #116]	; 0x74
   28c68:	add	r1, r1, r1, lsl #1
   28c6c:	lsl	r1, r1, #4
   28c70:	bl	1b64c <__assert_fail@plt+0x99a0>
   28c74:	cmp	r0, #0
   28c78:	beq	28dac <__assert_fail@plt+0x17100>
   28c7c:	str	r0, [r4, #116]	; 0x74
   28c80:	ldr	r1, [r4, #108]	; 0x6c
   28c84:	ldr	r2, [r4, #112]	; 0x70
   28c88:	add	r1, r1, r1, lsl #1
   28c8c:	add	r0, r0, r1, lsl #3
   28c90:	add	r1, r2, r2, lsl #1
   28c94:	lsl	r2, r1, #3
   28c98:	mov	r1, #0
   28c9c:	bl	11b2c <memset@plt>
   28ca0:	ldr	r1, [r4, #112]	; 0x70
   28ca4:	ldr	r0, [r4, #108]	; 0x6c
   28ca8:	lsl	r1, r1, #1
   28cac:	str	r1, [r4, #112]	; 0x70
   28cb0:	ldr	r1, [r4, #116]	; 0x74
   28cb4:	cmp	r0, #1
   28cb8:	blt	28cd8 <__assert_fail@plt+0x1702c>
   28cbc:	sub	r2, r0, #1
   28cc0:	add	r2, r2, r2, lsl #1
   28cc4:	add	r2, r1, r2, lsl #3
   28cc8:	ldr	r3, [r2, #4]
   28ccc:	cmp	r3, r9
   28cd0:	moveq	r3, #1
   28cd4:	strbeq	r3, [r2, #20]
   28cd8:	add	r2, r0, r0, lsl #1
   28cdc:	cmp	sl, r5
   28ce0:	mov	r3, #0
   28ce4:	mov	ip, #0
   28ce8:	add	r0, r0, #1
   28cec:	mvneq	r3, #0
   28cf0:	str	r7, [r1, r2, lsl #3]!
   28cf4:	str	r9, [r1, #4]
   28cf8:	str	r5, [r1, #8]
   28cfc:	str	sl, [r1, #12]
   28d00:	str	r3, [r1, #16]
   28d04:	str	r0, [r4, #108]	; 0x6c
   28d08:	strb	ip, [r1, #20]
   28d0c:	sub	r0, sl, r5
   28d10:	ldr	r1, [r4, #120]	; 0x78
   28d14:	cmp	r1, r0
   28d18:	strlt	r0, [r4, #120]	; 0x78
   28d1c:	ldr	r0, [r6, #4]
   28d20:	ldr	r1, [r8]
   28d24:	ldr	r7, [r4, #104]	; 0x68
   28d28:	add	r0, r0, r9
   28d2c:	sub	r6, r0, r1
   28d30:	ldr	r0, [r4, #36]	; 0x24
   28d34:	cmp	r0, r6
   28d38:	bgt	28d48 <__assert_fail@plt+0x1709c>
   28d3c:	ldr	r1, [r4, #48]	; 0x30
   28d40:	cmp	r0, r1
   28d44:	blt	28d60 <__assert_fail@plt+0x170b4>
   28d48:	ldr	r0, [r4, #28]
   28d4c:	cmp	r0, r6
   28d50:	bgt	28d78 <__assert_fail@plt+0x170cc>
   28d54:	ldr	r1, [r4, #48]	; 0x30
   28d58:	cmp	r0, r1
   28d5c:	bge	28d78 <__assert_fail@plt+0x170cc>
   28d60:	add	r1, r6, #1
   28d64:	mov	r0, r4
   28d68:	bl	28560 <__assert_fail@plt+0x168b4>
   28d6c:	mov	r5, r0
   28d70:	cmp	r0, #0
   28d74:	bne	28c40 <__assert_fail@plt+0x16f94>
   28d78:	mov	r5, #0
   28d7c:	cmp	r6, r7
   28d80:	ble	28c40 <__assert_fail@plt+0x16f94>
   28d84:	sub	r0, r6, r7
   28d88:	mov	r1, #0
   28d8c:	mov	r5, #0
   28d90:	lsl	r2, r0, #2
   28d94:	ldr	r0, [r4, #100]	; 0x64
   28d98:	add	r0, r0, r7, lsl #2
   28d9c:	add	r0, r0, #4
   28da0:	bl	11b2c <memset@plt>
   28da4:	str	r6, [r4, #104]	; 0x68
   28da8:	b	28c40 <__assert_fail@plt+0x16f94>
   28dac:	ldr	r0, [r4, #116]	; 0x74
   28db0:	bl	1b4e8 <__assert_fail@plt+0x983c>
   28db4:	mov	r5, #12
   28db8:	b	28c40 <__assert_fail@plt+0x16f94>
   28dbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28dc0:	add	fp, sp, #28
   28dc4:	sub	sp, sp, #84	; 0x54
   28dc8:	ldr	r7, [r0, #84]	; 0x54
   28dcc:	mov	ip, r1
   28dd0:	mov	r1, #0
   28dd4:	mov	lr, r2
   28dd8:	mov	r9, r3
   28ddc:	str	r0, [sp, #44]	; 0x2c
   28de0:	str	r1, [fp, #-52]	; 0xffffffcc
   28de4:	ldr	r4, [ip, #4]
   28de8:	ldr	r1, [r7]
   28dec:	str	r7, [sp, #24]
   28df0:	ldr	sl, [r1, r2, lsl #3]
   28df4:	ldr	r1, [r0, #120]	; 0x78
   28df8:	ldr	r2, [fp, #12]
   28dfc:	add	r2, r1, r2
   28e00:	cmp	r4, r2
   28e04:	str	sl, [sp, #20]
   28e08:	ble	29718 <__assert_fail@plt+0x17a6c>
   28e0c:	ldr	r2, [r0, #100]	; 0x64
   28e10:	ldr	r5, [ip]
   28e14:	ldr	r4, [r0, #40]	; 0x28
   28e18:	ldr	r1, [r0, #88]	; 0x58
   28e1c:	str	r2, [sp, #8]
   28e20:	ldr	r2, [ip, #8]
   28e24:	cmp	r5, #0
   28e28:	str	r4, [sp, #12]
   28e2c:	moveq	r5, r9
   28e30:	cmp	r5, #0
   28e34:	str	r2, [r0, #100]	; 0x64
   28e38:	str	r5, [r0, #40]	; 0x28
   28e3c:	ble	29788 <__assert_fail@plt+0x17adc>
   28e40:	ldr	r2, [r0, #48]	; 0x30
   28e44:	sub	r3, r5, #1
   28e48:	cmp	r2, r3
   28e4c:	beq	29790 <__assert_fail@plt+0x17ae4>
   28e50:	ldr	r1, [r0, #80]	; 0x50
   28e54:	cmp	r1, #2
   28e58:	blt	28e84 <__assert_fail@plt+0x171d8>
   28e5c:	ldr	r1, [r0, #8]
   28e60:	ldr	r6, [r1, r3, lsl #2]
   28e64:	cmn	r6, #1
   28e68:	bne	28eb4 <__assert_fail@plt+0x17208>
   28e6c:	sub	r3, r3, #1
   28e70:	cmn	r3, #1
   28e74:	bne	28e60 <__assert_fail@plt+0x171b4>
   28e78:	ldr	r0, [sp, #44]	; 0x2c
   28e7c:	ldr	r8, [r0, #60]	; 0x3c
   28e80:	b	28ee4 <__assert_fail@plt+0x17238>
   28e84:	ldr	r1, [r0, #4]
   28e88:	ldr	r2, [r0, #68]	; 0x44
   28e8c:	mov	r8, #1
   28e90:	ldrb	r0, [r1, r3]
   28e94:	ubfx	r1, r0, #5, #3
   28e98:	ldr	r1, [r2, r1, lsl #2]
   28e9c:	and	r2, r0, #31
   28ea0:	tst	r1, r8, lsl r2
   28ea4:	moveq	r8, #0
   28ea8:	cmpeq	r0, #10
   28eac:	bne	28ee4 <__assert_fail@plt+0x17238>
   28eb0:	b	28ed0 <__assert_fail@plt+0x17224>
   28eb4:	ldr	r0, [sp, #44]	; 0x2c
   28eb8:	ldrb	r0, [r0, #78]	; 0x4e
   28ebc:	cmp	r0, #0
   28ec0:	bne	297c4 <__assert_fail@plt+0x17b18>
   28ec4:	mov	r8, #0
   28ec8:	cmp	r6, #10
   28ecc:	bne	28ee4 <__assert_fail@plt+0x17238>
   28ed0:	ldr	r0, [sp, #44]	; 0x2c
   28ed4:	ldrb	r0, [r0, #77]	; 0x4d
   28ed8:	cmp	r0, #0
   28edc:	movwne	r0, #1
   28ee0:	lsl	r8, r0, #1
   28ee4:	cmp	r5, r9
   28ee8:	str	ip, [sp, #16]
   28eec:	bne	28fb0 <__assert_fail@plt+0x17304>
   28ef0:	mov	r0, #1
   28ef4:	mov	r6, lr
   28ef8:	str	r0, [sp, #52]	; 0x34
   28efc:	str	r0, [sp, #48]	; 0x30
   28f00:	mov	r0, #4
   28f04:	bl	1b5b8 <__assert_fail@plt+0x990c>
   28f08:	cmp	r0, #0
   28f0c:	str	r0, [sp, #56]	; 0x38
   28f10:	beq	297ac <__assert_fail@plt+0x17b00>
   28f14:	ldr	r3, [fp, #16]
   28f18:	str	r6, [r0]
   28f1c:	mov	r0, #0
   28f20:	add	r1, sp, #48	; 0x30
   28f24:	mov	r2, sl
   28f28:	str	r0, [fp, #-52]	; 0xffffffcc
   28f2c:	mov	r0, r7
   28f30:	bl	29800 <__assert_fail@plt+0x17b54>
   28f34:	cmp	r0, #0
   28f38:	str	r0, [fp, #-52]	; 0xffffffcc
   28f3c:	bne	2979c <__assert_fail@plt+0x17af0>
   28f40:	ldr	r0, [sp, #52]	; 0x34
   28f44:	ldr	r9, [sp, #44]	; 0x2c
   28f48:	cmp	r0, #0
   28f4c:	beq	28f78 <__assert_fail@plt+0x172cc>
   28f50:	ldr	r0, [fp, #16]
   28f54:	ldr	r3, [sp, #20]
   28f58:	add	r1, sp, #48	; 0x30
   28f5c:	mov	r2, r5
   28f60:	str	r0, [sp]
   28f64:	mov	r0, r9
   28f68:	bl	29938 <__assert_fail@plt+0x17c8c>
   28f6c:	cmp	r0, #0
   28f70:	str	r0, [fp, #-52]	; 0xffffffcc
   28f74:	bne	2979c <__assert_fail@plt+0x17af0>
   28f78:	ldr	r1, [sp, #24]
   28f7c:	sub	r0, fp, #52	; 0x34
   28f80:	add	r2, sp, #48	; 0x30
   28f84:	mov	r3, r8
   28f88:	bl	26a48 <__assert_fail@plt+0x14d9c>
   28f8c:	mov	r6, r0
   28f90:	cmp	r0, #0
   28f94:	bne	28fa4 <__assert_fail@plt+0x172f8>
   28f98:	ldr	r0, [fp, #-52]	; 0xffffffcc
   28f9c:	cmp	r0, #0
   28fa0:	bne	296f4 <__assert_fail@plt+0x17a48>
   28fa4:	ldr	r0, [r9, #100]	; 0x64
   28fa8:	str	r6, [r0, r5, lsl #2]
   28fac:	b	29044 <__assert_fail@plt+0x17398>
   28fb0:	ldr	r9, [sp, #44]	; 0x2c
   28fb4:	ldr	r0, [r9, #100]	; 0x64
   28fb8:	ldr	r6, [r0, r5, lsl #2]
   28fbc:	cmp	r6, #0
   28fc0:	beq	28fe4 <__assert_fail@plt+0x17338>
   28fc4:	ldrb	r0, [r6, #52]	; 0x34
   28fc8:	tst	r0, #64	; 0x40
   28fcc:	bne	28ff8 <__assert_fail@plt+0x1734c>
   28fd0:	mov	r0, #0
   28fd4:	str	r0, [sp, #52]	; 0x34
   28fd8:	str	r0, [sp, #48]	; 0x30
   28fdc:	str	r0, [sp, #56]	; 0x38
   28fe0:	b	29044 <__assert_fail@plt+0x17398>
   28fe4:	mov	r6, #0
   28fe8:	str	r6, [sp, #52]	; 0x34
   28fec:	str	r6, [sp, #48]	; 0x30
   28ff0:	str	r6, [sp, #56]	; 0x38
   28ff4:	b	29044 <__assert_fail@plt+0x17398>
   28ff8:	ldr	r0, [r6, #8]
   28ffc:	cmp	r0, #1
   29000:	str	r0, [sp, #52]	; 0x34
   29004:	blt	296b8 <__assert_fail@plt+0x17a0c>
   29008:	str	r0, [sp, #48]	; 0x30
   2900c:	lsl	r0, r0, #2
   29010:	bl	1b5b8 <__assert_fail@plt+0x990c>
   29014:	cmp	r0, #0
   29018:	str	r0, [sp, #56]	; 0x38
   2901c:	beq	297ac <__assert_fail@plt+0x17b00>
   29020:	ldr	r2, [r6, #8]
   29024:	ldr	r1, [r6, #12]
   29028:	lsl	r2, r2, #2
   2902c:	bl	118ec <memcpy@plt>
   29030:	ldrb	r0, [r6, #52]	; 0x34
   29034:	mov	r1, #0
   29038:	str	r1, [fp, #-52]	; 0xffffffcc
   2903c:	tst	r0, #64	; 0x40
   29040:	bne	28f50 <__assert_fail@plt+0x172a4>
   29044:	ldr	r4, [fp, #12]
   29048:	cmp	r5, r4
   2904c:	bge	29610 <__assert_fail@plt+0x17964>
   29050:	ldr	r7, [sp, #24]
   29054:	ldr	sl, [sp, #20]
   29058:	ldr	r4, [fp, #16]
   2905c:	add	r8, sp, #48	; 0x30
   29060:	mov	r0, #0
   29064:	str	r6, [sp, #40]	; 0x28
   29068:	b	29098 <__assert_fail@plt+0x173ec>
   2906c:	ldr	r1, [sp, #40]	; 0x28
   29070:	ldr	r0, [r9, #100]	; 0x64
   29074:	ldr	r5, [sp, #28]
   29078:	str	r1, [r0, r5, lsl #2]
   2907c:	cmp	r1, #0
   29080:	ldr	r1, [sp, #32]
   29084:	mov	r0, #0
   29088:	addeq	r0, r1, #1
   2908c:	ldr	r1, [fp, #12]
   29090:	cmp	r5, r1
   29094:	beq	2960c <__assert_fail@plt+0x17960>
   29098:	str	r0, [sp, #32]
   2909c:	ldr	r0, [r9, #120]	; 0x78
   290a0:	ldr	r1, [sp, #32]
   290a4:	cmp	r1, r0
   290a8:	bgt	29610 <__assert_fail@plt+0x17964>
   290ac:	mov	r0, #0
   290b0:	add	r1, r5, #1
   290b4:	str	r0, [sp, #52]	; 0x34
   290b8:	str	r1, [sp, #28]
   290bc:	ldr	r0, [r9, #100]	; 0x64
   290c0:	ldr	r0, [r0, r1, lsl #2]
   290c4:	cmp	r0, #0
   290c8:	beq	290e4 <__assert_fail@plt+0x17438>
   290cc:	add	r1, r0, #4
   290d0:	mov	r0, r8
   290d4:	bl	26748 <__assert_fail@plt+0x14a9c>
   290d8:	cmp	r0, #0
   290dc:	str	r0, [fp, #-52]	; 0xffffffcc
   290e0:	bne	296f4 <__assert_fail@plt+0x17a48>
   290e4:	ldr	r1, [sp, #40]	; 0x28
   290e8:	cmp	r1, #0
   290ec:	beq	294c4 <__assert_fail@plt+0x17818>
   290f0:	mov	r0, #0
   290f4:	ldr	r8, [r9, #84]	; 0x54
   290f8:	str	r0, [fp, #-32]	; 0xffffffe0
   290fc:	str	r0, [fp, #-44]	; 0xffffffd4
   29100:	str	r0, [fp, #-48]	; 0xffffffd0
   29104:	str	r0, [fp, #-40]	; 0xffffffd8
   29108:	ldr	r1, [r1, #20]
   2910c:	cmp	r1, #1
   29110:	blt	294b0 <__assert_fail@plt+0x17804>
   29114:	ldr	r7, [sp, #40]	; 0x28
   29118:	mov	r4, #0
   2911c:	b	29150 <__assert_fail@plt+0x174a4>
   29120:	ldr	r1, [sp, #52]	; 0x34
   29124:	cmp	r1, #0
   29128:	bne	292cc <__assert_fail@plt+0x17620>
   2912c:	ldr	r0, [sp, #56]	; 0x38
   29130:	str	r6, [r0]
   29134:	ldr	r0, [sp, #52]	; 0x34
   29138:	add	r0, r0, #1
   2913c:	str	r0, [sp, #52]	; 0x34
   29140:	ldr	r0, [r7, #20]
   29144:	add	r4, r4, #1
   29148:	cmp	r4, r0
   2914c:	bge	294a4 <__assert_fail@plt+0x177f8>
   29150:	ldr	r0, [r7, #24]
   29154:	ldr	sl, [r0, r4, lsl #2]
   29158:	ldr	r0, [r8]
   2915c:	add	r1, r0, sl, lsl #3
   29160:	ldrb	r1, [r1, #6]
   29164:	tst	r1, #16
   29168:	beq	29278 <__assert_fail@plt+0x175cc>
   2916c:	mov	r0, r8
   29170:	mov	r1, sl
   29174:	mov	r2, r9
   29178:	mov	r3, r5
   2917c:	bl	2a318 <__assert_fail@plt+0x1866c>
   29180:	mov	r9, r0
   29184:	cmp	r0, #2
   29188:	blt	29264 <__assert_fail@plt+0x175b8>
   2918c:	ldr	r0, [sp, #44]	; 0x2c
   29190:	ldr	r1, [r8, #12]
   29194:	add	r6, r9, r5
   29198:	ldr	r0, [r0, #100]	; 0x64
   2919c:	ldr	r1, [r1, sl, lsl #2]
   291a0:	ldr	r0, [r0, r6, lsl #2]
   291a4:	str	r1, [sp, #36]	; 0x24
   291a8:	mov	r1, #0
   291ac:	str	r1, [fp, #-44]	; 0xffffffd4
   291b0:	cmp	r0, #0
   291b4:	beq	291d0 <__assert_fail@plt+0x17524>
   291b8:	add	r1, r0, #4
   291bc:	sub	r0, fp, #48	; 0x30
   291c0:	bl	26748 <__assert_fail@plt+0x14a9c>
   291c4:	cmp	r0, #0
   291c8:	str	r0, [fp, #-32]	; 0xffffffe0
   291cc:	bne	296e4 <__assert_fail@plt+0x17a38>
   291d0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   291d4:	cmp	r2, #0
   291d8:	beq	29204 <__assert_fail@plt+0x17558>
   291dc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   291e0:	ldr	r7, [sp, #36]	; 0x24
   291e4:	cmp	r1, #0
   291e8:	bne	293b4 <__assert_fail@plt+0x17708>
   291ec:	ldr	r0, [fp, #-40]	; 0xffffffd8
   291f0:	str	r7, [r0]
   291f4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   291f8:	add	r0, r0, #1
   291fc:	str	r0, [fp, #-44]	; 0xffffffd4
   29200:	b	2922c <__assert_fail@plt+0x17580>
   29204:	mov	r0, #1
   29208:	str	r0, [fp, #-44]	; 0xffffffd4
   2920c:	str	r0, [fp, #-48]	; 0xffffffd0
   29210:	mov	r0, #4
   29214:	bl	1b5b8 <__assert_fail@plt+0x990c>
   29218:	ldr	r1, [sp, #36]	; 0x24
   2921c:	cmp	r0, #0
   29220:	str	r0, [fp, #-40]	; 0xffffffd8
   29224:	beq	29704 <__assert_fail@plt+0x17a58>
   29228:	str	r1, [r0]
   2922c:	sub	r0, fp, #32
   29230:	mov	r1, r8
   29234:	sub	r2, fp, #48	; 0x30
   29238:	bl	2a000 <__assert_fail@plt+0x18354>
   2923c:	ldr	r2, [sp, #44]	; 0x2c
   29240:	ldr	r1, [r2, #100]	; 0x64
   29244:	str	r0, [r1, r6, lsl #2]
   29248:	ldr	r0, [r2, #100]	; 0x64
   2924c:	ldr	r0, [r0, r6, lsl #2]
   29250:	cmp	r0, #0
   29254:	bne	29264 <__assert_fail@plt+0x175b8>
   29258:	ldr	r7, [fp, #-32]	; 0xffffffe0
   2925c:	cmp	r7, #0
   29260:	bne	296e8 <__assert_fail@plt+0x17a3c>
   29264:	cmp	r9, #0
   29268:	ldr	r9, [sp, #44]	; 0x2c
   2926c:	ldr	r7, [sp, #40]	; 0x28
   29270:	bne	29290 <__assert_fail@plt+0x175e4>
   29274:	ldr	r0, [r8]
   29278:	add	r1, r0, sl, lsl #3
   2927c:	mov	r0, r9
   29280:	mov	r2, r5
   29284:	bl	2a67c <__assert_fail@plt+0x189d0>
   29288:	cmp	r0, #0
   2928c:	beq	29140 <__assert_fail@plt+0x17494>
   29290:	ldr	r0, [r8, #12]
   29294:	ldr	r2, [sp, #48]	; 0x30
   29298:	ldr	r6, [r0, sl, lsl #2]
   2929c:	cmp	r2, #0
   292a0:	bne	29120 <__assert_fail@plt+0x17474>
   292a4:	mov	r0, #1
   292a8:	str	r0, [sp, #52]	; 0x34
   292ac:	str	r0, [sp, #48]	; 0x30
   292b0:	mov	r0, #4
   292b4:	bl	1b5b8 <__assert_fail@plt+0x990c>
   292b8:	cmp	r0, #0
   292bc:	str	r0, [sp, #56]	; 0x38
   292c0:	beq	296d0 <__assert_fail@plt+0x17a24>
   292c4:	str	r6, [r0]
   292c8:	b	29140 <__assert_fail@plt+0x17494>
   292cc:	cmp	r2, r1
   292d0:	bne	292fc <__assert_fail@plt+0x17650>
   292d4:	lsl	r0, r2, #1
   292d8:	lsl	r1, r2, #3
   292dc:	str	r0, [sp, #48]	; 0x30
   292e0:	ldr	r0, [sp, #56]	; 0x38
   292e4:	bl	1b64c <__assert_fail@plt+0x99a0>
   292e8:	cmp	r0, #0
   292ec:	beq	296dc <__assert_fail@plt+0x17a30>
   292f0:	str	r0, [sp, #56]	; 0x38
   292f4:	ldr	r1, [sp, #52]	; 0x34
   292f8:	b	29300 <__assert_fail@plt+0x17654>
   292fc:	ldr	r0, [sp, #56]	; 0x38
   29300:	ldr	r2, [r0]
   29304:	cmp	r2, r6
   29308:	ble	2937c <__assert_fail@plt+0x176d0>
   2930c:	cmp	r1, #1
   29310:	blt	293ac <__assert_fail@plt+0x17700>
   29314:	ands	r7, r1, #3
   29318:	sub	ip, r1, #1
   2931c:	beq	29340 <__assert_fail@plt+0x17694>
   29320:	add	lr, r0, r1, lsl #2
   29324:	mov	r3, lr
   29328:	ldr	r2, [r3, #-4]!
   2932c:	subs	r7, r7, #1
   29330:	sub	r1, r1, #1
   29334:	str	r2, [lr]
   29338:	mov	lr, r3
   2933c:	bne	29328 <__assert_fail@plt+0x1767c>
   29340:	cmp	ip, #3
   29344:	bcc	29370 <__assert_fail@plt+0x176c4>
   29348:	add	r2, r0, r1, lsl #2
   2934c:	sub	r2, r2, #8
   29350:	sub	lr, r2, #8
   29354:	sub	r1, r1, #4
   29358:	sub	sl, r2, #4
   2935c:	sub	r2, r2, #16
   29360:	ldm	lr, {r3, r7, ip, lr}
   29364:	cmp	r1, #0
   29368:	stm	sl, {r3, r7, ip, lr}
   2936c:	bgt	29350 <__assert_fail@plt+0x176a4>
   29370:	ldr	r7, [sp, #40]	; 0x28
   29374:	mov	r1, #0
   29378:	b	293ac <__assert_fail@plt+0x17700>
   2937c:	add	r2, r0, r1, lsl #2
   29380:	ldr	r3, [r2, #-4]
   29384:	cmp	r3, r6
   29388:	ble	293ac <__assert_fail@plt+0x17700>
   2938c:	sub	r1, r1, #2
   29390:	str	r3, [r2]
   29394:	sub	r1, r1, #1
   29398:	ldr	r3, [r2, #-8]
   2939c:	sub	r2, r2, #4
   293a0:	cmp	r3, r6
   293a4:	bgt	29390 <__assert_fail@plt+0x176e4>
   293a8:	add	r1, r1, #2
   293ac:	str	r6, [r0, r1, lsl #2]
   293b0:	b	29134 <__assert_fail@plt+0x17488>
   293b4:	cmp	r2, r1
   293b8:	bne	293e4 <__assert_fail@plt+0x17738>
   293bc:	lsl	r0, r2, #1
   293c0:	lsl	r1, r2, #3
   293c4:	str	r0, [fp, #-48]	; 0xffffffd0
   293c8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   293cc:	bl	1b64c <__assert_fail@plt+0x99a0>
   293d0:	cmp	r0, #0
   293d4:	beq	296dc <__assert_fail@plt+0x17a30>
   293d8:	str	r0, [fp, #-40]	; 0xffffffd8
   293dc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   293e0:	b	293e8 <__assert_fail@plt+0x1773c>
   293e4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   293e8:	ldr	r2, [r0]
   293ec:	cmp	r2, r7
   293f0:	ble	2946c <__assert_fail@plt+0x177c0>
   293f4:	cmp	r1, #1
   293f8:	blt	2949c <__assert_fail@plt+0x177f0>
   293fc:	ands	r3, r1, #3
   29400:	sub	ip, r1, #1
   29404:	beq	29428 <__assert_fail@plt+0x1777c>
   29408:	add	lr, r0, r1, lsl #2
   2940c:	mov	r7, lr
   29410:	ldr	r2, [r7, #-4]!
   29414:	subs	r3, r3, #1
   29418:	sub	r1, r1, #1
   2941c:	str	r2, [lr]
   29420:	mov	lr, r7
   29424:	bne	29410 <__assert_fail@plt+0x17764>
   29428:	cmp	ip, #3
   2942c:	bcc	29460 <__assert_fail@plt+0x177b4>
   29430:	add	r2, r0, r1, lsl #2
   29434:	sub	r2, r2, #8
   29438:	sub	lr, r2, #8
   2943c:	sub	r1, r1, #4
   29440:	ldm	lr, {r3, r7, ip, lr}
   29444:	cmp	r1, #0
   29448:	str	r3, [r2, #-4]
   2944c:	str	r7, [r2]
   29450:	str	ip, [r2, #4]
   29454:	str	lr, [r2, #8]
   29458:	sub	r2, r2, #16
   2945c:	bgt	29438 <__assert_fail@plt+0x1778c>
   29460:	ldr	r7, [sp, #36]	; 0x24
   29464:	mov	r1, #0
   29468:	b	2949c <__assert_fail@plt+0x177f0>
   2946c:	add	r2, r0, r1, lsl #2
   29470:	ldr	r3, [r2, #-4]
   29474:	cmp	r3, r7
   29478:	ble	2949c <__assert_fail@plt+0x177f0>
   2947c:	sub	r1, r1, #2
   29480:	str	r3, [r2]
   29484:	sub	r1, r1, #1
   29488:	ldr	r3, [r2, #-8]
   2948c:	sub	r2, r2, #4
   29490:	cmp	r3, r7
   29494:	bgt	29480 <__assert_fail@plt+0x177d4>
   29498:	add	r1, r1, #2
   2949c:	str	r7, [r0, r1, lsl #2]
   294a0:	b	291f4 <__assert_fail@plt+0x17548>
   294a4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   294a8:	ldr	r7, [sp, #24]
   294ac:	ldr	sl, [sp, #20]
   294b0:	bl	1b4e8 <__assert_fail@plt+0x983c>
   294b4:	ldr	r4, [fp, #16]
   294b8:	mov	r0, #0
   294bc:	add	r8, sp, #48	; 0x30
   294c0:	str	r0, [fp, #-52]	; 0xffffffcc
   294c4:	ldr	r0, [sp, #52]	; 0x34
   294c8:	cmp	r0, #0
   294cc:	beq	29514 <__assert_fail@plt+0x17868>
   294d0:	mov	r0, r7
   294d4:	mov	r1, r8
   294d8:	mov	r2, sl
   294dc:	mov	r3, r4
   294e0:	bl	29800 <__assert_fail@plt+0x17b54>
   294e4:	cmp	r0, #0
   294e8:	str	r0, [fp, #-52]	; 0xffffffcc
   294ec:	bne	296f4 <__assert_fail@plt+0x17a48>
   294f0:	ldr	r2, [sp, #28]
   294f4:	mov	r0, r9
   294f8:	mov	r1, r8
   294fc:	mov	r3, sl
   29500:	str	r4, [sp]
   29504:	bl	29938 <__assert_fail@plt+0x17c8c>
   29508:	cmp	r0, #0
   2950c:	str	r0, [fp, #-52]	; 0xffffffcc
   29510:	bne	296f4 <__assert_fail@plt+0x17a48>
   29514:	cmn	r5, #1
   29518:	ble	29550 <__assert_fail@plt+0x178a4>
   2951c:	ldr	r0, [r9, #48]	; 0x30
   29520:	cmp	r0, r5
   29524:	beq	295dc <__assert_fail@plt+0x17930>
   29528:	ldr	r0, [r9, #80]	; 0x50
   2952c:	cmp	r0, #2
   29530:	blt	29558 <__assert_fail@plt+0x178ac>
   29534:	ldr	r0, [r9, #8]
   29538:	ldr	r6, [r0, r5, lsl #2]
   2953c:	cmn	r6, #1
   29540:	bne	29588 <__assert_fail@plt+0x178dc>
   29544:	sub	r5, r5, #1
   29548:	cmn	r5, #1
   2954c:	bne	29538 <__assert_fail@plt+0x1788c>
   29550:	ldr	r3, [r9, #60]	; 0x3c
   29554:	b	295b0 <__assert_fail@plt+0x17904>
   29558:	ldr	r0, [r9, #4]
   2955c:	ldr	r1, [r9, #68]	; 0x44
   29560:	mov	r3, #1
   29564:	ldrb	r0, [r0, r5]
   29568:	ubfx	r2, r0, #5, #3
   2956c:	ldr	r1, [r1, r2, lsl #2]
   29570:	and	r2, r0, #31
   29574:	tst	r1, r3, lsl r2
   29578:	moveq	r3, #0
   2957c:	cmpeq	r0, #10
   29580:	bne	295b0 <__assert_fail@plt+0x17904>
   29584:	b	295a0 <__assert_fail@plt+0x178f4>
   29588:	ldrb	r0, [r9, #78]	; 0x4e
   2958c:	cmp	r0, #0
   29590:	bne	295ec <__assert_fail@plt+0x17940>
   29594:	mov	r3, #0
   29598:	cmp	r6, #10
   2959c:	bne	295b0 <__assert_fail@plt+0x17904>
   295a0:	ldrb	r0, [r9, #77]	; 0x4d
   295a4:	cmp	r0, #0
   295a8:	movwne	r0, #1
   295ac:	lsl	r3, r0, #1
   295b0:	sub	r0, fp, #52	; 0x34
   295b4:	mov	r1, r7
   295b8:	mov	r2, r8
   295bc:	bl	26a48 <__assert_fail@plt+0x14d9c>
   295c0:	cmp	r0, #0
   295c4:	str	r0, [sp, #40]	; 0x28
   295c8:	bne	2906c <__assert_fail@plt+0x173c0>
   295cc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   295d0:	cmp	r0, #0
   295d4:	beq	2906c <__assert_fail@plt+0x173c0>
   295d8:	b	296f4 <__assert_fail@plt+0x17a48>
   295dc:	ldr	r0, [r9, #88]	; 0x58
   295e0:	and	r0, r0, #2
   295e4:	eor	r3, r0, #10
   295e8:	b	295b0 <__assert_fail@plt+0x17904>
   295ec:	mov	r0, r6
   295f0:	bl	11afc <iswalnum@plt>
   295f4:	mov	r3, #1
   295f8:	cmp	r6, #95	; 0x5f
   295fc:	beq	295b0 <__assert_fail@plt+0x17904>
   29600:	cmp	r0, #0
   29604:	beq	29594 <__assert_fail@plt+0x178e8>
   29608:	b	295b0 <__assert_fail@plt+0x17904>
   2960c:	ldr	r5, [fp, #12]
   29610:	ldr	r0, [sp, #56]	; 0x38
   29614:	bl	1b4e8 <__assert_fail@plt+0x983c>
   29618:	ldr	r0, [r9, #100]	; 0x64
   2961c:	ldr	r1, [fp, #12]
   29620:	mov	sl, #1
   29624:	ldr	r1, [r0, r1, lsl #2]
   29628:	ldr	r0, [sp, #16]
   2962c:	str	r5, [r0]
   29630:	ldr	r0, [sp, #12]
   29634:	cmp	r1, #0
   29638:	addne	r1, r1, #4
   2963c:	str	r0, [r9, #40]	; 0x28
   29640:	ldr	r0, [sp, #8]
   29644:	str	r0, [r9, #100]	; 0x64
   29648:	beq	296ac <__assert_fail@plt+0x17a00>
   2964c:	ldr	r2, [r1, #4]
   29650:	cmp	r2, #1
   29654:	blt	296a8 <__assert_fail@plt+0x179fc>
   29658:	ldr	r0, [fp, #8]
   2965c:	ldr	r1, [r1, #8]
   29660:	subs	r2, r2, #1
   29664:	mov	sl, #0
   29668:	mov	r3, #0
   2966c:	beq	29698 <__assert_fail@plt+0x179ec>
   29670:	mov	r3, #0
   29674:	mov	r7, #1
   29678:	add	r5, r3, r2
   2967c:	lsr	r4, r5, #1
   29680:	ldr	r6, [r1, r4, lsl #2]
   29684:	cmp	r6, r0
   29688:	addlt	r3, r7, r5, lsr #1
   2968c:	movge	r2, r4
   29690:	cmp	r3, r2
   29694:	bcc	29678 <__assert_fail@plt+0x179cc>
   29698:	ldr	r1, [r1, r3, lsl #2]
   2969c:	cmp	r1, r0
   296a0:	movne	sl, #1
   296a4:	b	296ac <__assert_fail@plt+0x17a00>
   296a8:	mov	sl, #1
   296ac:	mov	r0, sl
   296b0:	sub	sp, fp, #28
   296b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   296b8:	mov	r0, #0
   296bc:	str	r0, [sp, #52]	; 0x34
   296c0:	str	r0, [sp, #48]	; 0x30
   296c4:	str	r0, [sp, #56]	; 0x38
   296c8:	str	r0, [fp, #-52]	; 0xffffffcc
   296cc:	b	28f78 <__assert_fail@plt+0x172cc>
   296d0:	mov	r0, #0
   296d4:	str	r0, [sp, #48]	; 0x30
   296d8:	str	r0, [sp, #52]	; 0x34
   296dc:	mov	r7, #12
   296e0:	b	296e8 <__assert_fail@plt+0x17a3c>
   296e4:	mov	r7, r0
   296e8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   296ec:	bl	1b4e8 <__assert_fail@plt+0x983c>
   296f0:	str	r7, [fp, #-52]	; 0xffffffcc
   296f4:	ldr	r0, [sp, #56]	; 0x38
   296f8:	bl	1b4e8 <__assert_fail@plt+0x983c>
   296fc:	ldr	sl, [fp, #-52]	; 0xffffffcc
   29700:	b	296ac <__assert_fail@plt+0x17a00>
   29704:	mov	r0, #0
   29708:	mov	r7, #12
   2970c:	str	r0, [fp, #-48]	; 0xffffffd0
   29710:	str	r0, [fp, #-44]	; 0xffffffd4
   29714:	b	296ec <__assert_fail@plt+0x17a40>
   29718:	mvn	r1, #-2147483648	; 0x80000000
   2971c:	mov	sl, #12
   29720:	sub	r1, r1, r4
   29724:	cmp	r1, r2
   29728:	ble	296ac <__assert_fail@plt+0x17a00>
   2972c:	add	r8, r2, #1
   29730:	str	lr, [sp, #40]	; 0x28
   29734:	add	r5, r8, r4
   29738:	cmn	r5, #-1073741823	; 0xc0000001
   2973c:	bhi	296ac <__assert_fail@plt+0x17a00>
   29740:	ldr	r0, [ip, #8]
   29744:	lsl	r1, r5, #2
   29748:	mov	r6, ip
   2974c:	bl	1b64c <__assert_fail@plt+0x99a0>
   29750:	cmp	r0, #0
   29754:	beq	296ac <__assert_fail@plt+0x17a00>
   29758:	str	r5, [r6, #4]
   2975c:	str	r0, [r6, #8]
   29760:	add	r0, r0, r4, lsl #2
   29764:	lsl	r2, r8, #2
   29768:	mov	r1, #0
   2976c:	bl	11b2c <memset@plt>
   29770:	ldr	r0, [sp, #44]	; 0x2c
   29774:	ldr	r7, [sp, #24]
   29778:	ldr	sl, [sp, #20]
   2977c:	ldr	lr, [sp, #40]	; 0x28
   29780:	mov	ip, r6
   29784:	b	28e0c <__assert_fail@plt+0x17160>
   29788:	ldr	r8, [r0, #60]	; 0x3c
   2978c:	b	28ee4 <__assert_fail@plt+0x17238>
   29790:	and	r0, r1, #2
   29794:	eor	r8, r0, #10
   29798:	b	28ee4 <__assert_fail@plt+0x17238>
   2979c:	mov	sl, r0
   297a0:	ldr	r0, [sp, #56]	; 0x38
   297a4:	bl	1b4e8 <__assert_fail@plt+0x983c>
   297a8:	b	296ac <__assert_fail@plt+0x17a00>
   297ac:	mov	r0, #0
   297b0:	mov	sl, #12
   297b4:	str	r0, [sp, #48]	; 0x30
   297b8:	str	r0, [sp, #52]	; 0x34
   297bc:	str	sl, [fp, #-52]	; 0xffffffcc
   297c0:	b	296ac <__assert_fail@plt+0x17a00>
   297c4:	mov	r0, r6
   297c8:	str	lr, [sp, #40]	; 0x28
   297cc:	mov	r4, ip
   297d0:	bl	11afc <iswalnum@plt>
   297d4:	mov	r8, #1
   297d8:	cmp	r6, #95	; 0x5f
   297dc:	beq	297f4 <__assert_fail@plt+0x17b48>
   297e0:	ldr	lr, [sp, #40]	; 0x28
   297e4:	cmp	r0, #0
   297e8:	mov	ip, r4
   297ec:	beq	28ec4 <__assert_fail@plt+0x17218>
   297f0:	b	28ee4 <__assert_fail@plt+0x17238>
   297f4:	ldr	lr, [sp, #40]	; 0x28
   297f8:	mov	ip, r4
   297fc:	b	28ee4 <__assert_fail@plt+0x17238>
   29800:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29804:	add	fp, sp, #28
   29808:	sub	sp, sp, #20
   2980c:	str	r0, [sp, #4]
   29810:	ldr	r0, [r1, #4]
   29814:	mov	sl, r1
   29818:	mov	r1, #0
   2981c:	mov	r5, r3
   29820:	mov	r8, r2
   29824:	str	r1, [sp, #12]
   29828:	str	r0, [sp, #8]
   2982c:	lsl	r0, r0, #2
   29830:	bl	1b5b8 <__assert_fail@plt+0x990c>
   29834:	cmp	r0, #0
   29838:	str	r0, [sp, #16]
   2983c:	beq	29930 <__assert_fail@plt+0x17c84>
   29840:	ldr	r0, [sl, #4]
   29844:	cmp	r0, #1
   29848:	blt	298f8 <__assert_fail@plt+0x17c4c>
   2984c:	mov	r9, #0
   29850:	ldr	r0, [sl, #8]
   29854:	ldr	r1, [sp, #4]
   29858:	ldr	r2, [r0, r9, lsl #2]
   2985c:	ldr	r1, [r1, #24]
   29860:	add	r0, r2, r2, lsl #1
   29864:	add	r1, r1, r0, lsl #2
   29868:	ldr	r0, [r1, #4]
   2986c:	cmp	r0, #1
   29870:	blt	298d8 <__assert_fail@plt+0x17c2c>
   29874:	ldr	r7, [sp, #4]
   29878:	ldr	r3, [r1, #8]
   2987c:	ldr	r7, [r7]
   29880:	b	29890 <__assert_fail@plt+0x17be4>
   29884:	add	r3, r3, #4
   29888:	subs	r0, r0, #1
   2988c:	beq	298d8 <__assert_fail@plt+0x17c2c>
   29890:	ldr	r6, [r3]
   29894:	add	r4, r7, r6, lsl #3
   29898:	ldrb	r4, [r4, #4]
   2989c:	cmp	r4, r5
   298a0:	bne	29884 <__assert_fail@plt+0x17bd8>
   298a4:	ldr	r4, [r7, r6, lsl #3]
   298a8:	cmp	r4, r8
   298ac:	bne	29884 <__assert_fail@plt+0x17bd8>
   298b0:	cmn	r6, #1
   298b4:	beq	298d8 <__assert_fail@plt+0x17c2c>
   298b8:	ldr	r0, [sp, #4]
   298bc:	add	r1, sp, #8
   298c0:	mov	r3, r8
   298c4:	str	r5, [sp]
   298c8:	bl	29ec8 <__assert_fail@plt+0x1821c>
   298cc:	cmp	r0, #0
   298d0:	beq	298e8 <__assert_fail@plt+0x17c3c>
   298d4:	b	29920 <__assert_fail@plt+0x17c74>
   298d8:	add	r0, sp, #8
   298dc:	bl	26748 <__assert_fail@plt+0x14a9c>
   298e0:	cmp	r0, #0
   298e4:	bne	29920 <__assert_fail@plt+0x17c74>
   298e8:	ldr	r0, [sl, #4]
   298ec:	add	r9, r9, #1
   298f0:	cmp	r9, r0
   298f4:	blt	29850 <__assert_fail@plt+0x17ba4>
   298f8:	ldr	r0, [sl, #8]
   298fc:	bl	1b4e8 <__assert_fail@plt+0x983c>
   29900:	vldr	d16, [sp, #8]
   29904:	ldr	r0, [sp, #16]
   29908:	mov	r7, #0
   2990c:	str	r0, [sl, #8]
   29910:	vstr	d16, [sl]
   29914:	mov	r0, r7
   29918:	sub	sp, fp, #28
   2991c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29920:	mov	r7, r0
   29924:	ldr	r0, [sp, #16]
   29928:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2992c:	b	29914 <__assert_fail@plt+0x17c68>
   29930:	mov	r7, #12
   29934:	b	29914 <__assert_fail@plt+0x17c68>
   29938:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2993c:	add	fp, sp, #28
   29940:	sub	sp, sp, #52	; 0x34
   29944:	ldr	ip, [r0, #108]	; 0x6c
   29948:	mov	lr, r1
   2994c:	ldr	r1, [r0, #84]	; 0x54
   29950:	str	r0, [sp, #24]
   29954:	mov	sl, r2
   29958:	mov	r8, #0
   2995c:	mov	r0, #0
   29960:	cmp	ip, #1
   29964:	str	r1, [sp, #28]
   29968:	blt	299ac <__assert_fail@plt+0x17d00>
   2996c:	ldr	r0, [sp, #24]
   29970:	mov	r7, #1
   29974:	mov	r1, ip
   29978:	ldr	r2, [r0, #116]	; 0x74
   2997c:	mov	r0, #0
   29980:	add	r6, r1, r0
   29984:	add	r6, r6, r6, lsr #31
   29988:	asr	r4, r6, #1
   2998c:	add	r5, r4, r4, lsl #1
   29990:	add	r5, r2, r5, lsl #3
   29994:	ldr	r5, [r5, #4]
   29998:	cmp	r5, sl
   2999c:	addlt	r0, r7, r6, asr #1
   299a0:	movge	r1, r4
   299a4:	cmp	r0, r1
   299a8:	blt	29980 <__assert_fail@plt+0x17cd4>
   299ac:	cmp	r0, ip
   299b0:	bge	29eb4 <__assert_fail@plt+0x18208>
   299b4:	cmn	r0, #1
   299b8:	beq	29eb4 <__assert_fail@plt+0x18208>
   299bc:	ldr	r1, [sp, #24]
   299c0:	add	r0, r0, r0, lsl #1
   299c4:	str	r0, [sp, #8]
   299c8:	ldr	r1, [r1, #116]	; 0x74
   299cc:	add	r0, r1, r0, lsl #3
   299d0:	ldr	r0, [r0, #4]
   299d4:	cmp	r0, sl
   299d8:	bne	29eb4 <__assert_fail@plt+0x18208>
   299dc:	str	r3, [sp, #12]
   299e0:	mov	r9, #1
   299e4:	str	lr, [sp, #16]
   299e8:	ldr	r0, [sp, #8]
   299ec:	add	r0, r1, r0, lsl #3
   299f0:	b	29a90 <__assert_fail@plt+0x17de4>
   299f4:	mov	r0, #4
   299f8:	str	r9, [sp, #36]	; 0x24
   299fc:	mov	r4, r1
   29a00:	str	r9, [sp, #32]
   29a04:	bl	1b5b8 <__assert_fail@plt+0x990c>
   29a08:	cmp	r0, #0
   29a0c:	str	r0, [sp, #40]	; 0x28
   29a10:	beq	29d28 <__assert_fail@plt+0x1807c>
   29a14:	str	r4, [r0]
   29a18:	mov	r0, #0
   29a1c:	str	r0, [fp, #-32]	; 0xffffffe0
   29a20:	ldr	r1, [sp, #28]
   29a24:	sub	r0, fp, #32
   29a28:	add	r2, sp, #32
   29a2c:	bl	2a000 <__assert_fail@plt+0x18354>
   29a30:	ldr	r4, [sp, #24]
   29a34:	ldr	r1, [r4, #100]	; 0x64
   29a38:	str	r0, [r1, r7, lsl #2]
   29a3c:	ldr	r0, [sp, #40]	; 0x28
   29a40:	bl	1b4e8 <__assert_fail@plt+0x983c>
   29a44:	ldr	r0, [r4, #100]	; 0x64
   29a48:	ldr	r1, [fp, #-32]	; 0xffffffe0
   29a4c:	ldr	r0, [r0, r7, lsl #2]
   29a50:	cmp	r1, #0
   29a54:	mov	r2, r1
   29a58:	movwne	r2, #1
   29a5c:	clz	r0, r0
   29a60:	lsr	r0, r0, #5
   29a64:	ands	r0, r0, r2
   29a68:	ldreq	r1, [sp, #20]
   29a6c:	str	r1, [sp, #20]
   29a70:	ldr	lr, [sp, #16]
   29a74:	cmp	r0, #0
   29a78:	cmpne	r0, #4
   29a7c:	bne	29e9c <__assert_fail@plt+0x181f0>
   29a80:	ldrb	r1, [r8, #20]
   29a84:	add	r0, r8, #24
   29a88:	cmp	r1, #0
   29a8c:	beq	29eb0 <__assert_fail@plt+0x18204>
   29a90:	mov	r8, r0
   29a94:	ldr	r0, [lr, #4]
   29a98:	cmp	r0, #1
   29a9c:	blt	29a80 <__assert_fail@plt+0x17dd4>
   29aa0:	subs	r6, r0, #1
   29aa4:	ldr	r2, [r8]
   29aa8:	ldr	r0, [lr, #8]
   29aac:	mov	r3, #0
   29ab0:	beq	29ad8 <__assert_fail@plt+0x17e2c>
   29ab4:	mov	r1, r6
   29ab8:	add	r7, r3, r1
   29abc:	lsr	r5, r7, #1
   29ac0:	ldr	r4, [r0, r5, lsl #2]
   29ac4:	cmp	r4, r2
   29ac8:	addlt	r3, r9, r7, lsr #1
   29acc:	movge	r1, r5
   29ad0:	cmp	r3, r1
   29ad4:	bcc	29ab8 <__assert_fail@plt+0x17e0c>
   29ad8:	ldr	r1, [r0, r3, lsl #2]
   29adc:	cmp	r1, r2
   29ae0:	bne	29a80 <__assert_fail@plt+0x17dd4>
   29ae4:	ldr	r3, [r8, #12]
   29ae8:	ldr	r1, [r8, #8]
   29aec:	add	r3, r3, sl
   29af0:	sub	r7, r3, r1
   29af4:	cmp	r7, sl
   29af8:	bne	29be4 <__assert_fail@plt+0x17f38>
   29afc:	ldr	r1, [sp, #28]
   29b00:	add	r2, r2, r2, lsl #1
   29b04:	cmp	r6, #0
   29b08:	ldr	r1, [r1, #20]
   29b0c:	add	r1, r1, r2, lsl #2
   29b10:	mov	r2, #0
   29b14:	ldr	r1, [r1, #8]
   29b18:	ldr	r4, [r1]
   29b1c:	beq	29b40 <__assert_fail@plt+0x17e94>
   29b20:	add	r1, r2, r6
   29b24:	lsr	r3, r1, #1
   29b28:	ldr	r7, [r0, r3, lsl #2]
   29b2c:	cmp	r7, r4
   29b30:	addlt	r2, r9, r1, lsr #1
   29b34:	movge	r6, r3
   29b38:	cmp	r2, r6
   29b3c:	bcc	29b20 <__assert_fail@plt+0x17e74>
   29b40:	ldr	r1, [r0, r2, lsl #2]
   29b44:	mov	r0, #4
   29b48:	cmp	r1, r4
   29b4c:	beq	29a74 <__assert_fail@plt+0x17dc8>
   29b50:	mov	r0, #4
   29b54:	str	r9, [sp, #36]	; 0x24
   29b58:	str	r9, [sp, #32]
   29b5c:	bl	1b5b8 <__assert_fail@plt+0x990c>
   29b60:	cmp	r0, #0
   29b64:	str	r0, [sp, #40]	; 0x28
   29b68:	beq	29d14 <__assert_fail@plt+0x18068>
   29b6c:	mov	r6, #0
   29b70:	str	r4, [r0]
   29b74:	ldr	r0, [sp, #28]
   29b78:	ldr	r2, [sp, #12]
   29b7c:	ldr	r3, [fp, #8]
   29b80:	add	r4, sp, #32
   29b84:	str	r6, [fp, #-32]	; 0xffffffe0
   29b88:	mov	r1, r4
   29b8c:	bl	29800 <__assert_fail@plt+0x17b54>
   29b90:	ldr	r5, [sp, #16]
   29b94:	mov	r7, r0
   29b98:	mov	r1, r4
   29b9c:	mov	r0, r5
   29ba0:	bl	26748 <__assert_fail@plt+0x14a9c>
   29ba4:	mov	r4, r0
   29ba8:	ldr	r0, [sp, #40]	; 0x28
   29bac:	bl	1b4e8 <__assert_fail@plt+0x983c>
   29bb0:	orr	r0, r7, r6
   29bb4:	mov	lr, r5
   29bb8:	orrs	r0, r0, r4
   29bbc:	mov	r0, #2
   29bc0:	beq	29a74 <__assert_fail@plt+0x17dc8>
   29bc4:	cmp	r7, #0
   29bc8:	mov	r0, #1
   29bcc:	movne	r4, r7
   29bd0:	cmp	r6, #0
   29bd4:	movne	r4, r6
   29bd8:	str	r4, [fp, #-32]	; 0xffffffe0
   29bdc:	str	r4, [sp, #20]
   29be0:	b	29a74 <__assert_fail@plt+0x17dc8>
   29be4:	ldr	r0, [sp, #24]
   29be8:	ldr	r0, [r0, #100]	; 0x64
   29bec:	ldr	r5, [r0, r7, lsl #2]
   29bf0:	ldr	r0, [sp, #28]
   29bf4:	ldr	r0, [r0, #12]
   29bf8:	cmp	r5, #0
   29bfc:	ldr	r1, [r0, r2, lsl #2]
   29c00:	beq	299f4 <__assert_fail@plt+0x17d48>
   29c04:	ldr	ip, [r5, #8]
   29c08:	cmp	ip, #0
   29c0c:	ble	29ccc <__assert_fail@plt+0x18020>
   29c10:	ldr	r0, [r5, #12]
   29c14:	subs	r3, ip, #1
   29c18:	mov	r2, #0
   29c1c:	str	r7, [sp, #4]
   29c20:	beq	29c44 <__assert_fail@plt+0x17f98>
   29c24:	add	r6, r2, r3
   29c28:	lsr	r7, r6, #1
   29c2c:	ldr	r4, [r0, r7, lsl #2]
   29c30:	cmp	r4, r1
   29c34:	addlt	r2, r9, r6, lsr #1
   29c38:	movge	r3, r7
   29c3c:	cmp	r2, r3
   29c40:	bcc	29c24 <__assert_fail@plt+0x17f78>
   29c44:	ldr	r2, [r0, r2, lsl #2]
   29c48:	mov	r0, #4
   29c4c:	cmp	r2, r1
   29c50:	beq	29a74 <__assert_fail@plt+0x17dc8>
   29c54:	ldr	r7, [sp, #4]
   29c58:	mov	r4, r1
   29c5c:	cmp	ip, #1
   29c60:	str	ip, [sp, #36]	; 0x24
   29c64:	blt	29cd4 <__assert_fail@plt+0x18028>
   29c68:	lsl	r0, ip, #2
   29c6c:	str	ip, [sp, #32]
   29c70:	bl	1b5b8 <__assert_fail@plt+0x990c>
   29c74:	cmp	r0, #0
   29c78:	str	r0, [sp, #40]	; 0x28
   29c7c:	beq	29d7c <__assert_fail@plt+0x180d0>
   29c80:	ldr	r2, [r5, #8]
   29c84:	ldr	r1, [r5, #12]
   29c88:	mov	r5, r0
   29c8c:	lsl	r2, r2, #2
   29c90:	bl	118ec <memcpy@plt>
   29c94:	ldr	r1, [sp, #32]
   29c98:	mov	r6, #0
   29c9c:	str	r6, [fp, #-32]	; 0xffffffe0
   29ca0:	cmp	r1, #0
   29ca4:	beq	29ce8 <__assert_fail@plt+0x1803c>
   29ca8:	ldr	r0, [sp, #36]	; 0x24
   29cac:	cmp	r0, #0
   29cb0:	bne	29d90 <__assert_fail@plt+0x180e4>
   29cb4:	str	r4, [r5]
   29cb8:	str	r9, [sp, #36]	; 0x24
   29cbc:	mov	r6, #0
   29cc0:	cmp	r6, #0
   29cc4:	beq	29a20 <__assert_fail@plt+0x17d74>
   29cc8:	b	29d54 <__assert_fail@plt+0x180a8>
   29ccc:	mov	r4, r1
   29cd0:	str	ip, [sp, #36]	; 0x24
   29cd4:	mov	r6, #0
   29cd8:	str	r6, [sp, #36]	; 0x24
   29cdc:	str	r6, [sp, #32]
   29ce0:	str	r6, [sp, #40]	; 0x28
   29ce4:	str	r6, [fp, #-32]	; 0xffffffe0
   29ce8:	mov	r0, #4
   29cec:	str	r9, [sp, #36]	; 0x24
   29cf0:	str	r9, [sp, #32]
   29cf4:	bl	1b5b8 <__assert_fail@plt+0x990c>
   29cf8:	cmp	r0, #0
   29cfc:	str	r0, [sp, #40]	; 0x28
   29d00:	beq	29d48 <__assert_fail@plt+0x1809c>
   29d04:	str	r4, [r0]
   29d08:	cmp	r6, #0
   29d0c:	beq	29a20 <__assert_fail@plt+0x17d74>
   29d10:	b	29d54 <__assert_fail@plt+0x180a8>
   29d14:	mov	r0, #0
   29d18:	mov	r6, #12
   29d1c:	str	r0, [sp, #32]
   29d20:	str	r0, [sp, #36]	; 0x24
   29d24:	b	29b74 <__assert_fail@plt+0x17ec8>
   29d28:	mov	r0, #0
   29d2c:	mov	r1, #12
   29d30:	str	r0, [sp, #32]
   29d34:	str	r0, [sp, #36]	; 0x24
   29d38:	mov	r0, #12
   29d3c:	str	r1, [fp, #-32]	; 0xffffffe0
   29d40:	str	r0, [sp, #20]
   29d44:	b	29d74 <__assert_fail@plt+0x180c8>
   29d48:	mov	r0, #0
   29d4c:	str	r0, [sp, #32]
   29d50:	str	r0, [sp, #36]	; 0x24
   29d54:	clz	r0, r6
   29d58:	lsr	r4, r0, #5
   29d5c:	ldr	r0, [sp, #40]	; 0x28
   29d60:	bl	1b4e8 <__assert_fail@plt+0x983c>
   29d64:	cmp	r4, #0
   29d68:	movwne	r6, #12
   29d6c:	str	r6, [sp, #20]
   29d70:	str	r6, [fp, #-32]	; 0xffffffe0
   29d74:	mov	r0, #1
   29d78:	b	29a70 <__assert_fail@plt+0x17dc4>
   29d7c:	mov	r0, #0
   29d80:	mov	r6, #12
   29d84:	str	r0, [sp, #32]
   29d88:	str	r0, [sp, #36]	; 0x24
   29d8c:	b	29ce4 <__assert_fail@plt+0x18038>
   29d90:	cmp	r1, r0
   29d94:	bne	29dc0 <__assert_fail@plt+0x18114>
   29d98:	lsl	r0, r1, #1
   29d9c:	lsl	r1, r1, #3
   29da0:	str	r0, [sp, #32]
   29da4:	mov	r0, r5
   29da8:	bl	1b64c <__assert_fail@plt+0x99a0>
   29dac:	cmp	r0, #0
   29db0:	beq	29e94 <__assert_fail@plt+0x181e8>
   29db4:	str	r0, [sp, #40]	; 0x28
   29db8:	mov	r5, r0
   29dbc:	ldr	r0, [sp, #36]	; 0x24
   29dc0:	ldr	r1, [r5]
   29dc4:	cmp	r1, r4
   29dc8:	ble	29e3c <__assert_fail@plt+0x18190>
   29dcc:	cmp	r0, #1
   29dd0:	blt	29e70 <__assert_fail@plt+0x181c4>
   29dd4:	ands	r2, r0, #3
   29dd8:	sub	r1, r0, #1
   29ddc:	beq	29e00 <__assert_fail@plt+0x18154>
   29de0:	add	r6, r5, r0, lsl #2
   29de4:	mov	r3, r6
   29de8:	ldr	r7, [r3, #-4]!
   29dec:	subs	r2, r2, #1
   29df0:	sub	r0, r0, #1
   29df4:	str	r7, [r6]
   29df8:	mov	r6, r3
   29dfc:	bne	29de8 <__assert_fail@plt+0x1813c>
   29e00:	cmp	r1, #3
   29e04:	bcc	29e34 <__assert_fail@plt+0x18188>
   29e08:	add	r1, r5, r0, lsl #2
   29e0c:	sub	r1, r1, #8
   29e10:	ldr	r6, [r1, #4]
   29e14:	ldmda	r1, {r2, r3, r7}
   29e18:	sub	ip, r1, #4
   29e1c:	sub	r0, r0, #4
   29e20:	cmp	r0, #0
   29e24:	stm	ip, {r2, r3, r7}
   29e28:	str	r6, [r1, #8]
   29e2c:	sub	r1, r1, #16
   29e30:	bgt	29e10 <__assert_fail@plt+0x18164>
   29e34:	mov	r0, #0
   29e38:	b	29e70 <__assert_fail@plt+0x181c4>
   29e3c:	add	r1, r5, r0, lsl #2
   29e40:	ldr	r2, [r1, #-4]
   29e44:	cmp	r2, r4
   29e48:	ble	29e70 <__assert_fail@plt+0x181c4>
   29e4c:	sub	r0, r0, #2
   29e50:	mov	r3, r4
   29e54:	str	r2, [r1]
   29e58:	sub	r0, r0, #1
   29e5c:	ldr	r2, [r1, #-8]
   29e60:	sub	r1, r1, #4
   29e64:	cmp	r2, r3
   29e68:	bgt	29e54 <__assert_fail@plt+0x181a8>
   29e6c:	add	r0, r0, #2
   29e70:	str	r4, [r5, r0, lsl #2]
   29e74:	ldr	r7, [sp, #4]
   29e78:	mov	r6, #0
   29e7c:	ldr	r0, [sp, #36]	; 0x24
   29e80:	add	r0, r0, #1
   29e84:	str	r0, [sp, #36]	; 0x24
   29e88:	cmp	r6, #0
   29e8c:	beq	29a20 <__assert_fail@plt+0x17d74>
   29e90:	b	29d54 <__assert_fail@plt+0x180a8>
   29e94:	mov	r6, #0
   29e98:	b	29d54 <__assert_fail@plt+0x180a8>
   29e9c:	cmp	r0, #2
   29ea0:	bne	29ec0 <__assert_fail@plt+0x18214>
   29ea4:	ldr	r0, [sp, #24]
   29ea8:	ldr	r1, [r0, #116]	; 0x74
   29eac:	b	299e8 <__assert_fail@plt+0x17d3c>
   29eb0:	mov	r8, #0
   29eb4:	mov	r0, r8
   29eb8:	sub	sp, fp, #28
   29ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29ec0:	ldr	r8, [sp, #20]
   29ec4:	b	29eb4 <__assert_fail@plt+0x18208>
   29ec8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ecc:	add	fp, sp, #28
   29ed0:	sub	sp, sp, #4
   29ed4:	ldr	r4, [fp, #8]
   29ed8:	mov	r9, r3
   29edc:	mov	r7, r2
   29ee0:	mov	r8, r1
   29ee4:	mov	sl, r0
   29ee8:	mov	r5, #1
   29eec:	b	29f04 <__assert_fail@plt+0x18258>
   29ef0:	cmp	r2, #0
   29ef4:	beq	29fe8 <__assert_fail@plt+0x1833c>
   29ef8:	add	r0, r0, r7, lsl #2
   29efc:	ldr	r0, [r0, #8]
   29f00:	ldr	r7, [r0]
   29f04:	ldr	r0, [r8, #4]
   29f08:	cmp	r0, #1
   29f0c:	blt	29f54 <__assert_fail@plt+0x182a8>
   29f10:	subs	r2, r0, #1
   29f14:	ldr	r0, [r8, #8]
   29f18:	mov	ip, r4
   29f1c:	mov	r1, #0
   29f20:	beq	29f44 <__assert_fail@plt+0x18298>
   29f24:	add	r3, r1, r2
   29f28:	lsr	r6, r3, #1
   29f2c:	ldr	r4, [r0, r6, lsl #2]
   29f30:	cmp	r4, r7
   29f34:	addlt	r1, r5, r3, lsr #1
   29f38:	movge	r2, r6
   29f3c:	cmp	r1, r2
   29f40:	bcc	29f24 <__assert_fail@plt+0x18278>
   29f44:	ldr	r0, [r0, r1, lsl #2]
   29f48:	mov	r4, ip
   29f4c:	cmp	r0, r7
   29f50:	beq	29fe8 <__assert_fail@plt+0x1833c>
   29f54:	ldr	r0, [sl]
   29f58:	add	r1, r0, r7, lsl #3
   29f5c:	ldrb	r1, [r1, #4]
   29f60:	cmp	r1, r4
   29f64:	bne	29f74 <__assert_fail@plt+0x182c8>
   29f68:	ldr	r0, [r0, r7, lsl #3]
   29f6c:	cmp	r0, r9
   29f70:	beq	29fcc <__assert_fail@plt+0x18320>
   29f74:	mov	r0, r8
   29f78:	mov	r1, r7
   29f7c:	bl	268d4 <__assert_fail@plt+0x14c28>
   29f80:	cmp	r0, #0
   29f84:	beq	29ff4 <__assert_fail@plt+0x18348>
   29f88:	ldr	r0, [sl, #20]
   29f8c:	add	r7, r7, r7, lsl #1
   29f90:	add	r1, r0, r7, lsl #2
   29f94:	ldr	r2, [r1, #4]
   29f98:	cmp	r2, #2
   29f9c:	bne	29ef0 <__assert_fail@plt+0x18244>
   29fa0:	ldr	r0, [r1, #8]
   29fa4:	mov	r1, r8
   29fa8:	mov	r3, r9
   29fac:	ldr	r2, [r0, #4]
   29fb0:	mov	r0, sl
   29fb4:	str	r4, [sp]
   29fb8:	bl	29ec8 <__assert_fail@plt+0x1821c>
   29fbc:	cmp	r0, #0
   29fc0:	bne	29fec <__assert_fail@plt+0x18340>
   29fc4:	ldr	r0, [sl, #20]
   29fc8:	b	29ef8 <__assert_fail@plt+0x1824c>
   29fcc:	cmp	r4, #9
   29fd0:	bne	29fe8 <__assert_fail@plt+0x1833c>
   29fd4:	mov	r0, r8
   29fd8:	mov	r1, r7
   29fdc:	bl	268d4 <__assert_fail@plt+0x14c28>
   29fe0:	cmp	r0, #0
   29fe4:	beq	29ff4 <__assert_fail@plt+0x18348>
   29fe8:	mov	r0, #0
   29fec:	sub	sp, fp, #28
   29ff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29ff4:	mov	r0, #12
   29ff8:	sub	sp, fp, #28
   29ffc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a000:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a004:	add	fp, sp, #28
   2a008:	sub	sp, sp, #4
   2a00c:	ldr	r9, [r2, #4]
   2a010:	cmp	r9, #0
   2a014:	beq	2a2d8 <__assert_fail@plt+0x1862c>
   2a018:	mov	r6, r2
   2a01c:	mov	r8, r1
   2a020:	cmp	r9, #1
   2a024:	mov	r7, r9
   2a028:	blt	2a114 <__assert_fail@plt+0x18468>
   2a02c:	ldr	ip, [r6, #8]
   2a030:	mov	sl, #0
   2a034:	cmp	r9, #4
   2a038:	mov	r7, r9
   2a03c:	bcc	2a0fc <__assert_fail@plt+0x18450>
   2a040:	mov	r3, #0
   2a044:	bic	sl, r9, #3
   2a048:	mov	r1, #1
   2a04c:	str	r8, [sp]
   2a050:	vdup.32	q8, r3
   2a054:	sub	r4, sl, #4
   2a058:	add	r1, r1, r4, lsr #2
   2a05c:	cmp	r4, #12
   2a060:	and	lr, r1, #3
   2a064:	vmov.32	d16[0], r9
   2a068:	bcc	2a0bc <__assert_fail@plt+0x18410>
   2a06c:	sub	r5, r1, lr
   2a070:	mov	r3, #0
   2a074:	mov	r4, #64	; 0x40
   2a078:	mov	r7, ip
   2a07c:	mov	r1, ip
   2a080:	vld1.32	{d18-d19}, [r1], r4
   2a084:	add	r8, r7, #16
   2a088:	add	r2, r7, #32
   2a08c:	subs	r5, r5, #4
   2a090:	add	r3, r3, #16
   2a094:	vld1.32	{d20-d21}, [r8]
   2a098:	vadd.i32	q8, q9, q8
   2a09c:	vld1.32	{d18-d19}, [r2]
   2a0a0:	add	r2, r7, #48	; 0x30
   2a0a4:	mov	r7, r1
   2a0a8:	vadd.i32	q8, q10, q8
   2a0ac:	vld1.32	{d20-d21}, [r2]
   2a0b0:	vadd.i32	q8, q9, q8
   2a0b4:	vadd.i32	q8, q10, q8
   2a0b8:	bne	2a080 <__assert_fail@plt+0x183d4>
   2a0bc:	cmp	lr, #0
   2a0c0:	beq	2a0dc <__assert_fail@plt+0x18430>
   2a0c4:	add	r1, ip, r3, lsl #2
   2a0c8:	rsb	r3, lr, #0
   2a0cc:	vld1.32	{d18-d19}, [r1]!
   2a0d0:	adds	r3, r3, #1
   2a0d4:	vadd.i32	q8, q9, q8
   2a0d8:	bcc	2a0cc <__assert_fail@plt+0x18420>
   2a0dc:	vext.8	q9, q8, q8, #8
   2a0e0:	ldr	r8, [sp]
   2a0e4:	cmp	r9, sl
   2a0e8:	vadd.i32	q8, q8, q9
   2a0ec:	vdup.32	q9, d16[1]
   2a0f0:	vadd.i32	q8, q8, q9
   2a0f4:	vmov.32	r7, d16[0]
   2a0f8:	beq	2a114 <__assert_fail@plt+0x18468>
   2a0fc:	add	r1, ip, sl, lsl #2
   2a100:	sub	r2, r9, sl
   2a104:	ldr	r3, [r1], #4
   2a108:	subs	r2, r2, #1
   2a10c:	add	r7, r3, r7
   2a110:	bne	2a104 <__assert_fail@plt+0x18458>
   2a114:	ldr	r1, [r8, #68]	; 0x44
   2a118:	ldr	r2, [r8, #32]
   2a11c:	str	r0, [sp]
   2a120:	and	r1, r1, r7
   2a124:	add	r3, r1, r1, lsl #1
   2a128:	ldr	r1, [r2, r3, lsl #2]
   2a12c:	cmp	r1, #1
   2a130:	blt	2a1ac <__assert_fail@plt+0x18500>
   2a134:	add	r2, r2, r3, lsl #2
   2a138:	sub	ip, r9, #1
   2a13c:	mov	r5, #0
   2a140:	ldr	lr, [r2, #8]
   2a144:	cmp	r6, #0
   2a148:	bne	2a160 <__assert_fail@plt+0x184b4>
   2a14c:	add	r5, r5, #1
   2a150:	cmp	r5, r1
   2a154:	bge	2a1ac <__assert_fail@plt+0x18500>
   2a158:	cmp	r6, #0
   2a15c:	beq	2a14c <__assert_fail@plt+0x184a0>
   2a160:	ldr	r4, [lr, r5, lsl #2]
   2a164:	ldr	r3, [r4]
   2a168:	cmp	r7, r3
   2a16c:	bne	2a14c <__assert_fail@plt+0x184a0>
   2a170:	ldr	r3, [r4, #8]
   2a174:	cmp	r3, r9
   2a178:	bne	2a14c <__assert_fail@plt+0x184a0>
   2a17c:	mov	r3, ip
   2a180:	add	r0, r3, #1
   2a184:	cmp	r0, #1
   2a188:	blt	2a2cc <__assert_fail@plt+0x18620>
   2a18c:	ldr	r0, [r6, #8]
   2a190:	ldr	r2, [r4, #12]
   2a194:	ldr	r0, [r0, r3, lsl #2]
   2a198:	ldr	r2, [r2, r3, lsl #2]
   2a19c:	sub	r3, r3, #1
   2a1a0:	cmp	r2, r0
   2a1a4:	beq	2a180 <__assert_fail@plt+0x184d4>
   2a1a8:	b	2a14c <__assert_fail@plt+0x184a0>
   2a1ac:	mov	r0, #56	; 0x38
   2a1b0:	mov	r1, #1
   2a1b4:	bl	1b258 <__assert_fail@plt+0x95ac>
   2a1b8:	cmp	r0, #0
   2a1bc:	beq	2a304 <__assert_fail@plt+0x18658>
   2a1c0:	mov	r4, r0
   2a1c4:	ldr	r0, [r6, #4]
   2a1c8:	add	sl, r4, #4
   2a1cc:	cmp	r0, #1
   2a1d0:	str	r0, [r4, #8]
   2a1d4:	blt	2a29c <__assert_fail@plt+0x185f0>
   2a1d8:	str	r0, [r4, #4]
   2a1dc:	lsl	r0, r0, #2
   2a1e0:	bl	1b5b8 <__assert_fail@plt+0x990c>
   2a1e4:	cmp	r0, #0
   2a1e8:	str	r0, [r4, #12]
   2a1ec:	beq	2a2f0 <__assert_fail@plt+0x18644>
   2a1f0:	ldmib	r6, {r5, r6}
   2a1f4:	mov	r1, r6
   2a1f8:	mov	r9, r8
   2a1fc:	lsl	r2, r5, #2
   2a200:	bl	118ec <memcpy@plt>
   2a204:	cmp	r5, #1
   2a208:	str	sl, [r4, #40]	; 0x28
   2a20c:	blt	2a2b4 <__assert_fail@plt+0x18608>
   2a210:	movw	ip, #65280	; 0xff00
   2a214:	ldr	sl, [r9]
   2a218:	mov	lr, #32
   2a21c:	movt	ip, #3
   2a220:	add	r8, ip, #255	; 0xff
   2a224:	b	2a248 <__assert_fail@plt+0x1859c>
   2a228:	ldr	r0, [r1]
   2a22c:	tst	r0, ip
   2a230:	beq	2a23c <__assert_fail@plt+0x18590>
   2a234:	orr	r0, r3, #128	; 0x80
   2a238:	strb	r0, [r4, #52]	; 0x34
   2a23c:	add	r6, r6, #4
   2a240:	subs	r5, r5, #1
   2a244:	beq	2a2b4 <__assert_fail@plt+0x18608>
   2a248:	ldr	r0, [r6]
   2a24c:	add	r1, sl, r0, lsl #3
   2a250:	ldr	r0, [r1, #4]!
   2a254:	and	r3, r0, r8
   2a258:	cmp	r3, #1
   2a25c:	beq	2a23c <__assert_fail@plt+0x18590>
   2a260:	ldrb	r2, [r4, #52]	; 0x34
   2a264:	and	r3, lr, r0, lsr #15
   2a268:	uxtb	r0, r0
   2a26c:	cmp	r0, #12
   2a270:	orr	r3, r2, r3
   2a274:	strb	r3, [r4, #52]	; 0x34
   2a278:	beq	2a234 <__assert_fail@plt+0x18588>
   2a27c:	cmp	r0, #4
   2a280:	beq	2a294 <__assert_fail@plt+0x185e8>
   2a284:	cmp	r0, #2
   2a288:	bne	2a228 <__assert_fail@plt+0x1857c>
   2a28c:	orr	r0, r3, #16
   2a290:	b	2a238 <__assert_fail@plt+0x1858c>
   2a294:	orr	r0, r3, #64	; 0x40
   2a298:	b	2a238 <__assert_fail@plt+0x1858c>
   2a29c:	mov	r0, #0
   2a2a0:	mov	r9, r8
   2a2a4:	str	r0, [sl]
   2a2a8:	str	r0, [sl, #4]
   2a2ac:	str	r0, [sl, #8]
   2a2b0:	str	sl, [r4, #40]	; 0x28
   2a2b4:	mov	r0, r9
   2a2b8:	mov	r1, r4
   2a2bc:	mov	r2, r7
   2a2c0:	bl	26ef8 <__assert_fail@plt+0x1524c>
   2a2c4:	cmp	r0, #0
   2a2c8:	bne	2a2e4 <__assert_fail@plt+0x18638>
   2a2cc:	mov	r0, r4
   2a2d0:	sub	sp, fp, #28
   2a2d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a2d8:	mov	r4, #0
   2a2dc:	str	r4, [r0]
   2a2e0:	b	2a2cc <__assert_fail@plt+0x18620>
   2a2e4:	mov	r0, r4
   2a2e8:	bl	20a88 <__assert_fail@plt+0xeddc>
   2a2ec:	b	2a304 <__assert_fail@plt+0x18658>
   2a2f0:	mov	r0, #0
   2a2f4:	str	r0, [r4, #4]
   2a2f8:	str	r0, [r4, #8]
   2a2fc:	mov	r0, r4
   2a300:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2a304:	ldr	r1, [sp]
   2a308:	mov	r0, #12
   2a30c:	mov	r4, #0
   2a310:	str	r0, [r1]
   2a314:	b	2a2cc <__assert_fail@plt+0x18620>
   2a318:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2a31c:	add	fp, sp, #24
   2a320:	ldr	lr, [r0]
   2a324:	add	r7, lr, r1, lsl #3
   2a328:	ldrb	r9, [r7, #4]
   2a32c:	cmp	r9, #7
   2a330:	beq	2a508 <__assert_fail@plt+0x1885c>
   2a334:	ldr	ip, [r2, #80]	; 0x50
   2a338:	mov	r6, #1
   2a33c:	cmp	ip, #1
   2a340:	beq	2a380 <__assert_fail@plt+0x186d4>
   2a344:	ldr	r5, [r2, #28]
   2a348:	add	r7, r3, #1
   2a34c:	cmp	r7, r5
   2a350:	bge	2a380 <__assert_fail@plt+0x186d4>
   2a354:	ldr	r6, [r2, #8]
   2a358:	sub	r5, r5, r3
   2a35c:	add	r7, r6, r3, lsl #2
   2a360:	mov	r6, #1
   2a364:	ldr	r4, [r7, r6, lsl #2]
   2a368:	cmn	r4, #1
   2a36c:	bne	2a380 <__assert_fail@plt+0x186d4>
   2a370:	add	r6, r6, #1
   2a374:	cmp	r5, r6
   2a378:	bne	2a364 <__assert_fail@plt+0x186b8>
   2a37c:	mov	r6, r5
   2a380:	mov	r8, #0
   2a384:	cmp	r9, #5
   2a388:	bne	2a3d0 <__assert_fail@plt+0x18724>
   2a38c:	cmp	r6, #2
   2a390:	blt	2a4f8 <__assert_fail@plt+0x1884c>
   2a394:	ldr	r0, [r0, #128]	; 0x80
   2a398:	tst	r0, #64	; 0x40
   2a39c:	bne	2a3b0 <__assert_fail@plt+0x18704>
   2a3a0:	ldr	r1, [r2, #4]
   2a3a4:	ldrb	r1, [r1, r3]
   2a3a8:	cmp	r1, #10
   2a3ac:	beq	2a4f8 <__assert_fail@plt+0x1884c>
   2a3b0:	tst	r0, #128	; 0x80
   2a3b4:	beq	2a4f4 <__assert_fail@plt+0x18848>
   2a3b8:	ldr	r0, [r2, #4]
   2a3bc:	ldrb	r0, [r0, r3]
   2a3c0:	cmp	r0, #0
   2a3c4:	movne	r8, r6
   2a3c8:	mov	r0, r8
   2a3cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2a3d0:	cmp	r9, #6
   2a3d4:	bne	2a4f8 <__assert_fail@plt+0x1884c>
   2a3d8:	cmp	r6, #2
   2a3dc:	blt	2a4f8 <__assert_fail@plt+0x1884c>
   2a3e0:	ldr	r7, [lr, r1, lsl #3]
   2a3e4:	ldr	r0, [r7, #32]
   2a3e8:	cmp	r0, #0
   2a3ec:	bne	2a408 <__assert_fail@plt+0x1875c>
   2a3f0:	ldr	r1, [r7, #36]	; 0x24
   2a3f4:	cmp	r1, #0
   2a3f8:	bne	2a408 <__assert_fail@plt+0x1875c>
   2a3fc:	ldr	r1, [r7, #20]
   2a400:	cmp	r1, #0
   2a404:	beq	2a500 <__assert_fail@plt+0x18854>
   2a408:	cmp	ip, #1
   2a40c:	bne	2a41c <__assert_fail@plt+0x18770>
   2a410:	ldr	r1, [r2, #4]
   2a414:	ldrb	r5, [r1, r3]
   2a418:	b	2a424 <__assert_fail@plt+0x18778>
   2a41c:	ldr	r1, [r2, #8]
   2a420:	ldr	r5, [r1, r3, lsl #2]
   2a424:	ldr	r1, [r7, #20]
   2a428:	cmp	r1, #1
   2a42c:	blt	2a450 <__assert_fail@plt+0x187a4>
   2a430:	ldr	r2, [r7]
   2a434:	mov	r3, #0
   2a438:	ldr	r4, [r2, r3, lsl #2]
   2a43c:	cmp	r5, r4
   2a440:	beq	2a4c8 <__assert_fail@plt+0x1881c>
   2a444:	add	r3, r3, #1
   2a448:	cmp	r3, r1
   2a44c:	blt	2a438 <__assert_fail@plt+0x1878c>
   2a450:	ldr	r1, [r7, #36]	; 0x24
   2a454:	cmp	r1, #1
   2a458:	blt	2a48c <__assert_fail@plt+0x187e0>
   2a45c:	mov	r4, #0
   2a460:	ldr	r0, [r7, #12]
   2a464:	ldr	r1, [r0, r4, lsl #2]
   2a468:	mov	r0, r5
   2a46c:	bl	11850 <iswctype@plt>
   2a470:	cmp	r0, #0
   2a474:	bne	2a4c8 <__assert_fail@plt+0x1881c>
   2a478:	ldr	r0, [r7, #36]	; 0x24
   2a47c:	add	r4, r4, #1
   2a480:	cmp	r4, r0
   2a484:	blt	2a460 <__assert_fail@plt+0x187b4>
   2a488:	ldr	r0, [r7, #32]
   2a48c:	cmp	r0, #1
   2a490:	blt	2a4d0 <__assert_fail@plt+0x18824>
   2a494:	ldr	r1, [r7, #4]
   2a498:	mov	r2, #0
   2a49c:	b	2a4ac <__assert_fail@plt+0x18800>
   2a4a0:	add	r2, r2, #1
   2a4a4:	cmp	r2, r0
   2a4a8:	bge	2a4d0 <__assert_fail@plt+0x18824>
   2a4ac:	ldr	r3, [r1, r2, lsl #2]
   2a4b0:	cmp	r3, r5
   2a4b4:	bhi	2a4a0 <__assert_fail@plt+0x187f4>
   2a4b8:	ldr	r3, [r7, #8]
   2a4bc:	ldr	r3, [r3, r2, lsl #2]
   2a4c0:	cmp	r5, r3
   2a4c4:	bhi	2a4a0 <__assert_fail@plt+0x187f4>
   2a4c8:	mov	r0, r6
   2a4cc:	b	2a4d4 <__assert_fail@plt+0x18828>
   2a4d0:	mov	r0, #0
   2a4d4:	ldrb	r1, [r7, #16]
   2a4d8:	tst	r1, #1
   2a4dc:	bne	2a4e4 <__assert_fail@plt+0x18838>
   2a4e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2a4e4:	cmp	r0, #0
   2a4e8:	bgt	2a4f8 <__assert_fail@plt+0x1884c>
   2a4ec:	cmp	r6, #1
   2a4f0:	movle	r6, #1
   2a4f4:	mov	r8, r6
   2a4f8:	mov	r0, r8
   2a4fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2a500:	mov	r5, #0
   2a504:	b	2a424 <__assert_fail@plt+0x18778>
   2a508:	ldr	r0, [r2, #4]
   2a50c:	mov	r8, #0
   2a510:	ldrb	r6, [r0, r3]
   2a514:	cmp	r6, #194	; 0xc2
   2a518:	bcc	2a4f8 <__assert_fail@plt+0x1884c>
   2a51c:	ldr	r2, [r2, #48]	; 0x30
   2a520:	add	r1, r3, #2
   2a524:	cmp	r1, r2
   2a528:	bgt	2a4f8 <__assert_fail@plt+0x1884c>
   2a52c:	add	r1, r3, r0
   2a530:	cmp	r6, #223	; 0xdf
   2a534:	ldrb	r7, [r1, #1]
   2a538:	bhi	2a560 <__assert_fail@plt+0x188b4>
   2a53c:	cmp	r7, #192	; 0xc0
   2a540:	mov	r0, #0
   2a544:	movwcc	r0, #1
   2a548:	lsl	r8, r0, #1
   2a54c:	sxtb	r0, r7
   2a550:	cmn	r0, #1
   2a554:	movwgt	r8, #0
   2a558:	mov	r0, r8
   2a55c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2a560:	cmp	r6, #239	; 0xef
   2a564:	bhi	2a580 <__assert_fail@plt+0x188d4>
   2a568:	mov	r0, #3
   2a56c:	cmp	r6, #224	; 0xe0
   2a570:	bne	2a5dc <__assert_fail@plt+0x18930>
   2a574:	cmp	r7, #160	; 0xa0
   2a578:	bcc	2a4f8 <__assert_fail@plt+0x1884c>
   2a57c:	b	2a5dc <__assert_fail@plt+0x18930>
   2a580:	cmp	r6, #247	; 0xf7
   2a584:	bhi	2a5a0 <__assert_fail@plt+0x188f4>
   2a588:	mov	r0, #4
   2a58c:	cmp	r6, #240	; 0xf0
   2a590:	bne	2a5dc <__assert_fail@plt+0x18930>
   2a594:	cmp	r7, #144	; 0x90
   2a598:	bcc	2a4f8 <__assert_fail@plt+0x1884c>
   2a59c:	b	2a5dc <__assert_fail@plt+0x18930>
   2a5a0:	cmp	r6, #251	; 0xfb
   2a5a4:	bhi	2a5c0 <__assert_fail@plt+0x18914>
   2a5a8:	mov	r0, #5
   2a5ac:	cmp	r6, #248	; 0xf8
   2a5b0:	bne	2a5dc <__assert_fail@plt+0x18930>
   2a5b4:	cmp	r7, #136	; 0x88
   2a5b8:	bcc	2a4f8 <__assert_fail@plt+0x1884c>
   2a5bc:	b	2a5dc <__assert_fail@plt+0x18930>
   2a5c0:	cmp	r6, #253	; 0xfd
   2a5c4:	bhi	2a4f8 <__assert_fail@plt+0x1884c>
   2a5c8:	mov	r0, #6
   2a5cc:	cmp	r6, #252	; 0xfc
   2a5d0:	bne	2a5dc <__assert_fail@plt+0x18930>
   2a5d4:	cmp	r7, #132	; 0x84
   2a5d8:	bcc	2a4f8 <__assert_fail@plt+0x1884c>
   2a5dc:	add	r3, r0, r3
   2a5e0:	cmp	r3, r2
   2a5e4:	bgt	2a4f8 <__assert_fail@plt+0x1884c>
   2a5e8:	ldrb	r2, [r1, #1]
   2a5ec:	sxtb	r3, r2
   2a5f0:	cmn	r3, #1
   2a5f4:	bgt	2a4f8 <__assert_fail@plt+0x1884c>
   2a5f8:	cmp	r2, #191	; 0xbf
   2a5fc:	bhi	2a4f8 <__assert_fail@plt+0x1884c>
   2a600:	ldrb	r2, [r1, #2]
   2a604:	sxtb	r3, r2
   2a608:	cmn	r3, #1
   2a60c:	bgt	2a4f8 <__assert_fail@plt+0x1884c>
   2a610:	cmp	r2, #191	; 0xbf
   2a614:	bhi	2a4f8 <__assert_fail@plt+0x1884c>
   2a618:	cmp	r0, #3
   2a61c:	beq	2a4e0 <__assert_fail@plt+0x18834>
   2a620:	ldrb	r2, [r1, #3]
   2a624:	sxtb	r3, r2
   2a628:	cmn	r3, #1
   2a62c:	bgt	2a4f8 <__assert_fail@plt+0x1884c>
   2a630:	cmp	r2, #191	; 0xbf
   2a634:	bhi	2a4f8 <__assert_fail@plt+0x1884c>
   2a638:	cmp	r0, #4
   2a63c:	beq	2a4e0 <__assert_fail@plt+0x18834>
   2a640:	ldrb	r2, [r1, #4]
   2a644:	sxtb	r3, r2
   2a648:	cmn	r3, #1
   2a64c:	bgt	2a4f8 <__assert_fail@plt+0x1884c>
   2a650:	cmp	r2, #191	; 0xbf
   2a654:	bhi	2a4f8 <__assert_fail@plt+0x1884c>
   2a658:	cmp	r0, #5
   2a65c:	beq	2a4e0 <__assert_fail@plt+0x18834>
   2a660:	ldrsb	r1, [r1, #5]
   2a664:	uxtb	r2, r1
   2a668:	cmp	r2, #191	; 0xbf
   2a66c:	movwhi	r0, #0
   2a670:	cmn	r1, #1
   2a674:	movwgt	r0, #0
   2a678:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2a67c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2a680:	add	fp, sp, #24
   2a684:	ldr	r4, [r1, #4]
   2a688:	mov	r6, r0
   2a68c:	mvn	r0, #0
   2a690:	mov	r8, #0
   2a694:	uxtab	r3, r0, r4
   2a698:	cmp	r3, #6
   2a69c:	bhi	2a838 <__assert_fail@plt+0x18b8c>
   2a6a0:	ldr	r0, [r6, #4]
   2a6a4:	mov	r9, r1
   2a6a8:	ldrb	r1, [r0, r2]
   2a6ac:	add	r7, pc, #4
   2a6b0:	sxtb	r0, r1
   2a6b4:	ldr	pc, [r7, r3, lsl #2]
   2a6b8:	ldrdeq	sl, [r2], -r4
   2a6bc:	andeq	sl, r2, r8, lsr r8
   2a6c0:	andeq	sl, r2, r8, ror #13
   2a6c4:	andeq	sl, r2, r8, lsr r8
   2a6c8:	andeq	sl, r2, r0, lsl r7
   2a6cc:	andeq	sl, r2, r8, lsr r8
   2a6d0:	andeq	sl, r2, r8, lsl #14
   2a6d4:	ldrb	r3, [r9]
   2a6d8:	uxtb	r7, r0
   2a6dc:	cmp	r3, r7
   2a6e0:	beq	2a744 <__assert_fail@plt+0x18a98>
   2a6e4:	b	2a838 <__assert_fail@plt+0x18b8c>
   2a6e8:	ldr	r3, [r9]
   2a6ec:	ubfx	r7, r1, #5, #3
   2a6f0:	mov	r5, #1
   2a6f4:	ldr	r3, [r3, r7, lsl #2]
   2a6f8:	and	r7, r1, #31
   2a6fc:	tst	r3, r5, lsl r7
   2a700:	bne	2a744 <__assert_fail@plt+0x18a98>
   2a704:	b	2a838 <__assert_fail@plt+0x18b8c>
   2a708:	cmp	r0, #0
   2a70c:	bmi	2a838 <__assert_fail@plt+0x18b8c>
   2a710:	cmp	r1, #0
   2a714:	beq	2a734 <__assert_fail@plt+0x18a88>
   2a718:	cmp	r1, #10
   2a71c:	bne	2a744 <__assert_fail@plt+0x18a98>
   2a720:	ldr	r3, [r6, #84]	; 0x54
   2a724:	ldrb	r3, [r3, #128]	; 0x80
   2a728:	tst	r3, #64	; 0x40
   2a72c:	beq	2a838 <__assert_fail@plt+0x18b8c>
   2a730:	b	2a744 <__assert_fail@plt+0x18a98>
   2a734:	ldr	r3, [r6, #84]	; 0x54
   2a738:	ldrb	r3, [r3, #128]	; 0x80
   2a73c:	tst	r3, #128	; 0x80
   2a740:	bne	2a838 <__assert_fail@plt+0x18b8c>
   2a744:	movw	r3, #65280	; 0xff00
   2a748:	movt	r3, #3
   2a74c:	tst	r4, r3
   2a750:	beq	2a798 <__assert_fail@plt+0x18aec>
   2a754:	cmn	r2, #1
   2a758:	ble	2a790 <__assert_fail@plt+0x18ae4>
   2a75c:	ldr	r3, [r6, #48]	; 0x30
   2a760:	cmp	r3, r2
   2a764:	beq	2a858 <__assert_fail@plt+0x18bac>
   2a768:	ldr	r3, [r6, #80]	; 0x50
   2a76c:	cmp	r3, #2
   2a770:	blt	2a7a4 <__assert_fail@plt+0x18af8>
   2a774:	ldr	r0, [r6, #8]
   2a778:	ldr	r7, [r0, r2, lsl #2]
   2a77c:	cmn	r7, #1
   2a780:	bne	2a7d4 <__assert_fail@plt+0x18b28>
   2a784:	sub	r2, r2, #1
   2a788:	cmn	r2, #1
   2a78c:	bne	2a778 <__assert_fail@plt+0x18acc>
   2a790:	ldr	r1, [r6, #60]	; 0x3c
   2a794:	b	2a7fc <__assert_fail@plt+0x18b50>
   2a798:	mov	r8, #1
   2a79c:	mov	r0, r8
   2a7a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2a7a4:	ldr	r2, [r6, #68]	; 0x44
   2a7a8:	ubfx	r3, r1, #5, #3
   2a7ac:	and	r7, r1, #31
   2a7b0:	mov	r1, #1
   2a7b4:	ldr	r3, [r2, r3, lsl #2]
   2a7b8:	mov	r2, #0
   2a7bc:	tst	r3, r1, lsl r7
   2a7c0:	bne	2a814 <__assert_fail@plt+0x18b68>
   2a7c4:	mov	r1, #0
   2a7c8:	cmp	r0, #10
   2a7cc:	beq	2a7ec <__assert_fail@plt+0x18b40>
   2a7d0:	b	2a7fc <__assert_fail@plt+0x18b50>
   2a7d4:	ldrb	r0, [r6, #78]	; 0x4e
   2a7d8:	cmp	r0, #0
   2a7dc:	bne	2a868 <__assert_fail@plt+0x18bbc>
   2a7e0:	mov	r1, #0
   2a7e4:	cmp	r7, #10
   2a7e8:	bne	2a7fc <__assert_fail@plt+0x18b50>
   2a7ec:	ldrb	r0, [r6, #77]	; 0x4d
   2a7f0:	cmp	r0, #0
   2a7f4:	movwne	r0, #1
   2a7f8:	lsl	r1, r0, #1
   2a7fc:	and	r0, r1, #1
   2a800:	tst	r4, #1024	; 0x400
   2a804:	eor	r2, r0, #1
   2a808:	beq	2a814 <__assert_fail@plt+0x18b68>
   2a80c:	cmp	r0, #0
   2a810:	beq	2a838 <__assert_fail@plt+0x18b8c>
   2a814:	ldr	r0, [r9, #4]
   2a818:	cmp	r2, #0
   2a81c:	bne	2a828 <__assert_fail@plt+0x18b7c>
   2a820:	ands	r2, r0, #2048	; 0x800
   2a824:	bne	2a838 <__assert_fail@plt+0x18b8c>
   2a828:	tst	r1, #2
   2a82c:	bne	2a840 <__assert_fail@plt+0x18b94>
   2a830:	ands	r2, r0, #8192	; 0x2000
   2a834:	beq	2a840 <__assert_fail@plt+0x18b94>
   2a838:	mov	r0, r8
   2a83c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2a840:	uxth	r0, r0
   2a844:	mov	r2, #1
   2a848:	and	r1, r1, #8
   2a84c:	eor	r0, r2, r0, lsr #15
   2a850:	orr	r0, r0, r1, lsr #3
   2a854:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2a858:	ldr	r0, [r6, #88]	; 0x58
   2a85c:	and	r0, r0, #2
   2a860:	eor	r1, r0, #10
   2a864:	b	2a7fc <__assert_fail@plt+0x18b50>
   2a868:	mov	r0, r7
   2a86c:	bl	11afc <iswalnum@plt>
   2a870:	mov	r1, #1
   2a874:	mov	r2, #0
   2a878:	cmp	r7, #95	; 0x5f
   2a87c:	beq	2a814 <__assert_fail@plt+0x18b68>
   2a880:	cmp	r0, #0
   2a884:	beq	2a7e0 <__assert_fail@plt+0x18b34>
   2a888:	b	2a814 <__assert_fail@plt+0x18b68>
   2a88c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a890:	add	fp, sp, #28
   2a894:	sub	sp, sp, #4
   2a898:	vpush	{d8-d9}
   2a89c:	sub	sp, sp, #2272	; 0x8e0
   2a8a0:	sub	sp, sp, #12288	; 0x3000
   2a8a4:	mov	lr, r0
   2a8a8:	mov	r0, #0
   2a8ac:	vmov.i32	q4, #0	; 0x00000000
   2a8b0:	mov	r8, r1
   2a8b4:	str	r0, [r1, #44]	; 0x2c
   2a8b8:	str	r0, [r1, #48]	; 0x30
   2a8bc:	sub	r0, fp, #1024	; 0x400
   2a8c0:	sub	r1, r0, #56	; 0x38
   2a8c4:	mov	r0, r1
   2a8c8:	vst1.64	{d8-d9}, [r0]!
   2a8cc:	vst1.64	{d8-d9}, [r0]
   2a8d0:	ldr	r0, [r8, #8]
   2a8d4:	cmp	r0, #0
   2a8d8:	ble	2b8ac <__assert_fail@plt+0x19c00>
   2a8dc:	add	r0, lr, #96	; 0x60
   2a8e0:	mov	r2, #0
   2a8e4:	mov	r4, #0
   2a8e8:	str	lr, [sp, #140]	; 0x8c
   2a8ec:	str	r8, [sp, #12]
   2a8f0:	str	r0, [sp, #4]
   2a8f4:	add	r0, r0, #16
   2a8f8:	str	r0, [sp]
   2a8fc:	add	r0, r1, #16
   2a900:	str	r0, [sp, #8]
   2a904:	b	2a92c <__assert_fail@plt+0x18c80>
   2a908:	sub	r0, fp, #1024	; 0x400
   2a90c:	mov	r4, r6
   2a910:	sub	r0, r0, #56	; 0x38
   2a914:	vst1.64	{d8-d9}, [r0]!
   2a918:	vst1.64	{d8-d9}, [r0]
   2a91c:	ldr	r0, [r8, #8]
   2a920:	add	r2, r2, #1
   2a924:	cmp	r2, r0
   2a928:	bge	2b2d4 <__assert_fail@plt+0x19628>
   2a92c:	ldr	r0, [r8, #12]
   2a930:	ldr	r1, [lr]
   2a934:	mov	r6, r4
   2a938:	str	r2, [sp, #24]
   2a93c:	ldr	r0, [r0, r2, lsl #2]
   2a940:	add	r5, r1, r0, lsl #3
   2a944:	ldr	sl, [r5, #4]!
   2a948:	uxtb	r3, sl
   2a94c:	cmp	r3, #1
   2a950:	str	r3, [sp, #64]	; 0x40
   2a954:	bne	2a9d4 <__assert_fail@plt+0x18d28>
   2a958:	ldrb	r2, [r1, r0, lsl #3]
   2a95c:	str	r0, [sp, #16]
   2a960:	sub	r0, fp, #1024	; 0x400
   2a964:	mov	r4, r1
   2a968:	sub	r7, r0, #56	; 0x38
   2a96c:	mov	r0, #1
   2a970:	mov	r1, r7
   2a974:	ubfx	r3, r2, #5, #3
   2a978:	and	r2, r2, #31
   2a97c:	ldr	r7, [r7, r3, lsl #2]
   2a980:	orr	r2, r7, r0, lsl r2
   2a984:	str	r2, [r1, r3, lsl #2]
   2a988:	movw	r2, #65280	; 0xff00
   2a98c:	mov	r3, r4
   2a990:	movt	r2, #3
   2a994:	ands	r2, sl, r2
   2a998:	ldr	r2, [sp, #24]
   2a99c:	beq	2ade0 <__assert_fail@plt+0x19134>
   2a9a0:	tst	sl, #8192	; 0x2000
   2a9a4:	beq	2aa38 <__assert_fail@plt+0x18d8c>
   2a9a8:	ldr	r2, [fp, #-1080]	; 0xfffffbc8
   2a9ac:	sub	r0, fp, #1024	; 0x400
   2a9b0:	mov	r1, r3
   2a9b4:	sub	r3, r0, #56	; 0x38
   2a9b8:	vst1.64	{d8-d9}, [r3]!
   2a9bc:	vst1.64	{d8-d9}, [r3]
   2a9c0:	tst	r2, #1024	; 0x400
   2a9c4:	bne	2aa28 <__assert_fail@plt+0x18d7c>
   2a9c8:	ldr	r2, [sp, #24]
   2a9cc:	mov	r4, r6
   2a9d0:	b	2a91c <__assert_fail@plt+0x18c70>
   2a9d4:	cmp	r3, #7
   2a9d8:	beq	2aa74 <__assert_fail@plt+0x18dc8>
   2a9dc:	cmp	r3, #5
   2a9e0:	beq	2aac8 <__assert_fail@plt+0x18e1c>
   2a9e4:	cmp	r3, #3
   2a9e8:	bne	2b2cc <__assert_fail@plt+0x19620>
   2a9ec:	ldr	r2, [r1, r0, lsl #3]
   2a9f0:	str	r0, [sp, #16]
   2a9f4:	sub	r0, fp, #1024	; 0x400
   2a9f8:	mov	r4, r1
   2a9fc:	sub	r3, r0, #56	; 0x38
   2aa00:	vld1.64	{d16-d17}, [r3]
   2aa04:	vld1.32	{d18-d19}, [r2]!
   2aa08:	vorr	q8, q8, q9
   2aa0c:	vst1.64	{d16-d17}, [r3]
   2aa10:	vld1.32	{d16-d17}, [r2]
   2aa14:	ldr	r2, [sp, #8]
   2aa18:	vld1.32	{d18-d19}, [r2]
   2aa1c:	vorr	q8, q9, q8
   2aa20:	vst1.32	{d16-d17}, [r2]
   2aa24:	b	2a988 <__assert_fail@plt+0x18cdc>
   2aa28:	ldr	r2, [sp, #24]
   2aa2c:	mov	r0, #1024	; 0x400
   2aa30:	mov	r3, r1
   2aa34:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2aa38:	tst	sl, #32768	; 0x8000
   2aa3c:	bne	2a908 <__assert_fail@plt+0x18c5c>
   2aa40:	tst	sl, #1024	; 0x400
   2aa44:	beq	2acf8 <__assert_fail@plt+0x1904c>
   2aa48:	ldr	r0, [sp, #64]	; 0x40
   2aa4c:	cmp	r0, #1
   2aa50:	bne	2ab14 <__assert_fail@plt+0x18e68>
   2aa54:	ldrb	r2, [r5, #2]
   2aa58:	tst	r2, #64	; 0x40
   2aa5c:	bne	2ab14 <__assert_fail@plt+0x18e68>
   2aa60:	sub	r0, fp, #1024	; 0x400
   2aa64:	sub	r0, r0, #56	; 0x38
   2aa68:	vst1.64	{d8-d9}, [r0]!
   2aa6c:	vst1.64	{d8-d9}, [r0]
   2aa70:	b	2a9c8 <__assert_fail@plt+0x18d1c>
   2aa74:	str	r0, [sp, #16]
   2aa78:	mvn	r0, #0
   2aa7c:	mov	r4, r1
   2aa80:	str	r0, [fp, #-1068]	; 0xfffffbd4
   2aa84:	str	r0, [fp, #-1072]	; 0xfffffbd0
   2aa88:	str	r0, [fp, #-1076]	; 0xfffffbcc
   2aa8c:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2aa90:	ldr	r3, [lr, #128]	; 0x80
   2aa94:	and	r2, r3, #128	; 0x80
   2aa98:	ands	r3, r3, #64	; 0x40
   2aa9c:	beq	2aaa8 <__assert_fail@plt+0x18dfc>
   2aaa0:	cmp	r2, #0
   2aaa4:	beq	2a988 <__assert_fail@plt+0x18cdc>
   2aaa8:	cmp	r3, #0
   2aaac:	mvn	r3, #1
   2aab0:	movweq	r3, #64510	; 0xfbfe
   2aab4:	movteq	r3, #65535	; 0xffff
   2aab8:	cmp	r2, #0
   2aabc:	mvneq	r3, #1024	; 0x400
   2aac0:	str	r3, [fp, #-1080]	; 0xfffffbc8
   2aac4:	b	2a988 <__assert_fail@plt+0x18cdc>
   2aac8:	ldr	r2, [lr, #92]	; 0x5c
   2aacc:	mov	r4, r1
   2aad0:	str	r0, [sp, #16]
   2aad4:	cmp	r2, #2
   2aad8:	blt	2abac <__assert_fail@plt+0x18f00>
   2aadc:	ldr	r2, [lr, #60]	; 0x3c
   2aae0:	sub	r0, fp, #1024	; 0x400
   2aae4:	sub	r3, r0, #56	; 0x38
   2aae8:	vld1.64	{d16-d17}, [r3]
   2aaec:	vld1.32	{d18-d19}, [r2]!
   2aaf0:	vorr	q8, q8, q9
   2aaf4:	vst1.64	{d16-d17}, [r3]
   2aaf8:	vld1.32	{d18-d19}, [r2]
   2aafc:	ldr	r2, [sp, #8]
   2ab00:	vld1.32	{d20-d21}, [r2]
   2ab04:	vorr	q9, q10, q9
   2ab08:	vst1.32	{d18-d19}, [r2]
   2ab0c:	vmov.32	r2, d16[0]
   2ab10:	b	2abd0 <__assert_fail@plt+0x18f24>
   2ab14:	ldr	r2, [lr, #92]	; 0x5c
   2ab18:	mov	r1, r3
   2ab1c:	cmp	r2, #1
   2ab20:	ble	2abfc <__assert_fail@plt+0x18f50>
   2ab24:	ldr	r2, [lr, #60]	; 0x3c
   2ab28:	ldr	r3, [sp, #4]
   2ab2c:	sub	r0, fp, #1024	; 0x400
   2ab30:	vld1.32	{d16-d17}, [r3]
   2ab34:	vld1.32	{d18-d19}, [r2]!
   2ab38:	sub	r3, r0, #56	; 0x38
   2ab3c:	vld1.64	{d20-d21}, [r3]
   2ab40:	vorn	q8, q8, q9
   2ab44:	vand	q8, q10, q8
   2ab48:	vst1.64	{d16-d17}, [r3]
   2ab4c:	vmov.32	r3, d16[1]
   2ab50:	vld1.32	{d18-d19}, [r2]
   2ab54:	ldr	r2, [sp]
   2ab58:	vld1.32	{d20-d21}, [r2]
   2ab5c:	ldr	r2, [sp, #8]
   2ab60:	vld1.32	{d22-d23}, [r2]
   2ab64:	vorn	q9, q10, q9
   2ab68:	vand	q9, q11, q9
   2ab6c:	vst1.32	{d18-d19}, [r2]
   2ab70:	vmov.32	r2, d16[0]
   2ab74:	orr	r2, r3, r2
   2ab78:	vmov.32	r3, d17[0]
   2ab7c:	orr	r2, r2, r3
   2ab80:	vmov.32	r3, d17[1]
   2ab84:	orr	r2, r2, r3
   2ab88:	vmov.32	r3, d18[0]
   2ab8c:	orr	r2, r2, r3
   2ab90:	vmov.32	r3, d18[1]
   2ab94:	orr	r2, r2, r3
   2ab98:	vmov.32	r3, d19[0]
   2ab9c:	orr	r2, r2, r3
   2aba0:	vmov.32	r3, d19[1]
   2aba4:	orr	r2, r2, r3
   2aba8:	b	2ace8 <__assert_fail@plt+0x1903c>
   2abac:	mvn	r2, #0
   2abb0:	str	r2, [fp, #-1052]	; 0xfffffbe4
   2abb4:	str	r2, [fp, #-1056]	; 0xfffffbe0
   2abb8:	str	r2, [fp, #-1060]	; 0xfffffbdc
   2abbc:	str	r2, [fp, #-1064]	; 0xfffffbd8
   2abc0:	str	r2, [fp, #-1068]	; 0xfffffbd4
   2abc4:	str	r2, [fp, #-1072]	; 0xfffffbd0
   2abc8:	str	r2, [fp, #-1076]	; 0xfffffbcc
   2abcc:	str	r2, [fp, #-1080]	; 0xfffffbc8
   2abd0:	ldr	r3, [lr, #128]	; 0x80
   2abd4:	ands	r7, r3, #64	; 0x40
   2abd8:	and	r3, r3, #128	; 0x80
   2abdc:	biceq	r2, r2, #1024	; 0x400
   2abe0:	beq	2abec <__assert_fail@plt+0x18f40>
   2abe4:	cmp	r3, #0
   2abe8:	beq	2a988 <__assert_fail@plt+0x18cdc>
   2abec:	cmp	r3, #0
   2abf0:	bicne	r2, r2, #1
   2abf4:	str	r2, [fp, #-1080]	; 0xfffffbc8
   2abf8:	b	2a988 <__assert_fail@plt+0x18cdc>
   2abfc:	ldr	r2, [sp, #140]	; 0x8c
   2ac00:	ldr	r3, [lr, #96]	; 0x60
   2ac04:	str	r1, [sp, #60]	; 0x3c
   2ac08:	ldr	r4, [fp, #-1080]	; 0xfffffbc8
   2ac0c:	mov	r9, r5
   2ac10:	str	r6, [sp, #152]	; 0x98
   2ac14:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   2ac18:	ldr	r6, [fp, #-1072]	; 0xfffffbd0
   2ac1c:	ldr	lr, [r2, #100]	; 0x64
   2ac20:	ldr	r2, [sp, #140]	; 0x8c
   2ac24:	and	r7, r4, r3
   2ac28:	ldr	r3, [sp, #12]
   2ac2c:	ldr	r1, [r2, #104]	; 0x68
   2ac30:	ldr	r2, [sp, #140]	; 0x8c
   2ac34:	and	lr, r5, lr
   2ac38:	ldr	r0, [r2, #108]	; 0x6c
   2ac3c:	ldr	r2, [sp, #140]	; 0x8c
   2ac40:	and	r1, r6, r1
   2ac44:	ldr	ip, [r2, #112]	; 0x70
   2ac48:	ldr	r2, [sp, #140]	; 0x8c
   2ac4c:	ldr	r8, [r2, #116]	; 0x74
   2ac50:	ldr	r2, [sp, #140]	; 0x8c
   2ac54:	ldr	r2, [r2, #120]	; 0x78
   2ac58:	str	r2, [sp, #160]	; 0xa0
   2ac5c:	ldr	r2, [sp, #140]	; 0x8c
   2ac60:	ldr	r2, [r2, #124]	; 0x7c
   2ac64:	str	r2, [sp, #164]	; 0xa4
   2ac68:	ldr	r2, [fp, #-1068]	; 0xfffffbd4
   2ac6c:	str	r7, [fp, #-1080]	; 0xfffffbc8
   2ac70:	str	lr, [fp, #-1076]	; 0xfffffbcc
   2ac74:	str	r1, [fp, #-1072]	; 0xfffffbd0
   2ac78:	orr	r7, lr, r7
   2ac7c:	ldr	lr, [sp, #140]	; 0x8c
   2ac80:	orr	r7, r7, r1
   2ac84:	ldr	r1, [sp, #60]	; 0x3c
   2ac88:	and	r2, r2, r0
   2ac8c:	ldr	r0, [sp, #160]	; 0xa0
   2ac90:	str	r2, [fp, #-1068]	; 0xfffffbd4
   2ac94:	orr	r2, r7, r2
   2ac98:	ldr	r6, [fp, #-1064]	; 0xfffffbd8
   2ac9c:	and	r6, r6, ip
   2aca0:	str	r6, [fp, #-1064]	; 0xfffffbd8
   2aca4:	orr	r2, r2, r6
   2aca8:	ldr	r6, [sp, #152]	; 0x98
   2acac:	ldr	r4, [fp, #-1060]	; 0xfffffbdc
   2acb0:	and	r4, r4, r8
   2acb4:	mov	r8, r3
   2acb8:	str	r4, [fp, #-1060]	; 0xfffffbdc
   2acbc:	orr	r2, r2, r4
   2acc0:	ldr	r3, [fp, #-1056]	; 0xfffffbe0
   2acc4:	and	r3, r3, r0
   2acc8:	ldr	r0, [sp, #164]	; 0xa4
   2accc:	str	r3, [fp, #-1056]	; 0xfffffbe0
   2acd0:	orr	r2, r2, r3
   2acd4:	ldr	r5, [fp, #-1052]	; 0xfffffbe4
   2acd8:	and	r0, r5, r0
   2acdc:	mov	r5, r9
   2ace0:	str	r0, [fp, #-1052]	; 0xfffffbe4
   2ace4:	orr	r2, r2, r0
   2ace8:	cmp	r2, #0
   2acec:	ldr	r2, [sp, #24]
   2acf0:	mov	r3, r1
   2acf4:	beq	2b2cc <__assert_fail@plt+0x19620>
   2acf8:	tst	sl, #2048	; 0x800
   2acfc:	beq	2ade0 <__assert_fail@plt+0x19134>
   2ad00:	ldr	r0, [sp, #64]	; 0x40
   2ad04:	cmp	r0, #1
   2ad08:	bne	2ad18 <__assert_fail@plt+0x1906c>
   2ad0c:	ldrb	r0, [r5, #2]
   2ad10:	tst	r0, #64	; 0x40
   2ad14:	bne	2a908 <__assert_fail@plt+0x18c5c>
   2ad18:	ldr	r0, [lr, #92]	; 0x5c
   2ad1c:	cmp	r0, #1
   2ad20:	ble	2ad6c <__assert_fail@plt+0x190c0>
   2ad24:	ldr	r0, [lr, #60]	; 0x3c
   2ad28:	ldr	r1, [sp, #4]
   2ad2c:	vld1.32	{d16-d17}, [r1]
   2ad30:	vld1.32	{d18-d19}, [r0]!
   2ad34:	sub	r1, fp, #1024	; 0x400
   2ad38:	sub	r1, r1, #56	; 0x38
   2ad3c:	vld1.64	{d20-d21}, [r1]
   2ad40:	vand	q8, q9, q8
   2ad44:	vbic	q9, q10, q8
   2ad48:	vst1.64	{d18-d19}, [r1]
   2ad4c:	ldr	r1, [sp]
   2ad50:	vld1.32	{d20-d21}, [r0]
   2ad54:	ldr	r0, [sp, #8]
   2ad58:	vld1.32	{d16-d17}, [r1]
   2ad5c:	vld1.32	{d22-d23}, [r0]
   2ad60:	vand	q8, q10, q8
   2ad64:	vbic	q8, q11, q8
   2ad68:	b	2ad9c <__assert_fail@plt+0x190f0>
   2ad6c:	ldr	r0, [sp, #4]
   2ad70:	vld1.32	{d16-d17}, [r0]
   2ad74:	sub	r0, fp, #1024	; 0x400
   2ad78:	sub	r0, r0, #56	; 0x38
   2ad7c:	vld1.64	{d18-d19}, [r0]
   2ad80:	vbic	q9, q9, q8
   2ad84:	vst1.64	{d18-d19}, [r0]
   2ad88:	ldr	r0, [sp]
   2ad8c:	vld1.32	{d16-d17}, [r0]
   2ad90:	ldr	r0, [sp, #8]
   2ad94:	vld1.32	{d20-d21}, [r0]
   2ad98:	vbic	q8, q10, q8
   2ad9c:	vst1.32	{d16-d17}, [r0]
   2ada0:	vmov.32	r0, d18[0]
   2ada4:	vmov.32	r1, d18[1]
   2ada8:	orr	r0, r1, r0
   2adac:	vmov.32	r1, d19[0]
   2adb0:	orr	r0, r0, r1
   2adb4:	vmov.32	r1, d19[1]
   2adb8:	orr	r0, r0, r1
   2adbc:	vmov.32	r1, d16[0]
   2adc0:	orr	r0, r0, r1
   2adc4:	vmov.32	r1, d16[1]
   2adc8:	orr	r0, r0, r1
   2adcc:	vmov.32	r1, d17[0]
   2add0:	orr	r0, r0, r1
   2add4:	vmov.32	r1, d17[1]
   2add8:	orrs	r0, r0, r1
   2addc:	beq	2b2cc <__assert_fail@plt+0x19620>
   2ade0:	mov	r4, r6
   2ade4:	mov	r5, #0
   2ade8:	cmp	r6, #1
   2adec:	blt	2b23c <__assert_fail@plt+0x19590>
   2adf0:	ldr	r0, [fp, #-1052]	; 0xfffffbe4
   2adf4:	ldr	ip, [fp, #-1056]	; 0xfffffbe0
   2adf8:	ldr	lr, [fp, #-1060]	; 0xfffffbdc
   2adfc:	ldr	r8, [fp, #-1072]	; 0xfffffbd0
   2ae00:	ldr	r9, [sp, #64]	; 0x40
   2ae04:	mov	r1, #28
   2ae08:	str	r3, [sp, #60]	; 0x3c
   2ae0c:	str	r0, [sp, #148]	; 0x94
   2ae10:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   2ae14:	str	r0, [sp, #120]	; 0x78
   2ae18:	ldr	r0, [fp, #-1080]	; 0xfffffbc8
   2ae1c:	str	r0, [sp, #108]	; 0x6c
   2ae20:	ldr	r0, [fp, #-1076]	; 0xfffffbcc
   2ae24:	str	r0, [sp, #112]	; 0x70
   2ae28:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   2ae2c:	str	r0, [sp, #116]	; 0x74
   2ae30:	sub	r0, fp, #6144	; 0x1800
   2ae34:	sub	r7, r0, #104	; 0x68
   2ae38:	b	2ae70 <__assert_fail@plt+0x191c4>
   2ae3c:	ldr	r9, [sp, #64]	; 0x40
   2ae40:	ldr	r7, [sp, #144]	; 0x90
   2ae44:	ldr	ip, [sp, #164]	; 0xa4
   2ae48:	ldr	lr, [sp, #160]	; 0xa0
   2ae4c:	ldr	r5, [sp, #136]	; 0x88
   2ae50:	ldr	r4, [sp, #152]	; 0x98
   2ae54:	ldr	r3, [sp, #60]	; 0x3c
   2ae58:	ldr	r8, [sp, #156]	; 0x9c
   2ae5c:	add	r1, r1, #32
   2ae60:	add	r7, r7, #12
   2ae64:	add	r5, r5, #1
   2ae68:	cmp	r5, r4
   2ae6c:	bge	2b1fc <__assert_fail@plt+0x19550>
   2ae70:	cmp	r9, #1
   2ae74:	str	lr, [sp, #160]	; 0xa0
   2ae78:	str	ip, [sp, #164]	; 0xa4
   2ae7c:	str	r4, [sp, #152]	; 0x98
   2ae80:	str	r5, [sp, #136]	; 0x88
   2ae84:	str	r8, [sp, #156]	; 0x9c
   2ae88:	bne	2aebc <__assert_fail@plt+0x19210>
   2ae8c:	ldr	r0, [sp, #16]
   2ae90:	add	r2, sp, #168	; 0xa8
   2ae94:	ldrb	r0, [r3, r0, lsl #3]
   2ae98:	mov	r3, r1
   2ae9c:	ubfx	r1, r0, #5, #3
   2aea0:	and	r0, r0, #31
   2aea4:	add	r1, r2, r1, lsl #2
   2aea8:	mov	r2, #1
   2aeac:	ldr	r1, [r1, r5, lsl #5]
   2aeb0:	tst	r1, r2, lsl r0
   2aeb4:	mov	r1, r3
   2aeb8:	beq	2ae44 <__assert_fail@plt+0x19198>
   2aebc:	add	r4, sp, #168	; 0xa8
   2aec0:	str	r7, [sp, #144]	; 0x90
   2aec4:	ldr	ip, [sp, #108]	; 0x6c
   2aec8:	ldr	r9, [sp, #112]	; 0x70
   2aecc:	add	sl, r4, r5, lsl #5
   2aed0:	ldr	r5, [sp, #116]	; 0x74
   2aed4:	add	r7, sl, #8
   2aed8:	ldr	r3, [sl, #4]
   2aedc:	ldm	r7, {r0, r6, r7}
   2aee0:	str	r6, [sp, #132]	; 0x84
   2aee4:	str	r7, [sp, #100]	; 0x64
   2aee8:	str	r3, [sp, #128]	; 0x80
   2aeec:	and	r3, r3, r9
   2aef0:	and	r2, r0, r8
   2aef4:	str	r0, [sp, #124]	; 0x7c
   2aef8:	add	r0, r4, r1
   2aefc:	str	r3, [sp, #84]	; 0x54
   2af00:	ldr	r4, [r4, r1]
   2af04:	ldr	r8, [sp, #148]	; 0x94
   2af08:	ldr	lr, [r0, #-28]	; 0xffffffe4
   2af0c:	str	r0, [sp, #92]	; 0x5c
   2af10:	str	r2, [sp, #96]	; 0x60
   2af14:	and	r0, lr, ip
   2af18:	str	r0, [sp, #88]	; 0x58
   2af1c:	orr	r0, r3, r0
   2af20:	ldr	r3, [sl, #20]
   2af24:	orr	r0, r0, r2
   2af28:	and	r2, r6, r5
   2af2c:	ldr	r6, [sp, #120]	; 0x78
   2af30:	str	r2, [sp, #80]	; 0x50
   2af34:	orr	r0, r0, r2
   2af38:	and	r2, r7, r6
   2af3c:	ldr	r7, [sl, #24]
   2af40:	str	r2, [sp, #76]	; 0x4c
   2af44:	orr	r0, r0, r2
   2af48:	ldr	r2, [sp, #160]	; 0xa0
   2af4c:	and	r2, r3, r2
   2af50:	str	r2, [sp, #72]	; 0x48
   2af54:	orr	r0, r0, r2
   2af58:	ldr	r2, [sp, #164]	; 0xa4
   2af5c:	and	r2, r7, r2
   2af60:	str	r2, [sp, #68]	; 0x44
   2af64:	orr	r0, r0, r2
   2af68:	and	r2, r4, r8
   2af6c:	orrs	r0, r0, r2
   2af70:	beq	2ae3c <__assert_fail@plt+0x19190>
   2af74:	bic	r0, ip, lr
   2af78:	str	r2, [sp, #20]
   2af7c:	ldr	r2, [sp, #156]	; 0x9c
   2af80:	ldr	r8, [sp, #100]	; 0x64
   2af84:	str	r1, [sp, #104]	; 0x68
   2af88:	ldr	r1, [sp, #128]	; 0x80
   2af8c:	bic	ip, lr, ip
   2af90:	str	r0, [sp, #56]	; 0x38
   2af94:	ldr	r0, [sp, #128]	; 0x80
   2af98:	bic	lr, r1, r9
   2af9c:	bic	r0, r9, r0
   2afa0:	orr	r1, lr, ip
   2afa4:	str	r0, [sp, #52]	; 0x34
   2afa8:	ldr	r0, [sp, #124]	; 0x7c
   2afac:	bic	r0, r2, r0
   2afb0:	str	r0, [sp, #48]	; 0x30
   2afb4:	ldr	r0, [sp, #132]	; 0x84
   2afb8:	bic	r0, r5, r0
   2afbc:	str	r0, [sp, #44]	; 0x2c
   2afc0:	bic	r0, r6, r8
   2afc4:	bic	r6, r8, r6
   2afc8:	str	r0, [sp, #40]	; 0x28
   2afcc:	ldr	r0, [sp, #160]	; 0xa0
   2afd0:	bic	r0, r0, r3
   2afd4:	str	r0, [sp, #36]	; 0x24
   2afd8:	ldr	r0, [sp, #164]	; 0xa4
   2afdc:	bic	r0, r0, r7
   2afe0:	str	r0, [sp, #32]
   2afe4:	ldr	r0, [sp, #148]	; 0x94
   2afe8:	bic	r0, r0, r4
   2afec:	str	r0, [sp, #28]
   2aff0:	ldr	r0, [sp, #124]	; 0x7c
   2aff4:	bic	r0, r0, r2
   2aff8:	mov	r9, r0
   2affc:	orr	r0, r1, r0
   2b000:	ldr	r1, [sp, #132]	; 0x84
   2b004:	bic	r1, r1, r5
   2b008:	orr	r5, r0, r1
   2b00c:	ldr	r0, [sp, #160]	; 0xa0
   2b010:	orr	r5, r5, r6
   2b014:	bic	r3, r3, r0
   2b018:	ldr	r0, [sp, #164]	; 0xa4
   2b01c:	orr	r5, r5, r3
   2b020:	bic	r7, r7, r0
   2b024:	ldr	r0, [sp, #148]	; 0x94
   2b028:	orr	r2, r5, r7
   2b02c:	bic	r4, r4, r0
   2b030:	orrs	r2, r2, r4
   2b034:	beq	2b114 <__assert_fail@plt+0x19468>
   2b038:	ldr	r2, [sp, #152]	; 0x98
   2b03c:	add	r5, sp, #168	; 0xa8
   2b040:	add	r0, r5, r2, lsl #5
   2b044:	str	ip, [r5, r2, lsl #5]
   2b048:	str	lr, [r0, #4]
   2b04c:	str	r9, [r0, #8]
   2b050:	str	r1, [r0, #12]
   2b054:	str	r6, [r0, #16]
   2b058:	str	r3, [r0, #20]
   2b05c:	str	r7, [r0, #24]
   2b060:	str	r4, [r0, #28]
   2b064:	ldr	r0, [sp, #92]	; 0x5c
   2b068:	ldr	r1, [sp, #88]	; 0x58
   2b06c:	sub	lr, fp, #6144	; 0x1800
   2b070:	mov	r6, r2
   2b074:	str	r1, [r0, #-28]	; 0xffffffe4
   2b078:	ldr	r0, [sp, #84]	; 0x54
   2b07c:	ldr	r1, [sp, #20]
   2b080:	str	r0, [sl, #4]
   2b084:	ldr	r0, [sp, #96]	; 0x60
   2b088:	str	r0, [sl, #8]
   2b08c:	ldr	r0, [sp, #80]	; 0x50
   2b090:	str	r0, [sl, #12]
   2b094:	ldr	r0, [sp, #76]	; 0x4c
   2b098:	str	r0, [sl, #16]
   2b09c:	ldr	r0, [sp, #72]	; 0x48
   2b0a0:	str	r0, [sl, #20]
   2b0a4:	ldr	r0, [sp, #68]	; 0x44
   2b0a8:	str	r0, [sl, #24]
   2b0ac:	ldr	r0, [sp, #104]	; 0x68
   2b0b0:	str	r1, [r5, r0]
   2b0b4:	add	r0, r2, r2, lsl #1
   2b0b8:	sub	r1, lr, #104	; 0x68
   2b0bc:	add	r4, r1, r0, lsl #2
   2b0c0:	ldr	r1, [sp, #144]	; 0x90
   2b0c4:	mov	r5, r4
   2b0c8:	ldr	r0, [r1, #4]
   2b0cc:	str	r0, [r5, #4]!
   2b0d0:	ldr	r7, [r1, #4]
   2b0d4:	cmp	r7, #1
   2b0d8:	blt	2b12c <__assert_fail@plt+0x19480>
   2b0dc:	str	r0, [r4]
   2b0e0:	lsl	r0, r0, #2
   2b0e4:	bl	1b5b8 <__assert_fail@plt+0x990c>
   2b0e8:	ldr	r8, [sp, #36]	; 0x24
   2b0ec:	ldr	sl, [sp, #28]
   2b0f0:	cmp	r0, #0
   2b0f4:	str	r0, [r4, #8]
   2b0f8:	beq	2b818 <__assert_fail@plt+0x19b6c>
   2b0fc:	ldr	r1, [sp, #144]	; 0x90
   2b100:	lsl	r2, r7, #2
   2b104:	ldr	r1, [r1, #8]
   2b108:	bl	118ec <memcpy@plt>
   2b10c:	ldr	r1, [sp, #24]
   2b110:	b	2b148 <__assert_fail@plt+0x1949c>
   2b114:	ldr	r4, [sp, #12]
   2b118:	ldr	r1, [sp, #24]
   2b11c:	ldr	r8, [sp, #36]	; 0x24
   2b120:	ldr	r5, [sp, #32]
   2b124:	ldr	sl, [sp, #28]
   2b128:	b	2b158 <__assert_fail@plt+0x194ac>
   2b12c:	ldr	r1, [sp, #24]
   2b130:	ldr	r8, [sp, #36]	; 0x24
   2b134:	ldr	sl, [sp, #28]
   2b138:	mov	r0, #0
   2b13c:	str	r0, [r4]
   2b140:	str	r0, [r4, #4]
   2b144:	str	r0, [r4, #8]
   2b148:	ldr	r4, [sp, #12]
   2b14c:	ldr	r5, [sp, #32]
   2b150:	add	r6, r6, #1
   2b154:	str	r6, [sp, #152]	; 0x98
   2b158:	ldr	r0, [r4, #12]
   2b15c:	ldr	r7, [sp, #144]	; 0x90
   2b160:	ldr	r1, [r0, r1, lsl #2]
   2b164:	mov	r0, r7
   2b168:	bl	268d4 <__assert_fail@plt+0x14c28>
   2b16c:	ldr	r6, [sp, #40]	; 0x28
   2b170:	cmp	r0, #0
   2b174:	beq	2b7d8 <__assert_fail@plt+0x19b2c>
   2b178:	ldr	r2, [sp, #56]	; 0x38
   2b17c:	ldr	r4, [sp, #52]	; 0x34
   2b180:	ldr	r3, [sp, #48]	; 0x30
   2b184:	ldr	r1, [sp, #44]	; 0x2c
   2b188:	ldr	r9, [sp, #64]	; 0x40
   2b18c:	mov	ip, r5
   2b190:	mov	lr, r8
   2b194:	str	sl, [sp, #148]	; 0x94
   2b198:	str	r6, [sp, #120]	; 0x78
   2b19c:	orr	r0, r4, r2
   2b1a0:	str	r1, [sp, #116]	; 0x74
   2b1a4:	str	r3, [sp, #156]	; 0x9c
   2b1a8:	str	r4, [sp, #112]	; 0x70
   2b1ac:	str	r2, [sp, #108]	; 0x6c
   2b1b0:	orr	r0, r0, r3
   2b1b4:	orr	r0, r0, r1
   2b1b8:	orr	r0, r0, r6
   2b1bc:	orr	r0, r0, r8
   2b1c0:	orr	r0, r0, r5
   2b1c4:	orrs	r0, r0, sl
   2b1c8:	mov	r0, r1
   2b1cc:	ldr	r1, [sp, #104]	; 0x68
   2b1d0:	bne	2ae4c <__assert_fail@plt+0x191a0>
   2b1d4:	mov	ip, r5
   2b1d8:	str	r4, [sp, #112]	; 0x70
   2b1dc:	ldr	r4, [sp, #152]	; 0x98
   2b1e0:	ldr	r5, [sp, #136]	; 0x88
   2b1e4:	mov	lr, r8
   2b1e8:	str	sl, [sp, #148]	; 0x94
   2b1ec:	str	r6, [sp, #120]	; 0x78
   2b1f0:	str	r0, [sp, #116]	; 0x74
   2b1f4:	mov	r8, r3
   2b1f8:	str	r2, [sp, #108]	; 0x6c
   2b1fc:	ldr	r0, [sp, #148]	; 0x94
   2b200:	ldr	r2, [sp, #24]
   2b204:	str	r0, [fp, #-1052]	; 0xfffffbe4
   2b208:	ldr	r0, [sp, #120]	; 0x78
   2b20c:	str	ip, [fp, #-1056]	; 0xfffffbe0
   2b210:	str	lr, [fp, #-1060]	; 0xfffffbdc
   2b214:	ldr	lr, [sp, #140]	; 0x8c
   2b218:	str	r0, [fp, #-1064]	; 0xfffffbd8
   2b21c:	ldr	r0, [sp, #116]	; 0x74
   2b220:	str	r0, [fp, #-1068]	; 0xfffffbd4
   2b224:	ldr	r0, [sp, #112]	; 0x70
   2b228:	str	r8, [fp, #-1072]	; 0xfffffbd0
   2b22c:	ldr	r8, [sp, #12]
   2b230:	str	r0, [fp, #-1076]	; 0xfffffbcc
   2b234:	ldr	r0, [sp, #108]	; 0x6c
   2b238:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2b23c:	cmp	r5, r4
   2b240:	bne	2a91c <__assert_fail@plt+0x18c70>
   2b244:	sub	lr, fp, #1024	; 0x400
   2b248:	mov	r1, r8
   2b24c:	sub	r7, lr, #56	; 0x38
   2b250:	sub	lr, fp, #6144	; 0x1800
   2b254:	mov	sl, r1
   2b258:	mov	r0, r7
   2b25c:	mov	r8, r7
   2b260:	vld1.32	{d16-d17}, [r0]!
   2b264:	vld1.64	{d18-d19}, [r0]
   2b268:	add	r0, sp, #168	; 0xa8
   2b26c:	add	r0, r0, r5, lsl #5
   2b270:	vst1.32	{d16-d17}, [r0]!
   2b274:	vst1.32	{d18-d19}, [r0]
   2b278:	ldr	r0, [r1, #12]
   2b27c:	mov	r1, #1
   2b280:	ldr	r4, [r0, r2, lsl #2]
   2b284:	add	r0, r5, r5, lsl #1
   2b288:	sub	r2, lr, #104	; 0x68
   2b28c:	add	r7, r2, r0, lsl #2
   2b290:	str	r1, [r2, r0, lsl #2]
   2b294:	mov	r0, #4
   2b298:	mov	r6, r7
   2b29c:	str	r1, [r6, #4]!
   2b2a0:	bl	1b5b8 <__assert_fail@plt+0x990c>
   2b2a4:	cmp	r0, #0
   2b2a8:	str	r0, [r7, #8]
   2b2ac:	beq	2b888 <__assert_fail@plt+0x19bdc>
   2b2b0:	ldr	lr, [sp, #140]	; 0x8c
   2b2b4:	ldr	r2, [sp, #24]
   2b2b8:	str	r4, [r0]
   2b2bc:	mov	r0, r8
   2b2c0:	add	r4, r5, #1
   2b2c4:	mov	r8, sl
   2b2c8:	b	2a914 <__assert_fail@plt+0x18c68>
   2b2cc:	mov	r4, r6
   2b2d0:	b	2a91c <__assert_fail@plt+0x18c70>
   2b2d4:	cmp	r4, #0
   2b2d8:	ble	2b8a4 <__assert_fail@plt+0x19bf8>
   2b2dc:	mov	r6, r4
   2b2e0:	mov	r4, #0
   2b2e4:	add	r0, r6, #1
   2b2e8:	str	r4, [fp, #-3136]	; 0xfffff3c0
   2b2ec:	str	r0, [fp, #-3140]	; 0xfffff3bc
   2b2f0:	lsl	r0, r0, #2
   2b2f4:	bl	1b5b8 <__assert_fail@plt+0x990c>
   2b2f8:	ldr	r1, [sp, #140]	; 0x8c
   2b2fc:	cmp	r0, #0
   2b300:	str	r0, [fp, #-3132]	; 0xfffff3c4
   2b304:	moveq	r4, #12
   2b308:	cmp	r0, #0
   2b30c:	str	r4, [fp, #-56]	; 0xffffffc8
   2b310:	beq	2b8d4 <__assert_fail@plt+0x19c28>
   2b314:	vmov.i32	q8, #0	; 0x00000000
   2b318:	sub	lr, fp, #3072	; 0xc00
   2b31c:	mov	r3, #0
   2b320:	mov	sl, #0
   2b324:	mov	r7, #0
   2b328:	mov	r2, #0
   2b32c:	mov	r8, #0
   2b330:	str	r6, [sp, #152]	; 0x98
   2b334:	sub	r0, lr, #104	; 0x68
   2b338:	sub	lr, fp, #3072	; 0xc00
   2b33c:	sub	r9, lr, #68	; 0x44
   2b340:	sub	lr, fp, #3072	; 0xc00
   2b344:	vst1.64	{d16-d17}, [r0]!
   2b348:	vst1.64	{d16-d17}, [r0]
   2b34c:	sub	r0, lr, #56	; 0x38
   2b350:	str	r0, [sp, #124]	; 0x7c
   2b354:	mov	r0, #0
   2b358:	str	r0, [sp, #144]	; 0x90
   2b35c:	mov	r0, #0
   2b360:	str	r0, [sp, #148]	; 0x94
   2b364:	mov	r0, #0
   2b368:	str	r0, [sp, #156]	; 0x9c
   2b36c:	mov	r0, #0
   2b370:	str	r0, [sp, #160]	; 0xa0
   2b374:	mov	r0, #0
   2b378:	str	r0, [sp, #164]	; 0xa4
   2b37c:	mov	r0, #0
   2b380:	str	r0, [sp, #128]	; 0x80
   2b384:	b	2b444 <__assert_fail@plt+0x19798>
   2b388:	ldrsb	r0, [r7, #52]	; 0x34
   2b38c:	cmn	r0, #1
   2b390:	ble	2b500 <__assert_fail@plt+0x19854>
   2b394:	sub	lr, fp, #3072	; 0xc00
   2b398:	sub	r0, lr, #56	; 0x38
   2b39c:	sub	lr, fp, #2048	; 0x800
   2b3a0:	str	r7, [r0, r8, lsl #2]
   2b3a4:	sub	r0, lr, #56	; 0x38
   2b3a8:	str	r7, [r0, r8, lsl #2]
   2b3ac:	add	r0, sp, #168	; 0xa8
   2b3b0:	ldr	r2, [sp, #164]	; 0xa4
   2b3b4:	mov	r1, r0
   2b3b8:	ldr	r0, [r0, r8, lsl #5]
   2b3bc:	orr	r2, r2, r0
   2b3c0:	add	r0, r1, r8, lsl #5
   2b3c4:	add	r8, r8, #1
   2b3c8:	str	r2, [sp, #164]	; 0xa4
   2b3cc:	ldr	r2, [r0, #4]
   2b3d0:	ldr	r1, [r0, #8]
   2b3d4:	ldr	r7, [r0, #12]
   2b3d8:	ldr	r5, [r0, #16]
   2b3dc:	ldr	r4, [r0, #20]
   2b3e0:	ldr	r6, [r0, #24]
   2b3e4:	ldr	r0, [r0, #28]
   2b3e8:	orr	sl, sl, r0
   2b3ec:	ldr	r0, [sp, #144]	; 0x90
   2b3f0:	orr	r0, r0, r6
   2b3f4:	ldr	r6, [sp, #148]	; 0x94
   2b3f8:	str	r0, [sp, #144]	; 0x90
   2b3fc:	ldr	r0, [sp, #152]	; 0x98
   2b400:	orr	r6, r6, r4
   2b404:	str	r6, [sp, #148]	; 0x94
   2b408:	ldr	r6, [sp, #156]	; 0x9c
   2b40c:	cmp	r8, r0
   2b410:	orr	r6, r6, r5
   2b414:	str	r6, [sp, #156]	; 0x9c
   2b418:	ldr	r6, [sp, #160]	; 0xa0
   2b41c:	orr	r6, r6, r7
   2b420:	ldr	r7, [sp, #132]	; 0x84
   2b424:	str	r6, [sp, #160]	; 0xa0
   2b428:	mov	r6, r0
   2b42c:	orr	r7, r7, r1
   2b430:	ldr	r1, [sp, #136]	; 0x88
   2b434:	orr	r1, r1, r2
   2b438:	mov	r2, r1
   2b43c:	ldr	r1, [sp, #140]	; 0x8c
   2b440:	beq	2b5d4 <__assert_fail@plt+0x19928>
   2b444:	mov	r0, #0
   2b448:	sub	lr, fp, #6144	; 0x1800
   2b44c:	str	r2, [sp, #136]	; 0x88
   2b450:	str	r7, [sp, #132]	; 0x84
   2b454:	str	r0, [fp, #-3136]	; 0xfffff3c0
   2b458:	add	r0, r8, r8, lsl #1
   2b45c:	sub	r2, lr, #104	; 0x68
   2b460:	add	r0, r2, r0, lsl #2
   2b464:	ldr	r7, [r0, #4]
   2b468:	cmp	r7, #1
   2b46c:	blt	2b4c8 <__assert_fail@plt+0x1981c>
   2b470:	ldr	r4, [r0, #8]
   2b474:	mov	r5, #0
   2b478:	b	2b488 <__assert_fail@plt+0x197dc>
   2b47c:	add	r5, r5, #1
   2b480:	cmp	r5, r7
   2b484:	bge	2b4c4 <__assert_fail@plt+0x19818>
   2b488:	ldr	r0, [r4, r5, lsl #2]
   2b48c:	ldr	r2, [r1, #12]
   2b490:	ldr	r0, [r2, r0, lsl #2]
   2b494:	cmn	r0, #1
   2b498:	beq	2b47c <__assert_fail@plt+0x197d0>
   2b49c:	ldr	r1, [r1, #24]
   2b4a0:	add	r0, r0, r0, lsl #1
   2b4a4:	add	r1, r1, r0, lsl #2
   2b4a8:	mov	r0, r9
   2b4ac:	bl	26748 <__assert_fail@plt+0x14a9c>
   2b4b0:	ldr	r1, [sp, #140]	; 0x8c
   2b4b4:	mov	r3, #0
   2b4b8:	cmp	r0, #0
   2b4bc:	beq	2b47c <__assert_fail@plt+0x197d0>
   2b4c0:	b	2b768 <__assert_fail@plt+0x19abc>
   2b4c4:	str	r3, [fp, #-56]	; 0xffffffc8
   2b4c8:	sub	r0, fp, #56	; 0x38
   2b4cc:	mov	r2, r9
   2b4d0:	mov	r3, #0
   2b4d4:	bl	26a48 <__assert_fail@plt+0x14d9c>
   2b4d8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   2b4dc:	mov	r7, r0
   2b4e0:	sub	lr, fp, #1024	; 0x400
   2b4e4:	sub	r0, lr, #56	; 0x38
   2b4e8:	cmp	r7, #0
   2b4ec:	str	r7, [r0, r8, lsl #2]
   2b4f0:	bne	2b388 <__assert_fail@plt+0x196dc>
   2b4f4:	cmp	r3, #0
   2b4f8:	beq	2b388 <__assert_fail@plt+0x196dc>
   2b4fc:	b	2b594 <__assert_fail@plt+0x198e8>
   2b500:	ldr	r1, [sp, #140]	; 0x8c
   2b504:	sub	r0, fp, #56	; 0x38
   2b508:	mov	r2, r9
   2b50c:	mov	r3, #1
   2b510:	bl	26a48 <__assert_fail@plt+0x14d9c>
   2b514:	sub	lr, fp, #2048	; 0x800
   2b518:	cmp	r0, #0
   2b51c:	sub	r1, lr, #56	; 0x38
   2b520:	str	r0, [r1, r8, lsl #2]
   2b524:	bne	2b534 <__assert_fail@plt+0x19888>
   2b528:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2b52c:	cmp	r1, #0
   2b530:	bne	2b594 <__assert_fail@plt+0x198e8>
   2b534:	cmp	r7, r0
   2b538:	beq	2b560 <__assert_fail@plt+0x198b4>
   2b53c:	ldr	r1, [sp, #140]	; 0x8c
   2b540:	ldr	r2, [sp, #128]	; 0x80
   2b544:	ldr	r0, [r1, #92]	; 0x5c
   2b548:	cmp	r0, #1
   2b54c:	mov	r0, #0
   2b550:	movwgt	r0, #1
   2b554:	orr	r2, r2, r0
   2b558:	str	r2, [sp, #128]	; 0x80
   2b55c:	b	2b564 <__assert_fail@plt+0x198b8>
   2b560:	ldr	r1, [sp, #140]	; 0x8c
   2b564:	sub	r0, fp, #56	; 0x38
   2b568:	mov	r2, r9
   2b56c:	mov	r3, #2
   2b570:	bl	26a48 <__assert_fail@plt+0x14d9c>
   2b574:	ldr	r3, [fp, #-56]	; 0xffffffc8
   2b578:	sub	lr, fp, #3072	; 0xc00
   2b57c:	cmp	r0, #0
   2b580:	sub	r1, lr, #56	; 0x38
   2b584:	str	r0, [r1, r8, lsl #2]
   2b588:	bne	2b3ac <__assert_fail@plt+0x19700>
   2b58c:	cmp	r3, #0
   2b590:	beq	2b3ac <__assert_fail@plt+0x19700>
   2b594:	ldr	r0, [sp, #144]	; 0x90
   2b598:	str	sl, [fp, #-3148]	; 0xfffff3b4
   2b59c:	str	r0, [fp, #-3152]	; 0xfffff3b0
   2b5a0:	ldr	r0, [sp, #148]	; 0x94
   2b5a4:	str	r0, [fp, #-3156]	; 0xfffff3ac
   2b5a8:	ldr	r0, [sp, #156]	; 0x9c
   2b5ac:	str	r0, [fp, #-3160]	; 0xfffff3a8
   2b5b0:	ldr	r0, [sp, #160]	; 0xa0
   2b5b4:	str	r0, [fp, #-3164]	; 0xfffff3a4
   2b5b8:	ldr	r0, [sp, #132]	; 0x84
   2b5bc:	str	r0, [fp, #-3168]	; 0xfffff3a0
   2b5c0:	ldr	r0, [sp, #136]	; 0x88
   2b5c4:	str	r0, [fp, #-3172]	; 0xfffff39c
   2b5c8:	ldr	r0, [sp, #164]	; 0xa4
   2b5cc:	str	r0, [fp, #-3176]	; 0xfffff398
   2b5d0:	b	2b7a8 <__assert_fail@plt+0x19afc>
   2b5d4:	ldr	r0, [sp, #144]	; 0x90
   2b5d8:	str	sl, [fp, #-3148]	; 0xfffff3b4
   2b5dc:	ldr	r9, [sp, #128]	; 0x80
   2b5e0:	ldr	sl, [sp, #164]	; 0xa4
   2b5e4:	str	r0, [fp, #-3152]	; 0xfffff3b0
   2b5e8:	ldr	r0, [sp, #148]	; 0x94
   2b5ec:	tst	r9, #1
   2b5f0:	str	r0, [fp, #-3156]	; 0xfffff3ac
   2b5f4:	ldr	r0, [sp, #156]	; 0x9c
   2b5f8:	str	r0, [fp, #-3160]	; 0xfffff3a8
   2b5fc:	ldr	r0, [sp, #160]	; 0xa0
   2b600:	str	r0, [fp, #-3164]	; 0xfffff3a4
   2b604:	mov	r0, #4
   2b608:	str	r7, [fp, #-3168]	; 0xfffff3a0
   2b60c:	str	r2, [fp, #-3172]	; 0xfffff39c
   2b610:	str	sl, [fp, #-3176]	; 0xfffff398
   2b614:	bne	2b8e0 <__assert_fail@plt+0x19c34>
   2b618:	mov	r1, #256	; 0x100
   2b61c:	bl	1b258 <__assert_fail@plt+0x95ac>
   2b620:	ldr	r1, [sp, #12]
   2b624:	cmp	r0, #0
   2b628:	str	r0, [r1, #44]	; 0x2c
   2b62c:	beq	2b7a8 <__assert_fail@plt+0x19afc>
   2b630:	ldr	r4, [sp, #140]	; 0x8c
   2b634:	mov	r1, #0
   2b638:	mov	r3, sl
   2b63c:	mov	r2, #0
   2b640:	add	r8, sp, #168	; 0xa8
   2b644:	cmp	r3, #0
   2b648:	bne	2b668 <__assert_fail@plt+0x199bc>
   2b64c:	b	2b6e0 <__assert_fail@plt+0x19a34>
   2b650:	sub	lr, fp, #3072	; 0xc00
   2b654:	add	r8, r8, #4
   2b658:	sub	r3, lr, #104	; 0x68
   2b65c:	ldr	r3, [r3, r2, lsl #2]
   2b660:	cmp	r3, #0
   2b664:	beq	2b6e0 <__assert_fail@plt+0x19a34>
   2b668:	add	r7, r4, r2, lsl #2
   2b66c:	lsl	r6, r2, #5
   2b670:	mov	r5, #1
   2b674:	add	ip, r7, #96	; 0x60
   2b678:	tst	r3, #1
   2b67c:	bne	2b69c <__assert_fail@plt+0x199f0>
   2b680:	lsr	r7, r3, #1
   2b684:	cmp	r1, r3, lsr #1
   2b688:	add	r6, r6, #1
   2b68c:	lsl	r5, r5, #1
   2b690:	mov	r3, r7
   2b694:	bne	2b678 <__assert_fail@plt+0x199cc>
   2b698:	b	2b6e0 <__assert_fail@plt+0x19a34>
   2b69c:	mov	lr, #0
   2b6a0:	ldr	r7, [r8, lr, lsl #3]
   2b6a4:	add	lr, lr, #4
   2b6a8:	tst	r7, r5
   2b6ac:	beq	2b6a0 <__assert_fail@plt+0x199f4>
   2b6b0:	ldr	r7, [ip]
   2b6b4:	sub	r4, fp, #2048	; 0x800
   2b6b8:	tst	r7, r5
   2b6bc:	sub	r7, r4, #56	; 0x38
   2b6c0:	sub	r4, fp, #1024	; 0x400
   2b6c4:	sub	r4, r4, #56	; 0x38
   2b6c8:	moveq	r7, r4
   2b6cc:	ldr	r4, [sp, #140]	; 0x8c
   2b6d0:	add	r7, r7, lr
   2b6d4:	ldr	r7, [r7, #-4]
   2b6d8:	str	r7, [r0, r6, lsl #2]
   2b6dc:	b	2b680 <__assert_fail@plt+0x199d4>
   2b6e0:	add	r2, r2, #1
   2b6e4:	cmp	r2, #8
   2b6e8:	bne	2b650 <__assert_fail@plt+0x199a4>
   2b6ec:	ldr	r5, [sp, #152]	; 0x98
   2b6f0:	tst	sl, #1024	; 0x400
   2b6f4:	beq	2b73c <__assert_fail@plt+0x19a90>
   2b6f8:	add	r1, sp, #168	; 0xa8
   2b6fc:	mov	r2, r5
   2b700:	ldrb	r3, [r1, #1]
   2b704:	tst	r3, #4
   2b708:	bne	2b728 <__assert_fail@plt+0x19a7c>
   2b70c:	ldr	r3, [sp, #124]	; 0x7c
   2b710:	add	r1, r1, #32
   2b714:	subs	r2, r2, #1
   2b718:	add	r3, r3, #4
   2b71c:	str	r3, [sp, #124]	; 0x7c
   2b720:	bne	2b700 <__assert_fail@plt+0x19a54>
   2b724:	b	2b73c <__assert_fail@plt+0x19a90>
   2b728:	ldr	r1, [sp, #124]	; 0x7c
   2b72c:	tst	r9, #1
   2b730:	ldr	r1, [r1]
   2b734:	str	r1, [r0, #40]	; 0x28
   2b738:	strne	r1, [r0, #1064]	; 0x428
   2b73c:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   2b740:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2b744:	sub	lr, fp, #6144	; 0x1800
   2b748:	sub	r0, lr, #104	; 0x68
   2b74c:	add	r4, r0, #8
   2b750:	ldr	r0, [r4], #12
   2b754:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2b758:	subs	r5, r5, #1
   2b75c:	bne	2b750 <__assert_fail@plt+0x19aa4>
   2b760:	mov	r0, #1
   2b764:	b	2b8c4 <__assert_fail@plt+0x19c18>
   2b768:	ldr	r1, [sp, #144]	; 0x90
   2b76c:	str	sl, [fp, #-3148]	; 0xfffff3b4
   2b770:	str	r0, [fp, #-56]	; 0xffffffc8
   2b774:	str	r1, [fp, #-3152]	; 0xfffff3b0
   2b778:	ldr	r1, [sp, #148]	; 0x94
   2b77c:	str	r1, [fp, #-3156]	; 0xfffff3ac
   2b780:	ldr	r1, [sp, #156]	; 0x9c
   2b784:	str	r1, [fp, #-3160]	; 0xfffff3a8
   2b788:	ldr	r1, [sp, #160]	; 0xa0
   2b78c:	str	r1, [fp, #-3164]	; 0xfffff3a4
   2b790:	ldr	r1, [sp, #132]	; 0x84
   2b794:	str	r1, [fp, #-3168]	; 0xfffff3a0
   2b798:	ldr	r1, [sp, #136]	; 0x88
   2b79c:	str	r1, [fp, #-3172]	; 0xfffff39c
   2b7a0:	ldr	r1, [sp, #164]	; 0xa4
   2b7a4:	str	r1, [fp, #-3176]	; 0xfffff398
   2b7a8:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   2b7ac:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2b7b0:	cmp	r6, #1
   2b7b4:	blt	2b880 <__assert_fail@plt+0x19bd4>
   2b7b8:	sub	lr, fp, #6144	; 0x1800
   2b7bc:	sub	r0, lr, #104	; 0x68
   2b7c0:	add	r4, r0, #8
   2b7c4:	ldr	r0, [r4], #12
   2b7c8:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2b7cc:	subs	r6, r6, #1
   2b7d0:	bne	2b7c4 <__assert_fail@plt+0x19b18>
   2b7d4:	b	2b880 <__assert_fail@plt+0x19bd4>
   2b7d8:	ldr	r0, [sp, #44]	; 0x2c
   2b7dc:	str	sl, [fp, #-1052]	; 0xfffffbe4
   2b7e0:	str	r5, [fp, #-1056]	; 0xfffffbe0
   2b7e4:	str	r8, [fp, #-1060]	; 0xfffffbdc
   2b7e8:	str	r6, [fp, #-1064]	; 0xfffffbd8
   2b7ec:	ldr	r6, [sp, #152]	; 0x98
   2b7f0:	str	r0, [fp, #-1068]	; 0xfffffbd4
   2b7f4:	ldr	r0, [sp, #48]	; 0x30
   2b7f8:	str	r0, [fp, #-1072]	; 0xfffffbd0
   2b7fc:	ldr	r0, [sp, #52]	; 0x34
   2b800:	str	r0, [fp, #-1076]	; 0xfffffbcc
   2b804:	ldr	r0, [sp, #56]	; 0x38
   2b808:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2b80c:	cmp	r6, #1
   2b810:	bge	2b864 <__assert_fail@plt+0x19bb8>
   2b814:	b	2b880 <__assert_fail@plt+0x19bd4>
   2b818:	ldr	r0, [sp, #32]
   2b81c:	str	sl, [fp, #-1052]	; 0xfffffbe4
   2b820:	str	r0, [fp, #-1056]	; 0xfffffbe0
   2b824:	ldr	r0, [sp, #40]	; 0x28
   2b828:	str	r8, [fp, #-1060]	; 0xfffffbdc
   2b82c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   2b830:	ldr	r0, [sp, #44]	; 0x2c
   2b834:	str	r0, [fp, #-1068]	; 0xfffffbd4
   2b838:	ldr	r0, [sp, #48]	; 0x30
   2b83c:	str	r0, [fp, #-1072]	; 0xfffffbd0
   2b840:	ldr	r0, [sp, #52]	; 0x34
   2b844:	str	r0, [fp, #-1076]	; 0xfffffbcc
   2b848:	ldr	r0, [sp, #56]	; 0x38
   2b84c:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2b850:	mov	r0, #0
   2b854:	str	r0, [r5]
   2b858:	str	r0, [r4]
   2b85c:	cmp	r6, #1
   2b860:	blt	2b880 <__assert_fail@plt+0x19bd4>
   2b864:	sub	lr, fp, #6144	; 0x1800
   2b868:	sub	r0, lr, #104	; 0x68
   2b86c:	add	r4, r0, #8
   2b870:	ldr	r0, [r4], #12
   2b874:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2b878:	subs	r6, r6, #1
   2b87c:	bne	2b870 <__assert_fail@plt+0x19bc4>
   2b880:	mov	r0, #0
   2b884:	b	2b8c4 <__assert_fail@plt+0x19c18>
   2b888:	mov	r0, #0
   2b88c:	str	r0, [r6]
   2b890:	str	r0, [r7]
   2b894:	mov	r6, r5
   2b898:	cmp	r6, #1
   2b89c:	bge	2b864 <__assert_fail@plt+0x19bb8>
   2b8a0:	b	2b880 <__assert_fail@plt+0x19bd4>
   2b8a4:	mov	r0, #0
   2b8a8:	bne	2b8c4 <__assert_fail@plt+0x19c18>
   2b8ac:	mov	r0, #4
   2b8b0:	mov	r1, #256	; 0x100
   2b8b4:	bl	1b258 <__assert_fail@plt+0x95ac>
   2b8b8:	cmp	r0, #0
   2b8bc:	str	r0, [r8, #44]	; 0x2c
   2b8c0:	movwne	r0, #1
   2b8c4:	sub	sp, fp, #48	; 0x30
   2b8c8:	vpop	{d8-d9}
   2b8cc:	add	sp, sp, #4
   2b8d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b8d4:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   2b8d8:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2b8dc:	b	2b7b8 <__assert_fail@plt+0x19b0c>
   2b8e0:	mov	r1, #512	; 0x200
   2b8e4:	bl	1b258 <__assert_fail@plt+0x95ac>
   2b8e8:	ldr	r1, [sp, #12]
   2b8ec:	cmp	r0, #0
   2b8f0:	str	r0, [r1, #48]	; 0x30
   2b8f4:	beq	2b7a8 <__assert_fail@plt+0x19afc>
   2b8f8:	sub	lr, fp, #1024	; 0x400
   2b8fc:	mov	r3, #0
   2b900:	add	r8, sp, #168	; 0xa8
   2b904:	mov	r5, sl
   2b908:	mov	r6, #0
   2b90c:	sub	r1, lr, #56	; 0x38
   2b910:	sub	lr, fp, #2048	; 0x800
   2b914:	sub	ip, r1, #4
   2b918:	sub	r1, lr, #56	; 0x38
   2b91c:	sub	lr, r1, #4
   2b920:	cmp	r5, #0
   2b924:	bne	2b944 <__assert_fail@plt+0x19c98>
   2b928:	b	2b9b0 <__assert_fail@plt+0x19d04>
   2b92c:	sub	r1, fp, #3072	; 0xc00
   2b930:	add	r8, r8, #4
   2b934:	sub	r1, r1, #104	; 0x68
   2b938:	ldr	r5, [r1, r6, lsl #2]
   2b93c:	cmp	r5, #0
   2b940:	beq	2b9b0 <__assert_fail@plt+0x19d04>
   2b944:	lsl	r4, r6, #5
   2b948:	mov	r1, #1
   2b94c:	tst	r5, #1
   2b950:	bne	2b970 <__assert_fail@plt+0x19cc4>
   2b954:	lsr	r2, r5, #1
   2b958:	cmp	r3, r5, lsr #1
   2b95c:	add	r4, r4, #1
   2b960:	lsl	r1, r1, #1
   2b964:	mov	r5, r2
   2b968:	bne	2b94c <__assert_fail@plt+0x19ca0>
   2b96c:	b	2b9b0 <__assert_fail@plt+0x19d04>
   2b970:	mov	r2, r8
   2b974:	mov	sl, ip
   2b978:	mov	r9, lr
   2b97c:	ldr	r7, [r2], #32
   2b980:	add	sl, sl, #4
   2b984:	add	r9, r9, #4
   2b988:	tst	r7, r1
   2b98c:	beq	2b97c <__assert_fail@plt+0x19cd0>
   2b990:	ldr	r2, [sl]
   2b994:	mov	r7, r0
   2b998:	str	r2, [r7, r4, lsl #2]!
   2b99c:	ldr	r2, [r9]
   2b9a0:	ldr	r9, [sp, #128]	; 0x80
   2b9a4:	ldr	sl, [sp, #164]	; 0xa4
   2b9a8:	str	r2, [r7, #1024]	; 0x400
   2b9ac:	b	2b954 <__assert_fail@plt+0x19ca8>
   2b9b0:	add	r6, r6, #1
   2b9b4:	cmp	r6, #8
   2b9b8:	bne	2b92c <__assert_fail@plt+0x19c80>
   2b9bc:	b	2b6ec <__assert_fail@plt+0x19a40>
   2b9c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b9c4:	add	fp, sp, #28
   2b9c8:	sub	sp, sp, #52	; 0x34
   2b9cc:	ldr	r7, [r1, #8]
   2b9d0:	ldr	r4, [r1, #12]
   2b9d4:	mov	r5, r0
   2b9d8:	mov	r0, #1
   2b9dc:	mov	r9, r1
   2b9e0:	str	r0, [sp, #44]	; 0x2c
   2b9e4:	str	r0, [sp, #40]	; 0x28
   2b9e8:	mov	r0, #4
   2b9ec:	bl	1b5b8 <__assert_fail@plt+0x990c>
   2b9f0:	cmp	r0, #0
   2b9f4:	str	r0, [sp, #48]	; 0x30
   2b9f8:	beq	2be4c <__assert_fail@plt+0x1a1a0>
   2b9fc:	str	r7, [r0]
   2ba00:	add	r3, sp, #40	; 0x28
   2ba04:	mov	r0, r5
   2ba08:	mov	r1, r9
   2ba0c:	mov	r2, r4
   2ba10:	str	r5, [sp, #20]
   2ba14:	bl	2be68 <__assert_fail@plt+0x1a1bc>
   2ba18:	cmp	r0, #0
   2ba1c:	bne	2be44 <__assert_fail@plt+0x1a198>
   2ba20:	add	r0, r9, #16
   2ba24:	mov	r5, r4
   2ba28:	mov	r1, #0
   2ba2c:	str	r9, [sp, #12]
   2ba30:	str	r0, [sp, #16]
   2ba34:	cmp	r5, #1
   2ba38:	bge	2ba68 <__assert_fail@plt+0x19dbc>
   2ba3c:	b	2be04 <__assert_fail@plt+0x1a158>
   2ba40:	mov	r0, r7
   2ba44:	mov	r1, r9
   2ba48:	mov	r2, r5
   2ba4c:	add	r3, sp, #40	; 0x28
   2ba50:	bl	2be68 <__assert_fail@plt+0x1a1bc>
   2ba54:	ldr	r1, [sp, #8]
   2ba58:	cmp	r0, #0
   2ba5c:	bne	2be44 <__assert_fail@plt+0x1a198>
   2ba60:	cmp	r5, #1
   2ba64:	blt	2be04 <__assert_fail@plt+0x1a158>
   2ba68:	ldr	r0, [r9]
   2ba6c:	ldr	r7, [sp, #20]
   2ba70:	ldr	r2, [r0, r5, lsl #2]
   2ba74:	cmp	r2, #0
   2ba78:	mov	r2, #0
   2ba7c:	addeq	r2, r1, #1
   2ba80:	ldr	r1, [r7, #120]	; 0x78
   2ba84:	cmp	r2, r1
   2ba88:	bgt	2be0c <__assert_fail@plt+0x1a160>
   2ba8c:	mov	r0, #0
   2ba90:	str	r5, [sp, #24]
   2ba94:	sub	r5, r5, #1
   2ba98:	str	r2, [sp, #8]
   2ba9c:	str	r0, [sp, #44]	; 0x2c
   2baa0:	ldr	r0, [r7, #100]	; 0x64
   2baa4:	ldr	r1, [r0, r5, lsl #2]
   2baa8:	cmp	r1, #0
   2baac:	beq	2ba40 <__assert_fail@plt+0x19d94>
   2bab0:	ldr	r0, [r1, #20]
   2bab4:	cmp	r0, #1
   2bab8:	blt	2ba40 <__assert_fail@plt+0x19d94>
   2babc:	ldr	r6, [r7, #84]	; 0x54
   2bac0:	mov	r8, #0
   2bac4:	str	r5, [sp, #28]
   2bac8:	str	r1, [sp, #36]	; 0x24
   2bacc:	str	r6, [sp, #32]
   2bad0:	b	2bb14 <__assert_fail@plt+0x19e68>
   2bad4:	ldr	r2, [sp, #40]	; 0x28
   2bad8:	cmp	r2, #0
   2badc:	beq	2bcd4 <__assert_fail@plt+0x1a028>
   2bae0:	ldr	r1, [sp, #44]	; 0x2c
   2bae4:	cmp	r1, #0
   2bae8:	bne	2bcfc <__assert_fail@plt+0x1a050>
   2baec:	ldr	r0, [sp, #48]	; 0x30
   2baf0:	str	sl, [r0]
   2baf4:	ldr	r0, [sp, #44]	; 0x2c
   2baf8:	add	r0, r0, #1
   2bafc:	str	r0, [sp, #44]	; 0x2c
   2bb00:	ldr	r1, [sp, #36]	; 0x24
   2bb04:	add	r8, r8, #1
   2bb08:	ldr	r0, [r1, #20]
   2bb0c:	cmp	r8, r0
   2bb10:	bge	2ba40 <__assert_fail@plt+0x19d94>
   2bb14:	ldr	r0, [r1, #24]
   2bb18:	ldr	sl, [r0, r8, lsl #2]
   2bb1c:	ldr	r0, [r6]
   2bb20:	add	r0, r0, sl, lsl #3
   2bb24:	ldrb	r0, [r0, #6]
   2bb28:	tst	r0, #16
   2bb2c:	bne	2bbcc <__assert_fail@plt+0x19f20>
   2bb30:	ldr	r0, [r6]
   2bb34:	mov	r2, r5
   2bb38:	add	r1, r0, sl, lsl #3
   2bb3c:	mov	r0, r7
   2bb40:	bl	2a67c <__assert_fail@plt+0x189d0>
   2bb44:	cmp	r0, #0
   2bb48:	beq	2bb00 <__assert_fail@plt+0x19e54>
   2bb4c:	ldr	r0, [r9]
   2bb50:	ldr	r1, [sp, #24]
   2bb54:	ldr	r0, [r0, r1, lsl #2]
   2bb58:	cmp	r0, #0
   2bb5c:	beq	2bb00 <__assert_fail@plt+0x19e54>
   2bb60:	ldr	r2, [r0, #8]
   2bb64:	cmp	r2, #1
   2bb68:	blt	2bb00 <__assert_fail@plt+0x19e54>
   2bb6c:	ldr	r1, [r6, #12]
   2bb70:	ldr	r0, [r0, #12]
   2bb74:	subs	r3, r2, #1
   2bb78:	mov	r2, #0
   2bb7c:	ldr	r1, [r1, sl, lsl #2]
   2bb80:	beq	2bba8 <__assert_fail@plt+0x19efc>
   2bb84:	mov	r4, #1
   2bb88:	add	r7, r2, r3
   2bb8c:	lsr	r6, r7, #1
   2bb90:	ldr	r5, [r0, r6, lsl #2]
   2bb94:	cmp	r5, r1
   2bb98:	addlt	r2, r4, r7, lsr #1
   2bb9c:	movge	r3, r6
   2bba0:	cmp	r2, r3
   2bba4:	bcc	2bb88 <__assert_fail@plt+0x19edc>
   2bba8:	ldr	r2, [r0, r2, lsl #2]
   2bbac:	ldr	r9, [sp, #12]
   2bbb0:	ldr	r7, [sp, #20]
   2bbb4:	ldr	r5, [sp, #28]
   2bbb8:	ldr	r6, [sp, #32]
   2bbbc:	mov	r0, #1
   2bbc0:	cmp	r2, r1
   2bbc4:	bne	2bb00 <__assert_fail@plt+0x19e54>
   2bbc8:	b	2bc9c <__assert_fail@plt+0x19ff0>
   2bbcc:	ldr	r4, [r7, #84]	; 0x54
   2bbd0:	ldr	r6, [r9, #12]
   2bbd4:	mov	r1, sl
   2bbd8:	mov	r2, r7
   2bbdc:	mov	r3, r5
   2bbe0:	mov	r0, r4
   2bbe4:	bl	2a318 <__assert_fail@plt+0x1866c>
   2bbe8:	cmp	r0, #1
   2bbec:	blt	2bc08 <__assert_fail@plt+0x19f5c>
   2bbf0:	add	r1, r0, r5
   2bbf4:	cmp	r1, r6
   2bbf8:	ble	2bc18 <__assert_fail@plt+0x19f6c>
   2bbfc:	ldr	r5, [sp, #28]
   2bc00:	ldr	r6, [sp, #32]
   2bc04:	b	2bc9c <__assert_fail@plt+0x19ff0>
   2bc08:	ldr	r6, [sp, #32]
   2bc0c:	cmp	r0, #0
   2bc10:	bne	2bc9c <__assert_fail@plt+0x19ff0>
   2bc14:	b	2bb30 <__assert_fail@plt+0x19e84>
   2bc18:	ldr	r2, [r9]
   2bc1c:	ldr	r5, [sp, #28]
   2bc20:	ldr	r6, [sp, #32]
   2bc24:	ldr	r2, [r2, r1, lsl #2]
   2bc28:	cmp	r2, #0
   2bc2c:	beq	2bb30 <__assert_fail@plt+0x19e84>
   2bc30:	ldr	r3, [r2, #8]
   2bc34:	cmp	r3, #1
   2bc38:	blt	2bb30 <__assert_fail@plt+0x19e84>
   2bc3c:	ldr	r1, [r4, #12]
   2bc40:	ldr	r2, [r2, #12]
   2bc44:	subs	r4, r3, #1
   2bc48:	mov	r3, #0
   2bc4c:	ldr	r1, [r1, sl, lsl #2]
   2bc50:	beq	2bc78 <__assert_fail@plt+0x19fcc>
   2bc54:	mov	ip, #1
   2bc58:	add	r5, r3, r4
   2bc5c:	lsr	r6, r5, #1
   2bc60:	ldr	r7, [r2, r6, lsl #2]
   2bc64:	cmp	r7, r1
   2bc68:	addlt	r3, ip, r5, lsr #1
   2bc6c:	movge	r4, r6
   2bc70:	cmp	r3, r4
   2bc74:	bcc	2bc58 <__assert_fail@plt+0x19fac>
   2bc78:	ldr	r9, [sp, #12]
   2bc7c:	ldr	r7, [sp, #20]
   2bc80:	ldr	r5, [sp, #28]
   2bc84:	ldr	r6, [sp, #32]
   2bc88:	cmp	r0, #0
   2bc8c:	beq	2bb30 <__assert_fail@plt+0x19e84>
   2bc90:	ldr	r2, [r2, r3, lsl #2]
   2bc94:	cmp	r2, r1
   2bc98:	bne	2bb30 <__assert_fail@plt+0x19e84>
   2bc9c:	ldr	r1, [r9, #20]
   2bca0:	cmp	r1, #0
   2bca4:	beq	2bad4 <__assert_fail@plt+0x19e28>
   2bca8:	ldr	r1, [r6, #12]
   2bcac:	add	r3, r0, r5
   2bcb0:	mov	r0, r7
   2bcb4:	ldr	r2, [r1, sl, lsl #2]
   2bcb8:	ldr	r1, [sp, #16]
   2bcbc:	str	sl, [sp]
   2bcc0:	str	r5, [sp, #4]
   2bcc4:	bl	2d00c <__assert_fail@plt+0x1b360>
   2bcc8:	cmp	r0, #0
   2bccc:	beq	2bad4 <__assert_fail@plt+0x19e28>
   2bcd0:	b	2bb00 <__assert_fail@plt+0x19e54>
   2bcd4:	mov	r0, #1
   2bcd8:	str	r0, [sp, #44]	; 0x2c
   2bcdc:	str	r0, [sp, #40]	; 0x28
   2bce0:	mov	r0, #4
   2bce4:	bl	1b5b8 <__assert_fail@plt+0x990c>
   2bce8:	cmp	r0, #0
   2bcec:	str	r0, [sp, #48]	; 0x30
   2bcf0:	beq	2be30 <__assert_fail@plt+0x1a184>
   2bcf4:	str	sl, [r0]
   2bcf8:	b	2bb00 <__assert_fail@plt+0x19e54>
   2bcfc:	cmp	r2, r1
   2bd00:	bne	2bd2c <__assert_fail@plt+0x1a080>
   2bd04:	lsl	r0, r2, #1
   2bd08:	lsl	r1, r2, #3
   2bd0c:	str	r0, [sp, #40]	; 0x28
   2bd10:	ldr	r0, [sp, #48]	; 0x30
   2bd14:	bl	1b64c <__assert_fail@plt+0x99a0>
   2bd18:	cmp	r0, #0
   2bd1c:	beq	2be60 <__assert_fail@plt+0x1a1b4>
   2bd20:	str	r0, [sp, #48]	; 0x30
   2bd24:	ldr	r1, [sp, #44]	; 0x2c
   2bd28:	b	2bd30 <__assert_fail@plt+0x1a084>
   2bd2c:	ldr	r0, [sp, #48]	; 0x30
   2bd30:	ldr	r2, [r0]
   2bd34:	cmp	r2, sl
   2bd38:	ble	2bd84 <__assert_fail@plt+0x1a0d8>
   2bd3c:	cmp	r1, #1
   2bd40:	blt	2bdfc <__assert_fail@plt+0x1a150>
   2bd44:	ands	r3, r1, #3
   2bd48:	sub	r2, r1, #1
   2bd4c:	beq	2bd70 <__assert_fail@plt+0x1a0c4>
   2bd50:	add	r4, r0, r1, lsl #2
   2bd54:	mov	r5, r4
   2bd58:	ldr	r7, [r5, #-4]!
   2bd5c:	subs	r3, r3, #1
   2bd60:	sub	r1, r1, #1
   2bd64:	str	r7, [r4]
   2bd68:	mov	r4, r5
   2bd6c:	bne	2bd58 <__assert_fail@plt+0x1a0ac>
   2bd70:	cmp	r2, #3
   2bd74:	bcs	2bdb8 <__assert_fail@plt+0x1a10c>
   2bd78:	ldr	r7, [sp, #20]
   2bd7c:	ldr	r5, [sp, #28]
   2bd80:	b	2bdf8 <__assert_fail@plt+0x1a14c>
   2bd84:	add	r2, r0, r1, lsl #2
   2bd88:	ldr	r3, [r2, #-4]
   2bd8c:	cmp	r3, sl
   2bd90:	ble	2bdfc <__assert_fail@plt+0x1a150>
   2bd94:	sub	r1, r1, #2
   2bd98:	str	r3, [r2]
   2bd9c:	sub	r1, r1, #1
   2bda0:	ldr	r3, [r2, #-8]
   2bda4:	sub	r2, r2, #4
   2bda8:	cmp	r3, sl
   2bdac:	bgt	2bd98 <__assert_fail@plt+0x1a0ec>
   2bdb0:	add	r1, r1, #2
   2bdb4:	b	2bdfc <__assert_fail@plt+0x1a150>
   2bdb8:	add	r2, r0, r1, lsl #2
   2bdbc:	sub	r2, r2, #8
   2bdc0:	ldr	r6, [r2]
   2bdc4:	ldr	r5, [r2, #4]
   2bdc8:	ldmdb	r2, {r3, r7}
   2bdcc:	sub	r1, r1, #4
   2bdd0:	cmp	r1, #0
   2bdd4:	stmda	r2, {r3, r7}
   2bdd8:	str	r6, [r2, #4]
   2bddc:	str	r5, [r2, #8]
   2bde0:	sub	r2, r2, #16
   2bde4:	bgt	2bdc0 <__assert_fail@plt+0x1a114>
   2bde8:	ldr	r9, [sp, #12]
   2bdec:	ldr	r7, [sp, #20]
   2bdf0:	ldr	r5, [sp, #28]
   2bdf4:	ldr	r6, [sp, #32]
   2bdf8:	mov	r1, #0
   2bdfc:	str	sl, [r0, r1, lsl #2]
   2be00:	b	2baf4 <__assert_fail@plt+0x19e48>
   2be04:	mov	r7, #0
   2be08:	b	2be1c <__assert_fail@plt+0x1a170>
   2be0c:	lsl	r2, r5, #2
   2be10:	mov	r1, #0
   2be14:	mov	r7, #0
   2be18:	bl	11b2c <memset@plt>
   2be1c:	ldr	r0, [sp, #48]	; 0x30
   2be20:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2be24:	mov	r0, r7
   2be28:	sub	sp, fp, #28
   2be2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2be30:	mov	r0, #0
   2be34:	mov	r7, #12
   2be38:	str	r0, [sp, #40]	; 0x28
   2be3c:	str	r0, [sp, #44]	; 0x2c
   2be40:	b	2be1c <__assert_fail@plt+0x1a170>
   2be44:	mov	r7, r0
   2be48:	b	2be1c <__assert_fail@plt+0x1a170>
   2be4c:	mov	r0, #0
   2be50:	mov	r7, #12
   2be54:	str	r0, [sp, #40]	; 0x28
   2be58:	str	r0, [sp, #44]	; 0x2c
   2be5c:	b	2be24 <__assert_fail@plt+0x1a178>
   2be60:	mov	r7, #12
   2be64:	b	2be1c <__assert_fail@plt+0x1a170>
   2be68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2be6c:	add	fp, sp, #28
   2be70:	sub	sp, sp, #132	; 0x84
   2be74:	mov	r6, r0
   2be78:	ldr	r8, [r0, #84]	; 0x54
   2be7c:	mov	r0, #0
   2be80:	mov	sl, r1
   2be84:	mov	r5, r2
   2be88:	str	r2, [sp, #76]	; 0x4c
   2be8c:	str	r0, [fp, #-76]	; 0xffffffb4
   2be90:	str	r6, [sp, #52]	; 0x34
   2be94:	ldr	r1, [r6, #100]	; 0x64
   2be98:	ldr	r7, [r1, r2, lsl #2]
   2be9c:	ldr	r1, [r3, #4]
   2bea0:	cmp	r7, #0
   2bea4:	mov	r9, r7
   2bea8:	addne	r9, r9, #4
   2beac:	cmp	r1, #0
   2beb0:	beq	2c274 <__assert_fail@plt+0x1a5c8>
   2beb4:	mov	lr, r3
   2beb8:	cmp	r7, #0
   2bebc:	beq	2c29c <__assert_fail@plt+0x1a5f0>
   2bec0:	mov	r0, #0
   2bec4:	mov	r1, r8
   2bec8:	mov	r2, lr
   2becc:	str	r8, [sp, #80]	; 0x50
   2bed0:	str	lr, [sp, #60]	; 0x3c
   2bed4:	str	r0, [fp, #-72]	; 0xffffffb8
   2bed8:	sub	r0, fp, #72	; 0x48
   2bedc:	bl	2a000 <__assert_fail@plt+0x18354>
   2bee0:	ldr	r8, [fp, #-72]	; 0xffffffb8
   2bee4:	cmp	r8, #0
   2bee8:	bne	2ca64 <__assert_fail@plt+0x1adb8>
   2beec:	mov	r5, r0
   2bef0:	mov	r4, r0
   2bef4:	ldr	r2, [sp, #60]	; 0x3c
   2bef8:	ldr	r0, [r5, #28]!
   2befc:	cmp	r0, #0
   2bf00:	bne	2bfa0 <__assert_fail@plt+0x1a2f4>
   2bf04:	ldr	r0, [r2, #4]
   2bf08:	mov	r1, #0
   2bf0c:	str	r0, [r4, #28]
   2bf10:	lsl	r0, r0, #2
   2bf14:	str	r1, [r4, #32]
   2bf18:	bl	1b5b8 <__assert_fail@plt+0x990c>
   2bf1c:	cmp	r0, #0
   2bf20:	mov	r1, #12
   2bf24:	mov	r8, #12
   2bf28:	str	r0, [r4, #36]	; 0x24
   2bf2c:	movne	r1, #0
   2bf30:	cmp	r0, #0
   2bf34:	str	r1, [fp, #-72]	; 0xffffffb8
   2bf38:	beq	2ca64 <__assert_fail@plt+0x1adb8>
   2bf3c:	ldr	r2, [sp, #60]	; 0x3c
   2bf40:	ldr	r0, [r2, #4]
   2bf44:	cmp	r0, #1
   2bf48:	blt	2bfa0 <__assert_fail@plt+0x1a2f4>
   2bf4c:	str	r9, [sp, #72]	; 0x48
   2bf50:	mov	r4, #0
   2bf54:	ldr	r0, [r2, #8]
   2bf58:	ldr	r1, [sp, #80]	; 0x50
   2bf5c:	mov	r9, r2
   2bf60:	ldr	r0, [r0, r4, lsl #2]
   2bf64:	ldr	r1, [r1, #28]
   2bf68:	add	r0, r0, r0, lsl #1
   2bf6c:	add	r1, r1, r0, lsl #2
   2bf70:	mov	r0, r5
   2bf74:	bl	26748 <__assert_fail@plt+0x14a9c>
   2bf78:	cmp	r0, #0
   2bf7c:	bne	2ca60 <__assert_fail@plt+0x1adb4>
   2bf80:	ldr	r0, [r9, #4]
   2bf84:	add	r4, r4, #1
   2bf88:	mov	r2, r9
   2bf8c:	cmp	r4, r0
   2bf90:	blt	2bf54 <__assert_fail@plt+0x1a2a8>
   2bf94:	ldr	r9, [sp, #72]	; 0x48
   2bf98:	mov	r0, #0
   2bf9c:	str	r0, [fp, #-72]	; 0xffffffb8
   2bfa0:	mov	r0, r2
   2bfa4:	mov	r1, r9
   2bfa8:	mov	r2, r5
   2bfac:	bl	2caa4 <__assert_fail@plt+0x1adf8>
   2bfb0:	cmp	r0, #0
   2bfb4:	str	r0, [fp, #-76]	; 0xffffffb4
   2bfb8:	bne	2ca74 <__assert_fail@plt+0x1adc8>
   2bfbc:	ldr	r0, [sl, #20]
   2bfc0:	ldr	r5, [sp, #76]	; 0x4c
   2bfc4:	ldr	lr, [sp, #60]	; 0x3c
   2bfc8:	ldr	r8, [sp, #80]	; 0x50
   2bfcc:	cmp	r0, #0
   2bfd0:	beq	2c29c <__assert_fail@plt+0x1a5f0>
   2bfd4:	cmp	r0, #1
   2bfd8:	str	r7, [sp, #48]	; 0x30
   2bfdc:	str	r9, [sp, #72]	; 0x48
   2bfe0:	blt	2c288 <__assert_fail@plt+0x1a5dc>
   2bfe4:	ldr	r0, [sp, #52]	; 0x34
   2bfe8:	mov	r9, #0
   2bfec:	str	sl, [sp, #64]	; 0x40
   2bff0:	ldr	r0, [r0, #116]	; 0x74
   2bff4:	str	r0, [sp, #68]	; 0x44
   2bff8:	b	2c010 <__assert_fail@plt+0x1a364>
   2bffc:	ldr	sl, [sp, #64]	; 0x40
   2c000:	add	r9, r9, #1
   2c004:	ldr	r0, [sl, #20]
   2c008:	cmp	r9, r0
   2c00c:	bge	2c288 <__assert_fail@plt+0x1a5dc>
   2c010:	ldr	r0, [sl, #24]
   2c014:	ldr	r1, [sp, #68]	; 0x44
   2c018:	ldr	r0, [r0, r9, lsl #2]
   2c01c:	add	r0, r0, r0, lsl #1
   2c020:	add	r1, r1, r0, lsl #3
   2c024:	ldr	r2, [r1, #8]
   2c028:	cmp	r2, r5
   2c02c:	bge	2bffc <__assert_fail@plt+0x1a350>
   2c030:	ldr	r1, [r1, #4]
   2c034:	cmp	r1, r5
   2c038:	blt	2bffc <__assert_fail@plt+0x1a350>
   2c03c:	ldr	r1, [sp, #68]	; 0x44
   2c040:	ldr	r2, [r8]
   2c044:	ldr	r0, [r1, r0, lsl #3]!
   2c048:	ldr	r1, [r1, #12]
   2c04c:	ldr	r4, [r2, r0, lsl #3]
   2c050:	ldr	r0, [lr, #4]
   2c054:	cmp	r1, r5
   2c058:	bne	2c0b8 <__assert_fail@plt+0x1a40c>
   2c05c:	cmp	r0, #1
   2c060:	blt	2bffc <__assert_fail@plt+0x1a350>
   2c064:	ldr	r3, [lr, #8]
   2c068:	mvn	sl, #0
   2c06c:	mvn	r1, #0
   2c070:	b	2c08c <__assert_fail@plt+0x1a3e0>
   2c074:	ldr	r6, [r2, r7, lsl #3]
   2c078:	cmp	r4, r6
   2c07c:	moveq	sl, r7
   2c080:	add	r3, r3, #4
   2c084:	subs	r0, r0, #1
   2c088:	beq	2c128 <__assert_fail@plt+0x1a47c>
   2c08c:	ldr	r7, [r3]
   2c090:	add	r6, r2, r7, lsl #3
   2c094:	ldrb	r6, [r6, #4]
   2c098:	cmp	r6, #9
   2c09c:	beq	2c074 <__assert_fail@plt+0x1a3c8>
   2c0a0:	cmp	r6, #8
   2c0a4:	bne	2c080 <__assert_fail@plt+0x1a3d4>
   2c0a8:	ldr	r6, [r2, r7, lsl #3]
   2c0ac:	cmp	r4, r6
   2c0b0:	moveq	r1, r7
   2c0b4:	b	2c080 <__assert_fail@plt+0x1a3d4>
   2c0b8:	cmp	r0, #1
   2c0bc:	blt	2bffc <__assert_fail@plt+0x1a350>
   2c0c0:	mov	r7, #0
   2c0c4:	ldr	r1, [lr, #8]
   2c0c8:	ldr	r1, [r1, r7, lsl #2]
   2c0cc:	add	r3, r2, r1, lsl #3
   2c0d0:	ldrb	r3, [r3, #4]
   2c0d4:	orr	r3, r3, #1
   2c0d8:	cmp	r3, #9
   2c0dc:	bne	2c114 <__assert_fail@plt+0x1a468>
   2c0e0:	ldr	r2, [r2, r1, lsl #3]
   2c0e4:	cmp	r4, r2
   2c0e8:	bne	2c114 <__assert_fail@plt+0x1a468>
   2c0ec:	ldr	r3, [sp, #72]	; 0x48
   2c0f0:	mov	r0, r8
   2c0f4:	mov	r2, lr
   2c0f8:	mov	r6, lr
   2c0fc:	bl	2cc84 <__assert_fail@plt+0x1afd8>
   2c100:	cmp	r0, #0
   2c104:	bne	2ca20 <__assert_fail@plt+0x1ad74>
   2c108:	ldr	r0, [r6, #4]
   2c10c:	ldr	r8, [sp, #80]	; 0x50
   2c110:	mov	lr, r6
   2c114:	add	r7, r7, #1
   2c118:	cmp	r7, r0
   2c11c:	bge	2bffc <__assert_fail@plt+0x1a350>
   2c120:	ldr	r2, [r8]
   2c124:	b	2c0c4 <__assert_fail@plt+0x1a418>
   2c128:	cmp	r1, #0
   2c12c:	bmi	2c14c <__assert_fail@plt+0x1a4a0>
   2c130:	ldr	r0, [sp, #80]	; 0x50
   2c134:	ldr	r3, [sp, #72]	; 0x48
   2c138:	mov	r2, lr
   2c13c:	bl	2cc84 <__assert_fail@plt+0x1afd8>
   2c140:	ldr	lr, [sp, #60]	; 0x3c
   2c144:	cmp	r0, #0
   2c148:	bne	2ca20 <__assert_fail@plt+0x1ad74>
   2c14c:	ldr	r8, [sp, #80]	; 0x50
   2c150:	cmp	sl, #0
   2c154:	bmi	2bffc <__assert_fail@plt+0x1a350>
   2c158:	ldr	ip, [lr, #4]
   2c15c:	cmp	ip, #1
   2c160:	blt	2bffc <__assert_fail@plt+0x1a350>
   2c164:	mov	r4, #0
   2c168:	b	2c17c <__assert_fail@plt+0x1a4d0>
   2c16c:	ldr	lr, [sp, #60]	; 0x3c
   2c170:	add	r4, r4, #1
   2c174:	cmp	r4, ip
   2c178:	bge	2bffc <__assert_fail@plt+0x1a350>
   2c17c:	ldr	r0, [lr, #8]
   2c180:	ldr	r1, [r0, r4, lsl #2]
   2c184:	ldr	r0, [r8, #28]
   2c188:	add	lr, r1, r1, lsl #1
   2c18c:	add	r3, r0, lr, lsl #2
   2c190:	ldr	r0, [r3, #4]
   2c194:	cmp	r0, #1
   2c198:	blt	2c1e8 <__assert_fail@plt+0x1a53c>
   2c19c:	ldr	r3, [r3, #8]
   2c1a0:	mov	r7, #0
   2c1a4:	subs	r0, r0, #1
   2c1a8:	str	ip, [sp, #56]	; 0x38
   2c1ac:	beq	2c1d4 <__assert_fail@plt+0x1a528>
   2c1b0:	add	r6, r7, r0
   2c1b4:	mov	ip, #1
   2c1b8:	lsr	r5, r6, #1
   2c1bc:	ldr	r2, [r3, r5, lsl #2]
   2c1c0:	cmp	r2, sl
   2c1c4:	addlt	r7, ip, r6, lsr #1
   2c1c8:	movge	r0, r5
   2c1cc:	cmp	r7, r0
   2c1d0:	bcc	2c1b0 <__assert_fail@plt+0x1a504>
   2c1d4:	ldr	r0, [r3, r7, lsl #2]
   2c1d8:	ldr	r5, [sp, #76]	; 0x4c
   2c1dc:	ldr	ip, [sp, #56]	; 0x38
   2c1e0:	cmp	r0, sl
   2c1e4:	beq	2c16c <__assert_fail@plt+0x1a4c0>
   2c1e8:	ldr	r0, [r8, #24]
   2c1ec:	add	r2, r0, lr, lsl #2
   2c1f0:	ldr	lr, [sp, #60]	; 0x3c
   2c1f4:	ldr	r0, [r2, #4]
   2c1f8:	cmp	r0, #1
   2c1fc:	blt	2c244 <__assert_fail@plt+0x1a598>
   2c200:	ldr	r2, [r2, #8]
   2c204:	mov	r3, #0
   2c208:	subs	r0, r0, #1
   2c20c:	beq	2c234 <__assert_fail@plt+0x1a588>
   2c210:	add	r7, r3, r0
   2c214:	lsr	r6, r7, #1
   2c218:	ldr	r5, [r2, r6, lsl #2]
   2c21c:	cmp	r5, sl
   2c220:	movge	r0, r6
   2c224:	mov	r6, #1
   2c228:	addlt	r3, r6, r7, lsr #1
   2c22c:	cmp	r3, r0
   2c230:	bcc	2c210 <__assert_fail@plt+0x1a564>
   2c234:	ldr	r0, [r2, r3, lsl #2]
   2c238:	ldr	r5, [sp, #76]	; 0x4c
   2c23c:	cmp	r0, sl
   2c240:	beq	2c170 <__assert_fail@plt+0x1a4c4>
   2c244:	ldr	r3, [sp, #72]	; 0x48
   2c248:	mov	r0, r8
   2c24c:	mov	r2, lr
   2c250:	mov	r6, lr
   2c254:	bl	2cc84 <__assert_fail@plt+0x1afd8>
   2c258:	cmp	r0, #0
   2c25c:	bne	2ca20 <__assert_fail@plt+0x1ad74>
   2c260:	ldr	ip, [r6, #4]
   2c264:	ldr	r8, [sp, #80]	; 0x50
   2c268:	sub	r4, r4, #1
   2c26c:	mov	lr, r6
   2c270:	b	2c170 <__assert_fail@plt+0x1a4c4>
   2c274:	ldr	r1, [sl]
   2c278:	str	r0, [r1, r5, lsl #2]
   2c27c:	cmp	r7, #0
   2c280:	bne	2c2c8 <__assert_fail@plt+0x1a61c>
   2c284:	b	2ca10 <__assert_fail@plt+0x1ad64>
   2c288:	ldr	r6, [sp, #52]	; 0x34
   2c28c:	ldr	r9, [sp, #72]	; 0x48
   2c290:	ldr	r7, [sp, #48]	; 0x30
   2c294:	mov	r0, #0
   2c298:	str	r0, [fp, #-76]	; 0xffffffb4
   2c29c:	sub	r0, fp, #76	; 0x4c
   2c2a0:	mov	r1, r8
   2c2a4:	mov	r2, lr
   2c2a8:	bl	2a000 <__assert_fail@plt+0x18354>
   2c2ac:	ldr	r1, [sl]
   2c2b0:	str	r0, [r1, r5, lsl #2]
   2c2b4:	ldr	r8, [fp, #-76]	; 0xffffffb4
   2c2b8:	cmp	r8, #0
   2c2bc:	bne	2ca14 <__assert_fail@plt+0x1ad68>
   2c2c0:	cmp	r7, #0
   2c2c4:	beq	2ca10 <__assert_fail@plt+0x1ad64>
   2c2c8:	ldr	r0, [r6, #100]	; 0x64
   2c2cc:	ldr	r0, [r0, r5, lsl #2]
   2c2d0:	ldrb	r0, [r0, #52]	; 0x34
   2c2d4:	tst	r0, #64	; 0x40
   2c2d8:	beq	2ca10 <__assert_fail@plt+0x1ad64>
   2c2dc:	ldr	r0, [r6, #108]	; 0x6c
   2c2e0:	ldr	ip, [r6, #84]	; 0x54
   2c2e4:	cmp	r0, #1
   2c2e8:	blt	2c9fc <__assert_fail@plt+0x1ad50>
   2c2ec:	ldr	r1, [r6, #116]	; 0x74
   2c2f0:	mov	lr, #0
   2c2f4:	mov	r2, #1
   2c2f8:	mov	r3, r0
   2c2fc:	add	r7, r3, lr
   2c300:	add	r7, r7, r7, lsr #31
   2c304:	asr	r6, r7, #1
   2c308:	add	r4, r6, r6, lsl #1
   2c30c:	add	r4, r1, r4, lsl #3
   2c310:	ldr	r4, [r4, #4]
   2c314:	cmp	r4, r5
   2c318:	addlt	lr, r2, r7, asr #1
   2c31c:	movge	r3, r6
   2c320:	cmp	lr, r3
   2c324:	blt	2c2fc <__assert_fail@plt+0x1a650>
   2c328:	cmp	lr, r0
   2c32c:	bge	2ca08 <__assert_fail@plt+0x1ad5c>
   2c330:	cmn	lr, #1
   2c334:	beq	2ca08 <__assert_fail@plt+0x1ad5c>
   2c338:	ldr	r0, [sp, #52]	; 0x34
   2c33c:	add	r1, lr, lr, lsl #1
   2c340:	str	r1, [sp, #28]
   2c344:	ldr	r0, [r0, #116]	; 0x74
   2c348:	add	r0, r0, r1, lsl #3
   2c34c:	ldr	r0, [r0, #4]
   2c350:	cmp	r0, r5
   2c354:	bne	2ca08 <__assert_fail@plt+0x1ad5c>
   2c358:	mov	r1, #0
   2c35c:	ldr	r4, [sp, #52]	; 0x34
   2c360:	str	r1, [fp, #-72]	; 0xffffffb8
   2c364:	ldr	r0, [r9, #4]
   2c368:	cmp	r0, #0
   2c36c:	ble	2ca2c <__assert_fail@plt+0x1ad80>
   2c370:	add	r0, r5, #1
   2c374:	mov	r2, #0
   2c378:	mov	r3, ip
   2c37c:	str	ip, [sp, #80]	; 0x50
   2c380:	str	sl, [sp, #64]	; 0x40
   2c384:	str	r9, [sp, #72]	; 0x48
   2c388:	str	lr, [sp, #56]	; 0x38
   2c38c:	str	r0, [sp, #12]
   2c390:	sub	r0, fp, #72	; 0x48
   2c394:	add	r0, r0, #16
   2c398:	str	r0, [sp, #8]
   2c39c:	add	r0, sl, #16
   2c3a0:	str	r0, [sp, #36]	; 0x24
   2c3a4:	mov	r0, #0
   2c3a8:	str	r0, [sp, #40]	; 0x28
   2c3ac:	b	2c3c8 <__assert_fail@plt+0x1a71c>
   2c3b0:	ldr	r9, [sp, #72]	; 0x48
   2c3b4:	ldr	r2, [sp, #48]	; 0x30
   2c3b8:	ldr	r0, [r9, #4]
   2c3bc:	add	r2, r2, #1
   2c3c0:	cmp	r2, r0
   2c3c4:	bge	2ca34 <__assert_fail@plt+0x1ad88>
   2c3c8:	ldr	r0, [r9, #8]
   2c3cc:	ldr	r1, [sl, #8]
   2c3d0:	str	r2, [sp, #48]	; 0x30
   2c3d4:	ldr	r7, [r0, r2, lsl #2]
   2c3d8:	ldr	r0, [r3]
   2c3dc:	add	r0, r0, r7, lsl #3
   2c3e0:	cmp	r7, r1
   2c3e4:	ldrb	r0, [r0, #4]
   2c3e8:	bne	2c404 <__assert_fail@plt+0x1a758>
   2c3ec:	cmp	r0, #4
   2c3f0:	bne	2c3b0 <__assert_fail@plt+0x1a704>
   2c3f4:	ldr	r0, [sl, #12]
   2c3f8:	cmp	r0, r5
   2c3fc:	bne	2c40c <__assert_fail@plt+0x1a760>
   2c400:	b	2c3b0 <__assert_fail@plt+0x1a704>
   2c404:	cmp	r0, #4
   2c408:	bne	2c3b0 <__assert_fail@plt+0x1a704>
   2c40c:	ldr	r0, [r4, #116]	; 0x74
   2c410:	ldr	r1, [sp, #28]
   2c414:	mov	r9, lr
   2c418:	str	r7, [sp, #60]	; 0x3c
   2c41c:	add	r6, r0, r1, lsl #3
   2c420:	ldr	r0, [r6]
   2c424:	cmp	r0, r7
   2c428:	bne	2c518 <__assert_fail@plt+0x1a86c>
   2c42c:	ldr	r0, [r6, #8]
   2c430:	ldr	r1, [r6, #12]
   2c434:	subs	r0, r1, r0
   2c438:	add	ip, r0, r5
   2c43c:	beq	2c44c <__assert_fail@plt+0x1a7a0>
   2c440:	ldr	r1, [r3, #12]
   2c444:	add	r1, r1, r7, lsl #2
   2c448:	b	2c45c <__assert_fail@plt+0x1a7b0>
   2c44c:	ldr	r1, [r3, #20]
   2c450:	add	r2, r7, r7, lsl #1
   2c454:	add	r1, r1, r2, lsl #2
   2c458:	ldr	r1, [r1, #8]
   2c45c:	ldr	r2, [sl, #12]
   2c460:	cmp	ip, r2
   2c464:	bgt	2c518 <__assert_fail@plt+0x1a86c>
   2c468:	ldr	r2, [sl]
   2c46c:	ldr	r2, [r2, ip, lsl #2]
   2c470:	cmp	r2, #0
   2c474:	beq	2c518 <__assert_fail@plt+0x1a86c>
   2c478:	ldr	r3, [r2, #8]
   2c47c:	cmp	r3, #1
   2c480:	blt	2c514 <__assert_fail@plt+0x1a868>
   2c484:	ldr	r1, [r1]
   2c488:	ldr	r2, [r2, #12]
   2c48c:	subs	r7, r3, #1
   2c490:	mov	r3, #0
   2c494:	str	r8, [sp, #68]	; 0x44
   2c498:	beq	2c4c0 <__assert_fail@plt+0x1a814>
   2c49c:	mov	r8, #1
   2c4a0:	add	r5, r3, r7
   2c4a4:	lsr	r4, r5, #1
   2c4a8:	ldr	r0, [r2, r4, lsl #2]
   2c4ac:	cmp	r0, r1
   2c4b0:	addlt	r3, r8, r5, lsr #1
   2c4b4:	movge	r7, r4
   2c4b8:	cmp	r3, r7
   2c4bc:	bcc	2c4a0 <__assert_fail@plt+0x1a7f4>
   2c4c0:	ldr	r0, [r2, r3, lsl #2]
   2c4c4:	cmp	r0, r1
   2c4c8:	bne	2c504 <__assert_fail@plt+0x1a858>
   2c4cc:	ldr	r4, [sp, #52]	; 0x34
   2c4d0:	ldr	r7, [sp, #60]	; 0x3c
   2c4d4:	ldr	r5, [sp, #76]	; 0x4c
   2c4d8:	stm	sp, {r1, ip}
   2c4dc:	ldr	r1, [sp, #36]	; 0x24
   2c4e0:	mov	r0, r4
   2c4e4:	mov	r2, r7
   2c4e8:	mov	r3, r5
   2c4ec:	bl	2d00c <__assert_fail@plt+0x1b360>
   2c4f0:	ldr	r8, [sp, #68]	; 0x44
   2c4f4:	cmp	r0, #0
   2c4f8:	beq	2c534 <__assert_fail@plt+0x1a888>
   2c4fc:	ldr	lr, [sp, #56]	; 0x38
   2c500:	b	2c514 <__assert_fail@plt+0x1a868>
   2c504:	ldr	r5, [sp, #76]	; 0x4c
   2c508:	ldr	r4, [sp, #52]	; 0x34
   2c50c:	ldr	r8, [sp, #68]	; 0x44
   2c510:	ldr	r7, [sp, #60]	; 0x3c
   2c514:	ldr	r3, [sp, #80]	; 0x50
   2c518:	mov	r0, r6
   2c51c:	add	r6, r0, #24
   2c520:	ldrb	r0, [r0, #20]
   2c524:	add	r9, r9, #1
   2c528:	cmp	r0, #0
   2c52c:	bne	2c420 <__assert_fail@plt+0x1a774>
   2c530:	b	2c3b0 <__assert_fail@plt+0x1a704>
   2c534:	ldr	r0, [sp, #40]	; 0x28
   2c538:	ldr	r6, [sp, #44]	; 0x2c
   2c53c:	cmp	r0, #0
   2c540:	beq	2c570 <__assert_fail@plt+0x1a8c4>
   2c544:	ldr	r0, [sp, #20]
   2c548:	str	r5, [fp, #-60]	; 0xffffffc4
   2c54c:	str	r7, [fp, #-64]	; 0xffffffc0
   2c550:	cmp	r0, #0
   2c554:	beq	2c6d8 <__assert_fail@plt+0x1aa2c>
   2c558:	cmp	r6, #0
   2c55c:	bne	2c9e4 <__assert_fail@plt+0x1ad38>
   2c560:	mov	r6, #1
   2c564:	str	r9, [r8]
   2c568:	str	r8, [sp, #24]
   2c56c:	b	2c75c <__assert_fail@plt+0x1aab0>
   2c570:	add	r0, sl, #12
   2c574:	mov	r3, #20
   2c578:	sub	r2, fp, #72	; 0x48
   2c57c:	vld1.32	{d16-d17}, [r0]
   2c580:	mov	r0, sl
   2c584:	add	r1, r2, #12
   2c588:	vld1.32	{d18-d19}, [r0], r3
   2c58c:	vst1.32	{d16-d17}, [r1]
   2c590:	mov	r1, r2
   2c594:	vst1.64	{d18-d19}, [r1], r3
   2c598:	ldr	r6, [r0]
   2c59c:	mov	r0, #0
   2c5a0:	cmp	r6, #1
   2c5a4:	str	r6, [r1]
   2c5a8:	blt	2c6c0 <__assert_fail@plt+0x1aa14>
   2c5ac:	lsl	r0, r6, #2
   2c5b0:	str	r6, [fp, #-56]	; 0xffffffc8
   2c5b4:	bl	1b5b8 <__assert_fail@plt+0x990c>
   2c5b8:	cmp	r0, #0
   2c5bc:	str	r0, [fp, #-48]	; 0xffffffd0
   2c5c0:	beq	2ca7c <__assert_fail@plt+0x1add0>
   2c5c4:	mov	r4, r0
   2c5c8:	ldr	r0, [sl, #20]
   2c5cc:	ldr	r1, [sl, #24]
   2c5d0:	lsl	r2, r0, #2
   2c5d4:	mov	r0, r4
   2c5d8:	bl	118ec <memcpy@plt>
   2c5dc:	str	r5, [fp, #-60]	; 0xffffffc4
   2c5e0:	str	r7, [fp, #-64]	; 0xffffffc0
   2c5e4:	mov	r8, r4
   2c5e8:	lsl	r0, r6, #1
   2c5ec:	lsl	r1, r6, #3
   2c5f0:	str	r0, [sp, #20]
   2c5f4:	str	r0, [fp, #-56]	; 0xffffffc8
   2c5f8:	mov	r0, r4
   2c5fc:	bl	1b64c <__assert_fail@plt+0x99a0>
   2c600:	cmp	r0, #0
   2c604:	beq	2ca98 <__assert_fail@plt+0x1adec>
   2c608:	mov	r8, r0
   2c60c:	mov	r4, r0
   2c610:	str	r0, [fp, #-48]	; 0xffffffd0
   2c614:	str	r0, [sp, #16]
   2c618:	ldr	r0, [r8]
   2c61c:	str	r4, [sp, #24]
   2c620:	cmp	r0, r9
   2c624:	ble	2c718 <__assert_fail@plt+0x1aa6c>
   2c628:	ldr	r4, [sp, #52]	; 0x34
   2c62c:	cmp	r6, #1
   2c630:	mov	r1, r6
   2c634:	blt	2c750 <__assert_fail@plt+0x1aaa4>
   2c638:	ands	r1, r6, #3
   2c63c:	sub	r2, r6, #1
   2c640:	mov	ip, r6
   2c644:	mov	r0, r6
   2c648:	beq	2c670 <__assert_fail@plt+0x1a9c4>
   2c64c:	add	r7, r8, ip, lsl #2
   2c650:	mov	r0, ip
   2c654:	mov	r3, r7
   2c658:	ldr	r6, [r3, #-4]!
   2c65c:	subs	r1, r1, #1
   2c660:	sub	r0, r0, #1
   2c664:	str	r6, [r7]
   2c668:	mov	r7, r3
   2c66c:	bne	2c658 <__assert_fail@plt+0x1a9ac>
   2c670:	mov	r1, #0
   2c674:	cmp	r2, #3
   2c678:	bcc	2c6b0 <__assert_fail@plt+0x1aa04>
   2c67c:	add	r2, r8, r0, lsl #2
   2c680:	sub	r2, r2, #8
   2c684:	ldr	r6, [r2]
   2c688:	ldr	r5, [r2, #4]
   2c68c:	ldmdb	r2, {r3, r7}
   2c690:	sub	r0, r0, #4
   2c694:	cmp	r0, #0
   2c698:	stmda	r2, {r3, r7}
   2c69c:	str	r6, [r2, #4]
   2c6a0:	str	r5, [r2, #8]
   2c6a4:	sub	r2, r2, #16
   2c6a8:	bgt	2c684 <__assert_fail@plt+0x1a9d8>
   2c6ac:	ldr	r5, [sp, #76]	; 0x4c
   2c6b0:	ldr	r4, [sp, #52]	; 0x34
   2c6b4:	ldr	r7, [sp, #60]	; 0x3c
   2c6b8:	mov	r6, ip
   2c6bc:	b	2c750 <__assert_fail@plt+0x1aaa4>
   2c6c0:	ldr	r1, [sp, #8]
   2c6c4:	str	r0, [r1]
   2c6c8:	str	r0, [r1, #4]
   2c6cc:	str	r0, [r1, #8]
   2c6d0:	str	r5, [fp, #-60]	; 0xffffffc4
   2c6d4:	str	r7, [fp, #-64]	; 0xffffffc0
   2c6d8:	mov	r0, #1
   2c6dc:	str	r0, [fp, #-52]	; 0xffffffcc
   2c6e0:	str	r0, [fp, #-56]	; 0xffffffc8
   2c6e4:	mov	r0, #4
   2c6e8:	bl	1b5b8 <__assert_fail@plt+0x990c>
   2c6ec:	cmp	r0, #0
   2c6f0:	str	r0, [fp, #-48]	; 0xffffffd0
   2c6f4:	beq	2ca7c <__assert_fail@plt+0x1add0>
   2c6f8:	str	r9, [r0]
   2c6fc:	str	r0, [sp, #16]
   2c700:	str	r0, [sp, #68]	; 0x44
   2c704:	str	r0, [sp, #24]
   2c708:	mov	r0, #1
   2c70c:	mov	r6, #1
   2c710:	str	r0, [sp, #20]
   2c714:	b	2c760 <__assert_fail@plt+0x1aab4>
   2c718:	add	r0, r8, r6, lsl #2
   2c71c:	ldr	r4, [sp, #52]	; 0x34
   2c720:	mov	r1, r6
   2c724:	ldr	r2, [r0, #-4]
   2c728:	cmp	r2, r9
   2c72c:	ble	2c750 <__assert_fail@plt+0x1aaa4>
   2c730:	sub	r1, r6, #2
   2c734:	str	r2, [r0]
   2c738:	sub	r1, r1, #1
   2c73c:	ldr	r2, [r0, #-8]
   2c740:	sub	r0, r0, #4
   2c744:	cmp	r2, r9
   2c748:	bgt	2c734 <__assert_fail@plt+0x1aa88>
   2c74c:	add	r1, r1, #2
   2c750:	add	r6, r6, #1
   2c754:	str	r9, [r8, r1, lsl #2]
   2c758:	str	r8, [sp, #68]	; 0x44
   2c75c:	str	r6, [fp, #-52]	; 0xffffffcc
   2c760:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2c764:	sub	r1, fp, #72	; 0x48
   2c768:	str	r6, [sp, #44]	; 0x2c
   2c76c:	str	r0, [sp, #40]	; 0x28
   2c770:	ldr	r0, [r0, r5, lsl #2]
   2c774:	str	r0, [sp, #32]
   2c778:	mov	r0, r4
   2c77c:	bl	2b9c0 <__assert_fail@plt+0x19d14>
   2c780:	cmp	r0, #0
   2c784:	bne	2ca6c <__assert_fail@plt+0x1adc0>
   2c788:	ldr	r6, [sl, #4]
   2c78c:	ldr	lr, [sp, #56]	; 0x38
   2c790:	cmp	r6, #0
   2c794:	beq	2c834 <__assert_fail@plt+0x1ab88>
   2c798:	cmp	r5, #0
   2c79c:	bmi	2c828 <__assert_fail@plt+0x1ab7c>
   2c7a0:	ldr	sl, [sp, #40]	; 0x28
   2c7a4:	ldr	r7, [sp, #12]
   2c7a8:	b	2c7c0 <__assert_fail@plt+0x1ab14>
   2c7ac:	str	r0, [r6]
   2c7b0:	add	r6, r6, #4
   2c7b4:	add	sl, sl, #4
   2c7b8:	subs	r7, r7, #1
   2c7bc:	beq	2c828 <__assert_fail@plt+0x1ab7c>
   2c7c0:	ldr	r1, [r6]
   2c7c4:	ldr	r0, [sl]
   2c7c8:	cmp	r1, #0
   2c7cc:	beq	2c7ac <__assert_fail@plt+0x1ab00>
   2c7d0:	cmp	r0, #0
   2c7d4:	beq	2c7b0 <__assert_fail@plt+0x1ab04>
   2c7d8:	sub	r4, fp, #44	; 0x2c
   2c7dc:	add	r2, r0, #4
   2c7e0:	add	r1, r1, #4
   2c7e4:	mov	r0, r4
   2c7e8:	bl	2896c <__assert_fail@plt+0x16cc0>
   2c7ec:	cmp	r0, #0
   2c7f0:	str	r0, [fp, #-32]	; 0xffffffe0
   2c7f4:	bne	2ca6c <__assert_fail@plt+0x1adc0>
   2c7f8:	ldr	r1, [sp, #80]	; 0x50
   2c7fc:	sub	r0, fp, #32
   2c800:	mov	r2, r4
   2c804:	bl	2a000 <__assert_fail@plt+0x18354>
   2c808:	str	r0, [r6]
   2c80c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2c810:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2c814:	ldr	r8, [fp, #-32]	; 0xffffffe0
   2c818:	ldr	lr, [sp, #56]	; 0x38
   2c81c:	cmp	r8, #0
   2c820:	beq	2c7b0 <__assert_fail@plt+0x1ab04>
   2c824:	b	2ca3c <__assert_fail@plt+0x1ad90>
   2c828:	ldr	sl, [sp, #64]	; 0x40
   2c82c:	ldr	r4, [sp, #52]	; 0x34
   2c830:	ldr	r7, [sp, #60]	; 0x3c
   2c834:	ldr	r0, [sp, #40]	; 0x28
   2c838:	ldr	r1, [sp, #32]
   2c83c:	str	r1, [r0, r5, lsl #2]
   2c840:	ldr	r0, [sp, #44]	; 0x2c
   2c844:	cmp	r0, #1
   2c848:	blt	2c924 <__assert_fail@plt+0x1ac78>
   2c84c:	ldr	r8, [sp, #68]	; 0x44
   2c850:	subs	r0, r0, #1
   2c854:	mov	r1, #0
   2c858:	beq	2c884 <__assert_fail@plt+0x1abd8>
   2c85c:	mov	r2, r0
   2c860:	mov	r4, #1
   2c864:	add	r3, r1, r2
   2c868:	lsr	r7, r3, #1
   2c86c:	ldr	r6, [r8, r7, lsl #2]
   2c870:	cmp	r6, r9
   2c874:	addlt	r1, r4, r3, lsr #1
   2c878:	movge	r2, r7
   2c87c:	cmp	r1, r2
   2c880:	bcc	2c864 <__assert_fail@plt+0x1abb8>
   2c884:	ldr	r2, [r8, r1, lsl #2]
   2c888:	mov	r7, #1
   2c88c:	cmp	r2, r9
   2c890:	mov	r2, r1
   2c894:	mvnne	r2, #0
   2c898:	cmp	r2, #0
   2c89c:	bmi	2c930 <__assert_fail@plt+0x1ac84>
   2c8a0:	ldr	r3, [sp, #44]	; 0x2c
   2c8a4:	ldr	r4, [sp, #52]	; 0x34
   2c8a8:	cmp	r3, r2
   2c8ac:	ble	2c93c <__assert_fail@plt+0x1ac90>
   2c8b0:	cmp	r0, r2
   2c8b4:	str	r0, [fp, #-52]	; 0xffffffcc
   2c8b8:	ble	2c94c <__assert_fail@plt+0x1aca0>
   2c8bc:	mvn	r2, r1
   2c8c0:	add	r2, r3, r2
   2c8c4:	cmp	r2, #4
   2c8c8:	bcc	2c9a4 <__assert_fail@plt+0x1acf8>
   2c8cc:	bic	lr, r2, #3
   2c8d0:	subs	r3, lr, #4
   2c8d4:	add	r3, r7, r3, lsr #2
   2c8d8:	and	r7, r3, #1
   2c8dc:	str	r7, [sp, #32]
   2c8e0:	beq	2c954 <__assert_fail@plt+0x1aca8>
   2c8e4:	sub	r7, r7, r3
   2c8e8:	add	r3, r8, r1, lsl #2
   2c8ec:	mov	r6, #0
   2c8f0:	mov	ip, #20
   2c8f4:	add	r4, r3, #4
   2c8f8:	adds	r7, r7, #2
   2c8fc:	add	r6, r6, #8
   2c900:	vld1.32	{d16-d17}, [r4]
   2c904:	mov	r4, r3
   2c908:	vst1.32	{d16-d17}, [r4], ip
   2c90c:	vld1.32	{d16-d17}, [r4]
   2c910:	add	r4, r3, #16
   2c914:	add	r3, r3, #32
   2c918:	vst1.32	{d16-d17}, [r4]
   2c91c:	bne	2c8f4 <__assert_fail@plt+0x1ac48>
   2c920:	b	2c958 <__assert_fail@plt+0x1acac>
   2c924:	ldr	r3, [sp, #80]	; 0x50
   2c928:	ldr	r8, [sp, #68]	; 0x44
   2c92c:	b	2c9d4 <__assert_fail@plt+0x1ad28>
   2c930:	ldr	r0, [sp, #16]
   2c934:	ldr	r4, [sp, #52]	; 0x34
   2c938:	b	2c940 <__assert_fail@plt+0x1ac94>
   2c93c:	ldr	r0, [sp, #16]
   2c940:	ldr	r7, [sp, #60]	; 0x3c
   2c944:	str	r0, [sp, #24]
   2c948:	b	2c9d0 <__assert_fail@plt+0x1ad24>
   2c94c:	ldr	r1, [sp, #16]
   2c950:	b	2c98c <__assert_fail@plt+0x1ace0>
   2c954:	mov	r6, #0
   2c958:	ldr	r3, [sp, #32]
   2c95c:	cmp	r3, #0
   2c960:	beq	2c978 <__assert_fail@plt+0x1accc>
   2c964:	add	r3, r1, r6
   2c968:	add	r3, r8, r3, lsl #2
   2c96c:	add	r7, r3, #4
   2c970:	vld1.32	{d16-d17}, [r7]
   2c974:	vst1.32	{d16-d17}, [r3]
   2c978:	cmp	r2, lr
   2c97c:	bne	2c994 <__assert_fail@plt+0x1ace8>
   2c980:	ldr	r1, [sp, #16]
   2c984:	ldr	r4, [sp, #52]	; 0x34
   2c988:	ldr	lr, [sp, #56]	; 0x38
   2c98c:	ldr	r7, [sp, #60]	; 0x3c
   2c990:	b	2c9c8 <__assert_fail@plt+0x1ad1c>
   2c994:	add	r1, r1, lr
   2c998:	ldr	r4, [sp, #52]	; 0x34
   2c99c:	ldr	lr, [sp, #56]	; 0x38
   2c9a0:	ldr	r3, [sp, #44]	; 0x2c
   2c9a4:	ldr	r7, [sp, #60]	; 0x3c
   2c9a8:	sub	r2, r3, #1
   2c9ac:	add	r3, r8, r1, lsl #2
   2c9b0:	ldr	r3, [r3, #4]
   2c9b4:	str	r3, [r8, r1, lsl #2]
   2c9b8:	add	r1, r1, #1
   2c9bc:	cmp	r2, r1
   2c9c0:	bne	2c9ac <__assert_fail@plt+0x1ad00>
   2c9c4:	ldr	r1, [sp, #16]
   2c9c8:	str	r0, [sp, #44]	; 0x2c
   2c9cc:	str	r1, [sp, #24]
   2c9d0:	ldr	r3, [sp, #80]	; 0x50
   2c9d4:	ldr	r0, [r4, #116]	; 0x74
   2c9d8:	add	r1, r9, r9, lsl #1
   2c9dc:	add	r0, r0, r1, lsl #3
   2c9e0:	b	2c51c <__assert_fail@plt+0x1a870>
   2c9e4:	ldr	r0, [sp, #20]
   2c9e8:	ldr	r4, [sp, #24]
   2c9ec:	cmp	r0, r6
   2c9f0:	ldr	r0, [sp, #16]
   2c9f4:	beq	2c5e8 <__assert_fail@plt+0x1a93c>
   2c9f8:	b	2c614 <__assert_fail@plt+0x1a968>
   2c9fc:	mov	lr, #0
   2ca00:	cmp	lr, r0
   2ca04:	blt	2c330 <__assert_fail@plt+0x1a684>
   2ca08:	mov	r0, #0
   2ca0c:	str	r0, [fp, #-76]	; 0xffffffb4
   2ca10:	mov	r8, #0
   2ca14:	mov	r0, r8
   2ca18:	sub	sp, fp, #28
   2ca1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ca20:	mov	r8, r0
   2ca24:	str	r0, [fp, #-76]	; 0xffffffb4
   2ca28:	b	2ca14 <__assert_fail@plt+0x1ad68>
   2ca2c:	str	r1, [fp, #-76]	; 0xffffffb4
   2ca30:	b	2ca10 <__assert_fail@plt+0x1ad64>
   2ca34:	str	r8, [sp, #68]	; 0x44
   2ca38:	mov	r8, #0
   2ca3c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2ca40:	cmp	r0, #0
   2ca44:	beq	2ca50 <__assert_fail@plt+0x1ada4>
   2ca48:	ldr	r0, [sp, #68]	; 0x44
   2ca4c:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2ca50:	cmp	r8, #0
   2ca54:	str	r8, [fp, #-76]	; 0xffffffb4
   2ca58:	moveq	r8, #0
   2ca5c:	b	2ca14 <__assert_fail@plt+0x1ad68>
   2ca60:	str	r0, [fp, #-72]	; 0xffffffb8
   2ca64:	str	r8, [fp, #-76]	; 0xffffffb4
   2ca68:	b	2ca14 <__assert_fail@plt+0x1ad68>
   2ca6c:	mov	r8, r0
   2ca70:	b	2ca3c <__assert_fail@plt+0x1ad90>
   2ca74:	mov	r8, r0
   2ca78:	b	2ca14 <__assert_fail@plt+0x1ad68>
   2ca7c:	mov	r1, #0
   2ca80:	mov	r0, #0
   2ca84:	mov	r8, #12
   2ca88:	str	r1, [fp, #-56]	; 0xffffffc8
   2ca8c:	str	r0, [sp, #68]	; 0x44
   2ca90:	str	r1, [fp, #-52]	; 0xffffffcc
   2ca94:	b	2ca3c <__assert_fail@plt+0x1ad90>
   2ca98:	str	r8, [sp, #68]	; 0x44
   2ca9c:	mov	r8, #12
   2caa0:	b	2ca3c <__assert_fail@plt+0x1ad90>
   2caa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2caa8:	add	fp, sp, #28
   2caac:	sub	sp, sp, #4
   2cab0:	mov	r9, r0
   2cab4:	ldr	r0, [r1, #4]
   2cab8:	mov	r8, #0
   2cabc:	cmp	r0, #0
   2cac0:	beq	2cc70 <__assert_fail@plt+0x1afc4>
   2cac4:	mov	r5, r2
   2cac8:	ldr	r2, [r2, #4]
   2cacc:	cmp	r2, #0
   2cad0:	beq	2cc70 <__assert_fail@plt+0x1afc4>
   2cad4:	mov	sl, r1
   2cad8:	ldr	r1, [r9, #4]
   2cadc:	ldr	r7, [r9]
   2cae0:	add	r3, r2, r0
   2cae4:	add	r6, r1, r3
   2cae8:	cmp	r6, r7
   2caec:	ble	2cb1c <__assert_fail@plt+0x1ae70>
   2caf0:	ldr	r0, [r9, #8]
   2caf4:	add	r4, r7, r3
   2caf8:	lsl	r1, r4, #2
   2cafc:	bl	1b64c <__assert_fail@plt+0x99a0>
   2cb00:	cmp	r0, #0
   2cb04:	beq	2cc7c <__assert_fail@plt+0x1afd0>
   2cb08:	str	r4, [r9]
   2cb0c:	str	r0, [r9, #8]
   2cb10:	ldr	r1, [r9, #4]
   2cb14:	ldr	r2, [r5, #4]
   2cb18:	ldr	r0, [sl, #4]
   2cb1c:	ldr	lr, [r5, #8]
   2cb20:	ldr	r4, [sl, #8]
   2cb24:	add	r3, r0, r1
   2cb28:	sub	r7, r1, #1
   2cb2c:	add	ip, r3, r2
   2cb30:	sub	r0, r0, #1
   2cb34:	sub	r3, r2, #1
   2cb38:	ldr	r1, [lr, r3, lsl #2]
   2cb3c:	ldr	r6, [r4, r0, lsl #2]
   2cb40:	cmp	r6, r1
   2cb44:	beq	2cb70 <__assert_fail@plt+0x1aec4>
   2cb48:	blt	2cb60 <__assert_fail@plt+0x1aeb4>
   2cb4c:	sub	r6, r0, #1
   2cb50:	cmp	r0, #0
   2cb54:	mov	r0, r6
   2cb58:	bgt	2cb3c <__assert_fail@plt+0x1ae90>
   2cb5c:	b	2cbd4 <__assert_fail@plt+0x1af28>
   2cb60:	cmp	r2, #2
   2cb64:	mov	r2, r3
   2cb68:	bge	2cb34 <__assert_fail@plt+0x1ae88>
   2cb6c:	b	2cbd4 <__assert_fail@plt+0x1af28>
   2cb70:	cmp	r7, #0
   2cb74:	bmi	2cbb0 <__assert_fail@plt+0x1af04>
   2cb78:	ldr	r8, [r9, #8]
   2cb7c:	mov	r1, r7
   2cb80:	ldr	r7, [r8, r1, lsl #2]
   2cb84:	cmp	r7, r6
   2cb88:	ble	2cba0 <__assert_fail@plt+0x1aef4>
   2cb8c:	sub	r7, r1, #1
   2cb90:	cmp	r1, #0
   2cb94:	mov	r1, r7
   2cb98:	bgt	2cb80 <__assert_fail@plt+0x1aed4>
   2cb9c:	b	2cbb0 <__assert_fail@plt+0x1af04>
   2cba0:	mov	r7, r1
   2cba4:	bne	2cbb0 <__assert_fail@plt+0x1af04>
   2cba8:	mov	r7, r1
   2cbac:	b	2cbbc <__assert_fail@plt+0x1af10>
   2cbb0:	ldr	r1, [r9, #8]
   2cbb4:	sub	ip, ip, #1
   2cbb8:	str	r6, [r1, ip, lsl #2]
   2cbbc:	cmp	r0, #1
   2cbc0:	mov	r8, #0
   2cbc4:	blt	2cbd4 <__assert_fail@plt+0x1af28>
   2cbc8:	cmp	r2, #2
   2cbcc:	mov	r2, r3
   2cbd0:	bge	2cb30 <__assert_fail@plt+0x1ae84>
   2cbd4:	ldr	r2, [r9, #4]
   2cbd8:	ldr	lr, [sl, #4]
   2cbdc:	ldr	r4, [r5, #4]
   2cbe0:	ldr	r0, [r9, #8]
   2cbe4:	subs	r1, r2, #1
   2cbe8:	add	r3, r1, lr
   2cbec:	add	r3, r3, r4
   2cbf0:	sub	r7, r3, ip
   2cbf4:	add	r6, r7, #1
   2cbf8:	add	r5, r6, r2
   2cbfc:	str	r5, [r9, #4]
   2cc00:	blt	2cc60 <__assert_fail@plt+0x1afb4>
   2cc04:	cmp	r7, #0
   2cc08:	bmi	2cc60 <__assert_fail@plt+0x1afb4>
   2cc0c:	add	r2, r2, r4
   2cc10:	add	r2, r2, lr
   2cc14:	sub	r2, r2, ip
   2cc18:	add	r7, r0, r2, lsl #2
   2cc1c:	ldr	r2, [r0, r1, lsl #2]
   2cc20:	ldr	r5, [r0, r3, lsl #2]
   2cc24:	cmp	r5, r2
   2cc28:	bgt	2cc44 <__assert_fail@plt+0x1af98>
   2cc2c:	str	r2, [r7, r1, lsl #2]
   2cc30:	sub	r2, r1, #1
   2cc34:	cmp	r1, #0
   2cc38:	mov	r1, r2
   2cc3c:	bgt	2cc1c <__assert_fail@plt+0x1af70>
   2cc40:	b	2cc60 <__assert_fail@plt+0x1afb4>
   2cc44:	str	r5, [r7, r1, lsl #2]
   2cc48:	sub	r7, r7, #4
   2cc4c:	subs	r6, r6, #1
   2cc50:	sub	r3, r3, #1
   2cc54:	mov	r2, #0
   2cc58:	bne	2cc1c <__assert_fail@plt+0x1af70>
   2cc5c:	b	2cc64 <__assert_fail@plt+0x1afb8>
   2cc60:	mov	r2, r6
   2cc64:	add	r1, r0, ip, lsl #2
   2cc68:	lsl	r2, r2, #2
   2cc6c:	bl	118ec <memcpy@plt>
   2cc70:	mov	r0, r8
   2cc74:	sub	sp, fp, #28
   2cc78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cc7c:	mov	r8, #12
   2cc80:	b	2cc70 <__assert_fail@plt+0x1afc4>
   2cc84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cc88:	add	fp, sp, #28
   2cc8c:	sub	sp, sp, #44	; 0x2c
   2cc90:	mov	ip, r0
   2cc94:	ldr	r0, [r0, #28]
   2cc98:	mov	r8, r2
   2cc9c:	add	r2, r1, r1, lsl #1
   2cca0:	mov	r4, #0
   2cca4:	str	r3, [sp, #4]
   2cca8:	str	r4, [sp, #36]	; 0x24
   2ccac:	str	r4, [sp, #32]
   2ccb0:	str	r4, [sp, #40]	; 0x28
   2ccb4:	add	r2, r0, r2, lsl #2
   2ccb8:	mov	r0, r2
   2ccbc:	ldr	r7, [r0, #4]!
   2ccc0:	str	r0, [sp, #28]
   2ccc4:	cmp	r7, #1
   2ccc8:	blt	2cfe0 <__assert_fail@plt+0x1b334>
   2cccc:	add	r4, r2, #8
   2ccd0:	mov	r9, #0
   2ccd4:	mov	sl, #1
   2ccd8:	str	r2, [sp]
   2ccdc:	str	r1, [sp, #12]
   2cce0:	str	ip, [sp, #8]
   2cce4:	str	r4, [sp, #20]
   2cce8:	b	2ccf8 <__assert_fail@plt+0x1b04c>
   2ccec:	add	r9, r9, #1
   2ccf0:	cmp	r9, r7
   2ccf4:	bge	2ceb8 <__assert_fail@plt+0x1b20c>
   2ccf8:	ldr	r3, [r4]
   2ccfc:	ldr	r0, [r3, r9, lsl #2]
   2cd00:	cmp	r0, r1
   2cd04:	beq	2ccec <__assert_fail@plt+0x1b040>
   2cd08:	ldr	r2, [ip]
   2cd0c:	add	r2, r2, r0, lsl #3
   2cd10:	ldrb	r2, [r2, #4]
   2cd14:	tst	r2, #8
   2cd18:	beq	2ccec <__assert_fail@plt+0x1b040>
   2cd1c:	ldr	r2, [ip, #20]
   2cd20:	add	r0, r0, r0, lsl #1
   2cd24:	mvn	lr, #0
   2cd28:	str	r7, [sp, #24]
   2cd2c:	str	r0, [sp, #16]
   2cd30:	add	r0, r2, r0, lsl #2
   2cd34:	ldr	r6, [r0, #4]
   2cd38:	ldr	r0, [r0, #8]
   2cd3c:	cmp	r6, #2
   2cd40:	ldr	r5, [r0]
   2cd44:	ldrge	lr, [r0, #4]
   2cd48:	cmp	r7, #1
   2cd4c:	blt	2cd90 <__assert_fail@plt+0x1b0e4>
   2cd50:	mov	r2, #0
   2cd54:	subs	r6, r7, #1
   2cd58:	beq	2cd7c <__assert_fail@plt+0x1b0d0>
   2cd5c:	add	r4, r2, r6
   2cd60:	lsr	r7, r4, #1
   2cd64:	ldr	r0, [r3, r7, lsl #2]
   2cd68:	cmp	r0, r5
   2cd6c:	addlt	r2, sl, r4, lsr #1
   2cd70:	movge	r6, r7
   2cd74:	cmp	r2, r6
   2cd78:	bcc	2cd5c <__assert_fail@plt+0x1b0b0>
   2cd7c:	ldr	r0, [r3, r2, lsl #2]
   2cd80:	ldr	r4, [sp, #20]
   2cd84:	ldr	r7, [sp, #24]
   2cd88:	cmp	r0, r5
   2cd8c:	beq	2cde8 <__assert_fail@plt+0x1b13c>
   2cd90:	ldr	r0, [r8, #4]
   2cd94:	cmp	r0, #1
   2cd98:	blt	2cde8 <__assert_fail@plt+0x1b13c>
   2cd9c:	ldr	r1, [r8, #8]
   2cda0:	subs	r4, r0, #1
   2cda4:	mov	r6, #0
   2cda8:	beq	2cdcc <__assert_fail@plt+0x1b120>
   2cdac:	add	r0, r6, r4
   2cdb0:	lsr	r7, r0, #1
   2cdb4:	ldr	ip, [r1, r7, lsl #2]
   2cdb8:	cmp	ip, r5
   2cdbc:	addlt	r6, sl, r0, lsr #1
   2cdc0:	movge	r4, r7
   2cdc4:	cmp	r6, r4
   2cdc8:	bcc	2cdac <__assert_fail@plt+0x1b100>
   2cdcc:	ldr	r0, [r1, r6, lsl #2]
   2cdd0:	ldr	r1, [sp, #12]
   2cdd4:	ldr	ip, [sp, #8]
   2cdd8:	ldr	r4, [sp, #20]
   2cddc:	ldr	r7, [sp, #24]
   2cde0:	cmp	r0, r5
   2cde4:	beq	2ce84 <__assert_fail@plt+0x1b1d8>
   2cde8:	cmp	lr, #1
   2cdec:	blt	2ccec <__assert_fail@plt+0x1b040>
   2cdf0:	cmp	r7, #1
   2cdf4:	blt	2ce34 <__assert_fail@plt+0x1b188>
   2cdf8:	mov	r2, #0
   2cdfc:	subs	r6, r7, #1
   2ce00:	beq	2ce24 <__assert_fail@plt+0x1b178>
   2ce04:	add	r0, r2, r6
   2ce08:	lsr	r7, r0, #1
   2ce0c:	ldr	r5, [r3, r7, lsl #2]
   2ce10:	cmp	r5, lr
   2ce14:	addlt	r2, sl, r0, lsr #1
   2ce18:	movge	r6, r7
   2ce1c:	cmp	r2, r6
   2ce20:	bcc	2ce04 <__assert_fail@plt+0x1b158>
   2ce24:	ldr	r0, [r3, r2, lsl #2]
   2ce28:	ldr	r7, [sp, #24]
   2ce2c:	cmp	r0, lr
   2ce30:	beq	2ccec <__assert_fail@plt+0x1b040>
   2ce34:	ldr	r0, [r8, #4]
   2ce38:	cmp	r0, #1
   2ce3c:	blt	2ccec <__assert_fail@plt+0x1b040>
   2ce40:	ldr	r4, [r8, #8]
   2ce44:	subs	r6, r0, #1
   2ce48:	mov	r3, #0
   2ce4c:	beq	2ce70 <__assert_fail@plt+0x1b1c4>
   2ce50:	add	r0, r3, r6
   2ce54:	lsr	r7, r0, #1
   2ce58:	ldr	r5, [r4, r7, lsl #2]
   2ce5c:	cmp	r5, lr
   2ce60:	addlt	r3, sl, r0, lsr #1
   2ce64:	movge	r6, r7
   2ce68:	cmp	r3, r6
   2ce6c:	bcc	2ce50 <__assert_fail@plt+0x1b1a4>
   2ce70:	ldr	r0, [r4, r3, lsl #2]
   2ce74:	ldr	r4, [sp, #20]
   2ce78:	ldr	r7, [sp, #24]
   2ce7c:	cmp	r0, lr
   2ce80:	bne	2ccec <__assert_fail@plt+0x1b040>
   2ce84:	ldr	r0, [ip, #28]
   2ce88:	ldr	r1, [sp, #16]
   2ce8c:	add	r2, r0, r1, lsl #2
   2ce90:	ldr	r1, [sp, #4]
   2ce94:	add	r0, sp, #32
   2ce98:	bl	2caa4 <__assert_fail@plt+0x1adf8>
   2ce9c:	cmp	r0, #0
   2cea0:	bne	2cffc <__assert_fail@plt+0x1b350>
   2cea4:	ldr	r0, [sp, #28]
   2cea8:	ldr	r1, [sp, #12]
   2ceac:	ldr	ip, [sp, #8]
   2ceb0:	ldr	r7, [r0]
   2ceb4:	b	2ccec <__assert_fail@plt+0x1b040>
   2ceb8:	ldr	r0, [sp]
   2cebc:	cmp	r7, #0
   2cec0:	mov	r4, #0
   2cec4:	ble	2cfe0 <__assert_fail@plt+0x1b334>
   2cec8:	ldr	r9, [sp, #36]	; 0x24
   2cecc:	ldr	lr, [r0, #8]
   2ced0:	ldr	r0, [sp, #40]	; 0x28
   2ced4:	mov	ip, #0
   2ced8:	mov	r6, #1
   2cedc:	sub	r1, r9, #1
   2cee0:	str	lr, [sp, #20]
   2cee4:	str	r9, [sp, #16]
   2cee8:	str	r1, [sp, #24]
   2ceec:	b	2cf04 <__assert_fail@plt+0x1b258>
   2cef0:	ldr	r1, [sp, #28]
   2cef4:	add	ip, ip, #1
   2cef8:	ldr	r1, [r1]
   2cefc:	cmp	ip, r1
   2cf00:	bge	2cfe8 <__assert_fail@plt+0x1b33c>
   2cf04:	ldr	r5, [lr, ip, lsl #2]
   2cf08:	cmp	r9, #1
   2cf0c:	blt	2cf4c <__assert_fail@plt+0x1b2a0>
   2cf10:	ldr	r2, [sp, #24]
   2cf14:	mov	r1, #0
   2cf18:	cmp	r2, #0
   2cf1c:	beq	2cf40 <__assert_fail@plt+0x1b294>
   2cf20:	add	r3, r1, r2
   2cf24:	lsr	r4, r3, #1
   2cf28:	ldr	r7, [r0, r4, lsl #2]
   2cf2c:	cmp	r7, r5
   2cf30:	addlt	r1, r6, r3, lsr #1
   2cf34:	movge	r2, r4
   2cf38:	cmp	r1, r2
   2cf3c:	bcc	2cf20 <__assert_fail@plt+0x1b274>
   2cf40:	ldr	r1, [r0, r1, lsl #2]
   2cf44:	cmp	r1, r5
   2cf48:	beq	2cef0 <__assert_fail@plt+0x1b244>
   2cf4c:	ldr	r3, [r8, #4]
   2cf50:	cmp	r3, #1
   2cf54:	blt	2cef0 <__assert_fail@plt+0x1b244>
   2cf58:	mov	r1, r8
   2cf5c:	ldr	r1, [r8, #8]
   2cf60:	subs	sl, r3, #1
   2cf64:	mov	r2, #0
   2cf68:	beq	2cf90 <__assert_fail@plt+0x1b2e4>
   2cf6c:	mov	r4, sl
   2cf70:	add	r7, r2, r4
   2cf74:	lsr	lr, r7, #1
   2cf78:	ldr	r9, [r1, lr, lsl #2]
   2cf7c:	cmp	r9, r5
   2cf80:	addlt	r2, r6, r7, lsr #1
   2cf84:	movge	r4, lr
   2cf88:	cmp	r2, r4
   2cf8c:	bcc	2cf70 <__assert_fail@plt+0x1b2c4>
   2cf90:	ldr	r7, [r1, r2, lsl #2]
   2cf94:	ldr	lr, [sp, #20]
   2cf98:	ldr	r9, [sp, #16]
   2cf9c:	mov	r4, r2
   2cfa0:	cmp	r7, r5
   2cfa4:	mvnne	r4, #0
   2cfa8:	cmp	r4, #0
   2cfac:	bmi	2cef0 <__assert_fail@plt+0x1b244>
   2cfb0:	cmp	r3, r4
   2cfb4:	strgt	sl, [r8, #4]
   2cfb8:	cmpgt	sl, r4
   2cfbc:	ble	2cef0 <__assert_fail@plt+0x1b244>
   2cfc0:	add	r3, r1, r2, lsl #2
   2cfc4:	ldr	r3, [r3, #4]
   2cfc8:	str	r3, [r1, r2, lsl #2]
   2cfcc:	add	r2, r2, #1
   2cfd0:	ldr	r3, [r8, #4]
   2cfd4:	cmp	r2, r3
   2cfd8:	blt	2cfc0 <__assert_fail@plt+0x1b314>
   2cfdc:	b	2cef0 <__assert_fail@plt+0x1b244>
   2cfe0:	ldr	r0, [sp, #40]	; 0x28
   2cfe4:	b	2cfec <__assert_fail@plt+0x1b340>
   2cfe8:	mov	r4, #0
   2cfec:	bl	1b4e8 <__assert_fail@plt+0x983c>
   2cff0:	mov	r0, r4
   2cff4:	sub	sp, fp, #28
   2cff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cffc:	mov	r1, r0
   2d000:	ldr	r0, [sp, #40]	; 0x28
   2d004:	mov	r4, r1
   2d008:	b	2cfec <__assert_fail@plt+0x1b340>
   2d00c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d010:	add	fp, sp, #28
   2d014:	sub	sp, sp, #28
   2d018:	ldr	ip, [r0, #108]	; 0x6c
   2d01c:	str	r1, [sp, #24]
   2d020:	ldr	r1, [r0, #84]	; 0x54
   2d024:	mov	r4, r3
   2d028:	str	r2, [sp, #8]
   2d02c:	str	r0, [sp, #16]
   2d030:	cmp	ip, #1
   2d034:	str	r1, [sp, #20]
   2d038:	blt	2d0a0 <__assert_fail@plt+0x1b3f4>
   2d03c:	ldr	r1, [r0, #116]	; 0x74
   2d040:	mov	r9, #0
   2d044:	mov	r2, #1
   2d048:	mov	r3, ip
   2d04c:	add	r7, r3, r9
   2d050:	add	r7, r7, r7, lsr #31
   2d054:	asr	r6, r7, #1
   2d058:	add	r5, r6, r6, lsl #1
   2d05c:	add	r5, r1, r5, lsl #3
   2d060:	ldr	r5, [r5, #4]
   2d064:	cmp	r5, r4
   2d068:	addlt	r9, r2, r7, asr #1
   2d06c:	movge	r3, r6
   2d070:	cmp	r9, r3
   2d074:	blt	2d04c <__assert_fail@plt+0x1b3a0>
   2d078:	cmp	r9, ip
   2d07c:	bge	2d0ac <__assert_fail@plt+0x1b400>
   2d080:	ldr	r0, [sp, #16]
   2d084:	add	r2, r9, r9, lsl #1
   2d088:	ldr	r1, [r0, #116]	; 0x74
   2d08c:	add	r1, r1, r2, lsl #3
   2d090:	ldr	r1, [r1, #4]
   2d094:	cmp	r1, r4
   2d098:	mvnne	r9, #0
   2d09c:	b	2d0b0 <__assert_fail@plt+0x1b404>
   2d0a0:	mov	r9, #0
   2d0a4:	cmp	r9, ip
   2d0a8:	blt	2d080 <__assert_fail@plt+0x1b3d4>
   2d0ac:	mvn	r9, #0
   2d0b0:	ldr	r8, [fp, #12]
   2d0b4:	cmp	ip, #1
   2d0b8:	blt	2d100 <__assert_fail@plt+0x1b454>
   2d0bc:	ldr	r0, [sp, #16]
   2d0c0:	mov	r6, #0
   2d0c4:	mov	r2, #1
   2d0c8:	mov	r3, ip
   2d0cc:	ldr	r1, [r0, #116]	; 0x74
   2d0d0:	add	r7, r3, r6
   2d0d4:	add	r7, r7, r7, lsr #31
   2d0d8:	asr	r5, r7, #1
   2d0dc:	add	r0, r5, r5, lsl #1
   2d0e0:	add	r0, r1, r0, lsl #3
   2d0e4:	ldr	r0, [r0, #4]
   2d0e8:	cmp	r0, r8
   2d0ec:	addlt	r6, r2, r7, asr #1
   2d0f0:	movge	r3, r5
   2d0f4:	cmp	r6, r3
   2d0f8:	blt	2d0d0 <__assert_fail@plt+0x1b424>
   2d0fc:	b	2d104 <__assert_fail@plt+0x1b458>
   2d100:	mov	r6, #0
   2d104:	cmp	r6, ip
   2d108:	ldr	ip, [sp, #16]
   2d10c:	bge	2d12c <__assert_fail@plt+0x1b480>
   2d110:	ldr	r0, [ip, #116]	; 0x74
   2d114:	add	r1, r6, r6, lsl #1
   2d118:	add	r0, r0, r1, lsl #3
   2d11c:	ldr	r0, [r0, #4]
   2d120:	cmp	r0, r8
   2d124:	mvnne	r6, #0
   2d128:	b	2d130 <__assert_fail@plt+0x1b484>
   2d12c:	mvn	r6, #0
   2d130:	ldr	r0, [sp, #24]
   2d134:	ldr	r0, [r0, #4]
   2d138:	cmp	r0, #1
   2d13c:	blt	2d2bc <__assert_fail@plt+0x1b610>
   2d140:	mov	sl, #0
   2d144:	str	r4, [sp, #12]
   2d148:	ldr	r0, [sp, #24]
   2d14c:	ldr	r3, [ip, #116]	; 0x74
   2d150:	ldr	r5, [sp, #20]
   2d154:	ldr	r0, [r0, #8]
   2d158:	ldr	r5, [r5]
   2d15c:	ldr	r2, [r0, sl, lsl #2]
   2d160:	mov	r0, r3
   2d164:	add	r1, r2, r2, lsl #1
   2d168:	ldr	r7, [r0, r1, lsl #3]!
   2d16c:	ldr	r0, [r0, #8]
   2d170:	ldr	r5, [r5, r7, lsl #3]
   2d174:	mvn	r7, #0
   2d178:	cmp	r0, r4
   2d17c:	ble	2d188 <__assert_fail@plt+0x1b4dc>
   2d180:	mvn	r8, #0
   2d184:	b	2d214 <__assert_fail@plt+0x1b568>
   2d188:	add	r1, r3, r1, lsl #3
   2d18c:	mov	r8, #1
   2d190:	ldr	r1, [r1, #12]
   2d194:	cmp	r1, r4
   2d198:	blt	2d214 <__assert_fail@plt+0x1b568>
   2d19c:	sub	r1, r1, r4
   2d1a0:	cmp	r0, r4
   2d1a4:	mov	lr, r5
   2d1a8:	mov	r4, #1
   2d1ac:	clz	r1, r1
   2d1b0:	lsr	r5, r1, #5
   2d1b4:	lsl	r1, r5, #1
   2d1b8:	orreq	r1, r4, r5, lsl #1
   2d1bc:	cmp	r1, #0
   2d1c0:	beq	2d208 <__assert_fail@plt+0x1b55c>
   2d1c4:	ldr	r3, [sp, #8]
   2d1c8:	mov	r0, ip
   2d1cc:	mov	r2, lr
   2d1d0:	str	r9, [sp]
   2d1d4:	mov	r5, lr
   2d1d8:	bl	2d2c8 <__assert_fail@plt+0x1b61c>
   2d1dc:	mov	r8, r0
   2d1e0:	ldr	r0, [sp, #24]
   2d1e4:	ldr	ip, [sp, #16]
   2d1e8:	ldr	r4, [sp, #12]
   2d1ec:	ldr	r0, [r0, #8]
   2d1f0:	ldr	r3, [ip, #116]	; 0x74
   2d1f4:	ldr	r2, [r0, sl, lsl #2]
   2d1f8:	add	r0, r2, r2, lsl #1
   2d1fc:	add	r0, r3, r0, lsl #3
   2d200:	ldr	r0, [r0, #8]
   2d204:	b	2d214 <__assert_fail@plt+0x1b568>
   2d208:	ldr	r4, [sp, #12]
   2d20c:	mov	r8, #0
   2d210:	mov	r5, lr
   2d214:	ldr	r1, [fp, #12]
   2d218:	cmp	r0, r1
   2d21c:	bgt	2d284 <__assert_fail@plt+0x1b5d8>
   2d220:	add	r1, r2, r2, lsl #1
   2d224:	ldr	r2, [fp, #12]
   2d228:	mov	r7, #1
   2d22c:	add	r1, r3, r1, lsl #3
   2d230:	ldr	r1, [r1, #12]
   2d234:	cmp	r1, r2
   2d238:	blt	2d284 <__assert_fail@plt+0x1b5d8>
   2d23c:	ldr	r2, [fp, #12]
   2d240:	sub	r1, r1, r2
   2d244:	mov	r3, r2
   2d248:	clz	r1, r1
   2d24c:	cmp	r0, r3
   2d250:	mov	r0, #1
   2d254:	lsr	r2, r1, #5
   2d258:	lsl	r1, r2, #1
   2d25c:	orreq	r1, r0, r2, lsl #1
   2d260:	cmp	r1, #0
   2d264:	beq	2d2a4 <__assert_fail@plt+0x1b5f8>
   2d268:	ldr	r3, [fp, #8]
   2d26c:	mov	r0, ip
   2d270:	mov	r2, r5
   2d274:	str	r6, [sp]
   2d278:	bl	2d2c8 <__assert_fail@plt+0x1b61c>
   2d27c:	ldr	ip, [sp, #16]
   2d280:	mov	r7, r0
   2d284:	cmp	r7, r8
   2d288:	bne	2d2b0 <__assert_fail@plt+0x1b604>
   2d28c:	ldr	r0, [sp, #24]
   2d290:	add	sl, sl, #1
   2d294:	ldr	r0, [r0, #4]
   2d298:	cmp	sl, r0
   2d29c:	blt	2d148 <__assert_fail@plt+0x1b49c>
   2d2a0:	b	2d2bc <__assert_fail@plt+0x1b610>
   2d2a4:	mov	r7, #0
   2d2a8:	cmp	r7, r8
   2d2ac:	beq	2d28c <__assert_fail@plt+0x1b5e0>
   2d2b0:	mov	r0, #1
   2d2b4:	sub	sp, fp, #28
   2d2b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d2bc:	mov	r0, #0
   2d2c0:	sub	sp, fp, #28
   2d2c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d2c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d2cc:	add	fp, sp, #28
   2d2d0:	sub	sp, sp, #36	; 0x24
   2d2d4:	ldr	r4, [r0, #84]	; 0x54
   2d2d8:	mov	r7, r0
   2d2dc:	mov	r5, r1
   2d2e0:	add	r1, r3, r3, lsl #1
   2d2e4:	str	r3, [sp, #32]
   2d2e8:	ldr	r0, [r4, #24]
   2d2ec:	add	r1, r0, r1, lsl #2
   2d2f0:	mov	lr, r1
   2d2f4:	ldr	r0, [lr, #4]!
   2d2f8:	cmp	r0, #1
   2d2fc:	blt	2d4a8 <__assert_fail@plt+0x1b7fc>
   2d300:	mov	ip, #1
   2d304:	mov	r6, r2
   2d308:	and	r3, r5, #2
   2d30c:	mov	sl, #0
   2d310:	mvn	r2, ip, lsl r2
   2d314:	cmp	r6, #31
   2d318:	str	r3, [sp, #16]
   2d31c:	str	r2, [sp, #24]
   2d320:	lsl	r2, ip, r6
   2d324:	and	ip, r5, #1
   2d328:	str	r2, [sp, #28]
   2d32c:	mov	r2, #0
   2d330:	movwgt	r2, #1
   2d334:	str	ip, [sp, #12]
   2d338:	orr	r2, r2, r3, lsr #1
   2d33c:	add	r3, r1, #8
   2d340:	stmib	sp, {r3, lr}
   2d344:	str	r2, [sp, #20]
   2d348:	b	2d368 <__assert_fail@plt+0x1b6bc>
   2d34c:	ldr	lr, [sp, #8]
   2d350:	ldr	ip, [sp, #12]
   2d354:	ldr	r3, [sp, #4]
   2d358:	ldr	r0, [lr]
   2d35c:	add	sl, sl, #1
   2d360:	cmp	sl, r0
   2d364:	bge	2d4a8 <__assert_fail@plt+0x1b7fc>
   2d368:	ldr	r1, [r3]
   2d36c:	ldr	r9, [r1, sl, lsl #2]
   2d370:	ldr	r1, [r4]
   2d374:	add	r2, r1, r9, lsl #3
   2d378:	ldrb	r2, [r2, #4]
   2d37c:	cmp	r2, #9
   2d380:	beq	2d46c <__assert_fail@plt+0x1b7c0>
   2d384:	cmp	r2, #8
   2d388:	beq	2d488 <__assert_fail@plt+0x1b7dc>
   2d38c:	cmp	r2, #4
   2d390:	bne	2d35c <__assert_fail@plt+0x1b6b0>
   2d394:	ldr	r1, [fp, #8]
   2d398:	cmn	r1, #1
   2d39c:	beq	2d35c <__assert_fail@plt+0x1b6b0>
   2d3a0:	ldr	r1, [fp, #8]
   2d3a4:	ldr	r0, [r7, #116]	; 0x74
   2d3a8:	add	r1, r1, r1, lsl #1
   2d3ac:	add	r0, r0, r1, lsl #3
   2d3b0:	add	r8, r0, #16
   2d3b4:	b	2d3d8 <__assert_fail@plt+0x1b72c>
   2d3b8:	ldr	r0, [r8]
   2d3bc:	ldr	r1, [sp, #24]
   2d3c0:	and	r0, r0, r1
   2d3c4:	str	r0, [r8]
   2d3c8:	ldrb	r0, [r8, #4]
   2d3cc:	add	r8, r8, #24
   2d3d0:	cmp	r0, #0
   2d3d4:	beq	2d34c <__assert_fail@plt+0x1b6a0>
   2d3d8:	ldr	r0, [r8, #-16]
   2d3dc:	cmp	r0, r9
   2d3e0:	bne	2d3c8 <__assert_fail@plt+0x1b71c>
   2d3e4:	cmp	r6, #31
   2d3e8:	bgt	2d3fc <__assert_fail@plt+0x1b750>
   2d3ec:	ldr	r0, [r8]
   2d3f0:	ldr	r1, [sp, #28]
   2d3f4:	tst	r0, r1
   2d3f8:	beq	2d3c8 <__assert_fail@plt+0x1b71c>
   2d3fc:	ldr	r0, [r4, #20]
   2d400:	add	r1, r9, r9, lsl #1
   2d404:	add	r0, r0, r1, lsl #2
   2d408:	ldr	r0, [r0, #8]
   2d40c:	ldr	r3, [r0]
   2d410:	ldr	r0, [sp, #32]
   2d414:	cmp	r3, r0
   2d418:	beq	2d4b4 <__assert_fail@plt+0x1b808>
   2d41c:	ldr	r0, [fp, #8]
   2d420:	mov	r1, r5
   2d424:	mov	r2, r6
   2d428:	str	r0, [sp]
   2d42c:	mov	r0, r7
   2d430:	bl	2d2c8 <__assert_fail@plt+0x1b61c>
   2d434:	cmp	r0, #0
   2d438:	beq	2d450 <__assert_fail@plt+0x1b7a4>
   2d43c:	cmn	r0, #1
   2d440:	beq	2d4c8 <__assert_fail@plt+0x1b81c>
   2d444:	cmp	r6, #31
   2d448:	ble	2d3b8 <__assert_fail@plt+0x1b70c>
   2d44c:	b	2d3c8 <__assert_fail@plt+0x1b71c>
   2d450:	ldr	r0, [sp, #20]
   2d454:	cmp	r0, #0
   2d458:	beq	2d3b8 <__assert_fail@plt+0x1b70c>
   2d45c:	ldr	r0, [sp, #16]
   2d460:	cmp	r0, #0
   2d464:	beq	2d3c8 <__assert_fail@plt+0x1b71c>
   2d468:	b	2d4c4 <__assert_fail@plt+0x1b818>
   2d46c:	ldr	r2, [sp, #16]
   2d470:	cmp	r2, #0
   2d474:	beq	2d35c <__assert_fail@plt+0x1b6b0>
   2d478:	ldr	r1, [r1, r9, lsl #3]
   2d47c:	cmp	r1, r6
   2d480:	bne	2d35c <__assert_fail@plt+0x1b6b0>
   2d484:	b	2d4c4 <__assert_fail@plt+0x1b818>
   2d488:	cmp	ip, #0
   2d48c:	beq	2d35c <__assert_fail@plt+0x1b6b0>
   2d490:	ldr	r1, [r1, r9, lsl #3]
   2d494:	cmp	r1, r6
   2d498:	bne	2d35c <__assert_fail@plt+0x1b6b0>
   2d49c:	mvn	r0, #0
   2d4a0:	sub	sp, fp, #28
   2d4a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d4a8:	ubfx	r0, r5, #1, #1
   2d4ac:	sub	sp, fp, #28
   2d4b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d4b4:	ldr	r0, [sp, #12]
   2d4b8:	rsb	r0, r0, #0
   2d4bc:	sub	sp, fp, #28
   2d4c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d4c4:	mov	r0, #0
   2d4c8:	sub	sp, fp, #28
   2d4cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d4d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d4d4:	add	fp, sp, #28
   2d4d8:	sub	sp, sp, #60	; 0x3c
   2d4dc:	sub	sp, sp, #1024	; 0x400
   2d4e0:	mov	r8, r0
   2d4e4:	ldrb	r0, [r0]
   2d4e8:	mov	r6, r1
   2d4ec:	cmp	r0, #0
   2d4f0:	beq	2d7c8 <__assert_fail@plt+0x1bb1c>
   2d4f4:	add	r1, sp, #52	; 0x34
   2d4f8:	mov	sl, #1
   2d4fc:	mov	r4, #0
   2d500:	str	r8, [sp, #36]	; 0x24
   2d504:	str	r6, [sp, #48]	; 0x30
   2d508:	add	r1, r1, #16
   2d50c:	str	r1, [sp, #40]	; 0x28
   2d510:	b	2d53c <__assert_fail@plt+0x1b890>
   2d514:	sub	r0, r6, r7
   2d518:	ldr	r6, [sp, #48]	; 0x30
   2d51c:	clz	r0, r0
   2d520:	lsr	r0, r0, #5
   2d524:	and	sl, sl, r0
   2d528:	add	r0, r8, r4
   2d52c:	add	r4, r4, #1
   2d530:	ldrb	r0, [r0, #1]
   2d534:	cmp	r0, #0
   2d538:	beq	2d590 <__assert_fail@plt+0x1b8e4>
   2d53c:	ldrb	r7, [r6, r4]
   2d540:	cmp	r7, #0
   2d544:	beq	2d590 <__assert_fail@plt+0x1b8e4>
   2d548:	uxtb	r6, r0
   2d54c:	bl	11a84 <__ctype_b_loc@plt>
   2d550:	ldr	r5, [r0]
   2d554:	add	r0, r5, r6, lsl #1
   2d558:	ldrb	r0, [r0, #1]
   2d55c:	tst	r0, #1
   2d560:	beq	2d570 <__assert_fail@plt+0x1b8c4>
   2d564:	bl	11a54 <__ctype_tolower_loc@plt>
   2d568:	ldr	r0, [r0]
   2d56c:	ldr	r6, [r0, r6, lsl #2]
   2d570:	add	r0, r5, r7, lsl #1
   2d574:	ldrb	r0, [r0, #1]
   2d578:	tst	r0, #1
   2d57c:	beq	2d514 <__assert_fail@plt+0x1b868>
   2d580:	bl	11a54 <__ctype_tolower_loc@plt>
   2d584:	ldr	r0, [r0]
   2d588:	ldr	r7, [r0, r7, lsl #2]
   2d58c:	b	2d514 <__assert_fail@plt+0x1b868>
   2d590:	add	r9, r6, r4
   2d594:	ldr	r8, [sp, #36]	; 0x24
   2d598:	ldrb	r0, [r9]
   2d59c:	cmp	r0, #0
   2d5a0:	movwne	r8, #0
   2d5a4:	tst	sl, #1
   2d5a8:	cmpeq	r0, #0
   2d5ac:	bne	2d7d4 <__assert_fail@plt+0x1bb28>
   2d5b0:	ldr	r0, [sp, #36]	; 0x24
   2d5b4:	sub	sl, r9, r6
   2d5b8:	cmp	sl, #31
   2d5bc:	str	sl, [sp, #44]	; 0x2c
   2d5c0:	add	r0, r0, #1
   2d5c4:	str	r0, [sp, #24]
   2d5c8:	bhi	2d7e0 <__assert_fail@plt+0x1bb34>
   2d5cc:	add	r2, sp, #52	; 0x34
   2d5d0:	mov	r0, r6
   2d5d4:	mov	r1, sl
   2d5d8:	bl	2e0b0 <__assert_fail@plt+0x1c404>
   2d5dc:	ldr	r5, [sp, #52]	; 0x34
   2d5e0:	mov	r4, r0
   2d5e4:	mov	r0, r6
   2d5e8:	mov	r2, r4
   2d5ec:	add	r1, r6, r5
   2d5f0:	bl	11b08 <strncasecmp@plt>
   2d5f4:	cmp	r0, #0
   2d5f8:	str	r4, [sp, #32]
   2d5fc:	beq	2dc7c <__assert_fail@plt+0x1bfd0>
   2d600:	sub	r0, sl, r4
   2d604:	mov	r1, #0
   2d608:	mov	r2, #1
   2d60c:	mov	r8, #0
   2d610:	cmp	r4, r0
   2d614:	movcs	r0, r4
   2d618:	add	r0, r0, #1
   2d61c:	str	r0, [sp, #16]
   2d620:	str	r0, [sp, #52]	; 0x34
   2d624:	ldr	r0, [sp, #36]	; 0x24
   2d628:	add	r0, r0, sl
   2d62c:	bl	11b68 <memchr@plt>
   2d630:	cmp	sl, #0
   2d634:	beq	2d7d4 <__assert_fail@plt+0x1bb28>
   2d638:	cmp	r0, #0
   2d63c:	bne	2d7d4 <__assert_fail@plt+0x1bb28>
   2d640:	ldr	r1, [sp, #32]
   2d644:	ldr	r5, [sp, #44]	; 0x2c
   2d648:	add	r0, r1, r6
   2d64c:	str	r0, [sp, #20]
   2d650:	sub	r0, r0, r9
   2d654:	sub	r9, r6, #1
   2d658:	str	r0, [sp, #48]	; 0x30
   2d65c:	ldr	r0, [sp, #36]	; 0x24
   2d660:	add	r0, r1, r0
   2d664:	add	r0, r0, #1
   2d668:	str	r0, [sp, #12]
   2d66c:	mov	r0, #0
   2d670:	str	r0, [sp, #40]	; 0x28
   2d674:	ldr	r0, [sp, #44]	; 0x2c
   2d678:	ldr	r1, [sp, #32]
   2d67c:	ldr	r4, [sp, #20]
   2d680:	str	r5, [sp, #28]
   2d684:	cmp	r0, r1
   2d688:	bls	2d6fc <__assert_fail@plt+0x1ba50>
   2d68c:	ldr	r0, [sp, #12]
   2d690:	ldr	r1, [sp, #40]	; 0x28
   2d694:	add	r8, r0, r1
   2d698:	bl	11a84 <__ctype_b_loc@plt>
   2d69c:	ldr	sl, [r0]
   2d6a0:	mov	r6, #0
   2d6a4:	ldrb	r5, [r4, -r6]
   2d6a8:	add	r0, sl, r5, lsl #1
   2d6ac:	ldrb	r0, [r0, #1]
   2d6b0:	tst	r0, #1
   2d6b4:	beq	2d6c4 <__assert_fail@plt+0x1ba18>
   2d6b8:	bl	11a54 <__ctype_tolower_loc@plt>
   2d6bc:	ldr	r0, [r0]
   2d6c0:	ldr	r5, [r0, r5, lsl #2]
   2d6c4:	ldrb	r7, [r8, -r6]
   2d6c8:	add	r0, sl, r7, lsl #1
   2d6cc:	ldrb	r0, [r0, #1]
   2d6d0:	tst	r0, #1
   2d6d4:	beq	2d6e4 <__assert_fail@plt+0x1ba38>
   2d6d8:	bl	11a54 <__ctype_tolower_loc@plt>
   2d6dc:	ldr	r0, [r0]
   2d6e0:	ldr	r7, [r0, r7, lsl #2]
   2d6e4:	cmp	r5, r7
   2d6e8:	bne	2d780 <__assert_fail@plt+0x1bad4>
   2d6ec:	ldr	r0, [sp, #48]	; 0x30
   2d6f0:	sub	r6, r6, #1
   2d6f4:	cmp	r0, r6
   2d6f8:	bne	2d6a4 <__assert_fail@plt+0x1b9f8>
   2d6fc:	ldr	r0, [sp, #36]	; 0x24
   2d700:	ldr	r8, [sp, #40]	; 0x28
   2d704:	ldr	r6, [sp, #32]
   2d708:	add	sl, r0, r8
   2d70c:	cmp	r6, #0
   2d710:	bne	2d72c <__assert_fail@plt+0x1ba80>
   2d714:	b	2dc70 <__assert_fail@plt+0x1bfc4>
   2d718:	sub	r6, r6, #1
   2d71c:	cmp	r5, r4
   2d720:	bne	2d778 <__assert_fail@plt+0x1bacc>
   2d724:	cmp	r6, #0
   2d728:	beq	2dc70 <__assert_fail@plt+0x1bfc4>
   2d72c:	bl	11a84 <__ctype_b_loc@plt>
   2d730:	ldrb	r5, [r9, r6]
   2d734:	ldr	r7, [r0]
   2d738:	add	r0, r7, r5, lsl #1
   2d73c:	ldrb	r0, [r0, #1]
   2d740:	tst	r0, #1
   2d744:	beq	2d754 <__assert_fail@plt+0x1baa8>
   2d748:	bl	11a54 <__ctype_tolower_loc@plt>
   2d74c:	ldr	r0, [r0]
   2d750:	ldr	r5, [r0, r5, lsl #2]
   2d754:	ldrb	r4, [sl, r6]
   2d758:	add	r0, r7, r4, lsl #1
   2d75c:	ldrb	r0, [r0, #1]
   2d760:	tst	r0, #1
   2d764:	beq	2d718 <__assert_fail@plt+0x1ba6c>
   2d768:	bl	11a54 <__ctype_tolower_loc@plt>
   2d76c:	ldr	r0, [r0]
   2d770:	ldr	r4, [r0, r4, lsl #2]
   2d774:	b	2d718 <__assert_fail@plt+0x1ba6c>
   2d778:	ldr	r1, [sp, #16]
   2d77c:	b	2d788 <__assert_fail@plt+0x1badc>
   2d780:	ldr	r8, [sp, #40]	; 0x28
   2d784:	rsb	r1, r6, #1
   2d788:	add	r8, r1, r8
   2d78c:	ldr	r1, [sp, #44]	; 0x2c
   2d790:	ldr	r0, [sp, #24]
   2d794:	ldr	r2, [sp, #28]
   2d798:	str	r8, [sp, #40]	; 0x28
   2d79c:	add	r5, r8, r1
   2d7a0:	add	r0, r0, r2
   2d7a4:	mov	r1, #0
   2d7a8:	mov	r8, #0
   2d7ac:	sub	r2, r5, r2
   2d7b0:	bl	11b68 <memchr@plt>
   2d7b4:	cmp	r0, #0
   2d7b8:	bne	2d7d4 <__assert_fail@plt+0x1bb28>
   2d7bc:	cmp	r5, #0
   2d7c0:	bne	2d674 <__assert_fail@plt+0x1b9c8>
   2d7c4:	b	2d7d4 <__assert_fail@plt+0x1bb28>
   2d7c8:	ldrb	r0, [r6]
   2d7cc:	cmp	r0, #0
   2d7d0:	movne	r8, #0
   2d7d4:	mov	r0, r8
   2d7d8:	sub	sp, fp, #28
   2d7dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d7e0:	sub	r2, fp, #36	; 0x24
   2d7e4:	mov	r0, r6
   2d7e8:	mov	r1, sl
   2d7ec:	sub	r7, sl, #1
   2d7f0:	bl	2e0b0 <__assert_fail@plt+0x1c404>
   2d7f4:	vdup.32	q8, sl
   2d7f8:	ldr	r2, [sp, #40]	; 0x28
   2d7fc:	add	r1, sp, #52	; 0x34
   2d800:	str	r0, [sp, #20]
   2d804:	mov	r8, r1
   2d808:	add	r0, r2, #16
   2d80c:	vst1.32	{d16-d17}, [r1]
   2d810:	vst1.32	{d16-d17}, [r0]
   2d814:	add	r0, r2, #32
   2d818:	vst1.32	{d16-d17}, [r0]
   2d81c:	add	r0, r2, #48	; 0x30
   2d820:	vst1.32	{d16-d17}, [r0]
   2d824:	add	r0, r2, #64	; 0x40
   2d828:	vst1.32	{d16-d17}, [r0]
   2d82c:	add	r0, r2, #80	; 0x50
   2d830:	vst1.32	{d16-d17}, [r0]
   2d834:	add	r0, r2, #96	; 0x60
   2d838:	vst1.32	{d16-d17}, [r0]
   2d83c:	add	r0, r2, #112	; 0x70
   2d840:	vst1.32	{d16-d17}, [r0]
   2d844:	add	r0, r2, #128	; 0x80
   2d848:	vst1.32	{d16-d17}, [r0]
   2d84c:	add	r0, r2, #144	; 0x90
   2d850:	vst1.32	{d16-d17}, [r0]
   2d854:	add	r0, r2, #160	; 0xa0
   2d858:	vst1.32	{d16-d17}, [r0]
   2d85c:	add	r0, r2, #176	; 0xb0
   2d860:	vst1.32	{d16-d17}, [r0]
   2d864:	add	r0, r2, #192	; 0xc0
   2d868:	vst1.32	{d16-d17}, [r0]
   2d86c:	add	r0, r2, #208	; 0xd0
   2d870:	vst1.32	{d16-d17}, [r0]
   2d874:	add	r0, r2, #224	; 0xe0
   2d878:	vst1.32	{d16-d17}, [r0]
   2d87c:	add	r0, r2, #240	; 0xf0
   2d880:	vst1.32	{d16-d17}, [r0]
   2d884:	add	r0, r2, #256	; 0x100
   2d888:	vst1.32	{d16-d17}, [r0]
   2d88c:	add	r0, r2, #272	; 0x110
   2d890:	vst1.32	{d16-d17}, [r0]
   2d894:	add	r0, r2, #288	; 0x120
   2d898:	vst1.32	{d16-d17}, [r0]
   2d89c:	add	r0, r2, #304	; 0x130
   2d8a0:	vst1.32	{d16-d17}, [r0]
   2d8a4:	add	r0, r2, #320	; 0x140
   2d8a8:	vst1.32	{d16-d17}, [r0]
   2d8ac:	add	r0, r2, #336	; 0x150
   2d8b0:	vst1.32	{d16-d17}, [r0]
   2d8b4:	add	r0, r2, #352	; 0x160
   2d8b8:	vst1.32	{d16-d17}, [r0]
   2d8bc:	add	r0, r2, #368	; 0x170
   2d8c0:	vst1.32	{d16-d17}, [r0]
   2d8c4:	add	r0, r2, #384	; 0x180
   2d8c8:	vst1.32	{d16-d17}, [r0]
   2d8cc:	add	r0, r2, #400	; 0x190
   2d8d0:	vst1.32	{d16-d17}, [r0]
   2d8d4:	add	r0, r2, #416	; 0x1a0
   2d8d8:	vst1.32	{d16-d17}, [r0]
   2d8dc:	add	r0, r2, #432	; 0x1b0
   2d8e0:	vst1.32	{d16-d17}, [r0]
   2d8e4:	add	r0, r2, #448	; 0x1c0
   2d8e8:	vst1.32	{d16-d17}, [r0]
   2d8ec:	add	r0, r2, #464	; 0x1d0
   2d8f0:	vst1.32	{d16-d17}, [r0]
   2d8f4:	add	r0, r2, #480	; 0x1e0
   2d8f8:	vst1.32	{d16-d17}, [r0]
   2d8fc:	add	r0, r2, #496	; 0x1f0
   2d900:	vst1.32	{d16-d17}, [r0]
   2d904:	add	r0, r2, #512	; 0x200
   2d908:	vst1.32	{d16-d17}, [r0]
   2d90c:	add	r0, r2, #528	; 0x210
   2d910:	vst1.32	{d16-d17}, [r0]
   2d914:	add	r0, r2, #544	; 0x220
   2d918:	vst1.32	{d16-d17}, [r0]
   2d91c:	add	r0, r2, #560	; 0x230
   2d920:	vst1.32	{d16-d17}, [r0]
   2d924:	add	r0, r2, #576	; 0x240
   2d928:	vst1.32	{d16-d17}, [r0]
   2d92c:	add	r0, r2, #592	; 0x250
   2d930:	vst1.32	{d16-d17}, [r0]
   2d934:	add	r0, r2, #608	; 0x260
   2d938:	vst1.32	{d16-d17}, [r0]
   2d93c:	add	r0, r2, #624	; 0x270
   2d940:	vst1.32	{d16-d17}, [r0]
   2d944:	add	r0, r2, #640	; 0x280
   2d948:	vst1.32	{d16-d17}, [r0]
   2d94c:	add	r0, r2, #656	; 0x290
   2d950:	vst1.32	{d16-d17}, [r0]
   2d954:	add	r0, r2, #672	; 0x2a0
   2d958:	vst1.32	{d16-d17}, [r0]
   2d95c:	add	r0, r2, #688	; 0x2b0
   2d960:	vst1.32	{d16-d17}, [r0]
   2d964:	add	r0, r2, #704	; 0x2c0
   2d968:	vst1.32	{d16-d17}, [r0]
   2d96c:	add	r0, r2, #720	; 0x2d0
   2d970:	vst1.32	{d16-d17}, [r0]
   2d974:	add	r0, r2, #736	; 0x2e0
   2d978:	vst1.32	{d16-d17}, [r0]
   2d97c:	add	r0, r2, #752	; 0x2f0
   2d980:	vst1.32	{d16-d17}, [r0]
   2d984:	add	r0, r2, #768	; 0x300
   2d988:	vst1.32	{d16-d17}, [r0]
   2d98c:	add	r0, r2, #784	; 0x310
   2d990:	vst1.32	{d16-d17}, [r0]
   2d994:	add	r0, r2, #800	; 0x320
   2d998:	vst1.32	{d16-d17}, [r0]
   2d99c:	add	r0, r2, #816	; 0x330
   2d9a0:	vst1.32	{d16-d17}, [r0]
   2d9a4:	add	r0, r2, #832	; 0x340
   2d9a8:	vst1.32	{d16-d17}, [r0]
   2d9ac:	add	r0, r2, #848	; 0x350
   2d9b0:	vst1.32	{d16-d17}, [r0]
   2d9b4:	add	r0, r2, #864	; 0x360
   2d9b8:	vst1.32	{d16-d17}, [r0]
   2d9bc:	add	r0, r2, #880	; 0x370
   2d9c0:	vst1.32	{d16-d17}, [r0]
   2d9c4:	add	r0, r2, #896	; 0x380
   2d9c8:	vst1.32	{d16-d17}, [r0]
   2d9cc:	add	r0, r2, #912	; 0x390
   2d9d0:	vst1.32	{d16-d17}, [r0]
   2d9d4:	add	r0, r2, #928	; 0x3a0
   2d9d8:	vst1.32	{d16-d17}, [r0]
   2d9dc:	add	r0, r2, #944	; 0x3b0
   2d9e0:	vst1.32	{d16-d17}, [r0]
   2d9e4:	add	r0, r2, #960	; 0x3c0
   2d9e8:	vst1.32	{d16-d17}, [r0]
   2d9ec:	add	r0, r2, #976	; 0x3d0
   2d9f0:	vst1.32	{d16-d17}, [r0]
   2d9f4:	mov	r0, #992	; 0x3e0
   2d9f8:	vst1.32	{d16-d17}, [r2], r0
   2d9fc:	vst1.32	{d16-d17}, [r2]
   2da00:	bl	11a84 <__ctype_b_loc@plt>
   2da04:	ldr	r4, [r0]
   2da08:	mov	r5, r6
   2da0c:	mov	r6, r7
   2da10:	str	r7, [sp, #28]
   2da14:	b	2da2c <__assert_fail@plt+0x1bd80>
   2da18:	str	r6, [r8, r7, lsl #2]
   2da1c:	sub	r6, r6, #1
   2da20:	add	r5, r5, #1
   2da24:	cmn	r6, #1
   2da28:	beq	2da50 <__assert_fail@plt+0x1bda4>
   2da2c:	ldrb	r7, [r5]
   2da30:	add	r0, r4, r7, lsl #1
   2da34:	ldrb	r0, [r0, #1]
   2da38:	tst	r0, #1
   2da3c:	beq	2da18 <__assert_fail@plt+0x1bd6c>
   2da40:	bl	11a54 <__ctype_tolower_loc@plt>
   2da44:	ldr	r0, [r0]
   2da48:	ldr	r7, [r0, r7, lsl #2]
   2da4c:	b	2da18 <__assert_fail@plt+0x1bd6c>
   2da50:	ldr	r6, [sp, #48]	; 0x30
   2da54:	ldr	r5, [fp, #-36]	; 0xffffffdc
   2da58:	ldr	r4, [sp, #20]
   2da5c:	add	r1, r6, r5
   2da60:	mov	r0, r6
   2da64:	mov	r2, r4
   2da68:	bl	11b08 <strncasecmp@plt>
   2da6c:	cmp	r0, #0
   2da70:	beq	2de4c <__assert_fail@plt+0x1c1a0>
   2da74:	sub	r0, sl, r4
   2da78:	mov	r1, #0
   2da7c:	mov	r2, #1
   2da80:	mov	r8, #0
   2da84:	cmp	r4, r0
   2da88:	movcs	r0, r4
   2da8c:	add	r0, r0, #1
   2da90:	str	r0, [sp, #16]
   2da94:	str	r0, [fp, #-36]	; 0xffffffdc
   2da98:	ldr	r0, [sp, #36]	; 0x24
   2da9c:	add	r0, r0, sl
   2daa0:	bl	11b68 <memchr@plt>
   2daa4:	cmp	sl, #0
   2daa8:	beq	2d7d4 <__assert_fail@plt+0x1bb28>
   2daac:	cmp	r0, #0
   2dab0:	bne	2d7d4 <__assert_fail@plt+0x1bb28>
   2dab4:	ldr	r0, [sp, #36]	; 0x24
   2dab8:	ldr	r1, [sp, #20]
   2dabc:	add	r0, r1, r0
   2dac0:	add	r0, r0, #1
   2dac4:	str	r0, [sp, #12]
   2dac8:	add	r0, r1, r6
   2dacc:	str	r0, [sp, #40]	; 0x28
   2dad0:	sub	r0, r0, r9
   2dad4:	sub	r9, r6, #1
   2dad8:	add	r0, r0, #1
   2dadc:	str	r0, [sp, #32]
   2dae0:	bl	11a84 <__ctype_b_loc@plt>
   2dae4:	ldr	sl, [r0]
   2dae8:	ldr	r7, [sp, #44]	; 0x2c
   2daec:	mov	r6, #0
   2daf0:	ldr	r0, [sp, #36]	; 0x24
   2daf4:	ldrb	r4, [r0, r7]
   2daf8:	add	r0, sl, r4, lsl #1
   2dafc:	ldrb	r0, [r0, #1]
   2db00:	tst	r0, #1
   2db04:	beq	2db14 <__assert_fail@plt+0x1be68>
   2db08:	bl	11a54 <__ctype_tolower_loc@plt>
   2db0c:	ldr	r0, [r0]
   2db10:	ldr	r4, [r0, r4, lsl #2]
   2db14:	add	r0, sp, #52	; 0x34
   2db18:	ldr	r1, [r0, r4, lsl #2]
   2db1c:	cmp	r1, #0
   2db20:	bne	2dc34 <__assert_fail@plt+0x1bf88>
   2db24:	ldr	r0, [sp, #28]
   2db28:	ldr	r1, [sp, #20]
   2db2c:	str	r7, [sp, #48]	; 0x30
   2db30:	mov	r8, r6
   2db34:	mov	r7, r9
   2db38:	cmp	r1, r0
   2db3c:	bcs	2dba8 <__assert_fail@plt+0x1befc>
   2db40:	ldr	r0, [sp, #12]
   2db44:	mov	r4, #0
   2db48:	add	r9, r0, r8
   2db4c:	ldr	r0, [sp, #40]	; 0x28
   2db50:	ldrb	r5, [r0, -r4]
   2db54:	add	r0, sl, r5, lsl #1
   2db58:	ldrb	r0, [r0, #1]
   2db5c:	tst	r0, #1
   2db60:	beq	2db70 <__assert_fail@plt+0x1bec4>
   2db64:	bl	11a54 <__ctype_tolower_loc@plt>
   2db68:	ldr	r0, [r0]
   2db6c:	ldr	r5, [r0, r5, lsl #2]
   2db70:	ldrb	r6, [r9, -r4]
   2db74:	add	r0, sl, r6, lsl #1
   2db78:	ldrb	r0, [r0, #1]
   2db7c:	tst	r0, #1
   2db80:	beq	2db90 <__assert_fail@plt+0x1bee4>
   2db84:	bl	11a54 <__ctype_tolower_loc@plt>
   2db88:	ldr	r0, [r0]
   2db8c:	ldr	r6, [r0, r6, lsl #2]
   2db90:	cmp	r5, r6
   2db94:	bne	2dc24 <__assert_fail@plt+0x1bf78>
   2db98:	ldr	r0, [sp, #32]
   2db9c:	sub	r4, r4, #1
   2dba0:	cmp	r0, r4
   2dba4:	bne	2db4c <__assert_fail@plt+0x1bea0>
   2dba8:	ldr	r0, [sp, #36]	; 0x24
   2dbac:	ldr	r5, [sp, #20]
   2dbb0:	mov	r9, r7
   2dbb4:	add	r4, r0, r8
   2dbb8:	cmp	r5, #0
   2dbbc:	bne	2dbd8 <__assert_fail@plt+0x1bf2c>
   2dbc0:	b	2dc70 <__assert_fail@plt+0x1bfc4>
   2dbc4:	sub	r5, r5, #1
   2dbc8:	cmp	r6, r7
   2dbcc:	bne	2dc1c <__assert_fail@plt+0x1bf70>
   2dbd0:	cmp	r5, #0
   2dbd4:	beq	2dc70 <__assert_fail@plt+0x1bfc4>
   2dbd8:	ldrb	r6, [r9, r5]
   2dbdc:	add	r0, sl, r6, lsl #1
   2dbe0:	ldrb	r0, [r0, #1]
   2dbe4:	tst	r0, #1
   2dbe8:	beq	2dbf8 <__assert_fail@plt+0x1bf4c>
   2dbec:	bl	11a54 <__ctype_tolower_loc@plt>
   2dbf0:	ldr	r0, [r0]
   2dbf4:	ldr	r6, [r0, r6, lsl #2]
   2dbf8:	ldrb	r7, [r4, r5]
   2dbfc:	add	r0, sl, r7, lsl #1
   2dc00:	ldrb	r0, [r0, #1]
   2dc04:	tst	r0, #1
   2dc08:	beq	2dbc4 <__assert_fail@plt+0x1bf18>
   2dc0c:	bl	11a54 <__ctype_tolower_loc@plt>
   2dc10:	ldr	r0, [r0]
   2dc14:	ldr	r7, [r0, r7, lsl #2]
   2dc18:	b	2dbc4 <__assert_fail@plt+0x1bf18>
   2dc1c:	ldr	r1, [sp, #16]
   2dc20:	b	2dc2c <__assert_fail@plt+0x1bf80>
   2dc24:	rsb	r1, r4, #1
   2dc28:	mov	r9, r7
   2dc2c:	ldr	r7, [sp, #48]	; 0x30
   2dc30:	mov	r6, r8
   2dc34:	add	r6, r1, r6
   2dc38:	ldr	r1, [sp, #44]	; 0x2c
   2dc3c:	ldr	r0, [sp, #24]
   2dc40:	mov	r8, #0
   2dc44:	add	r5, r6, r1
   2dc48:	add	r0, r0, r7
   2dc4c:	mov	r1, #0
   2dc50:	sub	r2, r5, r7
   2dc54:	bl	11b68 <memchr@plt>
   2dc58:	cmp	r0, #0
   2dc5c:	bne	2d7d4 <__assert_fail@plt+0x1bb28>
   2dc60:	cmp	r5, #0
   2dc64:	mov	r7, r5
   2dc68:	bne	2daf0 <__assert_fail@plt+0x1be44>
   2dc6c:	b	2d7d4 <__assert_fail@plt+0x1bb28>
   2dc70:	ldr	r0, [sp, #24]
   2dc74:	add	r8, r0, r8
   2dc78:	b	2d7d4 <__assert_fail@plt+0x1bb28>
   2dc7c:	ldr	r0, [sp, #36]	; 0x24
   2dc80:	mov	r1, #0
   2dc84:	mov	r2, #1
   2dc88:	mov	r8, #0
   2dc8c:	add	r0, r0, sl
   2dc90:	bl	11b68 <memchr@plt>
   2dc94:	cmp	sl, #0
   2dc98:	beq	2d7d4 <__assert_fail@plt+0x1bb28>
   2dc9c:	cmp	r0, #0
   2dca0:	str	r5, [sp, #20]
   2dca4:	bne	2d7d4 <__assert_fail@plt+0x1bb28>
   2dca8:	ldr	r0, [sp, #44]	; 0x2c
   2dcac:	ldr	r1, [sp, #20]
   2dcb0:	sub	sl, r6, #1
   2dcb4:	mov	r9, #0
   2dcb8:	sub	r1, r0, r1
   2dcbc:	mov	r5, r0
   2dcc0:	str	r1, [sp, #16]
   2dcc4:	ldr	r1, [sp, #32]
   2dcc8:	rsb	r1, r1, #1
   2dccc:	str	r1, [sp, #12]
   2dcd0:	mov	r1, #0
   2dcd4:	str	r1, [sp, #40]	; 0x28
   2dcd8:	ldr	r4, [sp, #32]
   2dcdc:	ldr	r0, [sp, #44]	; 0x2c
   2dce0:	str	r5, [sp, #28]
   2dce4:	cmp	r4, r9
   2dce8:	movcc	r4, r9
   2dcec:	cmp	r4, r0
   2dcf0:	bcs	2dd64 <__assert_fail@plt+0x1c0b8>
   2dcf4:	ldr	r0, [sp, #24]
   2dcf8:	ldr	r1, [sp, #40]	; 0x28
   2dcfc:	add	r8, r0, r1
   2dd00:	bl	11a84 <__ctype_b_loc@plt>
   2dd04:	ldr	r5, [r0]
   2dd08:	ldrb	r6, [r6, r4]
   2dd0c:	add	r0, r5, r6, lsl #1
   2dd10:	ldrb	r0, [r0, #1]
   2dd14:	tst	r0, #1
   2dd18:	beq	2dd28 <__assert_fail@plt+0x1c07c>
   2dd1c:	bl	11a54 <__ctype_tolower_loc@plt>
   2dd20:	ldr	r0, [r0]
   2dd24:	ldr	r6, [r0, r6, lsl #2]
   2dd28:	ldrb	r7, [r8, r4]
   2dd2c:	add	r0, r5, r7, lsl #1
   2dd30:	ldrb	r0, [r0, #1]
   2dd34:	tst	r0, #1
   2dd38:	beq	2dd48 <__assert_fail@plt+0x1c09c>
   2dd3c:	bl	11a54 <__ctype_tolower_loc@plt>
   2dd40:	ldr	r0, [r0]
   2dd44:	ldr	r7, [r0, r7, lsl #2]
   2dd48:	cmp	r6, r7
   2dd4c:	bne	2ddf8 <__assert_fail@plt+0x1c14c>
   2dd50:	ldr	r0, [sp, #44]	; 0x2c
   2dd54:	ldr	r6, [sp, #48]	; 0x30
   2dd58:	add	r4, r4, #1
   2dd5c:	cmp	r4, r0
   2dd60:	bcc	2dd08 <__assert_fail@plt+0x1c05c>
   2dd64:	ldr	r0, [sp, #36]	; 0x24
   2dd68:	ldr	r1, [sp, #40]	; 0x28
   2dd6c:	add	r8, r0, r1
   2dd70:	ldr	r0, [sp, #32]
   2dd74:	b	2dd84 <__assert_fail@plt+0x1c0d8>
   2dd78:	sub	r0, r5, #1
   2dd7c:	cmp	r6, r4
   2dd80:	bne	2dddc <__assert_fail@plt+0x1c130>
   2dd84:	mov	r5, r0
   2dd88:	cmp	r9, r0
   2dd8c:	bcs	2dddc <__assert_fail@plt+0x1c130>
   2dd90:	bl	11a84 <__ctype_b_loc@plt>
   2dd94:	ldrb	r6, [sl, r5]
   2dd98:	ldr	r7, [r0]
   2dd9c:	add	r0, r7, r6, lsl #1
   2dda0:	ldrb	r0, [r0, #1]
   2dda4:	tst	r0, #1
   2dda8:	beq	2ddb8 <__assert_fail@plt+0x1c10c>
   2ddac:	bl	11a54 <__ctype_tolower_loc@plt>
   2ddb0:	ldr	r0, [r0]
   2ddb4:	ldr	r6, [r0, r6, lsl #2]
   2ddb8:	ldrb	r4, [r8, r5]
   2ddbc:	add	r0, r7, r4, lsl #1
   2ddc0:	ldrb	r0, [r0, #1]
   2ddc4:	tst	r0, #1
   2ddc8:	beq	2dd78 <__assert_fail@plt+0x1c0cc>
   2ddcc:	bl	11a54 <__ctype_tolower_loc@plt>
   2ddd0:	ldr	r0, [r0]
   2ddd4:	ldr	r4, [r0, r4, lsl #2]
   2ddd8:	b	2dd78 <__assert_fail@plt+0x1c0cc>
   2dddc:	add	r0, r9, #1
   2dde0:	ldr	r9, [sp, #16]
   2dde4:	ldr	r1, [sp, #20]
   2dde8:	ldr	r6, [sp, #48]	; 0x30
   2ddec:	cmp	r5, r0
   2ddf0:	bcs	2de08 <__assert_fail@plt+0x1c15c>
   2ddf4:	b	2e094 <__assert_fail@plt+0x1c3e8>
   2ddf8:	ldr	r0, [sp, #12]
   2ddfc:	ldr	r6, [sp, #48]	; 0x30
   2de00:	mov	r9, #0
   2de04:	add	r1, r0, r4
   2de08:	ldr	r2, [sp, #40]	; 0x28
   2de0c:	ldr	r0, [sp, #24]
   2de10:	ldr	r3, [sp, #28]
   2de14:	mov	r8, #0
   2de18:	add	r2, r1, r2
   2de1c:	ldr	r1, [sp, #44]	; 0x2c
   2de20:	add	r0, r0, r3
   2de24:	str	r2, [sp, #40]	; 0x28
   2de28:	add	r5, r2, r1
   2de2c:	mov	r1, #0
   2de30:	sub	r2, r5, r3
   2de34:	bl	11b68 <memchr@plt>
   2de38:	cmp	r0, #0
   2de3c:	bne	2d7d4 <__assert_fail@plt+0x1bb28>
   2de40:	cmp	r5, #0
   2de44:	bne	2dcd8 <__assert_fail@plt+0x1c02c>
   2de48:	b	2d7d4 <__assert_fail@plt+0x1bb28>
   2de4c:	ldr	r0, [sp, #36]	; 0x24
   2de50:	mov	r1, #0
   2de54:	mov	r2, #1
   2de58:	mov	r9, r5
   2de5c:	mov	r8, #0
   2de60:	add	r0, r0, sl
   2de64:	bl	11b68 <memchr@plt>
   2de68:	cmp	sl, #0
   2de6c:	beq	2d7d4 <__assert_fail@plt+0x1bb28>
   2de70:	cmp	r0, #0
   2de74:	bne	2d7d4 <__assert_fail@plt+0x1bb28>
   2de78:	ldr	r4, [sp, #44]	; 0x2c
   2de7c:	sub	r0, r4, r9
   2de80:	str	r0, [sp, #12]
   2de84:	sub	r0, r6, #1
   2de88:	str	r0, [sp, #32]
   2de8c:	ldr	r0, [sp, #20]
   2de90:	rsb	r0, r0, #1
   2de94:	str	r0, [sp, #4]
   2de98:	bl	11a84 <__ctype_b_loc@plt>
   2de9c:	ldr	sl, [r0]
   2dea0:	mov	r7, #0
   2dea4:	mov	r0, #0
   2dea8:	str	r0, [sp, #40]	; 0x28
   2deac:	ldr	r0, [sp, #36]	; 0x24
   2deb0:	ldrb	r5, [r0, r4]
   2deb4:	add	r0, sl, r5, lsl #1
   2deb8:	ldrb	r0, [r0, #1]
   2debc:	tst	r0, #1
   2dec0:	beq	2ded0 <__assert_fail@plt+0x1c224>
   2dec4:	bl	11a54 <__ctype_tolower_loc@plt>
   2dec8:	ldr	r0, [r0]
   2decc:	ldr	r5, [r0, r5, lsl #2]
   2ded0:	add	r0, sp, #52	; 0x34
   2ded4:	ldr	r0, [r0, r5, lsl #2]
   2ded8:	cmp	r0, #0
   2dedc:	beq	2df08 <__assert_fail@plt+0x1c25c>
   2dee0:	ldr	r2, [sp, #12]
   2dee4:	cmp	r0, r9
   2dee8:	mov	r1, r0
   2deec:	movcc	r1, r2
   2def0:	ldr	r2, [sp, #40]	; 0x28
   2def4:	cmp	r2, #0
   2def8:	moveq	r1, r0
   2defc:	mov	r0, #0
   2df00:	str	r0, [sp, #40]	; 0x28
   2df04:	b	2e03c <__assert_fail@plt+0x1c390>
   2df08:	str	r4, [sp, #8]
   2df0c:	ldr	r4, [sp, #20]
   2df10:	ldr	r0, [sp, #40]	; 0x28
   2df14:	mov	r8, r9
   2df18:	str	r7, [sp, #16]
   2df1c:	cmp	r4, r0
   2df20:	movcc	r4, r0
   2df24:	ldr	r0, [sp, #28]
   2df28:	cmp	r4, r0
   2df2c:	bcs	2df98 <__assert_fail@plt+0x1c2ec>
   2df30:	ldr	r0, [sp, #24]
   2df34:	ldr	r1, [sp, #16]
   2df38:	add	r9, r0, r1
   2df3c:	ldrb	r6, [r6, r4]
   2df40:	add	r0, sl, r6, lsl #1
   2df44:	ldrb	r0, [r0, #1]
   2df48:	tst	r0, #1
   2df4c:	beq	2df5c <__assert_fail@plt+0x1c2b0>
   2df50:	bl	11a54 <__ctype_tolower_loc@plt>
   2df54:	ldr	r0, [r0]
   2df58:	ldr	r6, [r0, r6, lsl #2]
   2df5c:	ldrb	r5, [r9, r4]
   2df60:	add	r0, sl, r5, lsl #1
   2df64:	ldrb	r0, [r0, #1]
   2df68:	tst	r0, #1
   2df6c:	beq	2df7c <__assert_fail@plt+0x1c2d0>
   2df70:	bl	11a54 <__ctype_tolower_loc@plt>
   2df74:	ldr	r0, [r0]
   2df78:	ldr	r5, [r0, r5, lsl #2]
   2df7c:	cmp	r6, r5
   2df80:	bne	2e078 <__assert_fail@plt+0x1c3cc>
   2df84:	ldr	r0, [sp, #28]
   2df88:	ldr	r6, [sp, #48]	; 0x30
   2df8c:	add	r4, r4, #1
   2df90:	cmp	r4, r0
   2df94:	bcc	2df3c <__assert_fail@plt+0x1c290>
   2df98:	ldr	r0, [sp, #36]	; 0x24
   2df9c:	ldr	r1, [sp, #16]
   2dfa0:	add	r4, r0, r1
   2dfa4:	ldr	r0, [sp, #20]
   2dfa8:	b	2dfb8 <__assert_fail@plt+0x1c30c>
   2dfac:	sub	r0, r7, #1
   2dfb0:	cmp	r6, r5
   2dfb4:	bne	2e010 <__assert_fail@plt+0x1c364>
   2dfb8:	mov	r7, r0
   2dfbc:	ldr	r0, [sp, #40]	; 0x28
   2dfc0:	cmp	r0, r7
   2dfc4:	bcs	2e010 <__assert_fail@plt+0x1c364>
   2dfc8:	ldr	r0, [sp, #32]
   2dfcc:	ldrb	r6, [r0, r7]
   2dfd0:	add	r0, sl, r6, lsl #1
   2dfd4:	ldrb	r0, [r0, #1]
   2dfd8:	tst	r0, #1
   2dfdc:	beq	2dfec <__assert_fail@plt+0x1c340>
   2dfe0:	bl	11a54 <__ctype_tolower_loc@plt>
   2dfe4:	ldr	r0, [r0]
   2dfe8:	ldr	r6, [r0, r6, lsl #2]
   2dfec:	ldrb	r5, [r4, r7]
   2dff0:	add	r0, sl, r5, lsl #1
   2dff4:	ldrb	r0, [r0, #1]
   2dff8:	tst	r0, #1
   2dffc:	beq	2dfac <__assert_fail@plt+0x1c300>
   2e000:	bl	11a54 <__ctype_tolower_loc@plt>
   2e004:	ldr	r0, [r0]
   2e008:	ldr	r5, [r0, r5, lsl #2]
   2e00c:	b	2dfac <__assert_fail@plt+0x1c300>
   2e010:	ldr	r0, [sp, #40]	; 0x28
   2e014:	ldr	r6, [sp, #48]	; 0x30
   2e018:	ldr	r4, [sp, #8]
   2e01c:	mov	r9, r8
   2e020:	mov	r1, r8
   2e024:	add	r0, r0, #1
   2e028:	cmp	r7, r0
   2e02c:	ldr	r0, [sp, #12]
   2e030:	ldr	r7, [sp, #16]
   2e034:	str	r0, [sp, #40]	; 0x28
   2e038:	bcc	2e0a4 <__assert_fail@plt+0x1c3f8>
   2e03c:	add	r7, r1, r7
   2e040:	ldr	r1, [sp, #44]	; 0x2c
   2e044:	ldr	r0, [sp, #24]
   2e048:	mov	r8, #0
   2e04c:	add	r5, r7, r1
   2e050:	add	r0, r0, r4
   2e054:	mov	r1, #0
   2e058:	sub	r2, r5, r4
   2e05c:	bl	11b68 <memchr@plt>
   2e060:	cmp	r0, #0
   2e064:	bne	2d7d4 <__assert_fail@plt+0x1bb28>
   2e068:	cmp	r5, #0
   2e06c:	mov	r4, r5
   2e070:	bne	2deac <__assert_fail@plt+0x1c200>
   2e074:	b	2d7d4 <__assert_fail@plt+0x1bb28>
   2e078:	ldr	r0, [sp, #4]
   2e07c:	ldr	r6, [sp, #48]	; 0x30
   2e080:	ldr	r7, [sp, #16]
   2e084:	mov	r9, r8
   2e088:	add	r1, r0, r4
   2e08c:	ldr	r4, [sp, #8]
   2e090:	b	2defc <__assert_fail@plt+0x1c250>
   2e094:	ldr	r0, [sp, #24]
   2e098:	ldr	r1, [sp, #40]	; 0x28
   2e09c:	add	r8, r0, r1
   2e0a0:	b	2d7d4 <__assert_fail@plt+0x1bb28>
   2e0a4:	ldr	r0, [sp, #24]
   2e0a8:	add	r8, r0, r7
   2e0ac:	b	2d7d4 <__assert_fail@plt+0x1bb28>
   2e0b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e0b4:	add	fp, sp, #28
   2e0b8:	sub	sp, sp, #20
   2e0bc:	mov	r6, r1
   2e0c0:	cmp	r1, #3
   2e0c4:	str	r0, [sp, #16]
   2e0c8:	bcs	2e0e0 <__assert_fail@plt+0x1c434>
   2e0cc:	mov	r0, #1
   2e0d0:	str	r0, [r2]
   2e0d4:	sub	r0, r6, #1
   2e0d8:	sub	sp, fp, #28
   2e0dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e0e0:	str	r2, [sp]
   2e0e4:	bl	11a84 <__ctype_b_loc@plt>
   2e0e8:	ldr	r2, [r0]
   2e0ec:	mov	r0, #0
   2e0f0:	mvn	r4, #0
   2e0f4:	mov	r7, #1
   2e0f8:	mov	r5, #1
   2e0fc:	mov	r1, #1
   2e100:	str	r6, [sp, #12]
   2e104:	str	r2, [sp, #4]
   2e108:	b	2e12c <__assert_fail@plt+0x1c480>
   2e10c:	mov	r4, r9
   2e110:	sub	r1, r7, r9
   2e114:	mov	r5, #1
   2e118:	mov	r0, r7
   2e11c:	ldr	r6, [sp, #12]
   2e120:	add	r7, r0, r5
   2e124:	cmp	r7, r6
   2e128:	bcs	2e1dc <__assert_fail@plt+0x1c530>
   2e12c:	mov	r6, r0
   2e130:	ldr	r0, [sp, #16]
   2e134:	str	r1, [sp, #8]
   2e138:	ldrb	r8, [r0, r7]
   2e13c:	add	r0, r2, r8, lsl #1
   2e140:	ldrb	r0, [r0, #1]
   2e144:	tst	r0, #1
   2e148:	beq	2e15c <__assert_fail@plt+0x1c4b0>
   2e14c:	bl	11a54 <__ctype_tolower_loc@plt>
   2e150:	ldr	r0, [r0]
   2e154:	ldr	r2, [sp, #4]
   2e158:	ldrb	r8, [r0, r8, lsl #2]
   2e15c:	ldr	r1, [sp, #16]
   2e160:	add	r0, r4, r5
   2e164:	mov	r9, r4
   2e168:	ldrb	sl, [r1, r0]
   2e16c:	add	r0, r2, sl, lsl #1
   2e170:	ldrb	r0, [r0, #1]
   2e174:	tst	r0, #1
   2e178:	beq	2e18c <__assert_fail@plt+0x1c4e0>
   2e17c:	bl	11a54 <__ctype_tolower_loc@plt>
   2e180:	ldr	r0, [r0]
   2e184:	ldr	r2, [sp, #4]
   2e188:	ldrb	sl, [r0, sl, lsl #2]
   2e18c:	cmp	r8, sl
   2e190:	bcc	2e10c <__assert_fail@plt+0x1c460>
   2e194:	bne	2e1b4 <__assert_fail@plt+0x1c508>
   2e198:	ldr	r1, [sp, #8]
   2e19c:	cmp	r5, r1
   2e1a0:	bne	2e1c8 <__assert_fail@plt+0x1c51c>
   2e1a4:	add	r0, r6, r5
   2e1a8:	mov	r1, r5
   2e1ac:	mov	r5, #1
   2e1b0:	b	2e1d0 <__assert_fail@plt+0x1c524>
   2e1b4:	add	r0, r6, #1
   2e1b8:	mov	r1, #1
   2e1bc:	mov	r5, #1
   2e1c0:	mov	r4, r6
   2e1c4:	b	2e11c <__assert_fail@plt+0x1c470>
   2e1c8:	add	r5, r5, #1
   2e1cc:	mov	r0, r6
   2e1d0:	ldr	r6, [sp, #12]
   2e1d4:	mov	r4, r9
   2e1d8:	b	2e120 <__assert_fail@plt+0x1c474>
   2e1dc:	ldr	r0, [sp]
   2e1e0:	cmp	r6, #2
   2e1e4:	str	r4, [sp, #4]
   2e1e8:	str	r1, [r0]
   2e1ec:	bcc	2e2e0 <__assert_fail@plt+0x1c634>
   2e1f0:	bl	11a84 <__ctype_b_loc@plt>
   2e1f4:	ldr	r3, [r0]
   2e1f8:	mov	r0, #0
   2e1fc:	mvn	r5, #0
   2e200:	mov	r7, #1
   2e204:	mov	sl, #1
   2e208:	mov	r9, #1
   2e20c:	str	r3, [sp, #8]
   2e210:	b	2e234 <__assert_fail@plt+0x1c588>
   2e214:	mov	r5, r8
   2e218:	sub	r9, r7, r8
   2e21c:	mov	sl, #1
   2e220:	mov	r0, r7
   2e224:	ldr	r1, [sp, #12]
   2e228:	add	r7, r0, sl
   2e22c:	cmp	r7, r1
   2e230:	bcs	2e2e8 <__assert_fail@plt+0x1c63c>
   2e234:	mov	r4, r0
   2e238:	ldr	r0, [sp, #16]
   2e23c:	ldrb	r6, [r0, r7]
   2e240:	add	r0, r3, r6, lsl #1
   2e244:	ldrb	r0, [r0, #1]
   2e248:	tst	r0, #1
   2e24c:	beq	2e260 <__assert_fail@plt+0x1c5b4>
   2e250:	bl	11a54 <__ctype_tolower_loc@plt>
   2e254:	ldr	r0, [r0]
   2e258:	ldr	r3, [sp, #8]
   2e25c:	ldrb	r6, [r0, r6, lsl #2]
   2e260:	ldr	r1, [sp, #16]
   2e264:	add	r0, r5, sl
   2e268:	mov	r8, r5
   2e26c:	ldrb	r5, [r1, r0]
   2e270:	add	r0, r3, r5, lsl #1
   2e274:	ldrb	r0, [r0, #1]
   2e278:	tst	r0, #1
   2e27c:	beq	2e290 <__assert_fail@plt+0x1c5e4>
   2e280:	bl	11a54 <__ctype_tolower_loc@plt>
   2e284:	ldr	r0, [r0]
   2e288:	ldr	r3, [sp, #8]
   2e28c:	ldrb	r5, [r0, r5, lsl #2]
   2e290:	cmp	r5, r6
   2e294:	bcc	2e214 <__assert_fail@plt+0x1c568>
   2e298:	cmp	r6, r5
   2e29c:	bne	2e2b8 <__assert_fail@plt+0x1c60c>
   2e2a0:	cmp	sl, r9
   2e2a4:	bne	2e2cc <__assert_fail@plt+0x1c620>
   2e2a8:	add	r0, r4, sl
   2e2ac:	mov	r9, sl
   2e2b0:	mov	sl, #1
   2e2b4:	b	2e2d4 <__assert_fail@plt+0x1c628>
   2e2b8:	add	r0, r4, #1
   2e2bc:	mov	r9, #1
   2e2c0:	mov	sl, #1
   2e2c4:	mov	r5, r4
   2e2c8:	b	2e224 <__assert_fail@plt+0x1c578>
   2e2cc:	add	sl, sl, #1
   2e2d0:	mov	r0, r4
   2e2d4:	ldr	r1, [sp, #12]
   2e2d8:	mov	r5, r8
   2e2dc:	b	2e228 <__assert_fail@plt+0x1c57c>
   2e2e0:	mvn	r5, #0
   2e2e4:	mov	r9, #1
   2e2e8:	ldr	r0, [sp, #4]
   2e2ec:	add	r1, r5, #1
   2e2f0:	add	r0, r0, #1
   2e2f4:	cmp	r1, r0
   2e2f8:	bcc	2e308 <__assert_fail@plt+0x1c65c>
   2e2fc:	ldr	r0, [sp]
   2e300:	str	r9, [r0]
   2e304:	mov	r0, r1
   2e308:	sub	sp, fp, #28
   2e30c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e310:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e314:	add	fp, sp, #28
   2e318:	sub	sp, sp, #44	; 0x2c
   2e31c:	sub	sp, sp, #1024	; 0x400
   2e320:	mov	r6, r1
   2e324:	ldrb	r1, [r0]
   2e328:	mov	r5, r0
   2e32c:	cmp	r1, #0
   2e330:	beq	2e400 <__assert_fail@plt+0x1c754>
   2e334:	add	r0, sp, #40	; 0x28
   2e338:	mov	r2, #0
   2e33c:	add	r8, r0, #16
   2e340:	mov	r0, #1
   2e344:	ldrb	r3, [r6, r2]
   2e348:	cmp	r3, #0
   2e34c:	uxtbne	r1, r1
   2e350:	subne	r1, r1, r3
   2e354:	clzne	r1, r1
   2e358:	lsrne	r1, r1, #5
   2e35c:	andne	r0, r0, r1
   2e360:	addne	r1, r5, r2
   2e364:	addne	r2, r2, #1
   2e368:	ldrbne	r1, [r1, #1]
   2e36c:	cmpne	r1, #0
   2e370:	bne	2e344 <__assert_fail@plt+0x1c698>
   2e374:	add	r2, r6, r2
   2e378:	mov	r4, r5
   2e37c:	ldrb	r1, [r2]
   2e380:	cmp	r1, #0
   2e384:	movwne	r4, #0
   2e388:	tst	r0, #1
   2e38c:	cmpeq	r1, #0
   2e390:	bne	2e410 <__assert_fail@plt+0x1c764>
   2e394:	ldrb	r1, [r6]
   2e398:	add	r0, r5, #1
   2e39c:	str	r2, [sp, #28]
   2e3a0:	sub	r4, r2, r6
   2e3a4:	bl	11acc <strchr@plt>
   2e3a8:	cmp	r4, #1
   2e3ac:	str	r4, [sp, #32]
   2e3b0:	beq	2e41c <__assert_fail@plt+0x1c770>
   2e3b4:	ldr	r3, [sp, #28]
   2e3b8:	cmp	r0, #0
   2e3bc:	mov	r4, r0
   2e3c0:	beq	2e410 <__assert_fail@plt+0x1c764>
   2e3c4:	ldr	r1, [sp, #32]
   2e3c8:	str	r0, [sp, #36]	; 0x24
   2e3cc:	add	r2, r5, r1
   2e3d0:	mov	r5, r1
   2e3d4:	subs	r1, r2, r0
   2e3d8:	sub	sl, r3, r5
   2e3dc:	movwcc	r1, #1
   2e3e0:	cmp	r5, #31
   2e3e4:	bhi	2e424 <__assert_fail@plt+0x1c778>
   2e3e8:	mov	r8, r1
   2e3ec:	cmp	r5, #3
   2e3f0:	bcs	2e520 <__assert_fail@plt+0x1c874>
   2e3f4:	sub	r7, r5, #1
   2e3f8:	mov	r9, #1
   2e3fc:	b	2eba8 <__assert_fail@plt+0x1cefc>
   2e400:	ldrb	r0, [r6]
   2e404:	cmp	r0, #0
   2e408:	movne	r5, #0
   2e40c:	mov	r4, r5
   2e410:	mov	r0, r4
   2e414:	sub	sp, fp, #28
   2e418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e41c:	mov	r4, r0
   2e420:	b	2e410 <__assert_fail@plt+0x1c764>
   2e424:	rsb	r0, r5, #0
   2e428:	str	r1, [sp, #16]
   2e42c:	mov	r2, #0
   2e430:	mov	r1, #1
   2e434:	mov	ip, #1
   2e438:	mov	r3, #1
   2e43c:	str	r0, [sp, #12]
   2e440:	mvn	r0, #0
   2e444:	b	2e460 <__assert_fail@plt+0x1c7b4>
   2e448:	sub	ip, r1, r0
   2e44c:	mov	r3, #1
   2e450:	mov	r2, r1
   2e454:	add	r1, r3, r2
   2e458:	cmp	r1, r5
   2e45c:	bcs	2e4a0 <__assert_fail@plt+0x1c7f4>
   2e460:	add	r4, r0, r3
   2e464:	ldrb	r7, [sl, r1]
   2e468:	ldrb	r4, [sl, r4]
   2e46c:	cmp	r7, r4
   2e470:	bcc	2e448 <__assert_fail@plt+0x1c79c>
   2e474:	bne	2e48c <__assert_fail@plt+0x1c7e0>
   2e478:	cmp	r3, ip
   2e47c:	addne	r3, r3, #1
   2e480:	addeq	r2, r2, ip
   2e484:	moveq	r3, #1
   2e488:	b	2e454 <__assert_fail@plt+0x1c7a8>
   2e48c:	add	r1, r2, #1
   2e490:	mov	r0, r2
   2e494:	mov	r3, #1
   2e498:	mov	ip, #1
   2e49c:	b	2e450 <__assert_fail@plt+0x1c7a4>
   2e4a0:	cmp	r5, #2
   2e4a4:	bcc	2e590 <__assert_fail@plt+0x1c8e4>
   2e4a8:	mvn	lr, #0
   2e4ac:	mov	r2, #0
   2e4b0:	mov	r3, #1
   2e4b4:	mov	r9, #1
   2e4b8:	mov	r4, #1
   2e4bc:	b	2e4d8 <__assert_fail@plt+0x1c82c>
   2e4c0:	sub	r9, r3, lr
   2e4c4:	mov	r4, #1
   2e4c8:	mov	r2, r3
   2e4cc:	add	r3, r4, r2
   2e4d0:	cmp	r3, r5
   2e4d4:	bcs	2e598 <__assert_fail@plt+0x1c8ec>
   2e4d8:	add	r7, lr, r4
   2e4dc:	ldrb	r1, [sl, r3]
   2e4e0:	ldrb	r7, [sl, r7]
   2e4e4:	cmp	r7, r1
   2e4e8:	bcc	2e4c0 <__assert_fail@plt+0x1c814>
   2e4ec:	cmp	r1, r7
   2e4f0:	bne	2e508 <__assert_fail@plt+0x1c85c>
   2e4f4:	cmp	r4, r9
   2e4f8:	addne	r4, r4, #1
   2e4fc:	addeq	r2, r2, r9
   2e500:	moveq	r4, #1
   2e504:	b	2e4cc <__assert_fail@plt+0x1c820>
   2e508:	add	r1, r2, #1
   2e50c:	mov	lr, r2
   2e510:	mov	r4, #1
   2e514:	mov	r9, #1
   2e518:	mov	r2, r1
   2e51c:	b	2e4cc <__assert_fail@plt+0x1c820>
   2e520:	mvn	r1, #0
   2e524:	mov	r0, #0
   2e528:	mov	r2, #1
   2e52c:	mov	ip, #1
   2e530:	mov	r3, #1
   2e534:	b	2e550 <__assert_fail@plt+0x1c8a4>
   2e538:	sub	ip, r2, r1
   2e53c:	mov	r3, #1
   2e540:	mov	r0, r2
   2e544:	add	r2, r3, r0
   2e548:	cmp	r2, r5
   2e54c:	bcs	2e99c <__assert_fail@plt+0x1ccf0>
   2e550:	add	r4, r1, r3
   2e554:	ldrb	r7, [sl, r2]
   2e558:	ldrb	r4, [sl, r4]
   2e55c:	cmp	r7, r4
   2e560:	bcc	2e538 <__assert_fail@plt+0x1c88c>
   2e564:	bne	2e57c <__assert_fail@plt+0x1c8d0>
   2e568:	cmp	r3, ip
   2e56c:	addne	r3, r3, #1
   2e570:	addeq	r0, r0, ip
   2e574:	moveq	r3, #1
   2e578:	b	2e544 <__assert_fail@plt+0x1c898>
   2e57c:	add	r2, r0, #1
   2e580:	mov	r1, r0
   2e584:	mov	r3, #1
   2e588:	mov	ip, #1
   2e58c:	b	2e540 <__assert_fail@plt+0x1c894>
   2e590:	mov	r9, #1
   2e594:	mvn	lr, #0
   2e598:	vdup.32	q8, r5
   2e59c:	add	r2, sp, #40	; 0x28
   2e5a0:	add	r1, r8, #976	; 0x3d0
   2e5a4:	vst1.32	{d16-d17}, [r2]
   2e5a8:	vst1.32	{d16-d17}, [r1]
   2e5ac:	add	r1, r8, #960	; 0x3c0
   2e5b0:	vst1.32	{d16-d17}, [r1]
   2e5b4:	add	r1, r8, #944	; 0x3b0
   2e5b8:	vst1.32	{d16-d17}, [r1]
   2e5bc:	add	r1, r8, #928	; 0x3a0
   2e5c0:	vst1.32	{d16-d17}, [r1]
   2e5c4:	add	r1, r8, #912	; 0x390
   2e5c8:	vst1.32	{d16-d17}, [r1]
   2e5cc:	add	r1, r8, #896	; 0x380
   2e5d0:	vst1.32	{d16-d17}, [r1]
   2e5d4:	add	r1, r8, #880	; 0x370
   2e5d8:	vst1.32	{d16-d17}, [r1]
   2e5dc:	add	r1, r8, #864	; 0x360
   2e5e0:	vst1.32	{d16-d17}, [r1]
   2e5e4:	add	r1, r8, #848	; 0x350
   2e5e8:	vst1.32	{d16-d17}, [r1]
   2e5ec:	add	r1, r8, #832	; 0x340
   2e5f0:	vst1.32	{d16-d17}, [r1]
   2e5f4:	add	r1, r8, #816	; 0x330
   2e5f8:	vst1.32	{d16-d17}, [r1]
   2e5fc:	add	r1, r8, #800	; 0x320
   2e600:	vst1.32	{d16-d17}, [r1]
   2e604:	add	r1, r8, #784	; 0x310
   2e608:	vst1.32	{d16-d17}, [r1]
   2e60c:	add	r1, r8, #768	; 0x300
   2e610:	vst1.32	{d16-d17}, [r1]
   2e614:	add	r1, r8, #752	; 0x2f0
   2e618:	vst1.32	{d16-d17}, [r1]
   2e61c:	add	r1, r8, #736	; 0x2e0
   2e620:	vst1.32	{d16-d17}, [r1]
   2e624:	add	r1, r8, #720	; 0x2d0
   2e628:	vst1.32	{d16-d17}, [r1]
   2e62c:	add	r1, r8, #704	; 0x2c0
   2e630:	vst1.32	{d16-d17}, [r1]
   2e634:	add	r1, r8, #688	; 0x2b0
   2e638:	vst1.32	{d16-d17}, [r1]
   2e63c:	add	r1, r8, #672	; 0x2a0
   2e640:	vst1.32	{d16-d17}, [r1]
   2e644:	add	r1, r8, #656	; 0x290
   2e648:	vst1.32	{d16-d17}, [r1]
   2e64c:	add	r1, r8, #640	; 0x280
   2e650:	vst1.32	{d16-d17}, [r1]
   2e654:	add	r1, r8, #624	; 0x270
   2e658:	vst1.32	{d16-d17}, [r1]
   2e65c:	add	r1, r8, #608	; 0x260
   2e660:	vst1.32	{d16-d17}, [r1]
   2e664:	add	r1, r8, #592	; 0x250
   2e668:	vst1.32	{d16-d17}, [r1]
   2e66c:	add	r1, r8, #576	; 0x240
   2e670:	vst1.32	{d16-d17}, [r1]
   2e674:	add	r1, r8, #560	; 0x230
   2e678:	vst1.32	{d16-d17}, [r1]
   2e67c:	add	r1, r8, #544	; 0x220
   2e680:	vst1.32	{d16-d17}, [r1]
   2e684:	add	r1, r8, #528	; 0x210
   2e688:	vst1.32	{d16-d17}, [r1]
   2e68c:	add	r1, r8, #512	; 0x200
   2e690:	vst1.32	{d16-d17}, [r1]
   2e694:	add	r1, r8, #496	; 0x1f0
   2e698:	vst1.32	{d16-d17}, [r1]
   2e69c:	add	r1, r8, #480	; 0x1e0
   2e6a0:	vst1.32	{d16-d17}, [r1]
   2e6a4:	add	r1, r8, #464	; 0x1d0
   2e6a8:	vst1.32	{d16-d17}, [r1]
   2e6ac:	add	r1, r8, #448	; 0x1c0
   2e6b0:	vst1.32	{d16-d17}, [r1]
   2e6b4:	add	r1, r8, #432	; 0x1b0
   2e6b8:	vst1.32	{d16-d17}, [r1]
   2e6bc:	add	r1, r8, #416	; 0x1a0
   2e6c0:	vst1.32	{d16-d17}, [r1]
   2e6c4:	add	r1, r8, #400	; 0x190
   2e6c8:	vst1.32	{d16-d17}, [r1]
   2e6cc:	add	r1, r8, #384	; 0x180
   2e6d0:	vst1.32	{d16-d17}, [r1]
   2e6d4:	add	r1, r8, #368	; 0x170
   2e6d8:	vst1.32	{d16-d17}, [r1]
   2e6dc:	add	r1, r8, #352	; 0x160
   2e6e0:	vst1.32	{d16-d17}, [r1]
   2e6e4:	add	r1, r8, #336	; 0x150
   2e6e8:	vst1.32	{d16-d17}, [r1]
   2e6ec:	add	r1, r8, #320	; 0x140
   2e6f0:	vst1.32	{d16-d17}, [r1]
   2e6f4:	add	r1, r8, #304	; 0x130
   2e6f8:	vst1.32	{d16-d17}, [r1]
   2e6fc:	add	r1, r8, #288	; 0x120
   2e700:	vst1.32	{d16-d17}, [r1]
   2e704:	add	r1, r8, #272	; 0x110
   2e708:	vst1.32	{d16-d17}, [r1]
   2e70c:	add	r1, r8, #256	; 0x100
   2e710:	vst1.32	{d16-d17}, [r1]
   2e714:	add	r1, r8, #240	; 0xf0
   2e718:	vst1.32	{d16-d17}, [r1]
   2e71c:	add	r1, r8, #224	; 0xe0
   2e720:	vst1.32	{d16-d17}, [r1]
   2e724:	add	r1, r8, #208	; 0xd0
   2e728:	vst1.32	{d16-d17}, [r1]
   2e72c:	add	r1, r8, #192	; 0xc0
   2e730:	vst1.32	{d16-d17}, [r1]
   2e734:	add	r1, r8, #176	; 0xb0
   2e738:	vst1.32	{d16-d17}, [r1]
   2e73c:	add	r1, r8, #160	; 0xa0
   2e740:	vst1.32	{d16-d17}, [r1]
   2e744:	add	r1, r8, #144	; 0x90
   2e748:	vst1.32	{d16-d17}, [r1]
   2e74c:	add	r1, r8, #128	; 0x80
   2e750:	vst1.32	{d16-d17}, [r1]
   2e754:	add	r1, r8, #112	; 0x70
   2e758:	vst1.32	{d16-d17}, [r1]
   2e75c:	add	r1, r8, #96	; 0x60
   2e760:	vst1.32	{d16-d17}, [r1]
   2e764:	add	r1, r8, #80	; 0x50
   2e768:	vst1.32	{d16-d17}, [r1]
   2e76c:	add	r1, r8, #64	; 0x40
   2e770:	vst1.32	{d16-d17}, [r1]
   2e774:	add	r1, r8, #48	; 0x30
   2e778:	vst1.32	{d16-d17}, [r1]
   2e77c:	add	r1, r8, #32
   2e780:	vst1.32	{d16-d17}, [r1]
   2e784:	add	r1, r8, #16
   2e788:	vst1.32	{d16-d17}, [r1]
   2e78c:	mov	r1, #992	; 0x3e0
   2e790:	vst1.32	{d16-d17}, [r8], r1
   2e794:	add	r1, r0, #1
   2e798:	vst1.32	{d16-d17}, [r8]
   2e79c:	add	r8, lr, #1
   2e7a0:	cmp	r8, r1
   2e7a4:	movcc	r9, ip
   2e7a8:	movcc	r8, r1
   2e7ac:	cmp	r5, #0
   2e7b0:	str	r9, [sp, #24]
   2e7b4:	beq	2e82c <__assert_fail@plt+0x1cb80>
   2e7b8:	ldr	r3, [sp, #28]
   2e7bc:	mov	r0, r2
   2e7c0:	mvn	r2, r6
   2e7c4:	and	ip, r5, #1
   2e7c8:	mov	r1, #0
   2e7cc:	cmn	r2, r3
   2e7d0:	beq	2e80c <__assert_fail@plt+0x1cb60>
   2e7d4:	ldr	r1, [sp, #32]
   2e7d8:	sub	r2, r1, ip
   2e7dc:	sub	r3, r1, #2
   2e7e0:	mov	r1, #0
   2e7e4:	mov	r5, sl
   2e7e8:	add	r4, r3, #1
   2e7ec:	ldrb	r7, [r5, r1]!
   2e7f0:	add	r1, r1, #2
   2e7f4:	cmp	r2, r1
   2e7f8:	str	r4, [r0, r7, lsl #2]
   2e7fc:	ldrb	r7, [r5, #1]
   2e800:	str	r3, [r0, r7, lsl #2]
   2e804:	sub	r3, r3, #2
   2e808:	bne	2e7e4 <__assert_fail@plt+0x1cb38>
   2e80c:	ldr	r5, [sp, #32]
   2e810:	ldr	r9, [sp, #24]
   2e814:	cmp	ip, #0
   2e818:	beq	2e82c <__assert_fail@plt+0x1cb80>
   2e81c:	ldrb	r2, [sl, r1]
   2e820:	mvn	r1, r1
   2e824:	add	r1, r5, r1
   2e828:	str	r1, [r0, r2, lsl #2]
   2e82c:	add	r1, sl, r9
   2e830:	mov	r0, sl
   2e834:	mov	r2, r8
   2e838:	bl	11aa8 <bcmp@plt>
   2e83c:	cmp	r0, #0
   2e840:	str	r8, [sp, #20]
   2e844:	beq	2ea1c <__assert_fail@plt+0x1cd70>
   2e848:	ldr	r1, [sp, #16]
   2e84c:	ldr	r0, [sp, #36]	; 0x24
   2e850:	mov	r4, #0
   2e854:	add	r0, r0, r1
   2e858:	sub	r2, r5, r1
   2e85c:	mov	r1, #0
   2e860:	bl	11b68 <memchr@plt>
   2e864:	sub	r1, r5, r8
   2e868:	cmp	r8, r1
   2e86c:	movcs	r1, r8
   2e870:	cmp	r5, #0
   2e874:	str	r1, [sp, #8]
   2e878:	beq	2e410 <__assert_fail@plt+0x1c764>
   2e87c:	ldr	r7, [sp, #36]	; 0x24
   2e880:	cmp	r0, #0
   2e884:	bne	2e410 <__assert_fail@plt+0x1c764>
   2e888:	ldr	r2, [sp, #20]
   2e88c:	ldr	r3, [sp, #28]
   2e890:	mov	r8, #0
   2e894:	mov	ip, r5
   2e898:	add	r0, r7, r2
   2e89c:	str	r0, [sp, #4]
   2e8a0:	ldr	r0, [sp, #12]
   2e8a4:	add	r0, r3, r0
   2e8a8:	add	r1, r0, r2
   2e8ac:	sub	r0, r6, r3
   2e8b0:	add	r0, r0, r2
   2e8b4:	str	r1, [sp, #28]
   2e8b8:	add	r6, r0, #1
   2e8bc:	rsb	r0, r2, #1
   2e8c0:	str	r0, [sp, #12]
   2e8c4:	sub	r0, r5, #1
   2e8c8:	str	r6, [sp, #24]
   2e8cc:	str	r0, [sp, #16]
   2e8d0:	add	r0, ip, r7
   2e8d4:	add	r3, sp, #40	; 0x28
   2e8d8:	ldrb	r2, [r0, #-1]
   2e8dc:	ldr	r2, [r3, r2, lsl #2]
   2e8e0:	cmp	r2, #0
   2e8e4:	beq	2e8f0 <__assert_fail@plt+0x1cc44>
   2e8e8:	add	r8, r2, r8
   2e8ec:	b	2e964 <__assert_fail@plt+0x1ccb8>
   2e8f0:	ldr	r2, [sp, #20]
   2e8f4:	ldr	r3, [sp, #16]
   2e8f8:	cmp	r2, r3
   2e8fc:	bcs	2e928 <__assert_fail@plt+0x1cc7c>
   2e900:	ldr	r2, [sp, #4]
   2e904:	add	r3, r2, r8
   2e908:	mov	r2, #0
   2e90c:	ldrb	r5, [r3, -r2]
   2e910:	ldrb	r4, [r1, -r2]
   2e914:	cmp	r4, r5
   2e918:	bne	2e954 <__assert_fail@plt+0x1cca8>
   2e91c:	sub	r2, r2, #1
   2e920:	cmp	r6, r2
   2e924:	bne	2e90c <__assert_fail@plt+0x1cc60>
   2e928:	ldr	r2, [sp, #12]
   2e92c:	add	r4, r7, r8
   2e930:	cmp	r2, #1
   2e934:	beq	2e410 <__assert_fail@plt+0x1c764>
   2e938:	ldrb	r3, [r4, -r2]
   2e93c:	ldrb	r5, [sl, -r2]
   2e940:	add	r2, r2, #1
   2e944:	cmp	r5, r3
   2e948:	beq	2e930 <__assert_fail@plt+0x1cc84>
   2e94c:	ldr	r2, [sp, #8]
   2e950:	b	2e958 <__assert_fail@plt+0x1ccac>
   2e954:	rsb	r2, r2, #0
   2e958:	ldr	r5, [sp, #32]
   2e95c:	add	r2, r8, r2
   2e960:	add	r8, r2, #1
   2e964:	add	r9, r8, r5
   2e968:	mov	r1, #0
   2e96c:	mov	r4, #0
   2e970:	sub	r2, r9, ip
   2e974:	bl	11b68 <memchr@plt>
   2e978:	cmp	r9, #0
   2e97c:	beq	2e410 <__assert_fail@plt+0x1c764>
   2e980:	ldr	r7, [sp, #36]	; 0x24
   2e984:	ldr	r1, [sp, #28]
   2e988:	ldr	r6, [sp, #24]
   2e98c:	cmp	r0, #0
   2e990:	mov	ip, r9
   2e994:	beq	2e8d0 <__assert_fail@plt+0x1cc24>
   2e998:	b	2e410 <__assert_fail@plt+0x1c764>
   2e99c:	cmp	r5, #2
   2e9a0:	bcc	2eb8c <__assert_fail@plt+0x1cee0>
   2e9a4:	mvn	lr, #0
   2e9a8:	mov	r2, #0
   2e9ac:	mov	r3, #1
   2e9b0:	mov	r9, #1
   2e9b4:	mov	r4, #1
   2e9b8:	b	2e9d4 <__assert_fail@plt+0x1cd28>
   2e9bc:	sub	r9, r3, lr
   2e9c0:	mov	r4, #1
   2e9c4:	mov	r2, r3
   2e9c8:	add	r3, r4, r2
   2e9cc:	cmp	r3, r5
   2e9d0:	bcs	2eb94 <__assert_fail@plt+0x1cee8>
   2e9d4:	add	r7, lr, r4
   2e9d8:	ldrb	r0, [sl, r3]
   2e9dc:	ldrb	r7, [sl, r7]
   2e9e0:	cmp	r7, r0
   2e9e4:	bcc	2e9bc <__assert_fail@plt+0x1cd10>
   2e9e8:	cmp	r0, r7
   2e9ec:	bne	2ea04 <__assert_fail@plt+0x1cd58>
   2e9f0:	cmp	r4, r9
   2e9f4:	addne	r4, r4, #1
   2e9f8:	addeq	r2, r2, r9
   2e9fc:	moveq	r4, #1
   2ea00:	b	2e9c8 <__assert_fail@plt+0x1cd1c>
   2ea04:	add	r0, r2, #1
   2ea08:	mov	lr, r2
   2ea0c:	mov	r4, #1
   2ea10:	mov	r9, #1
   2ea14:	mov	r2, r0
   2ea18:	b	2e9c8 <__assert_fail@plt+0x1cd1c>
   2ea1c:	ldr	r1, [sp, #16]
   2ea20:	ldr	r0, [sp, #36]	; 0x24
   2ea24:	mov	r4, #0
   2ea28:	add	r0, r0, r1
   2ea2c:	sub	r2, r5, r1
   2ea30:	mov	r1, #0
   2ea34:	bl	11b68 <memchr@plt>
   2ea38:	cmp	r5, #0
   2ea3c:	beq	2e410 <__assert_fail@plt+0x1c764>
   2ea40:	ldr	r8, [sp, #36]	; 0x24
   2ea44:	cmp	r0, #0
   2ea48:	bne	2e410 <__assert_fail@plt+0x1c764>
   2ea4c:	ldr	r0, [sp, #24]
   2ea50:	sub	lr, r5, #1
   2ea54:	mov	r9, #0
   2ea58:	mov	ip, r5
   2ea5c:	sub	r0, r5, r0
   2ea60:	str	r0, [sp, #28]
   2ea64:	ldr	r0, [sp, #20]
   2ea68:	sub	r1, r0, #1
   2ea6c:	rsb	r0, r0, #1
   2ea70:	str	r1, [sp, #16]
   2ea74:	mov	r1, #0
   2ea78:	str	r0, [sp, #12]
   2ea7c:	add	r0, ip, r8
   2ea80:	add	r3, sp, #40	; 0x28
   2ea84:	ldrb	r2, [r0, #-1]
   2ea88:	ldr	r3, [r3, r2, lsl #2]
   2ea8c:	cmp	r3, #0
   2ea90:	beq	2eab8 <__assert_fail@plt+0x1ce0c>
   2ea94:	ldr	r2, [sp, #24]
   2ea98:	ldr	r7, [sp, #28]
   2ea9c:	cmp	r3, r2
   2eaa0:	mov	r2, r3
   2eaa4:	movcc	r2, r7
   2eaa8:	cmp	r9, #0
   2eaac:	mov	r9, #0
   2eab0:	moveq	r2, r3
   2eab4:	b	2eb40 <__assert_fail@plt+0x1ce94>
   2eab8:	ldr	r2, [sp, #20]
   2eabc:	cmp	r2, r9
   2eac0:	movcc	r2, r9
   2eac4:	cmp	r2, lr
   2eac8:	bcs	2eaec <__assert_fail@plt+0x1ce40>
   2eacc:	add	r3, r8, r1
   2ead0:	ldrb	r5, [r3, r2]
   2ead4:	ldrb	r4, [sl, r2]
   2ead8:	cmp	r4, r5
   2eadc:	bne	2eb30 <__assert_fail@plt+0x1ce84>
   2eae0:	add	r2, r2, #1
   2eae4:	cmp	r2, lr
   2eae8:	bcc	2ead0 <__assert_fail@plt+0x1ce24>
   2eaec:	ldr	r2, [sp, #16]
   2eaf0:	add	r4, r8, r1
   2eaf4:	add	r3, r2, #1
   2eaf8:	cmp	r9, r3
   2eafc:	bcs	2eb14 <__assert_fail@plt+0x1ce68>
   2eb00:	ldrb	r5, [r4, r2]
   2eb04:	ldrb	r7, [sl, r2]
   2eb08:	sub	r2, r2, #1
   2eb0c:	cmp	r7, r5
   2eb10:	beq	2eaf4 <__assert_fail@plt+0x1ce48>
   2eb14:	add	r2, r9, #1
   2eb18:	ldr	r9, [sp, #28]
   2eb1c:	ldr	r5, [sp, #32]
   2eb20:	cmp	r3, r2
   2eb24:	ldr	r2, [sp, #24]
   2eb28:	bcs	2eb40 <__assert_fail@plt+0x1ce94>
   2eb2c:	b	2e410 <__assert_fail@plt+0x1c764>
   2eb30:	ldr	r3, [sp, #12]
   2eb34:	ldr	r5, [sp, #32]
   2eb38:	mov	r9, #0
   2eb3c:	add	r2, r3, r2
   2eb40:	add	r1, r2, r1
   2eb44:	mov	r6, sl
   2eb48:	mov	sl, lr
   2eb4c:	mov	r4, #0
   2eb50:	add	r8, r1, r5
   2eb54:	mov	r7, r1
   2eb58:	mov	r1, #0
   2eb5c:	sub	r2, r8, ip
   2eb60:	bl	11b68 <memchr@plt>
   2eb64:	cmp	r8, #0
   2eb68:	beq	2e410 <__assert_fail@plt+0x1c764>
   2eb6c:	mov	ip, r8
   2eb70:	ldr	r8, [sp, #36]	; 0x24
   2eb74:	mov	lr, sl
   2eb78:	cmp	r0, #0
   2eb7c:	mov	sl, r6
   2eb80:	mov	r1, r7
   2eb84:	beq	2ea7c <__assert_fail@plt+0x1cdd0>
   2eb88:	b	2e410 <__assert_fail@plt+0x1c764>
   2eb8c:	mov	r9, #1
   2eb90:	mvn	lr, #0
   2eb94:	add	r0, r1, #1
   2eb98:	add	r7, lr, #1
   2eb9c:	cmp	r7, r0
   2eba0:	movcc	r9, ip
   2eba4:	movcc	r7, r0
   2eba8:	add	r1, sl, r9
   2ebac:	mov	r0, sl
   2ebb0:	mov	r2, r7
   2ebb4:	bl	11aa8 <bcmp@plt>
   2ebb8:	cmp	r0, #0
   2ebbc:	beq	2ecc4 <__assert_fail@plt+0x1d018>
   2ebc0:	ldr	r0, [sp, #36]	; 0x24
   2ebc4:	sub	r2, r5, r8
   2ebc8:	mov	r1, #0
   2ebcc:	mov	r4, #0
   2ebd0:	add	r0, r0, r8
   2ebd4:	bl	11b68 <memchr@plt>
   2ebd8:	sub	r1, r5, r7
   2ebdc:	cmp	r7, r1
   2ebe0:	movcs	r1, r7
   2ebe4:	cmp	r5, #0
   2ebe8:	str	r1, [sp, #24]
   2ebec:	beq	2e410 <__assert_fail@plt+0x1c764>
   2ebf0:	cmp	r0, #0
   2ebf4:	ldr	r5, [sp, #36]	; 0x24
   2ebf8:	ldr	r0, [sp, #28]
   2ebfc:	bne	2e410 <__assert_fail@plt+0x1c764>
   2ec00:	add	r1, r5, r7
   2ec04:	sub	r0, r0, r7
   2ec08:	add	r9, r7, r6
   2ec0c:	mov	r8, #0
   2ec10:	str	r7, [sp, #12]
   2ec14:	str	r1, [sp, #20]
   2ec18:	ldr	r1, [sp, #32]
   2ec1c:	sub	r6, r0, r6
   2ec20:	rsb	r0, r7, #1
   2ec24:	str	r0, [sp, #28]
   2ec28:	ldr	ip, [sp, #32]
   2ec2c:	cmp	ip, r7
   2ec30:	bls	2ec5c <__assert_fail@plt+0x1cfb0>
   2ec34:	ldr	r0, [sp, #20]
   2ec38:	mov	r2, #0
   2ec3c:	add	r0, r0, r8
   2ec40:	ldrb	r3, [r0, r2]
   2ec44:	ldrb	r7, [r9, r2]
   2ec48:	cmp	r7, r3
   2ec4c:	bne	2ec84 <__assert_fail@plt+0x1cfd8>
   2ec50:	add	r2, r2, #1
   2ec54:	cmp	r6, r2
   2ec58:	bne	2ec40 <__assert_fail@plt+0x1cf94>
   2ec5c:	ldr	r0, [sp, #28]
   2ec60:	add	r4, r5, r8
   2ec64:	cmp	r0, #1
   2ec68:	beq	2e410 <__assert_fail@plt+0x1c764>
   2ec6c:	ldrb	r2, [r4, -r0]
   2ec70:	ldrb	r3, [sl, -r0]
   2ec74:	add	r0, r0, #1
   2ec78:	cmp	r3, r2
   2ec7c:	beq	2ec64 <__assert_fail@plt+0x1cfb8>
   2ec80:	ldr	r2, [sp, #24]
   2ec84:	add	r2, r8, r2
   2ec88:	add	r0, r5, r1
   2ec8c:	mov	r4, #0
   2ec90:	add	r8, r2, #1
   2ec94:	add	r7, r8, ip
   2ec98:	sub	r2, r7, r1
   2ec9c:	mov	r1, #0
   2eca0:	bl	11b68 <memchr@plt>
   2eca4:	cmp	r0, #0
   2eca8:	bne	2e410 <__assert_fail@plt+0x1c764>
   2ecac:	cmp	r7, #0
   2ecb0:	mov	r1, r7
   2ecb4:	ldr	r5, [sp, #36]	; 0x24
   2ecb8:	ldr	r7, [sp, #12]
   2ecbc:	bne	2ec28 <__assert_fail@plt+0x1cf7c>
   2ecc0:	b	2e410 <__assert_fail@plt+0x1c764>
   2ecc4:	ldr	r0, [sp, #36]	; 0x24
   2ecc8:	sub	r2, r5, r8
   2eccc:	mov	r1, #0
   2ecd0:	mov	r4, #0
   2ecd4:	add	r0, r0, r8
   2ecd8:	bl	11b68 <memchr@plt>
   2ecdc:	cmp	r5, #0
   2ece0:	beq	2e410 <__assert_fail@plt+0x1c764>
   2ece4:	ldr	ip, [sp, #36]	; 0x24
   2ece8:	cmp	r0, #0
   2ecec:	str	r9, [sp, #28]
   2ecf0:	bne	2e410 <__assert_fail@plt+0x1c764>
   2ecf4:	ldr	r1, [sp, #32]
   2ecf8:	ldr	r0, [sp, #28]
   2ecfc:	ldr	r5, [sp, #32]
   2ed00:	mov	r6, #0
   2ed04:	mov	r8, #0
   2ed08:	sub	r0, r1, r0
   2ed0c:	str	r0, [sp, #24]
   2ed10:	sub	r0, r7, #1
   2ed14:	str	r0, [sp, #20]
   2ed18:	rsb	r0, r7, #1
   2ed1c:	str	r0, [sp, #16]
   2ed20:	cmp	r7, r6
   2ed24:	mov	r0, r7
   2ed28:	mov	r9, r7
   2ed2c:	movcc	r0, r6
   2ed30:	cmp	r0, r5
   2ed34:	bcs	2ed58 <__assert_fail@plt+0x1d0ac>
   2ed38:	add	r2, ip, r8
   2ed3c:	ldrb	r3, [r2, r0]
   2ed40:	ldrb	r7, [sl, r0]
   2ed44:	cmp	r7, r3
   2ed48:	bne	2ed98 <__assert_fail@plt+0x1d0ec>
   2ed4c:	add	r0, r0, #1
   2ed50:	cmp	r0, r5
   2ed54:	bcc	2ed3c <__assert_fail@plt+0x1d090>
   2ed58:	ldr	r0, [sp, #20]
   2ed5c:	add	r4, ip, r8
   2ed60:	add	r2, r0, #1
   2ed64:	cmp	r6, r2
   2ed68:	bcs	2ed80 <__assert_fail@plt+0x1d0d4>
   2ed6c:	ldrb	r3, [r4, r0]
   2ed70:	ldrb	r7, [sl, r0]
   2ed74:	sub	r0, r0, #1
   2ed78:	cmp	r7, r3
   2ed7c:	beq	2ed60 <__assert_fail@plt+0x1d0b4>
   2ed80:	add	r0, r6, #1
   2ed84:	ldr	r6, [sp, #24]
   2ed88:	cmp	r2, r0
   2ed8c:	ldr	r2, [sp, #28]
   2ed90:	bcs	2eda4 <__assert_fail@plt+0x1d0f8>
   2ed94:	b	2e410 <__assert_fail@plt+0x1c764>
   2ed98:	ldr	r2, [sp, #16]
   2ed9c:	mov	r6, #0
   2eda0:	add	r2, r2, r0
   2eda4:	add	r8, r2, r8
   2eda8:	add	r0, ip, r1
   2edac:	mov	r4, #0
   2edb0:	add	r7, r8, r5
   2edb4:	sub	r2, r7, r1
   2edb8:	mov	r1, #0
   2edbc:	bl	11b68 <memchr@plt>
   2edc0:	cmp	r7, #0
   2edc4:	beq	2e410 <__assert_fail@plt+0x1c764>
   2edc8:	ldr	ip, [sp, #36]	; 0x24
   2edcc:	mov	r1, r7
   2edd0:	cmp	r0, #0
   2edd4:	mov	r7, r9
   2edd8:	beq	2ed20 <__assert_fail@plt+0x1d074>
   2eddc:	b	2e410 <__assert_fail@plt+0x1c764>
   2ede0:	push	{fp, lr}
   2ede4:	mov	fp, sp
   2ede8:	movw	r0, #8624	; 0x21b0
   2edec:	movt	r0, #4
   2edf0:	ldr	r0, [r0]
   2edf4:	bl	11a90 <exit@plt>
   2edf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2edfc:	add	fp, sp, #28
   2ee00:	sub	sp, sp, #12
   2ee04:	mov	r4, r3
   2ee08:	mov	r6, r2
   2ee0c:	mov	r5, r1
   2ee10:	mov	sl, r0
   2ee14:	bl	11ac0 <strlen@plt>
   2ee18:	ldr	r8, [r5]
   2ee1c:	cmp	r8, #0
   2ee20:	beq	2eee0 <__assert_fail@plt+0x1d234>
   2ee24:	mov	r7, r0
   2ee28:	mov	r0, #0
   2ee2c:	add	r9, r5, #4
   2ee30:	mov	r5, #0
   2ee34:	str	r6, [sp, #4]
   2ee38:	str	r0, [sp]
   2ee3c:	mvn	r0, #0
   2ee40:	str	r0, [sp, #8]
   2ee44:	b	2ee60 <__assert_fail@plt+0x1d1b4>
   2ee48:	str	r5, [sp, #8]
   2ee4c:	ldr	r8, [r9, r5, lsl #2]
   2ee50:	add	r6, r6, r4
   2ee54:	add	r5, r5, #1
   2ee58:	cmp	r8, #0
   2ee5c:	beq	2eec8 <__assert_fail@plt+0x1d21c>
   2ee60:	mov	r0, r8
   2ee64:	mov	r1, sl
   2ee68:	mov	r2, r7
   2ee6c:	bl	11c64 <strncmp@plt>
   2ee70:	cmp	r0, #0
   2ee74:	bne	2ee4c <__assert_fail@plt+0x1d1a0>
   2ee78:	mov	r0, r8
   2ee7c:	bl	11ac0 <strlen@plt>
   2ee80:	cmp	r0, r7
   2ee84:	beq	2eee4 <__assert_fail@plt+0x1d238>
   2ee88:	ldr	r0, [sp, #8]
   2ee8c:	cmn	r0, #1
   2ee90:	beq	2ee48 <__assert_fail@plt+0x1d19c>
   2ee94:	ldr	r0, [sp, #4]
   2ee98:	cmp	r0, #0
   2ee9c:	beq	2eebc <__assert_fail@plt+0x1d210>
   2eea0:	ldr	r1, [sp, #8]
   2eea4:	mov	r2, r4
   2eea8:	mla	r0, r1, r4, r0
   2eeac:	mov	r1, r6
   2eeb0:	bl	11aa8 <bcmp@plt>
   2eeb4:	cmp	r0, #0
   2eeb8:	beq	2ee4c <__assert_fail@plt+0x1d1a0>
   2eebc:	mov	r0, #1
   2eec0:	str	r0, [sp]
   2eec4:	b	2ee4c <__assert_fail@plt+0x1d1a0>
   2eec8:	ldr	r0, [sp]
   2eecc:	tst	r0, #1
   2eed0:	ldr	r0, [sp, #8]
   2eed4:	mvnne	r0, #1
   2eed8:	sub	sp, fp, #28
   2eedc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eee0:	mvn	r5, #0
   2eee4:	mov	r0, r5
   2eee8:	sub	sp, fp, #28
   2eeec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eef0:	push	{r4, r5, r6, sl, fp, lr}
   2eef4:	add	fp, sp, #16
   2eef8:	sub	sp, sp, #8
   2eefc:	mov	r5, r0
   2ef00:	movw	r0, #5661	; 0x161d
   2ef04:	mov	r4, r1
   2ef08:	movw	r1, #5688	; 0x1638
   2ef0c:	cmn	r2, #1
   2ef10:	mov	r2, #5
   2ef14:	movt	r0, #3
   2ef18:	movt	r1, #3
   2ef1c:	moveq	r1, r0
   2ef20:	mov	r0, #0
   2ef24:	bl	11934 <dcgettext@plt>
   2ef28:	mov	r6, r0
   2ef2c:	mov	r0, #0
   2ef30:	mov	r1, #8
   2ef34:	mov	r2, r4
   2ef38:	bl	19160 <__assert_fail@plt+0x74b4>
   2ef3c:	mov	r4, r0
   2ef40:	mov	r0, #1
   2ef44:	mov	r1, r5
   2ef48:	bl	19720 <__assert_fail@plt+0x7a74>
   2ef4c:	str	r0, [sp]
   2ef50:	mov	r0, #0
   2ef54:	mov	r1, #0
   2ef58:	mov	r2, r6
   2ef5c:	mov	r3, r4
   2ef60:	bl	119dc <error@plt>
   2ef64:	sub	sp, fp, #16
   2ef68:	pop	{r4, r5, r6, sl, fp, pc}
   2ef6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ef70:	add	fp, sp, #28
   2ef74:	sub	sp, sp, #4
   2ef78:	mov	sl, r1
   2ef7c:	movw	r1, #5717	; 0x1655
   2ef80:	mov	r4, r2
   2ef84:	mov	r7, r0
   2ef88:	mov	r0, #0
   2ef8c:	mov	r2, #5
   2ef90:	mov	r8, #0
   2ef94:	movt	r1, #3
   2ef98:	bl	11934 <dcgettext@plt>
   2ef9c:	movw	r1, #8720	; 0x2210
   2efa0:	movt	r1, #4
   2efa4:	ldr	r1, [r1]
   2efa8:	bl	11c58 <fputs@plt>
   2efac:	ldr	r6, [r7]
   2efb0:	cmp	r6, #0
   2efb4:	bne	2efd4 <__assert_fail@plt+0x1d328>
   2efb8:	movw	r0, #8720	; 0x2210
   2efbc:	movt	r0, #4
   2efc0:	ldr	r1, [r0]
   2efc4:	mov	r0, #10
   2efc8:	sub	sp, fp, #28
   2efcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2efd0:	b	11c04 <putc@plt>
   2efd4:	add	r0, r7, #4
   2efd8:	mov	r9, #0
   2efdc:	mov	r7, #0
   2efe0:	str	r0, [sp]
   2efe4:	b	2f02c <__assert_fail@plt+0x1d380>
   2efe8:	movw	r0, #8720	; 0x2210
   2efec:	movt	r0, #4
   2eff0:	ldr	r7, [r0]
   2eff4:	mov	r0, r6
   2eff8:	bl	19730 <__assert_fail@plt+0x7a84>
   2effc:	movw	r1, #5738	; 0x166a
   2f000:	mov	r2, r0
   2f004:	mov	r0, r7
   2f008:	movt	r1, #3
   2f00c:	bl	11ad8 <fprintf@plt>
   2f010:	add	r7, sl, r5
   2f014:	ldr	r0, [sp]
   2f018:	add	r8, r8, r4
   2f01c:	ldr	r6, [r0, -r9, lsl #2]
   2f020:	sub	r9, r9, #1
   2f024:	cmp	r6, #0
   2f028:	beq	2efb8 <__assert_fail@plt+0x1d30c>
   2f02c:	mov	r5, #0
   2f030:	cmp	r9, #0
   2f034:	beq	2efe8 <__assert_fail@plt+0x1d33c>
   2f038:	add	r1, sl, r8
   2f03c:	mov	r0, r7
   2f040:	mov	r2, r4
   2f044:	bl	11aa8 <bcmp@plt>
   2f048:	cmp	r0, #0
   2f04c:	mov	r5, r8
   2f050:	bne	2efe8 <__assert_fail@plt+0x1d33c>
   2f054:	movw	r0, #8720	; 0x2210
   2f058:	movt	r0, #4
   2f05c:	ldr	r5, [r0]
   2f060:	mov	r0, r6
   2f064:	bl	19730 <__assert_fail@plt+0x7a84>
   2f068:	movw	r1, #5746	; 0x1672
   2f06c:	mov	r2, r0
   2f070:	mov	r0, r5
   2f074:	movt	r1, #3
   2f078:	bl	11ad8 <fprintf@plt>
   2f07c:	b	2f014 <__assert_fail@plt+0x1d368>
   2f080:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f084:	add	fp, sp, #28
   2f088:	sub	sp, sp, #20
   2f08c:	mov	r9, r0
   2f090:	mov	r0, r1
   2f094:	mov	r4, r3
   2f098:	mov	r5, r2
   2f09c:	mov	r7, r1
   2f0a0:	bl	11ac0 <strlen@plt>
   2f0a4:	ldr	sl, [r5]
   2f0a8:	str	r4, [sp, #16]
   2f0ac:	cmp	sl, #0
   2f0b0:	beq	2f188 <__assert_fail@plt+0x1d4dc>
   2f0b4:	mov	r8, r0
   2f0b8:	str	r9, [sp, #4]
   2f0bc:	mov	r0, #0
   2f0c0:	str	r5, [sp, #8]
   2f0c4:	add	r9, r5, #4
   2f0c8:	mvn	r6, #0
   2f0cc:	mov	r5, #0
   2f0d0:	str	r0, [sp, #12]
   2f0d4:	b	2f0f4 <__assert_fail@plt+0x1d448>
   2f0d8:	mov	r6, r5
   2f0dc:	ldr	sl, [r9, r5, lsl #2]
   2f0e0:	ldr	r0, [fp, #8]
   2f0e4:	add	r5, r5, #1
   2f0e8:	add	r4, r4, r0
   2f0ec:	cmp	sl, #0
   2f0f0:	beq	2f154 <__assert_fail@plt+0x1d4a8>
   2f0f4:	mov	r0, sl
   2f0f8:	mov	r1, r7
   2f0fc:	mov	r2, r8
   2f100:	bl	11c64 <strncmp@plt>
   2f104:	cmp	r0, #0
   2f108:	bne	2f0dc <__assert_fail@plt+0x1d430>
   2f10c:	mov	r0, sl
   2f110:	bl	11ac0 <strlen@plt>
   2f114:	cmp	r0, r8
   2f118:	beq	2f200 <__assert_fail@plt+0x1d554>
   2f11c:	cmn	r6, #1
   2f120:	beq	2f0d8 <__assert_fail@plt+0x1d42c>
   2f124:	ldr	r0, [sp, #16]
   2f128:	cmp	r0, #0
   2f12c:	beq	2f148 <__assert_fail@plt+0x1d49c>
   2f130:	ldr	r2, [fp, #8]
   2f134:	mov	r1, r4
   2f138:	mla	r0, r6, r2, r0
   2f13c:	bl	11aa8 <bcmp@plt>
   2f140:	cmp	r0, #0
   2f144:	beq	2f0dc <__assert_fail@plt+0x1d430>
   2f148:	mov	r0, #1
   2f14c:	str	r0, [sp, #12]
   2f150:	b	2f0dc <__assert_fail@plt+0x1d430>
   2f154:	ldr	r0, [sp, #12]
   2f158:	ldr	r5, [sp, #8]
   2f15c:	ldr	r9, [sp, #4]
   2f160:	movw	r1, #5661	; 0x161d
   2f164:	movt	r1, #3
   2f168:	tst	r0, #1
   2f16c:	bne	2f17c <__assert_fail@plt+0x1d4d0>
   2f170:	cmn	r6, #1
   2f174:	bgt	2f1f4 <__assert_fail@plt+0x1d548>
   2f178:	beq	2f190 <__assert_fail@plt+0x1d4e4>
   2f17c:	movw	r1, #5688	; 0x1638
   2f180:	movt	r1, #3
   2f184:	b	2f190 <__assert_fail@plt+0x1d4e4>
   2f188:	movw	r1, #5661	; 0x161d
   2f18c:	movt	r1, #3
   2f190:	ldr	r6, [fp, #12]
   2f194:	mov	r0, #0
   2f198:	mov	r2, #5
   2f19c:	bl	11934 <dcgettext@plt>
   2f1a0:	mov	r4, r0
   2f1a4:	mov	r0, #0
   2f1a8:	mov	r1, #8
   2f1ac:	mov	r2, r7
   2f1b0:	bl	19160 <__assert_fail@plt+0x74b4>
   2f1b4:	mov	r7, r0
   2f1b8:	mov	r0, #1
   2f1bc:	mov	r1, r9
   2f1c0:	bl	19720 <__assert_fail@plt+0x7a74>
   2f1c4:	str	r0, [sp]
   2f1c8:	mov	r0, #0
   2f1cc:	mov	r1, #0
   2f1d0:	mov	r2, r4
   2f1d4:	mov	r3, r7
   2f1d8:	bl	119dc <error@plt>
   2f1dc:	ldr	r1, [sp, #16]
   2f1e0:	ldr	r2, [fp, #8]
   2f1e4:	mov	r0, r5
   2f1e8:	bl	2ef6c <__assert_fail@plt+0x1d2c0>
   2f1ec:	blx	r6
   2f1f0:	mvn	r6, #0
   2f1f4:	mov	r0, r6
   2f1f8:	sub	sp, fp, #28
   2f1fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f200:	mov	r6, r5
   2f204:	ldr	r5, [sp, #8]
   2f208:	ldr	r9, [sp, #4]
   2f20c:	movw	r1, #5661	; 0x161d
   2f210:	movt	r1, #3
   2f214:	cmn	r6, #1
   2f218:	bgt	2f1f4 <__assert_fail@plt+0x1d548>
   2f21c:	b	2f178 <__assert_fail@plt+0x1d4cc>
   2f220:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2f224:	add	fp, sp, #24
   2f228:	ldr	r6, [r1]
   2f22c:	cmp	r6, #0
   2f230:	beq	2f294 <__assert_fail@plt+0x1d5e8>
   2f234:	mov	r8, r1
   2f238:	mov	r7, r2
   2f23c:	mov	r1, r2
   2f240:	mov	r2, r3
   2f244:	mov	r4, r3
   2f248:	mov	r9, r0
   2f24c:	bl	11aa8 <bcmp@plt>
   2f250:	cmp	r0, #0
   2f254:	beq	2f28c <__assert_fail@plt+0x1d5e0>
   2f258:	add	r7, r7, r4
   2f25c:	add	r5, r8, #4
   2f260:	ldr	r6, [r5]
   2f264:	cmp	r6, #0
   2f268:	beq	2f294 <__assert_fail@plt+0x1d5e8>
   2f26c:	mov	r0, r9
   2f270:	mov	r1, r7
   2f274:	mov	r2, r4
   2f278:	bl	11aa8 <bcmp@plt>
   2f27c:	add	r7, r7, r4
   2f280:	add	r5, r5, #4
   2f284:	cmp	r0, #0
   2f288:	bne	2f260 <__assert_fail@plt+0x1d5b4>
   2f28c:	mov	r0, r6
   2f290:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2f294:	mov	r6, #0
   2f298:	mov	r0, r6
   2f29c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2f2a0:	push	{r4, r5, r6, sl, fp, lr}
   2f2a4:	add	fp, sp, #16
   2f2a8:	mov	r4, r0
   2f2ac:	bl	119c4 <__fpending@plt>
   2f2b0:	mov	r5, r0
   2f2b4:	mov	r0, r4
   2f2b8:	bl	118c8 <ferror@plt>
   2f2bc:	mov	r6, r0
   2f2c0:	mov	r0, r4
   2f2c4:	bl	11b74 <fclose@plt>
   2f2c8:	cmp	r6, #0
   2f2cc:	beq	2f2f0 <__assert_fail@plt+0x1d644>
   2f2d0:	mvn	r4, #0
   2f2d4:	cmp	r0, #0
   2f2d8:	bne	2f31c <__assert_fail@plt+0x1d670>
   2f2dc:	bl	11af0 <__errno_location@plt>
   2f2e0:	mov	r1, #0
   2f2e4:	str	r1, [r0]
   2f2e8:	mov	r0, r4
   2f2ec:	pop	{r4, r5, r6, sl, fp, pc}
   2f2f0:	cmp	r0, #0
   2f2f4:	mov	r4, r0
   2f2f8:	mvnne	r4, #0
   2f2fc:	cmp	r5, #0
   2f300:	bne	2f31c <__assert_fail@plt+0x1d670>
   2f304:	cmp	r0, #0
   2f308:	beq	2f31c <__assert_fail@plt+0x1d670>
   2f30c:	bl	11af0 <__errno_location@plt>
   2f310:	ldr	r0, [r0]
   2f314:	subs	r4, r0, #9
   2f318:	mvnne	r4, #0
   2f31c:	mov	r0, r4
   2f320:	pop	{r4, r5, r6, sl, fp, pc}
   2f324:	push	{r4, r5, r6, r7, fp, lr}
   2f328:	add	fp, sp, #16
   2f32c:	mov	r4, r0
   2f330:	ldr	r0, [r0, #4]
   2f334:	mov	r5, r1
   2f338:	cmp	r0, r1
   2f33c:	bcs	2f370 <__assert_fail@plt+0x1d6c4>
   2f340:	mov	r6, r3
   2f344:	cmp	r3, #0
   2f348:	beq	2f37c <__assert_fail@plt+0x1d6d0>
   2f34c:	mvn	r0, #0
   2f350:	udiv	r0, r0, r6
   2f354:	cmp	r0, r5
   2f358:	bcs	2f37c <__assert_fail@plt+0x1d6d0>
   2f35c:	bl	11af0 <__errno_location@plt>
   2f360:	mov	r1, #12
   2f364:	str	r1, [r0]
   2f368:	mov	r0, #0
   2f36c:	pop	{r4, r5, r6, r7, fp, pc}
   2f370:	mov	r0, #1
   2f374:	str	r5, [r4]
   2f378:	pop	{r4, r5, r6, r7, fp, pc}
   2f37c:	ldr	r0, [r4, #8]
   2f380:	mul	r1, r6, r5
   2f384:	cmp	r0, r2
   2f388:	beq	2f3a0 <__assert_fail@plt+0x1d6f4>
   2f38c:	bl	1b64c <__assert_fail@plt+0x99a0>
   2f390:	mov	r7, r0
   2f394:	cmp	r0, #0
   2f398:	bne	2f3d0 <__assert_fail@plt+0x1d724>
   2f39c:	b	2f3e0 <__assert_fail@plt+0x1d734>
   2f3a0:	mov	r0, r1
   2f3a4:	bl	1b5b8 <__assert_fail@plt+0x990c>
   2f3a8:	cmp	r0, #0
   2f3ac:	beq	2f3e0 <__assert_fail@plt+0x1d734>
   2f3b0:	ldr	r1, [r4, #8]
   2f3b4:	mov	r7, r0
   2f3b8:	cmp	r1, #0
   2f3bc:	beq	2f3d0 <__assert_fail@plt+0x1d724>
   2f3c0:	ldr	r0, [r4]
   2f3c4:	mul	r2, r0, r6
   2f3c8:	mov	r0, r7
   2f3cc:	bl	118ec <memcpy@plt>
   2f3d0:	mov	r0, #1
   2f3d4:	str	r5, [r4]
   2f3d8:	stmib	r4, {r5, r7}
   2f3dc:	pop	{r4, r5, r6, r7, fp, pc}
   2f3e0:	mov	r0, #0
   2f3e4:	pop	{r4, r5, r6, r7, fp, pc}
   2f3e8:	push	{r4, sl, fp, lr}
   2f3ec:	add	fp, sp, #8
   2f3f0:	sub	sp, sp, #264	; 0x108
   2f3f4:	add	r1, sp, #7
   2f3f8:	movw	r2, #257	; 0x101
   2f3fc:	bl	2f5d8 <__assert_fail@plt+0x1d92c>
   2f400:	mov	r4, #0
   2f404:	cmp	r0, #0
   2f408:	bne	2f448 <__assert_fail@plt+0x1d79c>
   2f40c:	movw	r1, #5751	; 0x1677
   2f410:	add	r0, sp, #7
   2f414:	mov	r2, #2
   2f418:	movt	r1, #3
   2f41c:	bl	11aa8 <bcmp@plt>
   2f420:	cmp	r0, #0
   2f424:	beq	2f448 <__assert_fail@plt+0x1d79c>
   2f428:	movw	r1, #5753	; 0x1679
   2f42c:	add	r0, sp, #7
   2f430:	mov	r2, #6
   2f434:	movt	r1, #3
   2f438:	bl	11aa8 <bcmp@plt>
   2f43c:	cmp	r0, #0
   2f440:	mov	r4, r0
   2f444:	movwne	r4, #1
   2f448:	mov	r0, r4
   2f44c:	sub	sp, fp, #8
   2f450:	pop	{r4, sl, fp, pc}
   2f454:	push	{fp, lr}
   2f458:	mov	fp, sp
   2f45c:	mov	r0, #14
   2f460:	bl	11bbc <nl_langinfo@plt>
   2f464:	movw	r1, #2311	; 0x907
   2f468:	cmp	r0, #0
   2f46c:	movt	r1, #3
   2f470:	movne	r1, r0
   2f474:	movw	r0, #5759	; 0x167f
   2f478:	ldrb	r2, [r1]
   2f47c:	movt	r0, #3
   2f480:	cmp	r2, #0
   2f484:	movne	r0, r1
   2f488:	pop	{fp, pc}
   2f48c:	push	{r4, sl, fp, lr}
   2f490:	add	fp, sp, #8
   2f494:	mov	r4, #0
   2f498:	adds	r0, r0, #16
   2f49c:	adc	r1, r4, #0
   2f4a0:	rsb	r2, r1, #0
   2f4a4:	eors	r2, r2, r1
   2f4a8:	movwne	r2, #1
   2f4ac:	cmp	r0, #0
   2f4b0:	bmi	2f4d0 <__assert_fail@plt+0x1d824>
   2f4b4:	cmp	r2, #0
   2f4b8:	asreq	r2, r0, #31
   2f4bc:	eoreq	r3, r0, r0
   2f4c0:	andeq	r2, r2, #1
   2f4c4:	eoreq	r1, r1, r2
   2f4c8:	orrseq	r1, r3, r1
   2f4cc:	beq	2f4d8 <__assert_fail@plt+0x1d82c>
   2f4d0:	mov	r0, r4
   2f4d4:	pop	{r4, sl, fp, pc}
   2f4d8:	bl	11a18 <malloc@plt>
   2f4dc:	cmp	r0, #0
   2f4e0:	addne	r4, r0, #8
   2f4e4:	movne	r1, #8
   2f4e8:	bfine	r4, r1, #0, #4
   2f4ec:	subne	r0, r4, r0
   2f4f0:	strbne	r0, [r4, #-1]
   2f4f4:	mov	r0, r4
   2f4f8:	pop	{r4, sl, fp, pc}
   2f4fc:	push	{fp, lr}
   2f500:	mov	fp, sp
   2f504:	tst	r0, #7
   2f508:	bne	2f524 <__assert_fail@plt+0x1d878>
   2f50c:	tst	r0, #8
   2f510:	popeq	{fp, pc}
   2f514:	ldrb	r1, [r0, #-1]
   2f518:	sub	r0, r0, r1
   2f51c:	pop	{fp, lr}
   2f520:	b	1b4e8 <__assert_fail@plt+0x983c>
   2f524:	bl	11c70 <abort@plt>
   2f528:	push	{r4, sl, fp, lr}
   2f52c:	add	fp, sp, #8
   2f530:	mov	r4, r0
   2f534:	bl	1188c <wcwidth@plt>
   2f538:	cmn	r0, #1
   2f53c:	popgt	{r4, sl, fp, pc}
   2f540:	mov	r0, r4
   2f544:	bl	11958 <iswcntrl@plt>
   2f548:	clz	r0, r0
   2f54c:	lsr	r0, r0, #5
   2f550:	pop	{r4, sl, fp, pc}
   2f554:	push	{r4, r5, r6, sl, fp, lr}
   2f558:	add	fp, sp, #16
   2f55c:	mov	r4, r0
   2f560:	mov	r0, r1
   2f564:	mov	r5, r1
   2f568:	ldr	r1, [r0], #16
   2f56c:	cmp	r1, r0
   2f570:	beq	2f57c <__assert_fail@plt+0x1d8d0>
   2f574:	mov	r6, r1
   2f578:	b	2f58c <__assert_fail@plt+0x1d8e0>
   2f57c:	ldr	r2, [r5, #4]
   2f580:	add	r6, r4, #16
   2f584:	mov	r0, r6
   2f588:	bl	118ec <memcpy@plt>
   2f58c:	str	r6, [r4]
   2f590:	ldr	r0, [r5, #4]
   2f594:	str	r0, [r4, #4]
   2f598:	ldrb	r0, [r5, #8]
   2f59c:	strb	r0, [r4, #8]
   2f5a0:	cmp	r0, #0
   2f5a4:	ldrne	r0, [r5, #12]
   2f5a8:	strne	r0, [r4, #12]
   2f5ac:	pop	{r4, r5, r6, sl, fp, pc}
   2f5b0:	movw	r2, #5768	; 0x1688
   2f5b4:	ubfx	r1, r0, #5, #3
   2f5b8:	and	r0, r0, #31
   2f5bc:	movt	r2, #3
   2f5c0:	ldr	r1, [r2, r1, lsl #2]
   2f5c4:	mov	r2, #1
   2f5c8:	and	r0, r1, r2, lsl r0
   2f5cc:	cmp	r0, #0
   2f5d0:	movwne	r0, #1
   2f5d4:	bx	lr
   2f5d8:	push	{r4, r5, r6, r7, fp, lr}
   2f5dc:	add	fp, sp, #16
   2f5e0:	mov	r4, r1
   2f5e4:	mov	r1, #0
   2f5e8:	mov	r6, r2
   2f5ec:	bl	11ba4 <setlocale@plt>
   2f5f0:	cmp	r0, #0
   2f5f4:	beq	2f624 <__assert_fail@plt+0x1d978>
   2f5f8:	mov	r7, r0
   2f5fc:	bl	11ac0 <strlen@plt>
   2f600:	cmp	r0, r6
   2f604:	bcs	2f640 <__assert_fail@plt+0x1d994>
   2f608:	add	r2, r0, #1
   2f60c:	mov	r0, r4
   2f610:	mov	r1, r7
   2f614:	bl	118ec <memcpy@plt>
   2f618:	mov	r5, #0
   2f61c:	mov	r0, r5
   2f620:	pop	{r4, r5, r6, r7, fp, pc}
   2f624:	mov	r5, #22
   2f628:	cmp	r6, #0
   2f62c:	beq	2f668 <__assert_fail@plt+0x1d9bc>
   2f630:	mov	r0, #0
   2f634:	strb	r0, [r4]
   2f638:	mov	r0, r5
   2f63c:	pop	{r4, r5, r6, r7, fp, pc}
   2f640:	mov	r5, #34	; 0x22
   2f644:	cmp	r6, #0
   2f648:	beq	2f668 <__assert_fail@plt+0x1d9bc>
   2f64c:	sub	r6, r6, #1
   2f650:	mov	r0, r4
   2f654:	mov	r1, r7
   2f658:	mov	r2, r6
   2f65c:	bl	118ec <memcpy@plt>
   2f660:	mov	r0, #0
   2f664:	strb	r0, [r4, r6]
   2f668:	mov	r0, r5
   2f66c:	pop	{r4, r5, r6, r7, fp, pc}
   2f670:	mov	r1, #0
   2f674:	b	11ba4 <setlocale@plt>
   2f678:	mov	r1, #0
   2f67c:	mov	r2, #3
   2f680:	b	1b2ac <__assert_fail@plt+0x9600>
   2f684:	eor	r1, r1, #-2147483648	; 0x80000000
   2f688:	b	2f690 <__assert_fail@plt+0x1d9e4>
   2f68c:	eor	r3, r3, #-2147483648	; 0x80000000
   2f690:	push	{r4, r5, lr}
   2f694:	lsl	r4, r1, #1
   2f698:	lsl	r5, r3, #1
   2f69c:	teq	r4, r5
   2f6a0:	teqeq	r0, r2
   2f6a4:	orrsne	ip, r4, r0
   2f6a8:	orrsne	ip, r5, r2
   2f6ac:	mvnsne	ip, r4, asr #21
   2f6b0:	mvnsne	ip, r5, asr #21
   2f6b4:	beq	2f8a0 <__assert_fail@plt+0x1dbf4>
   2f6b8:	lsr	r4, r4, #21
   2f6bc:	rsbs	r5, r4, r5, lsr #21
   2f6c0:	rsblt	r5, r5, #0
   2f6c4:	ble	2f6e4 <__assert_fail@plt+0x1da38>
   2f6c8:	add	r4, r4, r5
   2f6cc:	eor	r2, r0, r2
   2f6d0:	eor	r3, r1, r3
   2f6d4:	eor	r0, r2, r0
   2f6d8:	eor	r1, r3, r1
   2f6dc:	eor	r2, r0, r2
   2f6e0:	eor	r3, r1, r3
   2f6e4:	cmp	r5, #54	; 0x36
   2f6e8:	pophi	{r4, r5, pc}
   2f6ec:	tst	r1, #-2147483648	; 0x80000000
   2f6f0:	lsl	r1, r1, #12
   2f6f4:	mov	ip, #1048576	; 0x100000
   2f6f8:	orr	r1, ip, r1, lsr #12
   2f6fc:	beq	2f708 <__assert_fail@plt+0x1da5c>
   2f700:	rsbs	r0, r0, #0
   2f704:	rsc	r1, r1, #0
   2f708:	tst	r3, #-2147483648	; 0x80000000
   2f70c:	lsl	r3, r3, #12
   2f710:	orr	r3, ip, r3, lsr #12
   2f714:	beq	2f720 <__assert_fail@plt+0x1da74>
   2f718:	rsbs	r2, r2, #0
   2f71c:	rsc	r3, r3, #0
   2f720:	teq	r4, r5
   2f724:	beq	2f888 <__assert_fail@plt+0x1dbdc>
   2f728:	sub	r4, r4, #1
   2f72c:	rsbs	lr, r5, #32
   2f730:	blt	2f74c <__assert_fail@plt+0x1daa0>
   2f734:	lsl	ip, r2, lr
   2f738:	adds	r0, r0, r2, lsr r5
   2f73c:	adc	r1, r1, #0
   2f740:	adds	r0, r0, r3, lsl lr
   2f744:	adcs	r1, r1, r3, asr r5
   2f748:	b	2f768 <__assert_fail@plt+0x1dabc>
   2f74c:	sub	r5, r5, #32
   2f750:	add	lr, lr, #32
   2f754:	cmp	r2, #1
   2f758:	lsl	ip, r3, lr
   2f75c:	orrcs	ip, ip, #2
   2f760:	adds	r0, r0, r3, asr r5
   2f764:	adcs	r1, r1, r3, asr #31
   2f768:	and	r5, r1, #-2147483648	; 0x80000000
   2f76c:	bpl	2f77c <__assert_fail@plt+0x1dad0>
   2f770:	rsbs	ip, ip, #0
   2f774:	rscs	r0, r0, #0
   2f778:	rsc	r1, r1, #0
   2f77c:	cmp	r1, #1048576	; 0x100000
   2f780:	bcc	2f7c0 <__assert_fail@plt+0x1db14>
   2f784:	cmp	r1, #2097152	; 0x200000
   2f788:	bcc	2f7a8 <__assert_fail@plt+0x1dafc>
   2f78c:	lsrs	r1, r1, #1
   2f790:	rrxs	r0, r0
   2f794:	rrx	ip, ip
   2f798:	add	r4, r4, #1
   2f79c:	lsl	r2, r4, #21
   2f7a0:	cmn	r2, #4194304	; 0x400000
   2f7a4:	bcs	2f900 <__assert_fail@plt+0x1dc54>
   2f7a8:	cmp	ip, #-2147483648	; 0x80000000
   2f7ac:	lsrseq	ip, r0, #1
   2f7b0:	adcs	r0, r0, #0
   2f7b4:	adc	r1, r1, r4, lsl #20
   2f7b8:	orr	r1, r1, r5
   2f7bc:	pop	{r4, r5, pc}
   2f7c0:	lsls	ip, ip, #1
   2f7c4:	adcs	r0, r0, r0
   2f7c8:	adc	r1, r1, r1
   2f7cc:	tst	r1, #1048576	; 0x100000
   2f7d0:	sub	r4, r4, #1
   2f7d4:	bne	2f7a8 <__assert_fail@plt+0x1dafc>
   2f7d8:	teq	r1, #0
   2f7dc:	moveq	r1, r0
   2f7e0:	moveq	r0, #0
   2f7e4:	clz	r3, r1
   2f7e8:	addeq	r3, r3, #32
   2f7ec:	sub	r3, r3, #11
   2f7f0:	subs	r2, r3, #32
   2f7f4:	bge	2f818 <__assert_fail@plt+0x1db6c>
   2f7f8:	adds	r2, r2, #12
   2f7fc:	ble	2f814 <__assert_fail@plt+0x1db68>
   2f800:	add	ip, r2, #20
   2f804:	rsb	r2, r2, #12
   2f808:	lsl	r0, r1, ip
   2f80c:	lsr	r1, r1, r2
   2f810:	b	2f828 <__assert_fail@plt+0x1db7c>
   2f814:	add	r2, r2, #20
   2f818:	rsble	ip, r2, #32
   2f81c:	lsl	r1, r1, r2
   2f820:	orrle	r1, r1, r0, lsr ip
   2f824:	lslle	r0, r0, r2
   2f828:	subs	r4, r4, r3
   2f82c:	addge	r1, r1, r4, lsl #20
   2f830:	orrge	r1, r1, r5
   2f834:	popge	{r4, r5, pc}
   2f838:	mvn	r4, r4
   2f83c:	subs	r4, r4, #31
   2f840:	bge	2f87c <__assert_fail@plt+0x1dbd0>
   2f844:	adds	r4, r4, #12
   2f848:	bgt	2f864 <__assert_fail@plt+0x1dbb8>
   2f84c:	add	r4, r4, #20
   2f850:	rsb	r2, r4, #32
   2f854:	lsr	r0, r0, r4
   2f858:	orr	r0, r0, r1, lsl r2
   2f85c:	orr	r1, r5, r1, lsr r4
   2f860:	pop	{r4, r5, pc}
   2f864:	rsb	r4, r4, #12
   2f868:	rsb	r2, r4, #32
   2f86c:	lsr	r0, r0, r2
   2f870:	orr	r0, r0, r1, lsl r4
   2f874:	mov	r1, r5
   2f878:	pop	{r4, r5, pc}
   2f87c:	lsr	r0, r1, r4
   2f880:	mov	r1, r5
   2f884:	pop	{r4, r5, pc}
   2f888:	teq	r4, #0
   2f88c:	eor	r3, r3, #1048576	; 0x100000
   2f890:	eoreq	r1, r1, #1048576	; 0x100000
   2f894:	addeq	r4, r4, #1
   2f898:	subne	r5, r5, #1
   2f89c:	b	2f728 <__assert_fail@plt+0x1da7c>
   2f8a0:	mvns	ip, r4, asr #21
   2f8a4:	mvnsne	ip, r5, asr #21
   2f8a8:	beq	2f910 <__assert_fail@plt+0x1dc64>
   2f8ac:	teq	r4, r5
   2f8b0:	teqeq	r0, r2
   2f8b4:	beq	2f8c8 <__assert_fail@plt+0x1dc1c>
   2f8b8:	orrs	ip, r4, r0
   2f8bc:	moveq	r1, r3
   2f8c0:	moveq	r0, r2
   2f8c4:	pop	{r4, r5, pc}
   2f8c8:	teq	r1, r3
   2f8cc:	movne	r1, #0
   2f8d0:	movne	r0, #0
   2f8d4:	popne	{r4, r5, pc}
   2f8d8:	lsrs	ip, r4, #21
   2f8dc:	bne	2f8f0 <__assert_fail@plt+0x1dc44>
   2f8e0:	lsls	r0, r0, #1
   2f8e4:	adcs	r1, r1, r1
   2f8e8:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2f8ec:	pop	{r4, r5, pc}
   2f8f0:	adds	r4, r4, #4194304	; 0x400000
   2f8f4:	addcc	r1, r1, #1048576	; 0x100000
   2f8f8:	popcc	{r4, r5, pc}
   2f8fc:	and	r5, r1, #-2147483648	; 0x80000000
   2f900:	orr	r1, r5, #2130706432	; 0x7f000000
   2f904:	orr	r1, r1, #15728640	; 0xf00000
   2f908:	mov	r0, #0
   2f90c:	pop	{r4, r5, pc}
   2f910:	mvns	ip, r4, asr #21
   2f914:	movne	r1, r3
   2f918:	movne	r0, r2
   2f91c:	mvnseq	ip, r5, asr #21
   2f920:	movne	r3, r1
   2f924:	movne	r2, r0
   2f928:	orrs	r4, r0, r1, lsl #12
   2f92c:	orrseq	r5, r2, r3, lsl #12
   2f930:	teqeq	r1, r3
   2f934:	orrne	r1, r1, #524288	; 0x80000
   2f938:	pop	{r4, r5, pc}
   2f93c:	teq	r0, #0
   2f940:	moveq	r1, #0
   2f944:	bxeq	lr
   2f948:	push	{r4, r5, lr}
   2f94c:	mov	r4, #1024	; 0x400
   2f950:	add	r4, r4, #50	; 0x32
   2f954:	mov	r5, #0
   2f958:	mov	r1, #0
   2f95c:	b	2f7d8 <__assert_fail@plt+0x1db2c>
   2f960:	teq	r0, #0
   2f964:	moveq	r1, #0
   2f968:	bxeq	lr
   2f96c:	push	{r4, r5, lr}
   2f970:	mov	r4, #1024	; 0x400
   2f974:	add	r4, r4, #50	; 0x32
   2f978:	ands	r5, r0, #-2147483648	; 0x80000000
   2f97c:	rsbmi	r0, r0, #0
   2f980:	mov	r1, #0
   2f984:	b	2f7d8 <__assert_fail@plt+0x1db2c>
   2f988:	lsls	r2, r0, #1
   2f98c:	asr	r1, r2, #3
   2f990:	rrx	r1, r1
   2f994:	lsl	r0, r2, #28
   2f998:	andsne	r3, r2, #-16777216	; 0xff000000
   2f99c:	teqne	r3, #-16777216	; 0xff000000
   2f9a0:	eorne	r1, r1, #939524096	; 0x38000000
   2f9a4:	bxne	lr
   2f9a8:	bics	r2, r2, #-16777216	; 0xff000000
   2f9ac:	bxeq	lr
   2f9b0:	teq	r3, #-16777216	; 0xff000000
   2f9b4:	orreq	r1, r1, #524288	; 0x80000
   2f9b8:	bxeq	lr
   2f9bc:	push	{r4, r5, lr}
   2f9c0:	mov	r4, #896	; 0x380
   2f9c4:	and	r5, r1, #-2147483648	; 0x80000000
   2f9c8:	bic	r1, r1, #-2147483648	; 0x80000000
   2f9cc:	b	2f7d8 <__assert_fail@plt+0x1db2c>
   2f9d0:	orrs	r2, r0, r1
   2f9d4:	bxeq	lr
   2f9d8:	push	{r4, r5, lr}
   2f9dc:	mov	r5, #0
   2f9e0:	b	2fa00 <__assert_fail@plt+0x1dd54>
   2f9e4:	orrs	r2, r0, r1
   2f9e8:	bxeq	lr
   2f9ec:	push	{r4, r5, lr}
   2f9f0:	ands	r5, r1, #-2147483648	; 0x80000000
   2f9f4:	bpl	2fa00 <__assert_fail@plt+0x1dd54>
   2f9f8:	rsbs	r0, r0, #0
   2f9fc:	rsc	r1, r1, #0
   2fa00:	mov	r4, #1024	; 0x400
   2fa04:	add	r4, r4, #50	; 0x32
   2fa08:	lsrs	ip, r1, #22
   2fa0c:	beq	2f77c <__assert_fail@plt+0x1dad0>
   2fa10:	mov	r2, #3
   2fa14:	lsrs	ip, ip, #3
   2fa18:	addne	r2, r2, #3
   2fa1c:	lsrs	ip, ip, #3
   2fa20:	addne	r2, r2, #3
   2fa24:	add	r2, r2, ip, lsr #3
   2fa28:	rsb	r3, r2, #32
   2fa2c:	lsl	ip, r0, r3
   2fa30:	lsr	r0, r0, r2
   2fa34:	orr	r0, r0, r1, lsl r3
   2fa38:	lsr	r1, r1, r2
   2fa3c:	add	r4, r4, r2
   2fa40:	b	2f77c <__assert_fail@plt+0x1dad0>
   2fa44:	cmp	r3, #0
   2fa48:	cmpeq	r2, #0
   2fa4c:	bne	2fa64 <__assert_fail@plt+0x1ddb8>
   2fa50:	cmp	r1, #0
   2fa54:	cmpeq	r0, #0
   2fa58:	mvnne	r1, #0
   2fa5c:	mvnne	r0, #0
   2fa60:	b	2fa80 <__assert_fail@plt+0x1ddd4>
   2fa64:	sub	sp, sp, #8
   2fa68:	push	{sp, lr}
   2fa6c:	bl	2fad0 <__assert_fail@plt+0x1de24>
   2fa70:	ldr	lr, [sp, #4]
   2fa74:	add	sp, sp, #8
   2fa78:	pop	{r2, r3}
   2fa7c:	bx	lr
   2fa80:	push	{r1, lr}
   2fa84:	mov	r0, #8
   2fa88:	bl	11838 <raise@plt>
   2fa8c:	pop	{r1, pc}
   2fa90:	vmov	d6, r0, r1
   2fa94:	vldr	d7, [pc, #36]	; 2fac0 <__assert_fail@plt+0x1de14>
   2fa98:	vldr	d5, [pc, #40]	; 2fac8 <__assert_fail@plt+0x1de1c>
   2fa9c:	vmul.f64	d7, d6, d7
   2faa0:	vcvt.u32.f64	s14, d7
   2faa4:	vcvt.f64.u32	d4, s14
   2faa8:	vmov	r1, s14
   2faac:	vmls.f64	d6, d4, d5
   2fab0:	vcvt.u32.f64	s15, d6
   2fab4:	vmov	r0, s15
   2fab8:	bx	lr
   2fabc:	nop			; (mov r0, r0)
   2fac0:	andeq	r0, r0, r0
   2fac4:	ldclcc	0, cr0, [r0]
   2fac8:	andeq	r0, r0, r0
   2facc:	mvnsmi	r0, r0
   2fad0:	cmp	r1, r3
   2fad4:	cmpeq	r0, r2
   2fad8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fadc:	mov	r4, r0
   2fae0:	movcc	r0, #0
   2fae4:	mov	r5, r1
   2fae8:	ldr	lr, [sp, #36]	; 0x24
   2faec:	movcc	r1, r0
   2faf0:	bcc	2fbec <__assert_fail@plt+0x1df40>
   2faf4:	cmp	r3, #0
   2faf8:	clzeq	ip, r2
   2fafc:	clzne	ip, r3
   2fb00:	addeq	ip, ip, #32
   2fb04:	cmp	r5, #0
   2fb08:	clzeq	r1, r4
   2fb0c:	addeq	r1, r1, #32
   2fb10:	clzne	r1, r5
   2fb14:	sub	ip, ip, r1
   2fb18:	sub	sl, ip, #32
   2fb1c:	lsl	r9, r3, ip
   2fb20:	rsb	fp, ip, #32
   2fb24:	orr	r9, r9, r2, lsl sl
   2fb28:	orr	r9, r9, r2, lsr fp
   2fb2c:	lsl	r8, r2, ip
   2fb30:	cmp	r5, r9
   2fb34:	cmpeq	r4, r8
   2fb38:	movcc	r0, #0
   2fb3c:	movcc	r1, r0
   2fb40:	bcc	2fb5c <__assert_fail@plt+0x1deb0>
   2fb44:	mov	r0, #1
   2fb48:	subs	r4, r4, r8
   2fb4c:	lsl	r1, r0, sl
   2fb50:	orr	r1, r1, r0, lsr fp
   2fb54:	lsl	r0, r0, ip
   2fb58:	sbc	r5, r5, r9
   2fb5c:	cmp	ip, #0
   2fb60:	beq	2fbec <__assert_fail@plt+0x1df40>
   2fb64:	lsr	r6, r8, #1
   2fb68:	orr	r6, r6, r9, lsl #31
   2fb6c:	lsr	r7, r9, #1
   2fb70:	mov	r2, ip
   2fb74:	b	2fb98 <__assert_fail@plt+0x1deec>
   2fb78:	subs	r3, r4, r6
   2fb7c:	sbc	r8, r5, r7
   2fb80:	adds	r3, r3, r3
   2fb84:	adc	r8, r8, r8
   2fb88:	adds	r4, r3, #1
   2fb8c:	adc	r5, r8, #0
   2fb90:	subs	r2, r2, #1
   2fb94:	beq	2fbb4 <__assert_fail@plt+0x1df08>
   2fb98:	cmp	r5, r7
   2fb9c:	cmpeq	r4, r6
   2fba0:	bcs	2fb78 <__assert_fail@plt+0x1decc>
   2fba4:	adds	r4, r4, r4
   2fba8:	adc	r5, r5, r5
   2fbac:	subs	r2, r2, #1
   2fbb0:	bne	2fb98 <__assert_fail@plt+0x1deec>
   2fbb4:	lsr	r3, r4, ip
   2fbb8:	orr	r3, r3, r5, lsl fp
   2fbbc:	lsr	r2, r5, ip
   2fbc0:	orr	r3, r3, r5, lsr sl
   2fbc4:	adds	r0, r0, r4
   2fbc8:	mov	r4, r3
   2fbcc:	lsl	r3, r2, ip
   2fbd0:	orr	r3, r3, r4, lsl sl
   2fbd4:	lsl	ip, r4, ip
   2fbd8:	orr	r3, r3, r4, lsr fp
   2fbdc:	adc	r1, r1, r5
   2fbe0:	subs	r0, r0, ip
   2fbe4:	mov	r5, r2
   2fbe8:	sbc	r1, r1, r3
   2fbec:	cmp	lr, #0
   2fbf0:	strdne	r4, [lr]
   2fbf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fbf8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2fbfc:	mov	r7, r0
   2fc00:	ldr	r6, [pc, #72]	; 2fc50 <__assert_fail@plt+0x1dfa4>
   2fc04:	ldr	r5, [pc, #72]	; 2fc54 <__assert_fail@plt+0x1dfa8>
   2fc08:	add	r6, pc, r6
   2fc0c:	add	r5, pc, r5
   2fc10:	sub	r6, r6, r5
   2fc14:	mov	r8, r1
   2fc18:	mov	r9, r2
   2fc1c:	bl	117e8 <pthread_mutex_unlock@plt-0x20>
   2fc20:	asrs	r6, r6, #2
   2fc24:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2fc28:	mov	r4, #0
   2fc2c:	add	r4, r4, #1
   2fc30:	ldr	r3, [r5], #4
   2fc34:	mov	r2, r9
   2fc38:	mov	r1, r8
   2fc3c:	mov	r0, r7
   2fc40:	blx	r3
   2fc44:	cmp	r6, r4
   2fc48:	bne	2fc2c <__assert_fail@plt+0x1df80>
   2fc4c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2fc50:	strdeq	r2, [r1], -ip
   2fc54:	strdeq	r2, [r1], -r4
   2fc58:	bx	lr
   2fc5c:	ldr	r3, [pc, #12]	; 2fc70 <__assert_fail@plt+0x1dfc4>
   2fc60:	mov	r1, #0
   2fc64:	add	r3, pc, r3
   2fc68:	ldr	r2, [r3]
   2fc6c:	b	11b14 <__cxa_atexit@plt>
   2fc70:	andeq	r2, r1, r8, lsr r5

Disassembly of section .fini:

0002fc74 <.fini>:
   2fc74:	push	{r3, lr}
   2fc78:	pop	{r3, pc}
