
../repos/coreutils/src/shred:     file format elf32-littlearm


Disassembly of section .init:

000110fc <.init>:
   110fc:	push	{r3, lr}
   11100:	bl	11504 <__assert_fail@plt+0x4c>
   11104:	pop	{r3, pc}

Disassembly of section .plt:

00011108 <fdopen@plt-0x14>:
   11108:	push	{lr}		; (str lr, [sp, #-4]!)
   1110c:	ldr	lr, [pc, #4]	; 11118 <fdopen@plt-0x4>
   11110:	add	lr, pc, lr
   11114:	ldr	pc, [lr, #8]!
   11118:	andeq	r9, r1, r8, ror #29

0001111c <fdopen@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #102400	; 0x19000
   11124:	ldr	pc, [ip, #3816]!	; 0xee8

00011128 <calloc@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #102400	; 0x19000
   11130:	ldr	pc, [ip, #3808]!	; 0xee0

00011134 <fputs_unlocked@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #102400	; 0x19000
   1113c:	ldr	pc, [ip, #3800]!	; 0xed8

00011140 <raise@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #102400	; 0x19000
   11148:	ldr	pc, [ip, #3792]!	; 0xed0

0001114c <fsync@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #102400	; 0x19000
   11154:	ldr	pc, [ip, #3784]!	; 0xec8

00011158 <strcmp@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #102400	; 0x19000
   11160:	ldr	pc, [ip, #3776]!	; 0xec0

00011164 <fflush@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #102400	; 0x19000
   1116c:	ldr	pc, [ip, #3768]!	; 0xeb8

00011170 <memmove@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #102400	; 0x19000
   11178:	ldr	pc, [ip, #3760]!	; 0xeb0

0001117c <free@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #102400	; 0x19000
   11184:	ldr	pc, [ip, #3752]!	; 0xea8

00011188 <_exit@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #102400	; 0x19000
   11190:	ldr	pc, [ip, #3744]!	; 0xea0

00011194 <memcpy@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #102400	; 0x19000
   1119c:	ldr	pc, [ip, #3736]!	; 0xe98

000111a0 <__strtoull_internal@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #102400	; 0x19000
   111a8:	ldr	pc, [ip, #3728]!	; 0xe90

000111ac <mbsinit@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #102400	; 0x19000
   111b4:	ldr	pc, [ip, #3720]!	; 0xe88

000111b8 <time@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #102400	; 0x19000
   111c0:	ldr	pc, [ip, #3712]!	; 0xe80

000111c4 <ftruncate64@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #102400	; 0x19000
   111cc:	ldr	pc, [ip, #3704]!	; 0xe78

000111d0 <memcmp@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #102400	; 0x19000
   111d8:	ldr	pc, [ip, #3696]!	; 0xe70

000111dc <fputc_unlocked@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #102400	; 0x19000
   111e4:	ldr	pc, [ip, #3688]!	; 0xe68

000111e8 <dcgettext@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #102400	; 0x19000
   111f0:	ldr	pc, [ip, #3680]!	; 0xe60

000111f4 <unlink@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #102400	; 0x19000
   111fc:	ldr	pc, [ip, #3672]!	; 0xe58

00011200 <realloc@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #102400	; 0x19000
   11208:	ldr	pc, [ip, #3664]!	; 0xe50

0001120c <textdomain@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #102400	; 0x19000
   11214:	ldr	pc, [ip, #3656]!	; 0xe48

00011218 <__fxstatat64@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #102400	; 0x19000
   11220:	ldr	pc, [ip, #3648]!	; 0xe40

00011224 <iswprint@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #102400	; 0x19000
   1122c:	ldr	pc, [ip, #3640]!	; 0xe38

00011230 <__fxstat64@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #102400	; 0x19000
   11238:	ldr	pc, [ip, #3632]!	; 0xe30

0001123c <__memcpy_chk@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #102400	; 0x19000
   11244:	ldr	pc, [ip, #3624]!	; 0xe28

00011248 <fwrite@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #102400	; 0x19000
   11250:	ldr	pc, [ip, #3616]!	; 0xe20

00011254 <ioctl@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #102400	; 0x19000
   1125c:	ldr	pc, [ip, #3608]!	; 0xe18

00011260 <lseek64@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #102400	; 0x19000
   11268:	ldr	pc, [ip, #3600]!	; 0xe10

0001126c <__ctype_get_mb_cur_max@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #102400	; 0x19000
   11274:	ldr	pc, [ip, #3592]!	; 0xe08

00011278 <__strcpy_chk@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #102400	; 0x19000
   11280:	ldr	pc, [ip, #3584]!	; 0xe00

00011284 <__fpending@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #102400	; 0x19000
   1128c:	ldr	pc, [ip, #3576]!	; 0xdf8

00011290 <mbrtowc@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #102400	; 0x19000
   11298:	ldr	pc, [ip, #3568]!	; 0xdf0

0001129c <error@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #102400	; 0x19000
   112a4:	ldr	pc, [ip, #3560]!	; 0xde8

000112a8 <open64@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #102400	; 0x19000
   112b0:	ldr	pc, [ip, #3552]!	; 0xde0

000112b4 <getenv@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #102400	; 0x19000
   112bc:	ldr	pc, [ip, #3544]!	; 0xdd8

000112c0 <malloc@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #102400	; 0x19000
   112c8:	ldr	pc, [ip, #3536]!	; 0xdd0

000112cc <__libc_start_main@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #102400	; 0x19000
   112d4:	ldr	pc, [ip, #3528]!	; 0xdc8

000112d8 <__freading@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #102400	; 0x19000
   112e0:	ldr	pc, [ip, #3520]!	; 0xdc0

000112e4 <__gmon_start__@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #102400	; 0x19000
   112ec:	ldr	pc, [ip, #3512]!	; 0xdb8

000112f0 <getopt_long@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #102400	; 0x19000
   112f8:	ldr	pc, [ip, #3504]!	; 0xdb0

000112fc <__ctype_b_loc@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #102400	; 0x19000
   11304:	ldr	pc, [ip, #3496]!	; 0xda8

00011308 <exit@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #102400	; 0x19000
   11310:	ldr	pc, [ip, #3488]!	; 0xda0

00011314 <strlen@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #102400	; 0x19000
   1131c:	ldr	pc, [ip, #3480]!	; 0xd98

00011320 <strchr@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #102400	; 0x19000
   11328:	ldr	pc, [ip, #3472]!	; 0xd90

0001132c <getpagesize@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #102400	; 0x19000
   11334:	ldr	pc, [ip, #3464]!	; 0xd88

00011338 <__errno_location@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #102400	; 0x19000
   11340:	ldr	pc, [ip, #3456]!	; 0xd80

00011344 <__sprintf_chk@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #102400	; 0x19000
   1134c:	ldr	pc, [ip, #3448]!	; 0xd78

00011350 <__cxa_atexit@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #102400	; 0x19000
   11358:	ldr	pc, [ip, #3440]!	; 0xd70

0001135c <setvbuf@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #102400	; 0x19000
   11364:	ldr	pc, [ip, #3432]!	; 0xd68

00011368 <memset@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #102400	; 0x19000
   11370:	ldr	pc, [ip, #3424]!	; 0xd60

00011374 <renameat2@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #102400	; 0x19000
   1137c:	ldr	pc, [ip, #3416]!	; 0xd58

00011380 <__printf_chk@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #102400	; 0x19000
   11388:	ldr	pc, [ip, #3408]!	; 0xd50

0001138c <write@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #102400	; 0x19000
   11394:	ldr	pc, [ip, #3400]!	; 0xd48

00011398 <fileno@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #102400	; 0x19000
   113a0:	ldr	pc, [ip, #3392]!	; 0xd40

000113a4 <__fprintf_chk@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #102400	; 0x19000
   113ac:	ldr	pc, [ip, #3384]!	; 0xd38

000113b0 <fclose@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #102400	; 0x19000
   113b8:	ldr	pc, [ip, #3376]!	; 0xd30

000113bc <fseeko64@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #102400	; 0x19000
   113c4:	ldr	pc, [ip, #3368]!	; 0xd28

000113c8 <fcntl64@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #102400	; 0x19000
   113d0:	ldr	pc, [ip, #3360]!	; 0xd20

000113d4 <__overflow@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #102400	; 0x19000
   113dc:	ldr	pc, [ip, #3352]!	; 0xd18

000113e0 <setlocale@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #102400	; 0x19000
   113e8:	ldr	pc, [ip, #3344]!	; 0xd10

000113ec <__explicit_bzero_chk@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #102400	; 0x19000
   113f4:	ldr	pc, [ip, #3336]!	; 0xd08

000113f8 <strrchr@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #102400	; 0x19000
   11400:	ldr	pc, [ip, #3328]!	; 0xd00

00011404 <nl_langinfo@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #102400	; 0x19000
   1140c:	ldr	pc, [ip, #3320]!	; 0xcf8

00011410 <localeconv@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #102400	; 0x19000
   11418:	ldr	pc, [ip, #3312]!	; 0xcf0

0001141c <fopen64@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #102400	; 0x19000
   11424:	ldr	pc, [ip, #3304]!	; 0xce8

00011428 <renameat@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #102400	; 0x19000
   11430:	ldr	pc, [ip, #3296]!	; 0xce0

00011434 <bindtextdomain@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #102400	; 0x19000
   1143c:	ldr	pc, [ip, #3288]!	; 0xcd8

00011440 <fread_unlocked@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #102400	; 0x19000
   11448:	ldr	pc, [ip, #3280]!	; 0xcd0

0001144c <getrandom@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #102400	; 0x19000
   11454:	ldr	pc, [ip, #3272]!	; 0xcc8

00011458 <aligned_alloc@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #102400	; 0x19000
   11460:	ldr	pc, [ip, #3264]!	; 0xcc0

00011464 <sync@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #102400	; 0x19000
   1146c:	ldr	pc, [ip, #3256]!	; 0xcb8

00011470 <chmod@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #102400	; 0x19000
   11478:	ldr	pc, [ip, #3248]!	; 0xcb0

0001147c <isatty@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #102400	; 0x19000
   11484:	ldr	pc, [ip, #3240]!	; 0xca8

00011488 <strncmp@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #102400	; 0x19000
   11490:	ldr	pc, [ip, #3232]!	; 0xca0

00011494 <fdatasync@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #102400	; 0x19000
   1149c:	ldr	pc, [ip, #3224]!	; 0xc98

000114a0 <abort@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #102400	; 0x19000
   114a8:	ldr	pc, [ip, #3216]!	; 0xc90

000114ac <close@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #102400	; 0x19000
   114b4:	ldr	pc, [ip, #3208]!	; 0xc88

000114b8 <__assert_fail@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #102400	; 0x19000
   114c0:	ldr	pc, [ip, #3200]!	; 0xc80

Disassembly of section .text:

000114c8 <.text>:
   114c8:	mov	fp, #0
   114cc:	mov	lr, #0
   114d0:	pop	{r1}		; (ldr r1, [sp], #4)
   114d4:	mov	r2, sp
   114d8:	push	{r2}		; (str r2, [sp, #-4]!)
   114dc:	push	{r0}		; (str r0, [sp, #-4]!)
   114e0:	ldr	ip, [pc, #16]	; 114f8 <__assert_fail@plt+0x40>
   114e4:	push	{ip}		; (str ip, [sp, #-4]!)
   114e8:	ldr	r0, [pc, #12]	; 114fc <__assert_fail@plt+0x44>
   114ec:	ldr	r3, [pc, #12]	; 11500 <__assert_fail@plt+0x48>
   114f0:	bl	112cc <__libc_start_main@plt>
   114f4:	bl	114a0 <abort@plt>
   114f8:	andeq	r9, r1, r0, asr r2
   114fc:	andeq	r2, r1, r4, lsr sl
   11500:	strdeq	r9, [r1], -r0
   11504:	ldr	r3, [pc, #20]	; 11520 <__assert_fail@plt+0x68>
   11508:	ldr	r2, [pc, #20]	; 11524 <__assert_fail@plt+0x6c>
   1150c:	add	r3, pc, r3
   11510:	ldr	r2, [r3, r2]
   11514:	cmp	r2, #0
   11518:	bxeq	lr
   1151c:	b	112e4 <__gmon_start__@plt>
   11520:	andeq	r9, r1, ip, ror #21
   11524:	andeq	r0, r0, r4, asr #2
   11528:	ldr	r3, [pc, #28]	; 1154c <__assert_fail@plt+0x94>
   1152c:	ldr	r0, [pc, #28]	; 11550 <__assert_fail@plt+0x98>
   11530:	sub	r3, r3, r0
   11534:	cmp	r3, #6
   11538:	bxls	lr
   1153c:	ldr	r3, [pc, #16]	; 11554 <__assert_fail@plt+0x9c>
   11540:	cmp	r3, #0
   11544:	bxeq	lr
   11548:	bx	r3
   1154c:	muleq	r2, pc, r1	; <UNPREDICTABLE>
   11550:	muleq	r2, ip, r1
   11554:	andeq	r0, r0, r0
   11558:	ldr	r1, [pc, #36]	; 11584 <__assert_fail@plt+0xcc>
   1155c:	ldr	r0, [pc, #36]	; 11588 <__assert_fail@plt+0xd0>
   11560:	sub	r1, r1, r0
   11564:	asr	r1, r1, #2
   11568:	add	r1, r1, r1, lsr #31
   1156c:	asrs	r1, r1, #1
   11570:	bxeq	lr
   11574:	ldr	r3, [pc, #16]	; 1158c <__assert_fail@plt+0xd4>
   11578:	cmp	r3, #0
   1157c:	bxeq	lr
   11580:	bx	r3
   11584:	muleq	r2, ip, r1
   11588:	muleq	r2, ip, r1
   1158c:	andeq	r0, r0, r0
   11590:	push	{r4, lr}
   11594:	ldr	r4, [pc, #24]	; 115b4 <__assert_fail@plt+0xfc>
   11598:	ldrb	r3, [r4]
   1159c:	cmp	r3, #0
   115a0:	popne	{r4, pc}
   115a4:	bl	11528 <__assert_fail@plt+0x70>
   115a8:	mov	r3, #1
   115ac:	strb	r3, [r4]
   115b0:	pop	{r4, pc}
   115b4:			; <UNDEFINED> instruction: 0x0002b1bc
   115b8:	ldr	r0, [pc, #40]	; 115e8 <__assert_fail@plt+0x130>
   115bc:	ldr	r3, [r0]
   115c0:	cmp	r3, #0
   115c4:	bne	115cc <__assert_fail@plt+0x114>
   115c8:	b	11558 <__assert_fail@plt+0xa0>
   115cc:	ldr	r3, [pc, #24]	; 115ec <__assert_fail@plt+0x134>
   115d0:	cmp	r3, #0
   115d4:	beq	115c8 <__assert_fail@plt+0x110>
   115d8:	push	{r4, lr}
   115dc:	blx	r3
   115e0:	pop	{r4, lr}
   115e4:	b	11558 <__assert_fail@plt+0xa0>
   115e8:	andeq	sl, r2, r4, lsl pc
   115ec:	andeq	r0, r0, r0
   115f0:	push	{r4, lr}
   115f4:	ldr	r3, [pc, #8]	; 11604 <__assert_fail@plt+0x14c>
   115f8:	ldr	r0, [r3]
   115fc:	bl	16570 <__assert_fail@plt+0x50b8>
   11600:	pop	{r4, pc}
   11604:	andeq	fp, r2, r0, asr #3
   11608:	push	{r4, r5, r6, lr}
   1160c:	mov	r5, r0
   11610:	mov	r4, r1
   11614:	mov	r1, #3
   11618:	bl	139dc <__assert_fail@plt+0x2524>
   1161c:	cmp	r0, #0
   11620:	pople	{r4, r5, r6, pc}
   11624:	cmp	r4, #0
   11628:	orrne	r2, r0, #65536	; 0x10000
   1162c:	biceq	r2, r0, #65536	; 0x10000
   11630:	cmp	r2, r0
   11634:	popeq	{r4, r5, r6, pc}
   11638:	mov	r1, #4
   1163c:	mov	r0, r5
   11640:	bl	139dc <__assert_fail@plt+0x2524>
   11644:	pop	{r4, r5, r6, pc}
   11648:	push	{r4, r5, r6, r7, r8, lr}
   1164c:	mov	r6, r0
   11650:	mov	r7, r1
   11654:	bl	11494 <fdatasync@plt>
   11658:	cmp	r0, #0
   1165c:	popeq	{r4, r5, r6, r7, r8, pc}
   11660:	bl	11338 <__errno_location@plt>
   11664:	mov	r5, r0
   11668:	ldr	r4, [r0]
   1166c:	sub	r3, r4, #21
   11670:	cmp	r4, #9
   11674:	cmpne	r3, #1
   11678:	bhi	116ac <__assert_fail@plt+0x1f4>
   1167c:	mov	r0, r6
   11680:	bl	1114c <fsync@plt>
   11684:	cmp	r0, #0
   11688:	popeq	{r4, r5, r6, r7, r8, pc}
   1168c:	ldr	r4, [r5]
   11690:	sub	r3, r4, #21
   11694:	cmp	r4, #9
   11698:	cmpne	r3, #1
   1169c:	bhi	116dc <__assert_fail@plt+0x224>
   116a0:	bl	11464 <sync@plt>
   116a4:	mov	r0, #0
   116a8:	pop	{r4, r5, r6, r7, r8, pc}
   116ac:	mov	r2, #5
   116b0:	ldr	r1, [pc, #84]	; 1170c <__assert_fail@plt+0x254>
   116b4:	mov	r0, #0
   116b8:	bl	111e8 <dcgettext@plt>
   116bc:	mov	r3, r7
   116c0:	mov	r2, r0
   116c4:	mov	r1, r4
   116c8:	mov	r0, #0
   116cc:	bl	1129c <error@plt>
   116d0:	str	r4, [r5]
   116d4:	mvn	r0, #0
   116d8:	pop	{r4, r5, r6, r7, r8, pc}
   116dc:	mov	r2, #5
   116e0:	ldr	r1, [pc, #40]	; 11710 <__assert_fail@plt+0x258>
   116e4:	mov	r0, #0
   116e8:	bl	111e8 <dcgettext@plt>
   116ec:	mov	r3, r7
   116f0:	mov	r2, r0
   116f4:	mov	r1, r4
   116f8:	mov	r0, #0
   116fc:	bl	1129c <error@plt>
   11700:	str	r4, [r5]
   11704:	mvn	r0, #0
   11708:	pop	{r4, r5, r6, r7, r8, pc}
   1170c:	andeq	r9, r1, r4, lsr #9
   11710:			; <UNDEFINED> instruction: 0x000194bc
   11714:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11718:	sub	sp, sp, #2032	; 0x7f0
   1171c:	sub	sp, sp, #12
   11720:	str	r0, [sp, #32]
   11724:	mov	r4, r1
   11728:	str	r2, [sp, #36]	; 0x24
   1172c:	str	r3, [sp, #56]	; 0x38
   11730:	ldrd	r8, [r3]
   11734:	bl	1132c <getpagesize@plt>
   11738:	ldr	r3, [sp, #2080]	; 0x820
   1173c:	cmp	r3, #0
   11740:	ble	117cc <__assert_fail@plt+0x314>
   11744:	lsl	r3, r3, #20
   11748:	lsr	r3, r3, #20
   1174c:	orr	r2, r3, r3, lsl #12
   11750:	lsr	r3, r3, #4
   11754:	lsr	r1, r2, #8
   11758:	uxtb	r1, r1
   1175c:	uxtb	r2, r2
   11760:	cmp	r2, r3
   11764:	cmpeq	r1, r3
   11768:	movne	r3, #1
   1176c:	moveq	r3, #0
   11770:	cmp	r3, #0
   11774:	movne	r3, #61440	; 0xf000
   11778:	moveq	r3, #65536	; 0x10000
   1177c:	str	r3, [sp, #52]	; 0x34
   11780:	ldr	r6, [sp, #52]	; 0x34
   11784:	add	r5, r6, #2
   11788:	ldr	r3, [pc, #2216]	; 12038 <__assert_fail@plt+0xb80>
   1178c:	umull	r3, r5, r3, r5
   11790:	lsr	r5, r5, #1
   11794:	add	r5, r5, r5, lsl #1
   11798:	mov	r1, r5
   1179c:	bl	17500 <__assert_fail@plt+0x6048>
   117a0:	mov	fp, r0
   117a4:	cmp	r8, #1
   117a8:	sbcs	r3, r9, #0
   117ac:	blt	11e4c <__assert_fail@plt+0x994>
   117b0:	mov	r3, #0
   117b4:	cmp	r8, r6
   117b8:	sbcs	r3, r9, r3
   117bc:	bge	11e4c <__assert_fail@plt+0x994>
   117c0:	mov	r3, #1
   117c4:	str	r3, [sp, #40]	; 0x28
   117c8:	b	11e60 <__assert_fail@plt+0x9a8>
   117cc:	mov	r3, #65536	; 0x10000
   117d0:	str	r3, [sp, #52]	; 0x34
   117d4:	b	11780 <__assert_fail@plt+0x2c8>
   117d8:	add	r2, sp, #728	; 0x2d8
   117dc:	mov	r3, #6
   117e0:	strh	r3, [r2]
   117e4:	mov	r3, #1
   117e8:	str	r3, [sp, #732]	; 0x2dc
   117ec:	ldr	r1, [pc, #2120]	; 1203c <__assert_fail@plt+0xb84>
   117f0:	ldr	r0, [sp, #32]
   117f4:	bl	11254 <ioctl@plt>
   117f8:	cmp	r0, #0
   117fc:	bne	11e70 <__assert_fail@plt+0x9b8>
   11800:	b	1180c <__assert_fail@plt+0x354>
   11804:	orrs	r3, r0, r1
   11808:	bne	11ea0 <__assert_fail@plt+0x9e8>
   1180c:	ldr	r3, [sp, #2080]	; 0x820
   11810:	cmp	r3, #0
   11814:	blt	119c0 <__assert_fail@plt+0x508>
   11818:	cmp	r8, #0
   1181c:	sbcs	r3, r9, #0
   11820:	blt	11834 <__assert_fail@plt+0x37c>
   11824:	mov	r3, #0
   11828:	cmp	r8, r5
   1182c:	sbcs	r3, r9, r3
   11830:	movlt	r5, r8
   11834:	ldr	r3, [sp, #2080]	; 0x820
   11838:	lsl	r3, r3, #20
   1183c:	lsr	r3, r3, #20
   11840:	orr	r3, r3, r3, lsl #12
   11844:	lsr	r2, r3, #4
   11848:	strb	r2, [fp]
   1184c:	lsr	r2, r3, #8
   11850:	strb	r2, [fp, #1]
   11854:	strb	r3, [fp, #2]
   11858:	lsr	r6, r5, #1
   1185c:	cmp	r6, #2
   11860:	bls	11980 <__assert_fail@plt+0x4c8>
   11864:	mov	r4, #3
   11868:	mov	r2, r4
   1186c:	mov	r1, fp
   11870:	add	r0, fp, r4
   11874:	bl	11194 <memcpy@plt>
   11878:	lsl	r4, r4, #1
   1187c:	cmp	r4, r6
   11880:	bls	11868 <__assert_fail@plt+0x3b0>
   11884:	cmp	r5, r4
   11888:	bhi	11988 <__assert_fail@plt+0x4d0>
   1188c:	ldr	r3, [sp, #2080]	; 0x820
   11890:	tst	r3, #4096	; 0x1000
   11894:	beq	118c0 <__assert_fail@plt+0x408>
   11898:	cmp	r5, #0
   1189c:	beq	118c0 <__assert_fail@plt+0x408>
   118a0:	mov	r3, #0
   118a4:	mvn	r1, #127	; 0x7f
   118a8:	ldrb	r2, [fp, r3]
   118ac:	eor	r2, r2, r1
   118b0:	strb	r2, [fp, r3]
   118b4:	add	r3, r3, #512	; 0x200
   118b8:	cmp	r5, r3
   118bc:	bhi	118a8 <__assert_fail@plt+0x3f0>
   118c0:	cmp	fp, #0
   118c4:	beq	1199c <__assert_fail@plt+0x4e4>
   118c8:	ldrb	r3, [fp, #2]
   118cc:	str	r3, [sp, #8]
   118d0:	ldrb	r3, [fp, #1]
   118d4:	str	r3, [sp, #4]
   118d8:	ldrb	r3, [fp]
   118dc:	str	r3, [sp]
   118e0:	ldr	r3, [pc, #1880]	; 12040 <__assert_fail@plt+0xb88>
   118e4:	mov	r2, #7
   118e8:	mov	r1, #1
   118ec:	add	r0, sp, #2032	; 0x7f0
   118f0:	bl	11344 <__sprintf_chk@plt>
   118f4:	ldr	r3, [sp, #2092]	; 0x82c
   118f8:	cmp	r3, #0
   118fc:	moveq	r3, #0
   11900:	streq	r3, [sp, #64]	; 0x40
   11904:	bne	119e4 <__assert_fail@plt+0x52c>
   11908:	ldr	r3, [pc, #1844]	; 12044 <__assert_fail@plt+0xb8c>
   1190c:	str	r3, [sp, #60]	; 0x3c
   11910:	mov	sl, #0
   11914:	str	sl, [sp, #68]	; 0x44
   11918:	mov	r2, #0
   1191c:	mov	r3, #0
   11920:	strd	r2, [sp, #24]
   11924:	mov	r3, fp
   11928:	mov	fp, sl
   1192c:	mov	sl, r3
   11930:	cmp	r8, #0
   11934:	sbcs	r3, r9, #0
   11938:	blt	11a44 <__assert_fail@plt+0x58c>
   1193c:	ldrd	r4, [sp, #24]
   11940:	subs	r0, r8, r4
   11944:	sbc	r1, r9, r5
   11948:	ldr	r2, [sp, #52]	; 0x34
   1194c:	mov	r3, #0
   11950:	cmp	r0, r2
   11954:	sbcs	r3, r1, r3
   11958:	bge	11a44 <__assert_fail@plt+0x58c>
   1195c:	cmp	r8, r4
   11960:	sbcs	r3, r9, r5
   11964:	blt	11e08 <__assert_fail@plt+0x950>
   11968:	subs	r5, r8, r4
   1196c:	beq	11a34 <__assert_fail@plt+0x57c>
   11970:	ldr	r3, [sp, #2080]	; 0x820
   11974:	cmp	r3, #0
   11978:	bge	11a5c <__assert_fail@plt+0x5a4>
   1197c:	b	11a78 <__assert_fail@plt+0x5c0>
   11980:	mov	r4, #3
   11984:	b	11884 <__assert_fail@plt+0x3cc>
   11988:	sub	r2, r5, r4
   1198c:	mov	r1, fp
   11990:	add	r0, fp, r4
   11994:	bl	11194 <memcpy@plt>
   11998:	b	1188c <__assert_fail@plt+0x3d4>
   1199c:	ldr	r3, [pc, #1700]	; 12048 <__assert_fail@plt+0xb90>
   119a0:	ldm	r3, {r0, r1}
   119a4:	str	r0, [sp, #2032]	; 0x7f0
   119a8:	add	r3, sp, #2032	; 0x7f0
   119ac:	add	r3, r3, #4
   119b0:	strh	r1, [r3]
   119b4:	lsr	r1, r1, #16
   119b8:	strb	r1, [sp, #2038]	; 0x7f6
   119bc:	b	118f4 <__assert_fail@plt+0x43c>
   119c0:	ldr	r3, [pc, #1664]	; 12048 <__assert_fail@plt+0xb90>
   119c4:	ldm	r3, {r0, r1}
   119c8:	str	r0, [sp, #2032]	; 0x7f0
   119cc:	add	r3, sp, #2032	; 0x7f0
   119d0:	add	r3, r3, #4
   119d4:	strh	r1, [r3]
   119d8:	lsr	r1, r1, #16
   119dc:	strb	r1, [sp, #2038]	; 0x7f6
   119e0:	b	118f4 <__assert_fail@plt+0x43c>
   119e4:	mov	r2, #5
   119e8:	ldr	r1, [pc, #1628]	; 1204c <__assert_fail@plt+0xb94>
   119ec:	mov	r0, #0
   119f0:	bl	111e8 <dcgettext@plt>
   119f4:	add	r3, sp, #2032	; 0x7f0
   119f8:	str	r3, [sp, #8]
   119fc:	ldr	r3, [sp, #2092]	; 0x82c
   11a00:	str	r3, [sp, #4]
   11a04:	ldr	r3, [sp, #2088]	; 0x828
   11a08:	str	r3, [sp]
   11a0c:	ldr	r3, [sp, #36]	; 0x24
   11a10:	mov	r2, r0
   11a14:	mov	r1, #0
   11a18:	mov	r0, r1
   11a1c:	bl	1129c <error@plt>
   11a20:	mov	r0, #0
   11a24:	bl	111b8 <time@plt>
   11a28:	add	r3, r0, #5
   11a2c:	str	r3, [sp, #64]	; 0x40
   11a30:	b	11908 <__assert_fail@plt+0x450>
   11a34:	mov	r3, sl
   11a38:	mov	sl, fp
   11a3c:	mov	fp, r3
   11a40:	b	11e14 <__assert_fail@plt+0x95c>
   11a44:	ldr	r3, [sp, #2080]	; 0x820
   11a48:	cmp	r3, #0
   11a4c:	ldrge	r5, [sp, #52]	; 0x34
   11a50:	blt	11a74 <__assert_fail@plt+0x5bc>
   11a54:	cmp	r5, #0
   11a58:	beq	11ca0 <__assert_fail@plt+0x7e8>
   11a5c:	mov	r4, #0
   11a60:	cmp	r9, r4
   11a64:	movlt	r3, #0
   11a68:	movge	r3, #1
   11a6c:	str	r3, [sp, #44]	; 0x2c
   11a70:	b	11b60 <__assert_fail@plt+0x6a8>
   11a74:	ldr	r5, [sp, #52]	; 0x34
   11a78:	mov	r2, r5
   11a7c:	mov	r1, sl
   11a80:	ldr	r0, [sp, #2084]	; 0x824
   11a84:	bl	16794 <__assert_fail@plt+0x52dc>
   11a88:	b	11a54 <__assert_fail@plt+0x59c>
   11a8c:	bl	11338 <__errno_location@plt>
   11a90:	str	r0, [sp, #48]	; 0x30
   11a94:	ldr	r7, [r0]
   11a98:	ldr	r3, [sp, #40]	; 0x28
   11a9c:	eor	r6, r3, #1
   11aa0:	cmp	r7, #22
   11aa4:	movne	r6, #0
   11aa8:	andeq	r6, r6, #1
   11aac:	cmp	r6, #0
   11ab0:	bne	11c40 <__assert_fail@plt+0x788>
   11ab4:	mov	r2, #5
   11ab8:	ldr	r1, [pc, #1424]	; 12050 <__assert_fail@plt+0xb98>
   11abc:	mov	r0, #0
   11ac0:	bl	111e8 <dcgettext@plt>
   11ac4:	mov	r6, r0
   11ac8:	add	r2, sp, #728	; 0x2d8
   11acc:	ldrd	r0, [sp, #24]
   11ad0:	adds	r0, r0, r4
   11ad4:	adc	r1, r1, #0
   11ad8:	bl	14774 <__assert_fail@plt+0x32bc>
   11adc:	str	r0, [sp]
   11ae0:	ldr	r3, [sp, #36]	; 0x24
   11ae4:	mov	r2, r6
   11ae8:	mov	r1, r7
   11aec:	mov	r0, #0
   11af0:	bl	1129c <error@plt>
   11af4:	ldr	fp, [sp, #44]	; 0x2c
   11af8:	cmp	r7, #5
   11afc:	movne	fp, #0
   11b00:	andeq	fp, fp, #1
   11b04:	cmp	fp, #0
   11b08:	beq	12020 <__assert_fail@plt+0xb68>
   11b0c:	mvn	r6, r4, lsr #9
   11b10:	mvn	r6, r6, lsl #9
   11b14:	cmp	r5, r6
   11b18:	bls	12028 <__assert_fail@plt+0xb70>
   11b1c:	add	r6, r6, #1
   11b20:	mov	r3, #0
   11b24:	str	r3, [sp]
   11b28:	ldrd	r2, [sp, #24]
   11b2c:	adds	r2, r2, r6
   11b30:	adc	r3, r3, #0
   11b34:	ldr	r0, [sp, #32]
   11b38:	bl	11260 <lseek64@plt>
   11b3c:	mvn	r2, #0
   11b40:	mvn	r3, #0
   11b44:	cmp	r1, r3
   11b48:	cmpeq	r0, r2
   11b4c:	beq	11c58 <__assert_fail@plt+0x7a0>
   11b50:	sub	r0, r6, r4
   11b54:	add	r4, r4, r0
   11b58:	cmp	r5, r4
   11b5c:	bls	11ca4 <__assert_fail@plt+0x7ec>
   11b60:	sub	r2, r5, r4
   11b64:	add	r1, sl, r4
   11b68:	ldr	r0, [sp, #32]
   11b6c:	bl	1138c <write@plt>
   11b70:	cmp	r0, #0
   11b74:	bgt	11b54 <__assert_fail@plt+0x69c>
   11b78:	cmp	r8, #0
   11b7c:	sbcs	r3, r9, #0
   11b80:	bge	11a8c <__assert_fail@plt+0x5d4>
   11b84:	cmp	r0, #0
   11b88:	beq	11b9c <__assert_fail@plt+0x6e4>
   11b8c:	bl	11338 <__errno_location@plt>
   11b90:	ldr	r3, [r0]
   11b94:	cmp	r3, #28
   11b98:	bne	11a8c <__assert_fail@plt+0x5d4>
   11b9c:	mov	r5, #0
   11ba0:	mvn	r2, #0
   11ba4:	mvn	r3, #-2147483648	; 0x80000000
   11ba8:	ldrd	r8, [sp, #24]
   11bac:	subs	r0, r2, r8
   11bb0:	sbc	r1, r3, r9
   11bb4:	mov	r3, r1
   11bb8:	cmp	r0, r4
   11bbc:	sbcs	r3, r3, r5
   11bc0:	blt	11d50 <__assert_fail@plt+0x898>
   11bc4:	adds	r8, r8, r4
   11bc8:	adc	r9, r9, r5
   11bcc:	ldr	r3, [sp, #56]	; 0x38
   11bd0:	strd	r8, [r3]
   11bd4:	strd	r8, [sp, #24]
   11bd8:	ldr	r3, [sp, #2092]	; 0x82c
   11bdc:	cmp	r3, #0
   11be0:	beq	11930 <__assert_fail@plt+0x478>
   11be4:	ldr	r3, [sp, #60]	; 0x3c
   11be8:	ldrb	r3, [r3]
   11bec:	cmp	r3, #0
   11bf0:	bne	11ed0 <__assert_fail@plt+0xa18>
   11bf4:	mov	r0, #0
   11bf8:	bl	111b8 <time@plt>
   11bfc:	str	r0, [sp, #68]	; 0x44
   11c00:	ldr	r2, [sp, #64]	; 0x40
   11c04:	cmp	r2, r0
   11c08:	bgt	11930 <__assert_fail@plt+0x478>
   11c0c:	mov	r4, r8
   11c10:	mov	r5, r9
   11c14:	mov	r2, #1
   11c18:	mov	r3, #0
   11c1c:	strd	r2, [sp, #8]
   11c20:	strd	r2, [sp]
   11c24:	ldr	r3, [pc, #1064]	; 12054 <__assert_fail@plt+0xb9c>
   11c28:	add	r2, sp, #76	; 0x4c
   11c2c:	mov	r0, r8
   11c30:	mov	r1, r9
   11c34:	bl	13d58 <__assert_fail@plt+0x28a0>
   11c38:	mov	r6, r0
   11c3c:	b	11f00 <__assert_fail@plt+0xa48>
   11c40:	mov	r1, #0
   11c44:	ldr	r0, [sp, #32]
   11c48:	bl	11608 <__assert_fail@plt+0x150>
   11c4c:	str	r6, [sp, #40]	; 0x28
   11c50:	mov	r0, #0
   11c54:	b	11b54 <__assert_fail@plt+0x69c>
   11c58:	mov	fp, sl
   11c5c:	ldr	r3, [sp, #48]	; 0x30
   11c60:	ldr	r4, [r3]
   11c64:	mov	r2, #5
   11c68:	ldr	r1, [pc, #1000]	; 12058 <__assert_fail@plt+0xba0>
   11c6c:	mov	r0, #0
   11c70:	bl	111e8 <dcgettext@plt>
   11c74:	ldr	r3, [sp, #36]	; 0x24
   11c78:	mov	r2, r0
   11c7c:	mov	r1, r4
   11c80:	mov	r0, #0
   11c84:	bl	1129c <error@plt>
   11c88:	mov	r0, fp
   11c8c:	bl	13c70 <__assert_fail@plt+0x27b8>
   11c90:	mvn	r0, #0
   11c94:	add	sp, sp, #2032	; 0x7f0
   11c98:	add	sp, sp, #12
   11c9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ca0:	mov	r4, r5
   11ca4:	mov	r5, #0
   11ca8:	mvn	r2, #0
   11cac:	mvn	r3, #-2147483648	; 0x80000000
   11cb0:	ldrd	r0, [sp, #24]
   11cb4:	subs	r0, r2, r0
   11cb8:	sbc	r1, r3, r1
   11cbc:	mov	r3, r1
   11cc0:	cmp	r0, r4
   11cc4:	sbcs	r3, r3, r5
   11cc8:	blt	11d50 <__assert_fail@plt+0x898>
   11ccc:	ldrd	r2, [sp, #24]
   11cd0:	adds	r2, r2, r4
   11cd4:	adc	r3, r3, r5
   11cd8:	strd	r2, [sp, #24]
   11cdc:	ldr	r1, [sp, #2092]	; 0x82c
   11ce0:	cmp	r1, #0
   11ce4:	beq	11930 <__assert_fail@plt+0x478>
   11ce8:	cmp	r9, r3
   11cec:	cmpeq	r8, r2
   11cf0:	beq	11be4 <__assert_fail@plt+0x72c>
   11cf4:	mov	r0, #0
   11cf8:	bl	111b8 <time@plt>
   11cfc:	str	r0, [sp, #68]	; 0x44
   11d00:	ldr	r2, [sp, #64]	; 0x40
   11d04:	cmp	r2, r0
   11d08:	bgt	11930 <__assert_fail@plt+0x478>
   11d0c:	ldrd	r0, [sp, #24]
   11d10:	mov	r4, r0
   11d14:	mov	r5, r1
   11d18:	mov	r2, #1
   11d1c:	mov	r3, #0
   11d20:	strd	r2, [sp, #8]
   11d24:	strd	r2, [sp]
   11d28:	ldr	r3, [pc, #804]	; 12054 <__assert_fail@plt+0xb9c>
   11d2c:	add	r2, sp, #76	; 0x4c
   11d30:	bl	13d58 <__assert_fail@plt+0x28a0>
   11d34:	mov	r6, r0
   11d38:	mov	r1, r0
   11d3c:	ldr	r0, [sp, #60]	; 0x3c
   11d40:	bl	11158 <strcmp@plt>
   11d44:	cmp	r0, #0
   11d48:	bne	11f00 <__assert_fail@plt+0xa48>
   11d4c:	b	11930 <__assert_fail@plt+0x478>
   11d50:	mov	fp, sl
   11d54:	mov	r2, #5
   11d58:	ldr	r1, [pc, #764]	; 1205c <__assert_fail@plt+0xba4>
   11d5c:	mov	r0, #0
   11d60:	bl	111e8 <dcgettext@plt>
   11d64:	ldr	r3, [sp, #36]	; 0x24
   11d68:	mov	r2, r0
   11d6c:	mov	r1, #0
   11d70:	mov	r0, r1
   11d74:	bl	1129c <error@plt>
   11d78:	b	11c88 <__assert_fail@plt+0x7d0>
   11d7c:	mov	r2, #5
   11d80:	ldr	r1, [pc, #728]	; 12060 <__assert_fail@plt+0xba8>
   11d84:	mov	r0, #0
   11d88:	bl	111e8 <dcgettext@plt>
   11d8c:	str	r6, [sp, #12]
   11d90:	add	r3, sp, #2032	; 0x7f0
   11d94:	str	r3, [sp, #8]
   11d98:	ldr	r3, [sp, #2092]	; 0x82c
   11d9c:	str	r3, [sp, #4]
   11da0:	ldr	r3, [sp, #2088]	; 0x828
   11da4:	str	r3, [sp]
   11da8:	ldr	r3, [sp, #36]	; 0x24
   11dac:	mov	r2, r0
   11db0:	mov	r1, #0
   11db4:	mov	r0, r1
   11db8:	bl	1129c <error@plt>
   11dbc:	b	11fc8 <__assert_fail@plt+0xb10>
   11dc0:	mov	r2, #100	; 0x64
   11dc4:	mov	r3, #0
   11dc8:	mov	r0, r8
   11dcc:	mov	r1, r9
   11dd0:	bl	18f60 <__assert_fail@plt+0x7aa8>
   11dd4:	mov	r2, r0
   11dd8:	mov	r3, r1
   11ddc:	mov	r0, r4
   11de0:	mov	r1, r5
   11de4:	bl	19034 <__assert_fail@plt+0x7b7c>
   11de8:	mov	r5, r0
   11dec:	b	11f48 <__assert_fail@plt+0xa90>
   11df0:	mov	fp, sl
   11df4:	b	11c88 <__assert_fail@plt+0x7d0>
   11df8:	add	r3, sp, #1376	; 0x560
   11dfc:	add	r3, r3, #4
   11e00:	str	r3, [sp, #60]	; 0x3c
   11e04:	b	11930 <__assert_fail@plt+0x478>
   11e08:	mov	r3, sl
   11e0c:	mov	sl, fp
   11e10:	mov	fp, r3
   11e14:	ldr	r1, [sp, #36]	; 0x24
   11e18:	ldr	r0, [sp, #32]
   11e1c:	bl	11648 <__assert_fail@plt+0x190>
   11e20:	cmp	r0, #0
   11e24:	beq	11e3c <__assert_fail@plt+0x984>
   11e28:	bl	11338 <__errno_location@plt>
   11e2c:	ldr	r3, [r0]
   11e30:	cmp	r3, #5
   11e34:	moveq	sl, #1
   11e38:	bne	11c88 <__assert_fail@plt+0x7d0>
   11e3c:	mov	r0, fp
   11e40:	bl	13c70 <__assert_fail@plt+0x27b8>
   11e44:	mov	r0, sl
   11e48:	b	11c94 <__assert_fail@plt+0x7dc>
   11e4c:	mov	r1, #1
   11e50:	ldr	r0, [sp, #32]
   11e54:	bl	11608 <__assert_fail@plt+0x150>
   11e58:	mov	r3, #0
   11e5c:	str	r3, [sp, #40]	; 0x28
   11e60:	ldr	r3, [r4, #16]
   11e64:	and	r3, r3, #61440	; 0xf000
   11e68:	cmp	r3, #8192	; 0x2000
   11e6c:	beq	117d8 <__assert_fail@plt+0x320>
   11e70:	mov	r3, #0
   11e74:	str	r3, [sp]
   11e78:	mov	r2, #0
   11e7c:	mov	r3, #0
   11e80:	ldr	r0, [sp, #32]
   11e84:	bl	11260 <lseek64@plt>
   11e88:	cmp	r0, #1
   11e8c:	sbcs	r3, r1, #0
   11e90:	blt	11804 <__assert_fail@plt+0x34c>
   11e94:	bl	11338 <__errno_location@plt>
   11e98:	mov	r3, #22
   11e9c:	str	r3, [r0]
   11ea0:	bl	11338 <__errno_location@plt>
   11ea4:	ldr	r4, [r0]
   11ea8:	mov	r2, #5
   11eac:	ldr	r1, [pc, #432]	; 12064 <__assert_fail@plt+0xbac>
   11eb0:	mov	r0, #0
   11eb4:	bl	111e8 <dcgettext@plt>
   11eb8:	ldr	r3, [sp, #36]	; 0x24
   11ebc:	mov	r2, r0
   11ec0:	mov	r1, r4
   11ec4:	mov	r0, #0
   11ec8:	bl	1129c <error@plt>
   11ecc:	b	11c88 <__assert_fail@plt+0x7d0>
   11ed0:	mov	r4, r8
   11ed4:	mov	r5, r9
   11ed8:	mov	r2, #1
   11edc:	mov	r3, #0
   11ee0:	strd	r2, [sp, #8]
   11ee4:	strd	r2, [sp]
   11ee8:	ldr	r3, [pc, #356]	; 12054 <__assert_fail@plt+0xb9c>
   11eec:	add	r2, sp, #76	; 0x4c
   11ef0:	mov	r0, r8
   11ef4:	mov	r1, r9
   11ef8:	bl	13d58 <__assert_fail@plt+0x28a0>
   11efc:	mov	r6, r0
   11f00:	cmp	r8, #0
   11f04:	sbcs	r3, r9, #0
   11f08:	blt	11d7c <__assert_fail@plt+0x8c4>
   11f0c:	orrs	r3, r8, r9
   11f10:	moveq	r5, #100	; 0x64
   11f14:	beq	11f48 <__assert_fail@plt+0xa90>
   11f18:	add	r3, pc, #272	; 0x110
   11f1c:	ldrd	r2, [r3]
   11f20:	cmp	r5, r3
   11f24:	cmpeq	r4, r2
   11f28:	bhi	11dc0 <__assert_fail@plt+0x908>
   11f2c:	mov	r3, #100	; 0x64
   11f30:	umull	r0, r1, r4, r3
   11f34:	mla	r1, r3, r5, r1
   11f38:	mov	r2, r8
   11f3c:	mov	r3, r9
   11f40:	bl	19034 <__assert_fail@plt+0x7b7c>
   11f44:	mov	r5, r0
   11f48:	mov	r2, #1
   11f4c:	mov	r3, #0
   11f50:	strd	r2, [sp, #8]
   11f54:	strd	r2, [sp]
   11f58:	mov	r3, #432	; 0x1b0
   11f5c:	add	r2, sp, #728	; 0x2d8
   11f60:	mov	r0, r8
   11f64:	mov	r1, r9
   11f68:	bl	13d58 <__assert_fail@plt+0x28a0>
   11f6c:	mov	r4, r0
   11f70:	ldrd	r2, [sp, #24]
   11f74:	cmp	r9, r3
   11f78:	cmpeq	r8, r2
   11f7c:	moveq	r6, r0
   11f80:	mov	r2, #5
   11f84:	ldr	r1, [pc, #220]	; 12068 <__assert_fail@plt+0xbb0>
   11f88:	mov	r0, #0
   11f8c:	bl	111e8 <dcgettext@plt>
   11f90:	str	r5, [sp, #20]
   11f94:	str	r4, [sp, #16]
   11f98:	str	r6, [sp, #12]
   11f9c:	add	r3, sp, #2032	; 0x7f0
   11fa0:	str	r3, [sp, #8]
   11fa4:	ldr	r3, [sp, #2092]	; 0x82c
   11fa8:	str	r3, [sp, #4]
   11fac:	ldr	r3, [sp, #2088]	; 0x828
   11fb0:	str	r3, [sp]
   11fb4:	ldr	r3, [sp, #36]	; 0x24
   11fb8:	mov	r2, r0
   11fbc:	mov	r1, #0
   11fc0:	mov	r0, r1
   11fc4:	bl	1129c <error@plt>
   11fc8:	mov	r2, #652	; 0x28c
   11fcc:	mov	r1, r6
   11fd0:	add	r0, sp, #1376	; 0x560
   11fd4:	add	r0, r0, #4
   11fd8:	bl	11278 <__strcpy_chk@plt>
   11fdc:	ldr	r3, [sp, #68]	; 0x44
   11fe0:	add	r3, r3, #5
   11fe4:	str	r3, [sp, #64]	; 0x40
   11fe8:	ldr	r1, [sp, #36]	; 0x24
   11fec:	ldr	r0, [sp, #32]
   11ff0:	bl	11648 <__assert_fail@plt+0x190>
   11ff4:	cmp	r0, #0
   11ff8:	beq	11df8 <__assert_fail@plt+0x940>
   11ffc:	bl	11338 <__errno_location@plt>
   12000:	ldr	r3, [r0]
   12004:	cmp	r3, #5
   12008:	bne	11df0 <__assert_fail@plt+0x938>
   1200c:	add	r3, sp, #1376	; 0x560
   12010:	add	r3, r3, #4
   12014:	str	r3, [sp, #60]	; 0x3c
   12018:	mov	fp, #1
   1201c:	b	11930 <__assert_fail@plt+0x478>
   12020:	mov	fp, sl
   12024:	b	11c88 <__assert_fail@plt+0x7d0>
   12028:	mov	fp, sl
   1202c:	b	11c88 <__assert_fail@plt+0x7d0>
   12030:			; <UNDEFINED> instruction: 0xf5c28f5c
   12034:	addeq	r5, pc, #40, 24	; 0x2800
   12038:	bge	feabcaec <optarg@@GLIBC_2.4+0xfea91934>
   1203c:	andmi	r6, r8, r1, lsl #26
   12040:	andeq	r9, r1, r4, ror #9
   12044:	andeq	r9, r1, ip, lsl #24
   12048:	muleq	r1, r8, r5
   1204c:	strdeq	r9, [r1], -r4
   12050:	andeq	r9, r1, r0, lsl r5
   12054:			; <UNDEFINED> instruction: 0x000001b2
   12058:	andeq	r9, r1, r0, lsr r5
   1205c:	andeq	r9, r1, r4, asr #10
   12060:	andeq	r9, r1, r8, asr r5
   12064:	ldrdeq	r9, [r1], -r0
   12068:	andeq	r9, r1, r4, ror r5
   1206c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12070:	sub	sp, sp, #180	; 0xb4
   12074:	str	r0, [sp, #32]
   12078:	str	r1, [sp, #16]
   1207c:	str	r2, [sp, #36]	; 0x24
   12080:	mov	r7, r3
   12084:	ldrb	r3, [r3, #20]
   12088:	cmp	r3, #0
   1208c:	ldrbne	r2, [r7, #22]
   12090:	ldrne	r3, [r7, #4]
   12094:	addne	r3, r2, r3
   12098:	moveq	r3, #0
   1209c:	str	r3, [sp, #56]	; 0x38
   120a0:	add	r2, sp, #72	; 0x48
   120a4:	ldr	r1, [sp, #32]
   120a8:	mov	r0, #3
   120ac:	bl	11230 <__fxstat64@plt>
   120b0:	subs	r3, r0, #0
   120b4:	str	r3, [sp, #24]
   120b8:	bne	12170 <__assert_fail@plt+0xcb8>
   120bc:	ldr	r3, [sp, #88]	; 0x58
   120c0:	and	r3, r3, #61440	; 0xf000
   120c4:	cmp	r3, #8192	; 0x2000
   120c8:	beq	121a8 <__assert_fail@plt+0xcf0>
   120cc:	ldr	r3, [sp, #88]	; 0x58
   120d0:	and	r3, r3, #61440	; 0xf000
   120d4:	cmp	r3, #4096	; 0x1000
   120d8:	cmpne	r3, #49152	; 0xc000
   120dc:	moveq	r2, #1
   120e0:	movne	r2, #0
   120e4:	str	r2, [sp, #20]
   120e8:	beq	121b8 <__assert_fail@plt+0xd00>
   120ec:	cmp	r3, #32768	; 0x8000
   120f0:	beq	121e8 <__assert_fail@plt+0xd30>
   120f4:	mov	r1, #4
   120f8:	ldr	r0, [r7, #4]
   120fc:	bl	1760c <__assert_fail@plt+0x6154>
   12100:	mov	r9, r0
   12104:	ldrd	r2, [r7, #8]
   12108:	mov	r0, r2
   1210c:	mov	r1, r3
   12110:	strd	r0, [sp, #40]	; 0x28
   12114:	mvn	r2, #0
   12118:	mvn	r3, #0
   1211c:	cmp	r1, r3
   12120:	cmpeq	r0, r2
   12124:	beq	12220 <__assert_fail@plt+0xd68>
   12128:	ldr	r3, [sp, #88]	; 0x58
   1212c:	and	r3, r3, #61440	; 0xf000
   12130:	cmp	r3, #32768	; 0x8000
   12134:	beq	12354 <__assert_fail@plt+0xe9c>
   12138:	mov	r2, #0
   1213c:	mov	r3, #0
   12140:	strd	r2, [sp, #48]	; 0x30
   12144:	ldr	r3, [r7, #4]
   12148:	str	r3, [sp, #60]	; 0x3c
   1214c:	cmp	r3, #0
   12150:	beq	1251c <__assert_fail@plt+0x1064>
   12154:	mov	r8, r3
   12158:	mov	fp, r9
   1215c:	ldr	r5, [pc, #1280]	; 12664 <__assert_fail@plt+0x11ac>
   12160:	mov	r3, #0
   12164:	str	r3, [sp, #28]
   12168:	mov	r6, r5
   1216c:	b	123cc <__assert_fail@plt+0xf14>
   12170:	bl	11338 <__errno_location@plt>
   12174:	ldr	r4, [r0]
   12178:	mov	r2, #5
   1217c:	ldr	r1, [pc, #1252]	; 12668 <__assert_fail@plt+0x11b0>
   12180:	mov	r0, #0
   12184:	bl	111e8 <dcgettext@plt>
   12188:	ldr	r3, [sp, #16]
   1218c:	mov	r2, r0
   12190:	mov	r1, r4
   12194:	mov	r0, #0
   12198:	bl	1129c <error@plt>
   1219c:	mov	r3, #0
   121a0:	str	r3, [sp, #20]
   121a4:	b	125f8 <__assert_fail@plt+0x1140>
   121a8:	ldr	r0, [sp, #32]
   121ac:	bl	1147c <isatty@plt>
   121b0:	cmp	r0, #0
   121b4:	beq	120cc <__assert_fail@plt+0xc14>
   121b8:	mov	r2, #5
   121bc:	ldr	r1, [pc, #1192]	; 1266c <__assert_fail@plt+0x11b4>
   121c0:	mov	r0, #0
   121c4:	bl	111e8 <dcgettext@plt>
   121c8:	ldr	r3, [sp, #16]
   121cc:	mov	r2, r0
   121d0:	mov	r1, #0
   121d4:	mov	r0, r1
   121d8:	bl	1129c <error@plt>
   121dc:	mov	r3, #0
   121e0:	str	r3, [sp, #20]
   121e4:	b	125f8 <__assert_fail@plt+0x1140>
   121e8:	ldrd	r2, [sp, #120]	; 0x78
   121ec:	cmp	r2, #0
   121f0:	sbcs	r3, r3, #0
   121f4:	bge	120f4 <__assert_fail@plt+0xc3c>
   121f8:	mov	r2, #5
   121fc:	ldr	r1, [pc, #1132]	; 12670 <__assert_fail@plt+0x11b8>
   12200:	mov	r0, #0
   12204:	bl	111e8 <dcgettext@plt>
   12208:	ldr	r3, [sp, #16]
   1220c:	mov	r2, r0
   12210:	mov	r1, #0
   12214:	mov	r0, r1
   12218:	bl	1129c <error@plt>
   1221c:	b	125f8 <__assert_fail@plt+0x1140>
   12220:	ldr	r3, [sp, #88]	; 0x58
   12224:	and	r3, r3, #61440	; 0xf000
   12228:	cmp	r3, #32768	; 0x8000
   1222c:	beq	12268 <__assert_fail@plt+0xdb0>
   12230:	mov	r3, #2
   12234:	str	r3, [sp]
   12238:	mov	r2, #0
   1223c:	mov	r3, #0
   12240:	ldr	r0, [sp, #32]
   12244:	bl	11260 <lseek64@plt>
   12248:	cmp	r0, #1
   1224c:	sbcs	r3, r1, #0
   12250:	blt	12344 <__assert_fail@plt+0xe8c>
   12254:	strd	r0, [sp, #40]	; 0x28
   12258:	mov	r2, #0
   1225c:	mov	r3, #0
   12260:	strd	r2, [sp, #48]	; 0x30
   12264:	b	12144 <__assert_fail@plt+0xc8c>
   12268:	ldrd	r2, [sp, #120]	; 0x78
   1226c:	mov	sl, r2
   12270:	mov	fp, r3
   12274:	strd	sl, [sp, #40]	; 0x28
   12278:	ldrb	r3, [r7, #21]
   1227c:	cmp	r3, #0
   12280:	bne	123a0 <__assert_fail@plt+0xee8>
   12284:	ldr	r4, [sp, #128]	; 0x80
   12288:	sub	r3, r4, #1
   1228c:	cmn	r3, #-536870911	; 0xe0000001
   12290:	movhi	r4, #512	; 0x200
   12294:	asr	r5, r4, #31
   12298:	mov	r2, r4
   1229c:	mov	r3, r5
   122a0:	mov	r0, sl
   122a4:	mov	r1, fp
   122a8:	bl	18f60 <__assert_fail@plt+0x7aa8>
   122ac:	mov	r0, r2
   122b0:	mov	r1, r3
   122b4:	mov	r3, sl
   122b8:	orrs	r3, r3, fp
   122bc:	movne	r3, #1
   122c0:	moveq	r3, #0
   122c4:	cmp	sl, r4
   122c8:	sbcs	r2, fp, r5
   122cc:	movge	r3, #0
   122d0:	andlt	r3, r3, #1
   122d4:	cmp	r3, #0
   122d8:	movne	r2, sl
   122dc:	movne	r3, fp
   122e0:	moveq	r2, #0
   122e4:	moveq	r3, #0
   122e8:	strd	r2, [sp, #48]	; 0x30
   122ec:	orrs	r3, r0, r1
   122f0:	beq	12144 <__assert_fail@plt+0xc8c>
   122f4:	subs	r4, r4, r0
   122f8:	sbc	r5, r5, r1
   122fc:	mvn	r2, #0
   12300:	mvn	r3, #-2147483648	; 0x80000000
   12304:	ldrd	r0, [sp, #40]	; 0x28
   12308:	subs	r0, r2, r0
   1230c:	sbc	r1, r3, r1
   12310:	mov	r2, r0
   12314:	mov	r3, r1
   12318:	mov	r0, r4
   1231c:	mov	r1, r5
   12320:	cmp	r2, r4
   12324:	sbcs	ip, r3, r5
   12328:	movlt	r0, r2
   1232c:	movlt	r1, r3
   12330:	ldrd	r2, [sp, #40]	; 0x28
   12334:	adds	r2, r2, r0
   12338:	adc	r3, r3, r1
   1233c:	strd	r2, [sp, #40]	; 0x28
   12340:	b	12144 <__assert_fail@plt+0xc8c>
   12344:	mov	r2, #0
   12348:	mov	r3, #0
   1234c:	strd	r2, [sp, #48]	; 0x30
   12350:	b	12144 <__assert_fail@plt+0xc8c>
   12354:	ldrd	r2, [sp, #120]	; 0x78
   12358:	strd	r2, [sp, #48]	; 0x30
   1235c:	ldr	r2, [sp, #128]	; 0x80
   12360:	sub	r3, r2, #1
   12364:	cmn	r3, #-536870911	; 0xe0000001
   12368:	movhi	r2, #512	; 0x200
   1236c:	asr	r3, r2, #31
   12370:	ldrd	r0, [sp, #40]	; 0x28
   12374:	cmp	r0, r2
   12378:	sbcs	ip, r1, r3
   1237c:	movlt	r2, r0
   12380:	movlt	r3, r1
   12384:	ldrd	r0, [sp, #48]	; 0x30
   12388:	cmp	r0, r2
   1238c:	sbcs	r3, r1, r3
   12390:	movge	r2, #0
   12394:	movge	r3, #0
   12398:	strdge	r2, [sp, #48]	; 0x30
   1239c:	b	12144 <__assert_fail@plt+0xc8c>
   123a0:	mov	r2, #0
   123a4:	mov	r3, #0
   123a8:	strd	r2, [sp, #48]	; 0x30
   123ac:	b	12144 <__assert_fail@plt+0xc8c>
   123b0:	rsb	r3, r4, #0
   123b4:	cmp	r3, r8
   123b8:	bcs	12410 <__assert_fail@plt+0xf58>
   123bc:	ldr	r3, [sp, #28]
   123c0:	sub	r3, r3, r4
   123c4:	str	r3, [sp, #28]
   123c8:	add	r8, r8, r4
   123cc:	ldr	r4, [r5]
   123d0:	cmp	r4, #0
   123d4:	moveq	r5, r6
   123d8:	beq	123cc <__assert_fail@plt+0xf14>
   123dc:	add	r5, r5, #4
   123e0:	blt	123b0 <__assert_fail@plt+0xef8>
   123e4:	cmp	r4, r8
   123e8:	bhi	12420 <__assert_fail@plt+0xf68>
   123ec:	lsl	sl, r4, #2
   123f0:	mov	r2, sl
   123f4:	mov	r1, r5
   123f8:	mov	r0, fp
   123fc:	bl	11194 <memcpy@plt>
   12400:	add	r5, r5, sl
   12404:	add	fp, fp, sl
   12408:	sub	r8, r8, r4
   1240c:	b	123cc <__assert_fail@plt+0xf14>
   12410:	ldr	r3, [sp, #28]
   12414:	add	r3, r3, r8
   12418:	str	r3, [sp, #28]
   1241c:	b	12440 <__assert_fail@plt+0xf88>
   12420:	cmp	r8, #1
   12424:	bls	12434 <__assert_fail@plt+0xf7c>
   12428:	add	r2, r8, r8, lsl #1
   1242c:	cmp	r4, r2
   12430:	bls	1248c <__assert_fail@plt+0xfd4>
   12434:	ldr	r3, [sp, #28]
   12438:	add	r3, r3, r8
   1243c:	str	r3, [sp, #28]
   12440:	ldr	r3, [sp, #60]	; 0x3c
   12444:	ldr	r2, [sp, #28]
   12448:	sub	r8, r3, r2
   1244c:	sub	r6, r2, #1
   12450:	mov	r5, r6
   12454:	mov	r4, #0
   12458:	sub	fp, r3, #1
   1245c:	mvn	sl, #0
   12460:	str	r7, [sp, #28]
   12464:	mov	r7, r3
   12468:	b	124e0 <__assert_fail@plt+0x1028>
   1246c:	ldr	r3, [r5]
   12470:	str	r3, [fp]
   12474:	sub	r8, r8, #1
   12478:	add	fp, fp, #4
   1247c:	add	r5, r5, #4
   12480:	sub	r4, r4, #1
   12484:	cmp	r8, #0
   12488:	beq	12440 <__assert_fail@plt+0xf88>
   1248c:	cmp	r4, r8
   12490:	beq	1246c <__assert_fail@plt+0xfb4>
   12494:	asr	r3, r4, #31
   12498:	subs	r2, r4, #1
   1249c:	sbc	r3, r3, #0
   124a0:	ldr	r0, [sp, #36]	; 0x24
   124a4:	bl	16390 <__assert_fail@plt+0x4ed8>
   124a8:	mov	r3, #0
   124ac:	cmp	r1, r3
   124b0:	cmpeq	r0, r8
   124b4:	bcs	1247c <__assert_fail@plt+0xfc4>
   124b8:	b	1246c <__assert_fail@plt+0xfb4>
   124bc:	add	r5, r5, fp
   124c0:	ldr	r3, [r9, r4, lsl #2]
   124c4:	str	r3, [r9, r8, lsl #2]
   124c8:	str	sl, [r9, r4, lsl #2]
   124cc:	add	r8, r8, #1
   124d0:	sub	r5, r5, r6
   124d4:	add	r4, r4, #1
   124d8:	cmp	r7, r4
   124dc:	beq	12518 <__assert_fail@plt+0x1060>
   124e0:	cmp	r6, r5
   124e4:	bcs	124bc <__assert_fail@plt+0x1004>
   124e8:	sub	r2, r8, r4
   124ec:	mov	r3, #0
   124f0:	subs	r2, r2, #1
   124f4:	sbc	r3, r3, #0
   124f8:	ldr	r0, [sp, #36]	; 0x24
   124fc:	bl	16390 <__assert_fail@plt+0x4ed8>
   12500:	ldr	r3, [r9, r4, lsl #2]
   12504:	add	r0, r4, r0
   12508:	ldr	r2, [r9, r0, lsl #2]
   1250c:	str	r2, [r9, r4, lsl #2]
   12510:	str	r3, [r9, r0, lsl #2]
   12514:	b	124d0 <__assert_fail@plt+0x1018>
   12518:	ldr	r7, [sp, #28]
   1251c:	ldr	r0, [sp, #36]	; 0x24
   12520:	bl	16388 <__assert_fail@plt+0x4ed0>
   12524:	mov	r6, r0
   12528:	mov	r8, #1
   1252c:	mov	sl, #0
   12530:	mov	fp, sl
   12534:	ldrd	r2, [sp, #48]	; 0x30
   12538:	str	r8, [sp, #28]
   1253c:	ldr	r8, [sp, #32]
   12540:	b	12568 <__assert_fail@plt+0x10b0>
   12544:	ldrd	r0, [sp, #40]	; 0x28
   12548:	orrs	ip, r0, r1
   1254c:	beq	125dc <__assert_fail@plt+0x1124>
   12550:	strd	r0, [sp, #64]	; 0x40
   12554:	ldr	r5, [sp, #56]	; 0x38
   12558:	strd	r2, [sp, #40]	; 0x28
   1255c:	b	12578 <__assert_fail@plt+0x10c0>
   12560:	mov	r2, sl
   12564:	mov	r3, fp
   12568:	orrs	r1, r2, r3
   1256c:	beq	12544 <__assert_fail@plt+0x108c>
   12570:	strd	r2, [sp, #64]	; 0x40
   12574:	mov	r5, #0
   12578:	mov	r4, #0
   1257c:	ldr	r2, [r7, #4]
   12580:	ldrb	r3, [r7, #22]
   12584:	add	r3, r3, r2
   12588:	cmp	r4, r3
   1258c:	bcs	12560 <__assert_fail@plt+0x10a8>
   12590:	cmp	r4, r2
   12594:	ldrcc	r3, [r9, r4, lsl #2]
   12598:	ldrcs	r3, [sp, #24]
   1259c:	add	r4, r4, #1
   125a0:	str	r5, [sp, #12]
   125a4:	str	r4, [sp, #8]
   125a8:	str	r6, [sp, #4]
   125ac:	str	r3, [sp]
   125b0:	add	r3, sp, #64	; 0x40
   125b4:	ldr	r2, [sp, #16]
   125b8:	add	r1, sp, #72	; 0x48
   125bc:	mov	r0, r8
   125c0:	bl	11714 <__assert_fail@plt+0x25c>
   125c4:	cmp	r0, #0
   125c8:	beq	1257c <__assert_fail@plt+0x10c4>
   125cc:	blt	125f0 <__assert_fail@plt+0x1138>
   125d0:	ldr	r3, [sp, #20]
   125d4:	str	r3, [sp, #28]
   125d8:	b	1257c <__assert_fail@plt+0x10c4>
   125dc:	ldr	r8, [sp, #28]
   125e0:	ldr	r3, [r7, #16]
   125e4:	cmp	r3, #0
   125e8:	streq	r8, [sp, #20]
   125ec:	bne	12604 <__assert_fail@plt+0x114c>
   125f0:	mov	r0, r9
   125f4:	bl	13c70 <__assert_fail@plt+0x27b8>
   125f8:	ldr	r0, [sp, #20]
   125fc:	add	sp, sp, #180	; 0xb4
   12600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12604:	mov	r2, #0
   12608:	mov	r3, #0
   1260c:	ldr	r0, [sp, #32]
   12610:	bl	111c4 <ftruncate64@plt>
   12614:	cmp	r0, #0
   12618:	streq	r8, [sp, #20]
   1261c:	beq	125f0 <__assert_fail@plt+0x1138>
   12620:	ldr	r3, [sp, #88]	; 0x58
   12624:	and	r3, r3, #61440	; 0xf000
   12628:	cmp	r3, #32768	; 0x8000
   1262c:	strne	r8, [sp, #20]
   12630:	bne	125f0 <__assert_fail@plt+0x1138>
   12634:	bl	11338 <__errno_location@plt>
   12638:	ldr	r4, [r0]
   1263c:	mov	r2, #5
   12640:	ldr	r1, [pc, #44]	; 12674 <__assert_fail@plt+0x11bc>
   12644:	mov	r0, #0
   12648:	bl	111e8 <dcgettext@plt>
   1264c:	ldr	r3, [sp, #16]
   12650:	mov	r2, r0
   12654:	mov	r1, r4
   12658:	mov	r0, #0
   1265c:	bl	1129c <error@plt>
   12660:	b	125f0 <__assert_fail@plt+0x1138>
   12664:	andeq	r9, r1, r8, ror r2
   12668:	andeq	r9, r1, r0, lsr #11
   1266c:			; <UNDEFINED> instruction: 0x000195b4
   12670:	andeq	r9, r1, ip, asr #11
   12674:	andeq	r9, r1, r8, ror #11
   12678:	push	{lr}		; (str lr, [sp, #-4]!)
   1267c:	sub	sp, sp, #60	; 0x3c
   12680:	subs	r6, r0, #0
   12684:	beq	126c0 <__assert_fail@plt+0x1208>
   12688:	ldr	r3, [pc, #832]	; 129d0 <__assert_fail@plt+0x1518>
   1268c:	ldr	r4, [r3]
   12690:	mov	r2, #5
   12694:	ldr	r1, [pc, #824]	; 129d4 <__assert_fail@plt+0x151c>
   12698:	mov	r0, #0
   1269c:	bl	111e8 <dcgettext@plt>
   126a0:	ldr	r3, [pc, #816]	; 129d8 <__assert_fail@plt+0x1520>
   126a4:	ldr	r3, [r3]
   126a8:	mov	r2, r0
   126ac:	mov	r1, #1
   126b0:	mov	r0, r4
   126b4:	bl	113a4 <__fprintf_chk@plt>
   126b8:	mov	r0, r6
   126bc:	bl	11308 <exit@plt>
   126c0:	mov	r2, #5
   126c4:	ldr	r1, [pc, #784]	; 129dc <__assert_fail@plt+0x1524>
   126c8:	mov	r0, #0
   126cc:	bl	111e8 <dcgettext@plt>
   126d0:	ldr	r3, [pc, #768]	; 129d8 <__assert_fail@plt+0x1520>
   126d4:	ldr	r2, [r3]
   126d8:	mov	r1, r0
   126dc:	mov	r0, #1
   126e0:	bl	11380 <__printf_chk@plt>
   126e4:	mov	r2, #5
   126e8:	ldr	r1, [pc, #752]	; 129e0 <__assert_fail@plt+0x1528>
   126ec:	mov	r0, #0
   126f0:	bl	111e8 <dcgettext@plt>
   126f4:	ldr	r4, [pc, #744]	; 129e4 <__assert_fail@plt+0x152c>
   126f8:	ldr	r1, [r4]
   126fc:	bl	11134 <fputs_unlocked@plt>
   12700:	mov	r2, #5
   12704:	ldr	r1, [pc, #732]	; 129e8 <__assert_fail@plt+0x1530>
   12708:	mov	r0, #0
   1270c:	bl	111e8 <dcgettext@plt>
   12710:	ldr	r1, [r4]
   12714:	bl	11134 <fputs_unlocked@plt>
   12718:	mov	r2, #5
   1271c:	ldr	r1, [pc, #712]	; 129ec <__assert_fail@plt+0x1534>
   12720:	mov	r0, #0
   12724:	bl	111e8 <dcgettext@plt>
   12728:	ldr	r1, [r4]
   1272c:	bl	11134 <fputs_unlocked@plt>
   12730:	mov	r2, #5
   12734:	ldr	r1, [pc, #692]	; 129f0 <__assert_fail@plt+0x1538>
   12738:	mov	r0, #0
   1273c:	bl	111e8 <dcgettext@plt>
   12740:	mov	r2, #3
   12744:	mov	r1, r0
   12748:	mov	r0, #1
   1274c:	bl	11380 <__printf_chk@plt>
   12750:	mov	r2, #5
   12754:	ldr	r1, [pc, #664]	; 129f4 <__assert_fail@plt+0x153c>
   12758:	mov	r0, #0
   1275c:	bl	111e8 <dcgettext@plt>
   12760:	ldr	r1, [r4]
   12764:	bl	11134 <fputs_unlocked@plt>
   12768:	mov	r2, #5
   1276c:	ldr	r1, [pc, #644]	; 129f8 <__assert_fail@plt+0x1540>
   12770:	mov	r0, #0
   12774:	bl	111e8 <dcgettext@plt>
   12778:	ldr	r1, [r4]
   1277c:	bl	11134 <fputs_unlocked@plt>
   12780:	mov	r2, #5
   12784:	ldr	r1, [pc, #624]	; 129fc <__assert_fail@plt+0x1544>
   12788:	mov	r0, #0
   1278c:	bl	111e8 <dcgettext@plt>
   12790:	ldr	r1, [r4]
   12794:	bl	11134 <fputs_unlocked@plt>
   12798:	mov	r2, #5
   1279c:	ldr	r1, [pc, #604]	; 12a00 <__assert_fail@plt+0x1548>
   127a0:	mov	r0, #0
   127a4:	bl	111e8 <dcgettext@plt>
   127a8:	ldr	r1, [r4]
   127ac:	bl	11134 <fputs_unlocked@plt>
   127b0:	mov	r2, #5
   127b4:	ldr	r1, [pc, #584]	; 12a04 <__assert_fail@plt+0x154c>
   127b8:	mov	r0, #0
   127bc:	bl	111e8 <dcgettext@plt>
   127c0:	ldr	r1, [r4]
   127c4:	bl	11134 <fputs_unlocked@plt>
   127c8:	mov	ip, sp
   127cc:	ldr	lr, [pc, #564]	; 12a08 <__assert_fail@plt+0x1550>
   127d0:	ldm	lr!, {r0, r1, r2, r3}
   127d4:	stmia	ip!, {r0, r1, r2, r3}
   127d8:	ldm	lr!, {r0, r1, r2, r3}
   127dc:	stmia	ip!, {r0, r1, r2, r3}
   127e0:	ldm	lr!, {r0, r1, r2, r3}
   127e4:	stmia	ip!, {r0, r1, r2, r3}
   127e8:	ldm	lr, {r0, r1}
   127ec:	stm	ip, {r0, r1}
   127f0:	ldr	r1, [sp]
   127f4:	cmp	r1, #0
   127f8:	moveq	r4, sp
   127fc:	beq	12824 <__assert_fail@plt+0x136c>
   12800:	mov	r4, sp
   12804:	ldr	r5, [pc, #512]	; 12a0c <__assert_fail@plt+0x1554>
   12808:	mov	r0, r5
   1280c:	bl	11158 <strcmp@plt>
   12810:	cmp	r0, #0
   12814:	beq	12824 <__assert_fail@plt+0x136c>
   12818:	ldr	r1, [r4, #8]!
   1281c:	cmp	r1, #0
   12820:	bne	12808 <__assert_fail@plt+0x1350>
   12824:	ldr	r4, [r4, #4]
   12828:	cmp	r4, #0
   1282c:	beq	12940 <__assert_fail@plt+0x1488>
   12830:	mov	r2, #5
   12834:	ldr	r1, [pc, #468]	; 12a10 <__assert_fail@plt+0x1558>
   12838:	mov	r0, #0
   1283c:	bl	111e8 <dcgettext@plt>
   12840:	ldr	r3, [pc, #460]	; 12a14 <__assert_fail@plt+0x155c>
   12844:	ldr	r2, [pc, #460]	; 12a18 <__assert_fail@plt+0x1560>
   12848:	mov	r1, r0
   1284c:	mov	r0, #1
   12850:	bl	11380 <__printf_chk@plt>
   12854:	mov	r1, #0
   12858:	mov	r0, #5
   1285c:	bl	113e0 <setlocale@plt>
   12860:	cmp	r0, #0
   12864:	beq	1287c <__assert_fail@plt+0x13c4>
   12868:	mov	r2, #3
   1286c:	ldr	r1, [pc, #424]	; 12a1c <__assert_fail@plt+0x1564>
   12870:	bl	11488 <strncmp@plt>
   12874:	cmp	r0, #0
   12878:	bne	128dc <__assert_fail@plt+0x1424>
   1287c:	mov	r2, #5
   12880:	ldr	r1, [pc, #408]	; 12a20 <__assert_fail@plt+0x1568>
   12884:	mov	r0, #0
   12888:	bl	111e8 <dcgettext@plt>
   1288c:	ldr	r5, [pc, #376]	; 12a0c <__assert_fail@plt+0x1554>
   12890:	mov	r3, r5
   12894:	ldr	r2, [pc, #376]	; 12a14 <__assert_fail@plt+0x155c>
   12898:	mov	r1, r0
   1289c:	mov	r0, #1
   128a0:	bl	11380 <__printf_chk@plt>
   128a4:	mov	r2, #5
   128a8:	ldr	r1, [pc, #372]	; 12a24 <__assert_fail@plt+0x156c>
   128ac:	mov	r0, #0
   128b0:	bl	111e8 <dcgettext@plt>
   128b4:	mov	r1, r0
   128b8:	ldr	r2, [pc, #360]	; 12a28 <__assert_fail@plt+0x1570>
   128bc:	ldr	r3, [pc, #360]	; 12a2c <__assert_fail@plt+0x1574>
   128c0:	cmp	r4, r5
   128c4:	movne	r3, r2
   128c8:	mov	r2, r4
   128cc:	mov	r0, #1
   128d0:	bl	11380 <__printf_chk@plt>
   128d4:	b	126b8 <__assert_fail@plt+0x1200>
   128d8:	ldr	r4, [pc, #300]	; 12a0c <__assert_fail@plt+0x1554>
   128dc:	mov	r2, #5
   128e0:	ldr	r1, [pc, #328]	; 12a30 <__assert_fail@plt+0x1578>
   128e4:	mov	r0, #0
   128e8:	bl	111e8 <dcgettext@plt>
   128ec:	ldr	r3, [pc, #240]	; 129e4 <__assert_fail@plt+0x152c>
   128f0:	ldr	r1, [r3]
   128f4:	bl	11134 <fputs_unlocked@plt>
   128f8:	b	1287c <__assert_fail@plt+0x13c4>
   128fc:	mov	r2, #5
   12900:	ldr	r1, [pc, #280]	; 12a20 <__assert_fail@plt+0x1568>
   12904:	mov	r0, #0
   12908:	bl	111e8 <dcgettext@plt>
   1290c:	ldr	r4, [pc, #248]	; 12a0c <__assert_fail@plt+0x1554>
   12910:	mov	r3, r4
   12914:	ldr	r2, [pc, #248]	; 12a14 <__assert_fail@plt+0x155c>
   12918:	mov	r1, r0
   1291c:	mov	r0, #1
   12920:	bl	11380 <__printf_chk@plt>
   12924:	mov	r2, #5
   12928:	ldr	r1, [pc, #244]	; 12a24 <__assert_fail@plt+0x156c>
   1292c:	mov	r0, #0
   12930:	bl	111e8 <dcgettext@plt>
   12934:	mov	r1, r0
   12938:	ldr	r3, [pc, #236]	; 12a2c <__assert_fail@plt+0x1574>
   1293c:	b	128c8 <__assert_fail@plt+0x1410>
   12940:	mov	r2, #5
   12944:	ldr	r1, [pc, #196]	; 12a10 <__assert_fail@plt+0x1558>
   12948:	mov	r0, #0
   1294c:	bl	111e8 <dcgettext@plt>
   12950:	ldr	r3, [pc, #188]	; 12a14 <__assert_fail@plt+0x155c>
   12954:	ldr	r2, [pc, #188]	; 12a18 <__assert_fail@plt+0x1560>
   12958:	mov	r1, r0
   1295c:	mov	r0, #1
   12960:	bl	11380 <__printf_chk@plt>
   12964:	mov	r1, #0
   12968:	mov	r0, #5
   1296c:	bl	113e0 <setlocale@plt>
   12970:	cmp	r0, #0
   12974:	beq	128fc <__assert_fail@plt+0x1444>
   12978:	mov	r2, #3
   1297c:	ldr	r1, [pc, #152]	; 12a1c <__assert_fail@plt+0x1564>
   12980:	bl	11488 <strncmp@plt>
   12984:	cmp	r0, #0
   12988:	bne	128d8 <__assert_fail@plt+0x1420>
   1298c:	mov	r2, #5
   12990:	ldr	r1, [pc, #136]	; 12a20 <__assert_fail@plt+0x1568>
   12994:	mov	r0, #0
   12998:	bl	111e8 <dcgettext@plt>
   1299c:	ldr	r4, [pc, #104]	; 12a0c <__assert_fail@plt+0x1554>
   129a0:	mov	r3, r4
   129a4:	ldr	r2, [pc, #104]	; 12a14 <__assert_fail@plt+0x155c>
   129a8:	mov	r1, r0
   129ac:	mov	r0, #1
   129b0:	bl	11380 <__printf_chk@plt>
   129b4:	mov	r2, #5
   129b8:	ldr	r1, [pc, #100]	; 12a24 <__assert_fail@plt+0x156c>
   129bc:	mov	r0, #0
   129c0:	bl	111e8 <dcgettext@plt>
   129c4:	mov	r1, r0
   129c8:	ldr	r3, [pc, #92]	; 12a2c <__assert_fail@plt+0x1574>
   129cc:	b	128c8 <__assert_fail@plt+0x1410>
   129d0:			; <UNDEFINED> instruction: 0x0002b1b0
   129d4:	andeq	r9, r1, r8, lsl #12
   129d8:	ldrdeq	fp, [r2], -r0
   129dc:	andeq	r9, r1, r0, lsr r6
   129e0:	andeq	r9, r1, r0, asr r6
   129e4:			; <UNDEFINED> instruction: 0x0002b1b4
   129e8:	ldrdeq	r9, [r1], -r8
   129ec:	andeq	r9, r1, r0, lsl #14
   129f0:	andeq	r9, r1, ip, asr #14
   129f4:	andeq	r9, r1, r4, asr r8
   129f8:	andeq	r9, r1, r4, asr #19
   129fc:	strdeq	r9, [r1], -r4
   12a00:	andeq	r9, r1, ip, lsr #20
   12a04:	andeq	r9, r1, r0, lsl ip
   12a08:	andeq	r9, r1, r4, asr r3
   12a0c:	andeq	r9, r1, r0, lsl #12
   12a10:	andeq	r9, r1, r0, lsr sp
   12a14:	andeq	r9, r1, r8, asr #26
   12a18:	andeq	r9, r1, r0, ror sp
   12a1c:	andeq	r9, r1, r0, lsl #27
   12a20:	andeq	r9, r1, ip, asr #27
   12a24:	andeq	r9, r1, r8, ror #27
   12a28:	andeq	r9, r1, ip, lsl #24
   12a2c:			; <UNDEFINED> instruction: 0x00019fbc
   12a30:	andeq	r9, r1, r4, lsl #27
   12a34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a38:	sub	sp, sp, #116	; 0x74
   12a3c:	str	r0, [sp, #28]
   12a40:	mov	r6, r1
   12a44:	mov	r4, #0
   12a48:	str	r4, [sp, #88]	; 0x58
   12a4c:	str	r4, [sp, #92]	; 0x5c
   12a50:	str	r4, [sp, #96]	; 0x60
   12a54:	str	r4, [sp, #100]	; 0x64
   12a58:	str	r4, [sp, #104]	; 0x68
   12a5c:	str	r4, [sp, #108]	; 0x6c
   12a60:	ldr	r0, [r1]
   12a64:	bl	147dc <__assert_fail@plt+0x3324>
   12a68:	ldr	r1, [pc, #2184]	; 132f8 <__assert_fail@plt+0x1e40>
   12a6c:	mov	r0, #6
   12a70:	bl	113e0 <setlocale@plt>
   12a74:	ldr	r5, [pc, #2176]	; 132fc <__assert_fail@plt+0x1e44>
   12a78:	ldr	r1, [pc, #2176]	; 13300 <__assert_fail@plt+0x1e48>
   12a7c:	mov	r0, r5
   12a80:	bl	11434 <bindtextdomain@plt>
   12a84:	mov	r0, r5
   12a88:	bl	1120c <textdomain@plt>
   12a8c:	ldr	r0, [pc, #2160]	; 13304 <__assert_fail@plt+0x1e4c>
   12a90:	bl	19254 <__assert_fail@plt+0x7d9c>
   12a94:	mov	r3, #3
   12a98:	str	r3, [sp, #92]	; 0x5c
   12a9c:	mvn	r2, #0
   12aa0:	mvn	r3, #0
   12aa4:	strd	r2, [sp, #96]	; 0x60
   12aa8:	ldr	r5, [pc, #2136]	; 13308 <__assert_fail@plt+0x1e50>
   12aac:	ldr	r8, [pc, #2136]	; 1330c <__assert_fail@plt+0x1e54>
   12ab0:	ldr	r9, [pc, #2136]	; 13310 <__assert_fail@plt+0x1e58>
   12ab4:	ldr	r7, [pc, #2136]	; 13314 <__assert_fail@plt+0x1e5c>
   12ab8:	add	sl, r5, #276	; 0x114
   12abc:	mov	r3, #0
   12ac0:	str	r3, [sp]
   12ac4:	add	r3, r5, #304	; 0x130
   12ac8:	mov	r2, r8
   12acc:	mov	r1, r6
   12ad0:	ldr	r0, [sp, #28]
   12ad4:	bl	112f0 <getopt_long@plt>
   12ad8:	cmn	r0, #1
   12adc:	beq	12cdc <__assert_fail@plt+0x1824>
   12ae0:	cmp	r0, #115	; 0x73
   12ae4:	beq	12c68 <__assert_fail@plt+0x17b0>
   12ae8:	ble	12b14 <__assert_fail@plt+0x165c>
   12aec:	cmp	r0, #120	; 0x78
   12af0:	beq	12cb4 <__assert_fail@plt+0x17fc>
   12af4:	bgt	12bb8 <__assert_fail@plt+0x1700>
   12af8:	cmp	r0, #117	; 0x75
   12afc:	beq	12c18 <__assert_fail@plt+0x1760>
   12b00:	cmp	r0, #118	; 0x76
   12b04:	bne	12cd4 <__assert_fail@plt+0x181c>
   12b08:	mov	r3, #1
   12b0c:	strb	r3, [sp, #108]	; 0x6c
   12b10:	b	12abc <__assert_fail@plt+0x1604>
   12b14:	cmn	r0, #2
   12b18:	beq	12ccc <__assert_fail@plt+0x1814>
   12b1c:	ble	12b7c <__assert_fail@plt+0x16c4>
   12b20:	cmp	r0, #102	; 0x66
   12b24:	beq	12bec <__assert_fail@plt+0x1734>
   12b28:	cmp	r0, #110	; 0x6e
   12b2c:	bne	12cd4 <__assert_fail@plt+0x181c>
   12b30:	ldr	fp, [r9]
   12b34:	mov	r2, #5
   12b38:	ldr	r1, [pc, #2008]	; 13318 <__assert_fail@plt+0x1e60>
   12b3c:	mov	r0, #0
   12b40:	bl	111e8 <dcgettext@plt>
   12b44:	mov	r3, #0
   12b48:	str	r3, [sp, #16]
   12b4c:	str	r0, [sp, #12]
   12b50:	ldr	r3, [pc, #1952]	; 132f8 <__assert_fail@plt+0x1e40>
   12b54:	str	r3, [sp, #8]
   12b58:	mvn	r2, #-1073741824	; 0xc0000000
   12b5c:	mov	r3, #0
   12b60:	strd	r2, [sp]
   12b64:	mov	r2, #0
   12b68:	mov	r3, #0
   12b6c:	mov	r0, fp
   12b70:	bl	17c30 <__assert_fail@plt+0x6778>
   12b74:	str	r0, [sp, #92]	; 0x5c
   12b78:	b	12abc <__assert_fail@plt+0x1604>
   12b7c:	cmn	r0, #3
   12b80:	bne	12cd4 <__assert_fail@plt+0x181c>
   12b84:	mov	r4, #0
   12b88:	str	r4, [sp, #4]
   12b8c:	ldr	r3, [pc, #1928]	; 1331c <__assert_fail@plt+0x1e64>
   12b90:	str	r3, [sp]
   12b94:	ldr	r3, [pc, #1924]	; 13320 <__assert_fail@plt+0x1e68>
   12b98:	ldr	r3, [r3]
   12b9c:	ldr	r2, [pc, #1920]	; 13324 <__assert_fail@plt+0x1e6c>
   12ba0:	ldr	r1, [pc, #1920]	; 13328 <__assert_fail@plt+0x1e70>
   12ba4:	ldr	r0, [pc, #1920]	; 1332c <__assert_fail@plt+0x1e74>
   12ba8:	ldr	r0, [r0]
   12bac:	bl	17434 <__assert_fail@plt+0x5f7c>
   12bb0:	mov	r0, r4
   12bb4:	bl	11308 <exit@plt>
   12bb8:	cmp	r0, #122	; 0x7a
   12bbc:	beq	12cc0 <__assert_fail@plt+0x1808>
   12bc0:	cmp	r0, #256	; 0x100
   12bc4:	bne	12cd4 <__assert_fail@plt+0x181c>
   12bc8:	cmp	r4, #0
   12bcc:	beq	12be4 <__assert_fail@plt+0x172c>
   12bd0:	ldr	r1, [r9]
   12bd4:	mov	r0, r4
   12bd8:	bl	11158 <strcmp@plt>
   12bdc:	cmp	r0, #0
   12be0:	bne	12bf8 <__assert_fail@plt+0x1740>
   12be4:	ldr	r4, [r9]
   12be8:	b	12abc <__assert_fail@plt+0x1604>
   12bec:	mov	r3, #1
   12bf0:	strb	r3, [sp, #88]	; 0x58
   12bf4:	b	12abc <__assert_fail@plt+0x1604>
   12bf8:	mov	r2, #5
   12bfc:	ldr	r1, [pc, #1836]	; 13330 <__assert_fail@plt+0x1e78>
   12c00:	mov	r0, #0
   12c04:	bl	111e8 <dcgettext@plt>
   12c08:	mov	r2, r0
   12c0c:	mov	r1, #0
   12c10:	mov	r0, #1
   12c14:	bl	1129c <error@plt>
   12c18:	ldr	r1, [r9]
   12c1c:	cmp	r1, #0
   12c20:	moveq	r3, #3
   12c24:	streq	r3, [sp, #104]	; 0x68
   12c28:	beq	12abc <__assert_fail@plt+0x1604>
   12c2c:	mov	r3, #1
   12c30:	str	r3, [sp, #8]
   12c34:	ldr	r3, [pc, #1784]	; 13334 <__assert_fail@plt+0x1e7c>
   12c38:	ldr	r3, [r3]
   12c3c:	str	r3, [sp, #4]
   12c40:	mov	r3, #4
   12c44:	str	r3, [sp]
   12c48:	mov	r3, sl
   12c4c:	add	r2, r5, #288	; 0x120
   12c50:	ldr	r0, [pc, #1760]	; 13338 <__assert_fail@plt+0x1e80>
   12c54:	bl	1364c <__assert_fail@plt+0x2194>
   12c58:	add	r0, r5, r0, lsl #2
   12c5c:	ldr	r3, [r0, #276]	; 0x114
   12c60:	str	r3, [sp, #104]	; 0x68
   12c64:	b	12abc <__assert_fail@plt+0x1604>
   12c68:	ldr	fp, [r9]
   12c6c:	mov	r2, #5
   12c70:	mov	r1, r7
   12c74:	mov	r0, #0
   12c78:	bl	111e8 <dcgettext@plt>
   12c7c:	mov	r1, #0
   12c80:	str	r1, [sp, #16]
   12c84:	str	r0, [sp, #12]
   12c88:	ldr	r3, [pc, #1708]	; 1333c <__assert_fail@plt+0x1e84>
   12c8c:	str	r3, [sp, #8]
   12c90:	mvn	r2, #0
   12c94:	mvn	r3, #-2147483648	; 0x80000000
   12c98:	strd	r2, [sp]
   12c9c:	mov	r2, #0
   12ca0:	mov	r3, #0
   12ca4:	mov	r0, fp
   12ca8:	bl	17af8 <__assert_fail@plt+0x6640>
   12cac:	strd	r0, [sp, #96]	; 0x60
   12cb0:	b	12abc <__assert_fail@plt+0x1604>
   12cb4:	mov	r3, #1
   12cb8:	strb	r3, [sp, #109]	; 0x6d
   12cbc:	b	12abc <__assert_fail@plt+0x1604>
   12cc0:	mov	r3, #1
   12cc4:	strb	r3, [sp, #110]	; 0x6e
   12cc8:	b	12abc <__assert_fail@plt+0x1604>
   12ccc:	mov	r0, #0
   12cd0:	bl	12678 <__assert_fail@plt+0x11c0>
   12cd4:	mov	r0, #1
   12cd8:	bl	12678 <__assert_fail@plt+0x11c0>
   12cdc:	mov	fp, r0
   12ce0:	ldr	r3, [pc, #1624]	; 13340 <__assert_fail@plt+0x1e88>
   12ce4:	ldr	r3, [r3]
   12ce8:	lsl	r5, r3, #2
   12cec:	ldr	r2, [sp, #28]
   12cf0:	subs	r3, r2, r3
   12cf4:	str	r3, [sp, #44]	; 0x2c
   12cf8:	beq	12d44 <__assert_fail@plt+0x188c>
   12cfc:	mvn	r1, #0
   12d00:	mov	r0, r4
   12d04:	bl	16368 <__assert_fail@plt+0x4eb0>
   12d08:	ldr	r3, [pc, #1588]	; 13344 <__assert_fail@plt+0x1e8c>
   12d0c:	str	r0, [r3]
   12d10:	cmp	r0, #0
   12d14:	beq	12d6c <__assert_fail@plt+0x18b4>
   12d18:	ldr	r0, [pc, #1576]	; 13348 <__assert_fail@plt+0x1e90>
   12d1c:	bl	19254 <__assert_fail@plt+0x7d9c>
   12d20:	ldr	r3, [sp, #44]	; 0x2c
   12d24:	cmp	r3, #0
   12d28:	ble	132e8 <__assert_fail@plt+0x1e30>
   12d2c:	add	r3, r6, r5
   12d30:	mov	r8, #0
   12d34:	mov	sl, #1
   12d38:	str	fp, [sp, #72]	; 0x48
   12d3c:	mov	fp, r3
   12d40:	b	12e18 <__assert_fail@plt+0x1960>
   12d44:	mov	r2, #5
   12d48:	ldr	r1, [pc, #1532]	; 1334c <__assert_fail@plt+0x1e94>
   12d4c:	mov	r0, #0
   12d50:	bl	111e8 <dcgettext@plt>
   12d54:	mov	r2, r0
   12d58:	mov	r1, #0
   12d5c:	mov	r0, r1
   12d60:	bl	1129c <error@plt>
   12d64:	mov	r0, #1
   12d68:	bl	12678 <__assert_fail@plt+0x11c0>
   12d6c:	bl	11338 <__errno_location@plt>
   12d70:	ldr	r5, [r0]
   12d74:	ldr	r2, [pc, #1492]	; 13350 <__assert_fail@plt+0x1e98>
   12d78:	cmp	r4, #0
   12d7c:	movne	r2, r4
   12d80:	mov	r1, #3
   12d84:	mov	r0, #0
   12d88:	bl	161c4 <__assert_fail@plt+0x4d0c>
   12d8c:	mov	r3, r0
   12d90:	ldr	r2, [pc, #1468]	; 13354 <__assert_fail@plt+0x1e9c>
   12d94:	mov	r1, r5
   12d98:	mov	r0, #1
   12d9c:	bl	1129c <error@plt>
   12da0:	bl	11338 <__errno_location@plt>
   12da4:	ldr	r4, [r0]
   12da8:	mov	r2, #5
   12dac:	ldr	r1, [pc, #1444]	; 13358 <__assert_fail@plt+0x1ea0>
   12db0:	mov	r0, #0
   12db4:	bl	111e8 <dcgettext@plt>
   12db8:	ldr	r3, [sp, #28]
   12dbc:	mov	r2, r0
   12dc0:	mov	r1, r4
   12dc4:	mov	r0, #0
   12dc8:	bl	1129c <error@plt>
   12dcc:	mov	r0, #0
   12dd0:	b	12dfc <__assert_fail@plt+0x1944>
   12dd4:	mov	r2, #5
   12dd8:	ldr	r1, [pc, #1404]	; 1335c <__assert_fail@plt+0x1ea4>
   12ddc:	mov	r0, #0
   12de0:	bl	111e8 <dcgettext@plt>
   12de4:	ldr	r3, [sp, #28]
   12de8:	mov	r2, r0
   12dec:	mov	r1, #0
   12df0:	mov	r0, r1
   12df4:	bl	1129c <error@plt>
   12df8:	mov	r0, #0
   12dfc:	and	sl, sl, r0
   12e00:	ldr	r0, [sp, #28]
   12e04:	bl	13c70 <__assert_fail@plt+0x27b8>
   12e08:	add	r8, r8, #1
   12e0c:	ldr	r3, [sp, #44]	; 0x2c
   12e10:	cmp	r3, r8
   12e14:	beq	132ec <__assert_fail@plt+0x1e34>
   12e18:	ldr	r2, [fp]
   12e1c:	mov	r1, #3
   12e20:	mov	r0, #0
   12e24:	bl	161c4 <__assert_fail@plt+0x4d0c>
   12e28:	bl	17a9c <__assert_fail@plt+0x65e4>
   12e2c:	str	r0, [sp, #28]
   12e30:	ldr	r0, [fp], #4
   12e34:	str	r0, [sp, #32]
   12e38:	ldr	r1, [pc, #1312]	; 13360 <__assert_fail@plt+0x1ea8>
   12e3c:	bl	11158 <strcmp@plt>
   12e40:	cmp	r0, #0
   12e44:	bne	12e84 <__assert_fail@plt+0x19cc>
   12e48:	ldr	r3, [pc, #1268]	; 13344 <__assert_fail@plt+0x1e8c>
   12e4c:	ldr	r4, [r3]
   12e50:	mov	r1, #3
   12e54:	mov	r0, #1
   12e58:	bl	139dc <__assert_fail@plt+0x2524>
   12e5c:	cmp	r0, #0
   12e60:	blt	12da0 <__assert_fail@plt+0x18e8>
   12e64:	tst	r0, #1024	; 0x400
   12e68:	bne	12dd4 <__assert_fail@plt+0x191c>
   12e6c:	add	r3, sp, #88	; 0x58
   12e70:	mov	r2, r4
   12e74:	ldr	r1, [sp, #28]
   12e78:	mov	r0, #1
   12e7c:	bl	1206c <__assert_fail@plt+0xbb4>
   12e80:	b	12dfc <__assert_fail@plt+0x1944>
   12e84:	ldr	r3, [pc, #1208]	; 13344 <__assert_fail@plt+0x1e8c>
   12e88:	ldr	r5, [r3]
   12e8c:	ldr	r1, [pc, #1232]	; 13364 <__assert_fail@plt+0x1eac>
   12e90:	ldr	r0, [sp, #32]
   12e94:	bl	13c34 <__assert_fail@plt+0x277c>
   12e98:	subs	r4, r0, #0
   12e9c:	blt	12ef0 <__assert_fail@plt+0x1a38>
   12ea0:	add	r3, sp, #88	; 0x58
   12ea4:	mov	r2, r5
   12ea8:	ldr	r1, [sp, #28]
   12eac:	mov	r0, r4
   12eb0:	bl	1206c <__assert_fail@plt+0xbb4>
   12eb4:	str	r0, [sp, #36]	; 0x24
   12eb8:	mov	r0, r4
   12ebc:	bl	114ac <close@plt>
   12ec0:	cmp	r0, #0
   12ec4:	bne	12f70 <__assert_fail@plt+0x1ab8>
   12ec8:	ldr	r3, [sp, #36]	; 0x24
   12ecc:	cmp	r3, #0
   12ed0:	beq	12ee0 <__assert_fail@plt+0x1a28>
   12ed4:	ldr	r3, [sp, #104]	; 0x68
   12ed8:	cmp	r3, #0
   12edc:	bne	12fa8 <__assert_fail@plt+0x1af0>
   12ee0:	ldr	r3, [sp, #36]	; 0x24
   12ee4:	and	r3, r3, sl
   12ee8:	mov	sl, r3
   12eec:	b	12e00 <__assert_fail@plt+0x1948>
   12ef0:	bl	11338 <__errno_location@plt>
   12ef4:	mov	r6, r0
   12ef8:	ldr	r3, [r0]
   12efc:	cmp	r3, #13
   12f00:	beq	12f38 <__assert_fail@plt+0x1a80>
   12f04:	ldr	r4, [r6]
   12f08:	mov	r2, #5
   12f0c:	ldr	r1, [pc, #1108]	; 13368 <__assert_fail@plt+0x1eb0>
   12f10:	mov	r0, #0
   12f14:	bl	111e8 <dcgettext@plt>
   12f18:	ldr	r3, [sp, #28]
   12f1c:	mov	r2, r0
   12f20:	mov	r1, r4
   12f24:	mov	r0, #0
   12f28:	bl	1129c <error@plt>
   12f2c:	mov	r3, #0
   12f30:	str	r3, [sp, #36]	; 0x24
   12f34:	b	12ee0 <__assert_fail@plt+0x1a28>
   12f38:	ldrb	r3, [sp, #88]	; 0x58
   12f3c:	cmp	r3, #0
   12f40:	beq	12f04 <__assert_fail@plt+0x1a4c>
   12f44:	mov	r1, #128	; 0x80
   12f48:	ldr	r0, [sp, #32]
   12f4c:	bl	11470 <chmod@plt>
   12f50:	cmp	r0, #0
   12f54:	bne	12f04 <__assert_fail@plt+0x1a4c>
   12f58:	ldr	r1, [pc, #1028]	; 13364 <__assert_fail@plt+0x1eac>
   12f5c:	ldr	r0, [sp, #32]
   12f60:	bl	13c34 <__assert_fail@plt+0x277c>
   12f64:	subs	r4, r0, #0
   12f68:	bge	12ea0 <__assert_fail@plt+0x19e8>
   12f6c:	b	12f04 <__assert_fail@plt+0x1a4c>
   12f70:	bl	11338 <__errno_location@plt>
   12f74:	ldr	r4, [r0]
   12f78:	mov	r2, #5
   12f7c:	ldr	r1, [pc, #1000]	; 1336c <__assert_fail@plt+0x1eb4>
   12f80:	mov	r0, #0
   12f84:	bl	111e8 <dcgettext@plt>
   12f88:	ldr	r3, [sp, #28]
   12f8c:	mov	r2, r0
   12f90:	mov	r1, r4
   12f94:	mov	r0, #0
   12f98:	bl	1129c <error@plt>
   12f9c:	mov	r3, #0
   12fa0:	str	r3, [sp, #36]	; 0x24
   12fa4:	b	12ee0 <__assert_fail@plt+0x1a28>
   12fa8:	ldr	r0, [sp, #32]
   12fac:	bl	17a9c <__assert_fail@plt+0x65e4>
   12fb0:	mov	r4, r0
   12fb4:	str	r0, [sp, #40]	; 0x28
   12fb8:	bl	13720 <__assert_fail@plt+0x2268>
   12fbc:	str	r0, [sp, #48]	; 0x30
   12fc0:	mov	r0, r4
   12fc4:	bl	138f4 <__assert_fail@plt+0x243c>
   12fc8:	mov	r2, r0
   12fcc:	str	r0, [sp, #68]	; 0x44
   12fd0:	mov	r1, #3
   12fd4:	mov	r0, #0
   12fd8:	bl	161c4 <__assert_fail@plt+0x4d0c>
   12fdc:	bl	17a9c <__assert_fail@plt+0x65e4>
   12fe0:	str	r0, [sp, #56]	; 0x38
   12fe4:	ldr	r3, [sp, #104]	; 0x68
   12fe8:	cmp	r3, #3
   12fec:	ldrne	r3, [sp, #72]	; 0x48
   12ff0:	strne	r3, [sp, #52]	; 0x34
   12ff4:	beq	13058 <__assert_fail@plt+0x1ba0>
   12ff8:	ldrb	r3, [sp, #108]	; 0x6c
   12ffc:	cmp	r3, #0
   13000:	bne	1306c <__assert_fail@plt+0x1bb4>
   13004:	ldr	r3, [sp, #104]	; 0x68
   13008:	cmp	r3, #1
   1300c:	beq	131e0 <__assert_fail@plt+0x1d28>
   13010:	ldr	r4, [sp, #48]	; 0x30
   13014:	mov	r0, r4
   13018:	bl	13788 <__assert_fail@plt+0x22d0>
   1301c:	mov	r9, r0
   13020:	add	r2, r4, r0
   13024:	ldr	r1, [sp, #36]	; 0x24
   13028:	str	r1, [sp, #60]	; 0x3c
   1302c:	sub	r7, r4, #1
   13030:	ldr	r1, [sp, #40]	; 0x28
   13034:	sub	r3, r4, r1
   13038:	ldr	r1, [sp, #32]
   1303c:	add	r3, r1, r3
   13040:	str	r3, [sp, #64]	; 0x40
   13044:	str	sl, [sp, #76]	; 0x4c
   13048:	str	r8, [sp, #80]	; 0x50
   1304c:	mov	r8, r2
   13050:	str	fp, [sp, #84]	; 0x54
   13054:	b	13140 <__assert_fail@plt+0x1c88>
   13058:	mov	r1, #18688	; 0x4900
   1305c:	ldr	r0, [sp, #68]	; 0x44
   13060:	bl	13c34 <__assert_fail@plt+0x277c>
   13064:	str	r0, [sp, #52]	; 0x34
   13068:	b	12ff8 <__assert_fail@plt+0x1b40>
   1306c:	mov	r2, #5
   13070:	ldr	r1, [pc, #760]	; 13370 <__assert_fail@plt+0x1eb8>
   13074:	mov	r0, #0
   13078:	bl	111e8 <dcgettext@plt>
   1307c:	ldr	r3, [sp, #28]
   13080:	mov	r2, r0
   13084:	mov	r1, #0
   13088:	mov	r0, r1
   1308c:	bl	1129c <error@plt>
   13090:	b	13004 <__assert_fail@plt+0x1b4c>
   13094:	ldr	r3, [pc, #728]	; 13374 <__assert_fail@plt+0x1ebc>
   13098:	mov	r2, #1000	; 0x3e8
   1309c:	ldr	r1, [pc, #724]	; 13378 <__assert_fail@plt+0x1ec0>
   130a0:	ldr	r0, [pc, #724]	; 1337c <__assert_fail@plt+0x1ec4>
   130a4:	bl	114b8 <__assert_fail@plt>
   130a8:	strb	r3, [r4]
   130ac:	b	1316c <__assert_fail@plt+0x1cb4>
   130b0:	ldr	r3, [sp, #52]	; 0x34
   130b4:	cmp	r3, #0
   130b8:	blt	130d8 <__assert_fail@plt+0x1c20>
   130bc:	ldr	r1, [sp, #56]	; 0x38
   130c0:	mov	r0, r3
   130c4:	bl	11648 <__assert_fail@plt+0x190>
   130c8:	ldr	r3, [sp, #36]	; 0x24
   130cc:	cmp	r0, #0
   130d0:	movne	r3, #0
   130d4:	str	r3, [sp, #36]	; 0x24
   130d8:	ldrb	r3, [sp, #108]	; 0x6c
   130dc:	cmp	r3, #0
   130e0:	beq	1312c <__assert_fail@plt+0x1c74>
   130e4:	ldr	r4, [sp, #28]
   130e8:	ldr	r3, [sp, #32]
   130ec:	ldr	r2, [sp, #60]	; 0x3c
   130f0:	cmp	r2, #0
   130f4:	moveq	r4, r3
   130f8:	mov	r2, #5
   130fc:	ldr	r1, [pc, #636]	; 13380 <__assert_fail@plt+0x1ec8>
   13100:	mov	r0, #0
   13104:	bl	111e8 <dcgettext@plt>
   13108:	ldr	r3, [sp, #40]	; 0x28
   1310c:	str	r3, [sp]
   13110:	mov	r3, r4
   13114:	mov	r2, r0
   13118:	mov	r1, #0
   1311c:	mov	r0, r1
   13120:	bl	1129c <error@plt>
   13124:	mov	r3, #0
   13128:	str	r3, [sp, #60]	; 0x3c
   1312c:	add	r2, r9, #1
   13130:	ldr	r1, [sp, #48]	; 0x30
   13134:	ldr	r0, [sp, #64]	; 0x40
   13138:	bl	11194 <memcpy@plt>
   1313c:	sub	r9, r9, #1
   13140:	cmp	r9, #0
   13144:	beq	131d4 <__assert_fail@plt+0x1d1c>
   13148:	mov	r2, r9
   1314c:	mov	r1, #48	; 0x30
   13150:	ldr	r0, [sp, #48]	; 0x30
   13154:	bl	11368 <memset@plt>
   13158:	mov	r3, #0
   1315c:	strb	r3, [r8], #-1
   13160:	mov	fp, #1
   13164:	mvn	sl, #99	; 0x63
   13168:	mov	r6, #48	; 0x30
   1316c:	str	fp, [sp]
   13170:	ldr	r3, [sp, #40]	; 0x28
   13174:	mov	r2, sl
   13178:	ldr	r1, [sp, #32]
   1317c:	mov	r0, sl
   13180:	bl	16d00 <__assert_fail@plt+0x5848>
   13184:	cmp	r0, #0
   13188:	beq	130b0 <__assert_fail@plt+0x1bf8>
   1318c:	bl	11338 <__errno_location@plt>
   13190:	ldr	r3, [r0]
   13194:	cmp	r3, #17
   13198:	bne	1313c <__assert_fail@plt+0x1c84>
   1319c:	mov	r4, r8
   131a0:	ldrb	r1, [r4]
   131a4:	ldr	r0, [pc, #472]	; 13384 <__assert_fail@plt+0x1ecc>
   131a8:	bl	11320 <strchr@plt>
   131ac:	cmp	r0, #0
   131b0:	beq	13094 <__assert_fail@plt+0x1bdc>
   131b4:	ldrb	r3, [r0, #1]
   131b8:	cmp	r3, #0
   131bc:	bne	130a8 <__assert_fail@plt+0x1bf0>
   131c0:	strb	r6, [r4]
   131c4:	sub	r4, r4, #1
   131c8:	cmp	r7, r4
   131cc:	bne	131a0 <__assert_fail@plt+0x1ce8>
   131d0:	b	1313c <__assert_fail@plt+0x1c84>
   131d4:	ldr	sl, [sp, #76]	; 0x4c
   131d8:	ldr	r8, [sp, #80]	; 0x50
   131dc:	ldr	fp, [sp, #84]	; 0x54
   131e0:	ldr	r0, [sp, #32]
   131e4:	bl	111f4 <unlink@plt>
   131e8:	cmp	r0, #0
   131ec:	bne	13250 <__assert_fail@plt+0x1d98>
   131f0:	ldrb	r3, [sp, #108]	; 0x6c
   131f4:	cmp	r3, #0
   131f8:	bne	13288 <__assert_fail@plt+0x1dd0>
   131fc:	ldr	r4, [sp, #52]	; 0x34
   13200:	cmp	r4, #0
   13204:	blt	13234 <__assert_fail@plt+0x1d7c>
   13208:	ldr	r1, [sp, #56]	; 0x38
   1320c:	mov	r0, r4
   13210:	bl	11648 <__assert_fail@plt+0x190>
   13214:	ldr	r3, [sp, #36]	; 0x24
   13218:	cmp	r0, #0
   1321c:	movne	r3, #0
   13220:	str	r3, [sp, #36]	; 0x24
   13224:	mov	r0, r4
   13228:	bl	114ac <close@plt>
   1322c:	cmp	r0, #0
   13230:	bne	132b0 <__assert_fail@plt+0x1df8>
   13234:	ldr	r0, [sp, #40]	; 0x28
   13238:	bl	13c70 <__assert_fail@plt+0x27b8>
   1323c:	ldr	r0, [sp, #68]	; 0x44
   13240:	bl	13c70 <__assert_fail@plt+0x27b8>
   13244:	ldr	r0, [sp, #56]	; 0x38
   13248:	bl	13c70 <__assert_fail@plt+0x27b8>
   1324c:	b	12ee0 <__assert_fail@plt+0x1a28>
   13250:	bl	11338 <__errno_location@plt>
   13254:	ldr	r4, [r0]
   13258:	mov	r2, #5
   1325c:	ldr	r1, [pc, #292]	; 13388 <__assert_fail@plt+0x1ed0>
   13260:	mov	r0, #0
   13264:	bl	111e8 <dcgettext@plt>
   13268:	ldr	r3, [sp, #28]
   1326c:	mov	r2, r0
   13270:	mov	r1, r4
   13274:	mov	r0, #0
   13278:	bl	1129c <error@plt>
   1327c:	mov	r3, #0
   13280:	str	r3, [sp, #36]	; 0x24
   13284:	b	131fc <__assert_fail@plt+0x1d44>
   13288:	mov	r2, #5
   1328c:	ldr	r1, [pc, #248]	; 1338c <__assert_fail@plt+0x1ed4>
   13290:	mov	r0, #0
   13294:	bl	111e8 <dcgettext@plt>
   13298:	ldr	r3, [sp, #28]
   1329c:	mov	r2, r0
   132a0:	mov	r1, #0
   132a4:	mov	r0, r1
   132a8:	bl	1129c <error@plt>
   132ac:	b	131fc <__assert_fail@plt+0x1d44>
   132b0:	bl	11338 <__errno_location@plt>
   132b4:	ldr	r4, [r0]
   132b8:	mov	r2, #5
   132bc:	ldr	r1, [pc, #168]	; 1336c <__assert_fail@plt+0x1eb4>
   132c0:	mov	r0, #0
   132c4:	bl	111e8 <dcgettext@plt>
   132c8:	ldr	r3, [sp, #56]	; 0x38
   132cc:	mov	r2, r0
   132d0:	mov	r1, r4
   132d4:	mov	r0, #0
   132d8:	bl	1129c <error@plt>
   132dc:	mov	r3, #0
   132e0:	str	r3, [sp, #36]	; 0x24
   132e4:	b	13234 <__assert_fail@plt+0x1d7c>
   132e8:	mov	sl, #1
   132ec:	eor	r0, sl, #1
   132f0:	add	sp, sp, #116	; 0x74
   132f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132f8:	andeq	r9, r1, ip, lsl #24
   132fc:	andeq	r9, r1, r4, ror sp
   13300:	andeq	r9, r1, r8, lsr #28
   13304:	andeq	r3, r1, r0, lsl #16
   13308:	andeq	r9, r1, r8, ror r2
   1330c:			; <UNDEFINED> instruction: 0x00019ebc
   13310:			; <UNDEFINED> instruction: 0x0002b1b8
   13314:	andeq	r9, r1, ip, lsl #29
   13318:	andeq	r9, r1, r0, asr #28
   1331c:			; <UNDEFINED> instruction: 0x00019eb0
   13320:	andeq	fp, r2, r0, asr r1
   13324:	andeq	r9, r1, r0, ror sp
   13328:	andeq	r9, r1, r0, lsl #12
   1332c:			; <UNDEFINED> instruction: 0x0002b1b4
   13330:	andeq	r9, r1, ip, asr lr
   13334:	andeq	fp, r2, r4, asr r1
   13338:	andeq	r9, r1, r0, lsl #29
   1333c:	andeq	r9, r1, r0, lsr #29
   13340:	andeq	fp, r2, r8, lsr #3
   13344:	andeq	fp, r2, r0, asr #3
   13348:	strdeq	r1, [r1], -r0
   1334c:	andeq	r9, r1, r8, asr #29
   13350:	andeq	r9, r1, ip, lsl lr
   13354:	andeq	sl, r1, ip, lsl r1
   13358:	andeq	r9, r1, r4, ror #29
   1335c:	strdeq	r9, [r1], -r8
   13360:	andeq	r9, r1, r0, ror #29
   13364:	andeq	r0, r0, r1, lsl #2
   13368:	andeq	r9, r1, r8, lsr #30
   1336c:	andeq	r9, r1, r8, asr #30
   13370:	andeq	r9, r1, ip, asr pc
   13374:	muleq	r1, ip, r4
   13378:	andeq	r9, r1, ip, ror #30
   1337c:	andeq	r9, r1, r8, ror pc
   13380:	andeq	r9, r1, ip, ror pc
   13384:	andeq	r9, r1, r8, asr r4
   13388:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1338c:	andeq	r9, r1, r8, lsr #31
   13390:	push	{r4, lr}
   13394:	mov	r0, #1
   13398:	bl	12678 <__assert_fail@plt+0x11c0>
   1339c:	pop	{r4, pc}
   133a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133a4:	sub	sp, sp, #12
   133a8:	str	r0, [sp, #4]
   133ac:	mov	r6, r1
   133b0:	mov	fp, r2
   133b4:	mov	r8, r3
   133b8:	bl	11314 <strlen@plt>
   133bc:	str	r0, [sp]
   133c0:	ldr	r4, [r6]
   133c4:	cmp	r4, #0
   133c8:	beq	13470 <__assert_fail@plt+0x1fb8>
   133cc:	mov	r5, fp
   133d0:	mov	sl, #0
   133d4:	mvn	r9, #0
   133d8:	mov	r7, sl
   133dc:	b	133fc <__assert_fail@plt+0x1f44>
   133e0:	mov	r9, r7
   133e4:	b	13464 <__assert_fail@plt+0x1fac>
   133e8:	add	r7, r7, #1
   133ec:	ldr	r4, [r6, #4]!
   133f0:	add	r5, r5, r8
   133f4:	cmp	r4, #0
   133f8:	beq	1345c <__assert_fail@plt+0x1fa4>
   133fc:	ldr	r2, [sp]
   13400:	ldr	r1, [sp, #4]
   13404:	mov	r0, r4
   13408:	bl	11488 <strncmp@plt>
   1340c:	cmp	r0, #0
   13410:	bne	133e8 <__assert_fail@plt+0x1f30>
   13414:	mov	r0, r4
   13418:	bl	11314 <strlen@plt>
   1341c:	ldr	r3, [sp]
   13420:	cmp	r3, r0
   13424:	beq	133e0 <__assert_fail@plt+0x1f28>
   13428:	cmn	r9, #1
   1342c:	moveq	r9, r7
   13430:	beq	133e8 <__assert_fail@plt+0x1f30>
   13434:	cmp	fp, #0
   13438:	moveq	sl, #1
   1343c:	beq	133e8 <__assert_fail@plt+0x1f30>
   13440:	mov	r2, r8
   13444:	mov	r1, r5
   13448:	mla	r0, r8, r9, fp
   1344c:	bl	111d0 <memcmp@plt>
   13450:	cmp	r0, #0
   13454:	movne	sl, #1
   13458:	b	133e8 <__assert_fail@plt+0x1f30>
   1345c:	cmp	sl, #0
   13460:	mvnne	r9, #1
   13464:	mov	r0, r9
   13468:	add	sp, sp, #12
   1346c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13470:	mvn	r9, #0
   13474:	b	13464 <__assert_fail@plt+0x1fac>
   13478:	push	{r4, r5, r6, lr}
   1347c:	mov	r6, r0
   13480:	ldr	r0, [r1]
   13484:	cmp	r0, #0
   13488:	beq	134c4 <__assert_fail@plt+0x200c>
   1348c:	mov	r4, r1
   13490:	mov	r5, #0
   13494:	mov	r1, r6
   13498:	bl	11158 <strcmp@plt>
   1349c:	cmp	r0, #0
   134a0:	beq	134bc <__assert_fail@plt+0x2004>
   134a4:	add	r5, r5, #1
   134a8:	ldr	r0, [r4, #4]!
   134ac:	cmp	r0, #0
   134b0:	bne	13494 <__assert_fail@plt+0x1fdc>
   134b4:	mvn	r0, #0
   134b8:	pop	{r4, r5, r6, pc}
   134bc:	mov	r0, r5
   134c0:	pop	{r4, r5, r6, pc}
   134c4:	mvn	r0, #0
   134c8:	pop	{r4, r5, r6, pc}
   134cc:	push	{r4, r5, r6, lr}
   134d0:	sub	sp, sp, #8
   134d4:	mov	r5, r0
   134d8:	mov	r4, r1
   134dc:	cmn	r2, #1
   134e0:	mov	r2, #5
   134e4:	ldreq	r1, [pc, #76]	; 13538 <__assert_fail@plt+0x2080>
   134e8:	ldrne	r1, [pc, #76]	; 1353c <__assert_fail@plt+0x2084>
   134ec:	mov	r0, #0
   134f0:	bl	111e8 <dcgettext@plt>
   134f4:	mov	r6, r0
   134f8:	mov	r2, r4
   134fc:	mov	r1, #8
   13500:	mov	r0, #0
   13504:	bl	1608c <__assert_fail@plt+0x4bd4>
   13508:	mov	r4, r0
   1350c:	mov	r1, r5
   13510:	mov	r0, #1
   13514:	bl	1631c <__assert_fail@plt+0x4e64>
   13518:	str	r0, [sp]
   1351c:	mov	r3, r4
   13520:	mov	r2, r6
   13524:	mov	r1, #0
   13528:	mov	r0, r1
   1352c:	bl	1129c <error@plt>
   13530:	add	sp, sp, #8
   13534:	pop	{r4, r5, r6, pc}
   13538:	andeq	sl, r1, r8, lsr #1
   1353c:	andeq	sl, r1, r4, asr #1
   13540:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13544:	mov	r7, r0
   13548:	mov	r4, r1
   1354c:	mov	r8, r2
   13550:	mov	r2, #5
   13554:	ldr	r1, [pc, #224]	; 1363c <__assert_fail@plt+0x2184>
   13558:	mov	r0, #0
   1355c:	bl	111e8 <dcgettext@plt>
   13560:	ldr	r3, [pc, #216]	; 13640 <__assert_fail@plt+0x2188>
   13564:	ldr	r1, [r3]
   13568:	bl	11134 <fputs_unlocked@plt>
   1356c:	ldr	r5, [r7]
   13570:	cmp	r5, #0
   13574:	beq	13604 <__assert_fail@plt+0x214c>
   13578:	mov	r9, #0
   1357c:	mov	r6, r9
   13580:	ldr	sl, [pc, #184]	; 13640 <__assert_fail@plt+0x2188>
   13584:	b	135c0 <__assert_fail@plt+0x2108>
   13588:	ldr	r9, [sl]
   1358c:	mov	r0, r5
   13590:	bl	1632c <__assert_fail@plt+0x4e74>
   13594:	mov	r3, r0
   13598:	ldr	r2, [pc, #164]	; 13644 <__assert_fail@plt+0x218c>
   1359c:	mov	r1, #1
   135a0:	mov	r0, r9
   135a4:	bl	113a4 <__fprintf_chk@plt>
   135a8:	mov	r9, r4
   135ac:	add	r6, r6, #1
   135b0:	ldr	r5, [r7, #4]!
   135b4:	add	r4, r4, r8
   135b8:	cmp	r5, #0
   135bc:	beq	13604 <__assert_fail@plt+0x214c>
   135c0:	cmp	r6, #0
   135c4:	beq	13588 <__assert_fail@plt+0x20d0>
   135c8:	mov	r2, r8
   135cc:	mov	r1, r4
   135d0:	mov	r0, r9
   135d4:	bl	111d0 <memcmp@plt>
   135d8:	cmp	r0, #0
   135dc:	bne	13588 <__assert_fail@plt+0x20d0>
   135e0:	ldr	fp, [sl]
   135e4:	mov	r0, r5
   135e8:	bl	1632c <__assert_fail@plt+0x4e74>
   135ec:	mov	r3, r0
   135f0:	ldr	r2, [pc, #80]	; 13648 <__assert_fail@plt+0x2190>
   135f4:	mov	r1, #1
   135f8:	mov	r0, fp
   135fc:	bl	113a4 <__fprintf_chk@plt>
   13600:	b	135ac <__assert_fail@plt+0x20f4>
   13604:	ldr	r3, [pc, #52]	; 13640 <__assert_fail@plt+0x2188>
   13608:	ldr	r0, [r3]
   1360c:	ldr	r3, [r0, #20]
   13610:	ldr	r2, [r0, #24]
   13614:	cmp	r3, r2
   13618:	bcs	13630 <__assert_fail@plt+0x2178>
   1361c:	add	r2, r3, #1
   13620:	str	r2, [r0, #20]
   13624:	mov	r2, #10
   13628:	strb	r2, [r3]
   1362c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13630:	mov	r1, #10
   13634:	bl	113d4 <__overflow@plt>
   13638:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1363c:	andeq	sl, r1, r4, ror #1
   13640:			; <UNDEFINED> instruction: 0x0002b1b0
   13644:	strdeq	sl, [r1], -ip
   13648:	andeq	sl, r1, r4, lsl #2
   1364c:	push	{r4, r5, r6, r7, r8, lr}
   13650:	mov	r7, r0
   13654:	mov	r5, r1
   13658:	mov	r4, r2
   1365c:	mov	r6, r3
   13660:	ldrb	r3, [sp, #32]
   13664:	cmp	r3, #0
   13668:	beq	136b8 <__assert_fail@plt+0x2200>
   1366c:	ldr	r3, [sp, #24]
   13670:	mov	r2, r6
   13674:	mov	r1, r4
   13678:	mov	r0, r5
   1367c:	bl	133a0 <__assert_fail@plt+0x1ee8>
   13680:	cmp	r0, #0
   13684:	popge	{r4, r5, r6, r7, r8, pc}
   13688:	mov	r2, r0
   1368c:	mov	r1, r5
   13690:	mov	r0, r7
   13694:	bl	134cc <__assert_fail@plt+0x2014>
   13698:	ldr	r2, [sp, #24]
   1369c:	mov	r1, r6
   136a0:	mov	r0, r4
   136a4:	bl	13540 <__assert_fail@plt+0x2088>
   136a8:	ldr	r3, [sp, #28]
   136ac:	blx	r3
   136b0:	mvn	r0, #0
   136b4:	pop	{r4, r5, r6, r7, r8, pc}
   136b8:	mov	r1, r2
   136bc:	mov	r0, r5
   136c0:	bl	13478 <__assert_fail@plt+0x1fc0>
   136c4:	b	13680 <__assert_fail@plt+0x21c8>
   136c8:	push	{r4, r5, r6, r7, r8, lr}
   136cc:	ldr	r6, [r1]
   136d0:	cmp	r6, #0
   136d4:	beq	13718 <__assert_fail@plt+0x2260>
   136d8:	mov	r7, r3
   136dc:	mov	r8, r0
   136e0:	mov	r4, r2
   136e4:	mov	r5, r1
   136e8:	mov	r2, r7
   136ec:	mov	r1, r4
   136f0:	mov	r0, r8
   136f4:	bl	111d0 <memcmp@plt>
   136f8:	cmp	r0, #0
   136fc:	beq	13710 <__assert_fail@plt+0x2258>
   13700:	ldr	r6, [r5, #4]!
   13704:	add	r4, r4, r7
   13708:	cmp	r6, #0
   1370c:	bne	136e8 <__assert_fail@plt+0x2230>
   13710:	mov	r0, r6
   13714:	pop	{r4, r5, r6, r7, r8, pc}
   13718:	mov	r6, #0
   1371c:	b	13710 <__assert_fail@plt+0x2258>
   13720:	ldrb	r3, [r0]
   13724:	cmp	r3, #47	; 0x2f
   13728:	bne	13738 <__assert_fail@plt+0x2280>
   1372c:	ldrb	r3, [r0, #1]!
   13730:	cmp	r3, #47	; 0x2f
   13734:	beq	1372c <__assert_fail@plt+0x2274>
   13738:	ldrb	r2, [r0]
   1373c:	cmp	r2, #0
   13740:	bxeq	lr
   13744:	push	{lr}		; (str lr, [sp, #-4]!)
   13748:	mov	r1, r0
   1374c:	mov	r3, #0
   13750:	mov	lr, #1
   13754:	mov	ip, r3
   13758:	b	13768 <__assert_fail@plt+0x22b0>
   1375c:	ldrb	r2, [r1, #1]!
   13760:	cmp	r2, #0
   13764:	beq	13784 <__assert_fail@plt+0x22cc>
   13768:	cmp	r2, #47	; 0x2f
   1376c:	moveq	r3, lr
   13770:	beq	1375c <__assert_fail@plt+0x22a4>
   13774:	cmp	r3, #0
   13778:	movne	r0, r1
   1377c:	movne	r3, ip
   13780:	b	1375c <__assert_fail@plt+0x22a4>
   13784:	pop	{pc}		; (ldr pc, [sp], #4)
   13788:	push	{r4, lr}
   1378c:	mov	r4, r0
   13790:	bl	11314 <strlen@plt>
   13794:	cmp	r0, #1
   13798:	popls	{r4, pc}
   1379c:	sub	r3, r0, #1
   137a0:	add	r2, r4, r3
   137a4:	ldrb	r1, [r4, r3]
   137a8:	cmp	r1, #47	; 0x2f
   137ac:	popne	{r4, pc}
   137b0:	cmp	r3, #1
   137b4:	beq	137d8 <__assert_fail@plt+0x2320>
   137b8:	sub	r0, r3, #1
   137bc:	ldrb	r1, [r2, #-1]!
   137c0:	cmp	r1, #47	; 0x2f
   137c4:	beq	137d0 <__assert_fail@plt+0x2318>
   137c8:	mov	r0, r3
   137cc:	pop	{r4, pc}
   137d0:	mov	r3, r0
   137d4:	b	137b0 <__assert_fail@plt+0x22f8>
   137d8:	mov	r0, #1
   137dc:	pop	{r4, pc}
   137e0:	ldr	r3, [pc, #4]	; 137ec <__assert_fail@plt+0x2334>
   137e4:	str	r0, [r3]
   137e8:	bx	lr
   137ec:	andeq	fp, r2, r4, asr #3
   137f0:	ldr	r3, [pc, #4]	; 137fc <__assert_fail@plt+0x2344>
   137f4:	strb	r0, [r3, #4]
   137f8:	bx	lr
   137fc:	andeq	fp, r2, r4, asr #3
   13800:	push	{r4, r5, r6, lr}
   13804:	sub	sp, sp, #8
   13808:	ldr	r3, [pc, #200]	; 138d8 <__assert_fail@plt+0x2420>
   1380c:	ldr	r0, [r3]
   13810:	bl	182a0 <__assert_fail@plt+0x6de8>
   13814:	cmp	r0, #0
   13818:	beq	1383c <__assert_fail@plt+0x2384>
   1381c:	ldr	r3, [pc, #184]	; 138dc <__assert_fail@plt+0x2424>
   13820:	ldrb	r3, [r3, #4]
   13824:	cmp	r3, #0
   13828:	beq	13858 <__assert_fail@plt+0x23a0>
   1382c:	bl	11338 <__errno_location@plt>
   13830:	ldr	r3, [r0]
   13834:	cmp	r3, #32
   13838:	bne	13858 <__assert_fail@plt+0x23a0>
   1383c:	ldr	r3, [pc, #156]	; 138e0 <__assert_fail@plt+0x2428>
   13840:	ldr	r0, [r3]
   13844:	bl	182a0 <__assert_fail@plt+0x6de8>
   13848:	cmp	r0, #0
   1384c:	bne	138cc <__assert_fail@plt+0x2414>
   13850:	add	sp, sp, #8
   13854:	pop	{r4, r5, r6, pc}
   13858:	mov	r2, #5
   1385c:	ldr	r1, [pc, #128]	; 138e4 <__assert_fail@plt+0x242c>
   13860:	mov	r0, #0
   13864:	bl	111e8 <dcgettext@plt>
   13868:	mov	r4, r0
   1386c:	ldr	r3, [pc, #104]	; 138dc <__assert_fail@plt+0x2424>
   13870:	ldr	r5, [r3]
   13874:	cmp	r5, #0
   13878:	beq	138b0 <__assert_fail@plt+0x23f8>
   1387c:	bl	11338 <__errno_location@plt>
   13880:	ldr	r6, [r0]
   13884:	mov	r0, r5
   13888:	bl	161a4 <__assert_fail@plt+0x4cec>
   1388c:	str	r4, [sp]
   13890:	mov	r3, r0
   13894:	ldr	r2, [pc, #76]	; 138e8 <__assert_fail@plt+0x2430>
   13898:	mov	r1, r6
   1389c:	mov	r0, #0
   138a0:	bl	1129c <error@plt>
   138a4:	ldr	r3, [pc, #64]	; 138ec <__assert_fail@plt+0x2434>
   138a8:	ldr	r0, [r3]
   138ac:	bl	11188 <_exit@plt>
   138b0:	bl	11338 <__errno_location@plt>
   138b4:	mov	r3, r4
   138b8:	ldr	r2, [pc, #48]	; 138f0 <__assert_fail@plt+0x2438>
   138bc:	ldr	r1, [r0]
   138c0:	mov	r0, #0
   138c4:	bl	1129c <error@plt>
   138c8:	b	138a4 <__assert_fail@plt+0x23ec>
   138cc:	ldr	r3, [pc, #24]	; 138ec <__assert_fail@plt+0x2434>
   138d0:	ldr	r0, [r3]
   138d4:	bl	11188 <_exit@plt>
   138d8:			; <UNDEFINED> instruction: 0x0002b1b4
   138dc:	andeq	fp, r2, r4, asr #3
   138e0:			; <UNDEFINED> instruction: 0x0002b1b0
   138e4:	andeq	sl, r1, ip, lsl #2
   138e8:	andeq	sl, r1, r8, lsl r1
   138ec:	andeq	fp, r2, r8, asr r1
   138f0:	andeq	sl, r1, ip, lsl r1
   138f4:	push	{r4, lr}
   138f8:	bl	13980 <__assert_fail@plt+0x24c8>
   138fc:	cmp	r0, #0
   13900:	popne	{r4, pc}
   13904:	bl	17ab8 <__assert_fail@plt+0x6600>
   13908:	push	{r4, r5, r6, lr}
   1390c:	mov	r5, r0
   13910:	ldrb	r4, [r0]
   13914:	cmp	r4, #47	; 0x2f
   13918:	movne	r4, #0
   1391c:	moveq	r4, #1
   13920:	bl	13720 <__assert_fail@plt+0x2268>
   13924:	sub	r0, r0, r5
   13928:	cmp	r0, r4
   1392c:	bls	13964 <__assert_fail@plt+0x24ac>
   13930:	sub	r3, r0, #1
   13934:	add	r2, r5, r3
   13938:	ldrb	r1, [r5, r3]
   1393c:	cmp	r1, #47	; 0x2f
   13940:	bne	1396c <__assert_fail@plt+0x24b4>
   13944:	cmp	r4, r3
   13948:	beq	13978 <__assert_fail@plt+0x24c0>
   1394c:	sub	r0, r3, #1
   13950:	ldrb	r1, [r2, #-1]!
   13954:	cmp	r1, #47	; 0x2f
   13958:	bne	13974 <__assert_fail@plt+0x24bc>
   1395c:	mov	r3, r0
   13960:	b	13944 <__assert_fail@plt+0x248c>
   13964:	mov	r4, r0
   13968:	b	13978 <__assert_fail@plt+0x24c0>
   1396c:	mov	r4, r0
   13970:	b	13978 <__assert_fail@plt+0x24c0>
   13974:	mov	r4, r3
   13978:	mov	r0, r4
   1397c:	pop	{r4, r5, r6, pc}
   13980:	push	{r4, r5, r6, r7, r8, lr}
   13984:	mov	r7, r0
   13988:	bl	13908 <__assert_fail@plt+0x2450>
   1398c:	mov	r4, r0
   13990:	add	r6, r0, #1
   13994:	cmp	r0, #0
   13998:	movne	r0, r6
   1399c:	addeq	r0, r6, #1
   139a0:	bl	18220 <__assert_fail@plt+0x6d68>
   139a4:	subs	r5, r0, #0
   139a8:	beq	139d4 <__assert_fail@plt+0x251c>
   139ac:	mov	r2, r4
   139b0:	mov	r1, r7
   139b4:	mov	r0, r5
   139b8:	bl	11194 <memcpy@plt>
   139bc:	cmp	r4, #0
   139c0:	moveq	r3, #46	; 0x2e
   139c4:	strbeq	r3, [r5, r4]
   139c8:	moveq	r4, r6
   139cc:	mov	r3, #0
   139d0:	strb	r3, [r5, r4]
   139d4:	mov	r0, r5
   139d8:	pop	{r4, r5, r6, r7, r8, pc}
   139dc:	push	{r1, r2, r3}
   139e0:	push	{r4, r5, r6, lr}
   139e4:	sub	sp, sp, #12
   139e8:	mov	r5, r0
   139ec:	ldr	r1, [sp, #28]
   139f0:	add	r3, sp, #32
   139f4:	str	r3, [sp, #4]
   139f8:	cmp	r1, #0
   139fc:	beq	13a44 <__assert_fail@plt+0x258c>
   13a00:	ldr	r3, [pc, #540]	; 13c24 <__assert_fail@plt+0x276c>
   13a04:	cmp	r1, r3
   13a08:	beq	13a74 <__assert_fail@plt+0x25bc>
   13a0c:	cmp	r1, #11
   13a10:	beq	13c14 <__assert_fail@plt+0x275c>
   13a14:	bgt	13ba0 <__assert_fail@plt+0x26e8>
   13a18:	cmp	r1, #3
   13a1c:	beq	13c14 <__assert_fail@plt+0x275c>
   13a20:	ble	13b60 <__assert_fail@plt+0x26a8>
   13a24:	cmp	r1, #8
   13a28:	beq	13b80 <__assert_fail@plt+0x26c8>
   13a2c:	ble	13b78 <__assert_fail@plt+0x26c0>
   13a30:	cmp	r1, #9
   13a34:	beq	13c14 <__assert_fail@plt+0x275c>
   13a38:	cmp	r1, #10
   13a3c:	bne	13bd8 <__assert_fail@plt+0x2720>
   13a40:	b	13b80 <__assert_fail@plt+0x26c8>
   13a44:	ldr	r3, [sp, #4]
   13a48:	add	r2, r3, #4
   13a4c:	str	r2, [sp, #4]
   13a50:	ldr	r2, [r3]
   13a54:	mov	r1, #0
   13a58:	bl	113c8 <fcntl64@plt>
   13a5c:	mov	r4, r0
   13a60:	mov	r0, r4
   13a64:	add	sp, sp, #12
   13a68:	pop	{r4, r5, r6, lr}
   13a6c:	add	sp, sp, #12
   13a70:	bx	lr
   13a74:	ldr	r3, [sp, #4]
   13a78:	add	r2, r3, #4
   13a7c:	str	r2, [sp, #4]
   13a80:	ldr	r6, [r3]
   13a84:	ldr	r3, [pc, #412]	; 13c28 <__assert_fail@plt+0x2770>
   13a88:	ldr	r3, [r3]
   13a8c:	cmp	r3, #0
   13a90:	blt	13af0 <__assert_fail@plt+0x2638>
   13a94:	mov	r2, r6
   13a98:	ldr	r1, [pc, #388]	; 13c24 <__assert_fail@plt+0x276c>
   13a9c:	bl	113c8 <fcntl64@plt>
   13aa0:	subs	r4, r0, #0
   13aa4:	blt	13ab8 <__assert_fail@plt+0x2600>
   13aa8:	mov	r2, #1
   13aac:	ldr	r3, [pc, #372]	; 13c28 <__assert_fail@plt+0x2770>
   13ab0:	str	r2, [r3]
   13ab4:	b	13a60 <__assert_fail@plt+0x25a8>
   13ab8:	bl	11338 <__errno_location@plt>
   13abc:	ldr	r3, [r0]
   13ac0:	cmp	r3, #22
   13ac4:	bne	13aa8 <__assert_fail@plt+0x25f0>
   13ac8:	mov	r2, r6
   13acc:	mov	r1, #0
   13ad0:	mov	r0, r5
   13ad4:	bl	113c8 <fcntl64@plt>
   13ad8:	subs	r4, r0, #0
   13adc:	blt	13a60 <__assert_fail@plt+0x25a8>
   13ae0:	mvn	r2, #0
   13ae4:	ldr	r3, [pc, #316]	; 13c28 <__assert_fail@plt+0x2770>
   13ae8:	str	r2, [r3]
   13aec:	b	13b14 <__assert_fail@plt+0x265c>
   13af0:	mov	r2, r6
   13af4:	mov	r1, #0
   13af8:	bl	113c8 <fcntl64@plt>
   13afc:	subs	r4, r0, #0
   13b00:	blt	13a60 <__assert_fail@plt+0x25a8>
   13b04:	ldr	r3, [pc, #284]	; 13c28 <__assert_fail@plt+0x2770>
   13b08:	ldr	r3, [r3]
   13b0c:	cmn	r3, #1
   13b10:	bne	13a60 <__assert_fail@plt+0x25a8>
   13b14:	mov	r1, #1
   13b18:	mov	r0, r4
   13b1c:	bl	113c8 <fcntl64@plt>
   13b20:	subs	r2, r0, #0
   13b24:	blt	13b40 <__assert_fail@plt+0x2688>
   13b28:	orr	r2, r2, #1
   13b2c:	mov	r1, #2
   13b30:	mov	r0, r4
   13b34:	bl	113c8 <fcntl64@plt>
   13b38:	cmn	r0, #1
   13b3c:	bne	13a60 <__assert_fail@plt+0x25a8>
   13b40:	bl	11338 <__errno_location@plt>
   13b44:	mov	r5, r0
   13b48:	ldr	r6, [r0]
   13b4c:	mov	r0, r4
   13b50:	bl	114ac <close@plt>
   13b54:	str	r6, [r5]
   13b58:	mvn	r4, #0
   13b5c:	b	13a60 <__assert_fail@plt+0x25a8>
   13b60:	cmp	r1, #1
   13b64:	beq	13c14 <__assert_fail@plt+0x275c>
   13b68:	bgt	13b80 <__assert_fail@plt+0x26c8>
   13b6c:	cmp	r1, #0
   13b70:	bne	13bd8 <__assert_fail@plt+0x2720>
   13b74:	b	13b80 <__assert_fail@plt+0x26c8>
   13b78:	cmp	r1, #4
   13b7c:	bne	13bd8 <__assert_fail@plt+0x2720>
   13b80:	ldr	r3, [sp, #4]
   13b84:	add	r2, r3, #4
   13b88:	str	r2, [sp, #4]
   13b8c:	ldr	r2, [r3]
   13b90:	mov	r0, r5
   13b94:	bl	113c8 <fcntl64@plt>
   13b98:	mov	r4, r0
   13b9c:	b	13a60 <__assert_fail@plt+0x25a8>
   13ba0:	ldr	r3, [pc, #132]	; 13c2c <__assert_fail@plt+0x2774>
   13ba4:	cmp	r1, r3
   13ba8:	bgt	13bf8 <__assert_fail@plt+0x2740>
   13bac:	sub	r3, r3, #1
   13bb0:	cmp	r1, r3
   13bb4:	bge	13b80 <__assert_fail@plt+0x26c8>
   13bb8:	sub	r3, r3, #5
   13bbc:	cmp	r1, r3
   13bc0:	beq	13c14 <__assert_fail@plt+0x275c>
   13bc4:	add	r3, r3, #1
   13bc8:	cmp	r1, r3
   13bcc:	beq	13b80 <__assert_fail@plt+0x26c8>
   13bd0:	cmp	r1, #1024	; 0x400
   13bd4:	beq	13b80 <__assert_fail@plt+0x26c8>
   13bd8:	ldr	r3, [sp, #4]
   13bdc:	add	r2, r3, #4
   13be0:	str	r2, [sp, #4]
   13be4:	ldr	r2, [r3]
   13be8:	mov	r0, r5
   13bec:	bl	113c8 <fcntl64@plt>
   13bf0:	mov	r4, r0
   13bf4:	b	13a60 <__assert_fail@plt+0x25a8>
   13bf8:	ldr	r3, [pc, #48]	; 13c30 <__assert_fail@plt+0x2778>
   13bfc:	cmp	r1, r3
   13c00:	beq	13b80 <__assert_fail@plt+0x26c8>
   13c04:	blt	13c14 <__assert_fail@plt+0x275c>
   13c08:	add	r3, r3, #1
   13c0c:	cmp	r1, r3
   13c10:	bne	13bd8 <__assert_fail@plt+0x2720>
   13c14:	mov	r0, r5
   13c18:	bl	113c8 <fcntl64@plt>
   13c1c:	mov	r4, r0
   13c20:	b	13a60 <__assert_fail@plt+0x25a8>
   13c24:	andeq	r0, r0, r6, lsl #8
   13c28:	andeq	fp, r2, ip, asr #3
   13c2c:	andeq	r0, r0, r7, lsl #8
   13c30:	andeq	r0, r0, r9, lsl #8
   13c34:	push	{r1, r2, r3}
   13c38:	push	{lr}		; (str lr, [sp, #-4]!)
   13c3c:	sub	sp, sp, #8
   13c40:	ldr	r1, [sp, #12]
   13c44:	tst	r1, #64	; 0x40
   13c48:	addne	r3, sp, #20
   13c4c:	strne	r3, [sp, #4]
   13c50:	ldrne	r2, [sp, #16]
   13c54:	moveq	r2, #0
   13c58:	bl	112a8 <open64@plt>
   13c5c:	bl	16f3c <__assert_fail@plt+0x5a84>
   13c60:	add	sp, sp, #8
   13c64:	pop	{lr}		; (ldr lr, [sp], #4)
   13c68:	add	sp, sp, #12
   13c6c:	bx	lr
   13c70:	push	{r4, r5, lr}
   13c74:	sub	sp, sp, #12
   13c78:	mov	r5, r0
   13c7c:	bl	11338 <__errno_location@plt>
   13c80:	mov	r4, r0
   13c84:	ldr	r3, [r0]
   13c88:	str	r3, [sp]
   13c8c:	str	r3, [sp, #4]
   13c90:	mov	r3, #0
   13c94:	str	r3, [r0]
   13c98:	mov	r0, r5
   13c9c:	bl	1117c <free@plt>
   13ca0:	ldr	r3, [r4]
   13ca4:	cmp	r3, #0
   13ca8:	moveq	r3, #4
   13cac:	movne	r3, #0
   13cb0:	add	r2, sp, #8
   13cb4:	add	r3, r2, r3
   13cb8:	ldr	r3, [r3, #-8]
   13cbc:	str	r3, [r4]
   13cc0:	add	sp, sp, #12
   13cc4:	pop	{r4, r5, pc}
   13cc8:	push	{r4, r6, r7, lr}
   13ccc:	vpush	{d8}
   13cd0:	vmov.f64	d8, d0
   13cd4:	cmp	r0, #1
   13cd8:	beq	13d40 <__assert_fail@plt+0x2888>
   13cdc:	mov	r4, r0
   13ce0:	vldr	d7, [pc, #104]	; 13d50 <__assert_fail@plt+0x2898>
   13ce4:	vcmpe.f64	d0, d7
   13ce8:	vmrs	APSR_nzcv, fpscr
   13cec:	bpl	13d40 <__assert_fail@plt+0x2888>
   13cf0:	vmov	r0, r1, d0
   13cf4:	bl	19080 <__assert_fail@plt+0x7bc8>
   13cf8:	mov	r6, r0
   13cfc:	mov	r7, r1
   13d00:	cmp	r4, #0
   13d04:	movne	r0, #0
   13d08:	bne	13d28 <__assert_fail@plt+0x2870>
   13d0c:	mov	r0, r6
   13d10:	bl	18eec <__assert_fail@plt+0x7a34>
   13d14:	vmov	d7, r0, r1
   13d18:	vcmp.f64	d7, d8
   13d1c:	vmrs	APSR_nzcv, fpscr
   13d20:	movne	r0, #1
   13d24:	moveq	r0, #0
   13d28:	adds	r2, r6, r0
   13d2c:	adc	r3, r7, r0, asr #31
   13d30:	mov	r0, r2
   13d34:	mov	r1, r3
   13d38:	bl	18eec <__assert_fail@plt+0x7a34>
   13d3c:	vmov	d8, r0, r1
   13d40:	vmov.f64	d0, d8
   13d44:	vpop	{d8}
   13d48:	pop	{r4, r6, r7, pc}
   13d4c:	nop			; (mov r0, r0)
   13d50:	andeq	r0, r0, r0
   13d54:	mvnsmi	r0, #0
   13d58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d5c:	vpush	{d8-d9}
   13d60:	sub	sp, sp, #124	; 0x7c
   13d64:	strd	r0, [sp, #32]
   13d68:	mov	r7, r2
   13d6c:	str	r2, [sp, #24]
   13d70:	mov	r8, r3
   13d74:	and	r3, r3, #3
   13d78:	str	r3, [sp, #28]
   13d7c:	and	r3, r8, #32
   13d80:	str	r3, [sp, #40]	; 0x28
   13d84:	cmp	r3, #0
   13d88:	movne	r3, #1024	; 0x400
   13d8c:	moveq	r3, #1000	; 0x3e8
   13d90:	str	r3, [sp, #44]	; 0x2c
   13d94:	bl	11410 <localeconv@plt>
   13d98:	mov	r5, r0
   13d9c:	ldr	r6, [r0]
   13da0:	mov	r0, r6
   13da4:	bl	11314 <strlen@plt>
   13da8:	mov	r4, r0
   13dac:	sub	r3, r0, #1
   13db0:	ldr	r2, [pc, #1112]	; 14210 <__assert_fail@plt+0x2d58>
   13db4:	cmp	r3, #15
   13db8:	movhi	r6, r2
   13dbc:	str	r6, [sp, #64]	; 0x40
   13dc0:	cmp	r3, #15
   13dc4:	movhi	r4, #1
   13dc8:	ldr	r9, [r5, #8]
   13dcc:	ldr	r5, [r5, #4]
   13dd0:	mov	r0, r5
   13dd4:	bl	11314 <strlen@plt>
   13dd8:	ldr	r3, [pc, #1076]	; 14214 <__assert_fail@plt+0x2d5c>
   13ddc:	cmp	r0, #16
   13de0:	movhi	r5, r3
   13de4:	str	r5, [sp, #12]
   13de8:	add	sl, r7, #644	; 0x284
   13dec:	add	sl, sl, #3
   13df0:	ldrd	r2, [sp, #184]	; 0xb8
   13df4:	ldrd	r6, [sp, #176]	; 0xb0
   13df8:	cmp	r3, r7
   13dfc:	cmpeq	r2, r6
   13e00:	bhi	13f84 <__assert_fail@plt+0x2acc>
   13e04:	mov	r0, r6
   13e08:	mov	r1, r7
   13e0c:	bl	19034 <__assert_fail@plt+0x7b7c>
   13e10:	orrs	r3, r2, r3
   13e14:	bne	13e5c <__assert_fail@plt+0x29a4>
   13e18:	ldrd	r2, [sp, #184]	; 0xb8
   13e1c:	ldrd	r0, [sp, #176]	; 0xb0
   13e20:	bl	19034 <__assert_fail@plt+0x7b7c>
   13e24:	mov	r2, r0
   13e28:	mov	r3, r1
   13e2c:	ldrd	r6, [sp, #32]
   13e30:	mul	r0, r2, r7
   13e34:	mla	ip, r6, r3, r0
   13e38:	umull	r0, r1, r2, r6
   13e3c:	strd	r0, [sp, #16]
   13e40:	add	r1, ip, r1
   13e44:	str	r1, [sp, #20]
   13e48:	ldrd	r0, [sp, #16]
   13e4c:	bl	19034 <__assert_fail@plt+0x7b7c>
   13e50:	cmp	r7, r1
   13e54:	cmpeq	r6, r0
   13e58:	beq	140fc <__assert_fail@plt+0x2c44>
   13e5c:	ldrd	r0, [sp, #176]	; 0xb0
   13e60:	bl	18eec <__assert_fail@plt+0x7a34>
   13e64:	vmov	d9, r0, r1
   13e68:	ldrd	r0, [sp, #184]	; 0xb8
   13e6c:	bl	18eec <__assert_fail@plt+0x7a34>
   13e70:	vmov	d7, r0, r1
   13e74:	vdiv.f64	d8, d9, d7
   13e78:	ldrd	r0, [sp, #32]
   13e7c:	bl	18eec <__assert_fail@plt+0x7a34>
   13e80:	vmov	d7, r0, r1
   13e84:	vmul.f64	d0, d8, d7
   13e88:	tst	r8, #16
   13e8c:	beq	14054 <__assert_fail@plt+0x2b9c>
   13e90:	vldr	d7, [pc, #872]	; 14200 <__assert_fail@plt+0x2d48>
   13e94:	mov	r7, #0
   13e98:	vldr	s13, [sp, #44]	; 0x2c
   13e9c:	vcvt.f64.u32	d6, s13
   13ea0:	vmul.f64	d7, d7, d6
   13ea4:	add	r7, r7, #1
   13ea8:	vmul.f64	d5, d6, d7
   13eac:	vcmpe.f64	d0, d5
   13eb0:	vmrs	APSR_nzcv, fpscr
   13eb4:	movge	r3, #1
   13eb8:	movlt	r3, #0
   13ebc:	cmp	r7, #7
   13ec0:	movgt	r3, #0
   13ec4:	andle	r3, r3, #1
   13ec8:	cmp	r3, #0
   13ecc:	bne	13ea0 <__assert_fail@plt+0x29e8>
   13ed0:	vdiv.f64	d8, d0, d7
   13ed4:	vmov.f64	d0, d8
   13ed8:	ldr	r0, [sp, #28]
   13edc:	bl	13cc8 <__assert_fail@plt+0x2810>
   13ee0:	vstr	d0, [sp]
   13ee4:	ldr	r3, [pc, #812]	; 14218 <__assert_fail@plt+0x2d60>
   13ee8:	mvn	r2, #0
   13eec:	mov	r1, #1
   13ef0:	ldr	r6, [sp, #24]
   13ef4:	mov	r0, r6
   13ef8:	bl	11344 <__sprintf_chk@plt>
   13efc:	mov	r0, r6
   13f00:	bl	11314 <strlen@plt>
   13f04:	mov	r5, r0
   13f08:	add	r4, r4, #1
   13f0c:	ldr	r3, [sp, #40]	; 0x28
   13f10:	cmp	r3, #0
   13f14:	movne	r3, #1
   13f18:	moveq	r3, #2
   13f1c:	add	r3, r3, r4
   13f20:	cmp	r0, r3
   13f24:	bhi	13f40 <__assert_fail@plt+0x2a88>
   13f28:	tst	r8, #8
   13f2c:	beq	1408c <__assert_fail@plt+0x2bd4>
   13f30:	add	r3, r6, r0
   13f34:	ldrb	r3, [r3, #-1]
   13f38:	cmp	r3, #48	; 0x30
   13f3c:	bne	1408c <__assert_fail@plt+0x2bd4>
   13f40:	vldr	d9, [pc, #704]	; 14208 <__assert_fail@plt+0x2d50>
   13f44:	vmul.f64	d0, d8, d9
   13f48:	ldr	r0, [sp, #28]
   13f4c:	bl	13cc8 <__assert_fail@plt+0x2810>
   13f50:	vdiv.f64	d0, d0, d9
   13f54:	vstr	d0, [sp]
   13f58:	ldr	r3, [pc, #700]	; 1421c <__assert_fail@plt+0x2d64>
   13f5c:	mvn	r2, #0
   13f60:	mov	r1, #1
   13f64:	ldr	r4, [sp, #24]
   13f68:	mov	r0, r4
   13f6c:	bl	11344 <__sprintf_chk@plt>
   13f70:	mov	r0, r4
   13f74:	bl	11314 <strlen@plt>
   13f78:	mov	r5, r0
   13f7c:	mov	r4, #0
   13f80:	b	1408c <__assert_fail@plt+0x2bd4>
   13f84:	ldrd	r2, [sp, #176]	; 0xb0
   13f88:	orrs	r3, r2, r3
   13f8c:	beq	13e5c <__assert_fail@plt+0x29a4>
   13f90:	ldrd	r2, [sp, #176]	; 0xb0
   13f94:	ldrd	r0, [sp, #184]	; 0xb8
   13f98:	bl	19034 <__assert_fail@plt+0x7b7c>
   13f9c:	orrs	r3, r2, r3
   13fa0:	bne	13e5c <__assert_fail@plt+0x29a4>
   13fa4:	ldrd	r2, [sp, #176]	; 0xb0
   13fa8:	ldrd	r0, [sp, #184]	; 0xb8
   13fac:	bl	19034 <__assert_fail@plt+0x7b7c>
   13fb0:	strd	r0, [sp, #48]	; 0x30
   13fb4:	mov	r2, r0
   13fb8:	mov	r3, r1
   13fbc:	ldrd	r0, [sp, #32]
   13fc0:	bl	19034 <__assert_fail@plt+0x7b7c>
   13fc4:	mov	r1, #10
   13fc8:	umull	r6, r7, r2, r1
   13fcc:	mla	r7, r1, r3, r7
   13fd0:	ldrd	r2, [sp, #48]	; 0x30
   13fd4:	mov	r0, r6
   13fd8:	mov	r1, r7
   13fdc:	bl	19034 <__assert_fail@plt+0x7b7c>
   13fe0:	lsls	r0, r2, #1
   13fe4:	adc	r1, r3, r3
   13fe8:	strd	r0, [sp, #56]	; 0x38
   13fec:	ldrd	r2, [sp, #48]	; 0x30
   13ff0:	ldrd	r0, [sp, #32]
   13ff4:	bl	19034 <__assert_fail@plt+0x7b7c>
   13ff8:	strd	r0, [sp, #16]
   13ffc:	ldrd	r2, [sp, #48]	; 0x30
   14000:	mov	r0, r6
   14004:	mov	r1, r7
   14008:	bl	19034 <__assert_fail@plt+0x7b7c>
   1400c:	mov	r6, r0
   14010:	ldrd	r2, [sp, #48]	; 0x30
   14014:	ldrd	r0, [sp, #56]	; 0x38
   14018:	cmp	r3, r1
   1401c:	cmpeq	r2, r0
   14020:	bls	14038 <__assert_fail@plt+0x2b80>
   14024:	mov	r3, r0
   14028:	orrs	r3, r3, r1
   1402c:	movne	fp, #1
   14030:	moveq	fp, #0
   14034:	b	14104 <__assert_fail@plt+0x2c4c>
   14038:	ldrd	r2, [sp, #48]	; 0x30
   1403c:	ldrd	r0, [sp, #56]	; 0x38
   14040:	cmp	r3, r1
   14044:	cmpeq	r2, r0
   14048:	movcc	fp, #3
   1404c:	movcs	fp, #2
   14050:	b	14104 <__assert_fail@plt+0x2c4c>
   14054:	ldr	r0, [sp, #28]
   14058:	bl	13cc8 <__assert_fail@plt+0x2810>
   1405c:	vstr	d0, [sp]
   14060:	ldr	r3, [pc, #436]	; 1421c <__assert_fail@plt+0x2d64>
   14064:	mvn	r2, #0
   14068:	mov	r1, #1
   1406c:	ldr	r4, [sp, #24]
   14070:	mov	r0, r4
   14074:	bl	11344 <__sprintf_chk@plt>
   14078:	mov	r0, r4
   1407c:	bl	11314 <strlen@plt>
   14080:	mov	r5, r0
   14084:	mov	r4, #0
   14088:	mvn	r7, #0
   1408c:	sub	r6, sl, r5
   14090:	mov	r2, r5
   14094:	ldr	r1, [sp, #24]
   14098:	mov	r0, r6
   1409c:	bl	11170 <memmove@plt>
   140a0:	sub	r5, r5, r4
   140a4:	add	r5, r6, r5
   140a8:	tst	r8, #4
   140ac:	bne	14484 <__assert_fail@plt+0x2fcc>
   140b0:	tst	r8, #128	; 0x80
   140b4:	beq	145b0 <__assert_fail@plt+0x30f8>
   140b8:	cmp	r7, #0
   140bc:	blt	14514 <__assert_fail@plt+0x305c>
   140c0:	and	r3, r8, #256	; 0x100
   140c4:	orrs	r2, r7, r3
   140c8:	beq	140e4 <__assert_fail@plt+0x2c2c>
   140cc:	tst	r8, #64	; 0x40
   140d0:	beq	140e4 <__assert_fail@plt+0x2c2c>
   140d4:	ldr	r1, [sp, #24]
   140d8:	add	sl, r1, #648	; 0x288
   140dc:	mov	r2, #32
   140e0:	strb	r2, [r1, #647]	; 0x287
   140e4:	cmp	r7, #0
   140e8:	bne	14568 <__assert_fail@plt+0x30b0>
   140ec:	cmp	r3, #0
   140f0:	beq	145b0 <__assert_fail@plt+0x30f8>
   140f4:	mov	r2, sl
   140f8:	b	145a4 <__assert_fail@plt+0x30ec>
   140fc:	mov	fp, #0
   14100:	mov	r6, fp
   14104:	ands	r3, r8, #16
   14108:	str	r3, [sp, #48]	; 0x30
   1410c:	streq	sl, [sp, #32]
   14110:	mvneq	r7, #0
   14114:	beq	142c8 <__assert_fail@plt+0x2e10>
   14118:	ldr	ip, [sp, #44]	; 0x2c
   1411c:	mov	r3, #0
   14120:	ldrd	r0, [sp, #16]
   14124:	cmp	r1, r3
   14128:	cmpeq	r0, ip
   1412c:	strcc	sl, [sp, #32]
   14130:	movcc	r7, #0
   14134:	bcc	142c8 <__assert_fail@plt+0x2e10>
   14138:	mov	r7, #0
   1413c:	str	sl, [sp, #32]
   14140:	mov	sl, ip
   14144:	str	r9, [sp, #56]	; 0x38
   14148:	str	r8, [sp, #68]	; 0x44
   1414c:	mov	r8, ip
   14150:	mov	r9, r3
   14154:	b	14194 <__assert_fail@plt+0x2cdc>
   14158:	add	fp, fp, r5
   1415c:	cmp	sl, fp
   14160:	movcc	fp, #3
   14164:	movcs	fp, #2
   14168:	add	r7, r7, #1
   1416c:	ldrd	r2, [sp, #16]
   14170:	cmp	r9, r3
   14174:	cmpeq	r8, r2
   14178:	movls	r3, #1
   1417c:	movhi	r3, #0
   14180:	cmp	r7, #7
   14184:	movgt	r3, #0
   14188:	andle	r3, r3, #1
   1418c:	cmp	r3, #0
   14190:	beq	14224 <__assert_fail@plt+0x2d6c>
   14194:	mov	r2, r8
   14198:	mov	r3, r9
   1419c:	ldrd	r0, [sp, #16]
   141a0:	bl	19034 <__assert_fail@plt+0x7b7c>
   141a4:	add	r2, r2, r2, lsl #2
   141a8:	add	r6, r6, r2, lsl #1
   141ac:	mov	r1, sl
   141b0:	mov	r0, r6
   141b4:	bl	18948 <__assert_fail@plt+0x7490>
   141b8:	asr	r5, fp, #1
   141bc:	add	r5, r5, r1, lsl #1
   141c0:	mov	r2, r8
   141c4:	mov	r3, r9
   141c8:	ldrd	r0, [sp, #16]
   141cc:	bl	19034 <__assert_fail@plt+0x7b7c>
   141d0:	strd	r0, [sp, #16]
   141d4:	mov	r1, sl
   141d8:	mov	r0, r6
   141dc:	bl	1875c <__assert_fail@plt+0x72a4>
   141e0:	mov	r6, r0
   141e4:	cmp	sl, r5
   141e8:	bls	14158 <__assert_fail@plt+0x2ca0>
   141ec:	cmn	fp, r5
   141f0:	movne	fp, #1
   141f4:	moveq	fp, #0
   141f8:	b	14168 <__assert_fail@plt+0x2cb0>
   141fc:	nop			; (mov r0, r0)
   14200:	andeq	r0, r0, r0
   14204:	svccc	0x00f00000	; IMB
   14208:	andeq	r0, r0, r0
   1420c:	eormi	r0, r4, r0
   14210:	andeq	sl, r1, r0, asr #2
   14214:	andeq	r9, r1, ip, lsl #24
   14218:	andeq	sl, r1, ip, asr #2
   1421c:	andeq	sl, r1, r4, asr #2
   14220:	andeq	sl, r1, r0, lsr #2
   14224:	ldr	sl, [sp, #32]
   14228:	ldr	r9, [sp, #56]	; 0x38
   1422c:	ldr	r8, [sp, #68]	; 0x44
   14230:	ldrd	r2, [sp, #16]
   14234:	cmp	r3, #0
   14238:	cmpeq	r2, #9
   1423c:	strhi	sl, [sp, #32]
   14240:	bhi	142c8 <__assert_fail@plt+0x2e10>
   14244:	ldr	r3, [sp, #28]
   14248:	cmp	r3, #1
   1424c:	beq	14370 <__assert_fail@plt+0x2eb8>
   14250:	ldr	r3, [sp, #28]
   14254:	clz	r3, r3
   14258:	lsr	r3, r3, #5
   1425c:	cmp	fp, #0
   14260:	moveq	r3, #0
   14264:	cmp	r3, #0
   14268:	beq	1427c <__assert_fail@plt+0x2dc4>
   1426c:	add	r6, r6, #1
   14270:	cmp	r6, #10
   14274:	movne	fp, #0
   14278:	beq	14388 <__assert_fail@plt+0x2ed0>
   1427c:	cmp	r6, #0
   14280:	bne	14294 <__assert_fail@plt+0x2ddc>
   14284:	ands	r6, r8, #8
   14288:	strne	sl, [sp, #32]
   1428c:	movne	r6, #0
   14290:	bne	142c8 <__assert_fail@plt+0x2e10>
   14294:	ldr	r3, [sp, #24]
   14298:	add	r5, r3, #644	; 0x284
   1429c:	add	r5, r5, #2
   142a0:	add	r6, r6, #48	; 0x30
   142a4:	strb	r6, [r3, #646]	; 0x286
   142a8:	sub	r3, r5, r4
   142ac:	str	r3, [sp, #32]
   142b0:	mov	r2, r4
   142b4:	ldr	r1, [sp, #64]	; 0x40
   142b8:	mov	r0, r3
   142bc:	bl	11194 <memcpy@plt>
   142c0:	mov	r6, #0
   142c4:	mov	fp, r6
   142c8:	ldr	r3, [sp, #28]
   142cc:	cmp	r3, #1
   142d0:	beq	143b8 <__assert_fail@plt+0x2f00>
   142d4:	ldr	r3, [sp, #28]
   142d8:	cmp	r3, #0
   142dc:	movne	fp, #0
   142e0:	bne	142f4 <__assert_fail@plt+0x2e3c>
   142e4:	add	fp, r6, fp
   142e8:	cmp	fp, #0
   142ec:	movle	fp, #0
   142f0:	movgt	fp, #1
   142f4:	cmp	fp, #0
   142f8:	beq	14414 <__assert_fail@plt+0x2f5c>
   142fc:	ldrd	r2, [sp, #16]
   14300:	adds	r2, r2, #1
   14304:	adc	r3, r3, #0
   14308:	mov	r0, r2
   1430c:	mov	r1, r3
   14310:	strd	r0, [sp, #16]
   14314:	ldr	r3, [sp, #48]	; 0x30
   14318:	cmp	r3, #0
   1431c:	beq	14414 <__assert_fail@plt+0x2f5c>
   14320:	ldr	r2, [sp, #44]	; 0x2c
   14324:	mov	r3, #0
   14328:	cmp	r3, r1
   1432c:	cmpeq	r2, r0
   14330:	moveq	r3, #1
   14334:	movne	r3, #0
   14338:	cmp	r7, #7
   1433c:	movgt	r3, #0
   14340:	andle	r3, r3, #1
   14344:	cmp	r3, #0
   14348:	beq	14414 <__assert_fail@plt+0x2f5c>
   1434c:	add	r7, r7, #1
   14350:	tst	r8, #8
   14354:	beq	143e8 <__assert_fail@plt+0x2f30>
   14358:	ldr	r2, [sp, #32]
   1435c:	sub	r6, r2, #1
   14360:	mov	r3, #49	; 0x31
   14364:	strb	r3, [r2, #-1]
   14368:	mov	r5, r2
   1436c:	b	140a8 <__assert_fail@plt+0x2bf0>
   14370:	and	r3, r6, #1
   14374:	add	r3, r3, fp
   14378:	cmp	r3, #2
   1437c:	movle	r3, #0
   14380:	movgt	r3, #1
   14384:	b	14264 <__assert_fail@plt+0x2dac>
   14388:	ldrd	r2, [sp, #16]
   1438c:	adds	r2, r2, #1
   14390:	adc	r3, r3, #0
   14394:	strd	r2, [sp, #16]
   14398:	cmp	r3, #0
   1439c:	cmpeq	r2, #9
   143a0:	strhi	sl, [sp, #32]
   143a4:	movhi	fp, #0
   143a8:	movhi	r6, fp
   143ac:	bhi	142c8 <__assert_fail@plt+0x2e10>
   143b0:	mov	fp, #0
   143b4:	b	14284 <__assert_fail@plt+0x2dcc>
   143b8:	ldrd	r2, [sp, #16]
   143bc:	and	r2, r2, #1
   143c0:	mov	r3, #0
   143c4:	adds	r2, r2, fp
   143c8:	adc	r3, r3, fp, asr #31
   143cc:	orr	r2, r2, r3
   143d0:	cmp	r2, #0
   143d4:	addne	r6, r6, #1
   143d8:	cmp	r6, #5
   143dc:	movle	fp, #0
   143e0:	movgt	fp, #1
   143e4:	b	142f4 <__assert_fail@plt+0x2e3c>
   143e8:	mov	r3, #48	; 0x30
   143ec:	ldr	r2, [sp, #32]
   143f0:	strb	r3, [r2, #-1]
   143f4:	mvn	r3, r4
   143f8:	add	r3, r2, r3
   143fc:	str	r3, [sp, #32]
   14400:	mov	r2, r4
   14404:	ldr	r1, [sp, #64]	; 0x40
   14408:	mov	r0, r3
   1440c:	bl	11194 <memcpy@plt>
   14410:	b	14358 <__assert_fail@plt+0x2ea0>
   14414:	ldr	r6, [sp, #32]
   14418:	mov	r4, #10
   1441c:	mov	r5, #0
   14420:	mov	fp, r6
   14424:	str	r8, [sp, #28]
   14428:	mov	r8, r7
   1442c:	ldrd	r6, [sp, #16]
   14430:	mov	r2, r4
   14434:	mov	r3, r5
   14438:	mov	r0, r6
   1443c:	mov	r1, r7
   14440:	bl	19034 <__assert_fail@plt+0x7b7c>
   14444:	add	r2, r2, #48	; 0x30
   14448:	strb	r2, [fp, #-1]!
   1444c:	mov	r2, r4
   14450:	mov	r3, r5
   14454:	mov	r0, r6
   14458:	mov	r1, r7
   1445c:	bl	19034 <__assert_fail@plt+0x7b7c>
   14460:	mov	r6, r0
   14464:	mov	r7, r1
   14468:	orrs	r3, r6, r7
   1446c:	bne	14430 <__assert_fail@plt+0x2f78>
   14470:	mov	r7, r8
   14474:	mov	r6, fp
   14478:	ldr	r8, [sp, #28]
   1447c:	ldr	r5, [sp, #32]
   14480:	b	140a8 <__assert_fail@plt+0x2bf0>
   14484:	sub	r4, r5, r6
   14488:	ldr	r0, [sp, #12]
   1448c:	bl	11314 <strlen@plt>
   14490:	mov	fp, r0
   14494:	mov	r3, #41	; 0x29
   14498:	mov	r2, r4
   1449c:	mov	r1, r6
   144a0:	add	r0, sp, #76	; 0x4c
   144a4:	bl	1123c <__memcpy_chk@plt>
   144a8:	mov	r6, r5
   144ac:	mvn	r5, #0
   144b0:	b	144f4 <__assert_fail@plt+0x303c>
   144b4:	cmp	r5, r4
   144b8:	movcs	r5, r4
   144bc:	sub	r6, r6, r5
   144c0:	sub	r4, r4, r5
   144c4:	mov	r2, r5
   144c8:	add	r3, sp, #76	; 0x4c
   144cc:	add	r1, r3, r4
   144d0:	mov	r0, r6
   144d4:	bl	11194 <memcpy@plt>
   144d8:	cmp	r4, #0
   144dc:	beq	140b0 <__assert_fail@plt+0x2bf8>
   144e0:	sub	r6, r6, fp
   144e4:	mov	r2, fp
   144e8:	ldr	r1, [sp, #12]
   144ec:	mov	r0, r6
   144f0:	bl	11194 <memcpy@plt>
   144f4:	ldrb	r3, [r9]
   144f8:	cmp	r3, #0
   144fc:	beq	144b4 <__assert_fail@plt+0x2ffc>
   14500:	cmp	r3, #255	; 0xff
   14504:	movne	r5, r3
   14508:	moveq	r5, r4
   1450c:	add	r9, r9, #1
   14510:	b	144b4 <__assert_fail@plt+0x2ffc>
   14514:	ldrd	r2, [sp, #184]	; 0xb8
   14518:	cmp	r3, #0
   1451c:	cmpeq	r2, #1
   14520:	bls	145d0 <__assert_fail@plt+0x3118>
   14524:	mov	r7, #1
   14528:	mov	r2, #1
   1452c:	mov	r3, #0
   14530:	ldr	r1, [sp, #44]	; 0x2c
   14534:	ldrd	r4, [sp, #184]	; 0xb8
   14538:	mul	r0, r1, r3
   1453c:	umull	r2, r3, r2, r1
   14540:	add	r3, r0, r3
   14544:	cmp	r5, r3
   14548:	cmpeq	r4, r2
   1454c:	bls	140c0 <__assert_fail@plt+0x2c08>
   14550:	add	r7, r7, #1
   14554:	cmp	r7, #8
   14558:	bne	14538 <__assert_fail@plt+0x3080>
   1455c:	and	r3, r8, #256	; 0x100
   14560:	tst	r8, #64	; 0x40
   14564:	bne	140d4 <__assert_fail@plt+0x2c1c>
   14568:	add	r2, sl, #1
   1456c:	ldr	r1, [sp, #40]	; 0x28
   14570:	cmp	r1, #0
   14574:	cmpeq	r7, #1
   14578:	ldrne	r1, [pc, #-864]	; 14220 <__assert_fail@plt+0x2d68>
   1457c:	ldrbne	r1, [r1, r7]
   14580:	moveq	r1, #107	; 0x6b
   14584:	strb	r1, [sl]
   14588:	cmp	r3, #0
   1458c:	beq	145c8 <__assert_fail@plt+0x3110>
   14590:	ldr	r3, [sp, #40]	; 0x28
   14594:	cmp	r3, #0
   14598:	addne	r2, sl, #2
   1459c:	movne	r3, #105	; 0x69
   145a0:	strbne	r3, [sl, #1]
   145a4:	add	sl, r2, #1
   145a8:	mov	r3, #66	; 0x42
   145ac:	strb	r3, [r2]
   145b0:	mov	r3, #0
   145b4:	strb	r3, [sl]
   145b8:	mov	r0, r6
   145bc:	add	sp, sp, #124	; 0x7c
   145c0:	vpop	{d8-d9}
   145c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145c8:	mov	sl, r2
   145cc:	b	145b0 <__assert_fail@plt+0x30f8>
   145d0:	ands	r3, r8, #256	; 0x100
   145d4:	movne	r7, #0
   145d8:	bne	140cc <__assert_fail@plt+0x2c14>
   145dc:	b	140ec <__assert_fail@plt+0x2c34>
   145e0:	push	{r4, r5, r6, r7, lr}
   145e4:	sub	sp, sp, #20
   145e8:	mov	r7, r1
   145ec:	mov	r6, r2
   145f0:	subs	r4, r0, #0
   145f4:	beq	14664 <__assert_fail@plt+0x31ac>
   145f8:	ldrb	r3, [r4]
   145fc:	cmp	r3, #39	; 0x27
   14600:	addeq	r4, r4, #1
   14604:	moveq	r5, #4
   14608:	movne	r5, #0
   1460c:	ldr	r1, [pc, #332]	; 14760 <__assert_fail@plt+0x32a8>
   14610:	mov	r3, #4
   14614:	add	r2, r1, #12
   14618:	add	r1, r1, #20
   1461c:	mov	r0, r4
   14620:	bl	133a0 <__assert_fail@plt+0x1ee8>
   14624:	cmp	r0, #0
   14628:	blt	146a8 <__assert_fail@plt+0x31f0>
   1462c:	ldr	r3, [pc, #300]	; 14760 <__assert_fail@plt+0x32a8>
   14630:	add	r0, r3, r0, lsl #2
   14634:	ldr	r3, [r0, #12]
   14638:	orr	r5, r5, r3
   1463c:	mov	r2, #1
   14640:	mov	r3, #0
   14644:	strd	r2, [r6]
   14648:	str	r5, [r7]
   1464c:	mov	r0, #0
   14650:	ldrd	r2, [r6]
   14654:	orrs	r3, r2, r3
   14658:	beq	1473c <__assert_fail@plt+0x3284>
   1465c:	add	sp, sp, #20
   14660:	pop	{r4, r5, r6, r7, pc}
   14664:	ldr	r0, [pc, #248]	; 14764 <__assert_fail@plt+0x32ac>
   14668:	bl	112b4 <getenv@plt>
   1466c:	subs	r4, r0, #0
   14670:	bne	145f8 <__assert_fail@plt+0x3140>
   14674:	ldr	r0, [pc, #236]	; 14768 <__assert_fail@plt+0x32b0>
   14678:	bl	112b4 <getenv@plt>
   1467c:	subs	r4, r0, #0
   14680:	bne	145f8 <__assert_fail@plt+0x3140>
   14684:	ldr	r0, [pc, #224]	; 1476c <__assert_fail@plt+0x32b4>
   14688:	bl	112b4 <getenv@plt>
   1468c:	cmp	r0, #0
   14690:	moveq	r2, #1024	; 0x400
   14694:	movne	r2, #512	; 0x200
   14698:	mov	r3, #0
   1469c:	strd	r2, [r6]
   146a0:	mov	r5, #0
   146a4:	b	14648 <__assert_fail@plt+0x3190>
   146a8:	ldr	r3, [pc, #192]	; 14770 <__assert_fail@plt+0x32b8>
   146ac:	str	r3, [sp]
   146b0:	mov	r3, r6
   146b4:	mov	r2, #0
   146b8:	add	r1, sp, #12
   146bc:	mov	r0, r4
   146c0:	bl	17d50 <__assert_fail@plt+0x6898>
   146c4:	cmp	r0, #0
   146c8:	movne	r3, #0
   146cc:	strne	r3, [r7]
   146d0:	bne	14650 <__assert_fail@plt+0x3198>
   146d4:	ldrb	r3, [r4]
   146d8:	sub	r3, r3, #48	; 0x30
   146dc:	uxtb	r3, r3
   146e0:	cmp	r3, #9
   146e4:	bls	14648 <__assert_fail@plt+0x3190>
   146e8:	ldr	r2, [sp, #12]
   146ec:	cmp	r4, r2
   146f0:	beq	14710 <__assert_fail@plt+0x3258>
   146f4:	ldrb	r3, [r4, #1]!
   146f8:	sub	r3, r3, #48	; 0x30
   146fc:	uxtb	r3, r3
   14700:	cmp	r3, #9
   14704:	bls	14648 <__assert_fail@plt+0x3190>
   14708:	cmp	r4, r2
   1470c:	bne	146f4 <__assert_fail@plt+0x323c>
   14710:	ldrb	r3, [r2, #-1]
   14714:	cmp	r3, #66	; 0x42
   14718:	orrne	r5, r5, #128	; 0x80
   1471c:	beq	14728 <__assert_fail@plt+0x3270>
   14720:	orr	r5, r5, #32
   14724:	b	14648 <__assert_fail@plt+0x3190>
   14728:	orr	r5, r5, #384	; 0x180
   1472c:	ldrb	r3, [r2, #-2]
   14730:	cmp	r3, #105	; 0x69
   14734:	bne	14648 <__assert_fail@plt+0x3190>
   14738:	b	14720 <__assert_fail@plt+0x3268>
   1473c:	ldr	r0, [pc, #40]	; 1476c <__assert_fail@plt+0x32b4>
   14740:	bl	112b4 <getenv@plt>
   14744:	cmp	r0, #0
   14748:	moveq	r2, #1024	; 0x400
   1474c:	movne	r2, #512	; 0x200
   14750:	mov	r3, #0
   14754:	strd	r2, [r6]
   14758:	mov	r0, #4
   1475c:	b	1465c <__assert_fail@plt+0x31a4>
   14760:	andeq	sl, r1, r0, lsr #2
   14764:	andeq	sl, r1, r4, asr r1
   14768:	andeq	sl, r1, r0, ror #2
   1476c:	andeq	sl, r1, ip, ror #2
   14770:	andeq	sl, r1, ip, ror r1
   14774:	push	{r4, r5, r6, r8, r9, lr}
   14778:	mov	r4, r0
   1477c:	mov	r5, r1
   14780:	add	r6, r2, #20
   14784:	mov	r3, #0
   14788:	strb	r3, [r2, #20]
   1478c:	mov	r8, #10
   14790:	mov	r9, #0
   14794:	mov	r2, r8
   14798:	mov	r3, r9
   1479c:	mov	r0, r4
   147a0:	mov	r1, r5
   147a4:	bl	19034 <__assert_fail@plt+0x7b7c>
   147a8:	add	r2, r2, #48	; 0x30
   147ac:	strb	r2, [r6, #-1]!
   147b0:	mov	r2, r8
   147b4:	mov	r3, r9
   147b8:	mov	r0, r4
   147bc:	mov	r1, r5
   147c0:	bl	19034 <__assert_fail@plt+0x7b7c>
   147c4:	mov	r4, r0
   147c8:	mov	r5, r1
   147cc:	orrs	r3, r4, r5
   147d0:	bne	14794 <__assert_fail@plt+0x32dc>
   147d4:	mov	r0, r6
   147d8:	pop	{r4, r5, r6, r8, r9, pc}
   147dc:	push	{r4, r5, r6, lr}
   147e0:	subs	r4, r0, #0
   147e4:	beq	1485c <__assert_fail@plt+0x33a4>
   147e8:	mov	r1, #47	; 0x2f
   147ec:	mov	r0, r4
   147f0:	bl	113f8 <strrchr@plt>
   147f4:	cmp	r0, #0
   147f8:	addne	r5, r0, #1
   147fc:	moveq	r5, r4
   14800:	sub	r3, r5, r4
   14804:	cmp	r3, #6
   14808:	ble	14848 <__assert_fail@plt+0x3390>
   1480c:	mov	r2, #7
   14810:	ldr	r1, [pc, #96]	; 14878 <__assert_fail@plt+0x33c0>
   14814:	sub	r0, r5, #7
   14818:	bl	11488 <strncmp@plt>
   1481c:	cmp	r0, #0
   14820:	bne	14848 <__assert_fail@plt+0x3390>
   14824:	mov	r2, #3
   14828:	ldr	r1, [pc, #76]	; 1487c <__assert_fail@plt+0x33c4>
   1482c:	mov	r0, r5
   14830:	bl	11488 <strncmp@plt>
   14834:	cmp	r0, #0
   14838:	addeq	r4, r5, #3
   1483c:	ldreq	r3, [pc, #60]	; 14880 <__assert_fail@plt+0x33c8>
   14840:	streq	r4, [r3]
   14844:	movne	r4, r5
   14848:	ldr	r3, [pc, #52]	; 14884 <__assert_fail@plt+0x33cc>
   1484c:	str	r4, [r3]
   14850:	ldr	r3, [pc, #48]	; 14888 <__assert_fail@plt+0x33d0>
   14854:	str	r4, [r3]
   14858:	pop	{r4, r5, r6, pc}
   1485c:	ldr	r3, [pc, #40]	; 1488c <__assert_fail@plt+0x33d4>
   14860:	ldr	r3, [r3]
   14864:	mov	r2, #55	; 0x37
   14868:	mov	r1, #1
   1486c:	ldr	r0, [pc, #28]	; 14890 <__assert_fail@plt+0x33d8>
   14870:	bl	11248 <fwrite@plt>
   14874:	bl	114a0 <abort@plt>
   14878:	ldrdeq	sl, [r1], -ip
   1487c:	andeq	sl, r1, r4, ror #3
   14880:	andeq	fp, r2, r0, lsr #3
   14884:	ldrdeq	fp, [r2], -r0
   14888:	andeq	fp, r2, r4, lsr #3
   1488c:			; <UNDEFINED> instruction: 0x0002b1b0
   14890:	andeq	sl, r1, r4, lsr #3
   14894:	push	{r4, r5, r6, lr}
   14898:	mov	r5, r0
   1489c:	mov	r4, r1
   148a0:	mov	r2, #48	; 0x30
   148a4:	mov	r1, #0
   148a8:	bl	11368 <memset@plt>
   148ac:	cmp	r4, #10
   148b0:	beq	148c0 <__assert_fail@plt+0x3408>
   148b4:	str	r4, [r5]
   148b8:	mov	r0, r5
   148bc:	pop	{r4, r5, r6, pc}
   148c0:	bl	114a0 <abort@plt>
   148c4:	push	{r4, r5, r6, lr}
   148c8:	mov	r4, r0
   148cc:	mov	r5, r1
   148d0:	mov	r2, #5
   148d4:	mov	r1, r0
   148d8:	mov	r0, #0
   148dc:	bl	111e8 <dcgettext@plt>
   148e0:	cmp	r4, r0
   148e4:	popne	{r4, r5, r6, pc}
   148e8:	bl	18568 <__assert_fail@plt+0x70b0>
   148ec:	ldrb	r3, [r0]
   148f0:	bic	r3, r3, #32
   148f4:	cmp	r3, #85	; 0x55
   148f8:	beq	14974 <__assert_fail@plt+0x34bc>
   148fc:	cmp	r3, #71	; 0x47
   14900:	bne	149d0 <__assert_fail@plt+0x3518>
   14904:	ldrb	r3, [r0, #1]
   14908:	bic	r3, r3, #32
   1490c:	cmp	r3, #66	; 0x42
   14910:	bne	149d0 <__assert_fail@plt+0x3518>
   14914:	ldrb	r3, [r0, #2]
   14918:	cmp	r3, #49	; 0x31
   1491c:	bne	149d0 <__assert_fail@plt+0x3518>
   14920:	ldrb	r3, [r0, #3]
   14924:	cmp	r3, #56	; 0x38
   14928:	bne	149d0 <__assert_fail@plt+0x3518>
   1492c:	ldrb	r3, [r0, #4]
   14930:	cmp	r3, #48	; 0x30
   14934:	bne	149d0 <__assert_fail@plt+0x3518>
   14938:	ldrb	r3, [r0, #5]
   1493c:	cmp	r3, #51	; 0x33
   14940:	bne	149d0 <__assert_fail@plt+0x3518>
   14944:	ldrb	r3, [r0, #6]
   14948:	cmp	r3, #48	; 0x30
   1494c:	bne	149d0 <__assert_fail@plt+0x3518>
   14950:	ldrb	r3, [r0, #7]
   14954:	cmp	r3, #0
   14958:	bne	149d0 <__assert_fail@plt+0x3518>
   1495c:	ldrb	r2, [r4]
   14960:	ldr	r3, [pc, #124]	; 149e4 <__assert_fail@plt+0x352c>
   14964:	ldr	r0, [pc, #124]	; 149e8 <__assert_fail@plt+0x3530>
   14968:	cmp	r2, #96	; 0x60
   1496c:	movne	r0, r3
   14970:	pop	{r4, r5, r6, pc}
   14974:	ldrb	r3, [r0, #1]
   14978:	bic	r3, r3, #32
   1497c:	cmp	r3, #84	; 0x54
   14980:	bne	149d0 <__assert_fail@plt+0x3518>
   14984:	ldrb	r3, [r0, #2]
   14988:	bic	r3, r3, #32
   1498c:	cmp	r3, #70	; 0x46
   14990:	bne	149d0 <__assert_fail@plt+0x3518>
   14994:	ldrb	r3, [r0, #3]
   14998:	cmp	r3, #45	; 0x2d
   1499c:	bne	149d0 <__assert_fail@plt+0x3518>
   149a0:	ldrb	r3, [r0, #4]
   149a4:	cmp	r3, #56	; 0x38
   149a8:	bne	149d0 <__assert_fail@plt+0x3518>
   149ac:	ldrb	r3, [r0, #5]
   149b0:	cmp	r3, #0
   149b4:	bne	149d0 <__assert_fail@plt+0x3518>
   149b8:	ldrb	r2, [r4]
   149bc:	ldr	r3, [pc, #40]	; 149ec <__assert_fail@plt+0x3534>
   149c0:	ldr	r0, [pc, #40]	; 149f0 <__assert_fail@plt+0x3538>
   149c4:	cmp	r2, #96	; 0x60
   149c8:	movne	r0, r3
   149cc:	pop	{r4, r5, r6, pc}
   149d0:	ldr	r3, [pc, #28]	; 149f4 <__assert_fail@plt+0x353c>
   149d4:	ldr	r0, [pc, #28]	; 149f8 <__assert_fail@plt+0x3540>
   149d8:	cmp	r5, #9
   149dc:	movne	r0, r3
   149e0:	pop	{r4, r5, r6, pc}
   149e4:	andeq	sl, r1, r0, asr #4
   149e8:	andeq	sl, r1, ip, asr #4
   149ec:	andeq	sl, r1, ip, lsr r2
   149f0:	andeq	sl, r1, r0, asr r2
   149f4:	andeq	sl, r1, r4, asr #4
   149f8:	andeq	sl, r1, r8, asr #4
   149fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a00:	sub	sp, sp, #116	; 0x74
   14a04:	str	r0, [sp, #36]	; 0x24
   14a08:	mov	sl, r1
   14a0c:	str	r2, [sp, #52]	; 0x34
   14a10:	str	r3, [sp, #28]
   14a14:	ldr	r8, [sp, #152]	; 0x98
   14a18:	bl	1126c <__ctype_get_mb_cur_max@plt>
   14a1c:	str	r0, [sp, #84]	; 0x54
   14a20:	ldr	r3, [sp, #156]	; 0x9c
   14a24:	lsr	r3, r3, #1
   14a28:	and	r3, r3, #1
   14a2c:	str	r3, [sp, #32]
   14a30:	mov	r3, #1
   14a34:	str	r3, [sp, #40]	; 0x28
   14a38:	mov	r3, #0
   14a3c:	str	r3, [sp, #80]	; 0x50
   14a40:	str	r3, [sp, #44]	; 0x2c
   14a44:	str	r3, [sp, #48]	; 0x30
   14a48:	str	r3, [sp, #60]	; 0x3c
   14a4c:	str	r3, [sp, #72]	; 0x48
   14a50:	str	r3, [sp, #76]	; 0x4c
   14a54:	mov	r7, sl
   14a58:	mov	sl, r8
   14a5c:	cmp	sl, #10
   14a60:	ldrls	pc, [pc, sl, lsl #2]
   14a64:	b	14c1c <__assert_fail@plt+0x3764>
   14a68:	andeq	r4, r1, ip, asr #21
   14a6c:	muleq	r1, ip, sl
   14a70:	strdeq	r4, [r1], -r8
   14a74:	muleq	r1, r4, sl
   14a78:	andeq	r4, r1, ip, lsr #23
   14a7c:	ldrdeq	r4, [r1], -ip
   14a80:	andeq	r5, r1, r8, asr #22
   14a84:	andeq	r4, r1, r0, lsr #24
   14a88:	andeq	r4, r1, r8, lsl fp
   14a8c:	andeq	r4, r1, r8, lsl fp
   14a90:	andeq	r4, r1, r8, lsl fp
   14a94:	mov	r3, #1
   14a98:	str	r3, [sp, #48]	; 0x30
   14a9c:	mov	r3, #1
   14aa0:	str	r3, [sp, #32]
   14aa4:	str	r3, [sp, #60]	; 0x3c
   14aa8:	ldr	r3, [pc, #4068]	; 15a94 <__assert_fail@plt+0x45dc>
   14aac:	str	r3, [sp, #72]	; 0x48
   14ab0:	mov	fp, #0
   14ab4:	mov	sl, #2
   14ab8:	mov	r6, #0
   14abc:	ldr	r3, [sp, #48]	; 0x30
   14ac0:	eor	r3, r3, #1
   14ac4:	str	r3, [sp, #68]	; 0x44
   14ac8:	b	153b0 <__assert_fail@plt+0x3ef8>
   14acc:	mov	r3, #0
   14ad0:	str	r3, [sp, #32]
   14ad4:	mov	fp, r3
   14ad8:	b	14ab8 <__assert_fail@plt+0x3600>
   14adc:	ldr	r3, [sp, #32]
   14ae0:	cmp	r3, #0
   14ae4:	bne	14c38 <__assert_fail@plt+0x3780>
   14ae8:	cmp	r7, #0
   14aec:	beq	14c58 <__assert_fail@plt+0x37a0>
   14af0:	ldr	r3, [sp, #36]	; 0x24
   14af4:	mov	r2, #34	; 0x22
   14af8:	strb	r2, [r3]
   14afc:	mov	r3, #1
   14b00:	str	r3, [sp, #48]	; 0x30
   14b04:	str	r3, [sp, #60]	; 0x3c
   14b08:	ldr	r3, [pc, #3980]	; 15a9c <__assert_fail@plt+0x45e4>
   14b0c:	str	r3, [sp, #72]	; 0x48
   14b10:	mov	fp, #1
   14b14:	b	14ab8 <__assert_fail@plt+0x3600>
   14b18:	cmp	sl, #10
   14b1c:	beq	14b40 <__assert_fail@plt+0x3688>
   14b20:	mov	r1, sl
   14b24:	ldr	r0, [pc, #3948]	; 15a98 <__assert_fail@plt+0x45e0>
   14b28:	bl	148c4 <__assert_fail@plt+0x340c>
   14b2c:	str	r0, [sp, #164]	; 0xa4
   14b30:	mov	r1, sl
   14b34:	ldr	r0, [pc, #3928]	; 15a94 <__assert_fail@plt+0x45dc>
   14b38:	bl	148c4 <__assert_fail@plt+0x340c>
   14b3c:	str	r0, [sp, #168]	; 0xa8
   14b40:	ldr	r3, [sp, #32]
   14b44:	cmp	r3, #0
   14b48:	movne	fp, #0
   14b4c:	bne	14b84 <__assert_fail@plt+0x36cc>
   14b50:	ldr	r3, [sp, #164]	; 0xa4
   14b54:	ldrb	r3, [r3]
   14b58:	cmp	r3, #0
   14b5c:	beq	14ba4 <__assert_fail@plt+0x36ec>
   14b60:	ldr	r2, [sp, #164]	; 0xa4
   14b64:	mov	fp, #0
   14b68:	ldr	r1, [sp, #36]	; 0x24
   14b6c:	cmp	r7, fp
   14b70:	strbhi	r3, [r1, fp]
   14b74:	add	fp, fp, #1
   14b78:	ldrb	r3, [r2, #1]!
   14b7c:	cmp	r3, #0
   14b80:	bne	14b6c <__assert_fail@plt+0x36b4>
   14b84:	ldr	r0, [sp, #168]	; 0xa8
   14b88:	bl	11314 <strlen@plt>
   14b8c:	str	r0, [sp, #60]	; 0x3c
   14b90:	ldr	r3, [sp, #168]	; 0xa8
   14b94:	str	r3, [sp, #72]	; 0x48
   14b98:	mov	r3, #1
   14b9c:	str	r3, [sp, #48]	; 0x30
   14ba0:	b	14ab8 <__assert_fail@plt+0x3600>
   14ba4:	mov	fp, #0
   14ba8:	b	14b84 <__assert_fail@plt+0x36cc>
   14bac:	ldr	r3, [sp, #32]
   14bb0:	cmp	r3, #0
   14bb4:	bne	14c74 <__assert_fail@plt+0x37bc>
   14bb8:	mov	r3, #1
   14bbc:	str	r3, [sp, #48]	; 0x30
   14bc0:	cmp	r7, #0
   14bc4:	beq	14c90 <__assert_fail@plt+0x37d8>
   14bc8:	ldr	r3, [sp, #36]	; 0x24
   14bcc:	mov	r2, #39	; 0x27
   14bd0:	strb	r2, [r3]
   14bd4:	mov	r3, #0
   14bd8:	str	r3, [sp, #32]
   14bdc:	mov	r3, #1
   14be0:	str	r3, [sp, #60]	; 0x3c
   14be4:	ldr	r3, [pc, #3752]	; 15a94 <__assert_fail@plt+0x45dc>
   14be8:	str	r3, [sp, #72]	; 0x48
   14bec:	mov	fp, #1
   14bf0:	mov	sl, #2
   14bf4:	b	14ab8 <__assert_fail@plt+0x3600>
   14bf8:	ldr	r3, [sp, #32]
   14bfc:	cmp	r3, #0
   14c00:	beq	14bc0 <__assert_fail@plt+0x3708>
   14c04:	mov	r3, #1
   14c08:	str	r3, [sp, #60]	; 0x3c
   14c0c:	ldr	r3, [pc, #3712]	; 15a94 <__assert_fail@plt+0x45dc>
   14c10:	str	r3, [sp, #72]	; 0x48
   14c14:	mov	fp, #0
   14c18:	b	14ab8 <__assert_fail@plt+0x3600>
   14c1c:	bl	114a0 <abort@plt>
   14c20:	mov	r3, #0
   14c24:	str	r3, [sp, #32]
   14c28:	mov	r3, #1
   14c2c:	str	r3, [sp, #48]	; 0x30
   14c30:	mov	fp, #0
   14c34:	b	14ab8 <__assert_fail@plt+0x3600>
   14c38:	ldr	r3, [sp, #32]
   14c3c:	str	r3, [sp, #48]	; 0x30
   14c40:	mov	r3, #1
   14c44:	str	r3, [sp, #60]	; 0x3c
   14c48:	ldr	r3, [pc, #3660]	; 15a9c <__assert_fail@plt+0x45e4>
   14c4c:	str	r3, [sp, #72]	; 0x48
   14c50:	mov	fp, #0
   14c54:	b	14ab8 <__assert_fail@plt+0x3600>
   14c58:	mov	r3, #1
   14c5c:	str	r3, [sp, #48]	; 0x30
   14c60:	str	r3, [sp, #60]	; 0x3c
   14c64:	ldr	r3, [pc, #3632]	; 15a9c <__assert_fail@plt+0x45e4>
   14c68:	str	r3, [sp, #72]	; 0x48
   14c6c:	mov	fp, #1
   14c70:	b	14ab8 <__assert_fail@plt+0x3600>
   14c74:	mov	r3, #1
   14c78:	str	r3, [sp, #60]	; 0x3c
   14c7c:	ldr	r3, [pc, #3600]	; 15a94 <__assert_fail@plt+0x45dc>
   14c80:	str	r3, [sp, #72]	; 0x48
   14c84:	mov	fp, #0
   14c88:	mov	sl, #2
   14c8c:	b	14ab8 <__assert_fail@plt+0x3600>
   14c90:	mov	r3, #0
   14c94:	str	r3, [sp, #32]
   14c98:	mov	r3, #1
   14c9c:	str	r3, [sp, #60]	; 0x3c
   14ca0:	ldr	r3, [pc, #3564]	; 15a94 <__assert_fail@plt+0x45dc>
   14ca4:	str	r3, [sp, #72]	; 0x48
   14ca8:	mov	fp, #1
   14cac:	mov	sl, #2
   14cb0:	b	14ab8 <__assert_fail@plt+0x3600>
   14cb4:	mov	r3, #0
   14cb8:	str	r3, [sp, #56]	; 0x38
   14cbc:	ldr	r3, [sp, #52]	; 0x34
   14cc0:	add	r2, r3, r6
   14cc4:	str	r2, [sp, #64]	; 0x40
   14cc8:	ldrb	r4, [r3, r6]
   14ccc:	cmp	r4, #126	; 0x7e
   14cd0:	ldrls	pc, [pc, r4, lsl #2]
   14cd4:	b	15510 <__assert_fail@plt+0x4058>
   14cd8:	strdeq	r4, [r1], -r0
   14cdc:	andeq	r5, r1, r0, lsl r5
   14ce0:	andeq	r5, r1, r0, lsl r5
   14ce4:	andeq	r5, r1, r0, lsl r5
   14ce8:	andeq	r5, r1, r0, lsl r5
   14cec:	andeq	r5, r1, r0, lsl r5
   14cf0:	andeq	r5, r1, r0, lsl r5
   14cf4:	andeq	r5, r1, ip, asr #4
   14cf8:	andeq	r4, r1, r8, ror #29
   14cfc:	andeq	r5, r1, r4, lsl #4
   14d00:	strdeq	r5, [r1], -ip
   14d04:	andeq	r5, r1, ip, ror #2
   14d08:	andeq	r5, r1, r4, ror #2
   14d0c:	andeq	r4, r1, r0, ror #29
   14d10:	andeq	r5, r1, r0, lsl r5
   14d14:	andeq	r5, r1, r0, lsl r5
   14d18:	andeq	r5, r1, r0, lsl r5
   14d1c:	andeq	r5, r1, r0, lsl r5
   14d20:	andeq	r5, r1, r0, lsl r5
   14d24:	andeq	r5, r1, r0, lsl r5
   14d28:	andeq	r5, r1, r0, lsl r5
   14d2c:	andeq	r5, r1, r0, lsl r5
   14d30:	andeq	r5, r1, r0, lsl r5
   14d34:	andeq	r5, r1, r0, lsl r5
   14d38:	andeq	r5, r1, r0, lsl r5
   14d3c:	andeq	r5, r1, r0, lsl r5
   14d40:	andeq	r5, r1, r0, lsl r5
   14d44:	andeq	r5, r1, r0, lsl r5
   14d48:	andeq	r5, r1, r0, lsl r5
   14d4c:	andeq	r5, r1, r0, lsl r5
   14d50:	andeq	r5, r1, r0, lsl r5
   14d54:	andeq	r5, r1, r0, lsl r5
   14d58:	andeq	r5, r1, r0, lsr #5
   14d5c:	muleq	r1, ip, r2
   14d60:	muleq	r1, ip, r2
   14d64:	andeq	r5, r1, r4, ror r2
   14d68:	muleq	r1, ip, r2
   14d6c:	andeq	r5, r1, r4, ror #17
   14d70:	muleq	r1, ip, r2
   14d74:	andeq	r5, r1, r4, ror r4
   14d78:	muleq	r1, ip, r2
   14d7c:	muleq	r1, ip, r2
   14d80:	muleq	r1, ip, r2
   14d84:	andeq	r5, r1, r4, ror #17
   14d88:	andeq	r5, r1, r4, ror #17
   14d8c:	andeq	r5, r1, r4, ror #17
   14d90:	andeq	r5, r1, r4, ror #17
   14d94:	andeq	r5, r1, r4, ror #17
   14d98:	andeq	r5, r1, r4, ror #17
   14d9c:	andeq	r5, r1, r4, ror #17
   14da0:	andeq	r5, r1, r4, ror #17
   14da4:	andeq	r5, r1, r4, ror #17
   14da8:	andeq	r5, r1, r4, ror #17
   14dac:	andeq	r5, r1, r4, ror #17
   14db0:	andeq	r5, r1, r4, ror #17
   14db4:	andeq	r5, r1, r4, ror #17
   14db8:	andeq	r5, r1, r4, ror #17
   14dbc:	andeq	r5, r1, r4, ror #17
   14dc0:	andeq	r5, r1, r4, ror #17
   14dc4:	muleq	r1, ip, r2
   14dc8:	muleq	r1, ip, r2
   14dcc:	muleq	r1, ip, r2
   14dd0:	muleq	r1, ip, r2
   14dd4:	strdeq	r4, [r1], -r8
   14dd8:	andeq	r5, r1, r0, lsl r5
   14ddc:	andeq	r5, r1, r4, ror #17
   14de0:	andeq	r5, r1, r4, ror #17
   14de4:	andeq	r5, r1, r4, ror #17
   14de8:	andeq	r5, r1, r4, ror #17
   14dec:	andeq	r5, r1, r4, ror #17
   14df0:	andeq	r5, r1, r4, ror #17
   14df4:	andeq	r5, r1, r4, ror #17
   14df8:	andeq	r5, r1, r4, ror #17
   14dfc:	andeq	r5, r1, r4, ror #17
   14e00:	andeq	r5, r1, r4, ror #17
   14e04:	andeq	r5, r1, r4, ror #17
   14e08:	andeq	r5, r1, r4, ror #17
   14e0c:	andeq	r5, r1, r4, ror #17
   14e10:	andeq	r5, r1, r4, ror #17
   14e14:	andeq	r5, r1, r4, ror #17
   14e18:	andeq	r5, r1, r4, ror #17
   14e1c:	andeq	r5, r1, r4, ror #17
   14e20:	andeq	r5, r1, r4, ror #17
   14e24:	andeq	r5, r1, r4, ror #17
   14e28:	andeq	r5, r1, r4, ror #17
   14e2c:	andeq	r5, r1, r4, ror #17
   14e30:	andeq	r5, r1, r4, ror #17
   14e34:	andeq	r5, r1, r4, ror #17
   14e38:	andeq	r5, r1, r4, ror #17
   14e3c:	andeq	r5, r1, r4, ror #17
   14e40:	andeq	r5, r1, r4, ror #17
   14e44:	muleq	r1, ip, r2
   14e48:	andeq	r5, r1, r4, ror r1
   14e4c:	andeq	r5, r1, r4, ror #17
   14e50:	muleq	r1, ip, r2
   14e54:	andeq	r5, r1, r4, ror #17
   14e58:	muleq	r1, ip, r2
   14e5c:	andeq	r5, r1, r4, ror #17
   14e60:	andeq	r5, r1, r4, ror #17
   14e64:	andeq	r5, r1, r4, ror #17
   14e68:	andeq	r5, r1, r4, ror #17
   14e6c:	andeq	r5, r1, r4, ror #17
   14e70:	andeq	r5, r1, r4, ror #17
   14e74:	andeq	r5, r1, r4, ror #17
   14e78:	andeq	r5, r1, r4, ror #17
   14e7c:	andeq	r5, r1, r4, ror #17
   14e80:	andeq	r5, r1, r4, ror #17
   14e84:	andeq	r5, r1, r4, ror #17
   14e88:	andeq	r5, r1, r4, ror #17
   14e8c:	andeq	r5, r1, r4, ror #17
   14e90:	andeq	r5, r1, r4, ror #17
   14e94:	andeq	r5, r1, r4, ror #17
   14e98:	andeq	r5, r1, r4, ror #17
   14e9c:	andeq	r5, r1, r4, ror #17
   14ea0:	andeq	r5, r1, r4, ror #17
   14ea4:	andeq	r5, r1, r4, ror #17
   14ea8:	andeq	r5, r1, r4, ror #17
   14eac:	andeq	r5, r1, r4, ror #17
   14eb0:	andeq	r5, r1, r4, ror #17
   14eb4:	andeq	r5, r1, r4, ror #17
   14eb8:	andeq	r5, r1, r4, ror #17
   14ebc:	andeq	r5, r1, r4, ror #17
   14ec0:	andeq	r5, r1, r4, ror #17
   14ec4:	andeq	r5, r1, r4, asr r2
   14ec8:	muleq	r1, ip, r2
   14ecc:	andeq	r5, r1, r4, asr r2
   14ed0:	andeq	r5, r1, r4, ror r2
   14ed4:	mov	r3, #0
   14ed8:	str	r3, [sp, #56]	; 0x38
   14edc:	b	14cbc <__assert_fail@plt+0x3804>
   14ee0:	mov	r3, #114	; 0x72
   14ee4:	b	15208 <__assert_fail@plt+0x3d50>
   14ee8:	mov	r3, #98	; 0x62
   14eec:	b	15220 <__assert_fail@plt+0x3d68>
   14ef0:	ldr	r3, [sp, #48]	; 0x30
   14ef4:	cmp	r3, #0
   14ef8:	beq	14fe0 <__assert_fail@plt+0x3b28>
   14efc:	ldr	r3, [sp, #32]
   14f00:	cmp	r3, #0
   14f04:	bne	15a68 <__assert_fail@plt+0x45b0>
   14f08:	ldr	r3, [sp, #44]	; 0x2c
   14f0c:	eor	r3, r3, #1
   14f10:	cmp	sl, #2
   14f14:	movne	r3, #0
   14f18:	andeq	r3, r3, #1
   14f1c:	cmp	r3, #0
   14f20:	moveq	r2, fp
   14f24:	beq	14f68 <__assert_fail@plt+0x3ab0>
   14f28:	cmp	r7, fp
   14f2c:	ldrhi	r2, [sp, #36]	; 0x24
   14f30:	movhi	r1, #39	; 0x27
   14f34:	strbhi	r1, [r2, fp]
   14f38:	add	r2, fp, #1
   14f3c:	cmp	r7, r2
   14f40:	ldrhi	r1, [sp, #36]	; 0x24
   14f44:	movhi	r0, #36	; 0x24
   14f48:	strbhi	r0, [r1, r2]
   14f4c:	add	r2, fp, #2
   14f50:	cmp	r7, r2
   14f54:	ldrhi	r1, [sp, #36]	; 0x24
   14f58:	movhi	r0, #39	; 0x27
   14f5c:	strbhi	r0, [r1, r2]
   14f60:	add	r2, fp, #3
   14f64:	str	r3, [sp, #44]	; 0x2c
   14f68:	cmp	r7, r2
   14f6c:	ldrhi	r3, [sp, #36]	; 0x24
   14f70:	movhi	r1, #92	; 0x5c
   14f74:	strbhi	r1, [r3, r2]
   14f78:	add	fp, r2, #1
   14f7c:	cmp	r5, #0
   14f80:	beq	158ec <__assert_fail@plt+0x4434>
   14f84:	add	r3, r6, #1
   14f88:	ldr	r1, [sp, #28]
   14f8c:	cmp	r1, r3
   14f90:	bls	158fc <__assert_fail@plt+0x4444>
   14f94:	ldr	r1, [sp, #52]	; 0x34
   14f98:	ldrb	r3, [r1, r3]
   14f9c:	sub	r3, r3, #48	; 0x30
   14fa0:	uxtb	r3, r3
   14fa4:	cmp	r3, #9
   14fa8:	bhi	15908 <__assert_fail@plt+0x4450>
   14fac:	cmp	r7, fp
   14fb0:	movhi	r3, #48	; 0x30
   14fb4:	ldrhi	r1, [sp, #36]	; 0x24
   14fb8:	strbhi	r3, [r1, fp]
   14fbc:	add	r3, r2, #2
   14fc0:	cmp	r7, r3
   14fc4:	movhi	r1, #48	; 0x30
   14fc8:	ldrhi	r0, [sp, #36]	; 0x24
   14fcc:	strbhi	r1, [r0, r3]
   14fd0:	add	fp, r2, #3
   14fd4:	ldr	r8, [sp, #32]
   14fd8:	mov	r4, #48	; 0x30
   14fdc:	b	152b8 <__assert_fail@plt+0x3e00>
   14fe0:	ldr	r3, [sp, #156]	; 0x9c
   14fe4:	tst	r3, #1
   14fe8:	bne	153ac <__assert_fail@plt+0x3ef4>
   14fec:	ldr	r5, [sp, #48]	; 0x30
   14ff0:	mov	r8, r5
   14ff4:	b	152b8 <__assert_fail@plt+0x3e00>
   14ff8:	cmp	sl, #2
   14ffc:	beq	15014 <__assert_fail@plt+0x3b5c>
   15000:	cmp	sl, #5
   15004:	beq	1502c <__assert_fail@plt+0x3b74>
   15008:	mov	r8, #0
   1500c:	mov	r5, r8
   15010:	b	152b8 <__assert_fail@plt+0x3e00>
   15014:	ldr	r3, [sp, #32]
   15018:	cmp	r3, #0
   1501c:	bne	15a7c <__assert_fail@plt+0x45c4>
   15020:	mov	r8, r3
   15024:	mov	r5, r3
   15028:	b	152b8 <__assert_fail@plt+0x3e00>
   1502c:	ldr	r3, [sp, #156]	; 0x9c
   15030:	tst	r3, #4
   15034:	beq	15914 <__assert_fail@plt+0x445c>
   15038:	add	r3, r6, #2
   1503c:	ldr	r2, [sp, #28]
   15040:	cmp	r2, r3
   15044:	bls	15920 <__assert_fail@plt+0x4468>
   15048:	ldr	r2, [sp, #52]	; 0x34
   1504c:	add	r2, r2, r6
   15050:	ldrb	r2, [r2, #1]
   15054:	cmp	r2, #63	; 0x3f
   15058:	movne	r8, #0
   1505c:	movne	r5, r8
   15060:	bne	152b8 <__assert_fail@plt+0x3e00>
   15064:	ldr	r2, [sp, #52]	; 0x34
   15068:	ldrb	r2, [r2, r3]
   1506c:	sub	r1, r2, #33	; 0x21
   15070:	cmp	r1, #29
   15074:	ldrls	pc, [pc, r1, lsl #2]
   15078:	b	1592c <__assert_fail@plt+0x4474>
   1507c:	strdeq	r5, [r1], -r4
   15080:	andeq	r5, r1, ip, lsr #18
   15084:	andeq	r5, r1, ip, lsr #18
   15088:	andeq	r5, r1, ip, lsr #18
   1508c:	andeq	r5, r1, ip, lsr #18
   15090:	andeq	r5, r1, ip, lsr #18
   15094:	strdeq	r5, [r1], -r4
   15098:	strdeq	r5, [r1], -r4
   1509c:	strdeq	r5, [r1], -r4
   150a0:	andeq	r5, r1, ip, lsr #18
   150a4:	andeq	r5, r1, ip, lsr #18
   150a8:	andeq	r5, r1, ip, lsr #18
   150ac:	strdeq	r5, [r1], -r4
   150b0:	andeq	r5, r1, ip, lsr #18
   150b4:	strdeq	r5, [r1], -r4
   150b8:	andeq	r5, r1, ip, lsr #18
   150bc:	andeq	r5, r1, ip, lsr #18
   150c0:	andeq	r5, r1, ip, lsr #18
   150c4:	andeq	r5, r1, ip, lsr #18
   150c8:	andeq	r5, r1, ip, lsr #18
   150cc:	andeq	r5, r1, ip, lsr #18
   150d0:	andeq	r5, r1, ip, lsr #18
   150d4:	andeq	r5, r1, ip, lsr #18
   150d8:	andeq	r5, r1, ip, lsr #18
   150dc:	andeq	r5, r1, ip, lsr #18
   150e0:	andeq	r5, r1, ip, lsr #18
   150e4:	andeq	r5, r1, ip, lsr #18
   150e8:	strdeq	r5, [r1], -r4
   150ec:	strdeq	r5, [r1], -r4
   150f0:	strdeq	r5, [r1], -r4
   150f4:	ldr	r1, [sp, #32]
   150f8:	cmp	r1, #0
   150fc:	bne	15b3c <__assert_fail@plt+0x4684>
   15100:	cmp	r7, fp
   15104:	movhi	r1, #63	; 0x3f
   15108:	ldrhi	r0, [sp, #36]	; 0x24
   1510c:	strbhi	r1, [r0, fp]
   15110:	add	r1, fp, #1
   15114:	cmp	r7, r1
   15118:	ldrhi	r0, [sp, #36]	; 0x24
   1511c:	movhi	ip, #34	; 0x22
   15120:	strbhi	ip, [r0, r1]
   15124:	add	r1, fp, #2
   15128:	cmp	r7, r1
   1512c:	ldrhi	r0, [sp, #36]	; 0x24
   15130:	movhi	ip, #34	; 0x22
   15134:	strbhi	ip, [r0, r1]
   15138:	add	r1, fp, #3
   1513c:	cmp	r7, r1
   15140:	movhi	r0, #63	; 0x3f
   15144:	ldrhi	ip, [sp, #36]	; 0x24
   15148:	strbhi	r0, [ip, r1]
   1514c:	add	fp, fp, #4
   15150:	ldr	r5, [sp, #32]
   15154:	mov	r8, r5
   15158:	mov	r4, r2
   1515c:	mov	r6, r3
   15160:	b	152b8 <__assert_fail@plt+0x3e00>
   15164:	mov	r3, #102	; 0x66
   15168:	b	15220 <__assert_fail@plt+0x3d68>
   1516c:	mov	r3, #118	; 0x76
   15170:	b	15220 <__assert_fail@plt+0x3d68>
   15174:	cmp	sl, #2
   15178:	beq	151e4 <__assert_fail@plt+0x3d2c>
   1517c:	ldr	r3, [sp, #48]	; 0x30
   15180:	ldr	r2, [sp, #32]
   15184:	and	r3, r3, r2
   15188:	tst	r9, r3
   1518c:	moveq	r3, r4
   15190:	beq	15220 <__assert_fail@plt+0x3d68>
   15194:	mov	r8, #0
   15198:	mov	r5, r8
   1519c:	eor	r5, r5, #1
   151a0:	ldr	r3, [sp, #44]	; 0x2c
   151a4:	and	r5, r5, r3
   151a8:	tst	r5, #255	; 0xff
   151ac:	beq	1538c <__assert_fail@plt+0x3ed4>
   151b0:	cmp	r7, fp
   151b4:	ldrhi	r3, [sp, #36]	; 0x24
   151b8:	movhi	r2, #39	; 0x27
   151bc:	strbhi	r2, [r3, fp]
   151c0:	add	r3, fp, #1
   151c4:	cmp	r7, r3
   151c8:	ldrhi	r2, [sp, #36]	; 0x24
   151cc:	movhi	r1, #39	; 0x27
   151d0:	strbhi	r1, [r2, r3]
   151d4:	add	fp, fp, #2
   151d8:	mov	r3, #0
   151dc:	str	r3, [sp, #44]	; 0x2c
   151e0:	b	1538c <__assert_fail@plt+0x3ed4>
   151e4:	ldr	r3, [sp, #32]
   151e8:	cmp	r3, #0
   151ec:	bne	15a88 <__assert_fail@plt+0x45d0>
   151f0:	mov	r8, r3
   151f4:	mov	r5, r3
   151f8:	b	1519c <__assert_fail@plt+0x3ce4>
   151fc:	mov	r3, #110	; 0x6e
   15200:	b	15208 <__assert_fail@plt+0x3d50>
   15204:	mov	r3, #116	; 0x74
   15208:	ldr	r2, [sp, #32]
   1520c:	cmp	sl, #2
   15210:	movne	r2, #0
   15214:	andeq	r2, r2, #1
   15218:	cmp	r2, #0
   1521c:	bne	15240 <__assert_fail@plt+0x3d88>
   15220:	ldr	r2, [sp, #48]	; 0x30
   15224:	cmp	r2, #0
   15228:	moveq	r8, r2
   1522c:	moveq	r5, r2
   15230:	beq	152b8 <__assert_fail@plt+0x3e00>
   15234:	mov	r4, r3
   15238:	mov	r8, #0
   1523c:	b	15310 <__assert_fail@plt+0x3e58>
   15240:	mov	r8, sl
   15244:	mov	sl, r7
   15248:	b	15ab4 <__assert_fail@plt+0x45fc>
   1524c:	mov	r3, #97	; 0x61
   15250:	b	15220 <__assert_fail@plt+0x3d68>
   15254:	ldr	r3, [sp, #28]
   15258:	cmn	r3, #1
   1525c:	beq	15288 <__assert_fail@plt+0x3dd0>
   15260:	ldr	r3, [sp, #28]
   15264:	subs	r3, r3, #1
   15268:	movne	r3, #1
   1526c:	cmp	r3, #0
   15270:	bne	15938 <__assert_fail@plt+0x4480>
   15274:	cmp	r6, #0
   15278:	beq	152a0 <__assert_fail@plt+0x3de8>
   1527c:	mov	r8, #0
   15280:	mov	r5, r8
   15284:	b	152b8 <__assert_fail@plt+0x3e00>
   15288:	ldr	r3, [sp, #52]	; 0x34
   1528c:	ldrb	r3, [r3, #1]
   15290:	adds	r3, r3, #0
   15294:	movne	r3, #1
   15298:	b	1526c <__assert_fail@plt+0x3db4>
   1529c:	mov	r8, #0
   152a0:	ldr	r5, [sp, #32]
   152a4:	cmp	sl, #2
   152a8:	movne	r5, #0
   152ac:	andeq	r5, r5, #1
   152b0:	cmp	r5, #0
   152b4:	bne	15468 <__assert_fail@plt+0x3fb0>
   152b8:	ldr	r3, [sp, #68]	; 0x44
   152bc:	cmp	sl, #2
   152c0:	orreq	r3, r3, #1
   152c4:	eor	r3, r3, #1
   152c8:	ldr	r2, [sp, #32]
   152cc:	orr	r3, r2, r3
   152d0:	tst	r3, #255	; 0xff
   152d4:	beq	15304 <__assert_fail@plt+0x3e4c>
   152d8:	ldr	r3, [sp, #160]	; 0xa0
   152dc:	cmp	r3, #0
   152e0:	beq	15304 <__assert_fail@plt+0x3e4c>
   152e4:	lsr	r2, r4, #5
   152e8:	uxtb	r2, r2
   152ec:	and	r3, r4, #31
   152f0:	ldr	r1, [sp, #160]	; 0xa0
   152f4:	ldr	r2, [r1, r2, lsl #2]
   152f8:	lsr	r3, r2, r3
   152fc:	tst	r3, #1
   15300:	bne	15310 <__assert_fail@plt+0x3e58>
   15304:	ldr	r3, [sp, #56]	; 0x38
   15308:	cmp	r3, #0
   1530c:	beq	1519c <__assert_fail@plt+0x3ce4>
   15310:	ldr	r3, [sp, #32]
   15314:	cmp	r3, #0
   15318:	bne	15b24 <__assert_fail@plt+0x466c>
   1531c:	ldr	r3, [sp, #44]	; 0x2c
   15320:	eor	r3, r3, #1
   15324:	cmp	sl, #2
   15328:	movne	r3, #0
   1532c:	andeq	r3, r3, #1
   15330:	cmp	r3, #0
   15334:	beq	15378 <__assert_fail@plt+0x3ec0>
   15338:	cmp	r7, fp
   1533c:	ldrhi	r2, [sp, #36]	; 0x24
   15340:	movhi	r1, #39	; 0x27
   15344:	strbhi	r1, [r2, fp]
   15348:	add	r2, fp, #1
   1534c:	cmp	r7, r2
   15350:	ldrhi	r1, [sp, #36]	; 0x24
   15354:	movhi	r0, #36	; 0x24
   15358:	strbhi	r0, [r1, r2]
   1535c:	add	r2, fp, #2
   15360:	cmp	r7, r2
   15364:	ldrhi	r1, [sp, #36]	; 0x24
   15368:	movhi	r0, #39	; 0x27
   1536c:	strbhi	r0, [r1, r2]
   15370:	add	fp, fp, #3
   15374:	str	r3, [sp, #44]	; 0x2c
   15378:	cmp	r7, fp
   1537c:	ldrhi	r3, [sp, #36]	; 0x24
   15380:	movhi	r2, #92	; 0x5c
   15384:	strbhi	r2, [r3, fp]
   15388:	add	fp, fp, #1
   1538c:	cmp	fp, r7
   15390:	ldrcc	r3, [sp, #36]	; 0x24
   15394:	strbcc	r4, [r3, fp]
   15398:	add	fp, fp, #1
   1539c:	ldr	r3, [sp, #40]	; 0x28
   153a0:	cmp	r8, #0
   153a4:	moveq	r3, #0
   153a8:	str	r3, [sp, #40]	; 0x28
   153ac:	add	r6, r6, #1
   153b0:	ldr	r3, [sp, #28]
   153b4:	cmn	r3, #1
   153b8:	beq	15944 <__assert_fail@plt+0x448c>
   153bc:	ldr	r3, [sp, #28]
   153c0:	subs	r8, r3, r6
   153c4:	movne	r8, #1
   153c8:	cmp	r8, #0
   153cc:	beq	15958 <__assert_fail@plt+0x44a0>
   153d0:	ldr	r5, [sp, #48]	; 0x30
   153d4:	cmp	sl, #2
   153d8:	moveq	r5, #0
   153dc:	andne	r5, r5, #1
   153e0:	ldr	r3, [sp, #60]	; 0x3c
   153e4:	adds	r9, r3, #0
   153e8:	movne	r9, #1
   153ec:	ands	r2, r5, r9
   153f0:	str	r2, [sp, #56]	; 0x38
   153f4:	beq	14cbc <__assert_fail@plt+0x3804>
   153f8:	add	r4, r6, r3
   153fc:	ldr	r2, [sp, #28]
   15400:	cmp	r3, #1
   15404:	movls	r3, #0
   15408:	movhi	r3, #1
   1540c:	cmn	r2, #1
   15410:	movne	r3, #0
   15414:	cmp	r3, #0
   15418:	beq	15428 <__assert_fail@plt+0x3f70>
   1541c:	ldr	r0, [sp, #52]	; 0x34
   15420:	bl	11314 <strlen@plt>
   15424:	str	r0, [sp, #28]
   15428:	ldr	r3, [sp, #28]
   1542c:	cmp	r3, r4
   15430:	bcc	14cb4 <__assert_fail@plt+0x37fc>
   15434:	ldr	r2, [sp, #60]	; 0x3c
   15438:	ldr	r1, [sp, #72]	; 0x48
   1543c:	ldr	r3, [sp, #52]	; 0x34
   15440:	add	r0, r3, r6
   15444:	bl	111d0 <memcmp@plt>
   15448:	cmp	r0, #0
   1544c:	bne	14ed4 <__assert_fail@plt+0x3a1c>
   15450:	ldr	r3, [sp, #32]
   15454:	cmp	r3, #0
   15458:	beq	14cbc <__assert_fail@plt+0x3804>
   1545c:	mov	r8, sl
   15460:	mov	sl, r7
   15464:	b	15ab4 <__assert_fail@plt+0x45fc>
   15468:	mov	r8, sl
   1546c:	mov	sl, r7
   15470:	b	15ab4 <__assert_fail@plt+0x45fc>
   15474:	cmp	sl, #2
   15478:	strne	r8, [sp, #80]	; 0x50
   1547c:	movne	r5, #0
   15480:	bne	152b8 <__assert_fail@plt+0x3e00>
   15484:	ldr	r3, [sp, #32]
   15488:	cmp	r3, #0
   1548c:	bne	15aa0 <__assert_fail@plt+0x45e8>
   15490:	ldr	r2, [sp, #76]	; 0x4c
   15494:	adds	r3, r7, #0
   15498:	movne	r3, #1
   1549c:	cmp	r2, #0
   154a0:	movne	r3, #0
   154a4:	cmp	r3, #0
   154a8:	movne	r3, #0
   154ac:	bne	154dc <__assert_fail@plt+0x4024>
   154b0:	cmp	r7, fp
   154b4:	ldrhi	r3, [sp, #36]	; 0x24
   154b8:	movhi	r2, #39	; 0x27
   154bc:	strbhi	r2, [r3, fp]
   154c0:	add	r3, fp, #1
   154c4:	cmp	r7, r3
   154c8:	ldrhi	r2, [sp, #36]	; 0x24
   154cc:	movhi	r1, #92	; 0x5c
   154d0:	strbhi	r1, [r2, r3]
   154d4:	mov	r3, r7
   154d8:	ldr	r7, [sp, #76]	; 0x4c
   154dc:	add	r2, fp, #2
   154e0:	cmp	r2, r3
   154e4:	ldrcc	r1, [sp, #36]	; 0x24
   154e8:	movcc	r0, #39	; 0x27
   154ec:	strbcc	r0, [r1, r2]
   154f0:	add	fp, fp, #3
   154f4:	ldr	r2, [sp, #32]
   154f8:	mov	r5, r2
   154fc:	str	r8, [sp, #80]	; 0x50
   15500:	str	r2, [sp, #44]	; 0x2c
   15504:	str	r7, [sp, #76]	; 0x4c
   15508:	mov	r7, r3
   1550c:	b	152b8 <__assert_fail@plt+0x3e00>
   15510:	ldr	r5, [sp, #84]	; 0x54
   15514:	cmp	r5, #1
   15518:	beq	15548 <__assert_fail@plt+0x4090>
   1551c:	mov	r3, #0
   15520:	str	r3, [sp, #104]	; 0x68
   15524:	str	r3, [sp, #108]	; 0x6c
   15528:	ldr	r3, [sp, #28]
   1552c:	cmn	r3, #1
   15530:	beq	1557c <__assert_fail@plt+0x40c4>
   15534:	mov	r3, #0
   15538:	str	r4, [sp, #88]	; 0x58
   1553c:	str	fp, [sp, #92]	; 0x5c
   15540:	mov	fp, r3
   15544:	b	156a4 <__assert_fail@plt+0x41ec>
   15548:	bl	112fc <__ctype_b_loc@plt>
   1554c:	ldr	r2, [r0]
   15550:	lsl	r3, r4, #1
   15554:	ldrh	r8, [r2, r3]
   15558:	lsr	r8, r8, #14
   1555c:	and	r8, r8, #1
   15560:	mov	r2, r5
   15564:	eor	r5, r8, #1
   15568:	ldr	r3, [sp, #48]	; 0x30
   1556c:	and	r5, r5, r3
   15570:	ands	r5, r5, #255	; 0xff
   15574:	beq	152b8 <__assert_fail@plt+0x3e00>
   15578:	b	1573c <__assert_fail@plt+0x4284>
   1557c:	ldr	r0, [sp, #52]	; 0x34
   15580:	bl	11314 <strlen@plt>
   15584:	str	r0, [sp, #28]
   15588:	b	15534 <__assert_fail@plt+0x407c>
   1558c:	mov	r2, fp
   15590:	mov	r1, r4
   15594:	ldr	r4, [sp, #88]	; 0x58
   15598:	ldr	fp, [sp, #92]	; 0x5c
   1559c:	ldr	r0, [sp, #28]
   155a0:	cmp	r0, r5
   155a4:	bls	15770 <__assert_fail@plt+0x42b8>
   155a8:	ldrb	r3, [r1]
   155ac:	cmp	r3, #0
   155b0:	beq	15778 <__assert_fail@plt+0x42c0>
   155b4:	mov	r3, r1
   155b8:	add	r2, r2, #1
   155bc:	add	r1, r6, r2
   155c0:	cmp	r0, r1
   155c4:	bls	15780 <__assert_fail@plt+0x42c8>
   155c8:	ldrb	r1, [r3, #1]!
   155cc:	cmp	r1, #0
   155d0:	bne	155b8 <__assert_fail@plt+0x4100>
   155d4:	mov	r8, #0
   155d8:	b	15734 <__assert_fail@plt+0x427c>
   155dc:	cmp	r4, r5
   155e0:	beq	15680 <__assert_fail@plt+0x41c8>
   155e4:	ldrb	r3, [r4, #1]!
   155e8:	sub	r3, r3, #91	; 0x5b
   155ec:	cmp	r3, #33	; 0x21
   155f0:	ldrls	pc, [pc, r3, lsl #2]
   155f4:	b	155dc <__assert_fail@plt+0x4124>
   155f8:	andeq	r5, r1, ip, lsr #21
   155fc:	andeq	r5, r1, ip, lsr #21
   15600:	ldrdeq	r5, [r1], -ip
   15604:	andeq	r5, r1, ip, lsr #21
   15608:	ldrdeq	r5, [r1], -ip
   1560c:	andeq	r5, r1, ip, lsr #21
   15610:	ldrdeq	r5, [r1], -ip
   15614:	ldrdeq	r5, [r1], -ip
   15618:	ldrdeq	r5, [r1], -ip
   1561c:	ldrdeq	r5, [r1], -ip
   15620:	ldrdeq	r5, [r1], -ip
   15624:	ldrdeq	r5, [r1], -ip
   15628:	ldrdeq	r5, [r1], -ip
   1562c:	ldrdeq	r5, [r1], -ip
   15630:	ldrdeq	r5, [r1], -ip
   15634:	ldrdeq	r5, [r1], -ip
   15638:	ldrdeq	r5, [r1], -ip
   1563c:	ldrdeq	r5, [r1], -ip
   15640:	ldrdeq	r5, [r1], -ip
   15644:	ldrdeq	r5, [r1], -ip
   15648:	ldrdeq	r5, [r1], -ip
   1564c:	ldrdeq	r5, [r1], -ip
   15650:	ldrdeq	r5, [r1], -ip
   15654:	ldrdeq	r5, [r1], -ip
   15658:	ldrdeq	r5, [r1], -ip
   1565c:	ldrdeq	r5, [r1], -ip
   15660:	ldrdeq	r5, [r1], -ip
   15664:	ldrdeq	r5, [r1], -ip
   15668:	ldrdeq	r5, [r1], -ip
   1566c:	ldrdeq	r5, [r1], -ip
   15670:	ldrdeq	r5, [r1], -ip
   15674:	ldrdeq	r5, [r1], -ip
   15678:	ldrdeq	r5, [r1], -ip
   1567c:	andeq	r5, r1, ip, lsr #21
   15680:	ldr	r0, [sp, #100]	; 0x64
   15684:	bl	11224 <iswprint@plt>
   15688:	cmp	r0, #0
   1568c:	moveq	r8, #0
   15690:	add	fp, fp, r9
   15694:	add	r0, sp, #104	; 0x68
   15698:	bl	111ac <mbsinit@plt>
   1569c:	cmp	r0, #0
   156a0:	bne	15714 <__assert_fail@plt+0x425c>
   156a4:	add	r5, r6, fp
   156a8:	ldr	r3, [sp, #52]	; 0x34
   156ac:	add	r4, r3, r5
   156b0:	add	r3, sp, #104	; 0x68
   156b4:	ldr	r2, [sp, #28]
   156b8:	sub	r2, r2, r5
   156bc:	mov	r1, r4
   156c0:	add	r0, sp, #100	; 0x64
   156c4:	bl	1859c <__assert_fail@plt+0x70e4>
   156c8:	subs	r9, r0, #0
   156cc:	beq	15788 <__assert_fail@plt+0x42d0>
   156d0:	cmn	r9, #1
   156d4:	beq	15724 <__assert_fail@plt+0x426c>
   156d8:	cmn	r9, #2
   156dc:	beq	1558c <__assert_fail@plt+0x40d4>
   156e0:	ldr	r3, [sp, #32]
   156e4:	cmp	sl, #2
   156e8:	movne	r3, #0
   156ec:	andeq	r3, r3, #1
   156f0:	cmp	r3, #0
   156f4:	beq	15680 <__assert_fail@plt+0x41c8>
   156f8:	cmp	r9, #1
   156fc:	bls	15680 <__assert_fail@plt+0x41c8>
   15700:	sub	r3, r9, #1
   15704:	add	r5, r3, r5
   15708:	ldr	r3, [sp, #52]	; 0x34
   1570c:	add	r5, r3, r5
   15710:	b	155e4 <__assert_fail@plt+0x412c>
   15714:	ldr	r4, [sp, #88]	; 0x58
   15718:	mov	r2, fp
   1571c:	ldr	fp, [sp, #92]	; 0x5c
   15720:	b	15734 <__assert_fail@plt+0x427c>
   15724:	ldr	r4, [sp, #88]	; 0x58
   15728:	mov	r2, fp
   1572c:	ldr	fp, [sp, #92]	; 0x5c
   15730:	mov	r8, #0
   15734:	cmp	r2, #1
   15738:	bls	15564 <__assert_fail@plt+0x40ac>
   1573c:	add	r1, r6, r2
   15740:	ldr	ip, [sp, #64]	; 0x40
   15744:	mov	r5, #0
   15748:	eor	r3, r8, #1
   1574c:	ldr	r2, [sp, #48]	; 0x30
   15750:	and	r3, r3, r2
   15754:	uxtb	r3, r3
   15758:	ldr	r9, [sp, #32]
   1575c:	ldr	lr, [sp, #44]	; 0x2c
   15760:	ldr	r2, [sp, #56]	; 0x38
   15764:	str	r8, [sp, #56]	; 0x38
   15768:	ldr	r0, [sp, #36]	; 0x24
   1576c:	b	15808 <__assert_fail@plt+0x4350>
   15770:	mov	r8, #0
   15774:	b	15734 <__assert_fail@plt+0x427c>
   15778:	mov	r8, #0
   1577c:	b	15734 <__assert_fail@plt+0x427c>
   15780:	mov	r8, #0
   15784:	b	15734 <__assert_fail@plt+0x427c>
   15788:	ldr	r4, [sp, #88]	; 0x58
   1578c:	mov	r2, fp
   15790:	ldr	fp, [sp, #92]	; 0x5c
   15794:	b	15734 <__assert_fail@plt+0x427c>
   15798:	cmp	r2, #0
   1579c:	beq	157b0 <__assert_fail@plt+0x42f8>
   157a0:	cmp	r7, fp
   157a4:	movhi	r2, #92	; 0x5c
   157a8:	strbhi	r2, [r0, fp]
   157ac:	add	fp, fp, #1
   157b0:	add	r8, r6, #1
   157b4:	cmp	r1, r8
   157b8:	bls	158c0 <__assert_fail@plt+0x4408>
   157bc:	eor	r2, r5, #1
   157c0:	and	r2, r2, lr
   157c4:	ands	r2, r2, #255	; 0xff
   157c8:	beq	158dc <__assert_fail@plt+0x4424>
   157cc:	cmp	r7, fp
   157d0:	movhi	r2, #39	; 0x27
   157d4:	strbhi	r2, [r0, fp]
   157d8:	add	r2, fp, #1
   157dc:	cmp	r7, r2
   157e0:	movhi	lr, #39	; 0x27
   157e4:	strbhi	lr, [r0, r2]
   157e8:	add	fp, fp, #2
   157ec:	mov	r6, r8
   157f0:	mov	r2, r3
   157f4:	mov	lr, r3
   157f8:	cmp	r7, fp
   157fc:	strbhi	r4, [r0, fp]
   15800:	add	fp, fp, #1
   15804:	ldrb	r4, [ip, #1]!
   15808:	cmp	r3, #0
   1580c:	beq	15798 <__assert_fail@plt+0x42e0>
   15810:	cmp	r9, #0
   15814:	bne	15b18 <__assert_fail@plt+0x4660>
   15818:	eor	r5, lr, #1
   1581c:	cmp	sl, #2
   15820:	movne	r5, #0
   15824:	andeq	r5, r5, #1
   15828:	cmp	r5, #0
   1582c:	beq	15864 <__assert_fail@plt+0x43ac>
   15830:	cmp	r7, fp
   15834:	movhi	lr, #39	; 0x27
   15838:	strbhi	lr, [r0, fp]
   1583c:	add	lr, fp, #1
   15840:	cmp	r7, lr
   15844:	movhi	r8, #36	; 0x24
   15848:	strbhi	r8, [r0, lr]
   1584c:	add	lr, fp, #2
   15850:	cmp	r7, lr
   15854:	movhi	r8, #39	; 0x27
   15858:	strbhi	r8, [r0, lr]
   1585c:	add	fp, fp, #3
   15860:	mov	lr, r5
   15864:	cmp	r7, fp
   15868:	movhi	r5, #92	; 0x5c
   1586c:	strbhi	r5, [r0, fp]
   15870:	add	r5, fp, #1
   15874:	cmp	r7, r5
   15878:	lsrhi	r8, r4, #6
   1587c:	addhi	r8, r8, #48	; 0x30
   15880:	strbhi	r8, [r0, r5]
   15884:	add	r8, fp, #2
   15888:	cmp	r7, r8
   1588c:	lsrhi	r5, r4, #3
   15890:	andhi	r5, r5, #7
   15894:	addhi	r5, r5, #48	; 0x30
   15898:	strbhi	r5, [r0, r8]
   1589c:	add	fp, fp, #3
   158a0:	and	r4, r4, #7
   158a4:	add	r4, r4, #48	; 0x30
   158a8:	add	r5, r6, #1
   158ac:	cmp	r1, r5
   158b0:	bls	158cc <__assert_fail@plt+0x4414>
   158b4:	mov	r6, r5
   158b8:	mov	r5, r3
   158bc:	b	157f8 <__assert_fail@plt+0x4340>
   158c0:	str	lr, [sp, #44]	; 0x2c
   158c4:	ldr	r8, [sp, #56]	; 0x38
   158c8:	b	1519c <__assert_fail@plt+0x3ce4>
   158cc:	str	lr, [sp, #44]	; 0x2c
   158d0:	ldr	r8, [sp, #56]	; 0x38
   158d4:	mov	r5, r3
   158d8:	b	1519c <__assert_fail@plt+0x3ce4>
   158dc:	mov	r6, r8
   158e0:	b	157f8 <__assert_fail@plt+0x4340>
   158e4:	mov	r5, #0
   158e8:	b	152b8 <__assert_fail@plt+0x3e00>
   158ec:	mov	r8, r5
   158f0:	ldr	r5, [sp, #48]	; 0x30
   158f4:	mov	r4, #48	; 0x30
   158f8:	b	152b8 <__assert_fail@plt+0x3e00>
   158fc:	ldr	r8, [sp, #32]
   15900:	mov	r4, #48	; 0x30
   15904:	b	152b8 <__assert_fail@plt+0x3e00>
   15908:	ldr	r8, [sp, #32]
   1590c:	mov	r4, #48	; 0x30
   15910:	b	152b8 <__assert_fail@plt+0x3e00>
   15914:	mov	r8, #0
   15918:	mov	r5, r8
   1591c:	b	152b8 <__assert_fail@plt+0x3e00>
   15920:	mov	r8, #0
   15924:	mov	r5, r8
   15928:	b	152b8 <__assert_fail@plt+0x3e00>
   1592c:	mov	r8, #0
   15930:	mov	r5, r8
   15934:	b	152b8 <__assert_fail@plt+0x3e00>
   15938:	mov	r8, #0
   1593c:	mov	r5, r8
   15940:	b	152b8 <__assert_fail@plt+0x3e00>
   15944:	ldr	r3, [sp, #52]	; 0x34
   15948:	ldrb	r8, [r3, r6]
   1594c:	adds	r8, r8, #0
   15950:	movne	r8, #1
   15954:	b	153c8 <__assert_fail@plt+0x3f10>
   15958:	cmp	sl, #2
   1595c:	movne	r3, #0
   15960:	moveq	r3, #1
   15964:	ldr	r1, [sp, #32]
   15968:	mov	r2, r1
   1596c:	and	r2, r2, r3
   15970:	cmp	fp, #0
   15974:	movne	r2, #0
   15978:	andeq	r2, r2, #1
   1597c:	cmp	r2, #0
   15980:	bne	15b30 <__assert_fail@plt+0x4678>
   15984:	eor	r2, r1, #1
   15988:	and	r3, r3, r2
   1598c:	ldr	r1, [sp, #80]	; 0x50
   15990:	tst	r1, r3
   15994:	beq	15a0c <__assert_fail@plt+0x4554>
   15998:	ldr	r3, [sp, #40]	; 0x28
   1599c:	cmp	r3, #0
   159a0:	bne	159c8 <__assert_fail@plt+0x4510>
   159a4:	ldr	r1, [sp, #76]	; 0x4c
   159a8:	clz	r3, r7
   159ac:	lsr	r3, r3, #5
   159b0:	cmp	r1, #0
   159b4:	moveq	r3, #0
   159b8:	cmp	r3, #0
   159bc:	beq	15a0c <__assert_fail@plt+0x4554>
   159c0:	ldr	r7, [sp, #76]	; 0x4c
   159c4:	b	14a5c <__assert_fail@plt+0x35a4>
   159c8:	ldr	r3, [sp, #168]	; 0xa8
   159cc:	str	r3, [sp, #16]
   159d0:	ldr	r3, [sp, #164]	; 0xa4
   159d4:	str	r3, [sp, #12]
   159d8:	ldr	r3, [sp, #160]	; 0xa0
   159dc:	str	r3, [sp, #8]
   159e0:	ldr	r3, [sp, #156]	; 0x9c
   159e4:	str	r3, [sp, #4]
   159e8:	mov	r3, #5
   159ec:	str	r3, [sp]
   159f0:	ldr	r3, [sp, #28]
   159f4:	ldr	r2, [sp, #52]	; 0x34
   159f8:	ldr	r1, [sp, #76]	; 0x4c
   159fc:	ldr	r0, [sp, #36]	; 0x24
   15a00:	bl	149fc <__assert_fail@plt+0x3544>
   15a04:	mov	fp, r0
   15a08:	b	15b0c <__assert_fail@plt+0x4654>
   15a0c:	mov	sl, r7
   15a10:	ldr	r3, [sp, #72]	; 0x48
   15a14:	cmp	r3, #0
   15a18:	moveq	r2, #0
   15a1c:	andne	r2, r2, #1
   15a20:	cmp	r2, #0
   15a24:	beq	15a54 <__assert_fail@plt+0x459c>
   15a28:	mov	r2, r3
   15a2c:	ldrb	r3, [r3]
   15a30:	cmp	r3, #0
   15a34:	beq	15a54 <__assert_fail@plt+0x459c>
   15a38:	ldr	r1, [sp, #36]	; 0x24
   15a3c:	cmp	sl, fp
   15a40:	strbhi	r3, [r1, fp]
   15a44:	add	fp, fp, #1
   15a48:	ldrb	r3, [r2, #1]!
   15a4c:	cmp	r3, #0
   15a50:	bne	15a3c <__assert_fail@plt+0x4584>
   15a54:	cmp	sl, fp
   15a58:	movhi	r3, #0
   15a5c:	ldrhi	r2, [sp, #36]	; 0x24
   15a60:	strbhi	r3, [r2, fp]
   15a64:	b	15b0c <__assert_fail@plt+0x4654>
   15a68:	mov	r8, sl
   15a6c:	mov	sl, r7
   15a70:	ldr	r3, [sp, #32]
   15a74:	str	r3, [sp, #48]	; 0x30
   15a78:	b	15ab4 <__assert_fail@plt+0x45fc>
   15a7c:	mov	r8, sl
   15a80:	mov	sl, r7
   15a84:	b	15ab4 <__assert_fail@plt+0x45fc>
   15a88:	mov	r8, sl
   15a8c:	mov	sl, r7
   15a90:	b	15ab4 <__assert_fail@plt+0x45fc>
   15a94:	andeq	sl, r1, r4, asr #4
   15a98:	andeq	sl, r1, r4, asr r2
   15a9c:	andeq	sl, r1, r8, asr #4
   15aa0:	mov	r8, sl
   15aa4:	mov	sl, r7
   15aa8:	b	15ab4 <__assert_fail@plt+0x45fc>
   15aac:	mov	r8, sl
   15ab0:	mov	sl, r7
   15ab4:	ldr	r3, [sp, #48]	; 0x30
   15ab8:	cmp	r8, #2
   15abc:	movne	r3, #0
   15ac0:	andeq	r3, r3, #1
   15ac4:	cmp	r3, #0
   15ac8:	movne	r8, #4
   15acc:	ldr	r3, [sp, #168]	; 0xa8
   15ad0:	str	r3, [sp, #16]
   15ad4:	ldr	r3, [sp, #164]	; 0xa4
   15ad8:	str	r3, [sp, #12]
   15adc:	mov	r3, #0
   15ae0:	str	r3, [sp, #8]
   15ae4:	ldr	r3, [sp, #156]	; 0x9c
   15ae8:	bic	r3, r3, #2
   15aec:	str	r3, [sp, #4]
   15af0:	str	r8, [sp]
   15af4:	ldr	r3, [sp, #28]
   15af8:	ldr	r2, [sp, #52]	; 0x34
   15afc:	mov	r1, sl
   15b00:	ldr	r0, [sp, #36]	; 0x24
   15b04:	bl	149fc <__assert_fail@plt+0x3544>
   15b08:	mov	fp, r0
   15b0c:	mov	r0, fp
   15b10:	add	sp, sp, #116	; 0x74
   15b14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b18:	mov	r8, sl
   15b1c:	mov	sl, r7
   15b20:	b	15ab4 <__assert_fail@plt+0x45fc>
   15b24:	mov	r8, sl
   15b28:	mov	sl, r7
   15b2c:	b	15ab4 <__assert_fail@plt+0x45fc>
   15b30:	mov	r8, sl
   15b34:	mov	sl, r7
   15b38:	b	15ab4 <__assert_fail@plt+0x45fc>
   15b3c:	mov	r8, sl
   15b40:	mov	sl, r7
   15b44:	b	15acc <__assert_fail@plt+0x4614>
   15b48:	mov	r3, #1
   15b4c:	str	r3, [sp, #32]
   15b50:	str	r3, [sp, #48]	; 0x30
   15b54:	str	r3, [sp, #60]	; 0x3c
   15b58:	ldr	r3, [pc, #-196]	; 15a9c <__assert_fail@plt+0x45e4>
   15b5c:	str	r3, [sp, #72]	; 0x48
   15b60:	mov	fp, #0
   15b64:	mov	sl, #5
   15b68:	b	14ab8 <__assert_fail@plt+0x3600>
   15b6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b70:	sub	sp, sp, #52	; 0x34
   15b74:	mov	r5, r0
   15b78:	str	r1, [sp, #24]
   15b7c:	str	r2, [sp, #28]
   15b80:	mov	r4, r3
   15b84:	bl	11338 <__errno_location@plt>
   15b88:	str	r0, [sp, #32]
   15b8c:	ldr	r3, [r0]
   15b90:	str	r3, [sp, #36]	; 0x24
   15b94:	ldr	r3, [pc, #396]	; 15d28 <__assert_fail@plt+0x4870>
   15b98:	ldr	r6, [r3]
   15b9c:	cmn	r5, #-2147483647	; 0x80000001
   15ba0:	movne	r3, #0
   15ba4:	moveq	r3, #1
   15ba8:	orrs	r3, r3, r5, lsr #31
   15bac:	bne	15cec <__assert_fail@plt+0x4834>
   15bb0:	ldr	r3, [pc, #368]	; 15d28 <__assert_fail@plt+0x4870>
   15bb4:	ldr	r2, [r3, #4]
   15bb8:	cmp	r5, r2
   15bbc:	blt	15c24 <__assert_fail@plt+0x476c>
   15bc0:	str	r2, [sp, #44]	; 0x2c
   15bc4:	add	r3, r3, #8
   15bc8:	cmp	r6, r3
   15bcc:	beq	15cf0 <__assert_fail@plt+0x4838>
   15bd0:	sub	r2, r5, r2
   15bd4:	mov	r3, #8
   15bd8:	str	r3, [sp]
   15bdc:	mvn	r3, #-2147483648	; 0x80000000
   15be0:	add	r2, r2, #1
   15be4:	add	r1, sp, #44	; 0x2c
   15be8:	mov	r0, r6
   15bec:	bl	176c0 <__assert_fail@plt+0x6208>
   15bf0:	mov	r6, r0
   15bf4:	ldr	r3, [pc, #300]	; 15d28 <__assert_fail@plt+0x4870>
   15bf8:	str	r0, [r3]
   15bfc:	ldr	r7, [pc, #292]	; 15d28 <__assert_fail@plt+0x4870>
   15c00:	ldr	r0, [r7, #4]
   15c04:	ldr	r2, [sp, #44]	; 0x2c
   15c08:	sub	r2, r2, r0
   15c0c:	lsl	r2, r2, #3
   15c10:	mov	r1, #0
   15c14:	add	r0, r6, r0, lsl #3
   15c18:	bl	11368 <memset@plt>
   15c1c:	ldr	r3, [sp, #44]	; 0x2c
   15c20:	str	r3, [r7, #4]
   15c24:	add	fp, r6, r5, lsl #3
   15c28:	ldr	r8, [r6, r5, lsl #3]
   15c2c:	ldr	r7, [fp, #4]
   15c30:	ldr	r9, [r4, #4]
   15c34:	orr	r9, r9, #1
   15c38:	add	sl, r4, #8
   15c3c:	ldr	r3, [r4, #44]	; 0x2c
   15c40:	str	r3, [sp, #16]
   15c44:	ldr	r3, [r4, #40]	; 0x28
   15c48:	str	r3, [sp, #12]
   15c4c:	str	sl, [sp, #8]
   15c50:	str	r9, [sp, #4]
   15c54:	ldr	r3, [r4]
   15c58:	str	r3, [sp]
   15c5c:	ldr	r3, [sp, #28]
   15c60:	ldr	r2, [sp, #24]
   15c64:	mov	r1, r8
   15c68:	mov	r0, r7
   15c6c:	bl	149fc <__assert_fail@plt+0x3544>
   15c70:	cmp	r8, r0
   15c74:	bhi	15cd4 <__assert_fail@plt+0x481c>
   15c78:	add	r8, r0, #1
   15c7c:	str	r8, [r6, r5, lsl #3]
   15c80:	ldr	r3, [pc, #164]	; 15d2c <__assert_fail@plt+0x4874>
   15c84:	cmp	r7, r3
   15c88:	beq	15c94 <__assert_fail@plt+0x47dc>
   15c8c:	mov	r0, r7
   15c90:	bl	13c70 <__assert_fail@plt+0x27b8>
   15c94:	mov	r0, r8
   15c98:	bl	1753c <__assert_fail@plt+0x6084>
   15c9c:	mov	r7, r0
   15ca0:	str	r0, [fp, #4]
   15ca4:	ldr	r3, [r4, #44]	; 0x2c
   15ca8:	str	r3, [sp, #16]
   15cac:	ldr	r3, [r4, #40]	; 0x28
   15cb0:	str	r3, [sp, #12]
   15cb4:	str	sl, [sp, #8]
   15cb8:	str	r9, [sp, #4]
   15cbc:	ldr	r3, [r4]
   15cc0:	str	r3, [sp]
   15cc4:	ldr	r3, [sp, #28]
   15cc8:	ldr	r2, [sp, #24]
   15ccc:	mov	r1, r8
   15cd0:	bl	149fc <__assert_fail@plt+0x3544>
   15cd4:	ldr	r3, [sp, #32]
   15cd8:	ldr	r2, [sp, #36]	; 0x24
   15cdc:	str	r2, [r3]
   15ce0:	mov	r0, r7
   15ce4:	add	sp, sp, #52	; 0x34
   15ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cec:	bl	114a0 <abort@plt>
   15cf0:	sub	r2, r5, r2
   15cf4:	mov	r3, #8
   15cf8:	str	r3, [sp]
   15cfc:	mvn	r3, #-2147483648	; 0x80000000
   15d00:	add	r2, r2, #1
   15d04:	add	r1, sp, #44	; 0x2c
   15d08:	mov	r0, #0
   15d0c:	bl	176c0 <__assert_fail@plt+0x6208>
   15d10:	mov	r6, r0
   15d14:	ldr	r3, [pc, #12]	; 15d28 <__assert_fail@plt+0x4870>
   15d18:	str	r0, [r3], #8
   15d1c:	ldm	r3, {r0, r1}
   15d20:	stm	r6, {r0, r1}
   15d24:	b	15bfc <__assert_fail@plt+0x4744>
   15d28:	andeq	fp, r2, ip, asr r1
   15d2c:	ldrdeq	fp, [r2], -r4
   15d30:	push	{r4, r5, r6, lr}
   15d34:	mov	r4, r0
   15d38:	bl	11338 <__errno_location@plt>
   15d3c:	mov	r5, r0
   15d40:	ldr	r6, [r0]
   15d44:	cmp	r4, #0
   15d48:	ldr	r3, [pc, #20]	; 15d64 <__assert_fail@plt+0x48ac>
   15d4c:	moveq	r4, r3
   15d50:	mov	r1, #48	; 0x30
   15d54:	mov	r0, r4
   15d58:	bl	17a28 <__assert_fail@plt+0x6570>
   15d5c:	str	r6, [r5]
   15d60:	pop	{r4, r5, r6, pc}
   15d64:	ldrdeq	fp, [r2], -r4
   15d68:	subs	r3, r0, #0
   15d6c:	ldr	r2, [pc, #8]	; 15d7c <__assert_fail@plt+0x48c4>
   15d70:	moveq	r3, r2
   15d74:	ldr	r0, [r3]
   15d78:	bx	lr
   15d7c:	ldrdeq	fp, [r2], -r4
   15d80:	subs	r3, r0, #0
   15d84:	ldr	r2, [pc, #8]	; 15d94 <__assert_fail@plt+0x48dc>
   15d88:	moveq	r3, r2
   15d8c:	str	r1, [r3]
   15d90:	bx	lr
   15d94:	ldrdeq	fp, [r2], -r4
   15d98:	push	{lr}		; (str lr, [sp, #-4]!)
   15d9c:	subs	r3, r0, #0
   15da0:	ldr	r0, [pc, #44]	; 15dd4 <__assert_fail@plt+0x491c>
   15da4:	moveq	r3, r0
   15da8:	add	r3, r3, #8
   15dac:	lsr	lr, r1, #5
   15db0:	and	r1, r1, #31
   15db4:	ldr	ip, [r3, lr, lsl #2]
   15db8:	lsr	r0, ip, r1
   15dbc:	eor	r2, r2, r0
   15dc0:	and	r2, r2, #1
   15dc4:	eor	r1, ip, r2, lsl r1
   15dc8:	str	r1, [r3, lr, lsl #2]
   15dcc:	and	r0, r0, #1
   15dd0:	pop	{pc}		; (ldr pc, [sp], #4)
   15dd4:	ldrdeq	fp, [r2], -r4
   15dd8:	subs	r3, r0, #0
   15ddc:	ldr	r2, [pc, #12]	; 15df0 <__assert_fail@plt+0x4938>
   15de0:	moveq	r3, r2
   15de4:	ldr	r0, [r3, #4]
   15de8:	str	r1, [r3, #4]
   15dec:	bx	lr
   15df0:	ldrdeq	fp, [r2], -r4
   15df4:	subs	r3, r0, #0
   15df8:	ldr	r0, [pc, #40]	; 15e28 <__assert_fail@plt+0x4970>
   15dfc:	moveq	r3, r0
   15e00:	mov	r0, #10
   15e04:	str	r0, [r3]
   15e08:	cmp	r2, #0
   15e0c:	cmpne	r1, #0
   15e10:	beq	15e20 <__assert_fail@plt+0x4968>
   15e14:	str	r1, [r3, #40]	; 0x28
   15e18:	str	r2, [r3, #44]	; 0x2c
   15e1c:	bx	lr
   15e20:	push	{r4, lr}
   15e24:	bl	114a0 <abort@plt>
   15e28:	ldrdeq	fp, [r2], -r4
   15e2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15e30:	sub	sp, sp, #24
   15e34:	mov	r7, r0
   15e38:	mov	r8, r1
   15e3c:	mov	r9, r2
   15e40:	mov	sl, r3
   15e44:	ldr	r4, [sp, #56]	; 0x38
   15e48:	cmp	r4, #0
   15e4c:	ldr	r3, [pc, #84]	; 15ea8 <__assert_fail@plt+0x49f0>
   15e50:	moveq	r4, r3
   15e54:	bl	11338 <__errno_location@plt>
   15e58:	mov	r5, r0
   15e5c:	ldr	r6, [r0]
   15e60:	ldr	r3, [r4, #44]	; 0x2c
   15e64:	str	r3, [sp, #16]
   15e68:	ldr	r3, [r4, #40]	; 0x28
   15e6c:	str	r3, [sp, #12]
   15e70:	add	r3, r4, #8
   15e74:	str	r3, [sp, #8]
   15e78:	ldr	r3, [r4, #4]
   15e7c:	str	r3, [sp, #4]
   15e80:	ldr	r3, [r4]
   15e84:	str	r3, [sp]
   15e88:	mov	r3, sl
   15e8c:	mov	r2, r9
   15e90:	mov	r1, r8
   15e94:	mov	r0, r7
   15e98:	bl	149fc <__assert_fail@plt+0x3544>
   15e9c:	str	r6, [r5]
   15ea0:	add	sp, sp, #24
   15ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ea8:	ldrdeq	fp, [r2], -r4
   15eac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15eb0:	sub	sp, sp, #44	; 0x2c
   15eb4:	str	r0, [sp, #28]
   15eb8:	str	r1, [sp, #32]
   15ebc:	mov	r6, r2
   15ec0:	subs	r4, r3, #0
   15ec4:	ldr	r3, [pc, #172]	; 15f78 <__assert_fail@plt+0x4ac0>
   15ec8:	moveq	r4, r3
   15ecc:	bl	11338 <__errno_location@plt>
   15ed0:	mov	r7, r0
   15ed4:	ldr	fp, [r0]
   15ed8:	ldr	r5, [r4, #4]
   15edc:	cmp	r6, #0
   15ee0:	orreq	r5, r5, #1
   15ee4:	add	r9, r4, #8
   15ee8:	ldr	r3, [r4, #44]	; 0x2c
   15eec:	str	r3, [sp, #16]
   15ef0:	ldr	r3, [r4, #40]	; 0x28
   15ef4:	str	r3, [sp, #12]
   15ef8:	str	r9, [sp, #8]
   15efc:	str	r5, [sp, #4]
   15f00:	ldr	r3, [r4]
   15f04:	str	r3, [sp]
   15f08:	ldr	r3, [sp, #32]
   15f0c:	ldr	r2, [sp, #28]
   15f10:	mov	r1, #0
   15f14:	mov	r0, r1
   15f18:	bl	149fc <__assert_fail@plt+0x3544>
   15f1c:	mov	sl, r0
   15f20:	add	r8, r0, #1
   15f24:	mov	r0, r8
   15f28:	bl	1753c <__assert_fail@plt+0x6084>
   15f2c:	str	r0, [sp, #36]	; 0x24
   15f30:	ldr	r3, [r4, #44]	; 0x2c
   15f34:	str	r3, [sp, #16]
   15f38:	ldr	r3, [r4, #40]	; 0x28
   15f3c:	str	r3, [sp, #12]
   15f40:	str	r9, [sp, #8]
   15f44:	str	r5, [sp, #4]
   15f48:	ldr	r3, [r4]
   15f4c:	str	r3, [sp]
   15f50:	ldr	r3, [sp, #32]
   15f54:	ldr	r2, [sp, #28]
   15f58:	mov	r1, r8
   15f5c:	bl	149fc <__assert_fail@plt+0x3544>
   15f60:	str	fp, [r7]
   15f64:	cmp	r6, #0
   15f68:	strne	sl, [r6]
   15f6c:	ldr	r0, [sp, #36]	; 0x24
   15f70:	add	sp, sp, #44	; 0x2c
   15f74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f78:	ldrdeq	fp, [r2], -r4
   15f7c:	push	{r4, lr}
   15f80:	mov	r3, r2
   15f84:	mov	r2, #0
   15f88:	bl	15eac <__assert_fail@plt+0x49f4>
   15f8c:	pop	{r4, pc}
   15f90:	push	{r4, r5, r6, r7, r8, lr}
   15f94:	ldr	r3, [pc, #140]	; 16028 <__assert_fail@plt+0x4b70>
   15f98:	ldr	r7, [r3]
   15f9c:	ldr	r3, [r3, #4]
   15fa0:	cmp	r3, #1
   15fa4:	ble	15fd0 <__assert_fail@plt+0x4b18>
   15fa8:	mov	r5, r7
   15fac:	mov	r4, #1
   15fb0:	ldr	r6, [pc, #112]	; 16028 <__assert_fail@plt+0x4b70>
   15fb4:	ldr	r0, [r5, #12]
   15fb8:	bl	13c70 <__assert_fail@plt+0x27b8>
   15fbc:	add	r4, r4, #1
   15fc0:	add	r5, r5, #8
   15fc4:	ldr	r3, [r6, #4]
   15fc8:	cmp	r3, r4
   15fcc:	bgt	15fb4 <__assert_fail@plt+0x4afc>
   15fd0:	ldr	r0, [r7, #4]
   15fd4:	ldr	r3, [pc, #80]	; 1602c <__assert_fail@plt+0x4b74>
   15fd8:	cmp	r0, r3
   15fdc:	beq	15ff8 <__assert_fail@plt+0x4b40>
   15fe0:	bl	13c70 <__assert_fail@plt+0x27b8>
   15fe4:	ldr	r3, [pc, #60]	; 16028 <__assert_fail@plt+0x4b70>
   15fe8:	mov	r2, #256	; 0x100
   15fec:	str	r2, [r3, #8]
   15ff0:	ldr	r2, [pc, #52]	; 1602c <__assert_fail@plt+0x4b74>
   15ff4:	str	r2, [r3, #12]
   15ff8:	ldr	r3, [pc, #48]	; 16030 <__assert_fail@plt+0x4b78>
   15ffc:	cmp	r7, r3
   16000:	beq	16018 <__assert_fail@plt+0x4b60>
   16004:	mov	r0, r7
   16008:	bl	13c70 <__assert_fail@plt+0x27b8>
   1600c:	ldr	r3, [pc, #20]	; 16028 <__assert_fail@plt+0x4b70>
   16010:	add	r2, r3, #8
   16014:	str	r2, [r3]
   16018:	mov	r2, #1
   1601c:	ldr	r3, [pc, #4]	; 16028 <__assert_fail@plt+0x4b70>
   16020:	str	r2, [r3, #4]
   16024:	pop	{r4, r5, r6, r7, r8, pc}
   16028:	andeq	fp, r2, ip, asr r1
   1602c:	ldrdeq	fp, [r2], -r4
   16030:	andeq	fp, r2, r4, ror #2
   16034:	push	{r4, lr}
   16038:	ldr	r3, [pc, #8]	; 16048 <__assert_fail@plt+0x4b90>
   1603c:	mvn	r2, #0
   16040:	bl	15b6c <__assert_fail@plt+0x46b4>
   16044:	pop	{r4, pc}
   16048:	ldrdeq	fp, [r2], -r4
   1604c:	push	{r4, lr}
   16050:	ldr	r3, [pc, #4]	; 1605c <__assert_fail@plt+0x4ba4>
   16054:	bl	15b6c <__assert_fail@plt+0x46b4>
   16058:	pop	{r4, pc}
   1605c:	ldrdeq	fp, [r2], -r4
   16060:	push	{r4, lr}
   16064:	mov	r1, r0
   16068:	mov	r0, #0
   1606c:	bl	16034 <__assert_fail@plt+0x4b7c>
   16070:	pop	{r4, pc}
   16074:	push	{r4, lr}
   16078:	mov	r2, r1
   1607c:	mov	r1, r0
   16080:	mov	r0, #0
   16084:	bl	1604c <__assert_fail@plt+0x4b94>
   16088:	pop	{r4, pc}
   1608c:	push	{r4, r5, lr}
   16090:	sub	sp, sp, #52	; 0x34
   16094:	mov	r4, r0
   16098:	mov	r5, r2
   1609c:	mov	r0, sp
   160a0:	bl	14894 <__assert_fail@plt+0x33dc>
   160a4:	mov	r3, sp
   160a8:	mvn	r2, #0
   160ac:	mov	r1, r5
   160b0:	mov	r0, r4
   160b4:	bl	15b6c <__assert_fail@plt+0x46b4>
   160b8:	add	sp, sp, #52	; 0x34
   160bc:	pop	{r4, r5, pc}
   160c0:	push	{r4, r5, r6, lr}
   160c4:	sub	sp, sp, #48	; 0x30
   160c8:	mov	r4, r0
   160cc:	mov	r5, r2
   160d0:	mov	r6, r3
   160d4:	mov	r0, sp
   160d8:	bl	14894 <__assert_fail@plt+0x33dc>
   160dc:	mov	r3, sp
   160e0:	mov	r2, r6
   160e4:	mov	r1, r5
   160e8:	mov	r0, r4
   160ec:	bl	15b6c <__assert_fail@plt+0x46b4>
   160f0:	add	sp, sp, #48	; 0x30
   160f4:	pop	{r4, r5, r6, pc}
   160f8:	push	{r4, lr}
   160fc:	mov	r2, r1
   16100:	mov	r1, r0
   16104:	mov	r0, #0
   16108:	bl	1608c <__assert_fail@plt+0x4bd4>
   1610c:	pop	{r4, pc}
   16110:	push	{r4, lr}
   16114:	mov	r3, r2
   16118:	mov	r2, r1
   1611c:	mov	r1, r0
   16120:	mov	r0, #0
   16124:	bl	160c0 <__assert_fail@plt+0x4c08>
   16128:	pop	{r4, pc}
   1612c:	push	{r4, r5, r6, lr}
   16130:	sub	sp, sp, #48	; 0x30
   16134:	mov	r4, r0
   16138:	mov	r5, r1
   1613c:	mov	r6, r2
   16140:	mov	ip, sp
   16144:	ldr	lr, [pc, #64]	; 1618c <__assert_fail@plt+0x4cd4>
   16148:	ldm	lr!, {r0, r1, r2, r3}
   1614c:	stmia	ip!, {r0, r1, r2, r3}
   16150:	ldm	lr!, {r0, r1, r2, r3}
   16154:	stmia	ip!, {r0, r1, r2, r3}
   16158:	ldm	lr, {r0, r1, r2, r3}
   1615c:	stm	ip, {r0, r1, r2, r3}
   16160:	mov	r2, #1
   16164:	mov	r1, r6
   16168:	mov	r0, sp
   1616c:	bl	15d98 <__assert_fail@plt+0x48e0>
   16170:	mov	r3, sp
   16174:	mov	r2, r5
   16178:	mov	r1, r4
   1617c:	mov	r0, #0
   16180:	bl	15b6c <__assert_fail@plt+0x46b4>
   16184:	add	sp, sp, #48	; 0x30
   16188:	pop	{r4, r5, r6, pc}
   1618c:	ldrdeq	fp, [r2], -r4
   16190:	push	{r4, lr}
   16194:	mov	r2, r1
   16198:	mvn	r1, #0
   1619c:	bl	1612c <__assert_fail@plt+0x4c74>
   161a0:	pop	{r4, pc}
   161a4:	push	{r4, lr}
   161a8:	mov	r1, #58	; 0x3a
   161ac:	bl	16190 <__assert_fail@plt+0x4cd8>
   161b0:	pop	{r4, pc}
   161b4:	push	{r4, lr}
   161b8:	mov	r2, #58	; 0x3a
   161bc:	bl	1612c <__assert_fail@plt+0x4c74>
   161c0:	pop	{r4, pc}
   161c4:	push	{r4, r5, lr}
   161c8:	sub	sp, sp, #100	; 0x64
   161cc:	mov	r4, r0
   161d0:	mov	r5, r2
   161d4:	mov	r0, sp
   161d8:	bl	14894 <__assert_fail@plt+0x33dc>
   161dc:	add	lr, sp, #48	; 0x30
   161e0:	mov	ip, sp
   161e4:	ldm	ip!, {r0, r1, r2, r3}
   161e8:	stmia	lr!, {r0, r1, r2, r3}
   161ec:	ldm	ip!, {r0, r1, r2, r3}
   161f0:	stmia	lr!, {r0, r1, r2, r3}
   161f4:	ldm	ip, {r0, r1, r2, r3}
   161f8:	stm	lr, {r0, r1, r2, r3}
   161fc:	mov	r2, #1
   16200:	mov	r1, #58	; 0x3a
   16204:	add	r0, sp, #48	; 0x30
   16208:	bl	15d98 <__assert_fail@plt+0x48e0>
   1620c:	add	r3, sp, #48	; 0x30
   16210:	mvn	r2, #0
   16214:	mov	r1, r5
   16218:	mov	r0, r4
   1621c:	bl	15b6c <__assert_fail@plt+0x46b4>
   16220:	add	sp, sp, #100	; 0x64
   16224:	pop	{r4, r5, pc}
   16228:	push	{r4, r5, r6, r7, lr}
   1622c:	sub	sp, sp, #52	; 0x34
   16230:	mov	r4, r0
   16234:	mov	r6, r1
   16238:	mov	r7, r2
   1623c:	mov	r5, r3
   16240:	mov	ip, sp
   16244:	ldr	lr, [pc, #64]	; 1628c <__assert_fail@plt+0x4dd4>
   16248:	ldm	lr!, {r0, r1, r2, r3}
   1624c:	stmia	ip!, {r0, r1, r2, r3}
   16250:	ldm	lr!, {r0, r1, r2, r3}
   16254:	stmia	ip!, {r0, r1, r2, r3}
   16258:	ldm	lr, {r0, r1, r2, r3}
   1625c:	stm	ip, {r0, r1, r2, r3}
   16260:	mov	r2, r7
   16264:	mov	r1, r6
   16268:	mov	r0, sp
   1626c:	bl	15df4 <__assert_fail@plt+0x493c>
   16270:	mov	r3, sp
   16274:	ldr	r2, [sp, #72]	; 0x48
   16278:	mov	r1, r5
   1627c:	mov	r0, r4
   16280:	bl	15b6c <__assert_fail@plt+0x46b4>
   16284:	add	sp, sp, #52	; 0x34
   16288:	pop	{r4, r5, r6, r7, pc}
   1628c:	ldrdeq	fp, [r2], -r4
   16290:	push	{lr}		; (str lr, [sp, #-4]!)
   16294:	sub	sp, sp, #12
   16298:	mvn	ip, #0
   1629c:	str	ip, [sp]
   162a0:	bl	16228 <__assert_fail@plt+0x4d70>
   162a4:	add	sp, sp, #12
   162a8:	pop	{pc}		; (ldr pc, [sp], #4)
   162ac:	push	{r4, lr}
   162b0:	mov	r3, r2
   162b4:	mov	r2, r1
   162b8:	mov	r1, r0
   162bc:	mov	r0, #0
   162c0:	bl	16290 <__assert_fail@plt+0x4dd8>
   162c4:	pop	{r4, pc}
   162c8:	push	{lr}		; (str lr, [sp, #-4]!)
   162cc:	sub	sp, sp, #12
   162d0:	str	r3, [sp]
   162d4:	mov	r3, r2
   162d8:	mov	r2, r1
   162dc:	mov	r1, r0
   162e0:	mov	r0, #0
   162e4:	bl	16228 <__assert_fail@plt+0x4d70>
   162e8:	add	sp, sp, #12
   162ec:	pop	{pc}		; (ldr pc, [sp], #4)
   162f0:	push	{r4, lr}
   162f4:	ldr	r3, [pc, #4]	; 16300 <__assert_fail@plt+0x4e48>
   162f8:	bl	15b6c <__assert_fail@plt+0x46b4>
   162fc:	pop	{r4, pc}
   16300:	andeq	fp, r2, ip, ror #2
   16304:	push	{r4, lr}
   16308:	mov	r2, r1
   1630c:	mov	r1, r0
   16310:	mov	r0, #0
   16314:	bl	162f0 <__assert_fail@plt+0x4e38>
   16318:	pop	{r4, pc}
   1631c:	push	{r4, lr}
   16320:	mvn	r2, #0
   16324:	bl	162f0 <__assert_fail@plt+0x4e38>
   16328:	pop	{r4, pc}
   1632c:	push	{r4, lr}
   16330:	mov	r1, r0
   16334:	mov	r0, #0
   16338:	bl	1631c <__assert_fail@plt+0x4e64>
   1633c:	pop	{r4, pc}
   16340:	push	{r4, r5, r6, lr}
   16344:	mov	r4, r0
   16348:	mov	r0, #24
   1634c:	bl	17514 <__assert_fail@plt+0x605c>
   16350:	str	r4, [r0]
   16354:	mov	r4, #0
   16358:	mov	r5, #0
   1635c:	strd	r4, [r0, #16]
   16360:	strd	r4, [r0, #8]
   16364:	pop	{r4, r5, r6, pc}
   16368:	push	{r4, lr}
   1636c:	bl	16648 <__assert_fail@plt+0x5190>
   16370:	cmp	r0, #0
   16374:	beq	16380 <__assert_fail@plt+0x4ec8>
   16378:	bl	16340 <__assert_fail@plt+0x4e88>
   1637c:	pop	{r4, pc}
   16380:	mov	r0, #0
   16384:	pop	{r4, pc}
   16388:	ldr	r0, [r0]
   1638c:	bx	lr
   16390:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16394:	sub	sp, sp, #60	; 0x3c
   16398:	str	r0, [sp, #44]	; 0x2c
   1639c:	strd	r2, [sp, #8]
   163a0:	mov	r3, r0
   163a4:	ldr	r1, [r0]
   163a8:	str	r1, [sp, #40]	; 0x28
   163ac:	ldrd	r0, [r0, #8]
   163b0:	strd	r0, [sp]
   163b4:	ldrd	r6, [r3, #16]
   163b8:	ldrd	r2, [sp, #8]
   163bc:	adds	r2, r2, #1
   163c0:	adc	r3, r3, #0
   163c4:	strd	r2, [sp, #24]
   163c8:	b	16444 <__assert_fail@plt+0x4f8c>
   163cc:	ldrd	r2, [sp, #8]
   163d0:	cmp	r7, r3
   163d4:	cmpeq	r6, r2
   163d8:	beq	164f0 <__assert_fail@plt+0x5038>
   163dc:	ldrd	r2, [sp, #8]
   163e0:	subs	r2, r6, r2
   163e4:	sbc	r3, r7, r3
   163e8:	mov	r0, r2
   163ec:	mov	r1, r3
   163f0:	strd	r0, [sp, #32]
   163f4:	ldrd	r2, [sp, #24]
   163f8:	bl	19034 <__assert_fail@plt+0x7b7c>
   163fc:	strd	r2, [sp, #16]
   16400:	ldrd	r2, [sp, #24]
   16404:	ldrd	r0, [sp]
   16408:	bl	19034 <__assert_fail@plt+0x7b7c>
   1640c:	ldrd	r0, [sp, #16]
   16410:	subs	r0, r6, r0
   16414:	sbc	r1, r7, r1
   16418:	mov	r6, r0
   1641c:	mov	r7, r1
   16420:	ldrd	r0, [sp]
   16424:	cmp	r1, r7
   16428:	cmpeq	r0, r6
   1642c:	bls	16510 <__assert_fail@plt+0x5058>
   16430:	ldrd	r6, [sp, #16]
   16434:	subs	r6, r6, #1
   16438:	sbc	r7, r7, #0
   1643c:	str	r2, [sp]
   16440:	str	r3, [sp, #4]
   16444:	ldrd	r2, [sp, #8]
   16448:	cmp	r7, r3
   1644c:	cmpeq	r6, r2
   16450:	bcs	163cc <__assert_fail@plt+0x4f14>
   16454:	mov	r0, r6
   16458:	mov	r1, r7
   1645c:	mov	r2, #0
   16460:	mov	ip, r2
   16464:	ldrd	r2, [sp, #8]
   16468:	lsl	r5, r1, #8
   1646c:	orr	r5, r5, r0, lsr #24
   16470:	lsl	r4, r0, #8
   16474:	adds	r0, r4, #255	; 0xff
   16478:	adc	r1, r5, #0
   1647c:	add	ip, ip, #1
   16480:	cmp	r3, r1
   16484:	cmpeq	r2, r0
   16488:	bhi	16468 <__assert_fail@plt+0x4fb0>
   1648c:	mov	r2, ip
   16490:	add	r1, sp, #48	; 0x30
   16494:	ldr	r0, [sp, #40]	; 0x28
   16498:	bl	16794 <__assert_fail@plt+0x52dc>
   1649c:	add	r3, sp, #48	; 0x30
   164a0:	mov	ip, r3
   164a4:	ldrd	r2, [sp]
   164a8:	ldrd	r0, [sp, #8]
   164ac:	lsl	fp, r3, #8
   164b0:	orr	fp, fp, r2, lsr #24
   164b4:	lsl	sl, r2, #8
   164b8:	ldrb	r2, [ip], #1
   164bc:	mov	r3, #0
   164c0:	adds	r2, r2, sl
   164c4:	adc	r3, r3, fp
   164c8:	lsl	r9, r7, #8
   164cc:	orr	r9, r9, r6, lsr #24
   164d0:	lsl	r8, r6, #8
   164d4:	adds	r6, r8, #255	; 0xff
   164d8:	adc	r7, r9, #0
   164dc:	cmp	r1, r7
   164e0:	cmpeq	r0, r6
   164e4:	bhi	164ac <__assert_fail@plt+0x4ff4>
   164e8:	strd	r2, [sp]
   164ec:	b	163cc <__assert_fail@plt+0x4f14>
   164f0:	mov	r2, #0
   164f4:	mov	r3, #0
   164f8:	ldr	r1, [sp, #44]	; 0x2c
   164fc:	strd	r2, [r1, #16]
   16500:	strd	r2, [r1, #8]
   16504:	ldrd	r0, [sp]
   16508:	add	sp, sp, #60	; 0x3c
   1650c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16510:	mov	r7, r2
   16514:	mov	r8, r3
   16518:	ldrd	r4, [sp, #24]
   1651c:	mov	r2, r4
   16520:	mov	r3, r5
   16524:	bl	19034 <__assert_fail@plt+0x7b7c>
   16528:	ldr	r6, [sp, #44]	; 0x2c
   1652c:	strd	r0, [r6, #8]
   16530:	mov	r2, r4
   16534:	mov	r3, r5
   16538:	ldrd	r0, [sp, #32]
   1653c:	bl	19034 <__assert_fail@plt+0x7b7c>
   16540:	strd	r0, [r6, #16]
   16544:	str	r7, [sp]
   16548:	str	r8, [sp, #4]
   1654c:	b	16504 <__assert_fail@plt+0x504c>
   16550:	push	{r4, lr}
   16554:	mov	r4, r0
   16558:	mvn	r2, #0
   1655c:	mov	r1, #24
   16560:	bl	113ec <__explicit_bzero_chk@plt>
   16564:	mov	r0, r4
   16568:	bl	13c70 <__assert_fail@plt+0x27b8>
   1656c:	pop	{r4, pc}
   16570:	push	{r4, r5, r6, r7, r8, lr}
   16574:	mov	r5, r0
   16578:	ldr	r0, [r0]
   1657c:	bl	168cc <__assert_fail@plt+0x5414>
   16580:	mov	r6, r0
   16584:	bl	11338 <__errno_location@plt>
   16588:	mov	r4, r0
   1658c:	ldr	r7, [r0]
   16590:	mov	r0, r5
   16594:	bl	16550 <__assert_fail@plt+0x5098>
   16598:	str	r7, [r4]
   1659c:	mov	r0, r6
   165a0:	pop	{r4, r5, r6, r7, r8, pc}
   165a4:	push	{r7, lr}
   165a8:	subs	r5, r0, #0
   165ac:	beq	165f8 <__assert_fail@plt+0x5140>
   165b0:	ldr	r3, [pc, #68]	; 165fc <__assert_fail@plt+0x5144>
   165b4:	ldr	r6, [r3]
   165b8:	bl	11338 <__errno_location@plt>
   165bc:	ldr	r4, [r0]
   165c0:	cmp	r4, #0
   165c4:	mov	r2, #5
   165c8:	ldreq	r1, [pc, #48]	; 16600 <__assert_fail@plt+0x5148>
   165cc:	ldrne	r1, [pc, #48]	; 16604 <__assert_fail@plt+0x514c>
   165d0:	mov	r0, #0
   165d4:	bl	111e8 <dcgettext@plt>
   165d8:	mov	r7, r0
   165dc:	mov	r0, r5
   165e0:	bl	1632c <__assert_fail@plt+0x4e74>
   165e4:	mov	r3, r0
   165e8:	mov	r2, r7
   165ec:	mov	r1, r4
   165f0:	mov	r0, r6
   165f4:	bl	1129c <error@plt>
   165f8:	bl	114a0 <abort@plt>
   165fc:	andeq	fp, r2, r8, asr r1
   16600:			; <UNDEFINED> instruction: 0x0001a2bc
   16604:	andeq	sl, r1, ip, asr #5
   16608:	push	{r4, r5, r6, lr}
   1660c:	mov	r4, r0
   16610:	ldr	r5, [r0]
   16614:	mvn	r2, #0
   16618:	ldr	r1, [pc, #36]	; 16644 <__assert_fail@plt+0x518c>
   1661c:	bl	113ec <__explicit_bzero_chk@plt>
   16620:	mov	r0, r4
   16624:	bl	13c70 <__assert_fail@plt+0x27b8>
   16628:	cmp	r5, #0
   1662c:	beq	1663c <__assert_fail@plt+0x5184>
   16630:	mov	r0, r5
   16634:	bl	18318 <__assert_fail@plt+0x6e60>
   16638:	pop	{r4, r5, r6, pc}
   1663c:	mov	r0, #0
   16640:	pop	{r4, r5, r6, pc}
   16644:	andeq	r0, r0, ip, lsl r8
   16648:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1664c:	subs	r5, r1, #0
   16650:	beq	166b0 <__assert_fail@plt+0x51f8>
   16654:	mov	r4, r0
   16658:	cmp	r0, #0
   1665c:	beq	16728 <__assert_fail@plt+0x5270>
   16660:	ldr	r1, [pc, #272]	; 16778 <__assert_fail@plt+0x52c0>
   16664:	bl	18424 <__assert_fail@plt+0x6f6c>
   16668:	subs	r7, r0, #0
   1666c:	beq	16720 <__assert_fail@plt+0x5268>
   16670:	ldr	r0, [pc, #260]	; 1677c <__assert_fail@plt+0x52c4>
   16674:	bl	17514 <__assert_fail@plt+0x605c>
   16678:	mov	r6, r0
   1667c:	str	r7, [r0]
   16680:	ldr	r3, [pc, #248]	; 16780 <__assert_fail@plt+0x52c8>
   16684:	str	r3, [r0, #4]
   16688:	str	r4, [r0, #8]
   1668c:	cmp	r5, #2048	; 0x800
   16690:	movcc	r3, r5
   16694:	movcs	r3, #2048	; 0x800
   16698:	mov	r2, #0
   1669c:	add	r1, r0, #12
   166a0:	mov	r0, r7
   166a4:	bl	1135c <setvbuf@plt>
   166a8:	mov	r0, r6
   166ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   166b0:	ldr	r0, [pc, #196]	; 1677c <__assert_fail@plt+0x52c4>
   166b4:	bl	17514 <__assert_fail@plt+0x605c>
   166b8:	mov	r6, r0
   166bc:	mov	r3, #0
   166c0:	str	r3, [r0]
   166c4:	ldr	r2, [pc, #180]	; 16780 <__assert_fail@plt+0x52c8>
   166c8:	str	r2, [r0, #4]
   166cc:	str	r3, [r0, #8]
   166d0:	b	166a8 <__assert_fail@plt+0x51f0>
   166d4:	cmp	r4, r5
   166d8:	bcs	1676c <__assert_fail@plt+0x52b4>
   166dc:	mov	r2, r7
   166e0:	sub	r1, r5, r4
   166e4:	mov	r0, r4
   166e8:	bl	1144c <getrandom@plt>
   166ec:	cmp	r0, #0
   166f0:	addge	r4, r4, r0
   166f4:	bge	166d4 <__assert_fail@plt+0x521c>
   166f8:	bl	11338 <__errno_location@plt>
   166fc:	mov	r8, r0
   16700:	ldr	sl, [r0]
   16704:	cmp	sl, #4
   16708:	beq	166d4 <__assert_fail@plt+0x521c>
   1670c:	mov	r0, r6
   16710:	bl	16608 <__assert_fail@plt+0x5150>
   16714:	str	sl, [r8]
   16718:	mov	r6, #0
   1671c:	b	166a8 <__assert_fail@plt+0x51f0>
   16720:	mov	r6, #0
   16724:	b	166a8 <__assert_fail@plt+0x51f0>
   16728:	ldr	r0, [pc, #76]	; 1677c <__assert_fail@plt+0x52c4>
   1672c:	bl	17514 <__assert_fail@plt+0x605c>
   16730:	mov	r6, r0
   16734:	mov	r3, #0
   16738:	str	r3, [r0]
   1673c:	ldr	r2, [pc, #60]	; 16780 <__assert_fail@plt+0x52c8>
   16740:	str	r2, [r0, #4]
   16744:	str	r3, [r0, #8]
   16748:	str	r3, [r0, #12]
   1674c:	add	r9, r0, #16
   16750:	cmp	r5, #1024	; 0x400
   16754:	addls	r5, r9, r5
   16758:	addhi	r5, r9, #1024	; 0x400
   1675c:	cmp	r9, r5
   16760:	movcc	r4, r9
   16764:	movcc	r7, #0
   16768:	bcc	166dc <__assert_fail@plt+0x5224>
   1676c:	mov	r0, r9
   16770:	bl	16b04 <__assert_fail@plt+0x564c>
   16774:	b	166a8 <__assert_fail@plt+0x51f0>
   16778:	ldrdeq	sl, [r1], -ip
   1677c:	andeq	r0, r0, ip, lsl r8
   16780:	andeq	r6, r1, r4, lsr #11
   16784:	str	r1, [r0, #4]
   16788:	bx	lr
   1678c:	str	r1, [r0, #8]
   16790:	bx	lr
   16794:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16798:	mov	r6, r0
   1679c:	mov	r5, r1
   167a0:	mov	r4, r2
   167a4:	ldr	r3, [r0]
   167a8:	cmp	r3, #0
   167ac:	beq	16808 <__assert_fail@plt+0x5350>
   167b0:	mov	r8, #1
   167b4:	ldr	r3, [r6]
   167b8:	mov	r2, r4
   167bc:	mov	r1, r8
   167c0:	mov	r0, r5
   167c4:	bl	11440 <fread_unlocked@plt>
   167c8:	mov	r7, r0
   167cc:	bl	11338 <__errno_location@plt>
   167d0:	ldr	r3, [r0]
   167d4:	add	r5, r5, r7
   167d8:	subs	r4, r4, r7
   167dc:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167e0:	ldr	r2, [r6]
   167e4:	ldr	r2, [r2]
   167e8:	and	r2, r2, #32
   167ec:	cmp	r2, #0
   167f0:	moveq	r3, #0
   167f4:	str	r3, [r0]
   167f8:	ldr	r3, [r6, #4]
   167fc:	ldr	r0, [r6, #8]
   16800:	blx	r3
   16804:	b	167b4 <__assert_fail@plt+0x52fc>
   16808:	ldr	fp, [r0, #12]
   1680c:	cmp	r2, fp
   16810:	bls	16830 <__assert_fail@plt+0x5378>
   16814:	add	r9, r0, #12
   16818:	add	r9, r9, #1040	; 0x410
   1681c:	ldr	r8, [pc, #164]	; 168c8 <__assert_fail@plt+0x5410>
   16820:	add	r7, r0, #16
   16824:	mov	sl, #1024	; 0x400
   16828:	b	16878 <__assert_fail@plt+0x53c0>
   1682c:	mov	fp, #1024	; 0x400
   16830:	add	r1, r6, #12
   16834:	sub	r1, r1, fp
   16838:	mov	r2, r4
   1683c:	add	r1, r1, #2064	; 0x810
   16840:	mov	r0, r5
   16844:	bl	11194 <memcpy@plt>
   16848:	sub	r4, fp, r4
   1684c:	str	r4, [r6, #12]
   16850:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16854:	mov	r3, #0
   16858:	str	r3, [r6, #12]
   1685c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16860:	mov	r1, r9
   16864:	mov	r0, r7
   16868:	bl	168d8 <__assert_fail@plt+0x5420>
   1686c:	mov	fp, sl
   16870:	cmp	r4, #1024	; 0x400
   16874:	bls	1682c <__assert_fail@plt+0x5374>
   16878:	rsb	r1, fp, #1024	; 0x400
   1687c:	mov	r2, fp
   16880:	add	r1, r9, r1
   16884:	mov	r0, r5
   16888:	bl	11194 <memcpy@plt>
   1688c:	add	r5, r5, fp
   16890:	sub	r4, r4, fp
   16894:	tst	r5, #3
   16898:	bne	16860 <__assert_fail@plt+0x53a8>
   1689c:	cmp	r4, r8
   168a0:	bls	16860 <__assert_fail@plt+0x53a8>
   168a4:	mov	r1, r5
   168a8:	mov	r0, r7
   168ac:	bl	168d8 <__assert_fail@plt+0x5420>
   168b0:	add	r5, r5, #1024	; 0x400
   168b4:	subs	r4, r4, #1024	; 0x400
   168b8:	beq	16854 <__assert_fail@plt+0x539c>
   168bc:	cmp	r4, r8
   168c0:	bhi	168a4 <__assert_fail@plt+0x53ec>
   168c4:	b	16860 <__assert_fail@plt+0x53a8>
   168c8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   168cc:	push	{r4, lr}
   168d0:	bl	16608 <__assert_fail@plt+0x5150>
   168d4:	pop	{r4, pc}
   168d8:	push	{r4, r5, r6, r7, r8, lr}
   168dc:	ldr	r3, [r0, #1024]	; 0x400
   168e0:	ldr	r4, [r0, #1028]	; 0x404
   168e4:	ldr	r2, [r0, #1032]	; 0x408
   168e8:	add	r2, r2, #1
   168ec:	str	r2, [r0, #1032]	; 0x408
   168f0:	add	r4, r4, r2
   168f4:	mov	ip, r0
   168f8:	add	r1, r1, #16
   168fc:	add	lr, r0, #16
   16900:	add	r7, r0, #512	; 0x200
   16904:	eor	r3, r3, r3, lsl #13
   16908:	mov	r2, lr
   1690c:	ldr	r5, [lr, #496]	; 0x1f0
   16910:	add	r3, r3, r5
   16914:	ldr	r5, [lr, #-16]
   16918:	and	r6, r5, #1020	; 0x3fc
   1691c:	ldr	r6, [ip, r6]
   16920:	add	r6, r3, r6
   16924:	add	r4, r6, r4
   16928:	str	r4, [lr, #-16]
   1692c:	lsr	r4, r4, #8
   16930:	and	r4, r4, #1020	; 0x3fc
   16934:	ldr	r8, [ip, r4]
   16938:	add	r8, r5, r8
   1693c:	str	r8, [r1, #-16]
   16940:	eor	r3, r3, r3, lsr #6
   16944:	ldr	r4, [lr, #500]	; 0x1f4
   16948:	add	r3, r3, r4
   1694c:	ldr	r4, [lr, #-12]
   16950:	and	r5, r4, #1020	; 0x3fc
   16954:	ldr	r5, [ip, r5]
   16958:	add	r5, r3, r5
   1695c:	add	r5, r5, r8
   16960:	str	r5, [lr, #-12]
   16964:	lsr	r5, r5, #8
   16968:	and	r5, r5, #1020	; 0x3fc
   1696c:	ldr	r8, [ip, r5]
   16970:	add	r8, r4, r8
   16974:	str	r8, [r1, #-12]
   16978:	eor	r3, r3, r3, lsl #2
   1697c:	ldr	r4, [lr, #504]	; 0x1f8
   16980:	add	r3, r3, r4
   16984:	ldr	r5, [lr, #-8]
   16988:	and	r4, r5, #1020	; 0x3fc
   1698c:	ldr	r4, [ip, r4]
   16990:	add	r4, r3, r4
   16994:	add	r4, r4, r8
   16998:	str	r4, [lr, #-8]
   1699c:	lsr	r4, r4, #8
   169a0:	and	r4, r4, #1020	; 0x3fc
   169a4:	ldr	r8, [ip, r4]
   169a8:	add	r8, r5, r8
   169ac:	str	r8, [r1, #-8]
   169b0:	eor	r3, r3, r3, lsr #16
   169b4:	ldr	r4, [lr, #508]	; 0x1fc
   169b8:	add	r3, r3, r4
   169bc:	ldr	r4, [lr, #-4]
   169c0:	and	r5, r4, #1020	; 0x3fc
   169c4:	ldr	r5, [ip, r5]
   169c8:	add	r5, r3, r5
   169cc:	add	r5, r5, r8
   169d0:	str	r5, [lr, #-4]
   169d4:	lsr	r5, r5, #8
   169d8:	and	r5, r5, #1020	; 0x3fc
   169dc:	ldr	r5, [ip, r5]
   169e0:	add	r4, r4, r5
   169e4:	str	r4, [r1, #-4]
   169e8:	add	r1, r1, #16
   169ec:	add	lr, lr, #16
   169f0:	cmp	r2, r7
   169f4:	bcc	16904 <__assert_fail@plt+0x544c>
   169f8:	mov	lr, r1
   169fc:	add	r2, r2, #16
   16a00:	add	r6, r0, #1024	; 0x400
   16a04:	eor	r3, r3, r3, lsl #13
   16a08:	mov	r5, r2
   16a0c:	ldr	r1, [r2, #-528]	; 0xfffffdf0
   16a10:	add	r3, r3, r1
   16a14:	ldr	r1, [r2, #-16]
   16a18:	and	r7, r1, #1020	; 0x3fc
   16a1c:	ldr	r7, [ip, r7]
   16a20:	add	r7, r3, r7
   16a24:	add	r4, r7, r4
   16a28:	str	r4, [r2, #-16]
   16a2c:	lsr	r4, r4, #8
   16a30:	and	r4, r4, #1020	; 0x3fc
   16a34:	ldr	r7, [ip, r4]
   16a38:	add	r7, r1, r7
   16a3c:	str	r7, [lr, #-16]
   16a40:	eor	r3, r3, r3, lsr #6
   16a44:	ldr	r1, [r2, #-524]	; 0xfffffdf4
   16a48:	add	r3, r3, r1
   16a4c:	ldr	r4, [r2, #-12]
   16a50:	and	r1, r4, #1020	; 0x3fc
   16a54:	ldr	r1, [ip, r1]
   16a58:	add	r1, r3, r1
   16a5c:	add	r1, r1, r7
   16a60:	str	r1, [r2, #-12]
   16a64:	lsr	r1, r1, #8
   16a68:	and	r1, r1, #1020	; 0x3fc
   16a6c:	ldr	r8, [ip, r1]
   16a70:	add	r8, r4, r8
   16a74:	str	r8, [lr, #-12]
   16a78:	eor	r3, r3, r3, lsl #2
   16a7c:	ldr	r1, [r2, #-520]	; 0xfffffdf8
   16a80:	add	r3, r3, r1
   16a84:	ldr	r1, [r2, #-8]
   16a88:	and	r4, r1, #1020	; 0x3fc
   16a8c:	ldr	r4, [ip, r4]
   16a90:	add	r4, r3, r4
   16a94:	add	r4, r4, r8
   16a98:	str	r4, [r2, #-8]
   16a9c:	lsr	r4, r4, #8
   16aa0:	and	r4, r4, #1020	; 0x3fc
   16aa4:	ldr	r7, [ip, r4]
   16aa8:	add	r7, r1, r7
   16aac:	str	r7, [lr, #-8]
   16ab0:	eor	r3, r3, r3, lsr #16
   16ab4:	ldr	r1, [r2, #-516]	; 0xfffffdfc
   16ab8:	add	r3, r3, r1
   16abc:	ldr	r4, [r2, #-4]
   16ac0:	and	r1, r4, #1020	; 0x3fc
   16ac4:	ldr	r1, [ip, r1]
   16ac8:	add	r1, r3, r1
   16acc:	add	r1, r1, r7
   16ad0:	str	r1, [r2, #-4]
   16ad4:	lsr	r1, r1, #8
   16ad8:	and	r1, r1, #1020	; 0x3fc
   16adc:	ldr	r1, [ip, r1]
   16ae0:	add	r4, r4, r1
   16ae4:	str	r4, [lr, #-4]
   16ae8:	add	lr, lr, #16
   16aec:	cmp	r2, r6
   16af0:	add	r2, r2, #16
   16af4:	bcc	16a04 <__assert_fail@plt+0x554c>
   16af8:	str	r3, [r0, #1024]	; 0x400
   16afc:	str	r4, [r0, #1028]	; 0x404
   16b00:	pop	{r4, r5, r6, r7, r8, pc}
   16b04:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16b08:	mov	r1, r0
   16b0c:	add	r9, r0, #1024	; 0x400
   16b10:	mov	r2, r0
   16b14:	ldr	r6, [pc, #452]	; 16ce0 <__assert_fail@plt+0x5828>
   16b18:	ldr	r5, [pc, #452]	; 16ce4 <__assert_fail@plt+0x582c>
   16b1c:	ldr	r4, [pc, #452]	; 16ce8 <__assert_fail@plt+0x5830>
   16b20:	ldr	lr, [pc, #452]	; 16cec <__assert_fail@plt+0x5834>
   16b24:	ldr	ip, [pc, #452]	; 16cf0 <__assert_fail@plt+0x5838>
   16b28:	ldr	r8, [pc, #452]	; 16cf4 <__assert_fail@plt+0x583c>
   16b2c:	ldr	r7, [pc, #452]	; 16cf8 <__assert_fail@plt+0x5840>
   16b30:	ldr	r3, [pc, #452]	; 16cfc <__assert_fail@plt+0x5844>
   16b34:	ldr	sl, [r2]
   16b38:	add	r3, r3, sl
   16b3c:	ldr	sl, [r2, #4]
   16b40:	add	r7, r7, sl
   16b44:	ldr	sl, [r2, #8]
   16b48:	add	r8, r8, sl
   16b4c:	eor	r3, r3, r7, lsl #11
   16b50:	ldr	sl, [r2, #12]
   16b54:	add	sl, r3, sl
   16b58:	add	ip, sl, ip
   16b5c:	add	r7, r7, r8
   16b60:	eor	r7, r7, r8, lsr #2
   16b64:	ldr	sl, [r2, #16]
   16b68:	add	sl, r7, sl
   16b6c:	add	lr, sl, lr
   16b70:	add	r8, r8, ip
   16b74:	eor	r8, r8, ip, lsl #8
   16b78:	ldr	sl, [r2, #20]
   16b7c:	add	sl, r8, sl
   16b80:	add	r4, sl, r4
   16b84:	add	ip, ip, lr
   16b88:	eor	ip, ip, lr, lsr #16
   16b8c:	ldr	sl, [r2, #24]
   16b90:	add	sl, ip, sl
   16b94:	add	r5, sl, r5
   16b98:	add	lr, lr, r4
   16b9c:	eor	lr, lr, r4, lsl #10
   16ba0:	ldr	sl, [r2, #28]
   16ba4:	add	sl, lr, sl
   16ba8:	add	r6, sl, r6
   16bac:	add	r4, r4, r5
   16bb0:	eor	r4, r4, r5, lsr #4
   16bb4:	add	r3, r3, r4
   16bb8:	add	r5, r5, r6
   16bbc:	eor	r5, r5, r6, lsl #8
   16bc0:	add	r7, r7, r5
   16bc4:	add	r6, r6, r3
   16bc8:	eor	r6, r6, r3, lsr #9
   16bcc:	add	r8, r8, r6
   16bd0:	add	r3, r3, r7
   16bd4:	str	r3, [r2]
   16bd8:	str	r7, [r2, #4]
   16bdc:	str	r8, [r2, #8]
   16be0:	str	ip, [r2, #12]
   16be4:	str	lr, [r2, #16]
   16be8:	str	r4, [r2, #20]
   16bec:	str	r5, [r2, #24]
   16bf0:	str	r6, [r2, #28]
   16bf4:	add	r2, r2, #32
   16bf8:	cmp	r2, r9
   16bfc:	bne	16b34 <__assert_fail@plt+0x567c>
   16c00:	ldr	r9, [r1]
   16c04:	add	r3, r3, r9
   16c08:	ldr	r9, [r1, #4]
   16c0c:	add	r7, r7, r9
   16c10:	ldr	r9, [r1, #8]
   16c14:	add	r8, r8, r9
   16c18:	eor	r3, r3, r7, lsl #11
   16c1c:	ldr	r9, [r1, #12]
   16c20:	add	r9, r3, r9
   16c24:	add	ip, r9, ip
   16c28:	add	r7, r7, r8
   16c2c:	eor	r7, r7, r8, lsr #2
   16c30:	ldr	r9, [r1, #16]
   16c34:	add	r9, r7, r9
   16c38:	add	lr, r9, lr
   16c3c:	add	r8, r8, ip
   16c40:	eor	r8, r8, ip, lsl #8
   16c44:	ldr	r9, [r1, #20]
   16c48:	add	r9, r8, r9
   16c4c:	add	r4, r9, r4
   16c50:	add	ip, ip, lr
   16c54:	eor	ip, ip, lr, lsr #16
   16c58:	ldr	r9, [r1, #24]
   16c5c:	add	r9, ip, r9
   16c60:	add	r5, r9, r5
   16c64:	add	lr, lr, r4
   16c68:	eor	lr, lr, r4, lsl #10
   16c6c:	ldr	r9, [r1, #28]
   16c70:	add	r9, lr, r9
   16c74:	add	r6, r9, r6
   16c78:	add	r4, r4, r5
   16c7c:	eor	r4, r4, r5, lsr #4
   16c80:	add	r3, r3, r4
   16c84:	add	r5, r5, r6
   16c88:	eor	r5, r5, r6, lsl #8
   16c8c:	add	r7, r7, r5
   16c90:	add	r6, r6, r3
   16c94:	eor	r6, r6, r3, lsr #9
   16c98:	add	r8, r8, r6
   16c9c:	add	r3, r3, r7
   16ca0:	str	r3, [r1]
   16ca4:	str	r7, [r1, #4]
   16ca8:	str	r8, [r1, #8]
   16cac:	str	ip, [r1, #12]
   16cb0:	str	lr, [r1, #16]
   16cb4:	str	r4, [r1, #20]
   16cb8:	str	r5, [r1, #24]
   16cbc:	str	r6, [r1, #28]
   16cc0:	add	r1, r1, #32
   16cc4:	cmp	r2, r1
   16cc8:	bne	16c00 <__assert_fail@plt+0x5748>
   16ccc:	mov	r3, #0
   16cd0:	str	r3, [r0, #1032]	; 0x408
   16cd4:	str	r3, [r0, #1028]	; 0x404
   16cd8:	str	r3, [r0, #1024]	; 0x400
   16cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16ce0:	rsbcc	r9, r0, r9, lsl r1
   16ce4:	strbtgt	lr, [pc], #2587	; 16cec <__assert_fail@plt+0x5834>
   16ce8:	ldrge	r3, [sl, #-3145]	; 0xfffff3b7
   16cec:	stmdble	sl!, {r3, r4, r5, r6, r9, fp, lr}
   16cf0:	svceq	0x00421ad8
   16cf4:	tstgt	r6, #1200	; 0x4b0
   16cf8:	ldrbls	r0, [r9, #89]	; 0x59
   16cfc:	cmnne	r7, #360	; 0x168
   16d00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d04:	sub	sp, sp, #220	; 0xdc
   16d08:	mov	sl, r0
   16d0c:	mov	r8, r1
   16d10:	mov	r9, r2
   16d14:	mov	r7, r3
   16d18:	ldr	r5, [sp, #256]	; 0x100
   16d1c:	str	r5, [sp]
   16d20:	bl	11374 <renameat2@plt>
   16d24:	mov	r4, r0
   16d28:	bl	11338 <__errno_location@plt>
   16d2c:	cmp	r4, #0
   16d30:	blt	16d40 <__assert_fail@plt+0x5888>
   16d34:	mov	r0, r4
   16d38:	add	sp, sp, #220	; 0xdc
   16d3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d40:	mov	r6, r0
   16d44:	ldr	r2, [r0]
   16d48:	sub	r3, r2, #22
   16d4c:	bic	r3, r3, #16
   16d50:	cmp	r2, #95	; 0x5f
   16d54:	cmpne	r3, #0
   16d58:	movne	fp, #1
   16d5c:	moveq	fp, #0
   16d60:	bne	16d34 <__assert_fail@plt+0x587c>
   16d64:	cmp	r5, #0
   16d68:	beq	16dd8 <__assert_fail@plt+0x5920>
   16d6c:	cmp	r5, #1
   16d70:	bne	16dc8 <__assert_fail@plt+0x5910>
   16d74:	mov	r3, #256	; 0x100
   16d78:	str	r3, [sp]
   16d7c:	add	r3, sp, #112	; 0x70
   16d80:	mov	r2, r7
   16d84:	mov	r1, r9
   16d88:	mov	r0, #3
   16d8c:	bl	11218 <__fxstatat64@plt>
   16d90:	cmp	r0, #0
   16d94:	beq	16db8 <__assert_fail@plt+0x5900>
   16d98:	ldr	r3, [r6]
   16d9c:	cmp	r3, #75	; 0x4b
   16da0:	beq	16db8 <__assert_fail@plt+0x5900>
   16da4:	cmp	r3, #2
   16da8:	moveq	fp, #1
   16dac:	beq	16dd8 <__assert_fail@plt+0x5920>
   16db0:	mvn	r4, #0
   16db4:	b	16d34 <__assert_fail@plt+0x587c>
   16db8:	mov	r3, #17
   16dbc:	str	r3, [r6]
   16dc0:	mvn	r4, #0
   16dc4:	b	16d34 <__assert_fail@plt+0x587c>
   16dc8:	mov	r3, #95	; 0x5f
   16dcc:	str	r3, [r0]
   16dd0:	mvn	r4, #0
   16dd4:	b	16d34 <__assert_fail@plt+0x587c>
   16dd8:	mov	r0, r8
   16ddc:	bl	11314 <strlen@plt>
   16de0:	mov	r4, r0
   16de4:	mov	r0, r7
   16de8:	bl	11314 <strlen@plt>
   16dec:	cmp	r0, #0
   16df0:	cmpne	r4, #0
   16df4:	beq	16e30 <__assert_fail@plt+0x5978>
   16df8:	add	r4, r8, r4
   16dfc:	ldrb	r2, [r4, #-1]
   16e00:	add	r3, r7, r0
   16e04:	ldrb	r3, [r3, #-1]
   16e08:	cmp	r2, #47	; 0x2f
   16e0c:	cmpne	r3, #47	; 0x2f
   16e10:	beq	16e4c <__assert_fail@plt+0x5994>
   16e14:	mov	r3, r7
   16e18:	mov	r2, r9
   16e1c:	mov	r1, r8
   16e20:	mov	r0, sl
   16e24:	bl	11428 <renameat@plt>
   16e28:	mov	r4, r0
   16e2c:	b	16d34 <__assert_fail@plt+0x587c>
   16e30:	mov	r3, r7
   16e34:	mov	r2, r9
   16e38:	mov	r1, r8
   16e3c:	mov	r0, sl
   16e40:	bl	11428 <renameat@plt>
   16e44:	mov	r4, r0
   16e48:	b	16d34 <__assert_fail@plt+0x587c>
   16e4c:	mov	r3, #256	; 0x100
   16e50:	str	r3, [sp]
   16e54:	add	r3, sp, #8
   16e58:	mov	r2, r8
   16e5c:	mov	r1, sl
   16e60:	mov	r0, #3
   16e64:	bl	11218 <__fxstatat64@plt>
   16e68:	cmp	r0, #0
   16e6c:	mvnne	r4, #0
   16e70:	bne	16d34 <__assert_fail@plt+0x587c>
   16e74:	cmp	fp, #0
   16e78:	beq	16e9c <__assert_fail@plt+0x59e4>
   16e7c:	ldr	r3, [sp, #24]
   16e80:	and	r3, r3, #61440	; 0xf000
   16e84:	cmp	r3, #16384	; 0x4000
   16e88:	beq	16ee4 <__assert_fail@plt+0x5a2c>
   16e8c:	mov	r3, #2
   16e90:	str	r3, [r6]
   16e94:	mvn	r4, #0
   16e98:	b	16d34 <__assert_fail@plt+0x587c>
   16e9c:	mov	r3, #256	; 0x100
   16ea0:	str	r3, [sp]
   16ea4:	add	r3, sp, #112	; 0x70
   16ea8:	mov	r2, r7
   16eac:	mov	r1, r9
   16eb0:	mov	r0, #3
   16eb4:	bl	11218 <__fxstatat64@plt>
   16eb8:	cmp	r0, #0
   16ebc:	beq	16f00 <__assert_fail@plt+0x5a48>
   16ec0:	ldr	r3, [r6]
   16ec4:	cmp	r3, #2
   16ec8:	mvnne	r4, #0
   16ecc:	bne	16d34 <__assert_fail@plt+0x587c>
   16ed0:	ldr	r3, [sp, #24]
   16ed4:	and	r3, r3, #61440	; 0xf000
   16ed8:	cmp	r3, #16384	; 0x4000
   16edc:	mvnne	r4, #0
   16ee0:	bne	16d34 <__assert_fail@plt+0x587c>
   16ee4:	mov	r3, r7
   16ee8:	mov	r2, r9
   16eec:	mov	r1, r8
   16ef0:	mov	r0, sl
   16ef4:	bl	11428 <renameat@plt>
   16ef8:	mov	r4, r0
   16efc:	b	16d34 <__assert_fail@plt+0x587c>
   16f00:	ldr	r3, [sp, #128]	; 0x80
   16f04:	and	r3, r3, #61440	; 0xf000
   16f08:	cmp	r3, #16384	; 0x4000
   16f0c:	movne	r3, #20
   16f10:	strne	r3, [r6]
   16f14:	mvnne	r4, #0
   16f18:	bne	16d34 <__assert_fail@plt+0x587c>
   16f1c:	ldr	r3, [sp, #24]
   16f20:	and	r3, r3, #61440	; 0xf000
   16f24:	cmp	r3, #16384	; 0x4000
   16f28:	beq	16ee4 <__assert_fail@plt+0x5a2c>
   16f2c:	mov	r3, #21
   16f30:	str	r3, [r6]
   16f34:	mvn	r4, #0
   16f38:	b	16d34 <__assert_fail@plt+0x587c>
   16f3c:	push	{r4, r5, r6, r7, r8, lr}
   16f40:	mov	r4, r0
   16f44:	cmp	r0, #2
   16f48:	bls	16f54 <__assert_fail@plt+0x5a9c>
   16f4c:	mov	r0, r4
   16f50:	pop	{r4, r5, r6, r7, r8, pc}
   16f54:	bl	18640 <__assert_fail@plt+0x7188>
   16f58:	mov	r6, r0
   16f5c:	bl	11338 <__errno_location@plt>
   16f60:	mov	r5, r0
   16f64:	ldr	r7, [r0]
   16f68:	mov	r0, r4
   16f6c:	bl	114ac <close@plt>
   16f70:	str	r7, [r5]
   16f74:	mov	r4, r6
   16f78:	b	16f4c <__assert_fail@plt+0x5a94>
   16f7c:	push	{r4, r5, r6, lr}
   16f80:	sub	sp, sp, #32
   16f84:	mov	r4, r0
   16f88:	ldr	r5, [sp, #48]	; 0x30
   16f8c:	ldr	r6, [sp, #52]	; 0x34
   16f90:	cmp	r1, #0
   16f94:	beq	1704c <__assert_fail@plt+0x5b94>
   16f98:	str	r3, [sp, #4]
   16f9c:	str	r2, [sp]
   16fa0:	mov	r3, r1
   16fa4:	ldr	r2, [pc, #940]	; 17358 <__assert_fail@plt+0x5ea0>
   16fa8:	mov	r1, #1
   16fac:	bl	113a4 <__fprintf_chk@plt>
   16fb0:	mov	r2, #5
   16fb4:	ldr	r1, [pc, #928]	; 1735c <__assert_fail@plt+0x5ea4>
   16fb8:	mov	r0, #0
   16fbc:	bl	111e8 <dcgettext@plt>
   16fc0:	ldr	r3, [pc, #920]	; 17360 <__assert_fail@plt+0x5ea8>
   16fc4:	str	r3, [sp]
   16fc8:	mov	r3, r0
   16fcc:	ldr	r2, [pc, #912]	; 17364 <__assert_fail@plt+0x5eac>
   16fd0:	mov	r1, #1
   16fd4:	mov	r0, r4
   16fd8:	bl	113a4 <__fprintf_chk@plt>
   16fdc:	mov	r1, r4
   16fe0:	mov	r0, #10
   16fe4:	bl	111dc <fputc_unlocked@plt>
   16fe8:	mov	r2, #5
   16fec:	ldr	r1, [pc, #884]	; 17368 <__assert_fail@plt+0x5eb0>
   16ff0:	mov	r0, #0
   16ff4:	bl	111e8 <dcgettext@plt>
   16ff8:	ldr	r3, [pc, #876]	; 1736c <__assert_fail@plt+0x5eb4>
   16ffc:	mov	r2, r0
   17000:	mov	r1, #1
   17004:	mov	r0, r4
   17008:	bl	113a4 <__fprintf_chk@plt>
   1700c:	mov	r1, r4
   17010:	mov	r0, #10
   17014:	bl	111dc <fputc_unlocked@plt>
   17018:	cmp	r6, #9
   1701c:	ldrls	pc, [pc, r6, lsl #2]
   17020:	b	172f0 <__assert_fail@plt+0x5e38>
   17024:	andeq	r7, r1, r8, lsl #1
   17028:	andeq	r7, r1, r4, rrx
   1702c:	muleq	r1, r0, r0
   17030:	andeq	r7, r1, r0, asr #1
   17034:	strdeq	r7, [r1], -r8
   17038:	andeq	r7, r1, r8, lsr r1
   1703c:	andeq	r7, r1, r0, lsl #3
   17040:	ldrdeq	r7, [r1], -r0
   17044:	andeq	r7, r1, r8, lsr #4
   17048:	andeq	r7, r1, r8, lsl #5
   1704c:	str	r3, [sp]
   17050:	mov	r3, r2
   17054:	ldr	r2, [pc, #788]	; 17370 <__assert_fail@plt+0x5eb8>
   17058:	mov	r1, #1
   1705c:	bl	113a4 <__fprintf_chk@plt>
   17060:	b	16fb0 <__assert_fail@plt+0x5af8>
   17064:	mov	r2, #5
   17068:	ldr	r1, [pc, #772]	; 17374 <__assert_fail@plt+0x5ebc>
   1706c:	mov	r0, #0
   17070:	bl	111e8 <dcgettext@plt>
   17074:	ldr	r3, [r5]
   17078:	mov	r2, r0
   1707c:	mov	r1, #1
   17080:	mov	r0, r4
   17084:	bl	113a4 <__fprintf_chk@plt>
   17088:	add	sp, sp, #32
   1708c:	pop	{r4, r5, r6, pc}
   17090:	mov	r2, #5
   17094:	ldr	r1, [pc, #732]	; 17378 <__assert_fail@plt+0x5ec0>
   17098:	mov	r0, #0
   1709c:	bl	111e8 <dcgettext@plt>
   170a0:	ldr	r3, [r5]
   170a4:	ldr	r2, [r5, #4]
   170a8:	str	r2, [sp]
   170ac:	mov	r2, r0
   170b0:	mov	r1, #1
   170b4:	mov	r0, r4
   170b8:	bl	113a4 <__fprintf_chk@plt>
   170bc:	b	17088 <__assert_fail@plt+0x5bd0>
   170c0:	mov	r2, #5
   170c4:	ldr	r1, [pc, #688]	; 1737c <__assert_fail@plt+0x5ec4>
   170c8:	mov	r0, #0
   170cc:	bl	111e8 <dcgettext@plt>
   170d0:	ldr	r3, [r5]
   170d4:	ldr	r2, [r5, #8]
   170d8:	str	r2, [sp, #4]
   170dc:	ldr	r2, [r5, #4]
   170e0:	str	r2, [sp]
   170e4:	mov	r2, r0
   170e8:	mov	r1, #1
   170ec:	mov	r0, r4
   170f0:	bl	113a4 <__fprintf_chk@plt>
   170f4:	b	17088 <__assert_fail@plt+0x5bd0>
   170f8:	mov	r2, #5
   170fc:	ldr	r1, [pc, #636]	; 17380 <__assert_fail@plt+0x5ec8>
   17100:	mov	r0, #0
   17104:	bl	111e8 <dcgettext@plt>
   17108:	ldr	r3, [r5]
   1710c:	ldr	r2, [r5, #12]
   17110:	str	r2, [sp, #8]
   17114:	ldr	r2, [r5, #8]
   17118:	str	r2, [sp, #4]
   1711c:	ldr	r2, [r5, #4]
   17120:	str	r2, [sp]
   17124:	mov	r2, r0
   17128:	mov	r1, #1
   1712c:	mov	r0, r4
   17130:	bl	113a4 <__fprintf_chk@plt>
   17134:	b	17088 <__assert_fail@plt+0x5bd0>
   17138:	mov	r2, #5
   1713c:	ldr	r1, [pc, #576]	; 17384 <__assert_fail@plt+0x5ecc>
   17140:	mov	r0, #0
   17144:	bl	111e8 <dcgettext@plt>
   17148:	ldr	r3, [r5]
   1714c:	ldr	r2, [r5, #16]
   17150:	str	r2, [sp, #12]
   17154:	ldr	r2, [r5, #12]
   17158:	str	r2, [sp, #8]
   1715c:	ldr	r2, [r5, #8]
   17160:	str	r2, [sp, #4]
   17164:	ldr	r2, [r5, #4]
   17168:	str	r2, [sp]
   1716c:	mov	r2, r0
   17170:	mov	r1, #1
   17174:	mov	r0, r4
   17178:	bl	113a4 <__fprintf_chk@plt>
   1717c:	b	17088 <__assert_fail@plt+0x5bd0>
   17180:	mov	r2, #5
   17184:	ldr	r1, [pc, #508]	; 17388 <__assert_fail@plt+0x5ed0>
   17188:	mov	r0, #0
   1718c:	bl	111e8 <dcgettext@plt>
   17190:	ldr	r3, [r5]
   17194:	ldr	r2, [r5, #20]
   17198:	str	r2, [sp, #16]
   1719c:	ldr	r2, [r5, #16]
   171a0:	str	r2, [sp, #12]
   171a4:	ldr	r2, [r5, #12]
   171a8:	str	r2, [sp, #8]
   171ac:	ldr	r2, [r5, #8]
   171b0:	str	r2, [sp, #4]
   171b4:	ldr	r2, [r5, #4]
   171b8:	str	r2, [sp]
   171bc:	mov	r2, r0
   171c0:	mov	r1, #1
   171c4:	mov	r0, r4
   171c8:	bl	113a4 <__fprintf_chk@plt>
   171cc:	b	17088 <__assert_fail@plt+0x5bd0>
   171d0:	mov	r2, #5
   171d4:	ldr	r1, [pc, #432]	; 1738c <__assert_fail@plt+0x5ed4>
   171d8:	mov	r0, #0
   171dc:	bl	111e8 <dcgettext@plt>
   171e0:	ldr	r3, [r5]
   171e4:	ldr	r2, [r5, #24]
   171e8:	str	r2, [sp, #20]
   171ec:	ldr	r2, [r5, #20]
   171f0:	str	r2, [sp, #16]
   171f4:	ldr	r2, [r5, #16]
   171f8:	str	r2, [sp, #12]
   171fc:	ldr	r2, [r5, #12]
   17200:	str	r2, [sp, #8]
   17204:	ldr	r2, [r5, #8]
   17208:	str	r2, [sp, #4]
   1720c:	ldr	r2, [r5, #4]
   17210:	str	r2, [sp]
   17214:	mov	r2, r0
   17218:	mov	r1, #1
   1721c:	mov	r0, r4
   17220:	bl	113a4 <__fprintf_chk@plt>
   17224:	b	17088 <__assert_fail@plt+0x5bd0>
   17228:	mov	r2, #5
   1722c:	ldr	r1, [pc, #348]	; 17390 <__assert_fail@plt+0x5ed8>
   17230:	mov	r0, #0
   17234:	bl	111e8 <dcgettext@plt>
   17238:	ldr	r3, [r5]
   1723c:	ldr	r2, [r5, #28]
   17240:	str	r2, [sp, #24]
   17244:	ldr	r2, [r5, #24]
   17248:	str	r2, [sp, #20]
   1724c:	ldr	r2, [r5, #20]
   17250:	str	r2, [sp, #16]
   17254:	ldr	r2, [r5, #16]
   17258:	str	r2, [sp, #12]
   1725c:	ldr	r2, [r5, #12]
   17260:	str	r2, [sp, #8]
   17264:	ldr	r2, [r5, #8]
   17268:	str	r2, [sp, #4]
   1726c:	ldr	r2, [r5, #4]
   17270:	str	r2, [sp]
   17274:	mov	r2, r0
   17278:	mov	r1, #1
   1727c:	mov	r0, r4
   17280:	bl	113a4 <__fprintf_chk@plt>
   17284:	b	17088 <__assert_fail@plt+0x5bd0>
   17288:	mov	r2, #5
   1728c:	ldr	r1, [pc, #256]	; 17394 <__assert_fail@plt+0x5edc>
   17290:	mov	r0, #0
   17294:	bl	111e8 <dcgettext@plt>
   17298:	ldr	r3, [r5]
   1729c:	ldr	r2, [r5, #32]
   172a0:	str	r2, [sp, #28]
   172a4:	ldr	r2, [r5, #28]
   172a8:	str	r2, [sp, #24]
   172ac:	ldr	r2, [r5, #24]
   172b0:	str	r2, [sp, #20]
   172b4:	ldr	r2, [r5, #20]
   172b8:	str	r2, [sp, #16]
   172bc:	ldr	r2, [r5, #16]
   172c0:	str	r2, [sp, #12]
   172c4:	ldr	r2, [r5, #12]
   172c8:	str	r2, [sp, #8]
   172cc:	ldr	r2, [r5, #8]
   172d0:	str	r2, [sp, #4]
   172d4:	ldr	r2, [r5, #4]
   172d8:	str	r2, [sp]
   172dc:	mov	r2, r0
   172e0:	mov	r1, #1
   172e4:	mov	r0, r4
   172e8:	bl	113a4 <__fprintf_chk@plt>
   172ec:	b	17088 <__assert_fail@plt+0x5bd0>
   172f0:	mov	r2, #5
   172f4:	ldr	r1, [pc, #156]	; 17398 <__assert_fail@plt+0x5ee0>
   172f8:	mov	r0, #0
   172fc:	bl	111e8 <dcgettext@plt>
   17300:	ldr	r3, [r5]
   17304:	ldr	r2, [r5, #32]
   17308:	str	r2, [sp, #28]
   1730c:	ldr	r2, [r5, #28]
   17310:	str	r2, [sp, #24]
   17314:	ldr	r2, [r5, #24]
   17318:	str	r2, [sp, #20]
   1731c:	ldr	r2, [r5, #20]
   17320:	str	r2, [sp, #16]
   17324:	ldr	r2, [r5, #16]
   17328:	str	r2, [sp, #12]
   1732c:	ldr	r2, [r5, #12]
   17330:	str	r2, [sp, #8]
   17334:	ldr	r2, [r5, #8]
   17338:	str	r2, [sp, #4]
   1733c:	ldr	r2, [r5, #4]
   17340:	str	r2, [sp]
   17344:	mov	r2, r0
   17348:	mov	r1, #1
   1734c:	mov	r0, r4
   17350:	bl	113a4 <__fprintf_chk@plt>
   17354:	b	17088 <__assert_fail@plt+0x5bd0>
   17358:	andeq	sl, r1, r0, ror #5
   1735c:	strdeq	sl, [r1], -r4
   17360:	andeq	r0, r0, r6, ror #15
   17364:	andeq	sl, r1, ip, asr #11
   17368:	strdeq	sl, [r1], -r8
   1736c:	andeq	sl, r1, r4, lsr #7
   17370:	andeq	sl, r1, ip, ror #5
   17374:	andeq	sl, r1, r8, asr #7
   17378:	ldrdeq	sl, [r1], -r8
   1737c:	strdeq	sl, [r1], -r0
   17380:	andeq	sl, r1, ip, lsl #8
   17384:	andeq	sl, r1, ip, lsr #8
   17388:	andeq	sl, r1, r0, asr r4
   1738c:	andeq	sl, r1, r8, ror r4
   17390:	andeq	sl, r1, r4, lsr #9
   17394:	ldrdeq	sl, [r1], -r4
   17398:	andeq	sl, r1, r8, lsl #10
   1739c:	push	{r4, r5, lr}
   173a0:	sub	sp, sp, #12
   173a4:	ldr	r5, [sp, #24]
   173a8:	ldr	ip, [r5]
   173ac:	cmp	ip, #0
   173b0:	beq	173e0 <__assert_fail@plt+0x5f28>
   173b4:	mov	lr, r5
   173b8:	mov	ip, #0
   173bc:	add	ip, ip, #1
   173c0:	ldr	r4, [lr, #4]!
   173c4:	cmp	r4, #0
   173c8:	bne	173bc <__assert_fail@plt+0x5f04>
   173cc:	str	ip, [sp, #4]
   173d0:	str	r5, [sp]
   173d4:	bl	16f7c <__assert_fail@plt+0x5ac4>
   173d8:	add	sp, sp, #12
   173dc:	pop	{r4, r5, pc}
   173e0:	mov	ip, #0
   173e4:	b	173cc <__assert_fail@plt+0x5f14>
   173e8:	push	{r4, r5, lr}
   173ec:	sub	sp, sp, #52	; 0x34
   173f0:	ldr	r4, [sp, #64]	; 0x40
   173f4:	sub	r4, r4, #4
   173f8:	add	r5, sp, #4
   173fc:	mov	ip, #0
   17400:	ldr	lr, [r4, #4]!
   17404:	str	lr, [r5, #4]!
   17408:	cmp	lr, #0
   1740c:	beq	1741c <__assert_fail@plt+0x5f64>
   17410:	add	ip, ip, #1
   17414:	cmp	ip, #10
   17418:	bne	17400 <__assert_fail@plt+0x5f48>
   1741c:	str	ip, [sp, #4]
   17420:	add	ip, sp, #8
   17424:	str	ip, [sp]
   17428:	bl	16f7c <__assert_fail@plt+0x5ac4>
   1742c:	add	sp, sp, #52	; 0x34
   17430:	pop	{r4, r5, pc}
   17434:	push	{r3}		; (str r3, [sp, #-4]!)
   17438:	push	{lr}		; (str lr, [sp, #-4]!)
   1743c:	sub	sp, sp, #16
   17440:	add	r3, sp, #24
   17444:	str	r3, [sp, #12]
   17448:	str	r3, [sp]
   1744c:	ldr	r3, [sp, #20]
   17450:	bl	173e8 <__assert_fail@plt+0x5f30>
   17454:	add	sp, sp, #16
   17458:	pop	{lr}		; (ldr lr, [sp], #4)
   1745c:	add	sp, sp, #4
   17460:	bx	lr
   17464:	push	{r4, lr}
   17468:	ldr	r3, [pc, #112]	; 174e0 <__assert_fail@plt+0x6028>
   1746c:	ldr	r1, [r3]
   17470:	mov	r0, #10
   17474:	bl	111dc <fputc_unlocked@plt>
   17478:	mov	r2, #5
   1747c:	ldr	r1, [pc, #96]	; 174e4 <__assert_fail@plt+0x602c>
   17480:	mov	r0, #0
   17484:	bl	111e8 <dcgettext@plt>
   17488:	ldr	r2, [pc, #88]	; 174e8 <__assert_fail@plt+0x6030>
   1748c:	mov	r1, r0
   17490:	mov	r0, #1
   17494:	bl	11380 <__printf_chk@plt>
   17498:	mov	r2, #5
   1749c:	ldr	r1, [pc, #72]	; 174ec <__assert_fail@plt+0x6034>
   174a0:	mov	r0, #0
   174a4:	bl	111e8 <dcgettext@plt>
   174a8:	ldr	r3, [pc, #64]	; 174f0 <__assert_fail@plt+0x6038>
   174ac:	ldr	r2, [pc, #64]	; 174f4 <__assert_fail@plt+0x603c>
   174b0:	mov	r1, r0
   174b4:	mov	r0, #1
   174b8:	bl	11380 <__printf_chk@plt>
   174bc:	mov	r2, #5
   174c0:	ldr	r1, [pc, #48]	; 174f8 <__assert_fail@plt+0x6040>
   174c4:	mov	r0, #0
   174c8:	bl	111e8 <dcgettext@plt>
   174cc:	ldr	r2, [pc, #40]	; 174fc <__assert_fail@plt+0x6044>
   174d0:	mov	r1, r0
   174d4:	mov	r0, #1
   174d8:	bl	11380 <__printf_chk@plt>
   174dc:	pop	{r4, pc}
   174e0:			; <UNDEFINED> instruction: 0x0002b1b4
   174e4:	andeq	sl, r1, r4, asr #10
   174e8:	andeq	sl, r1, r8, asr r5
   174ec:	andeq	sl, r1, r0, ror r5
   174f0:	andeq	r9, r1, r8, asr #26
   174f4:	andeq	r9, r1, r0, ror sp
   174f8:	andeq	sl, r1, r4, lsl #11
   174fc:	andeq	sl, r1, ip, lsr #11
   17500:	push	{r4, lr}
   17504:	bl	11458 <aligned_alloc@plt>
   17508:	cmp	r0, #0
   1750c:	popne	{r4, pc}
   17510:	bl	17ab8 <__assert_fail@plt+0x6600>
   17514:	push	{r4, lr}
   17518:	bl	18220 <__assert_fail@plt+0x6d68>
   1751c:	cmp	r0, #0
   17520:	popne	{r4, pc}
   17524:	bl	17ab8 <__assert_fail@plt+0x6600>
   17528:	push	{r4, lr}
   1752c:	bl	18220 <__assert_fail@plt+0x6d68>
   17530:	cmp	r0, #0
   17534:	popne	{r4, pc}
   17538:	bl	17ab8 <__assert_fail@plt+0x6600>
   1753c:	push	{r4, lr}
   17540:	bl	17514 <__assert_fail@plt+0x605c>
   17544:	pop	{r4, pc}
   17548:	push	{r4, r5, r6, lr}
   1754c:	mov	r5, r0
   17550:	mov	r4, r1
   17554:	bl	18250 <__assert_fail@plt+0x6d98>
   17558:	cmp	r0, #0
   1755c:	popne	{r4, r5, r6, pc}
   17560:	adds	r4, r4, #0
   17564:	movne	r4, #1
   17568:	cmp	r5, #0
   1756c:	orreq	r4, r4, #1
   17570:	cmp	r4, #0
   17574:	popeq	{r4, r5, r6, pc}
   17578:	bl	17ab8 <__assert_fail@plt+0x6600>
   1757c:	push	{r4, lr}
   17580:	cmp	r1, #0
   17584:	orreq	r1, r1, #1
   17588:	bl	18250 <__assert_fail@plt+0x6d98>
   1758c:	cmp	r0, #0
   17590:	popne	{r4, pc}
   17594:	bl	17ab8 <__assert_fail@plt+0x6600>
   17598:	push	{r4, r5, r6, lr}
   1759c:	mov	r6, r0
   175a0:	mov	r5, r1
   175a4:	mov	r4, r2
   175a8:	bl	185f4 <__assert_fail@plt+0x713c>
   175ac:	cmp	r0, #0
   175b0:	popne	{r4, r5, r6, pc}
   175b4:	cmp	r6, #0
   175b8:	beq	175c8 <__assert_fail@plt+0x6110>
   175bc:	cmp	r5, #0
   175c0:	cmpne	r4, #0
   175c4:	popeq	{r4, r5, r6, pc}
   175c8:	bl	17ab8 <__assert_fail@plt+0x6600>
   175cc:	push	{r4, lr}
   175d0:	bl	17598 <__assert_fail@plt+0x60e0>
   175d4:	pop	{r4, pc}
   175d8:	push	{r4, lr}
   175dc:	mov	ip, r1
   175e0:	mov	r3, r2
   175e4:	cmp	r2, #0
   175e8:	cmpne	r1, #0
   175ec:	moveq	r3, #1
   175f0:	moveq	ip, r3
   175f4:	mov	r2, r3
   175f8:	mov	r1, ip
   175fc:	bl	185f4 <__assert_fail@plt+0x713c>
   17600:	cmp	r0, #0
   17604:	popne	{r4, pc}
   17608:	bl	17ab8 <__assert_fail@plt+0x6600>
   1760c:	push	{r4, lr}
   17610:	mov	r2, r1
   17614:	mov	r1, r0
   17618:	mov	r0, #0
   1761c:	bl	17598 <__assert_fail@plt+0x60e0>
   17620:	pop	{r4, pc}
   17624:	push	{r4, lr}
   17628:	mov	r2, r1
   1762c:	mov	r1, r0
   17630:	mov	r0, #0
   17634:	bl	175d8 <__assert_fail@plt+0x6120>
   17638:	pop	{r4, pc}
   1763c:	push	{r4, r5, r6, r7, r8, lr}
   17640:	mov	r5, r1
   17644:	mov	r6, r2
   17648:	ldr	r4, [r1]
   1764c:	subs	r7, r0, #0
   17650:	beq	1766c <__assert_fail@plt+0x61b4>
   17654:	lsr	r2, r4, #1
   17658:	add	r3, r2, #1
   1765c:	mvn	r3, r3
   17660:	cmp	r4, r3
   17664:	bls	17690 <__assert_fail@plt+0x61d8>
   17668:	bl	17ab8 <__assert_fail@plt+0x6600>
   1766c:	cmp	r4, #0
   17670:	bne	17698 <__assert_fail@plt+0x61e0>
   17674:	mov	r1, r2
   17678:	mov	r0, #64	; 0x40
   1767c:	bl	1875c <__assert_fail@plt+0x72a4>
   17680:	cmp	r0, #0
   17684:	movne	r4, r0
   17688:	addeq	r4, r0, #1
   1768c:	b	17698 <__assert_fail@plt+0x61e0>
   17690:	add	r4, r4, #1
   17694:	add	r4, r4, r2
   17698:	mov	r2, r6
   1769c:	mov	r1, r4
   176a0:	mov	r0, r7
   176a4:	bl	17598 <__assert_fail@plt+0x60e0>
   176a8:	str	r4, [r5]
   176ac:	pop	{r4, r5, r6, r7, r8, pc}
   176b0:	push	{r4, lr}
   176b4:	mov	r2, #1
   176b8:	bl	1763c <__assert_fail@plt+0x6184>
   176bc:	pop	{r4, pc}
   176c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176c4:	sub	sp, sp, #12
   176c8:	mov	fp, r0
   176cc:	mov	sl, r1
   176d0:	mov	r9, r2
   176d4:	mov	r7, r3
   176d8:	ldr	r6, [sp, #48]	; 0x30
   176dc:	ldr	r5, [r1]
   176e0:	asrs	r4, r5, #1
   176e4:	bmi	17840 <__assert_fail@plt+0x6388>
   176e8:	cmp	r5, #0
   176ec:	blt	17854 <__assert_fail@plt+0x639c>
   176f0:	mvn	r3, #-2147483648	; 0x80000000
   176f4:	sub	r3, r3, r4
   176f8:	cmp	r5, r3
   176fc:	movle	r3, #0
   17700:	movgt	r3, #1
   17704:	cmp	r3, #0
   17708:	addeq	r4, r4, r5
   1770c:	mvnne	r4, #-2147483648	; 0x80000000
   17710:	mvn	r8, r7
   17714:	lsr	r8, r8, #31
   17718:	cmp	r7, r4
   1771c:	movge	r3, #0
   17720:	andlt	r3, r8, #1
   17724:	cmp	r3, #0
   17728:	movne	r4, r7
   1772c:	cmp	r6, #0
   17730:	blt	17868 <__assert_fail@plt+0x63b0>
   17734:	cmp	r6, #0
   17738:	beq	17914 <__assert_fail@plt+0x645c>
   1773c:	cmp	r4, #0
   17740:	blt	178c4 <__assert_fail@plt+0x640c>
   17744:	mov	r1, r6
   17748:	mvn	r0, #-2147483648	; 0x80000000
   1774c:	bl	18968 <__assert_fail@plt+0x74b0>
   17750:	cmp	r0, r4
   17754:	movge	r0, #0
   17758:	movlt	r0, #1
   1775c:	cmp	r0, #0
   17760:	mvnne	r3, #-2147483648	; 0x80000000
   17764:	strne	r3, [sp, #4]
   17768:	beq	178fc <__assert_fail@plt+0x6444>
   1776c:	mov	r1, r6
   17770:	ldr	r0, [sp, #4]
   17774:	bl	18968 <__assert_fail@plt+0x74b0>
   17778:	mov	r4, r0
   1777c:	mov	r1, r6
   17780:	ldr	r0, [sp, #4]
   17784:	bl	18b88 <__assert_fail@plt+0x76d0>
   17788:	ldr	r3, [sp, #4]
   1778c:	sub	r1, r3, r1
   17790:	cmp	fp, #0
   17794:	moveq	r3, #0
   17798:	streq	r3, [sl]
   1779c:	sub	r3, r4, r5
   177a0:	cmp	r3, r9
   177a4:	bge	1782c <__assert_fail@plt+0x6374>
   177a8:	cmp	r9, #0
   177ac:	blt	17920 <__assert_fail@plt+0x6468>
   177b0:	cmp	r5, #0
   177b4:	blt	17934 <__assert_fail@plt+0x647c>
   177b8:	mvn	r3, #-2147483648	; 0x80000000
   177bc:	sub	r3, r3, r9
   177c0:	cmp	r5, r3
   177c4:	movle	r3, #0
   177c8:	movgt	r3, #1
   177cc:	cmp	r3, #0
   177d0:	bne	179dc <__assert_fail@plt+0x6524>
   177d4:	add	r5, r5, r9
   177d8:	mov	r4, r5
   177dc:	cmp	r7, r5
   177e0:	movge	r7, #0
   177e4:	andlt	r7, r8, #1
   177e8:	cmp	r7, #0
   177ec:	bne	179dc <__assert_fail@plt+0x6524>
   177f0:	cmp	r6, #0
   177f4:	blt	17948 <__assert_fail@plt+0x6490>
   177f8:	cmp	r6, #0
   177fc:	beq	17828 <__assert_fail@plt+0x6370>
   17800:	cmp	r5, #0
   17804:	blt	179a4 <__assert_fail@plt+0x64ec>
   17808:	mov	r1, r6
   1780c:	mvn	r0, #-2147483648	; 0x80000000
   17810:	bl	18968 <__assert_fail@plt+0x74b0>
   17814:	cmp	r5, r0
   17818:	movle	r0, #0
   1781c:	movgt	r0, #1
   17820:	cmp	r0, #0
   17824:	bne	179dc <__assert_fail@plt+0x6524>
   17828:	mul	r1, r5, r6
   1782c:	mov	r0, fp
   17830:	bl	17548 <__assert_fail@plt+0x6090>
   17834:	str	r4, [sl]
   17838:	add	sp, sp, #12
   1783c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17840:	rsb	r3, r4, #-2147483648	; 0x80000000
   17844:	cmp	r5, r3
   17848:	movge	r3, #0
   1784c:	movlt	r3, #1
   17850:	b	17704 <__assert_fail@plt+0x624c>
   17854:	rsb	r3, r5, #-2147483648	; 0x80000000
   17858:	cmp	r4, r3
   1785c:	movge	r3, #0
   17860:	movlt	r3, #1
   17864:	b	17704 <__assert_fail@plt+0x624c>
   17868:	cmp	r4, #0
   1786c:	blt	17894 <__assert_fail@plt+0x63dc>
   17870:	cmn	r6, #1
   17874:	beq	178b0 <__assert_fail@plt+0x63f8>
   17878:	mov	r1, r6
   1787c:	mov	r0, #-2147483648	; 0x80000000
   17880:	bl	18968 <__assert_fail@plt+0x74b0>
   17884:	cmp	r0, r4
   17888:	movge	r0, #0
   1788c:	movlt	r0, #1
   17890:	b	1775c <__assert_fail@plt+0x62a4>
   17894:	mov	r1, r6
   17898:	mvn	r0, #-2147483648	; 0x80000000
   1789c:	bl	18968 <__assert_fail@plt+0x74b0>
   178a0:	cmp	r0, r4
   178a4:	movle	r0, #0
   178a8:	movgt	r0, #1
   178ac:	b	1775c <__assert_fail@plt+0x62a4>
   178b0:	add	r0, r4, #-2147483648	; 0x80000000
   178b4:	cmp	r0, #0
   178b8:	movle	r0, #0
   178bc:	movgt	r0, #1
   178c0:	b	1775c <__assert_fail@plt+0x62a4>
   178c4:	cmn	r4, #1
   178c8:	beq	178e8 <__assert_fail@plt+0x6430>
   178cc:	mov	r1, r4
   178d0:	mov	r0, #-2147483648	; 0x80000000
   178d4:	bl	18968 <__assert_fail@plt+0x74b0>
   178d8:	cmp	r6, r0
   178dc:	movle	r0, #0
   178e0:	movgt	r0, #1
   178e4:	b	1775c <__assert_fail@plt+0x62a4>
   178e8:	add	r0, r6, #-2147483648	; 0x80000000
   178ec:	cmp	r0, #0
   178f0:	movle	r0, #0
   178f4:	movgt	r0, #1
   178f8:	b	1775c <__assert_fail@plt+0x62a4>
   178fc:	mul	r1, r6, r4
   17900:	cmp	r1, #63	; 0x3f
   17904:	movle	r3, #64	; 0x40
   17908:	strle	r3, [sp, #4]
   1790c:	bgt	17790 <__assert_fail@plt+0x62d8>
   17910:	b	1776c <__assert_fail@plt+0x62b4>
   17914:	mov	r3, #64	; 0x40
   17918:	str	r3, [sp, #4]
   1791c:	b	1776c <__assert_fail@plt+0x62b4>
   17920:	rsb	r3, r9, #-2147483648	; 0x80000000
   17924:	cmp	r5, r3
   17928:	movge	r3, #0
   1792c:	movlt	r3, #1
   17930:	b	177cc <__assert_fail@plt+0x6314>
   17934:	rsb	r3, r5, #-2147483648	; 0x80000000
   17938:	cmp	r9, r3
   1793c:	movge	r3, #0
   17940:	movlt	r3, #1
   17944:	b	177cc <__assert_fail@plt+0x6314>
   17948:	cmp	r5, #0
   1794c:	blt	17974 <__assert_fail@plt+0x64bc>
   17950:	cmn	r6, #1
   17954:	beq	17990 <__assert_fail@plt+0x64d8>
   17958:	mov	r1, r6
   1795c:	mov	r0, #-2147483648	; 0x80000000
   17960:	bl	18968 <__assert_fail@plt+0x74b0>
   17964:	cmp	r5, r0
   17968:	movle	r0, #0
   1796c:	movgt	r0, #1
   17970:	b	17820 <__assert_fail@plt+0x6368>
   17974:	mov	r1, r6
   17978:	mvn	r0, #-2147483648	; 0x80000000
   1797c:	bl	18968 <__assert_fail@plt+0x74b0>
   17980:	cmp	r5, r0
   17984:	movge	r0, #0
   17988:	movlt	r0, #1
   1798c:	b	17820 <__assert_fail@plt+0x6368>
   17990:	add	r0, r5, #-2147483648	; 0x80000000
   17994:	cmp	r0, #0
   17998:	movle	r0, #0
   1799c:	movgt	r0, #1
   179a0:	b	17820 <__assert_fail@plt+0x6368>
   179a4:	cmn	r5, #1
   179a8:	beq	179c8 <__assert_fail@plt+0x6510>
   179ac:	mov	r1, r5
   179b0:	mov	r0, #-2147483648	; 0x80000000
   179b4:	bl	18968 <__assert_fail@plt+0x74b0>
   179b8:	cmp	r6, r0
   179bc:	movle	r0, #0
   179c0:	movgt	r0, #1
   179c4:	b	17820 <__assert_fail@plt+0x6368>
   179c8:	add	r0, r6, #-2147483648	; 0x80000000
   179cc:	cmp	r0, #0
   179d0:	movle	r0, #0
   179d4:	movgt	r0, #1
   179d8:	b	17820 <__assert_fail@plt+0x6368>
   179dc:	bl	17ab8 <__assert_fail@plt+0x6600>
   179e0:	push	{r4, lr}
   179e4:	bl	181d0 <__assert_fail@plt+0x6d18>
   179e8:	cmp	r0, #0
   179ec:	popne	{r4, pc}
   179f0:	bl	17ab8 <__assert_fail@plt+0x6600>
   179f4:	push	{r4, lr}
   179f8:	mov	r1, #1
   179fc:	bl	179e0 <__assert_fail@plt+0x6528>
   17a00:	pop	{r4, pc}
   17a04:	push	{r4, lr}
   17a08:	bl	181d0 <__assert_fail@plt+0x6d18>
   17a0c:	cmp	r0, #0
   17a10:	popne	{r4, pc}
   17a14:	bl	17ab8 <__assert_fail@plt+0x6600>
   17a18:	push	{r4, lr}
   17a1c:	mov	r1, #1
   17a20:	bl	17a04 <__assert_fail@plt+0x654c>
   17a24:	pop	{r4, pc}
   17a28:	push	{r4, r5, r6, lr}
   17a2c:	mov	r5, r0
   17a30:	mov	r4, r1
   17a34:	mov	r0, r1
   17a38:	bl	17514 <__assert_fail@plt+0x605c>
   17a3c:	mov	r2, r4
   17a40:	mov	r1, r5
   17a44:	bl	11194 <memcpy@plt>
   17a48:	pop	{r4, r5, r6, pc}
   17a4c:	push	{r4, r5, r6, lr}
   17a50:	mov	r5, r0
   17a54:	mov	r4, r1
   17a58:	mov	r0, r1
   17a5c:	bl	17528 <__assert_fail@plt+0x6070>
   17a60:	mov	r2, r4
   17a64:	mov	r1, r5
   17a68:	bl	11194 <memcpy@plt>
   17a6c:	pop	{r4, r5, r6, pc}
   17a70:	push	{r4, r5, r6, lr}
   17a74:	mov	r5, r0
   17a78:	mov	r4, r1
   17a7c:	add	r0, r1, #1
   17a80:	bl	17528 <__assert_fail@plt+0x6070>
   17a84:	mov	r2, #0
   17a88:	strb	r2, [r0, r4]
   17a8c:	mov	r2, r4
   17a90:	mov	r1, r5
   17a94:	bl	11194 <memcpy@plt>
   17a98:	pop	{r4, r5, r6, pc}
   17a9c:	push	{r4, lr}
   17aa0:	mov	r4, r0
   17aa4:	bl	11314 <strlen@plt>
   17aa8:	add	r1, r0, #1
   17aac:	mov	r0, r4
   17ab0:	bl	17a28 <__assert_fail@plt+0x6570>
   17ab4:	pop	{r4, pc}
   17ab8:	push	{r4, lr}
   17abc:	ldr	r3, [pc, #40]	; 17aec <__assert_fail@plt+0x6634>
   17ac0:	ldr	r4, [r3]
   17ac4:	mov	r2, #5
   17ac8:	ldr	r1, [pc, #32]	; 17af0 <__assert_fail@plt+0x6638>
   17acc:	mov	r0, #0
   17ad0:	bl	111e8 <dcgettext@plt>
   17ad4:	mov	r3, r0
   17ad8:	ldr	r2, [pc, #20]	; 17af4 <__assert_fail@plt+0x663c>
   17adc:	mov	r1, #0
   17ae0:	mov	r0, r4
   17ae4:	bl	1129c <error@plt>
   17ae8:	bl	114a0 <abort@plt>
   17aec:	andeq	fp, r2, r8, asr r1
   17af0:	strdeq	sl, [r1], -ip
   17af4:	andeq	sl, r1, ip, lsl r1
   17af8:	push	{r4, r5, r6, r7, lr}
   17afc:	sub	sp, sp, #20
   17b00:	mov	r7, r0
   17b04:	mov	r4, r2
   17b08:	mov	r5, r3
   17b0c:	ldr	r6, [sp, #56]	; 0x38
   17b10:	ldr	r3, [sp, #48]	; 0x30
   17b14:	str	r3, [sp]
   17b18:	add	r3, sp, #8
   17b1c:	mov	r2, r1
   17b20:	mov	r1, #0
   17b24:	bl	17d50 <__assert_fail@plt+0x6898>
   17b28:	cmp	r0, #0
   17b2c:	bne	17bac <__assert_fail@plt+0x66f4>
   17b30:	ldrd	r0, [sp, #8]
   17b34:	ldrd	r2, [sp, #40]	; 0x28
   17b38:	cmp	r1, r3
   17b3c:	cmpeq	r0, r2
   17b40:	movhi	r3, #1
   17b44:	movls	r3, #0
   17b48:	cmp	r1, r5
   17b4c:	cmpeq	r0, r4
   17b50:	orrcc	r3, r3, #1
   17b54:	cmp	r3, #0
   17b58:	beq	17c24 <__assert_fail@plt+0x676c>
   17b5c:	mvn	r2, #-1073741824	; 0xc0000000
   17b60:	mov	r3, #0
   17b64:	cmp	r1, r3
   17b68:	cmpeq	r0, r2
   17b6c:	bls	17b9c <__assert_fail@plt+0x66e4>
   17b70:	bl	11338 <__errno_location@plt>
   17b74:	mov	r3, #75	; 0x4b
   17b78:	str	r3, [r0]
   17b7c:	cmp	r6, #0
   17b80:	bne	17bfc <__assert_fail@plt+0x6744>
   17b84:	mov	r6, #1
   17b88:	bl	11338 <__errno_location@plt>
   17b8c:	ldr	r4, [r0]
   17b90:	cmp	r4, #22
   17b94:	moveq	r4, #0
   17b98:	b	17c04 <__assert_fail@plt+0x674c>
   17b9c:	bl	11338 <__errno_location@plt>
   17ba0:	mov	r3, #34	; 0x22
   17ba4:	str	r3, [r0]
   17ba8:	b	17b7c <__assert_fail@plt+0x66c4>
   17bac:	cmp	r0, #1
   17bb0:	beq	17bc8 <__assert_fail@plt+0x6710>
   17bb4:	cmp	r0, #3
   17bb8:	beq	17bec <__assert_fail@plt+0x6734>
   17bbc:	cmp	r6, #0
   17bc0:	moveq	r6, #1
   17bc4:	b	17b88 <__assert_fail@plt+0x66d0>
   17bc8:	bl	11338 <__errno_location@plt>
   17bcc:	mov	r3, #75	; 0x4b
   17bd0:	str	r3, [r0]
   17bd4:	cmp	r6, #0
   17bd8:	bne	17b88 <__assert_fail@plt+0x66d0>
   17bdc:	bl	11338 <__errno_location@plt>
   17be0:	ldr	r4, [r0]
   17be4:	mov	r6, #1
   17be8:	b	17c04 <__assert_fail@plt+0x674c>
   17bec:	bl	11338 <__errno_location@plt>
   17bf0:	mov	r3, #0
   17bf4:	str	r3, [r0]
   17bf8:	b	17bd4 <__assert_fail@plt+0x671c>
   17bfc:	bl	11338 <__errno_location@plt>
   17c00:	ldr	r4, [r0]
   17c04:	mov	r0, r7
   17c08:	bl	1632c <__assert_fail@plt+0x4e74>
   17c0c:	str	r0, [sp]
   17c10:	ldr	r3, [sp, #52]	; 0x34
   17c14:	ldr	r2, [pc, #16]	; 17c2c <__assert_fail@plt+0x6774>
   17c18:	mov	r1, r4
   17c1c:	mov	r0, r6
   17c20:	bl	1129c <error@plt>
   17c24:	add	sp, sp, #20
   17c28:	pop	{r4, r5, r6, r7, pc}
   17c2c:	andeq	sl, r1, r8, lsl r1
   17c30:	push	{r4, r5, lr}
   17c34:	sub	sp, sp, #28
   17c38:	ldr	r1, [sp, #56]	; 0x38
   17c3c:	str	r1, [sp, #16]
   17c40:	ldr	r1, [sp, #52]	; 0x34
   17c44:	str	r1, [sp, #12]
   17c48:	ldr	r1, [sp, #48]	; 0x30
   17c4c:	str	r1, [sp, #8]
   17c50:	ldrd	r4, [sp, #40]	; 0x28
   17c54:	strd	r4, [sp]
   17c58:	mov	r1, #10
   17c5c:	bl	17af8 <__assert_fail@plt+0x6640>
   17c60:	add	sp, sp, #28
   17c64:	pop	{r4, r5, pc}
   17c68:	push	{r4, r5, r6, lr}
   17c6c:	mov	r5, r0
   17c70:	subs	r4, r1, #0
   17c74:	blt	17cc8 <__assert_fail@plt+0x6810>
   17c78:	cmp	r4, #0
   17c7c:	moveq	r3, #0
   17c80:	beq	17cac <__assert_fail@plt+0x67f4>
   17c84:	mov	r2, r4
   17c88:	asr	r3, r4, #31
   17c8c:	mvn	r0, #0
   17c90:	mvn	r1, #0
   17c94:	bl	19034 <__assert_fail@plt+0x7b7c>
   17c98:	ldrd	r2, [r5]
   17c9c:	cmp	r1, r3
   17ca0:	cmpeq	r0, r2
   17ca4:	movcc	r3, #1
   17ca8:	movcs	r3, #0
   17cac:	cmp	r3, #0
   17cb0:	beq	17ce8 <__assert_fail@plt+0x6830>
   17cb4:	mvn	r2, #0
   17cb8:	mvn	r3, #0
   17cbc:	strd	r2, [r5]
   17cc0:	mov	r0, #1
   17cc4:	pop	{r4, r5, r6, pc}
   17cc8:	mov	r1, r4
   17ccc:	mov	r0, #0
   17cd0:	bl	18968 <__assert_fail@plt+0x74b0>
   17cd4:	ldrd	r2, [r5]
   17cd8:	orrs	r3, r2, r3
   17cdc:	movne	r3, #1
   17ce0:	moveq	r3, #0
   17ce4:	b	17cac <__assert_fail@plt+0x67f4>
   17ce8:	asr	r3, r4, #31
   17cec:	ldr	r1, [r5, #4]
   17cf0:	ldr	r2, [r5]
   17cf4:	mul	r3, r3, r2
   17cf8:	mla	r1, r4, r1, r3
   17cfc:	umull	r2, r3, r2, r4
   17d00:	add	r3, r1, r3
   17d04:	strd	r2, [r5]
   17d08:	mov	r0, #0
   17d0c:	pop	{r4, r5, r6, pc}
   17d10:	push	{r4, r5, r6, r7, r8, lr}
   17d14:	subs	r4, r2, #0
   17d18:	beq	17d48 <__assert_fail@plt+0x6890>
   17d1c:	mov	r7, r1
   17d20:	mov	r6, r0
   17d24:	mov	r5, #0
   17d28:	mov	r1, r7
   17d2c:	mov	r0, r6
   17d30:	bl	17c68 <__assert_fail@plt+0x67b0>
   17d34:	orr	r5, r5, r0
   17d38:	subs	r4, r4, #1
   17d3c:	bne	17d28 <__assert_fail@plt+0x6870>
   17d40:	mov	r0, r5
   17d44:	pop	{r4, r5, r6, r7, r8, pc}
   17d48:	mov	r5, #0
   17d4c:	b	17d40 <__assert_fail@plt+0x6888>
   17d50:	push	{r4, r5, r6, r7, r8, r9, lr}
   17d54:	sub	sp, sp, #20
   17d58:	cmp	r2, #36	; 0x24
   17d5c:	bhi	17d9c <__assert_fail@plt+0x68e4>
   17d60:	mov	r5, r0
   17d64:	mov	r6, r1
   17d68:	mov	r7, r2
   17d6c:	mov	r9, r3
   17d70:	cmp	r1, #0
   17d74:	addeq	r6, sp, #12
   17d78:	bl	11338 <__errno_location@plt>
   17d7c:	mov	r8, r0
   17d80:	mov	r3, #0
   17d84:	str	r3, [r0]
   17d88:	ldrb	r4, [r5]
   17d8c:	bl	112fc <__ctype_b_loc@plt>
   17d90:	ldr	r1, [r0]
   17d94:	mov	r2, r5
   17d98:	b	17db4 <__assert_fail@plt+0x68fc>
   17d9c:	ldr	r3, [pc, #1056]	; 181c4 <__assert_fail@plt+0x6d0c>
   17da0:	mov	r2, #85	; 0x55
   17da4:	ldr	r1, [pc, #1052]	; 181c8 <__assert_fail@plt+0x6d10>
   17da8:	ldr	r0, [pc, #1052]	; 181cc <__assert_fail@plt+0x6d14>
   17dac:	bl	114b8 <__assert_fail@plt>
   17db0:	ldrb	r4, [r2, #1]!
   17db4:	lsl	r3, r4, #1
   17db8:	ldrh	r3, [r1, r3]
   17dbc:	tst	r3, #8192	; 0x2000
   17dc0:	bne	17db0 <__assert_fail@plt+0x68f8>
   17dc4:	cmp	r4, #45	; 0x2d
   17dc8:	moveq	r4, #4
   17dcc:	bne	17ddc <__assert_fail@plt+0x6924>
   17dd0:	mov	r0, r4
   17dd4:	add	sp, sp, #20
   17dd8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17ddc:	mov	r3, #0
   17de0:	mov	r2, r7
   17de4:	mov	r1, r6
   17de8:	mov	r0, r5
   17dec:	bl	111a0 <__strtoull_internal@plt>
   17df0:	strd	r0, [sp]
   17df4:	ldr	r7, [r6]
   17df8:	cmp	r5, r7
   17dfc:	beq	17e20 <__assert_fail@plt+0x6968>
   17e00:	ldr	r3, [r8]
   17e04:	cmp	r3, #0
   17e08:	beq	17e68 <__assert_fail@plt+0x69b0>
   17e0c:	cmp	r3, #34	; 0x22
   17e10:	moveq	r4, #1
   17e14:	beq	17e6c <__assert_fail@plt+0x69b4>
   17e18:	mov	r4, #4
   17e1c:	b	17dd0 <__assert_fail@plt+0x6918>
   17e20:	ldr	r3, [sp, #48]	; 0x30
   17e24:	cmp	r3, #0
   17e28:	moveq	r4, #4
   17e2c:	beq	17dd0 <__assert_fail@plt+0x6918>
   17e30:	ldrb	r1, [r7]
   17e34:	cmp	r1, #0
   17e38:	moveq	r4, #4
   17e3c:	beq	17dd0 <__assert_fail@plt+0x6918>
   17e40:	mov	r0, r3
   17e44:	bl	11320 <strchr@plt>
   17e48:	cmp	r0, #0
   17e4c:	moveq	r4, #4
   17e50:	beq	17dd0 <__assert_fail@plt+0x6918>
   17e54:	mov	r2, #1
   17e58:	mov	r3, #0
   17e5c:	strd	r2, [sp]
   17e60:	mov	r4, #0
   17e64:	b	17e78 <__assert_fail@plt+0x69c0>
   17e68:	mov	r4, #0
   17e6c:	ldr	r3, [sp, #48]	; 0x30
   17e70:	cmp	r3, #0
   17e74:	beq	17f68 <__assert_fail@plt+0x6ab0>
   17e78:	ldrb	r5, [r7]
   17e7c:	cmp	r5, #0
   17e80:	beq	18100 <__assert_fail@plt+0x6c48>
   17e84:	mov	r1, r5
   17e88:	ldr	r0, [sp, #48]	; 0x30
   17e8c:	bl	11320 <strchr@plt>
   17e90:	cmp	r0, #0
   17e94:	beq	17f70 <__assert_fail@plt+0x6ab8>
   17e98:	sub	r3, r5, #69	; 0x45
   17e9c:	cmp	r3, #47	; 0x2f
   17ea0:	ldrls	pc, [pc, r3, lsl #2]
   17ea4:	b	17fdc <__assert_fail@plt+0x6b24>
   17ea8:	andeq	r7, r1, r0, lsl #31
   17eac:	ldrdeq	r7, [r1], -ip
   17eb0:	andeq	r7, r1, r0, lsl #31
   17eb4:	ldrdeq	r7, [r1], -ip
   17eb8:	ldrdeq	r7, [r1], -ip
   17ebc:	ldrdeq	r7, [r1], -ip
   17ec0:	andeq	r7, r1, r0, lsl #31
   17ec4:	ldrdeq	r7, [r1], -ip
   17ec8:	andeq	r7, r1, r0, lsl #31
   17ecc:	ldrdeq	r7, [r1], -ip
   17ed0:	ldrdeq	r7, [r1], -ip
   17ed4:	andeq	r7, r1, r0, lsl #31
   17ed8:	ldrdeq	r7, [r1], -ip
   17edc:	ldrdeq	r7, [r1], -ip
   17ee0:	ldrdeq	r7, [r1], -ip
   17ee4:	andeq	r7, r1, r0, lsl #31
   17ee8:	ldrdeq	r7, [r1], -ip
   17eec:	ldrdeq	r7, [r1], -ip
   17ef0:	ldrdeq	r7, [r1], -ip
   17ef4:	ldrdeq	r7, [r1], -ip
   17ef8:	andeq	r7, r1, r0, lsl #31
   17efc:	andeq	r7, r1, r0, lsl #31
   17f00:	ldrdeq	r7, [r1], -ip
   17f04:	ldrdeq	r7, [r1], -ip
   17f08:	ldrdeq	r7, [r1], -ip
   17f0c:	ldrdeq	r7, [r1], -ip
   17f10:	ldrdeq	r7, [r1], -ip
   17f14:	ldrdeq	r7, [r1], -ip
   17f18:	ldrdeq	r7, [r1], -ip
   17f1c:	ldrdeq	r7, [r1], -ip
   17f20:	ldrdeq	r7, [r1], -ip
   17f24:	ldrdeq	r7, [r1], -ip
   17f28:	ldrdeq	r7, [r1], -ip
   17f2c:	ldrdeq	r7, [r1], -ip
   17f30:	andeq	r7, r1, r0, lsl #31
   17f34:	ldrdeq	r7, [r1], -ip
   17f38:	ldrdeq	r7, [r1], -ip
   17f3c:	ldrdeq	r7, [r1], -ip
   17f40:	andeq	r7, r1, r0, lsl #31
   17f44:	ldrdeq	r7, [r1], -ip
   17f48:	andeq	r7, r1, r0, lsl #31
   17f4c:	ldrdeq	r7, [r1], -ip
   17f50:	ldrdeq	r7, [r1], -ip
   17f54:	ldrdeq	r7, [r1], -ip
   17f58:	ldrdeq	r7, [r1], -ip
   17f5c:	ldrdeq	r7, [r1], -ip
   17f60:	ldrdeq	r7, [r1], -ip
   17f64:	andeq	r7, r1, r0, lsl #31
   17f68:	strd	r0, [r9]
   17f6c:	b	17dd0 <__assert_fail@plt+0x6918>
   17f70:	ldrd	r2, [sp]
   17f74:	strd	r2, [r9]
   17f78:	orr	r4, r4, #2
   17f7c:	b	17dd0 <__assert_fail@plt+0x6918>
   17f80:	mov	r1, #48	; 0x30
   17f84:	ldr	r0, [sp, #48]	; 0x30
   17f88:	bl	11320 <strchr@plt>
   17f8c:	cmp	r0, #0
   17f90:	beq	180cc <__assert_fail@plt+0x6c14>
   17f94:	ldrb	r3, [r7, #1]
   17f98:	cmp	r3, #68	; 0x44
   17f9c:	beq	17fb8 <__assert_fail@plt+0x6b00>
   17fa0:	cmp	r3, #105	; 0x69
   17fa4:	beq	17fc4 <__assert_fail@plt+0x6b0c>
   17fa8:	cmp	r3, #66	; 0x42
   17fac:	movne	r7, #1
   17fb0:	movne	r1, #1024	; 0x400
   17fb4:	bne	17fe4 <__assert_fail@plt+0x6b2c>
   17fb8:	mov	r7, #2
   17fbc:	mov	r1, #1000	; 0x3e8
   17fc0:	b	17fe4 <__assert_fail@plt+0x6b2c>
   17fc4:	ldrb	r7, [r7, #2]
   17fc8:	cmp	r7, #66	; 0x42
   17fcc:	movne	r7, #1
   17fd0:	moveq	r7, #3
   17fd4:	mov	r1, #1024	; 0x400
   17fd8:	b	17fe4 <__assert_fail@plt+0x6b2c>
   17fdc:	mov	r7, #1
   17fe0:	mov	r1, #1024	; 0x400
   17fe4:	sub	r5, r5, #66	; 0x42
   17fe8:	cmp	r5, #53	; 0x35
   17fec:	ldrls	pc, [pc, r5, lsl #2]
   17ff0:	b	181ac <__assert_fail@plt+0x6cf4>
   17ff4:	andeq	r8, r1, ip, lsl #2
   17ff8:	andeq	r8, r1, ip, lsr #3
   17ffc:	andeq	r8, r1, ip, lsr #3
   18000:	andeq	r8, r1, ip, lsl r1
   18004:	andeq	r8, r1, ip, lsr #3
   18008:	andeq	r8, r1, ip, lsr #2
   1800c:	andeq	r8, r1, ip, lsr #3
   18010:	andeq	r8, r1, ip, lsr #3
   18014:	andeq	r8, r1, ip, lsr #3
   18018:	andeq	r8, r1, ip, lsr r1
   1801c:	andeq	r8, r1, ip, lsr #3
   18020:	andeq	r8, r1, ip, asr #2
   18024:	andeq	r8, r1, ip, lsr #3
   18028:	andeq	r8, r1, ip, lsr #3
   1802c:	andeq	r8, r1, ip, asr r1
   18030:	andeq	r8, r1, ip, lsr #3
   18034:	andeq	r8, r1, ip, lsr #3
   18038:	andeq	r8, r1, ip, lsr #3
   1803c:	andeq	r8, r1, ip, ror #2
   18040:	andeq	r8, r1, ip, lsr #3
   18044:	andeq	r8, r1, ip, lsr #3
   18048:	andeq	r8, r1, ip, lsr #3
   1804c:	andeq	r8, r1, ip, lsr #3
   18050:	andeq	r8, r1, ip, lsl #3
   18054:	muleq	r1, ip, r1
   18058:	andeq	r8, r1, ip, lsr #3
   1805c:	andeq	r8, r1, ip, lsr #3
   18060:	andeq	r8, r1, ip, lsr #3
   18064:	andeq	r8, r1, ip, lsr #3
   18068:	andeq	r8, r1, ip, lsr #3
   1806c:	andeq	r8, r1, ip, lsr #3
   18070:	andeq	r8, r1, ip, lsr #3
   18074:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18078:			; <UNDEFINED> instruction: 0x000181bc
   1807c:	andeq	r8, r1, ip, lsr #3
   18080:	andeq	r8, r1, ip, lsr #3
   18084:	andeq	r8, r1, ip, lsr #3
   18088:	andeq	r8, r1, ip, lsr #2
   1808c:	andeq	r8, r1, ip, lsr #3
   18090:	andeq	r8, r1, ip, lsr #3
   18094:	andeq	r8, r1, ip, lsr #3
   18098:	andeq	r8, r1, ip, lsr r1
   1809c:	andeq	r8, r1, ip, lsr #3
   180a0:	andeq	r8, r1, ip, asr #2
   180a4:	andeq	r8, r1, ip, lsr #3
   180a8:	andeq	r8, r1, ip, lsr #3
   180ac:	andeq	r8, r1, ip, lsr #3
   180b0:	andeq	r8, r1, ip, lsr #3
   180b4:	andeq	r8, r1, ip, lsr #3
   180b8:	andeq	r8, r1, ip, lsr #3
   180bc:	andeq	r8, r1, ip, ror #2
   180c0:	andeq	r8, r1, ip, lsr #3
   180c4:	andeq	r8, r1, ip, lsr #3
   180c8:	andeq	r8, r1, ip, ror r1
   180cc:	mov	r7, #1
   180d0:	mov	r1, #1024	; 0x400
   180d4:	b	17fe4 <__assert_fail@plt+0x6b2c>
   180d8:	mov	r1, #512	; 0x200
   180dc:	mov	r0, sp
   180e0:	bl	17c68 <__assert_fail@plt+0x67b0>
   180e4:	orr	r4, r4, r0
   180e8:	ldr	r3, [r6]
   180ec:	add	r2, r3, r7
   180f0:	str	r2, [r6]
   180f4:	ldrb	r3, [r3, r7]
   180f8:	cmp	r3, #0
   180fc:	orrne	r4, r4, #2
   18100:	ldrd	r2, [sp]
   18104:	strd	r2, [r9]
   18108:	b	17dd0 <__assert_fail@plt+0x6918>
   1810c:	mov	r1, #1024	; 0x400
   18110:	mov	r0, sp
   18114:	bl	17c68 <__assert_fail@plt+0x67b0>
   18118:	b	180e4 <__assert_fail@plt+0x6c2c>
   1811c:	mov	r2, #6
   18120:	mov	r0, sp
   18124:	bl	17d10 <__assert_fail@plt+0x6858>
   18128:	b	180e4 <__assert_fail@plt+0x6c2c>
   1812c:	mov	r2, #3
   18130:	mov	r0, sp
   18134:	bl	17d10 <__assert_fail@plt+0x6858>
   18138:	b	180e4 <__assert_fail@plt+0x6c2c>
   1813c:	mov	r2, #1
   18140:	mov	r0, sp
   18144:	bl	17d10 <__assert_fail@plt+0x6858>
   18148:	b	180e4 <__assert_fail@plt+0x6c2c>
   1814c:	mov	r2, #2
   18150:	mov	r0, sp
   18154:	bl	17d10 <__assert_fail@plt+0x6858>
   18158:	b	180e4 <__assert_fail@plt+0x6c2c>
   1815c:	mov	r2, #5
   18160:	mov	r0, sp
   18164:	bl	17d10 <__assert_fail@plt+0x6858>
   18168:	b	180e4 <__assert_fail@plt+0x6c2c>
   1816c:	mov	r2, #4
   18170:	mov	r0, sp
   18174:	bl	17d10 <__assert_fail@plt+0x6858>
   18178:	b	180e4 <__assert_fail@plt+0x6c2c>
   1817c:	mov	r1, #2
   18180:	mov	r0, sp
   18184:	bl	17c68 <__assert_fail@plt+0x67b0>
   18188:	b	180e4 <__assert_fail@plt+0x6c2c>
   1818c:	mov	r2, #8
   18190:	mov	r0, sp
   18194:	bl	17d10 <__assert_fail@plt+0x6858>
   18198:	b	180e4 <__assert_fail@plt+0x6c2c>
   1819c:	mov	r2, #7
   181a0:	mov	r0, sp
   181a4:	bl	17d10 <__assert_fail@plt+0x6858>
   181a8:	b	180e4 <__assert_fail@plt+0x6c2c>
   181ac:	ldrd	r2, [sp]
   181b0:	strd	r2, [r9]
   181b4:	orr	r4, r4, #2
   181b8:	b	17dd0 <__assert_fail@plt+0x6918>
   181bc:	mov	r0, #0
   181c0:	b	180e4 <__assert_fail@plt+0x6c2c>
   181c4:	andeq	sl, r1, r0, lsl r6
   181c8:	andeq	sl, r1, ip, lsl r6
   181cc:	andeq	sl, r1, ip, lsr #12
   181d0:	push	{r4, lr}
   181d4:	mov	r2, r0
   181d8:	mov	r3, r1
   181dc:	cmp	r1, #0
   181e0:	cmpne	r0, #0
   181e4:	moveq	r3, #1
   181e8:	moveq	r2, r3
   181ec:	umull	r0, r1, r2, r3
   181f0:	cmp	r0, #0
   181f4:	cmpge	r1, #0
   181f8:	bne	1820c <__assert_fail@plt+0x6d54>
   181fc:	mov	r1, r3
   18200:	mov	r0, r2
   18204:	bl	11128 <calloc@plt>
   18208:	pop	{r4, pc}
   1820c:	bl	11338 <__errno_location@plt>
   18210:	mov	r3, #12
   18214:	str	r3, [r0]
   18218:	mov	r0, #0
   1821c:	pop	{r4, pc}
   18220:	push	{r4, lr}
   18224:	cmp	r0, #0
   18228:	moveq	r0, #1
   1822c:	cmp	r0, #0
   18230:	blt	1823c <__assert_fail@plt+0x6d84>
   18234:	bl	112c0 <malloc@plt>
   18238:	pop	{r4, pc}
   1823c:	bl	11338 <__errno_location@plt>
   18240:	mov	r3, #12
   18244:	str	r3, [r0]
   18248:	mov	r0, #0
   1824c:	pop	{r4, pc}
   18250:	push	{r4, lr}
   18254:	cmp	r0, #0
   18258:	beq	18274 <__assert_fail@plt+0x6dbc>
   1825c:	cmp	r1, #0
   18260:	beq	18280 <__assert_fail@plt+0x6dc8>
   18264:	cmp	r1, #0
   18268:	blt	1828c <__assert_fail@plt+0x6dd4>
   1826c:	bl	11200 <realloc@plt>
   18270:	pop	{r4, pc}
   18274:	mov	r0, r1
   18278:	bl	18220 <__assert_fail@plt+0x6d68>
   1827c:	pop	{r4, pc}
   18280:	bl	13c70 <__assert_fail@plt+0x27b8>
   18284:	mov	r0, #0
   18288:	pop	{r4, pc}
   1828c:	bl	11338 <__errno_location@plt>
   18290:	mov	r3, #12
   18294:	str	r3, [r0]
   18298:	mov	r0, #0
   1829c:	pop	{r4, pc}
   182a0:	push	{r4, r5, r6, lr}
   182a4:	mov	r5, r0
   182a8:	bl	11284 <__fpending@plt>
   182ac:	mov	r6, r0
   182b0:	ldr	r4, [r5]
   182b4:	and	r4, r4, #32
   182b8:	mov	r0, r5
   182bc:	bl	18318 <__assert_fail@plt+0x6e60>
   182c0:	cmp	r4, #0
   182c4:	bne	182ec <__assert_fail@plt+0x6e34>
   182c8:	cmp	r0, #0
   182cc:	popeq	{r4, r5, r6, pc}
   182d0:	cmp	r6, #0
   182d4:	bne	18308 <__assert_fail@plt+0x6e50>
   182d8:	bl	11338 <__errno_location@plt>
   182dc:	ldr	r0, [r0]
   182e0:	subs	r0, r0, #9
   182e4:	mvnne	r0, #0
   182e8:	pop	{r4, r5, r6, pc}
   182ec:	cmp	r0, #0
   182f0:	bne	18310 <__assert_fail@plt+0x6e58>
   182f4:	bl	11338 <__errno_location@plt>
   182f8:	mov	r3, #0
   182fc:	str	r3, [r0]
   18300:	mvn	r0, #0
   18304:	pop	{r4, r5, r6, pc}
   18308:	mvn	r0, #0
   1830c:	pop	{r4, r5, r6, pc}
   18310:	mvn	r0, #0
   18314:	pop	{r4, r5, r6, pc}
   18318:	push	{r4, r5, r6, lr}
   1831c:	sub	sp, sp, #8
   18320:	mov	r4, r0
   18324:	bl	11398 <fileno@plt>
   18328:	cmp	r0, #0
   1832c:	blt	183a4 <__assert_fail@plt+0x6eec>
   18330:	mov	r0, r4
   18334:	bl	112d8 <__freading@plt>
   18338:	cmp	r0, #0
   1833c:	beq	18370 <__assert_fail@plt+0x6eb8>
   18340:	mov	r0, r4
   18344:	bl	11398 <fileno@plt>
   18348:	mov	r3, #1
   1834c:	str	r3, [sp]
   18350:	mov	r2, #0
   18354:	mov	r3, #0
   18358:	bl	11260 <lseek64@plt>
   1835c:	mvn	r2, #0
   18360:	mvn	r3, #0
   18364:	cmp	r1, r3
   18368:	cmpeq	r0, r2
   1836c:	beq	183b0 <__assert_fail@plt+0x6ef8>
   18370:	mov	r0, r4
   18374:	bl	183c0 <__assert_fail@plt+0x6f08>
   18378:	cmp	r0, #0
   1837c:	beq	183b0 <__assert_fail@plt+0x6ef8>
   18380:	bl	11338 <__errno_location@plt>
   18384:	mov	r5, r0
   18388:	ldr	r6, [r0]
   1838c:	mov	r0, r4
   18390:	bl	113b0 <fclose@plt>
   18394:	cmp	r6, #0
   18398:	strne	r6, [r5]
   1839c:	mvnne	r0, #0
   183a0:	b	183b8 <__assert_fail@plt+0x6f00>
   183a4:	mov	r0, r4
   183a8:	bl	113b0 <fclose@plt>
   183ac:	b	183b8 <__assert_fail@plt+0x6f00>
   183b0:	mov	r0, r4
   183b4:	bl	113b0 <fclose@plt>
   183b8:	add	sp, sp, #8
   183bc:	pop	{r4, r5, r6, pc}
   183c0:	push	{r4, lr}
   183c4:	sub	sp, sp, #8
   183c8:	subs	r4, r0, #0
   183cc:	beq	183e0 <__assert_fail@plt+0x6f28>
   183d0:	mov	r0, r4
   183d4:	bl	112d8 <__freading@plt>
   183d8:	cmp	r0, #0
   183dc:	bne	183f0 <__assert_fail@plt+0x6f38>
   183e0:	mov	r0, r4
   183e4:	bl	11164 <fflush@plt>
   183e8:	add	sp, sp, #8
   183ec:	pop	{r4, pc}
   183f0:	ldr	r3, [r4]
   183f4:	tst	r3, #256	; 0x100
   183f8:	bne	18408 <__assert_fail@plt+0x6f50>
   183fc:	mov	r0, r4
   18400:	bl	11164 <fflush@plt>
   18404:	b	183e8 <__assert_fail@plt+0x6f30>
   18408:	mov	r3, #1
   1840c:	str	r3, [sp]
   18410:	mov	r2, #0
   18414:	mov	r3, #0
   18418:	mov	r0, r4
   1841c:	bl	184c0 <__assert_fail@plt+0x7008>
   18420:	b	183fc <__assert_fail@plt+0x6f44>
   18424:	push	{r4, r5, r6, lr}
   18428:	mov	r5, r1
   1842c:	bl	1141c <fopen64@plt>
   18430:	subs	r4, r0, #0
   18434:	beq	18448 <__assert_fail@plt+0x6f90>
   18438:	mov	r0, r4
   1843c:	bl	11398 <fileno@plt>
   18440:	cmp	r0, #2
   18444:	bls	18450 <__assert_fail@plt+0x6f98>
   18448:	mov	r0, r4
   1844c:	pop	{r4, r5, r6, pc}
   18450:	bl	18640 <__assert_fail@plt+0x7188>
   18454:	subs	r6, r0, #0
   18458:	blt	184a0 <__assert_fail@plt+0x6fe8>
   1845c:	mov	r0, r4
   18460:	bl	18318 <__assert_fail@plt+0x6e60>
   18464:	cmp	r0, #0
   18468:	bne	18480 <__assert_fail@plt+0x6fc8>
   1846c:	mov	r1, r5
   18470:	mov	r0, r6
   18474:	bl	1111c <fdopen@plt>
   18478:	subs	r4, r0, #0
   1847c:	bne	18448 <__assert_fail@plt+0x6f90>
   18480:	bl	11338 <__errno_location@plt>
   18484:	mov	r4, r0
   18488:	ldr	r5, [r0]
   1848c:	mov	r0, r6
   18490:	bl	114ac <close@plt>
   18494:	str	r5, [r4]
   18498:	mov	r4, #0
   1849c:	b	18448 <__assert_fail@plt+0x6f90>
   184a0:	bl	11338 <__errno_location@plt>
   184a4:	mov	r5, r0
   184a8:	ldr	r6, [r0]
   184ac:	mov	r0, r4
   184b0:	bl	18318 <__assert_fail@plt+0x6e60>
   184b4:	str	r6, [r5]
   184b8:	mov	r4, #0
   184bc:	b	18448 <__assert_fail@plt+0x6f90>
   184c0:	push	{r4, r5, r6, r7, lr}
   184c4:	sub	sp, sp, #12
   184c8:	mov	r4, r0
   184cc:	mov	r6, r2
   184d0:	mov	r7, r3
   184d4:	ldr	r5, [sp, #32]
   184d8:	ldr	r2, [r0, #8]
   184dc:	ldr	r3, [r0, #4]
   184e0:	cmp	r2, r3
   184e4:	beq	18504 <__assert_fail@plt+0x704c>
   184e8:	str	r5, [sp]
   184ec:	mov	r2, r6
   184f0:	mov	r3, r7
   184f4:	mov	r0, r4
   184f8:	bl	113bc <fseeko64@plt>
   184fc:	add	sp, sp, #12
   18500:	pop	{r4, r5, r6, r7, pc}
   18504:	ldr	r2, [r0, #20]
   18508:	ldr	r3, [r0, #16]
   1850c:	cmp	r2, r3
   18510:	bne	184e8 <__assert_fail@plt+0x7030>
   18514:	ldr	r3, [r0, #36]	; 0x24
   18518:	cmp	r3, #0
   1851c:	bne	184e8 <__assert_fail@plt+0x7030>
   18520:	bl	11398 <fileno@plt>
   18524:	str	r5, [sp]
   18528:	mov	r2, r6
   1852c:	mov	r3, r7
   18530:	bl	11260 <lseek64@plt>
   18534:	mvn	r2, #0
   18538:	mvn	r3, #0
   1853c:	cmp	r1, r3
   18540:	cmpeq	r0, r2
   18544:	beq	18560 <__assert_fail@plt+0x70a8>
   18548:	ldr	r3, [r4]
   1854c:	bic	r3, r3, #16
   18550:	str	r3, [r4]
   18554:	strd	r0, [r4, #80]	; 0x50
   18558:	mov	r0, #0
   1855c:	b	184fc <__assert_fail@plt+0x7044>
   18560:	mvn	r0, #0
   18564:	b	184fc <__assert_fail@plt+0x7044>
   18568:	push	{r4, lr}
   1856c:	mov	r0, #14
   18570:	bl	11404 <nl_langinfo@plt>
   18574:	cmp	r0, #0
   18578:	beq	18590 <__assert_fail@plt+0x70d8>
   1857c:	ldrb	r2, [r0]
   18580:	ldr	r3, [pc, #16]	; 18598 <__assert_fail@plt+0x70e0>
   18584:	cmp	r2, #0
   18588:	moveq	r0, r3
   1858c:	pop	{r4, pc}
   18590:	ldr	r0, [pc]	; 18598 <__assert_fail@plt+0x70e0>
   18594:	pop	{r4, pc}
   18598:	andeq	sl, r1, r4, asr r6
   1859c:	push	{r4, r5, r6, r7, lr}
   185a0:	sub	sp, sp, #12
   185a4:	mov	r7, r1
   185a8:	mov	r5, r2
   185ac:	subs	r6, r0, #0
   185b0:	addeq	r6, sp, #4
   185b4:	mov	r0, r6
   185b8:	bl	11290 <mbrtowc@plt>
   185bc:	mov	r4, r0
   185c0:	cmp	r5, #0
   185c4:	cmnne	r0, #3
   185c8:	bhi	185d8 <__assert_fail@plt+0x7120>
   185cc:	mov	r0, r4
   185d0:	add	sp, sp, #12
   185d4:	pop	{r4, r5, r6, r7, pc}
   185d8:	mov	r0, #0
   185dc:	bl	18654 <__assert_fail@plt+0x719c>
   185e0:	cmp	r0, #0
   185e4:	ldrbeq	r3, [r7]
   185e8:	streq	r3, [r6]
   185ec:	moveq	r4, #1
   185f0:	b	185cc <__assert_fail@plt+0x7114>
   185f4:	push	{r4, r5, r6, lr}
   185f8:	mov	r6, r0
   185fc:	mov	r5, r1
   18600:	subs	r4, r2, #0
   18604:	beq	18630 <__assert_fail@plt+0x7178>
   18608:	mov	r1, r4
   1860c:	mvn	r0, #0
   18610:	bl	1875c <__assert_fail@plt+0x72a4>
   18614:	cmp	r0, r5
   18618:	bcs	18630 <__assert_fail@plt+0x7178>
   1861c:	bl	11338 <__errno_location@plt>
   18620:	mov	r3, #12
   18624:	str	r3, [r0]
   18628:	mov	r0, #0
   1862c:	pop	{r4, r5, r6, pc}
   18630:	mul	r1, r5, r4
   18634:	mov	r0, r6
   18638:	bl	18250 <__assert_fail@plt+0x6d98>
   1863c:	pop	{r4, r5, r6, pc}
   18640:	push	{r4, lr}
   18644:	mov	r2, #3
   18648:	mov	r1, #0
   1864c:	bl	139dc <__assert_fail@plt+0x2524>
   18650:	pop	{r4, pc}
   18654:	push	{lr}		; (str lr, [sp, #-4]!)
   18658:	sub	sp, sp, #268	; 0x10c
   1865c:	ldr	r2, [pc, #68]	; 186a8 <__assert_fail@plt+0x71f0>
   18660:	add	r1, sp, #4
   18664:	bl	186b4 <__assert_fail@plt+0x71fc>
   18668:	cmp	r0, #0
   1866c:	movne	r0, #0
   18670:	bne	186a0 <__assert_fail@plt+0x71e8>
   18674:	ldr	r1, [pc, #48]	; 186ac <__assert_fail@plt+0x71f4>
   18678:	add	r0, sp, #4
   1867c:	bl	11158 <strcmp@plt>
   18680:	cmp	r0, #0
   18684:	moveq	r0, #0
   18688:	beq	186a0 <__assert_fail@plt+0x71e8>
   1868c:	ldr	r1, [pc, #28]	; 186b0 <__assert_fail@plt+0x71f8>
   18690:	add	r0, sp, #4
   18694:	bl	11158 <strcmp@plt>
   18698:	adds	r0, r0, #0
   1869c:	movne	r0, #1
   186a0:	add	sp, sp, #268	; 0x10c
   186a4:	pop	{pc}		; (ldr pc, [sp], #4)
   186a8:	andeq	r0, r0, r1, lsl #2
   186ac:	andeq	sl, r1, ip, asr r6
   186b0:	andeq	sl, r1, r0, ror #12
   186b4:	push	{r4, r5, r6, lr}
   186b8:	mov	r6, r1
   186bc:	mov	r4, r2
   186c0:	mov	r1, #0
   186c4:	bl	113e0 <setlocale@plt>
   186c8:	subs	r5, r0, #0
   186cc:	beq	186f0 <__assert_fail@plt+0x7238>
   186d0:	mov	r0, r5
   186d4:	bl	11314 <strlen@plt>
   186d8:	cmp	r4, r0
   186dc:	bhi	18708 <__assert_fail@plt+0x7250>
   186e0:	cmp	r4, #0
   186e4:	bne	18720 <__assert_fail@plt+0x7268>
   186e8:	mov	r0, #34	; 0x22
   186ec:	pop	{r4, r5, r6, pc}
   186f0:	cmp	r4, #0
   186f4:	beq	18744 <__assert_fail@plt+0x728c>
   186f8:	mov	r3, #0
   186fc:	strb	r3, [r6]
   18700:	mov	r0, #22
   18704:	pop	{r4, r5, r6, pc}
   18708:	add	r2, r0, #1
   1870c:	mov	r1, r5
   18710:	mov	r0, r6
   18714:	bl	11194 <memcpy@plt>
   18718:	mov	r0, #0
   1871c:	pop	{r4, r5, r6, pc}
   18720:	sub	r4, r4, #1
   18724:	mov	r2, r4
   18728:	mov	r1, r5
   1872c:	mov	r0, r6
   18730:	bl	11194 <memcpy@plt>
   18734:	mov	r3, #0
   18738:	strb	r3, [r6, r4]
   1873c:	mov	r0, #34	; 0x22
   18740:	pop	{r4, r5, r6, pc}
   18744:	mov	r0, #22
   18748:	pop	{r4, r5, r6, pc}
   1874c:	push	{r4, lr}
   18750:	mov	r1, #0
   18754:	bl	113e0 <setlocale@plt>
   18758:	pop	{r4, pc}
   1875c:	subs	r2, r1, #1
   18760:	bxeq	lr
   18764:	bcc	1893c <__assert_fail@plt+0x7484>
   18768:	cmp	r0, r1
   1876c:	bls	18920 <__assert_fail@plt+0x7468>
   18770:	tst	r1, r2
   18774:	beq	1892c <__assert_fail@plt+0x7474>
   18778:	clz	r3, r0
   1877c:	clz	r2, r1
   18780:	sub	r3, r2, r3
   18784:	rsbs	r3, r3, #31
   18788:	addne	r3, r3, r3, lsl #1
   1878c:	mov	r2, #0
   18790:	addne	pc, pc, r3, lsl #2
   18794:	nop			; (mov r0, r0)
   18798:	cmp	r0, r1, lsl #31
   1879c:	adc	r2, r2, r2
   187a0:	subcs	r0, r0, r1, lsl #31
   187a4:	cmp	r0, r1, lsl #30
   187a8:	adc	r2, r2, r2
   187ac:	subcs	r0, r0, r1, lsl #30
   187b0:	cmp	r0, r1, lsl #29
   187b4:	adc	r2, r2, r2
   187b8:	subcs	r0, r0, r1, lsl #29
   187bc:	cmp	r0, r1, lsl #28
   187c0:	adc	r2, r2, r2
   187c4:	subcs	r0, r0, r1, lsl #28
   187c8:	cmp	r0, r1, lsl #27
   187cc:	adc	r2, r2, r2
   187d0:	subcs	r0, r0, r1, lsl #27
   187d4:	cmp	r0, r1, lsl #26
   187d8:	adc	r2, r2, r2
   187dc:	subcs	r0, r0, r1, lsl #26
   187e0:	cmp	r0, r1, lsl #25
   187e4:	adc	r2, r2, r2
   187e8:	subcs	r0, r0, r1, lsl #25
   187ec:	cmp	r0, r1, lsl #24
   187f0:	adc	r2, r2, r2
   187f4:	subcs	r0, r0, r1, lsl #24
   187f8:	cmp	r0, r1, lsl #23
   187fc:	adc	r2, r2, r2
   18800:	subcs	r0, r0, r1, lsl #23
   18804:	cmp	r0, r1, lsl #22
   18808:	adc	r2, r2, r2
   1880c:	subcs	r0, r0, r1, lsl #22
   18810:	cmp	r0, r1, lsl #21
   18814:	adc	r2, r2, r2
   18818:	subcs	r0, r0, r1, lsl #21
   1881c:	cmp	r0, r1, lsl #20
   18820:	adc	r2, r2, r2
   18824:	subcs	r0, r0, r1, lsl #20
   18828:	cmp	r0, r1, lsl #19
   1882c:	adc	r2, r2, r2
   18830:	subcs	r0, r0, r1, lsl #19
   18834:	cmp	r0, r1, lsl #18
   18838:	adc	r2, r2, r2
   1883c:	subcs	r0, r0, r1, lsl #18
   18840:	cmp	r0, r1, lsl #17
   18844:	adc	r2, r2, r2
   18848:	subcs	r0, r0, r1, lsl #17
   1884c:	cmp	r0, r1, lsl #16
   18850:	adc	r2, r2, r2
   18854:	subcs	r0, r0, r1, lsl #16
   18858:	cmp	r0, r1, lsl #15
   1885c:	adc	r2, r2, r2
   18860:	subcs	r0, r0, r1, lsl #15
   18864:	cmp	r0, r1, lsl #14
   18868:	adc	r2, r2, r2
   1886c:	subcs	r0, r0, r1, lsl #14
   18870:	cmp	r0, r1, lsl #13
   18874:	adc	r2, r2, r2
   18878:	subcs	r0, r0, r1, lsl #13
   1887c:	cmp	r0, r1, lsl #12
   18880:	adc	r2, r2, r2
   18884:	subcs	r0, r0, r1, lsl #12
   18888:	cmp	r0, r1, lsl #11
   1888c:	adc	r2, r2, r2
   18890:	subcs	r0, r0, r1, lsl #11
   18894:	cmp	r0, r1, lsl #10
   18898:	adc	r2, r2, r2
   1889c:	subcs	r0, r0, r1, lsl #10
   188a0:	cmp	r0, r1, lsl #9
   188a4:	adc	r2, r2, r2
   188a8:	subcs	r0, r0, r1, lsl #9
   188ac:	cmp	r0, r1, lsl #8
   188b0:	adc	r2, r2, r2
   188b4:	subcs	r0, r0, r1, lsl #8
   188b8:	cmp	r0, r1, lsl #7
   188bc:	adc	r2, r2, r2
   188c0:	subcs	r0, r0, r1, lsl #7
   188c4:	cmp	r0, r1, lsl #6
   188c8:	adc	r2, r2, r2
   188cc:	subcs	r0, r0, r1, lsl #6
   188d0:	cmp	r0, r1, lsl #5
   188d4:	adc	r2, r2, r2
   188d8:	subcs	r0, r0, r1, lsl #5
   188dc:	cmp	r0, r1, lsl #4
   188e0:	adc	r2, r2, r2
   188e4:	subcs	r0, r0, r1, lsl #4
   188e8:	cmp	r0, r1, lsl #3
   188ec:	adc	r2, r2, r2
   188f0:	subcs	r0, r0, r1, lsl #3
   188f4:	cmp	r0, r1, lsl #2
   188f8:	adc	r2, r2, r2
   188fc:	subcs	r0, r0, r1, lsl #2
   18900:	cmp	r0, r1, lsl #1
   18904:	adc	r2, r2, r2
   18908:	subcs	r0, r0, r1, lsl #1
   1890c:	cmp	r0, r1
   18910:	adc	r2, r2, r2
   18914:	subcs	r0, r0, r1
   18918:	mov	r0, r2
   1891c:	bx	lr
   18920:	moveq	r0, #1
   18924:	movne	r0, #0
   18928:	bx	lr
   1892c:	clz	r2, r1
   18930:	rsb	r2, r2, #31
   18934:	lsr	r0, r0, r2
   18938:	bx	lr
   1893c:	cmp	r0, #0
   18940:	mvnne	r0, #0
   18944:	b	19070 <__assert_fail@plt+0x7bb8>
   18948:	cmp	r1, #0
   1894c:	beq	1893c <__assert_fail@plt+0x7484>
   18950:	push	{r0, r1, lr}
   18954:	bl	1875c <__assert_fail@plt+0x72a4>
   18958:	pop	{r1, r2, lr}
   1895c:	mul	r3, r2, r0
   18960:	sub	r1, r1, r3
   18964:	bx	lr
   18968:	cmp	r1, #0
   1896c:	beq	18b78 <__assert_fail@plt+0x76c0>
   18970:	eor	ip, r0, r1
   18974:	rsbmi	r1, r1, #0
   18978:	subs	r2, r1, #1
   1897c:	beq	18b44 <__assert_fail@plt+0x768c>
   18980:	movs	r3, r0
   18984:	rsbmi	r3, r0, #0
   18988:	cmp	r3, r1
   1898c:	bls	18b50 <__assert_fail@plt+0x7698>
   18990:	tst	r1, r2
   18994:	beq	18b60 <__assert_fail@plt+0x76a8>
   18998:	clz	r2, r3
   1899c:	clz	r0, r1
   189a0:	sub	r2, r0, r2
   189a4:	rsbs	r2, r2, #31
   189a8:	addne	r2, r2, r2, lsl #1
   189ac:	mov	r0, #0
   189b0:	addne	pc, pc, r2, lsl #2
   189b4:	nop			; (mov r0, r0)
   189b8:	cmp	r3, r1, lsl #31
   189bc:	adc	r0, r0, r0
   189c0:	subcs	r3, r3, r1, lsl #31
   189c4:	cmp	r3, r1, lsl #30
   189c8:	adc	r0, r0, r0
   189cc:	subcs	r3, r3, r1, lsl #30
   189d0:	cmp	r3, r1, lsl #29
   189d4:	adc	r0, r0, r0
   189d8:	subcs	r3, r3, r1, lsl #29
   189dc:	cmp	r3, r1, lsl #28
   189e0:	adc	r0, r0, r0
   189e4:	subcs	r3, r3, r1, lsl #28
   189e8:	cmp	r3, r1, lsl #27
   189ec:	adc	r0, r0, r0
   189f0:	subcs	r3, r3, r1, lsl #27
   189f4:	cmp	r3, r1, lsl #26
   189f8:	adc	r0, r0, r0
   189fc:	subcs	r3, r3, r1, lsl #26
   18a00:	cmp	r3, r1, lsl #25
   18a04:	adc	r0, r0, r0
   18a08:	subcs	r3, r3, r1, lsl #25
   18a0c:	cmp	r3, r1, lsl #24
   18a10:	adc	r0, r0, r0
   18a14:	subcs	r3, r3, r1, lsl #24
   18a18:	cmp	r3, r1, lsl #23
   18a1c:	adc	r0, r0, r0
   18a20:	subcs	r3, r3, r1, lsl #23
   18a24:	cmp	r3, r1, lsl #22
   18a28:	adc	r0, r0, r0
   18a2c:	subcs	r3, r3, r1, lsl #22
   18a30:	cmp	r3, r1, lsl #21
   18a34:	adc	r0, r0, r0
   18a38:	subcs	r3, r3, r1, lsl #21
   18a3c:	cmp	r3, r1, lsl #20
   18a40:	adc	r0, r0, r0
   18a44:	subcs	r3, r3, r1, lsl #20
   18a48:	cmp	r3, r1, lsl #19
   18a4c:	adc	r0, r0, r0
   18a50:	subcs	r3, r3, r1, lsl #19
   18a54:	cmp	r3, r1, lsl #18
   18a58:	adc	r0, r0, r0
   18a5c:	subcs	r3, r3, r1, lsl #18
   18a60:	cmp	r3, r1, lsl #17
   18a64:	adc	r0, r0, r0
   18a68:	subcs	r3, r3, r1, lsl #17
   18a6c:	cmp	r3, r1, lsl #16
   18a70:	adc	r0, r0, r0
   18a74:	subcs	r3, r3, r1, lsl #16
   18a78:	cmp	r3, r1, lsl #15
   18a7c:	adc	r0, r0, r0
   18a80:	subcs	r3, r3, r1, lsl #15
   18a84:	cmp	r3, r1, lsl #14
   18a88:	adc	r0, r0, r0
   18a8c:	subcs	r3, r3, r1, lsl #14
   18a90:	cmp	r3, r1, lsl #13
   18a94:	adc	r0, r0, r0
   18a98:	subcs	r3, r3, r1, lsl #13
   18a9c:	cmp	r3, r1, lsl #12
   18aa0:	adc	r0, r0, r0
   18aa4:	subcs	r3, r3, r1, lsl #12
   18aa8:	cmp	r3, r1, lsl #11
   18aac:	adc	r0, r0, r0
   18ab0:	subcs	r3, r3, r1, lsl #11
   18ab4:	cmp	r3, r1, lsl #10
   18ab8:	adc	r0, r0, r0
   18abc:	subcs	r3, r3, r1, lsl #10
   18ac0:	cmp	r3, r1, lsl #9
   18ac4:	adc	r0, r0, r0
   18ac8:	subcs	r3, r3, r1, lsl #9
   18acc:	cmp	r3, r1, lsl #8
   18ad0:	adc	r0, r0, r0
   18ad4:	subcs	r3, r3, r1, lsl #8
   18ad8:	cmp	r3, r1, lsl #7
   18adc:	adc	r0, r0, r0
   18ae0:	subcs	r3, r3, r1, lsl #7
   18ae4:	cmp	r3, r1, lsl #6
   18ae8:	adc	r0, r0, r0
   18aec:	subcs	r3, r3, r1, lsl #6
   18af0:	cmp	r3, r1, lsl #5
   18af4:	adc	r0, r0, r0
   18af8:	subcs	r3, r3, r1, lsl #5
   18afc:	cmp	r3, r1, lsl #4
   18b00:	adc	r0, r0, r0
   18b04:	subcs	r3, r3, r1, lsl #4
   18b08:	cmp	r3, r1, lsl #3
   18b0c:	adc	r0, r0, r0
   18b10:	subcs	r3, r3, r1, lsl #3
   18b14:	cmp	r3, r1, lsl #2
   18b18:	adc	r0, r0, r0
   18b1c:	subcs	r3, r3, r1, lsl #2
   18b20:	cmp	r3, r1, lsl #1
   18b24:	adc	r0, r0, r0
   18b28:	subcs	r3, r3, r1, lsl #1
   18b2c:	cmp	r3, r1
   18b30:	adc	r0, r0, r0
   18b34:	subcs	r3, r3, r1
   18b38:	cmp	ip, #0
   18b3c:	rsbmi	r0, r0, #0
   18b40:	bx	lr
   18b44:	teq	ip, r0
   18b48:	rsbmi	r0, r0, #0
   18b4c:	bx	lr
   18b50:	movcc	r0, #0
   18b54:	asreq	r0, ip, #31
   18b58:	orreq	r0, r0, #1
   18b5c:	bx	lr
   18b60:	clz	r2, r1
   18b64:	rsb	r2, r2, #31
   18b68:	cmp	ip, #0
   18b6c:	lsr	r0, r3, r2
   18b70:	rsbmi	r0, r0, #0
   18b74:	bx	lr
   18b78:	cmp	r0, #0
   18b7c:	mvngt	r0, #-2147483648	; 0x80000000
   18b80:	movlt	r0, #-2147483648	; 0x80000000
   18b84:	b	19070 <__assert_fail@plt+0x7bb8>
   18b88:	cmp	r1, #0
   18b8c:	beq	18b78 <__assert_fail@plt+0x76c0>
   18b90:	push	{r0, r1, lr}
   18b94:	bl	18970 <__assert_fail@plt+0x74b8>
   18b98:	pop	{r1, r2, lr}
   18b9c:	mul	r3, r2, r0
   18ba0:	sub	r1, r1, r3
   18ba4:	bx	lr
   18ba8:	eor	r1, r1, #-2147483648	; 0x80000000
   18bac:	b	18bb4 <__assert_fail@plt+0x76fc>
   18bb0:	eor	r3, r3, #-2147483648	; 0x80000000
   18bb4:	push	{r4, r5, lr}
   18bb8:	lsl	r4, r1, #1
   18bbc:	lsl	r5, r3, #1
   18bc0:	teq	r4, r5
   18bc4:	teqeq	r0, r2
   18bc8:	orrsne	ip, r4, r0
   18bcc:	orrsne	ip, r5, r2
   18bd0:	mvnsne	ip, r4, asr #21
   18bd4:	mvnsne	ip, r5, asr #21
   18bd8:	beq	18dc4 <__assert_fail@plt+0x790c>
   18bdc:	lsr	r4, r4, #21
   18be0:	rsbs	r5, r4, r5, lsr #21
   18be4:	rsblt	r5, r5, #0
   18be8:	ble	18c08 <__assert_fail@plt+0x7750>
   18bec:	add	r4, r4, r5
   18bf0:	eor	r2, r0, r2
   18bf4:	eor	r3, r1, r3
   18bf8:	eor	r0, r2, r0
   18bfc:	eor	r1, r3, r1
   18c00:	eor	r2, r0, r2
   18c04:	eor	r3, r1, r3
   18c08:	cmp	r5, #54	; 0x36
   18c0c:	pophi	{r4, r5, pc}
   18c10:	tst	r1, #-2147483648	; 0x80000000
   18c14:	lsl	r1, r1, #12
   18c18:	mov	ip, #1048576	; 0x100000
   18c1c:	orr	r1, ip, r1, lsr #12
   18c20:	beq	18c2c <__assert_fail@plt+0x7774>
   18c24:	rsbs	r0, r0, #0
   18c28:	rsc	r1, r1, #0
   18c2c:	tst	r3, #-2147483648	; 0x80000000
   18c30:	lsl	r3, r3, #12
   18c34:	orr	r3, ip, r3, lsr #12
   18c38:	beq	18c44 <__assert_fail@plt+0x778c>
   18c3c:	rsbs	r2, r2, #0
   18c40:	rsc	r3, r3, #0
   18c44:	teq	r4, r5
   18c48:	beq	18dac <__assert_fail@plt+0x78f4>
   18c4c:	sub	r4, r4, #1
   18c50:	rsbs	lr, r5, #32
   18c54:	blt	18c70 <__assert_fail@plt+0x77b8>
   18c58:	lsl	ip, r2, lr
   18c5c:	adds	r0, r0, r2, lsr r5
   18c60:	adc	r1, r1, #0
   18c64:	adds	r0, r0, r3, lsl lr
   18c68:	adcs	r1, r1, r3, asr r5
   18c6c:	b	18c8c <__assert_fail@plt+0x77d4>
   18c70:	sub	r5, r5, #32
   18c74:	add	lr, lr, #32
   18c78:	cmp	r2, #1
   18c7c:	lsl	ip, r3, lr
   18c80:	orrcs	ip, ip, #2
   18c84:	adds	r0, r0, r3, asr r5
   18c88:	adcs	r1, r1, r3, asr #31
   18c8c:	and	r5, r1, #-2147483648	; 0x80000000
   18c90:	bpl	18ca0 <__assert_fail@plt+0x77e8>
   18c94:	rsbs	ip, ip, #0
   18c98:	rscs	r0, r0, #0
   18c9c:	rsc	r1, r1, #0
   18ca0:	cmp	r1, #1048576	; 0x100000
   18ca4:	bcc	18ce4 <__assert_fail@plt+0x782c>
   18ca8:	cmp	r1, #2097152	; 0x200000
   18cac:	bcc	18ccc <__assert_fail@plt+0x7814>
   18cb0:	lsrs	r1, r1, #1
   18cb4:	rrxs	r0, r0
   18cb8:	rrx	ip, ip
   18cbc:	add	r4, r4, #1
   18cc0:	lsl	r2, r4, #21
   18cc4:	cmn	r2, #4194304	; 0x400000
   18cc8:	bcs	18e24 <__assert_fail@plt+0x796c>
   18ccc:	cmp	ip, #-2147483648	; 0x80000000
   18cd0:	lsrseq	ip, r0, #1
   18cd4:	adcs	r0, r0, #0
   18cd8:	adc	r1, r1, r4, lsl #20
   18cdc:	orr	r1, r1, r5
   18ce0:	pop	{r4, r5, pc}
   18ce4:	lsls	ip, ip, #1
   18ce8:	adcs	r0, r0, r0
   18cec:	adc	r1, r1, r1
   18cf0:	tst	r1, #1048576	; 0x100000
   18cf4:	sub	r4, r4, #1
   18cf8:	bne	18ccc <__assert_fail@plt+0x7814>
   18cfc:	teq	r1, #0
   18d00:	moveq	r1, r0
   18d04:	moveq	r0, #0
   18d08:	clz	r3, r1
   18d0c:	addeq	r3, r3, #32
   18d10:	sub	r3, r3, #11
   18d14:	subs	r2, r3, #32
   18d18:	bge	18d3c <__assert_fail@plt+0x7884>
   18d1c:	adds	r2, r2, #12
   18d20:	ble	18d38 <__assert_fail@plt+0x7880>
   18d24:	add	ip, r2, #20
   18d28:	rsb	r2, r2, #12
   18d2c:	lsl	r0, r1, ip
   18d30:	lsr	r1, r1, r2
   18d34:	b	18d4c <__assert_fail@plt+0x7894>
   18d38:	add	r2, r2, #20
   18d3c:	rsble	ip, r2, #32
   18d40:	lsl	r1, r1, r2
   18d44:	orrle	r1, r1, r0, lsr ip
   18d48:	lslle	r0, r0, r2
   18d4c:	subs	r4, r4, r3
   18d50:	addge	r1, r1, r4, lsl #20
   18d54:	orrge	r1, r1, r5
   18d58:	popge	{r4, r5, pc}
   18d5c:	mvn	r4, r4
   18d60:	subs	r4, r4, #31
   18d64:	bge	18da0 <__assert_fail@plt+0x78e8>
   18d68:	adds	r4, r4, #12
   18d6c:	bgt	18d88 <__assert_fail@plt+0x78d0>
   18d70:	add	r4, r4, #20
   18d74:	rsb	r2, r4, #32
   18d78:	lsr	r0, r0, r4
   18d7c:	orr	r0, r0, r1, lsl r2
   18d80:	orr	r1, r5, r1, lsr r4
   18d84:	pop	{r4, r5, pc}
   18d88:	rsb	r4, r4, #12
   18d8c:	rsb	r2, r4, #32
   18d90:	lsr	r0, r0, r2
   18d94:	orr	r0, r0, r1, lsl r4
   18d98:	mov	r1, r5
   18d9c:	pop	{r4, r5, pc}
   18da0:	lsr	r0, r1, r4
   18da4:	mov	r1, r5
   18da8:	pop	{r4, r5, pc}
   18dac:	teq	r4, #0
   18db0:	eor	r3, r3, #1048576	; 0x100000
   18db4:	eoreq	r1, r1, #1048576	; 0x100000
   18db8:	addeq	r4, r4, #1
   18dbc:	subne	r5, r5, #1
   18dc0:	b	18c4c <__assert_fail@plt+0x7794>
   18dc4:	mvns	ip, r4, asr #21
   18dc8:	mvnsne	ip, r5, asr #21
   18dcc:	beq	18e34 <__assert_fail@plt+0x797c>
   18dd0:	teq	r4, r5
   18dd4:	teqeq	r0, r2
   18dd8:	beq	18dec <__assert_fail@plt+0x7934>
   18ddc:	orrs	ip, r4, r0
   18de0:	moveq	r1, r3
   18de4:	moveq	r0, r2
   18de8:	pop	{r4, r5, pc}
   18dec:	teq	r1, r3
   18df0:	movne	r1, #0
   18df4:	movne	r0, #0
   18df8:	popne	{r4, r5, pc}
   18dfc:	lsrs	ip, r4, #21
   18e00:	bne	18e14 <__assert_fail@plt+0x795c>
   18e04:	lsls	r0, r0, #1
   18e08:	adcs	r1, r1, r1
   18e0c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   18e10:	pop	{r4, r5, pc}
   18e14:	adds	r4, r4, #4194304	; 0x400000
   18e18:	addcc	r1, r1, #1048576	; 0x100000
   18e1c:	popcc	{r4, r5, pc}
   18e20:	and	r5, r1, #-2147483648	; 0x80000000
   18e24:	orr	r1, r5, #2130706432	; 0x7f000000
   18e28:	orr	r1, r1, #15728640	; 0xf00000
   18e2c:	mov	r0, #0
   18e30:	pop	{r4, r5, pc}
   18e34:	mvns	ip, r4, asr #21
   18e38:	movne	r1, r3
   18e3c:	movne	r0, r2
   18e40:	mvnseq	ip, r5, asr #21
   18e44:	movne	r3, r1
   18e48:	movne	r2, r0
   18e4c:	orrs	r4, r0, r1, lsl #12
   18e50:	orrseq	r5, r2, r3, lsl #12
   18e54:	teqeq	r1, r3
   18e58:	orrne	r1, r1, #524288	; 0x80000
   18e5c:	pop	{r4, r5, pc}
   18e60:	teq	r0, #0
   18e64:	moveq	r1, #0
   18e68:	bxeq	lr
   18e6c:	push	{r4, r5, lr}
   18e70:	mov	r4, #1024	; 0x400
   18e74:	add	r4, r4, #50	; 0x32
   18e78:	mov	r5, #0
   18e7c:	mov	r1, #0
   18e80:	b	18cfc <__assert_fail@plt+0x7844>
   18e84:	teq	r0, #0
   18e88:	moveq	r1, #0
   18e8c:	bxeq	lr
   18e90:	push	{r4, r5, lr}
   18e94:	mov	r4, #1024	; 0x400
   18e98:	add	r4, r4, #50	; 0x32
   18e9c:	ands	r5, r0, #-2147483648	; 0x80000000
   18ea0:	rsbmi	r0, r0, #0
   18ea4:	mov	r1, #0
   18ea8:	b	18cfc <__assert_fail@plt+0x7844>
   18eac:	lsls	r2, r0, #1
   18eb0:	asr	r1, r2, #3
   18eb4:	rrx	r1, r1
   18eb8:	lsl	r0, r2, #28
   18ebc:	andsne	r3, r2, #-16777216	; 0xff000000
   18ec0:	teqne	r3, #-16777216	; 0xff000000
   18ec4:	eorne	r1, r1, #939524096	; 0x38000000
   18ec8:	bxne	lr
   18ecc:	teq	r2, #0
   18ed0:	teqne	r3, #-16777216	; 0xff000000
   18ed4:	bxeq	lr
   18ed8:	push	{r4, r5, lr}
   18edc:	mov	r4, #896	; 0x380
   18ee0:	and	r5, r1, #-2147483648	; 0x80000000
   18ee4:	bic	r1, r1, #-2147483648	; 0x80000000
   18ee8:	b	18cfc <__assert_fail@plt+0x7844>
   18eec:	orrs	r2, r0, r1
   18ef0:	bxeq	lr
   18ef4:	push	{r4, r5, lr}
   18ef8:	mov	r5, #0
   18efc:	b	18f1c <__assert_fail@plt+0x7a64>
   18f00:	orrs	r2, r0, r1
   18f04:	bxeq	lr
   18f08:	push	{r4, r5, lr}
   18f0c:	ands	r5, r1, #-2147483648	; 0x80000000
   18f10:	bpl	18f1c <__assert_fail@plt+0x7a64>
   18f14:	rsbs	r0, r0, #0
   18f18:	rsc	r1, r1, #0
   18f1c:	mov	r4, #1024	; 0x400
   18f20:	add	r4, r4, #50	; 0x32
   18f24:	lsrs	ip, r1, #22
   18f28:	beq	18ca0 <__assert_fail@plt+0x77e8>
   18f2c:	mov	r2, #3
   18f30:	lsrs	ip, ip, #3
   18f34:	addne	r2, r2, #3
   18f38:	lsrs	ip, ip, #3
   18f3c:	addne	r2, r2, #3
   18f40:	add	r2, r2, ip, lsr #3
   18f44:	rsb	r3, r2, #32
   18f48:	lsl	ip, r0, r3
   18f4c:	lsr	r0, r0, r2
   18f50:	orr	r0, r0, r1, lsl r3
   18f54:	lsr	r1, r1, r2
   18f58:	add	r4, r4, r2
   18f5c:	b	18ca0 <__assert_fail@plt+0x77e8>
   18f60:	cmp	r3, #0
   18f64:	cmpeq	r2, #0
   18f68:	bne	18f8c <__assert_fail@plt+0x7ad4>
   18f6c:	cmp	r1, #0
   18f70:	movlt	r1, #-2147483648	; 0x80000000
   18f74:	movlt	r0, #0
   18f78:	blt	18f88 <__assert_fail@plt+0x7ad0>
   18f7c:	cmpeq	r0, #0
   18f80:	mvnne	r1, #-2147483648	; 0x80000000
   18f84:	mvnne	r0, #0
   18f88:	b	19070 <__assert_fail@plt+0x7bb8>
   18f8c:	sub	sp, sp, #8
   18f90:	push	{sp, lr}
   18f94:	cmp	r1, #0
   18f98:	blt	18fb8 <__assert_fail@plt+0x7b00>
   18f9c:	cmp	r3, #0
   18fa0:	blt	18fec <__assert_fail@plt+0x7b34>
   18fa4:	bl	190c8 <__assert_fail@plt+0x7c10>
   18fa8:	ldr	lr, [sp, #4]
   18fac:	add	sp, sp, #8
   18fb0:	pop	{r2, r3}
   18fb4:	bx	lr
   18fb8:	rsbs	r0, r0, #0
   18fbc:	sbc	r1, r1, r1, lsl #1
   18fc0:	cmp	r3, #0
   18fc4:	blt	19010 <__assert_fail@plt+0x7b58>
   18fc8:	bl	190c8 <__assert_fail@plt+0x7c10>
   18fcc:	ldr	lr, [sp, #4]
   18fd0:	add	sp, sp, #8
   18fd4:	pop	{r2, r3}
   18fd8:	rsbs	r0, r0, #0
   18fdc:	sbc	r1, r1, r1, lsl #1
   18fe0:	rsbs	r2, r2, #0
   18fe4:	sbc	r3, r3, r3, lsl #1
   18fe8:	bx	lr
   18fec:	rsbs	r2, r2, #0
   18ff0:	sbc	r3, r3, r3, lsl #1
   18ff4:	bl	190c8 <__assert_fail@plt+0x7c10>
   18ff8:	ldr	lr, [sp, #4]
   18ffc:	add	sp, sp, #8
   19000:	pop	{r2, r3}
   19004:	rsbs	r0, r0, #0
   19008:	sbc	r1, r1, r1, lsl #1
   1900c:	bx	lr
   19010:	rsbs	r2, r2, #0
   19014:	sbc	r3, r3, r3, lsl #1
   19018:	bl	190c8 <__assert_fail@plt+0x7c10>
   1901c:	ldr	lr, [sp, #4]
   19020:	add	sp, sp, #8
   19024:	pop	{r2, r3}
   19028:	rsbs	r2, r2, #0
   1902c:	sbc	r3, r3, r3, lsl #1
   19030:	bx	lr
   19034:	cmp	r3, #0
   19038:	cmpeq	r2, #0
   1903c:	bne	19054 <__assert_fail@plt+0x7b9c>
   19040:	cmp	r1, #0
   19044:	cmpeq	r0, #0
   19048:	mvnne	r1, #0
   1904c:	mvnne	r0, #0
   19050:	b	19070 <__assert_fail@plt+0x7bb8>
   19054:	sub	sp, sp, #8
   19058:	push	{sp, lr}
   1905c:	bl	190c8 <__assert_fail@plt+0x7c10>
   19060:	ldr	lr, [sp, #4]
   19064:	add	sp, sp, #8
   19068:	pop	{r2, r3}
   1906c:	bx	lr
   19070:	push	{r1, lr}
   19074:	mov	r0, #8
   19078:	bl	11140 <raise@plt>
   1907c:	pop	{r1, pc}
   19080:	vmov	d7, r0, r1
   19084:	vldr	d6, [pc, #44]	; 190b8 <__assert_fail@plt+0x7c00>
   19088:	vldr	d5, [pc, #48]	; 190c0 <__assert_fail@plt+0x7c08>
   1908c:	mov	r0, #0
   19090:	vmul.f64	d6, d7, d6
   19094:	vcvt.u32.f64	s12, d6
   19098:	vcvt.f64.u32	d4, s12
   1909c:	vmov	r1, s12
   190a0:	vmls.f64	d7, d4, d5
   190a4:	vcvt.u32.f64	s14, d7
   190a8:	vmov	r3, s14
   190ac:	orr	r0, r0, r3
   190b0:	bx	lr
   190b4:	nop			; (mov r0, r0)
   190b8:	andeq	r0, r0, r0
   190bc:	ldclcc	0, cr0, [r0]
   190c0:	andeq	r0, r0, r0
   190c4:	mvnsmi	r0, r0
   190c8:	cmp	r1, r3
   190cc:	push	{r4, r5, r6, r7, r8, r9, lr}
   190d0:	cmpeq	r0, r2
   190d4:	mov	r4, r0
   190d8:	mov	r5, r1
   190dc:	ldr	r9, [sp, #28]
   190e0:	movcc	r0, #0
   190e4:	movcc	r1, #0
   190e8:	bcc	191e0 <__assert_fail@plt+0x7d28>
   190ec:	cmp	r3, #0
   190f0:	clzeq	ip, r2
   190f4:	clzne	ip, r3
   190f8:	addeq	ip, ip, #32
   190fc:	cmp	r5, #0
   19100:	clzeq	r1, r4
   19104:	addeq	r1, r1, #32
   19108:	clzne	r1, r5
   1910c:	sub	ip, ip, r1
   19110:	sub	lr, ip, #32
   19114:	lsl	r7, r3, ip
   19118:	rsb	r8, ip, #32
   1911c:	orr	r7, r7, r2, lsl lr
   19120:	orr	r7, r7, r2, lsr r8
   19124:	lsl	r6, r2, ip
   19128:	cmp	r5, r7
   1912c:	cmpeq	r4, r6
   19130:	movcc	r0, #0
   19134:	movcc	r1, #0
   19138:	bcc	19154 <__assert_fail@plt+0x7c9c>
   1913c:	mov	r3, #1
   19140:	subs	r4, r4, r6
   19144:	lsl	r1, r3, lr
   19148:	lsl	r0, r3, ip
   1914c:	orr	r1, r1, r3, lsr r8
   19150:	sbc	r5, r5, r7
   19154:	cmp	ip, #0
   19158:	beq	191e0 <__assert_fail@plt+0x7d28>
   1915c:	lsrs	r3, r7, #1
   19160:	rrx	r2, r6
   19164:	mov	r6, ip
   19168:	b	1918c <__assert_fail@plt+0x7cd4>
   1916c:	subs	r4, r4, r2
   19170:	sbc	r5, r5, r3
   19174:	adds	r4, r4, r4
   19178:	adc	r5, r5, r5
   1917c:	adds	r4, r4, #1
   19180:	adc	r5, r5, #0
   19184:	subs	r6, r6, #1
   19188:	beq	191a8 <__assert_fail@plt+0x7cf0>
   1918c:	cmp	r5, r3
   19190:	cmpeq	r4, r2
   19194:	bcs	1916c <__assert_fail@plt+0x7cb4>
   19198:	adds	r4, r4, r4
   1919c:	adc	r5, r5, r5
   191a0:	subs	r6, r6, #1
   191a4:	bne	1918c <__assert_fail@plt+0x7cd4>
   191a8:	lsr	r6, r4, ip
   191ac:	lsr	r7, r5, ip
   191b0:	orr	r6, r6, r5, lsl r8
   191b4:	adds	r2, r0, r4
   191b8:	orr	r6, r6, r5, lsr lr
   191bc:	adc	r3, r1, r5
   191c0:	lsl	r1, r7, ip
   191c4:	orr	r1, r1, r6, lsl lr
   191c8:	lsl	r0, r6, ip
   191cc:	orr	r1, r1, r6, lsr r8
   191d0:	subs	r0, r2, r0
   191d4:	mov	r4, r6
   191d8:	mov	r5, r7
   191dc:	sbc	r1, r3, r1
   191e0:	cmp	r9, #0
   191e4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   191e8:	strd	r4, [r9]
   191ec:	pop	{r4, r5, r6, r7, r8, r9, pc}
   191f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   191f4:	mov	r7, r0
   191f8:	ldr	r6, [pc, #72]	; 19248 <__assert_fail@plt+0x7d90>
   191fc:	ldr	r5, [pc, #72]	; 1924c <__assert_fail@plt+0x7d94>
   19200:	add	r6, pc, r6
   19204:	add	r5, pc, r5
   19208:	sub	r6, r6, r5
   1920c:	mov	r8, r1
   19210:	mov	r9, r2
   19214:	bl	110fc <fdopen@plt-0x20>
   19218:	asrs	r6, r6, #2
   1921c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19220:	mov	r4, #0
   19224:	add	r4, r4, #1
   19228:	ldr	r3, [r5], #4
   1922c:	mov	r2, r9
   19230:	mov	r1, r8
   19234:	mov	r0, r7
   19238:	blx	r3
   1923c:	cmp	r6, r4
   19240:	bne	19224 <__assert_fail@plt+0x7d6c>
   19244:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19248:	andeq	r1, r1, r8, lsl #26
   1924c:	andeq	r1, r1, r0, lsl #26
   19250:	bx	lr
   19254:	ldr	r3, [pc, #12]	; 19268 <__assert_fail@plt+0x7db0>
   19258:	mov	r1, #0
   1925c:	add	r3, pc, r3
   19260:	ldr	r2, [r3]
   19264:	b	11350 <__cxa_atexit@plt>
   19268:	andeq	r1, r1, r8, ror #29

Disassembly of section .fini:

0001926c <.fini>:
   1926c:	push	{r3, lr}
   19270:	pop	{r3, pc}
