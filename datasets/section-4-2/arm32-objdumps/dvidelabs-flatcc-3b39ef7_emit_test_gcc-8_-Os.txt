
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/emit_test:     file format elf32-littlearm


Disassembly of section .init:

00011f6c <.init>:
   11f6c:	push	{r3, lr}
   11f70:	bl	120b8 <_start@@Base+0x3c>
   11f74:	pop	{r3, pc}

Disassembly of section .plt:

00011f78 <printf@plt-0x14>:
   11f78:	push	{lr}		; (str lr, [sp, #-4]!)
   11f7c:	ldr	lr, [pc, #4]	; 11f88 <printf@plt-0x4>
   11f80:	add	lr, pc, lr
   11f84:	ldr	pc, [lr, #8]!
   11f88:	andeq	r5, r1, r8, ror r0

00011f8c <printf@plt>:
   11f8c:	add	ip, pc, #0, 12
   11f90:	add	ip, ip, #86016	; 0x15000
   11f94:	ldr	pc, [ip, #120]!	; 0x78

00011f98 <free@plt>:
   11f98:	add	ip, pc, #0, 12
   11f9c:	add	ip, ip, #86016	; 0x15000
   11fa0:	ldr	pc, [ip, #112]!	; 0x70

00011fa4 <memcpy@plt>:
   11fa4:	add	ip, pc, #0, 12
   11fa8:	add	ip, ip, #86016	; 0x15000
   11fac:	ldr	pc, [ip, #104]!	; 0x68

00011fb0 <memcmp@plt>:
   11fb0:	add	ip, pc, #0, 12
   11fb4:	add	ip, ip, #86016	; 0x15000
   11fb8:	ldr	pc, [ip, #96]!	; 0x60

00011fbc <realloc@plt>:
   11fbc:	add	ip, pc, #0, 12
   11fc0:	add	ip, ip, #86016	; 0x15000
   11fc4:	ldr	pc, [ip, #88]!	; 0x58

00011fc8 <puts@plt>:
   11fc8:	add	ip, pc, #0, 12
   11fcc:	add	ip, ip, #86016	; 0x15000
   11fd0:	ldr	pc, [ip, #80]!	; 0x50

00011fd4 <malloc@plt>:
   11fd4:	add	ip, pc, #0, 12
   11fd8:	add	ip, ip, #86016	; 0x15000
   11fdc:	ldr	pc, [ip, #72]!	; 0x48

00011fe0 <__libc_start_main@plt>:
   11fe0:	add	ip, pc, #0, 12
   11fe4:	add	ip, ip, #86016	; 0x15000
   11fe8:	ldr	pc, [ip, #64]!	; 0x40

00011fec <__gmon_start__@plt>:
   11fec:	add	ip, pc, #0, 12
   11ff0:	add	ip, ip, #86016	; 0x15000
   11ff4:	ldr	pc, [ip, #56]!	; 0x38

00011ff8 <strlen@plt>:
   11ff8:	add	ip, pc, #0, 12
   11ffc:	add	ip, ip, #86016	; 0x15000
   12000:	ldr	pc, [ip, #48]!	; 0x30

00012004 <fprintf@plt>:
   12004:	add	ip, pc, #0, 12
   12008:	add	ip, ip, #86016	; 0x15000
   1200c:	ldr	pc, [ip, #40]!	; 0x28

00012010 <posix_memalign@plt>:
   12010:	add	ip, pc, #0, 12
   12014:	add	ip, ip, #86016	; 0x15000
   12018:	ldr	pc, [ip, #32]!

0001201c <memset@plt>:
   1201c:	add	ip, pc, #0, 12
   12020:	add	ip, ip, #86016	; 0x15000
   12024:	ldr	pc, [ip, #24]!

00012028 <memchr@plt>:
   12028:	add	ip, pc, #0, 12
   1202c:	add	ip, ip, #86016	; 0x15000
   12030:	ldr	pc, [ip, #16]!

00012034 <fputc@plt>:
   12034:	add	ip, pc, #0, 12
   12038:	add	ip, ip, #86016	; 0x15000
   1203c:	ldr	pc, [ip, #8]!

00012040 <fputs@plt>:
   12040:	add	ip, pc, #0, 12
   12044:	add	ip, ip, #86016	; 0x15000
   12048:	ldr	pc, [ip, #0]!

0001204c <abort@plt>:
   1204c:	add	ip, pc, #0, 12
   12050:	add	ip, ip, #20, 20	; 0x14000
   12054:	ldr	pc, [ip, #4088]!	; 0xff8

00012058 <__assert_fail@plt>:
   12058:	add	ip, pc, #0, 12
   1205c:	add	ip, ip, #20, 20	; 0x14000
   12060:	ldr	pc, [ip, #4080]!	; 0xff0

Disassembly of section .text:

00012064 <main@@Base>:
   12064:	push	{r4, lr}
   12068:	bl	12310 <debug_test@@Base>
   1206c:	mov	r4, r0
   12070:	bl	12394 <emit_test@@Base>
   12074:	orr	r0, r4, r0
   12078:	pop	{r4, pc}

0001207c <_start@@Base>:
   1207c:	mov	fp, #0
   12080:	mov	lr, #0
   12084:	pop	{r1}		; (ldr r1, [sp], #4)
   12088:	mov	r2, sp
   1208c:	push	{r2}		; (str r2, [sp, #-4]!)
   12090:	push	{r0}		; (str r0, [sp, #-4]!)
   12094:	ldr	ip, [pc, #16]	; 120ac <_start@@Base+0x30>
   12098:	push	{ip}		; (str ip, [sp, #-4]!)
   1209c:	ldr	r0, [pc, #12]	; 120b0 <_start@@Base+0x34>
   120a0:	ldr	r3, [pc, #12]	; 120b4 <_start@@Base+0x38>
   120a4:	bl	11fe0 <__libc_start_main@plt>
   120a8:	bl	1204c <abort@plt>
   120ac:	strdeq	r5, [r1], -ip
   120b0:	andeq	r2, r1, r4, rrx
   120b4:	muleq	r1, ip, r9
   120b8:	ldr	r3, [pc, #20]	; 120d4 <_start@@Base+0x58>
   120bc:	ldr	r2, [pc, #20]	; 120d8 <_start@@Base+0x5c>
   120c0:	add	r3, pc, r3
   120c4:	ldr	r2, [r3, r2]
   120c8:	cmp	r2, #0
   120cc:	bxeq	lr
   120d0:	b	11fec <__gmon_start__@plt>
   120d4:	andeq	r4, r1, r8, lsr pc
   120d8:	andeq	r0, r0, r4, asr r0
   120dc:	ldr	r0, [pc, #24]	; 120fc <_start@@Base+0x80>
   120e0:	ldr	r3, [pc, #24]	; 12100 <_start@@Base+0x84>
   120e4:	cmp	r3, r0
   120e8:	bxeq	lr
   120ec:	ldr	r3, [pc, #16]	; 12104 <_start@@Base+0x88>
   120f0:	cmp	r3, #0
   120f4:	bxeq	lr
   120f8:	bx	r3
   120fc:	andeq	r7, r2, r0, rrx
   12100:	andeq	r7, r2, r0, rrx
   12104:	andeq	r0, r0, r0
   12108:	ldr	r0, [pc, #36]	; 12134 <_start@@Base+0xb8>
   1210c:	ldr	r1, [pc, #36]	; 12138 <_start@@Base+0xbc>
   12110:	sub	r1, r1, r0
   12114:	asr	r1, r1, #2
   12118:	add	r1, r1, r1, lsr #31
   1211c:	asrs	r1, r1, #1
   12120:	bxeq	lr
   12124:	ldr	r3, [pc, #16]	; 1213c <_start@@Base+0xc0>
   12128:	cmp	r3, #0
   1212c:	bxeq	lr
   12130:	bx	r3
   12134:	andeq	r7, r2, r0, rrx
   12138:	andeq	r7, r2, r0, rrx
   1213c:	andeq	r0, r0, r0
   12140:	push	{r4, lr}
   12144:	ldr	r4, [pc, #24]	; 12164 <_start@@Base+0xe8>
   12148:	ldrb	r3, [r4]
   1214c:	cmp	r3, #0
   12150:	popne	{r4, pc}
   12154:	bl	120dc <_start@@Base+0x60>
   12158:	mov	r3, #1
   1215c:	strb	r3, [r4]
   12160:	pop	{r4, pc}
   12164:	andeq	r7, r2, r4, rrx
   12168:	b	12108 <_start@@Base+0x8c>

0001216c <dbg_emitter@@Base>:
   1216c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12170:	mov	r7, r2
   12174:	mov	r4, r1
   12178:	mov	r5, r3
   1217c:	mov	r2, r3
   12180:	mov	r1, r7
   12184:	add	r4, r4, #4
   12188:	ldr	r0, [pc, #108]	; 121fc <dbg_emitter@@Base+0x90>
   1218c:	mov	r6, #0
   12190:	ldr	r3, [sp, #32]
   12194:	ldr	r8, [pc, #100]	; 12200 <dbg_emitter@@Base+0x94>
   12198:	ldr	r9, [pc, #100]	; 12204 <dbg_emitter@@Base+0x98>
   1219c:	ldr	sl, [pc, #100]	; 12208 <dbg_emitter@@Base+0x9c>
   121a0:	bl	11f8c <printf@plt>
   121a4:	cmp	r6, r7
   121a8:	blt	121b4 <dbg_emitter@@Base+0x48>
   121ac:	mov	r0, #0
   121b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   121b4:	ldr	r3, [r4, #-4]
   121b8:	cmp	r3, r8
   121bc:	bne	121d0 <dbg_emitter@@Base+0x64>
   121c0:	mov	r1, r5
   121c4:	mov	r0, r9
   121c8:	ldr	r2, [r4]
   121cc:	bl	11f8c <printf@plt>
   121d0:	ldr	r3, [r4, #-4]
   121d4:	cmp	r3, #0
   121d8:	bne	121ec <dbg_emitter@@Base+0x80>
   121dc:	mov	r1, r5
   121e0:	mov	r0, sl
   121e4:	ldr	r2, [r4]
   121e8:	bl	11f8c <printf@plt>
   121ec:	ldr	r3, [r4], #8
   121f0:	add	r6, r6, #1
   121f4:	add	r5, r5, r3
   121f8:	b	121a4 <dbg_emitter@@Base+0x38>
   121fc:	andeq	r5, r1, r8, ror sl
   12200:	andeq	r5, r1, r1, lsr sp
   12204:	andeq	r5, r1, r9, lsr #21
   12208:	andeq	r5, r1, sl, asr #21
   1220c:	mov	r3, #0
   12210:	push	{r4, r5, r6, r7, r8, lr}
   12214:	mov	r7, r1
   12218:	mov	r2, r3
   1221c:	mov	r1, r3
   12220:	mov	r4, r0
   12224:	bl	1361c <flatcc_builder_start_buffer@@Base>
   12228:	subs	r5, r0, #0
   1222c:	bne	122f8 <dbg_emitter@@Base+0x18c>
   12230:	mov	r1, #3
   12234:	mov	r0, r4
   12238:	bl	13df8 <flatcc_builder_start_table@@Base>
   1223c:	subs	r6, r0, #0
   12240:	bne	122e8 <dbg_emitter@@Base+0x17c>
   12244:	mov	r3, #8
   12248:	mov	r1, r6
   1224c:	mov	r2, r3
   12250:	mov	r0, r4
   12254:	bl	14d7c <flatcc_builder_table_add@@Base>
   12258:	cmp	r0, #0
   1225c:	beq	122e8 <dbg_emitter@@Base+0x17c>
   12260:	mov	r2, #42	; 0x2a
   12264:	mov	r3, #0
   12268:	cmp	r7, #0
   1226c:	strd	r2, [r0]
   12270:	beq	122e8 <dbg_emitter@@Base+0x17c>
   12274:	mov	r1, #2
   12278:	mov	r0, r4
   1227c:	bl	14f20 <flatcc_builder_table_add_offset@@Base>
   12280:	cmp	r0, #0
   12284:	beq	122e8 <dbg_emitter@@Base+0x17c>
   12288:	mov	r3, #1
   1228c:	str	r7, [r0]
   12290:	mov	r0, r4
   12294:	mov	r2, r3
   12298:	mov	r1, r3
   1229c:	bl	14d7c <flatcc_builder_table_add@@Base>
   122a0:	cmp	r0, #0
   122a4:	beq	122e8 <dbg_emitter@@Base+0x17c>
   122a8:	mov	r3, #1
   122ac:	mov	r2, r6
   122b0:	ldr	r1, [pc, #72]	; 12300 <dbg_emitter@@Base+0x194>
   122b4:	strb	r3, [r0]
   122b8:	mov	r0, r4
   122bc:	bl	143a4 <flatcc_builder_check_required@@Base>
   122c0:	cmp	r0, #0
   122c4:	bne	122dc <dbg_emitter@@Base+0x170>
   122c8:	ldr	r3, [pc, #52]	; 12304 <dbg_emitter@@Base+0x198>
   122cc:	mov	r2, #21
   122d0:	ldr	r1, [pc, #48]	; 12308 <dbg_emitter@@Base+0x19c>
   122d4:	ldr	r0, [pc, #48]	; 1230c <dbg_emitter@@Base+0x1a0>
   122d8:	bl	12058 <__assert_fail@plt>
   122dc:	mov	r0, r4
   122e0:	bl	14420 <flatcc_builder_end_table@@Base>
   122e4:	mov	r5, r0
   122e8:	mov	r1, r5
   122ec:	mov	r0, r4
   122f0:	pop	{r4, r5, r6, r7, r8, lr}
   122f4:	b	136b8 <flatcc_builder_end_buffer@@Base>
   122f8:	mov	r0, #0
   122fc:	pop	{r4, r5, r6, r7, r8, pc}
   12300:	andeq	r5, r1, ip, lsl #20
   12304:	andeq	r5, r1, lr, lsl #20
   12308:	strdeq	r5, [r1], -r8
   1230c:	andeq	r5, r1, r5, asr fp

00012310 <debug_test@@Base>:
   12310:	push	{r4, lr}
   12314:	sub	sp, sp, #280	; 0x118
   12318:	mov	r4, #0
   1231c:	mov	r2, #40	; 0x28
   12320:	mov	r1, #0
   12324:	add	r0, sp, #8
   12328:	bl	1201c <memset@plt>
   1232c:	ldr	r0, [pc, #88]	; 1238c <debug_test@@Base+0x7c>
   12330:	bl	11fc8 <puts@plt>
   12334:	mov	r3, r4
   12338:	mov	r2, r4
   1233c:	ldr	r1, [pc, #76]	; 12390 <debug_test@@Base+0x80>
   12340:	add	r0, sp, #48	; 0x30
   12344:	str	r4, [sp]
   12348:	bl	12ed8 <flatcc_builder_custom_init@@Base>
   1234c:	mvn	r3, #-1073741824	; 0xc0000000
   12350:	mov	r2, #10
   12354:	add	r1, sp, #8
   12358:	add	r0, sp, #48	; 0x30
   1235c:	str	r3, [sp, #4]
   12360:	mov	r3, #4
   12364:	str	r3, [sp]
   12368:	bl	14554 <flatcc_builder_create_vector@@Base>
   1236c:	mov	r1, r0
   12370:	add	r0, sp, #48	; 0x30
   12374:	bl	1220c <dbg_emitter@@Base+0xa0>
   12378:	add	r0, sp, #48	; 0x30
   1237c:	bl	130b8 <flatcc_builder_clear@@Base>
   12380:	mov	r0, r4
   12384:	add	sp, sp, #280	; 0x118
   12388:	pop	{r4, pc}
   1238c:	andeq	r5, r1, r1, asr #23
   12390:	andeq	r2, r1, ip, ror #2

00012394 <emit_test@@Base>:
   12394:	ldr	r3, [pc, #764]	; 12698 <emit_test@@Base+0x304>
   12398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1239c:	sub	sp, sp, #340	; 0x154
   123a0:	add	r2, sp, #44	; 0x2c
   123a4:	mov	sl, r2
   123a8:	add	lr, r3, #56	; 0x38
   123ac:	ldr	r0, [r3]
   123b0:	mov	ip, r2
   123b4:	add	r3, r3, #8
   123b8:	ldr	r1, [r3, #-4]
   123bc:	cmp	r3, lr
   123c0:	stmia	ip!, {r0, r1}
   123c4:	mov	r2, ip
   123c8:	bne	123ac <emit_test@@Base+0x18>
   123cc:	ldrh	r1, [r3]
   123d0:	add	r5, sp, #8
   123d4:	ldrb	r3, [r3, #2]
   123d8:	ldr	r4, [pc, #700]	; 1269c <emit_test@@Base+0x308>
   123dc:	strh	r1, [ip]
   123e0:	strb	r3, [ip, #2]
   123e4:	ldm	r4, {r0, r1, r2, r3}
   123e8:	stm	r5, {r0, r1, r2, r3}
   123ec:	add	r0, sp, #104	; 0x68
   123f0:	bl	12f3c <flatcc_builder_init@@Base>
   123f4:	add	r0, sp, #104	; 0x68
   123f8:	bl	15490 <flatcc_builder_get_emit_context@@Base>
   123fc:	mvn	r3, #-1073741824	; 0xc0000000
   12400:	mov	r6, r0
   12404:	mov	r1, r5
   12408:	add	r0, sp, #104	; 0x68
   1240c:	str	r3, [sp, #4]
   12410:	mov	r3, #4
   12414:	mov	r2, r3
   12418:	str	r3, [sp]
   1241c:	bl	14554 <flatcc_builder_create_vector@@Base>
   12420:	mov	r1, r0
   12424:	add	r0, sp, #104	; 0x68
   12428:	bl	1220c <dbg_emitter@@Base+0xa0>
   1242c:	ldrd	r2, [r6]
   12430:	cmp	r2, r3
   12434:	bne	1268c <emit_test@@Base+0x2f8>
   12438:	ldr	r5, [r6, #8]
   1243c:	ldr	r8, [r6, #24]
   12440:	cmp	r5, #0
   12444:	beq	1268c <emit_test@@Base+0x2f8>
   12448:	add	r0, sp, #104	; 0x68
   1244c:	bl	15278 <flatcc_builder_get_buffer_size@@Base>
   12450:	cmp	r0, r8
   12454:	addne	r3, r4, #16
   12458:	movne	r2, #101	; 0x65
   1245c:	bne	124d0 <emit_test@@Base+0x13c>
   12460:	ldr	r4, [pc, #568]	; 126a0 <emit_test@@Base+0x30c>
   12464:	mov	r2, r8
   12468:	sub	r9, r5, #1
   1246c:	ldr	r1, [pc, #560]	; 126a4 <emit_test@@Base+0x310>
   12470:	ldr	fp, [pc, #560]	; 126a8 <emit_test@@Base+0x314>
   12474:	ldr	r0, [r4]
   12478:	bl	12004 <fprintf@plt>
   1247c:	ldr	r6, [r4]
   12480:	mov	r4, #0
   12484:	ldr	r2, [pc, #544]	; 126ac <emit_test@@Base+0x318>
   12488:	ldr	r1, [pc, #544]	; 126b0 <emit_test@@Base+0x31c>
   1248c:	mov	r0, r6
   12490:	bl	12004 <fprintf@plt>
   12494:	cmp	r8, r4
   12498:	and	r7, r4, #15
   1249c:	bne	124dc <emit_test@@Base+0x148>
   124a0:	ldr	r8, [pc, #524]	; 126b4 <emit_test@@Base+0x320>
   124a4:	mov	r7, r4
   124a8:	tst	r7, #15
   124ac:	bne	12560 <emit_test@@Base+0x1cc>
   124b0:	add	r2, sp, #24
   124b4:	ldr	r1, [pc, #508]	; 126b8 <emit_test@@Base+0x324>
   124b8:	mov	r0, r6
   124bc:	bl	12004 <fprintf@plt>
   124c0:	cmp	r4, #58	; 0x3a
   124c4:	beq	12574 <emit_test@@Base+0x1e0>
   124c8:	ldr	r3, [pc, #492]	; 126bc <emit_test@@Base+0x328>
   124cc:	mov	r2, #106	; 0x6a
   124d0:	ldr	r1, [pc, #488]	; 126c0 <emit_test@@Base+0x32c>
   124d4:	ldr	r0, [pc, #488]	; 126c4 <emit_test@@Base+0x330>
   124d8:	bl	12058 <__assert_fail@plt>
   124dc:	cmp	r7, #0
   124e0:	bne	12548 <emit_test@@Base+0x1b4>
   124e4:	cmp	r4, #0
   124e8:	beq	124fc <emit_test@@Base+0x168>
   124ec:	add	r2, sp, #24
   124f0:	ldr	r1, [pc, #448]	; 126b8 <emit_test@@Base+0x324>
   124f4:	mov	r0, r6
   124f8:	bl	12004 <fprintf@plt>
   124fc:	mov	r2, r4
   12500:	ldr	r1, [pc, #448]	; 126c8 <emit_test@@Base+0x334>
   12504:	mov	r0, r6
   12508:	bl	12004 <fprintf@plt>
   1250c:	ldrb	r2, [r9, #1]!
   12510:	mov	r1, fp
   12514:	mov	r0, r6
   12518:	bl	12004 <fprintf@plt>
   1251c:	add	r4, r4, #1
   12520:	ldrb	r3, [r9]
   12524:	sub	r2, r3, #32
   12528:	cmp	r2, #94	; 0x5e
   1252c:	add	r2, sp, #336	; 0x150
   12530:	movhi	r3, #46	; 0x2e
   12534:	add	r7, r2, r7
   12538:	strb	r3, [r7, #-312]	; 0xfffffec8
   1253c:	mov	r3, #0
   12540:	strb	r3, [r7, #-311]	; 0xfffffec9
   12544:	b	12494 <emit_test@@Base+0x100>
   12548:	tst	r4, #7
   1254c:	bne	1250c <emit_test@@Base+0x178>
   12550:	mov	r1, r6
   12554:	mov	r0, #32
   12558:	bl	12034 <fputc@plt>
   1255c:	b	1250c <emit_test@@Base+0x178>
   12560:	mov	r1, r6
   12564:	mov	r0, r8
   12568:	bl	12040 <fputs@plt>
   1256c:	add	r7, r7, #1
   12570:	b	124a8 <emit_test@@Base+0x114>
   12574:	mov	r2, r4
   12578:	mov	r1, sl
   1257c:	mov	r0, r5
   12580:	bl	11fb0 <memcmp@plt>
   12584:	subs	r4, r0, #0
   12588:	ldrne	r3, [pc, #300]	; 126bc <emit_test@@Base+0x328>
   1258c:	movne	r2, #108	; 0x6c
   12590:	bne	124d0 <emit_test@@Base+0x13c>
   12594:	ldr	r3, [r5]
   12598:	adds	r2, r5, r3
   1259c:	bne	125b4 <emit_test@@Base+0x220>
   125a0:	ldr	r3, [pc, #292]	; 126cc <emit_test@@Base+0x338>
   125a4:	mov	r2, #41	; 0x29
   125a8:	ldr	r1, [pc, #288]	; 126d0 <emit_test@@Base+0x33c>
   125ac:	ldr	r0, [pc, #288]	; 126d4 <emit_test@@Base+0x340>
   125b0:	b	124d8 <emit_test@@Base+0x144>
   125b4:	ldr	r3, [r5, r3]
   125b8:	sub	r3, r2, r3
   125bc:	ldrh	r1, [r3]
   125c0:	cmp	r1, #5
   125c4:	bls	125e4 <emit_test@@Base+0x250>
   125c8:	ldrh	r0, [r3, #4]
   125cc:	cmp	r0, #0
   125d0:	beq	125e4 <emit_test@@Base+0x250>
   125d4:	ldrd	r6, [r2, r0]
   125d8:	cmp	r7, #0
   125dc:	cmpeq	r6, #42	; 0x2a
   125e0:	beq	125f0 <emit_test@@Base+0x25c>
   125e4:	ldr	r3, [pc, #208]	; 126bc <emit_test@@Base+0x328>
   125e8:	mov	r2, #112	; 0x70
   125ec:	b	124d0 <emit_test@@Base+0x13c>
   125f0:	cmp	r1, #7
   125f4:	bls	12610 <emit_test@@Base+0x27c>
   125f8:	ldrh	r0, [r3, #6]
   125fc:	cmp	r0, #0
   12600:	beq	12610 <emit_test@@Base+0x27c>
   12604:	ldrb	r0, [r2, r0]
   12608:	cmp	r0, #1
   1260c:	beq	1261c <emit_test@@Base+0x288>
   12610:	ldr	r3, [pc, #164]	; 126bc <emit_test@@Base+0x328>
   12614:	mov	r2, #113	; 0x71
   12618:	b	124d0 <emit_test@@Base+0x13c>
   1261c:	cmp	r1, #9
   12620:	bls	12650 <emit_test@@Base+0x2bc>
   12624:	ldrh	r1, [r3, #8]
   12628:	cmp	r1, #0
   1262c:	beq	12650 <emit_test@@Base+0x2bc>
   12630:	add	r3, r2, r1
   12634:	ldr	r2, [r2, r1]
   12638:	add	r2, r2, #4
   1263c:	adds	r3, r3, r2
   12640:	beq	12650 <emit_test@@Base+0x2bc>
   12644:	ldr	r2, [r3, #-4]
   12648:	cmp	r2, #4
   1264c:	beq	1265c <emit_test@@Base+0x2c8>
   12650:	ldr	r3, [pc, #100]	; 126bc <emit_test@@Base+0x328>
   12654:	mov	r2, #114	; 0x72
   12658:	b	124d0 <emit_test@@Base+0x13c>
   1265c:	vldr	s15, [pc, #48]	; 12694 <emit_test@@Base+0x300>
   12660:	vldr	s14, [r3, #8]
   12664:	vcmp.f32	s14, s15
   12668:	vmrs	APSR_nzcv, fpscr
   1266c:	ldrne	r3, [pc, #72]	; 126bc <emit_test@@Base+0x328>
   12670:	movne	r2, #115	; 0x73
   12674:	bne	124d0 <emit_test@@Base+0x13c>
   12678:	add	r0, sp, #104	; 0x68
   1267c:	bl	130b8 <flatcc_builder_clear@@Base>
   12680:	mov	r0, r4
   12684:	add	sp, sp, #340	; 0x154
   12688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1268c:	mvn	r4, #0
   12690:	b	12680 <emit_test@@Base+0x2ec>
   12694:	svccc	0x0099999a
   12698:	andeq	r5, r1, r7, lsl sl
   1269c:	andeq	r5, r1, r4, asr sl
   126a0:	andeq	r7, r2, r0, rrx
   126a4:	andeq	r5, r1, lr, asr ip
   126a8:	andeq	r5, r1, ip, lsl #25
   126ac:	andeq	r5, r1, pc, ror #24
   126b0:	andeq	r5, r1, r9, ror ip
   126b4:	muleq	r1, r2, ip
   126b8:	andeq	r5, r1, lr, ror ip
   126bc:	andeq	r5, r1, r4, ror #20
   126c0:	andeq	r5, r1, r3, lsl ip
   126c4:	andeq	r6, r1, r4, lsl #9
   126c8:	andeq	r5, r1, r4, lsl #25
   126cc:	andeq	r5, r1, lr, ror #20
   126d0:	muleq	r1, r6, ip
   126d4:	strdeq	r5, [r1], -r2
   126d8:	ldr	ip, [r0, #28]
   126dc:	ldrd	r2, [r0, #60]	; 0x3c
   126e0:	sub	r3, r3, ip
   126e4:	add	r2, r2, ip
   126e8:	cmp	r3, r1
   126ec:	strls	r3, [r0, #24]
   126f0:	strhi	r1, [r0, #24]
   126f4:	ldr	r3, [r0, #32]
   126f8:	str	r2, [r0, #16]
   126fc:	str	r1, [r3, #4]
   12700:	bx	lr
   12704:	push	{r0, r1, r4, r5, r6, lr}
   12708:	mov	r6, r2
   1270c:	mov	r3, #1
   12710:	mov	r4, r0
   12714:	ldr	r2, [r0, #28]
   12718:	str	r3, [sp]
   1271c:	ldr	r5, [r0, #48]	; 0x30
   12720:	add	r2, r1, r2
   12724:	add	r1, r0, #60	; 0x3c
   12728:	ldr	r0, [r0, #40]	; 0x28
   1272c:	blx	r5
   12730:	subs	r5, r0, #0
   12734:	mvnne	r5, #0
   12738:	bne	12748 <emit_test@@Base+0x3b4>
   1273c:	mov	r1, r6
   12740:	mov	r0, r4
   12744:	bl	126d8 <emit_test@@Base+0x344>
   12748:	mov	r0, r5
   1274c:	add	sp, sp, #8
   12750:	pop	{r4, r5, r6, pc}
   12754:	push	{r4, r5, r6, lr}
   12758:	mov	r4, r0
   1275c:	ldr	r5, [r0, #20]
   12760:	ldr	r3, [r0, #24]
   12764:	add	r1, r5, r1
   12768:	cmp	r1, r3
   1276c:	str	r1, [r0, #20]
   12770:	bcs	12780 <emit_test@@Base+0x3ec>
   12774:	ldr	r0, [r4, #16]
   12778:	add	r0, r0, r5
   1277c:	pop	{r4, r5, r6, pc}
   12780:	mvn	r2, #3
   12784:	add	r1, r1, #1
   12788:	bl	12704 <emit_test@@Base+0x370>
   1278c:	cmp	r0, #0
   12790:	beq	12774 <emit_test@@Base+0x3e0>
   12794:	mov	r0, #0
   12798:	pop	{r4, r5, r6, pc}
   1279c:	push	{r4, lr}
   127a0:	mov	r1, #0
   127a4:	mov	r4, r0
   127a8:	ldr	r2, [r0, #20]
   127ac:	ldr	r0, [r0, #16]
   127b0:	bl	1201c <memset@plt>
   127b4:	ldr	r3, [r4, #32]
   127b8:	mov	r0, r4
   127bc:	ldmib	r3, {r1, r2}
   127c0:	str	r2, [r4, #20]
   127c4:	ldr	r2, [r3]
   127c8:	str	r2, [r4, #28]
   127cc:	bl	126d8 <emit_test@@Base+0x344>
   127d0:	ldrh	r3, [r4, #130]	; 0x82
   127d4:	ldrh	r2, [r4, #128]	; 0x80
   127d8:	cmp	r2, r3
   127dc:	strhcc	r3, [r4, #128]	; 0x80
   127e0:	ldr	r3, [r4, #32]
   127e4:	ldrh	r2, [r3, #12]
   127e8:	sub	r3, r3, #36	; 0x24
   127ec:	str	r3, [r4, #32]
   127f0:	ldr	r3, [r4, #156]	; 0x9c
   127f4:	strh	r2, [r4, #130]	; 0x82
   127f8:	sub	r3, r3, #1
   127fc:	str	r3, [r4, #156]	; 0x9c
   12800:	pop	{r4, pc}
   12804:	ldr	r3, [r0, #20]
   12808:	mov	r2, r1
   1280c:	mov	r1, #0
   12810:	sub	r3, r3, r2
   12814:	str	r3, [r0, #20]
   12818:	ldr	r0, [r0, #16]
   1281c:	add	r0, r0, r3
   12820:	b	1201c <memset@plt>
   12824:	push	{r4, r5, r6, lr}
   12828:	mov	r6, r1
   1282c:	mov	r1, r2
   12830:	mov	r4, r2
   12834:	bl	12754 <emit_test@@Base+0x3c0>
   12838:	subs	r5, r0, #0
   1283c:	beq	1284c <emit_test@@Base+0x4b8>
   12840:	mov	r2, r4
   12844:	mov	r1, r6
   12848:	bl	11fa4 <memcpy@plt>
   1284c:	mov	r0, r5
   12850:	pop	{r4, r5, r6, pc}
   12854:	push	{r0, r1, r4, lr}
   12858:	cmp	r0, #4
   1285c:	mov	r4, #0
   12860:	mov	r2, r1
   12864:	movcs	r1, r0
   12868:	movcc	r1, #4
   1286c:	add	r0, sp, #4
   12870:	str	r4, [sp, #4]
   12874:	bl	12010 <posix_memalign@plt>
   12878:	cmp	r0, r4
   1287c:	beq	12894 <emit_test@@Base+0x500>
   12880:	ldr	r0, [sp, #4]
   12884:	cmp	r0, r4
   12888:	beq	12894 <emit_test@@Base+0x500>
   1288c:	bl	11f98 <free@plt>
   12890:	str	r4, [sp, #4]
   12894:	ldr	r0, [sp, #4]
   12898:	add	sp, sp, #8
   1289c:	pop	{r4, pc}

000128a0 <flatcc_builder_default_alloc@@Base>:
   128a0:	push	{r4, r5, r6, r7, r8, lr}
   128a4:	subs	r6, r2, #0
   128a8:	mov	r5, r1
   128ac:	bne	128d0 <flatcc_builder_default_alloc@@Base+0x30>
   128b0:	ldr	r0, [r1]
   128b4:	cmp	r0, #0
   128b8:	popeq	{r4, r5, r6, r7, r8, pc}
   128bc:	bl	11f98 <free@plt>
   128c0:	str	r6, [r5]
   128c4:	str	r6, [r5, #4]
   128c8:	mov	r0, #0
   128cc:	pop	{r4, r5, r6, r7, r8, pc}
   128d0:	ldr	r2, [sp, #24]
   128d4:	mov	r7, r3
   128d8:	sub	r2, r2, #1
   128dc:	cmp	r2, #6
   128e0:	ldrls	pc, [pc, r2, lsl #2]
   128e4:	b	12978 <flatcc_builder_default_alloc@@Base+0xd8>
   128e8:	andeq	r2, r1, r0, lsl #19
   128ec:	andeq	r2, r1, r8, ror r9
   128f0:	andeq	r2, r1, r8, ror r9
   128f4:	andeq	r2, r1, r8, ror #18
   128f8:	andeq	r2, r1, r4, lsl #18
   128fc:	andeq	r2, r1, r8, ror r9
   12900:	andeq	r2, r1, r0, ror r9
   12904:	mov	r4, r6
   12908:	cmp	r6, r4
   1290c:	bhi	12988 <flatcc_builder_default_alloc@@Base+0xe8>
   12910:	ldr	r2, [r5, #4]
   12914:	cmp	r6, r2
   12918:	bhi	12924 <flatcc_builder_default_alloc@@Base+0x84>
   1291c:	cmp	r4, r2, lsr #1
   12920:	bls	128c8 <flatcc_builder_default_alloc@@Base+0x28>
   12924:	mov	r1, r4
   12928:	ldr	r0, [r5]
   1292c:	bl	11fbc <realloc@plt>
   12930:	subs	r6, r0, #0
   12934:	beq	12990 <flatcc_builder_default_alloc@@Base+0xf0>
   12938:	cmp	r7, #0
   1293c:	beq	1295c <flatcc_builder_default_alloc@@Base+0xbc>
   12940:	ldr	r0, [r5, #4]
   12944:	cmp	r4, r0
   12948:	bls	1295c <flatcc_builder_default_alloc@@Base+0xbc>
   1294c:	sub	r2, r4, r0
   12950:	mov	r1, #0
   12954:	add	r0, r6, r0
   12958:	bl	1201c <memset@plt>
   1295c:	str	r6, [r5]
   12960:	str	r4, [r5, #4]
   12964:	b	128c8 <flatcc_builder_default_alloc@@Base+0x28>
   12968:	mov	r4, #288	; 0x120
   1296c:	b	12908 <flatcc_builder_default_alloc@@Base+0x68>
   12970:	mov	r4, #64	; 0x40
   12974:	b	12908 <flatcc_builder_default_alloc@@Base+0x68>
   12978:	mov	r4, #32
   1297c:	b	12908 <flatcc_builder_default_alloc@@Base+0x68>
   12980:	mov	r4, #256	; 0x100
   12984:	b	12908 <flatcc_builder_default_alloc@@Base+0x68>
   12988:	lsl	r4, r4, #1
   1298c:	b	12908 <flatcc_builder_default_alloc@@Base+0x68>
   12990:	mvn	r0, #0
   12994:	pop	{r4, r5, r6, r7, r8, pc}
   12998:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1299c:	add	r6, r0, #52	; 0x34
   129a0:	mov	r4, r1
   129a4:	add	r1, r6, r1, lsl #3
   129a8:	mov	r5, r2
   129ac:	add	r2, r2, r3
   129b0:	ldr	r3, [r1, #4]
   129b4:	cmp	r2, r3
   129b8:	bls	129ec <flatcc_builder_default_alloc@@Base+0x14c>
   129bc:	str	r4, [sp]
   129c0:	ldr	r3, [sp, #32]
   129c4:	ldr	r7, [r0, #48]	; 0x30
   129c8:	ldr	r0, [r0, #40]	; 0x28
   129cc:	blx	r7
   129d0:	cmp	r0, #0
   129d4:	beq	129ec <flatcc_builder_default_alloc@@Base+0x14c>
   129d8:	ldr	r3, [pc, #28]	; 129fc <flatcc_builder_default_alloc@@Base+0x15c>
   129dc:	mov	r2, #308	; 0x134
   129e0:	ldr	r1, [pc, #24]	; 12a00 <flatcc_builder_default_alloc@@Base+0x160>
   129e4:	ldr	r0, [pc, #24]	; 12a04 <flatcc_builder_default_alloc@@Base+0x164>
   129e8:	bl	12058 <__assert_fail@plt>
   129ec:	ldr	r0, [r6, r4, lsl #3]
   129f0:	add	r0, r0, r5
   129f4:	add	sp, sp, #12
   129f8:	pop	{r4, r5, r6, r7, pc}
   129fc:	andeq	r5, r1, r8, lsl sp
   12a00:	andeq	r6, r1, r7, lsl r4
   12a04:	andeq	r6, r1, r4, lsl #9
   12a08:	ldrd	r2, [r0, #156]	; 0x9c
   12a0c:	push	{r0, r1, r4, r5, r6, lr}
   12a10:	mov	r5, r1
   12a14:	mov	r4, r0
   12a18:	add	r1, r2, #1
   12a1c:	cmp	r1, r3
   12a20:	str	r1, [r0, #156]	; 0x9c
   12a24:	ble	12ad0 <flatcc_builder_default_alloc@@Base+0x230>
   12a28:	ldr	r3, [r0, #176]	; 0xb0
   12a2c:	cmp	r1, r3
   12a30:	cmpgt	r3, #0
   12a34:	movgt	r3, #1
   12a38:	movle	r3, #0
   12a3c:	ble	12a4c <flatcc_builder_default_alloc@@Base+0x1ac>
   12a40:	mvn	r0, #0
   12a44:	add	sp, sp, #8
   12a48:	pop	{r4, r5, r6, pc}
   12a4c:	mov	r6, #36	; 0x24
   12a50:	mov	r1, #4
   12a54:	str	r3, [sp]
   12a58:	mov	r3, r6
   12a5c:	mul	r2, r6, r2
   12a60:	bl	12998 <flatcc_builder_default_alloc@@Base+0xf8>
   12a64:	cmp	r0, #0
   12a68:	str	r0, [r4, #32]
   12a6c:	beq	12a40 <flatcc_builder_default_alloc@@Base+0x1a0>
   12a70:	ldr	r3, [r4, #88]	; 0x58
   12a74:	ldr	r2, [r4, #176]	; 0xb0
   12a78:	udiv	r3, r3, r6
   12a7c:	cmp	r2, #0
   12a80:	cmpgt	r3, r2
   12a84:	movgt	r3, r2
   12a88:	str	r3, [r4, #160]	; 0xa0
   12a8c:	ldrh	r1, [r4, #130]	; 0x82
   12a90:	mvn	r0, #3
   12a94:	ldr	r3, [r4, #20]
   12a98:	ldr	r2, [r4, #32]
   12a9c:	str	r3, [r2, #8]
   12aa0:	strh	r1, [r2, #12]
   12aa4:	ldr	r1, [r4, #28]
   12aa8:	strh	r5, [r4, #130]	; 0x82
   12aac:	add	r3, r3, r1
   12ab0:	str	r0, [r2, #4]
   12ab4:	mov	r0, #0
   12ab8:	add	r3, r3, #7
   12abc:	str	r1, [r2]
   12ac0:	bic	r3, r3, #7
   12ac4:	str	r0, [r4, #20]
   12ac8:	str	r3, [r4, #28]
   12acc:	b	12a44 <flatcc_builder_default_alloc@@Base+0x1a4>
   12ad0:	ldr	r3, [r0, #32]
   12ad4:	add	r3, r3, #36	; 0x24
   12ad8:	str	r3, [r0, #32]
   12adc:	b	12a8c <flatcc_builder_default_alloc@@Base+0x1ec>
   12ae0:	ldr	r3, [r0, #32]
   12ae4:	push	{r0, r1, r2, r4, r5, lr}
   12ae8:	add	r1, r1, #2
   12aec:	mov	r4, r0
   12af0:	lsl	r5, r1, #1
   12af4:	ldrh	r1, [r3, #28]
   12af8:	ldr	r2, [r3, #16]
   12afc:	mov	r3, #1
   12b00:	str	r3, [sp]
   12b04:	mov	r3, r5
   12b08:	add	r2, r2, r1, lsl #1
   12b0c:	mov	r1, #0
   12b10:	bl	12998 <flatcc_builder_default_alloc@@Base+0xf8>
   12b14:	cmp	r0, #0
   12b18:	streq	r0, [r4, #4]
   12b1c:	mvneq	r0, #0
   12b20:	beq	12b5c <flatcc_builder_default_alloc@@Base+0x2bc>
   12b24:	ldr	r2, [r4, #32]
   12b28:	add	r0, r0, #4
   12b2c:	mov	r3, #0
   12b30:	mov	r1, #3
   12b34:	str	r0, [r4, #4]
   12b38:	mov	r0, r4
   12b3c:	str	r3, [sp]
   12b40:	sub	r3, r5, #3
   12b44:	ldr	r2, [r2, #20]
   12b48:	bl	12998 <flatcc_builder_default_alloc@@Base+0xf8>
   12b4c:	str	r0, [r4]
   12b50:	clz	r0, r0
   12b54:	lsr	r0, r0, #5
   12b58:	rsb	r0, r0, #0
   12b5c:	add	sp, sp, #12
   12b60:	pop	{r4, r5, pc}
   12b64:	push	{r0, r1, r2, r4, r5, lr}
   12b68:	ldr	r3, [r1]
   12b6c:	ldr	r4, [r0, #140]	; 0x8c
   12b70:	add	r2, r3, r4
   12b74:	cmp	r2, r4
   12b78:	ldrlt	r3, [pc, #76]	; 12bcc <flatcc_builder_default_alloc@@Base+0x32c>
   12b7c:	str	r2, [r0, #140]	; 0x8c
   12b80:	movwlt	r2, #673	; 0x2a1
   12b84:	blt	12bb4 <flatcc_builder_default_alloc@@Base+0x314>
   12b88:	add	r1, r1, #8
   12b8c:	str	r3, [sp]
   12b90:	mov	r3, r4
   12b94:	ldr	r2, [r1, #-4]
   12b98:	ldr	r5, [r0, #44]	; 0x2c
   12b9c:	ldr	r0, [r0, #36]	; 0x24
   12ba0:	blx	r5
   12ba4:	cmp	r0, #0
   12ba8:	beq	12bc0 <flatcc_builder_default_alloc@@Base+0x320>
   12bac:	ldr	r3, [pc, #24]	; 12bcc <flatcc_builder_default_alloc@@Base+0x32c>
   12bb0:	movw	r2, #677	; 0x2a5
   12bb4:	ldr	r1, [pc, #20]	; 12bd0 <flatcc_builder_default_alloc@@Base+0x330>
   12bb8:	ldr	r0, [pc, #20]	; 12bd4 <flatcc_builder_default_alloc@@Base+0x334>
   12bbc:	bl	12058 <__assert_fail@plt>
   12bc0:	add	r0, r4, #1
   12bc4:	add	sp, sp, #12
   12bc8:	pop	{r4, r5, pc}
   12bcc:	andeq	r5, r1, r7, lsr #26
   12bd0:	andeq	r6, r1, r7, lsl r4
   12bd4:	andeq	r6, r1, r4, lsl #9
   12bd8:	cmp	r2, #0
   12bdc:	bne	12bec <flatcc_builder_default_alloc@@Base+0x34c>
   12be0:	ldrh	r2, [r0, #132]	; 0x84
   12be4:	cmp	r2, #0
   12be8:	moveq	r2, #1
   12bec:	ldrh	ip, [r1]
   12bf0:	cmp	ip, #3
   12bf4:	movls	ip, #4
   12bf8:	strhls	ip, [r1]
   12bfc:	ldrh	ip, [r1]
   12c00:	cmp	ip, r2
   12c04:	strhcc	r2, [r1]
   12c08:	cmp	r3, #0
   12c0c:	bne	12c6c <flatcc_builder_default_alloc@@Base+0x3cc>
   12c10:	ldr	r3, [r0, #140]	; 0x8c
   12c14:	sub	r2, r2, #1
   12c18:	ands	r2, r2, r3
   12c1c:	beq	12c6c <flatcc_builder_default_alloc@@Base+0x3cc>
   12c20:	push	{r4, lr}
   12c24:	mov	r3, #1
   12c28:	sub	sp, sp, #72	; 0x48
   12c2c:	mov	r1, sp
   12c30:	ldr	r4, [pc, #60]	; 12c74 <flatcc_builder_default_alloc@@Base+0x3d4>
   12c34:	strd	r2, [sp]
   12c38:	str	r4, [sp, #8]
   12c3c:	str	r2, [sp, #12]
   12c40:	bl	12b64 <flatcc_builder_default_alloc@@Base+0x2c4>
   12c44:	cmp	r0, #0
   12c48:	bne	12c60 <flatcc_builder_default_alloc@@Base+0x3c0>
   12c4c:	add	r3, r4, #512	; 0x200
   12c50:	movw	r2, #702	; 0x2be
   12c54:	ldr	r1, [pc, #28]	; 12c78 <flatcc_builder_default_alloc@@Base+0x3d8>
   12c58:	ldr	r0, [pc, #28]	; 12c7c <flatcc_builder_default_alloc@@Base+0x3dc>
   12c5c:	bl	12058 <__assert_fail@plt>
   12c60:	mov	r0, #0
   12c64:	add	sp, sp, #72	; 0x48
   12c68:	pop	{r4, pc}
   12c6c:	mov	r0, #0
   12c70:	bx	lr
   12c74:	andeq	r5, r1, r1, lsr sp
   12c78:	andeq	r6, r1, r7, lsl r4
   12c7c:	andeq	r6, r1, r4, lsl #9
   12c80:	ldr	r3, [r1]
   12c84:	push	{r0, r1, r4, r5, r6, lr}
   12c88:	ldr	r2, [r0, #136]	; 0x88
   12c8c:	sub	r4, r2, r3
   12c90:	cmp	r2, r4
   12c94:	ldrle	r3, [pc, #80]	; 12cec <flatcc_builder_default_alloc@@Base+0x44c>
   12c98:	movwle	r2, #647	; 0x287
   12c9c:	ble	12cd0 <flatcc_builder_default_alloc@@Base+0x430>
   12ca0:	mov	r5, r0
   12ca4:	add	r1, r1, #8
   12ca8:	str	r3, [sp]
   12cac:	mov	r3, r4
   12cb0:	ldr	r2, [r1, #-4]
   12cb4:	ldr	r0, [r0, #36]	; 0x24
   12cb8:	ldr	r6, [r5, #44]	; 0x2c
   12cbc:	blx	r6
   12cc0:	cmp	r0, #0
   12cc4:	beq	12cdc <flatcc_builder_default_alloc@@Base+0x43c>
   12cc8:	ldr	r3, [pc, #28]	; 12cec <flatcc_builder_default_alloc@@Base+0x44c>
   12ccc:	movw	r2, #651	; 0x28b
   12cd0:	ldr	r1, [pc, #24]	; 12cf0 <flatcc_builder_default_alloc@@Base+0x450>
   12cd4:	ldr	r0, [pc, #24]	; 12cf4 <flatcc_builder_default_alloc@@Base+0x454>
   12cd8:	bl	12058 <__assert_fail@plt>
   12cdc:	mov	r0, r4
   12ce0:	str	r4, [r5, #136]	; 0x88
   12ce4:	add	sp, sp, #8
   12ce8:	pop	{r4, r5, r6, pc}
   12cec:	andeq	r5, r1, r0, asr #30
   12cf0:	andeq	r6, r1, r7, lsl r4
   12cf4:	andeq	r6, r1, r4, lsl #9
   12cf8:	ldr	r3, [r0, #20]
   12cfc:	adds	r1, r3, r1
   12d00:	movcs	r3, #1
   12d04:	movcc	r3, #0
   12d08:	cmp	r1, r2
   12d0c:	movls	r2, r3
   12d10:	orrhi	r2, r3, #1
   12d14:	cmp	r2, #0
   12d18:	beq	12d34 <flatcc_builder_default_alloc@@Base+0x494>
   12d1c:	push	{r4, lr}
   12d20:	mov	r2, #892	; 0x37c
   12d24:	ldr	r3, [pc, #20]	; 12d40 <flatcc_builder_default_alloc@@Base+0x4a0>
   12d28:	ldr	r1, [pc, #20]	; 12d44 <flatcc_builder_default_alloc@@Base+0x4a4>
   12d2c:	ldr	r0, [pc, #20]	; 12d48 <flatcc_builder_default_alloc@@Base+0x4a8>
   12d30:	bl	12058 <__assert_fail@plt>
   12d34:	str	r1, [r0, #20]
   12d38:	mov	r0, r2
   12d3c:	bx	lr
   12d40:	andeq	r5, r1, fp, asr #30
   12d44:	andeq	r6, r1, r7, lsl r4
   12d48:	andeq	r6, r1, sp, asr r4
   12d4c:	ldrh	ip, [r0, #128]	; 0x80
   12d50:	push	{r4, r5, r6, lr}
   12d54:	sub	sp, sp, #80	; 0x50
   12d58:	ldr	r5, [r0, #136]	; 0x88
   12d5c:	cmp	ip, #3
   12d60:	movls	ip, #4
   12d64:	strhls	ip, [r0, #128]	; 0x80
   12d68:	mov	ip, #4
   12d6c:	add	lr, sp, ip
   12d70:	and	r4, r5, #3
   12d74:	stmib	sp, {r2, ip}
   12d78:	str	lr, [sp, #16]
   12d7c:	str	ip, [sp, #20]
   12d80:	mov	ip, #1
   12d84:	str	ip, [sp, #12]
   12d88:	lsls	ip, r2, #2
   12d8c:	beq	12da8 <flatcc_builder_default_alloc@@Base+0x508>
   12d90:	add	lr, ip, #4
   12d94:	str	ip, [sp, #28]
   12d98:	mov	ip, #2
   12d9c:	str	lr, [sp, #8]
   12da0:	str	ip, [sp, #12]
   12da4:	str	r1, [sp, #24]
   12da8:	cmp	r4, #0
   12dac:	beq	12ddc <flatcc_builder_default_alloc@@Base+0x53c>
   12db0:	ldr	ip, [sp, #8]
   12db4:	add	lr, sp, #80	; 0x50
   12db8:	ldr	r6, [pc, #204]	; 12e8c <flatcc_builder_default_alloc@@Base+0x5ec>
   12dbc:	add	ip, ip, r4
   12dc0:	str	ip, [sp, #8]
   12dc4:	ldr	ip, [sp, #12]
   12dc8:	add	ip, ip, #1
   12dcc:	add	lr, lr, ip, lsl #3
   12dd0:	str	ip, [sp, #12]
   12dd4:	str	r6, [lr, #-72]	; 0xffffffb8
   12dd8:	str	r4, [lr, #-68]	; 0xffffffbc
   12ddc:	ldr	lr, [sp, #8]
   12de0:	mov	ip, #0
   12de4:	mvn	r6, #3
   12de8:	sub	lr, lr, #4
   12dec:	sub	lr, lr, r5
   12df0:	cmp	r2, ip
   12df4:	bne	12e08 <flatcc_builder_default_alloc@@Base+0x568>
   12df8:	add	r1, sp, #8
   12dfc:	bl	12c80 <flatcc_builder_default_alloc@@Base+0x3e0>
   12e00:	add	sp, sp, #80	; 0x50
   12e04:	pop	{r4, r5, r6, pc}
   12e08:	ldr	r5, [r1, ip, lsl #2]
   12e0c:	cmp	r5, #0
   12e10:	beq	12e48 <flatcc_builder_default_alloc@@Base+0x5a8>
   12e14:	mla	r4, r6, ip, lr
   12e18:	cmp	r3, #0
   12e1c:	add	r4, r4, r5
   12e20:	str	r4, [r1, ip, lsl #2]
   12e24:	beq	12e84 <flatcc_builder_default_alloc@@Base+0x5e4>
   12e28:	ldrb	r4, [r3, ip]
   12e2c:	cmp	r4, #0
   12e30:	bne	12e84 <flatcc_builder_default_alloc@@Base+0x5e4>
   12e34:	ldr	r3, [pc, #84]	; 12e90 <flatcc_builder_default_alloc@@Base+0x5f0>
   12e38:	movw	r2, #1457	; 0x5b1
   12e3c:	ldr	r1, [pc, #80]	; 12e94 <flatcc_builder_default_alloc@@Base+0x5f4>
   12e40:	ldr	r0, [pc, #80]	; 12e98 <flatcc_builder_default_alloc@@Base+0x5f8>
   12e44:	bl	12058 <__assert_fail@plt>
   12e48:	cmp	r3, #0
   12e4c:	beq	12e70 <flatcc_builder_default_alloc@@Base+0x5d0>
   12e50:	ldrb	r4, [r3, ip]
   12e54:	cmp	r4, #0
   12e58:	beq	12e84 <flatcc_builder_default_alloc@@Base+0x5e4>
   12e5c:	ldr	r3, [pc, #44]	; 12e90 <flatcc_builder_default_alloc@@Base+0x5f0>
   12e60:	movw	r2, #1461	; 0x5b5
   12e64:	ldr	r1, [pc, #40]	; 12e94 <flatcc_builder_default_alloc@@Base+0x5f4>
   12e68:	ldr	r0, [pc, #44]	; 12e9c <flatcc_builder_default_alloc@@Base+0x5fc>
   12e6c:	b	12e44 <flatcc_builder_default_alloc@@Base+0x5a4>
   12e70:	ldr	r3, [pc, #24]	; 12e90 <flatcc_builder_default_alloc@@Base+0x5f0>
   12e74:	movw	r2, #1463	; 0x5b7
   12e78:	ldr	r1, [pc, #20]	; 12e94 <flatcc_builder_default_alloc@@Base+0x5f4>
   12e7c:	ldr	r0, [pc, #28]	; 12ea0 <flatcc_builder_default_alloc@@Base+0x600>
   12e80:	b	12e44 <flatcc_builder_default_alloc@@Base+0x5a4>
   12e84:	add	ip, ip, #1
   12e88:	b	12df0 <flatcc_builder_default_alloc@@Base+0x550>
   12e8c:	andeq	r5, r1, r1, lsr sp
   12e90:	andeq	r5, r1, ip, asr pc
   12e94:	andeq	r6, r1, r7, lsl r4
   12e98:	andeq	r6, r1, r8, ror r4
   12e9c:	andeq	r6, r1, r6, lsl #9
   12ea0:	andeq	r6, r1, r4, lsl #9

00012ea4 <flatcc_builder_flush_vtable_cache@@Base>:
   12ea4:	ldr	r3, [r0, #116]	; 0x74
   12ea8:	cmp	r3, #0
   12eac:	bxeq	lr
   12eb0:	push	{r4, lr}
   12eb4:	mov	r4, r0
   12eb8:	mov	r1, #0
   12ebc:	ldr	r0, [r0, #92]	; 0x5c
   12ec0:	ldr	r2, [r4, #96]	; 0x60
   12ec4:	bl	1201c <memset@plt>
   12ec8:	mov	r0, #0
   12ecc:	mov	r1, #16
   12ed0:	strd	r0, [r4, #120]	; 0x78
   12ed4:	pop	{r4, pc}

00012ed8 <flatcc_builder_custom_init@@Base>:
   12ed8:	push	{r4, r5, r6, r7, r8, lr}
   12edc:	mov	r6, r1
   12ee0:	mov	r7, r2
   12ee4:	mov	r1, #0
   12ee8:	mov	r2, #232	; 0xe8
   12eec:	mov	r4, r0
   12ef0:	mov	r5, r3
   12ef4:	bl	1201c <memset@plt>
   12ef8:	cmp	r6, #0
   12efc:	mov	r0, #0
   12f00:	moveq	r3, #1
   12f04:	addeq	r7, r4, #188	; 0xbc
   12f08:	ldreq	r6, [pc, #36]	; 12f34 <flatcc_builder_custom_init@@Base+0x5c>
   12f0c:	streq	r3, [r4, #184]	; 0xb8
   12f10:	cmp	r5, #0
   12f14:	ldr	r3, [pc, #28]	; 12f38 <flatcc_builder_custom_init@@Base+0x60>
   12f18:	str	r7, [r4, #36]	; 0x24
   12f1c:	str	r6, [r4, #44]	; 0x2c
   12f20:	moveq	r5, r3
   12f24:	ldr	r3, [sp, #24]
   12f28:	str	r3, [r4, #40]	; 0x28
   12f2c:	str	r5, [r4, #48]	; 0x30
   12f30:	pop	{r4, r5, r6, r7, r8, pc}
   12f34:	andeq	r5, r1, r8, ror #11
   12f38:	andeq	r2, r1, r0, lsr #17

00012f3c <flatcc_builder_init@@Base>:
   12f3c:	push	{r4, lr}
   12f40:	mov	r2, #232	; 0xe8
   12f44:	mov	r1, #0
   12f48:	bl	1201c <memset@plt>
   12f4c:	mov	r3, r0
   12f50:	mov	r2, #1
   12f54:	mov	r0, #0
   12f58:	str	r2, [r3, #184]	; 0xb8
   12f5c:	ldr	r2, [pc, #20]	; 12f78 <flatcc_builder_init@@Base+0x3c>
   12f60:	str	r2, [r3, #48]	; 0x30
   12f64:	add	r2, r3, #188	; 0xbc
   12f68:	str	r2, [r3, #36]	; 0x24
   12f6c:	ldr	r2, [pc, #8]	; 12f7c <flatcc_builder_init@@Base+0x40>
   12f70:	str	r2, [r3, #44]	; 0x2c
   12f74:	pop	{r4, pc}
   12f78:	andeq	r2, r1, r0, lsr #17
   12f7c:	andeq	r5, r1, r8, ror #11

00012f80 <flatcc_builder_custom_reset@@Base>:
   12f80:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   12f84:	mov	r4, r0
   12f88:	mov	r7, r1
   12f8c:	mov	r8, r2
   12f90:	mov	r5, r0
   12f94:	mov	r6, #0
   12f98:	ldr	r3, [r5, #52]	; 0x34
   12f9c:	add	r1, r5, #52	; 0x34
   12fa0:	cmp	r3, #0
   12fa4:	beq	13080 <flatcc_builder_custom_reset@@Base+0x100>
   12fa8:	cmp	r6, #5
   12fac:	cmpne	r8, #0
   12fb0:	bne	13058 <flatcc_builder_custom_reset@@Base+0xd8>
   12fb4:	mov	r1, #0
   12fb8:	ldr	r0, [r5, #52]	; 0x34
   12fbc:	ldr	r2, [r5, #56]	; 0x38
   12fc0:	bl	1201c <memset@plt>
   12fc4:	add	r6, r6, #1
   12fc8:	add	r5, r5, #8
   12fcc:	cmp	r6, #8
   12fd0:	bne	12f98 <flatcc_builder_custom_reset@@Base+0x18>
   12fd4:	ldr	r2, [r4, #124]	; 0x7c
   12fd8:	mov	r3, #0
   12fdc:	ldr	r0, [r4, #184]	; 0xb8
   12fe0:	str	r3, [r4, #24]
   12fe4:	str	r3, [r4, #32]
   12fe8:	cmp	r2, r3
   12fec:	str	r3, [r4, #120]	; 0x78
   12ff0:	movne	r2, #16
   12ff4:	strh	r3, [r4, #128]	; 0x80
   12ff8:	str	r3, [r4, #136]	; 0x88
   12ffc:	strne	r2, [r4, #124]	; 0x7c
   13000:	cmp	r7, #0
   13004:	ldr	r2, [r4, #60]	; 0x3c
   13008:	strne	r3, [r4, #172]	; 0xac
   1300c:	strne	r3, [r4, #176]	; 0xb0
   13010:	strne	r3, [r4, #180]	; 0xb4
   13014:	cmp	r0, #0
   13018:	strd	r2, [r4, #16]
   1301c:	ldr	r2, [r4, #76]	; 0x4c
   13020:	str	r2, [r4]
   13024:	ldr	r2, [r4, #52]	; 0x34
   13028:	str	r3, [r4, #140]	; 0x8c
   1302c:	str	r3, [r4, #148]	; 0x94
   13030:	str	r3, [r4, #152]	; 0x98
   13034:	str	r3, [r4, #156]	; 0x9c
   13038:	str	r2, [r4, #4]
   1303c:	str	r3, [r4, #160]	; 0xa0
   13040:	beq	13050 <flatcc_builder_custom_reset@@Base+0xd0>
   13044:	add	r0, r4, #188	; 0xbc
   13048:	bl	154e8 <flatcc_emitter_reset@@Base>
   1304c:	mov	r0, #0
   13050:	add	sp, sp, #12
   13054:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13058:	mov	r3, #1
   1305c:	ldr	r0, [r4, #40]	; 0x28
   13060:	mov	r2, r3
   13064:	ldr	r9, [r4, #48]	; 0x30
   13068:	str	r6, [sp]
   1306c:	blx	r9
   13070:	cmp	r0, #0
   13074:	beq	12fb4 <flatcc_builder_custom_reset@@Base+0x34>
   13078:	mvn	r0, #0
   1307c:	b	13050 <flatcc_builder_custom_reset@@Base+0xd0>
   13080:	ldr	r3, [r5, #56]	; 0x38
   13084:	cmp	r3, #0
   13088:	beq	12fc4 <flatcc_builder_custom_reset@@Base+0x44>
   1308c:	ldr	r3, [pc, #12]	; 130a0 <flatcc_builder_custom_reset@@Base+0x120>
   13090:	movw	r2, #434	; 0x1b2
   13094:	ldr	r1, [pc, #8]	; 130a4 <flatcc_builder_custom_reset@@Base+0x124>
   13098:	ldr	r0, [pc, #8]	; 130a8 <flatcc_builder_custom_reset@@Base+0x128>
   1309c:	bl	12058 <__assert_fail@plt>
   130a0:	andeq	r5, r1, r9, ror pc
   130a4:	andeq	r6, r1, r7, lsl r4
   130a8:	muleq	r1, r4, r4

000130ac <flatcc_builder_reset@@Base>:
   130ac:	mov	r2, #0
   130b0:	mov	r1, r2
   130b4:	b	12f80 <flatcc_builder_custom_reset@@Base>

000130b8 <flatcc_builder_clear@@Base>:
   130b8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   130bc:	mov	r4, r0
   130c0:	add	r6, r0, #52	; 0x34
   130c4:	mov	r5, #0
   130c8:	mov	r3, #0
   130cc:	mov	r1, r6
   130d0:	mov	r2, r3
   130d4:	ldr	r0, [r4, #40]	; 0x28
   130d8:	add	r6, r6, #8
   130dc:	ldr	r7, [r4, #48]	; 0x30
   130e0:	str	r5, [sp]
   130e4:	add	r5, r5, #1
   130e8:	blx	r7
   130ec:	cmp	r5, #8
   130f0:	bne	130c8 <flatcc_builder_clear@@Base+0x10>
   130f4:	ldr	r3, [r4, #184]	; 0xb8
   130f8:	cmp	r3, #0
   130fc:	beq	13108 <flatcc_builder_clear@@Base+0x50>
   13100:	add	r0, r4, #188	; 0xbc
   13104:	bl	15590 <flatcc_emitter_clear@@Base>
   13108:	mov	r2, #232	; 0xe8
   1310c:	mov	r1, #0
   13110:	mov	r0, r4
   13114:	add	sp, sp, #12
   13118:	pop	{r4, r5, r6, r7, lr}
   1311c:	b	1201c <memset@plt>

00013120 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13120:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13124:	add	r5, r1, #3
   13128:	mov	r7, #0
   1312c:	bic	r5, r5, #3
   13130:	mov	r1, #7
   13134:	add	r5, r5, #4
   13138:	mov	r6, r0
   1313c:	mov	r3, r5
   13140:	str	r7, [sp]
   13144:	ldr	r2, [r0, #228]	; 0xe4
   13148:	bl	12998 <flatcc_builder_default_alloc@@Base+0xf8>
   1314c:	subs	r4, r0, #0
   13150:	beq	1317c <flatcc_builder_enter_user_frame_ptr@@Base+0x5c>
   13154:	mov	r2, r5
   13158:	mov	r1, r7
   1315c:	bl	1201c <memset@plt>
   13160:	ldr	r3, [r6, #224]	; 0xe0
   13164:	str	r3, [r4], #4
   13168:	ldr	r1, [r6, #228]	; 0xe4
   1316c:	add	r3, r1, #4
   13170:	add	r5, r1, r5
   13174:	str	r3, [r6, #224]	; 0xe0
   13178:	str	r5, [r6, #228]	; 0xe4
   1317c:	mov	r0, r4
   13180:	add	sp, sp, #12
   13184:	pop	{r4, r5, r6, r7, pc}

00013188 <flatcc_builder_enter_user_frame@@Base>:
   13188:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1318c:	add	r4, r1, #3
   13190:	mov	r7, #0
   13194:	bic	r4, r4, #3
   13198:	mov	r1, #7
   1319c:	add	r4, r4, #4
   131a0:	mov	r6, r0
   131a4:	mov	r3, r4
   131a8:	str	r7, [sp]
   131ac:	ldr	r2, [r0, #228]	; 0xe4
   131b0:	bl	12998 <flatcc_builder_default_alloc@@Base+0xf8>
   131b4:	subs	r5, r0, #0
   131b8:	moveq	r0, r5
   131bc:	beq	131e8 <flatcc_builder_enter_user_frame@@Base+0x60>
   131c0:	mov	r2, r4
   131c4:	mov	r1, r7
   131c8:	bl	1201c <memset@plt>
   131cc:	ldr	r3, [r6, #224]	; 0xe0
   131d0:	str	r3, [r5]
   131d4:	ldr	r1, [r6, #228]	; 0xe4
   131d8:	add	r0, r1, #4
   131dc:	add	r4, r1, r4
   131e0:	str	r0, [r6, #224]	; 0xe0
   131e4:	str	r4, [r6, #228]	; 0xe4
   131e8:	add	sp, sp, #12
   131ec:	pop	{r4, r5, r6, r7, pc}

000131f0 <flatcc_builder_exit_user_frame@@Base>:
   131f0:	ldr	r3, [r0, #224]	; 0xe0
   131f4:	cmp	r3, #0
   131f8:	bne	13214 <flatcc_builder_exit_user_frame@@Base+0x24>
   131fc:	push	{r4, lr}
   13200:	movw	r2, #542	; 0x21e
   13204:	ldr	r3, [pc, #40]	; 13234 <flatcc_builder_exit_user_frame@@Base+0x44>
   13208:	ldr	r1, [pc, #40]	; 13238 <flatcc_builder_exit_user_frame@@Base+0x48>
   1320c:	ldr	r0, [pc, #40]	; 1323c <flatcc_builder_exit_user_frame@@Base+0x4c>
   13210:	bl	12058 <__assert_fail@plt>
   13214:	ldr	r1, [r0, #108]	; 0x6c
   13218:	mov	r2, r0
   1321c:	add	r1, r1, r3
   13220:	sub	r3, r3, #4
   13224:	str	r3, [r0, #228]	; 0xe4
   13228:	ldr	r0, [r1, #-4]
   1322c:	str	r0, [r2, #224]	; 0xe0
   13230:	bx	lr
   13234:	muleq	r1, r5, pc	; <UNPREDICTABLE>
   13238:	andeq	r6, r1, r7, lsl r4
   1323c:	andeq	r6, r1, r6, lsr #9

00013240 <flatcc_builder_exit_user_frame_at@@Base>:
   13240:	ldr	r2, [r0, #224]	; 0xe0
   13244:	cmp	r2, r1
   13248:	bcs	13264 <flatcc_builder_exit_user_frame_at@@Base+0x24>
   1324c:	push	{r4, lr}
   13250:	movw	r2, #551	; 0x227
   13254:	ldr	r3, [pc, #16]	; 1326c <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   13258:	ldr	r1, [pc, #16]	; 13270 <flatcc_builder_exit_user_frame_at@@Base+0x30>
   1325c:	ldr	r0, [pc, #16]	; 13274 <flatcc_builder_exit_user_frame_at@@Base+0x34>
   13260:	bl	12058 <__assert_fail@plt>
   13264:	str	r1, [r0, #224]	; 0xe0
   13268:	b	131f0 <flatcc_builder_exit_user_frame@@Base>
   1326c:			; <UNDEFINED> instruction: 0x00015fb4
   13270:	andeq	r6, r1, r7, lsl r4
   13274:			; <UNDEFINED> instruction: 0x000164bf

00013278 <flatcc_builder_get_current_user_frame@@Base>:
   13278:	ldr	r0, [r0, #224]	; 0xe0
   1327c:	bx	lr

00013280 <flatcc_builder_get_user_frame_ptr@@Base>:
   13280:	ldr	r0, [r0, #108]	; 0x6c
   13284:	add	r0, r0, r1
   13288:	bx	lr

0001328c <flatcc_builder_embed_buffer@@Base>:
   1328c:	push	{r4, r5, r6, lr}
   13290:	mov	r4, r3
   13294:	sub	sp, sp, #80	; 0x50
   13298:	mov	r6, r2
   1329c:	mov	r2, r1
   132a0:	add	r1, sp, #96	; 0x60
   132a4:	mov	r5, r0
   132a8:	ldr	r3, [r0, #152]	; 0x98
   132ac:	adds	r3, r3, #0
   132b0:	movne	r3, #1
   132b4:	bl	12bd8 <flatcc_builder_default_alloc@@Base+0x338>
   132b8:	cmp	r0, #0
   132bc:	movne	r0, #0
   132c0:	bne	13394 <flatcc_builder_embed_buffer@@Base+0x108>
   132c4:	ldr	r3, [sp, #100]	; 0x64
   132c8:	str	r0, [sp, #8]
   132cc:	str	r0, [sp, #12]
   132d0:	tst	r3, #2
   132d4:	ldr	r3, [r5, #136]	; 0x88
   132d8:	movne	r2, #4
   132dc:	moveq	r2, #0
   132e0:	sub	r3, r3, r4
   132e4:	sub	r3, r3, r2
   132e8:	ldrh	r2, [sp, #96]	; 0x60
   132ec:	sub	r2, r2, #1
   132f0:	and	r3, r3, r2
   132f4:	add	r2, r4, r3
   132f8:	str	r2, [sp, #4]
   132fc:	ldr	r2, [r5, #152]	; 0x98
   13300:	cmp	r2, #0
   13304:	beq	13324 <flatcc_builder_embed_buffer@@Base+0x98>
   13308:	mov	r2, #4
   1330c:	add	r1, sp, r2
   13310:	str	r2, [sp, #8]
   13314:	str	r1, [sp, #16]
   13318:	str	r2, [sp, #20]
   1331c:	mov	r2, #1
   13320:	str	r2, [sp, #12]
   13324:	cmp	r4, #0
   13328:	beq	13354 <flatcc_builder_embed_buffer@@Base+0xc8>
   1332c:	ldr	r2, [sp, #8]
   13330:	add	r1, sp, #80	; 0x50
   13334:	add	r2, r2, r4
   13338:	str	r2, [sp, #8]
   1333c:	ldr	r2, [sp, #12]
   13340:	add	r2, r2, #1
   13344:	add	r1, r1, r2, lsl #3
   13348:	str	r2, [sp, #12]
   1334c:	str	r6, [r1, #-72]	; 0xffffffb8
   13350:	str	r4, [r1, #-68]	; 0xffffffbc
   13354:	cmp	r3, #0
   13358:	beq	13388 <flatcc_builder_embed_buffer@@Base+0xfc>
   1335c:	ldr	r2, [sp, #8]
   13360:	add	r1, sp, #80	; 0x50
   13364:	ldr	r0, [pc, #48]	; 1339c <flatcc_builder_embed_buffer@@Base+0x110>
   13368:	add	r2, r2, r3
   1336c:	str	r2, [sp, #8]
   13370:	ldr	r2, [sp, #12]
   13374:	add	r2, r2, #1
   13378:	add	r1, r1, r2, lsl #3
   1337c:	str	r2, [sp, #12]
   13380:	str	r0, [r1, #-72]	; 0xffffffb8
   13384:	str	r3, [r1, #-68]	; 0xffffffbc
   13388:	add	r1, sp, #8
   1338c:	mov	r0, r5
   13390:	bl	12c80 <flatcc_builder_default_alloc@@Base+0x3e0>
   13394:	add	sp, sp, #80	; 0x50
   13398:	pop	{r4, r5, r6, pc}
   1339c:	andeq	r5, r1, r1, lsr sp

000133a0 <flatcc_builder_create_buffer@@Base>:
   133a0:	push	{r4, r5, r6, r7, r8, r9, lr}
   133a4:	sub	sp, sp, #92	; 0x5c
   133a8:	mov	r8, #0
   133ac:	mov	r9, r1
   133b0:	mov	r5, r3
   133b4:	add	r1, sp, #120	; 0x78
   133b8:	mov	r4, r0
   133bc:	ldr	r7, [sp, #124]	; 0x7c
   133c0:	str	r8, [sp, #12]
   133c4:	and	r6, r7, #1
   133c8:	mov	r3, r6
   133cc:	bl	12bd8 <flatcc_builder_default_alloc@@Base+0x338>
   133d0:	cmp	r0, r8
   133d4:	bne	13544 <flatcc_builder_create_buffer@@Base+0x1a4>
   133d8:	ldrh	r3, [r4, #128]	; 0x80
   133dc:	ldrh	r1, [sp, #120]	; 0x78
   133e0:	ldr	r2, [r4, #136]	; 0x88
   133e4:	cmp	r3, r1
   133e8:	strhcc	r1, [r4, #128]	; 0x80
   133ec:	cmp	r9, #0
   133f0:	sub	r1, r1, #1
   133f4:	ldrne	r3, [r9]
   133f8:	strne	r3, [sp, #12]
   133fc:	sub	r3, r2, #4
   13400:	ldr	r0, [sp, #12]
   13404:	cmp	r0, #0
   13408:	movne	r0, #4
   1340c:	tst	r7, #2
   13410:	movne	ip, #4
   13414:	moveq	ip, #0
   13418:	sub	r3, r3, r0
   1341c:	ands	r7, r7, #3
   13420:	sub	r3, r3, ip
   13424:	and	r3, r3, r1
   13428:	mov	r1, #0
   1342c:	str	r1, [sp, #16]
   13430:	str	r1, [sp, #20]
   13434:	beq	13454 <flatcc_builder_create_buffer@@Base+0xb4>
   13438:	mov	r1, #4
   1343c:	add	ip, sp, #8
   13440:	str	r1, [sp, #16]
   13444:	str	ip, [sp, #24]
   13448:	str	r1, [sp, #28]
   1344c:	mov	r1, #1
   13450:	str	r1, [sp, #20]
   13454:	ldr	ip, [sp, #16]
   13458:	add	r8, sp, #88	; 0x58
   1345c:	add	r9, sp, #4
   13460:	cmp	r0, #0
   13464:	ldr	lr, [sp, #20]
   13468:	add	ip, ip, #4
   1346c:	add	r1, lr, #1
   13470:	str	ip, [sp, #16]
   13474:	add	r8, r8, r1, lsl #3
   13478:	str	r1, [sp, #20]
   1347c:	str	r9, [r8, #-72]	; 0xffffffb8
   13480:	mov	r9, #4
   13484:	str	r9, [r8, #-68]	; 0xffffffbc
   13488:	beq	134b4 <flatcc_builder_create_buffer@@Base+0x114>
   1348c:	add	ip, ip, r0
   13490:	add	r1, lr, #2
   13494:	add	lr, lr, #2
   13498:	str	ip, [sp, #16]
   1349c:	add	ip, sp, #88	; 0x58
   134a0:	add	r1, ip, r1, lsl #3
   134a4:	add	ip, sp, #12
   134a8:	str	lr, [sp, #20]
   134ac:	str	ip, [r1, #-72]	; 0xffffffb8
   134b0:	str	r0, [r1, #-68]	; 0xffffffbc
   134b4:	cmp	r3, #0
   134b8:	beq	134e8 <flatcc_builder_create_buffer@@Base+0x148>
   134bc:	ldr	r1, [sp, #16]
   134c0:	add	r0, sp, #88	; 0x58
   134c4:	ldr	ip, [pc, #132]	; 13550 <flatcc_builder_create_buffer@@Base+0x1b0>
   134c8:	add	r1, r1, r3
   134cc:	str	r1, [sp, #16]
   134d0:	ldr	r1, [sp, #20]
   134d4:	add	r1, r1, #1
   134d8:	add	r0, r0, r1, lsl #3
   134dc:	str	r1, [sp, #20]
   134e0:	str	ip, [r0, #-72]	; 0xffffffb8
   134e4:	str	r3, [r0, #-68]	; 0xffffffbc
   134e8:	ldr	r3, [sp, #16]
   134ec:	cmp	r7, #0
   134f0:	add	r1, sp, #16
   134f4:	mov	r0, r4
   134f8:	sub	r3, r2, r3
   134fc:	movne	r2, #4
   13500:	moveq	r2, #0
   13504:	cmp	r6, #0
   13508:	add	r3, r3, r2
   1350c:	ldrne	r2, [r4, #144]	; 0x90
   13510:	ldreq	r2, [r4, #140]	; 0x8c
   13514:	sub	r2, r2, r3
   13518:	sub	r3, r5, r3
   1351c:	str	r3, [sp, #4]
   13520:	str	r2, [sp, #8]
   13524:	bl	12c80 <flatcc_builder_default_alloc@@Base+0x3e0>
   13528:	cmp	r0, #0
   1352c:	bne	13548 <flatcc_builder_create_buffer@@Base+0x1a8>
   13530:	ldr	r3, [pc, #28]	; 13554 <flatcc_builder_create_buffer@@Base+0x1b4>
   13534:	mov	r2, #772	; 0x304
   13538:	ldr	r1, [pc, #24]	; 13558 <flatcc_builder_create_buffer@@Base+0x1b8>
   1353c:	ldr	r0, [pc, #24]	; 1355c <flatcc_builder_create_buffer@@Base+0x1bc>
   13540:	bl	12058 <__assert_fail@plt>
   13544:	mov	r0, r8
   13548:	add	sp, sp, #92	; 0x5c
   1354c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13550:	andeq	r5, r1, r1, lsr sp
   13554:	ldrdeq	r5, [r1], -r6
   13558:	andeq	r6, r1, r7, lsl r4
   1355c:	andeq	r6, r1, r4, lsl #9

00013560 <flatcc_builder_create_struct@@Base>:
   13560:	cmp	r3, #0
   13564:	push	{lr}		; (str lr, [sp, #-4]!)
   13568:	sub	sp, sp, #76	; 0x4c
   1356c:	bne	13584 <flatcc_builder_create_struct@@Base+0x24>
   13570:	ldr	r3, [pc, #148]	; 1360c <flatcc_builder_create_struct@@Base+0xac>
   13574:	movw	r2, #783	; 0x30f
   13578:	ldr	r1, [pc, #144]	; 13610 <flatcc_builder_create_struct@@Base+0xb0>
   1357c:	ldr	r0, [pc, #144]	; 13614 <flatcc_builder_create_struct@@Base+0xb4>
   13580:	bl	12058 <__assert_fail@plt>
   13584:	ldrh	ip, [r0, #128]	; 0x80
   13588:	cmp	ip, r3
   1358c:	ldr	ip, [r0, #136]	; 0x88
   13590:	strhcc	r3, [r0, #128]	; 0x80
   13594:	sub	r3, r3, #1
   13598:	sub	ip, ip, r2
   1359c:	and	r3, r3, ip
   135a0:	mov	ip, #0
   135a4:	cmp	r2, ip
   135a8:	str	ip, [sp]
   135ac:	str	ip, [sp, #4]
   135b0:	beq	135c8 <flatcc_builder_create_struct@@Base+0x68>
   135b4:	str	r2, [sp]
   135b8:	str	r1, [sp, #8]
   135bc:	str	r2, [sp, #12]
   135c0:	mov	r2, #1
   135c4:	str	r2, [sp, #4]
   135c8:	cmp	r3, #0
   135cc:	beq	135fc <flatcc_builder_create_struct@@Base+0x9c>
   135d0:	ldr	r2, [sp]
   135d4:	add	r1, sp, #72	; 0x48
   135d8:	ldr	ip, [pc, #56]	; 13618 <flatcc_builder_create_struct@@Base+0xb8>
   135dc:	add	r2, r2, r3
   135e0:	str	r2, [sp]
   135e4:	ldr	r2, [sp, #4]
   135e8:	add	r2, r2, #1
   135ec:	add	r1, r1, r2, lsl #3
   135f0:	str	r2, [sp, #4]
   135f4:	str	ip, [r1, #-72]	; 0xffffffb8
   135f8:	str	r3, [r1, #-68]	; 0xffffffbc
   135fc:	mov	r1, sp
   13600:	bl	12c80 <flatcc_builder_default_alloc@@Base+0x3e0>
   13604:	add	sp, sp, #76	; 0x4c
   13608:	pop	{pc}		; (ldr pc, [sp], #4)
   1360c:	strdeq	r5, [r1], -r3
   13610:	andeq	r6, r1, r7, lsl r4
   13614:	ldrdeq	r6, [r1], -lr
   13618:	andeq	r5, r1, r1, lsr sp

0001361c <flatcc_builder_start_buffer@@Base>:
   1361c:	push	{r4, r5, r6, r7, r8, lr}
   13620:	mov	r5, r1
   13624:	mov	r4, r0
   13628:	mov	r7, r2
   1362c:	mov	r6, r3
   13630:	ldrh	r1, [r0, #128]	; 0x80
   13634:	bl	12a08 <flatcc_builder_default_alloc@@Base+0x168>
   13638:	cmp	r0, #0
   1363c:	bne	136ac <flatcc_builder_start_buffer@@Base+0x90>
   13640:	ldrh	r3, [r4, #132]	; 0x84
   13644:	mov	ip, #1
   13648:	cmp	r5, #0
   1364c:	ldr	r1, [r4, #32]
   13650:	strh	ip, [r4, #128]	; 0x80
   13654:	strh	r3, [r1, #34]	; 0x22
   13658:	ldrh	r3, [r4, #164]	; 0xa4
   1365c:	strh	r7, [r4, #132]	; 0x84
   13660:	strh	r3, [r1, #32]
   13664:	ldr	r3, [r4, #144]	; 0x90
   13668:	strh	r6, [r4, #164]	; 0xa4
   1366c:	str	r3, [r1, #20]
   13670:	ldr	r3, [r4, #152]	; 0x98
   13674:	str	r3, [r1, #28]
   13678:	ldr	r3, [r4, #136]	; 0x88
   1367c:	str	r3, [r4, #144]	; 0x90
   13680:	ldr	r3, [r4, #148]	; 0x94
   13684:	add	r2, r3, ip
   13688:	strd	r2, [r4, #148]	; 0x94
   1368c:	ldr	r3, [r4, #168]	; 0xa8
   13690:	str	r3, [r1, #16]
   13694:	ldr	r3, [pc, #24]	; 136b4 <flatcc_builder_start_buffer@@Base+0x98>
   13698:	moveq	r5, r3
   1369c:	ldr	r3, [r5]
   136a0:	str	r3, [r4, #168]	; 0xa8
   136a4:	strh	ip, [r1, #14]
   136a8:	pop	{r4, r5, r6, r7, r8, pc}
   136ac:	mvn	r0, #0
   136b0:	pop	{r4, r5, r6, r7, r8, pc}
   136b4:	andeq	r5, r1, r1, lsr sp

000136b8 <flatcc_builder_end_buffer@@Base>:
   136b8:	push	{r0, r1, r2, r4, r5, lr}
   136bc:	mov	r4, r0
   136c0:	ldrh	r0, [r0, #164]	; 0xa4
   136c4:	ldr	r2, [r4, #152]	; 0x98
   136c8:	and	r0, r0, #2
   136cc:	cmp	r2, #0
   136d0:	orrne	r0, r0, #1
   136d4:	ldr	r2, [r4, #32]
   136d8:	ldrh	r2, [r2, #14]
   136dc:	cmp	r2, #1
   136e0:	beq	136f8 <flatcc_builder_end_buffer@@Base+0x40>
   136e4:	ldr	r3, [pc, #120]	; 13764 <flatcc_builder_end_buffer@@Base+0xac>
   136e8:	movw	r2, #838	; 0x346
   136ec:	ldr	r1, [pc, #116]	; 13768 <flatcc_builder_end_buffer@@Base+0xb0>
   136f0:	ldr	r0, [pc, #116]	; 1376c <flatcc_builder_end_buffer@@Base+0xb4>
   136f4:	bl	12058 <__assert_fail@plt>
   136f8:	ldrh	r2, [r4, #132]	; 0x84
   136fc:	mov	r3, r1
   13700:	ldrh	r1, [r4, #128]	; 0x80
   13704:	cmp	r1, r2
   13708:	strhcc	r2, [r4, #128]	; 0x80
   1370c:	ldrh	r1, [r4, #128]	; 0x80
   13710:	str	r1, [sp]
   13714:	add	r1, r4, #168	; 0xa8
   13718:	str	r0, [sp, #4]
   1371c:	mov	r0, r4
   13720:	bl	133a0 <flatcc_builder_create_buffer@@Base>
   13724:	subs	r5, r0, #0
   13728:	beq	13758 <flatcc_builder_end_buffer@@Base+0xa0>
   1372c:	ldr	r3, [r4, #32]
   13730:	mov	r0, r4
   13734:	ldr	r2, [r3, #20]
   13738:	str	r2, [r4, #144]	; 0x90
   1373c:	ldr	r2, [r3, #28]
   13740:	str	r2, [r4, #152]	; 0x98
   13744:	ldr	r2, [r3, #16]
   13748:	ldrh	r3, [r3, #32]
   1374c:	strh	r3, [r4, #164]	; 0xa4
   13750:	str	r2, [r4, #168]	; 0xa8
   13754:	bl	1279c <emit_test@@Base+0x408>
   13758:	mov	r0, r5
   1375c:	add	sp, sp, #12
   13760:	pop	{r4, r5, pc}
   13764:	andeq	r6, r1, r0, lsl r0
   13768:	andeq	r6, r1, r7, lsl r4
   1376c:	andeq	r6, r1, r9, ror #9

00013770 <flatcc_builder_start_struct@@Base>:
   13770:	push	{r4, r5, r6, lr}
   13774:	mov	r5, r1
   13778:	mov	r1, r2
   1377c:	mov	r4, r0
   13780:	bl	12a08 <flatcc_builder_default_alloc@@Base+0x168>
   13784:	cmp	r0, #0
   13788:	bne	137b0 <flatcc_builder_start_struct@@Base+0x40>
   1378c:	ldr	r3, [r4, #32]
   13790:	mov	r2, #2
   13794:	mvn	r1, #3
   13798:	mov	r0, r4
   1379c:	strh	r2, [r3, #14]
   137a0:	bl	126d8 <emit_test@@Base+0x344>
   137a4:	mov	r1, r5
   137a8:	pop	{r4, r5, r6, lr}
   137ac:	b	12754 <emit_test@@Base+0x3c0>
   137b0:	mov	r0, #0
   137b4:	pop	{r4, r5, r6, pc}

000137b8 <flatcc_builder_struct_edit@@Base>:
   137b8:	ldr	r0, [r0, #16]
   137bc:	bx	lr

000137c0 <flatcc_builder_end_struct@@Base>:
   137c0:	ldr	r3, [r0, #32]
   137c4:	push	{r4, r5, r6, lr}
   137c8:	ldrh	r3, [r3, #14]
   137cc:	cmp	r3, #2
   137d0:	beq	137e8 <flatcc_builder_end_struct@@Base+0x28>
   137d4:	ldr	r3, [pc, #56]	; 13814 <flatcc_builder_end_struct@@Base+0x54>
   137d8:	mov	r2, #872	; 0x368
   137dc:	ldr	r1, [pc, #52]	; 13818 <flatcc_builder_end_struct@@Base+0x58>
   137e0:	ldr	r0, [pc, #52]	; 1381c <flatcc_builder_end_struct@@Base+0x5c>
   137e4:	bl	12058 <__assert_fail@plt>
   137e8:	ldrh	r3, [r0, #130]	; 0x82
   137ec:	mov	r4, r0
   137f0:	ldr	r1, [r0, #16]
   137f4:	ldr	r2, [r0, #20]
   137f8:	bl	13560 <flatcc_builder_create_struct@@Base>
   137fc:	subs	r5, r0, #0
   13800:	beq	1380c <flatcc_builder_end_struct@@Base+0x4c>
   13804:	mov	r0, r4
   13808:	bl	1279c <emit_test@@Base+0x408>
   1380c:	mov	r0, r5
   13810:	pop	{r4, r5, r6, pc}
   13814:	andeq	r6, r1, sl, lsr #32
   13818:	andeq	r6, r1, r7, lsl r4
   1381c:	andeq	r6, r1, r5, lsl r5

00013820 <flatcc_builder_extend_vector@@Base>:
   13820:	push	{r4, r5, r6, lr}
   13824:	mov	r4, r0
   13828:	mov	r5, r1
   1382c:	ldr	r0, [r0, #32]
   13830:	ldr	r2, [r0, #24]
   13834:	bl	12cf8 <flatcc_builder_default_alloc@@Base+0x458>
   13838:	cmp	r0, #0
   1383c:	bne	13858 <flatcc_builder_extend_vector@@Base+0x38>
   13840:	ldr	r3, [r4, #32]
   13844:	mov	r0, r4
   13848:	ldr	r1, [r3, #16]
   1384c:	mul	r1, r1, r5
   13850:	pop	{r4, r5, r6, lr}
   13854:	b	12754 <emit_test@@Base+0x3c0>
   13858:	mov	r0, #0
   1385c:	pop	{r4, r5, r6, pc}

00013860 <flatcc_builder_vector_push@@Base>:
   13860:	ldr	r3, [r0, #32]
   13864:	push	{r4, lr}
   13868:	ldrh	r2, [r3, #14]
   1386c:	cmp	r2, #4
   13870:	beq	13888 <flatcc_builder_vector_push@@Base+0x28>
   13874:	ldr	r3, [pc, #68]	; 138c0 <flatcc_builder_vector_push@@Base+0x60>
   13878:	movw	r2, #907	; 0x38b
   1387c:	ldr	r1, [pc, #64]	; 138c4 <flatcc_builder_vector_push@@Base+0x64>
   13880:	ldr	r0, [pc, #64]	; 138c8 <flatcc_builder_vector_push@@Base+0x68>
   13884:	bl	12058 <__assert_fail@plt>
   13888:	ldr	r2, [r3, #20]
   1388c:	ldr	ip, [r3, #24]
   13890:	cmp	r2, ip
   13894:	bls	138ac <flatcc_builder_vector_push@@Base+0x4c>
   13898:	ldr	r3, [pc, #32]	; 138c0 <flatcc_builder_vector_push@@Base+0x60>
   1389c:	mov	r2, #908	; 0x38c
   138a0:	ldr	r1, [pc, #28]	; 138c4 <flatcc_builder_vector_push@@Base+0x64>
   138a4:	ldr	r0, [pc, #32]	; 138cc <flatcc_builder_vector_push@@Base+0x6c>
   138a8:	b	13884 <flatcc_builder_vector_push@@Base+0x24>
   138ac:	add	r2, r2, #1
   138b0:	pop	{r4, lr}
   138b4:	str	r2, [r3, #20]
   138b8:	ldr	r2, [r3, #16]
   138bc:	b	12824 <emit_test@@Base+0x490>
   138c0:	andeq	r6, r1, r4, asr #32
   138c4:	andeq	r6, r1, r7, lsl r4
   138c8:	andeq	r6, r1, r1, asr #10
   138cc:	andeq	r6, r1, sp, ror #10

000138d0 <flatcc_builder_append_vector@@Base>:
   138d0:	push	{r4, r5, r6, lr}
   138d4:	mov	r4, r0
   138d8:	ldr	r0, [r0, #32]
   138dc:	ldrh	r3, [r0, #14]
   138e0:	cmp	r3, #4
   138e4:	beq	138fc <flatcc_builder_append_vector@@Base+0x2c>
   138e8:	ldr	r3, [pc, #76]	; 1393c <flatcc_builder_append_vector@@Base+0x6c>
   138ec:	movw	r2, #915	; 0x393
   138f0:	ldr	r1, [pc, #72]	; 13940 <flatcc_builder_append_vector@@Base+0x70>
   138f4:	ldr	r0, [pc, #72]	; 13944 <flatcc_builder_append_vector@@Base+0x74>
   138f8:	bl	12058 <__assert_fail@plt>
   138fc:	mov	r6, r1
   13900:	mov	r5, r2
   13904:	mov	r1, r2
   13908:	ldr	r2, [r0, #24]
   1390c:	bl	12cf8 <flatcc_builder_default_alloc@@Base+0x458>
   13910:	cmp	r0, #0
   13914:	bne	13934 <flatcc_builder_append_vector@@Base+0x64>
   13918:	ldr	r3, [r4, #32]
   1391c:	mov	r1, r6
   13920:	mov	r0, r4
   13924:	ldr	r2, [r3, #16]
   13928:	mul	r2, r2, r5
   1392c:	pop	{r4, r5, r6, lr}
   13930:	b	12824 <emit_test@@Base+0x490>
   13934:	mov	r0, #0
   13938:	pop	{r4, r5, r6, pc}
   1393c:	andeq	r6, r1, pc, asr r0
   13940:	andeq	r6, r1, r7, lsl r4
   13944:	andeq	r6, r1, r1, asr #10

00013948 <flatcc_builder_extend_offset_vector@@Base>:
   13948:	push	{r4, r5, r6, lr}
   1394c:	mvn	r2, #-1073741824	; 0xc0000000
   13950:	mov	r4, r0
   13954:	mov	r5, r1
   13958:	ldr	r0, [r0, #32]
   1395c:	bl	12cf8 <flatcc_builder_default_alloc@@Base+0x458>
   13960:	cmp	r0, #0
   13964:	bne	13978 <flatcc_builder_extend_offset_vector@@Base+0x30>
   13968:	lsl	r1, r5, #2
   1396c:	mov	r0, r4
   13970:	pop	{r4, r5, r6, lr}
   13974:	b	12754 <emit_test@@Base+0x3c0>
   13978:	mov	r0, #0
   1397c:	pop	{r4, r5, r6, pc}

00013980 <flatcc_builder_offset_vector_push@@Base>:
   13980:	ldr	r2, [r0, #32]
   13984:	push	{r4, lr}
   13988:	ldrh	r3, [r2, #14]
   1398c:	cmp	r3, #5
   13990:	beq	139a8 <flatcc_builder_offset_vector_push@@Base+0x28>
   13994:	ldr	r3, [pc, #64]	; 139dc <flatcc_builder_offset_vector_push@@Base+0x5c>
   13998:	movw	r2, #934	; 0x3a6
   1399c:	ldr	r1, [pc, #60]	; 139e0 <flatcc_builder_offset_vector_push@@Base+0x60>
   139a0:	ldr	r0, [pc, #60]	; 139e4 <flatcc_builder_offset_vector_push@@Base+0x64>
   139a4:	bl	12058 <__assert_fail@plt>
   139a8:	ldr	r3, [r2, #20]
   139ac:	cmn	r3, #-1073741823	; 0xc0000001
   139b0:	beq	139d4 <flatcc_builder_offset_vector_push@@Base+0x54>
   139b4:	add	r3, r3, #1
   139b8:	mov	r4, r1
   139bc:	mov	r1, #4
   139c0:	str	r3, [r2, #20]
   139c4:	bl	12754 <emit_test@@Base+0x3c0>
   139c8:	cmp	r0, #0
   139cc:	strne	r4, [r0]
   139d0:	pop	{r4, pc}
   139d4:	mov	r0, #0
   139d8:	pop	{r4, pc}
   139dc:	andeq	r6, r1, ip, ror r0
   139e0:	andeq	r6, r1, r7, lsl r4
   139e4:	andeq	r6, r1, sl, lsr #11

000139e8 <flatcc_builder_append_offset_vector@@Base>:
   139e8:	push	{r4, r5, r6, lr}
   139ec:	mov	r4, r0
   139f0:	ldr	r0, [r0, #32]
   139f4:	ldrh	r3, [r0, #14]
   139f8:	cmp	r3, #5
   139fc:	beq	13a14 <flatcc_builder_append_offset_vector@@Base+0x2c>
   13a00:	ldr	r3, [pc, #68]	; 13a4c <flatcc_builder_append_offset_vector@@Base+0x64>
   13a04:	mov	r2, #948	; 0x3b4
   13a08:	ldr	r1, [pc, #64]	; 13a50 <flatcc_builder_append_offset_vector@@Base+0x68>
   13a0c:	ldr	r0, [pc, #64]	; 13a54 <flatcc_builder_append_offset_vector@@Base+0x6c>
   13a10:	bl	12058 <__assert_fail@plt>
   13a14:	mov	r5, r2
   13a18:	mov	r6, r1
   13a1c:	mvn	r2, #-1073741824	; 0xc0000000
   13a20:	mov	r1, r5
   13a24:	bl	12cf8 <flatcc_builder_default_alloc@@Base+0x458>
   13a28:	cmp	r0, #0
   13a2c:	bne	13a44 <flatcc_builder_append_offset_vector@@Base+0x5c>
   13a30:	lsl	r2, r5, #2
   13a34:	mov	r1, r6
   13a38:	mov	r0, r4
   13a3c:	pop	{r4, r5, r6, lr}
   13a40:	b	12824 <emit_test@@Base+0x490>
   13a44:	mov	r0, #0
   13a48:	pop	{r4, r5, r6, pc}
   13a4c:	muleq	r1, lr, r0
   13a50:	andeq	r6, r1, r7, lsl r4
   13a54:	andeq	r6, r1, sl, lsr #11

00013a58 <flatcc_builder_extend_string@@Base>:
   13a58:	push	{r4, r5, r6, lr}
   13a5c:	mov	r4, r0
   13a60:	ldr	r0, [r0, #32]
   13a64:	ldrh	r3, [r0, #14]
   13a68:	cmp	r3, #6
   13a6c:	beq	13a84 <flatcc_builder_extend_string@@Base+0x2c>
   13a70:	ldr	r3, [pc, #56]	; 13ab0 <flatcc_builder_extend_string@@Base+0x58>
   13a74:	movw	r2, #957	; 0x3bd
   13a78:	ldr	r1, [pc, #52]	; 13ab4 <flatcc_builder_extend_string@@Base+0x5c>
   13a7c:	ldr	r0, [pc, #52]	; 13ab8 <flatcc_builder_extend_string@@Base+0x60>
   13a80:	bl	12058 <__assert_fail@plt>
   13a84:	mvn	r2, #0
   13a88:	mov	r5, r1
   13a8c:	bl	12cf8 <flatcc_builder_default_alloc@@Base+0x458>
   13a90:	cmp	r0, #0
   13a94:	bne	13aa8 <flatcc_builder_extend_string@@Base+0x50>
   13a98:	mov	r1, r5
   13a9c:	mov	r0, r4
   13aa0:	pop	{r4, r5, r6, lr}
   13aa4:	b	12754 <emit_test@@Base+0x3c0>
   13aa8:	mov	r0, #0
   13aac:	pop	{r4, r5, r6, pc}
   13ab0:	andeq	r6, r1, r2, asr #1
   13ab4:	andeq	r6, r1, r7, lsl r4
   13ab8:	ldrdeq	r6, [r1], -sp

00013abc <flatcc_builder_append_string@@Base>:
   13abc:	push	{r4, r5, r6, lr}
   13ac0:	mov	r4, r0
   13ac4:	ldr	r0, [r0, #32]
   13ac8:	ldrh	r3, [r0, #14]
   13acc:	cmp	r3, #6
   13ad0:	beq	13ae8 <flatcc_builder_append_string@@Base+0x2c>
   13ad4:	ldr	r3, [pc, #68]	; 13b20 <flatcc_builder_append_string@@Base+0x64>
   13ad8:	movw	r2, #966	; 0x3c6
   13adc:	ldr	r1, [pc, #64]	; 13b24 <flatcc_builder_append_string@@Base+0x68>
   13ae0:	ldr	r0, [pc, #64]	; 13b28 <flatcc_builder_append_string@@Base+0x6c>
   13ae4:	bl	12058 <__assert_fail@plt>
   13ae8:	mov	r5, r2
   13aec:	mov	r6, r1
   13af0:	mvn	r2, #0
   13af4:	mov	r1, r5
   13af8:	bl	12cf8 <flatcc_builder_default_alloc@@Base+0x458>
   13afc:	cmp	r0, #0
   13b00:	bne	13b18 <flatcc_builder_append_string@@Base+0x5c>
   13b04:	mov	r2, r5
   13b08:	mov	r1, r6
   13b0c:	mov	r0, r4
   13b10:	pop	{r4, r5, r6, lr}
   13b14:	b	12824 <emit_test@@Base+0x490>
   13b18:	mov	r0, #0
   13b1c:	pop	{r4, r5, r6, pc}
   13b20:	ldrdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   13b24:	andeq	r6, r1, r7, lsl r4
   13b28:	ldrdeq	r6, [r1], -sp

00013b2c <flatcc_builder_append_string_str@@Base>:
   13b2c:	push	{r4, r5, r6, lr}
   13b30:	mov	r5, r0
   13b34:	mov	r0, r1
   13b38:	mov	r4, r1
   13b3c:	bl	11ff8 <strlen@plt>
   13b40:	mov	r2, r0
   13b44:	mov	r1, r4
   13b48:	mov	r0, r5
   13b4c:	pop	{r4, r5, r6, lr}
   13b50:	b	13abc <flatcc_builder_append_string@@Base>

00013b54 <flatcc_builder_append_string_strn@@Base>:
   13b54:	push	{r4, r5, r6, lr}
   13b58:	mov	r4, r1
   13b5c:	mov	r6, r0
   13b60:	mov	r1, #0
   13b64:	mov	r0, r4
   13b68:	mov	r5, r2
   13b6c:	bl	12028 <memchr@plt>
   13b70:	cmp	r0, #0
   13b74:	mov	r1, r4
   13b78:	subne	r5, r0, r4
   13b7c:	mov	r0, r6
   13b80:	mov	r2, r5
   13b84:	pop	{r4, r5, r6, lr}
   13b88:	b	13abc <flatcc_builder_append_string@@Base>

00013b8c <flatcc_builder_truncate_vector@@Base>:
   13b8c:	ldr	r3, [r0, #32]
   13b90:	push	{r4, lr}
   13b94:	ldrh	r2, [r3, #14]
   13b98:	cmp	r2, #4
   13b9c:	beq	13bb4 <flatcc_builder_truncate_vector@@Base+0x28>
   13ba0:	ldr	r3, [pc, #72]	; 13bf0 <flatcc_builder_truncate_vector@@Base+0x64>
   13ba4:	movw	r2, #985	; 0x3d9
   13ba8:	ldr	r1, [pc, #68]	; 13bf4 <flatcc_builder_truncate_vector@@Base+0x68>
   13bac:	ldr	r0, [pc, #68]	; 13bf8 <flatcc_builder_truncate_vector@@Base+0x6c>
   13bb0:	bl	12058 <__assert_fail@plt>
   13bb4:	ldr	r2, [r3, #20]
   13bb8:	cmp	r2, r1
   13bbc:	bcs	13bd4 <flatcc_builder_truncate_vector@@Base+0x48>
   13bc0:	ldr	r3, [pc, #40]	; 13bf0 <flatcc_builder_truncate_vector@@Base+0x64>
   13bc4:	movw	r2, #986	; 0x3da
   13bc8:	ldr	r1, [pc, #36]	; 13bf4 <flatcc_builder_truncate_vector@@Base+0x68>
   13bcc:	ldr	r0, [pc, #40]	; 13bfc <flatcc_builder_truncate_vector@@Base+0x70>
   13bd0:	b	13bb0 <flatcc_builder_truncate_vector@@Base+0x24>
   13bd4:	sub	r2, r2, r1
   13bd8:	str	r2, [r3, #20]
   13bdc:	ldr	r3, [r3, #16]
   13be0:	mul	r1, r3, r1
   13be4:	bl	12804 <emit_test@@Base+0x470>
   13be8:	mov	r0, #0
   13bec:	pop	{r4, pc}
   13bf0:	strdeq	r6, [r1], -ip
   13bf4:	andeq	r6, r1, r7, lsl r4
   13bf8:	andeq	r6, r1, r1, asr #10
   13bfc:	andeq	r6, r1, r9, lsl #12

00013c00 <flatcc_builder_truncate_offset_vector@@Base>:
   13c00:	ldr	r3, [r0, #32]
   13c04:	push	{r4, lr}
   13c08:	ldrh	r2, [r3, #14]
   13c0c:	cmp	r2, #5
   13c10:	beq	13c28 <flatcc_builder_truncate_offset_vector@@Base+0x28>
   13c14:	ldr	r3, [pc, #72]	; 13c64 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   13c18:	movw	r2, #994	; 0x3e2
   13c1c:	ldr	r1, [pc, #68]	; 13c68 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   13c20:	ldr	r0, [pc, #68]	; 13c6c <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   13c24:	bl	12058 <__assert_fail@plt>
   13c28:	ldr	r2, [r3, #20]
   13c2c:	cmp	r2, r1
   13c30:	bcs	13c48 <flatcc_builder_truncate_offset_vector@@Base+0x48>
   13c34:	ldr	r3, [pc, #40]	; 13c64 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   13c38:	movw	r2, #995	; 0x3e3
   13c3c:	ldr	r1, [pc, #36]	; 13c68 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   13c40:	ldr	r0, [pc, #40]	; 13c70 <flatcc_builder_truncate_offset_vector@@Base+0x70>
   13c44:	b	13c24 <flatcc_builder_truncate_offset_vector@@Base+0x24>
   13c48:	sub	r2, r2, r1
   13c4c:	str	r2, [r3, #20]
   13c50:	ldr	r3, [r3, #16]
   13c54:	mul	r1, r3, r1
   13c58:	bl	12804 <emit_test@@Base+0x470>
   13c5c:	mov	r0, #0
   13c60:	pop	{r4, pc}
   13c64:	andeq	r6, r1, fp, lsl r1
   13c68:	andeq	r6, r1, r7, lsl r4
   13c6c:	andeq	r6, r1, sl, lsr #11
   13c70:	andeq	r6, r1, sp, lsr #12

00013c74 <flatcc_builder_truncate_string@@Base>:
   13c74:	ldr	r2, [r0, #32]
   13c78:	push	{r4, lr}
   13c7c:	ldrh	r3, [r2, #14]
   13c80:	cmp	r3, #6
   13c84:	beq	13c9c <flatcc_builder_truncate_string@@Base+0x28>
   13c88:	ldr	r3, [pc, #64]	; 13cd0 <flatcc_builder_truncate_string@@Base+0x5c>
   13c8c:	movw	r2, #1003	; 0x3eb
   13c90:	ldr	r1, [pc, #60]	; 13cd4 <flatcc_builder_truncate_string@@Base+0x60>
   13c94:	ldr	r0, [pc, #60]	; 13cd8 <flatcc_builder_truncate_string@@Base+0x64>
   13c98:	bl	12058 <__assert_fail@plt>
   13c9c:	ldr	r3, [r2, #20]
   13ca0:	cmp	r3, r1
   13ca4:	bcs	13cbc <flatcc_builder_truncate_string@@Base+0x48>
   13ca8:	ldr	r3, [pc, #32]	; 13cd0 <flatcc_builder_truncate_string@@Base+0x5c>
   13cac:	mov	r2, #1004	; 0x3ec
   13cb0:	ldr	r1, [pc, #28]	; 13cd4 <flatcc_builder_truncate_string@@Base+0x60>
   13cb4:	ldr	r0, [pc, #32]	; 13cdc <flatcc_builder_truncate_string@@Base+0x68>
   13cb8:	b	13c98 <flatcc_builder_truncate_string@@Base+0x24>
   13cbc:	sub	r3, r3, r1
   13cc0:	str	r3, [r2, #20]
   13cc4:	bl	12804 <emit_test@@Base+0x470>
   13cc8:	mov	r0, #0
   13ccc:	pop	{r4, pc}
   13cd0:	andeq	r6, r1, r1, asr #2
   13cd4:	andeq	r6, r1, r7, lsl r4
   13cd8:	ldrdeq	r6, [r1], -sp
   13cdc:	andeq	r6, r1, r8, ror #12

00013ce0 <flatcc_builder_start_vector@@Base>:
   13ce0:	cmp	r2, #4
   13ce4:	push	{r4, r5, r6, r7, r8, lr}
   13ce8:	mov	r7, r1
   13cec:	movcs	r1, r2
   13cf0:	movcc	r1, #4
   13cf4:	mov	r5, r0
   13cf8:	mov	r6, r3
   13cfc:	bl	12a08 <flatcc_builder_default_alloc@@Base+0x168>
   13d00:	subs	r4, r0, #0
   13d04:	mvnne	r4, #0
   13d08:	bne	13d30 <flatcc_builder_start_vector@@Base+0x50>
   13d0c:	ldr	r2, [r5, #32]
   13d10:	mov	r3, #4
   13d14:	mvn	r1, #3
   13d18:	mov	r0, r5
   13d1c:	strh	r3, [r2, #14]
   13d20:	str	r7, [r2, #16]
   13d24:	str	r4, [r2, #20]
   13d28:	str	r6, [r2, #24]
   13d2c:	bl	126d8 <emit_test@@Base+0x344>
   13d30:	mov	r0, r4
   13d34:	pop	{r4, r5, r6, r7, r8, pc}

00013d38 <flatcc_builder_start_offset_vector@@Base>:
   13d38:	push	{r4, r5, r6, lr}
   13d3c:	mov	r1, #4
   13d40:	mov	r5, r0
   13d44:	bl	12a08 <flatcc_builder_default_alloc@@Base+0x168>
   13d48:	subs	r4, r0, #0
   13d4c:	mvnne	r4, #0
   13d50:	bne	13d78 <flatcc_builder_start_offset_vector@@Base+0x40>
   13d54:	ldr	r3, [r5, #32]
   13d58:	mov	r2, #4
   13d5c:	mvn	r1, #3
   13d60:	mov	r0, r5
   13d64:	str	r2, [r3, #16]
   13d68:	mov	r2, #5
   13d6c:	strh	r2, [r3, #14]
   13d70:	str	r4, [r3, #20]
   13d74:	bl	126d8 <emit_test@@Base+0x344>
   13d78:	mov	r0, r4
   13d7c:	pop	{r4, r5, r6, pc}

00013d80 <flatcc_builder_start_string@@Base>:
   13d80:	push	{r4, r5, r6, lr}
   13d84:	mov	r1, #1
   13d88:	mov	r5, r0
   13d8c:	bl	12a08 <flatcc_builder_default_alloc@@Base+0x168>
   13d90:	subs	r4, r0, #0
   13d94:	mvnne	r4, #0
   13d98:	bne	13dc0 <flatcc_builder_start_string@@Base+0x40>
   13d9c:	ldr	r3, [r5, #32]
   13da0:	mov	r2, #1
   13da4:	mvn	r1, #3
   13da8:	mov	r0, r5
   13dac:	str	r2, [r3, #16]
   13db0:	mov	r2, #6
   13db4:	strh	r2, [r3, #14]
   13db8:	str	r4, [r3, #20]
   13dbc:	bl	126d8 <emit_test@@Base+0x344>
   13dc0:	mov	r0, r4
   13dc4:	pop	{r4, r5, r6, pc}

00013dc8 <flatcc_builder_reserve_table@@Base>:
   13dc8:	cmp	r1, #0
   13dcc:	bge	13de8 <flatcc_builder_reserve_table@@Base+0x20>
   13dd0:	push	{r4, lr}
   13dd4:	movw	r2, #1065	; 0x429
   13dd8:	ldr	r3, [pc, #12]	; 13dec <flatcc_builder_reserve_table@@Base+0x24>
   13ddc:	ldr	r1, [pc, #12]	; 13df0 <flatcc_builder_reserve_table@@Base+0x28>
   13de0:	ldr	r0, [pc, #12]	; 13df4 <flatcc_builder_reserve_table@@Base+0x2c>
   13de4:	bl	12058 <__assert_fail@plt>
   13de8:	b	12ae0 <flatcc_builder_default_alloc@@Base+0x240>
   13dec:	andeq	r6, r1, r0, ror #2
   13df0:	andeq	r6, r1, r7, lsl r4
   13df4:	andeq	r6, r1, r0, lsr #13

00013df8 <flatcc_builder_start_table@@Base>:
   13df8:	push	{r4, r5, r6, lr}
   13dfc:	mov	r5, r1
   13e00:	mov	r1, #4
   13e04:	mov	r4, r0
   13e08:	bl	12a08 <flatcc_builder_default_alloc@@Base+0x168>
   13e0c:	cmp	r0, #0
   13e10:	beq	13e20 <flatcc_builder_start_table@@Base+0x28>
   13e14:	mvn	r5, #0
   13e18:	mov	r0, r5
   13e1c:	pop	{r4, r5, r6, pc}
   13e20:	ldr	r2, [r4, #4]
   13e24:	ldr	r3, [r4, #32]
   13e28:	ldr	r1, [r4, #52]	; 0x34
   13e2c:	sub	r2, r2, r1
   13e30:	ldr	r1, [r4, #76]	; 0x4c
   13e34:	str	r2, [r3, #16]
   13e38:	ldr	r2, [r4]
   13e3c:	sub	r2, r2, r1
   13e40:	mov	r1, r5
   13e44:	str	r2, [r3, #20]
   13e48:	ldr	r2, [r4, #12]
   13e4c:	str	r2, [r3, #24]
   13e50:	ldrh	r2, [r4, #8]
   13e54:	strh	r2, [r3, #28]
   13e58:	ldr	r2, [pc, #44]	; 13e8c <flatcc_builder_start_table@@Base+0x94>
   13e5c:	strh	r0, [r4, #8]
   13e60:	mov	r0, r4
   13e64:	str	r2, [r4, #12]
   13e68:	mov	r2, #3
   13e6c:	strh	r2, [r3, #14]
   13e70:	bl	12ae0 <flatcc_builder_default_alloc@@Base+0x240>
   13e74:	subs	r5, r0, #0
   13e78:	bne	13e14 <flatcc_builder_start_table@@Base+0x1c>
   13e7c:	movw	r1, #65532	; 0xfffc
   13e80:	mov	r0, r4
   13e84:	bl	126d8 <emit_test@@Base+0x344>
   13e88:	b	13e18 <flatcc_builder_start_table@@Base+0x20>
   13e8c:	svccs	0x00693b52

00013e90 <flatcc_builder_create_vtable@@Base>:
   13e90:	mov	r3, #0
   13e94:	push	{lr}		; (str lr, [sp, #-4]!)
   13e98:	sub	sp, sp, #76	; 0x4c
   13e9c:	cmp	r2, #0
   13ea0:	str	r3, [sp]
   13ea4:	str	r3, [sp, #4]
   13ea8:	movne	r3, #1
   13eac:	strne	r1, [sp, #8]
   13eb0:	mov	r1, sp
   13eb4:	strdne	r2, [sp]
   13eb8:	ldr	r3, [r0, #152]	; 0x98
   13ebc:	strne	r2, [sp, #12]
   13ec0:	cmp	r3, #0
   13ec4:	bne	13ee0 <flatcc_builder_create_vtable@@Base+0x50>
   13ec8:	ldr	r3, [r0, #180]	; 0xb4
   13ecc:	cmp	r3, #0
   13ed0:	bne	13ee0 <flatcc_builder_create_vtable@@Base+0x50>
   13ed4:	bl	12b64 <flatcc_builder_default_alloc@@Base+0x2c4>
   13ed8:	add	sp, sp, #76	; 0x4c
   13edc:	pop	{pc}		; (ldr pc, [sp], #4)
   13ee0:	bl	12c80 <flatcc_builder_default_alloc@@Base+0x3e0>
   13ee4:	cmp	r0, #0
   13ee8:	addne	r0, r0, #1
   13eec:	b	13ed8 <flatcc_builder_create_vtable@@Base+0x48>

00013ef0 <flatcc_builder_create_cached_vtable@@Base>:
   13ef0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ef4:	mov	r6, r3
   13ef8:	sub	sp, sp, #20
   13efc:	mov	r4, r0
   13f00:	mov	sl, r1
   13f04:	mov	r7, r2
   13f08:	ldr	r3, [r0, #116]	; 0x74
   13f0c:	cmp	r3, #0
   13f10:	bne	13fb8 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   13f14:	ldr	r5, [r0, #124]	; 0x7c
   13f18:	add	r9, r0, #92	; 0x5c
   13f1c:	cmp	r5, #0
   13f20:	beq	13f38 <flatcc_builder_create_cached_vtable@@Base+0x48>
   13f24:	ldr	r3, [pc, #560]	; 1415c <flatcc_builder_create_cached_vtable@@Base+0x26c>
   13f28:	movw	r2, #342	; 0x156
   13f2c:	ldr	r1, [pc, #556]	; 14160 <flatcc_builder_create_cached_vtable@@Base+0x270>
   13f30:	ldr	r0, [pc, #556]	; 14164 <flatcc_builder_create_cached_vtable@@Base+0x274>
   13f34:	bl	12058 <__assert_fail@plt>
   13f38:	mov	r3, #16
   13f3c:	mov	r2, r5
   13f40:	str	r5, [sp]
   13f44:	mov	r1, #6
   13f48:	bl	12998 <flatcc_builder_default_alloc@@Base+0xf8>
   13f4c:	cmp	r0, #0
   13f50:	bne	13f60 <flatcc_builder_create_cached_vtable@@Base+0x70>
   13f54:	mov	r0, #0
   13f58:	add	sp, sp, #20
   13f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f60:	mov	r3, #16
   13f64:	mov	r1, r9
   13f68:	ldr	r0, [r4, #40]	; 0x28
   13f6c:	mov	r2, #256	; 0x100
   13f70:	str	r3, [r4, #124]	; 0x7c
   13f74:	mov	r3, #5
   13f78:	ldr	r8, [r4, #48]	; 0x30
   13f7c:	str	r3, [sp]
   13f80:	mov	r3, #1
   13f84:	blx	r8
   13f88:	cmp	r0, #0
   13f8c:	moveq	r3, #256	; 0x100
   13f90:	ldreq	r1, [r4, #96]	; 0x60
   13f94:	bne	13f54 <flatcc_builder_create_cached_vtable@@Base+0x64>
   13f98:	lsl	r2, r3, #1
   13f9c:	cmp	r2, r1
   13fa0:	bls	14078 <flatcc_builder_create_cached_vtable@@Base+0x188>
   13fa4:	lsr	r3, r3, #2
   13fa8:	mov	r2, #1
   13fac:	cmp	r3, r2, lsl r5
   13fb0:	bhi	14080 <flatcc_builder_create_cached_vtable@@Base+0x190>
   13fb4:	str	r5, [r4, #116]	; 0x74
   13fb8:	ldr	r8, [r4, #92]	; 0x5c
   13fbc:	ldr	r3, [r4, #116]	; 0x74
   13fc0:	rsb	r3, r3, #32
   13fc4:	lsr	r6, r6, r3
   13fc8:	adds	r3, r8, r6, lsl #2
   13fcc:	ldrne	r9, [r8, r6, lsl #2]
   13fd0:	movne	fp, #0
   13fd4:	str	r3, [sp, #8]
   13fd8:	beq	13f54 <flatcc_builder_create_cached_vtable@@Base+0x64>
   13fdc:	cmp	r9, #0
   13fe0:	bne	14088 <flatcc_builder_create_cached_vtable@@Base+0x198>
   13fe4:	mov	r3, #16
   13fe8:	mov	r1, #6
   13fec:	ldr	r2, [r4, #124]	; 0x7c
   13ff0:	mov	r0, r4
   13ff4:	str	r9, [sp]
   13ff8:	bl	12998 <flatcc_builder_default_alloc@@Base+0xf8>
   13ffc:	subs	r5, r0, #0
   14000:	beq	13f54 <flatcc_builder_create_cached_vtable@@Base+0x64>
   14004:	ldr	r3, [r4, #124]	; 0x7c
   14008:	mov	r1, sl
   1400c:	mov	r0, r4
   14010:	add	r2, r3, #16
   14014:	str	r2, [r4, #124]	; 0x7c
   14018:	ldr	r2, [r4, #152]	; 0x98
   1401c:	str	r2, [r5, #4]
   14020:	ldr	r2, [r8, r6, lsl #2]
   14024:	str	r2, [r5, #12]
   14028:	mov	r2, r7
   1402c:	str	r3, [r8, r6, lsl #2]
   14030:	bl	13e90 <flatcc_builder_create_vtable@@Base>
   14034:	cmp	r0, #0
   14038:	str	r0, [r5]
   1403c:	beq	13f54 <flatcc_builder_create_cached_vtable@@Base+0x64>
   14040:	cmp	fp, #0
   14044:	ldrne	r3, [fp, #8]
   14048:	strne	r3, [r5, #8]
   1404c:	bne	14110 <flatcc_builder_create_cached_vtable@@Base+0x220>
   14050:	ldr	r2, [r4, #120]	; 0x78
   14054:	ldr	r3, [r4, #172]	; 0xac
   14058:	cmp	r3, #0
   1405c:	beq	14118 <flatcc_builder_create_cached_vtable@@Base+0x228>
   14060:	add	r1, r7, r2
   14064:	cmp	r3, r1
   14068:	bcs	14118 <flatcc_builder_create_cached_vtable@@Base+0x228>
   1406c:	mov	r0, r4
   14070:	bl	12ea4 <flatcc_builder_flush_vtable_cache@@Base>
   14074:	b	14110 <flatcc_builder_create_cached_vtable@@Base+0x220>
   14078:	mov	r3, r2
   1407c:	b	13f98 <flatcc_builder_create_cached_vtable@@Base+0xa8>
   14080:	add	r5, r5, #1
   14084:	b	13fac <flatcc_builder_create_cached_vtable@@Base+0xbc>
   14088:	ldr	r0, [r4, #68]	; 0x44
   1408c:	str	r3, [sp, #12]
   14090:	ldr	r5, [r4, #100]	; 0x64
   14094:	add	r5, r5, r9
   14098:	ldr	r2, [r5, #8]
   1409c:	add	r1, r0, r2
   140a0:	ldrh	r2, [r0, r2]
   140a4:	cmp	r2, r7
   140a8:	bne	140c4 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   140ac:	mov	r2, r7
   140b0:	mov	r0, sl
   140b4:	bl	11fb0 <memcmp@plt>
   140b8:	cmp	r0, #0
   140bc:	ldr	r3, [sp, #12]
   140c0:	beq	140d0 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   140c4:	add	r3, r5, #12
   140c8:	ldr	r9, [r5, #12]
   140cc:	b	13fdc <flatcc_builder_create_cached_vtable@@Base+0xec>
   140d0:	ldr	r1, [r5, #4]
   140d4:	ldr	r2, [r4, #152]	; 0x98
   140d8:	cmp	r1, r2
   140dc:	beq	140f0 <flatcc_builder_create_cached_vtable@@Base+0x200>
   140e0:	add	r3, r5, #12
   140e4:	mov	fp, r5
   140e8:	ldr	r9, [r5, #12]
   140ec:	b	13fdc <flatcc_builder_create_cached_vtable@@Base+0xec>
   140f0:	ldr	r2, [sp, #8]
   140f4:	cmp	r3, r2
   140f8:	beq	14110 <flatcc_builder_create_cached_vtable@@Base+0x220>
   140fc:	ldr	r2, [r5, #12]
   14100:	str	r2, [r3]
   14104:	ldr	r3, [r8, r6, lsl #2]
   14108:	str	r3, [r5, #12]
   1410c:	str	r9, [r8, r6, lsl #2]
   14110:	ldr	r0, [r5]
   14114:	b	13f58 <flatcc_builder_create_cached_vtable@@Base+0x68>
   14118:	mov	r3, #0
   1411c:	mov	r1, #2
   14120:	mov	r0, r4
   14124:	str	r3, [sp]
   14128:	mov	r3, r7
   1412c:	bl	12998 <flatcc_builder_default_alloc@@Base+0xf8>
   14130:	cmp	r0, #0
   14134:	mvneq	r0, #0
   14138:	beq	13f58 <flatcc_builder_create_cached_vtable@@Base+0x68>
   1413c:	ldr	r3, [r4, #120]	; 0x78
   14140:	mov	r2, r7
   14144:	mov	r1, sl
   14148:	str	r3, [r5, #8]
   1414c:	add	r3, r3, r7
   14150:	str	r3, [r4, #120]	; 0x78
   14154:	bl	11fa4 <memcpy@plt>
   14158:	b	14110 <flatcc_builder_create_cached_vtable@@Base+0x220>
   1415c:	andeq	r6, r1, sp, ror r1
   14160:	andeq	r6, r1, r7, lsl r4
   14164:	andeq	r6, r1, sl, lsl #13

00014168 <flatcc_builder_create_table@@Base>:
   14168:	push	{r4, r5, r6, r7, lr}
   1416c:	sub	sp, sp, #84	; 0x54
   14170:	ldr	r4, [sp, #108]	; 0x6c
   14174:	ldr	ip, [sp, #112]	; 0x70
   14178:	cmp	r4, #0
   1417c:	bge	14194 <flatcc_builder_create_table@@Base+0x2c>
   14180:	ldr	r3, [pc, #276]	; 1429c <flatcc_builder_create_table@@Base+0x134>
   14184:	movw	r2, #1237	; 0x4d5
   14188:	ldr	r1, [pc, #272]	; 142a0 <flatcc_builder_create_table@@Base+0x138>
   1418c:	ldr	r0, [pc, #272]	; 142a4 <flatcc_builder_create_table@@Base+0x13c>
   14190:	bl	12058 <__assert_fail@plt>
   14194:	tst	ip, #1
   14198:	bne	141b0 <flatcc_builder_create_table@@Base+0x48>
   1419c:	ldr	r3, [pc, #248]	; 1429c <flatcc_builder_create_table@@Base+0x134>
   141a0:	movw	r2, #1243	; 0x4db
   141a4:	ldr	r1, [pc, #244]	; 142a0 <flatcc_builder_create_table@@Base+0x138>
   141a8:	ldr	r0, [pc, #248]	; 142a8 <flatcc_builder_create_table@@Base+0x140>
   141ac:	b	14190 <flatcc_builder_create_table@@Base+0x28>
   141b0:	cmp	r3, #4
   141b4:	sub	ip, ip, #1
   141b8:	movcs	lr, r3
   141bc:	ldrh	r3, [r0, #128]	; 0x80
   141c0:	movcc	lr, #4
   141c4:	cmp	r3, lr
   141c8:	ldr	r3, [r0, #136]	; 0x88
   141cc:	strhcc	lr, [r0, #128]	; 0x80
   141d0:	sub	lr, lr, #1
   141d4:	sub	r5, r3, r2
   141d8:	sub	r3, r5, #4
   141dc:	and	lr, lr, r5
   141e0:	sub	ip, r3, ip
   141e4:	sub	r3, lr, r3
   141e8:	sub	ip, ip, lr
   141ec:	sub	r3, r3, #4
   141f0:	str	ip, [sp, #4]
   141f4:	ldr	ip, [sp, #104]	; 0x68
   141f8:	add	r4, ip, r4, lsl #1
   141fc:	cmp	r4, ip
   14200:	bne	14284 <flatcc_builder_create_table@@Base+0x11c>
   14204:	mov	r3, #4
   14208:	cmp	r2, #0
   1420c:	add	ip, sp, r3
   14210:	str	r3, [sp, #8]
   14214:	str	ip, [sp, #16]
   14218:	str	r3, [sp, #20]
   1421c:	mov	r3, #1
   14220:	str	r3, [sp, #12]
   14224:	beq	14240 <flatcc_builder_create_table@@Base+0xd8>
   14228:	add	r3, r2, #4
   1422c:	str	r3, [sp, #8]
   14230:	mov	r3, #2
   14234:	str	r1, [sp, #24]
   14238:	str	r3, [sp, #12]
   1423c:	str	r2, [sp, #28]
   14240:	cmp	lr, #0
   14244:	beq	14274 <flatcc_builder_create_table@@Base+0x10c>
   14248:	ldr	r3, [sp, #8]
   1424c:	add	r2, sp, #80	; 0x50
   14250:	ldr	r1, [pc, #84]	; 142ac <flatcc_builder_create_table@@Base+0x144>
   14254:	add	r3, r3, lr
   14258:	str	r3, [sp, #8]
   1425c:	ldr	r3, [sp, #12]
   14260:	add	r3, r3, #1
   14264:	add	r2, r2, r3, lsl #3
   14268:	str	r3, [sp, #12]
   1426c:	str	r1, [r2, #-72]	; 0xffffffb8
   14270:	str	lr, [r2, #-68]	; 0xffffffbc
   14274:	add	r1, sp, #8
   14278:	bl	12c80 <flatcc_builder_default_alloc@@Base+0x3e0>
   1427c:	add	sp, sp, #84	; 0x54
   14280:	pop	{r4, r5, r6, r7, pc}
   14284:	ldrh	r5, [ip], #2
   14288:	ldr	r6, [r1, r5]
   1428c:	sub	r7, r3, r5
   14290:	add	r6, r6, r7
   14294:	str	r6, [r1, r5]
   14298:	b	141fc <flatcc_builder_create_table@@Base+0x94>
   1429c:	andeq	r6, r1, r6, lsl #3
   142a0:	andeq	r6, r1, r7, lsl r4
   142a4:	muleq	r1, r9, r6
   142a8:	andeq	r6, r1, fp, lsr #13
   142ac:	andeq	r5, r1, r1, lsr sp

000142b0 <flatcc_builder_check_required_field@@Base>:
   142b0:	ldr	r3, [r0, #32]
   142b4:	ldrh	r3, [r3, #14]
   142b8:	cmp	r3, #3
   142bc:	beq	142d8 <flatcc_builder_check_required_field@@Base+0x28>
   142c0:	push	{r4, lr}
   142c4:	movw	r2, #1272	; 0x4f8
   142c8:	ldr	r3, [pc, #52]	; 14304 <flatcc_builder_check_required_field@@Base+0x54>
   142cc:	ldr	r1, [pc, #52]	; 14308 <flatcc_builder_check_required_field@@Base+0x58>
   142d0:	ldr	r0, [pc, #52]	; 1430c <flatcc_builder_check_required_field@@Base+0x5c>
   142d4:	bl	12058 <__assert_fail@plt>
   142d8:	ldrh	r3, [r0, #8]
   142dc:	cmp	r3, r1
   142e0:	bls	142fc <flatcc_builder_check_required_field@@Base+0x4c>
   142e4:	ldr	r3, [r0, #4]
   142e8:	lsl	r1, r1, #1
   142ec:	ldrh	r0, [r3, r1]
   142f0:	adds	r0, r0, #0
   142f4:	movne	r0, #1
   142f8:	bx	lr
   142fc:	mov	r0, #0
   14300:	bx	lr
   14304:	andeq	r6, r1, r2, lsr #3
   14308:	andeq	r6, r1, r7, lsl r4
   1430c:			; <UNDEFINED> instruction: 0x000166b6

00014310 <flatcc_builder_check_union_field@@Base>:
   14310:	ldr	r3, [r0, #32]
   14314:	ldrh	r3, [r3, #14]
   14318:	cmp	r3, #3
   1431c:	beq	14338 <flatcc_builder_check_union_field@@Base+0x28>
   14320:	push	{r4, lr}
   14324:	movw	r2, #1279	; 0x4ff
   14328:	ldr	r3, [pc, #104]	; 14398 <flatcc_builder_check_union_field@@Base+0x88>
   1432c:	ldr	r1, [pc, #104]	; 1439c <flatcc_builder_check_union_field@@Base+0x8c>
   14330:	ldr	r0, [pc, #104]	; 143a0 <flatcc_builder_check_union_field@@Base+0x90>
   14334:	bl	12058 <__assert_fail@plt>
   14338:	cmp	r1, #0
   1433c:	beq	14390 <flatcc_builder_check_union_field@@Base+0x80>
   14340:	ldrh	r3, [r0, #8]
   14344:	cmp	r3, r1
   14348:	bls	14390 <flatcc_builder_check_union_field@@Base+0x80>
   1434c:	ldr	r3, [r0, #4]
   14350:	sub	r1, r1, #-2147483647	; 0x80000001
   14354:	lsl	r1, r1, #1
   14358:	ldrh	r2, [r3, r1]!
   1435c:	cmp	r2, #0
   14360:	ldrh	r1, [r3, #2]
   14364:	bne	14374 <flatcc_builder_check_union_field@@Base+0x64>
   14368:	clz	r0, r1
   1436c:	lsr	r0, r0, #5
   14370:	bx	lr
   14374:	ldr	r3, [r0, #16]
   14378:	ldrb	r3, [r3, r2]
   1437c:	cmp	r3, #0
   14380:	beq	14368 <flatcc_builder_check_union_field@@Base+0x58>
   14384:	adds	r0, r1, #0
   14388:	movne	r0, #1
   1438c:	bx	lr
   14390:	mov	r0, #0
   14394:	bx	lr
   14398:	andeq	r6, r1, r6, asr #3
   1439c:	andeq	r6, r1, r7, lsl r4
   143a0:			; <UNDEFINED> instruction: 0x000166b6

000143a4 <flatcc_builder_check_required@@Base>:
   143a4:	ldr	r3, [r0, #32]
   143a8:	push	{r4, lr}
   143ac:	ldrh	r3, [r3, #14]
   143b0:	cmp	r3, #3
   143b4:	beq	143cc <flatcc_builder_check_required@@Base+0x28>
   143b8:	ldr	r3, [pc, #84]	; 14414 <flatcc_builder_check_required@@Base+0x70>
   143bc:	movw	r2, #1297	; 0x511
   143c0:	ldr	r1, [pc, #80]	; 14418 <flatcc_builder_check_required@@Base+0x74>
   143c4:	ldr	r0, [pc, #80]	; 1441c <flatcc_builder_check_required@@Base+0x78>
   143c8:	bl	12058 <__assert_fail@plt>
   143cc:	ldrh	r3, [r0, #8]
   143d0:	cmp	r3, r2
   143d4:	subge	r1, r1, #2
   143d8:	movge	ip, #0
   143dc:	bge	14404 <flatcc_builder_check_required@@Base+0x60>
   143e0:	mov	r0, #0
   143e4:	pop	{r4, pc}
   143e8:	ldrh	r3, [r1, #2]!
   143ec:	ldr	lr, [r0, #4]
   143f0:	lsl	r3, r3, #1
   143f4:	ldrh	r3, [lr, r3]
   143f8:	cmp	r3, #0
   143fc:	beq	143e0 <flatcc_builder_check_required@@Base+0x3c>
   14400:	add	ip, ip, #1
   14404:	cmp	ip, r2
   14408:	blt	143e8 <flatcc_builder_check_required@@Base+0x44>
   1440c:	mov	r0, #1
   14410:	pop	{r4, pc}
   14414:	andeq	r6, r1, r7, ror #3
   14418:	andeq	r6, r1, r7, lsl r4
   1441c:			; <UNDEFINED> instruction: 0x000166b6

00014420 <flatcc_builder_end_table@@Base>:
   14420:	ldr	r3, [r0, #32]
   14424:	push	{r4, r5, r6, r7, lr}
   14428:	sub	sp, sp, #20
   1442c:	ldrh	r3, [r3, #14]
   14430:	cmp	r3, #3
   14434:	beq	1444c <flatcc_builder_end_table@@Base+0x2c>
   14438:	ldr	r3, [pc, #260]	; 14544 <flatcc_builder_end_table@@Base+0x124>
   1443c:	movw	r2, #1317	; 0x525
   14440:	ldr	r1, [pc, #256]	; 14548 <flatcc_builder_end_table@@Base+0x128>
   14444:	ldr	r0, [pc, #256]	; 1454c <flatcc_builder_end_table@@Base+0x12c>
   14448:	bl	12058 <__assert_fail@plt>
   1444c:	ldrh	r5, [r0, #8]
   14450:	mov	r4, r0
   14454:	ldr	r1, [r0, #4]
   14458:	ldr	r3, [r0, #20]
   1445c:	add	r5, r5, #2
   14460:	lsl	r5, r5, #1
   14464:	sub	r6, r1, #4
   14468:	uxth	r5, r5
   1446c:	add	r3, r3, #4
   14470:	uxth	r2, r3
   14474:	ldr	r3, [r0, #12]
   14478:	strh	r5, [r1, #-4]
   1447c:	strh	r2, [r1, #-2]
   14480:	ldr	r1, [pc, #200]	; 14550 <flatcc_builder_end_table@@Base+0x130>
   14484:	eor	r3, r3, r5
   14488:	mul	r3, r1, r3
   1448c:	eor	r3, r3, r2
   14490:	mov	r2, r5
   14494:	mul	r3, r1, r3
   14498:	mov	r1, r6
   1449c:	str	r3, [r0, #12]
   144a0:	bl	13ef0 <flatcc_builder_create_cached_vtable@@Base>
   144a4:	subs	r7, r0, #0
   144a8:	beq	14538 <flatcc_builder_end_table@@Base+0x118>
   144ac:	mov	r2, r5
   144b0:	mov	r1, #0
   144b4:	mov	r0, r6
   144b8:	bl	1201c <memset@plt>
   144bc:	ldr	r3, [r4, #32]
   144c0:	mov	r0, r4
   144c4:	ldr	r2, [r4, #76]	; 0x4c
   144c8:	ldr	r3, [r3, #20]
   144cc:	str	r7, [sp, #8]
   144d0:	add	r2, r2, r3
   144d4:	ldr	r3, [r4]
   144d8:	sub	r3, r3, r2
   144dc:	asr	r3, r3, #1
   144e0:	strd	r2, [sp]
   144e4:	ldrh	r3, [r4, #130]	; 0x82
   144e8:	ldr	r1, [r4, #16]
   144ec:	ldr	r2, [r4, #20]
   144f0:	bl	14168 <flatcc_builder_create_table@@Base>
   144f4:	subs	r7, r0, #0
   144f8:	beq	14538 <flatcc_builder_end_table@@Base+0x118>
   144fc:	ldr	r3, [r4, #32]
   14500:	mov	r0, r4
   14504:	ldr	r1, [r3, #16]
   14508:	ldr	r2, [r3, #24]
   1450c:	str	r2, [r4, #12]
   14510:	ldrh	r2, [r3, #28]
   14514:	ldr	r3, [r3, #20]
   14518:	strh	r2, [r4, #8]
   1451c:	ldr	r2, [r4, #52]	; 0x34
   14520:	add	r2, r2, r1
   14524:	str	r2, [r4, #4]
   14528:	ldr	r2, [r4, #76]	; 0x4c
   1452c:	add	r3, r2, r3
   14530:	str	r3, [r4]
   14534:	bl	1279c <emit_test@@Base+0x408>
   14538:	mov	r0, r7
   1453c:	add	sp, sp, #20
   14540:	pop	{r4, r5, r6, r7, pc}
   14544:	andeq	r6, r1, r5, lsl #4
   14548:	andeq	r6, r1, r7, lsl r4
   1454c:			; <UNDEFINED> instruction: 0x000166b6
   14550:			; <UNDEFINED> instruction: 0x9e3779b1

00014554 <flatcc_builder_create_vector@@Base>:
   14554:	push	{lr}		; (str lr, [sp, #-4]!)
   14558:	sub	sp, sp, #84	; 0x54
   1455c:	ldr	lr, [sp, #92]	; 0x5c
   14560:	ldrh	ip, [sp, #88]	; 0x58
   14564:	cmp	r2, lr
   14568:	bls	14580 <flatcc_builder_create_vector@@Base+0x2c>
   1456c:	ldr	r3, [pc, #184]	; 1462c <flatcc_builder_create_vector@@Base+0xd8>
   14570:	movw	r2, #1365	; 0x555
   14574:	ldr	r1, [pc, #180]	; 14630 <flatcc_builder_create_vector@@Base+0xdc>
   14578:	ldr	r0, [pc, #180]	; 14634 <flatcc_builder_create_vector@@Base+0xe0>
   1457c:	bl	12058 <__assert_fail@plt>
   14580:	ldrh	lr, [r0, #128]	; 0x80
   14584:	mul	r3, r3, r2
   14588:	cmp	ip, #4
   1458c:	str	r2, [sp, #4]
   14590:	movcc	ip, #4
   14594:	ldr	r2, [r0, #136]	; 0x88
   14598:	cmp	lr, ip
   1459c:	sub	r2, r2, r3
   145a0:	strhcc	ip, [r0, #128]	; 0x80
   145a4:	sub	ip, ip, #1
   145a8:	and	ip, ip, r2
   145ac:	mov	r2, #4
   145b0:	add	lr, sp, r2
   145b4:	cmp	r3, #0
   145b8:	str	r2, [sp, #8]
   145bc:	str	lr, [sp, #16]
   145c0:	str	r2, [sp, #20]
   145c4:	mov	r2, #1
   145c8:	str	r2, [sp, #12]
   145cc:	beq	145e8 <flatcc_builder_create_vector@@Base+0x94>
   145d0:	add	r2, r3, #4
   145d4:	str	r3, [sp, #28]
   145d8:	mov	r3, #2
   145dc:	str	r2, [sp, #8]
   145e0:	str	r3, [sp, #12]
   145e4:	str	r1, [sp, #24]
   145e8:	cmp	ip, #0
   145ec:	beq	1461c <flatcc_builder_create_vector@@Base+0xc8>
   145f0:	ldr	r3, [sp, #8]
   145f4:	add	r2, sp, #80	; 0x50
   145f8:	ldr	r1, [pc, #56]	; 14638 <flatcc_builder_create_vector@@Base+0xe4>
   145fc:	add	r3, r3, ip
   14600:	str	r3, [sp, #8]
   14604:	ldr	r3, [sp, #12]
   14608:	add	r3, r3, #1
   1460c:	add	r2, r2, r3, lsl #3
   14610:	str	r3, [sp, #12]
   14614:	str	r1, [r2, #-72]	; 0xffffffb8
   14618:	str	ip, [r2, #-68]	; 0xffffffbc
   1461c:	add	r1, sp, #8
   14620:	bl	12c80 <flatcc_builder_default_alloc@@Base+0x3e0>
   14624:	add	sp, sp, #84	; 0x54
   14628:	pop	{pc}		; (ldr pc, [sp], #4)
   1462c:	andeq	r6, r1, lr, lsl r2
   14630:	andeq	r6, r1, r7, lsl r4
   14634:	andeq	r6, r1, r1, ror #13
   14638:	andeq	r5, r1, r1, lsr sp

0001463c <flatcc_builder_end_vector@@Base>:
   1463c:	push	{r0, r1, r2, r4, r5, lr}
   14640:	ldr	r2, [r0, #32]
   14644:	ldrh	r3, [r2, #14]
   14648:	cmp	r3, #4
   1464c:	beq	14664 <flatcc_builder_end_vector@@Base+0x28>
   14650:	ldr	r3, [pc, #76]	; 146a4 <flatcc_builder_end_vector@@Base+0x68>
   14654:	movw	r2, #1400	; 0x578
   14658:	ldr	r1, [pc, #72]	; 146a8 <flatcc_builder_end_vector@@Base+0x6c>
   1465c:	ldr	r0, [pc, #72]	; 146ac <flatcc_builder_end_vector@@Base+0x70>
   14660:	bl	12058 <__assert_fail@plt>
   14664:	ldr	r3, [r2, #24]
   14668:	mov	r4, r0
   1466c:	str	r3, [sp, #4]
   14670:	ldrh	r3, [r0, #130]	; 0x82
   14674:	str	r3, [sp]
   14678:	ldr	r3, [r2, #16]
   1467c:	ldr	r1, [r0, #16]
   14680:	ldr	r2, [r2, #20]
   14684:	bl	14554 <flatcc_builder_create_vector@@Base>
   14688:	subs	r5, r0, #0
   1468c:	beq	14698 <flatcc_builder_end_vector@@Base+0x5c>
   14690:	mov	r0, r4
   14694:	bl	1279c <emit_test@@Base+0x408>
   14698:	mov	r0, r5
   1469c:	add	sp, sp, #12
   146a0:	pop	{r4, r5, pc}
   146a4:	andeq	r6, r1, fp, lsr r2
   146a8:	andeq	r6, r1, r7, lsl r4
   146ac:	andeq	r6, r1, r1, asr #10

000146b0 <flatcc_builder_vector_count@@Base>:
   146b0:	ldr	r3, [r0, #32]
   146b4:	ldr	r0, [r3, #20]
   146b8:	bx	lr

000146bc <flatcc_builder_vector_edit@@Base>:
   146bc:	ldr	r0, [r0, #16]
   146c0:	bx	lr

000146c4 <flatcc_builder_create_offset_vector_direct@@Base>:
   146c4:	cmn	r2, #-1073741823	; 0xc0000001
   146c8:	bhi	146d4 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   146cc:	mov	r3, #0
   146d0:	b	12d4c <flatcc_builder_default_alloc@@Base+0x4ac>
   146d4:	mov	r0, #0
   146d8:	bx	lr

000146dc <flatcc_builder_end_offset_vector@@Base>:
   146dc:	ldr	r3, [r0, #32]
   146e0:	push	{r4, r5, r6, lr}
   146e4:	ldrh	r2, [r3, #14]
   146e8:	cmp	r2, #5
   146ec:	beq	14704 <flatcc_builder_end_offset_vector@@Base+0x28>
   146f0:	ldr	r3, [pc, #52]	; 1472c <flatcc_builder_end_offset_vector@@Base+0x50>
   146f4:	movw	r2, #1480	; 0x5c8
   146f8:	ldr	r1, [pc, #48]	; 14730 <flatcc_builder_end_offset_vector@@Base+0x54>
   146fc:	ldr	r0, [pc, #48]	; 14734 <flatcc_builder_end_offset_vector@@Base+0x58>
   14700:	bl	12058 <__assert_fail@plt>
   14704:	ldr	r1, [r0, #16]
   14708:	mov	r4, r0
   1470c:	ldr	r2, [r3, #20]
   14710:	bl	146c4 <flatcc_builder_create_offset_vector_direct@@Base>
   14714:	subs	r5, r0, #0
   14718:	beq	14724 <flatcc_builder_end_offset_vector@@Base+0x48>
   1471c:	mov	r0, r4
   14720:	bl	1279c <emit_test@@Base+0x408>
   14724:	mov	r0, r5
   14728:	pop	{r4, r5, r6, pc}
   1472c:	andeq	r6, r1, r5, asr r2
   14730:	andeq	r6, r1, r7, lsl r4
   14734:	andeq	r6, r1, sl, lsr #11

00014738 <flatcc_builder_create_offset_vector@@Base>:
   14738:	push	{r4, r5, r6, lr}
   1473c:	mov	r4, r0
   14740:	mov	r6, r1
   14744:	mov	r5, r2
   14748:	bl	13d38 <flatcc_builder_start_offset_vector@@Base>
   1474c:	cmp	r0, #0
   14750:	bne	14780 <flatcc_builder_create_offset_vector@@Base+0x48>
   14754:	mov	r1, r5
   14758:	mov	r0, r4
   1475c:	bl	13948 <flatcc_builder_extend_offset_vector@@Base>
   14760:	cmp	r0, #0
   14764:	beq	14780 <flatcc_builder_create_offset_vector@@Base+0x48>
   14768:	lsl	r2, r5, #2
   1476c:	mov	r1, r6
   14770:	bl	11fa4 <memcpy@plt>
   14774:	mov	r0, r4
   14778:	pop	{r4, r5, r6, lr}
   1477c:	b	146dc <flatcc_builder_end_offset_vector@@Base>
   14780:	mov	r0, #0
   14784:	pop	{r4, r5, r6, pc}

00014788 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   14788:	ldr	r2, [r0, #32]
   1478c:	mov	r3, r1
   14790:	push	{r4, r5, r6, lr}
   14794:	ldrh	r1, [r2, #14]
   14798:	cmp	r1, #5
   1479c:	beq	147b4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   147a0:	ldr	r3, [pc, #64]	; 147e8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x60>
   147a4:	movw	r2, #1493	; 0x5d5
   147a8:	ldr	r1, [pc, #60]	; 147ec <flatcc_builder_end_offset_vector_for_unions@@Base+0x64>
   147ac:	ldr	r0, [pc, #60]	; 147f0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x68>
   147b0:	bl	12058 <__assert_fail@plt>
   147b4:	ldr	r2, [r2, #20]
   147b8:	cmn	r2, #-1073741823	; 0xc0000001
   147bc:	movhi	r5, #0
   147c0:	bhi	147e0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   147c4:	ldr	r1, [r0, #16]
   147c8:	mov	r4, r0
   147cc:	bl	12d4c <flatcc_builder_default_alloc@@Base+0x4ac>
   147d0:	subs	r5, r0, #0
   147d4:	beq	147e0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   147d8:	mov	r0, r4
   147dc:	bl	1279c <emit_test@@Base+0x408>
   147e0:	mov	r0, r5
   147e4:	pop	{r4, r5, r6, pc}
   147e8:	andeq	r6, r1, r6, ror r2
   147ec:	andeq	r6, r1, r7, lsl r4
   147f0:	andeq	r6, r1, sl, lsr #11

000147f4 <flatcc_builder_offset_vector_edit@@Base>:
   147f4:	ldr	r0, [r0, #16]
   147f8:	bx	lr

000147fc <flatcc_builder_offset_vector_count@@Base>:
   147fc:	ldr	r3, [r0, #32]
   14800:	ldr	r0, [r3, #20]
   14804:	bx	lr

00014808 <flatcc_builder_create_union_vector_direct@@Base>:
   14808:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1480c:	mov	r4, r0
   14810:	ldr	r5, [sp, #32]
   14814:	cmn	r5, #-1073741823	; 0xc0000001
   14818:	bls	14834 <flatcc_builder_create_union_vector_direct@@Base+0x2c>
   1481c:	mov	r3, #0
   14820:	str	r3, [r4]
   14824:	str	r3, [r4, #4]
   14828:	mov	r0, r4
   1482c:	add	sp, sp, #8
   14830:	pop	{r4, r5, r6, r7, r8, pc}
   14834:	mov	r7, r1
   14838:	mov	r8, r2
   1483c:	mov	r1, r3
   14840:	mov	r0, r7
   14844:	mov	r3, r2
   14848:	mov	r2, r5
   1484c:	bl	12d4c <flatcc_builder_default_alloc@@Base+0x4ac>
   14850:	subs	r6, r0, #0
   14854:	beq	1481c <flatcc_builder_create_union_vector_direct@@Base+0x14>
   14858:	mvn	r3, #0
   1485c:	mov	r2, r5
   14860:	mov	r1, r8
   14864:	mov	r0, r7
   14868:	str	r3, [sp, #4]
   1486c:	mov	r3, #1
   14870:	str	r3, [sp]
   14874:	bl	14554 <flatcc_builder_create_vector@@Base>
   14878:	stm	r4, {r0, r6}
   1487c:	b	14828 <flatcc_builder_create_union_vector_direct@@Base+0x20>

00014880 <flatcc_builder_create_union_vector@@Base>:
   14880:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   14884:	mov	r6, r0
   14888:	mov	r0, r1
   1488c:	mov	r5, r1
   14890:	mov	r8, r2
   14894:	mov	r7, r3
   14898:	bl	13d38 <flatcc_builder_start_offset_vector@@Base>
   1489c:	subs	r4, r0, #0
   148a0:	beq	148bc <flatcc_builder_create_union_vector@@Base+0x3c>
   148a4:	mov	r3, #0
   148a8:	str	r3, [r6]
   148ac:	str	r3, [r6, #4]
   148b0:	mov	r0, r6
   148b4:	add	sp, sp, #16
   148b8:	pop	{r4, r5, r6, r7, r8, pc}
   148bc:	mov	r1, r7
   148c0:	mov	r0, r5
   148c4:	bl	13948 <flatcc_builder_extend_offset_vector@@Base>
   148c8:	cmp	r0, #0
   148cc:	beq	148a4 <flatcc_builder_create_union_vector@@Base+0x24>
   148d0:	mov	r1, r7
   148d4:	mov	r0, r5
   148d8:	bl	12754 <emit_test@@Base+0x3c0>
   148dc:	subs	r2, r0, #0
   148e0:	movne	r1, r4
   148e4:	addne	r0, r8, #4
   148e8:	ldrne	r3, [r5, #16]
   148ec:	beq	148a4 <flatcc_builder_create_union_vector@@Base+0x24>
   148f0:	cmp	r1, r7
   148f4:	bne	14924 <flatcc_builder_create_union_vector@@Base+0xa4>
   148f8:	add	r0, sp, #8
   148fc:	str	r1, [sp]
   14900:	mov	r1, r5
   14904:	bl	14808 <flatcc_builder_create_union_vector_direct@@Base>
   14908:	ldr	r7, [sp, #8]
   1490c:	mov	r0, r5
   14910:	ldr	r4, [sp, #12]
   14914:	bl	1279c <emit_test@@Base+0x408>
   14918:	str	r7, [r6]
   1491c:	str	r4, [r6, #4]
   14920:	b	148b0 <flatcc_builder_create_union_vector@@Base+0x30>
   14924:	ldrb	ip, [r8, r1, lsl #3]
   14928:	strb	ip, [r2, r1]
   1492c:	ldr	ip, [r0, r1, lsl #3]
   14930:	str	ip, [r3, r1, lsl #2]
   14934:	add	r1, r1, #1
   14938:	b	148f0 <flatcc_builder_create_union_vector@@Base+0x70>

0001493c <flatcc_builder_start_union_vector@@Base>:
   1493c:	push	{r4, r5, r6, lr}
   14940:	mov	r1, #4
   14944:	mov	r5, r0
   14948:	bl	12a08 <flatcc_builder_default_alloc@@Base+0x168>
   1494c:	subs	r4, r0, #0
   14950:	mvnne	r4, #0
   14954:	bne	1497c <flatcc_builder_start_union_vector@@Base+0x40>
   14958:	ldr	r3, [r5, #32]
   1495c:	mov	r2, #8
   14960:	mvn	r1, #3
   14964:	mov	r0, r5
   14968:	str	r2, [r3, #16]
   1496c:	mov	r2, #7
   14970:	strh	r2, [r3, #14]
   14974:	str	r4, [r3, #20]
   14978:	bl	126d8 <emit_test@@Base+0x344>
   1497c:	mov	r0, r4
   14980:	pop	{r4, r5, r6, pc}

00014984 <flatcc_builder_end_union_vector@@Base>:
   14984:	ldr	r3, [r1, #32]
   14988:	push	{r4, r5, r6, r7, lr}
   1498c:	sub	sp, sp, #20
   14990:	ldrh	r2, [r3, #14]
   14994:	cmp	r2, #7
   14998:	beq	149b0 <flatcc_builder_end_union_vector@@Base+0x2c>
   1499c:	ldr	r3, [pc, #156]	; 14a40 <flatcc_builder_end_union_vector@@Base+0xbc>
   149a0:	movw	r2, #1617	; 0x651
   149a4:	ldr	r1, [pc, #152]	; 14a44 <flatcc_builder_end_union_vector@@Base+0xc0>
   149a8:	ldr	r0, [pc, #152]	; 14a48 <flatcc_builder_end_union_vector@@Base+0xc4>
   149ac:	bl	12058 <__assert_fail@plt>
   149b0:	ldr	r7, [r3, #20]
   149b4:	mov	r4, r0
   149b8:	mov	r5, r1
   149bc:	mov	r0, r1
   149c0:	lsl	r6, r7, #2
   149c4:	add	r1, r6, r7
   149c8:	bl	12754 <emit_test@@Base+0x3c0>
   149cc:	subs	r3, r0, #0
   149d0:	streq	r3, [r4]
   149d4:	streq	r3, [r4, #4]
   149d8:	beq	14a1c <flatcc_builder_end_union_vector@@Base+0x98>
   149dc:	ldr	r0, [r5, #16]
   149e0:	add	r2, r3, r6
   149e4:	mov	r1, #0
   149e8:	add	ip, r0, #4
   149ec:	cmp	r1, r7
   149f0:	bne	14a28 <flatcc_builder_end_union_vector@@Base+0xa4>
   149f4:	add	r0, sp, #8
   149f8:	str	r1, [sp]
   149fc:	mov	r1, r5
   14a00:	bl	14808 <flatcc_builder_create_union_vector_direct@@Base>
   14a04:	ldr	r7, [sp, #8]
   14a08:	mov	r0, r5
   14a0c:	ldr	r6, [sp, #12]
   14a10:	bl	1279c <emit_test@@Base+0x408>
   14a14:	str	r7, [r4]
   14a18:	str	r6, [r4, #4]
   14a1c:	mov	r0, r4
   14a20:	add	sp, sp, #20
   14a24:	pop	{r4, r5, r6, r7, pc}
   14a28:	ldrb	lr, [r0, r1, lsl #3]
   14a2c:	strb	lr, [r2, r1]
   14a30:	ldr	lr, [ip, r1, lsl #3]
   14a34:	str	lr, [r3, r1, lsl #2]
   14a38:	add	r1, r1, #1
   14a3c:	b	149ec <flatcc_builder_end_union_vector@@Base+0x68>
   14a40:	andeq	r6, r1, r2, lsr #5
   14a44:	andeq	r6, r1, r7, lsl r4
   14a48:	strdeq	r6, [r1], -r4

00014a4c <flatcc_builder_union_vector_edit@@Base>:
   14a4c:	ldr	r0, [r0, #16]
   14a50:	bx	lr

00014a54 <flatcc_builder_union_vector_count@@Base>:
   14a54:	ldr	r3, [r0, #32]
   14a58:	ldr	r0, [r3, #20]
   14a5c:	bx	lr

00014a60 <flatcc_builder_extend_union_vector@@Base>:
   14a60:	push	{r4, r5, r6, lr}
   14a64:	mvn	r2, #-536870912	; 0xe0000000
   14a68:	mov	r4, r0
   14a6c:	mov	r5, r1
   14a70:	ldr	r0, [r0, #32]
   14a74:	bl	12cf8 <flatcc_builder_default_alloc@@Base+0x458>
   14a78:	cmp	r0, #0
   14a7c:	bne	14a90 <flatcc_builder_extend_union_vector@@Base+0x30>
   14a80:	lsl	r1, r5, #3
   14a84:	mov	r0, r4
   14a88:	pop	{r4, r5, r6, lr}
   14a8c:	b	12754 <emit_test@@Base+0x3c0>
   14a90:	mov	r0, #0
   14a94:	pop	{r4, r5, r6, pc}

00014a98 <flatcc_builder_truncate_union_vector@@Base>:
   14a98:	ldr	r3, [r0, #32]
   14a9c:	push	{r4, lr}
   14aa0:	ldrh	r2, [r3, #14]
   14aa4:	cmp	r2, #7
   14aa8:	beq	14ac0 <flatcc_builder_truncate_union_vector@@Base+0x28>
   14aac:	ldr	r3, [pc, #72]	; 14afc <flatcc_builder_truncate_union_vector@@Base+0x64>
   14ab0:	movw	r2, #1665	; 0x681
   14ab4:	ldr	r1, [pc, #68]	; 14b00 <flatcc_builder_truncate_union_vector@@Base+0x68>
   14ab8:	ldr	r0, [pc, #68]	; 14b04 <flatcc_builder_truncate_union_vector@@Base+0x6c>
   14abc:	bl	12058 <__assert_fail@plt>
   14ac0:	ldr	r2, [r3, #20]
   14ac4:	cmp	r2, r1
   14ac8:	bcs	14ae0 <flatcc_builder_truncate_union_vector@@Base+0x48>
   14acc:	ldr	r3, [pc, #40]	; 14afc <flatcc_builder_truncate_union_vector@@Base+0x64>
   14ad0:	movw	r2, #1666	; 0x682
   14ad4:	ldr	r1, [pc, #36]	; 14b00 <flatcc_builder_truncate_union_vector@@Base+0x68>
   14ad8:	ldr	r0, [pc, #40]	; 14b08 <flatcc_builder_truncate_union_vector@@Base+0x70>
   14adc:	b	14abc <flatcc_builder_truncate_union_vector@@Base+0x24>
   14ae0:	sub	r2, r2, r1
   14ae4:	str	r2, [r3, #20]
   14ae8:	ldr	r3, [r3, #16]
   14aec:	mul	r1, r3, r1
   14af0:	bl	12804 <emit_test@@Base+0x470>
   14af4:	mov	r0, #0
   14af8:	pop	{r4, pc}
   14afc:	andeq	r6, r1, r2, asr #5
   14b00:	andeq	r6, r1, r7, lsl r4
   14b04:	strdeq	r6, [r1], -r4
   14b08:	andeq	r6, r1, sp, lsr #12

00014b0c <flatcc_builder_union_vector_push@@Base>:
   14b0c:	push	{r0, r1, r4, lr}
   14b10:	mov	r4, sp
   14b14:	stm	r4, {r1, r2}
   14b18:	ldr	r2, [r0, #32]
   14b1c:	ldrh	r3, [r2, #14]
   14b20:	cmp	r3, #7
   14b24:	beq	14b3c <flatcc_builder_union_vector_push@@Base+0x30>
   14b28:	ldr	r3, [pc, #68]	; 14b74 <flatcc_builder_union_vector_push@@Base+0x68>
   14b2c:	movw	r2, #1677	; 0x68d
   14b30:	ldr	r1, [pc, #64]	; 14b78 <flatcc_builder_union_vector_push@@Base+0x6c>
   14b34:	ldr	r0, [pc, #64]	; 14b7c <flatcc_builder_union_vector_push@@Base+0x70>
   14b38:	bl	12058 <__assert_fail@plt>
   14b3c:	ldr	r3, [r2, #20]
   14b40:	cmn	r3, #-536870911	; 0xe0000001
   14b44:	moveq	r3, #0
   14b48:	beq	14b68 <flatcc_builder_union_vector_push@@Base+0x5c>
   14b4c:	add	r3, r3, #1
   14b50:	mov	r1, #8
   14b54:	str	r3, [r2, #20]
   14b58:	bl	12754 <emit_test@@Base+0x3c0>
   14b5c:	subs	r3, r0, #0
   14b60:	ldmne	r4, {r0, r1}
   14b64:	stmne	r3, {r0, r1}
   14b68:	mov	r0, r3
   14b6c:	add	sp, sp, #8
   14b70:	pop	{r4, pc}
   14b74:	andeq	r6, r1, r7, ror #5
   14b78:	andeq	r6, r1, r7, lsl r4
   14b7c:	strdeq	r6, [r1], -r4

00014b80 <flatcc_builder_append_union_vector@@Base>:
   14b80:	push	{r4, r5, r6, lr}
   14b84:	mov	r4, r0
   14b88:	ldr	r0, [r0, #32]
   14b8c:	ldrh	r3, [r0, #14]
   14b90:	cmp	r3, #7
   14b94:	beq	14bac <flatcc_builder_append_union_vector@@Base+0x2c>
   14b98:	ldr	r3, [pc, #68]	; 14be4 <flatcc_builder_append_union_vector@@Base+0x64>
   14b9c:	movw	r2, #1692	; 0x69c
   14ba0:	ldr	r1, [pc, #64]	; 14be8 <flatcc_builder_append_union_vector@@Base+0x68>
   14ba4:	ldr	r0, [pc, #64]	; 14bec <flatcc_builder_append_union_vector@@Base+0x6c>
   14ba8:	bl	12058 <__assert_fail@plt>
   14bac:	mov	r5, r2
   14bb0:	mov	r6, r1
   14bb4:	mvn	r2, #-536870912	; 0xe0000000
   14bb8:	mov	r1, r5
   14bbc:	bl	12cf8 <flatcc_builder_default_alloc@@Base+0x458>
   14bc0:	cmp	r0, #0
   14bc4:	bne	14bdc <flatcc_builder_append_union_vector@@Base+0x5c>
   14bc8:	lsl	r2, r5, #3
   14bcc:	mov	r1, r6
   14bd0:	mov	r0, r4
   14bd4:	pop	{r4, r5, r6, lr}
   14bd8:	b	12824 <emit_test@@Base+0x490>
   14bdc:	mov	r0, #0
   14be0:	pop	{r4, r5, r6, pc}
   14be4:	andeq	r6, r1, r8, lsl #6
   14be8:	andeq	r6, r1, r7, lsl r4
   14bec:	strdeq	r6, [r1], -r4

00014bf0 <flatcc_builder_create_string@@Base>:
   14bf0:	ldr	r3, [r0, #136]	; 0x88
   14bf4:	mov	ip, #4
   14bf8:	cmp	r2, #0
   14bfc:	push	{lr}		; (str lr, [sp, #-4]!)
   14c00:	sub	sp, sp, #84	; 0x54
   14c04:	add	lr, sp, ip
   14c08:	stmib	sp, {r2, ip}
   14c0c:	sub	r3, r3, r2
   14c10:	str	lr, [sp, #16]
   14c14:	sub	r3, r3, #1
   14c18:	str	ip, [sp, #20]
   14c1c:	mov	ip, #1
   14c20:	and	r3, r3, #3
   14c24:	add	r3, r3, #1
   14c28:	str	ip, [sp, #12]
   14c2c:	beq	14c48 <flatcc_builder_create_string@@Base+0x58>
   14c30:	add	ip, r2, #4
   14c34:	str	r2, [sp, #28]
   14c38:	mov	r2, #2
   14c3c:	str	ip, [sp, #8]
   14c40:	str	r2, [sp, #12]
   14c44:	str	r1, [sp, #24]
   14c48:	ldr	r2, [sp, #8]
   14c4c:	add	r1, sp, #80	; 0x50
   14c50:	ldr	ip, [pc, #44]	; 14c84 <flatcc_builder_create_string@@Base+0x94>
   14c54:	add	r2, r2, r3
   14c58:	str	r2, [sp, #8]
   14c5c:	ldr	r2, [sp, #12]
   14c60:	add	r2, r2, #1
   14c64:	add	r1, r1, r2, lsl #3
   14c68:	str	r2, [sp, #12]
   14c6c:	str	ip, [r1, #-72]	; 0xffffffb8
   14c70:	str	r3, [r1, #-68]	; 0xffffffbc
   14c74:	add	r1, sp, #8
   14c78:	bl	12c80 <flatcc_builder_default_alloc@@Base+0x3e0>
   14c7c:	add	sp, sp, #84	; 0x54
   14c80:	pop	{pc}		; (ldr pc, [sp], #4)
   14c84:	andeq	r5, r1, r1, lsr sp

00014c88 <flatcc_builder_create_string_str@@Base>:
   14c88:	push	{r4, r5, r6, lr}
   14c8c:	mov	r5, r0
   14c90:	mov	r0, r1
   14c94:	mov	r4, r1
   14c98:	bl	11ff8 <strlen@plt>
   14c9c:	mov	r2, r0
   14ca0:	mov	r1, r4
   14ca4:	mov	r0, r5
   14ca8:	pop	{r4, r5, r6, lr}
   14cac:	b	14bf0 <flatcc_builder_create_string@@Base>

00014cb0 <flatcc_builder_create_string_strn@@Base>:
   14cb0:	push	{r4, r5, r6, lr}
   14cb4:	mov	r4, r1
   14cb8:	mov	r6, r0
   14cbc:	mov	r1, #0
   14cc0:	mov	r0, r4
   14cc4:	mov	r5, r2
   14cc8:	bl	12028 <memchr@plt>
   14ccc:	cmp	r0, #0
   14cd0:	mov	r1, r4
   14cd4:	subne	r5, r0, r4
   14cd8:	mov	r0, r6
   14cdc:	mov	r2, r5
   14ce0:	pop	{r4, r5, r6, lr}
   14ce4:	b	14bf0 <flatcc_builder_create_string@@Base>

00014ce8 <flatcc_builder_end_string@@Base>:
   14ce8:	ldr	r3, [r0, #32]
   14cec:	push	{r4, r5, r6, lr}
   14cf0:	ldrh	r2, [r3, #14]
   14cf4:	cmp	r2, #6
   14cf8:	beq	14d10 <flatcc_builder_end_string@@Base+0x28>
   14cfc:	ldr	r3, [pc, #84]	; 14d58 <flatcc_builder_end_string@@Base+0x70>
   14d00:	movw	r2, #1732	; 0x6c4
   14d04:	ldr	r1, [pc, #80]	; 14d5c <flatcc_builder_end_string@@Base+0x74>
   14d08:	ldr	r0, [pc, #80]	; 14d60 <flatcc_builder_end_string@@Base+0x78>
   14d0c:	bl	12058 <__assert_fail@plt>
   14d10:	ldr	r2, [r3, #20]
   14d14:	mov	r4, r0
   14d18:	ldr	r1, [r0, #20]
   14d1c:	cmp	r2, r1
   14d20:	beq	14d38 <flatcc_builder_end_string@@Base+0x50>
   14d24:	ldr	r3, [pc, #44]	; 14d58 <flatcc_builder_end_string@@Base+0x70>
   14d28:	movw	r2, #1733	; 0x6c5
   14d2c:	ldr	r1, [pc, #40]	; 14d5c <flatcc_builder_end_string@@Base+0x74>
   14d30:	ldr	r0, [pc, #44]	; 14d64 <flatcc_builder_end_string@@Base+0x7c>
   14d34:	b	14d0c <flatcc_builder_end_string@@Base+0x24>
   14d38:	ldr	r1, [r0, #16]
   14d3c:	bl	14bf0 <flatcc_builder_create_string@@Base>
   14d40:	subs	r5, r0, #0
   14d44:	beq	14d50 <flatcc_builder_end_string@@Base+0x68>
   14d48:	mov	r0, r4
   14d4c:	bl	1279c <emit_test@@Base+0x408>
   14d50:	mov	r0, r5
   14d54:	pop	{r4, r5, r6, pc}
   14d58:	andeq	r6, r1, fp, lsr #6
   14d5c:	andeq	r6, r1, r7, lsl r4
   14d60:	ldrdeq	r6, [r1], -sp
   14d64:	andeq	r6, r1, r6, lsr #14

00014d68 <flatcc_builder_string_edit@@Base>:
   14d68:	ldr	r0, [r0, #16]
   14d6c:	bx	lr

00014d70 <flatcc_builder_string_len@@Base>:
   14d70:	ldr	r3, [r0, #32]
   14d74:	ldr	r0, [r3, #20]
   14d78:	bx	lr

00014d7c <flatcc_builder_table_add@@Base>:
   14d7c:	push	{r4, r5, r6, r7, r8, lr}
   14d80:	mov	r4, r0
   14d84:	ldr	r0, [r0, #32]
   14d88:	ldrh	r0, [r0, #14]
   14d8c:	cmp	r0, #3
   14d90:	beq	14da8 <flatcc_builder_table_add@@Base+0x2c>
   14d94:	ldr	r3, [pc, #240]	; 14e8c <flatcc_builder_table_add@@Base+0x110>
   14d98:	movw	r2, #1773	; 0x6ed
   14d9c:	ldr	r1, [pc, #236]	; 14e90 <flatcc_builder_table_add@@Base+0x114>
   14da0:	ldr	r0, [pc, #236]	; 14e94 <flatcc_builder_table_add@@Base+0x118>
   14da4:	bl	12058 <__assert_fail@plt>
   14da8:	movw	r0, #32764	; 0x7ffc
   14dac:	cmp	r1, r0
   14db0:	bls	14dc8 <flatcc_builder_table_add@@Base+0x4c>
   14db4:	ldr	r3, [pc, #208]	; 14e8c <flatcc_builder_table_add@@Base+0x110>
   14db8:	movw	r2, #1774	; 0x6ee
   14dbc:	ldr	r1, [pc, #204]	; 14e90 <flatcc_builder_table_add@@Base+0x114>
   14dc0:	ldr	r0, [pc, #208]	; 14e98 <flatcc_builder_table_add@@Base+0x11c>
   14dc4:	b	14da4 <flatcc_builder_table_add@@Base+0x28>
   14dc8:	ldrh	r0, [r4, #130]	; 0x82
   14dcc:	lsl	r7, r1, #1
   14dd0:	cmp	r0, r3
   14dd4:	ldr	r0, [r4, #4]
   14dd8:	strhcc	r3, [r4, #130]	; 0x82
   14ddc:	ldrh	r5, [r0, r7]
   14de0:	cmp	r5, #0
   14de4:	beq	14dfc <flatcc_builder_table_add@@Base+0x80>
   14de8:	ldr	r3, [pc, #156]	; 14e8c <flatcc_builder_table_add@@Base+0x110>
   14dec:	movw	r2, #1784	; 0x6f8
   14df0:	ldr	r1, [pc, #152]	; 14e90 <flatcc_builder_table_add@@Base+0x114>
   14df4:	ldr	r0, [pc, #160]	; 14e9c <flatcc_builder_table_add@@Base+0x120>
   14df8:	b	14da4 <flatcc_builder_table_add@@Base+0x28>
   14dfc:	ldr	ip, [r4, #12]
   14e00:	sub	r0, r3, #1
   14e04:	rsb	r3, r3, #0
   14e08:	uxth	r8, r1
   14e0c:	ldr	lr, [pc, #140]	; 14ea0 <flatcc_builder_table_add@@Base+0x124>
   14e10:	ldr	r6, [r4, #20]
   14e14:	eor	ip, ip, r1
   14e18:	mul	ip, lr, ip
   14e1c:	add	r0, r0, r6
   14e20:	and	r6, r0, r3
   14e24:	ldr	r3, [r4, #24]
   14e28:	eor	ip, ip, r2
   14e2c:	add	r1, r2, r6
   14e30:	mul	ip, lr, ip
   14e34:	cmp	r1, r3
   14e38:	str	ip, [r4, #12]
   14e3c:	str	r1, [r4, #20]
   14e40:	bcs	14e6c <flatcc_builder_table_add@@Base+0xf0>
   14e44:	ldr	r3, [r4, #4]
   14e48:	add	r2, r6, #4
   14e4c:	ldr	r0, [r4, #16]
   14e50:	strh	r2, [r3, r7]
   14e54:	ldrh	r3, [r4, #8]
   14e58:	add	r0, r0, r6
   14e5c:	cmp	r3, r8
   14e60:	addls	r1, r8, #1
   14e64:	strhls	r1, [r4, #8]
   14e68:	pop	{r4, r5, r6, r7, r8, pc}
   14e6c:	movw	r2, #65532	; 0xfffc
   14e70:	add	r1, r1, #1
   14e74:	mov	r0, r4
   14e78:	bl	12704 <emit_test@@Base+0x370>
   14e7c:	cmp	r0, #0
   14e80:	beq	14e44 <flatcc_builder_table_add@@Base+0xc8>
   14e84:	mov	r0, r5
   14e88:	pop	{r4, r5, r6, r7, r8, pc}
   14e8c:	andeq	r6, r1, r5, asr #6
   14e90:	andeq	r6, r1, r7, lsl r4
   14e94:			; <UNDEFINED> instruction: 0x000166b6
   14e98:	andeq	r6, r1, sl, asr #14
   14e9c:	andeq	r6, r1, r4, lsl #9
   14ea0:			; <UNDEFINED> instruction: 0x9e3779b1

00014ea4 <flatcc_builder_table_edit@@Base>:
   14ea4:	ldr	r3, [r0, #32]
   14ea8:	ldrh	r3, [r3, #14]
   14eac:	cmp	r3, #3
   14eb0:	beq	14ecc <flatcc_builder_table_edit@@Base+0x28>
   14eb4:	push	{r4, lr}
   14eb8:	movw	r2, #1794	; 0x702
   14ebc:	ldr	r3, [pc, #28]	; 14ee0 <flatcc_builder_table_edit@@Base+0x3c>
   14ec0:	ldr	r1, [pc, #28]	; 14ee4 <flatcc_builder_table_edit@@Base+0x40>
   14ec4:	ldr	r0, [pc, #28]	; 14ee8 <flatcc_builder_table_edit@@Base+0x44>
   14ec8:	bl	12058 <__assert_fail@plt>
   14ecc:	ldr	r3, [r0, #20]
   14ed0:	ldr	r0, [r0, #16]
   14ed4:	sub	r3, r3, r1
   14ed8:	add	r0, r0, r3
   14edc:	bx	lr
   14ee0:	andeq	r6, r1, lr, asr r3
   14ee4:	andeq	r6, r1, r7, lsl r4
   14ee8:			; <UNDEFINED> instruction: 0x000166b6

00014eec <flatcc_builder_table_add_copy@@Base>:
   14eec:	push	{r4, r5, r6, lr}
   14ef0:	mov	r4, r3
   14ef4:	mov	r6, r2
   14ef8:	mov	r2, r4
   14efc:	ldrh	r3, [sp, #16]
   14f00:	bl	14d7c <flatcc_builder_table_add@@Base>
   14f04:	subs	r5, r0, #0
   14f08:	beq	14f18 <flatcc_builder_table_add_copy@@Base+0x2c>
   14f0c:	mov	r2, r4
   14f10:	mov	r1, r6
   14f14:	bl	11fa4 <memcpy@plt>
   14f18:	mov	r0, r5
   14f1c:	pop	{r4, r5, r6, pc}

00014f20 <flatcc_builder_table_add_offset@@Base>:
   14f20:	ldr	r3, [r0, #32]
   14f24:	push	{r4, r5, r6, r7, r8, lr}
   14f28:	ldrh	r3, [r3, #14]
   14f2c:	cmp	r3, #3
   14f30:	beq	14f48 <flatcc_builder_table_add_offset@@Base+0x28>
   14f34:	ldr	r3, [pc, #236]	; 15028 <flatcc_builder_table_add_offset@@Base+0x108>
   14f38:	movw	r2, #1811	; 0x713
   14f3c:	ldr	r1, [pc, #232]	; 1502c <flatcc_builder_table_add_offset@@Base+0x10c>
   14f40:	ldr	r0, [pc, #232]	; 15030 <flatcc_builder_table_add_offset@@Base+0x110>
   14f44:	bl	12058 <__assert_fail@plt>
   14f48:	movw	r3, #32764	; 0x7ffc
   14f4c:	cmp	r1, r3
   14f50:	bls	14f68 <flatcc_builder_table_add_offset@@Base+0x48>
   14f54:	ldr	r3, [pc, #204]	; 15028 <flatcc_builder_table_add_offset@@Base+0x108>
   14f58:	movw	r2, #1812	; 0x714
   14f5c:	ldr	r1, [pc, #200]	; 1502c <flatcc_builder_table_add_offset@@Base+0x10c>
   14f60:	ldr	r0, [pc, #204]	; 15034 <flatcc_builder_table_add_offset@@Base+0x114>
   14f64:	b	14f44 <flatcc_builder_table_add_offset@@Base+0x24>
   14f68:	ldr	r3, [r0, #4]
   14f6c:	lsl	r7, r1, #1
   14f70:	mov	r4, r0
   14f74:	ldrh	r6, [r3, r7]
   14f78:	cmp	r6, #0
   14f7c:	beq	14f94 <flatcc_builder_table_add_offset@@Base+0x74>
   14f80:	ldr	r3, [pc, #160]	; 15028 <flatcc_builder_table_add_offset@@Base+0x108>
   14f84:	movw	r2, #1819	; 0x71b
   14f88:	ldr	r1, [pc, #156]	; 1502c <flatcc_builder_table_add_offset@@Base+0x10c>
   14f8c:	ldr	r0, [pc, #164]	; 15038 <flatcc_builder_table_add_offset@@Base+0x118>
   14f90:	b	14f44 <flatcc_builder_table_add_offset@@Base+0x24>
   14f94:	ldr	r3, [r0, #12]
   14f98:	uxth	r5, r1
   14f9c:	ldr	r2, [pc, #152]	; 1503c <flatcc_builder_table_add_offset@@Base+0x11c>
   14fa0:	ldr	r8, [r0, #20]
   14fa4:	eor	r3, r3, r1
   14fa8:	mul	r3, r2, r3
   14fac:	add	r8, r8, #3
   14fb0:	eor	r3, r3, #4
   14fb4:	bic	r8, r8, #3
   14fb8:	add	r1, r8, #4
   14fbc:	mul	r3, r2, r3
   14fc0:	str	r3, [r0, #12]
   14fc4:	ldr	r3, [r0, #24]
   14fc8:	str	r1, [r0, #20]
   14fcc:	cmp	r1, r3
   14fd0:	bhi	15010 <flatcc_builder_table_add_offset@@Base+0xf0>
   14fd4:	ldr	r3, [r4, #4]
   14fd8:	uxth	r2, r8
   14fdc:	add	r1, r2, #4
   14fe0:	ldr	r0, [r4, #16]
   14fe4:	strh	r1, [r3, r7]
   14fe8:	ldrh	r3, [r4, #8]
   14fec:	add	r0, r0, r8
   14ff0:	cmp	r3, r5
   14ff4:	ldr	r3, [r4]
   14ff8:	addls	r1, r5, #1
   14ffc:	strhls	r1, [r4, #8]
   15000:	add	r1, r3, #2
   15004:	str	r1, [r4]
   15008:	strh	r2, [r3]
   1500c:	pop	{r4, r5, r6, r7, r8, pc}
   15010:	movw	r2, #65532	; 0xfffc
   15014:	bl	12704 <emit_test@@Base+0x370>
   15018:	cmp	r0, #0
   1501c:	beq	14fd4 <flatcc_builder_table_add_offset@@Base+0xb4>
   15020:	mov	r0, r6
   15024:	pop	{r4, r5, r6, r7, r8, pc}
   15028:	andeq	r6, r1, r8, ror r3
   1502c:	andeq	r6, r1, r7, lsl r4
   15030:			; <UNDEFINED> instruction: 0x000166b6
   15034:	andeq	r6, r1, sl, asr #14
   15038:	andeq	r6, r1, r4, lsl #9
   1503c:			; <UNDEFINED> instruction: 0x9e3779b1

00015040 <flatcc_builder_table_add_union@@Base>:
   15040:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15044:	add	ip, sp, #8
   15048:	stmdb	ip, {r2, r3}
   1504c:	ldr	r3, [r0, #32]
   15050:	ldrb	r5, [sp]
   15054:	ldr	r4, [sp, #4]
   15058:	ldrh	r3, [r3, #14]
   1505c:	cmp	r3, #3
   15060:	beq	15078 <flatcc_builder_table_add_union@@Base+0x38>
   15064:	ldr	r3, [pc, #164]	; 15110 <flatcc_builder_table_add_union@@Base+0xd0>
   15068:	movw	r2, #1518	; 0x5ee
   1506c:	ldr	r1, [pc, #160]	; 15114 <flatcc_builder_table_add_union@@Base+0xd4>
   15070:	ldr	r0, [pc, #160]	; 15118 <flatcc_builder_table_add_union@@Base+0xd8>
   15074:	bl	12058 <__assert_fail@plt>
   15078:	cmp	r5, #0
   1507c:	mov	r6, r0
   15080:	mov	r7, r1
   15084:	bne	150a4 <flatcc_builder_table_add_union@@Base+0x64>
   15088:	cmp	r4, #0
   1508c:	beq	150d0 <flatcc_builder_table_add_union@@Base+0x90>
   15090:	ldr	r3, [pc, #120]	; 15110 <flatcc_builder_table_add_union@@Base+0xd0>
   15094:	movw	r2, #1519	; 0x5ef
   15098:	ldr	r1, [pc, #116]	; 15114 <flatcc_builder_table_add_union@@Base+0xd4>
   1509c:	ldr	r0, [pc, #120]	; 1511c <flatcc_builder_table_add_union@@Base+0xdc>
   150a0:	b	15074 <flatcc_builder_table_add_union@@Base+0x34>
   150a4:	cmp	r4, #0
   150a8:	beq	150d0 <flatcc_builder_table_add_union@@Base+0x90>
   150ac:	bl	14f20 <flatcc_builder_table_add_offset@@Base>
   150b0:	cmp	r0, #0
   150b4:	strne	r4, [r0]
   150b8:	bne	150d0 <flatcc_builder_table_add_union@@Base+0x90>
   150bc:	ldr	r3, [pc, #76]	; 15110 <flatcc_builder_table_add_union@@Base+0xd0>
   150c0:	movw	r2, #1522	; 0x5f2
   150c4:	ldr	r1, [pc, #72]	; 15114 <flatcc_builder_table_add_union@@Base+0xd4>
   150c8:	ldr	r0, [pc, #80]	; 15120 <flatcc_builder_table_add_union@@Base+0xe0>
   150cc:	b	15074 <flatcc_builder_table_add_union@@Base+0x34>
   150d0:	mov	r3, #1
   150d4:	sub	r1, r7, #1
   150d8:	mov	r2, r3
   150dc:	mov	r0, r6
   150e0:	bl	14d7c <flatcc_builder_table_add@@Base>
   150e4:	cmp	r0, #0
   150e8:	bne	15100 <flatcc_builder_table_add_union@@Base+0xc0>
   150ec:	ldr	r3, [pc, #28]	; 15110 <flatcc_builder_table_add_union@@Base+0xd0>
   150f0:	movw	r2, #1526	; 0x5f6
   150f4:	ldr	r1, [pc, #24]	; 15114 <flatcc_builder_table_add_union@@Base+0xd4>
   150f8:	ldr	r0, [pc, #36]	; 15124 <flatcc_builder_table_add_union@@Base+0xe4>
   150fc:	b	15074 <flatcc_builder_table_add_union@@Base+0x34>
   15100:	strb	r5, [r0]
   15104:	mov	r0, #0
   15108:	add	sp, sp, #12
   1510c:	pop	{r4, r5, r6, r7, pc}
   15110:	muleq	r1, r8, r3
   15114:	andeq	r6, r1, r7, lsl r4
   15118:			; <UNDEFINED> instruction: 0x000166b6
   1511c:	andeq	r6, r1, lr, lsl #15
   15120:			; <UNDEFINED> instruction: 0x000167b0
   15124:			; <UNDEFINED> instruction: 0x000167ba

00015128 <flatcc_builder_table_add_union_vector@@Base>:
   15128:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1512c:	mov	r7, r1
   15130:	add	r1, sp, #8
   15134:	stmdb	r1, {r2, r3}
   15138:	ldr	r3, [r0, #32]
   1513c:	ldrd	r4, [sp]
   15140:	ldrh	r3, [r3, #14]
   15144:	cmp	r3, #3
   15148:	beq	15160 <flatcc_builder_table_add_union_vector@@Base+0x38>
   1514c:	ldr	r3, [pc, #176]	; 15204 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15150:	mov	r2, #1536	; 0x600
   15154:	ldr	r1, [pc, #172]	; 15208 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   15158:	ldr	r0, [pc, #172]	; 1520c <flatcc_builder_table_add_union_vector@@Base+0xe4>
   1515c:	bl	12058 <__assert_fail@plt>
   15160:	clz	r3, r5
   15164:	clz	r2, r4
   15168:	lsr	r3, r3, #5
   1516c:	lsr	r2, r2, #5
   15170:	cmp	r2, r3
   15174:	beq	151a0 <flatcc_builder_table_add_union_vector@@Base+0x78>
   15178:	adds	r4, r4, #0
   1517c:	movne	r4, #1
   15180:	cmp	r4, r3
   15184:	mvnne	r4, #0
   15188:	bne	151f8 <flatcc_builder_table_add_union_vector@@Base+0xd0>
   1518c:	ldr	r3, [pc, #112]	; 15204 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15190:	movw	r2, #1537	; 0x601
   15194:	ldr	r1, [pc, #108]	; 15208 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   15198:	ldr	r0, [pc, #112]	; 15210 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   1519c:	b	1515c <flatcc_builder_table_add_union_vector@@Base+0x34>
   151a0:	cmp	r4, #0
   151a4:	beq	151f8 <flatcc_builder_table_add_union_vector@@Base+0xd0>
   151a8:	sub	r1, r7, #1
   151ac:	mov	r6, r0
   151b0:	bl	14f20 <flatcc_builder_table_add_offset@@Base>
   151b4:	cmp	r0, #0
   151b8:	ldreq	r3, [pc, #68]	; 15204 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   151bc:	movweq	r2, #1540	; 0x604
   151c0:	beq	151ec <flatcc_builder_table_add_union_vector@@Base+0xc4>
   151c4:	mov	r1, r7
   151c8:	str	r4, [r0]
   151cc:	mov	r0, r6
   151d0:	bl	14f20 <flatcc_builder_table_add_offset@@Base>
   151d4:	cmp	r0, #0
   151d8:	movne	r4, #0
   151dc:	strne	r5, [r0]
   151e0:	bne	151f8 <flatcc_builder_table_add_union_vector@@Base+0xd0>
   151e4:	ldr	r3, [pc, #24]	; 15204 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   151e8:	movw	r2, #1544	; 0x608
   151ec:	ldr	r1, [pc, #20]	; 15208 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   151f0:	ldr	r0, [pc, #28]	; 15214 <flatcc_builder_table_add_union_vector@@Base+0xec>
   151f4:	b	1515c <flatcc_builder_table_add_union_vector@@Base+0x34>
   151f8:	mov	r0, r4
   151fc:	add	sp, sp, #12
   15200:	pop	{r4, r5, r6, r7, pc}
   15204:			; <UNDEFINED> instruction: 0x000163b7
   15208:	andeq	r6, r1, r7, lsl r4
   1520c:			; <UNDEFINED> instruction: 0x000166b6
   15210:	andeq	r6, r1, r6, asr #15
   15214:			; <UNDEFINED> instruction: 0x000167b0

00015218 <flatcc_builder_push_buffer_alignment@@Base>:
   15218:	mov	r3, r0
   1521c:	mov	r2, #4
   15220:	ldrh	r0, [r0, #128]	; 0x80
   15224:	strh	r2, [r3, #128]	; 0x80
   15228:	bx	lr

0001522c <flatcc_builder_pop_buffer_alignment@@Base>:
   1522c:	ldrh	r3, [r0, #128]	; 0x80
   15230:	cmp	r3, r1
   15234:	strhcc	r1, [r0, #128]	; 0x80
   15238:	bx	lr

0001523c <flatcc_builder_get_buffer_alignment@@Base>:
   1523c:	ldrh	r0, [r0, #128]	; 0x80
   15240:	bx	lr

00015244 <flatcc_builder_set_vtable_clustering@@Base>:
   15244:	clz	r1, r1
   15248:	lsr	r1, r1, #5
   1524c:	str	r1, [r0, #180]	; 0xb4
   15250:	bx	lr

00015254 <flatcc_builder_set_block_align@@Base>:
   15254:	strh	r1, [r0, #132]	; 0x84
   15258:	bx	lr

0001525c <flatcc_builder_get_level@@Base>:
   1525c:	ldr	r0, [r0, #156]	; 0x9c
   15260:	bx	lr

00015264 <flatcc_builder_set_max_level@@Base>:
   15264:	ldr	r3, [r0, #160]	; 0xa0
   15268:	str	r1, [r0, #176]	; 0xb0
   1526c:	cmp	r3, r1
   15270:	strlt	r1, [r0, #160]	; 0xa0
   15274:	bx	lr

00015278 <flatcc_builder_get_buffer_size@@Base>:
   15278:	ldr	r2, [r0, #140]	; 0x8c
   1527c:	ldr	r0, [r0, #136]	; 0x88
   15280:	sub	r0, r2, r0
   15284:	bx	lr

00015288 <flatcc_builder_get_buffer_start@@Base>:
   15288:	ldr	r0, [r0, #136]	; 0x88
   1528c:	bx	lr

00015290 <flatcc_builder_get_buffer_end@@Base>:
   15290:	ldr	r0, [r0, #140]	; 0x8c
   15294:	bx	lr

00015298 <flatcc_builder_set_vtable_cache_limit@@Base>:
   15298:	str	r1, [r0, #172]	; 0xac
   1529c:	bx	lr

000152a0 <flatcc_builder_set_identifier@@Base>:
   152a0:	ldr	r3, [pc, #16]	; 152b8 <flatcc_builder_set_identifier@@Base+0x18>
   152a4:	cmp	r1, #0
   152a8:	moveq	r1, r3
   152ac:	ldr	r3, [r1]
   152b0:	str	r3, [r0, #168]	; 0xa8
   152b4:	bx	lr
   152b8:	andeq	r5, r1, r1, lsr sp

000152bc <flatcc_builder_get_type@@Base>:
   152bc:	ldr	r0, [r0, #32]
   152c0:	cmp	r0, #0
   152c4:	ldrhne	r0, [r0, #14]
   152c8:	bx	lr

000152cc <flatcc_builder_get_type_at@@Base>:
   152cc:	cmp	r1, #0
   152d0:	ble	152f8 <flatcc_builder_get_type_at@@Base+0x2c>
   152d4:	ldr	r3, [r0, #156]	; 0x9c
   152d8:	cmp	r3, r1
   152dc:	blt	152f8 <flatcc_builder_get_type_at@@Base+0x2c>
   152e0:	sub	r1, r1, r3
   152e4:	ldr	r3, [r0, #32]
   152e8:	mov	r2, #36	; 0x24
   152ec:	mla	r1, r2, r1, r3
   152f0:	ldrh	r0, [r1, #14]
   152f4:	bx	lr
   152f8:	mov	r0, #0
   152fc:	bx	lr

00015300 <flatcc_builder_get_direct_buffer@@Base>:
   15300:	ldr	r3, [r0, #184]	; 0xb8
   15304:	cmp	r3, #0
   15308:	beq	15330 <flatcc_builder_get_direct_buffer@@Base+0x30>
   1530c:	ldrd	r2, [r0, #188]	; 0xbc
   15310:	cmp	r2, r3
   15314:	bne	15330 <flatcc_builder_get_direct_buffer@@Base+0x30>
   15318:	cmp	r1, #0
   1531c:	ldrne	r3, [r0, #212]	; 0xd4
   15320:	strne	r3, [r1]
   15324:	ldr	r1, [r0, #196]	; 0xc4
   15328:	mov	r0, r1
   1532c:	bx	lr
   15330:	cmp	r1, #0
   15334:	movne	r3, #0
   15338:	strne	r3, [r1]
   1533c:	movne	r1, r3
   15340:	b	15328 <flatcc_builder_get_direct_buffer@@Base+0x28>

00015344 <flatcc_builder_copy_buffer@@Base>:
   15344:	ldr	r3, [r0, #184]	; 0xb8
   15348:	cmp	r3, #0
   1534c:	beq	15378 <flatcc_builder_copy_buffer@@Base+0x34>
   15350:	push	{r4, lr}
   15354:	add	r0, r0, #188	; 0xbc
   15358:	bl	158ec <flatcc_emitter_copy_buffer@@Base>
   1535c:	cmp	r0, #0
   15360:	popne	{r4, pc}
   15364:	ldr	r3, [pc, #20]	; 15380 <flatcc_builder_copy_buffer@@Base+0x3c>
   15368:	movw	r2, #1926	; 0x786
   1536c:	ldr	r1, [pc, #16]	; 15384 <flatcc_builder_copy_buffer@@Base+0x40>
   15370:	ldr	r0, [pc, #16]	; 15388 <flatcc_builder_copy_buffer@@Base+0x44>
   15374:	bl	12058 <__assert_fail@plt>
   15378:	mov	r0, r3
   1537c:	bx	lr
   15380:	ldrdeq	r6, [r1], -sp
   15384:	andeq	r6, r1, r7, lsl r4
   15388:	andeq	r5, r1, ip, lsl #24

0001538c <flatcc_builder_finalize_buffer@@Base>:
   1538c:	push	{r4, r5, r6, lr}
   15390:	cmp	r1, #0
   15394:	mov	r5, r0
   15398:	ldr	r2, [r0, #136]	; 0x88
   1539c:	ldr	r4, [r0, #140]	; 0x8c
   153a0:	sub	r4, r4, r2
   153a4:	mov	r0, r4
   153a8:	strne	r4, [r1]
   153ac:	bl	11fd4 <malloc@plt>
   153b0:	subs	r6, r0, #0
   153b4:	ldreq	r3, [pc, #56]	; 153f4 <flatcc_builder_finalize_buffer@@Base+0x68>
   153b8:	movweq	r2, #1944	; 0x798
   153bc:	beq	153e0 <flatcc_builder_finalize_buffer@@Base+0x54>
   153c0:	mov	r2, r4
   153c4:	mov	r1, r6
   153c8:	mov	r0, r5
   153cc:	bl	15344 <flatcc_builder_copy_buffer@@Base>
   153d0:	cmp	r0, #0
   153d4:	bne	153ec <flatcc_builder_finalize_buffer@@Base+0x60>
   153d8:	ldr	r3, [pc, #20]	; 153f4 <flatcc_builder_finalize_buffer@@Base+0x68>
   153dc:	movw	r2, #1948	; 0x79c
   153e0:	ldr	r1, [pc, #16]	; 153f8 <flatcc_builder_finalize_buffer@@Base+0x6c>
   153e4:	ldr	r0, [pc, #16]	; 153fc <flatcc_builder_finalize_buffer@@Base+0x70>
   153e8:	bl	12058 <__assert_fail@plt>
   153ec:	mov	r0, r6
   153f0:	pop	{r4, r5, r6, pc}
   153f4:	strdeq	r6, [r1], -r8
   153f8:	andeq	r6, r1, r7, lsl r4
   153fc:	andeq	r6, r1, r4, lsl #9

00015400 <flatcc_builder_finalize_aligned_buffer@@Base>:
   15400:	push	{r4, r5, r6, r7, r8, lr}
   15404:	mov	r6, r0
   15408:	subs	r7, r1, #0
   1540c:	ldr	r2, [r0, #136]	; 0x88
   15410:	ldr	r4, [r0, #140]	; 0x8c
   15414:	ldrh	r0, [r0, #128]	; 0x80
   15418:	sub	r2, r4, r2
   1541c:	sub	r4, r0, #1
   15420:	strne	r2, [r7]
   15424:	add	r4, r4, r2
   15428:	rsb	r2, r0, #0
   1542c:	and	r4, r4, r2
   15430:	mov	r1, r4
   15434:	bl	12854 <emit_test@@Base+0x4c0>
   15438:	subs	r5, r0, #0
   1543c:	beq	15464 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   15440:	mov	r2, r4
   15444:	mov	r1, r5
   15448:	mov	r0, r6
   1544c:	bl	15344 <flatcc_builder_copy_buffer@@Base>
   15450:	subs	r4, r0, #0
   15454:	bne	15464 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   15458:	mov	r0, r5
   1545c:	mov	r5, r4
   15460:	bl	11f98 <free@plt>
   15464:	adds	r3, r7, #0
   15468:	mov	r0, r5
   1546c:	movne	r3, #1
   15470:	cmp	r5, #0
   15474:	movne	r3, #0
   15478:	cmp	r3, #0
   1547c:	movne	r3, #0
   15480:	strne	r3, [r7]
   15484:	pop	{r4, r5, r6, r7, r8, pc}

00015488 <flatcc_builder_aligned_alloc@@Base>:
   15488:	b	12854 <emit_test@@Base+0x4c0>

0001548c <flatcc_builder_aligned_free@@Base>:
   1548c:	b	11f98 <free@plt>

00015490 <flatcc_builder_get_emit_context@@Base>:
   15490:	ldr	r0, [r0, #36]	; 0x24
   15494:	bx	lr

00015498 <flatcc_emitter_recycle_page@@Base>:
   15498:	ldr	r3, [r0]
   1549c:	cmp	r3, r1
   154a0:	beq	154e0 <flatcc_emitter_recycle_page@@Base+0x48>
   154a4:	ldr	r2, [r0, #4]
   154a8:	cmp	r2, r1
   154ac:	beq	154e0 <flatcc_emitter_recycle_page@@Base+0x48>
   154b0:	ldr	r0, [r1, #2944]	; 0xb80
   154b4:	ldr	r2, [r1, #2948]	; 0xb84
   154b8:	str	r2, [r0, #2948]	; 0xb84
   154bc:	str	r0, [r2, #2944]	; 0xb80
   154c0:	mov	r0, #0
   154c4:	ldr	r2, [r3, #2948]	; 0xb84
   154c8:	str	r3, [r1, #2944]	; 0xb80
   154cc:	str	r2, [r1, #2948]	; 0xb84
   154d0:	str	r1, [r2, #2944]	; 0xb80
   154d4:	ldr	r3, [r1, #2944]	; 0xb80
   154d8:	str	r1, [r3, #2948]	; 0xb84
   154dc:	bx	lr
   154e0:	mvn	r0, #0
   154e4:	bx	lr

000154e8 <flatcc_emitter_reset@@Base>:
   154e8:	ldr	r3, [r0]
   154ec:	cmp	r3, #0
   154f0:	bxeq	lr
   154f4:	add	r2, r3, #1472	; 0x5c0
   154f8:	push	{r4, lr}
   154fc:	mov	r4, r0
   15500:	str	r3, [r0, #4]
   15504:	str	r2, [r0, #8]
   15508:	str	r2, [r0, #16]
   1550c:	mov	r2, #1472	; 0x5c0
   15510:	str	r2, [r0, #12]
   15514:	str	r2, [r0, #20]
   15518:	sub	r2, r2, #2944	; 0xb80
   1551c:	str	r2, [r3, #2952]	; 0xb88
   15520:	ldr	r3, [r0, #24]
   15524:	ldr	r2, [r0, #32]
   15528:	cmp	r2, #0
   1552c:	streq	r3, [r0, #32]
   15530:	lsr	r3, r3, #2
   15534:	ldr	r2, [r0, #32]
   15538:	add	r2, r2, r2, lsl #1
   1553c:	add	r3, r3, r2, lsr #2
   15540:	str	r3, [r0, #32]
   15544:	mov	r3, #0
   15548:	str	r3, [r0, #24]
   1554c:	ldr	r3, [r4, #28]
   15550:	ldr	r2, [r4, #32]
   15554:	cmp	r3, r2, lsl #1
   15558:	popls	{r4, pc}
   1555c:	ldrd	r2, [r4]
   15560:	ldr	r0, [r3, #2944]	; 0xb80
   15564:	cmp	r0, r2
   15568:	popeq	{r4, pc}
   1556c:	ldr	r2, [r0, #2944]	; 0xb80
   15570:	str	r2, [r3, #2944]	; 0xb80
   15574:	ldr	r2, [r0, #2944]	; 0xb80
   15578:	str	r3, [r2, #2948]	; 0xb84
   1557c:	bl	11f98 <free@plt>
   15580:	ldr	r3, [r4, #28]
   15584:	sub	r3, r3, #2944	; 0xb80
   15588:	str	r3, [r4, #28]
   1558c:	b	1554c <flatcc_emitter_reset@@Base+0x64>

00015590 <flatcc_emitter_clear@@Base>:
   15590:	ldr	r3, [r0]
   15594:	cmp	r3, #0
   15598:	bxeq	lr
   1559c:	push	{r4, r5, r6, lr}
   155a0:	mov	r1, #0
   155a4:	mov	r4, r0
   155a8:	ldr	r2, [r3, #2948]	; 0xb84
   155ac:	str	r1, [r2, #2944]	; 0xb80
   155b0:	ldr	r5, [r3, #2944]	; 0xb80
   155b4:	cmp	r5, #0
   155b8:	bne	155d8 <flatcc_emitter_clear@@Base+0x48>
   155bc:	mov	r0, r3
   155c0:	bl	11f98 <free@plt>
   155c4:	mov	r1, r5
   155c8:	mov	r0, r4
   155cc:	pop	{r4, r5, r6, lr}
   155d0:	mov	r2, #36	; 0x24
   155d4:	b	1201c <memset@plt>
   155d8:	ldr	r0, [r5, #2948]	; 0xb84
   155dc:	bl	11f98 <free@plt>
   155e0:	mov	r3, r5
   155e4:	b	155b0 <flatcc_emitter_clear@@Base+0x20>

000155e8 <flatcc_emitter@@Base>:
   155e8:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155ec:	mov	r4, r0
   155f0:	mov	r6, r2
   155f4:	cmp	r3, #0
   155f8:	ldr	r0, [r0, #24]
   155fc:	ldr	r2, [sp, #40]	; 0x28
   15600:	add	r0, r0, r2
   15604:	str	r0, [r4, #24]
   15608:	bge	157a0 <flatcc_emitter@@Base+0x1b8>
   1560c:	ldr	r0, [r4, #12]
   15610:	cmp	r0, r2
   15614:	bcc	15658 <flatcc_emitter@@Base+0x70>
   15618:	ldr	r3, [r4, #8]
   1561c:	sub	r3, r3, r2
   15620:	sub	r2, r0, r2
   15624:	str	r3, [r4, #8]
   15628:	str	r2, [r4, #12]
   1562c:	mov	r4, r1
   15630:	sub	r6, r6, #1
   15634:	add	r4, r4, #8
   15638:	cmn	r6, #1
   1563c:	beq	1566c <flatcc_emitter@@Base+0x84>
   15640:	mov	r0, r3
   15644:	ldmdb	r4, {r1, r2}
   15648:	bl	11fa4 <memcpy@plt>
   1564c:	ldr	r2, [r4, #-4]
   15650:	add	r3, r0, r2
   15654:	b	15630 <flatcc_emitter@@Base+0x48>
   15658:	ldr	r9, [pc, #648]	; 158e8 <flatcc_emitter@@Base+0x300>
   1565c:	add	r5, r1, r6, lsl #3
   15660:	mov	r8, #2944	; 0xb80
   15664:	cmp	r6, #0
   15668:	bne	15674 <flatcc_emitter@@Base+0x8c>
   1566c:	mov	r0, #0
   15670:	b	1570c <flatcc_emitter@@Base+0x124>
   15674:	ldr	sl, [r5, #-8]
   15678:	ldr	r7, [r5, #-4]
   1567c:	add	sl, sl, r7
   15680:	cmp	r7, #0
   15684:	subeq	r5, r5, #8
   15688:	subeq	r6, r6, #1
   1568c:	beq	15664 <flatcc_emitter@@Base+0x7c>
   15690:	ldr	r3, [r4, #12]
   15694:	cmp	r3, r7
   15698:	bcs	15770 <flatcc_emitter@@Base+0x188>
   1569c:	cmp	r3, #0
   156a0:	movne	r2, r3
   156a4:	bne	15774 <flatcc_emitter@@Base+0x18c>
   156a8:	ldr	fp, [r4]
   156ac:	cmp	fp, #0
   156b0:	beq	156f8 <flatcc_emitter@@Base+0x110>
   156b4:	ldr	r2, [r4, #4]
   156b8:	ldr	r3, [fp, #2948]	; 0xb84
   156bc:	cmp	r3, r2
   156c0:	beq	156f8 <flatcc_emitter@@Base+0x110>
   156c4:	ldr	r2, [fp, #2952]	; 0xb88
   156c8:	sub	r2, r2, #2944	; 0xb80
   156cc:	str	r2, [r3, #2952]	; 0xb88
   156d0:	str	r3, [r4]
   156d4:	ldr	r3, [r4]
   156d8:	str	r8, [r4, #12]
   156dc:	add	r2, r3, #2944	; 0xb80
   156e0:	str	r2, [r4, #8]
   156e4:	ldr	r2, [r3, #2944]	; 0xb80
   156e8:	ldr	r2, [r2, #2952]	; 0xb88
   156ec:	sub	r2, r2, #2944	; 0xb80
   156f0:	str	r2, [r3, #2952]	; 0xb88
   156f4:	b	15680 <flatcc_emitter@@Base+0x98>
   156f8:	movw	r0, #2956	; 0xb8c
   156fc:	bl	11fd4 <malloc@plt>
   15700:	cmp	r0, #0
   15704:	bne	15714 <flatcc_emitter@@Base+0x12c>
   15708:	mvn	r0, #0
   1570c:	add	sp, sp, #4
   15710:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15714:	ldr	r3, [r4, #28]
   15718:	cmp	fp, #0
   1571c:	add	r3, r3, #2944	; 0xb80
   15720:	str	r3, [r4, #28]
   15724:	beq	15744 <flatcc_emitter@@Base+0x15c>
   15728:	ldr	r3, [r4, #4]
   1572c:	str	fp, [r0, #2944]	; 0xb80
   15730:	str	r3, [r0, #2948]	; 0xb84
   15734:	str	r0, [fp, #2948]	; 0xb84
   15738:	str	r0, [r3, #2944]	; 0xb80
   1573c:	str	r0, [r4]
   15740:	b	156d4 <flatcc_emitter@@Base+0xec>
   15744:	add	r3, r0, #1472	; 0x5c0
   15748:	str	r0, [r4]
   1574c:	str	r0, [r0, #2944]	; 0xb80
   15750:	stmib	r4, {r0, r3}
   15754:	str	r3, [r4, #16]
   15758:	mov	r3, #1472	; 0x5c0
   1575c:	str	r0, [r0, #2948]	; 0xb84
   15760:	str	r3, [r4, #12]
   15764:	str	r3, [r4, #20]
   15768:	str	r9, [r0, #2952]	; 0xb88
   1576c:	b	15680 <flatcc_emitter@@Base+0x98>
   15770:	mov	r2, r7
   15774:	ldr	r0, [r4, #8]
   15778:	rsb	r1, r2, #0
   1577c:	sub	r3, r3, r2
   15780:	add	sl, sl, r1
   15784:	sub	r7, r7, r2
   15788:	str	r3, [r4, #12]
   1578c:	add	r0, r0, r1
   15790:	mov	r1, sl
   15794:	str	r0, [r4, #8]
   15798:	bl	11fa4 <memcpy@plt>
   1579c:	b	15680 <flatcc_emitter@@Base+0x98>
   157a0:	ldr	r0, [r4, #20]
   157a4:	cmp	r0, r2
   157a8:	bcs	157dc <flatcc_emitter@@Base+0x1f4>
   157ac:	ldr	sl, [pc, #308]	; 158e8 <flatcc_emitter@@Base+0x300>
   157b0:	add	r5, r1, #8
   157b4:	mov	r9, #2944	; 0xb80
   157b8:	cmp	r6, #0
   157bc:	beq	1566c <flatcc_emitter@@Base+0x84>
   157c0:	ldr	fp, [r5, #-8]
   157c4:	ldr	r8, [r5, #-4]
   157c8:	cmp	r8, #0
   157cc:	bne	157f4 <flatcc_emitter@@Base+0x20c>
   157d0:	sub	r6, r6, #1
   157d4:	add	r5, r5, #8
   157d8:	b	157b8 <flatcc_emitter@@Base+0x1d0>
   157dc:	ldr	r3, [r4, #16]
   157e0:	add	ip, r3, r2
   157e4:	sub	r2, r0, r2
   157e8:	str	ip, [r4, #16]
   157ec:	str	r2, [r4, #20]
   157f0:	b	1562c <flatcc_emitter@@Base+0x44>
   157f4:	ldr	r7, [r4, #20]
   157f8:	cmp	r7, r8
   157fc:	bcs	158b0 <flatcc_emitter@@Base+0x2c8>
   15800:	cmp	r7, #0
   15804:	bne	158b4 <flatcc_emitter@@Base+0x2cc>
   15808:	ldr	r7, [r4, #4]
   1580c:	cmp	r7, #0
   15810:	beq	15828 <flatcc_emitter@@Base+0x240>
   15814:	ldr	r2, [r4]
   15818:	ldr	r3, [r7, #2944]	; 0xb80
   1581c:	cmp	r3, r2
   15820:	strne	r3, [r4, #4]
   15824:	bne	15864 <flatcc_emitter@@Base+0x27c>
   15828:	movw	r0, #2956	; 0xb8c
   1582c:	bl	11fd4 <malloc@plt>
   15830:	cmp	r0, #0
   15834:	beq	15708 <flatcc_emitter@@Base+0x120>
   15838:	ldr	r3, [r4, #28]
   1583c:	cmp	r7, #0
   15840:	add	r3, r3, #2944	; 0xb80
   15844:	str	r3, [r4, #28]
   15848:	beq	15884 <flatcc_emitter@@Base+0x29c>
   1584c:	ldr	r3, [r4]
   15850:	str	r3, [r0, #2944]	; 0xb80
   15854:	str	r7, [r0, #2948]	; 0xb84
   15858:	str	r0, [r3, #2948]	; 0xb84
   1585c:	str	r0, [r7, #2944]	; 0xb80
   15860:	str	r0, [r4, #4]
   15864:	ldr	r3, [r4, #4]
   15868:	ldr	r2, [r3, #2948]	; 0xb84
   1586c:	ldr	r2, [r2, #2952]	; 0xb88
   15870:	str	r3, [r4, #16]
   15874:	str	r9, [r4, #20]
   15878:	add	r2, r2, #2944	; 0xb80
   1587c:	str	r2, [r3, #2952]	; 0xb88
   15880:	b	157c8 <flatcc_emitter@@Base+0x1e0>
   15884:	add	r3, r0, #1472	; 0x5c0
   15888:	str	r0, [r4]
   1588c:	str	r0, [r0, #2944]	; 0xb80
   15890:	stmib	r4, {r0, r3}
   15894:	str	r3, [r4, #16]
   15898:	mov	r3, #1472	; 0x5c0
   1589c:	str	r0, [r0, #2948]	; 0xb84
   158a0:	str	r3, [r4, #12]
   158a4:	str	r3, [r4, #20]
   158a8:	str	sl, [r0, #2952]	; 0xb88
   158ac:	b	157c8 <flatcc_emitter@@Base+0x1e0>
   158b0:	mov	r7, r8
   158b4:	mov	r2, r7
   158b8:	mov	r1, fp
   158bc:	ldr	r0, [r4, #16]
   158c0:	bl	11fa4 <memcpy@plt>
   158c4:	ldr	r3, [r4, #16]
   158c8:	sub	r8, r8, r7
   158cc:	add	fp, fp, r7
   158d0:	add	r3, r3, r7
   158d4:	str	r3, [r4, #16]
   158d8:	ldr	r3, [r4, #20]
   158dc:	sub	r7, r3, r7
   158e0:	str	r7, [r4, #20]
   158e4:	b	157c8 <flatcc_emitter@@Base+0x1e0>
   158e8:			; <UNDEFINED> instruction: 0xfffffa40

000158ec <flatcc_emitter_copy_buffer@@Base>:
   158ec:	ldr	ip, [r0, #24]
   158f0:	push	{r4, r5, r6, lr}
   158f4:	cmp	ip, r2
   158f8:	movhi	r6, #0
   158fc:	bhi	15934 <flatcc_emitter_copy_buffer@@Base+0x48>
   15900:	ldr	r6, [r0]
   15904:	cmp	r6, #0
   15908:	beq	15934 <flatcc_emitter_copy_buffer@@Base+0x48>
   1590c:	ldr	r2, [r0, #4]
   15910:	mov	r5, r1
   15914:	mov	r4, r0
   15918:	ldr	r1, [r0, #8]
   1591c:	cmp	r6, r2
   15920:	bne	1593c <flatcc_emitter_copy_buffer@@Base+0x50>
   15924:	mov	r2, ip
   15928:	mov	r0, r5
   1592c:	mov	r6, r5
   15930:	bl	11fa4 <memcpy@plt>
   15934:	mov	r0, r6
   15938:	pop	{r4, r5, r6, pc}
   1593c:	ldr	r3, [r4, #12]
   15940:	mov	r0, r5
   15944:	rsb	r6, r3, #2944	; 0xb80
   15948:	mov	r2, r6
   1594c:	add	r6, r5, r6
   15950:	bl	11fa4 <memcpy@plt>
   15954:	ldr	r2, [r4]
   15958:	ldr	r5, [r2, #2944]	; 0xb80
   1595c:	ldr	r2, [r4, #4]
   15960:	cmp	r2, r5
   15964:	bne	15980 <flatcc_emitter_copy_buffer@@Base+0x94>
   15968:	ldr	r2, [r4, #20]
   1596c:	mov	r1, r5
   15970:	mov	r0, r6
   15974:	rsb	r2, r2, #2944	; 0xb80
   15978:	bl	11fa4 <memcpy@plt>
   1597c:	b	15934 <flatcc_emitter_copy_buffer@@Base+0x48>
   15980:	mov	r1, r5
   15984:	mov	r0, r6
   15988:	mov	r2, #2944	; 0xb80
   1598c:	add	r6, r6, #2944	; 0xb80
   15990:	bl	11fa4 <memcpy@plt>
   15994:	ldr	r5, [r5, #2944]	; 0xb80
   15998:	b	1595c <flatcc_emitter_copy_buffer@@Base+0x70>

0001599c <__libc_csu_init@@Base>:
   1599c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   159a0:	mov	r7, r0
   159a4:	ldr	r6, [pc, #72]	; 159f4 <__libc_csu_init@@Base+0x58>
   159a8:	ldr	r5, [pc, #72]	; 159f8 <__libc_csu_init@@Base+0x5c>
   159ac:	add	r6, pc, r6
   159b0:	add	r5, pc, r5
   159b4:	sub	r6, r6, r5
   159b8:	mov	r8, r1
   159bc:	mov	r9, r2
   159c0:	bl	11f6c <printf@plt-0x20>
   159c4:	asrs	r6, r6, #2
   159c8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   159cc:	mov	r4, #0
   159d0:	add	r4, r4, #1
   159d4:	ldr	r3, [r5], #4
   159d8:	mov	r2, r9
   159dc:	mov	r1, r8
   159e0:	mov	r0, r7
   159e4:	blx	r3
   159e8:	cmp	r6, r4
   159ec:	bne	159d0 <__libc_csu_init@@Base+0x34>
   159f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   159f4:	andeq	r1, r1, r0, ror #10
   159f8:	andeq	r1, r1, r8, asr r5

000159fc <__libc_csu_fini@@Base>:
   159fc:	bx	lr

Disassembly of section .fini:

00015a00 <.fini>:
   15a00:	push	{r3, lr}
   15a04:	pop	{r3, pc}
