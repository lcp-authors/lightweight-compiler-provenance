
../repos/findutils/locate/frcode:     file format elf32-littlearm


Disassembly of section .init:

00010b40 <.init>:
   10b40:	push	{r3, lr}
   10b44:	bl	11258 <__assert_fail@plt+0x4dc>
   10b48:	pop	{r3, pc}

Disassembly of section .plt:

00010b4c <calloc@plt-0x14>:
   10b4c:	push	{lr}		; (str lr, [sp, #-4]!)
   10b50:	ldr	lr, [pc, #4]	; 10b5c <calloc@plt-0x4>
   10b54:	add	lr, pc, lr
   10b58:	ldr	pc, [lr, #8]!
   10b5c:	andeq	r4, r1, r4, lsr #9

00010b60 <calloc@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #20, 20	; 0x14000
   10b68:	ldr	pc, [ip, #1188]!	; 0x4a4

00010b6c <raise@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #20, 20	; 0x14000
   10b74:	ldr	pc, [ip, #1180]!	; 0x49c

00010b78 <strcmp@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #20, 20	; 0x14000
   10b80:	ldr	pc, [ip, #1172]!	; 0x494

00010b84 <strtol@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #20, 20	; 0x14000
   10b8c:	ldr	pc, [ip, #1164]!	; 0x48c

00010b90 <printf@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #20, 20	; 0x14000
   10b98:	ldr	pc, [ip, #1156]!	; 0x484

00010b9c <fflush@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #20, 20	; 0x14000
   10ba4:	ldr	pc, [ip, #1148]!	; 0x47c

00010ba8 <free@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #20, 20	; 0x14000
   10bb0:	ldr	pc, [ip, #1140]!	; 0x474

00010bb4 <ferror@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #20, 20	; 0x14000
   10bbc:	ldr	pc, [ip, #1132]!	; 0x46c

00010bc0 <_exit@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #20, 20	; 0x14000
   10bc8:	ldr	pc, [ip, #1124]!	; 0x464

00010bcc <memcpy@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #20, 20	; 0x14000
   10bd4:	ldr	pc, [ip, #1116]!	; 0x45c

00010bd8 <mbsinit@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #20, 20	; 0x14000
   10be0:	ldr	pc, [ip, #1108]!	; 0x454

00010be4 <memcmp@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #20, 20	; 0x14000
   10bec:	ldr	pc, [ip, #1100]!	; 0x44c

00010bf0 <dcgettext@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #20, 20	; 0x14000
   10bf8:	ldr	pc, [ip, #1092]!	; 0x444

00010bfc <realloc@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #20, 20	; 0x14000
   10c04:	ldr	pc, [ip, #1084]!	; 0x43c

00010c08 <iswprint@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #20, 20	; 0x14000
   10c10:	ldr	pc, [ip, #1076]!	; 0x434

00010c14 <fwrite@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #20, 20	; 0x14000
   10c1c:	ldr	pc, [ip, #1068]!	; 0x42c

00010c20 <lseek64@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #20, 20	; 0x14000
   10c28:	ldr	pc, [ip, #1060]!	; 0x424

00010c2c <__ctype_get_mb_cur_max@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #20, 20	; 0x14000
   10c34:	ldr	pc, [ip, #1052]!	; 0x41c

00010c38 <__fpending@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #20, 20	; 0x14000
   10c40:	ldr	pc, [ip, #1044]!	; 0x414

00010c44 <mbrtowc@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #20, 20	; 0x14000
   10c4c:	ldr	pc, [ip, #1036]!	; 0x40c

00010c50 <error@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #20, 20	; 0x14000
   10c58:	ldr	pc, [ip, #1028]!	; 0x404

00010c5c <malloc@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #20, 20	; 0x14000
   10c64:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c68 <__libc_start_main@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #20, 20	; 0x14000
   10c70:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c74 <__freading@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #20, 20	; 0x14000
   10c7c:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c80 <__gmon_start__@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #20, 20	; 0x14000
   10c88:	ldr	pc, [ip, #996]!	; 0x3e4

00010c8c <getopt_long@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #20, 20	; 0x14000
   10c94:	ldr	pc, [ip, #988]!	; 0x3dc

00010c98 <__ctype_b_loc@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #20, 20	; 0x14000
   10ca0:	ldr	pc, [ip, #980]!	; 0x3d4

00010ca4 <exit@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #20, 20	; 0x14000
   10cac:	ldr	pc, [ip, #972]!	; 0x3cc

00010cb0 <strlen@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #20, 20	; 0x14000
   10cb8:	ldr	pc, [ip, #964]!	; 0x3c4

00010cbc <fprintf@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #20, 20	; 0x14000
   10cc4:	ldr	pc, [ip, #956]!	; 0x3bc

00010cc8 <__errno_location@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #20, 20	; 0x14000
   10cd0:	ldr	pc, [ip, #948]!	; 0x3b4

00010cd4 <__cxa_atexit@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #20, 20	; 0x14000
   10cdc:	ldr	pc, [ip, #940]!	; 0x3ac

00010ce0 <memset@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #20, 20	; 0x14000
   10ce8:	ldr	pc, [ip, #932]!	; 0x3a4

00010cec <fileno@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #20, 20	; 0x14000
   10cf4:	ldr	pc, [ip, #924]!	; 0x39c

00010cf8 <fclose@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #20, 20	; 0x14000
   10d00:	ldr	pc, [ip, #916]!	; 0x394

00010d04 <fseeko64@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #20, 20	; 0x14000
   10d0c:	ldr	pc, [ip, #908]!	; 0x38c

00010d10 <setlocale@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #20, 20	; 0x14000
   10d18:	ldr	pc, [ip, #900]!	; 0x384

00010d1c <strrchr@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #20, 20	; 0x14000
   10d24:	ldr	pc, [ip, #892]!	; 0x37c

00010d28 <nl_langinfo@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #20, 20	; 0x14000
   10d30:	ldr	pc, [ip, #884]!	; 0x374

00010d34 <fputc@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #20, 20	; 0x14000
   10d3c:	ldr	pc, [ip, #876]!	; 0x36c

00010d40 <putc@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #20, 20	; 0x14000
   10d48:	ldr	pc, [ip, #868]!	; 0x364

00010d4c <getdelim@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #20, 20	; 0x14000
   10d54:	ldr	pc, [ip, #860]!	; 0x35c

00010d58 <fputs@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #20, 20	; 0x14000
   10d60:	ldr	pc, [ip, #852]!	; 0x354

00010d64 <strncmp@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #20, 20	; 0x14000
   10d6c:	ldr	pc, [ip, #844]!	; 0x34c

00010d70 <abort@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #20, 20	; 0x14000
   10d78:	ldr	pc, [ip, #836]!	; 0x344

00010d7c <__assert_fail@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #20, 20	; 0x14000
   10d84:	ldr	pc, [ip, #828]!	; 0x33c

Disassembly of section .text:

00010d88 <.text>:
   10d88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d8c:	mov	fp, r0
   10d90:	ldr	r0, [r1]
   10d94:	sub	sp, sp, #36	; 0x24
   10d98:	cmp	r0, #0
   10d9c:	mov	sl, r1
   10da0:	ldreq	r0, [pc, #1052]	; 111c4 <__assert_fail@plt+0x448>
   10da4:	bl	1160c <__assert_fail@plt+0x890>
   10da8:	ldr	r0, [pc, #1048]	; 111c8 <__assert_fail@plt+0x44c>
   10dac:	bl	13e94 <__assert_fail@plt+0x3118>
   10db0:	subs	r7, r0, #0
   10db4:	beq	10de0 <__assert_fail@plt+0x64>
   10db8:	bl	10cc8 <__errno_location@plt>
   10dbc:	ldr	r1, [pc, #1032]	; 111cc <__assert_fail@plt+0x450>
   10dc0:	mov	r2, #5
   10dc4:	ldr	r4, [r0]
   10dc8:	mov	r0, #0
   10dcc:	bl	10bf0 <dcgettext@plt>
   10dd0:	mov	r1, r4
   10dd4:	mov	r2, r0
   10dd8:	mov	r0, #1
   10ddc:	bl	10c50 <error@plt>
   10de0:	ldr	r4, [pc, #1000]	; 111d0 <__assert_fail@plt+0x454>
   10de4:	ldr	r9, [pc, #1000]	; 111d4 <__assert_fail@plt+0x458>
   10de8:	mov	r0, r4
   10dec:	str	r4, [sp, #24]
   10df0:	bl	130c4 <__assert_fail@plt+0x2348>
   10df4:	mov	r8, r7
   10df8:	mov	r5, r7
   10dfc:	str	r0, [sp, #20]
   10e00:	mov	r0, r4
   10e04:	bl	130c4 <__assert_fail@plt+0x2348>
   10e08:	mov	r3, #10
   10e0c:	str	r3, [sp, #8]
   10e10:	mov	r6, r0
   10e14:	strb	r7, [r0]
   10e18:	mov	r4, #0
   10e1c:	str	r4, [sp]
   10e20:	ldr	r3, [pc, #944]	; 111d8 <__assert_fail@plt+0x45c>
   10e24:	ldr	r2, [pc, #944]	; 111dc <__assert_fail@plt+0x460>
   10e28:	mov	r1, sl
   10e2c:	mov	r0, fp
   10e30:	bl	10c8c <getopt_long@plt>
   10e34:	cmn	r0, #1
   10e38:	bne	10e70 <__assert_fail@plt+0xf4>
   10e3c:	ldr	r3, [pc, #924]	; 111e0 <__assert_fail@plt+0x464>
   10e40:	ldr	r3, [r3]
   10e44:	cmp	fp, r3
   10e48:	beq	10fb0 <__assert_fail@plt+0x234>
   10e4c:	mov	r2, #5
   10e50:	ldr	r1, [pc, #908]	; 111e4 <__assert_fail@plt+0x468>
   10e54:	mov	r0, #0
   10e58:	bl	10bf0 <dcgettext@plt>
   10e5c:	mov	r1, #0
   10e60:	mov	r2, r0
   10e64:	mov	r0, r1
   10e68:	bl	10c50 <error@plt>
   10e6c:	b	10e84 <__assert_fail@plt+0x108>
   10e70:	cmp	r0, #83	; 0x53
   10e74:	beq	10eb0 <__assert_fail@plt+0x134>
   10e78:	bgt	10e8c <__assert_fail@plt+0x110>
   10e7c:	cmp	r0, #48	; 0x30
   10e80:	beq	10fa8 <__assert_fail@plt+0x22c>
   10e84:	mov	r0, #1
   10e88:	b	10fa4 <__assert_fail@plt+0x228>
   10e8c:	cmp	r0, #104	; 0x68
   10e90:	beq	10fa0 <__assert_fail@plt+0x224>
   10e94:	cmp	r0, #118	; 0x76
   10e98:	bne	10e84 <__assert_fail@plt+0x108>
   10e9c:	ldr	r0, [pc, #800]	; 111c4 <__assert_fail@plt+0x448>
   10ea0:	bl	113fc <__assert_fail@plt+0x680>
   10ea4:	mov	r0, #0
   10ea8:	add	sp, sp, #36	; 0x24
   10eac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10eb0:	bl	10cc8 <__errno_location@plt>
   10eb4:	ldr	r8, [r9]
   10eb8:	mov	r2, #10
   10ebc:	add	r1, sp, #28
   10ec0:	str	r4, [r0]
   10ec4:	str	r0, [sp, #12]
   10ec8:	mov	r0, r8
   10ecc:	bl	10b84 <strtol@plt>
   10ed0:	ldr	r3, [sp, #12]
   10ed4:	subs	r5, r0, #0
   10ed8:	bne	10f04 <__assert_fail@plt+0x188>
   10edc:	ldr	r2, [r9]
   10ee0:	ldr	r1, [sp, #28]
   10ee4:	cmp	r1, r2
   10ee8:	bne	10f04 <__assert_fail@plt+0x188>
   10eec:	mov	r2, #5
   10ef0:	ldr	r1, [pc, #752]	; 111e8 <__assert_fail@plt+0x46c>
   10ef4:	bl	10bf0 <dcgettext@plt>
   10ef8:	mov	r1, r5
   10efc:	mov	r2, r0
   10f00:	b	10dd8 <__assert_fail@plt+0x5c>
   10f04:	sub	r2, r5, #-2147483647	; 0x80000001
   10f08:	cmn	r2, #3
   10f0c:	bls	10f40 <__assert_fail@plt+0x1c4>
   10f10:	ldr	r3, [r3]
   10f14:	cmp	r3, #0
   10f18:	beq	10f40 <__assert_fail@plt+0x1c4>
   10f1c:	mov	r2, #5
   10f20:	ldr	r1, [pc, #708]	; 111ec <__assert_fail@plt+0x470>
   10f24:	mov	r0, #0
   10f28:	bl	10bf0 <dcgettext@plt>
   10f2c:	mov	r3, r8
   10f30:	mov	r2, r0
   10f34:	mov	r1, #0
   10f38:	mov	r0, #1
   10f3c:	bl	10c50 <error@plt>
   10f40:	ldr	r3, [sp, #28]
   10f44:	ldrb	r4, [r3]
   10f48:	cmp	r4, #0
   10f4c:	beq	10f7c <__assert_fail@plt+0x200>
   10f50:	mov	r2, #5
   10f54:	ldr	r1, [pc, #660]	; 111f0 <__assert_fail@plt+0x474>
   10f58:	mov	r0, #0
   10f5c:	bl	10bf0 <dcgettext@plt>
   10f60:	ldr	r3, [sp, #28]
   10f64:	mov	r1, #0
   10f68:	str	r3, [sp]
   10f6c:	mov	r3, r8
   10f70:	mov	r2, r0
   10f74:	mov	r0, #1
   10f78:	bl	10c50 <error@plt>
   10f7c:	mov	r8, #1
   10f80:	cmp	r5, r8
   10f84:	bls	10e18 <__assert_fail@plt+0x9c>
   10f88:	mov	r2, #5
   10f8c:	ldr	r1, [pc, #608]	; 111f4 <__assert_fail@plt+0x478>
   10f90:	mov	r0, r4
   10f94:	bl	10bf0 <dcgettext@plt>
   10f98:	mov	r3, r5
   10f9c:	b	10f30 <__assert_fail@plt+0x1b4>
   10fa0:	mov	r0, #0
   10fa4:	bl	11374 <__assert_fail@plt+0x5f8>
   10fa8:	str	r7, [sp, #8]
   10fac:	b	10e1c <__assert_fail@plt+0xa0>
   10fb0:	cmp	r8, #0
   10fb4:	ldr	r4, [pc, #572]	; 111f8 <__assert_fail@plt+0x47c>
   10fb8:	beq	11018 <__assert_fail@plt+0x29c>
   10fbc:	cmp	r5, #0
   10fc0:	ldr	r1, [r4]
   10fc4:	movne	r0, #49	; 0x31
   10fc8:	moveq	r0, #48	; 0x30
   10fcc:	bl	10d34 <fputc@plt>
   10fd0:	ldr	r1, [r4]
   10fd4:	mov	r0, #0
   10fd8:	bl	10d34 <fputc@plt>
   10fdc:	ldr	sl, [pc, #492]	; 111d0 <__assert_fail@plt+0x454>
   10fe0:	mov	r9, r7
   10fe4:	ldr	r3, [pc, #528]	; 111fc <__assert_fail@plt+0x480>
   10fe8:	ldr	r2, [sp, #8]
   10fec:	add	r1, sp, #24
   10ff0:	ldr	r3, [r3]
   10ff4:	add	r0, sp, #20
   10ff8:	bl	10d4c <getdelim@plt>
   10ffc:	cmp	r0, #0
   11000:	bgt	11048 <__assert_fail@plt+0x2cc>
   11004:	ldr	r0, [sp, #20]
   11008:	bl	13630 <__assert_fail@plt+0x28b4>
   1100c:	mov	r0, r6
   11010:	bl	13630 <__assert_fail@plt+0x28b4>
   11014:	b	10ea4 <__assert_fail@plt+0x128>
   11018:	ldr	r3, [r4]
   1101c:	mov	r2, #10
   11020:	mov	r1, #1
   11024:	ldr	r0, [pc, #468]	; 11200 <__assert_fail@plt+0x484>
   11028:	bl	10c14 <fwrite@plt>
   1102c:	cmp	r0, #10
   11030:	beq	10fdc <__assert_fail@plt+0x260>
   11034:	bl	10cc8 <__errno_location@plt>
   11038:	mov	r2, #5
   1103c:	ldr	r1, [pc, #448]	; 11204 <__assert_fail@plt+0x488>
   11040:	ldr	r4, [r0]
   11044:	b	10dc8 <__assert_fail@plt+0x4c>
   11048:	ldr	r3, [sp, #20]
   1104c:	sub	r0, r0, #1
   11050:	ldr	r1, [sp, #8]
   11054:	ldrb	r2, [r3, r0]
   11058:	cmp	r1, r2
   1105c:	moveq	r2, #0
   11060:	strbeq	r2, [r3, r0]
   11064:	beq	11088 <__assert_fail@plt+0x30c>
   11068:	mov	r2, #5
   1106c:	ldr	r1, [pc, #404]	; 11208 <__assert_fail@plt+0x48c>
   11070:	mov	r0, #0
   11074:	bl	10bf0 <dcgettext@plt>
   11078:	mov	r1, #0
   1107c:	mov	r2, r0
   11080:	mov	r0, r1
   11084:	bl	10c50 <error@plt>
   11088:	ldr	r3, [sp, #20]
   1108c:	mov	r5, r6
   11090:	sub	r3, r3, #1
   11094:	sub	ip, r6, #-2147483647	; 0x80000001
   11098:	mov	r2, r5
   1109c:	ldrb	r1, [r3, #1]!
   110a0:	ldrb	r0, [r2], #1
   110a4:	cmp	r0, #0
   110a8:	sub	r1, r1, r0
   110ac:	clz	r1, r1
   110b0:	lsr	r1, r1, #5
   110b4:	moveq	r1, #0
   110b8:	cmp	r1, #0
   110bc:	beq	110c8 <__assert_fail@plt+0x34c>
   110c0:	cmp	ip, r2
   110c4:	bne	1110c <__assert_fail@plt+0x390>
   110c8:	sub	r5, r5, r6
   110cc:	sub	fp, r5, r9
   110d0:	add	r2, fp, #32768	; 0x8000
   110d4:	cmp	r2, #65536	; 0x10000
   110d8:	rsbcs	fp, r9, #0
   110dc:	movcs	r5, r7
   110e0:	cmp	r8, #0
   110e4:	bne	11174 <__assert_fail@plt+0x3f8>
   110e8:	add	r2, fp, #127	; 0x7f
   110ec:	cmp	r2, #254	; 0xfe
   110f0:	ldr	r1, [r4]
   110f4:	bls	11164 <__assert_fail@plt+0x3e8>
   110f8:	mov	r0, #128	; 0x80
   110fc:	bl	10d40 <putc@plt>
   11100:	cmn	r0, #1
   11104:	bne	11114 <__assert_fail@plt+0x398>
   11108:	bl	11344 <__assert_fail@plt+0x5c8>
   1110c:	mov	r5, r2
   11110:	b	11098 <__assert_fail@plt+0x31c>
   11114:	cmp	fp, #32768	; 0x8000
   11118:	ldr	r8, [r4]
   1111c:	blt	11134 <__assert_fail@plt+0x3b8>
   11120:	ldr	r3, [pc, #228]	; 1120c <__assert_fail@plt+0x490>
   11124:	ldr	r1, [pc, #228]	; 11210 <__assert_fail@plt+0x494>
   11128:	ldr	r0, [pc, #228]	; 11214 <__assert_fail@plt+0x498>
   1112c:	mov	r2, #104	; 0x68
   11130:	bl	10d7c <__assert_fail@plt>
   11134:	cmn	fp, #32768	; 0x8000
   11138:	ldrlt	r3, [pc, #204]	; 1120c <__assert_fail@plt+0x490>
   1113c:	movlt	r2, #105	; 0x69
   11140:	ldrlt	r1, [pc, #200]	; 11210 <__assert_fail@plt+0x494>
   11144:	ldrlt	r0, [pc, #204]	; 11218 <__assert_fail@plt+0x49c>
   11148:	blt	11130 <__assert_fail@plt+0x3b4>
   1114c:	mov	r1, r8
   11150:	asr	r0, fp, #8
   11154:	bl	10d40 <putc@plt>
   11158:	cmn	r0, #1
   1115c:	beq	11108 <__assert_fail@plt+0x38c>
   11160:	mov	r1, r8
   11164:	mov	r0, fp
   11168:	bl	10d40 <putc@plt>
   1116c:	cmn	r0, #1
   11170:	beq	11108 <__assert_fail@plt+0x38c>
   11174:	ldr	r0, [sp, #20]
   11178:	ldr	r1, [r4]
   1117c:	add	r0, r0, r5
   11180:	bl	10d58 <fputs@plt>
   11184:	cmn	r0, #1
   11188:	beq	11108 <__assert_fail@plt+0x38c>
   1118c:	ldr	r1, [r4]
   11190:	mov	r0, #0
   11194:	bl	10d40 <putc@plt>
   11198:	cmn	r0, #1
   1119c:	beq	11108 <__assert_fail@plt+0x38c>
   111a0:	ldr	r3, [sp, #20]
   111a4:	ldr	r2, [sp, #24]
   111a8:	str	r6, [sp, #20]
   111ac:	str	sl, [sp, #24]
   111b0:	mov	r8, r7
   111b4:	mov	r9, r5
   111b8:	mov	sl, r2
   111bc:	mov	r6, r3
   111c0:	b	10fe4 <__assert_fail@plt+0x268>
   111c4:	andeq	r3, r1, sp, ror #30
   111c8:	andeq	r1, r1, r8, lsr #10
   111cc:	andeq	r3, r1, r4, ror pc
   111d0:	andeq	r0, r0, r2, lsl #8
   111d4:	andeq	r5, r2, r8, lsr r1
   111d8:			; <UNDEFINED> instruction: 0x00013eb8
   111dc:	andeq	r4, r1, sp, asr r0
   111e0:	andeq	r5, r2, r0, lsr #2
   111e4:	andeq	r4, r1, r3, rrx
   111e8:	muleq	r1, r7, pc	; <UNPREDICTABLE>
   111ec:	ldrdeq	r3, [r1], -r2
   111f0:	andeq	r4, r1, r6
   111f4:	andeq	r4, r1, r2, lsr r0
   111f8:	andeq	r5, r2, r4, lsr r1
   111fc:	andeq	r5, r2, r0, lsr r1
   11200:	strdeq	r3, [r1], -r8
   11204:	andeq	r4, r1, r9, ror r0
   11208:	muleq	r1, ip, r0
   1120c:	andeq	r3, r1, r2, lsl #30
   11210:	andeq	r4, r1, r9, asr #1
   11214:	ldrdeq	r4, [r1], -r2
   11218:	andeq	r4, r1, r0, ror #1
   1121c:	mov	fp, #0
   11220:	mov	lr, #0
   11224:	pop	{r1}		; (ldr r1, [sp], #4)
   11228:	mov	r2, sp
   1122c:	push	{r2}		; (str r2, [sp, #-4]!)
   11230:	push	{r0}		; (str r0, [sp, #-4]!)
   11234:	ldr	ip, [pc, #16]	; 1124c <__assert_fail@plt+0x4d0>
   11238:	push	{ip}		; (str ip, [sp, #-4]!)
   1123c:	ldr	r0, [pc, #12]	; 11250 <__assert_fail@plt+0x4d4>
   11240:	ldr	r3, [pc, #12]	; 11254 <__assert_fail@plt+0x4d8>
   11244:	bl	10c68 <__libc_start_main@plt>
   11248:	bl	10d70 <abort@plt>
   1124c:	muleq	r1, r0, lr
   11250:	andeq	r0, r1, r8, lsl #27
   11254:	andeq	r3, r1, r0, lsr lr
   11258:	ldr	r3, [pc, #20]	; 11274 <__assert_fail@plt+0x4f8>
   1125c:	ldr	r2, [pc, #20]	; 11278 <__assert_fail@plt+0x4fc>
   11260:	add	r3, pc, r3
   11264:	ldr	r2, [r3, r2]
   11268:	cmp	r2, #0
   1126c:	bxeq	lr
   11270:	b	10c80 <__gmon_start__@plt>
   11274:	muleq	r1, r8, sp
   11278:	andeq	r0, r0, r4, asr #1
   1127c:	ldr	r3, [pc, #28]	; 112a0 <__assert_fail@plt+0x524>
   11280:	ldr	r0, [pc, #28]	; 112a4 <__assert_fail@plt+0x528>
   11284:	sub	r3, r3, r0
   11288:	cmp	r3, #6
   1128c:	bxls	lr
   11290:	ldr	r3, [pc, #16]	; 112a8 <__assert_fail@plt+0x52c>
   11294:	cmp	r3, #0
   11298:	bxeq	lr
   1129c:	bx	r3
   112a0:	andeq	r5, r2, fp, lsl r1
   112a4:	andeq	r5, r2, r8, lsl r1
   112a8:	andeq	r0, r0, r0
   112ac:	ldr	r1, [pc, #36]	; 112d8 <__assert_fail@plt+0x55c>
   112b0:	ldr	r0, [pc, #36]	; 112dc <__assert_fail@plt+0x560>
   112b4:	sub	r1, r1, r0
   112b8:	asr	r1, r1, #2
   112bc:	add	r1, r1, r1, lsr #31
   112c0:	asrs	r1, r1, #1
   112c4:	bxeq	lr
   112c8:	ldr	r3, [pc, #16]	; 112e0 <__assert_fail@plt+0x564>
   112cc:	cmp	r3, #0
   112d0:	bxeq	lr
   112d4:	bx	r3
   112d8:	andeq	r5, r2, r8, lsl r1
   112dc:	andeq	r5, r2, r8, lsl r1
   112e0:	andeq	r0, r0, r0
   112e4:	push	{r4, lr}
   112e8:	ldr	r4, [pc, #24]	; 11308 <__assert_fail@plt+0x58c>
   112ec:	ldrb	r3, [r4]
   112f0:	cmp	r3, #0
   112f4:	popne	{r4, pc}
   112f8:	bl	1127c <__assert_fail@plt+0x500>
   112fc:	mov	r3, #1
   11300:	strb	r3, [r4]
   11304:	pop	{r4, pc}
   11308:	andeq	r5, r2, ip, lsr r1
   1130c:	ldr	r0, [pc, #40]	; 1133c <__assert_fail@plt+0x5c0>
   11310:	ldr	r3, [r0]
   11314:	cmp	r3, #0
   11318:	bne	11320 <__assert_fail@plt+0x5a4>
   1131c:	b	112ac <__assert_fail@plt+0x530>
   11320:	ldr	r3, [pc, #24]	; 11340 <__assert_fail@plt+0x5c4>
   11324:	cmp	r3, #0
   11328:	beq	1131c <__assert_fail@plt+0x5a0>
   1132c:	push	{r4, lr}
   11330:	blx	r3
   11334:	pop	{r4, lr}
   11338:	b	112ac <__assert_fail@plt+0x530>
   1133c:	andeq	r4, r2, r4, lsl pc
   11340:	andeq	r0, r0, r0
   11344:	push	{r4, lr}
   11348:	bl	10cc8 <__errno_location@plt>
   1134c:	mov	r2, #5
   11350:	ldr	r1, [pc, #24]	; 11370 <__assert_fail@plt+0x5f4>
   11354:	ldr	r4, [r0]
   11358:	mov	r0, #0
   1135c:	bl	10bf0 <dcgettext@plt>
   11360:	mov	r1, r4
   11364:	mov	r2, r0
   11368:	mov	r0, #1
   1136c:	bl	10c50 <error@plt>
   11370:	andeq	r3, r1, ip, lsl #30
   11374:	subs	r5, r0, #0
   11378:	push	{r7, lr}
   1137c:	ldr	r4, [pc, #100]	; 113e8 <__assert_fail@plt+0x66c>
   11380:	beq	113b4 <__assert_fail@plt+0x638>
   11384:	ldr	r3, [pc, #96]	; 113ec <__assert_fail@plt+0x670>
   11388:	mov	r2, #5
   1138c:	ldr	r1, [pc, #92]	; 113f0 <__assert_fail@plt+0x674>
   11390:	mov	r0, #0
   11394:	ldr	r6, [r3]
   11398:	bl	10bf0 <dcgettext@plt>
   1139c:	ldr	r2, [r4]
   113a0:	mov	r1, r0
   113a4:	mov	r0, r6
   113a8:	bl	10cbc <fprintf@plt>
   113ac:	mov	r0, r5
   113b0:	bl	10ca4 <exit@plt>
   113b4:	ldr	r6, [pc, #56]	; 113f4 <__assert_fail@plt+0x678>
   113b8:	mov	r2, #5
   113bc:	ldr	r1, [pc, #52]	; 113f8 <__assert_fail@plt+0x67c>
   113c0:	ldr	r7, [r6]
   113c4:	bl	10bf0 <dcgettext@plt>
   113c8:	ldr	r2, [r4]
   113cc:	mov	r1, r0
   113d0:	mov	r0, r7
   113d4:	bl	10cbc <fprintf@plt>
   113d8:	ldr	r1, [r4]
   113dc:	ldr	r0, [r6]
   113e0:	bl	114a0 <__assert_fail@plt+0x724>
   113e4:	b	113ac <__assert_fail@plt+0x630>
   113e8:	andeq	r5, r2, r8, asr #2
   113ec:	andeq	r5, r2, r8, lsr #2
   113f0:	andeq	r3, r1, r8, lsl pc
   113f4:	andeq	r5, r2, r4, lsr r1
   113f8:	andeq	r3, r1, pc, lsr pc
   113fc:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   11400:	mov	r5, r0
   11404:	ldr	r3, [pc, #120]	; 11484 <__assert_fail@plt+0x708>
   11408:	ldr	r0, [r3]
   1140c:	bl	135e0 <__assert_fail@plt+0x2864>
   11410:	ldr	r3, [pc, #112]	; 11488 <__assert_fail@plt+0x70c>
   11414:	mov	r2, #5
   11418:	ldr	r1, [pc, #108]	; 1148c <__assert_fail@plt+0x710>
   1141c:	ldr	r4, [r3]
   11420:	ldr	r3, [pc, #104]	; 11490 <__assert_fail@plt+0x714>
   11424:	mov	r0, #0
   11428:	ldr	r6, [r3]
   1142c:	bl	10bf0 <dcgettext@plt>
   11430:	mov	r2, #5
   11434:	ldr	r1, [pc, #88]	; 11494 <__assert_fail@plt+0x718>
   11438:	mov	r7, r0
   1143c:	mov	r0, #0
   11440:	bl	10bf0 <dcgettext@plt>
   11444:	mov	r2, #5
   11448:	ldr	r1, [pc, #72]	; 11498 <__assert_fail@plt+0x71c>
   1144c:	mov	r8, r0
   11450:	mov	r0, #0
   11454:	bl	10bf0 <dcgettext@plt>
   11458:	mov	r3, #0
   1145c:	str	r3, [sp, #12]
   11460:	stm	sp, {r7, r8}
   11464:	mov	r3, r6
   11468:	ldr	r2, [pc, #44]	; 1149c <__assert_fail@plt+0x720>
   1146c:	mov	r1, r5
   11470:	str	r0, [sp, #8]
   11474:	mov	r0, r4
   11478:	bl	13014 <__assert_fail@plt+0x2298>
   1147c:	add	sp, sp, #16
   11480:	pop	{r4, r5, r6, r7, r8, pc}
   11484:	andeq	r5, r2, r8, lsr #2
   11488:	andeq	r5, r2, r4, lsr r1
   1148c:	andeq	r4, r1, r0, lsl #2
   11490:	ldrdeq	r5, [r2], -r0
   11494:	andeq	r4, r1, pc, lsl #2
   11498:	andeq	r4, r1, lr, lsl r1
   1149c:	andeq	r4, r1, fp, lsr #2
   114a0:	push	{r4, r5, lr}
   114a4:	mov	r2, #5
   114a8:	sub	sp, sp, #20
   114ac:	mov	r4, r0
   114b0:	mov	r5, r1
   114b4:	mov	r0, #0
   114b8:	ldr	r1, [pc, #52]	; 114f4 <__assert_fail@plt+0x778>
   114bc:	bl	10bf0 <dcgettext@plt>
   114c0:	ldr	r3, [pc, #48]	; 114f8 <__assert_fail@plt+0x77c>
   114c4:	ldr	r2, [pc, #48]	; 114fc <__assert_fail@plt+0x780>
   114c8:	str	r3, [sp, #8]
   114cc:	ldr	r3, [pc, #44]	; 11500 <__assert_fail@plt+0x784>
   114d0:	str	r3, [sp, #4]
   114d4:	ldr	r3, [pc, #40]	; 11504 <__assert_fail@plt+0x788>
   114d8:	str	r3, [sp]
   114dc:	mov	r3, r5
   114e0:	mov	r1, r0
   114e4:	mov	r0, r4
   114e8:	bl	10cbc <fprintf@plt>
   114ec:	add	sp, sp, #20
   114f0:	pop	{r4, r5, pc}
   114f4:	andeq	r4, r1, r7, asr #2
   114f8:	andeq	r4, r1, ip, lsr r2
   114fc:	andeq	r4, r1, r5, lsl r2
   11500:	andeq	r4, r1, r2, asr r2
   11504:	andeq	r4, r1, fp, lsr #2
   11508:	ldr	r3, [pc, #4]	; 11514 <__assert_fail@plt+0x798>
   1150c:	str	r0, [r3]
   11510:	bx	lr
   11514:	andeq	r5, r2, r0, asr #2
   11518:	ldr	r3, [pc, #4]	; 11524 <__assert_fail@plt+0x7a8>
   1151c:	strb	r0, [r3, #4]
   11520:	bx	lr
   11524:	andeq	r5, r2, r0, asr #2
   11528:	ldr	r3, [pc, #192]	; 115f0 <__assert_fail@plt+0x874>
   1152c:	push	{r0, r1, r4, r5, r6, lr}
   11530:	ldr	r0, [r3]
   11534:	bl	13850 <__assert_fail@plt+0x2ad4>
   11538:	cmp	r0, #0
   1153c:	beq	115d4 <__assert_fail@plt+0x858>
   11540:	ldr	r3, [pc, #172]	; 115f4 <__assert_fail@plt+0x878>
   11544:	mov	r4, r3
   11548:	ldrb	r2, [r3, #4]
   1154c:	cmp	r2, #0
   11550:	beq	11564 <__assert_fail@plt+0x7e8>
   11554:	bl	10cc8 <__errno_location@plt>
   11558:	ldr	r3, [r0]
   1155c:	cmp	r3, #32
   11560:	beq	115d4 <__assert_fail@plt+0x858>
   11564:	mov	r2, #5
   11568:	ldr	r1, [pc, #136]	; 115f8 <__assert_fail@plt+0x87c>
   1156c:	mov	r0, #0
   11570:	bl	10bf0 <dcgettext@plt>
   11574:	ldr	r4, [r4]
   11578:	cmp	r4, #0
   1157c:	mov	r5, r0
   11580:	beq	115b8 <__assert_fail@plt+0x83c>
   11584:	bl	10cc8 <__errno_location@plt>
   11588:	ldr	r6, [r0]
   1158c:	mov	r0, r4
   11590:	bl	12aec <__assert_fail@plt+0x1d70>
   11594:	str	r5, [sp]
   11598:	ldr	r2, [pc, #92]	; 115fc <__assert_fail@plt+0x880>
   1159c:	mov	r1, r6
   115a0:	mov	r3, r0
   115a4:	mov	r0, #0
   115a8:	bl	10c50 <error@plt>
   115ac:	ldr	r3, [pc, #76]	; 11600 <__assert_fail@plt+0x884>
   115b0:	ldr	r0, [r3]
   115b4:	bl	10bc0 <_exit@plt>
   115b8:	bl	10cc8 <__errno_location@plt>
   115bc:	mov	r3, r5
   115c0:	ldr	r2, [pc, #60]	; 11604 <__assert_fail@plt+0x888>
   115c4:	ldr	r1, [r0]
   115c8:	mov	r0, r4
   115cc:	bl	10c50 <error@plt>
   115d0:	b	115ac <__assert_fail@plt+0x830>
   115d4:	ldr	r3, [pc, #44]	; 11608 <__assert_fail@plt+0x88c>
   115d8:	ldr	r0, [r3]
   115dc:	bl	13850 <__assert_fail@plt+0x2ad4>
   115e0:	cmp	r0, #0
   115e4:	bne	115ac <__assert_fail@plt+0x830>
   115e8:	add	sp, sp, #8
   115ec:	pop	{r4, r5, r6, pc}
   115f0:	andeq	r5, r2, r4, lsr r1
   115f4:	andeq	r5, r2, r0, asr #2
   115f8:	andeq	r3, r1, ip, lsl #30
   115fc:	andeq	r4, r1, r1, lsl #5
   11600:	ldrdeq	r5, [r2], -r4
   11604:	andeq	r4, r1, r5, lsl #5
   11608:	andeq	r5, r2, r8, lsr #2
   1160c:	push	{r4, r5, r6, lr}
   11610:	subs	r5, r0, #0
   11614:	bne	1162c <__assert_fail@plt+0x8b0>
   11618:	ldr	r3, [pc, #124]	; 1169c <__assert_fail@plt+0x920>
   1161c:	ldr	r0, [pc, #124]	; 116a0 <__assert_fail@plt+0x924>
   11620:	ldr	r1, [r3]
   11624:	bl	10d58 <fputs@plt>
   11628:	bl	10d70 <abort@plt>
   1162c:	mov	r1, #47	; 0x2f
   11630:	bl	10d1c <strrchr@plt>
   11634:	cmp	r0, #0
   11638:	addne	r4, r0, #1
   1163c:	moveq	r4, r5
   11640:	sub	r3, r4, r5
   11644:	cmp	r3, #6
   11648:	ble	11688 <__assert_fail@plt+0x90c>
   1164c:	mov	r2, #7
   11650:	ldr	r1, [pc, #76]	; 116a4 <__assert_fail@plt+0x928>
   11654:	sub	r0, r4, #7
   11658:	bl	10d64 <strncmp@plt>
   1165c:	cmp	r0, #0
   11660:	bne	11688 <__assert_fail@plt+0x90c>
   11664:	mov	r2, #3
   11668:	ldr	r1, [pc, #56]	; 116a8 <__assert_fail@plt+0x92c>
   1166c:	mov	r0, r4
   11670:	bl	10d64 <strncmp@plt>
   11674:	cmp	r0, #0
   11678:	movne	r5, r4
   1167c:	ldreq	r3, [pc, #40]	; 116ac <__assert_fail@plt+0x930>
   11680:	addeq	r5, r4, #3
   11684:	streq	r5, [r3]
   11688:	ldr	r3, [pc, #32]	; 116b0 <__assert_fail@plt+0x934>
   1168c:	str	r5, [r3]
   11690:	ldr	r3, [pc, #28]	; 116b4 <__assert_fail@plt+0x938>
   11694:	str	r5, [r3]
   11698:	pop	{r4, r5, r6, pc}
   1169c:	andeq	r5, r2, r8, lsr #2
   116a0:	andeq	r4, r1, r8, lsl #5
   116a4:	andeq	r4, r1, r0, asr #5
   116a8:	andeq	r4, r1, r8, asr #5
   116ac:	andeq	r5, r2, r8, lsl r1
   116b0:	andeq	r5, r2, r8, asr #2
   116b4:	andeq	r5, r2, ip, lsl r1
   116b8:	push	{r4, r5, r6, lr}
   116bc:	mov	r2, #48	; 0x30
   116c0:	mov	r5, r1
   116c4:	mov	r1, #0
   116c8:	mov	r4, r0
   116cc:	bl	10ce0 <memset@plt>
   116d0:	cmp	r5, #10
   116d4:	bne	116dc <__assert_fail@plt+0x960>
   116d8:	bl	10d70 <abort@plt>
   116dc:	str	r5, [r4]
   116e0:	mov	r0, r4
   116e4:	pop	{r4, r5, r6, pc}
   116e8:	push	{r4, r5, r6, lr}
   116ec:	mov	r4, r0
   116f0:	mov	r5, r1
   116f4:	bl	1391c <__assert_fail@plt+0x2ba0>
   116f8:	ldrb	r3, [r0]
   116fc:	bic	r3, r3, #32
   11700:	cmp	r3, #85	; 0x55
   11704:	bne	11774 <__assert_fail@plt+0x9f8>
   11708:	ldrb	r3, [r0, #1]
   1170c:	bic	r3, r3, #32
   11710:	cmp	r3, #84	; 0x54
   11714:	bne	1174c <__assert_fail@plt+0x9d0>
   11718:	ldrb	r3, [r0, #2]
   1171c:	bic	r3, r3, #32
   11720:	cmp	r3, #70	; 0x46
   11724:	bne	1174c <__assert_fail@plt+0x9d0>
   11728:	ldrb	r3, [r0, #3]
   1172c:	cmp	r3, #45	; 0x2d
   11730:	bne	1174c <__assert_fail@plt+0x9d0>
   11734:	ldrb	r3, [r0, #4]
   11738:	cmp	r3, #56	; 0x38
   1173c:	bne	1174c <__assert_fail@plt+0x9d0>
   11740:	ldrb	r3, [r0, #5]
   11744:	cmp	r3, #0
   11748:	beq	11760 <__assert_fail@plt+0x9e4>
   1174c:	ldr	r1, [pc, #144]	; 117e4 <__assert_fail@plt+0xa68>
   11750:	ldr	r0, [pc, #144]	; 117e8 <__assert_fail@plt+0xa6c>
   11754:	cmp	r5, #9
   11758:	movne	r0, r1
   1175c:	pop	{r4, r5, r6, pc}
   11760:	ldrb	r3, [r4]
   11764:	ldr	r1, [pc, #128]	; 117ec <__assert_fail@plt+0xa70>
   11768:	ldr	r0, [pc, #128]	; 117f0 <__assert_fail@plt+0xa74>
   1176c:	cmp	r3, #96	; 0x60
   11770:	b	11758 <__assert_fail@plt+0x9dc>
   11774:	cmp	r3, #71	; 0x47
   11778:	bne	1174c <__assert_fail@plt+0x9d0>
   1177c:	ldrb	r3, [r0, #1]
   11780:	bic	r3, r3, #32
   11784:	cmp	r3, #66	; 0x42
   11788:	bne	1174c <__assert_fail@plt+0x9d0>
   1178c:	ldrb	r3, [r0, #2]
   11790:	cmp	r3, #49	; 0x31
   11794:	bne	1174c <__assert_fail@plt+0x9d0>
   11798:	ldrb	r3, [r0, #3]
   1179c:	cmp	r3, #56	; 0x38
   117a0:	bne	1174c <__assert_fail@plt+0x9d0>
   117a4:	ldrb	r3, [r0, #4]
   117a8:	cmp	r3, #48	; 0x30
   117ac:	bne	1174c <__assert_fail@plt+0x9d0>
   117b0:	ldrb	r3, [r0, #5]
   117b4:	cmp	r3, #51	; 0x33
   117b8:	bne	1174c <__assert_fail@plt+0x9d0>
   117bc:	ldrb	r3, [r0, #6]
   117c0:	cmp	r3, #48	; 0x30
   117c4:	bne	1174c <__assert_fail@plt+0x9d0>
   117c8:	ldrb	r3, [r0, #7]
   117cc:	cmp	r3, #0
   117d0:	bne	1174c <__assert_fail@plt+0x9d0>
   117d4:	ldrb	r3, [r4]
   117d8:	ldr	r1, [pc, #20]	; 117f4 <__assert_fail@plt+0xa78>
   117dc:	ldr	r0, [pc, #20]	; 117f8 <__assert_fail@plt+0xa7c>
   117e0:	b	1176c <__assert_fail@plt+0x9f0>
   117e4:	andeq	r4, r1, r1, lsr r3
   117e8:	andeq	r4, r1, pc, lsr #6
   117ec:	andeq	r4, r1, r4, lsr #6
   117f0:	andeq	r4, r1, r0, lsr #6
   117f4:	andeq	r4, r1, ip, lsr #6
   117f8:	andeq	r4, r1, r8, lsr #6
   117fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11800:	sub	sp, sp, #108	; 0x6c
   11804:	mov	r8, r0
   11808:	str	r3, [sp, #36]	; 0x24
   1180c:	mov	r5, r1
   11810:	str	r2, [sp, #44]	; 0x2c
   11814:	ldr	sl, [sp, #144]	; 0x90
   11818:	bl	10c2c <__ctype_get_mb_cur_max@plt>
   1181c:	ldr	r3, [sp, #148]	; 0x94
   11820:	mov	r7, #0
   11824:	str	r7, [sp, #48]	; 0x30
   11828:	lsr	r6, r3, #1
   1182c:	and	r6, r6, #1
   11830:	mov	r3, #1
   11834:	str	r3, [sp, #72]	; 0x48
   11838:	str	r7, [sp, #24]
   1183c:	str	r7, [sp, #32]
   11840:	str	r7, [sp, #40]	; 0x28
   11844:	str	r7, [sp, #60]	; 0x3c
   11848:	str	r0, [sp, #76]	; 0x4c
   1184c:	cmp	sl, #10
   11850:	ldrls	pc, [pc, sl, lsl #2]
   11854:	b	11a90 <__assert_fail@plt+0xd14>
   11858:	andeq	r1, r1, r4, lsl #17
   1185c:	andeq	r2, r1, r8, lsl r5
   11860:	andeq	r1, r1, ip, asr sl
   11864:	andeq	r1, r1, r8, lsr #21
   11868:	andeq	r1, r1, r8, lsr sl
   1186c:	muleq	r1, r0, r8
   11870:	strdeq	r2, [r1], -r8
   11874:	muleq	r1, r4, sl
   11878:	andeq	r1, r1, r8, lsl #19
   1187c:	andeq	r1, r1, r8, lsl #19
   11880:	andeq	r1, r1, r8, lsl #19
   11884:	mov	r6, #0
   11888:	mov	r4, #0
   1188c:	b	118bc <__assert_fail@plt+0xb40>
   11890:	cmp	r6, #0
   11894:	bne	11ab8 <__assert_fail@plt+0xd3c>
   11898:	cmp	r5, #0
   1189c:	movne	r3, #34	; 0x22
   118a0:	strbne	r3, [r8]
   118a4:	mov	r3, #1
   118a8:	str	r3, [sp, #24]
   118ac:	str	r3, [sp, #32]
   118b0:	mov	r4, #1
   118b4:	ldr	r3, [pc, #3172]	; 12520 <__assert_fail@plt+0x17a4>
   118b8:	str	r3, [sp, #40]	; 0x28
   118bc:	mov	r9, r5
   118c0:	mov	r3, #0
   118c4:	str	r7, [sp, #68]	; 0x44
   118c8:	str	r3, [sp, #28]
   118cc:	ldr	r3, [sp, #36]	; 0x24
   118d0:	cmn	r3, #1
   118d4:	bne	12464 <__assert_fail@plt+0x16e8>
   118d8:	ldr	r3, [sp, #44]	; 0x2c
   118dc:	ldr	r2, [sp, #28]
   118e0:	ldrb	r3, [r3, r2]
   118e4:	adds	r3, r3, #0
   118e8:	movne	r3, #1
   118ec:	str	r3, [sp, #52]	; 0x34
   118f0:	ldr	r3, [sp, #52]	; 0x34
   118f4:	cmp	r3, #0
   118f8:	bne	11ae0 <__assert_fail@plt+0xd64>
   118fc:	sub	r2, sl, #2
   11900:	clz	r2, r2
   11904:	lsr	r2, r2, #5
   11908:	and	r3, r6, r2
   1190c:	cmp	r4, #0
   11910:	movne	r3, #0
   11914:	andeq	r3, r3, #1
   11918:	cmp	r3, #0
   1191c:	bne	11ca8 <__assert_fail@plt+0xf2c>
   11920:	eor	r3, r6, #1
   11924:	ands	r2, r2, r3
   11928:	beq	1249c <__assert_fail@plt+0x1720>
   1192c:	ldr	r3, [sp, #68]	; 0x44
   11930:	cmp	r3, #0
   11934:	beq	124d4 <__assert_fail@plt+0x1758>
   11938:	ldr	r3, [sp, #72]	; 0x48
   1193c:	cmp	r3, #0
   11940:	beq	12478 <__assert_fail@plt+0x16fc>
   11944:	ldr	r3, [sp, #160]	; 0xa0
   11948:	ldr	r2, [sp, #44]	; 0x2c
   1194c:	str	r3, [sp, #16]
   11950:	ldr	r3, [sp, #156]	; 0x9c
   11954:	ldr	r1, [sp, #60]	; 0x3c
   11958:	str	r3, [sp, #12]
   1195c:	ldr	r3, [sp, #152]	; 0x98
   11960:	str	r3, [sp, #8]
   11964:	ldr	r3, [sp, #148]	; 0x94
   11968:	str	r3, [sp, #4]
   1196c:	mov	r3, #5
   11970:	str	r3, [sp]
   11974:	ldr	r3, [sp, #36]	; 0x24
   11978:	mov	r0, r8
   1197c:	bl	117fc <__assert_fail@plt+0xa80>
   11980:	mov	r4, r0
   11984:	b	124c8 <__assert_fail@plt+0x174c>
   11988:	cmp	sl, #10
   1198c:	beq	119e8 <__assert_fail@plt+0xc6c>
   11990:	ldr	r4, [pc, #2956]	; 12524 <__assert_fail@plt+0x17a8>
   11994:	mov	r2, #5
   11998:	mov	r1, r4
   1199c:	mov	r0, #0
   119a0:	bl	10bf0 <dcgettext@plt>
   119a4:	cmp	r0, r4
   119a8:	str	r0, [sp, #156]	; 0x9c
   119ac:	bne	119bc <__assert_fail@plt+0xc40>
   119b0:	mov	r1, sl
   119b4:	bl	116e8 <__assert_fail@plt+0x96c>
   119b8:	str	r0, [sp, #156]	; 0x9c
   119bc:	ldr	r4, [pc, #2916]	; 12528 <__assert_fail@plt+0x17ac>
   119c0:	mov	r2, #5
   119c4:	mov	r1, r4
   119c8:	mov	r0, #0
   119cc:	bl	10bf0 <dcgettext@plt>
   119d0:	cmp	r0, r4
   119d4:	str	r0, [sp, #160]	; 0xa0
   119d8:	bne	119e8 <__assert_fail@plt+0xc6c>
   119dc:	mov	r1, sl
   119e0:	bl	116e8 <__assert_fail@plt+0x96c>
   119e4:	str	r0, [sp, #160]	; 0xa0
   119e8:	cmp	r6, #0
   119ec:	moveq	r4, r6
   119f0:	beq	11a08 <__assert_fail@plt+0xc8c>
   119f4:	mov	r4, #0
   119f8:	b	11a18 <__assert_fail@plt+0xc9c>
   119fc:	cmp	r5, r4
   11a00:	strbhi	r3, [r8, r4]
   11a04:	add	r4, r4, #1
   11a08:	ldr	r3, [sp, #156]	; 0x9c
   11a0c:	ldrb	r3, [r3, r4]
   11a10:	cmp	r3, #0
   11a14:	bne	119fc <__assert_fail@plt+0xc80>
   11a18:	ldr	r0, [sp, #160]	; 0xa0
   11a1c:	bl	10cb0 <strlen@plt>
   11a20:	ldr	r3, [sp, #160]	; 0xa0
   11a24:	str	r3, [sp, #40]	; 0x28
   11a28:	mov	r3, #1
   11a2c:	str	r3, [sp, #24]
   11a30:	str	r0, [sp, #32]
   11a34:	b	118bc <__assert_fail@plt+0xb40>
   11a38:	mov	r3, #1
   11a3c:	cmp	r6, #0
   11a40:	streq	r3, [sp, #24]
   11a44:	beq	11a64 <__assert_fail@plt+0xce8>
   11a48:	str	r3, [sp, #32]
   11a4c:	ldr	r3, [pc, #2772]	; 12528 <__assert_fail@plt+0x17ac>
   11a50:	mov	r4, #0
   11a54:	str	r3, [sp, #40]	; 0x28
   11a58:	b	11a88 <__assert_fail@plt+0xd0c>
   11a5c:	cmp	r6, #0
   11a60:	bne	11ad0 <__assert_fail@plt+0xd54>
   11a64:	cmp	r5, #0
   11a68:	movne	r3, #39	; 0x27
   11a6c:	strbne	r3, [r8]
   11a70:	mov	r3, #1
   11a74:	str	r3, [sp, #32]
   11a78:	mov	r6, #0
   11a7c:	ldr	r3, [pc, #2724]	; 12528 <__assert_fail@plt+0x17ac>
   11a80:	mov	r4, #1
   11a84:	str	r3, [sp, #40]	; 0x28
   11a88:	mov	sl, #2
   11a8c:	b	118bc <__assert_fail@plt+0xb40>
   11a90:	bl	10d70 <abort@plt>
   11a94:	mov	r6, #0
   11a98:	mov	r3, #1
   11a9c:	str	r3, [sp, #24]
   11aa0:	mov	r4, r6
   11aa4:	b	118bc <__assert_fail@plt+0xb40>
   11aa8:	mov	r6, #1
   11aac:	str	r6, [sp, #24]
   11ab0:	str	r6, [sp, #32]
   11ab4:	b	11a4c <__assert_fail@plt+0xcd0>
   11ab8:	mov	r3, #1
   11abc:	str	r3, [sp, #32]
   11ac0:	ldr	r3, [pc, #2648]	; 12520 <__assert_fail@plt+0x17a4>
   11ac4:	str	r6, [sp, #24]
   11ac8:	str	r3, [sp, #40]	; 0x28
   11acc:	b	11888 <__assert_fail@plt+0xb0c>
   11ad0:	mov	r3, #1
   11ad4:	str	r3, [sp, #32]
   11ad8:	ldr	r3, [pc, #2632]	; 12528 <__assert_fail@plt+0x17ac>
   11adc:	b	11ac8 <__assert_fail@plt+0xd4c>
   11ae0:	ldr	r3, [sp, #32]
   11ae4:	ldr	fp, [sp, #24]
   11ae8:	cmp	sl, #2
   11aec:	moveq	fp, #0
   11af0:	andne	fp, fp, #1
   11af4:	adds	r5, r3, #0
   11af8:	movne	r5, #1
   11afc:	ands	r3, r5, fp
   11b00:	str	r3, [sp, #64]	; 0x40
   11b04:	beq	11bd4 <__assert_fail@plt+0xe58>
   11b08:	ldr	r2, [sp, #32]
   11b0c:	ldr	r3, [sp, #28]
   11b10:	add	r7, r3, r2
   11b14:	mov	r3, r2
   11b18:	ldr	r2, [sp, #36]	; 0x24
   11b1c:	cmp	r3, #1
   11b20:	movls	r3, #0
   11b24:	movhi	r3, #1
   11b28:	cmn	r2, #1
   11b2c:	movne	r3, #0
   11b30:	cmp	r3, #0
   11b34:	beq	11b44 <__assert_fail@plt+0xdc8>
   11b38:	ldr	r0, [sp, #44]	; 0x2c
   11b3c:	bl	10cb0 <strlen@plt>
   11b40:	str	r0, [sp, #36]	; 0x24
   11b44:	ldr	r3, [sp, #36]	; 0x24
   11b48:	cmp	r3, r7
   11b4c:	bcc	11bcc <__assert_fail@plt+0xe50>
   11b50:	ldr	r3, [sp, #44]	; 0x2c
   11b54:	ldr	r0, [sp, #28]
   11b58:	ldr	r2, [sp, #32]
   11b5c:	ldr	r1, [sp, #40]	; 0x28
   11b60:	add	r0, r3, r0
   11b64:	bl	10be4 <memcmp@plt>
   11b68:	cmp	r0, #0
   11b6c:	bne	11bcc <__assert_fail@plt+0xe50>
   11b70:	cmp	r6, #0
   11b74:	beq	11bd4 <__assert_fail@plt+0xe58>
   11b78:	str	r6, [sp, #24]
   11b7c:	ldr	r3, [sp, #24]
   11b80:	ldr	r2, [sp, #44]	; 0x2c
   11b84:	cmp	sl, #2
   11b88:	movne	r3, #0
   11b8c:	andeq	r3, r3, #1
   11b90:	cmp	r3, #0
   11b94:	ldr	r3, [sp, #160]	; 0xa0
   11b98:	movne	sl, #4
   11b9c:	str	r3, [sp, #16]
   11ba0:	ldr	r3, [sp, #156]	; 0x9c
   11ba4:	str	sl, [sp]
   11ba8:	str	r3, [sp, #12]
   11bac:	mov	r3, #0
   11bb0:	str	r3, [sp, #8]
   11bb4:	ldr	r3, [sp, #148]	; 0x94
   11bb8:	mov	r1, r9
   11bbc:	bic	r3, r3, #2
   11bc0:	str	r3, [sp, #4]
   11bc4:	ldr	r3, [sp, #36]	; 0x24
   11bc8:	b	11978 <__assert_fail@plt+0xbfc>
   11bcc:	mov	r3, #0
   11bd0:	str	r3, [sp, #64]	; 0x40
   11bd4:	ldr	r2, [sp, #28]
   11bd8:	ldr	r3, [sp, #44]	; 0x2c
   11bdc:	add	r3, r3, r2
   11be0:	str	r3, [sp, #80]	; 0x50
   11be4:	ldr	r3, [sp, #44]	; 0x2c
   11be8:	ldrb	r7, [r3, r2]
   11bec:	cmp	r7, #58	; 0x3a
   11bf0:	bhi	11d58 <__assert_fail@plt+0xfdc>
   11bf4:	cmp	r7, #43	; 0x2b
   11bf8:	bcs	11dac <__assert_fail@plt+0x1030>
   11bfc:	cmp	r7, #32
   11c00:	beq	11e04 <__assert_fail@plt+0x1088>
   11c04:	bhi	11cb0 <__assert_fail@plt+0xf34>
   11c08:	cmp	r7, #9
   11c0c:	beq	120b8 <__assert_fail@plt+0x133c>
   11c10:	bhi	11c74 <__assert_fail@plt+0xef8>
   11c14:	cmp	r7, #7
   11c18:	beq	12164 <__assert_fail@plt+0x13e8>
   11c1c:	bhi	11e20 <__assert_fail@plt+0x10a4>
   11c20:	cmp	r7, #0
   11c24:	beq	11e3c <__assert_fail@plt+0x10c0>
   11c28:	ldr	r3, [sp, #76]	; 0x4c
   11c2c:	cmp	r3, #1
   11c30:	bne	121a8 <__assert_fail@plt+0x142c>
   11c34:	bl	10c98 <__ctype_b_loc@plt>
   11c38:	sxth	r3, r7
   11c3c:	lsl	r3, r3, #1
   11c40:	ldr	r2, [r0]
   11c44:	ldrh	r5, [r2, r3]
   11c48:	ldr	r3, [sp, #76]	; 0x4c
   11c4c:	str	r3, [sp, #56]	; 0x38
   11c50:	lsr	r5, r5, #14
   11c54:	and	r5, r5, #1
   11c58:	ldr	r3, [sp, #24]
   11c5c:	eor	fp, r5, #1
   11c60:	and	fp, fp, r3
   11c64:	ands	fp, fp, #255	; 0xff
   11c68:	beq	11ff0 <__assert_fail@plt+0x1274>
   11c6c:	mov	r5, #0
   11c70:	b	12254 <__assert_fail@plt+0x14d8>
   11c74:	cmp	r7, #11
   11c78:	beq	120c0 <__assert_fail@plt+0x1344>
   11c7c:	bcc	1215c <__assert_fail@plt+0x13e0>
   11c80:	cmp	r7, #12
   11c84:	beq	1216c <__assert_fail@plt+0x13f0>
   11c88:	cmp	r7, #13
   11c8c:	moveq	r3, #114	; 0x72
   11c90:	bne	11c28 <__assert_fail@plt+0xeac>
   11c94:	cmp	sl, #2
   11c98:	movne	r2, #0
   11c9c:	andeq	r2, r6, #1
   11ca0:	cmp	r2, #0
   11ca4:	beq	11e24 <__assert_fail@plt+0x10a8>
   11ca8:	mov	sl, #2
   11cac:	b	11b7c <__assert_fail@plt+0xe00>
   11cb0:	cmp	r7, #37	; 0x25
   11cb4:	beq	11dac <__assert_fail@plt+0x1030>
   11cb8:	bhi	11ccc <__assert_fail@plt+0xf50>
   11cbc:	cmp	r7, #35	; 0x23
   11cc0:	beq	11df8 <__assert_fail@plt+0x107c>
   11cc4:	mov	r5, #0
   11cc8:	b	11e08 <__assert_fail@plt+0x108c>
   11ccc:	cmp	r7, #39	; 0x27
   11cd0:	bne	11cc4 <__assert_fail@plt+0xf48>
   11cd4:	cmp	sl, #2
   11cd8:	ldrne	r5, [sp, #52]	; 0x34
   11cdc:	movne	r3, r5
   11ce0:	strne	r3, [sp, #68]	; 0x44
   11ce4:	bne	11db0 <__assert_fail@plt+0x1034>
   11ce8:	cmp	r6, #0
   11cec:	bne	11b7c <__assert_fail@plt+0xe00>
   11cf0:	ldr	r2, [sp, #60]	; 0x3c
   11cf4:	adds	r3, r9, #0
   11cf8:	movne	r3, #1
   11cfc:	cmp	r2, #0
   11d00:	movne	r3, #0
   11d04:	cmp	r3, #0
   11d08:	strne	r9, [sp, #60]	; 0x3c
   11d0c:	movne	r9, #0
   11d10:	bne	11d20 <__assert_fail@plt+0xfa4>
   11d14:	cmp	r9, r4
   11d18:	movhi	r3, #39	; 0x27
   11d1c:	strbhi	r3, [r8, r4]
   11d20:	add	r3, r4, #1
   11d24:	cmp	r3, r9
   11d28:	movcc	r2, #92	; 0x5c
   11d2c:	strbcc	r2, [r8, r3]
   11d30:	add	r3, r4, #2
   11d34:	cmp	r3, r9
   11d38:	ldr	r5, [sp, #52]	; 0x34
   11d3c:	movcc	r2, #39	; 0x27
   11d40:	strbcc	r2, [r8, r3]
   11d44:	add	r4, r4, #3
   11d48:	mov	fp, r6
   11d4c:	str	r5, [sp, #68]	; 0x44
   11d50:	str	r6, [sp, #48]	; 0x30
   11d54:	b	11ff0 <__assert_fail@plt+0x1274>
   11d58:	cmp	r7, #94	; 0x5e
   11d5c:	beq	11cc4 <__assert_fail@plt+0xf48>
   11d60:	bhi	11db8 <__assert_fail@plt+0x103c>
   11d64:	cmp	r7, #90	; 0x5a
   11d68:	bhi	11da0 <__assert_fail@plt+0x1024>
   11d6c:	cmp	r7, #65	; 0x41
   11d70:	bcs	11dac <__assert_fail@plt+0x1030>
   11d74:	cmp	r7, #62	; 0x3e
   11d78:	bls	11cc4 <__assert_fail@plt+0xf48>
   11d7c:	cmp	r7, #63	; 0x3f
   11d80:	bne	11c28 <__assert_fail@plt+0xeac>
   11d84:	cmp	sl, #2
   11d88:	beq	11f2c <__assert_fail@plt+0x11b0>
   11d8c:	cmp	sl, #5
   11d90:	beq	11f3c <__assert_fail@plt+0x11c0>
   11d94:	mov	fp, #0
   11d98:	mov	r5, fp
   11d9c:	b	11ff0 <__assert_fail@plt+0x1274>
   11da0:	cmp	r7, #92	; 0x5c
   11da4:	beq	120c8 <__assert_fail@plt+0x134c>
   11da8:	bls	11cc4 <__assert_fail@plt+0xf48>
   11dac:	ldr	r5, [sp, #52]	; 0x34
   11db0:	mov	fp, #0
   11db4:	b	11ff0 <__assert_fail@plt+0x1274>
   11db8:	cmp	r7, #122	; 0x7a
   11dbc:	bhi	11ddc <__assert_fail@plt+0x1060>
   11dc0:	cmp	r7, #97	; 0x61
   11dc4:	bcs	11dac <__assert_fail@plt+0x1030>
   11dc8:	cmp	r7, #95	; 0x5f
   11dcc:	beq	11dac <__assert_fail@plt+0x1030>
   11dd0:	cmp	r7, #96	; 0x60
   11dd4:	bne	11c28 <__assert_fail@plt+0xeac>
   11dd8:	b	11cc4 <__assert_fail@plt+0xf48>
   11ddc:	cmp	r7, #124	; 0x7c
   11de0:	beq	11cc4 <__assert_fail@plt+0xf48>
   11de4:	bcc	12174 <__assert_fail@plt+0x13f8>
   11de8:	cmp	r7, #125	; 0x7d
   11dec:	beq	12174 <__assert_fail@plt+0x13f8>
   11df0:	cmp	r7, #126	; 0x7e
   11df4:	bne	11c28 <__assert_fail@plt+0xeac>
   11df8:	ldr	r3, [sp, #28]
   11dfc:	cmp	r3, #0
   11e00:	bne	11f34 <__assert_fail@plt+0x11b8>
   11e04:	ldr	r5, [sp, #52]	; 0x34
   11e08:	cmp	sl, #2
   11e0c:	movne	fp, #0
   11e10:	andeq	fp, r6, #1
   11e14:	cmp	fp, #0
   11e18:	beq	11ff0 <__assert_fail@plt+0x1274>
   11e1c:	b	11ca8 <__assert_fail@plt+0xf2c>
   11e20:	mov	r3, #98	; 0x62
   11e24:	ldr	r2, [sp, #24]
   11e28:	cmp	r2, #0
   11e2c:	beq	11f34 <__assert_fail@plt+0x11b8>
   11e30:	mov	r7, r3
   11e34:	mov	r5, #0
   11e38:	b	12048 <__assert_fail@plt+0x12cc>
   11e3c:	ldr	r3, [sp, #24]
   11e40:	cmp	r3, #0
   11e44:	beq	11f10 <__assert_fail@plt+0x1194>
   11e48:	cmp	r6, #0
   11e4c:	bne	11b78 <__assert_fail@plt+0xdfc>
   11e50:	ldr	r3, [sp, #48]	; 0x30
   11e54:	eor	r2, r3, #1
   11e58:	cmp	sl, #2
   11e5c:	movne	r2, #0
   11e60:	andeq	r2, r2, #1
   11e64:	cmp	r2, #0
   11e68:	moveq	r3, r4
   11e6c:	beq	11ea4 <__assert_fail@plt+0x1128>
   11e70:	cmp	r9, r4
   11e74:	movhi	r3, #39	; 0x27
   11e78:	strbhi	r3, [r8, r4]
   11e7c:	add	r3, r4, #1
   11e80:	cmp	r9, r3
   11e84:	movhi	r1, #36	; 0x24
   11e88:	strbhi	r1, [r8, r3]
   11e8c:	add	r3, r4, #2
   11e90:	cmp	r9, r3
   11e94:	movhi	r1, #39	; 0x27
   11e98:	strbhi	r1, [r8, r3]
   11e9c:	add	r3, r4, #3
   11ea0:	str	r2, [sp, #48]	; 0x30
   11ea4:	cmp	r9, r3
   11ea8:	movhi	r2, #92	; 0x5c
   11eac:	strbhi	r2, [r8, r3]
   11eb0:	cmp	fp, #0
   11eb4:	add	r4, r3, #1
   11eb8:	beq	12448 <__assert_fail@plt+0x16cc>
   11ebc:	ldr	r2, [sp, #28]
   11ec0:	ldr	r1, [sp, #36]	; 0x24
   11ec4:	add	r2, r2, #1
   11ec8:	cmp	r1, r2
   11ecc:	bls	11f08 <__assert_fail@plt+0x118c>
   11ed0:	ldr	r1, [sp, #44]	; 0x2c
   11ed4:	mov	r7, #48	; 0x30
   11ed8:	ldrb	r2, [r1, r2]
   11edc:	sub	r2, r2, #48	; 0x30
   11ee0:	cmp	r2, #9
   11ee4:	movhi	r5, r6
   11ee8:	bhi	11ff0 <__assert_fail@plt+0x1274>
   11eec:	cmp	r9, r4
   11ef0:	add	r2, r3, #2
   11ef4:	strbhi	r7, [r8, r4]
   11ef8:	cmp	r9, r2
   11efc:	add	r4, r3, #3
   11f00:	movhi	r1, #48	; 0x30
   11f04:	strbhi	r1, [r8, r2]
   11f08:	mov	r5, r6
   11f0c:	b	12450 <__assert_fail@plt+0x16d4>
   11f10:	ldr	r3, [sp, #148]	; 0x94
   11f14:	tst	r3, #1
   11f18:	ldreq	r5, [sp, #24]
   11f1c:	beq	1245c <__assert_fail@plt+0x16e0>
   11f20:	ldr	r3, [sp, #28]
   11f24:	add	r3, r3, #1
   11f28:	b	118c8 <__assert_fail@plt+0xb4c>
   11f2c:	cmp	r6, #0
   11f30:	bne	11b7c <__assert_fail@plt+0xe00>
   11f34:	mov	r5, #0
   11f38:	b	11db0 <__assert_fail@plt+0x1034>
   11f3c:	ldr	r3, [sp, #148]	; 0x94
   11f40:	tst	r3, #4
   11f44:	beq	11f34 <__assert_fail@plt+0x11b8>
   11f48:	ldr	r3, [sp, #28]
   11f4c:	add	r2, r3, #2
   11f50:	ldr	r3, [sp, #36]	; 0x24
   11f54:	cmp	r3, r2
   11f58:	bls	11f34 <__assert_fail@plt+0x11b8>
   11f5c:	ldr	r3, [sp, #44]	; 0x2c
   11f60:	ldr	r1, [sp, #28]
   11f64:	add	r3, r3, r1
   11f68:	ldrb	r0, [r3, #1]
   11f6c:	cmp	r0, #63	; 0x3f
   11f70:	bne	11f34 <__assert_fail@plt+0x11b8>
   11f74:	ldr	r3, [sp, #44]	; 0x2c
   11f78:	ldrb	r1, [r3, r2]
   11f7c:	sub	r3, r1, #33	; 0x21
   11f80:	uxtb	r3, r3
   11f84:	cmp	r3, #29
   11f88:	bhi	12458 <__assert_fail@plt+0x16dc>
   11f8c:	mov	ip, #1
   11f90:	ldr	r5, [pc, #1428]	; 1252c <__assert_fail@plt+0x17b0>
   11f94:	ands	r5, r5, ip, lsl r3
   11f98:	beq	11db0 <__assert_fail@plt+0x1034>
   11f9c:	cmp	r6, #0
   11fa0:	bne	11b7c <__assert_fail@plt+0xe00>
   11fa4:	add	r3, r4, #1
   11fa8:	cmp	r9, r4
   11fac:	strbhi	r0, [r8, r4]
   11fb0:	cmp	r9, r3
   11fb4:	movhi	r0, #34	; 0x22
   11fb8:	strbhi	r0, [r8, r3]
   11fbc:	add	r3, r4, #2
   11fc0:	cmp	r9, r3
   11fc4:	movhi	r0, #34	; 0x22
   11fc8:	strbhi	r0, [r8, r3]
   11fcc:	add	r3, r4, #3
   11fd0:	cmp	r9, r3
   11fd4:	add	r4, r4, #4
   11fd8:	mov	r5, r6
   11fdc:	mov	fp, r6
   11fe0:	mov	r7, r1
   11fe4:	movhi	r0, #63	; 0x3f
   11fe8:	strbhi	r0, [r8, r3]
   11fec:	str	r2, [sp, #28]
   11ff0:	ldr	r3, [sp, #24]
   11ff4:	eor	r3, r3, #1
   11ff8:	cmp	sl, #2
   11ffc:	orreq	r3, r3, #1
   12000:	eor	r3, r3, #1
   12004:	orr	r3, r6, r3
   12008:	tst	r3, #255	; 0xff
   1200c:	beq	1203c <__assert_fail@plt+0x12c0>
   12010:	ldr	r3, [sp, #152]	; 0x98
   12014:	cmp	r3, #0
   12018:	beq	1203c <__assert_fail@plt+0x12c0>
   1201c:	lsr	r2, r7, #5
   12020:	ldr	r1, [sp, #152]	; 0x98
   12024:	uxtb	r2, r2
   12028:	and	r3, r7, #31
   1202c:	ldr	r2, [r1, r2, lsl #2]
   12030:	lsr	r3, r2, r3
   12034:	tst	r3, #1
   12038:	bne	12048 <__assert_fail@plt+0x12cc>
   1203c:	ldr	r3, [sp, #64]	; 0x40
   12040:	cmp	r3, #0
   12044:	beq	120e0 <__assert_fail@plt+0x1364>
   12048:	cmp	r6, #0
   1204c:	bne	11b7c <__assert_fail@plt+0xe00>
   12050:	ldr	r3, [sp, #48]	; 0x30
   12054:	eor	r3, r3, #1
   12058:	cmp	sl, #2
   1205c:	movne	r3, #0
   12060:	andeq	r3, r3, #1
   12064:	cmp	r3, #0
   12068:	beq	120a0 <__assert_fail@plt+0x1324>
   1206c:	cmp	r9, r4
   12070:	movhi	r2, #39	; 0x27
   12074:	strbhi	r2, [r8, r4]
   12078:	add	r2, r4, #1
   1207c:	cmp	r9, r2
   12080:	movhi	r1, #36	; 0x24
   12084:	strbhi	r1, [r8, r2]
   12088:	add	r2, r4, #2
   1208c:	cmp	r9, r2
   12090:	add	r4, r4, #3
   12094:	movhi	r1, #39	; 0x27
   12098:	strbhi	r1, [r8, r2]
   1209c:	str	r3, [sp, #48]	; 0x30
   120a0:	cmp	r9, r4
   120a4:	movhi	r3, #92	; 0x5c
   120a8:	strbhi	r3, [r8, r4]
   120ac:	ldr	fp, [sp, #52]	; 0x34
   120b0:	add	r4, r4, #1
   120b4:	b	120e0 <__assert_fail@plt+0x1364>
   120b8:	mov	r3, #116	; 0x74
   120bc:	b	11c94 <__assert_fail@plt+0xf18>
   120c0:	mov	r3, #118	; 0x76
   120c4:	b	11e24 <__assert_fail@plt+0x10a8>
   120c8:	cmp	sl, #2
   120cc:	bne	1213c <__assert_fail@plt+0x13c0>
   120d0:	cmp	r6, #0
   120d4:	bne	11b7c <__assert_fail@plt+0xe00>
   120d8:	mov	r5, r6
   120dc:	mov	fp, r6
   120e0:	ldr	r3, [sp, #48]	; 0x30
   120e4:	eor	fp, fp, #1
   120e8:	and	fp, fp, r3
   120ec:	tst	fp, #255	; 0xff
   120f0:	beq	1211c <__assert_fail@plt+0x13a0>
   120f4:	cmp	r9, r4
   120f8:	movhi	r3, #39	; 0x27
   120fc:	strbhi	r3, [r8, r4]
   12100:	add	r3, r4, #1
   12104:	cmp	r9, r3
   12108:	movhi	r2, #39	; 0x27
   1210c:	add	r4, r4, #2
   12110:	strbhi	r2, [r8, r3]
   12114:	mov	r3, #0
   12118:	str	r3, [sp, #48]	; 0x30
   1211c:	cmp	r9, r4
   12120:	strbhi	r7, [r8, r4]
   12124:	ldr	r3, [sp, #72]	; 0x48
   12128:	cmp	r5, #0
   1212c:	moveq	r3, #0
   12130:	add	r4, r4, #1
   12134:	str	r3, [sp, #72]	; 0x48
   12138:	b	11f20 <__assert_fail@plt+0x11a4>
   1213c:	ldr	r3, [sp, #24]
   12140:	and	r3, r3, r6
   12144:	tst	r5, r3
   12148:	moveq	r3, r7
   1214c:	beq	11c94 <__assert_fail@plt+0xf18>
   12150:	mov	fp, #0
   12154:	mov	r5, fp
   12158:	b	120e0 <__assert_fail@plt+0x1364>
   1215c:	mov	r3, #110	; 0x6e
   12160:	b	11c94 <__assert_fail@plt+0xf18>
   12164:	mov	r3, #97	; 0x61
   12168:	b	11e24 <__assert_fail@plt+0x10a8>
   1216c:	mov	r3, #102	; 0x66
   12170:	b	11e24 <__assert_fail@plt+0x10a8>
   12174:	ldr	r3, [sp, #36]	; 0x24
   12178:	cmn	r3, #1
   1217c:	bne	1219c <__assert_fail@plt+0x1420>
   12180:	ldr	r3, [sp, #44]	; 0x2c
   12184:	ldrb	r3, [r3, #1]
   12188:	adds	r3, r3, #0
   1218c:	movne	r3, #1
   12190:	cmp	r3, #0
   12194:	bne	11f34 <__assert_fail@plt+0x11b8>
   12198:	b	11df8 <__assert_fail@plt+0x107c>
   1219c:	ldr	r3, [sp, #36]	; 0x24
   121a0:	subs	r3, r3, #1
   121a4:	b	1218c <__assert_fail@plt+0x1410>
   121a8:	mov	r3, #0
   121ac:	str	r3, [sp, #96]	; 0x60
   121b0:	str	r3, [sp, #100]	; 0x64
   121b4:	ldr	r3, [sp, #36]	; 0x24
   121b8:	cmn	r3, #1
   121bc:	bne	121cc <__assert_fail@plt+0x1450>
   121c0:	ldr	r0, [sp, #44]	; 0x2c
   121c4:	bl	10cb0 <strlen@plt>
   121c8:	str	r0, [sp, #36]	; 0x24
   121cc:	ldr	r5, [sp, #52]	; 0x34
   121d0:	mov	r3, #0
   121d4:	str	r3, [sp, #56]	; 0x38
   121d8:	ldr	r3, [sp, #28]
   121dc:	ldr	r2, [sp, #56]	; 0x38
   121e0:	ldr	r1, [sp, #36]	; 0x24
   121e4:	add	r2, r3, r2
   121e8:	ldr	r3, [sp, #44]	; 0x2c
   121ec:	add	r0, sp, #92	; 0x5c
   121f0:	add	fp, r3, r2
   121f4:	sub	r2, r1, r2
   121f8:	add	r3, sp, #96	; 0x60
   121fc:	mov	r1, fp
   12200:	bl	13758 <__assert_fail@plt+0x29dc>
   12204:	subs	r2, r0, #0
   12208:	beq	12248 <__assert_fail@plt+0x14cc>
   1220c:	cmn	r2, #1
   12210:	beq	12420 <__assert_fail@plt+0x16a4>
   12214:	cmn	r2, #2
   12218:	bne	12390 <__assert_fail@plt+0x1614>
   1221c:	ldr	r2, [sp, #56]	; 0x38
   12220:	ldr	r3, [sp, #28]
   12224:	add	r3, r3, r2
   12228:	ldr	r2, [sp, #36]	; 0x24
   1222c:	cmp	r2, r3
   12230:	bls	12420 <__assert_fail@plt+0x16a4>
   12234:	ldr	r3, [sp, #80]	; 0x50
   12238:	ldr	r2, [sp, #56]	; 0x38
   1223c:	ldrb	r5, [r3, r2]
   12240:	cmp	r5, #0
   12244:	bne	12380 <__assert_fail@plt+0x1604>
   12248:	ldr	r3, [sp, #56]	; 0x38
   1224c:	cmp	r3, #1
   12250:	bls	11c58 <__assert_fail@plt+0xedc>
   12254:	ldr	r2, [sp, #56]	; 0x38
   12258:	ldr	r3, [sp, #28]
   1225c:	mov	fp, #0
   12260:	add	r3, r3, r2
   12264:	ldr	r2, [sp, #24]
   12268:	str	r3, [sp, #52]	; 0x34
   1226c:	eor	r3, r5, #1
   12270:	and	r3, r3, r2
   12274:	mov	ip, #92	; 0x5c
   12278:	uxtb	r3, r3
   1227c:	mov	r2, #39	; 0x27
   12280:	cmp	r3, #0
   12284:	beq	12428 <__assert_fail@plt+0x16ac>
   12288:	cmp	r6, #0
   1228c:	bne	11b78 <__assert_fail@plt+0xdfc>
   12290:	ldr	r1, [sp, #48]	; 0x30
   12294:	eor	r1, r1, #1
   12298:	cmp	sl, #2
   1229c:	movne	r1, #0
   122a0:	andeq	r1, r1, #1
   122a4:	cmp	r1, #0
   122a8:	beq	122d8 <__assert_fail@plt+0x155c>
   122ac:	add	r0, r4, #1
   122b0:	cmp	r9, r4
   122b4:	strbhi	r2, [r8, r4]
   122b8:	cmp	r9, r0
   122bc:	movhi	lr, #36	; 0x24
   122c0:	strbhi	lr, [r8, r0]
   122c4:	add	r0, r4, #2
   122c8:	add	r4, r4, #3
   122cc:	cmp	r9, r0
   122d0:	strbhi	r2, [r8, r0]
   122d4:	str	r1, [sp, #48]	; 0x30
   122d8:	add	r0, r4, #1
   122dc:	cmp	r9, r4
   122e0:	strbhi	ip, [r8, r4]
   122e4:	cmp	r9, r0
   122e8:	lsrhi	r1, r7, #6
   122ec:	addhi	r1, r1, #48	; 0x30
   122f0:	strbhi	r1, [r8, r0]
   122f4:	add	r0, r4, #2
   122f8:	cmp	r9, r0
   122fc:	lsrhi	r1, r7, #3
   12300:	and	r7, r7, #7
   12304:	andhi	r1, r1, #7
   12308:	add	r4, r4, #3
   1230c:	add	r7, r7, #48	; 0x30
   12310:	mov	fp, r3
   12314:	addhi	r1, r1, #48	; 0x30
   12318:	strbhi	r1, [r8, r0]
   1231c:	ldr	r1, [sp, #28]
   12320:	ldr	r0, [sp, #52]	; 0x34
   12324:	add	r1, r1, #1
   12328:	cmp	r0, r1
   1232c:	bls	120e0 <__assert_fail@plt+0x1364>
   12330:	ldr	lr, [sp, #48]	; 0x30
   12334:	eor	r0, fp, #1
   12338:	and	r0, r0, lr
   1233c:	tst	r0, #255	; 0xff
   12340:	beq	12364 <__assert_fail@plt+0x15e8>
   12344:	add	r0, r4, #1
   12348:	cmp	r9, r4
   1234c:	strbhi	r2, [r8, r4]
   12350:	cmp	r9, r0
   12354:	add	r4, r4, #2
   12358:	strbhi	r2, [r8, r0]
   1235c:	mov	r0, #0
   12360:	str	r0, [sp, #48]	; 0x30
   12364:	ldr	r0, [sp, #44]	; 0x2c
   12368:	cmp	r9, r4
   1236c:	strbhi	r7, [r8, r4]
   12370:	str	r1, [sp, #28]
   12374:	add	r4, r4, #1
   12378:	ldrb	r7, [r0, r1]
   1237c:	b	12280 <__assert_fail@plt+0x1504>
   12380:	ldr	r3, [sp, #56]	; 0x38
   12384:	add	r3, r3, #1
   12388:	str	r3, [sp, #56]	; 0x38
   1238c:	b	1221c <__assert_fail@plt+0x14a0>
   12390:	cmp	sl, #2
   12394:	movne	r3, #0
   12398:	andeq	r3, r6, #1
   1239c:	cmp	r3, #0
   123a0:	movne	r1, #1
   123a4:	bne	12400 <__assert_fail@plt+0x1684>
   123a8:	ldr	r0, [sp, #92]	; 0x5c
   123ac:	str	r2, [sp, #84]	; 0x54
   123b0:	bl	10c08 <iswprint@plt>
   123b4:	ldr	r3, [sp, #56]	; 0x38
   123b8:	ldr	r2, [sp, #84]	; 0x54
   123bc:	add	r3, r3, r2
   123c0:	str	r3, [sp, #56]	; 0x38
   123c4:	cmp	r0, #0
   123c8:	add	r0, sp, #96	; 0x60
   123cc:	moveq	r5, #0
   123d0:	bl	10bd8 <mbsinit@plt>
   123d4:	cmp	r0, #0
   123d8:	beq	121d8 <__assert_fail@plt+0x145c>
   123dc:	b	12248 <__assert_fail@plt+0x14cc>
   123e0:	ldrb	r3, [fp, r1]
   123e4:	cmp	r3, #94	; 0x5e
   123e8:	beq	11ca8 <__assert_fail@plt+0xf2c>
   123ec:	bhi	1240c <__assert_fail@plt+0x1690>
   123f0:	sub	r3, r3, #91	; 0x5b
   123f4:	cmp	r3, #1
   123f8:	bls	11ca8 <__assert_fail@plt+0xf2c>
   123fc:	add	r1, r1, #1
   12400:	cmp	r1, r2
   12404:	bne	123e0 <__assert_fail@plt+0x1664>
   12408:	b	123a8 <__assert_fail@plt+0x162c>
   1240c:	cmp	r3, #96	; 0x60
   12410:	beq	11ca8 <__assert_fail@plt+0xf2c>
   12414:	cmp	r3, #124	; 0x7c
   12418:	bne	123fc <__assert_fail@plt+0x1680>
   1241c:	b	11ca8 <__assert_fail@plt+0xf2c>
   12420:	mov	r5, #0
   12424:	b	12248 <__assert_fail@plt+0x14cc>
   12428:	ldr	r1, [sp, #64]	; 0x40
   1242c:	cmp	r1, #0
   12430:	beq	1231c <__assert_fail@plt+0x15a0>
   12434:	cmp	r9, r4
   12438:	strbhi	ip, [r8, r4]
   1243c:	str	r3, [sp, #64]	; 0x40
   12440:	add	r4, r4, #1
   12444:	b	1231c <__assert_fail@plt+0x15a0>
   12448:	mov	r5, fp
   1244c:	ldr	fp, [sp, #24]
   12450:	mov	r7, #48	; 0x30
   12454:	b	11ff0 <__assert_fail@plt+0x1274>
   12458:	mov	r5, #0
   1245c:	mov	fp, r5
   12460:	b	11ff0 <__assert_fail@plt+0x1274>
   12464:	ldr	r3, [sp, #36]	; 0x24
   12468:	ldr	r2, [sp, #28]
   1246c:	subs	r3, r3, r2
   12470:	movne	r3, #1
   12474:	b	118ec <__assert_fail@plt+0xb70>
   12478:	ldr	r3, [sp, #60]	; 0x3c
   1247c:	clz	r7, r9
   12480:	cmp	r3, #0
   12484:	lsr	r7, r7, #5
   12488:	moveq	r7, #0
   1248c:	cmp	r7, #0
   12490:	mov	r5, r3
   12494:	bne	1184c <__assert_fail@plt+0xad0>
   12498:	ldr	r3, [sp, #68]	; 0x44
   1249c:	ldr	r2, [sp, #40]	; 0x28
   124a0:	cmp	r2, #0
   124a4:	moveq	r3, #0
   124a8:	andne	r3, r3, #1
   124ac:	cmp	r3, #0
   124b0:	movne	r3, r2
   124b4:	subne	r2, r3, #1
   124b8:	bne	124e8 <__assert_fail@plt+0x176c>
   124bc:	cmp	r9, r4
   124c0:	movhi	r3, #0
   124c4:	strbhi	r3, [r8, r4]
   124c8:	mov	r0, r4
   124cc:	add	sp, sp, #108	; 0x6c
   124d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124d4:	mov	r3, r2
   124d8:	b	1249c <__assert_fail@plt+0x1720>
   124dc:	cmp	r9, r4
   124e0:	strbhi	r3, [r8, r4]
   124e4:	add	r4, r4, #1
   124e8:	ldrb	r3, [r2, #1]!
   124ec:	cmp	r3, #0
   124f0:	bne	124dc <__assert_fail@plt+0x1760>
   124f4:	b	124bc <__assert_fail@plt+0x1740>
   124f8:	ldr	r3, [pc, #32]	; 12520 <__assert_fail@plt+0x17a4>
   124fc:	mov	r6, #1
   12500:	str	r6, [sp, #24]
   12504:	str	r6, [sp, #32]
   12508:	str	r3, [sp, #40]	; 0x28
   1250c:	mov	r4, #0
   12510:	mov	sl, #5
   12514:	b	118bc <__assert_fail@plt+0xb40>
   12518:	mov	r6, #1
   1251c:	b	11ab0 <__assert_fail@plt+0xd34>
   12520:	andeq	r4, r1, pc, lsr #6
   12524:	andeq	r4, r1, r3, lsr r3
   12528:	andeq	r4, r1, r1, lsr r3
   1252c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   12530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12534:	sub	sp, sp, #52	; 0x34
   12538:	mov	r6, r0
   1253c:	mov	r5, r3
   12540:	mov	r8, r1
   12544:	mov	r9, r2
   12548:	bl	10cc8 <__errno_location@plt>
   1254c:	ldr	r7, [pc, #380]	; 126d0 <__assert_fail@plt+0x1954>
   12550:	cmn	r6, #-2147483647	; 0x80000001
   12554:	ldr	r4, [r7]
   12558:	ldr	r3, [r0]
   1255c:	str	r0, [sp, #24]
   12560:	str	r3, [sp, #32]
   12564:	movne	r3, #0
   12568:	moveq	r3, #1
   1256c:	orrs	r3, r3, r6, lsr #31
   12570:	beq	12578 <__assert_fail@plt+0x17fc>
   12574:	bl	10d70 <abort@plt>
   12578:	ldr	r2, [r7, #4]
   1257c:	cmp	r6, r2
   12580:	blt	125f0 <__assert_fail@plt+0x1874>
   12584:	add	r1, sp, #48	; 0x30
   12588:	add	sl, r7, #8
   1258c:	str	r2, [r1, #-4]!
   12590:	cmp	r4, sl
   12594:	mov	r3, #8
   12598:	sub	r2, r6, r2
   1259c:	movne	r0, r4
   125a0:	str	r3, [sp]
   125a4:	add	r2, r2, #1
   125a8:	mvn	r3, #-2147483648	; 0x80000000
   125ac:	moveq	r0, #0
   125b0:	bl	13234 <__assert_fail@plt+0x24b8>
   125b4:	cmp	r4, sl
   125b8:	ldr	r2, [sp, #44]	; 0x2c
   125bc:	mov	fp, r0
   125c0:	str	r0, [r7]
   125c4:	ldmeq	r4, {r0, r1}
   125c8:	mov	r4, fp
   125cc:	stmeq	fp, {r0, r1}
   125d0:	ldr	r0, [r7, #4]
   125d4:	mov	r1, #0
   125d8:	sub	r2, r2, r0
   125dc:	add	r0, fp, r0, lsl #3
   125e0:	lsl	r2, r2, #3
   125e4:	bl	10ce0 <memset@plt>
   125e8:	ldr	r3, [sp, #44]	; 0x2c
   125ec:	str	r3, [r7, #4]
   125f0:	ldr	r3, [r5, #4]
   125f4:	add	sl, r4, r6, lsl #3
   125f8:	orr	r3, r3, #1
   125fc:	str	r3, [sp, #28]
   12600:	add	r3, r5, #8
   12604:	str	r3, [sp, #36]	; 0x24
   12608:	ldr	r3, [r5, #44]	; 0x2c
   1260c:	ldr	fp, [r4, r6, lsl #3]
   12610:	ldr	r7, [sl, #4]
   12614:	str	r3, [sp, #16]
   12618:	ldr	r3, [r5, #40]	; 0x28
   1261c:	mov	r2, r8
   12620:	str	r3, [sp, #12]
   12624:	add	r3, r5, #8
   12628:	str	r3, [sp, #8]
   1262c:	ldr	r3, [sp, #28]
   12630:	mov	r1, fp
   12634:	str	r3, [sp, #4]
   12638:	ldr	r3, [r5]
   1263c:	mov	r0, r7
   12640:	str	r3, [sp]
   12644:	mov	r3, r9
   12648:	bl	117fc <__assert_fail@plt+0xa80>
   1264c:	cmp	fp, r0
   12650:	bhi	126b8 <__assert_fail@plt+0x193c>
   12654:	ldr	r3, [pc, #120]	; 126d4 <__assert_fail@plt+0x1958>
   12658:	add	fp, r0, #1
   1265c:	cmp	r7, r3
   12660:	str	fp, [r4, r6, lsl #3]
   12664:	beq	12670 <__assert_fail@plt+0x18f4>
   12668:	mov	r0, r7
   1266c:	bl	13630 <__assert_fail@plt+0x28b4>
   12670:	mov	r0, fp
   12674:	bl	130ec <__assert_fail@plt+0x2370>
   12678:	ldr	r3, [r5, #44]	; 0x2c
   1267c:	mov	r2, r8
   12680:	mov	r1, fp
   12684:	str	r0, [sl, #4]
   12688:	str	r3, [sp, #16]
   1268c:	ldr	r3, [r5, #40]	; 0x28
   12690:	mov	r7, r0
   12694:	str	r3, [sp, #12]
   12698:	add	r3, r5, #8
   1269c:	str	r3, [sp, #8]
   126a0:	ldr	r3, [sp, #28]
   126a4:	str	r3, [sp, #4]
   126a8:	ldr	r3, [r5]
   126ac:	str	r3, [sp]
   126b0:	mov	r3, r9
   126b4:	bl	117fc <__assert_fail@plt+0xa80>
   126b8:	ldr	r3, [sp, #24]
   126bc:	ldr	r2, [sp, #32]
   126c0:	mov	r0, r7
   126c4:	str	r2, [r3]
   126c8:	add	sp, sp, #52	; 0x34
   126cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126d0:	ldrdeq	r5, [r2], -r8
   126d4:	andeq	r5, r2, ip, asr #2
   126d8:	push	{r4, r5, r6, lr}
   126dc:	mov	r5, r0
   126e0:	bl	10cc8 <__errno_location@plt>
   126e4:	cmp	r5, #0
   126e8:	mov	r1, #48	; 0x30
   126ec:	ldr	r6, [r0]
   126f0:	mov	r4, r0
   126f4:	ldr	r0, [pc, #12]	; 12708 <__assert_fail@plt+0x198c>
   126f8:	movne	r0, r5
   126fc:	bl	134c8 <__assert_fail@plt+0x274c>
   12700:	str	r6, [r4]
   12704:	pop	{r4, r5, r6, pc}
   12708:	andeq	r5, r2, ip, asr #4
   1270c:	ldr	r3, [pc, #12]	; 12720 <__assert_fail@plt+0x19a4>
   12710:	cmp	r0, #0
   12714:	moveq	r0, r3
   12718:	ldr	r0, [r0]
   1271c:	bx	lr
   12720:	andeq	r5, r2, ip, asr #4
   12724:	ldr	r3, [pc, #12]	; 12738 <__assert_fail@plt+0x19bc>
   12728:	cmp	r0, #0
   1272c:	moveq	r0, r3
   12730:	str	r1, [r0]
   12734:	bx	lr
   12738:	andeq	r5, r2, ip, asr #4
   1273c:	ldr	r3, [pc, #52]	; 12778 <__assert_fail@plt+0x19fc>
   12740:	cmp	r0, #0
   12744:	moveq	r0, r3
   12748:	add	r3, r0, #8
   1274c:	push	{lr}		; (str lr, [sp, #-4]!)
   12750:	lsr	lr, r1, #5
   12754:	and	r1, r1, #31
   12758:	ldr	ip, [r3, lr, lsl #2]
   1275c:	lsr	r0, ip, r1
   12760:	eor	r2, r2, r0
   12764:	and	r2, r2, #1
   12768:	and	r0, r0, #1
   1276c:	eor	r1, ip, r2, lsl r1
   12770:	str	r1, [r3, lr, lsl #2]
   12774:	pop	{pc}		; (ldr pc, [sp], #4)
   12778:	andeq	r5, r2, ip, asr #4
   1277c:	ldr	r3, [pc, #16]	; 12794 <__assert_fail@plt+0x1a18>
   12780:	cmp	r0, #0
   12784:	movne	r3, r0
   12788:	ldr	r0, [r3, #4]
   1278c:	str	r1, [r3, #4]
   12790:	bx	lr
   12794:	andeq	r5, r2, ip, asr #4
   12798:	ldr	r3, [pc, #44]	; 127cc <__assert_fail@plt+0x1a50>
   1279c:	cmp	r0, #0
   127a0:	moveq	r0, r3
   127a4:	mov	r3, #10
   127a8:	cmp	r2, #0
   127ac:	cmpne	r1, #0
   127b0:	str	r3, [r0]
   127b4:	bne	127c0 <__assert_fail@plt+0x1a44>
   127b8:	push	{r4, lr}
   127bc:	bl	10d70 <abort@plt>
   127c0:	str	r1, [r0, #40]	; 0x28
   127c4:	str	r2, [r0, #44]	; 0x2c
   127c8:	bx	lr
   127cc:	andeq	r5, r2, ip, asr #4
   127d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   127d4:	sub	sp, sp, #24
   127d8:	mov	sl, r3
   127dc:	ldr	r4, [sp, #56]	; 0x38
   127e0:	ldr	r3, [pc, #100]	; 1284c <__assert_fail@plt+0x1ad0>
   127e4:	cmp	r4, #0
   127e8:	moveq	r4, r3
   127ec:	mov	r7, r0
   127f0:	mov	r8, r1
   127f4:	mov	r9, r2
   127f8:	bl	10cc8 <__errno_location@plt>
   127fc:	ldr	r3, [r4, #44]	; 0x2c
   12800:	mov	r2, r9
   12804:	mov	r1, r8
   12808:	ldr	r6, [r0]
   1280c:	str	r3, [sp, #16]
   12810:	ldr	r3, [r4, #40]	; 0x28
   12814:	mov	r5, r0
   12818:	str	r3, [sp, #12]
   1281c:	add	r3, r4, #8
   12820:	str	r3, [sp, #8]
   12824:	ldr	r3, [r4, #4]
   12828:	mov	r0, r7
   1282c:	str	r3, [sp, #4]
   12830:	ldr	r3, [r4]
   12834:	str	r3, [sp]
   12838:	mov	r3, sl
   1283c:	bl	117fc <__assert_fail@plt+0xa80>
   12840:	str	r6, [r5]
   12844:	add	sp, sp, #24
   12848:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1284c:	andeq	r5, r2, ip, asr #4
   12850:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12854:	cmp	r3, #0
   12858:	sub	sp, sp, #44	; 0x2c
   1285c:	ldr	r4, [pc, #188]	; 12920 <__assert_fail@plt+0x1ba4>
   12860:	mov	r6, r2
   12864:	movne	r4, r3
   12868:	mov	sl, r1
   1286c:	mov	r9, r0
   12870:	bl	10cc8 <__errno_location@plt>
   12874:	ldr	r5, [r4, #4]
   12878:	add	fp, r4, #8
   1287c:	cmp	r6, #0
   12880:	orreq	r5, r5, #1
   12884:	mov	r1, #0
   12888:	mov	r2, r9
   1288c:	ldr	r3, [r0]
   12890:	mov	r8, r0
   12894:	str	r3, [sp, #28]
   12898:	ldr	r3, [r4, #44]	; 0x2c
   1289c:	mov	r0, r1
   128a0:	str	r3, [sp, #16]
   128a4:	ldr	r3, [r4, #40]	; 0x28
   128a8:	stmib	sp, {r5, fp}
   128ac:	str	r3, [sp, #12]
   128b0:	ldr	r3, [r4]
   128b4:	str	r3, [sp]
   128b8:	mov	r3, sl
   128bc:	bl	117fc <__assert_fail@plt+0xa80>
   128c0:	add	r1, r0, #1
   128c4:	mov	r7, r0
   128c8:	mov	r0, r1
   128cc:	str	r1, [sp, #36]	; 0x24
   128d0:	bl	130ec <__assert_fail@plt+0x2370>
   128d4:	ldr	r3, [r4, #44]	; 0x2c
   128d8:	mov	r2, r9
   128dc:	str	r3, [sp, #16]
   128e0:	ldr	r3, [r4, #40]	; 0x28
   128e4:	stmib	sp, {r5, fp}
   128e8:	str	r3, [sp, #12]
   128ec:	ldr	r3, [r4]
   128f0:	ldr	r1, [sp, #36]	; 0x24
   128f4:	str	r3, [sp]
   128f8:	mov	r3, sl
   128fc:	str	r0, [sp, #32]
   12900:	bl	117fc <__assert_fail@plt+0xa80>
   12904:	ldr	r3, [sp, #28]
   12908:	cmp	r6, #0
   1290c:	str	r3, [r8]
   12910:	ldr	r0, [sp, #32]
   12914:	strne	r7, [r6]
   12918:	add	sp, sp, #44	; 0x2c
   1291c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12920:	andeq	r5, r2, ip, asr #4
   12924:	mov	r3, r2
   12928:	mov	r2, #0
   1292c:	b	12850 <__assert_fail@plt+0x1ad4>
   12930:	push	{r4, r5, r6, r7, r8, lr}
   12934:	mov	r6, #1
   12938:	ldr	r4, [pc, #104]	; 129a8 <__assert_fail@plt+0x1c2c>
   1293c:	ldr	r5, [r4]
   12940:	add	r7, r5, #12
   12944:	ldr	r3, [r4, #4]
   12948:	add	r7, r7, #8
   1294c:	cmp	r6, r3
   12950:	blt	12998 <__assert_fail@plt+0x1c1c>
   12954:	ldr	r0, [r5, #4]
   12958:	ldr	r6, [pc, #76]	; 129ac <__assert_fail@plt+0x1c30>
   1295c:	cmp	r0, r6
   12960:	beq	12974 <__assert_fail@plt+0x1bf8>
   12964:	bl	13630 <__assert_fail@plt+0x28b4>
   12968:	mov	r3, #256	; 0x100
   1296c:	str	r3, [r4, #8]
   12970:	str	r6, [r4, #12]
   12974:	ldr	r6, [pc, #52]	; 129b0 <__assert_fail@plt+0x1c34>
   12978:	cmp	r5, r6
   1297c:	beq	1298c <__assert_fail@plt+0x1c10>
   12980:	mov	r0, r5
   12984:	bl	13630 <__assert_fail@plt+0x28b4>
   12988:	str	r6, [r4]
   1298c:	mov	r3, #1
   12990:	str	r3, [r4, #4]
   12994:	pop	{r4, r5, r6, r7, r8, pc}
   12998:	ldr	r0, [r7, #-8]
   1299c:	bl	13630 <__assert_fail@plt+0x28b4>
   129a0:	add	r6, r6, #1
   129a4:	b	12944 <__assert_fail@plt+0x1bc8>
   129a8:	ldrdeq	r5, [r2], -r8
   129ac:	andeq	r5, r2, ip, asr #2
   129b0:	andeq	r5, r2, r0, ror #1
   129b4:	ldr	r3, [pc, #4]	; 129c0 <__assert_fail@plt+0x1c44>
   129b8:	mvn	r2, #0
   129bc:	b	12530 <__assert_fail@plt+0x17b4>
   129c0:	andeq	r5, r2, ip, asr #4
   129c4:	ldr	r3, [pc]	; 129cc <__assert_fail@plt+0x1c50>
   129c8:	b	12530 <__assert_fail@plt+0x17b4>
   129cc:	andeq	r5, r2, ip, asr #4
   129d0:	mov	r1, r0
   129d4:	mov	r0, #0
   129d8:	b	129b4 <__assert_fail@plt+0x1c38>
   129dc:	mov	r2, r1
   129e0:	mov	r1, r0
   129e4:	mov	r0, #0
   129e8:	b	129c4 <__assert_fail@plt+0x1c48>
   129ec:	push	{r4, r5, lr}
   129f0:	sub	sp, sp, #52	; 0x34
   129f4:	mov	r5, r2
   129f8:	mov	r4, r0
   129fc:	mov	r0, sp
   12a00:	bl	116b8 <__assert_fail@plt+0x93c>
   12a04:	mov	r3, sp
   12a08:	mvn	r2, #0
   12a0c:	mov	r1, r5
   12a10:	mov	r0, r4
   12a14:	bl	12530 <__assert_fail@plt+0x17b4>
   12a18:	add	sp, sp, #52	; 0x34
   12a1c:	pop	{r4, r5, pc}
   12a20:	push	{r4, r5, r6, lr}
   12a24:	sub	sp, sp, #48	; 0x30
   12a28:	mov	r5, r2
   12a2c:	mov	r6, r3
   12a30:	mov	r4, r0
   12a34:	mov	r0, sp
   12a38:	bl	116b8 <__assert_fail@plt+0x93c>
   12a3c:	mov	r3, sp
   12a40:	mov	r2, r6
   12a44:	mov	r1, r5
   12a48:	mov	r0, r4
   12a4c:	bl	12530 <__assert_fail@plt+0x17b4>
   12a50:	add	sp, sp, #48	; 0x30
   12a54:	pop	{r4, r5, r6, pc}
   12a58:	mov	r2, r1
   12a5c:	mov	r1, r0
   12a60:	mov	r0, #0
   12a64:	b	129ec <__assert_fail@plt+0x1c70>
   12a68:	mov	r3, r2
   12a6c:	mov	r2, r1
   12a70:	mov	r1, r0
   12a74:	mov	r0, #0
   12a78:	b	12a20 <__assert_fail@plt+0x1ca4>
   12a7c:	push	{r4, r5, r6, lr}
   12a80:	mov	r4, r0
   12a84:	ldr	lr, [pc, #80]	; 12adc <__assert_fail@plt+0x1d60>
   12a88:	mov	r5, r1
   12a8c:	mov	r6, r2
   12a90:	ldm	lr!, {r0, r1, r2, r3}
   12a94:	sub	sp, sp, #48	; 0x30
   12a98:	mov	ip, sp
   12a9c:	stmia	ip!, {r0, r1, r2, r3}
   12aa0:	ldm	lr!, {r0, r1, r2, r3}
   12aa4:	stmia	ip!, {r0, r1, r2, r3}
   12aa8:	ldm	lr, {r0, r1, r2, r3}
   12aac:	stm	ip, {r0, r1, r2, r3}
   12ab0:	mov	r1, r6
   12ab4:	mov	r2, #1
   12ab8:	mov	r0, sp
   12abc:	bl	1273c <__assert_fail@plt+0x19c0>
   12ac0:	mov	r3, sp
   12ac4:	mov	r2, r5
   12ac8:	mov	r1, r4
   12acc:	mov	r0, #0
   12ad0:	bl	12530 <__assert_fail@plt+0x17b4>
   12ad4:	add	sp, sp, #48	; 0x30
   12ad8:	pop	{r4, r5, r6, pc}
   12adc:	andeq	r5, r2, ip, asr #4
   12ae0:	mov	r2, r1
   12ae4:	mvn	r1, #0
   12ae8:	b	12a7c <__assert_fail@plt+0x1d00>
   12aec:	mov	r1, #58	; 0x3a
   12af0:	b	12ae0 <__assert_fail@plt+0x1d64>
   12af4:	mov	r2, #58	; 0x3a
   12af8:	b	12a7c <__assert_fail@plt+0x1d00>
   12afc:	push	{r4, r5, lr}
   12b00:	sub	sp, sp, #100	; 0x64
   12b04:	mov	r4, r0
   12b08:	mov	r0, sp
   12b0c:	mov	r5, r2
   12b10:	bl	116b8 <__assert_fail@plt+0x93c>
   12b14:	mov	ip, sp
   12b18:	add	lr, sp, #48	; 0x30
   12b1c:	ldm	ip!, {r0, r1, r2, r3}
   12b20:	stmia	lr!, {r0, r1, r2, r3}
   12b24:	ldm	ip!, {r0, r1, r2, r3}
   12b28:	stmia	lr!, {r0, r1, r2, r3}
   12b2c:	ldm	ip, {r0, r1, r2, r3}
   12b30:	stm	lr, {r0, r1, r2, r3}
   12b34:	mov	r2, #1
   12b38:	mov	r1, #58	; 0x3a
   12b3c:	add	r0, sp, #48	; 0x30
   12b40:	bl	1273c <__assert_fail@plt+0x19c0>
   12b44:	add	r3, sp, #48	; 0x30
   12b48:	mvn	r2, #0
   12b4c:	mov	r1, r5
   12b50:	mov	r0, r4
   12b54:	bl	12530 <__assert_fail@plt+0x17b4>
   12b58:	add	sp, sp, #100	; 0x64
   12b5c:	pop	{r4, r5, pc}
   12b60:	push	{r4, r5, r6, r7, lr}
   12b64:	mov	r4, r0
   12b68:	ldr	lr, [pc, #84]	; 12bc4 <__assert_fail@plt+0x1e48>
   12b6c:	mov	r6, r1
   12b70:	mov	r7, r2
   12b74:	mov	r5, r3
   12b78:	ldm	lr!, {r0, r1, r2, r3}
   12b7c:	sub	sp, sp, #52	; 0x34
   12b80:	mov	ip, sp
   12b84:	stmia	ip!, {r0, r1, r2, r3}
   12b88:	ldm	lr!, {r0, r1, r2, r3}
   12b8c:	stmia	ip!, {r0, r1, r2, r3}
   12b90:	ldm	lr, {r0, r1, r2, r3}
   12b94:	stm	ip, {r0, r1, r2, r3}
   12b98:	mov	r2, r7
   12b9c:	mov	r1, r6
   12ba0:	mov	r0, sp
   12ba4:	bl	12798 <__assert_fail@plt+0x1a1c>
   12ba8:	mov	r3, sp
   12bac:	ldr	r2, [sp, #72]	; 0x48
   12bb0:	mov	r1, r5
   12bb4:	mov	r0, r4
   12bb8:	bl	12530 <__assert_fail@plt+0x17b4>
   12bbc:	add	sp, sp, #52	; 0x34
   12bc0:	pop	{r4, r5, r6, r7, pc}
   12bc4:	andeq	r5, r2, ip, asr #4
   12bc8:	mvn	ip, #0
   12bcc:	push	{r0, r1, r2, lr}
   12bd0:	str	ip, [sp]
   12bd4:	bl	12b60 <__assert_fail@plt+0x1de4>
   12bd8:	add	sp, sp, #12
   12bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   12be0:	mov	r3, r2
   12be4:	mov	r2, r1
   12be8:	mov	r1, r0
   12bec:	mov	r0, #0
   12bf0:	b	12bc8 <__assert_fail@plt+0x1e4c>
   12bf4:	push	{r0, r1, r2, lr}
   12bf8:	str	r3, [sp]
   12bfc:	mov	r3, r2
   12c00:	mov	r2, r1
   12c04:	mov	r1, r0
   12c08:	mov	r0, #0
   12c0c:	bl	12b60 <__assert_fail@plt+0x1de4>
   12c10:	add	sp, sp, #12
   12c14:	pop	{pc}		; (ldr pc, [sp], #4)
   12c18:	ldr	r3, [pc]	; 12c20 <__assert_fail@plt+0x1ea4>
   12c1c:	b	12530 <__assert_fail@plt+0x17b4>
   12c20:	andeq	r5, r2, r8, ror #1
   12c24:	mov	r2, r1
   12c28:	mov	r1, r0
   12c2c:	mov	r0, #0
   12c30:	b	12c18 <__assert_fail@plt+0x1e9c>
   12c34:	mvn	r2, #0
   12c38:	b	12c18 <__assert_fail@plt+0x1e9c>
   12c3c:	mov	r1, r0
   12c40:	mov	r0, #0
   12c44:	b	12c34 <__assert_fail@plt+0x1eb8>
   12c48:	push	{r4, r5, r6, lr}
   12c4c:	sub	sp, sp, #32
   12c50:	cmp	r1, #0
   12c54:	mov	r5, r0
   12c58:	ldr	r4, [sp, #48]	; 0x30
   12c5c:	ldr	r6, [sp, #52]	; 0x34
   12c60:	beq	12d08 <__assert_fail@plt+0x1f8c>
   12c64:	str	r3, [sp]
   12c68:	mov	r3, r2
   12c6c:	mov	r2, r1
   12c70:	ldr	r1, [pc, #736]	; 12f58 <__assert_fail@plt+0x21dc>
   12c74:	bl	10cbc <fprintf@plt>
   12c78:	mov	r2, #5
   12c7c:	ldr	r1, [pc, #728]	; 12f5c <__assert_fail@plt+0x21e0>
   12c80:	mov	r0, #0
   12c84:	bl	10bf0 <dcgettext@plt>
   12c88:	ldr	r3, [pc, #720]	; 12f60 <__assert_fail@plt+0x21e4>
   12c8c:	ldr	r1, [pc, #720]	; 12f64 <__assert_fail@plt+0x21e8>
   12c90:	mov	r2, r0
   12c94:	mov	r0, r5
   12c98:	bl	10cbc <fprintf@plt>
   12c9c:	mov	r1, r5
   12ca0:	mov	r0, #10
   12ca4:	bl	10d34 <fputc@plt>
   12ca8:	mov	r2, #5
   12cac:	ldr	r1, [pc, #692]	; 12f68 <__assert_fail@plt+0x21ec>
   12cb0:	mov	r0, #0
   12cb4:	bl	10bf0 <dcgettext@plt>
   12cb8:	ldr	r2, [pc, #684]	; 12f6c <__assert_fail@plt+0x21f0>
   12cbc:	mov	r1, r0
   12cc0:	mov	r0, r5
   12cc4:	bl	10cbc <fprintf@plt>
   12cc8:	mov	r1, r5
   12ccc:	mov	r0, #10
   12cd0:	bl	10d34 <fputc@plt>
   12cd4:	cmp	r6, #9
   12cd8:	ldrls	pc, [pc, r6, lsl #2]
   12cdc:	b	12f4c <__assert_fail@plt+0x21d0>
   12ce0:	andeq	r2, r1, r4, lsl #28
   12ce4:	andeq	r2, r1, r4, lsl sp
   12ce8:	andeq	r2, r1, ip, lsr sp
   12cec:	andeq	r2, r1, r4, ror #26
   12cf0:	muleq	r1, r4, sp
   12cf4:	andeq	r2, r1, ip, asr #27
   12cf8:	andeq	r2, r1, ip, lsl #28
   12cfc:	andeq	r2, r1, r0, asr lr
   12d00:	muleq	r1, ip, lr
   12d04:	strdeq	r2, [r1], -r0
   12d08:	ldr	r1, [pc, #608]	; 12f70 <__assert_fail@plt+0x21f4>
   12d0c:	bl	10cbc <fprintf@plt>
   12d10:	b	12c78 <__assert_fail@plt+0x1efc>
   12d14:	mov	r2, #5
   12d18:	ldr	r1, [pc, #596]	; 12f74 <__assert_fail@plt+0x21f8>
   12d1c:	mov	r0, #0
   12d20:	bl	10bf0 <dcgettext@plt>
   12d24:	ldr	r2, [r4]
   12d28:	mov	r1, r0
   12d2c:	mov	r0, r5
   12d30:	add	sp, sp, #32
   12d34:	pop	{r4, r5, r6, lr}
   12d38:	b	10cbc <fprintf@plt>
   12d3c:	mov	r2, #5
   12d40:	ldr	r1, [pc, #560]	; 12f78 <__assert_fail@plt+0x21fc>
   12d44:	mov	r0, #0
   12d48:	bl	10bf0 <dcgettext@plt>
   12d4c:	ldm	r4, {r2, r3}
   12d50:	mov	r1, r0
   12d54:	mov	r0, r5
   12d58:	add	sp, sp, #32
   12d5c:	pop	{r4, r5, r6, lr}
   12d60:	b	10cbc <fprintf@plt>
   12d64:	mov	r2, #5
   12d68:	ldr	r1, [pc, #524]	; 12f7c <__assert_fail@plt+0x2200>
   12d6c:	mov	r0, #0
   12d70:	bl	10bf0 <dcgettext@plt>
   12d74:	ldr	r3, [r4, #8]
   12d78:	str	r3, [sp, #48]	; 0x30
   12d7c:	ldm	r4, {r2, r3}
   12d80:	mov	r1, r0
   12d84:	mov	r0, r5
   12d88:	add	sp, sp, #32
   12d8c:	pop	{r4, r5, r6, lr}
   12d90:	b	10cbc <fprintf@plt>
   12d94:	mov	r2, #5
   12d98:	ldr	r1, [pc, #480]	; 12f80 <__assert_fail@plt+0x2204>
   12d9c:	mov	r0, #0
   12da0:	bl	10bf0 <dcgettext@plt>
   12da4:	ldr	r3, [r4, #12]
   12da8:	str	r3, [sp, #52]	; 0x34
   12dac:	ldr	r3, [r4, #8]
   12db0:	str	r3, [sp, #48]	; 0x30
   12db4:	ldm	r4, {r2, r3}
   12db8:	mov	r1, r0
   12dbc:	mov	r0, r5
   12dc0:	add	sp, sp, #32
   12dc4:	pop	{r4, r5, r6, lr}
   12dc8:	b	10cbc <fprintf@plt>
   12dcc:	mov	r2, #5
   12dd0:	ldr	r1, [pc, #428]	; 12f84 <__assert_fail@plt+0x2208>
   12dd4:	mov	r0, #0
   12dd8:	bl	10bf0 <dcgettext@plt>
   12ddc:	ldr	r3, [r4, #16]
   12de0:	str	r3, [sp, #8]
   12de4:	ldr	r3, [r4, #12]
   12de8:	str	r3, [sp, #4]
   12dec:	ldr	r3, [r4, #8]
   12df0:	str	r3, [sp]
   12df4:	ldm	r4, {r2, r3}
   12df8:	mov	r1, r0
   12dfc:	mov	r0, r5
   12e00:	bl	10cbc <fprintf@plt>
   12e04:	add	sp, sp, #32
   12e08:	pop	{r4, r5, r6, pc}
   12e0c:	mov	r2, #5
   12e10:	ldr	r1, [pc, #368]	; 12f88 <__assert_fail@plt+0x220c>
   12e14:	mov	r0, #0
   12e18:	bl	10bf0 <dcgettext@plt>
   12e1c:	ldr	r3, [r4, #20]
   12e20:	str	r3, [sp, #12]
   12e24:	ldr	r3, [r4, #16]
   12e28:	str	r3, [sp, #8]
   12e2c:	ldr	r3, [r4, #12]
   12e30:	str	r3, [sp, #4]
   12e34:	ldr	r3, [r4, #8]
   12e38:	str	r3, [sp]
   12e3c:	ldm	r4, {r2, r3}
   12e40:	mov	r1, r0
   12e44:	mov	r0, r5
   12e48:	bl	10cbc <fprintf@plt>
   12e4c:	b	12e04 <__assert_fail@plt+0x2088>
   12e50:	mov	r2, #5
   12e54:	ldr	r1, [pc, #304]	; 12f8c <__assert_fail@plt+0x2210>
   12e58:	mov	r0, #0
   12e5c:	bl	10bf0 <dcgettext@plt>
   12e60:	ldr	r3, [r4, #24]
   12e64:	str	r3, [sp, #16]
   12e68:	ldr	r3, [r4, #20]
   12e6c:	str	r3, [sp, #12]
   12e70:	ldr	r3, [r4, #16]
   12e74:	str	r3, [sp, #8]
   12e78:	ldr	r3, [r4, #12]
   12e7c:	str	r3, [sp, #4]
   12e80:	ldr	r3, [r4, #8]
   12e84:	str	r3, [sp]
   12e88:	ldm	r4, {r2, r3}
   12e8c:	mov	r1, r0
   12e90:	mov	r0, r5
   12e94:	bl	10cbc <fprintf@plt>
   12e98:	b	12e04 <__assert_fail@plt+0x2088>
   12e9c:	mov	r2, #5
   12ea0:	ldr	r1, [pc, #232]	; 12f90 <__assert_fail@plt+0x2214>
   12ea4:	mov	r0, #0
   12ea8:	bl	10bf0 <dcgettext@plt>
   12eac:	ldr	r3, [r4, #28]
   12eb0:	str	r3, [sp, #20]
   12eb4:	ldr	r3, [r4, #24]
   12eb8:	str	r3, [sp, #16]
   12ebc:	ldr	r3, [r4, #20]
   12ec0:	str	r3, [sp, #12]
   12ec4:	ldr	r3, [r4, #16]
   12ec8:	str	r3, [sp, #8]
   12ecc:	ldr	r3, [r4, #12]
   12ed0:	str	r3, [sp, #4]
   12ed4:	ldr	r3, [r4, #8]
   12ed8:	str	r3, [sp]
   12edc:	ldm	r4, {r2, r3}
   12ee0:	mov	r1, r0
   12ee4:	mov	r0, r5
   12ee8:	bl	10cbc <fprintf@plt>
   12eec:	b	12e04 <__assert_fail@plt+0x2088>
   12ef0:	ldr	r1, [pc, #156]	; 12f94 <__assert_fail@plt+0x2218>
   12ef4:	mov	r2, #5
   12ef8:	mov	r0, #0
   12efc:	bl	10bf0 <dcgettext@plt>
   12f00:	ldr	r3, [r4, #32]
   12f04:	str	r3, [sp, #24]
   12f08:	ldr	r3, [r4, #28]
   12f0c:	str	r3, [sp, #20]
   12f10:	ldr	r3, [r4, #24]
   12f14:	str	r3, [sp, #16]
   12f18:	ldr	r3, [r4, #20]
   12f1c:	str	r3, [sp, #12]
   12f20:	ldr	r3, [r4, #16]
   12f24:	str	r3, [sp, #8]
   12f28:	ldr	r3, [r4, #12]
   12f2c:	str	r3, [sp, #4]
   12f30:	ldr	r3, [r4, #8]
   12f34:	str	r3, [sp]
   12f38:	ldm	r4, {r2, r3}
   12f3c:	mov	r1, r0
   12f40:	mov	r0, r5
   12f44:	bl	10cbc <fprintf@plt>
   12f48:	b	12e04 <__assert_fail@plt+0x2088>
   12f4c:	mov	r2, #5
   12f50:	ldr	r1, [pc, #64]	; 12f98 <__assert_fail@plt+0x221c>
   12f54:	b	12ef8 <__assert_fail@plt+0x217c>
   12f58:	andeq	r4, r1, r1, lsl #7
   12f5c:	muleq	r1, r4, r3
   12f60:	andeq	r0, r0, r6, ror #15
   12f64:	andeq	r4, r1, ip, asr #12
   12f68:	muleq	r1, r8, r3
   12f6c:	andeq	r4, r1, r3, asr #8
   12f70:	andeq	r4, r1, sp, lsl #7
   12f74:	andeq	r4, r1, r5, ror #8
   12f78:	andeq	r4, r1, r5, ror r4
   12f7c:	andeq	r4, r1, ip, lsl #9
   12f80:	andeq	r4, r1, r8, lsr #9
   12f84:	andeq	r4, r1, r8, asr #9
   12f88:	andeq	r4, r1, ip, ror #9
   12f8c:	andeq	r4, r1, r4, lsl r5
   12f90:	andeq	r4, r1, r0, asr #10
   12f94:	andeq	r4, r1, r0, ror r5
   12f98:	andeq	r4, r1, r4, lsr #11
   12f9c:	push	{r0, r1, r4, lr}
   12fa0:	mov	ip, #0
   12fa4:	ldr	lr, [sp, #16]
   12fa8:	ldr	r4, [lr, ip, lsl #2]
   12fac:	cmp	r4, #0
   12fb0:	bne	12fc8 <__assert_fail@plt+0x224c>
   12fb4:	str	ip, [sp, #4]
   12fb8:	str	lr, [sp]
   12fbc:	bl	12c48 <__assert_fail@plt+0x1ecc>
   12fc0:	add	sp, sp, #8
   12fc4:	pop	{r4, pc}
   12fc8:	add	ip, ip, #1
   12fcc:	b	12fa8 <__assert_fail@plt+0x222c>
   12fd0:	push	{r4, r5, lr}
   12fd4:	sub	sp, sp, #52	; 0x34
   12fd8:	mov	ip, #0
   12fdc:	ldr	r5, [sp, #64]	; 0x40
   12fe0:	add	lr, sp, #8
   12fe4:	ldr	r4, [r5, ip, lsl #2]
   12fe8:	cmp	r4, #0
   12fec:	str	r4, [lr, ip, lsl #2]
   12ff0:	beq	13000 <__assert_fail@plt+0x2284>
   12ff4:	add	ip, ip, #1
   12ff8:	cmp	ip, #10
   12ffc:	bne	12fe4 <__assert_fail@plt+0x2268>
   13000:	str	ip, [sp, #4]
   13004:	str	lr, [sp]
   13008:	bl	12c48 <__assert_fail@plt+0x1ecc>
   1300c:	add	sp, sp, #52	; 0x34
   13010:	pop	{r4, r5, pc}
   13014:	push	{r3}		; (str r3, [sp, #-4]!)
   13018:	push	{r0, r1, r2, r3, lr}
   1301c:	add	r3, sp, #24
   13020:	str	r3, [sp, #12]
   13024:	str	r3, [sp]
   13028:	ldr	r3, [sp, #20]
   1302c:	bl	12fd0 <__assert_fail@plt+0x2254>
   13030:	add	sp, sp, #16
   13034:	pop	{lr}		; (ldr lr, [sp], #4)
   13038:	add	sp, sp, #4
   1303c:	bx	lr
   13040:	ldr	r3, [pc, #92]	; 130a4 <__assert_fail@plt+0x2328>
   13044:	push	{r4, lr}
   13048:	mov	r0, #10
   1304c:	ldr	r1, [r3]
   13050:	bl	10d34 <fputc@plt>
   13054:	mov	r2, #5
   13058:	ldr	r1, [pc, #72]	; 130a8 <__assert_fail@plt+0x232c>
   1305c:	mov	r0, #0
   13060:	bl	10bf0 <dcgettext@plt>
   13064:	ldr	r1, [pc, #64]	; 130ac <__assert_fail@plt+0x2330>
   13068:	bl	10b90 <printf@plt>
   1306c:	mov	r2, #5
   13070:	ldr	r1, [pc, #56]	; 130b0 <__assert_fail@plt+0x2334>
   13074:	mov	r0, #0
   13078:	bl	10bf0 <dcgettext@plt>
   1307c:	ldr	r2, [pc, #48]	; 130b4 <__assert_fail@plt+0x2338>
   13080:	ldr	r1, [pc, #48]	; 130b8 <__assert_fail@plt+0x233c>
   13084:	bl	10b90 <printf@plt>
   13088:	ldr	r1, [pc, #44]	; 130bc <__assert_fail@plt+0x2340>
   1308c:	mov	r2, #5
   13090:	mov	r0, #0
   13094:	bl	10bf0 <dcgettext@plt>
   13098:	ldr	r1, [pc, #32]	; 130c0 <__assert_fail@plt+0x2344>
   1309c:	pop	{r4, lr}
   130a0:	b	10b90 <printf@plt>
   130a4:	andeq	r5, r2, r4, lsr r1
   130a8:	andeq	r4, r1, r0, ror #11
   130ac:	andeq	r4, r1, ip, lsr r2
   130b0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   130b4:	andeq	r4, r1, r5, lsl r2
   130b8:	andeq	r4, r1, fp, lsr #2
   130bc:	andeq	r4, r1, r8, lsl #12
   130c0:	andeq	r4, r1, pc, lsr #12
   130c4:	push	{r4, lr}
   130c8:	bl	13718 <__assert_fail@plt+0x299c>
   130cc:	cmp	r0, #0
   130d0:	popne	{r4, pc}
   130d4:	bl	13558 <__assert_fail@plt+0x27dc>
   130d8:	push	{r4, lr}
   130dc:	bl	13718 <__assert_fail@plt+0x299c>
   130e0:	cmp	r0, #0
   130e4:	popne	{r4, pc}
   130e8:	bl	13558 <__assert_fail@plt+0x27dc>
   130ec:	b	130c4 <__assert_fail@plt+0x2348>
   130f0:	push	{r4, r5, r6, lr}
   130f4:	mov	r5, r0
   130f8:	mov	r4, r1
   130fc:	bl	137a8 <__assert_fail@plt+0x2a2c>
   13100:	cmp	r0, #0
   13104:	popne	{r4, r5, r6, pc}
   13108:	adds	r4, r4, #0
   1310c:	movne	r4, #1
   13110:	cmp	r5, #0
   13114:	orreq	r4, r4, #1
   13118:	cmp	r4, #0
   1311c:	popeq	{r4, r5, r6, pc}
   13120:	bl	13558 <__assert_fail@plt+0x27dc>
   13124:	push	{r4, lr}
   13128:	cmp	r1, #0
   1312c:	orreq	r1, r1, #1
   13130:	bl	137a8 <__assert_fail@plt+0x2a2c>
   13134:	cmp	r0, #0
   13138:	popne	{r4, pc}
   1313c:	bl	13558 <__assert_fail@plt+0x27dc>
   13140:	push	{r4, r5, r6, lr}
   13144:	mov	r6, r0
   13148:	mov	r5, r1
   1314c:	mov	r4, r2
   13150:	bl	13804 <__assert_fail@plt+0x2a88>
   13154:	cmp	r0, #0
   13158:	popne	{r4, r5, r6, pc}
   1315c:	cmp	r6, #0
   13160:	beq	13170 <__assert_fail@plt+0x23f4>
   13164:	cmp	r5, #0
   13168:	cmpne	r4, #0
   1316c:	popeq	{r4, r5, r6, pc}
   13170:	bl	13558 <__assert_fail@plt+0x27dc>
   13174:	b	13140 <__assert_fail@plt+0x23c4>
   13178:	cmp	r2, #0
   1317c:	cmpne	r1, #0
   13180:	moveq	r2, #1
   13184:	moveq	r1, r2
   13188:	push	{r4, lr}
   1318c:	bl	13804 <__assert_fail@plt+0x2a88>
   13190:	cmp	r0, #0
   13194:	popne	{r4, pc}
   13198:	bl	13558 <__assert_fail@plt+0x27dc>
   1319c:	mov	r2, r1
   131a0:	mov	r1, r0
   131a4:	mov	r0, #0
   131a8:	b	13140 <__assert_fail@plt+0x23c4>
   131ac:	mov	r2, r1
   131b0:	mov	r1, r0
   131b4:	mov	r0, #0
   131b8:	b	13178 <__assert_fail@plt+0x23fc>
   131bc:	push	{r4, r5, r6, r7, r8, lr}
   131c0:	subs	r7, r0, #0
   131c4:	mov	r5, r1
   131c8:	mov	r6, r2
   131cc:	ldr	r4, [r1]
   131d0:	bne	1320c <__assert_fail@plt+0x2490>
   131d4:	cmp	r4, #0
   131d8:	bne	131f4 <__assert_fail@plt+0x2478>
   131dc:	mov	r1, r2
   131e0:	mov	r0, #64	; 0x40
   131e4:	bl	139d4 <__assert_fail@plt+0x2c58>
   131e8:	cmp	r0, #0
   131ec:	movne	r4, r0
   131f0:	addeq	r4, r0, #1
   131f4:	mov	r2, r6
   131f8:	mov	r1, r4
   131fc:	mov	r0, r7
   13200:	bl	13140 <__assert_fail@plt+0x23c4>
   13204:	str	r4, [r5]
   13208:	pop	{r4, r5, r6, r7, r8, pc}
   1320c:	lsr	r2, r4, #1
   13210:	add	r3, r2, #1
   13214:	mvn	r3, r3
   13218:	cmp	r4, r3
   1321c:	addls	r4, r4, #1
   13220:	addls	r4, r4, r2
   13224:	bls	131f4 <__assert_fail@plt+0x2478>
   13228:	bl	13558 <__assert_fail@plt+0x27dc>
   1322c:	mov	r2, #1
   13230:	b	131bc <__assert_fail@plt+0x2440>
   13234:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13238:	mov	sl, r0
   1323c:	ldr	r8, [r1]
   13240:	mov	fp, r1
   13244:	mov	r5, r2
   13248:	asrs	r4, r8, #1
   1324c:	mov	r9, r3
   13250:	ldr	r7, [sp, #48]	; 0x30
   13254:	bpl	132f0 <__assert_fail@plt+0x2574>
   13258:	rsb	r2, r4, #-2147483648	; 0x80000000
   1325c:	cmp	r8, r2
   13260:	movge	r2, #0
   13264:	movlt	r2, #1
   13268:	mvn	r3, r9
   1326c:	cmp	r2, #0
   13270:	lsr	r3, r3, #31
   13274:	addeq	r4, r4, r8
   13278:	mvnne	r4, #-2147483648	; 0x80000000
   1327c:	mov	r0, r3
   13280:	cmp	r9, r4
   13284:	movge	r0, #0
   13288:	andlt	r0, r0, #1
   1328c:	cmp	r0, #0
   13290:	str	r3, [sp, #4]
   13294:	bne	13464 <__assert_fail@plt+0x26e8>
   13298:	cmp	r7, #0
   1329c:	bge	133b0 <__assert_fail@plt+0x2634>
   132a0:	cmp	r4, #0
   132a4:	bge	13308 <__assert_fail@plt+0x258c>
   132a8:	mov	r1, r7
   132ac:	mvn	r0, #-2147483648	; 0x80000000
   132b0:	bl	13be0 <__assert_fail@plt+0x2e64>
   132b4:	cmp	r0, r4
   132b8:	movle	r0, #0
   132bc:	movgt	r0, #1
   132c0:	cmp	r0, #0
   132c4:	mvnne	r6, #-2147483648	; 0x80000000
   132c8:	beq	13318 <__assert_fail@plt+0x259c>
   132cc:	mov	r1, r7
   132d0:	mov	r0, r6
   132d4:	bl	13be0 <__assert_fail@plt+0x2e64>
   132d8:	mov	r1, r7
   132dc:	mov	r4, r0
   132e0:	mov	r0, r6
   132e4:	bl	13e00 <__assert_fail@plt+0x3084>
   132e8:	sub	r1, r6, r1
   132ec:	b	13328 <__assert_fail@plt+0x25ac>
   132f0:	mvn	r2, #-2147483648	; 0x80000000
   132f4:	sub	r2, r2, r4
   132f8:	cmp	r8, r2
   132fc:	movle	r2, #0
   13300:	movgt	r2, #1
   13304:	b	13268 <__assert_fail@plt+0x24ec>
   13308:	cmn	r7, #1
   1330c:	movne	r1, r7
   13310:	movne	r0, #-2147483648	; 0x80000000
   13314:	bne	1347c <__assert_fail@plt+0x2700>
   13318:	mul	r1, r7, r4
   1331c:	cmp	r1, #63	; 0x3f
   13320:	movle	r6, #64	; 0x40
   13324:	ble	132cc <__assert_fail@plt+0x2550>
   13328:	cmp	sl, #0
   1332c:	sub	r2, r4, r8
   13330:	streq	sl, [fp]
   13334:	cmp	r2, r5
   13338:	bge	1340c <__assert_fail@plt+0x2690>
   1333c:	cmp	r5, #0
   13340:	bge	133d8 <__assert_fail@plt+0x265c>
   13344:	rsb	r2, r5, #-2147483648	; 0x80000000
   13348:	cmp	r8, r2
   1334c:	movge	r2, #0
   13350:	movlt	r2, #1
   13354:	cmp	r2, #0
   13358:	bne	133ac <__assert_fail@plt+0x2630>
   1335c:	ldr	r0, [sp, #4]
   13360:	add	r5, r8, r5
   13364:	cmp	r9, r5
   13368:	movge	r0, #0
   1336c:	andlt	r0, r0, #1
   13370:	cmp	r0, #0
   13374:	mov	r4, r5
   13378:	bne	133ac <__assert_fail@plt+0x2630>
   1337c:	cmp	r7, #0
   13380:	bge	13420 <__assert_fail@plt+0x26a4>
   13384:	cmp	r5, #0
   13388:	bge	133f8 <__assert_fail@plt+0x267c>
   1338c:	mov	r1, r7
   13390:	mvn	r0, #-2147483648	; 0x80000000
   13394:	bl	13be0 <__assert_fail@plt+0x2e64>
   13398:	cmp	r5, r0
   1339c:	movge	r0, #0
   133a0:	movlt	r0, #1
   133a4:	cmp	r0, #0
   133a8:	beq	13408 <__assert_fail@plt+0x268c>
   133ac:	bl	13558 <__assert_fail@plt+0x27dc>
   133b0:	beq	13318 <__assert_fail@plt+0x259c>
   133b4:	cmp	r4, #0
   133b8:	bge	13474 <__assert_fail@plt+0x26f8>
   133bc:	cmn	r4, #1
   133c0:	beq	13318 <__assert_fail@plt+0x259c>
   133c4:	mov	r1, r4
   133c8:	mov	r0, #-2147483648	; 0x80000000
   133cc:	bl	13be0 <__assert_fail@plt+0x2e64>
   133d0:	cmp	r7, r0
   133d4:	b	132b8 <__assert_fail@plt+0x253c>
   133d8:	cmp	r8, #0
   133dc:	blt	1335c <__assert_fail@plt+0x25e0>
   133e0:	mvn	r2, #-2147483648	; 0x80000000
   133e4:	sub	r2, r2, r5
   133e8:	cmp	r8, r2
   133ec:	movle	r2, #0
   133f0:	movgt	r2, #1
   133f4:	b	13354 <__assert_fail@plt+0x25d8>
   133f8:	cmn	r7, #1
   133fc:	movne	r1, r7
   13400:	movne	r0, #-2147483648	; 0x80000000
   13404:	bne	13458 <__assert_fail@plt+0x26dc>
   13408:	mul	r1, r5, r7
   1340c:	mov	r0, sl
   13410:	bl	130f0 <__assert_fail@plt+0x2374>
   13414:	str	r4, [fp]
   13418:	add	sp, sp, #12
   1341c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13420:	beq	13408 <__assert_fail@plt+0x268c>
   13424:	cmp	r5, #0
   13428:	movge	r1, r7
   1342c:	mvnge	r0, #-2147483648	; 0x80000000
   13430:	bge	13458 <__assert_fail@plt+0x26dc>
   13434:	cmn	r5, #1
   13438:	beq	13408 <__assert_fail@plt+0x268c>
   1343c:	mov	r1, r5
   13440:	mov	r0, #-2147483648	; 0x80000000
   13444:	bl	13be0 <__assert_fail@plt+0x2e64>
   13448:	cmp	r7, r0
   1344c:	movle	r0, #0
   13450:	movgt	r0, #1
   13454:	b	133a4 <__assert_fail@plt+0x2628>
   13458:	bl	13be0 <__assert_fail@plt+0x2e64>
   1345c:	cmp	r5, r0
   13460:	b	1344c <__assert_fail@plt+0x26d0>
   13464:	cmp	r7, #0
   13468:	mov	r4, r9
   1346c:	blt	13308 <__assert_fail@plt+0x258c>
   13470:	beq	13318 <__assert_fail@plt+0x259c>
   13474:	mov	r1, r7
   13478:	mvn	r0, #-2147483648	; 0x80000000
   1347c:	bl	13be0 <__assert_fail@plt+0x2e64>
   13480:	cmp	r0, r4
   13484:	movge	r0, #0
   13488:	movlt	r0, #1
   1348c:	b	132c0 <__assert_fail@plt+0x2544>
   13490:	push	{r4, lr}
   13494:	bl	13598 <__assert_fail@plt+0x281c>
   13498:	cmp	r0, #0
   1349c:	popne	{r4, pc}
   134a0:	bl	13558 <__assert_fail@plt+0x27dc>
   134a4:	mov	r1, #1
   134a8:	b	13490 <__assert_fail@plt+0x2714>
   134ac:	push	{r4, lr}
   134b0:	bl	13598 <__assert_fail@plt+0x281c>
   134b4:	cmp	r0, #0
   134b8:	popne	{r4, pc}
   134bc:	bl	13558 <__assert_fail@plt+0x27dc>
   134c0:	mov	r1, #1
   134c4:	b	134ac <__assert_fail@plt+0x2730>
   134c8:	push	{r4, r5, r6, lr}
   134cc:	mov	r4, r1
   134d0:	mov	r5, r0
   134d4:	mov	r0, r1
   134d8:	bl	130c4 <__assert_fail@plt+0x2348>
   134dc:	mov	r2, r4
   134e0:	mov	r1, r5
   134e4:	pop	{r4, r5, r6, lr}
   134e8:	b	10bcc <memcpy@plt>
   134ec:	push	{r4, r5, r6, lr}
   134f0:	mov	r4, r1
   134f4:	mov	r5, r0
   134f8:	mov	r0, r1
   134fc:	bl	130d8 <__assert_fail@plt+0x235c>
   13500:	mov	r2, r4
   13504:	mov	r1, r5
   13508:	pop	{r4, r5, r6, lr}
   1350c:	b	10bcc <memcpy@plt>
   13510:	push	{r4, r5, r6, lr}
   13514:	mov	r5, r0
   13518:	add	r0, r1, #1
   1351c:	mov	r4, r1
   13520:	bl	130d8 <__assert_fail@plt+0x235c>
   13524:	mov	r2, #0
   13528:	mov	r1, r5
   1352c:	strb	r2, [r0, r4]
   13530:	mov	r2, r4
   13534:	pop	{r4, r5, r6, lr}
   13538:	b	10bcc <memcpy@plt>
   1353c:	push	{r4, lr}
   13540:	mov	r4, r0
   13544:	bl	10cb0 <strlen@plt>
   13548:	add	r1, r0, #1
   1354c:	mov	r0, r4
   13550:	pop	{r4, lr}
   13554:	b	134c8 <__assert_fail@plt+0x274c>
   13558:	ldr	r3, [pc, #44]	; 1358c <__assert_fail@plt+0x2810>
   1355c:	push	{r4, lr}
   13560:	mov	r2, #5
   13564:	ldr	r1, [pc, #36]	; 13590 <__assert_fail@plt+0x2814>
   13568:	mov	r0, #0
   1356c:	ldr	r4, [r3]
   13570:	bl	10bf0 <dcgettext@plt>
   13574:	ldr	r2, [pc, #24]	; 13594 <__assert_fail@plt+0x2818>
   13578:	mov	r1, #0
   1357c:	mov	r3, r0
   13580:	mov	r0, r4
   13584:	bl	10c50 <error@plt>
   13588:	bl	10d70 <abort@plt>
   1358c:	ldrdeq	r5, [r2], -r4
   13590:	andeq	r4, r1, fp, ror r6
   13594:	andeq	r4, r1, r5, lsl #5
   13598:	cmp	r1, #0
   1359c:	cmpne	r0, #0
   135a0:	moveq	r1, #1
   135a4:	moveq	r0, r1
   135a8:	umull	r2, r3, r0, r1
   135ac:	adds	r3, r3, #0
   135b0:	movne	r3, #1
   135b4:	cmp	r2, #0
   135b8:	blt	135c8 <__assert_fail@plt+0x284c>
   135bc:	cmp	r3, #0
   135c0:	bne	135c8 <__assert_fail@plt+0x284c>
   135c4:	b	10b60 <calloc@plt>
   135c8:	push	{r4, lr}
   135cc:	bl	10cc8 <__errno_location@plt>
   135d0:	mov	r3, #12
   135d4:	str	r3, [r0]
   135d8:	mov	r0, #0
   135dc:	pop	{r4, pc}
   135e0:	push	{r0, r1, r4, lr}
   135e4:	subs	r4, r0, #0
   135e8:	bne	135fc <__assert_fail@plt+0x2880>
   135ec:	mov	r0, r4
   135f0:	add	sp, sp, #8
   135f4:	pop	{r4, lr}
   135f8:	b	10b9c <fflush@plt>
   135fc:	bl	10c74 <__freading@plt>
   13600:	cmp	r0, #0
   13604:	beq	135ec <__assert_fail@plt+0x2870>
   13608:	ldr	r3, [r4]
   1360c:	tst	r3, #256	; 0x100
   13610:	beq	135ec <__assert_fail@plt+0x2870>
   13614:	mov	r3, #1
   13618:	str	r3, [sp]
   1361c:	mov	r2, #0
   13620:	mov	r3, #0
   13624:	mov	r0, r4
   13628:	bl	13684 <__assert_fail@plt+0x2908>
   1362c:	b	135ec <__assert_fail@plt+0x2870>
   13630:	push	{r0, r1, r2, r4, r5, lr}
   13634:	mov	r5, r0
   13638:	bl	10cc8 <__errno_location@plt>
   1363c:	ldr	r3, [r0]
   13640:	mov	r4, r0
   13644:	str	r3, [sp]
   13648:	str	r3, [sp, #4]
   1364c:	mov	r3, #0
   13650:	str	r3, [r0]
   13654:	mov	r0, r5
   13658:	bl	10ba8 <free@plt>
   1365c:	ldr	r3, [r4]
   13660:	add	r2, sp, #8
   13664:	cmp	r3, #0
   13668:	moveq	r3, #4
   1366c:	movne	r3, #0
   13670:	add	r3, r2, r3
   13674:	ldr	r3, [r3, #-8]
   13678:	str	r3, [r4]
   1367c:	add	sp, sp, #12
   13680:	pop	{r4, r5, pc}
   13684:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   13688:	mov	r4, r0
   1368c:	ldmib	r0, {ip, lr}
   13690:	ldr	r8, [sp, #32]
   13694:	cmp	lr, ip
   13698:	bne	13704 <__assert_fail@plt+0x2988>
   1369c:	ldr	lr, [r0, #20]
   136a0:	ldr	ip, [r0, #16]
   136a4:	cmp	lr, ip
   136a8:	bne	13704 <__assert_fail@plt+0x2988>
   136ac:	ldr	r5, [r0, #36]	; 0x24
   136b0:	cmp	r5, #0
   136b4:	bne	13704 <__assert_fail@plt+0x2988>
   136b8:	mov	r6, r2
   136bc:	mov	r7, r3
   136c0:	bl	10cec <fileno@plt>
   136c4:	mov	r2, r6
   136c8:	mov	r3, r7
   136cc:	str	r8, [sp]
   136d0:	bl	10c20 <lseek64@plt>
   136d4:	mvn	r3, #0
   136d8:	mvn	r2, #0
   136dc:	cmp	r1, r3
   136e0:	cmpeq	r0, r2
   136e4:	mvneq	r0, #0
   136e8:	ldrne	r3, [r4]
   136ec:	strdne	r0, [r4, #80]	; 0x50
   136f0:	movne	r0, r5
   136f4:	bicne	r3, r3, #16
   136f8:	strne	r3, [r4]
   136fc:	add	sp, sp, #8
   13700:	pop	{r4, r5, r6, r7, r8, pc}
   13704:	str	r8, [sp, #32]
   13708:	mov	r0, r4
   1370c:	add	sp, sp, #8
   13710:	pop	{r4, r5, r6, r7, r8, lr}
   13714:	b	10d04 <fseeko64@plt>
   13718:	cmp	r0, #0
   1371c:	mov	r3, #0
   13720:	moveq	r0, #1
   13724:	adds	r3, r3, #0
   13728:	movne	r3, #1
   1372c:	cmp	r0, #0
   13730:	blt	13740 <__assert_fail@plt+0x29c4>
   13734:	cmp	r3, #0
   13738:	bne	13740 <__assert_fail@plt+0x29c4>
   1373c:	b	10c5c <malloc@plt>
   13740:	push	{r4, lr}
   13744:	bl	10cc8 <__errno_location@plt>
   13748:	mov	r3, #12
   1374c:	str	r3, [r0]
   13750:	mov	r0, #0
   13754:	pop	{r4, pc}
   13758:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1375c:	subs	r5, r0, #0
   13760:	addeq	r5, sp, #4
   13764:	mov	r0, r5
   13768:	mov	r7, r2
   1376c:	mov	r6, r1
   13770:	bl	10c44 <mbrtowc@plt>
   13774:	cmp	r7, #0
   13778:	cmnne	r0, #3
   1377c:	mov	r4, r0
   13780:	bls	1379c <__assert_fail@plt+0x2a20>
   13784:	mov	r0, #0
   13788:	bl	138c0 <__assert_fail@plt+0x2b44>
   1378c:	cmp	r0, #0
   13790:	moveq	r4, #1
   13794:	ldrbeq	r3, [r6]
   13798:	streq	r3, [r5]
   1379c:	mov	r0, r4
   137a0:	add	sp, sp, #12
   137a4:	pop	{r4, r5, r6, r7, pc}
   137a8:	cmp	r0, #0
   137ac:	push	{r4, lr}
   137b0:	mov	r4, r1
   137b4:	bne	137c4 <__assert_fail@plt+0x2a48>
   137b8:	mov	r0, r1
   137bc:	pop	{r4, lr}
   137c0:	b	13718 <__assert_fail@plt+0x299c>
   137c4:	cmp	r1, #0
   137c8:	bne	137d8 <__assert_fail@plt+0x2a5c>
   137cc:	bl	13630 <__assert_fail@plt+0x28b4>
   137d0:	mov	r0, #0
   137d4:	pop	{r4, pc}
   137d8:	cmp	r1, #0
   137dc:	blt	137ec <__assert_fail@plt+0x2a70>
   137e0:	mov	r3, #0
   137e4:	cmp	r3, r3
   137e8:	beq	137fc <__assert_fail@plt+0x2a80>
   137ec:	bl	10cc8 <__errno_location@plt>
   137f0:	mov	r3, #12
   137f4:	str	r3, [r0]
   137f8:	b	137d0 <__assert_fail@plt+0x2a54>
   137fc:	pop	{r4, lr}
   13800:	b	10bfc <realloc@plt>
   13804:	push	{r4, r5, r6, lr}
   13808:	subs	r4, r2, #0
   1380c:	mov	r6, r0
   13810:	mov	r5, r1
   13814:	beq	1382c <__assert_fail@plt+0x2ab0>
   13818:	mov	r1, r4
   1381c:	mvn	r0, #0
   13820:	bl	139d4 <__assert_fail@plt+0x2c58>
   13824:	cmp	r0, r5
   13828:	bcc	1383c <__assert_fail@plt+0x2ac0>
   1382c:	mul	r1, r5, r4
   13830:	mov	r0, r6
   13834:	pop	{r4, r5, r6, lr}
   13838:	b	137a8 <__assert_fail@plt+0x2a2c>
   1383c:	bl	10cc8 <__errno_location@plt>
   13840:	mov	r3, #12
   13844:	str	r3, [r0]
   13848:	mov	r0, #0
   1384c:	pop	{r4, r5, r6, pc}
   13850:	push	{r4, r5, r6, lr}
   13854:	mov	r4, r0
   13858:	bl	10c38 <__fpending@plt>
   1385c:	mov	r5, r0
   13860:	mov	r0, r4
   13864:	bl	10bb4 <ferror@plt>
   13868:	mov	r6, r0
   1386c:	mov	r0, r4
   13870:	bl	10cf8 <fclose@plt>
   13874:	cmp	r6, #0
   13878:	mov	r4, r0
   1387c:	bne	138a8 <__assert_fail@plt+0x2b2c>
   13880:	cmp	r0, #0
   13884:	beq	138a0 <__assert_fail@plt+0x2b24>
   13888:	cmp	r5, #0
   1388c:	bne	138b8 <__assert_fail@plt+0x2b3c>
   13890:	bl	10cc8 <__errno_location@plt>
   13894:	ldr	r4, [r0]
   13898:	subs	r4, r4, #9
   1389c:	mvnne	r4, #0
   138a0:	mov	r0, r4
   138a4:	pop	{r4, r5, r6, pc}
   138a8:	cmp	r0, #0
   138ac:	bne	138b8 <__assert_fail@plt+0x2b3c>
   138b0:	bl	10cc8 <__errno_location@plt>
   138b4:	str	r4, [r0]
   138b8:	mvn	r4, #0
   138bc:	b	138a0 <__assert_fail@plt+0x2b24>
   138c0:	push	{lr}		; (str lr, [sp, #-4]!)
   138c4:	sub	sp, sp, #268	; 0x10c
   138c8:	ldr	r2, [pc, #64]	; 13910 <__assert_fail@plt+0x2b94>
   138cc:	add	r1, sp, #4
   138d0:	bl	13950 <__assert_fail@plt+0x2bd4>
   138d4:	cmp	r0, #0
   138d8:	movne	r0, #0
   138dc:	bne	13908 <__assert_fail@plt+0x2b8c>
   138e0:	ldr	r1, [pc, #44]	; 13914 <__assert_fail@plt+0x2b98>
   138e4:	add	r0, sp, #4
   138e8:	bl	10b78 <strcmp@plt>
   138ec:	cmp	r0, #0
   138f0:	beq	13908 <__assert_fail@plt+0x2b8c>
   138f4:	ldr	r1, [pc, #28]	; 13918 <__assert_fail@plt+0x2b9c>
   138f8:	add	r0, sp, #4
   138fc:	bl	10b78 <strcmp@plt>
   13900:	adds	r0, r0, #0
   13904:	movne	r0, #1
   13908:	add	sp, sp, #268	; 0x10c
   1390c:	pop	{pc}		; (ldr pc, [sp], #4)
   13910:	andeq	r0, r0, r1, lsl #2
   13914:	andeq	r4, r1, ip, lsl #13
   13918:	andeq	r4, r1, lr, lsl #13
   1391c:	push	{r4, lr}
   13920:	mov	r0, #14
   13924:	bl	10d28 <nl_langinfo@plt>
   13928:	ldr	r3, [pc, #24]	; 13948 <__assert_fail@plt+0x2bcc>
   1392c:	cmp	r0, #0
   13930:	moveq	r0, r3
   13934:	ldr	r3, [pc, #16]	; 1394c <__assert_fail@plt+0x2bd0>
   13938:	ldrb	r2, [r0]
   1393c:	cmp	r2, #0
   13940:	moveq	r0, r3
   13944:	pop	{r4, pc}
   13948:	andeq	r4, r1, r4, lsl r2
   1394c:	muleq	r1, r4, r6
   13950:	push	{r4, r5, r6, lr}
   13954:	mov	r5, r1
   13958:	mov	r1, #0
   1395c:	mov	r4, r2
   13960:	bl	10d10 <setlocale@plt>
   13964:	subs	r6, r0, #0
   13968:	bne	1397c <__assert_fail@plt+0x2c00>
   1396c:	cmp	r4, #0
   13970:	strbne	r6, [r5]
   13974:	mov	r0, #22
   13978:	pop	{r4, r5, r6, pc}
   1397c:	bl	10cb0 <strlen@plt>
   13980:	cmp	r4, r0
   13984:	bls	139a0 <__assert_fail@plt+0x2c24>
   13988:	add	r2, r0, #1
   1398c:	mov	r1, r6
   13990:	mov	r0, r5
   13994:	bl	10bcc <memcpy@plt>
   13998:	mov	r0, #0
   1399c:	pop	{r4, r5, r6, pc}
   139a0:	cmp	r4, #0
   139a4:	beq	139c4 <__assert_fail@plt+0x2c48>
   139a8:	sub	r4, r4, #1
   139ac:	mov	r2, r4
   139b0:	mov	r1, r6
   139b4:	mov	r0, r5
   139b8:	bl	10bcc <memcpy@plt>
   139bc:	mov	r3, #0
   139c0:	strb	r3, [r5, r4]
   139c4:	mov	r0, #34	; 0x22
   139c8:	pop	{r4, r5, r6, pc}
   139cc:	mov	r1, #0
   139d0:	b	10d10 <setlocale@plt>
   139d4:	subs	r2, r1, #1
   139d8:	bxeq	lr
   139dc:	bcc	13bb4 <__assert_fail@plt+0x2e38>
   139e0:	cmp	r0, r1
   139e4:	bls	13b98 <__assert_fail@plt+0x2e1c>
   139e8:	tst	r1, r2
   139ec:	beq	13ba4 <__assert_fail@plt+0x2e28>
   139f0:	clz	r3, r0
   139f4:	clz	r2, r1
   139f8:	sub	r3, r2, r3
   139fc:	rsbs	r3, r3, #31
   13a00:	addne	r3, r3, r3, lsl #1
   13a04:	mov	r2, #0
   13a08:	addne	pc, pc, r3, lsl #2
   13a0c:	nop			; (mov r0, r0)
   13a10:	cmp	r0, r1, lsl #31
   13a14:	adc	r2, r2, r2
   13a18:	subcs	r0, r0, r1, lsl #31
   13a1c:	cmp	r0, r1, lsl #30
   13a20:	adc	r2, r2, r2
   13a24:	subcs	r0, r0, r1, lsl #30
   13a28:	cmp	r0, r1, lsl #29
   13a2c:	adc	r2, r2, r2
   13a30:	subcs	r0, r0, r1, lsl #29
   13a34:	cmp	r0, r1, lsl #28
   13a38:	adc	r2, r2, r2
   13a3c:	subcs	r0, r0, r1, lsl #28
   13a40:	cmp	r0, r1, lsl #27
   13a44:	adc	r2, r2, r2
   13a48:	subcs	r0, r0, r1, lsl #27
   13a4c:	cmp	r0, r1, lsl #26
   13a50:	adc	r2, r2, r2
   13a54:	subcs	r0, r0, r1, lsl #26
   13a58:	cmp	r0, r1, lsl #25
   13a5c:	adc	r2, r2, r2
   13a60:	subcs	r0, r0, r1, lsl #25
   13a64:	cmp	r0, r1, lsl #24
   13a68:	adc	r2, r2, r2
   13a6c:	subcs	r0, r0, r1, lsl #24
   13a70:	cmp	r0, r1, lsl #23
   13a74:	adc	r2, r2, r2
   13a78:	subcs	r0, r0, r1, lsl #23
   13a7c:	cmp	r0, r1, lsl #22
   13a80:	adc	r2, r2, r2
   13a84:	subcs	r0, r0, r1, lsl #22
   13a88:	cmp	r0, r1, lsl #21
   13a8c:	adc	r2, r2, r2
   13a90:	subcs	r0, r0, r1, lsl #21
   13a94:	cmp	r0, r1, lsl #20
   13a98:	adc	r2, r2, r2
   13a9c:	subcs	r0, r0, r1, lsl #20
   13aa0:	cmp	r0, r1, lsl #19
   13aa4:	adc	r2, r2, r2
   13aa8:	subcs	r0, r0, r1, lsl #19
   13aac:	cmp	r0, r1, lsl #18
   13ab0:	adc	r2, r2, r2
   13ab4:	subcs	r0, r0, r1, lsl #18
   13ab8:	cmp	r0, r1, lsl #17
   13abc:	adc	r2, r2, r2
   13ac0:	subcs	r0, r0, r1, lsl #17
   13ac4:	cmp	r0, r1, lsl #16
   13ac8:	adc	r2, r2, r2
   13acc:	subcs	r0, r0, r1, lsl #16
   13ad0:	cmp	r0, r1, lsl #15
   13ad4:	adc	r2, r2, r2
   13ad8:	subcs	r0, r0, r1, lsl #15
   13adc:	cmp	r0, r1, lsl #14
   13ae0:	adc	r2, r2, r2
   13ae4:	subcs	r0, r0, r1, lsl #14
   13ae8:	cmp	r0, r1, lsl #13
   13aec:	adc	r2, r2, r2
   13af0:	subcs	r0, r0, r1, lsl #13
   13af4:	cmp	r0, r1, lsl #12
   13af8:	adc	r2, r2, r2
   13afc:	subcs	r0, r0, r1, lsl #12
   13b00:	cmp	r0, r1, lsl #11
   13b04:	adc	r2, r2, r2
   13b08:	subcs	r0, r0, r1, lsl #11
   13b0c:	cmp	r0, r1, lsl #10
   13b10:	adc	r2, r2, r2
   13b14:	subcs	r0, r0, r1, lsl #10
   13b18:	cmp	r0, r1, lsl #9
   13b1c:	adc	r2, r2, r2
   13b20:	subcs	r0, r0, r1, lsl #9
   13b24:	cmp	r0, r1, lsl #8
   13b28:	adc	r2, r2, r2
   13b2c:	subcs	r0, r0, r1, lsl #8
   13b30:	cmp	r0, r1, lsl #7
   13b34:	adc	r2, r2, r2
   13b38:	subcs	r0, r0, r1, lsl #7
   13b3c:	cmp	r0, r1, lsl #6
   13b40:	adc	r2, r2, r2
   13b44:	subcs	r0, r0, r1, lsl #6
   13b48:	cmp	r0, r1, lsl #5
   13b4c:	adc	r2, r2, r2
   13b50:	subcs	r0, r0, r1, lsl #5
   13b54:	cmp	r0, r1, lsl #4
   13b58:	adc	r2, r2, r2
   13b5c:	subcs	r0, r0, r1, lsl #4
   13b60:	cmp	r0, r1, lsl #3
   13b64:	adc	r2, r2, r2
   13b68:	subcs	r0, r0, r1, lsl #3
   13b6c:	cmp	r0, r1, lsl #2
   13b70:	adc	r2, r2, r2
   13b74:	subcs	r0, r0, r1, lsl #2
   13b78:	cmp	r0, r1, lsl #1
   13b7c:	adc	r2, r2, r2
   13b80:	subcs	r0, r0, r1, lsl #1
   13b84:	cmp	r0, r1
   13b88:	adc	r2, r2, r2
   13b8c:	subcs	r0, r0, r1
   13b90:	mov	r0, r2
   13b94:	bx	lr
   13b98:	moveq	r0, #1
   13b9c:	movne	r0, #0
   13ba0:	bx	lr
   13ba4:	clz	r2, r1
   13ba8:	rsb	r2, r2, #31
   13bac:	lsr	r0, r0, r2
   13bb0:	bx	lr
   13bb4:	cmp	r0, #0
   13bb8:	mvnne	r0, #0
   13bbc:	b	13e20 <__assert_fail@plt+0x30a4>
   13bc0:	cmp	r1, #0
   13bc4:	beq	13bb4 <__assert_fail@plt+0x2e38>
   13bc8:	push	{r0, r1, lr}
   13bcc:	bl	139d4 <__assert_fail@plt+0x2c58>
   13bd0:	pop	{r1, r2, lr}
   13bd4:	mul	r3, r2, r0
   13bd8:	sub	r1, r1, r3
   13bdc:	bx	lr
   13be0:	cmp	r1, #0
   13be4:	beq	13df0 <__assert_fail@plt+0x3074>
   13be8:	eor	ip, r0, r1
   13bec:	rsbmi	r1, r1, #0
   13bf0:	subs	r2, r1, #1
   13bf4:	beq	13dbc <__assert_fail@plt+0x3040>
   13bf8:	movs	r3, r0
   13bfc:	rsbmi	r3, r0, #0
   13c00:	cmp	r3, r1
   13c04:	bls	13dc8 <__assert_fail@plt+0x304c>
   13c08:	tst	r1, r2
   13c0c:	beq	13dd8 <__assert_fail@plt+0x305c>
   13c10:	clz	r2, r3
   13c14:	clz	r0, r1
   13c18:	sub	r2, r0, r2
   13c1c:	rsbs	r2, r2, #31
   13c20:	addne	r2, r2, r2, lsl #1
   13c24:	mov	r0, #0
   13c28:	addne	pc, pc, r2, lsl #2
   13c2c:	nop			; (mov r0, r0)
   13c30:	cmp	r3, r1, lsl #31
   13c34:	adc	r0, r0, r0
   13c38:	subcs	r3, r3, r1, lsl #31
   13c3c:	cmp	r3, r1, lsl #30
   13c40:	adc	r0, r0, r0
   13c44:	subcs	r3, r3, r1, lsl #30
   13c48:	cmp	r3, r1, lsl #29
   13c4c:	adc	r0, r0, r0
   13c50:	subcs	r3, r3, r1, lsl #29
   13c54:	cmp	r3, r1, lsl #28
   13c58:	adc	r0, r0, r0
   13c5c:	subcs	r3, r3, r1, lsl #28
   13c60:	cmp	r3, r1, lsl #27
   13c64:	adc	r0, r0, r0
   13c68:	subcs	r3, r3, r1, lsl #27
   13c6c:	cmp	r3, r1, lsl #26
   13c70:	adc	r0, r0, r0
   13c74:	subcs	r3, r3, r1, lsl #26
   13c78:	cmp	r3, r1, lsl #25
   13c7c:	adc	r0, r0, r0
   13c80:	subcs	r3, r3, r1, lsl #25
   13c84:	cmp	r3, r1, lsl #24
   13c88:	adc	r0, r0, r0
   13c8c:	subcs	r3, r3, r1, lsl #24
   13c90:	cmp	r3, r1, lsl #23
   13c94:	adc	r0, r0, r0
   13c98:	subcs	r3, r3, r1, lsl #23
   13c9c:	cmp	r3, r1, lsl #22
   13ca0:	adc	r0, r0, r0
   13ca4:	subcs	r3, r3, r1, lsl #22
   13ca8:	cmp	r3, r1, lsl #21
   13cac:	adc	r0, r0, r0
   13cb0:	subcs	r3, r3, r1, lsl #21
   13cb4:	cmp	r3, r1, lsl #20
   13cb8:	adc	r0, r0, r0
   13cbc:	subcs	r3, r3, r1, lsl #20
   13cc0:	cmp	r3, r1, lsl #19
   13cc4:	adc	r0, r0, r0
   13cc8:	subcs	r3, r3, r1, lsl #19
   13ccc:	cmp	r3, r1, lsl #18
   13cd0:	adc	r0, r0, r0
   13cd4:	subcs	r3, r3, r1, lsl #18
   13cd8:	cmp	r3, r1, lsl #17
   13cdc:	adc	r0, r0, r0
   13ce0:	subcs	r3, r3, r1, lsl #17
   13ce4:	cmp	r3, r1, lsl #16
   13ce8:	adc	r0, r0, r0
   13cec:	subcs	r3, r3, r1, lsl #16
   13cf0:	cmp	r3, r1, lsl #15
   13cf4:	adc	r0, r0, r0
   13cf8:	subcs	r3, r3, r1, lsl #15
   13cfc:	cmp	r3, r1, lsl #14
   13d00:	adc	r0, r0, r0
   13d04:	subcs	r3, r3, r1, lsl #14
   13d08:	cmp	r3, r1, lsl #13
   13d0c:	adc	r0, r0, r0
   13d10:	subcs	r3, r3, r1, lsl #13
   13d14:	cmp	r3, r1, lsl #12
   13d18:	adc	r0, r0, r0
   13d1c:	subcs	r3, r3, r1, lsl #12
   13d20:	cmp	r3, r1, lsl #11
   13d24:	adc	r0, r0, r0
   13d28:	subcs	r3, r3, r1, lsl #11
   13d2c:	cmp	r3, r1, lsl #10
   13d30:	adc	r0, r0, r0
   13d34:	subcs	r3, r3, r1, lsl #10
   13d38:	cmp	r3, r1, lsl #9
   13d3c:	adc	r0, r0, r0
   13d40:	subcs	r3, r3, r1, lsl #9
   13d44:	cmp	r3, r1, lsl #8
   13d48:	adc	r0, r0, r0
   13d4c:	subcs	r3, r3, r1, lsl #8
   13d50:	cmp	r3, r1, lsl #7
   13d54:	adc	r0, r0, r0
   13d58:	subcs	r3, r3, r1, lsl #7
   13d5c:	cmp	r3, r1, lsl #6
   13d60:	adc	r0, r0, r0
   13d64:	subcs	r3, r3, r1, lsl #6
   13d68:	cmp	r3, r1, lsl #5
   13d6c:	adc	r0, r0, r0
   13d70:	subcs	r3, r3, r1, lsl #5
   13d74:	cmp	r3, r1, lsl #4
   13d78:	adc	r0, r0, r0
   13d7c:	subcs	r3, r3, r1, lsl #4
   13d80:	cmp	r3, r1, lsl #3
   13d84:	adc	r0, r0, r0
   13d88:	subcs	r3, r3, r1, lsl #3
   13d8c:	cmp	r3, r1, lsl #2
   13d90:	adc	r0, r0, r0
   13d94:	subcs	r3, r3, r1, lsl #2
   13d98:	cmp	r3, r1, lsl #1
   13d9c:	adc	r0, r0, r0
   13da0:	subcs	r3, r3, r1, lsl #1
   13da4:	cmp	r3, r1
   13da8:	adc	r0, r0, r0
   13dac:	subcs	r3, r3, r1
   13db0:	cmp	ip, #0
   13db4:	rsbmi	r0, r0, #0
   13db8:	bx	lr
   13dbc:	teq	ip, r0
   13dc0:	rsbmi	r0, r0, #0
   13dc4:	bx	lr
   13dc8:	movcc	r0, #0
   13dcc:	asreq	r0, ip, #31
   13dd0:	orreq	r0, r0, #1
   13dd4:	bx	lr
   13dd8:	clz	r2, r1
   13ddc:	rsb	r2, r2, #31
   13de0:	cmp	ip, #0
   13de4:	lsr	r0, r3, r2
   13de8:	rsbmi	r0, r0, #0
   13dec:	bx	lr
   13df0:	cmp	r0, #0
   13df4:	mvngt	r0, #-2147483648	; 0x80000000
   13df8:	movlt	r0, #-2147483648	; 0x80000000
   13dfc:	b	13e20 <__assert_fail@plt+0x30a4>
   13e00:	cmp	r1, #0
   13e04:	beq	13df0 <__assert_fail@plt+0x3074>
   13e08:	push	{r0, r1, lr}
   13e0c:	bl	13be8 <__assert_fail@plt+0x2e6c>
   13e10:	pop	{r1, r2, lr}
   13e14:	mul	r3, r2, r0
   13e18:	sub	r1, r1, r3
   13e1c:	bx	lr
   13e20:	push	{r1, lr}
   13e24:	mov	r0, #8
   13e28:	bl	10b6c <raise@plt>
   13e2c:	pop	{r1, pc}
   13e30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13e34:	mov	r7, r0
   13e38:	ldr	r6, [pc, #72]	; 13e88 <__assert_fail@plt+0x310c>
   13e3c:	ldr	r5, [pc, #72]	; 13e8c <__assert_fail@plt+0x3110>
   13e40:	add	r6, pc, r6
   13e44:	add	r5, pc, r5
   13e48:	sub	r6, r6, r5
   13e4c:	mov	r8, r1
   13e50:	mov	r9, r2
   13e54:	bl	10b40 <calloc@plt-0x20>
   13e58:	asrs	r6, r6, #2
   13e5c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e60:	mov	r4, #0
   13e64:	add	r4, r4, #1
   13e68:	ldr	r3, [r5], #4
   13e6c:	mov	r2, r9
   13e70:	mov	r1, r8
   13e74:	mov	r0, r7
   13e78:	blx	r3
   13e7c:	cmp	r6, r4
   13e80:	bne	13e64 <__assert_fail@plt+0x30e8>
   13e84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e88:	andeq	r1, r1, r8, asr #1
   13e8c:	andeq	r1, r1, r0, asr #1
   13e90:	bx	lr
   13e94:	ldr	r3, [pc, #12]	; 13ea8 <__assert_fail@plt+0x312c>
   13e98:	mov	r1, #0
   13e9c:	add	r3, pc, r3
   13ea0:	ldr	r2, [r3]
   13ea4:	b	10cd4 <__cxa_atexit@plt>
   13ea8:	andeq	r1, r1, r8, lsr #4

Disassembly of section .fini:

00013eac <.fini>:
   13eac:	push	{r3, lr}
   13eb0:	pop	{r3, pc}
