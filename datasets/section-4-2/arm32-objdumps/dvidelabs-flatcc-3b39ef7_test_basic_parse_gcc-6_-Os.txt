
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_basic_parse:     file format elf32-littlearm


Disassembly of section .init:

00012428 <.init>:
   12428:	push	{r3, lr}
   1242c:	bl	125c0 <_start@@Base+0x3c>
   12430:	pop	{r3, pc}

Disassembly of section .plt:

00012434 <raise@plt-0x14>:
   12434:	push	{lr}		; (str lr, [sp, #-4]!)
   12438:	ldr	lr, [pc, #4]	; 12444 <raise@plt-0x4>
   1243c:	add	lr, pc, lr
   12440:	ldr	pc, [lr, #8]!
   12444:			; <UNDEFINED> instruction: 0x00019bbc

00012448 <raise@plt>:
   12448:	add	ip, pc, #0, 12
   1244c:	add	ip, ip, #102400	; 0x19000
   12450:	ldr	pc, [ip, #3004]!	; 0xbbc

00012454 <free@plt>:
   12454:	add	ip, pc, #0, 12
   12458:	add	ip, ip, #102400	; 0x19000
   1245c:	ldr	pc, [ip, #2996]!	; 0xbb4

00012460 <memcpy@plt>:
   12460:	add	ip, pc, #0, 12
   12464:	add	ip, ip, #102400	; 0x19000
   12468:	ldr	pc, [ip, #2988]!	; 0xbac

0001246c <memcmp@plt>:
   1246c:	add	ip, pc, #0, 12
   12470:	add	ip, ip, #102400	; 0x19000
   12474:	ldr	pc, [ip, #2980]!	; 0xba4

00012478 <realloc@plt>:
   12478:	add	ip, pc, #0, 12
   1247c:	add	ip, ip, #102400	; 0x19000
   12480:	ldr	pc, [ip, #2972]!	; 0xb9c

00012484 <malloc@plt>:
   12484:	add	ip, pc, #0, 12
   12488:	add	ip, ip, #102400	; 0x19000
   1248c:	ldr	pc, [ip, #2964]!	; 0xb94

00012490 <__libc_start_main@plt>:
   12490:	add	ip, pc, #0, 12
   12494:	add	ip, ip, #102400	; 0x19000
   12498:	ldr	pc, [ip, #2956]!	; 0xb8c

0001249c <__gmon_start__@plt>:
   1249c:	add	ip, pc, #0, 12
   124a0:	add	ip, ip, #102400	; 0x19000
   124a4:	ldr	pc, [ip, #2948]!	; 0xb84

000124a8 <strlen@plt>:
   124a8:	add	ip, pc, #0, 12
   124ac:	add	ip, ip, #102400	; 0x19000
   124b0:	ldr	pc, [ip, #2940]!	; 0xb7c

000124b4 <fprintf@plt>:
   124b4:	add	ip, pc, #0, 12
   124b8:	add	ip, ip, #102400	; 0x19000
   124bc:	ldr	pc, [ip, #2932]!	; 0xb74

000124c0 <posix_memalign@plt>:
   124c0:	add	ip, pc, #0, 12
   124c4:	add	ip, ip, #102400	; 0x19000
   124c8:	ldr	pc, [ip, #2924]!	; 0xb6c

000124cc <memset@plt>:
   124cc:	add	ip, pc, #0, 12
   124d0:	add	ip, ip, #102400	; 0x19000
   124d4:	ldr	pc, [ip, #2916]!	; 0xb64

000124d8 <strtod@plt>:
   124d8:	add	ip, pc, #0, 12
   124dc:	add	ip, ip, #102400	; 0x19000
   124e0:	ldr	pc, [ip, #2908]!	; 0xb5c

000124e4 <memchr@plt>:
   124e4:	add	ip, pc, #0, 12
   124e8:	add	ip, ip, #102400	; 0x19000
   124ec:	ldr	pc, [ip, #2900]!	; 0xb54

000124f0 <fputs@plt>:
   124f0:	add	ip, pc, #0, 12
   124f4:	add	ip, ip, #102400	; 0x19000
   124f8:	ldr	pc, [ip, #2892]!	; 0xb4c

000124fc <abort@plt>:
   124fc:	add	ip, pc, #0, 12
   12500:	add	ip, ip, #102400	; 0x19000
   12504:	ldr	pc, [ip, #2884]!	; 0xb44

00012508 <__assert_fail@plt>:
   12508:	add	ip, pc, #0, 12
   1250c:	add	ip, ip, #102400	; 0x19000
   12510:	ldr	pc, [ip, #2876]!	; 0xb3c

Disassembly of section .text:

00012518 <main@@Base-0x24>:
   12518:	push	{r4, lr}
   1251c:	mov	r2, #260	; 0x104
   12520:	ldr	r3, [pc, #8]	; 12530 <__assert_fail@plt+0x28>
   12524:	ldr	r1, [pc, #8]	; 12534 <__assert_fail@plt+0x2c>
   12528:	ldr	r0, [pc, #8]	; 12538 <__assert_fail@plt+0x30>
   1252c:	bl	12508 <__assert_fail@plt>
   12530:	andeq	sl, r1, r0, lsr #14
   12534:			; <UNDEFINED> instruction: 0x0001afb3
   12538:	andeq	fp, r1, r9

0001253c <main@@Base>:
   1253c:	push	{lr}		; (str lr, [sp, #-4]!)
   12540:	sub	sp, sp, #244	; 0xf4
   12544:	mvn	r3, #0
   12548:	add	r0, sp, #8
   1254c:	str	r3, [sp, #4]
   12550:	bl	13a80 <flatcc_builder_init@@Base>
   12554:	ldr	r2, [pc, #36]	; 12580 <main@@Base+0x44>
   12558:	add	r3, sp, #4
   1255c:	sub	r1, r2, #644	; 0x284
   12560:	sub	r1, r1, #1
   12564:	add	r0, sp, #8
   12568:	bl	128f4 <test@@Base>
   1256c:	add	r0, sp, #8
   12570:	bl	13c0c <flatcc_builder_clear@@Base>
   12574:	ldr	r0, [sp, #4]
   12578:	add	sp, sp, #244	; 0xf4
   1257c:	pop	{pc}		; (ldr pc, [sp], #4)
   12580:	andeq	r9, r1, r9, ror #23

00012584 <_start@@Base>:
   12584:	mov	fp, #0
   12588:	mov	lr, #0
   1258c:	pop	{r1}		; (ldr r1, [sp], #4)
   12590:	mov	r2, sp
   12594:	push	{r2}		; (str r2, [sp, #-4]!)
   12598:	push	{r0}		; (str r0, [sp, #-4]!)
   1259c:	ldr	ip, [pc, #16]	; 125b4 <_start@@Base+0x30>
   125a0:	push	{ip}		; (str ip, [sp, #-4]!)
   125a4:	ldr	r0, [pc, #12]	; 125b8 <_start@@Base+0x34>
   125a8:	ldr	r3, [pc, #12]	; 125bc <_start@@Base+0x38>
   125ac:	bl	12490 <__libc_start_main@plt>
   125b0:	bl	124fc <abort@plt>
   125b4:	andeq	r9, r1, r0, asr r9
   125b8:	andeq	r2, r1, ip, lsr r5
   125bc:	strdeq	r9, [r1], -r0
   125c0:	ldr	r3, [pc, #20]	; 125dc <_start@@Base+0x58>
   125c4:	ldr	r2, [pc, #20]	; 125e0 <_start@@Base+0x5c>
   125c8:	add	r3, pc, r3
   125cc:	ldr	r2, [r3, r2]
   125d0:	cmp	r2, #0
   125d4:	bxeq	lr
   125d8:	b	1249c <__gmon_start__@plt>
   125dc:	andeq	r9, r1, r0, lsr sl
   125e0:	andeq	r0, r0, r0, asr r0
   125e4:	ldr	r3, [pc, #28]	; 12608 <_start@@Base+0x84>
   125e8:	ldr	r0, [pc, #28]	; 1260c <_start@@Base+0x88>
   125ec:	sub	r3, r3, r0
   125f0:	cmp	r3, #6
   125f4:	bxls	lr
   125f8:	ldr	r3, [pc, #16]	; 12610 <_start@@Base+0x8c>
   125fc:	cmp	r3, #0
   12600:	bxeq	lr
   12604:	bx	r3
   12608:	ldrdeq	ip, [r2], -r3
   1260c:	ldrdeq	ip, [r2], -r0
   12610:	andeq	r0, r0, r0
   12614:	ldr	r1, [pc, #36]	; 12640 <_start@@Base+0xbc>
   12618:	ldr	r0, [pc, #36]	; 12644 <_start@@Base+0xc0>
   1261c:	sub	r1, r1, r0
   12620:	asr	r1, r1, #2
   12624:	add	r1, r1, r1, lsr #31
   12628:	asrs	r1, r1, #1
   1262c:	bxeq	lr
   12630:	ldr	r3, [pc, #16]	; 12648 <_start@@Base+0xc4>
   12634:	cmp	r3, #0
   12638:	bxeq	lr
   1263c:	bx	r3
   12640:	ldrdeq	ip, [r2], -r0
   12644:	ldrdeq	ip, [r2], -r0
   12648:	andeq	r0, r0, r0
   1264c:	push	{r4, lr}
   12650:	ldr	r4, [pc, #24]	; 12670 <_start@@Base+0xec>
   12654:	ldrb	r3, [r4]
   12658:	cmp	r3, #0
   1265c:	popne	{r4, pc}
   12660:	bl	125e4 <_start@@Base+0x60>
   12664:	mov	r3, #1
   12668:	strb	r3, [r4]
   1266c:	pop	{r4, pc}
   12670:	ldrdeq	ip, [r2], -r4
   12674:	ldr	r0, [pc, #40]	; 126a4 <_start@@Base+0x120>
   12678:	ldr	r3, [r0]
   1267c:	cmp	r3, #0
   12680:	bne	12688 <_start@@Base+0x104>
   12684:	b	12614 <_start@@Base+0x90>
   12688:	ldr	r3, [pc, #24]	; 126a8 <_start@@Base+0x124>
   1268c:	cmp	r3, #0
   12690:	beq	12684 <_start@@Base+0x100>
   12694:	push	{r4, lr}
   12698:	blx	r3
   1269c:	pop	{r4, lr}
   126a0:	b	12614 <_start@@Base+0x90>
   126a4:	andeq	fp, r2, r4, lsl pc
	...
   126b0:	sub	r1, r1, r0
   126b4:	cmp	r1, #8
   126b8:	push	{r4, r5, r6, r7, lr}
   126bc:	bhi	126f0 <_start@@Base+0x16c>
   126c0:	sub	r1, r1, #1
   126c4:	cmp	r1, #7
   126c8:	ldrls	pc, [pc, r1, lsl #2]
   126cc:	b	127dc <_start@@Base+0x258>
   126d0:	ldrdeq	r2, [r1], -r0
   126d4:	andeq	r2, r1, r4, asr #15
   126d8:			; <UNDEFINED> instruction: 0x000127b8
   126dc:	andeq	r2, r1, ip, lsr #15
   126e0:	andeq	r2, r1, r0, lsr #15
   126e4:	muleq	r1, r4, r7
   126e8:	andeq	r2, r1, ip, lsl #15
   126ec:	strdeq	r2, [r1], -r0
   126f0:	ldrb	r4, [r0, #7]
   126f4:	ldrb	r6, [r0, #6]
   126f8:	mov	r5, #0
   126fc:	mov	r3, #0
   12700:	orr	r3, r3, r5
   12704:	lsl	r2, r6, #8
   12708:	orr	r2, r2, r4
   1270c:	ldrb	r6, [r0, #5]
   12710:	mov	r5, #0
   12714:	orr	r3, r3, r5
   12718:	lsl	r4, r6, #16
   1271c:	orr	r2, r2, r4
   12720:	ldrb	r6, [r0, #4]
   12724:	mov	r5, #0
   12728:	orr	r5, r5, r3
   1272c:	lsl	r4, r6, #24
   12730:	orr	r4, r4, r2
   12734:	ldrb	r3, [r0, #3]
   12738:	mov	r2, #0
   1273c:	orr	r4, r4, r2
   12740:	orr	r5, r5, r3
   12744:	ldrb	r6, [r0, #2]
   12748:	mov	r2, #0
   1274c:	orr	r4, r4, r2
   12750:	lsl	r3, r6, #8
   12754:	orr	r5, r5, r3
   12758:	ldrb	r6, [r0, #1]
   1275c:	mov	r2, #0
   12760:	mov	r7, #0
   12764:	orr	r2, r2, r4
   12768:	lsl	r3, r6, #16
   1276c:	orr	r3, r3, r5
   12770:	ldrb	r4, [r0]
   12774:	mov	r0, #0
   12778:	mov	r5, #0
   1277c:	orr	r0, r0, r2
   12780:	lsl	r1, r4, #24
   12784:	orr	r1, r1, r3
   12788:	pop	{r4, r5, r6, r7, pc}
   1278c:	mov	r4, #0
   12790:	b	126f4 <_start@@Base+0x170>
   12794:	mov	r2, #0
   12798:	mov	r3, #0
   1279c:	b	1270c <_start@@Base+0x188>
   127a0:	mov	r2, #0
   127a4:	mov	r3, #0
   127a8:	b	12720 <_start@@Base+0x19c>
   127ac:	mov	r4, #0
   127b0:	mov	r5, #0
   127b4:	b	12734 <_start@@Base+0x1b0>
   127b8:	mov	r4, #0
   127bc:	mov	r5, #0
   127c0:	b	12744 <_start@@Base+0x1c0>
   127c4:	mov	r4, #0
   127c8:	mov	r5, #0
   127cc:	b	12758 <_start@@Base+0x1d4>
   127d0:	mov	r2, #0
   127d4:	mov	r3, #0
   127d8:	b	12770 <_start@@Base+0x1ec>
   127dc:	mov	r0, #0
   127e0:	mov	r1, #0
   127e4:	pop	{r4, r5, r6, r7, pc}
   127e8:	sub	r3, r2, r1
   127ec:	cmp	r3, #1
   127f0:	ble	12814 <_start@@Base+0x290>
   127f4:	ldrb	r3, [r1]
   127f8:	cmp	r3, #32
   127fc:	bhi	12818 <_start@@Base+0x294>
   12800:	bne	12814 <_start@@Base+0x290>
   12804:	ldrb	r3, [r1, #1]
   12808:	cmp	r3, #32
   1280c:	addhi	r1, r1, #1
   12810:	bhi	12818 <_start@@Base+0x294>
   12814:	b	17480 <flatcc_json_parser_space_ext@@Base>
   12818:	mov	r0, r1
   1281c:	bx	lr
   12820:	ldr	r3, [r0, #12]
   12824:	cmp	r3, #0
   12828:	beq	128c4 <_start@@Base+0x340>
   1282c:	push	{lr}		; (str lr, [sp, #-4]!)
   12830:	mov	r3, r1
   12834:	mov	lr, #0
   12838:	cmp	r2, r3
   1283c:	mov	r1, r3
   12840:	beq	12854 <_start@@Base+0x2d0>
   12844:	ldrb	ip, [r3]
   12848:	add	r3, r3, #1
   1284c:	cmp	ip, #32
   12850:	bhi	12868 <_start@@Base+0x2e4>
   12854:	cmp	lr, #46	; 0x2e
   12858:	bne	128ec <_start@@Base+0x368>
   1285c:	pop	{lr}		; (ldr lr, [sp], #4)
   12860:	mov	r3, #5
   12864:	b	172c0 <flatcc_json_parser_set_error@@Base>
   12868:	cmp	ip, #46	; 0x2e
   1286c:	cmpne	ip, #95	; 0x5f
   12870:	beq	12898 <_start@@Base+0x314>
   12874:	tst	ip, #128	; 0x80
   12878:	bne	12898 <_start@@Base+0x314>
   1287c:	sub	lr, ip, #48	; 0x30
   12880:	cmp	lr, #9
   12884:	bls	12898 <_start@@Base+0x314>
   12888:	orr	lr, ip, #32
   1288c:	sub	lr, lr, #97	; 0x61
   12890:	cmp	lr, #25
   12894:	bhi	128a0 <_start@@Base+0x31c>
   12898:	mov	lr, ip
   1289c:	b	12838 <_start@@Base+0x2b4>
   128a0:	mov	lr, ip
   128a4:	b	12854 <_start@@Base+0x2d0>
   128a8:	cmp	r3, #92	; 0x5c
   128ac:	bne	128c0 <_start@@Base+0x33c>
   128b0:	sub	r3, r2, r1
   128b4:	cmp	r3, #1
   128b8:	ble	128e4 <_start@@Base+0x360>
   128bc:	add	r1, r1, #1
   128c0:	add	r1, r1, #1
   128c4:	cmp	r1, r2
   128c8:	beq	128e4 <_start@@Base+0x360>
   128cc:	ldrb	r3, [r1]
   128d0:	cmp	r3, #34	; 0x22
   128d4:	bne	128a8 <_start@@Base+0x324>
   128d8:	add	r1, r1, #1
   128dc:	mov	r0, r1
   128e0:	bx	lr
   128e4:	mov	r3, #20
   128e8:	b	12864 <_start@@Base+0x2e0>
   128ec:	mov	r0, r1
   128f0:	pop	{pc}		; (ldr pc, [sp], #4)

000128f4 <test@@Base>:
   128f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128f8:	sub	sp, sp, #84	; 0x54
   128fc:	mov	r4, r1
   12900:	mov	r5, r2
   12904:	mov	r6, r0
   12908:	mov	r2, #44	; 0x2c
   1290c:	mov	r1, #0
   12910:	add	r0, sp, #36	; 0x24
   12914:	mov	r8, r3
   12918:	bl	124cc <memset@plt>
   1291c:	mov	r3, #1
   12920:	str	r3, [sp, #52]	; 0x34
   12924:	mov	r3, #0
   12928:	mov	r2, r3
   1292c:	ldr	r1, [pc, #1044]	; 12d48 <test@@Base+0x454>
   12930:	mov	r0, r6
   12934:	str	r4, [sp, #40]	; 0x28
   12938:	bl	14184 <flatcc_builder_start_buffer@@Base>
   1293c:	mov	r1, r4
   12940:	mov	r2, r5
   12944:	add	r0, sp, #36	; 0x24
   12948:	bl	127e8 <_start@@Base+0x264>
   1294c:	cmp	r5, r0
   12950:	mov	r4, r0
   12954:	bne	1296c <test@@Base+0x78>
   12958:	ldr	r3, [pc, #1004]	; 12d4c <test@@Base+0x458>
   1295c:	ldr	r0, [pc, #1004]	; 12d50 <test@@Base+0x45c>
   12960:	ldr	r1, [r3]
   12964:	bl	124f0 <fputs@plt>
   12968:	b	12c40 <test@@Base+0x34c>
   1296c:	bls	12a60 <test@@Base+0x16c>
   12970:	ldrb	r3, [r0]
   12974:	cmp	r3, #123	; 0x7b
   12978:	bne	12a60 <test@@Base+0x16c>
   1297c:	add	r1, r0, #1
   12980:	mov	r2, r5
   12984:	add	r0, sp, #36	; 0x24
   12988:	bl	127e8 <_start@@Base+0x264>
   1298c:	cmp	r5, r0
   12990:	mov	r4, r0
   12994:	beq	12958 <test@@Base+0x64>
   12998:	mov	r1, #11
   1299c:	mov	r0, r6
   129a0:	bl	14988 <flatcc_builder_start_table@@Base>
   129a4:	add	r9, sp, #17
   129a8:	cmp	r4, r5
   129ac:	beq	129e8 <test@@Base+0xf4>
   129b0:	ldrb	r3, [r4]
   129b4:	cmp	r3, #34	; 0x22
   129b8:	addeq	r4, r4, #1
   129bc:	moveq	r3, #0
   129c0:	beq	12a7c <test@@Base+0x188>
   129c4:	cmp	r3, #46	; 0x2e
   129c8:	movne	r3, #1
   129cc:	bne	12a7c <test@@Base+0x188>
   129d0:	mov	r1, r4
   129d4:	mov	r3, #5
   129d8:	mov	r2, r5
   129dc:	add	r0, sp, #36	; 0x24
   129e0:	bl	172c0 <flatcc_json_parser_set_error@@Base>
   129e4:	mov	r4, r0
   129e8:	mov	r1, r5
   129ec:	mov	r0, r4
   129f0:	bl	126b0 <_start@@Base+0x12c>
   129f4:	sub	r3, r5, r4
   129f8:	ldr	r2, [pc, #852]	; 12d54 <test@@Base+0x460>
   129fc:	cmp	r3, #8
   12a00:	mvn	r3, #0
   12a04:	addgt	r7, r4, #8
   12a08:	movle	r7, r5
   12a0c:	mov	sl, r0
   12a10:	mov	fp, r1
   12a14:	and	r0, r2, r0
   12a18:	and	r1, r3, r1
   12a1c:	strd	r0, [sp, #8]
   12a20:	ldrd	r2, [sp, #8]
   12a24:	add	r1, pc, #732	; 0x2dc
   12a28:	ldrd	r0, [r1]
   12a2c:	cmp	r3, r1
   12a30:	cmpeq	r2, r0
   12a34:	bhi	12b70 <test@@Base+0x27c>
   12a38:	add	r3, pc, #720	; 0x2d0
   12a3c:	ldrd	r2, [r3]
   12a40:	and	sl, sl, #-16777216	; 0xff000000
   12a44:	cmp	fp, r3
   12a48:	cmpeq	sl, r2
   12a4c:	beq	12a84 <test@@Base+0x190>
   12a50:	mov	r3, #13
   12a54:	mov	r2, r5
   12a58:	mov	r1, r4
   12a5c:	b	12cf8 <test@@Base+0x404>
   12a60:	mov	r2, #123	; 0x7b
   12a64:	ldr	r3, [pc, #736]	; 12d4c <test@@Base+0x458>
   12a68:	ldr	r1, [pc, #744]	; 12d58 <test@@Base+0x464>
   12a6c:	ldr	r0, [r3]
   12a70:	bl	124b4 <fprintf@plt>
   12a74:	mov	r3, #17
   12a78:	b	12a54 <test@@Base+0x160>
   12a7c:	str	r3, [sp, #48]	; 0x30
   12a80:	b	129e8 <test@@Base+0xf4>
   12a84:	add	r1, r4, #5
   12a88:	mov	r2, r5
   12a8c:	add	r0, sp, #36	; 0x24
   12a90:	bl	12820 <_start@@Base+0x29c>
   12a94:	mov	r2, r5
   12a98:	mov	r1, r0
   12a9c:	add	r0, sp, #36	; 0x24
   12aa0:	bl	127e8 <_start@@Base+0x264>
   12aa4:	cmp	r5, r0
   12aa8:	mov	r4, r0
   12aac:	beq	12958 <test@@Base+0x64>
   12ab0:	bls	130b8 <test@@Base+0x7c4>
   12ab4:	ldrb	r3, [r0]
   12ab8:	cmp	r3, #58	; 0x3a
   12abc:	bne	130b8 <test@@Base+0x7c4>
   12ac0:	add	r1, r0, #1
   12ac4:	mov	r2, r5
   12ac8:	add	r0, sp, #36	; 0x24
   12acc:	bl	127e8 <_start@@Base+0x264>
   12ad0:	cmp	r5, r0
   12ad4:	mov	r4, r0
   12ad8:	beq	12958 <test@@Base+0x64>
   12adc:	mov	r3, #1
   12ae0:	mov	r2, r3
   12ae4:	mov	r1, #0
   12ae8:	mov	r0, r6
   12aec:	bl	15948 <flatcc_builder_table_add@@Base>
   12af0:	subs	r7, r0, #0
   12af4:	beq	12c40 <test@@Base+0x34c>
   12af8:	mov	r2, #0
   12afc:	mov	r3, #0
   12b00:	mov	r1, r4
   12b04:	strd	r2, [sp, #24]
   12b08:	add	r3, sp, #80	; 0x50
   12b0c:	add	r0, sp, #36	; 0x24
   12b10:	str	r2, [r3, #-60]!	; 0xffffffc4
   12b14:	strb	r2, [r7]
   12b18:	add	r2, sp, #24
   12b1c:	str	r2, [sp]
   12b20:	mov	r2, r5
   12b24:	bl	185b4 <flatcc_json_parser_integer@@Base>
   12b28:	cmp	r4, r0
   12b2c:	beq	12c40 <test@@Base+0x34c>
   12b30:	ldr	r3, [sp, #20]
   12b34:	cmp	r3, #0
   12b38:	beq	12b54 <test@@Base+0x260>
   12b3c:	mov	r3, #8
   12b40:	mov	r1, r0
   12b44:	mov	r2, r5
   12b48:	add	r0, sp, #36	; 0x24
   12b4c:	bl	172c0 <flatcc_json_parser_set_error@@Base>
   12b50:	b	12c38 <test@@Base+0x344>
   12b54:	ldrd	r2, [sp, #24]
   12b58:	cmp	r3, #0
   12b5c:	cmpeq	r2, #255	; 0xff
   12b60:	strbls	r2, [r7]
   12b64:	bls	12e38 <test@@Base+0x544>
   12b68:	mov	r3, #7
   12b6c:	b	12b40 <test@@Base+0x24c>
   12b70:	add	r3, pc, #416	; 0x1a0
   12b74:	ldrd	r2, [r3]
   12b78:	mov	r0, #0
   12b7c:	cmp	fp, r3
   12b80:	cmpeq	r0, r2
   12b84:	bhi	12f94 <test@@Base+0x6a0>
   12b88:	add	r1, pc, #400	; 0x190
   12b8c:	ldrd	r0, [r1]
   12b90:	cmp	fp, r1
   12b94:	cmpeq	sl, r0
   12b98:	bhi	12ca0 <test@@Base+0x3ac>
   12b9c:	add	r1, pc, #388	; 0x184
   12ba0:	ldrd	r0, [r1]
   12ba4:	ldrd	r2, [sp, #8]
   12ba8:	cmp	r3, r1
   12bac:	cmpeq	r2, r0
   12bb0:	bne	12a50 <test@@Base+0x15c>
   12bb4:	add	r1, r4, #6
   12bb8:	mov	r2, r5
   12bbc:	add	r0, sp, #36	; 0x24
   12bc0:	bl	12820 <_start@@Base+0x29c>
   12bc4:	mov	r2, r5
   12bc8:	mov	r1, r0
   12bcc:	add	r0, sp, #36	; 0x24
   12bd0:	bl	127e8 <_start@@Base+0x264>
   12bd4:	cmp	r5, r0
   12bd8:	mov	r4, r0
   12bdc:	beq	12958 <test@@Base+0x64>
   12be0:	bls	130b8 <test@@Base+0x7c4>
   12be4:	ldrb	r3, [r0]
   12be8:	cmp	r3, #58	; 0x3a
   12bec:	bne	130b8 <test@@Base+0x7c4>
   12bf0:	add	r1, r0, #1
   12bf4:	mov	r2, r5
   12bf8:	add	r0, sp, #36	; 0x24
   12bfc:	bl	127e8 <_start@@Base+0x264>
   12c00:	cmp	r5, r0
   12c04:	mov	r4, r0
   12c08:	beq	12958 <test@@Base+0x64>
   12c0c:	mov	r3, #8
   12c10:	mov	r2, r3
   12c14:	mov	r1, #1
   12c18:	mov	r0, r6
   12c1c:	bl	15948 <flatcc_builder_table_add@@Base>
   12c20:	subs	r3, r0, #0
   12c24:	beq	12c40 <test@@Base+0x34c>
   12c28:	mov	r2, r5
   12c2c:	mov	r1, r4
   12c30:	add	r0, sp, #36	; 0x24
   12c34:	bl	17e48 <flatcc_json_parser_double@@Base>
   12c38:	cmp	r4, r0
   12c3c:	bne	12e38 <test@@Base+0x544>
   12c40:	ldr	r0, [sp, #60]	; 0x3c
   12c44:	ldr	r3, [pc, #256]	; 12d4c <test@@Base+0x458>
   12c48:	cmp	r0, #0
   12c4c:	beq	131a8 <test@@Base+0x8b4>
   12c50:	ldr	r7, [r3]
   12c54:	ldr	r5, [sp, #72]	; 0x48
   12c58:	ldr	r3, [sp, #40]	; 0x28
   12c5c:	ldr	r9, [sp, #52]	; 0x34
   12c60:	sub	r5, r5, r3
   12c64:	bl	172a0 <flatcc_json_parser_error_string@@Base>
   12c68:	add	r5, r5, #1
   12c6c:	mov	r3, r5
   12c70:	mov	r2, r9
   12c74:	ldr	r1, [pc, #224]	; 12d5c <test@@Base+0x468>
   12c78:	str	r0, [sp]
   12c7c:	mov	r0, r7
   12c80:	bl	124b4 <fprintf@plt>
   12c84:	mov	r0, r6
   12c88:	bl	13c00 <flatcc_builder_reset@@Base>
   12c8c:	ldr	r3, [sp, #60]	; 0x3c
   12c90:	mov	r0, r4
   12c94:	str	r3, [r8]
   12c98:	add	sp, sp, #84	; 0x54
   12c9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ca0:	add	r3, pc, #136	; 0x88
   12ca4:	ldrd	r2, [r3]
   12ca8:	cmp	fp, r3
   12cac:	cmpeq	sl, r2
   12cb0:	bne	12a50 <test@@Base+0x15c>
   12cb4:	mov	r1, r5
   12cb8:	mov	r0, r7
   12cbc:	bl	126b0 <_start@@Base+0x12c>
   12cc0:	add	r3, pc, #112	; 0x70
   12cc4:	ldrd	r2, [r3]
   12cc8:	mov	r0, #0
   12ccc:	cmp	r1, r3
   12cd0:	cmpeq	r0, r2
   12cd4:	bhi	12ea8 <test@@Base+0x5b4>
   12cd8:	add	r3, pc, #96	; 0x60
   12cdc:	ldrd	r2, [r3]
   12ce0:	cmp	r1, r3
   12ce4:	cmpeq	r0, r2
   12ce8:	beq	12d60 <test@@Base+0x46c>
   12cec:	mov	r3, #13
   12cf0:	mov	r2, r5
   12cf4:	mov	r1, r7
   12cf8:	add	r0, sp, #36	; 0x24
   12cfc:	bl	172c0 <flatcc_json_parser_set_error@@Base>
   12d00:	mov	r4, r0
   12d04:	b	12c40 <test@@Base+0x34c>
   12d08:	mcrvs	15, 3, pc, cr3, cr15, {7}	; <UNPREDICTABLE>
   12d0c:	cmnvc	r5, #-1140850687	; 0xbc000001
   12d10:	strvc	r0, [r0], #-0
   12d14:			; <UNDEFINED> instruction: 0x66697273
   12d18:			; <UNDEFINED> instruction: 0xffffffff
   12d1c:	bvc	1d6def4 <__bss_end__@@Base+0x1d41e1c>
   12d20:	mcrvs	3, 3, r7, cr4, cr15, {0}
   12d24:	cmnvc	r5, #-1140850687	; 0xbc000001
   12d28:	cdpvs	0, 6, cr0, cr4, cr0, {0}
   12d2c:	cmnvc	r5, #-1140850687	; 0xbc000001
   12d30:	cdpvs	3, 6, cr7, cr4, cr0, {1}
   12d34:	cmnvc	r5, #-1140850687	; 0xbc000001
   12d38:			; <UNDEFINED> instruction: 0xffffffff
   12d3c:	stclvs	6, cr6, [r5], #-460	; 0xfffffe34
   12d40:	andeq	r0, r0, r0
   12d44:	stfvse	f6, [r5], #-400	; 0xfffffe70
   12d48:	andeq	r9, r1, sl, ror #23
   12d4c:	ldrdeq	ip, [r2], -r0
   12d50:	andeq	r9, r1, pc, ror #23
   12d54:			; <UNDEFINED> instruction: 0xffff0000
   12d58:	strdeq	r9, [r1], -sp
   12d5c:	andeq	r9, r1, lr, lsr #24
   12d60:	mov	r2, r5
   12d64:	add	r1, r7, #4
   12d68:	add	r0, sp, #36	; 0x24
   12d6c:	bl	12820 <_start@@Base+0x29c>
   12d70:	mov	r2, r5
   12d74:	mov	r1, r0
   12d78:	add	r0, sp, #36	; 0x24
   12d7c:	bl	127e8 <_start@@Base+0x264>
   12d80:	cmp	r5, r0
   12d84:	mov	r4, r0
   12d88:	beq	12958 <test@@Base+0x64>
   12d8c:	bls	130b8 <test@@Base+0x7c4>
   12d90:	ldrb	r3, [r0]
   12d94:	cmp	r3, #58	; 0x3a
   12d98:	bne	130b8 <test@@Base+0x7c4>
   12d9c:	add	r1, r0, #1
   12da0:	mov	r2, r5
   12da4:	add	r0, sp, #36	; 0x24
   12da8:	bl	127e8 <_start@@Base+0x264>
   12dac:	cmp	r5, r0
   12db0:	mov	r4, r0
   12db4:	beq	12958 <test@@Base+0x64>
   12db8:	mov	r3, #8
   12dbc:	mov	r2, r3
   12dc0:	mov	r1, #3
   12dc4:	mov	r0, r6
   12dc8:	bl	15948 <flatcc_builder_table_add@@Base>
   12dcc:	subs	r7, r0, #0
   12dd0:	beq	12c40 <test@@Base+0x34c>
   12dd4:	add	r3, sp, #80	; 0x50
   12dd8:	mov	r0, #0
   12ddc:	mov	r1, #0
   12de0:	mov	r2, #0
   12de4:	str	r2, [r3, #-60]!	; 0xffffffc4
   12de8:	add	r2, sp, #24
   12dec:	strd	r0, [sp, #24]
   12df0:	strd	r0, [r7]
   12df4:	str	r2, [sp]
   12df8:	mov	r1, r4
   12dfc:	mov	r2, r5
   12e00:	add	r0, sp, #36	; 0x24
   12e04:	bl	185b4 <flatcc_json_parser_integer@@Base>
   12e08:	cmp	r4, r0
   12e0c:	beq	12c40 <test@@Base+0x34c>
   12e10:	ldr	r1, [sp, #20]
   12e14:	ldrd	r2, [sp, #24]
   12e18:	cmp	r1, #0
   12e1c:	beq	12e98 <test@@Base+0x5a4>
   12e20:	cmp	r3, #-2147483648	; 0x80000000
   12e24:	cmpeq	r2, #0
   12e28:	bhi	12b3c <test@@Base+0x248>
   12e2c:	rsbs	r2, r2, #0
   12e30:	rsc	r3, r3, #0
   12e34:	strd	r2, [r7]
   12e38:	mov	r1, r0
   12e3c:	mov	r2, r5
   12e40:	add	r0, sp, #36	; 0x24
   12e44:	bl	127e8 <_start@@Base+0x264>
   12e48:	cmp	r5, r0
   12e4c:	mov	r4, r0
   12e50:	beq	12958 <test@@Base+0x64>
   12e54:	ldrb	r3, [r0]
   12e58:	cmp	r3, #44	; 0x2c
   12e5c:	bne	13154 <test@@Base+0x860>
   12e60:	add	r1, r0, #1
   12e64:	mov	r2, r5
   12e68:	add	r0, sp, #36	; 0x24
   12e6c:	bl	127e8 <_start@@Base+0x264>
   12e70:	cmp	r5, r0
   12e74:	mov	r4, r0
   12e78:	beq	12958 <test@@Base+0x64>
   12e7c:	ldrb	r3, [r0]
   12e80:	cmp	r3, #125	; 0x7d
   12e84:	bne	129a8 <test@@Base+0xb4>
   12e88:	cmp	r5, r0
   12e8c:	bhi	13164 <test@@Base+0x870>
   12e90:	mov	r2, #125	; 0x7d
   12e94:	b	12a64 <test@@Base+0x170>
   12e98:	cmp	r2, #0
   12e9c:	sbcs	r1, r3, #0
   12ea0:	bge	12e34 <test@@Base+0x540>
   12ea4:	b	12b68 <test@@Base+0x274>
   12ea8:	add	r3, pc, #776	; 0x308
   12eac:	ldrd	r2, [r3]
   12eb0:	cmp	r1, r3
   12eb4:	cmpeq	r0, r2
   12eb8:	bne	12cec <test@@Base+0x3f8>
   12ebc:	mov	r2, r5
   12ec0:	add	r1, r7, #4
   12ec4:	add	r0, sp, #36	; 0x24
   12ec8:	bl	12820 <_start@@Base+0x29c>
   12ecc:	mov	r2, r5
   12ed0:	mov	r1, r0
   12ed4:	add	r0, sp, #36	; 0x24
   12ed8:	bl	127e8 <_start@@Base+0x264>
   12edc:	cmp	r5, r0
   12ee0:	mov	r4, r0
   12ee4:	beq	12958 <test@@Base+0x64>
   12ee8:	bls	130b8 <test@@Base+0x7c4>
   12eec:	ldrb	r3, [r0]
   12ef0:	cmp	r3, #58	; 0x3a
   12ef4:	bne	130b8 <test@@Base+0x7c4>
   12ef8:	add	r1, r0, #1
   12efc:	mov	r2, r5
   12f00:	add	r0, sp, #36	; 0x24
   12f04:	bl	127e8 <_start@@Base+0x264>
   12f08:	cmp	r5, r0
   12f0c:	mov	r4, r0
   12f10:	beq	12958 <test@@Base+0x64>
   12f14:	mov	r3, #4
   12f18:	mov	r2, r3
   12f1c:	mov	r1, #2
   12f20:	mov	r0, r6
   12f24:	bl	15948 <flatcc_builder_table_add@@Base>
   12f28:	subs	r7, r0, #0
   12f2c:	beq	12c40 <test@@Base+0x34c>
   12f30:	mov	r2, #0
   12f34:	mov	r3, #0
   12f38:	mov	r1, r4
   12f3c:	strd	r2, [sp, #24]
   12f40:	add	r3, sp, #80	; 0x50
   12f44:	add	r0, sp, #36	; 0x24
   12f48:	str	r2, [r3, #-60]!	; 0xffffffc4
   12f4c:	str	r2, [r7]
   12f50:	add	r2, sp, #24
   12f54:	str	r2, [sp]
   12f58:	mov	r2, r5
   12f5c:	bl	185b4 <flatcc_json_parser_integer@@Base>
   12f60:	cmp	r4, r0
   12f64:	beq	12c40 <test@@Base+0x34c>
   12f68:	ldr	r3, [sp, #20]
   12f6c:	cmp	r3, #0
   12f70:	bne	12b3c <test@@Base+0x248>
   12f74:	ldrd	r2, [sp, #24]
   12f78:	mov	fp, #0
   12f7c:	mvn	sl, #0
   12f80:	cmp	r3, fp
   12f84:	cmpeq	r2, sl
   12f88:	strls	r2, [r7]
   12f8c:	bls	12e38 <test@@Base+0x544>
   12f90:	b	12b68 <test@@Base+0x274>
   12f94:	add	r3, pc, #548	; 0x224
   12f98:	ldrd	r2, [r3]
   12f9c:	cmp	fp, r3
   12fa0:	cmpeq	r0, r2
   12fa4:	bne	12a50 <test@@Base+0x15c>
   12fa8:	add	r1, r4, #4
   12fac:	mov	r2, r5
   12fb0:	add	r0, sp, #36	; 0x24
   12fb4:	bl	12820 <_start@@Base+0x29c>
   12fb8:	mov	r2, r5
   12fbc:	mov	r1, r0
   12fc0:	add	r0, sp, #36	; 0x24
   12fc4:	bl	127e8 <_start@@Base+0x264>
   12fc8:	cmp	r5, r0
   12fcc:	mov	r4, r0
   12fd0:	beq	12958 <test@@Base+0x64>
   12fd4:	bls	130b8 <test@@Base+0x7c4>
   12fd8:	ldrb	r3, [r0]
   12fdc:	cmp	r3, #58	; 0x3a
   12fe0:	bne	130b8 <test@@Base+0x7c4>
   12fe4:	add	r1, r0, #1
   12fe8:	mov	r2, r5
   12fec:	add	r0, sp, #36	; 0x24
   12ff0:	bl	127e8 <_start@@Base+0x264>
   12ff4:	cmp	r5, r0
   12ff8:	mov	r4, r0
   12ffc:	beq	12958 <test@@Base+0x64>
   13000:	ldrb	r3, [r0]
   13004:	cmp	r3, #34	; 0x22
   13008:	addeq	r7, r0, #1
   1300c:	beq	13028 <test@@Base+0x734>
   13010:	mov	r1, r0
   13014:	mov	r3, #16
   13018:	mov	r2, r5
   1301c:	add	r0, sp, #36	; 0x24
   13020:	bl	172c0 <flatcc_json_parser_set_error@@Base>
   13024:	mov	r7, r0
   13028:	mov	r2, r5
   1302c:	mov	r1, r7
   13030:	add	r0, sp, #36	; 0x24
   13034:	bl	17404 <flatcc_json_parser_string_part@@Base>
   13038:	cmp	r5, r0
   1303c:	mov	r4, r0
   13040:	beq	12c40 <test@@Base+0x34c>
   13044:	ldrb	r3, [r0]
   13048:	sub	sl, r0, r7
   1304c:	cmp	r3, #34	; 0x22
   13050:	bne	130c0 <test@@Base+0x7cc>
   13054:	mov	r2, sl
   13058:	mov	r1, r7
   1305c:	mov	r0, r6
   13060:	bl	157b8 <flatcc_builder_create_string@@Base>
   13064:	cmp	r0, #0
   13068:	mov	r7, r0
   1306c:	beq	12c40 <test@@Base+0x34c>
   13070:	mov	r1, #10
   13074:	mov	r0, r6
   13078:	bl	15afc <flatcc_builder_table_add_offset@@Base>
   1307c:	cmp	r0, #0
   13080:	beq	12c40 <test@@Base+0x34c>
   13084:	cmp	r4, r5
   13088:	str	r7, [r0]
   1308c:	beq	130a0 <test@@Base+0x7ac>
   13090:	ldrb	r3, [r4]
   13094:	cmp	r3, #34	; 0x22
   13098:	addeq	r0, r4, #1
   1309c:	beq	12e38 <test@@Base+0x544>
   130a0:	mov	r3, #20
   130a4:	mov	r2, r5
   130a8:	mov	r1, r4
   130ac:	add	r0, sp, #36	; 0x24
   130b0:	bl	172c0 <flatcc_json_parser_set_error@@Base>
   130b4:	b	12e38 <test@@Base+0x544>
   130b8:	mov	r2, #58	; 0x3a
   130bc:	b	12a64 <test@@Base+0x170>
   130c0:	mov	r0, r6
   130c4:	bl	1490c <flatcc_builder_start_string@@Base>
   130c8:	mov	r1, sl
   130cc:	mov	r0, r6
   130d0:	bl	145d4 <flatcc_builder_extend_string@@Base>
   130d4:	cmp	r0, #0
   130d8:	beq	12c40 <test@@Base+0x34c>
   130dc:	mov	r2, sl
   130e0:	mov	r1, r7
   130e4:	bl	12460 <memcpy@plt>
   130e8:	add	r3, sp, #16
   130ec:	mov	r1, r4
   130f0:	mov	r2, r5
   130f4:	add	r0, sp, #36	; 0x24
   130f8:	bl	17998 <flatcc_json_parser_string_escape@@Base>
   130fc:	ldrb	r2, [sp, #16]
   13100:	mov	r1, r9
   13104:	mov	r7, r0
   13108:	mov	r0, r6
   1310c:	bl	1463c <flatcc_builder_append_string@@Base>
   13110:	mov	r2, r5
   13114:	mov	r1, r7
   13118:	add	r0, sp, #36	; 0x24
   1311c:	bl	17404 <flatcc_json_parser_string_part@@Base>
   13120:	cmp	r5, r0
   13124:	mov	r4, r0
   13128:	beq	12c40 <test@@Base+0x34c>
   1312c:	sub	r2, r0, r7
   13130:	mov	r1, r7
   13134:	mov	r0, r6
   13138:	bl	1463c <flatcc_builder_append_string@@Base>
   1313c:	ldrb	r3, [r4]
   13140:	cmp	r3, #34	; 0x22
   13144:	bne	130e8 <test@@Base+0x7f4>
   13148:	mov	r0, r6
   1314c:	bl	158b0 <flatcc_builder_end_string@@Base>
   13150:	b	13064 <test@@Base+0x770>
   13154:	cmp	r5, r0
   13158:	bls	12e90 <test@@Base+0x59c>
   1315c:	cmp	r3, #125	; 0x7d
   13160:	bne	12e90 <test@@Base+0x59c>
   13164:	mov	r0, r6
   13168:	bl	14fc4 <flatcc_builder_end_table@@Base>
   1316c:	add	r4, r4, #1
   13170:	mov	r1, r0
   13174:	mov	r0, r6
   13178:	bl	14224 <flatcc_builder_end_buffer@@Base>
   1317c:	mov	r1, r4
   13180:	mov	r2, r5
   13184:	add	r0, sp, #36	; 0x24
   13188:	bl	127e8 <_start@@Base+0x264>
   1318c:	cmp	r5, r0
   13190:	mov	r4, r0
   13194:	beq	12c40 <test@@Base+0x34c>
   13198:	ldr	r3, [pc, #40]	; 131c8 <test@@Base+0x8d4>
   1319c:	ldr	r0, [pc, #40]	; 131cc <test@@Base+0x8d8>
   131a0:	ldr	r1, [r3]
   131a4:	b	12964 <test@@Base+0x70>
   131a8:	ldr	r1, [r3]
   131ac:	ldr	r0, [pc, #28]	; 131d0 <test@@Base+0x8dc>
   131b0:	bl	124f0 <fputs@plt>
   131b4:	b	12c8c <test@@Base+0x398>
   131b8:	andeq	r0, r0, r0
   131bc:	stclvs	6, cr6, [r5], #-464	; 0xfffffe30
   131c0:	andeq	r0, r0, r0
   131c4:	bvc	1d6e3a0 <__bss_end__@@Base+0x1d422c8>
   131c8:	ldrdeq	ip, [r2], -r0
   131cc:	andeq	r9, r1, r3, lsl ip
   131d0:	andeq	r9, r1, r9, lsr ip
   131d4:	ldr	ip, [r0, #28]
   131d8:	ldr	r3, [r0, #64]	; 0x40
   131dc:	ldr	r2, [r0, #60]	; 0x3c
   131e0:	sub	r3, r3, ip
   131e4:	cmp	r3, r1
   131e8:	strls	r3, [r0, #24]
   131ec:	strhi	r1, [r0, #24]
   131f0:	ldr	r3, [r0, #32]
   131f4:	add	r2, r2, ip
   131f8:	str	r2, [r0, #16]
   131fc:	str	r1, [r3, #4]
   13200:	bx	lr
   13204:	push	{r0, r1, r4, r5, r6, lr}
   13208:	mov	r6, r2
   1320c:	ldr	r2, [r0, #28]
   13210:	mov	r3, #1
   13214:	str	r3, [sp]
   13218:	add	r2, r1, r2
   1321c:	ldr	r5, [r0, #48]	; 0x30
   13220:	add	r1, r0, #60	; 0x3c
   13224:	mov	r4, r0
   13228:	ldr	r0, [r0, #40]	; 0x28
   1322c:	blx	r5
   13230:	subs	r5, r0, #0
   13234:	mvnne	r5, #0
   13238:	bne	13248 <test@@Base+0x954>
   1323c:	mov	r1, r6
   13240:	mov	r0, r4
   13244:	bl	131d4 <test@@Base+0x8e0>
   13248:	mov	r0, r5
   1324c:	add	sp, sp, #8
   13250:	pop	{r4, r5, r6, pc}
   13254:	push	{r4, r5, r6, lr}
   13258:	mov	r4, r0
   1325c:	ldr	r5, [r0, #20]
   13260:	ldr	r3, [r0, #24]
   13264:	add	r1, r5, r1
   13268:	cmp	r1, r3
   1326c:	str	r1, [r0, #20]
   13270:	bcs	13280 <test@@Base+0x98c>
   13274:	ldr	r0, [r4, #16]
   13278:	add	r0, r0, r5
   1327c:	pop	{r4, r5, r6, pc}
   13280:	mvn	r2, #3
   13284:	add	r1, r1, #1
   13288:	bl	13204 <test@@Base+0x910>
   1328c:	cmp	r0, #0
   13290:	beq	13274 <test@@Base+0x980>
   13294:	mov	r0, #0
   13298:	pop	{r4, r5, r6, pc}
   1329c:	push	{r4, lr}
   132a0:	mov	r4, r0
   132a4:	ldr	r2, [r0, #20]
   132a8:	mov	r1, #0
   132ac:	ldr	r0, [r0, #16]
   132b0:	bl	124cc <memset@plt>
   132b4:	ldr	r3, [r4, #32]
   132b8:	mov	r0, r4
   132bc:	ldr	r2, [r3, #8]
   132c0:	ldr	r1, [r3, #4]
   132c4:	str	r2, [r4, #20]
   132c8:	ldr	r2, [r3]
   132cc:	str	r2, [r4, #28]
   132d0:	bl	131d4 <test@@Base+0x8e0>
   132d4:	ldrh	r3, [r4, #130]	; 0x82
   132d8:	ldrh	r2, [r4, #128]	; 0x80
   132dc:	cmp	r2, r3
   132e0:	strhcc	r3, [r4, #128]	; 0x80
   132e4:	ldr	r3, [r4, #32]
   132e8:	sub	r3, r3, #36	; 0x24
   132ec:	ldrh	r2, [r3, #48]	; 0x30
   132f0:	str	r3, [r4, #32]
   132f4:	ldr	r3, [r4, #156]	; 0x9c
   132f8:	strh	r2, [r4, #130]	; 0x82
   132fc:	sub	r3, r3, #1
   13300:	str	r3, [r4, #156]	; 0x9c
   13304:	pop	{r4, pc}
   13308:	ldr	r3, [r0, #20]
   1330c:	mov	r2, r1
   13310:	sub	r3, r3, r1
   13314:	str	r3, [r0, #20]
   13318:	ldr	r0, [r0, #16]
   1331c:	mov	r1, #0
   13320:	add	r0, r0, r3
   13324:	b	124cc <memset@plt>
   13328:	push	{r4, r5, r6, lr}
   1332c:	mov	r6, r1
   13330:	mov	r1, r2
   13334:	mov	r4, r2
   13338:	bl	13254 <test@@Base+0x960>
   1333c:	subs	r5, r0, #0
   13340:	beq	13350 <test@@Base+0xa5c>
   13344:	mov	r2, r4
   13348:	mov	r1, r6
   1334c:	bl	12460 <memcpy@plt>
   13350:	mov	r0, r5
   13354:	pop	{r4, r5, r6, pc}
   13358:	push	{r0, r1, r4, lr}
   1335c:	add	r3, sp, #8
   13360:	cmp	r0, #4
   13364:	mov	r4, #0
   13368:	mov	r2, r1
   1336c:	str	r4, [r3, #-4]!
   13370:	movcs	r1, r0
   13374:	movcc	r1, #4
   13378:	mov	r0, r3
   1337c:	bl	124c0 <posix_memalign@plt>
   13380:	cmp	r0, r4
   13384:	beq	1339c <test@@Base+0xaa8>
   13388:	ldr	r0, [sp, #4]
   1338c:	cmp	r0, r4
   13390:	beq	1339c <test@@Base+0xaa8>
   13394:	bl	12454 <free@plt>
   13398:	str	r4, [sp, #4]
   1339c:	ldr	r0, [sp, #4]
   133a0:	add	sp, sp, #8
   133a4:	pop	{r4, pc}

000133a8 <flatcc_builder_default_alloc@@Base>:
   133a8:	push	{r4, r5, r6, r7, r8, lr}
   133ac:	subs	r6, r2, #0
   133b0:	mov	r5, r1
   133b4:	bne	133d8 <flatcc_builder_default_alloc@@Base+0x30>
   133b8:	ldr	r0, [r1]
   133bc:	cmp	r0, #0
   133c0:	popeq	{r4, r5, r6, r7, r8, pc}
   133c4:	bl	12454 <free@plt>
   133c8:	str	r6, [r5]
   133cc:	str	r6, [r5, #4]
   133d0:	mov	r0, #0
   133d4:	pop	{r4, r5, r6, r7, r8, pc}
   133d8:	ldr	r2, [sp, #24]
   133dc:	mov	r7, r3
   133e0:	sub	r2, r2, #1
   133e4:	cmp	r2, #6
   133e8:	ldrls	pc, [pc, r2, lsl #2]
   133ec:	b	13480 <flatcc_builder_default_alloc@@Base+0xd8>
   133f0:	andeq	r3, r1, r8, lsl #9
   133f4:	andeq	r3, r1, r0, lsl #9
   133f8:	andeq	r3, r1, r0, lsl #9
   133fc:	andeq	r3, r1, r0, ror r4
   13400:	andeq	r3, r1, ip, lsl #8
   13404:	andeq	r3, r1, r0, lsl #9
   13408:	andeq	r3, r1, r8, ror r4
   1340c:	mov	r4, r6
   13410:	cmp	r6, r4
   13414:	bhi	13490 <flatcc_builder_default_alloc@@Base+0xe8>
   13418:	ldr	r2, [r5, #4]
   1341c:	cmp	r6, r2
   13420:	bhi	1342c <flatcc_builder_default_alloc@@Base+0x84>
   13424:	cmp	r4, r2, lsr #1
   13428:	bls	133d0 <flatcc_builder_default_alloc@@Base+0x28>
   1342c:	mov	r1, r4
   13430:	ldr	r0, [r5]
   13434:	bl	12478 <realloc@plt>
   13438:	subs	r6, r0, #0
   1343c:	beq	13498 <flatcc_builder_default_alloc@@Base+0xf0>
   13440:	cmp	r7, #0
   13444:	beq	13464 <flatcc_builder_default_alloc@@Base+0xbc>
   13448:	ldr	r0, [r5, #4]
   1344c:	cmp	r4, r0
   13450:	bls	13464 <flatcc_builder_default_alloc@@Base+0xbc>
   13454:	sub	r2, r4, r0
   13458:	mov	r1, #0
   1345c:	add	r0, r6, r0
   13460:	bl	124cc <memset@plt>
   13464:	str	r6, [r5]
   13468:	str	r4, [r5, #4]
   1346c:	b	133d0 <flatcc_builder_default_alloc@@Base+0x28>
   13470:	mov	r4, #288	; 0x120
   13474:	b	13410 <flatcc_builder_default_alloc@@Base+0x68>
   13478:	mov	r4, #64	; 0x40
   1347c:	b	13410 <flatcc_builder_default_alloc@@Base+0x68>
   13480:	mov	r4, #32
   13484:	b	13410 <flatcc_builder_default_alloc@@Base+0x68>
   13488:	mov	r4, #256	; 0x100
   1348c:	b	13410 <flatcc_builder_default_alloc@@Base+0x68>
   13490:	lsl	r4, r4, #1
   13494:	b	13410 <flatcc_builder_default_alloc@@Base+0x68>
   13498:	mvn	r0, #0
   1349c:	pop	{r4, r5, r6, r7, r8, pc}
   134a0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   134a4:	add	r6, r0, #52	; 0x34
   134a8:	mov	r4, r1
   134ac:	add	r1, r6, r1, lsl #3
   134b0:	mov	r5, r2
   134b4:	add	r2, r2, r3
   134b8:	ldr	r3, [r1, #4]
   134bc:	cmp	r2, r3
   134c0:	bls	134f4 <flatcc_builder_default_alloc@@Base+0x14c>
   134c4:	str	r4, [sp]
   134c8:	ldr	r3, [sp, #32]
   134cc:	ldr	r7, [r0, #48]	; 0x30
   134d0:	ldr	r0, [r0, #40]	; 0x28
   134d4:	blx	r7
   134d8:	cmp	r0, #0
   134dc:	beq	134f4 <flatcc_builder_default_alloc@@Base+0x14c>
   134e0:	ldr	r3, [pc, #28]	; 13504 <flatcc_builder_default_alloc@@Base+0x15c>
   134e4:	mov	r2, #308	; 0x134
   134e8:	ldr	r1, [pc, #24]	; 13508 <flatcc_builder_default_alloc@@Base+0x160>
   134ec:	ldr	r0, [pc, #24]	; 1350c <flatcc_builder_default_alloc@@Base+0x164>
   134f0:	bl	12508 <__assert_fail@plt>
   134f4:	ldr	r0, [r6, r4, lsl #3]
   134f8:	add	r0, r0, r5
   134fc:	add	sp, sp, #12
   13500:	pop	{r4, r5, r6, r7, pc}
   13504:	andeq	r9, r1, r9, asr #24
   13508:	andeq	sl, r1, r8, asr #6
   1350c:			; <UNDEFINED> instruction: 0x0001a3b5
   13510:	ldr	r2, [r0, #156]	; 0x9c
   13514:	ldr	r3, [r0, #160]	; 0xa0
   13518:	push	{r0, r1, r4, r5, r6, lr}
   1351c:	mov	r5, r1
   13520:	add	r1, r2, #1
   13524:	cmp	r1, r3
   13528:	mov	r4, r0
   1352c:	str	r1, [r0, #156]	; 0x9c
   13530:	ble	135e0 <flatcc_builder_default_alloc@@Base+0x238>
   13534:	ldr	r3, [r0, #176]	; 0xb0
   13538:	cmp	r3, #0
   1353c:	cmpgt	r1, r3
   13540:	movgt	r3, #1
   13544:	movle	r3, #0
   13548:	ble	13558 <flatcc_builder_default_alloc@@Base+0x1b0>
   1354c:	mvn	r0, #0
   13550:	add	sp, sp, #8
   13554:	pop	{r4, r5, r6, pc}
   13558:	mov	r6, #36	; 0x24
   1355c:	str	r3, [sp]
   13560:	mul	r2, r6, r2
   13564:	mov	r3, r6
   13568:	mov	r1, #4
   1356c:	bl	134a0 <flatcc_builder_default_alloc@@Base+0xf8>
   13570:	cmp	r0, #0
   13574:	str	r0, [r4, #32]
   13578:	beq	1354c <flatcc_builder_default_alloc@@Base+0x1a4>
   1357c:	mov	r1, r6
   13580:	ldr	r0, [r4, #88]	; 0x58
   13584:	bl	192e4 <flatcc_json_parser_table_as_root@@Base+0x4>
   13588:	ldr	r3, [r4, #176]	; 0xb0
   1358c:	cmp	r3, #0
   13590:	cmpgt	r0, r3
   13594:	str	r0, [r4, #160]	; 0xa0
   13598:	strgt	r3, [r4, #160]	; 0xa0
   1359c:	ldrh	r1, [r4, #130]	; 0x82
   135a0:	ldr	r2, [r4, #32]
   135a4:	ldr	r3, [r4, #20]
   135a8:	mvn	r0, #3
   135ac:	strh	r1, [r2, #12]
   135b0:	ldr	r1, [r4, #28]
   135b4:	str	r3, [r2, #8]
   135b8:	add	r3, r3, r1
   135bc:	add	r3, r3, #7
   135c0:	strh	r5, [r4, #130]	; 0x82
   135c4:	bic	r3, r3, #7
   135c8:	str	r0, [r2, #4]
   135cc:	mov	r0, #0
   135d0:	str	r1, [r2]
   135d4:	str	r3, [r4, #28]
   135d8:	str	r0, [r4, #20]
   135dc:	b	13550 <flatcc_builder_default_alloc@@Base+0x1a8>
   135e0:	ldr	r3, [r0, #32]
   135e4:	add	r3, r3, #36	; 0x24
   135e8:	str	r3, [r0, #32]
   135ec:	b	1359c <flatcc_builder_default_alloc@@Base+0x1f4>
   135f0:	ldr	r3, [r0, #32]
   135f4:	push	{r0, r1, r2, r4, r5, lr}
   135f8:	add	r1, r1, #2
   135fc:	ldr	r2, [r3, #16]
   13600:	lsl	r5, r1, #1
   13604:	ldrh	r1, [r3, #28]
   13608:	mov	r3, #1
   1360c:	str	r3, [sp]
   13610:	mov	r3, r5
   13614:	add	r2, r2, r1, lsl #1
   13618:	mov	r1, #0
   1361c:	mov	r4, r0
   13620:	bl	134a0 <flatcc_builder_default_alloc@@Base+0xf8>
   13624:	cmp	r0, #0
   13628:	streq	r0, [r4, #4]
   1362c:	mvneq	r0, #0
   13630:	beq	1366c <flatcc_builder_default_alloc@@Base+0x2c4>
   13634:	ldr	r2, [r4, #32]
   13638:	add	r0, r0, #4
   1363c:	mov	r3, #0
   13640:	str	r0, [r4, #4]
   13644:	str	r3, [sp]
   13648:	mov	r1, #3
   1364c:	sub	r3, r5, #3
   13650:	ldr	r2, [r2, #20]
   13654:	mov	r0, r4
   13658:	bl	134a0 <flatcc_builder_default_alloc@@Base+0xf8>
   1365c:	cmp	r0, #0
   13660:	str	r0, [r4]
   13664:	movne	r0, #0
   13668:	mvneq	r0, #0
   1366c:	add	sp, sp, #12
   13670:	pop	{r4, r5, pc}
   13674:	push	{r0, r1, r2, r4, r5, lr}
   13678:	ldr	r3, [r1]
   1367c:	ldr	r4, [r0, #140]	; 0x8c
   13680:	add	r2, r3, r4
   13684:	cmp	r4, r2
   13688:	str	r2, [r0, #140]	; 0x8c
   1368c:	ble	136a4 <flatcc_builder_default_alloc@@Base+0x2fc>
   13690:	ldr	r3, [pc, #68]	; 136dc <flatcc_builder_default_alloc@@Base+0x334>
   13694:	ldr	r2, [pc, #68]	; 136e0 <flatcc_builder_default_alloc@@Base+0x338>
   13698:	ldr	r1, [pc, #68]	; 136e4 <flatcc_builder_default_alloc@@Base+0x33c>
   1369c:	ldr	r0, [pc, #68]	; 136e8 <flatcc_builder_default_alloc@@Base+0x340>
   136a0:	bl	12508 <__assert_fail@plt>
   136a4:	str	r3, [sp]
   136a8:	add	r1, r1, #8
   136ac:	ldr	r5, [r0, #44]	; 0x2c
   136b0:	ldr	r2, [r1, #-4]
   136b4:	mov	r3, r4
   136b8:	ldr	r0, [r0, #36]	; 0x24
   136bc:	blx	r5
   136c0:	cmp	r0, #0
   136c4:	ldrne	r3, [pc, #16]	; 136dc <flatcc_builder_default_alloc@@Base+0x334>
   136c8:	ldrne	r2, [pc, #28]	; 136ec <flatcc_builder_default_alloc@@Base+0x344>
   136cc:	bne	13698 <flatcc_builder_default_alloc@@Base+0x2f0>
   136d0:	add	r0, r4, #1
   136d4:	add	sp, sp, #12
   136d8:	pop	{r4, r5, pc}
   136dc:	andeq	r9, r1, r8, asr ip
   136e0:	andeq	r0, r0, r1, lsr #5
   136e4:	andeq	sl, r1, r8, asr #6
   136e8:			; <UNDEFINED> instruction: 0x0001a3b5
   136ec:	andeq	r0, r0, r5, lsr #5
   136f0:	cmp	r2, #0
   136f4:	bne	13704 <flatcc_builder_default_alloc@@Base+0x35c>
   136f8:	ldrh	r2, [r0, #132]	; 0x84
   136fc:	cmp	r2, #0
   13700:	moveq	r2, #1
   13704:	ldrh	ip, [r1]
   13708:	cmp	ip, #3
   1370c:	movls	ip, #4
   13710:	strhls	ip, [r1]
   13714:	ldrh	ip, [r1]
   13718:	cmp	ip, r2
   1371c:	strhcc	r2, [r1]
   13720:	cmp	r3, #0
   13724:	bne	13788 <flatcc_builder_default_alloc@@Base+0x3e0>
   13728:	ldr	r3, [r0, #140]	; 0x8c
   1372c:	sub	r2, r2, #1
   13730:	ands	r2, r2, r3
   13734:	beq	13788 <flatcc_builder_default_alloc@@Base+0x3e0>
   13738:	push	{r4, lr}
   1373c:	sub	sp, sp, #72	; 0x48
   13740:	ldr	r4, [pc, #72]	; 13790 <flatcc_builder_default_alloc@@Base+0x3e8>
   13744:	mov	r3, #1
   13748:	mov	r1, sp
   1374c:	str	r2, [sp]
   13750:	str	r4, [sp, #8]
   13754:	str	r2, [sp, #12]
   13758:	str	r3, [sp, #4]
   1375c:	bl	13674 <flatcc_builder_default_alloc@@Base+0x2cc>
   13760:	cmp	r0, #0
   13764:	bne	1377c <flatcc_builder_default_alloc@@Base+0x3d4>
   13768:	add	r3, r4, #512	; 0x200
   1376c:	ldr	r2, [pc, #32]	; 13794 <flatcc_builder_default_alloc@@Base+0x3ec>
   13770:	ldr	r1, [pc, #32]	; 13798 <flatcc_builder_default_alloc@@Base+0x3f0>
   13774:	ldr	r0, [pc, #32]	; 1379c <flatcc_builder_default_alloc@@Base+0x3f4>
   13778:	bl	12508 <__assert_fail@plt>
   1377c:	mov	r0, #0
   13780:	add	sp, sp, #72	; 0x48
   13784:	pop	{r4, pc}
   13788:	mov	r0, #0
   1378c:	bx	lr
   13790:	andeq	r9, r1, r2, ror #24
   13794:			; <UNDEFINED> instruction: 0x000002be
   13798:	andeq	sl, r1, r8, asr #6
   1379c:			; <UNDEFINED> instruction: 0x0001a3b5
   137a0:	ldr	r2, [r0, #136]	; 0x88
   137a4:	ldr	r3, [r1]
   137a8:	push	{r0, r1, r4, r5, r6, lr}
   137ac:	sub	r4, r2, r3
   137b0:	cmp	r2, r4
   137b4:	bgt	137cc <flatcc_builder_default_alloc@@Base+0x424>
   137b8:	ldr	r3, [pc, #76]	; 1380c <flatcc_builder_default_alloc@@Base+0x464>
   137bc:	ldr	r2, [pc, #76]	; 13810 <flatcc_builder_default_alloc@@Base+0x468>
   137c0:	ldr	r1, [pc, #76]	; 13814 <flatcc_builder_default_alloc@@Base+0x46c>
   137c4:	ldr	r0, [pc, #76]	; 13818 <flatcc_builder_default_alloc@@Base+0x470>
   137c8:	bl	12508 <__assert_fail@plt>
   137cc:	str	r3, [sp]
   137d0:	mov	r5, r0
   137d4:	ldr	r6, [r0, #44]	; 0x2c
   137d8:	ldr	r2, [r1, #4]
   137dc:	mov	r3, r4
   137e0:	add	r1, r1, #8
   137e4:	ldr	r0, [r0, #36]	; 0x24
   137e8:	blx	r6
   137ec:	cmp	r0, #0
   137f0:	ldrne	r3, [pc, #20]	; 1380c <flatcc_builder_default_alloc@@Base+0x464>
   137f4:	ldrne	r2, [pc, #32]	; 1381c <flatcc_builder_default_alloc@@Base+0x474>
   137f8:	bne	137c0 <flatcc_builder_default_alloc@@Base+0x418>
   137fc:	mov	r0, r4
   13800:	str	r4, [r5, #136]	; 0x88
   13804:	add	sp, sp, #8
   13808:	pop	{r4, r5, r6, pc}
   1380c:	andeq	r9, r1, r1, ror lr
   13810:	andeq	r0, r0, r7, lsl #5
   13814:	andeq	sl, r1, r8, asr #6
   13818:			; <UNDEFINED> instruction: 0x0001a3b5
   1381c:	andeq	r0, r0, fp, lsl #5
   13820:	ldr	r3, [r0, #20]
   13824:	adds	r1, r3, r1
   13828:	movcs	r3, #1
   1382c:	movcc	r3, #0
   13830:	cmp	r1, r2
   13834:	movls	r2, r3
   13838:	orrhi	r2, r3, #1
   1383c:	cmp	r2, #0
   13840:	beq	1385c <flatcc_builder_default_alloc@@Base+0x4b4>
   13844:	push	{r4, lr}
   13848:	mov	r2, #892	; 0x37c
   1384c:	ldr	r3, [pc, #20]	; 13868 <flatcc_builder_default_alloc@@Base+0x4c0>
   13850:	ldr	r1, [pc, #20]	; 1386c <flatcc_builder_default_alloc@@Base+0x4c4>
   13854:	ldr	r0, [pc, #20]	; 13870 <flatcc_builder_default_alloc@@Base+0x4c8>
   13858:	bl	12508 <__assert_fail@plt>
   1385c:	str	r1, [r0, #20]
   13860:	mov	r0, r2
   13864:	bx	lr
   13868:	andeq	r9, r1, ip, ror lr
   1386c:	andeq	sl, r1, r8, asr #6
   13870:	andeq	sl, r1, lr, lsl #7
   13874:	ldrh	ip, [r0, #128]	; 0x80
   13878:	push	{r4, r5, r6, r7, lr}
   1387c:	sub	sp, sp, #84	; 0x54
   13880:	cmp	ip, #3
   13884:	movls	ip, #4
   13888:	strhls	ip, [r0, #128]	; 0x80
   1388c:	mov	ip, #4
   13890:	add	r5, sp, ip
   13894:	str	ip, [sp, #8]
   13898:	ldr	r4, [r0, #136]	; 0x88
   1389c:	str	ip, [sp, #20]
   138a0:	mov	ip, #1
   138a4:	str	ip, [sp, #12]
   138a8:	lsls	ip, r2, #2
   138ac:	strne	ip, [sp, #28]
   138b0:	and	lr, r4, #3
   138b4:	str	r5, [sp, #16]
   138b8:	addne	r5, ip, #4
   138bc:	movne	ip, #2
   138c0:	strne	r5, [sp, #8]
   138c4:	strne	r1, [sp, #24]
   138c8:	strne	ip, [sp, #12]
   138cc:	cmp	lr, #0
   138d0:	str	r2, [sp, #4]
   138d4:	beq	13904 <flatcc_builder_default_alloc@@Base+0x55c>
   138d8:	ldr	ip, [sp, #8]
   138dc:	add	r5, sp, #80	; 0x50
   138e0:	add	ip, ip, lr
   138e4:	str	ip, [sp, #8]
   138e8:	ldr	ip, [sp, #12]
   138ec:	ldr	r6, [pc, #204]	; 139c0 <flatcc_builder_default_alloc@@Base+0x618>
   138f0:	add	ip, ip, #1
   138f4:	str	ip, [sp, #12]
   138f8:	add	r5, r5, ip, lsl #3
   138fc:	str	r6, [r5, #-72]	; 0xffffffb8
   13900:	str	lr, [r5, #-68]	; 0xffffffbc
   13904:	ldr	r5, [sp, #8]
   13908:	sub	r6, r1, #4
   1390c:	sub	r5, r4, r5
   13910:	mov	lr, r3
   13914:	add	r2, r3, r2
   13918:	mvn	r7, #3
   1391c:	cmp	r2, lr
   13920:	bne	13934 <flatcc_builder_default_alloc@@Base+0x58c>
   13924:	add	r1, sp, #8
   13928:	bl	137a0 <flatcc_builder_default_alloc@@Base+0x3f8>
   1392c:	add	sp, sp, #84	; 0x54
   13930:	pop	{r4, r5, r6, r7, pc}
   13934:	ldr	r4, [r6, #4]!
   13938:	cmp	r4, #0
   1393c:	beq	1397c <flatcc_builder_default_alloc@@Base+0x5d4>
   13940:	sub	ip, r7, r6
   13944:	add	ip, r1, ip
   13948:	add	ip, ip, r4
   1394c:	sub	ip, ip, r5
   13950:	cmp	r3, #0
   13954:	str	ip, [r6]
   13958:	beq	139b8 <flatcc_builder_default_alloc@@Base+0x610>
   1395c:	ldrb	ip, [lr]
   13960:	cmp	ip, #0
   13964:	bne	139b8 <flatcc_builder_default_alloc@@Base+0x610>
   13968:	ldr	r3, [pc, #84]	; 139c4 <flatcc_builder_default_alloc@@Base+0x61c>
   1396c:	ldr	r2, [pc, #84]	; 139c8 <flatcc_builder_default_alloc@@Base+0x620>
   13970:	ldr	r1, [pc, #84]	; 139cc <flatcc_builder_default_alloc@@Base+0x624>
   13974:	ldr	r0, [pc, #84]	; 139d0 <flatcc_builder_default_alloc@@Base+0x628>
   13978:	bl	12508 <__assert_fail@plt>
   1397c:	cmp	r3, #0
   13980:	beq	139a4 <flatcc_builder_default_alloc@@Base+0x5fc>
   13984:	ldrb	ip, [lr]
   13988:	cmp	ip, #0
   1398c:	beq	139b8 <flatcc_builder_default_alloc@@Base+0x610>
   13990:	ldr	r3, [pc, #44]	; 139c4 <flatcc_builder_default_alloc@@Base+0x61c>
   13994:	ldr	r2, [pc, #56]	; 139d4 <flatcc_builder_default_alloc@@Base+0x62c>
   13998:	ldr	r1, [pc, #44]	; 139cc <flatcc_builder_default_alloc@@Base+0x624>
   1399c:	ldr	r0, [pc, #52]	; 139d8 <flatcc_builder_default_alloc@@Base+0x630>
   139a0:	b	13978 <flatcc_builder_default_alloc@@Base+0x5d0>
   139a4:	ldr	r3, [pc, #24]	; 139c4 <flatcc_builder_default_alloc@@Base+0x61c>
   139a8:	ldr	r2, [pc, #44]	; 139dc <flatcc_builder_default_alloc@@Base+0x634>
   139ac:	ldr	r1, [pc, #24]	; 139cc <flatcc_builder_default_alloc@@Base+0x624>
   139b0:	ldr	r0, [pc, #40]	; 139e0 <flatcc_builder_default_alloc@@Base+0x638>
   139b4:	b	13978 <flatcc_builder_default_alloc@@Base+0x5d0>
   139b8:	add	lr, lr, #1
   139bc:	b	1391c <flatcc_builder_default_alloc@@Base+0x574>
   139c0:	andeq	r9, r1, r2, ror #24
   139c4:	andeq	r9, r1, sp, lsl #29
   139c8:			; <UNDEFINED> instruction: 0x000005b1
   139cc:	andeq	sl, r1, r8, asr #6
   139d0:	andeq	sl, r1, r9, lsr #7
   139d4:			; <UNDEFINED> instruction: 0x000005b5
   139d8:			; <UNDEFINED> instruction: 0x0001a3b7
   139dc:			; <UNDEFINED> instruction: 0x000005b7
   139e0:			; <UNDEFINED> instruction: 0x0001a3b5

000139e4 <flatcc_builder_flush_vtable_cache@@Base>:
   139e4:	ldr	r3, [r0, #116]	; 0x74
   139e8:	cmp	r3, #0
   139ec:	bxeq	lr
   139f0:	push	{r4, lr}
   139f4:	mov	r1, #0
   139f8:	mov	r4, r0
   139fc:	ldr	r2, [r0, #96]	; 0x60
   13a00:	ldr	r0, [r0, #92]	; 0x5c
   13a04:	bl	124cc <memset@plt>
   13a08:	mov	r3, #16
   13a0c:	str	r3, [r4, #124]	; 0x7c
   13a10:	mov	r3, #0
   13a14:	str	r3, [r4, #120]	; 0x78
   13a18:	pop	{r4, pc}

00013a1c <flatcc_builder_custom_init@@Base>:
   13a1c:	push	{r4, r5, r6, r7, r8, lr}
   13a20:	mov	r6, r1
   13a24:	mov	r7, r2
   13a28:	mov	r1, #0
   13a2c:	mov	r2, #232	; 0xe8
   13a30:	mov	r4, r0
   13a34:	mov	r5, r3
   13a38:	bl	124cc <memset@plt>
   13a3c:	cmp	r6, #0
   13a40:	moveq	r3, #1
   13a44:	addeq	r7, r4, #188	; 0xbc
   13a48:	ldreq	r6, [pc, #40]	; 13a78 <flatcc_builder_custom_init@@Base+0x5c>
   13a4c:	str	r7, [r4, #36]	; 0x24
   13a50:	str	r6, [r4, #44]	; 0x2c
   13a54:	mov	r0, #0
   13a58:	streq	r3, [r4, #184]	; 0xb8
   13a5c:	ldr	r3, [pc, #24]	; 13a7c <flatcc_builder_custom_init@@Base+0x60>
   13a60:	cmp	r5, #0
   13a64:	moveq	r5, r3
   13a68:	ldr	r3, [sp, #24]
   13a6c:	str	r5, [r4, #48]	; 0x30
   13a70:	str	r3, [r4, #40]	; 0x28
   13a74:	pop	{r4, r5, r6, r7, r8, pc}
   13a78:	strdeq	r6, [r1], -ip
   13a7c:	andeq	r3, r1, r8, lsr #7

00013a80 <flatcc_builder_init@@Base>:
   13a80:	push	{r4, lr}
   13a84:	mov	r2, #232	; 0xe8
   13a88:	mov	r4, r0
   13a8c:	mov	r1, #0
   13a90:	bl	124cc <memset@plt>
   13a94:	mov	r3, #1
   13a98:	str	r3, [r4, #184]	; 0xb8
   13a9c:	ldr	r3, [pc, #24]	; 13abc <flatcc_builder_init@@Base+0x3c>
   13aa0:	mov	r0, #0
   13aa4:	str	r3, [r4, #48]	; 0x30
   13aa8:	add	r3, r4, #188	; 0xbc
   13aac:	str	r3, [r4, #36]	; 0x24
   13ab0:	ldr	r3, [pc, #8]	; 13ac0 <flatcc_builder_init@@Base+0x40>
   13ab4:	str	r3, [r4, #44]	; 0x2c
   13ab8:	pop	{r4, pc}
   13abc:	andeq	r3, r1, r8, lsr #7
   13ac0:	strdeq	r6, [r1], -ip

00013ac4 <flatcc_builder_custom_reset@@Base>:
   13ac4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ac8:	mov	r6, #0
   13acc:	mov	r4, r0
   13ad0:	mov	r7, r1
   13ad4:	mov	r8, r2
   13ad8:	mov	r5, r0
   13adc:	mov	r9, #1
   13ae0:	mov	sl, r6
   13ae4:	ldr	r3, [r5, #52]	; 0x34
   13ae8:	add	r1, r5, #52	; 0x34
   13aec:	cmp	r3, #0
   13af0:	beq	13bd0 <flatcc_builder_custom_reset@@Base+0x10c>
   13af4:	cmp	r6, #5
   13af8:	cmpne	r8, #0
   13afc:	bne	13ba8 <flatcc_builder_custom_reset@@Base+0xe4>
   13b00:	ldr	r2, [r5, #56]	; 0x38
   13b04:	mov	r1, sl
   13b08:	ldr	r0, [r5, #52]	; 0x34
   13b0c:	bl	124cc <memset@plt>
   13b10:	add	r6, r6, #1
   13b14:	cmp	r6, #8
   13b18:	add	r5, r5, #8
   13b1c:	bne	13ae4 <flatcc_builder_custom_reset@@Base+0x20>
   13b20:	ldr	r2, [r4, #124]	; 0x7c
   13b24:	mov	r3, #0
   13b28:	cmp	r2, r3
   13b2c:	movne	r2, #16
   13b30:	strne	r2, [r4, #124]	; 0x7c
   13b34:	ldr	r2, [r4, #60]	; 0x3c
   13b38:	ldr	r0, [r4, #184]	; 0xb8
   13b3c:	str	r2, [r4, #16]
   13b40:	ldr	r2, [r4, #76]	; 0x4c
   13b44:	cmp	r7, #0
   13b48:	str	r2, [r4]
   13b4c:	ldr	r2, [r4, #52]	; 0x34
   13b50:	strne	r3, [r4, #172]	; 0xac
   13b54:	strne	r3, [r4, #176]	; 0xb0
   13b58:	strne	r3, [r4, #180]	; 0xb4
   13b5c:	cmp	r0, #0
   13b60:	str	r3, [r4, #120]	; 0x78
   13b64:	strh	r3, [r4, #128]	; 0x80
   13b68:	str	r3, [r4, #136]	; 0x88
   13b6c:	str	r3, [r4, #140]	; 0x8c
   13b70:	str	r3, [r4, #156]	; 0x9c
   13b74:	str	r3, [r4, #160]	; 0xa0
   13b78:	str	r3, [r4, #20]
   13b7c:	str	r3, [r4, #24]
   13b80:	str	r3, [r4, #148]	; 0x94
   13b84:	str	r3, [r4, #152]	; 0x98
   13b88:	str	r2, [r4, #4]
   13b8c:	str	r3, [r4, #32]
   13b90:	beq	13ba0 <flatcc_builder_custom_reset@@Base+0xdc>
   13b94:	add	r0, r4, #188	; 0xbc
   13b98:	bl	160f4 <flatcc_emitter_reset@@Base>
   13b9c:	mov	r0, #0
   13ba0:	add	sp, sp, #12
   13ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ba8:	str	r6, [sp]
   13bac:	ldr	fp, [r4, #48]	; 0x30
   13bb0:	mov	r3, r9
   13bb4:	mov	r2, #1
   13bb8:	ldr	r0, [r4, #40]	; 0x28
   13bbc:	blx	fp
   13bc0:	cmp	r0, #0
   13bc4:	beq	13b00 <flatcc_builder_custom_reset@@Base+0x3c>
   13bc8:	mvn	r0, #0
   13bcc:	b	13ba0 <flatcc_builder_custom_reset@@Base+0xdc>
   13bd0:	ldr	r3, [r5, #56]	; 0x38
   13bd4:	cmp	r3, #0
   13bd8:	beq	13b10 <flatcc_builder_custom_reset@@Base+0x4c>
   13bdc:	ldr	r3, [pc, #12]	; 13bf0 <flatcc_builder_custom_reset@@Base+0x12c>
   13be0:	ldr	r2, [pc, #12]	; 13bf4 <flatcc_builder_custom_reset@@Base+0x130>
   13be4:	ldr	r1, [pc, #12]	; 13bf8 <flatcc_builder_custom_reset@@Base+0x134>
   13be8:	ldr	r0, [pc, #12]	; 13bfc <flatcc_builder_custom_reset@@Base+0x138>
   13bec:	bl	12508 <__assert_fail@plt>
   13bf0:	andeq	r9, r1, sl, lsr #29
   13bf4:			; <UNDEFINED> instruction: 0x000001b2
   13bf8:	andeq	sl, r1, r8, asr #6
   13bfc:	andeq	sl, r1, r5, asr #7

00013c00 <flatcc_builder_reset@@Base>:
   13c00:	mov	r2, #0
   13c04:	mov	r1, r2
   13c08:	b	13ac4 <flatcc_builder_custom_reset@@Base>

00013c0c <flatcc_builder_clear@@Base>:
   13c0c:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   13c10:	mov	r5, #0
   13c14:	mov	r4, r0
   13c18:	add	r6, r0, #52	; 0x34
   13c1c:	mov	r8, r5
   13c20:	str	r5, [sp]
   13c24:	mov	r1, r6
   13c28:	ldr	r7, [r4, #48]	; 0x30
   13c2c:	mov	r3, r8
   13c30:	mov	r2, #0
   13c34:	ldr	r0, [r4, #40]	; 0x28
   13c38:	add	r5, r5, #1
   13c3c:	blx	r7
   13c40:	cmp	r5, #8
   13c44:	add	r6, r6, #8
   13c48:	bne	13c20 <flatcc_builder_clear@@Base+0x14>
   13c4c:	ldr	r3, [r4, #184]	; 0xb8
   13c50:	cmp	r3, #0
   13c54:	beq	13c60 <flatcc_builder_clear@@Base+0x54>
   13c58:	add	r0, r4, #188	; 0xbc
   13c5c:	bl	161a4 <flatcc_emitter_clear@@Base>
   13c60:	mov	r2, #232	; 0xe8
   13c64:	mov	r1, #0
   13c68:	mov	r0, r4
   13c6c:	add	sp, sp, #8
   13c70:	pop	{r4, r5, r6, r7, r8, lr}
   13c74:	b	124cc <memset@plt>

00013c78 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13c78:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13c7c:	add	r4, r1, #3
   13c80:	bic	r4, r4, #3
   13c84:	add	r4, r4, #4
   13c88:	mov	r7, #0
   13c8c:	str	r7, [sp]
   13c90:	mov	r3, r4
   13c94:	ldr	r2, [r0, #228]	; 0xe4
   13c98:	mov	r1, #7
   13c9c:	mov	r6, r0
   13ca0:	bl	134a0 <flatcc_builder_default_alloc@@Base+0xf8>
   13ca4:	subs	r5, r0, #0
   13ca8:	moveq	r0, r5
   13cac:	beq	13cdc <flatcc_builder_enter_user_frame_ptr@@Base+0x64>
   13cb0:	mov	r2, r4
   13cb4:	mov	r1, r7
   13cb8:	bl	124cc <memset@plt>
   13cbc:	ldr	r3, [r6, #224]	; 0xe0
   13cc0:	add	r0, r5, #4
   13cc4:	str	r3, [r5]
   13cc8:	ldr	r1, [r6, #228]	; 0xe4
   13ccc:	add	r3, r1, #4
   13cd0:	add	r4, r4, r1
   13cd4:	str	r3, [r6, #224]	; 0xe0
   13cd8:	str	r4, [r6, #228]	; 0xe4
   13cdc:	add	sp, sp, #12
   13ce0:	pop	{r4, r5, r6, r7, pc}

00013ce4 <flatcc_builder_enter_user_frame@@Base>:
   13ce4:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13ce8:	add	r4, r1, #3
   13cec:	bic	r4, r4, #3
   13cf0:	add	r4, r4, #4
   13cf4:	mov	r7, #0
   13cf8:	str	r7, [sp]
   13cfc:	mov	r3, r4
   13d00:	ldr	r2, [r0, #228]	; 0xe4
   13d04:	mov	r1, #7
   13d08:	mov	r6, r0
   13d0c:	bl	134a0 <flatcc_builder_default_alloc@@Base+0xf8>
   13d10:	subs	r5, r0, #0
   13d14:	moveq	r0, r5
   13d18:	beq	13d44 <flatcc_builder_enter_user_frame@@Base+0x60>
   13d1c:	mov	r2, r4
   13d20:	mov	r1, r7
   13d24:	bl	124cc <memset@plt>
   13d28:	ldr	r3, [r6, #224]	; 0xe0
   13d2c:	str	r3, [r5]
   13d30:	ldr	r1, [r6, #228]	; 0xe4
   13d34:	add	r0, r1, #4
   13d38:	add	r4, r4, r1
   13d3c:	str	r0, [r6, #224]	; 0xe0
   13d40:	str	r4, [r6, #228]	; 0xe4
   13d44:	add	sp, sp, #12
   13d48:	pop	{r4, r5, r6, r7, pc}

00013d4c <flatcc_builder_exit_user_frame@@Base>:
   13d4c:	ldr	r3, [r0, #224]	; 0xe0
   13d50:	cmp	r3, #0
   13d54:	bne	13d70 <flatcc_builder_exit_user_frame@@Base+0x24>
   13d58:	push	{r4, lr}
   13d5c:	ldr	r3, [pc, #44]	; 13d90 <flatcc_builder_exit_user_frame@@Base+0x44>
   13d60:	ldr	r2, [pc, #44]	; 13d94 <flatcc_builder_exit_user_frame@@Base+0x48>
   13d64:	ldr	r1, [pc, #44]	; 13d98 <flatcc_builder_exit_user_frame@@Base+0x4c>
   13d68:	ldr	r0, [pc, #44]	; 13d9c <flatcc_builder_exit_user_frame@@Base+0x50>
   13d6c:	bl	12508 <__assert_fail@plt>
   13d70:	ldr	r1, [r0, #108]	; 0x6c
   13d74:	mov	r2, r0
   13d78:	add	r1, r1, r3
   13d7c:	sub	r3, r3, #4
   13d80:	str	r3, [r0, #228]	; 0xe4
   13d84:	ldr	r0, [r1, #-4]
   13d88:	str	r0, [r2, #224]	; 0xe0
   13d8c:	bx	lr
   13d90:	andeq	r9, r1, r6, asr #29
   13d94:	andeq	r0, r0, lr, lsl r2
   13d98:	andeq	sl, r1, r8, asr #6
   13d9c:	ldrdeq	sl, [r1], -r7

00013da0 <flatcc_builder_exit_user_frame_at@@Base>:
   13da0:	ldr	r2, [r0, #224]	; 0xe0
   13da4:	cmp	r2, r1
   13da8:	bcs	13dc4 <flatcc_builder_exit_user_frame_at@@Base+0x24>
   13dac:	push	{r4, lr}
   13db0:	ldr	r3, [pc, #20]	; 13dcc <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   13db4:	ldr	r2, [pc, #20]	; 13dd0 <flatcc_builder_exit_user_frame_at@@Base+0x30>
   13db8:	ldr	r1, [pc, #20]	; 13dd4 <flatcc_builder_exit_user_frame_at@@Base+0x34>
   13dbc:	ldr	r0, [pc, #20]	; 13dd8 <flatcc_builder_exit_user_frame_at@@Base+0x38>
   13dc0:	bl	12508 <__assert_fail@plt>
   13dc4:	str	r1, [r0, #224]	; 0xe0
   13dc8:	b	13d4c <flatcc_builder_exit_user_frame@@Base>
   13dcc:	andeq	r9, r1, r5, ror #29
   13dd0:	andeq	r0, r0, r7, lsr #4
   13dd4:	andeq	sl, r1, r8, asr #6
   13dd8:	strdeq	sl, [r1], -r0

00013ddc <flatcc_builder_get_current_user_frame@@Base>:
   13ddc:	ldr	r0, [r0, #224]	; 0xe0
   13de0:	bx	lr

00013de4 <flatcc_builder_get_user_frame_ptr@@Base>:
   13de4:	ldr	r0, [r0, #108]	; 0x6c
   13de8:	add	r0, r0, r1
   13dec:	bx	lr

00013df0 <flatcc_builder_embed_buffer@@Base>:
   13df0:	push	{r4, r5, r6, lr}
   13df4:	mov	r4, r3
   13df8:	ldr	r3, [r0, #152]	; 0x98
   13dfc:	sub	sp, sp, #80	; 0x50
   13e00:	adds	r3, r3, #0
   13e04:	movne	r3, #1
   13e08:	mov	r6, r2
   13e0c:	mov	r2, r1
   13e10:	add	r1, sp, #96	; 0x60
   13e14:	mov	r5, r0
   13e18:	bl	136f0 <flatcc_builder_default_alloc@@Base+0x348>
   13e1c:	cmp	r0, #0
   13e20:	movne	r0, #0
   13e24:	bne	13ef8 <flatcc_builder_embed_buffer@@Base+0x108>
   13e28:	ldr	r3, [sp, #100]	; 0x64
   13e2c:	str	r0, [sp, #8]
   13e30:	tst	r3, #2
   13e34:	ldr	r3, [r5, #136]	; 0x88
   13e38:	movne	r2, #4
   13e3c:	moveq	r2, #0
   13e40:	sub	r3, r3, r4
   13e44:	sub	r3, r3, r2
   13e48:	ldrh	r2, [sp, #96]	; 0x60
   13e4c:	str	r0, [sp, #12]
   13e50:	sub	r2, r2, #1
   13e54:	and	r3, r3, r2
   13e58:	add	r2, r4, r3
   13e5c:	str	r2, [sp, #4]
   13e60:	ldr	r2, [r5, #152]	; 0x98
   13e64:	cmp	r2, #0
   13e68:	beq	13e88 <flatcc_builder_embed_buffer@@Base+0x98>
   13e6c:	mov	r2, #4
   13e70:	add	r1, sp, r2
   13e74:	str	r2, [sp, #8]
   13e78:	str	r2, [sp, #20]
   13e7c:	mov	r2, #1
   13e80:	str	r1, [sp, #16]
   13e84:	str	r2, [sp, #12]
   13e88:	cmp	r4, #0
   13e8c:	beq	13eb8 <flatcc_builder_embed_buffer@@Base+0xc8>
   13e90:	ldr	r2, [sp, #8]
   13e94:	add	r1, sp, #80	; 0x50
   13e98:	add	r2, r2, r4
   13e9c:	str	r2, [sp, #8]
   13ea0:	ldr	r2, [sp, #12]
   13ea4:	add	r2, r2, #1
   13ea8:	str	r2, [sp, #12]
   13eac:	add	r1, r1, r2, lsl #3
   13eb0:	str	r6, [r1, #-72]	; 0xffffffb8
   13eb4:	str	r4, [r1, #-68]	; 0xffffffbc
   13eb8:	cmp	r3, #0
   13ebc:	beq	13eec <flatcc_builder_embed_buffer@@Base+0xfc>
   13ec0:	ldr	r2, [sp, #8]
   13ec4:	add	r1, sp, #80	; 0x50
   13ec8:	add	r2, r2, r3
   13ecc:	str	r2, [sp, #8]
   13ed0:	ldr	r2, [sp, #12]
   13ed4:	ldr	r0, [pc, #36]	; 13f00 <flatcc_builder_embed_buffer@@Base+0x110>
   13ed8:	add	r2, r2, #1
   13edc:	str	r2, [sp, #12]
   13ee0:	add	r1, r1, r2, lsl #3
   13ee4:	str	r0, [r1, #-72]	; 0xffffffb8
   13ee8:	str	r3, [r1, #-68]	; 0xffffffbc
   13eec:	add	r1, sp, #8
   13ef0:	mov	r0, r5
   13ef4:	bl	137a0 <flatcc_builder_default_alloc@@Base+0x3f8>
   13ef8:	add	sp, sp, #80	; 0x50
   13efc:	pop	{r4, r5, r6, pc}
   13f00:	andeq	r9, r1, r2, ror #24

00013f04 <flatcc_builder_create_buffer@@Base>:
   13f04:	push	{r4, r5, r6, r7, r8, r9, lr}
   13f08:	sub	sp, sp, #92	; 0x5c
   13f0c:	mov	r7, #0
   13f10:	ldr	r8, [sp, #124]	; 0x7c
   13f14:	mov	r9, r1
   13f18:	and	r6, r8, #1
   13f1c:	mov	r5, r3
   13f20:	add	r1, sp, #120	; 0x78
   13f24:	mov	r3, r6
   13f28:	mov	r4, r0
   13f2c:	str	r7, [sp, #12]
   13f30:	bl	136f0 <flatcc_builder_default_alloc@@Base+0x348>
   13f34:	cmp	r0, r7
   13f38:	bne	140ac <flatcc_builder_create_buffer@@Base+0x1a8>
   13f3c:	ldrh	r3, [r4, #128]	; 0x80
   13f40:	ldrh	r1, [sp, #120]	; 0x78
   13f44:	ldr	r2, [r4, #136]	; 0x88
   13f48:	and	r8, r8, #2
   13f4c:	cmp	r3, r1
   13f50:	strhcc	r1, [r4, #128]	; 0x80
   13f54:	cmp	r9, #0
   13f58:	sub	r1, r1, #1
   13f5c:	ldrne	r3, [r9]
   13f60:	strne	r3, [sp, #12]
   13f64:	ldr	r0, [sp, #12]
   13f68:	sub	r3, r2, #4
   13f6c:	cmp	r0, #0
   13f70:	movne	r0, #4
   13f74:	moveq	r0, #0
   13f78:	cmp	r8, #0
   13f7c:	moveq	ip, #0
   13f80:	movne	ip, #4
   13f84:	sub	r3, r3, r0
   13f88:	sub	r3, r3, ip
   13f8c:	and	r3, r3, r1
   13f90:	moveq	lr, r6
   13f94:	mov	r1, #0
   13f98:	orrne	lr, r6, #1
   13f9c:	cmp	lr, r1
   13fa0:	str	r1, [sp, #16]
   13fa4:	str	r1, [sp, #20]
   13fa8:	beq	13fc8 <flatcc_builder_create_buffer@@Base+0xc4>
   13fac:	mov	r1, #4
   13fb0:	str	r1, [sp, #16]
   13fb4:	add	ip, sp, #8
   13fb8:	str	r1, [sp, #28]
   13fbc:	mov	r1, #1
   13fc0:	str	ip, [sp, #24]
   13fc4:	str	r1, [sp, #20]
   13fc8:	ldr	r7, [sp, #20]
   13fcc:	add	r8, sp, #88	; 0x58
   13fd0:	add	r1, r7, #1
   13fd4:	ldr	ip, [sp, #16]
   13fd8:	add	r8, r8, r1, lsl #3
   13fdc:	add	r9, sp, #4
   13fe0:	add	ip, ip, #4
   13fe4:	str	r9, [r8, #-72]	; 0xffffffb8
   13fe8:	cmp	r0, #0
   13fec:	mov	r9, #4
   13ff0:	str	ip, [sp, #16]
   13ff4:	str	r9, [r8, #-68]	; 0xffffffbc
   13ff8:	str	r1, [sp, #20]
   13ffc:	beq	14028 <flatcc_builder_create_buffer@@Base+0x124>
   14000:	add	ip, r0, ip
   14004:	add	r1, r7, #2
   14008:	str	ip, [sp, #16]
   1400c:	add	ip, sp, #88	; 0x58
   14010:	add	r1, ip, r1, lsl #3
   14014:	add	r7, r7, #2
   14018:	add	ip, sp, #12
   1401c:	str	ip, [r1, #-72]	; 0xffffffb8
   14020:	str	r0, [r1, #-68]	; 0xffffffbc
   14024:	str	r7, [sp, #20]
   14028:	cmp	r3, #0
   1402c:	beq	1405c <flatcc_builder_create_buffer@@Base+0x158>
   14030:	ldr	r1, [sp, #16]
   14034:	add	r0, sp, #88	; 0x58
   14038:	add	r1, r1, r3
   1403c:	str	r1, [sp, #16]
   14040:	ldr	r1, [sp, #20]
   14044:	ldr	ip, [pc, #108]	; 140b8 <flatcc_builder_create_buffer@@Base+0x1b4>
   14048:	add	r1, r1, #1
   1404c:	str	r1, [sp, #20]
   14050:	add	r0, r0, r1, lsl #3
   14054:	str	ip, [r0, #-72]	; 0xffffffb8
   14058:	str	r3, [r0, #-68]	; 0xffffffbc
   1405c:	cmp	r6, #0
   14060:	ldr	r3, [sp, #16]
   14064:	add	r1, sp, #16
   14068:	sub	r3, r2, r3
   1406c:	ldrne	r2, [r4, #144]	; 0x90
   14070:	ldreq	r2, [r4, #140]	; 0x8c
   14074:	add	r3, r3, lr, lsl #2
   14078:	sub	r2, r2, r3
   1407c:	mov	r0, r4
   14080:	sub	r3, r5, r3
   14084:	str	r2, [sp, #8]
   14088:	str	r3, [sp, #4]
   1408c:	bl	137a0 <flatcc_builder_default_alloc@@Base+0x3f8>
   14090:	cmp	r0, #0
   14094:	bne	140b0 <flatcc_builder_create_buffer@@Base+0x1ac>
   14098:	ldr	r3, [pc, #28]	; 140bc <flatcc_builder_create_buffer@@Base+0x1b8>
   1409c:	mov	r2, #772	; 0x304
   140a0:	ldr	r1, [pc, #24]	; 140c0 <flatcc_builder_create_buffer@@Base+0x1bc>
   140a4:	ldr	r0, [pc, #24]	; 140c4 <flatcc_builder_create_buffer@@Base+0x1c0>
   140a8:	bl	12508 <__assert_fail@plt>
   140ac:	mov	r0, r7
   140b0:	add	sp, sp, #92	; 0x5c
   140b4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   140b8:	andeq	r9, r1, r2, ror #24
   140bc:	andeq	r9, r1, r7, lsl #30
   140c0:	andeq	sl, r1, r8, asr #6
   140c4:			; <UNDEFINED> instruction: 0x0001a3b5

000140c8 <flatcc_builder_create_struct@@Base>:
   140c8:	cmp	r3, #0
   140cc:	push	{lr}		; (str lr, [sp, #-4]!)
   140d0:	sub	sp, sp, #76	; 0x4c
   140d4:	bne	140ec <flatcc_builder_create_struct@@Base+0x24>
   140d8:	ldr	r3, [pc, #144]	; 14170 <flatcc_builder_create_struct@@Base+0xa8>
   140dc:	ldr	r2, [pc, #144]	; 14174 <flatcc_builder_create_struct@@Base+0xac>
   140e0:	ldr	r1, [pc, #144]	; 14178 <flatcc_builder_create_struct@@Base+0xb0>
   140e4:	ldr	r0, [pc, #144]	; 1417c <flatcc_builder_create_struct@@Base+0xb4>
   140e8:	bl	12508 <__assert_fail@plt>
   140ec:	ldrh	ip, [r0, #128]	; 0x80
   140f0:	cmp	ip, r3
   140f4:	ldr	ip, [r0, #136]	; 0x88
   140f8:	strhcc	r3, [r0, #128]	; 0x80
   140fc:	sub	ip, ip, r2
   14100:	sub	r3, r3, #1
   14104:	and	r3, r3, ip
   14108:	mov	ip, #0
   1410c:	cmp	r2, ip
   14110:	strne	r2, [sp, #12]
   14114:	str	ip, [sp]
   14118:	strne	r2, [sp]
   1411c:	movne	r2, #1
   14120:	str	ip, [sp, #4]
   14124:	strne	r1, [sp, #8]
   14128:	strne	r2, [sp, #4]
   1412c:	cmp	r3, #0
   14130:	beq	14160 <flatcc_builder_create_struct@@Base+0x98>
   14134:	ldr	r2, [sp]
   14138:	add	r1, sp, #72	; 0x48
   1413c:	add	r2, r2, r3
   14140:	str	r2, [sp]
   14144:	ldr	r2, [sp, #4]
   14148:	ldr	ip, [pc, #48]	; 14180 <flatcc_builder_create_struct@@Base+0xb8>
   1414c:	add	r2, r2, #1
   14150:	str	r2, [sp, #4]
   14154:	add	r1, r1, r2, lsl #3
   14158:	str	ip, [r1, #-72]	; 0xffffffb8
   1415c:	str	r3, [r1, #-68]	; 0xffffffbc
   14160:	mov	r1, sp
   14164:	bl	137a0 <flatcc_builder_default_alloc@@Base+0x3f8>
   14168:	add	sp, sp, #76	; 0x4c
   1416c:	pop	{pc}		; (ldr pc, [sp], #4)
   14170:	andeq	r9, r1, r4, lsr #30
   14174:	andeq	r0, r0, pc, lsl #6
   14178:	andeq	sl, r1, r8, asr #6
   1417c:	andeq	sl, r1, pc, lsl #8
   14180:	andeq	r9, r1, r2, ror #24

00014184 <flatcc_builder_start_buffer@@Base>:
   14184:	push	{r4, r5, r6, r7, r8, lr}
   14188:	mov	r5, r1
   1418c:	ldrh	r1, [r0, #128]	; 0x80
   14190:	mov	r4, r0
   14194:	mov	r7, r2
   14198:	mov	r6, r3
   1419c:	bl	13510 <flatcc_builder_default_alloc@@Base+0x168>
   141a0:	cmp	r0, #0
   141a4:	bne	14218 <flatcc_builder_start_buffer@@Base+0x94>
   141a8:	ldrh	r3, [r4, #132]	; 0x84
   141ac:	ldr	ip, [r4, #32]
   141b0:	mov	r1, #1
   141b4:	strh	r1, [r4, #128]	; 0x80
   141b8:	strh	r3, [ip, #34]	; 0x22
   141bc:	ldrh	r3, [r4, #164]	; 0xa4
   141c0:	strh	r7, [r4, #132]	; 0x84
   141c4:	cmp	r5, #0
   141c8:	strh	r3, [ip, #32]
   141cc:	ldr	r3, [r4, #144]	; 0x90
   141d0:	strh	r6, [r4, #164]	; 0xa4
   141d4:	str	r3, [ip, #20]
   141d8:	ldr	r3, [r4, #152]	; 0x98
   141dc:	str	r3, [ip, #28]
   141e0:	ldr	r3, [r4, #136]	; 0x88
   141e4:	str	r3, [r4, #144]	; 0x90
   141e8:	ldr	r3, [r4, #148]	; 0x94
   141ec:	str	r3, [r4, #152]	; 0x98
   141f0:	add	r2, r3, r1
   141f4:	ldr	r3, [r4, #168]	; 0xa8
   141f8:	str	r2, [r4, #148]	; 0x94
   141fc:	str	r3, [ip, #16]
   14200:	ldr	r3, [pc, #24]	; 14220 <flatcc_builder_start_buffer@@Base+0x9c>
   14204:	moveq	r5, r3
   14208:	ldr	r3, [r5]
   1420c:	str	r3, [r4, #168]	; 0xa8
   14210:	strh	r1, [ip, #14]
   14214:	pop	{r4, r5, r6, r7, r8, pc}
   14218:	mvn	r0, #0
   1421c:	pop	{r4, r5, r6, r7, r8, pc}
   14220:	andeq	r9, r1, r2, ror #24

00014224 <flatcc_builder_end_buffer@@Base>:
   14224:	push	{r0, r1, r2, r4, r5, lr}
   14228:	mov	r4, r0
   1422c:	ldrh	r0, [r0, #164]	; 0xa4
   14230:	ldr	r2, [r4, #152]	; 0x98
   14234:	and	r0, r0, #2
   14238:	cmp	r2, #0
   1423c:	orrne	r0, r0, #1
   14240:	ldr	r2, [r4, #32]
   14244:	ldrh	r2, [r2, #14]
   14248:	cmp	r2, #1
   1424c:	beq	14264 <flatcc_builder_end_buffer@@Base+0x40>
   14250:	ldr	r3, [pc, #120]	; 142d0 <flatcc_builder_end_buffer@@Base+0xac>
   14254:	ldr	r2, [pc, #120]	; 142d4 <flatcc_builder_end_buffer@@Base+0xb0>
   14258:	ldr	r1, [pc, #120]	; 142d8 <flatcc_builder_end_buffer@@Base+0xb4>
   1425c:	ldr	r0, [pc, #120]	; 142dc <flatcc_builder_end_buffer@@Base+0xb8>
   14260:	bl	12508 <__assert_fail@plt>
   14264:	ldrh	r2, [r4, #132]	; 0x84
   14268:	mov	r3, r1
   1426c:	ldrh	r1, [r4, #128]	; 0x80
   14270:	str	r0, [sp, #4]
   14274:	mov	r0, r4
   14278:	cmp	r1, r2
   1427c:	strhcc	r2, [r4, #128]	; 0x80
   14280:	ldrh	r1, [r4, #128]	; 0x80
   14284:	str	r1, [sp]
   14288:	add	r1, r4, #168	; 0xa8
   1428c:	bl	13f04 <flatcc_builder_create_buffer@@Base>
   14290:	subs	r5, r0, #0
   14294:	beq	142c4 <flatcc_builder_end_buffer@@Base+0xa0>
   14298:	ldr	r3, [r4, #32]
   1429c:	mov	r0, r4
   142a0:	ldr	r2, [r3, #20]
   142a4:	str	r2, [r4, #144]	; 0x90
   142a8:	ldr	r2, [r3, #28]
   142ac:	str	r2, [r4, #152]	; 0x98
   142b0:	ldr	r2, [r3, #16]
   142b4:	str	r2, [r4, #168]	; 0xa8
   142b8:	ldrh	r3, [r3, #32]
   142bc:	strh	r3, [r4, #164]	; 0xa4
   142c0:	bl	1329c <test@@Base+0x9a8>
   142c4:	mov	r0, r5
   142c8:	add	sp, sp, #12
   142cc:	pop	{r4, r5, pc}
   142d0:	andeq	r9, r1, r1, asr #30
   142d4:	andeq	r0, r0, r6, asr #6
   142d8:	andeq	sl, r1, r8, asr #6
   142dc:	andeq	sl, r1, sl, lsl r4

000142e0 <flatcc_builder_start_struct@@Base>:
   142e0:	push	{r4, r5, r6, lr}
   142e4:	mov	r5, r1
   142e8:	mov	r1, r2
   142ec:	mov	r4, r0
   142f0:	bl	13510 <flatcc_builder_default_alloc@@Base+0x168>
   142f4:	cmp	r0, #0
   142f8:	bne	14324 <flatcc_builder_start_struct@@Base+0x44>
   142fc:	ldr	r3, [r4, #32]
   14300:	mov	r2, #2
   14304:	mov	r0, r4
   14308:	mvn	r1, #3
   1430c:	strh	r2, [r3, #14]
   14310:	bl	131d4 <test@@Base+0x8e0>
   14314:	mov	r1, r5
   14318:	mov	r0, r4
   1431c:	pop	{r4, r5, r6, lr}
   14320:	b	13254 <test@@Base+0x960>
   14324:	mov	r0, #0
   14328:	pop	{r4, r5, r6, pc}

0001432c <flatcc_builder_struct_edit@@Base>:
   1432c:	ldr	r0, [r0, #16]
   14330:	bx	lr

00014334 <flatcc_builder_end_struct@@Base>:
   14334:	ldr	r3, [r0, #32]
   14338:	push	{r4, r5, r6, lr}
   1433c:	ldrh	r3, [r3, #14]
   14340:	cmp	r3, #2
   14344:	beq	1435c <flatcc_builder_end_struct@@Base+0x28>
   14348:	ldr	r3, [pc, #56]	; 14388 <flatcc_builder_end_struct@@Base+0x54>
   1434c:	mov	r2, #872	; 0x368
   14350:	ldr	r1, [pc, #52]	; 1438c <flatcc_builder_end_struct@@Base+0x58>
   14354:	ldr	r0, [pc, #52]	; 14390 <flatcc_builder_end_struct@@Base+0x5c>
   14358:	bl	12508 <__assert_fail@plt>
   1435c:	ldrh	r3, [r0, #130]	; 0x82
   14360:	ldr	r2, [r0, #20]
   14364:	ldr	r1, [r0, #16]
   14368:	mov	r4, r0
   1436c:	bl	140c8 <flatcc_builder_create_struct@@Base>
   14370:	subs	r5, r0, #0
   14374:	beq	14380 <flatcc_builder_end_struct@@Base+0x4c>
   14378:	mov	r0, r4
   1437c:	bl	1329c <test@@Base+0x9a8>
   14380:	mov	r0, r5
   14384:	pop	{r4, r5, r6, pc}
   14388:	andeq	r9, r1, fp, asr pc
   1438c:	andeq	sl, r1, r8, asr #6
   14390:	andeq	sl, r1, r6, asr #8

00014394 <flatcc_builder_extend_vector@@Base>:
   14394:	push	{r4, r5, r6, lr}
   14398:	mov	r4, r0
   1439c:	ldr	r0, [r0, #32]
   143a0:	mov	r5, r1
   143a4:	ldr	r2, [r0, #24]
   143a8:	bl	13820 <flatcc_builder_default_alloc@@Base+0x478>
   143ac:	cmp	r0, #0
   143b0:	bne	143cc <flatcc_builder_extend_vector@@Base+0x38>
   143b4:	ldr	r3, [r4, #32]
   143b8:	mov	r0, r4
   143bc:	ldr	r1, [r3, #16]
   143c0:	mul	r1, r1, r5
   143c4:	pop	{r4, r5, r6, lr}
   143c8:	b	13254 <test@@Base+0x960>
   143cc:	mov	r0, #0
   143d0:	pop	{r4, r5, r6, pc}

000143d4 <flatcc_builder_vector_push@@Base>:
   143d4:	ldr	r3, [r0, #32]
   143d8:	push	{r4, lr}
   143dc:	ldrh	r2, [r3, #14]
   143e0:	cmp	r2, #4
   143e4:	beq	143fc <flatcc_builder_vector_push@@Base+0x28>
   143e8:	ldr	r3, [pc, #64]	; 14430 <flatcc_builder_vector_push@@Base+0x5c>
   143ec:	ldr	r2, [pc, #64]	; 14434 <flatcc_builder_vector_push@@Base+0x60>
   143f0:	ldr	r1, [pc, #64]	; 14438 <flatcc_builder_vector_push@@Base+0x64>
   143f4:	ldr	r0, [pc, #64]	; 1443c <flatcc_builder_vector_push@@Base+0x68>
   143f8:	bl	12508 <__assert_fail@plt>
   143fc:	ldr	r2, [r3, #20]
   14400:	ldr	ip, [r3, #24]
   14404:	cmp	r2, ip
   14408:	ldrhi	r3, [pc, #32]	; 14430 <flatcc_builder_vector_push@@Base+0x5c>
   1440c:	movhi	r2, #908	; 0x38c
   14410:	ldrhi	r1, [pc, #32]	; 14438 <flatcc_builder_vector_push@@Base+0x64>
   14414:	ldrhi	r0, [pc, #36]	; 14440 <flatcc_builder_vector_push@@Base+0x6c>
   14418:	bhi	143f8 <flatcc_builder_vector_push@@Base+0x24>
   1441c:	add	r2, r2, #1
   14420:	str	r2, [r3, #20]
   14424:	ldr	r2, [r3, #16]
   14428:	pop	{r4, lr}
   1442c:	b	13328 <test@@Base+0xa34>
   14430:	andeq	r9, r1, r5, ror pc
   14434:	andeq	r0, r0, fp, lsl #7
   14438:	andeq	sl, r1, r8, asr #6
   1443c:	andeq	sl, r1, r2, ror r4
   14440:	muleq	r1, lr, r4

00014444 <flatcc_builder_append_vector@@Base>:
   14444:	push	{r4, r5, r6, lr}
   14448:	mov	r4, r0
   1444c:	ldr	r0, [r0, #32]
   14450:	ldrh	r3, [r0, #14]
   14454:	cmp	r3, #4
   14458:	beq	14470 <flatcc_builder_append_vector@@Base+0x2c>
   1445c:	ldr	r3, [pc, #76]	; 144b0 <flatcc_builder_append_vector@@Base+0x6c>
   14460:	ldr	r2, [pc, #76]	; 144b4 <flatcc_builder_append_vector@@Base+0x70>
   14464:	ldr	r1, [pc, #76]	; 144b8 <flatcc_builder_append_vector@@Base+0x74>
   14468:	ldr	r0, [pc, #76]	; 144bc <flatcc_builder_append_vector@@Base+0x78>
   1446c:	bl	12508 <__assert_fail@plt>
   14470:	mov	r5, r2
   14474:	mov	r6, r1
   14478:	ldr	r2, [r0, #24]
   1447c:	mov	r1, r5
   14480:	bl	13820 <flatcc_builder_default_alloc@@Base+0x478>
   14484:	cmp	r0, #0
   14488:	bne	144a8 <flatcc_builder_append_vector@@Base+0x64>
   1448c:	ldr	r3, [r4, #32]
   14490:	mov	r1, r6
   14494:	mov	r0, r4
   14498:	ldr	r2, [r3, #16]
   1449c:	mul	r2, r2, r5
   144a0:	pop	{r4, r5, r6, lr}
   144a4:	b	13328 <test@@Base+0xa34>
   144a8:	mov	r0, #0
   144ac:	pop	{r4, r5, r6, pc}
   144b0:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   144b4:	muleq	r0, r3, r3
   144b8:	andeq	sl, r1, r8, asr #6
   144bc:	andeq	sl, r1, r2, ror r4

000144c0 <flatcc_builder_extend_offset_vector@@Base>:
   144c0:	push	{r4, r5, r6, lr}
   144c4:	mvn	r2, #-1073741824	; 0xc0000000
   144c8:	mov	r4, r0
   144cc:	ldr	r0, [r0, #32]
   144d0:	mov	r5, r1
   144d4:	bl	13820 <flatcc_builder_default_alloc@@Base+0x478>
   144d8:	cmp	r0, #0
   144dc:	bne	144f0 <flatcc_builder_extend_offset_vector@@Base+0x30>
   144e0:	lsl	r1, r5, #2
   144e4:	mov	r0, r4
   144e8:	pop	{r4, r5, r6, lr}
   144ec:	b	13254 <test@@Base+0x960>
   144f0:	mov	r0, #0
   144f4:	pop	{r4, r5, r6, pc}

000144f8 <flatcc_builder_offset_vector_push@@Base>:
   144f8:	ldr	r2, [r0, #32]
   144fc:	push	{r4, lr}
   14500:	ldrh	r3, [r2, #14]
   14504:	cmp	r3, #5
   14508:	beq	14520 <flatcc_builder_offset_vector_push@@Base+0x28>
   1450c:	ldr	r3, [pc, #64]	; 14554 <flatcc_builder_offset_vector_push@@Base+0x5c>
   14510:	ldr	r2, [pc, #64]	; 14558 <flatcc_builder_offset_vector_push@@Base+0x60>
   14514:	ldr	r1, [pc, #64]	; 1455c <flatcc_builder_offset_vector_push@@Base+0x64>
   14518:	ldr	r0, [pc, #64]	; 14560 <flatcc_builder_offset_vector_push@@Base+0x68>
   1451c:	bl	12508 <__assert_fail@plt>
   14520:	ldr	r3, [r2, #20]
   14524:	cmn	r3, #-1073741823	; 0xc0000001
   14528:	beq	1454c <flatcc_builder_offset_vector_push@@Base+0x54>
   1452c:	add	r3, r3, #1
   14530:	mov	r4, r1
   14534:	str	r3, [r2, #20]
   14538:	mov	r1, #4
   1453c:	bl	13254 <test@@Base+0x960>
   14540:	cmp	r0, #0
   14544:	strne	r4, [r0]
   14548:	pop	{r4, pc}
   1454c:	mov	r0, #0
   14550:	pop	{r4, pc}
   14554:	andeq	r9, r1, sp, lsr #31
   14558:	andeq	r0, r0, r6, lsr #7
   1455c:	andeq	sl, r1, r8, asr #6
   14560:	ldrdeq	sl, [r1], -fp

00014564 <flatcc_builder_append_offset_vector@@Base>:
   14564:	push	{r4, r5, r6, lr}
   14568:	mov	r4, r0
   1456c:	ldr	r0, [r0, #32]
   14570:	ldrh	r3, [r0, #14]
   14574:	cmp	r3, #5
   14578:	beq	14590 <flatcc_builder_append_offset_vector@@Base+0x2c>
   1457c:	ldr	r3, [pc, #68]	; 145c8 <flatcc_builder_append_offset_vector@@Base+0x64>
   14580:	mov	r2, #948	; 0x3b4
   14584:	ldr	r1, [pc, #64]	; 145cc <flatcc_builder_append_offset_vector@@Base+0x68>
   14588:	ldr	r0, [pc, #64]	; 145d0 <flatcc_builder_append_offset_vector@@Base+0x6c>
   1458c:	bl	12508 <__assert_fail@plt>
   14590:	mov	r5, r2
   14594:	mov	r6, r1
   14598:	mvn	r2, #-1073741824	; 0xc0000000
   1459c:	mov	r1, r5
   145a0:	bl	13820 <flatcc_builder_default_alloc@@Base+0x478>
   145a4:	cmp	r0, #0
   145a8:	bne	145c0 <flatcc_builder_append_offset_vector@@Base+0x5c>
   145ac:	lsl	r2, r5, #2
   145b0:	mov	r1, r6
   145b4:	mov	r0, r4
   145b8:	pop	{r4, r5, r6, lr}
   145bc:	b	13328 <test@@Base+0xa34>
   145c0:	mov	r0, #0
   145c4:	pop	{r4, r5, r6, pc}
   145c8:	andeq	r9, r1, pc, asr #31
   145cc:	andeq	sl, r1, r8, asr #6
   145d0:	ldrdeq	sl, [r1], -fp

000145d4 <flatcc_builder_extend_string@@Base>:
   145d4:	push	{r4, r5, r6, lr}
   145d8:	mov	r4, r0
   145dc:	ldr	r0, [r0, #32]
   145e0:	ldrh	r3, [r0, #14]
   145e4:	cmp	r3, #6
   145e8:	beq	14600 <flatcc_builder_extend_string@@Base+0x2c>
   145ec:	ldr	r3, [pc, #56]	; 1462c <flatcc_builder_extend_string@@Base+0x58>
   145f0:	ldr	r2, [pc, #56]	; 14630 <flatcc_builder_extend_string@@Base+0x5c>
   145f4:	ldr	r1, [pc, #56]	; 14634 <flatcc_builder_extend_string@@Base+0x60>
   145f8:	ldr	r0, [pc, #56]	; 14638 <flatcc_builder_extend_string@@Base+0x64>
   145fc:	bl	12508 <__assert_fail@plt>
   14600:	mvn	r2, #0
   14604:	mov	r5, r1
   14608:	bl	13820 <flatcc_builder_default_alloc@@Base+0x478>
   1460c:	cmp	r0, #0
   14610:	bne	14624 <flatcc_builder_extend_string@@Base+0x50>
   14614:	mov	r1, r5
   14618:	mov	r0, r4
   1461c:	pop	{r4, r5, r6, lr}
   14620:	b	13254 <test@@Base+0x960>
   14624:	mov	r0, #0
   14628:	pop	{r4, r5, r6, pc}
   1462c:	strdeq	r9, [r1], -r3
   14630:			; <UNDEFINED> instruction: 0x000003bd
   14634:	andeq	sl, r1, r8, asr #6
   14638:	andeq	sl, r1, lr, lsl #10

0001463c <flatcc_builder_append_string@@Base>:
   1463c:	push	{r4, r5, r6, lr}
   14640:	mov	r4, r0
   14644:	ldr	r0, [r0, #32]
   14648:	ldrh	r3, [r0, #14]
   1464c:	cmp	r3, #6
   14650:	beq	14668 <flatcc_builder_append_string@@Base+0x2c>
   14654:	ldr	r3, [pc, #68]	; 146a0 <flatcc_builder_append_string@@Base+0x64>
   14658:	ldr	r2, [pc, #68]	; 146a4 <flatcc_builder_append_string@@Base+0x68>
   1465c:	ldr	r1, [pc, #68]	; 146a8 <flatcc_builder_append_string@@Base+0x6c>
   14660:	ldr	r0, [pc, #68]	; 146ac <flatcc_builder_append_string@@Base+0x70>
   14664:	bl	12508 <__assert_fail@plt>
   14668:	mov	r5, r2
   1466c:	mov	r6, r1
   14670:	mvn	r2, #0
   14674:	mov	r1, r5
   14678:	bl	13820 <flatcc_builder_default_alloc@@Base+0x478>
   1467c:	cmp	r0, #0
   14680:	bne	14698 <flatcc_builder_append_string@@Base+0x5c>
   14684:	mov	r2, r5
   14688:	mov	r1, r6
   1468c:	mov	r0, r4
   14690:	pop	{r4, r5, r6, lr}
   14694:	b	13328 <test@@Base+0xa34>
   14698:	mov	r0, #0
   1469c:	pop	{r4, r5, r6, pc}
   146a0:	andeq	sl, r1, r0, lsl r0
   146a4:	andeq	r0, r0, r6, asr #7
   146a8:	andeq	sl, r1, r8, asr #6
   146ac:	andeq	sl, r1, lr, lsl #10

000146b0 <flatcc_builder_append_string_str@@Base>:
   146b0:	push	{r4, r5, r6, lr}
   146b4:	mov	r5, r0
   146b8:	mov	r0, r1
   146bc:	mov	r4, r1
   146c0:	bl	124a8 <strlen@plt>
   146c4:	mov	r1, r4
   146c8:	mov	r2, r0
   146cc:	mov	r0, r5
   146d0:	pop	{r4, r5, r6, lr}
   146d4:	b	1463c <flatcc_builder_append_string@@Base>

000146d8 <flatcc_builder_append_string_strn@@Base>:
   146d8:	push	{r4, r5, r6, lr}
   146dc:	mov	r4, r1
   146e0:	mov	r6, r0
   146e4:	mov	r1, #0
   146e8:	mov	r0, r4
   146ec:	mov	r5, r2
   146f0:	bl	124e4 <memchr@plt>
   146f4:	mov	r1, r4
   146f8:	cmp	r0, #0
   146fc:	subne	r5, r0, r4
   14700:	mov	r2, r5
   14704:	mov	r0, r6
   14708:	pop	{r4, r5, r6, lr}
   1470c:	b	1463c <flatcc_builder_append_string@@Base>

00014710 <flatcc_builder_truncate_vector@@Base>:
   14710:	ldr	r3, [r0, #32]
   14714:	push	{r4, lr}
   14718:	ldrh	r2, [r3, #14]
   1471c:	cmp	r2, #4
   14720:	beq	14738 <flatcc_builder_truncate_vector@@Base+0x28>
   14724:	ldr	r3, [pc, #68]	; 14770 <flatcc_builder_truncate_vector@@Base+0x60>
   14728:	ldr	r2, [pc, #68]	; 14774 <flatcc_builder_truncate_vector@@Base+0x64>
   1472c:	ldr	r1, [pc, #68]	; 14778 <flatcc_builder_truncate_vector@@Base+0x68>
   14730:	ldr	r0, [pc, #68]	; 1477c <flatcc_builder_truncate_vector@@Base+0x6c>
   14734:	bl	12508 <__assert_fail@plt>
   14738:	ldr	r2, [r3, #20]
   1473c:	cmp	r2, r1
   14740:	ldrcc	r3, [pc, #40]	; 14770 <flatcc_builder_truncate_vector@@Base+0x60>
   14744:	ldrcc	r2, [pc, #52]	; 14780 <flatcc_builder_truncate_vector@@Base+0x70>
   14748:	ldrcc	r1, [pc, #40]	; 14778 <flatcc_builder_truncate_vector@@Base+0x68>
   1474c:	ldrcc	r0, [pc, #48]	; 14784 <flatcc_builder_truncate_vector@@Base+0x74>
   14750:	bcc	14734 <flatcc_builder_truncate_vector@@Base+0x24>
   14754:	sub	r2, r2, r1
   14758:	str	r2, [r3, #20]
   1475c:	ldr	r3, [r3, #16]
   14760:	mul	r1, r3, r1
   14764:	bl	13308 <test@@Base+0xa14>
   14768:	mov	r0, #0
   1476c:	pop	{r4, pc}
   14770:	andeq	sl, r1, sp, lsr #32
   14774:	ldrdeq	r0, [r0], -r9
   14778:	andeq	sl, r1, r8, asr #6
   1477c:	andeq	sl, r1, r2, ror r4
   14780:	ldrdeq	r0, [r0], -sl
   14784:	andeq	sl, r1, sl, lsr r5

00014788 <flatcc_builder_truncate_offset_vector@@Base>:
   14788:	ldr	r3, [r0, #32]
   1478c:	push	{r4, lr}
   14790:	ldrh	r2, [r3, #14]
   14794:	cmp	r2, #5
   14798:	beq	147b0 <flatcc_builder_truncate_offset_vector@@Base+0x28>
   1479c:	ldr	r3, [pc, #68]	; 147e8 <flatcc_builder_truncate_offset_vector@@Base+0x60>
   147a0:	ldr	r2, [pc, #68]	; 147ec <flatcc_builder_truncate_offset_vector@@Base+0x64>
   147a4:	ldr	r1, [pc, #68]	; 147f0 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   147a8:	ldr	r0, [pc, #68]	; 147f4 <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   147ac:	bl	12508 <__assert_fail@plt>
   147b0:	ldr	r2, [r3, #20]
   147b4:	cmp	r2, r1
   147b8:	ldrcc	r3, [pc, #40]	; 147e8 <flatcc_builder_truncate_offset_vector@@Base+0x60>
   147bc:	ldrcc	r2, [pc, #52]	; 147f8 <flatcc_builder_truncate_offset_vector@@Base+0x70>
   147c0:	ldrcc	r1, [pc, #40]	; 147f0 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   147c4:	ldrcc	r0, [pc, #48]	; 147fc <flatcc_builder_truncate_offset_vector@@Base+0x74>
   147c8:	bcc	147ac <flatcc_builder_truncate_offset_vector@@Base+0x24>
   147cc:	sub	r2, r2, r1
   147d0:	str	r2, [r3, #20]
   147d4:	ldr	r3, [r3, #16]
   147d8:	mul	r1, r3, r1
   147dc:	bl	13308 <test@@Base+0xa14>
   147e0:	mov	r0, #0
   147e4:	pop	{r4, pc}
   147e8:	andeq	sl, r1, ip, asr #32
   147ec:	andeq	r0, r0, r2, ror #7
   147f0:	andeq	sl, r1, r8, asr #6
   147f4:	ldrdeq	sl, [r1], -fp
   147f8:	andeq	r0, r0, r3, ror #7
   147fc:	andeq	sl, r1, lr, asr r5

00014800 <flatcc_builder_truncate_string@@Base>:
   14800:	ldr	r2, [r0, #32]
   14804:	push	{r4, lr}
   14808:	ldrh	r3, [r2, #14]
   1480c:	cmp	r3, #6
   14810:	beq	14828 <flatcc_builder_truncate_string@@Base+0x28>
   14814:	ldr	r3, [pc, #60]	; 14858 <flatcc_builder_truncate_string@@Base+0x58>
   14818:	ldr	r2, [pc, #60]	; 1485c <flatcc_builder_truncate_string@@Base+0x5c>
   1481c:	ldr	r1, [pc, #60]	; 14860 <flatcc_builder_truncate_string@@Base+0x60>
   14820:	ldr	r0, [pc, #60]	; 14864 <flatcc_builder_truncate_string@@Base+0x64>
   14824:	bl	12508 <__assert_fail@plt>
   14828:	ldr	r3, [r2, #20]
   1482c:	cmp	r3, r1
   14830:	ldrcc	r3, [pc, #32]	; 14858 <flatcc_builder_truncate_string@@Base+0x58>
   14834:	movcc	r2, #1004	; 0x3ec
   14838:	ldrcc	r1, [pc, #32]	; 14860 <flatcc_builder_truncate_string@@Base+0x60>
   1483c:	ldrcc	r0, [pc, #36]	; 14868 <flatcc_builder_truncate_string@@Base+0x68>
   14840:	bcc	14824 <flatcc_builder_truncate_string@@Base+0x24>
   14844:	sub	r3, r3, r1
   14848:	str	r3, [r2, #20]
   1484c:	bl	13308 <test@@Base+0xa14>
   14850:	mov	r0, #0
   14854:	pop	{r4, pc}
   14858:	andeq	sl, r1, r2, ror r0
   1485c:	andeq	r0, r0, fp, ror #7
   14860:	andeq	sl, r1, r8, asr #6
   14864:	andeq	sl, r1, lr, lsl #10
   14868:	muleq	r1, r9, r5

0001486c <flatcc_builder_start_vector@@Base>:
   1486c:	cmp	r2, #4
   14870:	push	{r4, r5, r6, r7, r8, lr}
   14874:	mov	r7, r1
   14878:	movcs	r1, r2
   1487c:	movcc	r1, #4
   14880:	mov	r5, r0
   14884:	mov	r6, r3
   14888:	bl	13510 <flatcc_builder_default_alloc@@Base+0x168>
   1488c:	subs	r4, r0, #0
   14890:	mvnne	r4, #0
   14894:	bne	148bc <flatcc_builder_start_vector@@Base+0x50>
   14898:	ldr	r2, [r5, #32]
   1489c:	mov	r3, #4
   148a0:	mvn	r1, #3
   148a4:	str	r7, [r2, #16]
   148a8:	str	r4, [r2, #20]
   148ac:	str	r6, [r2, #24]
   148b0:	strh	r3, [r2, #14]
   148b4:	mov	r0, r5
   148b8:	bl	131d4 <test@@Base+0x8e0>
   148bc:	mov	r0, r4
   148c0:	pop	{r4, r5, r6, r7, r8, pc}

000148c4 <flatcc_builder_start_offset_vector@@Base>:
   148c4:	push	{r4, r5, r6, lr}
   148c8:	mov	r1, #4
   148cc:	mov	r5, r0
   148d0:	bl	13510 <flatcc_builder_default_alloc@@Base+0x168>
   148d4:	subs	r4, r0, #0
   148d8:	mvnne	r4, #0
   148dc:	bne	14904 <flatcc_builder_start_offset_vector@@Base+0x40>
   148e0:	ldr	r3, [r5, #32]
   148e4:	mov	r2, #4
   148e8:	mvn	r1, #3
   148ec:	str	r2, [r3, #16]
   148f0:	mov	r2, #5
   148f4:	str	r4, [r3, #20]
   148f8:	strh	r2, [r3, #14]
   148fc:	mov	r0, r5
   14900:	bl	131d4 <test@@Base+0x8e0>
   14904:	mov	r0, r4
   14908:	pop	{r4, r5, r6, pc}

0001490c <flatcc_builder_start_string@@Base>:
   1490c:	push	{r4, r5, r6, lr}
   14910:	mov	r1, #1
   14914:	mov	r5, r0
   14918:	bl	13510 <flatcc_builder_default_alloc@@Base+0x168>
   1491c:	subs	r4, r0, #0
   14920:	mvnne	r4, #0
   14924:	bne	1494c <flatcc_builder_start_string@@Base+0x40>
   14928:	ldr	r3, [r5, #32]
   1492c:	mov	r2, #1
   14930:	mvn	r1, #3
   14934:	str	r2, [r3, #16]
   14938:	mov	r2, #6
   1493c:	str	r4, [r3, #20]
   14940:	strh	r2, [r3, #14]
   14944:	mov	r0, r5
   14948:	bl	131d4 <test@@Base+0x8e0>
   1494c:	mov	r0, r4
   14950:	pop	{r4, r5, r6, pc}

00014954 <flatcc_builder_reserve_table@@Base>:
   14954:	cmp	r1, #0
   14958:	bge	14974 <flatcc_builder_reserve_table@@Base+0x20>
   1495c:	push	{r4, lr}
   14960:	ldr	r3, [pc, #16]	; 14978 <flatcc_builder_reserve_table@@Base+0x24>
   14964:	ldr	r2, [pc, #16]	; 1497c <flatcc_builder_reserve_table@@Base+0x28>
   14968:	ldr	r1, [pc, #16]	; 14980 <flatcc_builder_reserve_table@@Base+0x2c>
   1496c:	ldr	r0, [pc, #16]	; 14984 <flatcc_builder_reserve_table@@Base+0x30>
   14970:	bl	12508 <__assert_fail@plt>
   14974:	b	135f0 <flatcc_builder_default_alloc@@Base+0x248>
   14978:	muleq	r1, r1, r0
   1497c:	andeq	r0, r0, r9, lsr #8
   14980:	andeq	sl, r1, r8, asr #6
   14984:	ldrdeq	sl, [r1], -r1

00014988 <flatcc_builder_start_table@@Base>:
   14988:	push	{r4, r5, r6, lr}
   1498c:	mov	r5, r1
   14990:	mov	r1, #4
   14994:	mov	r4, r0
   14998:	bl	13510 <flatcc_builder_default_alloc@@Base+0x168>
   1499c:	cmp	r0, #0
   149a0:	beq	149b0 <flatcc_builder_start_table@@Base+0x28>
   149a4:	mvn	r5, #0
   149a8:	mov	r0, r5
   149ac:	pop	{r4, r5, r6, pc}
   149b0:	ldr	r1, [r4, #52]	; 0x34
   149b4:	ldr	r2, [r4, #4]
   149b8:	ldr	r3, [r4, #32]
   149bc:	sub	r2, r2, r1
   149c0:	str	r2, [r3, #16]
   149c4:	ldr	r1, [r4, #76]	; 0x4c
   149c8:	ldr	r2, [r4]
   149cc:	sub	r2, r2, r1
   149d0:	str	r2, [r3, #20]
   149d4:	ldr	r2, [r4, #12]
   149d8:	mov	r1, r5
   149dc:	str	r2, [r3, #24]
   149e0:	ldrh	r2, [r4, #8]
   149e4:	strh	r2, [r3, #28]
   149e8:	ldr	r2, [pc, #44]	; 14a1c <flatcc_builder_start_table@@Base+0x94>
   149ec:	strh	r0, [r4, #8]
   149f0:	str	r2, [r4, #12]
   149f4:	mov	r2, #3
   149f8:	strh	r2, [r3, #14]
   149fc:	mov	r0, r4
   14a00:	bl	135f0 <flatcc_builder_default_alloc@@Base+0x248>
   14a04:	subs	r5, r0, #0
   14a08:	bne	149a4 <flatcc_builder_start_table@@Base+0x1c>
   14a0c:	ldr	r1, [pc, #12]	; 14a20 <flatcc_builder_start_table@@Base+0x98>
   14a10:	mov	r0, r4
   14a14:	bl	131d4 <test@@Base+0x8e0>
   14a18:	b	149a8 <flatcc_builder_start_table@@Base+0x20>
   14a1c:	svccs	0x00693b52
   14a20:	strdeq	pc, [r0], -ip

00014a24 <flatcc_builder_create_vtable@@Base>:
   14a24:	push	{lr}		; (str lr, [sp, #-4]!)
   14a28:	sub	sp, sp, #76	; 0x4c
   14a2c:	cmp	r2, #0
   14a30:	mov	r3, #0
   14a34:	str	r3, [sp]
   14a38:	str	r3, [sp, #4]
   14a3c:	movne	r3, #1
   14a40:	strne	r3, [sp, #4]
   14a44:	ldr	r3, [r0, #152]	; 0x98
   14a48:	strne	r1, [sp, #8]
   14a4c:	strne	r2, [sp]
   14a50:	strne	r2, [sp, #12]
   14a54:	cmp	r3, #0
   14a58:	mov	r1, sp
   14a5c:	bne	14a78 <flatcc_builder_create_vtable@@Base+0x54>
   14a60:	ldr	r3, [r0, #180]	; 0xb4
   14a64:	cmp	r3, #0
   14a68:	bne	14a78 <flatcc_builder_create_vtable@@Base+0x54>
   14a6c:	bl	13674 <flatcc_builder_default_alloc@@Base+0x2cc>
   14a70:	add	sp, sp, #76	; 0x4c
   14a74:	pop	{pc}		; (ldr pc, [sp], #4)
   14a78:	bl	137a0 <flatcc_builder_default_alloc@@Base+0x3f8>
   14a7c:	cmp	r0, #0
   14a80:	addne	r0, r0, #1
   14a84:	b	14a70 <flatcc_builder_create_vtable@@Base+0x4c>

00014a88 <flatcc_builder_create_cached_vtable@@Base>:
   14a88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a8c:	mov	r4, r0
   14a90:	ldr	r5, [r0, #116]	; 0x74
   14a94:	sub	sp, sp, #20
   14a98:	cmp	r5, #0
   14a9c:	mov	fp, r1
   14aa0:	mov	r7, r2
   14aa4:	mov	r6, r3
   14aa8:	bne	14b50 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   14aac:	ldr	r3, [r0, #124]	; 0x7c
   14ab0:	add	r9, r0, #92	; 0x5c
   14ab4:	cmp	r3, #0
   14ab8:	beq	14ad0 <flatcc_builder_create_cached_vtable@@Base+0x48>
   14abc:	ldr	r3, [pc, #556]	; 14cf0 <flatcc_builder_create_cached_vtable@@Base+0x268>
   14ac0:	ldr	r2, [pc, #556]	; 14cf4 <flatcc_builder_create_cached_vtable@@Base+0x26c>
   14ac4:	ldr	r1, [pc, #556]	; 14cf8 <flatcc_builder_create_cached_vtable@@Base+0x270>
   14ac8:	ldr	r0, [pc, #556]	; 14cfc <flatcc_builder_create_cached_vtable@@Base+0x274>
   14acc:	bl	12508 <__assert_fail@plt>
   14ad0:	str	r5, [sp]
   14ad4:	mov	r3, #16
   14ad8:	mov	r2, r5
   14adc:	mov	r1, #6
   14ae0:	bl	134a0 <flatcc_builder_default_alloc@@Base+0xf8>
   14ae4:	cmp	r0, #0
   14ae8:	beq	14b24 <flatcc_builder_create_cached_vtable@@Base+0x9c>
   14aec:	mov	r3, #16
   14af0:	str	r3, [r4, #124]	; 0x7c
   14af4:	mov	r3, #5
   14af8:	str	r3, [sp]
   14afc:	mov	r1, r9
   14b00:	mov	r3, #1
   14b04:	ldr	r8, [r4, #48]	; 0x30
   14b08:	mov	r2, #256	; 0x100
   14b0c:	ldr	r0, [r4, #40]	; 0x28
   14b10:	blx	r8
   14b14:	cmp	r0, #0
   14b18:	moveq	r3, #256	; 0x100
   14b1c:	ldreq	r1, [r4, #96]	; 0x60
   14b20:	beq	14b30 <flatcc_builder_create_cached_vtable@@Base+0xa8>
   14b24:	mov	r0, #0
   14b28:	b	14ca0 <flatcc_builder_create_cached_vtable@@Base+0x218>
   14b2c:	mov	r3, r2
   14b30:	lsl	r2, r3, #1
   14b34:	cmp	r2, r1
   14b38:	bls	14b2c <flatcc_builder_create_cached_vtable@@Base+0xa4>
   14b3c:	lsr	r3, r3, #2
   14b40:	mov	r2, #1
   14b44:	cmp	r3, r2, lsl r5
   14b48:	bhi	14c10 <flatcc_builder_create_cached_vtable@@Base+0x188>
   14b4c:	str	r5, [r4, #116]	; 0x74
   14b50:	ldr	r3, [r4, #116]	; 0x74
   14b54:	ldr	r8, [r4, #92]	; 0x5c
   14b58:	rsb	r3, r3, #32
   14b5c:	lsr	r6, r6, r3
   14b60:	adds	r3, r8, r6, lsl #2
   14b64:	str	r3, [sp, #8]
   14b68:	ldrne	r9, [r8, r6, lsl #2]
   14b6c:	movne	sl, #0
   14b70:	beq	14b24 <flatcc_builder_create_cached_vtable@@Base+0x9c>
   14b74:	cmp	r9, #0
   14b78:	bne	14c18 <flatcc_builder_create_cached_vtable@@Base+0x190>
   14b7c:	str	r9, [sp]
   14b80:	mov	r3, #16
   14b84:	ldr	r2, [r4, #124]	; 0x7c
   14b88:	mov	r1, #6
   14b8c:	mov	r0, r4
   14b90:	bl	134a0 <flatcc_builder_default_alloc@@Base+0xf8>
   14b94:	subs	r5, r0, #0
   14b98:	beq	14b24 <flatcc_builder_create_cached_vtable@@Base+0x9c>
   14b9c:	ldr	r3, [r4, #124]	; 0x7c
   14ba0:	mov	r1, fp
   14ba4:	add	r2, r3, #16
   14ba8:	str	r2, [r4, #124]	; 0x7c
   14bac:	ldr	r2, [r4, #152]	; 0x98
   14bb0:	mov	r0, r4
   14bb4:	str	r2, [r5, #4]
   14bb8:	ldr	r2, [r8, r6, lsl #2]
   14bbc:	str	r2, [r5, #12]
   14bc0:	str	r3, [r8, r6, lsl #2]
   14bc4:	mov	r2, r7
   14bc8:	bl	14a24 <flatcc_builder_create_vtable@@Base>
   14bcc:	cmp	r0, #0
   14bd0:	str	r0, [r5]
   14bd4:	beq	14b24 <flatcc_builder_create_cached_vtable@@Base+0x9c>
   14bd8:	cmp	sl, #0
   14bdc:	ldrne	r3, [sl, #8]
   14be0:	strne	r3, [r5, #8]
   14be4:	bne	14c9c <flatcc_builder_create_cached_vtable@@Base+0x214>
   14be8:	ldr	r2, [r4, #172]	; 0xac
   14bec:	cmp	r2, #0
   14bf0:	beq	14ca8 <flatcc_builder_create_cached_vtable@@Base+0x220>
   14bf4:	ldr	r3, [r4, #120]	; 0x78
   14bf8:	add	r3, r7, r3
   14bfc:	cmp	r2, r3
   14c00:	bcs	14ca8 <flatcc_builder_create_cached_vtable@@Base+0x220>
   14c04:	mov	r0, r4
   14c08:	bl	139e4 <flatcc_builder_flush_vtable_cache@@Base>
   14c0c:	b	14c9c <flatcc_builder_create_cached_vtable@@Base+0x214>
   14c10:	add	r5, r5, #1
   14c14:	b	14b44 <flatcc_builder_create_cached_vtable@@Base+0xbc>
   14c18:	ldr	r5, [r4, #100]	; 0x64
   14c1c:	ldr	r0, [r4, #68]	; 0x44
   14c20:	add	r5, r5, r9
   14c24:	ldr	r2, [r5, #8]
   14c28:	add	r1, r0, r2
   14c2c:	ldrh	r2, [r0, r2]
   14c30:	cmp	r2, r7
   14c34:	bne	14c54 <flatcc_builder_create_cached_vtable@@Base+0x1cc>
   14c38:	mov	r2, r7
   14c3c:	mov	r0, fp
   14c40:	str	r3, [sp, #12]
   14c44:	bl	1246c <memcmp@plt>
   14c48:	ldr	r3, [sp, #12]
   14c4c:	cmp	r0, #0
   14c50:	beq	14c68 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   14c54:	add	r3, r5, #12
   14c58:	ldr	r9, [r5, #12]
   14c5c:	mov	r5, sl
   14c60:	mov	sl, r5
   14c64:	b	14b74 <flatcc_builder_create_cached_vtable@@Base+0xec>
   14c68:	ldr	r1, [r5, #4]
   14c6c:	ldr	r2, [r4, #152]	; 0x98
   14c70:	cmp	r1, r2
   14c74:	addne	r3, r5, #12
   14c78:	ldrne	r9, [r5, #12]
   14c7c:	bne	14c60 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   14c80:	ldr	r2, [sp, #8]
   14c84:	cmp	r3, r2
   14c88:	ldrne	r2, [r5, #12]
   14c8c:	strne	r2, [r3]
   14c90:	ldrne	r3, [r8, r6, lsl #2]
   14c94:	strne	r3, [r5, #12]
   14c98:	strne	r9, [r8, r6, lsl #2]
   14c9c:	ldr	r0, [r5]
   14ca0:	add	sp, sp, #20
   14ca4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ca8:	mov	r3, #0
   14cac:	str	r3, [sp]
   14cb0:	ldr	r2, [r4, #120]	; 0x78
   14cb4:	mov	r3, r7
   14cb8:	mov	r1, #2
   14cbc:	mov	r0, r4
   14cc0:	bl	134a0 <flatcc_builder_default_alloc@@Base+0xf8>
   14cc4:	cmp	r0, #0
   14cc8:	mvneq	r0, #0
   14ccc:	beq	14ca0 <flatcc_builder_create_cached_vtable@@Base+0x218>
   14cd0:	ldr	r3, [r4, #120]	; 0x78
   14cd4:	mov	r2, r7
   14cd8:	str	r3, [r5, #8]
   14cdc:	add	r3, r7, r3
   14ce0:	str	r3, [r4, #120]	; 0x78
   14ce4:	mov	r1, fp
   14ce8:	bl	12460 <memcpy@plt>
   14cec:	b	14c9c <flatcc_builder_create_cached_vtable@@Base+0x214>
   14cf0:	andeq	sl, r1, lr, lsr #1
   14cf4:	andeq	r0, r0, r6, asr r1
   14cf8:	andeq	sl, r1, r8, asr #6
   14cfc:			; <UNDEFINED> instruction: 0x0001a5bb

00014d00 <flatcc_builder_create_table@@Base>:
   14d00:	push	{r4, r5, r6, r7, lr}
   14d04:	sub	sp, sp, #84	; 0x54
   14d08:	ldr	r4, [sp, #108]	; 0x6c
   14d0c:	ldr	lr, [sp, #112]	; 0x70
   14d10:	cmp	r4, #0
   14d14:	bge	14d2c <flatcc_builder_create_table@@Base+0x2c>
   14d18:	ldr	r3, [pc, #268]	; 14e2c <flatcc_builder_create_table@@Base+0x12c>
   14d1c:	ldr	r2, [pc, #268]	; 14e30 <flatcc_builder_create_table@@Base+0x130>
   14d20:	ldr	r1, [pc, #268]	; 14e34 <flatcc_builder_create_table@@Base+0x134>
   14d24:	ldr	r0, [pc, #268]	; 14e38 <flatcc_builder_create_table@@Base+0x138>
   14d28:	bl	12508 <__assert_fail@plt>
   14d2c:	tst	lr, #1
   14d30:	ldreq	r3, [pc, #244]	; 14e2c <flatcc_builder_create_table@@Base+0x12c>
   14d34:	ldreq	r2, [pc, #256]	; 14e3c <flatcc_builder_create_table@@Base+0x13c>
   14d38:	ldreq	r1, [pc, #244]	; 14e34 <flatcc_builder_create_table@@Base+0x134>
   14d3c:	ldreq	r0, [pc, #252]	; 14e40 <flatcc_builder_create_table@@Base+0x140>
   14d40:	beq	14d28 <flatcc_builder_create_table@@Base+0x28>
   14d44:	ldrh	ip, [r0, #128]	; 0x80
   14d48:	cmp	r3, #4
   14d4c:	movcc	r3, #4
   14d50:	ldr	r6, [r0, #136]	; 0x88
   14d54:	cmp	ip, r3
   14d58:	mvn	r5, #3
   14d5c:	sub	ip, r6, r2
   14d60:	strhcc	r3, [r0, #128]	; 0x80
   14d64:	sub	r3, r3, #1
   14d68:	and	r3, r3, ip
   14d6c:	sub	ip, r5, r2
   14d70:	add	ip, ip, r6
   14d74:	sub	ip, ip, r3
   14d78:	sub	lr, lr, #1
   14d7c:	sub	lr, ip, lr
   14d80:	str	lr, [sp, #4]
   14d84:	ldr	lr, [sp, #104]	; 0x68
   14d88:	sub	ip, r5, ip
   14d8c:	add	r4, lr, r4, lsl #1
   14d90:	cmp	r4, lr
   14d94:	bne	14e14 <flatcc_builder_create_table@@Base+0x114>
   14d98:	mov	ip, #4
   14d9c:	cmp	r2, #0
   14da0:	str	ip, [sp, #8]
   14da4:	add	lr, sp, ip
   14da8:	str	ip, [sp, #20]
   14dac:	mov	ip, #1
   14db0:	str	ip, [sp, #12]
   14db4:	strne	r2, [sp, #28]
   14db8:	addne	ip, r2, #4
   14dbc:	movne	r2, #2
   14dc0:	strne	ip, [sp, #8]
   14dc4:	strne	r1, [sp, #24]
   14dc8:	strne	r2, [sp, #12]
   14dcc:	cmp	r3, #0
   14dd0:	str	lr, [sp, #16]
   14dd4:	beq	14e04 <flatcc_builder_create_table@@Base+0x104>
   14dd8:	ldr	r2, [sp, #8]
   14ddc:	add	r1, sp, #80	; 0x50
   14de0:	add	r2, r2, r3
   14de4:	str	r2, [sp, #8]
   14de8:	ldr	r2, [sp, #12]
   14dec:	ldr	ip, [pc, #80]	; 14e44 <flatcc_builder_create_table@@Base+0x144>
   14df0:	add	r2, r2, #1
   14df4:	str	r2, [sp, #12]
   14df8:	add	r1, r1, r2, lsl #3
   14dfc:	str	ip, [r1, #-72]	; 0xffffffb8
   14e00:	str	r3, [r1, #-68]	; 0xffffffbc
   14e04:	add	r1, sp, #8
   14e08:	bl	137a0 <flatcc_builder_default_alloc@@Base+0x3f8>
   14e0c:	add	sp, sp, #84	; 0x54
   14e10:	pop	{r4, r5, r6, r7, pc}
   14e14:	ldrh	r5, [lr], #2
   14e18:	sub	r7, ip, r5
   14e1c:	ldr	r6, [r1, r5]
   14e20:	add	r6, r6, r7
   14e24:	str	r6, [r1, r5]
   14e28:	b	14d90 <flatcc_builder_create_table@@Base+0x90>
   14e2c:	strheq	sl, [r1], -r7
   14e30:	ldrdeq	r0, [r0], -r5
   14e34:	andeq	sl, r1, r8, asr #6
   14e38:	andeq	sl, r1, sl, asr #11
   14e3c:	ldrdeq	r0, [r0], -fp
   14e40:	ldrdeq	sl, [r1], -ip
   14e44:	andeq	r9, r1, r2, ror #24

00014e48 <flatcc_builder_check_required_field@@Base>:
   14e48:	ldr	r3, [r0, #32]
   14e4c:	ldrh	r3, [r3, #14]
   14e50:	cmp	r3, #3
   14e54:	beq	14e70 <flatcc_builder_check_required_field@@Base+0x28>
   14e58:	push	{r4, lr}
   14e5c:	ldr	r3, [pc, #52]	; 14e98 <flatcc_builder_check_required_field@@Base+0x50>
   14e60:	ldr	r2, [pc, #52]	; 14e9c <flatcc_builder_check_required_field@@Base+0x54>
   14e64:	ldr	r1, [pc, #52]	; 14ea0 <flatcc_builder_check_required_field@@Base+0x58>
   14e68:	ldr	r0, [pc, #52]	; 14ea4 <flatcc_builder_check_required_field@@Base+0x5c>
   14e6c:	bl	12508 <__assert_fail@plt>
   14e70:	ldrh	r3, [r0, #8]
   14e74:	cmp	r3, r1
   14e78:	movls	r0, #0
   14e7c:	bls	14e94 <flatcc_builder_check_required_field@@Base+0x4c>
   14e80:	ldr	r3, [r0, #4]
   14e84:	lsl	r1, r1, #1
   14e88:	ldrh	r0, [r3, r1]
   14e8c:	adds	r0, r0, #0
   14e90:	movne	r0, #1
   14e94:	bx	lr
   14e98:	ldrdeq	sl, [r1], -r3
   14e9c:	strdeq	r0, [r0], -r8
   14ea0:	andeq	sl, r1, r8, asr #6
   14ea4:	andeq	sl, r1, r7, ror #11

00014ea8 <flatcc_builder_check_union_field@@Base>:
   14ea8:	ldr	r3, [r0, #32]
   14eac:	ldrh	r3, [r3, #14]
   14eb0:	cmp	r3, #3
   14eb4:	beq	14ed0 <flatcc_builder_check_union_field@@Base+0x28>
   14eb8:	push	{r4, lr}
   14ebc:	ldr	r3, [pc, #112]	; 14f34 <flatcc_builder_check_union_field@@Base+0x8c>
   14ec0:	ldr	r2, [pc, #112]	; 14f38 <flatcc_builder_check_union_field@@Base+0x90>
   14ec4:	ldr	r1, [pc, #112]	; 14f3c <flatcc_builder_check_union_field@@Base+0x94>
   14ec8:	ldr	r0, [pc, #112]	; 14f40 <flatcc_builder_check_union_field@@Base+0x98>
   14ecc:	bl	12508 <__assert_fail@plt>
   14ed0:	cmp	r1, #0
   14ed4:	beq	14f2c <flatcc_builder_check_union_field@@Base+0x84>
   14ed8:	ldrh	r3, [r0, #8]
   14edc:	cmp	r3, r1
   14ee0:	bls	14f2c <flatcc_builder_check_union_field@@Base+0x84>
   14ee4:	sub	r1, r1, #-2147483647	; 0x80000001
   14ee8:	ldr	r3, [r0, #4]
   14eec:	lsl	r1, r1, #1
   14ef0:	ldrh	r2, [r3, r1]!
   14ef4:	cmp	r2, #0
   14ef8:	ldrheq	r0, [r3, #2]
   14efc:	beq	14f20 <flatcc_builder_check_union_field@@Base+0x78>
   14f00:	ldr	r1, [r0, #16]
   14f04:	ldrh	r0, [r3, #2]
   14f08:	ldrb	r2, [r1, r2]
   14f0c:	cmp	r2, #0
   14f10:	beq	14f20 <flatcc_builder_check_union_field@@Base+0x78>
   14f14:	adds	r0, r0, #0
   14f18:	movne	r0, #1
   14f1c:	bx	lr
   14f20:	clz	r0, r0
   14f24:	lsr	r0, r0, #5
   14f28:	b	14f1c <flatcc_builder_check_union_field@@Base+0x74>
   14f2c:	mov	r0, #0
   14f30:	b	14f1c <flatcc_builder_check_union_field@@Base+0x74>
   14f34:	strdeq	sl, [r1], -r7
   14f38:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   14f3c:	andeq	sl, r1, r8, asr #6
   14f40:	andeq	sl, r1, r7, ror #11

00014f44 <flatcc_builder_check_required@@Base>:
   14f44:	ldr	r3, [r0, #32]
   14f48:	push	{r4, lr}
   14f4c:	ldrh	r3, [r3, #14]
   14f50:	cmp	r3, #3
   14f54:	beq	14f6c <flatcc_builder_check_required@@Base+0x28>
   14f58:	ldr	r3, [pc, #84]	; 14fb4 <flatcc_builder_check_required@@Base+0x70>
   14f5c:	ldr	r2, [pc, #84]	; 14fb8 <flatcc_builder_check_required@@Base+0x74>
   14f60:	ldr	r1, [pc, #84]	; 14fbc <flatcc_builder_check_required@@Base+0x78>
   14f64:	ldr	r0, [pc, #84]	; 14fc0 <flatcc_builder_check_required@@Base+0x7c>
   14f68:	bl	12508 <__assert_fail@plt>
   14f6c:	ldrh	r3, [r0, #8]
   14f70:	cmp	r3, r2
   14f74:	subge	r1, r1, #2
   14f78:	movge	ip, #0
   14f7c:	bge	14fa4 <flatcc_builder_check_required@@Base+0x60>
   14f80:	mov	r0, #0
   14f84:	pop	{r4, pc}
   14f88:	ldrh	r3, [r1, #2]!
   14f8c:	ldr	lr, [r0, #4]
   14f90:	lsl	r3, r3, #1
   14f94:	ldrh	r3, [lr, r3]
   14f98:	cmp	r3, #0
   14f9c:	beq	14f80 <flatcc_builder_check_required@@Base+0x3c>
   14fa0:	add	ip, ip, #1
   14fa4:	cmp	ip, r2
   14fa8:	blt	14f88 <flatcc_builder_check_required@@Base+0x44>
   14fac:	mov	r0, #1
   14fb0:	pop	{r4, pc}
   14fb4:	andeq	sl, r1, r8, lsl r1
   14fb8:	andeq	r0, r0, r1, lsl r5
   14fbc:	andeq	sl, r1, r8, asr #6
   14fc0:	andeq	sl, r1, r7, ror #11

00014fc4 <flatcc_builder_end_table@@Base>:
   14fc4:	ldr	r3, [r0, #32]
   14fc8:	push	{r4, r5, r6, r7, lr}
   14fcc:	sub	sp, sp, #20
   14fd0:	ldrh	r3, [r3, #14]
   14fd4:	cmp	r3, #3
   14fd8:	beq	14ff0 <flatcc_builder_end_table@@Base+0x2c>
   14fdc:	ldr	r3, [pc, #260]	; 150e8 <flatcc_builder_end_table@@Base+0x124>
   14fe0:	ldr	r2, [pc, #260]	; 150ec <flatcc_builder_end_table@@Base+0x128>
   14fe4:	ldr	r1, [pc, #260]	; 150f0 <flatcc_builder_end_table@@Base+0x12c>
   14fe8:	ldr	r0, [pc, #260]	; 150f4 <flatcc_builder_end_table@@Base+0x130>
   14fec:	bl	12508 <__assert_fail@plt>
   14ff0:	ldrh	r5, [r0, #8]
   14ff4:	ldr	r3, [r0, #20]
   14ff8:	ldr	r1, [r0, #4]
   14ffc:	add	r5, r5, #2
   15000:	add	r3, r3, #4
   15004:	lsl	r5, r5, #1
   15008:	uxth	r2, r3
   1500c:	uxth	r5, r5
   15010:	ldr	r3, [r0, #12]
   15014:	strh	r2, [r1, #-2]
   15018:	strh	r5, [r1, #-4]
   1501c:	sub	r6, r1, #4
   15020:	ldr	r1, [pc, #208]	; 150f8 <flatcc_builder_end_table@@Base+0x134>
   15024:	eor	r3, r3, r5
   15028:	mov	r4, r0
   1502c:	mul	r3, r1, r3
   15030:	eor	r3, r3, r2
   15034:	mov	r2, r5
   15038:	mul	r3, r1, r3
   1503c:	mov	r1, r6
   15040:	str	r3, [r0, #12]
   15044:	bl	14a88 <flatcc_builder_create_cached_vtable@@Base>
   15048:	subs	r7, r0, #0
   1504c:	beq	150dc <flatcc_builder_end_table@@Base+0x118>
   15050:	mov	r2, r5
   15054:	mov	r1, #0
   15058:	mov	r0, r6
   1505c:	bl	124cc <memset@plt>
   15060:	ldr	r3, [r4, #32]
   15064:	ldr	r1, [r4, #76]	; 0x4c
   15068:	mov	r0, r4
   1506c:	ldr	r3, [r3, #20]
   15070:	add	r1, r1, r3
   15074:	ldrh	r3, [r4, #130]	; 0x82
   15078:	str	r7, [sp, #8]
   1507c:	ldr	r2, [r4]
   15080:	sub	r2, r2, r1
   15084:	asr	r2, r2, #1
   15088:	stm	sp, {r1, r2}
   1508c:	ldr	r2, [r4, #20]
   15090:	ldr	r1, [r4, #16]
   15094:	bl	14d00 <flatcc_builder_create_table@@Base>
   15098:	subs	r7, r0, #0
   1509c:	beq	150dc <flatcc_builder_end_table@@Base+0x118>
   150a0:	ldr	r3, [r4, #32]
   150a4:	mov	r0, r4
   150a8:	ldr	r2, [r3, #24]
   150ac:	str	r2, [r4, #12]
   150b0:	ldrh	r2, [r3, #28]
   150b4:	strh	r2, [r4, #8]
   150b8:	ldr	r2, [r4, #52]	; 0x34
   150bc:	ldr	r1, [r3, #16]
   150c0:	add	r2, r2, r1
   150c4:	str	r2, [r4, #4]
   150c8:	ldr	r2, [r4, #76]	; 0x4c
   150cc:	ldr	r3, [r3, #20]
   150d0:	add	r3, r2, r3
   150d4:	str	r3, [r4]
   150d8:	bl	1329c <test@@Base+0x9a8>
   150dc:	mov	r0, r7
   150e0:	add	sp, sp, #20
   150e4:	pop	{r4, r5, r6, r7, pc}
   150e8:	andeq	sl, r1, r6, lsr r1
   150ec:	andeq	r0, r0, r5, lsr #10
   150f0:	andeq	sl, r1, r8, asr #6
   150f4:	andeq	sl, r1, r7, ror #11
   150f8:			; <UNDEFINED> instruction: 0x9e3779b1

000150fc <flatcc_builder_create_vector@@Base>:
   150fc:	push	{lr}		; (str lr, [sp, #-4]!)
   15100:	sub	sp, sp, #84	; 0x54
   15104:	ldr	lr, [sp, #92]	; 0x5c
   15108:	ldrh	ip, [sp, #88]	; 0x58
   1510c:	cmp	r2, lr
   15110:	bls	15128 <flatcc_builder_create_vector@@Base+0x2c>
   15114:	ldr	r3, [pc, #180]	; 151d0 <flatcc_builder_create_vector@@Base+0xd4>
   15118:	ldr	r2, [pc, #180]	; 151d4 <flatcc_builder_create_vector@@Base+0xd8>
   1511c:	ldr	r1, [pc, #180]	; 151d8 <flatcc_builder_create_vector@@Base+0xdc>
   15120:	ldr	r0, [pc, #180]	; 151dc <flatcc_builder_create_vector@@Base+0xe0>
   15124:	bl	12508 <__assert_fail@plt>
   15128:	ldrh	lr, [r0, #128]	; 0x80
   1512c:	mul	r3, r3, r2
   15130:	cmp	ip, #4
   15134:	movcc	ip, #4
   15138:	str	r2, [sp, #4]
   1513c:	ldr	r2, [r0, #136]	; 0x88
   15140:	cmp	lr, ip
   15144:	sub	r2, r2, r3
   15148:	strhcc	ip, [r0, #128]	; 0x80
   1514c:	sub	ip, ip, #1
   15150:	and	ip, ip, r2
   15154:	mov	r2, #4
   15158:	cmp	r3, #0
   1515c:	str	r2, [sp, #8]
   15160:	add	lr, sp, r2
   15164:	str	r2, [sp, #20]
   15168:	mov	r2, #1
   1516c:	str	r2, [sp, #12]
   15170:	strne	r3, [sp, #28]
   15174:	addne	r2, r3, #4
   15178:	movne	r3, #2
   1517c:	strne	r2, [sp, #8]
   15180:	strne	r1, [sp, #24]
   15184:	strne	r3, [sp, #12]
   15188:	cmp	ip, #0
   1518c:	str	lr, [sp, #16]
   15190:	beq	151c0 <flatcc_builder_create_vector@@Base+0xc4>
   15194:	ldr	r3, [sp, #8]
   15198:	add	r2, sp, #80	; 0x50
   1519c:	add	r3, r3, ip
   151a0:	str	r3, [sp, #8]
   151a4:	ldr	r3, [sp, #12]
   151a8:	ldr	r1, [pc, #48]	; 151e0 <flatcc_builder_create_vector@@Base+0xe4>
   151ac:	add	r3, r3, #1
   151b0:	str	r3, [sp, #12]
   151b4:	add	r2, r2, r3, lsl #3
   151b8:	str	r1, [r2, #-72]	; 0xffffffb8
   151bc:	str	ip, [r2, #-68]	; 0xffffffbc
   151c0:	add	r1, sp, #8
   151c4:	bl	137a0 <flatcc_builder_default_alloc@@Base+0x3f8>
   151c8:	add	sp, sp, #84	; 0x54
   151cc:	pop	{pc}		; (ldr pc, [sp], #4)
   151d0:	andeq	sl, r1, pc, asr #2
   151d4:	andeq	r0, r0, r5, asr r5
   151d8:	andeq	sl, r1, r8, asr #6
   151dc:	andeq	sl, r1, r2, lsl r6
   151e0:	andeq	r9, r1, r2, ror #24

000151e4 <flatcc_builder_end_vector@@Base>:
   151e4:	push	{r0, r1, r2, r4, r5, lr}
   151e8:	ldr	r2, [r0, #32]
   151ec:	ldrh	r3, [r2, #14]
   151f0:	cmp	r3, #4
   151f4:	beq	1520c <flatcc_builder_end_vector@@Base+0x28>
   151f8:	ldr	r3, [pc, #76]	; 1524c <flatcc_builder_end_vector@@Base+0x68>
   151fc:	ldr	r2, [pc, #76]	; 15250 <flatcc_builder_end_vector@@Base+0x6c>
   15200:	ldr	r1, [pc, #76]	; 15254 <flatcc_builder_end_vector@@Base+0x70>
   15204:	ldr	r0, [pc, #76]	; 15258 <flatcc_builder_end_vector@@Base+0x74>
   15208:	bl	12508 <__assert_fail@plt>
   1520c:	ldr	r3, [r2, #24]
   15210:	mov	r4, r0
   15214:	str	r3, [sp, #4]
   15218:	ldrh	r3, [r0, #130]	; 0x82
   1521c:	str	r3, [sp]
   15220:	ldr	r3, [r2, #16]
   15224:	ldr	r1, [r0, #16]
   15228:	ldr	r2, [r2, #20]
   1522c:	bl	150fc <flatcc_builder_create_vector@@Base>
   15230:	subs	r5, r0, #0
   15234:	beq	15240 <flatcc_builder_end_vector@@Base+0x5c>
   15238:	mov	r0, r4
   1523c:	bl	1329c <test@@Base+0x9a8>
   15240:	mov	r0, r5
   15244:	add	sp, sp, #12
   15248:	pop	{r4, r5, pc}
   1524c:	andeq	sl, r1, ip, ror #2
   15250:	andeq	r0, r0, r8, ror r5
   15254:	andeq	sl, r1, r8, asr #6
   15258:	andeq	sl, r1, r2, ror r4

0001525c <flatcc_builder_vector_count@@Base>:
   1525c:	ldr	r3, [r0, #32]
   15260:	ldr	r0, [r3, #20]
   15264:	bx	lr

00015268 <flatcc_builder_vector_edit@@Base>:
   15268:	ldr	r0, [r0, #16]
   1526c:	bx	lr

00015270 <flatcc_builder_create_offset_vector_direct@@Base>:
   15270:	cmn	r2, #-1073741823	; 0xc0000001
   15274:	bhi	15280 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   15278:	mov	r3, #0
   1527c:	b	13874 <flatcc_builder_default_alloc@@Base+0x4cc>
   15280:	mov	r0, #0
   15284:	bx	lr

00015288 <flatcc_builder_end_offset_vector@@Base>:
   15288:	ldr	r3, [r0, #32]
   1528c:	push	{r4, r5, r6, lr}
   15290:	ldrh	r2, [r3, #14]
   15294:	cmp	r2, #5
   15298:	beq	152b0 <flatcc_builder_end_offset_vector@@Base+0x28>
   1529c:	ldr	r3, [pc, #52]	; 152d8 <flatcc_builder_end_offset_vector@@Base+0x50>
   152a0:	ldr	r2, [pc, #52]	; 152dc <flatcc_builder_end_offset_vector@@Base+0x54>
   152a4:	ldr	r1, [pc, #52]	; 152e0 <flatcc_builder_end_offset_vector@@Base+0x58>
   152a8:	ldr	r0, [pc, #52]	; 152e4 <flatcc_builder_end_offset_vector@@Base+0x5c>
   152ac:	bl	12508 <__assert_fail@plt>
   152b0:	ldr	r2, [r3, #20]
   152b4:	ldr	r1, [r0, #16]
   152b8:	mov	r4, r0
   152bc:	bl	15270 <flatcc_builder_create_offset_vector_direct@@Base>
   152c0:	subs	r5, r0, #0
   152c4:	beq	152d0 <flatcc_builder_end_offset_vector@@Base+0x48>
   152c8:	mov	r0, r4
   152cc:	bl	1329c <test@@Base+0x9a8>
   152d0:	mov	r0, r5
   152d4:	pop	{r4, r5, r6, pc}
   152d8:	andeq	sl, r1, r6, lsl #3
   152dc:	andeq	r0, r0, r8, asr #11
   152e0:	andeq	sl, r1, r8, asr #6
   152e4:	ldrdeq	sl, [r1], -fp

000152e8 <flatcc_builder_create_offset_vector@@Base>:
   152e8:	push	{r4, r5, r6, lr}
   152ec:	mov	r4, r0
   152f0:	mov	r6, r1
   152f4:	mov	r5, r2
   152f8:	bl	148c4 <flatcc_builder_start_offset_vector@@Base>
   152fc:	cmp	r0, #0
   15300:	bne	15330 <flatcc_builder_create_offset_vector@@Base+0x48>
   15304:	mov	r1, r5
   15308:	mov	r0, r4
   1530c:	bl	144c0 <flatcc_builder_extend_offset_vector@@Base>
   15310:	cmp	r0, #0
   15314:	beq	15330 <flatcc_builder_create_offset_vector@@Base+0x48>
   15318:	lsl	r2, r5, #2
   1531c:	mov	r1, r6
   15320:	bl	12460 <memcpy@plt>
   15324:	mov	r0, r4
   15328:	pop	{r4, r5, r6, lr}
   1532c:	b	15288 <flatcc_builder_end_offset_vector@@Base>
   15330:	mov	r0, #0
   15334:	pop	{r4, r5, r6, pc}

00015338 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   15338:	ldr	r2, [r0, #32]
   1533c:	mov	r3, r1
   15340:	push	{r4, r5, r6, lr}
   15344:	ldrh	r1, [r2, #14]
   15348:	cmp	r1, #5
   1534c:	beq	15364 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   15350:	ldr	r3, [pc, #64]	; 15398 <flatcc_builder_end_offset_vector_for_unions@@Base+0x60>
   15354:	ldr	r2, [pc, #64]	; 1539c <flatcc_builder_end_offset_vector_for_unions@@Base+0x64>
   15358:	ldr	r1, [pc, #64]	; 153a0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x68>
   1535c:	ldr	r0, [pc, #64]	; 153a4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x6c>
   15360:	bl	12508 <__assert_fail@plt>
   15364:	ldr	r2, [r2, #20]
   15368:	cmn	r2, #-1073741823	; 0xc0000001
   1536c:	movhi	r5, #0
   15370:	bhi	15390 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   15374:	ldr	r1, [r0, #16]
   15378:	mov	r4, r0
   1537c:	bl	13874 <flatcc_builder_default_alloc@@Base+0x4cc>
   15380:	subs	r5, r0, #0
   15384:	beq	15390 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   15388:	mov	r0, r4
   1538c:	bl	1329c <test@@Base+0x9a8>
   15390:	mov	r0, r5
   15394:	pop	{r4, r5, r6, pc}
   15398:	andeq	sl, r1, r7, lsr #3
   1539c:	ldrdeq	r0, [r0], -r5
   153a0:	andeq	sl, r1, r8, asr #6
   153a4:	ldrdeq	sl, [r1], -fp

000153a8 <flatcc_builder_offset_vector_edit@@Base>:
   153a8:	ldr	r0, [r0, #16]
   153ac:	bx	lr

000153b0 <flatcc_builder_offset_vector_count@@Base>:
   153b0:	ldr	r3, [r0, #32]
   153b4:	ldr	r0, [r3, #20]
   153b8:	bx	lr

000153bc <flatcc_builder_create_union_vector_direct@@Base>:
   153bc:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   153c0:	mov	r4, r0
   153c4:	ldr	r5, [sp, #32]
   153c8:	cmn	r5, #-1073741823	; 0xc0000001
   153cc:	bls	153e8 <flatcc_builder_create_union_vector_direct@@Base+0x2c>
   153d0:	mov	r3, #0
   153d4:	str	r3, [r4]
   153d8:	str	r3, [r4, #4]
   153dc:	mov	r0, r4
   153e0:	add	sp, sp, #8
   153e4:	pop	{r4, r5, r6, r7, r8, pc}
   153e8:	mov	r7, r1
   153ec:	mov	r8, r2
   153f0:	mov	r1, r3
   153f4:	mov	r0, r7
   153f8:	mov	r3, r2
   153fc:	mov	r2, r5
   15400:	bl	13874 <flatcc_builder_default_alloc@@Base+0x4cc>
   15404:	subs	r6, r0, #0
   15408:	beq	153d0 <flatcc_builder_create_union_vector_direct@@Base+0x14>
   1540c:	mvn	r3, #0
   15410:	str	r3, [sp, #4]
   15414:	mov	r3, #1
   15418:	str	r3, [sp]
   1541c:	mov	r2, r5
   15420:	mov	r1, r8
   15424:	mov	r0, r7
   15428:	bl	150fc <flatcc_builder_create_vector@@Base>
   1542c:	stm	r4, {r0, r6}
   15430:	b	153dc <flatcc_builder_create_union_vector_direct@@Base+0x20>

00015434 <flatcc_builder_create_union_vector@@Base>:
   15434:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   15438:	mov	r7, r0
   1543c:	mov	r0, r1
   15440:	mov	r5, r1
   15444:	mov	r6, r2
   15448:	mov	r8, r3
   1544c:	bl	148c4 <flatcc_builder_start_offset_vector@@Base>
   15450:	subs	r4, r0, #0
   15454:	beq	15470 <flatcc_builder_create_union_vector@@Base+0x3c>
   15458:	mov	r3, #0
   1545c:	str	r3, [r7]
   15460:	str	r3, [r7, #4]
   15464:	mov	r0, r7
   15468:	add	sp, sp, #16
   1546c:	pop	{r4, r5, r6, r7, r8, pc}
   15470:	mov	r1, r8
   15474:	mov	r0, r5
   15478:	bl	144c0 <flatcc_builder_extend_offset_vector@@Base>
   1547c:	cmp	r0, #0
   15480:	beq	15458 <flatcc_builder_create_union_vector@@Base+0x24>
   15484:	mov	r1, r8
   15488:	mov	r0, r5
   1548c:	bl	13254 <test@@Base+0x960>
   15490:	subs	r2, r0, #0
   15494:	movne	ip, r6
   15498:	ldrne	r3, [r5, #16]
   1549c:	movne	r1, r4
   154a0:	beq	15458 <flatcc_builder_create_union_vector@@Base+0x24>
   154a4:	cmp	r1, r8
   154a8:	add	ip, ip, #8
   154ac:	bne	154dc <flatcc_builder_create_union_vector@@Base+0xa8>
   154b0:	str	r1, [sp]
   154b4:	add	r0, sp, #8
   154b8:	mov	r1, r5
   154bc:	bl	153bc <flatcc_builder_create_union_vector_direct@@Base>
   154c0:	ldr	r6, [sp, #8]
   154c4:	ldr	r4, [sp, #12]
   154c8:	mov	r0, r5
   154cc:	bl	1329c <test@@Base+0x9a8>
   154d0:	str	r6, [r7]
   154d4:	str	r4, [r7, #4]
   154d8:	b	15464 <flatcc_builder_create_union_vector@@Base+0x30>
   154dc:	ldrb	r0, [ip, #-8]
   154e0:	strb	r0, [r2, r1]
   154e4:	ldr	r0, [ip, #-4]
   154e8:	str	r0, [r3, r1, lsl #2]
   154ec:	add	r1, r1, #1
   154f0:	b	154a4 <flatcc_builder_create_union_vector@@Base+0x70>

000154f4 <flatcc_builder_start_union_vector@@Base>:
   154f4:	push	{r4, r5, r6, lr}
   154f8:	mov	r1, #4
   154fc:	mov	r5, r0
   15500:	bl	13510 <flatcc_builder_default_alloc@@Base+0x168>
   15504:	subs	r4, r0, #0
   15508:	mvnne	r4, #0
   1550c:	bne	15534 <flatcc_builder_start_union_vector@@Base+0x40>
   15510:	ldr	r3, [r5, #32]
   15514:	mov	r2, #8
   15518:	mvn	r1, #3
   1551c:	str	r2, [r3, #16]
   15520:	mov	r2, #7
   15524:	str	r4, [r3, #20]
   15528:	strh	r2, [r3, #14]
   1552c:	mov	r0, r5
   15530:	bl	131d4 <test@@Base+0x8e0>
   15534:	mov	r0, r4
   15538:	pop	{r4, r5, r6, pc}

0001553c <flatcc_builder_end_union_vector@@Base>:
   1553c:	ldr	r3, [r1, #32]
   15540:	push	{r4, r5, r6, r7, lr}
   15544:	sub	sp, sp, #20
   15548:	ldrh	r2, [r3, #14]
   1554c:	cmp	r2, #7
   15550:	beq	15568 <flatcc_builder_end_union_vector@@Base+0x2c>
   15554:	ldr	r3, [pc, #156]	; 155f8 <flatcc_builder_end_union_vector@@Base+0xbc>
   15558:	ldr	r2, [pc, #156]	; 155fc <flatcc_builder_end_union_vector@@Base+0xc0>
   1555c:	ldr	r1, [pc, #156]	; 15600 <flatcc_builder_end_union_vector@@Base+0xc4>
   15560:	ldr	r0, [pc, #156]	; 15604 <flatcc_builder_end_union_vector@@Base+0xc8>
   15564:	bl	12508 <__assert_fail@plt>
   15568:	ldr	r7, [r3, #20]
   1556c:	mov	r5, r1
   15570:	mov	r4, r0
   15574:	lsl	r6, r7, #2
   15578:	add	r1, r6, r7
   1557c:	mov	r0, r5
   15580:	bl	13254 <test@@Base+0x960>
   15584:	subs	r3, r0, #0
   15588:	streq	r3, [r4]
   1558c:	streq	r3, [r4, #4]
   15590:	addne	r2, r3, r6
   15594:	ldrne	r0, [r5, #16]
   15598:	movne	r1, #0
   1559c:	bne	155c0 <flatcc_builder_end_union_vector@@Base+0x84>
   155a0:	mov	r0, r4
   155a4:	add	sp, sp, #20
   155a8:	pop	{r4, r5, r6, r7, pc}
   155ac:	ldrb	ip, [r0, #-8]
   155b0:	strb	ip, [r2, r1]
   155b4:	ldr	ip, [r0, #-4]
   155b8:	str	ip, [r3, r1, lsl #2]
   155bc:	add	r1, r1, #1
   155c0:	cmp	r1, r7
   155c4:	add	r0, r0, #8
   155c8:	bne	155ac <flatcc_builder_end_union_vector@@Base+0x70>
   155cc:	str	r1, [sp]
   155d0:	add	r0, sp, #8
   155d4:	mov	r1, r5
   155d8:	bl	153bc <flatcc_builder_create_union_vector_direct@@Base>
   155dc:	ldr	r7, [sp, #8]
   155e0:	ldr	r6, [sp, #12]
   155e4:	mov	r0, r5
   155e8:	bl	1329c <test@@Base+0x9a8>
   155ec:	str	r7, [r4]
   155f0:	str	r6, [r4, #4]
   155f4:	b	155a0 <flatcc_builder_end_union_vector@@Base+0x64>
   155f8:	ldrdeq	sl, [r1], -r3
   155fc:	andeq	r0, r0, r1, asr r6
   15600:	andeq	sl, r1, r8, asr #6
   15604:	andeq	sl, r1, r5, lsr #12

00015608 <flatcc_builder_union_vector_edit@@Base>:
   15608:	ldr	r0, [r0, #16]
   1560c:	bx	lr

00015610 <flatcc_builder_union_vector_count@@Base>:
   15610:	ldr	r3, [r0, #32]
   15614:	ldr	r0, [r3, #20]
   15618:	bx	lr

0001561c <flatcc_builder_extend_union_vector@@Base>:
   1561c:	push	{r4, r5, r6, lr}
   15620:	mvn	r2, #-536870912	; 0xe0000000
   15624:	mov	r4, r0
   15628:	ldr	r0, [r0, #32]
   1562c:	mov	r5, r1
   15630:	bl	13820 <flatcc_builder_default_alloc@@Base+0x478>
   15634:	cmp	r0, #0
   15638:	bne	1564c <flatcc_builder_extend_union_vector@@Base+0x30>
   1563c:	lsl	r1, r5, #3
   15640:	mov	r0, r4
   15644:	pop	{r4, r5, r6, lr}
   15648:	b	13254 <test@@Base+0x960>
   1564c:	mov	r0, #0
   15650:	pop	{r4, r5, r6, pc}

00015654 <flatcc_builder_truncate_union_vector@@Base>:
   15654:	ldr	r3, [r0, #32]
   15658:	push	{r4, lr}
   1565c:	ldrh	r2, [r3, #14]
   15660:	cmp	r2, #7
   15664:	beq	1567c <flatcc_builder_truncate_union_vector@@Base+0x28>
   15668:	ldr	r3, [pc, #68]	; 156b4 <flatcc_builder_truncate_union_vector@@Base+0x60>
   1566c:	ldr	r2, [pc, #68]	; 156b8 <flatcc_builder_truncate_union_vector@@Base+0x64>
   15670:	ldr	r1, [pc, #68]	; 156bc <flatcc_builder_truncate_union_vector@@Base+0x68>
   15674:	ldr	r0, [pc, #68]	; 156c0 <flatcc_builder_truncate_union_vector@@Base+0x6c>
   15678:	bl	12508 <__assert_fail@plt>
   1567c:	ldr	r2, [r3, #20]
   15680:	cmp	r2, r1
   15684:	ldrcc	r3, [pc, #40]	; 156b4 <flatcc_builder_truncate_union_vector@@Base+0x60>
   15688:	ldrcc	r2, [pc, #52]	; 156c4 <flatcc_builder_truncate_union_vector@@Base+0x70>
   1568c:	ldrcc	r1, [pc, #40]	; 156bc <flatcc_builder_truncate_union_vector@@Base+0x68>
   15690:	ldrcc	r0, [pc, #48]	; 156c8 <flatcc_builder_truncate_union_vector@@Base+0x74>
   15694:	bcc	15678 <flatcc_builder_truncate_union_vector@@Base+0x24>
   15698:	sub	r2, r2, r1
   1569c:	str	r2, [r3, #20]
   156a0:	ldr	r3, [r3, #16]
   156a4:	mul	r1, r3, r1
   156a8:	bl	13308 <test@@Base+0xa14>
   156ac:	mov	r0, #0
   156b0:	pop	{r4, pc}
   156b4:	strdeq	sl, [r1], -r3
   156b8:	andeq	r0, r0, r1, lsl #13
   156bc:	andeq	sl, r1, r8, asr #6
   156c0:	andeq	sl, r1, r5, lsr #12
   156c4:	andeq	r0, r0, r2, lsl #13
   156c8:	andeq	sl, r1, lr, asr r5

000156cc <flatcc_builder_union_vector_push@@Base>:
   156cc:	push	{r0, r1, r4, lr}
   156d0:	stm	sp, {r1, r2}
   156d4:	ldr	r2, [r0, #32]
   156d8:	ldrh	r3, [r2, #14]
   156dc:	cmp	r3, #7
   156e0:	beq	156f8 <flatcc_builder_union_vector_push@@Base+0x2c>
   156e4:	ldr	r3, [pc, #72]	; 15734 <flatcc_builder_union_vector_push@@Base+0x68>
   156e8:	ldr	r2, [pc, #72]	; 15738 <flatcc_builder_union_vector_push@@Base+0x6c>
   156ec:	ldr	r1, [pc, #72]	; 1573c <flatcc_builder_union_vector_push@@Base+0x70>
   156f0:	ldr	r0, [pc, #72]	; 15740 <flatcc_builder_union_vector_push@@Base+0x74>
   156f4:	bl	12508 <__assert_fail@plt>
   156f8:	ldr	r3, [r2, #20]
   156fc:	cmn	r3, #-536870911	; 0xe0000001
   15700:	moveq	r3, #0
   15704:	beq	15728 <flatcc_builder_union_vector_push@@Base+0x5c>
   15708:	add	r3, r3, #1
   1570c:	mov	r1, #8
   15710:	str	r3, [r2, #20]
   15714:	bl	13254 <test@@Base+0x960>
   15718:	subs	r3, r0, #0
   1571c:	movne	r4, sp
   15720:	ldmne	r4, {r0, r1}
   15724:	stmne	r3, {r0, r1}
   15728:	mov	r0, r3
   1572c:	add	sp, sp, #8
   15730:	pop	{r4, pc}
   15734:	andeq	sl, r1, r8, lsl r2
   15738:	andeq	r0, r0, sp, lsl #13
   1573c:	andeq	sl, r1, r8, asr #6
   15740:	andeq	sl, r1, r5, lsr #12

00015744 <flatcc_builder_append_union_vector@@Base>:
   15744:	push	{r4, r5, r6, lr}
   15748:	mov	r4, r0
   1574c:	ldr	r0, [r0, #32]
   15750:	ldrh	r3, [r0, #14]
   15754:	cmp	r3, #7
   15758:	beq	15770 <flatcc_builder_append_union_vector@@Base+0x2c>
   1575c:	ldr	r3, [pc, #68]	; 157a8 <flatcc_builder_append_union_vector@@Base+0x64>
   15760:	ldr	r2, [pc, #68]	; 157ac <flatcc_builder_append_union_vector@@Base+0x68>
   15764:	ldr	r1, [pc, #68]	; 157b0 <flatcc_builder_append_union_vector@@Base+0x6c>
   15768:	ldr	r0, [pc, #68]	; 157b4 <flatcc_builder_append_union_vector@@Base+0x70>
   1576c:	bl	12508 <__assert_fail@plt>
   15770:	mov	r5, r2
   15774:	mov	r6, r1
   15778:	mvn	r2, #-536870912	; 0xe0000000
   1577c:	mov	r1, r5
   15780:	bl	13820 <flatcc_builder_default_alloc@@Base+0x478>
   15784:	cmp	r0, #0
   15788:	bne	157a0 <flatcc_builder_append_union_vector@@Base+0x5c>
   1578c:	lsl	r2, r5, #3
   15790:	mov	r1, r6
   15794:	mov	r0, r4
   15798:	pop	{r4, r5, r6, lr}
   1579c:	b	13328 <test@@Base+0xa34>
   157a0:	mov	r0, #0
   157a4:	pop	{r4, r5, r6, pc}
   157a8:	andeq	sl, r1, r9, lsr r2
   157ac:	muleq	r0, ip, r6
   157b0:	andeq	sl, r1, r8, asr #6
   157b4:	andeq	sl, r1, r5, lsr #12

000157b8 <flatcc_builder_create_string@@Base>:
   157b8:	push	{lr}		; (str lr, [sp, #-4]!)
   157bc:	sub	sp, sp, #84	; 0x54
   157c0:	ldr	r3, [r0, #136]	; 0x88
   157c4:	mov	ip, #4
   157c8:	cmp	r2, #0
   157cc:	str	ip, [sp, #8]
   157d0:	add	lr, sp, ip
   157d4:	str	ip, [sp, #20]
   157d8:	sub	r3, r3, r2
   157dc:	mov	ip, #1
   157e0:	str	ip, [sp, #12]
   157e4:	strne	r2, [sp, #28]
   157e8:	addne	ip, r2, #4
   157ec:	str	r2, [sp, #4]
   157f0:	sub	r3, r3, #1
   157f4:	movne	r2, #2
   157f8:	strne	ip, [sp, #8]
   157fc:	strne	r2, [sp, #12]
   15800:	and	r3, r3, #3
   15804:	ldr	r2, [sp, #8]
   15808:	add	r3, r3, #1
   1580c:	add	r2, r2, r3
   15810:	str	r2, [sp, #8]
   15814:	ldr	r2, [sp, #12]
   15818:	strne	r1, [sp, #24]
   1581c:	add	r2, r2, #1
   15820:	add	r1, sp, #80	; 0x50
   15824:	add	r1, r1, r2, lsl #3
   15828:	ldr	ip, [pc, #28]	; 1584c <flatcc_builder_create_string@@Base+0x94>
   1582c:	str	lr, [sp, #16]
   15830:	str	r3, [r1, #-68]	; 0xffffffbc
   15834:	str	ip, [r1, #-72]	; 0xffffffb8
   15838:	add	r1, sp, #8
   1583c:	str	r2, [sp, #12]
   15840:	bl	137a0 <flatcc_builder_default_alloc@@Base+0x3f8>
   15844:	add	sp, sp, #84	; 0x54
   15848:	pop	{pc}		; (ldr pc, [sp], #4)
   1584c:	andeq	r9, r1, r2, ror #24

00015850 <flatcc_builder_create_string_str@@Base>:
   15850:	push	{r4, r5, r6, lr}
   15854:	mov	r5, r0
   15858:	mov	r0, r1
   1585c:	mov	r4, r1
   15860:	bl	124a8 <strlen@plt>
   15864:	mov	r1, r4
   15868:	mov	r2, r0
   1586c:	mov	r0, r5
   15870:	pop	{r4, r5, r6, lr}
   15874:	b	157b8 <flatcc_builder_create_string@@Base>

00015878 <flatcc_builder_create_string_strn@@Base>:
   15878:	push	{r4, r5, r6, lr}
   1587c:	mov	r4, r1
   15880:	mov	r6, r0
   15884:	mov	r1, #0
   15888:	mov	r0, r4
   1588c:	mov	r5, r2
   15890:	bl	124e4 <memchr@plt>
   15894:	mov	r1, r4
   15898:	cmp	r0, #0
   1589c:	subne	r5, r0, r4
   158a0:	mov	r2, r5
   158a4:	mov	r0, r6
   158a8:	pop	{r4, r5, r6, lr}
   158ac:	b	157b8 <flatcc_builder_create_string@@Base>

000158b0 <flatcc_builder_end_string@@Base>:
   158b0:	ldr	r3, [r0, #32]
   158b4:	push	{r4, r5, r6, lr}
   158b8:	ldrh	r2, [r3, #14]
   158bc:	cmp	r2, #6
   158c0:	beq	158d8 <flatcc_builder_end_string@@Base+0x28>
   158c4:	ldr	r3, [pc, #80]	; 1591c <flatcc_builder_end_string@@Base+0x6c>
   158c8:	ldr	r2, [pc, #80]	; 15920 <flatcc_builder_end_string@@Base+0x70>
   158cc:	ldr	r1, [pc, #80]	; 15924 <flatcc_builder_end_string@@Base+0x74>
   158d0:	ldr	r0, [pc, #80]	; 15928 <flatcc_builder_end_string@@Base+0x78>
   158d4:	bl	12508 <__assert_fail@plt>
   158d8:	ldr	r2, [r3, #20]
   158dc:	ldr	r3, [r0, #20]
   158e0:	mov	r4, r0
   158e4:	cmp	r2, r3
   158e8:	ldrne	r3, [pc, #44]	; 1591c <flatcc_builder_end_string@@Base+0x6c>
   158ec:	ldrne	r2, [pc, #56]	; 1592c <flatcc_builder_end_string@@Base+0x7c>
   158f0:	ldrne	r1, [pc, #44]	; 15924 <flatcc_builder_end_string@@Base+0x74>
   158f4:	ldrne	r0, [pc, #52]	; 15930 <flatcc_builder_end_string@@Base+0x80>
   158f8:	bne	158d4 <flatcc_builder_end_string@@Base+0x24>
   158fc:	ldr	r1, [r0, #16]
   15900:	bl	157b8 <flatcc_builder_create_string@@Base>
   15904:	subs	r5, r0, #0
   15908:	beq	15914 <flatcc_builder_end_string@@Base+0x64>
   1590c:	mov	r0, r4
   15910:	bl	1329c <test@@Base+0x9a8>
   15914:	mov	r0, r5
   15918:	pop	{r4, r5, r6, pc}
   1591c:	andeq	sl, r1, ip, asr r2
   15920:	andeq	r0, r0, r4, asr #13
   15924:	andeq	sl, r1, r8, asr #6
   15928:	andeq	sl, r1, lr, lsl #10
   1592c:	andeq	r0, r0, r5, asr #13
   15930:	andeq	sl, r1, r7, asr r6

00015934 <flatcc_builder_string_edit@@Base>:
   15934:	ldr	r0, [r0, #16]
   15938:	bx	lr

0001593c <flatcc_builder_string_len@@Base>:
   1593c:	ldr	r3, [r0, #32]
   15940:	ldr	r0, [r3, #20]
   15944:	bx	lr

00015948 <flatcc_builder_table_add@@Base>:
   15948:	push	{r4, r5, r6, r7, r8, lr}
   1594c:	mov	r4, r0
   15950:	ldr	r0, [r0, #32]
   15954:	ldrh	r0, [r0, #14]
   15958:	cmp	r0, #3
   1595c:	beq	15974 <flatcc_builder_table_add@@Base+0x2c>
   15960:	ldr	r3, [pc, #232]	; 15a50 <flatcc_builder_table_add@@Base+0x108>
   15964:	ldr	r2, [pc, #232]	; 15a54 <flatcc_builder_table_add@@Base+0x10c>
   15968:	ldr	r1, [pc, #232]	; 15a58 <flatcc_builder_table_add@@Base+0x110>
   1596c:	ldr	r0, [pc, #232]	; 15a5c <flatcc_builder_table_add@@Base+0x114>
   15970:	bl	12508 <__assert_fail@plt>
   15974:	ldr	r0, [pc, #228]	; 15a60 <flatcc_builder_table_add@@Base+0x118>
   15978:	cmp	r1, r0
   1597c:	ldrhi	r3, [pc, #204]	; 15a50 <flatcc_builder_table_add@@Base+0x108>
   15980:	ldrhi	r2, [pc, #220]	; 15a64 <flatcc_builder_table_add@@Base+0x11c>
   15984:	ldrhi	r1, [pc, #204]	; 15a58 <flatcc_builder_table_add@@Base+0x110>
   15988:	ldrhi	r0, [pc, #216]	; 15a68 <flatcc_builder_table_add@@Base+0x120>
   1598c:	bhi	15970 <flatcc_builder_table_add@@Base+0x28>
   15990:	ldrh	r0, [r4, #130]	; 0x82
   15994:	lsl	r7, r1, #1
   15998:	cmp	r0, r3
   1599c:	ldr	r0, [r4, #4]
   159a0:	strhcc	r3, [r4, #130]	; 0x82
   159a4:	ldrh	r5, [r0, r7]
   159a8:	cmp	r5, #0
   159ac:	ldrne	r3, [pc, #156]	; 15a50 <flatcc_builder_table_add@@Base+0x108>
   159b0:	ldrne	r2, [pc, #180]	; 15a6c <flatcc_builder_table_add@@Base+0x124>
   159b4:	ldrne	r1, [pc, #156]	; 15a58 <flatcc_builder_table_add@@Base+0x110>
   159b8:	ldrne	r0, [pc, #176]	; 15a70 <flatcc_builder_table_add@@Base+0x128>
   159bc:	bne	15970 <flatcc_builder_table_add@@Base+0x28>
   159c0:	ldr	ip, [r4, #12]
   159c4:	ldr	lr, [pc, #168]	; 15a74 <flatcc_builder_table_add@@Base+0x12c>
   159c8:	eor	ip, ip, r1
   159cc:	ldr	r6, [r4, #20]
   159d0:	mul	ip, lr, ip
   159d4:	sub	r0, r3, #1
   159d8:	eor	ip, ip, r2
   159dc:	rsb	r3, r3, #0
   159e0:	add	r0, r0, r6
   159e4:	and	r6, r0, r3
   159e8:	mul	ip, lr, ip
   159ec:	ldr	r3, [r4, #24]
   159f0:	uxth	r8, r1
   159f4:	add	r1, r2, r6
   159f8:	cmp	r1, r3
   159fc:	str	ip, [r4, #12]
   15a00:	str	r1, [r4, #20]
   15a04:	bcs	15a30 <flatcc_builder_table_add@@Base+0xe8>
   15a08:	ldr	r3, [r4, #4]
   15a0c:	add	r2, r6, #4
   15a10:	ldr	r0, [r4, #16]
   15a14:	strh	r2, [r3, r7]
   15a18:	ldrh	r3, [r4, #8]
   15a1c:	add	r0, r0, r6
   15a20:	cmp	r3, r8
   15a24:	addls	r1, r8, #1
   15a28:	strhls	r1, [r4, #8]
   15a2c:	pop	{r4, r5, r6, r7, r8, pc}
   15a30:	ldr	r2, [pc, #64]	; 15a78 <flatcc_builder_table_add@@Base+0x130>
   15a34:	add	r1, r1, #1
   15a38:	mov	r0, r4
   15a3c:	bl	13204 <test@@Base+0x910>
   15a40:	cmp	r0, #0
   15a44:	beq	15a08 <flatcc_builder_table_add@@Base+0xc0>
   15a48:	mov	r0, r5
   15a4c:	pop	{r4, r5, r6, r7, r8, pc}
   15a50:	andeq	sl, r1, r6, ror r2
   15a54:	andeq	r0, r0, sp, ror #13
   15a58:	andeq	sl, r1, r8, asr #6
   15a5c:	andeq	sl, r1, r7, ror #11
   15a60:	strdeq	r7, [r0], -ip
   15a64:	andeq	r0, r0, lr, ror #13
   15a68:	andeq	sl, r1, fp, ror r6
   15a6c:	strdeq	r0, [r0], -r8
   15a70:			; <UNDEFINED> instruction: 0x0001a3b5
   15a74:			; <UNDEFINED> instruction: 0x9e3779b1
   15a78:	strdeq	pc, [r0], -ip

00015a7c <flatcc_builder_table_edit@@Base>:
   15a7c:	ldr	r3, [r0, #32]
   15a80:	ldrh	r3, [r3, #14]
   15a84:	cmp	r3, #3
   15a88:	beq	15aa4 <flatcc_builder_table_edit@@Base+0x28>
   15a8c:	push	{r4, lr}
   15a90:	ldr	r3, [pc, #32]	; 15ab8 <flatcc_builder_table_edit@@Base+0x3c>
   15a94:	ldr	r2, [pc, #32]	; 15abc <flatcc_builder_table_edit@@Base+0x40>
   15a98:	ldr	r1, [pc, #32]	; 15ac0 <flatcc_builder_table_edit@@Base+0x44>
   15a9c:	ldr	r0, [pc, #32]	; 15ac4 <flatcc_builder_table_edit@@Base+0x48>
   15aa0:	bl	12508 <__assert_fail@plt>
   15aa4:	ldr	r3, [r0, #20]
   15aa8:	ldr	r0, [r0, #16]
   15aac:	sub	r1, r3, r1
   15ab0:	add	r0, r0, r1
   15ab4:	bx	lr
   15ab8:	andeq	sl, r1, pc, lsl #5
   15abc:	andeq	r0, r0, r2, lsl #14
   15ac0:	andeq	sl, r1, r8, asr #6
   15ac4:	andeq	sl, r1, r7, ror #11

00015ac8 <flatcc_builder_table_add_copy@@Base>:
   15ac8:	push	{r4, r5, r6, lr}
   15acc:	mov	r4, r3
   15ad0:	mov	r6, r2
   15ad4:	ldrh	r3, [sp, #16]
   15ad8:	mov	r2, r4
   15adc:	bl	15948 <flatcc_builder_table_add@@Base>
   15ae0:	subs	r5, r0, #0
   15ae4:	beq	15af4 <flatcc_builder_table_add_copy@@Base+0x2c>
   15ae8:	mov	r2, r4
   15aec:	mov	r1, r6
   15af0:	bl	12460 <memcpy@plt>
   15af4:	mov	r0, r5
   15af8:	pop	{r4, r5, r6, pc}

00015afc <flatcc_builder_table_add_offset@@Base>:
   15afc:	ldr	r3, [r0, #32]
   15b00:	push	{r4, r5, r6, r7, r8, lr}
   15b04:	ldrh	r3, [r3, #14]
   15b08:	cmp	r3, #3
   15b0c:	beq	15b24 <flatcc_builder_table_add_offset@@Base+0x28>
   15b10:	ldr	r3, [pc, #228]	; 15bfc <flatcc_builder_table_add_offset@@Base+0x100>
   15b14:	ldr	r2, [pc, #228]	; 15c00 <flatcc_builder_table_add_offset@@Base+0x104>
   15b18:	ldr	r1, [pc, #228]	; 15c04 <flatcc_builder_table_add_offset@@Base+0x108>
   15b1c:	ldr	r0, [pc, #228]	; 15c08 <flatcc_builder_table_add_offset@@Base+0x10c>
   15b20:	bl	12508 <__assert_fail@plt>
   15b24:	ldr	r3, [pc, #224]	; 15c0c <flatcc_builder_table_add_offset@@Base+0x110>
   15b28:	cmp	r1, r3
   15b2c:	ldrhi	r3, [pc, #200]	; 15bfc <flatcc_builder_table_add_offset@@Base+0x100>
   15b30:	ldrhi	r2, [pc, #216]	; 15c10 <flatcc_builder_table_add_offset@@Base+0x114>
   15b34:	ldrhi	r1, [pc, #200]	; 15c04 <flatcc_builder_table_add_offset@@Base+0x108>
   15b38:	ldrhi	r0, [pc, #212]	; 15c14 <flatcc_builder_table_add_offset@@Base+0x118>
   15b3c:	bhi	15b20 <flatcc_builder_table_add_offset@@Base+0x24>
   15b40:	ldr	r3, [r0, #4]
   15b44:	lsl	r7, r1, #1
   15b48:	mov	r4, r0
   15b4c:	ldrh	r6, [r3, r7]
   15b50:	cmp	r6, #0
   15b54:	ldrne	r3, [pc, #160]	; 15bfc <flatcc_builder_table_add_offset@@Base+0x100>
   15b58:	ldrne	r2, [pc, #184]	; 15c18 <flatcc_builder_table_add_offset@@Base+0x11c>
   15b5c:	ldrne	r1, [pc, #160]	; 15c04 <flatcc_builder_table_add_offset@@Base+0x108>
   15b60:	ldrne	r0, [pc, #180]	; 15c1c <flatcc_builder_table_add_offset@@Base+0x120>
   15b64:	bne	15b20 <flatcc_builder_table_add_offset@@Base+0x24>
   15b68:	ldr	r3, [r0, #12]
   15b6c:	ldr	r2, [pc, #172]	; 15c20 <flatcc_builder_table_add_offset@@Base+0x124>
   15b70:	eor	r3, r3, r1
   15b74:	ldr	r8, [r0, #20]
   15b78:	mul	r3, r2, r3
   15b7c:	add	r8, r8, #3
   15b80:	eor	r3, r3, #4
   15b84:	bic	r8, r8, #3
   15b88:	mul	r3, r2, r3
   15b8c:	uxth	r5, r1
   15b90:	str	r3, [r0, #12]
   15b94:	ldr	r3, [r0, #24]
   15b98:	add	r1, r8, #4
   15b9c:	cmp	r1, r3
   15ba0:	str	r1, [r0, #20]
   15ba4:	bhi	15be4 <flatcc_builder_table_add_offset@@Base+0xe8>
   15ba8:	ldr	r3, [r4, #4]
   15bac:	uxth	r2, r8
   15bb0:	add	r1, r2, #4
   15bb4:	strh	r1, [r3, r7]
   15bb8:	ldrh	r3, [r4, #8]
   15bbc:	ldr	r0, [r4, #16]
   15bc0:	cmp	r3, r5
   15bc4:	ldr	r3, [r4]
   15bc8:	addls	r1, r5, #1
   15bcc:	strhls	r1, [r4, #8]
   15bd0:	add	r1, r3, #2
   15bd4:	str	r1, [r4]
   15bd8:	add	r0, r0, r8
   15bdc:	strh	r2, [r3]
   15be0:	pop	{r4, r5, r6, r7, r8, pc}
   15be4:	ldr	r2, [pc, #56]	; 15c24 <flatcc_builder_table_add_offset@@Base+0x128>
   15be8:	bl	13204 <test@@Base+0x910>
   15bec:	cmp	r0, #0
   15bf0:	beq	15ba8 <flatcc_builder_table_add_offset@@Base+0xac>
   15bf4:	mov	r0, r6
   15bf8:	pop	{r4, r5, r6, r7, r8, pc}
   15bfc:	andeq	sl, r1, r9, lsr #5
   15c00:	andeq	r0, r0, r3, lsl r7
   15c04:	andeq	sl, r1, r8, asr #6
   15c08:	andeq	sl, r1, r7, ror #11
   15c0c:	strdeq	r7, [r0], -ip
   15c10:	andeq	r0, r0, r4, lsl r7
   15c14:	andeq	sl, r1, fp, ror r6
   15c18:	andeq	r0, r0, fp, lsl r7
   15c1c:			; <UNDEFINED> instruction: 0x0001a3b5
   15c20:			; <UNDEFINED> instruction: 0x9e3779b1
   15c24:	strdeq	pc, [r0], -ip

00015c28 <flatcc_builder_table_add_union@@Base>:
   15c28:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15c2c:	add	ip, sp, #8
   15c30:	stmdb	ip, {r2, r3}
   15c34:	ldr	r3, [r0, #32]
   15c38:	ldrb	r5, [sp]
   15c3c:	ldr	r4, [sp, #4]
   15c40:	ldrh	r3, [r3, #14]
   15c44:	cmp	r3, #3
   15c48:	beq	15c60 <flatcc_builder_table_add_union@@Base+0x38>
   15c4c:	ldr	r3, [pc, #156]	; 15cf0 <flatcc_builder_table_add_union@@Base+0xc8>
   15c50:	ldr	r2, [pc, #156]	; 15cf4 <flatcc_builder_table_add_union@@Base+0xcc>
   15c54:	ldr	r1, [pc, #156]	; 15cf8 <flatcc_builder_table_add_union@@Base+0xd0>
   15c58:	ldr	r0, [pc, #156]	; 15cfc <flatcc_builder_table_add_union@@Base+0xd4>
   15c5c:	bl	12508 <__assert_fail@plt>
   15c60:	cmp	r5, #0
   15c64:	mov	r6, r0
   15c68:	mov	r7, r1
   15c6c:	bne	15c8c <flatcc_builder_table_add_union@@Base+0x64>
   15c70:	cmp	r4, #0
   15c74:	beq	15cb4 <flatcc_builder_table_add_union@@Base+0x8c>
   15c78:	ldr	r3, [pc, #112]	; 15cf0 <flatcc_builder_table_add_union@@Base+0xc8>
   15c7c:	ldr	r2, [pc, #124]	; 15d00 <flatcc_builder_table_add_union@@Base+0xd8>
   15c80:	ldr	r1, [pc, #112]	; 15cf8 <flatcc_builder_table_add_union@@Base+0xd0>
   15c84:	ldr	r0, [pc, #120]	; 15d04 <flatcc_builder_table_add_union@@Base+0xdc>
   15c88:	b	15c5c <flatcc_builder_table_add_union@@Base+0x34>
   15c8c:	cmp	r4, #0
   15c90:	beq	15cb4 <flatcc_builder_table_add_union@@Base+0x8c>
   15c94:	bl	15afc <flatcc_builder_table_add_offset@@Base>
   15c98:	cmp	r0, #0
   15c9c:	strne	r4, [r0]
   15ca0:	ldreq	r3, [pc, #72]	; 15cf0 <flatcc_builder_table_add_union@@Base+0xc8>
   15ca4:	ldreq	r2, [pc, #92]	; 15d08 <flatcc_builder_table_add_union@@Base+0xe0>
   15ca8:	ldreq	r1, [pc, #72]	; 15cf8 <flatcc_builder_table_add_union@@Base+0xd0>
   15cac:	ldreq	r0, [pc, #88]	; 15d0c <flatcc_builder_table_add_union@@Base+0xe4>
   15cb0:	beq	15c5c <flatcc_builder_table_add_union@@Base+0x34>
   15cb4:	mov	r3, #1
   15cb8:	mov	r2, r3
   15cbc:	sub	r1, r7, #1
   15cc0:	mov	r0, r6
   15cc4:	bl	15948 <flatcc_builder_table_add@@Base>
   15cc8:	cmp	r0, #0
   15ccc:	ldreq	r3, [pc, #28]	; 15cf0 <flatcc_builder_table_add_union@@Base+0xc8>
   15cd0:	ldreq	r2, [pc, #56]	; 15d10 <flatcc_builder_table_add_union@@Base+0xe8>
   15cd4:	ldreq	r1, [pc, #28]	; 15cf8 <flatcc_builder_table_add_union@@Base+0xd0>
   15cd8:	ldreq	r0, [pc, #52]	; 15d14 <flatcc_builder_table_add_union@@Base+0xec>
   15cdc:	beq	15c5c <flatcc_builder_table_add_union@@Base+0x34>
   15ce0:	strb	r5, [r0]
   15ce4:	mov	r0, #0
   15ce8:	add	sp, sp, #12
   15cec:	pop	{r4, r5, r6, r7, pc}
   15cf0:	andeq	sl, r1, r9, asr #5
   15cf4:	andeq	r0, r0, lr, ror #11
   15cf8:	andeq	sl, r1, r8, asr #6
   15cfc:	andeq	sl, r1, r7, ror #11
   15d00:	andeq	r0, r0, pc, ror #11
   15d04:			; <UNDEFINED> instruction: 0x0001a6bf
   15d08:	strdeq	r0, [r0], -r2
   15d0c:	andeq	sl, r1, r1, ror #13
   15d10:	strdeq	r0, [r0], -r6
   15d14:	andeq	sl, r1, fp, ror #13

00015d18 <flatcc_builder_table_add_union_vector@@Base>:
   15d18:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15d1c:	mov	r7, r1
   15d20:	add	r1, sp, #8
   15d24:	stmdb	r1, {r2, r3}
   15d28:	ldr	r3, [r0, #32]
   15d2c:	ldm	sp, {r4, r5}
   15d30:	ldrh	r3, [r3, #14]
   15d34:	cmp	r3, #3
   15d38:	beq	15d50 <flatcc_builder_table_add_union_vector@@Base+0x38>
   15d3c:	ldr	r3, [pc, #176]	; 15df4 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15d40:	ldr	r1, [pc, #176]	; 15df8 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   15d44:	ldr	r0, [pc, #176]	; 15dfc <flatcc_builder_table_add_union_vector@@Base+0xe4>
   15d48:	mov	r2, #1536	; 0x600
   15d4c:	bl	12508 <__assert_fail@plt>
   15d50:	clz	r3, r5
   15d54:	clz	r2, r4
   15d58:	lsr	r3, r3, #5
   15d5c:	lsr	r2, r2, #5
   15d60:	cmp	r2, r3
   15d64:	beq	15d90 <flatcc_builder_table_add_union_vector@@Base+0x78>
   15d68:	adds	r4, r4, #0
   15d6c:	movne	r4, #1
   15d70:	cmp	r4, r3
   15d74:	mvnne	r0, #0
   15d78:	bne	15dec <flatcc_builder_table_add_union_vector@@Base+0xd4>
   15d7c:	ldr	r3, [pc, #112]	; 15df4 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15d80:	ldr	r2, [pc, #120]	; 15e00 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   15d84:	ldr	r1, [pc, #108]	; 15df8 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   15d88:	ldr	r0, [pc, #116]	; 15e04 <flatcc_builder_table_add_union_vector@@Base+0xec>
   15d8c:	b	15d4c <flatcc_builder_table_add_union_vector@@Base+0x34>
   15d90:	cmp	r4, #0
   15d94:	moveq	r0, r4
   15d98:	beq	15dec <flatcc_builder_table_add_union_vector@@Base+0xd4>
   15d9c:	sub	r1, r7, #1
   15da0:	mov	r6, r0
   15da4:	bl	15afc <flatcc_builder_table_add_offset@@Base>
   15da8:	cmp	r0, #0
   15dac:	bne	15dc4 <flatcc_builder_table_add_union_vector@@Base+0xac>
   15db0:	ldr	r3, [pc, #60]	; 15df4 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15db4:	ldr	r2, [pc, #76]	; 15e08 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   15db8:	ldr	r1, [pc, #56]	; 15df8 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   15dbc:	ldr	r0, [pc, #72]	; 15e0c <flatcc_builder_table_add_union_vector@@Base+0xf4>
   15dc0:	b	15d4c <flatcc_builder_table_add_union_vector@@Base+0x34>
   15dc4:	str	r4, [r0]
   15dc8:	mov	r1, r7
   15dcc:	mov	r0, r6
   15dd0:	bl	15afc <flatcc_builder_table_add_offset@@Base>
   15dd4:	cmp	r0, #0
   15dd8:	strne	r5, [r0]
   15ddc:	movne	r0, #0
   15de0:	ldreq	r3, [pc, #12]	; 15df4 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15de4:	ldreq	r2, [pc, #36]	; 15e10 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   15de8:	beq	15db8 <flatcc_builder_table_add_union_vector@@Base+0xa0>
   15dec:	add	sp, sp, #12
   15df0:	pop	{r4, r5, r6, r7, pc}
   15df4:	andeq	sl, r1, r8, ror #5
   15df8:	andeq	sl, r1, r8, asr #6
   15dfc:	andeq	sl, r1, r7, ror #11
   15e00:	andeq	r0, r0, r1, lsl #12
   15e04:	strdeq	sl, [r1], -r7
   15e08:	andeq	r0, r0, r4, lsl #12
   15e0c:	andeq	sl, r1, r1, ror #13
   15e10:	andeq	r0, r0, r8, lsl #12

00015e14 <flatcc_builder_push_buffer_alignment@@Base>:
   15e14:	mov	r3, r0
   15e18:	mov	r2, #4
   15e1c:	ldrh	r0, [r0, #128]	; 0x80
   15e20:	strh	r2, [r3, #128]	; 0x80
   15e24:	bx	lr

00015e28 <flatcc_builder_pop_buffer_alignment@@Base>:
   15e28:	ldrh	r3, [r0, #128]	; 0x80
   15e2c:	cmp	r3, r1
   15e30:	strhcc	r1, [r0, #128]	; 0x80
   15e34:	bx	lr

00015e38 <flatcc_builder_get_buffer_alignment@@Base>:
   15e38:	ldrh	r0, [r0, #128]	; 0x80
   15e3c:	bx	lr

00015e40 <flatcc_builder_set_vtable_clustering@@Base>:
   15e40:	clz	r1, r1
   15e44:	lsr	r1, r1, #5
   15e48:	str	r1, [r0, #180]	; 0xb4
   15e4c:	bx	lr

00015e50 <flatcc_builder_set_block_align@@Base>:
   15e50:	strh	r1, [r0, #132]	; 0x84
   15e54:	bx	lr

00015e58 <flatcc_builder_get_level@@Base>:
   15e58:	ldr	r0, [r0, #156]	; 0x9c
   15e5c:	bx	lr

00015e60 <flatcc_builder_set_max_level@@Base>:
   15e60:	ldr	r3, [r0, #160]	; 0xa0
   15e64:	str	r1, [r0, #176]	; 0xb0
   15e68:	cmp	r1, r3
   15e6c:	strgt	r1, [r0, #160]	; 0xa0
   15e70:	bx	lr

00015e74 <flatcc_builder_get_buffer_size@@Base>:
   15e74:	ldr	r2, [r0, #140]	; 0x8c
   15e78:	ldr	r0, [r0, #136]	; 0x88
   15e7c:	sub	r0, r2, r0
   15e80:	bx	lr

00015e84 <flatcc_builder_get_buffer_start@@Base>:
   15e84:	ldr	r0, [r0, #136]	; 0x88
   15e88:	bx	lr

00015e8c <flatcc_builder_get_buffer_end@@Base>:
   15e8c:	ldr	r0, [r0, #140]	; 0x8c
   15e90:	bx	lr

00015e94 <flatcc_builder_set_vtable_cache_limit@@Base>:
   15e94:	str	r1, [r0, #172]	; 0xac
   15e98:	bx	lr

00015e9c <flatcc_builder_set_identifier@@Base>:
   15e9c:	ldr	r3, [pc, #16]	; 15eb4 <flatcc_builder_set_identifier@@Base+0x18>
   15ea0:	cmp	r1, #0
   15ea4:	moveq	r1, r3
   15ea8:	ldr	r3, [r1]
   15eac:	str	r3, [r0, #168]	; 0xa8
   15eb0:	bx	lr
   15eb4:	andeq	r9, r1, r2, ror #24

00015eb8 <flatcc_builder_get_type@@Base>:
   15eb8:	ldr	r0, [r0, #32]
   15ebc:	cmp	r0, #0
   15ec0:	ldrhne	r0, [r0, #14]
   15ec4:	bx	lr

00015ec8 <flatcc_builder_get_type_at@@Base>:
   15ec8:	cmp	r1, #0
   15ecc:	ble	15ef4 <flatcc_builder_get_type_at@@Base+0x2c>
   15ed0:	ldr	r3, [r0, #156]	; 0x9c
   15ed4:	cmp	r1, r3
   15ed8:	bgt	15ef4 <flatcc_builder_get_type_at@@Base+0x2c>
   15edc:	sub	r1, r1, r3
   15ee0:	mov	r2, #36	; 0x24
   15ee4:	ldr	r3, [r0, #32]
   15ee8:	mla	r1, r2, r1, r3
   15eec:	ldrh	r0, [r1, #14]
   15ef0:	bx	lr
   15ef4:	mov	r0, #0
   15ef8:	bx	lr

00015efc <flatcc_builder_get_direct_buffer@@Base>:
   15efc:	ldr	r3, [r0, #184]	; 0xb8
   15f00:	cmp	r3, #0
   15f04:	beq	15f2c <flatcc_builder_get_direct_buffer@@Base+0x30>
   15f08:	ldr	r2, [r0, #188]	; 0xbc
   15f0c:	ldr	r3, [r0, #192]	; 0xc0
   15f10:	cmp	r2, r3
   15f14:	bne	15f2c <flatcc_builder_get_direct_buffer@@Base+0x30>
   15f18:	cmp	r1, #0
   15f1c:	ldrne	r3, [r0, #212]	; 0xd4
   15f20:	ldr	r0, [r0, #196]	; 0xc4
   15f24:	strne	r3, [r1]
   15f28:	bx	lr
   15f2c:	mov	r0, #0
   15f30:	cmp	r1, #0
   15f34:	strne	r0, [r1]
   15f38:	moveq	r0, r1
   15f3c:	bx	lr

00015f40 <flatcc_builder_copy_buffer@@Base>:
   15f40:	ldr	r3, [r0, #184]	; 0xb8
   15f44:	cmp	r3, #0
   15f48:	beq	15f74 <flatcc_builder_copy_buffer@@Base+0x34>
   15f4c:	push	{r4, lr}
   15f50:	add	r0, r0, #188	; 0xbc
   15f54:	bl	16534 <flatcc_emitter_copy_buffer@@Base>
   15f58:	cmp	r0, #0
   15f5c:	popne	{r4, pc}
   15f60:	ldr	r3, [pc, #20]	; 15f7c <flatcc_builder_copy_buffer@@Base+0x3c>
   15f64:	ldr	r2, [pc, #20]	; 15f80 <flatcc_builder_copy_buffer@@Base+0x40>
   15f68:	ldr	r1, [pc, #20]	; 15f84 <flatcc_builder_copy_buffer@@Base+0x44>
   15f6c:	ldr	r0, [pc, #20]	; 15f88 <flatcc_builder_copy_buffer@@Base+0x48>
   15f70:	bl	12508 <__assert_fail@plt>
   15f74:	mov	r0, r3
   15f78:	bx	lr
   15f7c:	andeq	sl, r1, lr, lsl #6
   15f80:	andeq	r0, r0, r6, lsl #15
   15f84:	andeq	sl, r1, r8, asr #6
   15f88:	andeq	sl, r1, pc, lsr r4

00015f8c <flatcc_builder_finalize_buffer@@Base>:
   15f8c:	push	{r4, r5, r6, lr}
   15f90:	cmp	r1, #0
   15f94:	ldr	r4, [r0, #140]	; 0x8c
   15f98:	ldr	r2, [r0, #136]	; 0x88
   15f9c:	mov	r5, r0
   15fa0:	sub	r4, r4, r2
   15fa4:	strne	r4, [r1]
   15fa8:	mov	r0, r4
   15fac:	bl	12484 <malloc@plt>
   15fb0:	subs	r6, r0, #0
   15fb4:	bne	15fcc <flatcc_builder_finalize_buffer@@Base+0x40>
   15fb8:	ldr	r3, [pc, #52]	; 15ff4 <flatcc_builder_finalize_buffer@@Base+0x68>
   15fbc:	ldr	r2, [pc, #52]	; 15ff8 <flatcc_builder_finalize_buffer@@Base+0x6c>
   15fc0:	ldr	r1, [pc, #52]	; 15ffc <flatcc_builder_finalize_buffer@@Base+0x70>
   15fc4:	ldr	r0, [pc, #52]	; 16000 <flatcc_builder_finalize_buffer@@Base+0x74>
   15fc8:	bl	12508 <__assert_fail@plt>
   15fcc:	mov	r2, r4
   15fd0:	mov	r1, r6
   15fd4:	mov	r0, r5
   15fd8:	bl	15f40 <flatcc_builder_copy_buffer@@Base>
   15fdc:	cmp	r0, #0
   15fe0:	ldreq	r3, [pc, #12]	; 15ff4 <flatcc_builder_finalize_buffer@@Base+0x68>
   15fe4:	ldreq	r2, [pc, #24]	; 16004 <flatcc_builder_finalize_buffer@@Base+0x78>
   15fe8:	beq	15fc0 <flatcc_builder_finalize_buffer@@Base+0x34>
   15fec:	mov	r0, r6
   15ff0:	pop	{r4, r5, r6, pc}
   15ff4:	andeq	sl, r1, r9, lsr #6
   15ff8:	muleq	r0, r8, r7
   15ffc:	andeq	sl, r1, r8, asr #6
   16000:			; <UNDEFINED> instruction: 0x0001a3b5
   16004:	muleq	r0, ip, r7

00016008 <flatcc_builder_finalize_aligned_buffer@@Base>:
   16008:	push	{r4, r5, r6, r7, r8, lr}
   1600c:	mov	r6, r0
   16010:	ldr	r4, [r0, #140]	; 0x8c
   16014:	ldr	r2, [r0, #136]	; 0x88
   16018:	ldrh	r0, [r0, #128]	; 0x80
   1601c:	subs	r7, r1, #0
   16020:	sub	r2, r4, r2
   16024:	sub	r4, r0, #1
   16028:	strne	r2, [r7]
   1602c:	add	r4, r4, r2
   16030:	rsb	r2, r0, #0
   16034:	and	r4, r4, r2
   16038:	mov	r1, r4
   1603c:	bl	13358 <test@@Base+0xa64>
   16040:	subs	r5, r0, #0
   16044:	beq	1606c <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   16048:	mov	r2, r4
   1604c:	mov	r1, r5
   16050:	mov	r0, r6
   16054:	bl	15f40 <flatcc_builder_copy_buffer@@Base>
   16058:	subs	r4, r0, #0
   1605c:	bne	1606c <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   16060:	mov	r0, r5
   16064:	bl	12454 <free@plt>
   16068:	mov	r5, r4
   1606c:	cmp	r7, #0
   16070:	clz	r3, r5
   16074:	lsr	r3, r3, #5
   16078:	moveq	r3, #0
   1607c:	cmp	r3, #0
   16080:	movne	r3, #0
   16084:	strne	r3, [r7]
   16088:	mov	r0, r5
   1608c:	pop	{r4, r5, r6, r7, r8, pc}

00016090 <flatcc_builder_aligned_alloc@@Base>:
   16090:	b	13358 <test@@Base+0xa64>

00016094 <flatcc_builder_aligned_free@@Base>:
   16094:	b	12454 <free@plt>

00016098 <flatcc_builder_get_emit_context@@Base>:
   16098:	ldr	r0, [r0, #36]	; 0x24
   1609c:	bx	lr

000160a0 <flatcc_emitter_recycle_page@@Base>:
   160a0:	ldr	r3, [r0]
   160a4:	cmp	r3, r1
   160a8:	beq	160ec <flatcc_emitter_recycle_page@@Base+0x4c>
   160ac:	ldr	r2, [r0, #4]
   160b0:	cmp	r1, r2
   160b4:	beq	160ec <flatcc_emitter_recycle_page@@Base+0x4c>
   160b8:	ldr	r2, [r1, #2944]	; 0xb80
   160bc:	ldr	r0, [r1, #2948]	; 0xb84
   160c0:	str	r0, [r2, #2948]	; 0xb84
   160c4:	ldr	r0, [r1, #2948]	; 0xb84
   160c8:	str	r2, [r0, #2944]	; 0xb80
   160cc:	ldr	r2, [r3, #2948]	; 0xb84
   160d0:	str	r3, [r1, #2944]	; 0xb80
   160d4:	str	r2, [r1, #2948]	; 0xb84
   160d8:	str	r1, [r2, #2944]	; 0xb80
   160dc:	ldr	r3, [r1, #2944]	; 0xb80
   160e0:	mov	r0, #0
   160e4:	str	r1, [r3, #2948]	; 0xb84
   160e8:	bx	lr
   160ec:	mvn	r0, #0
   160f0:	bx	lr

000160f4 <flatcc_emitter_reset@@Base>:
   160f4:	ldr	r3, [r0]
   160f8:	cmp	r3, #0
   160fc:	bxeq	lr
   16100:	add	r2, r3, #1472	; 0x5c0
   16104:	push	{r4, lr}
   16108:	mov	r4, r0
   1610c:	str	r2, [r0, #8]
   16110:	str	r2, [r0, #16]
   16114:	mov	r2, #1472	; 0x5c0
   16118:	str	r2, [r0, #12]
   1611c:	str	r2, [r0, #20]
   16120:	sub	r2, r2, #2944	; 0xb80
   16124:	str	r3, [r0, #4]
   16128:	str	r2, [r3, #2952]	; 0xb88
   1612c:	ldr	r3, [r0, #32]
   16130:	cmp	r3, #0
   16134:	ldr	r3, [r0, #24]
   16138:	streq	r3, [r0, #32]
   1613c:	ldr	r2, [r0, #32]
   16140:	lsr	r3, r3, #2
   16144:	add	r2, r2, r2, lsl #1
   16148:	add	r3, r3, r2, lsr #2
   1614c:	str	r3, [r0, #32]
   16150:	mov	r3, #0
   16154:	str	r3, [r0, #24]
   16158:	ldr	r2, [r4, #32]
   1615c:	ldr	r3, [r4, #28]
   16160:	cmp	r3, r2, lsl #1
   16164:	popls	{r4, pc}
   16168:	ldr	r3, [r4, #4]
   1616c:	ldr	r2, [r4]
   16170:	ldr	r0, [r3, #2944]	; 0xb80
   16174:	cmp	r0, r2
   16178:	bne	16180 <flatcc_emitter_reset@@Base+0x8c>
   1617c:	pop	{r4, pc}
   16180:	ldr	r2, [r0, #2944]	; 0xb80
   16184:	str	r2, [r3, #2944]	; 0xb80
   16188:	ldr	r2, [r0, #2944]	; 0xb80
   1618c:	str	r3, [r2, #2948]	; 0xb84
   16190:	bl	12454 <free@plt>
   16194:	ldr	r3, [r4, #28]
   16198:	sub	r3, r3, #2944	; 0xb80
   1619c:	str	r3, [r4, #28]
   161a0:	b	16158 <flatcc_emitter_reset@@Base+0x64>

000161a4 <flatcc_emitter_clear@@Base>:
   161a4:	ldr	r3, [r0]
   161a8:	cmp	r3, #0
   161ac:	bxeq	lr
   161b0:	ldr	r2, [r3, #2948]	; 0xb84
   161b4:	push	{r4, r5, r6, lr}
   161b8:	mov	r4, r0
   161bc:	mov	r1, #0
   161c0:	str	r1, [r2, #2944]	; 0xb80
   161c4:	ldr	r5, [r3, #2944]	; 0xb80
   161c8:	cmp	r5, #0
   161cc:	bne	161ec <flatcc_emitter_clear@@Base+0x48>
   161d0:	mov	r0, r3
   161d4:	bl	12454 <free@plt>
   161d8:	mov	r1, r5
   161dc:	mov	r0, r4
   161e0:	mov	r2, #36	; 0x24
   161e4:	pop	{r4, r5, r6, lr}
   161e8:	b	124cc <memset@plt>
   161ec:	ldr	r0, [r5, #2948]	; 0xb84
   161f0:	bl	12454 <free@plt>
   161f4:	mov	r3, r5
   161f8:	b	161c4 <flatcc_emitter_clear@@Base+0x20>

000161fc <flatcc_emitter@@Base>:
   161fc:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16200:	mov	r4, r0
   16204:	ldr	r0, [sp, #48]	; 0x30
   16208:	ldr	ip, [r4, #24]
   1620c:	cmp	r3, #0
   16210:	add	ip, ip, r0
   16214:	str	ip, [r4, #24]
   16218:	bge	163c8 <flatcc_emitter@@Base+0x1cc>
   1621c:	ldr	ip, [r4, #12]
   16220:	cmp	r0, ip
   16224:	bhi	1626c <flatcc_emitter@@Base+0x70>
   16228:	ldr	r3, [r4, #8]
   1622c:	sub	r3, r3, r0
   16230:	sub	r0, ip, r0
   16234:	str	r3, [r4, #8]
   16238:	str	r0, [r4, #12]
   1623c:	mov	r4, r1
   16240:	mov	r5, r2
   16244:	cmp	r5, #0
   16248:	add	r4, r4, #8
   1624c:	beq	16284 <flatcc_emitter@@Base+0x88>
   16250:	ldmdb	r4, {r1, r2}
   16254:	mov	r0, r3
   16258:	bl	12460 <memcpy@plt>
   1625c:	ldr	r2, [r4, #-4]
   16260:	sub	r5, r5, #1
   16264:	add	r3, r0, r2
   16268:	b	16244 <flatcc_emitter@@Base+0x48>
   1626c:	ldr	sl, [pc, #696]	; 1652c <flatcc_emitter@@Base+0x330>
   16270:	add	r5, r1, r2, lsl #3
   16274:	sub	r6, r2, #1
   16278:	mov	r9, #2944	; 0xb80
   1627c:	cmn	r6, #1
   16280:	bne	1628c <flatcc_emitter@@Base+0x90>
   16284:	mov	r0, #0
   16288:	b	16330 <flatcc_emitter@@Base+0x134>
   1628c:	ldr	r7, [r5, #-4]
   16290:	ldr	fp, [r5, #-8]
   16294:	mov	r8, #1472	; 0x5c0
   16298:	add	fp, fp, r7
   1629c:	cmp	r7, #0
   162a0:	subeq	r5, r5, #8
   162a4:	subeq	r6, r6, #1
   162a8:	beq	1627c <flatcc_emitter@@Base+0x80>
   162ac:	ldr	r3, [r4, #12]
   162b0:	cmp	r3, r7
   162b4:	bcs	16398 <flatcc_emitter@@Base+0x19c>
   162b8:	cmp	r3, #0
   162bc:	movne	r2, r3
   162c0:	bne	1639c <flatcc_emitter@@Base+0x1a0>
   162c4:	ldr	r3, [r4]
   162c8:	cmp	r3, #0
   162cc:	beq	16314 <flatcc_emitter@@Base+0x118>
   162d0:	ldr	r2, [r3, #2948]	; 0xb84
   162d4:	ldr	r1, [r4, #4]
   162d8:	cmp	r2, r1
   162dc:	beq	16314 <flatcc_emitter@@Base+0x118>
   162e0:	ldr	r3, [r3, #2952]	; 0xb88
   162e4:	sub	r3, r3, #2944	; 0xb80
   162e8:	str	r3, [r2, #2952]	; 0xb88
   162ec:	str	r2, [r4]
   162f0:	ldr	r3, [r4]
   162f4:	str	r9, [r4, #12]
   162f8:	add	r2, r3, #2944	; 0xb80
   162fc:	str	r2, [r4, #8]
   16300:	ldr	r2, [r3, #2944]	; 0xb80
   16304:	ldr	r2, [r2, #2952]	; 0xb88
   16308:	sub	r2, r2, #2944	; 0xb80
   1630c:	str	r2, [r3, #2952]	; 0xb88
   16310:	b	1629c <flatcc_emitter@@Base+0xa0>
   16314:	mov	r0, sl
   16318:	str	r3, [sp, #4]
   1631c:	bl	12484 <malloc@plt>
   16320:	ldr	r3, [sp, #4]
   16324:	cmp	r0, #0
   16328:	bne	16338 <flatcc_emitter@@Base+0x13c>
   1632c:	mvn	r0, #0
   16330:	add	sp, sp, #12
   16334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16338:	ldr	r2, [r4, #28]
   1633c:	cmp	r3, #0
   16340:	add	r2, r2, #2944	; 0xb80
   16344:	str	r2, [r4, #28]
   16348:	beq	16368 <flatcc_emitter@@Base+0x16c>
   1634c:	ldr	r2, [r4, #4]
   16350:	str	r3, [r0, #2944]	; 0xb80
   16354:	str	r2, [r0, #2948]	; 0xb84
   16358:	str	r0, [r3, #2948]	; 0xb84
   1635c:	str	r0, [r2, #2944]	; 0xb80
   16360:	str	r0, [r4]
   16364:	b	162f0 <flatcc_emitter@@Base+0xf4>
   16368:	add	r3, r0, #1472	; 0x5c0
   1636c:	str	r3, [r4, #8]
   16370:	str	r3, [r4, #16]
   16374:	ldr	r3, [pc, #436]	; 16530 <flatcc_emitter@@Base+0x334>
   16378:	str	r0, [r4]
   1637c:	str	r0, [r4, #4]
   16380:	str	r0, [r0, #2944]	; 0xb80
   16384:	str	r0, [r0, #2948]	; 0xb84
   16388:	str	r8, [r4, #12]
   1638c:	str	r8, [r4, #20]
   16390:	str	r3, [r0, #2952]	; 0xb88
   16394:	b	1629c <flatcc_emitter@@Base+0xa0>
   16398:	mov	r2, r7
   1639c:	ldr	r0, [r4, #8]
   163a0:	rsb	r1, r2, #0
   163a4:	add	r0, r0, r1
   163a8:	sub	r3, r3, r2
   163ac:	add	fp, fp, r1
   163b0:	str	r0, [r4, #8]
   163b4:	str	r3, [r4, #12]
   163b8:	mov	r1, fp
   163bc:	sub	r7, r7, r2
   163c0:	bl	12460 <memcpy@plt>
   163c4:	b	1629c <flatcc_emitter@@Base+0xa0>
   163c8:	ldr	ip, [r4, #20]
   163cc:	cmp	r0, ip
   163d0:	bls	1640c <flatcc_emitter@@Base+0x210>
   163d4:	ldr	sl, [pc, #336]	; 1652c <flatcc_emitter@@Base+0x330>
   163d8:	mov	r6, r2
   163dc:	add	r5, r1, #8
   163e0:	mov	r9, #2944	; 0xb80
   163e4:	cmp	r6, #0
   163e8:	beq	16284 <flatcc_emitter@@Base+0x88>
   163ec:	ldr	r7, [r5, #-4]
   163f0:	ldr	fp, [r5, #-8]
   163f4:	mov	r8, #1472	; 0x5c0
   163f8:	cmp	r7, #0
   163fc:	bne	16424 <flatcc_emitter@@Base+0x228>
   16400:	sub	r6, r6, #1
   16404:	add	r5, r5, #8
   16408:	b	163e4 <flatcc_emitter@@Base+0x1e8>
   1640c:	ldr	r3, [r4, #16]
   16410:	add	lr, r3, r0
   16414:	sub	r0, ip, r0
   16418:	str	lr, [r4, #16]
   1641c:	str	r0, [r4, #20]
   16420:	b	1623c <flatcc_emitter@@Base+0x40>
   16424:	ldr	r3, [r4, #20]
   16428:	cmp	r3, r7
   1642c:	bcs	164ec <flatcc_emitter@@Base+0x2f0>
   16430:	cmp	r3, #0
   16434:	bne	164f0 <flatcc_emitter@@Base+0x2f4>
   16438:	ldr	r3, [r4, #4]
   1643c:	cmp	r3, #0
   16440:	beq	16458 <flatcc_emitter@@Base+0x25c>
   16444:	ldr	r2, [r3, #2944]	; 0xb80
   16448:	ldr	r1, [r4]
   1644c:	cmp	r2, r1
   16450:	strne	r2, [r4, #4]
   16454:	bne	1649c <flatcc_emitter@@Base+0x2a0>
   16458:	mov	r0, sl
   1645c:	str	r3, [sp, #4]
   16460:	bl	12484 <malloc@plt>
   16464:	cmp	r0, #0
   16468:	beq	1632c <flatcc_emitter@@Base+0x130>
   1646c:	ldr	r2, [r4, #28]
   16470:	ldr	r3, [sp, #4]
   16474:	add	r2, r2, #2944	; 0xb80
   16478:	cmp	r3, #0
   1647c:	str	r2, [r4, #28]
   16480:	beq	164bc <flatcc_emitter@@Base+0x2c0>
   16484:	ldr	r2, [r4]
   16488:	str	r3, [r0, #2948]	; 0xb84
   1648c:	str	r2, [r0, #2944]	; 0xb80
   16490:	str	r0, [r2, #2948]	; 0xb84
   16494:	str	r0, [r3, #2944]	; 0xb80
   16498:	str	r0, [r4, #4]
   1649c:	ldr	r3, [r4, #4]
   164a0:	str	r9, [r4, #20]
   164a4:	str	r3, [r4, #16]
   164a8:	ldr	r2, [r3, #2948]	; 0xb84
   164ac:	ldr	r2, [r2, #2952]	; 0xb88
   164b0:	add	r2, r2, #2944	; 0xb80
   164b4:	str	r2, [r3, #2952]	; 0xb88
   164b8:	b	163f8 <flatcc_emitter@@Base+0x1fc>
   164bc:	add	r3, r0, #1472	; 0x5c0
   164c0:	str	r3, [r4, #8]
   164c4:	str	r3, [r4, #16]
   164c8:	ldr	r3, [pc, #96]	; 16530 <flatcc_emitter@@Base+0x334>
   164cc:	str	r0, [r4]
   164d0:	str	r0, [r4, #4]
   164d4:	str	r0, [r0, #2944]	; 0xb80
   164d8:	str	r0, [r0, #2948]	; 0xb84
   164dc:	str	r8, [r4, #12]
   164e0:	str	r8, [r4, #20]
   164e4:	str	r3, [r0, #2952]	; 0xb88
   164e8:	b	163f8 <flatcc_emitter@@Base+0x1fc>
   164ec:	mov	r3, r7
   164f0:	mov	r2, r3
   164f4:	mov	r1, fp
   164f8:	ldr	r0, [r4, #16]
   164fc:	str	r3, [sp, #4]
   16500:	bl	12460 <memcpy@plt>
   16504:	ldr	r3, [sp, #4]
   16508:	ldr	r2, [r4, #16]
   1650c:	sub	r7, r7, r3
   16510:	add	r2, r2, r3
   16514:	str	r2, [r4, #16]
   16518:	ldr	r2, [r4, #20]
   1651c:	add	fp, fp, r3
   16520:	sub	r3, r2, r3
   16524:	str	r3, [r4, #20]
   16528:	b	163f8 <flatcc_emitter@@Base+0x1fc>
   1652c:	andeq	r0, r0, ip, lsl #23
   16530:			; <UNDEFINED> instruction: 0xfffffa40

00016534 <flatcc_emitter_copy_buffer@@Base>:
   16534:	push	{r4, r5, r6, lr}
   16538:	mov	r4, r0
   1653c:	ldr	r0, [r0, #24]
   16540:	cmp	r0, r2
   16544:	movhi	r3, #0
   16548:	bhi	165bc <flatcc_emitter_copy_buffer@@Base+0x88>
   1654c:	ldr	r2, [r4]
   16550:	cmp	r2, #0
   16554:	moveq	r3, r2
   16558:	beq	165bc <flatcc_emitter_copy_buffer@@Base+0x88>
   1655c:	mov	r3, r1
   16560:	ldr	r1, [r4, #4]
   16564:	cmp	r2, r1
   16568:	moveq	r2, r0
   1656c:	ldr	r1, [r4, #8]
   16570:	beq	165b0 <flatcc_emitter_copy_buffer@@Base+0x7c>
   16574:	ldr	r5, [r4, #12]
   16578:	mov	r0, r3
   1657c:	rsb	r5, r5, #2944	; 0xb80
   16580:	mov	r2, r5
   16584:	bl	12460 <memcpy@plt>
   16588:	ldr	r2, [r4]
   1658c:	mov	r6, #2944	; 0xb80
   16590:	add	r3, r0, r5
   16594:	ldr	r5, [r2, #2944]	; 0xb80
   16598:	ldr	r2, [r4, #4]
   1659c:	cmp	r5, r2
   165a0:	bne	165c4 <flatcc_emitter_copy_buffer@@Base+0x90>
   165a4:	ldr	r2, [r4, #20]
   165a8:	mov	r1, r5
   165ac:	rsb	r2, r2, #2944	; 0xb80
   165b0:	mov	r0, r3
   165b4:	bl	12460 <memcpy@plt>
   165b8:	mov	r3, r0
   165bc:	mov	r0, r3
   165c0:	pop	{r4, r5, r6, pc}
   165c4:	mov	r1, r5
   165c8:	mov	r0, r3
   165cc:	mov	r2, r6
   165d0:	bl	12460 <memcpy@plt>
   165d4:	ldr	r5, [r5, #2944]	; 0xb80
   165d8:	add	r3, r0, #2944	; 0xb80
   165dc:	b	16598 <flatcc_emitter_copy_buffer@@Base+0x64>

000165e0 <grisu3_diy_fp_encode_double@@Base>:
   165e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165e4:	sub	sp, sp, #44	; 0x2c
   165e8:	mov	r8, r0
   165ec:	ldr	fp, [sp, #80]	; 0x50
   165f0:	mov	r9, r1
   165f4:	cmp	fp, #0
   165f8:	mov	ip, r3
   165fc:	sub	r2, r2, r3
   16600:	movne	fp, #4
   16604:	moveq	fp, #0
   16608:	orrs	r3, r8, r9
   1660c:	movne	r3, #0
   16610:	movne	r4, #0
   16614:	ldrne	r5, [pc, #1132]	; 16a88 <grisu3_diy_fp_encode_double@@Base+0x4a8>
   16618:	bne	16638 <grisu3_diy_fp_encode_double@@Base+0x58>
   1661c:	bl	12518 <__assert_fail@plt+0x10>
   16620:	lsl	r3, r9, #10
   16624:	orr	r3, r3, r8, lsr #22
   16628:	lsl	r1, r8, #10
   1662c:	mov	r9, r3
   16630:	mov	r8, r1
   16634:	mov	r3, lr
   16638:	and	r0, r8, r4
   1663c:	and	r1, r9, r5
   16640:	orrs	r1, r0, r1
   16644:	sub	lr, r3, #10
   16648:	beq	16620 <grisu3_diy_fp_encode_double@@Base+0x40>
   1664c:	cmp	r8, #0
   16650:	sbcs	r1, r9, #0
   16654:	mov	sl, r3
   16658:	sub	r3, r3, #1
   1665c:	bge	16684 <grisu3_diy_fp_encode_double@@Base+0xa4>
   16660:	rsb	r7, sl, #0
   16664:	cmn	r2, #348	; 0x15c
   16668:	lsl	fp, fp, r7
   1666c:	bge	16690 <grisu3_diy_fp_encode_double@@Base+0xb0>
   16670:	ldr	r3, [pc, #1044]	; 16a8c <grisu3_diy_fp_encode_double@@Base+0x4ac>
   16674:	ldr	r1, [pc, #1044]	; 16a90 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   16678:	ldr	r0, [pc, #1044]	; 16a94 <grisu3_diy_fp_encode_double@@Base+0x4b4>
   1667c:	mov	r2, #80	; 0x50
   16680:	bl	12508 <__assert_fail@plt>
   16684:	adds	r8, r8, r8
   16688:	adc	r9, r9, r9
   1668c:	b	1664c <grisu3_diy_fp_encode_double@@Base+0x6c>
   16690:	cmp	r2, #348	; 0x15c
   16694:	ldrge	r3, [pc, #1008]	; 16a8c <grisu3_diy_fp_encode_double@@Base+0x4ac>
   16698:	movge	r2, #81	; 0x51
   1669c:	ldrge	r1, [pc, #1004]	; 16a90 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   166a0:	ldrge	r0, [pc, #1008]	; 16a98 <grisu3_diy_fp_encode_double@@Base+0x4b8>
   166a4:	bge	16680 <grisu3_diy_fp_encode_double@@Base+0xa0>
   166a8:	add	r1, r2, #348	; 0x15c
   166ac:	ldr	r3, [pc, #1000]	; 16a9c <grisu3_diy_fp_encode_double@@Base+0x4bc>
   166b0:	asr	r1, r1, #3
   166b4:	add	r1, r3, r1, lsl #4
   166b8:	ldrsh	r0, [r1, #66]	; 0x42
   166bc:	ldrd	r4, [r1, #56]	; 0x38
   166c0:	ldrsh	r1, [r1, #64]	; 0x40
   166c4:	cmp	r2, r0
   166c8:	strd	r4, [sp, #8]
   166cc:	str	r1, [sp, #32]
   166d0:	addlt	r3, r3, #24
   166d4:	movlt	r2, #88	; 0x58
   166d8:	ldrlt	r1, [pc, #944]	; 16a90 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   166dc:	ldrlt	r0, [pc, #956]	; 16aa0 <grisu3_diy_fp_encode_double@@Base+0x4c0>
   166e0:	blt	16680 <grisu3_diy_fp_encode_double@@Base+0xa0>
   166e4:	add	r1, r0, #7
   166e8:	cmp	r2, r1
   166ec:	addgt	r3, r3, #24
   166f0:	movgt	r2, #89	; 0x59
   166f4:	ldrgt	r1, [pc, #916]	; 16a90 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   166f8:	ldrgt	r0, [pc, #932]	; 16aa4 <grisu3_diy_fp_encode_double@@Base+0x4c4>
   166fc:	bgt	16680 <grisu3_diy_fp_encode_double@@Base+0xa0>
   16700:	cmp	r2, r0
   16704:	beq	167e4 <grisu3_diy_fp_encode_double@@Base+0x204>
   16708:	sub	r2, r2, r0
   1670c:	sub	r2, r2, #1
   16710:	cmp	r2, #6
   16714:	ldrhi	r3, [pc, #908]	; 16aa8 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   16718:	movhi	r2, #185	; 0xb9
   1671c:	ldrhi	r1, [pc, #876]	; 16a90 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   16720:	ldrhi	r0, [pc, #900]	; 16aac <grisu3_diy_fp_encode_double@@Base+0x4cc>
   16724:	bhi	16680 <grisu3_diy_fp_encode_double@@Base+0xa0>
   16728:	ldr	r1, [pc, #896]	; 16ab0 <grisu3_diy_fp_encode_double@@Base+0x4d0>
   1672c:	lsl	r3, r2, #4
   16730:	add	r0, r1, r3
   16734:	str	r0, [sp, #28]
   16738:	ldrd	r0, [r1, r3]
   1673c:	mov	r3, #0
   16740:	add	ip, ip, #1
   16744:	strd	r0, [sp]
   16748:	ldr	lr, [sp, #4]
   1674c:	ldrd	r4, [sp]
   16750:	mov	r1, #0
   16754:	umull	r6, r7, r8, lr
   16758:	mov	r0, r8
   1675c:	strd	r6, [sp, #16]
   16760:	ldr	r6, [sp, #20]
   16764:	mov	r5, #0
   16768:	mla	r8, lr, r1, r6
   1676c:	umull	r6, r7, r9, r4
   16770:	mla	lr, r9, r5, r7
   16774:	add	r2, ip, r2
   16778:	str	lr, [sp, #36]	; 0x24
   1677c:	mul	lr, r0, r5
   16780:	mla	lr, r4, r1, lr
   16784:	umull	r4, r5, r0, r4
   16788:	add	r0, lr, r5
   1678c:	adds	r0, r0, r6
   16790:	ldr	lr, [sp, #16]
   16794:	adc	r1, r3, #0
   16798:	ldr	r6, [sp, #36]	; 0x24
   1679c:	adds	r0, r0, #-2147483648	; 0x80000000
   167a0:	adc	r1, r1, #0
   167a4:	adds	r0, r0, lr
   167a8:	adc	r1, r1, #0
   167ac:	adds	r0, r8, r6
   167b0:	mov	r4, r1
   167b4:	mov	r5, r3
   167b8:	adc	r1, r3, r3
   167bc:	ldr	r3, [sp, #4]
   167c0:	umlal	r0, r1, r3, r9
   167c4:	ldr	r3, [sp, #28]
   167c8:	adds	r8, r4, r0
   167cc:	adc	r9, r5, r1
   167d0:	ldr	r3, [r3, #8]
   167d4:	cmp	r2, #19
   167d8:	add	sl, sl, r3
   167dc:	add	sl, sl, #64	; 0x40
   167e0:	addgt	fp, fp, #4
   167e4:	ldrd	r0, [sp, #8]
   167e8:	ldr	lr, [sp, #12]
   167ec:	mov	r3, #0
   167f0:	umull	r6, r7, r9, r0
   167f4:	umull	r4, r5, r8, lr
   167f8:	mov	r1, #0
   167fc:	mla	lr, lr, r3, r5
   16800:	mla	r5, r9, r1, r7
   16804:	mul	r7, r8, r1
   16808:	mov	ip, #0
   1680c:	mla	r7, r0, r3, r7
   16810:	umull	r0, r1, r8, r0
   16814:	add	r2, r7, r1
   16818:	adds	r2, r2, r6
   1681c:	adc	r3, ip, #0
   16820:	adds	r2, r2, #-2147483648	; 0x80000000
   16824:	adc	r3, r3, #0
   16828:	adds	r2, r2, r4
   1682c:	adc	r3, r3, #0
   16830:	mov	r6, r3
   16834:	mov	r2, r5
   16838:	ldr	r3, [sp, #12]
   1683c:	adds	r4, lr, r2
   16840:	adc	r5, ip, ip
   16844:	umlal	r4, r5, r3, r9
   16848:	ldr	r3, [sp, #32]
   1684c:	adds	r4, r4, r6
   16850:	adc	r5, r5, ip
   16854:	cmp	fp, ip
   16858:	mov	r7, ip
   1685c:	add	sl, sl, r3
   16860:	moveq	r7, #8
   16864:	movne	r7, #9
   16868:	orrs	r3, r4, r5
   1686c:	add	sl, sl, #64	; 0x40
   16870:	add	fp, fp, r7
   16874:	movne	ip, sl
   16878:	movne	r0, #0
   1687c:	ldrne	r1, [pc, #516]	; 16a88 <grisu3_diy_fp_encode_double@@Base+0x4a8>
   16880:	beq	1661c <grisu3_diy_fp_encode_double@@Base+0x3c>
   16884:	and	r2, r4, r0
   16888:	and	r3, r5, r1
   1688c:	orrs	r3, r2, r3
   16890:	sub	lr, ip, #10
   16894:	beq	169c4 <grisu3_diy_fp_encode_double@@Base+0x3e4>
   16898:	cmp	r4, #0
   1689c:	sbcs	r3, r5, #0
   168a0:	mov	r6, ip
   168a4:	sub	ip, ip, #1
   168a8:	bge	169e0 <grisu3_diy_fp_encode_double@@Base+0x400>
   168ac:	ldr	r2, [pc, #512]	; 16ab4 <grisu3_diy_fp_encode_double@@Base+0x4d4>
   168b0:	sub	sl, sl, r6
   168b4:	add	r3, r6, #64	; 0x40
   168b8:	cmp	r3, r2
   168bc:	lsl	r7, fp, sl
   168c0:	movge	r2, #64	; 0x40
   168c4:	bge	168dc <grisu3_diy_fp_encode_double@@Base+0x2fc>
   168c8:	mvn	r2, #1072	; 0x430
   168cc:	cmp	r3, r2
   168d0:	addge	r2, r6, #1136	; 0x470
   168d4:	addge	r2, r2, #2
   168d8:	movlt	r2, #0
   168dc:	rsb	sl, r2, #64	; 0x40
   168e0:	cmp	sl, #60	; 0x3c
   168e4:	ble	16914 <grisu3_diy_fp_encode_double@@Base+0x334>
   168e8:	rsb	r8, r2, #2
   168ec:	mov	r0, r4
   168f0:	mov	r1, r5
   168f4:	mov	r2, r8
   168f8:	bl	194f0 <flatcc_json_parser_table_as_root@@Base+0x210>
   168fc:	asr	r7, r7, r8
   16900:	add	r6, r6, r8
   16904:	add	r7, r7, #9
   16908:	mov	sl, #62	; 0x3e
   1690c:	mov	r4, r0
   16910:	mov	r5, r1
   16914:	mov	r2, sl
   16918:	mov	r0, r4
   1691c:	mov	r1, r5
   16920:	bl	194f0 <flatcc_json_parser_table_as_root@@Base+0x210>
   16924:	sub	fp, sl, #1
   16928:	mov	r2, fp
   1692c:	add	r6, sl, r6
   16930:	mov	r8, r0
   16934:	mov	r9, r1
   16938:	mov	r0, #1
   1693c:	mov	r1, #0
   16940:	bl	1950c <flatcc_json_parser_table_as_root@@Base+0x22c>
   16944:	mov	r2, fp
   16948:	mov	r1, #0
   1694c:	and	r0, r0, r4
   16950:	lsl	r3, r0, #3
   16954:	mov	r0, #8
   16958:	str	r3, [sp]
   1695c:	bl	1950c <flatcc_json_parser_table_as_root@@Base+0x22c>
   16960:	add	r3, r7, r0
   16964:	cmp	sl, r3
   16968:	blt	16990 <grisu3_diy_fp_encode_double@@Base+0x3b0>
   1696c:	adds	r8, r8, #1
   16970:	adc	r9, r9, #0
   16974:	mov	r4, #0
   16978:	and	r5, r9, #2097152	; 0x200000
   1697c:	orrs	r2, r4, r5
   16980:	beq	16990 <grisu3_diy_fp_encode_double@@Base+0x3b0>
   16984:	lsrs	r9, r9, #1
   16988:	rrx	r8, r8
   1698c:	add	r6, r6, #1
   16990:	ldr	r5, [pc, #288]	; 16ab8 <grisu3_diy_fp_encode_double@@Base+0x4d8>
   16994:	mvn	r4, #0
   16998:	cmp	r9, r5
   1699c:	cmpeq	r8, r4
   169a0:	add	r2, r6, #1
   169a4:	bhi	169ec <grisu3_diy_fp_encode_double@@Base+0x40c>
   169a8:	ldr	r2, [pc, #268]	; 16abc <grisu3_diy_fp_encode_double@@Base+0x4dc>
   169ac:	cmp	r6, r2
   169b0:	movge	r1, r2
   169b4:	bge	16a04 <grisu3_diy_fp_encode_double@@Base+0x424>
   169b8:	mov	r8, #0
   169bc:	mov	r9, #0
   169c0:	b	16a4c <grisu3_diy_fp_encode_double@@Base+0x46c>
   169c4:	lsl	r3, r5, #10
   169c8:	orr	r3, r3, r4, lsr #22
   169cc:	lsl	r2, r4, #10
   169d0:	mov	r4, r2
   169d4:	mov	r5, r3
   169d8:	mov	ip, lr
   169dc:	b	16884 <grisu3_diy_fp_encode_double@@Base+0x2a4>
   169e0:	adds	r4, r4, r4
   169e4:	adc	r5, r5, r5
   169e8:	b	16898 <grisu3_diy_fp_encode_double@@Base+0x2b8>
   169ec:	lsrs	r9, r9, #1
   169f0:	rrx	r8, r8
   169f4:	mov	r6, r2
   169f8:	b	16998 <grisu3_diy_fp_encode_double@@Base+0x3b8>
   169fc:	adds	r8, r8, r8
   16a00:	adc	r9, r9, r9
   16a04:	cmp	r6, r1
   16a08:	mov	r2, r6
   16a0c:	mov	r4, #0
   16a10:	and	r5, r9, #1048576	; 0x100000
   16a14:	beq	16a7c <grisu3_diy_fp_encode_double@@Base+0x49c>
   16a18:	orrs	ip, r4, r5
   16a1c:	sub	r6, r6, #1
   16a20:	beq	169fc <grisu3_diy_fp_encode_double@@Base+0x41c>
   16a24:	add	r4, r2, #1072	; 0x430
   16a28:	add	r4, r4, #3
   16a2c:	ldr	fp, [pc, #140]	; 16ac0 <grisu3_diy_fp_encode_double@@Base+0x4e0>
   16a30:	mvn	sl, #0
   16a34:	and	r8, r8, sl
   16a38:	and	r9, r9, fp
   16a3c:	mov	sl, #0
   16a40:	lsl	fp, r4, #20
   16a44:	orr	r8, r8, sl
   16a48:	orr	r9, r9, fp
   16a4c:	ldr	r2, [sp, #84]	; 0x54
   16a50:	sub	r0, r0, r7
   16a54:	strd	r8, [r2]
   16a58:	ldr	r2, [sp]
   16a5c:	cmp	r2, r3
   16a60:	movlt	r3, #0
   16a64:	movge	r3, #1
   16a68:	cmp	r2, r0
   16a6c:	movgt	r0, r3
   16a70:	orrle	r0, r3, #1
   16a74:	add	sp, sp, #44	; 0x2c
   16a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a7c:	orrs	r1, r4, r5
   16a80:	beq	16a2c <grisu3_diy_fp_encode_double@@Base+0x44c>
   16a84:	b	16a24 <grisu3_diy_fp_encode_double@@Base+0x444>
   16a88:			; <UNDEFINED> instruction: 0xffc00000
   16a8c:	andeq	sl, r1, r8, lsr r7
   16a90:	andeq	fp, r1, r2, lsl r0
   16a94:	andeq	fp, r1, r9, rrx
   16a98:	andeq	fp, r1, r8, lsl #1
   16a9c:	andeq	sl, r1, r0, lsr #14
   16aa0:	strheq	fp, [r1], -r3
   16aa4:	andeq	fp, r1, r2, asr #1
   16aa8:	andeq	sl, r1, r8, asr #25
   16aac:	ldrdeq	fp, [r1], -sp
   16ab0:	andeq	ip, r2, r0, rrx
   16ab4:			; <UNDEFINED> instruction: 0xfffffc0e
   16ab8:			; <UNDEFINED> instruction: 0x001fffff
   16abc:			; <UNDEFINED> instruction: 0xfffffbce
   16ac0:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   16ac4:	cmp	r1, #1000	; 0x3e8
   16ac8:	addle	r1, r1, #1
   16acc:	addgt	r1, r0, #1000	; 0x3e8
   16ad0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ad4:	mov	r3, #0
   16ad8:	mov	r5, r2
   16adc:	addle	r1, r0, r1
   16ae0:	mov	r2, #0
   16ae4:	addgt	r1, r1, #1
   16ae8:	cmp	r1, r0
   16aec:	sub	sp, sp, #36	; 0x24
   16af0:	mov	r4, r0
   16af4:	strd	r2, [r5]
   16af8:	beq	16b58 <grisu3_diy_fp_encode_double@@Base+0x578>
   16afc:	ldrb	r3, [r0]
   16b00:	cmp	r3, #45	; 0x2d
   16b04:	movne	r3, r0
   16b08:	movne	r2, #0
   16b0c:	bne	16b28 <grisu3_diy_fp_encode_double@@Base+0x548>
   16b10:	add	r3, r0, #1
   16b14:	cmp	r1, r3
   16b18:	movne	r2, #1
   16b1c:	bne	16b28 <grisu3_diy_fp_encode_double@@Base+0x548>
   16b20:	mov	r4, #0
   16b24:	b	16b58 <grisu3_diy_fp_encode_double@@Base+0x578>
   16b28:	ldrb	r6, [r3]
   16b2c:	str	r2, [sp, #12]
   16b30:	cmp	r6, #48	; 0x30
   16b34:	bne	16bc4 <grisu3_diy_fp_encode_double@@Base+0x5e4>
   16b38:	add	lr, r3, #1
   16b3c:	cmp	r1, lr
   16b40:	beq	16d90 <grisu3_diy_fp_encode_double@@Base+0x7b0>
   16b44:	ldrb	r3, [r3, #1]
   16b48:	orr	r3, r3, #32
   16b4c:	cmp	r3, #120	; 0x78
   16b50:	movne	r2, lr
   16b54:	bne	16b70 <grisu3_diy_fp_encode_double@@Base+0x590>
   16b58:	mov	r0, r4
   16b5c:	add	sp, sp, #36	; 0x24
   16b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b64:	cmp	r1, r2
   16b68:	mov	lr, r2
   16b6c:	beq	16d90 <grisu3_diy_fp_encode_double@@Base+0x7b0>
   16b70:	mov	r3, r2
   16b74:	add	r2, r2, #1
   16b78:	ldrb	r0, [r3]
   16b7c:	cmp	r0, #48	; 0x30
   16b80:	beq	16b64 <grisu3_diy_fp_encode_double@@Base+0x584>
   16b84:	mov	sl, #0
   16b88:	mov	fp, #0
   16b8c:	add	r9, pc, #884	; 0x374
   16b90:	ldrd	r8, [r9]
   16b94:	mov	r0, r3
   16b98:	mov	ip, #10
   16b9c:	cmp	r1, r0
   16ba0:	mov	lr, r0
   16ba4:	beq	16da4 <grisu3_diy_fp_encode_double@@Base+0x7c4>
   16ba8:	ldrb	r2, [r0]
   16bac:	add	r0, r0, #1
   16bb0:	sub	r6, r2, #48	; 0x30
   16bb4:	cmp	r6, #9
   16bb8:	bls	16bf4 <grisu3_diy_fp_encode_double@@Base+0x614>
   16bbc:	mov	ip, #0
   16bc0:	b	16c18 <grisu3_diy_fp_encode_double@@Base+0x638>
   16bc4:	sub	r2, r6, #49	; 0x31
   16bc8:	cmp	r2, #8
   16bcc:	bls	16be0 <grisu3_diy_fp_encode_double@@Base+0x600>
   16bd0:	ldr	r3, [sp, #12]
   16bd4:	cmp	r3, #0
   16bd8:	movne	r4, #0
   16bdc:	b	16b58 <grisu3_diy_fp_encode_double@@Base+0x578>
   16be0:	sub	r6, r6, #48	; 0x30
   16be4:	add	r3, r3, #1
   16be8:	mov	sl, r6
   16bec:	asr	fp, r6, #31
   16bf0:	b	16b8c <grisu3_diy_fp_encode_double@@Base+0x5ac>
   16bf4:	cmp	fp, r9
   16bf8:	cmpeq	sl, r8
   16bfc:	bls	16d74 <grisu3_diy_fp_encode_double@@Base+0x794>
   16c00:	cmp	r2, #52	; 0x34
   16c04:	movls	r2, #0
   16c08:	movhi	r2, #1
   16c0c:	adds	sl, sl, r2
   16c10:	adc	fp, fp, #0
   16c14:	mov	ip, #1
   16c18:	sub	r3, lr, r3
   16c1c:	str	r3, [sp, #8]
   16c20:	mov	r3, lr
   16c24:	cmp	r3, r1
   16c28:	mov	r7, r3
   16c2c:	sub	r6, r3, lr
   16c30:	beq	16dcc <grisu3_diy_fp_encode_double@@Base+0x7ec>
   16c34:	ldrb	r2, [r3], #1
   16c38:	cmp	r2, #48	; 0x30
   16c3c:	beq	16c24 <grisu3_diy_fp_encode_double@@Base+0x644>
   16c40:	sub	r2, r2, #49	; 0x31
   16c44:	cmp	r2, #8
   16c48:	bhi	16c78 <grisu3_diy_fp_encode_double@@Base+0x698>
   16c4c:	mov	r2, r3
   16c50:	cmp	r2, r1
   16c54:	mov	r7, r2
   16c58:	sub	r6, r2, lr
   16c5c:	beq	16ec0 <grisu3_diy_fp_encode_double@@Base+0x8e0>
   16c60:	ldrb	r3, [r7]
   16c64:	add	r2, r2, #1
   16c68:	sub	r3, r3, #48	; 0x30
   16c6c:	cmp	r3, #9
   16c70:	bls	16c50 <grisu3_diy_fp_encode_double@@Base+0x670>
   16c74:	mov	ip, #1
   16c78:	ldrb	r3, [r7]
   16c7c:	cmp	r3, #46	; 0x2e
   16c80:	bne	16dd0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   16c84:	add	r3, r7, #1
   16c88:	str	r3, [sp, #16]
   16c8c:	ldrb	r3, [r7, #1]
   16c90:	sub	r3, r3, #48	; 0x30
   16c94:	cmp	r3, #9
   16c98:	bhi	16b20 <grisu3_diy_fp_encode_double@@Base+0x540>
   16c9c:	add	r2, r6, #1
   16ca0:	add	r3, r7, #1
   16ca4:	mov	r6, #10
   16ca8:	str	r2, [sp, #20]
   16cac:	ldr	r2, [sp, #20]
   16cb0:	cmp	r3, r1
   16cb4:	sub	r2, r2, r3
   16cb8:	add	r2, r7, r2
   16cbc:	beq	16d08 <grisu3_diy_fp_encode_double@@Base+0x728>
   16cc0:	mov	lr, r3
   16cc4:	ldrb	r0, [lr], #1
   16cc8:	sub	r8, r0, #48	; 0x30
   16ccc:	cmp	r8, #9
   16cd0:	bhi	16d08 <grisu3_diy_fp_encode_double@@Base+0x728>
   16cd4:	add	r9, pc, #556	; 0x22c
   16cd8:	ldrd	r8, [r9]
   16cdc:	cmp	fp, r9
   16ce0:	cmpeq	sl, r8
   16ce4:	bls	16dac <grisu3_diy_fp_encode_double@@Base+0x7cc>
   16ce8:	cmp	ip, #0
   16cec:	bne	16d08 <grisu3_diy_fp_encode_double@@Base+0x728>
   16cf0:	cmp	r0, #52	; 0x34
   16cf4:	movls	r0, #0
   16cf8:	movhi	r0, #1
   16cfc:	adds	sl, sl, r0
   16d00:	adc	fp, fp, #0
   16d04:	mov	ip, #1
   16d08:	ldr	r0, [sp, #16]
   16d0c:	ldr	lr, [sp, #8]
   16d10:	sub	r0, r3, r0
   16d14:	sub	r2, r2, r3
   16d18:	add	r0, lr, r0
   16d1c:	str	r0, [sp, #8]
   16d20:	cmp	r1, r3
   16d24:	mov	r7, r3
   16d28:	add	r6, r2, r3
   16d2c:	beq	16dcc <grisu3_diy_fp_encode_double@@Base+0x7ec>
   16d30:	ldrb	r0, [r3], #1
   16d34:	cmp	r0, #48	; 0x30
   16d38:	beq	16d20 <grisu3_diy_fp_encode_double@@Base+0x740>
   16d3c:	sub	r0, r0, #49	; 0x31
   16d40:	cmp	r0, #8
   16d44:	bhi	16dd0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   16d48:	mov	r2, r3
   16d4c:	cmp	r1, r2
   16d50:	mov	r7, r2
   16d54:	beq	16ec0 <grisu3_diy_fp_encode_double@@Base+0x8e0>
   16d58:	ldrb	r3, [r7]
   16d5c:	add	r2, r2, #1
   16d60:	sub	r3, r3, #48	; 0x30
   16d64:	cmp	r3, #9
   16d68:	bls	16d4c <grisu3_diy_fp_encode_double@@Base+0x76c>
   16d6c:	mov	ip, #1
   16d70:	b	16dd0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   16d74:	umull	r6, r7, sl, ip
   16d78:	mla	r7, ip, fp, r7
   16d7c:	subs	r6, r6, #48	; 0x30
   16d80:	sbc	r7, r7, #0
   16d84:	adds	sl, r6, r2
   16d88:	adc	fp, r7, #0
   16d8c:	b	16b9c <grisu3_diy_fp_encode_double@@Base+0x5bc>
   16d90:	mov	r3, r1
   16d94:	mov	ip, #0
   16d98:	mov	sl, #0
   16d9c:	mov	fp, #0
   16da0:	b	16c18 <grisu3_diy_fp_encode_double@@Base+0x638>
   16da4:	mov	lr, r1
   16da8:	b	16bbc <grisu3_diy_fp_encode_double@@Base+0x5dc>
   16dac:	umull	r2, r3, sl, r6
   16db0:	mla	r3, r6, fp, r3
   16db4:	subs	sl, r2, #48	; 0x30
   16db8:	sbc	fp, r3, #0
   16dbc:	adds	sl, sl, r0
   16dc0:	adc	fp, fp, #0
   16dc4:	mov	r3, lr
   16dc8:	b	16cac <grisu3_diy_fp_encode_double@@Base+0x6cc>
   16dcc:	mov	r7, r1
   16dd0:	ldr	r3, [sp, #8]
   16dd4:	cmp	r7, r1
   16dd8:	add	r3, r6, r3
   16ddc:	mov	r8, r3
   16de0:	beq	16efc <grisu3_diy_fp_encode_double@@Base+0x91c>
   16de4:	ldrb	r3, [r7]
   16de8:	orr	r3, r3, #32
   16dec:	cmp	r3, #101	; 0x65
   16df0:	bne	16efc <grisu3_diy_fp_encode_double@@Base+0x91c>
   16df4:	sub	r3, r1, r7
   16df8:	cmp	r3, #1
   16dfc:	ble	16b20 <grisu3_diy_fp_encode_double@@Base+0x540>
   16e00:	ldrb	r3, [r7, #1]
   16e04:	cmp	r3, #43	; 0x2b
   16e08:	bne	16ec8 <grisu3_diy_fp_encode_double@@Base+0x8e8>
   16e0c:	add	r7, r7, #2
   16e10:	cmp	r1, r7
   16e14:	beq	16b20 <grisu3_diy_fp_encode_double@@Base+0x540>
   16e18:	mov	lr, #0
   16e1c:	ldrb	r6, [r7]
   16e20:	sub	r6, r6, #48	; 0x30
   16e24:	uxtb	r3, r6
   16e28:	cmp	r3, #9
   16e2c:	addls	r0, r7, #1
   16e30:	movls	r9, #10
   16e34:	bhi	16b20 <grisu3_diy_fp_encode_double@@Base+0x540>
   16e38:	cmp	r1, r0
   16e3c:	mov	r7, r0
   16e40:	beq	171dc <grisu3_diy_fp_encode_double@@Base+0xbfc>
   16e44:	ldrb	r2, [r0]
   16e48:	add	r0, r0, #1
   16e4c:	sub	r3, r2, #48	; 0x30
   16e50:	cmp	r3, #9
   16e54:	bls	16ee8 <grisu3_diy_fp_encode_double@@Base+0x908>
   16e58:	cmp	lr, #0
   16e5c:	beq	16e64 <grisu3_diy_fp_encode_double@@Base+0x884>
   16e60:	rsb	r6, r6, #0
   16e64:	cmp	r1, r7
   16e68:	add	r6, r6, r8
   16e6c:	beq	16b20 <grisu3_diy_fp_encode_double@@Base+0x540>
   16e70:	orrs	r3, sl, fp
   16e74:	moveq	r2, #1
   16e78:	movne	r2, #0
   16e7c:	cmn	r6, #324	; 0x144
   16e80:	movge	r3, #0
   16e84:	movlt	r3, #1
   16e88:	orrs	r3, r2, r3
   16e8c:	bne	16ea8 <grisu3_diy_fp_encode_double@@Base+0x8c8>
   16e90:	ldr	r3, [pc, #120]	; 16f10 <grisu3_diy_fp_encode_double@@Base+0x930>
   16e94:	cmp	r6, r3
   16e98:	ble	16f20 <grisu3_diy_fp_encode_double@@Base+0x940>
   16e9c:	ldr	r3, [pc, #112]	; 16f14 <grisu3_diy_fp_encode_double@@Base+0x934>
   16ea0:	mov	r2, #0
   16ea4:	strd	r2, [r5]
   16ea8:	ldr	r3, [sp, #12]
   16eac:	cmp	r3, #0
   16eb0:	vldrne	d7, [r5]
   16eb4:	vnegne.f64	d7, d7
   16eb8:	vstrne	d7, [r5]
   16ebc:	b	171d4 <grisu3_diy_fp_encode_double@@Base+0xbf4>
   16ec0:	mov	r7, r1
   16ec4:	b	16d6c <grisu3_diy_fp_encode_double@@Base+0x78c>
   16ec8:	cmp	r3, #45	; 0x2d
   16ecc:	addne	r7, r7, #1
   16ed0:	bne	16e18 <grisu3_diy_fp_encode_double@@Base+0x838>
   16ed4:	add	r7, r7, #2
   16ed8:	cmp	r1, r7
   16edc:	beq	16b20 <grisu3_diy_fp_encode_double@@Base+0x540>
   16ee0:	mov	lr, #1
   16ee4:	b	16e1c <grisu3_diy_fp_encode_double@@Base+0x83c>
   16ee8:	ldr	r3, [pc, #40]	; 16f18 <grisu3_diy_fp_encode_double@@Base+0x938>
   16eec:	cmp	r6, r3
   16ef0:	mlale	r6, r9, r6, r2
   16ef4:	suble	r6, r6, #48	; 0x30
   16ef8:	b	16e38 <grisu3_diy_fp_encode_double@@Base+0x858>
   16efc:	mov	r6, #0
   16f00:	b	16e64 <grisu3_diy_fp_encode_double@@Base+0x884>
   16f04:	nop			; (mov r0, r0)
   16f08:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   16f0c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   16f10:	andeq	r0, r0, r6, lsr r1
   16f14:	svcvc	0x00f00000	; IMB
   16f18:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   16f1c:			; <UNDEFINED> instruction: 0x001fffff
   16f20:	ldr	r3, [pc, #-12]	; 16f1c <grisu3_diy_fp_encode_double@@Base+0x93c>
   16f24:	mvn	r2, #0
   16f28:	cmp	fp, r3
   16f2c:	cmpeq	sl, r2
   16f30:	movls	r3, #1
   16f34:	movhi	r3, #0
   16f38:	cmp	r6, #22
   16f3c:	movhi	r3, #0
   16f40:	andls	r3, r3, #1
   16f44:	cmp	r3, #0
   16f48:	beq	17194 <grisu3_diy_fp_encode_double@@Base+0xbb4>
   16f4c:	mov	r0, sl
   16f50:	mov	r1, fp
   16f54:	bl	1986c <flatcc_json_parser_table_as_root@@Base+0x58c>
   16f58:	ldr	r3, [sp, #8]
   16f5c:	sub	r6, r6, r3
   16f60:	add	r6, r6, #22
   16f64:	vmov	d7, r0, r1
   16f68:	cmp	r6, #44	; 0x2c
   16f6c:	ldrls	pc, [pc, r6, lsl #2]
   16f70:	b	17030 <grisu3_diy_fp_encode_double@@Base+0xa50>
   16f74:	andeq	r7, r1, r8, lsr #32
   16f78:	andeq	r7, r1, r8, lsr r0
   16f7c:	andeq	r7, r1, r0, asr #32
   16f80:	andeq	r7, r1, r8, asr #32
   16f84:	andeq	r7, r1, r0, asr r0
   16f88:	andeq	r7, r1, r8, asr r0
   16f8c:	andeq	r7, r1, r0, rrx
   16f90:	andeq	r7, r1, r8, rrx
   16f94:	andeq	r7, r1, r0, ror r0
   16f98:	andeq	r7, r1, r8, ror r0
   16f9c:	andeq	r7, r1, r0, lsl #1
   16fa0:	andeq	r7, r1, r8, lsl #1
   16fa4:	muleq	r1, r0, r0
   16fa8:	muleq	r1, r8, r0
   16fac:	andeq	r7, r1, r0, lsr #1
   16fb0:	andeq	r7, r1, r8, lsr #1
   16fb4:	strheq	r7, [r1], -r0
   16fb8:	strheq	r7, [r1], -r8
   16fbc:	andeq	r7, r1, r0, asr #1
   16fc0:	andeq	r7, r1, r8, asr #1
   16fc4:	ldrdeq	r7, [r1], -r0
   16fc8:	ldrdeq	r7, [r1], -r8
   16fcc:	andeq	r7, r1, r0, lsr r0
   16fd0:	andeq	r7, r1, r0, ror #1
   16fd4:	andeq	r7, r1, ip, ror #1
   16fd8:	strdeq	r7, [r1], -r4
   16fdc:	strdeq	r7, [r1], -ip
   16fe0:	andeq	r7, r1, r4, lsl #2
   16fe4:	andeq	r7, r1, ip, lsl #2
   16fe8:	andeq	r7, r1, r4, lsl r1
   16fec:	andeq	r7, r1, ip, lsl r1
   16ff0:	andeq	r7, r1, r4, lsr #2
   16ff4:	andeq	r7, r1, ip, lsr #2
   16ff8:	andeq	r7, r1, r4, lsr r1
   16ffc:	andeq	r7, r1, ip, lsr r1
   17000:	andeq	r7, r1, r4, asr #2
   17004:	andeq	r7, r1, ip, asr #2
   17008:	andeq	r7, r1, r4, asr r1
   1700c:	andeq	r7, r1, ip, asr r1
   17010:	andeq	r7, r1, r4, ror #2
   17014:	andeq	r7, r1, ip, ror #2
   17018:	andeq	r7, r1, r4, ror r1
   1701c:	andeq	r7, r1, ip, ror r1
   17020:	andeq	r7, r1, r4, lsl #3
   17024:	andeq	r7, r1, ip, lsl #3
   17028:	vldr	d6, [pc, #448]	; 171f0 <grisu3_diy_fp_encode_double@@Base+0xc10>
   1702c:	vdiv.f64	d7, d7, d6
   17030:	vstr	d7, [r5]
   17034:	b	16ea8 <grisu3_diy_fp_encode_double@@Base+0x8c8>
   17038:	vldr	d6, [pc, #440]	; 171f8 <grisu3_diy_fp_encode_double@@Base+0xc18>
   1703c:	b	1702c <grisu3_diy_fp_encode_double@@Base+0xa4c>
   17040:	vldr	d6, [pc, #440]	; 17200 <grisu3_diy_fp_encode_double@@Base+0xc20>
   17044:	b	1702c <grisu3_diy_fp_encode_double@@Base+0xa4c>
   17048:	vldr	d6, [pc, #440]	; 17208 <grisu3_diy_fp_encode_double@@Base+0xc28>
   1704c:	b	1702c <grisu3_diy_fp_encode_double@@Base+0xa4c>
   17050:	vldr	d6, [pc, #440]	; 17210 <grisu3_diy_fp_encode_double@@Base+0xc30>
   17054:	b	1702c <grisu3_diy_fp_encode_double@@Base+0xa4c>
   17058:	vldr	d6, [pc, #440]	; 17218 <grisu3_diy_fp_encode_double@@Base+0xc38>
   1705c:	b	1702c <grisu3_diy_fp_encode_double@@Base+0xa4c>
   17060:	vldr	d6, [pc, #440]	; 17220 <grisu3_diy_fp_encode_double@@Base+0xc40>
   17064:	b	1702c <grisu3_diy_fp_encode_double@@Base+0xa4c>
   17068:	vldr	d6, [pc, #440]	; 17228 <grisu3_diy_fp_encode_double@@Base+0xc48>
   1706c:	b	1702c <grisu3_diy_fp_encode_double@@Base+0xa4c>
   17070:	vldr	d6, [pc, #440]	; 17230 <grisu3_diy_fp_encode_double@@Base+0xc50>
   17074:	b	1702c <grisu3_diy_fp_encode_double@@Base+0xa4c>
   17078:	vldr	d6, [pc, #440]	; 17238 <grisu3_diy_fp_encode_double@@Base+0xc58>
   1707c:	b	1702c <grisu3_diy_fp_encode_double@@Base+0xa4c>
   17080:	vldr	d6, [pc, #440]	; 17240 <grisu3_diy_fp_encode_double@@Base+0xc60>
   17084:	b	1702c <grisu3_diy_fp_encode_double@@Base+0xa4c>
   17088:	vldr	d6, [pc, #440]	; 17248 <grisu3_diy_fp_encode_double@@Base+0xc68>
   1708c:	b	1702c <grisu3_diy_fp_encode_double@@Base+0xa4c>
   17090:	vldr	d6, [pc, #440]	; 17250 <grisu3_diy_fp_encode_double@@Base+0xc70>
   17094:	b	1702c <grisu3_diy_fp_encode_double@@Base+0xa4c>
   17098:	vldr	d6, [pc, #440]	; 17258 <grisu3_diy_fp_encode_double@@Base+0xc78>
   1709c:	b	1702c <grisu3_diy_fp_encode_double@@Base+0xa4c>
   170a0:	vldr	d6, [pc, #440]	; 17260 <grisu3_diy_fp_encode_double@@Base+0xc80>
   170a4:	b	1702c <grisu3_diy_fp_encode_double@@Base+0xa4c>
   170a8:	vldr	d6, [pc, #440]	; 17268 <grisu3_diy_fp_encode_double@@Base+0xc88>
   170ac:	b	1702c <grisu3_diy_fp_encode_double@@Base+0xa4c>
   170b0:	vldr	d6, [pc, #440]	; 17270 <grisu3_diy_fp_encode_double@@Base+0xc90>
   170b4:	b	1702c <grisu3_diy_fp_encode_double@@Base+0xa4c>
   170b8:	vldr	d6, [pc, #440]	; 17278 <grisu3_diy_fp_encode_double@@Base+0xc98>
   170bc:	b	1702c <grisu3_diy_fp_encode_double@@Base+0xa4c>
   170c0:	vldr	d6, [pc, #440]	; 17280 <grisu3_diy_fp_encode_double@@Base+0xca0>
   170c4:	b	1702c <grisu3_diy_fp_encode_double@@Base+0xa4c>
   170c8:	vldr	d6, [pc, #440]	; 17288 <grisu3_diy_fp_encode_double@@Base+0xca8>
   170cc:	b	1702c <grisu3_diy_fp_encode_double@@Base+0xa4c>
   170d0:	vldr	d6, [pc, #440]	; 17290 <grisu3_diy_fp_encode_double@@Base+0xcb0>
   170d4:	b	1702c <grisu3_diy_fp_encode_double@@Base+0xa4c>
   170d8:	vldr	d6, [pc, #440]	; 17298 <grisu3_diy_fp_encode_double@@Base+0xcb8>
   170dc:	b	1702c <grisu3_diy_fp_encode_double@@Base+0xa4c>
   170e0:	vldr	d6, [pc, #432]	; 17298 <grisu3_diy_fp_encode_double@@Base+0xcb8>
   170e4:	vmul.f64	d7, d7, d6
   170e8:	b	17030 <grisu3_diy_fp_encode_double@@Base+0xa50>
   170ec:	vldr	d6, [pc, #412]	; 17290 <grisu3_diy_fp_encode_double@@Base+0xcb0>
   170f0:	b	170e4 <grisu3_diy_fp_encode_double@@Base+0xb04>
   170f4:	vldr	d6, [pc, #396]	; 17288 <grisu3_diy_fp_encode_double@@Base+0xca8>
   170f8:	b	170e4 <grisu3_diy_fp_encode_double@@Base+0xb04>
   170fc:	vldr	d6, [pc, #380]	; 17280 <grisu3_diy_fp_encode_double@@Base+0xca0>
   17100:	b	170e4 <grisu3_diy_fp_encode_double@@Base+0xb04>
   17104:	vldr	d6, [pc, #364]	; 17278 <grisu3_diy_fp_encode_double@@Base+0xc98>
   17108:	b	170e4 <grisu3_diy_fp_encode_double@@Base+0xb04>
   1710c:	vldr	d6, [pc, #348]	; 17270 <grisu3_diy_fp_encode_double@@Base+0xc90>
   17110:	b	170e4 <grisu3_diy_fp_encode_double@@Base+0xb04>
   17114:	vldr	d6, [pc, #332]	; 17268 <grisu3_diy_fp_encode_double@@Base+0xc88>
   17118:	b	170e4 <grisu3_diy_fp_encode_double@@Base+0xb04>
   1711c:	vldr	d6, [pc, #316]	; 17260 <grisu3_diy_fp_encode_double@@Base+0xc80>
   17120:	b	170e4 <grisu3_diy_fp_encode_double@@Base+0xb04>
   17124:	vldr	d6, [pc, #300]	; 17258 <grisu3_diy_fp_encode_double@@Base+0xc78>
   17128:	b	170e4 <grisu3_diy_fp_encode_double@@Base+0xb04>
   1712c:	vldr	d6, [pc, #284]	; 17250 <grisu3_diy_fp_encode_double@@Base+0xc70>
   17130:	b	170e4 <grisu3_diy_fp_encode_double@@Base+0xb04>
   17134:	vldr	d6, [pc, #268]	; 17248 <grisu3_diy_fp_encode_double@@Base+0xc68>
   17138:	b	170e4 <grisu3_diy_fp_encode_double@@Base+0xb04>
   1713c:	vldr	d6, [pc, #252]	; 17240 <grisu3_diy_fp_encode_double@@Base+0xc60>
   17140:	b	170e4 <grisu3_diy_fp_encode_double@@Base+0xb04>
   17144:	vldr	d6, [pc, #236]	; 17238 <grisu3_diy_fp_encode_double@@Base+0xc58>
   17148:	b	170e4 <grisu3_diy_fp_encode_double@@Base+0xb04>
   1714c:	vldr	d6, [pc, #220]	; 17230 <grisu3_diy_fp_encode_double@@Base+0xc50>
   17150:	b	170e4 <grisu3_diy_fp_encode_double@@Base+0xb04>
   17154:	vldr	d6, [pc, #204]	; 17228 <grisu3_diy_fp_encode_double@@Base+0xc48>
   17158:	b	170e4 <grisu3_diy_fp_encode_double@@Base+0xb04>
   1715c:	vldr	d6, [pc, #188]	; 17220 <grisu3_diy_fp_encode_double@@Base+0xc40>
   17160:	b	170e4 <grisu3_diy_fp_encode_double@@Base+0xb04>
   17164:	vldr	d6, [pc, #172]	; 17218 <grisu3_diy_fp_encode_double@@Base+0xc38>
   17168:	b	170e4 <grisu3_diy_fp_encode_double@@Base+0xb04>
   1716c:	vldr	d6, [pc, #156]	; 17210 <grisu3_diy_fp_encode_double@@Base+0xc30>
   17170:	b	170e4 <grisu3_diy_fp_encode_double@@Base+0xb04>
   17174:	vldr	d6, [pc, #140]	; 17208 <grisu3_diy_fp_encode_double@@Base+0xc28>
   17178:	b	170e4 <grisu3_diy_fp_encode_double@@Base+0xb04>
   1717c:	vldr	d6, [pc, #124]	; 17200 <grisu3_diy_fp_encode_double@@Base+0xc20>
   17180:	b	170e4 <grisu3_diy_fp_encode_double@@Base+0xb04>
   17184:	vldr	d6, [pc, #108]	; 171f8 <grisu3_diy_fp_encode_double@@Base+0xc18>
   17188:	b	170e4 <grisu3_diy_fp_encode_double@@Base+0xb04>
   1718c:	vldr	d6, [pc, #92]	; 171f0 <grisu3_diy_fp_encode_double@@Base+0xc10>
   17190:	b	170e4 <grisu3_diy_fp_encode_double@@Base+0xb04>
   17194:	str	r5, [sp, #4]
   17198:	str	ip, [sp]
   1719c:	ldr	r3, [sp, #8]
   171a0:	mov	r2, r6
   171a4:	mov	r0, sl
   171a8:	mov	r1, fp
   171ac:	bl	165e0 <grisu3_diy_fp_encode_double@@Base>
   171b0:	cmp	r0, #0
   171b4:	bne	16ea8 <grisu3_diy_fp_encode_double@@Base+0x8c8>
   171b8:	add	r1, sp, #28
   171bc:	mov	r0, r4
   171c0:	bl	124d8 <strtod@plt>
   171c4:	ldr	r3, [sp, #28]
   171c8:	cmp	r7, r3
   171cc:	movcs	r7, r3
   171d0:	vstr	d0, [r5]
   171d4:	mov	r4, r7
   171d8:	b	16b58 <grisu3_diy_fp_encode_double@@Base+0x578>
   171dc:	cmp	lr, #0
   171e0:	bne	16e60 <grisu3_diy_fp_encode_double@@Base+0x880>
   171e4:	mov	r4, lr
   171e8:	b	16b58 <grisu3_diy_fp_encode_double@@Base+0x578>
   171ec:	nop			; (mov r0, r0)
   171f0:			; <UNDEFINED> instruction: 0x064dd592
   171f4:	strmi	pc, [r0], #207	; 0xcf
   171f8:	usatle	lr, #2, r0, asr #30
   171fc:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   17200:	ldmvc	r5!, {r6, sl, fp, pc}
   17204:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   17208:	addsvs	r3, r1, r0, lsl #26
   1720c:	mvnmi	r5, #228, 16	; 0xe40000
   17210:	strbvs	ip, [lr, -r0, lsl #16]
   17214:			; <UNDEFINED> instruction: 0x43abc16d
   17218:	ldrbhi	sl, [r8]
   1721c:	cmnmi	r6, #1459617792	; 0x57000000
   17220:	strbcc	r8, [r0, r0]!
   17224:	movtmi	ip, #4985	; 0x1379
   17228:	ldrtcs	r0, [r4], -r0
   1722c:	movwmi	r6, #52213	; 0xcbf5
   17230:	cdpne	0, 9, cr0, cr0, cr0, {0}
   17234:	sbcsmi	fp, r6, #196, 24	; 0xc400
   17238:	strb	r0, [r0, #-0]
   1723c:	adcmi	r3, r2, #156	; 0x9c
   17240:	andge	r0, r0, #0
   17244:	rsbmi	r1, sp, #148, 20	; 0x94000
   17248:	stmda	r0, {}	; <UNPREDICTABLE>
   1724c:	eorsmi	r4, r7, #7733248	; 0x760000
   17250:	andcs	r0, r0, r0
   17254:	andmi	sl, r2, #95	; 0x5f
   17258:	andeq	r0, r0, r0
   1725c:	bicmi	ip, sp, r5, ror #26
   17260:	andeq	r0, r0, r0
   17264:	orrsmi	sp, r7, r4, lsl #15
   17268:	andeq	r0, r0, r0
   1726c:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   17270:	andeq	r0, r0, r0
   17274:	smlawbmi	lr, r0, r4, r8
   17278:	andeq	r0, r0, r0
   1727c:	rscsmi	r6, r8, r0, lsl #20
   17280:	andeq	r0, r0, r0
   17284:	sbcmi	r8, r3, r0, lsl #16
   17288:	andeq	r0, r0, r0
   1728c:	addmi	r4, pc, r0
   17290:	andeq	r0, r0, r0
   17294:	subsmi	r0, r9, r0
   17298:	andeq	r0, r0, r0
   1729c:	eormi	r0, r4, r0

000172a0 <flatcc_json_parser_error_string@@Base>:
   172a0:	cmp	r0, #34	; 0x22
   172a4:	ldrls	r3, [pc, #12]	; 172b8 <flatcc_json_parser_error_string@@Base+0x18>
   172a8:	addls	r0, r3, r0, lsl #2
   172ac:	ldrls	r0, [r0, #1476]	; 0x5c4
   172b0:	ldrhi	r0, [pc, #4]	; 172bc <flatcc_json_parser_error_string@@Base+0x1c>
   172b4:	bx	lr
   172b8:	andeq	sl, r1, r0, lsr #14
   172bc:	strdeq	fp, [r1], -r9

000172c0 <flatcc_json_parser_set_error@@Base>:
   172c0:	ldr	ip, [r0, #24]
   172c4:	cmp	ip, #0
   172c8:	streq	r3, [r0, #24]
   172cc:	ldreq	r3, [r0, #4]
   172d0:	streq	r1, [r0, #36]	; 0x24
   172d4:	subeq	r3, r1, r3
   172d8:	addeq	r3, r3, #1
   172dc:	streq	r3, [r0, #20]
   172e0:	mov	r0, r2
   172e4:	bx	lr
   172e8:	ldr	r3, [r0, #12]
   172ec:	cmp	r3, #0
   172f0:	beq	1738c <flatcc_json_parser_set_error@@Base+0xcc>
   172f4:	push	{lr}		; (str lr, [sp, #-4]!)
   172f8:	mov	r3, r1
   172fc:	mov	lr, #0
   17300:	cmp	r2, r3
   17304:	mov	r1, r3
   17308:	beq	1731c <flatcc_json_parser_set_error@@Base+0x5c>
   1730c:	ldrb	ip, [r3]
   17310:	add	r3, r3, #1
   17314:	cmp	ip, #32
   17318:	bhi	17330 <flatcc_json_parser_set_error@@Base+0x70>
   1731c:	cmp	lr, #46	; 0x2e
   17320:	bne	173b4 <flatcc_json_parser_set_error@@Base+0xf4>
   17324:	pop	{lr}		; (ldr lr, [sp], #4)
   17328:	mov	r3, #5
   1732c:	b	172c0 <flatcc_json_parser_set_error@@Base>
   17330:	cmp	ip, #46	; 0x2e
   17334:	cmpne	ip, #95	; 0x5f
   17338:	beq	17360 <flatcc_json_parser_set_error@@Base+0xa0>
   1733c:	tst	ip, #128	; 0x80
   17340:	bne	17360 <flatcc_json_parser_set_error@@Base+0xa0>
   17344:	sub	lr, ip, #48	; 0x30
   17348:	cmp	lr, #9
   1734c:	bls	17360 <flatcc_json_parser_set_error@@Base+0xa0>
   17350:	orr	lr, ip, #32
   17354:	sub	lr, lr, #97	; 0x61
   17358:	cmp	lr, #25
   1735c:	bhi	17368 <flatcc_json_parser_set_error@@Base+0xa8>
   17360:	mov	lr, ip
   17364:	b	17300 <flatcc_json_parser_set_error@@Base+0x40>
   17368:	mov	lr, ip
   1736c:	b	1731c <flatcc_json_parser_set_error@@Base+0x5c>
   17370:	cmp	r3, #92	; 0x5c
   17374:	bne	17388 <flatcc_json_parser_set_error@@Base+0xc8>
   17378:	sub	r3, r2, r1
   1737c:	cmp	r3, #1
   17380:	ble	173ac <flatcc_json_parser_set_error@@Base+0xec>
   17384:	add	r1, r1, #1
   17388:	add	r1, r1, #1
   1738c:	cmp	r1, r2
   17390:	beq	173ac <flatcc_json_parser_set_error@@Base+0xec>
   17394:	ldrb	r3, [r1]
   17398:	cmp	r3, #34	; 0x22
   1739c:	bne	17370 <flatcc_json_parser_set_error@@Base+0xb0>
   173a0:	add	r1, r1, #1
   173a4:	mov	r0, r1
   173a8:	bx	lr
   173ac:	mov	r3, #20
   173b0:	b	1732c <flatcc_json_parser_set_error@@Base+0x6c>
   173b4:	mov	r0, r1
   173b8:	pop	{pc}		; (ldr pc, [sp], #4)
   173bc:	cmp	r1, r2
   173c0:	beq	173d0 <flatcc_json_parser_set_error@@Base+0x110>
   173c4:	ldrb	r3, [r1]
   173c8:	cmp	r3, #34	; 0x22
   173cc:	beq	173d8 <flatcc_json_parser_set_error@@Base+0x118>
   173d0:	mov	r3, #16
   173d4:	b	172c0 <flatcc_json_parser_set_error@@Base>
   173d8:	add	r0, r1, #1
   173dc:	bx	lr
   173e0:	cmp	r1, r2
   173e4:	beq	173f4 <flatcc_json_parser_set_error@@Base+0x134>
   173e8:	ldrb	r3, [r1]
   173ec:	cmp	r3, #34	; 0x22
   173f0:	beq	173fc <flatcc_json_parser_set_error@@Base+0x13c>
   173f4:	mov	r3, #20
   173f8:	b	172c0 <flatcc_json_parser_set_error@@Base>
   173fc:	add	r0, r1, #1
   17400:	bx	lr

00017404 <flatcc_json_parser_string_part@@Base>:
   17404:	cmp	r2, r1
   17408:	beq	17474 <flatcc_json_parser_string_part@@Base+0x70>
   1740c:	push	{lr}		; (str lr, [sp, #-4]!)
   17410:	b	1741c <flatcc_json_parser_string_part@@Base+0x18>
   17414:	cmp	r2, r1
   17418:	beq	17468 <flatcc_json_parser_string_part@@Base+0x64>
   1741c:	mov	lr, r1
   17420:	ldrb	r3, [r1], #1
   17424:	cmp	r3, #34	; 0x22
   17428:	cmpne	r3, #31
   1742c:	movhi	ip, #1
   17430:	movls	ip, #0
   17434:	cmp	r3, #92	; 0x5c
   17438:	moveq	ip, #0
   1743c:	andne	ip, ip, #1
   17440:	cmp	ip, #0
   17444:	bne	17414 <flatcc_json_parser_string_part@@Base+0x10>
   17448:	cmp	r3, #31
   1744c:	bls	17458 <flatcc_json_parser_string_part@@Base+0x54>
   17450:	mov	r0, lr
   17454:	pop	{pc}		; (ldr pc, [sp], #4)
   17458:	mov	r3, #17
   1745c:	mov	r1, lr
   17460:	pop	{lr}		; (ldr lr, [sp], #4)
   17464:	b	172c0 <flatcc_json_parser_set_error@@Base>
   17468:	mov	r3, #20
   1746c:	mov	r1, r2
   17470:	b	17460 <flatcc_json_parser_string_part@@Base+0x5c>
   17474:	mov	r3, #20
   17478:	mov	r1, r2
   1747c:	b	17464 <flatcc_json_parser_string_part@@Base+0x60>

00017480 <flatcc_json_parser_space_ext@@Base>:
   17480:	cmp	r1, r2
   17484:	mov	ip, #0
   17488:	mov	r3, r1
   1748c:	bne	1750c <flatcc_json_parser_space_ext@@Base+0x8c>
   17490:	mov	r0, r2
   17494:	bx	lr
   17498:	cmp	r3, #13
   1749c:	beq	174c4 <flatcc_json_parser_space_ext@@Base+0x44>
   174a0:	cmp	r3, #32
   174a4:	bne	17540 <flatcc_json_parser_space_ext@@Base+0xc0>
   174a8:	mov	r3, r1
   174ac:	cmp	r3, r2
   174b0:	mov	r1, r3
   174b4:	bne	17510 <flatcc_json_parser_space_ext@@Base+0x90>
   174b8:	mov	r1, r2
   174bc:	mov	r0, r1
   174c0:	pop	{pc}		; (ldr pc, [sp], #4)
   174c4:	sub	r3, r2, r1
   174c8:	cmp	r3, #1
   174cc:	movle	r3, ip
   174d0:	ldrbgt	r3, [r1, #1]
   174d4:	subgt	r3, r3, #10
   174d8:	clzgt	r3, r3
   174dc:	lsrgt	r3, r3, #5
   174e0:	add	r1, r1, r3
   174e4:	ldr	r3, [r0, #16]
   174e8:	add	r1, r1, #1
   174ec:	add	r3, r3, #1
   174f0:	str	r3, [r0, #16]
   174f4:	str	r1, [r0, #4]
   174f8:	cmp	r2, r1
   174fc:	bne	17520 <flatcc_json_parser_space_ext@@Base+0xa0>
   17500:	b	174b8 <flatcc_json_parser_space_ext@@Base+0x38>
   17504:	add	r1, r1, #1
   17508:	b	174f8 <flatcc_json_parser_space_ext@@Base+0x78>
   1750c:	push	{lr}		; (str lr, [sp, #-4]!)
   17510:	add	r3, r3, #1
   17514:	ldrb	lr, [r1]
   17518:	cmp	lr, #32
   1751c:	beq	174ac <flatcc_json_parser_space_ext@@Base+0x2c>
   17520:	ldrb	r3, [r1]
   17524:	cmp	r3, #32
   17528:	bhi	174bc <flatcc_json_parser_space_ext@@Base+0x3c>
   1752c:	cmp	r3, #10
   17530:	beq	174e4 <flatcc_json_parser_space_ext@@Base+0x64>
   17534:	bhi	17498 <flatcc_json_parser_space_ext@@Base+0x18>
   17538:	cmp	r3, #9
   1753c:	beq	17504 <flatcc_json_parser_space_ext@@Base+0x84>
   17540:	mov	r3, #5
   17544:	pop	{lr}		; (ldr lr, [sp], #4)
   17548:	b	172c0 <flatcc_json_parser_set_error@@Base>
   1754c:	sub	r3, r2, r1
   17550:	cmp	r3, #1
   17554:	ble	17578 <flatcc_json_parser_space_ext@@Base+0xf8>
   17558:	ldrb	r3, [r1]
   1755c:	cmp	r3, #32
   17560:	bhi	1757c <flatcc_json_parser_space_ext@@Base+0xfc>
   17564:	bne	17578 <flatcc_json_parser_space_ext@@Base+0xf8>
   17568:	ldrb	r3, [r1, #1]
   1756c:	cmp	r3, #32
   17570:	addhi	r1, r1, #1
   17574:	bhi	1757c <flatcc_json_parser_space_ext@@Base+0xfc>
   17578:	b	17480 <flatcc_json_parser_space_ext@@Base>
   1757c:	mov	r0, r1
   17580:	bx	lr
   17584:	push	{r4, r5, r6, lr}
   17588:	mov	r5, r3
   1758c:	mov	r6, r0
   17590:	bl	1754c <flatcc_json_parser_space_ext@@Base+0xcc>
   17594:	cmp	r2, r0
   17598:	moveq	r3, #0
   1759c:	beq	17628 <flatcc_json_parser_space_ext@@Base+0x1a8>
   175a0:	ldrb	r3, [r0]
   175a4:	mov	r4, r2
   175a8:	cmp	r3, #44	; 0x2c
   175ac:	beq	175e0 <flatcc_json_parser_space_ext@@Base+0x160>
   175b0:	mov	r3, #0
   175b4:	str	r3, [r5]
   175b8:	ldrb	r3, [r0]
   175bc:	cmp	r3, #93	; 0x5d
   175c0:	movne	r3, #9
   175c4:	movne	r1, r0
   175c8:	bne	17604 <flatcc_json_parser_space_ext@@Base+0x184>
   175cc:	mov	r2, r4
   175d0:	add	r1, r0, #1
   175d4:	mov	r0, r6
   175d8:	pop	{r4, r5, r6, lr}
   175dc:	b	1754c <flatcc_json_parser_space_ext@@Base+0xcc>
   175e0:	add	r1, r0, #1
   175e4:	mov	r0, r6
   175e8:	bl	1754c <flatcc_json_parser_space_ext@@Base+0xcc>
   175ec:	cmp	r2, r0
   175f0:	bne	17610 <flatcc_json_parser_space_ext@@Base+0x190>
   175f4:	mov	r3, #0
   175f8:	str	r3, [r5]
   175fc:	mov	r1, r2
   17600:	mov	r3, #9
   17604:	mov	r0, r6
   17608:	pop	{r4, r5, r6, lr}
   1760c:	b	172c0 <flatcc_json_parser_set_error@@Base>
   17610:	ldrb	r3, [r0]
   17614:	cmp	r3, #93	; 0x5d
   17618:	movne	r3, #1
   1761c:	moveq	r3, #0
   17620:	streq	r3, [r5]
   17624:	beq	175cc <flatcc_json_parser_space_ext@@Base+0x14c>
   17628:	str	r3, [r5]
   1762c:	pop	{r4, r5, r6, pc}
   17630:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17634:	sub	sp, sp, #28
   17638:	mov	fp, r3
   1763c:	ldr	r3, [sp, #64]	; 0x40
   17640:	mov	ip, #0
   17644:	cmp	r1, r2
   17648:	mov	r6, r0
   1764c:	mov	r5, r1
   17650:	mov	r4, r2
   17654:	strb	ip, [r3]
   17658:	beq	1768c <flatcc_json_parser_space_ext@@Base+0x20c>
   1765c:	ldrb	r3, [r1]
   17660:	cmp	r3, #34	; 0x22
   17664:	addeq	r5, r1, #1
   17668:	streq	ip, [r0, #12]
   1766c:	beq	1768c <flatcc_json_parser_space_ext@@Base+0x20c>
   17670:	cmp	r3, #46	; 0x2e
   17674:	movne	r3, #1
   17678:	strne	r3, [r0, #12]
   1767c:	bne	1768c <flatcc_json_parser_space_ext@@Base+0x20c>
   17680:	mov	r3, #5
   17684:	bl	172c0 <flatcc_json_parser_set_error@@Base>
   17688:	mov	r5, r0
   1768c:	ldr	r3, [r6, #12]
   17690:	cmp	r3, #0
   17694:	bne	176ac <flatcc_json_parser_space_ext@@Base+0x22c>
   17698:	mov	r1, r5
   1769c:	mov	r2, r4
   176a0:	mov	r0, r6
   176a4:	bl	1754c <flatcc_json_parser_space_ext@@Base+0xcc>
   176a8:	mov	r5, r0
   176ac:	cmp	r4, r5
   176b0:	movne	r8, #0
   176b4:	movne	sl, r8
   176b8:	bne	176cc <flatcc_json_parser_space_ext@@Base+0x24c>
   176bc:	mov	r0, r4
   176c0:	add	sp, sp, #28
   176c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176c8:	mov	r5, r7
   176cc:	mov	r9, fp
   176d0:	add	r3, sp, #12
   176d4:	str	r3, [sp, #4]
   176d8:	add	r3, sp, #16
   176dc:	str	r3, [sp]
   176e0:	mov	r2, r4
   176e4:	ldr	r7, [r9]
   176e8:	add	r3, sp, #8
   176ec:	mov	r1, r5
   176f0:	mov	r0, r6
   176f4:	blx	r7
   176f8:	cmp	r4, r0
   176fc:	mov	r7, r0
   17700:	beq	176bc <flatcc_json_parser_space_ext@@Base+0x23c>
   17704:	cmp	r5, r0
   17708:	bne	17750 <flatcc_json_parser_space_ext@@Base+0x2d0>
   1770c:	ldr	r3, [r9, #4]!
   17710:	cmp	r3, #0
   17714:	bne	176d0 <flatcc_json_parser_space_ext@@Base+0x250>
   17718:	mov	r3, #23
   1771c:	mov	r2, r4
   17720:	mov	r1, r5
   17724:	b	17740 <flatcc_json_parser_space_ext@@Base+0x2c0>
   17728:	ldr	r3, [r6, #12]
   1772c:	cmp	r3, #0
   17730:	beq	17758 <flatcc_json_parser_space_ext@@Base+0x2d8>
   17734:	mov	r3, #14
   17738:	mov	r2, r4
   1773c:	mov	r1, r7
   17740:	mov	r0, r6
   17744:	bl	172c0 <flatcc_json_parser_set_error@@Base>
   17748:	mov	r4, r0
   1774c:	b	176bc <flatcc_json_parser_space_ext@@Base+0x23c>
   17750:	cmp	r8, #0
   17754:	bne	17728 <flatcc_json_parser_space_ext@@Base+0x2a8>
   17758:	ldr	r3, [sp, #8]
   1775c:	cmp	r3, #0
   17760:	movne	r3, #8
   17764:	bne	17780 <flatcc_json_parser_space_ext@@Base+0x300>
   17768:	ldrd	r2, [sp, #16]
   1776c:	cmp	r3, #0
   17770:	cmpeq	r2, #255	; 0xff
   17774:	uxtbls	sl, r2
   17778:	bls	17798 <flatcc_json_parser_space_ext@@Base+0x318>
   1777c:	mov	r3, #7
   17780:	mov	r2, r4
   17784:	mov	r1, r7
   17788:	mov	r0, r6
   1778c:	bl	172c0 <flatcc_json_parser_set_error@@Base>
   17790:	cmp	r4, r0
   17794:	beq	176bc <flatcc_json_parser_space_ext@@Base+0x23c>
   17798:	ldr	r3, [sp, #64]	; 0x40
   1779c:	ldr	r2, [sp, #64]	; 0x40
   177a0:	add	r8, r8, #1
   177a4:	ldrb	r3, [r3]
   177a8:	add	r3, sl, r3
   177ac:	strb	r3, [r2]
   177b0:	ldr	r3, [sp, #12]
   177b4:	cmp	r3, #0
   177b8:	bne	176c8 <flatcc_json_parser_space_ext@@Base+0x248>
   177bc:	mov	r4, r7
   177c0:	b	176bc <flatcc_json_parser_space_ext@@Base+0x23c>
   177c4:	cmp	r1, r2
   177c8:	push	{r4, r5, r6, lr}
   177cc:	mov	ip, r2
   177d0:	mov	r6, r0
   177d4:	beq	177e4 <flatcc_json_parser_space_ext@@Base+0x364>
   177d8:	ldrb	r4, [r1]
   177dc:	cmp	r4, #91	; 0x5b
   177e0:	beq	17800 <flatcc_json_parser_space_ext@@Base+0x380>
   177e4:	mov	r2, #0
   177e8:	str	r2, [r3]
   177ec:	mov	r0, r6
   177f0:	mov	r3, #22
   177f4:	mov	r2, ip
   177f8:	pop	{r4, r5, r6, lr}
   177fc:	b	172c0 <flatcc_json_parser_set_error@@Base>
   17800:	add	r1, r1, #1
   17804:	mov	r5, r3
   17808:	mov	r4, r2
   1780c:	bl	1754c <flatcc_json_parser_space_ext@@Base+0xcc>
   17810:	cmp	r2, r0
   17814:	beq	1783c <flatcc_json_parser_space_ext@@Base+0x3bc>
   17818:	ldrb	r3, [r0]
   1781c:	cmp	r3, #93	; 0x5d
   17820:	bne	1783c <flatcc_json_parser_space_ext@@Base+0x3bc>
   17824:	mov	r3, #0
   17828:	str	r3, [r5]
   1782c:	add	r1, r0, #1
   17830:	mov	r0, r6
   17834:	pop	{r4, r5, r6, lr}
   17838:	b	1754c <flatcc_json_parser_space_ext@@Base+0xcc>
   1783c:	mov	r3, #1
   17840:	str	r3, [r5]
   17844:	pop	{r4, r5, r6, pc}
   17848:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1784c:	sub	sp, sp, #20
   17850:	mov	r5, r0
   17854:	mov	r8, r3
   17858:	ldr	r0, [r0]
   1785c:	mov	r3, #0
   17860:	mov	r6, r1
   17864:	mov	r4, r2
   17868:	ldr	r9, [sp, #56]	; 0x38
   1786c:	str	r3, [sp, #8]
   17870:	bl	148c4 <flatcc_builder_start_offset_vector@@Base>
   17874:	subs	r7, r0, #0
   17878:	bne	178f4 <flatcc_json_parser_space_ext@@Base+0x474>
   1787c:	mov	r1, r6
   17880:	add	r3, sp, #12
   17884:	mov	r2, r4
   17888:	mov	r0, r5
   1788c:	bl	177c4 <flatcc_json_parser_space_ext@@Base+0x344>
   17890:	add	sl, sp, #8
   17894:	mov	fp, #1
   17898:	mov	r6, r0
   1789c:	ldr	r3, [sp, #12]
   178a0:	cmp	r3, #0
   178a4:	bne	178fc <flatcc_json_parser_space_ext@@Base+0x47c>
   178a8:	cmp	r7, r9
   178ac:	bne	17904 <flatcc_json_parser_space_ext@@Base+0x484>
   178b0:	mov	r1, r8
   178b4:	ldr	r0, [r5]
   178b8:	bl	13de4 <flatcc_builder_get_user_frame_ptr@@Base>
   178bc:	mov	r1, r0
   178c0:	ldr	r0, [r5]
   178c4:	bl	15338 <flatcc_builder_end_offset_vector_for_unions@@Base>
   178c8:	cmp	r0, #0
   178cc:	str	r0, [sp, #8]
   178d0:	beq	178f4 <flatcc_json_parser_space_ext@@Base+0x474>
   178d4:	ldrh	r1, [sp, #60]	; 0x3c
   178d8:	ldr	r0, [r5]
   178dc:	bl	15afc <flatcc_builder_table_add_offset@@Base>
   178e0:	cmp	r0, #0
   178e4:	movne	r4, r6
   178e8:	ldrne	r3, [sp, #8]
   178ec:	strne	r3, [r0]
   178f0:	bne	1791c <flatcc_json_parser_space_ext@@Base+0x49c>
   178f4:	mov	r3, #33	; 0x21
   178f8:	b	17908 <flatcc_json_parser_space_ext@@Base+0x488>
   178fc:	cmp	r7, r9
   17900:	bne	17928 <flatcc_json_parser_space_ext@@Base+0x4a8>
   17904:	mov	r3, #30
   17908:	mov	r2, r4
   1790c:	mov	r1, r6
   17910:	mov	r0, r5
   17914:	bl	172c0 <flatcc_json_parser_set_error@@Base>
   17918:	mov	r4, r0
   1791c:	mov	r0, r4
   17920:	add	sp, sp, #20
   17924:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17928:	mov	r1, r8
   1792c:	ldr	r0, [r5]
   17930:	bl	13de4 <flatcc_builder_get_user_frame_ptr@@Base>
   17934:	mov	r1, r6
   17938:	mov	r2, r4
   1793c:	ldr	ip, [sp, #64]	; 0x40
   17940:	ldrb	r3, [r0, r7]
   17944:	str	sl, [sp]
   17948:	mov	r0, r5
   1794c:	blx	ip
   17950:	cmp	r4, r0
   17954:	mov	r6, r0
   17958:	beq	1791c <flatcc_json_parser_space_ext@@Base+0x49c>
   1795c:	mov	r1, fp
   17960:	ldr	r0, [r5]
   17964:	bl	144c0 <flatcc_builder_extend_offset_vector@@Base>
   17968:	cmp	r0, #0
   1796c:	beq	178f4 <flatcc_json_parser_space_ext@@Base+0x474>
   17970:	ldr	r3, [sp, #8]
   17974:	mov	r1, r6
   17978:	str	r3, [r0]
   1797c:	mov	r2, r4
   17980:	add	r3, sp, #12
   17984:	mov	r0, r5
   17988:	bl	17584 <flatcc_json_parser_space_ext@@Base+0x104>
   1798c:	add	r7, r7, #1
   17990:	mov	r6, r0
   17994:	b	1789c <flatcc_json_parser_space_ext@@Base+0x41c>

00017998 <flatcc_json_parser_string_escape@@Base>:
   17998:	push	{r4, r5, lr}
   1799c:	sub	lr, r2, r1
   179a0:	cmp	lr, #1
   179a4:	ble	179b4 <flatcc_json_parser_string_escape@@Base+0x1c>
   179a8:	ldrb	ip, [r1]
   179ac:	cmp	ip, #92	; 0x5c
   179b0:	beq	179c8 <flatcc_json_parser_string_escape@@Base+0x30>
   179b4:	mov	ip, #0
   179b8:	strb	ip, [r3]
   179bc:	mov	r3, #18
   179c0:	pop	{r4, r5, lr}
   179c4:	b	172c0 <flatcc_json_parser_set_error@@Base>
   179c8:	ldrb	ip, [r1, #1]
   179cc:	cmp	ip, #102	; 0x66
   179d0:	beq	17c6c <flatcc_json_parser_string_escape@@Base+0x2d4>
   179d4:	bhi	17a24 <flatcc_json_parser_string_escape@@Base+0x8c>
   179d8:	cmp	ip, #47	; 0x2f
   179dc:	beq	179ec <flatcc_json_parser_string_escape@@Base+0x54>
   179e0:	bhi	179fc <flatcc_json_parser_string_escape@@Base+0x64>
   179e4:	cmp	ip, #34	; 0x22
   179e8:	bne	179b4 <flatcc_json_parser_string_escape@@Base+0x1c>
   179ec:	mov	r2, #1
   179f0:	strb	r2, [r3]
   179f4:	strb	ip, [r3, #1]
   179f8:	b	17a1c <flatcc_json_parser_string_escape@@Base+0x84>
   179fc:	cmp	ip, #92	; 0x5c
   17a00:	beq	179ec <flatcc_json_parser_string_escape@@Base+0x54>
   17a04:	cmp	ip, #98	; 0x62
   17a08:	moveq	r2, #1
   17a0c:	strbeq	r2, [r3]
   17a10:	moveq	r2, #8
   17a14:	bne	179b4 <flatcc_json_parser_string_escape@@Base+0x1c>
   17a18:	strb	r2, [r3, #1]
   17a1c:	add	r0, r1, #2
   17a20:	pop	{r4, r5, pc}
   17a24:	cmp	ip, #116	; 0x74
   17a28:	beq	17c4c <flatcc_json_parser_string_escape@@Base+0x2b4>
   17a2c:	bhi	17a50 <flatcc_json_parser_string_escape@@Base+0xb8>
   17a30:	cmp	ip, #110	; 0x6e
   17a34:	beq	17c5c <flatcc_json_parser_string_escape@@Base+0x2c4>
   17a38:	cmp	ip, #114	; 0x72
   17a3c:	moveq	r2, #1
   17a40:	strbeq	r2, [r3]
   17a44:	moveq	r2, #13
   17a48:	beq	17a18 <flatcc_json_parser_string_escape@@Base+0x80>
   17a4c:	b	179b4 <flatcc_json_parser_string_escape@@Base+0x1c>
   17a50:	cmp	ip, #117	; 0x75
   17a54:	beq	17ae4 <flatcc_json_parser_string_escape@@Base+0x14c>
   17a58:	cmp	ip, #120	; 0x78
   17a5c:	bne	179b4 <flatcc_json_parser_string_escape@@Base+0x1c>
   17a60:	mov	ip, #1
   17a64:	cmp	lr, #3
   17a68:	strb	ip, [r3]
   17a6c:	ble	179b4 <flatcc_json_parser_string_escape@@Base+0x1c>
   17a70:	ldrb	ip, [r1, #2]
   17a74:	sub	lr, ip, #48	; 0x30
   17a78:	uxtb	r4, lr
   17a7c:	cmp	r4, #9
   17a80:	lslls	ip, lr, #4
   17a84:	bls	17aa0 <flatcc_json_parser_string_escape@@Base+0x108>
   17a88:	orr	ip, ip, #32
   17a8c:	sub	lr, ip, #97	; 0x61
   17a90:	cmp	lr, #5
   17a94:	bhi	179b4 <flatcc_json_parser_string_escape@@Base+0x1c>
   17a98:	sub	ip, ip, #87	; 0x57
   17a9c:	lsl	ip, ip, #4
   17aa0:	ldrb	lr, [r1, #3]
   17aa4:	uxtb	ip, ip
   17aa8:	sub	r4, lr, #48	; 0x30
   17aac:	uxtb	r4, r4
   17ab0:	cmp	r4, #9
   17ab4:	orrls	ip, r4, ip
   17ab8:	bls	17ad8 <flatcc_json_parser_string_escape@@Base+0x140>
   17abc:	orr	lr, lr, #32
   17ac0:	sub	r4, lr, #97	; 0x61
   17ac4:	cmp	r4, #5
   17ac8:	bhi	179b4 <flatcc_json_parser_string_escape@@Base+0x1c>
   17acc:	sub	lr, lr, #87	; 0x57
   17ad0:	orr	ip, lr, ip
   17ad4:	uxtb	ip, ip
   17ad8:	strb	ip, [r3, #1]
   17adc:	add	r0, r1, #4
   17ae0:	pop	{r4, r5, pc}
   17ae4:	cmp	lr, #5
   17ae8:	ble	179b4 <flatcc_json_parser_string_escape@@Base+0x1c>
   17aec:	ldrb	ip, [r1, #2]
   17af0:	sub	lr, ip, #48	; 0x30
   17af4:	uxtb	r4, lr
   17af8:	cmp	r4, #9
   17afc:	lslls	ip, lr, #12
   17b00:	uxthls	ip, ip
   17b04:	bls	17b24 <flatcc_json_parser_string_escape@@Base+0x18c>
   17b08:	orr	ip, ip, #32
   17b0c:	sub	lr, ip, #97	; 0x61
   17b10:	cmp	lr, #5
   17b14:	bhi	179b4 <flatcc_json_parser_string_escape@@Base+0x1c>
   17b18:	sub	ip, ip, #87	; 0x57
   17b1c:	lsl	ip, ip, #12
   17b20:	and	ip, ip, #61440	; 0xf000
   17b24:	ldrb	lr, [r1, #3]
   17b28:	sub	r4, lr, #48	; 0x30
   17b2c:	uxtb	r5, r4
   17b30:	cmp	r5, #9
   17b34:	uxthls	r4, r4
   17b38:	orrls	ip, ip, r4, lsl #8
   17b3c:	bls	17b5c <flatcc_json_parser_string_escape@@Base+0x1c4>
   17b40:	orr	lr, lr, #32
   17b44:	sub	r4, lr, #97	; 0x61
   17b48:	cmp	r4, #5
   17b4c:	bhi	179b4 <flatcc_json_parser_string_escape@@Base+0x1c>
   17b50:	sub	lr, lr, #87	; 0x57
   17b54:	uxth	lr, lr
   17b58:	orr	ip, ip, lr, lsl #8
   17b5c:	ldrb	lr, [r1, #4]
   17b60:	and	ip, ip, #65280	; 0xff00
   17b64:	sub	r4, lr, #48	; 0x30
   17b68:	uxtb	r5, r4
   17b6c:	cmp	r5, #9
   17b70:	uxthls	r4, r4
   17b74:	orrls	ip, ip, r4, lsl #4
   17b78:	bls	17b98 <flatcc_json_parser_string_escape@@Base+0x200>
   17b7c:	orr	lr, lr, #32
   17b80:	sub	r4, lr, #97	; 0x61
   17b84:	cmp	r4, #5
   17b88:	bhi	179b4 <flatcc_json_parser_string_escape@@Base+0x1c>
   17b8c:	sub	lr, lr, #87	; 0x57
   17b90:	uxth	lr, lr
   17b94:	orr	ip, ip, lr, lsl #4
   17b98:	ldrb	lr, [r1, #5]
   17b9c:	uxth	ip, ip
   17ba0:	sub	r4, lr, #48	; 0x30
   17ba4:	uxtb	r5, r4
   17ba8:	cmp	r5, #9
   17bac:	orrls	r2, ip, r4
   17bb0:	bls	17bcc <flatcc_json_parser_string_escape@@Base+0x234>
   17bb4:	orr	lr, lr, #32
   17bb8:	sub	r4, lr, #97	; 0x61
   17bbc:	cmp	r4, #5
   17bc0:	bhi	179b4 <flatcc_json_parser_string_escape@@Base+0x1c>
   17bc4:	sub	r2, lr, #87	; 0x57
   17bc8:	orr	r2, ip, r2
   17bcc:	uxth	r2, r2
   17bd0:	cmp	r2, #127	; 0x7f
   17bd4:	movls	r0, #1
   17bd8:	strbls	r0, [r3]
   17bdc:	strbls	r2, [r3, #1]
   17be0:	bls	17c14 <flatcc_json_parser_string_escape@@Base+0x27c>
   17be4:	cmp	r2, #2048	; 0x800
   17be8:	lsr	r0, r2, #6
   17bec:	and	ip, r2, #63	; 0x3f
   17bf0:	bcs	17c1c <flatcc_json_parser_string_escape@@Base+0x284>
   17bf4:	mov	r2, #2
   17bf8:	strb	r2, [r3]
   17bfc:	mvn	r2, r0, lsl #26
   17c00:	mvn	r2, r2, lsr #26
   17c04:	strb	r2, [r3, #1]
   17c08:	mvn	r2, ip, lsl #25
   17c0c:	mvn	r2, r2, lsr #25
   17c10:	strb	r2, [r3, #2]
   17c14:	add	r0, r1, #6
   17c18:	pop	{r4, r5, pc}
   17c1c:	mov	lr, #3
   17c20:	strb	lr, [r3]
   17c24:	mvn	lr, #31
   17c28:	orr	r2, lr, r2, lsr #12
   17c2c:	strb	r2, [r3, #1]
   17c30:	and	r2, r0, #63	; 0x3f
   17c34:	mvn	r0, #127	; 0x7f
   17c38:	orr	r2, r2, r0
   17c3c:	strb	r2, [r3, #2]
   17c40:	orr	r2, ip, r0
   17c44:	strb	r2, [r3, #3]
   17c48:	b	17c14 <flatcc_json_parser_string_escape@@Base+0x27c>
   17c4c:	mov	r2, #1
   17c50:	strb	r2, [r3]
   17c54:	mov	r2, #9
   17c58:	b	17a18 <flatcc_json_parser_string_escape@@Base+0x80>
   17c5c:	mov	r2, #1
   17c60:	strb	r2, [r3]
   17c64:	mov	r2, #10
   17c68:	b	17a18 <flatcc_json_parser_string_escape@@Base+0x80>
   17c6c:	mov	r2, #1
   17c70:	strb	r2, [r3]
   17c74:	mov	r2, #12
   17c78:	b	17a18 <flatcc_json_parser_string_escape@@Base+0x80>

00017c7c <flatcc_json_parser_skip_constant@@Base>:
   17c7c:	push	{r4, r5, r6, lr}
   17c80:	mov	r6, r0
   17c84:	mov	r5, r2
   17c88:	mov	r4, r1
   17c8c:	cmp	r4, r5
   17c90:	beq	17cf0 <flatcc_json_parser_skip_constant@@Base+0x74>
   17c94:	ldrb	r3, [r4]
   17c98:	sub	r2, r3, #95	; 0x5f
   17c9c:	clz	r2, r2
   17ca0:	lsr	r2, r2, #5
   17ca4:	orrs	r2, r2, r3, lsr #7
   17ca8:	bne	17cbc <flatcc_json_parser_skip_constant@@Base+0x40>
   17cac:	sub	r2, r3, #48	; 0x30
   17cb0:	cmp	r3, #46	; 0x2e
   17cb4:	cmpne	r2, #9
   17cb8:	bhi	17cc8 <flatcc_json_parser_skip_constant@@Base+0x4c>
   17cbc:	add	r0, r4, #1
   17cc0:	mov	r4, r0
   17cc4:	b	17c8c <flatcc_json_parser_skip_constant@@Base+0x10>
   17cc8:	orr	r3, r3, #32
   17ccc:	sub	r3, r3, #97	; 0x61
   17cd0:	cmp	r3, #25
   17cd4:	bls	17cbc <flatcc_json_parser_skip_constant@@Base+0x40>
   17cd8:	mov	r2, r5
   17cdc:	mov	r1, r4
   17ce0:	mov	r0, r6
   17ce4:	bl	1754c <flatcc_json_parser_space_ext@@Base+0xcc>
   17ce8:	cmp	r4, r0
   17cec:	bne	17cc0 <flatcc_json_parser_skip_constant@@Base+0x44>
   17cf0:	mov	r0, r4
   17cf4:	pop	{r4, r5, r6, pc}

00017cf8 <flatcc_json_parser_match_constant@@Base>:
   17cf8:	push	{r4, r5, r6, r7, r8, lr}
   17cfc:	sub	lr, r2, r1
   17d00:	cmp	r3, lr
   17d04:	ldr	r4, [sp, #24]
   17d08:	blt	17d1c <flatcc_json_parser_match_constant@@Base+0x24>
   17d0c:	mov	r3, #0
   17d10:	str	r3, [r4]
   17d14:	mov	r0, r1
   17d18:	pop	{r4, r5, r6, r7, r8, pc}
   17d1c:	mov	r6, r1
   17d20:	add	r5, r1, r3
   17d24:	ldr	r1, [r0, #12]
   17d28:	mov	ip, r0
   17d2c:	cmp	r1, #0
   17d30:	mov	r7, r2
   17d34:	beq	17db4 <flatcc_json_parser_match_constant@@Base+0xbc>
   17d38:	mov	r1, r5
   17d3c:	bl	1754c <flatcc_json_parser_space_ext@@Base+0xcc>
   17d40:	cmp	r2, r0
   17d44:	bne	17d58 <flatcc_json_parser_match_constant@@Base+0x60>
   17d48:	mov	r3, #0
   17d4c:	str	r3, [r4]
   17d50:	mov	r0, r7
   17d54:	pop	{r4, r5, r6, r7, r8, pc}
   17d58:	cmp	r5, r0
   17d5c:	beq	17d94 <flatcc_json_parser_match_constant@@Base+0x9c>
   17d60:	ldrb	r3, [r0]
   17d64:	sub	r2, r3, #95	; 0x5f
   17d68:	clz	r2, r2
   17d6c:	lsr	r2, r2, #5
   17d70:	orrs	r2, r2, r3, lsr #7
   17d74:	beq	17d84 <flatcc_json_parser_match_constant@@Base+0x8c>
   17d78:	mov	r3, #1
   17d7c:	str	r3, [r4]
   17d80:	pop	{r4, r5, r6, r7, r8, pc}
   17d84:	orr	r3, r3, #32
   17d88:	sub	r3, r3, #97	; 0x61
   17d8c:	cmp	r3, #25
   17d90:	bls	17d78 <flatcc_json_parser_match_constant@@Base+0x80>
   17d94:	mov	r3, #0
   17d98:	str	r3, [r4]
   17d9c:	ldrb	r3, [r0]
   17da0:	and	r2, r3, #223	; 0xdf
   17da4:	cmp	r3, #44	; 0x2c
   17da8:	cmpne	r2, #93	; 0x5d
   17dac:	movne	r0, r6
   17db0:	pop	{r4, r5, r6, r7, r8, pc}
   17db4:	ldrb	r3, [r6, r3]
   17db8:	cmp	r3, #32
   17dbc:	bne	17de4 <flatcc_json_parser_match_constant@@Base+0xec>
   17dc0:	add	r3, r5, #1
   17dc4:	cmp	r3, r7
   17dc8:	mov	r5, r3
   17dcc:	beq	17d48 <flatcc_json_parser_match_constant@@Base+0x50>
   17dd0:	ldrb	r2, [r3], #1
   17dd4:	cmp	r2, #32
   17dd8:	beq	17dc4 <flatcc_json_parser_match_constant@@Base+0xcc>
   17ddc:	cmp	r2, #34	; 0x22
   17de0:	bne	17e18 <flatcc_json_parser_match_constant@@Base+0x120>
   17de4:	ldrb	r3, [r5]
   17de8:	cmp	r3, #34	; 0x22
   17dec:	beq	17e28 <flatcc_json_parser_match_constant@@Base+0x130>
   17df0:	cmp	r3, #92	; 0x5c
   17df4:	mov	r3, #0
   17df8:	str	r3, [r4]
   17dfc:	bne	17e40 <flatcc_json_parser_match_constant@@Base+0x148>
   17e00:	mov	r2, r7
   17e04:	mov	r1, r5
   17e08:	mov	r3, #18
   17e0c:	mov	r0, ip
   17e10:	pop	{r4, r5, r6, r7, r8, lr}
   17e14:	b	172c0 <flatcc_json_parser_set_error@@Base>
   17e18:	mov	r3, #1
   17e1c:	str	r3, [r4]
   17e20:	mov	r0, r5
   17e24:	pop	{r4, r5, r6, r7, r8, pc}
   17e28:	mov	r2, #0
   17e2c:	add	r1, r5, #1
   17e30:	mov	r0, ip
   17e34:	bl	1754c <flatcc_json_parser_space_ext@@Base+0xcc>
   17e38:	mov	r3, #0
   17e3c:	b	17d7c <flatcc_json_parser_match_constant@@Base+0x84>
   17e40:	mov	r0, r6
   17e44:	pop	{r4, r5, r6, r7, r8, pc}

00017e48 <flatcc_json_parser_double@@Base>:
   17e48:	push	{r4, r5, r6, r7, r8, lr}
   17e4c:	mov	r4, #0
   17e50:	mov	r5, #0
   17e54:	cmp	r1, r2
   17e58:	strd	r4, [r3]
   17e5c:	beq	17f04 <flatcc_json_parser_double@@Base+0xbc>
   17e60:	ldrb	ip, [r1]
   17e64:	cmp	ip, #45	; 0x2d
   17e68:	addeq	ip, r1, #1
   17e6c:	movne	ip, r1
   17e70:	sub	lr, r2, ip
   17e74:	cmp	lr, #1
   17e78:	ble	17ea8 <flatcc_json_parser_double@@Base+0x60>
   17e7c:	ldrb	lr, [ip]
   17e80:	cmp	lr, #46	; 0x2e
   17e84:	beq	17e9c <flatcc_json_parser_double@@Base+0x54>
   17e88:	cmp	lr, #48	; 0x30
   17e8c:	bne	17ea8 <flatcc_json_parser_double@@Base+0x60>
   17e90:	ldrb	ip, [ip, #1]
   17e94:	cmp	ip, #48	; 0x30
   17e98:	bne	17ea8 <flatcc_json_parser_double@@Base+0x60>
   17e9c:	mov	r3, #6
   17ea0:	pop	{r4, r5, r6, r7, r8, lr}
   17ea4:	b	172c0 <flatcc_json_parser_set_error@@Base>
   17ea8:	mov	r6, r1
   17eac:	mov	r4, r2
   17eb0:	sub	r1, r4, r1
   17eb4:	mov	r5, r0
   17eb8:	mov	r2, r3
   17ebc:	mov	r0, r6
   17ec0:	mov	r7, r3
   17ec4:	bl	16ac4 <grisu3_diy_fp_encode_double@@Base+0x4e4>
   17ec8:	cmp	r6, r0
   17ecc:	cmpne	r0, #0
   17ed0:	mov	r1, r0
   17ed4:	bne	17f04 <flatcc_json_parser_double@@Base+0xbc>
   17ed8:	vldr	d7, [r7]
   17edc:	vldr	d6, [pc, #44]	; 17f10 <flatcc_json_parser_double@@Base+0xc8>
   17ee0:	mov	r2, r4
   17ee4:	mov	r1, r6
   17ee8:	vabs.f64	d7, d7
   17eec:	mov	r0, r5
   17ef0:	vcmp.f64	d7, d6
   17ef4:	vmrs	APSR_nzcv, fpscr
   17ef8:	movgt	r3, #7
   17efc:	movle	r3, #6
   17f00:	b	17ea0 <flatcc_json_parser_double@@Base+0x58>
   17f04:	mov	r0, r1
   17f08:	pop	{r4, r5, r6, r7, r8, pc}
   17f0c:	nop			; (mov r0, r0)
   17f10:			; <UNDEFINED> instruction: 0xffffffff
   17f14:	svcvc	0x00efffff

00017f18 <flatcc_json_parser_float@@Base>:
   17f18:	mov	ip, #0
   17f1c:	cmp	r1, r2
   17f20:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17f24:	moveq	r0, r1
   17f28:	str	ip, [r3]
   17f2c:	beq	17f90 <flatcc_json_parser_float@@Base+0x78>
   17f30:	ldrb	ip, [r1]
   17f34:	mov	r7, r3
   17f38:	mov	r4, r2
   17f3c:	cmp	ip, #45	; 0x2d
   17f40:	addeq	ip, r1, #1
   17f44:	movne	ip, r1
   17f48:	sub	r3, r2, ip
   17f4c:	cmp	r3, #1
   17f50:	mov	r5, r1
   17f54:	mov	r6, r0
   17f58:	ble	17f98 <flatcc_json_parser_float@@Base+0x80>
   17f5c:	ldrb	r2, [ip]
   17f60:	cmp	r2, #46	; 0x2e
   17f64:	beq	17f7c <flatcc_json_parser_float@@Base+0x64>
   17f68:	cmp	r2, #48	; 0x30
   17f6c:	bne	17f98 <flatcc_json_parser_float@@Base+0x80>
   17f70:	ldrb	r3, [ip, #1]
   17f74:	cmp	r3, #48	; 0x30
   17f78:	bne	17f98 <flatcc_json_parser_float@@Base+0x80>
   17f7c:	mov	r3, #6
   17f80:	mov	r2, r4
   17f84:	mov	r1, r5
   17f88:	mov	r0, r6
   17f8c:	bl	172c0 <flatcc_json_parser_set_error@@Base>
   17f90:	add	sp, sp, #12
   17f94:	pop	{r4, r5, r6, r7, pc}
   17f98:	mov	r2, sp
   17f9c:	sub	r1, r4, r5
   17fa0:	mov	r0, r5
   17fa4:	bl	16ac4 <grisu3_diy_fp_encode_double@@Base+0x4e4>
   17fa8:	vldr	d6, [sp]
   17fac:	vldr	s15, [pc, #92]	; 18010 <flatcc_json_parser_float@@Base+0xf8>
   17fb0:	vcvt.f32.f64	s14, d6
   17fb4:	vabs.f32	s11, s14
   17fb8:	vcmp.f32	s11, s15
   17fbc:	vmrs	APSR_nzcv, fpscr
   17fc0:	bgt	17ff0 <flatcc_json_parser_float@@Base+0xd8>
   17fc4:	vstr	s14, [r7]
   17fc8:	cmp	r5, r0
   17fcc:	cmpne	r0, #0
   17fd0:	bne	17f90 <flatcc_json_parser_float@@Base+0x78>
   17fd4:	vldr	s14, [r7]
   17fd8:	vabs.f32	s14, s14
   17fdc:	vcmp.f32	s14, s15
   17fe0:	vmrs	APSR_nzcv, fpscr
   17fe4:	ble	17f7c <flatcc_json_parser_float@@Base+0x64>
   17fe8:	mov	r3, #7
   17fec:	b	17f80 <flatcc_json_parser_float@@Base+0x68>
   17ff0:	vcmpe.f64	d6, #0.0
   17ff4:	vldr	s14, [pc, #24]	; 18014 <flatcc_json_parser_float@@Base+0xfc>
   17ff8:	vldr	s13, [pc, #24]	; 18018 <flatcc_json_parser_float@@Base+0x100>
   17ffc:	mov	r0, r5
   18000:	vmrs	APSR_nzcv, fpscr
   18004:	vmovpl.f32	s14, s13
   18008:	vstr	s14, [r7]
   1800c:	b	17fc8 <flatcc_json_parser_float@@Base+0xb0>
   18010:	svcvc	0x007fffff
   18014:			; <UNDEFINED> instruction: 0xff800000
   18018:	svcvc	0x00800000

0001801c <flatcc_json_parser_generic_json@@Base>:
   1801c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18020:	sub	sp, sp, #524	; 0x20c
   18024:	add	r7, sp, #8
   18028:	mov	r5, r0
   1802c:	mov	r6, r1
   18030:	mov	r4, r2
   18034:	mov	sl, r7
   18038:	mov	fp, #1
   1803c:	mov	r9, #0
   18040:	str	r9, [sp, #4]
   18044:	cmp	r6, r4
   18048:	bne	18064 <flatcc_json_parser_generic_json@@Base+0x48>
   1804c:	mov	r0, r4
   18050:	add	sp, sp, #524	; 0x20c
   18054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18058:	mov	r7, r8
   1805c:	mov	r6, r0
   18060:	b	18044 <flatcc_json_parser_generic_json@@Base+0x28>
   18064:	cmp	r7, sl
   18068:	beq	18120 <flatcc_json_parser_generic_json@@Base+0x104>
   1806c:	ldrb	r3, [r7, #-1]
   18070:	cmp	r3, #125	; 0x7d
   18074:	bne	18120 <flatcc_json_parser_generic_json@@Base+0x104>
   18078:	ldrb	r3, [r6]
   1807c:	cmp	r3, #34	; 0x22
   18080:	addeq	r6, r6, #1
   18084:	streq	r9, [r5, #12]
   18088:	beq	180b0 <flatcc_json_parser_generic_json@@Base+0x94>
   1808c:	cmp	r3, #46	; 0x2e
   18090:	strne	fp, [r5, #12]
   18094:	bne	180b0 <flatcc_json_parser_generic_json@@Base+0x94>
   18098:	mov	r1, r6
   1809c:	mov	r3, #5
   180a0:	mov	r2, r4
   180a4:	mov	r0, r5
   180a8:	bl	172c0 <flatcc_json_parser_set_error@@Base>
   180ac:	mov	r6, r0
   180b0:	mov	r2, r4
   180b4:	mov	r1, r6
   180b8:	mov	r0, r5
   180bc:	bl	172e8 <flatcc_json_parser_set_error@@Base+0x28>
   180c0:	mov	r2, r4
   180c4:	mov	r1, r0
   180c8:	mov	r0, r5
   180cc:	bl	1754c <flatcc_json_parser_space_ext@@Base+0xcc>
   180d0:	cmp	r4, r0
   180d4:	mov	r1, r0
   180d8:	bne	180ec <flatcc_json_parser_generic_json@@Base+0xd0>
   180dc:	mov	r3, #10
   180e0:	mov	r2, r4
   180e4:	mov	r1, r2
   180e8:	b	18100 <flatcc_json_parser_generic_json@@Base+0xe4>
   180ec:	ldrb	r3, [r0]
   180f0:	cmp	r3, #58	; 0x3a
   180f4:	beq	1810c <flatcc_json_parser_generic_json@@Base+0xf0>
   180f8:	mov	r3, #4
   180fc:	mov	r2, r4
   18100:	mov	r0, r5
   18104:	bl	172c0 <flatcc_json_parser_set_error@@Base>
   18108:	b	18050 <flatcc_json_parser_generic_json@@Base+0x34>
   1810c:	add	r1, r0, #1
   18110:	mov	r2, r4
   18114:	mov	r0, r5
   18118:	bl	1754c <flatcc_json_parser_space_ext@@Base+0xcc>
   1811c:	mov	r6, r0
   18120:	ldrb	r3, [r6]
   18124:	cmp	r3, #57	; 0x39
   18128:	bhi	1816c <flatcc_json_parser_generic_json@@Base+0x150>
   1812c:	cmp	r3, #48	; 0x30
   18130:	bcs	1822c <flatcc_json_parser_generic_json@@Base+0x210>
   18134:	cmp	r3, #34	; 0x22
   18138:	beq	181b8 <flatcc_json_parser_generic_json@@Base+0x19c>
   1813c:	cmp	r3, #45	; 0x2d
   18140:	beq	1822c <flatcc_json_parser_generic_json@@Base+0x210>
   18144:	mov	r2, r4
   18148:	mov	r1, r6
   1814c:	mov	r0, r5
   18150:	bl	17c7c <flatcc_json_parser_skip_constant@@Base>
   18154:	cmp	r6, r0
   18158:	bne	181ec <flatcc_json_parser_generic_json@@Base+0x1d0>
   1815c:	mov	r3, #5
   18160:	mov	r2, r4
   18164:	mov	r1, r0
   18168:	b	18100 <flatcc_json_parser_generic_json@@Base+0xe4>
   1816c:	cmp	r3, #91	; 0x5b
   18170:	beq	183dc <flatcc_json_parser_generic_json@@Base+0x3c0>
   18174:	cmp	r3, #123	; 0x7b
   18178:	bne	18144 <flatcc_json_parser_generic_json@@Base+0x128>
   1817c:	add	r3, sp, #520	; 0x208
   18180:	cmp	r7, r3
   18184:	beq	183e8 <flatcc_json_parser_generic_json@@Base+0x3cc>
   18188:	mov	r3, #125	; 0x7d
   1818c:	strb	r3, [r7]
   18190:	mov	r2, r4
   18194:	add	r1, r6, #1
   18198:	mov	r0, r5
   1819c:	bl	1754c <flatcc_json_parser_space_ext@@Base+0xcc>
   181a0:	add	r8, r7, #1
   181a4:	cmp	r4, r0
   181a8:	beq	18058 <flatcc_json_parser_generic_json@@Base+0x3c>
   181ac:	ldrb	r3, [r0]
   181b0:	cmp	r3, #125	; 0x7d
   181b4:	b	18424 <flatcc_json_parser_generic_json@@Base+0x408>
   181b8:	mov	r2, r4
   181bc:	mov	r1, r6
   181c0:	mov	r0, r5
   181c4:	bl	173bc <flatcc_json_parser_set_error@@Base+0xfc>
   181c8:	cmp	r0, r4
   181cc:	mov	r1, r0
   181d0:	beq	181e0 <flatcc_json_parser_generic_json@@Base+0x1c4>
   181d4:	ldrb	r3, [r0]
   181d8:	cmp	r3, #34	; 0x22
   181dc:	bne	181f4 <flatcc_json_parser_generic_json@@Base+0x1d8>
   181e0:	mov	r2, r4
   181e4:	mov	r0, r5
   181e8:	bl	173e0 <flatcc_json_parser_set_error@@Base+0x120>
   181ec:	mov	r8, r7
   181f0:	b	18464 <flatcc_json_parser_generic_json@@Base+0x448>
   181f4:	mov	r2, r4
   181f8:	mov	r0, r5
   181fc:	bl	17404 <flatcc_json_parser_string_part@@Base>
   18200:	cmp	r4, r0
   18204:	mov	r1, r0
   18208:	beq	18218 <flatcc_json_parser_generic_json@@Base+0x1fc>
   1820c:	ldrb	r3, [r0]
   18210:	cmp	r3, #34	; 0x22
   18214:	beq	181e0 <flatcc_json_parser_generic_json@@Base+0x1c4>
   18218:	mov	r3, sp
   1821c:	mov	r2, r4
   18220:	mov	r0, r5
   18224:	bl	17998 <flatcc_json_parser_string_escape@@Base>
   18228:	b	181c8 <flatcc_json_parser_generic_json@@Base+0x1ac>
   1822c:	cmp	r6, r4
   18230:	moveq	r0, r4
   18234:	beq	181ec <flatcc_json_parser_generic_json@@Base+0x1d0>
   18238:	cmp	r3, #45	; 0x2d
   1823c:	bne	18264 <flatcc_json_parser_generic_json@@Base+0x248>
   18240:	add	r6, r6, #1
   18244:	cmp	r4, r6
   18248:	bne	18264 <flatcc_json_parser_generic_json@@Base+0x248>
   1824c:	mov	r3, #6
   18250:	mov	r2, r4
   18254:	mov	r1, r4
   18258:	mov	r0, r5
   1825c:	bl	172c0 <flatcc_json_parser_set_error@@Base>
   18260:	b	181ec <flatcc_json_parser_generic_json@@Base+0x1d0>
   18264:	ldrb	r3, [r6]
   18268:	cmp	r3, #48	; 0x30
   1826c:	bne	1828c <flatcc_json_parser_generic_json@@Base+0x270>
   18270:	add	r0, r6, #1
   18274:	cmp	r4, r0
   18278:	bne	182c8 <flatcc_json_parser_generic_json@@Base+0x2ac>
   1827c:	mov	r3, #6
   18280:	mov	r2, r4
   18284:	mov	r1, r0
   18288:	b	18258 <flatcc_json_parser_generic_json@@Base+0x23c>
   1828c:	sub	r3, r3, #49	; 0x31
   18290:	cmp	r3, #8
   18294:	movhi	r3, #6
   18298:	movhi	r2, r4
   1829c:	movhi	r1, r6
   182a0:	bhi	18258 <flatcc_json_parser_generic_json@@Base+0x23c>
   182a4:	add	r6, r6, #1
   182a8:	cmp	r4, r6
   182ac:	mov	r0, r6
   182b0:	beq	1827c <flatcc_json_parser_generic_json@@Base+0x260>
   182b4:	ldrb	r3, [r0]
   182b8:	add	r6, r6, #1
   182bc:	sub	r3, r3, #48	; 0x30
   182c0:	cmp	r3, #9
   182c4:	bls	182a8 <flatcc_json_parser_generic_json@@Base+0x28c>
   182c8:	ldrb	r3, [r0]
   182cc:	cmp	r3, #46	; 0x2e
   182d0:	bne	18314 <flatcc_json_parser_generic_json@@Base+0x2f8>
   182d4:	ldrb	r3, [r0, #1]
   182d8:	sub	r3, r3, #48	; 0x30
   182dc:	cmp	r3, #9
   182e0:	movhi	r3, #6
   182e4:	movhi	r2, r4
   182e8:	addhi	r1, r0, #1
   182ec:	bhi	18258 <flatcc_json_parser_generic_json@@Base+0x23c>
   182f0:	add	r3, r0, #2
   182f4:	cmp	r3, r4
   182f8:	mov	r0, r3
   182fc:	beq	1827c <flatcc_json_parser_generic_json@@Base+0x260>
   18300:	ldrb	r2, [r0]
   18304:	add	r3, r3, #1
   18308:	sub	r2, r2, #48	; 0x30
   1830c:	cmp	r2, #9
   18310:	bls	182f4 <flatcc_json_parser_generic_json@@Base+0x2d8>
   18314:	ldrb	r3, [r0]
   18318:	and	r3, r3, #223	; 0xdf
   1831c:	cmp	r3, #69	; 0x45
   18320:	bne	1838c <flatcc_json_parser_generic_json@@Base+0x370>
   18324:	add	r1, r0, #1
   18328:	cmp	r4, r1
   1832c:	beq	1824c <flatcc_json_parser_generic_json@@Base+0x230>
   18330:	ldrb	r3, [r0, #1]
   18334:	sub	r3, r3, #43	; 0x2b
   18338:	tst	r3, #253	; 0xfd
   1833c:	bne	1834c <flatcc_json_parser_generic_json@@Base+0x330>
   18340:	add	r1, r0, #2
   18344:	cmp	r4, r1
   18348:	beq	18360 <flatcc_json_parser_generic_json@@Base+0x344>
   1834c:	ldrb	r3, [r1]
   18350:	sub	r3, r3, #48	; 0x30
   18354:	cmp	r3, #9
   18358:	addls	r1, r1, #1
   1835c:	bls	1836c <flatcc_json_parser_generic_json@@Base+0x350>
   18360:	mov	r3, #6
   18364:	mov	r2, r4
   18368:	b	18258 <flatcc_json_parser_generic_json@@Base+0x23c>
   1836c:	cmp	r4, r1
   18370:	mov	r0, r1
   18374:	beq	1827c <flatcc_json_parser_generic_json@@Base+0x260>
   18378:	ldrb	r3, [r0]
   1837c:	add	r1, r1, #1
   18380:	sub	r3, r3, #48	; 0x30
   18384:	cmp	r3, #9
   18388:	bls	1836c <flatcc_json_parser_generic_json@@Base+0x350>
   1838c:	ldrb	r3, [r0]
   18390:	cmp	r3, #32
   18394:	beq	181ec <flatcc_json_parser_generic_json@@Base+0x1d0>
   18398:	bhi	183b8 <flatcc_json_parser_generic_json@@Base+0x39c>
   1839c:	cmp	r3, #9
   183a0:	bcc	1827c <flatcc_json_parser_generic_json@@Base+0x260>
   183a4:	cmp	r3, #11
   183a8:	bls	181ec <flatcc_json_parser_generic_json@@Base+0x1d0>
   183ac:	cmp	r3, #13
   183b0:	bne	1827c <flatcc_json_parser_generic_json@@Base+0x260>
   183b4:	b	181ec <flatcc_json_parser_generic_json@@Base+0x1d0>
   183b8:	cmp	r3, #58	; 0x3a
   183bc:	beq	181ec <flatcc_json_parser_generic_json@@Base+0x1d0>
   183c0:	bhi	183cc <flatcc_json_parser_generic_json@@Base+0x3b0>
   183c4:	cmp	r3, #44	; 0x2c
   183c8:	b	183b0 <flatcc_json_parser_generic_json@@Base+0x394>
   183cc:	cmp	r3, #93	; 0x5d
   183d0:	beq	181ec <flatcc_json_parser_generic_json@@Base+0x1d0>
   183d4:	cmp	r3, #125	; 0x7d
   183d8:	b	183b0 <flatcc_json_parser_generic_json@@Base+0x394>
   183dc:	add	r3, sp, #520	; 0x208
   183e0:	cmp	r7, r3
   183e4:	bne	183f8 <flatcc_json_parser_generic_json@@Base+0x3dc>
   183e8:	mov	r3, #2
   183ec:	mov	r2, r4
   183f0:	mov	r1, r6
   183f4:	b	18100 <flatcc_json_parser_generic_json@@Base+0xe4>
   183f8:	mov	r3, #93	; 0x5d
   183fc:	strb	r3, [r7]
   18400:	mov	r2, r4
   18404:	add	r1, r6, #1
   18408:	mov	r0, r5
   1840c:	bl	1754c <flatcc_json_parser_space_ext@@Base+0xcc>
   18410:	add	r8, r7, #1
   18414:	cmp	r4, r0
   18418:	beq	18058 <flatcc_json_parser_generic_json@@Base+0x3c>
   1841c:	ldrb	r3, [r0]
   18420:	cmp	r3, #93	; 0x5d
   18424:	bne	18058 <flatcc_json_parser_generic_json@@Base+0x3c>
   18428:	mov	r7, r8
   1842c:	b	181ec <flatcc_json_parser_generic_json@@Base+0x1d0>
   18430:	ldrb	r3, [r8, #-1]
   18434:	sub	r6, r8, #1
   18438:	cmp	r3, #93	; 0x5d
   1843c:	bne	18478 <flatcc_json_parser_generic_json@@Base+0x45c>
   18440:	mov	r1, r0
   18444:	add	r3, sp, #4
   18448:	mov	r2, r4
   1844c:	mov	r0, r5
   18450:	bl	17584 <flatcc_json_parser_space_ext@@Base+0x104>
   18454:	ldr	r3, [sp, #4]
   18458:	cmp	r3, #0
   1845c:	bne	18058 <flatcc_json_parser_generic_json@@Base+0x3c>
   18460:	mov	r8, r6
   18464:	cmp	r0, r4
   18468:	beq	1851c <flatcc_json_parser_generic_json@@Base+0x500>
   1846c:	cmp	r8, sl
   18470:	bne	18430 <flatcc_json_parser_generic_json@@Base+0x414>
   18474:	b	18050 <flatcc_json_parser_generic_json@@Base+0x34>
   18478:	mov	r1, r0
   1847c:	mov	r2, r4
   18480:	mov	r0, r5
   18484:	bl	1754c <flatcc_json_parser_space_ext@@Base+0xcc>
   18488:	cmp	r4, r0
   1848c:	streq	r9, [sp, #4]
   18490:	beq	18454 <flatcc_json_parser_generic_json@@Base+0x438>
   18494:	ldrb	r3, [r0]
   18498:	cmp	r3, #44	; 0x2c
   1849c:	beq	184d0 <flatcc_json_parser_generic_json@@Base+0x4b4>
   184a0:	str	r9, [sp, #4]
   184a4:	ldrb	r3, [r0]
   184a8:	cmp	r3, #125	; 0x7d
   184ac:	movne	r3, #10
   184b0:	movne	r2, r4
   184b4:	movne	r1, r0
   184b8:	bne	184f8 <flatcc_json_parser_generic_json@@Base+0x4dc>
   184bc:	add	r1, r0, #1
   184c0:	mov	r2, r4
   184c4:	mov	r0, r5
   184c8:	bl	1754c <flatcc_json_parser_space_ext@@Base+0xcc>
   184cc:	b	18454 <flatcc_json_parser_generic_json@@Base+0x438>
   184d0:	add	r1, r0, #1
   184d4:	mov	r2, r4
   184d8:	mov	r0, r5
   184dc:	bl	1754c <flatcc_json_parser_space_ext@@Base+0xcc>
   184e0:	cmp	r4, r0
   184e4:	bne	18504 <flatcc_json_parser_generic_json@@Base+0x4e8>
   184e8:	mov	r3, #10
   184ec:	mov	r2, r4
   184f0:	mov	r1, r4
   184f4:	str	r9, [sp, #4]
   184f8:	mov	r0, r5
   184fc:	bl	172c0 <flatcc_json_parser_set_error@@Base>
   18500:	b	18454 <flatcc_json_parser_generic_json@@Base+0x438>
   18504:	ldrb	r3, [r0]
   18508:	cmp	r3, #125	; 0x7d
   1850c:	strne	fp, [sp, #4]
   18510:	bne	18454 <flatcc_json_parser_generic_json@@Base+0x438>
   18514:	str	r9, [sp, #4]
   18518:	b	184bc <flatcc_json_parser_generic_json@@Base+0x4a0>
   1851c:	cmp	r8, sl
   18520:	beq	1804c <flatcc_json_parser_generic_json@@Base+0x30>
   18524:	ldrb	r3, [r8, #-1]
   18528:	mov	r2, r0
   1852c:	cmp	r3, #93	; 0x5d
   18530:	moveq	r3, #9
   18534:	movne	r3, #10
   18538:	b	180e4 <flatcc_json_parser_generic_json@@Base+0xc8>

0001853c <flatcc_json_parser_unmatched_symbol@@Base>:
   1853c:	ldr	r3, [r0, #8]
   18540:	tst	r3, #1
   18544:	beq	185ac <flatcc_json_parser_unmatched_symbol@@Base+0x70>
   18548:	push	{r4, r5, r6, lr}
   1854c:	mov	r4, r0
   18550:	mov	r5, r2
   18554:	bl	172e8 <flatcc_json_parser_set_error@@Base+0x28>
   18558:	mov	r1, r0
   1855c:	mov	r0, r4
   18560:	bl	1754c <flatcc_json_parser_space_ext@@Base+0xcc>
   18564:	cmp	r2, r0
   18568:	mov	r1, r0
   1856c:	beq	18598 <flatcc_json_parser_unmatched_symbol@@Base+0x5c>
   18570:	ldrb	r3, [r0]
   18574:	cmp	r3, #58	; 0x3a
   18578:	bne	18598 <flatcc_json_parser_unmatched_symbol@@Base+0x5c>
   1857c:	add	r1, r0, #1
   18580:	mov	r0, r4
   18584:	bl	1754c <flatcc_json_parser_space_ext@@Base+0xcc>
   18588:	mov	r1, r0
   1858c:	mov	r0, r4
   18590:	pop	{r4, r5, r6, lr}
   18594:	b	1801c <flatcc_json_parser_generic_json@@Base>
   18598:	mov	r2, r5
   1859c:	mov	r0, r4
   185a0:	pop	{r4, r5, r6, lr}
   185a4:	mov	r3, #4
   185a8:	b	172c0 <flatcc_json_parser_set_error@@Base>
   185ac:	mov	r3, #13
   185b0:	b	185a8 <flatcc_json_parser_unmatched_symbol@@Base+0x6c>

000185b4 <flatcc_json_parser_integer@@Base>:
   185b4:	push	{r4, r5, r6, r7, r8, r9, lr}
   185b8:	cmp	r1, r2
   185bc:	ldr	r9, [sp, #28]
   185c0:	beq	1866c <flatcc_json_parser_integer@@Base+0xb8>
   185c4:	mov	ip, r1
   185c8:	ldrb	r1, [r1]
   185cc:	mov	r6, #0
   185d0:	mov	r7, #0
   185d4:	sub	r1, r1, #45	; 0x2d
   185d8:	clz	r1, r1
   185dc:	lsr	r1, r1, #5
   185e0:	str	r1, [r3]
   185e4:	mov	r8, #10
   185e8:	add	r3, ip, r1
   185ec:	cmp	r3, r2
   185f0:	mov	r1, r3
   185f4:	beq	18664 <flatcc_json_parser_integer@@Base+0xb0>
   185f8:	ldrb	lr, [r3], #1
   185fc:	sub	r4, lr, #48	; 0x30
   18600:	cmp	r4, #9
   18604:	bls	18628 <flatcc_json_parser_integer@@Base+0x74>
   18608:	cmp	r1, ip
   1860c:	beq	18674 <flatcc_json_parser_integer@@Base+0xc0>
   18610:	and	r3, lr, #223	; 0xdf
   18614:	cmp	lr, #46	; 0x2e
   18618:	cmpne	r3, #69	; 0x45
   1861c:	bne	18664 <flatcc_json_parser_integer@@Base+0xb0>
   18620:	mov	r3, #12
   18624:	b	18650 <flatcc_json_parser_integer@@Base+0x9c>
   18628:	umull	r4, r5, r6, r8
   1862c:	mla	r5, r8, r7, r5
   18630:	subs	r4, r4, #48	; 0x30
   18634:	sbc	r5, r5, #0
   18638:	adds	r4, r4, lr
   1863c:	adc	r5, r5, #0
   18640:	cmp	r7, r5
   18644:	cmpeq	r6, r4
   18648:	bls	18658 <flatcc_json_parser_integer@@Base+0xa4>
   1864c:	mov	r3, #8
   18650:	pop	{r4, r5, r6, r7, r8, r9, lr}
   18654:	b	172c0 <flatcc_json_parser_set_error@@Base>
   18658:	mov	r6, r4
   1865c:	mov	r7, r5
   18660:	b	185ec <flatcc_json_parser_integer@@Base+0x38>
   18664:	mov	r2, r1
   18668:	strd	r6, [r9]
   1866c:	mov	r0, r2
   18670:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18674:	mov	r2, ip
   18678:	b	1866c <flatcc_json_parser_integer@@Base+0xb8>
   1867c:	push	{r4, r5, r6, r7, lr}
   18680:	mov	r6, #0
   18684:	sub	sp, sp, #28
   18688:	mov	r7, #0
   1868c:	mov	lr, #0
   18690:	cmp	r1, r2
   18694:	strd	r6, [sp, #16]
   18698:	str	lr, [sp, #12]
   1869c:	strb	lr, [r3]
   186a0:	moveq	r0, r1
   186a4:	beq	18708 <flatcc_json_parser_integer@@Base+0x154>
   186a8:	mov	r6, r3
   186ac:	add	r3, sp, #16
   186b0:	str	r3, [sp]
   186b4:	add	r3, sp, #12
   186b8:	mov	r7, r1
   186bc:	mov	r5, r0
   186c0:	mov	r4, r2
   186c4:	bl	185b4 <flatcc_json_parser_integer@@Base>
   186c8:	cmp	r7, r0
   186cc:	beq	18708 <flatcc_json_parser_integer@@Base+0x154>
   186d0:	ldr	r3, [sp, #12]
   186d4:	cmp	r3, #0
   186d8:	movne	r3, #8
   186dc:	bne	186f8 <flatcc_json_parser_integer@@Base+0x144>
   186e0:	ldrd	r2, [sp, #16]
   186e4:	cmp	r3, #0
   186e8:	cmpeq	r2, #255	; 0xff
   186ec:	strbls	r2, [r6]
   186f0:	bls	18708 <flatcc_json_parser_integer@@Base+0x154>
   186f4:	mov	r3, #7
   186f8:	mov	r1, r0
   186fc:	mov	r2, r4
   18700:	mov	r0, r5
   18704:	bl	172c0 <flatcc_json_parser_set_error@@Base>
   18708:	add	sp, sp, #28
   1870c:	pop	{r4, r5, r6, r7, pc}

00018710 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   18710:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18714:	sub	sp, sp, #36	; 0x24
   18718:	mov	r7, r0
   1871c:	str	r3, [sp, #8]
   18720:	ldr	r3, [sp, #72]	; 0x48
   18724:	mov	sl, r2
   18728:	adds	fp, r3, #0
   1872c:	movne	fp, #1
   18730:	str	r3, [sp, #20]
   18734:	bl	173bc <flatcc_json_parser_set_error@@Base+0xfc>
   18738:	mov	r1, r0
   1873c:	mov	r9, r0
   18740:	mov	r0, r7
   18744:	bl	17404 <flatcc_json_parser_string_part@@Base>
   18748:	cmp	r2, r0
   1874c:	mov	r6, r0
   18750:	beq	188d4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c4>
   18754:	ldrb	r3, [r0]
   18758:	cmp	r3, #34	; 0x22
   1875c:	bne	188d4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c4>
   18760:	sub	r8, r0, r9
   18764:	and	r3, r8, #3
   18768:	lsr	r5, r8, #2
   1876c:	cmp	r3, #2
   18770:	add	r5, r5, r5, lsl #1
   18774:	addeq	r5, r5, #1
   18778:	beq	18784 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x74>
   1877c:	cmp	r3, #3
   18780:	addeq	r5, r5, #2
   18784:	mov	r2, #1
   18788:	mvn	r3, #0
   1878c:	mov	r1, r2
   18790:	ldr	r0, [r7]
   18794:	bl	1486c <flatcc_builder_start_vector@@Base>
   18798:	subs	r4, r0, #0
   1879c:	bne	18a0c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   187a0:	mov	r1, r5
   187a4:	ldr	r0, [r7]
   187a8:	bl	14394 <flatcc_builder_extend_vector@@Base>
   187ac:	subs	r3, r0, #0
   187b0:	str	r3, [sp, #12]
   187b4:	beq	18a0c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   187b8:	ldr	r3, [pc, #628]	; 18a34 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x324>
   187bc:	cmp	fp, #0
   187c0:	add	r2, r3, #256	; 0x100
   187c4:	moveq	r3, r2
   187c8:	cmp	r5, #0
   187cc:	movne	fp, r5
   187d0:	mvneq	fp, #0
   187d4:	mov	ip, r8
   187d8:	mov	r1, r0
   187dc:	str	r3, [sp, #16]
   187e0:	str	r9, [sp, #4]
   187e4:	mov	r2, ip
   187e8:	mov	r3, #0
   187ec:	cmp	r3, r2
   187f0:	bne	1881c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x10c>
   187f4:	mov	lr, #0
   187f8:	cmp	r2, #2
   187fc:	beq	18950 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x240>
   18800:	cmp	r2, #3
   18804:	beq	18978 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x268>
   18808:	cmp	r2, #0
   1880c:	movne	r4, #4
   18810:	bne	188bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   18814:	sub	lr, r8, lr
   18818:	b	188c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   1881c:	ldr	r0, [sp, #4]
   18820:	ldrb	lr, [r0, r3]
   18824:	ldr	r0, [sp, #16]
   18828:	ldrb	lr, [r0, lr]
   1882c:	add	r0, sp, #32
   18830:	add	r0, r0, r3
   18834:	cmp	lr, #63	; 0x3f
   18838:	strb	lr, [r0, #-4]
   1883c:	bls	1885c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   18840:	cmp	lr, #65	; 0x41
   18844:	bne	188f4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e4>
   18848:	ldr	r0, [sp, #4]
   1884c:	sub	r2, r2, #1
   18850:	sub	r3, r3, #1
   18854:	add	r0, r0, #1
   18858:	str	r0, [sp, #4]
   1885c:	add	r3, r3, #1
   18860:	cmp	r3, #3
   18864:	bls	187ec <flatcc_json_parser_build_uint8_vector_base64@@Base+0xdc>
   18868:	cmp	fp, #2
   1886c:	bls	18940 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
   18870:	ldrb	lr, [sp, #29]
   18874:	ldrb	r3, [sp, #28]
   18878:	subs	fp, fp, #3
   1887c:	add	r1, r1, #3
   18880:	lsr	ip, lr, #4
   18884:	orr	ip, ip, r3, lsl #2
   18888:	strb	ip, [r1, #-3]
   1888c:	ldrb	ip, [sp, #30]
   18890:	lsr	r3, ip, #2
   18894:	orr	r3, r3, lr, lsl #4
   18898:	strb	r3, [r1, #-2]
   1889c:	ldrb	r3, [sp, #31]
   188a0:	orr	ip, r3, ip, lsl #6
   188a4:	ldr	r3, [sp, #4]
   188a8:	strb	ip, [r1, #-1]
   188ac:	add	r3, r3, #4
   188b0:	str	r3, [sp, #4]
   188b4:	sub	ip, r2, #4
   188b8:	bne	187e4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd4>
   188bc:	cmp	r4, #0
   188c0:	sub	lr, r8, ip
   188c4:	bne	188d0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c0>
   188c8:	cmp	r8, lr
   188cc:	beq	189b8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2a8>
   188d0:	add	r6, r9, lr
   188d4:	ldr	r2, [sp, #8]
   188d8:	mov	r3, #0
   188dc:	str	r3, [r2]
   188e0:	ldr	r3, [sp, #20]
   188e4:	cmp	r3, #0
   188e8:	movne	r3, #32
   188ec:	moveq	r3, #31
   188f0:	b	18a1c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x30c>
   188f4:	cmp	lr, #66	; 0x42
   188f8:	addeq	lr, r3, #1
   188fc:	beq	18928 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x218>
   18900:	mov	lr, r3
   18904:	b	18934 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x224>
   18908:	ldr	r0, [sp, #4]
   1890c:	ldrb	r4, [r0, lr]
   18910:	ldr	r0, [sp, #16]
   18914:	ldrb	r4, [r0, r4]
   18918:	sub	r4, r4, #65	; 0x41
   1891c:	cmp	r4, #1
   18920:	bhi	18934 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x224>
   18924:	add	lr, lr, #1
   18928:	cmp	lr, #7
   1892c:	cmpls	lr, r2
   18930:	bcc	18908 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f8>
   18934:	sub	lr, r2, lr
   18938:	mov	r2, r3
   1893c:	b	187f8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xe8>
   18940:	mov	r4, #1
   18944:	b	188bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   18948:	mov	r4, #5
   1894c:	b	188bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   18950:	ldrb	r3, [sp, #29]
   18954:	lsl	r4, r3, #4
   18958:	ands	r4, r4, #255	; 0xff
   1895c:	bne	18948 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x238>
   18960:	ldrb	r2, [sp, #28]
   18964:	lsr	r3, r3, #4
   18968:	orr	r3, r3, r2, lsl #2
   1896c:	strb	r3, [r1], #1
   18970:	mov	ip, lr
   18974:	b	188bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   18978:	ldrb	r3, [sp, #30]
   1897c:	lsl	r4, r3, #6
   18980:	ands	r4, r4, #255	; 0xff
   18984:	bne	18948 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x238>
   18988:	cmp	fp, #1
   1898c:	beq	18940 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
   18990:	ldrb	r0, [sp, #29]
   18994:	ldrb	ip, [sp, #28]
   18998:	lsr	r3, r3, #2
   1899c:	add	r1, r1, #2
   189a0:	lsr	r2, r0, #4
   189a4:	orr	r2, r2, ip, lsl #2
   189a8:	orr	r0, r3, r0, lsl #4
   189ac:	strb	r2, [r1, #-2]
   189b0:	strb	r0, [r1, #-1]
   189b4:	b	18970 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x260>
   189b8:	ldr	r3, [sp, #12]
   189bc:	sub	r1, r1, r3
   189c0:	cmp	r5, r1
   189c4:	bhi	189f8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e8>
   189c8:	ldr	r0, [r7]
   189cc:	bl	151e4 <flatcc_builder_end_vector@@Base>
   189d0:	ldr	r3, [sp, #8]
   189d4:	cmp	r0, #0
   189d8:	str	r0, [r3]
   189dc:	beq	18a0c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   189e0:	mov	r2, sl
   189e4:	mov	r1, r6
   189e8:	mov	r0, r7
   189ec:	add	sp, sp, #36	; 0x24
   189f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189f4:	b	173e0 <flatcc_json_parser_set_error@@Base+0x120>
   189f8:	sub	r1, r5, r1
   189fc:	ldr	r0, [r7]
   18a00:	bl	14710 <flatcc_builder_truncate_vector@@Base>
   18a04:	cmp	r0, #0
   18a08:	beq	189c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2b8>
   18a0c:	ldr	r2, [sp, #8]
   18a10:	mov	r3, #0
   18a14:	str	r3, [r2]
   18a18:	mov	r3, #33	; 0x21
   18a1c:	mov	r2, sl
   18a20:	mov	r1, r6
   18a24:	mov	r0, r7
   18a28:	add	sp, sp, #36	; 0x24
   18a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a30:	b	172c0 <flatcc_json_parser_set_error@@Base>
   18a34:	andeq	sl, r1, r0, ror sp

00018a38 <flatcc_json_parser_build_string@@Base>:
   18a38:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   18a3c:	mov	r5, r0
   18a40:	mov	r6, r2
   18a44:	mov	r8, r3
   18a48:	bl	173bc <flatcc_json_parser_set_error@@Base+0xfc>
   18a4c:	mov	r1, r0
   18a50:	mov	r7, r0
   18a54:	mov	r0, r5
   18a58:	bl	17404 <flatcc_json_parser_string_part@@Base>
   18a5c:	cmp	r2, r0
   18a60:	mov	r4, r0
   18a64:	beq	18aa8 <flatcc_json_parser_build_string@@Base+0x70>
   18a68:	ldrb	r3, [r0]
   18a6c:	cmp	r3, #34	; 0x22
   18a70:	bne	18aa8 <flatcc_json_parser_build_string@@Base+0x70>
   18a74:	sub	r2, r0, r7
   18a78:	mov	r1, r7
   18a7c:	ldr	r0, [r5]
   18a80:	bl	157b8 <flatcc_builder_create_string@@Base>
   18a84:	str	r0, [r8]
   18a88:	mov	r1, r4
   18a8c:	mov	r2, r6
   18a90:	mov	r0, r5
   18a94:	bl	173e0 <flatcc_json_parser_set_error@@Base+0x120>
   18a98:	mov	r4, r0
   18a9c:	mov	r0, r4
   18aa0:	add	sp, sp, #12
   18aa4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18aa8:	ldr	r0, [r5]
   18aac:	bl	1490c <flatcc_builder_start_string@@Base>
   18ab0:	cmp	r0, #0
   18ab4:	bne	18ad4 <flatcc_json_parser_build_string@@Base+0x9c>
   18ab8:	sub	r2, r4, r7
   18abc:	mov	r1, r7
   18ac0:	ldr	r0, [r5]
   18ac4:	bl	1463c <flatcc_builder_append_string@@Base>
   18ac8:	cmp	r0, #0
   18acc:	addne	r9, sp, #5
   18ad0:	bne	18b5c <flatcc_json_parser_build_string@@Base+0x124>
   18ad4:	mov	r3, #0
   18ad8:	str	r3, [r8]
   18adc:	b	18a9c <flatcc_json_parser_build_string@@Base+0x64>
   18ae0:	sub	r2, r0, r4
   18ae4:	mov	r1, r4
   18ae8:	ldr	r0, [r5]
   18aec:	bl	1463c <flatcc_builder_append_string@@Base>
   18af0:	cmp	r0, #0
   18af4:	bne	18b58 <flatcc_json_parser_build_string@@Base+0x120>
   18af8:	mov	r4, r7
   18afc:	b	18ad4 <flatcc_json_parser_build_string@@Base+0x9c>
   18b00:	ldrb	r3, [r4]
   18b04:	cmp	r3, #34	; 0x22
   18b08:	beq	18b64 <flatcc_json_parser_build_string@@Base+0x12c>
   18b0c:	mov	r1, r4
   18b10:	add	r3, sp, #4
   18b14:	mov	r2, r6
   18b18:	mov	r0, r5
   18b1c:	bl	17998 <flatcc_json_parser_string_escape@@Base>
   18b20:	ldrb	r2, [sp, #4]
   18b24:	mov	r1, r9
   18b28:	mov	r4, r0
   18b2c:	ldr	r0, [r5]
   18b30:	bl	1463c <flatcc_builder_append_string@@Base>
   18b34:	cmp	r0, #0
   18b38:	beq	18ad4 <flatcc_json_parser_build_string@@Base+0x9c>
   18b3c:	mov	r2, r6
   18b40:	mov	r1, r4
   18b44:	mov	r0, r5
   18b48:	bl	17404 <flatcc_json_parser_string_part@@Base>
   18b4c:	cmp	r6, r0
   18b50:	mov	r7, r0
   18b54:	bne	18ae0 <flatcc_json_parser_build_string@@Base+0xa8>
   18b58:	mov	r4, r7
   18b5c:	cmp	r4, r6
   18b60:	bne	18b00 <flatcc_json_parser_build_string@@Base+0xc8>
   18b64:	ldr	r0, [r5]
   18b68:	bl	158b0 <flatcc_builder_end_string@@Base>
   18b6c:	b	18a84 <flatcc_json_parser_build_string@@Base+0x4c>

00018b70 <flatcc_json_parser_prepare_unions@@Base>:
   18b70:	push	{r4, r5, r6, r7, r8, lr}
   18b74:	mov	r5, r1
   18b78:	mov	r1, #24
   18b7c:	mov	r4, r0
   18b80:	mul	r1, r1, r3
   18b84:	ldr	r0, [r0]
   18b88:	add	r1, r1, #8
   18b8c:	ldr	r8, [sp, #24]
   18b90:	mov	r7, r2
   18b94:	mov	r6, r3
   18b98:	bl	13ce4 <flatcc_builder_enter_user_frame@@Base>
   18b9c:	cmp	r0, #0
   18ba0:	str	r0, [r8]
   18ba4:	bne	18bc0 <flatcc_json_parser_prepare_unions@@Base+0x50>
   18ba8:	mov	r2, r7
   18bac:	mov	r1, r5
   18bb0:	mov	r0, r4
   18bb4:	mov	r3, #33	; 0x21
   18bb8:	pop	{r4, r5, r6, r7, r8, lr}
   18bbc:	b	172c0 <flatcc_json_parser_set_error@@Base>
   18bc0:	mov	r1, r0
   18bc4:	ldr	r0, [r4]
   18bc8:	bl	13de4 <flatcc_builder_get_user_frame_ptr@@Base>
   18bcc:	str	r6, [r0]
   18bd0:	mov	r0, r5
   18bd4:	pop	{r4, r5, r6, r7, r8, pc}

00018bd8 <flatcc_json_parser_finalize_unions@@Base>:
   18bd8:	push	{r4, r5, r6, r7, r8, lr}
   18bdc:	mov	r5, r0
   18be0:	mov	r4, r1
   18be4:	ldr	r0, [r0]
   18be8:	mov	r1, r3
   18bec:	mov	r6, r3
   18bf0:	mov	r7, r2
   18bf4:	bl	13de4 <flatcc_builder_get_user_frame_ptr@@Base>
   18bf8:	ldr	r3, [r0, #4]
   18bfc:	cmp	r3, #0
   18c00:	beq	18c1c <flatcc_json_parser_finalize_unions@@Base+0x44>
   18c04:	mov	r1, r4
   18c08:	mov	r3, #27
   18c0c:	mov	r2, r7
   18c10:	mov	r0, r5
   18c14:	bl	172c0 <flatcc_json_parser_set_error@@Base>
   18c18:	mov	r4, r0
   18c1c:	mov	r1, r6
   18c20:	ldr	r0, [r5]
   18c24:	bl	13da0 <flatcc_builder_exit_user_frame_at@@Base>
   18c28:	mov	r0, r4
   18c2c:	pop	{r4, r5, r6, r7, r8, pc}

00018c30 <flatcc_json_parser_union@@Base>:
   18c30:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   18c34:	mov	r4, r0
   18c38:	mov	r7, r1
   18c3c:	ldr	r0, [r0]
   18c40:	ldr	r1, [sp, #44]	; 0x2c
   18c44:	mov	r5, r3
   18c48:	mov	r6, r2
   18c4c:	bl	13de4 <flatcc_builder_get_user_frame_ptr@@Base>
   18c50:	mov	r3, #24
   18c54:	mla	r3, r3, r5, r0
   18c58:	ldr	r2, [r3, #8]
   18c5c:	cmp	r2, #0
   18c60:	movne	r3, #28
   18c64:	bne	18cc8 <flatcc_json_parser_union@@Base+0x98>
   18c68:	ldrb	r2, [r3, #20]
   18c6c:	cmp	r2, #0
   18c70:	bne	18cb4 <flatcc_json_parser_union@@Base+0x84>
   18c74:	ldr	r2, [r0, #4]
   18c78:	mov	r1, r7
   18c7c:	add	r2, r2, #1
   18c80:	str	r2, [r0, #4]
   18c84:	ldr	r2, [r4, #16]
   18c88:	mov	r0, r4
   18c8c:	str	r2, [r3, #16]
   18c90:	ldr	r2, [r4, #4]
   18c94:	str	r7, [r3, #8]
   18c98:	str	r2, [r3, #12]
   18c9c:	mov	r2, r6
   18ca0:	bl	1801c <flatcc_json_parser_generic_json@@Base>
   18ca4:	mov	r5, r0
   18ca8:	mov	r0, r5
   18cac:	add	sp, sp, #16
   18cb0:	pop	{r4, r5, r6, r7, r8, pc}
   18cb4:	ldrb	r3, [r3, #21]
   18cb8:	cmp	r3, #0
   18cbc:	strb	r3, [sp, #8]
   18cc0:	bne	18cdc <flatcc_json_parser_union@@Base+0xac>
   18cc4:	mov	r3, #25
   18cc8:	mov	r2, r6
   18ccc:	mov	r1, r7
   18cd0:	mov	r0, r4
   18cd4:	bl	172c0 <flatcc_json_parser_set_error@@Base>
   18cd8:	b	18ca4 <flatcc_json_parser_union@@Base+0x74>
   18cdc:	ldr	r2, [r0, #4]
   18ce0:	ldr	r5, [sp, #48]	; 0x30
   18ce4:	sub	r2, r2, #1
   18ce8:	str	r2, [r0, #4]
   18cec:	add	r2, sp, #12
   18cf0:	str	r2, [sp]
   18cf4:	mov	r1, r7
   18cf8:	mov	r2, r6
   18cfc:	mov	r0, r4
   18d00:	blx	r5
   18d04:	add	r8, sp, #8
   18d08:	cmp	r6, r0
   18d0c:	mov	r5, r0
   18d10:	beq	18ca8 <flatcc_json_parser_union@@Base+0x78>
   18d14:	ldm	r8, {r2, r3}
   18d18:	ldrh	r1, [sp, #40]	; 0x28
   18d1c:	ldr	r0, [r4]
   18d20:	bl	15c28 <flatcc_builder_table_add_union@@Base>
   18d24:	cmp	r0, #0
   18d28:	beq	18ca8 <flatcc_json_parser_union@@Base+0x78>
   18d2c:	mov	r3, #28
   18d30:	mov	r2, r6
   18d34:	mov	r1, r5
   18d38:	b	18cd0 <flatcc_json_parser_union@@Base+0xa0>

00018d3c <flatcc_json_parser_union_type@@Base>:
   18d3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d40:	sub	sp, sp, #28
   18d44:	mov	r9, r1
   18d48:	mov	r4, r0
   18d4c:	ldr	r1, [sp, #68]	; 0x44
   18d50:	ldr	r0, [r0]
   18d54:	mov	r5, r3
   18d58:	mov	r6, r2
   18d5c:	bl	13de4 <flatcc_builder_get_user_frame_ptr@@Base>
   18d60:	mov	r3, #24
   18d64:	mul	r3, r3, r5
   18d68:	str	r3, [sp, #12]
   18d6c:	add	sl, r0, #8
   18d70:	add	r7, sl, r3
   18d74:	ldrb	r3, [r7, #12]
   18d78:	cmp	r3, #0
   18d7c:	movne	r3, #28
   18d80:	movne	r2, r6
   18d84:	movne	r1, r9
   18d88:	bne	18ea0 <flatcc_json_parser_union_type@@Base+0x164>
   18d8c:	mov	r3, #1
   18d90:	add	fp, r7, #13
   18d94:	strb	r3, [r7, #12]
   18d98:	mov	r8, r0
   18d9c:	mov	r3, fp
   18da0:	mov	r2, r6
   18da4:	mov	r1, r9
   18da8:	mov	r0, r4
   18dac:	bl	1867c <flatcc_json_parser_integer@@Base+0xc8>
   18db0:	cmp	r9, r0
   18db4:	mov	r5, r0
   18db8:	bne	18dd8 <flatcc_json_parser_union_type@@Base+0x9c>
   18dbc:	mov	r1, r0
   18dc0:	str	fp, [sp]
   18dc4:	ldr	r3, [sp, #72]	; 0x48
   18dc8:	mov	r2, r6
   18dcc:	mov	r0, r4
   18dd0:	bl	17630 <flatcc_json_parser_space_ext@@Base+0x1b0>
   18dd4:	mov	r5, r0
   18dd8:	ldr	r3, [sp, #12]
   18ddc:	ldr	r1, [sl, r3]
   18de0:	ldr	r3, [r8, #4]
   18de4:	cmp	r1, #0
   18de8:	bne	18e08 <flatcc_json_parser_union_type@@Base+0xcc>
   18dec:	ldrb	r2, [r7, #13]
   18df0:	cmp	r2, #0
   18df4:	addne	r3, r3, #1
   18df8:	str	r3, [r8, #4]
   18dfc:	mov	r0, r5
   18e00:	add	sp, sp, #28
   18e04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e08:	cmp	r3, #0
   18e0c:	bne	18e24 <flatcc_json_parser_union_type@@Base+0xe8>
   18e10:	ldr	r3, [pc, #152]	; 18eb0 <flatcc_json_parser_union_type@@Base+0x174>
   18e14:	ldr	r2, [pc, #152]	; 18eb4 <flatcc_json_parser_union_type@@Base+0x178>
   18e18:	ldr	r1, [pc, #152]	; 18eb8 <flatcc_json_parser_union_type@@Base+0x17c>
   18e1c:	ldr	r0, [pc, #152]	; 18ebc <flatcc_json_parser_union_type@@Base+0x180>
   18e20:	bl	12508 <__assert_fail@plt>
   18e24:	sub	r3, r3, #1
   18e28:	str	r3, [r8, #4]
   18e2c:	ldr	r3, [r7, #8]
   18e30:	ldr	r9, [r4, #16]
   18e34:	str	r3, [r4, #16]
   18e38:	ldr	r3, [r7, #4]
   18e3c:	ldr	r8, [r4, #4]
   18e40:	str	r3, [r4, #4]
   18e44:	ldrb	r3, [r7, #13]
   18e48:	add	r7, sp, #24
   18e4c:	mov	r0, r4
   18e50:	strb	r3, [r7, #-8]!
   18e54:	add	r2, r7, #4
   18e58:	str	r2, [sp]
   18e5c:	ldr	sl, [sp, #76]	; 0x4c
   18e60:	mov	r2, r6
   18e64:	blx	sl
   18e68:	cmp	r6, r0
   18e6c:	moveq	r5, r6
   18e70:	beq	18dfc <flatcc_json_parser_union_type@@Base+0xc0>
   18e74:	ldm	r7, {r2, r3}
   18e78:	ldrh	r1, [sp, #64]	; 0x40
   18e7c:	ldr	r0, [r4]
   18e80:	bl	15c28 <flatcc_builder_table_add_union@@Base>
   18e84:	cmp	r0, #0
   18e88:	streq	r9, [r4, #16]
   18e8c:	streq	r8, [r4, #4]
   18e90:	beq	18dfc <flatcc_json_parser_union_type@@Base+0xc0>
   18e94:	mov	r3, #28
   18e98:	mov	r2, r6
   18e9c:	mov	r1, r5
   18ea0:	mov	r0, r4
   18ea4:	bl	172c0 <flatcc_json_parser_set_error@@Base>
   18ea8:	mov	r5, r0
   18eac:	b	18dfc <flatcc_json_parser_union_type@@Base+0xc0>
   18eb0:	andeq	sl, r1, r0, ror pc
   18eb4:	andeq	r0, r0, r5, asr #7
   18eb8:	andeq	fp, r1, r1, lsl #2
   18ebc:	andeq	fp, r1, fp, asr #2

00018ec0 <flatcc_json_parser_union_vector@@Base>:
   18ec0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18ec4:	mov	r4, r0
   18ec8:	mov	r5, r1
   18ecc:	ldr	r0, [r0]
   18ed0:	ldr	r1, [sp, #36]	; 0x24
   18ed4:	mov	r9, r3
   18ed8:	mov	r6, r2
   18edc:	ldrh	r7, [sp, #32]
   18ee0:	ldr	r8, [sp, #40]	; 0x28
   18ee4:	bl	13de4 <flatcc_builder_get_user_frame_ptr@@Base>
   18ee8:	mov	r3, #24
   18eec:	mul	r3, r3, r9
   18ef0:	add	r2, r0, #8
   18ef4:	add	ip, r2, r3
   18ef8:	ldr	r1, [r2, r3]
   18efc:	cmp	r1, #0
   18f00:	beq	18f1c <flatcc_json_parser_union_vector@@Base+0x5c>
   18f04:	mov	r2, r6
   18f08:	mov	r1, r5
   18f0c:	mov	r0, r4
   18f10:	mov	r3, #28
   18f14:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   18f18:	b	172c0 <flatcc_json_parser_set_error@@Base>
   18f1c:	ldrb	r1, [ip, #12]
   18f20:	cmp	r1, #0
   18f24:	ldr	r1, [r0, #4]
   18f28:	bne	18f5c <flatcc_json_parser_union_vector@@Base+0x9c>
   18f2c:	add	r1, r1, #1
   18f30:	str	r1, [r0, #4]
   18f34:	ldr	r1, [r4, #16]
   18f38:	mov	r0, r4
   18f3c:	str	r1, [ip, #8]
   18f40:	ldr	r1, [r4, #4]
   18f44:	str	r1, [ip, #4]
   18f48:	str	r5, [r2, r3]
   18f4c:	mov	r1, r5
   18f50:	mov	r2, r6
   18f54:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   18f58:	b	1801c <flatcc_json_parser_generic_json@@Base>
   18f5c:	sub	r1, r1, #1
   18f60:	str	r1, [r0, #4]
   18f64:	str	r8, [sp, #40]	; 0x28
   18f68:	str	r7, [sp, #36]	; 0x24
   18f6c:	ldr	r3, [ip, #16]
   18f70:	mov	r2, r6
   18f74:	str	r3, [sp, #32]
   18f78:	mov	r1, r5
   18f7c:	mov	r0, r4
   18f80:	ldr	r3, [ip, #20]
   18f84:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   18f88:	b	17848 <flatcc_json_parser_space_ext@@Base+0x3c8>

00018f8c <flatcc_json_parser_union_type_vector@@Base>:
   18f8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f90:	sub	sp, sp, #36	; 0x24
   18f94:	mov	r4, r0
   18f98:	mov	r5, r1
   18f9c:	ldr	r0, [r0]
   18fa0:	ldr	r1, [sp, #76]	; 0x4c
   18fa4:	mov	r7, r3
   18fa8:	mov	r6, r2
   18fac:	ldrh	r9, [sp, #72]	; 0x48
   18fb0:	bl	13de4 <flatcc_builder_get_user_frame_ptr@@Base>
   18fb4:	mov	r3, #24
   18fb8:	mul	r7, r3, r7
   18fbc:	add	r0, r0, #8
   18fc0:	add	r8, r0, r7
   18fc4:	ldrb	r3, [r8, #12]
   18fc8:	cmp	r3, #0
   18fcc:	movne	r3, #28
   18fd0:	bne	19200 <flatcc_json_parser_union_type_vector@@Base+0x274>
   18fd4:	mov	sl, #1
   18fd8:	strb	sl, [r8, #12]
   18fdc:	mvn	r3, #0
   18fe0:	mov	r2, sl
   18fe4:	mov	r1, sl
   18fe8:	ldr	r0, [r4]
   18fec:	bl	1486c <flatcc_builder_start_vector@@Base>
   18ff0:	cmp	r0, #0
   18ff4:	bne	191fc <flatcc_json_parser_union_type_vector@@Base+0x270>
   18ff8:	mov	r1, r5
   18ffc:	add	r3, sp, #28
   19000:	mov	r2, r6
   19004:	mov	r0, r4
   19008:	bl	177c4 <flatcc_json_parser_space_ext@@Base+0x344>
   1900c:	str	sl, [sp, #16]
   19010:	add	sl, sp, #27
   19014:	mov	r5, r0
   19018:	ldr	r3, [sp, #28]
   1901c:	cmp	r3, #0
   19020:	bne	190e0 <flatcc_json_parser_union_type_vector@@Base+0x154>
   19024:	ldr	r0, [r4]
   19028:	bl	1525c <flatcc_builder_vector_count@@Base>
   1902c:	str	r0, [r8, #16]
   19030:	mov	r1, r0
   19034:	mov	sl, r0
   19038:	ldr	r0, [r4]
   1903c:	bl	13ce4 <flatcc_builder_enter_user_frame@@Base>
   19040:	mov	r1, r0
   19044:	mov	r8, r0
   19048:	ldr	r0, [r4]
   1904c:	bl	13de4 <flatcc_builder_get_user_frame_ptr@@Base>
   19050:	mov	fp, r0
   19054:	ldr	r0, [r4]
   19058:	bl	15268 <flatcc_builder_vector_edit@@Base>
   1905c:	mov	r2, sl
   19060:	mov	r1, r0
   19064:	mov	r0, fp
   19068:	bl	12460 <memcpy@plt>
   1906c:	ldr	r0, [r4]
   19070:	bl	151e4 <flatcc_builder_end_vector@@Base>
   19074:	subs	fp, r0, #0
   19078:	beq	191fc <flatcc_json_parser_union_type_vector@@Base+0x270>
   1907c:	sub	r1, r9, #1
   19080:	ldr	r0, [r4]
   19084:	bl	15afc <flatcc_builder_table_add_offset@@Base>
   19088:	cmp	r0, #0
   1908c:	beq	191fc <flatcc_json_parser_union_type_vector@@Base+0x270>
   19090:	str	fp, [r0]
   19094:	ldr	r1, [sp, #76]	; 0x4c
   19098:	ldr	r0, [r4]
   1909c:	bl	13de4 <flatcc_builder_get_user_frame_ptr@@Base>
   190a0:	add	r3, r0, #8
   190a4:	add	r2, r3, r7
   190a8:	ldr	r1, [r3, r7]
   190ac:	ldr	r3, [r0, #4]
   190b0:	cmp	r1, #0
   190b4:	addeq	r3, r3, #1
   190b8:	str	r8, [r2, #20]
   190bc:	streq	r3, [r0, #4]
   190c0:	beq	191ec <flatcc_json_parser_union_type_vector@@Base+0x260>
   190c4:	cmp	r3, #0
   190c8:	bne	1919c <flatcc_json_parser_union_type_vector@@Base+0x210>
   190cc:	ldr	r3, [pc, #312]	; 1920c <flatcc_json_parser_union_type_vector@@Base+0x280>
   190d0:	ldr	r2, [pc, #312]	; 19210 <flatcc_json_parser_union_type_vector@@Base+0x284>
   190d4:	ldr	r1, [pc, #312]	; 19214 <flatcc_json_parser_union_type_vector@@Base+0x288>
   190d8:	ldr	r0, [pc, #312]	; 19218 <flatcc_json_parser_union_type_vector@@Base+0x28c>
   190dc:	bl	12508 <__assert_fail@plt>
   190e0:	ldr	r1, [sp, #16]
   190e4:	ldr	r0, [r4]
   190e8:	bl	14394 <flatcc_builder_extend_vector@@Base>
   190ec:	subs	fp, r0, #0
   190f0:	beq	191fc <flatcc_json_parser_union_type_vector@@Base+0x270>
   190f4:	mov	r1, r5
   190f8:	mov	r3, sl
   190fc:	mov	r2, r6
   19100:	mov	r0, r4
   19104:	bl	1867c <flatcc_json_parser_integer@@Base+0xc8>
   19108:	cmp	r5, r0
   1910c:	mov	r1, r0
   19110:	bne	1913c <flatcc_json_parser_union_type_vector@@Base+0x1b0>
   19114:	mov	r1, r5
   19118:	str	sl, [sp]
   1911c:	ldr	r3, [sp, #80]	; 0x50
   19120:	mov	r2, r6
   19124:	mov	r0, r4
   19128:	bl	17630 <flatcc_json_parser_space_ext@@Base+0x1b0>
   1912c:	cmp	r6, r0
   19130:	cmpne	r5, r0
   19134:	mov	r1, r0
   19138:	beq	191f8 <flatcc_json_parser_union_type_vector@@Base+0x26c>
   1913c:	ldrb	r0, [sp, #27]
   19140:	ldr	r3, [sp, #88]	; 0x58
   19144:	str	r1, [sp, #20]
   19148:	blx	r3
   1914c:	ldr	r1, [sp, #20]
   19150:	cmp	r0, #0
   19154:	bne	1917c <flatcc_json_parser_union_type_vector@@Base+0x1f0>
   19158:	ldr	r3, [r4, #8]
   1915c:	tst	r3, #1
   19160:	bne	19178 <flatcc_json_parser_union_type_vector@@Base+0x1ec>
   19164:	mov	r3, #15
   19168:	mov	r2, r6
   1916c:	mov	r0, r4
   19170:	bl	172c0 <flatcc_json_parser_set_error@@Base>
   19174:	b	191f0 <flatcc_json_parser_union_type_vector@@Base+0x264>
   19178:	strb	r0, [sp, #27]
   1917c:	ldrb	r3, [sp, #27]
   19180:	mov	r2, r6
   19184:	mov	r0, r4
   19188:	strb	r3, [fp]
   1918c:	add	r3, sp, #28
   19190:	bl	17584 <flatcc_json_parser_space_ext@@Base+0x104>
   19194:	mov	r5, r0
   19198:	b	19018 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   1919c:	sub	r3, r3, #1
   191a0:	str	r3, [r0, #4]
   191a4:	ldr	r3, [r2, #8]
   191a8:	ldr	fp, [r4, #16]
   191ac:	str	r3, [r4, #16]
   191b0:	ldr	r3, [r2, #4]
   191b4:	ldr	r7, [r4, #4]
   191b8:	str	r3, [r4, #4]
   191bc:	ldr	r3, [sp, #84]	; 0x54
   191c0:	str	r9, [sp, #4]
   191c4:	str	r3, [sp, #8]
   191c8:	str	sl, [sp]
   191cc:	mov	r3, r8
   191d0:	mov	r2, r6
   191d4:	mov	r0, r4
   191d8:	bl	17848 <flatcc_json_parser_space_ext@@Base+0x3c8>
   191dc:	cmp	r6, r0
   191e0:	beq	191f0 <flatcc_json_parser_union_type_vector@@Base+0x264>
   191e4:	str	fp, [r4, #16]
   191e8:	str	r7, [r4, #4]
   191ec:	mov	r0, r5
   191f0:	add	sp, sp, #36	; 0x24
   191f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191f8:	mov	r5, r0
   191fc:	mov	r3, #33	; 0x21
   19200:	mov	r2, r6
   19204:	mov	r1, r5
   19208:	b	1916c <flatcc_json_parser_union_type_vector@@Base+0x1e0>
   1920c:	andeq	sl, r1, lr, lsl #31
   19210:	andeq	r0, r0, r2, ror #8
   19214:	andeq	fp, r1, r1, lsl #2
   19218:	andeq	fp, r1, fp, asr #2

0001921c <flatcc_json_parser_struct_as_root@@Base>:
   1921c:	push	{r4, r5, r6, r7, r8, r9, lr}
   19220:	sub	sp, sp, #52	; 0x34
   19224:	mov	r5, r2
   19228:	ldr	r9, [sp, #80]	; 0x50
   1922c:	add	r6, r2, r3
   19230:	ands	r8, r9, #4
   19234:	movne	r8, #2
   19238:	subs	r4, r1, #0
   1923c:	addeq	r4, sp, #4
   19240:	mov	r7, r0
   19244:	mov	r2, #44	; 0x2c
   19248:	mov	r1, #0
   1924c:	mov	r0, r4
   19250:	bl	124cc <memset@plt>
   19254:	mov	r3, #1
   19258:	str	r3, [r4, #16]
   1925c:	str	r7, [r4]
   19260:	str	r5, [r4, #4]
   19264:	str	r9, [r4, #8]
   19268:	str	r5, [r4, #28]
   1926c:	str	r6, [r4, #32]
   19270:	str	r5, [r4, #36]	; 0x24
   19274:	mov	r3, r8
   19278:	mov	r2, #0
   1927c:	ldr	r1, [sp, #84]	; 0x54
   19280:	mov	r0, r7
   19284:	bl	14184 <flatcc_builder_start_buffer@@Base>
   19288:	cmp	r0, #0
   1928c:	beq	192a0 <flatcc_json_parser_struct_as_root@@Base+0x84>
   19290:	mvn	r6, #0
   19294:	mov	r0, r6
   19298:	add	sp, sp, #52	; 0x34
   1929c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   192a0:	mov	r2, r6
   192a4:	mov	r3, sp
   192a8:	ldr	r6, [sp, #88]	; 0x58
   192ac:	mov	r1, r5
   192b0:	mov	r0, r4
   192b4:	blx	r6
   192b8:	ldr	r6, [r4, #24]
   192bc:	cmp	r6, #0
   192c0:	bne	19294 <flatcc_json_parser_struct_as_root@@Base+0x78>
   192c4:	ldr	r1, [sp]
   192c8:	mov	r0, r7
   192cc:	bl	14224 <flatcc_builder_end_buffer@@Base>
   192d0:	cmp	r0, #0
   192d4:	beq	19290 <flatcc_json_parser_struct_as_root@@Base+0x74>
   192d8:	str	r5, [r4, #40]	; 0x28
   192dc:	b	19294 <flatcc_json_parser_struct_as_root@@Base+0x78>

000192e0 <flatcc_json_parser_table_as_root@@Base>:
   192e0:	b	1921c <flatcc_json_parser_struct_as_root@@Base>
   192e4:	subs	r2, r1, #1
   192e8:	bxeq	lr
   192ec:	bcc	194c4 <flatcc_json_parser_table_as_root@@Base+0x1e4>
   192f0:	cmp	r0, r1
   192f4:	bls	194a8 <flatcc_json_parser_table_as_root@@Base+0x1c8>
   192f8:	tst	r1, r2
   192fc:	beq	194b4 <flatcc_json_parser_table_as_root@@Base+0x1d4>
   19300:	clz	r3, r0
   19304:	clz	r2, r1
   19308:	sub	r3, r2, r3
   1930c:	rsbs	r3, r3, #31
   19310:	addne	r3, r3, r3, lsl #1
   19314:	mov	r2, #0
   19318:	addne	pc, pc, r3, lsl #2
   1931c:	nop			; (mov r0, r0)
   19320:	cmp	r0, r1, lsl #31
   19324:	adc	r2, r2, r2
   19328:	subcs	r0, r0, r1, lsl #31
   1932c:	cmp	r0, r1, lsl #30
   19330:	adc	r2, r2, r2
   19334:	subcs	r0, r0, r1, lsl #30
   19338:	cmp	r0, r1, lsl #29
   1933c:	adc	r2, r2, r2
   19340:	subcs	r0, r0, r1, lsl #29
   19344:	cmp	r0, r1, lsl #28
   19348:	adc	r2, r2, r2
   1934c:	subcs	r0, r0, r1, lsl #28
   19350:	cmp	r0, r1, lsl #27
   19354:	adc	r2, r2, r2
   19358:	subcs	r0, r0, r1, lsl #27
   1935c:	cmp	r0, r1, lsl #26
   19360:	adc	r2, r2, r2
   19364:	subcs	r0, r0, r1, lsl #26
   19368:	cmp	r0, r1, lsl #25
   1936c:	adc	r2, r2, r2
   19370:	subcs	r0, r0, r1, lsl #25
   19374:	cmp	r0, r1, lsl #24
   19378:	adc	r2, r2, r2
   1937c:	subcs	r0, r0, r1, lsl #24
   19380:	cmp	r0, r1, lsl #23
   19384:	adc	r2, r2, r2
   19388:	subcs	r0, r0, r1, lsl #23
   1938c:	cmp	r0, r1, lsl #22
   19390:	adc	r2, r2, r2
   19394:	subcs	r0, r0, r1, lsl #22
   19398:	cmp	r0, r1, lsl #21
   1939c:	adc	r2, r2, r2
   193a0:	subcs	r0, r0, r1, lsl #21
   193a4:	cmp	r0, r1, lsl #20
   193a8:	adc	r2, r2, r2
   193ac:	subcs	r0, r0, r1, lsl #20
   193b0:	cmp	r0, r1, lsl #19
   193b4:	adc	r2, r2, r2
   193b8:	subcs	r0, r0, r1, lsl #19
   193bc:	cmp	r0, r1, lsl #18
   193c0:	adc	r2, r2, r2
   193c4:	subcs	r0, r0, r1, lsl #18
   193c8:	cmp	r0, r1, lsl #17
   193cc:	adc	r2, r2, r2
   193d0:	subcs	r0, r0, r1, lsl #17
   193d4:	cmp	r0, r1, lsl #16
   193d8:	adc	r2, r2, r2
   193dc:	subcs	r0, r0, r1, lsl #16
   193e0:	cmp	r0, r1, lsl #15
   193e4:	adc	r2, r2, r2
   193e8:	subcs	r0, r0, r1, lsl #15
   193ec:	cmp	r0, r1, lsl #14
   193f0:	adc	r2, r2, r2
   193f4:	subcs	r0, r0, r1, lsl #14
   193f8:	cmp	r0, r1, lsl #13
   193fc:	adc	r2, r2, r2
   19400:	subcs	r0, r0, r1, lsl #13
   19404:	cmp	r0, r1, lsl #12
   19408:	adc	r2, r2, r2
   1940c:	subcs	r0, r0, r1, lsl #12
   19410:	cmp	r0, r1, lsl #11
   19414:	adc	r2, r2, r2
   19418:	subcs	r0, r0, r1, lsl #11
   1941c:	cmp	r0, r1, lsl #10
   19420:	adc	r2, r2, r2
   19424:	subcs	r0, r0, r1, lsl #10
   19428:	cmp	r0, r1, lsl #9
   1942c:	adc	r2, r2, r2
   19430:	subcs	r0, r0, r1, lsl #9
   19434:	cmp	r0, r1, lsl #8
   19438:	adc	r2, r2, r2
   1943c:	subcs	r0, r0, r1, lsl #8
   19440:	cmp	r0, r1, lsl #7
   19444:	adc	r2, r2, r2
   19448:	subcs	r0, r0, r1, lsl #7
   1944c:	cmp	r0, r1, lsl #6
   19450:	adc	r2, r2, r2
   19454:	subcs	r0, r0, r1, lsl #6
   19458:	cmp	r0, r1, lsl #5
   1945c:	adc	r2, r2, r2
   19460:	subcs	r0, r0, r1, lsl #5
   19464:	cmp	r0, r1, lsl #4
   19468:	adc	r2, r2, r2
   1946c:	subcs	r0, r0, r1, lsl #4
   19470:	cmp	r0, r1, lsl #3
   19474:	adc	r2, r2, r2
   19478:	subcs	r0, r0, r1, lsl #3
   1947c:	cmp	r0, r1, lsl #2
   19480:	adc	r2, r2, r2
   19484:	subcs	r0, r0, r1, lsl #2
   19488:	cmp	r0, r1, lsl #1
   1948c:	adc	r2, r2, r2
   19490:	subcs	r0, r0, r1, lsl #1
   19494:	cmp	r0, r1
   19498:	adc	r2, r2, r2
   1949c:	subcs	r0, r0, r1
   194a0:	mov	r0, r2
   194a4:	bx	lr
   194a8:	moveq	r0, #1
   194ac:	movne	r0, #0
   194b0:	bx	lr
   194b4:	clz	r2, r1
   194b8:	rsb	r2, r2, #31
   194bc:	lsr	r0, r0, r2
   194c0:	bx	lr
   194c4:	cmp	r0, #0
   194c8:	mvnne	r0, #0
   194cc:	b	198e0 <flatcc_json_parser_table_as_root@@Base+0x600>
   194d0:	cmp	r1, #0
   194d4:	beq	194c4 <flatcc_json_parser_table_as_root@@Base+0x1e4>
   194d8:	push	{r0, r1, lr}
   194dc:	bl	192e4 <flatcc_json_parser_table_as_root@@Base+0x4>
   194e0:	pop	{r1, r2, lr}
   194e4:	mul	r3, r2, r0
   194e8:	sub	r1, r1, r3
   194ec:	bx	lr
   194f0:	subs	r3, r2, #32
   194f4:	rsb	ip, r2, #32
   194f8:	lsrmi	r0, r0, r2
   194fc:	lsrpl	r0, r1, r3
   19500:	orrmi	r0, r0, r1, lsl ip
   19504:	lsr	r1, r1, r2
   19508:	bx	lr
   1950c:	subs	r3, r2, #32
   19510:	rsb	ip, r2, #32
   19514:	lslmi	r1, r1, r2
   19518:	lslpl	r1, r0, r3
   1951c:	orrmi	r1, r1, r0, lsr ip
   19520:	lsl	r0, r0, r2
   19524:	bx	lr
   19528:	eor	r1, r1, #-2147483648	; 0x80000000
   1952c:	b	19534 <flatcc_json_parser_table_as_root@@Base+0x254>
   19530:	eor	r3, r3, #-2147483648	; 0x80000000
   19534:	push	{r4, r5, lr}
   19538:	lsl	r4, r1, #1
   1953c:	lsl	r5, r3, #1
   19540:	teq	r4, r5
   19544:	teqeq	r0, r2
   19548:	orrsne	ip, r4, r0
   1954c:	orrsne	ip, r5, r2
   19550:	mvnsne	ip, r4, asr #21
   19554:	mvnsne	ip, r5, asr #21
   19558:	beq	19744 <flatcc_json_parser_table_as_root@@Base+0x464>
   1955c:	lsr	r4, r4, #21
   19560:	rsbs	r5, r4, r5, lsr #21
   19564:	rsblt	r5, r5, #0
   19568:	ble	19588 <flatcc_json_parser_table_as_root@@Base+0x2a8>
   1956c:	add	r4, r4, r5
   19570:	eor	r2, r0, r2
   19574:	eor	r3, r1, r3
   19578:	eor	r0, r2, r0
   1957c:	eor	r1, r3, r1
   19580:	eor	r2, r0, r2
   19584:	eor	r3, r1, r3
   19588:	cmp	r5, #54	; 0x36
   1958c:	pophi	{r4, r5, pc}
   19590:	tst	r1, #-2147483648	; 0x80000000
   19594:	lsl	r1, r1, #12
   19598:	mov	ip, #1048576	; 0x100000
   1959c:	orr	r1, ip, r1, lsr #12
   195a0:	beq	195ac <flatcc_json_parser_table_as_root@@Base+0x2cc>
   195a4:	rsbs	r0, r0, #0
   195a8:	rsc	r1, r1, #0
   195ac:	tst	r3, #-2147483648	; 0x80000000
   195b0:	lsl	r3, r3, #12
   195b4:	orr	r3, ip, r3, lsr #12
   195b8:	beq	195c4 <flatcc_json_parser_table_as_root@@Base+0x2e4>
   195bc:	rsbs	r2, r2, #0
   195c0:	rsc	r3, r3, #0
   195c4:	teq	r4, r5
   195c8:	beq	1972c <flatcc_json_parser_table_as_root@@Base+0x44c>
   195cc:	sub	r4, r4, #1
   195d0:	rsbs	lr, r5, #32
   195d4:	blt	195f0 <flatcc_json_parser_table_as_root@@Base+0x310>
   195d8:	lsl	ip, r2, lr
   195dc:	adds	r0, r0, r2, lsr r5
   195e0:	adc	r1, r1, #0
   195e4:	adds	r0, r0, r3, lsl lr
   195e8:	adcs	r1, r1, r3, asr r5
   195ec:	b	1960c <flatcc_json_parser_table_as_root@@Base+0x32c>
   195f0:	sub	r5, r5, #32
   195f4:	add	lr, lr, #32
   195f8:	cmp	r2, #1
   195fc:	lsl	ip, r3, lr
   19600:	orrcs	ip, ip, #2
   19604:	adds	r0, r0, r3, asr r5
   19608:	adcs	r1, r1, r3, asr #31
   1960c:	and	r5, r1, #-2147483648	; 0x80000000
   19610:	bpl	19620 <flatcc_json_parser_table_as_root@@Base+0x340>
   19614:	rsbs	ip, ip, #0
   19618:	rscs	r0, r0, #0
   1961c:	rsc	r1, r1, #0
   19620:	cmp	r1, #1048576	; 0x100000
   19624:	bcc	19664 <flatcc_json_parser_table_as_root@@Base+0x384>
   19628:	cmp	r1, #2097152	; 0x200000
   1962c:	bcc	1964c <flatcc_json_parser_table_as_root@@Base+0x36c>
   19630:	lsrs	r1, r1, #1
   19634:	rrxs	r0, r0
   19638:	rrx	ip, ip
   1963c:	add	r4, r4, #1
   19640:	lsl	r2, r4, #21
   19644:	cmn	r2, #4194304	; 0x400000
   19648:	bcs	197a4 <flatcc_json_parser_table_as_root@@Base+0x4c4>
   1964c:	cmp	ip, #-2147483648	; 0x80000000
   19650:	lsrseq	ip, r0, #1
   19654:	adcs	r0, r0, #0
   19658:	adc	r1, r1, r4, lsl #20
   1965c:	orr	r1, r1, r5
   19660:	pop	{r4, r5, pc}
   19664:	lsls	ip, ip, #1
   19668:	adcs	r0, r0, r0
   1966c:	adc	r1, r1, r1
   19670:	tst	r1, #1048576	; 0x100000
   19674:	sub	r4, r4, #1
   19678:	bne	1964c <flatcc_json_parser_table_as_root@@Base+0x36c>
   1967c:	teq	r1, #0
   19680:	moveq	r1, r0
   19684:	moveq	r0, #0
   19688:	clz	r3, r1
   1968c:	addeq	r3, r3, #32
   19690:	sub	r3, r3, #11
   19694:	subs	r2, r3, #32
   19698:	bge	196bc <flatcc_json_parser_table_as_root@@Base+0x3dc>
   1969c:	adds	r2, r2, #12
   196a0:	ble	196b8 <flatcc_json_parser_table_as_root@@Base+0x3d8>
   196a4:	add	ip, r2, #20
   196a8:	rsb	r2, r2, #12
   196ac:	lsl	r0, r1, ip
   196b0:	lsr	r1, r1, r2
   196b4:	b	196cc <flatcc_json_parser_table_as_root@@Base+0x3ec>
   196b8:	add	r2, r2, #20
   196bc:	rsble	ip, r2, #32
   196c0:	lsl	r1, r1, r2
   196c4:	orrle	r1, r1, r0, lsr ip
   196c8:	lslle	r0, r0, r2
   196cc:	subs	r4, r4, r3
   196d0:	addge	r1, r1, r4, lsl #20
   196d4:	orrge	r1, r1, r5
   196d8:	popge	{r4, r5, pc}
   196dc:	mvn	r4, r4
   196e0:	subs	r4, r4, #31
   196e4:	bge	19720 <flatcc_json_parser_table_as_root@@Base+0x440>
   196e8:	adds	r4, r4, #12
   196ec:	bgt	19708 <flatcc_json_parser_table_as_root@@Base+0x428>
   196f0:	add	r4, r4, #20
   196f4:	rsb	r2, r4, #32
   196f8:	lsr	r0, r0, r4
   196fc:	orr	r0, r0, r1, lsl r2
   19700:	orr	r1, r5, r1, lsr r4
   19704:	pop	{r4, r5, pc}
   19708:	rsb	r4, r4, #12
   1970c:	rsb	r2, r4, #32
   19710:	lsr	r0, r0, r2
   19714:	orr	r0, r0, r1, lsl r4
   19718:	mov	r1, r5
   1971c:	pop	{r4, r5, pc}
   19720:	lsr	r0, r1, r4
   19724:	mov	r1, r5
   19728:	pop	{r4, r5, pc}
   1972c:	teq	r4, #0
   19730:	eor	r3, r3, #1048576	; 0x100000
   19734:	eoreq	r1, r1, #1048576	; 0x100000
   19738:	addeq	r4, r4, #1
   1973c:	subne	r5, r5, #1
   19740:	b	195cc <flatcc_json_parser_table_as_root@@Base+0x2ec>
   19744:	mvns	ip, r4, asr #21
   19748:	mvnsne	ip, r5, asr #21
   1974c:	beq	197b4 <flatcc_json_parser_table_as_root@@Base+0x4d4>
   19750:	teq	r4, r5
   19754:	teqeq	r0, r2
   19758:	beq	1976c <flatcc_json_parser_table_as_root@@Base+0x48c>
   1975c:	orrs	ip, r4, r0
   19760:	moveq	r1, r3
   19764:	moveq	r0, r2
   19768:	pop	{r4, r5, pc}
   1976c:	teq	r1, r3
   19770:	movne	r1, #0
   19774:	movne	r0, #0
   19778:	popne	{r4, r5, pc}
   1977c:	lsrs	ip, r4, #21
   19780:	bne	19794 <flatcc_json_parser_table_as_root@@Base+0x4b4>
   19784:	lsls	r0, r0, #1
   19788:	adcs	r1, r1, r1
   1978c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   19790:	pop	{r4, r5, pc}
   19794:	adds	r4, r4, #4194304	; 0x400000
   19798:	addcc	r1, r1, #1048576	; 0x100000
   1979c:	popcc	{r4, r5, pc}
   197a0:	and	r5, r1, #-2147483648	; 0x80000000
   197a4:	orr	r1, r5, #2130706432	; 0x7f000000
   197a8:	orr	r1, r1, #15728640	; 0xf00000
   197ac:	mov	r0, #0
   197b0:	pop	{r4, r5, pc}
   197b4:	mvns	ip, r4, asr #21
   197b8:	movne	r1, r3
   197bc:	movne	r0, r2
   197c0:	mvnseq	ip, r5, asr #21
   197c4:	movne	r3, r1
   197c8:	movne	r2, r0
   197cc:	orrs	r4, r0, r1, lsl #12
   197d0:	orrseq	r5, r2, r3, lsl #12
   197d4:	teqeq	r1, r3
   197d8:	orrne	r1, r1, #524288	; 0x80000
   197dc:	pop	{r4, r5, pc}
   197e0:	teq	r0, #0
   197e4:	moveq	r1, #0
   197e8:	bxeq	lr
   197ec:	push	{r4, r5, lr}
   197f0:	mov	r4, #1024	; 0x400
   197f4:	add	r4, r4, #50	; 0x32
   197f8:	mov	r5, #0
   197fc:	mov	r1, #0
   19800:	b	1967c <flatcc_json_parser_table_as_root@@Base+0x39c>
   19804:	teq	r0, #0
   19808:	moveq	r1, #0
   1980c:	bxeq	lr
   19810:	push	{r4, r5, lr}
   19814:	mov	r4, #1024	; 0x400
   19818:	add	r4, r4, #50	; 0x32
   1981c:	ands	r5, r0, #-2147483648	; 0x80000000
   19820:	rsbmi	r0, r0, #0
   19824:	mov	r1, #0
   19828:	b	1967c <flatcc_json_parser_table_as_root@@Base+0x39c>
   1982c:	lsls	r2, r0, #1
   19830:	asr	r1, r2, #3
   19834:	rrx	r1, r1
   19838:	lsl	r0, r2, #28
   1983c:	andsne	r3, r2, #-16777216	; 0xff000000
   19840:	teqne	r3, #-16777216	; 0xff000000
   19844:	eorne	r1, r1, #939524096	; 0x38000000
   19848:	bxne	lr
   1984c:	teq	r2, #0
   19850:	teqne	r3, #-16777216	; 0xff000000
   19854:	bxeq	lr
   19858:	push	{r4, r5, lr}
   1985c:	mov	r4, #896	; 0x380
   19860:	and	r5, r1, #-2147483648	; 0x80000000
   19864:	bic	r1, r1, #-2147483648	; 0x80000000
   19868:	b	1967c <flatcc_json_parser_table_as_root@@Base+0x39c>
   1986c:	orrs	r2, r0, r1
   19870:	bxeq	lr
   19874:	push	{r4, r5, lr}
   19878:	mov	r5, #0
   1987c:	b	1989c <flatcc_json_parser_table_as_root@@Base+0x5bc>
   19880:	orrs	r2, r0, r1
   19884:	bxeq	lr
   19888:	push	{r4, r5, lr}
   1988c:	ands	r5, r1, #-2147483648	; 0x80000000
   19890:	bpl	1989c <flatcc_json_parser_table_as_root@@Base+0x5bc>
   19894:	rsbs	r0, r0, #0
   19898:	rsc	r1, r1, #0
   1989c:	mov	r4, #1024	; 0x400
   198a0:	add	r4, r4, #50	; 0x32
   198a4:	lsrs	ip, r1, #22
   198a8:	beq	19620 <flatcc_json_parser_table_as_root@@Base+0x340>
   198ac:	mov	r2, #3
   198b0:	lsrs	ip, ip, #3
   198b4:	addne	r2, r2, #3
   198b8:	lsrs	ip, ip, #3
   198bc:	addne	r2, r2, #3
   198c0:	add	r2, r2, ip, lsr #3
   198c4:	rsb	r3, r2, #32
   198c8:	lsl	ip, r0, r3
   198cc:	lsr	r0, r0, r2
   198d0:	orr	r0, r0, r1, lsl r3
   198d4:	lsr	r1, r1, r2
   198d8:	add	r4, r4, r2
   198dc:	b	19620 <flatcc_json_parser_table_as_root@@Base+0x340>
   198e0:	push	{r1, lr}
   198e4:	mov	r0, #8
   198e8:	bl	12448 <raise@plt>
   198ec:	pop	{r1, pc}

000198f0 <__libc_csu_init@@Base>:
   198f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   198f4:	mov	r7, r0
   198f8:	ldr	r6, [pc, #72]	; 19948 <__libc_csu_init@@Base+0x58>
   198fc:	ldr	r5, [pc, #72]	; 1994c <__libc_csu_init@@Base+0x5c>
   19900:	add	r6, pc, r6
   19904:	add	r5, pc, r5
   19908:	sub	r6, r6, r5
   1990c:	mov	r8, r1
   19910:	mov	r9, r2
   19914:	bl	12428 <raise@plt-0x20>
   19918:	asrs	r6, r6, #2
   1991c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19920:	mov	r4, #0
   19924:	add	r4, r4, #1
   19928:	ldr	r3, [r5], #4
   1992c:	mov	r2, r9
   19930:	mov	r1, r8
   19934:	mov	r0, r7
   19938:	blx	r3
   1993c:	cmp	r6, r4
   19940:	bne	19924 <__libc_csu_init@@Base+0x34>
   19944:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19948:	andeq	r2, r1, r8, lsl #12
   1994c:	andeq	r2, r1, r0, lsl #12

00019950 <__libc_csu_fini@@Base>:
   19950:	bx	lr

Disassembly of section .fini:

00019954 <.fini>:
   19954:	push	{r3, lr}
   19958:	pop	{r3, pc}
