
../repos/charybdis/modules/.libs/m_map.so:     file format elf32-littlearm


Disassembly of section .init:

00000584 <_init>:
 584:	push	{r3, lr}
 588:	bl	610 <call_weak_fn>
 58c:	pop	{r3, pc}

Disassembly of section .plt:

00000590 <.plt>:
 590:	push	{lr}		; (str lr, [sp, #-4]!)
 594:	ldr	lr, [pc, #4]	; 5a0 <.plt+0x10>
 598:	add	lr, pc, lr
 59c:	ldr	pc, [lr, #8]!
 5a0:	.word	0x00011a60

000005a4 <raise@plt>:
 5a4:	add	ip, pc, #0, 12
 5a8:	add	ip, ip, #69632	; 0x11000
 5ac:	ldr	pc, [ip, #2656]!	; 0xa60

000005b0 <__cxa_finalize@plt>:
 5b0:	add	ip, pc, #0, 12
 5b4:	add	ip, ip, #69632	; 0x11000
 5b8:	ldr	pc, [ip, #2648]!	; 0xa58

000005bc <__gmon_start__@plt>:
 5bc:	add	ip, pc, #0, 12
 5c0:	add	ip, ip, #69632	; 0x11000
 5c4:	ldr	pc, [ip, #2640]!	; 0xa50

000005c8 <sendto_one_numeric@plt>:
 5c8:	add	ip, pc, #0, 12
 5cc:	add	ip, ip, #69632	; 0x11000
 5d0:	ldr	pc, [ip, #2632]!	; 0xa48

000005d4 <strlen@plt>:
 5d4:	add	ip, pc, #0, 12
 5d8:	add	ip, ip, #69632	; 0x11000
 5dc:	ldr	pc, [ip, #2624]!	; 0xa40

000005e0 <snprintf@plt>:
 5e0:	add	ip, pc, #0, 12
 5e4:	add	ip, ip, #69632	; 0x11000
 5e8:	ldr	pc, [ip, #2616]!	; 0xa38

000005ec <scache_send_missing@plt>:
 5ec:	add	ip, pc, #0, 12
 5f0:	add	ip, ip, #69632	; 0x11000
 5f4:	ldr	pc, [ip, #2608]!	; 0xa30

000005f8 <rb_strlcpy@plt>:
 5f8:	add	ip, pc, #0, 12
 5fc:	add	ip, ip, #69632	; 0x11000
 600:	ldr	pc, [ip, #2600]!	; 0xa28

00000604 <rb_strlcat@plt>:
 604:	add	ip, pc, #0, 12
 608:	add	ip, ip, #69632	; 0x11000
 60c:	ldr	pc, [ip, #2592]!	; 0xa20

Disassembly of section .text:

00000610 <call_weak_fn>:
 610:	ldr	r3, [pc, #20]	; 62c <call_weak_fn+0x1c>
 614:	ldr	r2, [pc, #20]	; 630 <call_weak_fn+0x20>
 618:	add	r3, pc, r3
 61c:	ldr	r2, [r3, r2]
 620:	cmp	r2, #0
 624:	bxeq	lr
 628:	b	5bc <__gmon_start__@plt>
 62c:	.word	0x000119e0
 630:	.word	0x00000044

00000634 <deregister_tm_clones>:
 634:	ldr	r3, [pc, #52]	; 670 <deregister_tm_clones+0x3c>
 638:	ldr	r0, [pc, #52]	; 674 <deregister_tm_clones+0x40>
 63c:	add	r3, pc, r3
 640:	add	r0, pc, r0
 644:	add	r3, r3, #3
 648:	sub	r3, r3, r0
 64c:	cmp	r3, #6
 650:	ldr	r3, [pc, #32]	; 678 <deregister_tm_clones+0x44>
 654:	add	r3, pc, r3
 658:	bxls	lr
 65c:	ldr	r2, [pc, #24]	; 67c <deregister_tm_clones+0x48>
 660:	ldr	r3, [r3, r2]
 664:	cmp	r3, #0
 668:	bxeq	lr
 66c:	bx	r3
 670:	.word	0x00011a8c
 674:	.word	0x00011a88
 678:	.word	0x000119a4
 67c:	.word	0x00000038

00000680 <register_tm_clones>:
 680:	ldr	r1, [pc, #56]	; 6c0 <register_tm_clones+0x40>
 684:	ldr	r0, [pc, #56]	; 6c4 <register_tm_clones+0x44>
 688:	add	r1, pc, r1
 68c:	add	r0, pc, r0
 690:	sub	r1, r1, r0
 694:	ldr	r3, [pc, #44]	; 6c8 <register_tm_clones+0x48>
 698:	asr	r1, r1, #2
 69c:	add	r3, pc, r3
 6a0:	add	r1, r1, r1, lsr #31
 6a4:	asrs	r1, r1, #1
 6a8:	bxeq	lr
 6ac:	ldr	r2, [pc, #24]	; 6cc <register_tm_clones+0x4c>
 6b0:	ldr	r3, [r3, r2]
 6b4:	cmp	r3, #0
 6b8:	bxeq	lr
 6bc:	bx	r3
 6c0:	.word	0x00011a40
 6c4:	.word	0x00011a3c
 6c8:	.word	0x0001195c
 6cc:	.word	0x0000004c

000006d0 <__do_global_dtors_aux>:
 6d0:	ldr	r3, [pc, #76]	; 724 <__do_global_dtors_aux+0x54>
 6d4:	ldr	r2, [pc, #76]	; 728 <__do_global_dtors_aux+0x58>
 6d8:	add	r3, pc, r3
 6dc:	add	r2, pc, r2
 6e0:	ldrb	r3, [r3]
 6e4:	cmp	r3, #0
 6e8:	bxne	lr
 6ec:	ldr	r3, [pc, #56]	; 72c <__do_global_dtors_aux+0x5c>
 6f0:	push	{r4, lr}
 6f4:	ldr	r3, [r2, r3]
 6f8:	cmp	r3, #0
 6fc:	beq	70c <__do_global_dtors_aux+0x3c>
 700:	ldr	r3, [pc, #40]	; 730 <__do_global_dtors_aux+0x60>
 704:	ldr	r0, [pc, r3]
 708:	bl	5b0 <__cxa_finalize@plt>
 70c:	bl	634 <deregister_tm_clones>
 710:	ldr	r3, [pc, #28]	; 734 <__do_global_dtors_aux+0x64>
 714:	mov	r2, #1
 718:	add	r3, pc, r3
 71c:	strb	r2, [r3]
 720:	pop	{r4, pc}
 724:	.word	0x000119f0
 728:	.word	0x0001191c
 72c:	.word	0x00000034
 730:	.word	0x0001194c
 734:	.word	0x000119b0

00000738 <frame_dummy>:
 738:	ldr	r0, [pc, #56]	; 778 <frame_dummy+0x40>
 73c:	ldr	r3, [pc, #56]	; 77c <frame_dummy+0x44>
 740:	add	r0, pc, r0
 744:	ldr	r2, [r0]
 748:	add	r3, pc, r3
 74c:	cmp	r2, #0
 750:	bne	758 <frame_dummy+0x20>
 754:	b	680 <register_tm_clones>
 758:	ldr	r2, [pc, #32]	; 780 <frame_dummy+0x48>
 75c:	ldr	r3, [r3, r2]
 760:	cmp	r3, #0
 764:	beq	754 <frame_dummy+0x1c>
 768:	push	{r4, lr}
 76c:	blx	r3
 770:	pop	{r4, lr}
 774:	b	680 <register_tm_clones>
 778:	.word	0x000117b4
 77c:	.word	0x000118b0
 780:	.word	0x00000048

00000784 <dump_map>:
 784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 788:	mov	r3, #0
 78c:	mov	r6, r1
 790:	strb	r3, [r2]
 794:	sub	sp, sp, #12
 798:	mov	r4, r2
 79c:	mov	r7, r0
 7a0:	add	r1, r1, #88	; 0x58
 7a4:	mov	r0, r2
 7a8:	mov	r2, #512	; 0x200
 7ac:	bl	604 <rb_strlcat@plt>
 7b0:	ldrb	r3, [r6, #396]	; 0x18c
 7b4:	ldr	r8, [pc, #428]	; 968 <dump_map+0x1e4>
 7b8:	cmp	r3, #0
 7bc:	add	r8, pc, r8
 7c0:	bne	92c <dump_map+0x1a8>
 7c4:	ldr	r5, [pc, #416]	; 96c <dump_map+0x1e8>
 7c8:	add	r5, pc, r5
 7cc:	mov	r0, r5
 7d0:	bl	5d4 <strlen@plt>
 7d4:	mov	r3, #32
 7d8:	sub	r2, r0, #49	; 0x31
 7dc:	cmn	r2, #-2147483598	; 0x80000032
 7e0:	strb	r3, [r5, r0]
 7e4:	addhi	r2, r5, #49	; 0x31
 7e8:	addhi	r3, r5, r0
 7ec:	movhi	r1, #45	; 0x2d
 7f0:	bls	800 <dump_map+0x7c>
 7f4:	strb	r1, [r3, #1]!
 7f8:	cmp	r2, r3
 7fc:	bne	7f4 <dump_map+0x70>
 800:	ldr	r3, [pc, #360]	; 970 <dump_map+0x1ec>
 804:	ldr	r2, [r6, #28]
 808:	mov	r0, #1000	; 0x3e8
 80c:	ldr	r3, [r8, r3]
 810:	ldr	r5, [r2, #56]	; 0x38
 814:	ldr	r9, [pc, #344]	; 974 <dump_map+0x1f0>
 818:	ldr	r2, [r3, #4]
 81c:	add	r9, pc, r9
 820:	mov	r1, r2
 824:	add	r2, r2, r2, lsr #31
 828:	asr	r2, r2, #1
 82c:	mla	r0, r0, r5, r2
 830:	bl	cfc <__udivsi3>
 834:	mov	r3, r5
 838:	mov	ip, r0
 83c:	ldr	r0, [pc, #308]	; 978 <dump_map+0x1f4>
 840:	asr	r1, ip, #31
 844:	smull	r2, r0, r0, ip
 848:	ldr	r2, [pc, #300]	; 97c <dump_map+0x1f8>
 84c:	rsb	r1, r1, r0, asr #2
 850:	str	r1, [sp]
 854:	add	r1, r1, r1, lsl #2
 858:	add	r2, pc, r2
 85c:	sub	r1, ip, r1, lsl #1
 860:	str	r1, [sp, #4]
 864:	add	r0, r9, #50	; 0x32
 868:	ldr	r1, [pc, #272]	; 980 <dump_map+0x1fc>
 86c:	bl	5e0 <snprintf@plt>
 870:	ldr	r2, [pc, #268]	; 984 <dump_map+0x200>
 874:	mov	r3, r9
 878:	add	r2, pc, r2
 87c:	mov	r1, #15
 880:	mov	r0, r7
 884:	bl	5c8 <sendto_one_numeric@plt>
 888:	ldr	r3, [r6, #28]
 88c:	ldr	r5, [r3, #36]	; 0x24
 890:	cmp	r5, #0
 894:	beq	924 <dump_map+0x1a0>
 898:	ldr	r8, [r3, #44]	; 0x2c
 89c:	cmp	r8, #0
 8a0:	beq	8d4 <dump_map+0x150>
 8a4:	add	r9, r9, #3
 8a8:	cmp	r4, r9
 8ac:	bls	8d4 <dump_map+0x150>
 8b0:	ldrb	r2, [r4, #-3]
 8b4:	mov	r3, #32
 8b8:	strb	r3, [r4, #-2]
 8bc:	cmp	r2, #96	; 0x60
 8c0:	strbeq	r3, [r4, #-3]
 8c4:	ldr	r3, [r6, #28]
 8c8:	ldr	r5, [r3, #36]	; 0x24
 8cc:	cmp	r5, #0
 8d0:	beq	924 <dump_map+0x1a0>
 8d4:	add	fp, r4, #4
 8d8:	mov	r6, #1
 8dc:	mov	r9, #32
 8e0:	mov	sl, #96	; 0x60
 8e4:	cmp	r8, r6
 8e8:	movle	r3, sl
 8ec:	movgt	r3, #124	; 0x7c
 8f0:	ldr	r1, [r5]
 8f4:	strb	r3, [r4, #1]
 8f8:	mov	r3, #45	; 0x2d
 8fc:	strb	r9, [r4]
 900:	strb	r3, [r4, #2]
 904:	strb	r9, [r4, #3]
 908:	mov	r2, fp
 90c:	mov	r0, r7
 910:	bl	784 <dump_map>
 914:	ldr	r5, [r5, #8]
 918:	add	r6, r6, #1
 91c:	cmp	r5, #0
 920:	bne	8e4 <dump_map+0x160>
 924:	add	sp, sp, #12
 928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 92c:	ldr	r1, [pc, #84]	; 988 <dump_map+0x204>
 930:	mov	r2, #512	; 0x200
 934:	add	r1, pc, r1
 938:	mov	r0, r4
 93c:	bl	604 <rb_strlcat@plt>
 940:	add	r1, r6, #396	; 0x18c
 944:	mov	r2, #512	; 0x200
 948:	mov	r0, r4
 94c:	bl	604 <rb_strlcat@plt>
 950:	ldr	r1, [pc, #52]	; 98c <dump_map+0x208>
 954:	mov	r2, #512	; 0x200
 958:	add	r1, pc, r1
 95c:	mov	r0, r4
 960:	bl	604 <rb_strlcat@plt>
 964:	b	7c4 <dump_map+0x40>
 968:	.word	0x0001183c
 96c:	.word	0x00011904
 970:	.word	0x0000003c
 974:	.word	0x000118b0
 978:	.word	0x66666667
 97c:	.word	0x00000708
 980:	.word	0x000001ce
 984:	.word	0x00000704
 988:	.word	0x00000624
 98c:	.word	0x00000604

00000990 <mo_map>:
 990:	ldr	r3, [pc, #64]	; 9d8 <mo_map+0x48>
 994:	ldr	r2, [pc, #64]	; 9dc <mo_map+0x4c>
 998:	add	r3, pc, r3
 99c:	push	{r4, lr}
 9a0:	mov	r0, r1
 9a4:	mov	r4, r1
 9a8:	ldr	r1, [r3, r2]
 9ac:	ldr	r2, [pc, #44]	; 9e0 <mo_map+0x50>
 9b0:	add	r2, pc, r2
 9b4:	bl	784 <dump_map>
 9b8:	mov	r0, r4
 9bc:	bl	5ec <scache_send_missing@plt>
 9c0:	ldr	r2, [pc, #28]	; 9e4 <mo_map+0x54>
 9c4:	mov	r0, r4
 9c8:	add	r2, pc, r2
 9cc:	mov	r1, #17
 9d0:	pop	{r4, lr}
 9d4:	b	5c8 <sendto_one_numeric@plt>
 9d8:	.word	0x00011660
 9dc:	.word	0x00000050
 9e0:	.word	0x0001171c
 9e4:	.word	0x000005b8

000009e8 <flattened_map>:
 9e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 9ec:	vpush	{d8}
 9f0:	ldr	r7, [pc, #540]	; c14 <flattened_map+0x22c>
 9f4:	ldr	r3, [pc, #540]	; c18 <flattened_map+0x230>
 9f8:	add	r7, pc, r7
 9fc:	sub	sp, sp, #540	; 0x21c
 a00:	ldr	r4, [r7, r3]
 a04:	add	r5, sp, #24
 a08:	add	r1, r4, #88	; 0x58
 a0c:	mov	r2, #512	; 0x200
 a10:	mov	r8, r0
 a14:	mov	r0, r5
 a18:	bl	5f8 <rb_strlcpy@plt>
 a1c:	mov	r0, r5
 a20:	bl	5d4 <strlen@plt>
 a24:	add	r3, sp, #536	; 0x218
 a28:	mov	r2, #32
 a2c:	add	r3, r3, r0
 a30:	sub	r1, r0, #49	; 0x31
 a34:	cmn	r1, #-2147483598	; 0x80000032
 a38:	strb	r2, [r3, #-512]	; 0xfffffe00
 a3c:	addhi	r1, r5, #49	; 0x31
 a40:	addhi	r3, r5, r0
 a44:	movhi	r2, #45	; 0x2d
 a48:	bls	a58 <flattened_map+0x70>
 a4c:	strb	r2, [r3, #1]!
 a50:	cmp	r1, r3
 a54:	bne	a4c <flattened_map+0x64>
 a58:	ldr	r2, [r4, #28]
 a5c:	ldr	r3, [pc, #440]	; c1c <flattened_map+0x234>
 a60:	vldr	s16, [pc, #424]	; c10 <flattened_map+0x228>
 a64:	ldr	r2, [r2, #56]	; 0x38
 a68:	ldr	sl, [r7, r3]
 a6c:	mov	r3, r2
 a70:	vmov	s15, r2
 a74:	vldr	s14, [sl, #4]
 a78:	ldr	r2, [pc, #416]	; c20 <flattened_map+0x238>
 a7c:	ldr	r1, [pc, #416]	; c24 <flattened_map+0x23c>
 a80:	vcvt.f32.u32	s15, s15
 a84:	vcvt.f32.s32	s13, s14
 a88:	add	r2, pc, r2
 a8c:	add	r0, r5, #50	; 0x32
 a90:	vmul.f32	s15, s15, s16
 a94:	vdiv.f32	s14, s15, s13
 a98:	vcvt.f64.f32	d7, s14
 a9c:	vstr	d7, [sp]
 aa0:	bl	5e0 <snprintf@plt>
 aa4:	ldr	r2, [pc, #380]	; c28 <flattened_map+0x240>
 aa8:	mov	r3, r5
 aac:	add	r2, pc, r2
 ab0:	mov	r1, #15
 ab4:	mov	r0, r8
 ab8:	bl	5c8 <sendto_one_numeric@plt>
 abc:	ldr	r3, [pc, #360]	; c2c <flattened_map+0x244>
 ac0:	ldr	r9, [r7, r3]
 ac4:	ldr	r4, [r9]
 ac8:	cmp	r4, #0
 acc:	beq	c04 <flattened_map+0x21c>
 ad0:	ldr	r3, [pc, #344]	; c30 <flattened_map+0x248>
 ad4:	mov	r6, #0
 ad8:	add	r3, pc, r3
 adc:	str	r3, [sp, #8]
 ae0:	ldr	r3, [pc, #332]	; c34 <flattened_map+0x24c>
 ae4:	add	r3, pc, r3
 ae8:	str	r3, [sp, #12]
 aec:	ldr	r3, [pc, #324]	; c38 <flattened_map+0x250>
 af0:	add	r3, pc, r3
 af4:	str	r3, [sp, #16]
 af8:	ldr	r3, [pc, #316]	; c3c <flattened_map+0x254>
 afc:	add	r3, pc, r3
 b00:	str	r3, [sp, #20]
 b04:	ldr	fp, [r4]
 b08:	add	r6, r6, #1
 b0c:	ldrh	r2, [fp, #80]	; 0x50
 b10:	cmp	r2, #4
 b14:	beq	bf8 <flattened_map+0x210>
 b18:	ldr	r2, [pc, #288]	; c40 <flattened_map+0x258>
 b1c:	ldr	r2, [r7, r2]
 b20:	ldr	r2, [r2, #12]
 b24:	cmp	r2, #0
 b28:	bne	b40 <flattened_map+0x158>
 b2c:	ldrd	r0, [fp, #64]	; 0x40
 b30:	mov	r3, #0
 b34:	and	r2, r0, #2048	; 0x800
 b38:	orrs	r3, r2, r3
 b3c:	bne	bf8 <flattened_map+0x210>
 b40:	ldr	r2, [r9, #8]
 b44:	mov	r0, r5
 b48:	cmp	r6, r2
 b4c:	mov	r2, #512	; 0x200
 b50:	ldreq	r1, [sp, #20]
 b54:	ldrne	r1, [sp, #16]
 b58:	bl	5f8 <rb_strlcpy@plt>
 b5c:	mov	r2, #512	; 0x200
 b60:	add	r1, fp, #88	; 0x58
 b64:	mov	r0, r5
 b68:	bl	604 <rb_strlcat@plt>
 b6c:	mov	r0, r5
 b70:	bl	5d4 <strlen@plt>
 b74:	add	r3, sp, #536	; 0x218
 b78:	mov	r1, #32
 b7c:	add	r2, r3, r0
 b80:	sub	ip, r0, #49	; 0x31
 b84:	cmn	ip, #-2147483598	; 0x80000032
 b88:	strb	r1, [r2, #-512]	; 0xfffffe00
 b8c:	addhi	r2, r5, r0
 b90:	movhi	r1, #45	; 0x2d
 b94:	addhi	r0, r5, #49	; 0x31
 b98:	bls	ba8 <flattened_map+0x1c0>
 b9c:	strb	r1, [r2, #1]!
 ba0:	cmp	r0, r2
 ba4:	bne	b9c <flattened_map+0x1b4>
 ba8:	ldr	r3, [fp, #28]
 bac:	vldr	s15, [sl, #4]
 bb0:	ldr	r2, [sp, #8]
 bb4:	ldr	r1, [r3, #56]	; 0x38
 bb8:	add	r0, r5, #50	; 0x32
 bbc:	vcvt.f32.s32	s13, s15
 bc0:	vmov	s15, r1
 bc4:	mov	r3, r1
 bc8:	ldr	r1, [pc, #84]	; c24 <flattened_map+0x23c>
 bcc:	vcvt.f32.u32	s15, s15
 bd0:	vmul.f32	s15, s15, s16
 bd4:	vdiv.f32	s14, s15, s13
 bd8:	vcvt.f64.f32	d7, s14
 bdc:	vstr	d7, [sp]
 be0:	bl	5e0 <snprintf@plt>
 be4:	mov	r3, r5
 be8:	ldr	r2, [sp, #12]
 bec:	mov	r1, #15
 bf0:	mov	r0, r8
 bf4:	bl	5c8 <sendto_one_numeric@plt>
 bf8:	ldr	r4, [r4, #8]
 bfc:	cmp	r4, #0
 c00:	bne	b04 <flattened_map+0x11c>
 c04:	add	sp, sp, #540	; 0x21c
 c08:	vpop	{d8}
 c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c10:	.word	0x42c80000
 c14:	.word	0x00011600
 c18:	.word	0x00000050
 c1c:	.word	0x0000003c
 c20:	.word	0x00000508
 c24:	.word	0x000001ce
 c28:	.word	0x000004d0
 c2c:	.word	0x00000030
 c30:	.word	0x000004b8
 c34:	.word	0x00000498
 c38:	.word	0x000004c4
 c3c:	.word	0x000004b0
 c40:	.word	0x00000040

00000c44 <m_map>:
 c44:	ldrd	r2, [r2, #64]	; 0x40
 c48:	push	{r4, lr}
 c4c:	mov	r3, #0
 c50:	mov	r4, r1
 c54:	and	r2, r2, #67108864	; 0x4000000
 c58:	ldr	r1, [pc, #128]	; ce0 <m_map+0x9c>
 c5c:	orrs	r3, r2, r3
 c60:	add	r1, pc, r1
 c64:	bne	c7c <m_map+0x38>
 c68:	ldr	r3, [pc, #116]	; ce4 <m_map+0xa0>
 c6c:	ldr	r3, [r1, r3]
 c70:	ldr	r3, [r3]
 c74:	cmp	r3, #0
 c78:	bne	c90 <m_map+0x4c>
 c7c:	ldr	r3, [pc, #100]	; ce8 <m_map+0xa4>
 c80:	ldr	r3, [r1, r3]
 c84:	ldr	r3, [r3, #176]	; 0xb0
 c88:	cmp	r3, #0
 c8c:	beq	cb0 <m_map+0x6c>
 c90:	mov	r0, r4
 c94:	bl	9e8 <flattened_map>
 c98:	ldr	r2, [pc, #76]	; cec <m_map+0xa8>
 c9c:	mov	r0, r4
 ca0:	add	r2, pc, r2
 ca4:	mov	r1, #17
 ca8:	pop	{r4, lr}
 cac:	b	5c8 <sendto_one_numeric@plt>
 cb0:	ldr	r3, [pc, #56]	; cf0 <m_map+0xac>
 cb4:	ldr	r2, [pc, #56]	; cf4 <m_map+0xb0>
 cb8:	mov	r0, r4
 cbc:	add	r2, pc, r2
 cc0:	ldr	r1, [r1, r3]
 cc4:	bl	784 <dump_map>
 cc8:	ldr	r2, [pc, #40]	; cf8 <m_map+0xb4>
 ccc:	mov	r0, r4
 cd0:	add	r2, pc, r2
 cd4:	mov	r1, #17
 cd8:	pop	{r4, lr}
 cdc:	b	5c8 <sendto_one_numeric@plt>
 ce0:	.word	0x00011398
 ce4:	.word	0x00000040
 ce8:	.word	0x00000054
 cec:	.word	0x000002e0
 cf0:	.word	0x00000050
 cf4:	.word	0x00011410
 cf8:	.word	0x000002b0

00000cfc <__udivsi3>:
 cfc:	subs	r2, r1, #1
 d00:	bxeq	lr
 d04:	bcc	edc <__udivsi3+0x1e0>
 d08:	cmp	r0, r1
 d0c:	bls	ec0 <__udivsi3+0x1c4>
 d10:	tst	r1, r2
 d14:	beq	ecc <__udivsi3+0x1d0>
 d18:	clz	r3, r0
 d1c:	clz	r2, r1
 d20:	sub	r3, r2, r3
 d24:	rsbs	r3, r3, #31
 d28:	addne	r3, r3, r3, lsl #1
 d2c:	mov	r2, #0
 d30:	addne	pc, pc, r3, lsl #2
 d34:	nop			; (mov r0, r0)
 d38:	cmp	r0, r1, lsl #31
 d3c:	adc	r2, r2, r2
 d40:	subcs	r0, r0, r1, lsl #31
 d44:	cmp	r0, r1, lsl #30
 d48:	adc	r2, r2, r2
 d4c:	subcs	r0, r0, r1, lsl #30
 d50:	cmp	r0, r1, lsl #29
 d54:	adc	r2, r2, r2
 d58:	subcs	r0, r0, r1, lsl #29
 d5c:	cmp	r0, r1, lsl #28
 d60:	adc	r2, r2, r2
 d64:	subcs	r0, r0, r1, lsl #28
 d68:	cmp	r0, r1, lsl #27
 d6c:	adc	r2, r2, r2
 d70:	subcs	r0, r0, r1, lsl #27
 d74:	cmp	r0, r1, lsl #26
 d78:	adc	r2, r2, r2
 d7c:	subcs	r0, r0, r1, lsl #26
 d80:	cmp	r0, r1, lsl #25
 d84:	adc	r2, r2, r2
 d88:	subcs	r0, r0, r1, lsl #25
 d8c:	cmp	r0, r1, lsl #24
 d90:	adc	r2, r2, r2
 d94:	subcs	r0, r0, r1, lsl #24
 d98:	cmp	r0, r1, lsl #23
 d9c:	adc	r2, r2, r2
 da0:	subcs	r0, r0, r1, lsl #23
 da4:	cmp	r0, r1, lsl #22
 da8:	adc	r2, r2, r2
 dac:	subcs	r0, r0, r1, lsl #22
 db0:	cmp	r0, r1, lsl #21
 db4:	adc	r2, r2, r2
 db8:	subcs	r0, r0, r1, lsl #21
 dbc:	cmp	r0, r1, lsl #20
 dc0:	adc	r2, r2, r2
 dc4:	subcs	r0, r0, r1, lsl #20
 dc8:	cmp	r0, r1, lsl #19
 dcc:	adc	r2, r2, r2
 dd0:	subcs	r0, r0, r1, lsl #19
 dd4:	cmp	r0, r1, lsl #18
 dd8:	adc	r2, r2, r2
 ddc:	subcs	r0, r0, r1, lsl #18
 de0:	cmp	r0, r1, lsl #17
 de4:	adc	r2, r2, r2
 de8:	subcs	r0, r0, r1, lsl #17
 dec:	cmp	r0, r1, lsl #16
 df0:	adc	r2, r2, r2
 df4:	subcs	r0, r0, r1, lsl #16
 df8:	cmp	r0, r1, lsl #15
 dfc:	adc	r2, r2, r2
 e00:	subcs	r0, r0, r1, lsl #15
 e04:	cmp	r0, r1, lsl #14
 e08:	adc	r2, r2, r2
 e0c:	subcs	r0, r0, r1, lsl #14
 e10:	cmp	r0, r1, lsl #13
 e14:	adc	r2, r2, r2
 e18:	subcs	r0, r0, r1, lsl #13
 e1c:	cmp	r0, r1, lsl #12
 e20:	adc	r2, r2, r2
 e24:	subcs	r0, r0, r1, lsl #12
 e28:	cmp	r0, r1, lsl #11
 e2c:	adc	r2, r2, r2
 e30:	subcs	r0, r0, r1, lsl #11
 e34:	cmp	r0, r1, lsl #10
 e38:	adc	r2, r2, r2
 e3c:	subcs	r0, r0, r1, lsl #10
 e40:	cmp	r0, r1, lsl #9
 e44:	adc	r2, r2, r2
 e48:	subcs	r0, r0, r1, lsl #9
 e4c:	cmp	r0, r1, lsl #8
 e50:	adc	r2, r2, r2
 e54:	subcs	r0, r0, r1, lsl #8
 e58:	cmp	r0, r1, lsl #7
 e5c:	adc	r2, r2, r2
 e60:	subcs	r0, r0, r1, lsl #7
 e64:	cmp	r0, r1, lsl #6
 e68:	adc	r2, r2, r2
 e6c:	subcs	r0, r0, r1, lsl #6
 e70:	cmp	r0, r1, lsl #5
 e74:	adc	r2, r2, r2
 e78:	subcs	r0, r0, r1, lsl #5
 e7c:	cmp	r0, r1, lsl #4
 e80:	adc	r2, r2, r2
 e84:	subcs	r0, r0, r1, lsl #4
 e88:	cmp	r0, r1, lsl #3
 e8c:	adc	r2, r2, r2
 e90:	subcs	r0, r0, r1, lsl #3
 e94:	cmp	r0, r1, lsl #2
 e98:	adc	r2, r2, r2
 e9c:	subcs	r0, r0, r1, lsl #2
 ea0:	cmp	r0, r1, lsl #1
 ea4:	adc	r2, r2, r2
 ea8:	subcs	r0, r0, r1, lsl #1
 eac:	cmp	r0, r1
 eb0:	adc	r2, r2, r2
 eb4:	subcs	r0, r0, r1
 eb8:	mov	r0, r2
 ebc:	bx	lr
 ec0:	moveq	r0, #1
 ec4:	movne	r0, #0
 ec8:	bx	lr
 ecc:	clz	r2, r1
 ed0:	rsb	r2, r2, #31
 ed4:	lsr	r0, r0, r2
 ed8:	bx	lr
 edc:	cmp	r0, #0
 ee0:	mvnne	r0, #0
 ee4:	b	f08 <__aeabi_idiv0>

00000ee8 <__aeabi_uidivmod>:
 ee8:	cmp	r1, #0
 eec:	beq	edc <__udivsi3+0x1e0>
 ef0:	push	{r0, r1, lr}
 ef4:	bl	cfc <__udivsi3>
 ef8:	pop	{r1, r2, lr}
 efc:	mul	r3, r2, r0
 f00:	sub	r1, r1, r3
 f04:	bx	lr

00000f08 <__aeabi_idiv0>:
 f08:	push	{r1, lr}
 f0c:	mov	r0, #8
 f10:	bl	5a4 <raise@plt>
 f14:	pop	{r1, pc}

Disassembly of section .fini:

00000f18 <_fini>:
 f18:	push	{r3, lr}
 f1c:	pop	{r3, pc}
