
../repos/coreutils/src/head:     file format elf32-littlearm


Disassembly of section .init:

00010cb0 <.init>:
   10cb0:	push	{r3, lr}
   10cb4:	bl	12044 <__assert_fail@plt+0x10ec>
   10cb8:	pop	{r3, pc}

Disassembly of section .plt:

00010cbc <calloc@plt-0x14>:
   10cbc:	push	{lr}		; (str lr, [sp, #-4]!)
   10cc0:	ldr	lr, [pc, #4]	; 10ccc <calloc@plt-0x4>
   10cc4:	add	lr, pc, lr
   10cc8:	ldr	pc, [lr, #8]!
   10ccc:	andeq	r7, r1, r4, lsr r3

00010cd0 <calloc@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #94208	; 0x17000
   10cd8:	ldr	pc, [ip, #820]!	; 0x334

00010cdc <fputs_unlocked@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #94208	; 0x17000
   10ce4:	ldr	pc, [ip, #812]!	; 0x32c

00010ce8 <raise@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #94208	; 0x17000
   10cf0:	ldr	pc, [ip, #804]!	; 0x324

00010cf4 <strcmp@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #94208	; 0x17000
   10cfc:	ldr	pc, [ip, #796]!	; 0x31c

00010d00 <read@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #94208	; 0x17000
   10d08:	ldr	pc, [ip, #788]!	; 0x314

00010d0c <fflush@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #94208	; 0x17000
   10d14:	ldr	pc, [ip, #780]!	; 0x30c

00010d18 <free@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #94208	; 0x17000
   10d20:	ldr	pc, [ip, #772]!	; 0x304

00010d24 <_exit@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #94208	; 0x17000
   10d2c:	ldr	pc, [ip, #764]!	; 0x2fc

00010d30 <memcpy@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #94208	; 0x17000
   10d38:	ldr	pc, [ip, #756]!	; 0x2f4

00010d3c <__strtoull_internal@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #94208	; 0x17000
   10d44:	ldr	pc, [ip, #748]!	; 0x2ec

00010d48 <mbsinit@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #94208	; 0x17000
   10d50:	ldr	pc, [ip, #740]!	; 0x2e4

00010d54 <fwrite_unlocked@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #94208	; 0x17000
   10d5c:	ldr	pc, [ip, #732]!	; 0x2dc

00010d60 <memcmp@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #94208	; 0x17000
   10d68:	ldr	pc, [ip, #724]!	; 0x2d4

00010d6c <fputc_unlocked@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #94208	; 0x17000
   10d74:	ldr	pc, [ip, #716]!	; 0x2cc

00010d78 <dcgettext@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #94208	; 0x17000
   10d80:	ldr	pc, [ip, #708]!	; 0x2c4

00010d84 <realloc@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #94208	; 0x17000
   10d8c:	ldr	pc, [ip, #700]!	; 0x2bc

00010d90 <textdomain@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #94208	; 0x17000
   10d98:	ldr	pc, [ip, #692]!	; 0x2b4

00010d9c <rawmemchr@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #94208	; 0x17000
   10da4:	ldr	pc, [ip, #684]!	; 0x2ac

00010da8 <iswprint@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #94208	; 0x17000
   10db0:	ldr	pc, [ip, #676]!	; 0x2a4

00010db4 <__fxstat64@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #94208	; 0x17000
   10dbc:	ldr	pc, [ip, #668]!	; 0x29c

00010dc0 <fwrite@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #94208	; 0x17000
   10dc8:	ldr	pc, [ip, #660]!	; 0x294

00010dcc <lseek64@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #94208	; 0x17000
   10dd4:	ldr	pc, [ip, #652]!	; 0x28c

00010dd8 <__ctype_get_mb_cur_max@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #94208	; 0x17000
   10de0:	ldr	pc, [ip, #644]!	; 0x284

00010de4 <__fpending@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #94208	; 0x17000
   10dec:	ldr	pc, [ip, #636]!	; 0x27c

00010df0 <mbrtowc@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #94208	; 0x17000
   10df8:	ldr	pc, [ip, #628]!	; 0x274

00010dfc <error@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #94208	; 0x17000
   10e04:	ldr	pc, [ip, #620]!	; 0x26c

00010e08 <open64@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #94208	; 0x17000
   10e10:	ldr	pc, [ip, #612]!	; 0x264

00010e14 <malloc@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #94208	; 0x17000
   10e1c:	ldr	pc, [ip, #604]!	; 0x25c

00010e20 <__libc_start_main@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #94208	; 0x17000
   10e28:	ldr	pc, [ip, #596]!	; 0x254

00010e2c <__freading@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #94208	; 0x17000
   10e34:	ldr	pc, [ip, #588]!	; 0x24c

00010e38 <__gmon_start__@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #94208	; 0x17000
   10e40:	ldr	pc, [ip, #580]!	; 0x244

00010e44 <getopt_long@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #94208	; 0x17000
   10e4c:	ldr	pc, [ip, #572]!	; 0x23c

00010e50 <__ctype_b_loc@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #94208	; 0x17000
   10e58:	ldr	pc, [ip, #564]!	; 0x234

00010e5c <exit@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #94208	; 0x17000
   10e64:	ldr	pc, [ip, #556]!	; 0x22c

00010e68 <strlen@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #94208	; 0x17000
   10e70:	ldr	pc, [ip, #548]!	; 0x224

00010e74 <strchr@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #94208	; 0x17000
   10e7c:	ldr	pc, [ip, #540]!	; 0x21c

00010e80 <memrchr@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #94208	; 0x17000
   10e88:	ldr	pc, [ip, #532]!	; 0x214

00010e8c <__errno_location@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #94208	; 0x17000
   10e94:	ldr	pc, [ip, #524]!	; 0x20c

00010e98 <__cxa_atexit@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #94208	; 0x17000
   10ea0:	ldr	pc, [ip, #516]!	; 0x204

00010ea4 <memset@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #94208	; 0x17000
   10eac:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb0 <__printf_chk@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #94208	; 0x17000
   10eb8:	ldr	pc, [ip, #500]!	; 0x1f4

00010ebc <fileno@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #94208	; 0x17000
   10ec4:	ldr	pc, [ip, #492]!	; 0x1ec

00010ec8 <__fprintf_chk@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #94208	; 0x17000
   10ed0:	ldr	pc, [ip, #484]!	; 0x1e4

00010ed4 <memchr@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #94208	; 0x17000
   10edc:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee0 <fclose@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #94208	; 0x17000
   10ee8:	ldr	pc, [ip, #468]!	; 0x1d4

00010eec <fseeko64@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #94208	; 0x17000
   10ef4:	ldr	pc, [ip, #460]!	; 0x1cc

00010ef8 <setlocale@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #94208	; 0x17000
   10f00:	ldr	pc, [ip, #452]!	; 0x1c4

00010f04 <strrchr@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #94208	; 0x17000
   10f0c:	ldr	pc, [ip, #444]!	; 0x1bc

00010f10 <nl_langinfo@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #94208	; 0x17000
   10f18:	ldr	pc, [ip, #436]!	; 0x1b4

00010f1c <clearerr_unlocked@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #94208	; 0x17000
   10f24:	ldr	pc, [ip, #428]!	; 0x1ac

00010f28 <bindtextdomain@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #94208	; 0x17000
   10f30:	ldr	pc, [ip, #420]!	; 0x1a4

00010f34 <strncmp@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #94208	; 0x17000
   10f3c:	ldr	pc, [ip, #412]!	; 0x19c

00010f40 <abort@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #94208	; 0x17000
   10f48:	ldr	pc, [ip, #404]!	; 0x194

00010f4c <close@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #94208	; 0x17000
   10f54:	ldr	pc, [ip, #396]!	; 0x18c

00010f58 <__assert_fail@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #94208	; 0x17000
   10f60:	ldr	pc, [ip, #388]!	; 0x184

Disassembly of section .text:

00010f64 <.text>:
   10f64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f68:	mov	r5, r0
   10f6c:	sub	sp, sp, #244	; 0xf4
   10f70:	ldr	r0, [r1]
   10f74:	mov	r4, r1
   10f78:	bl	12ff0 <__assert_fail@plt+0x2098>
   10f7c:	ldr	r1, [pc, #3848]	; 11e8c <__assert_fail@plt+0xf34>
   10f80:	mov	r0, #6
   10f84:	bl	10ef8 <setlocale@plt>
   10f88:	ldr	r1, [pc, #3840]	; 11e90 <__assert_fail@plt+0xf38>
   10f8c:	ldr	r0, [pc, #3840]	; 11e94 <__assert_fail@plt+0xf3c>
   10f90:	bl	10f28 <bindtextdomain@plt>
   10f94:	ldr	fp, [pc, #3836]	; 11e98 <__assert_fail@plt+0xf40>
   10f98:	ldr	r0, [pc, #3828]	; 11e94 <__assert_fail@plt+0xf3c>
   10f9c:	bl	10d90 <textdomain@plt>
   10fa0:	ldr	r0, [pc, #3828]	; 11e9c <__assert_fail@plt+0xf44>
   10fa4:	bl	16d10 <__assert_fail@plt+0x5db8>
   10fa8:	mov	r3, #0
   10fac:	mov	r2, #10
   10fb0:	cmp	r5, #1
   10fb4:	strb	r2, [fp]
   10fb8:	strb	r3, [fp, #1]
   10fbc:	strb	r3, [fp, #2]
   10fc0:	ble	10fd4 <__assert_fail@plt+0x7c>
   10fc4:	ldr	r1, [r4, #4]
   10fc8:	ldrb	r2, [r1]
   10fcc:	cmp	r2, #45	; 0x2d
   10fd0:	beq	11158 <__assert_fail@plt+0x200>
   10fd4:	str	r3, [sp, #32]
   10fd8:	mov	r3, #1
   10fdc:	str	r3, [sp, #28]
   10fe0:	mov	r2, #10
   10fe4:	mov	r3, #0
   10fe8:	strd	r2, [sp, #16]
   10fec:	ldr	r8, [pc, #3756]	; 11ea0 <__assert_fail@plt+0xf48>
   10ff0:	ldr	r7, [pc, #3756]	; 11ea4 <__assert_fail@plt+0xf4c>
   10ff4:	ldr	r9, [pc, #3756]	; 11ea8 <__assert_fail@plt+0xf50>
   10ff8:	mov	sl, #1
   10ffc:	mov	r6, #0
   11000:	str	r6, [sp, #24]
   11004:	str	r6, [sp]
   11008:	mov	r3, r8
   1100c:	mov	r2, r7
   11010:	mov	r1, r4
   11014:	mov	r0, r5
   11018:	bl	10e44 <getopt_long@plt>
   1101c:	cmn	r0, #1
   11020:	beq	112d0 <__assert_fail@plt+0x378>
   11024:	cmp	r0, #110	; 0x6e
   11028:	beq	11120 <__assert_fail@plt+0x1c8>
   1102c:	ble	11054 <__assert_fail@plt+0xfc>
   11030:	cmp	r0, #118	; 0x76
   11034:	beq	11118 <__assert_fail@plt+0x1c0>
   11038:	ble	110c4 <__assert_fail@plt+0x16c>
   1103c:	cmp	r0, #122	; 0x7a
   11040:	beq	110bc <__assert_fail@plt+0x164>
   11044:	cmp	r0, #256	; 0x100
   11048:	bne	1129c <__assert_fail@plt+0x344>
   1104c:	strb	sl, [fp, #3]
   11050:	b	11004 <__assert_fail@plt+0xac>
   11054:	cmn	r0, #2
   11058:	beq	110d8 <__assert_fail@plt+0x180>
   1105c:	cmp	r0, #99	; 0x63
   11060:	beq	11084 <__assert_fail@plt+0x12c>
   11064:	cmn	r0, #3
   11068:	mov	r3, r0
   1106c:	beq	110e0 <__assert_fail@plt+0x188>
   11070:	sub	r2, r3, #48	; 0x30
   11074:	cmp	r2, #9
   11078:	bls	112a4 <__assert_fail@plt+0x34c>
   1107c:	mov	r0, #1
   11080:	bl	1296c <__assert_fail@plt+0x1a14>
   11084:	ldr	r3, [r9]
   11088:	mov	r0, r6
   1108c:	ldrb	r2, [r3]
   11090:	cmp	r2, #45	; 0x2d
   11094:	addeq	r3, r3, #1
   11098:	moveq	r2, #1
   1109c:	movne	r2, #0
   110a0:	streq	r3, [r9]
   110a4:	ldr	r1, [r9]
   110a8:	str	r2, [sp, #24]
   110ac:	bl	12130 <__assert_fail@plt+0x11d8>
   110b0:	str	r6, [sp, #28]
   110b4:	strd	r0, [sp, #16]
   110b8:	b	11004 <__assert_fail@plt+0xac>
   110bc:	strb	r6, [fp]
   110c0:	b	11004 <__assert_fail@plt+0xac>
   110c4:	cmp	r0, #113	; 0x71
   110c8:	bne	1129c <__assert_fail@plt+0x344>
   110cc:	mov	r3, #2
   110d0:	str	r3, [sp, #32]
   110d4:	b	11004 <__assert_fail@plt+0xac>
   110d8:	mov	r0, #0
   110dc:	bl	1296c <__assert_fail@plt+0x1a14>
   110e0:	ldr	r3, [pc, #3524]	; 11eac <__assert_fail@plt+0xf54>
   110e4:	ldr	r0, [pc, #3524]	; 11eb0 <__assert_fail@plt+0xf58>
   110e8:	ldr	r1, [pc, #3524]	; 11eb4 <__assert_fail@plt+0xf5c>
   110ec:	ldr	r2, [pc, #3524]	; 11eb8 <__assert_fail@plt+0xf60>
   110f0:	str	r6, [sp, #8]
   110f4:	ldr	r0, [r0]
   110f8:	ldr	r3, [r3]
   110fc:	str	r1, [sp, #4]
   11100:	str	r2, [sp]
   11104:	ldr	r1, [pc, #3504]	; 11ebc <__assert_fail@plt+0xf64>
   11108:	ldr	r2, [pc, #3504]	; 11ec0 <__assert_fail@plt+0xf68>
   1110c:	bl	15354 <__assert_fail@plt+0x43fc>
   11110:	mov	r0, #0
   11114:	bl	10e5c <exit@plt>
   11118:	str	sl, [sp, #32]
   1111c:	b	11004 <__assert_fail@plt+0xac>
   11120:	ldr	r3, [r9]
   11124:	mov	r0, sl
   11128:	ldrb	r2, [r3]
   1112c:	cmp	r2, #45	; 0x2d
   11130:	addeq	r3, r3, #1
   11134:	moveq	r2, #1
   11138:	movne	r2, #0
   1113c:	streq	r3, [r9]
   11140:	ldr	r1, [r9]
   11144:	str	r2, [sp, #24]
   11148:	bl	12130 <__assert_fail@plt+0x11d8>
   1114c:	str	sl, [sp, #28]
   11150:	strd	r0, [sp, #16]
   11154:	b	11004 <__assert_fail@plt+0xac>
   11158:	ldrb	r2, [r1, #1]
   1115c:	sub	r2, r2, #48	; 0x30
   11160:	cmp	r2, #9
   11164:	bhi	10fd4 <__assert_fail@plt+0x7c>
   11168:	add	r1, r1, #1
   1116c:	mov	r3, r1
   11170:	ldrb	r2, [r3, #1]!
   11174:	sub	r2, r2, #48	; 0x30
   11178:	cmp	r2, #9
   1117c:	bls	11170 <__assert_fail@plt+0x218>
   11180:	mov	lr, #0
   11184:	mov	r9, lr
   11188:	mov	r7, lr
   1118c:	mov	r2, r3
   11190:	mov	sl, #10
   11194:	mov	r8, #1
   11198:	str	r8, [sp, #28]
   1119c:	str	lr, [sp, #32]
   111a0:	mov	r6, r2
   111a4:	ldrb	r0, [r2], #1
   111a8:	cmp	r0, #0
   111ac:	beq	11a38 <__assert_fail@plt+0xae0>
   111b0:	sub	ip, r0, #98	; 0x62
   111b4:	cmp	ip, #24
   111b8:	ldrls	pc, [pc, ip, lsl #2]
   111bc:	b	11268 <__assert_fail@plt+0x310>
   111c0:	andeq	r1, r1, r4, lsr #4
   111c4:	andeq	r1, r1, r8, asr r2
   111c8:	andeq	r1, r1, r8, ror #4
   111cc:	andeq	r1, r1, r8, ror #4
   111d0:	andeq	r1, r1, r8, ror #4
   111d4:	andeq	r1, r1, r8, ror #4
   111d8:	andeq	r1, r1, r8, ror #4
   111dc:	andeq	r1, r1, r8, ror #4
   111e0:	andeq	r1, r1, r8, ror #4
   111e4:	andeq	r1, r1, r4, lsr #4
   111e8:	andeq	r1, r1, r0, asr r2
   111ec:	andeq	r1, r1, r4, lsr #4
   111f0:	andeq	r1, r1, r8, ror #4
   111f4:	andeq	r1, r1, r8, ror #4
   111f8:	andeq	r1, r1, r8, ror #4
   111fc:	andeq	r1, r1, r4, asr #4
   11200:	andeq	r1, r1, r8, ror #4
   11204:	andeq	r1, r1, r8, ror #4
   11208:	andeq	r1, r1, r8, ror #4
   1120c:	andeq	r1, r1, r8, ror #4
   11210:	andeq	r1, r1, ip, lsr r2
   11214:	andeq	r1, r1, r8, ror #4
   11218:	andeq	r1, r1, r8, ror #4
   1121c:	andeq	r1, r1, r8, ror #4
   11220:	andeq	r1, r1, r0, lsr r2
   11224:	mov	r9, r0
   11228:	str	r7, [sp, #28]
   1122c:	b	111a0 <__assert_fail@plt+0x248>
   11230:	mov	lr, r8
   11234:	mov	sl, r7
   11238:	b	111a0 <__assert_fail@plt+0x248>
   1123c:	str	r8, [sp, #32]
   11240:	b	111a0 <__assert_fail@plt+0x248>
   11244:	mov	r0, #2
   11248:	str	r0, [sp, #32]
   1124c:	b	111a0 <__assert_fail@plt+0x248>
   11250:	str	r8, [sp, #28]
   11254:	b	111a0 <__assert_fail@plt+0x248>
   11258:	mov	r0, #0
   1125c:	mov	r9, r7
   11260:	str	r0, [sp, #28]
   11264:	b	111a0 <__assert_fail@plt+0x248>
   11268:	cmp	lr, #0
   1126c:	mov	r2, #5
   11270:	ldr	r1, [pc, #3148]	; 11ec4 <__assert_fail@plt+0xf6c>
   11274:	mov	r0, #0
   11278:	strbne	sl, [fp]
   1127c:	bl	10d78 <dcgettext@plt>
   11280:	mov	r1, #0
   11284:	ldrb	r3, [r6]
   11288:	mov	r2, r0
   1128c:	mov	r0, r1
   11290:	bl	10dfc <error@plt>
   11294:	mov	r0, #1
   11298:	bl	1296c <__assert_fail@plt+0x1a14>
   1129c:	mov	r3, r0
   112a0:	b	11070 <__assert_fail@plt+0x118>
   112a4:	mov	r2, #5
   112a8:	ldr	r1, [pc, #3092]	; 11ec4 <__assert_fail@plt+0xf6c>
   112ac:	mov	r0, #0
   112b0:	str	r3, [sp, #16]
   112b4:	bl	10d78 <dcgettext@plt>
   112b8:	mov	r1, #0
   112bc:	ldr	r3, [sp, #16]
   112c0:	mov	r2, r0
   112c4:	mov	r0, r1
   112c8:	bl	10dfc <error@plt>
   112cc:	b	1107c <__assert_fail@plt+0x124>
   112d0:	ldr	r3, [sp, #32]
   112d4:	cmp	r3, #1
   112d8:	beq	112f8 <__assert_fail@plt+0x3a0>
   112dc:	cmp	r3, #0
   112e0:	bne	11300 <__assert_fail@plt+0x3a8>
   112e4:	ldr	r2, [pc, #3036]	; 11ec8 <__assert_fail@plt+0xf70>
   112e8:	sub	r3, r5, #1
   112ec:	ldr	r2, [r2]
   112f0:	cmp	r3, r2
   112f4:	ble	11300 <__assert_fail@plt+0x3a8>
   112f8:	mov	r3, #1
   112fc:	strb	r3, [fp, #2]
   11300:	ldr	r3, [sp, #28]
   11304:	ldr	r2, [sp, #24]
   11308:	eor	r3, r3, #1
   1130c:	tst	r2, r3
   11310:	beq	11324 <__assert_fail@plt+0x3cc>
   11314:	ldrd	r2, [sp, #16]
   11318:	cmp	r2, #0
   1131c:	sbcs	r3, r3, #0
   11320:	blt	11f3c <__assert_fail@plt+0xfe4>
   11324:	ldr	r3, [pc, #2972]	; 11ec8 <__assert_fail@plt+0xf70>
   11328:	ldrd	r0, [sp, #16]
   1132c:	ldr	r2, [pc, #2968]	; 11ecc <__assert_fail@plt+0xf74>
   11330:	ldr	r3, [r3]
   11334:	str	r2, [sp, #52]	; 0x34
   11338:	cmp	r3, r5
   1133c:	addlt	r4, r4, r3, lsl #2
   11340:	ldrge	r4, [pc, #2952]	; 11ed0 <__assert_fail@plt+0xf78>
   11344:	str	r0, [sp, #76]	; 0x4c
   11348:	sub	r3, r4, #4
   1134c:	str	r3, [sp, #36]	; 0x24
   11350:	and	r3, r2, r0
   11354:	str	r3, [sp, #104]	; 0x68
   11358:	rsb	r3, r3, #8192	; 0x2000
   1135c:	str	r3, [sp, #100]	; 0x64
   11360:	add	r3, r3, r0
   11364:	mov	r2, r0
   11368:	lsr	r3, r3, #13
   1136c:	add	ip, r3, #1
   11370:	adds	r2, r2, #8192	; 0x2000
   11374:	mov	r3, r1
   11378:	adc	r3, r3, #0
   1137c:	lsr	r1, ip, #1
   11380:	str	r1, [sp, #84]	; 0x54
   11384:	mov	r1, #1
   11388:	str	ip, [sp, #48]	; 0x30
   1138c:	str	r1, [sp, #40]	; 0x28
   11390:	strd	r2, [sp, #88]	; 0x58
   11394:	b	11434 <__assert_fail@plt+0x4dc>
   11398:	mov	r3, #1
   1139c:	mov	r2, #5
   113a0:	ldr	r1, [pc, #2860]	; 11ed4 <__assert_fail@plt+0xf7c>
   113a4:	strb	r3, [fp, #1]
   113a8:	bl	10d78 <dcgettext@plt>
   113ac:	str	r4, [sp, #32]
   113b0:	mov	sl, r0
   113b4:	ldrb	r3, [fp, #2]
   113b8:	cmp	r3, #0
   113bc:	beq	113f0 <__assert_fail@plt+0x498>
   113c0:	ldr	r4, [pc, #2832]	; 11ed8 <__assert_fail@plt+0xf80>
   113c4:	ldr	r0, [pc, #2752]	; 11e8c <__assert_fail@plt+0xf34>
   113c8:	ldr	r2, [pc, #2828]	; 11edc <__assert_fail@plt+0xf84>
   113cc:	ldrb	ip, [r4]
   113d0:	mov	r3, sl
   113d4:	ldr	r1, [pc, #2820]	; 11ee0 <__assert_fail@plt+0xf88>
   113d8:	cmp	ip, #0
   113dc:	movne	r2, r0
   113e0:	mov	r0, #1
   113e4:	bl	10eb0 <__printf_chk@plt>
   113e8:	mov	r3, #0
   113ec:	strb	r3, [r4]
   113f0:	ldr	r3, [sp, #24]
   113f4:	cmp	r3, #0
   113f8:	bne	114dc <__assert_fail@plt+0x584>
   113fc:	ldr	r3, [sp, #28]
   11400:	ldr	r1, [sp, #32]
   11404:	cmp	r3, #0
   11408:	mov	r0, sl
   1140c:	ldrd	r2, [sp, #16]
   11410:	bne	1160c <__assert_fail@plt+0x6b4>
   11414:	bl	12510 <__assert_fail@plt+0x15b8>
   11418:	mov	r5, r0
   1141c:	ldr	r3, [sp, #44]	; 0x2c
   11420:	cmp	r3, #0
   11424:	bne	114bc <__assert_fail@plt+0x564>
   11428:	ldr	r3, [sp, #40]	; 0x28
   1142c:	and	r3, r3, r5
   11430:	str	r3, [sp, #40]	; 0x28
   11434:	ldr	r3, [sp, #36]	; 0x24
   11438:	ldr	sl, [r3, #4]!
   1143c:	cmp	sl, #0
   11440:	str	r3, [sp, #36]	; 0x24
   11444:	beq	11690 <__assert_fail@plt+0x738>
   11448:	ldr	r1, [pc, #2708]	; 11ee4 <__assert_fail@plt+0xf8c>
   1144c:	mov	r0, sl
   11450:	bl	10cf4 <strcmp@plt>
   11454:	subs	r4, r0, #0
   11458:	str	r4, [sp, #44]	; 0x2c
   1145c:	beq	11398 <__assert_fail@plt+0x440>
   11460:	mov	r1, #0
   11464:	mov	r0, sl
   11468:	bl	10e08 <open64@plt>
   1146c:	subs	r3, r0, #0
   11470:	str	r3, [sp, #32]
   11474:	bge	113b4 <__assert_fail@plt+0x45c>
   11478:	bl	10e8c <__errno_location@plt>
   1147c:	ldr	r1, [pc, #2660]	; 11ee8 <__assert_fail@plt+0xf90>
   11480:	mov	r2, #5
   11484:	mov	r5, #0
   11488:	ldr	r4, [r0]
   1148c:	mov	r0, r5
   11490:	bl	10d78 <dcgettext@plt>
   11494:	mov	r1, sl
   11498:	mov	r6, r0
   1149c:	mov	r0, #4
   114a0:	bl	14c70 <__assert_fail@plt+0x3d18>
   114a4:	mov	r2, r6
   114a8:	mov	r1, r4
   114ac:	mov	r3, r0
   114b0:	mov	r0, r5
   114b4:	bl	10dfc <error@plt>
   114b8:	b	11428 <__assert_fail@plt+0x4d0>
   114bc:	ldr	r0, [sp, #32]
   114c0:	bl	10f4c <close@plt>
   114c4:	cmp	r0, #0
   114c8:	beq	11428 <__assert_fail@plt+0x4d0>
   114cc:	bl	10e8c <__errno_location@plt>
   114d0:	mov	r2, #5
   114d4:	ldr	r1, [pc, #2576]	; 11eec <__assert_fail@plt+0xf94>
   114d8:	b	11484 <__assert_fail@plt+0x52c>
   114dc:	add	r2, sp, #136	; 0x88
   114e0:	ldr	r1, [sp, #32]
   114e4:	mov	r0, #3
   114e8:	bl	10db4 <__fxstat64@plt>
   114ec:	cmp	r0, #0
   114f0:	bne	116ac <__assert_fail@plt+0x754>
   114f4:	ldrb	r3, [fp, #3]
   114f8:	cmp	r3, #0
   114fc:	bne	11510 <__assert_fail@plt+0x5b8>
   11500:	ldr	r3, [sp, #152]	; 0x98
   11504:	and	r3, r3, #53248	; 0xd000
   11508:	cmp	r3, #32768	; 0x8000
   1150c:	beq	11a90 <__assert_fail@plt+0xb38>
   11510:	ldr	r3, [sp, #28]
   11514:	mvn	r2, #0
   11518:	cmp	r3, #0
   1151c:	mvn	r3, #0
   11520:	strd	r2, [sp, #64]	; 0x40
   11524:	bne	116f0 <__assert_fail@plt+0x798>
   11528:	ldrd	r2, [sp, #88]	; 0x58
   1152c:	mov	r1, #0
   11530:	mvn	r0, #0
   11534:	cmp	r3, r1
   11538:	cmpeq	r2, r0
   1153c:	ldrd	r2, [sp, #64]	; 0x40
   11540:	strd	r2, [sp, #56]	; 0x38
   11544:	bhi	11f08 <__assert_fail@plt+0xfb0>
   11548:	ldr	r3, [sp, #76]	; 0x4c
   1154c:	cmp	r3, #1048576	; 0x100000
   11550:	bls	11bb0 <__assert_fail@plt+0xc58>
   11554:	ldr	r3, [sp, #48]	; 0x30
   11558:	mov	r4, #0
   1155c:	cmp	r3, #16
   11560:	movcs	r3, #16
   11564:	str	r4, [sp, #80]	; 0x50
   11568:	str	r3, [sp, #96]	; 0x60
   1156c:	mov	r9, r4
   11570:	mov	r7, r4
   11574:	str	r4, [sp, #72]	; 0x48
   11578:	mov	r6, #1
   1157c:	str	sl, [sp, #108]	; 0x6c
   11580:	b	115d0 <__assert_fail@plt+0x678>
   11584:	bl	10e8c <__errno_location@plt>
   11588:	ldr	r5, [r0]
   1158c:	cmp	r5, #0
   11590:	bne	11d14 <__assert_fail@plt+0xdbc>
   11594:	ldr	r5, [sp, #24]
   11598:	ldr	r2, [sp, #48]	; 0x30
   1159c:	add	r3, r4, #1
   115a0:	cmp	r2, r3
   115a4:	beq	11630 <__assert_fail@plt+0x6d8>
   115a8:	cmp	r9, #0
   115ac:	bne	11630 <__assert_fail@plt+0x6d8>
   115b0:	add	sl, r6, #1
   115b4:	mov	r0, sl
   115b8:	ldr	r1, [sp, #48]	; 0x30
   115bc:	bl	16804 <__assert_fail@plt+0x58ac>
   115c0:	cmp	r5, #0
   115c4:	mov	r4, r6
   115c8:	bne	11b14 <__assert_fail@plt+0xbbc>
   115cc:	mov	r6, r1
   115d0:	ldr	r3, [sp, #72]	; 0x48
   115d4:	cmp	r4, r3
   115d8:	beq	11654 <__assert_fail@plt+0x6fc>
   115dc:	cmp	r9, #0
   115e0:	beq	11618 <__assert_fail@plt+0x6c0>
   115e4:	mov	r2, #8192	; 0x2000
   115e8:	ldr	r1, [r7, r4, lsl #2]
   115ec:	ldr	r0, [sp, #32]
   115f0:	bl	12e48 <__assert_fail@plt+0x1ef0>
   115f4:	ldr	r3, [sp, #52]	; 0x34
   115f8:	cmp	r0, r3
   115fc:	mov	r8, r0
   11600:	bls	11584 <__assert_fail@plt+0x62c>
   11604:	mov	r5, #0
   11608:	b	11598 <__assert_fail@plt+0x640>
   1160c:	bl	12374 <__assert_fail@plt+0x141c>
   11610:	mov	r5, r0
   11614:	b	1141c <__assert_fail@plt+0x4c4>
   11618:	mov	r0, #8192	; 0x2000
   1161c:	bl	15450 <__assert_fail@plt+0x44f8>
   11620:	add	r3, r4, #1
   11624:	str	r3, [sp, #80]	; 0x50
   11628:	str	r0, [r7, r4, lsl #2]
   1162c:	b	115e4 <__assert_fail@plt+0x68c>
   11630:	mov	r1, r8
   11634:	ldr	r0, [r7, r6, lsl #2]
   11638:	bl	12244 <__assert_fail@plt+0x12ec>
   1163c:	ldrd	r2, [sp, #56]	; 0x38
   11640:	ldr	r9, [sp, #24]
   11644:	adds	r2, r2, r8
   11648:	adc	r3, r3, #0
   1164c:	strd	r2, [sp, #56]	; 0x38
   11650:	b	115b0 <__assert_fail@plt+0x658>
   11654:	cmp	r4, #0
   11658:	ldreq	r3, [sp, #96]	; 0x60
   1165c:	streq	r3, [sp, #72]	; 0x48
   11660:	beq	11678 <__assert_fail@plt+0x720>
   11664:	ldr	r3, [sp, #84]	; 0x54
   11668:	cmp	r3, r4
   1166c:	lslcs	r3, r4, #1
   11670:	ldrcc	r3, [sp, #48]	; 0x30
   11674:	str	r3, [sp, #72]	; 0x48
   11678:	mov	r0, r7
   1167c:	mov	r2, #4
   11680:	ldr	r1, [sp, #72]	; 0x48
   11684:	bl	154dc <__assert_fail@plt+0x4584>
   11688:	mov	r7, r0
   1168c:	b	115dc <__assert_fail@plt+0x684>
   11690:	ldrb	r3, [fp, #1]
   11694:	cmp	r3, #0
   11698:	bne	11a6c <__assert_fail@plt+0xb14>
   1169c:	ldr	r3, [sp, #40]	; 0x28
   116a0:	eor	r0, r3, #1
   116a4:	add	sp, sp, #244	; 0xf4
   116a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116ac:	bl	10e8c <__errno_location@plt>
   116b0:	mov	r5, #0
   116b4:	mov	r2, #5
   116b8:	ldr	r1, [pc, #2096]	; 11ef0 <__assert_fail@plt+0xf98>
   116bc:	ldr	r4, [r0]
   116c0:	mov	r0, r5
   116c4:	bl	10d78 <dcgettext@plt>
   116c8:	mov	r1, sl
   116cc:	mov	r6, r0
   116d0:	mov	r0, #4
   116d4:	bl	14c70 <__assert_fail@plt+0x3d18>
   116d8:	mov	r2, r6
   116dc:	mov	r1, r4
   116e0:	mov	r3, r0
   116e4:	mov	r0, r5
   116e8:	bl	10dfc <error@plt>
   116ec:	b	1141c <__assert_fail@plt+0x4c4>
   116f0:	ldr	r0, [pc, #2044]	; 11ef4 <__assert_fail@plt+0xf9c>
   116f4:	bl	15450 <__assert_fail@plt+0x44f8>
   116f8:	mov	r8, #0
   116fc:	add	r3, r0, #8192	; 0x2000
   11700:	str	r0, [sp, #72]	; 0x48
   11704:	str	r8, [r3, #8]
   11708:	str	r8, [r3, #4]
   1170c:	str	r8, [r3, #12]
   11710:	mov	r7, r0
   11714:	ldr	r0, [pc, #2008]	; 11ef4 <__assert_fail@plt+0xf9c>
   11718:	bl	15450 <__assert_fail@plt+0x44f8>
   1171c:	ldrd	r2, [sp, #64]	; 0x40
   11720:	str	sl, [sp, #80]	; 0x50
   11724:	strd	r2, [sp, #56]	; 0x38
   11728:	mov	r9, r0
   1172c:	mov	r2, #8192	; 0x2000
   11730:	mov	r1, r9
   11734:	ldr	r0, [sp, #32]
   11738:	bl	14ec8 <__assert_fail@plt+0x3f70>
   1173c:	sub	r2, r0, #1
   11740:	cmn	r2, #3
   11744:	mov	r3, r0
   11748:	bhi	11884 <__assert_fail@plt+0x92c>
   1174c:	ldrd	r0, [sp, #16]
   11750:	orrs	r2, r0, r1
   11754:	beq	11824 <__assert_fail@plt+0x8cc>
   11758:	ldrb	r5, [fp]
   1175c:	add	r4, r9, #8192	; 0x2000
   11760:	mov	r2, #0
   11764:	str	r2, [r4, #8]
   11768:	str	r3, [r4, #4]
   1176c:	str	r2, [r4, #12]
   11770:	add	r6, r9, r3
   11774:	strb	r5, [r9, r3]
   11778:	mov	r0, r9
   1177c:	ldr	sl, [r4, #8]
   11780:	b	11790 <__assert_fail@plt+0x838>
   11784:	add	r0, r0, #1
   11788:	mov	sl, r3
   1178c:	str	r3, [r4, #8]
   11790:	mov	r1, r5
   11794:	bl	10d9c <rawmemchr@plt>
   11798:	add	r3, sl, #1
   1179c:	cmp	r6, r0
   117a0:	bhi	11784 <__assert_fail@plt+0x82c>
   117a4:	ldr	r3, [sp, #72]	; 0x48
   117a8:	ldr	r2, [r4, #4]
   117ac:	add	r5, r3, #8192	; 0x2000
   117b0:	ldr	r1, [sp, #52]	; 0x34
   117b4:	ldr	r0, [r5, #4]
   117b8:	add	r8, r8, sl
   117bc:	add	r3, r2, r0
   117c0:	cmp	r3, r1
   117c4:	bls	11858 <__assert_fail@plt+0x900>
   117c8:	add	r6, r7, #8192	; 0x2000
   117cc:	ldrd	r0, [sp, #16]
   117d0:	ldr	r2, [r6, #8]
   117d4:	mov	r3, #0
   117d8:	sub	r2, r8, r2
   117dc:	cmp	r1, r3
   117e0:	cmpeq	r0, r2
   117e4:	str	r9, [r5, #12]
   117e8:	bcs	11844 <__assert_fail@plt+0x8ec>
   117ec:	ldrd	r4, [sp, #56]	; 0x38
   117f0:	ldr	r3, [r6, #4]
   117f4:	mov	r0, r7
   117f8:	adds	r4, r4, r3
   117fc:	adc	r5, r5, #0
   11800:	mov	r1, r3
   11804:	strd	r4, [sp, #56]	; 0x38
   11808:	bl	12244 <__assert_fail@plt+0x12ec>
   1180c:	ldr	r3, [r6, #8]
   11810:	str	r9, [sp, #72]	; 0x48
   11814:	sub	r8, r8, r3
   11818:	mov	r9, r7
   1181c:	ldr	r7, [r6, #12]
   11820:	b	1172c <__assert_fail@plt+0x7d4>
   11824:	ldrd	r4, [sp, #56]	; 0x38
   11828:	mov	r1, r3
   1182c:	mov	r0, r9
   11830:	adds	r4, r4, r3
   11834:	adc	r5, r5, #0
   11838:	strd	r4, [sp, #56]	; 0x38
   1183c:	bl	12244 <__assert_fail@plt+0x12ec>
   11840:	b	1172c <__assert_fail@plt+0x7d4>
   11844:	ldr	r0, [pc, #1704]	; 11ef4 <__assert_fail@plt+0xf9c>
   11848:	bl	15450 <__assert_fail@plt+0x44f8>
   1184c:	str	r9, [sp, #72]	; 0x48
   11850:	mov	r9, r0
   11854:	b	1172c <__assert_fail@plt+0x7d4>
   11858:	ldr	r3, [sp, #72]	; 0x48
   1185c:	mov	r1, r9
   11860:	add	r0, r3, r0
   11864:	bl	10d30 <memcpy@plt>
   11868:	ldmib	r4, {r0, r1}
   1186c:	ldr	r2, [r5, #4]
   11870:	ldr	r3, [r5, #8]
   11874:	add	r2, r2, r0
   11878:	add	r3, r3, r1
   1187c:	stmib	r5, {r2, r3}
   11880:	b	1172c <__assert_fail@plt+0x7d4>
   11884:	ldr	sl, [sp, #80]	; 0x50
   11888:	str	r0, [sp, #80]	; 0x50
   1188c:	mov	r0, r9
   11890:	bl	12df0 <__assert_fail@plt+0x1e98>
   11894:	ldr	r3, [sp, #80]	; 0x50
   11898:	mov	r4, r8
   1189c:	cmn	r3, #1
   118a0:	beq	11d9c <__assert_fail@plt+0xe44>
   118a4:	ldr	r1, [sp, #72]	; 0x48
   118a8:	add	r3, r1, #8192	; 0x2000
   118ac:	ldr	r2, [r3, #4]
   118b0:	cmp	r2, #0
   118b4:	beq	118e0 <__assert_fail@plt+0x988>
   118b8:	add	r1, r1, r2
   118bc:	ldrb	r2, [fp]
   118c0:	ldrb	r1, [r1, #-1]
   118c4:	cmp	r1, r2
   118c8:	beq	118e0 <__assert_fail@plt+0x988>
   118cc:	ldr	r2, [r3, #8]
   118d0:	add	r1, r8, #1
   118d4:	mov	r4, r1
   118d8:	add	r2, r2, #1
   118dc:	str	r2, [r3, #8]
   118e0:	mov	r5, r7
   118e4:	str	r7, [sp, #72]	; 0x48
   118e8:	mov	ip, r5
   118ec:	ldrd	r8, [sp, #16]
   118f0:	ldrd	r6, [sp, #56]	; 0x38
   118f4:	mov	r5, r4
   118f8:	b	11920 <__assert_fail@plt+0x9c8>
   118fc:	ldr	r2, [r4, #4]
   11900:	mov	r0, ip
   11904:	adds	r6, r6, r2
   11908:	mov	r1, r2
   1190c:	adc	r7, r7, #0
   11910:	bl	12244 <__assert_fail@plt+0x12ec>
   11914:	ldr	r2, [r4, #8]
   11918:	ldr	ip, [r4, #12]
   1191c:	sub	r5, r5, r2
   11920:	add	r4, ip, #8192	; 0x2000
   11924:	mov	r3, #0
   11928:	ldr	r2, [r4, #8]
   1192c:	cmp	r9, r3
   11930:	sub	r2, r5, r2
   11934:	cmpeq	r8, r2
   11938:	bcc	118fc <__assert_fail@plt+0x9a4>
   1193c:	ldrd	r8, [sp, #16]
   11940:	mov	r3, #0
   11944:	mov	r1, r5
   11948:	cmp	r9, r3
   1194c:	cmpeq	r8, r1
   11950:	strd	r6, [sp, #56]	; 0x38
   11954:	ldr	r7, [sp, #72]	; 0x48
   11958:	mov	r5, ip
   1195c:	movcs	r0, r7
   11960:	ldrcs	r5, [sp, #24]
   11964:	bcs	119f0 <__assert_fail@plt+0xa98>
   11968:	ldr	r6, [r4, #4]
   1196c:	ldr	r3, [sp, #76]	; 0x4c
   11970:	add	r6, r5, r6
   11974:	sub	r8, r1, r3
   11978:	ldrb	r9, [fp]
   1197c:	mov	r0, r5
   11980:	b	119ac <__assert_fail@plt+0xa54>
   11984:	sub	r2, r6, r0
   11988:	mov	r1, r9
   1198c:	bl	10ed4 <memchr@plt>
   11990:	cmp	r0, #0
   11994:	beq	119b4 <__assert_fail@plt+0xa5c>
   11998:	ldr	r3, [r4, #8]
   1199c:	add	r0, r0, #1
   119a0:	sub	r8, r8, #1
   119a4:	add	r3, r3, #1
   119a8:	str	r3, [r4, #8]
   119ac:	cmp	r8, #0
   119b0:	bne	11984 <__assert_fail@plt+0xa2c>
   119b4:	sub	r3, r0, r5
   119b8:	mov	r0, r5
   119bc:	ldrd	r4, [sp, #56]	; 0x38
   119c0:	mov	r1, r3
   119c4:	adds	r4, r4, r3
   119c8:	adc	r5, r5, r3, asr #31
   119cc:	strd	r4, [sp, #56]	; 0x38
   119d0:	bl	12244 <__assert_fail@plt+0x12ec>
   119d4:	ldr	r5, [sp, #24]
   119d8:	mov	r0, r7
   119dc:	b	119f0 <__assert_fail@plt+0xa98>
   119e0:	add	r3, r0, #8192	; 0x2000
   119e4:	ldr	r4, [r3, #12]
   119e8:	bl	12df0 <__assert_fail@plt+0x1e98>
   119ec:	mov	r0, r4
   119f0:	cmp	r0, #0
   119f4:	bne	119e0 <__assert_fail@plt+0xa88>
   119f8:	ldrd	r2, [sp, #64]	; 0x40
   119fc:	mvn	r1, #0
   11a00:	mov	r7, r0
   11a04:	cmp	r3, r1
   11a08:	mvn	r0, #0
   11a0c:	cmpeq	r2, r0
   11a10:	beq	1141c <__assert_fail@plt+0x4c4>
   11a14:	ldrd	r2, [sp, #56]	; 0x38
   11a18:	stm	sp, {r7, sl}
   11a1c:	ldr	r0, [sp, #32]
   11a20:	bl	12198 <__assert_fail@plt+0x1240>
   11a24:	cmp	r0, #0
   11a28:	sbcs	r3, r1, #0
   11a2c:	bge	1141c <__assert_fail@plt+0x4c4>
   11a30:	mov	r5, #0
   11a34:	b	1141c <__assert_fail@plt+0x4c4>
   11a38:	cmp	lr, #0
   11a3c:	strbne	sl, [fp]
   11a40:	cmp	r9, #0
   11a44:	movne	r2, #0
   11a48:	strb	r9, [r3]
   11a4c:	strbne	r2, [r3, #1]
   11a50:	ldr	r0, [sp, #28]
   11a54:	bl	12130 <__assert_fail@plt+0x11d8>
   11a58:	ldr	r3, [r4]
   11a5c:	sub	r5, r5, #1
   11a60:	str	r3, [r4, #4]!
   11a64:	strd	r0, [sp, #16]
   11a68:	b	10fec <__assert_fail@plt+0x94>
   11a6c:	mov	r0, sl
   11a70:	bl	10f4c <close@plt>
   11a74:	cmp	r0, #0
   11a78:	bge	1169c <__assert_fail@plt+0x744>
   11a7c:	bl	10e8c <__errno_location@plt>
   11a80:	ldr	r2, [pc, #1116]	; 11ee4 <__assert_fail@plt+0xf8c>
   11a84:	ldr	r1, [r0]
   11a88:	mov	r0, #1
   11a8c:	bl	10dfc <error@plt>
   11a90:	mov	r5, #1
   11a94:	mov	r2, #0
   11a98:	mov	r3, #0
   11a9c:	stm	sp, {r5, sl}
   11aa0:	ldr	r0, [sp, #32]
   11aa4:	bl	12198 <__assert_fail@plt+0x1240>
   11aa8:	mov	r3, r1
   11aac:	mov	r2, r0
   11ab0:	cmp	r0, #0
   11ab4:	strd	r2, [sp, #64]	; 0x40
   11ab8:	sbcs	r3, r3, #0
   11abc:	blt	11a30 <__assert_fail@plt+0xad8>
   11ac0:	ldr	r3, [sp, #28]
   11ac4:	cmp	r3, #0
   11ac8:	beq	11f78 <__assert_fail@plt+0x1020>
   11acc:	ldrb	r3, [fp, #3]
   11ad0:	cmp	r3, #0
   11ad4:	bne	116f0 <__assert_fail@plt+0x798>
   11ad8:	ldr	r2, [sp, #192]	; 0xc0
   11adc:	ldrd	r0, [sp, #184]	; 0xb8
   11ae0:	sub	r3, r2, #1
   11ae4:	cmn	r3, #-536870911	; 0xe0000001
   11ae8:	movhi	r2, #512	; 0x200
   11aec:	cmp	r2, r0
   11af0:	asr	r3, r2, #31
   11af4:	sbcs	r3, r3, r1
   11af8:	bge	116f0 <__assert_fail@plt+0x798>
   11afc:	ldrd	r2, [sp, #64]	; 0x40
   11b00:	cmp	r2, r0
   11b04:	sbcs	r3, r3, r1
   11b08:	blt	11d54 <__assert_fail@plt+0xdfc>
   11b0c:	and	r5, r5, #1
   11b10:	b	1141c <__assert_fail@plt+0x4c4>
   11b14:	cmp	r9, #0
   11b18:	mov	r3, sl
   11b1c:	mov	r2, r1
   11b20:	ldr	sl, [sp, #108]	; 0x6c
   11b24:	beq	11de4 <__assert_fail@plt+0xe8c>
   11b28:	ldrd	r0, [sp, #56]	; 0x38
   11b2c:	ldr	r3, [sp, #100]	; 0x64
   11b30:	rsb	r4, r8, #8192	; 0x2000
   11b34:	adds	r0, r0, r3
   11b38:	adc	r1, r1, #0
   11b3c:	cmp	r3, r4
   11b40:	strd	r0, [sp, #56]	; 0x38
   11b44:	bcs	11e5c <__assert_fail@plt+0xf04>
   11b48:	ldr	r0, [r7, r6, lsl #2]
   11b4c:	mov	r1, r3
   11b50:	add	r0, r0, r8
   11b54:	mov	r5, r9
   11b58:	bl	12244 <__assert_fail@plt+0x12ec>
   11b5c:	mov	r4, #0
   11b60:	ldr	r6, [sp, #80]	; 0x50
   11b64:	b	11b74 <__assert_fail@plt+0xc1c>
   11b68:	ldr	r0, [r7, r4, lsl #2]
   11b6c:	bl	12df0 <__assert_fail@plt+0x1e98>
   11b70:	add	r4, r4, #1
   11b74:	cmp	r4, r6
   11b78:	bne	11b68 <__assert_fail@plt+0xc10>
   11b7c:	mov	r0, r7
   11b80:	bl	12df0 <__assert_fail@plt+0x1e98>
   11b84:	ldrd	r2, [sp, #64]	; 0x40
   11b88:	mvn	r1, #0
   11b8c:	mvn	r0, #0
   11b90:	cmp	r3, r1
   11b94:	cmpeq	r2, r0
   11b98:	beq	1141c <__assert_fail@plt+0x4c4>
   11b9c:	mov	r1, #0
   11ba0:	str	sl, [sp, #4]
   11ba4:	ldrd	r2, [sp, #56]	; 0x38
   11ba8:	str	r1, [sp]
   11bac:	b	11a1c <__assert_fail@plt+0xac4>
   11bb0:	add	r6, r3, #8192	; 0x2000
   11bb4:	mov	r1, r6
   11bb8:	mov	r0, #2
   11bbc:	mov	r8, r3
   11bc0:	bl	15538 <__assert_fail@plt+0x45e0>
   11bc4:	ldr	r7, [sp, #24]
   11bc8:	ldr	r9, [sp, #32]
   11bcc:	mov	r4, #0
   11bd0:	str	sl, [sp, #72]	; 0x48
   11bd4:	add	r3, r0, r6
   11bd8:	str	r0, [sp, #80]	; 0x50
   11bdc:	str	r0, [sp, #112]	; 0x70
   11be0:	str	r3, [sp, #116]	; 0x74
   11be4:	add	r3, sp, #240	; 0xf0
   11be8:	add	r3, r3, r4, lsl #2
   11bec:	mov	r2, r6
   11bf0:	ldr	r5, [r3, #-128]	; 0xffffff80
   11bf4:	mov	r0, r9
   11bf8:	mov	r1, r5
   11bfc:	bl	12e48 <__assert_fail@plt+0x1ef0>
   11c00:	cmp	r6, r0
   11c04:	mov	sl, r0
   11c08:	bls	11c80 <__assert_fail@plt+0xd28>
   11c0c:	bl	10e8c <__errno_location@plt>
   11c10:	ldr	r2, [r0]
   11c14:	cmp	r2, #0
   11c18:	bne	11e18 <__assert_fail@plt+0xec0>
   11c1c:	cmp	r8, sl
   11c20:	bcc	11cbc <__assert_fail@plt+0xd64>
   11c24:	cmp	r7, #0
   11c28:	bne	11d0c <__assert_fail@plt+0xdb4>
   11c2c:	ldr	r7, [sp, #24]
   11c30:	sub	r1, r8, sl
   11c34:	ldrd	r2, [sp, #56]	; 0x38
   11c38:	sub	r1, r8, r1
   11c3c:	eor	r4, r4, #1
   11c40:	adds	r2, r2, r1
   11c44:	adc	r3, r3, #0
   11c48:	uxtb	r0, r4
   11c4c:	strd	r2, [sp, #56]	; 0x38
   11c50:	add	r3, sp, #240	; 0xf0
   11c54:	add	r2, r3, r0, lsl #2
   11c58:	ldr	r0, [r2, #-128]	; 0xffffff80
   11c5c:	add	r0, r0, #8192	; 0x2000
   11c60:	bl	12244 <__assert_fail@plt+0x12ec>
   11c64:	cmp	r8, sl
   11c68:	bcc	11d78 <__assert_fail@plt+0xe20>
   11c6c:	cmp	r7, #0
   11c70:	uxtb	r4, r4
   11c74:	bne	11d0c <__assert_fail@plt+0xdb4>
   11c78:	mov	r7, #0
   11c7c:	b	11be4 <__assert_fail@plt+0xc8c>
   11c80:	cmp	r7, #0
   11c84:	beq	11d04 <__assert_fail@plt+0xdac>
   11c88:	cmp	r8, r0
   11c8c:	eorcs	r4, r4, #1
   11c90:	bcs	11c78 <__assert_fail@plt+0xd20>
   11c94:	ldrd	r2, [sp, #56]	; 0x38
   11c98:	sub	sl, r0, r8
   11c9c:	mov	r1, sl
   11ca0:	adds	r2, r2, sl
   11ca4:	adc	r3, r3, #0
   11ca8:	mov	r0, r5
   11cac:	strd	r2, [sp, #56]	; 0x38
   11cb0:	eor	r4, r4, #1
   11cb4:	bl	12244 <__assert_fail@plt+0x12ec>
   11cb8:	b	11c78 <__assert_fail@plt+0xd20>
   11cbc:	cmp	r7, #0
   11cc0:	beq	11d00 <__assert_fail@plt+0xda8>
   11cc4:	ldr	r3, [sp, #76]	; 0x4c
   11cc8:	mov	r0, r5
   11ccc:	ldrd	r4, [sp, #56]	; 0x38
   11cd0:	mov	r9, sl
   11cd4:	sub	r3, r9, r3
   11cd8:	adds	r4, r4, r3
   11cdc:	adc	r5, r5, #0
   11ce0:	mov	r1, r3
   11ce4:	ldr	sl, [sp, #72]	; 0x48
   11ce8:	strd	r4, [sp, #56]	; 0x38
   11cec:	bl	12244 <__assert_fail@plt+0x12ec>
   11cf0:	ldr	r5, [sp, #24]
   11cf4:	ldr	r0, [sp, #80]	; 0x50
   11cf8:	bl	12df0 <__assert_fail@plt+0x1e98>
   11cfc:	b	11b84 <__assert_fail@plt+0xc2c>
   11d00:	ldr	r7, [sp, #24]
   11d04:	mov	r1, #0
   11d08:	b	11c34 <__assert_fail@plt+0xcdc>
   11d0c:	ldr	sl, [sp, #72]	; 0x48
   11d10:	b	11cf0 <__assert_fail@plt+0xd98>
   11d14:	mov	r2, #5
   11d18:	ldr	r1, [pc, #472]	; 11ef8 <__assert_fail@plt+0xfa0>
   11d1c:	mov	r0, #0
   11d20:	ldr	sl, [sp, #108]	; 0x6c
   11d24:	bl	10d78 <dcgettext@plt>
   11d28:	mov	r1, sl
   11d2c:	mov	r4, r0
   11d30:	mov	r0, #4
   11d34:	bl	14c70 <__assert_fail@plt+0x3d18>
   11d38:	mov	r1, r5
   11d3c:	mov	r2, r4
   11d40:	mov	r5, #0
   11d44:	mov	r3, r0
   11d48:	mov	r0, #0
   11d4c:	bl	10dfc <error@plt>
   11d50:	b	11b5c <__assert_fail@plt+0xc04>
   11d54:	ldrd	r2, [sp, #64]	; 0x40
   11d58:	strd	r0, [sp, #8]
   11d5c:	ldr	r1, [sp, #32]
   11d60:	strd	r2, [sp]
   11d64:	mov	r0, sl
   11d68:	ldrd	r2, [sp, #16]
   11d6c:	bl	12674 <__assert_fail@plt+0x171c>
   11d70:	mov	r5, r0
   11d74:	b	11b0c <__assert_fail@plt+0xbb4>
   11d78:	ldrd	r2, [sp, #56]	; 0x38
   11d7c:	sub	sl, sl, r8
   11d80:	mov	r0, r5
   11d84:	adds	r2, r2, sl
   11d88:	adc	r3, r3, #0
   11d8c:	mov	r1, sl
   11d90:	strd	r2, [sp, #56]	; 0x38
   11d94:	bl	12244 <__assert_fail@plt+0x12ec>
   11d98:	b	11c6c <__assert_fail@plt+0xd14>
   11d9c:	bl	10e8c <__errno_location@plt>
   11da0:	mov	r5, #0
   11da4:	mov	r2, #5
   11da8:	ldr	r1, [pc, #328]	; 11ef8 <__assert_fail@plt+0xfa0>
   11dac:	ldr	r4, [r0]
   11db0:	mov	r0, r5
   11db4:	bl	10d78 <dcgettext@plt>
   11db8:	mov	r1, sl
   11dbc:	mov	r6, r0
   11dc0:	mov	r0, #4
   11dc4:	bl	14c70 <__assert_fail@plt+0x3d18>
   11dc8:	mov	r2, r6
   11dcc:	mov	r1, r4
   11dd0:	mov	r3, r0
   11dd4:	mov	r0, r5
   11dd8:	bl	10dfc <error@plt>
   11ddc:	mov	r0, r7
   11de0:	b	119f0 <__assert_fail@plt+0xa98>
   11de4:	ldr	r1, [sp, #48]	; 0x30
   11de8:	cmp	r1, r3
   11dec:	bne	11b5c <__assert_fail@plt+0xc04>
   11df0:	ldr	r3, [sp, #104]	; 0x68
   11df4:	ldr	r0, [r7, r2, lsl #2]
   11df8:	sub	r8, r8, r3
   11dfc:	ldrd	r2, [sp, #56]	; 0x38
   11e00:	mov	r1, r8
   11e04:	adds	r2, r2, r8
   11e08:	adc	r3, r3, #0
   11e0c:	strd	r2, [sp, #56]	; 0x38
   11e10:	bl	12244 <__assert_fail@plt+0x12ec>
   11e14:	b	11b5c <__assert_fail@plt+0xc04>
   11e18:	mov	r8, r2
   11e1c:	ldr	r1, [pc, #212]	; 11ef8 <__assert_fail@plt+0xfa0>
   11e20:	mov	r2, #5
   11e24:	mov	r0, #0
   11e28:	ldr	sl, [sp, #72]	; 0x48
   11e2c:	bl	10d78 <dcgettext@plt>
   11e30:	mov	r1, sl
   11e34:	mov	r5, #0
   11e38:	mov	r4, r0
   11e3c:	mov	r0, #4
   11e40:	bl	14c70 <__assert_fail@plt+0x3d18>
   11e44:	mov	r2, r4
   11e48:	mov	r1, r8
   11e4c:	mov	r3, r0
   11e50:	mov	r0, #0
   11e54:	bl	10dfc <error@plt>
   11e58:	b	11cf4 <__assert_fail@plt+0xd9c>
   11e5c:	ldr	r0, [r7, r6, lsl #2]
   11e60:	mov	r1, r4
   11e64:	add	r0, r0, r8
   11e68:	str	r2, [sp, #72]	; 0x48
   11e6c:	bl	12244 <__assert_fail@plt+0x12ec>
   11e70:	ldr	r2, [sp, #72]	; 0x48
   11e74:	ldr	r3, [sp, #100]	; 0x64
   11e78:	mov	r5, r9
   11e7c:	sub	r1, r3, r4
   11e80:	ldr	r0, [r7, r2, lsl #2]
   11e84:	bl	12244 <__assert_fail@plt+0x12ec>
   11e88:	b	11b5c <__assert_fail@plt+0xc04>
   11e8c:	andeq	r6, r1, r4, asr #30
   11e90:	ldrdeq	r7, [r1], -r0
   11e94:	andeq	r7, r1, r8, lsr #8
   11e98:	andeq	r8, r2, sp, asr r1
   11e9c:	andeq	r2, r1, ip, lsl #26
   11ea0:	andeq	r6, r1, r4, ror sp
   11ea4:	andeq	r7, r1, r8, lsr #10
   11ea8:	andeq	r8, r2, r8, asr r1
   11eac:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   11eb0:	andeq	r8, r2, r4, asr r1
   11eb4:	andeq	r7, r1, r8, lsl #10
   11eb8:	andeq	r7, r1, r8, lsl r5
   11ebc:	strdeq	r6, [r1], -r4
   11ec0:	andeq	r7, r1, r4, lsr #8
   11ec4:	andeq	r7, r1, r8, ror #9
   11ec8:	andeq	r8, r2, r8, asr #2
   11ecc:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   11ed0:	andeq	r6, r1, ip, ror #26
   11ed4:	andeq	r7, r1, r8, asr #10
   11ed8:	strdeq	r8, [r2], -r4
   11edc:	andeq	r7, r1, r0, lsl #11
   11ee0:	andeq	r7, r1, r4, ror r5
   11ee4:	andeq	r7, r1, r4, asr #10
   11ee8:	andeq	r7, r1, r8, asr r5
   11eec:			; <UNDEFINED> instruction: 0x000175b8
   11ef0:	andeq	r7, r1, r4, lsl #11
   11ef4:	andeq	r2, r0, r0, lsl r0
   11ef8:	andeq	r6, r1, r0, asr #29
   11efc:	muleq	r1, r4, r5
   11f00:	andeq	r6, r1, ip, lsr #28
   11f04:	andeq	r7, r1, ip, lsr r5
   11f08:	mov	r2, #5
   11f0c:	ldr	r1, [pc, #-24]	; 11efc <__assert_fail@plt+0xfa4>
   11f10:	mov	r0, #0
   11f14:	bl	10d78 <dcgettext@plt>
   11f18:	add	r2, sp, #112	; 0x70
   11f1c:	mov	r4, r0
   11f20:	ldrd	r0, [sp, #16]
   11f24:	bl	12f88 <__assert_fail@plt+0x2030>
   11f28:	mov	r2, r4
   11f2c:	mov	r1, #0
   11f30:	mov	r3, r0
   11f34:	mov	r0, #1
   11f38:	bl	10dfc <error@plt>
   11f3c:	mov	r2, #5
   11f40:	ldr	r1, [pc, #-72]	; 11f00 <__assert_fail@plt+0xfa8>
   11f44:	mov	r0, #0
   11f48:	bl	10d78 <dcgettext@plt>
   11f4c:	add	r2, sp, #136	; 0x88
   11f50:	mov	r4, r0
   11f54:	ldrd	r0, [sp, #16]
   11f58:	bl	12f88 <__assert_fail@plt+0x2030>
   11f5c:	bl	14eb0 <__assert_fail@plt+0x3f58>
   11f60:	mov	r3, r4
   11f64:	ldr	r2, [pc, #-104]	; 11f04 <__assert_fail@plt+0xfac>
   11f68:	mov	r1, #75	; 0x4b
   11f6c:	str	r0, [sp]
   11f70:	mov	r0, #1
   11f74:	bl	10dfc <error@plt>
   11f78:	ldrb	r5, [fp, #3]
   11f7c:	cmp	r5, #0
   11f80:	bne	11528 <__assert_fail@plt+0x5d0>
   11f84:	ldr	r2, [sp, #192]	; 0xc0
   11f88:	ldrd	r0, [sp, #184]	; 0xb8
   11f8c:	sub	r3, r2, #1
   11f90:	cmn	r3, #-536870911	; 0xe0000001
   11f94:	movhi	r2, #512	; 0x200
   11f98:	cmp	r2, r0
   11f9c:	asr	r3, r2, #31
   11fa0:	sbcs	r3, r3, r1
   11fa4:	bge	11528 <__assert_fail@plt+0x5d0>
   11fa8:	ldrd	r2, [sp, #64]	; 0x40
   11fac:	subs	r2, r0, r2
   11fb0:	sbc	r3, r1, r3
   11fb4:	cmp	r2, #0
   11fb8:	sbcs	r1, r3, #0
   11fbc:	blt	11fd0 <__assert_fail@plt+0x1078>
   11fc0:	ldrd	r0, [sp, #16]
   11fc4:	cmp	r1, r3
   11fc8:	cmpeq	r0, r2
   11fcc:	bcc	11fd8 <__assert_fail@plt+0x1080>
   11fd0:	ldr	r5, [sp, #24]
   11fd4:	b	1141c <__assert_fail@plt+0x4c4>
   11fd8:	ldrd	r0, [sp, #16]
   11fdc:	subs	r0, r2, r0
   11fe0:	sbc	r1, r3, r1
   11fe4:	mov	r2, r0
   11fe8:	mov	r3, r1
   11fec:	ldr	r0, [sp, #32]
   11ff0:	bl	122bc <__assert_fail@plt+0x1364>
   11ff4:	cmp	r0, #0
   11ff8:	beq	11fd0 <__assert_fail@plt+0x1078>
   11ffc:	mov	r1, sl
   12000:	bl	125e0 <__assert_fail@plt+0x1688>
   12004:	b	1141c <__assert_fail@plt+0x4c4>
   12008:	mov	fp, #0
   1200c:	mov	lr, #0
   12010:	pop	{r1}		; (ldr r1, [sp], #4)
   12014:	mov	r2, sp
   12018:	push	{r2}		; (str r2, [sp, #-4]!)
   1201c:	push	{r0}		; (str r0, [sp, #-4]!)
   12020:	ldr	ip, [pc, #16]	; 12038 <__assert_fail@plt+0x10e0>
   12024:	push	{ip}		; (str ip, [sp, #-4]!)
   12028:	ldr	r0, [pc, #12]	; 1203c <__assert_fail@plt+0x10e4>
   1202c:	ldr	r3, [pc, #12]	; 12040 <__assert_fail@plt+0x10e8>
   12030:	bl	10e20 <__libc_start_main@plt>
   12034:	bl	10f40 <abort@plt>
   12038:	andeq	r6, r1, ip, lsl #26
   1203c:	andeq	r0, r1, r4, ror #30
   12040:	andeq	r6, r1, ip, lsr #25
   12044:	ldr	r3, [pc, #20]	; 12060 <__assert_fail@plt+0x1108>
   12048:	ldr	r2, [pc, #20]	; 12064 <__assert_fail@plt+0x110c>
   1204c:	add	r3, pc, r3
   12050:	ldr	r2, [r3, r2]
   12054:	cmp	r2, #0
   12058:	bxeq	lr
   1205c:	b	10e38 <__gmon_start__@plt>
   12060:	andeq	r5, r1, ip, lsr #31
   12064:	andeq	r0, r0, r8, ror #1
   12068:	ldr	r3, [pc, #28]	; 1208c <__assert_fail@plt+0x1134>
   1206c:	ldr	r0, [pc, #28]	; 12090 <__assert_fail@plt+0x1138>
   12070:	sub	r3, r3, r0
   12074:	cmp	r3, #6
   12078:	bxls	lr
   1207c:	ldr	r3, [pc, #16]	; 12094 <__assert_fail@plt+0x113c>
   12080:	cmp	r3, #0
   12084:	bxeq	lr
   12088:	bx	r3
   1208c:	andeq	r8, r2, r3, asr #2
   12090:	andeq	r8, r2, r0, asr #2
   12094:	andeq	r0, r0, r0
   12098:	ldr	r1, [pc, #36]	; 120c4 <__assert_fail@plt+0x116c>
   1209c:	ldr	r0, [pc, #36]	; 120c8 <__assert_fail@plt+0x1170>
   120a0:	sub	r1, r1, r0
   120a4:	asr	r1, r1, #2
   120a8:	add	r1, r1, r1, lsr #31
   120ac:	asrs	r1, r1, #1
   120b0:	bxeq	lr
   120b4:	ldr	r3, [pc, #16]	; 120cc <__assert_fail@plt+0x1174>
   120b8:	cmp	r3, #0
   120bc:	bxeq	lr
   120c0:	bx	r3
   120c4:	andeq	r8, r2, r0, asr #2
   120c8:	andeq	r8, r2, r0, asr #2
   120cc:	andeq	r0, r0, r0
   120d0:	push	{r4, lr}
   120d4:	ldr	r4, [pc, #24]	; 120f4 <__assert_fail@plt+0x119c>
   120d8:	ldrb	r3, [r4]
   120dc:	cmp	r3, #0
   120e0:	popne	{r4, pc}
   120e4:	bl	12068 <__assert_fail@plt+0x1110>
   120e8:	mov	r3, #1
   120ec:	strb	r3, [r4]
   120f0:	pop	{r4, pc}
   120f4:	andeq	r8, r2, ip, asr r1
   120f8:	ldr	r0, [pc, #40]	; 12128 <__assert_fail@plt+0x11d0>
   120fc:	ldr	r3, [r0]
   12100:	cmp	r3, #0
   12104:	bne	1210c <__assert_fail@plt+0x11b4>
   12108:	b	12098 <__assert_fail@plt+0x1140>
   1210c:	ldr	r3, [pc, #24]	; 1212c <__assert_fail@plt+0x11d4>
   12110:	cmp	r3, #0
   12114:	beq	12108 <__assert_fail@plt+0x11b0>
   12118:	push	{r4, lr}
   1211c:	blx	r3
   12120:	pop	{r4, lr}
   12124:	b	12098 <__assert_fail@plt+0x1140>
   12128:	andeq	r7, r2, r4, lsl pc
   1212c:	andeq	r0, r0, r0
   12130:	cmp	r0, #0
   12134:	push	{r4, r5, r6, lr}
   12138:	movne	r0, #0
   1213c:	sub	sp, sp, #24
   12140:	mov	r6, r1
   12144:	mov	r2, #5
   12148:	ldrne	r1, [pc, #60]	; 1218c <__assert_fail@plt+0x1234>
   1214c:	ldreq	r1, [pc, #60]	; 12190 <__assert_fail@plt+0x1238>
   12150:	bl	10d78 <dcgettext@plt>
   12154:	mvn	r4, #0
   12158:	ldr	r2, [pc, #52]	; 12194 <__assert_fail@plt+0x123c>
   1215c:	mvn	r5, #0
   12160:	mov	r3, #0
   12164:	str	r2, [sp, #8]
   12168:	str	r3, [sp, #16]
   1216c:	strd	r4, [sp]
   12170:	mov	r2, #0
   12174:	mov	r3, #0
   12178:	str	r0, [sp, #12]
   1217c:	mov	r0, r6
   12180:	bl	15b14 <__assert_fail@plt+0x4bbc>
   12184:	add	sp, sp, #24
   12188:	pop	{r4, r5, r6, pc}
   1218c:	andeq	r6, r1, r4, lsl lr
   12190:	andeq	r6, r1, ip, lsr #28
   12194:	andeq	r6, r1, r4, asr #28
   12198:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1219c:	sub	sp, sp, #32
   121a0:	mov	r9, r3
   121a4:	ldr	r6, [sp, #64]	; 0x40
   121a8:	mov	r8, r2
   121ac:	str	r6, [sp]
   121b0:	bl	10dcc <lseek64@plt>
   121b4:	cmp	r0, #0
   121b8:	sbcs	r3, r1, #0
   121bc:	mov	r4, r0
   121c0:	mov	r5, r1
   121c4:	bge	1222c <__assert_fail@plt+0x12d4>
   121c8:	bl	10e8c <__errno_location@plt>
   121cc:	ldr	r3, [pc, #104]	; 1223c <__assert_fail@plt+0x12e4>
   121d0:	cmp	r6, #0
   121d4:	ldr	r1, [pc, #100]	; 12240 <__assert_fail@plt+0x12e8>
   121d8:	mov	r2, #5
   121dc:	movne	r1, r3
   121e0:	ldr	sl, [r0]
   121e4:	mov	r0, #0
   121e8:	bl	10d78 <dcgettext@plt>
   121ec:	ldr	r2, [sp, #68]	; 0x44
   121f0:	mov	r1, #3
   121f4:	mov	r6, r0
   121f8:	mov	r0, #0
   121fc:	bl	14d2c <__assert_fail@plt+0x3dd4>
   12200:	add	r2, sp, #8
   12204:	mov	r1, r9
   12208:	mov	r7, r0
   1220c:	mov	r0, r8
   12210:	bl	12eb8 <__assert_fail@plt+0x1f60>
   12214:	mov	r1, sl
   12218:	mov	r3, r7
   1221c:	mov	r2, r6
   12220:	str	r0, [sp]
   12224:	mov	r0, #0
   12228:	bl	10dfc <error@plt>
   1222c:	mov	r0, r4
   12230:	mov	r1, r5
   12234:	add	sp, sp, #32
   12238:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1223c:	andeq	r6, r1, r4, ror lr
   12240:	andeq	r6, r1, r4, asr lr
   12244:	push	{r4, r5, r6, lr}
   12248:	subs	r4, r1, #0
   1224c:	popeq	{r4, r5, r6, pc}
   12250:	ldr	r5, [pc, #88]	; 122b0 <__assert_fail@plt+0x1358>
   12254:	mov	r2, r4
   12258:	mov	r1, #1
   1225c:	ldr	r3, [r5]
   12260:	bl	10d54 <fwrite_unlocked@plt>
   12264:	cmp	r4, r0
   12268:	popls	{r4, r5, r6, pc}
   1226c:	ldr	r0, [r5]
   12270:	bl	10f1c <clearerr_unlocked@plt>
   12274:	bl	10e8c <__errno_location@plt>
   12278:	mov	r2, #5
   1227c:	ldr	r1, [pc, #48]	; 122b4 <__assert_fail@plt+0x135c>
   12280:	ldr	r4, [r0]
   12284:	mov	r0, #0
   12288:	bl	10d78 <dcgettext@plt>
   1228c:	ldr	r1, [pc, #36]	; 122b8 <__assert_fail@plt+0x1360>
   12290:	mov	r5, r0
   12294:	mov	r0, #4
   12298:	bl	14c70 <__assert_fail@plt+0x3d18>
   1229c:	mov	r2, r5
   122a0:	mov	r1, r4
   122a4:	mov	r3, r0
   122a8:	mov	r0, #1
   122ac:	bl	10dfc <error@plt>
   122b0:	andeq	r8, r2, r4, asr r1
   122b4:	muleq	r1, ip, lr
   122b8:			; <UNDEFINED> instruction: 0x00016eb0
   122bc:	push	{r4, r5, r6, r7, lr}
   122c0:	mov	r4, r2
   122c4:	mov	r5, r3
   122c8:	orrs	r3, r4, r5
   122cc:	sub	sp, sp, #8192	; 0x2000
   122d0:	sub	sp, sp, #4
   122d4:	movne	r6, r0
   122d8:	movne	r7, #8192	; 0x2000
   122dc:	bne	12314 <__assert_fail@plt+0x13bc>
   122e0:	b	12354 <__assert_fail@plt+0x13fc>
   122e4:	subs	r4, r4, r3
   122e8:	sbc	r5, r5, #0
   122ec:	orr	r2, r4, r5
   122f0:	cmp	r2, #0
   122f4:	clz	r3, r3
   122f8:	lsr	r3, r3, #5
   122fc:	moveq	r3, #0
   12300:	cmp	r3, #0
   12304:	bne	12364 <__assert_fail@plt+0x140c>
   12308:	bl	12244 <__assert_fail@plt+0x12ec>
   1230c:	orrs	r3, r4, r5
   12310:	beq	12354 <__assert_fail@plt+0x13fc>
   12314:	cmp	r5, #0
   12318:	cmpeq	r4, #8192	; 0x2000
   1231c:	mov	r1, sp
   12320:	mov	r2, r4
   12324:	mov	r0, r6
   12328:	movhi	r2, r7
   1232c:	bl	14ec8 <__assert_fail@plt+0x3f70>
   12330:	mov	r3, r0
   12334:	cmn	r3, #1
   12338:	mov	r1, r0
   1233c:	mov	r0, sp
   12340:	bne	122e4 <__assert_fail@plt+0x138c>
   12344:	mov	r0, #1
   12348:	add	sp, sp, #8192	; 0x2000
   1234c:	add	sp, sp, #4
   12350:	pop	{r4, r5, r6, r7, pc}
   12354:	mov	r0, #0
   12358:	add	sp, sp, #8192	; 0x2000
   1235c:	add	sp, sp, #4
   12360:	pop	{r4, r5, r6, r7, pc}
   12364:	mov	r0, #2
   12368:	add	sp, sp, #8192	; 0x2000
   1236c:	add	sp, sp, #4
   12370:	pop	{r4, r5, r6, r7, pc}
   12374:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12378:	mov	r6, r2
   1237c:	mov	r7, r3
   12380:	sub	sp, sp, #8256	; 0x2040
   12384:	orrs	r3, r6, r7
   12388:	sub	sp, sp, #48	; 0x30
   1238c:	beq	124a4 <__assert_fail@plt+0x154c>
   12390:	ldr	r9, [pc, #368]	; 12508 <__assert_fail@plt+0x15b0>
   12394:	mov	sl, r0
   12398:	mov	r5, r1
   1239c:	mov	r8, #8192	; 0x2000
   123a0:	mov	r2, r8
   123a4:	add	r1, sp, #112	; 0x70
   123a8:	mov	r0, r5
   123ac:	bl	14ec8 <__assert_fail@plt+0x3f70>
   123b0:	cmn	r0, #1
   123b4:	beq	124b8 <__assert_fail@plt+0x1560>
   123b8:	cmp	r0, #0
   123bc:	beq	124a4 <__assert_fail@plt+0x154c>
   123c0:	ldrb	r1, [r9]
   123c4:	add	r3, sp, #111	; 0x6f
   123c8:	mov	r4, #0
   123cc:	b	123d8 <__assert_fail@plt+0x1480>
   123d0:	cmp	r0, r4
   123d4:	beq	12444 <__assert_fail@plt+0x14ec>
   123d8:	ldrb	r2, [r3, #1]!
   123dc:	add	r4, r4, #1
   123e0:	cmp	r2, r1
   123e4:	bne	123d0 <__assert_fail@plt+0x1478>
   123e8:	subs	r6, r6, #1
   123ec:	sbc	r7, r7, #0
   123f0:	orrs	r2, r6, r7
   123f4:	bne	123d0 <__assert_fail@plt+0x1478>
   123f8:	sub	r0, r0, r4
   123fc:	rsbs	r6, r0, #0
   12400:	sbc	r7, r7, r7
   12404:	mov	r8, #1
   12408:	mov	r3, r7
   1240c:	mov	r2, r6
   12410:	str	r8, [sp]
   12414:	mov	r0, r5
   12418:	bl	10dcc <lseek64@plt>
   1241c:	cmp	r0, #0
   12420:	sbcs	r3, r1, #0
   12424:	blt	12454 <__assert_fail@plt+0x14fc>
   12428:	add	r0, sp, #112	; 0x70
   1242c:	mov	r1, r4
   12430:	bl	12244 <__assert_fail@plt+0x12ec>
   12434:	mov	r0, r8
   12438:	add	sp, sp, #8256	; 0x2040
   1243c:	add	sp, sp, #48	; 0x30
   12440:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12444:	mov	r1, r0
   12448:	add	r0, sp, #112	; 0x70
   1244c:	bl	12244 <__assert_fail@plt+0x12ec>
   12450:	b	123a0 <__assert_fail@plt+0x1448>
   12454:	add	r2, sp, #8
   12458:	mov	r1, r5
   1245c:	mov	r0, #3
   12460:	bl	10db4 <__fxstat64@plt>
   12464:	cmp	r0, #0
   12468:	bne	1247c <__assert_fail@plt+0x1524>
   1246c:	ldr	r3, [sp, #24]
   12470:	and	r3, r3, #61440	; 0xf000
   12474:	cmp	r3, #32768	; 0x8000
   12478:	bne	12498 <__assert_fail@plt+0x1540>
   1247c:	mov	r1, #1
   12480:	str	sl, [sp, #4]
   12484:	mov	r2, r6
   12488:	mov	r3, r7
   1248c:	mov	r0, r5
   12490:	str	r1, [sp]
   12494:	bl	12198 <__assert_fail@plt+0x1240>
   12498:	mov	r1, r4
   1249c:	add	r0, sp, #112	; 0x70
   124a0:	bl	12244 <__assert_fail@plt+0x12ec>
   124a4:	mov	r8, #1
   124a8:	mov	r0, r8
   124ac:	add	sp, sp, #8256	; 0x2040
   124b0:	add	sp, sp, #48	; 0x30
   124b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   124b8:	bl	10e8c <__errno_location@plt>
   124bc:	mov	r2, #5
   124c0:	ldr	r1, [pc, #68]	; 1250c <__assert_fail@plt+0x15b4>
   124c4:	mov	r8, #0
   124c8:	ldr	r4, [r0]
   124cc:	mov	r0, #0
   124d0:	bl	10d78 <dcgettext@plt>
   124d4:	mov	r1, sl
   124d8:	mov	r5, r0
   124dc:	mov	r0, #4
   124e0:	bl	14c70 <__assert_fail@plt+0x3d18>
   124e4:	mov	r2, r5
   124e8:	mov	r1, r4
   124ec:	mov	r3, r0
   124f0:	mov	r0, #0
   124f4:	bl	10dfc <error@plt>
   124f8:	mov	r0, r8
   124fc:	add	sp, sp, #8256	; 0x2040
   12500:	add	sp, sp, #48	; 0x30
   12504:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12508:	andeq	r8, r2, sp, asr r1
   1250c:	andeq	r6, r1, r0, asr #29
   12510:	push	{r4, r5, r6, r7, r8, lr}
   12514:	mov	r4, r2
   12518:	mov	r5, r3
   1251c:	orrs	r3, r4, r5
   12520:	sub	sp, sp, #8192	; 0x2000
   12524:	movne	r8, r0
   12528:	movne	r7, r1
   1252c:	movne	r6, #8192	; 0x2000
   12530:	bne	12554 <__assert_fail@plt+0x15fc>
   12534:	b	125d0 <__assert_fail@plt+0x1678>
   12538:	cmp	r3, #0
   1253c:	beq	125d0 <__assert_fail@plt+0x1678>
   12540:	subs	r4, r4, r3
   12544:	sbc	r5, r5, #0
   12548:	bl	12244 <__assert_fail@plt+0x12ec>
   1254c:	orrs	r3, r4, r5
   12550:	beq	125d0 <__assert_fail@plt+0x1678>
   12554:	mov	r3, #0
   12558:	cmp	r3, r5
   1255c:	cmpeq	r6, r4
   12560:	movhi	r6, r4
   12564:	mov	r1, sp
   12568:	mov	r2, r6
   1256c:	mov	r0, r7
   12570:	bl	14ec8 <__assert_fail@plt+0x3f70>
   12574:	mov	r3, r0
   12578:	cmn	r3, #1
   1257c:	mov	r1, r0
   12580:	mov	r0, sp
   12584:	bne	12538 <__assert_fail@plt+0x15e0>
   12588:	bl	10e8c <__errno_location@plt>
   1258c:	mov	r2, #5
   12590:	ldr	r1, [pc, #68]	; 125dc <__assert_fail@plt+0x1684>
   12594:	ldr	r4, [r0]
   12598:	mov	r0, #0
   1259c:	bl	10d78 <dcgettext@plt>
   125a0:	mov	r1, r8
   125a4:	mov	r5, r0
   125a8:	mov	r0, #4
   125ac:	bl	14c70 <__assert_fail@plt+0x3d18>
   125b0:	mov	r2, r5
   125b4:	mov	r1, r4
   125b8:	mov	r3, r0
   125bc:	mov	r0, #0
   125c0:	bl	10dfc <error@plt>
   125c4:	mov	r0, #0
   125c8:	add	sp, sp, #8192	; 0x2000
   125cc:	pop	{r4, r5, r6, r7, r8, pc}
   125d0:	mov	r0, #1
   125d4:	add	sp, sp, #8192	; 0x2000
   125d8:	pop	{r4, r5, r6, r7, r8, pc}
   125dc:	andeq	r6, r1, r0, asr #29
   125e0:	cmp	r0, #1
   125e4:	push	{r4, r5, r6, lr}
   125e8:	mov	r4, r1
   125ec:	beq	12640 <__assert_fail@plt+0x16e8>
   125f0:	cmp	r0, #2
   125f4:	bne	1263c <__assert_fail@plt+0x16e4>
   125f8:	bl	10e8c <__errno_location@plt>
   125fc:	mov	r2, #5
   12600:	ldr	r1, [pc, #100]	; 1266c <__assert_fail@plt+0x1714>
   12604:	ldr	r5, [r0]
   12608:	mov	r0, #0
   1260c:	bl	10d78 <dcgettext@plt>
   12610:	mov	r2, r4
   12614:	mov	r1, #3
   12618:	mov	r6, r0
   1261c:	mov	r0, #0
   12620:	bl	14d2c <__assert_fail@plt+0x3dd4>
   12624:	mov	r3, r0
   12628:	mov	r2, r6
   1262c:	mov	r1, r5
   12630:	mov	r0, #0
   12634:	pop	{r4, r5, r6, lr}
   12638:	b	10dfc <error@plt>
   1263c:	bl	10f40 <abort@plt>
   12640:	bl	10e8c <__errno_location@plt>
   12644:	mov	r2, #5
   12648:	ldr	r1, [pc, #32]	; 12670 <__assert_fail@plt+0x1718>
   1264c:	ldr	r5, [r0]
   12650:	mov	r0, #0
   12654:	bl	10d78 <dcgettext@plt>
   12658:	mov	r1, r4
   1265c:	mov	r6, r0
   12660:	mov	r0, #4
   12664:	bl	14c70 <__assert_fail@plt+0x3d18>
   12668:	b	12624 <__assert_fail@plt+0x16cc>
   1266c:	ldrdeq	r6, [r1], -r4
   12670:	andeq	r6, r1, r0, asr #29
   12674:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12678:	sub	sp, sp, #8192	; 0x2000
   1267c:	sub	sp, sp, #28
   12680:	add	ip, sp, #8256	; 0x2040
   12684:	str	r0, [sp, #20]
   12688:	add	ip, ip, #8
   1268c:	add	r0, sp, #8256	; 0x2040
   12690:	ldrd	r6, [ip]
   12694:	ldrd	r4, [r0]
   12698:	ldr	r8, [pc, #704]	; 12960 <__assert_fail@plt+0x1a08>
   1269c:	mov	sl, r1
   126a0:	subs	r4, r6, r4
   126a4:	sbc	r5, r7, r5
   126a8:	asr	r0, r5, #31
   126ac:	eor	r4, r4, r0
   126b0:	subs	r4, r4, r0
   126b4:	and	r4, r4, r8
   126b8:	eor	r4, r4, r0
   126bc:	subs	r0, r4, r0
   126c0:	cmp	r0, #0
   126c4:	moveq	r0, #8192	; 0x2000
   126c8:	movne	r1, #0
   126cc:	moveq	r1, #0
   126d0:	movne	r8, r0
   126d4:	moveq	r8, #8192	; 0x2000
   126d8:	subs	r6, r6, r0
   126dc:	sbc	r7, r7, r1
   126e0:	ldr	r1, [sp, #20]
   126e4:	mov	r4, r2
   126e8:	mov	r5, r3
   126ec:	mov	r2, r6
   126f0:	mov	r3, r7
   126f4:	mov	r6, #0
   126f8:	str	r1, [sp, #4]
   126fc:	str	r6, [sp]
   12700:	mov	r0, sl
   12704:	strd	r2, [sp, #8]
   12708:	bl	12198 <__assert_fail@plt+0x1240>
   1270c:	cmp	r0, #0
   12710:	sbcs	r3, r1, #0
   12714:	blt	1289c <__assert_fail@plt+0x1944>
   12718:	add	r9, sp, #24
   1271c:	mov	r2, r8
   12720:	mov	r1, r9
   12724:	mov	r0, sl
   12728:	bl	14ec8 <__assert_fail@plt+0x3f70>
   1272c:	cmn	r0, #1
   12730:	mov	r8, r0
   12734:	beq	12860 <__assert_fail@plt+0x1908>
   12738:	orr	r3, r4, r5
   1273c:	cmp	r0, #0
   12740:	cmpne	r3, #0
   12744:	bne	128ac <__assert_fail@plt+0x1954>
   12748:	mov	r6, r4
   1274c:	mov	r7, r5
   12750:	cmp	r8, #0
   12754:	beq	128d8 <__assert_fail@plt+0x1980>
   12758:	ldr	r3, [pc, #516]	; 12964 <__assert_fail@plt+0x1a0c>
   1275c:	ldrb	fp, [r3]
   12760:	b	1276c <__assert_fail@plt+0x1814>
   12764:	cmp	r8, #0
   12768:	beq	128d0 <__assert_fail@plt+0x1978>
   1276c:	orrs	r3, r4, r5
   12770:	mov	r2, r8
   12774:	mov	r1, fp
   12778:	mov	r0, r9
   1277c:	subeq	r8, r8, #1
   12780:	beq	12794 <__assert_fail@plt+0x183c>
   12784:	bl	10e80 <memrchr@plt>
   12788:	cmp	r0, #0
   1278c:	sub	r8, r0, r9
   12790:	beq	128d8 <__assert_fail@plt+0x1980>
   12794:	subs	r0, r6, #1
   12798:	sbc	r1, r7, #0
   1279c:	orrs	r3, r6, r7
   127a0:	mov	r6, r0
   127a4:	mov	r7, r1
   127a8:	bne	12764 <__assert_fail@plt+0x180c>
   127ac:	add	r3, sp, #8256	; 0x2040
   127b0:	ldrd	r4, [sp, #8]
   127b4:	ldrd	r0, [r3]
   127b8:	mov	r3, r5
   127bc:	cmp	r0, r4
   127c0:	sbcs	r3, r1, r3
   127c4:	bge	12814 <__assert_fail@plt+0x18bc>
   127c8:	ldr	r3, [sp, #20]
   127cc:	mov	r6, #0
   127d0:	str	r3, [sp, #4]
   127d4:	mov	r2, r0
   127d8:	mov	r3, r1
   127dc:	str	r6, [sp]
   127e0:	mov	r0, sl
   127e4:	bl	12198 <__assert_fail@plt+0x1240>
   127e8:	cmp	r0, #0
   127ec:	sbcs	r3, r1, #0
   127f0:	blt	1289c <__assert_fail@plt+0x1944>
   127f4:	add	r1, sp, #8256	; 0x2040
   127f8:	ldrd	r0, [r1]
   127fc:	subs	r2, r4, r0
   12800:	sbc	r3, r5, r1
   12804:	mov	r0, sl
   12808:	bl	122bc <__assert_fail@plt+0x1364>
   1280c:	cmp	r0, r6
   12810:	bne	12950 <__assert_fail@plt+0x19f8>
   12814:	mov	r0, r9
   12818:	add	r1, r8, #1
   1281c:	bl	12244 <__assert_fail@plt+0x12ec>
   12820:	ldrd	r2, [sp, #8]
   12824:	ldr	r0, [sp, #20]
   12828:	mov	r1, #0
   1282c:	adds	r2, r2, r8
   12830:	adc	r3, r3, #0
   12834:	adds	r2, r2, #1
   12838:	str	r0, [sp, #4]
   1283c:	adc	r3, r3, #0
   12840:	mov	r0, sl
   12844:	str	r1, [sp]
   12848:	bl	12198 <__assert_fail@plt+0x1240>
   1284c:	mvn	r0, r1
   12850:	lsr	r0, r0, #31
   12854:	add	sp, sp, #8192	; 0x2000
   12858:	add	sp, sp, #28
   1285c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12860:	bl	10e8c <__errno_location@plt>
   12864:	mov	r2, #5
   12868:	ldr	r1, [pc, #248]	; 12968 <__assert_fail@plt+0x1a10>
   1286c:	ldr	r4, [r0]
   12870:	mov	r0, #0
   12874:	bl	10d78 <dcgettext@plt>
   12878:	ldr	r1, [sp, #20]
   1287c:	mov	r5, r0
   12880:	mov	r0, #4
   12884:	bl	14c70 <__assert_fail@plt+0x3d18>
   12888:	mov	r2, r5
   1288c:	mov	r1, r4
   12890:	mov	r3, r0
   12894:	mov	r0, #0
   12898:	bl	10dfc <error@plt>
   1289c:	mov	r0, #0
   128a0:	add	sp, sp, #8192	; 0x2000
   128a4:	add	sp, sp, #28
   128a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128ac:	ldr	r2, [pc, #176]	; 12964 <__assert_fail@plt+0x1a0c>
   128b0:	add	r3, r9, r0
   128b4:	ldrb	r2, [r2]
   128b8:	ldrb	r3, [r3, #-1]
   128bc:	cmp	r3, r2
   128c0:	beq	12748 <__assert_fail@plt+0x17f0>
   128c4:	subs	r6, r4, #1
   128c8:	sbc	r7, r5, #0
   128cc:	b	12750 <__assert_fail@plt+0x17f8>
   128d0:	mov	r6, r0
   128d4:	mov	r7, r1
   128d8:	add	r1, sp, #8256	; 0x2040
   128dc:	ldrd	r2, [sp, #8]
   128e0:	ldrd	r0, [r1]
   128e4:	cmp	r3, r1
   128e8:	cmpeq	r2, r0
   128ec:	beq	12948 <__assert_fail@plt+0x19f0>
   128f0:	ldrd	r2, [sp, #8]
   128f4:	ldr	r1, [sp, #20]
   128f8:	mov	r0, sl
   128fc:	subs	r2, r2, #8192	; 0x2000
   12900:	sbc	r3, r3, #0
   12904:	str	r1, [sp, #4]
   12908:	mov	r1, #0
   1290c:	str	r1, [sp]
   12910:	strd	r2, [sp, #8]
   12914:	bl	12198 <__assert_fail@plt+0x1240>
   12918:	cmp	r0, #0
   1291c:	sbcs	r3, r1, #0
   12920:	blt	1289c <__assert_fail@plt+0x1944>
   12924:	mov	r2, #8192	; 0x2000
   12928:	mov	r1, r9
   1292c:	mov	r0, sl
   12930:	bl	14ec8 <__assert_fail@plt+0x3f70>
   12934:	cmn	r0, #1
   12938:	mov	r8, r0
   1293c:	beq	12860 <__assert_fail@plt+0x1908>
   12940:	cmp	r0, #0
   12944:	bne	12750 <__assert_fail@plt+0x17f8>
   12948:	mov	r0, #1
   1294c:	b	128a0 <__assert_fail@plt+0x1948>
   12950:	ldr	r1, [sp, #20]
   12954:	bl	125e0 <__assert_fail@plt+0x1688>
   12958:	mov	r0, r6
   1295c:	b	128a0 <__assert_fail@plt+0x1948>
   12960:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   12964:	andeq	r8, r2, sp, asr r1
   12968:	andeq	r6, r1, r0, asr #29
   1296c:	subs	r5, r0, #0
   12970:	push	{r7, lr}
   12974:	sub	sp, sp, #56	; 0x38
   12978:	beq	129b4 <__assert_fail@plt+0x1a5c>
   1297c:	ldr	r3, [pc, #772]	; 12c88 <__assert_fail@plt+0x1d30>
   12980:	mov	r2, #5
   12984:	ldr	r1, [pc, #768]	; 12c8c <__assert_fail@plt+0x1d34>
   12988:	mov	r0, #0
   1298c:	ldr	r4, [r3]
   12990:	bl	10d78 <dcgettext@plt>
   12994:	ldr	r3, [pc, #756]	; 12c90 <__assert_fail@plt+0x1d38>
   12998:	mov	r1, #1
   1299c:	ldr	r3, [r3]
   129a0:	mov	r2, r0
   129a4:	mov	r0, r4
   129a8:	bl	10ec8 <__fprintf_chk@plt>
   129ac:	mov	r0, r5
   129b0:	bl	10e5c <exit@plt>
   129b4:	mov	r2, #5
   129b8:	ldr	r1, [pc, #724]	; 12c94 <__assert_fail@plt+0x1d3c>
   129bc:	bl	10d78 <dcgettext@plt>
   129c0:	ldr	r3, [pc, #712]	; 12c90 <__assert_fail@plt+0x1d38>
   129c4:	ldr	r7, [pc, #716]	; 12c98 <__assert_fail@plt+0x1d40>
   129c8:	ldr	r4, [pc, #716]	; 12c9c <__assert_fail@plt+0x1d44>
   129cc:	ldr	r2, [r3]
   129d0:	mov	r1, r0
   129d4:	mov	r0, #1
   129d8:	bl	10eb0 <__printf_chk@plt>
   129dc:	mov	r2, #5
   129e0:	ldr	r1, [pc, #696]	; 12ca0 <__assert_fail@plt+0x1d48>
   129e4:	mov	r0, r5
   129e8:	bl	10d78 <dcgettext@plt>
   129ec:	mov	r2, #10
   129f0:	mov	r1, r0
   129f4:	mov	r0, #1
   129f8:	bl	10eb0 <__printf_chk@plt>
   129fc:	mov	r2, #5
   12a00:	ldr	r1, [pc, #668]	; 12ca4 <__assert_fail@plt+0x1d4c>
   12a04:	mov	r0, r5
   12a08:	bl	10d78 <dcgettext@plt>
   12a0c:	ldr	r1, [r7]
   12a10:	bl	10cdc <fputs_unlocked@plt>
   12a14:	mov	r2, #5
   12a18:	ldr	r1, [pc, #648]	; 12ca8 <__assert_fail@plt+0x1d50>
   12a1c:	mov	r0, r5
   12a20:	bl	10d78 <dcgettext@plt>
   12a24:	ldr	r1, [r7]
   12a28:	bl	10cdc <fputs_unlocked@plt>
   12a2c:	mov	r2, #5
   12a30:	ldr	r1, [pc, #628]	; 12cac <__assert_fail@plt+0x1d54>
   12a34:	mov	r0, r5
   12a38:	bl	10d78 <dcgettext@plt>
   12a3c:	mov	r2, #10
   12a40:	mov	r1, r0
   12a44:	mov	r0, #1
   12a48:	bl	10eb0 <__printf_chk@plt>
   12a4c:	mov	r2, #5
   12a50:	ldr	r1, [pc, #600]	; 12cb0 <__assert_fail@plt+0x1d58>
   12a54:	mov	r0, r5
   12a58:	bl	10d78 <dcgettext@plt>
   12a5c:	ldr	r1, [r7]
   12a60:	bl	10cdc <fputs_unlocked@plt>
   12a64:	mov	r2, #5
   12a68:	ldr	r1, [pc, #580]	; 12cb4 <__assert_fail@plt+0x1d5c>
   12a6c:	mov	r0, r5
   12a70:	bl	10d78 <dcgettext@plt>
   12a74:	ldr	r1, [r7]
   12a78:	bl	10cdc <fputs_unlocked@plt>
   12a7c:	mov	r2, #5
   12a80:	ldr	r1, [pc, #560]	; 12cb8 <__assert_fail@plt+0x1d60>
   12a84:	mov	r0, r5
   12a88:	bl	10d78 <dcgettext@plt>
   12a8c:	ldr	r1, [r7]
   12a90:	bl	10cdc <fputs_unlocked@plt>
   12a94:	mov	r2, #5
   12a98:	ldr	r1, [pc, #540]	; 12cbc <__assert_fail@plt+0x1d64>
   12a9c:	mov	r0, r5
   12aa0:	bl	10d78 <dcgettext@plt>
   12aa4:	ldr	r1, [r7]
   12aa8:	bl	10cdc <fputs_unlocked@plt>
   12aac:	mov	r2, #5
   12ab0:	ldr	r1, [pc, #520]	; 12cc0 <__assert_fail@plt+0x1d68>
   12ab4:	mov	r0, r5
   12ab8:	bl	10d78 <dcgettext@plt>
   12abc:	ldr	r1, [r7]
   12ac0:	bl	10cdc <fputs_unlocked@plt>
   12ac4:	ldm	r4!, {r0, r1, r2, r3}
   12ac8:	mov	lr, sp
   12acc:	stmia	lr!, {r0, r1, r2, r3}
   12ad0:	ldm	r4!, {r0, r1, r2, r3}
   12ad4:	ldr	ip, [sp]
   12ad8:	stmia	lr!, {r0, r1, r2, r3}
   12adc:	cmp	ip, #0
   12ae0:	ldm	r4!, {r0, r1, r2, r3}
   12ae4:	stmia	lr!, {r0, r1, r2, r3}
   12ae8:	ldm	r4, {r0, r1}
   12aec:	moveq	r4, sp
   12af0:	stm	lr, {r0, r1}
   12af4:	beq	12b24 <__assert_fail@plt+0x1bcc>
   12af8:	ldr	r6, [pc, #452]	; 12cc4 <__assert_fail@plt+0x1d6c>
   12afc:	mov	r4, sp
   12b00:	b	12b10 <__assert_fail@plt+0x1bb8>
   12b04:	ldr	ip, [r4, #8]!
   12b08:	cmp	ip, #0
   12b0c:	beq	12b24 <__assert_fail@plt+0x1bcc>
   12b10:	mov	r1, ip
   12b14:	mov	r0, r6
   12b18:	bl	10cf4 <strcmp@plt>
   12b1c:	cmp	r0, #0
   12b20:	bne	12b04 <__assert_fail@plt+0x1bac>
   12b24:	ldr	r4, [r4, #4]
   12b28:	mov	r2, #5
   12b2c:	cmp	r4, #0
   12b30:	ldr	r1, [pc, #400]	; 12cc8 <__assert_fail@plt+0x1d70>
   12b34:	beq	12bdc <__assert_fail@plt+0x1c84>
   12b38:	mov	r0, #0
   12b3c:	bl	10d78 <dcgettext@plt>
   12b40:	ldr	r3, [pc, #388]	; 12ccc <__assert_fail@plt+0x1d74>
   12b44:	ldr	r2, [pc, #388]	; 12cd0 <__assert_fail@plt+0x1d78>
   12b48:	mov	r1, r0
   12b4c:	mov	r0, #1
   12b50:	bl	10eb0 <__printf_chk@plt>
   12b54:	mov	r1, #0
   12b58:	mov	r0, #5
   12b5c:	bl	10ef8 <setlocale@plt>
   12b60:	cmp	r0, #0
   12b64:	ldreq	r6, [pc, #344]	; 12cc4 <__assert_fail@plt+0x1d6c>
   12b68:	beq	12b84 <__assert_fail@plt+0x1c2c>
   12b6c:	mov	r2, #3
   12b70:	ldr	r1, [pc, #348]	; 12cd4 <__assert_fail@plt+0x1d7c>
   12b74:	bl	10f34 <strncmp@plt>
   12b78:	ldr	r6, [pc, #324]	; 12cc4 <__assert_fail@plt+0x1d6c>
   12b7c:	cmp	r0, #0
   12b80:	bne	12c6c <__assert_fail@plt+0x1d14>
   12b84:	mov	r2, #5
   12b88:	ldr	r1, [pc, #328]	; 12cd8 <__assert_fail@plt+0x1d80>
   12b8c:	mov	r0, #0
   12b90:	bl	10d78 <dcgettext@plt>
   12b94:	ldr	r3, [pc, #296]	; 12cc4 <__assert_fail@plt+0x1d6c>
   12b98:	ldr	r2, [pc, #300]	; 12ccc <__assert_fail@plt+0x1d74>
   12b9c:	mov	r1, r0
   12ba0:	mov	r0, #1
   12ba4:	bl	10eb0 <__printf_chk@plt>
   12ba8:	mov	r2, #5
   12bac:	ldr	r1, [pc, #296]	; 12cdc <__assert_fail@plt+0x1d84>
   12bb0:	mov	r0, #0
   12bb4:	bl	10d78 <dcgettext@plt>
   12bb8:	ldr	r2, [pc, #288]	; 12ce0 <__assert_fail@plt+0x1d88>
   12bbc:	cmp	r4, r6
   12bc0:	ldr	r3, [pc, #284]	; 12ce4 <__assert_fail@plt+0x1d8c>
   12bc4:	movne	r3, r2
   12bc8:	mov	r1, r0
   12bcc:	mov	r2, r4
   12bd0:	mov	r0, #1
   12bd4:	bl	10eb0 <__printf_chk@plt>
   12bd8:	b	129ac <__assert_fail@plt+0x1a54>
   12bdc:	mov	r0, r4
   12be0:	bl	10d78 <dcgettext@plt>
   12be4:	ldr	r3, [pc, #224]	; 12ccc <__assert_fail@plt+0x1d74>
   12be8:	ldr	r2, [pc, #224]	; 12cd0 <__assert_fail@plt+0x1d78>
   12bec:	mov	r1, r0
   12bf0:	mov	r0, #1
   12bf4:	bl	10eb0 <__printf_chk@plt>
   12bf8:	mov	r1, r4
   12bfc:	mov	r0, #5
   12c00:	bl	10ef8 <setlocale@plt>
   12c04:	cmp	r0, #0
   12c08:	beq	12c20 <__assert_fail@plt+0x1cc8>
   12c0c:	mov	r2, #3
   12c10:	ldr	r1, [pc, #188]	; 12cd4 <__assert_fail@plt+0x1d7c>
   12c14:	bl	10f34 <strncmp@plt>
   12c18:	cmp	r0, #0
   12c1c:	bne	12c64 <__assert_fail@plt+0x1d0c>
   12c20:	mov	r2, #5
   12c24:	ldr	r1, [pc, #172]	; 12cd8 <__assert_fail@plt+0x1d80>
   12c28:	mov	r0, #0
   12c2c:	bl	10d78 <dcgettext@plt>
   12c30:	ldr	r3, [pc, #140]	; 12cc4 <__assert_fail@plt+0x1d6c>
   12c34:	ldr	r2, [pc, #144]	; 12ccc <__assert_fail@plt+0x1d74>
   12c38:	mov	r4, r3
   12c3c:	mov	r1, r0
   12c40:	mov	r0, #1
   12c44:	bl	10eb0 <__printf_chk@plt>
   12c48:	ldr	r1, [pc, #140]	; 12cdc <__assert_fail@plt+0x1d84>
   12c4c:	mov	r2, #5
   12c50:	mov	r0, #0
   12c54:	bl	10d78 <dcgettext@plt>
   12c58:	ldr	r3, [pc, #132]	; 12ce4 <__assert_fail@plt+0x1d8c>
   12c5c:	mov	r1, r0
   12c60:	b	12bcc <__assert_fail@plt+0x1c74>
   12c64:	ldr	r6, [pc, #88]	; 12cc4 <__assert_fail@plt+0x1d6c>
   12c68:	mov	r4, r6
   12c6c:	mov	r2, #5
   12c70:	ldr	r1, [pc, #112]	; 12ce8 <__assert_fail@plt+0x1d90>
   12c74:	mov	r0, #0
   12c78:	bl	10d78 <dcgettext@plt>
   12c7c:	ldr	r1, [r7]
   12c80:	bl	10cdc <fputs_unlocked@plt>
   12c84:	b	12b84 <__assert_fail@plt+0x1c2c>
   12c88:	andeq	r8, r2, r0, asr r1
   12c8c:	strdeq	r6, [r1], -ip
   12c90:	andeq	r8, r2, ip, ror #2
   12c94:	andeq	r6, r1, r4, lsr #30
   12c98:	andeq	r8, r2, r4, asr r1
   12c9c:	andeq	r6, r1, r4, lsr sp
   12ca0:	andeq	r6, r1, r8, asr #30
   12ca4:	ldrdeq	r6, [r1], -r0
   12ca8:	andeq	r7, r1, r8
   12cac:	andeq	r7, r1, r4, asr r0
   12cb0:	andeq	r7, r1, r4, ror #3
   12cb4:	andeq	r7, r1, r8, ror #4
   12cb8:	andeq	r7, r1, r8, lsr #5
   12cbc:	ldrdeq	r7, [r1], -r8
   12cc0:	andeq	r7, r1, r0, lsl r3
   12cc4:	strdeq	r6, [r1], -r4
   12cc8:	andeq	r7, r1, r4, ror #7
   12ccc:	strdeq	r7, [r1], -ip
   12cd0:	andeq	r7, r1, r4, lsr #8
   12cd4:	andeq	r7, r1, r4, lsr r4
   12cd8:	andeq	r7, r1, r0, lsl #9
   12cdc:	muleq	r1, ip, r4
   12ce0:	andeq	r6, r1, r4, asr #30
   12ce4:	ldrdeq	r7, [r1], -r4
   12ce8:	andeq	r7, r1, r8, lsr r4
   12cec:	ldr	r3, [pc, #4]	; 12cf8 <__assert_fail@plt+0x1da0>
   12cf0:	str	r0, [r3]
   12cf4:	bx	lr
   12cf8:	andeq	r8, r2, r4, ror #2
   12cfc:	ldr	r3, [pc, #4]	; 12d08 <__assert_fail@plt+0x1db0>
   12d00:	strb	r0, [r3, #4]
   12d04:	bx	lr
   12d08:	andeq	r8, r2, r4, ror #2
   12d0c:	ldr	r3, [pc, #192]	; 12dd4 <__assert_fail@plt+0x1e7c>
   12d10:	push	{r4, r5, r6, lr}
   12d14:	sub	sp, sp, #8
   12d18:	ldr	r0, [r3]
   12d1c:	bl	16234 <__assert_fail@plt+0x52dc>
   12d20:	cmp	r0, #0
   12d24:	beq	12d48 <__assert_fail@plt+0x1df0>
   12d28:	ldr	r4, [pc, #168]	; 12dd8 <__assert_fail@plt+0x1e80>
   12d2c:	ldrb	r3, [r4, #4]
   12d30:	cmp	r3, #0
   12d34:	beq	12d64 <__assert_fail@plt+0x1e0c>
   12d38:	bl	10e8c <__errno_location@plt>
   12d3c:	ldr	r3, [r0]
   12d40:	cmp	r3, #32
   12d44:	bne	12d64 <__assert_fail@plt+0x1e0c>
   12d48:	ldr	r3, [pc, #140]	; 12ddc <__assert_fail@plt+0x1e84>
   12d4c:	ldr	r0, [r3]
   12d50:	bl	16234 <__assert_fail@plt+0x52dc>
   12d54:	cmp	r0, #0
   12d58:	bne	12dac <__assert_fail@plt+0x1e54>
   12d5c:	add	sp, sp, #8
   12d60:	pop	{r4, r5, r6, pc}
   12d64:	mov	r2, #5
   12d68:	ldr	r1, [pc, #112]	; 12de0 <__assert_fail@plt+0x1e88>
   12d6c:	mov	r0, #0
   12d70:	bl	10d78 <dcgettext@plt>
   12d74:	ldr	r4, [r4]
   12d78:	cmp	r4, #0
   12d7c:	mov	r5, r0
   12d80:	beq	12db8 <__assert_fail@plt+0x1e60>
   12d84:	bl	10e8c <__errno_location@plt>
   12d88:	ldr	r6, [r0]
   12d8c:	mov	r0, r4
   12d90:	bl	14d18 <__assert_fail@plt+0x3dc0>
   12d94:	mov	r1, r6
   12d98:	str	r5, [sp]
   12d9c:	ldr	r2, [pc, #64]	; 12de4 <__assert_fail@plt+0x1e8c>
   12da0:	mov	r3, r0
   12da4:	mov	r0, #0
   12da8:	bl	10dfc <error@plt>
   12dac:	ldr	r3, [pc, #52]	; 12de8 <__assert_fail@plt+0x1e90>
   12db0:	ldr	r0, [r3]
   12db4:	bl	10d24 <_exit@plt>
   12db8:	bl	10e8c <__errno_location@plt>
   12dbc:	mov	r3, r5
   12dc0:	ldr	r2, [pc, #36]	; 12dec <__assert_fail@plt+0x1e94>
   12dc4:	ldr	r1, [r0]
   12dc8:	mov	r0, r4
   12dcc:	bl	10dfc <error@plt>
   12dd0:	b	12dac <__assert_fail@plt+0x1e54>
   12dd4:	andeq	r8, r2, r4, asr r1
   12dd8:	andeq	r8, r2, r4, ror #2
   12ddc:	andeq	r8, r2, r0, asr r1
   12de0:	andeq	r7, r1, r4, lsr #13
   12de4:	andeq	r7, r1, ip, lsr r5
   12de8:	strdeq	r8, [r2], -ip
   12dec:	andeq	r7, r1, r0, asr #10
   12df0:	push	{r4, r5, lr}
   12df4:	sub	sp, sp, #12
   12df8:	mov	r5, r0
   12dfc:	bl	10e8c <__errno_location@plt>
   12e00:	mov	r2, #0
   12e04:	mov	r4, r0
   12e08:	ldr	r3, [r0]
   12e0c:	str	r2, [r4]
   12e10:	mov	r0, r5
   12e14:	str	r3, [sp]
   12e18:	str	r3, [sp, #4]
   12e1c:	bl	10d18 <free@plt>
   12e20:	ldr	r3, [r4]
   12e24:	add	r2, sp, #8
   12e28:	cmp	r3, #0
   12e2c:	moveq	r3, #4
   12e30:	movne	r3, #0
   12e34:	add	r3, r2, r3
   12e38:	ldr	r3, [r3, #-8]
   12e3c:	str	r3, [r4]
   12e40:	add	sp, sp, #12
   12e44:	pop	{r4, r5, pc}
   12e48:	push	{r4, r5, r6, r7, r8, lr}
   12e4c:	subs	r5, r2, #0
   12e50:	beq	12eb0 <__assert_fail@plt+0x1f58>
   12e54:	mov	r8, r0
   12e58:	mov	r6, r1
   12e5c:	mov	r7, #0
   12e60:	b	12e7c <__assert_fail@plt+0x1f24>
   12e64:	cmp	r0, #0
   12e68:	beq	12ea0 <__assert_fail@plt+0x1f48>
   12e6c:	subs	r5, r5, r0
   12e70:	add	r7, r7, r0
   12e74:	add	r6, r6, r0
   12e78:	beq	12e98 <__assert_fail@plt+0x1f40>
   12e7c:	mov	r2, r5
   12e80:	mov	r1, r6
   12e84:	mov	r0, r8
   12e88:	bl	14ec8 <__assert_fail@plt+0x3f70>
   12e8c:	cmn	r0, #1
   12e90:	mov	r4, r0
   12e94:	bne	12e64 <__assert_fail@plt+0x1f0c>
   12e98:	mov	r0, r7
   12e9c:	pop	{r4, r5, r6, r7, r8, pc}
   12ea0:	bl	10e8c <__errno_location@plt>
   12ea4:	str	r4, [r0]
   12ea8:	mov	r0, r7
   12eac:	pop	{r4, r5, r6, r7, r8, pc}
   12eb0:	mov	r7, r5
   12eb4:	b	12e98 <__assert_fail@plt+0x1f40>
   12eb8:	cmp	r0, #0
   12ebc:	sbcs	r3, r1, #0
   12ec0:	mov	r3, #0
   12ec4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12ec8:	mov	r4, r0
   12ecc:	mov	r5, r1
   12ed0:	strb	r3, [r2, #20]
   12ed4:	add	r6, r2, #20
   12ed8:	mov	r8, #10
   12edc:	mov	r9, #0
   12ee0:	blt	12f30 <__assert_fail@plt+0x1fd8>
   12ee4:	mov	r0, r4
   12ee8:	mov	r1, r5
   12eec:	mov	r2, r8
   12ef0:	mov	r3, r9
   12ef4:	bl	16a64 <__assert_fail@plt+0x5b0c>
   12ef8:	mov	r0, r4
   12efc:	mov	r1, r5
   12f00:	mov	r3, r9
   12f04:	add	r2, r2, #48	; 0x30
   12f08:	strb	r2, [r6, #-1]!
   12f0c:	mov	r2, r8
   12f10:	bl	16a64 <__assert_fail@plt+0x5b0c>
   12f14:	mov	r4, r0
   12f18:	mov	r5, r1
   12f1c:	orrs	r3, r4, r5
   12f20:	bne	12ee4 <__assert_fail@plt+0x1f8c>
   12f24:	mov	r0, r6
   12f28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12f2c:	mov	r6, r7
   12f30:	mov	r0, r4
   12f34:	mov	r1, r5
   12f38:	mov	r2, r8
   12f3c:	mov	r3, r9
   12f40:	bl	16a64 <__assert_fail@plt+0x5b0c>
   12f44:	mov	r0, r4
   12f48:	mov	r1, r5
   12f4c:	mov	r3, r9
   12f50:	sub	r7, r6, #1
   12f54:	rsb	r2, r2, #48	; 0x30
   12f58:	strb	r2, [r6, #-1]
   12f5c:	mov	r2, r8
   12f60:	bl	16a64 <__assert_fail@plt+0x5b0c>
   12f64:	mov	r4, r0
   12f68:	mov	r5, r1
   12f6c:	orrs	r3, r4, r5
   12f70:	bne	12f2c <__assert_fail@plt+0x1fd4>
   12f74:	mov	r3, #45	; 0x2d
   12f78:	sub	r6, r6, #2
   12f7c:	strb	r3, [r7, #-1]
   12f80:	mov	r0, r6
   12f84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12f88:	push	{r4, r5, r6, r8, r9, lr}
   12f8c:	mov	r4, r0
   12f90:	mov	r5, r1
   12f94:	add	r6, r2, #20
   12f98:	mov	r8, #10
   12f9c:	mov	r9, #0
   12fa0:	mov	r3, #0
   12fa4:	strb	r3, [r2, #20]
   12fa8:	mov	r0, r4
   12fac:	mov	r1, r5
   12fb0:	mov	r2, r8
   12fb4:	mov	r3, r9
   12fb8:	bl	16b38 <__assert_fail@plt+0x5be0>
   12fbc:	mov	r0, r4
   12fc0:	mov	r1, r5
   12fc4:	mov	r3, r9
   12fc8:	add	r2, r2, #48	; 0x30
   12fcc:	strb	r2, [r6, #-1]!
   12fd0:	mov	r2, r8
   12fd4:	bl	16b38 <__assert_fail@plt+0x5be0>
   12fd8:	mov	r4, r0
   12fdc:	mov	r5, r1
   12fe0:	orrs	r3, r4, r5
   12fe4:	bne	12fa8 <__assert_fail@plt+0x2050>
   12fe8:	mov	r0, r6
   12fec:	pop	{r4, r5, r6, r8, r9, pc}
   12ff0:	push	{r4, r5, r6, lr}
   12ff4:	subs	r4, r0, #0
   12ff8:	beq	1306c <__assert_fail@plt+0x2114>
   12ffc:	mov	r1, #47	; 0x2f
   13000:	bl	10f04 <strrchr@plt>
   13004:	subs	r5, r0, #0
   13008:	beq	13058 <__assert_fail@plt+0x2100>
   1300c:	add	r6, r5, #1
   13010:	sub	r3, r6, r4
   13014:	cmp	r3, #6
   13018:	ble	13058 <__assert_fail@plt+0x2100>
   1301c:	mov	r2, #7
   13020:	ldr	r1, [pc, #96]	; 13088 <__assert_fail@plt+0x2130>
   13024:	sub	r0, r5, #6
   13028:	bl	10f34 <strncmp@plt>
   1302c:	cmp	r0, #0
   13030:	bne	13058 <__assert_fail@plt+0x2100>
   13034:	mov	r2, #3
   13038:	ldr	r1, [pc, #76]	; 1308c <__assert_fail@plt+0x2134>
   1303c:	mov	r0, r6
   13040:	bl	10f34 <strncmp@plt>
   13044:	cmp	r0, #0
   13048:	movne	r4, r6
   1304c:	ldreq	r3, [pc, #60]	; 13090 <__assert_fail@plt+0x2138>
   13050:	addeq	r4, r5, #4
   13054:	streq	r4, [r3]
   13058:	ldr	r2, [pc, #52]	; 13094 <__assert_fail@plt+0x213c>
   1305c:	ldr	r3, [pc, #52]	; 13098 <__assert_fail@plt+0x2140>
   13060:	str	r4, [r2]
   13064:	str	r4, [r3]
   13068:	pop	{r4, r5, r6, pc}
   1306c:	ldr	r3, [pc, #40]	; 1309c <__assert_fail@plt+0x2144>
   13070:	mov	r2, #55	; 0x37
   13074:	mov	r1, #1
   13078:	ldr	r3, [r3]
   1307c:	ldr	r0, [pc, #28]	; 130a0 <__assert_fail@plt+0x2148>
   13080:	bl	10dc0 <fwrite@plt>
   13084:	bl	10f40 <abort@plt>
   13088:	andeq	r7, r1, r8, ror #13
   1308c:	strdeq	r7, [r1], -r0
   13090:	andeq	r8, r2, r0, asr #2
   13094:	andeq	r8, r2, ip, ror #2
   13098:	andeq	r8, r2, r4, asr #2
   1309c:	andeq	r8, r2, r0, asr r1
   130a0:			; <UNDEFINED> instruction: 0x000176b0
   130a4:	push	{r4, r5, r6, lr}
   130a8:	mov	r2, #48	; 0x30
   130ac:	mov	r4, r1
   130b0:	mov	r1, #0
   130b4:	mov	r5, r0
   130b8:	bl	10ea4 <memset@plt>
   130bc:	cmp	r4, #10
   130c0:	beq	130d0 <__assert_fail@plt+0x2178>
   130c4:	str	r4, [r5]
   130c8:	mov	r0, r5
   130cc:	pop	{r4, r5, r6, pc}
   130d0:	bl	10f40 <abort@plt>
   130d4:	push	{r4, r5, r6, lr}
   130d8:	mov	r4, r0
   130dc:	mov	r5, r1
   130e0:	bl	16450 <__assert_fail@plt+0x54f8>
   130e4:	ldrb	r3, [r0]
   130e8:	bic	r3, r3, #32
   130ec:	cmp	r3, #85	; 0x55
   130f0:	bne	13150 <__assert_fail@plt+0x21f8>
   130f4:	ldrb	r3, [r0, #1]
   130f8:	bic	r3, r3, #32
   130fc:	cmp	r3, #84	; 0x54
   13100:	bne	1318c <__assert_fail@plt+0x2234>
   13104:	ldrb	r3, [r0, #2]
   13108:	bic	r3, r3, #32
   1310c:	cmp	r3, #70	; 0x46
   13110:	bne	1318c <__assert_fail@plt+0x2234>
   13114:	ldrb	r3, [r0, #3]
   13118:	cmp	r3, #45	; 0x2d
   1311c:	bne	1318c <__assert_fail@plt+0x2234>
   13120:	ldrb	r3, [r0, #4]
   13124:	cmp	r3, #56	; 0x38
   13128:	bne	1318c <__assert_fail@plt+0x2234>
   1312c:	ldrb	r3, [r0, #5]
   13130:	cmp	r3, #0
   13134:	bne	1318c <__assert_fail@plt+0x2234>
   13138:	ldrb	r2, [r4]
   1313c:	ldr	r3, [pc, #152]	; 131dc <__assert_fail@plt+0x2284>
   13140:	ldr	r0, [pc, #152]	; 131e0 <__assert_fail@plt+0x2288>
   13144:	cmp	r2, #96	; 0x60
   13148:	movne	r0, r3
   1314c:	pop	{r4, r5, r6, pc}
   13150:	cmp	r3, #71	; 0x47
   13154:	bne	1318c <__assert_fail@plt+0x2234>
   13158:	ldrb	r3, [r0, #1]
   1315c:	bic	r3, r3, #32
   13160:	cmp	r3, #66	; 0x42
   13164:	bne	1318c <__assert_fail@plt+0x2234>
   13168:	ldrb	r3, [r0, #2]
   1316c:	cmp	r3, #49	; 0x31
   13170:	bne	1318c <__assert_fail@plt+0x2234>
   13174:	ldrb	r3, [r0, #3]
   13178:	cmp	r3, #56	; 0x38
   1317c:	bne	1318c <__assert_fail@plt+0x2234>
   13180:	ldrb	r3, [r0, #4]
   13184:	cmp	r3, #48	; 0x30
   13188:	beq	131a0 <__assert_fail@plt+0x2248>
   1318c:	ldr	r3, [pc, #80]	; 131e4 <__assert_fail@plt+0x228c>
   13190:	cmp	r5, #9
   13194:	ldr	r0, [pc, #76]	; 131e8 <__assert_fail@plt+0x2290>
   13198:	movne	r0, r3
   1319c:	pop	{r4, r5, r6, pc}
   131a0:	ldrb	r3, [r0, #5]
   131a4:	cmp	r3, #51	; 0x33
   131a8:	bne	1318c <__assert_fail@plt+0x2234>
   131ac:	ldrb	r3, [r0, #6]
   131b0:	cmp	r3, #48	; 0x30
   131b4:	bne	1318c <__assert_fail@plt+0x2234>
   131b8:	ldrb	r3, [r0, #7]
   131bc:	cmp	r3, #0
   131c0:	bne	1318c <__assert_fail@plt+0x2234>
   131c4:	ldrb	r2, [r4]
   131c8:	ldr	r3, [pc, #28]	; 131ec <__assert_fail@plt+0x2294>
   131cc:	ldr	r0, [pc, #28]	; 131f0 <__assert_fail@plt+0x2298>
   131d0:	cmp	r2, #96	; 0x60
   131d4:	movne	r0, r3
   131d8:	pop	{r4, r5, r6, pc}
   131dc:	andeq	r7, r1, ip, asr #14
   131e0:	andeq	r7, r1, r8, asr #14
   131e4:	andeq	r7, r1, ip, asr r7
   131e8:	andeq	r7, r1, r8, asr r7
   131ec:	andeq	r7, r1, r4, asr r7
   131f0:	andeq	r7, r1, r0, asr r7
   131f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131f8:	sub	sp, sp, #116	; 0x74
   131fc:	mov	sl, r0
   13200:	str	r3, [sp, #24]
   13204:	mov	r3, #1
   13208:	mov	r8, r1
   1320c:	str	r2, [sp, #56]	; 0x38
   13210:	str	r3, [sp, #36]	; 0x24
   13214:	bl	10dd8 <__ctype_get_mb_cur_max@plt>
   13218:	ldr	r3, [sp, #156]	; 0x9c
   1321c:	mov	fp, r8
   13220:	mov	r2, #0
   13224:	lsr	r3, r3, #1
   13228:	and	r3, r3, #1
   1322c:	str	r2, [sp, #68]	; 0x44
   13230:	str	r3, [sp, #28]
   13234:	str	r2, [sp, #40]	; 0x28
   13238:	str	r2, [sp, #44]	; 0x2c
   1323c:	str	r2, [sp, #52]	; 0x34
   13240:	str	r2, [sp, #64]	; 0x40
   13244:	str	r2, [sp, #72]	; 0x48
   13248:	str	sl, [sp, #32]
   1324c:	str	r0, [sp, #76]	; 0x4c
   13250:	ldr	r3, [sp, #152]	; 0x98
   13254:	cmp	r3, #10
   13258:	ldrls	pc, [pc, r3, lsl #2]
   1325c:	b	1441c <__assert_fail@plt+0x34c4>
   13260:	andeq	r3, r1, ip, lsl #5
   13264:	andeq	r3, r1, r4, ror r5
   13268:	muleq	r1, r8, r5
   1326c:			; <UNDEFINED> instruction: 0x000135bc
   13270:	andeq	r3, r1, r8, ror #13
   13274:			; <UNDEFINED> instruction: 0x000136bc
   13278:	muleq	r1, r4, r6
   1327c:	ldrdeq	r3, [r1], -r0
   13280:	andeq	r3, r1, r8, ror #11
   13284:	andeq	r3, r1, r8, ror #11
   13288:	andeq	r3, r1, r8, ror #11
   1328c:	mov	r3, #0
   13290:	mov	r7, r3
   13294:	str	r3, [sp, #28]
   13298:	ldr	r3, [sp, #44]	; 0x2c
   1329c:	mov	sl, #0
   132a0:	eor	r3, r3, #1
   132a4:	str	r3, [sp, #60]	; 0x3c
   132a8:	ldr	r3, [sp, #24]
   132ac:	cmn	r3, #1
   132b0:	beq	13814 <__assert_fail@plt+0x28bc>
   132b4:	ldr	r3, [sp, #24]
   132b8:	subs	r5, r3, sl
   132bc:	movne	r5, #1
   132c0:	cmp	r5, #0
   132c4:	beq	1382c <__assert_fail@plt+0x28d4>
   132c8:	ldr	r3, [sp, #152]	; 0x98
   132cc:	ldr	r8, [sp, #44]	; 0x2c
   132d0:	cmp	r3, #2
   132d4:	moveq	r8, #0
   132d8:	andne	r8, r8, #1
   132dc:	ldr	r3, [sp, #52]	; 0x34
   132e0:	adds	r9, r3, #0
   132e4:	movne	r9, #1
   132e8:	ands	r6, r9, r8
   132ec:	beq	13c94 <__assert_fail@plt+0x2d3c>
   132f0:	ldr	r2, [sp, #52]	; 0x34
   132f4:	ldr	r1, [sp, #24]
   132f8:	cmp	r2, #1
   132fc:	mov	r3, r2
   13300:	movls	r3, #0
   13304:	movhi	r3, #1
   13308:	cmn	r1, #1
   1330c:	movne	r3, #0
   13310:	cmp	r3, #0
   13314:	add	r4, sl, r2
   13318:	beq	13328 <__assert_fail@plt+0x23d0>
   1331c:	ldr	r0, [sp, #56]	; 0x38
   13320:	bl	10e68 <strlen@plt>
   13324:	str	r0, [sp, #24]
   13328:	ldr	r3, [sp, #24]
   1332c:	cmp	r3, r4
   13330:	ldr	r3, [sp, #56]	; 0x38
   13334:	add	r3, r3, sl
   13338:	str	r3, [sp, #48]	; 0x30
   1333c:	bcc	13ca0 <__assert_fail@plt+0x2d48>
   13340:	mov	r0, r3
   13344:	ldr	r2, [sp, #52]	; 0x34
   13348:	ldr	r1, [sp, #64]	; 0x40
   1334c:	bl	10d60 <memcmp@plt>
   13350:	cmp	r0, #0
   13354:	bne	13ca0 <__assert_fail@plt+0x2d48>
   13358:	ldr	r3, [sp, #28]
   1335c:	cmp	r3, #0
   13360:	bne	1451c <__assert_fail@plt+0x35c4>
   13364:	ldr	r3, [sp, #48]	; 0x30
   13368:	ldrb	r4, [r3]
   1336c:	cmp	r4, #126	; 0x7e
   13370:	ldrls	pc, [pc, r4, lsl #2]
   13374:	b	13c34 <__assert_fail@plt+0x2cdc>
   13378:	andeq	r3, r1, r8, asr sl
   1337c:	andeq	r3, r1, r4, lsr ip
   13380:	andeq	r3, r1, r4, lsr ip
   13384:	andeq	r3, r1, r4, lsr ip
   13388:	andeq	r3, r1, r4, lsr ip
   1338c:	andeq	r3, r1, r4, lsr ip
   13390:	andeq	r3, r1, r4, lsr ip
   13394:	andeq	r3, r1, ip, lsr sl
   13398:	andeq	r3, r1, r0, lsr #20
   1339c:	andeq	r3, r1, ip, lsl ip
   133a0:	andeq	r3, r1, r0, lsl #19
   133a4:	andeq	r3, r1, r4, ror #18
   133a8:	strdeq	r3, [r1], -r8
   133ac:	ldrdeq	r3, [r1], -r4
   133b0:	andeq	r3, r1, r4, lsr ip
   133b4:	andeq	r3, r1, r4, lsr ip
   133b8:	andeq	r3, r1, r4, lsr ip
   133bc:	andeq	r3, r1, r4, lsr ip
   133c0:	andeq	r3, r1, r4, lsr ip
   133c4:	andeq	r3, r1, r4, lsr ip
   133c8:	andeq	r3, r1, r4, lsr ip
   133cc:	andeq	r3, r1, r4, lsr ip
   133d0:	andeq	r3, r1, r4, lsr ip
   133d4:	andeq	r3, r1, r4, lsr ip
   133d8:	andeq	r3, r1, r4, lsr ip
   133dc:	andeq	r3, r1, r4, lsr ip
   133e0:	andeq	r3, r1, r4, lsr ip
   133e4:	andeq	r3, r1, r4, lsr ip
   133e8:	andeq	r3, r1, r4, lsr ip
   133ec:	andeq	r3, r1, r4, lsr ip
   133f0:	andeq	r3, r1, r4, lsr ip
   133f4:	andeq	r3, r1, r4, lsr ip
   133f8:	andeq	r3, r1, r4, lsl ip
   133fc:	andeq	r3, r1, r8, asr #22
   13400:	andeq	r3, r1, r8, asr #22
   13404:	andeq	r3, r1, r8, asr r7
   13408:	andeq	r3, r1, r8, asr #22
   1340c:	andeq	r3, r1, r0, ror #23
   13410:	andeq	r3, r1, r8, asr #22
   13414:			; <UNDEFINED> instruction: 0x00013bb4
   13418:	andeq	r3, r1, r8, asr #22
   1341c:	andeq	r3, r1, r8, asr #22
   13420:	andeq	r3, r1, r8, asr #22
   13424:	andeq	r3, r1, r0, ror #23
   13428:	andeq	r3, r1, r0, ror #23
   1342c:	andeq	r3, r1, r0, ror #23
   13430:	andeq	r3, r1, r0, ror #23
   13434:	andeq	r3, r1, r0, ror #23
   13438:	andeq	r3, r1, r0, ror #23
   1343c:	andeq	r3, r1, r0, ror #23
   13440:	andeq	r3, r1, r0, ror #23
   13444:	andeq	r3, r1, r0, ror #23
   13448:	andeq	r3, r1, r0, ror #23
   1344c:	andeq	r3, r1, r0, ror #23
   13450:	andeq	r3, r1, r0, ror #23
   13454:	andeq	r3, r1, r0, ror #23
   13458:	andeq	r3, r1, r0, ror #23
   1345c:	andeq	r3, r1, r0, ror #23
   13460:	andeq	r3, r1, r0, ror #23
   13464:	andeq	r3, r1, r8, asr #22
   13468:	andeq	r3, r1, r8, asr #22
   1346c:	andeq	r3, r1, r8, asr #22
   13470:	andeq	r3, r1, r8, asr #22
   13474:	andeq	r3, r1, r4, lsl #23
   13478:	andeq	r3, r1, r4, lsr ip
   1347c:	andeq	r3, r1, r0, ror #23
   13480:	andeq	r3, r1, r0, ror #23
   13484:	andeq	r3, r1, r0, ror #23
   13488:	andeq	r3, r1, r0, ror #23
   1348c:	andeq	r3, r1, r0, ror #23
   13490:	andeq	r3, r1, r0, ror #23
   13494:	andeq	r3, r1, r0, ror #23
   13498:	andeq	r3, r1, r0, ror #23
   1349c:	andeq	r3, r1, r0, ror #23
   134a0:	andeq	r3, r1, r0, ror #23
   134a4:	andeq	r3, r1, r0, ror #23
   134a8:	andeq	r3, r1, r0, ror #23
   134ac:	andeq	r3, r1, r0, ror #23
   134b0:	andeq	r3, r1, r0, ror #23
   134b4:	andeq	r3, r1, r0, ror #23
   134b8:	andeq	r3, r1, r0, ror #23
   134bc:	andeq	r3, r1, r0, ror #23
   134c0:	andeq	r3, r1, r0, ror #23
   134c4:	andeq	r3, r1, r0, ror #23
   134c8:	andeq	r3, r1, r0, ror #23
   134cc:	andeq	r3, r1, r0, ror #23
   134d0:	andeq	r3, r1, r0, ror #23
   134d4:	andeq	r3, r1, r0, ror #23
   134d8:	andeq	r3, r1, r0, ror #23
   134dc:	andeq	r3, r1, r0, ror #23
   134e0:	andeq	r3, r1, r0, ror #23
   134e4:	andeq	r3, r1, r8, asr #22
   134e8:	andeq	r3, r1, r4, lsr #17
   134ec:	andeq	r3, r1, r0, ror #23
   134f0:	andeq	r3, r1, r8, asr #22
   134f4:	andeq	r3, r1, r0, ror #23
   134f8:	andeq	r3, r1, r8, asr #22
   134fc:	andeq	r3, r1, r0, ror #23
   13500:	andeq	r3, r1, r0, ror #23
   13504:	andeq	r3, r1, r0, ror #23
   13508:	andeq	r3, r1, r0, ror #23
   1350c:	andeq	r3, r1, r0, ror #23
   13510:	andeq	r3, r1, r0, ror #23
   13514:	andeq	r3, r1, r0, ror #23
   13518:	andeq	r3, r1, r0, ror #23
   1351c:	andeq	r3, r1, r0, ror #23
   13520:	andeq	r3, r1, r0, ror #23
   13524:	andeq	r3, r1, r0, ror #23
   13528:	andeq	r3, r1, r0, ror #23
   1352c:	andeq	r3, r1, r0, ror #23
   13530:	andeq	r3, r1, r0, ror #23
   13534:	andeq	r3, r1, r0, ror #23
   13538:	andeq	r3, r1, r0, ror #23
   1353c:	andeq	r3, r1, r0, ror #23
   13540:	andeq	r3, r1, r0, ror #23
   13544:	andeq	r3, r1, r0, ror #23
   13548:	andeq	r3, r1, r0, ror #23
   1354c:	andeq	r3, r1, r0, ror #23
   13550:	andeq	r3, r1, r0, ror #23
   13554:	andeq	r3, r1, r0, ror #23
   13558:	andeq	r3, r1, r0, ror #23
   1355c:	andeq	r3, r1, r0, ror #23
   13560:	andeq	r3, r1, r0, ror #23
   13564:	andeq	r3, r1, r8, lsr r7
   13568:	andeq	r3, r1, r8, asr #22
   1356c:	andeq	r3, r1, r8, lsr r7
   13570:	andeq	r3, r1, r8, asr r7
   13574:	mov	r3, #1
   13578:	str	r3, [sp, #28]
   1357c:	str	r3, [sp, #52]	; 0x34
   13580:	ldr	r3, [pc, #4000]	; 14528 <__assert_fail@plt+0x35d0>
   13584:	mov	r7, #0
   13588:	str	r3, [sp, #64]	; 0x40
   1358c:	mov	r3, #2
   13590:	str	r3, [sp, #152]	; 0x98
   13594:	b	13298 <__assert_fail@plt+0x2340>
   13598:	ldr	r3, [sp, #28]
   1359c:	cmp	r3, #0
   135a0:	beq	136fc <__assert_fail@plt+0x27a4>
   135a4:	mov	r3, #1
   135a8:	str	r3, [sp, #52]	; 0x34
   135ac:	ldr	r3, [pc, #3956]	; 14528 <__assert_fail@plt+0x35d0>
   135b0:	mov	r7, #0
   135b4:	str	r3, [sp, #64]	; 0x40
   135b8:	b	13298 <__assert_fail@plt+0x2340>
   135bc:	mov	r3, #1
   135c0:	str	r3, [sp, #44]	; 0x2c
   135c4:	str	r3, [sp, #52]	; 0x34
   135c8:	str	r3, [sp, #28]
   135cc:	b	13580 <__assert_fail@plt+0x2628>
   135d0:	mov	r3, #0
   135d4:	str	r3, [sp, #28]
   135d8:	mov	r3, #1
   135dc:	str	r3, [sp, #44]	; 0x2c
   135e0:	mov	r7, #0
   135e4:	b	13298 <__assert_fail@plt+0x2340>
   135e8:	ldr	r3, [sp, #152]	; 0x98
   135ec:	cmp	r3, #10
   135f0:	beq	13634 <__assert_fail@plt+0x26dc>
   135f4:	mov	r2, #5
   135f8:	ldr	r1, [pc, #3884]	; 1452c <__assert_fail@plt+0x35d4>
   135fc:	mov	r0, #0
   13600:	bl	10d78 <dcgettext@plt>
   13604:	ldr	r2, [pc, #3872]	; 1452c <__assert_fail@plt+0x35d4>
   13608:	cmp	r0, r2
   1360c:	str	r0, [sp, #164]	; 0xa4
   13610:	beq	14618 <__assert_fail@plt+0x36c0>
   13614:	mov	r2, #5
   13618:	ldr	r1, [pc, #3848]	; 14528 <__assert_fail@plt+0x35d0>
   1361c:	mov	r0, #0
   13620:	bl	10d78 <dcgettext@plt>
   13624:	ldr	r2, [pc, #3836]	; 14528 <__assert_fail@plt+0x35d0>
   13628:	cmp	r0, r2
   1362c:	str	r0, [sp, #168]	; 0xa8
   13630:	beq	14608 <__assert_fail@plt+0x36b0>
   13634:	ldr	r7, [sp, #28]
   13638:	cmp	r7, #0
   1363c:	movne	r7, #0
   13640:	bne	13674 <__assert_fail@plt+0x271c>
   13644:	ldr	r3, [sp, #164]	; 0xa4
   13648:	ldrb	r3, [r3]
   1364c:	cmp	r3, #0
   13650:	beq	14628 <__assert_fail@plt+0x36d0>
   13654:	ldr	r2, [sp, #164]	; 0xa4
   13658:	ldr	r1, [sp, #32]
   1365c:	cmp	fp, r7
   13660:	strbhi	r3, [r1, r7]
   13664:	ldrb	r3, [r2, #1]!
   13668:	add	r7, r7, #1
   1366c:	cmp	r3, #0
   13670:	bne	1365c <__assert_fail@plt+0x2704>
   13674:	ldr	r0, [sp, #168]	; 0xa8
   13678:	bl	10e68 <strlen@plt>
   1367c:	ldr	r3, [sp, #168]	; 0xa8
   13680:	str	r3, [sp, #64]	; 0x40
   13684:	mov	r3, #1
   13688:	str	r3, [sp, #44]	; 0x2c
   1368c:	str	r0, [sp, #52]	; 0x34
   13690:	b	13298 <__assert_fail@plt+0x2340>
   13694:	mov	r3, #1
   13698:	str	r3, [sp, #44]	; 0x2c
   1369c:	str	r3, [sp, #52]	; 0x34
   136a0:	str	r3, [sp, #28]
   136a4:	ldr	r3, [pc, #3716]	; 14530 <__assert_fail@plt+0x35d8>
   136a8:	mov	r7, #0
   136ac:	str	r3, [sp, #64]	; 0x40
   136b0:	mov	r3, #5
   136b4:	str	r3, [sp, #152]	; 0x98
   136b8:	b	13298 <__assert_fail@plt+0x2340>
   136bc:	ldr	r3, [sp, #28]
   136c0:	cmp	r3, #0
   136c4:	beq	143c4 <__assert_fail@plt+0x346c>
   136c8:	ldr	r3, [sp, #28]
   136cc:	mov	r7, #0
   136d0:	str	r3, [sp, #44]	; 0x2c
   136d4:	mov	r3, #1
   136d8:	str	r3, [sp, #52]	; 0x34
   136dc:	ldr	r3, [pc, #3660]	; 14530 <__assert_fail@plt+0x35d8>
   136e0:	str	r3, [sp, #64]	; 0x40
   136e4:	b	13298 <__assert_fail@plt+0x2340>
   136e8:	ldr	r3, [sp, #28]
   136ec:	cmp	r3, #0
   136f0:	mov	r3, #1
   136f4:	streq	r3, [sp, #44]	; 0x2c
   136f8:	bne	1357c <__assert_fail@plt+0x2624>
   136fc:	cmp	fp, #0
   13700:	beq	143f4 <__assert_fail@plt+0x349c>
   13704:	ldr	r3, [sp, #32]
   13708:	mov	r2, #39	; 0x27
   1370c:	mov	r7, #1
   13710:	strb	r2, [r3]
   13714:	mov	r3, #0
   13718:	str	r3, [sp, #28]
   1371c:	mov	r3, #1
   13720:	str	r3, [sp, #52]	; 0x34
   13724:	ldr	r3, [pc, #3580]	; 14528 <__assert_fail@plt+0x35d0>
   13728:	str	r3, [sp, #64]	; 0x40
   1372c:	mov	r3, #2
   13730:	str	r3, [sp, #152]	; 0x98
   13734:	b	13298 <__assert_fail@plt+0x2340>
   13738:	ldr	r3, [sp, #24]
   1373c:	cmn	r3, #1
   13740:	beq	14358 <__assert_fail@plt+0x3400>
   13744:	ldr	r3, [sp, #24]
   13748:	subs	r3, r3, #1
   1374c:	movne	r3, #1
   13750:	cmp	r3, #0
   13754:	bne	13760 <__assert_fail@plt+0x2808>
   13758:	cmp	sl, #0
   1375c:	beq	13b4c <__assert_fail@plt+0x2bf4>
   13760:	ldr	r3, [sp, #152]	; 0x98
   13764:	mov	r5, #0
   13768:	sub	r2, r3, #2
   1376c:	mov	r8, r5
   13770:	clz	r2, r2
   13774:	lsr	r2, r2, #5
   13778:	ldr	r3, [sp, #60]	; 0x3c
   1377c:	ldr	r1, [sp, #28]
   13780:	orr	r3, r2, r3
   13784:	eor	r3, r3, #1
   13788:	orr	r3, r1, r3
   1378c:	tst	r3, #255	; 0xff
   13790:	bne	13ebc <__assert_fail@plt+0x2f64>
   13794:	cmp	r6, #0
   13798:	bne	138e8 <__assert_fail@plt+0x2990>
   1379c:	ldr	r3, [sp, #40]	; 0x28
   137a0:	eor	r8, r8, #1
   137a4:	and	r8, r8, r3
   137a8:	add	sl, sl, #1
   137ac:	uxtb	r6, r8
   137b0:	cmp	r6, #0
   137b4:	beq	137e8 <__assert_fail@plt+0x2890>
   137b8:	cmp	fp, r7
   137bc:	movhi	r2, #39	; 0x27
   137c0:	ldrhi	r3, [sp, #32]
   137c4:	strbhi	r2, [r3, r7]
   137c8:	add	r3, r7, #1
   137cc:	cmp	fp, r3
   137d0:	movhi	r1, #39	; 0x27
   137d4:	ldrhi	r2, [sp, #32]
   137d8:	add	r7, r7, #2
   137dc:	strbhi	r1, [r2, r3]
   137e0:	mov	r3, #0
   137e4:	str	r3, [sp, #40]	; 0x28
   137e8:	cmp	r7, fp
   137ec:	ldrcc	r3, [sp, #32]
   137f0:	strbcc	r4, [r3, r7]
   137f4:	ldr	r3, [sp, #36]	; 0x24
   137f8:	cmp	r5, #0
   137fc:	moveq	r3, #0
   13800:	str	r3, [sp, #36]	; 0x24
   13804:	ldr	r3, [sp, #24]
   13808:	add	r7, r7, #1
   1380c:	cmn	r3, #1
   13810:	bne	132b4 <__assert_fail@plt+0x235c>
   13814:	ldr	r3, [sp, #56]	; 0x38
   13818:	ldrb	r5, [r3, sl]
   1381c:	adds	r5, r5, #0
   13820:	movne	r5, #1
   13824:	cmp	r5, #0
   13828:	bne	132c8 <__assert_fail@plt+0x2370>
   1382c:	ldr	r3, [sp, #152]	; 0x98
   13830:	ldr	r1, [sp, #28]
   13834:	sub	r3, r3, #2
   13838:	clz	r3, r3
   1383c:	lsr	r3, r3, #5
   13840:	and	r9, r1, r3
   13844:	cmp	r7, #0
   13848:	movne	r2, #0
   1384c:	andeq	r2, r9, #1
   13850:	cmp	r2, #0
   13854:	bne	14230 <__assert_fail@plt+0x32d8>
   13858:	eor	r2, r1, #1
   1385c:	ands	r3, r3, r2
   13860:	beq	146ec <__assert_fail@plt+0x3794>
   13864:	ldr	r2, [sp, #68]	; 0x44
   13868:	cmp	r2, #0
   1386c:	beq	146d8 <__assert_fail@plt+0x3780>
   13870:	ldr	r3, [sp, #36]	; 0x24
   13874:	cmp	r3, #0
   13878:	bne	14690 <__assert_fail@plt+0x3738>
   1387c:	ldr	r2, [sp, #72]	; 0x48
   13880:	clz	r3, fp
   13884:	cmp	r2, #0
   13888:	lsr	r3, r3, #5
   1388c:	moveq	r3, #0
   13890:	cmp	r3, #0
   13894:	beq	14630 <__assert_fail@plt+0x36d8>
   13898:	str	r3, [sp, #68]	; 0x44
   1389c:	ldr	fp, [sp, #72]	; 0x48
   138a0:	b	13250 <__assert_fail@plt+0x22f8>
   138a4:	ldr	r3, [sp, #152]	; 0x98
   138a8:	cmp	r3, #2
   138ac:	beq	13f00 <__assert_fail@plt+0x2fa8>
   138b0:	ldr	r3, [sp, #44]	; 0x2c
   138b4:	ldr	r2, [sp, #28]
   138b8:	and	r2, r3, r2
   138bc:	ands	r2, r9, r2
   138c0:	bne	13f0c <__assert_fail@plt+0x2fb4>
   138c4:	mov	r4, #92	; 0x5c
   138c8:	mov	r3, r4
   138cc:	ldr	r1, [sp, #44]	; 0x2c
   138d0:	cmp	r1, #0
   138d4:	moveq	r5, #0
   138d8:	moveq	r8, r1
   138dc:	beq	13778 <__assert_fail@plt+0x2820>
   138e0:	mov	r4, r3
   138e4:	mov	r5, #0
   138e8:	ldr	r3, [sp, #28]
   138ec:	cmp	r3, #0
   138f0:	bne	13ef4 <__assert_fail@plt+0x2f9c>
   138f4:	ldr	r3, [sp, #40]	; 0x28
   138f8:	eor	r9, r3, #1
   138fc:	and	r9, r9, r2
   13900:	ands	r9, r9, #255	; 0xff
   13904:	beq	13948 <__assert_fail@plt+0x29f0>
   13908:	cmp	fp, r7
   1390c:	movhi	r2, #39	; 0x27
   13910:	ldrhi	r3, [sp, #32]
   13914:	str	r9, [sp, #40]	; 0x28
   13918:	strbhi	r2, [r3, r7]
   1391c:	add	r3, r7, #1
   13920:	cmp	fp, r3
   13924:	movhi	r1, #36	; 0x24
   13928:	ldrhi	r2, [sp, #32]
   1392c:	strbhi	r1, [r2, r3]
   13930:	add	r3, r7, #2
   13934:	cmp	fp, r3
   13938:	add	r7, r7, #3
   1393c:	ldrhi	r2, [sp, #32]
   13940:	movhi	r1, #39	; 0x27
   13944:	strbhi	r1, [r2, r3]
   13948:	cmp	fp, r7
   1394c:	movhi	r2, #92	; 0x5c
   13950:	ldrhi	r3, [sp, #32]
   13954:	add	sl, sl, #1
   13958:	strbhi	r2, [r3, r7]
   1395c:	add	r7, r7, #1
   13960:	b	137e8 <__assert_fail@plt+0x2890>
   13964:	ldr	r3, [sp, #152]	; 0x98
   13968:	mov	r4, #11
   1396c:	sub	r2, r3, #2
   13970:	mov	r3, #118	; 0x76
   13974:	clz	r2, r2
   13978:	lsr	r2, r2, #5
   1397c:	b	138cc <__assert_fail@plt+0x2974>
   13980:	mov	r4, #10
   13984:	mov	r3, #110	; 0x6e
   13988:	ldr	r2, [sp, #152]	; 0x98
   1398c:	ldr	r1, [sp, #28]
   13990:	sub	r2, r2, #2
   13994:	clz	r2, r2
   13998:	lsr	r2, r2, #5
   1399c:	ands	r1, r1, r2
   139a0:	beq	138cc <__assert_fail@plt+0x2974>
   139a4:	ldr	sl, [sp, #32]
   139a8:	mov	r8, fp
   139ac:	mov	r2, r1
   139b0:	mov	r3, #2
   139b4:	str	r3, [sp, #152]	; 0x98
   139b8:	ldr	r9, [sp, #44]	; 0x2c
   139bc:	ldr	r3, [sp, #152]	; 0x98
   139c0:	and	r9, r9, r2
   139c4:	tst	r9, #255	; 0xff
   139c8:	movne	r3, #4
   139cc:	str	r3, [sp, #152]	; 0x98
   139d0:	ldr	r3, [sp, #156]	; 0x9c
   139d4:	mov	ip, #0
   139d8:	bic	r3, r3, #2
   139dc:	str	r3, [sp, #4]
   139e0:	ldr	r3, [sp, #168]	; 0xa8
   139e4:	ldr	r2, [sp, #56]	; 0x38
   139e8:	str	r3, [sp, #16]
   139ec:	ldr	r3, [sp, #164]	; 0xa4
   139f0:	mov	r1, r8
   139f4:	str	r3, [sp, #12]
   139f8:	ldr	r3, [sp, #152]	; 0x98
   139fc:	mov	r0, sl
   13a00:	str	r3, [sp]
   13a04:	str	ip, [sp, #8]
   13a08:	ldr	r3, [sp, #24]
   13a0c:	bl	131f4 <__assert_fail@plt+0x229c>
   13a10:	mov	fp, r0
   13a14:	mov	r0, fp
   13a18:	add	sp, sp, #116	; 0x74
   13a1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a20:	ldr	r3, [sp, #152]	; 0x98
   13a24:	mov	r4, #8
   13a28:	sub	r2, r3, #2
   13a2c:	mov	r3, #98	; 0x62
   13a30:	clz	r2, r2
   13a34:	lsr	r2, r2, #5
   13a38:	b	138cc <__assert_fail@plt+0x2974>
   13a3c:	ldr	r3, [sp, #152]	; 0x98
   13a40:	mov	r4, #7
   13a44:	sub	r2, r3, #2
   13a48:	mov	r3, #97	; 0x61
   13a4c:	clz	r2, r2
   13a50:	lsr	r2, r2, #5
   13a54:	b	138cc <__assert_fail@plt+0x2974>
   13a58:	ldr	r3, [sp, #44]	; 0x2c
   13a5c:	cmp	r3, #0
   13a60:	beq	14244 <__assert_fail@plt+0x32ec>
   13a64:	ldr	r3, [sp, #28]
   13a68:	cmp	r3, #0
   13a6c:	bne	1451c <__assert_fail@plt+0x35c4>
   13a70:	ldr	r3, [sp, #152]	; 0x98
   13a74:	sub	r2, r3, #2
   13a78:	ldr	r3, [sp, #40]	; 0x28
   13a7c:	clz	r2, r2
   13a80:	eor	r3, r3, #1
   13a84:	lsr	r2, r2, #5
   13a88:	ands	r3, r2, r3
   13a8c:	moveq	r1, r7
   13a90:	beq	13ad4 <__assert_fail@plt+0x2b7c>
   13a94:	cmp	fp, r7
   13a98:	movhi	r0, #39	; 0x27
   13a9c:	ldrhi	r1, [sp, #32]
   13aa0:	str	r3, [sp, #40]	; 0x28
   13aa4:	strbhi	r0, [r1, r7]
   13aa8:	add	r1, r7, #1
   13aac:	cmp	fp, r1
   13ab0:	movhi	ip, #36	; 0x24
   13ab4:	ldrhi	r0, [sp, #32]
   13ab8:	strbhi	ip, [r0, r1]
   13abc:	add	r1, r7, #2
   13ac0:	cmp	fp, r1
   13ac4:	movhi	ip, #39	; 0x27
   13ac8:	ldrhi	r0, [sp, #32]
   13acc:	strbhi	ip, [r0, r1]
   13ad0:	add	r1, r7, #3
   13ad4:	cmp	fp, r1
   13ad8:	movhi	r0, #92	; 0x5c
   13adc:	ldrhi	r3, [sp, #32]
   13ae0:	add	r7, r1, #1
   13ae4:	strbhi	r0, [r3, r1]
   13ae8:	cmp	r8, #0
   13aec:	beq	14430 <__assert_fail@plt+0x34d8>
   13af0:	ldr	r0, [sp, #24]
   13af4:	add	r3, sl, #1
   13af8:	cmp	r3, r0
   13afc:	bcs	1436c <__assert_fail@plt+0x3414>
   13b00:	ldr	r0, [sp, #56]	; 0x38
   13b04:	ldrb	r3, [r0, r3]
   13b08:	sub	r3, r3, #48	; 0x30
   13b0c:	cmp	r3, #9
   13b10:	bhi	1436c <__assert_fail@plt+0x3414>
   13b14:	cmp	fp, r7
   13b18:	movhi	r3, #48	; 0x30
   13b1c:	ldrhi	r0, [sp, #32]
   13b20:	ldr	r5, [sp, #28]
   13b24:	mov	r4, #48	; 0x30
   13b28:	strbhi	r3, [r0, r7]
   13b2c:	add	r3, r1, #2
   13b30:	cmp	fp, r3
   13b34:	movhi	r0, #48	; 0x30
   13b38:	ldrhi	ip, [sp, #32]
   13b3c:	add	r7, r1, #3
   13b40:	strbhi	r0, [ip, r3]
   13b44:	b	13778 <__assert_fail@plt+0x2820>
   13b48:	mov	r5, #0
   13b4c:	ldr	r3, [sp, #152]	; 0x98
   13b50:	sub	r2, r3, #2
   13b54:	ldr	r3, [sp, #28]
   13b58:	clz	r2, r2
   13b5c:	lsr	r2, r2, #5
   13b60:	ands	r8, r3, r2
   13b64:	beq	13778 <__assert_fail@plt+0x2820>
   13b68:	mov	r3, r8
   13b6c:	mov	r2, r3
   13b70:	mov	r3, #2
   13b74:	ldr	sl, [sp, #32]
   13b78:	mov	r8, fp
   13b7c:	str	r3, [sp, #152]	; 0x98
   13b80:	b	139b8 <__assert_fail@plt+0x2a60>
   13b84:	ldr	r3, [sp, #152]	; 0x98
   13b88:	cmp	r3, #2
   13b8c:	beq	142b0 <__assert_fail@plt+0x3358>
   13b90:	cmp	r3, #5
   13b94:	beq	14270 <__assert_fail@plt+0x3318>
   13b98:	mov	r5, #0
   13b9c:	sub	r2, r3, #2
   13ba0:	mov	r8, r5
   13ba4:	clz	r2, r2
   13ba8:	mov	r4, #63	; 0x3f
   13bac:	lsr	r2, r2, #5
   13bb0:	b	13778 <__assert_fail@plt+0x2820>
   13bb4:	ldr	r3, [sp, #152]	; 0x98
   13bb8:	cmp	r3, #2
   13bbc:	beq	142d0 <__assert_fail@plt+0x3378>
   13bc0:	mov	r2, #0
   13bc4:	str	r5, [sp, #68]	; 0x44
   13bc8:	mov	r8, r2
   13bcc:	mov	r4, #39	; 0x27
   13bd0:	b	13778 <__assert_fail@plt+0x2820>
   13bd4:	mov	r4, #13
   13bd8:	mov	r3, #114	; 0x72
   13bdc:	b	13988 <__assert_fail@plt+0x2a30>
   13be0:	ldr	r3, [sp, #152]	; 0x98
   13be4:	mov	r8, #0
   13be8:	sub	r2, r3, #2
   13bec:	clz	r2, r2
   13bf0:	lsr	r2, r2, #5
   13bf4:	b	13778 <__assert_fail@plt+0x2820>
   13bf8:	ldr	r3, [sp, #152]	; 0x98
   13bfc:	mov	r4, #12
   13c00:	sub	r2, r3, #2
   13c04:	mov	r3, #102	; 0x66
   13c08:	clz	r2, r2
   13c0c:	lsr	r2, r2, #5
   13c10:	b	138cc <__assert_fail@plt+0x2974>
   13c14:	mov	r5, r6
   13c18:	b	13b4c <__assert_fail@plt+0x2bf4>
   13c1c:	ldr	r3, [sp, #152]	; 0x98
   13c20:	sub	r2, r3, #2
   13c24:	mov	r3, #116	; 0x74
   13c28:	clz	r2, r2
   13c2c:	lsr	r2, r2, #5
   13c30:	b	138cc <__assert_fail@plt+0x2974>
   13c34:	ldr	r8, [sp, #76]	; 0x4c
   13c38:	cmp	r8, #1
   13c3c:	bne	140ec <__assert_fail@plt+0x3194>
   13c40:	bl	10e50 <__ctype_b_loc@plt>
   13c44:	sxth	r3, r4
   13c48:	mov	ip, r8
   13c4c:	lsl	r3, r3, #1
   13c50:	ldr	r2, [r0]
   13c54:	ldrh	r3, [r2, r3]
   13c58:	and	r3, r3, #16384	; 0x4000
   13c5c:	cmp	r3, #0
   13c60:	movne	r5, #1
   13c64:	moveq	r5, #0
   13c68:	moveq	r3, #1
   13c6c:	movne	r3, #0
   13c70:	ldr	r2, [sp, #44]	; 0x2c
   13c74:	and	r3, r3, r2
   13c78:	ands	r8, r3, #255	; 0xff
   13c7c:	bne	13f80 <__assert_fail@plt+0x3028>
   13c80:	ldr	r3, [sp, #152]	; 0x98
   13c84:	sub	r2, r3, #2
   13c88:	clz	r2, r2
   13c8c:	lsr	r2, r2, #5
   13c90:	b	13778 <__assert_fail@plt+0x2820>
   13c94:	ldr	r3, [sp, #56]	; 0x38
   13c98:	add	r3, r3, sl
   13c9c:	str	r3, [sp, #48]	; 0x30
   13ca0:	ldr	r3, [sp, #48]	; 0x30
   13ca4:	mov	r6, #0
   13ca8:	ldrb	r4, [r3]
   13cac:	cmp	r4, #126	; 0x7e
   13cb0:	ldrls	pc, [pc, r4, lsl #2]
   13cb4:	b	13c34 <__assert_fail@plt+0x2cdc>
   13cb8:	andeq	r3, r1, r8, asr sl
   13cbc:	andeq	r3, r1, r4, lsr ip
   13cc0:	andeq	r3, r1, r4, lsr ip
   13cc4:	andeq	r3, r1, r4, lsr ip
   13cc8:	andeq	r3, r1, r4, lsr ip
   13ccc:	andeq	r3, r1, r4, lsr ip
   13cd0:	andeq	r3, r1, r4, lsr ip
   13cd4:	andeq	r3, r1, ip, lsr sl
   13cd8:	andeq	r3, r1, r0, lsr #20
   13cdc:			; <UNDEFINED> instruction: 0x00013eb4
   13ce0:	andeq	r3, r1, r0, lsl #19
   13ce4:	andeq	r3, r1, r4, ror #18
   13ce8:	strdeq	r3, [r1], -r8
   13cec:	ldrdeq	r3, [r1], -r4
   13cf0:	andeq	r3, r1, r4, lsr ip
   13cf4:	andeq	r3, r1, r4, lsr ip
   13cf8:	andeq	r3, r1, r4, lsr ip
   13cfc:	andeq	r3, r1, r4, lsr ip
   13d00:	andeq	r3, r1, r4, lsr ip
   13d04:	andeq	r3, r1, r4, lsr ip
   13d08:	andeq	r3, r1, r4, lsr ip
   13d0c:	andeq	r3, r1, r4, lsr ip
   13d10:	andeq	r3, r1, r4, lsr ip
   13d14:	andeq	r3, r1, r4, lsr ip
   13d18:	andeq	r3, r1, r4, lsr ip
   13d1c:	andeq	r3, r1, r4, lsr ip
   13d20:	andeq	r3, r1, r4, lsr ip
   13d24:	andeq	r3, r1, r4, lsr ip
   13d28:	andeq	r3, r1, r4, lsr ip
   13d2c:	andeq	r3, r1, r4, lsr ip
   13d30:	andeq	r3, r1, r4, lsr ip
   13d34:	andeq	r3, r1, r4, lsr ip
   13d38:	andeq	r3, r1, ip, asr #22
   13d3c:	andeq	r3, r1, r8, asr #22
   13d40:	andeq	r3, r1, r8, asr #22
   13d44:	andeq	r3, r1, r8, asr r7
   13d48:	andeq	r3, r1, r8, asr #22
   13d4c:	andeq	r3, r1, r0, ror #23
   13d50:	andeq	r3, r1, r8, asr #22
   13d54:			; <UNDEFINED> instruction: 0x00013bb4
   13d58:	andeq	r3, r1, r8, asr #22
   13d5c:	andeq	r3, r1, r8, asr #22
   13d60:	andeq	r3, r1, r8, asr #22
   13d64:	andeq	r3, r1, r0, ror #23
   13d68:	andeq	r3, r1, r0, ror #23
   13d6c:	andeq	r3, r1, r0, ror #23
   13d70:	andeq	r3, r1, r0, ror #23
   13d74:	andeq	r3, r1, r0, ror #23
   13d78:	andeq	r3, r1, r0, ror #23
   13d7c:	andeq	r3, r1, r0, ror #23
   13d80:	andeq	r3, r1, r0, ror #23
   13d84:	andeq	r3, r1, r0, ror #23
   13d88:	andeq	r3, r1, r0, ror #23
   13d8c:	andeq	r3, r1, r0, ror #23
   13d90:	andeq	r3, r1, r0, ror #23
   13d94:	andeq	r3, r1, r0, ror #23
   13d98:	andeq	r3, r1, r0, ror #23
   13d9c:	andeq	r3, r1, r0, ror #23
   13da0:	andeq	r3, r1, r0, ror #23
   13da4:	andeq	r3, r1, r8, asr #22
   13da8:	andeq	r3, r1, r8, asr #22
   13dac:	andeq	r3, r1, r8, asr #22
   13db0:	andeq	r3, r1, r8, asr #22
   13db4:	andeq	r3, r1, r4, lsl #23
   13db8:	andeq	r3, r1, r4, lsr ip
   13dbc:	andeq	r3, r1, r0, ror #23
   13dc0:	andeq	r3, r1, r0, ror #23
   13dc4:	andeq	r3, r1, r0, ror #23
   13dc8:	andeq	r3, r1, r0, ror #23
   13dcc:	andeq	r3, r1, r0, ror #23
   13dd0:	andeq	r3, r1, r0, ror #23
   13dd4:	andeq	r3, r1, r0, ror #23
   13dd8:	andeq	r3, r1, r0, ror #23
   13ddc:	andeq	r3, r1, r0, ror #23
   13de0:	andeq	r3, r1, r0, ror #23
   13de4:	andeq	r3, r1, r0, ror #23
   13de8:	andeq	r3, r1, r0, ror #23
   13dec:	andeq	r3, r1, r0, ror #23
   13df0:	andeq	r3, r1, r0, ror #23
   13df4:	andeq	r3, r1, r0, ror #23
   13df8:	andeq	r3, r1, r0, ror #23
   13dfc:	andeq	r3, r1, r0, ror #23
   13e00:	andeq	r3, r1, r0, ror #23
   13e04:	andeq	r3, r1, r0, ror #23
   13e08:	andeq	r3, r1, r0, ror #23
   13e0c:	andeq	r3, r1, r0, ror #23
   13e10:	andeq	r3, r1, r0, ror #23
   13e14:	andeq	r3, r1, r0, ror #23
   13e18:	andeq	r3, r1, r0, ror #23
   13e1c:	andeq	r3, r1, r0, ror #23
   13e20:	andeq	r3, r1, r0, ror #23
   13e24:	andeq	r3, r1, r8, asr #22
   13e28:	andeq	r3, r1, r4, lsr #17
   13e2c:	andeq	r3, r1, r0, ror #23
   13e30:	andeq	r3, r1, r8, asr #22
   13e34:	andeq	r3, r1, r0, ror #23
   13e38:	andeq	r3, r1, r8, asr #22
   13e3c:	andeq	r3, r1, r0, ror #23
   13e40:	andeq	r3, r1, r0, ror #23
   13e44:	andeq	r3, r1, r0, ror #23
   13e48:	andeq	r3, r1, r0, ror #23
   13e4c:	andeq	r3, r1, r0, ror #23
   13e50:	andeq	r3, r1, r0, ror #23
   13e54:	andeq	r3, r1, r0, ror #23
   13e58:	andeq	r3, r1, r0, ror #23
   13e5c:	andeq	r3, r1, r0, ror #23
   13e60:	andeq	r3, r1, r0, ror #23
   13e64:	andeq	r3, r1, r0, ror #23
   13e68:	andeq	r3, r1, r0, ror #23
   13e6c:	andeq	r3, r1, r0, ror #23
   13e70:	andeq	r3, r1, r0, ror #23
   13e74:	andeq	r3, r1, r0, ror #23
   13e78:	andeq	r3, r1, r0, ror #23
   13e7c:	andeq	r3, r1, r0, ror #23
   13e80:	andeq	r3, r1, r0, ror #23
   13e84:	andeq	r3, r1, r0, ror #23
   13e88:	andeq	r3, r1, r0, ror #23
   13e8c:	andeq	r3, r1, r0, ror #23
   13e90:	andeq	r3, r1, r0, ror #23
   13e94:	andeq	r3, r1, r0, ror #23
   13e98:	andeq	r3, r1, r0, ror #23
   13e9c:	andeq	r3, r1, r0, ror #23
   13ea0:	andeq	r3, r1, r0, ror #23
   13ea4:	andeq	r3, r1, r8, lsr r7
   13ea8:	andeq	r3, r1, r8, asr #22
   13eac:	andeq	r3, r1, r8, lsr r7
   13eb0:	andeq	r3, r1, r8, asr r7
   13eb4:	mov	r3, #116	; 0x74
   13eb8:	b	13988 <__assert_fail@plt+0x2a30>
   13ebc:	ldr	r3, [sp, #160]	; 0xa0
   13ec0:	cmp	r3, #0
   13ec4:	beq	13794 <__assert_fail@plt+0x283c>
   13ec8:	lsr	r3, r4, #5
   13ecc:	ldr	r0, [sp, #160]	; 0xa0
   13ed0:	uxtb	r3, r3
   13ed4:	and	r1, r4, #31
   13ed8:	ldr	r0, [r0, r3, lsl #2]
   13edc:	lsr	r3, r0, r1
   13ee0:	tst	r3, #1
   13ee4:	beq	13794 <__assert_fail@plt+0x283c>
   13ee8:	ldr	r3, [sp, #28]
   13eec:	cmp	r3, #0
   13ef0:	beq	138f4 <__assert_fail@plt+0x299c>
   13ef4:	ldr	sl, [sp, #32]
   13ef8:	mov	r8, fp
   13efc:	b	139b8 <__assert_fail@plt+0x2a60>
   13f00:	ldr	r3, [sp, #28]
   13f04:	cmp	r3, #0
   13f08:	bne	1445c <__assert_fail@plt+0x3504>
   13f0c:	add	sl, sl, #1
   13f10:	ldr	r6, [sp, #40]	; 0x28
   13f14:	mov	r5, #0
   13f18:	mov	r4, #92	; 0x5c
   13f1c:	b	137b0 <__assert_fail@plt+0x2858>
   13f20:	cmp	r9, r8
   13f24:	bne	14194 <__assert_fail@plt+0x323c>
   13f28:	ldr	r0, [sp, #100]	; 0x64
   13f2c:	bl	10da8 <iswprint@plt>
   13f30:	add	r5, r5, r4
   13f34:	cmp	r0, #0
   13f38:	add	r0, sp, #104	; 0x68
   13f3c:	moveq	r6, #0
   13f40:	bl	10d48 <mbsinit@plt>
   13f44:	cmp	r0, #0
   13f48:	beq	14128 <__assert_fail@plt+0x31d0>
   13f4c:	mov	r2, r6
   13f50:	mov	ip, r5
   13f54:	eor	r5, r2, #1
   13f58:	ldr	r4, [sp, #80]	; 0x50
   13f5c:	ldr	r6, [sp, #84]	; 0x54
   13f60:	ldr	r7, [sp, #88]	; 0x58
   13f64:	uxtb	r5, r5
   13f68:	cmp	ip, #1
   13f6c:	bls	1446c <__assert_fail@plt+0x3514>
   13f70:	ldr	r3, [sp, #44]	; 0x2c
   13f74:	and	r8, r3, r5
   13f78:	mov	r5, r2
   13f7c:	uxtb	r8, r8
   13f80:	add	r2, sl, ip
   13f84:	ldr	r0, [sp, #48]	; 0x30
   13f88:	mov	r1, #0
   13f8c:	str	r5, [sp, #48]	; 0x30
   13f90:	ldr	r9, [sp, #28]
   13f94:	ldr	ip, [sp, #40]	; 0x28
   13f98:	ldr	r3, [sp, #32]
   13f9c:	ldr	r5, [sp, #152]	; 0x98
   13fa0:	b	1405c <__assert_fail@plt+0x3104>
   13fa4:	cmp	r9, #0
   13fa8:	bne	14380 <__assert_fail@plt+0x3428>
   13fac:	eor	r1, ip, #1
   13fb0:	cmp	r5, #2
   13fb4:	movne	r1, #0
   13fb8:	andeq	r1, r1, #1
   13fbc:	cmp	r1, #0
   13fc0:	beq	13ff8 <__assert_fail@plt+0x30a0>
   13fc4:	cmp	fp, r7
   13fc8:	movhi	ip, #39	; 0x27
   13fcc:	strbhi	ip, [r3, r7]
   13fd0:	add	ip, r7, #1
   13fd4:	cmp	fp, ip
   13fd8:	movhi	lr, #36	; 0x24
   13fdc:	strbhi	lr, [r3, ip]
   13fe0:	add	ip, r7, #2
   13fe4:	cmp	fp, ip
   13fe8:	movhi	lr, #39	; 0x27
   13fec:	strbhi	lr, [r3, ip]
   13ff0:	add	r7, r7, #3
   13ff4:	mov	ip, r1
   13ff8:	cmp	fp, r7
   13ffc:	movhi	r1, #92	; 0x5c
   14000:	strbhi	r1, [r3, r7]
   14004:	add	r1, r7, #1
   14008:	cmp	fp, r1
   1400c:	lsrhi	lr, r4, #6
   14010:	addhi	lr, lr, #48	; 0x30
   14014:	strbhi	lr, [r3, r1]
   14018:	add	lr, r7, #2
   1401c:	cmp	fp, lr
   14020:	lsrhi	r1, r4, #3
   14024:	andhi	r1, r1, #7
   14028:	addhi	r1, r1, #48	; 0x30
   1402c:	add	sl, sl, #1
   14030:	strbhi	r1, [r3, lr]
   14034:	and	r4, r4, #7
   14038:	cmp	r2, sl
   1403c:	add	r4, r4, #48	; 0x30
   14040:	add	r7, r7, #3
   14044:	bls	143a4 <__assert_fail@plt+0x344c>
   14048:	mov	r1, r8
   1404c:	cmp	fp, r7
   14050:	strbhi	r4, [r3, r7]
   14054:	ldrb	r4, [r0, #1]!
   14058:	add	r7, r7, #1
   1405c:	cmp	r8, #0
   14060:	bne	13fa4 <__assert_fail@plt+0x304c>
   14064:	cmp	r6, #0
   14068:	bne	140b8 <__assert_fail@plt+0x3160>
   1406c:	eor	r6, r1, #1
   14070:	and	r6, r6, ip
   14074:	add	sl, sl, #1
   14078:	cmp	r2, sl
   1407c:	uxtb	r6, r6
   14080:	bls	140e0 <__assert_fail@plt+0x3188>
   14084:	cmp	r6, #0
   14088:	beq	1404c <__assert_fail@plt+0x30f4>
   1408c:	cmp	fp, r7
   14090:	movhi	ip, #39	; 0x27
   14094:	strbhi	ip, [r3, r7]
   14098:	add	ip, r7, #1
   1409c:	cmp	fp, ip
   140a0:	movhi	lr, #39	; 0x27
   140a4:	strbhi	lr, [r3, ip]
   140a8:	add	r7, r7, #2
   140ac:	mov	r6, r8
   140b0:	mov	ip, r8
   140b4:	b	1404c <__assert_fail@plt+0x30f4>
   140b8:	cmp	fp, r7
   140bc:	eor	r6, r1, #1
   140c0:	movhi	lr, #92	; 0x5c
   140c4:	and	r6, r6, ip
   140c8:	add	sl, sl, #1
   140cc:	strbhi	lr, [r3, r7]
   140d0:	cmp	r2, sl
   140d4:	add	r7, r7, #1
   140d8:	uxtb	r6, r6
   140dc:	bhi	14084 <__assert_fail@plt+0x312c>
   140e0:	str	ip, [sp, #40]	; 0x28
   140e4:	ldr	r5, [sp, #48]	; 0x30
   140e8:	b	137b0 <__assert_fail@plt+0x2858>
   140ec:	ldr	r3, [sp, #24]
   140f0:	cmn	r3, #1
   140f4:	mov	r3, #0
   140f8:	str	r3, [sp, #104]	; 0x68
   140fc:	str	r3, [sp, #108]	; 0x6c
   14100:	beq	14420 <__assert_fail@plt+0x34c8>
   14104:	mov	r2, r5
   14108:	mov	r3, #0
   1410c:	str	r7, [sp, #88]	; 0x58
   14110:	ldr	r7, [sp, #152]	; 0x98
   14114:	str	r5, [sp, #92]	; 0x5c
   14118:	str	r6, [sp, #84]	; 0x54
   1411c:	mov	r5, r3
   14120:	mov	r6, r2
   14124:	str	r4, [sp, #80]	; 0x50
   14128:	ldr	r3, [sp, #56]	; 0x38
   1412c:	add	r9, sl, r5
   14130:	add	r8, r3, r9
   14134:	ldr	r3, [sp, #24]
   14138:	mov	r1, r8
   1413c:	sub	r2, r3, r9
   14140:	add	r0, sp, #100	; 0x64
   14144:	add	r3, sp, #104	; 0x68
   14148:	bl	16484 <__assert_fail@plt+0x552c>
   1414c:	subs	r4, r0, #0
   14150:	beq	144f8 <__assert_fail@plt+0x35a0>
   14154:	cmn	r4, #1
   14158:	beq	144d8 <__assert_fail@plt+0x3580>
   1415c:	cmn	r4, #2
   14160:	beq	14478 <__assert_fail@plt+0x3520>
   14164:	ldr	r2, [sp, #28]
   14168:	cmp	r7, #2
   1416c:	movne	r2, #0
   14170:	andeq	r2, r2, #1
   14174:	cmp	r2, #0
   14178:	beq	13f28 <__assert_fail@plt+0x2fd0>
   1417c:	cmp	r4, #1
   14180:	beq	13f28 <__assert_fail@plt+0x2fd0>
   14184:	sub	r3, r4, #1
   14188:	add	r9, r3, r9
   1418c:	ldr	r3, [sp, #56]	; 0x38
   14190:	add	r9, r3, r9
   14194:	ldrb	r3, [r8, #1]!
   14198:	sub	r3, r3, #91	; 0x5b
   1419c:	cmp	r3, #33	; 0x21
   141a0:	ldrls	pc, [pc, r3, lsl #2]
   141a4:	b	13f20 <__assert_fail@plt+0x2fc8>
   141a8:	andeq	r4, r1, r0, lsr r2
   141ac:	andeq	r4, r1, r0, lsr r2
   141b0:	andeq	r3, r1, r0, lsr #30
   141b4:	andeq	r4, r1, r0, lsr r2
   141b8:	andeq	r3, r1, r0, lsr #30
   141bc:	andeq	r4, r1, r0, lsr r2
   141c0:	andeq	r3, r1, r0, lsr #30
   141c4:	andeq	r3, r1, r0, lsr #30
   141c8:	andeq	r3, r1, r0, lsr #30
   141cc:	andeq	r3, r1, r0, lsr #30
   141d0:	andeq	r3, r1, r0, lsr #30
   141d4:	andeq	r3, r1, r0, lsr #30
   141d8:	andeq	r3, r1, r0, lsr #30
   141dc:	andeq	r3, r1, r0, lsr #30
   141e0:	andeq	r3, r1, r0, lsr #30
   141e4:	andeq	r3, r1, r0, lsr #30
   141e8:	andeq	r3, r1, r0, lsr #30
   141ec:	andeq	r3, r1, r0, lsr #30
   141f0:	andeq	r3, r1, r0, lsr #30
   141f4:	andeq	r3, r1, r0, lsr #30
   141f8:	andeq	r3, r1, r0, lsr #30
   141fc:	andeq	r3, r1, r0, lsr #30
   14200:	andeq	r3, r1, r0, lsr #30
   14204:	andeq	r3, r1, r0, lsr #30
   14208:	andeq	r3, r1, r0, lsr #30
   1420c:	andeq	r3, r1, r0, lsr #30
   14210:	andeq	r3, r1, r0, lsr #30
   14214:	andeq	r3, r1, r0, lsr #30
   14218:	andeq	r3, r1, r0, lsr #30
   1421c:	andeq	r3, r1, r0, lsr #30
   14220:	andeq	r3, r1, r0, lsr #30
   14224:	andeq	r3, r1, r0, lsr #30
   14228:	andeq	r3, r1, r0, lsr #30
   1422c:	andeq	r4, r1, r0, lsr r2
   14230:	mov	r3, #2
   14234:	ldr	sl, [sp, #32]
   14238:	mov	r8, fp
   1423c:	str	r3, [sp, #152]	; 0x98
   14240:	b	139b8 <__assert_fail@plt+0x2a60>
   14244:	ldr	r3, [sp, #156]	; 0x9c
   14248:	tst	r3, #1
   1424c:	bne	14378 <__assert_fail@plt+0x3420>
   14250:	ldr	r3, [sp, #152]	; 0x98
   14254:	ldr	r4, [sp, #44]	; 0x2c
   14258:	sub	r2, r3, #2
   1425c:	mov	r5, #0
   14260:	clz	r2, r2
   14264:	mov	r8, r4
   14268:	lsr	r2, r2, #5
   1426c:	b	13778 <__assert_fail@plt+0x2820>
   14270:	ldr	r3, [sp, #156]	; 0x9c
   14274:	ands	r9, r3, #4
   14278:	beq	143b0 <__assert_fail@plt+0x3458>
   1427c:	ldr	r2, [sp, #24]
   14280:	add	r3, sl, #2
   14284:	cmp	r3, r2
   14288:	bcs	1429c <__assert_fail@plt+0x3344>
   1428c:	ldr	r2, [sp, #48]	; 0x30
   14290:	ldrb	r4, [r2, #1]
   14294:	cmp	r4, #63	; 0x3f
   14298:	beq	14538 <__assert_fail@plt+0x35e0>
   1429c:	mov	r2, #0
   142a0:	mov	r8, r2
   142a4:	mov	r5, r2
   142a8:	mov	r4, #63	; 0x3f
   142ac:	b	13778 <__assert_fail@plt+0x2820>
   142b0:	ldr	r3, [sp, #28]
   142b4:	cmp	r3, #0
   142b8:	bne	145dc <__assert_fail@plt+0x3684>
   142bc:	mov	r2, r5
   142c0:	mov	r8, r3
   142c4:	mov	r5, #0
   142c8:	mov	r4, #63	; 0x3f
   142cc:	b	13778 <__assert_fail@plt+0x2820>
   142d0:	ldr	r3, [sp, #28]
   142d4:	cmp	r3, #0
   142d8:	bne	145dc <__assert_fail@plt+0x3684>
   142dc:	ldr	r2, [sp, #72]	; 0x48
   142e0:	adds	r3, fp, #0
   142e4:	movne	r3, #1
   142e8:	cmp	r2, #0
   142ec:	movne	r3, #0
   142f0:	cmp	r3, #0
   142f4:	strne	fp, [sp, #72]	; 0x48
   142f8:	movne	fp, #0
   142fc:	bne	14338 <__assert_fail@plt+0x33e0>
   14300:	cmp	fp, r7
   14304:	movhi	r2, #39	; 0x27
   14308:	ldrhi	r3, [sp, #32]
   1430c:	strbhi	r2, [r3, r7]
   14310:	add	r3, r7, #1
   14314:	cmp	fp, r3
   14318:	movhi	r1, #92	; 0x5c
   1431c:	ldrhi	r2, [sp, #32]
   14320:	strbhi	r1, [r2, r3]
   14324:	add	r3, r7, #2
   14328:	cmp	fp, r3
   1432c:	movhi	r1, #39	; 0x27
   14330:	ldrhi	r2, [sp, #32]
   14334:	strbhi	r1, [r2, r3]
   14338:	ldr	r3, [sp, #28]
   1433c:	add	r7, r7, #3
   14340:	mov	r2, r5
   14344:	mov	r8, r3
   14348:	str	r5, [sp, #68]	; 0x44
   1434c:	str	r3, [sp, #40]	; 0x28
   14350:	mov	r4, #39	; 0x27
   14354:	b	13778 <__assert_fail@plt+0x2820>
   14358:	ldr	r3, [sp, #56]	; 0x38
   1435c:	ldrb	r3, [r3, #1]
   14360:	adds	r3, r3, #0
   14364:	movne	r3, #1
   14368:	b	13750 <__assert_fail@plt+0x27f8>
   1436c:	ldr	r5, [sp, #28]
   14370:	mov	r4, #48	; 0x30
   14374:	b	13778 <__assert_fail@plt+0x2820>
   14378:	add	sl, sl, #1
   1437c:	b	132a8 <__assert_fail@plt+0x2350>
   14380:	mov	sl, r3
   14384:	ldr	r3, [sp, #28]
   14388:	mov	r8, fp
   1438c:	str	r3, [sp, #44]	; 0x2c
   14390:	ldr	r3, [sp, #152]	; 0x98
   14394:	sub	r2, r3, #2
   14398:	clz	r2, r2
   1439c:	lsr	r2, r2, #5
   143a0:	b	139b8 <__assert_fail@plt+0x2a60>
   143a4:	str	ip, [sp, #40]	; 0x28
   143a8:	ldr	r5, [sp, #48]	; 0x30
   143ac:	b	137e8 <__assert_fail@plt+0x2890>
   143b0:	mov	r2, r9
   143b4:	mov	r8, r9
   143b8:	mov	r5, #0
   143bc:	mov	r4, #63	; 0x3f
   143c0:	b	13778 <__assert_fail@plt+0x2820>
   143c4:	cmp	fp, #0
   143c8:	beq	14440 <__assert_fail@plt+0x34e8>
   143cc:	ldr	r1, [sp, #32]
   143d0:	mov	r3, #34	; 0x22
   143d4:	mov	r2, #1
   143d8:	strb	r3, [r1]
   143dc:	ldr	r3, [pc, #332]	; 14530 <__assert_fail@plt+0x35d8>
   143e0:	str	r2, [sp, #52]	; 0x34
   143e4:	mov	r7, r2
   143e8:	str	r2, [sp, #44]	; 0x2c
   143ec:	str	r3, [sp, #64]	; 0x40
   143f0:	b	13298 <__assert_fail@plt+0x2340>
   143f4:	ldr	r3, [pc, #300]	; 14528 <__assert_fail@plt+0x35d0>
   143f8:	str	r3, [sp, #64]	; 0x40
   143fc:	mov	r3, #0
   14400:	str	r3, [sp, #28]
   14404:	mov	r3, #1
   14408:	str	r3, [sp, #52]	; 0x34
   1440c:	mov	r7, r3
   14410:	mov	r3, #2
   14414:	str	r3, [sp, #152]	; 0x98
   14418:	b	13298 <__assert_fail@plt+0x2340>
   1441c:	bl	10f40 <abort@plt>
   14420:	ldr	r0, [sp, #56]	; 0x38
   14424:	bl	10e68 <strlen@plt>
   14428:	str	r0, [sp, #24]
   1442c:	b	14104 <__assert_fail@plt+0x31ac>
   14430:	mov	r5, r8
   14434:	mov	r4, #48	; 0x30
   14438:	ldr	r8, [sp, #44]	; 0x2c
   1443c:	b	13778 <__assert_fail@plt+0x2820>
   14440:	mov	r3, #1
   14444:	str	r3, [sp, #52]	; 0x34
   14448:	mov	r7, r3
   1444c:	str	r3, [sp, #44]	; 0x2c
   14450:	ldr	r3, [pc, #216]	; 14530 <__assert_fail@plt+0x35d8>
   14454:	str	r3, [sp, #64]	; 0x40
   14458:	b	13298 <__assert_fail@plt+0x2340>
   1445c:	ldr	sl, [sp, #32]
   14460:	mov	r8, fp
   14464:	mov	r2, r3
   14468:	b	139b8 <__assert_fail@plt+0x2a60>
   1446c:	mov	r3, r5
   14470:	mov	r5, r2
   14474:	b	13c70 <__assert_fail@plt+0x2d18>
   14478:	ldr	r1, [sp, #24]
   1447c:	mov	r2, r5
   14480:	cmp	r1, r9
   14484:	mov	ip, r5
   14488:	ldr	r4, [sp, #80]	; 0x50
   1448c:	ldr	r5, [sp, #92]	; 0x5c
   14490:	ldr	r6, [sp, #84]	; 0x54
   14494:	ldr	r7, [sp, #88]	; 0x58
   14498:	bls	144cc <__assert_fail@plt+0x3574>
   1449c:	ldrb	r3, [r8]
   144a0:	cmp	r3, #0
   144a4:	bne	144b8 <__assert_fail@plt+0x3560>
   144a8:	b	144d0 <__assert_fail@plt+0x3578>
   144ac:	ldrb	r3, [r8, #1]!
   144b0:	cmp	r3, #0
   144b4:	beq	145d0 <__assert_fail@plt+0x3678>
   144b8:	add	r2, r2, #1
   144bc:	add	r3, sl, r2
   144c0:	cmp	r1, r3
   144c4:	bhi	144ac <__assert_fail@plt+0x3554>
   144c8:	mov	ip, r2
   144cc:	mov	r3, #0
   144d0:	mov	r2, r3
   144d4:	b	13f68 <__assert_fail@plt+0x3010>
   144d8:	mov	r3, #0
   144dc:	mov	ip, r5
   144e0:	ldr	r4, [sp, #80]	; 0x50
   144e4:	ldr	r5, [sp, #92]	; 0x5c
   144e8:	ldr	r6, [sp, #84]	; 0x54
   144ec:	ldr	r7, [sp, #88]	; 0x58
   144f0:	mov	r2, r3
   144f4:	b	13f68 <__assert_fail@plt+0x3010>
   144f8:	mov	r3, r6
   144fc:	mov	ip, r5
   14500:	eor	r5, r3, #1
   14504:	mov	r2, r6
   14508:	ldr	r4, [sp, #80]	; 0x50
   1450c:	ldr	r6, [sp, #84]	; 0x54
   14510:	ldr	r7, [sp, #88]	; 0x58
   14514:	uxtb	r5, r5
   14518:	b	13f68 <__assert_fail@plt+0x3010>
   1451c:	ldr	sl, [sp, #32]
   14520:	mov	r8, fp
   14524:	b	1438c <__assert_fail@plt+0x3434>
   14528:	andeq	r7, r1, ip, asr r7
   1452c:	andeq	r7, r1, r0, ror #14
   14530:	andeq	r7, r1, r8, asr r7
   14534:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   14538:	ldr	r2, [sp, #56]	; 0x38
   1453c:	ldrb	r1, [r2, r3]
   14540:	sub	r2, r1, #33	; 0x21
   14544:	uxtb	r2, r2
   14548:	cmp	r2, #29
   1454c:	bhi	145ec <__assert_fail@plt+0x3694>
   14550:	ldr	r0, [pc, #-36]	; 14534 <__assert_fail@plt+0x35dc>
   14554:	mov	ip, #1
   14558:	ands	r2, r0, ip, lsl r2
   1455c:	beq	145fc <__assert_fail@plt+0x36a4>
   14560:	ldr	r2, [sp, #28]
   14564:	cmp	r2, #0
   14568:	bne	146fc <__assert_fail@plt+0x37a4>
   1456c:	cmp	fp, r7
   14570:	ldr	r8, [sp, #28]
   14574:	ldrhi	r2, [sp, #32]
   14578:	mov	sl, r3
   1457c:	mov	r5, r8
   14580:	strbhi	r4, [r2, r7]
   14584:	add	r2, r7, #1
   14588:	cmp	fp, r2
   1458c:	movhi	r0, #34	; 0x22
   14590:	ldrhi	ip, [sp, #32]
   14594:	mov	r4, r1
   14598:	strbhi	r0, [ip, r2]
   1459c:	add	r2, r7, #2
   145a0:	cmp	fp, r2
   145a4:	movhi	r0, #34	; 0x22
   145a8:	ldrhi	ip, [sp, #32]
   145ac:	strbhi	r0, [ip, r2]
   145b0:	add	r2, r7, #3
   145b4:	cmp	fp, r2
   145b8:	movhi	r0, #63	; 0x3f
   145bc:	ldrhi	ip, [sp, #32]
   145c0:	add	r7, r7, #4
   145c4:	strbhi	r0, [ip, r2]
   145c8:	mov	r2, r8
   145cc:	b	13778 <__assert_fail@plt+0x2820>
   145d0:	mov	ip, r2
   145d4:	mov	r2, r3
   145d8:	b	13f68 <__assert_fail@plt+0x3010>
   145dc:	ldr	sl, [sp, #32]
   145e0:	mov	r8, fp
   145e4:	ldr	r2, [sp, #28]
   145e8:	b	139b8 <__assert_fail@plt+0x2a60>
   145ec:	mov	r2, #0
   145f0:	mov	r8, r2
   145f4:	mov	r5, r2
   145f8:	b	13778 <__assert_fail@plt+0x2820>
   145fc:	mov	r8, r2
   14600:	mov	r5, #0
   14604:	b	13778 <__assert_fail@plt+0x2820>
   14608:	ldr	r1, [sp, #152]	; 0x98
   1460c:	bl	130d4 <__assert_fail@plt+0x217c>
   14610:	str	r0, [sp, #168]	; 0xa8
   14614:	b	13634 <__assert_fail@plt+0x26dc>
   14618:	ldr	r1, [sp, #152]	; 0x98
   1461c:	bl	130d4 <__assert_fail@plt+0x217c>
   14620:	str	r0, [sp, #164]	; 0xa4
   14624:	b	13614 <__assert_fail@plt+0x26bc>
   14628:	ldr	r7, [sp, #28]
   1462c:	b	13674 <__assert_fail@plt+0x271c>
   14630:	ldr	sl, [sp, #32]
   14634:	ldr	r2, [sp, #68]	; 0x44
   14638:	mov	r8, fp
   1463c:	mov	fp, r7
   14640:	ldr	r3, [sp, #64]	; 0x40
   14644:	cmp	r3, #0
   14648:	moveq	r2, #0
   1464c:	andne	r2, r2, #1
   14650:	cmp	r2, #0
   14654:	beq	14680 <__assert_fail@plt+0x3728>
   14658:	mov	r2, r3
   1465c:	ldrb	r3, [r3]
   14660:	cmp	r3, #0
   14664:	beq	14680 <__assert_fail@plt+0x3728>
   14668:	cmp	r8, fp
   1466c:	strbhi	r3, [sl, fp]
   14670:	ldrb	r3, [r2, #1]!
   14674:	add	fp, fp, #1
   14678:	cmp	r3, #0
   1467c:	bne	14668 <__assert_fail@plt+0x3710>
   14680:	cmp	r8, fp
   14684:	movhi	r3, #0
   14688:	strbhi	r3, [sl, fp]
   1468c:	b	13a14 <__assert_fail@plt+0x2abc>
   14690:	ldr	r3, [sp, #168]	; 0xa8
   14694:	ldr	sl, [sp, #32]
   14698:	str	r3, [sp, #16]
   1469c:	ldr	r3, [sp, #164]	; 0xa4
   146a0:	mov	ip, #5
   146a4:	str	r3, [sp, #12]
   146a8:	ldr	r3, [sp, #160]	; 0xa0
   146ac:	ldr	r2, [sp, #56]	; 0x38
   146b0:	str	r3, [sp, #8]
   146b4:	ldr	r3, [sp, #156]	; 0x9c
   146b8:	ldr	r1, [sp, #72]	; 0x48
   146bc:	str	r3, [sp, #4]
   146c0:	mov	r0, sl
   146c4:	ldr	r3, [sp, #24]
   146c8:	str	ip, [sp]
   146cc:	bl	131f4 <__assert_fail@plt+0x229c>
   146d0:	mov	fp, r0
   146d4:	b	13a14 <__assert_fail@plt+0x2abc>
   146d8:	mov	r8, fp
   146dc:	ldr	sl, [sp, #32]
   146e0:	mov	fp, r7
   146e4:	mov	r2, r3
   146e8:	b	14640 <__assert_fail@plt+0x36e8>
   146ec:	mov	r8, fp
   146f0:	ldr	sl, [sp, #32]
   146f4:	mov	fp, r7
   146f8:	b	14640 <__assert_fail@plt+0x36e8>
   146fc:	ldr	sl, [sp, #32]
   14700:	mov	r8, fp
   14704:	b	139d0 <__assert_fail@plt+0x2a78>
   14708:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1470c:	sub	sp, sp, #52	; 0x34
   14710:	mov	r4, r0
   14714:	mov	r5, r3
   14718:	mov	sl, r1
   1471c:	mov	fp, r2
   14720:	bl	10e8c <__errno_location@plt>
   14724:	ldr	r7, [pc, #412]	; 148c8 <__assert_fail@plt+0x3970>
   14728:	cmn	r4, #-2147483647	; 0x80000001
   1472c:	ldr	r6, [r7]
   14730:	mov	r8, r0
   14734:	movne	r0, #0
   14738:	moveq	r0, #1
   1473c:	ldr	r3, [r8]
   14740:	orrs	r0, r0, r4, lsr #31
   14744:	str	r3, [sp, #24]
   14748:	bne	148c4 <__assert_fail@plt+0x396c>
   1474c:	ldr	r2, [r7, #4]
   14750:	cmp	r4, r2
   14754:	blt	147b4 <__assert_fail@plt+0x385c>
   14758:	add	r9, r7, #8
   1475c:	cmp	r6, r9
   14760:	str	r2, [sp, #44]	; 0x2c
   14764:	beq	14894 <__assert_fail@plt+0x393c>
   14768:	mov	r3, #8
   1476c:	sub	r2, r4, r2
   14770:	mov	r0, r6
   14774:	str	r3, [sp]
   14778:	add	r2, r2, #1
   1477c:	mvn	r3, #-2147483648	; 0x80000000
   14780:	add	r1, sp, #44	; 0x2c
   14784:	bl	155dc <__assert_fail@plt+0x4684>
   14788:	mov	r6, r0
   1478c:	str	r0, [r7]
   14790:	ldr	r0, [r7, #4]
   14794:	ldr	r2, [sp, #44]	; 0x2c
   14798:	mov	r1, #0
   1479c:	sub	r2, r2, r0
   147a0:	add	r0, r6, r0, lsl #3
   147a4:	lsl	r2, r2, #3
   147a8:	bl	10ea4 <memset@plt>
   147ac:	ldr	r3, [sp, #44]	; 0x2c
   147b0:	str	r3, [r7, #4]
   147b4:	add	r3, r6, r4, lsl #3
   147b8:	ldr	r1, [r5, #4]
   147bc:	ldr	r7, [r3, #4]
   147c0:	ldr	r9, [r6, r4, lsl #3]
   147c4:	ldr	r2, [r5, #40]	; 0x28
   147c8:	ldr	ip, [r5, #44]	; 0x2c
   147cc:	add	r0, r5, #8
   147d0:	str	r3, [sp, #28]
   147d4:	ldr	r3, [r5]
   147d8:	orr	r1, r1, #1
   147dc:	mov	lr, r0
   147e0:	str	r1, [sp, #32]
   147e4:	str	r0, [sp, #36]	; 0x24
   147e8:	str	r1, [sp, #4]
   147ec:	str	r2, [sp, #12]
   147f0:	str	r3, [sp]
   147f4:	mov	r0, r7
   147f8:	mov	r1, r9
   147fc:	str	ip, [sp, #16]
   14800:	str	lr, [sp, #8]
   14804:	mov	r3, fp
   14808:	mov	r2, sl
   1480c:	bl	131f4 <__assert_fail@plt+0x229c>
   14810:	cmp	r9, r0
   14814:	bhi	14880 <__assert_fail@plt+0x3928>
   14818:	ldr	r3, [pc, #172]	; 148cc <__assert_fail@plt+0x3974>
   1481c:	add	r9, r0, #1
   14820:	cmp	r7, r3
   14824:	str	r9, [r6, r4, lsl #3]
   14828:	beq	14834 <__assert_fail@plt+0x38dc>
   1482c:	mov	r0, r7
   14830:	bl	12df0 <__assert_fail@plt+0x1e98>
   14834:	mov	r0, r9
   14838:	bl	15478 <__assert_fail@plt+0x4520>
   1483c:	ldr	lr, [sp, #28]
   14840:	ldr	ip, [r5, #44]	; 0x2c
   14844:	ldr	r4, [r5, #40]	; 0x28
   14848:	mov	r3, fp
   1484c:	mov	r2, sl
   14850:	mov	r1, r9
   14854:	str	r0, [lr, #4]
   14858:	ldr	lr, [r5]
   1485c:	ldr	r5, [sp, #36]	; 0x24
   14860:	str	ip, [sp, #16]
   14864:	str	r5, [sp, #8]
   14868:	ldr	r5, [sp, #32]
   1486c:	str	r4, [sp, #12]
   14870:	str	r5, [sp, #4]
   14874:	str	lr, [sp]
   14878:	mov	r7, r0
   1487c:	bl	131f4 <__assert_fail@plt+0x229c>
   14880:	ldr	r3, [sp, #24]
   14884:	mov	r0, r7
   14888:	str	r3, [r8]
   1488c:	add	sp, sp, #52	; 0x34
   14890:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14894:	mov	r3, #8
   14898:	sub	r2, r4, r2
   1489c:	str	r3, [sp]
   148a0:	add	r1, sp, #44	; 0x2c
   148a4:	add	r2, r2, #1
   148a8:	mvn	r3, #-2147483648	; 0x80000000
   148ac:	bl	155dc <__assert_fail@plt+0x4684>
   148b0:	mov	r6, r0
   148b4:	ldm	r9, {r0, r1}
   148b8:	str	r6, [r7]
   148bc:	stm	r6, {r0, r1}
   148c0:	b	14790 <__assert_fail@plt+0x3838>
   148c4:	bl	10f40 <abort@plt>
   148c8:	andeq	r8, r2, r0, lsl #2
   148cc:	andeq	r8, r2, r0, ror r1
   148d0:	push	{r4, r5, r6, lr}
   148d4:	mov	r5, r0
   148d8:	bl	10e8c <__errno_location@plt>
   148dc:	cmp	r5, #0
   148e0:	mov	r1, #48	; 0x30
   148e4:	mov	r4, r0
   148e8:	ldr	r0, [pc, #16]	; 14900 <__assert_fail@plt+0x39a8>
   148ec:	ldr	r6, [r4]
   148f0:	movne	r0, r5
   148f4:	bl	158d8 <__assert_fail@plt+0x4980>
   148f8:	str	r6, [r4]
   148fc:	pop	{r4, r5, r6, pc}
   14900:	andeq	r8, r2, r0, ror r2
   14904:	ldr	r3, [pc, #12]	; 14918 <__assert_fail@plt+0x39c0>
   14908:	cmp	r0, #0
   1490c:	moveq	r0, r3
   14910:	ldr	r0, [r0]
   14914:	bx	lr
   14918:	andeq	r8, r2, r0, ror r2
   1491c:	ldr	r3, [pc, #12]	; 14930 <__assert_fail@plt+0x39d8>
   14920:	cmp	r0, #0
   14924:	moveq	r0, r3
   14928:	str	r1, [r0]
   1492c:	bx	lr
   14930:	andeq	r8, r2, r0, ror r2
   14934:	ldr	r3, [pc, #52]	; 14970 <__assert_fail@plt+0x3a18>
   14938:	cmp	r0, #0
   1493c:	moveq	r0, r3
   14940:	add	r3, r0, #8
   14944:	push	{lr}		; (str lr, [sp, #-4]!)
   14948:	lsr	lr, r1, #5
   1494c:	and	r1, r1, #31
   14950:	ldr	ip, [r3, lr, lsl #2]
   14954:	lsr	r0, ip, r1
   14958:	eor	r2, r2, r0
   1495c:	and	r2, r2, #1
   14960:	and	r0, r0, #1
   14964:	eor	r1, ip, r2, lsl r1
   14968:	str	r1, [r3, lr, lsl #2]
   1496c:	pop	{pc}		; (ldr pc, [sp], #4)
   14970:	andeq	r8, r2, r0, ror r2
   14974:	ldr	r3, [pc, #16]	; 1498c <__assert_fail@plt+0x3a34>
   14978:	cmp	r0, #0
   1497c:	movne	r3, r0
   14980:	ldr	r0, [r3, #4]
   14984:	str	r1, [r3, #4]
   14988:	bx	lr
   1498c:	andeq	r8, r2, r0, ror r2
   14990:	ldr	r3, [pc, #44]	; 149c4 <__assert_fail@plt+0x3a6c>
   14994:	cmp	r0, #0
   14998:	moveq	r0, r3
   1499c:	mov	ip, #10
   149a0:	cmp	r2, #0
   149a4:	cmpne	r1, #0
   149a8:	str	ip, [r0]
   149ac:	beq	149bc <__assert_fail@plt+0x3a64>
   149b0:	str	r1, [r0, #40]	; 0x28
   149b4:	str	r2, [r0, #44]	; 0x2c
   149b8:	bx	lr
   149bc:	push	{r4, lr}
   149c0:	bl	10f40 <abort@plt>
   149c4:	andeq	r8, r2, r0, ror r2
   149c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   149cc:	sub	sp, sp, #24
   149d0:	ldr	ip, [pc, #108]	; 14a44 <__assert_fail@plt+0x3aec>
   149d4:	ldr	r4, [sp, #56]	; 0x38
   149d8:	mov	r9, r2
   149dc:	cmp	r4, #0
   149e0:	moveq	r4, ip
   149e4:	mov	sl, r3
   149e8:	mov	r7, r0
   149ec:	mov	r8, r1
   149f0:	bl	10e8c <__errno_location@plt>
   149f4:	ldr	r3, [r4, #44]	; 0x2c
   149f8:	mov	r1, r8
   149fc:	ldr	r6, [r0]
   14a00:	str	r3, [sp, #16]
   14a04:	ldr	r2, [r4, #40]	; 0x28
   14a08:	add	r3, r4, #8
   14a0c:	str	r3, [sp, #8]
   14a10:	str	r2, [sp, #12]
   14a14:	ldr	r2, [r4, #4]
   14a18:	mov	r5, r0
   14a1c:	str	r2, [sp, #4]
   14a20:	ldr	ip, [r4]
   14a24:	mov	r3, sl
   14a28:	mov	r2, r9
   14a2c:	mov	r0, r7
   14a30:	str	ip, [sp]
   14a34:	bl	131f4 <__assert_fail@plt+0x229c>
   14a38:	str	r6, [r5]
   14a3c:	add	sp, sp, #24
   14a40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14a44:	andeq	r8, r2, r0, ror r2
   14a48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a4c:	cmp	r3, #0
   14a50:	sub	sp, sp, #44	; 0x2c
   14a54:	ldr	r4, [pc, #192]	; 14b1c <__assert_fail@plt+0x3bc4>
   14a58:	mov	r6, r2
   14a5c:	movne	r4, r3
   14a60:	mov	r9, r1
   14a64:	mov	r8, r0
   14a68:	bl	10e8c <__errno_location@plt>
   14a6c:	ldr	r3, [r4, #44]	; 0x2c
   14a70:	ldr	r5, [r4, #4]
   14a74:	add	sl, r4, #8
   14a78:	cmp	r6, #0
   14a7c:	orreq	r5, r5, #1
   14a80:	mov	r1, #0
   14a84:	ldr	r2, [r0]
   14a88:	str	r3, [sp, #16]
   14a8c:	ldr	r3, [r4, #40]	; 0x28
   14a90:	stmib	sp, {r5, sl}
   14a94:	str	r3, [sp, #12]
   14a98:	ldr	r3, [r4]
   14a9c:	mov	r7, r0
   14aa0:	str	r2, [sp, #28]
   14aa4:	str	r3, [sp]
   14aa8:	mov	r2, r8
   14aac:	mov	r3, r9
   14ab0:	mov	r0, r1
   14ab4:	bl	131f4 <__assert_fail@plt+0x229c>
   14ab8:	add	r1, r0, #1
   14abc:	mov	fp, r0
   14ac0:	mov	r0, r1
   14ac4:	str	r1, [sp, #36]	; 0x24
   14ac8:	bl	15478 <__assert_fail@plt+0x4520>
   14acc:	ldr	r3, [r4, #44]	; 0x2c
   14ad0:	mov	r2, r8
   14ad4:	str	r3, [sp, #16]
   14ad8:	ldr	r3, [r4, #40]	; 0x28
   14adc:	str	r5, [sp, #4]
   14ae0:	str	r3, [sp, #12]
   14ae4:	str	sl, [sp, #8]
   14ae8:	ldr	ip, [r4]
   14aec:	ldr	r1, [sp, #36]	; 0x24
   14af0:	mov	r3, r9
   14af4:	str	ip, [sp]
   14af8:	str	r0, [sp, #32]
   14afc:	bl	131f4 <__assert_fail@plt+0x229c>
   14b00:	ldr	r2, [sp, #28]
   14b04:	cmp	r6, #0
   14b08:	str	r2, [r7]
   14b0c:	ldr	r0, [sp, #32]
   14b10:	strne	fp, [r6]
   14b14:	add	sp, sp, #44	; 0x2c
   14b18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b1c:	andeq	r8, r2, r0, ror r2
   14b20:	mov	r3, r2
   14b24:	mov	r2, #0
   14b28:	b	14a48 <__assert_fail@plt+0x3af0>
   14b2c:	push	{r4, r5, r6, r7, r8, lr}
   14b30:	ldr	r6, [pc, #116]	; 14bac <__assert_fail@plt+0x3c54>
   14b34:	ldr	r3, [r6, #4]
   14b38:	ldr	r7, [r6]
   14b3c:	cmp	r3, #1
   14b40:	movgt	r5, r7
   14b44:	movgt	r4, #1
   14b48:	ble	14b68 <__assert_fail@plt+0x3c10>
   14b4c:	ldr	r0, [r5, #12]
   14b50:	bl	12df0 <__assert_fail@plt+0x1e98>
   14b54:	ldr	r3, [r6, #4]
   14b58:	add	r4, r4, #1
   14b5c:	cmp	r3, r4
   14b60:	add	r5, r5, #8
   14b64:	bgt	14b4c <__assert_fail@plt+0x3bf4>
   14b68:	ldr	r0, [r7, #4]
   14b6c:	ldr	r4, [pc, #60]	; 14bb0 <__assert_fail@plt+0x3c58>
   14b70:	cmp	r0, r4
   14b74:	beq	14b88 <__assert_fail@plt+0x3c30>
   14b78:	bl	12df0 <__assert_fail@plt+0x1e98>
   14b7c:	mov	r3, #256	; 0x100
   14b80:	str	r4, [r6, #12]
   14b84:	str	r3, [r6, #8]
   14b88:	ldr	r4, [pc, #36]	; 14bb4 <__assert_fail@plt+0x3c5c>
   14b8c:	cmp	r7, r4
   14b90:	beq	14ba0 <__assert_fail@plt+0x3c48>
   14b94:	mov	r0, r7
   14b98:	bl	12df0 <__assert_fail@plt+0x1e98>
   14b9c:	str	r4, [r6]
   14ba0:	mov	r3, #1
   14ba4:	str	r3, [r6, #4]
   14ba8:	pop	{r4, r5, r6, r7, r8, pc}
   14bac:	andeq	r8, r2, r0, lsl #2
   14bb0:	andeq	r8, r2, r0, ror r1
   14bb4:	andeq	r8, r2, r8, lsl #2
   14bb8:	ldr	r3, [pc, #4]	; 14bc4 <__assert_fail@plt+0x3c6c>
   14bbc:	mvn	r2, #0
   14bc0:	b	14708 <__assert_fail@plt+0x37b0>
   14bc4:	andeq	r8, r2, r0, ror r2
   14bc8:	ldr	r3, [pc]	; 14bd0 <__assert_fail@plt+0x3c78>
   14bcc:	b	14708 <__assert_fail@plt+0x37b0>
   14bd0:	andeq	r8, r2, r0, ror r2
   14bd4:	mov	r1, r0
   14bd8:	ldr	r3, [pc, #8]	; 14be8 <__assert_fail@plt+0x3c90>
   14bdc:	mvn	r2, #0
   14be0:	mov	r0, #0
   14be4:	b	14708 <__assert_fail@plt+0x37b0>
   14be8:	andeq	r8, r2, r0, ror r2
   14bec:	mov	r2, r1
   14bf0:	ldr	r3, [pc, #8]	; 14c00 <__assert_fail@plt+0x3ca8>
   14bf4:	mov	r1, r0
   14bf8:	mov	r0, #0
   14bfc:	b	14708 <__assert_fail@plt+0x37b0>
   14c00:	andeq	r8, r2, r0, ror r2
   14c04:	push	{r4, r5, lr}
   14c08:	sub	sp, sp, #52	; 0x34
   14c0c:	mov	r5, r2
   14c10:	mov	r4, r0
   14c14:	mov	r0, sp
   14c18:	bl	130a4 <__assert_fail@plt+0x214c>
   14c1c:	mov	r3, sp
   14c20:	mov	r1, r5
   14c24:	mov	r0, r4
   14c28:	mvn	r2, #0
   14c2c:	bl	14708 <__assert_fail@plt+0x37b0>
   14c30:	add	sp, sp, #52	; 0x34
   14c34:	pop	{r4, r5, pc}
   14c38:	push	{r4, r5, r6, lr}
   14c3c:	sub	sp, sp, #48	; 0x30
   14c40:	mov	r5, r2
   14c44:	mov	r6, r3
   14c48:	mov	r4, r0
   14c4c:	mov	r0, sp
   14c50:	bl	130a4 <__assert_fail@plt+0x214c>
   14c54:	mov	r3, sp
   14c58:	mov	r2, r6
   14c5c:	mov	r1, r5
   14c60:	mov	r0, r4
   14c64:	bl	14708 <__assert_fail@plt+0x37b0>
   14c68:	add	sp, sp, #48	; 0x30
   14c6c:	pop	{r4, r5, r6, pc}
   14c70:	mov	r2, r1
   14c74:	mov	r1, r0
   14c78:	mov	r0, #0
   14c7c:	b	14c04 <__assert_fail@plt+0x3cac>
   14c80:	mov	r3, r2
   14c84:	mov	r2, r1
   14c88:	mov	r1, r0
   14c8c:	mov	r0, #0
   14c90:	b	14c38 <__assert_fail@plt+0x3ce0>
   14c94:	push	{r4, r5, r6, r7, r8, lr}
   14c98:	mov	r7, r0
   14c9c:	ldr	lr, [pc, #100]	; 14d08 <__assert_fail@plt+0x3db0>
   14ca0:	mov	r8, r1
   14ca4:	mov	r4, r2
   14ca8:	ldm	lr!, {r0, r1, r2, r3}
   14cac:	sub	sp, sp, #48	; 0x30
   14cb0:	mov	ip, sp
   14cb4:	lsr	r5, r4, #5
   14cb8:	stmia	ip!, {r0, r1, r2, r3}
   14cbc:	add	r6, sp, #8
   14cc0:	ldm	lr!, {r0, r1, r2, r3}
   14cc4:	and	r4, r4, #31
   14cc8:	stmia	ip!, {r0, r1, r2, r3}
   14ccc:	ldm	lr, {r0, r1, r2, r3}
   14cd0:	stm	ip, {r0, r1, r2, r3}
   14cd4:	mov	r2, r8
   14cd8:	ldr	lr, [r6, r5, lsl #2]
   14cdc:	mov	r1, r7
   14ce0:	mov	r3, sp
   14ce4:	lsr	ip, lr, r4
   14ce8:	eor	ip, ip, #1
   14cec:	and	ip, ip, #1
   14cf0:	mov	r0, #0
   14cf4:	eor	r4, lr, ip, lsl r4
   14cf8:	str	r4, [r6, r5, lsl #2]
   14cfc:	bl	14708 <__assert_fail@plt+0x37b0>
   14d00:	add	sp, sp, #48	; 0x30
   14d04:	pop	{r4, r5, r6, r7, r8, pc}
   14d08:	andeq	r8, r2, r0, ror r2
   14d0c:	mov	r2, r1
   14d10:	mvn	r1, #0
   14d14:	b	14c94 <__assert_fail@plt+0x3d3c>
   14d18:	mov	r2, #58	; 0x3a
   14d1c:	mvn	r1, #0
   14d20:	b	14c94 <__assert_fail@plt+0x3d3c>
   14d24:	mov	r2, #58	; 0x3a
   14d28:	b	14c94 <__assert_fail@plt+0x3d3c>
   14d2c:	push	{r4, r5, r6, r7, lr}
   14d30:	sub	sp, sp, #100	; 0x64
   14d34:	mov	r6, r0
   14d38:	mov	r0, sp
   14d3c:	mov	r7, r2
   14d40:	bl	130a4 <__assert_fail@plt+0x214c>
   14d44:	mov	ip, sp
   14d48:	add	lr, sp, #48	; 0x30
   14d4c:	ldm	ip!, {r0, r1, r2, r3}
   14d50:	stmia	lr!, {r0, r1, r2, r3}
   14d54:	ldm	ip!, {r0, r1, r2, r3}
   14d58:	ldr	r5, [sp, #60]	; 0x3c
   14d5c:	stmia	lr!, {r0, r1, r2, r3}
   14d60:	mvn	r4, r5
   14d64:	ldm	ip, {r0, r1, r2, r3}
   14d68:	and	ip, r4, #67108864	; 0x4000000
   14d6c:	eor	ip, ip, r5
   14d70:	str	ip, [sp, #60]	; 0x3c
   14d74:	stm	lr, {r0, r1, r2, r3}
   14d78:	mov	r1, r7
   14d7c:	mov	r0, r6
   14d80:	add	r3, sp, #48	; 0x30
   14d84:	mvn	r2, #0
   14d88:	bl	14708 <__assert_fail@plt+0x37b0>
   14d8c:	add	sp, sp, #100	; 0x64
   14d90:	pop	{r4, r5, r6, r7, pc}
   14d94:	push	{r4, r5, r6, r7, r8, lr}
   14d98:	mov	r5, r1
   14d9c:	ldr	lr, [pc, #100]	; 14e08 <__assert_fail@plt+0x3eb0>
   14da0:	mov	r4, r2
   14da4:	mov	r7, r0
   14da8:	mov	r8, r3
   14dac:	ldm	lr!, {r0, r1, r2, r3}
   14db0:	sub	sp, sp, #48	; 0x30
   14db4:	mov	ip, sp
   14db8:	mov	r6, #10
   14dbc:	stmia	ip!, {r0, r1, r2, r3}
   14dc0:	cmp	r4, #0
   14dc4:	cmpne	r5, #0
   14dc8:	ldm	lr!, {r0, r1, r2, r3}
   14dcc:	str	r6, [sp]
   14dd0:	stmia	ip!, {r0, r1, r2, r3}
   14dd4:	ldm	lr, {r0, r1, r2, r3}
   14dd8:	stm	ip, {r0, r1, r2, r3}
   14ddc:	beq	14e04 <__assert_fail@plt+0x3eac>
   14de0:	mov	r3, sp
   14de4:	mov	r1, r8
   14de8:	mov	r0, r7
   14dec:	ldr	r2, [sp, #72]	; 0x48
   14df0:	str	r5, [sp, #40]	; 0x28
   14df4:	str	r4, [sp, #44]	; 0x2c
   14df8:	bl	14708 <__assert_fail@plt+0x37b0>
   14dfc:	add	sp, sp, #48	; 0x30
   14e00:	pop	{r4, r5, r6, r7, r8, pc}
   14e04:	bl	10f40 <abort@plt>
   14e08:	andeq	r8, r2, r0, ror r2
   14e0c:	push	{lr}		; (str lr, [sp, #-4]!)
   14e10:	sub	sp, sp, #12
   14e14:	mvn	ip, #0
   14e18:	str	ip, [sp]
   14e1c:	bl	14d94 <__assert_fail@plt+0x3e3c>
   14e20:	add	sp, sp, #12
   14e24:	pop	{pc}		; (ldr pc, [sp], #4)
   14e28:	push	{lr}		; (str lr, [sp, #-4]!)
   14e2c:	sub	sp, sp, #12
   14e30:	mvn	ip, #0
   14e34:	mov	r3, r2
   14e38:	str	ip, [sp]
   14e3c:	mov	r2, r1
   14e40:	mov	r1, r0
   14e44:	mov	r0, #0
   14e48:	bl	14d94 <__assert_fail@plt+0x3e3c>
   14e4c:	add	sp, sp, #12
   14e50:	pop	{pc}		; (ldr pc, [sp], #4)
   14e54:	push	{lr}		; (str lr, [sp, #-4]!)
   14e58:	sub	sp, sp, #12
   14e5c:	str	r3, [sp]
   14e60:	mov	r3, r2
   14e64:	mov	r2, r1
   14e68:	mov	r1, r0
   14e6c:	mov	r0, #0
   14e70:	bl	14d94 <__assert_fail@plt+0x3e3c>
   14e74:	add	sp, sp, #12
   14e78:	pop	{pc}		; (ldr pc, [sp], #4)
   14e7c:	ldr	r3, [pc]	; 14e84 <__assert_fail@plt+0x3f2c>
   14e80:	b	14708 <__assert_fail@plt+0x37b0>
   14e84:	andeq	r8, r2, r0, lsl r1
   14e88:	mov	r2, r1
   14e8c:	ldr	r3, [pc, #8]	; 14e9c <__assert_fail@plt+0x3f44>
   14e90:	mov	r1, r0
   14e94:	mov	r0, #0
   14e98:	b	14708 <__assert_fail@plt+0x37b0>
   14e9c:	andeq	r8, r2, r0, lsl r1
   14ea0:	ldr	r3, [pc, #4]	; 14eac <__assert_fail@plt+0x3f54>
   14ea4:	mvn	r2, #0
   14ea8:	b	14708 <__assert_fail@plt+0x37b0>
   14eac:	andeq	r8, r2, r0, lsl r1
   14eb0:	mov	r1, r0
   14eb4:	ldr	r3, [pc, #8]	; 14ec4 <__assert_fail@plt+0x3f6c>
   14eb8:	mvn	r2, #0
   14ebc:	mov	r0, #0
   14ec0:	b	14708 <__assert_fail@plt+0x37b0>
   14ec4:	andeq	r8, r2, r0, lsl r1
   14ec8:	push	{r4, r5, r6, r7, r8, lr}
   14ecc:	mov	r8, r0
   14ed0:	ldr	r5, [pc, #84]	; 14f2c <__assert_fail@plt+0x3fd4>
   14ed4:	mov	r7, r1
   14ed8:	mov	r4, r2
   14edc:	mov	r2, r4
   14ee0:	mov	r1, r7
   14ee4:	mov	r0, r8
   14ee8:	bl	10d00 <read@plt>
   14eec:	subs	r6, r0, #0
   14ef0:	bge	14f24 <__assert_fail@plt+0x3fcc>
   14ef4:	bl	10e8c <__errno_location@plt>
   14ef8:	ldr	r3, [r0]
   14efc:	cmp	r3, #4
   14f00:	beq	14edc <__assert_fail@plt+0x3f84>
   14f04:	cmp	r4, r5
   14f08:	movls	r2, #0
   14f0c:	movhi	r2, #1
   14f10:	cmp	r3, #22
   14f14:	movne	r2, #0
   14f18:	cmp	r2, #0
   14f1c:	mov	r4, r5
   14f20:	bne	14edc <__assert_fail@plt+0x3f84>
   14f24:	mov	r0, r6
   14f28:	pop	{r4, r5, r6, r7, r8, pc}
   14f2c:	svcvc	0x00f00000	; IMB
   14f30:	push	{r4, r5, r6, lr}
   14f34:	sub	sp, sp, #32
   14f38:	cmp	r1, #0
   14f3c:	mov	r4, r0
   14f40:	ldr	r5, [sp, #48]	; 0x30
   14f44:	ldr	r6, [sp, #52]	; 0x34
   14f48:	beq	15260 <__assert_fail@plt+0x4308>
   14f4c:	stm	sp, {r2, r3}
   14f50:	mov	r3, r1
   14f54:	ldr	r2, [pc, #808]	; 15284 <__assert_fail@plt+0x432c>
   14f58:	mov	r1, #1
   14f5c:	bl	10ec8 <__fprintf_chk@plt>
   14f60:	mov	r2, #5
   14f64:	ldr	r1, [pc, #796]	; 15288 <__assert_fail@plt+0x4330>
   14f68:	mov	r0, #0
   14f6c:	bl	10d78 <dcgettext@plt>
   14f70:	ldr	r3, [pc, #788]	; 1528c <__assert_fail@plt+0x4334>
   14f74:	ldr	r2, [pc, #788]	; 15290 <__assert_fail@plt+0x4338>
   14f78:	str	r3, [sp]
   14f7c:	mov	r1, #1
   14f80:	mov	r3, r0
   14f84:	mov	r0, r4
   14f88:	bl	10ec8 <__fprintf_chk@plt>
   14f8c:	mov	r1, r4
   14f90:	mov	r0, #10
   14f94:	bl	10d6c <fputc_unlocked@plt>
   14f98:	mov	r2, #5
   14f9c:	ldr	r1, [pc, #752]	; 15294 <__assert_fail@plt+0x433c>
   14fa0:	mov	r0, #0
   14fa4:	bl	10d78 <dcgettext@plt>
   14fa8:	mov	r1, #1
   14fac:	ldr	r3, [pc, #740]	; 15298 <__assert_fail@plt+0x4340>
   14fb0:	mov	r2, r0
   14fb4:	mov	r0, r4
   14fb8:	bl	10ec8 <__fprintf_chk@plt>
   14fbc:	mov	r1, r4
   14fc0:	mov	r0, #10
   14fc4:	bl	10d6c <fputc_unlocked@plt>
   14fc8:	cmp	r6, #9
   14fcc:	ldrls	pc, [pc, r6, lsl #2]
   14fd0:	b	15278 <__assert_fail@plt+0x4320>
   14fd4:	andeq	r5, r1, r8, asr r0
   14fd8:	andeq	r5, r1, r0, rrx
   14fdc:	andeq	r5, r1, ip, lsl #1
   14fe0:	andeq	r5, r1, r0, asr #1
   14fe4:	strdeq	r5, [r1], -ip
   14fe8:	andeq	r5, r1, r8, lsr r1
   14fec:	andeq	r5, r1, r4, ror r1
   14ff0:			; <UNDEFINED> instruction: 0x000151b8
   14ff4:	andeq	r5, r1, r8, lsl #4
   14ff8:	strdeq	r4, [r1], -ip
   14ffc:	ldr	r1, [pc, #664]	; 1529c <__assert_fail@plt+0x4344>
   15000:	mov	r2, #5
   15004:	mov	r0, #0
   15008:	bl	10d78 <dcgettext@plt>
   1500c:	ldr	ip, [r5, #32]
   15010:	ldr	r1, [r5, #28]
   15014:	ldr	r2, [r5, #24]
   15018:	ldr	r3, [r5]
   1501c:	ldr	r6, [r5, #20]
   15020:	str	ip, [sp, #28]
   15024:	ldr	lr, [r5, #16]
   15028:	str	r1, [sp, #24]
   1502c:	ldr	ip, [r5, #12]
   15030:	str	r2, [sp, #20]
   15034:	ldr	r1, [r5, #8]
   15038:	ldr	r2, [r5, #4]
   1503c:	str	r6, [sp, #16]
   15040:	stmib	sp, {r1, ip, lr}
   15044:	mov	r1, #1
   15048:	str	r2, [sp]
   1504c:	mov	r2, r0
   15050:	mov	r0, r4
   15054:	bl	10ec8 <__fprintf_chk@plt>
   15058:	add	sp, sp, #32
   1505c:	pop	{r4, r5, r6, pc}
   15060:	mov	r2, #5
   15064:	ldr	r1, [pc, #564]	; 152a0 <__assert_fail@plt+0x4348>
   15068:	mov	r0, #0
   1506c:	bl	10d78 <dcgettext@plt>
   15070:	ldr	r3, [r5]
   15074:	mov	r1, #1
   15078:	mov	r2, r0
   1507c:	mov	r0, r4
   15080:	add	sp, sp, #32
   15084:	pop	{r4, r5, r6, lr}
   15088:	b	10ec8 <__fprintf_chk@plt>
   1508c:	mov	r2, #5
   15090:	ldr	r1, [pc, #524]	; 152a4 <__assert_fail@plt+0x434c>
   15094:	mov	r0, #0
   15098:	bl	10d78 <dcgettext@plt>
   1509c:	ldr	r2, [r5, #4]
   150a0:	ldr	r3, [r5]
   150a4:	mov	r1, #1
   150a8:	str	r2, [sp, #48]	; 0x30
   150ac:	mov	r2, r0
   150b0:	mov	r0, r4
   150b4:	add	sp, sp, #32
   150b8:	pop	{r4, r5, r6, lr}
   150bc:	b	10ec8 <__fprintf_chk@plt>
   150c0:	mov	r2, #5
   150c4:	ldr	r1, [pc, #476]	; 152a8 <__assert_fail@plt+0x4350>
   150c8:	mov	r0, #0
   150cc:	bl	10d78 <dcgettext@plt>
   150d0:	ldr	r1, [r5, #8]
   150d4:	ldr	r2, [r5, #4]
   150d8:	ldr	r3, [r5]
   150dc:	str	r1, [sp, #52]	; 0x34
   150e0:	str	r2, [sp, #48]	; 0x30
   150e4:	mov	r1, #1
   150e8:	mov	r2, r0
   150ec:	mov	r0, r4
   150f0:	add	sp, sp, #32
   150f4:	pop	{r4, r5, r6, lr}
   150f8:	b	10ec8 <__fprintf_chk@plt>
   150fc:	mov	r2, #5
   15100:	ldr	r1, [pc, #420]	; 152ac <__assert_fail@plt+0x4354>
   15104:	mov	r0, #0
   15108:	bl	10d78 <dcgettext@plt>
   1510c:	ldr	r1, [r5, #8]
   15110:	ldr	ip, [r5, #12]
   15114:	ldr	r2, [r5, #4]
   15118:	ldr	r3, [r5]
   1511c:	stmib	sp, {r1, ip}
   15120:	str	r2, [sp]
   15124:	mov	r1, #1
   15128:	mov	r2, r0
   1512c:	mov	r0, r4
   15130:	bl	10ec8 <__fprintf_chk@plt>
   15134:	b	15058 <__assert_fail@plt+0x4100>
   15138:	mov	r2, #5
   1513c:	ldr	r1, [pc, #364]	; 152b0 <__assert_fail@plt+0x4358>
   15140:	mov	r0, #0
   15144:	bl	10d78 <dcgettext@plt>
   15148:	add	r1, r5, #8
   1514c:	ldr	r2, [r5, #4]
   15150:	ldm	r1, {r1, ip, lr}
   15154:	ldr	r3, [r5]
   15158:	str	r2, [sp]
   1515c:	stmib	sp, {r1, ip, lr}
   15160:	mov	r1, #1
   15164:	mov	r2, r0
   15168:	mov	r0, r4
   1516c:	bl	10ec8 <__fprintf_chk@plt>
   15170:	b	15058 <__assert_fail@plt+0x4100>
   15174:	mov	r2, #5
   15178:	ldr	r1, [pc, #308]	; 152b4 <__assert_fail@plt+0x435c>
   1517c:	mov	r0, #0
   15180:	bl	10d78 <dcgettext@plt>
   15184:	add	r1, r5, #8
   15188:	ldr	r2, [r5, #4]
   1518c:	ldm	r1, {r1, ip, lr}
   15190:	ldr	r6, [r5, #20]
   15194:	ldr	r3, [r5]
   15198:	stmib	sp, {r1, ip, lr}
   1519c:	mov	r1, #1
   151a0:	str	r2, [sp]
   151a4:	str	r6, [sp, #16]
   151a8:	mov	r2, r0
   151ac:	mov	r0, r4
   151b0:	bl	10ec8 <__fprintf_chk@plt>
   151b4:	b	15058 <__assert_fail@plt+0x4100>
   151b8:	mov	r2, #5
   151bc:	ldr	r1, [pc, #244]	; 152b8 <__assert_fail@plt+0x4360>
   151c0:	mov	r0, #0
   151c4:	bl	10d78 <dcgettext@plt>
   151c8:	ldr	r2, [r5, #24]
   151cc:	ldr	r3, [r5]
   151d0:	ldr	r6, [r5, #20]
   151d4:	ldr	lr, [r5, #16]
   151d8:	ldr	ip, [r5, #12]
   151dc:	str	r2, [sp, #20]
   151e0:	ldr	r1, [r5, #8]
   151e4:	ldr	r2, [r5, #4]
   151e8:	str	r6, [sp, #16]
   151ec:	stmib	sp, {r1, ip, lr}
   151f0:	mov	r1, #1
   151f4:	str	r2, [sp]
   151f8:	mov	r2, r0
   151fc:	mov	r0, r4
   15200:	bl	10ec8 <__fprintf_chk@plt>
   15204:	b	15058 <__assert_fail@plt+0x4100>
   15208:	mov	r2, #5
   1520c:	ldr	r1, [pc, #168]	; 152bc <__assert_fail@plt+0x4364>
   15210:	mov	r0, #0
   15214:	bl	10d78 <dcgettext@plt>
   15218:	ldr	r1, [r5, #28]
   1521c:	ldr	r2, [r5, #24]
   15220:	ldr	r3, [r5]
   15224:	ldr	r6, [r5, #20]
   15228:	ldr	lr, [r5, #16]
   1522c:	str	r1, [sp, #24]
   15230:	ldr	ip, [r5, #12]
   15234:	str	r2, [sp, #20]
   15238:	ldr	r1, [r5, #8]
   1523c:	ldr	r2, [r5, #4]
   15240:	str	r6, [sp, #16]
   15244:	stmib	sp, {r1, ip, lr}
   15248:	mov	r1, #1
   1524c:	str	r2, [sp]
   15250:	mov	r2, r0
   15254:	mov	r0, r4
   15258:	bl	10ec8 <__fprintf_chk@plt>
   1525c:	b	15058 <__assert_fail@plt+0x4100>
   15260:	str	r3, [sp]
   15264:	mov	r1, #1
   15268:	mov	r3, r2
   1526c:	ldr	r2, [pc, #76]	; 152c0 <__assert_fail@plt+0x4368>
   15270:	bl	10ec8 <__fprintf_chk@plt>
   15274:	b	14f60 <__assert_fail@plt+0x4008>
   15278:	mov	r2, #5
   1527c:	ldr	r1, [pc, #64]	; 152c4 <__assert_fail@plt+0x436c>
   15280:	b	15004 <__assert_fail@plt+0x40ac>
   15284:	andeq	r7, r1, r8, asr #15
   15288:	ldrdeq	r7, [r1], -ip
   1528c:	andeq	r0, r0, r6, ror #15
   15290:			; <UNDEFINED> instruction: 0x00017ab4
   15294:	andeq	r7, r1, r0, ror #15
   15298:	andeq	r7, r1, ip, lsl #17
   1529c:			; <UNDEFINED> instruction: 0x000179bc
   152a0:			; <UNDEFINED> instruction: 0x000178b0
   152a4:	andeq	r7, r1, r0, asr #17
   152a8:	ldrdeq	r7, [r1], -r8
   152ac:	strdeq	r7, [r1], -r4
   152b0:	andeq	r7, r1, r4, lsl r9
   152b4:	andeq	r7, r1, r8, lsr r9
   152b8:	andeq	r7, r1, r0, ror #18
   152bc:	andeq	r7, r1, ip, lsl #19
   152c0:	ldrdeq	r7, [r1], -r4
   152c4:	strdeq	r7, [r1], -r0
   152c8:	push	{r4, r5, lr}
   152cc:	sub	sp, sp, #12
   152d0:	ldr	r5, [sp, #24]
   152d4:	ldr	ip, [r5]
   152d8:	cmp	ip, #0
   152dc:	beq	152f8 <__assert_fail@plt+0x43a0>
   152e0:	mov	lr, r5
   152e4:	mov	ip, #0
   152e8:	ldr	r4, [lr, #4]!
   152ec:	add	ip, ip, #1
   152f0:	cmp	r4, #0
   152f4:	bne	152e8 <__assert_fail@plt+0x4390>
   152f8:	stm	sp, {r5, ip}
   152fc:	bl	14f30 <__assert_fail@plt+0x3fd8>
   15300:	add	sp, sp, #12
   15304:	pop	{r4, r5, pc}
   15308:	push	{r4, r5, lr}
   1530c:	sub	sp, sp, #52	; 0x34
   15310:	add	r5, sp, #4
   15314:	ldr	r4, [sp, #64]	; 0x40
   15318:	mov	ip, #0
   1531c:	sub	r4, r4, #4
   15320:	ldr	lr, [r4, #4]!
   15324:	cmp	lr, #0
   15328:	str	lr, [r5, #4]!
   1532c:	beq	1533c <__assert_fail@plt+0x43e4>
   15330:	add	ip, ip, #1
   15334:	cmp	ip, #10
   15338:	bne	15320 <__assert_fail@plt+0x43c8>
   1533c:	add	lr, sp, #8
   15340:	str	ip, [sp, #4]
   15344:	str	lr, [sp]
   15348:	bl	14f30 <__assert_fail@plt+0x3fd8>
   1534c:	add	sp, sp, #52	; 0x34
   15350:	pop	{r4, r5, pc}
   15354:	push	{r3}		; (str r3, [sp, #-4]!)
   15358:	push	{r4, lr}
   1535c:	sub	sp, sp, #60	; 0x3c
   15360:	add	lr, sp, #56	; 0x38
   15364:	add	r3, sp, #72	; 0x48
   15368:	str	r3, [lr, #-44]!	; 0xffffffd4
   1536c:	add	r4, sp, #68	; 0x44
   15370:	mov	r3, #0
   15374:	ldr	ip, [r4, #4]!
   15378:	cmp	ip, #0
   1537c:	str	ip, [lr, #4]!
   15380:	beq	15390 <__assert_fail@plt+0x4438>
   15384:	add	r3, r3, #1
   15388:	cmp	r3, #10
   1538c:	bne	15374 <__assert_fail@plt+0x441c>
   15390:	add	ip, sp, #16
   15394:	str	r3, [sp, #4]
   15398:	str	ip, [sp]
   1539c:	ldr	r3, [sp, #68]	; 0x44
   153a0:	bl	14f30 <__assert_fail@plt+0x3fd8>
   153a4:	add	sp, sp, #60	; 0x3c
   153a8:	pop	{r4, lr}
   153ac:	add	sp, sp, #4
   153b0:	bx	lr
   153b4:	ldr	r3, [pc, #116]	; 15430 <__assert_fail@plt+0x44d8>
   153b8:	push	{r4, lr}
   153bc:	mov	r0, #10
   153c0:	ldr	r1, [r3]
   153c4:	bl	10d6c <fputc_unlocked@plt>
   153c8:	mov	r2, #5
   153cc:	ldr	r1, [pc, #96]	; 15434 <__assert_fail@plt+0x44dc>
   153d0:	mov	r0, #0
   153d4:	bl	10d78 <dcgettext@plt>
   153d8:	ldr	r2, [pc, #88]	; 15438 <__assert_fail@plt+0x44e0>
   153dc:	mov	r1, r0
   153e0:	mov	r0, #1
   153e4:	bl	10eb0 <__printf_chk@plt>
   153e8:	mov	r2, #5
   153ec:	ldr	r1, [pc, #72]	; 1543c <__assert_fail@plt+0x44e4>
   153f0:	mov	r0, #0
   153f4:	bl	10d78 <dcgettext@plt>
   153f8:	ldr	r3, [pc, #64]	; 15440 <__assert_fail@plt+0x44e8>
   153fc:	ldr	r2, [pc, #64]	; 15444 <__assert_fail@plt+0x44ec>
   15400:	mov	r1, r0
   15404:	mov	r0, #1
   15408:	bl	10eb0 <__printf_chk@plt>
   1540c:	mov	r2, #5
   15410:	ldr	r1, [pc, #48]	; 15448 <__assert_fail@plt+0x44f0>
   15414:	mov	r0, #0
   15418:	bl	10d78 <dcgettext@plt>
   1541c:	ldr	r2, [pc, #40]	; 1544c <__assert_fail@plt+0x44f4>
   15420:	pop	{r4, lr}
   15424:	mov	r1, r0
   15428:	mov	r0, #1
   1542c:	b	10eb0 <__printf_chk@plt>
   15430:	andeq	r8, r2, r4, asr r1
   15434:	andeq	r7, r1, ip, lsr #20
   15438:	andeq	r7, r1, r0, asr #20
   1543c:	andeq	r7, r1, r8, asr sl
   15440:	strdeq	r7, [r1], -ip
   15444:	andeq	r7, r1, r4, lsr #8
   15448:	andeq	r7, r1, ip, ror #20
   1544c:	muleq	r1, r4, sl
   15450:	push	{r4, lr}
   15454:	bl	161ac <__assert_fail@plt+0x5254>
   15458:	cmp	r0, #0
   1545c:	popne	{r4, pc}
   15460:	bl	15998 <__assert_fail@plt+0x4a40>
   15464:	push	{r4, lr}
   15468:	bl	161ac <__assert_fail@plt+0x5254>
   1546c:	cmp	r0, #0
   15470:	popne	{r4, pc}
   15474:	bl	15998 <__assert_fail@plt+0x4a40>
   15478:	push	{r4, lr}
   1547c:	bl	161ac <__assert_fail@plt+0x5254>
   15480:	cmp	r0, #0
   15484:	popne	{r4, pc}
   15488:	bl	15998 <__assert_fail@plt+0x4a40>
   1548c:	push	{r4, r5, r6, lr}
   15490:	mov	r5, r0
   15494:	mov	r4, r1
   15498:	bl	161d8 <__assert_fail@plt+0x5280>
   1549c:	cmp	r0, #0
   154a0:	popne	{r4, r5, r6, pc}
   154a4:	adds	r4, r4, #0
   154a8:	movne	r4, #1
   154ac:	cmp	r5, #0
   154b0:	orreq	r4, r4, #1
   154b4:	cmp	r4, #0
   154b8:	popeq	{r4, r5, r6, pc}
   154bc:	bl	15998 <__assert_fail@plt+0x4a40>
   154c0:	push	{r4, lr}
   154c4:	cmp	r1, #0
   154c8:	orreq	r1, r1, #1
   154cc:	bl	161d8 <__assert_fail@plt+0x5280>
   154d0:	cmp	r0, #0
   154d4:	popne	{r4, pc}
   154d8:	bl	15998 <__assert_fail@plt+0x4a40>
   154dc:	push	{r4, r5, r6, lr}
   154e0:	mov	r6, r0
   154e4:	mov	r5, r1
   154e8:	mov	r4, r2
   154ec:	bl	164d8 <__assert_fail@plt+0x5580>
   154f0:	cmp	r0, #0
   154f4:	popne	{r4, r5, r6, pc}
   154f8:	cmp	r6, #0
   154fc:	beq	1550c <__assert_fail@plt+0x45b4>
   15500:	cmp	r5, #0
   15504:	cmpne	r4, #0
   15508:	popeq	{r4, r5, r6, pc}
   1550c:	bl	15998 <__assert_fail@plt+0x4a40>
   15510:	b	154dc <__assert_fail@plt+0x4584>
   15514:	cmp	r2, #0
   15518:	cmpne	r1, #0
   1551c:	moveq	r2, #1
   15520:	moveq	r1, r2
   15524:	push	{r4, lr}
   15528:	bl	164d8 <__assert_fail@plt+0x5580>
   1552c:	cmp	r0, #0
   15530:	popne	{r4, pc}
   15534:	bl	15998 <__assert_fail@plt+0x4a40>
   15538:	mov	r2, r1
   1553c:	mov	r1, r0
   15540:	mov	r0, #0
   15544:	b	154dc <__assert_fail@plt+0x4584>
   15548:	mov	r2, r1
   1554c:	mov	r1, r0
   15550:	mov	r0, #0
   15554:	b	15514 <__assert_fail@plt+0x45bc>
   15558:	push	{r4, r5, r6, lr}
   1555c:	subs	r6, r0, #0
   15560:	sub	sp, sp, #8
   15564:	mov	r5, r1
   15568:	ldr	r4, [r1]
   1556c:	beq	155a8 <__assert_fail@plt+0x4650>
   15570:	lsr	r1, r4, #1
   15574:	add	r3, r1, #1
   15578:	mvn	r3, r3
   1557c:	cmp	r4, r3
   15580:	bhi	155a4 <__assert_fail@plt+0x464c>
   15584:	add	r4, r4, #1
   15588:	add	r4, r4, r1
   1558c:	mov	r0, r6
   15590:	mov	r1, r4
   15594:	bl	154dc <__assert_fail@plt+0x4584>
   15598:	str	r4, [r5]
   1559c:	add	sp, sp, #8
   155a0:	pop	{r4, r5, r6, pc}
   155a4:	bl	15998 <__assert_fail@plt+0x4a40>
   155a8:	cmp	r4, #0
   155ac:	bne	1558c <__assert_fail@plt+0x4634>
   155b0:	mov	r1, r2
   155b4:	mov	r0, #64	; 0x40
   155b8:	str	r2, [sp, #4]
   155bc:	bl	16618 <__assert_fail@plt+0x56c0>
   155c0:	ldr	r2, [sp, #4]
   155c4:	cmp	r0, #0
   155c8:	movne	r4, r0
   155cc:	addeq	r4, r0, #1
   155d0:	b	1558c <__assert_fail@plt+0x4634>
   155d4:	mov	r2, #1
   155d8:	b	15558 <__assert_fail@plt+0x4600>
   155dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155e0:	sub	sp, sp, #12
   155e4:	ldr	r6, [r1]
   155e8:	mov	sl, r1
   155ec:	mov	r9, r0
   155f0:	asrs	r4, r6, #1
   155f4:	mov	r5, r2
   155f8:	mov	fp, r3
   155fc:	ldr	r7, [sp, #48]	; 0x30
   15600:	bmi	1576c <__assert_fail@plt+0x4814>
   15604:	mvn	r3, #-2147483648	; 0x80000000
   15608:	sub	r3, r3, r4
   1560c:	cmp	r6, r3
   15610:	movle	r3, #0
   15614:	movgt	r3, #1
   15618:	mvn	r8, fp
   1561c:	cmp	r3, #0
   15620:	addeq	r4, r4, r6
   15624:	mvnne	r4, #-2147483648	; 0x80000000
   15628:	lsr	r8, r8, #31
   1562c:	cmp	fp, r4
   15630:	movge	r3, #0
   15634:	andlt	r3, r8, #1
   15638:	cmp	r3, #0
   1563c:	beq	15724 <__assert_fail@plt+0x47cc>
   15640:	cmp	r7, #0
   15644:	blt	157f4 <__assert_fail@plt+0x489c>
   15648:	bne	157ec <__assert_fail@plt+0x4894>
   1564c:	mov	r2, #64	; 0x40
   15650:	mov	r1, r7
   15654:	mov	r0, r2
   15658:	str	r2, [sp, #4]
   1565c:	bl	16824 <__assert_fail@plt+0x58cc>
   15660:	ldr	r2, [sp, #4]
   15664:	mov	r1, r7
   15668:	mov	r4, r0
   1566c:	mov	r0, r2
   15670:	bl	16a44 <__assert_fail@plt+0x5aec>
   15674:	ldr	r2, [sp, #4]
   15678:	sub	r1, r2, r1
   1567c:	cmp	r9, #0
   15680:	sub	r3, r4, r6
   15684:	streq	r9, [sl]
   15688:	cmp	r3, r5
   1568c:	bge	15710 <__assert_fail@plt+0x47b8>
   15690:	cmp	r5, #0
   15694:	blt	15780 <__assert_fail@plt+0x4828>
   15698:	cmp	r6, #0
   1569c:	blt	156bc <__assert_fail@plt+0x4764>
   156a0:	mvn	r3, #-2147483648	; 0x80000000
   156a4:	sub	r3, r3, r5
   156a8:	cmp	r6, r3
   156ac:	movle	r3, #0
   156b0:	movgt	r3, #1
   156b4:	cmp	r3, #0
   156b8:	bne	1587c <__assert_fail@plt+0x4924>
   156bc:	add	r5, r6, r5
   156c0:	cmp	fp, r5
   156c4:	movge	r8, #0
   156c8:	andlt	r8, r8, #1
   156cc:	cmp	r8, #0
   156d0:	mov	r4, r5
   156d4:	bne	1587c <__assert_fail@plt+0x4924>
   156d8:	cmp	r7, #0
   156dc:	blt	15794 <__assert_fail@plt+0x483c>
   156e0:	beq	1570c <__assert_fail@plt+0x47b4>
   156e4:	cmp	r5, #0
   156e8:	blt	1583c <__assert_fail@plt+0x48e4>
   156ec:	mov	r1, r7
   156f0:	mvn	r0, #-2147483648	; 0x80000000
   156f4:	bl	16824 <__assert_fail@plt+0x58cc>
   156f8:	cmp	r5, r0
   156fc:	movle	r0, #0
   15700:	movgt	r0, #1
   15704:	cmp	r0, #0
   15708:	bne	1587c <__assert_fail@plt+0x4924>
   1570c:	mul	r1, r5, r7
   15710:	mov	r0, r9
   15714:	bl	1548c <__assert_fail@plt+0x4534>
   15718:	str	r4, [sl]
   1571c:	add	sp, sp, #12
   15720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15724:	cmp	r7, #0
   15728:	blt	157c0 <__assert_fail@plt+0x4868>
   1572c:	beq	1564c <__assert_fail@plt+0x46f4>
   15730:	cmp	r4, #0
   15734:	blt	157fc <__assert_fail@plt+0x48a4>
   15738:	mov	r1, r7
   1573c:	mvn	r0, #-2147483648	; 0x80000000
   15740:	bl	16824 <__assert_fail@plt+0x58cc>
   15744:	cmp	r0, r4
   15748:	movge	r0, #0
   1574c:	movlt	r0, #1
   15750:	cmp	r0, #0
   15754:	mvnne	r2, #-2147483648	; 0x80000000
   15758:	bne	15650 <__assert_fail@plt+0x46f8>
   1575c:	mul	r1, r7, r4
   15760:	cmp	r1, #63	; 0x3f
   15764:	bgt	1567c <__assert_fail@plt+0x4724>
   15768:	b	1564c <__assert_fail@plt+0x46f4>
   1576c:	rsb	r3, r4, #-2147483648	; 0x80000000
   15770:	cmp	r6, r3
   15774:	movge	r3, #0
   15778:	movlt	r3, #1
   1577c:	b	15618 <__assert_fail@plt+0x46c0>
   15780:	rsb	r3, r5, #-2147483648	; 0x80000000
   15784:	cmp	r6, r3
   15788:	movge	r3, #0
   1578c:	movlt	r3, #1
   15790:	b	156b4 <__assert_fail@plt+0x475c>
   15794:	cmp	r5, #0
   15798:	blt	15820 <__assert_fail@plt+0x48c8>
   1579c:	cmn	r7, #1
   157a0:	beq	1570c <__assert_fail@plt+0x47b4>
   157a4:	mov	r1, r7
   157a8:	mov	r0, #-2147483648	; 0x80000000
   157ac:	bl	16824 <__assert_fail@plt+0x58cc>
   157b0:	cmp	r5, r0
   157b4:	movle	r0, #0
   157b8:	movgt	r0, #1
   157bc:	b	15704 <__assert_fail@plt+0x47ac>
   157c0:	cmp	r4, #0
   157c4:	blt	15860 <__assert_fail@plt+0x4908>
   157c8:	cmn	r7, #1
   157cc:	beq	1575c <__assert_fail@plt+0x4804>
   157d0:	mov	r1, r7
   157d4:	mov	r0, #-2147483648	; 0x80000000
   157d8:	bl	16824 <__assert_fail@plt+0x58cc>
   157dc:	cmp	r0, r4
   157e0:	movge	r0, #0
   157e4:	movlt	r0, #1
   157e8:	b	15750 <__assert_fail@plt+0x47f8>
   157ec:	mov	r4, fp
   157f0:	b	15738 <__assert_fail@plt+0x47e0>
   157f4:	mov	r4, fp
   157f8:	b	157c8 <__assert_fail@plt+0x4870>
   157fc:	cmn	r4, #1
   15800:	beq	1575c <__assert_fail@plt+0x4804>
   15804:	mov	r1, r4
   15808:	mov	r0, #-2147483648	; 0x80000000
   1580c:	bl	16824 <__assert_fail@plt+0x58cc>
   15810:	cmp	r7, r0
   15814:	movle	r0, #0
   15818:	movgt	r0, #1
   1581c:	b	15750 <__assert_fail@plt+0x47f8>
   15820:	mov	r1, r7
   15824:	mvn	r0, #-2147483648	; 0x80000000
   15828:	bl	16824 <__assert_fail@plt+0x58cc>
   1582c:	cmp	r5, r0
   15830:	movge	r0, #0
   15834:	movlt	r0, #1
   15838:	b	15704 <__assert_fail@plt+0x47ac>
   1583c:	cmn	r5, #1
   15840:	beq	1570c <__assert_fail@plt+0x47b4>
   15844:	mov	r1, r5
   15848:	mov	r0, #-2147483648	; 0x80000000
   1584c:	bl	16824 <__assert_fail@plt+0x58cc>
   15850:	cmp	r7, r0
   15854:	movle	r0, #0
   15858:	movgt	r0, #1
   1585c:	b	15704 <__assert_fail@plt+0x47ac>
   15860:	mov	r1, r7
   15864:	mvn	r0, #-2147483648	; 0x80000000
   15868:	bl	16824 <__assert_fail@plt+0x58cc>
   1586c:	cmp	r0, r4
   15870:	movle	r0, #0
   15874:	movgt	r0, #1
   15878:	b	15750 <__assert_fail@plt+0x47f8>
   1587c:	bl	15998 <__assert_fail@plt+0x4a40>
   15880:	push	{r4, lr}
   15884:	mov	r1, #1
   15888:	bl	16164 <__assert_fail@plt+0x520c>
   1588c:	cmp	r0, #0
   15890:	popne	{r4, pc}
   15894:	bl	15998 <__assert_fail@plt+0x4a40>
   15898:	push	{r4, lr}
   1589c:	mov	r1, #1
   158a0:	bl	16164 <__assert_fail@plt+0x520c>
   158a4:	cmp	r0, #0
   158a8:	popne	{r4, pc}
   158ac:	bl	15998 <__assert_fail@plt+0x4a40>
   158b0:	push	{r4, lr}
   158b4:	bl	16164 <__assert_fail@plt+0x520c>
   158b8:	cmp	r0, #0
   158bc:	popne	{r4, pc}
   158c0:	bl	15998 <__assert_fail@plt+0x4a40>
   158c4:	push	{r4, lr}
   158c8:	bl	16164 <__assert_fail@plt+0x520c>
   158cc:	cmp	r0, #0
   158d0:	popne	{r4, pc}
   158d4:	bl	15998 <__assert_fail@plt+0x4a40>
   158d8:	push	{r4, r5, r6, lr}
   158dc:	mov	r6, r0
   158e0:	mov	r0, r1
   158e4:	mov	r4, r1
   158e8:	bl	161ac <__assert_fail@plt+0x5254>
   158ec:	subs	r5, r0, #0
   158f0:	beq	15908 <__assert_fail@plt+0x49b0>
   158f4:	mov	r2, r4
   158f8:	mov	r1, r6
   158fc:	bl	10d30 <memcpy@plt>
   15900:	mov	r0, r5
   15904:	pop	{r4, r5, r6, pc}
   15908:	bl	15998 <__assert_fail@plt+0x4a40>
   1590c:	push	{r4, r5, r6, lr}
   15910:	mov	r6, r0
   15914:	mov	r0, r1
   15918:	mov	r4, r1
   1591c:	bl	161ac <__assert_fail@plt+0x5254>
   15920:	subs	r5, r0, #0
   15924:	beq	1593c <__assert_fail@plt+0x49e4>
   15928:	mov	r2, r4
   1592c:	mov	r1, r6
   15930:	bl	10d30 <memcpy@plt>
   15934:	mov	r0, r5
   15938:	pop	{r4, r5, r6, pc}
   1593c:	bl	15998 <__assert_fail@plt+0x4a40>
   15940:	push	{r4, r5, r6, lr}
   15944:	mov	r6, r0
   15948:	add	r0, r1, #1
   1594c:	mov	r4, r1
   15950:	bl	161ac <__assert_fail@plt+0x5254>
   15954:	subs	r5, r0, #0
   15958:	beq	15978 <__assert_fail@plt+0x4a20>
   1595c:	mov	r3, #0
   15960:	mov	r1, r6
   15964:	strb	r3, [r5, r4]
   15968:	mov	r2, r4
   1596c:	bl	10d30 <memcpy@plt>
   15970:	mov	r0, r5
   15974:	pop	{r4, r5, r6, pc}
   15978:	bl	15998 <__assert_fail@plt+0x4a40>
   1597c:	push	{r4, lr}
   15980:	mov	r4, r0
   15984:	bl	10e68 <strlen@plt>
   15988:	add	r1, r0, #1
   1598c:	mov	r0, r4
   15990:	pop	{r4, lr}
   15994:	b	158d8 <__assert_fail@plt+0x4980>
   15998:	ldr	r3, [pc, #44]	; 159cc <__assert_fail@plt+0x4a74>
   1599c:	push	{r4, lr}
   159a0:	mov	r2, #5
   159a4:	ldr	r1, [pc, #36]	; 159d0 <__assert_fail@plt+0x4a78>
   159a8:	mov	r0, #0
   159ac:	ldr	r4, [r3]
   159b0:	bl	10d78 <dcgettext@plt>
   159b4:	ldr	r2, [pc, #24]	; 159d4 <__assert_fail@plt+0x4a7c>
   159b8:	mov	r1, #0
   159bc:	mov	r3, r0
   159c0:	mov	r0, r4
   159c4:	bl	10dfc <error@plt>
   159c8:	bl	10f40 <abort@plt>
   159cc:	strdeq	r8, [r2], -ip
   159d0:	andeq	r7, r1, r4, ror #21
   159d4:	andeq	r7, r1, r0, asr #10
   159d8:	push	{r4, r5, r6, r7, lr}
   159dc:	sub	sp, sp, #20
   159e0:	mov	r6, r2
   159e4:	ldr	ip, [sp, #48]	; 0x30
   159e8:	mov	r2, r1
   159ec:	mov	r7, r3
   159f0:	str	ip, [sp]
   159f4:	add	r3, sp, #8
   159f8:	mov	r1, #0
   159fc:	mov	r5, r0
   15a00:	ldr	r4, [sp, #56]	; 0x38
   15a04:	bl	15bbc <__assert_fail@plt+0x4c64>
   15a08:	cmp	r0, #0
   15a0c:	bne	15a90 <__assert_fail@plt+0x4b38>
   15a10:	ldrd	r0, [sp, #8]
   15a14:	cmp	r1, r7
   15a18:	cmpeq	r0, r6
   15a1c:	ldrd	r6, [sp, #40]	; 0x28
   15a20:	movcc	r3, #1
   15a24:	movcs	r3, #0
   15a28:	cmp	r1, r7
   15a2c:	cmpeq	r0, r6
   15a30:	orrhi	r3, r3, #1
   15a34:	cmp	r3, #0
   15a38:	beq	15a88 <__assert_fail@plt+0x4b30>
   15a3c:	mov	r3, #0
   15a40:	mvn	r2, #-1073741824	; 0xc0000000
   15a44:	cmp	r1, r3
   15a48:	cmpeq	r0, r2
   15a4c:	bhi	15abc <__assert_fail@plt+0x4b64>
   15a50:	bl	10e8c <__errno_location@plt>
   15a54:	mov	r3, #34	; 0x22
   15a58:	mov	r6, r3
   15a5c:	str	r3, [r0]
   15a60:	cmp	r4, #0
   15a64:	moveq	r4, #1
   15a68:	mov	r0, r5
   15a6c:	bl	14eb0 <__assert_fail@plt+0x3f58>
   15a70:	mov	r1, r6
   15a74:	ldr	r3, [sp, #52]	; 0x34
   15a78:	ldr	r2, [pc, #144]	; 15b10 <__assert_fail@plt+0x4bb8>
   15a7c:	str	r0, [sp]
   15a80:	mov	r0, r4
   15a84:	bl	10dfc <error@plt>
   15a88:	add	sp, sp, #20
   15a8c:	pop	{r4, r5, r6, r7, pc}
   15a90:	cmp	r0, #1
   15a94:	beq	15ad0 <__assert_fail@plt+0x4b78>
   15a98:	cmp	r0, #3
   15a9c:	beq	15b00 <__assert_fail@plt+0x4ba8>
   15aa0:	cmp	r4, #0
   15aa4:	beq	15af0 <__assert_fail@plt+0x4b98>
   15aa8:	bl	10e8c <__errno_location@plt>
   15aac:	ldr	r6, [r0]
   15ab0:	cmp	r6, #22
   15ab4:	moveq	r6, #0
   15ab8:	b	15a68 <__assert_fail@plt+0x4b10>
   15abc:	bl	10e8c <__errno_location@plt>
   15ac0:	mov	r3, #75	; 0x4b
   15ac4:	mov	r6, r3
   15ac8:	str	r3, [r0]
   15acc:	b	15a60 <__assert_fail@plt+0x4b08>
   15ad0:	bl	10e8c <__errno_location@plt>
   15ad4:	mov	r3, #75	; 0x4b
   15ad8:	mov	r6, r3
   15adc:	str	r3, [r0]
   15ae0:	cmp	r4, #0
   15ae4:	moveq	r4, #1
   15ae8:	bne	15ab0 <__assert_fail@plt+0x4b58>
   15aec:	b	15a68 <__assert_fail@plt+0x4b10>
   15af0:	bl	10e8c <__errno_location@plt>
   15af4:	mov	r4, #1
   15af8:	ldr	r6, [r0]
   15afc:	b	15ab0 <__assert_fail@plt+0x4b58>
   15b00:	bl	10e8c <__errno_location@plt>
   15b04:	mov	r6, #0
   15b08:	str	r6, [r0]
   15b0c:	b	15ae0 <__assert_fail@plt+0x4b88>
   15b10:	andeq	r7, r1, ip, lsr r5
   15b14:	push	{r4, r5}
   15b18:	mov	r1, #10
   15b1c:	pop	{r4, r5}
   15b20:	b	159d8 <__assert_fail@plt+0x4a80>
   15b24:	push	{r4, r5, r6, r7, r8, lr}
   15b28:	subs	r5, r1, #0
   15b2c:	mov	r4, r0
   15b30:	blt	15ba4 <__assert_fail@plt+0x4c4c>
   15b34:	moveq	r6, #0
   15b38:	moveq	r7, #0
   15b3c:	bne	15b64 <__assert_fail@plt+0x4c0c>
   15b40:	ldr	r2, [r4]
   15b44:	ldr	r1, [r4, #4]
   15b48:	mov	r0, #0
   15b4c:	mul	ip, r2, r7
   15b50:	umull	r2, r3, r2, r5
   15b54:	mla	r5, r5, r1, ip
   15b58:	add	r3, r5, r3
   15b5c:	strd	r2, [r4]
   15b60:	pop	{r4, r5, r6, r7, r8, pc}
   15b64:	asr	r7, r5, #31
   15b68:	mov	r2, r5
   15b6c:	mov	r3, r7
   15b70:	mvn	r0, #0
   15b74:	mvn	r1, #0
   15b78:	bl	16b38 <__assert_fail@plt+0x5be0>
   15b7c:	ldrd	r2, [r4]
   15b80:	mov	r6, r5
   15b84:	cmp	r1, r3
   15b88:	cmpeq	r0, r2
   15b8c:	bcs	15b40 <__assert_fail@plt+0x4be8>
   15b90:	mvn	r2, #0
   15b94:	mvn	r3, #0
   15b98:	mov	r0, #1
   15b9c:	strd	r2, [r4]
   15ba0:	pop	{r4, r5, r6, r7, r8, pc}
   15ba4:	ldrd	r2, [r0]
   15ba8:	orrs	r3, r2, r3
   15bac:	moveq	r6, r5
   15bb0:	asreq	r7, r6, #31
   15bb4:	bne	15b90 <__assert_fail@plt+0x4c38>
   15bb8:	b	15b40 <__assert_fail@plt+0x4be8>
   15bbc:	cmp	r2, #36	; 0x24
   15bc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bc4:	sub	sp, sp, #20
   15bc8:	bhi	1613c <__assert_fail@plt+0x51e4>
   15bcc:	cmp	r1, #0
   15bd0:	mov	r8, r2
   15bd4:	mov	r7, r0
   15bd8:	mov	r5, r1
   15bdc:	mov	r6, r3
   15be0:	addeq	r5, sp, #4
   15be4:	bl	10e8c <__errno_location@plt>
   15be8:	mov	r3, #0
   15bec:	str	r3, [r0]
   15bf0:	mov	r9, r0
   15bf4:	bl	10e50 <__ctype_b_loc@plt>
   15bf8:	ldrb	r3, [r7]
   15bfc:	mov	r2, r7
   15c00:	ldr	r0, [r0]
   15c04:	b	15c0c <__assert_fail@plt+0x4cb4>
   15c08:	ldrb	r3, [r2, #1]!
   15c0c:	lsl	r1, r3, #1
   15c10:	ldrh	r4, [r0, r1]
   15c14:	ands	r4, r4, #8192	; 0x2000
   15c18:	bne	15c08 <__assert_fail@plt+0x4cb0>
   15c1c:	cmp	r3, #45	; 0x2d
   15c20:	bne	15c34 <__assert_fail@plt+0x4cdc>
   15c24:	mov	r4, #4
   15c28:	mov	r0, r4
   15c2c:	add	sp, sp, #20
   15c30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c34:	mov	r2, r8
   15c38:	mov	r3, r4
   15c3c:	mov	r1, r5
   15c40:	mov	r0, r7
   15c44:	bl	10d3c <__strtoull_internal@plt>
   15c48:	ldr	r8, [r5]
   15c4c:	cmp	r7, r8
   15c50:	mov	r2, r0
   15c54:	str	r0, [sp, #8]
   15c58:	str	r1, [sp, #12]
   15c5c:	beq	15ca8 <__assert_fail@plt+0x4d50>
   15c60:	ldr	r4, [r9]
   15c64:	cmp	r4, #0
   15c68:	bne	15c98 <__assert_fail@plt+0x4d40>
   15c6c:	ldr	r3, [sp, #56]	; 0x38
   15c70:	cmp	r3, #0
   15c74:	beq	15c84 <__assert_fail@plt+0x4d2c>
   15c78:	ldrb	r9, [r8]
   15c7c:	cmp	r9, #0
   15c80:	bne	15ce0 <__assert_fail@plt+0x4d88>
   15c84:	mov	r0, r4
   15c88:	str	r2, [r6]
   15c8c:	str	r1, [r6, #4]
   15c90:	add	sp, sp, #20
   15c94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c98:	cmp	r4, #34	; 0x22
   15c9c:	bne	15c24 <__assert_fail@plt+0x4ccc>
   15ca0:	mov	r4, #1
   15ca4:	b	15c6c <__assert_fail@plt+0x4d14>
   15ca8:	ldr	r3, [sp, #56]	; 0x38
   15cac:	cmp	r3, #0
   15cb0:	beq	15c24 <__assert_fail@plt+0x4ccc>
   15cb4:	ldrb	r1, [r8]
   15cb8:	cmp	r1, #0
   15cbc:	beq	15c24 <__assert_fail@plt+0x4ccc>
   15cc0:	mov	r0, r3
   15cc4:	bl	10e74 <strchr@plt>
   15cc8:	cmp	r0, #0
   15ccc:	beq	15c24 <__assert_fail@plt+0x4ccc>
   15cd0:	ldrb	r9, [r8]
   15cd4:	mov	r2, #1
   15cd8:	mov	r3, #0
   15cdc:	strd	r2, [sp, #8]
   15ce0:	mov	r1, r9
   15ce4:	ldr	r0, [sp, #56]	; 0x38
   15ce8:	bl	10e74 <strchr@plt>
   15cec:	cmp	r0, #0
   15cf0:	beq	160f8 <__assert_fail@plt+0x51a0>
   15cf4:	sub	r3, r9, #69	; 0x45
   15cf8:	cmp	r3, #47	; 0x2f
   15cfc:	ldrls	pc, [pc, r3, lsl #2]
   15d00:	b	15dc4 <__assert_fail@plt+0x4e6c>
   15d04:			; <UNDEFINED> instruction: 0x00015eb4
   15d08:	andeq	r5, r1, r4, asr #27
   15d0c:			; <UNDEFINED> instruction: 0x00015eb4
   15d10:	andeq	r5, r1, r4, asr #27
   15d14:	andeq	r5, r1, r4, asr #27
   15d18:	andeq	r5, r1, r4, asr #27
   15d1c:			; <UNDEFINED> instruction: 0x00015eb4
   15d20:	andeq	r5, r1, r4, asr #27
   15d24:			; <UNDEFINED> instruction: 0x00015eb4
   15d28:	andeq	r5, r1, r4, asr #27
   15d2c:	andeq	r5, r1, r4, asr #27
   15d30:			; <UNDEFINED> instruction: 0x00015eb4
   15d34:	andeq	r5, r1, r4, asr #27
   15d38:	andeq	r5, r1, r4, asr #27
   15d3c:	andeq	r5, r1, r4, asr #27
   15d40:			; <UNDEFINED> instruction: 0x00015eb4
   15d44:	andeq	r5, r1, r4, asr #27
   15d48:	andeq	r5, r1, r4, asr #27
   15d4c:	andeq	r5, r1, r4, asr #27
   15d50:	andeq	r5, r1, r4, asr #27
   15d54:			; <UNDEFINED> instruction: 0x00015eb4
   15d58:			; <UNDEFINED> instruction: 0x00015eb4
   15d5c:	andeq	r5, r1, r4, asr #27
   15d60:	andeq	r5, r1, r4, asr #27
   15d64:	andeq	r5, r1, r4, asr #27
   15d68:	andeq	r5, r1, r4, asr #27
   15d6c:	andeq	r5, r1, r4, asr #27
   15d70:	andeq	r5, r1, r4, asr #27
   15d74:	andeq	r5, r1, r4, asr #27
   15d78:	andeq	r5, r1, r4, asr #27
   15d7c:	andeq	r5, r1, r4, asr #27
   15d80:	andeq	r5, r1, r4, asr #27
   15d84:	andeq	r5, r1, r4, asr #27
   15d88:	andeq	r5, r1, r4, asr #27
   15d8c:			; <UNDEFINED> instruction: 0x00015eb4
   15d90:	andeq	r5, r1, r4, asr #27
   15d94:	andeq	r5, r1, r4, asr #27
   15d98:	andeq	r5, r1, r4, asr #27
   15d9c:			; <UNDEFINED> instruction: 0x00015eb4
   15da0:	andeq	r5, r1, r4, asr #27
   15da4:			; <UNDEFINED> instruction: 0x00015eb4
   15da8:	andeq	r5, r1, r4, asr #27
   15dac:	andeq	r5, r1, r4, asr #27
   15db0:	andeq	r5, r1, r4, asr #27
   15db4:	andeq	r5, r1, r4, asr #27
   15db8:	andeq	r5, r1, r4, asr #27
   15dbc:	andeq	r5, r1, r4, asr #27
   15dc0:			; <UNDEFINED> instruction: 0x00015eb4
   15dc4:	mov	r7, #1
   15dc8:	mov	sl, #1024	; 0x400
   15dcc:	sub	r9, r9, #66	; 0x42
   15dd0:	cmp	r9, #53	; 0x35
   15dd4:	ldrls	pc, [pc, r9, lsl #2]
   15dd8:	b	160f8 <__assert_fail@plt+0x51a0>
   15ddc:	andeq	r6, r1, r4, asr #32
   15de0:	strdeq	r6, [r1], -r8
   15de4:	strdeq	r6, [r1], -r8
   15de8:	andeq	r6, r1, ip, lsl r0
   15dec:	strdeq	r6, [r1], -r8
   15df0:	strdeq	r5, [r1], -r4
   15df4:	strdeq	r6, [r1], -r8
   15df8:	strdeq	r6, [r1], -r8
   15dfc:	strdeq	r6, [r1], -r8
   15e00:	ldrdeq	r5, [r1], -r4
   15e04:	strdeq	r6, [r1], -r8
   15e08:	andeq	r6, r1, r0, lsr #1
   15e0c:	strdeq	r6, [r1], -r8
   15e10:	strdeq	r6, [r1], -r8
   15e14:	andeq	r6, r1, r8, ror r0
   15e18:	strdeq	r6, [r1], -r8
   15e1c:	strdeq	r6, [r1], -r8
   15e20:	strdeq	r6, [r1], -r8
   15e24:	ldrdeq	r6, [r1], -r0
   15e28:	strdeq	r6, [r1], -r8
   15e2c:	strdeq	r6, [r1], -r8
   15e30:	strdeq	r6, [r1], -r8
   15e34:	strdeq	r6, [r1], -r8
   15e38:	andeq	r5, r1, ip, lsr #31
   15e3c:	andeq	r5, r1, r8, ror pc
   15e40:	strdeq	r6, [r1], -r8
   15e44:	strdeq	r6, [r1], -r8
   15e48:	strdeq	r6, [r1], -r8
   15e4c:	strdeq	r6, [r1], -r8
   15e50:	strdeq	r6, [r1], -r8
   15e54:	strdeq	r6, [r1], -r8
   15e58:	strdeq	r6, [r1], -r8
   15e5c:	andeq	r5, r1, r4, asr #30
   15e60:	andeq	r5, r1, r4, lsr pc
   15e64:	strdeq	r6, [r1], -r8
   15e68:	strdeq	r6, [r1], -r8
   15e6c:	strdeq	r6, [r1], -r8
   15e70:	strdeq	r5, [r1], -r4
   15e74:	strdeq	r6, [r1], -r8
   15e78:	strdeq	r6, [r1], -r8
   15e7c:	strdeq	r6, [r1], -r8
   15e80:	ldrdeq	r5, [r1], -r4
   15e84:	strdeq	r6, [r1], -r8
   15e88:	andeq	r6, r1, r0, lsr #1
   15e8c:	strdeq	r6, [r1], -r8
   15e90:	strdeq	r6, [r1], -r8
   15e94:	strdeq	r6, [r1], -r8
   15e98:	strdeq	r6, [r1], -r8
   15e9c:	strdeq	r6, [r1], -r8
   15ea0:	strdeq	r6, [r1], -r8
   15ea4:	ldrdeq	r6, [r1], -r0
   15ea8:	strdeq	r6, [r1], -r8
   15eac:	strdeq	r6, [r1], -r8
   15eb0:	strdeq	r5, [r1], -r0
   15eb4:	mov	r1, #48	; 0x30
   15eb8:	ldr	r0, [sp, #56]	; 0x38
   15ebc:	bl	10e74 <strchr@plt>
   15ec0:	cmp	r0, #0
   15ec4:	beq	15dc4 <__assert_fail@plt+0x4e6c>
   15ec8:	ldrb	r3, [r8, #1]
   15ecc:	cmp	r3, #68	; 0x44
   15ed0:	beq	15ee4 <__assert_fail@plt+0x4f8c>
   15ed4:	cmp	r3, #105	; 0x69
   15ed8:	beq	16108 <__assert_fail@plt+0x51b0>
   15edc:	cmp	r3, #66	; 0x42
   15ee0:	bne	15dc4 <__assert_fail@plt+0x4e6c>
   15ee4:	mov	r7, #2
   15ee8:	mov	sl, #1000	; 0x3e8
   15eec:	b	15dcc <__assert_fail@plt+0x4e74>
   15ef0:	ldrd	r2, [sp, #8]
   15ef4:	cmp	r2, #0
   15ef8:	sbcs	r1, r3, #0
   15efc:	blt	16120 <__assert_fail@plt+0x51c8>
   15f00:	adds	r2, r2, r2
   15f04:	adc	r3, r3, r3
   15f08:	mov	r1, r3
   15f0c:	mov	r9, #0
   15f10:	str	r2, [sp, #8]
   15f14:	str	r3, [sp, #12]
   15f18:	add	r3, r8, r7
   15f1c:	str	r3, [r5]
   15f20:	ldrb	r3, [r8, r7]
   15f24:	orr	r4, r4, r9
   15f28:	cmp	r3, #0
   15f2c:	orrne	r4, r4, #2
   15f30:	b	15c84 <__assert_fail@plt+0x4d2c>
   15f34:	ldr	r2, [sp, #8]
   15f38:	ldr	r1, [sp, #12]
   15f3c:	mov	r9, #0
   15f40:	b	15f18 <__assert_fail@plt+0x4fc0>
   15f44:	ldrd	r2, [sp, #8]
   15f48:	ldr	r1, [pc, #512]	; 16150 <__assert_fail@plt+0x51f8>
   15f4c:	mvn	r0, #0
   15f50:	cmp	r3, r1
   15f54:	cmpeq	r2, r0
   15f58:	bhi	16120 <__assert_fail@plt+0x51c8>
   15f5c:	lsl	r1, r3, #9
   15f60:	orr	r1, r1, r2, lsr #23
   15f64:	lsl	r2, r2, #9
   15f68:	str	r1, [sp, #12]
   15f6c:	str	r2, [sp, #8]
   15f70:	mov	r9, #0
   15f74:	b	15f18 <__assert_fail@plt+0x4fc0>
   15f78:	mov	fp, #7
   15f7c:	mov	r9, #0
   15f80:	add	r8, sp, #8
   15f84:	mov	r1, sl
   15f88:	mov	r0, r8
   15f8c:	bl	15b24 <__assert_fail@plt+0x4bcc>
   15f90:	subs	fp, fp, #1
   15f94:	orr	r9, r9, r0
   15f98:	bne	15f84 <__assert_fail@plt+0x502c>
   15f9c:	ldr	r8, [r5]
   15fa0:	ldr	r2, [sp, #8]
   15fa4:	ldr	r1, [sp, #12]
   15fa8:	b	15f18 <__assert_fail@plt+0x4fc0>
   15fac:	mov	fp, #8
   15fb0:	mov	r9, #0
   15fb4:	add	r8, sp, fp
   15fb8:	mov	r1, sl
   15fbc:	mov	r0, r8
   15fc0:	bl	15b24 <__assert_fail@plt+0x4bcc>
   15fc4:	subs	fp, fp, #1
   15fc8:	orr	r9, r9, r0
   15fcc:	bne	15fb8 <__assert_fail@plt+0x5060>
   15fd0:	b	15f9c <__assert_fail@plt+0x5044>
   15fd4:	mov	r1, sl
   15fd8:	add	r0, sp, #8
   15fdc:	bl	15b24 <__assert_fail@plt+0x4bcc>
   15fe0:	ldr	r8, [r5]
   15fe4:	ldr	r2, [sp, #8]
   15fe8:	ldr	r1, [sp, #12]
   15fec:	mov	r9, r0
   15ff0:	b	15f18 <__assert_fail@plt+0x4fc0>
   15ff4:	mov	fp, #3
   15ff8:	mov	r9, #0
   15ffc:	add	r8, sp, #8
   16000:	mov	r1, sl
   16004:	mov	r0, r8
   16008:	bl	15b24 <__assert_fail@plt+0x4bcc>
   1600c:	subs	fp, fp, #1
   16010:	orr	r9, r9, r0
   16014:	bne	16000 <__assert_fail@plt+0x50a8>
   16018:	b	15f9c <__assert_fail@plt+0x5044>
   1601c:	mov	fp, #6
   16020:	mov	r9, #0
   16024:	add	r8, sp, #8
   16028:	mov	r1, sl
   1602c:	mov	r0, r8
   16030:	bl	15b24 <__assert_fail@plt+0x4bcc>
   16034:	subs	fp, fp, #1
   16038:	orr	r9, r9, r0
   1603c:	bne	16028 <__assert_fail@plt+0x50d0>
   16040:	b	15f9c <__assert_fail@plt+0x5044>
   16044:	ldrd	r0, [sp, #8]
   16048:	ldr	r3, [pc, #260]	; 16154 <__assert_fail@plt+0x51fc>
   1604c:	mvn	r2, #0
   16050:	cmp	r1, r3
   16054:	cmpeq	r0, r2
   16058:	bhi	16120 <__assert_fail@plt+0x51c8>
   1605c:	lsl	r1, r1, #10
   16060:	orr	r1, r1, r0, lsr #22
   16064:	lsl	r2, r0, #10
   16068:	str	r1, [sp, #12]
   1606c:	str	r2, [sp, #8]
   16070:	mov	r9, #0
   16074:	b	15f18 <__assert_fail@plt+0x4fc0>
   16078:	mov	fp, #5
   1607c:	mov	r9, #0
   16080:	add	r8, sp, #8
   16084:	mov	r1, sl
   16088:	mov	r0, r8
   1608c:	bl	15b24 <__assert_fail@plt+0x4bcc>
   16090:	subs	fp, fp, #1
   16094:	orr	r9, r9, r0
   16098:	bne	16084 <__assert_fail@plt+0x512c>
   1609c:	b	15f9c <__assert_fail@plt+0x5044>
   160a0:	mov	r1, sl
   160a4:	add	r0, sp, #8
   160a8:	bl	15b24 <__assert_fail@plt+0x4bcc>
   160ac:	mov	r1, sl
   160b0:	mov	r9, r0
   160b4:	add	r0, sp, #8
   160b8:	bl	15b24 <__assert_fail@plt+0x4bcc>
   160bc:	ldr	r8, [r5]
   160c0:	ldr	r2, [sp, #8]
   160c4:	ldr	r1, [sp, #12]
   160c8:	orr	r9, r9, r0
   160cc:	b	15f18 <__assert_fail@plt+0x4fc0>
   160d0:	mov	fp, #4
   160d4:	mov	r9, #0
   160d8:	add	r8, sp, #8
   160dc:	mov	r1, sl
   160e0:	mov	r0, r8
   160e4:	bl	15b24 <__assert_fail@plt+0x4bcc>
   160e8:	subs	fp, fp, #1
   160ec:	orr	r9, r9, r0
   160f0:	bne	160dc <__assert_fail@plt+0x5184>
   160f4:	b	15f9c <__assert_fail@plt+0x5044>
   160f8:	ldrd	r2, [sp, #8]
   160fc:	orr	r4, r4, #2
   16100:	strd	r2, [r6]
   16104:	b	15c28 <__assert_fail@plt+0x4cd0>
   16108:	ldrb	r7, [r8, #2]
   1610c:	mov	sl, #1024	; 0x400
   16110:	cmp	r7, #66	; 0x42
   16114:	movne	r7, #1
   16118:	moveq	r7, #3
   1611c:	b	15dcc <__assert_fail@plt+0x4e74>
   16120:	mvn	r1, #0
   16124:	mvn	r0, #0
   16128:	mvn	r2, #0
   1612c:	strd	r0, [sp, #8]
   16130:	mov	r9, #1
   16134:	mov	r1, r2
   16138:	b	15f18 <__assert_fail@plt+0x4fc0>
   1613c:	ldr	r3, [pc, #20]	; 16158 <__assert_fail@plt+0x5200>
   16140:	mov	r2, #85	; 0x55
   16144:	ldr	r1, [pc, #16]	; 1615c <__assert_fail@plt+0x5204>
   16148:	ldr	r0, [pc, #16]	; 16160 <__assert_fail@plt+0x5208>
   1614c:	bl	10f58 <__assert_fail@plt>
   16150:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   16154:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   16158:	strdeq	r7, [r1], -r8
   1615c:	andeq	r7, r1, r4, lsl #22
   16160:	andeq	r7, r1, r4, lsl fp
   16164:	cmp	r1, #0
   16168:	cmpne	r0, #0
   1616c:	moveq	r1, #1
   16170:	moveq	r0, r1
   16174:	umull	r2, r3, r0, r1
   16178:	adds	r3, r3, #0
   1617c:	movne	r3, #1
   16180:	cmp	r2, #0
   16184:	blt	16194 <__assert_fail@plt+0x523c>
   16188:	cmp	r3, #0
   1618c:	bne	16194 <__assert_fail@plt+0x523c>
   16190:	b	10cd0 <calloc@plt>
   16194:	push	{r4, lr}
   16198:	bl	10e8c <__errno_location@plt>
   1619c:	mov	r3, #12
   161a0:	str	r3, [r0]
   161a4:	mov	r0, #0
   161a8:	pop	{r4, pc}
   161ac:	cmp	r0, #0
   161b0:	moveq	r0, #1
   161b4:	cmp	r0, #0
   161b8:	blt	161c0 <__assert_fail@plt+0x5268>
   161bc:	b	10e14 <malloc@plt>
   161c0:	push	{r4, lr}
   161c4:	bl	10e8c <__errno_location@plt>
   161c8:	mov	r3, #12
   161cc:	str	r3, [r0]
   161d0:	mov	r0, #0
   161d4:	pop	{r4, pc}
   161d8:	cmp	r0, #0
   161dc:	beq	16200 <__assert_fail@plt+0x52a8>
   161e0:	cmp	r1, #0
   161e4:	push	{lr}		; (str lr, [sp, #-4]!)
   161e8:	sub	sp, sp, #12
   161ec:	beq	16208 <__assert_fail@plt+0x52b0>
   161f0:	blt	16220 <__assert_fail@plt+0x52c8>
   161f4:	add	sp, sp, #12
   161f8:	pop	{lr}		; (ldr lr, [sp], #4)
   161fc:	b	10d84 <realloc@plt>
   16200:	mov	r0, r1
   16204:	b	161ac <__assert_fail@plt+0x5254>
   16208:	str	r1, [sp, #4]
   1620c:	bl	12df0 <__assert_fail@plt+0x1e98>
   16210:	ldr	r3, [sp, #4]
   16214:	mov	r0, r3
   16218:	add	sp, sp, #12
   1621c:	pop	{pc}		; (ldr pc, [sp], #4)
   16220:	bl	10e8c <__errno_location@plt>
   16224:	mov	r2, #12
   16228:	mov	r3, #0
   1622c:	str	r2, [r0]
   16230:	b	16214 <__assert_fail@plt+0x52bc>
   16234:	push	{r4, r5, r6, lr}
   16238:	mov	r4, r0
   1623c:	bl	10de4 <__fpending@plt>
   16240:	ldr	r5, [r4]
   16244:	and	r5, r5, #32
   16248:	mov	r6, r0
   1624c:	mov	r0, r4
   16250:	bl	162b0 <__assert_fail@plt+0x5358>
   16254:	cmp	r5, #0
   16258:	mov	r4, r0
   1625c:	bne	1627c <__assert_fail@plt+0x5324>
   16260:	cmp	r0, #0
   16264:	beq	16274 <__assert_fail@plt+0x531c>
   16268:	cmp	r6, #0
   1626c:	beq	16298 <__assert_fail@plt+0x5340>
   16270:	mvn	r4, #0
   16274:	mov	r0, r4
   16278:	pop	{r4, r5, r6, pc}
   1627c:	cmp	r0, #0
   16280:	bne	16270 <__assert_fail@plt+0x5318>
   16284:	bl	10e8c <__errno_location@plt>
   16288:	str	r4, [r0]
   1628c:	mvn	r4, #0
   16290:	mov	r0, r4
   16294:	pop	{r4, r5, r6, pc}
   16298:	bl	10e8c <__errno_location@plt>
   1629c:	ldr	r4, [r0]
   162a0:	subs	r4, r4, #9
   162a4:	mvnne	r4, #0
   162a8:	mov	r0, r4
   162ac:	pop	{r4, r5, r6, pc}
   162b0:	push	{r4, r5, lr}
   162b4:	sub	sp, sp, #12
   162b8:	mov	r4, r0
   162bc:	bl	10ebc <fileno@plt>
   162c0:	cmp	r0, #0
   162c4:	mov	r0, r4
   162c8:	blt	16344 <__assert_fail@plt+0x53ec>
   162cc:	bl	10e2c <__freading@plt>
   162d0:	cmp	r0, #0
   162d4:	bne	16310 <__assert_fail@plt+0x53b8>
   162d8:	mov	r0, r4
   162dc:	bl	16350 <__assert_fail@plt+0x53f8>
   162e0:	cmp	r0, #0
   162e4:	beq	16340 <__assert_fail@plt+0x53e8>
   162e8:	bl	10e8c <__errno_location@plt>
   162ec:	mov	r5, r0
   162f0:	mov	r0, r4
   162f4:	ldr	r4, [r5]
   162f8:	bl	10ee0 <fclose@plt>
   162fc:	cmp	r4, #0
   16300:	mvnne	r0, #0
   16304:	strne	r4, [r5]
   16308:	add	sp, sp, #12
   1630c:	pop	{r4, r5, pc}
   16310:	mov	r0, r4
   16314:	bl	10ebc <fileno@plt>
   16318:	mov	r3, #1
   1631c:	str	r3, [sp]
   16320:	mov	r2, #0
   16324:	mov	r3, #0
   16328:	bl	10dcc <lseek64@plt>
   1632c:	mvn	r3, #0
   16330:	mvn	r2, #0
   16334:	cmp	r1, r3
   16338:	cmpeq	r0, r2
   1633c:	bne	162d8 <__assert_fail@plt+0x5380>
   16340:	mov	r0, r4
   16344:	add	sp, sp, #12
   16348:	pop	{r4, r5, lr}
   1634c:	b	10ee0 <fclose@plt>
   16350:	push	{r4, lr}
   16354:	subs	r4, r0, #0
   16358:	sub	sp, sp, #8
   1635c:	beq	16378 <__assert_fail@plt+0x5420>
   16360:	bl	10e2c <__freading@plt>
   16364:	cmp	r0, #0
   16368:	beq	16378 <__assert_fail@plt+0x5420>
   1636c:	ldr	r3, [r4]
   16370:	tst	r3, #256	; 0x100
   16374:	bne	16388 <__assert_fail@plt+0x5430>
   16378:	mov	r0, r4
   1637c:	add	sp, sp, #8
   16380:	pop	{r4, lr}
   16384:	b	10d0c <fflush@plt>
   16388:	mov	r3, #1
   1638c:	str	r3, [sp]
   16390:	mov	r2, #0
   16394:	mov	r3, #0
   16398:	mov	r0, r4
   1639c:	bl	163b0 <__assert_fail@plt+0x5458>
   163a0:	mov	r0, r4
   163a4:	add	sp, sp, #8
   163a8:	pop	{r4, lr}
   163ac:	b	10d0c <fflush@plt>
   163b0:	push	{r4, r5, r6, r7, r8, lr}
   163b4:	sub	sp, sp, #8
   163b8:	ldmib	r0, {ip, lr}
   163bc:	mov	r4, r0
   163c0:	ldr	r5, [sp, #32]
   163c4:	cmp	lr, ip
   163c8:	beq	163e0 <__assert_fail@plt+0x5488>
   163cc:	str	r5, [sp, #32]
   163d0:	mov	r0, r4
   163d4:	add	sp, sp, #8
   163d8:	pop	{r4, r5, r6, r7, r8, lr}
   163dc:	b	10eec <fseeko64@plt>
   163e0:	ldr	lr, [r0, #20]
   163e4:	ldr	ip, [r0, #16]
   163e8:	cmp	lr, ip
   163ec:	bne	163cc <__assert_fail@plt+0x5474>
   163f0:	ldr	r8, [r0, #36]	; 0x24
   163f4:	cmp	r8, #0
   163f8:	bne	163cc <__assert_fail@plt+0x5474>
   163fc:	mov	r6, r2
   16400:	mov	r7, r3
   16404:	bl	10ebc <fileno@plt>
   16408:	mov	r2, r6
   1640c:	mov	r3, r7
   16410:	str	r5, [sp]
   16414:	bl	10dcc <lseek64@plt>
   16418:	mvn	r3, #0
   1641c:	mvn	r2, #0
   16420:	cmp	r1, r3
   16424:	cmpeq	r0, r2
   16428:	beq	16448 <__assert_fail@plt+0x54f0>
   1642c:	ldr	r3, [r4]
   16430:	strd	r0, [r4, #80]	; 0x50
   16434:	mov	r0, r8
   16438:	bic	r3, r3, #16
   1643c:	str	r3, [r4]
   16440:	add	sp, sp, #8
   16444:	pop	{r4, r5, r6, r7, r8, pc}
   16448:	mvn	r0, #0
   1644c:	b	16440 <__assert_fail@plt+0x54e8>
   16450:	push	{r4, lr}
   16454:	mov	r0, #14
   16458:	bl	10f10 <nl_langinfo@plt>
   1645c:	cmp	r0, #0
   16460:	beq	16478 <__assert_fail@plt+0x5520>
   16464:	ldrb	r2, [r0]
   16468:	ldr	r3, [pc, #16]	; 16480 <__assert_fail@plt+0x5528>
   1646c:	cmp	r2, #0
   16470:	moveq	r0, r3
   16474:	pop	{r4, pc}
   16478:	ldr	r0, [pc]	; 16480 <__assert_fail@plt+0x5528>
   1647c:	pop	{r4, pc}
   16480:	andeq	r7, r1, ip, lsr fp
   16484:	push	{r4, r5, r6, r7, lr}
   16488:	subs	r6, r0, #0
   1648c:	sub	sp, sp, #12
   16490:	addeq	r6, sp, #4
   16494:	mov	r0, r6
   16498:	mov	r5, r2
   1649c:	mov	r7, r1
   164a0:	bl	10df0 <mbrtowc@plt>
   164a4:	cmp	r5, #0
   164a8:	cmnne	r0, #3
   164ac:	mov	r4, r0
   164b0:	bls	164cc <__assert_fail@plt+0x5574>
   164b4:	mov	r0, #0
   164b8:	bl	16524 <__assert_fail@plt+0x55cc>
   164bc:	cmp	r0, #0
   164c0:	moveq	r4, #1
   164c4:	ldrbeq	r3, [r7]
   164c8:	streq	r3, [r6]
   164cc:	mov	r0, r4
   164d0:	add	sp, sp, #12
   164d4:	pop	{r4, r5, r6, r7, pc}
   164d8:	push	{r4, r5, r6, lr}
   164dc:	subs	r4, r2, #0
   164e0:	mov	r6, r0
   164e4:	mov	r5, r1
   164e8:	beq	16514 <__assert_fail@plt+0x55bc>
   164ec:	mov	r1, r4
   164f0:	mvn	r0, #0
   164f4:	bl	16618 <__assert_fail@plt+0x56c0>
   164f8:	cmp	r0, r5
   164fc:	bcs	16514 <__assert_fail@plt+0x55bc>
   16500:	bl	10e8c <__errno_location@plt>
   16504:	mov	r3, #12
   16508:	str	r3, [r0]
   1650c:	mov	r0, #0
   16510:	pop	{r4, r5, r6, pc}
   16514:	mul	r1, r5, r4
   16518:	mov	r0, r6
   1651c:	pop	{r4, r5, r6, lr}
   16520:	b	161d8 <__assert_fail@plt+0x5280>
   16524:	push	{lr}		; (str lr, [sp, #-4]!)
   16528:	sub	sp, sp, #268	; 0x10c
   1652c:	add	r1, sp, #4
   16530:	ldr	r2, [pc, #60]	; 16574 <__assert_fail@plt+0x561c>
   16534:	bl	16580 <__assert_fail@plt+0x5628>
   16538:	cmp	r0, #0
   1653c:	movne	r0, #0
   16540:	bne	1656c <__assert_fail@plt+0x5614>
   16544:	ldr	r1, [pc, #44]	; 16578 <__assert_fail@plt+0x5620>
   16548:	add	r0, sp, #4
   1654c:	bl	10cf4 <strcmp@plt>
   16550:	cmp	r0, #0
   16554:	beq	1656c <__assert_fail@plt+0x5614>
   16558:	add	r0, sp, #4
   1655c:	ldr	r1, [pc, #24]	; 1657c <__assert_fail@plt+0x5624>
   16560:	bl	10cf4 <strcmp@plt>
   16564:	adds	r0, r0, #0
   16568:	movne	r0, #1
   1656c:	add	sp, sp, #268	; 0x10c
   16570:	pop	{pc}		; (ldr pc, [sp], #4)
   16574:	andeq	r0, r0, r1, lsl #2
   16578:	andeq	r7, r1, r4, asr #22
   1657c:	andeq	r7, r1, r8, asr #22
   16580:	push	{r4, r5, r6, lr}
   16584:	mov	r5, r1
   16588:	mov	r1, #0
   1658c:	mov	r4, r2
   16590:	bl	10ef8 <setlocale@plt>
   16594:	subs	r6, r0, #0
   16598:	beq	165f4 <__assert_fail@plt+0x569c>
   1659c:	bl	10e68 <strlen@plt>
   165a0:	cmp	r4, r0
   165a4:	bhi	165dc <__assert_fail@plt+0x5684>
   165a8:	cmp	r4, #0
   165ac:	bne	165b8 <__assert_fail@plt+0x5660>
   165b0:	mov	r0, #34	; 0x22
   165b4:	pop	{r4, r5, r6, pc}
   165b8:	sub	r4, r4, #1
   165bc:	mov	r1, r6
   165c0:	mov	r2, r4
   165c4:	mov	r0, r5
   165c8:	bl	10d30 <memcpy@plt>
   165cc:	mov	r3, #0
   165d0:	strb	r3, [r5, r4]
   165d4:	mov	r0, #34	; 0x22
   165d8:	pop	{r4, r5, r6, pc}
   165dc:	add	r2, r0, #1
   165e0:	mov	r1, r6
   165e4:	mov	r0, r5
   165e8:	bl	10d30 <memcpy@plt>
   165ec:	mov	r0, #0
   165f0:	pop	{r4, r5, r6, pc}
   165f4:	cmp	r4, #0
   165f8:	beq	16608 <__assert_fail@plt+0x56b0>
   165fc:	strb	r6, [r5]
   16600:	mov	r0, #22
   16604:	pop	{r4, r5, r6, pc}
   16608:	mov	r0, #22
   1660c:	pop	{r4, r5, r6, pc}
   16610:	mov	r1, #0
   16614:	b	10ef8 <setlocale@plt>
   16618:	subs	r2, r1, #1
   1661c:	bxeq	lr
   16620:	bcc	167f8 <__assert_fail@plt+0x58a0>
   16624:	cmp	r0, r1
   16628:	bls	167dc <__assert_fail@plt+0x5884>
   1662c:	tst	r1, r2
   16630:	beq	167e8 <__assert_fail@plt+0x5890>
   16634:	clz	r3, r0
   16638:	clz	r2, r1
   1663c:	sub	r3, r2, r3
   16640:	rsbs	r3, r3, #31
   16644:	addne	r3, r3, r3, lsl #1
   16648:	mov	r2, #0
   1664c:	addne	pc, pc, r3, lsl #2
   16650:	nop			; (mov r0, r0)
   16654:	cmp	r0, r1, lsl #31
   16658:	adc	r2, r2, r2
   1665c:	subcs	r0, r0, r1, lsl #31
   16660:	cmp	r0, r1, lsl #30
   16664:	adc	r2, r2, r2
   16668:	subcs	r0, r0, r1, lsl #30
   1666c:	cmp	r0, r1, lsl #29
   16670:	adc	r2, r2, r2
   16674:	subcs	r0, r0, r1, lsl #29
   16678:	cmp	r0, r1, lsl #28
   1667c:	adc	r2, r2, r2
   16680:	subcs	r0, r0, r1, lsl #28
   16684:	cmp	r0, r1, lsl #27
   16688:	adc	r2, r2, r2
   1668c:	subcs	r0, r0, r1, lsl #27
   16690:	cmp	r0, r1, lsl #26
   16694:	adc	r2, r2, r2
   16698:	subcs	r0, r0, r1, lsl #26
   1669c:	cmp	r0, r1, lsl #25
   166a0:	adc	r2, r2, r2
   166a4:	subcs	r0, r0, r1, lsl #25
   166a8:	cmp	r0, r1, lsl #24
   166ac:	adc	r2, r2, r2
   166b0:	subcs	r0, r0, r1, lsl #24
   166b4:	cmp	r0, r1, lsl #23
   166b8:	adc	r2, r2, r2
   166bc:	subcs	r0, r0, r1, lsl #23
   166c0:	cmp	r0, r1, lsl #22
   166c4:	adc	r2, r2, r2
   166c8:	subcs	r0, r0, r1, lsl #22
   166cc:	cmp	r0, r1, lsl #21
   166d0:	adc	r2, r2, r2
   166d4:	subcs	r0, r0, r1, lsl #21
   166d8:	cmp	r0, r1, lsl #20
   166dc:	adc	r2, r2, r2
   166e0:	subcs	r0, r0, r1, lsl #20
   166e4:	cmp	r0, r1, lsl #19
   166e8:	adc	r2, r2, r2
   166ec:	subcs	r0, r0, r1, lsl #19
   166f0:	cmp	r0, r1, lsl #18
   166f4:	adc	r2, r2, r2
   166f8:	subcs	r0, r0, r1, lsl #18
   166fc:	cmp	r0, r1, lsl #17
   16700:	adc	r2, r2, r2
   16704:	subcs	r0, r0, r1, lsl #17
   16708:	cmp	r0, r1, lsl #16
   1670c:	adc	r2, r2, r2
   16710:	subcs	r0, r0, r1, lsl #16
   16714:	cmp	r0, r1, lsl #15
   16718:	adc	r2, r2, r2
   1671c:	subcs	r0, r0, r1, lsl #15
   16720:	cmp	r0, r1, lsl #14
   16724:	adc	r2, r2, r2
   16728:	subcs	r0, r0, r1, lsl #14
   1672c:	cmp	r0, r1, lsl #13
   16730:	adc	r2, r2, r2
   16734:	subcs	r0, r0, r1, lsl #13
   16738:	cmp	r0, r1, lsl #12
   1673c:	adc	r2, r2, r2
   16740:	subcs	r0, r0, r1, lsl #12
   16744:	cmp	r0, r1, lsl #11
   16748:	adc	r2, r2, r2
   1674c:	subcs	r0, r0, r1, lsl #11
   16750:	cmp	r0, r1, lsl #10
   16754:	adc	r2, r2, r2
   16758:	subcs	r0, r0, r1, lsl #10
   1675c:	cmp	r0, r1, lsl #9
   16760:	adc	r2, r2, r2
   16764:	subcs	r0, r0, r1, lsl #9
   16768:	cmp	r0, r1, lsl #8
   1676c:	adc	r2, r2, r2
   16770:	subcs	r0, r0, r1, lsl #8
   16774:	cmp	r0, r1, lsl #7
   16778:	adc	r2, r2, r2
   1677c:	subcs	r0, r0, r1, lsl #7
   16780:	cmp	r0, r1, lsl #6
   16784:	adc	r2, r2, r2
   16788:	subcs	r0, r0, r1, lsl #6
   1678c:	cmp	r0, r1, lsl #5
   16790:	adc	r2, r2, r2
   16794:	subcs	r0, r0, r1, lsl #5
   16798:	cmp	r0, r1, lsl #4
   1679c:	adc	r2, r2, r2
   167a0:	subcs	r0, r0, r1, lsl #4
   167a4:	cmp	r0, r1, lsl #3
   167a8:	adc	r2, r2, r2
   167ac:	subcs	r0, r0, r1, lsl #3
   167b0:	cmp	r0, r1, lsl #2
   167b4:	adc	r2, r2, r2
   167b8:	subcs	r0, r0, r1, lsl #2
   167bc:	cmp	r0, r1, lsl #1
   167c0:	adc	r2, r2, r2
   167c4:	subcs	r0, r0, r1, lsl #1
   167c8:	cmp	r0, r1
   167cc:	adc	r2, r2, r2
   167d0:	subcs	r0, r0, r1
   167d4:	mov	r0, r2
   167d8:	bx	lr
   167dc:	moveq	r0, #1
   167e0:	movne	r0, #0
   167e4:	bx	lr
   167e8:	clz	r2, r1
   167ec:	rsb	r2, r2, #31
   167f0:	lsr	r0, r0, r2
   167f4:	bx	lr
   167f8:	cmp	r0, #0
   167fc:	mvnne	r0, #0
   16800:	b	16b74 <__assert_fail@plt+0x5c1c>
   16804:	cmp	r1, #0
   16808:	beq	167f8 <__assert_fail@plt+0x58a0>
   1680c:	push	{r0, r1, lr}
   16810:	bl	16618 <__assert_fail@plt+0x56c0>
   16814:	pop	{r1, r2, lr}
   16818:	mul	r3, r2, r0
   1681c:	sub	r1, r1, r3
   16820:	bx	lr
   16824:	cmp	r1, #0
   16828:	beq	16a34 <__assert_fail@plt+0x5adc>
   1682c:	eor	ip, r0, r1
   16830:	rsbmi	r1, r1, #0
   16834:	subs	r2, r1, #1
   16838:	beq	16a00 <__assert_fail@plt+0x5aa8>
   1683c:	movs	r3, r0
   16840:	rsbmi	r3, r0, #0
   16844:	cmp	r3, r1
   16848:	bls	16a0c <__assert_fail@plt+0x5ab4>
   1684c:	tst	r1, r2
   16850:	beq	16a1c <__assert_fail@plt+0x5ac4>
   16854:	clz	r2, r3
   16858:	clz	r0, r1
   1685c:	sub	r2, r0, r2
   16860:	rsbs	r2, r2, #31
   16864:	addne	r2, r2, r2, lsl #1
   16868:	mov	r0, #0
   1686c:	addne	pc, pc, r2, lsl #2
   16870:	nop			; (mov r0, r0)
   16874:	cmp	r3, r1, lsl #31
   16878:	adc	r0, r0, r0
   1687c:	subcs	r3, r3, r1, lsl #31
   16880:	cmp	r3, r1, lsl #30
   16884:	adc	r0, r0, r0
   16888:	subcs	r3, r3, r1, lsl #30
   1688c:	cmp	r3, r1, lsl #29
   16890:	adc	r0, r0, r0
   16894:	subcs	r3, r3, r1, lsl #29
   16898:	cmp	r3, r1, lsl #28
   1689c:	adc	r0, r0, r0
   168a0:	subcs	r3, r3, r1, lsl #28
   168a4:	cmp	r3, r1, lsl #27
   168a8:	adc	r0, r0, r0
   168ac:	subcs	r3, r3, r1, lsl #27
   168b0:	cmp	r3, r1, lsl #26
   168b4:	adc	r0, r0, r0
   168b8:	subcs	r3, r3, r1, lsl #26
   168bc:	cmp	r3, r1, lsl #25
   168c0:	adc	r0, r0, r0
   168c4:	subcs	r3, r3, r1, lsl #25
   168c8:	cmp	r3, r1, lsl #24
   168cc:	adc	r0, r0, r0
   168d0:	subcs	r3, r3, r1, lsl #24
   168d4:	cmp	r3, r1, lsl #23
   168d8:	adc	r0, r0, r0
   168dc:	subcs	r3, r3, r1, lsl #23
   168e0:	cmp	r3, r1, lsl #22
   168e4:	adc	r0, r0, r0
   168e8:	subcs	r3, r3, r1, lsl #22
   168ec:	cmp	r3, r1, lsl #21
   168f0:	adc	r0, r0, r0
   168f4:	subcs	r3, r3, r1, lsl #21
   168f8:	cmp	r3, r1, lsl #20
   168fc:	adc	r0, r0, r0
   16900:	subcs	r3, r3, r1, lsl #20
   16904:	cmp	r3, r1, lsl #19
   16908:	adc	r0, r0, r0
   1690c:	subcs	r3, r3, r1, lsl #19
   16910:	cmp	r3, r1, lsl #18
   16914:	adc	r0, r0, r0
   16918:	subcs	r3, r3, r1, lsl #18
   1691c:	cmp	r3, r1, lsl #17
   16920:	adc	r0, r0, r0
   16924:	subcs	r3, r3, r1, lsl #17
   16928:	cmp	r3, r1, lsl #16
   1692c:	adc	r0, r0, r0
   16930:	subcs	r3, r3, r1, lsl #16
   16934:	cmp	r3, r1, lsl #15
   16938:	adc	r0, r0, r0
   1693c:	subcs	r3, r3, r1, lsl #15
   16940:	cmp	r3, r1, lsl #14
   16944:	adc	r0, r0, r0
   16948:	subcs	r3, r3, r1, lsl #14
   1694c:	cmp	r3, r1, lsl #13
   16950:	adc	r0, r0, r0
   16954:	subcs	r3, r3, r1, lsl #13
   16958:	cmp	r3, r1, lsl #12
   1695c:	adc	r0, r0, r0
   16960:	subcs	r3, r3, r1, lsl #12
   16964:	cmp	r3, r1, lsl #11
   16968:	adc	r0, r0, r0
   1696c:	subcs	r3, r3, r1, lsl #11
   16970:	cmp	r3, r1, lsl #10
   16974:	adc	r0, r0, r0
   16978:	subcs	r3, r3, r1, lsl #10
   1697c:	cmp	r3, r1, lsl #9
   16980:	adc	r0, r0, r0
   16984:	subcs	r3, r3, r1, lsl #9
   16988:	cmp	r3, r1, lsl #8
   1698c:	adc	r0, r0, r0
   16990:	subcs	r3, r3, r1, lsl #8
   16994:	cmp	r3, r1, lsl #7
   16998:	adc	r0, r0, r0
   1699c:	subcs	r3, r3, r1, lsl #7
   169a0:	cmp	r3, r1, lsl #6
   169a4:	adc	r0, r0, r0
   169a8:	subcs	r3, r3, r1, lsl #6
   169ac:	cmp	r3, r1, lsl #5
   169b0:	adc	r0, r0, r0
   169b4:	subcs	r3, r3, r1, lsl #5
   169b8:	cmp	r3, r1, lsl #4
   169bc:	adc	r0, r0, r0
   169c0:	subcs	r3, r3, r1, lsl #4
   169c4:	cmp	r3, r1, lsl #3
   169c8:	adc	r0, r0, r0
   169cc:	subcs	r3, r3, r1, lsl #3
   169d0:	cmp	r3, r1, lsl #2
   169d4:	adc	r0, r0, r0
   169d8:	subcs	r3, r3, r1, lsl #2
   169dc:	cmp	r3, r1, lsl #1
   169e0:	adc	r0, r0, r0
   169e4:	subcs	r3, r3, r1, lsl #1
   169e8:	cmp	r3, r1
   169ec:	adc	r0, r0, r0
   169f0:	subcs	r3, r3, r1
   169f4:	cmp	ip, #0
   169f8:	rsbmi	r0, r0, #0
   169fc:	bx	lr
   16a00:	teq	ip, r0
   16a04:	rsbmi	r0, r0, #0
   16a08:	bx	lr
   16a0c:	movcc	r0, #0
   16a10:	asreq	r0, ip, #31
   16a14:	orreq	r0, r0, #1
   16a18:	bx	lr
   16a1c:	clz	r2, r1
   16a20:	rsb	r2, r2, #31
   16a24:	cmp	ip, #0
   16a28:	lsr	r0, r3, r2
   16a2c:	rsbmi	r0, r0, #0
   16a30:	bx	lr
   16a34:	cmp	r0, #0
   16a38:	mvngt	r0, #-2147483648	; 0x80000000
   16a3c:	movlt	r0, #-2147483648	; 0x80000000
   16a40:	b	16b74 <__assert_fail@plt+0x5c1c>
   16a44:	cmp	r1, #0
   16a48:	beq	16a34 <__assert_fail@plt+0x5adc>
   16a4c:	push	{r0, r1, lr}
   16a50:	bl	1682c <__assert_fail@plt+0x58d4>
   16a54:	pop	{r1, r2, lr}
   16a58:	mul	r3, r2, r0
   16a5c:	sub	r1, r1, r3
   16a60:	bx	lr
   16a64:	cmp	r3, #0
   16a68:	cmpeq	r2, #0
   16a6c:	bne	16a90 <__assert_fail@plt+0x5b38>
   16a70:	cmp	r1, #0
   16a74:	movlt	r1, #-2147483648	; 0x80000000
   16a78:	movlt	r0, #0
   16a7c:	blt	16a8c <__assert_fail@plt+0x5b34>
   16a80:	cmpeq	r0, #0
   16a84:	mvnne	r1, #-2147483648	; 0x80000000
   16a88:	mvnne	r0, #0
   16a8c:	b	16b74 <__assert_fail@plt+0x5c1c>
   16a90:	sub	sp, sp, #8
   16a94:	push	{sp, lr}
   16a98:	cmp	r1, #0
   16a9c:	blt	16abc <__assert_fail@plt+0x5b64>
   16aa0:	cmp	r3, #0
   16aa4:	blt	16af0 <__assert_fail@plt+0x5b98>
   16aa8:	bl	16b84 <__assert_fail@plt+0x5c2c>
   16aac:	ldr	lr, [sp, #4]
   16ab0:	add	sp, sp, #8
   16ab4:	pop	{r2, r3}
   16ab8:	bx	lr
   16abc:	rsbs	r0, r0, #0
   16ac0:	sbc	r1, r1, r1, lsl #1
   16ac4:	cmp	r3, #0
   16ac8:	blt	16b14 <__assert_fail@plt+0x5bbc>
   16acc:	bl	16b84 <__assert_fail@plt+0x5c2c>
   16ad0:	ldr	lr, [sp, #4]
   16ad4:	add	sp, sp, #8
   16ad8:	pop	{r2, r3}
   16adc:	rsbs	r0, r0, #0
   16ae0:	sbc	r1, r1, r1, lsl #1
   16ae4:	rsbs	r2, r2, #0
   16ae8:	sbc	r3, r3, r3, lsl #1
   16aec:	bx	lr
   16af0:	rsbs	r2, r2, #0
   16af4:	sbc	r3, r3, r3, lsl #1
   16af8:	bl	16b84 <__assert_fail@plt+0x5c2c>
   16afc:	ldr	lr, [sp, #4]
   16b00:	add	sp, sp, #8
   16b04:	pop	{r2, r3}
   16b08:	rsbs	r0, r0, #0
   16b0c:	sbc	r1, r1, r1, lsl #1
   16b10:	bx	lr
   16b14:	rsbs	r2, r2, #0
   16b18:	sbc	r3, r3, r3, lsl #1
   16b1c:	bl	16b84 <__assert_fail@plt+0x5c2c>
   16b20:	ldr	lr, [sp, #4]
   16b24:	add	sp, sp, #8
   16b28:	pop	{r2, r3}
   16b2c:	rsbs	r2, r2, #0
   16b30:	sbc	r3, r3, r3, lsl #1
   16b34:	bx	lr
   16b38:	cmp	r3, #0
   16b3c:	cmpeq	r2, #0
   16b40:	bne	16b58 <__assert_fail@plt+0x5c00>
   16b44:	cmp	r1, #0
   16b48:	cmpeq	r0, #0
   16b4c:	mvnne	r1, #0
   16b50:	mvnne	r0, #0
   16b54:	b	16b74 <__assert_fail@plt+0x5c1c>
   16b58:	sub	sp, sp, #8
   16b5c:	push	{sp, lr}
   16b60:	bl	16b84 <__assert_fail@plt+0x5c2c>
   16b64:	ldr	lr, [sp, #4]
   16b68:	add	sp, sp, #8
   16b6c:	pop	{r2, r3}
   16b70:	bx	lr
   16b74:	push	{r1, lr}
   16b78:	mov	r0, #8
   16b7c:	bl	10ce8 <raise@plt>
   16b80:	pop	{r1, pc}
   16b84:	cmp	r1, r3
   16b88:	push	{r4, r5, r6, r7, r8, r9, lr}
   16b8c:	cmpeq	r0, r2
   16b90:	mov	r4, r0
   16b94:	mov	r5, r1
   16b98:	ldr	r9, [sp, #28]
   16b9c:	movcc	r0, #0
   16ba0:	movcc	r1, #0
   16ba4:	bcc	16c9c <__assert_fail@plt+0x5d44>
   16ba8:	cmp	r3, #0
   16bac:	clzeq	ip, r2
   16bb0:	clzne	ip, r3
   16bb4:	addeq	ip, ip, #32
   16bb8:	cmp	r5, #0
   16bbc:	clzeq	r1, r4
   16bc0:	addeq	r1, r1, #32
   16bc4:	clzne	r1, r5
   16bc8:	sub	ip, ip, r1
   16bcc:	sub	lr, ip, #32
   16bd0:	lsl	r7, r3, ip
   16bd4:	rsb	r8, ip, #32
   16bd8:	orr	r7, r7, r2, lsl lr
   16bdc:	orr	r7, r7, r2, lsr r8
   16be0:	lsl	r6, r2, ip
   16be4:	cmp	r5, r7
   16be8:	cmpeq	r4, r6
   16bec:	movcc	r0, #0
   16bf0:	movcc	r1, #0
   16bf4:	bcc	16c10 <__assert_fail@plt+0x5cb8>
   16bf8:	mov	r3, #1
   16bfc:	subs	r4, r4, r6
   16c00:	lsl	r1, r3, lr
   16c04:	lsl	r0, r3, ip
   16c08:	orr	r1, r1, r3, lsr r8
   16c0c:	sbc	r5, r5, r7
   16c10:	cmp	ip, #0
   16c14:	beq	16c9c <__assert_fail@plt+0x5d44>
   16c18:	lsrs	r3, r7, #1
   16c1c:	rrx	r2, r6
   16c20:	mov	r6, ip
   16c24:	b	16c48 <__assert_fail@plt+0x5cf0>
   16c28:	subs	r4, r4, r2
   16c2c:	sbc	r5, r5, r3
   16c30:	adds	r4, r4, r4
   16c34:	adc	r5, r5, r5
   16c38:	adds	r4, r4, #1
   16c3c:	adc	r5, r5, #0
   16c40:	subs	r6, r6, #1
   16c44:	beq	16c64 <__assert_fail@plt+0x5d0c>
   16c48:	cmp	r5, r3
   16c4c:	cmpeq	r4, r2
   16c50:	bcs	16c28 <__assert_fail@plt+0x5cd0>
   16c54:	adds	r4, r4, r4
   16c58:	adc	r5, r5, r5
   16c5c:	subs	r6, r6, #1
   16c60:	bne	16c48 <__assert_fail@plt+0x5cf0>
   16c64:	lsr	r6, r4, ip
   16c68:	lsr	r7, r5, ip
   16c6c:	orr	r6, r6, r5, lsl r8
   16c70:	adds	r2, r0, r4
   16c74:	orr	r6, r6, r5, lsr lr
   16c78:	adc	r3, r1, r5
   16c7c:	lsl	r1, r7, ip
   16c80:	orr	r1, r1, r6, lsl lr
   16c84:	lsl	r0, r6, ip
   16c88:	orr	r1, r1, r6, lsr r8
   16c8c:	subs	r0, r2, r0
   16c90:	mov	r4, r6
   16c94:	mov	r5, r7
   16c98:	sbc	r1, r3, r1
   16c9c:	cmp	r9, #0
   16ca0:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   16ca4:	strd	r4, [r9]
   16ca8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16cac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16cb0:	mov	r7, r0
   16cb4:	ldr	r6, [pc, #72]	; 16d04 <__assert_fail@plt+0x5dac>
   16cb8:	ldr	r5, [pc, #72]	; 16d08 <__assert_fail@plt+0x5db0>
   16cbc:	add	r6, pc, r6
   16cc0:	add	r5, pc, r5
   16cc4:	sub	r6, r6, r5
   16cc8:	mov	r8, r1
   16ccc:	mov	r9, r2
   16cd0:	bl	10cb0 <calloc@plt-0x20>
   16cd4:	asrs	r6, r6, #2
   16cd8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16cdc:	mov	r4, #0
   16ce0:	add	r4, r4, #1
   16ce4:	ldr	r3, [r5], #4
   16ce8:	mov	r2, r9
   16cec:	mov	r1, r8
   16cf0:	mov	r0, r7
   16cf4:	blx	r3
   16cf8:	cmp	r6, r4
   16cfc:	bne	16ce0 <__assert_fail@plt+0x5d88>
   16d00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16d04:	andeq	r1, r1, ip, asr #4
   16d08:	andeq	r1, r1, r4, asr #4
   16d0c:	bx	lr
   16d10:	ldr	r3, [pc, #12]	; 16d24 <__assert_fail@plt+0x5dcc>
   16d14:	mov	r1, #0
   16d18:	add	r3, pc, r3
   16d1c:	ldr	r2, [r3]
   16d20:	b	10e98 <__cxa_atexit@plt>
   16d24:	ldrdeq	r1, [r1], -r0

Disassembly of section .fini:

00016d28 <.fini>:
   16d28:	push	{r3, lr}
   16d2c:	pop	{r3, pc}
