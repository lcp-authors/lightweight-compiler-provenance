
../repos/coreutils/src/du:     file format elf32-littlearm


Disassembly of section .init:

0001197c <.init>:
   1197c:	push	{r3, lr}
   11980:	bl	11edc <__assert_fail@plt+0x48>
   11984:	pop	{r3, pc}

Disassembly of section .plt:

00011988 <pthread_mutex_unlock@plt-0x14>:
   11988:	push	{lr}		; (str lr, [sp, #-4]!)
   1198c:	ldr	lr, [pc, #4]	; 11998 <pthread_mutex_unlock@plt-0x4>
   11990:	add	lr, pc, lr
   11994:	ldr	pc, [lr, #8]!
   11998:	andeq	r9, r3, r8, ror #12

0001199c <pthread_mutex_unlock@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #233472	; 0x39000
   119a4:	ldr	pc, [ip, #1640]!	; 0x668

000119a8 <fstatfs64@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #233472	; 0x39000
   119b0:	ldr	pc, [ip, #1632]!	; 0x660

000119b4 <calloc@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #233472	; 0x39000
   119bc:	ldr	pc, [ip, #1624]!	; 0x658

000119c0 <fputs_unlocked@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #233472	; 0x39000
   119c8:	ldr	pc, [ip, #1616]!	; 0x650

000119cc <wctype@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #233472	; 0x39000
   119d4:	ldr	pc, [ip, #1608]!	; 0x648

000119d8 <raise@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #233472	; 0x39000
   119e0:	ldr	pc, [ip, #1600]!	; 0x640

000119e4 <wcrtomb@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #233472	; 0x39000
   119ec:	ldr	pc, [ip, #1592]!	; 0x638

000119f0 <gmtime_r@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #233472	; 0x39000
   119f8:	ldr	pc, [ip, #1584]!	; 0x630

000119fc <__getdelim@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #233472	; 0x39000
   11a04:	ldr	pc, [ip, #1576]!	; 0x628

00011a08 <iswctype@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #233472	; 0x39000
   11a10:	ldr	pc, [ip, #1568]!	; 0x620

00011a14 <strcmp@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #233472	; 0x39000
   11a1c:	ldr	pc, [ip, #1560]!	; 0x618

00011a20 <pthread_mutex_destroy@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #233472	; 0x39000
   11a28:	ldr	pc, [ip, #1552]!	; 0x610

00011a2c <mktime@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #233472	; 0x39000
   11a34:	ldr	pc, [ip, #1544]!	; 0x608

00011a38 <fflush@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #233472	; 0x39000
   11a40:	ldr	pc, [ip, #1536]!	; 0x600

00011a44 <wcwidth@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #233472	; 0x39000
   11a4c:	ldr	pc, [ip, #1528]!	; 0x5f8

00011a50 <memmove@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #233472	; 0x39000
   11a58:	ldr	pc, [ip, #1520]!	; 0x5f0

00011a5c <free@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #233472	; 0x39000
   11a64:	ldr	pc, [ip, #1512]!	; 0x5e8

00011a68 <pthread_mutex_lock@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #233472	; 0x39000
   11a70:	ldr	pc, [ip, #1504]!	; 0x5e0

00011a74 <ferror@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #233472	; 0x39000
   11a7c:	ldr	pc, [ip, #1496]!	; 0x5d8

00011a80 <_exit@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #233472	; 0x39000
   11a88:	ldr	pc, [ip, #1488]!	; 0x5d0

00011a8c <memcpy@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #233472	; 0x39000
   11a94:	ldr	pc, [ip, #1480]!	; 0x5c8

00011a98 <pthread_mutex_init@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #233472	; 0x39000
   11aa0:	ldr	pc, [ip, #1472]!	; 0x5c0

00011aa4 <__strtoull_internal@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #233472	; 0x39000
   11aac:	ldr	pc, [ip, #1464]!	; 0x5b8

00011ab0 <towlower@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #233472	; 0x39000
   11ab8:	ldr	pc, [ip, #1456]!	; 0x5b0

00011abc <mbsinit@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #233472	; 0x39000
   11ac4:	ldr	pc, [ip, #1448]!	; 0x5a8

00011ac8 <memcmp@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #233472	; 0x39000
   11ad0:	ldr	pc, [ip, #1440]!	; 0x5a0

00011ad4 <dcgettext@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #233472	; 0x39000
   11adc:	ldr	pc, [ip, #1432]!	; 0x598

00011ae0 <dup2@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #233472	; 0x39000
   11ae8:	ldr	pc, [ip, #1424]!	; 0x590

00011aec <realloc@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #233472	; 0x39000
   11af4:	ldr	pc, [ip, #1416]!	; 0x588

00011af8 <localtime_r@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #233472	; 0x39000
   11b00:	ldr	pc, [ip, #1408]!	; 0x580

00011b04 <textdomain@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #233472	; 0x39000
   11b0c:	ldr	pc, [ip, #1400]!	; 0x578

00011b10 <iswcntrl@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #233472	; 0x39000
   11b18:	ldr	pc, [ip, #1392]!	; 0x570

00011b1c <__fxstatat64@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #233472	; 0x39000
   11b24:	ldr	pc, [ip, #1384]!	; 0x568

00011b28 <fflush_unlocked@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #233472	; 0x39000
   11b30:	ldr	pc, [ip, #1376]!	; 0x560

00011b34 <iswprint@plt>:
   11b34:	add	ip, pc, #0, 12
   11b38:	add	ip, ip, #233472	; 0x39000
   11b3c:	ldr	pc, [ip, #1368]!	; 0x558

00011b40 <tzset@plt>:
   11b40:	add	ip, pc, #0, 12
   11b44:	add	ip, ip, #233472	; 0x39000
   11b48:	ldr	pc, [ip, #1360]!	; 0x550

00011b4c <__fxstat64@plt>:
   11b4c:	add	ip, pc, #0, 12
   11b50:	add	ip, ip, #233472	; 0x39000
   11b54:	ldr	pc, [ip, #1352]!	; 0x548

00011b58 <fwrite@plt>:
   11b58:	add	ip, pc, #0, 12
   11b5c:	add	ip, ip, #233472	; 0x39000
   11b60:	ldr	pc, [ip, #1344]!	; 0x540

00011b64 <lseek64@plt>:
   11b64:	add	ip, pc, #0, 12
   11b68:	add	ip, ip, #233472	; 0x39000
   11b6c:	ldr	pc, [ip, #1336]!	; 0x538

00011b70 <__ctype_get_mb_cur_max@plt>:
   11b70:	add	ip, pc, #0, 12
   11b74:	add	ip, ip, #233472	; 0x39000
   11b78:	ldr	pc, [ip, #1328]!	; 0x530

00011b7c <hasmntopt@plt>:
   11b7c:	add	ip, pc, #0, 12
   11b80:	add	ip, ip, #233472	; 0x39000
   11b84:	ldr	pc, [ip, #1320]!	; 0x528

00011b88 <strcpy@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #233472	; 0x39000
   11b90:	ldr	pc, [ip, #1312]!	; 0x520

00011b94 <__fpending@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #233472	; 0x39000
   11b9c:	ldr	pc, [ip, #1304]!	; 0x518

00011ba0 <mbrtowc@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #233472	; 0x39000
   11ba8:	ldr	pc, [ip, #1296]!	; 0x510

00011bac <error@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #233472	; 0x39000
   11bb4:	ldr	pc, [ip, #1288]!	; 0x508

00011bb8 <getmntent@plt>:
   11bb8:	add	ip, pc, #0, 12
   11bbc:	add	ip, ip, #233472	; 0x39000
   11bc0:	ldr	pc, [ip, #1280]!	; 0x500

00011bc4 <fnmatch@plt>:
   11bc4:	add	ip, pc, #0, 12
   11bc8:	add	ip, ip, #233472	; 0x39000
   11bcc:	ldr	pc, [ip, #1272]!	; 0x4f8

00011bd0 <open64@plt>:
   11bd0:	add	ip, pc, #0, 12
   11bd4:	add	ip, ip, #233472	; 0x39000
   11bd8:	ldr	pc, [ip, #1264]!	; 0x4f0

00011bdc <getenv@plt>:
   11bdc:	add	ip, pc, #0, 12
   11be0:	add	ip, ip, #233472	; 0x39000
   11be4:	ldr	pc, [ip, #1256]!	; 0x4e8

00011be8 <malloc@plt>:
   11be8:	add	ip, pc, #0, 12
   11bec:	add	ip, ip, #233472	; 0x39000
   11bf0:	ldr	pc, [ip, #1248]!	; 0x4e0

00011bf4 <__libc_start_main@plt>:
   11bf4:	add	ip, pc, #0, 12
   11bf8:	add	ip, ip, #233472	; 0x39000
   11bfc:	ldr	pc, [ip, #1240]!	; 0x4d8

00011c00 <strftime@plt>:
   11c00:	add	ip, pc, #0, 12
   11c04:	add	ip, ip, #233472	; 0x39000
   11c08:	ldr	pc, [ip, #1232]!	; 0x4d0

00011c0c <__freading@plt>:
   11c0c:	add	ip, pc, #0, 12
   11c10:	add	ip, ip, #233472	; 0x39000
   11c14:	ldr	pc, [ip, #1224]!	; 0x4c8

00011c18 <__ctype_tolower_loc@plt>:
   11c18:	add	ip, pc, #0, 12
   11c1c:	add	ip, ip, #233472	; 0x39000
   11c20:	ldr	pc, [ip, #1216]!	; 0x4c0

00011c24 <__ctype_toupper_loc@plt>:
   11c24:	add	ip, pc, #0, 12
   11c28:	add	ip, ip, #233472	; 0x39000
   11c2c:	ldr	pc, [ip, #1208]!	; 0x4b8

00011c30 <__gmon_start__@plt>:
   11c30:	add	ip, pc, #0, 12
   11c34:	add	ip, ip, #233472	; 0x39000
   11c38:	ldr	pc, [ip, #1200]!	; 0x4b0

00011c3c <freopen64@plt>:
   11c3c:	add	ip, pc, #0, 12
   11c40:	add	ip, ip, #233472	; 0x39000
   11c44:	ldr	pc, [ip, #1192]!	; 0x4a8

00011c48 <getopt_long@plt>:
   11c48:	add	ip, pc, #0, 12
   11c4c:	add	ip, ip, #233472	; 0x39000
   11c50:	ldr	pc, [ip, #1184]!	; 0x4a0

00011c54 <__ctype_b_loc@plt>:
   11c54:	add	ip, pc, #0, 12
   11c58:	add	ip, ip, #233472	; 0x39000
   11c5c:	ldr	pc, [ip, #1176]!	; 0x498

00011c60 <exit@plt>:
   11c60:	add	ip, pc, #0, 12
   11c64:	add	ip, ip, #233472	; 0x39000
   11c68:	ldr	pc, [ip, #1168]!	; 0x490

00011c6c <feof@plt>:
   11c6c:	add	ip, pc, #0, 12
   11c70:	add	ip, ip, #233472	; 0x39000
   11c74:	ldr	pc, [ip, #1160]!	; 0x488

00011c78 <strlen@plt>:
   11c78:	add	ip, pc, #0, 12
   11c7c:	add	ip, ip, #233472	; 0x39000
   11c80:	ldr	pc, [ip, #1152]!	; 0x480

00011c84 <strchr@plt>:
   11c84:	add	ip, pc, #0, 12
   11c88:	add	ip, ip, #233472	; 0x39000
   11c8c:	ldr	pc, [ip, #1144]!	; 0x478

00011c90 <setenv@plt>:
   11c90:	add	ip, pc, #0, 12
   11c94:	add	ip, ip, #233472	; 0x39000
   11c98:	ldr	pc, [ip, #1136]!	; 0x470

00011c9c <openat64@plt>:
   11c9c:	add	ip, pc, #0, 12
   11ca0:	add	ip, ip, #233472	; 0x39000
   11ca4:	ldr	pc, [ip, #1128]!	; 0x468

00011ca8 <__errno_location@plt>:
   11ca8:	add	ip, pc, #0, 12
   11cac:	add	ip, ip, #233472	; 0x39000
   11cb0:	ldr	pc, [ip, #1120]!	; 0x460

00011cb4 <iswalnum@plt>:
   11cb4:	add	ip, pc, #0, 12
   11cb8:	add	ip, ip, #233472	; 0x39000
   11cbc:	ldr	pc, [ip, #1112]!	; 0x458

00011cc0 <__sprintf_chk@plt>:
   11cc0:	add	ip, pc, #0, 12
   11cc4:	add	ip, ip, #233472	; 0x39000
   11cc8:	ldr	pc, [ip, #1104]!	; 0x450

00011ccc <__cxa_atexit@plt>:
   11ccc:	add	ip, pc, #0, 12
   11cd0:	add	ip, ip, #233472	; 0x39000
   11cd4:	ldr	pc, [ip, #1096]!	; 0x448

00011cd8 <memset@plt>:
   11cd8:	add	ip, pc, #0, 12
   11cdc:	add	ip, ip, #233472	; 0x39000
   11ce0:	ldr	pc, [ip, #1088]!	; 0x440

00011ce4 <btowc@plt>:
   11ce4:	add	ip, pc, #0, 12
   11ce8:	add	ip, ip, #233472	; 0x39000
   11cec:	ldr	pc, [ip, #1080]!	; 0x438

00011cf0 <__printf_chk@plt>:
   11cf0:	add	ip, pc, #0, 12
   11cf4:	add	ip, ip, #233472	; 0x39000
   11cf8:	ldr	pc, [ip, #1072]!	; 0x430

00011cfc <fileno@plt>:
   11cfc:	add	ip, pc, #0, 12
   11d00:	add	ip, ip, #233472	; 0x39000
   11d04:	ldr	pc, [ip, #1064]!	; 0x428

00011d08 <__fprintf_chk@plt>:
   11d08:	add	ip, pc, #0, 12
   11d0c:	add	ip, ip, #233472	; 0x39000
   11d10:	ldr	pc, [ip, #1056]!	; 0x420

00011d14 <memchr@plt>:
   11d14:	add	ip, pc, #0, 12
   11d18:	add	ip, ip, #233472	; 0x39000
   11d1c:	ldr	pc, [ip, #1048]!	; 0x418

00011d20 <fclose@plt>:
   11d20:	add	ip, pc, #0, 12
   11d24:	add	ip, ip, #233472	; 0x39000
   11d28:	ldr	pc, [ip, #1040]!	; 0x410

00011d2c <fseeko64@plt>:
   11d2c:	add	ip, pc, #0, 12
   11d30:	add	ip, ip, #233472	; 0x39000
   11d34:	ldr	pc, [ip, #1032]!	; 0x408

00011d38 <endmntent@plt>:
   11d38:	add	ip, pc, #0, 12
   11d3c:	add	ip, ip, #233472	; 0x39000
   11d40:	ldr	pc, [ip, #1024]!	; 0x400

00011d44 <fcntl64@plt>:
   11d44:	add	ip, pc, #0, 12
   11d48:	add	ip, ip, #233472	; 0x39000
   11d4c:	ldr	pc, [ip, #1016]!	; 0x3f8

00011d50 <__overflow@plt>:
   11d50:	add	ip, pc, #0, 12
   11d54:	add	ip, ip, #233472	; 0x39000
   11d58:	ldr	pc, [ip, #1008]!	; 0x3f0

00011d5c <setlocale@plt>:
   11d5c:	add	ip, pc, #0, 12
   11d60:	add	ip, ip, #233472	; 0x39000
   11d64:	ldr	pc, [ip, #1000]!	; 0x3e8

00011d68 <strrchr@plt>:
   11d68:	add	ip, pc, #0, 12
   11d6c:	add	ip, ip, #233472	; 0x39000
   11d70:	ldr	pc, [ip, #992]!	; 0x3e0

00011d74 <nl_langinfo@plt>:
   11d74:	add	ip, pc, #0, 12
   11d78:	add	ip, ip, #233472	; 0x39000
   11d7c:	ldr	pc, [ip, #984]!	; 0x3d8

00011d80 <fputc@plt>:
   11d80:	add	ip, pc, #0, 12
   11d84:	add	ip, ip, #233472	; 0x39000
   11d88:	ldr	pc, [ip, #976]!	; 0x3d0

00011d8c <sscanf@plt>:
   11d8c:	add	ip, pc, #0, 12
   11d90:	add	ip, ip, #233472	; 0x39000
   11d94:	ldr	pc, [ip, #968]!	; 0x3c8

00011d98 <localeconv@plt>:
   11d98:	add	ip, pc, #0, 12
   11d9c:	add	ip, ip, #233472	; 0x39000
   11da0:	ldr	pc, [ip, #960]!	; 0x3c0

00011da4 <readdir64@plt>:
   11da4:	add	ip, pc, #0, 12
   11da8:	add	ip, ip, #233472	; 0x39000
   11dac:	ldr	pc, [ip, #952]!	; 0x3b8

00011db0 <fdopendir@plt>:
   11db0:	add	ip, pc, #0, 12
   11db4:	add	ip, ip, #233472	; 0x39000
   11db8:	ldr	pc, [ip, #944]!	; 0x3b0

00011dbc <timegm@plt>:
   11dbc:	add	ip, pc, #0, 12
   11dc0:	add	ip, ip, #233472	; 0x39000
   11dc4:	ldr	pc, [ip, #936]!	; 0x3a8

00011dc8 <dirfd@plt>:
   11dc8:	add	ip, pc, #0, 12
   11dcc:	add	ip, ip, #233472	; 0x39000
   11dd0:	ldr	pc, [ip, #928]!	; 0x3a0

00011dd4 <fchdir@plt>:
   11dd4:	add	ip, pc, #0, 12
   11dd8:	add	ip, ip, #233472	; 0x39000
   11ddc:	ldr	pc, [ip, #920]!	; 0x398

00011de0 <__strtoll_internal@plt>:
   11de0:	add	ip, pc, #0, 12
   11de4:	add	ip, ip, #233472	; 0x39000
   11de8:	ldr	pc, [ip, #912]!	; 0x390

00011dec <fopen64@plt>:
   11dec:	add	ip, pc, #0, 12
   11df0:	add	ip, ip, #233472	; 0x39000
   11df4:	ldr	pc, [ip, #904]!	; 0x388

00011df8 <qsort@plt>:
   11df8:	add	ip, pc, #0, 12
   11dfc:	add	ip, ip, #233472	; 0x39000
   11e00:	ldr	pc, [ip, #896]!	; 0x380

00011e04 <setmntent@plt>:
   11e04:	add	ip, pc, #0, 12
   11e08:	add	ip, ip, #233472	; 0x39000
   11e0c:	ldr	pc, [ip, #888]!	; 0x378

00011e10 <bindtextdomain@plt>:
   11e10:	add	ip, pc, #0, 12
   11e14:	add	ip, ip, #233472	; 0x39000
   11e18:	ldr	pc, [ip, #880]!	; 0x370

00011e1c <getdelim@plt>:
   11e1c:	add	ip, pc, #0, 12
   11e20:	add	ip, ip, #233472	; 0x39000
   11e24:	ldr	pc, [ip, #872]!	; 0x368

00011e28 <__xstat64@plt>:
   11e28:	add	ip, pc, #0, 12
   11e2c:	add	ip, ip, #233472	; 0x39000
   11e30:	ldr	pc, [ip, #864]!	; 0x360

00011e34 <unsetenv@plt>:
   11e34:	add	ip, pc, #0, 12
   11e38:	add	ip, ip, #233472	; 0x39000
   11e3c:	ldr	pc, [ip, #856]!	; 0x358

00011e40 <towupper@plt>:
   11e40:	add	ip, pc, #0, 12
   11e44:	add	ip, ip, #233472	; 0x39000
   11e48:	ldr	pc, [ip, #848]!	; 0x350

00011e4c <strncmp@plt>:
   11e4c:	add	ip, pc, #0, 12
   11e50:	add	ip, ip, #233472	; 0x39000
   11e54:	ldr	pc, [ip, #840]!	; 0x348

00011e58 <abort@plt>:
   11e58:	add	ip, pc, #0, 12
   11e5c:	add	ip, ip, #233472	; 0x39000
   11e60:	ldr	pc, [ip, #832]!	; 0x340

00011e64 <getc@plt>:
   11e64:	add	ip, pc, #0, 12
   11e68:	add	ip, ip, #233472	; 0x39000
   11e6c:	ldr	pc, [ip, #824]!	; 0x338

00011e70 <close@plt>:
   11e70:	add	ip, pc, #0, 12
   11e74:	add	ip, ip, #233472	; 0x39000
   11e78:	ldr	pc, [ip, #816]!	; 0x330

00011e7c <__lxstat64@plt>:
   11e7c:	add	ip, pc, #0, 12
   11e80:	add	ip, ip, #233472	; 0x39000
   11e84:	ldr	pc, [ip, #808]!	; 0x328

00011e88 <closedir@plt>:
   11e88:	add	ip, pc, #0, 12
   11e8c:	add	ip, ip, #233472	; 0x39000
   11e90:	ldr	pc, [ip, #800]!	; 0x320

00011e94 <__assert_fail@plt>:
   11e94:	add	ip, pc, #0, 12
   11e98:	add	ip, ip, #233472	; 0x39000
   11e9c:	ldr	pc, [ip, #792]!	; 0x318

Disassembly of section .text:

00011ea0 <.text>:
   11ea0:	mov	fp, #0
   11ea4:	mov	lr, #0
   11ea8:	pop	{r1}		; (ldr r1, [sp], #4)
   11eac:	mov	r2, sp
   11eb0:	push	{r2}		; (str r2, [sp, #-4]!)
   11eb4:	push	{r0}		; (str r0, [sp, #-4]!)
   11eb8:	ldr	ip, [pc, #16]	; 11ed0 <__assert_fail@plt+0x3c>
   11ebc:	push	{ip}		; (str ip, [sp, #-4]!)
   11ec0:	ldr	r0, [pc, #12]	; 11ed4 <__assert_fail@plt+0x40>
   11ec4:	ldr	r3, [pc, #12]	; 11ed8 <__assert_fail@plt+0x44>
   11ec8:	bl	11bf4 <__libc_start_main@plt>
   11ecc:	bl	11e58 <abort@plt>
   11ed0:	muleq	r3, r0, r9
   11ed4:	strdeq	r2, [r1], -ip
   11ed8:	andeq	r8, r3, r0, lsr r9
   11edc:	ldr	r3, [pc, #20]	; 11ef8 <__assert_fail@plt+0x64>
   11ee0:	ldr	r2, [pc, #20]	; 11efc <__assert_fail@plt+0x68>
   11ee4:	add	r3, pc, r3
   11ee8:	ldr	r2, [r3, r2]
   11eec:	cmp	r2, #0
   11ef0:	bxeq	lr
   11ef4:	b	11c30 <__gmon_start__@plt>
   11ef8:	andeq	r9, r3, r4, lsl r1
   11efc:			; <UNDEFINED> instruction: 0x000001b8
   11f00:	ldr	r0, [pc, #24]	; 11f20 <__assert_fail@plt+0x8c>
   11f04:	ldr	r3, [pc, #24]	; 11f24 <__assert_fail@plt+0x90>
   11f08:	cmp	r3, r0
   11f0c:	bxeq	lr
   11f10:	ldr	r3, [pc, #16]	; 11f28 <__assert_fail@plt+0x94>
   11f14:	cmp	r3, #0
   11f18:	bxeq	lr
   11f1c:	bx	r3
   11f20:	andeq	fp, r4, r8, lsl r2
   11f24:	andeq	fp, r4, r8, lsl r2
   11f28:	andeq	r0, r0, r0
   11f2c:	ldr	r0, [pc, #36]	; 11f58 <__assert_fail@plt+0xc4>
   11f30:	ldr	r1, [pc, #36]	; 11f5c <__assert_fail@plt+0xc8>
   11f34:	sub	r1, r1, r0
   11f38:	asr	r1, r1, #2
   11f3c:	add	r1, r1, r1, lsr #31
   11f40:	asrs	r1, r1, #1
   11f44:	bxeq	lr
   11f48:	ldr	r3, [pc, #16]	; 11f60 <__assert_fail@plt+0xcc>
   11f4c:	cmp	r3, #0
   11f50:	bxeq	lr
   11f54:	bx	r3
   11f58:	andeq	fp, r4, r8, lsl r2
   11f5c:	andeq	fp, r4, r8, lsl r2
   11f60:	andeq	r0, r0, r0
   11f64:	push	{r4, lr}
   11f68:	ldr	r4, [pc, #24]	; 11f88 <__assert_fail@plt+0xf4>
   11f6c:	ldrb	r3, [r4]
   11f70:	cmp	r3, #0
   11f74:	popne	{r4, pc}
   11f78:	bl	11f00 <__assert_fail@plt+0x6c>
   11f7c:	mov	r3, #1
   11f80:	strb	r3, [r4]
   11f84:	pop	{r4, pc}
   11f88:	andeq	fp, r4, ip, lsr r2
   11f8c:	b	11f2c <__assert_fail@plt+0x98>
   11f90:	push	{fp, lr}
   11f94:	mov	fp, sp
   11f98:	sub	sp, sp, #56	; 0x38
   11f9c:	mov	r4, r0
   11fa0:	cmp	r0, #0
   11fa4:	bne	122b8 <__assert_fail@plt+0x424>
   11fa8:	movw	r1, #35307	; 0x89eb
   11fac:	mov	r0, #0
   11fb0:	mov	r2, #5
   11fb4:	movt	r1, #3
   11fb8:	bl	11ad4 <dcgettext@plt>
   11fbc:	mov	r1, r0
   11fc0:	movw	r0, #45744	; 0xb2b0
   11fc4:	movt	r0, #4
   11fc8:	ldr	r2, [r0]
   11fcc:	mov	r0, #1
   11fd0:	mov	r3, r2
   11fd4:	bl	11cf0 <__printf_chk@plt>
   11fd8:	movw	r1, #35378	; 0x8a32
   11fdc:	mov	r0, #0
   11fe0:	mov	r2, #5
   11fe4:	movt	r1, #3
   11fe8:	bl	11ad4 <dcgettext@plt>
   11fec:	movw	r7, #45620	; 0xb234
   11ff0:	movt	r7, #4
   11ff4:	ldr	r1, [r7]
   11ff8:	bl	119c0 <fputs_unlocked@plt>
   11ffc:	movw	r1, #39243	; 0x994b
   12000:	mov	r0, #0
   12004:	mov	r2, #5
   12008:	movt	r1, #3
   1200c:	bl	11ad4 <dcgettext@plt>
   12010:	ldr	r1, [r7]
   12014:	bl	119c0 <fputs_unlocked@plt>
   12018:	movw	r1, #35452	; 0x8a7c
   1201c:	mov	r0, #0
   12020:	mov	r2, #5
   12024:	movt	r1, #3
   12028:	bl	11ad4 <dcgettext@plt>
   1202c:	ldr	r1, [r7]
   12030:	bl	119c0 <fputs_unlocked@plt>
   12034:	movw	r1, #35894	; 0x8c36
   12038:	mov	r0, #0
   1203c:	mov	r2, #5
   12040:	movt	r1, #3
   12044:	bl	11ad4 <dcgettext@plt>
   12048:	ldr	r1, [r7]
   1204c:	bl	119c0 <fputs_unlocked@plt>
   12050:	movw	r1, #36586	; 0x8eea
   12054:	mov	r0, #0
   12058:	mov	r2, #5
   1205c:	movt	r1, #3
   12060:	bl	11ad4 <dcgettext@plt>
   12064:	ldr	r1, [r7]
   12068:	bl	119c0 <fputs_unlocked@plt>
   1206c:	movw	r1, #37005	; 0x908d
   12070:	mov	r0, #0
   12074:	mov	r2, #5
   12078:	movt	r1, #3
   1207c:	bl	11ad4 <dcgettext@plt>
   12080:	ldr	r1, [r7]
   12084:	bl	119c0 <fputs_unlocked@plt>
   12088:	movw	r1, #37213	; 0x915d
   1208c:	mov	r0, #0
   12090:	mov	r2, #5
   12094:	movt	r1, #3
   12098:	bl	11ad4 <dcgettext@plt>
   1209c:	ldr	r1, [r7]
   120a0:	bl	119c0 <fputs_unlocked@plt>
   120a4:	movw	r1, #37498	; 0x927a
   120a8:	mov	r0, #0
   120ac:	mov	r2, #5
   120b0:	movt	r1, #3
   120b4:	bl	11ad4 <dcgettext@plt>
   120b8:	ldr	r1, [r7]
   120bc:	bl	119c0 <fputs_unlocked@plt>
   120c0:	movw	r1, #38109	; 0x94dd
   120c4:	mov	r0, #0
   120c8:	mov	r2, #5
   120cc:	movt	r1, #3
   120d0:	bl	11ad4 <dcgettext@plt>
   120d4:	ldr	r1, [r7]
   120d8:	bl	119c0 <fputs_unlocked@plt>
   120dc:	movw	r1, #38312	; 0x95a8
   120e0:	mov	r0, #0
   120e4:	mov	r2, #5
   120e8:	movt	r1, #3
   120ec:	bl	11ad4 <dcgettext@plt>
   120f0:	ldr	r1, [r7]
   120f4:	bl	119c0 <fputs_unlocked@plt>
   120f8:	movw	r1, #38357	; 0x95d5
   120fc:	mov	r0, #0
   12100:	mov	r2, #5
   12104:	movt	r1, #3
   12108:	bl	11ad4 <dcgettext@plt>
   1210c:	ldr	r1, [r7]
   12110:	bl	119c0 <fputs_unlocked@plt>
   12114:	movw	r1, #39318	; 0x9996
   12118:	mov	r0, #0
   1211c:	mov	r2, #5
   12120:	movt	r1, #3
   12124:	bl	11ad4 <dcgettext@plt>
   12128:	movw	r2, #38411	; 0x960b
   1212c:	mov	r1, r0
   12130:	mov	r0, #1
   12134:	movt	r2, #3
   12138:	bl	11cf0 <__printf_chk@plt>
   1213c:	movw	r1, #39541	; 0x9a75
   12140:	mov	r0, #0
   12144:	mov	r2, #5
   12148:	movt	r1, #3
   1214c:	bl	11ad4 <dcgettext@plt>
   12150:	ldr	r1, [r7]
   12154:	bl	119c0 <fputs_unlocked@plt>
   12158:	movw	r0, #41176	; 0xa0d8
   1215c:	mov	r2, #48	; 0x30
   12160:	mov	r6, sp
   12164:	movw	r5, #38414	; 0x960e
   12168:	movt	r0, #3
   1216c:	movt	r5, #3
   12170:	add	r1, r0, #32
   12174:	add	r3, r0, #16
   12178:	vld1.64	{d18-d19}, [r0], r2
   1217c:	vld1.64	{d16-d17}, [r1]
   12180:	vld1.64	{d20-d21}, [r3]
   12184:	add	r1, r6, #32
   12188:	vldr	d22, [r0]
   1218c:	add	r0, r6, #16
   12190:	vst1.64	{d16-d17}, [r1]
   12194:	movw	r1, #39753	; 0x9b49
   12198:	vst1.64	{d20-d21}, [r0]
   1219c:	mov	r0, r6
   121a0:	vst1.64	{d18-d19}, [r0], r2
   121a4:	movt	r1, #3
   121a8:	vstr	d22, [r0]
   121ac:	mov	r0, r5
   121b0:	bl	11a14 <strcmp@plt>
   121b4:	cmp	r0, #0
   121b8:	ldrne	r1, [r6, #8]!
   121bc:	cmpne	r1, #0
   121c0:	bne	121ac <__assert_fail@plt+0x318>
   121c4:	ldr	r6, [r6, #4]
   121c8:	movw	r1, #39848	; 0x9ba8
   121cc:	mov	r0, #0
   121d0:	mov	r2, #5
   121d4:	movt	r1, #3
   121d8:	bl	11ad4 <dcgettext@plt>
   121dc:	movw	r2, #38560	; 0x96a0
   121e0:	movw	r3, #39871	; 0x9bbf
   121e4:	mov	r1, r0
   121e8:	mov	r0, #1
   121ec:	movt	r2, #3
   121f0:	movt	r3, #3
   121f4:	bl	11cf0 <__printf_chk@plt>
   121f8:	cmp	r6, #0
   121fc:	mov	r0, #5
   12200:	mov	r1, #0
   12204:	moveq	r6, r5
   12208:	bl	11d5c <setlocale@plt>
   1220c:	cmp	r0, #0
   12210:	beq	12248 <__assert_fail@plt+0x3b4>
   12214:	movw	r1, #39911	; 0x9be7
   12218:	mov	r2, #3
   1221c:	movt	r1, #3
   12220:	bl	11e4c <strncmp@plt>
   12224:	cmp	r0, #0
   12228:	beq	12248 <__assert_fail@plt+0x3b4>
   1222c:	movw	r1, #39915	; 0x9beb
   12230:	mov	r0, #0
   12234:	mov	r2, #5
   12238:	movt	r1, #3
   1223c:	bl	11ad4 <dcgettext@plt>
   12240:	ldr	r1, [r7]
   12244:	bl	119c0 <fputs_unlocked@plt>
   12248:	movw	r1, #39986	; 0x9c32
   1224c:	mov	r0, #0
   12250:	mov	r2, #5
   12254:	movt	r1, #3
   12258:	bl	11ad4 <dcgettext@plt>
   1225c:	movw	r2, #39871	; 0x9bbf
   12260:	mov	r1, r0
   12264:	mov	r0, #1
   12268:	mov	r3, r5
   1226c:	movt	r2, #3
   12270:	bl	11cf0 <__printf_chk@plt>
   12274:	movw	r1, #40013	; 0x9c4d
   12278:	mov	r0, #0
   1227c:	mov	r2, #5
   12280:	movt	r1, #3
   12284:	bl	11ad4 <dcgettext@plt>
   12288:	movw	r3, #38108	; 0x94dc
   1228c:	mov	r1, r0
   12290:	movw	r0, #39781	; 0x9b65
   12294:	cmp	r6, r5
   12298:	mov	r2, r6
   1229c:	movt	r0, #3
   122a0:	movt	r3, #3
   122a4:	moveq	r3, r0
   122a8:	mov	r0, #1
   122ac:	bl	11cf0 <__printf_chk@plt>
   122b0:	mov	r0, r4
   122b4:	bl	11c60 <exit@plt>
   122b8:	movw	r0, #45608	; 0xb228
   122bc:	movw	r1, #35268	; 0x89c4
   122c0:	mov	r2, #5
   122c4:	movt	r0, #4
   122c8:	movt	r1, #3
   122cc:	ldr	r5, [r0]
   122d0:	mov	r0, #0
   122d4:	bl	11ad4 <dcgettext@plt>
   122d8:	mov	r2, r0
   122dc:	movw	r0, #45744	; 0xb2b0
   122e0:	mov	r1, #1
   122e4:	movt	r0, #4
   122e8:	ldr	r3, [r0]
   122ec:	mov	r0, r5
   122f0:	bl	11d08 <__fprintf_chk@plt>
   122f4:	mov	r0, r4
   122f8:	bl	11c60 <exit@plt>
   122fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12300:	add	fp, sp, #28
   12304:	sub	sp, sp, #4
   12308:	vpush	{d8-d9}
   1230c:	sub	sp, sp, #280	; 0x118
   12310:	mov	r9, r0
   12314:	movw	r0, #41392	; 0xa1b0
   12318:	mov	r5, #0
   1231c:	mov	r8, r1
   12320:	movt	r0, #3
   12324:	str	r5, [sp, #140]	; 0x8c
   12328:	str	r0, [sp, #136]	; 0x88
   1232c:	ldr	r0, [r1]
   12330:	bl	1da40 <__assert_fail@plt+0xbbac>
   12334:	movw	r1, #38108	; 0x94dc
   12338:	mov	r0, #6
   1233c:	movt	r1, #3
   12340:	bl	11d5c <setlocale@plt>
   12344:	movw	r4, #38564	; 0x96a4
   12348:	movw	r1, #38417	; 0x9611
   1234c:	movt	r4, #3
   12350:	movt	r1, #3
   12354:	mov	r0, r4
   12358:	bl	11e10 <bindtextdomain@plt>
   1235c:	mov	r0, r4
   12360:	bl	11b04 <textdomain@plt>
   12364:	movw	r0, #18636	; 0x48cc
   12368:	movt	r0, #1
   1236c:	bl	38994 <__assert_fail@plt+0x26b00>
   12370:	bl	1536c <__assert_fail@plt+0x34d8>
   12374:	movw	r4, #45632	; 0xb240
   12378:	movt	r4, #4
   1237c:	str	r0, [r4, #12]
   12380:	movw	r0, #38441	; 0x9629
   12384:	movt	r0, #3
   12388:	bl	11bdc <getenv@plt>
   1238c:	add	r1, r4, #16
   12390:	add	r2, r4, #56	; 0x38
   12394:	str	r1, [sp, #120]	; 0x78
   12398:	str	r2, [sp, #116]	; 0x74
   1239c:	bl	1c370 <__assert_fail@plt+0xa4dc>
   123a0:	mov	r0, #1
   123a4:	mov	r6, #8
   123a8:	mov	r7, #16
   123ac:	str	r0, [sp, #128]	; 0x80
   123b0:	mov	r0, #0
   123b4:	str	r0, [sp, #44]	; 0x2c
   123b8:	mov	r0, #0
   123bc:	str	r0, [sp, #124]	; 0x7c
   123c0:	b	123cc <__assert_fail@plt+0x538>
   123c4:	mov	r7, #17
   123c8:	mov	r5, r4
   123cc:	mvn	r0, #0
   123d0:	movw	r2, #38455	; 0x9637
   123d4:	movw	r3, #40680	; 0x9ee8
   123d8:	mov	r1, r8
   123dc:	mov	r4, r5
   123e0:	str	r0, [sp, #144]	; 0x90
   123e4:	add	r0, sp, #144	; 0x90
   123e8:	movt	r2, #3
   123ec:	movt	r3, #3
   123f0:	str	r0, [sp]
   123f4:	mov	r0, r9
   123f8:	bl	11c48 <getopt_long@plt>
   123fc:	add	r0, r0, #3
   12400:	movw	r1, #266	; 0x10a
   12404:	cmp	r0, r1
   12408:	bhi	12bd0 <__assert_fail@plt+0xd3c>
   1240c:	add	r1, pc, #4
   12410:	mov	r5, #1
   12414:	ldr	pc, [r1, r0, lsl #2]
   12418:	andeq	r3, r1, r4, lsr #28
   1241c:	andeq	r3, r1, r8, lsl #29
   12420:	andeq	r2, r1, r8, ror #24
   12424:	ldrdeq	r2, [r1], -r0
   12428:	ldrdeq	r2, [r1], -r0
   1242c:	ldrdeq	r2, [r1], -r0
   12430:	ldrdeq	r2, [r1], -r0
   12434:	ldrdeq	r2, [r1], -r0
   12438:	ldrdeq	r2, [r1], -r0
   1243c:	ldrdeq	r2, [r1], -r0
   12440:	ldrdeq	r2, [r1], -r0
   12444:	ldrdeq	r2, [r1], -r0
   12448:	ldrdeq	r2, [r1], -r0
   1244c:	ldrdeq	r2, [r1], -r0
   12450:	ldrdeq	r2, [r1], -r0
   12454:	ldrdeq	r2, [r1], -r0
   12458:	ldrdeq	r2, [r1], -r0
   1245c:	ldrdeq	r2, [r1], -r0
   12460:	ldrdeq	r2, [r1], -r0
   12464:	ldrdeq	r2, [r1], -r0
   12468:	ldrdeq	r2, [r1], -r0
   1246c:	ldrdeq	r2, [r1], -r0
   12470:	ldrdeq	r2, [r1], -r0
   12474:	ldrdeq	r2, [r1], -r0
   12478:	ldrdeq	r2, [r1], -r0
   1247c:	ldrdeq	r2, [r1], -r0
   12480:	ldrdeq	r2, [r1], -r0
   12484:	ldrdeq	r2, [r1], -r0
   12488:	ldrdeq	r2, [r1], -r0
   1248c:	ldrdeq	r2, [r1], -r0
   12490:	ldrdeq	r2, [r1], -r0
   12494:	ldrdeq	r2, [r1], -r0
   12498:	ldrdeq	r2, [r1], -r0
   1249c:	ldrdeq	r2, [r1], -r0
   124a0:	ldrdeq	r2, [r1], -r0
   124a4:	ldrdeq	r2, [r1], -r0
   124a8:	ldrdeq	r2, [r1], -r0
   124ac:	ldrdeq	r2, [r1], -r0
   124b0:	ldrdeq	r2, [r1], -r0
   124b4:	ldrdeq	r2, [r1], -r0
   124b8:	ldrdeq	r2, [r1], -r0
   124bc:	ldrdeq	r2, [r1], -r0
   124c0:	ldrdeq	r2, [r1], -r0
   124c4:	ldrdeq	r2, [r1], -r0
   124c8:	ldrdeq	r2, [r1], -r0
   124cc:	ldrdeq	r2, [r1], -r0
   124d0:	ldrdeq	r2, [r1], -r0
   124d4:	ldrdeq	r2, [r1], -r0
   124d8:	ldrdeq	r2, [r1], -r0
   124dc:	ldrdeq	r2, [r1], -r0
   124e0:	ldrdeq	r2, [r1], -r0
   124e4:	andeq	r2, r1, r4, asr #16
   124e8:	ldrdeq	r2, [r1], -r0
   124ec:	ldrdeq	r2, [r1], -r0
   124f0:	ldrdeq	r2, [r1], -r0
   124f4:	ldrdeq	r2, [r1], -r0
   124f8:	ldrdeq	r2, [r1], -r0
   124fc:	ldrdeq	r2, [r1], -r0
   12500:	ldrdeq	r2, [r1], -r0
   12504:	ldrdeq	r2, [r1], -r0
   12508:	ldrdeq	r2, [r1], -r0
   1250c:	ldrdeq	r2, [r1], -r0
   12510:	ldrdeq	r2, [r1], -r0
   12514:	ldrdeq	r2, [r1], -r0
   12518:	ldrdeq	r2, [r1], -r0
   1251c:	ldrdeq	r2, [r1], -r0
   12520:	ldrdeq	r2, [r1], -r0
   12524:	ldrdeq	r2, [r1], -r0
   12528:	ldrdeq	r2, [r1], -r0
   1252c:	andeq	r2, r1, ip, lsl #20
   12530:	ldrdeq	r2, [r1], -r0
   12534:	andeq	r2, r1, r4, asr #7
   12538:	ldrdeq	r2, [r1], -r0
   1253c:	ldrdeq	r2, [r1], -r0
   12540:	ldrdeq	r2, [r1], -r0
   12544:	andeq	r2, r1, r4, asr #7
   12548:	ldrdeq	r2, [r1], -r0
   1254c:	ldrdeq	r2, [r1], -r0
   12550:	ldrdeq	r2, [r1], -r0
   12554:	andeq	r2, r1, r8, asr sl
   12558:	ldrdeq	r2, [r1], -r0
   1255c:	ldrdeq	r2, [r1], -r0
   12560:	ldrdeq	r2, [r1], -r0
   12564:	andeq	r2, r1, r4, ror #21
   12568:	ldrdeq	r2, [r1], -r0
   1256c:	ldrdeq	r2, [r1], -r0
   12570:	andeq	r2, r1, r4, asr r9
   12574:	ldrdeq	r2, [r1], -r0
   12578:	ldrdeq	r2, [r1], -r0
   1257c:	ldrdeq	r2, [r1], -r0
   12580:	ldrdeq	r2, [r1], -r0
   12584:	andeq	r2, r1, r4, ror #20
   12588:	ldrdeq	r2, [r1], -r0
   1258c:	ldrdeq	r2, [r1], -r0
   12590:	ldrdeq	r2, [r1], -r0
   12594:	ldrdeq	r2, [r1], -r0
   12598:	ldrdeq	r2, [r1], -r0
   1259c:	ldrdeq	r2, [r1], -r0
   125a0:	ldrdeq	r2, [r1], -r0
   125a4:	ldrdeq	r2, [r1], -r0
   125a8:	andeq	r2, r1, r8, lsl #22
   125ac:	andeq	r2, r1, ip, ror #18
   125b0:	strdeq	r2, [r1], -r0
   125b4:	andeq	r2, r1, r8, asr #22
   125b8:	ldrdeq	r2, [r1], -r0
   125bc:	ldrdeq	r2, [r1], -r0
   125c0:	ldrdeq	r2, [r1], -r0
   125c4:	andeq	r2, r1, r4, lsr sl
   125c8:	ldrdeq	r2, [r1], -r0
   125cc:	ldrdeq	r2, [r1], -r0
   125d0:	andeq	r2, r1, r0, lsl r9
   125d4:	andeq	r2, r1, ip, lsl r9
   125d8:	andeq	r2, r1, ip, ror #19
   125dc:	ldrdeq	r2, [r1], -r0
   125e0:	ldrdeq	r2, [r1], -r0
   125e4:	ldrdeq	r2, [r1], -r0
   125e8:	ldrdeq	r2, [r1], -r0
   125ec:	ldrdeq	r2, [r1], -r0
   125f0:	andeq	r2, r1, ip, asr #7
   125f4:	muleq	r1, r0, r9
   125f8:	ldrdeq	r2, [r1], -r0
   125fc:	ldrdeq	r2, [r1], -r0
   12600:	ldrdeq	r2, [r1], -r0
   12604:	andeq	r2, r1, r4, asr #23
   12608:	ldrdeq	r2, [r1], -r0
   1260c:	ldrdeq	r2, [r1], -r0
   12610:	ldrdeq	r2, [r1], -r0
   12614:	ldrdeq	r2, [r1], -r0
   12618:	ldrdeq	r2, [r1], -r0
   1261c:	ldrdeq	r2, [r1], -r0
   12620:	ldrdeq	r2, [r1], -r0
   12624:	ldrdeq	r2, [r1], -r0
   12628:	ldrdeq	r2, [r1], -r0
   1262c:	ldrdeq	r2, [r1], -r0
   12630:	ldrdeq	r2, [r1], -r0
   12634:	ldrdeq	r2, [r1], -r0
   12638:	ldrdeq	r2, [r1], -r0
   1263c:	ldrdeq	r2, [r1], -r0
   12640:	ldrdeq	r2, [r1], -r0
   12644:	ldrdeq	r2, [r1], -r0
   12648:	ldrdeq	r2, [r1], -r0
   1264c:	ldrdeq	r2, [r1], -r0
   12650:	ldrdeq	r2, [r1], -r0
   12654:	ldrdeq	r2, [r1], -r0
   12658:	ldrdeq	r2, [r1], -r0
   1265c:	ldrdeq	r2, [r1], -r0
   12660:	ldrdeq	r2, [r1], -r0
   12664:	ldrdeq	r2, [r1], -r0
   12668:	ldrdeq	r2, [r1], -r0
   1266c:	ldrdeq	r2, [r1], -r0
   12670:	ldrdeq	r2, [r1], -r0
   12674:	ldrdeq	r2, [r1], -r0
   12678:	ldrdeq	r2, [r1], -r0
   1267c:	ldrdeq	r2, [r1], -r0
   12680:	ldrdeq	r2, [r1], -r0
   12684:	ldrdeq	r2, [r1], -r0
   12688:	ldrdeq	r2, [r1], -r0
   1268c:	ldrdeq	r2, [r1], -r0
   12690:	ldrdeq	r2, [r1], -r0
   12694:	ldrdeq	r2, [r1], -r0
   12698:	ldrdeq	r2, [r1], -r0
   1269c:	ldrdeq	r2, [r1], -r0
   126a0:	ldrdeq	r2, [r1], -r0
   126a4:	ldrdeq	r2, [r1], -r0
   126a8:	ldrdeq	r2, [r1], -r0
   126ac:	ldrdeq	r2, [r1], -r0
   126b0:	ldrdeq	r2, [r1], -r0
   126b4:	ldrdeq	r2, [r1], -r0
   126b8:	ldrdeq	r2, [r1], -r0
   126bc:	ldrdeq	r2, [r1], -r0
   126c0:	ldrdeq	r2, [r1], -r0
   126c4:	ldrdeq	r2, [r1], -r0
   126c8:	ldrdeq	r2, [r1], -r0
   126cc:	ldrdeq	r2, [r1], -r0
   126d0:	ldrdeq	r2, [r1], -r0
   126d4:	ldrdeq	r2, [r1], -r0
   126d8:	ldrdeq	r2, [r1], -r0
   126dc:	ldrdeq	r2, [r1], -r0
   126e0:	ldrdeq	r2, [r1], -r0
   126e4:	ldrdeq	r2, [r1], -r0
   126e8:	ldrdeq	r2, [r1], -r0
   126ec:	ldrdeq	r2, [r1], -r0
   126f0:	ldrdeq	r2, [r1], -r0
   126f4:	ldrdeq	r2, [r1], -r0
   126f8:	ldrdeq	r2, [r1], -r0
   126fc:	ldrdeq	r2, [r1], -r0
   12700:	ldrdeq	r2, [r1], -r0
   12704:	ldrdeq	r2, [r1], -r0
   12708:	ldrdeq	r2, [r1], -r0
   1270c:	ldrdeq	r2, [r1], -r0
   12710:	ldrdeq	r2, [r1], -r0
   12714:	ldrdeq	r2, [r1], -r0
   12718:	ldrdeq	r2, [r1], -r0
   1271c:	ldrdeq	r2, [r1], -r0
   12720:	ldrdeq	r2, [r1], -r0
   12724:	ldrdeq	r2, [r1], -r0
   12728:	ldrdeq	r2, [r1], -r0
   1272c:	ldrdeq	r2, [r1], -r0
   12730:	ldrdeq	r2, [r1], -r0
   12734:	ldrdeq	r2, [r1], -r0
   12738:	ldrdeq	r2, [r1], -r0
   1273c:	ldrdeq	r2, [r1], -r0
   12740:	ldrdeq	r2, [r1], -r0
   12744:	ldrdeq	r2, [r1], -r0
   12748:	ldrdeq	r2, [r1], -r0
   1274c:	ldrdeq	r2, [r1], -r0
   12750:	ldrdeq	r2, [r1], -r0
   12754:	ldrdeq	r2, [r1], -r0
   12758:	ldrdeq	r2, [r1], -r0
   1275c:	ldrdeq	r2, [r1], -r0
   12760:	ldrdeq	r2, [r1], -r0
   12764:	ldrdeq	r2, [r1], -r0
   12768:	ldrdeq	r2, [r1], -r0
   1276c:	ldrdeq	r2, [r1], -r0
   12770:	ldrdeq	r2, [r1], -r0
   12774:	ldrdeq	r2, [r1], -r0
   12778:	ldrdeq	r2, [r1], -r0
   1277c:	ldrdeq	r2, [r1], -r0
   12780:	ldrdeq	r2, [r1], -r0
   12784:	ldrdeq	r2, [r1], -r0
   12788:	ldrdeq	r2, [r1], -r0
   1278c:	ldrdeq	r2, [r1], -r0
   12790:	ldrdeq	r2, [r1], -r0
   12794:	ldrdeq	r2, [r1], -r0
   12798:	ldrdeq	r2, [r1], -r0
   1279c:	ldrdeq	r2, [r1], -r0
   127a0:	ldrdeq	r2, [r1], -r0
   127a4:	ldrdeq	r2, [r1], -r0
   127a8:	ldrdeq	r2, [r1], -r0
   127ac:	ldrdeq	r2, [r1], -r0
   127b0:	ldrdeq	r2, [r1], -r0
   127b4:	ldrdeq	r2, [r1], -r0
   127b8:	ldrdeq	r2, [r1], -r0
   127bc:	ldrdeq	r2, [r1], -r0
   127c0:	ldrdeq	r2, [r1], -r0
   127c4:	ldrdeq	r2, [r1], -r0
   127c8:	ldrdeq	r2, [r1], -r0
   127cc:	ldrdeq	r2, [r1], -r0
   127d0:	ldrdeq	r2, [r1], -r0
   127d4:	ldrdeq	r2, [r1], -r0
   127d8:	ldrdeq	r2, [r1], -r0
   127dc:	ldrdeq	r2, [r1], -r0
   127e0:	ldrdeq	r2, [r1], -r0
   127e4:	ldrdeq	r2, [r1], -r0
   127e8:	ldrdeq	r2, [r1], -r0
   127ec:	ldrdeq	r2, [r1], -r0
   127f0:	ldrdeq	r2, [r1], -r0
   127f4:	ldrdeq	r2, [r1], -r0
   127f8:	ldrdeq	r2, [r1], -r0
   127fc:	ldrdeq	r2, [r1], -r0
   12800:	ldrdeq	r2, [r1], -r0
   12804:	ldrdeq	r2, [r1], -r0
   12808:	ldrdeq	r2, [r1], -r0
   1280c:	ldrdeq	r2, [r1], -r0
   12810:	ldrdeq	r2, [r1], -r0
   12814:	ldrdeq	r2, [r1], -r0
   12818:	ldrdeq	r2, [r1], -r0
   1281c:	ldrdeq	r2, [r1], -r0
   12820:	ldrdeq	r2, [r1], -r0
   12824:	ldrdeq	r2, [r1], -ip
   12828:	andeq	r2, r1, r0, lsr #22
   1282c:	andeq	r2, r1, r0, ror #23
   12830:	strdeq	r2, [r1], -r4
   12834:	ldrdeq	r2, [r1], -r0
   12838:	andeq	r2, r1, r4, ror r8
   1283c:	andeq	r2, r1, r4, lsr r9
   12840:	andeq	r2, r1, ip, asr r8
   12844:	movw	r1, #45632	; 0xb240
   12848:	mov	r0, #1
   1284c:	mov	r5, r4
   12850:	movt	r1, #4
   12854:	strb	r0, [r1]
   12858:	b	123cc <__assert_fail@plt+0x538>
   1285c:	movw	r1, #45632	; 0xb240
   12860:	mov	r0, #1
   12864:	mov	r5, r4
   12868:	movt	r1, #4
   1286c:	strb	r0, [r1, #6]
   12870:	b	123cc <__assert_fail@plt+0x538>
   12874:	movw	r1, #45632	; 0xb240
   12878:	mov	r0, #1
   1287c:	movt	r1, #4
   12880:	strb	r0, [r1, #7]
   12884:	movw	r1, #45624	; 0xb238
   12888:	movt	r1, #4
   1288c:	ldr	r1, [r1]
   12890:	cmp	r1, #0
   12894:	beq	12bf8 <__assert_fail@plt+0xd64>
   12898:	movw	r2, #45520	; 0xb1d0
   1289c:	movw	r5, #41096	; 0xa088
   128a0:	mov	r3, #4
   128a4:	str	r0, [sp, #8]
   128a8:	movw	r0, #38550	; 0x9696
   128ac:	movt	r2, #4
   128b0:	movt	r5, #3
   128b4:	str	r3, [sp]
   128b8:	movt	r0, #3
   128bc:	ldr	r2, [r2]
   128c0:	mov	r3, r5
   128c4:	str	r2, [sp, #4]
   128c8:	movw	r2, #41116	; 0xa09c
   128cc:	movt	r2, #3
   128d0:	bl	14588 <__assert_fail@plt+0x26f4>
   128d4:	ldr	r0, [r5, r0, lsl #2]
   128d8:	b	12bfc <__assert_fail@plt+0xd68>
   128dc:	movw	r1, #45632	; 0xb240
   128e0:	mov	r0, #1
   128e4:	mov	r5, r4
   128e8:	movt	r1, #4
   128ec:	strb	r0, [r1, #2]
   128f0:	b	123cc <__assert_fail@plt+0x538>
   128f4:	movw	r2, #45632	; 0xb240
   128f8:	mov	r1, #0
   128fc:	mov	r0, #1
   12900:	movt	r2, #4
   12904:	strd	r0, [r2, #56]	; 0x38
   12908:	mov	r0, #144	; 0x90
   1290c:	b	12a4c <__assert_fail@plt+0xbb8>
   12910:	mov	r1, #0
   12914:	mov	r0, #1024	; 0x400
   12918:	b	129f4 <__assert_fail@plt+0xb60>
   1291c:	movw	r1, #45632	; 0xb240
   12920:	mov	r0, #1
   12924:	mov	r5, r4
   12928:	movt	r1, #4
   1292c:	strb	r0, [r1, #4]
   12930:	b	123cc <__assert_fail@plt+0x538>
   12934:	movw	r0, #45624	; 0xb238
   12938:	movw	r1, #45632	; 0xb240
   1293c:	mov	r5, r4
   12940:	movt	r0, #4
   12944:	movt	r1, #4
   12948:	ldr	r0, [r0]
   1294c:	str	r0, [r1, #28]
   12950:	b	123cc <__assert_fail@plt+0x538>
   12954:	movw	r1, #45632	; 0xb240
   12958:	mov	r0, #1
   1295c:	mov	r5, r4
   12960:	movt	r1, #4
   12964:	strb	r0, [r1, #5]
   12968:	b	123cc <__assert_fail@plt+0x538>
   1296c:	movw	r2, #45632	; 0xb240
   12970:	mov	r1, #0
   12974:	mov	r0, #1
   12978:	mov	r5, r4
   1297c:	movt	r2, #4
   12980:	strd	r0, [r2, #56]	; 0x38
   12984:	str	r1, [r2, #16]
   12988:	strb	r0, [r2, #2]
   1298c:	b	123cc <__assert_fail@plt+0x538>
   12990:	movw	r5, #45624	; 0xb238
   12994:	movw	r1, #38504	; 0x9668
   12998:	mov	sl, r7
   1299c:	mov	r7, r6
   129a0:	movw	r6, #45632	; 0xb240
   129a4:	mov	r2, #0
   129a8:	movt	r5, #4
   129ac:	movt	r1, #3
   129b0:	movt	r6, #4
   129b4:	ldr	r0, [r5]
   129b8:	str	r1, [sp]
   129bc:	add	r3, r6, #64	; 0x40
   129c0:	mov	r1, #0
   129c4:	bl	34888 <__assert_fail@plt+0x229f4>
   129c8:	cmp	r0, #0
   129cc:	bne	13ef0 <__assert_fail@plt+0x205c>
   129d0:	ldrd	r0, [r6, #64]	; 0x40
   129d4:	orrs	r0, r0, r1
   129d8:	beq	12c28 <__assert_fail@plt+0xd94>
   129dc:	mov	r6, r7
   129e0:	mov	r5, r4
   129e4:	mov	r7, sl
   129e8:	b	123cc <__assert_fail@plt+0x538>
   129ec:	mov	r1, #0
   129f0:	mov	r0, #1048576	; 0x100000
   129f4:	movw	r2, #45632	; 0xb240
   129f8:	mov	r5, r4
   129fc:	movt	r2, #4
   12a00:	strd	r0, [r2, #56]	; 0x38
   12a04:	str	r1, [r2, #16]
   12a08:	b	123cc <__assert_fail@plt+0x538>
   12a0c:	movw	sl, #45624	; 0xb238
   12a10:	ldr	r1, [sp, #120]	; 0x78
   12a14:	ldr	r2, [sp, #116]	; 0x74
   12a18:	movt	sl, #4
   12a1c:	ldr	r0, [sl]
   12a20:	bl	1c370 <__assert_fail@plt+0xa4dc>
   12a24:	cmp	r0, #0
   12a28:	mov	r5, r4
   12a2c:	beq	123cc <__assert_fail@plt+0x538>
   12a30:	b	13f0c <__assert_fail@plt+0x2078>
   12a34:	movw	r2, #45632	; 0xb240
   12a38:	mov	r1, #0
   12a3c:	mov	r0, #1
   12a40:	movt	r2, #4
   12a44:	strd	r0, [r2, #56]	; 0x38
   12a48:	mov	r0, #176	; 0xb0
   12a4c:	str	r0, [r2, #16]
   12a50:	mov	r5, r4
   12a54:	b	123cc <__assert_fail@plt+0x538>
   12a58:	mov	r7, #2
   12a5c:	mov	r5, r4
   12a60:	b	123cc <__assert_fail@plt+0x538>
   12a64:	movw	r0, #45632	; 0xb240
   12a68:	mov	sl, r7
   12a6c:	movw	r7, #45624	; 0xb238
   12a70:	mov	r3, #268435456	; 0x10000000
   12a74:	movt	r7, #4
   12a78:	movt	r0, #4
   12a7c:	ldr	r1, [r0, #12]
   12a80:	ldr	r2, [r7]
   12a84:	mov	r0, #10
   12a88:	str	r0, [sp]
   12a8c:	movw	r0, #22812	; 0x591c
   12a90:	movt	r0, #1
   12a94:	bl	15e14 <__assert_fail@plt+0x3f80>
   12a98:	cmp	r0, #0
   12a9c:	beq	12ad8 <__assert_fail@plt+0xc44>
   12aa0:	bl	11ca8 <__errno_location@plt>
   12aa4:	ldr	r2, [r7]
   12aa8:	ldr	r5, [r0]
   12aac:	mov	r0, #0
   12ab0:	mov	r1, #3
   12ab4:	str	r0, [sp, #128]	; 0x80
   12ab8:	mov	r0, #0
   12abc:	bl	1f710 <__assert_fail@plt+0xd87c>
   12ac0:	movw	r2, #41334	; 0xa176
   12ac4:	mov	r3, r0
   12ac8:	mov	r0, #0
   12acc:	mov	r1, r5
   12ad0:	movt	r2, #3
   12ad4:	bl	11bac <error@plt>
   12ad8:	mov	r5, r4
   12adc:	mov	r7, sl
   12ae0:	b	123cc <__assert_fail@plt+0x538>
   12ae4:	mov	r7, #16
   12ae8:	mov	r5, r4
   12aec:	b	123cc <__assert_fail@plt+0x538>
   12af0:	movw	r1, #45632	; 0xb240
   12af4:	mov	r0, #1
   12af8:	mov	r5, r4
   12afc:	movt	r1, #4
   12b00:	strb	r0, [r1, #3]
   12b04:	b	123cc <__assert_fail@plt+0x538>
   12b08:	movw	r1, #45632	; 0xb240
   12b0c:	mov	r0, #1
   12b10:	mov	r5, r4
   12b14:	movt	r1, #4
   12b18:	strb	r0, [r1, #1]
   12b1c:	b	123cc <__assert_fail@plt+0x538>
   12b20:	movw	r0, #45624	; 0xb238
   12b24:	mov	r2, #268435456	; 0x10000000
   12b28:	movt	r0, #4
   12b2c:	ldr	r1, [r0]
   12b30:	movw	r0, #45632	; 0xb240
   12b34:	movt	r0, #4
   12b38:	ldr	r0, [r0, #12]
   12b3c:	bl	1591c <__assert_fail@plt+0x3a88>
   12b40:	mov	r5, r4
   12b44:	b	123cc <__assert_fail@plt+0x538>
   12b48:	movw	sl, #45624	; 0xb238
   12b4c:	movw	r1, #38108	; 0x94dc
   12b50:	sub	r3, fp, #160	; 0xa0
   12b54:	mov	r2, #0
   12b58:	movt	sl, #4
   12b5c:	movt	r1, #3
   12b60:	ldr	r0, [sl]
   12b64:	str	r1, [sp]
   12b68:	mov	r1, #0
   12b6c:	bl	362ac <__assert_fail@plt+0x24418>
   12b70:	cmp	r0, #0
   12b74:	ldreq	r0, [fp, #-156]	; 0xffffff64
   12b78:	cmpeq	r0, #0
   12b7c:	beq	12c48 <__assert_fail@plt+0xdb4>
   12b80:	movw	r1, #38479	; 0x964f
   12b84:	mov	r0, #0
   12b88:	mov	r2, #5
   12b8c:	str	r0, [sp, #128]	; 0x80
   12b90:	movt	r1, #3
   12b94:	mov	r0, #0
   12b98:	bl	11ad4 <dcgettext@plt>
   12b9c:	mov	r5, r0
   12ba0:	ldr	r0, [sl]
   12ba4:	bl	1f9bc <__assert_fail@plt+0xdb28>
   12ba8:	mov	r3, r0
   12bac:	mov	r0, #0
   12bb0:	mov	r1, #0
   12bb4:	mov	r2, r5
   12bb8:	bl	11bac <error@plt>
   12bbc:	mov	r5, r4
   12bc0:	b	123cc <__assert_fail@plt+0x538>
   12bc4:	orr	r6, r6, #64	; 0x40
   12bc8:	mov	r5, r4
   12bcc:	b	123cc <__assert_fail@plt+0x538>
   12bd0:	mov	r0, #0
   12bd4:	mov	r5, r4
   12bd8:	str	r0, [sp, #128]	; 0x80
   12bdc:	b	123cc <__assert_fail@plt+0x538>
   12be0:	movw	r0, #45624	; 0xb238
   12be4:	mov	r5, r4
   12be8:	movt	r0, #4
   12bec:	ldr	r0, [r0]
   12bf0:	str	r0, [sp, #44]	; 0x2c
   12bf4:	b	123cc <__assert_fail@plt+0x538>
   12bf8:	mov	r0, #0
   12bfc:	movw	r1, #45632	; 0xb240
   12c00:	movt	r1, #4
   12c04:	str	r0, [r1, #20]
   12c08:	movw	r0, #38557	; 0x969d
   12c0c:	mov	r5, r1
   12c10:	movt	r0, #3
   12c14:	bl	11bdc <getenv@plt>
   12c18:	bl	33248 <__assert_fail@plt+0x213b4>
   12c1c:	str	r0, [r5, #24]
   12c20:	mov	r5, r4
   12c24:	b	123cc <__assert_fail@plt+0x538>
   12c28:	ldr	r0, [r5]
   12c2c:	mov	r6, r7
   12c30:	mov	r5, r4
   12c34:	mov	r7, sl
   12c38:	ldrb	r0, [r0]
   12c3c:	cmp	r0, #45	; 0x2d
   12c40:	bne	123cc <__assert_fail@plt+0x538>
   12c44:	b	13f28 <__assert_fail@plt+0x2094>
   12c48:	ldr	r0, [fp, #-160]	; 0xffffff60
   12c4c:	movw	r1, #45512	; 0xb1c8
   12c50:	mov	r5, r4
   12c54:	movt	r1, #4
   12c58:	str	r0, [r1]
   12c5c:	mov	r0, #1
   12c60:	str	r0, [sp, #124]	; 0x7c
   12c64:	b	123cc <__assert_fail@plt+0x538>
   12c68:	ldr	r0, [sp, #128]	; 0x80
   12c6c:	tst	r0, #1
   12c70:	beq	13f58 <__assert_fail@plt+0x20c4>
   12c74:	movw	r0, #45632	; 0xb240
   12c78:	movt	r0, #4
   12c7c:	ldrb	r0, [r0, #1]
   12c80:	and	r0, r4, r0
   12c84:	tst	r0, #1
   12c88:	bne	13f60 <__assert_fail@plt+0x20cc>
   12c8c:	tst	r4, #1
   12c90:	beq	12d04 <__assert_fail@plt+0xe70>
   12c94:	movw	sl, #45512	; 0xb1c8
   12c98:	ldr	r0, [sp, #124]	; 0x7c
   12c9c:	movt	sl, #4
   12ca0:	ldr	r5, [sl]
   12ca4:	mvn	r4, r0
   12ca8:	cmp	r5, #0
   12cac:	mov	r0, r5
   12cb0:	movwne	r0, #1
   12cb4:	orr	r0, r4, r0
   12cb8:	tst	r0, #1
   12cbc:	bne	12ce8 <__assert_fail@plt+0xe54>
   12cc0:	movw	r1, #38676	; 0x9714
   12cc4:	mov	r0, #0
   12cc8:	mov	r2, #5
   12ccc:	movt	r1, #3
   12cd0:	bl	11ad4 <dcgettext@plt>
   12cd4:	mov	r2, r0
   12cd8:	mov	r0, #0
   12cdc:	mov	r1, #0
   12ce0:	bl	11bac <error@plt>
   12ce4:	ldr	r5, [sl]
   12ce8:	clz	r0, r5
   12cec:	lsr	r0, r0, #5
   12cf0:	orr	r0, r4, r0
   12cf4:	tst	r0, #1
   12cf8:	beq	14024 <__assert_fail@plt+0x2190>
   12cfc:	mov	r0, #0
   12d00:	str	r0, [sl]
   12d04:	movw	sl, #45632	; 0xb240
   12d08:	movt	sl, #4
   12d0c:	ldrb	r0, [sl, #6]
   12d10:	cmp	r0, #1
   12d14:	bne	12d54 <__assert_fail@plt+0xec0>
   12d18:	ldrb	r0, [sl, #2]
   12d1c:	cmp	r0, #1
   12d20:	bne	12d48 <__assert_fail@plt+0xeb4>
   12d24:	movw	r1, #38784	; 0x9780
   12d28:	mov	r0, #0
   12d2c:	mov	r2, #5
   12d30:	movt	r1, #3
   12d34:	bl	11ad4 <dcgettext@plt>
   12d38:	mov	r2, r0
   12d3c:	mov	r0, #0
   12d40:	mov	r1, #0
   12d44:	bl	11bac <error@plt>
   12d48:	mov	r1, #0
   12d4c:	mov	r0, #1
   12d50:	strd	r0, [sl, #56]	; 0x38
   12d54:	ldrb	r0, [sl, #7]
   12d58:	cmp	r0, #1
   12d5c:	bne	12ea8 <__assert_fail@plt+0x1014>
   12d60:	ldr	r5, [sl, #28]
   12d64:	mov	r4, r7
   12d68:	mov	r7, r6
   12d6c:	cmp	r5, #0
   12d70:	bne	12de8 <__assert_fail@plt+0xf54>
   12d74:	movw	r0, #38854	; 0x97c6
   12d78:	movt	r0, #3
   12d7c:	bl	11bdc <getenv@plt>
   12d80:	cmp	r0, #0
   12d84:	str	r0, [sl, #28]
   12d88:	beq	12ddc <__assert_fail@plt+0xf48>
   12d8c:	movw	r1, #38434	; 0x9622
   12d90:	mov	r5, r0
   12d94:	movt	r1, #3
   12d98:	bl	11a14 <strcmp@plt>
   12d9c:	cmp	r0, #0
   12da0:	beq	12ddc <__assert_fail@plt+0xf48>
   12da4:	ldrb	r0, [r5]
   12da8:	cmp	r0, #43	; 0x2b
   12dac:	bne	12dfc <__assert_fail@plt+0xf68>
   12db0:	mov	r0, r5
   12db4:	mov	r1, #10
   12db8:	bl	11c84 <strchr@plt>
   12dbc:	cmp	r0, #0
   12dc0:	beq	12df4 <__assert_fail@plt+0xf60>
   12dc4:	mov	r1, #0
   12dc8:	strb	r1, [r0]
   12dcc:	ldrb	r0, [r5]
   12dd0:	cmp	r0, #43	; 0x2b
   12dd4:	beq	12df4 <__assert_fail@plt+0xf60>
   12dd8:	b	12e18 <__assert_fail@plt+0xf84>
   12ddc:	movw	r5, #38865	; 0x97d1
   12de0:	movt	r5, #3
   12de4:	str	r5, [sl, #28]
   12de8:	ldrb	r0, [r5]
   12dec:	cmp	r0, #43	; 0x2b
   12df0:	bne	12e18 <__assert_fail@plt+0xf84>
   12df4:	add	r0, r5, #1
   12df8:	b	12e9c <__assert_fail@plt+0x1008>
   12dfc:	movw	r1, #41140	; 0xa0b4
   12e00:	mov	r0, r5
   12e04:	mov	r2, #6
   12e08:	movt	r1, #3
   12e0c:	bl	11e4c <strncmp@plt>
   12e10:	cmp	r0, #0
   12e14:	beq	13df8 <__assert_fail@plt+0x1f64>
   12e18:	movw	r0, #45520	; 0xb1d0
   12e1c:	movw	r6, #41148	; 0xa0bc
   12e20:	mov	r2, #4
   12e24:	mov	r1, #1
   12e28:	movt	r0, #4
   12e2c:	str	r2, [sp]
   12e30:	movw	r2, #41160	; 0xa0c8
   12e34:	movt	r6, #3
   12e38:	ldr	r0, [r0]
   12e3c:	movt	r2, #3
   12e40:	mov	r3, r6
   12e44:	stmib	sp, {r0, r1}
   12e48:	movw	r0, #38874	; 0x97da
   12e4c:	mov	r1, r5
   12e50:	movt	r0, #3
   12e54:	bl	14588 <__assert_fail@plt+0x26f4>
   12e58:	ldr	r0, [r6, r0, lsl #2]
   12e5c:	cmp	r0, #2
   12e60:	beq	12e94 <__assert_fail@plt+0x1000>
   12e64:	cmp	r0, #1
   12e68:	mov	r6, r7
   12e6c:	beq	12e88 <__assert_fail@plt+0xff4>
   12e70:	cmp	r0, #0
   12e74:	mov	r7, r4
   12e78:	movweq	r0, #38885	; 0x97e5
   12e7c:	movteq	r0, #3
   12e80:	streq	r0, [sl, #32]
   12e84:	b	12ea8 <__assert_fail@plt+0x1014>
   12e88:	movw	r0, #38909	; 0x97fd
   12e8c:	movt	r0, #3
   12e90:	b	12ea0 <__assert_fail@plt+0x100c>
   12e94:	movw	r0, #38924	; 0x980c
   12e98:	movt	r0, #3
   12e9c:	mov	r6, r7
   12ea0:	str	r0, [sl, #32]
   12ea4:	mov	r7, r4
   12ea8:	movw	r5, #45600	; 0xb220
   12eac:	ldr	r0, [sp, #44]	; 0x2c
   12eb0:	movt	r5, #4
   12eb4:	ldr	r1, [r5]
   12eb8:	cmp	r0, #0
   12ebc:	beq	13cb4 <__assert_fail@plt+0x1e20>
   12ec0:	cmp	r1, r9
   12ec4:	blt	13fac <__assert_fail@plt+0x2118>
   12ec8:	mov	r4, r7
   12ecc:	ldr	r7, [sp, #44]	; 0x2c
   12ed0:	movw	r1, #43896	; 0xab78
   12ed4:	movt	r1, #3
   12ed8:	mov	r0, r7
   12edc:	bl	11a14 <strcmp@plt>
   12ee0:	cmp	r0, #0
   12ee4:	beq	12f0c <__assert_fail@plt+0x1078>
   12ee8:	movw	r0, #45616	; 0xb230
   12eec:	movw	r1, #42806	; 0xa736
   12ef0:	movt	r0, #4
   12ef4:	movt	r1, #3
   12ef8:	ldr	r2, [r0]
   12efc:	mov	r0, r7
   12f00:	bl	17b38 <__assert_fail@plt+0x5ca4>
   12f04:	cmp	r0, #0
   12f08:	beq	14054 <__assert_fail@plt+0x21c0>
   12f0c:	movw	r0, #45616	; 0xb230
   12f10:	movt	r0, #4
   12f14:	ldr	r0, [r0]
   12f18:	bl	14770 <__assert_fail@plt+0x28dc>
   12f1c:	mov	r5, r0
   12f20:	mov	r0, #1
   12f24:	mov	r7, r4
   12f28:	cmp	r5, #0
   12f2c:	strb	r0, [sl, #8]
   12f30:	beq	13f54 <__assert_fail@plt+0x20c0>
   12f34:	bl	149b8 <__assert_fail@plt+0x2b24>
   12f38:	cmp	r0, #0
   12f3c:	str	r0, [sl, #36]	; 0x24
   12f40:	beq	13f54 <__assert_fail@plt+0x20c0>
   12f44:	ldrb	r1, [sl, #8]
   12f48:	ldrb	r0, [sl, #4]
   12f4c:	orr	r2, r6, #256	; 0x100
   12f50:	str	r5, [sp, #48]	; 0x30
   12f54:	cmp	r1, #0
   12f58:	add	r1, sp, #132	; 0x84
   12f5c:	moveq	r6, r2
   12f60:	cmp	r0, #0
   12f64:	mov	r0, r5
   12f68:	movne	r6, r2
   12f6c:	bl	147a4 <__assert_fail@plt+0x2910>
   12f70:	cmp	r0, #0
   12f74:	beq	13cfc <__assert_fail@plt+0x1e68>
   12f78:	mov	r5, r0
   12f7c:	orr	r0, r6, r7
   12f80:	vmov.i32	q4, #0	; 0x00000000
   12f84:	mov	r4, #1
   12f88:	str	r0, [sp, #32]
   12f8c:	sub	r0, fp, #160	; 0xa0
   12f90:	add	r0, r0, #96	; 0x60
   12f94:	str	r0, [sp, #24]
   12f98:	add	r0, sp, #144	; 0x90
   12f9c:	add	r1, r0, #16
   12fa0:	add	r0, r0, #8
   12fa4:	str	r1, [sp, #88]	; 0x58
   12fa8:	str	r0, [sp, #92]	; 0x5c
   12fac:	mov	r7, r4
   12fb0:	ldr	r4, [sp, #44]	; 0x2c
   12fb4:	mov	r0, #0
   12fb8:	cmp	r4, #0
   12fbc:	beq	12ff8 <__assert_fail@plt+0x1164>
   12fc0:	movw	r1, #43896	; 0xab78
   12fc4:	mov	r0, r4
   12fc8:	movt	r1, #3
   12fcc:	bl	11a14 <strcmp@plt>
   12fd0:	cmp	r0, #0
   12fd4:	mov	r0, #0
   12fd8:	bne	12ff8 <__assert_fail@plt+0x1164>
   12fdc:	movw	r1, #43896	; 0xab78
   12fe0:	mov	r0, r5
   12fe4:	movt	r1, #3
   12fe8:	bl	11a14 <strcmp@plt>
   12fec:	cmp	r0, #0
   12ff0:	mov	r0, #0
   12ff4:	beq	13b58 <__assert_fail@plt+0x1cc4>
   12ff8:	ldrb	r1, [r5]
   12ffc:	cmp	r1, #0
   13000:	beq	13ba0 <__assert_fail@plt+0x1d0c>
   13004:	mov	r4, #0
   13008:	cmp	r0, #0
   1300c:	bne	13c34 <__assert_fail@plt+0x1da0>
   13010:	movw	r4, #45632	; 0xb240
   13014:	ldr	r1, [sp, #32]
   13018:	mov	r2, #0
   1301c:	movt	r4, #4
   13020:	mov	r0, r4
   13024:	str	r5, [r0, #72]!	; 0x48
   13028:	bl	3480c <__assert_fail@plt+0x22978>
   1302c:	mov	sl, r0
   13030:	bl	188f0 <__assert_fail@plt+0x6a5c>
   13034:	cmp	r0, #0
   13038:	str	r7, [sp, #36]	; 0x24
   1303c:	beq	13aa0 <__assert_fail@plt+0x1c0c>
   13040:	mov	r5, r0
   13044:	add	r0, sl, #16
   13048:	mov	r9, #1
   1304c:	str	sl, [sp, #84]	; 0x54
   13050:	str	r0, [sp, #28]
   13054:	b	13688 <__assert_fail@plt+0x17f4>
   13058:	cmp	ip, #0
   1305c:	bne	13a84 <__assert_fail@plt+0x1bf0>
   13060:	b	13a18 <__assert_fail@plt+0x1b84>
   13064:	cmp	r6, #11
   13068:	bne	13090 <__assert_fail@plt+0x11fc>
   1306c:	mov	r0, sl
   13070:	mov	r1, r5
   13074:	mov	r2, #1
   13078:	bl	1a184 <__assert_fail@plt+0x82f0>
   1307c:	mov	r0, sl
   13080:	bl	188f0 <__assert_fail@plt+0x6a5c>
   13084:	cmp	r0, r5
   13088:	bne	13eb0 <__assert_fail@plt+0x201c>
   1308c:	ldrh	r6, [r5, #56]	; 0x38
   13090:	cmp	r6, #13
   13094:	cmpne	r6, #10
   13098:	bne	131cc <__assert_fail@plt+0x1338>
   1309c:	ldr	r4, [r5, #32]
   130a0:	movw	r1, #40412	; 0x9ddc
   130a4:	mov	r0, #0
   130a8:	mov	r2, #5
   130ac:	mov	r8, #0
   130b0:	movt	r1, #3
   130b4:	bl	11ad4 <dcgettext@plt>
   130b8:	mov	r5, r0
   130bc:	mov	r0, #4
   130c0:	mov	r1, r7
   130c4:	bl	1f494 <__assert_fail@plt+0xd600>
   130c8:	mov	r3, r0
   130cc:	mov	r1, r4
   130d0:	movw	r4, #45632	; 0xb240
   130d4:	mov	r0, #0
   130d8:	mov	r2, r5
   130dc:	movt	r4, #4
   130e0:	bl	11bac <error@plt>
   130e4:	b	13a84 <__assert_fail@plt+0x1bf0>
   130e8:	sub	r1, r0, #1
   130ec:	str	r8, [sp, #76]	; 0x4c
   130f0:	str	ip, [sp, #96]	; 0x60
   130f4:	cmp	ip, r1
   130f8:	bne	13e90 <__assert_fail@plt+0x1ffc>
   130fc:	ldr	r1, [r4, #52]	; 0x34
   13100:	add	r7, r0, r0, lsl #1
   13104:	mov	ip, lr
   13108:	str	r1, [sp, #80]	; 0x50
   1310c:	ldr	r0, [r1, r7, lsl #4]!
   13110:	ldr	r2, [r1, #4]
   13114:	str	r0, [sp, #72]	; 0x48
   13118:	adds	r0, r0, sl
   1311c:	str	r2, [sp, #64]	; 0x40
   13120:	adcs	r3, r2, r9
   13124:	mov	r2, #0
   13128:	adcs	r2, r2, #0
   1312c:	movne	r3, r5
   13130:	movne	r0, r5
   13134:	ldr	r5, [sp, #76]	; 0x4c
   13138:	str	r3, [sp, #148]	; 0x94
   1313c:	str	r0, [sp, #144]	; 0x90
   13140:	str	r0, [sp, #108]	; 0x6c
   13144:	str	r3, [sp, #104]	; 0x68
   13148:	ldr	r2, [r1, #8]
   1314c:	ldr	r0, [r1, #12]
   13150:	str	r2, [sp, #56]	; 0x38
   13154:	adds	r2, r2, #1
   13158:	str	r0, [sp, #60]	; 0x3c
   1315c:	adc	r3, r0, #0
   13160:	ldr	r0, [sp, #92]	; 0x5c
   13164:	str	r2, [sp, #116]	; 0x74
   13168:	str	r3, [sp, #112]	; 0x70
   1316c:	strd	r2, [r0]
   13170:	ldr	r2, [r1, #16]!
   13174:	mov	r8, r1
   13178:	ldr	r3, [r1, #4]!
   1317c:	cmp	r2, r5
   13180:	mov	r2, #0
   13184:	movwlt	r2, #1
   13188:	subgt	r2, r2, #1
   1318c:	cmp	r3, lr
   13190:	mov	r3, #0
   13194:	movwlt	r3, #1
   13198:	subgt	r3, r3, #1
   1319c:	add	r2, r3, r2, lsl #1
   131a0:	cmn	r2, #1
   131a4:	ldmle	r8, {r5, ip}
   131a8:	ldrle	r0, [sp, #88]	; 0x58
   131ac:	stmle	r0, {r5, ip}
   131b0:	str	r7, [sp, #68]	; 0x44
   131b4:	ldrb	r2, [r4, #5]
   131b8:	cmp	r2, #0
   131bc:	beq	13260 <__assert_fail@plt+0x13cc>
   131c0:	ldr	r0, [sp, #96]	; 0x60
   131c4:	mov	ip, r8
   131c8:	b	1331c <__assert_fail@plt+0x1488>
   131cc:	ldrb	r1, [sl, #48]	; 0x30
   131d0:	add	r0, r5, #64	; 0x40
   131d4:	tst	r1, #64	; 0x40
   131d8:	beq	13210 <__assert_fail@plt+0x137c>
   131dc:	ldr	r1, [r5, #48]	; 0x30
   131e0:	cmp	r1, #1
   131e4:	blt	13210 <__assert_fail@plt+0x137c>
   131e8:	ldr	r1, [sp, #28]
   131ec:	ldrd	r2, [r0]
   131f0:	ldr	r4, [r1]
   131f4:	ldr	r1, [r1, #4]
   131f8:	eor	r2, r4, r2
   131fc:	eor	r1, r1, r3
   13200:	movw	r4, #45632	; 0xb240
   13204:	movt	r4, #4
   13208:	orrs	r1, r2, r1
   1320c:	bne	13878 <__assert_fail@plt+0x19e4>
   13210:	ldrb	r1, [r4, #4]
   13214:	cmp	r1, #0
   13218:	bne	134c0 <__assert_fail@plt+0x162c>
   1321c:	ldrb	r1, [r4, #8]
   13220:	cmp	r1, #0
   13224:	beq	134a4 <__assert_fail@plt+0x1610>
   13228:	ldrd	r2, [r0]
   1322c:	ldr	r0, [r4, #36]	; 0x24
   13230:	ldr	r4, [r5, #160]	; 0xa0
   13234:	ldr	r1, [r5, #164]	; 0xa4
   13238:	str	r4, [sp]
   1323c:	str	r1, [sp, #4]
   13240:	bl	14ac8 <__assert_fail@plt+0x2c34>
   13244:	cmn	r0, #1
   13248:	ble	13f54 <__assert_fail@plt+0x20c0>
   1324c:	movw	r4, #45632	; 0xb240
   13250:	cmp	r0, #0
   13254:	movt	r4, #4
   13258:	bne	134c0 <__assert_fail@plt+0x162c>
   1325c:	b	13878 <__assert_fail@plt+0x19e4>
   13260:	ldr	r0, [sp, #80]	; 0x50
   13264:	str	r1, [sp, #52]	; 0x34
   13268:	ldr	r1, [sp, #104]	; 0x68
   1326c:	add	r2, r0, r7, lsl #4
   13270:	ldr	r7, [sp, #108]	; 0x6c
   13274:	ldr	r3, [r2, #24]
   13278:	ldr	r0, [r2, #28]
   1327c:	adds	r7, r3, r7
   13280:	adcs	r1, r0, r1
   13284:	mov	r0, #0
   13288:	adcs	r3, r0, #0
   1328c:	mvn	r0, #0
   13290:	movne	r1, r0
   13294:	movne	r7, r0
   13298:	str	r1, [sp, #148]	; 0x94
   1329c:	str	r7, [sp, #144]	; 0x90
   132a0:	str	r7, [sp, #108]	; 0x6c
   132a4:	ldr	r7, [sp, #116]	; 0x74
   132a8:	str	r1, [sp, #104]	; 0x68
   132ac:	ldr	r3, [r2, #32]
   132b0:	ldr	r0, [r2, #36]	; 0x24
   132b4:	adds	r7, r3, r7
   132b8:	ldr	r3, [sp, #112]	; 0x70
   132bc:	str	r7, [sp, #116]	; 0x74
   132c0:	adc	r3, r0, r3
   132c4:	ldr	r0, [sp, #92]	; 0x5c
   132c8:	str	r3, [sp, #112]	; 0x70
   132cc:	str	r7, [r0]
   132d0:	str	r3, [r0, #4]
   132d4:	ldr	r3, [r2, #40]!	; 0x28
   132d8:	ldr	r1, [sp, #52]	; 0x34
   132dc:	cmp	r5, r3
   132e0:	ldr	r5, [r2, #4]
   132e4:	mov	r3, #0
   132e8:	movwgt	r3, #1
   132ec:	sublt	r3, r3, #1
   132f0:	cmp	ip, r5
   132f4:	mov	r5, #0
   132f8:	mov	ip, r8
   132fc:	movwgt	r5, #1
   13300:	sublt	r5, r5, #1
   13304:	add	r3, r5, r3, lsl #1
   13308:	cmn	r3, #1
   1330c:	ldrdle	r2, [r2]
   13310:	ldrle	r0, [sp, #88]	; 0x58
   13314:	strdle	r2, [r0]
   13318:	ldr	r0, [sp, #96]	; 0x60
   1331c:	add	r2, r0, r0, lsl #1
   13320:	ldr	r0, [sp, #80]	; 0x50
   13324:	str	ip, [sp, #40]	; 0x28
   13328:	add	r3, r0, r2, lsl #4
   1332c:	ldr	r2, [r3, #24]!
   13330:	ldr	r0, [r3, #12]
   13334:	ldr	r5, [r3, #4]
   13338:	mov	r8, r3
   1333c:	str	r0, [sp, #52]	; 0x34
   13340:	ldr	r0, [sp, #72]	; 0x48
   13344:	adds	r6, r2, r0
   13348:	ldr	r0, [sp, #64]	; 0x40
   1334c:	ldr	r2, [r8, #8]!
   13350:	adcs	r7, r5, r0
   13354:	mov	r0, #0
   13358:	mvn	r5, #0
   1335c:	adcs	r0, r0, #0
   13360:	str	r0, [sp, #72]	; 0x48
   13364:	ldr	r0, [sp, #56]	; 0x38
   13368:	movne	r7, r5
   1336c:	adds	r0, r2, r0
   13370:	ldr	r2, [sp, #52]	; 0x34
   13374:	str	r0, [sp, #64]	; 0x40
   13378:	str	r0, [r8]
   1337c:	ldr	r0, [sp, #60]	; 0x3c
   13380:	adc	r0, r2, r0
   13384:	str	r0, [sp, #60]	; 0x3c
   13388:	str	r0, [r3, #12]
   1338c:	ldr	r0, [sp, #72]	; 0x48
   13390:	cmp	r0, #0
   13394:	mov	r0, r3
   13398:	movne	r6, r5
   1339c:	strd	r6, [r3]
   133a0:	ldr	r5, [r0, #16]!
   133a4:	ldr	r2, [ip]
   133a8:	mov	ip, #0
   133ac:	cmp	r5, r2
   133b0:	mov	r2, r3
   133b4:	str	r0, [sp, #56]	; 0x38
   133b8:	ldr	r0, [r1]
   133bc:	str	r5, [sp, #72]	; 0x48
   133c0:	mov	r5, #0
   133c4:	ldr	r1, [r2, #20]!
   133c8:	movwgt	ip, #1
   133cc:	sublt	ip, ip, #1
   133d0:	cmp	r1, r0
   133d4:	movwgt	r5, #1
   133d8:	sublt	r5, r5, #1
   133dc:	add	r5, r5, ip, lsl #1
   133e0:	cmn	r5, #1
   133e4:	bgt	13400 <__assert_fail@plt+0x156c>
   133e8:	ldr	r0, [sp, #40]	; 0x28
   133ec:	ldm	r0, {r1, r5}
   133f0:	ldr	r0, [sp, #56]	; 0x38
   133f4:	str	r1, [sp, #72]	; 0x48
   133f8:	stm	r0, {r1, r5}
   133fc:	ldr	r1, [r2]
   13400:	mov	ip, r1
   13404:	ldr	r0, [sp, #68]	; 0x44
   13408:	ldr	r1, [sp, #80]	; 0x50
   1340c:	add	r2, r1, r0, lsl #4
   13410:	ldr	r5, [r2, #24]
   13414:	ldr	r1, [r2, #28]
   13418:	adds	r0, r5, r6
   1341c:	mov	r5, #0
   13420:	mvn	r6, #0
   13424:	adcs	r1, r1, r7
   13428:	adcs	r5, r5, #0
   1342c:	movne	r1, r6
   13430:	movne	r0, r6
   13434:	mvn	r5, #0
   13438:	strd	r0, [r3]
   1343c:	ldr	r0, [r2, #32]
   13440:	ldr	r3, [sp, #64]	; 0x40
   13444:	ldr	r1, [r2, #36]	; 0x24
   13448:	adds	r0, r0, r3
   1344c:	ldr	r3, [sp, #60]	; 0x3c
   13450:	adc	r1, r1, r3
   13454:	strd	r0, [r8]
   13458:	ldr	r0, [r2, #40]!	; 0x28
   1345c:	ldr	r1, [sp, #72]	; 0x48
   13460:	cmp	r1, r0
   13464:	ldr	r1, [r2, #4]
   13468:	mov	r0, #0
   1346c:	movwgt	r0, #1
   13470:	sublt	r0, r0, #1
   13474:	cmp	ip, r1
   13478:	mov	r1, #0
   1347c:	movwgt	r1, #1
   13480:	sublt	r1, r1, #1
   13484:	add	r0, r1, r0, lsl #1
   13488:	cmn	r0, #1
   1348c:	ldrdle	r0, [r2]
   13490:	ldrle	r2, [sp, #56]	; 0x38
   13494:	strdle	r0, [r2]
   13498:	ldr	ip, [sp, #96]	; 0x60
   1349c:	ldr	r8, [sp, #76]	; 0x4c
   134a0:	b	138e8 <__assert_fail@plt+0x1a54>
   134a4:	ldr	r1, [r5, #80]	; 0x50
   134a8:	and	r1, r1, #61440	; 0xf000
   134ac:	cmp	r1, #16384	; 0x4000
   134b0:	beq	134c0 <__assert_fail@plt+0x162c>
   134b4:	ldr	r1, [r5, #84]	; 0x54
   134b8:	cmp	r1, #2
   134bc:	bcs	13228 <__assert_fail@plt+0x1394>
   134c0:	mov	r8, #1
   134c4:	cmp	r6, #1
   134c8:	beq	13a84 <__assert_fail@plt+0x1bf0>
   134cc:	cmp	r6, #2
   134d0:	beq	1351c <__assert_fail@plt+0x1688>
   134d4:	cmp	r6, #7
   134d8:	bne	136f8 <__assert_fail@plt+0x1864>
   134dc:	ldr	r4, [r5, #32]
   134e0:	mov	r0, #0
   134e4:	mov	r1, #3
   134e8:	mov	r2, r7
   134ec:	mov	r8, #0
   134f0:	bl	1f710 <__assert_fail@plt+0xd87c>
   134f4:	movw	r2, #41334	; 0xa176
   134f8:	mov	r3, r0
   134fc:	mov	r1, r4
   13500:	movw	r4, #45632	; 0xb240
   13504:	mov	r0, #0
   13508:	movt	r2, #3
   1350c:	movt	r4, #4
   13510:	bl	11bac <error@plt>
   13514:	mov	r6, #7
   13518:	b	136f8 <__assert_fail@plt+0x1864>
   1351c:	mov	r0, sl
   13520:	mov	r1, r5
   13524:	bl	34858 <__assert_fail@plt+0x229c4>
   13528:	cmp	r0, #0
   1352c:	beq	13a84 <__assert_fail@plt+0x1bf0>
   13530:	mov	r0, r4
   13534:	ldr	sl, [r5]
   13538:	ldr	r0, [r4, #40]	; 0x28
   1353c:	cmp	r0, #0
   13540:	bne	135e0 <__assert_fail@plt+0x174c>
   13544:	bl	149b8 <__assert_fail@plt+0x2b24>
   13548:	movw	r1, #45632	; 0xb240
   1354c:	cmp	r0, #0
   13550:	movt	r1, #4
   13554:	str	r0, [r1, #40]	; 0x28
   13558:	beq	13f54 <__assert_fail@plt+0x20c0>
   1355c:	mov	r0, #0
   13560:	bl	1cd10 <__assert_fail@plt+0xae7c>
   13564:	cmp	r0, #0
   13568:	beq	135e0 <__assert_fail@plt+0x174c>
   1356c:	mov	r4, r0
   13570:	ldrb	r0, [r4, #24]
   13574:	tst	r0, #3
   13578:	bne	135c8 <__assert_fail@plt+0x1734>
   1357c:	ldr	r1, [r4, #4]
   13580:	mov	r0, #3
   13584:	sub	r2, fp, #160	; 0xa0
   13588:	bl	11e28 <__xstat64@plt>
   1358c:	cmp	r0, #0
   13590:	bne	135c8 <__assert_fail@plt+0x1734>
   13594:	ldr	r1, [sp, #24]
   13598:	movw	r0, #45632	; 0xb240
   1359c:	movt	r0, #4
   135a0:	ldr	r0, [r0, #40]	; 0x28
   135a4:	ldr	r8, [r1]
   135a8:	ldr	r1, [r1, #4]
   135ac:	ldr	r2, [fp, #-160]	; 0xffffff60
   135b0:	ldr	r3, [fp, #-156]	; 0xffffff64
   135b4:	str	r8, [sp]
   135b8:	str	r1, [sp, #4]
   135bc:	bl	14ac8 <__assert_fail@plt+0x2c34>
   135c0:	cmn	r0, #1
   135c4:	ble	13f54 <__assert_fail@plt+0x20c0>
   135c8:	ldr	r6, [r4, #28]
   135cc:	mov	r0, r4
   135d0:	bl	1d95c <__assert_fail@plt+0xbac8>
   135d4:	cmp	r6, #0
   135d8:	mov	r4, r6
   135dc:	bne	13570 <__assert_fail@plt+0x16dc>
   135e0:	cmp	sl, r5
   135e4:	beq	13624 <__assert_fail@plt+0x1790>
   135e8:	movw	r0, #45632	; 0xb240
   135ec:	ldrd	r2, [r5, #64]	; 0x40
   135f0:	movt	r0, #4
   135f4:	ldr	r0, [r0, #40]	; 0x28
   135f8:	ldr	r6, [r5, #160]	; 0xa0
   135fc:	ldr	r1, [r5, #164]	; 0xa4
   13600:	str	r6, [sp]
   13604:	str	r1, [sp, #4]
   13608:	bl	14c0c <__assert_fail@plt+0x2d78>
   1360c:	cmp	r0, #0
   13610:	bgt	13674 <__assert_fail@plt+0x17e0>
   13614:	ldr	r5, [r5, #4]
   13618:	cmp	r5, #0
   1361c:	cmpne	r5, sl
   13620:	bne	135e8 <__assert_fail@plt+0x1754>
   13624:	movw	r1, #40429	; 0x9ded
   13628:	mov	r0, #0
   1362c:	mov	r2, #5
   13630:	mov	r8, #0
   13634:	movt	r1, #3
   13638:	bl	11ad4 <dcgettext@plt>
   1363c:	mov	r4, r0
   13640:	mov	r0, #0
   13644:	mov	r1, #3
   13648:	mov	r2, r7
   1364c:	bl	1f710 <__assert_fail@plt+0xd87c>
   13650:	mov	r3, r0
   13654:	mov	r0, #0
   13658:	mov	r1, #0
   1365c:	mov	r2, r4
   13660:	bl	11bac <error@plt>
   13664:	ldr	sl, [sp, #84]	; 0x54
   13668:	movw	r4, #45632	; 0xb240
   1366c:	movt	r4, #4
   13670:	b	13a84 <__assert_fail@plt+0x1bf0>
   13674:	ldr	sl, [sp, #84]	; 0x54
   13678:	movw	r4, #45632	; 0xb240
   1367c:	mov	r8, #1
   13680:	movt	r4, #4
   13684:	b	13a84 <__assert_fail@plt+0x1bf0>
   13688:	ldrh	r6, [r5, #56]	; 0x38
   1368c:	ldr	r7, [r5, #28]
   13690:	cmp	r6, #6
   13694:	beq	136f0 <__assert_fail@plt+0x185c>
   13698:	cmp	r6, #4
   1369c:	bne	13864 <__assert_fail@plt+0x19d0>
   136a0:	ldr	sl, [r5, #32]
   136a4:	movw	r1, #40342	; 0x9d96
   136a8:	mov	r0, #0
   136ac:	mov	r2, #5
   136b0:	mov	r8, #0
   136b4:	movt	r1, #3
   136b8:	bl	11ad4 <dcgettext@plt>
   136bc:	mov	r4, r0
   136c0:	mov	r0, #4
   136c4:	mov	r1, r7
   136c8:	mov	r6, #4
   136cc:	bl	1f494 <__assert_fail@plt+0xd600>
   136d0:	mov	r3, r0
   136d4:	mov	r2, r4
   136d8:	movw	r4, #45632	; 0xb240
   136dc:	mov	r0, #0
   136e0:	mov	r1, sl
   136e4:	movt	r4, #4
   136e8:	bl	11bac <error@plt>
   136ec:	b	136f8 <__assert_fail@plt+0x1864>
   136f0:	mov	r6, #6
   136f4:	mov	r8, #1
   136f8:	add	r0, sp, #120	; 0x78
   136fc:	stm	r0, {r6, r8, r9}
   13700:	ldrb	r0, [r4, #2]
   13704:	cmp	r0, #1
   13708:	bne	13750 <__assert_fail@plt+0x18bc>
   1370c:	ldr	r0, [r5, #112]	; 0x70
   13710:	ldr	r9, [r5, #116]	; 0x74
   13714:	mov	sl, #0
   13718:	rsbs	r1, r0, #0
   1371c:	rscs	r1, r9, #0
   13720:	movwlt	sl, #1
   13724:	cmp	sl, #0
   13728:	moveq	r9, sl
   1372c:	movne	sl, r0
   13730:	ldr	r0, [r4, #20]
   13734:	str	r7, [sp, #100]	; 0x64
   13738:	cmp	r0, #2
   1373c:	beq	13770 <__assert_fail@plt+0x18dc>
   13740:	cmp	r0, #0
   13744:	addne	r0, r5, #152	; 0x98
   13748:	addeq	r0, r5, #144	; 0x90
   1374c:	b	13774 <__assert_fail@plt+0x18e0>
   13750:	ldrd	r0, [r5, #128]	; 0x80
   13754:	lsl	r1, r1, #9
   13758:	lsl	sl, r0, #9
   1375c:	orr	r9, r1, r0, lsr #23
   13760:	ldr	r0, [r4, #20]
   13764:	str	r7, [sp, #100]	; 0x64
   13768:	cmp	r0, #2
   1376c:	bne	13740 <__assert_fail@plt+0x18ac>
   13770:	add	r0, r5, #136	; 0x88
   13774:	ldr	ip, [r5, #48]	; 0x30
   13778:	ldm	r0, {r8, lr}
   1377c:	ldr	r0, [sp, #92]	; 0x5c
   13780:	mov	r1, #1
   13784:	mov	r2, #0
   13788:	str	r9, [sp, #148]	; 0x94
   1378c:	str	sl, [sp, #144]	; 0x90
   13790:	stm	r0, {r1, r2}
   13794:	ldr	r0, [sp, #88]	; 0x58
   13798:	stm	r0, {r8, lr}
   1379c:	ldr	r1, [r4, #48]	; 0x30
   137a0:	cmp	r1, #0
   137a4:	beq	138a8 <__assert_fail@plt+0x1a14>
   137a8:	ldr	r0, [r4, #44]	; 0x2c
   137ac:	cmp	ip, r0
   137b0:	beq	138cc <__assert_fail@plt+0x1a38>
   137b4:	mvn	r5, #0
   137b8:	bls	130e8 <__assert_fail@plt+0x1254>
   137bc:	mov	r2, #0
   137c0:	cmp	r1, ip
   137c4:	str	r2, [sp, #112]	; 0x70
   137c8:	mov	r2, #1
   137cc:	str	r2, [sp, #116]	; 0x74
   137d0:	bhi	13808 <__assert_fail@plt+0x1974>
   137d4:	ldr	r0, [r4, #52]	; 0x34
   137d8:	mov	r1, ip
   137dc:	mov	r2, #96	; 0x60
   137e0:	mov	r5, ip
   137e4:	mov	r7, lr
   137e8:	bl	3422c <__assert_fail@plt+0x22398>
   137ec:	mov	ip, r5
   137f0:	mov	r1, r0
   137f4:	mov	lr, r7
   137f8:	mvn	r5, #0
   137fc:	lsl	r0, ip, #1
   13800:	strd	r0, [r4, #48]	; 0x30
   13804:	ldr	r0, [r4, #44]	; 0x2c
   13808:	add	r1, r0, #1
   1380c:	cmp	r1, ip
   13810:	bhi	13858 <__assert_fail@plt+0x19c4>
   13814:	ldr	r2, [r4, #52]	; 0x34
   13818:	add	r0, r0, r0, lsl #1
   1381c:	mov	r3, #-2147483648	; 0x80000000
   13820:	add	r0, r2, r0, lsl #4
   13824:	add	r0, r0, #92	; 0x5c
   13828:	add	r1, r1, #1
   1382c:	sub	r2, r0, #44	; 0x2c
   13830:	str	r3, [r0, #-28]	; 0xffffffe4
   13834:	str	r5, [r0, #-24]	; 0xffffffe8
   13838:	str	r3, [r0, #-4]
   1383c:	str	r5, [r0]
   13840:	vst1.64	{d8-d9}, [r2]
   13844:	sub	r2, r0, #20
   13848:	add	r0, r0, #48	; 0x30
   1384c:	cmp	r1, ip
   13850:	vst1.64	{d8-d9}, [r2]
   13854:	bls	13828 <__assert_fail@plt+0x1994>
   13858:	str	sl, [sp, #108]	; 0x6c
   1385c:	str	r9, [sp, #104]	; 0x68
   13860:	b	138e8 <__assert_fail@plt+0x1a54>
   13864:	ldr	r0, [r4, #12]
   13868:	mov	r1, r7
   1386c:	bl	15604 <__assert_fail@plt+0x3770>
   13870:	cmp	r0, #0
   13874:	beq	13064 <__assert_fail@plt+0x11d0>
   13878:	mov	r8, #1
   1387c:	cmp	r6, #1
   13880:	bne	13a84 <__assert_fail@plt+0x1bf0>
   13884:	mov	r0, sl
   13888:	mov	r1, r5
   1388c:	mov	r2, #4
   13890:	bl	1a184 <__assert_fail@plt+0x82f0>
   13894:	mov	r0, sl
   13898:	bl	188f0 <__assert_fail@plt+0x6a5c>
   1389c:	cmp	r0, r5
   138a0:	beq	13a84 <__assert_fail@plt+0x1bf0>
   138a4:	b	13ed0 <__assert_fail@plt+0x203c>
   138a8:	add	r0, ip, #10
   138ac:	mov	r1, #48	; 0x30
   138b0:	mov	r5, ip
   138b4:	mov	r7, lr
   138b8:	str	r0, [r4, #48]	; 0x30
   138bc:	bl	3467c <__assert_fail@plt+0x227e8>
   138c0:	mov	lr, r7
   138c4:	mov	ip, r5
   138c8:	str	r0, [r4, #52]	; 0x34
   138cc:	mov	r0, #0
   138d0:	str	sl, [sp, #108]	; 0x6c
   138d4:	str	r9, [sp, #104]	; 0x68
   138d8:	mvn	r5, #0
   138dc:	str	r0, [sp, #112]	; 0x70
   138e0:	mov	r0, #1
   138e4:	str	r0, [sp, #116]	; 0x74
   138e8:	ldr	r0, [sp, #120]	; 0x78
   138ec:	str	ip, [r4, #44]	; 0x2c
   138f0:	orr	r2, r0, #2
   138f4:	cmp	r2, #6
   138f8:	bne	13908 <__assert_fail@plt+0x1a74>
   138fc:	ldrb	r0, [r4, #5]
   13900:	cmp	r0, #0
   13904:	bne	13988 <__assert_fail@plt+0x1af4>
   13908:	ldr	r3, [r4, #52]	; 0x34
   1390c:	add	r0, ip, ip, lsl #1
   13910:	ldr	r0, [r3, r0, lsl #4]!
   13914:	ldmib	r3, {r1, r7}
   13918:	ldr	r6, [r3, #12]
   1391c:	str	ip, [sp, #96]	; 0x60
   13920:	ldr	ip, [r3, #20]
   13924:	adds	r7, r7, #1
   13928:	adc	r4, r6, #0
   1392c:	adds	r0, r0, sl
   13930:	mov	r6, #0
   13934:	adcs	r1, r1, r9
   13938:	adcs	r6, r6, #0
   1393c:	movne	r1, r5
   13940:	movne	r0, r5
   13944:	stm	r3, {r0, r1, r7}
   13948:	str	r4, [r3, #12]
   1394c:	mov	r1, #0
   13950:	movw	r4, #45632	; 0xb240
   13954:	ldr	r0, [r3, #16]!
   13958:	movt	r4, #4
   1395c:	cmp	r0, r8
   13960:	mov	r0, #0
   13964:	movwgt	r0, #1
   13968:	sublt	r0, r0, #1
   1396c:	cmp	ip, lr
   13970:	ldr	ip, [sp, #96]	; 0x60
   13974:	movwgt	r1, #1
   13978:	sublt	r1, r1, #1
   1397c:	add	r0, r1, r0, lsl #1
   13980:	cmn	r0, #1
   13984:	stmle	r3, {r8, lr}
   13988:	add	r7, r4, #80	; 0x50
   1398c:	mov	r6, #0
   13990:	ldm	r7, {r0, r1, r3, r7}
   13994:	adds	r3, r3, #1
   13998:	adc	r7, r7, #0
   1399c:	adds	r0, r0, sl
   139a0:	adcs	r1, r1, r9
   139a4:	adcs	r6, r6, #0
   139a8:	movne	r1, r5
   139ac:	movne	r0, r5
   139b0:	add	r5, r4, #80	; 0x50
   139b4:	stm	r5, {r0, r1, r3, r7}
   139b8:	ldr	r0, [r4, #96]	; 0x60
   139bc:	ldr	r1, [r4, #100]	; 0x64
   139c0:	cmp	r0, r8
   139c4:	mov	r0, #0
   139c8:	movwgt	r0, #1
   139cc:	sublt	r0, r0, #1
   139d0:	cmp	r1, lr
   139d4:	mov	r1, #0
   139d8:	movwgt	r1, #1
   139dc:	sublt	r1, r1, #1
   139e0:	add	r0, r1, r0, lsl #1
   139e4:	cmn	r0, #1
   139e8:	movw	r0, #45512	; 0xb1c8
   139ec:	strle	r8, [r4, #96]	; 0x60
   139f0:	strle	lr, [r4, #100]	; 0x64
   139f4:	movt	r0, #4
   139f8:	cmp	r2, #6
   139fc:	ldr	r3, [r0]
   13a00:	ldr	r9, [sp, #128]	; 0x80
   13a04:	ldr	sl, [sp, #84]	; 0x54
   13a08:	ldr	r8, [sp, #124]	; 0x7c
   13a0c:	bne	13a50 <__assert_fail@plt+0x1bbc>
   13a10:	cmp	ip, r3
   13a14:	bhi	13a50 <__assert_fail@plt+0x1bbc>
   13a18:	ldrb	r0, [r4, #6]
   13a1c:	ldr	r6, [sp, #104]	; 0x68
   13a20:	ldr	r7, [sp, #108]	; 0x6c
   13a24:	ldrd	r2, [r4, #64]	; 0x40
   13a28:	cmp	r0, #0
   13a2c:	ldr	r0, [sp, #112]	; 0x70
   13a30:	movne	r6, r0
   13a34:	ldr	r0, [sp, #116]	; 0x74
   13a38:	movne	r7, r0
   13a3c:	cmn	r3, #1
   13a40:	ble	13a68 <__assert_fail@plt+0x1bd4>
   13a44:	subs	r0, r7, r2
   13a48:	sbcs	r0, r6, r3
   13a4c:	b	13a78 <__assert_fail@plt+0x1be4>
   13a50:	ldrb	r0, [r4, #1]
   13a54:	cmp	r0, #1
   13a58:	bne	13058 <__assert_fail@plt+0x11c4>
   13a5c:	cmp	ip, r3
   13a60:	bls	13a18 <__assert_fail@plt+0x1b84>
   13a64:	b	13a84 <__assert_fail@plt+0x1bf0>
   13a68:	rsbs	r0, r2, #0
   13a6c:	rsc	r1, r3, #0
   13a70:	subs	r0, r0, r7
   13a74:	sbcs	r0, r1, r6
   13a78:	ldr	r1, [sp, #100]	; 0x64
   13a7c:	addcs	r0, sp, #144	; 0x90
   13a80:	blcs	14094 <__assert_fail@plt+0x2200>
   13a84:	mov	r0, sl
   13a88:	and	r9, r9, r8
   13a8c:	bl	188f0 <__assert_fail@plt+0x6a5c>
   13a90:	mov	r5, r0
   13a94:	cmp	r0, #0
   13a98:	bne	13688 <__assert_fail@plt+0x17f4>
   13a9c:	b	13aa4 <__assert_fail@plt+0x1c10>
   13aa0:	mov	r9, #1
   13aa4:	bl	11ca8 <__errno_location@plt>
   13aa8:	ldr	r5, [r0]
   13aac:	mov	r8, r0
   13ab0:	cmp	r5, #0
   13ab4:	beq	13b00 <__assert_fail@plt+0x1c6c>
   13ab8:	movw	r1, #40305	; 0x9d71
   13abc:	mov	r0, #0
   13ac0:	mov	r2, #5
   13ac4:	mov	r9, #0
   13ac8:	movt	r1, #3
   13acc:	bl	11ad4 <dcgettext@plt>
   13ad0:	ldr	r2, [sl, #24]
   13ad4:	mov	r4, r0
   13ad8:	mov	r0, #0
   13adc:	mov	r1, #3
   13ae0:	bl	1f710 <__assert_fail@plt+0xd87c>
   13ae4:	mov	r3, r0
   13ae8:	mov	r2, r4
   13aec:	movw	r4, #45632	; 0xb240
   13af0:	mov	r0, #0
   13af4:	mov	r1, r5
   13af8:	movt	r4, #4
   13afc:	bl	11bac <error@plt>
   13b00:	mov	r0, #0
   13b04:	str	r0, [r4, #44]	; 0x2c
   13b08:	mov	r0, sl
   13b0c:	bl	18748 <__assert_fail@plt+0x68b4>
   13b10:	cmp	r0, #0
   13b14:	beq	13b44 <__assert_fail@plt+0x1cb0>
   13b18:	ldr	r4, [r8]
   13b1c:	movw	r1, #40325	; 0x9d85
   13b20:	mov	r0, #0
   13b24:	mov	r2, #5
   13b28:	mov	r9, #0
   13b2c:	movt	r1, #3
   13b30:	bl	11ad4 <dcgettext@plt>
   13b34:	mov	r2, r0
   13b38:	mov	r0, #0
   13b3c:	mov	r1, r4
   13b40:	bl	11bac <error@plt>
   13b44:	ldr	r0, [sp, #36]	; 0x24
   13b48:	cmp	r9, #0
   13b4c:	movwne	r9, #1
   13b50:	and	r4, r0, r9
   13b54:	b	13c34 <__assert_fail@plt+0x1da0>
   13b58:	movw	r1, #39116	; 0x98cc
   13b5c:	mov	r0, #0
   13b60:	mov	r2, #5
   13b64:	movt	r1, #3
   13b68:	bl	11ad4 <dcgettext@plt>
   13b6c:	mov	r6, r0
   13b70:	mov	r0, #4
   13b74:	mov	r1, r5
   13b78:	bl	1f494 <__assert_fail@plt+0xd600>
   13b7c:	mov	r3, r0
   13b80:	mov	r0, #0
   13b84:	mov	r1, #0
   13b88:	mov	r2, r6
   13b8c:	bl	11bac <error@plt>
   13b90:	mov	r0, #1
   13b94:	ldrb	r1, [r5]
   13b98:	cmp	r1, #0
   13b9c:	bne	13004 <__assert_fail@plt+0x1170>
   13ba0:	cmp	r4, #0
   13ba4:	beq	13c04 <__assert_fail@plt+0x1d70>
   13ba8:	ldr	r0, [sp, #48]	; 0x30
   13bac:	mov	r6, r4
   13bb0:	bl	1485c <__assert_fail@plt+0x29c8>
   13bb4:	mov	r5, r0
   13bb8:	mov	r0, #0
   13bbc:	mov	r1, #3
   13bc0:	mov	r2, r6
   13bc4:	mov	r4, #0
   13bc8:	bl	1f710 <__assert_fail@plt+0xd87c>
   13bcc:	movw	r1, #39179	; 0x990b
   13bd0:	mov	r6, r0
   13bd4:	mov	r0, #0
   13bd8:	mov	r2, #5
   13bdc:	movt	r1, #3
   13be0:	bl	11ad4 <dcgettext@plt>
   13be4:	movw	r2, #39209	; 0x9929
   13be8:	str	r0, [sp, #4]
   13bec:	mov	r0, #0
   13bf0:	mov	r1, #0
   13bf4:	mov	r3, r6
   13bf8:	str	r5, [sp]
   13bfc:	movt	r2, #3
   13c00:	b	13c30 <__assert_fail@plt+0x1d9c>
   13c04:	movw	r1, #39179	; 0x990b
   13c08:	mov	r0, #0
   13c0c:	mov	r2, #5
   13c10:	mov	r4, #0
   13c14:	movt	r1, #3
   13c18:	bl	11ad4 <dcgettext@plt>
   13c1c:	movw	r2, #41334	; 0xa176
   13c20:	mov	r3, r0
   13c24:	mov	r0, #0
   13c28:	mov	r1, #0
   13c2c:	movt	r2, #3
   13c30:	bl	11bac <error@plt>
   13c34:	ldr	r0, [sp, #48]	; 0x30
   13c38:	add	r1, sp, #132	; 0x84
   13c3c:	bl	147a4 <__assert_fail@plt+0x2910>
   13c40:	cmp	r4, #0
   13c44:	mov	r5, r0
   13c48:	movwne	r4, #1
   13c4c:	cmp	r0, #0
   13c50:	bne	12fac <__assert_fail@plt+0x1118>
   13c54:	ldr	r0, [sp, #132]	; 0x84
   13c58:	cmp	r0, #2
   13c5c:	beq	13d0c <__assert_fail@plt+0x1e78>
   13c60:	cmp	r0, #4
   13c64:	bne	13f4c <__assert_fail@plt+0x20b8>
   13c68:	bl	11ca8 <__errno_location@plt>
   13c6c:	ldr	r5, [r0]
   13c70:	movw	r1, #39029	; 0x9875
   13c74:	mov	r0, #0
   13c78:	mov	r2, #5
   13c7c:	mov	r4, #0
   13c80:	movt	r1, #3
   13c84:	bl	11ad4 <dcgettext@plt>
   13c88:	ldr	r2, [sp, #44]	; 0x2c
   13c8c:	mov	r6, r0
   13c90:	mov	r0, #0
   13c94:	mov	r1, #3
   13c98:	bl	1f710 <__assert_fail@plt+0xd87c>
   13c9c:	mov	r3, r0
   13ca0:	mov	r0, #0
   13ca4:	mov	r1, r5
   13ca8:	mov	r2, r6
   13cac:	bl	11bac <error@plt>
   13cb0:	b	13d0c <__assert_fail@plt+0x1e78>
   13cb4:	add	r0, sp, #136	; 0x88
   13cb8:	cmp	r1, r9
   13cbc:	addlt	r0, r8, r1, lsl #2
   13cc0:	bl	1473c <__assert_fail@plt+0x28a8>
   13cc4:	ldr	r1, [r5]
   13cc8:	mov	r5, r0
   13ccc:	add	r0, r1, #1
   13cd0:	mov	r1, #0
   13cd4:	cmp	r0, r9
   13cd8:	sub	r0, r7, #2
   13cdc:	clz	r0, r0
   13ce0:	movwlt	r1, #1
   13ce4:	lsr	r0, r0, #5
   13ce8:	orr	r0, r0, r1
   13cec:	cmp	r5, #0
   13cf0:	strb	r0, [sl, #8]
   13cf4:	bne	12f34 <__assert_fail@plt+0x10a0>
   13cf8:	b	13f54 <__assert_fail@plt+0x20c0>
   13cfc:	mov	r4, #1
   13d00:	ldr	r0, [sp, #132]	; 0x84
   13d04:	cmp	r0, #2
   13d08:	bne	13c60 <__assert_fail@plt+0x1dcc>
   13d0c:	ldr	r0, [sp, #48]	; 0x30
   13d10:	bl	14880 <__assert_fail@plt+0x29ec>
   13d14:	movw	r0, #45632	; 0xb240
   13d18:	movt	r0, #4
   13d1c:	mov	r5, r0
   13d20:	ldr	r0, [r0, #36]	; 0x24
   13d24:	bl	14a90 <__assert_fail@plt+0x2bfc>
   13d28:	ldr	r0, [r5, #40]	; 0x28
   13d2c:	cmp	r0, #0
   13d30:	beq	13d38 <__assert_fail@plt+0x1ea4>
   13d34:	bl	14a90 <__assert_fail@plt+0x2bfc>
   13d38:	ldr	r0, [sp, #44]	; 0x2c
   13d3c:	cmp	r0, #0
   13d40:	beq	13db0 <__assert_fail@plt+0x1f1c>
   13d44:	movw	r0, #45616	; 0xb230
   13d48:	movt	r0, #4
   13d4c:	ldr	r0, [r0]
   13d50:	ldrb	r1, [r0]
   13d54:	tst	r1, #32
   13d58:	bne	13da8 <__assert_fail@plt+0x1f14>
   13d5c:	bl	15ff8 <__assert_fail@plt+0x4164>
   13d60:	cmp	r0, #0
   13d64:	beq	13db0 <__assert_fail@plt+0x1f1c>
   13d68:	eors	r0, r4, #1
   13d6c:	bne	13db0 <__assert_fail@plt+0x1f1c>
   13d70:	movw	r1, #39220	; 0x9934
   13d74:	mov	r0, #0
   13d78:	mov	r2, #5
   13d7c:	movt	r1, #3
   13d80:	bl	11ad4 <dcgettext@plt>
   13d84:	ldr	r1, [sp, #44]	; 0x2c
   13d88:	mov	r4, r0
   13d8c:	mov	r0, #4
   13d90:	bl	1f494 <__assert_fail@plt+0xd600>
   13d94:	mov	r3, r0
   13d98:	mov	r0, #1
   13d9c:	mov	r1, #0
   13da0:	mov	r2, r4
   13da4:	bl	11bac <error@plt>
   13da8:	cmp	r4, #0
   13dac:	bne	13d70 <__assert_fail@plt+0x1edc>
   13db0:	movw	r5, #45632	; 0xb240
   13db4:	movt	r5, #4
   13db8:	ldrb	r0, [r5, #3]
   13dbc:	cmp	r0, #1
   13dc0:	bne	13de4 <__assert_fail@plt+0x1f50>
   13dc4:	movw	r1, #39237	; 0x9945
   13dc8:	mov	r0, #0
   13dcc:	mov	r2, #5
   13dd0:	movt	r1, #3
   13dd4:	bl	11ad4 <dcgettext@plt>
   13dd8:	mov	r1, r0
   13ddc:	add	r0, r5, #80	; 0x50
   13de0:	bl	14094 <__assert_fail@plt+0x2200>
   13de4:	eor	r0, r4, #1
   13de8:	sub	sp, fp, #48	; 0x30
   13dec:	vpop	{d8-d9}
   13df0:	add	sp, sp, #4
   13df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13df8:	movw	r6, #41140	; 0xa0b4
   13dfc:	movt	r6, #3
   13e00:	add	r5, r5, #6
   13e04:	mov	r1, r6
   13e08:	mov	r2, #6
   13e0c:	mov	r0, r5
   13e10:	str	r5, [sl, #28]
   13e14:	bl	11e4c <strncmp@plt>
   13e18:	cmp	r0, #0
   13e1c:	beq	13e00 <__assert_fail@plt+0x1f6c>
   13e20:	b	12de8 <__assert_fail@plt+0xf54>
   13e24:	movw	r0, #45516	; 0xb1cc
   13e28:	movw	r2, #38620	; 0x96dc
   13e2c:	movw	r7, #38608	; 0x96d0
   13e30:	movw	r6, #38592	; 0x96c0
   13e34:	movw	r5, #38574	; 0x96ae
   13e38:	mov	r1, #0
   13e3c:	movt	r0, #4
   13e40:	movt	r2, #3
   13e44:	movt	r7, #3
   13e48:	movt	r6, #3
   13e4c:	movt	r5, #3
   13e50:	ldr	r3, [r0]
   13e54:	movw	r0, #45620	; 0xb234
   13e58:	movt	r0, #4
   13e5c:	ldr	r0, [r0]
   13e60:	stm	sp, {r5, r6, r7}
   13e64:	str	r2, [sp, #12]
   13e68:	movw	r2, #38560	; 0x96a0
   13e6c:	str	r1, [sp, #16]
   13e70:	movw	r1, #38414	; 0x960e
   13e74:	movt	r1, #3
   13e78:	movt	r2, #3
   13e7c:	bl	34034 <__assert_fail@plt+0x221a0>
   13e80:	mov	r0, #0
   13e84:	bl	11c60 <exit@plt>
   13e88:	mov	r0, #0
   13e8c:	bl	11f90 <__assert_fail@plt+0xfc>
   13e90:	movw	r0, #40615	; 0x9ea7
   13e94:	movw	r1, #39084	; 0x98ac
   13e98:	movw	r3, #40376	; 0x9db8
   13e9c:	movw	r2, #638	; 0x27e
   13ea0:	movt	r0, #3
   13ea4:	movt	r1, #3
   13ea8:	movt	r3, #3
   13eac:	bl	11e94 <__assert_fail@plt>
   13eb0:	movw	r0, #40367	; 0x9daf
   13eb4:	movw	r1, #39084	; 0x98ac
   13eb8:	movw	r3, #40376	; 0x9db8
   13ebc:	movw	r2, #527	; 0x20f
   13ec0:	movt	r0, #3
   13ec4:	movt	r1, #3
   13ec8:	movt	r3, #3
   13ecc:	bl	11e94 <__assert_fail@plt>
   13ed0:	movw	r0, #40367	; 0x9daf
   13ed4:	movw	r1, #39084	; 0x98ac
   13ed8:	movw	r3, #40376	; 0x9db8
   13edc:	mov	r2, #560	; 0x230
   13ee0:	movt	r0, #3
   13ee4:	movt	r1, #3
   13ee8:	movt	r3, #3
   13eec:	bl	11e94 <__assert_fail@plt>
   13ef0:	ldr	r2, [r5]
   13ef4:	ldr	r1, [sp, #144]	; 0x90
   13ef8:	movw	r3, #40680	; 0x9ee8
   13efc:	movt	r3, #3
   13f00:	str	r2, [sp]
   13f04:	mov	r2, #116	; 0x74
   13f08:	bl	361e8 <__assert_fail@plt+0x24354>
   13f0c:	ldr	r2, [sl]
   13f10:	ldr	r1, [sp, #144]	; 0x90
   13f14:	movw	r3, #40680	; 0x9ee8
   13f18:	movt	r3, #3
   13f1c:	str	r2, [sp]
   13f20:	mov	r2, #66	; 0x42
   13f24:	bl	361e8 <__assert_fail@plt+0x24354>
   13f28:	movw	r1, #38516	; 0x9674
   13f2c:	mov	r0, #0
   13f30:	mov	r2, #5
   13f34:	movt	r1, #3
   13f38:	bl	11ad4 <dcgettext@plt>
   13f3c:	mov	r2, r0
   13f40:	mov	r0, #1
   13f44:	mov	r1, #0
   13f48:	bl	11bac <error@plt>
   13f4c:	cmp	r0, #3
   13f50:	bne	13f8c <__assert_fail@plt+0x20f8>
   13f54:	bl	347c8 <__assert_fail@plt+0x22934>
   13f58:	mov	r0, #1
   13f5c:	bl	11f90 <__assert_fail@plt+0xfc>
   13f60:	movw	r1, #38633	; 0x96e9
   13f64:	mov	r0, #0
   13f68:	mov	r2, #5
   13f6c:	movt	r1, #3
   13f70:	bl	11ad4 <dcgettext@plt>
   13f74:	mov	r2, r0
   13f78:	mov	r0, #0
   13f7c:	mov	r1, #0
   13f80:	bl	11bac <error@plt>
   13f84:	mov	r0, #1
   13f88:	bl	11f90 <__assert_fail@plt+0xfc>
   13f8c:	movw	r0, #39044	; 0x9884
   13f90:	movw	r1, #39084	; 0x98ac
   13f94:	movw	r3, #39093	; 0x98b5
   13f98:	movw	r2, #1081	; 0x439
   13f9c:	movt	r0, #3
   13fa0:	movt	r1, #3
   13fa4:	movt	r3, #3
   13fa8:	bl	11e94 <__assert_fail@plt>
   13fac:	movw	r1, #38933	; 0x9815
   13fb0:	mov	r0, #0
   13fb4:	mov	r2, #5
   13fb8:	movt	r1, #3
   13fbc:	bl	11ad4 <dcgettext@plt>
   13fc0:	mov	r4, r0
   13fc4:	ldr	r0, [r5]
   13fc8:	ldr	r0, [r8, r0, lsl #2]
   13fcc:	bl	1f9bc <__assert_fail@plt+0xdb28>
   13fd0:	mov	r3, r0
   13fd4:	mov	r0, #0
   13fd8:	mov	r1, #0
   13fdc:	mov	r2, r4
   13fe0:	bl	11bac <error@plt>
   13fe4:	movw	r0, #45608	; 0xb228
   13fe8:	movw	r1, #38950	; 0x9826
   13fec:	mov	r2, #5
   13ff0:	movt	r0, #4
   13ff4:	movt	r1, #3
   13ff8:	ldr	r4, [r0]
   13ffc:	mov	r0, #0
   14000:	bl	11ad4 <dcgettext@plt>
   14004:	movw	r2, #40611	; 0x9ea3
   14008:	mov	r3, r0
   1400c:	mov	r0, r4
   14010:	mov	r1, #1
   14014:	movt	r2, #3
   14018:	bl	11d08 <__fprintf_chk@plt>
   1401c:	mov	r0, #1
   14020:	bl	11f90 <__assert_fail@plt+0xfc>
   14024:	movw	r1, #38732	; 0x974c
   14028:	mov	r0, #0
   1402c:	mov	r2, #5
   14030:	movt	r1, #3
   14034:	bl	11ad4 <dcgettext@plt>
   14038:	mov	r2, r0
   1403c:	mov	r0, #0
   14040:	mov	r1, #0
   14044:	mov	r3, r5
   14048:	bl	11bac <error@plt>
   1404c:	mov	r0, #1
   14050:	bl	11f90 <__assert_fail@plt+0xfc>
   14054:	bl	11ca8 <__errno_location@plt>
   14058:	ldr	r5, [r0]
   1405c:	movw	r1, #39002	; 0x985a
   14060:	mov	r0, #0
   14064:	mov	r2, #5
   14068:	movt	r1, #3
   1406c:	bl	11ad4 <dcgettext@plt>
   14070:	mov	r6, r0
   14074:	mov	r0, #4
   14078:	mov	r1, r7
   1407c:	bl	1f494 <__assert_fail@plt+0xd600>
   14080:	mov	r3, r0
   14084:	mov	r0, #1
   14088:	mov	r1, r5
   1408c:	mov	r2, r6
   14090:	bl	11bac <error@plt>
   14094:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14098:	add	fp, sp, #28
   1409c:	sub	sp, sp, #708	; 0x2c4
   140a0:	movw	sl, #45632	; 0xb240
   140a4:	mov	r5, r0
   140a8:	mov	r8, r1
   140ac:	movt	sl, #4
   140b0:	ldrb	r0, [sl, #6]
   140b4:	cmp	r0, #0
   140b8:	mov	r0, r5
   140bc:	addne	r0, r0, #8
   140c0:	ldrd	r0, [r0]
   140c4:	and	r2, r0, r1
   140c8:	cmn	r2, #1
   140cc:	beq	140fc <__assert_fail@plt+0x2268>
   140d0:	ldr	r3, [sl, #16]
   140d4:	ldr	r2, [sl, #56]	; 0x38
   140d8:	ldr	r7, [sl, #60]	; 0x3c
   140dc:	mov	r6, #0
   140e0:	mov	r4, #1
   140e4:	stm	sp, {r4, r6}
   140e8:	str	r2, [sp, #8]
   140ec:	add	r2, sp, #20
   140f0:	str	r7, [sp, #12]
   140f4:	bl	1b9c0 <__assert_fail@plt+0x9b2c>
   140f8:	b	14110 <__assert_fail@plt+0x227c>
   140fc:	movw	r1, #40645	; 0x9ec5
   14100:	mov	r0, #0
   14104:	mov	r2, #5
   14108:	movt	r1, #3
   1410c:	bl	11ad4 <dcgettext@plt>
   14110:	movw	r9, #45620	; 0xb234
   14114:	movt	r9, #4
   14118:	ldr	r1, [r9]
   1411c:	bl	119c0 <fputs_unlocked@plt>
   14120:	ldrb	r0, [sl, #7]
   14124:	cmp	r0, #1
   14128:	bne	141f0 <__assert_fail@plt+0x235c>
   1412c:	ldr	r0, [r9]
   14130:	ldr	r1, [r0, #20]
   14134:	ldr	r2, [r0, #24]
   14138:	cmp	r1, r2
   1413c:	bcs	14224 <__assert_fail@plt+0x2390>
   14140:	add	r2, r1, #1
   14144:	str	r2, [r0, #20]
   14148:	mov	r0, #9
   1414c:	strb	r0, [r1]
   14150:	ldrd	r0, [r5, #16]
   14154:	ldr	r6, [sl, #24]
   14158:	ldr	r7, [sl, #32]
   1415c:	add	r2, sp, #20
   14160:	str	r1, [fp, #-36]	; 0xffffffdc
   14164:	str	r0, [fp, #-40]	; 0xffffffd8
   14168:	sub	r1, fp, #40	; 0x28
   1416c:	mov	r0, r6
   14170:	bl	3330c <__assert_fail@plt+0x21478>
   14174:	cmp	r0, #0
   14178:	beq	1419c <__assert_fail@plt+0x2308>
   1417c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14180:	ldr	r0, [r9]
   14184:	add	r2, sp, #20
   14188:	mov	r3, r6
   1418c:	str	r1, [sp]
   14190:	mov	r1, r7
   14194:	bl	160fc <__assert_fail@plt+0x4268>
   14198:	b	141f0 <__assert_fail@plt+0x235c>
   1419c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   141a0:	sub	r2, fp, #61	; 0x3d
   141a4:	asr	r1, r0, #31
   141a8:	bl	1c788 <__assert_fail@plt+0xa8f4>
   141ac:	movw	r1, #40654	; 0x9ece
   141b0:	mov	r5, r0
   141b4:	mov	r0, #0
   141b8:	mov	r2, #5
   141bc:	movt	r1, #3
   141c0:	bl	11ad4 <dcgettext@plt>
   141c4:	mov	r6, r0
   141c8:	mov	r0, r5
   141cc:	bl	1f9bc <__assert_fail@plt+0xdb28>
   141d0:	mov	r3, r0
   141d4:	mov	r0, #0
   141d8:	mov	r1, #0
   141dc:	mov	r2, r6
   141e0:	bl	11bac <error@plt>
   141e4:	ldr	r1, [r9]
   141e8:	mov	r0, r5
   141ec:	bl	119c0 <fputs_unlocked@plt>
   141f0:	ldrb	r0, [sl]
   141f4:	movw	r1, #40639	; 0x9ebf
   141f8:	mov	r3, #10
   141fc:	mov	r2, r8
   14200:	movt	r1, #3
   14204:	cmp	r0, #0
   14208:	mov	r0, #1
   1420c:	movwne	r3, #0
   14210:	bl	11cf0 <__printf_chk@plt>
   14214:	ldr	r0, [r9]
   14218:	bl	11b28 <fflush_unlocked@plt>
   1421c:	sub	sp, fp, #28
   14220:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14224:	mov	r1, #9
   14228:	bl	11d50 <__overflow@plt>
   1422c:	b	14150 <__assert_fail@plt+0x22bc>
   14230:	mov	r0, #1
   14234:	b	11f90 <__assert_fail@plt+0xfc>
   14238:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1423c:	add	fp, sp, #28
   14240:	sub	sp, sp, #12
   14244:	mov	r4, r3
   14248:	mov	r9, r2
   1424c:	mov	r7, r1
   14250:	mov	r8, r0
   14254:	bl	11c78 <strlen@plt>
   14258:	ldr	r6, [r7]
   1425c:	cmp	r6, #0
   14260:	beq	1430c <__assert_fail@plt+0x2478>
   14264:	mov	r5, r0
   14268:	cmp	r9, #0
   1426c:	beq	1431c <__assert_fail@plt+0x2488>
   14270:	add	r0, r7, #4
   14274:	mvn	sl, #0
   14278:	mov	r7, #0
   1427c:	str	r9, [sp]
   14280:	str	r0, [sp, #8]
   14284:	mov	r0, #0
   14288:	str	r0, [sp, #4]
   1428c:	mov	r0, r9
   14290:	mov	r0, r6
   14294:	mov	r1, r8
   14298:	mov	r2, r5
   1429c:	bl	11e4c <strncmp@plt>
   142a0:	cmp	r0, #0
   142a4:	bne	142f0 <__assert_fail@plt+0x245c>
   142a8:	mov	r0, r6
   142ac:	bl	11c78 <strlen@plt>
   142b0:	cmp	r0, r5
   142b4:	beq	14310 <__assert_fail@plt+0x247c>
   142b8:	cmn	sl, #1
   142bc:	beq	142ec <__assert_fail@plt+0x2458>
   142c0:	ldr	r0, [sp]
   142c4:	mov	r1, r9
   142c8:	mov	r2, r4
   142cc:	mla	r0, sl, r4, r0
   142d0:	bl	11ac8 <memcmp@plt>
   142d4:	ldr	r1, [sp, #4]
   142d8:	cmp	r0, #0
   142dc:	movwne	r0, #1
   142e0:	orr	r1, r1, r0
   142e4:	str	r1, [sp, #4]
   142e8:	b	142f0 <__assert_fail@plt+0x245c>
   142ec:	mov	sl, r7
   142f0:	ldr	r0, [sp, #8]
   142f4:	add	r9, r9, r4
   142f8:	ldr	r6, [r0, r7, lsl #2]
   142fc:	add	r7, r7, #1
   14300:	cmp	r6, #0
   14304:	bne	14290 <__assert_fail@plt+0x23fc>
   14308:	b	14384 <__assert_fail@plt+0x24f0>
   1430c:	mvn	r7, #0
   14310:	mov	r0, r7
   14314:	sub	sp, fp, #28
   14318:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1431c:	add	r4, r7, #4
   14320:	mov	r0, #0
   14324:	mvn	sl, #0
   14328:	mov	r7, #0
   1432c:	str	r0, [sp, #4]
   14330:	mov	r0, r6
   14334:	mov	r1, r8
   14338:	mov	r2, r5
   1433c:	bl	11e4c <strncmp@plt>
   14340:	cmp	r0, #0
   14344:	bne	14374 <__assert_fail@plt+0x24e0>
   14348:	mov	r0, r6
   1434c:	bl	11c78 <strlen@plt>
   14350:	cmp	r0, r5
   14354:	beq	14310 <__assert_fail@plt+0x247c>
   14358:	ldr	r1, [sp, #4]
   1435c:	cmn	sl, #1
   14360:	add	r0, sl, #1
   14364:	movwne	r0, #1
   14368:	moveq	sl, r7
   1436c:	orr	r1, r1, r0
   14370:	str	r1, [sp, #4]
   14374:	ldr	r6, [r4, r7, lsl #2]
   14378:	add	r7, r7, #1
   1437c:	cmp	r6, #0
   14380:	bne	14330 <__assert_fail@plt+0x249c>
   14384:	ldr	r0, [sp, #4]
   14388:	tst	r0, #1
   1438c:	mvnne	sl, #1
   14390:	mov	r0, sl
   14394:	sub	sp, fp, #28
   14398:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1439c:	push	{r4, r5, r6, r7, fp, lr}
   143a0:	add	fp, sp, #16
   143a4:	mov	r5, r0
   143a8:	ldr	r0, [r1]
   143ac:	mvn	r4, #0
   143b0:	cmp	r0, #0
   143b4:	beq	143e4 <__assert_fail@plt+0x2550>
   143b8:	add	r7, r1, #4
   143bc:	mov	r6, #0
   143c0:	mov	r1, r5
   143c4:	bl	11a14 <strcmp@plt>
   143c8:	cmp	r0, #0
   143cc:	moveq	r0, r6
   143d0:	popeq	{r4, r5, r6, r7, fp, pc}
   143d4:	ldr	r0, [r7, r6, lsl #2]
   143d8:	add	r6, r6, #1
   143dc:	cmp	r0, #0
   143e0:	bne	143c0 <__assert_fail@plt+0x252c>
   143e4:	mov	r0, r4
   143e8:	pop	{r4, r5, r6, r7, fp, pc}
   143ec:	push	{r4, r5, r6, sl, fp, lr}
   143f0:	add	fp, sp, #16
   143f4:	sub	sp, sp, #8
   143f8:	mov	r4, r1
   143fc:	movw	r1, #41274	; 0xa13a
   14400:	mov	r5, r0
   14404:	movw	r0, #41247	; 0xa11f
   14408:	cmn	r2, #1
   1440c:	mov	r2, #5
   14410:	movt	r0, #3
   14414:	movt	r1, #3
   14418:	moveq	r1, r0
   1441c:	mov	r0, #0
   14420:	bl	11ad4 <dcgettext@plt>
   14424:	mov	r6, r0
   14428:	mov	r0, #0
   1442c:	mov	r1, #8
   14430:	mov	r2, r4
   14434:	bl	1f3ec <__assert_fail@plt+0xd558>
   14438:	mov	r4, r0
   1443c:	mov	r0, #1
   14440:	mov	r1, r5
   14444:	bl	1f9ac <__assert_fail@plt+0xdb18>
   14448:	str	r0, [sp]
   1444c:	mov	r0, #0
   14450:	mov	r1, #0
   14454:	mov	r2, r6
   14458:	mov	r3, r4
   1445c:	bl	11bac <error@plt>
   14460:	sub	sp, fp, #16
   14464:	pop	{r4, r5, r6, sl, fp, pc}
   14468:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1446c:	add	fp, sp, #28
   14470:	sub	sp, sp, #4
   14474:	mov	r5, r1
   14478:	movw	r1, #41303	; 0xa157
   1447c:	mov	sl, r2
   14480:	mov	r7, r0
   14484:	mov	r0, #0
   14488:	mov	r2, #5
   1448c:	mov	r8, #0
   14490:	movt	r1, #3
   14494:	bl	11ad4 <dcgettext@plt>
   14498:	movw	r4, #45608	; 0xb228
   1449c:	movt	r4, #4
   144a0:	ldr	r1, [r4]
   144a4:	bl	119c0 <fputs_unlocked@plt>
   144a8:	ldr	r6, [r7]
   144ac:	cmp	r6, #0
   144b0:	beq	14550 <__assert_fail@plt+0x26bc>
   144b4:	add	r9, r7, #4
   144b8:	mov	r7, #0
   144bc:	str	sl, [sp]
   144c0:	cmp	r8, #0
   144c4:	beq	144e0 <__assert_fail@plt+0x264c>
   144c8:	mov	r0, r7
   144cc:	mov	r1, r5
   144d0:	mov	r2, sl
   144d4:	bl	11ac8 <memcmp@plt>
   144d8:	cmp	r0, #0
   144dc:	beq	1450c <__assert_fail@plt+0x2678>
   144e0:	ldr	r7, [r4]
   144e4:	mov	r0, r6
   144e8:	bl	1f9bc <__assert_fail@plt+0xdb28>
   144ec:	movw	r2, #41324	; 0xa16c
   144f0:	mov	r3, r0
   144f4:	mov	r0, r7
   144f8:	mov	r1, #1
   144fc:	movt	r2, #3
   14500:	bl	11d08 <__fprintf_chk@plt>
   14504:	mov	r7, r5
   14508:	b	1453c <__assert_fail@plt+0x26a8>
   1450c:	mov	sl, r9
   14510:	ldr	r9, [r4]
   14514:	mov	r0, r6
   14518:	bl	1f9bc <__assert_fail@plt+0xdb28>
   1451c:	mov	r3, r0
   14520:	mov	r0, r9
   14524:	mov	r9, sl
   14528:	ldr	sl, [sp]
   1452c:	movw	r2, #41332	; 0xa174
   14530:	mov	r1, #1
   14534:	movt	r2, #3
   14538:	bl	11d08 <__fprintf_chk@plt>
   1453c:	ldr	r6, [r9, -r8, lsl #2]
   14540:	add	r5, r5, sl
   14544:	sub	r8, r8, #1
   14548:	cmp	r6, #0
   1454c:	bne	144c0 <__assert_fail@plt+0x262c>
   14550:	ldr	r0, [r4]
   14554:	ldr	r1, [r0, #20]
   14558:	ldr	r2, [r0, #24]
   1455c:	cmp	r1, r2
   14560:	addcc	r2, r1, #1
   14564:	strcc	r2, [r0, #20]
   14568:	movcc	r0, #10
   1456c:	strbcc	r0, [r1]
   14570:	subcc	sp, fp, #28
   14574:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14578:	mov	r1, #10
   1457c:	sub	sp, fp, #28
   14580:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14584:	b	11d50 <__overflow@plt>
   14588:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1458c:	add	fp, sp, #28
   14590:	sub	sp, sp, #12
   14594:	mov	sl, r0
   14598:	ldr	r0, [fp, #16]
   1459c:	ldr	r9, [fp, #8]
   145a0:	mov	r5, r3
   145a4:	mov	r8, r2
   145a8:	mov	r6, r1
   145ac:	cmp	r0, #0
   145b0:	beq	145e0 <__assert_fail@plt+0x274c>
   145b4:	mov	r0, r6
   145b8:	mov	r1, r8
   145bc:	mov	r2, r5
   145c0:	mov	r3, r9
   145c4:	bl	14238 <__assert_fail@plt+0x23a4>
   145c8:	mov	r4, r0
   145cc:	cmn	r4, #1
   145d0:	ble	14630 <__assert_fail@plt+0x279c>
   145d4:	mov	r0, r4
   145d8:	sub	sp, fp, #28
   145dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145e0:	ldr	r0, [r8]
   145e4:	movw	r7, #41247	; 0xa11f
   145e8:	str	r5, [sp, #8]
   145ec:	movt	r7, #3
   145f0:	cmp	r0, #0
   145f4:	beq	14648 <__assert_fail@plt+0x27b4>
   145f8:	add	r5, r8, #4
   145fc:	mov	r4, #0
   14600:	mov	r1, r6
   14604:	bl	11a14 <strcmp@plt>
   14608:	cmp	r0, #0
   1460c:	beq	14624 <__assert_fail@plt+0x2790>
   14610:	ldr	r0, [r5, r4, lsl #2]
   14614:	add	r4, r4, #1
   14618:	cmp	r0, #0
   1461c:	bne	14600 <__assert_fail@plt+0x276c>
   14620:	b	14648 <__assert_fail@plt+0x27b4>
   14624:	ldr	r5, [sp, #8]
   14628:	cmn	r4, #1
   1462c:	bgt	145d4 <__assert_fail@plt+0x2740>
   14630:	movw	r0, #41247	; 0xa11f
   14634:	movw	r7, #41274	; 0xa13a
   14638:	str	r5, [sp, #8]
   1463c:	movt	r0, #3
   14640:	movt	r7, #3
   14644:	moveq	r7, r0
   14648:	ldr	r5, [fp, #12]
   1464c:	mov	r0, #0
   14650:	mov	r1, r7
   14654:	mov	r2, #5
   14658:	bl	11ad4 <dcgettext@plt>
   1465c:	mov	r4, r0
   14660:	mov	r0, #0
   14664:	mov	r1, #8
   14668:	mov	r2, r6
   1466c:	bl	1f3ec <__assert_fail@plt+0xd558>
   14670:	mov	r6, r0
   14674:	mov	r0, #1
   14678:	mov	r1, sl
   1467c:	bl	1f9ac <__assert_fail@plt+0xdb18>
   14680:	str	r0, [sp]
   14684:	mov	r0, #0
   14688:	mov	r1, #0
   1468c:	mov	r2, r4
   14690:	mov	r3, r6
   14694:	bl	11bac <error@plt>
   14698:	ldr	r1, [sp, #8]
   1469c:	mov	r0, r8
   146a0:	mov	r2, r9
   146a4:	bl	14468 <__assert_fail@plt+0x25d4>
   146a8:	blx	r5
   146ac:	mvn	r4, #0
   146b0:	mov	r0, r4
   146b4:	sub	sp, fp, #28
   146b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146bc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   146c0:	add	fp, sp, #24
   146c4:	ldr	r6, [r1]
   146c8:	cmp	r6, #0
   146cc:	beq	14730 <__assert_fail@plt+0x289c>
   146d0:	mov	r8, r1
   146d4:	mov	r7, r2
   146d8:	mov	r1, r2
   146dc:	mov	r2, r3
   146e0:	mov	r4, r3
   146e4:	mov	r9, r0
   146e8:	bl	11ac8 <memcmp@plt>
   146ec:	cmp	r0, #0
   146f0:	beq	14728 <__assert_fail@plt+0x2894>
   146f4:	add	r7, r7, r4
   146f8:	add	r5, r8, #4
   146fc:	ldr	r6, [r5]
   14700:	cmp	r6, #0
   14704:	beq	14730 <__assert_fail@plt+0x289c>
   14708:	mov	r0, r9
   1470c:	mov	r1, r7
   14710:	mov	r2, r4
   14714:	bl	11ac8 <memcmp@plt>
   14718:	add	r7, r7, r4
   1471c:	add	r5, r5, #4
   14720:	cmp	r0, #0
   14724:	bne	146fc <__assert_fail@plt+0x2868>
   14728:	mov	r0, r6
   1472c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14730:	mov	r6, #0
   14734:	mov	r0, r6
   14738:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1473c:	push	{r4, sl, fp, lr}
   14740:	add	fp, sp, #8
   14744:	mov	r4, r0
   14748:	mov	r0, #24
   1474c:	bl	36fb4 <__assert_fail@plt+0x25120>
   14750:	cmp	r0, #0
   14754:	movne	r1, #0
   14758:	strne	r1, [r0]
   1475c:	strne	r4, [r0, #16]
   14760:	strne	r4, [r0, #20]
   14764:	popne	{r4, sl, fp, pc}
   14768:	mov	r0, #0
   1476c:	pop	{r4, sl, fp, pc}
   14770:	push	{r4, sl, fp, lr}
   14774:	add	fp, sp, #8
   14778:	mov	r4, r0
   1477c:	mov	r0, #24
   14780:	bl	36fb4 <__assert_fail@plt+0x25120>
   14784:	cmp	r0, #0
   14788:	moveq	r0, #0
   1478c:	popeq	{r4, sl, fp, pc}
   14790:	mov	r1, r0
   14794:	vmov.i32	q8, #0	; 0x00000000
   14798:	str	r4, [r1], #4
   1479c:	vst1.32	{d16-d17}, [r1]
   147a0:	pop	{r4, sl, fp, pc}
   147a4:	push	{r4, r5, r6, sl, fp, lr}
   147a8:	add	fp, sp, #16
   147ac:	ldr	r3, [r0]
   147b0:	mov	r4, r1
   147b4:	mov	r5, r0
   147b8:	cmp	r3, #0
   147bc:	beq	147f8 <__assert_fail@plt+0x2964>
   147c0:	add	r0, r5, #8
   147c4:	add	r1, r5, #12
   147c8:	mov	r2, #0
   147cc:	mov	r6, #0
   147d0:	bl	11e1c <getdelim@plt>
   147d4:	cmn	r0, #1
   147d8:	ble	14828 <__assert_fail@plt+0x2994>
   147dc:	mov	r0, #1
   147e0:	str	r0, [r4]
   147e4:	ldmib	r5, {r0, r6}
   147e8:	add	r0, r0, #1
   147ec:	str	r0, [r5, #4]
   147f0:	mov	r0, r6
   147f4:	pop	{r4, r5, r6, sl, fp, pc}
   147f8:	ldr	r0, [r5, #20]
   147fc:	ldr	r0, [r0]
   14800:	cmp	r0, #0
   14804:	beq	14848 <__assert_fail@plt+0x29b4>
   14808:	mov	r0, #1
   1480c:	str	r0, [r4]
   14810:	ldr	r0, [r5, #20]
   14814:	add	r1, r0, #4
   14818:	str	r1, [r5, #20]
   1481c:	ldr	r6, [r0]
   14820:	mov	r0, r6
   14824:	pop	{r4, r5, r6, sl, fp, pc}
   14828:	ldr	r0, [r5]
   1482c:	bl	11c6c <feof@plt>
   14830:	cmp	r0, #0
   14834:	mov	r1, #2
   14838:	mov	r0, r6
   1483c:	movweq	r1, #4
   14840:	str	r1, [r4]
   14844:	pop	{r4, r5, r6, sl, fp, pc}
   14848:	mov	r0, #2
   1484c:	mov	r6, #0
   14850:	str	r0, [r4]
   14854:	mov	r0, r6
   14858:	pop	{r4, r5, r6, sl, fp, pc}
   1485c:	ldr	r1, [r0]
   14860:	cmp	r1, #0
   14864:	ldrne	r0, [r0, #4]
   14868:	bxne	lr
   1486c:	ldr	r1, [r0, #16]
   14870:	ldr	r0, [r0, #20]
   14874:	sub	r0, r0, r1
   14878:	asr	r0, r0, #2
   1487c:	bx	lr
   14880:	push	{r4, sl, fp, lr}
   14884:	add	fp, sp, #8
   14888:	mov	r4, r0
   1488c:	ldr	r0, [r0]
   14890:	cmp	r0, #0
   14894:	beq	148a0 <__assert_fail@plt+0x2a0c>
   14898:	ldr	r0, [r4, #8]
   1489c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   148a0:	mov	r0, r4
   148a4:	pop	{r4, sl, fp, lr}
   148a8:	b	17b10 <__assert_fail@plt+0x5c7c>
   148ac:	movw	r1, #45736	; 0xb2a8
   148b0:	movt	r1, #4
   148b4:	str	r0, [r1, #4]
   148b8:	bx	lr
   148bc:	movw	r1, #45736	; 0xb2a8
   148c0:	movt	r1, #4
   148c4:	strb	r0, [r1]
   148c8:	bx	lr
   148cc:	push	{r4, r5, r6, sl, fp, lr}
   148d0:	add	fp, sp, #16
   148d4:	sub	sp, sp, #8
   148d8:	movw	r0, #45620	; 0xb234
   148dc:	movt	r0, #4
   148e0:	ldr	r0, [r0]
   148e4:	bl	37bf0 <__assert_fail@plt+0x25d5c>
   148e8:	cmp	r0, #0
   148ec:	beq	14914 <__assert_fail@plt+0x2a80>
   148f0:	movw	r5, #45736	; 0xb2a8
   148f4:	movt	r5, #4
   148f8:	ldrb	r0, [r5]
   148fc:	cmp	r0, #0
   14900:	beq	14940 <__assert_fail@plt+0x2aac>
   14904:	bl	11ca8 <__errno_location@plt>
   14908:	ldr	r0, [r0]
   1490c:	cmp	r0, #32
   14910:	bne	14940 <__assert_fail@plt+0x2aac>
   14914:	movw	r0, #45608	; 0xb228
   14918:	movt	r0, #4
   1491c:	ldr	r0, [r0]
   14920:	bl	37bf0 <__assert_fail@plt+0x25d5c>
   14924:	cmp	r0, #0
   14928:	subeq	sp, fp, #16
   1492c:	popeq	{r4, r5, r6, sl, fp, pc}
   14930:	movw	r0, #45524	; 0xb1d4
   14934:	movt	r0, #4
   14938:	ldr	r0, [r0]
   1493c:	bl	11a80 <_exit@plt>
   14940:	movw	r1, #41337	; 0xa179
   14944:	mov	r0, #0
   14948:	mov	r2, #5
   1494c:	movt	r1, #3
   14950:	bl	11ad4 <dcgettext@plt>
   14954:	ldr	r6, [r5, #4]
   14958:	mov	r4, r0
   1495c:	bl	11ca8 <__errno_location@plt>
   14960:	ldr	r5, [r0]
   14964:	cmp	r6, #0
   14968:	bne	14984 <__assert_fail@plt+0x2af0>
   1496c:	movw	r2, #41334	; 0xa176
   14970:	mov	r0, #0
   14974:	mov	r1, r5
   14978:	mov	r3, r4
   1497c:	movt	r2, #3
   14980:	b	149a4 <__assert_fail@plt+0x2b10>
   14984:	mov	r0, r6
   14988:	bl	1f634 <__assert_fail@plt+0xd7a0>
   1498c:	movw	r2, #41349	; 0xa185
   14990:	mov	r3, r0
   14994:	str	r4, [sp]
   14998:	mov	r0, #0
   1499c:	mov	r1, r5
   149a0:	movt	r2, #3
   149a4:	bl	11bac <error@plt>
   149a8:	movw	r0, #45524	; 0xb1d4
   149ac:	movt	r0, #4
   149b0:	ldr	r0, [r0]
   149b4:	bl	11a80 <_exit@plt>
   149b8:	push	{r4, r5, fp, lr}
   149bc:	add	fp, sp, #8
   149c0:	sub	sp, sp, #8
   149c4:	mov	r0, #12
   149c8:	bl	36fb4 <__assert_fail@plt+0x25120>
   149cc:	mov	r4, r0
   149d0:	cmp	r0, #0
   149d4:	beq	14a18 <__assert_fail@plt+0x2b84>
   149d8:	movw	r0, #19056	; 0x4a70
   149dc:	movw	r2, #19004	; 0x4a3c
   149e0:	movw	r3, #19024	; 0x4a50
   149e4:	mov	r1, #0
   149e8:	mov	r5, #0
   149ec:	movt	r0, #1
   149f0:	movt	r2, #1
   149f4:	movt	r3, #1
   149f8:	str	r0, [sp]
   149fc:	mov	r0, #11
   14a00:	bl	1aa88 <__assert_fail@plt+0x8bf4>
   14a04:	cmp	r0, #0
   14a08:	str	r0, [r4]
   14a0c:	beq	14a24 <__assert_fail@plt+0x2b90>
   14a10:	str	r5, [r4, #4]
   14a14:	str	r5, [r4, #8]
   14a18:	mov	r0, r4
   14a1c:	sub	sp, fp, #8
   14a20:	pop	{r4, r5, fp, pc}
   14a24:	mov	r0, r4
   14a28:	bl	17b10 <__assert_fail@plt+0x5c7c>
   14a2c:	mov	r4, #0
   14a30:	mov	r0, r4
   14a34:	sub	sp, fp, #8
   14a38:	pop	{r4, r5, fp, pc}
   14a3c:	ldm	r0, {r0, r3}
   14a40:	eor	r0, r0, r3
   14a44:	udiv	r2, r0, r1
   14a48:	mls	r0, r2, r1, r0
   14a4c:	bx	lr
   14a50:	ldrd	r2, [r1]
   14a54:	ldrd	r0, [r0]
   14a58:	eor	r1, r1, r3
   14a5c:	eor	r0, r0, r2
   14a60:	orr	r0, r0, r1
   14a64:	clz	r0, r0
   14a68:	lsr	r0, r0, #5
   14a6c:	bx	lr
   14a70:	push	{r4, sl, fp, lr}
   14a74:	add	fp, sp, #8
   14a78:	mov	r4, r0
   14a7c:	ldr	r0, [r0, #8]
   14a80:	bl	1ada4 <__assert_fail@plt+0x8f10>
   14a84:	mov	r0, r4
   14a88:	pop	{r4, sl, fp, lr}
   14a8c:	b	17b10 <__assert_fail@plt+0x5c7c>
   14a90:	push	{r4, sl, fp, lr}
   14a94:	add	fp, sp, #8
   14a98:	mov	r4, r0
   14a9c:	ldr	r0, [r0]
   14aa0:	bl	1ada4 <__assert_fail@plt+0x8f10>
   14aa4:	ldr	r0, [r4, #4]
   14aa8:	cmp	r0, #0
   14aac:	beq	14ab4 <__assert_fail@plt+0x2c20>
   14ab0:	bl	1c6c0 <__assert_fail@plt+0xa82c>
   14ab4:	ldr	r0, [r4, #8]
   14ab8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   14abc:	mov	r0, r4
   14ac0:	pop	{r4, sl, fp, lr}
   14ac4:	b	17b10 <__assert_fail@plt+0x5c7c>
   14ac8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14acc:	add	fp, sp, #24
   14ad0:	sub	sp, sp, #8
   14ad4:	ldr	r7, [r0, #8]
   14ad8:	ldr	r8, [fp, #12]
   14adc:	ldr	r9, [fp, #8]
   14ae0:	mov	r5, r3
   14ae4:	mov	r4, r2
   14ae8:	mov	r6, r0
   14aec:	cmp	r7, #0
   14af0:	beq	14b18 <__assert_fail@plt+0x2c84>
   14af4:	ldrd	r0, [r7]
   14af8:	eor	r1, r1, r5
   14afc:	eor	r0, r0, r4
   14b00:	orrs	r0, r0, r1
   14b04:	bne	14b30 <__assert_fail@plt+0x2c9c>
   14b08:	ldr	r5, [r7, #8]
   14b0c:	cmp	r5, #0
   14b10:	bne	14b98 <__assert_fail@plt+0x2d04>
   14b14:	b	14c00 <__assert_fail@plt+0x2d6c>
   14b18:	mov	r0, #16
   14b1c:	bl	36fb4 <__assert_fail@plt+0x25120>
   14b20:	cmp	r0, #0
   14b24:	str	r0, [r6, #8]
   14b28:	beq	14c00 <__assert_fail@plt+0x2d6c>
   14b2c:	mov	r7, r0
   14b30:	strd	r4, [r7]
   14b34:	mov	r1, r7
   14b38:	ldr	r0, [r6]
   14b3c:	bl	1b6c0 <__assert_fail@plt+0x982c>
   14b40:	cmp	r0, #0
   14b44:	beq	14c00 <__assert_fail@plt+0x2d6c>
   14b48:	cmp	r7, r0
   14b4c:	beq	14b64 <__assert_fail@plt+0x2cd0>
   14b50:	ldr	r5, [r0, #8]
   14b54:	str	r5, [r7, #8]
   14b58:	cmp	r5, #0
   14b5c:	bne	14b98 <__assert_fail@plt+0x2d04>
   14b60:	b	14c00 <__assert_fail@plt+0x2d6c>
   14b64:	movw	r2, #19840	; 0x4d80
   14b68:	mov	r0, #0
   14b6c:	mov	r1, #0
   14b70:	mov	r3, #0
   14b74:	str	r0, [r6, #8]
   14b78:	str	r0, [sp]
   14b7c:	movt	r2, #1
   14b80:	movw	r0, #1021	; 0x3fd
   14b84:	bl	1aa88 <__assert_fail@plt+0x8bf4>
   14b88:	mov	r5, r0
   14b8c:	str	r0, [r7, #8]
   14b90:	cmp	r5, #0
   14b94:	beq	14c00 <__assert_fail@plt+0x2d6c>
   14b98:	subs	r0, r9, #1
   14b9c:	mvn	r2, #-2147483646	; 0x80000002
   14ba0:	sbc	r1, r8, #0
   14ba4:	subs	r0, r2, r0
   14ba8:	rscs	r0, r1, #0
   14bac:	bcs	14be8 <__assert_fail@plt+0x2d54>
   14bb0:	ldr	r0, [r6, #4]
   14bb4:	cmp	r0, #0
   14bb8:	bne	14bd0 <__assert_fail@plt+0x2d3c>
   14bbc:	mvn	r0, #-2147483648	; 0x80000000
   14bc0:	bl	1c608 <__assert_fail@plt+0xa774>
   14bc4:	cmp	r0, #0
   14bc8:	str	r0, [r6, #4]
   14bcc:	beq	14c00 <__assert_fail@plt+0x2d6c>
   14bd0:	mov	r2, r9
   14bd4:	mov	r3, r8
   14bd8:	bl	1c6e8 <__assert_fail@plt+0xa854>
   14bdc:	mov	r9, r0
   14be0:	cmn	r0, #1
   14be4:	beq	14c00 <__assert_fail@plt+0x2d6c>
   14be8:	mov	r0, r5
   14bec:	mov	r1, r9
   14bf0:	mov	r2, #0
   14bf4:	sub	sp, fp, #24
   14bf8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   14bfc:	b	1b354 <__assert_fail@plt+0x94c0>
   14c00:	mvn	r0, #0
   14c04:	sub	sp, fp, #24
   14c08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14c0c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14c10:	add	fp, sp, #24
   14c14:	sub	sp, sp, #8
   14c18:	ldr	r6, [r0, #8]
   14c1c:	mov	r5, r3
   14c20:	mov	r8, r2
   14c24:	mov	r4, r0
   14c28:	cmp	r6, #0
   14c2c:	beq	14c58 <__assert_fail@plt+0x2dc4>
   14c30:	ldrd	r0, [r6]
   14c34:	eor	r1, r1, r5
   14c38:	eor	r0, r0, r8
   14c3c:	orrs	r0, r0, r1
   14c40:	bne	14c70 <__assert_fail@plt+0x2ddc>
   14c44:	ldr	r5, [r6, #8]
   14c48:	mvn	r6, #0
   14c4c:	cmp	r5, #0
   14c50:	bne	14d04 <__assert_fail@plt+0x2e70>
   14c54:	b	14d74 <__assert_fail@plt+0x2ee0>
   14c58:	mov	r0, #16
   14c5c:	bl	36fb4 <__assert_fail@plt+0x25120>
   14c60:	cmp	r0, #0
   14c64:	str	r0, [r4, #8]
   14c68:	beq	14cbc <__assert_fail@plt+0x2e28>
   14c6c:	mov	r6, r0
   14c70:	str	r8, [r6]
   14c74:	str	r5, [r6, #4]
   14c78:	mov	r1, r6
   14c7c:	ldr	r0, [r4]
   14c80:	bl	1b6c0 <__assert_fail@plt+0x982c>
   14c84:	cmp	r0, #0
   14c88:	beq	14cac <__assert_fail@plt+0x2e18>
   14c8c:	cmp	r6, r0
   14c90:	beq	14ccc <__assert_fail@plt+0x2e38>
   14c94:	ldr	r5, [r0, #8]
   14c98:	str	r5, [r6, #8]
   14c9c:	mvn	r6, #0
   14ca0:	cmp	r5, #0
   14ca4:	bne	14d04 <__assert_fail@plt+0x2e70>
   14ca8:	b	14d74 <__assert_fail@plt+0x2ee0>
   14cac:	mvn	r6, #0
   14cb0:	mov	r0, r6
   14cb4:	sub	sp, fp, #24
   14cb8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14cbc:	mvn	r6, #0
   14cc0:	mov	r0, r6
   14cc4:	sub	sp, fp, #24
   14cc8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ccc:	movw	r2, #19840	; 0x4d80
   14cd0:	mov	r0, #0
   14cd4:	mov	r1, #0
   14cd8:	mov	r3, #0
   14cdc:	str	r0, [r4, #8]
   14ce0:	str	r0, [sp]
   14ce4:	movt	r2, #1
   14ce8:	movw	r0, #1021	; 0x3fd
   14cec:	bl	1aa88 <__assert_fail@plt+0x8bf4>
   14cf0:	mov	r5, r0
   14cf4:	str	r0, [r6, #8]
   14cf8:	mvn	r6, #0
   14cfc:	cmp	r5, #0
   14d00:	beq	14d74 <__assert_fail@plt+0x2ee0>
   14d04:	ldr	r7, [fp, #8]
   14d08:	ldr	r8, [fp, #12]
   14d0c:	mvn	r2, #-2147483646	; 0x80000002
   14d10:	subs	r0, r7, #1
   14d14:	sbc	r1, r8, #0
   14d18:	subs	r0, r2, r0
   14d1c:	rscs	r0, r1, #0
   14d20:	bcs	14d5c <__assert_fail@plt+0x2ec8>
   14d24:	ldr	r0, [r4, #4]
   14d28:	cmp	r0, #0
   14d2c:	bne	14d44 <__assert_fail@plt+0x2eb0>
   14d30:	mvn	r0, #-2147483648	; 0x80000000
   14d34:	bl	1c608 <__assert_fail@plt+0xa774>
   14d38:	cmp	r0, #0
   14d3c:	str	r0, [r4, #4]
   14d40:	beq	14d74 <__assert_fail@plt+0x2ee0>
   14d44:	mov	r2, r7
   14d48:	mov	r3, r8
   14d4c:	bl	1c6e8 <__assert_fail@plt+0xa854>
   14d50:	mov	r7, r0
   14d54:	cmn	r0, #1
   14d58:	beq	14d74 <__assert_fail@plt+0x2ee0>
   14d5c:	mov	r0, r5
   14d60:	mov	r1, r7
   14d64:	bl	1a7c0 <__assert_fail@plt+0x892c>
   14d68:	mov	r6, r0
   14d6c:	cmp	r0, #0
   14d70:	movwne	r6, #1
   14d74:	mov	r0, r6
   14d78:	sub	sp, fp, #24
   14d7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14d80:	udiv	r2, r0, r1
   14d84:	mls	r0, r2, r1, r0
   14d88:	bx	lr
   14d8c:	push	{r4, r5, fp, lr}
   14d90:	add	fp, sp, #8
   14d94:	mov	r5, r0
   14d98:	mov	r0, #8
   14d9c:	mov	r4, r1
   14da0:	bl	34268 <__assert_fail@plt+0x223d4>
   14da4:	ldr	r1, [r5, #4]
   14da8:	stm	r0, {r1, r4}
   14dac:	str	r0, [r5, #4]
   14db0:	pop	{r4, r5, fp, pc}
   14db4:	and	r2, r1, #2
   14db8:	and	r3, r1, #134217728	; 0x8000000
   14dbc:	tst	r1, #32
   14dc0:	bne	14f3c <__assert_fail@plt+0x30a8>
   14dc4:	cmp	r3, #0
   14dc8:	beq	14edc <__assert_fail@plt+0x3048>
   14dcc:	ldrb	r1, [r0], #1
   14dd0:	cmp	r1, #122	; 0x7a
   14dd4:	bgt	14ebc <__assert_fail@plt+0x3028>
   14dd8:	sub	r2, r1, #40	; 0x28
   14ddc:	cmp	r2, #51	; 0x33
   14de0:	bhi	14ecc <__assert_fail@plt+0x3038>
   14de4:	add	r1, pc, #0
   14de8:	ldr	pc, [r1, r2, lsl #2]
   14dec:	andeq	r4, r1, r0, lsr pc
   14df0:	andeq	r4, r1, r0, lsr pc
   14df4:	andeq	r4, r1, r0, lsr pc
   14df8:	andeq	r4, r1, ip, asr #27
   14dfc:	andeq	r4, r1, ip, asr #27
   14e00:	andeq	r4, r1, ip, asr #27
   14e04:	andeq	r4, r1, r0, lsr pc
   14e08:	andeq	r4, r1, ip, asr #27
   14e0c:	andeq	r4, r1, ip, asr #27
   14e10:	andeq	r4, r1, ip, asr #27
   14e14:	andeq	r4, r1, ip, asr #27
   14e18:	andeq	r4, r1, ip, asr #27
   14e1c:	andeq	r4, r1, ip, asr #27
   14e20:	andeq	r4, r1, ip, asr #27
   14e24:	andeq	r4, r1, ip, asr #27
   14e28:	andeq	r4, r1, ip, asr #27
   14e2c:	andeq	r4, r1, ip, asr #27
   14e30:	andeq	r4, r1, ip, asr #27
   14e34:	andeq	r4, r1, ip, asr #27
   14e38:	andeq	r4, r1, ip, asr #27
   14e3c:	andeq	r4, r1, ip, asr #27
   14e40:	andeq	r4, r1, ip, asr #27
   14e44:	andeq	r4, r1, ip, asr #27
   14e48:	andeq	r4, r1, r0, lsr pc
   14e4c:	andeq	r4, r1, ip, asr #27
   14e50:	andeq	r4, r1, ip, asr #27
   14e54:	andeq	r4, r1, ip, asr #27
   14e58:	andeq	r4, r1, ip, asr #27
   14e5c:	andeq	r4, r1, ip, asr #27
   14e60:	andeq	r4, r1, ip, asr #27
   14e64:	andeq	r4, r1, ip, asr #27
   14e68:	andeq	r4, r1, ip, asr #27
   14e6c:	andeq	r4, r1, ip, asr #27
   14e70:	andeq	r4, r1, ip, asr #27
   14e74:	andeq	r4, r1, ip, asr #27
   14e78:	andeq	r4, r1, ip, asr #27
   14e7c:	andeq	r4, r1, ip, asr #27
   14e80:	andeq	r4, r1, ip, asr #27
   14e84:	andeq	r4, r1, ip, asr #27
   14e88:	andeq	r4, r1, ip, asr #27
   14e8c:	andeq	r4, r1, ip, asr #27
   14e90:	andeq	r4, r1, ip, asr #27
   14e94:	andeq	r4, r1, ip, asr #27
   14e98:	andeq	r4, r1, ip, asr #27
   14e9c:	andeq	r4, r1, ip, asr #27
   14ea0:	andeq	r4, r1, ip, asr #27
   14ea4:	andeq	r4, r1, ip, asr #27
   14ea8:	andeq	r4, r1, ip, asr #27
   14eac:	andeq	r4, r1, ip, asr #27
   14eb0:	andeq	r4, r1, ip, asr #27
   14eb4:	andeq	r4, r1, ip, asr #27
   14eb8:	andeq	r4, r1, r0, lsr pc
   14ebc:	cmp	r1, #123	; 0x7b
   14ec0:	cmpne	r1, #125	; 0x7d
   14ec4:	bne	14dcc <__assert_fail@plt+0x2f38>
   14ec8:	b	14f30 <__assert_fail@plt+0x309c>
   14ecc:	cmp	r1, #0
   14ed0:	bne	14dcc <__assert_fail@plt+0x2f38>
   14ed4:	b	15358 <__assert_fail@plt+0x34c4>
   14ed8:	add	r0, r0, r1
   14edc:	ldrb	r1, [r0], #1
   14ee0:	cmp	r1, #90	; 0x5a
   14ee4:	ble	14f0c <__assert_fail@plt+0x3078>
   14ee8:	cmp	r1, #92	; 0x5c
   14eec:	bne	14f28 <__assert_fail@plt+0x3094>
   14ef0:	mov	r1, #0
   14ef4:	cmp	r2, #0
   14ef8:	bne	14ed8 <__assert_fail@plt+0x3044>
   14efc:	ldrb	r1, [r0]
   14f00:	cmp	r1, #0
   14f04:	movwne	r1, #1
   14f08:	b	14ed8 <__assert_fail@plt+0x3044>
   14f0c:	cmp	r1, #0
   14f10:	beq	15358 <__assert_fail@plt+0x34c4>
   14f14:	cmp	r1, #42	; 0x2a
   14f18:	beq	14f30 <__assert_fail@plt+0x309c>
   14f1c:	cmp	r1, #63	; 0x3f
   14f20:	bne	14edc <__assert_fail@plt+0x3048>
   14f24:	b	14f30 <__assert_fail@plt+0x309c>
   14f28:	cmp	r1, #91	; 0x5b
   14f2c:	bne	14edc <__assert_fail@plt+0x3048>
   14f30:	mov	r1, #1
   14f34:	mov	r0, r1
   14f38:	bx	lr
   14f3c:	cmp	r3, #0
   14f40:	bne	15074 <__assert_fail@plt+0x31e0>
   14f44:	cmp	r2, #0
   14f48:	beq	15244 <__assert_fail@plt+0x33b0>
   14f4c:	add	r0, r0, #1
   14f50:	ldrb	r1, [r0, #-1]
   14f54:	sub	r2, r1, #33	; 0x21
   14f58:	cmp	r2, #58	; 0x3a
   14f5c:	bhi	15068 <__assert_fail@plt+0x31d4>
   14f60:	add	r3, pc, #4
   14f64:	mov	r1, #1
   14f68:	ldr	pc, [r3, r2, lsl #2]
   14f6c:	andeq	r5, r1, r8, asr r0
   14f70:	andeq	r4, r1, ip, asr #30
   14f74:	andeq	r4, r1, ip, asr #30
   14f78:	andeq	r4, r1, ip, asr #30
   14f7c:	andeq	r4, r1, ip, asr #30
   14f80:	andeq	r4, r1, ip, asr #30
   14f84:	andeq	r4, r1, ip, asr #30
   14f88:	andeq	r4, r1, ip, asr #30
   14f8c:	andeq	r4, r1, ip, asr #30
   14f90:	andeq	r5, r1, r4, ror #6
   14f94:	andeq	r5, r1, r8, asr r0
   14f98:	andeq	r4, r1, ip, asr #30
   14f9c:	andeq	r4, r1, ip, asr #30
   14fa0:	andeq	r4, r1, ip, asr #30
   14fa4:	andeq	r4, r1, ip, asr #30
   14fa8:	andeq	r4, r1, ip, asr #30
   14fac:	andeq	r4, r1, ip, asr #30
   14fb0:	andeq	r4, r1, ip, asr #30
   14fb4:	andeq	r4, r1, ip, asr #30
   14fb8:	andeq	r4, r1, ip, asr #30
   14fbc:	andeq	r4, r1, ip, asr #30
   14fc0:	andeq	r4, r1, ip, asr #30
   14fc4:	andeq	r4, r1, ip, asr #30
   14fc8:	andeq	r4, r1, ip, asr #30
   14fcc:	andeq	r4, r1, ip, asr #30
   14fd0:	andeq	r4, r1, ip, asr #30
   14fd4:	andeq	r4, r1, ip, asr #30
   14fd8:	andeq	r4, r1, ip, asr #30
   14fdc:	andeq	r4, r1, ip, asr #30
   14fe0:	andeq	r4, r1, ip, asr #30
   14fe4:	andeq	r5, r1, r4, ror #6
   14fe8:	andeq	r5, r1, r8, asr r0
   14fec:	andeq	r4, r1, ip, asr #30
   14ff0:	andeq	r4, r1, ip, asr #30
   14ff4:	andeq	r4, r1, ip, asr #30
   14ff8:	andeq	r4, r1, ip, asr #30
   14ffc:	andeq	r4, r1, ip, asr #30
   15000:	andeq	r4, r1, ip, asr #30
   15004:	andeq	r4, r1, ip, asr #30
   15008:	andeq	r4, r1, ip, asr #30
   1500c:	andeq	r4, r1, ip, asr #30
   15010:	andeq	r4, r1, ip, asr #30
   15014:	andeq	r4, r1, ip, asr #30
   15018:	andeq	r4, r1, ip, asr #30
   1501c:	andeq	r4, r1, ip, asr #30
   15020:	andeq	r4, r1, ip, asr #30
   15024:	andeq	r4, r1, ip, asr #30
   15028:	andeq	r4, r1, ip, asr #30
   1502c:	andeq	r4, r1, ip, asr #30
   15030:	andeq	r4, r1, ip, asr #30
   15034:	andeq	r4, r1, ip, asr #30
   15038:	andeq	r4, r1, ip, asr #30
   1503c:	andeq	r4, r1, ip, asr #30
   15040:	andeq	r4, r1, ip, asr #30
   15044:	andeq	r4, r1, ip, asr #30
   15048:	andeq	r4, r1, ip, asr #30
   1504c:	andeq	r4, r1, ip, asr #30
   15050:	andeq	r4, r1, ip, asr #30
   15054:	andeq	r5, r1, r4, ror #6
   15058:	ldrb	r2, [r0]
   1505c:	cmp	r2, #40	; 0x28
   15060:	bne	14f4c <__assert_fail@plt+0x30b8>
   15064:	b	15364 <__assert_fail@plt+0x34d0>
   15068:	cmp	r1, #0
   1506c:	bne	14f4c <__assert_fail@plt+0x30b8>
   15070:	b	15358 <__assert_fail@plt+0x34c4>
   15074:	add	r0, r0, #1
   15078:	ldrb	r1, [r0, #-1]
   1507c:	sub	r2, r1, #33	; 0x21
   15080:	cmp	r2, #92	; 0x5c
   15084:	bhi	15218 <__assert_fail@plt+0x3384>
   15088:	add	r3, pc, #4
   1508c:	mov	r1, #1
   15090:	ldr	pc, [r3, r2, lsl #2]
   15094:	andeq	r5, r1, r8, lsl #4
   15098:	andeq	r5, r1, r4, ror r0
   1509c:	andeq	r5, r1, r4, ror r0
   150a0:	andeq	r5, r1, r4, ror r0
   150a4:	andeq	r5, r1, r4, ror r0
   150a8:	andeq	r5, r1, r4, ror r0
   150ac:	andeq	r5, r1, r4, ror r0
   150b0:	andeq	r5, r1, r4, ror #6
   150b4:	andeq	r5, r1, r4, ror #6
   150b8:	andeq	r5, r1, r4, ror #6
   150bc:	andeq	r5, r1, r8, lsl #4
   150c0:	andeq	r5, r1, r4, ror r0
   150c4:	andeq	r5, r1, r4, ror r0
   150c8:	andeq	r5, r1, r4, ror #6
   150cc:	andeq	r5, r1, r4, ror r0
   150d0:	andeq	r5, r1, r4, ror r0
   150d4:	andeq	r5, r1, r4, ror r0
   150d8:	andeq	r5, r1, r4, ror r0
   150dc:	andeq	r5, r1, r4, ror r0
   150e0:	andeq	r5, r1, r4, ror r0
   150e4:	andeq	r5, r1, r4, ror r0
   150e8:	andeq	r5, r1, r4, ror r0
   150ec:	andeq	r5, r1, r4, ror r0
   150f0:	andeq	r5, r1, r4, ror r0
   150f4:	andeq	r5, r1, r4, ror r0
   150f8:	andeq	r5, r1, r4, ror r0
   150fc:	andeq	r5, r1, r4, ror r0
   15100:	andeq	r5, r1, r4, ror r0
   15104:	andeq	r5, r1, r4, ror r0
   15108:	andeq	r5, r1, r4, ror r0
   1510c:	andeq	r5, r1, r4, ror #6
   15110:	andeq	r5, r1, r8, lsl #4
   15114:	andeq	r5, r1, r4, ror r0
   15118:	andeq	r5, r1, r4, ror r0
   1511c:	andeq	r5, r1, r4, ror r0
   15120:	andeq	r5, r1, r4, ror r0
   15124:	andeq	r5, r1, r4, ror r0
   15128:	andeq	r5, r1, r4, ror r0
   1512c:	andeq	r5, r1, r4, ror r0
   15130:	andeq	r5, r1, r4, ror r0
   15134:	andeq	r5, r1, r4, ror r0
   15138:	andeq	r5, r1, r4, ror r0
   1513c:	andeq	r5, r1, r4, ror r0
   15140:	andeq	r5, r1, r4, ror r0
   15144:	andeq	r5, r1, r4, ror r0
   15148:	andeq	r5, r1, r4, ror r0
   1514c:	andeq	r5, r1, r4, ror r0
   15150:	andeq	r5, r1, r4, ror r0
   15154:	andeq	r5, r1, r4, ror r0
   15158:	andeq	r5, r1, r4, ror r0
   1515c:	andeq	r5, r1, r4, ror r0
   15160:	andeq	r5, r1, r4, ror r0
   15164:	andeq	r5, r1, r4, ror r0
   15168:	andeq	r5, r1, r4, ror r0
   1516c:	andeq	r5, r1, r4, ror r0
   15170:	andeq	r5, r1, r4, ror r0
   15174:	andeq	r5, r1, r4, ror r0
   15178:	andeq	r5, r1, r4, ror r0
   1517c:	andeq	r5, r1, r4, ror #6
   15180:	andeq	r5, r1, r4, ror r0
   15184:	andeq	r5, r1, r4, ror r0
   15188:	andeq	r5, r1, r4, ror r0
   1518c:	andeq	r5, r1, r4, ror r0
   15190:	andeq	r5, r1, r4, ror r0
   15194:	andeq	r5, r1, r4, ror r0
   15198:	andeq	r5, r1, r4, ror r0
   1519c:	andeq	r5, r1, r4, ror r0
   151a0:	andeq	r5, r1, r4, ror r0
   151a4:	andeq	r5, r1, r4, ror r0
   151a8:	andeq	r5, r1, r4, ror r0
   151ac:	andeq	r5, r1, r4, ror r0
   151b0:	andeq	r5, r1, r4, ror r0
   151b4:	andeq	r5, r1, r4, ror r0
   151b8:	andeq	r5, r1, r4, ror r0
   151bc:	andeq	r5, r1, r4, ror r0
   151c0:	andeq	r5, r1, r4, ror r0
   151c4:	andeq	r5, r1, r4, ror r0
   151c8:	andeq	r5, r1, r4, ror r0
   151cc:	andeq	r5, r1, r4, ror r0
   151d0:	andeq	r5, r1, r4, ror r0
   151d4:	andeq	r5, r1, r4, ror r0
   151d8:	andeq	r5, r1, r4, ror r0
   151dc:	andeq	r5, r1, r4, ror r0
   151e0:	andeq	r5, r1, r4, ror r0
   151e4:	andeq	r5, r1, r4, ror r0
   151e8:	andeq	r5, r1, r4, ror r0
   151ec:	andeq	r5, r1, r4, ror r0
   151f0:	andeq	r5, r1, r4, ror r0
   151f4:	andeq	r5, r1, r4, ror r0
   151f8:	andeq	r5, r1, r4, ror r0
   151fc:	andeq	r5, r1, r4, ror #6
   15200:	andeq	r5, r1, r4, ror r0
   15204:	andeq	r5, r1, r4, ror #6
   15208:	ldrb	r2, [r0]
   1520c:	cmp	r2, #40	; 0x28
   15210:	bne	15074 <__assert_fail@plt+0x31e0>
   15214:	b	15364 <__assert_fail@plt+0x34d0>
   15218:	cmp	r1, #0
   1521c:	bne	15074 <__assert_fail@plt+0x31e0>
   15220:	b	15358 <__assert_fail@plt+0x34c4>
   15224:	mov	r1, r0
   15228:	ldrb	r2, [r1], #1
   1522c:	cmp	r2, #0
   15230:	movne	r0, r1
   15234:	b	15244 <__assert_fail@plt+0x33b0>
   15238:	ldrb	r2, [r0]
   1523c:	cmp	r2, #40	; 0x28
   15240:	beq	15364 <__assert_fail@plt+0x34d0>
   15244:	ldrb	r1, [r0], #1
   15248:	sub	r2, r1, #33	; 0x21
   1524c:	cmp	r2, #59	; 0x3b
   15250:	bhi	15350 <__assert_fail@plt+0x34bc>
   15254:	add	r3, pc, #4
   15258:	mov	r1, #1
   1525c:	ldr	pc, [r3, r2, lsl #2]
   15260:	andeq	r5, r1, r8, lsr r2
   15264:	andeq	r5, r1, r4, asr #4
   15268:	andeq	r5, r1, r4, asr #4
   1526c:	andeq	r5, r1, r4, asr #4
   15270:	andeq	r5, r1, r4, asr #4
   15274:	andeq	r5, r1, r4, asr #4
   15278:	andeq	r5, r1, r4, asr #4
   1527c:	andeq	r5, r1, r4, asr #4
   15280:	andeq	r5, r1, r4, asr #4
   15284:	andeq	r5, r1, r4, ror #6
   15288:	andeq	r5, r1, r8, lsr r2
   1528c:	andeq	r5, r1, r4, asr #4
   15290:	andeq	r5, r1, r4, asr #4
   15294:	andeq	r5, r1, r4, asr #4
   15298:	andeq	r5, r1, r4, asr #4
   1529c:	andeq	r5, r1, r4, asr #4
   152a0:	andeq	r5, r1, r4, asr #4
   152a4:	andeq	r5, r1, r4, asr #4
   152a8:	andeq	r5, r1, r4, asr #4
   152ac:	andeq	r5, r1, r4, asr #4
   152b0:	andeq	r5, r1, r4, asr #4
   152b4:	andeq	r5, r1, r4, asr #4
   152b8:	andeq	r5, r1, r4, asr #4
   152bc:	andeq	r5, r1, r4, asr #4
   152c0:	andeq	r5, r1, r4, asr #4
   152c4:	andeq	r5, r1, r4, asr #4
   152c8:	andeq	r5, r1, r4, asr #4
   152cc:	andeq	r5, r1, r4, asr #4
   152d0:	andeq	r5, r1, r4, asr #4
   152d4:	andeq	r5, r1, r4, asr #4
   152d8:	andeq	r5, r1, r4, ror #6
   152dc:	andeq	r5, r1, r8, lsr r2
   152e0:	andeq	r5, r1, r4, asr #4
   152e4:	andeq	r5, r1, r4, asr #4
   152e8:	andeq	r5, r1, r4, asr #4
   152ec:	andeq	r5, r1, r4, asr #4
   152f0:	andeq	r5, r1, r4, asr #4
   152f4:	andeq	r5, r1, r4, asr #4
   152f8:	andeq	r5, r1, r4, asr #4
   152fc:	andeq	r5, r1, r4, asr #4
   15300:	andeq	r5, r1, r4, asr #4
   15304:	andeq	r5, r1, r4, asr #4
   15308:	andeq	r5, r1, r4, asr #4
   1530c:	andeq	r5, r1, r4, asr #4
   15310:	andeq	r5, r1, r4, asr #4
   15314:	andeq	r5, r1, r4, asr #4
   15318:	andeq	r5, r1, r4, asr #4
   1531c:	andeq	r5, r1, r4, asr #4
   15320:	andeq	r5, r1, r4, asr #4
   15324:	andeq	r5, r1, r4, asr #4
   15328:	andeq	r5, r1, r4, asr #4
   1532c:	andeq	r5, r1, r4, asr #4
   15330:	andeq	r5, r1, r4, asr #4
   15334:	andeq	r5, r1, r4, asr #4
   15338:	andeq	r5, r1, r4, asr #4
   1533c:	andeq	r5, r1, r4, asr #4
   15340:	andeq	r5, r1, r4, asr #4
   15344:	andeq	r5, r1, r4, asr #4
   15348:	andeq	r5, r1, r4, ror #6
   1534c:	andeq	r5, r1, r4, lsr #4
   15350:	cmp	r1, #0
   15354:	bne	15244 <__assert_fail@plt+0x33b0>
   15358:	mov	r1, #0
   1535c:	mov	r0, r1
   15360:	bx	lr
   15364:	mov	r0, r1
   15368:	bx	lr
   1536c:	mov	r0, #8
   15370:	b	34660 <__assert_fail@plt+0x227cc>
   15374:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15378:	add	fp, sp, #24
   1537c:	ldr	r6, [r0]
   15380:	mov	r8, r0
   15384:	cmp	r6, #0
   15388:	bne	153a0 <__assert_fail@plt+0x350c>
   1538c:	b	15418 <__assert_fail@plt+0x3584>
   15390:	mov	r0, r5
   15394:	bl	17b10 <__assert_fail@plt+0x5c7c>
   15398:	cmp	r6, #0
   1539c:	beq	15418 <__assert_fail@plt+0x3584>
   153a0:	mov	r5, r6
   153a4:	ldr	r6, [r6]
   153a8:	ldr	r0, [r5, #4]
   153ac:	cmp	r0, #0
   153b0:	beq	1540c <__assert_fail@plt+0x3578>
   153b4:	cmp	r0, #1
   153b8:	bne	15390 <__assert_fail@plt+0x34fc>
   153bc:	ldr	r0, [r5, #20]
   153c0:	cmp	r0, #1
   153c4:	blt	15400 <__assert_fail@plt+0x356c>
   153c8:	mov	r7, #0
   153cc:	mov	r4, #0
   153d0:	ldr	r1, [r5, #12]
   153d4:	add	r1, r1, r7
   153d8:	ldrb	r2, [r1, #3]
   153dc:	tst	r2, #8
   153e0:	beq	153f0 <__assert_fail@plt+0x355c>
   153e4:	add	r0, r1, #4
   153e8:	bl	21c44 <__assert_fail@plt+0xfdb0>
   153ec:	ldr	r0, [r5, #20]
   153f0:	add	r4, r4, #1
   153f4:	add	r7, r7, #36	; 0x24
   153f8:	cmp	r4, r0
   153fc:	blt	153d0 <__assert_fail@plt+0x353c>
   15400:	ldr	r0, [r5, #12]
   15404:	bl	17b10 <__assert_fail@plt+0x5c7c>
   15408:	b	15390 <__assert_fail@plt+0x34fc>
   1540c:	ldr	r0, [r5, #12]
   15410:	bl	1ada4 <__assert_fail@plt+0x8f10>
   15414:	b	15390 <__assert_fail@plt+0x34fc>
   15418:	ldr	r5, [r8, #4]
   1541c:	cmp	r5, #0
   15420:	beq	15444 <__assert_fail@plt+0x35b0>
   15424:	ldr	r0, [r5, #4]
   15428:	ldr	r4, [r5]
   1542c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   15430:	mov	r0, r5
   15434:	bl	17b10 <__assert_fail@plt+0x5c7c>
   15438:	cmp	r4, #0
   1543c:	mov	r5, r4
   15440:	bne	15424 <__assert_fail@plt+0x3590>
   15444:	mov	r0, r8
   15448:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1544c:	b	17b10 <__assert_fail@plt+0x5c7c>
   15450:	push	{r4, r5, r6, r7, fp, lr}
   15454:	add	fp, sp, #16
   15458:	movw	r7, #7108	; 0x1bc4
   1545c:	mov	r5, r0
   15460:	movw	r0, #21752	; 0x54f8
   15464:	tst	r2, #268435456	; 0x10000000
   15468:	mov	r4, r2
   1546c:	mov	r6, r1
   15470:	movt	r0, #1
   15474:	movt	r7, #1
   15478:	moveq	r7, r0
   1547c:	mov	r0, r5
   15480:	blx	r7
   15484:	mov	r1, r0
   15488:	clz	r0, r0
   1548c:	tst	r4, #1073741824	; 0x40000000
   15490:	lsr	r0, r0, #5
   15494:	bne	154f4 <__assert_fail@plt+0x3660>
   15498:	cmp	r1, #0
   1549c:	ldrbne	r1, [r6]
   154a0:	cmpne	r1, #0
   154a4:	beq	154f4 <__assert_fail@plt+0x3660>
   154a8:	add	r6, r6, #1
   154ac:	uxtb	r1, r1
   154b0:	mov	r0, #0
   154b4:	cmp	r1, #47	; 0x2f
   154b8:	bne	154e0 <__assert_fail@plt+0x364c>
   154bc:	ldrb	r1, [r6]
   154c0:	cmp	r1, #47	; 0x2f
   154c4:	beq	154e0 <__assert_fail@plt+0x364c>
   154c8:	mov	r0, r5
   154cc:	mov	r1, r6
   154d0:	mov	r2, r4
   154d4:	blx	r7
   154d8:	clz	r0, r0
   154dc:	lsr	r0, r0, #5
   154e0:	cmp	r0, #0
   154e4:	popne	{r4, r5, r6, r7, fp, pc}
   154e8:	ldrb	r1, [r6], #1
   154ec:	cmp	r1, #0
   154f0:	bne	154ac <__assert_fail@plt+0x3618>
   154f4:	pop	{r4, r5, r6, r7, fp, pc}
   154f8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   154fc:	add	fp, sp, #24
   15500:	mov	r4, r0
   15504:	mov	r5, r1
   15508:	and	r0, r2, #16
   1550c:	tst	r2, #8
   15510:	bne	1552c <__assert_fail@plt+0x3698>
   15514:	cmp	r0, #0
   15518:	beq	155b0 <__assert_fail@plt+0x371c>
   1551c:	mov	r0, r4
   15520:	mov	r1, r5
   15524:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   15528:	b	1c848 <__assert_fail@plt+0xa9b4>
   1552c:	cmp	r0, #0
   15530:	beq	155c0 <__assert_fail@plt+0x372c>
   15534:	mov	r0, r5
   15538:	bl	34788 <__assert_fail@plt+0x228f4>
   1553c:	mov	r1, #47	; 0x2f
   15540:	mov	r5, r0
   15544:	mov	r8, #47	; 0x2f
   15548:	bl	11c84 <strchr@plt>
   1554c:	cmp	r0, #0
   15550:	beq	15590 <__assert_fail@plt+0x36fc>
   15554:	mov	r7, r0
   15558:	mov	r9, #0
   1555c:	mov	r0, r4
   15560:	mov	r1, r5
   15564:	strb	r9, [r7]
   15568:	bl	1c848 <__assert_fail@plt+0xa9b4>
   1556c:	cmp	r0, #1
   15570:	blt	1559c <__assert_fail@plt+0x3708>
   15574:	strb	r8, [r7], #1
   15578:	mov	r1, #47	; 0x2f
   1557c:	mov	r0, r7
   15580:	bl	11c84 <strchr@plt>
   15584:	mov	r7, r0
   15588:	cmp	r0, #0
   1558c:	bne	1555c <__assert_fail@plt+0x36c8>
   15590:	mov	r0, r4
   15594:	mov	r1, r5
   15598:	bl	1c848 <__assert_fail@plt+0xa9b4>
   1559c:	mov	r6, r0
   155a0:	mov	r0, r5
   155a4:	bl	17b10 <__assert_fail@plt+0x5c7c>
   155a8:	mov	r0, r6
   155ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   155b0:	mov	r0, r4
   155b4:	mov	r1, r5
   155b8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   155bc:	b	11a14 <strcmp@plt>
   155c0:	mov	r0, r4
   155c4:	bl	11c78 <strlen@plt>
   155c8:	mov	r7, r0
   155cc:	mov	r0, r4
   155d0:	mov	r1, r5
   155d4:	mov	r2, r7
   155d8:	bl	11e4c <strncmp@plt>
   155dc:	mov	r6, r0
   155e0:	cmp	r0, #0
   155e4:	beq	155f0 <__assert_fail@plt+0x375c>
   155e8:	mov	r0, r6
   155ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   155f0:	ldrb	r0, [r5, r7]
   155f4:	subs	r6, r0, #47	; 0x2f
   155f8:	movne	r6, r0
   155fc:	mov	r0, r6
   15600:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15604:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15608:	add	fp, sp, #28
   1560c:	sub	sp, sp, #20
   15610:	ldr	r0, [r0]
   15614:	cmp	r0, #0
   15618:	moveq	r0, #0
   1561c:	subeq	sp, fp, #28
   15620:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15624:	mov	r9, r1
   15628:	add	r1, r1, #1
   1562c:	mov	r7, #0
   15630:	str	r1, [sp, #12]
   15634:	mov	r4, r0
   15638:	ldr	r0, [r0, #4]
   1563c:	cmp	r0, #0
   15640:	beq	15764 <__assert_fail@plt+0x38d0>
   15644:	ldr	r0, [r4, #20]
   15648:	cmp	r0, #1
   1564c:	str	r0, [sp, #16]
   15650:	blt	158d0 <__assert_fail@plt+0x3a3c>
   15654:	ldr	sl, [r4, #12]
   15658:	mov	r8, #0
   1565c:	str	r7, [sp, #4]
   15660:	str	r4, [sp, #8]
   15664:	b	156b8 <__assert_fail@plt+0x3824>
   15668:	ldr	r5, [sp, #12]
   1566c:	uxtb	r0, r0
   15670:	mov	r1, #0
   15674:	cmp	r0, #47	; 0x2f
   15678:	bne	156a0 <__assert_fail@plt+0x380c>
   1567c:	ldrb	r0, [r5]
   15680:	cmp	r0, #47	; 0x2f
   15684:	beq	156a0 <__assert_fail@plt+0x380c>
   15688:	mov	r0, r7
   1568c:	mov	r1, r5
   15690:	mov	r2, r6
   15694:	blx	r4
   15698:	clz	r0, r0
   1569c:	lsr	r1, r0, #5
   156a0:	cmp	r1, #0
   156a4:	bne	1571c <__assert_fail@plt+0x3888>
   156a8:	ldrb	r0, [r5], #1
   156ac:	cmp	r0, #0
   156b0:	bne	1566c <__assert_fail@plt+0x37d8>
   156b4:	b	1571c <__assert_fail@plt+0x3888>
   156b8:	add	r0, r8, r8, lsl #3
   156bc:	mov	r1, sl
   156c0:	ldr	r6, [r1, r0, lsl #2]!
   156c4:	add	r0, r1, #4
   156c8:	tst	r6, #134217728	; 0x8000000
   156cc:	bne	15728 <__assert_fail@plt+0x3894>
   156d0:	ldr	r7, [r0]
   156d4:	movw	r4, #7108	; 0x1bc4
   156d8:	movw	r1, #21752	; 0x54f8
   156dc:	tst	r6, #268435456	; 0x10000000
   156e0:	mov	r2, r6
   156e4:	movt	r4, #1
   156e8:	movt	r1, #1
   156ec:	moveq	r4, r1
   156f0:	mov	r1, r9
   156f4:	mov	r0, r7
   156f8:	blx	r4
   156fc:	clz	r1, r0
   15700:	tst	r6, #1073741824	; 0x40000000
   15704:	lsr	r1, r1, #5
   15708:	bne	1571c <__assert_fail@plt+0x3888>
   1570c:	cmp	r0, #0
   15710:	ldrbne	r0, [r9]
   15714:	cmpne	r0, #0
   15718:	bne	15668 <__assert_fail@plt+0x37d4>
   1571c:	cmp	r1, #0
   15720:	beq	15748 <__assert_fail@plt+0x38b4>
   15724:	b	158e4 <__assert_fail@plt+0x3a50>
   15728:	mov	r5, #0
   1572c:	mov	r1, r9
   15730:	mov	r2, #0
   15734:	mov	r3, #0
   15738:	str	r5, [sp]
   1573c:	bl	21e8c <__assert_fail@plt+0xfff8>
   15740:	cmp	r0, #0
   15744:	beq	158e8 <__assert_fail@plt+0x3a54>
   15748:	ldr	r0, [sp, #16]
   1574c:	add	r8, r8, #1
   15750:	cmp	r8, r0
   15754:	blt	156b8 <__assert_fail@plt+0x3824>
   15758:	ldr	r4, [sp, #8]
   1575c:	ldr	r7, [sp, #4]
   15760:	b	158d0 <__assert_fail@plt+0x3a3c>
   15764:	cmp	r7, #0
   15768:	bne	15780 <__assert_fail@plt+0x38ec>
   1576c:	mov	r0, r9
   15770:	bl	11c78 <strlen@plt>
   15774:	add	r0, r0, #1
   15778:	bl	34268 <__assert_fail@plt+0x223d4>
   1577c:	mov	r7, r0
   15780:	ldr	r1, [r4, #8]
   15784:	ldr	r6, [r4, #12]
   15788:	and	r0, r1, #1073741824	; 0x40000000
   1578c:	tst	r1, #8
   15790:	bne	157dc <__assert_fail@plt+0x3948>
   15794:	cmp	r0, #0
   15798:	bne	15858 <__assert_fail@plt+0x39c4>
   1579c:	mov	r5, r9
   157a0:	mov	r0, r7
   157a4:	mov	r1, r5
   157a8:	bl	11b88 <strcpy@plt>
   157ac:	mov	r0, r6
   157b0:	mov	r1, r7
   157b4:	bl	1a7c0 <__assert_fail@plt+0x892c>
   157b8:	cmp	r0, #0
   157bc:	bne	158f4 <__assert_fail@plt+0x3a60>
   157c0:	mov	r0, r5
   157c4:	mov	r1, #47	; 0x2f
   157c8:	bl	11c84 <strchr@plt>
   157cc:	add	r5, r0, #1
   157d0:	cmp	r0, #0
   157d4:	bne	157a0 <__assert_fail@plt+0x390c>
   157d8:	b	158d0 <__assert_fail@plt+0x3a3c>
   157dc:	cmp	r0, #0
   157e0:	bne	1587c <__assert_fail@plt+0x39e8>
   157e4:	mov	r8, r9
   157e8:	mov	r0, r7
   157ec:	mov	r1, r8
   157f0:	bl	11b88 <strcpy@plt>
   157f4:	mov	r0, r6
   157f8:	mov	r1, r7
   157fc:	bl	1a7c0 <__assert_fail@plt+0x892c>
   15800:	cmp	r0, #0
   15804:	bne	158f4 <__assert_fail@plt+0x3a60>
   15808:	mov	r0, r7
   1580c:	mov	r1, #47	; 0x2f
   15810:	bl	11d68 <strrchr@plt>
   15814:	cmp	r0, #0
   15818:	beq	1583c <__assert_fail@plt+0x39a8>
   1581c:	mov	r5, #0
   15820:	mov	r1, r7
   15824:	strb	r5, [r0]
   15828:	mov	r0, r6
   1582c:	bl	1a7c0 <__assert_fail@plt+0x892c>
   15830:	cmp	r0, #0
   15834:	beq	15808 <__assert_fail@plt+0x3974>
   15838:	b	158f8 <__assert_fail@plt+0x3a64>
   1583c:	mov	r0, r8
   15840:	mov	r1, #47	; 0x2f
   15844:	bl	11c84 <strchr@plt>
   15848:	add	r8, r0, #1
   1584c:	cmp	r0, #0
   15850:	bne	157e8 <__assert_fail@plt+0x3954>
   15854:	b	158d0 <__assert_fail@plt+0x3a3c>
   15858:	mov	r0, r7
   1585c:	mov	r1, r9
   15860:	bl	11b88 <strcpy@plt>
   15864:	mov	r0, r6
   15868:	mov	r1, r7
   1586c:	bl	1a7c0 <__assert_fail@plt+0x892c>
   15870:	cmp	r0, #0
   15874:	beq	158d0 <__assert_fail@plt+0x3a3c>
   15878:	b	158f4 <__assert_fail@plt+0x3a60>
   1587c:	mov	r0, r7
   15880:	mov	r1, r9
   15884:	bl	11b88 <strcpy@plt>
   15888:	mov	r0, r6
   1588c:	mov	r1, r7
   15890:	bl	1a7c0 <__assert_fail@plt+0x892c>
   15894:	cmp	r0, #0
   15898:	bne	158f4 <__assert_fail@plt+0x3a60>
   1589c:	mov	r0, r7
   158a0:	mov	r1, #47	; 0x2f
   158a4:	bl	11d68 <strrchr@plt>
   158a8:	cmp	r0, #0
   158ac:	beq	158d0 <__assert_fail@plt+0x3a3c>
   158b0:	mov	r5, #0
   158b4:	mov	r1, r7
   158b8:	strb	r5, [r0]
   158bc:	mov	r0, r6
   158c0:	bl	1a7c0 <__assert_fail@plt+0x892c>
   158c4:	cmp	r0, #0
   158c8:	beq	1589c <__assert_fail@plt+0x3a08>
   158cc:	b	158f8 <__assert_fail@plt+0x3a64>
   158d0:	ldr	r0, [r4]
   158d4:	cmp	r0, #0
   158d8:	bne	15634 <__assert_fail@plt+0x37a0>
   158dc:	mov	r5, #1
   158e0:	b	158f8 <__assert_fail@plt+0x3a64>
   158e4:	mov	r5, #0
   158e8:	ldr	r4, [sp, #8]
   158ec:	ldr	r7, [sp, #4]
   158f0:	b	158f8 <__assert_fail@plt+0x3a64>
   158f4:	mov	r5, #0
   158f8:	mov	r0, r7
   158fc:	bl	17b10 <__assert_fail@plt+0x5c7c>
   15900:	ldr	r0, [r4, #8]
   15904:	mov	r1, #1
   15908:	bic	r0, r1, r0, lsr #29
   1590c:	subs	r0, r5, r0
   15910:	movwne	r0, #1
   15914:	sub	sp, fp, #28
   15918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1591c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15920:	add	fp, sp, #28
   15924:	sub	sp, sp, #4
   15928:	mov	r7, r2
   1592c:	mov	r4, r1
   15930:	mov	r6, r0
   15934:	tst	r2, #402653184	; 0x18000000
   15938:	beq	159d4 <__assert_fail@plt+0x3b40>
   1593c:	mov	r0, r4
   15940:	mov	r1, r7
   15944:	bl	14db4 <__assert_fail@plt+0x2f20>
   15948:	cmp	r0, #0
   1594c:	beq	159d4 <__assert_fail@plt+0x3b40>
   15950:	ldr	r5, [r6]
   15954:	cmp	r5, #0
   15958:	beq	15978 <__assert_fail@plt+0x3ae4>
   1595c:	ldr	r0, [r5, #4]
   15960:	cmp	r0, #1
   15964:	bne	15978 <__assert_fail@plt+0x3ae4>
   15968:	ldr	r0, [r5, #8]
   1596c:	eor	r0, r0, r7
   15970:	tst	r0, #536870912	; 0x20000000
   15974:	beq	15998 <__assert_fail@plt+0x3b04>
   15978:	mov	r0, #24
   1597c:	bl	34660 <__assert_fail@plt+0x227cc>
   15980:	ldr	r1, [r6]
   15984:	mov	r5, r0
   15988:	mov	r0, #1
   1598c:	str	r1, [r5]
   15990:	stmib	r5, {r0, r7}
   15994:	str	r5, [r6]
   15998:	mov	r1, r5
   1599c:	ldr	r2, [r1, #16]!
   159a0:	ldr	r0, [r1, #4]
   159a4:	cmp	r0, r2
   159a8:	bne	15af0 <__assert_fail@plt+0x3c5c>
   159ac:	ldr	r0, [r5, #12]
   159b0:	mov	r2, #36	; 0x24
   159b4:	mvn	r3, #0
   159b8:	str	r2, [sp]
   159bc:	mov	r2, #1
   159c0:	bl	34498 <__assert_fail@plt+0x22604>
   159c4:	str	r0, [r5, #12]
   159c8:	mov	r8, r0
   159cc:	ldr	r0, [r5, #20]
   159d0:	b	15af4 <__assert_fail@plt+0x3c60>
   159d4:	ldr	r5, [r6]
   159d8:	cmp	r5, #0
   159dc:	beq	15a04 <__assert_fail@plt+0x3b70>
   159e0:	ldr	r0, [r5, #4]
   159e4:	cmp	r0, #0
   159e8:	bne	15a04 <__assert_fail@plt+0x3b70>
   159ec:	ldr	r0, [r5, #8]
   159f0:	movw	r1, #24
   159f4:	movt	r1, #24576	; 0x6000
   159f8:	eor	r0, r0, r7
   159fc:	tst	r0, r1
   15a00:	beq	15a6c <__assert_fail@plt+0x3bd8>
   15a04:	mov	r0, #24
   15a08:	bl	34660 <__assert_fail@plt+0x227cc>
   15a0c:	mov	r5, r0
   15a10:	mov	r0, #0
   15a14:	movw	r2, #24512	; 0x5fc0
   15a18:	movw	r3, #24540	; 0x5fdc
   15a1c:	mov	r1, #0
   15a20:	stmib	r5, {r0, r7}
   15a24:	movw	r0, #24564	; 0x5ff4
   15a28:	movt	r2, #1
   15a2c:	movt	r3, #1
   15a30:	movt	r0, #1
   15a34:	str	r0, [sp]
   15a38:	ands	r0, r7, #16
   15a3c:	movw	r0, #24324	; 0x5f04
   15a40:	movt	r0, #1
   15a44:	movne	r2, r0
   15a48:	movw	r0, #24516	; 0x5fc4
   15a4c:	movt	r0, #1
   15a50:	movne	r3, r0
   15a54:	mov	r0, #0
   15a58:	bl	1aa88 <__assert_fail@plt+0x8bf4>
   15a5c:	str	r0, [r5, #12]
   15a60:	ldr	r0, [r6]
   15a64:	str	r0, [r5]
   15a68:	str	r5, [r6]
   15a6c:	mov	r0, r4
   15a70:	bl	34788 <__assert_fail@plt+0x228f4>
   15a74:	mov	r4, r0
   15a78:	and	r0, r7, #268435458	; 0x10000002
   15a7c:	cmp	r0, #268435456	; 0x10000000
   15a80:	bne	15acc <__assert_fail@plt+0x3c38>
   15a84:	mov	r0, r4
   15a88:	mov	r1, r4
   15a8c:	ldrb	r2, [r1]
   15a90:	cmp	r2, #92	; 0x5c
   15a94:	bne	15ab4 <__assert_fail@plt+0x3c20>
   15a98:	mov	r2, r1
   15a9c:	ldrb	r3, [r2, #1]!
   15aa0:	cmp	r3, #0
   15aa4:	moveq	r2, r1
   15aa8:	movwne	r3, #1
   15aac:	ldrb	r2, [r2]
   15ab0:	b	15ab8 <__assert_fail@plt+0x3c24>
   15ab4:	mov	r3, #0
   15ab8:	add	r1, r1, r3
   15abc:	strb	r2, [r0], #1
   15ac0:	cmp	r2, #0
   15ac4:	add	r1, r1, #1
   15ac8:	bne	15a8c <__assert_fail@plt+0x3bf8>
   15acc:	ldr	r0, [r5, #12]
   15ad0:	mov	r1, r4
   15ad4:	bl	1b6c0 <__assert_fail@plt+0x982c>
   15ad8:	cmp	r0, r4
   15adc:	beq	15c24 <__assert_fail@plt+0x3d90>
   15ae0:	mov	r0, r4
   15ae4:	sub	sp, fp, #28
   15ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15aec:	b	17b10 <__assert_fail@plt+0x5c7c>
   15af0:	ldr	r8, [r5, #12]
   15af4:	add	r9, r0, #1
   15af8:	add	sl, r0, r0, lsl #3
   15afc:	tst	r7, #134217728	; 0x8000000
   15b00:	str	r9, [r5, #20]
   15b04:	str	r7, [r8, sl, lsl #2]
   15b08:	bne	15b44 <__assert_fail@plt+0x3cb0>
   15b0c:	tst	r7, #67108864	; 0x4000000
   15b10:	beq	15b34 <__assert_fail@plt+0x3ca0>
   15b14:	mov	r0, r4
   15b18:	bl	34788 <__assert_fail@plt+0x228f4>
   15b1c:	mov	r4, r0
   15b20:	mov	r0, #8
   15b24:	bl	34268 <__assert_fail@plt+0x223d4>
   15b28:	ldr	r1, [r6, #4]
   15b2c:	stm	r0, {r1, r4}
   15b30:	str	r0, [r6, #4]
   15b34:	add	r0, r8, sl, lsl #2
   15b38:	str	r4, [r0, #4]
   15b3c:	sub	sp, fp, #28
   15b40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b44:	mov	r0, #2
   15b48:	tst	r7, #8
   15b4c:	and	r0, r0, r7, lsr #3
   15b50:	orr	r6, r0, #9
   15b54:	bne	15b8c <__assert_fail@plt+0x3cf8>
   15b58:	add	r0, r8, sl, lsl #2
   15b5c:	mov	r1, r4
   15b60:	mov	r2, r6
   15b64:	add	r0, r0, #4
   15b68:	bl	21a34 <__assert_fail@plt+0xfba0>
   15b6c:	mov	r4, r0
   15b70:	cmp	r4, #0
   15b74:	beq	15c24 <__assert_fail@plt+0x3d90>
   15b78:	ldr	r9, [r5, #20]
   15b7c:	sub	r0, r9, #1
   15b80:	str	r0, [r5, #20]
   15b84:	sub	sp, fp, #28
   15b88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b8c:	mov	r0, r4
   15b90:	bl	11c78 <strlen@plt>
   15b94:	sub	r1, r4, #1
   15b98:	mov	r7, r0
   15b9c:	cmp	r0, #1
   15ba0:	blt	15bb8 <__assert_fail@plt+0x3d24>
   15ba4:	ldrb	r2, [r1, r7]
   15ba8:	sub	r0, r7, #1
   15bac:	cmp	r2, #47	; 0x2f
   15bb0:	beq	15b98 <__assert_fail@plt+0x3d04>
   15bb4:	b	15bc0 <__assert_fail@plt+0x3d2c>
   15bb8:	cmp	r7, #0
   15bbc:	beq	15b7c <__assert_fail@plt+0x3ce8>
   15bc0:	add	r0, r7, #7
   15bc4:	bl	34280 <__assert_fail@plt+0x223ec>
   15bc8:	mov	r1, r4
   15bcc:	mov	r2, r7
   15bd0:	mov	r9, r6
   15bd4:	mov	r6, r0
   15bd8:	bl	11a8c <memcpy@plt>
   15bdc:	movw	r0, #12072	; 0x2f28
   15be0:	mov	r1, r6
   15be4:	mov	r2, r9
   15be8:	movt	r0, #10798	; 0x2a2e
   15bec:	str	r0, [r1, r7]!
   15bf0:	mov	r0, #0
   15bf4:	strb	r0, [r1, #6]
   15bf8:	movw	r0, #16169	; 0x3f29
   15bfc:	strh	r0, [r1, #4]
   15c00:	add	r0, r8, sl, lsl #2
   15c04:	mov	r1, r6
   15c08:	add	r0, r0, #4
   15c0c:	bl	21a34 <__assert_fail@plt+0xfba0>
   15c10:	mov	r4, r0
   15c14:	mov	r0, r6
   15c18:	bl	17b10 <__assert_fail@plt+0x5c7c>
   15c1c:	cmp	r4, #0
   15c20:	bne	15b78 <__assert_fail@plt+0x3ce4>
   15c24:	sub	sp, fp, #28
   15c28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c30:	add	fp, sp, #28
   15c34:	sub	sp, sp, #20
   15c38:	str	r0, [sp, #8]
   15c3c:	mov	r0, #0
   15c40:	mov	r9, r1
   15c44:	mov	r1, #0
   15c48:	str	r3, [sp, #12]
   15c4c:	mov	r4, r2
   15c50:	str	r0, [sp, #4]
   15c54:	mov	r0, r2
   15c58:	str	r1, [sp, #16]
   15c5c:	bl	11e64 <getc@plt>
   15c60:	cmn	r0, #1
   15c64:	beq	15cd8 <__assert_fail@plt+0x3e44>
   15c68:	mov	r5, r0
   15c6c:	mov	r0, #0
   15c70:	mov	sl, #1
   15c74:	add	r8, sp, #16
   15c78:	mov	r7, #0
   15c7c:	mov	r6, #0
   15c80:	cmp	r6, r0
   15c84:	bne	15cbc <__assert_fail@plt+0x3e28>
   15c88:	b	15ca0 <__assert_fail@plt+0x3e0c>
   15c8c:	mov	r5, r0
   15c90:	ldr	r0, [sp, #16]
   15c94:	add	r6, r6, #1
   15c98:	cmp	r6, r0
   15c9c:	bne	15cbc <__assert_fail@plt+0x3e28>
   15ca0:	mov	r0, r7
   15ca4:	mov	r1, r8
   15ca8:	mov	r2, #1
   15cac:	mvn	r3, #0
   15cb0:	str	sl, [sp]
   15cb4:	bl	34498 <__assert_fail@plt+0x22604>
   15cb8:	mov	r7, r0
   15cbc:	mov	r0, r4
   15cc0:	strb	r5, [r7, r6]
   15cc4:	bl	11e64 <getc@plt>
   15cc8:	cmn	r0, #1
   15ccc:	bne	15c8c <__assert_fail@plt+0x3df8>
   15cd0:	add	sl, r6, #1
   15cd4:	b	15ce0 <__assert_fail@plt+0x3e4c>
   15cd8:	mov	sl, #0
   15cdc:	mov	r7, #0
   15ce0:	ldr	r6, [fp, #8]
   15ce4:	mov	r0, r4
   15ce8:	bl	11a74 <ferror@plt>
   15cec:	cmp	r0, #0
   15cf0:	beq	15d00 <__assert_fail@plt+0x3e6c>
   15cf4:	bl	11ca8 <__errno_location@plt>
   15cf8:	ldr	r0, [r0]
   15cfc:	str	r0, [sp, #4]
   15d00:	add	r1, sl, #1
   15d04:	mov	r0, r7
   15d08:	bl	342e4 <__assert_fail@plt+0x22450>
   15d0c:	mov	r4, r0
   15d10:	mov	r5, r0
   15d14:	cmp	sl, #0
   15d18:	strb	r6, [r4, sl]!
   15d1c:	beq	15d34 <__assert_fail@plt+0x3ea0>
   15d20:	add	r0, r5, sl
   15d24:	ldrb	r0, [r0, #-1]
   15d28:	subs	r7, r0, r6
   15d2c:	movwne	r7, #1
   15d30:	b	15d38 <__assert_fail@plt+0x3ea4>
   15d34:	mov	r7, #0
   15d38:	mov	r0, #8
   15d3c:	bl	34268 <__assert_fail@plt+0x223d4>
   15d40:	ldr	r1, [r9, #4]
   15d44:	stm	r0, {r1, r5}
   15d48:	str	r0, [r9, #4]
   15d4c:	add	r0, r4, r7
   15d50:	cmp	r5, r0
   15d54:	bcs	15df4 <__assert_fail@plt+0x3f60>
   15d58:	ldr	r8, [fp, #12]
   15d5c:	add	r0, sl, r7
   15d60:	mov	sl, #0
   15d64:	mov	r4, r5
   15d68:	add	r7, r5, r0
   15d6c:	ldrb	r0, [r5]
   15d70:	cmp	r0, r6
   15d74:	bne	15de8 <__assert_fail@plt+0x3f54>
   15d78:	bl	11c54 <__ctype_b_loc@plt>
   15d7c:	ldr	r0, [r0]
   15d80:	add	r1, r0, r6, lsl #1
   15d84:	ldrb	r1, [r1, #1]
   15d88:	tst	r1, #32
   15d8c:	mov	r1, r5
   15d90:	beq	15db8 <__assert_fail@plt+0x3f24>
   15d94:	mov	r1, r5
   15d98:	cmp	r4, r1
   15d9c:	beq	15dd4 <__assert_fail@plt+0x3f40>
   15da0:	ldrb	r2, [r1, #-1]!
   15da4:	add	r2, r0, r2, lsl #1
   15da8:	ldrb	r2, [r2, #1]
   15dac:	tst	r2, #32
   15db0:	bne	15d98 <__assert_fail@plt+0x3f04>
   15db4:	add	r1, r1, #1
   15db8:	strb	sl, [r1]
   15dbc:	mov	r1, r4
   15dc0:	ldr	r2, [sp, #12]
   15dc4:	ldr	r4, [sp, #8]
   15dc8:	mov	r0, r9
   15dcc:	mov	r3, r8
   15dd0:	blx	r4
   15dd4:	add	r5, r5, #1
   15dd8:	mov	r4, r5
   15ddc:	cmp	r5, r7
   15de0:	bne	15d6c <__assert_fail@plt+0x3ed8>
   15de4:	b	15df4 <__assert_fail@plt+0x3f60>
   15de8:	add	r5, r5, #1
   15dec:	cmp	r5, r7
   15df0:	bne	15d6c <__assert_fail@plt+0x3ed8>
   15df4:	bl	11ca8 <__errno_location@plt>
   15df8:	ldr	r1, [sp, #4]
   15dfc:	cmp	r1, #0
   15e00:	str	r1, [r0]
   15e04:	mvnne	r1, #0
   15e08:	mov	r0, r1
   15e0c:	sub	sp, fp, #28
   15e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e14:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15e18:	add	fp, sp, #24
   15e1c:	sub	sp, sp, #16
   15e20:	mov	r5, r1
   15e24:	movw	r1, #43896	; 0xab78
   15e28:	str	r0, [sp, #12]
   15e2c:	mov	r0, r2
   15e30:	mov	r4, r3
   15e34:	mov	r6, r2
   15e38:	movt	r1, #3
   15e3c:	bl	11a14 <strcmp@plt>
   15e40:	ldr	r8, [fp, #8]
   15e44:	cmp	r0, #0
   15e48:	beq	15ec0 <__assert_fail@plt+0x402c>
   15e4c:	movw	r1, #41940	; 0xa3d4
   15e50:	mov	r0, r6
   15e54:	movt	r1, #3
   15e58:	bl	11dec <fopen64@plt>
   15e5c:	mvn	r6, #0
   15e60:	cmp	r0, #0
   15e64:	beq	15eb4 <__assert_fail@plt+0x4020>
   15e68:	mov	r7, r0
   15e6c:	add	r0, sp, #12
   15e70:	mov	r1, r5
   15e74:	mov	r3, r4
   15e78:	str	r8, [sp]
   15e7c:	str	r0, [sp, #4]
   15e80:	movw	r0, #24316	; 0x5efc
   15e84:	mov	r2, r7
   15e88:	movt	r0, #1
   15e8c:	bl	15c2c <__assert_fail@plt+0x3d98>
   15e90:	mov	r8, r0
   15e94:	bl	11ca8 <__errno_location@plt>
   15e98:	ldr	r4, [r0]
   15e9c:	mov	r5, r0
   15ea0:	mov	r0, r7
   15ea4:	bl	15ff8 <__assert_fail@plt+0x4164>
   15ea8:	cmp	r0, #0
   15eac:	moveq	r6, r8
   15eb0:	streq	r4, [r5]
   15eb4:	mov	r0, r6
   15eb8:	sub	sp, fp, #24
   15ebc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ec0:	movw	r0, #45616	; 0xb230
   15ec4:	mov	r1, r5
   15ec8:	mov	r3, r4
   15ecc:	str	r8, [sp]
   15ed0:	movt	r0, #4
   15ed4:	ldr	r2, [r0]
   15ed8:	add	r0, sp, #12
   15edc:	str	r0, [sp, #4]
   15ee0:	movw	r0, #24316	; 0x5efc
   15ee4:	movt	r0, #1
   15ee8:	bl	15c2c <__assert_fail@plt+0x3d98>
   15eec:	mov	r6, r0
   15ef0:	mov	r0, r6
   15ef4:	sub	sp, fp, #24
   15ef8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15efc:	ldr	r3, [r3]
   15f00:	bx	r3
   15f04:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15f08:	add	fp, sp, #24
   15f0c:	sub	sp, sp, #56	; 0x38
   15f10:	mov	r7, #0
   15f14:	mov	r8, r1
   15f18:	str	r7, [sp, #8]
   15f1c:	str	r7, [sp, #4]
   15f20:	strb	r7, [sp]
   15f24:	str	r0, [sp, #16]
   15f28:	mov	r0, sp
   15f2c:	strb	r7, [sp, #12]
   15f30:	bl	1cabc <__assert_fail@plt+0xac28>
   15f34:	ldrb	r1, [sp, #24]
   15f38:	ldr	r0, [sp, #28]
   15f3c:	cmp	r1, #0
   15f40:	beq	15f4c <__assert_fail@plt+0x40b8>
   15f44:	cmp	r0, #0
   15f48:	beq	15fb0 <__assert_fail@plt+0x411c>
   15f4c:	mov	r4, #0
   15f50:	mov	r5, sp
   15f54:	mov	r7, #0
   15f58:	tst	r1, #255	; 0xff
   15f5c:	beq	15f70 <__assert_fail@plt+0x40dc>
   15f60:	bl	11ab0 <towlower@plt>
   15f64:	mov	r6, r0
   15f68:	ldr	r0, [sp, #16]
   15f6c:	b	15f78 <__assert_fail@plt+0x40e4>
   15f70:	ldr	r0, [sp, #16]
   15f74:	ldrb	r6, [r0]
   15f78:	strb	r4, [sp, #12]
   15f7c:	ldr	r1, [sp, #20]
   15f80:	add	r0, r0, r1
   15f84:	str	r0, [sp, #16]
   15f88:	mov	r0, r5
   15f8c:	bl	1cabc <__assert_fail@plt+0xac28>
   15f90:	rsb	r0, r7, r7, lsl #5
   15f94:	ldrb	r1, [sp, #24]
   15f98:	add	r7, r6, r0
   15f9c:	ldr	r0, [sp, #28]
   15fa0:	cmp	r1, #0
   15fa4:	beq	15f58 <__assert_fail@plt+0x40c4>
   15fa8:	cmp	r0, #0
   15fac:	bne	15f58 <__assert_fail@plt+0x40c4>
   15fb0:	udiv	r0, r7, r8
   15fb4:	mls	r0, r0, r8, r7
   15fb8:	sub	sp, fp, #24
   15fbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15fc0:	b	1aa34 <__assert_fail@plt+0x8ba0>
   15fc4:	push	{fp, lr}
   15fc8:	mov	fp, sp
   15fcc:	bl	1c848 <__assert_fail@plt+0xa9b4>
   15fd0:	clz	r0, r0
   15fd4:	lsr	r0, r0, #5
   15fd8:	pop	{fp, pc}
   15fdc:	push	{fp, lr}
   15fe0:	mov	fp, sp
   15fe4:	bl	11a14 <strcmp@plt>
   15fe8:	clz	r0, r0
   15fec:	lsr	r0, r0, #5
   15ff0:	pop	{fp, pc}
   15ff4:	b	17b10 <__assert_fail@plt+0x5c7c>
   15ff8:	push	{r4, r5, r6, sl, fp, lr}
   15ffc:	add	fp, sp, #16
   16000:	sub	sp, sp, #8
   16004:	mov	r4, r0
   16008:	bl	11cfc <fileno@plt>
   1600c:	cmn	r0, #1
   16010:	ble	16084 <__assert_fail@plt+0x41f0>
   16014:	mov	r0, r4
   16018:	bl	11c0c <__freading@plt>
   1601c:	cmp	r0, #0
   16020:	beq	1604c <__assert_fail@plt+0x41b8>
   16024:	mov	r0, r4
   16028:	bl	11cfc <fileno@plt>
   1602c:	mov	r1, #1
   16030:	mov	r2, #0
   16034:	mov	r3, #0
   16038:	str	r1, [sp]
   1603c:	bl	11b64 <lseek64@plt>
   16040:	and	r0, r0, r1
   16044:	cmn	r0, #1
   16048:	beq	16084 <__assert_fail@plt+0x41f0>
   1604c:	mov	r0, r4
   16050:	bl	16094 <__assert_fail@plt+0x4200>
   16054:	cmp	r0, #0
   16058:	beq	16084 <__assert_fail@plt+0x41f0>
   1605c:	bl	11ca8 <__errno_location@plt>
   16060:	ldr	r6, [r0]
   16064:	mov	r5, r0
   16068:	mov	r0, r4
   1606c:	bl	11d20 <fclose@plt>
   16070:	cmp	r6, #0
   16074:	strne	r6, [r5]
   16078:	mvnne	r0, #0
   1607c:	sub	sp, fp, #16
   16080:	pop	{r4, r5, r6, sl, fp, pc}
   16084:	mov	r0, r4
   16088:	sub	sp, fp, #16
   1608c:	pop	{r4, r5, r6, sl, fp, lr}
   16090:	b	11d20 <fclose@plt>
   16094:	push	{r4, sl, fp, lr}
   16098:	add	fp, sp, #8
   1609c:	sub	sp, sp, #8
   160a0:	mov	r4, r0
   160a4:	cmp	r0, #0
   160a8:	beq	160c4 <__assert_fail@plt+0x4230>
   160ac:	mov	r0, r4
   160b0:	bl	11c0c <__freading@plt>
   160b4:	cmp	r0, #0
   160b8:	ldrbne	r0, [r4, #1]
   160bc:	tstne	r0, #1
   160c0:	bne	160d4 <__assert_fail@plt+0x4240>
   160c4:	mov	r0, r4
   160c8:	sub	sp, fp, #8
   160cc:	pop	{r4, sl, fp, lr}
   160d0:	b	11a38 <fflush@plt>
   160d4:	mov	r0, #1
   160d8:	mov	r2, #0
   160dc:	mov	r3, #0
   160e0:	str	r0, [sp]
   160e4:	mov	r0, r4
   160e8:	bl	17da4 <__assert_fail@plt+0x5f10>
   160ec:	mov	r0, r4
   160f0:	sub	sp, fp, #8
   160f4:	pop	{r4, sl, fp, lr}
   160f8:	b	11a38 <fflush@plt>
   160fc:	push	{fp, lr}
   16100:	mov	fp, sp
   16104:	sub	sp, sp, #16
   16108:	str	r3, [sp, #8]
   1610c:	mvn	r3, #0
   16110:	str	r3, [sp, #4]
   16114:	mov	r3, #0
   16118:	str	r3, [sp]
   1611c:	ldr	r3, [fp, #8]
   16120:	str	r3, [sp, #12]
   16124:	mov	r3, #0
   16128:	bl	16134 <__assert_fail@plt+0x42a0>
   1612c:	mov	sp, fp
   16130:	pop	{fp, pc}
   16134:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16138:	add	fp, sp, #28
   1613c:	sub	sp, sp, #124	; 0x7c
   16140:	sub	sp, sp, #1024	; 0x400
   16144:	str	r3, [sp, #80]	; 0x50
   16148:	mov	r4, r2
   1614c:	mov	sl, r1
   16150:	mov	r7, r0
   16154:	bl	11ca8 <__errno_location@plt>
   16158:	mov	r2, r4
   1615c:	movw	r3, #38108	; 0x94dc
   16160:	str	r0, [sp, #60]	; 0x3c
   16164:	ldr	r1, [r2, #8]!
   16168:	movt	r3, #3
   1616c:	cmp	r1, #0
   16170:	mov	r6, r1
   16174:	movweq	r6, #12
   16178:	cmp	r1, #12
   1617c:	subgt	r6, r1, #12
   16180:	ldr	r1, [r2, #32]
   16184:	cmp	r1, #0
   16188:	movne	r3, r1
   1618c:	ldr	r1, [r0]
   16190:	str	r3, [sp, #48]	; 0x30
   16194:	ldrb	r3, [sl]
   16198:	str	r1, [sp, #56]	; 0x38
   1619c:	cmp	r3, #0
   161a0:	beq	17ad0 <__assert_fail@plt+0x5c3c>
   161a4:	sub	r0, fp, #46	; 0x2e
   161a8:	mvn	r1, #13
   161ac:	ldr	r8, [fp, #12]
   161b0:	str	r2, [sp, #40]	; 0x28
   161b4:	str	r4, [sp, #72]	; 0x48
   161b8:	str	r6, [sp, #36]	; 0x24
   161bc:	str	r7, [sp, #88]	; 0x58
   161c0:	sub	r1, r1, r0
   161c4:	str	r1, [sp, #28]
   161c8:	add	r1, r0, #13
   161cc:	add	r0, r0, #14
   161d0:	str	r1, [sp, #24]
   161d4:	add	r1, sp, #96	; 0x60
   161d8:	str	r0, [sp, #64]	; 0x40
   161dc:	add	r1, r1, #1
   161e0:	str	r1, [sp, #44]	; 0x2c
   161e4:	add	r1, r4, #12
   161e8:	mov	r4, #0
   161ec:	str	r1, [sp, #32]
   161f0:	sub	r1, fp, #51	; 0x33
   161f4:	add	r2, r1, #3
   161f8:	add	r0, r1, #2
   161fc:	str	r2, [sp, #52]	; 0x34
   16200:	str	r0, [sp, #68]	; 0x44
   16204:	uxtb	r1, r3
   16208:	cmp	r1, #37	; 0x25
   1620c:	bne	16228 <__assert_fail@plt+0x4394>
   16210:	ldr	lr, [sp, #80]	; 0x50
   16214:	str	r4, [sp, #92]	; 0x5c
   16218:	mov	r4, #0
   1621c:	mov	r6, #0
   16220:	str	sl, [sp, #84]	; 0x54
   16224:	b	1631c <__assert_fail@plt+0x4488>
   16228:	bic	r1, r8, r8, asr #31
   1622c:	mov	r5, #1
   16230:	mvn	r2, r4
   16234:	cmp	r1, #1
   16238:	movhi	r5, r1
   1623c:	cmp	r5, r2
   16240:	bcs	17aec <__assert_fail@plt+0x5c58>
   16244:	cmp	r7, #0
   16248:	beq	1628c <__assert_fail@plt+0x43f8>
   1624c:	cmp	r1, #2
   16250:	bcc	16280 <__assert_fail@plt+0x43ec>
   16254:	mov	r9, r4
   16258:	sub	r4, r1, #1
   1625c:	mov	r6, #0
   16260:	mov	r0, #32
   16264:	mov	r1, r7
   16268:	bl	11d80 <fputc@plt>
   1626c:	add	r6, r6, #1
   16270:	cmp	r6, r4
   16274:	bcc	16260 <__assert_fail@plt+0x43cc>
   16278:	ldrb	r3, [sl]
   1627c:	mov	r4, r9
   16280:	uxtb	r0, r3
   16284:	mov	r1, r7
   16288:	bl	11d80 <fputc@plt>
   1628c:	add	r4, r5, r4
   16290:	ldrb	r3, [sl, #1]!
   16294:	mvn	r8, #0
   16298:	cmp	r3, #0
   1629c:	bne	16204 <__assert_fail@plt+0x4370>
   162a0:	b	17ad4 <__assert_fail@plt+0x5c40>
   162a4:	mov	r4, #1
   162a8:	b	1631c <__assert_fail@plt+0x4488>
   162ac:	add	r3, pc, #0
   162b0:	ldr	pc, [r3, r2, lsl #2]
   162b4:	andeq	r6, r1, r4, lsr #5
   162b8:	andeq	r6, r1, r8, lsr r3
   162bc:	andeq	r6, r1, r8, lsr r3
   162c0:	andeq	r6, r1, r8, lsr r3
   162c4:	andeq	r6, r1, r8, lsr r3
   162c8:	andeq	r6, r1, r8, lsr r3
   162cc:	andeq	r6, r1, r8, lsr r3
   162d0:	andeq	r6, r1, r8, lsr r3
   162d4:	andeq	r6, r1, ip, ror #5
   162d8:	andeq	r6, r1, r8, lsr r3
   162dc:	andeq	r6, r1, ip, ror #5
   162e0:	andeq	r6, r1, r8, lsr r3
   162e4:	andeq	r6, r1, r8, lsr r3
   162e8:	andeq	r6, r1, ip, ror #5
   162ec:	add	r1, r1, #1
   162f0:	add	sl, sl, #1
   162f4:	mov	r6, r9
   162f8:	ldrb	r9, [sl]
   162fc:	sub	r2, r9, #35	; 0x23
   16300:	cmp	r2, #13
   16304:	bls	162ac <__assert_fail@plt+0x4418>
   16308:	cmp	r9, #95	; 0x5f
   1630c:	beq	162ec <__assert_fail@plt+0x4458>
   16310:	cmp	r9, #94	; 0x5e
   16314:	bne	16338 <__assert_fail@plt+0x44a4>
   16318:	mov	lr, #1
   1631c:	add	r1, sl, #2
   16320:	add	sl, sl, #1
   16324:	ldrb	r9, [sl]
   16328:	sub	r2, r9, #35	; 0x23
   1632c:	cmp	r2, #13
   16330:	bls	162ac <__assert_fail@plt+0x4418>
   16334:	b	16308 <__assert_fail@plt+0x4474>
   16338:	sub	r2, r9, #48	; 0x30
   1633c:	cmp	r2, #9
   16340:	bhi	163bc <__assert_fail@plt+0x4528>
   16344:	movw	r5, #52428	; 0xcccc
   16348:	mov	r8, #0
   1634c:	mov	r7, #-2147483648	; 0x80000000
   16350:	movt	r5, #3276	; 0xccc
   16354:	cmn	r8, #1
   16358:	ble	16368 <__assert_fail@plt+0x44d4>
   1635c:	cmp	r8, r5
   16360:	bgt	16378 <__assert_fail@plt+0x44e4>
   16364:	b	16390 <__assert_fail@plt+0x44fc>
   16368:	beq	16390 <__assert_fail@plt+0x44fc>
   1636c:	sdiv	r2, r7, r8
   16370:	cmp	r2, #10
   16374:	bge	16390 <__assert_fail@plt+0x44fc>
   16378:	mvn	r8, #-2147483648	; 0x80000000
   1637c:	ldrb	r9, [r1], #1
   16380:	sub	r2, r9, #48	; 0x30
   16384:	cmp	r2, #10
   16388:	bcc	16354 <__assert_fail@plt+0x44c0>
   1638c:	b	163b8 <__assert_fail@plt+0x4524>
   16390:	add	r2, r8, r8, lsl #2
   16394:	lsl	r3, r2, #1
   16398:	uxtab	r0, r3, r9
   1639c:	sub	r8, r0, #48	; 0x30
   163a0:	cmp	r8, r2, lsl #1
   163a4:	mvnvs	r8, #-2147483648	; 0x80000000
   163a8:	ldrb	r9, [r1], #1
   163ac:	sub	r2, r9, #48	; 0x30
   163b0:	cmp	r2, #10
   163b4:	bcc	16354 <__assert_fail@plt+0x44c0>
   163b8:	sub	sl, r1, #1
   163bc:	cmp	r9, #79	; 0x4f
   163c0:	cmpne	r9, #69	; 0x45
   163c4:	bne	163d8 <__assert_fail@plt+0x4544>
   163c8:	ldrb	r1, [sl, #1]!
   163cc:	cmp	r1, #122	; 0x7a
   163d0:	bls	163e8 <__assert_fail@plt+0x4554>
   163d4:	b	16f80 <__assert_fail@plt+0x50ec>
   163d8:	mov	r1, r9
   163dc:	mov	r9, #0
   163e0:	cmp	r1, #122	; 0x7a
   163e4:	bhi	16f80 <__assert_fail@plt+0x50ec>
   163e8:	movw	r3, #38918	; 0x9806
   163ec:	add	r2, pc, #12
   163f0:	mov	r7, #0
   163f4:	mvn	r5, #0
   163f8:	movt	r3, #3
   163fc:	ldr	pc, [r2, r1, lsl #2]
   16400:	andeq	r6, r1, r8, asr r7
   16404:	andeq	r6, r1, r0, lsl #31
   16408:	andeq	r6, r1, r0, lsl #31
   1640c:	andeq	r6, r1, r0, lsl #31
   16410:	andeq	r6, r1, r0, lsl #31
   16414:	andeq	r6, r1, r0, lsl #31
   16418:	andeq	r6, r1, r0, lsl #31
   1641c:	andeq	r6, r1, r0, lsl #31
   16420:	andeq	r6, r1, r0, lsl #31
   16424:	andeq	r6, r1, r0, lsl #31
   16428:	andeq	r6, r1, r0, lsl #31
   1642c:	andeq	r6, r1, r0, lsl #31
   16430:	andeq	r6, r1, r0, lsl #31
   16434:	andeq	r6, r1, r0, lsl #31
   16438:	andeq	r6, r1, r0, lsl #31
   1643c:	andeq	r6, r1, r0, lsl #31
   16440:	andeq	r6, r1, r0, lsl #31
   16444:	andeq	r6, r1, r0, lsl #31
   16448:	andeq	r6, r1, r0, lsl #31
   1644c:	andeq	r6, r1, r0, lsl #31
   16450:	andeq	r6, r1, r0, lsl #31
   16454:	andeq	r6, r1, r0, lsl #31
   16458:	andeq	r6, r1, r0, lsl #31
   1645c:	andeq	r6, r1, r0, lsl #31
   16460:	andeq	r6, r1, r0, lsl #31
   16464:	andeq	r6, r1, r0, lsl #31
   16468:	andeq	r6, r1, r0, lsl #31
   1646c:	andeq	r6, r1, r0, lsl #31
   16470:	andeq	r6, r1, r0, lsl #31
   16474:	andeq	r6, r1, r0, lsl #31
   16478:	andeq	r6, r1, r0, lsl #31
   1647c:	andeq	r6, r1, r0, lsl #31
   16480:	andeq	r6, r1, r0, lsl #31
   16484:	andeq	r6, r1, r0, lsl #31
   16488:	andeq	r6, r1, r0, lsl #31
   1648c:	andeq	r6, r1, r0, lsl #31
   16490:	andeq	r6, r1, r0, lsl #31
   16494:	andeq	r6, r1, r4, ror #14
   16498:	andeq	r6, r1, r0, lsl #31
   1649c:	andeq	r6, r1, r0, lsl #31
   164a0:	andeq	r6, r1, r0, lsl #31
   164a4:	andeq	r6, r1, r0, lsl #31
   164a8:	andeq	r6, r1, r0, lsl #31
   164ac:	andeq	r6, r1, r0, lsl #31
   164b0:	andeq	r6, r1, r0, lsl #31
   164b4:	andeq	r6, r1, r0, lsl #31
   164b8:	andeq	r6, r1, r0, lsl #31
   164bc:	andeq	r6, r1, r0, lsl #31
   164c0:	andeq	r6, r1, r0, lsl #31
   164c4:	andeq	r6, r1, r0, lsl #31
   164c8:	andeq	r6, r1, r0, lsl #31
   164cc:	andeq	r6, r1, r0, lsl #31
   164d0:	andeq	r6, r1, r0, lsl #31
   164d4:	andeq	r6, r1, r0, lsl #31
   164d8:	andeq	r6, r1, r0, lsl #31
   164dc:	andeq	r6, r1, r0, lsl #31
   164e0:	andeq	r6, r1, r0, lsl #31
   164e4:	andeq	r6, r1, r0, lsl #31
   164e8:	andeq	r6, r1, r0, ror #15
   164ec:	andeq	r6, r1, r0, lsl #31
   164f0:	andeq	r6, r1, r0, lsl #31
   164f4:	andeq	r6, r1, r0, lsl #31
   164f8:	andeq	r6, r1, r0, lsl #31
   164fc:	andeq	r6, r1, r0, lsl #31
   16500:	andeq	r6, r1, r0, lsl #31
   16504:	andeq	r6, r1, ip, asr r8
   16508:	andeq	r6, r1, r4, ror r8
   1650c:	andeq	r6, r1, ip, lsl #17
   16510:	andeq	r6, r1, r0, lsr #17
   16514:	andeq	r6, r1, r0, lsl #31
   16518:			; <UNDEFINED> instruction: 0x000168b4
   1651c:	andeq	r6, r1, ip, ror #11
   16520:	andeq	r6, r1, r0, ror #17
   16524:	strdeq	r6, [r1], -r0
   16528:	andeq	r6, r1, r0, lsl #31
   1652c:	andeq	r6, r1, r0, lsl #31
   16530:	andeq	r6, r1, r0, lsl #31
   16534:	andeq	r6, r1, r8, lsl #18
   16538:	andeq	r6, r1, r0, lsr #18
   1653c:	andeq	r6, r1, r0, lsl #31
   16540:	andeq	r6, r1, r4, asr sl
   16544:	andeq	r6, r1, r0, lsl #31
   16548:	andeq	r6, r1, r4, lsl #21
   1654c:	andeq	r6, r1, ip, ror #20
   16550:	andeq	r6, r1, ip, ror sl
   16554:	andeq	r6, r1, r8, lsr fp
   16558:	andeq	r6, r1, ip, ror #11
   1655c:	andeq	r6, r1, r0, ror fp
   16560:	andeq	r6, r1, r8, asr #23
   16564:	ldrdeq	r6, [r1], -ip
   16568:	andeq	r6, r1, ip, lsl #24
   1656c:	andeq	r6, r1, r0, lsl #31
   16570:	andeq	r6, r1, r0, lsl #31
   16574:	andeq	r6, r1, r0, lsl #31
   16578:	andeq	r6, r1, r0, lsl #31
   1657c:	andeq	r6, r1, r0, lsl #31
   16580:	andeq	r6, r1, r0, lsl #31
   16584:	muleq	r1, r4, ip
   16588:	andeq	r6, r1, r4, asr #14
   1658c:	andeq	r6, r1, ip, lsr #25
   16590:	andeq	r6, r1, r0, asr #25
   16594:	ldrdeq	r6, [r1], -r8
   16598:	andeq	r6, r1, r0, lsl #31
   1659c:	andeq	r6, r1, ip, ror #11
   165a0:	andeq	r6, r1, r4, asr #14
   165a4:	andeq	r6, r1, r0, lsl #31
   165a8:	andeq	r6, r1, r8, ror #25
   165ac:	andeq	r6, r1, r8, lsl sp
   165b0:	andeq	r6, r1, r0, lsr sp
   165b4:	andeq	r6, r1, r4, asr sp
   165b8:	andeq	r6, r1, r4, lsl #27
   165bc:	andeq	r6, r1, r0, lsl #31
   165c0:	andeq	r6, r1, r8, asr sl
   165c4:	strdeq	r6, [r1], -r0
   165c8:	andeq	r7, r1, r0, asr #17
   165cc:	andeq	r6, r1, r8, lsl lr
   165d0:			; <UNDEFINED> instruction: 0x00016eb8
   165d4:	andeq	r6, r1, r4, lsr #30
   165d8:	andeq	r6, r1, r0, lsl #31
   165dc:	andeq	r6, r1, ip, asr pc
   165e0:	andeq	r6, r1, r8, ror pc
   165e4:	andeq	r7, r1, r4, lsr #1
   165e8:	andeq	r6, r1, ip, lsl #16
   165ec:	cmp	r9, #69	; 0x45
   165f0:	beq	16f80 <__assert_fail@plt+0x50ec>
   165f4:	ldr	r2, [sp, #72]	; 0x48
   165f8:	str	lr, [sp, #76]	; 0x4c
   165fc:	movw	r0, #9363	; 0x2493
   16600:	movt	r0, #37449	; 0x9249
   16604:	ldr	r5, [r2, #28]
   16608:	ldr	lr, [r2, #24]
   1660c:	ldr	ip, [r2, #20]
   16610:	movw	r2, #382	; 0x17e
   16614:	add	r2, r5, r2
   16618:	cmp	ip, #0
   1661c:	sub	r2, r2, lr
   16620:	smmla	r7, r2, r0, r2
   16624:	asr	r4, r7, #2
   16628:	add	r7, r4, r7, lsr #31
   1662c:	rsb	r7, r7, r7, lsl #3
   16630:	sub	r2, r7, r2
   16634:	mvn	r7, #99	; 0x63
   16638:	add	r2, r5, r2
   1663c:	movwlt	r7, #300	; 0x12c
   16640:	add	r2, r2, #3
   16644:	add	r4, r7, ip
   16648:	cmn	r2, #1
   1664c:	ble	170e0 <__assert_fail@plt+0x524c>
   16650:	movw	r7, #365	; 0x16d
   16654:	tst	r4, #3
   16658:	bne	166ac <__assert_fail@plt+0x4818>
   1665c:	movw	r7, #34079	; 0x851f
   16660:	mov	r0, ip
   16664:	mov	ip, #100	; 0x64
   16668:	movt	r7, #20971	; 0x51eb
   1666c:	smmul	r7, r4, r7
   16670:	asr	r3, r7, #5
   16674:	add	r3, r3, r7, lsr #31
   16678:	mls	ip, r3, ip, r4
   1667c:	asr	r3, r7, #7
   16680:	add	r3, r3, r7, lsr #31
   16684:	mov	r7, #400	; 0x190
   16688:	mls	r3, r3, r7, r4
   1668c:	movw	r7, #365	; 0x16d
   16690:	cmp	r3, #0
   16694:	movweq	r7, #366	; 0x16e
   16698:	cmp	ip, #0
   1669c:	mov	ip, r0
   166a0:	movw	r0, #9363	; 0x2493
   166a4:	movt	r0, #37449	; 0x9249
   166a8:	movwne	r7, #366	; 0x16e
   166ac:	add	r3, lr, r7
   166b0:	movw	r7, #382	; 0x17e
   166b4:	add	r7, r5, r7
   166b8:	sub	r3, r7, r3
   166bc:	smmla	r3, r3, r0, r3
   166c0:	asr	r7, r3, #2
   166c4:	add	r3, r7, r3, lsr #31
   166c8:	movw	r7, #379	; 0x17b
   166cc:	rsb	r3, r3, r3, lsl #3
   166d0:	add	r3, r3, lr
   166d4:	sub	r3, r3, r7
   166d8:	mov	r7, #1
   166dc:	cmn	r3, #1
   166e0:	movgt	r2, r3
   166e4:	eor	r3, r7, r3, lsr #31
   166e8:	cmp	r1, #71	; 0x47
   166ec:	beq	17164 <__assert_fail@plt+0x52d0>
   166f0:	cmp	r1, #103	; 0x67
   166f4:	bne	171ac <__assert_fail@plt+0x5318>
   166f8:	movw	r2, #34079	; 0x851f
   166fc:	mov	r0, ip
   16700:	mov	lr, #0
   16704:	movt	r2, #20971	; 0x51eb
   16708:	smmul	r7, ip, r2
   1670c:	asr	r5, r7, #5
   16710:	add	r7, r5, r7, lsr #31
   16714:	mov	r5, #100	; 0x64
   16718:	mls	r7, r7, r5, ip
   1671c:	mov	ip, #2
   16720:	add	r7, r3, r7
   16724:	smmul	r2, r7, r2
   16728:	asr	r4, r2, #5
   1672c:	add	r2, r4, r2, lsr #31
   16730:	mls	r2, r2, r5, r7
   16734:	cmn	r2, #1
   16738:	ble	17618 <__assert_fail@plt+0x5784>
   1673c:	mov	r3, r2
   16740:	b	17654 <__assert_fail@plt+0x57c0>
   16744:	orr	lr, r4, lr
   16748:	mov	r7, #0
   1674c:	cmp	r9, #69	; 0x45
   16750:	beq	16f80 <__assert_fail@plt+0x50ec>
   16754:	b	178c0 <__assert_fail@plt+0x5a2c>
   16758:	ldr	r4, [sp, #92]	; 0x5c
   1675c:	sub	r9, sl, #1
   16760:	b	16f88 <__assert_fail@plt+0x50f4>
   16764:	ldr	r0, [sp, #84]	; 0x54
   16768:	ldr	r4, [sp, #92]	; 0x5c
   1676c:	sub	r9, sl, #1
   16770:	cmp	r9, r0
   16774:	bne	16f88 <__assert_fail@plt+0x50f4>
   16778:	subs	r0, r6, #45	; 0x2d
   1677c:	mvn	r1, r4
   16780:	bicne	r0, r8, r8, asr #31
   16784:	cmp	r0, #1
   16788:	mov	r5, r0
   1678c:	movls	r5, #1
   16790:	cmp	r5, r1
   16794:	bcs	17aec <__assert_fail@plt+0x5c58>
   16798:	ldr	r1, [sp, #88]	; 0x58
   1679c:	cmp	r1, #0
   167a0:	beq	17aac <__assert_fail@plt+0x5c18>
   167a4:	ldr	r7, [sp, #88]	; 0x58
   167a8:	cmp	r0, #2
   167ac:	bcc	17aa0 <__assert_fail@plt+0x5c0c>
   167b0:	uxtb	r1, r6
   167b4:	sub	r6, r0, #1
   167b8:	cmp	r1, #43	; 0x2b
   167bc:	cmpne	r1, #48	; 0x30
   167c0:	bne	17a88 <__assert_fail@plt+0x5bf4>
   167c4:	ldr	r7, [sp, #88]	; 0x58
   167c8:	mov	r0, #48	; 0x30
   167cc:	mov	r1, r7
   167d0:	bl	11d80 <fputc@plt>
   167d4:	subs	r6, r6, #1
   167d8:	bne	167c8 <__assert_fail@plt+0x4934>
   167dc:	b	17aa0 <__assert_fail@plt+0x5c0c>
   167e0:	mov	r7, #1
   167e4:	ldrb	r2, [sl, r7]
   167e8:	cmp	r2, #58	; 0x3a
   167ec:	bne	16800 <__assert_fail@plt+0x496c>
   167f0:	add	r7, r7, #1
   167f4:	ldrb	r2, [sl, r7]
   167f8:	cmp	r2, #58	; 0x3a
   167fc:	beq	167f0 <__assert_fail@plt+0x495c>
   16800:	cmp	r2, #122	; 0x7a
   16804:	bne	16f80 <__assert_fail@plt+0x50ec>
   16808:	add	sl, sl, r7
   1680c:	ldr	r3, [sp, #72]	; 0x48
   16810:	ldr	r2, [r3, #32]
   16814:	cmp	r2, #0
   16818:	blt	17190 <__assert_fail@plt+0x52fc>
   1681c:	ldr	r2, [r3, #36]	; 0x24
   16820:	str	lr, [sp, #76]	; 0x4c
   16824:	cmp	r2, #0
   16828:	blt	17524 <__assert_fail@plt+0x5690>
   1682c:	mov	lr, #0
   16830:	bne	17528 <__assert_fail@plt+0x5694>
   16834:	ldr	r3, [sp, #48]	; 0x30
   16838:	ldrb	r3, [r3]
   1683c:	sub	r3, r3, #45	; 0x2d
   16840:	clz	r3, r3
   16844:	lsr	lr, r3, #5
   16848:	cmp	r7, #3
   1684c:	bls	17530 <__assert_fail@plt+0x569c>
   16850:	ldr	r4, [sp, #92]	; 0x5c
   16854:	ldr	lr, [sp, #76]	; 0x4c
   16858:	b	16f84 <__assert_fail@plt+0x50f0>
   1685c:	cmp	r9, #0
   16860:	bne	16f80 <__assert_fail@plt+0x50ec>
   16864:	orr	lr, r4, lr
   16868:	mov	r7, #0
   1686c:	mov	r1, #65	; 0x41
   16870:	b	178c0 <__assert_fail@plt+0x5a2c>
   16874:	cmp	r9, #69	; 0x45
   16878:	beq	16f80 <__assert_fail@plt+0x50ec>
   1687c:	orr	lr, r4, lr
   16880:	mov	r7, #0
   16884:	mov	r1, #66	; 0x42
   16888:	b	178c0 <__assert_fail@plt+0x5a2c>
   1688c:	cmp	r9, #69	; 0x45
   16890:	bne	17424 <__assert_fail@plt+0x5590>
   16894:	mov	r7, #0
   16898:	mov	r1, #67	; 0x43
   1689c:	b	178c0 <__assert_fail@plt+0x5a2c>
   168a0:	cmp	r9, #0
   168a4:	bne	16f80 <__assert_fail@plt+0x50ec>
   168a8:	movw	r3, #41363	; 0xa193
   168ac:	movt	r3, #3
   168b0:	b	16a84 <__assert_fail@plt+0x4bf0>
   168b4:	cmp	r9, #0
   168b8:	bne	16f80 <__assert_fail@plt+0x50ec>
   168bc:	movw	r3, #38924	; 0x980c
   168c0:	cmp	r6, #0
   168c4:	movt	r3, #3
   168c8:	bne	17634 <__assert_fail@plt+0x57a0>
   168cc:	cmp	r8, #0
   168d0:	bge	17634 <__assert_fail@plt+0x57a0>
   168d4:	mov	r6, #43	; 0x2b
   168d8:	mov	r5, #4
   168dc:	b	16a84 <__assert_fail@plt+0x4bf0>
   168e0:	cmp	r9, #69	; 0x45
   168e4:	beq	16f80 <__assert_fail@plt+0x50ec>
   168e8:	ldr	r2, [sp, #40]	; 0x28
   168ec:	b	16ccc <__assert_fail@plt+0x4e38>
   168f0:	mov	ip, #2
   168f4:	cmp	r9, #69	; 0x45
   168f8:	beq	16f80 <__assert_fail@plt+0x50ec>
   168fc:	ldr	r3, [sp, #36]	; 0x24
   16900:	str	lr, [sp, #76]	; 0x4c
   16904:	b	171c0 <__assert_fail@plt+0x532c>
   16908:	cmp	r9, #69	; 0x45
   1690c:	beq	16f80 <__assert_fail@plt+0x50ec>
   16910:	ldr	r2, [sp, #72]	; 0x48
   16914:	str	lr, [sp, #76]	; 0x4c
   16918:	ldr	r3, [r2, #4]
   1691c:	b	171bc <__assert_fail@plt+0x5328>
   16920:	cmp	r9, #69	; 0x45
   16924:	beq	16f80 <__assert_fail@plt+0x50ec>
   16928:	ldr	r2, [fp, #20]
   1692c:	cmp	r8, #1
   16930:	mov	r7, #0
   16934:	mov	r0, #8
   16938:	movwlt	r8, #9
   1693c:	add	r1, r7, #9
   16940:	cmp	r8, r1
   16944:	bge	16970 <__assert_fail@plt+0x4adc>
   16948:	movw	r1, #26215	; 0x6667
   1694c:	sub	r0, r0, #1
   16950:	sub	r7, r7, #1
   16954:	movt	r1, #26214	; 0x6666
   16958:	smmul	r1, r2, r1
   1695c:	asr	r2, r1, #2
   16960:	add	r2, r2, r1, lsr #31
   16964:	add	r1, r7, #9
   16968:	cmp	r8, r1
   1696c:	blt	16948 <__assert_fail@plt+0x4ab4>
   16970:	movw	r3, #26215	; 0x6667
   16974:	cmp	r1, #2
   16978:	movt	r3, #26214	; 0x6666
   1697c:	blt	1699c <__assert_fail@plt+0x4b08>
   16980:	smmul	r5, r2, r3
   16984:	asr	r4, r5, #2
   16988:	add	r5, r4, r5, lsr #31
   1698c:	add	r5, r5, r5, lsl #2
   16990:	sub	r5, r2, r5, lsl #1
   16994:	cmp	r5, #0
   16998:	beq	16948 <__assert_fail@plt+0x4ab4>
   1699c:	cmp	r1, #1
   169a0:	sub	ip, fp, #46	; 0x2e
   169a4:	blt	169dc <__assert_fail@plt+0x4b48>
   169a8:	smmul	r5, r2, r3
   169ac:	asr	r4, r5, #2
   169b0:	add	r5, r4, r5, lsr #31
   169b4:	add	r4, r5, r5, lsl #2
   169b8:	sub	r2, r2, r4, lsl #1
   169bc:	add	r2, r2, #48	; 0x30
   169c0:	strb	r2, [ip, r0]
   169c4:	sub	r2, r0, #1
   169c8:	add	r0, r0, #1
   169cc:	cmp	r0, #1
   169d0:	mov	r0, r2
   169d4:	mov	r2, r5
   169d8:	bgt	169a8 <__assert_fail@plt+0x4b14>
   169dc:	ldr	r0, [sp, #92]	; 0x5c
   169e0:	cmp	r6, #0
   169e4:	movweq	r6, #48	; 0x30
   169e8:	mvn	r0, r0
   169ec:	cmp	r1, r0
   169f0:	bcs	17aec <__assert_fail@plt+0x5c58>
   169f4:	ldr	r0, [sp, #88]	; 0x58
   169f8:	str	r6, [sp, #84]	; 0x54
   169fc:	cmp	r0, #0
   16a00:	beq	176dc <__assert_fail@plt+0x5848>
   16a04:	tst	lr, #1
   16a08:	beq	176cc <__assert_fail@plt+0x5838>
   16a0c:	ldr	r6, [sp, #88]	; 0x58
   16a10:	cmn	r7, #9
   16a14:	sub	r0, fp, #46	; 0x2e
   16a18:	beq	176dc <__assert_fail@plt+0x5848>
   16a1c:	mov	r4, #0
   16a20:	mov	r9, r0
   16a24:	bl	11c24 <__ctype_toupper_loc@plt>
   16a28:	mov	r5, r0
   16a2c:	ldrb	r0, [r9, -r4]
   16a30:	ldr	r1, [r5]
   16a34:	ldr	r0, [r1, r0, lsl #2]
   16a38:	mov	r1, r6
   16a3c:	bl	11d80 <fputc@plt>
   16a40:	sub	r4, r4, #1
   16a44:	add	r0, r7, r4
   16a48:	cmn	r0, #9
   16a4c:	bne	16a2c <__assert_fail@plt+0x4b98>
   16a50:	b	176dc <__assert_fail@plt+0x5848>
   16a54:	mov	r7, #1
   16a58:	eor	r1, r4, #1
   16a5c:	orr	r7, r4, r7
   16a60:	and	lr, lr, r1
   16a64:	mov	r1, #112	; 0x70
   16a68:	b	178c0 <__assert_fail@plt+0x5a2c>
   16a6c:	cmp	r9, #69	; 0x45
   16a70:	beq	16f80 <__assert_fail@plt+0x50ec>
   16a74:	ldr	r2, [sp, #72]	; 0x48
   16a78:	b	16ccc <__assert_fail@plt+0x4e38>
   16a7c:	movw	r3, #41372	; 0xa19c
   16a80:	movt	r3, #3
   16a84:	ldr	r0, [fp, #16]
   16a88:	ldr	r2, [sp, #72]	; 0x48
   16a8c:	and	r7, lr, #1
   16a90:	str	r3, [sp, #84]	; 0x54
   16a94:	mov	r1, r3
   16a98:	str	r6, [sp]
   16a9c:	str	r5, [sp, #4]
   16aa0:	mov	r9, r6
   16aa4:	mov	r3, r7
   16aa8:	str	r0, [sp, #8]
   16aac:	ldr	r0, [fp, #20]
   16ab0:	str	r0, [sp, #12]
   16ab4:	mov	r0, #0
   16ab8:	bl	16134 <__assert_fail@plt+0x42a0>
   16abc:	subs	r1, r6, #45	; 0x2d
   16ac0:	ldr	r4, [sp, #92]	; 0x5c
   16ac4:	mov	r3, r6
   16ac8:	mov	r6, r0
   16acc:	movne	r1, r8
   16ad0:	cmp	r8, #0
   16ad4:	movwlt	r1, #0
   16ad8:	cmp	r1, r0
   16adc:	movhi	r6, r1
   16ae0:	mvn	r2, r4
   16ae4:	cmp	r6, r2
   16ae8:	bcs	17aec <__assert_fail@plt+0x5c58>
   16aec:	ldr	r2, [sp, #88]	; 0x58
   16af0:	cmp	r2, #0
   16af4:	beq	175fc <__assert_fail@plt+0x5768>
   16af8:	cmp	r1, r0
   16afc:	bls	170b8 <__assert_fail@plt+0x5224>
   16b00:	cmp	r3, #43	; 0x2b
   16b04:	str	r7, [sp, #76]	; 0x4c
   16b08:	sub	r7, r1, r0
   16b0c:	cmpne	r3, #48	; 0x30
   16b10:	bne	175b0 <__assert_fail@plt+0x571c>
   16b14:	ldr	r8, [sp, #88]	; 0x58
   16b18:	cmp	r7, #0
   16b1c:	beq	175d0 <__assert_fail@plt+0x573c>
   16b20:	mov	r0, #48	; 0x30
   16b24:	mov	r1, r8
   16b28:	bl	11d80 <fputc@plt>
   16b2c:	subs	r7, r7, #1
   16b30:	bne	16b20 <__assert_fail@plt+0x4c8c>
   16b34:	b	175d0 <__assert_fail@plt+0x573c>
   16b38:	cmp	r9, #69	; 0x45
   16b3c:	beq	16f80 <__assert_fail@plt+0x50ec>
   16b40:	ldr	r3, [sp, #72]	; 0x48
   16b44:	str	lr, [sp, #76]	; 0x4c
   16b48:	ldr	r2, [r3, #24]
   16b4c:	ldr	r3, [r3, #28]
   16b50:	add	r3, r3, #7
   16b54:	sub	r2, r3, r2
   16b58:	movw	r3, #9363	; 0x2493
   16b5c:	movt	r3, #37449	; 0x9249
   16b60:	smmla	r2, r2, r3, r2
   16b64:	asr	r3, r2, #2
   16b68:	add	r3, r3, r2, lsr #31
   16b6c:	b	171bc <__assert_fail@plt+0x5328>
   16b70:	cmp	r9, #69	; 0x45
   16b74:	beq	16f80 <__assert_fail@plt+0x50ec>
   16b78:	ldr	r3, [sp, #72]	; 0x48
   16b7c:	movw	ip, #9363	; 0x2493
   16b80:	str	lr, [sp, #76]	; 0x4c
   16b84:	movt	ip, #37449	; 0x9249
   16b88:	ldr	r2, [r3, #24]
   16b8c:	ldr	r3, [r3, #28]
   16b90:	add	r2, r2, #6
   16b94:	smmla	r5, r2, ip, r2
   16b98:	asr	r4, r5, #2
   16b9c:	add	r5, r4, r5, lsr #31
   16ba0:	ldr	r4, [sp, #92]	; 0x5c
   16ba4:	rsb	r5, r5, r5, lsl #3
   16ba8:	sub	r2, r5, r2
   16bac:	add	r2, r3, r2
   16bb0:	add	r2, r2, #7
   16bb4:	smmla	r2, r2, ip, r2
   16bb8:	mov	ip, #2
   16bbc:	asr	r3, r2, #2
   16bc0:	add	r3, r3, r2, lsr #31
   16bc4:	b	171c4 <__assert_fail@plt+0x5330>
   16bc8:	cmp	r9, #79	; 0x4f
   16bcc:	beq	16f80 <__assert_fail@plt+0x50ec>
   16bd0:	mov	r7, #0
   16bd4:	mov	r1, #88	; 0x58
   16bd8:	b	178c0 <__assert_fail@plt+0x5a2c>
   16bdc:	cmp	r9, #69	; 0x45
   16be0:	beq	175a4 <__assert_fail@plt+0x5710>
   16be4:	cmp	r9, #79	; 0x4f
   16be8:	beq	16f80 <__assert_fail@plt+0x50ec>
   16bec:	ldr	r2, [sp, #72]	; 0x48
   16bf0:	movw	r3, #63636	; 0xf894
   16bf4:	str	lr, [sp, #76]	; 0x4c
   16bf8:	mov	lr, #0
   16bfc:	movt	r3, #65535	; 0xffff
   16c00:	ldr	r2, [r2, #20]
   16c04:	cmp	r2, r3
   16c08:	b	1717c <__assert_fail@plt+0x52e8>
   16c0c:	ldr	r0, [sp, #48]	; 0x30
   16c10:	str	r4, [sp, #84]	; 0x54
   16c14:	subs	r4, r6, #45	; 0x2d
   16c18:	str	lr, [sp, #76]	; 0x4c
   16c1c:	mov	r9, r6
   16c20:	bicne	r4, r8, r8, asr #31
   16c24:	bl	11c78 <strlen@plt>
   16c28:	mov	r5, r0
   16c2c:	cmp	r4, r0
   16c30:	mov	r8, r0
   16c34:	ldr	r0, [sp, #92]	; 0x5c
   16c38:	movhi	r8, r4
   16c3c:	mvn	r0, r0
   16c40:	cmp	r8, r0
   16c44:	bcs	17aec <__assert_fail@plt+0x5c58>
   16c48:	ldr	r7, [sp, #88]	; 0x58
   16c4c:	cmp	r7, #0
   16c50:	beq	17408 <__assert_fail@plt+0x5574>
   16c54:	cmp	r4, r5
   16c58:	bls	177b0 <__assert_fail@plt+0x591c>
   16c5c:	uxtb	r0, r9
   16c60:	sub	r6, r4, r5
   16c64:	cmp	r0, #43	; 0x2b
   16c68:	cmpne	r0, #48	; 0x30
   16c6c:	bne	17790 <__assert_fail@plt+0x58fc>
   16c70:	ldr	r4, [sp, #88]	; 0x58
   16c74:	cmp	r6, #0
   16c78:	beq	177b0 <__assert_fail@plt+0x591c>
   16c7c:	mov	r0, #48	; 0x30
   16c80:	mov	r1, r4
   16c84:	bl	11d80 <fputc@plt>
   16c88:	subs	r6, r6, #1
   16c8c:	bne	16c7c <__assert_fail@plt+0x4de8>
   16c90:	b	177b0 <__assert_fail@plt+0x591c>
   16c94:	cmp	r9, #0
   16c98:	bne	16f80 <__assert_fail@plt+0x50ec>
   16c9c:	orr	lr, r4, lr
   16ca0:	mov	r7, #0
   16ca4:	mov	r1, #97	; 0x61
   16ca8:	b	178c0 <__assert_fail@plt+0x5a2c>
   16cac:	cmp	r9, #79	; 0x4f
   16cb0:	beq	16f80 <__assert_fail@plt+0x50ec>
   16cb4:	mov	r7, #0
   16cb8:	mov	r1, #99	; 0x63
   16cbc:	b	178c0 <__assert_fail@plt+0x5a2c>
   16cc0:	cmp	r9, #69	; 0x45
   16cc4:	beq	16f80 <__assert_fail@plt+0x50ec>
   16cc8:	ldr	r2, [sp, #32]
   16ccc:	str	lr, [sp, #76]	; 0x4c
   16cd0:	ldr	r3, [r2]
   16cd4:	b	171bc <__assert_fail@plt+0x5328>
   16cd8:	ldr	r2, [sp, #32]
   16cdc:	cmp	r9, #69	; 0x45
   16ce0:	bne	16d24 <__assert_fail@plt+0x4e90>
   16ce4:	b	16f80 <__assert_fail@plt+0x50ec>
   16ce8:	cmp	r9, #69	; 0x45
   16cec:	beq	16f80 <__assert_fail@plt+0x50ec>
   16cf0:	ldr	r2, [sp, #72]	; 0x48
   16cf4:	ldr	r4, [sp, #92]	; 0x5c
   16cf8:	str	lr, [sp, #76]	; 0x4c
   16cfc:	mov	lr, #0
   16d00:	mov	ip, #3
   16d04:	ldr	r2, [r2, #28]
   16d08:	cmn	r2, #1
   16d0c:	add	r3, r2, #1
   16d10:	movwlt	lr, #1
   16d14:	b	171c8 <__assert_fail@plt+0x5334>
   16d18:	ldr	r2, [sp, #40]	; 0x28
   16d1c:	cmp	r9, #69	; 0x45
   16d20:	beq	16f80 <__assert_fail@plt+0x50ec>
   16d24:	ldr	r3, [r2]
   16d28:	ldr	r4, [sp, #92]	; 0x5c
   16d2c:	b	16d40 <__assert_fail@plt+0x4eac>
   16d30:	ldr	r3, [sp, #36]	; 0x24
   16d34:	ldr	r4, [sp, #92]	; 0x5c
   16d38:	cmp	r9, #69	; 0x45
   16d3c:	beq	16f84 <__assert_fail@plt+0x50f0>
   16d40:	cmp	r6, #0
   16d44:	str	lr, [sp, #76]	; 0x4c
   16d48:	mov	ip, #2
   16d4c:	movweq	r6, #95	; 0x5f
   16d50:	b	171c4 <__assert_fail@plt+0x5330>
   16d54:	cmp	r9, #69	; 0x45
   16d58:	beq	16f80 <__assert_fail@plt+0x50ec>
   16d5c:	ldr	r2, [sp, #72]	; 0x48
   16d60:	ldr	r4, [sp, #92]	; 0x5c
   16d64:	str	lr, [sp, #76]	; 0x4c
   16d68:	mov	lr, #0
   16d6c:	mov	ip, #2
   16d70:	ldr	r2, [r2, #16]
   16d74:	cmn	r2, #1
   16d78:	add	r3, r2, #1
   16d7c:	movwlt	lr, #1
   16d80:	b	171c8 <__assert_fail@plt+0x5334>
   16d84:	ldr	r4, [sp, #92]	; 0x5c
   16d88:	subs	r0, r6, #45	; 0x2d
   16d8c:	bicne	r0, r8, r8, asr #31
   16d90:	cmp	r0, #1
   16d94:	mov	r5, r0
   16d98:	movls	r5, #1
   16d9c:	mvn	r1, r4
   16da0:	cmp	r5, r1
   16da4:	bcs	17aec <__assert_fail@plt+0x5c58>
   16da8:	ldr	r1, [sp, #88]	; 0x58
   16dac:	cmp	r1, #0
   16db0:	beq	17aac <__assert_fail@plt+0x5c18>
   16db4:	ldr	r7, [sp, #88]	; 0x58
   16db8:	cmp	r0, #2
   16dbc:	bcc	17864 <__assert_fail@plt+0x59d0>
   16dc0:	uxtb	r1, r6
   16dc4:	sub	r6, r0, #1
   16dc8:	cmp	r1, #43	; 0x2b
   16dcc:	cmpne	r1, #48	; 0x30
   16dd0:	bne	1784c <__assert_fail@plt+0x59b8>
   16dd4:	ldr	r7, [sp, #88]	; 0x58
   16dd8:	mov	r0, #48	; 0x30
   16ddc:	mov	r1, r7
   16de0:	bl	11d80 <fputc@plt>
   16de4:	subs	r6, r6, #1
   16de8:	bne	16dd8 <__assert_fail@plt+0x4f44>
   16dec:	b	17864 <__assert_fail@plt+0x59d0>
   16df0:	ldr	r2, [sp, #72]	; 0x48
   16df4:	ldr	r4, [sp, #92]	; 0x5c
   16df8:	mov	r3, #11
   16dfc:	mov	ip, #1
   16e00:	str	lr, [sp, #76]	; 0x4c
   16e04:	mov	lr, #0
   16e08:	ldr	r2, [r2, #16]
   16e0c:	mul	r2, r2, r3
   16e10:	add	r3, ip, r2, asr #5
   16e14:	b	171c8 <__assert_fail@plt+0x5334>
   16e18:	ldr	r2, [sp, #72]	; 0x48
   16e1c:	mov	r0, #28
   16e20:	add	r1, sp, #96	; 0x60
   16e24:	ldr	r9, [sp, #92]	; 0x5c
   16e28:	str	lr, [sp, #76]	; 0x4c
   16e2c:	mov	r4, r1
   16e30:	mov	r3, r2
   16e34:	add	r2, r2, #16
   16e38:	vld1.32	{d16-d17}, [r3], r0
   16e3c:	vld1.32	{d18-d19}, [r2]
   16e40:	add	r2, r1, #16
   16e44:	vld1.32	{d20-d21}, [r3]
   16e48:	vst1.64	{d16-d17}, [r4], r0
   16e4c:	mvn	r0, #0
   16e50:	vst1.64	{d18-d19}, [r2]
   16e54:	vst1.32	{d20-d21}, [r4]
   16e58:	str	r0, [r4]
   16e5c:	ldr	r0, [fp, #16]
   16e60:	bl	337b8 <__assert_fail@plt+0x21924>
   16e64:	ldr	r1, [r4]
   16e68:	cmp	r1, #0
   16e6c:	blt	17b08 <__assert_fail@plt+0x5c74>
   16e70:	cmp	r0, #0
   16e74:	blt	174c8 <__assert_fail@plt+0x5634>
   16e78:	ldr	r1, [sp, #24]
   16e7c:	mov	r2, r0
   16e80:	movw	r3, #26215	; 0x6667
   16e84:	movt	r3, #26214	; 0x6666
   16e88:	smmul	r3, r2, r3
   16e8c:	asr	r7, r3, #2
   16e90:	add	r3, r7, r3, lsr #31
   16e94:	add	r7, r3, r3, lsl #2
   16e98:	sub	r7, r2, r7, lsl #1
   16e9c:	add	r2, r2, #9
   16ea0:	add	r7, r7, #48	; 0x30
   16ea4:	cmp	r2, #18
   16ea8:	mov	r2, r3
   16eac:	strb	r7, [r1], #-1
   16eb0:	bhi	16e80 <__assert_fail@plt+0x4fec>
   16eb4:	b	17504 <__assert_fail@plt+0x5670>
   16eb8:	ldr	r4, [sp, #92]	; 0x5c
   16ebc:	subs	r0, r6, #45	; 0x2d
   16ec0:	bicne	r0, r8, r8, asr #31
   16ec4:	cmp	r0, #1
   16ec8:	mov	r5, r0
   16ecc:	movls	r5, #1
   16ed0:	mvn	r1, r4
   16ed4:	cmp	r5, r1
   16ed8:	bcs	17aec <__assert_fail@plt+0x5c58>
   16edc:	ldr	r1, [sp, #88]	; 0x58
   16ee0:	cmp	r1, #0
   16ee4:	beq	17aac <__assert_fail@plt+0x5c18>
   16ee8:	ldr	r7, [sp, #88]	; 0x58
   16eec:	cmp	r0, #2
   16ef0:	bcc	17884 <__assert_fail@plt+0x59f0>
   16ef4:	uxtb	r1, r6
   16ef8:	sub	r6, r0, #1
   16efc:	cmp	r1, #43	; 0x2b
   16f00:	cmpne	r1, #48	; 0x30
   16f04:	bne	1786c <__assert_fail@plt+0x59d8>
   16f08:	ldr	r7, [sp, #88]	; 0x58
   16f0c:	mov	r0, #48	; 0x30
   16f10:	mov	r1, r7
   16f14:	bl	11d80 <fputc@plt>
   16f18:	subs	r6, r6, #1
   16f1c:	bne	16f0c <__assert_fail@plt+0x5078>
   16f20:	b	17884 <__assert_fail@plt+0x59f0>
   16f24:	ldr	r2, [sp, #72]	; 0x48
   16f28:	movw	r3, #9363	; 0x2493
   16f2c:	str	lr, [sp, #76]	; 0x4c
   16f30:	mov	ip, #1
   16f34:	movt	r3, #37449	; 0x9249
   16f38:	ldr	r2, [r2, #24]
   16f3c:	add	r2, r2, #6
   16f40:	smmla	r3, r2, r3, r2
   16f44:	asr	r7, r3, #2
   16f48:	add	r3, r7, r3, lsr #31
   16f4c:	rsb	r3, r3, r3, lsl #3
   16f50:	sub	r2, r2, r3
   16f54:	add	r3, r2, #1
   16f58:	b	171c0 <__assert_fail@plt+0x532c>
   16f5c:	cmp	r9, #69	; 0x45
   16f60:	beq	16f80 <__assert_fail@plt+0x50ec>
   16f64:	ldr	r2, [sp, #72]	; 0x48
   16f68:	str	lr, [sp, #76]	; 0x4c
   16f6c:	mov	ip, #1
   16f70:	ldr	r3, [r2, #24]
   16f74:	b	171c0 <__assert_fail@plt+0x532c>
   16f78:	cmp	r9, #79	; 0x4f
   16f7c:	bne	1747c <__assert_fail@plt+0x55e8>
   16f80:	ldr	r4, [sp, #92]	; 0x5c
   16f84:	mov	r9, sl
   16f88:	ldr	r1, [sp, #84]	; 0x54
   16f8c:	subs	r0, r6, #45	; 0x2d
   16f90:	bicne	r0, r8, r8, asr #31
   16f94:	sub	r1, r9, r1
   16f98:	add	r5, r1, #1
   16f9c:	mvn	r1, r4
   16fa0:	cmp	r0, r5
   16fa4:	mov	r8, r5
   16fa8:	movhi	r8, r0
   16fac:	cmp	r8, r1
   16fb0:	bcs	17aec <__assert_fail@plt+0x5c58>
   16fb4:	ldr	r7, [sp, #88]	; 0x58
   16fb8:	cmp	r7, #0
   16fbc:	beq	17084 <__assert_fail@plt+0x51f0>
   16fc0:	mov	sl, lr
   16fc4:	cmp	r0, r5
   16fc8:	bls	17024 <__assert_fail@plt+0x5190>
   16fcc:	sub	r7, r0, r5
   16fd0:	uxtb	r0, r6
   16fd4:	cmp	r0, #43	; 0x2b
   16fd8:	cmpne	r0, #48	; 0x30
   16fdc:	bne	17004 <__assert_fail@plt+0x5170>
   16fe0:	ldr	r4, [sp, #88]	; 0x58
   16fe4:	cmp	r7, #0
   16fe8:	beq	17024 <__assert_fail@plt+0x5190>
   16fec:	mov	r0, #48	; 0x30
   16ff0:	mov	r1, r4
   16ff4:	bl	11d80 <fputc@plt>
   16ff8:	subs	r7, r7, #1
   16ffc:	bne	16fec <__assert_fail@plt+0x5158>
   17000:	b	17024 <__assert_fail@plt+0x5190>
   17004:	ldr	r4, [sp, #88]	; 0x58
   17008:	cmp	r7, #0
   1700c:	beq	17024 <__assert_fail@plt+0x5190>
   17010:	mov	r0, #32
   17014:	mov	r1, r4
   17018:	bl	11d80 <fputc@plt>
   1701c:	subs	r7, r7, #1
   17020:	bne	17010 <__assert_fail@plt+0x517c>
   17024:	tst	sl, #1
   17028:	beq	1706c <__assert_fail@plt+0x51d8>
   1702c:	ldr	r7, [sp, #88]	; 0x58
   17030:	ldr	r6, [sp, #84]	; 0x54
   17034:	cmp	r5, #0
   17038:	beq	17084 <__assert_fail@plt+0x51f0>
   1703c:	sub	r0, r6, #1
   17040:	sub	r4, r0, r9
   17044:	bl	11c24 <__ctype_toupper_loc@plt>
   17048:	mov	r5, r0
   1704c:	ldrb	r0, [r6], #1
   17050:	ldr	r1, [r5]
   17054:	ldr	r0, [r1, r0, lsl #2]
   17058:	mov	r1, r7
   1705c:	bl	11d80 <fputc@plt>
   17060:	adds	r4, r4, #1
   17064:	bne	1704c <__assert_fail@plt+0x51b8>
   17068:	b	17084 <__assert_fail@plt+0x51f0>
   1706c:	ldr	r7, [sp, #88]	; 0x58
   17070:	ldr	r0, [sp, #84]	; 0x54
   17074:	mov	r1, r5
   17078:	mov	r2, #1
   1707c:	mov	r3, r7
   17080:	bl	11b58 <fwrite@plt>
   17084:	ldr	r4, [sp, #92]	; 0x5c
   17088:	mov	sl, r9
   1708c:	add	r4, r8, r4
   17090:	ldrb	r3, [sl, #1]!
   17094:	mvn	r8, #0
   17098:	cmp	r3, #0
   1709c:	bne	16204 <__assert_fail@plt+0x4370>
   170a0:	b	17ad4 <__assert_fail@plt+0x5c40>
   170a4:	cmp	r9, #69	; 0x45
   170a8:	bne	17488 <__assert_fail@plt+0x55f4>
   170ac:	mov	r7, #0
   170b0:	mov	r1, #121	; 0x79
   170b4:	b	178c0 <__assert_fail@plt+0x5a2c>
   170b8:	ldr	r0, [fp, #16]
   170bc:	stm	sp, {r3, r5}
   170c0:	mov	r3, r7
   170c4:	ldr	r1, [sp, #84]	; 0x54
   170c8:	ldr	r2, [sp, #72]	; 0x48
   170cc:	str	r0, [sp, #8]
   170d0:	ldr	r0, [fp, #20]
   170d4:	str	r0, [sp, #12]
   170d8:	ldr	r0, [sp, #88]	; 0x58
   170dc:	b	175f8 <__assert_fail@plt+0x5764>
   170e0:	sub	r2, r4, #1
   170e4:	movw	r4, #365	; 0x16d
   170e8:	tst	r2, #3
   170ec:	bne	17130 <__assert_fail@plt+0x529c>
   170f0:	movw	r7, #34079	; 0x851f
   170f4:	movt	r7, #20971	; 0x51eb
   170f8:	smmul	r7, r2, r7
   170fc:	asr	r4, r7, #5
   17100:	add	r3, r4, r7, lsr #31
   17104:	mov	r4, #100	; 0x64
   17108:	mls	r3, r3, r4, r2
   1710c:	asr	r4, r7, #7
   17110:	add	r4, r4, r7, lsr #31
   17114:	mov	r7, #400	; 0x190
   17118:	mls	r2, r4, r7, r2
   1711c:	movw	r4, #365	; 0x16d
   17120:	cmp	r2, #0
   17124:	movweq	r4, #366	; 0x16e
   17128:	cmp	r3, #0
   1712c:	movwne	r4, #366	; 0x16e
   17130:	movw	r7, #382	; 0x17e
   17134:	add	r2, r4, r5
   17138:	sub	r3, r7, lr
   1713c:	add	r2, r3, r2
   17140:	smmla	r2, r2, r0, r2
   17144:	asr	r7, r2, #2
   17148:	add	r2, r7, r2, lsr #31
   1714c:	rsb	r2, r2, r2, lsl #3
   17150:	sub	r2, r2, r3
   17154:	mvn	r3, #0
   17158:	add	r2, r2, #3
   1715c:	cmp	r1, #71	; 0x47
   17160:	bne	166f0 <__assert_fail@plt+0x485c>
   17164:	movw	r2, #63636	; 0xf894
   17168:	mov	lr, #0
   1716c:	movt	r2, #65535	; 0xffff
   17170:	sub	r2, r2, r3
   17174:	cmp	ip, r2
   17178:	add	r2, ip, r3
   1717c:	movwlt	lr, #1
   17180:	movw	r3, #1900	; 0x76c
   17184:	mov	ip, #4
   17188:	add	r3, r2, r3
   1718c:	b	17654 <__assert_fail@plt+0x57c0>
   17190:	ldr	r7, [sp, #88]	; 0x58
   17194:	ldr	r4, [sp, #92]	; 0x5c
   17198:	ldrb	r3, [sl, #1]!
   1719c:	mvn	r8, #0
   171a0:	cmp	r3, #0
   171a4:	bne	16204 <__assert_fail@plt+0x4370>
   171a8:	b	17ad4 <__assert_fail@plt+0x5c40>
   171ac:	smmla	r2, r2, r0, r2
   171b0:	asr	r3, r2, #2
   171b4:	add	r2, r3, r2, lsr #31
   171b8:	add	r3, r2, #1
   171bc:	mov	ip, #2
   171c0:	ldr	r4, [sp, #92]	; 0x5c
   171c4:	lsr	lr, r3, #31
   171c8:	cmp	lr, #0
   171cc:	mov	r2, #0
   171d0:	mov	r0, #0
   171d4:	movwne	lr, #1
   171d8:	cmp	r9, #79	; 0x4f
   171dc:	moveq	r7, #0
   171e0:	cmpeq	lr, #0
   171e4:	beq	178bc <__assert_fail@plt+0x5a28>
   171e8:	ldr	r5, [sp, #64]	; 0x40
   171ec:	cmp	lr, #0
   171f0:	rsbne	r3, r3, #0
   171f4:	tst	r2, #1
   171f8:	asr	r2, r2, #1
   171fc:	movne	r1, #58	; 0x3a
   17200:	strbne	r1, [r5, #-1]!
   17204:	movw	r1, #52429	; 0xcccd
   17208:	cmp	r3, #9
   1720c:	movt	r1, #52428	; 0xcccc
   17210:	umull	r7, r1, r3, r1
   17214:	lsr	r7, r1, #3
   17218:	add	r1, r7, r7, lsl #2
   1721c:	sub	r1, r3, r1, lsl #1
   17220:	mov	r3, r7
   17224:	orr	r1, r1, #48	; 0x30
   17228:	strb	r1, [r5, #-1]!
   1722c:	bhi	171f4 <__assert_fail@plt+0x5360>
   17230:	cmp	r2, #0
   17234:	mov	r3, r7
   17238:	bne	171f4 <__assert_fail@plt+0x5360>
   1723c:	cmp	r8, #0
   17240:	mov	r3, r6
   17244:	movlt	r8, ip
   17248:	cmp	r0, #0
   1724c:	movwne	r0, #43	; 0x2b
   17250:	cmp	r6, #0
   17254:	movweq	r3, #48	; 0x30
   17258:	ldr	r1, [sp, #64]	; 0x40
   1725c:	cmp	lr, #0
   17260:	mov	r2, r8
   17264:	movwne	r0, #45	; 0x2d
   17268:	cmp	r0, #0
   1726c:	subne	r2, r2, #1
   17270:	sub	r9, r1, r5
   17274:	sub	r7, r2, r9
   17278:	cmp	r7, #1
   1727c:	movwlt	r7, #0
   17280:	subs	r6, r3, #45	; 0x2d
   17284:	moveq	r7, r6
   17288:	cmp	r0, #0
   1728c:	beq	1730c <__assert_fail@plt+0x5478>
   17290:	cmp	r3, #95	; 0x5f
   17294:	str	r9, [sp, #84]	; 0x54
   17298:	bne	17378 <__assert_fail@plt+0x54e4>
   1729c:	str	r6, [sp, #16]
   172a0:	ldr	r6, [sp, #88]	; 0x58
   172a4:	mov	r9, r3
   172a8:	str	r0, [sp, #20]
   172ac:	cmp	r6, #0
   172b0:	cmpne	r7, #0
   172b4:	beq	172d0 <__assert_fail@plt+0x543c>
   172b8:	mov	r4, r7
   172bc:	mov	r0, #32
   172c0:	mov	r1, r6
   172c4:	bl	11d80 <fputc@plt>
   172c8:	subs	r4, r4, #1
   172cc:	bne	172bc <__assert_fail@plt+0x5428>
   172d0:	ldr	r4, [sp, #92]	; 0x5c
   172d4:	ldr	r0, [sp, #20]
   172d8:	ldr	r6, [sp, #16]
   172dc:	sub	r8, r8, r7
   172e0:	add	r4, r7, r4
   172e4:	cmn	r4, #3
   172e8:	bhi	17aec <__assert_fail@plt+0x5c58>
   172ec:	ldr	r1, [sp, #88]	; 0x58
   172f0:	cmp	r1, #0
   172f4:	beq	172fc <__assert_fail@plt+0x5468>
   172f8:	bl	11d80 <fputc@plt>
   172fc:	mov	r3, r9
   17300:	ldr	r9, [sp, #84]	; 0x54
   17304:	sub	r8, r8, #1
   17308:	add	r4, r4, #1
   1730c:	cmp	r3, #45	; 0x2d
   17310:	mvn	r0, r4
   17314:	bicne	r6, r8, r8, asr #31
   17318:	mov	r8, r9
   1731c:	cmp	r6, r9
   17320:	movhi	r8, r6
   17324:	cmp	r8, r0
   17328:	bcs	17aec <__assert_fail@plt+0x5c58>
   1732c:	ldr	r7, [sp, #88]	; 0x58
   17330:	str	r4, [sp, #92]	; 0x5c
   17334:	cmp	r7, #0
   17338:	beq	17408 <__assert_fail@plt+0x5574>
   1733c:	cmp	r6, r9
   17340:	bls	173a8 <__assert_fail@plt+0x5514>
   17344:	cmp	r3, #43	; 0x2b
   17348:	sub	r6, r6, r9
   1734c:	cmpne	r3, #48	; 0x30
   17350:	bne	17388 <__assert_fail@plt+0x54f4>
   17354:	ldr	r4, [sp, #88]	; 0x58
   17358:	cmp	r6, #0
   1735c:	beq	173a8 <__assert_fail@plt+0x5514>
   17360:	mov	r0, #48	; 0x30
   17364:	mov	r1, r4
   17368:	bl	11d80 <fputc@plt>
   1736c:	subs	r6, r6, #1
   17370:	bne	17360 <__assert_fail@plt+0x54cc>
   17374:	b	173a8 <__assert_fail@plt+0x5514>
   17378:	mov	r9, r3
   1737c:	cmn	r4, #3
   17380:	bls	172ec <__assert_fail@plt+0x5458>
   17384:	b	17aec <__assert_fail@plt+0x5c58>
   17388:	ldr	r4, [sp, #88]	; 0x58
   1738c:	cmp	r6, #0
   17390:	beq	173a8 <__assert_fail@plt+0x5514>
   17394:	mov	r0, #32
   17398:	mov	r1, r4
   1739c:	bl	11d80 <fputc@plt>
   173a0:	subs	r6, r6, #1
   173a4:	bne	17394 <__assert_fail@plt+0x5500>
   173a8:	ldr	r0, [sp, #76]	; 0x4c
   173ac:	tst	r0, #1
   173b0:	beq	173f0 <__assert_fail@plt+0x555c>
   173b4:	ldr	r7, [sp, #88]	; 0x58
   173b8:	cmp	r9, #0
   173bc:	beq	17408 <__assert_fail@plt+0x5574>
   173c0:	ldr	r0, [sp, #28]
   173c4:	add	r4, r0, r5
   173c8:	bl	11c24 <__ctype_toupper_loc@plt>
   173cc:	mov	r6, r0
   173d0:	ldrb	r0, [r5], #1
   173d4:	ldr	r1, [r6]
   173d8:	ldr	r0, [r1, r0, lsl #2]
   173dc:	mov	r1, r7
   173e0:	bl	11d80 <fputc@plt>
   173e4:	adds	r4, r4, #1
   173e8:	bne	173d0 <__assert_fail@plt+0x553c>
   173ec:	b	17408 <__assert_fail@plt+0x5574>
   173f0:	mov	r0, r5
   173f4:	mov	r1, r9
   173f8:	ldr	r7, [sp, #88]	; 0x58
   173fc:	mov	r2, #1
   17400:	mov	r3, r7
   17404:	bl	11b58 <fwrite@plt>
   17408:	ldr	r4, [sp, #92]	; 0x5c
   1740c:	add	r4, r8, r4
   17410:	ldrb	r3, [sl, #1]!
   17414:	mvn	r8, #0
   17418:	cmp	r3, #0
   1741c:	bne	16204 <__assert_fail@plt+0x4370>
   17420:	b	17ad4 <__assert_fail@plt+0x5c40>
   17424:	ldr	r2, [sp, #72]	; 0x48
   17428:	movw	r7, #63636	; 0xf894
   1742c:	mov	r3, #0
   17430:	mvn	r5, #98	; 0x62
   17434:	str	lr, [sp, #76]	; 0x4c
   17438:	mov	lr, #0
   1743c:	mov	ip, #2
   17440:	movt	r7, #65535	; 0xffff
   17444:	ldr	r2, [r2, #20]
   17448:	cmp	r2, r7
   1744c:	movwge	r3, #1
   17450:	cmp	r2, r7
   17454:	and	r3, r3, r2, lsr #31
   17458:	movwlt	lr, #1
   1745c:	smlabb	r3, r3, r5, r2
   17460:	movw	r5, #34079	; 0x851f
   17464:	movt	r5, #20971	; 0x51eb
   17468:	smmul	r3, r3, r5
   1746c:	asr	r5, r3, #5
   17470:	add	r3, r5, r3, lsr #31
   17474:	add	r3, r3, #19
   17478:	b	17654 <__assert_fail@plt+0x57c0>
   1747c:	mov	r7, #0
   17480:	mov	r1, #120	; 0x78
   17484:	b	178c0 <__assert_fail@plt+0x5a2c>
   17488:	ldr	r2, [sp, #72]	; 0x48
   1748c:	movw	r3, #34079	; 0x851f
   17490:	str	lr, [sp, #76]	; 0x4c
   17494:	mov	ip, #2
   17498:	mov	lr, #0
   1749c:	movt	r3, #20971	; 0x51eb
   174a0:	ldr	r2, [r2, #20]
   174a4:	smmul	r3, r2, r3
   174a8:	asr	r7, r3, #5
   174ac:	add	r3, r7, r3, lsr #31
   174b0:	mov	r7, #100	; 0x64
   174b4:	mls	r4, r3, r7, r2
   174b8:	cmn	r4, #1
   174bc:	ble	17640 <__assert_fail@plt+0x57ac>
   174c0:	mov	r3, r4
   174c4:	b	17654 <__assert_fail@plt+0x57c0>
   174c8:	ldr	r1, [sp, #24]
   174cc:	mov	r2, r0
   174d0:	movw	r3, #26215	; 0x6667
   174d4:	movt	r3, #26214	; 0x6666
   174d8:	smmul	r3, r2, r3
   174dc:	asr	r7, r3, #2
   174e0:	add	r3, r7, r3, lsr #31
   174e4:	add	r7, r3, r3, lsl #2
   174e8:	rsb	r7, r2, r7, lsl #1
   174ec:	add	r2, r2, #9
   174f0:	add	r7, r7, #48	; 0x30
   174f4:	cmp	r2, #18
   174f8:	mov	r2, r3
   174fc:	strb	r7, [r1], #-1
   17500:	bhi	174d0 <__assert_fail@plt+0x563c>
   17504:	cmp	r8, #0
   17508:	mov	r3, r6
   1750c:	lsr	lr, r0, #31
   17510:	add	r5, r1, #1
   17514:	mov	r4, r9
   17518:	mov	r0, #0
   1751c:	movwlt	r8, #1
   17520:	b	17250 <__assert_fail@plt+0x53bc>
   17524:	mov	lr, #1
   17528:	cmp	r7, #3
   1752c:	bhi	16850 <__assert_fail@plt+0x49bc>
   17530:	movw	r3, #34953	; 0x8889
   17534:	movt	r3, #34952	; 0x8888
   17538:	smmla	r5, r2, r3, r2
   1753c:	asr	r4, r5, #5
   17540:	add	r4, r4, r5, lsr #31
   17544:	smmla	r3, r4, r3, r4
   17548:	asr	r5, r3, #5
   1754c:	add	r3, r5, r3, lsr #31
   17550:	rsb	r3, r3, r3, lsl #4
   17554:	sub	ip, r4, r3, lsl #2
   17558:	movw	r3, #46021	; 0xb3c5
   1755c:	rsb	r4, r4, r4, lsl #4
   17560:	movt	r3, #37282	; 0x91a2
   17564:	smmla	r3, r2, r3, r2
   17568:	sub	r2, r2, r4, lsl #2
   1756c:	add	r4, pc, #8
   17570:	asr	r5, r3, #11
   17574:	add	r3, r5, r3, lsr #31
   17578:	ldr	pc, [r4, r7, lsl #2]
   1757c:	andeq	r7, r1, ip, lsl #11
   17580:	muleq	r1, r4, r8
   17584:	andeq	r7, r1, ip, lsr #13
   17588:	andeq	r7, r1, r4, lsr #13
   1758c:	mov	r2, #100	; 0x64
   17590:	mla	r3, r3, r2, ip
   17594:	mov	ip, #5
   17598:	mov	r0, #1
   1759c:	mov	r2, #0
   175a0:	b	178a8 <__assert_fail@plt+0x5a14>
   175a4:	mov	r7, #0
   175a8:	mov	r1, #89	; 0x59
   175ac:	b	178c0 <__assert_fail@plt+0x5a2c>
   175b0:	ldr	r8, [sp, #88]	; 0x58
   175b4:	cmp	r7, #0
   175b8:	beq	175d0 <__assert_fail@plt+0x573c>
   175bc:	mov	r0, #32
   175c0:	mov	r1, r8
   175c4:	bl	11d80 <fputc@plt>
   175c8:	subs	r7, r7, #1
   175cc:	bne	175bc <__assert_fail@plt+0x5728>
   175d0:	ldr	r0, [fp, #16]
   175d4:	ldr	r1, [sp, #84]	; 0x54
   175d8:	ldr	r2, [sp, #72]	; 0x48
   175dc:	ldr	r3, [sp, #76]	; 0x4c
   175e0:	str	r9, [sp]
   175e4:	str	r5, [sp, #4]
   175e8:	str	r0, [sp, #8]
   175ec:	ldr	r0, [fp, #20]
   175f0:	str	r0, [sp, #12]
   175f4:	mov	r0, r8
   175f8:	bl	16134 <__assert_fail@plt+0x42a0>
   175fc:	ldr	r7, [sp, #88]	; 0x58
   17600:	add	r4, r6, r4
   17604:	ldrb	r3, [sl, #1]!
   17608:	mvn	r8, #0
   1760c:	cmp	r3, #0
   17610:	bne	16204 <__assert_fail@plt+0x4370>
   17614:	b	17ad4 <__assert_fail@plt+0x5c40>
   17618:	movw	r4, #63636	; 0xf894
   1761c:	movt	r4, #65535	; 0xffff
   17620:	sub	r4, r4, r3
   17624:	add	r3, r2, #100	; 0x64
   17628:	cmp	r0, r4
   1762c:	rsblt	r3, r2, #0
   17630:	b	17654 <__assert_fail@plt+0x57c0>
   17634:	sub	r0, r8, #6
   17638:	bic	r5, r0, r0, asr #31
   1763c:	b	16a84 <__assert_fail@plt+0x4bf0>
   17640:	movw	r5, #63636	; 0xf894
   17644:	add	r3, r4, #100	; 0x64
   17648:	movt	r5, #65535	; 0xffff
   1764c:	cmp	r2, r5
   17650:	rsblt	r3, r4, #0
   17654:	ldr	r2, [fp, #8]
   17658:	mov	r0, r6
   1765c:	cmp	r6, #0
   17660:	moveq	r0, r2
   17664:	mov	r2, #0
   17668:	mov	r6, r0
   1766c:	cmp	r0, #43	; 0x2b
   17670:	mov	r0, #0
   17674:	bne	178a8 <__assert_fail@plt+0x5a14>
   17678:	cmp	ip, r8
   1767c:	mov	r5, #0
   17680:	movw	r7, #9999	; 0x270f
   17684:	mov	r4, #0
   17688:	movwlt	r5, #1
   1768c:	cmp	ip, #2
   17690:	movweq	r7, #99	; 0x63
   17694:	cmp	r7, r3
   17698:	movwcc	r4, #1
   1769c:	orr	r0, r5, r4
   176a0:	b	178a8 <__assert_fail@plt+0x5a14>
   176a4:	cmp	r2, #0
   176a8:	beq	1788c <__assert_fail@plt+0x59f8>
   176ac:	movw	r4, #10000	; 0x2710
   176b0:	mov	r0, #1
   176b4:	mla	r2, r3, r4, r2
   176b8:	mov	r3, #100	; 0x64
   176bc:	mla	r3, ip, r3, r2
   176c0:	mov	ip, #9
   176c4:	mov	r2, #20
   176c8:	b	178a8 <__assert_fail@plt+0x5a14>
   176cc:	ldr	r3, [sp, #88]	; 0x58
   176d0:	sub	r0, fp, #46	; 0x2e
   176d4:	mov	r2, #1
   176d8:	bl	11b58 <fwrite@plt>
   176dc:	ldr	r9, [sp, #84]	; 0x54
   176e0:	ldr	r1, [sp, #92]	; 0x5c
   176e4:	mov	r5, #0
   176e8:	cmp	r9, #45	; 0x2d
   176ec:	subne	r0, r8, #9
   176f0:	subne	r0, r0, r7
   176f4:	bicne	r5, r0, r0, asr #31
   176f8:	mvn	r0, #9
   176fc:	sub	r0, r0, r1
   17700:	sub	r0, r0, r7
   17704:	cmp	r5, r0
   17708:	bcs	17aec <__assert_fail@plt+0x5c58>
   1770c:	ldr	r6, [sp, #88]	; 0x58
   17710:	cmp	r6, #0
   17714:	cmpne	r5, #0
   17718:	bne	17744 <__assert_fail@plt+0x58b0>
   1771c:	ldr	r0, [sp, #92]	; 0x5c
   17720:	add	r0, r5, r0
   17724:	add	r0, r0, r7
   17728:	mov	r7, r6
   1772c:	add	r4, r0, #9
   17730:	ldrb	r3, [sl, #1]!
   17734:	mvn	r8, #0
   17738:	cmp	r3, #0
   1773c:	bne	16204 <__assert_fail@plt+0x4370>
   17740:	b	17ad4 <__assert_fail@plt+0x5c40>
   17744:	uxtb	r0, r9
   17748:	cmp	r0, #43	; 0x2b
   1774c:	beq	1775c <__assert_fail@plt+0x58c8>
   17750:	cmp	r0, #48	; 0x30
   17754:	mov	r4, r5
   17758:	bne	17778 <__assert_fail@plt+0x58e4>
   1775c:	mov	r4, r5
   17760:	mov	r0, #48	; 0x30
   17764:	mov	r1, r6
   17768:	bl	11d80 <fputc@plt>
   1776c:	subs	r4, r4, #1
   17770:	bne	17760 <__assert_fail@plt+0x58cc>
   17774:	b	1771c <__assert_fail@plt+0x5888>
   17778:	mov	r0, #32
   1777c:	mov	r1, r6
   17780:	bl	11d80 <fputc@plt>
   17784:	subs	r4, r4, #1
   17788:	bne	17778 <__assert_fail@plt+0x58e4>
   1778c:	b	1771c <__assert_fail@plt+0x5888>
   17790:	ldr	r4, [sp, #88]	; 0x58
   17794:	cmp	r6, #0
   17798:	beq	177b0 <__assert_fail@plt+0x591c>
   1779c:	mov	r0, #32
   177a0:	mov	r1, r4
   177a4:	bl	11d80 <fputc@plt>
   177a8:	subs	r6, r6, #1
   177ac:	bne	1779c <__assert_fail@plt+0x5908>
   177b0:	ldr	r0, [sp, #84]	; 0x54
   177b4:	tst	r0, #1
   177b8:	beq	177f4 <__assert_fail@plt+0x5960>
   177bc:	ldr	r7, [sp, #88]	; 0x58
   177c0:	cmp	r5, #0
   177c4:	beq	17408 <__assert_fail@plt+0x5574>
   177c8:	bl	11c18 <__ctype_tolower_loc@plt>
   177cc:	ldr	r4, [sp, #48]	; 0x30
   177d0:	mov	r6, r0
   177d4:	ldrb	r0, [r4], #1
   177d8:	ldr	r1, [r6]
   177dc:	ldr	r0, [r1, r0, lsl #2]
   177e0:	mov	r1, r7
   177e4:	bl	11d80 <fputc@plt>
   177e8:	subs	r5, r5, #1
   177ec:	bne	177d4 <__assert_fail@plt+0x5940>
   177f0:	b	17408 <__assert_fail@plt+0x5574>
   177f4:	ldr	r1, [sp, #76]	; 0x4c
   177f8:	eor	r0, r0, #1
   177fc:	and	r0, r1, r0
   17800:	tst	r0, #1
   17804:	beq	17840 <__assert_fail@plt+0x59ac>
   17808:	ldr	r7, [sp, #88]	; 0x58
   1780c:	cmp	r5, #0
   17810:	beq	17408 <__assert_fail@plt+0x5574>
   17814:	bl	11c24 <__ctype_toupper_loc@plt>
   17818:	ldr	r4, [sp, #48]	; 0x30
   1781c:	mov	r6, r0
   17820:	ldrb	r0, [r4], #1
   17824:	ldr	r1, [r6]
   17828:	ldr	r0, [r1, r0, lsl #2]
   1782c:	mov	r1, r7
   17830:	bl	11d80 <fputc@plt>
   17834:	subs	r5, r5, #1
   17838:	bne	17820 <__assert_fail@plt+0x598c>
   1783c:	b	17408 <__assert_fail@plt+0x5574>
   17840:	ldr	r0, [sp, #48]	; 0x30
   17844:	mov	r1, r5
   17848:	b	173f8 <__assert_fail@plt+0x5564>
   1784c:	ldr	r7, [sp, #88]	; 0x58
   17850:	mov	r0, #32
   17854:	mov	r1, r7
   17858:	bl	11d80 <fputc@plt>
   1785c:	subs	r6, r6, #1
   17860:	bne	17850 <__assert_fail@plt+0x59bc>
   17864:	mov	r0, #10
   17868:	b	17aa4 <__assert_fail@plt+0x5c10>
   1786c:	ldr	r7, [sp, #88]	; 0x58
   17870:	mov	r0, #32
   17874:	mov	r1, r7
   17878:	bl	11d80 <fputc@plt>
   1787c:	subs	r6, r6, #1
   17880:	bne	17870 <__assert_fail@plt+0x59dc>
   17884:	mov	r0, #9
   17888:	b	17aa4 <__assert_fail@plt+0x5c10>
   1788c:	cmp	ip, #0
   17890:	beq	17ac8 <__assert_fail@plt+0x5c34>
   17894:	mov	r2, #100	; 0x64
   17898:	mov	r0, #1
   1789c:	mla	r3, r3, r2, ip
   178a0:	mov	ip, #6
   178a4:	mov	r2, #4
   178a8:	ldr	r4, [sp, #92]	; 0x5c
   178ac:	cmp	r9, #79	; 0x4f
   178b0:	moveq	r7, #0
   178b4:	cmpeq	lr, #0
   178b8:	bne	171e8 <__assert_fail@plt+0x5354>
   178bc:	ldr	lr, [sp, #76]	; 0x4c
   178c0:	movw	r2, #9504	; 0x2520
   178c4:	cmp	r9, #0
   178c8:	ldr	r3, [sp, #72]	; 0x48
   178cc:	mov	r0, #0
   178d0:	str	lr, [sp, #76]	; 0x4c
   178d4:	strh	r2, [fp, #-51]	; 0xffffffcd
   178d8:	ldr	r2, [sp, #68]	; 0x44
   178dc:	strbne	r9, [fp, #-49]	; 0xffffffcf
   178e0:	ldrne	r2, [sp, #52]	; 0x34
   178e4:	strb	r0, [r2, #1]
   178e8:	strb	r1, [r2]
   178ec:	add	r0, sp, #96	; 0x60
   178f0:	sub	r2, fp, #51	; 0x33
   178f4:	mov	r1, #1024	; 0x400
   178f8:	bl	11c00 <strftime@plt>
   178fc:	ldr	r4, [sp, #92]	; 0x5c
   17900:	cmp	r0, #0
   17904:	beq	17984 <__assert_fail@plt+0x5af0>
   17908:	subs	r3, r6, #45	; 0x2d
   1790c:	sub	r5, r0, #1
   17910:	mvn	r1, r4
   17914:	movne	r3, r8
   17918:	cmp	r8, #0
   1791c:	mov	r9, r5
   17920:	movwlt	r3, #0
   17924:	cmp	r3, r5
   17928:	movhi	r9, r3
   1792c:	cmp	r9, r1
   17930:	bcs	17aec <__assert_fail@plt+0x5c58>
   17934:	mov	r2, r6
   17938:	ldr	r6, [sp, #88]	; 0x58
   1793c:	cmp	r6, #0
   17940:	beq	17a68 <__assert_fail@plt+0x5bd4>
   17944:	cmp	r3, r5
   17948:	str	r0, [sp, #84]	; 0x54
   1794c:	bls	179bc <__assert_fail@plt+0x5b28>
   17950:	cmp	r2, #43	; 0x2b
   17954:	sub	r8, r3, r5
   17958:	cmpne	r2, #48	; 0x30
   1795c:	bne	1799c <__assert_fail@plt+0x5b08>
   17960:	ldr	r4, [sp, #88]	; 0x58
   17964:	cmp	r8, #0
   17968:	beq	179bc <__assert_fail@plt+0x5b28>
   1796c:	mov	r0, #48	; 0x30
   17970:	mov	r1, r4
   17974:	bl	11d80 <fputc@plt>
   17978:	subs	r8, r8, #1
   1797c:	bne	1796c <__assert_fail@plt+0x5ad8>
   17980:	b	179bc <__assert_fail@plt+0x5b28>
   17984:	ldr	r7, [sp, #88]	; 0x58
   17988:	ldrb	r3, [sl, #1]!
   1798c:	mvn	r8, #0
   17990:	cmp	r3, #0
   17994:	bne	16204 <__assert_fail@plt+0x4370>
   17998:	b	17ad4 <__assert_fail@plt+0x5c40>
   1799c:	ldr	r4, [sp, #88]	; 0x58
   179a0:	cmp	r8, #0
   179a4:	beq	179bc <__assert_fail@plt+0x5b28>
   179a8:	mov	r0, #32
   179ac:	mov	r1, r4
   179b0:	bl	11d80 <fputc@plt>
   179b4:	subs	r8, r8, #1
   179b8:	bne	179a8 <__assert_fail@plt+0x5b14>
   179bc:	tst	r7, #1
   179c0:	beq	17a04 <__assert_fail@plt+0x5b70>
   179c4:	ldr	r6, [sp, #88]	; 0x58
   179c8:	ldr	r0, [sp, #84]	; 0x54
   179cc:	cmp	r5, #0
   179d0:	beq	17a68 <__assert_fail@plt+0x5bd4>
   179d4:	rsb	r4, r0, #1
   179d8:	bl	11c18 <__ctype_tolower_loc@plt>
   179dc:	ldr	r7, [sp, #44]	; 0x2c
   179e0:	mov	r5, r0
   179e4:	ldrb	r0, [r7], #1
   179e8:	ldr	r1, [r5]
   179ec:	ldr	r0, [r1, r0, lsl #2]
   179f0:	mov	r1, r6
   179f4:	bl	11d80 <fputc@plt>
   179f8:	adds	r4, r4, #1
   179fc:	bne	179e4 <__assert_fail@plt+0x5b50>
   17a00:	b	17a68 <__assert_fail@plt+0x5bd4>
   17a04:	ldr	r0, [sp, #76]	; 0x4c
   17a08:	tst	r0, #1
   17a0c:	ldr	r0, [sp, #84]	; 0x54
   17a10:	beq	17a50 <__assert_fail@plt+0x5bbc>
   17a14:	ldr	r6, [sp, #88]	; 0x58
   17a18:	cmp	r5, #0
   17a1c:	beq	17a68 <__assert_fail@plt+0x5bd4>
   17a20:	rsb	r4, r0, #1
   17a24:	bl	11c24 <__ctype_toupper_loc@plt>
   17a28:	ldr	r7, [sp, #44]	; 0x2c
   17a2c:	mov	r5, r0
   17a30:	ldrb	r0, [r7], #1
   17a34:	ldr	r1, [r5]
   17a38:	ldr	r0, [r1, r0, lsl #2]
   17a3c:	mov	r1, r6
   17a40:	bl	11d80 <fputc@plt>
   17a44:	adds	r4, r4, #1
   17a48:	bne	17a30 <__assert_fail@plt+0x5b9c>
   17a4c:	b	17a68 <__assert_fail@plt+0x5bd4>
   17a50:	ldr	r6, [sp, #88]	; 0x58
   17a54:	ldr	r0, [sp, #44]	; 0x2c
   17a58:	mov	r1, r5
   17a5c:	mov	r2, #1
   17a60:	mov	r3, r6
   17a64:	bl	11b58 <fwrite@plt>
   17a68:	ldr	r4, [sp, #92]	; 0x5c
   17a6c:	mov	r7, r6
   17a70:	add	r4, r9, r4
   17a74:	ldrb	r3, [sl, #1]!
   17a78:	mvn	r8, #0
   17a7c:	cmp	r3, #0
   17a80:	bne	16204 <__assert_fail@plt+0x4370>
   17a84:	b	17ad4 <__assert_fail@plt+0x5c40>
   17a88:	ldr	r7, [sp, #88]	; 0x58
   17a8c:	mov	r0, #32
   17a90:	mov	r1, r7
   17a94:	bl	11d80 <fputc@plt>
   17a98:	subs	r6, r6, #1
   17a9c:	bne	17a8c <__assert_fail@plt+0x5bf8>
   17aa0:	ldrb	r0, [sl]
   17aa4:	mov	r1, r7
   17aa8:	bl	11d80 <fputc@plt>
   17aac:	ldr	r7, [sp, #88]	; 0x58
   17ab0:	add	r4, r5, r4
   17ab4:	ldrb	r3, [sl, #1]!
   17ab8:	mvn	r8, #0
   17abc:	cmp	r3, #0
   17ac0:	bne	16204 <__assert_fail@plt+0x4370>
   17ac4:	b	17ad4 <__assert_fail@plt+0x5c40>
   17ac8:	mov	ip, #3
   17acc:	b	17598 <__assert_fail@plt+0x5704>
   17ad0:	mov	r4, #0
   17ad4:	ldr	r0, [sp, #60]	; 0x3c
   17ad8:	ldr	r1, [sp, #56]	; 0x38
   17adc:	str	r1, [r0]
   17ae0:	mov	r0, r4
   17ae4:	sub	sp, fp, #28
   17ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17aec:	mov	r0, #34	; 0x22
   17af0:	ldr	r1, [sp, #60]	; 0x3c
   17af4:	mov	r4, #0
   17af8:	str	r0, [r1]
   17afc:	mov	r0, r4
   17b00:	sub	sp, fp, #28
   17b04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b08:	mov	r0, #75	; 0x4b
   17b0c:	b	17af0 <__assert_fail@plt+0x5c5c>
   17b10:	push	{r4, r5, r6, sl, fp, lr}
   17b14:	add	fp, sp, #16
   17b18:	mov	r4, r0
   17b1c:	bl	11ca8 <__errno_location@plt>
   17b20:	ldr	r6, [r0]
   17b24:	mov	r5, r0
   17b28:	mov	r0, r4
   17b2c:	bl	11a5c <free@plt>
   17b30:	str	r6, [r5]
   17b34:	pop	{r4, r5, r6, sl, fp, pc}
   17b38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b3c:	add	fp, sp, #28
   17b40:	sub	sp, sp, #4
   17b44:	mov	r5, r0
   17b48:	mov	r0, r2
   17b4c:	mov	r4, r2
   17b50:	mov	r9, r1
   17b54:	bl	11cfc <fileno@plt>
   17b58:	mov	r7, #0
   17b5c:	cmp	r0, #0
   17b60:	beq	17ba0 <__assert_fail@plt+0x5d0c>
   17b64:	cmp	r0, #1
   17b68:	beq	17bac <__assert_fail@plt+0x5d18>
   17b6c:	cmp	r0, #2
   17b70:	beq	17b88 <__assert_fail@plt+0x5cf4>
   17b74:	mov	r0, #2
   17b78:	mov	r1, #2
   17b7c:	bl	11ae0 <dup2@plt>
   17b80:	subs	r7, r0, #2
   17b84:	movwne	r7, #1
   17b88:	mov	r0, #1
   17b8c:	mov	r1, #1
   17b90:	bl	11ae0 <dup2@plt>
   17b94:	subs	r6, r0, #1
   17b98:	movwne	r6, #1
   17b9c:	b	17bb0 <__assert_fail@plt+0x5d1c>
   17ba0:	mov	r6, #0
   17ba4:	mov	r8, #0
   17ba8:	b	17c78 <__assert_fail@plt+0x5de4>
   17bac:	mov	r6, #0
   17bb0:	mov	r0, #0
   17bb4:	mov	r1, #0
   17bb8:	mov	sl, #0
   17bbc:	bl	11ae0 <dup2@plt>
   17bc0:	cmp	r0, #0
   17bc4:	mov	r8, #0
   17bc8:	beq	17c08 <__assert_fail@plt+0x5d74>
   17bcc:	movw	r0, #41381	; 0xa1a5
   17bd0:	mov	r1, #0
   17bd4:	movt	r0, #3
   17bd8:	bl	11bd0 <open64@plt>
   17bdc:	cmp	r0, #0
   17be0:	beq	17c04 <__assert_fail@plt+0x5d70>
   17be4:	cmn	r0, #1
   17be8:	ble	17d28 <__assert_fail@plt+0x5e94>
   17bec:	bl	11e70 <close@plt>
   17bf0:	bl	11ca8 <__errno_location@plt>
   17bf4:	mov	r4, r0
   17bf8:	mov	r0, #9
   17bfc:	str	r0, [r4]
   17c00:	b	17d30 <__assert_fail@plt+0x5e9c>
   17c04:	mov	r8, #1
   17c08:	cmp	r6, #0
   17c0c:	beq	17c2c <__assert_fail@plt+0x5d98>
   17c10:	movw	r0, #41381	; 0xa1a5
   17c14:	mov	r1, #0
   17c18:	movt	r0, #3
   17c1c:	bl	11bd0 <open64@plt>
   17c20:	mov	sl, #1
   17c24:	cmp	r0, #1
   17c28:	bne	17cf8 <__assert_fail@plt+0x5e64>
   17c2c:	cmp	r7, #0
   17c30:	beq	17c70 <__assert_fail@plt+0x5ddc>
   17c34:	movw	r0, #41381	; 0xa1a5
   17c38:	mov	r1, #0
   17c3c:	movt	r0, #3
   17c40:	bl	11bd0 <open64@plt>
   17c44:	mov	r7, #1
   17c48:	cmp	r0, #2
   17c4c:	beq	17c74 <__assert_fail@plt+0x5de0>
   17c50:	cmn	r0, #1
   17c54:	ble	17d80 <__assert_fail@plt+0x5eec>
   17c58:	bl	11e70 <close@plt>
   17c5c:	bl	11ca8 <__errno_location@plt>
   17c60:	mov	r4, r0
   17c64:	mov	r0, #9
   17c68:	str	r0, [r4]
   17c6c:	b	17d88 <__assert_fail@plt+0x5ef4>
   17c70:	mov	r7, #0
   17c74:	mov	r6, sl
   17c78:	mov	r0, r5
   17c7c:	mov	r1, r9
   17c80:	mov	r2, r4
   17c84:	bl	11c3c <freopen64@plt>
   17c88:	mov	r5, r0
   17c8c:	bl	11ca8 <__errno_location@plt>
   17c90:	ldr	r9, [r0]
   17c94:	mov	r4, r0
   17c98:	cmp	r7, #0
   17c9c:	beq	17ca8 <__assert_fail@plt+0x5e14>
   17ca0:	mov	r0, #2
   17ca4:	bl	11e70 <close@plt>
   17ca8:	cmp	r6, #0
   17cac:	beq	17cb8 <__assert_fail@plt+0x5e24>
   17cb0:	mov	r0, #1
   17cb4:	bl	11e70 <close@plt>
   17cb8:	cmp	r8, #0
   17cbc:	beq	17cdc <__assert_fail@plt+0x5e48>
   17cc0:	mov	r0, #0
   17cc4:	bl	11e70 <close@plt>
   17cc8:	cmp	r5, #0
   17ccc:	beq	17ce4 <__assert_fail@plt+0x5e50>
   17cd0:	mov	r0, r5
   17cd4:	sub	sp, fp, #28
   17cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cdc:	cmp	r5, #0
   17ce0:	bne	17cd0 <__assert_fail@plt+0x5e3c>
   17ce4:	mov	r5, #0
   17ce8:	str	r9, [r4]
   17cec:	mov	r0, r5
   17cf0:	sub	sp, fp, #28
   17cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cf8:	cmn	r0, #1
   17cfc:	ble	17d48 <__assert_fail@plt+0x5eb4>
   17d00:	bl	11e70 <close@plt>
   17d04:	bl	11ca8 <__errno_location@plt>
   17d08:	mov	r4, r0
   17d0c:	mov	r0, #9
   17d10:	str	r0, [r4]
   17d14:	ldr	r9, [r4]
   17d18:	mov	r5, #0
   17d1c:	cmp	r7, #0
   17d20:	beq	17cb0 <__assert_fail@plt+0x5e1c>
   17d24:	b	17d60 <__assert_fail@plt+0x5ecc>
   17d28:	bl	11ca8 <__errno_location@plt>
   17d2c:	mov	r4, r0
   17d30:	ldr	r9, [r4]
   17d34:	mov	r8, #1
   17d38:	mov	r5, #0
   17d3c:	cmp	r7, #0
   17d40:	bne	17ca0 <__assert_fail@plt+0x5e0c>
   17d44:	b	17ca8 <__assert_fail@plt+0x5e14>
   17d48:	bl	11ca8 <__errno_location@plt>
   17d4c:	mov	r4, r0
   17d50:	ldr	r9, [r4]
   17d54:	mov	r5, #0
   17d58:	cmp	r7, #0
   17d5c:	beq	17cb0 <__assert_fail@plt+0x5e1c>
   17d60:	mov	r0, #2
   17d64:	bl	11e70 <close@plt>
   17d68:	mov	r0, #1
   17d6c:	bl	11e70 <close@plt>
   17d70:	mov	r5, #0
   17d74:	cmp	r8, #0
   17d78:	beq	17ce4 <__assert_fail@plt+0x5e50>
   17d7c:	b	17cc0 <__assert_fail@plt+0x5e2c>
   17d80:	bl	11ca8 <__errno_location@plt>
   17d84:	mov	r4, r0
   17d88:	ldr	r9, [r4]
   17d8c:	mov	r0, #2
   17d90:	bl	11e70 <close@plt>
   17d94:	mov	r5, #0
   17d98:	cmp	sl, #0
   17d9c:	bne	17cb0 <__assert_fail@plt+0x5e1c>
   17da0:	b	17cb8 <__assert_fail@plt+0x5e24>
   17da4:	push	{r4, r5, r6, r7, fp, lr}
   17da8:	add	fp, sp, #16
   17dac:	sub	sp, sp, #8
   17db0:	mov	r4, r0
   17db4:	ldr	r0, [r0, #4]
   17db8:	mov	r5, r3
   17dbc:	mov	r6, r2
   17dc0:	ldr	r1, [r4, #8]
   17dc4:	cmp	r1, r0
   17dc8:	bne	17de4 <__assert_fail@plt+0x5f50>
   17dcc:	ldrd	r0, [r4, #16]
   17dd0:	cmp	r1, r0
   17dd4:	bne	17de4 <__assert_fail@plt+0x5f50>
   17dd8:	ldr	r0, [r4, #36]	; 0x24
   17ddc:	cmp	r0, #0
   17de0:	beq	17dfc <__assert_fail@plt+0x5f68>
   17de4:	mov	r0, r4
   17de8:	mov	r2, r6
   17dec:	mov	r3, r5
   17df0:	sub	sp, fp, #16
   17df4:	pop	{r4, r5, r6, r7, fp, lr}
   17df8:	b	11d2c <fseeko64@plt>
   17dfc:	ldr	r7, [fp, #8]
   17e00:	mov	r0, r4
   17e04:	bl	11cfc <fileno@plt>
   17e08:	mov	r2, r6
   17e0c:	mov	r3, r5
   17e10:	str	r7, [sp]
   17e14:	bl	11b64 <lseek64@plt>
   17e18:	and	r2, r0, r1
   17e1c:	cmn	r2, #1
   17e20:	mvneq	r0, #0
   17e24:	subeq	sp, fp, #16
   17e28:	popeq	{r4, r5, r6, r7, fp, pc}
   17e2c:	strd	r0, [r4, #80]	; 0x50
   17e30:	ldr	r0, [r4]
   17e34:	bic	r0, r0, #16
   17e38:	str	r0, [r4]
   17e3c:	mov	r0, #0
   17e40:	sub	sp, fp, #16
   17e44:	pop	{r4, r5, r6, r7, fp, pc}
   17e48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e4c:	add	fp, sp, #28
   17e50:	sub	sp, sp, #28
   17e54:	cmp	r1, #4096	; 0x1000
   17e58:	bcs	17e74 <__assert_fail@plt+0x5fe0>
   17e5c:	mov	sl, r0
   17e60:	and	r0, r1, #516	; 0x204
   17e64:	mov	r6, r1
   17e68:	cmp	r0, #516	; 0x204
   17e6c:	tstne	r6, #18
   17e70:	bne	17e90 <__assert_fail@plt+0x5ffc>
   17e74:	bl	11ca8 <__errno_location@plt>
   17e78:	mov	r1, #22
   17e7c:	mov	r4, #0
   17e80:	str	r1, [r0]
   17e84:	mov	r0, r4
   17e88:	sub	sp, fp, #28
   17e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e90:	mov	r0, #1
   17e94:	mov	r1, #96	; 0x60
   17e98:	mov	r5, r2
   17e9c:	bl	36f60 <__assert_fail@plt+0x250cc>
   17ea0:	cmp	r0, #0
   17ea4:	beq	18460 <__assert_fail@plt+0x65cc>
   17ea8:	mov	r4, r0
   17eac:	mvn	r0, #99	; 0x63
   17eb0:	tst	r6, #2
   17eb4:	mov	r1, r6
   17eb8:	str	r0, [r4, #32]
   17ebc:	bic	r0, r6, #516	; 0x204
   17ec0:	str	r5, [r4, #44]	; 0x2c
   17ec4:	str	r4, [sp, #24]
   17ec8:	orrne	r1, r0, #4
   17ecc:	str	r1, [r4, #48]	; 0x30
   17ed0:	ldr	r0, [sl]
   17ed4:	cmp	r0, #0
   17ed8:	beq	17f3c <__assert_fail@plt+0x60a8>
   17edc:	add	r7, sl, #4
   17ee0:	mov	r4, #0
   17ee4:	bl	11c78 <strlen@plt>
   17ee8:	cmp	r0, r4
   17eec:	movhi	r4, r0
   17ef0:	ldr	r0, [r7], #4
   17ef4:	cmp	r0, #0
   17ef8:	bne	17ee4 <__assert_fail@plt+0x6050>
   17efc:	add	r0, r4, #1
   17f00:	ldr	r4, [sp, #24]
   17f04:	cmp	r0, #4096	; 0x1000
   17f08:	movls	r0, #4096	; 0x1000
   17f0c:	ldr	r1, [r4, #36]	; 0x24
   17f10:	add	r0, r0, #256	; 0x100
   17f14:	adds	r1, r0, r1
   17f18:	bcc	17f50 <__assert_fail@plt+0x60bc>
   17f1c:	ldr	r0, [r4, #24]
   17f20:	bl	17b10 <__assert_fail@plt+0x5c7c>
   17f24:	mov	r0, #0
   17f28:	str	r0, [r4, #24]
   17f2c:	bl	11ca8 <__errno_location@plt>
   17f30:	mov	r1, #36	; 0x24
   17f34:	str	r1, [r0]
   17f38:	b	18458 <__assert_fail@plt+0x65c4>
   17f3c:	mov	r0, #4096	; 0x1000
   17f40:	ldr	r1, [r4, #36]	; 0x24
   17f44:	add	r0, r0, #256	; 0x100
   17f48:	adds	r1, r0, r1
   17f4c:	bcs	17f1c <__assert_fail@plt+0x6088>
   17f50:	str	r1, [r4, #36]	; 0x24
   17f54:	ldr	r0, [r4, #24]
   17f58:	bl	36fe4 <__assert_fail@plt+0x25150>
   17f5c:	cmp	r0, #0
   17f60:	beq	17fc4 <__assert_fail@plt+0x6130>
   17f64:	str	r0, [r4, #24]
   17f68:	ldr	r0, [sl]
   17f6c:	cmp	r0, #0
   17f70:	beq	17fd8 <__assert_fail@plt+0x6144>
   17f74:	mov	r0, #176	; 0xb0
   17f78:	bl	36fb4 <__assert_fail@plt+0x25120>
   17f7c:	cmp	r0, #0
   17f80:	beq	18450 <__assert_fail@plt+0x65bc>
   17f84:	ldr	r1, [r4, #24]
   17f88:	mov	r7, r0
   17f8c:	mov	r0, #0
   17f90:	mov	r2, #196608	; 0x30000
   17f94:	strb	r0, [r7, #168]	; 0xa8
   17f98:	str	r2, [r7, #58]	; 0x3a
   17f9c:	mvn	r2, #0
   17fa0:	str	r0, [r7, #12]
   17fa4:	str	r0, [r7, #16]
   17fa8:	str	r0, [r7, #20]
   17fac:	str	r4, [r7, #44]	; 0x2c
   17fb0:	str	r2, [r7, #48]	; 0x30
   17fb4:	str	r0, [r7, #52]	; 0x34
   17fb8:	str	r1, [r7, #28]
   17fbc:	str	r0, [r7, #32]
   17fc0:	b	17fdc <__assert_fail@plt+0x6148>
   17fc4:	ldr	r0, [r4, #24]
   17fc8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   17fcc:	mov	r0, #0
   17fd0:	str	r0, [r4, #24]
   17fd4:	b	18458 <__assert_fail@plt+0x65c4>
   17fd8:	mov	r7, #0
   17fdc:	cmp	r5, #0
   17fe0:	ldrbne	r0, [r4, #49]	; 0x31
   17fe4:	ubfxne	r0, r0, #2, #1
   17fe8:	ldr	r4, [sl]
   17fec:	moveq	r0, #1
   17ff0:	str	r0, [sp, #12]
   17ff4:	cmp	r4, #0
   17ff8:	beq	18160 <__assert_fail@plt+0x62cc>
   17ffc:	tst	r6, #2048	; 0x800
   18000:	str	r7, [sp, #20]
   18004:	str	r5, [sp, #16]
   18008:	bne	18184 <__assert_fail@plt+0x62f0>
   1800c:	mov	r0, #0
   18010:	mov	r8, #0
   18014:	mov	r5, #0
   18018:	str	r0, [sp, #8]
   1801c:	mov	r0, r4
   18020:	bl	11c78 <strlen@plt>
   18024:	mov	r9, r0
   18028:	cmp	r0, #3
   1802c:	bcc	1805c <__assert_fail@plt+0x61c8>
   18030:	add	r0, r4, r9
   18034:	ldrb	r0, [r0, #-1]
   18038:	cmp	r0, #47	; 0x2f
   1803c:	bne	1805c <__assert_fail@plt+0x61c8>
   18040:	sub	r0, r4, #2
   18044:	ldrb	r1, [r0, r9]
   18048:	cmp	r1, #47	; 0x2f
   1804c:	bne	1805c <__assert_fail@plt+0x61c8>
   18050:	sub	r9, r9, #1
   18054:	cmp	r9, #1
   18058:	bhi	18044 <__assert_fail@plt+0x61b0>
   1805c:	add	r0, r9, #176	; 0xb0
   18060:	bic	r0, r0, #7
   18064:	bl	36fb4 <__assert_fail@plt+0x25120>
   18068:	cmp	r0, #0
   1806c:	beq	182c4 <__assert_fail@plt+0x6430>
   18070:	add	r6, r0, #168	; 0xa8
   18074:	mov	r7, r0
   18078:	mov	r1, r4
   1807c:	mov	r2, r9
   18080:	mov	r0, r6
   18084:	bl	11a8c <memcpy@plt>
   18088:	ldr	r0, [sp, #24]
   1808c:	mov	r4, #0
   18090:	mov	r1, #196608	; 0x30000
   18094:	cmp	r8, #0
   18098:	strb	r4, [r6, r9]
   1809c:	str	r1, [r7, #58]	; 0x3a
   180a0:	add	r1, r7, #44	; 0x2c
   180a4:	ldr	r2, [r0, #24]
   180a8:	stm	r1, {r0, r4, r9}
   180ac:	ldr	r1, [sp, #20]
   180b0:	str	r1, [r7, #4]
   180b4:	str	r4, [r7, #12]
   180b8:	str	r4, [r7, #16]
   180bc:	str	r4, [r7, #20]
   180c0:	str	r6, [r7, #24]
   180c4:	str	r2, [r7, #28]
   180c8:	ldr	r2, [sp, #12]
   180cc:	mov	r1, r8
   180d0:	str	r4, [r7, #32]
   180d4:	movwne	r1, #1
   180d8:	tst	r2, r1
   180dc:	beq	1810c <__assert_fail@plt+0x6278>
   180e0:	mov	r0, #2
   180e4:	str	r0, [r7, #112]	; 0x70
   180e8:	mov	r0, #11
   180ec:	str	r4, [r7, #116]	; 0x74
   180f0:	strh	r0, [r7, #56]	; 0x38
   180f4:	ldr	r0, [sp, #16]
   180f8:	cmp	r0, #0
   180fc:	beq	18128 <__assert_fail@plt+0x6294>
   18100:	str	r8, [r7, #8]
   18104:	mov	r8, r7
   18108:	b	18140 <__assert_fail@plt+0x62ac>
   1810c:	mov	r1, r7
   18110:	mov	r2, #0
   18114:	bl	184ac <__assert_fail@plt+0x6618>
   18118:	strh	r0, [r7, #56]	; 0x38
   1811c:	ldr	r0, [sp, #16]
   18120:	cmp	r0, #0
   18124:	bne	18100 <__assert_fail@plt+0x626c>
   18128:	cmp	r8, #0
   1812c:	str	r4, [r7, #8]
   18130:	beq	18154 <__assert_fail@plt+0x62c0>
   18134:	ldr	r0, [sp, #8]
   18138:	str	r7, [sp, #8]
   1813c:	str	r7, [r0, #8]
   18140:	ldr	r4, [sl, #4]!
   18144:	add	r5, r5, #1
   18148:	cmp	r4, #0
   1814c:	bne	1801c <__assert_fail@plt+0x6188>
   18150:	b	182d4 <__assert_fail@plt+0x6440>
   18154:	mov	r0, r7
   18158:	str	r7, [sp, #8]
   1815c:	b	18104 <__assert_fail@plt+0x6270>
   18160:	ldr	r4, [sp, #24]
   18164:	mov	r8, #0
   18168:	mov	r0, #176	; 0xb0
   1816c:	bl	36fb4 <__assert_fail@plt+0x25120>
   18170:	cmp	r0, #0
   18174:	bne	18330 <__assert_fail@plt+0x649c>
   18178:	mov	r0, #0
   1817c:	str	r0, [r4]
   18180:	b	18414 <__assert_fail@plt+0x6580>
   18184:	add	r0, sl, #4
   18188:	mov	r9, #0
   1818c:	mov	r8, #0
   18190:	mov	r5, #0
   18194:	str	r0, [sp, #8]
   18198:	ldr	r0, [sp, #12]
   1819c:	eor	r0, r0, #1
   181a0:	str	r0, [sp, #12]
   181a4:	mov	r0, #0
   181a8:	str	r0, [sp, #4]
   181ac:	mov	r0, r4
   181b0:	mov	sl, r5
   181b4:	bl	11c78 <strlen@plt>
   181b8:	mov	r7, r0
   181bc:	add	r0, r0, #176	; 0xb0
   181c0:	bic	r0, r0, #7
   181c4:	bl	36fb4 <__assert_fail@plt+0x25120>
   181c8:	cmp	r0, #0
   181cc:	beq	182c4 <__assert_fail@plt+0x6430>
   181d0:	add	r6, r0, #168	; 0xa8
   181d4:	mov	r5, r0
   181d8:	mov	r1, r4
   181dc:	mov	r2, r7
   181e0:	mov	r0, r6
   181e4:	bl	11a8c <memcpy@plt>
   181e8:	ldr	r0, [sp, #24]
   181ec:	mov	r1, #196608	; 0x30000
   181f0:	strb	r9, [r6, r7]
   181f4:	str	r1, [r5, #58]	; 0x3a
   181f8:	ldr	r1, [sp, #20]
   181fc:	ldr	r2, [r0, #24]
   18200:	str	r0, [r5, #44]	; 0x2c
   18204:	str	r9, [r5, #48]	; 0x30
   18208:	str	r7, [r5, #52]	; 0x34
   1820c:	str	r1, [r5, #4]
   18210:	str	r9, [r5, #12]
   18214:	str	r9, [r5, #16]
   18218:	str	r9, [r5, #20]
   1821c:	str	r6, [r5, #24]
   18220:	clz	r1, r8
   18224:	lsr	r1, r1, #5
   18228:	str	r2, [r5, #28]
   1822c:	ldr	r2, [sp, #12]
   18230:	str	r9, [r5, #32]
   18234:	orrs	r1, r2, r1
   18238:	bne	18268 <__assert_fail@plt+0x63d4>
   1823c:	mov	r0, #2
   18240:	str	r0, [r5, #112]	; 0x70
   18244:	str	r9, [r5, #116]	; 0x74
   18248:	mov	r0, #11
   1824c:	strh	r0, [r5, #56]	; 0x38
   18250:	ldr	r0, [sp, #16]
   18254:	cmp	r0, #0
   18258:	beq	18284 <__assert_fail@plt+0x63f0>
   1825c:	str	r8, [r5, #8]
   18260:	mov	r8, r5
   18264:	b	1829c <__assert_fail@plt+0x6408>
   18268:	mov	r1, r5
   1826c:	mov	r2, #0
   18270:	bl	184ac <__assert_fail@plt+0x6618>
   18274:	strh	r0, [r5, #56]	; 0x38
   18278:	ldr	r0, [sp, #16]
   1827c:	cmp	r0, #0
   18280:	bne	1825c <__assert_fail@plt+0x63c8>
   18284:	cmp	r8, #0
   18288:	str	r9, [r5, #8]
   1828c:	beq	182b8 <__assert_fail@plt+0x6424>
   18290:	ldr	r0, [sp, #4]
   18294:	str	r5, [sp, #4]
   18298:	str	r5, [r0, #8]
   1829c:	ldr	r0, [sp, #8]
   182a0:	mov	r5, sl
   182a4:	add	r5, sl, #1
   182a8:	ldr	r4, [r0, sl, lsl #2]
   182ac:	cmp	r4, #0
   182b0:	bne	181ac <__assert_fail@plt+0x6318>
   182b4:	b	182d4 <__assert_fail@plt+0x6440>
   182b8:	mov	r0, r5
   182bc:	str	r5, [sp, #4]
   182c0:	b	18260 <__assert_fail@plt+0x63cc>
   182c4:	ldr	r7, [sp, #20]
   182c8:	cmp	r8, #0
   182cc:	bne	1841c <__assert_fail@plt+0x6588>
   182d0:	b	18444 <__assert_fail@plt+0x65b0>
   182d4:	ldr	r0, [sp, #16]
   182d8:	cmp	r0, #0
   182dc:	beq	18318 <__assert_fail@plt+0x6484>
   182e0:	ldr	r7, [sp, #20]
   182e4:	ldr	r4, [sp, #24]
   182e8:	cmp	r5, #2
   182ec:	bcc	18320 <__assert_fail@plt+0x648c>
   182f0:	mov	r0, r4
   182f4:	mov	r1, r8
   182f8:	mov	r2, r5
   182fc:	bl	18644 <__assert_fail@plt+0x67b0>
   18300:	mov	r8, r0
   18304:	mov	r0, #176	; 0xb0
   18308:	bl	36fb4 <__assert_fail@plt+0x25120>
   1830c:	cmp	r0, #0
   18310:	bne	18330 <__assert_fail@plt+0x649c>
   18314:	b	18178 <__assert_fail@plt+0x62e4>
   18318:	ldr	r7, [sp, #20]
   1831c:	ldr	r4, [sp, #24]
   18320:	mov	r0, #176	; 0xb0
   18324:	bl	36fb4 <__assert_fail@plt+0x25120>
   18328:	cmp	r0, #0
   1832c:	beq	18178 <__assert_fail@plt+0x62e4>
   18330:	ldr	r2, [r4, #24]
   18334:	mov	r1, #0
   18338:	mov	r3, #196608	; 0x30000
   1833c:	str	r0, [r4]
   18340:	str	r1, [r0, #52]	; 0x34
   18344:	strb	r1, [r0, #168]	; 0xa8
   18348:	str	r4, [r0, #44]	; 0x2c
   1834c:	str	r3, [r0, #58]	; 0x3a
   18350:	str	r2, [r0, #28]
   18354:	mov	r2, #9
   18358:	str	r1, [r0, #32]
   1835c:	strh	r2, [r0, #56]	; 0x38
   18360:	str	r8, [r0, #8]
   18364:	str	r1, [r0, #12]
   18368:	str	r1, [r0, #16]
   1836c:	str	r1, [r0, #20]
   18370:	mov	r1, #1
   18374:	str	r1, [r0, #48]	; 0x30
   18378:	ldrh	r0, [r4, #48]	; 0x30
   1837c:	movw	r1, #258	; 0x102
   18380:	tst	r0, r1
   18384:	beq	183c0 <__assert_fail@plt+0x652c>
   18388:	movw	r0, #31504	; 0x7b10
   1838c:	movw	r2, #41932	; 0xa3cc
   18390:	movw	r3, #41964	; 0xa3ec
   18394:	mov	r1, #0
   18398:	movt	r0, #1
   1839c:	movt	r2, #1
   183a0:	movt	r3, #1
   183a4:	str	r0, [sp]
   183a8:	mov	r0, #31
   183ac:	bl	1aa88 <__assert_fail@plt+0x8bf4>
   183b0:	cmp	r0, #0
   183b4:	str	r0, [r4, #56]	; 0x38
   183b8:	bne	183d8 <__assert_fail@plt+0x6544>
   183bc:	b	18414 <__assert_fail@plt+0x6580>
   183c0:	mov	r0, #32
   183c4:	bl	36fb4 <__assert_fail@plt+0x25120>
   183c8:	cmp	r0, #0
   183cc:	str	r0, [r4, #56]	; 0x38
   183d0:	beq	18414 <__assert_fail@plt+0x6580>
   183d4:	bl	37c74 <__assert_fail@plt+0x25de0>
   183d8:	ldr	r4, [sp, #24]
   183dc:	ldr	r0, [r4, #48]	; 0x30
   183e0:	tst	r0, #516	; 0x204
   183e4:	bne	18494 <__assert_fail@plt+0x6600>
   183e8:	mov	r1, #32768	; 0x8000
   183ec:	tst	r0, #512	; 0x200
   183f0:	and	r1, r1, r0, lsl #11
   183f4:	orr	r1, r1, #18688	; 0x4900
   183f8:	orr	r2, r1, #524288	; 0x80000
   183fc:	bne	18470 <__assert_fail@plt+0x65dc>
   18400:	movw	r0, #41392	; 0xa1b0
   18404:	mov	r1, r2
   18408:	movt	r0, #3
   1840c:	bl	38008 <__assert_fail@plt+0x26174>
   18410:	b	18480 <__assert_fail@plt+0x65ec>
   18414:	cmp	r8, #0
   18418:	beq	18444 <__assert_fail@plt+0x65b0>
   1841c:	ldrd	r4, [r8, #8]
   18420:	cmp	r5, #0
   18424:	beq	18430 <__assert_fail@plt+0x659c>
   18428:	mov	r0, r5
   1842c:	bl	11e88 <closedir@plt>
   18430:	mov	r0, r8
   18434:	bl	17b10 <__assert_fail@plt+0x5c7c>
   18438:	cmp	r4, #0
   1843c:	mov	r8, r4
   18440:	bne	1841c <__assert_fail@plt+0x6588>
   18444:	mov	r0, r7
   18448:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1844c:	ldr	r4, [sp, #24]
   18450:	ldr	r0, [r4, #24]
   18454:	bl	17b10 <__assert_fail@plt+0x5c7c>
   18458:	mov	r0, r4
   1845c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   18460:	mov	r4, #0
   18464:	mov	r0, r4
   18468:	sub	sp, fp, #28
   1846c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18470:	ldr	r0, [r4, #32]
   18474:	movw	r1, #41392	; 0xa1b0
   18478:	movt	r1, #3
   1847c:	bl	1d9a0 <__assert_fail@plt+0xbb0c>
   18480:	str	r0, [r4, #28]
   18484:	cmn	r0, #1
   18488:	ldrle	r0, [r4, #48]	; 0x30
   1848c:	orrle	r0, r0, #4
   18490:	strle	r0, [r4, #48]	; 0x30
   18494:	add	r0, r4, #60	; 0x3c
   18498:	mvn	r1, #0
   1849c:	bl	1c538 <__assert_fail@plt+0xa6a4>
   184a0:	mov	r0, r4
   184a4:	sub	sp, fp, #28
   184a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184ac:	push	{r4, r5, r6, sl, fp, lr}
   184b0:	add	fp, sp, #16
   184b4:	sub	sp, sp, #8
   184b8:	mov	r4, r1
   184bc:	ldr	r1, [r0, #48]	; 0x30
   184c0:	ldr	r3, [r4, #48]	; 0x30
   184c4:	add	r5, r4, #64	; 0x40
   184c8:	cmp	r3, #0
   184cc:	andeq	r3, r1, #1
   184d0:	orreq	r2, r3, r2
   184d4:	cmp	r2, #0
   184d8:	andseq	r1, r1, #2
   184dc:	beq	18538 <__assert_fail@plt+0x66a4>
   184e0:	ldr	r1, [r4, #24]
   184e4:	mov	r0, #3
   184e8:	mov	r2, r5
   184ec:	bl	11e28 <__xstat64@plt>
   184f0:	cmp	r0, #0
   184f4:	beq	185b8 <__assert_fail@plt+0x6724>
   184f8:	bl	11ca8 <__errno_location@plt>
   184fc:	mov	r6, r0
   18500:	ldr	r0, [r0]
   18504:	cmp	r0, #2
   18508:	bne	18568 <__assert_fail@plt+0x66d4>
   1850c:	ldr	r1, [r4, #24]
   18510:	mov	r0, #3
   18514:	mov	r2, r5
   18518:	bl	11e7c <__lxstat64@plt>
   1851c:	cmp	r0, #0
   18520:	bne	18564 <__assert_fail@plt+0x66d0>
   18524:	mov	r0, #0
   18528:	str	r0, [r6]
   1852c:	mov	r0, #13
   18530:	sub	sp, fp, #16
   18534:	pop	{r4, r5, r6, sl, fp, pc}
   18538:	ldr	r1, [r0, #32]
   1853c:	ldr	r2, [r4, #24]
   18540:	mov	r0, #256	; 0x100
   18544:	mov	r3, r5
   18548:	str	r0, [sp]
   1854c:	mov	r0, #3
   18550:	bl	11b1c <__fxstatat64@plt>
   18554:	cmp	r0, #0
   18558:	beq	185b8 <__assert_fail@plt+0x6724>
   1855c:	bl	11ca8 <__errno_location@plt>
   18560:	mov	r6, r0
   18564:	ldr	r0, [r6]
   18568:	vmov.i32	q8, #0	; 0x00000000
   1856c:	add	r1, r5, #80	; 0x50
   18570:	str	r0, [r4, #32]
   18574:	mov	r0, #0
   18578:	vst1.64	{d16-d17}, [r1]
   1857c:	add	r1, r5, #64	; 0x40
   18580:	str	r0, [r5, #96]	; 0x60
   18584:	vst1.64	{d16-d17}, [r1]
   18588:	add	r1, r5, #48	; 0x30
   1858c:	vst1.64	{d16-d17}, [r1]
   18590:	add	r1, r5, #32
   18594:	vst1.64	{d16-d17}, [r1]
   18598:	add	r1, r5, #16
   1859c:	vst1.64	{d16-d17}, [r1]
   185a0:	mov	r1, #100	; 0x64
   185a4:	vst1.64	{d16-d17}, [r5], r1
   185a8:	str	r0, [r5]
   185ac:	mov	r0, #10
   185b0:	sub	sp, fp, #16
   185b4:	pop	{r4, r5, r6, sl, fp, pc}
   185b8:	ldr	r0, [r4, #80]	; 0x50
   185bc:	and	r0, r0, #61440	; 0xf000
   185c0:	cmp	r0, #40960	; 0xa000
   185c4:	beq	18620 <__assert_fail@plt+0x678c>
   185c8:	cmp	r0, #32768	; 0x8000
   185cc:	moveq	r0, #8
   185d0:	subeq	sp, fp, #16
   185d4:	popeq	{r4, r5, r6, sl, fp, pc}
   185d8:	cmp	r0, #16384	; 0x4000
   185dc:	bne	18614 <__assert_fail@plt+0x6780>
   185e0:	ldrb	r1, [r4, #168]	; 0xa8
   185e4:	mov	r0, #1
   185e8:	cmp	r1, #46	; 0x2e
   185ec:	bne	1860c <__assert_fail@plt+0x6778>
   185f0:	ldrb	r1, [r4, #169]	; 0xa9
   185f4:	cmp	r1, #0
   185f8:	beq	1862c <__assert_fail@plt+0x6798>
   185fc:	cmp	r1, #46	; 0x2e
   18600:	ldrbeq	r1, [r4, #170]	; 0xaa
   18604:	cmpeq	r1, #0
   18608:	beq	1862c <__assert_fail@plt+0x6798>
   1860c:	sub	sp, fp, #16
   18610:	pop	{r4, r5, r6, sl, fp, pc}
   18614:	mov	r0, #3
   18618:	sub	sp, fp, #16
   1861c:	pop	{r4, r5, r6, sl, fp, pc}
   18620:	mov	r0, #12
   18624:	sub	sp, fp, #16
   18628:	pop	{r4, r5, r6, sl, fp, pc}
   1862c:	ldr	r1, [r4, #48]	; 0x30
   18630:	mov	r0, #5
   18634:	cmp	r1, #0
   18638:	movweq	r0, #1
   1863c:	sub	sp, fp, #16
   18640:	pop	{r4, r5, r6, sl, fp, pc}
   18644:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18648:	add	fp, sp, #24
   1864c:	ldrd	r8, [r0, #40]	; 0x28
   18650:	mov	r5, r2
   18654:	mov	r4, r1
   18658:	mov	r6, r0
   1865c:	cmp	r8, r2
   18660:	bcs	186a0 <__assert_fail@plt+0x680c>
   18664:	add	r1, r5, #40	; 0x28
   18668:	cmn	r1, #-1073741823	; 0xc0000001
   1866c:	str	r1, [r6, #40]	; 0x28
   18670:	bhi	1872c <__assert_fail@plt+0x6898>
   18674:	add	r7, r6, #8
   18678:	lsl	r1, r1, #2
   1867c:	ldr	r0, [r7]
   18680:	bl	36fe4 <__assert_fail@plt+0x25150>
   18684:	cmp	r0, #0
   18688:	beq	1872c <__assert_fail@plt+0x6898>
   1868c:	mov	r6, r7
   18690:	str	r0, [r7]
   18694:	cmp	r4, #0
   18698:	bne	186ac <__assert_fail@plt+0x6818>
   1869c:	b	186c0 <__assert_fail@plt+0x682c>
   186a0:	ldr	r0, [r6, #8]!
   186a4:	cmp	r4, #0
   186a8:	beq	186c0 <__assert_fail@plt+0x682c>
   186ac:	str	r4, [r0], #4
   186b0:	ldr	r4, [r4, #8]
   186b4:	cmp	r4, #0
   186b8:	bne	186ac <__assert_fail@plt+0x6818>
   186bc:	ldr	r0, [r6]
   186c0:	mov	r1, r5
   186c4:	mov	r2, #4
   186c8:	mov	r3, r9
   186cc:	bl	11df8 <qsort@plt>
   186d0:	ldr	r7, [r6]
   186d4:	subs	r0, r5, #1
   186d8:	ldr	r4, [r7]
   186dc:	mov	r1, r4
   186e0:	beq	1871c <__assert_fail@plt+0x6888>
   186e4:	mov	r1, r7
   186e8:	cmp	r5, #2
   186ec:	ldr	r2, [r1, #4]!
   186f0:	str	r2, [r4, #8]
   186f4:	beq	18718 <__assert_fail@plt+0x6884>
   186f8:	rsb	r3, r5, #2
   186fc:	mov	r2, r1
   18700:	ldr	r6, [r2, #4]!
   18704:	ldr	r1, [r1]
   18708:	adds	r3, r3, #1
   1870c:	str	r6, [r1, #8]
   18710:	mov	r1, r2
   18714:	bne	18700 <__assert_fail@plt+0x686c>
   18718:	ldr	r1, [r7, r0, lsl #2]
   1871c:	mov	r0, #0
   18720:	str	r0, [r1, #8]
   18724:	mov	r0, r4
   18728:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1872c:	ldr	r0, [r6, #8]
   18730:	bl	17b10 <__assert_fail@plt+0x5c7c>
   18734:	mov	r0, #0
   18738:	str	r0, [r6, #40]	; 0x28
   1873c:	str	r0, [r6, #8]
   18740:	mov	r0, r4
   18744:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18748:	push	{r4, r5, r6, r7, fp, lr}
   1874c:	add	fp, sp, #16
   18750:	mov	r4, r0
   18754:	ldr	r0, [r0]
   18758:	cmp	r0, #0
   1875c:	beq	1879c <__assert_fail@plt+0x6908>
   18760:	ldr	r1, [r0, #48]	; 0x30
   18764:	cmp	r1, #0
   18768:	blt	18790 <__assert_fail@plt+0x68fc>
   1876c:	ldr	r5, [r0, #8]
   18770:	cmp	r5, #0
   18774:	ldreq	r5, [r0, #4]
   18778:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1877c:	ldr	r0, [r5, #48]	; 0x30
   18780:	cmn	r0, #1
   18784:	mov	r0, r5
   18788:	bgt	1876c <__assert_fail@plt+0x68d8>
   1878c:	b	18794 <__assert_fail@plt+0x6900>
   18790:	mov	r5, r0
   18794:	mov	r0, r5
   18798:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1879c:	ldr	r5, [r4, #4]
   187a0:	cmp	r5, #0
   187a4:	beq	187d0 <__assert_fail@plt+0x693c>
   187a8:	ldrd	r6, [r5, #8]
   187ac:	cmp	r7, #0
   187b0:	beq	187bc <__assert_fail@plt+0x6928>
   187b4:	mov	r0, r7
   187b8:	bl	11e88 <closedir@plt>
   187bc:	mov	r0, r5
   187c0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   187c4:	cmp	r6, #0
   187c8:	mov	r5, r6
   187cc:	bne	187a8 <__assert_fail@plt+0x6914>
   187d0:	ldr	r0, [r4, #8]
   187d4:	bl	17b10 <__assert_fail@plt+0x5c7c>
   187d8:	ldr	r0, [r4, #24]
   187dc:	bl	17b10 <__assert_fail@plt+0x5c7c>
   187e0:	ldr	r0, [r4, #48]	; 0x30
   187e4:	tst	r0, #512	; 0x200
   187e8:	bne	18824 <__assert_fail@plt+0x6990>
   187ec:	mov	r6, #0
   187f0:	tst	r0, #4
   187f4:	bne	18848 <__assert_fail@plt+0x69b4>
   187f8:	ldr	r0, [r4, #28]
   187fc:	bl	11dd4 <fchdir@plt>
   18800:	cmp	r0, #0
   18804:	beq	188d8 <__assert_fail@plt+0x6a44>
   18808:	bl	11ca8 <__errno_location@plt>
   1880c:	ldr	r6, [r0]
   18810:	ldr	r0, [r4, #28]
   18814:	bl	11e70 <close@plt>
   18818:	cmp	r6, #0
   1881c:	beq	18838 <__assert_fail@plt+0x69a4>
   18820:	b	18848 <__assert_fail@plt+0x69b4>
   18824:	ldr	r0, [r4, #32]
   18828:	mov	r6, #0
   1882c:	cmp	r0, #0
   18830:	blt	18848 <__assert_fail@plt+0x69b4>
   18834:	bl	11e70 <close@plt>
   18838:	cmp	r0, #0
   1883c:	beq	18848 <__assert_fail@plt+0x69b4>
   18840:	bl	11ca8 <__errno_location@plt>
   18844:	ldr	r6, [r0]
   18848:	add	r5, r4, #60	; 0x3c
   1884c:	b	18854 <__assert_fail@plt+0x69c0>
   18850:	bl	11e70 <close@plt>
   18854:	mov	r0, r5
   18858:	bl	1c55c <__assert_fail@plt+0xa6c8>
   1885c:	cmp	r0, #0
   18860:	bne	18878 <__assert_fail@plt+0x69e4>
   18864:	mov	r0, r5
   18868:	bl	1c5b0 <__assert_fail@plt+0xa71c>
   1886c:	cmp	r0, #0
   18870:	bge	18850 <__assert_fail@plt+0x69bc>
   18874:	b	18854 <__assert_fail@plt+0x69c0>
   18878:	ldr	r0, [r4, #52]	; 0x34
   1887c:	cmp	r0, #0
   18880:	beq	18888 <__assert_fail@plt+0x69f4>
   18884:	bl	1ada4 <__assert_fail@plt+0x8f10>
   18888:	ldrh	r0, [r4, #48]	; 0x30
   1888c:	movw	r1, #258	; 0x102
   18890:	tst	r0, r1
   18894:	beq	188ac <__assert_fail@plt+0x6a18>
   18898:	ldr	r0, [r4, #56]	; 0x38
   1889c:	cmp	r0, #0
   188a0:	beq	188b4 <__assert_fail@plt+0x6a20>
   188a4:	bl	1ada4 <__assert_fail@plt+0x8f10>
   188a8:	b	188b4 <__assert_fail@plt+0x6a20>
   188ac:	ldr	r0, [r4, #56]	; 0x38
   188b0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   188b4:	mov	r0, r4
   188b8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   188bc:	cmp	r6, #0
   188c0:	moveq	r0, #0
   188c4:	popeq	{r4, r5, r6, r7, fp, pc}
   188c8:	bl	11ca8 <__errno_location@plt>
   188cc:	str	r6, [r0]
   188d0:	mvn	r0, #0
   188d4:	pop	{r4, r5, r6, r7, fp, pc}
   188d8:	mov	r6, #0
   188dc:	ldr	r0, [r4, #28]
   188e0:	bl	11e70 <close@plt>
   188e4:	cmp	r6, #0
   188e8:	beq	18838 <__assert_fail@plt+0x69a4>
   188ec:	b	18848 <__assert_fail@plt+0x69b4>
   188f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   188f4:	add	fp, sp, #28
   188f8:	sub	sp, sp, #4
   188fc:	ldr	r6, [r0]
   18900:	mov	sl, #0
   18904:	cmp	r6, #0
   18908:	beq	19190 <__assert_fail@plt+0x72fc>
   1890c:	mov	r4, r0
   18910:	ldr	r0, [r0, #48]	; 0x30
   18914:	tst	r0, #8192	; 0x2000
   18918:	bne	19190 <__assert_fail@plt+0x72fc>
   1891c:	ldrh	r1, [r6, #60]	; 0x3c
   18920:	mov	r2, #3
   18924:	strh	r2, [r6, #60]	; 0x3c
   18928:	cmp	r1, #1
   1892c:	beq	189ac <__assert_fail@plt+0x6b18>
   18930:	mov	r5, r6
   18934:	cmp	r1, #2
   18938:	bne	189d0 <__assert_fail@plt+0x6b3c>
   1893c:	ldrh	r2, [r5, #56]!	; 0x38
   18940:	movw	r3, #65534	; 0xfffe
   18944:	and	r3, r2, r3
   18948:	cmp	r3, #12
   1894c:	bne	189d4 <__assert_fail@plt+0x6b40>
   18950:	mov	r0, r4
   18954:	mov	r1, r6
   18958:	mov	r2, #1
   1895c:	bl	184ac <__assert_fail@plt+0x6618>
   18960:	strh	r0, [r6, #56]	; 0x38
   18964:	cmp	r0, #1
   18968:	ldreq	r0, [r4, #48]	; 0x30
   1896c:	tsteq	r0, #4
   18970:	bne	18c88 <__assert_fail@plt+0x6df4>
   18974:	mov	r1, #32768	; 0x8000
   18978:	tst	r0, #512	; 0x200
   1897c:	and	r1, r1, r0, lsl #11
   18980:	orr	r1, r1, #18688	; 0x4900
   18984:	orr	r2, r1, #524288	; 0x80000
   18988:	bne	18e9c <__assert_fail@plt+0x7008>
   1898c:	movw	r0, #41392	; 0xa1b0
   18990:	mov	r1, r2
   18994:	movt	r0, #3
   18998:	bl	38008 <__assert_fail@plt+0x26174>
   1899c:	cmn	r0, #1
   189a0:	str	r0, [r6, #36]	; 0x24
   189a4:	bgt	18eb8 <__assert_fail@plt+0x7024>
   189a8:	b	18efc <__assert_fail@plt+0x7068>
   189ac:	mov	r0, r4
   189b0:	mov	r1, r6
   189b4:	mov	r2, #0
   189b8:	bl	184ac <__assert_fail@plt+0x6618>
   189bc:	strh	r0, [r6, #56]	; 0x38
   189c0:	mov	sl, r6
   189c4:	mov	r0, sl
   189c8:	sub	sp, fp, #28
   189cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189d0:	ldrh	r2, [r5, #56]!	; 0x38
   189d4:	cmp	r2, #1
   189d8:	bne	18a58 <__assert_fail@plt+0x6bc4>
   189dc:	cmp	r1, #4
   189e0:	bne	18ac8 <__assert_fail@plt+0x6c34>
   189e4:	ldrb	r0, [r6, #58]	; 0x3a
   189e8:	tst	r0, #2
   189ec:	beq	189f8 <__assert_fail@plt+0x6b64>
   189f0:	ldr	r0, [r6, #36]	; 0x24
   189f4:	bl	11e70 <close@plt>
   189f8:	ldr	r5, [r4, #4]
   189fc:	cmp	r5, #0
   18a00:	beq	18a34 <__assert_fail@plt+0x6ba0>
   18a04:	ldrd	r8, [r5, #8]
   18a08:	cmp	r9, #0
   18a0c:	beq	18a18 <__assert_fail@plt+0x6b84>
   18a10:	mov	r0, r9
   18a14:	bl	11e88 <closedir@plt>
   18a18:	mov	r0, r5
   18a1c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   18a20:	cmp	r8, #0
   18a24:	mov	r5, r8
   18a28:	bne	18a04 <__assert_fail@plt+0x6b70>
   18a2c:	mov	r0, #0
   18a30:	str	r0, [r4, #4]
   18a34:	mov	r0, #6
   18a38:	strh	r0, [r6, #56]	; 0x38
   18a3c:	mov	r0, r4
   18a40:	mov	r1, r6
   18a44:	bl	191a0 <__assert_fail@plt+0x730c>
   18a48:	mov	sl, r6
   18a4c:	mov	r0, sl
   18a50:	sub	sp, fp, #28
   18a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a58:	mov	r7, r6
   18a5c:	ldr	r6, [r7, #8]
   18a60:	cmp	r6, #0
   18a64:	beq	18b58 <__assert_fail@plt+0x6cc4>
   18a68:	mov	r0, r7
   18a6c:	str	r6, [r4]
   18a70:	bl	17b10 <__assert_fail@plt+0x5c7c>
   18a74:	ldr	r0, [r6, #48]	; 0x30
   18a78:	cmp	r0, #0
   18a7c:	beq	18ba0 <__assert_fail@plt+0x6d0c>
   18a80:	ldrh	r0, [r6, #60]	; 0x3c
   18a84:	mov	r7, r6
   18a88:	cmp	r0, #4
   18a8c:	beq	18a5c <__assert_fail@plt+0x6bc8>
   18a90:	cmp	r0, #2
   18a94:	bne	18c4c <__assert_fail@plt+0x6db8>
   18a98:	mov	r0, r4
   18a9c:	mov	r1, r6
   18aa0:	mov	r2, #1
   18aa4:	bl	184ac <__assert_fail@plt+0x6618>
   18aa8:	strh	r0, [r6, #56]	; 0x38
   18aac:	cmp	r0, #1
   18ab0:	ldreq	r0, [r4, #48]	; 0x30
   18ab4:	tsteq	r0, #4
   18ab8:	beq	1909c <__assert_fail@plt+0x7208>
   18abc:	mov	r0, #3
   18ac0:	strh	r0, [r6, #60]	; 0x3c
   18ac4:	b	18c4c <__assert_fail@plt+0x6db8>
   18ac8:	tst	r0, #64	; 0x40
   18acc:	beq	18ae8 <__assert_fail@plt+0x6c54>
   18ad0:	ldrd	r2, [r4, #16]
   18ad4:	ldrd	r8, [r6, #64]	; 0x40
   18ad8:	eor	r1, r9, r3
   18adc:	eor	r2, r8, r2
   18ae0:	orrs	r1, r2, r1
   18ae4:	bne	189e4 <__assert_fail@plt+0x6b50>
   18ae8:	ldr	r7, [r4, #4]
   18aec:	cmp	r7, #0
   18af0:	beq	18c28 <__assert_fail@plt+0x6d94>
   18af4:	tst	r0, #4096	; 0x1000
   18af8:	bne	18bf0 <__assert_fail@plt+0x6d5c>
   18afc:	ldr	r3, [r6, #24]
   18b00:	mov	r0, r4
   18b04:	mov	r1, r6
   18b08:	mvn	r2, #0
   18b0c:	bl	19270 <__assert_fail@plt+0x73dc>
   18b10:	cmp	r0, #0
   18b14:	beq	18c40 <__assert_fail@plt+0x6dac>
   18b18:	bl	11ca8 <__errno_location@plt>
   18b1c:	ldr	r0, [r0]
   18b20:	str	r0, [r6, #32]
   18b24:	ldrh	r0, [r6, #58]	; 0x3a
   18b28:	orr	r0, r0, #1
   18b2c:	strh	r0, [r6, #58]	; 0x3a
   18b30:	ldr	r0, [r4, #4]
   18b34:	cmp	r0, #0
   18b38:	beq	18c40 <__assert_fail@plt+0x6dac>
   18b3c:	ldmib	r0, {r1, r2}
   18b40:	ldr	r1, [r1, #24]
   18b44:	cmp	r2, #0
   18b48:	str	r1, [r0, #24]
   18b4c:	mov	r0, r2
   18b50:	bne	18b3c <__assert_fail@plt+0x6ca8>
   18b54:	b	18c40 <__assert_fail@plt+0x6dac>
   18b58:	ldr	r0, [r7, #4]
   18b5c:	ldr	r1, [r0, #12]
   18b60:	cmp	r1, #0
   18b64:	beq	18bc8 <__assert_fail@plt+0x6d34>
   18b68:	str	r0, [r4]
   18b6c:	mov	r2, #0
   18b70:	ldr	r1, [r4, #24]
   18b74:	ldr	r0, [r0, #40]	; 0x28
   18b78:	strb	r2, [r1, r0]
   18b7c:	mov	r0, r4
   18b80:	mov	r1, #3
   18b84:	bl	19518 <__assert_fail@plt+0x7684>
   18b88:	cmp	r0, #0
   18b8c:	beq	18e10 <__assert_fail@plt+0x6f7c>
   18b90:	mov	r6, r0
   18b94:	mov	r0, r7
   18b98:	bl	17b10 <__assert_fail@plt+0x5c7c>
   18b9c:	b	18c4c <__assert_fail@plt+0x6db8>
   18ba0:	mov	r0, r4
   18ba4:	bl	1a0f4 <__assert_fail@plt+0x8260>
   18ba8:	ldr	r1, [r4, #48]	; 0x30
   18bac:	cmp	r0, #0
   18bb0:	beq	18bd0 <__assert_fail@plt+0x6d3c>
   18bb4:	orr	r0, r1, #8192	; 0x2000
   18bb8:	str	r0, [r4, #48]	; 0x30
   18bbc:	mov	r0, sl
   18bc0:	sub	sp, fp, #28
   18bc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bc8:	mov	sl, r0
   18bcc:	b	18e24 <__assert_fail@plt+0x6f90>
   18bd0:	movw	r0, #258	; 0x102
   18bd4:	tst	r1, r0
   18bd8:	beq	18f24 <__assert_fail@plt+0x7090>
   18bdc:	ldr	r0, [r4, #56]	; 0x38
   18be0:	cmp	r0, #0
   18be4:	beq	18f2c <__assert_fail@plt+0x7098>
   18be8:	bl	1ada4 <__assert_fail@plt+0x8f10>
   18bec:	b	18f2c <__assert_fail@plt+0x7098>
   18bf0:	bic	r0, r0, #4096	; 0x1000
   18bf4:	str	r0, [r4, #48]	; 0x30
   18bf8:	ldrd	r8, [r7, #8]
   18bfc:	cmp	r9, #0
   18c00:	beq	18c0c <__assert_fail@plt+0x6d78>
   18c04:	mov	r0, r9
   18c08:	bl	11e88 <closedir@plt>
   18c0c:	mov	r0, r7
   18c10:	bl	17b10 <__assert_fail@plt+0x5c7c>
   18c14:	cmp	r8, #0
   18c18:	mov	r7, r8
   18c1c:	bne	18bf8 <__assert_fail@plt+0x6d64>
   18c20:	mov	r0, #0
   18c24:	str	r0, [r4, #4]
   18c28:	mov	r0, r4
   18c2c:	mov	r1, #3
   18c30:	bl	19518 <__assert_fail@plt+0x7684>
   18c34:	cmp	r0, #0
   18c38:	str	r0, [r4, #4]
   18c3c:	beq	18dd8 <__assert_fail@plt+0x6f44>
   18c40:	ldr	r6, [r4, #4]
   18c44:	mov	r0, #0
   18c48:	str	r0, [r4, #4]
   18c4c:	ldr	r0, [r6, #4]
   18c50:	ldr	r1, [r0, #28]
   18c54:	ldr	r0, [r0, #40]	; 0x28
   18c58:	sub	r2, r0, #1
   18c5c:	ldrb	r1, [r1, r2]
   18c60:	cmp	r1, #47	; 0x2f
   18c64:	ldr	r1, [r4, #24]
   18c68:	moveq	r0, r2
   18c6c:	mov	r2, #47	; 0x2f
   18c70:	strb	r2, [r1, r0]!
   18c74:	ldr	r2, [r6, #52]	; 0x34
   18c78:	add	r0, r1, #1
   18c7c:	add	r1, r6, #168	; 0xa8
   18c80:	add	r2, r2, #1
   18c84:	bl	11a50 <memmove@plt>
   18c88:	str	r6, [r4]
   18c8c:	ldrh	r0, [r6, #56]	; 0x38
   18c90:	cmp	r0, #11
   18c94:	bne	18cc8 <__assert_fail@plt+0x6e34>
   18c98:	ldrd	r0, [r6, #112]	; 0x70
   18c9c:	eor	r2, r0, #1
   18ca0:	orrs	r2, r2, r1
   18ca4:	beq	18d70 <__assert_fail@plt+0x6edc>
   18ca8:	eor	r0, r0, #2
   18cac:	orrs	r0, r0, r1
   18cb0:	bne	1919c <__assert_fail@plt+0x7308>
   18cb4:	mov	r0, r4
   18cb8:	mov	r1, r6
   18cbc:	mov	r2, #0
   18cc0:	bl	184ac <__assert_fail@plt+0x6618>
   18cc4:	strh	r0, [r6, #56]	; 0x38
   18cc8:	cmp	r0, #1
   18ccc:	bne	18d60 <__assert_fail@plt+0x6ecc>
   18cd0:	ldr	r0, [r6, #48]	; 0x30
   18cd4:	cmp	r0, #0
   18cd8:	ldrdeq	r0, [r6, #64]	; 0x40
   18cdc:	strdeq	r0, [r4, #16]
   18ce0:	movw	r1, #258	; 0x102
   18ce4:	ldrh	r0, [r4, #48]	; 0x30
   18ce8:	tst	r0, r1
   18cec:	beq	18d80 <__assert_fail@plt+0x6eec>
   18cf0:	mov	r0, #24
   18cf4:	bl	36fb4 <__assert_fail@plt+0x25120>
   18cf8:	cmp	r0, #0
   18cfc:	beq	18db0 <__assert_fail@plt+0x6f1c>
   18d00:	mov	r7, r0
   18d04:	ldrd	r0, [r6, #64]	; 0x40
   18d08:	add	r2, r7, #8
   18d0c:	stm	r7, {r0, r1}
   18d10:	ldrd	r0, [r6, #160]	; 0xa0
   18d14:	stm	r2, {r0, r1, r6}
   18d18:	mov	r1, r7
   18d1c:	ldr	r0, [r4, #56]	; 0x38
   18d20:	bl	1b6c0 <__assert_fail@plt+0x982c>
   18d24:	cmp	r0, r7
   18d28:	beq	18e00 <__assert_fail@plt+0x6f6c>
   18d2c:	mov	r4, r0
   18d30:	mov	r0, r7
   18d34:	bl	17b10 <__assert_fail@plt+0x5c7c>
   18d38:	cmp	r4, #0
   18d3c:	beq	18db0 <__assert_fail@plt+0x6f1c>
   18d40:	ldr	r0, [r4, #16]
   18d44:	mov	r1, #2
   18d48:	mov	sl, r6
   18d4c:	strh	r1, [r6, #56]	; 0x38
   18d50:	str	r0, [r6]
   18d54:	mov	r0, sl
   18d58:	sub	sp, fp, #28
   18d5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d60:	mov	sl, r6
   18d64:	mov	r0, sl
   18d68:	sub	sp, fp, #28
   18d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d70:	mov	sl, r6
   18d74:	mov	r0, sl
   18d78:	sub	sp, fp, #28
   18d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d80:	ldr	r0, [r4, #56]	; 0x38
   18d84:	add	r1, r6, #64	; 0x40
   18d88:	bl	37c90 <__assert_fail@plt+0x25dfc>
   18d8c:	cmp	r0, #0
   18d90:	beq	18dc8 <__assert_fail@plt+0x6f34>
   18d94:	mov	r0, #2
   18d98:	mov	sl, r6
   18d9c:	strh	r0, [r6, #56]	; 0x38
   18da0:	str	r6, [r6]
   18da4:	mov	r0, sl
   18da8:	sub	sp, fp, #28
   18dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18db0:	bl	11ca8 <__errno_location@plt>
   18db4:	mov	r1, #12
   18db8:	str	r1, [r0]
   18dbc:	mov	r0, sl
   18dc0:	sub	sp, fp, #28
   18dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dc8:	mov	sl, r6
   18dcc:	mov	r0, sl
   18dd0:	sub	sp, fp, #28
   18dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dd8:	ldrb	r0, [r4, #49]	; 0x31
   18ddc:	tst	r0, #32
   18de0:	bne	19190 <__assert_fail@plt+0x72fc>
   18de4:	ldr	r0, [r6, #32]
   18de8:	cmp	r0, #0
   18dec:	ldrhne	r0, [r5]
   18df0:	cmpne	r0, #4
   18df4:	movne	r0, #7
   18df8:	strhne	r0, [r5]
   18dfc:	b	18a3c <__assert_fail@plt+0x6ba8>
   18e00:	mov	sl, r6
   18e04:	mov	r0, sl
   18e08:	sub	sp, fp, #28
   18e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e10:	ldrb	r0, [r4, #49]	; 0x31
   18e14:	mov	sl, #0
   18e18:	tst	r0, #32
   18e1c:	bne	19190 <__assert_fail@plt+0x72fc>
   18e20:	ldr	sl, [r7, #4]
   18e24:	mov	r0, r7
   18e28:	str	sl, [r4]
   18e2c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   18e30:	ldr	r0, [sl, #48]	; 0x30
   18e34:	cmn	r0, #1
   18e38:	beq	18ed8 <__assert_fail@plt+0x7044>
   18e3c:	ldrh	r0, [sl, #56]	; 0x38
   18e40:	cmp	r0, #11
   18e44:	beq	1919c <__assert_fail@plt+0x7308>
   18e48:	ldr	r0, [sl, #40]	; 0x28
   18e4c:	ldr	r1, [r4, #24]
   18e50:	mov	r2, #0
   18e54:	strb	r2, [r1, r0]
   18e58:	ldr	r0, [sl, #48]	; 0x30
   18e5c:	cmp	r0, #0
   18e60:	beq	1901c <__assert_fail@plt+0x7188>
   18e64:	ldrh	r0, [sl, #58]	; 0x3a
   18e68:	tst	r0, #2
   18e6c:	bne	19054 <__assert_fail@plt+0x71c0>
   18e70:	tst	r0, #1
   18e74:	bne	19154 <__assert_fail@plt+0x72c0>
   18e78:	ldr	r1, [sl, #4]
   18e7c:	movw	r3, #41391	; 0xa1af
   18e80:	mov	r0, r4
   18e84:	mvn	r2, #0
   18e88:	movt	r3, #3
   18e8c:	bl	19270 <__assert_fail@plt+0x73dc>
   18e90:	cmp	r0, #0
   18e94:	bne	1902c <__assert_fail@plt+0x7198>
   18e98:	b	19154 <__assert_fail@plt+0x72c0>
   18e9c:	ldr	r0, [r4, #32]
   18ea0:	movw	r1, #41392	; 0xa1b0
   18ea4:	movt	r1, #3
   18ea8:	bl	1d9a0 <__assert_fail@plt+0xbb0c>
   18eac:	cmn	r0, #1
   18eb0:	str	r0, [r6, #36]	; 0x24
   18eb4:	ble	18efc <__assert_fail@plt+0x7068>
   18eb8:	ldrh	r0, [r6, #58]	; 0x3a
   18ebc:	orr	r0, r0, #2
   18ec0:	strh	r0, [r6, #58]	; 0x3a
   18ec4:	str	r6, [r4]
   18ec8:	ldrh	r0, [r6, #56]	; 0x38
   18ecc:	cmp	r0, #11
   18ed0:	beq	18c98 <__assert_fail@plt+0x6e04>
   18ed4:	b	18cc8 <__assert_fail@plt+0x6e34>
   18ed8:	mov	r0, sl
   18edc:	bl	17b10 <__assert_fail@plt+0x5c7c>
   18ee0:	bl	11ca8 <__errno_location@plt>
   18ee4:	mov	sl, #0
   18ee8:	str	sl, [r0]
   18eec:	str	sl, [r4]
   18ef0:	mov	r0, sl
   18ef4:	sub	sp, fp, #28
   18ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18efc:	bl	11ca8 <__errno_location@plt>
   18f00:	ldr	r0, [r0]
   18f04:	mov	r1, #7
   18f08:	strh	r1, [r6, #56]	; 0x38
   18f0c:	str	r0, [r6, #32]
   18f10:	str	r6, [r4]
   18f14:	ldrh	r0, [r6, #56]	; 0x38
   18f18:	cmp	r0, #11
   18f1c:	beq	18c98 <__assert_fail@plt+0x6e04>
   18f20:	b	18cc8 <__assert_fail@plt+0x6e34>
   18f24:	ldr	r0, [r4, #56]	; 0x38
   18f28:	bl	17b10 <__assert_fail@plt+0x5c7c>
   18f2c:	ldr	r1, [r6, #52]	; 0x34
   18f30:	add	r7, r6, #168	; 0xa8
   18f34:	str	r1, [r6, #40]	; 0x28
   18f38:	add	r2, r1, #1
   18f3c:	mov	r1, r7
   18f40:	ldr	r0, [r4, #24]
   18f44:	bl	11a50 <memmove@plt>
   18f48:	mov	r0, r7
   18f4c:	mov	r1, #47	; 0x2f
   18f50:	bl	11d68 <strrchr@plt>
   18f54:	cmp	r0, #0
   18f58:	beq	18f94 <__assert_fail@plt+0x7100>
   18f5c:	cmp	r0, r7
   18f60:	bne	18f70 <__assert_fail@plt+0x70dc>
   18f64:	ldrb	r1, [r6, #169]	; 0xa9
   18f68:	cmp	r1, #0
   18f6c:	beq	18f94 <__assert_fail@plt+0x7100>
   18f70:	add	r8, r0, #1
   18f74:	mov	r0, r8
   18f78:	bl	11c78 <strlen@plt>
   18f7c:	mov	r9, r0
   18f80:	add	r2, r0, #1
   18f84:	mov	r0, r7
   18f88:	mov	r1, r8
   18f8c:	bl	11a50 <memmove@plt>
   18f90:	str	r9, [r6, #52]	; 0x34
   18f94:	ldr	r0, [r4, #24]
   18f98:	movw	r1, #258	; 0x102
   18f9c:	str	r0, [r6, #24]
   18fa0:	str	r0, [r6, #28]
   18fa4:	ldrh	r0, [r4, #48]	; 0x30
   18fa8:	tst	r0, r1
   18fac:	beq	18ff0 <__assert_fail@plt+0x715c>
   18fb0:	movw	r0, #31504	; 0x7b10
   18fb4:	movw	r2, #41932	; 0xa3cc
   18fb8:	movw	r3, #41964	; 0xa3ec
   18fbc:	mov	r1, #0
   18fc0:	movt	r0, #1
   18fc4:	movt	r2, #1
   18fc8:	movt	r3, #1
   18fcc:	str	r0, [sp]
   18fd0:	mov	r0, #31
   18fd4:	bl	1aa88 <__assert_fail@plt+0x8bf4>
   18fd8:	str	r0, [r4, #56]	; 0x38
   18fdc:	str	r6, [r4]
   18fe0:	ldrh	r0, [r6, #56]	; 0x38
   18fe4:	cmp	r0, #11
   18fe8:	beq	18c98 <__assert_fail@plt+0x6e04>
   18fec:	b	18cc8 <__assert_fail@plt+0x6e34>
   18ff0:	mov	r0, #32
   18ff4:	bl	36fb4 <__assert_fail@plt+0x25120>
   18ff8:	cmp	r0, #0
   18ffc:	str	r0, [r4, #56]	; 0x38
   19000:	beq	18c88 <__assert_fail@plt+0x6df4>
   19004:	bl	37c74 <__assert_fail@plt+0x25de0>
   19008:	str	r6, [r4]
   1900c:	ldrh	r0, [r6, #56]	; 0x38
   19010:	cmp	r0, #11
   19014:	beq	18c98 <__assert_fail@plt+0x6e04>
   19018:	b	18cc8 <__assert_fail@plt+0x6e34>
   1901c:	mov	r0, r4
   19020:	bl	1a0f4 <__assert_fail@plt+0x8260>
   19024:	cmp	r0, #0
   19028:	beq	19154 <__assert_fail@plt+0x72c0>
   1902c:	bl	11ca8 <__errno_location@plt>
   19030:	ldr	r0, [r0]
   19034:	str	r0, [sl, #32]
   19038:	ldr	r0, [r4, #48]	; 0x30
   1903c:	orr	r0, r0, #8192	; 0x2000
   19040:	str	r0, [r4, #48]	; 0x30
   19044:	ldrh	r0, [sl, #56]	; 0x38
   19048:	cmp	r0, #2
   1904c:	bne	19160 <__assert_fail@plt+0x72cc>
   19050:	b	19184 <__assert_fail@plt+0x72f0>
   19054:	ldr	r0, [r4, #48]	; 0x30
   19058:	tst	r0, #4
   1905c:	bne	190d4 <__assert_fail@plt+0x7240>
   19060:	mov	r5, sl
   19064:	tst	r0, #512	; 0x200
   19068:	ldr	r6, [r5, #36]!	; 0x24
   1906c:	bne	19120 <__assert_fail@plt+0x728c>
   19070:	mov	r0, r6
   19074:	bl	11dd4 <fchdir@plt>
   19078:	cmp	r0, #0
   1907c:	beq	1914c <__assert_fail@plt+0x72b8>
   19080:	bl	11ca8 <__errno_location@plt>
   19084:	ldr	r0, [r0]
   19088:	str	r0, [sl, #32]
   1908c:	ldr	r0, [r4, #48]	; 0x30
   19090:	orr	r0, r0, #8192	; 0x2000
   19094:	str	r0, [r4, #48]	; 0x30
   19098:	b	1914c <__assert_fail@plt+0x72b8>
   1909c:	mov	r1, #32768	; 0x8000
   190a0:	tst	r0, #512	; 0x200
   190a4:	and	r1, r1, r0, lsl #11
   190a8:	orr	r1, r1, #18688	; 0x4900
   190ac:	orr	r2, r1, #524288	; 0x80000
   190b0:	bne	190dc <__assert_fail@plt+0x7248>
   190b4:	movw	r0, #41392	; 0xa1b0
   190b8:	mov	r1, r2
   190bc:	movt	r0, #3
   190c0:	bl	38008 <__assert_fail@plt+0x26174>
   190c4:	cmn	r0, #1
   190c8:	str	r0, [r6, #36]	; 0x24
   190cc:	bgt	190f8 <__assert_fail@plt+0x7264>
   190d0:	b	19108 <__assert_fail@plt+0x7274>
   190d4:	add	r5, sl, #36	; 0x24
   190d8:	b	1914c <__assert_fail@plt+0x72b8>
   190dc:	ldr	r0, [r4, #32]
   190e0:	movw	r1, #41392	; 0xa1b0
   190e4:	movt	r1, #3
   190e8:	bl	1d9a0 <__assert_fail@plt+0xbb0c>
   190ec:	cmn	r0, #1
   190f0:	str	r0, [r6, #36]	; 0x24
   190f4:	ble	19108 <__assert_fail@plt+0x7274>
   190f8:	ldrh	r0, [r6, #58]	; 0x3a
   190fc:	orr	r0, r0, #2
   19100:	strh	r0, [r6, #58]	; 0x3a
   19104:	b	18abc <__assert_fail@plt+0x6c28>
   19108:	bl	11ca8 <__errno_location@plt>
   1910c:	ldr	r0, [r0]
   19110:	mov	r1, #7
   19114:	strh	r1, [r6, #56]	; 0x38
   19118:	str	r0, [r6, #32]
   1911c:	b	18abc <__assert_fail@plt+0x6c28>
   19120:	ldr	r1, [r4, #32]
   19124:	cmp	r1, r6
   19128:	bne	19134 <__assert_fail@plt+0x72a0>
   1912c:	cmn	r1, #100	; 0x64
   19130:	bne	1919c <__assert_fail@plt+0x7308>
   19134:	add	r0, r4, #60	; 0x3c
   19138:	bl	1c564 <__assert_fail@plt+0xa6d0>
   1913c:	cmp	r0, #0
   19140:	blt	19148 <__assert_fail@plt+0x72b4>
   19144:	bl	11e70 <close@plt>
   19148:	str	r6, [r4, #32]
   1914c:	ldr	r0, [r5]
   19150:	bl	11e70 <close@plt>
   19154:	ldrh	r0, [sl, #56]	; 0x38
   19158:	cmp	r0, #2
   1915c:	beq	19184 <__assert_fail@plt+0x72f0>
   19160:	ldr	r0, [sl, #32]
   19164:	mov	r1, #7
   19168:	cmp	r0, #0
   1916c:	movweq	r1, #6
   19170:	strh	r1, [sl, #56]	; 0x38
   19174:	bne	19184 <__assert_fail@plt+0x72f0>
   19178:	mov	r0, r4
   1917c:	mov	r1, sl
   19180:	bl	191a0 <__assert_fail@plt+0x730c>
   19184:	ldrb	r0, [r4, #49]	; 0x31
   19188:	tst	r0, #32
   1918c:	movne	sl, #0
   19190:	mov	r0, sl
   19194:	sub	sp, fp, #28
   19198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1919c:	bl	11e58 <abort@plt>
   191a0:	push	{r4, r5, r6, r7, fp, lr}
   191a4:	add	fp, sp, #16
   191a8:	sub	sp, sp, #24
   191ac:	ldrh	r2, [r0, #48]	; 0x30
   191b0:	movw	r3, #258	; 0x102
   191b4:	add	lr, r1, #64	; 0x40
   191b8:	tst	r2, r3
   191bc:	beq	191f4 <__assert_fail@plt+0x7360>
   191c0:	ldrd	r2, [lr]
   191c4:	stm	sp, {r2, r3}
   191c8:	ldrd	r2, [r1, #160]	; 0xa0
   191cc:	mov	r1, sp
   191d0:	str	r3, [sp, #12]
   191d4:	str	r2, [sp, #8]
   191d8:	ldr	r0, [r0, #56]	; 0x38
   191dc:	bl	1b708 <__assert_fail@plt+0x9874>
   191e0:	cmp	r0, #0
   191e4:	beq	1926c <__assert_fail@plt+0x73d8>
   191e8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   191ec:	sub	sp, fp, #16
   191f0:	pop	{r4, r5, r6, r7, fp, pc}
   191f4:	ldr	r2, [r1, #4]
   191f8:	cmp	r2, #0
   191fc:	beq	19264 <__assert_fail@plt+0x73d0>
   19200:	ldr	r3, [r2, #48]	; 0x30
   19204:	cmp	r3, #0
   19208:	blt	19264 <__assert_fail@plt+0x73d0>
   1920c:	ldr	ip, [r0, #56]	; 0x38
   19210:	ldrd	r4, [ip, #16]
   19214:	orrs	r3, r4, r5
   19218:	beq	1926c <__assert_fail@plt+0x73d8>
   1921c:	ldrd	r4, [r1, #160]	; 0xa0
   19220:	ldrd	r6, [ip]
   19224:	eor	r1, r7, r5
   19228:	eor	r3, r6, r4
   1922c:	orrs	r1, r3, r1
   19230:	bne	19264 <__assert_fail@plt+0x73d0>
   19234:	ldr	r1, [ip, #8]!
   19238:	ldrd	r4, [lr]
   1923c:	ldr	r3, [ip, #4]
   19240:	eor	r1, r1, r4
   19244:	eor	r3, r3, r5
   19248:	orrs	r1, r1, r3
   1924c:	bne	19264 <__assert_fail@plt+0x73d0>
   19250:	ldrd	r4, [r2, #64]	; 0x40
   19254:	strd	r4, [ip]
   19258:	ldr	r0, [r0, #56]	; 0x38
   1925c:	ldrd	r2, [r2, #160]	; 0xa0
   19260:	strd	r2, [r0]
   19264:	sub	sp, fp, #16
   19268:	pop	{r4, r5, r6, r7, fp, pc}
   1926c:	bl	11e58 <abort@plt>
   19270:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19274:	add	fp, sp, #28
   19278:	sub	sp, sp, #108	; 0x6c
   1927c:	mov	r7, r3
   19280:	mov	r4, r2
   19284:	mov	r8, r1
   19288:	mov	sl, r0
   1928c:	cmp	r3, #0
   19290:	beq	1931c <__assert_fail@plt+0x7488>
   19294:	movw	r1, #41391	; 0xa1af
   19298:	mov	r0, r7
   1929c:	movt	r1, #3
   192a0:	bl	11a14 <strcmp@plt>
   192a4:	mov	r6, r0
   192a8:	cmp	r0, #0
   192ac:	movwne	r6, #1
   192b0:	ldr	r0, [sl, #48]	; 0x30
   192b4:	tst	r0, #4
   192b8:	bne	1932c <__assert_fail@plt+0x7498>
   192bc:	cmn	r4, #1
   192c0:	mov	r1, #0
   192c4:	mov	r9, #0
   192c8:	movwgt	r1, #1
   192cc:	orrs	r1, r1, r6
   192d0:	bne	19354 <__assert_fail@plt+0x74c0>
   192d4:	ands	r0, r0, #512	; 0x200
   192d8:	beq	19354 <__assert_fail@plt+0x74c0>
   192dc:	add	r4, sl, #60	; 0x3c
   192e0:	mov	r0, r4
   192e4:	bl	1c55c <__assert_fail@plt+0xa6c8>
   192e8:	cmp	r0, #0
   192ec:	bne	1935c <__assert_fail@plt+0x74c8>
   192f0:	mov	r0, r4
   192f4:	bl	1c5b0 <__assert_fail@plt+0xa71c>
   192f8:	cmn	r0, #1
   192fc:	ble	1935c <__assert_fail@plt+0x74c8>
   19300:	mov	r4, r0
   19304:	mov	r9, #0
   19308:	mov	r7, #0
   1930c:	ldr	r5, [sl, #48]	; 0x30
   19310:	tst	r5, #2
   19314:	beq	193a0 <__assert_fail@plt+0x750c>
   19318:	b	193e8 <__assert_fail@plt+0x7554>
   1931c:	mov	r6, #1
   19320:	ldr	r0, [sl, #48]	; 0x30
   19324:	tst	r0, #4
   19328:	beq	192bc <__assert_fail@plt+0x7428>
   1932c:	mov	r5, #0
   19330:	cmp	r4, #0
   19334:	blt	193dc <__assert_fail@plt+0x7548>
   19338:	ands	r0, r0, #512	; 0x200
   1933c:	beq	193dc <__assert_fail@plt+0x7548>
   19340:	mov	r0, r4
   19344:	bl	11e70 <close@plt>
   19348:	mov	r0, r5
   1934c:	sub	sp, fp, #28
   19350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19354:	cmn	r4, #1
   19358:	bgt	19394 <__assert_fail@plt+0x7500>
   1935c:	ldr	r0, [sl, #48]	; 0x30
   19360:	mov	r1, #32768	; 0x8000
   19364:	and	r1, r1, r0, lsl #11
   19368:	tst	r0, #512	; 0x200
   1936c:	orr	r1, r1, #18688	; 0x4900
   19370:	orr	r2, r1, #524288	; 0x80000
   19374:	bne	19410 <__assert_fail@plt+0x757c>
   19378:	mov	r0, r7
   1937c:	mov	r1, r2
   19380:	bl	38008 <__assert_fail@plt+0x26174>
   19384:	mov	r4, r0
   19388:	mov	r9, #1
   1938c:	cmp	r0, #0
   19390:	blt	1942c <__assert_fail@plt+0x7598>
   19394:	ldr	r5, [sl, #48]	; 0x30
   19398:	tst	r5, #2
   1939c:	bne	193e8 <__assert_fail@plt+0x7554>
   193a0:	cmp	r7, #0
   193a4:	beq	193c0 <__assert_fail@plt+0x752c>
   193a8:	movw	r1, #41391	; 0xa1af
   193ac:	mov	r0, r7
   193b0:	movt	r1, #3
   193b4:	bl	11a14 <strcmp@plt>
   193b8:	cmp	r0, #0
   193bc:	beq	193e8 <__assert_fail@plt+0x7554>
   193c0:	tst	r5, #512	; 0x200
   193c4:	bne	1947c <__assert_fail@plt+0x75e8>
   193c8:	mov	r0, r4
   193cc:	bl	11dd4 <fchdir@plt>
   193d0:	mov	r5, r0
   193d4:	cmp	r9, #0
   193d8:	bne	194c4 <__assert_fail@plt+0x7630>
   193dc:	mov	r0, r5
   193e0:	sub	sp, fp, #28
   193e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193e8:	mov	r2, sp
   193ec:	mov	r0, #3
   193f0:	mov	r1, r4
   193f4:	bl	11b4c <__fxstat64@plt>
   193f8:	cmp	r0, #0
   193fc:	beq	1943c <__assert_fail@plt+0x75a8>
   19400:	mvn	r5, #0
   19404:	cmp	r9, #0
   19408:	beq	193dc <__assert_fail@plt+0x7548>
   1940c:	b	194c4 <__assert_fail@plt+0x7630>
   19410:	ldr	r0, [sl, #32]
   19414:	mov	r1, r7
   19418:	bl	1d9a0 <__assert_fail@plt+0xbb0c>
   1941c:	mov	r4, r0
   19420:	mov	r9, #1
   19424:	cmp	r0, #0
   19428:	bge	19394 <__assert_fail@plt+0x7500>
   1942c:	mvn	r5, #0
   19430:	mov	r0, r5
   19434:	sub	sp, fp, #28
   19438:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1943c:	ldrd	r0, [r8, #64]	; 0x40
   19440:	ldm	sp, {r2, r3}
   19444:	eor	r1, r1, r3
   19448:	eor	r0, r0, r2
   1944c:	orrs	r0, r0, r1
   19450:	bne	194ac <__assert_fail@plt+0x7618>
   19454:	ldrd	r0, [r8, #160]	; 0xa0
   19458:	ldr	r2, [sp, #96]	; 0x60
   1945c:	ldr	r3, [sp, #100]	; 0x64
   19460:	eor	r1, r1, r3
   19464:	eor	r0, r0, r2
   19468:	orrs	r0, r0, r1
   1946c:	bne	194ac <__assert_fail@plt+0x7618>
   19470:	ldr	r5, [sl, #48]	; 0x30
   19474:	tst	r5, #512	; 0x200
   19478:	beq	193c8 <__assert_fail@plt+0x7534>
   1947c:	ldr	r1, [sl, #32]
   19480:	cmp	r1, r4
   19484:	bne	19490 <__assert_fail@plt+0x75fc>
   19488:	cmn	r1, #100	; 0x64
   1948c:	bne	19514 <__assert_fail@plt+0x7680>
   19490:	cmp	r6, #0
   19494:	beq	194e8 <__assert_fail@plt+0x7654>
   19498:	add	r0, sl, #60	; 0x3c
   1949c:	bl	1c564 <__assert_fail@plt+0xa6d0>
   194a0:	cmp	r0, #0
   194a4:	bge	194fc <__assert_fail@plt+0x7668>
   194a8:	b	19500 <__assert_fail@plt+0x766c>
   194ac:	bl	11ca8 <__errno_location@plt>
   194b0:	mov	r1, #2
   194b4:	str	r1, [r0]
   194b8:	mvn	r5, #0
   194bc:	cmp	r9, #0
   194c0:	beq	193dc <__assert_fail@plt+0x7548>
   194c4:	bl	11ca8 <__errno_location@plt>
   194c8:	ldr	r7, [r0]
   194cc:	mov	r6, r0
   194d0:	mov	r0, r4
   194d4:	bl	11e70 <close@plt>
   194d8:	str	r7, [r6]
   194dc:	mov	r0, r5
   194e0:	sub	sp, fp, #28
   194e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   194e8:	tst	r5, #4
   194ec:	bne	19500 <__assert_fail@plt+0x766c>
   194f0:	cmp	r1, #0
   194f4:	blt	19500 <__assert_fail@plt+0x766c>
   194f8:	mov	r0, r1
   194fc:	bl	11e70 <close@plt>
   19500:	str	r4, [sl, #32]
   19504:	mov	r5, #0
   19508:	mov	r0, r5
   1950c:	sub	sp, fp, #28
   19510:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19514:	bl	11e58 <abort@plt>
   19518:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1951c:	add	fp, sp, #28
   19520:	sub	sp, sp, #76	; 0x4c
   19524:	ldr	r8, [r0]
   19528:	mov	r9, r1
   1952c:	mov	r5, r0
   19530:	str	r0, [sp, #52]	; 0x34
   19534:	ldr	r4, [r8, #12]
   19538:	cmp	r4, #0
   1953c:	beq	19588 <__assert_fail@plt+0x76f4>
   19540:	mov	r0, r4
   19544:	bl	11dc8 <dirfd@plt>
   19548:	cmn	r0, #1
   1954c:	str	r0, [fp, #-32]	; 0xffffffe0
   19550:	ble	195c0 <__assert_fail@plt+0x772c>
   19554:	mov	r1, r5
   19558:	mvn	r2, #0
   1955c:	str	r4, [sp, #12]
   19560:	str	r9, [sp, #4]
   19564:	mov	ip, #0
   19568:	ldr	r0, [r1, #44]!	; 0x2c
   1956c:	cmp	r0, #0
   19570:	str	r1, [fp, #-48]	; 0xffffffd0
   19574:	add	sl, r1, #4
   19578:	movweq	r2, #34464	; 0x86a0
   1957c:	movteq	r2, #1
   19580:	str	r2, [sp, #28]
   19584:	b	19850 <__assert_fail@plt+0x79bc>
   19588:	mov	sl, r5
   1958c:	mvn	r0, #99	; 0x63
   19590:	mov	r2, #0
   19594:	ldr	r3, [sl, #48]!	; 0x30
   19598:	and	r1, r3, #516	; 0x204
   1959c:	cmp	r1, #512	; 0x200
   195a0:	ldr	r1, [r8, #24]
   195a4:	ldreq	r0, [r5, #32]
   195a8:	tst	r3, #16
   195ac:	beq	195e8 <__assert_fail@plt+0x7754>
   195b0:	tst	r3, #1
   195b4:	bne	195dc <__assert_fail@plt+0x7748>
   195b8:	mov	r2, #32768	; 0x8000
   195bc:	b	195e8 <__assert_fail@plt+0x7754>
   195c0:	ldr	r0, [r8, #12]
   195c4:	bl	11e88 <closedir@plt>
   195c8:	mov	r6, #0
   195cc:	str	r6, [r8, #12]
   195d0:	cmp	r9, #3
   195d4:	beq	19634 <__assert_fail@plt+0x77a0>
   195d8:	b	19f04 <__assert_fail@plt+0x8070>
   195dc:	ldr	r3, [r8, #48]	; 0x30
   195e0:	cmp	r3, #0
   195e4:	movne	r2, #32768	; 0x8000
   195e8:	sub	r3, fp, #32
   195ec:	bl	1d9e4 <__assert_fail@plt+0xbb50>
   195f0:	cmp	r0, #0
   195f4:	str	r0, [r8, #12]
   195f8:	beq	19628 <__assert_fail@plt+0x7794>
   195fc:	ldrh	r0, [r8, #56]	; 0x38
   19600:	cmp	r0, #11
   19604:	bne	19654 <__assert_fail@plt+0x77c0>
   19608:	mov	r0, r5
   1960c:	mov	r1, r8
   19610:	mov	r2, #0
   19614:	bl	184ac <__assert_fail@plt+0x6618>
   19618:	mov	r7, r8
   1961c:	strh	r0, [r8, #56]	; 0x38
   19620:	mov	r6, r5
   19624:	b	19728 <__assert_fail@plt+0x7894>
   19628:	mov	r6, #0
   1962c:	cmp	r9, #3
   19630:	bne	19f04 <__assert_fail@plt+0x8070>
   19634:	mov	r0, #4
   19638:	strh	r0, [r8, #56]	; 0x38
   1963c:	bl	11ca8 <__errno_location@plt>
   19640:	ldr	r0, [r0]
   19644:	str	r0, [r8, #32]
   19648:	mov	r0, r6
   1964c:	sub	sp, fp, #28
   19650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19654:	ldrb	r0, [sl, #1]
   19658:	mov	r7, r8
   1965c:	mov	r6, r5
   19660:	tst	r0, #1
   19664:	beq	19728 <__assert_fail@plt+0x7894>
   19668:	mov	r0, r6
   1966c:	mov	r1, r7
   19670:	mov	r5, r7
   19674:	bl	191a0 <__assert_fail@plt+0x730c>
   19678:	mov	r0, r6
   1967c:	mov	r1, r7
   19680:	mov	r2, #0
   19684:	bl	184ac <__assert_fail@plt+0x6618>
   19688:	ldrh	r0, [r6, #48]	; 0x30
   1968c:	movw	r1, #258	; 0x102
   19690:	tst	r0, r1
   19694:	beq	19708 <__assert_fail@plt+0x7874>
   19698:	mov	r0, #24
   1969c:	bl	36fb4 <__assert_fail@plt+0x25120>
   196a0:	cmp	r0, #0
   196a4:	beq	1a0c0 <__assert_fail@plt+0x822c>
   196a8:	mov	r5, r0
   196ac:	ldrd	r0, [r7, #64]	; 0x40
   196b0:	add	r2, r5, #8
   196b4:	stm	r5, {r0, r1}
   196b8:	ldrd	r0, [r7, #160]	; 0xa0
   196bc:	stm	r2, {r0, r1, r7}
   196c0:	mov	r1, r5
   196c4:	ldr	r6, [sp, #52]	; 0x34
   196c8:	ldr	r0, [r6, #56]	; 0x38
   196cc:	bl	1b6c0 <__assert_fail@plt+0x982c>
   196d0:	cmp	r0, r5
   196d4:	beq	19728 <__assert_fail@plt+0x7894>
   196d8:	mov	r8, r0
   196dc:	mov	r0, r5
   196e0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   196e4:	cmp	r8, #0
   196e8:	beq	1a0c0 <__assert_fail@plt+0x822c>
   196ec:	ldr	r0, [r8, #16]
   196f0:	ldr	r6, [sp, #52]	; 0x34
   196f4:	mov	r1, #2
   196f8:	mov	r2, r7
   196fc:	strh	r1, [r7, #56]	; 0x38
   19700:	str	r0, [r7]
   19704:	b	19728 <__assert_fail@plt+0x7894>
   19708:	ldr	r0, [r6, #56]	; 0x38
   1970c:	add	r1, r5, #64	; 0x40
   19710:	bl	37c90 <__assert_fail@plt+0x25dfc>
   19714:	cmp	r0, #0
   19718:	movne	r0, #2
   1971c:	movne	r1, r7
   19720:	strhne	r0, [r7, #56]	; 0x38
   19724:	strne	r7, [r7]
   19728:	mov	r1, r6
   1972c:	mov	r5, r6
   19730:	mov	r8, r7
   19734:	str	r9, [sp, #4]
   19738:	str	r4, [sp, #12]
   1973c:	ldr	r0, [r1, #44]!	; 0x2c
   19740:	str	r1, [fp, #-48]	; 0xffffffd0
   19744:	mvn	r1, #0
   19748:	cmp	r0, #0
   1974c:	movweq	r1, #34464	; 0x86a0
   19750:	movteq	r1, #1
   19754:	cmp	r9, #2
   19758:	str	r1, [sp, #28]
   1975c:	bne	19778 <__assert_fail@plt+0x78e4>
   19760:	mov	ip, #1
   19764:	cmp	r9, #3
   19768:	bne	19850 <__assert_fail@plt+0x79bc>
   1976c:	sub	r0, r9, #3
   19770:	mov	r5, #0
   19774:	b	19798 <__assert_fail@plt+0x7904>
   19778:	ldr	r0, [sl]
   1977c:	and	r0, r0, #56	; 0x38
   19780:	cmp	r0, #24
   19784:	ldreq	r0, [r8, #84]	; 0x54
   19788:	cmpeq	r0, #2
   1978c:	beq	1a080 <__assert_fail@plt+0x81ec>
   19790:	sub	r0, r9, #3
   19794:	mov	r5, #1
   19798:	clz	r0, r0
   1979c:	lsr	r6, r0, #5
   197a0:	ldrb	r0, [sl, #1]
   197a4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   197a8:	tst	r0, #2
   197ac:	beq	197c8 <__assert_fail@plt+0x7934>
   197b0:	mov	r0, r2
   197b4:	movw	r1, #1030	; 0x406
   197b8:	mov	r2, #3
   197bc:	bl	37e28 <__assert_fail@plt+0x25f94>
   197c0:	mov	r2, r0
   197c4:	str	r0, [fp, #-32]	; 0xffffffe0
   197c8:	cmp	r2, #0
   197cc:	blt	197e8 <__assert_fail@plt+0x7954>
   197d0:	ldr	r0, [sp, #52]	; 0x34
   197d4:	mov	r1, r8
   197d8:	mov	r3, #0
   197dc:	bl	19270 <__assert_fail@plt+0x73dc>
   197e0:	cmp	r0, #0
   197e4:	beq	19848 <__assert_fail@plt+0x79b4>
   197e8:	and	r0, r6, r5
   197ec:	cmp	r0, #1
   197f0:	bne	19800 <__assert_fail@plt+0x796c>
   197f4:	bl	11ca8 <__errno_location@plt>
   197f8:	ldr	r0, [r0]
   197fc:	str	r0, [r8, #32]
   19800:	ldrh	r0, [r8, #58]	; 0x3a
   19804:	orr	r0, r0, #1
   19808:	strh	r0, [r8, #58]	; 0x3a
   1980c:	ldr	r0, [r8, #12]
   19810:	bl	11e88 <closedir@plt>
   19814:	mov	r4, #0
   19818:	ldr	r5, [sp, #52]	; 0x34
   1981c:	str	r4, [r8, #12]
   19820:	ldr	r0, [sl]
   19824:	tst	r0, #512	; 0x200
   19828:	beq	1983c <__assert_fail@plt+0x79a8>
   1982c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19830:	cmp	r0, #0
   19834:	blt	1983c <__assert_fail@plt+0x79a8>
   19838:	bl	11e70 <close@plt>
   1983c:	mov	ip, #1
   19840:	str	r4, [r8, #12]
   19844:	b	19850 <__assert_fail@plt+0x79bc>
   19848:	ldr	r5, [sp, #52]	; 0x34
   1984c:	mov	ip, #0
   19850:	ldr	r0, [r8, #40]	; 0x28
   19854:	ldr	r1, [r8, #28]
   19858:	mov	r7, #0
   1985c:	sub	r2, r0, #1
   19860:	ldrb	r1, [r1, r2]
   19864:	cmp	r1, #47	; 0x2f
   19868:	ldrb	r1, [sl]
   1986c:	moveq	r0, r2
   19870:	tst	r1, #4
   19874:	mov	r1, #0
   19878:	str	r1, [sp, #40]	; 0x28
   1987c:	beq	19894 <__assert_fail@plt+0x7a00>
   19880:	ldr	r1, [r5, #24]
   19884:	mov	r2, #47	; 0x2f
   19888:	strb	r2, [r1, r0]!
   1988c:	add	r1, r1, #1
   19890:	str	r1, [sp, #40]	; 0x28
   19894:	ldr	r6, [r8, #12]
   19898:	add	r1, r0, #1
   1989c:	str	r1, [fp, #-44]	; 0xffffffd4
   198a0:	cmp	r6, #0
   198a4:	beq	19c44 <__assert_fail@plt+0x7db0>
   198a8:	ldr	r0, [r8, #48]	; 0x30
   198ac:	str	ip, [sp]
   198b0:	add	r0, r0, #1
   198b4:	str	r0, [sp, #20]
   198b8:	ldr	r0, [r5, #36]	; 0x24
   198bc:	mov	r5, #0
   198c0:	sub	r0, r0, r1
   198c4:	str	r0, [sp, #44]	; 0x2c
   198c8:	bl	11ca8 <__errno_location@plt>
   198cc:	str	r0, [sp, #36]	; 0x24
   198d0:	mov	r0, #0
   198d4:	mov	r7, #0
   198d8:	mov	r4, #0
   198dc:	str	r8, [sp, #24]
   198e0:	str	sl, [sp, #32]
   198e4:	str	r0, [sp, #48]	; 0x30
   198e8:	mov	r0, #0
   198ec:	str	r0, [sp, #8]
   198f0:	mov	r0, #0
   198f4:	str	r0, [sp, #16]
   198f8:	ldr	r0, [sp, #36]	; 0x24
   198fc:	str	r7, [fp, #-36]	; 0xffffffdc
   19900:	str	r5, [r0]
   19904:	mov	r0, r6
   19908:	bl	11da4 <readdir64@plt>
   1990c:	cmp	r0, #0
   19910:	beq	19da8 <__assert_fail@plt+0x7f14>
   19914:	mov	r9, r0
   19918:	ldrb	r0, [sl]
   1991c:	str	r4, [fp, #-40]	; 0xffffffd8
   19920:	mov	r1, sl
   19924:	add	r4, r9, #19
   19928:	tst	r0, #32
   1992c:	ldrbeq	r0, [r4]
   19930:	cmpeq	r0, #46	; 0x2e
   19934:	beq	19a30 <__assert_fail@plt+0x7b9c>
   19938:	mov	r0, r4
   1993c:	bl	11c78 <strlen@plt>
   19940:	mov	r5, r0
   19944:	add	r0, r0, #176	; 0xb0
   19948:	bic	r0, r0, #7
   1994c:	bl	36fb4 <__assert_fail@plt+0x25120>
   19950:	mov	r6, r0
   19954:	cmp	r0, #0
   19958:	beq	19f64 <__assert_fail@plt+0x80d0>
   1995c:	add	sl, r6, #168	; 0xa8
   19960:	mov	r1, r4
   19964:	mov	r2, r5
   19968:	mov	r0, sl
   1996c:	bl	11a8c <memcpy@plt>
   19970:	ldr	r2, [sp, #52]	; 0x34
   19974:	mov	r0, #0
   19978:	mov	r1, #196608	; 0x30000
   1997c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   19980:	strb	r0, [sl, r5]
   19984:	str	r5, [r6, #52]	; 0x34
   19988:	str	r2, [r6, #44]	; 0x2c
   1998c:	add	r7, r5, r3
   19990:	ldr	r4, [r2, #24]
   19994:	str	r1, [r6, #58]	; 0x3a
   19998:	str	r0, [r6, #12]
   1999c:	str	r0, [r6, #16]
   199a0:	str	r0, [r6, #20]
   199a4:	str	r4, [r6, #28]
   199a8:	str	r0, [r6, #32]
   199ac:	ldr	r0, [sp, #44]	; 0x2c
   199b0:	cmp	r5, r0
   199b4:	bcs	199cc <__assert_fail@plt+0x7b38>
   199b8:	ldr	r4, [fp, #-40]	; 0xffffffd8
   199bc:	mov	r5, r2
   199c0:	cmp	r7, r3
   199c4:	bcs	19a84 <__assert_fail@plt+0x7bf0>
   199c8:	b	19e08 <__assert_fail@plt+0x7f74>
   199cc:	ldr	r1, [r2, #36]	; 0x24
   199d0:	movw	r0, #257	; 0x101
   199d4:	mov	r5, r2
   199d8:	add	r0, r7, r0
   199dc:	adds	r1, r0, r1
   199e0:	bcs	19f10 <__assert_fail@plt+0x807c>
   199e4:	mov	r0, r4
   199e8:	str	r1, [r5, #36]	; 0x24
   199ec:	bl	36fe4 <__assert_fail@plt+0x25150>
   199f0:	cmp	r0, #0
   199f4:	beq	19f50 <__assert_fail@plt+0x80bc>
   199f8:	cmp	r0, r4
   199fc:	str	r0, [r5, #24]
   19a00:	beq	19a68 <__assert_fail@plt+0x7bd4>
   19a04:	ldr	r1, [sp, #32]
   19a08:	ldr	r3, [fp, #-44]	; 0xffffffd4
   19a0c:	ldr	r4, [fp, #-40]	; 0xffffffd8
   19a10:	ldrb	r1, [r1]
   19a14:	tst	r1, #4
   19a18:	ldr	r1, [sp, #40]	; 0x28
   19a1c:	addne	r1, r0, r3
   19a20:	mov	r0, #1
   19a24:	str	r1, [sp, #40]	; 0x28
   19a28:	str	r0, [sp, #16]
   19a2c:	b	19a70 <__assert_fail@plt+0x7bdc>
   19a30:	ldrb	r0, [r9, #20]
   19a34:	cmp	r0, #0
   19a38:	beq	19a4c <__assert_fail@plt+0x7bb8>
   19a3c:	cmp	r0, #46	; 0x2e
   19a40:	ldrbeq	r0, [r9, #21]
   19a44:	cmpeq	r0, #0
   19a48:	bne	19938 <__assert_fail@plt+0x7aa4>
   19a4c:	ldr	r4, [fp, #-40]	; 0xffffffd8
   19a50:	ldr	r7, [fp, #-36]	; 0xffffffdc
   19a54:	mov	r5, #0
   19a58:	ldr	r6, [r8, #12]
   19a5c:	cmp	r6, #0
   19a60:	bne	198f8 <__assert_fail@plt+0x7a64>
   19a64:	b	19c28 <__assert_fail@plt+0x7d94>
   19a68:	ldr	r4, [fp, #-40]	; 0xffffffd8
   19a6c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   19a70:	ldr	r0, [r5, #36]	; 0x24
   19a74:	sub	r0, r0, r3
   19a78:	str	r0, [sp, #44]	; 0x2c
   19a7c:	cmp	r7, r3
   19a80:	bcc	19e08 <__assert_fail@plt+0x7f74>
   19a84:	ldr	r0, [sp, #20]
   19a88:	str	r0, [r6, #48]	; 0x30
   19a8c:	ldr	r0, [r5]
   19a90:	str	r7, [r6, #40]	; 0x28
   19a94:	str	r0, [r6, #4]
   19a98:	ldrd	r0, [r9]
   19a9c:	strd	r0, [r6, #160]	; 0xa0
   19aa0:	ldrb	r0, [r5, #48]	; 0x30
   19aa4:	tst	r0, #4
   19aa8:	bne	19ab4 <__assert_fail@plt+0x7c20>
   19aac:	str	sl, [r6, #24]
   19ab0:	b	19ad0 <__assert_fail@plt+0x7c3c>
   19ab4:	ldr	r0, [r6, #28]
   19ab8:	ldr	r1, [r6, #52]	; 0x34
   19abc:	str	r0, [r6, #24]
   19ac0:	ldr	r0, [sp, #40]	; 0x28
   19ac4:	add	r2, r1, #1
   19ac8:	mov	r1, sl
   19acc:	bl	11a50 <memmove@plt>
   19ad0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   19ad4:	ldr	sl, [sp, #32]
   19ad8:	ldr	r8, [sp, #24]
   19adc:	ldr	r0, [r0]
   19ae0:	ldr	r2, [sl]
   19ae4:	cmp	r0, #0
   19ae8:	beq	19b14 <__assert_fail@plt+0x7c80>
   19aec:	ands	r0, r2, #1024	; 0x400
   19af0:	bne	19b14 <__assert_fail@plt+0x7c80>
   19af4:	mov	r0, r5
   19af8:	mov	r1, r6
   19afc:	mov	r2, #0
   19b00:	bl	184ac <__assert_fail@plt+0x6618>
   19b04:	ldr	r7, [fp, #-36]	; 0xffffffdc
   19b08:	mov	r5, #0
   19b0c:	strh	r0, [r6, #56]	; 0x38
   19b10:	b	19b8c <__assert_fail@plt+0x7cf8>
   19b14:	ldrb	r3, [r9, #18]
   19b18:	mov	r0, #0
   19b1c:	tst	r2, #8
   19b20:	mov	r1, #0
   19b24:	beq	19b48 <__assert_fail@plt+0x7cb4>
   19b28:	orr	r1, r3, #4
   19b2c:	cmp	r1, #4
   19b30:	mov	r1, #0
   19b34:	beq	19b48 <__assert_fail@plt+0x7cb4>
   19b38:	eor	r1, r3, #10
   19b3c:	and	r2, r2, #16
   19b40:	orrs	r1, r2, r1
   19b44:	movwne	r1, #1
   19b48:	mov	r2, #11
   19b4c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   19b50:	mov	r5, #0
   19b54:	strh	r2, [r6, #56]	; 0x38
   19b58:	sub	r2, r3, #1
   19b5c:	uxtb	r3, r2
   19b60:	cmp	r3, #11
   19b64:	sxtbls	r0, r2
   19b68:	movwls	r2, #41408	; 0xa1c0
   19b6c:	movtls	r2, #3
   19b70:	ldrls	r0, [r2, r0, lsl #2]
   19b74:	cmp	r1, #0
   19b78:	str	r0, [r6, #80]	; 0x50
   19b7c:	mov	r0, #2
   19b80:	movwne	r0, #1
   19b84:	str	r0, [r6, #112]	; 0x70
   19b88:	str	r5, [r6, #116]	; 0x74
   19b8c:	cmp	r7, #0
   19b90:	str	r5, [r6, #8]
   19b94:	ldrne	r0, [sp, #48]	; 0x30
   19b98:	moveq	r7, r6
   19b9c:	strne	r6, [r0, #8]
   19ba0:	movw	r0, #10000	; 0x2710
   19ba4:	cmp	r4, r0
   19ba8:	bne	19bfc <__assert_fail@plt+0x7d68>
   19bac:	ldr	r0, [fp, #-48]	; 0xffffffd0
   19bb0:	ldr	r0, [r0]
   19bb4:	cmp	r0, #0
   19bb8:	bne	19bfc <__assert_fail@plt+0x7d68>
   19bbc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   19bc0:	mov	r0, r8
   19bc4:	bl	1a46c <__assert_fail@plt+0x85d8>
   19bc8:	mov	r1, #0
   19bcc:	str	r1, [sp, #8]
   19bd0:	movw	r1, #19778	; 0x4d42
   19bd4:	movt	r1, #65363	; 0xff53
   19bd8:	cmp	r0, r1
   19bdc:	movwne	r1, #26985	; 0x6969
   19be0:	cmpne	r0, r1
   19be4:	beq	19bfc <__assert_fail@plt+0x7d68>
   19be8:	movw	r1, #6548	; 0x1994
   19bec:	movt	r1, #258	; 0x102
   19bf0:	cmp	r0, r1
   19bf4:	movne	r0, #1
   19bf8:	strne	r0, [sp, #8]
   19bfc:	ldr	r0, [sp, #28]
   19c00:	add	r4, r4, #1
   19c04:	cmp	r0, r4
   19c08:	mov	r0, #0
   19c0c:	movwls	r0, #15
   19c10:	cmp	r0, #0
   19c14:	bne	19e88 <__assert_fail@plt+0x7ff4>
   19c18:	str	r6, [sp, #48]	; 0x30
   19c1c:	ldr	r6, [r8, #12]
   19c20:	cmp	r6, #0
   19c24:	bne	198f8 <__assert_fail@plt+0x7a64>
   19c28:	ldr	r0, [sp, #16]
   19c2c:	ldr	ip, [sp]
   19c30:	ldr	r6, [sp, #8]
   19c34:	ldr	r5, [sp, #52]	; 0x34
   19c38:	tst	r0, #1
   19c3c:	beq	19c4c <__assert_fail@plt+0x7db8>
   19c40:	b	19ff4 <__assert_fail@plt+0x8160>
   19c44:	mov	r4, #0
   19c48:	mov	r6, #0
   19c4c:	ldrb	r0, [sl]
   19c50:	tst	r0, #4
   19c54:	beq	19c80 <__assert_fail@plt+0x7dec>
   19c58:	ldr	r2, [sp, #40]	; 0x28
   19c5c:	ldr	r0, [r5, #36]	; 0x24
   19c60:	ldr	r3, [fp, #-44]	; 0xffffffd4
   19c64:	cmp	r3, r0
   19c68:	sub	r1, r2, #1
   19c6c:	mov	r0, #0
   19c70:	moveq	r2, r1
   19c74:	cmp	r4, #0
   19c78:	moveq	r2, r1
   19c7c:	strb	r0, [r2]
   19c80:	ldr	r0, [sp, #12]
   19c84:	cmp	r0, #0
   19c88:	movwne	r0, #1
   19c8c:	orrs	r0, r0, ip
   19c90:	beq	19cf4 <__assert_fail@plt+0x7e60>
   19c94:	cmp	r4, #0
   19c98:	bne	19d34 <__assert_fail@plt+0x7ea0>
   19c9c:	ldr	r0, [sp, #4]
   19ca0:	cmp	r0, #3
   19ca4:	bne	19cbc <__assert_fail@plt+0x7e28>
   19ca8:	ldrh	r0, [r8, #56]	; 0x38
   19cac:	cmp	r0, #4
   19cb0:	cmpne	r0, #7
   19cb4:	movne	r0, #6
   19cb8:	strhne	r0, [r8, #56]	; 0x38
   19cbc:	mov	r6, #0
   19cc0:	cmp	r7, #0
   19cc4:	beq	19f04 <__assert_fail@plt+0x8070>
   19cc8:	ldrd	r4, [r7, #8]
   19ccc:	cmp	r5, #0
   19cd0:	beq	19cdc <__assert_fail@plt+0x7e48>
   19cd4:	mov	r0, r5
   19cd8:	bl	11e88 <closedir@plt>
   19cdc:	mov	r0, r7
   19ce0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   19ce4:	cmp	r4, #0
   19ce8:	mov	r7, r4
   19cec:	bne	19cc8 <__assert_fail@plt+0x7e34>
   19cf0:	b	19f04 <__assert_fail@plt+0x8070>
   19cf4:	ldr	r0, [sp, #4]
   19cf8:	cmp	r0, #1
   19cfc:	cmpne	r4, #0
   19d00:	bne	19d34 <__assert_fail@plt+0x7ea0>
   19d04:	ldr	r0, [r8, #48]	; 0x30
   19d08:	cmp	r0, #0
   19d0c:	beq	19eac <__assert_fail@plt+0x8018>
   19d10:	ldr	r1, [r8, #4]
   19d14:	movw	r3, #41391	; 0xa1af
   19d18:	mov	r0, r5
   19d1c:	mvn	r2, #0
   19d20:	movt	r3, #3
   19d24:	bl	19270 <__assert_fail@plt+0x73dc>
   19d28:	cmp	r0, #0
   19d2c:	bne	19ebc <__assert_fail@plt+0x8028>
   19d30:	b	19c94 <__assert_fail@plt+0x7e00>
   19d34:	tst	r6, #1
   19d38:	beq	19d70 <__assert_fail@plt+0x7edc>
   19d3c:	movw	r0, #42036	; 0xa434
   19d40:	mov	r1, r7
   19d44:	mov	r2, r4
   19d48:	movt	r0, #1
   19d4c:	str	r0, [r5, #44]	; 0x2c
   19d50:	mov	r0, r5
   19d54:	bl	18644 <__assert_fail@plt+0x67b0>
   19d58:	mov	r6, r0
   19d5c:	mov	r0, #0
   19d60:	str	r0, [r5, #44]	; 0x2c
   19d64:	mov	r0, r6
   19d68:	sub	sp, fp, #28
   19d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d70:	cmp	r4, #2
   19d74:	bcc	19f30 <__assert_fail@plt+0x809c>
   19d78:	ldr	r0, [fp, #-48]	; 0xffffffd0
   19d7c:	ldr	r0, [r0]
   19d80:	cmp	r0, #0
   19d84:	beq	19f40 <__assert_fail@plt+0x80ac>
   19d88:	mov	r0, r5
   19d8c:	mov	r1, r7
   19d90:	mov	r2, r4
   19d94:	bl	18644 <__assert_fail@plt+0x67b0>
   19d98:	mov	r6, r0
   19d9c:	mov	r0, r6
   19da0:	sub	sp, fp, #28
   19da4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19da8:	ldr	r0, [sp, #36]	; 0x24
   19dac:	ldr	r0, [r0]
   19db0:	cmp	r0, #0
   19db4:	beq	19dd0 <__assert_fail@plt+0x7f3c>
   19db8:	str	r0, [r8, #32]
   19dbc:	ldr	r0, [sp, #12]
   19dc0:	orrs	r0, r0, r4
   19dc4:	mov	r0, #4
   19dc8:	movwne	r0, #7
   19dcc:	strh	r0, [r8, #56]	; 0x38
   19dd0:	ldr	r0, [r8, #12]
   19dd4:	ldr	r6, [sp, #8]
   19dd8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   19ddc:	ldr	r5, [sp, #52]	; 0x34
   19de0:	cmp	r0, #0
   19de4:	beq	19fe4 <__assert_fail@plt+0x8150>
   19de8:	bl	11e88 <closedir@plt>
   19dec:	mov	r0, #0
   19df0:	ldr	ip, [sp]
   19df4:	str	r0, [r8, #12]
   19df8:	ldr	r0, [sp, #16]
   19dfc:	tst	r0, #1
   19e00:	beq	19c4c <__assert_fail@plt+0x7db8>
   19e04:	b	19ff4 <__assert_fail@plt+0x8160>
   19e08:	mov	r0, r6
   19e0c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   19e10:	ldr	r6, [fp, #-36]	; 0xffffffdc
   19e14:	ldr	r7, [sp, #24]
   19e18:	cmp	r6, #0
   19e1c:	beq	19e48 <__assert_fail@plt+0x7fb4>
   19e20:	ldrd	r4, [r6, #8]
   19e24:	cmp	r5, #0
   19e28:	beq	19e34 <__assert_fail@plt+0x7fa0>
   19e2c:	mov	r0, r5
   19e30:	bl	11e88 <closedir@plt>
   19e34:	mov	r0, r6
   19e38:	bl	17b10 <__assert_fail@plt+0x5c7c>
   19e3c:	cmp	r4, #0
   19e40:	mov	r6, r4
   19e44:	bne	19e20 <__assert_fail@plt+0x7f8c>
   19e48:	ldr	r0, [r7, #12]
   19e4c:	bl	11e88 <closedir@plt>
   19e50:	ldr	r1, [sp, #32]
   19e54:	mov	r6, #0
   19e58:	mov	r0, #7
   19e5c:	str	r6, [r7, #12]
   19e60:	strh	r0, [r7, #56]	; 0x38
   19e64:	ldr	r0, [r1]
   19e68:	orr	r0, r0, #8192	; 0x2000
   19e6c:	str	r0, [r1]
   19e70:	ldr	r1, [sp, #36]	; 0x24
   19e74:	mov	r0, #36	; 0x24
   19e78:	str	r0, [r1]
   19e7c:	mov	r0, r6
   19e80:	sub	sp, fp, #28
   19e84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e88:	ldr	ip, [sp]
   19e8c:	cmp	r0, #15
   19e90:	bne	1a0cc <__assert_fail@plt+0x8238>
   19e94:	ldr	r6, [sp, #8]
   19e98:	ldr	r5, [sp, #52]	; 0x34
   19e9c:	ldr	r0, [sp, #16]
   19ea0:	tst	r0, #1
   19ea4:	beq	19c4c <__assert_fail@plt+0x7db8>
   19ea8:	b	19ff4 <__assert_fail@plt+0x8160>
   19eac:	mov	r0, r5
   19eb0:	bl	1a0f4 <__assert_fail@plt+0x8260>
   19eb4:	cmp	r0, #0
   19eb8:	beq	19c94 <__assert_fail@plt+0x7e00>
   19ebc:	mov	r0, #7
   19ec0:	mov	r6, #0
   19ec4:	cmp	r7, #0
   19ec8:	strh	r0, [r8, #56]	; 0x38
   19ecc:	ldr	r0, [sl]
   19ed0:	orr	r0, r0, #8192	; 0x2000
   19ed4:	str	r0, [sl]
   19ed8:	beq	19f04 <__assert_fail@plt+0x8070>
   19edc:	ldrd	r4, [r7, #8]
   19ee0:	cmp	r5, #0
   19ee4:	beq	19ef0 <__assert_fail@plt+0x805c>
   19ee8:	mov	r0, r5
   19eec:	bl	11e88 <closedir@plt>
   19ef0:	mov	r0, r7
   19ef4:	bl	17b10 <__assert_fail@plt+0x5c7c>
   19ef8:	cmp	r4, #0
   19efc:	mov	r7, r4
   19f00:	bne	19edc <__assert_fail@plt+0x8048>
   19f04:	mov	r0, r6
   19f08:	sub	sp, fp, #28
   19f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f10:	mov	r0, r4
   19f14:	bl	17b10 <__assert_fail@plt+0x5c7c>
   19f18:	ldr	r1, [sp, #36]	; 0x24
   19f1c:	mov	r0, #0
   19f20:	str	r0, [r5, #24]
   19f24:	mov	r0, #36	; 0x24
   19f28:	str	r0, [r1]
   19f2c:	b	19f60 <__assert_fail@plt+0x80cc>
   19f30:	mov	r6, r7
   19f34:	mov	r0, r6
   19f38:	sub	sp, fp, #28
   19f3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f40:	mov	r6, r7
   19f44:	mov	r0, r6
   19f48:	sub	sp, fp, #28
   19f4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f50:	ldr	r0, [r5, #24]
   19f54:	bl	17b10 <__assert_fail@plt+0x5c7c>
   19f58:	mov	r0, #0
   19f5c:	str	r0, [r5, #24]
   19f60:	ldr	r8, [sp, #24]
   19f64:	ldr	r0, [sp, #36]	; 0x24
   19f68:	ldr	r4, [r0]
   19f6c:	mov	r0, r6
   19f70:	bl	17b10 <__assert_fail@plt+0x5c7c>
   19f74:	ldr	r5, [fp, #-36]	; 0xffffffdc
   19f78:	cmp	r5, #0
   19f7c:	beq	19fa8 <__assert_fail@plt+0x8114>
   19f80:	ldrd	r6, [r5, #8]
   19f84:	cmp	r7, #0
   19f88:	beq	19f94 <__assert_fail@plt+0x8100>
   19f8c:	mov	r0, r7
   19f90:	bl	11e88 <closedir@plt>
   19f94:	mov	r0, r5
   19f98:	bl	17b10 <__assert_fail@plt+0x5c7c>
   19f9c:	cmp	r6, #0
   19fa0:	mov	r5, r6
   19fa4:	bne	19f80 <__assert_fail@plt+0x80ec>
   19fa8:	ldr	r0, [r8, #12]
   19fac:	bl	11e88 <closedir@plt>
   19fb0:	ldr	r1, [sp, #32]
   19fb4:	mov	r6, #0
   19fb8:	mov	r0, #7
   19fbc:	str	r6, [r8, #12]
   19fc0:	strh	r0, [r8, #56]	; 0x38
   19fc4:	ldr	r0, [r1]
   19fc8:	orr	r0, r0, #8192	; 0x2000
   19fcc:	str	r0, [r1]
   19fd0:	ldr	r0, [sp, #36]	; 0x24
   19fd4:	str	r4, [r0]
   19fd8:	mov	r0, r6
   19fdc:	sub	sp, fp, #28
   19fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fe4:	ldr	ip, [sp]
   19fe8:	ldr	r0, [sp, #16]
   19fec:	tst	r0, #1
   19ff0:	beq	19c4c <__assert_fail@plt+0x7db8>
   19ff4:	ldr	r1, [r5, #4]
   19ff8:	ldr	r0, [r5, #24]
   19ffc:	cmp	r1, #0
   1a000:	beq	1a030 <__assert_fail@plt+0x819c>
   1a004:	ldr	r2, [r1, #24]
   1a008:	add	r3, r1, #168	; 0xa8
   1a00c:	cmp	r2, r3
   1a010:	ldrne	r3, [r1, #28]
   1a014:	subne	r2, r2, r3
   1a018:	addne	r2, r0, r2
   1a01c:	strne	r2, [r1, #24]
   1a020:	str	r0, [r1, #28]
   1a024:	ldr	r1, [r1, #8]
   1a028:	cmp	r1, #0
   1a02c:	bne	1a004 <__assert_fail@plt+0x8170>
   1a030:	ldr	r1, [r7, #48]	; 0x30
   1a034:	cmp	r1, #0
   1a038:	blt	19c4c <__assert_fail@plt+0x7db8>
   1a03c:	mov	r1, r7
   1a040:	ldr	r2, [r1, #24]
   1a044:	add	r3, r1, #168	; 0xa8
   1a048:	cmp	r2, r3
   1a04c:	ldrne	r3, [r1, #28]
   1a050:	subne	r2, r2, r3
   1a054:	addne	r2, r0, r2
   1a058:	strne	r2, [r1, #24]
   1a05c:	str	r0, [r1, #28]
   1a060:	ldr	r2, [r1, #8]
   1a064:	cmp	r2, #0
   1a068:	ldreq	r2, [r1, #4]
   1a06c:	ldr	r1, [r2, #48]	; 0x30
   1a070:	cmn	r1, #1
   1a074:	mov	r1, r2
   1a078:	bgt	1a040 <__assert_fail@plt+0x81ac>
   1a07c:	b	19c4c <__assert_fail@plt+0x7db8>
   1a080:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1a084:	mov	r0, r8
   1a088:	bl	1a46c <__assert_fail@plt+0x85d8>
   1a08c:	movw	r1, #26984	; 0x6968
   1a090:	cmp	r0, r1
   1a094:	ble	1a0dc <__assert_fail@plt+0x8248>
   1a098:	movw	r1, #26985	; 0x6969
   1a09c:	cmp	r0, r1
   1a0a0:	movwne	r1, #16719	; 0x414f
   1a0a4:	movtne	r1, #21318	; 0x5346
   1a0a8:	cmpne	r0, r1
   1a0ac:	beq	19790 <__assert_fail@plt+0x78fc>
   1a0b0:	movw	r1, #40864	; 0x9fa0
   1a0b4:	cmp	r0, r1
   1a0b8:	beq	19790 <__assert_fail@plt+0x78fc>
   1a0bc:	b	19760 <__assert_fail@plt+0x78cc>
   1a0c0:	bl	11ca8 <__errno_location@plt>
   1a0c4:	mov	r1, #12
   1a0c8:	str	r1, [r0]
   1a0cc:	mov	r6, #0
   1a0d0:	mov	r0, r6
   1a0d4:	sub	sp, fp, #28
   1a0d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0dc:	movw	r1, #19778	; 0x4d42
   1a0e0:	movt	r1, #65363	; 0xff53
   1a0e4:	cmp	r0, r1
   1a0e8:	cmpne	r0, #0
   1a0ec:	beq	19790 <__assert_fail@plt+0x78fc>
   1a0f0:	b	19760 <__assert_fail@plt+0x78cc>
   1a0f4:	push	{r4, r5, fp, lr}
   1a0f8:	add	fp, sp, #8
   1a0fc:	mov	r5, r0
   1a100:	ldr	r0, [r0, #48]	; 0x30
   1a104:	mov	r4, #0
   1a108:	tst	r0, #4
   1a10c:	bne	1a150 <__assert_fail@plt+0x82bc>
   1a110:	tst	r0, #512	; 0x200
   1a114:	bne	1a130 <__assert_fail@plt+0x829c>
   1a118:	ldr	r0, [r5, #28]
   1a11c:	bl	11dd4 <fchdir@plt>
   1a120:	mov	r4, r0
   1a124:	cmp	r0, #0
   1a128:	movwne	r4, #1
   1a12c:	b	1a150 <__assert_fail@plt+0x82bc>
   1a130:	ldr	r1, [r5, #32]
   1a134:	add	r0, r5, #60	; 0x3c
   1a138:	bl	1c564 <__assert_fail@plt+0xa6d0>
   1a13c:	cmp	r0, #0
   1a140:	blt	1a148 <__assert_fail@plt+0x82b4>
   1a144:	bl	11e70 <close@plt>
   1a148:	mvn	r0, #99	; 0x63
   1a14c:	str	r0, [r5, #32]
   1a150:	add	r5, r5, #60	; 0x3c
   1a154:	b	1a15c <__assert_fail@plt+0x82c8>
   1a158:	bl	11e70 <close@plt>
   1a15c:	mov	r0, r5
   1a160:	bl	1c55c <__assert_fail@plt+0xa6c8>
   1a164:	cmp	r0, #0
   1a168:	movne	r0, r4
   1a16c:	popne	{r4, r5, fp, pc}
   1a170:	mov	r0, r5
   1a174:	bl	1c5b0 <__assert_fail@plt+0xa71c>
   1a178:	cmp	r0, #0
   1a17c:	bge	1a158 <__assert_fail@plt+0x82c4>
   1a180:	b	1a15c <__assert_fail@plt+0x82c8>
   1a184:	cmp	r2, #5
   1a188:	movcc	r0, #0
   1a18c:	strhcc	r2, [r1, #60]	; 0x3c
   1a190:	bxcc	lr
   1a194:	push	{fp, lr}
   1a198:	mov	fp, sp
   1a19c:	bl	11ca8 <__errno_location@plt>
   1a1a0:	mov	r1, #22
   1a1a4:	str	r1, [r0]
   1a1a8:	mov	r0, #1
   1a1ac:	pop	{fp, pc}
   1a1b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1b4:	add	fp, sp, #28
   1a1b8:	sub	sp, sp, #4
   1a1bc:	mov	r9, r0
   1a1c0:	orr	r0, r1, #4096	; 0x1000
   1a1c4:	cmp	r0, #4096	; 0x1000
   1a1c8:	bne	1a210 <__assert_fail@plt+0x837c>
   1a1cc:	ldr	r8, [r9]
   1a1d0:	mov	r7, r1
   1a1d4:	bl	11ca8 <__errno_location@plt>
   1a1d8:	mov	r5, #0
   1a1dc:	mov	sl, r0
   1a1e0:	str	r5, [r0]
   1a1e4:	ldrb	r0, [r9, #49]	; 0x31
   1a1e8:	tst	r0, #32
   1a1ec:	bne	1a204 <__assert_fail@plt+0x8370>
   1a1f0:	ldrh	r0, [r8, #56]	; 0x38
   1a1f4:	cmp	r0, #1
   1a1f8:	beq	1a22c <__assert_fail@plt+0x8398>
   1a1fc:	cmp	r0, #9
   1a200:	ldreq	r5, [r8, #8]
   1a204:	mov	r0, r5
   1a208:	sub	sp, fp, #28
   1a20c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a210:	bl	11ca8 <__errno_location@plt>
   1a214:	mov	r1, #22
   1a218:	mov	r5, #0
   1a21c:	str	r1, [r0]
   1a220:	mov	r0, r5
   1a224:	sub	sp, fp, #28
   1a228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a22c:	ldr	r6, [r9, #4]
   1a230:	cmp	r6, #0
   1a234:	beq	1a264 <__assert_fail@plt+0x83d0>
   1a238:	ldr	r4, [r6, #8]
   1a23c:	ldr	r1, [r6, #12]
   1a240:	cmp	r1, #0
   1a244:	beq	1a250 <__assert_fail@plt+0x83bc>
   1a248:	mov	r0, r1
   1a24c:	bl	11e88 <closedir@plt>
   1a250:	mov	r0, r6
   1a254:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1a258:	cmp	r4, #0
   1a25c:	mov	r6, r4
   1a260:	bne	1a238 <__assert_fail@plt+0x83a4>
   1a264:	cmp	r7, #4096	; 0x1000
   1a268:	mov	r4, #1
   1a26c:	ldreq	r0, [r9, #48]	; 0x30
   1a270:	moveq	r4, #2
   1a274:	orreq	r0, r0, #4096	; 0x1000
   1a278:	streq	r0, [r9, #48]	; 0x30
   1a27c:	ldr	r0, [r8, #48]	; 0x30
   1a280:	cmp	r0, #0
   1a284:	bne	1a2dc <__assert_fail@plt+0x8448>
   1a288:	ldr	r0, [r8, #24]
   1a28c:	ldrb	r0, [r0]
   1a290:	cmp	r0, #47	; 0x2f
   1a294:	beq	1a2dc <__assert_fail@plt+0x8448>
   1a298:	ldr	r0, [r9, #48]	; 0x30
   1a29c:	tst	r0, #4
   1a2a0:	bne	1a2dc <__assert_fail@plt+0x8448>
   1a2a4:	mov	r1, #32768	; 0x8000
   1a2a8:	tst	r0, #512	; 0x200
   1a2ac:	and	r1, r1, r0, lsl #11
   1a2b0:	orr	r1, r1, #18688	; 0x4900
   1a2b4:	orr	r2, r1, #524288	; 0x80000
   1a2b8:	bne	1a2fc <__assert_fail@plt+0x8468>
   1a2bc:	movw	r0, #41392	; 0xa1b0
   1a2c0:	mov	r1, r2
   1a2c4:	movt	r0, #3
   1a2c8:	bl	38008 <__assert_fail@plt+0x26174>
   1a2cc:	mov	r8, r0
   1a2d0:	cmn	r0, #1
   1a2d4:	bgt	1a318 <__assert_fail@plt+0x8484>
   1a2d8:	b	1a360 <__assert_fail@plt+0x84cc>
   1a2dc:	mov	r0, r9
   1a2e0:	mov	r1, r4
   1a2e4:	bl	19518 <__assert_fail@plt+0x7684>
   1a2e8:	mov	r5, r0
   1a2ec:	str	r0, [r9, #4]
   1a2f0:	mov	r0, r5
   1a2f4:	sub	sp, fp, #28
   1a2f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2fc:	ldr	r0, [r9, #32]
   1a300:	movw	r1, #41392	; 0xa1b0
   1a304:	movt	r1, #3
   1a308:	bl	1d9a0 <__assert_fail@plt+0xbb0c>
   1a30c:	mov	r8, r0
   1a310:	cmn	r0, #1
   1a314:	ble	1a360 <__assert_fail@plt+0x84cc>
   1a318:	mov	r0, r9
   1a31c:	mov	r1, r4
   1a320:	bl	19518 <__assert_fail@plt+0x7684>
   1a324:	str	r0, [r9, #4]
   1a328:	ldrb	r0, [r9, #49]	; 0x31
   1a32c:	tst	r0, #2
   1a330:	bne	1a374 <__assert_fail@plt+0x84e0>
   1a334:	mov	r0, r8
   1a338:	bl	11dd4 <fchdir@plt>
   1a33c:	cmp	r0, #0
   1a340:	beq	1a3b0 <__assert_fail@plt+0x851c>
   1a344:	ldr	r4, [sl]
   1a348:	mov	r0, r8
   1a34c:	bl	11e70 <close@plt>
   1a350:	str	r4, [sl]
   1a354:	mov	r0, r5
   1a358:	sub	sp, fp, #28
   1a35c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a360:	mov	r5, #0
   1a364:	str	r5, [r9, #4]
   1a368:	mov	r0, r5
   1a36c:	sub	sp, fp, #28
   1a370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a374:	ldr	r1, [r9, #32]
   1a378:	cmp	r1, r8
   1a37c:	bne	1a388 <__assert_fail@plt+0x84f4>
   1a380:	cmn	r1, #100	; 0x64
   1a384:	bne	1a3c8 <__assert_fail@plt+0x8534>
   1a388:	add	r0, r9, #60	; 0x3c
   1a38c:	bl	1c564 <__assert_fail@plt+0xa6d0>
   1a390:	cmp	r0, #0
   1a394:	blt	1a39c <__assert_fail@plt+0x8508>
   1a398:	bl	11e70 <close@plt>
   1a39c:	str	r8, [r9, #32]
   1a3a0:	ldr	r5, [r9, #4]
   1a3a4:	mov	r0, r5
   1a3a8:	sub	sp, fp, #28
   1a3ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a3b0:	mov	r0, r8
   1a3b4:	bl	11e70 <close@plt>
   1a3b8:	ldr	r5, [r9, #4]
   1a3bc:	mov	r0, r5
   1a3c0:	sub	sp, fp, #28
   1a3c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a3c8:	bl	11e58 <abort@plt>
   1a3cc:	push	{fp, lr}
   1a3d0:	mov	fp, sp
   1a3d4:	mov	r2, r1
   1a3d8:	ldrd	r0, [r0, #8]
   1a3dc:	mov	r3, #0
   1a3e0:	bl	3877c <__assert_fail@plt+0x268e8>
   1a3e4:	mov	r0, r2
   1a3e8:	pop	{fp, pc}
   1a3ec:	push	{r4, r5, fp, lr}
   1a3f0:	add	fp, sp, #8
   1a3f4:	ldrd	r2, [r1, #8]
   1a3f8:	ldrd	r4, [r0, #8]
   1a3fc:	eor	r3, r5, r3
   1a400:	eor	r2, r4, r2
   1a404:	orrs	r2, r2, r3
   1a408:	mov	r2, #0
   1a40c:	bne	1a42c <__assert_fail@plt+0x8598>
   1a410:	ldrd	r2, [r1]
   1a414:	ldrd	r0, [r0]
   1a418:	eor	r1, r1, r3
   1a41c:	eor	r0, r0, r2
   1a420:	orr	r0, r0, r1
   1a424:	clz	r0, r0
   1a428:	lsr	r2, r0, #5
   1a42c:	mov	r0, r2
   1a430:	pop	{r4, r5, fp, pc}
   1a434:	push	{r4, r5, fp, lr}
   1a438:	add	fp, sp, #8
   1a43c:	ldr	r0, [r0]
   1a440:	ldrd	r2, [r0, #160]	; 0xa0
   1a444:	ldr	r0, [r1]
   1a448:	ldrd	r4, [r0, #160]	; 0xa0
   1a44c:	mov	r0, #0
   1a450:	subs	r1, r4, r2
   1a454:	sbcs	r1, r5, r3
   1a458:	movwcc	r0, #1
   1a45c:	subs	r1, r2, r4
   1a460:	sbcs	r1, r3, r5
   1a464:	subcc	r0, r0, #1
   1a468:	pop	{r4, r5, fp, pc}
   1a46c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a470:	add	fp, sp, #24
   1a474:	sub	sp, sp, #96	; 0x60
   1a478:	ldr	r7, [r0, #44]	; 0x2c
   1a47c:	mov	r4, r0
   1a480:	mov	r5, #0
   1a484:	ldrb	r0, [r7, #49]	; 0x31
   1a488:	tst	r0, #2
   1a48c:	beq	1a53c <__assert_fail@plt+0x86a8>
   1a490:	ldr	r6, [r7, #52]	; 0x34
   1a494:	mov	r9, r1
   1a498:	cmp	r6, #0
   1a49c:	bne	1a4dc <__assert_fail@plt+0x8648>
   1a4a0:	movw	r0, #31504	; 0x7b10
   1a4a4:	movw	r2, #42408	; 0xa5a8
   1a4a8:	movw	r3, #42440	; 0xa5c8
   1a4ac:	mov	r1, #0
   1a4b0:	mov	r8, #0
   1a4b4:	movt	r0, #1
   1a4b8:	movt	r2, #1
   1a4bc:	movt	r3, #1
   1a4c0:	str	r0, [sp]
   1a4c4:	mov	r0, #13
   1a4c8:	bl	1aa88 <__assert_fail@plt+0x8bf4>
   1a4cc:	mov	r6, r0
   1a4d0:	cmp	r0, #0
   1a4d4:	str	r0, [r7, #52]	; 0x34
   1a4d8:	beq	1a51c <__assert_fail@plt+0x8688>
   1a4dc:	ldrd	r0, [r4, #64]	; 0x40
   1a4e0:	str	r1, [sp, #12]
   1a4e4:	str	r0, [sp, #8]
   1a4e8:	add	r1, sp, #8
   1a4ec:	mov	r0, r6
   1a4f0:	bl	1a7c0 <__assert_fail@plt+0x892c>
   1a4f4:	cmp	r0, #0
   1a4f8:	beq	1a50c <__assert_fail@plt+0x8678>
   1a4fc:	ldr	r5, [r0, #8]
   1a500:	mov	r0, r5
   1a504:	sub	sp, fp, #24
   1a508:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a50c:	mov	r8, #1
   1a510:	cmp	r9, #0
   1a514:	bge	1a528 <__assert_fail@plt+0x8694>
   1a518:	b	1a53c <__assert_fail@plt+0x86a8>
   1a51c:	mov	r6, #0
   1a520:	cmp	r9, #0
   1a524:	blt	1a53c <__assert_fail@plt+0x86a8>
   1a528:	add	r1, sp, #8
   1a52c:	mov	r0, r9
   1a530:	bl	119a8 <fstatfs64@plt>
   1a534:	cmp	r0, #0
   1a538:	beq	1a548 <__assert_fail@plt+0x86b4>
   1a53c:	mov	r0, r5
   1a540:	sub	sp, fp, #24
   1a544:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a548:	cmp	r8, #0
   1a54c:	beq	1a598 <__assert_fail@plt+0x8704>
   1a550:	mov	r0, #16
   1a554:	bl	36fb4 <__assert_fail@plt+0x25120>
   1a558:	cmp	r0, #0
   1a55c:	beq	1a598 <__assert_fail@plt+0x8704>
   1a560:	mov	r5, r0
   1a564:	ldrd	r0, [r4, #64]	; 0x40
   1a568:	ldr	r2, [sp, #8]
   1a56c:	stm	r5, {r0, r1, r2}
   1a570:	mov	r0, r6
   1a574:	mov	r1, r5
   1a578:	bl	1b6c0 <__assert_fail@plt+0x982c>
   1a57c:	cmp	r0, #0
   1a580:	beq	1a590 <__assert_fail@plt+0x86fc>
   1a584:	cmp	r0, r5
   1a588:	beq	1a598 <__assert_fail@plt+0x8704>
   1a58c:	bl	11e58 <abort@plt>
   1a590:	mov	r0, r5
   1a594:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1a598:	ldr	r5, [sp, #8]
   1a59c:	mov	r0, r5
   1a5a0:	sub	sp, fp, #24
   1a5a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a5a8:	push	{fp, lr}
   1a5ac:	mov	fp, sp
   1a5b0:	mov	r2, r1
   1a5b4:	ldrd	r0, [r0]
   1a5b8:	mov	r3, #0
   1a5bc:	bl	3877c <__assert_fail@plt+0x268e8>
   1a5c0:	mov	r0, r2
   1a5c4:	pop	{fp, pc}
   1a5c8:	ldrd	r2, [r1]
   1a5cc:	ldrd	r0, [r0]
   1a5d0:	eor	r1, r1, r3
   1a5d4:	eor	r0, r0, r2
   1a5d8:	orr	r0, r0, r1
   1a5dc:	clz	r0, r0
   1a5e0:	lsr	r0, r0, #5
   1a5e4:	bx	lr
   1a5e8:	ldr	r0, [r0, #8]
   1a5ec:	bx	lr
   1a5f0:	ldr	r0, [r0, #12]
   1a5f4:	bx	lr
   1a5f8:	ldr	r0, [r0, #16]
   1a5fc:	bx	lr
   1a600:	ldm	r0, {r2, ip}
   1a604:	mov	r0, #0
   1a608:	cmp	r2, ip
   1a60c:	bxcs	lr
   1a610:	mov	r0, #0
   1a614:	ldr	r1, [r2]
   1a618:	cmp	r1, #0
   1a61c:	beq	1a640 <__assert_fail@plt+0x87ac>
   1a620:	mov	r3, #0
   1a624:	mov	r1, r2
   1a628:	ldr	r1, [r1, #4]
   1a62c:	add	r3, r3, #1
   1a630:	cmp	r1, #0
   1a634:	bne	1a628 <__assert_fail@plt+0x8794>
   1a638:	cmp	r3, r0
   1a63c:	movhi	r0, r3
   1a640:	add	r2, r2, #8
   1a644:	cmp	r2, ip
   1a648:	bcc	1a614 <__assert_fail@plt+0x8780>
   1a64c:	bx	lr
   1a650:	push	{fp, lr}
   1a654:	mov	fp, sp
   1a658:	ldm	r0, {r3, ip}
   1a65c:	mov	lr, #0
   1a660:	mov	r1, #0
   1a664:	cmp	r3, ip
   1a668:	bcs	1a6a4 <__assert_fail@plt+0x8810>
   1a66c:	mov	r1, #0
   1a670:	mov	lr, #0
   1a674:	ldr	r2, [r3]
   1a678:	cmp	r2, #0
   1a67c:	beq	1a698 <__assert_fail@plt+0x8804>
   1a680:	mov	r2, r3
   1a684:	ldr	r2, [r2, #4]
   1a688:	add	r1, r1, #1
   1a68c:	cmp	r2, #0
   1a690:	bne	1a684 <__assert_fail@plt+0x87f0>
   1a694:	add	lr, lr, #1
   1a698:	add	r3, r3, #8
   1a69c:	cmp	r3, ip
   1a6a0:	bcc	1a674 <__assert_fail@plt+0x87e0>
   1a6a4:	ldr	r2, [r0, #12]
   1a6a8:	cmp	lr, r2
   1a6ac:	bne	1a6c4 <__assert_fail@plt+0x8830>
   1a6b0:	ldr	r2, [r0, #16]
   1a6b4:	mov	r0, #1
   1a6b8:	cmp	r1, r2
   1a6bc:	movne	r0, #0
   1a6c0:	pop	{fp, pc}
   1a6c4:	mov	r0, #0
   1a6c8:	pop	{fp, pc}
   1a6cc:	nop	{0}
   1a6d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a6d4:	add	fp, sp, #24
   1a6d8:	sub	sp, sp, #8
   1a6dc:	ldr	r6, [r0]
   1a6e0:	ldmib	r0, {r2, r7, r8}
   1a6e4:	ldr	r3, [r0, #16]
   1a6e8:	mov	r4, r1
   1a6ec:	mov	r5, #0
   1a6f0:	cmp	r6, r2
   1a6f4:	bcs	1a734 <__assert_fail@plt+0x88a0>
   1a6f8:	mov	r5, #0
   1a6fc:	ldr	r0, [r6]
   1a700:	cmp	r0, #0
   1a704:	beq	1a728 <__assert_fail@plt+0x8894>
   1a708:	mov	r0, #0
   1a70c:	mov	r1, r6
   1a710:	ldr	r1, [r1, #4]
   1a714:	add	r0, r0, #1
   1a718:	cmp	r1, #0
   1a71c:	bne	1a710 <__assert_fail@plt+0x887c>
   1a720:	cmp	r0, r5
   1a724:	movhi	r5, r0
   1a728:	add	r6, r6, #8
   1a72c:	cmp	r6, r2
   1a730:	bcc	1a6fc <__assert_fail@plt+0x8868>
   1a734:	movw	r2, #41456	; 0xa1f0
   1a738:	mov	r0, r4
   1a73c:	mov	r1, #1
   1a740:	movt	r2, #3
   1a744:	bl	11d08 <__fprintf_chk@plt>
   1a748:	movw	r2, #41480	; 0xa208
   1a74c:	mov	r0, r4
   1a750:	mov	r1, #1
   1a754:	mov	r3, r7
   1a758:	movt	r2, #3
   1a75c:	bl	11d08 <__fprintf_chk@plt>
   1a760:	vldr	d16, [pc, #80]	; 1a7b8 <__assert_fail@plt+0x8924>
   1a764:	vmov	s0, r8
   1a768:	movw	r2, #41504	; 0xa220
   1a76c:	mov	r0, r4
   1a770:	mov	r1, #1
   1a774:	mov	r3, r8
   1a778:	vcvt.f64.u32	d17, s0
   1a77c:	vmov	s0, r7
   1a780:	movt	r2, #3
   1a784:	vcvt.f64.u32	d18, s0
   1a788:	vmul.f64	d16, d17, d16
   1a78c:	vdiv.f64	d16, d16, d18
   1a790:	vstr	d16, [sp]
   1a794:	bl	11d08 <__fprintf_chk@plt>
   1a798:	movw	r2, #41537	; 0xa241
   1a79c:	mov	r0, r4
   1a7a0:	mov	r1, #1
   1a7a4:	mov	r3, r5
   1a7a8:	movt	r2, #3
   1a7ac:	sub	sp, fp, #24
   1a7b0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a7b4:	b	11d08 <__fprintf_chk@plt>
   1a7b8:	andeq	r0, r0, r0
   1a7bc:	subsmi	r0, r9, r0
   1a7c0:	push	{r4, r5, r6, r7, fp, lr}
   1a7c4:	add	fp, sp, #16
   1a7c8:	mov	r4, r1
   1a7cc:	ldr	r1, [r0, #8]
   1a7d0:	ldr	r2, [r0, #24]
   1a7d4:	mov	r5, r0
   1a7d8:	mov	r0, r4
   1a7dc:	blx	r2
   1a7e0:	ldr	r1, [r5, #8]
   1a7e4:	cmp	r0, r1
   1a7e8:	bcs	1a854 <__assert_fail@plt+0x89c0>
   1a7ec:	ldr	r7, [r5]
   1a7f0:	mov	r6, #0
   1a7f4:	ldr	r1, [r7, r0, lsl #3]!
   1a7f8:	cmp	r1, #0
   1a7fc:	cmpne	r7, #0
   1a800:	bne	1a810 <__assert_fail@plt+0x897c>
   1a804:	mov	r0, r6
   1a808:	pop	{r4, r5, r6, r7, fp, pc}
   1a80c:	ldr	r1, [r7]
   1a810:	cmp	r1, r4
   1a814:	beq	1a83c <__assert_fail@plt+0x89a8>
   1a818:	ldr	r2, [r5, #28]
   1a81c:	mov	r0, r4
   1a820:	blx	r2
   1a824:	cmp	r0, #0
   1a828:	bne	1a848 <__assert_fail@plt+0x89b4>
   1a82c:	ldr	r7, [r7, #4]
   1a830:	cmp	r7, #0
   1a834:	bne	1a80c <__assert_fail@plt+0x8978>
   1a838:	b	1a804 <__assert_fail@plt+0x8970>
   1a83c:	mov	r6, r4
   1a840:	mov	r0, r6
   1a844:	pop	{r4, r5, r6, r7, fp, pc}
   1a848:	ldr	r6, [r7]
   1a84c:	mov	r0, r6
   1a850:	pop	{r4, r5, r6, r7, fp, pc}
   1a854:	bl	11e58 <abort@plt>
   1a858:	ldr	r1, [r0, #16]
   1a85c:	cmp	r1, #0
   1a860:	moveq	r0, #0
   1a864:	bxeq	lr
   1a868:	ldm	r0, {r1, r2}
   1a86c:	cmp	r1, r2
   1a870:	bcs	1a888 <__assert_fail@plt+0x89f4>
   1a874:	ldr	r0, [r1], #8
   1a878:	cmp	r0, #0
   1a87c:	bxne	lr
   1a880:	cmp	r1, r2
   1a884:	bcc	1a874 <__assert_fail@plt+0x89e0>
   1a888:	push	{fp, lr}
   1a88c:	mov	fp, sp
   1a890:	bl	11e58 <abort@plt>
   1a894:	push	{r4, r5, fp, lr}
   1a898:	add	fp, sp, #8
   1a89c:	mov	r5, r1
   1a8a0:	ldr	r1, [r0, #8]
   1a8a4:	ldr	r2, [r0, #24]
   1a8a8:	mov	r4, r0
   1a8ac:	mov	r0, r5
   1a8b0:	blx	r2
   1a8b4:	ldr	r1, [r4, #8]
   1a8b8:	cmp	r0, r1
   1a8bc:	bcs	1a918 <__assert_fail@plt+0x8a84>
   1a8c0:	ldr	r1, [r4]
   1a8c4:	add	r2, r1, r0, lsl #3
   1a8c8:	ldr	r3, [r2]
   1a8cc:	ldr	r2, [r2, #4]
   1a8d0:	cmp	r3, r5
   1a8d4:	beq	1a8e4 <__assert_fail@plt+0x8a50>
   1a8d8:	cmp	r2, #0
   1a8dc:	bne	1a8c8 <__assert_fail@plt+0x8a34>
   1a8e0:	b	1a8f0 <__assert_fail@plt+0x8a5c>
   1a8e4:	cmp	r2, #0
   1a8e8:	ldrne	r0, [r2]
   1a8ec:	popne	{r4, r5, fp, pc}
   1a8f0:	ldr	r2, [r4, #4]
   1a8f4:	add	r0, r1, r0, lsl #3
   1a8f8:	add	r1, r0, #8
   1a8fc:	cmp	r1, r2
   1a900:	movcs	r0, #0
   1a904:	popcs	{r4, r5, fp, pc}
   1a908:	ldr	r0, [r1], #8
   1a90c:	cmp	r0, #0
   1a910:	popne	{r4, r5, fp, pc}
   1a914:	b	1a8fc <__assert_fail@plt+0x8a68>
   1a918:	bl	11e58 <abort@plt>
   1a91c:	push	{r4, r5, fp, lr}
   1a920:	add	fp, sp, #8
   1a924:	ldm	r0, {r5, lr}
   1a928:	mov	ip, r0
   1a92c:	mov	r0, #0
   1a930:	cmp	r5, lr
   1a934:	bcs	1a990 <__assert_fail@plt+0x8afc>
   1a938:	mov	r0, #0
   1a93c:	ldr	r3, [r5]
   1a940:	cmp	r3, #0
   1a944:	cmpne	r5, #0
   1a948:	bne	1a95c <__assert_fail@plt+0x8ac8>
   1a94c:	add	r5, r5, #8
   1a950:	cmp	r5, lr
   1a954:	bcc	1a93c <__assert_fail@plt+0x8aa8>
   1a958:	b	1a990 <__assert_fail@plt+0x8afc>
   1a95c:	mov	r3, r5
   1a960:	cmp	r0, r2
   1a964:	popcs	{r4, r5, fp, pc}
   1a968:	ldr	r4, [r3]
   1a96c:	str	r4, [r1, r0, lsl #2]
   1a970:	add	r0, r0, #1
   1a974:	ldr	r3, [r3, #4]
   1a978:	cmp	r3, #0
   1a97c:	bne	1a960 <__assert_fail@plt+0x8acc>
   1a980:	ldr	lr, [ip, #4]
   1a984:	add	r5, r5, #8
   1a988:	cmp	r5, lr
   1a98c:	bcc	1a93c <__assert_fail@plt+0x8aa8>
   1a990:	pop	{r4, r5, fp, pc}
   1a994:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a998:	add	fp, sp, #24
   1a99c:	mov	r5, r1
   1a9a0:	ldr	r4, [r0]
   1a9a4:	ldr	r1, [r0, #4]
   1a9a8:	mov	r6, #0
   1a9ac:	cmp	r4, r1
   1a9b0:	bcs	1aa2c <__assert_fail@plt+0x8b98>
   1a9b4:	mov	r9, r2
   1a9b8:	mov	r8, r0
   1a9bc:	mov	r6, #0
   1a9c0:	ldr	r0, [r4]
   1a9c4:	cmp	r0, #0
   1a9c8:	cmpne	r4, #0
   1a9cc:	bne	1a9e0 <__assert_fail@plt+0x8b4c>
   1a9d0:	add	r4, r4, #8
   1a9d4:	cmp	r4, r1
   1a9d8:	bcc	1a9c0 <__assert_fail@plt+0x8b2c>
   1a9dc:	b	1aa2c <__assert_fail@plt+0x8b98>
   1a9e0:	mov	r1, r9
   1a9e4:	blx	r5
   1a9e8:	cmp	r0, #0
   1a9ec:	beq	1aa2c <__assert_fail@plt+0x8b98>
   1a9f0:	mov	r7, r4
   1a9f4:	ldr	r7, [r7, #4]
   1a9f8:	add	r6, r6, #1
   1a9fc:	cmp	r7, #0
   1aa00:	beq	1aa1c <__assert_fail@plt+0x8b88>
   1aa04:	ldr	r0, [r7]
   1aa08:	mov	r1, r9
   1aa0c:	blx	r5
   1aa10:	cmp	r0, #0
   1aa14:	bne	1a9f4 <__assert_fail@plt+0x8b60>
   1aa18:	b	1aa2c <__assert_fail@plt+0x8b98>
   1aa1c:	ldr	r1, [r8, #4]
   1aa20:	add	r4, r4, #8
   1aa24:	cmp	r4, r1
   1aa28:	bcc	1a9c0 <__assert_fail@plt+0x8b2c>
   1aa2c:	mov	r0, r6
   1aa30:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1aa34:	ldrb	r2, [r0]
   1aa38:	cmp	r2, #0
   1aa3c:	moveq	r0, #0
   1aa40:	bxeq	lr
   1aa44:	add	r3, r0, #1
   1aa48:	mov	r0, #0
   1aa4c:	rsb	r0, r0, r0, lsl #5
   1aa50:	uxtab	r0, r0, r2
   1aa54:	udiv	r2, r0, r1
   1aa58:	mls	r0, r2, r1, r0
   1aa5c:	ldrb	r2, [r3], #1
   1aa60:	cmp	r2, #0
   1aa64:	bne	1aa4c <__assert_fail@plt+0x8bb8>
   1aa68:	bx	lr
   1aa6c:	movw	r1, #41568	; 0xa260
   1aa70:	movt	r1, #3
   1aa74:	vld1.32	{d16-d17}, [r1]!
   1aa78:	ldr	r1, [r1]
   1aa7c:	vst1.32	{d16-d17}, [r0]!
   1aa80:	str	r1, [r0]
   1aa84:	bx	lr
   1aa88:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1aa8c:	add	fp, sp, #24
   1aa90:	movw	r9, #44244	; 0xacd4
   1aa94:	movw	r5, #44224	; 0xacc0
   1aa98:	cmp	r3, #0
   1aa9c:	mov	r6, r0
   1aaa0:	mov	r0, #40	; 0x28
   1aaa4:	mov	r7, r1
   1aaa8:	movt	r9, #1
   1aaac:	movt	r5, #1
   1aab0:	movne	r9, r3
   1aab4:	cmp	r2, #0
   1aab8:	movne	r5, r2
   1aabc:	bl	36fb4 <__assert_fail@plt+0x25120>
   1aac0:	mov	r8, #0
   1aac4:	cmp	r0, #0
   1aac8:	beq	1aca8 <__assert_fail@plt+0x8e14>
   1aacc:	mov	r4, r0
   1aad0:	cmp	r7, #0
   1aad4:	beq	1ab84 <__assert_fail@plt+0x8cf0>
   1aad8:	movw	r0, #41568	; 0xa260
   1aadc:	str	r7, [r4, #20]
   1aae0:	movt	r0, #3
   1aae4:	cmp	r7, r0
   1aae8:	beq	1ab90 <__assert_fail@plt+0x8cfc>
   1aaec:	vldr	s2, [pc, #444]	; 1acb0 <__assert_fail@plt+0x8e1c>
   1aaf0:	vldr	s0, [r7, #8]
   1aaf4:	vcmpe.f32	s0, s2
   1aaf8:	vmrs	APSR_nzcv, fpscr
   1aafc:	ble	1ab68 <__assert_fail@plt+0x8cd4>
   1ab00:	vldr	s4, [pc, #428]	; 1acb4 <__assert_fail@plt+0x8e20>
   1ab04:	vcmpe.f32	s0, s4
   1ab08:	vmrs	APSR_nzcv, fpscr
   1ab0c:	bpl	1ab68 <__assert_fail@plt+0x8cd4>
   1ab10:	vldr	s4, [pc, #416]	; 1acb8 <__assert_fail@plt+0x8e24>
   1ab14:	vldr	s6, [r7, #12]
   1ab18:	vcmpe.f32	s6, s4
   1ab1c:	vmrs	APSR_nzcv, fpscr
   1ab20:	ble	1ab68 <__assert_fail@plt+0x8cd4>
   1ab24:	vldr	s4, [r7]
   1ab28:	vcmpe.f32	s4, #0.0
   1ab2c:	vmrs	APSR_nzcv, fpscr
   1ab30:	blt	1ab68 <__assert_fail@plt+0x8cd4>
   1ab34:	vadd.f32	s2, s4, s2
   1ab38:	vcmpe.f32	s2, s0
   1ab3c:	vmrs	APSR_nzcv, fpscr
   1ab40:	bpl	1ab68 <__assert_fail@plt+0x8cd4>
   1ab44:	vldr	s0, [r7, #4]
   1ab48:	vmov.f32	s4, #112	; 0x3f800000  1.0
   1ab4c:	vcmpe.f32	s0, s4
   1ab50:	vmrs	APSR_nzcv, fpscr
   1ab54:	bhi	1ab68 <__assert_fail@plt+0x8cd4>
   1ab58:	vcmpe.f32	s2, s0
   1ab5c:	mov	r0, r7
   1ab60:	vmrs	APSR_nzcv, fpscr
   1ab64:	bmi	1ab90 <__assert_fail@plt+0x8cfc>
   1ab68:	movw	r0, #41568	; 0xa260
   1ab6c:	movt	r0, #3
   1ab70:	str	r0, [r4, #20]
   1ab74:	mov	r0, r4
   1ab78:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1ab7c:	mov	r0, r8
   1ab80:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ab84:	movw	r0, #41568	; 0xa260
   1ab88:	movt	r0, #3
   1ab8c:	str	r0, [r4, #20]
   1ab90:	ldrb	r1, [r0, #16]
   1ab94:	cmp	r1, #0
   1ab98:	bne	1abc4 <__assert_fail@plt+0x8d30>
   1ab9c:	vldr	s0, [r0, #8]
   1aba0:	vldr	s4, [pc, #276]	; 1acbc <__assert_fail@plt+0x8e28>
   1aba4:	vmov	s2, r6
   1aba8:	vcvt.f32.u32	s2, s2
   1abac:	vdiv.f32	s2, s2, s0
   1abb0:	vcmpe.f32	s2, s4
   1abb4:	vcvt.u32.f32	s0, s2
   1abb8:	vmrs	APSR_nzcv, fpscr
   1abbc:	bge	1ac44 <__assert_fail@plt+0x8db0>
   1abc0:	vmov	r6, s0
   1abc4:	cmp	r6, #10
   1abc8:	movls	r6, #10
   1abcc:	orr	r0, r6, #1
   1abd0:	cmn	r0, #1
   1abd4:	beq	1ac44 <__assert_fail@plt+0x8db0>
   1abd8:	ldr	r6, [fp, #8]
   1abdc:	mov	r1, #3
   1abe0:	cmp	r0, #10
   1abe4:	bcc	1ac1c <__assert_fail@plt+0x8d88>
   1abe8:	mov	r1, #3
   1abec:	mov	r3, #9
   1abf0:	mov	r2, #12
   1abf4:	udiv	r7, r0, r1
   1abf8:	mls	r7, r7, r1, r0
   1abfc:	cmp	r7, #0
   1ac00:	beq	1ac1c <__assert_fail@plt+0x8d88>
   1ac04:	add	r3, r3, r2
   1ac08:	add	r2, r2, #8
   1ac0c:	add	r1, r1, #2
   1ac10:	add	r3, r3, #4
   1ac14:	cmp	r3, r0
   1ac18:	bcc	1abf4 <__assert_fail@plt+0x8d60>
   1ac1c:	udiv	r2, r0, r1
   1ac20:	mls	r1, r2, r1, r0
   1ac24:	cmp	r1, #0
   1ac28:	bne	1ac3c <__assert_fail@plt+0x8da8>
   1ac2c:	add	r0, r0, #2
   1ac30:	cmn	r0, #1
   1ac34:	bne	1abdc <__assert_fail@plt+0x8d48>
   1ac38:	b	1ac44 <__assert_fail@plt+0x8db0>
   1ac3c:	cmp	r0, #536870912	; 0x20000000
   1ac40:	bcc	1ac5c <__assert_fail@plt+0x8dc8>
   1ac44:	mov	r0, #0
   1ac48:	str	r0, [r4, #8]
   1ac4c:	mov	r0, r4
   1ac50:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1ac54:	mov	r0, r8
   1ac58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ac5c:	cmp	r0, #0
   1ac60:	str	r0, [r4, #8]
   1ac64:	beq	1ac4c <__assert_fail@plt+0x8db8>
   1ac68:	mov	r1, #8
   1ac6c:	bl	36f60 <__assert_fail@plt+0x250cc>
   1ac70:	cmp	r0, #0
   1ac74:	str	r0, [r4]
   1ac78:	beq	1ac4c <__assert_fail@plt+0x8db8>
   1ac7c:	mov	r1, #0
   1ac80:	mov	r8, r4
   1ac84:	str	r1, [r4, #12]
   1ac88:	str	r1, [r4, #16]
   1ac8c:	str	r5, [r4, #24]
   1ac90:	str	r9, [r4, #28]
   1ac94:	str	r6, [r4, #32]
   1ac98:	str	r1, [r4, #36]	; 0x24
   1ac9c:	ldr	r1, [r4, #8]
   1aca0:	add	r0, r0, r1, lsl #3
   1aca4:	str	r0, [r4, #4]
   1aca8:	mov	r0, r8
   1acac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1acb0:	stclcc	12, cr12, [ip, #820]	; 0x334
   1acb4:	svccc	0x00666666
   1acb8:	svccc	0x008ccccd
   1acbc:	svcmi	0x00800000
   1acc0:	ror	r2, r0, #3
   1acc4:	udiv	r2, r2, r1
   1acc8:	mul	r1, r2, r1
   1accc:	rsb	r0, r1, r0, ror #3
   1acd0:	bx	lr
   1acd4:	sub	r0, r0, r1
   1acd8:	clz	r0, r0
   1acdc:	lsr	r0, r0, #5
   1ace0:	bx	lr
   1ace4:	push	{r4, r5, r6, r7, fp, lr}
   1ace8:	add	fp, sp, #16
   1acec:	mov	r4, r0
   1acf0:	ldr	r5, [r0]
   1acf4:	ldr	r0, [r0, #4]
   1acf8:	cmp	r5, r0
   1acfc:	bcs	1ad94 <__assert_fail@plt+0x8f00>
   1ad00:	mov	r6, #0
   1ad04:	ldr	r1, [r5]
   1ad08:	cmp	r1, #0
   1ad0c:	beq	1ad88 <__assert_fail@plt+0x8ef4>
   1ad10:	ldr	r1, [r4, #32]
   1ad14:	ldr	r7, [r5, #4]
   1ad18:	cmp	r1, #0
   1ad1c:	mov	r0, r1
   1ad20:	movwne	r0, #1
   1ad24:	cmp	r7, #0
   1ad28:	beq	1ad6c <__assert_fail@plt+0x8ed8>
   1ad2c:	tst	r0, #1
   1ad30:	beq	1ad40 <__assert_fail@plt+0x8eac>
   1ad34:	ldr	r0, [r7]
   1ad38:	blx	r1
   1ad3c:	ldr	r1, [r4, #32]
   1ad40:	str	r6, [r7]
   1ad44:	cmp	r1, #0
   1ad48:	ldr	r0, [r4, #36]	; 0x24
   1ad4c:	ldr	r2, [r7, #4]
   1ad50:	str	r0, [r7, #4]
   1ad54:	mov	r0, r1
   1ad58:	str	r7, [r4, #36]	; 0x24
   1ad5c:	mov	r7, r2
   1ad60:	movwne	r0, #1
   1ad64:	cmp	r2, #0
   1ad68:	bne	1ad2c <__assert_fail@plt+0x8e98>
   1ad6c:	cmp	r0, #0
   1ad70:	beq	1ad7c <__assert_fail@plt+0x8ee8>
   1ad74:	ldr	r0, [r5]
   1ad78:	blx	r1
   1ad7c:	str	r6, [r5]
   1ad80:	str	r6, [r5, #4]
   1ad84:	ldr	r0, [r4, #4]
   1ad88:	add	r5, r5, #8
   1ad8c:	cmp	r5, r0
   1ad90:	bcc	1ad04 <__assert_fail@plt+0x8e70>
   1ad94:	mov	r0, #0
   1ad98:	str	r0, [r4, #12]
   1ad9c:	str	r0, [r4, #16]
   1ada0:	pop	{r4, r5, r6, r7, fp, pc}
   1ada4:	push	{r4, r5, r6, sl, fp, lr}
   1ada8:	add	fp, sp, #16
   1adac:	mov	r4, r0
   1adb0:	ldr	r0, [r0, #32]
   1adb4:	cmp	r0, #0
   1adb8:	ldrne	r0, [r4, #16]
   1adbc:	cmpne	r0, #0
   1adc0:	beq	1ae28 <__assert_fail@plt+0x8f94>
   1adc4:	ldr	r5, [r4]
   1adc8:	ldr	r1, [r4, #4]
   1adcc:	cmp	r5, r1
   1add0:	bcc	1ade4 <__assert_fail@plt+0x8f50>
   1add4:	b	1ae28 <__assert_fail@plt+0x8f94>
   1add8:	add	r5, r5, #8
   1addc:	cmp	r5, r1
   1ade0:	bcs	1ae28 <__assert_fail@plt+0x8f94>
   1ade4:	ldr	r0, [r5]
   1ade8:	cmp	r0, #0
   1adec:	cmpne	r5, #0
   1adf0:	beq	1add8 <__assert_fail@plt+0x8f44>
   1adf4:	ldr	r1, [r4, #32]
   1adf8:	blx	r1
   1adfc:	ldr	r6, [r5, #4]
   1ae00:	cmp	r6, #0
   1ae04:	beq	1ae20 <__assert_fail@plt+0x8f8c>
   1ae08:	ldr	r1, [r4, #32]
   1ae0c:	ldr	r0, [r6]
   1ae10:	blx	r1
   1ae14:	ldr	r6, [r6, #4]
   1ae18:	cmp	r6, #0
   1ae1c:	bne	1ae08 <__assert_fail@plt+0x8f74>
   1ae20:	ldr	r1, [r4, #4]
   1ae24:	b	1add8 <__assert_fail@plt+0x8f44>
   1ae28:	ldr	r5, [r4]
   1ae2c:	ldr	r1, [r4, #4]
   1ae30:	cmp	r5, r1
   1ae34:	bcc	1ae48 <__assert_fail@plt+0x8fb4>
   1ae38:	b	1ae70 <__assert_fail@plt+0x8fdc>
   1ae3c:	add	r5, r5, #8
   1ae40:	cmp	r5, r1
   1ae44:	bcs	1ae70 <__assert_fail@plt+0x8fdc>
   1ae48:	ldr	r0, [r5, #4]
   1ae4c:	cmp	r0, #0
   1ae50:	beq	1ae3c <__assert_fail@plt+0x8fa8>
   1ae54:	ldr	r6, [r0, #4]
   1ae58:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1ae5c:	cmp	r6, #0
   1ae60:	mov	r0, r6
   1ae64:	bne	1ae54 <__assert_fail@plt+0x8fc0>
   1ae68:	ldr	r1, [r4, #4]
   1ae6c:	b	1ae3c <__assert_fail@plt+0x8fa8>
   1ae70:	ldr	r0, [r4, #36]	; 0x24
   1ae74:	cmp	r0, #0
   1ae78:	beq	1ae90 <__assert_fail@plt+0x8ffc>
   1ae7c:	ldr	r5, [r0, #4]
   1ae80:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1ae84:	cmp	r5, #0
   1ae88:	mov	r0, r5
   1ae8c:	bne	1ae7c <__assert_fail@plt+0x8fe8>
   1ae90:	ldr	r0, [r4]
   1ae94:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1ae98:	mov	r0, r4
   1ae9c:	pop	{r4, r5, r6, sl, fp, lr}
   1aea0:	b	17b10 <__assert_fail@plt+0x5c7c>
   1aea4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aea8:	add	fp, sp, #28
   1aeac:	sub	sp, sp, #44	; 0x2c
   1aeb0:	mov	r7, r0
   1aeb4:	mov	r4, r0
   1aeb8:	ldr	r0, [r7, #20]!
   1aebc:	ldrb	r2, [r0, #16]
   1aec0:	cmp	r2, #0
   1aec4:	bne	1aef4 <__assert_fail@plt+0x9060>
   1aec8:	vldr	s0, [r0, #8]
   1aecc:	vldr	s4, [pc, #576]	; 1b114 <__assert_fail@plt+0x9280>
   1aed0:	vmov	s2, r1
   1aed4:	mov	r5, #0
   1aed8:	vcvt.f32.u32	s2, s2
   1aedc:	vdiv.f32	s2, s2, s0
   1aee0:	vcmpe.f32	s2, s4
   1aee4:	vcvt.u32.f32	s0, s2
   1aee8:	vmrs	APSR_nzcv, fpscr
   1aeec:	bge	1b018 <__assert_fail@plt+0x9184>
   1aef0:	vmov	r1, s0
   1aef4:	cmp	r1, #10
   1aef8:	mov	r5, #0
   1aefc:	movls	r1, #10
   1af00:	orr	r6, r1, #1
   1af04:	cmn	r6, #1
   1af08:	bne	1af1c <__assert_fail@plt+0x9088>
   1af0c:	b	1b018 <__assert_fail@plt+0x9184>
   1af10:	add	r6, r6, #2
   1af14:	cmn	r6, #1
   1af18:	beq	1b018 <__assert_fail@plt+0x9184>
   1af1c:	mov	r0, #3
   1af20:	cmp	r6, #10
   1af24:	bcc	1af5c <__assert_fail@plt+0x90c8>
   1af28:	mov	r0, #3
   1af2c:	mov	r2, #9
   1af30:	mov	r1, #12
   1af34:	udiv	r3, r6, r0
   1af38:	mls	r3, r3, r0, r6
   1af3c:	cmp	r3, #0
   1af40:	beq	1af5c <__assert_fail@plt+0x90c8>
   1af44:	add	r2, r2, r1
   1af48:	add	r1, r1, #8
   1af4c:	add	r0, r0, #2
   1af50:	add	r2, r2, #4
   1af54:	cmp	r2, r6
   1af58:	bcc	1af34 <__assert_fail@plt+0x90a0>
   1af5c:	udiv	r1, r6, r0
   1af60:	mls	r0, r1, r0, r6
   1af64:	cmp	r0, #0
   1af68:	beq	1af10 <__assert_fail@plt+0x907c>
   1af6c:	sub	r0, r6, #1
   1af70:	cmn	r0, #-536870910	; 0xe0000002
   1af74:	bhi	1b018 <__assert_fail@plt+0x9184>
   1af78:	ldr	r0, [r4, #8]
   1af7c:	cmp	r6, r0
   1af80:	bne	1af94 <__assert_fail@plt+0x9100>
   1af84:	mov	r5, #1
   1af88:	mov	r0, r5
   1af8c:	sub	sp, fp, #28
   1af90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af94:	mov	r0, r6
   1af98:	mov	r1, #8
   1af9c:	bl	36f60 <__assert_fail@plt+0x250cc>
   1afa0:	cmp	r0, #0
   1afa4:	str	r0, [sp, #4]
   1afa8:	beq	1b018 <__assert_fail@plt+0x9184>
   1afac:	mov	r1, #0
   1afb0:	add	r0, r0, r6, lsl #3
   1afb4:	str	r6, [sp, #12]
   1afb8:	add	r5, sp, #4
   1afbc:	mov	sl, r4
   1afc0:	mov	r2, #0
   1afc4:	str	r1, [sp, #16]
   1afc8:	str	r1, [sp, #20]
   1afcc:	str	r0, [sp, #8]
   1afd0:	add	r0, r5, #20
   1afd4:	mov	r1, r4
   1afd8:	vld1.32	{d16-d17}, [r7]
   1afdc:	vst1.32	{d16-d17}, [r0]
   1afe0:	ldr	r0, [sl, #36]!	; 0x24
   1afe4:	str	r0, [sp, #40]	; 0x28
   1afe8:	mov	r0, r5
   1afec:	bl	1b118 <__assert_fail@plt+0x9284>
   1aff0:	cmp	r0, #0
   1aff4:	beq	1b024 <__assert_fail@plt+0x9190>
   1aff8:	ldr	r0, [r4]
   1affc:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1b000:	mov	r0, #36	; 0x24
   1b004:	vld1.32	{d16-d17}, [r5], r0
   1b008:	vst1.32	{d16-d17}, [r4], r0
   1b00c:	ldr	r0, [r5]
   1b010:	mov	r5, #1
   1b014:	str	r0, [r4]
   1b018:	mov	r0, r5
   1b01c:	sub	sp, fp, #28
   1b020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b024:	ldr	r0, [sp, #40]	; 0x28
   1b028:	str	r0, [sl]
   1b02c:	ldr	r0, [sp, #8]
   1b030:	ldr	r8, [sp, #4]
   1b034:	cmp	r8, r0
   1b038:	str	r0, [sp]
   1b03c:	bcs	1b0e0 <__assert_fail@plt+0x924c>
   1b040:	mov	r9, #0
   1b044:	ldr	r0, [r8]
   1b048:	cmp	r0, #0
   1b04c:	beq	1b0d0 <__assert_fail@plt+0x923c>
   1b050:	ldr	r6, [r8, #4]
   1b054:	cmp	r6, #0
   1b058:	beq	1b0cc <__assert_fail@plt+0x9238>
   1b05c:	ldr	r1, [r4, #8]
   1b060:	ldr	r5, [r6]
   1b064:	ldr	r2, [r4, #24]
   1b068:	mov	r0, r5
   1b06c:	blx	r2
   1b070:	ldr	r1, [r4, #8]
   1b074:	cmp	r0, r1
   1b078:	bcs	1b110 <__assert_fail@plt+0x927c>
   1b07c:	ldr	r3, [r4]
   1b080:	ldr	r2, [r6, #4]
   1b084:	ldr	r7, [r3, r0, lsl #3]
   1b088:	cmp	r7, #0
   1b08c:	beq	1b09c <__assert_fail@plt+0x9208>
   1b090:	add	r0, r3, r0, lsl #3
   1b094:	add	r0, r0, #4
   1b098:	b	1b0b4 <__assert_fail@plt+0x9220>
   1b09c:	str	r5, [r3, r0, lsl #3]
   1b0a0:	ldr	r0, [r4, #12]
   1b0a4:	add	r0, r0, #1
   1b0a8:	str	r0, [r4, #12]
   1b0ac:	mov	r0, sl
   1b0b0:	str	r9, [r6]
   1b0b4:	ldr	r3, [r0]
   1b0b8:	cmp	r2, #0
   1b0bc:	str	r3, [r6, #4]
   1b0c0:	str	r6, [r0]
   1b0c4:	mov	r6, r2
   1b0c8:	bne	1b060 <__assert_fail@plt+0x91cc>
   1b0cc:	str	r9, [r8, #4]
   1b0d0:	ldr	r0, [sp]
   1b0d4:	add	r8, r8, #8
   1b0d8:	cmp	r8, r0
   1b0dc:	bcc	1b044 <__assert_fail@plt+0x91b0>
   1b0e0:	add	r1, sp, #4
   1b0e4:	mov	r0, r4
   1b0e8:	mov	r2, #0
   1b0ec:	mov	r5, #0
   1b0f0:	bl	1b118 <__assert_fail@plt+0x9284>
   1b0f4:	cmp	r0, #0
   1b0f8:	beq	1b110 <__assert_fail@plt+0x927c>
   1b0fc:	ldr	r0, [sp, #4]
   1b100:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1b104:	mov	r0, r5
   1b108:	sub	sp, fp, #28
   1b10c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b110:	bl	11e58 <abort@plt>
   1b114:	svcmi	0x00800000
   1b118:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b11c:	add	fp, sp, #28
   1b120:	sub	sp, sp, #4
   1b124:	ldr	r8, [r1]
   1b128:	ldr	r3, [r1, #4]
   1b12c:	mov	r6, r0
   1b130:	mov	r0, #1
   1b134:	str	r1, [sp]
   1b138:	cmp	r8, r3
   1b13c:	bcs	1b33c <__assert_fail@plt+0x94a8>
   1b140:	add	r9, r6, #36	; 0x24
   1b144:	cmp	r2, #0
   1b148:	beq	1b1f4 <__assert_fail@plt+0x9360>
   1b14c:	mov	sl, #0
   1b150:	ldr	r1, [r8]
   1b154:	cmp	r1, #0
   1b158:	beq	1b1e4 <__assert_fail@plt+0x9350>
   1b15c:	ldr	r7, [r8, #4]
   1b160:	cmp	r7, #0
   1b164:	beq	1b1e0 <__assert_fail@plt+0x934c>
   1b168:	ldr	r1, [r6, #8]
   1b16c:	ldr	r4, [r7]
   1b170:	ldr	r2, [r6, #24]
   1b174:	mov	r0, r4
   1b178:	blx	r2
   1b17c:	ldr	r1, [r6, #8]
   1b180:	cmp	r0, r1
   1b184:	bcs	1b350 <__assert_fail@plt+0x94bc>
   1b188:	ldr	r3, [r6]
   1b18c:	ldr	r2, [r7, #4]
   1b190:	ldr	r5, [r3, r0, lsl #3]
   1b194:	cmp	r5, #0
   1b198:	beq	1b1a8 <__assert_fail@plt+0x9314>
   1b19c:	add	r0, r3, r0, lsl #3
   1b1a0:	add	r0, r0, #4
   1b1a4:	b	1b1c0 <__assert_fail@plt+0x932c>
   1b1a8:	str	r4, [r3, r0, lsl #3]
   1b1ac:	ldr	r0, [r6, #12]
   1b1b0:	add	r0, r0, #1
   1b1b4:	str	r0, [r6, #12]
   1b1b8:	mov	r0, r9
   1b1bc:	str	sl, [r7]
   1b1c0:	ldr	r3, [r0]
   1b1c4:	cmp	r2, #0
   1b1c8:	str	r3, [r7, #4]
   1b1cc:	str	r7, [r0]
   1b1d0:	mov	r7, r2
   1b1d4:	bne	1b16c <__assert_fail@plt+0x92d8>
   1b1d8:	ldr	r0, [sp]
   1b1dc:	ldr	r3, [r0, #4]
   1b1e0:	str	sl, [r8, #4]
   1b1e4:	add	r8, r8, #8
   1b1e8:	cmp	r8, r3
   1b1ec:	bcc	1b150 <__assert_fail@plt+0x92bc>
   1b1f0:	b	1b338 <__assert_fail@plt+0x94a4>
   1b1f4:	mov	r5, #0
   1b1f8:	ldr	sl, [r8]
   1b1fc:	cmp	sl, #0
   1b200:	beq	1b32c <__assert_fail@plt+0x9498>
   1b204:	ldr	r7, [r8, #4]
   1b208:	ldr	r1, [r6, #8]
   1b20c:	cmp	r7, #0
   1b210:	beq	1b28c <__assert_fail@plt+0x93f8>
   1b214:	mov	sl, #0
   1b218:	ldr	r4, [r7]
   1b21c:	ldr	r2, [r6, #24]
   1b220:	mov	r0, r4
   1b224:	blx	r2
   1b228:	ldr	r1, [r6, #8]
   1b22c:	cmp	r0, r1
   1b230:	bcs	1b350 <__assert_fail@plt+0x94bc>
   1b234:	ldr	r3, [r6]
   1b238:	ldr	r2, [r7, #4]
   1b23c:	ldr	r5, [r3, r0, lsl #3]
   1b240:	cmp	r5, #0
   1b244:	beq	1b254 <__assert_fail@plt+0x93c0>
   1b248:	add	r0, r3, r0, lsl #3
   1b24c:	add	r0, r0, #4
   1b250:	b	1b26c <__assert_fail@plt+0x93d8>
   1b254:	str	r4, [r3, r0, lsl #3]
   1b258:	ldr	r0, [r6, #12]
   1b25c:	add	r0, r0, #1
   1b260:	str	r0, [r6, #12]
   1b264:	mov	r0, r9
   1b268:	str	sl, [r7]
   1b26c:	ldr	r3, [r0]
   1b270:	cmp	r2, #0
   1b274:	str	r3, [r7, #4]
   1b278:	str	r7, [r0]
   1b27c:	mov	r7, r2
   1b280:	bne	1b218 <__assert_fail@plt+0x9384>
   1b284:	ldr	sl, [r8]
   1b288:	mov	r5, #0
   1b28c:	str	r5, [r8, #4]
   1b290:	mov	r0, sl
   1b294:	ldr	r2, [r6, #24]
   1b298:	blx	r2
   1b29c:	mov	r4, r0
   1b2a0:	ldr	r0, [r6, #8]
   1b2a4:	cmp	r4, r0
   1b2a8:	bcs	1b350 <__assert_fail@plt+0x94bc>
   1b2ac:	ldr	r7, [r6]
   1b2b0:	ldr	r0, [r7, r4, lsl #3]
   1b2b4:	cmp	r0, #0
   1b2b8:	beq	1b2d8 <__assert_fail@plt+0x9444>
   1b2bc:	ldr	r0, [r9]
   1b2c0:	cmp	r0, #0
   1b2c4:	beq	1b2ec <__assert_fail@plt+0x9458>
   1b2c8:	mov	r1, r0
   1b2cc:	ldr	r2, [r1, #4]!
   1b2d0:	str	r2, [r9]
   1b2d4:	b	1b300 <__assert_fail@plt+0x946c>
   1b2d8:	str	sl, [r7, r4, lsl #3]
   1b2dc:	ldr	r0, [r6, #12]
   1b2e0:	add	r0, r0, #1
   1b2e4:	str	r0, [r6, #12]
   1b2e8:	b	1b314 <__assert_fail@plt+0x9480>
   1b2ec:	mov	r0, #8
   1b2f0:	bl	36fb4 <__assert_fail@plt+0x25120>
   1b2f4:	cmp	r0, #0
   1b2f8:	beq	1b344 <__assert_fail@plt+0x94b0>
   1b2fc:	add	r1, r0, #4
   1b300:	str	sl, [r0]
   1b304:	add	r2, r7, r4, lsl #3
   1b308:	ldr	r3, [r2, #4]
   1b30c:	str	r3, [r1]
   1b310:	str	r0, [r2, #4]
   1b314:	ldr	r0, [sp]
   1b318:	str	r5, [r8]
   1b31c:	ldr	r1, [r0, #12]
   1b320:	ldr	r3, [r0, #4]
   1b324:	sub	r1, r1, #1
   1b328:	str	r1, [r0, #12]
   1b32c:	add	r8, r8, #8
   1b330:	cmp	r8, r3
   1b334:	bcc	1b1f8 <__assert_fail@plt+0x9364>
   1b338:	mov	r0, #1
   1b33c:	sub	sp, fp, #28
   1b340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b344:	mov	r0, #0
   1b348:	sub	sp, fp, #28
   1b34c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b350:	bl	11e58 <abort@plt>
   1b354:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b358:	add	fp, sp, #28
   1b35c:	sub	sp, sp, #4
   1b360:	cmp	r1, #0
   1b364:	beq	1b6a8 <__assert_fail@plt+0x9814>
   1b368:	mov	r8, r2
   1b36c:	mov	sl, r1
   1b370:	ldr	r1, [r0, #8]
   1b374:	ldr	r2, [r0, #24]
   1b378:	mov	r4, r0
   1b37c:	mov	r0, sl
   1b380:	blx	r2
   1b384:	mov	r7, r0
   1b388:	ldr	r0, [r4, #8]
   1b38c:	cmp	r7, r0
   1b390:	bcs	1b6a8 <__assert_fail@plt+0x9814>
   1b394:	ldr	r5, [r4]
   1b398:	mov	r9, r5
   1b39c:	ldr	r1, [r9, r7, lsl #3]!
   1b3a0:	cmp	r1, #0
   1b3a4:	beq	1b438 <__assert_fail@plt+0x95a4>
   1b3a8:	cmp	r1, sl
   1b3ac:	beq	1b3d8 <__assert_fail@plt+0x9544>
   1b3b0:	ldr	r2, [r4, #28]
   1b3b4:	mov	r0, sl
   1b3b8:	blx	r2
   1b3bc:	cmp	r0, #0
   1b3c0:	mov	r6, r9
   1b3c4:	beq	1b3f4 <__assert_fail@plt+0x9560>
   1b3c8:	ldr	r0, [r6]
   1b3cc:	cmp	r0, #0
   1b3d0:	bne	1b3dc <__assert_fail@plt+0x9548>
   1b3d4:	b	1b438 <__assert_fail@plt+0x95a4>
   1b3d8:	mov	r0, sl
   1b3dc:	cmp	r8, #0
   1b3e0:	mov	r7, #0
   1b3e4:	strne	r0, [r8]
   1b3e8:	mov	r0, r7
   1b3ec:	sub	sp, fp, #28
   1b3f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b3f4:	add	r6, r5, r7, lsl #3
   1b3f8:	ldr	r0, [r6, #4]!
   1b3fc:	cmp	r0, #0
   1b400:	beq	1b438 <__assert_fail@plt+0x95a4>
   1b404:	ldr	r1, [r0]
   1b408:	cmp	r1, sl
   1b40c:	beq	1b42c <__assert_fail@plt+0x9598>
   1b410:	ldr	r2, [r4, #28]
   1b414:	mov	r0, sl
   1b418:	blx	r2
   1b41c:	ldr	r6, [r6]
   1b420:	cmp	r0, #0
   1b424:	beq	1b3f8 <__assert_fail@plt+0x9564>
   1b428:	b	1b3c8 <__assert_fail@plt+0x9534>
   1b42c:	mov	r0, sl
   1b430:	cmp	r0, #0
   1b434:	bne	1b3dc <__assert_fail@plt+0x9548>
   1b438:	vldr	s0, [r4, #8]
   1b43c:	vldr	s2, [r4, #12]
   1b440:	ldr	r0, [r4, #20]
   1b444:	vcvt.f32.u32	s0, s0
   1b448:	vcvt.f32.u32	s4, s2
   1b44c:	vldr	s2, [r0, #8]
   1b450:	vmul.f32	s6, s2, s0
   1b454:	vcmpe.f32	s6, s4
   1b458:	vmrs	APSR_nzcv, fpscr
   1b45c:	bpl	1b5c0 <__assert_fail@plt+0x972c>
   1b460:	movw	r1, #41568	; 0xa260
   1b464:	movt	r1, #3
   1b468:	cmp	r0, r1
   1b46c:	beq	1b508 <__assert_fail@plt+0x9674>
   1b470:	vldr	s6, [pc, #564]	; 1b6ac <__assert_fail@plt+0x9818>
   1b474:	vcmpe.f32	s2, s6
   1b478:	vmrs	APSR_nzcv, fpscr
   1b47c:	ble	1b4e4 <__assert_fail@plt+0x9650>
   1b480:	vldr	s8, [pc, #552]	; 1b6b0 <__assert_fail@plt+0x981c>
   1b484:	vcmpe.f32	s2, s8
   1b488:	vmrs	APSR_nzcv, fpscr
   1b48c:	bpl	1b4e4 <__assert_fail@plt+0x9650>
   1b490:	vldr	s8, [pc, #540]	; 1b6b4 <__assert_fail@plt+0x9820>
   1b494:	vldr	s10, [r0, #12]
   1b498:	vcmpe.f32	s10, s8
   1b49c:	vmrs	APSR_nzcv, fpscr
   1b4a0:	ble	1b4e4 <__assert_fail@plt+0x9650>
   1b4a4:	vldr	s8, [r0]
   1b4a8:	vcmpe.f32	s8, #0.0
   1b4ac:	vmrs	APSR_nzcv, fpscr
   1b4b0:	blt	1b4e4 <__assert_fail@plt+0x9650>
   1b4b4:	vadd.f32	s6, s8, s6
   1b4b8:	vcmpe.f32	s6, s2
   1b4bc:	vmrs	APSR_nzcv, fpscr
   1b4c0:	bpl	1b4e4 <__assert_fail@plt+0x9650>
   1b4c4:	vldr	s8, [r0, #4]
   1b4c8:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1b4cc:	vcmpe.f32	s8, s10
   1b4d0:	vmrs	APSR_nzcv, fpscr
   1b4d4:	bhi	1b4e4 <__assert_fail@plt+0x9650>
   1b4d8:	vcmpe.f32	s6, s8
   1b4dc:	vmrs	APSR_nzcv, fpscr
   1b4e0:	bmi	1b4f4 <__assert_fail@plt+0x9660>
   1b4e4:	vldr	s2, [pc, #460]	; 1b6b8 <__assert_fail@plt+0x9824>
   1b4e8:	movw	r0, #41568	; 0xa260
   1b4ec:	movt	r0, #3
   1b4f0:	str	r0, [r4, #20]
   1b4f4:	vmul.f32	s6, s2, s0
   1b4f8:	vcmpe.f32	s6, s4
   1b4fc:	vmrs	APSR_nzcv, fpscr
   1b500:	bmi	1b51c <__assert_fail@plt+0x9688>
   1b504:	b	1b5c0 <__assert_fail@plt+0x972c>
   1b508:	mov	r0, r1
   1b50c:	vmul.f32	s6, s2, s0
   1b510:	vcmpe.f32	s6, s4
   1b514:	vmrs	APSR_nzcv, fpscr
   1b518:	bpl	1b5c0 <__assert_fail@plt+0x972c>
   1b51c:	vldr	s4, [r0, #12]
   1b520:	ldrb	r0, [r0, #16]
   1b524:	mvn	r7, #0
   1b528:	vmul.f32	s0, s4, s0
   1b52c:	vldr	s4, [pc, #392]	; 1b6bc <__assert_fail@plt+0x9828>
   1b530:	cmp	r0, #0
   1b534:	vmul.f32	s2, s2, s0
   1b538:	vseleq.f32	s0, s2, s0
   1b53c:	vcmpe.f32	s0, s4
   1b540:	vmrs	APSR_nzcv, fpscr
   1b544:	bge	1b63c <__assert_fail@plt+0x97a8>
   1b548:	vcvt.u32.f32	s0, s0
   1b54c:	mov	r0, r4
   1b550:	vmov	r1, s0
   1b554:	bl	1aea4 <__assert_fail@plt+0x9010>
   1b558:	cmp	r0, #0
   1b55c:	beq	1b63c <__assert_fail@plt+0x97a8>
   1b560:	ldr	r1, [r4, #8]
   1b564:	ldr	r2, [r4, #24]
   1b568:	mov	r0, sl
   1b56c:	blx	r2
   1b570:	mov	r7, r0
   1b574:	ldr	r0, [r4, #8]
   1b578:	cmp	r7, r0
   1b57c:	bcs	1b6a8 <__assert_fail@plt+0x9814>
   1b580:	ldr	r5, [r4]
   1b584:	mov	r9, r5
   1b588:	ldr	r1, [r9, r7, lsl #3]!
   1b58c:	cmp	r1, #0
   1b590:	beq	1b5e8 <__assert_fail@plt+0x9754>
   1b594:	cmp	r1, sl
   1b598:	mov	r0, sl
   1b59c:	beq	1b5b8 <__assert_fail@plt+0x9724>
   1b5a0:	ldr	r2, [r4, #28]
   1b5a4:	mov	r0, sl
   1b5a8:	blx	r2
   1b5ac:	cmp	r0, #0
   1b5b0:	beq	1b658 <__assert_fail@plt+0x97c4>
   1b5b4:	ldr	r0, [r9]
   1b5b8:	cmp	r0, #0
   1b5bc:	bne	1b6a8 <__assert_fail@plt+0x9814>
   1b5c0:	ldr	r0, [r9]
   1b5c4:	cmp	r0, #0
   1b5c8:	beq	1b5e8 <__assert_fail@plt+0x9754>
   1b5cc:	ldr	r0, [r4, #36]	; 0x24
   1b5d0:	cmp	r0, #0
   1b5d4:	beq	1b608 <__assert_fail@plt+0x9774>
   1b5d8:	mov	r1, r0
   1b5dc:	ldr	r2, [r1, #4]!
   1b5e0:	str	r2, [r4, #36]	; 0x24
   1b5e4:	b	1b61c <__assert_fail@plt+0x9788>
   1b5e8:	str	sl, [r9]
   1b5ec:	ldr	r0, [r4, #12]
   1b5f0:	ldr	r1, [r4, #16]
   1b5f4:	add	r0, r0, #1
   1b5f8:	add	r1, r1, #1
   1b5fc:	str	r0, [r4, #12]
   1b600:	str	r1, [r4, #16]
   1b604:	b	1b638 <__assert_fail@plt+0x97a4>
   1b608:	mov	r0, #8
   1b60c:	bl	36fb4 <__assert_fail@plt+0x25120>
   1b610:	cmp	r0, #0
   1b614:	beq	1b648 <__assert_fail@plt+0x97b4>
   1b618:	add	r1, r0, #4
   1b61c:	str	sl, [r0]
   1b620:	ldr	r2, [r9, #4]
   1b624:	str	r2, [r1]
   1b628:	str	r0, [r9, #4]
   1b62c:	ldr	r0, [r4, #16]
   1b630:	add	r0, r0, #1
   1b634:	str	r0, [r4, #16]
   1b638:	mov	r7, #1
   1b63c:	mov	r0, r7
   1b640:	sub	sp, fp, #28
   1b644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b648:	mvn	r7, #0
   1b64c:	mov	r0, r7
   1b650:	sub	sp, fp, #28
   1b654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b658:	add	r6, r5, r7, lsl #3
   1b65c:	ldr	r0, [r6, #4]!
   1b660:	cmp	r0, #0
   1b664:	beq	1b5c0 <__assert_fail@plt+0x972c>
   1b668:	ldr	r1, [r0]
   1b66c:	cmp	r1, sl
   1b670:	beq	1b69c <__assert_fail@plt+0x9808>
   1b674:	ldr	r2, [r4, #28]
   1b678:	mov	r0, sl
   1b67c:	blx	r2
   1b680:	ldr	r6, [r6]
   1b684:	cmp	r0, #0
   1b688:	beq	1b65c <__assert_fail@plt+0x97c8>
   1b68c:	ldr	r0, [r6]
   1b690:	cmp	r0, #0
   1b694:	beq	1b5c0 <__assert_fail@plt+0x972c>
   1b698:	b	1b6a8 <__assert_fail@plt+0x9814>
   1b69c:	mov	r0, sl
   1b6a0:	cmp	r0, #0
   1b6a4:	beq	1b5c0 <__assert_fail@plt+0x972c>
   1b6a8:	bl	11e58 <abort@plt>
   1b6ac:	stclcc	12, cr12, [ip, #820]	; 0x334
   1b6b0:	svccc	0x00666666
   1b6b4:	svccc	0x008ccccd
   1b6b8:	svccc	0x004ccccd
   1b6bc:	svcmi	0x00800000
   1b6c0:	push	{r4, sl, fp, lr}
   1b6c4:	add	fp, sp, #8
   1b6c8:	sub	sp, sp, #8
   1b6cc:	add	r2, sp, #4
   1b6d0:	mov	r4, r1
   1b6d4:	bl	1b354 <__assert_fail@plt+0x94c0>
   1b6d8:	cmn	r0, #1
   1b6dc:	beq	1b6f8 <__assert_fail@plt+0x9864>
   1b6e0:	ldr	r1, [sp, #4]
   1b6e4:	cmp	r0, #0
   1b6e8:	moveq	r4, r1
   1b6ec:	mov	r0, r4
   1b6f0:	sub	sp, fp, #8
   1b6f4:	pop	{r4, sl, fp, pc}
   1b6f8:	mov	r4, #0
   1b6fc:	mov	r0, r4
   1b700:	sub	sp, fp, #8
   1b704:	pop	{r4, sl, fp, pc}
   1b708:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b70c:	add	fp, sp, #24
   1b710:	mov	r9, r1
   1b714:	ldr	r1, [r0, #8]
   1b718:	ldr	r2, [r0, #24]
   1b71c:	mov	r5, r0
   1b720:	mov	r0, r9
   1b724:	blx	r2
   1b728:	mov	r7, r0
   1b72c:	ldr	r0, [r5, #8]
   1b730:	cmp	r7, r0
   1b734:	bcs	1b9a4 <__assert_fail@plt+0x9b10>
   1b738:	ldr	r6, [r5]
   1b73c:	mov	r8, #0
   1b740:	mov	r4, r6
   1b744:	ldr	r1, [r4, r7, lsl #3]!
   1b748:	cmp	r1, #0
   1b74c:	beq	1b800 <__assert_fail@plt+0x996c>
   1b750:	cmp	r1, r9
   1b754:	beq	1b770 <__assert_fail@plt+0x98dc>
   1b758:	ldr	r2, [r5, #28]
   1b75c:	mov	r0, r9
   1b760:	blx	r2
   1b764:	cmp	r0, #0
   1b768:	beq	1b7a8 <__assert_fail@plt+0x9914>
   1b76c:	ldr	r9, [r4]
   1b770:	add	r0, r6, r7, lsl #3
   1b774:	ldr	r0, [r0, #4]
   1b778:	cmp	r0, #0
   1b77c:	beq	1b7f0 <__assert_fail@plt+0x995c>
   1b780:	ldm	r0, {r1, r2}
   1b784:	stm	r4, {r1, r2}
   1b788:	mov	r1, #0
   1b78c:	str	r1, [r0]
   1b790:	ldr	r1, [r5, #36]	; 0x24
   1b794:	str	r1, [r0, #4]
   1b798:	str	r0, [r5, #36]	; 0x24
   1b79c:	cmp	r9, #0
   1b7a0:	bne	1b838 <__assert_fail@plt+0x99a4>
   1b7a4:	b	1b800 <__assert_fail@plt+0x996c>
   1b7a8:	add	r7, r6, r7, lsl #3
   1b7ac:	ldr	r0, [r7, #4]!
   1b7b0:	cmp	r0, #0
   1b7b4:	beq	1b800 <__assert_fail@plt+0x996c>
   1b7b8:	ldr	r1, [r0]
   1b7bc:	cmp	r1, r9
   1b7c0:	beq	1b808 <__assert_fail@plt+0x9974>
   1b7c4:	ldr	r2, [r5, #28]
   1b7c8:	mov	r0, r9
   1b7cc:	blx	r2
   1b7d0:	ldr	r1, [r7]
   1b7d4:	cmp	r0, #0
   1b7d8:	bne	1b810 <__assert_fail@plt+0x997c>
   1b7dc:	ldr	r0, [r1, #4]!
   1b7e0:	cmp	r0, #0
   1b7e4:	mov	r7, r1
   1b7e8:	bne	1b7b8 <__assert_fail@plt+0x9924>
   1b7ec:	b	1b800 <__assert_fail@plt+0x996c>
   1b7f0:	mov	r0, #0
   1b7f4:	str	r0, [r4]
   1b7f8:	cmp	r9, #0
   1b7fc:	bne	1b838 <__assert_fail@plt+0x99a4>
   1b800:	mov	r0, r8
   1b804:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b808:	mov	r1, r0
   1b80c:	b	1b814 <__assert_fail@plt+0x9980>
   1b810:	ldr	r9, [r1]
   1b814:	ldr	r0, [r1, #4]
   1b818:	str	r0, [r7]
   1b81c:	mov	r0, #0
   1b820:	str	r0, [r1]
   1b824:	ldr	r0, [r5, #36]	; 0x24
   1b828:	str	r0, [r1, #4]
   1b82c:	str	r1, [r5, #36]	; 0x24
   1b830:	cmp	r9, #0
   1b834:	beq	1b800 <__assert_fail@plt+0x996c>
   1b838:	ldr	r0, [r5, #16]
   1b83c:	sub	r0, r0, #1
   1b840:	str	r0, [r5, #16]
   1b844:	ldr	r0, [r4]
   1b848:	cmp	r0, #0
   1b84c:	bne	1b964 <__assert_fail@plt+0x9ad0>
   1b850:	ldr	r0, [r5, #12]
   1b854:	vldr	s0, [r5, #8]
   1b858:	sub	r1, r0, #1
   1b85c:	str	r1, [r5, #12]
   1b860:	vmov	s2, r1
   1b864:	ldr	r0, [r5, #20]
   1b868:	vcvt.f32.u32	s0, s0
   1b86c:	vcvt.f32.u32	s2, s2
   1b870:	vldr	s4, [r0]
   1b874:	vmul.f32	s6, s4, s0
   1b878:	vcmpe.f32	s6, s2
   1b87c:	vmrs	APSR_nzcv, fpscr
   1b880:	ble	1b964 <__assert_fail@plt+0x9ad0>
   1b884:	movw	r1, #41568	; 0xa260
   1b888:	movt	r1, #3
   1b88c:	cmp	r0, r1
   1b890:	beq	1b8f8 <__assert_fail@plt+0x9a64>
   1b894:	vldr	s8, [pc, #268]	; 1b9a8 <__assert_fail@plt+0x9b14>
   1b898:	vldr	s6, [r0, #8]
   1b89c:	vcmpe.f32	s6, s8
   1b8a0:	vmrs	APSR_nzcv, fpscr
   1b8a4:	ble	1b8d4 <__assert_fail@plt+0x9a40>
   1b8a8:	vldr	s10, [pc, #252]	; 1b9ac <__assert_fail@plt+0x9b18>
   1b8ac:	vcmpe.f32	s6, s10
   1b8b0:	vmrs	APSR_nzcv, fpscr
   1b8b4:	bpl	1b8d4 <__assert_fail@plt+0x9a40>
   1b8b8:	vcmpe.f32	s4, #0.0
   1b8bc:	vmrs	APSR_nzcv, fpscr
   1b8c0:	vldrge	s10, [r0, #12]
   1b8c4:	vldrge	s12, [pc, #228]	; 1b9b0 <__assert_fail@plt+0x9b1c>
   1b8c8:	vcmpege.f32	s10, s12
   1b8cc:	vmrsge	APSR_nzcv, fpscr
   1b8d0:	bgt	1b970 <__assert_fail@plt+0x9adc>
   1b8d4:	vldr	s4, [pc, #216]	; 1b9b4 <__assert_fail@plt+0x9b20>
   1b8d8:	movw	r0, #41568	; 0xa260
   1b8dc:	movt	r0, #3
   1b8e0:	str	r0, [r5, #20]
   1b8e4:	vmul.f32	s4, s4, s0
   1b8e8:	vcmpe.f32	s4, s2
   1b8ec:	vmrs	APSR_nzcv, fpscr
   1b8f0:	bgt	1b90c <__assert_fail@plt+0x9a78>
   1b8f4:	b	1b964 <__assert_fail@plt+0x9ad0>
   1b8f8:	mov	r0, r1
   1b8fc:	vmul.f32	s4, s4, s0
   1b900:	vcmpe.f32	s4, s2
   1b904:	vmrs	APSR_nzcv, fpscr
   1b908:	ble	1b964 <__assert_fail@plt+0x9ad0>
   1b90c:	ldrb	r1, [r0, #16]
   1b910:	vldr	s2, [r0, #4]
   1b914:	cmp	r1, #0
   1b918:	vmul.f32	s0, s2, s0
   1b91c:	vldreq	s2, [r0, #8]
   1b920:	mov	r0, r5
   1b924:	vmuleq.f32	s0, s0, s2
   1b928:	vcvt.u32.f32	s0, s0
   1b92c:	vmov	r1, s0
   1b930:	bl	1aea4 <__assert_fail@plt+0x9010>
   1b934:	cmp	r0, #0
   1b938:	bne	1b964 <__assert_fail@plt+0x9ad0>
   1b93c:	ldr	r0, [r5, #36]	; 0x24
   1b940:	cmp	r0, #0
   1b944:	beq	1b95c <__assert_fail@plt+0x9ac8>
   1b948:	ldr	r4, [r0, #4]
   1b94c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1b950:	cmp	r4, #0
   1b954:	mov	r0, r4
   1b958:	bne	1b948 <__assert_fail@plt+0x9ab4>
   1b95c:	mov	r0, #0
   1b960:	str	r0, [r5, #36]	; 0x24
   1b964:	mov	r8, r9
   1b968:	mov	r0, r8
   1b96c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b970:	vadd.f32	s8, s4, s8
   1b974:	vcmpe.f32	s8, s6
   1b978:	vmrs	APSR_nzcv, fpscr
   1b97c:	bpl	1b8d4 <__assert_fail@plt+0x9a40>
   1b980:	vldr	s6, [r0, #4]
   1b984:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1b988:	vcmpe.f32	s6, s10
   1b98c:	vmrs	APSR_nzcv, fpscr
   1b990:	bhi	1b8d4 <__assert_fail@plt+0x9a40>
   1b994:	vcmpe.f32	s8, s6
   1b998:	vmrs	APSR_nzcv, fpscr
   1b99c:	bmi	1b8fc <__assert_fail@plt+0x9a68>
   1b9a0:	b	1b8d4 <__assert_fail@plt+0x9a40>
   1b9a4:	bl	11e58 <abort@plt>
   1b9a8:	stclcc	12, cr12, [ip, #820]	; 0x334
   1b9ac:	svccc	0x00666666
   1b9b0:	svccc	0x008ccccd
   1b9b4:	andeq	r0, r0, r0
   1b9b8:	b	1b708 <__assert_fail@plt+0x9874>
   1b9bc:	andeq	r0, r0, r0
   1b9c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b9c4:	add	fp, sp, #28
   1b9c8:	sub	sp, sp, #4
   1b9cc:	vpush	{d8-d9}
   1b9d0:	sub	sp, sp, #104	; 0x68
   1b9d4:	mov	r7, r3
   1b9d8:	mov	r6, r2
   1b9dc:	mov	r9, r1
   1b9e0:	str	r0, [sp, #44]	; 0x2c
   1b9e4:	bl	11d98 <localeconv@plt>
   1b9e8:	ldr	r5, [r0]
   1b9ec:	mov	r4, r0
   1b9f0:	mov	r0, r5
   1b9f4:	bl	11c78 <strlen@plt>
   1b9f8:	movw	r2, #41392	; 0xa1b0
   1b9fc:	sub	r1, r0, #1
   1ba00:	cmp	r1, #16
   1ba04:	movt	r2, #3
   1ba08:	movcc	r2, r5
   1ba0c:	ldr	r5, [r4, #4]
   1ba10:	ldr	r4, [r4, #8]
   1ba14:	movcs	r0, #1
   1ba18:	str	r0, [sp, #16]
   1ba1c:	str	r2, [sp, #12]
   1ba20:	mov	r0, r5
   1ba24:	bl	11c78 <strlen@plt>
   1ba28:	movw	r3, #38108	; 0x94dc
   1ba2c:	cmp	r0, #17
   1ba30:	movw	r0, #647	; 0x287
   1ba34:	ldr	r2, [fp, #16]
   1ba38:	ldr	sl, [fp, #8]
   1ba3c:	ldr	r8, [fp, #12]
   1ba40:	str	r6, [sp, #28]
   1ba44:	str	r7, [sp, #36]	; 0x24
   1ba48:	str	r4, [sp, #20]
   1ba4c:	movt	r3, #3
   1ba50:	add	r1, r6, r0
   1ba54:	movcc	r3, r5
   1ba58:	ands	r0, r7, #32
   1ba5c:	ldr	r5, [fp, #20]
   1ba60:	str	r1, [sp, #32]
   1ba64:	str	r0, [sp, #24]
   1ba68:	mov	r0, #1000	; 0x3e8
   1ba6c:	str	r3, [sp, #52]	; 0x34
   1ba70:	movwne	r0, #1024	; 0x400
   1ba74:	str	r0, [sp, #40]	; 0x28
   1ba78:	and	r0, r7, #3
   1ba7c:	str	r0, [sp, #48]	; 0x30
   1ba80:	subs	r0, sl, r2
   1ba84:	sbcs	r0, r8, r5
   1ba88:	bcs	1bb7c <__assert_fail@plt+0x9ce8>
   1ba8c:	orrs	r0, sl, r8
   1ba90:	mov	r4, r9
   1ba94:	beq	1bc64 <__assert_fail@plt+0x9dd0>
   1ba98:	ldr	r5, [fp, #20]
   1ba9c:	mov	r0, r2
   1baa0:	mov	r2, sl
   1baa4:	mov	r3, r8
   1baa8:	mov	r1, r5
   1baac:	bl	3877c <__assert_fail@plt+0x268e8>
   1bab0:	ldr	r2, [fp, #16]
   1bab4:	mov	r6, r0
   1bab8:	mov	r3, r1
   1babc:	umull	r0, r1, r0, sl
   1bac0:	mla	r1, r6, r8, r1
   1bac4:	mla	r1, r3, sl, r1
   1bac8:	subs	r0, r2, r0
   1bacc:	sbc	r1, r5, r1
   1bad0:	orrs	r0, r0, r1
   1bad4:	bne	1bc64 <__assert_fail@plt+0x9dd0>
   1bad8:	ldr	r5, [sp, #44]	; 0x2c
   1badc:	mov	r1, r4
   1bae0:	mov	r2, r6
   1bae4:	mov	r8, r3
   1bae8:	mov	r0, r5
   1baec:	bl	3877c <__assert_fail@plt+0x268e8>
   1baf0:	mov	r7, r0
   1baf4:	mov	r9, r1
   1baf8:	umull	r0, r1, r0, r6
   1bafc:	mov	r2, #10
   1bb00:	mov	r3, r8
   1bb04:	mla	r1, r7, r8, r1
   1bb08:	subs	r0, r5, r0
   1bb0c:	mla	r1, r9, r6, r1
   1bb10:	umull	sl, r0, r0, r2
   1bb14:	mov	r2, r6
   1bb18:	sbc	r1, r4, r1
   1bb1c:	add	r1, r1, r1, lsl #2
   1bb20:	add	r5, r0, r1, lsl #1
   1bb24:	mov	r0, sl
   1bb28:	mov	r1, r5
   1bb2c:	bl	3877c <__assert_fail@plt+0x268e8>
   1bb30:	mov	r4, r0
   1bb34:	umull	r0, r2, r0, r6
   1bb38:	mla	r2, r4, r8, r2
   1bb3c:	subs	r0, sl, r0
   1bb40:	mla	r1, r1, r6, r2
   1bb44:	mov	r2, #2
   1bb48:	sbc	r1, r5, r1
   1bb4c:	subs	r3, r6, r0, lsl #1
   1bb50:	lsl	r1, r1, #1
   1bb54:	orr	r1, r1, r0, lsr #31
   1bb58:	sbcs	r3, r8, r1
   1bb5c:	orr	r5, r1, r0, lsl #1
   1bb60:	movwcc	r2, #3
   1bb64:	cmp	r5, #0
   1bb68:	movwne	r5, #1
   1bb6c:	rsbs	r0, r6, r0, lsl #1
   1bb70:	sbcs	r0, r1, r8
   1bb74:	movcs	r5, r2
   1bb78:	b	1bbf4 <__assert_fail@plt+0x9d60>
   1bb7c:	mov	r0, sl
   1bb80:	mov	r1, r8
   1bb84:	mov	r3, r5
   1bb88:	bl	3877c <__assert_fail@plt+0x268e8>
   1bb8c:	ldr	r2, [fp, #16]
   1bb90:	mov	r6, r0
   1bb94:	mov	r3, r1
   1bb98:	mov	r4, r9
   1bb9c:	umull	r0, r1, r0, r2
   1bba0:	mla	r1, r6, r5, r1
   1bba4:	subs	r0, sl, r0
   1bba8:	mla	r1, r3, r2, r1
   1bbac:	sbc	r1, r8, r1
   1bbb0:	orrs	r0, r0, r1
   1bbb4:	bne	1bc64 <__assert_fail@plt+0x9dd0>
   1bbb8:	ldr	r5, [sp, #44]	; 0x2c
   1bbbc:	mov	r2, r6
   1bbc0:	umull	r7, r0, r6, r5
   1bbc4:	mla	r0, r6, r4, r0
   1bbc8:	mla	r9, r3, r5, r0
   1bbcc:	mov	r0, r7
   1bbd0:	mov	r1, r9
   1bbd4:	bl	3877c <__assert_fail@plt+0x268e8>
   1bbd8:	ldr	r2, [fp, #16]
   1bbdc:	eor	r1, r1, r4
   1bbe0:	eor	r0, r0, r5
   1bbe4:	orrs	r0, r0, r1
   1bbe8:	bne	1bc64 <__assert_fail@plt+0x9dd0>
   1bbec:	mov	r5, #0
   1bbf0:	mov	r4, #0
   1bbf4:	ldr	r0, [sp, #36]	; 0x24
   1bbf8:	ldr	r2, [sp, #40]	; 0x28
   1bbfc:	mvn	r6, #0
   1bc00:	ands	r8, r0, #16
   1bc04:	beq	1bc18 <__assert_fail@plt+0x9d84>
   1bc08:	subs	r0, r7, r2
   1bc0c:	mov	r6, #0
   1bc10:	sbcs	r0, r9, #0
   1bc14:	bcs	1bf60 <__assert_fail@plt+0xa0cc>
   1bc18:	ldr	r0, [sp, #32]
   1bc1c:	mov	sl, r7
   1bc20:	str	r0, [sp, #44]	; 0x2c
   1bc24:	ldr	r0, [sp, #48]	; 0x30
   1bc28:	cmp	r0, #0
   1bc2c:	beq	1c0ac <__assert_fail@plt+0xa218>
   1bc30:	cmp	r0, #1
   1bc34:	bne	1bf54 <__assert_fail@plt+0xa0c0>
   1bc38:	rsbs	r1, r5, #0
   1bc3c:	mov	r0, #0
   1bc40:	and	r3, sl, #1
   1bc44:	ldr	r5, [sp, #44]	; 0x2c
   1bc48:	sbc	r0, r0, #0
   1bc4c:	eor	r1, r3, r1
   1bc50:	orrs	r0, r1, r0
   1bc54:	addne	r4, r4, #1
   1bc58:	cmp	r4, #5
   1bc5c:	bgt	1c0bc <__assert_fail@plt+0xa228>
   1bc60:	b	1c110 <__assert_fail@plt+0xa27c>
   1bc64:	ldr	r9, [fp, #20]
   1bc68:	mov	r0, r2
   1bc6c:	mov	r1, r9
   1bc70:	bl	38634 <__assert_fail@plt+0x267a0>
   1bc74:	vmov	d8, r0, r1
   1bc78:	ldr	r0, [sp, #44]	; 0x2c
   1bc7c:	mov	r1, r4
   1bc80:	bl	38634 <__assert_fail@plt+0x267a0>
   1bc84:	mov	r6, r0
   1bc88:	mov	r7, r1
   1bc8c:	mov	r0, sl
   1bc90:	mov	r1, r8
   1bc94:	bl	38634 <__assert_fail@plt+0x267a0>
   1bc98:	vmov	d17, r6, r7
   1bc9c:	ldr	r7, [sp, #36]	; 0x24
   1bca0:	vmov	d16, r0, r1
   1bca4:	vdiv.f64	d16, d16, d8
   1bca8:	vmul.f64	d8, d16, d17
   1bcac:	tst	r7, #16
   1bcb0:	bne	1bd24 <__assert_fail@plt+0x9e90>
   1bcb4:	ldr	r0, [sp, #48]	; 0x30
   1bcb8:	ldr	sl, [sp, #28]
   1bcbc:	cmp	r0, #1
   1bcc0:	beq	1beac <__assert_fail@plt+0xa018>
   1bcc4:	vldr	d16, [pc, #964]	; 1c090 <__assert_fail@plt+0xa1fc>
   1bcc8:	ldr	r8, [sp, #32]
   1bccc:	vcmpe.f64	d8, d16
   1bcd0:	vmrs	APSR_nzcv, fpscr
   1bcd4:	bpl	1beb0 <__assert_fail@plt+0xa01c>
   1bcd8:	mov	r6, r0
   1bcdc:	vmov	r0, r1, d8
   1bce0:	bl	387c8 <__assert_fail@plt+0x26934>
   1bce4:	mov	r4, r0
   1bce8:	mov	r5, r1
   1bcec:	bl	38634 <__assert_fail@plt+0x267a0>
   1bcf0:	vmov	d16, r0, r1
   1bcf4:	clz	r0, r6
   1bcf8:	mov	r2, #0
   1bcfc:	vcmp.f64	d8, d16
   1bd00:	lsr	r0, r0, #5
   1bd04:	vmrs	APSR_nzcv, fpscr
   1bd08:	movwne	r2, #1
   1bd0c:	and	r0, r0, r2
   1bd10:	adds	r0, r0, r4
   1bd14:	adc	r1, r5, #0
   1bd18:	bl	38634 <__assert_fail@plt+0x267a0>
   1bd1c:	vmov	d8, r0, r1
   1bd20:	b	1beb0 <__assert_fail@plt+0xa01c>
   1bd24:	ldr	r0, [sp, #40]	; 0x28
   1bd28:	vmov.f64	d16, #112	; 0x3f800000  1.0
   1bd2c:	mov	r6, #0
   1bd30:	vmov	s0, r0
   1bd34:	vcvt.f64.u32	d17, s0
   1bd38:	ldr	sl, [sp, #28]
   1bd3c:	add	r6, r6, #1
   1bd40:	vmul.f64	d16, d16, d17
   1bd44:	cmp	r6, #7
   1bd48:	vmulls.f64	d18, d16, d17
   1bd4c:	vcmpels.f64	d18, d8
   1bd50:	vmrsls	APSR_nzcv, fpscr
   1bd54:	bls	1bd3c <__assert_fail@plt+0x9ea8>
   1bd58:	ldr	r0, [sp, #48]	; 0x30
   1bd5c:	ldr	r8, [sp, #32]
   1bd60:	ldr	r5, [sp, #16]
   1bd64:	vdiv.f64	d8, d8, d16
   1bd68:	vmov.f64	d16, d8
   1bd6c:	cmp	r0, #1
   1bd70:	beq	1bdd4 <__assert_fail@plt+0x9f40>
   1bd74:	vldr	d16, [pc, #788]	; 1c090 <__assert_fail@plt+0xa1fc>
   1bd78:	vcmpe.f64	d8, d16
   1bd7c:	vmov.f64	d16, d8
   1bd80:	vmrs	APSR_nzcv, fpscr
   1bd84:	bpl	1bdd4 <__assert_fail@plt+0x9f40>
   1bd88:	vmov	r0, r1, d8
   1bd8c:	bl	387c8 <__assert_fail@plt+0x26934>
   1bd90:	mov	r4, r0
   1bd94:	mov	r5, r1
   1bd98:	bl	38634 <__assert_fail@plt+0x267a0>
   1bd9c:	vmov	d16, r0, r1
   1bda0:	ldr	r0, [sp, #48]	; 0x30
   1bda4:	mov	r2, #0
   1bda8:	vcmp.f64	d8, d16
   1bdac:	vmrs	APSR_nzcv, fpscr
   1bdb0:	movwne	r2, #1
   1bdb4:	clz	r0, r0
   1bdb8:	lsr	r0, r0, #5
   1bdbc:	and	r0, r0, r2
   1bdc0:	adds	r0, r0, r4
   1bdc4:	adc	r1, r5, #0
   1bdc8:	ldr	r5, [sp, #16]
   1bdcc:	bl	38634 <__assert_fail@plt+0x267a0>
   1bdd0:	vmov	d16, r0, r1
   1bdd4:	movw	r3, #41594	; 0xa27a
   1bdd8:	mov	r0, sl
   1bddc:	mov	r1, #1
   1bde0:	mvn	r2, #0
   1bde4:	vstr	d16, [sp]
   1bde8:	movt	r3, #3
   1bdec:	bl	11cc0 <__sprintf_chk@plt>
   1bdf0:	ldr	r1, [sp, #24]
   1bdf4:	mov	r0, #3
   1bdf8:	cmp	r1, #0
   1bdfc:	movwne	r0, #2
   1be00:	add	r4, r0, r5
   1be04:	mov	r0, sl
   1be08:	bl	11c78 <strlen@plt>
   1be0c:	cmp	r4, r0
   1be10:	bcc	1be34 <__assert_fail@plt+0x9fa0>
   1be14:	mov	r2, r0
   1be18:	add	r5, r5, #1
   1be1c:	tst	r7, #8
   1be20:	beq	1bee0 <__assert_fail@plt+0xa04c>
   1be24:	add	r0, sl, r2
   1be28:	ldrb	r0, [r0, #-1]
   1be2c:	cmp	r0, #48	; 0x30
   1be30:	bne	1bee0 <__assert_fail@plt+0xa04c>
   1be34:	ldr	r0, [sp, #48]	; 0x30
   1be38:	vmov.f64	d9, #36	; 0x41200000  10.0
   1be3c:	vmul.f64	d8, d8, d9
   1be40:	cmp	r0, #1
   1be44:	beq	1bea0 <__assert_fail@plt+0xa00c>
   1be48:	vldr	d16, [pc, #576]	; 1c090 <__assert_fail@plt+0xa1fc>
   1be4c:	vcmpe.f64	d8, d16
   1be50:	vmrs	APSR_nzcv, fpscr
   1be54:	bpl	1bea0 <__assert_fail@plt+0xa00c>
   1be58:	vmov	r0, r1, d8
   1be5c:	bl	387c8 <__assert_fail@plt+0x26934>
   1be60:	mov	r4, r0
   1be64:	mov	r5, r1
   1be68:	bl	38634 <__assert_fail@plt+0x267a0>
   1be6c:	vmov	d16, r0, r1
   1be70:	ldr	r0, [sp, #48]	; 0x30
   1be74:	mov	r2, #0
   1be78:	vcmp.f64	d8, d16
   1be7c:	vmrs	APSR_nzcv, fpscr
   1be80:	movwne	r2, #1
   1be84:	clz	r0, r0
   1be88:	lsr	r0, r0, #5
   1be8c:	and	r0, r0, r2
   1be90:	adds	r0, r0, r4
   1be94:	adc	r1, r5, #0
   1be98:	bl	38634 <__assert_fail@plt+0x267a0>
   1be9c:	vmov	d8, r0, r1
   1bea0:	vdiv.f64	d16, d8, d9
   1bea4:	vstr	d16, [sp]
   1bea8:	b	1beb8 <__assert_fail@plt+0xa024>
   1beac:	ldr	r8, [sp, #32]
   1beb0:	mvn	r6, #0
   1beb4:	vstr	d8, [sp]
   1beb8:	movw	r3, #41588	; 0xa274
   1bebc:	mov	r0, sl
   1bec0:	mov	r1, #1
   1bec4:	mvn	r2, #0
   1bec8:	movt	r3, #3
   1becc:	bl	11cc0 <__sprintf_chk@plt>
   1bed0:	mov	r0, sl
   1bed4:	bl	11c78 <strlen@plt>
   1bed8:	mov	r2, r0
   1bedc:	mov	r5, #0
   1bee0:	sub	r4, r8, r2
   1bee4:	mov	r1, sl
   1bee8:	mov	r0, r4
   1beec:	bl	11a50 <memmove@plt>
   1bef0:	sub	r5, r8, r5
   1bef4:	tst	r7, #4
   1bef8:	bne	1c164 <__assert_fail@plt+0xa2d0>
   1befc:	ldr	r3, [sp, #40]	; 0x28
   1bf00:	ldr	r5, [fp, #16]
   1bf04:	tst	r7, #128	; 0x80
   1bf08:	beq	1c280 <__assert_fail@plt+0xa3ec>
   1bf0c:	cmn	r6, #1
   1bf10:	bgt	1c020 <__assert_fail@plt+0xa18c>
   1bf14:	subs	r0, r5, #2
   1bf18:	mov	r6, #0
   1bf1c:	sbcs	r0, r9, #0
   1bf20:	bcc	1c020 <__assert_fail@plt+0xa18c>
   1bf24:	mov	r0, #0
   1bf28:	mov	r1, #1
   1bf2c:	mov	r6, #0
   1bf30:	cmp	r6, #7
   1bf34:	beq	1c01c <__assert_fail@plt+0xa188>
   1bf38:	umull	r1, r2, r1, r3
   1bf3c:	add	r6, r6, #1
   1bf40:	mla	r0, r0, r3, r2
   1bf44:	subs	r2, r1, r5
   1bf48:	sbcs	r2, r0, r9
   1bf4c:	bcc	1bf30 <__assert_fail@plt+0xa09c>
   1bf50:	b	1c020 <__assert_fail@plt+0xa18c>
   1bf54:	ldr	r8, [sp, #32]
   1bf58:	ldr	r5, [sp, #44]	; 0x2c
   1bf5c:	b	1c114 <__assert_fail@plt+0xa280>
   1bf60:	mov	r6, #0
   1bf64:	mov	r0, r7
   1bf68:	mov	r1, r9
   1bf6c:	mov	r3, #0
   1bf70:	bl	3877c <__assert_fail@plt+0x268e8>
   1bf74:	ldr	r2, [sp, #40]	; 0x28
   1bf78:	mov	sl, r0
   1bf7c:	mov	r9, r1
   1bf80:	mls	r0, r0, r2, r7
   1bf84:	add	r0, r0, r0, lsl #2
   1bf88:	add	r0, r4, r0, lsl #1
   1bf8c:	udiv	r4, r0, r2
   1bf90:	mls	r0, r4, r2, r0
   1bf94:	lsl	r0, r0, #1
   1bf98:	add	r0, r0, r5, lsr #1
   1bf9c:	cmp	r0, r2
   1bfa0:	bcs	1bfc4 <__assert_fail@plt+0xa130>
   1bfa4:	add	r1, r0, r5
   1bfa8:	cmn	r0, r5
   1bfac:	movwne	r1, #1
   1bfb0:	mov	r5, r1
   1bfb4:	add	r6, r6, #1
   1bfb8:	cmp	r6, #7
   1bfbc:	bls	1bfe0 <__assert_fail@plt+0xa14c>
   1bfc0:	b	1bff0 <__assert_fail@plt+0xa15c>
   1bfc4:	add	r0, r0, r5
   1bfc8:	mov	r5, #2
   1bfcc:	cmp	r2, r0
   1bfd0:	movwcc	r5, #3
   1bfd4:	add	r6, r6, #1
   1bfd8:	cmp	r6, #7
   1bfdc:	bhi	1bff0 <__assert_fail@plt+0xa15c>
   1bfe0:	subs	r0, sl, r2
   1bfe4:	mov	r7, sl
   1bfe8:	sbcs	r0, r9, #0
   1bfec:	bcs	1bf64 <__assert_fail@plt+0xa0d0>
   1bff0:	rsbs	r0, sl, #9
   1bff4:	rscs	r0, r9, #0
   1bff8:	bcc	1c098 <__assert_fail@plt+0xa204>
   1bffc:	ldr	r0, [sp, #48]	; 0x30
   1c000:	cmp	r0, #1
   1c004:	bne	1c29c <__assert_fail@plt+0xa408>
   1c008:	and	r0, r4, #1
   1c00c:	add	r0, r5, r0
   1c010:	cmp	r0, #2
   1c014:	bhi	1c2ac <__assert_fail@plt+0xa418>
   1c018:	b	1c2e0 <__assert_fail@plt+0xa44c>
   1c01c:	mov	r6, #8
   1c020:	and	r0, r7, #256	; 0x100
   1c024:	tst	r7, #64	; 0x40
   1c028:	orrsne	r1, r6, r0
   1c02c:	movne	r1, #32
   1c030:	addne	r8, sl, #648	; 0x288
   1c034:	strbne	r1, [sl, #647]	; 0x287
   1c038:	cmp	r6, #0
   1c03c:	beq	1c064 <__assert_fail@plt+0xa1d0>
   1c040:	ldr	r1, [sp, #24]
   1c044:	cmp	r1, #0
   1c048:	moveq	r1, #107	; 0x6b
   1c04c:	cmpeq	r6, #1
   1c050:	beq	1c060 <__assert_fail@plt+0xa1cc>
   1c054:	movw	r1, #41644	; 0xa2ac
   1c058:	movt	r1, #3
   1c05c:	ldrb	r1, [r1, r6]
   1c060:	strb	r1, [r8], #1
   1c064:	cmp	r0, #0
   1c068:	beq	1c280 <__assert_fail@plt+0xa3ec>
   1c06c:	ldr	r0, [sp, #24]
   1c070:	cmp	r0, #0
   1c074:	cmpne	r6, #0
   1c078:	movne	r0, #105	; 0x69
   1c07c:	strbne	r0, [r8], #1
   1c080:	mov	r0, #66	; 0x42
   1c084:	strb	r0, [r8], #1
   1c088:	b	1c280 <__assert_fail@plt+0xa3ec>
   1c08c:	nop	{0}
   1c090:	andeq	r0, r0, r0
   1c094:	mvnsmi	r0, #0
   1c098:	ldr	r0, [sp, #32]
   1c09c:	str	r0, [sp, #44]	; 0x2c
   1c0a0:	ldr	r0, [sp, #48]	; 0x30
   1c0a4:	cmp	r0, #0
   1c0a8:	bne	1bc30 <__assert_fail@plt+0x9d9c>
   1c0ac:	add	r0, r4, r5
   1c0b0:	ldr	r5, [sp, #44]	; 0x2c
   1c0b4:	cmp	r0, #1
   1c0b8:	blt	1c110 <__assert_fail@plt+0xa27c>
   1c0bc:	adds	sl, sl, #1
   1c0c0:	adc	r9, r9, #0
   1c0c4:	cmp	r6, #7
   1c0c8:	bgt	1c110 <__assert_fail@plt+0xa27c>
   1c0cc:	cmp	r8, #0
   1c0d0:	beq	1c110 <__assert_fail@plt+0xa27c>
   1c0d4:	eor	r0, sl, r2
   1c0d8:	orrs	r0, r0, r9
   1c0dc:	ldreq	r0, [sp, #36]	; 0x24
   1c0e0:	addeq	r6, r6, #1
   1c0e4:	moveq	r9, #0
   1c0e8:	moveq	sl, #1
   1c0ec:	tsteq	r0, #8
   1c0f0:	bne	1c110 <__assert_fail@plt+0xa27c>
   1c0f4:	ldr	r2, [sp, #16]
   1c0f8:	mov	r0, #48	; 0x30
   1c0fc:	ldr	r1, [sp, #12]
   1c100:	strb	r0, [r5, #-1]!
   1c104:	sub	r5, r5, r2
   1c108:	mov	r0, r5
   1c10c:	bl	11a8c <memcpy@plt>
   1c110:	ldr	r8, [sp, #32]
   1c114:	mov	r4, r5
   1c118:	mov	r0, sl
   1c11c:	mov	r1, r9
   1c120:	mov	r2, #10
   1c124:	mov	r3, #0
   1c128:	bl	3877c <__assert_fail@plt+0x268e8>
   1c12c:	add	r2, r0, r0, lsl #2
   1c130:	sub	r2, sl, r2, lsl #1
   1c134:	orr	r2, r2, #48	; 0x30
   1c138:	strb	r2, [r4, #-1]!
   1c13c:	rsbs	r2, sl, #9
   1c140:	mov	sl, r0
   1c144:	rscs	r2, r9, #0
   1c148:	mov	r9, r1
   1c14c:	bcc	1c118 <__assert_fail@plt+0xa284>
   1c150:	ldr	r7, [sp, #36]	; 0x24
   1c154:	ldr	r9, [fp, #20]
   1c158:	ldr	sl, [sp, #28]
   1c15c:	tst	r7, #4
   1c160:	beq	1befc <__assert_fail@plt+0xa068>
   1c164:	ldr	r0, [sp, #52]	; 0x34
   1c168:	mov	r7, r5
   1c16c:	str	r6, [sp, #16]
   1c170:	sub	r5, r5, r4
   1c174:	bl	11c78 <strlen@plt>
   1c178:	add	r8, sp, #56	; 0x38
   1c17c:	str	r0, [sp, #48]	; 0x30
   1c180:	mov	r1, r4
   1c184:	mov	r2, r5
   1c188:	mov	r0, r8
   1c18c:	bl	11a8c <memcpy@plt>
   1c190:	ldr	r0, [sp, #20]
   1c194:	ldrb	r6, [r0]
   1c198:	cmp	r6, #255	; 0xff
   1c19c:	mov	r9, r6
   1c1a0:	moveq	r9, r5
   1c1a4:	cmp	r6, #0
   1c1a8:	mvneq	r9, #0
   1c1ac:	cmp	r9, r5
   1c1b0:	movhi	r9, r5
   1c1b4:	sub	r4, r7, r9
   1c1b8:	sub	r7, r5, r9
   1c1bc:	mov	r2, r9
   1c1c0:	add	r1, r8, r7
   1c1c4:	mov	r0, r4
   1c1c8:	bl	11a8c <memcpy@plt>
   1c1cc:	cmp	r7, #0
   1c1d0:	beq	1c25c <__assert_fail@plt+0xa3c8>
   1c1d4:	clz	r0, r6
   1c1d8:	ldr	r8, [sp, #20]
   1c1dc:	lsr	sl, r0, #5
   1c1e0:	ldr	r0, [sp, #48]	; 0x30
   1c1e4:	rsb	r0, r0, #0
   1c1e8:	str	r0, [sp, #44]	; 0x2c
   1c1ec:	ldr	r0, [sp, #44]	; 0x2c
   1c1f0:	ldr	r1, [sp, #52]	; 0x34
   1c1f4:	ldr	r2, [sp, #48]	; 0x30
   1c1f8:	add	r4, r4, r0
   1c1fc:	mov	r0, r4
   1c200:	bl	11a8c <memcpy@plt>
   1c204:	tst	sl, #1
   1c208:	add	r0, sp, #56	; 0x38
   1c20c:	addeq	r8, r8, #1
   1c210:	ldrb	r6, [r8]
   1c214:	cmp	r6, #255	; 0xff
   1c218:	mov	r5, r6
   1c21c:	moveq	r5, r7
   1c220:	cmp	r6, #0
   1c224:	moveq	r5, r9
   1c228:	cmp	r7, r5
   1c22c:	movcc	r5, r7
   1c230:	sub	r7, r7, r5
   1c234:	sub	r4, r4, r5
   1c238:	mov	r2, r5
   1c23c:	add	r1, r0, r7
   1c240:	mov	r0, r4
   1c244:	bl	11a8c <memcpy@plt>
   1c248:	clz	r0, r6
   1c24c:	cmp	r7, #0
   1c250:	mov	r9, r5
   1c254:	lsr	sl, r0, #5
   1c258:	bne	1c1ec <__assert_fail@plt+0xa358>
   1c25c:	ldr	r8, [sp, #32]
   1c260:	ldr	sl, [sp, #28]
   1c264:	ldr	r7, [sp, #36]	; 0x24
   1c268:	ldr	r3, [sp, #40]	; 0x28
   1c26c:	ldr	r9, [fp, #20]
   1c270:	ldr	r5, [fp, #16]
   1c274:	ldr	r6, [sp, #16]
   1c278:	tst	r7, #128	; 0x80
   1c27c:	bne	1bf0c <__assert_fail@plt+0xa078>
   1c280:	mov	r0, #0
   1c284:	strb	r0, [r8]
   1c288:	mov	r0, r4
   1c28c:	sub	sp, fp, #48	; 0x30
   1c290:	vpop	{d8-d9}
   1c294:	add	sp, sp, #4
   1c298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c29c:	cmp	r0, #0
   1c2a0:	bne	1c2e0 <__assert_fail@plt+0xa44c>
   1c2a4:	cmp	r5, #0
   1c2a8:	beq	1c2e0 <__assert_fail@plt+0xa44c>
   1c2ac:	adds	r0, sl, #1
   1c2b0:	add	r4, r4, #1
   1c2b4:	mov	r5, #0
   1c2b8:	adc	r1, r9, #0
   1c2bc:	cmp	r4, #10
   1c2c0:	bne	1c2e0 <__assert_fail@plt+0xa44c>
   1c2c4:	rsbs	r3, r0, #9
   1c2c8:	mov	r4, #0
   1c2cc:	mov	sl, r0
   1c2d0:	mov	r9, r1
   1c2d4:	mov	r5, #0
   1c2d8:	rscs	r3, r1, #0
   1c2dc:	bcc	1c34c <__assert_fail@plt+0xa4b8>
   1c2e0:	ldr	r0, [sp, #36]	; 0x24
   1c2e4:	tst	r0, #8
   1c2e8:	beq	1c310 <__assert_fail@plt+0xa47c>
   1c2ec:	cmp	r4, #0
   1c2f0:	bne	1c310 <__assert_fail@plt+0xa47c>
   1c2f4:	ldr	r0, [sp, #32]
   1c2f8:	str	r0, [sp, #44]	; 0x2c
   1c2fc:	mov	r4, #0
   1c300:	ldr	r0, [sp, #48]	; 0x30
   1c304:	cmp	r0, #0
   1c308:	bne	1bc30 <__assert_fail@plt+0x9d9c>
   1c30c:	b	1c0ac <__assert_fail@plt+0xa218>
   1c310:	ldr	r1, [sp, #28]
   1c314:	ldr	r2, [sp, #16]
   1c318:	add	r0, r4, #48	; 0x30
   1c31c:	strb	r0, [r1, #646]!	; 0x286
   1c320:	sub	r0, r1, r2
   1c324:	ldr	r1, [sp, #12]
   1c328:	str	r0, [sp, #44]	; 0x2c
   1c32c:	bl	11a8c <memcpy@plt>
   1c330:	ldr	r2, [sp, #40]	; 0x28
   1c334:	mov	r5, #0
   1c338:	mov	r4, #0
   1c33c:	ldr	r0, [sp, #48]	; 0x30
   1c340:	cmp	r0, #0
   1c344:	bne	1bc30 <__assert_fail@plt+0x9d9c>
   1c348:	b	1c0ac <__assert_fail@plt+0xa218>
   1c34c:	ldr	r0, [sp, #32]
   1c350:	mov	r5, #0
   1c354:	mov	sl, #10
   1c358:	mov	r9, #0
   1c35c:	str	r0, [sp, #44]	; 0x2c
   1c360:	ldr	r0, [sp, #48]	; 0x30
   1c364:	cmp	r0, #0
   1c368:	bne	1bc30 <__assert_fail@plt+0x9d9c>
   1c36c:	b	1c0ac <__assert_fail@plt+0xa218>
   1c370:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c374:	add	fp, sp, #24
   1c378:	sub	sp, sp, #8
   1c37c:	mov	r4, r2
   1c380:	mov	r8, r1
   1c384:	cmp	r0, #0
   1c388:	bne	1c3b4 <__assert_fail@plt+0xa520>
   1c38c:	movw	r0, #38444	; 0x962c
   1c390:	movt	r0, #3
   1c394:	bl	11bdc <getenv@plt>
   1c398:	cmp	r0, #0
   1c39c:	bne	1c3b4 <__assert_fail@plt+0xa520>
   1c3a0:	movw	r0, #41600	; 0xa280
   1c3a4:	movt	r0, #3
   1c3a8:	bl	11bdc <getenv@plt>
   1c3ac:	cmp	r0, #0
   1c3b0:	beq	1c4e0 <__assert_fail@plt+0xa64c>
   1c3b4:	mov	r6, r0
   1c3b8:	movw	r7, #41668	; 0xa2c4
   1c3bc:	movw	r1, #41656	; 0xa2b8
   1c3c0:	mov	r3, #4
   1c3c4:	ldrb	r5, [r6], #1
   1c3c8:	movt	r7, #3
   1c3cc:	movt	r1, #3
   1c3d0:	mov	r2, r7
   1c3d4:	cmp	r5, #39	; 0x27
   1c3d8:	movne	r6, r0
   1c3dc:	mov	r0, r6
   1c3e0:	bl	14238 <__assert_fail@plt+0x23a4>
   1c3e4:	sub	r1, r5, #39	; 0x27
   1c3e8:	cmp	r0, #0
   1c3ec:	clz	r1, r1
   1c3f0:	lsr	r1, r1, #5
   1c3f4:	lsl	r5, r1, #2
   1c3f8:	blt	1c430 <__assert_fail@plt+0xa59c>
   1c3fc:	ldr	r0, [r7, r0, lsl #2]
   1c400:	mov	r2, #1
   1c404:	mov	r1, #0
   1c408:	str	r2, [r4]
   1c40c:	str	r1, [r4, #4]
   1c410:	orr	r1, r0, r5
   1c414:	mov	r0, #0
   1c418:	str	r1, [r8]
   1c41c:	ldrd	r2, [r4]
   1c420:	orrs	r1, r2, r3
   1c424:	beq	1c46c <__assert_fail@plt+0xa5d8>
   1c428:	sub	sp, fp, #24
   1c42c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c430:	movw	r0, #41610	; 0xa28a
   1c434:	add	r1, sp, #4
   1c438:	mov	r2, #0
   1c43c:	mov	r3, r4
   1c440:	mov	r7, #0
   1c444:	movt	r0, #3
   1c448:	str	r0, [sp]
   1c44c:	mov	r0, r6
   1c450:	bl	362ac <__assert_fail@plt+0x24418>
   1c454:	cmp	r0, #0
   1c458:	beq	1c49c <__assert_fail@plt+0xa608>
   1c45c:	str	r7, [r8]
   1c460:	ldrd	r2, [r4]
   1c464:	orrs	r1, r2, r3
   1c468:	bne	1c428 <__assert_fail@plt+0xa594>
   1c46c:	movw	r0, #41628	; 0xa29c
   1c470:	movt	r0, #3
   1c474:	bl	11bdc <getenv@plt>
   1c478:	cmp	r0, #0
   1c47c:	mov	r2, #512	; 0x200
   1c480:	mov	r0, #4
   1c484:	mov	r1, #0
   1c488:	movweq	r2, #1024	; 0x400
   1c48c:	str	r2, [r4]
   1c490:	str	r1, [r4, #4]
   1c494:	sub	sp, fp, #24
   1c498:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c49c:	ldrb	r0, [r6]
   1c4a0:	sub	r0, r0, #48	; 0x30
   1c4a4:	uxtb	r0, r0
   1c4a8:	cmp	r0, #10
   1c4ac:	bcc	1c4d8 <__assert_fail@plt+0xa644>
   1c4b0:	ldr	r0, [sp, #4]
   1c4b4:	cmp	r0, r6
   1c4b8:	beq	1c508 <__assert_fail@plt+0xa674>
   1c4bc:	ldrb	r2, [r6, #1]
   1c4c0:	add	r1, r6, #1
   1c4c4:	mov	r6, r1
   1c4c8:	sub	r2, r2, #48	; 0x30
   1c4cc:	uxtb	r2, r2
   1c4d0:	cmp	r2, #10
   1c4d4:	bcs	1c4b4 <__assert_fail@plt+0xa620>
   1c4d8:	mov	r1, r5
   1c4dc:	b	1c414 <__assert_fail@plt+0xa580>
   1c4e0:	movw	r0, #41628	; 0xa29c
   1c4e4:	movt	r0, #3
   1c4e8:	bl	11bdc <getenv@plt>
   1c4ec:	mov	r2, #512	; 0x200
   1c4f0:	cmp	r0, #0
   1c4f4:	mov	r1, #0
   1c4f8:	movweq	r2, #1024	; 0x400
   1c4fc:	str	r2, [r4]
   1c500:	str	r1, [r4, #4]
   1c504:	b	1c414 <__assert_fail@plt+0xa580>
   1c508:	ldrb	r2, [r0, #-1]
   1c50c:	orr	r1, r5, #384	; 0x180
   1c510:	cmp	r2, #66	; 0x42
   1c514:	mov	r2, r1
   1c518:	orrne	r2, r5, #128	; 0x80
   1c51c:	bne	1c530 <__assert_fail@plt+0xa69c>
   1c520:	ldrb	r0, [r0, #-2]
   1c524:	cmp	r0, #105	; 0x69
   1c528:	orreq	r1, r2, #32
   1c52c:	b	1c414 <__assert_fail@plt+0xa580>
   1c530:	orr	r1, r2, #32
   1c534:	b	1c414 <__assert_fail@plt+0xa580>
   1c538:	mov	r3, #1
   1c53c:	mov	r2, #0
   1c540:	vdup.32	q8, r1
   1c544:	strb	r3, [r0, #28]
   1c548:	str	r2, [r0, #20]
   1c54c:	str	r2, [r0, #24]
   1c550:	vst1.32	{d16-d17}, [r0]!
   1c554:	str	r1, [r0]
   1c558:	bx	lr
   1c55c:	ldrb	r0, [r0, #28]
   1c560:	bx	lr
   1c564:	push	{fp, lr}
   1c568:	mov	fp, sp
   1c56c:	ldrb	r3, [r0, #28]
   1c570:	ldr	r2, [r0, #20]
   1c574:	eor	lr, r3, #1
   1c578:	add	r2, r2, lr
   1c57c:	and	r3, r2, #3
   1c580:	ldr	ip, [r0, r3, lsl #2]
   1c584:	str	r1, [r0, r3, lsl #2]
   1c588:	str	r3, [r0, #20]
   1c58c:	ldr	r1, [r0, #24]
   1c590:	cmp	r3, r1
   1c594:	addeq	r1, r2, lr
   1c598:	andeq	r1, r1, #3
   1c59c:	streq	r1, [r0, #24]
   1c5a0:	mov	r1, #0
   1c5a4:	strb	r1, [r0, #28]
   1c5a8:	mov	r0, ip
   1c5ac:	pop	{fp, pc}
   1c5b0:	ldrb	r1, [r0, #28]
   1c5b4:	cmp	r1, #0
   1c5b8:	bne	1c5fc <__assert_fail@plt+0xa768>
   1c5bc:	ldr	r3, [r0, #20]
   1c5c0:	ldr	r2, [r0, #16]
   1c5c4:	ldr	r1, [r0, r3, lsl #2]
   1c5c8:	str	r2, [r0, r3, lsl #2]
   1c5cc:	ldr	r2, [r0, #20]
   1c5d0:	ldr	r3, [r0, #24]
   1c5d4:	cmp	r2, r3
   1c5d8:	moveq	r2, #1
   1c5dc:	strbeq	r2, [r0, #28]
   1c5e0:	moveq	r0, r1
   1c5e4:	bxeq	lr
   1c5e8:	sub	r2, r2, #1
   1c5ec:	and	r2, r2, #3
   1c5f0:	str	r2, [r0, #20]
   1c5f4:	mov	r0, r1
   1c5f8:	bx	lr
   1c5fc:	push	{fp, lr}
   1c600:	mov	fp, sp
   1c604:	bl	11e58 <abort@plt>
   1c608:	push	{r4, r5, r6, sl, fp, lr}
   1c60c:	add	fp, sp, #16
   1c610:	sub	sp, sp, #8
   1c614:	mov	r5, r0
   1c618:	mov	r0, #12
   1c61c:	bl	36fb4 <__assert_fail@plt+0x25120>
   1c620:	mov	r4, r0
   1c624:	cmp	r0, #0
   1c628:	beq	1c668 <__assert_fail@plt+0xa7d4>
   1c62c:	movw	r0, #31504	; 0x7b10
   1c630:	movw	r2, #50828	; 0xc68c
   1c634:	movw	r3, #50848	; 0xc6a0
   1c638:	mov	r1, #0
   1c63c:	mov	r6, #0
   1c640:	movt	r0, #1
   1c644:	movt	r2, #1
   1c648:	movt	r3, #1
   1c64c:	str	r0, [sp]
   1c650:	movw	r0, #1021	; 0x3fd
   1c654:	bl	1aa88 <__assert_fail@plt+0x8bf4>
   1c658:	cmp	r0, #0
   1c65c:	str	r0, [r4]
   1c660:	beq	1c674 <__assert_fail@plt+0xa7e0>
   1c664:	stmib	r4, {r5, r6}
   1c668:	mov	r0, r4
   1c66c:	sub	sp, fp, #16
   1c670:	pop	{r4, r5, r6, sl, fp, pc}
   1c674:	mov	r0, r4
   1c678:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1c67c:	mov	r4, #0
   1c680:	mov	r0, r4
   1c684:	sub	sp, fp, #16
   1c688:	pop	{r4, r5, r6, sl, fp, pc}
   1c68c:	ldm	r0, {r0, r3}
   1c690:	eor	r0, r0, r3
   1c694:	udiv	r2, r0, r1
   1c698:	mls	r0, r2, r1, r0
   1c69c:	bx	lr
   1c6a0:	ldrd	r2, [r1]
   1c6a4:	ldrd	r0, [r0]
   1c6a8:	eor	r1, r1, r3
   1c6ac:	eor	r0, r0, r2
   1c6b0:	orr	r0, r0, r1
   1c6b4:	clz	r0, r0
   1c6b8:	lsr	r0, r0, #5
   1c6bc:	bx	lr
   1c6c0:	push	{r4, sl, fp, lr}
   1c6c4:	add	fp, sp, #8
   1c6c8:	mov	r4, r0
   1c6cc:	ldr	r0, [r0]
   1c6d0:	bl	1ada4 <__assert_fail@plt+0x8f10>
   1c6d4:	ldr	r0, [r4, #8]
   1c6d8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1c6dc:	mov	r0, r4
   1c6e0:	pop	{r4, sl, fp, lr}
   1c6e4:	b	17b10 <__assert_fail@plt+0x5c7c>
   1c6e8:	push	{r4, r5, r6, r7, fp, lr}
   1c6ec:	add	fp, sp, #16
   1c6f0:	ldr	r4, [r0, #8]
   1c6f4:	mov	r7, r3
   1c6f8:	mov	r6, r2
   1c6fc:	mov	r5, r0
   1c700:	cmp	r4, #0
   1c704:	beq	1c724 <__assert_fail@plt+0xa890>
   1c708:	ldrd	r0, [r4]
   1c70c:	eor	r1, r1, r7
   1c710:	eor	r0, r0, r6
   1c714:	orrs	r0, r0, r1
   1c718:	ldreq	r0, [r4, #8]
   1c71c:	popeq	{r4, r5, r6, r7, fp, pc}
   1c720:	b	1c73c <__assert_fail@plt+0xa8a8>
   1c724:	mov	r0, #16
   1c728:	bl	36fb4 <__assert_fail@plt+0x25120>
   1c72c:	cmp	r0, #0
   1c730:	str	r0, [r5, #8]
   1c734:	beq	1c780 <__assert_fail@plt+0xa8ec>
   1c738:	mov	r4, r0
   1c73c:	strd	r6, [r4]
   1c740:	mov	r1, r4
   1c744:	ldr	r0, [r5]
   1c748:	bl	1b6c0 <__assert_fail@plt+0x982c>
   1c74c:	cmp	r0, #0
   1c750:	beq	1c780 <__assert_fail@plt+0xa8ec>
   1c754:	cmp	r4, r0
   1c758:	ldrne	r0, [r0, #8]
   1c75c:	strne	r0, [r4, #8]
   1c760:	popne	{r4, r5, r6, r7, fp, pc}
   1c764:	mov	r0, #0
   1c768:	str	r0, [r5, #8]
   1c76c:	ldr	r0, [r5, #4]
   1c770:	add	r1, r0, #1
   1c774:	str	r1, [r5, #4]
   1c778:	str	r0, [r4, #8]
   1c77c:	pop	{r4, r5, r6, r7, fp, pc}
   1c780:	mvn	r0, #0
   1c784:	pop	{r4, r5, r6, r7, fp, pc}
   1c788:	push	{r4, r5, r6, sl, fp, lr}
   1c78c:	add	fp, sp, #16
   1c790:	mov	r5, r0
   1c794:	mov	r0, #0
   1c798:	mov	r4, r1
   1c79c:	add	r6, r2, #19
   1c7a0:	cmp	r1, #0
   1c7a4:	strb	r0, [r2, #20]
   1c7a8:	blt	1c7f8 <__assert_fail@plt+0xa964>
   1c7ac:	mov	r0, r5
   1c7b0:	mov	r1, r4
   1c7b4:	mov	r2, #10
   1c7b8:	mov	r3, #0
   1c7bc:	bl	386a8 <__assert_fail@plt+0x26814>
   1c7c0:	add	r2, r0, r0, lsl #2
   1c7c4:	sub	r2, r5, r2, lsl #1
   1c7c8:	add	r2, r2, #48	; 0x30
   1c7cc:	strb	r2, [r6], #-1
   1c7d0:	adds	r2, r5, #9
   1c7d4:	mov	r5, r0
   1c7d8:	adc	r3, r4, #0
   1c7dc:	rsbs	r2, r2, #18
   1c7e0:	mov	r4, r1
   1c7e4:	rscs	r2, r3, #0
   1c7e8:	bcc	1c7ac <__assert_fail@plt+0xa918>
   1c7ec:	add	r6, r6, #1
   1c7f0:	mov	r0, r6
   1c7f4:	pop	{r4, r5, r6, sl, fp, pc}
   1c7f8:	mov	r0, r5
   1c7fc:	mov	r1, r4
   1c800:	mov	r2, #10
   1c804:	mov	r3, #0
   1c808:	bl	386a8 <__assert_fail@plt+0x26814>
   1c80c:	add	r2, r0, r0, lsl #2
   1c810:	rsb	r2, r5, r2, lsl #1
   1c814:	add	r2, r2, #48	; 0x30
   1c818:	strb	r2, [r6], #-1
   1c81c:	adds	r2, r5, #9
   1c820:	mov	r5, r0
   1c824:	adc	r3, r4, #0
   1c828:	rsbs	r2, r2, #18
   1c82c:	mov	r4, r1
   1c830:	rscs	r2, r3, #0
   1c834:	bcc	1c7f8 <__assert_fail@plt+0xa964>
   1c838:	mov	r0, #45	; 0x2d
   1c83c:	strb	r0, [r6]
   1c840:	mov	r0, r6
   1c844:	pop	{r4, r5, r6, sl, fp, pc}
   1c848:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c84c:	add	fp, sp, #24
   1c850:	sub	sp, sp, #112	; 0x70
   1c854:	cmp	r0, r1
   1c858:	moveq	r0, #0
   1c85c:	subeq	sp, fp, #24
   1c860:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c864:	mov	r4, r1
   1c868:	mov	r5, r0
   1c86c:	bl	11b70 <__ctype_get_mb_cur_max@plt>
   1c870:	cmp	r0, #1
   1c874:	bls	1c918 <__assert_fail@plt+0xaa84>
   1c878:	mov	r7, #0
   1c87c:	add	r0, sp, #56	; 0x38
   1c880:	str	r7, [sp, #64]	; 0x40
   1c884:	str	r7, [sp, #60]	; 0x3c
   1c888:	strb	r7, [sp, #56]	; 0x38
   1c88c:	str	r5, [sp, #72]	; 0x48
   1c890:	str	r7, [sp, #8]
   1c894:	str	r7, [sp, #4]
   1c898:	str	r4, [sp, #16]
   1c89c:	strb	r7, [sp]
   1c8a0:	strb	r7, [sp, #68]	; 0x44
   1c8a4:	strb	r7, [sp, #12]
   1c8a8:	bl	1cabc <__assert_fail@plt+0xac28>
   1c8ac:	ldrb	r0, [sp, #80]	; 0x50
   1c8b0:	cmp	r0, #0
   1c8b4:	beq	1c984 <__assert_fail@plt+0xaaf0>
   1c8b8:	ldr	r0, [sp, #84]	; 0x54
   1c8bc:	cmp	r0, #0
   1c8c0:	bne	1c984 <__assert_fail@plt+0xaaf0>
   1c8c4:	add	r0, sp, #56	; 0x38
   1c8c8:	bl	1cabc <__assert_fail@plt+0xac28>
   1c8cc:	ldrb	r1, [sp, #80]	; 0x50
   1c8d0:	mov	r0, #1
   1c8d4:	cmp	r1, #0
   1c8d8:	beq	1c910 <__assert_fail@plt+0xaa7c>
   1c8dc:	ldr	r1, [sp, #84]	; 0x54
   1c8e0:	cmp	r1, #0
   1c8e4:	bne	1c910 <__assert_fail@plt+0xaa7c>
   1c8e8:	mov	r0, sp
   1c8ec:	bl	1cabc <__assert_fail@plt+0xac28>
   1c8f0:	ldrb	r1, [sp, #24]
   1c8f4:	ldr	r0, [sp, #28]
   1c8f8:	cmp	r0, #0
   1c8fc:	clz	r1, r1
   1c900:	movwne	r0, #1
   1c904:	lsr	r1, r1, #5
   1c908:	orr	r0, r1, r0
   1c90c:	rsb	r0, r0, #0
   1c910:	sub	sp, fp, #24
   1c914:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c918:	bl	11c54 <__ctype_b_loc@plt>
   1c91c:	ldr	r8, [r0]
   1c920:	ldrb	r6, [r5]
   1c924:	add	r0, r8, r6, lsl #1
   1c928:	ldrb	r0, [r0, #1]
   1c92c:	tst	r0, #1
   1c930:	beq	1c940 <__assert_fail@plt+0xaaac>
   1c934:	bl	11c18 <__ctype_tolower_loc@plt>
   1c938:	ldr	r0, [r0]
   1c93c:	ldrb	r6, [r0, r6, lsl #2]
   1c940:	ldrb	r7, [r4]
   1c944:	add	r0, r8, r7, lsl #1
   1c948:	ldrb	r0, [r0, #1]
   1c94c:	tst	r0, #1
   1c950:	beq	1c960 <__assert_fail@plt+0xaacc>
   1c954:	bl	11c18 <__ctype_tolower_loc@plt>
   1c958:	ldr	r0, [r0]
   1c95c:	ldrb	r7, [r0, r7, lsl #2]
   1c960:	cmp	r6, #0
   1c964:	beq	1c978 <__assert_fail@plt+0xaae4>
   1c968:	add	r4, r4, #1
   1c96c:	add	r5, r5, #1
   1c970:	cmp	r6, r7
   1c974:	beq	1c920 <__assert_fail@plt+0xaa8c>
   1c978:	sub	r0, r6, r7
   1c97c:	sub	sp, fp, #24
   1c980:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c984:	mov	r4, sp
   1c988:	add	r5, sp, #56	; 0x38
   1c98c:	mov	r0, r4
   1c990:	bl	1cabc <__assert_fail@plt+0xac28>
   1c994:	ldrb	r0, [sp, #24]
   1c998:	cmp	r0, #0
   1c99c:	beq	1c9ac <__assert_fail@plt+0xab18>
   1c9a0:	ldr	r1, [sp, #28]
   1c9a4:	cmp	r1, #0
   1c9a8:	beq	1c8c4 <__assert_fail@plt+0xaa30>
   1c9ac:	ldrb	r1, [sp, #80]	; 0x50
   1c9b0:	cmp	r1, #0
   1c9b4:	beq	1c9e4 <__assert_fail@plt+0xab50>
   1c9b8:	cmp	r0, #0
   1c9bc:	beq	1ca5c <__assert_fail@plt+0xabc8>
   1c9c0:	ldr	r0, [sp, #84]	; 0x54
   1c9c4:	bl	11ab0 <towlower@plt>
   1c9c8:	mov	r6, r0
   1c9cc:	ldr	r0, [sp, #28]
   1c9d0:	bl	11ab0 <towlower@plt>
   1c9d4:	sub	r0, r6, r0
   1c9d8:	cmp	r0, #0
   1c9dc:	beq	1ca10 <__assert_fail@plt+0xab7c>
   1c9e0:	b	1c910 <__assert_fail@plt+0xaa7c>
   1c9e4:	cmp	r0, #0
   1c9e8:	bne	1ca68 <__assert_fail@plt+0xabd4>
   1c9ec:	ldr	r3, [sp, #20]
   1c9f0:	ldr	r2, [sp, #76]	; 0x4c
   1c9f4:	cmp	r2, r3
   1c9f8:	bne	1ca74 <__assert_fail@plt+0xabe0>
   1c9fc:	ldr	r1, [sp, #16]
   1ca00:	ldr	r0, [sp, #72]	; 0x48
   1ca04:	bl	11ac8 <memcmp@plt>
   1ca08:	cmp	r0, #0
   1ca0c:	bne	1c910 <__assert_fail@plt+0xaa7c>
   1ca10:	strb	r7, [sp, #68]	; 0x44
   1ca14:	strb	r7, [sp, #12]
   1ca18:	ldr	r0, [sp, #72]	; 0x48
   1ca1c:	ldr	r1, [sp, #76]	; 0x4c
   1ca20:	add	r0, r0, r1
   1ca24:	ldr	r1, [sp, #20]
   1ca28:	str	r0, [sp, #72]	; 0x48
   1ca2c:	ldr	r0, [sp, #16]
   1ca30:	add	r0, r0, r1
   1ca34:	str	r0, [sp, #16]
   1ca38:	mov	r0, r5
   1ca3c:	bl	1cabc <__assert_fail@plt+0xac28>
   1ca40:	ldrb	r0, [sp, #80]	; 0x50
   1ca44:	cmp	r0, #0
   1ca48:	beq	1c98c <__assert_fail@plt+0xaaf8>
   1ca4c:	ldr	r0, [sp, #84]	; 0x54
   1ca50:	cmp	r0, #0
   1ca54:	bne	1c98c <__assert_fail@plt+0xaaf8>
   1ca58:	b	1c8c4 <__assert_fail@plt+0xaa30>
   1ca5c:	mvn	r0, #0
   1ca60:	sub	sp, fp, #24
   1ca64:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ca68:	mov	r0, #1
   1ca6c:	sub	sp, fp, #24
   1ca70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ca74:	ldr	r1, [sp, #16]
   1ca78:	ldr	r0, [sp, #72]	; 0x48
   1ca7c:	bcs	1ca9c <__assert_fail@plt+0xac08>
   1ca80:	bl	11ac8 <memcmp@plt>
   1ca84:	mov	r1, r0
   1ca88:	mvn	r0, #0
   1ca8c:	cmp	r1, #0
   1ca90:	movwgt	r0, #1
   1ca94:	sub	sp, fp, #24
   1ca98:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ca9c:	mov	r2, r3
   1caa0:	bl	11ac8 <memcmp@plt>
   1caa4:	mov	r1, r0
   1caa8:	mvn	r0, #0
   1caac:	cmn	r1, #1
   1cab0:	movwgt	r0, #1
   1cab4:	sub	sp, fp, #24
   1cab8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1cabc:	push	{r4, r5, r6, r7, fp, lr}
   1cac0:	add	fp, sp, #16
   1cac4:	mov	r4, r0
   1cac8:	ldrb	r0, [r0, #12]
   1cacc:	cmp	r0, #0
   1cad0:	popne	{r4, r5, r6, r7, fp, pc}
   1cad4:	ldrb	r0, [r4]
   1cad8:	ldr	r6, [r4, #16]
   1cadc:	cmp	r0, #0
   1cae0:	beq	1cb48 <__assert_fail@plt+0xacb4>
   1cae4:	add	r5, r4, #4
   1cae8:	bl	11b70 <__ctype_get_mb_cur_max@plt>
   1caec:	mov	r1, r0
   1caf0:	mov	r0, r6
   1caf4:	bl	33218 <__assert_fail@plt+0x21384>
   1caf8:	add	r7, r4, #28
   1cafc:	mov	r2, r0
   1cb00:	mov	r1, r6
   1cb04:	mov	r3, r5
   1cb08:	mov	r0, r7
   1cb0c:	bl	38138 <__assert_fail@plt+0x262a4>
   1cb10:	cmn	r0, #2
   1cb14:	str	r0, [r4, #20]
   1cb18:	beq	1cbd4 <__assert_fail@plt+0xad40>
   1cb1c:	cmp	r0, #0
   1cb20:	beq	1cb88 <__assert_fail@plt+0xacf4>
   1cb24:	cmn	r0, #1
   1cb28:	bne	1cbac <__assert_fail@plt+0xad18>
   1cb2c:	mov	r0, #0
   1cb30:	strb	r0, [r4, #24]
   1cb34:	mov	r0, #1
   1cb38:	str	r0, [r4, #20]
   1cb3c:	mov	r0, #1
   1cb40:	strb	r0, [r4, #12]
   1cb44:	pop	{r4, r5, r6, r7, fp, pc}
   1cb48:	ldrb	r0, [r6]
   1cb4c:	movw	r2, #44204	; 0xacac
   1cb50:	movt	r2, #3
   1cb54:	ubfx	r1, r0, #5, #3
   1cb58:	ldr	r1, [r2, r1, lsl #2]
   1cb5c:	and	r2, r0, #31
   1cb60:	mov	r0, #1
   1cb64:	tst	r1, r0, lsl r2
   1cb68:	beq	1cbf4 <__assert_fail@plt+0xad60>
   1cb6c:	str	r0, [r4, #20]
   1cb70:	ldrb	r1, [r6]
   1cb74:	strb	r0, [r4, #24]
   1cb78:	str	r1, [r4, #28]
   1cb7c:	mov	r0, #1
   1cb80:	strb	r0, [r4, #12]
   1cb84:	pop	{r4, r5, r6, r7, fp, pc}
   1cb88:	mov	r0, #1
   1cb8c:	str	r0, [r4, #20]
   1cb90:	ldr	r0, [r4, #16]
   1cb94:	ldrb	r0, [r0]
   1cb98:	cmp	r0, #0
   1cb9c:	bne	1cc14 <__assert_fail@plt+0xad80>
   1cba0:	ldr	r0, [r7]
   1cba4:	cmp	r0, #0
   1cba8:	bne	1cc34 <__assert_fail@plt+0xada0>
   1cbac:	mov	r0, #1
   1cbb0:	strb	r0, [r4, #24]
   1cbb4:	mov	r0, r5
   1cbb8:	bl	11abc <mbsinit@plt>
   1cbbc:	cmp	r0, #0
   1cbc0:	movne	r0, #0
   1cbc4:	strbne	r0, [r4]
   1cbc8:	mov	r0, #1
   1cbcc:	strb	r0, [r4, #12]
   1cbd0:	pop	{r4, r5, r6, r7, fp, pc}
   1cbd4:	ldr	r0, [r4, #16]
   1cbd8:	bl	11c78 <strlen@plt>
   1cbdc:	str	r0, [r4, #20]
   1cbe0:	mov	r0, #0
   1cbe4:	strb	r0, [r4, #24]
   1cbe8:	mov	r0, #1
   1cbec:	strb	r0, [r4, #12]
   1cbf0:	pop	{r4, r5, r6, r7, fp, pc}
   1cbf4:	add	r5, r4, #4
   1cbf8:	mov	r0, r5
   1cbfc:	bl	11abc <mbsinit@plt>
   1cc00:	cmp	r0, #0
   1cc04:	beq	1cc54 <__assert_fail@plt+0xadc0>
   1cc08:	mov	r0, #1
   1cc0c:	strb	r0, [r4]
   1cc10:	b	1cae8 <__assert_fail@plt+0xac54>
   1cc14:	movw	r0, #41763	; 0xa323
   1cc18:	movw	r1, #41699	; 0xa2e3
   1cc1c:	movw	r3, #41715	; 0xa2f3
   1cc20:	mov	r2, #171	; 0xab
   1cc24:	movt	r0, #3
   1cc28:	movt	r1, #3
   1cc2c:	movt	r3, #3
   1cc30:	bl	11e94 <__assert_fail@plt>
   1cc34:	movw	r0, #41786	; 0xa33a
   1cc38:	movw	r1, #41699	; 0xa2e3
   1cc3c:	movw	r3, #41715	; 0xa2f3
   1cc40:	mov	r2, #172	; 0xac
   1cc44:	movt	r0, #3
   1cc48:	movt	r1, #3
   1cc4c:	movt	r3, #3
   1cc50:	bl	11e94 <__assert_fail@plt>
   1cc54:	movw	r0, #41676	; 0xa2cc
   1cc58:	movw	r1, #41699	; 0xa2e3
   1cc5c:	movw	r3, #41715	; 0xa2f3
   1cc60:	mov	r2, #143	; 0x8f
   1cc64:	movt	r0, #3
   1cc68:	movt	r1, #3
   1cc6c:	movt	r3, #3
   1cc70:	bl	11e94 <__assert_fail@plt>
   1cc74:	ldr	r2, [r0, #16]
   1cc78:	add	r1, r2, r1
   1cc7c:	str	r1, [r0, #16]
   1cc80:	bx	lr
   1cc84:	push	{r4, r5, r6, sl, fp, lr}
   1cc88:	add	fp, sp, #16
   1cc8c:	mov	r5, r1
   1cc90:	ldrb	r1, [r1]
   1cc94:	mov	r4, r0
   1cc98:	strb	r1, [r0], #4
   1cc9c:	cmp	r1, #0
   1cca0:	beq	1ccb0 <__assert_fail@plt+0xae1c>
   1cca4:	ldmib	r5, {r1, r2}
   1cca8:	stm	r0, {r1, r2}
   1ccac:	b	1ccbc <__assert_fail@plt+0xae28>
   1ccb0:	mov	r1, #0
   1ccb4:	str	r1, [r0]
   1ccb8:	str	r1, [r0, #4]
   1ccbc:	ldrb	r0, [r5, #12]
   1ccc0:	strb	r0, [r4, #12]
   1ccc4:	add	r0, r5, #32
   1ccc8:	ldr	r1, [r5, #16]
   1cccc:	cmp	r1, r0
   1ccd0:	beq	1ccdc <__assert_fail@plt+0xae48>
   1ccd4:	mov	r6, r1
   1ccd8:	b	1ccec <__assert_fail@plt+0xae58>
   1ccdc:	ldr	r2, [r5, #20]
   1cce0:	add	r6, r4, #32
   1cce4:	mov	r0, r6
   1cce8:	bl	11a8c <memcpy@plt>
   1ccec:	str	r6, [r4, #16]
   1ccf0:	ldr	r0, [r5, #20]
   1ccf4:	str	r0, [r4, #20]
   1ccf8:	ldrb	r0, [r5, #24]
   1ccfc:	strb	r0, [r4, #24]
   1cd00:	cmp	r0, #0
   1cd04:	ldrne	r0, [r5, #28]
   1cd08:	strne	r0, [r4, #28]
   1cd0c:	pop	{r4, r5, r6, sl, fp, pc}
   1cd10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd14:	add	fp, sp, #28
   1cd18:	sub	sp, sp, #36	; 0x24
   1cd1c:	movw	r0, #41804	; 0xa34c
   1cd20:	movw	r1, #41940	; 0xa3d4
   1cd24:	movt	r0, #3
   1cd28:	movt	r1, #3
   1cd2c:	bl	11dec <fopen64@plt>
   1cd30:	cmp	r0, #0
   1cd34:	beq	1d474 <__assert_fail@plt+0xb5e0>
   1cd38:	mov	sl, r0
   1cd3c:	mov	r0, #0
   1cd40:	add	r1, sp, #24
   1cd44:	mov	r2, #10
   1cd48:	str	r0, [sp, #28]
   1cd4c:	str	r0, [sp, #24]
   1cd50:	add	r0, sp, #28
   1cd54:	mov	r3, sl
   1cd58:	bl	119fc <__getdelim@plt>
   1cd5c:	cmn	r0, #1
   1cd60:	beq	1d858 <__assert_fail@plt+0xb9c4>
   1cd64:	movw	r8, #41825	; 0xa361
   1cd68:	add	r0, sp, #32
   1cd6c:	add	r9, sp, #12
   1cd70:	add	r6, sp, #20
   1cd74:	add	r7, sp, #16
   1cd78:	add	r5, sp, #28
   1cd7c:	add	r4, sp, #24
   1cd80:	str	sl, [sp, #4]
   1cd84:	movt	r8, #3
   1cd88:	str	r0, [sp, #8]
   1cd8c:	b	1cf00 <__assert_fail@plt+0xb06c>
   1cd90:	ldr	sl, [sp, #4]
   1cd94:	movw	r8, #41825	; 0xa361
   1cd98:	add	r9, sp, #12
   1cd9c:	add	r6, sp, #20
   1cda0:	movt	r8, #3
   1cda4:	b	1d448 <__assert_fail@plt+0xb5b4>
   1cda8:	ldrb	r0, [r4]
   1cdac:	cmp	r0, #47	; 0x2f
   1cdb0:	ldrbeq	r0, [r4, #1]
   1cdb4:	cmpeq	r0, #47	; 0x2f
   1cdb8:	beq	1ceb4 <__assert_fail@plt+0xb020>
   1cdbc:	movw	r1, #41964	; 0xa3ec
   1cdc0:	mov	r0, r6
   1cdc4:	movt	r1, #3
   1cdc8:	bl	11a14 <strcmp@plt>
   1cdcc:	cmp	r0, #0
   1cdd0:	beq	1d414 <__assert_fail@plt+0xb580>
   1cdd4:	movw	r1, #41969	; 0xa3f1
   1cdd8:	mov	r0, r6
   1cddc:	movt	r1, #3
   1cde0:	bl	11a14 <strcmp@plt>
   1cde4:	cmp	r0, #0
   1cde8:	beq	1d414 <__assert_fail@plt+0xb580>
   1cdec:	movw	r1, #41973	; 0xa3f5
   1cdf0:	mov	r0, r6
   1cdf4:	movt	r1, #3
   1cdf8:	bl	11a14 <strcmp@plt>
   1cdfc:	cmp	r0, #0
   1ce00:	beq	1d414 <__assert_fail@plt+0xb580>
   1ce04:	movw	r1, #41978	; 0xa3fa
   1ce08:	mov	r0, r6
   1ce0c:	movt	r1, #3
   1ce10:	bl	11a14 <strcmp@plt>
   1ce14:	cmp	r0, #0
   1ce18:	beq	1d414 <__assert_fail@plt+0xb580>
   1ce1c:	movw	r1, #41989	; 0xa405
   1ce20:	mov	r0, r6
   1ce24:	movt	r1, #3
   1ce28:	bl	11a14 <strcmp@plt>
   1ce2c:	cmp	r0, #0
   1ce30:	beq	1d414 <__assert_fail@plt+0xb580>
   1ce34:	movw	r1, #41995	; 0xa40b
   1ce38:	mov	r0, r6
   1ce3c:	movt	r1, #3
   1ce40:	bl	11a14 <strcmp@plt>
   1ce44:	cmp	r0, #0
   1ce48:	beq	1d414 <__assert_fail@plt+0xb580>
   1ce4c:	movw	r1, #42000	; 0xa410
   1ce50:	mov	r0, r6
   1ce54:	movt	r1, #3
   1ce58:	bl	11a14 <strcmp@plt>
   1ce5c:	cmp	r0, #0
   1ce60:	beq	1d414 <__assert_fail@plt+0xb580>
   1ce64:	movw	r1, #42006	; 0xa416
   1ce68:	mov	r0, r6
   1ce6c:	movt	r1, #3
   1ce70:	bl	11a14 <strcmp@plt>
   1ce74:	cmp	r0, #0
   1ce78:	beq	1d414 <__assert_fail@plt+0xb580>
   1ce7c:	movw	r1, #42012	; 0xa41c
   1ce80:	mov	r0, r6
   1ce84:	movt	r1, #3
   1ce88:	bl	11a14 <strcmp@plt>
   1ce8c:	cmp	r0, #0
   1ce90:	add	r6, sp, #20
   1ce94:	beq	1d418 <__assert_fail@plt+0xb584>
   1ce98:	movw	r0, #42017	; 0xa421
   1ce9c:	mov	r1, r4
   1cea0:	movt	r0, #3
   1cea4:	bl	11a14 <strcmp@plt>
   1cea8:	clz	r0, r0
   1ceac:	lsr	r8, r0, #5
   1ceb0:	b	1d418 <__assert_fail@plt+0xb584>
   1ceb4:	movw	r1, #41948	; 0xa3dc
   1ceb8:	mov	r0, r6
   1cebc:	movt	r1, #3
   1cec0:	bl	11a14 <strcmp@plt>
   1cec4:	cmp	r0, #0
   1cec8:	beq	1d414 <__assert_fail@plt+0xb580>
   1cecc:	movw	r1, #41954	; 0xa3e2
   1ced0:	mov	r0, r6
   1ced4:	movt	r1, #3
   1ced8:	bl	11a14 <strcmp@plt>
   1cedc:	cmp	r0, #0
   1cee0:	beq	1d414 <__assert_fail@plt+0xb580>
   1cee4:	movw	r1, #41959	; 0xa3e7
   1cee8:	mov	r0, r6
   1ceec:	movt	r1, #3
   1cef0:	bl	11a14 <strcmp@plt>
   1cef4:	cmp	r0, #0
   1cef8:	bne	1cdbc <__assert_fail@plt+0xaf28>
   1cefc:	b	1d414 <__assert_fail@plt+0xb580>
   1cf00:	ldr	r0, [sp, #28]
   1cf04:	mov	r1, r8
   1cf08:	mov	r2, r6
   1cf0c:	mov	r3, r7
   1cf10:	str	r9, [sp]
   1cf14:	bl	11d8c <sscanf@plt>
   1cf18:	orr	r0, r0, #1
   1cf1c:	cmp	r0, #3
   1cf20:	bne	1d454 <__assert_fail@plt+0xb5c0>
   1cf24:	ldr	r0, [sp, #12]
   1cf28:	ldr	r1, [sp, #28]
   1cf2c:	add	r0, r1, r0
   1cf30:	mov	r1, #32
   1cf34:	mov	r5, r0
   1cf38:	bl	11c84 <strchr@plt>
   1cf3c:	cmp	r0, #0
   1cf40:	beq	1d444 <__assert_fail@plt+0xb5b0>
   1cf44:	mov	r6, r0
   1cf48:	mov	r4, #0
   1cf4c:	mov	r1, #32
   1cf50:	strb	r4, [r6], #1
   1cf54:	mov	r0, r6
   1cf58:	bl	11c84 <strchr@plt>
   1cf5c:	cmp	r0, #0
   1cf60:	beq	1d444 <__assert_fail@plt+0xb5b0>
   1cf64:	movw	r1, #41842	; 0xa372
   1cf68:	strb	r4, [r0], #1
   1cf6c:	movt	r1, #3
   1cf70:	bl	37038 <__assert_fail@plt+0x251a4>
   1cf74:	cmp	r0, #0
   1cf78:	beq	1d444 <__assert_fail@plt+0xb5b0>
   1cf7c:	add	sl, r0, #3
   1cf80:	mov	r1, #32
   1cf84:	mov	r0, sl
   1cf88:	bl	11c84 <strchr@plt>
   1cf8c:	cmp	r0, #0
   1cf90:	beq	1cd90 <__assert_fail@plt+0xaefc>
   1cf94:	mov	r9, r0
   1cf98:	mov	r4, #0
   1cf9c:	mov	r1, #32
   1cfa0:	strb	r4, [r9], #1
   1cfa4:	mov	r0, r9
   1cfa8:	bl	11c84 <strchr@plt>
   1cfac:	cmp	r0, #0
   1cfb0:	beq	1cd90 <__assert_fail@plt+0xaefc>
   1cfb4:	strb	r4, [r0]
   1cfb8:	mov	r0, r9
   1cfbc:	bl	11c78 <strlen@plt>
   1cfc0:	adds	r0, r0, #1
   1cfc4:	mov	r8, r5
   1cfc8:	beq	1d048 <__assert_fail@plt+0xb1b4>
   1cfcc:	mov	r2, #0
   1cfd0:	mov	r1, r9
   1cfd4:	ldrb	r3, [r9, r2]
   1cfd8:	add	r7, r2, #4
   1cfdc:	cmp	r7, r0
   1cfe0:	bcs	1d038 <__assert_fail@plt+0xb1a4>
   1cfe4:	cmp	r3, #92	; 0x5c
   1cfe8:	bne	1d038 <__assert_fail@plt+0xb1a4>
   1cfec:	add	r7, r9, r2
   1cff0:	ldrb	r5, [r7, #1]
   1cff4:	and	r4, r5, #252	; 0xfc
   1cff8:	cmp	r4, #48	; 0x30
   1cffc:	bne	1d038 <__assert_fail@plt+0xb1a4>
   1d000:	ldrb	r4, [r7, #2]
   1d004:	and	r7, r4, #248	; 0xf8
   1d008:	cmp	r7, #48	; 0x30
   1d00c:	bne	1d038 <__assert_fail@plt+0xb1a4>
   1d010:	add	ip, r2, #3
   1d014:	ldrb	lr, [r9, ip]
   1d018:	and	r7, lr, #248	; 0xf8
   1d01c:	cmp	r7, #48	; 0x30
   1d020:	bne	1d038 <__assert_fail@plt+0xb1a4>
   1d024:	lsl	r2, r5, #6
   1d028:	add	r2, r2, r4, lsl #3
   1d02c:	add	r2, r2, lr
   1d030:	add	r3, r2, #80	; 0x50
   1d034:	mov	r2, ip
   1d038:	add	r2, r2, #1
   1d03c:	strb	r3, [r1], #1
   1d040:	cmp	r2, r0
   1d044:	bcc	1cfd4 <__assert_fail@plt+0xb140>
   1d048:	mov	r0, r6
   1d04c:	bl	11c78 <strlen@plt>
   1d050:	adds	r0, r0, #1
   1d054:	beq	1d0d4 <__assert_fail@plt+0xb240>
   1d058:	mov	r2, #0
   1d05c:	mov	r1, r6
   1d060:	ldrb	r3, [r6, r2]
   1d064:	add	r7, r2, #4
   1d068:	cmp	r7, r0
   1d06c:	bcs	1d0c4 <__assert_fail@plt+0xb230>
   1d070:	cmp	r3, #92	; 0x5c
   1d074:	bne	1d0c4 <__assert_fail@plt+0xb230>
   1d078:	add	r7, r6, r2
   1d07c:	ldrb	r5, [r7, #1]
   1d080:	and	r4, r5, #252	; 0xfc
   1d084:	cmp	r4, #48	; 0x30
   1d088:	bne	1d0c4 <__assert_fail@plt+0xb230>
   1d08c:	ldrb	r4, [r7, #2]
   1d090:	and	r7, r4, #248	; 0xf8
   1d094:	cmp	r7, #48	; 0x30
   1d098:	bne	1d0c4 <__assert_fail@plt+0xb230>
   1d09c:	add	ip, r2, #3
   1d0a0:	ldrb	lr, [r6, ip]
   1d0a4:	and	r7, lr, #248	; 0xf8
   1d0a8:	cmp	r7, #48	; 0x30
   1d0ac:	bne	1d0c4 <__assert_fail@plt+0xb230>
   1d0b0:	lsl	r2, r5, #6
   1d0b4:	add	r2, r2, r4, lsl #3
   1d0b8:	add	r2, r2, lr
   1d0bc:	add	r3, r2, #80	; 0x50
   1d0c0:	mov	r2, ip
   1d0c4:	add	r2, r2, #1
   1d0c8:	strb	r3, [r1], #1
   1d0cc:	cmp	r2, r0
   1d0d0:	bcc	1d060 <__assert_fail@plt+0xb1cc>
   1d0d4:	mov	r0, r8
   1d0d8:	bl	11c78 <strlen@plt>
   1d0dc:	adds	r0, r0, #1
   1d0e0:	beq	1d160 <__assert_fail@plt+0xb2cc>
   1d0e4:	mov	r2, #0
   1d0e8:	mov	r1, r8
   1d0ec:	ldrb	r3, [r8, r2]
   1d0f0:	add	r7, r2, #4
   1d0f4:	cmp	r7, r0
   1d0f8:	bcs	1d150 <__assert_fail@plt+0xb2bc>
   1d0fc:	cmp	r3, #92	; 0x5c
   1d100:	bne	1d150 <__assert_fail@plt+0xb2bc>
   1d104:	add	r7, r8, r2
   1d108:	ldrb	r5, [r7, #1]
   1d10c:	and	r4, r5, #252	; 0xfc
   1d110:	cmp	r4, #48	; 0x30
   1d114:	bne	1d150 <__assert_fail@plt+0xb2bc>
   1d118:	ldrb	r4, [r7, #2]
   1d11c:	and	r7, r4, #248	; 0xf8
   1d120:	cmp	r7, #48	; 0x30
   1d124:	bne	1d150 <__assert_fail@plt+0xb2bc>
   1d128:	add	ip, r2, #3
   1d12c:	ldrb	lr, [r8, ip]
   1d130:	and	r7, lr, #248	; 0xf8
   1d134:	cmp	r7, #48	; 0x30
   1d138:	bne	1d150 <__assert_fail@plt+0xb2bc>
   1d13c:	lsl	r2, r5, #6
   1d140:	add	r2, r2, r4, lsl #3
   1d144:	add	r2, r2, lr
   1d148:	add	r3, r2, #80	; 0x50
   1d14c:	mov	r2, ip
   1d150:	add	r2, r2, #1
   1d154:	strb	r3, [r1], #1
   1d158:	cmp	r2, r0
   1d15c:	bcc	1d0ec <__assert_fail@plt+0xb258>
   1d160:	mov	r0, sl
   1d164:	bl	11c78 <strlen@plt>
   1d168:	adds	r0, r0, #1
   1d16c:	beq	1d1ec <__assert_fail@plt+0xb358>
   1d170:	mov	r2, #0
   1d174:	mov	r1, sl
   1d178:	ldrb	r3, [sl, r2]
   1d17c:	add	r7, r2, #4
   1d180:	cmp	r7, r0
   1d184:	bcs	1d1dc <__assert_fail@plt+0xb348>
   1d188:	cmp	r3, #92	; 0x5c
   1d18c:	bne	1d1dc <__assert_fail@plt+0xb348>
   1d190:	add	r7, sl, r2
   1d194:	ldrb	r5, [r7, #1]
   1d198:	and	r4, r5, #252	; 0xfc
   1d19c:	cmp	r4, #48	; 0x30
   1d1a0:	bne	1d1dc <__assert_fail@plt+0xb348>
   1d1a4:	ldrb	r4, [r7, #2]
   1d1a8:	and	r7, r4, #248	; 0xf8
   1d1ac:	cmp	r7, #48	; 0x30
   1d1b0:	bne	1d1dc <__assert_fail@plt+0xb348>
   1d1b4:	add	ip, r2, #3
   1d1b8:	ldrb	lr, [sl, ip]
   1d1bc:	and	r7, lr, #248	; 0xf8
   1d1c0:	cmp	r7, #48	; 0x30
   1d1c4:	bne	1d1dc <__assert_fail@plt+0xb348>
   1d1c8:	lsl	r2, r5, #6
   1d1cc:	add	r2, r2, r4, lsl #3
   1d1d0:	add	r2, r2, lr
   1d1d4:	add	r3, r2, #80	; 0x50
   1d1d8:	mov	r2, ip
   1d1dc:	add	r2, r2, #1
   1d1e0:	strb	r3, [r1], #1
   1d1e4:	cmp	r2, r0
   1d1e8:	bcc	1d178 <__assert_fail@plt+0xb2e4>
   1d1ec:	mov	r0, #32
   1d1f0:	bl	34268 <__assert_fail@plt+0x223d4>
   1d1f4:	mov	r7, r0
   1d1f8:	mov	r0, r9
   1d1fc:	bl	34788 <__assert_fail@plt+0x228f4>
   1d200:	str	r0, [r7]
   1d204:	mov	r0, r6
   1d208:	bl	34788 <__assert_fail@plt+0x228f4>
   1d20c:	str	r0, [r7, #4]
   1d210:	mov	r0, r8
   1d214:	bl	34788 <__assert_fail@plt+0x228f4>
   1d218:	str	r0, [r7, #8]
   1d21c:	mov	r0, sl
   1d220:	bl	34788 <__assert_fail@plt+0x228f4>
   1d224:	str	r0, [r7, #12]
   1d228:	mov	r6, r0
   1d22c:	ldr	r2, [sp, #20]
   1d230:	ldrb	r0, [r7, #24]
   1d234:	mov	r3, r2
   1d238:	orr	r4, r0, #4
   1d23c:	ldr	r0, [sp, #16]
   1d240:	bfc	r3, #0, #12
   1d244:	strb	r4, [r7, #24]
   1d248:	bic	r1, r0, #255	; 0xff
   1d24c:	uxtb	r0, r0
   1d250:	bfi	r0, r2, #8, #12
   1d254:	orr	r3, r3, r1, lsr #20
   1d258:	orr	r0, r0, r1, lsl #12
   1d25c:	movw	r1, #41846	; 0xa376
   1d260:	str	r3, [r7, #20]
   1d264:	str	r0, [r7, #16]
   1d268:	mov	r0, r6
   1d26c:	movt	r1, #3
   1d270:	bl	11a14 <strcmp@plt>
   1d274:	cmp	r0, #0
   1d278:	mov	r8, #1
   1d27c:	mov	r0, #1
   1d280:	beq	1d3ec <__assert_fail@plt+0xb558>
   1d284:	movw	r1, #41853	; 0xa37d
   1d288:	mov	r0, r6
   1d28c:	movt	r1, #3
   1d290:	bl	11a14 <strcmp@plt>
   1d294:	cmp	r0, #0
   1d298:	mov	r0, #1
   1d29c:	beq	1d3ec <__assert_fail@plt+0xb558>
   1d2a0:	movw	r1, #41858	; 0xa382
   1d2a4:	mov	r0, r6
   1d2a8:	movt	r1, #3
   1d2ac:	bl	11a14 <strcmp@plt>
   1d2b0:	cmp	r0, #0
   1d2b4:	mov	r0, #1
   1d2b8:	beq	1d3ec <__assert_fail@plt+0xb558>
   1d2bc:	movw	r1, #41864	; 0xa388
   1d2c0:	mov	r0, r6
   1d2c4:	movt	r1, #3
   1d2c8:	bl	11a14 <strcmp@plt>
   1d2cc:	cmp	r0, #0
   1d2d0:	mov	r0, #1
   1d2d4:	beq	1d3ec <__assert_fail@plt+0xb558>
   1d2d8:	movw	r1, #41872	; 0xa390
   1d2dc:	mov	r0, r6
   1d2e0:	movt	r1, #3
   1d2e4:	bl	11a14 <strcmp@plt>
   1d2e8:	cmp	r0, #0
   1d2ec:	mov	r0, #1
   1d2f0:	beq	1d3ec <__assert_fail@plt+0xb558>
   1d2f4:	movw	r1, #41879	; 0xa397
   1d2f8:	mov	r0, r6
   1d2fc:	movt	r1, #3
   1d300:	bl	11a14 <strcmp@plt>
   1d304:	cmp	r0, #0
   1d308:	mov	r0, #1
   1d30c:	beq	1d3ec <__assert_fail@plt+0xb558>
   1d310:	movw	r1, #41887	; 0xa39f
   1d314:	mov	r0, r6
   1d318:	movt	r1, #3
   1d31c:	bl	11a14 <strcmp@plt>
   1d320:	cmp	r0, #0
   1d324:	mov	r0, #1
   1d328:	beq	1d3ec <__assert_fail@plt+0xb558>
   1d32c:	movw	r1, #41899	; 0xa3ab
   1d330:	mov	r0, r6
   1d334:	movt	r1, #3
   1d338:	bl	11a14 <strcmp@plt>
   1d33c:	cmp	r0, #0
   1d340:	mov	r0, #1
   1d344:	beq	1d3ec <__assert_fail@plt+0xb558>
   1d348:	movw	r1, #41906	; 0xa3b2
   1d34c:	mov	r0, r6
   1d350:	movt	r1, #3
   1d354:	bl	11a14 <strcmp@plt>
   1d358:	cmp	r0, #0
   1d35c:	mov	r0, #1
   1d360:	beq	1d3ec <__assert_fail@plt+0xb558>
   1d364:	movw	r1, #41917	; 0xa3bd
   1d368:	mov	r0, r6
   1d36c:	movt	r1, #3
   1d370:	bl	11a14 <strcmp@plt>
   1d374:	cmp	r0, #0
   1d378:	mov	r0, #1
   1d37c:	beq	1d3ec <__assert_fail@plt+0xb558>
   1d380:	movw	r1, #41923	; 0xa3c3
   1d384:	mov	r0, r6
   1d388:	movt	r1, #3
   1d38c:	bl	11a14 <strcmp@plt>
   1d390:	cmp	r0, #0
   1d394:	mov	r0, #1
   1d398:	beq	1d3ec <__assert_fail@plt+0xb558>
   1d39c:	movw	r1, #41929	; 0xa3c9
   1d3a0:	mov	r0, r6
   1d3a4:	movt	r1, #3
   1d3a8:	bl	11a14 <strcmp@plt>
   1d3ac:	cmp	r0, #0
   1d3b0:	mov	r0, #1
   1d3b4:	beq	1d3ec <__assert_fail@plt+0xb558>
   1d3b8:	movw	r1, #41936	; 0xa3d0
   1d3bc:	mov	r0, r6
   1d3c0:	movt	r1, #3
   1d3c4:	bl	11a14 <strcmp@plt>
   1d3c8:	cmp	r0, #0
   1d3cc:	mov	r0, #1
   1d3d0:	beq	1d3ec <__assert_fail@plt+0xb558>
   1d3d4:	movw	r1, #41943	; 0xa3d7
   1d3d8:	mov	r0, r6
   1d3dc:	movt	r1, #3
   1d3e0:	bl	11a14 <strcmp@plt>
   1d3e4:	clz	r0, r0
   1d3e8:	lsr	r0, r0, #5
   1d3ec:	bic	r1, r4, #1
   1d3f0:	orr	r5, r1, r0
   1d3f4:	mov	r1, #58	; 0x3a
   1d3f8:	strb	r5, [r7, #24]
   1d3fc:	ldr	r4, [r7]
   1d400:	mov	r0, r4
   1d404:	bl	11c84 <strchr@plt>
   1d408:	ldr	sl, [sp, #4]
   1d40c:	cmp	r0, #0
   1d410:	beq	1cda8 <__assert_fail@plt+0xaf14>
   1d414:	add	r6, sp, #20
   1d418:	and	r0, r5, #253	; 0xfd
   1d41c:	add	r9, sp, #12
   1d420:	orr	r0, r0, r8, lsl #1
   1d424:	movw	r8, #41825	; 0xa361
   1d428:	strb	r0, [r7, #24]
   1d42c:	ldr	r0, [sp, #8]
   1d430:	movt	r8, #3
   1d434:	str	r7, [r0]
   1d438:	add	r0, r7, #28
   1d43c:	str	r0, [sp, #8]
   1d440:	b	1d448 <__assert_fail@plt+0xb5b4>
   1d444:	add	r6, sp, #20
   1d448:	add	r7, sp, #16
   1d44c:	add	r5, sp, #28
   1d450:	add	r4, sp, #24
   1d454:	mov	r0, r5
   1d458:	mov	r1, r4
   1d45c:	mov	r2, #10
   1d460:	mov	r3, sl
   1d464:	bl	119fc <__getdelim@plt>
   1d468:	cmn	r0, #1
   1d46c:	bne	1cf00 <__assert_fail@plt+0xb06c>
   1d470:	b	1d860 <__assert_fail@plt+0xb9cc>
   1d474:	movw	r0, #42024	; 0xa428
   1d478:	movw	r1, #42806	; 0xa736
   1d47c:	movt	r0, #3
   1d480:	movt	r1, #3
   1d484:	bl	11e04 <setmntent@plt>
   1d488:	cmp	r0, #0
   1d48c:	beq	1d920 <__assert_fail@plt+0xba8c>
   1d490:	mov	r8, r0
   1d494:	bl	11bb8 <getmntent@plt>
   1d498:	cmp	r0, #0
   1d49c:	beq	1d930 <__assert_fail@plt+0xba9c>
   1d4a0:	mov	r5, r0
   1d4a4:	add	sl, sp, #32
   1d4a8:	b	1d600 <__assert_fail@plt+0xb76c>
   1d4ac:	ldrb	r0, [r5]
   1d4b0:	cmp	r0, #47	; 0x2f
   1d4b4:	ldrbeq	r0, [r5, #1]
   1d4b8:	cmpeq	r0, #47	; 0x2f
   1d4bc:	beq	1d5b4 <__assert_fail@plt+0xb720>
   1d4c0:	movw	r1, #41964	; 0xa3ec
   1d4c4:	mov	r0, r7
   1d4c8:	movt	r1, #3
   1d4cc:	bl	11a14 <strcmp@plt>
   1d4d0:	cmp	r0, #0
   1d4d4:	beq	1d810 <__assert_fail@plt+0xb97c>
   1d4d8:	movw	r1, #41969	; 0xa3f1
   1d4dc:	mov	r0, r7
   1d4e0:	movt	r1, #3
   1d4e4:	bl	11a14 <strcmp@plt>
   1d4e8:	cmp	r0, #0
   1d4ec:	beq	1d810 <__assert_fail@plt+0xb97c>
   1d4f0:	movw	r1, #41973	; 0xa3f5
   1d4f4:	mov	r0, r7
   1d4f8:	movt	r1, #3
   1d4fc:	bl	11a14 <strcmp@plt>
   1d500:	cmp	r0, #0
   1d504:	beq	1d810 <__assert_fail@plt+0xb97c>
   1d508:	movw	r1, #41978	; 0xa3fa
   1d50c:	mov	r0, r7
   1d510:	movt	r1, #3
   1d514:	bl	11a14 <strcmp@plt>
   1d518:	cmp	r0, #0
   1d51c:	beq	1d810 <__assert_fail@plt+0xb97c>
   1d520:	movw	r1, #41989	; 0xa405
   1d524:	mov	r0, r7
   1d528:	movt	r1, #3
   1d52c:	bl	11a14 <strcmp@plt>
   1d530:	cmp	r0, #0
   1d534:	beq	1d810 <__assert_fail@plt+0xb97c>
   1d538:	movw	r1, #41995	; 0xa40b
   1d53c:	mov	r0, r7
   1d540:	movt	r1, #3
   1d544:	bl	11a14 <strcmp@plt>
   1d548:	cmp	r0, #0
   1d54c:	beq	1d810 <__assert_fail@plt+0xb97c>
   1d550:	movw	r1, #42000	; 0xa410
   1d554:	mov	r0, r7
   1d558:	movt	r1, #3
   1d55c:	bl	11a14 <strcmp@plt>
   1d560:	cmp	r0, #0
   1d564:	beq	1d810 <__assert_fail@plt+0xb97c>
   1d568:	movw	r1, #42006	; 0xa416
   1d56c:	mov	r0, r7
   1d570:	movt	r1, #3
   1d574:	bl	11a14 <strcmp@plt>
   1d578:	cmp	r0, #0
   1d57c:	beq	1d810 <__assert_fail@plt+0xb97c>
   1d580:	movw	r1, #42012	; 0xa41c
   1d584:	mov	r0, r7
   1d588:	movt	r1, #3
   1d58c:	bl	11a14 <strcmp@plt>
   1d590:	cmp	r0, #0
   1d594:	beq	1d810 <__assert_fail@plt+0xb97c>
   1d598:	movw	r0, #42017	; 0xa421
   1d59c:	mov	r1, r5
   1d5a0:	movt	r0, #3
   1d5a4:	bl	11a14 <strcmp@plt>
   1d5a8:	clz	r0, r0
   1d5ac:	lsr	r6, r0, #5
   1d5b0:	b	1d810 <__assert_fail@plt+0xb97c>
   1d5b4:	movw	r1, #41948	; 0xa3dc
   1d5b8:	mov	r0, r7
   1d5bc:	movt	r1, #3
   1d5c0:	bl	11a14 <strcmp@plt>
   1d5c4:	cmp	r0, #0
   1d5c8:	beq	1d810 <__assert_fail@plt+0xb97c>
   1d5cc:	movw	r1, #41954	; 0xa3e2
   1d5d0:	mov	r0, r7
   1d5d4:	movt	r1, #3
   1d5d8:	bl	11a14 <strcmp@plt>
   1d5dc:	cmp	r0, #0
   1d5e0:	beq	1d810 <__assert_fail@plt+0xb97c>
   1d5e4:	movw	r1, #41959	; 0xa3e7
   1d5e8:	mov	r0, r7
   1d5ec:	movt	r1, #3
   1d5f0:	bl	11a14 <strcmp@plt>
   1d5f4:	cmp	r0, #0
   1d5f8:	bne	1d4c0 <__assert_fail@plt+0xb62c>
   1d5fc:	b	1d810 <__assert_fail@plt+0xb97c>
   1d600:	movw	r1, #42034	; 0xa432
   1d604:	mov	r0, r5
   1d608:	movt	r1, #3
   1d60c:	bl	11b7c <hasmntopt@plt>
   1d610:	str	r0, [sp, #8]
   1d614:	mov	r0, #32
   1d618:	bl	34268 <__assert_fail@plt+0x223d4>
   1d61c:	mov	r9, r0
   1d620:	ldr	r0, [r5]
   1d624:	bl	34788 <__assert_fail@plt+0x228f4>
   1d628:	str	r0, [r9]
   1d62c:	ldr	r0, [r5, #4]
   1d630:	bl	34788 <__assert_fail@plt+0x228f4>
   1d634:	str	r0, [r9, #4]
   1d638:	mov	r0, #0
   1d63c:	str	r0, [r9, #8]
   1d640:	ldr	r0, [r5, #8]
   1d644:	bl	34788 <__assert_fail@plt+0x228f4>
   1d648:	str	r0, [r9, #12]
   1d64c:	mov	r7, r0
   1d650:	movw	r1, #41846	; 0xa376
   1d654:	ldrb	r0, [r9, #24]
   1d658:	movt	r1, #3
   1d65c:	orr	r4, r0, #4
   1d660:	mov	r0, r7
   1d664:	strb	r4, [r9, #24]
   1d668:	bl	11a14 <strcmp@plt>
   1d66c:	cmp	r0, #0
   1d670:	mov	r6, #1
   1d674:	mov	r0, #1
   1d678:	beq	1d7ec <__assert_fail@plt+0xb958>
   1d67c:	movw	r1, #41853	; 0xa37d
   1d680:	mov	r0, r7
   1d684:	movt	r1, #3
   1d688:	bl	11a14 <strcmp@plt>
   1d68c:	cmp	r0, #0
   1d690:	mov	r0, #1
   1d694:	beq	1d7ec <__assert_fail@plt+0xb958>
   1d698:	movw	r1, #41858	; 0xa382
   1d69c:	mov	r0, r7
   1d6a0:	movt	r1, #3
   1d6a4:	bl	11a14 <strcmp@plt>
   1d6a8:	cmp	r0, #0
   1d6ac:	mov	r0, #1
   1d6b0:	beq	1d7ec <__assert_fail@plt+0xb958>
   1d6b4:	movw	r1, #41864	; 0xa388
   1d6b8:	mov	r0, r7
   1d6bc:	movt	r1, #3
   1d6c0:	bl	11a14 <strcmp@plt>
   1d6c4:	cmp	r0, #0
   1d6c8:	mov	r0, #1
   1d6cc:	beq	1d7ec <__assert_fail@plt+0xb958>
   1d6d0:	movw	r1, #41872	; 0xa390
   1d6d4:	mov	r0, r7
   1d6d8:	movt	r1, #3
   1d6dc:	bl	11a14 <strcmp@plt>
   1d6e0:	cmp	r0, #0
   1d6e4:	mov	r0, #1
   1d6e8:	beq	1d7ec <__assert_fail@plt+0xb958>
   1d6ec:	movw	r1, #41879	; 0xa397
   1d6f0:	mov	r0, r7
   1d6f4:	movt	r1, #3
   1d6f8:	bl	11a14 <strcmp@plt>
   1d6fc:	cmp	r0, #0
   1d700:	mov	r0, #1
   1d704:	beq	1d7ec <__assert_fail@plt+0xb958>
   1d708:	movw	r1, #41887	; 0xa39f
   1d70c:	mov	r0, r7
   1d710:	movt	r1, #3
   1d714:	bl	11a14 <strcmp@plt>
   1d718:	cmp	r0, #0
   1d71c:	mov	r0, #1
   1d720:	beq	1d7ec <__assert_fail@plt+0xb958>
   1d724:	movw	r1, #41899	; 0xa3ab
   1d728:	mov	r0, r7
   1d72c:	movt	r1, #3
   1d730:	bl	11a14 <strcmp@plt>
   1d734:	cmp	r0, #0
   1d738:	mov	r0, #1
   1d73c:	beq	1d7ec <__assert_fail@plt+0xb958>
   1d740:	movw	r1, #41906	; 0xa3b2
   1d744:	mov	r0, r7
   1d748:	movt	r1, #3
   1d74c:	bl	11a14 <strcmp@plt>
   1d750:	cmp	r0, #0
   1d754:	mov	r0, #1
   1d758:	beq	1d7ec <__assert_fail@plt+0xb958>
   1d75c:	movw	r1, #41917	; 0xa3bd
   1d760:	mov	r0, r7
   1d764:	movt	r1, #3
   1d768:	bl	11a14 <strcmp@plt>
   1d76c:	cmp	r0, #0
   1d770:	mov	r0, #1
   1d774:	beq	1d7ec <__assert_fail@plt+0xb958>
   1d778:	movw	r1, #41923	; 0xa3c3
   1d77c:	mov	r0, r7
   1d780:	movt	r1, #3
   1d784:	bl	11a14 <strcmp@plt>
   1d788:	cmp	r0, #0
   1d78c:	mov	r0, #1
   1d790:	beq	1d7ec <__assert_fail@plt+0xb958>
   1d794:	movw	r1, #41929	; 0xa3c9
   1d798:	mov	r0, r7
   1d79c:	movt	r1, #3
   1d7a0:	bl	11a14 <strcmp@plt>
   1d7a4:	cmp	r0, #0
   1d7a8:	mov	r0, #1
   1d7ac:	beq	1d7ec <__assert_fail@plt+0xb958>
   1d7b0:	movw	r1, #41936	; 0xa3d0
   1d7b4:	mov	r0, r7
   1d7b8:	movt	r1, #3
   1d7bc:	bl	11a14 <strcmp@plt>
   1d7c0:	cmp	r0, #0
   1d7c4:	mov	r0, #1
   1d7c8:	beq	1d7ec <__assert_fail@plt+0xb958>
   1d7cc:	movw	r1, #41943	; 0xa3d7
   1d7d0:	mov	r0, r7
   1d7d4:	movt	r1, #3
   1d7d8:	bl	11a14 <strcmp@plt>
   1d7dc:	ldr	r1, [sp, #8]
   1d7e0:	orr	r0, r1, r0
   1d7e4:	clz	r0, r0
   1d7e8:	lsr	r0, r0, #5
   1d7ec:	bic	r1, r4, #1
   1d7f0:	orr	r4, r1, r0
   1d7f4:	mov	r1, #58	; 0x3a
   1d7f8:	strb	r4, [r9, #24]
   1d7fc:	ldr	r5, [r9]
   1d800:	mov	r0, r5
   1d804:	bl	11c84 <strchr@plt>
   1d808:	cmp	r0, #0
   1d80c:	beq	1d4ac <__assert_fail@plt+0xb618>
   1d810:	mvn	r0, #0
   1d814:	str	r0, [r9, #16]
   1d818:	str	r0, [r9, #20]
   1d81c:	and	r0, r4, #253	; 0xfd
   1d820:	orr	r0, r0, r6, lsl #1
   1d824:	strb	r0, [r9, #24]
   1d828:	mov	r0, r8
   1d82c:	str	r9, [sl]
   1d830:	add	sl, r9, #28
   1d834:	bl	11bb8 <getmntent@plt>
   1d838:	mov	r5, r0
   1d83c:	cmp	r0, #0
   1d840:	bne	1d600 <__assert_fail@plt+0xb76c>
   1d844:	mov	r0, r8
   1d848:	bl	11d38 <endmntent@plt>
   1d84c:	cmp	r0, #0
   1d850:	bne	1d944 <__assert_fail@plt+0xbab0>
   1d854:	b	1d8a8 <__assert_fail@plt+0xba14>
   1d858:	add	r0, sp, #32
   1d85c:	str	r0, [sp, #8]
   1d860:	ldr	r0, [sp, #28]
   1d864:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1d868:	ldrb	r0, [sl]
   1d86c:	tst	r0, #32
   1d870:	bne	1d88c <__assert_fail@plt+0xb9f8>
   1d874:	mov	r0, sl
   1d878:	bl	15ff8 <__assert_fail@plt+0x4164>
   1d87c:	ldr	sl, [sp, #8]
   1d880:	cmn	r0, #1
   1d884:	bne	1d944 <__assert_fail@plt+0xbab0>
   1d888:	b	1d8a8 <__assert_fail@plt+0xba14>
   1d88c:	bl	11ca8 <__errno_location@plt>
   1d890:	ldr	r6, [r0]
   1d894:	mov	r5, r0
   1d898:	mov	r0, sl
   1d89c:	bl	15ff8 <__assert_fail@plt+0x4164>
   1d8a0:	ldr	sl, [sp, #8]
   1d8a4:	str	r6, [r5]
   1d8a8:	bl	11ca8 <__errno_location@plt>
   1d8ac:	mov	r4, #0
   1d8b0:	ldr	r8, [r0]
   1d8b4:	mov	r5, r0
   1d8b8:	str	r4, [sl]
   1d8bc:	ldr	r6, [sp, #32]
   1d8c0:	cmp	r6, #0
   1d8c4:	beq	1d910 <__assert_fail@plt+0xba7c>
   1d8c8:	ldr	r0, [r6]
   1d8cc:	ldr	r7, [r6, #28]
   1d8d0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1d8d4:	ldr	r0, [r6, #4]
   1d8d8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1d8dc:	ldr	r0, [r6, #8]
   1d8e0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1d8e4:	ldrb	r0, [r6, #24]
   1d8e8:	tst	r0, #4
   1d8ec:	beq	1d8f8 <__assert_fail@plt+0xba64>
   1d8f0:	ldr	r0, [r6, #12]
   1d8f4:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1d8f8:	mov	r0, r6
   1d8fc:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1d900:	cmp	r7, #0
   1d904:	mov	r6, r7
   1d908:	str	r7, [sp, #32]
   1d90c:	bne	1d8c8 <__assert_fail@plt+0xba34>
   1d910:	str	r8, [r5]
   1d914:	mov	r0, r4
   1d918:	sub	sp, fp, #28
   1d91c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d920:	mov	r4, #0
   1d924:	mov	r0, r4
   1d928:	sub	sp, fp, #28
   1d92c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d930:	add	sl, sp, #32
   1d934:	mov	r0, r8
   1d938:	bl	11d38 <endmntent@plt>
   1d93c:	cmp	r0, #0
   1d940:	beq	1d8a8 <__assert_fail@plt+0xba14>
   1d944:	mov	r0, #0
   1d948:	str	r0, [sl]
   1d94c:	ldr	r4, [sp, #32]
   1d950:	mov	r0, r4
   1d954:	sub	sp, fp, #28
   1d958:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d95c:	push	{r4, sl, fp, lr}
   1d960:	add	fp, sp, #8
   1d964:	mov	r4, r0
   1d968:	ldr	r0, [r0]
   1d96c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1d970:	ldr	r0, [r4, #4]
   1d974:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1d978:	ldr	r0, [r4, #8]
   1d97c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1d980:	ldrb	r0, [r4, #24]
   1d984:	tst	r0, #4
   1d988:	beq	1d994 <__assert_fail@plt+0xbb00>
   1d98c:	ldr	r0, [r4, #12]
   1d990:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1d994:	mov	r0, r4
   1d998:	pop	{r4, sl, fp, lr}
   1d99c:	b	17b10 <__assert_fail@plt+0x5c7c>
   1d9a0:	sub	sp, sp, #4
   1d9a4:	push	{fp, lr}
   1d9a8:	mov	fp, sp
   1d9ac:	sub	sp, sp, #4
   1d9b0:	str	r3, [fp, #8]
   1d9b4:	mov	r3, #0
   1d9b8:	tst	r2, #64	; 0x40
   1d9bc:	addne	r3, fp, #8
   1d9c0:	addne	r3, r3, #4
   1d9c4:	strne	r3, [sp]
   1d9c8:	ldrne	r3, [fp, #8]
   1d9cc:	bl	11c9c <openat64@plt>
   1d9d0:	bl	33b64 <__assert_fail@plt+0x21cd0>
   1d9d4:	mov	sp, fp
   1d9d8:	pop	{fp, lr}
   1d9dc:	add	sp, sp, #4
   1d9e0:	bx	lr
   1d9e4:	push	{r4, r5, r6, sl, fp, lr}
   1d9e8:	add	fp, sp, #16
   1d9ec:	orr	r2, r2, #18688	; 0x4900
   1d9f0:	mov	r4, r3
   1d9f4:	orr	r2, r2, #524288	; 0x80000
   1d9f8:	bl	1d9a0 <__assert_fail@plt+0xbb0c>
   1d9fc:	mov	r5, r0
   1da00:	mov	r0, #0
   1da04:	cmp	r5, #0
   1da08:	poplt	{r4, r5, r6, sl, fp, pc}
   1da0c:	mov	r0, r5
   1da10:	bl	11db0 <fdopendir@plt>
   1da14:	cmp	r0, #0
   1da18:	strne	r5, [r4]
   1da1c:	popne	{r4, r5, r6, sl, fp, pc}
   1da20:	bl	11ca8 <__errno_location@plt>
   1da24:	ldr	r6, [r0]
   1da28:	mov	r4, r0
   1da2c:	mov	r0, r5
   1da30:	bl	11e70 <close@plt>
   1da34:	mov	r0, #0
   1da38:	str	r6, [r4]
   1da3c:	pop	{r4, r5, r6, sl, fp, pc}
   1da40:	push	{r4, r5, fp, lr}
   1da44:	add	fp, sp, #8
   1da48:	cmp	r0, #0
   1da4c:	beq	1dae0 <__assert_fail@plt+0xbc4c>
   1da50:	mov	r1, #47	; 0x2f
   1da54:	mov	r4, r0
   1da58:	bl	11d68 <strrchr@plt>
   1da5c:	cmp	r0, #0
   1da60:	mov	r5, r4
   1da64:	addne	r5, r0, #1
   1da68:	sub	r0, r5, r4
   1da6c:	cmp	r0, #7
   1da70:	blt	1dac4 <__assert_fail@plt+0xbc30>
   1da74:	movw	r1, #42095	; 0xa46f
   1da78:	sub	r0, r5, #7
   1da7c:	mov	r2, #7
   1da80:	movt	r1, #3
   1da84:	bl	11e4c <strncmp@plt>
   1da88:	cmp	r0, #0
   1da8c:	bne	1dac4 <__assert_fail@plt+0xbc30>
   1da90:	movw	r1, #42103	; 0xa477
   1da94:	mov	r0, r5
   1da98:	mov	r2, #3
   1da9c:	movt	r1, #3
   1daa0:	bl	11e4c <strncmp@plt>
   1daa4:	cmp	r0, #0
   1daa8:	beq	1dab4 <__assert_fail@plt+0xbc20>
   1daac:	mov	r4, r5
   1dab0:	b	1dac4 <__assert_fail@plt+0xbc30>
   1dab4:	movw	r0, #45592	; 0xb218
   1dab8:	add	r4, r5, #3
   1dabc:	movt	r0, #4
   1dac0:	str	r4, [r0]
   1dac4:	movw	r0, #45596	; 0xb21c
   1dac8:	movt	r0, #4
   1dacc:	str	r4, [r0]
   1dad0:	movw	r0, #45744	; 0xb2b0
   1dad4:	movt	r0, #4
   1dad8:	str	r4, [r0]
   1dadc:	pop	{r4, r5, fp, pc}
   1dae0:	movw	r0, #45608	; 0xb228
   1dae4:	mov	r1, #55	; 0x37
   1dae8:	mov	r2, #1
   1daec:	movt	r0, #4
   1daf0:	ldr	r3, [r0]
   1daf4:	movw	r0, #42039	; 0xa437
   1daf8:	movt	r0, #3
   1dafc:	bl	11b58 <fwrite@plt>
   1db00:	bl	11e58 <abort@plt>
   1db04:	push	{r4, r5, r6, sl, fp, lr}
   1db08:	add	fp, sp, #16
   1db0c:	mov	r4, r0
   1db10:	movw	r0, #45752	; 0xb2b8
   1db14:	movt	r0, #4
   1db18:	cmp	r4, #0
   1db1c:	moveq	r4, r0
   1db20:	bl	11ca8 <__errno_location@plt>
   1db24:	ldr	r6, [r0]
   1db28:	mov	r5, r0
   1db2c:	mov	r0, r4
   1db30:	mov	r1, #48	; 0x30
   1db34:	bl	346c8 <__assert_fail@plt+0x22834>
   1db38:	str	r6, [r5]
   1db3c:	pop	{r4, r5, r6, sl, fp, pc}
   1db40:	movw	r1, #45752	; 0xb2b8
   1db44:	cmp	r0, #0
   1db48:	movt	r1, #4
   1db4c:	movne	r1, r0
   1db50:	ldr	r0, [r1]
   1db54:	bx	lr
   1db58:	movw	r2, #45752	; 0xb2b8
   1db5c:	cmp	r0, #0
   1db60:	movt	r2, #4
   1db64:	movne	r2, r0
   1db68:	str	r1, [r2]
   1db6c:	bx	lr
   1db70:	movw	r3, #45752	; 0xb2b8
   1db74:	cmp	r0, #0
   1db78:	movt	r3, #4
   1db7c:	movne	r3, r0
   1db80:	ubfx	r0, r1, #5, #3
   1db84:	and	r1, r1, #31
   1db88:	add	r0, r3, r0, lsl #2
   1db8c:	ldr	r3, [r0, #8]
   1db90:	eor	r2, r2, r3, lsr r1
   1db94:	and	r2, r2, #1
   1db98:	eor	r2, r3, r2, lsl r1
   1db9c:	str	r2, [r0, #8]
   1dba0:	mov	r0, #1
   1dba4:	and	r0, r0, r3, lsr r1
   1dba8:	bx	lr
   1dbac:	movw	r2, #45752	; 0xb2b8
   1dbb0:	cmp	r0, #0
   1dbb4:	movt	r2, #4
   1dbb8:	movne	r2, r0
   1dbbc:	ldr	r0, [r2, #4]
   1dbc0:	str	r1, [r2, #4]
   1dbc4:	bx	lr
   1dbc8:	movw	r3, #45752	; 0xb2b8
   1dbcc:	cmp	r0, #0
   1dbd0:	movt	r3, #4
   1dbd4:	movne	r3, r0
   1dbd8:	cmp	r1, #0
   1dbdc:	mov	r0, #10
   1dbe0:	cmpne	r2, #0
   1dbe4:	str	r0, [r3]
   1dbe8:	bne	1dbf8 <__assert_fail@plt+0xbd64>
   1dbec:	push	{fp, lr}
   1dbf0:	mov	fp, sp
   1dbf4:	bl	11e58 <abort@plt>
   1dbf8:	str	r1, [r3, #40]	; 0x28
   1dbfc:	str	r2, [r3, #44]	; 0x2c
   1dc00:	bx	lr
   1dc04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc08:	add	fp, sp, #28
   1dc0c:	sub	sp, sp, #20
   1dc10:	mov	r7, r0
   1dc14:	ldr	r0, [fp, #8]
   1dc18:	movw	r5, #45752	; 0xb2b8
   1dc1c:	mov	r8, r3
   1dc20:	mov	r9, r2
   1dc24:	mov	sl, r1
   1dc28:	movt	r5, #4
   1dc2c:	cmp	r0, #0
   1dc30:	movne	r5, r0
   1dc34:	bl	11ca8 <__errno_location@plt>
   1dc38:	mov	r4, r0
   1dc3c:	ldm	r5, {r0, r1}
   1dc40:	ldr	r2, [r5, #40]	; 0x28
   1dc44:	ldr	r3, [r5, #44]	; 0x2c
   1dc48:	add	r5, r5, #8
   1dc4c:	ldr	r6, [r4]
   1dc50:	stm	sp, {r0, r1, r5}
   1dc54:	str	r2, [sp, #12]
   1dc58:	str	r3, [sp, #16]
   1dc5c:	mov	r0, r7
   1dc60:	mov	r1, sl
   1dc64:	mov	r2, r9
   1dc68:	mov	r3, r8
   1dc6c:	bl	1dc7c <__assert_fail@plt+0xbde8>
   1dc70:	str	r6, [r4]
   1dc74:	sub	sp, fp, #28
   1dc78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc80:	add	fp, sp, #28
   1dc84:	sub	sp, sp, #156	; 0x9c
   1dc88:	str	r0, [sp, #76]	; 0x4c
   1dc8c:	ldr	r0, [fp, #12]
   1dc90:	mov	r6, r1
   1dc94:	str	r3, [sp, #84]	; 0x54
   1dc98:	str	r2, [fp, #-84]	; 0xffffffac
   1dc9c:	and	r1, r0, #4
   1dca0:	str	r1, [sp, #24]
   1dca4:	and	r1, r0, #1
   1dca8:	str	r1, [sp, #28]
   1dcac:	ubfx	r8, r0, #1, #1
   1dcb0:	bl	11b70 <__ctype_get_mb_cur_max@plt>
   1dcb4:	str	r0, [sp, #32]
   1dcb8:	ldr	r0, [fp, #24]
   1dcbc:	ldr	r7, [fp, #8]
   1dcc0:	mov	r1, #0
   1dcc4:	mov	r2, #0
   1dcc8:	mov	r4, #1
   1dccc:	str	r1, [sp, #52]	; 0x34
   1dcd0:	str	r0, [sp, #72]	; 0x48
   1dcd4:	ldr	r0, [fp, #20]
   1dcd8:	str	r0, [sp, #68]	; 0x44
   1dcdc:	mov	r0, #0
   1dce0:	str	r0, [sp, #48]	; 0x30
   1dce4:	mov	r0, #0
   1dce8:	str	r0, [sp, #92]	; 0x5c
   1dcec:	mov	r0, #0
   1dcf0:	str	r0, [fp, #-76]	; 0xffffffb4
   1dcf4:	mov	r0, #0
   1dcf8:	cmp	r7, #10
   1dcfc:	bhi	1efe4 <__assert_fail@plt+0xd150>
   1dd00:	add	r1, pc, #28
   1dd04:	mov	sl, r6
   1dd08:	ldr	r6, [sp, #76]	; 0x4c
   1dd0c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1dd10:	ldr	lr, [sp, #84]	; 0x54
   1dd14:	mov	r9, #0
   1dd18:	mov	r3, #1
   1dd1c:	mov	r5, #0
   1dd20:	ldr	pc, [r1, r7, lsl #2]
   1dd24:	strdeq	sp, [r1], -r4
   1dd28:	andeq	sp, r1, r0, lsr lr
   1dd2c:	andeq	sp, r1, r4, lsl #28
   1dd30:	andeq	sp, r1, ip, ror #27
   1dd34:	andeq	sp, r1, r4, lsr #28
   1dd38:	andeq	sp, r1, r8, asr lr
   1dd3c:	andeq	sp, r1, r4, lsl lr
   1dd40:	andeq	lr, r1, r4, rrx
   1dd44:	andeq	sp, r1, r0, asr sp
   1dd48:	andeq	sp, r1, r0, asr sp
   1dd4c:	strdeq	sp, [r1], -r8
   1dd50:	mov	r9, r4
   1dd54:	movw	r4, #42183	; 0xa4c7
   1dd58:	mov	r5, r8
   1dd5c:	mov	r8, r2
   1dd60:	mov	r0, #0
   1dd64:	mov	r2, #5
   1dd68:	movt	r4, #3
   1dd6c:	mov	r1, r4
   1dd70:	bl	11ad4 <dcgettext@plt>
   1dd74:	cmp	r0, r4
   1dd78:	str	r0, [sp, #68]	; 0x44
   1dd7c:	bne	1df0c <__assert_fail@plt+0xc078>
   1dd80:	bl	38050 <__assert_fail@plt+0x261bc>
   1dd84:	ldrb	r1, [r0]
   1dd88:	and	r1, r1, #223	; 0xdf
   1dd8c:	cmp	r1, #71	; 0x47
   1dd90:	beq	1ded8 <__assert_fail@plt+0xc044>
   1dd94:	cmp	r1, #85	; 0x55
   1dd98:	bne	1def0 <__assert_fail@plt+0xc05c>
   1dd9c:	ldrb	r1, [r0, #1]
   1dda0:	and	r1, r1, #223	; 0xdf
   1dda4:	cmp	r1, #84	; 0x54
   1dda8:	bne	1def0 <__assert_fail@plt+0xc05c>
   1ddac:	ldrb	r1, [r0, #2]
   1ddb0:	and	r1, r1, #223	; 0xdf
   1ddb4:	cmp	r1, #70	; 0x46
   1ddb8:	bne	1def0 <__assert_fail@plt+0xc05c>
   1ddbc:	ldrb	r1, [r0, #3]
   1ddc0:	cmp	r1, #45	; 0x2d
   1ddc4:	ldrbeq	r1, [r0, #4]
   1ddc8:	cmpeq	r1, #56	; 0x38
   1ddcc:	bne	1def0 <__assert_fail@plt+0xc05c>
   1ddd0:	ldrb	r0, [r0, #5]
   1ddd4:	cmp	r0, #0
   1ddd8:	movw	r0, #42185	; 0xa4c9
   1dddc:	movt	r0, #3
   1dde0:	str	r0, [sp, #68]	; 0x44
   1dde4:	bne	1def0 <__assert_fail@plt+0xc05c>
   1dde8:	b	1df0c <__assert_fail@plt+0xc078>
   1ddec:	mov	r0, #1
   1ddf0:	b	1de30 <__assert_fail@plt+0xbf9c>
   1ddf4:	mov	r7, #0
   1ddf8:	mov	r9, #0
   1ddfc:	mov	r3, r0
   1de00:	b	1ded0 <__assert_fail@plt+0xc03c>
   1de04:	tst	r8, #1
   1de08:	bne	1de30 <__assert_fail@plt+0xbf9c>
   1de0c:	mov	r3, r0
   1de10:	b	1de88 <__assert_fail@plt+0xbff4>
   1de14:	mov	r0, #1
   1de18:	mov	r9, #0
   1de1c:	mov	r7, #5
   1de20:	b	1de6c <__assert_fail@plt+0xbfd8>
   1de24:	mov	r3, #1
   1de28:	tst	r8, #1
   1de2c:	beq	1de88 <__assert_fail@plt+0xbff4>
   1de30:	mov	r1, #1
   1de34:	mov	r9, #0
   1de38:	mov	r7, #2
   1de3c:	mov	r3, r0
   1de40:	mov	r5, #1
   1de44:	str	r1, [fp, #-76]	; 0xffffffb4
   1de48:	movw	r1, #38548	; 0x9694
   1de4c:	movt	r1, #3
   1de50:	str	r1, [sp, #92]	; 0x5c
   1de54:	b	1e064 <__assert_fail@plt+0xc1d0>
   1de58:	mov	r7, #5
   1de5c:	tst	r8, #1
   1de60:	beq	1dea8 <__assert_fail@plt+0xc014>
   1de64:	mov	r0, #1
   1de68:	mov	r9, #0
   1de6c:	str	r0, [fp, #-76]	; 0xffffffb4
   1de70:	movw	r0, #39082	; 0x98aa
   1de74:	mov	r3, #1
   1de78:	mov	r5, #1
   1de7c:	movt	r0, #3
   1de80:	str	r0, [sp, #92]	; 0x5c
   1de84:	b	1e064 <__assert_fail@plt+0xc1d0>
   1de88:	cmp	sl, #0
   1de8c:	mov	r9, #1
   1de90:	mov	r7, #2
   1de94:	movne	r0, #39	; 0x27
   1de98:	strbne	r0, [r6]
   1de9c:	movw	r0, #38548	; 0x9694
   1dea0:	movt	r0, #3
   1dea4:	b	1dec4 <__assert_fail@plt+0xc030>
   1dea8:	cmp	sl, #0
   1deac:	mov	r9, #1
   1deb0:	mov	r3, #1
   1deb4:	movne	r0, #34	; 0x22
   1deb8:	strbne	r0, [r6]
   1debc:	movw	r0, #39082	; 0x98aa
   1dec0:	movt	r0, #3
   1dec4:	str	r0, [sp, #92]	; 0x5c
   1dec8:	mov	r0, #1
   1decc:	str	r0, [fp, #-76]	; 0xffffffb4
   1ded0:	mov	r5, #0
   1ded4:	b	1e064 <__assert_fail@plt+0xc1d0>
   1ded8:	ldrb	r1, [r0, #1]
   1dedc:	and	r1, r1, #223	; 0xdf
   1dee0:	cmp	r1, #66	; 0x42
   1dee4:	ldrbeq	r1, [r0, #2]
   1dee8:	cmpeq	r1, #49	; 0x31
   1deec:	beq	1ee0c <__assert_fail@plt+0xcf78>
   1def0:	movw	r0, #38548	; 0x9694
   1def4:	movw	r1, #39082	; 0x98aa
   1def8:	cmp	r7, #9
   1defc:	movt	r0, #3
   1df00:	movt	r1, #3
   1df04:	moveq	r0, r1
   1df08:	str	r0, [sp, #68]	; 0x44
   1df0c:	movw	r4, #38548	; 0x9694
   1df10:	mov	r0, #0
   1df14:	mov	r2, #5
   1df18:	movt	r4, #3
   1df1c:	mov	r1, r4
   1df20:	bl	11ad4 <dcgettext@plt>
   1df24:	cmp	r0, r4
   1df28:	str	r0, [sp, #72]	; 0x48
   1df2c:	beq	1df3c <__assert_fail@plt+0xc0a8>
   1df30:	mov	r4, r9
   1df34:	mov	r2, r8
   1df38:	b	1dff4 <__assert_fail@plt+0xc160>
   1df3c:	bl	38050 <__assert_fail@plt+0x261bc>
   1df40:	ldrb	r1, [r0]
   1df44:	mov	r4, r9
   1df48:	and	r1, r1, #223	; 0xdf
   1df4c:	cmp	r1, #71	; 0x47
   1df50:	beq	1dfac <__assert_fail@plt+0xc118>
   1df54:	cmp	r1, #85	; 0x55
   1df58:	mov	r2, r8
   1df5c:	bne	1dfd4 <__assert_fail@plt+0xc140>
   1df60:	ldrb	r1, [r0, #1]
   1df64:	and	r1, r1, #223	; 0xdf
   1df68:	cmp	r1, #84	; 0x54
   1df6c:	bne	1dfd4 <__assert_fail@plt+0xc140>
   1df70:	ldrb	r1, [r0, #2]
   1df74:	and	r1, r1, #223	; 0xdf
   1df78:	cmp	r1, #70	; 0x46
   1df7c:	ldrbeq	r1, [r0, #3]
   1df80:	cmpeq	r1, #45	; 0x2d
   1df84:	bne	1dfd4 <__assert_fail@plt+0xc140>
   1df88:	ldrb	r1, [r0, #4]
   1df8c:	cmp	r1, #56	; 0x38
   1df90:	ldrbeq	r0, [r0, #5]
   1df94:	cmpeq	r0, #0
   1df98:	bne	1dfd4 <__assert_fail@plt+0xc140>
   1df9c:	movw	r0, #42189	; 0xa4cd
   1dfa0:	movt	r0, #3
   1dfa4:	str	r0, [sp, #72]	; 0x48
   1dfa8:	b	1dff4 <__assert_fail@plt+0xc160>
   1dfac:	ldrb	r1, [r0, #1]
   1dfb0:	mov	r2, r8
   1dfb4:	and	r1, r1, #223	; 0xdf
   1dfb8:	cmp	r1, #66	; 0x42
   1dfbc:	bne	1dfd4 <__assert_fail@plt+0xc140>
   1dfc0:	ldrb	r1, [r0, #2]
   1dfc4:	cmp	r1, #49	; 0x31
   1dfc8:	ldrbeq	r1, [r0, #3]
   1dfcc:	cmpeq	r1, #56	; 0x38
   1dfd0:	beq	1ee50 <__assert_fail@plt+0xcfbc>
   1dfd4:	movw	r0, #38548	; 0x9694
   1dfd8:	cmp	r7, #9
   1dfdc:	movt	r0, #3
   1dfe0:	mov	r1, r0
   1dfe4:	movw	r0, #39082	; 0x98aa
   1dfe8:	movt	r0, #3
   1dfec:	moveq	r1, r0
   1dff0:	str	r1, [sp, #72]	; 0x48
   1dff4:	mov	r8, r5
   1dff8:	mov	r9, #0
   1dffc:	tst	r8, #1
   1e000:	mov	r5, r8
   1e004:	str	r2, [fp, #-48]	; 0xffffffd0
   1e008:	bne	1e040 <__assert_fail@plt+0xc1ac>
   1e00c:	ldr	r0, [sp, #68]	; 0x44
   1e010:	ldrb	r0, [r0]
   1e014:	cmp	r0, #0
   1e018:	beq	1e040 <__assert_fail@plt+0xc1ac>
   1e01c:	ldr	r1, [sp, #68]	; 0x44
   1e020:	mov	r9, #0
   1e024:	add	r1, r1, #1
   1e028:	cmp	r9, sl
   1e02c:	strbcc	r0, [r6, r9]
   1e030:	ldrb	r0, [r1, r9]
   1e034:	add	r9, r9, #1
   1e038:	cmp	r0, #0
   1e03c:	bne	1e028 <__assert_fail@plt+0xc194>
   1e040:	ldr	r8, [sp, #72]	; 0x48
   1e044:	mov	r0, r8
   1e048:	bl	11c78 <strlen@plt>
   1e04c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1e050:	ldr	lr, [sp, #84]	; 0x54
   1e054:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1e058:	str	r0, [fp, #-76]	; 0xffffffb4
   1e05c:	str	r8, [sp, #92]	; 0x5c
   1e060:	mov	r3, #1
   1e064:	ldr	r0, [fp, #16]
   1e068:	str	r7, [fp, #-64]	; 0xffffffc0
   1e06c:	str	r5, [fp, #-72]	; 0xffffffb8
   1e070:	str	r3, [sp, #80]	; 0x50
   1e074:	cmp	r0, #0
   1e078:	movwne	r0, #1
   1e07c:	and	r0, r0, r5
   1e080:	str	r0, [fp, #-88]	; 0xffffffa8
   1e084:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1e088:	cmp	r0, #0
   1e08c:	movwne	r0, #1
   1e090:	subs	r7, r7, #2
   1e094:	and	r1, r0, r5
   1e098:	str	r7, [fp, #-80]	; 0xffffffb0
   1e09c:	and	r1, r3, r1
   1e0a0:	str	r1, [sp, #40]	; 0x28
   1e0a4:	clz	r1, r7
   1e0a8:	lsr	r1, r1, #5
   1e0ac:	and	r1, r1, r5
   1e0b0:	eor	r5, r5, #1
   1e0b4:	str	r1, [sp, #36]	; 0x24
   1e0b8:	mov	r1, r7
   1e0bc:	str	r5, [sp, #88]	; 0x58
   1e0c0:	mov	r7, #0
   1e0c4:	movwne	r1, #1
   1e0c8:	orr	r5, r1, r5
   1e0cc:	and	r1, r1, r3
   1e0d0:	and	r0, r0, r1
   1e0d4:	str	r5, [sp, #60]	; 0x3c
   1e0d8:	str	r1, [fp, #-68]	; 0xffffffbc
   1e0dc:	str	r0, [fp, #-60]	; 0xffffffc4
   1e0e0:	eor	r0, r3, #1
   1e0e4:	str	r0, [sp, #44]	; 0x2c
   1e0e8:	cmn	lr, #1
   1e0ec:	beq	1e0fc <__assert_fail@plt+0xc268>
   1e0f0:	cmp	r7, lr
   1e0f4:	bne	1e108 <__assert_fail@plt+0xc274>
   1e0f8:	b	1ed80 <__assert_fail@plt+0xceec>
   1e0fc:	ldrb	r0, [ip, r7]
   1e100:	cmp	r0, #0
   1e104:	beq	1ed88 <__assert_fail@plt+0xcef4>
   1e108:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1e10c:	mov	r8, #0
   1e110:	str	r4, [fp, #-52]	; 0xffffffcc
   1e114:	str	r2, [fp, #-48]	; 0xffffffd0
   1e118:	cmp	r0, #0
   1e11c:	beq	1e150 <__assert_fail@plt+0xc2bc>
   1e120:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1e124:	add	r4, r7, r0
   1e128:	cmp	r0, #2
   1e12c:	bcc	1e148 <__assert_fail@plt+0xc2b4>
   1e130:	cmn	lr, #1
   1e134:	bne	1e148 <__assert_fail@plt+0xc2b4>
   1e138:	mov	r0, ip
   1e13c:	bl	11c78 <strlen@plt>
   1e140:	ldr	ip, [fp, #-84]	; 0xffffffac
   1e144:	mov	lr, r0
   1e148:	cmp	r4, lr
   1e14c:	bls	1e168 <__assert_fail@plt+0xc2d4>
   1e150:	mov	r0, #0
   1e154:	str	r0, [fp, #-56]	; 0xffffffc8
   1e158:	ldrb	r5, [ip, r7]
   1e15c:	cmp	r5, #126	; 0x7e
   1e160:	bls	1e1b8 <__assert_fail@plt+0xc324>
   1e164:	b	1e5c0 <__assert_fail@plt+0xc72c>
   1e168:	ldr	r1, [sp, #92]	; 0x5c
   1e16c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1e170:	add	r0, ip, r7
   1e174:	mov	r4, lr
   1e178:	bl	11ac8 <memcmp@plt>
   1e17c:	ldr	r2, [sp, #88]	; 0x58
   1e180:	cmp	r0, #0
   1e184:	mov	r1, r0
   1e188:	movwne	r1, #1
   1e18c:	orr	r1, r1, r2
   1e190:	tst	r1, #1
   1e194:	beq	1ee94 <__assert_fail@plt+0xd000>
   1e198:	ldr	ip, [fp, #-84]	; 0xffffffac
   1e19c:	clz	r0, r0
   1e1a0:	mov	lr, r4
   1e1a4:	lsr	r0, r0, #5
   1e1a8:	str	r0, [fp, #-56]	; 0xffffffc8
   1e1ac:	ldrb	r5, [ip, r7]
   1e1b0:	cmp	r5, #126	; 0x7e
   1e1b4:	bhi	1e5c0 <__assert_fail@plt+0xc72c>
   1e1b8:	add	r3, pc, #16
   1e1bc:	mov	r4, #1
   1e1c0:	mov	r2, #110	; 0x6e
   1e1c4:	mov	r0, #97	; 0x61
   1e1c8:	mov	r1, #0
   1e1cc:	ldr	pc, [r3, r5, lsl #2]
   1e1d0:	andeq	lr, r1, r0, lsr #9
   1e1d4:	andeq	lr, r1, r0, asr #11
   1e1d8:	andeq	lr, r1, r0, asr #11
   1e1dc:	andeq	lr, r1, r0, asr #11
   1e1e0:	andeq	lr, r1, r0, asr #11
   1e1e4:	andeq	lr, r1, r0, asr #11
   1e1e8:	andeq	lr, r1, r0, asr #11
   1e1ec:	muleq	r1, ip, r6
   1e1f0:	andeq	lr, r1, r0, lsl #9
   1e1f4:	andeq	lr, r1, r8, ror #8
   1e1f8:	andeq	lr, r1, ip, lsl #9
   1e1fc:	andeq	lr, r1, ip, lsl r5
   1e200:	andeq	lr, r1, r0, ror #8
   1e204:	andeq	lr, r1, r8, lsl #9
   1e208:	andeq	lr, r1, r0, asr #11
   1e20c:	andeq	lr, r1, r0, asr #11
   1e210:	andeq	lr, r1, r0, asr #11
   1e214:	andeq	lr, r1, r0, asr #11
   1e218:	andeq	lr, r1, r0, asr #11
   1e21c:	andeq	lr, r1, r0, asr #11
   1e220:	andeq	lr, r1, r0, asr #11
   1e224:	andeq	lr, r1, r0, asr #11
   1e228:	andeq	lr, r1, r0, asr #11
   1e22c:	andeq	lr, r1, r0, asr #11
   1e230:	andeq	lr, r1, r0, asr #11
   1e234:	andeq	lr, r1, r0, asr #11
   1e238:	andeq	lr, r1, r0, asr #11
   1e23c:	andeq	lr, r1, r0, asr #11
   1e240:	andeq	lr, r1, r0, asr #11
   1e244:	andeq	lr, r1, r0, asr #11
   1e248:	andeq	lr, r1, r0, asr #11
   1e24c:	andeq	lr, r1, r0, asr #11
   1e250:	andeq	lr, r1, r8, lsl r6
   1e254:	andeq	lr, r1, ip, lsl r6
   1e258:	andeq	lr, r1, ip, lsl r6
   1e25c:	andeq	lr, r1, ip, ror #7
   1e260:	andeq	lr, r1, ip, lsl r6
   1e264:	andeq	lr, r1, ip, asr #7
   1e268:	andeq	lr, r1, ip, lsl r6
   1e26c:	andeq	lr, r1, r4, lsr #10
   1e270:	andeq	lr, r1, ip, lsl r6
   1e274:	andeq	lr, r1, ip, lsl r6
   1e278:	andeq	lr, r1, ip, lsl r6
   1e27c:	andeq	lr, r1, ip, asr #7
   1e280:	andeq	lr, r1, ip, asr #7
   1e284:	andeq	lr, r1, ip, asr #7
   1e288:	andeq	lr, r1, ip, asr #7
   1e28c:	andeq	lr, r1, ip, asr #7
   1e290:	andeq	lr, r1, ip, asr #7
   1e294:	andeq	lr, r1, ip, asr #7
   1e298:	andeq	lr, r1, ip, asr #7
   1e29c:	andeq	lr, r1, ip, asr #7
   1e2a0:	andeq	lr, r1, ip, asr #7
   1e2a4:	andeq	lr, r1, ip, asr #7
   1e2a8:	andeq	lr, r1, ip, asr #7
   1e2ac:	andeq	lr, r1, ip, asr #7
   1e2b0:	andeq	lr, r1, ip, asr #7
   1e2b4:	andeq	lr, r1, ip, asr #7
   1e2b8:	andeq	lr, r1, ip, asr #7
   1e2bc:	andeq	lr, r1, ip, lsl r6
   1e2c0:	andeq	lr, r1, ip, lsl r6
   1e2c4:	andeq	lr, r1, ip, lsl r6
   1e2c8:	andeq	lr, r1, ip, lsl r6
   1e2cc:	andeq	lr, r1, r0, ror #9
   1e2d0:	andeq	lr, r1, r0, asr #11
   1e2d4:	andeq	lr, r1, ip, asr #7
   1e2d8:	andeq	lr, r1, ip, asr #7
   1e2dc:	andeq	lr, r1, ip, asr #7
   1e2e0:	andeq	lr, r1, ip, asr #7
   1e2e4:	andeq	lr, r1, ip, asr #7
   1e2e8:	andeq	lr, r1, ip, asr #7
   1e2ec:	andeq	lr, r1, ip, asr #7
   1e2f0:	andeq	lr, r1, ip, asr #7
   1e2f4:	andeq	lr, r1, ip, asr #7
   1e2f8:	andeq	lr, r1, ip, asr #7
   1e2fc:	andeq	lr, r1, ip, asr #7
   1e300:	andeq	lr, r1, ip, asr #7
   1e304:	andeq	lr, r1, ip, asr #7
   1e308:	andeq	lr, r1, ip, asr #7
   1e30c:	andeq	lr, r1, ip, asr #7
   1e310:	andeq	lr, r1, ip, asr #7
   1e314:	andeq	lr, r1, ip, asr #7
   1e318:	andeq	lr, r1, ip, asr #7
   1e31c:	andeq	lr, r1, ip, asr #7
   1e320:	andeq	lr, r1, ip, asr #7
   1e324:	andeq	lr, r1, ip, asr #7
   1e328:	andeq	lr, r1, ip, asr #7
   1e32c:	andeq	lr, r1, ip, asr #7
   1e330:	andeq	lr, r1, ip, asr #7
   1e334:	andeq	lr, r1, ip, asr #7
   1e338:	andeq	lr, r1, ip, asr #7
   1e33c:	andeq	lr, r1, ip, lsl r6
   1e340:	andeq	lr, r1, ip, lsr #8
   1e344:	andeq	lr, r1, ip, asr #7
   1e348:	andeq	lr, r1, ip, lsl r6
   1e34c:	andeq	lr, r1, ip, asr #7
   1e350:	andeq	lr, r1, ip, lsl r6
   1e354:	andeq	lr, r1, ip, asr #7
   1e358:	andeq	lr, r1, ip, asr #7
   1e35c:	andeq	lr, r1, ip, asr #7
   1e360:	andeq	lr, r1, ip, asr #7
   1e364:	andeq	lr, r1, ip, asr #7
   1e368:	andeq	lr, r1, ip, asr #7
   1e36c:	andeq	lr, r1, ip, asr #7
   1e370:	andeq	lr, r1, ip, asr #7
   1e374:	andeq	lr, r1, ip, asr #7
   1e378:	andeq	lr, r1, ip, asr #7
   1e37c:	andeq	lr, r1, ip, asr #7
   1e380:	andeq	lr, r1, ip, asr #7
   1e384:	andeq	lr, r1, ip, asr #7
   1e388:	andeq	lr, r1, ip, asr #7
   1e38c:	andeq	lr, r1, ip, asr #7
   1e390:	andeq	lr, r1, ip, asr #7
   1e394:	andeq	lr, r1, ip, asr #7
   1e398:	andeq	lr, r1, ip, asr #7
   1e39c:	andeq	lr, r1, ip, asr #7
   1e3a0:	andeq	lr, r1, ip, asr #7
   1e3a4:	andeq	lr, r1, ip, asr #7
   1e3a8:	andeq	lr, r1, ip, asr #7
   1e3ac:	andeq	lr, r1, ip, asr #7
   1e3b0:	andeq	lr, r1, ip, asr #7
   1e3b4:	andeq	lr, r1, ip, asr #7
   1e3b8:	andeq	lr, r1, ip, asr #7
   1e3bc:	andeq	lr, r1, ip, lsl #8
   1e3c0:	andeq	lr, r1, ip, lsl r6
   1e3c4:	andeq	lr, r1, ip, lsl #8
   1e3c8:	andeq	lr, r1, ip, ror #7
   1e3cc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1e3d0:	cmp	r0, #0
   1e3d4:	beq	1e6b0 <__assert_fail@plt+0xc81c>
   1e3d8:	ldr	r0, [fp, #16]
   1e3dc:	cmp	r0, #0
   1e3e0:	mov	r0, r5
   1e3e4:	bne	1e6c0 <__assert_fail@plt+0xc82c>
   1e3e8:	b	1e6e0 <__assert_fail@plt+0xc84c>
   1e3ec:	mov	r4, #0
   1e3f0:	cmp	r7, #0
   1e3f4:	beq	1e618 <__assert_fail@plt+0xc784>
   1e3f8:	mov	r8, #0
   1e3fc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1e400:	cmp	r0, #0
   1e404:	bne	1e3d8 <__assert_fail@plt+0xc544>
   1e408:	b	1e6b0 <__assert_fail@plt+0xc81c>
   1e40c:	mov	r4, #0
   1e410:	cmn	lr, #1
   1e414:	beq	1e5f0 <__assert_fail@plt+0xc75c>
   1e418:	cmp	r7, #0
   1e41c:	bne	1e3f8 <__assert_fail@plt+0xc564>
   1e420:	cmp	lr, #1
   1e424:	beq	1e618 <__assert_fail@plt+0xc784>
   1e428:	b	1e3f8 <__assert_fail@plt+0xc564>
   1e42c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1e430:	cmp	r0, #2
   1e434:	bne	1e648 <__assert_fail@plt+0xc7b4>
   1e438:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1e43c:	tst	r0, #1
   1e440:	bne	1eea8 <__assert_fail@plt+0xd014>
   1e444:	mov	r8, #0
   1e448:	mov	r0, #92	; 0x5c
   1e44c:	mov	r4, #0
   1e450:	cmp	r8, #0
   1e454:	beq	1e668 <__assert_fail@plt+0xc7d4>
   1e458:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1e45c:	b	1e75c <__assert_fail@plt+0xc8c8>
   1e460:	mov	r0, #102	; 0x66
   1e464:	b	1e69c <__assert_fail@plt+0xc808>
   1e468:	mov	r2, #116	; 0x74
   1e46c:	ldr	r0, [sp, #60]	; 0x3c
   1e470:	tst	r0, #1
   1e474:	mov	r0, r2
   1e478:	bne	1e69c <__assert_fail@plt+0xc808>
   1e47c:	b	1eea8 <__assert_fail@plt+0xd014>
   1e480:	mov	r0, #98	; 0x62
   1e484:	b	1e69c <__assert_fail@plt+0xc808>
   1e488:	mov	r2, #114	; 0x72
   1e48c:	ldr	r0, [sp, #60]	; 0x3c
   1e490:	tst	r0, #1
   1e494:	mov	r0, r2
   1e498:	bne	1e69c <__assert_fail@plt+0xc808>
   1e49c:	b	1eea8 <__assert_fail@plt+0xd014>
   1e4a0:	ldr	r0, [sp, #80]	; 0x50
   1e4a4:	tst	r0, #1
   1e4a8:	beq	1e784 <__assert_fail@plt+0xc8f0>
   1e4ac:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1e4b0:	tst	r0, #1
   1e4b4:	bne	1efd0 <__assert_fail@plt+0xd13c>
   1e4b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1e4bc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1e4c0:	cmp	r0, #2
   1e4c4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1e4c8:	movwne	r0, #1
   1e4cc:	orr	r0, r0, r2
   1e4d0:	tst	r0, #1
   1e4d4:	beq	1ea7c <__assert_fail@plt+0xcbe8>
   1e4d8:	mov	r0, r9
   1e4dc:	b	1eab0 <__assert_fail@plt+0xcc1c>
   1e4e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1e4e4:	mov	r8, #0
   1e4e8:	mov	r5, #63	; 0x3f
   1e4ec:	cmp	r0, #5
   1e4f0:	beq	1e938 <__assert_fail@plt+0xcaa4>
   1e4f4:	cmp	r0, #2
   1e4f8:	bne	1e9e8 <__assert_fail@plt+0xcb54>
   1e4fc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1e500:	tst	r0, #1
   1e504:	bne	1eea8 <__assert_fail@plt+0xd014>
   1e508:	mov	r4, #0
   1e50c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1e510:	cmp	r0, #0
   1e514:	bne	1e3d8 <__assert_fail@plt+0xc544>
   1e518:	b	1e6b0 <__assert_fail@plt+0xc81c>
   1e51c:	mov	r0, #118	; 0x76
   1e520:	b	1e69c <__assert_fail@plt+0xc808>
   1e524:	mov	r0, #1
   1e528:	mov	r5, #39	; 0x27
   1e52c:	str	r0, [sp, #52]	; 0x34
   1e530:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1e534:	cmp	r0, #2
   1e538:	bne	1e5ac <__assert_fail@plt+0xc718>
   1e53c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1e540:	tst	r0, #1
   1e544:	bne	1eea8 <__assert_fail@plt+0xd014>
   1e548:	ldr	r2, [sp, #48]	; 0x30
   1e54c:	clz	r1, sl
   1e550:	mov	r8, #0
   1e554:	lsr	r1, r1, #5
   1e558:	cmp	r2, #0
   1e55c:	mov	r0, r2
   1e560:	movwne	r0, #1
   1e564:	orrs	r0, r0, r1
   1e568:	moveq	r2, sl
   1e56c:	moveq	sl, r0
   1e570:	cmp	r9, sl
   1e574:	str	r2, [sp, #48]	; 0x30
   1e578:	movcc	r0, #39	; 0x27
   1e57c:	strbcc	r0, [r6, r9]
   1e580:	add	r0, r9, #1
   1e584:	cmp	r0, sl
   1e588:	movcc	r1, #92	; 0x5c
   1e58c:	strbcc	r1, [r6, r0]
   1e590:	add	r0, r9, #2
   1e594:	add	r9, r9, #3
   1e598:	cmp	r0, sl
   1e59c:	movcc	r1, #39	; 0x27
   1e5a0:	strbcc	r1, [r6, r0]
   1e5a4:	mov	r0, #0
   1e5a8:	str	r0, [fp, #-48]	; 0xffffffd0
   1e5ac:	mov	r4, #1
   1e5b0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1e5b4:	cmp	r0, #0
   1e5b8:	bne	1e3d8 <__assert_fail@plt+0xc544>
   1e5bc:	b	1e6b0 <__assert_fail@plt+0xc81c>
   1e5c0:	ldr	r0, [sp, #32]
   1e5c4:	cmp	r0, #1
   1e5c8:	bne	1e7b4 <__assert_fail@plt+0xc920>
   1e5cc:	str	lr, [sp, #84]	; 0x54
   1e5d0:	bl	11c54 <__ctype_b_loc@plt>
   1e5d4:	ldr	r0, [r0]
   1e5d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   1e5dc:	mov	r1, #1
   1e5e0:	add	r0, r0, r5, lsl #1
   1e5e4:	ldrb	r0, [r0, #1]
   1e5e8:	ubfx	r4, r0, #6, #1
   1e5ec:	b	1ebac <__assert_fail@plt+0xcd18>
   1e5f0:	cmp	r7, #0
   1e5f4:	ldrbeq	r0, [ip, #1]
   1e5f8:	cmpeq	r0, #0
   1e5fc:	beq	1e618 <__assert_fail@plt+0xc784>
   1e600:	mvn	lr, #0
   1e604:	mov	r8, #0
   1e608:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1e60c:	cmp	r0, #0
   1e610:	bne	1e3d8 <__assert_fail@plt+0xc544>
   1e614:	b	1e6b0 <__assert_fail@plt+0xc81c>
   1e618:	mov	r1, #1
   1e61c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1e620:	cmp	r0, #2
   1e624:	bne	1e634 <__assert_fail@plt+0xc7a0>
   1e628:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1e62c:	tst	r0, #1
   1e630:	bne	1eea8 <__assert_fail@plt+0xd014>
   1e634:	mov	r4, r1
   1e638:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1e63c:	cmp	r0, #0
   1e640:	bne	1e3d8 <__assert_fail@plt+0xc544>
   1e644:	b	1e6b0 <__assert_fail@plt+0xc81c>
   1e648:	ldr	r1, [sp, #40]	; 0x28
   1e64c:	mov	r8, #0
   1e650:	mov	r0, #92	; 0x5c
   1e654:	cmp	r1, #0
   1e658:	beq	1e69c <__assert_fail@plt+0xc808>
   1e65c:	mov	r4, #0
   1e660:	cmp	r8, #0
   1e664:	bne	1e458 <__assert_fail@plt+0xc5c4>
   1e668:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1e66c:	tst	r2, #1
   1e670:	beq	1e75c <__assert_fail@plt+0xc8c8>
   1e674:	cmp	r9, sl
   1e678:	movcc	r1, #39	; 0x27
   1e67c:	strbcc	r1, [r6, r9]
   1e680:	add	r1, r9, #1
   1e684:	add	r9, r9, #2
   1e688:	cmp	r1, sl
   1e68c:	movcc	r2, #39	; 0x27
   1e690:	strbcc	r2, [r6, r1]
   1e694:	mov	r2, #0
   1e698:	b	1e75c <__assert_fail@plt+0xc8c8>
   1e69c:	ldr	r1, [sp, #80]	; 0x50
   1e6a0:	mov	r4, #0
   1e6a4:	mov	r8, #0
   1e6a8:	tst	r1, #1
   1e6ac:	bne	1e6ec <__assert_fail@plt+0xc858>
   1e6b0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1e6b4:	cmp	r0, #0
   1e6b8:	mov	r0, r5
   1e6bc:	beq	1e6e0 <__assert_fail@plt+0xc84c>
   1e6c0:	ldr	r1, [fp, #16]
   1e6c4:	ubfx	r0, r5, #5, #3
   1e6c8:	mov	r2, #1
   1e6cc:	ldr	r0, [r1, r0, lsl #2]
   1e6d0:	and	r1, r5, #31
   1e6d4:	tst	r0, r2, lsl r1
   1e6d8:	mov	r0, r5
   1e6dc:	bne	1e6ec <__assert_fail@plt+0xc858>
   1e6e0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1e6e4:	cmp	r1, #0
   1e6e8:	beq	1eb44 <__assert_fail@plt+0xccb0>
   1e6ec:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1e6f0:	tst	r1, #1
   1e6f4:	bne	1ee88 <__assert_fail@plt+0xcff4>
   1e6f8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1e6fc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1e700:	cmp	r1, #2
   1e704:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1e708:	movwne	r1, #1
   1e70c:	orr	r1, r1, r2
   1e710:	tst	r1, #1
   1e714:	bne	1e74c <__assert_fail@plt+0xc8b8>
   1e718:	cmp	r9, sl
   1e71c:	movcc	r1, #39	; 0x27
   1e720:	strbcc	r1, [r6, r9]
   1e724:	add	r1, r9, #1
   1e728:	cmp	r1, sl
   1e72c:	movcc	r2, #36	; 0x24
   1e730:	strbcc	r2, [r6, r1]
   1e734:	add	r1, r9, #2
   1e738:	add	r9, r9, #3
   1e73c:	cmp	r1, sl
   1e740:	movcc	r2, #39	; 0x27
   1e744:	strbcc	r2, [r6, r1]
   1e748:	mov	r2, #1
   1e74c:	cmp	r9, sl
   1e750:	movcc	r1, #92	; 0x5c
   1e754:	strbcc	r1, [r6, r9]
   1e758:	add	r9, r9, #1
   1e75c:	cmp	r9, sl
   1e760:	add	r7, r7, #1
   1e764:	strbcc	r0, [r6, r9]
   1e768:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1e76c:	add	r9, r9, #1
   1e770:	and	r0, r0, r4
   1e774:	mov	r4, r0
   1e778:	cmn	lr, #1
   1e77c:	bne	1e0f0 <__assert_fail@plt+0xc25c>
   1e780:	b	1e0fc <__assert_fail@plt+0xc268>
   1e784:	ldr	r0, [sp, #28]
   1e788:	mov	r4, #0
   1e78c:	mov	r8, #0
   1e790:	mov	r5, #0
   1e794:	cmp	r0, #0
   1e798:	beq	1e6b0 <__assert_fail@plt+0xc81c>
   1e79c:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1e7a0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1e7a4:	add	r7, r7, #1
   1e7a8:	cmn	lr, #1
   1e7ac:	bne	1e0f0 <__assert_fail@plt+0xc25c>
   1e7b0:	b	1e0fc <__assert_fail@plt+0xc268>
   1e7b4:	mov	r0, #0
   1e7b8:	cmn	lr, #1
   1e7bc:	str	r0, [fp, #-36]	; 0xffffffdc
   1e7c0:	str	r0, [fp, #-40]	; 0xffffffd8
   1e7c4:	bne	1e7d8 <__assert_fail@plt+0xc944>
   1e7c8:	mov	r0, ip
   1e7cc:	bl	11c78 <strlen@plt>
   1e7d0:	ldr	ip, [fp, #-84]	; 0xffffffac
   1e7d4:	mov	lr, r0
   1e7d8:	ldr	r0, [sp, #36]	; 0x24
   1e7dc:	str	sl, [sp, #56]	; 0x38
   1e7e0:	str	lr, [sp, #84]	; 0x54
   1e7e4:	cmp	r0, #0
   1e7e8:	beq	1ea00 <__assert_fail@plt+0xcb6c>
   1e7ec:	add	r0, ip, r7
   1e7f0:	mov	r4, #1
   1e7f4:	mov	r6, #0
   1e7f8:	sub	sl, fp, #40	; 0x28
   1e7fc:	str	r0, [sp, #20]
   1e800:	str	r6, [sp, #64]	; 0x40
   1e804:	add	r6, r6, r7
   1e808:	sub	r0, fp, #44	; 0x2c
   1e80c:	mov	r3, sl
   1e810:	add	r1, ip, r6
   1e814:	sub	r2, lr, r6
   1e818:	bl	38138 <__assert_fail@plt+0x262a4>
   1e81c:	cmn	r0, #2
   1e820:	beq	1eb5c <__assert_fail@plt+0xccc8>
   1e824:	ldr	sl, [sp, #56]	; 0x38
   1e828:	cmn	r0, #1
   1e82c:	beq	1eb50 <__assert_fail@plt+0xccbc>
   1e830:	cmp	r0, #0
   1e834:	beq	1eb54 <__assert_fail@plt+0xccc0>
   1e838:	cmp	r0, #2
   1e83c:	bcc	1e8fc <__assert_fail@plt+0xca68>
   1e840:	ldr	r1, [sp, #64]	; 0x40
   1e844:	ldr	r2, [sp, #20]
   1e848:	add	r1, r2, r1
   1e84c:	mov	r2, #1
   1e850:	ldrb	r3, [r1, r2]
   1e854:	sub	r3, r3, #91	; 0x5b
   1e858:	cmp	r3, #33	; 0x21
   1e85c:	bhi	1e8f0 <__assert_fail@plt+0xca5c>
   1e860:	add	r6, pc, #0
   1e864:	ldr	pc, [r6, r3, lsl #2]
   1e868:			; <UNDEFINED> instruction: 0x0001eeb4
   1e86c:			; <UNDEFINED> instruction: 0x0001eeb4
   1e870:	strdeq	lr, [r1], -r0
   1e874:			; <UNDEFINED> instruction: 0x0001eeb4
   1e878:	strdeq	lr, [r1], -r0
   1e87c:			; <UNDEFINED> instruction: 0x0001eeb4
   1e880:	strdeq	lr, [r1], -r0
   1e884:	strdeq	lr, [r1], -r0
   1e888:	strdeq	lr, [r1], -r0
   1e88c:	strdeq	lr, [r1], -r0
   1e890:	strdeq	lr, [r1], -r0
   1e894:	strdeq	lr, [r1], -r0
   1e898:	strdeq	lr, [r1], -r0
   1e89c:	strdeq	lr, [r1], -r0
   1e8a0:	strdeq	lr, [r1], -r0
   1e8a4:	strdeq	lr, [r1], -r0
   1e8a8:	strdeq	lr, [r1], -r0
   1e8ac:	strdeq	lr, [r1], -r0
   1e8b0:	strdeq	lr, [r1], -r0
   1e8b4:	strdeq	lr, [r1], -r0
   1e8b8:	strdeq	lr, [r1], -r0
   1e8bc:	strdeq	lr, [r1], -r0
   1e8c0:	strdeq	lr, [r1], -r0
   1e8c4:	strdeq	lr, [r1], -r0
   1e8c8:	strdeq	lr, [r1], -r0
   1e8cc:	strdeq	lr, [r1], -r0
   1e8d0:	strdeq	lr, [r1], -r0
   1e8d4:	strdeq	lr, [r1], -r0
   1e8d8:	strdeq	lr, [r1], -r0
   1e8dc:	strdeq	lr, [r1], -r0
   1e8e0:	strdeq	lr, [r1], -r0
   1e8e4:	strdeq	lr, [r1], -r0
   1e8e8:	strdeq	lr, [r1], -r0
   1e8ec:			; <UNDEFINED> instruction: 0x0001eeb4
   1e8f0:	add	r2, r2, #1
   1e8f4:	cmp	r2, r0
   1e8f8:	bcc	1e850 <__assert_fail@plt+0xc9bc>
   1e8fc:	ldr	r6, [sp, #64]	; 0x40
   1e900:	add	r6, r0, r6
   1e904:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1e908:	bl	11b34 <iswprint@plt>
   1e90c:	cmp	r0, #0
   1e910:	sub	sl, fp, #40	; 0x28
   1e914:	movwne	r0, #1
   1e918:	and	r4, r4, r0
   1e91c:	mov	r0, sl
   1e920:	bl	11abc <mbsinit@plt>
   1e924:	ldr	ip, [fp, #-84]	; 0xffffffac
   1e928:	ldr	lr, [sp, #84]	; 0x54
   1e92c:	cmp	r0, #0
   1e930:	beq	1e800 <__assert_fail@plt+0xc96c>
   1e934:	b	1eba0 <__assert_fail@plt+0xcd0c>
   1e938:	ldr	r0, [sp, #24]
   1e93c:	cmp	r0, #0
   1e940:	beq	1e9e8 <__assert_fail@plt+0xcb54>
   1e944:	add	r0, r7, #2
   1e948:	cmp	r0, lr
   1e94c:	bcs	1e9e8 <__assert_fail@plt+0xcb54>
   1e950:	add	r1, ip, r7
   1e954:	ldrb	r1, [r1, #1]
   1e958:	cmp	r1, #63	; 0x3f
   1e95c:	bne	1e9e8 <__assert_fail@plt+0xcb54>
   1e960:	ldrb	r5, [ip, r0]
   1e964:	sub	r1, r5, #33	; 0x21
   1e968:	cmp	r1, #29
   1e96c:	bhi	1e9e8 <__assert_fail@plt+0xcb54>
   1e970:	movw	r3, #20929	; 0x51c1
   1e974:	mov	r2, #1
   1e978:	movt	r3, #14336	; 0x3800
   1e97c:	tst	r3, r2, lsl r1
   1e980:	beq	1e9e8 <__assert_fail@plt+0xcb54>
   1e984:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1e988:	tst	r1, #1
   1e98c:	bne	1efd8 <__assert_fail@plt+0xd144>
   1e990:	cmp	r9, sl
   1e994:	mov	r7, r0
   1e998:	mov	r4, #0
   1e99c:	movcc	r1, #63	; 0x3f
   1e9a0:	strbcc	r1, [r6, r9]
   1e9a4:	add	r1, r9, #1
   1e9a8:	cmp	r1, sl
   1e9ac:	movcc	r2, #34	; 0x22
   1e9b0:	strbcc	r2, [r6, r1]
   1e9b4:	add	r1, r9, #2
   1e9b8:	cmp	r1, sl
   1e9bc:	movcc	r2, #34	; 0x22
   1e9c0:	strbcc	r2, [r6, r1]
   1e9c4:	add	r1, r9, #3
   1e9c8:	add	r9, r9, #4
   1e9cc:	cmp	r1, sl
   1e9d0:	movcc	r2, #63	; 0x3f
   1e9d4:	strbcc	r2, [r6, r1]
   1e9d8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1e9dc:	cmp	r0, #0
   1e9e0:	bne	1e3d8 <__assert_fail@plt+0xc544>
   1e9e4:	b	1e6b0 <__assert_fail@plt+0xc81c>
   1e9e8:	mov	r5, #63	; 0x3f
   1e9ec:	mov	r4, #0
   1e9f0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1e9f4:	cmp	r0, #0
   1e9f8:	bne	1e3d8 <__assert_fail@plt+0xc544>
   1e9fc:	b	1e6b0 <__assert_fail@plt+0xc81c>
   1ea00:	mov	r4, #1
   1ea04:	mov	r6, #0
   1ea08:	sub	sl, fp, #40	; 0x28
   1ea0c:	str	r6, [sp, #64]	; 0x40
   1ea10:	add	r6, r6, r7
   1ea14:	sub	r0, fp, #44	; 0x2c
   1ea18:	mov	r3, sl
   1ea1c:	add	r1, ip, r6
   1ea20:	sub	r2, lr, r6
   1ea24:	bl	38138 <__assert_fail@plt+0x262a4>
   1ea28:	cmn	r0, #2
   1ea2c:	beq	1eb5c <__assert_fail@plt+0xccc8>
   1ea30:	cmn	r0, #1
   1ea34:	beq	1eb50 <__assert_fail@plt+0xccbc>
   1ea38:	ldr	r6, [sp, #64]	; 0x40
   1ea3c:	cmp	r0, #0
   1ea40:	beq	1eb9c <__assert_fail@plt+0xcd08>
   1ea44:	add	r6, r0, r6
   1ea48:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1ea4c:	bl	11b34 <iswprint@plt>
   1ea50:	cmp	r0, #0
   1ea54:	sub	sl, fp, #40	; 0x28
   1ea58:	movwne	r0, #1
   1ea5c:	and	r4, r4, r0
   1ea60:	mov	r0, sl
   1ea64:	bl	11abc <mbsinit@plt>
   1ea68:	ldr	ip, [fp, #-84]	; 0xffffffac
   1ea6c:	ldr	lr, [sp, #84]	; 0x54
   1ea70:	cmp	r0, #0
   1ea74:	beq	1ea0c <__assert_fail@plt+0xcb78>
   1ea78:	b	1eba0 <__assert_fail@plt+0xcd0c>
   1ea7c:	cmp	r9, sl
   1ea80:	mov	r2, #1
   1ea84:	movcc	r0, #39	; 0x27
   1ea88:	strbcc	r0, [r6, r9]
   1ea8c:	add	r0, r9, #1
   1ea90:	cmp	r0, sl
   1ea94:	movcc	r1, #36	; 0x24
   1ea98:	strbcc	r1, [r6, r0]
   1ea9c:	add	r0, r9, #2
   1eaa0:	cmp	r0, sl
   1eaa4:	movcc	r1, #39	; 0x27
   1eaa8:	strbcc	r1, [r6, r0]
   1eaac:	add	r0, r9, #3
   1eab0:	cmp	r0, sl
   1eab4:	add	r9, r0, #1
   1eab8:	str	r2, [fp, #-48]	; 0xffffffd0
   1eabc:	movcc	r1, #92	; 0x5c
   1eac0:	strbcc	r1, [r6, r0]
   1eac4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1eac8:	cmp	r1, #2
   1eacc:	beq	1eb2c <__assert_fail@plt+0xcc98>
   1ead0:	add	r1, r7, #1
   1ead4:	mov	r4, #0
   1ead8:	mov	r8, #1
   1eadc:	mov	r5, #48	; 0x30
   1eae0:	cmp	r1, lr
   1eae4:	bcs	1e3cc <__assert_fail@plt+0xc538>
   1eae8:	ldrb	r1, [ip, r1]
   1eaec:	sub	r1, r1, #48	; 0x30
   1eaf0:	uxtb	r1, r1
   1eaf4:	cmp	r1, #9
   1eaf8:	bhi	1e3cc <__assert_fail@plt+0xc538>
   1eafc:	cmp	r9, sl
   1eb00:	movcc	r1, #48	; 0x30
   1eb04:	strbcc	r1, [r6, r9]
   1eb08:	add	r1, r0, #2
   1eb0c:	add	r9, r0, #3
   1eb10:	cmp	r1, sl
   1eb14:	movcc	r2, #48	; 0x30
   1eb18:	strbcc	r2, [r6, r1]
   1eb1c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1eb20:	cmp	r0, #0
   1eb24:	bne	1e3d8 <__assert_fail@plt+0xc544>
   1eb28:	b	1e6b0 <__assert_fail@plt+0xc81c>
   1eb2c:	mov	r0, #48	; 0x30
   1eb30:	mov	r8, #1
   1eb34:	mov	r4, #0
   1eb38:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1eb3c:	cmp	r1, #0
   1eb40:	bne	1e6ec <__assert_fail@plt+0xc858>
   1eb44:	cmp	r8, #0
   1eb48:	beq	1e668 <__assert_fail@plt+0xc7d4>
   1eb4c:	b	1e458 <__assert_fail@plt+0xc5c4>
   1eb50:	mov	r4, #0
   1eb54:	ldr	ip, [fp, #-84]	; 0xffffffac
   1eb58:	b	1eb94 <__assert_fail@plt+0xcd00>
   1eb5c:	ldr	r1, [sp, #84]	; 0x54
   1eb60:	ldr	ip, [fp, #-84]	; 0xffffffac
   1eb64:	mov	r4, #0
   1eb68:	cmp	r6, r1
   1eb6c:	bcs	1eb94 <__assert_fail@plt+0xcd00>
   1eb70:	ldrb	r0, [ip, r6]
   1eb74:	cmp	r0, #0
   1eb78:	beq	1eb94 <__assert_fail@plt+0xcd00>
   1eb7c:	ldr	r0, [sp, #64]	; 0x40
   1eb80:	add	r0, r0, #1
   1eb84:	add	r6, r0, r7
   1eb88:	str	r0, [sp, #64]	; 0x40
   1eb8c:	cmp	r6, r1
   1eb90:	bcc	1eb70 <__assert_fail@plt+0xccdc>
   1eb94:	ldr	r6, [sp, #64]	; 0x40
   1eb98:	b	1eba0 <__assert_fail@plt+0xcd0c>
   1eb9c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1eba0:	mov	r1, r6
   1eba4:	ldr	r6, [sp, #76]	; 0x4c
   1eba8:	ldr	sl, [sp, #56]	; 0x38
   1ebac:	ldr	r0, [sp, #44]	; 0x2c
   1ebb0:	cmp	r1, #1
   1ebb4:	orr	r2, r4, r0
   1ebb8:	mov	r0, r1
   1ebbc:	bhi	1ebdc <__assert_fail@plt+0xcd48>
   1ebc0:	tst	r2, #1
   1ebc4:	beq	1ebdc <__assert_fail@plt+0xcd48>
   1ebc8:	ldr	lr, [sp, #84]	; 0x54
   1ebcc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1ebd0:	cmp	r0, #0
   1ebd4:	bne	1e3d8 <__assert_fail@plt+0xc544>
   1ebd8:	b	1e6b0 <__assert_fail@plt+0xc81c>
   1ebdc:	str	r2, [sp, #64]	; 0x40
   1ebe0:	add	r0, r0, r7
   1ebe4:	add	r1, r7, #1
   1ebe8:	ldr	lr, [sp, #84]	; 0x54
   1ebec:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1ebf0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1ebf4:	mov	r3, #0
   1ebf8:	str	r0, [sp, #56]	; 0x38
   1ebfc:	ldr	r0, [sp, #64]	; 0x40
   1ec00:	tst	r0, #1
   1ec04:	bne	1ecec <__assert_fail@plt+0xce58>
   1ec08:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1ec0c:	tst	r0, #1
   1ec10:	bne	1ee8c <__assert_fail@plt+0xcff8>
   1ec14:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1ec18:	cmp	r7, #2
   1ec1c:	movwne	r3, #1
   1ec20:	orr	r3, r3, r2
   1ec24:	tst	r3, #1
   1ec28:	bne	1ec60 <__assert_fail@plt+0xcdcc>
   1ec2c:	cmp	r9, sl
   1ec30:	add	r3, r9, #1
   1ec34:	movcc	r2, #39	; 0x27
   1ec38:	strbcc	r2, [r6, r9]
   1ec3c:	cmp	r3, sl
   1ec40:	movcc	r2, #36	; 0x24
   1ec44:	strbcc	r2, [r6, r3]
   1ec48:	add	r3, r9, #2
   1ec4c:	add	r9, r9, #3
   1ec50:	cmp	r3, sl
   1ec54:	movcc	r2, #39	; 0x27
   1ec58:	strbcc	r2, [r6, r3]
   1ec5c:	mov	r2, #1
   1ec60:	cmp	r9, sl
   1ec64:	mov	r0, r2
   1ec68:	movcc	r3, #92	; 0x5c
   1ec6c:	strbcc	r3, [r6, r9]
   1ec70:	add	r3, r9, #1
   1ec74:	cmp	r3, sl
   1ec78:	andcc	r7, r5, #192	; 0xc0
   1ec7c:	movcc	r2, #48	; 0x30
   1ec80:	orrcc	r7, r2, r7, lsr #6
   1ec84:	strbcc	r7, [r6, r3]
   1ec88:	add	r3, r9, #2
   1ec8c:	add	r9, r9, #3
   1ec90:	cmp	r3, sl
   1ec94:	lsrcc	r7, r5, #3
   1ec98:	movcc	r2, #6
   1ec9c:	bficc	r7, r2, #3, #29
   1eca0:	mov	r2, #6
   1eca4:	strbcc	r7, [r6, r3]
   1eca8:	bfi	r5, r2, #3, #29
   1ecac:	mov	r3, #1
   1ecb0:	mov	r2, r0
   1ecb4:	ldr	r0, [sp, #56]	; 0x38
   1ecb8:	and	r8, r3, #1
   1ecbc:	cmp	r0, r1
   1ecc0:	bhi	1ed20 <__assert_fail@plt+0xce8c>
   1ecc4:	b	1ed60 <__assert_fail@plt+0xcecc>
   1ecc8:	cmp	r9, sl
   1eccc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1ecd0:	strbcc	r5, [r6, r9]
   1ecd4:	add	r9, r9, #1
   1ecd8:	ldrb	r5, [ip, r1]
   1ecdc:	add	r1, r1, #1
   1ece0:	ldr	r0, [sp, #64]	; 0x40
   1ece4:	tst	r0, #1
   1ece8:	beq	1ec08 <__assert_fail@plt+0xcd74>
   1ecec:	ldr	r7, [fp, #-56]	; 0xffffffc8
   1ecf0:	tst	r7, #1
   1ecf4:	beq	1ed08 <__assert_fail@plt+0xce74>
   1ecf8:	cmp	r9, sl
   1ecfc:	movcc	r7, #92	; 0x5c
   1ed00:	strbcc	r7, [r6, r9]
   1ed04:	add	r9, r9, #1
   1ed08:	mov	r7, #0
   1ed0c:	str	r7, [fp, #-56]	; 0xffffffc8
   1ed10:	ldr	r0, [sp, #56]	; 0x38
   1ed14:	and	r8, r3, #1
   1ed18:	cmp	r0, r1
   1ed1c:	bls	1ed60 <__assert_fail@plt+0xcecc>
   1ed20:	cmp	r8, #0
   1ed24:	mvn	r7, r2
   1ed28:	movwne	r8, #1
   1ed2c:	orr	r7, r7, r8
   1ed30:	tst	r7, #1
   1ed34:	bne	1ecc8 <__assert_fail@plt+0xce34>
   1ed38:	cmp	r9, sl
   1ed3c:	movcc	r7, #39	; 0x27
   1ed40:	strbcc	r7, [r6, r9]
   1ed44:	add	r7, r9, #1
   1ed48:	add	r9, r9, #2
   1ed4c:	cmp	r7, sl
   1ed50:	movcc	r2, #39	; 0x27
   1ed54:	strbcc	r2, [r6, r7]
   1ed58:	mov	r2, #0
   1ed5c:	b	1ecc8 <__assert_fail@plt+0xce34>
   1ed60:	cmp	r8, #0
   1ed64:	sub	r7, r1, #1
   1ed68:	mov	r0, r5
   1ed6c:	str	r2, [fp, #-48]	; 0xffffffd0
   1ed70:	movwne	r8, #1
   1ed74:	cmp	r8, #0
   1ed78:	beq	1e668 <__assert_fail@plt+0xc7d4>
   1ed7c:	b	1e458 <__assert_fail@plt+0xc5c4>
   1ed80:	mov	lr, r7
   1ed84:	b	1ed8c <__assert_fail@plt+0xcef8>
   1ed88:	mvn	lr, #0
   1ed8c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1ed90:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1ed94:	eor	r0, r7, #2
   1ed98:	orr	r0, r0, r9
   1ed9c:	clz	r0, r0
   1eda0:	lsr	r0, r0, #5
   1eda4:	tst	r1, r0
   1eda8:	bne	1eea8 <__assert_fail@plt+0xd014>
   1edac:	mov	r0, r1
   1edb0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1edb4:	cmp	r7, #2
   1edb8:	movwne	r1, #1
   1edbc:	orr	r0, r0, r1
   1edc0:	tst	r0, #1
   1edc4:	ldreq	r0, [sp, #52]	; 0x34
   1edc8:	streq	lr, [sp, #84]	; 0x54
   1edcc:	eoreq	r0, r0, #1
   1edd0:	tsteq	r0, #1
   1edd4:	bne	1ef6c <__assert_fail@plt+0xd0d8>
   1edd8:	tst	r4, #1
   1eddc:	bne	1ef28 <__assert_fail@plt+0xd094>
   1ede0:	ldr	r6, [sp, #48]	; 0x30
   1ede4:	mov	r8, #0
   1ede8:	cmp	r6, #0
   1edec:	beq	1ef64 <__assert_fail@plt+0xd0d0>
   1edf0:	ldr	r0, [sp, #80]	; 0x50
   1edf4:	mov	r1, #0
   1edf8:	cmp	sl, #0
   1edfc:	mov	r4, #0
   1ee00:	str	r1, [fp, #-72]	; 0xffffffb8
   1ee04:	beq	1dcf8 <__assert_fail@plt+0xbe64>
   1ee08:	b	1ef6c <__assert_fail@plt+0xd0d8>
   1ee0c:	ldrb	r1, [r0, #3]
   1ee10:	cmp	r1, #56	; 0x38
   1ee14:	ldrbeq	r1, [r0, #4]
   1ee18:	cmpeq	r1, #48	; 0x30
   1ee1c:	bne	1def0 <__assert_fail@plt+0xc05c>
   1ee20:	ldrb	r1, [r0, #5]
   1ee24:	cmp	r1, #51	; 0x33
   1ee28:	ldrbeq	r1, [r0, #6]
   1ee2c:	cmpeq	r1, #48	; 0x30
   1ee30:	bne	1def0 <__assert_fail@plt+0xc05c>
   1ee34:	ldrb	r0, [r0, #7]
   1ee38:	cmp	r0, #0
   1ee3c:	movw	r0, #42193	; 0xa4d1
   1ee40:	movt	r0, #3
   1ee44:	str	r0, [sp, #68]	; 0x44
   1ee48:	bne	1def0 <__assert_fail@plt+0xc05c>
   1ee4c:	b	1df0c <__assert_fail@plt+0xc078>
   1ee50:	ldrb	r1, [r0, #4]
   1ee54:	cmp	r1, #48	; 0x30
   1ee58:	ldrbeq	r1, [r0, #5]
   1ee5c:	cmpeq	r1, #51	; 0x33
   1ee60:	bne	1dfd4 <__assert_fail@plt+0xc140>
   1ee64:	ldrb	r1, [r0, #6]
   1ee68:	cmp	r1, #48	; 0x30
   1ee6c:	ldrbeq	r0, [r0, #7]
   1ee70:	cmpeq	r0, #0
   1ee74:	bne	1dfd4 <__assert_fail@plt+0xc140>
   1ee78:	movw	r0, #42197	; 0xa4d5
   1ee7c:	movt	r0, #3
   1ee80:	str	r0, [sp, #72]	; 0x48
   1ee84:	b	1dff4 <__assert_fail@plt+0xc160>
   1ee88:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1ee8c:	ldr	r2, [sp, #80]	; 0x50
   1ee90:	b	1eec8 <__assert_fail@plt+0xd034>
   1ee94:	ldr	ip, [fp, #-84]	; 0xffffffac
   1ee98:	mov	r2, #1
   1ee9c:	mov	lr, r4
   1eea0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1eea4:	b	1eec8 <__assert_fail@plt+0xd034>
   1eea8:	ldr	r2, [sp, #80]	; 0x50
   1eeac:	mov	r7, #2
   1eeb0:	b	1eec8 <__assert_fail@plt+0xd034>
   1eeb4:	ldr	r6, [sp, #76]	; 0x4c
   1eeb8:	ldr	ip, [fp, #-84]	; 0xffffffac
   1eebc:	ldr	lr, [sp, #84]	; 0x54
   1eec0:	ldr	r2, [sp, #80]	; 0x50
   1eec4:	mov	r7, #2
   1eec8:	mov	r0, #0
   1eecc:	ldr	r1, [fp, #12]
   1eed0:	tst	r2, #1
   1eed4:	mov	r2, r7
   1eed8:	mov	r3, lr
   1eedc:	str	r0, [sp, #8]
   1eee0:	ldr	r0, [sp, #68]	; 0x44
   1eee4:	movwne	r2, #4
   1eee8:	cmp	r7, #2
   1eeec:	movne	r2, r7
   1eef0:	str	r2, [sp]
   1eef4:	mov	r2, ip
   1eef8:	bic	r1, r1, #2
   1eefc:	str	r0, [sp, #12]
   1ef00:	ldr	r0, [sp, #72]	; 0x48
   1ef04:	str	r1, [sp, #4]
   1ef08:	mov	r1, sl
   1ef0c:	str	r0, [sp, #16]
   1ef10:	mov	r0, r6
   1ef14:	bl	1dc7c <__assert_fail@plt+0xbde8>
   1ef18:	mov	r9, r0
   1ef1c:	mov	r0, r9
   1ef20:	sub	sp, fp, #28
   1ef24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef28:	mov	r0, #5
   1ef2c:	ldr	r1, [sp, #48]	; 0x30
   1ef30:	ldr	r2, [fp, #-84]	; 0xffffffac
   1ef34:	ldr	r3, [sp, #84]	; 0x54
   1ef38:	str	r0, [sp]
   1ef3c:	ldr	r0, [fp, #12]
   1ef40:	str	r0, [sp, #4]
   1ef44:	ldr	r0, [fp, #16]
   1ef48:	str	r0, [sp, #8]
   1ef4c:	ldr	r0, [sp, #68]	; 0x44
   1ef50:	str	r0, [sp, #12]
   1ef54:	ldr	r0, [sp, #72]	; 0x48
   1ef58:	str	r0, [sp, #16]
   1ef5c:	ldr	r0, [sp, #76]	; 0x4c
   1ef60:	b	1ef14 <__assert_fail@plt+0xd080>
   1ef64:	mov	r0, #0
   1ef68:	str	r0, [fp, #-72]	; 0xffffffb8
   1ef6c:	ldr	r1, [sp, #92]	; 0x5c
   1ef70:	cmp	r1, #0
   1ef74:	beq	1efb4 <__assert_fail@plt+0xd120>
   1ef78:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1ef7c:	ldr	r2, [sp, #76]	; 0x4c
   1ef80:	tst	r0, #1
   1ef84:	bne	1efb8 <__assert_fail@plt+0xd124>
   1ef88:	ldrb	r0, [r1]
   1ef8c:	cmp	r0, #0
   1ef90:	beq	1efb8 <__assert_fail@plt+0xd124>
   1ef94:	add	r1, r1, #1
   1ef98:	cmp	r9, sl
   1ef9c:	strbcc	r0, [r2, r9]
   1efa0:	add	r9, r9, #1
   1efa4:	ldrb	r0, [r1], #1
   1efa8:	cmp	r0, #0
   1efac:	bne	1ef98 <__assert_fail@plt+0xd104>
   1efb0:	b	1efb8 <__assert_fail@plt+0xd124>
   1efb4:	ldr	r2, [sp, #76]	; 0x4c
   1efb8:	cmp	r9, sl
   1efbc:	movcc	r0, #0
   1efc0:	strbcc	r0, [r2, r9]
   1efc4:	mov	r0, r9
   1efc8:	sub	sp, fp, #28
   1efcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1efd0:	mov	r2, #1
   1efd4:	b	1eea0 <__assert_fail@plt+0xd00c>
   1efd8:	ldr	r2, [sp, #80]	; 0x50
   1efdc:	mov	r7, #5
   1efe0:	b	1eec8 <__assert_fail@plt+0xd034>
   1efe4:	bl	11e58 <abort@plt>
   1efe8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1efec:	add	fp, sp, #28
   1eff0:	sub	sp, sp, #28
   1eff4:	movw	r5, #45752	; 0xb2b8
   1eff8:	cmp	r2, #0
   1effc:	mov	r4, r1
   1f000:	mov	r7, r0
   1f004:	str	r0, [sp, #20]
   1f008:	movt	r5, #4
   1f00c:	movne	r5, r2
   1f010:	bl	11ca8 <__errno_location@plt>
   1f014:	mov	sl, r0
   1f018:	ldm	r5, {r0, r1}
   1f01c:	ldr	r2, [r5, #40]	; 0x28
   1f020:	ldr	r3, [r5, #44]	; 0x2c
   1f024:	add	r9, r5, #8
   1f028:	ldr	r6, [sl]
   1f02c:	orr	r8, r1, #1
   1f030:	mov	r1, #0
   1f034:	str	r6, [sp, #24]
   1f038:	stm	sp, {r0, r8, r9}
   1f03c:	str	r2, [sp, #12]
   1f040:	str	r3, [sp, #16]
   1f044:	mov	r0, #0
   1f048:	mov	r2, r7
   1f04c:	mov	r3, r4
   1f050:	mov	r6, r4
   1f054:	bl	1dc7c <__assert_fail@plt+0xbde8>
   1f058:	add	r7, r0, #1
   1f05c:	mov	r0, r7
   1f060:	bl	34298 <__assert_fail@plt+0x22404>
   1f064:	mov	r4, r0
   1f068:	ldr	r0, [r5]
   1f06c:	ldr	r2, [r5, #44]	; 0x2c
   1f070:	ldr	r1, [r5, #40]	; 0x28
   1f074:	mov	r3, r6
   1f078:	stm	sp, {r0, r8, r9}
   1f07c:	str	r2, [sp, #16]
   1f080:	str	r1, [sp, #12]
   1f084:	mov	r0, r4
   1f088:	mov	r1, r7
   1f08c:	ldr	r2, [sp, #20]
   1f090:	bl	1dc7c <__assert_fail@plt+0xbde8>
   1f094:	ldr	r0, [sp, #24]
   1f098:	str	r0, [sl]
   1f09c:	mov	r0, r4
   1f0a0:	sub	sp, fp, #28
   1f0a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0ac:	add	fp, sp, #28
   1f0b0:	sub	sp, sp, #36	; 0x24
   1f0b4:	movw	r8, #45752	; 0xb2b8
   1f0b8:	cmp	r3, #0
   1f0bc:	mov	r4, r2
   1f0c0:	str	r2, [sp, #24]
   1f0c4:	mov	r5, r1
   1f0c8:	mov	r6, r0
   1f0cc:	str	r0, [sp, #20]
   1f0d0:	movt	r8, #4
   1f0d4:	movne	r8, r3
   1f0d8:	bl	11ca8 <__errno_location@plt>
   1f0dc:	str	r0, [sp, #28]
   1f0e0:	cmp	r4, #0
   1f0e4:	add	sl, r8, #8
   1f0e8:	ldm	r8, {r3, r9}
   1f0ec:	ldr	r7, [r0]
   1f0f0:	ldr	r1, [r8, #40]	; 0x28
   1f0f4:	ldr	r2, [r8, #44]	; 0x2c
   1f0f8:	mov	r0, #0
   1f0fc:	orreq	r9, r9, #1
   1f100:	str	r7, [sp, #32]
   1f104:	mov	r7, r5
   1f108:	stm	sp, {r3, r9, sl}
   1f10c:	str	r1, [sp, #12]
   1f110:	str	r2, [sp, #16]
   1f114:	mov	r1, #0
   1f118:	mov	r2, r6
   1f11c:	mov	r3, r5
   1f120:	bl	1dc7c <__assert_fail@plt+0xbde8>
   1f124:	add	r4, r0, #1
   1f128:	mov	r5, r0
   1f12c:	mov	r0, r4
   1f130:	bl	34298 <__assert_fail@plt+0x22404>
   1f134:	mov	r6, r0
   1f138:	ldr	r0, [r8]
   1f13c:	ldr	r2, [r8, #44]	; 0x2c
   1f140:	ldr	r1, [r8, #40]	; 0x28
   1f144:	mov	r3, r7
   1f148:	stm	sp, {r0, r9, sl}
   1f14c:	str	r2, [sp, #16]
   1f150:	str	r1, [sp, #12]
   1f154:	mov	r0, r6
   1f158:	mov	r1, r4
   1f15c:	ldr	r2, [sp, #20]
   1f160:	bl	1dc7c <__assert_fail@plt+0xbde8>
   1f164:	ldr	r0, [sp, #24]
   1f168:	ldr	r1, [sp, #32]
   1f16c:	ldr	r2, [sp, #28]
   1f170:	cmp	r0, #0
   1f174:	str	r1, [r2]
   1f178:	strne	r5, [r0]
   1f17c:	mov	r0, r6
   1f180:	sub	sp, fp, #28
   1f184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f188:	push	{r4, r5, r6, r7, fp, lr}
   1f18c:	add	fp, sp, #16
   1f190:	movw	r4, #45576	; 0xb208
   1f194:	movt	r4, #4
   1f198:	ldrd	r6, [r4]
   1f19c:	cmp	r7, #2
   1f1a0:	blt	1f1cc <__assert_fail@plt+0xd338>
   1f1a4:	add	r5, r6, #12
   1f1a8:	mov	r7, #0
   1f1ac:	ldr	r0, [r5, r7, lsl #3]
   1f1b0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1f1b4:	ldr	r1, [r4, #4]
   1f1b8:	add	r2, r7, #2
   1f1bc:	add	r0, r7, #1
   1f1c0:	mov	r7, r0
   1f1c4:	cmp	r2, r1
   1f1c8:	blt	1f1ac <__assert_fail@plt+0xd318>
   1f1cc:	ldr	r0, [r6, #4]
   1f1d0:	movw	r5, #45800	; 0xb2e8
   1f1d4:	movt	r5, #4
   1f1d8:	cmp	r0, r5
   1f1dc:	beq	1f1f0 <__assert_fail@plt+0xd35c>
   1f1e0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1f1e4:	mov	r0, #256	; 0x100
   1f1e8:	str	r0, [r4, #8]
   1f1ec:	str	r5, [r4, #12]
   1f1f0:	add	r5, r4, #8
   1f1f4:	cmp	r6, r5
   1f1f8:	beq	1f208 <__assert_fail@plt+0xd374>
   1f1fc:	mov	r0, r6
   1f200:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1f204:	str	r5, [r4]
   1f208:	mov	r0, #1
   1f20c:	str	r0, [r4, #4]
   1f210:	pop	{r4, r5, r6, r7, fp, pc}
   1f214:	movw	r3, #45752	; 0xb2b8
   1f218:	mvn	r2, #0
   1f21c:	movt	r3, #4
   1f220:	b	1f224 <__assert_fail@plt+0xd390>
   1f224:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f228:	add	fp, sp, #28
   1f22c:	sub	sp, sp, #44	; 0x2c
   1f230:	mov	r7, r3
   1f234:	str	r2, [sp, #36]	; 0x24
   1f238:	str	r1, [sp, #32]
   1f23c:	mov	r5, r0
   1f240:	bl	11ca8 <__errno_location@plt>
   1f244:	cmp	r5, #0
   1f248:	blt	1f3ac <__assert_fail@plt+0xd518>
   1f24c:	cmn	r5, #-2147483647	; 0x80000001
   1f250:	beq	1f3ac <__assert_fail@plt+0xd518>
   1f254:	movw	r8, #45576	; 0xb208
   1f258:	mov	r4, r0
   1f25c:	movt	r8, #4
   1f260:	ldr	r6, [r8]
   1f264:	ldr	r1, [r8, #4]
   1f268:	ldr	r0, [r0]
   1f26c:	str	r4, [sp, #28]
   1f270:	cmp	r1, r5
   1f274:	str	r0, [sp, #24]
   1f278:	ble	1f284 <__assert_fail@plt+0xd3f0>
   1f27c:	mov	sl, r6
   1f280:	b	1f2e8 <__assert_fail@plt+0xd454>
   1f284:	mov	r0, #8
   1f288:	add	r9, r8, #8
   1f28c:	add	r2, r5, #1
   1f290:	str	r1, [fp, #-32]	; 0xffffffe0
   1f294:	mvn	r3, #-2147483648	; 0x80000000
   1f298:	str	r0, [sp]
   1f29c:	subs	r0, r6, r9
   1f2a0:	sub	r2, r2, r1
   1f2a4:	sub	r1, fp, #32
   1f2a8:	movne	r0, r6
   1f2ac:	bl	34498 <__assert_fail@plt+0x22604>
   1f2b0:	str	r0, [r8]
   1f2b4:	cmp	r6, r9
   1f2b8:	mov	sl, r0
   1f2bc:	ldrdeq	r0, [r8, #8]
   1f2c0:	stmeq	sl, {r0, r1}
   1f2c4:	ldr	r1, [r8, #4]
   1f2c8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1f2cc:	add	r0, sl, r1, lsl #3
   1f2d0:	sub	r1, r2, r1
   1f2d4:	lsl	r2, r1, #3
   1f2d8:	mov	r1, #0
   1f2dc:	bl	11cd8 <memset@plt>
   1f2e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1f2e4:	str	r0, [r8, #4]
   1f2e8:	mov	r9, sl
   1f2ec:	ldr	r6, [r9, r5, lsl #3]!
   1f2f0:	ldr	r4, [r9, #4]!
   1f2f4:	ldm	r7, {r0, r1}
   1f2f8:	ldr	r2, [r7, #40]	; 0x28
   1f2fc:	ldr	r3, [r7, #44]	; 0x2c
   1f300:	orr	r8, r1, #1
   1f304:	add	r1, r7, #8
   1f308:	stm	sp, {r0, r8}
   1f30c:	add	r0, sp, #8
   1f310:	str	r1, [sp, #20]
   1f314:	stm	r0, {r1, r2, r3}
   1f318:	mov	r0, r4
   1f31c:	mov	r1, r6
   1f320:	ldr	r2, [sp, #32]
   1f324:	ldr	r3, [sp, #36]	; 0x24
   1f328:	bl	1dc7c <__assert_fail@plt+0xbde8>
   1f32c:	cmp	r6, r0
   1f330:	bhi	1f394 <__assert_fail@plt+0xd500>
   1f334:	add	r6, r0, #1
   1f338:	movw	r0, #45800	; 0xb2e8
   1f33c:	movt	r0, #4
   1f340:	str	r6, [sl, r5, lsl #3]
   1f344:	cmp	r4, r0
   1f348:	beq	1f354 <__assert_fail@plt+0xd4c0>
   1f34c:	mov	r0, r4
   1f350:	bl	17b10 <__assert_fail@plt+0x5c7c>
   1f354:	mov	r0, r6
   1f358:	bl	34298 <__assert_fail@plt+0x22404>
   1f35c:	str	r0, [r9]
   1f360:	mov	r4, r0
   1f364:	add	r3, sp, #8
   1f368:	ldr	r0, [r7]
   1f36c:	ldr	r1, [r7, #40]	; 0x28
   1f370:	ldr	r2, [r7, #44]	; 0x2c
   1f374:	stm	sp, {r0, r8}
   1f378:	ldr	r0, [sp, #20]
   1f37c:	stm	r3, {r0, r1, r2}
   1f380:	mov	r0, r4
   1f384:	mov	r1, r6
   1f388:	ldr	r2, [sp, #32]
   1f38c:	ldr	r3, [sp, #36]	; 0x24
   1f390:	bl	1dc7c <__assert_fail@plt+0xbde8>
   1f394:	ldr	r1, [sp, #24]
   1f398:	ldr	r0, [sp, #28]
   1f39c:	str	r1, [r0]
   1f3a0:	mov	r0, r4
   1f3a4:	sub	sp, fp, #28
   1f3a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3ac:	bl	11e58 <abort@plt>
   1f3b0:	movw	r3, #45752	; 0xb2b8
   1f3b4:	movt	r3, #4
   1f3b8:	b	1f224 <__assert_fail@plt+0xd390>
   1f3bc:	movw	r3, #45752	; 0xb2b8
   1f3c0:	mov	r1, r0
   1f3c4:	mov	r0, #0
   1f3c8:	mvn	r2, #0
   1f3cc:	movt	r3, #4
   1f3d0:	b	1f224 <__assert_fail@plt+0xd390>
   1f3d4:	movw	r3, #45752	; 0xb2b8
   1f3d8:	mov	r2, r1
   1f3dc:	mov	r1, r0
   1f3e0:	mov	r0, #0
   1f3e4:	movt	r3, #4
   1f3e8:	b	1f224 <__assert_fail@plt+0xd390>
   1f3ec:	push	{fp, lr}
   1f3f0:	mov	fp, sp
   1f3f4:	sub	sp, sp, #48	; 0x30
   1f3f8:	vmov.i32	q8, #0	; 0x00000000
   1f3fc:	mov	ip, #32
   1f400:	mov	r3, sp
   1f404:	mov	lr, r2
   1f408:	cmp	r1, #10
   1f40c:	add	r2, r3, #16
   1f410:	vst1.64	{d16-d17}, [r3], ip
   1f414:	vst1.64	{d16-d17}, [r3]
   1f418:	vst1.64	{d16-d17}, [r2]
   1f41c:	beq	1f43c <__assert_fail@plt+0xd5a8>
   1f420:	str	r1, [sp]
   1f424:	mov	r3, sp
   1f428:	mov	r1, lr
   1f42c:	mvn	r2, #0
   1f430:	bl	1f224 <__assert_fail@plt+0xd390>
   1f434:	mov	sp, fp
   1f438:	pop	{fp, pc}
   1f43c:	bl	11e58 <abort@plt>
   1f440:	push	{r4, sl, fp, lr}
   1f444:	add	fp, sp, #8
   1f448:	sub	sp, sp, #48	; 0x30
   1f44c:	mov	ip, r3
   1f450:	mov	r3, sp
   1f454:	vmov.i32	q8, #0	; 0x00000000
   1f458:	mov	lr, #32
   1f45c:	cmp	r1, #10
   1f460:	add	r4, r3, #16
   1f464:	vst1.64	{d16-d17}, [r3], lr
   1f468:	vst1.64	{d16-d17}, [r3]
   1f46c:	vst1.64	{d16-d17}, [r4]
   1f470:	beq	1f490 <__assert_fail@plt+0xd5fc>
   1f474:	str	r1, [sp]
   1f478:	mov	r1, r2
   1f47c:	mov	r3, sp
   1f480:	mov	r2, ip
   1f484:	bl	1f224 <__assert_fail@plt+0xd390>
   1f488:	sub	sp, fp, #8
   1f48c:	pop	{r4, sl, fp, pc}
   1f490:	bl	11e58 <abort@plt>
   1f494:	push	{fp, lr}
   1f498:	mov	fp, sp
   1f49c:	sub	sp, sp, #48	; 0x30
   1f4a0:	mov	r3, sp
   1f4a4:	vmov.i32	q8, #0	; 0x00000000
   1f4a8:	mov	ip, #32
   1f4ac:	cmp	r0, #10
   1f4b0:	add	r2, r3, #16
   1f4b4:	vst1.64	{d16-d17}, [r3], ip
   1f4b8:	vst1.64	{d16-d17}, [r3]
   1f4bc:	vst1.64	{d16-d17}, [r2]
   1f4c0:	beq	1f4e0 <__assert_fail@plt+0xd64c>
   1f4c4:	str	r0, [sp]
   1f4c8:	mov	r3, sp
   1f4cc:	mov	r0, #0
   1f4d0:	mvn	r2, #0
   1f4d4:	bl	1f224 <__assert_fail@plt+0xd390>
   1f4d8:	mov	sp, fp
   1f4dc:	pop	{fp, pc}
   1f4e0:	bl	11e58 <abort@plt>
   1f4e4:	push	{fp, lr}
   1f4e8:	mov	fp, sp
   1f4ec:	sub	sp, sp, #48	; 0x30
   1f4f0:	mov	r3, sp
   1f4f4:	vmov.i32	q8, #0	; 0x00000000
   1f4f8:	mov	ip, #32
   1f4fc:	cmp	r0, #10
   1f500:	add	lr, r3, #16
   1f504:	vst1.64	{d16-d17}, [r3], ip
   1f508:	vst1.64	{d16-d17}, [r3]
   1f50c:	vst1.64	{d16-d17}, [lr]
   1f510:	beq	1f52c <__assert_fail@plt+0xd698>
   1f514:	str	r0, [sp]
   1f518:	mov	r3, sp
   1f51c:	mov	r0, #0
   1f520:	bl	1f224 <__assert_fail@plt+0xd390>
   1f524:	mov	sp, fp
   1f528:	pop	{fp, pc}
   1f52c:	bl	11e58 <abort@plt>
   1f530:	push	{r4, sl, fp, lr}
   1f534:	add	fp, sp, #8
   1f538:	sub	sp, sp, #48	; 0x30
   1f53c:	mov	lr, r0
   1f540:	movw	r0, #45752	; 0xb2b8
   1f544:	mov	r3, #32
   1f548:	mov	ip, r1
   1f54c:	mov	r4, #1
   1f550:	movt	r0, #4
   1f554:	add	r1, r0, #16
   1f558:	vld1.64	{d16-d17}, [r0], r3
   1f55c:	mov	r3, sp
   1f560:	vld1.64	{d18-d19}, [r1]
   1f564:	add	r1, r3, #16
   1f568:	vld1.64	{d20-d21}, [r0]
   1f56c:	add	r0, r3, #32
   1f570:	vst1.64	{d18-d19}, [r1]
   1f574:	mov	r1, r3
   1f578:	vst1.64	{d20-d21}, [r0]
   1f57c:	mov	r0, #28
   1f580:	and	r0, r0, r2, lsr #3
   1f584:	and	r2, r2, #31
   1f588:	vst1.64	{d16-d17}, [r1], r0
   1f58c:	ldr	r0, [r1, #8]
   1f590:	bic	r4, r4, r0, lsr r2
   1f594:	eor	r0, r0, r4, lsl r2
   1f598:	mov	r2, ip
   1f59c:	str	r0, [r1, #8]
   1f5a0:	mov	r0, #0
   1f5a4:	mov	r1, lr
   1f5a8:	bl	1f224 <__assert_fail@plt+0xd390>
   1f5ac:	sub	sp, fp, #8
   1f5b0:	pop	{r4, sl, fp, pc}
   1f5b4:	push	{fp, lr}
   1f5b8:	mov	fp, sp
   1f5bc:	sub	sp, sp, #48	; 0x30
   1f5c0:	mov	ip, r0
   1f5c4:	movw	r0, #45752	; 0xb2b8
   1f5c8:	mov	r3, #32
   1f5cc:	movt	r0, #4
   1f5d0:	add	r2, r0, #16
   1f5d4:	vld1.64	{d16-d17}, [r0], r3
   1f5d8:	mov	r3, sp
   1f5dc:	vld1.64	{d18-d19}, [r2]
   1f5e0:	add	r2, r3, #16
   1f5e4:	vld1.64	{d20-d21}, [r0]
   1f5e8:	add	r0, r3, #32
   1f5ec:	vst1.64	{d18-d19}, [r2]
   1f5f0:	mov	r2, r3
   1f5f4:	vst1.64	{d20-d21}, [r0]
   1f5f8:	mov	r0, #28
   1f5fc:	and	r0, r0, r1, lsr #3
   1f600:	and	r1, r1, #31
   1f604:	vst1.64	{d16-d17}, [r2], r0
   1f608:	mov	r0, #1
   1f60c:	ldr	lr, [r2, #8]
   1f610:	bic	r0, r0, lr, lsr r1
   1f614:	eor	r0, lr, r0, lsl r1
   1f618:	mov	r1, ip
   1f61c:	str	r0, [r2, #8]
   1f620:	mov	r0, #0
   1f624:	mvn	r2, #0
   1f628:	bl	1f224 <__assert_fail@plt+0xd390>
   1f62c:	mov	sp, fp
   1f630:	pop	{fp, pc}
   1f634:	push	{fp, lr}
   1f638:	mov	fp, sp
   1f63c:	sub	sp, sp, #48	; 0x30
   1f640:	movw	r2, #45752	; 0xb2b8
   1f644:	mov	r3, #32
   1f648:	mov	r1, r0
   1f64c:	movt	r2, #4
   1f650:	add	r0, r2, #16
   1f654:	vld1.64	{d16-d17}, [r2], r3
   1f658:	mov	r3, sp
   1f65c:	vld1.64	{d18-d19}, [r0]
   1f660:	add	r0, r3, #16
   1f664:	vld1.64	{d20-d21}, [r2]
   1f668:	mov	r2, r3
   1f66c:	vst1.64	{d18-d19}, [r0]
   1f670:	add	r0, r3, #32
   1f674:	vst1.64	{d20-d21}, [r0]
   1f678:	mov	r0, #12
   1f67c:	vst1.64	{d16-d17}, [r2], r0
   1f680:	ldr	r0, [r2]
   1f684:	orr	r0, r0, #67108864	; 0x4000000
   1f688:	str	r0, [r2]
   1f68c:	mov	r0, #0
   1f690:	mvn	r2, #0
   1f694:	bl	1f224 <__assert_fail@plt+0xd390>
   1f698:	mov	sp, fp
   1f69c:	pop	{fp, pc}
   1f6a0:	push	{fp, lr}
   1f6a4:	mov	fp, sp
   1f6a8:	sub	sp, sp, #48	; 0x30
   1f6ac:	mov	ip, r1
   1f6b0:	mov	r1, r0
   1f6b4:	movw	r0, #45752	; 0xb2b8
   1f6b8:	mov	r3, #32
   1f6bc:	movt	r0, #4
   1f6c0:	add	r2, r0, #16
   1f6c4:	vld1.64	{d16-d17}, [r0], r3
   1f6c8:	mov	r3, sp
   1f6cc:	vld1.64	{d18-d19}, [r2]
   1f6d0:	add	r2, r3, #16
   1f6d4:	vld1.64	{d20-d21}, [r0]
   1f6d8:	add	r0, r3, #32
   1f6dc:	vst1.64	{d18-d19}, [r2]
   1f6e0:	mov	r2, r3
   1f6e4:	vst1.64	{d20-d21}, [r0]
   1f6e8:	mov	r0, #12
   1f6ec:	vst1.64	{d16-d17}, [r2], r0
   1f6f0:	ldr	r0, [r2]
   1f6f4:	orr	r0, r0, #67108864	; 0x4000000
   1f6f8:	str	r0, [r2]
   1f6fc:	mov	r0, #0
   1f700:	mov	r2, ip
   1f704:	bl	1f224 <__assert_fail@plt+0xd390>
   1f708:	mov	sp, fp
   1f70c:	pop	{fp, pc}
   1f710:	push	{r4, sl, fp, lr}
   1f714:	add	fp, sp, #8
   1f718:	sub	sp, sp, #96	; 0x60
   1f71c:	mov	ip, r2
   1f720:	mov	r2, sp
   1f724:	vmov.i32	q8, #0	; 0x00000000
   1f728:	mov	r4, #28
   1f72c:	cmp	r1, #10
   1f730:	mov	r3, r2
   1f734:	add	lr, r2, #16
   1f738:	vst1.64	{d16-d17}, [r3], r4
   1f73c:	vst1.64	{d16-d17}, [lr]
   1f740:	vst1.32	{d16-d17}, [r3]
   1f744:	beq	1f794 <__assert_fail@plt+0xd900>
   1f748:	vld1.64	{d16-d17}, [r2], r4
   1f74c:	vld1.64	{d18-d19}, [lr]
   1f750:	add	r3, sp, #48	; 0x30
   1f754:	add	r4, r3, #4
   1f758:	vld1.32	{d20-d21}, [r2]
   1f75c:	add	r2, r3, #20
   1f760:	vst1.32	{d16-d17}, [r4]
   1f764:	vst1.32	{d18-d19}, [r2]
   1f768:	add	r2, r3, #32
   1f76c:	vst1.32	{d20-d21}, [r2]
   1f770:	str	r1, [sp, #48]	; 0x30
   1f774:	mvn	r2, #0
   1f778:	ldr	r1, [sp, #60]	; 0x3c
   1f77c:	orr	r1, r1, #67108864	; 0x4000000
   1f780:	str	r1, [sp, #60]	; 0x3c
   1f784:	mov	r1, ip
   1f788:	bl	1f224 <__assert_fail@plt+0xd390>
   1f78c:	sub	sp, fp, #8
   1f790:	pop	{r4, sl, fp, pc}
   1f794:	bl	11e58 <abort@plt>
   1f798:	push	{r4, r5, fp, lr}
   1f79c:	add	fp, sp, #8
   1f7a0:	sub	sp, sp, #48	; 0x30
   1f7a4:	mov	ip, r3
   1f7a8:	movw	r3, #45752	; 0xb2b8
   1f7ac:	mov	lr, #32
   1f7b0:	cmp	r1, #0
   1f7b4:	mov	r5, sp
   1f7b8:	movt	r3, #4
   1f7bc:	cmpne	r2, #0
   1f7c0:	add	r4, r3, #16
   1f7c4:	vld1.64	{d16-d17}, [r3], lr
   1f7c8:	vld1.64	{d18-d19}, [r4]
   1f7cc:	add	r4, r5, #16
   1f7d0:	vld1.64	{d20-d21}, [r3]
   1f7d4:	vst1.64	{d16-d17}, [r5], lr
   1f7d8:	mov	r3, #10
   1f7dc:	vst1.64	{d18-d19}, [r4]
   1f7e0:	vst1.64	{d20-d21}, [r5]
   1f7e4:	str	r3, [sp]
   1f7e8:	bne	1f7f0 <__assert_fail@plt+0xd95c>
   1f7ec:	bl	11e58 <abort@plt>
   1f7f0:	str	r2, [sp, #44]	; 0x2c
   1f7f4:	str	r1, [sp, #40]	; 0x28
   1f7f8:	mov	r3, sp
   1f7fc:	mov	r1, ip
   1f800:	mvn	r2, #0
   1f804:	bl	1f224 <__assert_fail@plt+0xd390>
   1f808:	sub	sp, fp, #8
   1f80c:	pop	{r4, r5, fp, pc}
   1f810:	push	{r4, r5, fp, lr}
   1f814:	add	fp, sp, #8
   1f818:	sub	sp, sp, #48	; 0x30
   1f81c:	mov	lr, r3
   1f820:	movw	r3, #45752	; 0xb2b8
   1f824:	mov	ip, #32
   1f828:	cmp	r1, #0
   1f82c:	mov	r5, sp
   1f830:	movt	r3, #4
   1f834:	cmpne	r2, #0
   1f838:	add	r4, r3, #16
   1f83c:	vld1.64	{d16-d17}, [r3], ip
   1f840:	vld1.64	{d18-d19}, [r4]
   1f844:	add	r4, r5, #16
   1f848:	vld1.64	{d20-d21}, [r3]
   1f84c:	vst1.64	{d16-d17}, [r5], ip
   1f850:	mov	r3, #10
   1f854:	vst1.64	{d18-d19}, [r4]
   1f858:	vst1.64	{d20-d21}, [r5]
   1f85c:	str	r3, [sp]
   1f860:	bne	1f868 <__assert_fail@plt+0xd9d4>
   1f864:	bl	11e58 <abort@plt>
   1f868:	ldr	ip, [fp, #8]
   1f86c:	str	r2, [sp, #44]	; 0x2c
   1f870:	str	r1, [sp, #40]	; 0x28
   1f874:	mov	r3, sp
   1f878:	mov	r1, lr
   1f87c:	mov	r2, ip
   1f880:	bl	1f224 <__assert_fail@plt+0xd390>
   1f884:	sub	sp, fp, #8
   1f888:	pop	{r4, r5, fp, pc}
   1f88c:	push	{r4, sl, fp, lr}
   1f890:	add	fp, sp, #8
   1f894:	sub	sp, sp, #48	; 0x30
   1f898:	mov	ip, r2
   1f89c:	movw	r2, #45752	; 0xb2b8
   1f8a0:	mov	lr, #32
   1f8a4:	cmp	r0, #0
   1f8a8:	mov	r4, sp
   1f8ac:	movt	r2, #4
   1f8b0:	cmpne	r1, #0
   1f8b4:	add	r3, r2, #16
   1f8b8:	vld1.64	{d16-d17}, [r2], lr
   1f8bc:	vld1.64	{d18-d19}, [r3]
   1f8c0:	add	r3, r4, #16
   1f8c4:	vld1.64	{d20-d21}, [r2]
   1f8c8:	vst1.64	{d16-d17}, [r4], lr
   1f8cc:	mov	r2, #10
   1f8d0:	vst1.64	{d18-d19}, [r3]
   1f8d4:	vst1.64	{d20-d21}, [r4]
   1f8d8:	str	r2, [sp]
   1f8dc:	bne	1f8e4 <__assert_fail@plt+0xda50>
   1f8e0:	bl	11e58 <abort@plt>
   1f8e4:	str	r1, [sp, #44]	; 0x2c
   1f8e8:	str	r0, [sp, #40]	; 0x28
   1f8ec:	mov	r3, sp
   1f8f0:	mov	r0, #0
   1f8f4:	mov	r1, ip
   1f8f8:	mvn	r2, #0
   1f8fc:	bl	1f224 <__assert_fail@plt+0xd390>
   1f900:	sub	sp, fp, #8
   1f904:	pop	{r4, sl, fp, pc}
   1f908:	push	{r4, r5, fp, lr}
   1f90c:	add	fp, sp, #8
   1f910:	sub	sp, sp, #48	; 0x30
   1f914:	mov	lr, r2
   1f918:	movw	r2, #45752	; 0xb2b8
   1f91c:	mov	ip, r3
   1f920:	mov	r3, #32
   1f924:	cmp	r0, #0
   1f928:	mov	r5, sp
   1f92c:	movt	r2, #4
   1f930:	cmpne	r1, #0
   1f934:	add	r4, r2, #16
   1f938:	vld1.64	{d16-d17}, [r2], r3
   1f93c:	vld1.64	{d18-d19}, [r4]
   1f940:	add	r4, r5, #16
   1f944:	vld1.64	{d20-d21}, [r2]
   1f948:	vst1.64	{d16-d17}, [r5], r3
   1f94c:	mov	r2, #10
   1f950:	vst1.64	{d18-d19}, [r4]
   1f954:	vst1.64	{d20-d21}, [r5]
   1f958:	str	r2, [sp]
   1f95c:	bne	1f964 <__assert_fail@plt+0xdad0>
   1f960:	bl	11e58 <abort@plt>
   1f964:	str	r1, [sp, #44]	; 0x2c
   1f968:	str	r0, [sp, #40]	; 0x28
   1f96c:	mov	r3, sp
   1f970:	mov	r0, #0
   1f974:	mov	r1, lr
   1f978:	mov	r2, ip
   1f97c:	bl	1f224 <__assert_fail@plt+0xd390>
   1f980:	sub	sp, fp, #8
   1f984:	pop	{r4, r5, fp, pc}
   1f988:	movw	r3, #45528	; 0xb1d8
   1f98c:	movt	r3, #4
   1f990:	b	1f224 <__assert_fail@plt+0xd390>
   1f994:	movw	r3, #45528	; 0xb1d8
   1f998:	mov	r2, r1
   1f99c:	mov	r1, r0
   1f9a0:	mov	r0, #0
   1f9a4:	movt	r3, #4
   1f9a8:	b	1f224 <__assert_fail@plt+0xd390>
   1f9ac:	movw	r3, #45528	; 0xb1d8
   1f9b0:	mvn	r2, #0
   1f9b4:	movt	r3, #4
   1f9b8:	b	1f224 <__assert_fail@plt+0xd390>
   1f9bc:	movw	r3, #45528	; 0xb1d8
   1f9c0:	mov	r1, r0
   1f9c4:	mov	r0, #0
   1f9c8:	mvn	r2, #0
   1f9cc:	movt	r3, #4
   1f9d0:	b	1f224 <__assert_fail@plt+0xd390>
	...
   1f9e0:	push	{fp, lr}
   1f9e4:	mov	fp, sp
   1f9e8:	mov	lr, r0
   1f9ec:	movw	r0, #46060	; 0xb3ec
   1f9f0:	mov	ip, r1
   1f9f4:	ldrb	r1, [r2, #28]
   1f9f8:	movt	r0, #4
   1f9fc:	ldr	r3, [r0]
   1fa00:	mov	r0, #16
   1fa04:	and	r1, r1, #111	; 0x6f
   1fa08:	and	r0, r0, r3, lsr #21
   1fa0c:	orr	r0, r1, r0
   1fa10:	mov	r1, lr
   1fa14:	orr	r0, r0, #128	; 0x80
   1fa18:	strb	r0, [r2, #28]
   1fa1c:	mov	r0, r2
   1fa20:	mov	r2, ip
   1fa24:	bl	1fa60 <__assert_fail@plt+0xdbcc>
   1fa28:	cmp	r0, #0
   1fa2c:	moveq	r0, #0
   1fa30:	popeq	{fp, pc}
   1fa34:	movw	r1, #42672	; 0xa6b0
   1fa38:	mov	r2, #5
   1fa3c:	movt	r1, #3
   1fa40:	ldr	r0, [r1, r0, lsl #2]
   1fa44:	movw	r1, #42288	; 0xa530
   1fa48:	movt	r1, #3
   1fa4c:	add	r1, r1, r0
   1fa50:	mov	r0, #0
   1fa54:	pop	{fp, lr}
   1fa58:	b	11ad4 <dcgettext@plt>
   1fa5c:	nop	{0}
   1fa60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa64:	add	fp, sp, #28
   1fa68:	sub	sp, sp, #140	; 0x8c
   1fa6c:	mov	r9, r0
   1fa70:	mov	r0, #0
   1fa74:	mov	sl, r3
   1fa78:	mov	r7, r2
   1fa7c:	mov	r8, r1
   1fa80:	str	r0, [fp, #-52]	; 0xffffffcc
   1fa84:	str	r0, [r9, #8]
   1fa88:	str	r3, [r9, #12]
   1fa8c:	str	r0, [r9, #24]
   1fa90:	ldrb	r0, [r9, #28]
   1fa94:	and	r0, r0, #144	; 0x90
   1fa98:	strb	r0, [r9, #28]
   1fa9c:	ldr	r0, [r9, #4]
   1faa0:	ldr	r6, [r9]
   1faa4:	cmp	r0, #159	; 0x9f
   1faa8:	bls	20438 <__assert_fail@plt+0xe5a4>
   1faac:	mov	r0, #160	; 0xa0
   1fab0:	mov	r1, #0
   1fab4:	mov	r2, #160	; 0xa0
   1fab8:	str	r0, [r9, #8]
   1fabc:	mov	r0, r6
   1fac0:	bl	11cd8 <memset@plt>
   1fac4:	mov	r0, #31
   1fac8:	str	r0, [r6, #64]	; 0x40
   1facc:	movw	r0, #43689	; 0xaaa9
   1fad0:	movt	r0, #2730	; 0xaaa
   1fad4:	cmp	r7, r0
   1fad8:	bhi	1fdf8 <__assert_fail@plt+0xdf64>
   1fadc:	add	r0, r7, #1
   1fae0:	str	r0, [r6, #4]
   1fae4:	str	r0, [sp, #28]
   1fae8:	lsl	r0, r0, #3
   1faec:	bl	36fb4 <__assert_fail@plt+0x25120>
   1faf0:	str	r0, [r6]
   1faf4:	mov	r0, #1
   1faf8:	mov	r4, r0
   1fafc:	lsl	r0, r0, #1
   1fb00:	cmp	r4, r7
   1fb04:	bls	1faf8 <__assert_fail@plt+0xdc64>
   1fb08:	mov	r0, #12
   1fb0c:	mov	r1, r4
   1fb10:	bl	36f60 <__assert_fail@plt+0x250cc>
   1fb14:	str	r0, [r6, #32]
   1fb18:	sub	r0, r4, #1
   1fb1c:	str	r0, [r6, #68]	; 0x44
   1fb20:	bl	11b70 <__ctype_get_mb_cur_max@plt>
   1fb24:	str	r0, [r6, #92]	; 0x5c
   1fb28:	mov	r0, #14
   1fb2c:	bl	11d74 <nl_langinfo@plt>
   1fb30:	ldrb	r1, [r0]
   1fb34:	orr	r1, r1, #32
   1fb38:	cmp	r1, #117	; 0x75
   1fb3c:	bne	1fb88 <__assert_fail@plt+0xdcf4>
   1fb40:	ldrb	r1, [r0, #1]
   1fb44:	orr	r1, r1, #32
   1fb48:	cmp	r1, #116	; 0x74
   1fb4c:	bne	1fb88 <__assert_fail@plt+0xdcf4>
   1fb50:	ldrb	r1, [r0, #2]
   1fb54:	orr	r1, r1, #32
   1fb58:	cmp	r1, #102	; 0x66
   1fb5c:	bne	1fb88 <__assert_fail@plt+0xdcf4>
   1fb60:	ldrb	r1, [r0, #3]!
   1fb64:	cmp	r1, #45	; 0x2d
   1fb68:	movw	r1, #42788	; 0xa724
   1fb6c:	addeq	r0, r0, #1
   1fb70:	movt	r1, #3
   1fb74:	bl	11a14 <strcmp@plt>
   1fb78:	cmp	r0, #0
   1fb7c:	ldrbeq	r0, [r6, #88]	; 0x58
   1fb80:	orreq	r0, r0, #4
   1fb84:	strbeq	r0, [r6, #88]	; 0x58
   1fb88:	ldrb	r0, [r6, #88]	; 0x58
   1fb8c:	and	r1, r0, #247	; 0xf7
   1fb90:	strb	r1, [r6, #88]	; 0x58
   1fb94:	ldr	r1, [r6, #92]	; 0x5c
   1fb98:	cmp	r1, #2
   1fb9c:	blt	1fde4 <__assert_fail@plt+0xdf50>
   1fba0:	tst	r0, #4
   1fba4:	bne	1fdd8 <__assert_fail@plt+0xdf44>
   1fba8:	mov	r0, #32
   1fbac:	mov	r1, #1
   1fbb0:	mov	r5, #1
   1fbb4:	bl	36f60 <__assert_fail@plt+0x250cc>
   1fbb8:	cmp	r0, #0
   1fbbc:	str	r0, [r6, #60]	; 0x3c
   1fbc0:	beq	1fdf8 <__assert_fail@plt+0xdf64>
   1fbc4:	mov	r4, #0
   1fbc8:	mov	r0, r4
   1fbcc:	bl	11ce4 <btowc@plt>
   1fbd0:	cmn	r0, #1
   1fbd4:	ldrne	r1, [r6, #60]	; 0x3c
   1fbd8:	ldrne	r2, [r1]
   1fbdc:	orrne	r2, r2, r5, lsl r4
   1fbe0:	strne	r2, [r1]
   1fbe4:	cmp	r4, r0
   1fbe8:	add	r4, r4, #1
   1fbec:	ldrbne	r0, [r6, #88]	; 0x58
   1fbf0:	orrne	r0, r0, #8
   1fbf4:	strbne	r0, [r6, #88]	; 0x58
   1fbf8:	cmp	r4, #32
   1fbfc:	bne	1fbc8 <__assert_fail@plt+0xdd34>
   1fc00:	mov	r4, #32
   1fc04:	mov	r5, #1
   1fc08:	mov	r0, r4
   1fc0c:	bl	11ce4 <btowc@plt>
   1fc10:	cmn	r0, #1
   1fc14:	ldrne	r2, [r6, #60]	; 0x3c
   1fc18:	subne	r1, r4, #32
   1fc1c:	ldrne	r3, [r2, #4]
   1fc20:	orrne	r1, r3, r5, lsl r1
   1fc24:	strne	r1, [r2, #4]
   1fc28:	cmp	r0, r4
   1fc2c:	sub	r1, r4, #31
   1fc30:	ldrbne	r0, [r6, #88]	; 0x58
   1fc34:	orrne	r0, r0, #8
   1fc38:	strbne	r0, [r6, #88]	; 0x58
   1fc3c:	add	r0, r4, #1
   1fc40:	cmp	r1, #32
   1fc44:	mov	r4, r0
   1fc48:	bne	1fc08 <__assert_fail@plt+0xdd74>
   1fc4c:	mov	r4, #64	; 0x40
   1fc50:	mov	r5, #1
   1fc54:	mov	r0, r4
   1fc58:	bl	11ce4 <btowc@plt>
   1fc5c:	cmn	r0, #1
   1fc60:	ldrne	r2, [r6, #60]	; 0x3c
   1fc64:	subne	r1, r4, #64	; 0x40
   1fc68:	ldrne	r3, [r2, #8]
   1fc6c:	orrne	r1, r3, r5, lsl r1
   1fc70:	strne	r1, [r2, #8]
   1fc74:	cmp	r0, r4
   1fc78:	sub	r1, r4, #63	; 0x3f
   1fc7c:	ldrbne	r0, [r6, #88]	; 0x58
   1fc80:	orrne	r0, r0, #8
   1fc84:	strbne	r0, [r6, #88]	; 0x58
   1fc88:	add	r0, r4, #1
   1fc8c:	cmp	r1, #32
   1fc90:	mov	r4, r0
   1fc94:	bne	1fc54 <__assert_fail@plt+0xddc0>
   1fc98:	mov	r4, #96	; 0x60
   1fc9c:	mov	r5, #1
   1fca0:	mov	r0, r4
   1fca4:	bl	11ce4 <btowc@plt>
   1fca8:	cmn	r0, #1
   1fcac:	ldrne	r2, [r6, #60]	; 0x3c
   1fcb0:	subne	r1, r4, #96	; 0x60
   1fcb4:	ldrne	r3, [r2, #12]
   1fcb8:	orrne	r1, r3, r5, lsl r1
   1fcbc:	strne	r1, [r2, #12]
   1fcc0:	cmp	r0, r4
   1fcc4:	sub	r1, r4, #95	; 0x5f
   1fcc8:	ldrbne	r0, [r6, #88]	; 0x58
   1fccc:	orrne	r0, r0, #8
   1fcd0:	strbne	r0, [r6, #88]	; 0x58
   1fcd4:	add	r0, r4, #1
   1fcd8:	cmp	r1, #32
   1fcdc:	mov	r4, r0
   1fce0:	bne	1fca0 <__assert_fail@plt+0xde0c>
   1fce4:	mov	r4, #128	; 0x80
   1fce8:	mov	r5, #1
   1fcec:	mov	r0, r4
   1fcf0:	bl	11ce4 <btowc@plt>
   1fcf4:	cmn	r0, #1
   1fcf8:	ldrne	r1, [r6, #60]	; 0x3c
   1fcfc:	subne	r0, r4, #128	; 0x80
   1fd00:	ldrne	r2, [r1, #16]
   1fd04:	orrne	r0, r2, r5, lsl r0
   1fd08:	strne	r0, [r1, #16]
   1fd0c:	sub	r1, r4, #127	; 0x7f
   1fd10:	add	r0, r4, #1
   1fd14:	cmp	r1, #32
   1fd18:	mov	r4, r0
   1fd1c:	bne	1fcec <__assert_fail@plt+0xde58>
   1fd20:	mov	r4, #160	; 0xa0
   1fd24:	mov	r5, #1
   1fd28:	mov	r0, r4
   1fd2c:	bl	11ce4 <btowc@plt>
   1fd30:	cmn	r0, #1
   1fd34:	ldrne	r1, [r6, #60]	; 0x3c
   1fd38:	subne	r0, r4, #160	; 0xa0
   1fd3c:	ldrne	r2, [r1, #20]
   1fd40:	orrne	r0, r2, r5, lsl r0
   1fd44:	strne	r0, [r1, #20]
   1fd48:	sub	r1, r4, #159	; 0x9f
   1fd4c:	add	r0, r4, #1
   1fd50:	cmp	r1, #32
   1fd54:	mov	r4, r0
   1fd58:	bne	1fd28 <__assert_fail@plt+0xde94>
   1fd5c:	mov	r4, #192	; 0xc0
   1fd60:	mov	r5, #1
   1fd64:	mov	r0, r4
   1fd68:	bl	11ce4 <btowc@plt>
   1fd6c:	cmn	r0, #1
   1fd70:	ldrne	r1, [r6, #60]	; 0x3c
   1fd74:	subne	r0, r4, #192	; 0xc0
   1fd78:	ldrne	r2, [r1, #24]
   1fd7c:	orrne	r0, r2, r5, lsl r0
   1fd80:	strne	r0, [r1, #24]
   1fd84:	sub	r1, r4, #191	; 0xbf
   1fd88:	add	r0, r4, #1
   1fd8c:	cmp	r1, #32
   1fd90:	mov	r4, r0
   1fd94:	bne	1fd64 <__assert_fail@plt+0xded0>
   1fd98:	mov	r4, #224	; 0xe0
   1fd9c:	mov	r5, #1
   1fda0:	mov	r0, r4
   1fda4:	bl	11ce4 <btowc@plt>
   1fda8:	cmn	r0, #1
   1fdac:	ldrne	r1, [r6, #60]	; 0x3c
   1fdb0:	subne	r0, r4, #224	; 0xe0
   1fdb4:	ldrne	r2, [r1, #28]
   1fdb8:	orrne	r0, r2, r5, lsl r0
   1fdbc:	strne	r0, [r1, #28]
   1fdc0:	sub	r1, r4, #223	; 0xdf
   1fdc4:	add	r0, r4, #1
   1fdc8:	cmp	r1, #32
   1fdcc:	mov	r4, r0
   1fdd0:	bne	1fda0 <__assert_fail@plt+0xdf0c>
   1fdd4:	b	1fde4 <__assert_fail@plt+0xdf50>
   1fdd8:	movw	r0, #42740	; 0xa6f4
   1fddc:	movt	r0, #3
   1fde0:	str	r0, [r6, #60]	; 0x3c
   1fde4:	ldr	r0, [r6]
   1fde8:	cmp	r0, #0
   1fdec:	ldrne	r0, [r6, #32]
   1fdf0:	cmpne	r0, #0
   1fdf4:	bne	1fe20 <__assert_fail@plt+0xdf8c>
   1fdf8:	mov	r4, #12
   1fdfc:	mov	r0, r6
   1fe00:	str	r4, [fp, #-52]	; 0xffffffcc
   1fe04:	bl	21cac <__assert_fail@plt+0xfe18>
   1fe08:	mov	r0, #0
   1fe0c:	str	r0, [r9]
   1fe10:	str	r0, [r9, #4]
   1fe14:	mov	r0, r4
   1fe18:	sub	sp, fp, #28
   1fe1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe20:	movw	r0, #0
   1fe24:	movw	r1, #0
   1fe28:	mov	r4, #0
   1fe2c:	movt	r0, #0
   1fe30:	movt	r1, #0
   1fe34:	str	r4, [fp, #-52]	; 0xffffffcc
   1fe38:	orrs	r0, r1, r0
   1fe3c:	str	r0, [sp, #8]
   1fe40:	beq	1fe58 <__assert_fail@plt+0xdfc4>
   1fe44:	add	r0, r6, #136	; 0x88
   1fe48:	mov	r1, #0
   1fe4c:	bl	11a98 <pthread_mutex_init@plt>
   1fe50:	cmp	r0, #0
   1fe54:	bne	1fdf8 <__assert_fail@plt+0xdf64>
   1fe58:	add	r1, sp, #32
   1fe5c:	vmov.i32	q8, #0	; 0x00000000
   1fe60:	str	r9, [sp, #16]
   1fe64:	ldr	r9, [r9, #20]
   1fe68:	mov	r5, r8
   1fe6c:	add	r0, r1, #64	; 0x40
   1fe70:	vst1.32	{d16-d17}, [r0]
   1fe74:	add	r0, r1, #52	; 0x34
   1fe78:	vst1.32	{d16-d17}, [r0]
   1fe7c:	add	r0, r1, #36	; 0x24
   1fe80:	vst1.32	{d16-d17}, [r0]
   1fe84:	add	r0, r1, #20
   1fe88:	vst1.32	{d16-d17}, [r0]
   1fe8c:	add	r0, r1, #4
   1fe90:	add	r1, r1, #44	; 0x2c
   1fe94:	vst1.32	{d16-d17}, [r0]
   1fe98:	str	r8, [sp, #32]
   1fe9c:	ubfx	r0, sl, #22, #1
   1fea0:	str	sl, [sp, #24]
   1fea4:	vdup.32	q8, r7
   1fea8:	str	r6, [sp, #20]
   1feac:	strb	r0, [sp, #104]	; 0x68
   1feb0:	and	r0, sl, #4194304	; 0x400000
   1feb4:	str	r9, [sp, #96]	; 0x60
   1feb8:	orrs	sl, r0, r9
   1febc:	str	r0, [sp, #12]
   1fec0:	movwne	sl, #1
   1fec4:	cmp	r7, #1
   1fec8:	strb	sl, [sp, #107]	; 0x6b
   1fecc:	ldr	r0, [r6, #92]	; 0x5c
   1fed0:	str	r0, [sp, #112]	; 0x70
   1fed4:	ldrb	r2, [r6, #88]	; 0x58
   1fed8:	vst1.32	{d16-d17}, [r1]
   1fedc:	ubfx	r1, r2, #3, #1
   1fee0:	strb	r1, [sp, #106]	; 0x6a
   1fee4:	ubfx	r1, r2, #2, #1
   1fee8:	strb	r1, [sp, #105]	; 0x69
   1feec:	blt	1ff60 <__assert_fail@plt+0xe0cc>
   1fef0:	ldr	r6, [sp, #28]
   1fef4:	cmp	r0, #2
   1fef8:	blt	1ff20 <__assert_fail@plt+0xe08c>
   1fefc:	mov	r8, #12
   1ff00:	cmn	r6, #-1073741823	; 0xc0000001
   1ff04:	bhi	2042c <__assert_fail@plt+0xe598>
   1ff08:	lsl	r1, r6, #2
   1ff0c:	mov	r0, #0
   1ff10:	bl	36fe4 <__assert_fail@plt+0x25150>
   1ff14:	cmp	r0, #0
   1ff18:	beq	2042c <__assert_fail@plt+0xe598>
   1ff1c:	str	r0, [sp, #40]	; 0x28
   1ff20:	cmp	sl, #0
   1ff24:	mov	r4, #0
   1ff28:	mov	sl, #0
   1ff2c:	beq	1ff50 <__assert_fail@plt+0xe0bc>
   1ff30:	mov	r0, #0
   1ff34:	mov	r1, r6
   1ff38:	bl	36fe4 <__assert_fail@plt+0x25150>
   1ff3c:	cmp	r0, #0
   1ff40:	beq	20428 <__assert_fail@plt+0xe594>
   1ff44:	mov	r4, r0
   1ff48:	mov	sl, #1
   1ff4c:	str	r0, [sp, #36]	; 0x24
   1ff50:	ldr	r0, [sp, #20]
   1ff54:	str	r6, [sp, #68]	; 0x44
   1ff58:	ldr	r0, [r0, #92]	; 0x5c
   1ff5c:	b	1ff64 <__assert_fail@plt+0xe0d0>
   1ff60:	mov	r6, #0
   1ff64:	ldr	r1, [sp, #12]
   1ff68:	cmp	sl, #0
   1ff6c:	moveq	r4, r5
   1ff70:	str	r4, [sp, #36]	; 0x24
   1ff74:	cmp	r1, #0
   1ff78:	beq	2005c <__assert_fail@plt+0xe1c8>
   1ff7c:	cmp	r0, #2
   1ff80:	blt	20074 <__assert_fail@plt+0xe1e0>
   1ff84:	add	r0, sp, #32
   1ff88:	bl	24e50 <__assert_fail@plt+0x12fbc>
   1ff8c:	ldr	r9, [sp, #20]
   1ff90:	cmp	r0, #0
   1ff94:	bne	20054 <__assert_fail@plt+0xe1c0>
   1ff98:	add	sl, sp, #32
   1ff9c:	ldr	r0, [sp, #64]	; 0x40
   1ffa0:	cmp	r0, r7
   1ffa4:	bge	20170 <__assert_fail@plt+0xe2dc>
   1ffa8:	ldr	r0, [r9, #92]	; 0x5c
   1ffac:	ldr	r2, [sp, #60]	; 0x3c
   1ffb0:	ldr	r1, [sp, #68]	; 0x44
   1ffb4:	add	r0, r0, r2
   1ffb8:	cmp	r1, r0
   1ffbc:	bgt	20170 <__assert_fail@plt+0xe2dc>
   1ffc0:	ldr	r0, [sp, #112]	; 0x70
   1ffc4:	lsl	r6, r1, #1
   1ffc8:	cmp	r0, #2
   1ffcc:	blt	2001c <__assert_fail@plt+0xe188>
   1ffd0:	mov	r8, #12
   1ffd4:	cmn	r6, #-1073741823	; 0xc0000001
   1ffd8:	bhi	2042c <__assert_fail@plt+0xe598>
   1ffdc:	ldr	r0, [sp, #40]	; 0x28
   1ffe0:	lsl	r4, r1, #3
   1ffe4:	mov	r1, r4
   1ffe8:	bl	36fe4 <__assert_fail@plt+0x25150>
   1ffec:	cmp	r0, #0
   1fff0:	beq	2042c <__assert_fail@plt+0xe598>
   1fff4:	str	r0, [sp, #40]	; 0x28
   1fff8:	ldr	r0, [sp, #44]	; 0x2c
   1fffc:	cmp	r0, #0
   20000:	beq	2001c <__assert_fail@plt+0xe188>
   20004:	mov	r1, r4
   20008:	bl	36fe4 <__assert_fail@plt+0x25150>
   2000c:	cmp	r0, #0
   20010:	beq	2042c <__assert_fail@plt+0xe598>
   20014:	ldr	r9, [sp, #20]
   20018:	str	r0, [sp, #44]	; 0x2c
   2001c:	ldrb	r0, [sp, #107]	; 0x6b
   20020:	cmp	r0, #0
   20024:	beq	20040 <__assert_fail@plt+0xe1ac>
   20028:	ldr	r0, [sp, #36]	; 0x24
   2002c:	mov	r1, r6
   20030:	bl	36fe4 <__assert_fail@plt+0x25150>
   20034:	cmp	r0, #0
   20038:	beq	20428 <__assert_fail@plt+0xe594>
   2003c:	str	r0, [sp, #36]	; 0x24
   20040:	mov	r0, sl
   20044:	str	r6, [sp, #68]	; 0x44
   20048:	bl	24e50 <__assert_fail@plt+0x12fbc>
   2004c:	cmp	r0, #0
   20050:	beq	1ff9c <__assert_fail@plt+0xe108>
   20054:	mov	r8, r0
   20058:	b	2042c <__assert_fail@plt+0xe598>
   2005c:	cmp	r0, #2
   20060:	blt	200e0 <__assert_fail@plt+0xe24c>
   20064:	add	r0, sp, #32
   20068:	bl	25510 <__assert_fail@plt+0x1367c>
   2006c:	ldr	r9, [sp, #20]
   20070:	b	20170 <__assert_fail@plt+0xe2dc>
   20074:	cmp	r6, r7
   20078:	movgt	r6, r7
   2007c:	cmp	r6, #1
   20080:	blt	2014c <__assert_fail@plt+0xe2b8>
   20084:	mov	r0, #0
   20088:	mov	r4, #0
   2008c:	b	2009c <__assert_fail@plt+0xe208>
   20090:	ldr	r5, [sp, #32]
   20094:	ldr	r0, [sp, #56]	; 0x38
   20098:	ldr	r9, [sp, #96]	; 0x60
   2009c:	add	r0, r5, r0
   200a0:	cmp	r9, #0
   200a4:	ldrb	r5, [r0, r4]
   200a8:	ldrbne	r5, [r9, r5]
   200ac:	add	r0, r5, #128	; 0x80
   200b0:	lsr	r0, r0, #7
   200b4:	cmp	r0, #2
   200b8:	bhi	200c8 <__assert_fail@plt+0xe234>
   200bc:	bl	11c24 <__ctype_toupper_loc@plt>
   200c0:	ldr	r0, [r0]
   200c4:	ldr	r5, [r0, r5, lsl #2]
   200c8:	ldr	r0, [sp, #36]	; 0x24
   200cc:	strb	r5, [r0, r4]
   200d0:	add	r4, r4, #1
   200d4:	cmp	r4, r6
   200d8:	blt	20090 <__assert_fail@plt+0xe1fc>
   200dc:	b	20150 <__assert_fail@plt+0xe2bc>
   200e0:	cmp	r9, #0
   200e4:	beq	20150 <__assert_fail@plt+0xe2bc>
   200e8:	cmp	r6, r7
   200ec:	movgt	r6, r7
   200f0:	cmp	r6, #1
   200f4:	blt	20160 <__assert_fail@plt+0xe2cc>
   200f8:	ldrb	r0, [r5]
   200fc:	cmp	r6, #1
   20100:	ldrb	r0, [r9, r0]
   20104:	ldr	r9, [sp, #20]
   20108:	strb	r0, [r4]
   2010c:	mov	r0, #1
   20110:	beq	20168 <__assert_fail@plt+0xe2d4>
   20114:	mov	r0, #1
   20118:	ldr	r1, [sp, #32]
   2011c:	ldr	r3, [sp, #56]	; 0x38
   20120:	ldr	r7, [sp, #96]	; 0x60
   20124:	ldr	r2, [sp, #36]	; 0x24
   20128:	add	r1, r1, r3
   2012c:	ldrb	r1, [r1, r0]
   20130:	ldrb	r1, [r7, r1]
   20134:	strb	r1, [r2, r0]
   20138:	add	r0, r0, #1
   2013c:	cmp	r0, r6
   20140:	blt	20118 <__assert_fail@plt+0xe284>
   20144:	mov	r0, r6
   20148:	b	20168 <__assert_fail@plt+0xe2d4>
   2014c:	mov	r6, #0
   20150:	ldr	r9, [sp, #20]
   20154:	str	r6, [sp, #64]	; 0x40
   20158:	str	r6, [sp, #60]	; 0x3c
   2015c:	b	20170 <__assert_fail@plt+0xe2dc>
   20160:	ldr	r9, [sp, #20]
   20164:	mov	r0, #0
   20168:	str	r0, [sp, #64]	; 0x40
   2016c:	str	r0, [sp, #60]	; 0x3c
   20170:	ldr	sl, [sp, #16]
   20174:	mov	r5, #0
   20178:	ldr	r4, [sp, #24]
   2017c:	sub	r8, fp, #48	; 0x30
   20180:	add	r6, sp, #32
   20184:	str	r5, [fp, #-52]	; 0xffffffcc
   20188:	mov	r0, r8
   2018c:	mov	r1, r6
   20190:	str	r5, [sl, #24]
   20194:	orr	r2, r4, #8388608	; 0x800000
   20198:	ldr	r7, [sl]
   2019c:	str	r4, [r7, #128]	; 0x80
   201a0:	bl	25a88 <__assert_fail@plt+0x13bf4>
   201a4:	ldr	r1, [sp, #72]	; 0x48
   201a8:	mov	r2, r8
   201ac:	mov	r3, r4
   201b0:	str	r5, [sp]
   201b4:	add	r0, r1, r0
   201b8:	mov	r1, sl
   201bc:	str	r0, [sp, #72]	; 0x48
   201c0:	sub	r0, fp, #52	; 0x34
   201c4:	str	r0, [sp, #4]
   201c8:	mov	r0, r6
   201cc:	bl	25700 <__assert_fail@plt+0x1386c>
   201d0:	mov	r4, r0
   201d4:	cmp	r0, #0
   201d8:	bne	201e8 <__assert_fail@plt+0xe354>
   201dc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   201e0:	cmp	r0, #0
   201e4:	bne	204c4 <__assert_fail@plt+0xe630>
   201e8:	ldr	r1, [r7, #64]	; 0x40
   201ec:	cmp	r1, #31
   201f0:	beq	2045c <__assert_fail@plt+0xe5c8>
   201f4:	ldr	r0, [r7, #56]	; 0x38
   201f8:	add	r2, r1, #1
   201fc:	add	r0, r0, r1, lsl #5
   20200:	mov	r1, #0
   20204:	vmov.i32	q8, #0	; 0x00000000
   20208:	str	r2, [r7, #64]	; 0x40
   2020c:	add	r6, r0, #4
   20210:	mov	r2, #2
   20214:	str	r1, [r0, #20]
   20218:	str	r1, [r0, #24]
   2021c:	str	r2, [r0, #28]
   20220:	mov	r0, #28
   20224:	mov	r1, r6
   20228:	vst1.32	{d16-d17}, [r1], r0
   2022c:	mvn	r0, #0
   20230:	str	r0, [r1]
   20234:	cmp	r4, #0
   20238:	mov	r0, r6
   2023c:	beq	20290 <__assert_fail@plt+0xe3fc>
   20240:	ldr	r1, [r7, #64]	; 0x40
   20244:	cmp	r1, #31
   20248:	beq	20494 <__assert_fail@plt+0xe600>
   2024c:	ldr	r0, [r7, #56]	; 0x38
   20250:	add	r2, r1, #1
   20254:	add	r0, r0, r1, lsl #5
   20258:	mov	r1, #0
   2025c:	mvn	r3, #0
   20260:	cmp	r6, #0
   20264:	str	r2, [r7, #64]	; 0x40
   20268:	str	r1, [r0, #4]!
   2026c:	mov	r2, #16
   20270:	add	ip, r0, #20
   20274:	stmib	r0, {r4, r6}
   20278:	str	r1, [r0, #12]
   2027c:	str	r1, [r0, #16]
   20280:	stm	ip, {r1, r2, r3}
   20284:	str	r0, [r4]
   20288:	beq	204bc <__assert_fail@plt+0xe628>
   2028c:	str	r0, [r6]
   20290:	cmp	r6, #0
   20294:	cmpne	r0, #0
   20298:	beq	204bc <__assert_fail@plt+0xe628>
   2029c:	str	r0, [r9, #52]	; 0x34
   202a0:	ldr	r8, [sl]
   202a4:	ldr	r0, [r8, #4]
   202a8:	lsl	r0, r0, #2
   202ac:	bl	36fb4 <__assert_fail@plt+0x25120>
   202b0:	str	r0, [r8, #12]
   202b4:	ldr	r0, [r8, #4]
   202b8:	lsl	r0, r0, #2
   202bc:	bl	36fb4 <__assert_fail@plt+0x25120>
   202c0:	str	r0, [r8, #16]
   202c4:	ldr	r0, [r8, #4]
   202c8:	add	r0, r0, r0, lsl #1
   202cc:	lsl	r0, r0, #2
   202d0:	bl	36fb4 <__assert_fail@plt+0x25120>
   202d4:	str	r0, [r8, #20]
   202d8:	ldr	r0, [r8, #4]
   202dc:	add	r0, r0, r0, lsl #1
   202e0:	lsl	r0, r0, #2
   202e4:	bl	36fb4 <__assert_fail@plt+0x25120>
   202e8:	str	r0, [r8, #24]
   202ec:	ldr	r1, [r8, #12]
   202f0:	cmp	r1, #0
   202f4:	ldrne	r1, [r8, #16]
   202f8:	cmpne	r1, #0
   202fc:	beq	20310 <__assert_fail@plt+0xe47c>
   20300:	cmp	r0, #0
   20304:	ldrne	r0, [r8, #20]
   20308:	cmpne	r0, #0
   2030c:	bne	203bc <__assert_fail@plt+0xe528>
   20310:	mov	r0, #12
   20314:	str	r0, [fp, #-52]	; 0xffffffcc
   20318:	ldr	r9, [sp, #20]
   2031c:	ldr	r4, [sl]
   20320:	ldr	r0, [r4, #56]	; 0x38
   20324:	cmp	r0, #0
   20328:	beq	20340 <__assert_fail@plt+0xe4ac>
   2032c:	ldr	r5, [r0]
   20330:	bl	17b10 <__assert_fail@plt+0x5c7c>
   20334:	cmp	r5, #0
   20338:	mov	r0, r5
   2033c:	bne	2032c <__assert_fail@plt+0xe498>
   20340:	mov	r0, #31
   20344:	mov	r5, #0
   20348:	str	r0, [r4, #64]	; 0x40
   2034c:	str	r5, [r4, #52]	; 0x34
   20350:	str	r5, [r4, #56]	; 0x38
   20354:	ldr	r0, [r4, #16]
   20358:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2035c:	str	r5, [r4, #16]
   20360:	ldr	r0, [sp, #40]	; 0x28
   20364:	bl	17b10 <__assert_fail@plt+0x5c7c>
   20368:	ldr	r0, [sp, #44]	; 0x2c
   2036c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   20370:	ldrb	r0, [sp, #107]	; 0x6b
   20374:	cmp	r0, #0
   20378:	beq	20384 <__assert_fail@plt+0xe4f0>
   2037c:	ldr	r0, [sp, #36]	; 0x24
   20380:	bl	17b10 <__assert_fail@plt+0x5c7c>
   20384:	ldr	r0, [sp, #8]
   20388:	cmp	r0, #0
   2038c:	beq	20398 <__assert_fail@plt+0xe504>
   20390:	add	r0, r9, #136	; 0x88
   20394:	bl	11a20 <pthread_mutex_destroy@plt>
   20398:	mov	r0, r9
   2039c:	bl	21cac <__assert_fail@plt+0xfe18>
   203a0:	mov	r0, #0
   203a4:	str	r0, [sl]
   203a8:	str	r0, [sl, #4]
   203ac:	ldr	r4, [fp, #-52]	; 0xffffffcc
   203b0:	mov	r0, r4
   203b4:	sub	sp, fp, #28
   203b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   203bc:	ldr	r0, [sl, #24]
   203c0:	lsl	r0, r0, #2
   203c4:	bl	36fb4 <__assert_fail@plt+0x25120>
   203c8:	cmp	r0, #0
   203cc:	str	r0, [r8, #132]	; 0x84
   203d0:	str	r8, [sp, #28]
   203d4:	beq	20420 <__assert_fail@plt+0xe58c>
   203d8:	ldr	r1, [sl, #24]
   203dc:	cmp	r1, #0
   203e0:	beq	20504 <__assert_fail@plt+0xe670>
   203e4:	mov	r2, #0
   203e8:	cmp	r1, #4
   203ec:	bcc	204f4 <__assert_fail@plt+0xe660>
   203f0:	add	r3, pc, #984	; 0x3d8
   203f4:	bic	r2, r1, #3
   203f8:	vmov.i32	q8, #4	; 0x00000004
   203fc:	mov	r7, r0
   20400:	vld1.64	{d18-d19}, [r3 :128]
   20404:	mov	r3, r2
   20408:	vadd.i32	q10, q9, q8
   2040c:	vst1.32	{d18-d19}, [r7]!
   20410:	subs	r3, r3, #4
   20414:	vorr	q9, q10, q10
   20418:	bne	20408 <__assert_fail@plt+0xe574>
   2041c:	b	204fc <__assert_fail@plt+0xe668>
   20420:	add	r8, r8, #52	; 0x34
   20424:	b	206e4 <__assert_fail@plt+0xe850>
   20428:	mov	r8, #12
   2042c:	ldr	sl, [sp, #16]
   20430:	str	r8, [fp, #-52]	; 0xffffffcc
   20434:	b	20318 <__assert_fail@plt+0xe484>
   20438:	mov	r0, r6
   2043c:	mov	r1, #160	; 0xa0
   20440:	mov	r4, #160	; 0xa0
   20444:	bl	36fe4 <__assert_fail@plt+0x25150>
   20448:	cmp	r0, #0
   2044c:	beq	20484 <__assert_fail@plt+0xe5f0>
   20450:	mov	r6, r0
   20454:	stm	r9, {r0, r4}
   20458:	b	1faac <__assert_fail@plt+0xdc18>
   2045c:	mov	r0, #996	; 0x3e4
   20460:	bl	36fb4 <__assert_fail@plt+0x25120>
   20464:	cmp	r0, #0
   20468:	beq	204e0 <__assert_fail@plt+0xe64c>
   2046c:	ldr	r1, [r7, #56]	; 0x38
   20470:	str	r1, [r0]
   20474:	mov	r1, #0
   20478:	str	r1, [r7, #64]	; 0x40
   2047c:	str	r0, [r7, #56]	; 0x38
   20480:	b	201f8 <__assert_fail@plt+0xe364>
   20484:	mov	r4, #12
   20488:	mov	r0, r4
   2048c:	sub	sp, fp, #28
   20490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20494:	mov	r0, #996	; 0x3e4
   20498:	bl	36fb4 <__assert_fail@plt+0x25120>
   2049c:	cmp	r0, #0
   204a0:	beq	204bc <__assert_fail@plt+0xe628>
   204a4:	ldr	r1, [r7, #56]	; 0x38
   204a8:	str	r1, [r0]
   204ac:	mov	r1, #0
   204b0:	str	r1, [r7, #64]	; 0x40
   204b4:	str	r0, [r7, #56]	; 0x38
   204b8:	b	20250 <__assert_fail@plt+0xe3bc>
   204bc:	mov	r0, #12
   204c0:	str	r0, [fp, #-52]	; 0xffffffcc
   204c4:	mov	r0, #0
   204c8:	str	r0, [r9, #52]	; 0x34
   204cc:	ldr	r4, [sl]
   204d0:	ldr	r0, [r4, #56]	; 0x38
   204d4:	cmp	r0, #0
   204d8:	bne	2032c <__assert_fail@plt+0xe498>
   204dc:	b	20340 <__assert_fail@plt+0xe4ac>
   204e0:	mov	r6, #0
   204e4:	cmp	r4, #0
   204e8:	mov	r0, r6
   204ec:	bne	20240 <__assert_fail@plt+0xe3ac>
   204f0:	b	20290 <__assert_fail@plt+0xe3fc>
   204f4:	str	r2, [r0, r2, lsl #2]
   204f8:	add	r2, r2, #1
   204fc:	cmp	r1, r2
   20500:	bne	204f4 <__assert_fail@plt+0xe660>
   20504:	ldr	r2, [r8, #52]!	; 0x34
   20508:	ldrb	r1, [r2, #24]
   2050c:	cmp	r1, #17
   20510:	beq	20540 <__assert_fail@plt+0xe6ac>
   20514:	cmp	r1, #4
   20518:	bne	20594 <__assert_fail@plt+0xe700>
   2051c:	ldr	r1, [r2, #20]
   20520:	ldr	r7, [sp, #28]
   20524:	mov	r3, #1
   20528:	ldr	r0, [r0, r1, lsl #2]
   2052c:	str	r0, [r2, #20]
   20530:	ldr	r1, [r7, #80]	; 0x50
   20534:	orr	r0, r1, r3, lsl r0
   20538:	str	r0, [r7, #80]	; 0x50
   2053c:	b	20594 <__assert_fail@plt+0xe700>
   20540:	ldr	r1, [r2, #4]
   20544:	cmp	r1, #0
   20548:	beq	20594 <__assert_fail@plt+0xe700>
   2054c:	ldrb	r3, [r1, #24]
   20550:	cmp	r3, #17
   20554:	bne	20594 <__assert_fail@plt+0xe700>
   20558:	ldr	r3, [r1, #4]
   2055c:	ldr	r1, [r1, #20]
   20560:	cmp	r3, #0
   20564:	str	r3, [r2, #4]
   20568:	strne	r2, [r3]
   2056c:	cmp	r1, #31
   20570:	ldr	r3, [r2, #20]
   20574:	ldr	r3, [r0, r3, lsl #2]
   20578:	str	r3, [r0, r1, lsl #2]
   2057c:	bgt	20594 <__assert_fail@plt+0xe700>
   20580:	ldr	r7, [sp, #28]
   20584:	mov	r3, #1
   20588:	ldr	r0, [r7, #80]	; 0x50
   2058c:	bic	r0, r0, r3, lsl r1
   20590:	b	20538 <__assert_fail@plt+0xe6a4>
   20594:	mov	r0, #1
   20598:	b	205bc <__assert_fail@plt+0xe728>
   2059c:	ldr	r2, [r7, #20]
   205a0:	ldr	r3, [sp, #28]
   205a4:	ldr	r1, [r1, r2, lsl #2]
   205a8:	str	r1, [r7, #20]
   205ac:	ldr	r2, [r3, #80]	; 0x50
   205b0:	orr	r1, r2, r0, lsl r1
   205b4:	mov	r2, r7
   205b8:	str	r1, [r3, #80]	; 0x50
   205bc:	ldr	r7, [r2, #4]
   205c0:	cmp	r7, #0
   205c4:	bne	205f4 <__assert_fail@plt+0xe760>
   205c8:	mov	r3, #0
   205cc:	ldr	r7, [r2, #8]
   205d0:	mov	r1, r2
   205d4:	cmp	r7, r3
   205d8:	cmpne	r7, #0
   205dc:	bne	205f4 <__assert_fail@plt+0xe760>
   205e0:	ldr	r2, [r1]
   205e4:	mov	r3, r1
   205e8:	cmp	r2, #0
   205ec:	bne	205cc <__assert_fail@plt+0xe738>
   205f0:	b	20690 <__assert_fail@plt+0xe7fc>
   205f4:	ldrb	r1, [r7, #24]
   205f8:	cmp	r1, #17
   205fc:	beq	20624 <__assert_fail@plt+0xe790>
   20600:	cmp	r1, #4
   20604:	mov	r2, r7
   20608:	bne	205bc <__assert_fail@plt+0xe728>
   2060c:	ldr	r1, [sp, #28]
   20610:	mov	r2, r7
   20614:	ldr	r1, [r1, #132]	; 0x84
   20618:	cmp	r1, #0
   2061c:	beq	205bc <__assert_fail@plt+0xe728>
   20620:	b	2059c <__assert_fail@plt+0xe708>
   20624:	ldr	r3, [r7, #4]
   20628:	mov	r2, r7
   2062c:	cmp	r3, #0
   20630:	beq	205bc <__assert_fail@plt+0xe728>
   20634:	ldrb	r1, [r3, #24]
   20638:	mov	r2, r7
   2063c:	cmp	r1, #17
   20640:	bne	205bc <__assert_fail@plt+0xe728>
   20644:	ldr	r1, [r3, #4]
   20648:	ldr	r2, [sp, #28]
   2064c:	ldr	r3, [r3, #20]
   20650:	cmp	r1, #0
   20654:	str	r1, [r7, #4]
   20658:	strne	r7, [r1]
   2065c:	cmp	r3, #31
   20660:	ldr	r1, [r7, #20]
   20664:	ldr	r2, [r2, #132]	; 0x84
   20668:	ldr	r1, [r2, r1, lsl #2]
   2066c:	str	r1, [r2, r3, lsl #2]
   20670:	mov	r2, r7
   20674:	bgt	205bc <__assert_fail@plt+0xe728>
   20678:	ldr	r2, [sp, #28]
   2067c:	ldr	r1, [r2, #80]	; 0x50
   20680:	bic	r1, r1, r0, lsl r3
   20684:	str	r1, [r2, #80]	; 0x50
   20688:	mov	r2, r7
   2068c:	b	205bc <__assert_fail@plt+0xe728>
   20690:	ldr	r1, [sl, #24]
   20694:	cmp	r1, #0
   20698:	beq	206cc <__assert_fail@plt+0xe838>
   2069c:	ldr	r0, [sp, #28]
   206a0:	mov	r2, #0
   206a4:	ldr	r0, [r0, #132]	; 0x84
   206a8:	ldr	r3, [r0, r2, lsl #2]
   206ac:	cmp	r2, r3
   206b0:	bne	206c0 <__assert_fail@plt+0xe82c>
   206b4:	add	r2, r2, #1
   206b8:	cmp	r2, r1
   206bc:	bcc	206a8 <__assert_fail@plt+0xe814>
   206c0:	cmp	r2, r1
   206c4:	beq	206d4 <__assert_fail@plt+0xe840>
   206c8:	b	206e4 <__assert_fail@plt+0xe850>
   206cc:	ldr	r0, [sp, #28]
   206d0:	ldr	r0, [r0, #132]	; 0x84
   206d4:	bl	17b10 <__assert_fail@plt+0x5c7c>
   206d8:	ldr	r1, [sp, #28]
   206dc:	mov	r0, #0
   206e0:	str	r0, [r1, #132]	; 0x84
   206e4:	ldr	r0, [r8]
   206e8:	mov	r7, #0
   206ec:	sub	r9, fp, #48	; 0x30
   206f0:	mov	r4, r0
   206f4:	ldr	r0, [r0, #4]
   206f8:	cmp	r0, #0
   206fc:	bne	206f0 <__assert_fail@plt+0xe85c>
   20700:	ldr	r0, [r4, #8]
   20704:	cmp	r0, #0
   20708:	bne	206f0 <__assert_fail@plt+0xe85c>
   2070c:	mov	r3, #0
   20710:	cmp	r3, #0
   20714:	str	r7, [fp, #-48]	; 0xffffffd0
   20718:	beq	20768 <__assert_fail@plt+0xe8d4>
   2071c:	ldrb	r0, [r3, #24]
   20720:	cmp	r0, #17
   20724:	bne	20768 <__assert_fail@plt+0xe8d4>
   20728:	ldrb	r2, [sl, #28]
   2072c:	ldr	r1, [sl]
   20730:	mov	r0, r9
   20734:	bl	2a008 <__assert_fail@plt+0x18174>
   20738:	cmp	r0, #0
   2073c:	str	r0, [r4, #4]
   20740:	strne	r4, [r0]
   20744:	ldr	r3, [r4, #8]
   20748:	cmp	r3, #0
   2074c:	bne	20774 <__assert_fail@plt+0xe8e0>
   20750:	b	2079c <__assert_fail@plt+0xe908>
   20754:	ldr	r3, [r1, #4]
   20758:	mov	r4, r1
   2075c:	cmp	r3, #0
   20760:	str	r7, [fp, #-48]	; 0xffffffd0
   20764:	bne	2071c <__assert_fail@plt+0xe888>
   20768:	ldr	r3, [r4, #8]
   2076c:	cmp	r3, #0
   20770:	beq	2079c <__assert_fail@plt+0xe908>
   20774:	ldrb	r0, [r3, #24]
   20778:	cmp	r0, #17
   2077c:	bne	2079c <__assert_fail@plt+0xe908>
   20780:	ldrb	r2, [sl, #28]
   20784:	ldr	r1, [sl]
   20788:	mov	r0, r9
   2078c:	bl	2a008 <__assert_fail@plt+0x18174>
   20790:	cmp	r0, #0
   20794:	str	r0, [r4, #8]
   20798:	strne	r4, [r0]
   2079c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   207a0:	cmp	r0, #0
   207a4:	bne	20314 <__assert_fail@plt+0xe480>
   207a8:	ldr	r1, [r4]
   207ac:	cmp	r1, #0
   207b0:	beq	207e0 <__assert_fail@plt+0xe94c>
   207b4:	ldr	r0, [r1, #8]
   207b8:	cmp	r0, r4
   207bc:	cmpne	r0, #0
   207c0:	beq	20754 <__assert_fail@plt+0xe8c0>
   207c4:	b	206f0 <__assert_fail@plt+0xe85c>
   207c8:	nop	{0}
   207cc:	nop	{0}
   207d0:	andeq	r0, r0, r0
   207d4:	andeq	r0, r0, r1
   207d8:	andeq	r0, r0, r2
   207dc:	andeq	r0, r0, r3
   207e0:	ldr	r0, [sp, #28]
   207e4:	ldr	r0, [r0, #52]	; 0x34
   207e8:	mov	r4, r0
   207ec:	ldr	r0, [r0, #4]
   207f0:	cmp	r0, #0
   207f4:	bne	207e8 <__assert_fail@plt+0xe954>
   207f8:	ldr	r0, [r4, #8]
   207fc:	cmp	r0, #0
   20800:	bne	207e8 <__assert_fail@plt+0xe954>
   20804:	ldr	r2, [r4, #24]
   20808:	uxtb	r0, r2
   2080c:	cmp	r0, #16
   20810:	bne	20854 <__assert_fail@plt+0xe9c0>
   20814:	ldr	r0, [r4, #4]
   20818:	ldr	r1, [r0, #12]
   2081c:	str	r1, [r4, #12]
   20820:	ldr	r0, [r0, #28]
   20824:	str	r0, [r4, #28]
   20828:	ldr	r1, [r4]
   2082c:	cmp	r1, #0
   20830:	beq	208a4 <__assert_fail@plt+0xea10>
   20834:	ldr	r0, [r1, #8]
   20838:	cmp	r0, r4
   2083c:	mov	r4, r1
   20840:	beq	20804 <__assert_fail@plt+0xe970>
   20844:	cmp	r0, #0
   20848:	mov	r4, r1
   2084c:	beq	20804 <__assert_fail@plt+0xe970>
   20850:	b	207e8 <__assert_fail@plt+0xe954>
   20854:	str	r4, [r4, #12]
   20858:	ldr	r0, [sp, #28]
   2085c:	ldr	r1, [r4, #20]
   20860:	bl	2a2f0 <__assert_fail@plt+0x1845c>
   20864:	cmn	r0, #1
   20868:	str	r0, [r4, #28]
   2086c:	beq	20310 <__assert_fail@plt+0xe47c>
   20870:	ldrb	r1, [r4, #24]
   20874:	cmp	r1, #12
   20878:	bne	20898 <__assert_fail@plt+0xea04>
   2087c:	ldr	r1, [sp, #28]
   20880:	ldr	r2, [r4, #20]
   20884:	ldr	r1, [r1]
   20888:	add	r0, r1, r0, lsl #3
   2088c:	ldr	r1, [r0, #4]
   20890:	bfi	r1, r2, #8, #10
   20894:	str	r1, [r0, #4]
   20898:	ldr	r1, [r4]
   2089c:	cmp	r1, #0
   208a0:	bne	20834 <__assert_fail@plt+0xe9a0>
   208a4:	ldr	r4, [r8]
   208a8:	ldrb	r0, [r4, #24]
   208ac:	cmp	r0, #16
   208b0:	beq	208cc <__assert_fail@plt+0xea38>
   208b4:	ldr	r8, [sp, #28]
   208b8:	cmp	r0, #11
   208bc:	bne	208e8 <__assert_fail@plt+0xea54>
   208c0:	ldr	r0, [r4, #4]
   208c4:	str	r4, [r0, #16]
   208c8:	b	20908 <__assert_fail@plt+0xea74>
   208cc:	ldmib	r4, {r0, r1}
   208d0:	ldr	r8, [sp, #28]
   208d4:	ldr	r2, [r1, #12]
   208d8:	str	r2, [r0, #16]
   208dc:	ldr	r2, [r4, #16]
   208e0:	str	r2, [r1, #16]
   208e4:	b	20908 <__assert_fail@plt+0xea74>
   208e8:	ldr	r0, [r4, #4]
   208ec:	cmp	r0, #0
   208f0:	ldrne	r1, [r4, #16]
   208f4:	strne	r1, [r0, #16]
   208f8:	ldr	r1, [r4, #8]
   208fc:	cmp	r1, #0
   20900:	ldrne	r2, [r4, #16]
   20904:	strne	r2, [r1, #16]
   20908:	mov	r1, r4
   2090c:	b	2092c <__assert_fail@plt+0xea98>
   20910:	ldr	r3, [r1, #16]
   20914:	str	r3, [r2, #16]
   20918:	b	2092c <__assert_fail@plt+0xea98>
   2091c:	ldmib	r1, {r0, r2}
   20920:	ldr	r3, [r2, #12]
   20924:	str	r3, [r0, #16]
   20928:	b	20910 <__assert_fail@plt+0xea7c>
   2092c:	cmp	r0, #0
   20930:	bne	20960 <__assert_fail@plt+0xeacc>
   20934:	mov	r3, #0
   20938:	ldr	r0, [r1, #8]
   2093c:	mov	r2, r1
   20940:	cmp	r0, r3
   20944:	cmpne	r0, #0
   20948:	bne	20960 <__assert_fail@plt+0xeacc>
   2094c:	ldr	r1, [r2]
   20950:	mov	r3, r2
   20954:	cmp	r1, #0
   20958:	bne	20938 <__assert_fail@plt+0xeaa4>
   2095c:	b	209a4 <__assert_fail@plt+0xeb10>
   20960:	mov	r1, r0
   20964:	ldrb	r0, [r0, #24]
   20968:	cmp	r0, #16
   2096c:	beq	2091c <__assert_fail@plt+0xea88>
   20970:	cmp	r0, #11
   20974:	bne	20984 <__assert_fail@plt+0xeaf0>
   20978:	ldr	r0, [r1, #4]
   2097c:	str	r1, [r0, #16]
   20980:	b	2092c <__assert_fail@plt+0xea98>
   20984:	ldr	r0, [r1, #4]
   20988:	cmp	r0, #0
   2098c:	ldrne	r2, [r1, #16]
   20990:	strne	r2, [r0, #16]
   20994:	ldr	r2, [r1, #8]
   20998:	cmp	r2, #0
   2099c:	beq	2092c <__assert_fail@plt+0xea98>
   209a0:	b	20910 <__assert_fail@plt+0xea7c>
   209a4:	mov	r0, r8
   209a8:	mov	r1, r4
   209ac:	bl	29e70 <__assert_fail@plt+0x17fdc>
   209b0:	cmp	r0, #0
   209b4:	bne	20314 <__assert_fail@plt+0xe480>
   209b8:	ldr	r7, [r4, #4]
   209bc:	cmp	r7, #0
   209c0:	bne	209f0 <__assert_fail@plt+0xeb5c>
   209c4:	mov	r1, #0
   209c8:	ldr	r7, [r4, #8]
   209cc:	mov	r0, r4
   209d0:	cmp	r7, r1
   209d4:	cmpne	r7, #0
   209d8:	bne	209f0 <__assert_fail@plt+0xeb5c>
   209dc:	ldr	r4, [r0]
   209e0:	mov	r1, r0
   209e4:	cmp	r4, #0
   209e8:	bne	209c8 <__assert_fail@plt+0xeb34>
   209ec:	b	20a0c <__assert_fail@plt+0xeb78>
   209f0:	mov	r0, r8
   209f4:	mov	r1, r7
   209f8:	bl	29e70 <__assert_fail@plt+0x17fdc>
   209fc:	cmp	r0, #0
   20a00:	mov	r4, r7
   20a04:	beq	209b8 <__assert_fail@plt+0xeb24>
   20a08:	b	20314 <__assert_fail@plt+0xe480>
   20a0c:	ldr	r0, [r8, #8]
   20a10:	cmp	r0, #0
   20a14:	beq	20ac4 <__assert_fail@plt+0xec30>
   20a18:	mov	r5, #0
   20a1c:	sub	r4, fp, #48	; 0x30
   20a20:	mov	r7, #0
   20a24:	ldr	r0, [r8, #24]
   20a28:	add	r6, r7, r7, lsl #1
   20a2c:	add	r0, r0, r6, lsl #2
   20a30:	ldr	r0, [r0, #4]
   20a34:	cmp	r0, #0
   20a38:	beq	20a44 <__assert_fail@plt+0xebb0>
   20a3c:	mov	r1, r5
   20a40:	b	20a84 <__assert_fail@plt+0xebf0>
   20a44:	mov	r0, r4
   20a48:	mov	r1, r8
   20a4c:	mov	r2, r7
   20a50:	mov	r3, #1
   20a54:	bl	2a4c8 <__assert_fail@plt+0x18634>
   20a58:	cmp	r0, #0
   20a5c:	bne	20314 <__assert_fail@plt+0xe480>
   20a60:	ldr	r0, [r8, #24]
   20a64:	mov	r1, r5
   20a68:	add	r0, r0, r6, lsl #2
   20a6c:	ldr	r0, [r0, #4]
   20a70:	cmp	r0, #0
   20a74:	bne	20a84 <__assert_fail@plt+0xebf0>
   20a78:	ldr	r0, [fp, #-40]	; 0xffffffd8
   20a7c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   20a80:	mov	r1, #1
   20a84:	ldr	r2, [r8, #8]
   20a88:	add	r0, r7, #1
   20a8c:	subs	r3, r0, r2
   20a90:	mov	r7, r3
   20a94:	movwne	r3, #1
   20a98:	movne	r7, r0
   20a9c:	tst	r1, #1
   20aa0:	and	r5, r1, r3
   20aa4:	cmpeq	r0, r2
   20aa8:	bne	20a24 <__assert_fail@plt+0xeb90>
   20aac:	add	r0, r0, r0, lsl #1
   20ab0:	lsl	r0, r0, #2
   20ab4:	ldrb	r1, [sl, #28]
   20ab8:	tst	r1, #16
   20abc:	beq	20ad4 <__assert_fail@plt+0xec40>
   20ac0:	b	20aec <__assert_fail@plt+0xec58>
   20ac4:	mov	r0, #0
   20ac8:	ldrb	r1, [sl, #28]
   20acc:	tst	r1, #16
   20ad0:	bne	20aec <__assert_fail@plt+0xec58>
   20ad4:	ldr	r1, [sp, #16]
   20ad8:	ldr	r1, [r1, #24]
   20adc:	cmp	r1, #0
   20ae0:	ldrbne	r1, [r8, #88]	; 0x58
   20ae4:	tstne	r1, #1
   20ae8:	bne	20af8 <__assert_fail@plt+0xec64>
   20aec:	ldr	r1, [r8, #76]	; 0x4c
   20af0:	cmp	r1, #0
   20af4:	beq	20c24 <__assert_fail@plt+0xed90>
   20af8:	bl	36fb4 <__assert_fail@plt+0x25120>
   20afc:	cmp	r0, #0
   20b00:	str	r0, [r8, #28]
   20b04:	beq	210ec <__assert_fail@plt+0xf258>
   20b08:	ldr	r1, [r8, #8]
   20b0c:	cmp	r1, #0
   20b10:	beq	20c24 <__assert_fail@plt+0xed90>
   20b14:	mov	r1, #0
   20b18:	str	r1, [r0]
   20b1c:	str	r1, [r0, #4]
   20b20:	str	r1, [r0, #8]
   20b24:	ldr	r0, [r8, #8]
   20b28:	cmp	r0, #2
   20b2c:	bcc	20b5c <__assert_fail@plt+0xecc8>
   20b30:	mov	r2, #1
   20b34:	mov	r3, #12
   20b38:	ldr	r0, [r8, #28]
   20b3c:	add	r2, r2, #1
   20b40:	str	r1, [r0, r3]!
   20b44:	add	r3, r3, #12
   20b48:	str	r1, [r0, #4]
   20b4c:	str	r1, [r0, #8]
   20b50:	ldr	r0, [r8, #8]
   20b54:	cmp	r2, r0
   20b58:	bcc	20b38 <__assert_fail@plt+0xeca4>
   20b5c:	cmp	r0, #0
   20b60:	beq	20c24 <__assert_fail@plt+0xed90>
   20b64:	ldr	ip, [r8, #24]
   20b68:	mov	sl, #0
   20b6c:	add	r9, sl, sl, lsl #1
   20b70:	add	r2, ip, r9, lsl #2
   20b74:	ldr	r3, [r2, #4]
   20b78:	cmp	r3, #1
   20b7c:	blt	20c18 <__assert_fail@plt+0xed84>
   20b80:	ldr	r1, [r2, #8]
   20b84:	mov	r6, #0
   20b88:	str	r1, [sp, #24]
   20b8c:	ldr	r0, [r1, r6, lsl #2]
   20b90:	ldr	r5, [r8, #28]
   20b94:	add	r0, r0, r0, lsl #1
   20b98:	mov	r3, r5
   20b9c:	ldr	r7, [r3, r0, lsl #2]!
   20ba0:	mov	r4, r3
   20ba4:	ldr	r2, [r4, #4]!
   20ba8:	cmp	r7, r2
   20bac:	bne	20bec <__assert_fail@plt+0xed58>
   20bb0:	mov	r1, #2
   20bb4:	add	r8, r5, r0, lsl #2
   20bb8:	add	r1, r1, r7, lsl #1
   20bbc:	str	r1, [r3]
   20bc0:	lsl	r1, r1, #2
   20bc4:	ldr	r0, [r8, #8]!
   20bc8:	bl	36fe4 <__assert_fail@plt+0x25150>
   20bcc:	cmp	r0, #0
   20bd0:	beq	210ec <__assert_fail@plt+0xf258>
   20bd4:	str	r0, [r8]
   20bd8:	ldr	r8, [sp, #28]
   20bdc:	ldr	r1, [sp, #24]
   20be0:	ldr	r2, [r4]
   20be4:	ldr	ip, [r8, #24]
   20be8:	b	20bf4 <__assert_fail@plt+0xed60>
   20bec:	add	r0, r5, r0, lsl #2
   20bf0:	ldr	r0, [r0, #8]
   20bf4:	add	r3, r2, #1
   20bf8:	add	r6, r6, #1
   20bfc:	str	r3, [r4]
   20c00:	str	sl, [r0, r2, lsl #2]
   20c04:	add	r0, ip, r9, lsl #2
   20c08:	ldr	r0, [r0, #4]
   20c0c:	cmp	r6, r0
   20c10:	blt	20b8c <__assert_fail@plt+0xecf8>
   20c14:	ldr	r0, [r8, #8]
   20c18:	add	sl, sl, #1
   20c1c:	cmp	sl, r0
   20c20:	bcc	20b6c <__assert_fail@plt+0xecd8>
   20c24:	mov	r0, #0
   20c28:	ldr	r1, [sp, #16]
   20c2c:	str	r0, [fp, #-52]	; 0xffffffcc
   20c30:	ldr	r0, [sp, #12]
   20c34:	cmp	r0, #0
   20c38:	bne	20e08 <__assert_fail@plt+0xef74>
   20c3c:	ldr	r0, [sp, #20]
   20c40:	ldrb	r2, [r0, #88]	; 0x58
   20c44:	ands	r0, r2, #4
   20c48:	beq	20e08 <__assert_fail@plt+0xef74>
   20c4c:	ldr	r0, [r1, #20]
   20c50:	cmp	r0, #0
   20c54:	bne	20e08 <__assert_fail@plt+0xef74>
   20c58:	ldr	r0, [sp, #20]
   20c5c:	mov	r9, #0
   20c60:	ldr	r7, [r0, #8]
   20c64:	cmp	r7, #0
   20c68:	beq	20dd8 <__assert_fail@plt+0xef44>
   20c6c:	ldr	r3, [r0]
   20c70:	mov	r8, #0
   20c74:	mov	ip, #1
   20c78:	mov	lr, #139	; 0x8b
   20c7c:	mov	r6, #0
   20c80:	mov	r4, #0
   20c84:	add	r5, r3, r4, lsl #3
   20c88:	ldrb	r1, [r5, #4]
   20c8c:	sub	r1, r1, #1
   20c90:	cmp	r1, #11
   20c94:	bhi	21154 <__assert_fail@plt+0xf2c0>
   20c98:	add	r0, pc, #0
   20c9c:	ldr	pc, [r0, r1, lsl #2]
   20ca0:	andeq	r0, r2, r4, lsr sp
   20ca4:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20ca8:	andeq	r0, r2, r0, ror #25
   20cac:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20cb0:	andeq	r0, r2, r8, asr sp
   20cb4:	andeq	r0, r2, r8, lsl #28
   20cb8:	andeq	r1, r2, r4, asr r1
   20cbc:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20cc0:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20cc4:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20cc8:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20ccc:	andeq	r0, r2, r4, lsl sp
   20cd0:	add	r4, r4, #1
   20cd4:	cmp	r4, r7
   20cd8:	bcc	20c84 <__assert_fail@plt+0xedf0>
   20cdc:	b	20d68 <__assert_fail@plt+0xeed4>
   20ce0:	ldr	r5, [r3, r4, lsl #3]
   20ce4:	ldr	r0, [r5, #16]
   20ce8:	cmp	r0, #0
   20cec:	bne	20e08 <__assert_fail@plt+0xef74>
   20cf0:	ldr	r0, [r5, #20]
   20cf4:	cmp	r0, #0
   20cf8:	ldreq	r0, [r5, #24]
   20cfc:	cmpeq	r0, #0
   20d00:	bne	20e08 <__assert_fail@plt+0xef74>
   20d04:	ldr	r0, [r5, #28]
   20d08:	cmp	r0, #0
   20d0c:	beq	20cd0 <__assert_fail@plt+0xee3c>
   20d10:	b	20e08 <__assert_fail@plt+0xef74>
   20d14:	ldr	r0, [r3, r4, lsl #3]
   20d18:	sub	r0, r0, #16
   20d1c:	ror	r1, r0, #4
   20d20:	cmp	r1, #7
   20d24:	bhi	20e08 <__assert_fail@plt+0xef74>
   20d28:	tst	lr, ip, lsl r1
   20d2c:	bne	20cd0 <__assert_fail@plt+0xee3c>
   20d30:	b	20e08 <__assert_fail@plt+0xef74>
   20d34:	ldrsb	r0, [r5]
   20d38:	cmp	r0, #0
   20d3c:	mov	r0, #0
   20d40:	movwlt	r0, #1
   20d44:	orr	r6, r6, r0
   20d48:	add	r4, r4, #1
   20d4c:	cmp	r4, r7
   20d50:	bcc	20c84 <__assert_fail@plt+0xedf0>
   20d54:	b	20d68 <__assert_fail@plt+0xeed4>
   20d58:	mov	r8, #1
   20d5c:	add	r4, r4, #1
   20d60:	cmp	r4, r7
   20d64:	bcc	20c84 <__assert_fail@plt+0xedf0>
   20d68:	orr	r0, r6, r8
   20d6c:	tst	r0, #1
   20d70:	beq	20ddc <__assert_fail@plt+0xef48>
   20d74:	mov	r2, #0
   20d78:	mov	r7, #7
   20d7c:	b	20d84 <__assert_fail@plt+0xeef0>
   20d80:	ldr	r3, [r1]
   20d84:	add	r3, r3, r2, lsl #3
   20d88:	ldr	r6, [r3, #4]
   20d8c:	uxtb	r1, r6
   20d90:	cmp	r1, #5
   20d94:	beq	20db4 <__assert_fail@plt+0xef20>
   20d98:	cmp	r1, #1
   20d9c:	bne	20dbc <__assert_fail@plt+0xef28>
   20da0:	ldrsb	r0, [r3]
   20da4:	cmn	r0, #1
   20da8:	bicle	r0, r6, #2097152	; 0x200000
   20dac:	strle	r0, [r3, #4]
   20db0:	b	20dbc <__assert_fail@plt+0xef28>
   20db4:	bfi	r6, r7, #0, #8
   20db8:	str	r6, [r3, #4]
   20dbc:	ldr	r1, [sp, #20]
   20dc0:	add	r2, r2, #1
   20dc4:	ldr	r0, [r1, #8]
   20dc8:	cmp	r2, r0
   20dcc:	bcc	20d80 <__assert_fail@plt+0xeeec>
   20dd0:	ldrb	r2, [r1, #88]	; 0x58
   20dd4:	b	20ddc <__assert_fail@plt+0xef48>
   20dd8:	mov	r8, #0
   20ddc:	ldr	r3, [sp, #20]
   20de0:	mov	r0, #1
   20de4:	and	r1, r2, #249	; 0xf9
   20de8:	str	r0, [r3, #92]	; 0x5c
   20dec:	ldr	r0, [r3, #76]	; 0x4c
   20df0:	cmp	r0, #0
   20df4:	movwgt	r9, #1
   20df8:	orr	r0, r8, r9
   20dfc:	and	r0, r0, #1
   20e00:	orr	r0, r1, r0, lsl #1
   20e04:	strb	r0, [r3, #88]	; 0x58
   20e08:	ldr	r7, [sp, #20]
   20e0c:	ldr	r1, [r7, #52]	; 0x34
   20e10:	ldr	r0, [r7, #24]
   20e14:	ldr	r1, [r1, #12]
   20e18:	ldr	r1, [r1, #28]
   20e1c:	str	r1, [r7, #72]	; 0x48
   20e20:	add	r1, r1, r1, lsl #1
   20e24:	add	r5, r0, r1, lsl #2
   20e28:	mov	r4, r5
   20e2c:	ldr	sl, [r4, #4]!
   20e30:	str	sl, [fp, #-44]	; 0xffffffd4
   20e34:	ldr	r0, [r4]
   20e38:	cmp	r0, #1
   20e3c:	blt	20f90 <__assert_fail@plt+0xf0fc>
   20e40:	lsl	r0, sl, #2
   20e44:	str	sl, [fp, #-48]	; 0xffffffd0
   20e48:	bl	36fb4 <__assert_fail@plt+0x25120>
   20e4c:	cmp	r0, #0
   20e50:	str	r0, [fp, #-40]	; 0xffffffd8
   20e54:	beq	21138 <__assert_fail@plt+0xf2a4>
   20e58:	mov	r6, r0
   20e5c:	ldr	r0, [r4]
   20e60:	ldr	r1, [r5, #8]
   20e64:	lsl	r2, r0, #2
   20e68:	mov	r0, r6
   20e6c:	bl	11a8c <memcpy@plt>
   20e70:	mov	r0, #0
   20e74:	cmp	sl, #1
   20e78:	str	r0, [fp, #-32]	; 0xffffffe0
   20e7c:	ldrge	r0, [sp, #20]
   20e80:	ldrge	r0, [r0, #76]	; 0x4c
   20e84:	cmpge	r0, #1
   20e88:	blt	20fa4 <__assert_fail@plt+0xf110>
   20e8c:	mov	r0, #0
   20e90:	sub	r8, fp, #48	; 0x30
   20e94:	mov	r9, #1
   20e98:	b	20ea0 <__assert_fail@plt+0xf00c>
   20e9c:	ldr	r6, [fp, #-40]	; 0xffffffd8
   20ea0:	ldr	r2, [sp, #20]
   20ea4:	ldr	r1, [r6, r0, lsl #2]
   20ea8:	ldr	r2, [r2]
   20eac:	add	r3, r2, r1, lsl #3
   20eb0:	ldrb	r3, [r3, #4]
   20eb4:	cmp	r3, #4
   20eb8:	bne	20f80 <__assert_fail@plt+0xf0ec>
   20ebc:	mov	r3, #0
   20ec0:	cmp	sl, #1
   20ec4:	blt	20ef8 <__assert_fail@plt+0xf064>
   20ec8:	ldr	r5, [r6, r3, lsl #2]
   20ecc:	add	r4, r2, r5, lsl #3
   20ed0:	ldrb	r4, [r4, #4]
   20ed4:	cmp	r4, #9
   20ed8:	bne	20eec <__assert_fail@plt+0xf058>
   20edc:	ldr	r4, [r2, r1, lsl #3]
   20ee0:	ldr	r5, [r2, r5, lsl #3]
   20ee4:	cmp	r5, r4
   20ee8:	beq	20ef8 <__assert_fail@plt+0xf064>
   20eec:	add	r3, r3, #1
   20ef0:	cmp	r3, sl
   20ef4:	blt	20ec8 <__assert_fail@plt+0xf034>
   20ef8:	cmp	r3, sl
   20efc:	beq	20f80 <__assert_fail@plt+0xf0ec>
   20f00:	ldr	r2, [sp, #20]
   20f04:	add	r1, r1, r1, lsl #1
   20f08:	cmp	sl, #1
   20f0c:	ldr	r2, [r2, #20]
   20f10:	add	r1, r2, r1, lsl #2
   20f14:	ldr	r1, [r1, #8]
   20f18:	ldr	r1, [r1]
   20f1c:	blt	20f58 <__assert_fail@plt+0xf0c4>
   20f20:	mov	r2, #0
   20f24:	subs	r3, sl, #1
   20f28:	beq	20f4c <__assert_fail@plt+0xf0b8>
   20f2c:	add	r5, r2, r3
   20f30:	lsr	r4, r5, #1
   20f34:	ldr	r7, [r6, r4, lsl #2]
   20f38:	cmp	r7, r1
   20f3c:	movge	r3, r4
   20f40:	addlt	r2, r9, r5, lsr #1
   20f44:	cmp	r2, r3
   20f48:	bcc	20f2c <__assert_fail@plt+0xf098>
   20f4c:	ldr	r2, [r6, r2, lsl #2]
   20f50:	cmp	r2, r1
   20f54:	beq	20f80 <__assert_fail@plt+0xf0ec>
   20f58:	ldr	r0, [sp, #20]
   20f5c:	add	r1, r1, r1, lsl #1
   20f60:	ldr	r0, [r0, #24]
   20f64:	add	r1, r0, r1, lsl #2
   20f68:	mov	r0, r8
   20f6c:	bl	2abac <__assert_fail@plt+0x18d18>
   20f70:	cmp	r0, #0
   20f74:	bne	210f4 <__assert_fail@plt+0xf260>
   20f78:	ldr	sl, [fp, #-44]	; 0xffffffd4
   20f7c:	mov	r0, #0
   20f80:	add	r0, r0, #1
   20f84:	cmp	r0, sl
   20f88:	blt	20e9c <__assert_fail@plt+0xf008>
   20f8c:	b	20fa4 <__assert_fail@plt+0xf110>
   20f90:	mov	r0, #0
   20f94:	str	r0, [fp, #-44]	; 0xffffffd4
   20f98:	str	r0, [fp, #-48]	; 0xffffffd0
   20f9c:	str	r0, [fp, #-40]	; 0xffffffd8
   20fa0:	str	r0, [fp, #-32]	; 0xffffffe0
   20fa4:	ldr	r7, [sp, #20]
   20fa8:	sub	r0, fp, #32
   20fac:	sub	r2, fp, #48	; 0x30
   20fb0:	mov	r3, #0
   20fb4:	mov	r1, r7
   20fb8:	bl	2ae9c <__assert_fail@plt+0x19008>
   20fbc:	ldr	r8, [sp, #16]
   20fc0:	cmp	r0, #0
   20fc4:	str	r0, [r7, #36]	; 0x24
   20fc8:	beq	21048 <__assert_fail@plt+0xf1b4>
   20fcc:	ldrsb	r1, [r0, #52]	; 0x34
   20fd0:	cmn	r1, #1
   20fd4:	ble	20fe8 <__assert_fail@plt+0xf154>
   20fd8:	str	r0, [r7, #40]	; 0x28
   20fdc:	str	r0, [r7, #44]	; 0x2c
   20fe0:	str	r0, [r7, #48]	; 0x30
   20fe4:	b	2105c <__assert_fail@plt+0xf1c8>
   20fe8:	sub	r4, fp, #32
   20fec:	sub	r6, fp, #48	; 0x30
   20ff0:	mov	r1, r7
   20ff4:	mov	r3, #1
   20ff8:	mov	r0, r4
   20ffc:	mov	r2, r6
   21000:	bl	2ae9c <__assert_fail@plt+0x19008>
   21004:	str	r0, [r7, #40]	; 0x28
   21008:	mov	r0, r4
   2100c:	mov	r1, r7
   21010:	mov	r2, r6
   21014:	mov	r3, #2
   21018:	bl	2ae9c <__assert_fail@plt+0x19008>
   2101c:	str	r0, [r7, #44]	; 0x2c
   21020:	mov	r0, r4
   21024:	mov	r1, r7
   21028:	mov	r2, r6
   2102c:	mov	r3, #6
   21030:	bl	2ae9c <__assert_fail@plt+0x19008>
   21034:	str	r0, [r7, #48]	; 0x30
   21038:	ldr	r1, [r7, #40]	; 0x28
   2103c:	cmp	r1, #0
   21040:	cmpne	r0, #0
   21044:	bne	21050 <__assert_fail@plt+0xf1bc>
   21048:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2104c:	b	21068 <__assert_fail@plt+0xf1d4>
   21050:	ldr	r0, [r7, #44]	; 0x2c
   21054:	cmp	r0, #0
   21058:	beq	21048 <__assert_fail@plt+0xf1b4>
   2105c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   21060:	bl	17b10 <__assert_fail@plt+0x5c7c>
   21064:	mov	r0, #0
   21068:	str	r0, [fp, #-52]	; 0xffffffcc
   2106c:	ldr	r5, [r8]
   21070:	ldr	r0, [r5, #56]	; 0x38
   21074:	cmp	r0, #0
   21078:	beq	21090 <__assert_fail@plt+0xf1fc>
   2107c:	ldr	r4, [r0]
   21080:	bl	17b10 <__assert_fail@plt+0x5c7c>
   21084:	cmp	r4, #0
   21088:	mov	r0, r4
   2108c:	bne	2107c <__assert_fail@plt+0xf1e8>
   21090:	mov	r0, #31
   21094:	mov	r4, #0
   21098:	str	r0, [r5, #64]	; 0x40
   2109c:	str	r4, [r5, #52]	; 0x34
   210a0:	str	r4, [r5, #56]	; 0x38
   210a4:	ldr	r0, [r5, #16]
   210a8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   210ac:	str	r4, [r5, #16]
   210b0:	ldr	r0, [sp, #40]	; 0x28
   210b4:	bl	17b10 <__assert_fail@plt+0x5c7c>
   210b8:	ldr	r0, [sp, #44]	; 0x2c
   210bc:	bl	17b10 <__assert_fail@plt+0x5c7c>
   210c0:	ldrb	r0, [sp, #107]	; 0x6b
   210c4:	cmp	r0, #0
   210c8:	beq	210d4 <__assert_fail@plt+0xf240>
   210cc:	ldr	r0, [sp, #36]	; 0x24
   210d0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   210d4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   210d8:	cmp	r0, #0
   210dc:	bne	21100 <__assert_fail@plt+0xf26c>
   210e0:	mov	r0, r4
   210e4:	sub	sp, fp, #28
   210e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   210ec:	ldr	sl, [sp, #16]
   210f0:	b	20310 <__assert_fail@plt+0xe47c>
   210f4:	ldr	r8, [sp, #16]
   210f8:	ldr	r7, [sp, #20]
   210fc:	b	21068 <__assert_fail@plt+0xf1d4>
   21100:	ldr	r0, [sp, #8]
   21104:	cmp	r0, #0
   21108:	beq	21114 <__assert_fail@plt+0xf280>
   2110c:	add	r0, r7, #136	; 0x88
   21110:	bl	11a20 <pthread_mutex_destroy@plt>
   21114:	mov	r0, r7
   21118:	bl	21cac <__assert_fail@plt+0xfe18>
   2111c:	mov	r0, #0
   21120:	str	r0, [r8]
   21124:	str	r0, [r8, #4]
   21128:	ldr	r4, [fp, #-52]	; 0xffffffcc
   2112c:	mov	r0, r4
   21130:	sub	sp, fp, #28
   21134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21138:	ldr	r8, [sp, #16]
   2113c:	mov	r0, #0
   21140:	str	r0, [fp, #-48]	; 0xffffffd0
   21144:	str	r0, [fp, #-44]	; 0xffffffd4
   21148:	mov	r0, #12
   2114c:	str	r0, [fp, #-32]	; 0xffffffe0
   21150:	b	21068 <__assert_fail@plt+0xf1d4>
   21154:	bl	11e58 <abort@plt>
   21158:	movw	r2, #46060	; 0xb3ec
   2115c:	movt	r2, #4
   21160:	ldr	r1, [r2]
   21164:	str	r0, [r2]
   21168:	mov	r0, r1
   2116c:	bx	lr
   21170:	push	{r4, r5, r6, sl, fp, lr}
   21174:	add	fp, sp, #16
   21178:	ldr	r5, [r0, #16]
   2117c:	ldr	r6, [r0]
   21180:	mov	r4, r0
   21184:	mov	r1, #0
   21188:	mov	r2, #256	; 0x100
   2118c:	mov	r0, r5
   21190:	bl	11cd8 <memset@plt>
   21194:	ldr	r1, [r6, #36]	; 0x24
   21198:	mov	r0, r4
   2119c:	mov	r2, r5
   211a0:	bl	2120c <__assert_fail@plt+0xf378>
   211a4:	ldr	r0, [r6, #36]	; 0x24
   211a8:	ldr	r1, [r6, #40]	; 0x28
   211ac:	cmp	r0, r1
   211b0:	beq	211c4 <__assert_fail@plt+0xf330>
   211b4:	mov	r0, r4
   211b8:	mov	r2, r5
   211bc:	bl	2120c <__assert_fail@plt+0xf378>
   211c0:	ldr	r0, [r6, #36]	; 0x24
   211c4:	ldr	r1, [r6, #44]	; 0x2c
   211c8:	cmp	r0, r1
   211cc:	beq	211e0 <__assert_fail@plt+0xf34c>
   211d0:	mov	r0, r4
   211d4:	mov	r2, r5
   211d8:	bl	2120c <__assert_fail@plt+0xf378>
   211dc:	ldr	r0, [r6, #36]	; 0x24
   211e0:	ldr	r1, [r6, #48]	; 0x30
   211e4:	cmp	r0, r1
   211e8:	beq	211f8 <__assert_fail@plt+0xf364>
   211ec:	mov	r0, r4
   211f0:	mov	r2, r5
   211f4:	bl	2120c <__assert_fail@plt+0xf378>
   211f8:	ldrb	r0, [r4, #28]
   211fc:	orr	r0, r0, #8
   21200:	strb	r0, [r4, #28]
   21204:	mov	r0, #0
   21208:	pop	{r4, r5, r6, sl, fp, pc}
   2120c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21210:	add	fp, sp, #28
   21214:	sub	sp, sp, #332	; 0x14c
   21218:	ldr	r8, [r0]
   2121c:	mov	r9, r0
   21220:	mov	r5, r2
   21224:	mov	r2, #0
   21228:	str	r2, [sp, #20]
   2122c:	ldr	r0, [r8, #92]	; 0x5c
   21230:	cmp	r0, #1
   21234:	ldrbeq	r0, [r9, #14]
   21238:	ubfxeq	r0, r0, #6, #1
   2123c:	streq	r0, [sp, #20]
   21240:	ldr	r0, [r1, #8]
   21244:	cmp	r0, #1
   21248:	blt	21a04 <__assert_fail@plt+0xfb70>
   2124c:	add	r0, r5, #224	; 0xe0
   21250:	mov	sl, #1
   21254:	mov	r2, #0
   21258:	str	r9, [sp, #16]
   2125c:	str	r1, [sp, #24]
   21260:	str	r0, [sp, #52]	; 0x34
   21264:	add	r0, r5, #192	; 0xc0
   21268:	str	r0, [sp, #48]	; 0x30
   2126c:	add	r0, r5, #160	; 0xa0
   21270:	str	r0, [sp, #44]	; 0x2c
   21274:	add	r0, r5, #128	; 0x80
   21278:	str	r0, [sp, #40]	; 0x28
   2127c:	add	r0, r5, #96	; 0x60
   21280:	str	r0, [sp, #36]	; 0x24
   21284:	add	r0, r5, #64	; 0x40
   21288:	str	r0, [sp, #32]
   2128c:	add	r0, r5, #32
   21290:	str	r0, [sp, #12]
   21294:	add	r0, r5, #31
   21298:	str	r0, [sp, #8]
   2129c:	add	r0, sp, #56	; 0x38
   212a0:	add	r0, r0, #1
   212a4:	str	r0, [sp, #4]
   212a8:	ldr	r0, [r1, #12]
   212ac:	str	r2, [sp, #28]
   212b0:	ldr	r4, [r0, r2, lsl #2]
   212b4:	ldr	r2, [r8]
   212b8:	add	r0, r2, r4, lsl #3
   212bc:	ldrb	r6, [r0, #4]
   212c0:	sub	r0, r6, #1
   212c4:	cmp	r0, #6
   212c8:	bhi	219ec <__assert_fail@plt+0xfb58>
   212cc:	add	r1, pc, #0
   212d0:	ldr	pc, [r1, r0, lsl #2]
   212d4:	strdeq	r1, [r2], -r0
   212d8:	andeq	r1, r2, ip, lsl #20
   212dc:	strdeq	r1, [r2], -r0
   212e0:	andeq	r1, r2, ip, ror #19
   212e4:	andeq	r1, r2, ip, lsl #20
   212e8:	andeq	r1, r2, r0, lsr #13
   212ec:	andeq	r1, r2, ip, lsl #20
   212f0:	ldr	r0, [sp, #20]
   212f4:	ldrb	r6, [r2, r4, lsl #3]
   212f8:	cmp	r0, #0
   212fc:	strb	sl, [r5, r6]
   21300:	beq	21314 <__assert_fail@plt+0xf480>
   21304:	bl	11c18 <__ctype_tolower_loc@plt>
   21308:	ldr	r0, [r0]
   2130c:	ldr	r0, [r0, r6, lsl #2]
   21310:	strb	sl, [r5, r0]
   21314:	ldrb	r0, [r9, #14]
   21318:	tst	r0, #64	; 0x40
   2131c:	beq	219ec <__assert_fail@plt+0xfb58>
   21320:	ldr	r0, [r8, #92]	; 0x5c
   21324:	cmp	r0, #2
   21328:	blt	219ec <__assert_fail@plt+0xfb58>
   2132c:	ldr	r0, [r8]
   21330:	add	r1, r4, #1
   21334:	movw	r7, #1
   21338:	add	r6, sp, #56	; 0x38
   2133c:	movt	r7, #32
   21340:	ldrb	r0, [r0, r4, lsl #3]
   21344:	strb	r0, [sp, #56]	; 0x38
   21348:	ldr	r0, [r8, #8]
   2134c:	cmp	r1, r0
   21350:	ldr	r0, [sp, #4]
   21354:	bcs	21398 <__assert_fail@plt+0xf504>
   21358:	ldr	r0, [sp, #4]
   2135c:	ldr	r1, [r8]
   21360:	add	r3, r7, #254	; 0xfe
   21364:	add	r1, r1, r4, lsl #3
   21368:	ldr	r2, [r1, #12]
   2136c:	and	r2, r2, r3
   21370:	cmp	r2, r7
   21374:	bne	21398 <__assert_fail@plt+0xf504>
   21378:	ldrb	r1, [r1, #8]
   2137c:	add	r3, r4, #2
   21380:	strb	r1, [r0], #1
   21384:	add	r1, r4, #1
   21388:	ldr	r2, [r8, #8]
   2138c:	mov	r4, r1
   21390:	cmp	r3, r2
   21394:	bcc	2135c <__assert_fail@plt+0xf4c8>
   21398:	mov	r1, #0
   2139c:	sub	r4, r0, r6
   213a0:	sub	r7, fp, #48	; 0x30
   213a4:	sub	r0, fp, #36	; 0x24
   213a8:	str	r1, [fp, #-44]	; 0xffffffd4
   213ac:	str	r1, [fp, #-48]	; 0xffffffd0
   213b0:	mov	r1, r6
   213b4:	mov	r2, r4
   213b8:	mov	r3, r7
   213bc:	bl	38138 <__assert_fail@plt+0x262a4>
   213c0:	cmp	r0, r4
   213c4:	bne	219ec <__assert_fail@plt+0xfb58>
   213c8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   213cc:	bl	11ab0 <towlower@plt>
   213d0:	mov	r1, r0
   213d4:	mov	r0, r6
   213d8:	mov	r2, r7
   213dc:	bl	119e4 <wcrtomb@plt>
   213e0:	cmn	r0, #1
   213e4:	ldrbne	r0, [sp, #56]	; 0x38
   213e8:	strbne	sl, [r5, r0]
   213ec:	b	219ec <__assert_fail@plt+0xfb58>
   213f0:	ldr	r0, [sp, #20]
   213f4:	cmp	r0, #0
   213f8:	beq	2184c <__assert_fail@plt+0xf9b8>
   213fc:	ldr	r0, [r2, r4, lsl #3]
   21400:	mov	r6, #0
   21404:	ldr	r7, [r0]
   21408:	tst	r7, sl, lsl r6
   2140c:	beq	2143c <__assert_fail@plt+0xf5a8>
   21410:	add	r1, r6, #128	; 0x80
   21414:	mov	r0, r5
   21418:	lsr	r1, r1, #7
   2141c:	strb	sl, [r0, r6]!
   21420:	cmp	r1, #2
   21424:	bhi	21438 <__assert_fail@plt+0xf5a4>
   21428:	bl	11c18 <__ctype_tolower_loc@plt>
   2142c:	ldr	r0, [r0]
   21430:	ldr	r0, [r0, r6, lsl #2]
   21434:	add	r0, r5, r0
   21438:	strb	sl, [r0]
   2143c:	add	r6, r6, #1
   21440:	cmp	r6, #32
   21444:	bne	21408 <__assert_fail@plt+0xf574>
   21448:	ldr	r0, [r8]
   2144c:	ldr	r6, [sp, #12]
   21450:	mov	r9, #0
   21454:	ldr	r0, [r0, r4, lsl #3]
   21458:	ldr	r7, [r0, #4]
   2145c:	tst	r7, sl, lsl r9
   21460:	beq	21494 <__assert_fail@plt+0xf600>
   21464:	add	r1, r9, #160	; 0xa0
   21468:	mov	r0, r6
   2146c:	lsr	r1, r1, #7
   21470:	strb	sl, [r0, r9]!
   21474:	cmp	r1, #2
   21478:	bhi	21490 <__assert_fail@plt+0xf5fc>
   2147c:	bl	11c18 <__ctype_tolower_loc@plt>
   21480:	ldr	r0, [r0]
   21484:	add	r0, r0, r9, lsl #2
   21488:	ldr	r0, [r0, #128]	; 0x80
   2148c:	add	r0, r5, r0
   21490:	strb	sl, [r0]
   21494:	add	r9, r9, #1
   21498:	cmp	r9, #32
   2149c:	bne	2145c <__assert_fail@plt+0xf5c8>
   214a0:	ldr	r0, [r8]
   214a4:	ldr	r9, [sp, #16]
   214a8:	mov	r6, #0
   214ac:	ldr	r0, [r0, r4, lsl #3]
   214b0:	ldr	r7, [r0, #8]
   214b4:	tst	r7, sl, lsl r6
   214b8:	beq	214ec <__assert_fail@plt+0xf658>
   214bc:	ldr	r0, [sp, #32]
   214c0:	add	r1, r6, #192	; 0xc0
   214c4:	lsr	r1, r1, #7
   214c8:	cmp	r1, #2
   214cc:	strb	sl, [r0, r6]!
   214d0:	bhi	214e8 <__assert_fail@plt+0xf654>
   214d4:	bl	11c18 <__ctype_tolower_loc@plt>
   214d8:	ldr	r0, [r0]
   214dc:	add	r0, r0, r6, lsl #2
   214e0:	ldr	r0, [r0, #256]	; 0x100
   214e4:	add	r0, r5, r0
   214e8:	strb	sl, [r0]
   214ec:	add	r6, r6, #1
   214f0:	cmp	r6, #32
   214f4:	bne	214b4 <__assert_fail@plt+0xf620>
   214f8:	ldr	r0, [r8]
   214fc:	mov	r6, #0
   21500:	ldr	r0, [r0, r4, lsl #3]
   21504:	ldr	r7, [r0, #12]
   21508:	tst	r7, sl, lsl r6
   2150c:	beq	21540 <__assert_fail@plt+0xf6ac>
   21510:	ldr	r0, [sp, #36]	; 0x24
   21514:	add	r1, r6, #224	; 0xe0
   21518:	lsr	r1, r1, #7
   2151c:	cmp	r1, #2
   21520:	strb	sl, [r0, r6]!
   21524:	bhi	2153c <__assert_fail@plt+0xf6a8>
   21528:	bl	11c18 <__ctype_tolower_loc@plt>
   2152c:	ldr	r0, [r0]
   21530:	add	r0, r0, r6, lsl #2
   21534:	ldr	r0, [r0, #384]	; 0x180
   21538:	add	r0, r5, r0
   2153c:	strb	sl, [r0]
   21540:	add	r6, r6, #1
   21544:	cmp	r6, #32
   21548:	bne	21508 <__assert_fail@plt+0xf674>
   2154c:	ldr	r0, [r8]
   21550:	mov	r6, #0
   21554:	ldr	r0, [r0, r4, lsl #3]
   21558:	ldr	r7, [r0, #16]
   2155c:	tst	r7, sl, lsl r6
   21560:	beq	21594 <__assert_fail@plt+0xf700>
   21564:	ldr	r0, [sp, #40]	; 0x28
   21568:	add	r1, r6, #256	; 0x100
   2156c:	lsr	r1, r1, #7
   21570:	cmp	r1, #2
   21574:	strb	sl, [r0, r6]!
   21578:	bhi	21590 <__assert_fail@plt+0xf6fc>
   2157c:	bl	11c18 <__ctype_tolower_loc@plt>
   21580:	ldr	r0, [r0]
   21584:	add	r0, r0, r6, lsl #2
   21588:	ldr	r0, [r0, #512]	; 0x200
   2158c:	add	r0, r5, r0
   21590:	strb	sl, [r0]
   21594:	add	r6, r6, #1
   21598:	cmp	r6, #32
   2159c:	bne	2155c <__assert_fail@plt+0xf6c8>
   215a0:	ldr	r0, [r8]
   215a4:	mov	r6, #0
   215a8:	ldr	r0, [r0, r4, lsl #3]
   215ac:	ldr	r7, [r0, #20]
   215b0:	tst	r7, sl, lsl r6
   215b4:	beq	215e8 <__assert_fail@plt+0xf754>
   215b8:	ldr	r0, [sp, #44]	; 0x2c
   215bc:	add	r1, r6, #288	; 0x120
   215c0:	lsr	r1, r1, #7
   215c4:	cmp	r1, #2
   215c8:	strb	sl, [r0, r6]!
   215cc:	bhi	215e4 <__assert_fail@plt+0xf750>
   215d0:	bl	11c18 <__ctype_tolower_loc@plt>
   215d4:	ldr	r0, [r0]
   215d8:	add	r0, r0, r6, lsl #2
   215dc:	ldr	r0, [r0, #640]	; 0x280
   215e0:	add	r0, r5, r0
   215e4:	strb	sl, [r0]
   215e8:	add	r6, r6, #1
   215ec:	cmp	r6, #32
   215f0:	bne	215b0 <__assert_fail@plt+0xf71c>
   215f4:	ldr	r0, [r8]
   215f8:	mov	r6, #0
   215fc:	ldr	r0, [r0, r4, lsl #3]
   21600:	ldr	r7, [r0, #24]
   21604:	tst	r7, sl, lsl r6
   21608:	beq	2163c <__assert_fail@plt+0xf7a8>
   2160c:	ldr	r0, [sp, #48]	; 0x30
   21610:	add	r1, r6, #320	; 0x140
   21614:	lsr	r1, r1, #7
   21618:	cmp	r1, #2
   2161c:	strb	sl, [r0, r6]!
   21620:	bhi	21638 <__assert_fail@plt+0xf7a4>
   21624:	bl	11c18 <__ctype_tolower_loc@plt>
   21628:	ldr	r0, [r0]
   2162c:	add	r0, r0, r6, lsl #2
   21630:	ldr	r0, [r0, #768]	; 0x300
   21634:	add	r0, r5, r0
   21638:	strb	sl, [r0]
   2163c:	add	r6, r6, #1
   21640:	cmp	r6, #32
   21644:	bne	21604 <__assert_fail@plt+0xf770>
   21648:	ldr	r0, [r8]
   2164c:	mov	r6, #0
   21650:	ldr	r0, [r0, r4, lsl #3]
   21654:	ldr	r4, [r0, #28]
   21658:	tst	r4, sl, lsl r6
   2165c:	beq	21690 <__assert_fail@plt+0xf7fc>
   21660:	ldr	r0, [sp, #52]	; 0x34
   21664:	add	r1, r6, #352	; 0x160
   21668:	lsr	r1, r1, #7
   2166c:	cmp	r1, #2
   21670:	strb	sl, [r0, r6]!
   21674:	bhi	2168c <__assert_fail@plt+0xf7f8>
   21678:	bl	11c18 <__ctype_tolower_loc@plt>
   2167c:	ldr	r0, [r0]
   21680:	add	r0, r0, r6, lsl #2
   21684:	ldr	r0, [r0, #896]	; 0x380
   21688:	add	r0, r5, r0
   2168c:	strb	sl, [r0]
   21690:	add	r6, r6, #1
   21694:	cmp	r6, #32
   21698:	bne	21658 <__assert_fail@plt+0xf7c4>
   2169c:	b	219ec <__assert_fail@plt+0xfb58>
   216a0:	ldr	r0, [r8, #92]	; 0x5c
   216a4:	ldr	r4, [r2, r4, lsl #3]
   216a8:	cmp	r0, #2
   216ac:	blt	2171c <__assert_fail@plt+0xf888>
   216b0:	ldr	r0, [r4, #36]	; 0x24
   216b4:	cmp	r0, #0
   216b8:	bne	216d0 <__assert_fail@plt+0xf83c>
   216bc:	ldrb	r0, [r4, #16]
   216c0:	tst	r0, #1
   216c4:	ldreq	r0, [r4, #32]
   216c8:	cmpeq	r0, #0
   216cc:	beq	2171c <__assert_fail@plt+0xf888>
   216d0:	mov	r6, #0
   216d4:	add	r4, sp, #56	; 0x38
   216d8:	sub	r7, fp, #48	; 0x30
   216dc:	strb	r6, [fp, #-48]	; 0xffffffd0
   216e0:	mov	r0, #0
   216e4:	mov	r1, r7
   216e8:	mov	r2, #1
   216ec:	mov	r3, r4
   216f0:	str	r6, [sp, #60]	; 0x3c
   216f4:	str	r6, [sp, #56]	; 0x38
   216f8:	bl	38138 <__assert_fail@plt+0x262a4>
   216fc:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   21700:	cmn	r0, #2
   21704:	add	r0, r1, #1
   21708:	strbeq	sl, [r5, r1]
   2170c:	tst	r0, #255	; 0xff
   21710:	strb	r0, [fp, #-48]	; 0xffffffd0
   21714:	bne	216e0 <__assert_fail@plt+0xf84c>
   21718:	b	219ec <__assert_fail@plt+0xfb58>
   2171c:	ldr	r0, [r4, #20]
   21720:	cmp	r0, #1
   21724:	blt	219ec <__assert_fail@plt+0xfb58>
   21728:	ldr	r0, [sp, #20]
   2172c:	mov	r7, #0
   21730:	cmp	r0, #0
   21734:	beq	217cc <__assert_fail@plt+0xf938>
   21738:	mov	r0, #0
   2173c:	sub	r2, fp, #48	; 0x30
   21740:	str	r0, [fp, #-44]	; 0xffffffd4
   21744:	str	r0, [fp, #-48]	; 0xffffffd0
   21748:	ldr	r0, [r4]
   2174c:	ldr	r1, [r0, r7, lsl #2]
   21750:	add	r0, sp, #56	; 0x38
   21754:	bl	119e4 <wcrtomb@plt>
   21758:	cmn	r0, #1
   2175c:	beq	21778 <__assert_fail@plt+0xf8e4>
   21760:	ldrb	r6, [sp, #56]	; 0x38
   21764:	strb	sl, [r5, r6]
   21768:	bl	11c18 <__ctype_tolower_loc@plt>
   2176c:	ldr	r0, [r0]
   21770:	ldr	r0, [r0, r6, lsl #2]
   21774:	strb	sl, [r5, r0]
   21778:	ldrb	r0, [r9, #14]
   2177c:	tst	r0, #64	; 0x40
   21780:	beq	217b8 <__assert_fail@plt+0xf924>
   21784:	ldr	r0, [r8, #92]	; 0x5c
   21788:	cmp	r0, #2
   2178c:	blt	217b8 <__assert_fail@plt+0xf924>
   21790:	ldr	r0, [r4]
   21794:	ldr	r0, [r0, r7, lsl #2]
   21798:	bl	11ab0 <towlower@plt>
   2179c:	mov	r1, r0
   217a0:	add	r0, sp, #56	; 0x38
   217a4:	sub	r2, fp, #48	; 0x30
   217a8:	bl	119e4 <wcrtomb@plt>
   217ac:	cmn	r0, #1
   217b0:	ldrbne	r0, [sp, #56]	; 0x38
   217b4:	strbne	sl, [r5, r0]
   217b8:	ldr	r0, [r4, #20]
   217bc:	add	r7, r7, #1
   217c0:	cmp	r7, r0
   217c4:	blt	21738 <__assert_fail@plt+0xf8a4>
   217c8:	b	219ec <__assert_fail@plt+0xfb58>
   217cc:	mov	r0, #0
   217d0:	sub	r2, fp, #48	; 0x30
   217d4:	str	r0, [fp, #-44]	; 0xffffffd4
   217d8:	str	r0, [fp, #-48]	; 0xffffffd0
   217dc:	ldr	r0, [r4]
   217e0:	ldr	r1, [r0, r7, lsl #2]
   217e4:	add	r0, sp, #56	; 0x38
   217e8:	bl	119e4 <wcrtomb@plt>
   217ec:	cmn	r0, #1
   217f0:	ldrbne	r0, [sp, #56]	; 0x38
   217f4:	strbne	sl, [r5, r0]
   217f8:	ldrb	r0, [r9, #14]
   217fc:	tst	r0, #64	; 0x40
   21800:	beq	21838 <__assert_fail@plt+0xf9a4>
   21804:	ldr	r0, [r8, #92]	; 0x5c
   21808:	cmp	r0, #2
   2180c:	blt	21838 <__assert_fail@plt+0xf9a4>
   21810:	ldr	r0, [r4]
   21814:	ldr	r0, [r0, r7, lsl #2]
   21818:	bl	11ab0 <towlower@plt>
   2181c:	mov	r1, r0
   21820:	add	r0, sp, #56	; 0x38
   21824:	sub	r2, fp, #48	; 0x30
   21828:	bl	119e4 <wcrtomb@plt>
   2182c:	cmn	r0, #1
   21830:	ldrbne	r0, [sp, #56]	; 0x38
   21834:	strbne	sl, [r5, r0]
   21838:	ldr	r0, [r4, #20]
   2183c:	add	r7, r7, #1
   21840:	cmp	r7, r0
   21844:	blt	217cc <__assert_fail@plt+0xf938>
   21848:	b	219ec <__assert_fail@plt+0xfb58>
   2184c:	ldr	r1, [sp, #8]
   21850:	mov	r0, #0
   21854:	b	21864 <__assert_fail@plt+0xf9d0>
   21858:	ldr	r2, [r8]
   2185c:	add	r0, r0, #4
   21860:	add	r1, r1, #32
   21864:	ldr	r2, [r2, r4, lsl #3]
   21868:	ldr	r2, [r2, r0]
   2186c:	tst	r2, #1
   21870:	strbne	sl, [r1, #-31]	; 0xffffffe1
   21874:	tst	r2, #2
   21878:	addne	r3, r5, r0, lsl #3
   2187c:	strbne	sl, [r3, #1]
   21880:	tst	r2, #4
   21884:	addne	r3, r5, r0, lsl #3
   21888:	strbne	sl, [r3, #2]
   2188c:	tst	r2, #8
   21890:	addne	r3, r5, r0, lsl #3
   21894:	strbne	sl, [r3, #3]
   21898:	tst	r2, #16
   2189c:	addne	r3, r5, r0, lsl #3
   218a0:	strbne	sl, [r3, #4]
   218a4:	tst	r2, #32
   218a8:	addne	r3, r5, r0, lsl #3
   218ac:	strbne	sl, [r3, #5]
   218b0:	tst	r2, #64	; 0x40
   218b4:	addne	r3, r5, r0, lsl #3
   218b8:	strbne	sl, [r3, #6]
   218bc:	tst	r2, #128	; 0x80
   218c0:	addne	r3, r5, r0, lsl #3
   218c4:	strbne	sl, [r3, #7]
   218c8:	tst	r2, #256	; 0x100
   218cc:	addne	r3, r5, r0, lsl #3
   218d0:	strbne	sl, [r3, #8]
   218d4:	tst	r2, #512	; 0x200
   218d8:	addne	r3, r5, r0, lsl #3
   218dc:	strbne	sl, [r3, #9]
   218e0:	tst	r2, #1024	; 0x400
   218e4:	addne	r3, r5, r0, lsl #3
   218e8:	strbne	sl, [r3, #10]
   218ec:	tst	r2, #2048	; 0x800
   218f0:	addne	r3, r5, r0, lsl #3
   218f4:	strbne	sl, [r3, #11]
   218f8:	tst	r2, #4096	; 0x1000
   218fc:	addne	r3, r5, r0, lsl #3
   21900:	strbne	sl, [r3, #12]
   21904:	tst	r2, #8192	; 0x2000
   21908:	addne	r3, r5, r0, lsl #3
   2190c:	strbne	sl, [r3, #13]
   21910:	tst	r2, #16384	; 0x4000
   21914:	addne	r3, r5, r0, lsl #3
   21918:	strbne	sl, [r3, #14]
   2191c:	tst	r2, #32768	; 0x8000
   21920:	addne	r3, r5, r0, lsl #3
   21924:	strbne	sl, [r3, #15]
   21928:	tst	r2, #65536	; 0x10000
   2192c:	addne	r3, r5, r0, lsl #3
   21930:	strbne	sl, [r3, #16]
   21934:	tst	r2, #131072	; 0x20000
   21938:	addne	r3, r5, r0, lsl #3
   2193c:	strbne	sl, [r3, #17]
   21940:	tst	r2, #262144	; 0x40000
   21944:	addne	r3, r5, r0, lsl #3
   21948:	strbne	sl, [r3, #18]
   2194c:	tst	r2, #524288	; 0x80000
   21950:	addne	r3, r5, r0, lsl #3
   21954:	strbne	sl, [r3, #19]
   21958:	tst	r2, #1048576	; 0x100000
   2195c:	addne	r3, r5, r0, lsl #3
   21960:	strbne	sl, [r3, #20]
   21964:	tst	r2, #2097152	; 0x200000
   21968:	addne	r3, r5, r0, lsl #3
   2196c:	strbne	sl, [r3, #21]
   21970:	tst	r2, #4194304	; 0x400000
   21974:	addne	r3, r5, r0, lsl #3
   21978:	strbne	sl, [r3, #22]
   2197c:	tst	r2, #8388608	; 0x800000
   21980:	addne	r3, r5, r0, lsl #3
   21984:	strbne	sl, [r3, #23]
   21988:	tst	r2, #16777216	; 0x1000000
   2198c:	addne	r3, r5, r0, lsl #3
   21990:	strbne	sl, [r3, #24]
   21994:	tst	r2, #33554432	; 0x2000000
   21998:	addne	r3, r5, r0, lsl #3
   2199c:	strbne	sl, [r3, #25]
   219a0:	tst	r2, #67108864	; 0x4000000
   219a4:	addne	r3, r5, r0, lsl #3
   219a8:	strbne	sl, [r3, #26]
   219ac:	tst	r2, #134217728	; 0x8000000
   219b0:	addne	r3, r5, r0, lsl #3
   219b4:	strbne	sl, [r3, #27]
   219b8:	tst	r2, #268435456	; 0x10000000
   219bc:	addne	r3, r5, r0, lsl #3
   219c0:	strbne	sl, [r3, #28]
   219c4:	tst	r2, #536870912	; 0x20000000
   219c8:	addne	r3, r5, r0, lsl #3
   219cc:	strbne	sl, [r3, #29]
   219d0:	tst	r2, #1073741824	; 0x40000000
   219d4:	addne	r3, r5, r0, lsl #3
   219d8:	strbne	sl, [r3, #30]
   219dc:	cmn	r2, #1
   219e0:	strble	sl, [r1]
   219e4:	cmp	r0, #28
   219e8:	bne	21858 <__assert_fail@plt+0xf9c4>
   219ec:	ldr	r1, [sp, #24]
   219f0:	ldr	r2, [sp, #28]
   219f4:	ldr	r0, [r1, #8]
   219f8:	add	r2, r2, #1
   219fc:	cmp	r2, r0
   21a00:	blt	212a8 <__assert_fail@plt+0xf414>
   21a04:	sub	sp, fp, #28
   21a08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21a0c:	mov	r0, r5
   21a10:	mov	r1, #1
   21a14:	mov	r2, #256	; 0x100
   21a18:	bl	11cd8 <memset@plt>
   21a1c:	cmp	r6, #2
   21a20:	ldrbeq	r0, [r9, #28]
   21a24:	orreq	r0, r0, #1
   21a28:	strbeq	r0, [r9, #28]
   21a2c:	sub	sp, fp, #28
   21a30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21a34:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21a38:	add	fp, sp, #24
   21a3c:	mov	r4, r0
   21a40:	mov	r0, #0
   21a44:	mov	r6, r2
   21a48:	mov	r5, r1
   21a4c:	str	r0, [r4]
   21a50:	str	r0, [r4, #4]
   21a54:	str	r0, [r4, #8]
   21a58:	mov	r0, #256	; 0x100
   21a5c:	bl	36fb4 <__assert_fail@plt+0x25120>
   21a60:	cmp	r0, #0
   21a64:	str	r0, [r4, #16]
   21a68:	beq	21ba0 <__assert_fail@plt+0xfd0c>
   21a6c:	movw	r0, #45820	; 0xb2fc
   21a70:	tst	r6, #1
   21a74:	and	r1, r6, #2
   21a78:	mov	r8, r4
   21a7c:	movt	r0, #3
   21a80:	movweq	r0, #710	; 0x2c6
   21a84:	movteq	r0, #257	; 0x101
   21a88:	tst	r6, #4
   21a8c:	orr	r7, r0, r1, lsl #21
   21a90:	bne	21aa4 <__assert_fail@plt+0xfc10>
   21a94:	ldrb	r0, [r8, #28]!
   21a98:	and	r0, r0, #127	; 0x7f
   21a9c:	strb	r0, [r8]
   21aa0:	b	21ac4 <__assert_fail@plt+0xfc30>
   21aa4:	ldrb	r0, [r8, #28]!
   21aa8:	mvn	r1, #127	; 0x7f
   21aac:	orr	r0, r0, r1
   21ab0:	movw	r1, #45758	; 0xb2be
   21ab4:	movt	r1, #323	; 0x143
   21ab8:	strb	r0, [r8]
   21abc:	and	r1, r7, r1
   21ac0:	orr	r7, r1, #256	; 0x100
   21ac4:	and	r1, r6, #8
   21ac8:	and	r0, r0, #239	; 0xef
   21acc:	mov	r9, #0
   21ad0:	orr	r0, r0, r1, lsl #1
   21ad4:	str	r9, [r4, #20]
   21ad8:	strb	r0, [r4, #28]
   21adc:	mov	r0, r5
   21ae0:	bl	11c78 <strlen@plt>
   21ae4:	mov	r2, r0
   21ae8:	mov	r0, r4
   21aec:	mov	r1, r5
   21af0:	mov	r3, r7
   21af4:	bl	1fa60 <__assert_fail@plt+0xdbcc>
   21af8:	mov	r5, r0
   21afc:	cmp	r0, #16
   21b00:	movweq	r5, #8
   21b04:	cmp	r5, #0
   21b08:	bne	21bac <__assert_fail@plt+0xfd18>
   21b0c:	ldr	r5, [r4, #16]
   21b10:	ldr	r6, [r4]
   21b14:	mov	r1, #0
   21b18:	mov	r2, #256	; 0x100
   21b1c:	mov	r0, r5
   21b20:	bl	11cd8 <memset@plt>
   21b24:	ldr	r1, [r6, #36]	; 0x24
   21b28:	mov	r0, r4
   21b2c:	mov	r2, r5
   21b30:	bl	2120c <__assert_fail@plt+0xf378>
   21b34:	ldr	r0, [r6, #36]	; 0x24
   21b38:	ldr	r1, [r6, #40]	; 0x28
   21b3c:	cmp	r0, r1
   21b40:	beq	21b54 <__assert_fail@plt+0xfcc0>
   21b44:	mov	r0, r4
   21b48:	mov	r2, r5
   21b4c:	bl	2120c <__assert_fail@plt+0xf378>
   21b50:	ldr	r0, [r6, #36]	; 0x24
   21b54:	ldr	r1, [r6, #44]	; 0x2c
   21b58:	cmp	r0, r1
   21b5c:	beq	21b70 <__assert_fail@plt+0xfcdc>
   21b60:	mov	r0, r4
   21b64:	mov	r2, r5
   21b68:	bl	2120c <__assert_fail@plt+0xf378>
   21b6c:	ldr	r0, [r6, #36]	; 0x24
   21b70:	ldr	r1, [r6, #48]	; 0x30
   21b74:	cmp	r0, r1
   21b78:	beq	21b88 <__assert_fail@plt+0xfcf4>
   21b7c:	mov	r0, r4
   21b80:	mov	r2, r5
   21b84:	bl	2120c <__assert_fail@plt+0xf378>
   21b88:	ldrb	r0, [r8]
   21b8c:	mov	r5, #0
   21b90:	orr	r0, r0, #8
   21b94:	strb	r0, [r8]
   21b98:	mov	r0, r5
   21b9c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21ba0:	mov	r5, #12
   21ba4:	mov	r0, r5
   21ba8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21bac:	ldr	r0, [r4, #16]
   21bb0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   21bb4:	mov	r0, r5
   21bb8:	str	r9, [r4, #16]
   21bbc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21bc0:	push	{r4, r5, r6, r7, fp, lr}
   21bc4:	add	fp, sp, #16
   21bc8:	cmp	r0, #17
   21bcc:	bcs	21c40 <__assert_fail@plt+0xfdac>
   21bd0:	movw	r1, #42672	; 0xa6b0
   21bd4:	mov	r4, r2
   21bd8:	mov	r2, #5
   21bdc:	mov	r5, r3
   21be0:	movt	r1, #3
   21be4:	ldr	r0, [r1, r0, lsl #2]
   21be8:	movw	r1, #42288	; 0xa530
   21bec:	movt	r1, #3
   21bf0:	add	r1, r1, r0
   21bf4:	mov	r0, #0
   21bf8:	bl	11ad4 <dcgettext@plt>
   21bfc:	mov	r6, r0
   21c00:	bl	11c78 <strlen@plt>
   21c04:	add	r7, r0, #1
   21c08:	cmp	r5, #0
   21c0c:	beq	21c28 <__assert_fail@plt+0xfd94>
   21c10:	cmp	r7, r5
   21c14:	mov	r2, r7
   21c18:	bhi	21c30 <__assert_fail@plt+0xfd9c>
   21c1c:	mov	r0, r4
   21c20:	mov	r1, r6
   21c24:	bl	11a8c <memcpy@plt>
   21c28:	mov	r0, r7
   21c2c:	pop	{r4, r5, r6, r7, fp, pc}
   21c30:	sub	r2, r5, #1
   21c34:	mov	r0, #0
   21c38:	strb	r0, [r4, r2]
   21c3c:	b	21c1c <__assert_fail@plt+0xfd88>
   21c40:	bl	11e58 <abort@plt>
   21c44:	push	{r4, r5, fp, lr}
   21c48:	add	fp, sp, #8
   21c4c:	ldr	r5, [r0]
   21c50:	mov	r4, r0
   21c54:	cmp	r5, #0
   21c58:	beq	21c84 <__assert_fail@plt+0xfdf0>
   21c5c:	movw	r0, #0
   21c60:	movw	r1, #0
   21c64:	movt	r0, #0
   21c68:	movt	r1, #0
   21c6c:	orrs	r0, r1, r0
   21c70:	beq	21c7c <__assert_fail@plt+0xfde8>
   21c74:	add	r0, r5, #136	; 0x88
   21c78:	bl	11a20 <pthread_mutex_destroy@plt>
   21c7c:	mov	r0, r5
   21c80:	bl	21cac <__assert_fail@plt+0xfe18>
   21c84:	mov	r5, #0
   21c88:	str	r5, [r4]
   21c8c:	str	r5, [r4, #4]
   21c90:	ldr	r0, [r4, #16]
   21c94:	bl	17b10 <__assert_fail@plt+0x5c7c>
   21c98:	str	r5, [r4, #16]
   21c9c:	ldr	r0, [r4, #20]
   21ca0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   21ca4:	str	r5, [r4, #20]
   21ca8:	pop	{r4, r5, fp, pc}
   21cac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21cb0:	add	fp, sp, #28
   21cb4:	sub	sp, sp, #4
   21cb8:	mov	sl, r0
   21cbc:	ldr	r0, [r0]
   21cc0:	cmp	r0, #0
   21cc4:	ldrne	r1, [sl, #8]
   21cc8:	cmpne	r1, #0
   21ccc:	beq	21d44 <__assert_fail@plt+0xfeb0>
   21cd0:	movw	r7, #255	; 0xff
   21cd4:	mov	r6, #0
   21cd8:	movt	r7, #4
   21cdc:	b	21ce4 <__assert_fail@plt+0xfe50>
   21ce0:	ldr	r0, [sl]
   21ce4:	add	r1, r0, r6, lsl #3
   21ce8:	ldr	r1, [r1, #4]
   21cec:	and	r1, r1, r7
   21cf0:	cmp	r1, #3
   21cf4:	beq	21d2c <__assert_fail@plt+0xfe98>
   21cf8:	cmp	r1, #6
   21cfc:	bne	21d34 <__assert_fail@plt+0xfea0>
   21d00:	ldr	r5, [r0, r6, lsl #3]
   21d04:	ldr	r0, [r5]
   21d08:	bl	17b10 <__assert_fail@plt+0x5c7c>
   21d0c:	ldr	r0, [r5, #4]
   21d10:	bl	17b10 <__assert_fail@plt+0x5c7c>
   21d14:	ldr	r0, [r5, #8]
   21d18:	bl	17b10 <__assert_fail@plt+0x5c7c>
   21d1c:	ldr	r0, [r5, #12]
   21d20:	bl	17b10 <__assert_fail@plt+0x5c7c>
   21d24:	mov	r0, r5
   21d28:	b	21d30 <__assert_fail@plt+0xfe9c>
   21d2c:	ldr	r0, [r0, r6, lsl #3]
   21d30:	bl	17b10 <__assert_fail@plt+0x5c7c>
   21d34:	ldr	r0, [sl, #8]
   21d38:	add	r6, r6, #1
   21d3c:	cmp	r6, r0
   21d40:	bcc	21ce0 <__assert_fail@plt+0xfe4c>
   21d44:	ldr	r0, [sl, #12]
   21d48:	bl	17b10 <__assert_fail@plt+0x5c7c>
   21d4c:	ldr	r0, [sl, #8]
   21d50:	cmp	r0, #0
   21d54:	beq	21dc0 <__assert_fail@plt+0xff2c>
   21d58:	add	r7, sl, #20
   21d5c:	add	r8, sl, #28
   21d60:	add	r9, sl, #24
   21d64:	mov	r5, #0
   21d68:	mov	r6, #8
   21d6c:	ldr	r0, [r9]
   21d70:	cmp	r0, #0
   21d74:	beq	21d80 <__assert_fail@plt+0xfeec>
   21d78:	ldr	r0, [r0, r6]
   21d7c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   21d80:	ldr	r0, [r8]
   21d84:	cmp	r0, #0
   21d88:	beq	21d94 <__assert_fail@plt+0xff00>
   21d8c:	ldr	r0, [r0, r6]
   21d90:	bl	17b10 <__assert_fail@plt+0x5c7c>
   21d94:	ldr	r0, [r7]
   21d98:	cmp	r0, #0
   21d9c:	beq	21da8 <__assert_fail@plt+0xff14>
   21da0:	ldr	r0, [r0, r6]
   21da4:	bl	17b10 <__assert_fail@plt+0x5c7c>
   21da8:	ldr	r0, [sl, #8]
   21dac:	add	r5, r5, #1
   21db0:	add	r6, r6, #12
   21db4:	cmp	r5, r0
   21db8:	bcc	21d6c <__assert_fail@plt+0xfed8>
   21dbc:	b	21dcc <__assert_fail@plt+0xff38>
   21dc0:	add	r8, sl, #28
   21dc4:	add	r9, sl, #24
   21dc8:	add	r7, sl, #20
   21dcc:	ldr	r0, [r7]
   21dd0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   21dd4:	ldr	r0, [r9]
   21dd8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   21ddc:	ldr	r0, [r8]
   21de0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   21de4:	ldr	r0, [sl]
   21de8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   21dec:	ldr	r5, [sl, #32]
   21df0:	cmp	r5, #0
   21df4:	beq	21e54 <__assert_fail@plt+0xffc0>
   21df8:	mov	r6, #0
   21dfc:	b	21e08 <__assert_fail@plt+0xff74>
   21e00:	ldr	r5, [sl, #32]
   21e04:	add	r6, r6, #1
   21e08:	add	r0, r6, r6, lsl #1
   21e0c:	ldr	r0, [r5, r0, lsl #2]!
   21e10:	add	r7, r5, #8
   21e14:	cmp	r0, #1
   21e18:	blt	21e3c <__assert_fail@plt+0xffa8>
   21e1c:	mov	r4, #0
   21e20:	ldr	r0, [r7]
   21e24:	ldr	r0, [r0, r4, lsl #2]
   21e28:	bl	24df0 <__assert_fail@plt+0x12f5c>
   21e2c:	ldr	r0, [r5]
   21e30:	add	r4, r4, #1
   21e34:	cmp	r4, r0
   21e38:	blt	21e20 <__assert_fail@plt+0xff8c>
   21e3c:	ldr	r0, [r7]
   21e40:	bl	17b10 <__assert_fail@plt+0x5c7c>
   21e44:	ldr	r0, [sl, #68]	; 0x44
   21e48:	cmp	r6, r0
   21e4c:	bcc	21e00 <__assert_fail@plt+0xff6c>
   21e50:	ldr	r5, [sl, #32]
   21e54:	mov	r0, r5
   21e58:	bl	17b10 <__assert_fail@plt+0x5c7c>
   21e5c:	ldr	r0, [sl, #60]	; 0x3c
   21e60:	movw	r1, #42740	; 0xa6f4
   21e64:	movt	r1, #3
   21e68:	cmp	r0, r1
   21e6c:	beq	21e74 <__assert_fail@plt+0xffe0>
   21e70:	bl	17b10 <__assert_fail@plt+0x5c7c>
   21e74:	ldr	r0, [sl, #132]	; 0x84
   21e78:	bl	17b10 <__assert_fail@plt+0x5c7c>
   21e7c:	mov	r0, sl
   21e80:	sub	sp, fp, #28
   21e84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e88:	b	17b10 <__assert_fail@plt+0x5c7c>
   21e8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e90:	add	fp, sp, #28
   21e94:	sub	sp, sp, #28
   21e98:	ldr	sl, [fp, #8]
   21e9c:	mov	r7, #2
   21ea0:	cmp	sl, #7
   21ea4:	bhi	21f78 <__assert_fail@plt+0x100e4>
   21ea8:	mov	r5, r0
   21eac:	ldr	r0, [r0]
   21eb0:	mov	r6, r3
   21eb4:	mov	r9, r2
   21eb8:	mov	r4, r1
   21ebc:	tst	sl, #4
   21ec0:	str	r0, [sp, #24]
   21ec4:	bne	21edc <__assert_fail@plt+0x10048>
   21ec8:	mov	r0, r4
   21ecc:	bl	11c78 <strlen@plt>
   21ed0:	mov	r7, r0
   21ed4:	mov	r8, #0
   21ed8:	b	21ee4 <__assert_fail@plt+0x10050>
   21edc:	ldr	r8, [r6]
   21ee0:	ldr	r7, [r6, #4]
   21ee4:	movw	r0, #0
   21ee8:	movw	r1, #0
   21eec:	movt	r0, #0
   21ef0:	movt	r1, #0
   21ef4:	orrs	r0, r1, r0
   21ef8:	str	r0, [sp, #20]
   21efc:	beq	21f0c <__assert_fail@plt+0x10078>
   21f00:	ldr	r0, [sp, #24]
   21f04:	add	r0, r0, #136	; 0x88
   21f08:	bl	11a68 <pthread_mutex_lock@plt>
   21f0c:	ldrb	r0, [r5, #28]
   21f10:	tst	r0, #16
   21f14:	bne	21f28 <__assert_fail@plt+0x10094>
   21f18:	str	r7, [sp]
   21f1c:	stmib	sp, {r7, r9}
   21f20:	str	r6, [sp, #12]
   21f24:	b	21f3c <__assert_fail@plt+0x100a8>
   21f28:	mov	r0, #0
   21f2c:	str	r7, [sp]
   21f30:	str	r7, [sp, #4]
   21f34:	str	r0, [sp, #8]
   21f38:	str	r0, [sp, #12]
   21f3c:	mov	r0, r5
   21f40:	mov	r1, r4
   21f44:	mov	r2, r7
   21f48:	mov	r3, r8
   21f4c:	str	sl, [sp, #16]
   21f50:	bl	21f84 <__assert_fail@plt+0x100f0>
   21f54:	mov	r7, r0
   21f58:	ldr	r0, [sp, #20]
   21f5c:	cmp	r0, #0
   21f60:	beq	21f70 <__assert_fail@plt+0x100dc>
   21f64:	ldr	r0, [sp, #24]
   21f68:	add	r0, r0, #136	; 0x88
   21f6c:	bl	1199c <pthread_mutex_unlock@plt>
   21f70:	cmp	r7, #0
   21f74:	movwne	r7, #1
   21f78:	mov	r0, r7
   21f7c:	sub	sp, fp, #28
   21f80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21f88:	add	fp, sp, #28
   21f8c:	sub	sp, sp, #412	; 0x19c
   21f90:	ldr	r8, [r0]
   21f94:	str	r2, [sp, #76]	; 0x4c
   21f98:	str	r1, [sp, #100]	; 0x64
   21f9c:	mov	r7, r0
   21fa0:	add	r0, sp, #104	; 0x68
   21fa4:	mov	r1, #0
   21fa8:	mov	r2, #136	; 0x88
   21fac:	mov	r6, r3
   21fb0:	mov	r4, #0
   21fb4:	bl	11cd8 <memset@plt>
   21fb8:	str	r8, [sp, #188]	; 0xbc
   21fbc:	ldr	sl, [fp, #16]
   21fc0:	ldr	ip, [fp, #8]
   21fc4:	mov	r5, #0
   21fc8:	ldr	r1, [r7, #16]
   21fcc:	cmp	r1, #0
   21fd0:	beq	21fec <__assert_fail@plt+0x10158>
   21fd4:	ldrb	r2, [r7, #28]
   21fd8:	and	r2, r2, #9
   21fdc:	cmp	r2, #8
   21fe0:	movne	r1, #0
   21fe4:	subs	r5, r6, ip
   21fe8:	movne	r5, r1
   21fec:	ldr	r2, [r7, #24]
   21ff0:	ldr	r1, [r7, #8]
   21ff4:	mov	r9, #1
   21ff8:	mvn	r3, r2
   21ffc:	cmp	r2, sl
   22000:	addcc	r4, r3, sl
   22004:	cmp	r1, #0
   22008:	beq	245a0 <__assert_fail@plt+0x1270c>
   2200c:	ldr	r1, [r8, #36]	; 0x24
   22010:	cmp	r1, #0
   22014:	ldrne	r2, [r8, #40]	; 0x28
   22018:	cmpne	r2, #0
   2201c:	beq	245a0 <__assert_fail@plt+0x1270c>
   22020:	ldr	r3, [r8, #44]	; 0x2c
   22024:	cmp	r3, #0
   22028:	movne	r0, r7
   2202c:	ldrne	r7, [r8, #48]	; 0x30
   22030:	cmpne	r7, #0
   22034:	beq	245a0 <__assert_fail@plt+0x1270c>
   22038:	ldr	r1, [r1, #8]
   2203c:	ldr	lr, [r0, #20]
   22040:	mov	r7, r0
   22044:	cmp	r1, #0
   22048:	bne	22058 <__assert_fail@plt+0x101c4>
   2204c:	ldr	r1, [r2, #8]
   22050:	cmp	r1, #0
   22054:	beq	23744 <__assert_fail@plt+0x118b0>
   22058:	mov	r1, ip
   2205c:	subs	r0, sl, r4
   22060:	str	r1, [sp, #80]	; 0x50
   22064:	str	r4, [sp, #28]
   22068:	str	r0, [sp, #68]	; 0x44
   2206c:	mov	r0, #1
   22070:	str	r0, [sp, #52]	; 0x34
   22074:	bne	22088 <__assert_fail@plt+0x101f4>
   22078:	ldr	r0, [r8, #76]	; 0x4c
   2207c:	cmp	r0, #0
   22080:	movwne	r0, #1
   22084:	str	r0, [sp, #52]	; 0x34
   22088:	ldr	r0, [r7, #12]
   2208c:	ldr	r2, [r8, #92]	; 0x5c
   22090:	ldr	r3, [sp, #100]	; 0x64
   22094:	ldr	r1, [r8, #8]
   22098:	str	lr, [sp, #168]	; 0xa8
   2209c:	str	r3, [sp, #104]	; 0x68
   220a0:	str	r2, [sp, #184]	; 0xb8
   220a4:	ubfx	r3, r0, #22, #1
   220a8:	and	r0, r0, #4194304	; 0x400000
   220ac:	ldr	r4, [sp, #76]	; 0x4c
   220b0:	str	r8, [sp, #96]	; 0x60
   220b4:	orrs	sl, lr, r0
   220b8:	strb	r3, [sp, #176]	; 0xb0
   220bc:	add	r3, sp, #104	; 0x68
   220c0:	movwne	sl, #1
   220c4:	add	r3, r3, #44	; 0x2c
   220c8:	strb	sl, [sp, #179]	; 0xb3
   220cc:	ldrb	r0, [r8, #88]	; 0x58
   220d0:	vdup.32	q8, r4
   220d4:	add	r8, r1, #1
   220d8:	vst1.32	{d16-d17}, [r3]
   220dc:	cmp	r2, r8
   220e0:	movgt	r8, r2
   220e4:	ubfx	r3, r0, #3, #1
   220e8:	strb	r3, [sp, #178]	; 0xb2
   220ec:	ubfx	r0, r0, #2, #1
   220f0:	str	r7, [sp, #64]	; 0x40
   220f4:	str	r5, [sp, #92]	; 0x5c
   220f8:	str	lr, [sp, #88]	; 0x58
   220fc:	strb	r0, [sp, #177]	; 0xb1
   22100:	add	r0, r4, #1
   22104:	cmp	r0, r8
   22108:	movlt	r8, r0
   2210c:	cmp	r2, #2
   22110:	blt	22144 <__assert_fail@plt+0x102b0>
   22114:	mov	r9, #12
   22118:	cmn	r8, #-1073741823	; 0xc0000001
   2211c:	bhi	2454c <__assert_fail@plt+0x126b8>
   22120:	lsl	r1, r8, #2
   22124:	mov	r0, #0
   22128:	bl	36fe4 <__assert_fail@plt+0x25150>
   2212c:	ldr	lr, [sp, #88]	; 0x58
   22130:	ldr	r5, [sp, #92]	; 0x5c
   22134:	cmp	r0, #0
   22138:	beq	2454c <__assert_fail@plt+0x126b8>
   2213c:	ldr	r7, [sp, #64]	; 0x40
   22140:	str	r0, [sp, #112]	; 0x70
   22144:	ldr	r4, [sp, #96]	; 0x60
   22148:	mov	r9, r7
   2214c:	mov	r7, #1
   22150:	cmp	sl, #0
   22154:	beq	2217c <__assert_fail@plt+0x102e8>
   22158:	mov	r0, #0
   2215c:	mov	r1, r8
   22160:	mov	r7, #0
   22164:	bl	36fe4 <__assert_fail@plt+0x25150>
   22168:	cmp	r0, #0
   2216c:	beq	24344 <__assert_fail@plt+0x124b0>
   22170:	ldr	r5, [sp, #92]	; 0x5c
   22174:	ldr	lr, [sp, #88]	; 0x58
   22178:	str	r0, [sp, #108]	; 0x6c
   2217c:	add	r1, r4, #96	; 0x60
   22180:	str	r8, [sp, #140]	; 0x8c
   22184:	ldr	r0, [fp, #12]
   22188:	cmp	r7, #0
   2218c:	str	r1, [sp, #172]	; 0xac
   22190:	ldrb	r1, [r4, #88]	; 0x58
   22194:	ubfx	r1, r1, #4, #1
   22198:	strb	r1, [sp, #182]	; 0xb6
   2219c:	mov	r1, #0
   221a0:	beq	221bc <__assert_fail@plt+0x10328>
   221a4:	ldr	r1, [sp, #100]	; 0x64
   221a8:	str	r1, [sp, #108]	; 0x6c
   221ac:	ldr	r1, [r4, #92]	; 0x5c
   221b0:	cmp	r1, #1
   221b4:	ldr	r1, [sp, #76]	; 0x4c
   221b8:	movwgt	r1, #0
   221bc:	str	r1, [sp, #136]	; 0x88
   221c0:	str	r1, [sp, #132]	; 0x84
   221c4:	str	r0, [sp, #160]	; 0xa0
   221c8:	str	r0, [sp, #156]	; 0x9c
   221cc:	ldrb	r0, [r9, #28]
   221d0:	lsr	r0, r0, #7
   221d4:	strb	r0, [sp, #181]	; 0xb5
   221d8:	mvn	r0, #0
   221dc:	ldr	r4, [r4, #76]	; 0x4c
   221e0:	str	r0, [sp, #196]	; 0xc4
   221e4:	ldr	r0, [fp, #24]
   221e8:	lsl	sl, r4, #1
   221ec:	cmp	r4, #1
   221f0:	str	r0, [sp, #192]	; 0xc0
   221f4:	blt	22244 <__assert_fail@plt+0x103b0>
   221f8:	movw	r0, #43690	; 0xaaaa
   221fc:	mov	r9, #12
   22200:	movt	r0, #2730	; 0xaaa
   22204:	cmp	sl, r0
   22208:	bhi	2454c <__assert_fail@plt+0x126b8>
   2220c:	add	r0, r4, r4, lsl #1
   22210:	lsl	r0, r0, #4
   22214:	bl	36fb4 <__assert_fail@plt+0x25120>
   22218:	mov	r7, r0
   2221c:	str	r0, [sp, #220]	; 0xdc
   22220:	lsl	r0, r4, #3
   22224:	bl	36fb4 <__assert_fail@plt+0x25120>
   22228:	cmp	r0, #0
   2222c:	str	r0, [sp, #236]	; 0xec
   22230:	beq	2454c <__assert_fail@plt+0x126b8>
   22234:	ldr	r5, [sp, #92]	; 0x5c
   22238:	ldr	lr, [sp, #88]	; 0x58
   2223c:	cmp	r7, #0
   22240:	beq	2454c <__assert_fail@plt+0x126b8>
   22244:	mov	r0, #1
   22248:	str	r0, [sp, #224]	; 0xe0
   2224c:	ldr	r0, [sp, #68]	; 0x44
   22250:	str	sl, [sp, #216]	; 0xd8
   22254:	str	sl, [sp, #232]	; 0xe8
   22258:	cmp	r0, #1
   2225c:	bhi	22270 <__assert_fail@plt+0x103dc>
   22260:	ldr	r0, [sp, #96]	; 0x60
   22264:	ldrb	r0, [r0, #88]	; 0x58
   22268:	tst	r0, #2
   2226c:	beq	2229c <__assert_fail@plt+0x10408>
   22270:	mov	r9, #12
   22274:	cmn	r8, #-1073741822	; 0xc0000002
   22278:	bhi	2454c <__assert_fail@plt+0x126b8>
   2227c:	mov	r0, #4
   22280:	add	r0, r0, r8, lsl #2
   22284:	bl	36fb4 <__assert_fail@plt+0x25120>
   22288:	ldr	lr, [sp, #88]	; 0x58
   2228c:	ldr	r5, [sp, #92]	; 0x5c
   22290:	cmp	r0, #0
   22294:	str	r0, [sp, #204]	; 0xcc
   22298:	beq	2454c <__assert_fail@plt+0x126b8>
   2229c:	ldr	r1, [fp, #24]
   222a0:	ldr	r2, [sp, #80]	; 0x50
   222a4:	str	r6, [fp, #-200]	; 0xffffff38
   222a8:	mov	r8, #1
   222ac:	mov	r4, r6
   222b0:	mov	r0, #4
   222b4:	tst	r1, #1
   222b8:	mov	r1, #4
   222bc:	mov	r7, r2
   222c0:	movweq	r1, #6
   222c4:	cmp	r2, r6
   222c8:	str	r1, [sp, #164]	; 0xa4
   222cc:	ldr	r1, [sp, #96]	; 0x60
   222d0:	mvnlt	r8, #0
   222d4:	movlt	r7, r6
   222d8:	movlt	r4, r2
   222dc:	cmp	r5, #0
   222e0:	ldr	r1, [r1, #92]	; 0x5c
   222e4:	str	r1, [sp, #60]	; 0x3c
   222e8:	beq	2232c <__assert_fail@plt+0x10498>
   222ec:	cmp	r1, #1
   222f0:	beq	22310 <__assert_fail@plt+0x1047c>
   222f4:	ldr	r0, [sp, #64]	; 0x40
   222f8:	ldr	r0, [r0, #12]
   222fc:	and	r0, r0, #4194304	; 0x400000
   22300:	orr	r0, lr, r0
   22304:	clz	r0, r0
   22308:	lsr	r0, r0, #5
   2230c:	lsl	r0, r0, #2
   22310:	cmp	lr, #0
   22314:	mov	r1, lr
   22318:	movwne	r1, #1
   2231c:	cmp	r2, r6
   22320:	orrge	r1, r1, #2
   22324:	orr	r0, r1, r0
   22328:	b	22330 <__assert_fail@plt+0x1049c>
   2232c:	mov	r0, #8
   22330:	add	r1, sp, #104	; 0x68
   22334:	cmp	r2, r6
   22338:	sub	r0, r0, #4
   2233c:	str	r7, [sp, #48]	; 0x30
   22340:	str	r4, [sp, #44]	; 0x2c
   22344:	str	r8, [sp, #84]	; 0x54
   22348:	add	r1, r1, #32
   2234c:	str	r0, [sp, #80]	; 0x50
   22350:	str	r1, [sp, #24]
   22354:	sub	r1, fp, #200	; 0xc8
   22358:	movwlt	r1, #0
   2235c:	cmp	r1, #0
   22360:	str	r1, [sp, #36]	; 0x24
   22364:	movwne	r1, #1
   22368:	str	r1, [sp, #40]	; 0x28
   2236c:	sub	r1, fp, #192	; 0xc0
   22370:	add	r1, r1, #16
   22374:	str	r1, [sp, #32]
   22378:	b	22828 <__assert_fail@plt+0x10994>
   2237c:	mov	r1, #0
   22380:	sub	r0, fp, #188	; 0xbc
   22384:	str	r6, [fp, #-192]	; 0xffffff40
   22388:	stm	r0, {r1, r5, r8}
   2238c:	ldr	r0, [sp, #32]
   22390:	str	r1, [r0]
   22394:	str	r1, [r0, #4]
   22398:	str	r1, [r0, #8]
   2239c:	add	r0, sp, #104	; 0x68
   223a0:	sub	r1, fp, #192	; 0xc0
   223a4:	bl	312c0 <__assert_fail@plt+0x1f42c>
   223a8:	mov	r9, r0
   223ac:	mov	r0, #0
   223b0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   223b4:	cmp	r9, #0
   223b8:	bne	226b8 <__assert_fail@plt+0x10824>
   223bc:	ldr	r0, [r6]
   223c0:	mov	r7, #0
   223c4:	cmp	r0, #0
   223c8:	beq	224a8 <__assert_fail@plt+0x10614>
   223cc:	b	23588 <__assert_fail@plt+0x116f4>
   223d0:	ldr	r1, [r7]
   223d4:	cmp	r1, #0
   223d8:	bne	234c8 <__assert_fail@plt+0x11634>
   223dc:	cmp	r3, #1
   223e0:	blt	224a8 <__assert_fail@plt+0x10614>
   223e4:	ldr	r0, [sp, #204]	; 0xcc
   223e8:	lsl	r4, r3, #2
   223ec:	add	sl, r3, #1
   223f0:	sub	r0, r0, #4
   223f4:	ldr	r1, [r0, r4]
   223f8:	cmp	r1, #0
   223fc:	ldrbne	r2, [r1, #52]	; 0x34
   22400:	tstne	r2, #16
   22404:	bne	2241c <__assert_fail@plt+0x10588>
   22408:	sub	sl, sl, #1
   2240c:	sub	r4, r4, #4
   22410:	cmp	sl, #2
   22414:	bge	223f4 <__assert_fail@plt+0x10560>
   22418:	b	224a8 <__assert_fail@plt+0x10614>
   2241c:	sub	r5, sl, #2
   22420:	add	r9, sp, #104	; 0x68
   22424:	mov	r0, r9
   22428:	mov	r2, r5
   2242c:	bl	2c40c <__assert_fail@plt+0x1a578>
   22430:	mov	r8, r0
   22434:	mov	r0, r7
   22438:	mov	r1, #0
   2243c:	mov	r2, r4
   22440:	bl	11cd8 <memset@plt>
   22444:	ldr	r0, [sp, #32]
   22448:	mov	r1, #0
   2244c:	str	r6, [fp, #-192]	; 0xffffff40
   22450:	str	r7, [fp, #-188]	; 0xffffff44
   22454:	str	r8, [fp, #-184]	; 0xffffff48
   22458:	str	r5, [fp, #-180]	; 0xffffff4c
   2245c:	str	r8, [sp, #56]	; 0x38
   22460:	mov	r4, r5
   22464:	str	r1, [r0]
   22468:	str	r1, [r0, #4]
   2246c:	str	r1, [r0, #8]
   22470:	mov	r0, r9
   22474:	sub	r1, fp, #192	; 0xc0
   22478:	bl	312c0 <__assert_fail@plt+0x1f42c>
   2247c:	mov	r9, r0
   22480:	mov	r0, #0
   22484:	bl	17b10 <__assert_fail@plt+0x5c7c>
   22488:	cmp	r9, #0
   2248c:	bne	226b0 <__assert_fail@plt+0x1081c>
   22490:	ldr	r0, [r6]
   22494:	mov	r3, r4
   22498:	cmp	r0, #0
   2249c:	beq	223d0 <__assert_fail@plt+0x1053c>
   224a0:	sub	r3, sl, #2
   224a4:	b	234c8 <__assert_fail@plt+0x11634>
   224a8:	mov	r0, r6
   224ac:	bl	17b10 <__assert_fail@plt+0x5c7c>
   224b0:	mov	r0, r7
   224b4:	bl	17b10 <__assert_fail@plt+0x5c7c>
   224b8:	ldr	r8, [sp, #84]	; 0x54
   224bc:	add	r0, sp, #104	; 0x68
   224c0:	bl	2c5b0 <__assert_fail@plt+0x1a71c>
   224c4:	ldr	r0, [fp, #-200]	; 0xffffff38
   224c8:	ldr	r4, [sp, #44]	; 0x2c
   224cc:	ldr	r7, [sp, #48]	; 0x30
   224d0:	mov	r9, #1
   224d4:	add	r6, r0, r8
   224d8:	cmp	r6, r4
   224dc:	str	r6, [fp, #-200]	; 0xffffff38
   224e0:	blt	2454c <__assert_fail@plt+0x126b8>
   224e4:	ldr	r5, [sp, #92]	; 0x5c
   224e8:	ldr	lr, [sp, #88]	; 0x58
   224ec:	cmp	r7, r6
   224f0:	bge	22828 <__assert_fail@plt+0x10994>
   224f4:	b	2454c <__assert_fail@plt+0x126b8>
   224f8:	ldrb	r0, [sp, #182]	; 0xb6
   224fc:	cmp	r0, #0
   22500:	bne	226f0 <__assert_fail@plt+0x1085c>
   22504:	cmp	r7, #10
   22508:	bne	22650 <__assert_fail@plt+0x107bc>
   2250c:	ldrb	r3, [sp, #181]	; 0xb5
   22510:	cmp	r3, #0
   22514:	movwne	r3, #2
   22518:	tst	r3, #1
   2251c:	bne	2264c <__assert_fail@plt+0x107b8>
   22520:	cmp	r3, #0
   22524:	beq	22650 <__assert_fail@plt+0x107bc>
   22528:	ands	r1, r3, #2
   2252c:	and	r0, r3, #4
   22530:	cmpne	r0, #0
   22534:	bne	22580 <__assert_fail@plt+0x106ec>
   22538:	cmp	r1, #0
   2253c:	bne	22590 <__assert_fail@plt+0x106fc>
   22540:	ldr	r6, [r4, #36]	; 0x24
   22544:	cmp	r0, #0
   22548:	beq	22650 <__assert_fail@plt+0x107bc>
   2254c:	ldr	r2, [r6, #40]	; 0x28
   22550:	sub	r0, fp, #196	; 0xc4
   22554:	mov	r1, r4
   22558:	mov	r6, lr
   2255c:	bl	2ae9c <__assert_fail@plt+0x19008>
   22560:	mov	lr, r6
   22564:	mov	r6, r0
   22568:	cmp	r6, #0
   2256c:	bne	229f4 <__assert_fail@plt+0x10b60>
   22570:	b	24344 <__assert_fail@plt+0x124b0>
   22574:	ldr	r8, [sp, #84]	; 0x54
   22578:	ldr	r1, [sp, #72]	; 0x48
   2257c:	b	23278 <__assert_fail@plt+0x113e4>
   22580:	ldr	r6, [r4, #48]	; 0x30
   22584:	cmp	r6, #0
   22588:	bne	229f4 <__assert_fail@plt+0x10b60>
   2258c:	b	24344 <__assert_fail@plt+0x124b0>
   22590:	ldr	r6, [r4, #44]	; 0x2c
   22594:	cmp	r6, #0
   22598:	bne	229f4 <__assert_fail@plt+0x10b60>
   2259c:	b	24344 <__assert_fail@plt+0x124b0>
   225a0:	mov	ip, r4
   225a4:	cmn	ip, #1
   225a8:	beq	224bc <__assert_fail@plt+0x10628>
   225ac:	b	23290 <__assert_fail@plt+0x113fc>
   225b0:	mov	r9, r0
   225b4:	mov	r0, r7
   225b8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   225bc:	cmp	r9, #0
   225c0:	beq	23588 <__assert_fail@plt+0x116f4>
   225c4:	b	226c0 <__assert_fail@plt+0x1082c>
   225c8:	ldr	r8, [sp, #84]	; 0x54
   225cc:	cmn	r7, #1
   225d0:	ble	2265c <__assert_fail@plt+0x107c8>
   225d4:	mov	r0, #1
   225d8:	mov	ip, lr
   225dc:	str	r0, [sp, #56]	; 0x38
   225e0:	ldr	r0, [sp, #52]	; 0x34
   225e4:	cmp	r0, #0
   225e8:	beq	226a0 <__assert_fail@plt+0x1080c>
   225ec:	b	22a38 <__assert_fail@plt+0x10ba4>
   225f0:	ldr	r0, [r6, #8]
   225f4:	cmp	r0, #1
   225f8:	blt	227d4 <__assert_fail@plt+0x10940>
   225fc:	ldr	r4, [sp, #188]	; 0xbc
   22600:	mov	r7, #0
   22604:	b	22738 <__assert_fail@plt+0x108a4>
   22608:	ldr	r1, [sp, #76]	; 0x4c
   2260c:	mov	r0, #0
   22610:	mov	r6, r7
   22614:	cmp	r7, r1
   22618:	ldr	r1, [sp, #100]	; 0x64
   2261c:	ldrblt	r0, [r1, r7]
   22620:	cmp	lr, #0
   22624:	ldrbne	r0, [lr, r0]
   22628:	ldrb	r0, [r5, r0]
   2262c:	cmp	r0, #0
   22630:	bne	22990 <__assert_fail@plt+0x10afc>
   22634:	b	24634 <__assert_fail@plt+0x127a0>
   22638:	ldr	r0, [sp, #192]	; 0xc0
   2263c:	and	r0, r0, #2
   22640:	eor	r3, r0, #10
   22644:	tst	r3, #1
   22648:	beq	22520 <__assert_fail@plt+0x1068c>
   2264c:	ldr	r6, [r4, #40]	; 0x28
   22650:	cmp	r6, #0
   22654:	bne	229f4 <__assert_fail@plt+0x10b60>
   22658:	b	24344 <__assert_fail@plt+0x124b0>
   2265c:	add	r0, sp, #104	; 0x68
   22660:	mov	r1, r6
   22664:	mov	r2, lr
   22668:	mov	r4, lr
   2266c:	bl	2c40c <__assert_fail@plt+0x1a578>
   22670:	clz	r1, r0
   22674:	cmp	r0, #0
   22678:	mov	ip, r4
   2267c:	mov	lr, r4
   22680:	lsr	r2, r1, #5
   22684:	ldr	r1, [sp, #52]	; 0x34
   22688:	movwne	r0, #1
   2268c:	mvneq	ip, #0
   22690:	str	r0, [sp, #56]	; 0x38
   22694:	orr	r1, r1, r2
   22698:	cmp	r1, #0
   2269c:	bne	22a38 <__assert_fail@plt+0x10ba4>
   226a0:	mov	ip, lr
   226a4:	cmn	ip, #1
   226a8:	beq	224bc <__assert_fail@plt+0x10628>
   226ac:	b	23290 <__assert_fail@plt+0x113fc>
   226b0:	str	r7, [sp, #20]
   226b4:	b	226c0 <__assert_fail@plt+0x1082c>
   226b8:	mov	r0, #0
   226bc:	str	r0, [sp, #20]
   226c0:	mov	r0, r6
   226c4:	bl	17b10 <__assert_fail@plt+0x5c7c>
   226c8:	ldr	r0, [sp, #20]
   226cc:	bl	17b10 <__assert_fail@plt+0x5c7c>
   226d0:	ldr	r7, [sp, #68]	; 0x44
   226d4:	ldr	r6, [sp, #64]	; 0x40
   226d8:	ldr	r8, [sp, #84]	; 0x54
   226dc:	cmp	r9, #0
   226e0:	beq	235b8 <__assert_fail@plt+0x11724>
   226e4:	cmp	r9, #1
   226e8:	beq	224bc <__assert_fail@plt+0x10628>
   226ec:	b	2454c <__assert_fail@plt+0x126b8>
   226f0:	mov	r0, r7
   226f4:	mov	r9, lr
   226f8:	bl	11cb4 <iswalnum@plt>
   226fc:	mov	lr, r9
   22700:	cmp	r7, #95	; 0x5f
   22704:	beq	2264c <__assert_fail@plt+0x107b8>
   22708:	cmp	r0, #0
   2270c:	beq	22504 <__assert_fail@plt+0x10670>
   22710:	b	2264c <__assert_fail@plt+0x107b8>
   22714:	ldr	r0, [sp, #236]	; 0xec
   22718:	lsl	r1, r9, #3
   2271c:	bl	36fe4 <__assert_fail@plt+0x25150>
   22720:	cmp	r0, #0
   22724:	beq	22820 <__assert_fail@plt+0x1098c>
   22728:	str	r0, [sp, #236]	; 0xec
   2272c:	lsl	r0, r9, #1
   22730:	str	r0, [sp, #232]	; 0xe8
   22734:	b	22784 <__assert_fail@plt+0x108f0>
   22738:	ldr	r1, [r6, #12]
   2273c:	ldr	r5, [r1, r7, lsl #2]
   22740:	ldr	r1, [r4]
   22744:	add	r2, r1, r5, lsl #3
   22748:	ldrb	r2, [r2, #4]
   2274c:	cmp	r2, #8
   22750:	bne	227c8 <__assert_fail@plt+0x10934>
   22754:	ldr	r1, [r1, r5, lsl #3]
   22758:	cmp	r1, #31
   2275c:	bgt	227c8 <__assert_fail@plt+0x10934>
   22760:	ldr	r2, [r4, #80]	; 0x50
   22764:	mov	r3, #1
   22768:	tst	r2, r3, lsl r1
   2276c:	beq	227c8 <__assert_fail@plt+0x10934>
   22770:	ldr	r9, [sp, #228]	; 0xe4
   22774:	ldr	r0, [sp, #232]	; 0xe8
   22778:	mov	r8, lr
   2277c:	cmp	r9, r0
   22780:	beq	22714 <__assert_fail@plt+0x10880>
   22784:	mov	r0, #1
   22788:	mov	r1, #24
   2278c:	bl	36f60 <__assert_fail@plt+0x250cc>
   22790:	ldr	r1, [sp, #228]	; 0xe4
   22794:	ldr	r2, [sp, #236]	; 0xec
   22798:	str	r0, [r2, r1, lsl #2]
   2279c:	ldr	r0, [sp, #236]	; 0xec
   227a0:	ldr	r0, [r0, r1, lsl #2]
   227a4:	cmp	r0, #0
   227a8:	beq	22820 <__assert_fail@plt+0x1098c>
   227ac:	add	r1, r1, #1
   227b0:	str	r5, [r0, #4]
   227b4:	mov	lr, r8
   227b8:	str	r1, [sp, #228]	; 0xe4
   227bc:	mov	r1, #0
   227c0:	str	r1, [r0]
   227c4:	ldr	r0, [r6, #8]
   227c8:	add	r7, r7, #1
   227cc:	cmp	r7, r0
   227d0:	blt	22738 <__assert_fail@plt+0x108a4>
   227d4:	mov	sl, #0
   227d8:	str	sl, [fp, #-196]	; 0xffffff3c
   227dc:	ldrb	r0, [r6, #52]	; 0x34
   227e0:	tst	r0, #64	; 0x40
   227e4:	beq	22a18 <__assert_fail@plt+0x10b84>
   227e8:	add	r1, r6, #4
   227ec:	add	r0, sp, #104	; 0x68
   227f0:	mov	r4, lr
   227f4:	bl	2c840 <__assert_fail@plt+0x1a9ac>
   227f8:	mov	sl, #0
   227fc:	mov	lr, r4
   22800:	cmp	r0, #0
   22804:	str	r0, [fp, #-196]	; 0xffffff3c
   22808:	beq	22a18 <__assert_fail@plt+0x10b84>
   2280c:	ldr	r8, [sp, #84]	; 0x54
   22810:	mov	ip, r0
   22814:	cmn	ip, #1
   22818:	beq	224bc <__assert_fail@plt+0x10628>
   2281c:	b	23290 <__assert_fail@plt+0x113fc>
   22820:	mov	ip, #12
   22824:	b	23298 <__assert_fail@plt+0x11404>
   22828:	ldr	r1, [sp, #80]	; 0x50
   2282c:	cmp	r1, #4
   22830:	bhi	228a0 <__assert_fail@plt+0x10a0c>
   22834:	add	r0, pc, #0
   22838:	ldr	pc, [r0, r1, lsl #2]
   2283c:	andeq	r2, r2, r0, asr r8
   22840:	andeq	r2, r2, r0, asr r8
   22844:	andeq	r2, r2, r8, lsr #18
   22848:	andeq	r2, r2, r8, asr r9
   2284c:	muleq	r2, r0, r9
   22850:	mov	r9, #1
   22854:	cmp	r6, r4
   22858:	blt	2454c <__assert_fail@plt+0x126b8>
   2285c:	cmp	lr, #0
   22860:	beq	233d8 <__assert_fail@plt+0x11544>
   22864:	ldr	r1, [sp, #76]	; 0x4c
   22868:	mov	r0, #0
   2286c:	cmp	r6, r1
   22870:	ldrlt	r0, [sp, #100]	; 0x64
   22874:	ldrblt	r0, [r0, r6]
   22878:	ldrb	r0, [lr, r0]
   2287c:	ldrb	r0, [r5, r0]
   22880:	cmp	r0, #0
   22884:	bne	22990 <__assert_fail@plt+0x10afc>
   22888:	sub	r0, r6, #1
   2288c:	cmp	r6, r4
   22890:	mov	r6, r0
   22894:	str	r0, [fp, #-200]	; 0xffffff38
   22898:	bgt	22868 <__assert_fail@plt+0x109d4>
   2289c:	b	2454c <__assert_fail@plt+0x126b8>
   228a0:	ldr	r0, [sp, #128]	; 0x80
   228a4:	ldr	r2, [sp, #136]	; 0x88
   228a8:	sub	r1, r6, r0
   228ac:	cmp	r1, r2
   228b0:	bcs	228f4 <__assert_fail@plt+0x10a60>
   228b4:	ldr	r3, [sp, #132]	; 0x84
   228b8:	mov	r2, #0
   228bc:	cmp	r1, r3
   228c0:	ldrcc	r2, [sp, #108]	; 0x6c
   228c4:	ldrbcc	r2, [r2, r1]
   228c8:	ldrb	r1, [r5, r2]
   228cc:	cmp	r1, #0
   228d0:	bne	22990 <__assert_fail@plt+0x10afc>
   228d4:	add	r6, r6, r8
   228d8:	mov	r9, #1
   228dc:	cmp	r6, r4
   228e0:	str	r6, [fp, #-200]	; 0xffffff38
   228e4:	blt	2454c <__assert_fail@plt+0x126b8>
   228e8:	cmp	r6, r7
   228ec:	ble	228a4 <__assert_fail@plt+0x10a10>
   228f0:	b	2454c <__assert_fail@plt+0x126b8>
   228f4:	ldr	r2, [fp, #24]
   228f8:	add	r0, sp, #104	; 0x68
   228fc:	mov	r1, r6
   22900:	bl	2b99c <__assert_fail@plt+0x19b08>
   22904:	cmp	r0, #0
   22908:	bne	24354 <__assert_fail@plt+0x124c0>
   2290c:	ldr	r0, [sp, #128]	; 0x80
   22910:	ldr	r6, [fp, #-200]	; 0xffffff38
   22914:	ldr	r5, [sp, #92]	; 0x5c
   22918:	ldr	r7, [sp, #48]	; 0x30
   2291c:	ldr	r4, [sp, #44]	; 0x2c
   22920:	sub	r1, r6, r0
   22924:	b	228b4 <__assert_fail@plt+0x10a20>
   22928:	ldr	r1, [sp, #100]	; 0x64
   2292c:	cmp	r6, r7
   22930:	bge	22988 <__assert_fail@plt+0x10af4>
   22934:	ldrb	r0, [r1, r6]
   22938:	ldrb	r0, [r5, r0]
   2293c:	cmp	r0, #0
   22940:	bne	22988 <__assert_fail@plt+0x10af4>
   22944:	add	r6, r6, #1
   22948:	cmp	r6, r7
   2294c:	str	r6, [fp, #-200]	; 0xffffff38
   22950:	blt	22934 <__assert_fail@plt+0x10aa0>
   22954:	b	22988 <__assert_fail@plt+0x10af4>
   22958:	cmp	r6, r7
   2295c:	bge	22988 <__assert_fail@plt+0x10af4>
   22960:	ldr	r1, [sp, #100]	; 0x64
   22964:	ldrb	r0, [r1, r6]
   22968:	ldrb	r0, [lr, r0]
   2296c:	ldrb	r0, [r5, r0]
   22970:	cmp	r0, #0
   22974:	bne	22988 <__assert_fail@plt+0x10af4>
   22978:	add	r6, r6, #1
   2297c:	cmp	r6, r7
   22980:	str	r6, [fp, #-200]	; 0xffffff38
   22984:	blt	22964 <__assert_fail@plt+0x10ad0>
   22988:	cmp	r6, r7
   2298c:	beq	22608 <__assert_fail@plt+0x10774>
   22990:	ldr	r2, [fp, #24]
   22994:	add	r0, sp, #104	; 0x68
   22998:	mov	r1, r6
   2299c:	bl	2b99c <__assert_fail@plt+0x19b08>
   229a0:	cmp	r0, #0
   229a4:	bne	24354 <__assert_fail@plt+0x124c0>
   229a8:	ldr	r0, [sp, #60]	; 0x3c
   229ac:	cmp	r0, #1
   229b0:	ldrne	r0, [sp, #132]	; 0x84
   229b4:	cmpne	r0, #0
   229b8:	bne	232fc <__assert_fail@plt+0x11468>
   229bc:	mov	r0, #0
   229c0:	str	r0, [sp, #212]	; 0xd4
   229c4:	str	r0, [sp, #224]	; 0xe0
   229c8:	str	r0, [sp, #208]	; 0xd0
   229cc:	str	r0, [fp, #-196]	; 0xffffff3c
   229d0:	ldr	r4, [sp, #188]	; 0xbc
   229d4:	ldr	lr, [sp, #144]	; 0x90
   229d8:	ldr	r6, [r4, #36]	; 0x24
   229dc:	ldrsb	r0, [r6, #52]	; 0x34
   229e0:	cmn	r0, #1
   229e4:	ble	23310 <__assert_fail@plt+0x1147c>
   229e8:	ldr	r5, [sp, #40]	; 0x28
   229ec:	cmp	r6, #0
   229f0:	beq	24344 <__assert_fail@plt+0x124b0>
   229f4:	ldr	r0, [sp, #204]	; 0xcc
   229f8:	mov	sl, r5
   229fc:	cmp	r0, #0
   22a00:	beq	22a18 <__assert_fail@plt+0x10b84>
   22a04:	str	r6, [r0, lr, lsl #2]
   22a08:	mov	sl, r5
   22a0c:	ldr	r0, [r4, #76]	; 0x4c
   22a10:	cmp	r0, #0
   22a14:	bne	225f0 <__assert_fail@plt+0x1075c>
   22a18:	ldrb	r0, [r6, #52]	; 0x34
   22a1c:	sxtb	r7, r0
   22a20:	tst	r0, #16
   22a24:	bne	225c8 <__assert_fail@plt+0x10734>
   22a28:	ldr	r8, [sp, #84]	; 0x54
   22a2c:	mov	r0, #0
   22a30:	mvn	ip, #0
   22a34:	str	r0, [sp, #56]	; 0x38
   22a38:	ldr	r4, [sp, #144]	; 0x90
   22a3c:	ldr	r0, [sp, #160]	; 0xa0
   22a40:	cmp	r0, r4
   22a44:	ble	23264 <__assert_fail@plt+0x113d0>
   22a48:	ldr	r1, [sp, #36]	; 0x24
   22a4c:	b	2313c <__assert_fail@plt+0x112a8>
   22a50:	ldr	r0, [fp, #-196]	; 0xffffff3c
   22a54:	cmp	r0, #0
   22a58:	bne	24344 <__assert_fail@plt+0x124b0>
   22a5c:	ldr	r0, [sp, #56]	; 0x38
   22a60:	ldr	r1, [sp, #52]	; 0x34
   22a64:	clz	r0, r0
   22a68:	lsr	r0, r0, #5
   22a6c:	orr	r0, r1, r0
   22a70:	cmp	r0, #1
   22a74:	bne	22574 <__assert_fail@plt+0x106e0>
   22a78:	ldr	r0, [sp, #204]	; 0xcc
   22a7c:	cmp	r0, #0
   22a80:	beq	22574 <__assert_fail@plt+0x106e0>
   22a84:	mov	r5, lr
   22a88:	b	22af4 <__assert_fail@plt+0x10c60>
   22a8c:	ldr	r4, [sp, #144]	; 0x90
   22a90:	ldr	r8, [sp, #84]	; 0x54
   22a94:	cmn	r7, #1
   22a98:	bgt	22ac0 <__assert_fail@plt+0x10c2c>
   22a9c:	add	r0, sp, #104	; 0x68
   22aa0:	mov	r1, r6
   22aa4:	mov	r2, r4
   22aa8:	mov	r9, ip
   22aac:	mov	r5, lr
   22ab0:	bl	2c40c <__assert_fail@plt+0x1a578>
   22ab4:	mov	lr, r5
   22ab8:	cmp	r0, #0
   22abc:	beq	22b5c <__assert_fail@plt+0x10cc8>
   22ac0:	ldr	r0, [sp, #52]	; 0x34
   22ac4:	cmp	r0, #0
   22ac8:	beq	225a0 <__assert_fail@plt+0x1070c>
   22acc:	mov	r0, #1
   22ad0:	mov	r1, #0
   22ad4:	mov	ip, r4
   22ad8:	str	r0, [sp, #56]	; 0x38
   22adc:	ldr	r0, [sp, #160]	; 0xa0
   22ae0:	cmp	r0, r4
   22ae4:	bgt	2313c <__assert_fail@plt+0x112a8>
   22ae8:	b	23278 <__assert_fail@plt+0x113e4>
   22aec:	ldr	r0, [sp, #204]	; 0xcc
   22af0:	mov	ip, r4
   22af4:	ldr	r2, [sp, #144]	; 0x90
   22af8:	ldr	r1, [sp, #208]	; 0xd0
   22afc:	add	r2, r2, #1
   22b00:	sub	r3, r2, #1
   22b04:	cmp	r3, r1
   22b08:	bge	2326c <__assert_fail@plt+0x113d8>
   22b0c:	str	r2, [sp, #144]	; 0x90
   22b10:	ldr	r3, [r0, r2, lsl #2]
   22b14:	add	r2, r2, #1
   22b18:	cmp	r3, #0
   22b1c:	beq	22b00 <__assert_fail@plt+0x10c6c>
   22b20:	sub	r0, fp, #196	; 0xc4
   22b24:	add	r1, sp, #104	; 0x68
   22b28:	mov	r2, #0
   22b2c:	mov	r4, ip
   22b30:	bl	2d488 <__assert_fail@plt+0x1b5f4>
   22b34:	cmp	r0, #0
   22b38:	mov	r6, r0
   22b3c:	ldreq	r0, [fp, #-196]	; 0xffffff3c
   22b40:	cmpeq	r0, #0
   22b44:	beq	22aec <__assert_fail@plt+0x10c58>
   22b48:	cmp	r6, #0
   22b4c:	mov	ip, r4
   22b50:	mov	lr, r5
   22b54:	bne	23224 <__assert_fail@plt+0x11390>
   22b58:	b	22574 <__assert_fail@plt+0x106e0>
   22b5c:	ldr	r1, [sp, #72]	; 0x48
   22b60:	mov	ip, r9
   22b64:	ldr	r0, [sp, #160]	; 0xa0
   22b68:	cmp	r0, r4
   22b6c:	bgt	2313c <__assert_fail@plt+0x112a8>
   22b70:	b	23278 <__assert_fail@plt+0x113e4>
   22b74:	add	r1, r4, #2
   22b78:	add	r0, sp, #104	; 0x68
   22b7c:	mov	r4, ip
   22b80:	mov	r5, lr
   22b84:	bl	2d278 <__assert_fail@plt+0x1b3e4>
   22b88:	cmp	r0, #0
   22b8c:	str	r0, [fp, #-196]	; 0xffffff3c
   22b90:	bne	24344 <__assert_fail@plt+0x124b0>
   22b94:	ldrb	r7, [r8, #52]	; 0x34
   22b98:	mov	lr, r5
   22b9c:	mov	ip, r4
   22ba0:	tst	r7, #32
   22ba4:	beq	2317c <__assert_fail@plt+0x112e8>
   22ba8:	ldr	r0, [r8, #8]
   22bac:	cmp	r0, #1
   22bb0:	blt	22fe4 <__assert_fail@plt+0x11150>
   22bb4:	ldr	r0, [sp, #188]	; 0xbc
   22bb8:	mov	r6, #0
   22bbc:	str	r0, [sp, #20]
   22bc0:	stmib	sp, {sl, lr}
   22bc4:	str	r8, [sp, #12]
   22bc8:	b	22fa8 <__assert_fail@plt+0x11114>
   22bcc:	movw	r0, #65280	; 0xff00
   22bd0:	movt	r0, #3
   22bd4:	tst	r7, r0
   22bd8:	beq	22cfc <__assert_fail@plt+0x10e68>
   22bdc:	ldr	r0, [sp, #144]	; 0x90
   22be0:	cmn	r0, #1
   22be4:	ble	22c28 <__assert_fail@plt+0x10d94>
   22be8:	ldr	r1, [sp, #152]	; 0x98
   22bec:	mov	r8, sl
   22bf0:	cmp	r1, r0
   22bf4:	beq	22f10 <__assert_fail@plt+0x1107c>
   22bf8:	ldr	r1, [sp, #184]	; 0xb8
   22bfc:	cmp	r1, #2
   22c00:	blt	22c40 <__assert_fail@plt+0x10dac>
   22c04:	ldr	r1, [sp, #112]	; 0x70
   22c08:	mov	sl, r8
   22c0c:	ldr	r4, [r1, r0, lsl #2]
   22c10:	cmn	r4, #1
   22c14:	bne	22c7c <__assert_fail@plt+0x10de8>
   22c18:	sub	r2, r0, #1
   22c1c:	cmp	r0, #0
   22c20:	mov	r0, r2
   22c24:	bgt	22c0c <__assert_fail@plt+0x10d78>
   22c28:	ldr	r1, [sp, #164]	; 0xa4
   22c2c:	and	r0, r1, #1
   22c30:	tst	r7, #1024	; 0x400
   22c34:	eor	r2, r0, #1
   22c38:	bne	22cb0 <__assert_fail@plt+0x10e1c>
   22c3c:	b	22cb8 <__assert_fail@plt+0x10e24>
   22c40:	ldr	r1, [sp, #108]	; 0x6c
   22c44:	ldr	r2, [sp, #172]	; 0xac
   22c48:	mov	sl, r8
   22c4c:	ldrb	r0, [r1, r0]
   22c50:	ubfx	r1, r0, #5, #3
   22c54:	and	r5, r0, #31
   22c58:	ldr	r3, [r2, r1, lsl #2]
   22c5c:	mov	r1, #1
   22c60:	mov	r2, #0
   22c64:	tst	r3, r1, lsl r5
   22c68:	bne	22cb8 <__assert_fail@plt+0x10e24>
   22c6c:	mov	r1, #0
   22c70:	cmp	r0, #10
   22c74:	beq	22c94 <__assert_fail@plt+0x10e00>
   22c78:	b	22ca0 <__assert_fail@plt+0x10e0c>
   22c7c:	ldrb	r0, [sp, #182]	; 0xb6
   22c80:	cmp	r0, #0
   22c84:	bne	22f44 <__assert_fail@plt+0x110b0>
   22c88:	mov	r1, #0
   22c8c:	cmp	r4, #10
   22c90:	bne	22ca0 <__assert_fail@plt+0x10e0c>
   22c94:	ldrb	r1, [sp, #181]	; 0xb5
   22c98:	cmp	r1, #0
   22c9c:	movwne	r1, #2
   22ca0:	and	r0, r1, #1
   22ca4:	tst	r7, #1024	; 0x400
   22ca8:	eor	r2, r0, #1
   22cac:	beq	22cb8 <__assert_fail@plt+0x10e24>
   22cb0:	cmp	r0, #0
   22cb4:	beq	22fd0 <__assert_fail@plt+0x1113c>
   22cb8:	ldr	r0, [sp, #20]
   22cbc:	ldr	r4, [sp, #16]
   22cc0:	cmp	r2, #0
   22cc4:	ldr	r0, [r0]
   22cc8:	add	r0, r0, r4, lsl #3
   22ccc:	ldr	r0, [r0, #4]
   22cd0:	bne	22cdc <__assert_fail@plt+0x10e48>
   22cd4:	ands	r2, r0, #2048	; 0x800
   22cd8:	bne	22fd0 <__assert_fail@plt+0x1113c>
   22cdc:	tst	r1, #2
   22ce0:	bne	22cec <__assert_fail@plt+0x10e58>
   22ce4:	ands	r2, r0, #8192	; 0x2000
   22ce8:	bne	22fd0 <__assert_fail@plt+0x1113c>
   22cec:	tst	r1, #8
   22cf0:	bne	22cfc <__assert_fail@plt+0x10e68>
   22cf4:	ands	r0, r0, #32768	; 0x8000
   22cf8:	bne	22fd0 <__assert_fail@plt+0x1113c>
   22cfc:	ldr	r3, [sp, #144]	; 0x90
   22d00:	ldr	r0, [sp, #20]
   22d04:	ldr	r1, [sp, #16]
   22d08:	add	r2, sp, #104	; 0x68
   22d0c:	mov	r5, ip
   22d10:	bl	2eff0 <__assert_fail@plt+0x1d15c>
   22d14:	ldmib	sp, {sl, lr}
   22d18:	mov	ip, r5
   22d1c:	cmp	r0, #0
   22d20:	beq	22fd0 <__assert_fail@plt+0x1113c>
   22d24:	ldr	r1, [sp, #224]	; 0xe0
   22d28:	cmp	r1, r0
   22d2c:	movlt	r1, r0
   22d30:	str	r1, [sp, #224]	; 0xe0
   22d34:	ldr	r3, [sp, #144]	; 0x90
   22d38:	ldr	r2, [sp, #140]	; 0x8c
   22d3c:	ldr	r1, [sp, #152]	; 0x98
   22d40:	ldr	r4, [sp, #208]	; 0xd0
   22d44:	add	r3, r3, r0
   22d48:	cmp	r2, r3
   22d4c:	mov	r8, r3
   22d50:	cmple	r2, r1
   22d54:	blt	22d68 <__assert_fail@plt+0x10ed4>
   22d58:	ldr	r0, [sp, #132]	; 0x84
   22d5c:	cmp	r0, r3
   22d60:	cmple	r0, r1
   22d64:	bge	22d80 <__assert_fail@plt+0x10eec>
   22d68:	add	r1, r3, #1
   22d6c:	add	r0, sp, #104	; 0x68
   22d70:	bl	2d278 <__assert_fail@plt+0x1b3e4>
   22d74:	mov	r3, r8
   22d78:	cmp	r0, #0
   22d7c:	bne	230c4 <__assert_fail@plt+0x11230>
   22d80:	cmp	r3, r4
   22d84:	ble	22dac <__assert_fail@plt+0x10f18>
   22d88:	sub	r0, r3, r4
   22d8c:	mov	r1, #0
   22d90:	lsl	r2, r0, #2
   22d94:	ldr	r0, [sp, #204]	; 0xcc
   22d98:	add	r0, r0, r4, lsl #2
   22d9c:	add	r0, r0, #4
   22da0:	bl	11cd8 <memset@plt>
   22da4:	mov	r3, r8
   22da8:	str	r8, [sp, #208]	; 0xd0
   22dac:	mov	r0, #0
   22db0:	ldr	r1, [sp, #20]
   22db4:	ldr	r2, [sp, #16]
   22db8:	str	r0, [fp, #-48]	; 0xffffffd0
   22dbc:	ldr	r0, [sp, #204]	; 0xcc
   22dc0:	ldr	r7, [r0, r3, lsl #2]
   22dc4:	ldr	r0, [r1, #12]
   22dc8:	ldr	r1, [r1, #24]
   22dcc:	ldr	r0, [r0, r2, lsl #2]
   22dd0:	cmp	r7, #0
   22dd4:	add	r0, r0, r0, lsl #1
   22dd8:	add	r2, r1, r0, lsl #2
   22ddc:	beq	22e00 <__assert_fail@plt+0x10f6c>
   22de0:	ldr	r1, [r7, #40]	; 0x28
   22de4:	sub	r0, fp, #192	; 0xc0
   22de8:	bl	2d6dc <__assert_fail@plt+0x1b848>
   22dec:	mov	r3, r8
   22df0:	cmp	r0, #0
   22df4:	str	r0, [fp, #-48]	; 0xffffffd0
   22df8:	beq	22e10 <__assert_fail@plt+0x10f7c>
   22dfc:	b	230c8 <__assert_fail@plt+0x11234>
   22e00:	vldr	d16, [r2]
   22e04:	ldr	r0, [r2, #8]
   22e08:	str	r0, [fp, #-184]	; 0xffffff48
   22e0c:	vstr	d16, [fp, #-192]	; 0xffffff40
   22e10:	cmp	r3, #0
   22e14:	ble	22e58 <__assert_fail@plt+0x10fc4>
   22e18:	ldr	r1, [sp, #152]	; 0x98
   22e1c:	sub	r0, r3, #1
   22e20:	cmp	r1, r0
   22e24:	beq	22f34 <__assert_fail@plt+0x110a0>
   22e28:	ldr	r1, [sp, #184]	; 0xb8
   22e2c:	cmp	r1, #2
   22e30:	blt	22e60 <__assert_fail@plt+0x10fcc>
   22e34:	ldr	r0, [sp, #112]	; 0x70
   22e38:	mov	r1, r3
   22e3c:	sub	r0, r0, #4
   22e40:	ldr	r4, [r0, r1, lsl #2]
   22e44:	cmn	r4, #1
   22e48:	bne	22e94 <__assert_fail@plt+0x11000>
   22e4c:	sub	r1, r1, #1
   22e50:	cmp	r1, #0
   22e54:	bgt	22e40 <__assert_fail@plt+0x10fac>
   22e58:	ldr	r3, [sp, #164]	; 0xa4
   22e5c:	b	22eb8 <__assert_fail@plt+0x11024>
   22e60:	ldr	r1, [sp, #108]	; 0x6c
   22e64:	ldr	r2, [sp, #172]	; 0xac
   22e68:	mov	r3, #1
   22e6c:	ldrb	r0, [r1, r0]
   22e70:	ubfx	r1, r0, #5, #3
   22e74:	ldr	r1, [r2, r1, lsl #2]
   22e78:	and	r2, r0, #31
   22e7c:	tst	r1, r3, lsl r2
   22e80:	bne	22eb8 <__assert_fail@plt+0x11024>
   22e84:	mov	r3, #0
   22e88:	cmp	r0, #10
   22e8c:	beq	22eac <__assert_fail@plt+0x11018>
   22e90:	b	22eb8 <__assert_fail@plt+0x11024>
   22e94:	ldrb	r0, [sp, #182]	; 0xb6
   22e98:	cmp	r0, #0
   22e9c:	bne	22f78 <__assert_fail@plt+0x110e4>
   22ea0:	mov	r3, #0
   22ea4:	cmp	r4, #10
   22ea8:	bne	22eb8 <__assert_fail@plt+0x11024>
   22eac:	ldrb	r3, [sp, #181]	; 0xb5
   22eb0:	cmp	r3, #0
   22eb4:	movwne	r3, #2
   22eb8:	ldr	r1, [sp, #20]
   22ebc:	sub	r0, fp, #48	; 0x30
   22ec0:	sub	r2, fp, #192	; 0xc0
   22ec4:	bl	2ae9c <__assert_fail@plt+0x19008>
   22ec8:	ldr	r1, [sp, #204]	; 0xcc
   22ecc:	mov	r2, r8
   22ed0:	cmp	r7, #0
   22ed4:	str	r0, [r1, r8, lsl #2]
   22ed8:	beq	22ee8 <__assert_fail@plt+0x11054>
   22edc:	ldr	r0, [fp, #-184]	; 0xffffff48
   22ee0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   22ee4:	mov	r2, r8
   22ee8:	ldr	r0, [sp, #204]	; 0xcc
   22eec:	mov	ip, r5
   22ef0:	ldr	r0, [r0, r2, lsl #2]
   22ef4:	ldmib	sp, {sl, lr}
   22ef8:	cmp	r0, #0
   22efc:	bne	22fd0 <__assert_fail@plt+0x1113c>
   22f00:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22f04:	cmp	r0, #0
   22f08:	beq	22fd0 <__assert_fail@plt+0x1113c>
   22f0c:	b	230d0 <__assert_fail@plt+0x1123c>
   22f10:	ldr	r0, [sp, #192]	; 0xc0
   22f14:	mov	sl, r8
   22f18:	and	r0, r0, #2
   22f1c:	eor	r1, r0, #10
   22f20:	and	r0, r1, #1
   22f24:	tst	r7, #1024	; 0x400
   22f28:	eor	r2, r0, #1
   22f2c:	bne	22cb0 <__assert_fail@plt+0x10e1c>
   22f30:	b	22cb8 <__assert_fail@plt+0x10e24>
   22f34:	ldr	r0, [sp, #192]	; 0xc0
   22f38:	and	r0, r0, #2
   22f3c:	eor	r3, r0, #10
   22f40:	b	22eb8 <__assert_fail@plt+0x11024>
   22f44:	mov	r0, r4
   22f48:	mov	r5, ip
   22f4c:	bl	11cb4 <iswalnum@plt>
   22f50:	mov	r1, #1
   22f54:	mov	r2, #0
   22f58:	cmp	r4, #95	; 0x5f
   22f5c:	beq	22f98 <__assert_fail@plt+0x11104>
   22f60:	ldr	lr, [sp, #8]
   22f64:	cmp	r0, #0
   22f68:	mov	ip, r5
   22f6c:	mov	sl, r8
   22f70:	beq	22c88 <__assert_fail@plt+0x10df4>
   22f74:	b	22cb8 <__assert_fail@plt+0x10e24>
   22f78:	mov	r0, r4
   22f7c:	bl	11cb4 <iswalnum@plt>
   22f80:	mov	r3, #1
   22f84:	cmp	r4, #95	; 0x5f
   22f88:	beq	22eb8 <__assert_fail@plt+0x11024>
   22f8c:	cmp	r0, #0
   22f90:	beq	22ea0 <__assert_fail@plt+0x1100c>
   22f94:	b	22eb8 <__assert_fail@plt+0x11024>
   22f98:	ldr	lr, [sp, #8]
   22f9c:	mov	ip, r5
   22fa0:	mov	sl, r8
   22fa4:	b	22cb8 <__assert_fail@plt+0x10e24>
   22fa8:	ldr	r0, [r8, #12]
   22fac:	ldr	r2, [r0, r6, lsl #2]
   22fb0:	ldr	r0, [sp, #20]
   22fb4:	ldr	r0, [r0]
   22fb8:	mov	r1, r2
   22fbc:	str	r2, [sp, #16]
   22fc0:	add	r0, r0, r2, lsl #3
   22fc4:	ldr	r7, [r0, #4]
   22fc8:	tst	r7, #1048576	; 0x100000
   22fcc:	bne	22bcc <__assert_fail@plt+0x10d38>
   22fd0:	ldr	r8, [sp, #12]
   22fd4:	add	r6, r6, #1
   22fd8:	ldr	r0, [r8, #8]
   22fdc:	cmp	r6, r0
   22fe0:	blt	22fa8 <__assert_fail@plt+0x11114>
   22fe4:	mov	r0, #0
   22fe8:	str	r0, [fp, #-196]	; 0xffffff3c
   22fec:	b	2317c <__assert_fail@plt+0x112e8>
   22ff0:	ldr	r0, [sp, #144]	; 0x90
   22ff4:	mov	r5, r8
   22ff8:	cmp	r0, #0
   22ffc:	ble	23044 <__assert_fail@plt+0x111b0>
   23000:	ldr	r2, [sp, #152]	; 0x98
   23004:	sub	r1, r0, #1
   23008:	mov	r8, sl
   2300c:	cmp	r2, r1
   23010:	beq	230ec <__assert_fail@plt+0x11258>
   23014:	ldr	r2, [sp, #184]	; 0xb8
   23018:	cmp	r2, #2
   2301c:	blt	2304c <__assert_fail@plt+0x111b8>
   23020:	ldr	r1, [sp, #112]	; 0x70
   23024:	mov	sl, r8
   23028:	sub	r1, r1, #4
   2302c:	ldr	r4, [r1, r0, lsl #2]
   23030:	cmn	r4, #1
   23034:	bne	23084 <__assert_fail@plt+0x111f0>
   23038:	sub	r0, r0, #1
   2303c:	cmp	r0, #0
   23040:	bgt	2302c <__assert_fail@plt+0x11198>
   23044:	ldr	r1, [sp, #164]	; 0xa4
   23048:	b	230a8 <__assert_fail@plt+0x11214>
   2304c:	ldr	r0, [sp, #108]	; 0x6c
   23050:	ldr	r2, [sp, #172]	; 0xac
   23054:	mov	sl, r8
   23058:	ldrb	r0, [r0, r1]
   2305c:	ubfx	r1, r0, #5, #3
   23060:	and	r3, r0, #31
   23064:	ldr	r2, [r2, r1, lsl #2]
   23068:	mov	r1, #1
   2306c:	tst	r2, r1, lsl r3
   23070:	bne	230a8 <__assert_fail@plt+0x11214>
   23074:	mov	r1, #0
   23078:	cmp	r0, #10
   2307c:	beq	2309c <__assert_fail@plt+0x11208>
   23080:	b	230a8 <__assert_fail@plt+0x11214>
   23084:	ldrb	r0, [sp, #182]	; 0xb6
   23088:	cmp	r0, #0
   2308c:	bne	230f8 <__assert_fail@plt+0x11264>
   23090:	mov	r1, #0
   23094:	cmp	r4, #10
   23098:	bne	230a8 <__assert_fail@plt+0x11214>
   2309c:	ldrb	r1, [sp, #181]	; 0xb5
   230a0:	cmp	r1, #0
   230a4:	movwne	r1, #2
   230a8:	bfi	r6, r1, #8, #1
   230ac:	mov	r8, r5
   230b0:	ldr	r6, [r7, r6, lsl #2]
   230b4:	ldr	r0, [sp, #204]	; 0xcc
   230b8:	cmp	r0, #0
   230bc:	bne	231f8 <__assert_fail@plt+0x11364>
   230c0:	b	2321c <__assert_fail@plt+0x11388>
   230c4:	str	r0, [fp, #-48]	; 0xffffffd0
   230c8:	ldmib	sp, {sl, lr}
   230cc:	mov	ip, r5
   230d0:	ldr	r8, [sp, #12]
   230d4:	str	r0, [fp, #-196]	; 0xffffff3c
   230d8:	mov	r6, #0
   230dc:	ldr	r0, [sp, #204]	; 0xcc
   230e0:	cmp	r0, #0
   230e4:	bne	231f8 <__assert_fail@plt+0x11364>
   230e8:	b	2321c <__assert_fail@plt+0x11388>
   230ec:	mov	r1, #10
   230f0:	mov	sl, r8
   230f4:	b	230a8 <__assert_fail@plt+0x11214>
   230f8:	mov	r0, r4
   230fc:	str	lr, [sp, #8]
   23100:	str	ip, [sp, #20]
   23104:	bl	11cb4 <iswalnum@plt>
   23108:	mov	r1, #1
   2310c:	cmp	r4, #95	; 0x5f
   23110:	beq	2312c <__assert_fail@plt+0x11298>
   23114:	ldr	ip, [sp, #20]
   23118:	ldr	lr, [sp, #8]
   2311c:	cmp	r0, #0
   23120:	mov	sl, r8
   23124:	beq	23090 <__assert_fail@plt+0x111fc>
   23128:	b	230a8 <__assert_fail@plt+0x11214>
   2312c:	ldr	ip, [sp, #20]
   23130:	ldr	lr, [sp, #8]
   23134:	mov	sl, r8
   23138:	b	230a8 <__assert_fail@plt+0x11214>
   2313c:	str	r1, [sp, #72]	; 0x48
   23140:	ldr	r1, [sp, #140]	; 0x8c
   23144:	ldr	r0, [sp, #152]	; 0x98
   23148:	add	r9, r4, #1
   2314c:	mov	r8, r6
   23150:	cmp	r9, r1
   23154:	blt	23160 <__assert_fail@plt+0x112cc>
   23158:	cmp	r1, r0
   2315c:	blt	22b74 <__assert_fail@plt+0x10ce0>
   23160:	ldr	r1, [sp, #132]	; 0x84
   23164:	cmp	r9, r1
   23168:	blt	23174 <__assert_fail@plt+0x112e0>
   2316c:	cmp	r1, r0
   23170:	blt	22b74 <__assert_fail@plt+0x10ce0>
   23174:	tst	r7, #32
   23178:	bne	22ba8 <__assert_fail@plt+0x10d14>
   2317c:	ldr	r1, [sp, #144]	; 0x90
   23180:	ldr	r0, [sp, #108]	; 0x6c
   23184:	add	r2, r1, #1
   23188:	str	r2, [sp, #144]	; 0x90
   2318c:	ldrb	r6, [r0, r1]
   23190:	ldr	r0, [r8, #44]	; 0x2c
   23194:	cmp	r0, #0
   23198:	bne	231e8 <__assert_fail@plt+0x11354>
   2319c:	ldr	r7, [r8, #48]	; 0x30
   231a0:	cmp	r7, #0
   231a4:	bne	22ff0 <__assert_fail@plt+0x1115c>
   231a8:	ldr	r0, [sp, #188]	; 0xbc
   231ac:	mov	r1, r8
   231b0:	mov	r4, ip
   231b4:	mov	r5, lr
   231b8:	bl	2f538 <__assert_fail@plt+0x1d6a4>
   231bc:	mov	lr, r5
   231c0:	mov	ip, r4
   231c4:	cmp	r0, #0
   231c8:	bne	23190 <__assert_fail@plt+0x112fc>
   231cc:	mov	r0, #12
   231d0:	mov	r6, #0
   231d4:	str	r0, [fp, #-196]	; 0xffffff3c
   231d8:	ldr	r0, [sp, #204]	; 0xcc
   231dc:	cmp	r0, #0
   231e0:	bne	231f8 <__assert_fail@plt+0x11364>
   231e4:	b	2321c <__assert_fail@plt+0x11388>
   231e8:	ldr	r6, [r0, r6, lsl #2]
   231ec:	ldr	r0, [sp, #204]	; 0xcc
   231f0:	cmp	r0, #0
   231f4:	beq	2321c <__assert_fail@plt+0x11388>
   231f8:	sub	r0, fp, #196	; 0xc4
   231fc:	add	r1, sp, #104	; 0x68
   23200:	mov	r2, r6
   23204:	mov	r4, ip
   23208:	mov	r5, lr
   2320c:	bl	2d488 <__assert_fail@plt+0x1b5f4>
   23210:	mov	lr, r5
   23214:	mov	ip, r4
   23218:	mov	r6, r0
   2321c:	cmp	r6, #0
   23220:	beq	22a50 <__assert_fail@plt+0x10bbc>
   23224:	sub	r0, r8, r6
   23228:	clz	r0, r0
   2322c:	lsr	r0, r0, #5
   23230:	ands	sl, sl, r0
   23234:	ldrb	r0, [r6, #52]	; 0x34
   23238:	movne	lr, r9
   2323c:	sxtb	r7, r0
   23240:	tst	r0, #16
   23244:	bne	22a8c <__assert_fail@plt+0x10bf8>
   23248:	ldr	r4, [sp, #144]	; 0x90
   2324c:	ldr	r8, [sp, #84]	; 0x54
   23250:	ldr	r1, [sp, #72]	; 0x48
   23254:	ldr	r0, [sp, #160]	; 0xa0
   23258:	cmp	r0, r4
   2325c:	bgt	2313c <__assert_fail@plt+0x112a8>
   23260:	b	23278 <__assert_fail@plt+0x113e4>
   23264:	ldr	r1, [sp, #36]	; 0x24
   23268:	b	23278 <__assert_fail@plt+0x113e4>
   2326c:	ldr	r8, [sp, #84]	; 0x54
   23270:	ldr	r1, [sp, #72]	; 0x48
   23274:	mov	lr, r5
   23278:	cmp	r1, #0
   2327c:	ldrne	r0, [r1]
   23280:	addne	r0, r0, lr
   23284:	strne	r0, [r1]
   23288:	cmn	ip, #1
   2328c:	beq	224bc <__assert_fail@plt+0x10628>
   23290:	cmn	ip, #2
   23294:	beq	24344 <__assert_fail@plt+0x124b0>
   23298:	ldr	r7, [sp, #68]	; 0x44
   2329c:	ldr	r6, [sp, #64]	; 0x40
   232a0:	mov	r8, ip
   232a4:	str	ip, [sp, #196]	; 0xc4
   232a8:	cmp	r7, #2
   232ac:	bcc	2336c <__assert_fail@plt+0x114d8>
   232b0:	ldrb	r0, [r6, #28]
   232b4:	ands	r0, r0, #16
   232b8:	bne	2336c <__assert_fail@plt+0x114d8>
   232bc:	ldr	r0, [sp, #204]	; 0xcc
   232c0:	mov	r2, ip
   232c4:	ldr	r1, [r0, ip, lsl #2]
   232c8:	add	r0, sp, #104	; 0x68
   232cc:	bl	2c40c <__assert_fail@plt+0x1a578>
   232d0:	ldr	sl, [sp, #96]	; 0x60
   232d4:	str	r0, [sp, #200]	; 0xc8
   232d8:	mov	r5, r0
   232dc:	ldrb	r0, [sl, #88]	; 0x58
   232e0:	tst	r0, #1
   232e4:	bne	23410 <__assert_fail@plt+0x1157c>
   232e8:	ldr	r0, [sl, #76]	; 0x4c
   232ec:	mov	r1, r8
   232f0:	cmp	r0, #0
   232f4:	bne	2339c <__assert_fail@plt+0x11508>
   232f8:	b	235b8 <__assert_fail@plt+0x11724>
   232fc:	ldr	r0, [sp, #112]	; 0x70
   23300:	ldr	r0, [r0]
   23304:	cmn	r0, #1
   23308:	bne	229bc <__assert_fail@plt+0x10b28>
   2330c:	b	224c4 <__assert_fail@plt+0x10630>
   23310:	ldr	r5, [sp, #40]	; 0x28
   23314:	cmp	lr, #0
   23318:	ble	2335c <__assert_fail@plt+0x114c8>
   2331c:	ldr	r1, [sp, #152]	; 0x98
   23320:	sub	r0, lr, #1
   23324:	cmp	r1, r0
   23328:	beq	22638 <__assert_fail@plt+0x107a4>
   2332c:	ldr	r1, [sp, #184]	; 0xb8
   23330:	cmp	r1, #2
   23334:	blt	233a8 <__assert_fail@plt+0x11514>
   23338:	ldr	r0, [sp, #112]	; 0x70
   2333c:	mov	r1, lr
   23340:	sub	r0, r0, #4
   23344:	ldr	r7, [r0, r1, lsl #2]
   23348:	cmn	r7, #1
   2334c:	bne	224f8 <__assert_fail@plt+0x10664>
   23350:	sub	r1, r1, #1
   23354:	cmp	r1, #0
   23358:	bgt	23344 <__assert_fail@plt+0x114b0>
   2335c:	ldr	r3, [sp, #164]	; 0xa4
   23360:	tst	r3, #1
   23364:	beq	22520 <__assert_fail@plt+0x1068c>
   23368:	b	2264c <__assert_fail@plt+0x107b8>
   2336c:	ldr	sl, [sp, #96]	; 0x60
   23370:	ldr	r0, [sl, #76]	; 0x4c
   23374:	cmp	r0, #0
   23378:	beq	235b8 <__assert_fail@plt+0x11724>
   2337c:	ldr	r0, [sp, #204]	; 0xcc
   23380:	mov	r2, ip
   23384:	ldr	r1, [r0, ip, lsl #2]
   23388:	add	r0, sp, #104	; 0x68
   2338c:	bl	2c40c <__assert_fail@plt+0x1a578>
   23390:	mov	r1, r8
   23394:	mov	r5, r0
   23398:	str	r0, [sp, #200]	; 0xc8
   2339c:	cmn	r1, #-1073741823	; 0xc0000001
   233a0:	bcc	2341c <__assert_fail@plt+0x11588>
   233a4:	b	24344 <__assert_fail@plt+0x124b0>
   233a8:	ldr	r1, [sp, #108]	; 0x6c
   233ac:	ldr	r2, [sp, #172]	; 0xac
   233b0:	mov	r3, #1
   233b4:	ldrb	r0, [r1, r0]
   233b8:	ubfx	r1, r0, #5, #3
   233bc:	ldr	r1, [r2, r1, lsl #2]
   233c0:	and	r2, r0, #31
   233c4:	tst	r1, r3, lsl r2
   233c8:	bne	2264c <__assert_fail@plt+0x107b8>
   233cc:	cmp	r0, #10
   233d0:	beq	2250c <__assert_fail@plt+0x10678>
   233d4:	b	22650 <__assert_fail@plt+0x107bc>
   233d8:	ldr	r1, [sp, #76]	; 0x4c
   233dc:	mov	r0, #0
   233e0:	cmp	r6, r1
   233e4:	ldrlt	r0, [sp, #100]	; 0x64
   233e8:	ldrblt	r0, [r0, r6]
   233ec:	ldrb	r0, [r5, r0]
   233f0:	cmp	r0, #0
   233f4:	bne	22990 <__assert_fail@plt+0x10afc>
   233f8:	sub	r0, r6, #1
   233fc:	cmp	r6, r4
   23400:	mov	r6, r0
   23404:	str	r0, [fp, #-200]	; 0xffffff38
   23408:	bgt	233dc <__assert_fail@plt+0x11548>
   2340c:	b	2454c <__assert_fail@plt+0x126b8>
   23410:	mov	r1, r8
   23414:	cmn	r1, #-1073741823	; 0xc0000001
   23418:	bcs	24344 <__assert_fail@plt+0x124b0>
   2341c:	ldr	r0, [sp, #188]	; 0xbc
   23420:	str	r0, [sp, #72]	; 0x48
   23424:	mov	r0, #4
   23428:	add	r4, r0, r1, lsl #2
   2342c:	mov	r0, r4
   23430:	bl	36fb4 <__assert_fail@plt+0x25120>
   23434:	mov	r6, r0
   23438:	cmp	r0, #0
   2343c:	beq	245ac <__assert_fail@plt+0x12718>
   23440:	ldr	r0, [sp, #72]	; 0x48
   23444:	str	r5, [sp, #56]	; 0x38
   23448:	ldr	r0, [r0, #76]	; 0x4c
   2344c:	cmp	r0, #0
   23450:	beq	2237c <__assert_fail@plt+0x104e8>
   23454:	mov	r0, r4
   23458:	bl	36fb4 <__assert_fail@plt+0x25120>
   2345c:	cmp	r0, #0
   23460:	beq	245ac <__assert_fail@plt+0x12718>
   23464:	mov	r1, #0
   23468:	mov	r2, r4
   2346c:	mov	r7, r0
   23470:	bl	11cd8 <memset@plt>
   23474:	ldr	r0, [sp, #32]
   23478:	mov	r1, #0
   2347c:	str	r6, [fp, #-192]	; 0xffffff40
   23480:	str	r7, [fp, #-188]	; 0xffffff44
   23484:	str	r5, [fp, #-184]	; 0xffffff48
   23488:	str	r8, [fp, #-180]	; 0xffffff4c
   2348c:	str	r1, [r0]
   23490:	str	r1, [r0, #4]
   23494:	str	r1, [r0, #8]
   23498:	add	r0, sp, #104	; 0x68
   2349c:	sub	r1, fp, #192	; 0xc0
   234a0:	bl	312c0 <__assert_fail@plt+0x1f42c>
   234a4:	mov	r9, r0
   234a8:	mov	r0, #0
   234ac:	bl	17b10 <__assert_fail@plt+0x5c7c>
   234b0:	cmp	r9, #0
   234b4:	bne	226b0 <__assert_fail@plt+0x1081c>
   234b8:	ldr	r0, [r6]
   234bc:	mov	r3, r8
   234c0:	cmp	r0, #0
   234c4:	beq	223d0 <__assert_fail@plt+0x1053c>
   234c8:	mov	r1, #0
   234cc:	cmp	r3, #0
   234d0:	mov	r9, #0
   234d4:	mov	r8, r3
   234d8:	str	r1, [sp, #20]
   234dc:	blt	23578 <__assert_fail@plt+0x116e4>
   234e0:	mov	r5, #0
   234e4:	ldr	r2, [r7, r5, lsl #2]
   234e8:	cmp	r0, #0
   234ec:	bne	23518 <__assert_fail@plt+0x11684>
   234f0:	str	r2, [r6, r5, lsl #2]
   234f4:	cmp	r5, r3
   234f8:	bge	23574 <__assert_fail@plt+0x116e0>
   234fc:	add	r0, r6, r5, lsl #2
   23500:	add	r1, r5, #1
   23504:	ldr	r0, [r0, #4]
   23508:	mov	r5, r1
   2350c:	ldr	r2, [r7, r5, lsl #2]
   23510:	cmp	r0, #0
   23514:	beq	234f0 <__assert_fail@plt+0x1165c>
   23518:	cmp	r2, #0
   2351c:	beq	2356c <__assert_fail@plt+0x116d8>
   23520:	sub	sl, fp, #48	; 0x30
   23524:	add	r1, r0, #4
   23528:	add	r2, r2, #4
   2352c:	mov	r0, sl
   23530:	bl	2d6dc <__assert_fail@plt+0x1b848>
   23534:	cmp	r0, #0
   23538:	str	r0, [fp, #-196]	; 0xffffff3c
   2353c:	bne	225b0 <__assert_fail@plt+0x1071c>
   23540:	ldr	r1, [sp, #72]	; 0x48
   23544:	sub	r0, fp, #196	; 0xc4
   23548:	mov	r2, sl
   2354c:	bl	2ed50 <__assert_fail@plt+0x1cebc>
   23550:	str	r0, [r6, r5, lsl #2]
   23554:	ldr	r0, [fp, #-40]	; 0xffffffd8
   23558:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2355c:	ldr	r9, [fp, #-196]	; 0xffffff3c
   23560:	mov	r3, r8
   23564:	cmp	r9, #0
   23568:	bne	23578 <__assert_fail@plt+0x116e4>
   2356c:	cmp	r5, r3
   23570:	blt	234fc <__assert_fail@plt+0x11668>
   23574:	mov	r9, #0
   23578:	mov	r0, r7
   2357c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   23580:	cmp	r9, #0
   23584:	bne	226c0 <__assert_fail@plt+0x1082c>
   23588:	ldr	r0, [sp, #204]	; 0xcc
   2358c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   23590:	ldr	r0, [sp, #56]	; 0x38
   23594:	str	r0, [sp, #200]	; 0xc8
   23598:	mov	r0, #0
   2359c:	str	r6, [sp, #204]	; 0xcc
   235a0:	str	r8, [sp, #196]	; 0xc4
   235a4:	bl	17b10 <__assert_fail@plt+0x5c7c>
   235a8:	mov	r0, #0
   235ac:	bl	17b10 <__assert_fail@plt+0x5c7c>
   235b0:	ldr	r7, [sp, #68]	; 0x44
   235b4:	ldr	r6, [sp, #64]	; 0x40
   235b8:	cmp	r7, #0
   235bc:	beq	24548 <__assert_fail@plt+0x126b4>
   235c0:	ldr	r1, [fp, #16]
   235c4:	ldr	r5, [fp, #20]
   235c8:	cmp	r7, #1
   235cc:	beq	235ec <__assert_fail@plt+0x11758>
   235d0:	ldr	r0, [sp, #28]
   235d4:	mvn	r0, r0
   235d8:	add	r0, r0, r1
   235dc:	mov	r1, #255	; 0xff
   235e0:	lsl	r2, r0, #3
   235e4:	add	r0, r5, #8
   235e8:	bl	11cd8 <memset@plt>
   235ec:	ldr	r1, [sp, #196]	; 0xc4
   235f0:	mov	r0, #0
   235f4:	cmp	r7, #2
   235f8:	sub	r4, fp, #48	; 0x30
   235fc:	stm	r5, {r0, r1}
   23600:	bcc	24480 <__assert_fail@plt+0x125ec>
   23604:	ldrb	r0, [r6, #28]
   23608:	ands	r0, r0, #16
   2360c:	bne	24480 <__assert_fail@plt+0x125ec>
   23610:	ldr	r0, [sp, #96]	; 0x60
   23614:	ldrb	r1, [r0, #88]	; 0x58
   23618:	mov	r0, #0
   2361c:	tst	r1, #1
   23620:	mov	r1, #0
   23624:	beq	2363c <__assert_fail@plt+0x117a8>
   23628:	ldr	r1, [sp, #96]	; 0x60
   2362c:	ldr	r2, [r1, #76]	; 0x4c
   23630:	mov	r1, #0
   23634:	cmp	r2, #0
   23638:	movwgt	r1, #1
   2363c:	movw	r2, #42776	; 0xa718
   23640:	ldr	r6, [r6]
   23644:	cmp	r1, #0
   23648:	mov	r8, #0
   2364c:	movt	r2, #3
   23650:	vldr	d16, [r2]
   23654:	ldr	r2, [r2, #8]
   23658:	str	r2, [fp, #-40]	; 0xffffffd8
   2365c:	mov	r2, #16
   23660:	vstr	d16, [fp, #-48]	; 0xffffffd0
   23664:	str	r2, [fp, #-188]	; 0xffffff44
   23668:	sub	r2, fp, #192	; 0xc0
   2366c:	str	r0, [fp, #-192]	; 0xffffff40
   23670:	add	r9, r2, #12
   23674:	str	r9, [fp, #-184]	; 0xffffff48
   23678:	beq	23698 <__assert_fail@plt+0x11804>
   2367c:	mov	r0, #48	; 0x30
   23680:	bl	36fb4 <__assert_fail@plt+0x25120>
   23684:	cmp	r0, #0
   23688:	str	r0, [fp, #-40]	; 0xffffffd8
   2368c:	beq	24344 <__assert_fail@plt+0x124b0>
   23690:	ldr	r0, [fp, #-192]	; 0xffffff40
   23694:	mov	r8, r4
   23698:	ldr	r4, [r6, #72]	; 0x48
   2369c:	cmp	r0, r7
   236a0:	bcs	23778 <__assert_fail@plt+0x118e4>
   236a4:	sub	r0, fp, #192	; 0xc0
   236a8:	mov	r1, r7
   236ac:	mov	r2, r9
   236b0:	mov	r3, #8
   236b4:	bl	37d68 <__assert_fail@plt+0x25ed4>
   236b8:	cmp	r0, #0
   236bc:	bne	2377c <__assert_fail@plt+0x118e8>
   236c0:	ldr	r0, [fp, #-184]	; 0xffffff48
   236c4:	mov	r4, r9
   236c8:	cmp	r0, r9
   236cc:	beq	236d4 <__assert_fail@plt+0x11840>
   236d0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   236d4:	mov	r0, #16
   236d8:	mov	r9, #12
   236dc:	cmp	r8, #0
   236e0:	str	r0, [fp, #-188]	; 0xffffff44
   236e4:	mov	r0, #0
   236e8:	str	r0, [fp, #-192]	; 0xffffff40
   236ec:	str	r4, [fp, #-184]	; 0xffffff48
   236f0:	beq	2454c <__assert_fail@plt+0x126b8>
   236f4:	ldr	r1, [r8]
   236f8:	ldr	r0, [r8, #8]
   236fc:	cmp	r1, #1
   23700:	blt	243e4 <__assert_fail@plt+0x12550>
   23704:	mov	r5, #0
   23708:	mov	r6, #0
   2370c:	add	r0, r0, r5
   23710:	ldr	r0, [r0, #20]
   23714:	bl	17b10 <__assert_fail@plt+0x5c7c>
   23718:	ldr	r0, [r8, #8]
   2371c:	add	r0, r0, r5
   23720:	ldr	r0, [r0, #8]
   23724:	bl	17b10 <__assert_fail@plt+0x5c7c>
   23728:	ldr	r1, [r8]
   2372c:	ldr	r0, [r8, #8]
   23730:	add	r6, r6, #1
   23734:	add	r5, r5, #24
   23738:	cmp	r6, r1
   2373c:	blt	2370c <__assert_fail@plt+0x11878>
   23740:	b	243e4 <__assert_fail@plt+0x12550>
   23744:	ldr	r1, [r3, #8]
   23748:	cmp	r1, #0
   2374c:	beq	2375c <__assert_fail@plt+0x118c8>
   23750:	ldrsb	r1, [r7, #28]
   23754:	cmp	r1, #0
   23758:	blt	22058 <__assert_fail@plt+0x101c4>
   2375c:	mov	r1, #0
   23760:	cmp	r6, #0
   23764:	beq	2433c <__assert_fail@plt+0x124a8>
   23768:	cmp	ip, #0
   2376c:	mov	r6, #0
   23770:	bne	245a0 <__assert_fail@plt+0x1270c>
   23774:	b	2205c <__assert_fail@plt+0x101c8>
   23778:	str	r7, [fp, #-192]	; 0xffffff40
   2377c:	ldr	r0, [fp, #-184]	; 0xffffff48
   23780:	lsl	r2, r7, #3
   23784:	mov	r1, r5
   23788:	str	r2, [sp, #76]	; 0x4c
   2378c:	str	r0, [sp, #80]	; 0x50
   23790:	bl	11a8c <memcpy@plt>
   23794:	ldr	r3, [r5]
   23798:	ldr	r0, [r5, #4]
   2379c:	mov	sl, #0
   237a0:	cmp	r3, r0
   237a4:	ble	23830 <__assert_fail@plt+0x1199c>
   237a8:	mov	r0, sl
   237ac:	bl	17b10 <__assert_fail@plt+0x5c7c>
   237b0:	ldr	r0, [fp, #-184]	; 0xffffff48
   237b4:	cmp	r0, r9
   237b8:	beq	237c0 <__assert_fail@plt+0x1192c>
   237bc:	bl	17b10 <__assert_fail@plt+0x5c7c>
   237c0:	mov	r0, #16
   237c4:	cmp	r8, #0
   237c8:	str	r0, [fp, #-188]	; 0xffffff44
   237cc:	mov	r0, #0
   237d0:	str	r0, [fp, #-192]	; 0xffffff40
   237d4:	str	r9, [fp, #-184]	; 0xffffff48
   237d8:	beq	24480 <__assert_fail@plt+0x125ec>
   237dc:	ldr	r1, [r8]
   237e0:	ldr	r0, [r8, #8]
   237e4:	mov	r6, r5
   237e8:	cmp	r1, #1
   237ec:	blt	24478 <__assert_fail@plt+0x125e4>
   237f0:	mov	r4, #0
   237f4:	mov	r5, #0
   237f8:	add	r0, r0, r4
   237fc:	ldr	r0, [r0, #20]
   23800:	bl	17b10 <__assert_fail@plt+0x5c7c>
   23804:	ldr	r0, [r8, #8]
   23808:	add	r0, r0, r4
   2380c:	ldr	r0, [r0, #8]
   23810:	bl	17b10 <__assert_fail@plt+0x5c7c>
   23814:	ldr	r1, [r8]
   23818:	ldr	r0, [r8, #8]
   2381c:	add	r5, r5, #1
   23820:	add	r4, r4, #24
   23824:	cmp	r5, r1
   23828:	blt	237f8 <__assert_fail@plt+0x11964>
   2382c:	b	24478 <__assert_fail@plt+0x125e4>
   23830:	lsl	r0, r7, #4
   23834:	mov	lr, #1
   23838:	mov	sl, #0
   2383c:	str	r6, [sp, #64]	; 0x40
   23840:	str	r0, [sp, #56]	; 0x38
   23844:	mov	r0, #0
   23848:	str	r0, [sp, #72]	; 0x48
   2384c:	mov	r0, #0
   23850:	str	r0, [sp, #92]	; 0x5c
   23854:	ldr	r0, [r6]
   23858:	add	r1, r0, r4, lsl #3
   2385c:	ldr	r1, [r1, #4]
   23860:	uxtb	r2, r1
   23864:	cmp	r2, #9
   23868:	beq	23898 <__assert_fail@plt+0x11a04>
   2386c:	cmp	r2, #8
   23870:	bne	23908 <__assert_fail@plt+0x11a74>
   23874:	ldr	r0, [r0, r4, lsl #3]
   23878:	add	r0, r0, #1
   2387c:	cmp	r0, r7
   23880:	bge	23908 <__assert_fail@plt+0x11a74>
   23884:	mov	r1, r5
   23888:	str	r3, [r1, r0, lsl #3]!
   2388c:	mvn	r0, #0
   23890:	str	r0, [r1, #4]
   23894:	b	23908 <__assert_fail@plt+0x11a74>
   23898:	ldr	r0, [r0, r4, lsl #3]
   2389c:	add	r0, r0, #1
   238a0:	cmp	r0, r7
   238a4:	bge	23908 <__assert_fail@plt+0x11a74>
   238a8:	ldr	r2, [r5, r0, lsl #3]
   238ac:	cmp	r2, r3
   238b0:	bge	238c8 <__assert_fail@plt+0x11a34>
   238b4:	add	r0, r5, r0, lsl #3
   238b8:	mov	r1, r5
   238bc:	str	r3, [r0, #4]
   238c0:	ldr	r0, [sp, #80]	; 0x50
   238c4:	b	238e8 <__assert_fail@plt+0x11a54>
   238c8:	tst	r1, #524288	; 0x80000
   238cc:	beq	23900 <__assert_fail@plt+0x11a6c>
   238d0:	ldr	r1, [sp, #80]	; 0x50
   238d4:	ldr	r1, [r1, r0, lsl #3]
   238d8:	cmn	r1, #1
   238dc:	beq	23900 <__assert_fail@plt+0x11a6c>
   238e0:	ldr	r1, [sp, #80]	; 0x50
   238e4:	mov	r0, r5
   238e8:	ldr	r2, [sp, #76]	; 0x4c
   238ec:	mov	r6, r3
   238f0:	bl	11a8c <memcpy@plt>
   238f4:	mov	r3, r6
   238f8:	mov	lr, #1
   238fc:	b	23908 <__assert_fail@plt+0x11a74>
   23900:	add	r0, r5, r0, lsl #3
   23904:	str	r3, [r0, #4]
   23908:	ldr	r0, [r5, #4]
   2390c:	cmp	r3, r0
   23910:	ldreq	r0, [sp, #200]	; 0xc8
   23914:	cmpeq	r4, r0
   23918:	beq	23978 <__assert_fail@plt+0x11ae4>
   2391c:	cmp	r8, #0
   23920:	beq	23a50 <__assert_fail@plt+0x11bbc>
   23924:	ldr	r0, [sp, #92]	; 0x5c
   23928:	cmp	r0, #1
   2392c:	blt	23a50 <__assert_fail@plt+0x11bbc>
   23930:	mov	r6, r3
   23934:	subs	r1, r0, #1
   23938:	beq	23964 <__assert_fail@plt+0x11ad0>
   2393c:	mov	r0, #0
   23940:	add	r2, r0, r1
   23944:	lsr	r3, r2, #1
   23948:	ldr	r7, [sl, r3, lsl #2]
   2394c:	cmp	r7, r4
   23950:	movge	r1, r3
   23954:	addlt	r0, lr, r2, lsr #1
   23958:	cmp	r0, r1
   2395c:	bcc	23940 <__assert_fail@plt+0x11aac>
   23960:	b	23968 <__assert_fail@plt+0x11ad4>
   23964:	mov	r0, #0
   23968:	ldr	r0, [sl, r0, lsl #2]
   2396c:	ldr	r7, [sp, #68]	; 0x44
   23970:	cmp	r0, r4
   23974:	bne	23a4c <__assert_fail@plt+0x11bb8>
   23978:	cmp	r8, #0
   2397c:	beq	243f4 <__assert_fail@plt+0x12560>
   23980:	mov	r0, #0
   23984:	ldr	r1, [r5, r0, lsl #3]
   23988:	cmp	r1, #0
   2398c:	blt	239a0 <__assert_fail@plt+0x11b0c>
   23990:	add	r1, r5, r0, lsl #3
   23994:	ldr	r1, [r1, #4]
   23998:	cmn	r1, #1
   2399c:	beq	239b0 <__assert_fail@plt+0x11b1c>
   239a0:	add	r0, r0, #1
   239a4:	cmp	r0, r7
   239a8:	bcc	23984 <__assert_fail@plt+0x11af0>
   239ac:	b	243f4 <__assert_fail@plt+0x12560>
   239b0:	ldr	r0, [r8]
   239b4:	cmp	r0, #0
   239b8:	beq	243f4 <__assert_fail@plt+0x12560>
   239bc:	sub	r1, r0, #1
   239c0:	mov	r0, r5
   239c4:	str	r9, [sp, #60]	; 0x3c
   239c8:	ldr	r6, [sp, #76]	; 0x4c
   239cc:	str	r1, [r8]
   239d0:	add	r5, r1, r1, lsl #1
   239d4:	ldr	r4, [r8, #8]
   239d8:	mov	r2, r6
   239dc:	ldr	r9, [r4, r5, lsl #3]!
   239e0:	ldr	r1, [r4, #8]
   239e4:	bl	11a8c <memcpy@plt>
   239e8:	ldr	r0, [r4, #8]
   239ec:	mov	r2, r6
   239f0:	add	r1, r0, r7, lsl #3
   239f4:	ldr	r0, [sp, #80]	; 0x50
   239f8:	bl	11a8c <memcpy@plt>
   239fc:	mov	r0, sl
   23a00:	bl	17b10 <__assert_fail@plt+0x5c7c>
   23a04:	ldr	r0, [r8, #8]
   23a08:	add	r0, r0, r5, lsl #3
   23a0c:	ldr	r0, [r0, #8]
   23a10:	bl	17b10 <__assert_fail@plt+0x5c7c>
   23a14:	ldr	r0, [r8, #8]
   23a18:	add	r0, r0, r5, lsl #3
   23a1c:	ldr	r4, [r0, #4]
   23a20:	ldr	sl, [r0, #20]
   23a24:	cmn	r4, #1
   23a28:	ble	243ec <__assert_fail@plt+0x12558>
   23a2c:	ldr	r1, [r0, #12]
   23a30:	ldr	r0, [r0, #16]
   23a34:	mov	r3, r9
   23a38:	ldr	r9, [sp, #60]	; 0x3c
   23a3c:	mov	lr, #1
   23a40:	str	r1, [sp, #72]	; 0x48
   23a44:	str	r0, [sp, #92]	; 0x5c
   23a48:	b	23a50 <__assert_fail@plt+0x11bbc>
   23a4c:	mov	r3, r6
   23a50:	ldr	r5, [sp, #188]	; 0xbc
   23a54:	str	r3, [sp, #84]	; 0x54
   23a58:	ldr	r0, [r5]
   23a5c:	add	r1, r0, r4, lsl #3
   23a60:	ldr	r1, [r1, #4]
   23a64:	tst	r1, #8
   23a68:	bne	23b28 <__assert_fail@plt+0x11c94>
   23a6c:	tst	r1, #1048576	; 0x100000
   23a70:	str	sl, [sp, #88]	; 0x58
   23a74:	bne	23bac <__assert_fail@plt+0x11d18>
   23a78:	uxtb	r1, r1
   23a7c:	cmp	r1, #4
   23a80:	bne	23bd0 <__assert_fail@plt+0x11d3c>
   23a84:	ldr	r0, [r0, r4, lsl #3]
   23a88:	mov	r6, #0
   23a8c:	add	r0, r0, #1
   23a90:	cmp	r0, r7
   23a94:	ldrlt	r1, [fp, #20]
   23a98:	ldrlt	r2, [r1, r0, lsl #3]!
   23a9c:	ldrlt	r1, [r1, #4]
   23aa0:	sublt	r6, r1, r2
   23aa4:	cmp	r8, #0
   23aa8:	beq	23e80 <__assert_fail@plt+0x11fec>
   23aac:	cmp	r0, r7
   23ab0:	bge	23cd4 <__assert_fail@plt+0x11e40>
   23ab4:	ldr	r2, [fp, #20]
   23ab8:	ldr	r1, [r2, r0, lsl #3]
   23abc:	cmn	r1, #1
   23ac0:	beq	23cd4 <__assert_fail@plt+0x11e40>
   23ac4:	add	r0, r2, r0, lsl #3
   23ac8:	ldr	r0, [r0, #4]
   23acc:	cmn	r0, #1
   23ad0:	beq	23cd4 <__assert_fail@plt+0x11e40>
   23ad4:	cmp	r6, #0
   23ad8:	beq	23eb0 <__assert_fail@plt+0x1201c>
   23adc:	ldr	r0, [sp, #132]	; 0x84
   23ae0:	sub	r0, r0, r3
   23ae4:	cmp	r0, r6
   23ae8:	blt	23cd4 <__assert_fail@plt+0x11e40>
   23aec:	ldr	r2, [sp, #108]	; 0x6c
   23af0:	str	r9, [sp, #60]	; 0x3c
   23af4:	mov	r9, r3
   23af8:	add	r0, r2, r1
   23afc:	add	r1, r2, r3
   23b00:	mov	r2, r6
   23b04:	bl	11ac8 <memcmp@plt>
   23b08:	cmp	r0, #0
   23b0c:	beq	24140 <__assert_fail@plt+0x122ac>
   23b10:	ldr	sl, [sp, #60]	; 0x3c
   23b14:	ldr	r0, [r8]
   23b18:	mov	r5, #0
   23b1c:	cmp	r0, #0
   23b20:	bne	23ce8 <__assert_fail@plt+0x11e54>
   23b24:	b	2434c <__assert_fail@plt+0x124b8>
   23b28:	ldr	r0, [sp, #204]	; 0xcc
   23b2c:	ldr	r5, [r5, #20]
   23b30:	ldr	r6, [r0, r3, lsl #2]
   23b34:	ldr	r3, [sp, #92]	; 0x5c
   23b38:	cmp	r3, #1
   23b3c:	blt	23b88 <__assert_fail@plt+0x11cf4>
   23b40:	mov	r0, #0
   23b44:	subs	r1, r3, #1
   23b48:	beq	23b6c <__assert_fail@plt+0x11cd8>
   23b4c:	add	r2, r0, r1
   23b50:	lsr	r3, r2, #1
   23b54:	ldr	r7, [sl, r3, lsl #2]
   23b58:	cmp	r7, r4
   23b5c:	movge	r1, r3
   23b60:	addlt	r0, lr, r2, lsr #1
   23b64:	cmp	r0, r1
   23b68:	bcc	23b4c <__assert_fail@plt+0x11cb8>
   23b6c:	ldr	r0, [sl, r0, lsl #2]
   23b70:	ldr	r7, [sp, #68]	; 0x44
   23b74:	ldr	r3, [sp, #92]	; 0x5c
   23b78:	cmp	r0, r4
   23b7c:	bne	23b88 <__assert_fail@plt+0x11cf4>
   23b80:	str	sl, [sp, #88]	; 0x58
   23b84:	b	23cb0 <__assert_fail@plt+0x11e1c>
   23b88:	ldr	r0, [sp, #72]	; 0x48
   23b8c:	cmp	r0, #0
   23b90:	beq	23c8c <__assert_fail@plt+0x11df8>
   23b94:	cmp	r3, #0
   23b98:	str	sl, [sp, #88]	; 0x58
   23b9c:	bne	24168 <__assert_fail@plt+0x122d4>
   23ba0:	str	r4, [sl]
   23ba4:	mov	r3, #1
   23ba8:	b	23cb0 <__assert_fail@plt+0x11e1c>
   23bac:	mov	r0, r5
   23bb0:	mov	r1, r4
   23bb4:	add	r2, sp, #104	; 0x68
   23bb8:	bl	2eff0 <__assert_fail@plt+0x1d15c>
   23bbc:	mov	lr, #1
   23bc0:	mov	r1, r0
   23bc4:	ldr	r3, [sp, #84]	; 0x54
   23bc8:	cmp	r1, #0
   23bcc:	bne	23bf8 <__assert_fail@plt+0x11d64>
   23bd0:	ldr	r0, [r5]
   23bd4:	mov	r2, r3
   23bd8:	add	r1, r0, r4, lsl #3
   23bdc:	add	r0, sp, #104	; 0x68
   23be0:	bl	2f308 <__assert_fail@plt+0x1d474>
   23be4:	ldr	r3, [sp, #84]	; 0x54
   23be8:	mov	lr, #1
   23bec:	mov	r1, #1
   23bf0:	cmp	r0, #0
   23bf4:	beq	23ccc <__assert_fail@plt+0x11e38>
   23bf8:	ldr	r0, [r5, #12]
   23bfc:	add	r3, r1, r3
   23c00:	cmp	r8, #0
   23c04:	ldr	r6, [r0, r4, lsl #2]
   23c08:	beq	23e94 <__assert_fail@plt+0x12000>
   23c0c:	ldr	r0, [sp, #196]	; 0xc4
   23c10:	cmp	r3, r0
   23c14:	bgt	23cd4 <__assert_fail@plt+0x11e40>
   23c18:	ldr	r0, [sp, #204]	; 0xcc
   23c1c:	ldr	r0, [r0, r3, lsl #2]
   23c20:	cmp	r0, #0
   23c24:	beq	23cd4 <__assert_fail@plt+0x11e40>
   23c28:	ldr	r1, [r0, #8]
   23c2c:	cmp	r1, #1
   23c30:	blt	23cd4 <__assert_fail@plt+0x11e40>
   23c34:	ldr	r0, [r0, #12]
   23c38:	mov	r2, #0
   23c3c:	mov	r4, r3
   23c40:	subs	r1, r1, #1
   23c44:	str	r2, [sp, #92]	; 0x5c
   23c48:	mov	r2, #0
   23c4c:	beq	23c74 <__assert_fail@plt+0x11de0>
   23c50:	mov	r2, #0
   23c54:	add	r3, r2, r1
   23c58:	lsr	r7, r3, #1
   23c5c:	ldr	r5, [r0, r7, lsl #2]
   23c60:	cmp	r5, r6
   23c64:	movge	r1, r7
   23c68:	addlt	r2, lr, r3, lsr #1
   23c6c:	cmp	r2, r1
   23c70:	bcc	23c54 <__assert_fail@plt+0x11dc0>
   23c74:	ldr	r0, [r0, r2, lsl #2]
   23c78:	ldr	r7, [sp, #68]	; 0x44
   23c7c:	mov	r3, r4
   23c80:	cmp	r0, r6
   23c84:	bne	23ccc <__assert_fail@plt+0x11e38>
   23c88:	b	24118 <__assert_fail@plt+0x12284>
   23c8c:	mov	r0, #4
   23c90:	bl	36fb4 <__assert_fail@plt+0x25120>
   23c94:	cmp	r0, #0
   23c98:	beq	2463c <__assert_fail@plt+0x127a8>
   23c9c:	str	r0, [sp, #88]	; 0x58
   23ca0:	str	r4, [r0]
   23ca4:	mov	r0, #1
   23ca8:	mov	r3, #1
   23cac:	str	r0, [sp, #72]	; 0x48
   23cb0:	add	r0, r4, r4, lsl #1
   23cb4:	add	r1, r5, r0, lsl #2
   23cb8:	ldr	sl, [r1, #4]
   23cbc:	cmp	sl, #1
   23cc0:	ldrge	r2, [r6, #8]
   23cc4:	subsge	r2, r2, #1
   23cc8:	bge	23d94 <__assert_fail@plt+0x11f00>
   23ccc:	cmp	r8, #0
   23cd0:	beq	2435c <__assert_fail@plt+0x124c8>
   23cd4:	mov	sl, r9
   23cd8:	ldr	r0, [r8]
   23cdc:	mov	r5, #0
   23ce0:	cmp	r0, #0
   23ce4:	beq	2434c <__assert_fail@plt+0x124b8>
   23ce8:	sub	r0, r0, #1
   23cec:	ldr	r9, [sp, #76]	; 0x4c
   23cf0:	str	r0, [r8]
   23cf4:	add	r6, r0, r0, lsl #1
   23cf8:	ldr	r4, [r8, #8]
   23cfc:	mov	r2, r9
   23d00:	ldr	r0, [r4, r6, lsl #3]!
   23d04:	str	r0, [sp, #84]	; 0x54
   23d08:	ldr	r1, [r4, #8]
   23d0c:	ldr	r0, [fp, #20]
   23d10:	bl	11a8c <memcpy@plt>
   23d14:	ldr	r0, [r4, #8]
   23d18:	mov	r2, r9
   23d1c:	add	r1, r0, r7, lsl #3
   23d20:	ldr	r0, [sp, #80]	; 0x50
   23d24:	bl	11a8c <memcpy@plt>
   23d28:	ldr	r0, [sp, #88]	; 0x58
   23d2c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   23d30:	ldr	r0, [r8, #8]
   23d34:	add	r0, r0, r6, lsl #3
   23d38:	ldr	r0, [r0, #8]
   23d3c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   23d40:	ldr	r0, [r8, #8]
   23d44:	add	r0, r0, r6, lsl #3
   23d48:	ldr	r4, [r0, #4]
   23d4c:	ldr	r1, [r0, #20]
   23d50:	cmn	r4, #1
   23d54:	str	r1, [sp, #88]	; 0x58
   23d58:	ble	2434c <__assert_fail@plt+0x124b8>
   23d5c:	ldr	r1, [r0, #12]
   23d60:	ldr	r0, [r0, #16]
   23d64:	mov	r9, sl
   23d68:	ldr	r5, [fp, #20]
   23d6c:	ldr	sl, [sp, #88]	; 0x58
   23d70:	ldr	r3, [sp, #84]	; 0x54
   23d74:	mov	lr, #1
   23d78:	str	r1, [sp, #72]	; 0x48
   23d7c:	str	r0, [sp, #92]	; 0x5c
   23d80:	ldr	r0, [r5, #4]
   23d84:	ldr	r6, [sp, #64]	; 0x40
   23d88:	cmp	r3, r0
   23d8c:	ble	23854 <__assert_fail@plt+0x119c0>
   23d90:	b	237a8 <__assert_fail@plt+0x11914>
   23d94:	str	r3, [sp, #92]	; 0x5c
   23d98:	ldr	r0, [r1, #8]
   23d9c:	ldr	r3, [r6, #12]
   23da0:	cmp	r2, #0
   23da4:	str	r0, [sp, #100]	; 0x64
   23da8:	beq	23e38 <__assert_fail@plt+0x11fa4>
   23dac:	mov	r7, #0
   23db0:	mvn	r5, #0
   23db4:	str	r9, [sp, #60]	; 0x3c
   23db8:	ldr	r0, [sp, #100]	; 0x64
   23dbc:	mov	lr, r2
   23dc0:	mov	r6, #0
   23dc4:	mov	r9, #1
   23dc8:	ldr	r4, [r0, r7, lsl #2]
   23dcc:	add	r1, r6, r2
   23dd0:	lsr	r0, r1, #1
   23dd4:	ldr	ip, [r3, r0, lsl #2]
   23dd8:	cmp	ip, r4
   23ddc:	movge	r2, r0
   23de0:	addlt	r6, r9, r1, lsr #1
   23de4:	cmp	r6, r2
   23de8:	bcc	23dcc <__assert_fail@plt+0x11f38>
   23dec:	ldr	r0, [r3, r6, lsl #2]
   23df0:	cmp	r0, r4
   23df4:	bne	23e08 <__assert_fail@plt+0x11f74>
   23df8:	cmn	r5, #1
   23dfc:	mov	r6, r5
   23e00:	mov	r5, r4
   23e04:	bne	23ee0 <__assert_fail@plt+0x1204c>
   23e08:	add	r7, r7, #1
   23e0c:	mov	r2, lr
   23e10:	cmp	r7, sl
   23e14:	blt	23db8 <__assert_fail@plt+0x11f24>
   23e18:	ldr	r7, [sp, #68]	; 0x44
   23e1c:	ldr	r9, [sp, #60]	; 0x3c
   23e20:	ldr	r3, [sp, #84]	; 0x54
   23e24:	mov	r6, r5
   23e28:	mov	lr, #1
   23e2c:	cmn	r6, #1
   23e30:	bgt	24120 <__assert_fail@plt+0x1228c>
   23e34:	b	23ea4 <__assert_fail@plt+0x12010>
   23e38:	ldr	r4, [r3]
   23e3c:	mov	r2, #0
   23e40:	mvn	r6, #0
   23e44:	ldr	r0, [sp, #100]	; 0x64
   23e48:	ldr	r3, [r0, r2, lsl #2]
   23e4c:	cmp	r4, r3
   23e50:	bne	23e64 <__assert_fail@plt+0x11fd0>
   23e54:	cmn	r6, #1
   23e58:	mov	r3, r4
   23e5c:	beq	23e68 <__assert_fail@plt+0x11fd4>
   23e60:	b	23edc <__assert_fail@plt+0x12048>
   23e64:	mov	r3, r6
   23e68:	add	r2, r2, #1
   23e6c:	mov	r6, r3
   23e70:	cmp	r2, sl
   23e74:	blt	23e44 <__assert_fail@plt+0x11fb0>
   23e78:	mov	r6, r3
   23e7c:	b	24110 <__assert_fail@plt+0x1227c>
   23e80:	cmp	r6, #0
   23e84:	beq	23eb0 <__assert_fail@plt+0x1201c>
   23e88:	ldr	r0, [r5, #12]
   23e8c:	add	r3, r6, r3
   23e90:	ldr	r6, [r0, r4, lsl #2]
   23e94:	mov	r0, #0
   23e98:	str	r0, [sp, #92]	; 0x5c
   23e9c:	cmn	r6, #1
   23ea0:	bgt	24120 <__assert_fail@plt+0x1228c>
   23ea4:	cmn	r6, #2
   23ea8:	bne	23ccc <__assert_fail@plt+0x11e38>
   23eac:	b	24644 <__assert_fail@plt+0x127b0>
   23eb0:	ldr	r0, [sp, #72]	; 0x48
   23eb4:	str	r6, [sp, #100]	; 0x64
   23eb8:	cmp	r0, #0
   23ebc:	beq	2404c <__assert_fail@plt+0x121b8>
   23ec0:	ldr	r1, [sp, #92]	; 0x5c
   23ec4:	cmp	r1, #0
   23ec8:	bne	24254 <__assert_fail@plt+0x123c0>
   23ecc:	mov	r0, #1
   23ed0:	str	r4, [sl]
   23ed4:	str	r0, [sp, #92]	; 0x5c
   23ed8:	b	2407c <__assert_fail@plt+0x121e8>
   23edc:	str	r9, [sp, #60]	; 0x3c
   23ee0:	ldr	r0, [sp, #92]	; 0x5c
   23ee4:	ldr	r5, [sp, #88]	; 0x58
   23ee8:	ldr	r9, [sp, #60]	; 0x3c
   23eec:	mov	lr, #1
   23ef0:	cmp	r0, #1
   23ef4:	blt	23f54 <__assert_fail@plt+0x120c0>
   23ef8:	ldr	r0, [sp, #92]	; 0x5c
   23efc:	subs	r1, r0, #1
   23f00:	beq	23f2c <__assert_fail@plt+0x12098>
   23f04:	mov	r0, #0
   23f08:	add	r2, r0, r1
   23f0c:	lsr	r3, r2, #1
   23f10:	ldr	r7, [r5, r3, lsl #2]
   23f14:	cmp	r7, r6
   23f18:	movge	r1, r3
   23f1c:	addlt	r0, lr, r2, lsr #1
   23f20:	cmp	r0, r1
   23f24:	bcc	23f08 <__assert_fail@plt+0x12074>
   23f28:	b	23f30 <__assert_fail@plt+0x1209c>
   23f2c:	mov	r0, #0
   23f30:	ldr	r0, [r5, r0, lsl #2]
   23f34:	cmp	r0, r6
   23f38:	bne	23f54 <__assert_fail@plt+0x120c0>
   23f3c:	ldr	r7, [sp, #68]	; 0x44
   23f40:	ldr	r3, [sp, #84]	; 0x54
   23f44:	mov	r6, r4
   23f48:	cmn	r6, #1
   23f4c:	bgt	24120 <__assert_fail@plt+0x1228c>
   23f50:	b	23ea4 <__assert_fail@plt+0x12010>
   23f54:	ldr	r7, [sp, #68]	; 0x44
   23f58:	ldr	r3, [sp, #84]	; 0x54
   23f5c:	cmp	r8, #0
   23f60:	beq	24118 <__assert_fail@plt+0x12284>
   23f64:	ldr	r5, [r8]
   23f68:	ldr	r0, [r8, #4]
   23f6c:	add	r1, r5, #1
   23f70:	cmp	r1, r0
   23f74:	str	r1, [r8]
   23f78:	bne	23fac <__assert_fail@plt+0x12118>
   23f7c:	ldr	r0, [r8, #8]
   23f80:	add	r1, r1, r1, lsl #1
   23f84:	lsl	r1, r1, #4
   23f88:	bl	36fe4 <__assert_fail@plt+0x25150>
   23f8c:	cmp	r0, #0
   23f90:	beq	24644 <__assert_fail@plt+0x127b0>
   23f94:	str	r0, [r8, #8]
   23f98:	ldr	r3, [sp, #84]	; 0x54
   23f9c:	ldr	r1, [r8, #4]
   23fa0:	lsl	r1, r1, #1
   23fa4:	str	r1, [r8, #4]
   23fa8:	b	23fb0 <__assert_fail@plt+0x1211c>
   23fac:	ldr	r0, [r8, #8]
   23fb0:	add	r5, r5, r5, lsl #1
   23fb4:	str	r3, [r0, r5, lsl #3]!
   23fb8:	str	r4, [r0, #4]
   23fbc:	ldr	r0, [sp, #56]	; 0x38
   23fc0:	bl	36fb4 <__assert_fail@plt+0x25120>
   23fc4:	ldr	r1, [r8, #8]
   23fc8:	cmp	r0, #0
   23fcc:	add	r4, r1, r5, lsl #3
   23fd0:	str	r0, [r4, #8]!
   23fd4:	beq	24644 <__assert_fail@plt+0x127b0>
   23fd8:	ldr	sl, [sp, #76]	; 0x4c
   23fdc:	ldr	r1, [fp, #20]
   23fe0:	mov	r2, sl
   23fe4:	bl	11a8c <memcpy@plt>
   23fe8:	ldr	r0, [r4]
   23fec:	ldr	r1, [sp, #80]	; 0x50
   23ff0:	mov	r2, sl
   23ff4:	add	r0, r0, r7, lsl #3
   23ff8:	bl	11a8c <memcpy@plt>
   23ffc:	ldr	r0, [r8, #8]
   24000:	add	r5, r0, r5, lsl #3
   24004:	ldr	r0, [sp, #92]	; 0x5c
   24008:	mov	r7, r5
   2400c:	str	r0, [r7, #16]!
   24010:	cmp	r0, #1
   24014:	sub	sl, r7, #4
   24018:	blt	240fc <__assert_fail@plt+0x12268>
   2401c:	lsl	r4, r0, #2
   24020:	str	r0, [sl]
   24024:	mov	r0, r4
   24028:	bl	36fb4 <__assert_fail@plt+0x25120>
   2402c:	cmp	r0, #0
   24030:	str	r0, [r5, #20]
   24034:	beq	246cc <__assert_fail@plt+0x12838>
   24038:	ldr	r1, [sp, #88]	; 0x58
   2403c:	mov	r2, r4
   24040:	bl	11a8c <memcpy@plt>
   24044:	ldr	r7, [sp, #68]	; 0x44
   24048:	b	24110 <__assert_fail@plt+0x1227c>
   2404c:	mov	r0, #4
   24050:	bl	36fb4 <__assert_fail@plt+0x25120>
   24054:	cmp	r0, #0
   24058:	beq	2463c <__assert_fail@plt+0x127a8>
   2405c:	mov	sl, r0
   24060:	str	r4, [r0]
   24064:	mov	r0, #1
   24068:	str	r0, [sp, #92]	; 0x5c
   2406c:	mov	r0, #1
   24070:	str	r0, [sp, #72]	; 0x48
   24074:	ldr	r3, [sp, #84]	; 0x54
   24078:	mov	lr, #1
   2407c:	ldr	r0, [sp, #204]	; 0xcc
   24080:	str	sl, [sp, #88]	; 0x58
   24084:	ldr	r0, [r0, r3, lsl #2]
   24088:	ldr	r1, [r0, #8]
   2408c:	cmp	r1, #1
   24090:	blt	23bd0 <__assert_fail@plt+0x11d3c>
   24094:	ldr	r2, [r5, #20]
   24098:	add	r3, r4, r4, lsl #1
   2409c:	ldr	ip, [r0, #12]
   240a0:	add	r2, r2, r3, lsl #2
   240a4:	ldr	r2, [r2, #8]
   240a8:	ldr	r6, [r2]
   240ac:	subs	r2, r1, #1
   240b0:	mov	r1, #0
   240b4:	beq	240d8 <__assert_fail@plt+0x12244>
   240b8:	add	r3, r1, r2
   240bc:	lsr	r7, r3, #1
   240c0:	ldr	r0, [ip, r7, lsl #2]
   240c4:	cmp	r0, r6
   240c8:	movge	r2, r7
   240cc:	addlt	r1, lr, r3, lsr #1
   240d0:	cmp	r1, r2
   240d4:	bcc	240b8 <__assert_fail@plt+0x12224>
   240d8:	ldr	r0, [ip, r1, lsl #2]
   240dc:	ldr	r7, [sp, #68]	; 0x44
   240e0:	ldr	r1, [sp, #100]	; 0x64
   240e4:	cmp	r0, r6
   240e8:	bne	23bc4 <__assert_fail@plt+0x11d30>
   240ec:	ldr	r3, [sp, #84]	; 0x54
   240f0:	cmn	r6, #1
   240f4:	bgt	24120 <__assert_fail@plt+0x1228c>
   240f8:	b	23ea4 <__assert_fail@plt+0x12010>
   240fc:	ldr	r7, [sp, #68]	; 0x44
   24100:	mov	r0, #0
   24104:	str	r0, [sl]
   24108:	str	r0, [sl, #4]
   2410c:	str	r0, [sl, #8]
   24110:	ldr	r3, [sp, #84]	; 0x54
   24114:	mov	lr, #1
   24118:	cmn	r6, #1
   2411c:	ble	23ea4 <__assert_fail@plt+0x12010>
   24120:	ldr	r5, [fp, #20]
   24124:	ldr	sl, [sp, #88]	; 0x58
   24128:	mov	r4, r6
   2412c:	ldr	r0, [r5, #4]
   24130:	ldr	r6, [sp, #64]	; 0x40
   24134:	cmp	r3, r0
   24138:	ble	23854 <__assert_fail@plt+0x119c0>
   2413c:	b	237a8 <__assert_fail@plt+0x11914>
   24140:	ldr	r0, [r5, #12]
   24144:	add	r9, r6, r9
   24148:	mov	lr, #1
   2414c:	mov	r3, r9
   24150:	ldr	r9, [sp, #60]	; 0x3c
   24154:	ldr	r6, [r0, r4, lsl #2]
   24158:	ldr	r0, [sp, #196]	; 0xc4
   2415c:	cmp	r3, r0
   24160:	ble	23c18 <__assert_fail@plt+0x11d84>
   24164:	b	23cd4 <__assert_fail@plt+0x11e40>
   24168:	ldr	r0, [sp, #72]	; 0x48
   2416c:	str	r6, [sp, #100]	; 0x64
   24170:	mov	r6, r9
   24174:	cmp	r0, r3
   24178:	bne	241a8 <__assert_fail@plt+0x12314>
   2417c:	ldr	r0, [sp, #92]	; 0x5c
   24180:	lsl	r1, r0, #3
   24184:	ldr	r0, [sp, #88]	; 0x58
   24188:	bl	36fe4 <__assert_fail@plt+0x25150>
   2418c:	cmp	r0, #0
   24190:	mov	r9, r6
   24194:	beq	24644 <__assert_fail@plt+0x127b0>
   24198:	ldr	r1, [sp, #92]	; 0x5c
   2419c:	str	r0, [sp, #88]	; 0x58
   241a0:	lsl	r1, r1, #1
   241a4:	str	r1, [sp, #72]	; 0x48
   241a8:	ldr	r0, [sp, #88]	; 0x58
   241ac:	ldr	r0, [r0]
   241b0:	cmp	r0, r4
   241b4:	ble	241f8 <__assert_fail@plt+0x12364>
   241b8:	ldr	r2, [sp, #92]	; 0x5c
   241bc:	cmp	r2, #1
   241c0:	blt	24234 <__assert_fail@plt+0x123a0>
   241c4:	ldr	r0, [sp, #88]	; 0x58
   241c8:	ldr	r2, [sp, #92]	; 0x5c
   241cc:	add	r1, r0, r2, lsl #2
   241d0:	add	r0, r2, #1
   241d4:	mov	r2, r1
   241d8:	ldr	r3, [r2, #-4]!
   241dc:	sub	r0, r0, #1
   241e0:	cmp	r0, #1
   241e4:	str	r3, [r1]
   241e8:	mov	r1, r2
   241ec:	bgt	241d8 <__assert_fail@plt+0x12344>
   241f0:	sub	r2, r0, #1
   241f4:	b	24234 <__assert_fail@plt+0x123a0>
   241f8:	ldr	r0, [sp, #88]	; 0x58
   241fc:	ldr	r2, [sp, #92]	; 0x5c
   24200:	add	r0, r0, r2, lsl #2
   24204:	ldr	r1, [r0, #-4]
   24208:	cmp	r1, r4
   2420c:	ble	24234 <__assert_fail@plt+0x123a0>
   24210:	ldr	r2, [sp, #92]	; 0x5c
   24214:	sub	r2, r2, #2
   24218:	str	r1, [r0]
   2421c:	sub	r2, r2, #1
   24220:	ldr	r1, [r0, #-8]
   24224:	sub	r0, r0, #4
   24228:	cmp	r1, r4
   2422c:	bgt	24218 <__assert_fail@plt+0x12384>
   24230:	add	r2, r2, #2
   24234:	ldr	r3, [sp, #92]	; 0x5c
   24238:	ldr	r0, [sp, #88]	; 0x58
   2423c:	mov	r9, r6
   24240:	ldr	r7, [sp, #68]	; 0x44
   24244:	ldr	r6, [sp, #100]	; 0x64
   24248:	add	r3, r3, #1
   2424c:	str	r4, [r0, r2, lsl #2]
   24250:	b	23cb0 <__assert_fail@plt+0x11e1c>
   24254:	ldr	r0, [sp, #72]	; 0x48
   24258:	mov	r6, r9
   2425c:	cmp	r0, r1
   24260:	bne	24290 <__assert_fail@plt+0x123fc>
   24264:	ldr	r0, [sp, #92]	; 0x5c
   24268:	lsl	r1, r0, #3
   2426c:	ldr	r0, [sp, #88]	; 0x58
   24270:	bl	36fe4 <__assert_fail@plt+0x25150>
   24274:	cmp	r0, #0
   24278:	mov	r9, r6
   2427c:	beq	24644 <__assert_fail@plt+0x127b0>
   24280:	ldr	r1, [sp, #92]	; 0x5c
   24284:	str	r0, [sp, #88]	; 0x58
   24288:	lsl	r1, r1, #1
   2428c:	str	r1, [sp, #72]	; 0x48
   24290:	ldr	r0, [sp, #88]	; 0x58
   24294:	ldr	r0, [r0]
   24298:	cmp	r0, r4
   2429c:	ble	242e0 <__assert_fail@plt+0x1244c>
   242a0:	ldr	r2, [sp, #92]	; 0x5c
   242a4:	cmp	r2, #1
   242a8:	blt	2431c <__assert_fail@plt+0x12488>
   242ac:	ldr	r0, [sp, #88]	; 0x58
   242b0:	ldr	r2, [sp, #92]	; 0x5c
   242b4:	add	r1, r0, r2, lsl #2
   242b8:	add	r0, r2, #1
   242bc:	mov	r2, r1
   242c0:	ldr	r3, [r2, #-4]!
   242c4:	sub	r0, r0, #1
   242c8:	cmp	r0, #1
   242cc:	str	r3, [r1]
   242d0:	mov	r1, r2
   242d4:	bgt	242c0 <__assert_fail@plt+0x1242c>
   242d8:	sub	r2, r0, #1
   242dc:	b	2431c <__assert_fail@plt+0x12488>
   242e0:	ldr	r0, [sp, #88]	; 0x58
   242e4:	ldr	r2, [sp, #92]	; 0x5c
   242e8:	add	r0, r0, r2, lsl #2
   242ec:	ldr	r1, [r0, #-4]
   242f0:	cmp	r1, r4
   242f4:	ble	2431c <__assert_fail@plt+0x12488>
   242f8:	ldr	r2, [sp, #92]	; 0x5c
   242fc:	sub	r2, r2, #2
   24300:	str	r1, [r0]
   24304:	sub	r2, r2, #1
   24308:	ldr	r1, [r0, #-8]
   2430c:	sub	r0, r0, #4
   24310:	cmp	r1, r4
   24314:	bgt	24300 <__assert_fail@plt+0x1246c>
   24318:	add	r2, r2, #2
   2431c:	ldr	r1, [sp, #92]	; 0x5c
   24320:	ldr	sl, [sp, #88]	; 0x58
   24324:	ldr	r7, [sp, #68]	; 0x44
   24328:	mov	r9, r6
   2432c:	add	r1, r1, #1
   24330:	str	r4, [sl, r2, lsl #2]
   24334:	str	r1, [sp, #92]	; 0x5c
   24338:	b	24074 <__assert_fail@plt+0x121e0>
   2433c:	mov	r6, #0
   24340:	b	2205c <__assert_fail@plt+0x101c8>
   24344:	mov	r9, #12
   24348:	b	2454c <__assert_fail@plt+0x126b8>
   2434c:	mov	r9, sl
   24350:	b	24360 <__assert_fail@plt+0x124cc>
   24354:	mov	r9, r0
   24358:	b	2454c <__assert_fail@plt+0x126b8>
   2435c:	mov	r5, #1
   24360:	ldr	r0, [sp, #88]	; 0x58
   24364:	bl	17b10 <__assert_fail@plt+0x5c7c>
   24368:	ldr	r0, [fp, #-184]	; 0xffffff48
   2436c:	cmp	r0, r9
   24370:	beq	24378 <__assert_fail@plt+0x124e4>
   24374:	bl	17b10 <__assert_fail@plt+0x5c7c>
   24378:	mov	r0, #16
   2437c:	cmp	r5, #0
   24380:	str	r0, [fp, #-188]	; 0xffffff44
   24384:	mov	r0, #0
   24388:	str	r0, [fp, #-192]	; 0xffffff40
   2438c:	str	r9, [fp, #-184]	; 0xffffff48
   24390:	mov	r9, #1
   24394:	bne	2454c <__assert_fail@plt+0x126b8>
   24398:	ldr	r1, [r8]
   2439c:	ldr	r0, [r8, #8]
   243a0:	cmp	r1, #1
   243a4:	blt	243e4 <__assert_fail@plt+0x12550>
   243a8:	mov	r5, #0
   243ac:	mov	r6, #0
   243b0:	add	r0, r0, r5
   243b4:	ldr	r0, [r0, #20]
   243b8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   243bc:	ldr	r0, [r8, #8]
   243c0:	add	r0, r0, r5
   243c4:	ldr	r0, [r0, #8]
   243c8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   243cc:	ldr	r1, [r8]
   243d0:	ldr	r0, [r8, #8]
   243d4:	add	r6, r6, #1
   243d8:	add	r5, r5, #24
   243dc:	cmp	r6, r1
   243e0:	blt	243b0 <__assert_fail@plt+0x1251c>
   243e4:	bl	17b10 <__assert_fail@plt+0x5c7c>
   243e8:	b	2454c <__assert_fail@plt+0x126b8>
   243ec:	ldr	r5, [fp, #20]
   243f0:	ldr	r9, [sp, #60]	; 0x3c
   243f4:	mov	r0, sl
   243f8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   243fc:	ldr	r0, [fp, #-184]	; 0xffffff48
   24400:	cmp	r0, r9
   24404:	beq	2440c <__assert_fail@plt+0x12578>
   24408:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2440c:	mov	r0, #16
   24410:	cmp	r8, #0
   24414:	str	r0, [fp, #-188]	; 0xffffff44
   24418:	mov	r0, #0
   2441c:	str	r0, [fp, #-192]	; 0xffffff40
   24420:	str	r9, [fp, #-184]	; 0xffffff48
   24424:	beq	24480 <__assert_fail@plt+0x125ec>
   24428:	ldr	r1, [r8]
   2442c:	ldr	r0, [r8, #8]
   24430:	mov	r6, r5
   24434:	cmp	r1, #1
   24438:	blt	24478 <__assert_fail@plt+0x125e4>
   2443c:	mov	r4, #0
   24440:	mov	r5, #0
   24444:	add	r0, r0, r4
   24448:	ldr	r0, [r0, #20]
   2444c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   24450:	ldr	r0, [r8, #8]
   24454:	add	r0, r0, r4
   24458:	ldr	r0, [r0, #8]
   2445c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   24460:	ldr	r1, [r8]
   24464:	ldr	r0, [r8, #8]
   24468:	add	r5, r5, #1
   2446c:	add	r4, r4, #24
   24470:	cmp	r5, r1
   24474:	blt	24444 <__assert_fail@plt+0x125b0>
   24478:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2447c:	mov	r5, r6
   24480:	ldrb	r0, [sp, #180]	; 0xb4
   24484:	cmp	r0, #0
   24488:	bne	245c4 <__assert_fail@plt+0x12730>
   2448c:	ldr	r1, [fp, #-200]	; 0xffffff38
   24490:	ldr	r4, [sp, #28]
   24494:	add	r0, r5, #4
   24498:	mov	r2, r7
   2449c:	ldr	r3, [r0, #-4]
   244a0:	cmn	r3, #1
   244a4:	addne	r3, r3, r1
   244a8:	strne	r3, [r0, #-4]
   244ac:	ldrne	r3, [r0]
   244b0:	addne	r3, r3, r1
   244b4:	strne	r3, [r0]
   244b8:	add	r0, r0, #8
   244bc:	subs	r2, r2, #1
   244c0:	bne	2449c <__assert_fail@plt+0x12608>
   244c4:	cmp	r4, #1
   244c8:	blt	244dc <__assert_fail@plt+0x12648>
   244cc:	add	r0, r5, r7, lsl #3
   244d0:	lsl	r2, r4, #3
   244d4:	mov	r1, #255	; 0xff
   244d8:	bl	11cd8 <memset@plt>
   244dc:	ldr	r0, [sp, #96]	; 0x60
   244e0:	mov	r9, #0
   244e4:	ldr	r0, [r0, #132]	; 0x84
   244e8:	cmp	r0, #0
   244ec:	beq	2454c <__assert_fail@plt+0x126b8>
   244f0:	cmp	r7, #2
   244f4:	bcc	2454c <__assert_fail@plt+0x126b8>
   244f8:	ldr	r1, [fp, #16]
   244fc:	ldr	r2, [sp, #28]
   24500:	mov	r6, r5
   24504:	sub	r1, r1, #1
   24508:	sub	r1, r1, r2
   2450c:	mov	r2, #0
   24510:	ldr	r3, [r0, r2, lsl #2]
   24514:	cmp	r2, r3
   24518:	beq	2453c <__assert_fail@plt+0x126a8>
   2451c:	add	r3, r6, r3, lsl #3
   24520:	add	r7, r6, r2, lsl #3
   24524:	ldr	r3, [r3, #8]
   24528:	str	r3, [r7, #8]
   2452c:	ldr	r3, [r0, r2, lsl #2]
   24530:	add	r3, r6, r3, lsl #3
   24534:	ldr	r3, [r3, #12]
   24538:	str	r3, [r7, #12]
   2453c:	add	r2, r2, #1
   24540:	cmp	r1, r2
   24544:	bne	24510 <__assert_fail@plt+0x1267c>
   24548:	mov	r9, #0
   2454c:	ldr	r0, [sp, #204]	; 0xcc
   24550:	bl	17b10 <__assert_fail@plt+0x5c7c>
   24554:	ldr	r0, [sp, #96]	; 0x60
   24558:	ldr	r0, [r0, #76]	; 0x4c
   2455c:	cmp	r0, #0
   24560:	beq	2457c <__assert_fail@plt+0x126e8>
   24564:	add	r0, sp, #104	; 0x68
   24568:	bl	2c5b0 <__assert_fail@plt+0x1a71c>
   2456c:	ldr	r0, [sp, #236]	; 0xec
   24570:	bl	17b10 <__assert_fail@plt+0x5c7c>
   24574:	ldr	r0, [sp, #220]	; 0xdc
   24578:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2457c:	ldr	r0, [sp, #112]	; 0x70
   24580:	bl	17b10 <__assert_fail@plt+0x5c7c>
   24584:	ldr	r0, [sp, #116]	; 0x74
   24588:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2458c:	ldrb	r0, [sp, #179]	; 0xb3
   24590:	cmp	r0, #0
   24594:	beq	245a0 <__assert_fail@plt+0x1270c>
   24598:	ldr	r0, [sp, #108]	; 0x6c
   2459c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   245a0:	mov	r0, r9
   245a4:	sub	sp, fp, #28
   245a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   245ac:	mov	r0, r6
   245b0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   245b4:	mov	r0, #0
   245b8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   245bc:	mov	r9, #12
   245c0:	b	2454c <__assert_fail@plt+0x126b8>
   245c4:	ldr	ip, [sp, #24]
   245c8:	ldr	r4, [sp, #28]
   245cc:	add	r0, r5, #4
   245d0:	mov	r1, r7
   245d4:	ldr	r2, [r0, #-4]
   245d8:	cmn	r2, #1
   245dc:	beq	24624 <__assert_fail@plt+0x12790>
   245e0:	ldr	r7, [sp, #132]	; 0x84
   245e4:	ldr	r3, [sp, #116]	; 0x74
   245e8:	mov	r6, ip
   245ec:	cmp	r2, r7
   245f0:	addne	r6, r3, r2, lsl #2
   245f4:	ldr	r2, [r6]
   245f8:	str	r2, [r0, #-4]
   245fc:	ldr	r6, [r0]
   24600:	cmp	r6, r7
   24604:	mov	r7, ip
   24608:	addne	r7, r3, r6, lsl #2
   2460c:	ldr	r3, [r7]
   24610:	ldr	r7, [fp, #-200]	; 0xffffff38
   24614:	add	r2, r2, r7
   24618:	add	r3, r3, r7
   2461c:	ldr	r7, [sp, #68]	; 0x44
   24620:	stmda	r0, {r2, r3}
   24624:	add	r0, r0, #8
   24628:	subs	r1, r1, #1
   2462c:	bne	245d4 <__assert_fail@plt+0x12740>
   24630:	b	244c4 <__assert_fail@plt+0x12630>
   24634:	mov	r9, #1
   24638:	b	2454c <__assert_fail@plt+0x126b8>
   2463c:	mov	r0, #0
   24640:	str	r0, [sp, #88]	; 0x58
   24644:	ldr	r0, [sp, #88]	; 0x58
   24648:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2464c:	ldr	r0, [fp, #-184]	; 0xffffff48
   24650:	cmp	r0, r9
   24654:	beq	2465c <__assert_fail@plt+0x127c8>
   24658:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2465c:	mov	r0, #16
   24660:	cmp	r8, #0
   24664:	str	r0, [fp, #-188]	; 0xffffff44
   24668:	mov	r0, #0
   2466c:	str	r0, [fp, #-192]	; 0xffffff40
   24670:	str	r9, [fp, #-184]	; 0xffffff48
   24674:	mov	r9, #12
   24678:	beq	2454c <__assert_fail@plt+0x126b8>
   2467c:	ldr	r1, [r8]
   24680:	ldr	r0, [r8, #8]
   24684:	cmp	r1, #1
   24688:	blt	243e4 <__assert_fail@plt+0x12550>
   2468c:	mov	r5, #0
   24690:	mov	r6, #0
   24694:	add	r0, r0, r5
   24698:	ldr	r0, [r0, #20]
   2469c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   246a0:	ldr	r0, [r8, #8]
   246a4:	add	r0, r0, r5
   246a8:	ldr	r0, [r0, #8]
   246ac:	bl	17b10 <__assert_fail@plt+0x5c7c>
   246b0:	ldr	r1, [r8]
   246b4:	ldr	r0, [r8, #8]
   246b8:	add	r6, r6, #1
   246bc:	add	r5, r5, #24
   246c0:	cmp	r6, r1
   246c4:	blt	24694 <__assert_fail@plt+0x12800>
   246c8:	b	243e4 <__assert_fail@plt+0x12550>
   246cc:	mov	r0, #0
   246d0:	str	r0, [r7]
   246d4:	str	r0, [sl]
   246d8:	b	24644 <__assert_fail@plt+0x127b0>
   246dc:	push	{fp, lr}
   246e0:	mov	fp, sp
   246e4:	sub	sp, sp, #16
   246e8:	mov	ip, #1
   246ec:	str	r2, [sp, #4]
   246f0:	str	ip, [sp, #12]
   246f4:	mov	ip, #0
   246f8:	str	ip, [sp]
   246fc:	ldr	ip, [fp, #8]
   24700:	str	ip, [sp, #8]
   24704:	bl	24710 <__assert_fail@plt+0x1287c>
   24708:	mov	sp, fp
   2470c:	pop	{fp, pc}
   24710:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24714:	add	fp, sp, #28
   24718:	sub	sp, sp, #44	; 0x2c
   2471c:	mvn	r4, #0
   24720:	cmp	r3, #0
   24724:	blt	24a74 <__assert_fail@plt+0x12be0>
   24728:	mov	r6, r3
   2472c:	mov	r8, r2
   24730:	cmp	r3, r2
   24734:	bgt	24a74 <__assert_fail@plt+0x12be0>
   24738:	mov	r5, r0
   2473c:	ldr	r0, [fp, #8]
   24740:	mov	r7, r8
   24744:	str	r1, [sp, #24]
   24748:	movw	r1, #0
   2474c:	ldr	sl, [r5]
   24750:	movt	r1, #0
   24754:	add	r0, r0, r6
   24758:	cmp	r0, r8
   2475c:	bicle	r7, r0, r0, asr #31
   24760:	movw	r0, #0
   24764:	movt	r0, #0
   24768:	orrs	r4, r1, r0
   2476c:	beq	24778 <__assert_fail@plt+0x128e4>
   24770:	add	r0, sl, #136	; 0x88
   24774:	bl	11a68 <pthread_mutex_lock@plt>
   24778:	ldrb	r0, [r5, #28]
   2477c:	ldr	r9, [fp, #16]
   24780:	cmp	r7, r6
   24784:	ubfx	r1, r0, #5, #2
   24788:	str	r4, [sp, #28]
   2478c:	str	r6, [sp, #36]	; 0x24
   24790:	str	r1, [sp, #20]
   24794:	ble	24830 <__assert_fail@plt+0x1299c>
   24798:	tst	r0, #8
   2479c:	bne	24830 <__assert_fail@plt+0x1299c>
   247a0:	ldr	r6, [r5, #16]
   247a4:	cmp	r6, #0
   247a8:	beq	24830 <__assert_fail@plt+0x1299c>
   247ac:	ldr	r4, [r5]
   247b0:	mov	r0, r6
   247b4:	mov	r1, #0
   247b8:	mov	r2, #256	; 0x100
   247bc:	bl	11cd8 <memset@plt>
   247c0:	ldr	r1, [r4, #36]	; 0x24
   247c4:	mov	r0, r5
   247c8:	mov	r2, r6
   247cc:	bl	2120c <__assert_fail@plt+0xf378>
   247d0:	ldr	r0, [r4, #36]	; 0x24
   247d4:	ldr	r1, [r4, #40]	; 0x28
   247d8:	cmp	r0, r1
   247dc:	beq	247f0 <__assert_fail@plt+0x1295c>
   247e0:	mov	r0, r5
   247e4:	mov	r2, r6
   247e8:	bl	2120c <__assert_fail@plt+0xf378>
   247ec:	ldr	r0, [r4, #36]	; 0x24
   247f0:	ldr	r1, [r4, #44]	; 0x2c
   247f4:	cmp	r0, r1
   247f8:	beq	2480c <__assert_fail@plt+0x12978>
   247fc:	mov	r0, r5
   24800:	mov	r2, r6
   24804:	bl	2120c <__assert_fail@plt+0xf378>
   24808:	ldr	r0, [r4, #36]	; 0x24
   2480c:	ldr	r1, [r4, #48]	; 0x30
   24810:	cmp	r0, r1
   24814:	beq	24824 <__assert_fail@plt+0x12990>
   24818:	mov	r0, r5
   2481c:	mov	r2, r6
   24820:	bl	2120c <__assert_fail@plt+0xf378>
   24824:	ldrb	r0, [r5, #28]
   24828:	orr	r0, r0, #8
   2482c:	strb	r0, [r5, #28]
   24830:	str	sl, [sp, #32]
   24834:	mov	sl, #1
   24838:	mov	r4, #0
   2483c:	cmp	r9, #0
   24840:	str	r5, [fp, #-32]	; 0xffffffe0
   24844:	beq	24884 <__assert_fail@plt+0x129f0>
   24848:	ldr	r6, [sp, #36]	; 0x24
   2484c:	ands	r1, r0, #16
   24850:	bne	248c0 <__assert_fail@plt+0x12a2c>
   24854:	and	r0, r0, #6
   24858:	cmp	r0, #4
   2485c:	bne	248b0 <__assert_fail@plt+0x12a1c>
   24860:	ldr	r0, [fp, #-32]	; 0xffffffe0
   24864:	ldr	sl, [r9]
   24868:	ldr	r0, [r0, #24]
   2486c:	cmp	sl, r0
   24870:	bhi	248b8 <__assert_fail@plt+0x12a24>
   24874:	cmp	sl, #1
   24878:	movwlt	r9, #0
   2487c:	movwlt	sl, #1
   24880:	b	248bc <__assert_fail@plt+0x12a28>
   24884:	ldr	r6, [sp, #36]	; 0x24
   24888:	lsl	r0, sl, #3
   2488c:	bl	36fb4 <__assert_fail@plt+0x25120>
   24890:	cmp	r0, #0
   24894:	bne	248d0 <__assert_fail@plt+0x12a3c>
   24898:	ldr	r5, [sp, #32]
   2489c:	mvn	r4, #1
   248a0:	ldr	r0, [sp, #28]
   248a4:	cmp	r0, #0
   248a8:	bne	24a6c <__assert_fail@plt+0x12bd8>
   248ac:	b	24a74 <__assert_fail@plt+0x12be0>
   248b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   248b4:	ldr	r0, [r0, #24]
   248b8:	add	sl, r0, #1
   248bc:	mov	r4, r9
   248c0:	lsl	r0, sl, #3
   248c4:	bl	36fb4 <__assert_fail@plt+0x25120>
   248c8:	cmp	r0, #0
   248cc:	beq	24898 <__assert_fail@plt+0x12a04>
   248d0:	mov	r9, r0
   248d4:	ldr	r0, [fp, #12]
   248d8:	str	r7, [sp]
   248dc:	mov	r2, r8
   248e0:	mov	r3, r6
   248e4:	stmib	sp, {r0, sl}
   248e8:	str	r9, [sp, #12]
   248ec:	ldr	r0, [sp, #20]
   248f0:	ldr	r1, [sp, #24]
   248f4:	str	r0, [sp, #16]
   248f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   248fc:	bl	21f84 <__assert_fail@plt+0x100f0>
   24900:	cmp	r0, #0
   24904:	beq	24918 <__assert_fail@plt+0x12a84>
   24908:	mvn	r4, #1
   2490c:	cmp	r0, #1
   24910:	mvneq	r4, #0
   24914:	b	24a54 <__assert_fail@plt+0x12bc0>
   24918:	cmp	r4, #0
   2491c:	beq	24a38 <__assert_fail@plt+0x12ba4>
   24920:	ldr	r0, [fp, #-32]	; 0xffffffe0
   24924:	add	r6, sl, #1
   24928:	ldrb	r0, [r0, #28]
   2492c:	ubfx	r0, r0, #1, #2
   24930:	cmp	r0, #1
   24934:	beq	2499c <__assert_fail@plt+0x12b08>
   24938:	mov	r8, #2
   2493c:	cmp	r0, #0
   24940:	bne	249ac <__assert_fail@plt+0x12b18>
   24944:	lsl	r7, r6, #2
   24948:	mov	r0, r7
   2494c:	bl	36fb4 <__assert_fail@plt+0x25120>
   24950:	mov	r8, #0
   24954:	cmp	r0, #0
   24958:	str	r0, [r4, #4]
   2495c:	beq	24b8c <__assert_fail@plt+0x12cf8>
   24960:	mov	r0, r7
   24964:	bl	36fb4 <__assert_fail@plt+0x25120>
   24968:	cmp	r0, #0
   2496c:	str	r0, [r4, #8]
   24970:	beq	24b84 <__assert_fail@plt+0x12cf0>
   24974:	str	r6, [r4]
   24978:	mov	r8, #1
   2497c:	cmp	sl, #1
   24980:	bge	249b4 <__assert_fail@plt+0x12b20>
   24984:	mov	sl, #0
   24988:	ldr	r0, [r4]
   2498c:	ldr	r6, [sp, #36]	; 0x24
   24990:	cmp	sl, r0
   24994:	bcs	24a1c <__assert_fail@plt+0x12b88>
   24998:	b	249fc <__assert_fail@plt+0x12b68>
   2499c:	ldr	r0, [r4]
   249a0:	mov	r8, #1
   249a4:	cmp	r6, r0
   249a8:	bhi	24b34 <__assert_fail@plt+0x12ca0>
   249ac:	cmp	sl, #1
   249b0:	blt	24984 <__assert_fail@plt+0x12af0>
   249b4:	ldmib	r4, {r6, r7}
   249b8:	mov	r2, #0
   249bc:	cmp	sl, #3
   249c0:	bhi	24a80 <__assert_fail@plt+0x12bec>
   249c4:	add	r0, r9, r2, lsl #3
   249c8:	add	r0, r0, #4
   249cc:	ldr	r1, [r0, #-4]
   249d0:	str	r1, [r6, r2, lsl #2]
   249d4:	ldr	r1, [r0]
   249d8:	add	r0, r0, #8
   249dc:	str	r1, [r7, r2, lsl #2]
   249e0:	add	r2, r2, #1
   249e4:	cmp	sl, r2
   249e8:	bne	249cc <__assert_fail@plt+0x12b38>
   249ec:	ldr	r0, [r4]
   249f0:	ldr	r6, [sp, #36]	; 0x24
   249f4:	cmp	sl, r0
   249f8:	bcs	24a1c <__assert_fail@plt+0x12b88>
   249fc:	ldmib	r4, {r0, r1}
   24a00:	mvn	r2, #0
   24a04:	str	r2, [r1, sl, lsl #2]
   24a08:	str	r2, [r0, sl, lsl #2]
   24a0c:	add	sl, sl, #1
   24a10:	ldr	r3, [r4]
   24a14:	cmp	sl, r3
   24a18:	bcc	24a04 <__assert_fail@plt+0x12b70>
   24a1c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   24a20:	cmp	r8, #0
   24a24:	ldrb	r0, [r1, #28]
   24a28:	and	r0, r0, #249	; 0xf9
   24a2c:	orr	r0, r0, r8, lsl #1
   24a30:	strb	r0, [r1, #28]
   24a34:	beq	24a50 <__assert_fail@plt+0x12bbc>
   24a38:	ldr	r0, [fp, #20]
   24a3c:	cmp	r0, #0
   24a40:	ldreq	r4, [r9]
   24a44:	ldrne	r0, [r9, #4]
   24a48:	subne	r4, r0, r6
   24a4c:	b	24a54 <__assert_fail@plt+0x12bc0>
   24a50:	mvn	r4, #1
   24a54:	ldr	r5, [sp, #32]
   24a58:	mov	r0, r9
   24a5c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   24a60:	ldr	r0, [sp, #28]
   24a64:	cmp	r0, #0
   24a68:	beq	24a74 <__assert_fail@plt+0x12be0>
   24a6c:	add	r0, r5, #136	; 0x88
   24a70:	bl	1199c <pthread_mutex_unlock@plt>
   24a74:	mov	r0, r4
   24a78:	sub	sp, fp, #28
   24a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24a80:	add	ip, r7, sl, lsl #2
   24a84:	mov	lr, #0
   24a88:	add	r5, r9, sl, lsl #3
   24a8c:	str	r8, [sp, #24]
   24a90:	mov	r8, #0
   24a94:	add	r3, r6, sl, lsl #2
   24a98:	mov	r1, #0
   24a9c:	mov	r0, #0
   24aa0:	mov	r2, #0
   24aa4:	cmp	r9, ip
   24aa8:	movwcc	lr, #1
   24aac:	cmp	r5, r7
   24ab0:	movwhi	r8, #1
   24ab4:	cmp	r9, r3
   24ab8:	movwcc	r1, #1
   24abc:	cmp	r5, r6
   24ac0:	mov	r5, #0
   24ac4:	movwhi	r5, #1
   24ac8:	cmp	r7, r3
   24acc:	mov	r3, #0
   24ad0:	movwcc	r3, #1
   24ad4:	cmp	r6, ip
   24ad8:	movwcc	r0, #1
   24adc:	tst	r0, r3
   24ae0:	bne	24b2c <__assert_fail@plt+0x12c98>
   24ae4:	ands	r0, r5, r1
   24ae8:	bne	24b2c <__assert_fail@plt+0x12c98>
   24aec:	ands	r0, r8, lr
   24af0:	ldr	r8, [sp, #24]
   24af4:	bne	249c4 <__assert_fail@plt+0x12b30>
   24af8:	bic	r2, sl, #3
   24afc:	mov	r1, r7
   24b00:	mov	r0, r6
   24b04:	mov	r5, r9
   24b08:	mov	r3, r2
   24b0c:	vld2.32	{d16-d19}, [r5]!
   24b10:	subs	r3, r3, #4
   24b14:	vst1.32	{d16-d17}, [r0]!
   24b18:	vst1.32	{d18-d19}, [r1]!
   24b1c:	bne	24b0c <__assert_fail@plt+0x12c78>
   24b20:	cmp	sl, r2
   24b24:	bne	249c4 <__assert_fail@plt+0x12b30>
   24b28:	b	249ec <__assert_fail@plt+0x12b58>
   24b2c:	ldr	r8, [sp, #24]
   24b30:	b	249c4 <__assert_fail@plt+0x12b30>
   24b34:	ldr	r0, [r4, #4]
   24b38:	lsl	r7, r6, #2
   24b3c:	mov	r1, r7
   24b40:	bl	36fe4 <__assert_fail@plt+0x25150>
   24b44:	mov	r8, #0
   24b48:	cmp	r0, #0
   24b4c:	beq	24b8c <__assert_fail@plt+0x12cf8>
   24b50:	mov	r5, r0
   24b54:	ldr	r0, [r4, #8]
   24b58:	mov	r1, r7
   24b5c:	bl	36fe4 <__assert_fail@plt+0x25150>
   24b60:	cmp	r0, #0
   24b64:	beq	24b94 <__assert_fail@plt+0x12d00>
   24b68:	str	r6, [r4]
   24b6c:	str	r5, [r4, #4]
   24b70:	str	r0, [r4, #8]
   24b74:	mov	r8, #1
   24b78:	cmp	sl, #1
   24b7c:	bge	249b4 <__assert_fail@plt+0x12b20>
   24b80:	b	24984 <__assert_fail@plt+0x12af0>
   24b84:	ldr	r0, [r4, #4]
   24b88:	bl	17b10 <__assert_fail@plt+0x5c7c>
   24b8c:	ldr	r6, [sp, #36]	; 0x24
   24b90:	b	24a1c <__assert_fail@plt+0x12b88>
   24b94:	mov	r0, r5
   24b98:	b	24b88 <__assert_fail@plt+0x12cf4>
   24b9c:	push	{fp, lr}
   24ba0:	mov	fp, sp
   24ba4:	sub	sp, sp, #16
   24ba8:	mov	ip, #0
   24bac:	str	r2, [sp, #4]
   24bb0:	str	ip, [sp, #12]
   24bb4:	ldr	ip, [fp, #12]
   24bb8:	str	ip, [sp, #8]
   24bbc:	ldr	ip, [fp, #8]
   24bc0:	str	ip, [sp]
   24bc4:	bl	24710 <__assert_fail@plt+0x1287c>
   24bc8:	mov	sp, fp
   24bcc:	pop	{fp, pc}
   24bd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24bd4:	add	fp, sp, #28
   24bd8:	sub	sp, sp, #20
   24bdc:	ldr	r4, [fp, #8]
   24be0:	mov	r8, r1
   24be4:	mov	r1, r0
   24be8:	mov	r6, r2
   24bec:	orr	r0, r4, r2
   24bf0:	ldr	r2, [fp, #20]
   24bf4:	orr	r0, r0, r2
   24bf8:	cmp	r0, #0
   24bfc:	blt	24cbc <__assert_fail@plt+0x12e28>
   24c00:	adds	sl, r6, r4
   24c04:	bvs	24cbc <__assert_fail@plt+0x12e28>
   24c08:	mov	r5, #0
   24c0c:	cmp	r4, #1
   24c10:	blt	24c68 <__assert_fail@plt+0x12dd4>
   24c14:	mov	r9, r3
   24c18:	cmp	r6, #1
   24c1c:	blt	24c70 <__assert_fail@plt+0x12ddc>
   24c20:	mov	r0, sl
   24c24:	mov	r5, r1
   24c28:	bl	36fb4 <__assert_fail@plt+0x25120>
   24c2c:	cmp	r0, #0
   24c30:	beq	24cbc <__assert_fail@plt+0x12e28>
   24c34:	mov	r1, r8
   24c38:	mov	r2, r6
   24c3c:	mov	r7, r0
   24c40:	bl	11a8c <memcpy@plt>
   24c44:	add	r0, r7, r6
   24c48:	mov	r1, r9
   24c4c:	mov	r2, r4
   24c50:	bl	11a8c <memcpy@plt>
   24c54:	ldr	r2, [fp, #20]
   24c58:	mov	r1, r5
   24c5c:	mov	r4, r7
   24c60:	mov	r5, #0
   24c64:	b	24c78 <__assert_fail@plt+0x12de4>
   24c68:	mov	r7, r8
   24c6c:	b	24c74 <__assert_fail@plt+0x12de0>
   24c70:	mov	r7, r9
   24c74:	mov	r4, #0
   24c78:	ldr	r0, [fp, #16]
   24c7c:	ldr	r3, [fp, #12]
   24c80:	mov	r6, #1
   24c84:	str	r2, [sp, #4]
   24c88:	mov	r2, sl
   24c8c:	str	r5, [sp]
   24c90:	str	r6, [sp, #12]
   24c94:	str	r0, [sp, #8]
   24c98:	mov	r0, r1
   24c9c:	mov	r1, r7
   24ca0:	bl	24710 <__assert_fail@plt+0x1287c>
   24ca4:	mov	r5, r0
   24ca8:	mov	r0, r4
   24cac:	bl	17b10 <__assert_fail@plt+0x5c7c>
   24cb0:	mov	r0, r5
   24cb4:	sub	sp, fp, #28
   24cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24cbc:	mvn	r0, #1
   24cc0:	sub	sp, fp, #28
   24cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24cc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24ccc:	add	fp, sp, #28
   24cd0:	sub	sp, sp, #20
   24cd4:	ldr	r4, [fp, #8]
   24cd8:	mov	r8, r1
   24cdc:	mov	r1, r0
   24ce0:	mov	r6, r2
   24ce4:	orr	r0, r4, r2
   24ce8:	ldr	r2, [fp, #24]
   24cec:	orr	r0, r0, r2
   24cf0:	cmp	r0, #0
   24cf4:	blt	24db4 <__assert_fail@plt+0x12f20>
   24cf8:	adds	sl, r6, r4
   24cfc:	bvs	24db4 <__assert_fail@plt+0x12f20>
   24d00:	mov	r5, #0
   24d04:	cmp	r4, #1
   24d08:	blt	24d60 <__assert_fail@plt+0x12ecc>
   24d0c:	mov	r9, r3
   24d10:	cmp	r6, #1
   24d14:	blt	24d68 <__assert_fail@plt+0x12ed4>
   24d18:	mov	r0, sl
   24d1c:	mov	r5, r1
   24d20:	bl	36fb4 <__assert_fail@plt+0x25120>
   24d24:	cmp	r0, #0
   24d28:	beq	24db4 <__assert_fail@plt+0x12f20>
   24d2c:	mov	r1, r8
   24d30:	mov	r2, r6
   24d34:	mov	r7, r0
   24d38:	bl	11a8c <memcpy@plt>
   24d3c:	add	r0, r7, r6
   24d40:	mov	r1, r9
   24d44:	mov	r2, r4
   24d48:	bl	11a8c <memcpy@plt>
   24d4c:	ldr	r2, [fp, #24]
   24d50:	mov	r1, r5
   24d54:	mov	r4, r7
   24d58:	mov	r5, #0
   24d5c:	b	24d70 <__assert_fail@plt+0x12edc>
   24d60:	mov	r7, r8
   24d64:	b	24d6c <__assert_fail@plt+0x12ed8>
   24d68:	mov	r7, r9
   24d6c:	mov	r4, #0
   24d70:	ldr	r0, [fp, #20]
   24d74:	ldr	r6, [fp, #16]
   24d78:	ldr	r3, [fp, #12]
   24d7c:	str	r2, [sp, #4]
   24d80:	mov	r2, sl
   24d84:	str	r5, [sp, #12]
   24d88:	str	r0, [sp, #8]
   24d8c:	mov	r0, r1
   24d90:	mov	r1, r7
   24d94:	str	r6, [sp]
   24d98:	bl	24710 <__assert_fail@plt+0x1287c>
   24d9c:	mov	r5, r0
   24da0:	mov	r0, r4
   24da4:	bl	17b10 <__assert_fail@plt+0x5c7c>
   24da8:	mov	r0, r5
   24dac:	sub	sp, fp, #28
   24db0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24db4:	mvn	r0, #1
   24db8:	sub	sp, fp, #28
   24dbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24dc0:	ldrb	ip, [r0, #28]
   24dc4:	cmp	r2, #0
   24dc8:	bic	ip, ip, #6
   24dcc:	orrne	ip, ip, #2
   24dd0:	strb	ip, [r0, #28]
   24dd4:	ldr	r0, [sp]
   24dd8:	moveq	r0, r2
   24ddc:	cmp	r2, #0
   24de0:	moveq	r3, r2
   24de4:	stm	r1, {r2, r3}
   24de8:	str	r0, [r1, #8]
   24dec:	bx	lr
   24df0:	push	{r4, sl, fp, lr}
   24df4:	add	fp, sp, #8
   24df8:	mov	r4, r0
   24dfc:	ldr	r0, [r0, #24]
   24e00:	bl	17b10 <__assert_fail@plt+0x5c7c>
   24e04:	ldr	r0, [r4, #36]	; 0x24
   24e08:	bl	17b10 <__assert_fail@plt+0x5c7c>
   24e0c:	ldr	r0, [r4, #40]	; 0x28
   24e10:	add	r1, r4, #4
   24e14:	cmp	r0, r1
   24e18:	beq	24e2c <__assert_fail@plt+0x12f98>
   24e1c:	ldr	r0, [r0, #8]
   24e20:	bl	17b10 <__assert_fail@plt+0x5c7c>
   24e24:	ldr	r0, [r4, #40]	; 0x28
   24e28:	bl	17b10 <__assert_fail@plt+0x5c7c>
   24e2c:	ldr	r0, [r4, #12]
   24e30:	bl	17b10 <__assert_fail@plt+0x5c7c>
   24e34:	ldr	r0, [r4, #48]	; 0x30
   24e38:	bl	17b10 <__assert_fail@plt+0x5c7c>
   24e3c:	ldr	r0, [r4, #44]	; 0x2c
   24e40:	bl	17b10 <__assert_fail@plt+0x5c7c>
   24e44:	mov	r0, r4
   24e48:	pop	{r4, sl, fp, lr}
   24e4c:	b	17b10 <__assert_fail@plt+0x5c7c>
   24e50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e54:	add	fp, sp, #28
   24e58:	sub	sp, sp, #92	; 0x5c
   24e5c:	mov	r9, r0
   24e60:	ldrb	r0, [r0, #74]	; 0x4a
   24e64:	ldr	r2, [r9, #36]	; 0x24
   24e68:	ldr	r1, [r9, #48]	; 0x30
   24e6c:	ldr	r4, [r9, #28]
   24e70:	cmp	r2, r1
   24e74:	movgt	r2, r1
   24e78:	cmp	r0, #0
   24e7c:	str	r2, [sp]
   24e80:	bne	24ea0 <__assert_fail@plt+0x1300c>
   24e84:	mov	r7, r9
   24e88:	ldr	r0, [r7, #64]!	; 0x40
   24e8c:	cmp	r0, #0
   24e90:	bne	24ea0 <__assert_fail@plt+0x1300c>
   24e94:	ldrb	r0, [r9, #76]	; 0x4c
   24e98:	cmp	r0, #0
   24e9c:	beq	24ea8 <__assert_fail@plt+0x13014>
   24ea0:	ldr	r6, [r9, #32]
   24ea4:	b	25084 <__assert_fail@plt+0x131f0>
   24ea8:	ldr	r0, [sp]
   24eac:	cmp	r0, r4
   24eb0:	ble	24ec0 <__assert_fail@plt+0x1302c>
   24eb4:	add	r8, r9, #16
   24eb8:	mov	sl, r4
   24ebc:	b	24f18 <__assert_fail@plt+0x13084>
   24ec0:	mov	sl, r4
   24ec4:	str	r4, [sp, #4]
   24ec8:	b	25194 <__assert_fail@plt+0x13300>
   24ecc:	add	r0, r4, #1
   24ed0:	cmp	r0, #2
   24ed4:	bcc	24ee8 <__assert_fail@plt+0x13054>
   24ed8:	ldr	r0, [r9, #36]	; 0x24
   24edc:	ldr	r1, [r9, #48]	; 0x30
   24ee0:	cmp	r0, r1
   24ee4:	blt	25070 <__assert_fail@plt+0x131dc>
   24ee8:	ldr	r0, [r9, #4]
   24eec:	ldr	r1, [sp, #4]
   24ef0:	cmn	r4, #1
   24ef4:	strb	sl, [r0, r1]
   24ef8:	ldr	r0, [r9, #8]
   24efc:	str	sl, [r0, r1, lsl #2]
   24f00:	add	sl, r1, #1
   24f04:	bne	25050 <__assert_fail@plt+0x131bc>
   24f08:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24f0c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   24f10:	stm	r8, {r0, r1}
   24f14:	b	25050 <__assert_fail@plt+0x131bc>
   24f18:	ldr	r5, [r9, #24]
   24f1c:	ldr	r4, [r9]
   24f20:	str	sl, [sp, #4]
   24f24:	add	r0, r5, sl
   24f28:	ldrb	sl, [r4, r0]
   24f2c:	tst	sl, #128	; 0x80
   24f30:	bne	24f78 <__assert_fail@plt+0x130e4>
   24f34:	mov	r0, r8
   24f38:	bl	11abc <mbsinit@plt>
   24f3c:	cmp	r0, #0
   24f40:	beq	24f78 <__assert_fail@plt+0x130e4>
   24f44:	mov	r0, sl
   24f48:	bl	11e40 <towupper@plt>
   24f4c:	cmp	r0, #128	; 0x80
   24f50:	bcs	24f70 <__assert_fail@plt+0x130dc>
   24f54:	ldr	r2, [sp, #4]
   24f58:	ldr	r1, [r9, #4]
   24f5c:	strb	r0, [r1, r2]
   24f60:	add	sl, r2, #1
   24f64:	ldr	r1, [r9, #8]
   24f68:	str	r0, [r1, r2, lsl #2]
   24f6c:	b	25050 <__assert_fail@plt+0x131bc>
   24f70:	ldr	r4, [r9]
   24f74:	ldr	r5, [r9, #24]
   24f78:	ldm	r8, {r0, r1}
   24f7c:	mov	r3, r8
   24f80:	str	r1, [fp, #-36]	; 0xffffffdc
   24f84:	str	r0, [fp, #-40]	; 0xffffffd8
   24f88:	ldm	sp, {r0, r1}
   24f8c:	sub	r2, r0, r1
   24f90:	add	r0, r4, r5
   24f94:	add	r1, r0, r1
   24f98:	add	r0, sp, #12
   24f9c:	bl	38138 <__assert_fail@plt+0x262a4>
   24fa0:	mov	r4, r0
   24fa4:	sub	r0, r0, #1
   24fa8:	cmn	r0, #4
   24fac:	bhi	24ecc <__assert_fail@plt+0x13038>
   24fb0:	ldr	r0, [sp, #12]
   24fb4:	bl	11e40 <towupper@plt>
   24fb8:	mov	r5, r0
   24fbc:	ldr	r0, [sp, #12]
   24fc0:	cmp	r5, r0
   24fc4:	bne	24fe8 <__assert_fail@plt+0x13154>
   24fc8:	ldr	r1, [r9]
   24fcc:	ldr	r2, [r9, #24]
   24fd0:	ldr	r0, [r9, #4]
   24fd4:	ldr	r6, [sp, #4]
   24fd8:	add	r1, r1, r2
   24fdc:	add	r0, r0, r6
   24fe0:	add	r1, r1, r6
   24fe4:	b	25014 <__assert_fail@plt+0x13180>
   24fe8:	add	sl, sp, #16
   24fec:	mov	r1, r5
   24ff0:	sub	r2, fp, #40	; 0x28
   24ff4:	mov	r0, sl
   24ff8:	bl	119e4 <wcrtomb@plt>
   24ffc:	cmp	r4, r0
   25000:	bne	25064 <__assert_fail@plt+0x131d0>
   25004:	ldr	r0, [r9, #4]
   25008:	ldr	r6, [sp, #4]
   2500c:	mov	r1, sl
   25010:	add	r0, r0, r6
   25014:	mov	r2, r4
   25018:	bl	11a8c <memcpy@plt>
   2501c:	ldr	r0, [r9, #8]
   25020:	add	sl, r6, #1
   25024:	str	r5, [r0, r6, lsl #2]
   25028:	add	r5, r4, r6
   2502c:	cmp	sl, r5
   25030:	bge	25050 <__assert_fail@plt+0x131bc>
   25034:	add	r0, r0, r6, lsl #2
   25038:	mvn	r1, #3
   2503c:	add	r2, r1, r4, lsl #2
   25040:	add	r0, r0, #4
   25044:	mov	r1, #255	; 0xff
   25048:	bl	11cd8 <memset@plt>
   2504c:	mov	sl, r5
   25050:	ldr	r0, [sp]
   25054:	str	sl, [sp, #4]
   25058:	cmp	r0, sl
   2505c:	bgt	24f18 <__assert_fail@plt+0x13084>
   25060:	b	25194 <__assert_fail@plt+0x13300>
   25064:	ldr	r6, [sp, #4]
   25068:	mov	sl, r6
   2506c:	b	2509c <__assert_fail@plt+0x13208>
   25070:	ldr	r0, [fp, #-40]	; 0xffffffd8
   25074:	ldr	r1, [fp, #-36]	; 0xffffffdc
   25078:	stm	r8, {r0, r1}
   2507c:	ldr	sl, [sp, #4]
   25080:	b	25194 <__assert_fail@plt+0x13300>
   25084:	ldr	r0, [sp]
   25088:	cmp	r4, r0
   2508c:	bge	2518c <__assert_fail@plt+0x132f8>
   25090:	add	r7, r9, #64	; 0x40
   25094:	add	r8, r9, #16
   25098:	mov	sl, r4
   2509c:	ldm	r8, {r0, r1}
   250a0:	str	r6, [sp, #4]
   250a4:	str	r0, [fp, #-40]	; 0xffffffd8
   250a8:	ldr	r0, [sp]
   250ac:	str	r1, [fp, #-36]	; 0xffffffdc
   250b0:	sub	r2, r0, sl
   250b4:	ldr	r0, [r7]
   250b8:	cmp	r0, #0
   250bc:	bne	251ac <__assert_fail@plt+0x13318>
   250c0:	ldr	r0, [r9]
   250c4:	ldr	r1, [r9, #24]
   250c8:	add	r0, r0, r1
   250cc:	add	r4, r0, r6
   250d0:	add	r0, sp, #8
   250d4:	mov	r1, r4
   250d8:	mov	r3, r8
   250dc:	bl	38138 <__assert_fail@plt+0x262a4>
   250e0:	sub	r6, r0, #1
   250e4:	mov	r5, r0
   250e8:	cmn	r6, #4
   250ec:	bhi	251fc <__assert_fail@plt+0x13368>
   250f0:	ldr	r0, [sp, #8]
   250f4:	bl	11e40 <towupper@plt>
   250f8:	mov	r7, r0
   250fc:	ldr	r0, [sp, #8]
   25100:	cmp	r7, r0
   25104:	bne	25114 <__assert_fail@plt+0x13280>
   25108:	ldr	r0, [r9, #4]
   2510c:	mov	r1, r4
   25110:	b	25134 <__assert_fail@plt+0x132a0>
   25114:	add	r0, sp, #16
   25118:	sub	r2, fp, #40	; 0x28
   2511c:	mov	r1, r7
   25120:	bl	119e4 <wcrtomb@plt>
   25124:	cmp	r0, r5
   25128:	bne	25278 <__assert_fail@plt+0x133e4>
   2512c:	ldr	r0, [r9, #4]
   25130:	add	r1, sp, #16
   25134:	add	r0, r0, sl
   25138:	mov	r2, r5
   2513c:	bl	11a8c <memcpy@plt>
   25140:	ldrb	r0, [r9, #76]	; 0x4c
   25144:	ldr	r6, [sp, #4]
   25148:	cmp	r0, #0
   2514c:	bne	2530c <__assert_fail@plt+0x13478>
   25150:	ldr	r0, [r9, #8]
   25154:	add	r4, r5, sl
   25158:	add	r1, sl, #1
   2515c:	add	r6, r5, r6
   25160:	cmp	r1, r4
   25164:	str	r7, [r0, sl, lsl #2]
   25168:	bge	25184 <__assert_fail@plt+0x132f0>
   2516c:	add	r0, r0, r1, lsl #2
   25170:	mvn	r1, #3
   25174:	add	r2, r1, r5, lsl #2
   25178:	mov	r1, #255	; 0xff
   2517c:	bl	11cd8 <memset@plt>
   25180:	b	25084 <__assert_fail@plt+0x131f0>
   25184:	mov	r4, r1
   25188:	b	25084 <__assert_fail@plt+0x131f0>
   2518c:	str	r6, [sp, #4]
   25190:	mov	sl, r4
   25194:	ldr	r0, [sp, #4]
   25198:	str	sl, [r9, #28]
   2519c:	str	r0, [r9, #32]
   251a0:	mov	r0, #0
   251a4:	sub	sp, fp, #28
   251a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   251ac:	cmp	r2, #1
   251b0:	add	r4, sp, #16
   251b4:	ldrge	r1, [r9, #80]	; 0x50
   251b8:	cmpge	r1, #1
   251bc:	blt	250d0 <__assert_fail@plt+0x1323c>
   251c0:	ldr	r7, [r9, #24]
   251c4:	ldr	r3, [r9]
   251c8:	add	r4, sp, #16
   251cc:	add	r7, r6, r7
   251d0:	add	r3, r3, r7
   251d4:	mov	r7, #0
   251d8:	ldrb	r5, [r3, r7]
   251dc:	ldrb	r5, [r0, r5]
   251e0:	strb	r5, [r4, r7]
   251e4:	add	r7, r7, #1
   251e8:	cmp	r7, r2
   251ec:	bge	250d0 <__assert_fail@plt+0x1323c>
   251f0:	cmp	r7, r1
   251f4:	blt	251d8 <__assert_fail@plt+0x13344>
   251f8:	b	250d0 <__assert_fail@plt+0x1323c>
   251fc:	add	r0, r5, #1
   25200:	cmp	r0, #2
   25204:	bcc	25218 <__assert_fail@plt+0x13384>
   25208:	ldr	r0, [r9, #36]	; 0x24
   2520c:	ldr	r1, [r9, #48]	; 0x30
   25210:	cmp	r0, r1
   25214:	blt	25378 <__assert_fail@plt+0x134e4>
   25218:	ldr	r2, [r9, #24]
   2521c:	ldr	r6, [sp, #4]
   25220:	ldr	r0, [r9]
   25224:	ldr	r1, [r9, #64]	; 0x40
   25228:	add	r4, sl, #1
   2522c:	add	r2, r2, r6
   25230:	cmp	r1, #0
   25234:	ldrb	r0, [r0, r2]
   25238:	ldrbne	r0, [r1, r0]
   2523c:	ldr	r1, [r9, #4]
   25240:	strb	r0, [r1, sl]
   25244:	ldrb	r1, [r9, #76]	; 0x4c
   25248:	cmp	r1, #0
   2524c:	ldrne	r1, [r9, #12]
   25250:	strne	r6, [r1, sl, lsl #2]
   25254:	add	r6, r6, #1
   25258:	cmn	r5, #1
   2525c:	ldr	r1, [r9, #8]
   25260:	str	r0, [r1, sl, lsl #2]
   25264:	bne	25084 <__assert_fail@plt+0x131f0>
   25268:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2526c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   25270:	stm	r8, {r0, r1}
   25274:	b	25084 <__assert_fail@plt+0x131f0>
   25278:	mov	r3, r0
   2527c:	cmn	r0, #1
   25280:	beq	25108 <__assert_fail@plt+0x13274>
   25284:	ldr	r1, [r9, #36]	; 0x24
   25288:	add	r4, r3, sl
   2528c:	cmp	r4, r1
   25290:	bhi	25378 <__assert_fail@plt+0x134e4>
   25294:	ldr	r0, [r9, #12]
   25298:	cmp	r0, #0
   2529c:	bne	252bc <__assert_fail@plt+0x13428>
   252a0:	lsl	r0, r1, #2
   252a4:	mov	r8, r3
   252a8:	bl	36fb4 <__assert_fail@plt+0x25120>
   252ac:	mov	r3, r8
   252b0:	cmp	r0, #0
   252b4:	str	r0, [r9, #12]
   252b8:	beq	25388 <__assert_fail@plt+0x134f4>
   252bc:	ldrb	r1, [r9, #76]	; 0x4c
   252c0:	cmp	r1, #0
   252c4:	bne	253ac <__assert_fail@plt+0x13518>
   252c8:	cmp	sl, #0
   252cc:	beq	253a4 <__assert_fail@plt+0x13510>
   252d0:	mov	r1, #0
   252d4:	cmp	sl, #4
   252d8:	bcc	25394 <__assert_fail@plt+0x13500>
   252dc:	add	r2, pc, #524	; 0x20c
   252e0:	bic	r1, sl, #3
   252e4:	vmov.i32	q8, #4	; 0x00000004
   252e8:	vld1.64	{d18-d19}, [r2 :128]
   252ec:	mov	ip, r1
   252f0:	mov	r2, r0
   252f4:	vadd.i32	q10, q9, q8
   252f8:	vst1.32	{d18-d19}, [r2]!
   252fc:	subs	ip, ip, #4
   25300:	vorr	q9, q10, q10
   25304:	bne	252f4 <__assert_fail@plt+0x13460>
   25308:	b	2539c <__assert_fail@plt+0x13508>
   2530c:	ldr	r0, [r9, #12]
   25310:	mov	r1, #0
   25314:	cmp	r5, #4
   25318:	bcc	25354 <__assert_fail@plt+0x134c0>
   2531c:	add	r3, pc, #460	; 0x1cc
   25320:	bic	r1, r5, #3
   25324:	add	r2, r0, sl, lsl #2
   25328:	vdup.32	q8, r6
   2532c:	vmov.i32	q10, #4	; 0x00000004
   25330:	vld1.64	{d18-d19}, [r3 :128]
   25334:	mov	r3, r1
   25338:	vadd.i32	q11, q9, q8
   2533c:	vadd.i32	q9, q9, q10
   25340:	subs	r3, r3, #4
   25344:	vst1.32	{d22-d23}, [r2]!
   25348:	bne	25338 <__assert_fail@plt+0x134a4>
   2534c:	cmp	r5, r1
   25350:	beq	25150 <__assert_fail@plt+0x132bc>
   25354:	add	r2, r6, r1
   25358:	sub	r3, r5, r1
   2535c:	add	r1, sl, r1
   25360:	add	r0, r0, r1, lsl #2
   25364:	str	r2, [r0], #4
   25368:	add	r2, r2, #1
   2536c:	subs	r3, r3, #1
   25370:	bne	25364 <__assert_fail@plt+0x134d0>
   25374:	b	25150 <__assert_fail@plt+0x132bc>
   25378:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2537c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   25380:	stm	r8, {r0, r1}
   25384:	b	25194 <__assert_fail@plt+0x13300>
   25388:	mov	r0, #12
   2538c:	sub	sp, fp, #28
   25390:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25394:	str	r1, [r0, r1, lsl #2]
   25398:	add	r1, r1, #1
   2539c:	cmp	sl, r1
   253a0:	bne	25394 <__assert_fail@plt+0x13500>
   253a4:	mov	r0, #1
   253a8:	strb	r0, [r9, #76]	; 0x4c
   253ac:	ldr	r0, [r9, #4]
   253b0:	add	r1, sp, #16
   253b4:	mov	r2, r3
   253b8:	mov	r8, r3
   253bc:	add	r0, r0, sl
   253c0:	bl	11a8c <memcpy@plt>
   253c4:	ldr	lr, [r9, #8]
   253c8:	ldr	ip, [sp, #4]
   253cc:	cmp	r8, #2
   253d0:	str	r7, [lr, sl, lsl #2]
   253d4:	ldr	r2, [r9, #12]
   253d8:	str	ip, [r2, sl, lsl #2]
   253dc:	bcc	254b0 <__assert_fail@plt+0x1361c>
   253e0:	sub	r0, r8, #1
   253e4:	mov	r1, #1
   253e8:	cmp	r0, #4
   253ec:	bcs	253f8 <__assert_fail@plt+0x13564>
   253f0:	ldr	ip, [sp, #4]
   253f4:	b	25480 <__assert_fail@plt+0x135ec>
   253f8:	str	r0, [sp]
   253fc:	add	r3, r8, sl
   25400:	add	r0, sl, #1
   25404:	add	r7, lr, r0, lsl #2
   25408:	add	ip, lr, r3, lsl #2
   2540c:	add	r0, r2, r0, lsl #2
   25410:	cmp	r0, ip
   25414:	ldr	ip, [sp, #4]
   25418:	addcc	r3, r2, r3, lsl #2
   2541c:	cmpcc	r7, r3
   25420:	bcc	25480 <__assert_fail@plt+0x135ec>
   25424:	add	r1, pc, #212	; 0xd4
   25428:	vdup.32	q8, ip
   2542c:	vdup.32	q9, r6
   25430:	vdup.32	q10, r5
   25434:	vmov.i32	q12, #4	; 0x00000004
   25438:	vmov.i8	q13, #255	; 0xff
   2543c:	vld1.64	{d22-d23}, [r1 :128]
   25440:	ldr	r1, [sp]
   25444:	bic	ip, r1, #3
   25448:	orr	r1, ip, #1
   2544c:	mov	r3, ip
   25450:	vcgt.u32	q14, q10, q11
   25454:	subs	r3, r3, #4
   25458:	vbsl	q14, q11, q9
   2545c:	vadd.i32	q11, q11, q12
   25460:	vadd.i32	q14, q14, q8
   25464:	vst1.32	{d28-d29}, [r0]!
   25468:	vst1.32	{d26-d27}, [r7]!
   2546c:	bne	25450 <__assert_fail@plt+0x135bc>
   25470:	ldr	r0, [sp]
   25474:	cmp	r0, ip
   25478:	ldr	ip, [sp, #4]
   2547c:	beq	254b0 <__assert_fail@plt+0x1361c>
   25480:	add	r2, r2, sl, lsl #2
   25484:	add	r0, lr, sl, lsl #2
   25488:	mvn	r3, #0
   2548c:	cmp	r1, r5
   25490:	mov	r7, r6
   25494:	movcc	r7, r1
   25498:	add	r7, r7, ip
   2549c:	str	r7, [r2, r1, lsl #2]
   254a0:	str	r3, [r0, r1, lsl #2]
   254a4:	add	r1, r1, #1
   254a8:	cmp	r8, r1
   254ac:	bne	2548c <__assert_fail@plt+0x135f8>
   254b0:	ldr	r0, [r9, #48]	; 0x30
   254b4:	ldr	r2, [r9, #52]	; 0x34
   254b8:	sub	r1, r8, r5
   254bc:	mov	r6, ip
   254c0:	add	r6, r5, r6
   254c4:	add	r0, r0, r1
   254c8:	cmp	r2, ip
   254cc:	str	r0, [r9, #48]	; 0x30
   254d0:	ldrgt	r2, [r9, #56]	; 0x38
   254d4:	addgt	r1, r2, r1
   254d8:	strgt	r1, [r9, #56]	; 0x38
   254dc:	ldr	r1, [r9, #36]	; 0x24
   254e0:	cmp	r1, r0
   254e4:	movgt	r1, r0
   254e8:	str	r1, [sp]
   254ec:	b	25084 <__assert_fail@plt+0x131f0>
   254f0:	andeq	r0, r0, r0
   254f4:	andeq	r0, r0, r1
   254f8:	andeq	r0, r0, r2
   254fc:	andeq	r0, r0, r3
   25500:	andeq	r0, r0, r1
   25504:	andeq	r0, r0, r2
   25508:	andeq	r0, r0, r3
   2550c:	andeq	r0, r0, r4
   25510:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25514:	add	fp, sp, #28
   25518:	sub	sp, sp, #68	; 0x44
   2551c:	mov	r4, r0
   25520:	ldr	r6, [r0, #28]
   25524:	ldr	r7, [r0, #36]	; 0x24
   25528:	ldr	r0, [r0, #48]	; 0x30
   2552c:	cmp	r7, r0
   25530:	movgt	r7, r0
   25534:	cmp	r7, r6
   25538:	ble	256d4 <__assert_fail@plt+0x13840>
   2553c:	add	r8, r4, #16
   25540:	mov	r5, sp
   25544:	ldm	r8, {r9, sl}
   25548:	ldr	r0, [r4, #64]	; 0x40
   2554c:	sub	r2, r7, r6
   25550:	cmp	r0, #0
   25554:	bne	25624 <__assert_fail@plt+0x13790>
   25558:	ldr	r0, [r4]
   2555c:	ldr	r1, [r4, #24]
   25560:	add	r0, r0, r1
   25564:	add	r1, r0, r6
   25568:	mov	r0, r5
   2556c:	mov	r3, r8
   25570:	bl	38138 <__assert_fail@plt+0x262a4>
   25574:	add	r1, r0, #1
   25578:	cmp	r1, #2
   2557c:	bcc	25598 <__assert_fail@plt+0x13704>
   25580:	cmn	r0, #2
   25584:	bne	255d4 <__assert_fail@plt+0x13740>
   25588:	ldr	r0, [r4, #36]	; 0x24
   2558c:	ldr	r1, [r4, #48]	; 0x30
   25590:	cmp	r0, r1
   25594:	blt	256e8 <__assert_fail@plt+0x13854>
   25598:	ldr	r1, [r4, #24]
   2559c:	ldr	r0, [r4]
   255a0:	mov	r2, sl
   255a4:	mov	sl, r5
   255a8:	add	r1, r1, r6
   255ac:	ldrb	r1, [r0, r1]
   255b0:	str	r1, [sp]
   255b4:	ldr	r0, [r4, #64]	; 0x40
   255b8:	cmp	r0, #0
   255bc:	ldrbne	r1, [r0, r1]
   255c0:	mov	r0, #1
   255c4:	strne	r1, [sp]
   255c8:	str	r9, [r8]
   255cc:	str	r2, [r8, #4]
   255d0:	b	255dc <__assert_fail@plt+0x13748>
   255d4:	ldr	r1, [sp]
   255d8:	mov	sl, r5
   255dc:	ldr	r3, [r4, #8]
   255e0:	add	r5, r0, r6
   255e4:	str	r1, [r3, r6, lsl #2]
   255e8:	add	r1, r6, #1
   255ec:	cmp	r1, r5
   255f0:	bge	25610 <__assert_fail@plt+0x1377c>
   255f4:	mvn	r1, #3
   255f8:	add	r2, r1, r0, lsl #2
   255fc:	add	r0, r3, r6, lsl #2
   25600:	mov	r1, #255	; 0xff
   25604:	add	r0, r0, #4
   25608:	bl	11cd8 <memset@plt>
   2560c:	mov	r1, r5
   25610:	cmp	r7, r1
   25614:	mov	r6, r1
   25618:	mov	r5, sl
   2561c:	bgt	25544 <__assert_fail@plt+0x136b0>
   25620:	b	256d8 <__assert_fail@plt+0x13844>
   25624:	cmp	r2, #1
   25628:	add	r1, sp, #4
   2562c:	blt	25568 <__assert_fail@plt+0x136d4>
   25630:	ldr	r1, [r4, #80]	; 0x50
   25634:	cmp	r1, #1
   25638:	add	r1, sp, #4
   2563c:	blt	25568 <__assert_fail@plt+0x136d4>
   25640:	ldm	r4, {r1, r3}
   25644:	mov	lr, r5
   25648:	ldr	r5, [r4, #24]
   2564c:	cmp	r2, #2
   25650:	add	r5, r6, r5
   25654:	ldrb	r1, [r1, r5]
   25658:	mov	r5, lr
   2565c:	ldrb	r0, [r0, r1]
   25660:	add	r1, sp, #4
   25664:	strb	r0, [r3, r6]
   25668:	strb	r0, [sp, #4]
   2566c:	blt	25568 <__assert_fail@plt+0x136d4>
   25670:	ldr	r0, [r4, #80]	; 0x50
   25674:	add	r1, sp, #4
   25678:	cmp	r0, #2
   2567c:	blt	25568 <__assert_fail@plt+0x136d4>
   25680:	mov	r0, #1
   25684:	ldm	r4, {r1, ip}
   25688:	ldr	r5, [r4, #24]
   2568c:	ldr	r3, [r4, #64]	; 0x40
   25690:	add	r1, r1, r5
   25694:	add	r1, r1, r6
   25698:	ldrb	r1, [r1, r0]
   2569c:	ldrb	r1, [r3, r1]
   256a0:	add	r3, ip, r6
   256a4:	strb	r1, [r3, r0]
   256a8:	add	r3, sp, #4
   256ac:	strb	r1, [r3, r0]
   256b0:	add	r0, r0, #1
   256b4:	cmp	r0, r2
   256b8:	bge	256c8 <__assert_fail@plt+0x13834>
   256bc:	ldr	r1, [r4, #80]	; 0x50
   256c0:	cmp	r0, r1
   256c4:	blt	25684 <__assert_fail@plt+0x137f0>
   256c8:	add	r1, sp, #4
   256cc:	mov	r5, lr
   256d0:	b	25568 <__assert_fail@plt+0x136d4>
   256d4:	mov	r1, r6
   256d8:	str	r1, [r4, #28]
   256dc:	str	r1, [r4, #32]
   256e0:	sub	sp, fp, #28
   256e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   256e8:	stm	r8, {r9, sl}
   256ec:	mov	r1, r6
   256f0:	str	r1, [r4, #28]
   256f4:	str	r1, [r4, #32]
   256f8:	sub	sp, fp, #28
   256fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25700:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25704:	add	fp, sp, #28
   25708:	sub	sp, sp, #28
   2570c:	ldr	r8, [r1]
   25710:	mov	r7, r0
   25714:	ldr	r6, [fp, #12]
   25718:	mov	r5, r2
   2571c:	str	r1, [sp, #20]
   25720:	str	r3, [sp, #24]
   25724:	ldr	r0, [r8, #84]	; 0x54
   25728:	str	r6, [sp, #4]
   2572c:	str	r0, [sp, #16]
   25730:	ldr	r0, [fp, #8]
   25734:	str	r0, [sp]
   25738:	mov	r0, r7
   2573c:	bl	262d8 <__assert_fail@plt+0x14444>
   25740:	mov	r4, r0
   25744:	cmp	r0, #0
   25748:	bne	25758 <__assert_fail@plt+0x138c4>
   2574c:	ldr	r0, [r6]
   25750:	cmp	r0, #0
   25754:	bne	25a7c <__assert_fail@plt+0x13be8>
   25758:	ldrb	r0, [r5, #4]
   2575c:	cmp	r0, #10
   25760:	movne	r0, r4
   25764:	subne	sp, fp, #28
   25768:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2576c:	ldr	r0, [sp, #24]
   25770:	mov	r9, #0
   25774:	orr	sl, r0, #8388608	; 0x800000
   25778:	ldr	r0, [fp, #8]
   2577c:	str	sl, [sp, #12]
   25780:	cmp	r0, #0
   25784:	bne	25828 <__assert_fail@plt+0x13994>
   25788:	b	258e0 <__assert_fail@plt+0x13a4c>
   2578c:	cmp	r0, #9
   25790:	mov	r6, #0
   25794:	beq	25858 <__assert_fail@plt+0x139c4>
   25798:	ldr	r0, [sp, #16]
   2579c:	ldr	sl, [r8, #84]	; 0x54
   257a0:	ldr	r1, [sp, #20]
   257a4:	ldr	r3, [sp, #24]
   257a8:	mov	r2, r5
   257ac:	str	r0, [r8, #84]	; 0x54
   257b0:	ldr	r0, [fp, #8]
   257b4:	str	r0, [sp]
   257b8:	ldr	r0, [fp, #12]
   257bc:	str	r0, [sp, #4]
   257c0:	mov	r0, r7
   257c4:	bl	262d8 <__assert_fail@plt+0x14444>
   257c8:	mov	r6, r0
   257cc:	cmp	r0, #0
   257d0:	bne	257e4 <__assert_fail@plt+0x13950>
   257d4:	ldr	r0, [fp, #12]
   257d8:	ldr	r0, [r0]
   257dc:	cmp	r0, #0
   257e0:	bne	259cc <__assert_fail@plt+0x13b38>
   257e4:	ldr	r0, [r8, #84]	; 0x54
   257e8:	orr	r0, r0, sl
   257ec:	ldr	sl, [sp, #12]
   257f0:	str	r0, [r8, #84]	; 0x54
   257f4:	ldr	r1, [r8, #64]	; 0x40
   257f8:	cmp	r1, #31
   257fc:	bne	25864 <__assert_fail@plt+0x139d0>
   25800:	mov	r0, #996	; 0x3e4
   25804:	bl	36fb4 <__assert_fail@plt+0x25120>
   25808:	cmp	r0, #0
   2580c:	beq	25a70 <__assert_fail@plt+0x13bdc>
   25810:	ldr	r1, [r8, #56]	; 0x38
   25814:	str	r1, [r0]
   25818:	mov	r1, #0
   2581c:	str	r1, [r8, #64]	; 0x40
   25820:	str	r0, [r8, #56]	; 0x38
   25824:	b	25868 <__assert_fail@plt+0x139d4>
   25828:	mov	r0, r5
   2582c:	mov	r1, r7
   25830:	mov	r2, sl
   25834:	bl	25a88 <__assert_fail@plt+0x13bf4>
   25838:	ldr	r1, [r7, #40]	; 0x28
   2583c:	mov	r6, #0
   25840:	add	r0, r1, r0
   25844:	str	r0, [r7, #40]	; 0x28
   25848:	ldrb	r0, [r5, #4]
   2584c:	orr	r1, r0, #8
   25850:	cmp	r1, #10
   25854:	bne	2578c <__assert_fail@plt+0x138f8>
   25858:	ldr	r1, [r8, #64]	; 0x40
   2585c:	cmp	r1, #31
   25860:	beq	25800 <__assert_fail@plt+0x1396c>
   25864:	ldr	r0, [r8, #56]	; 0x38
   25868:	add	r2, r1, #1
   2586c:	add	r0, r0, r1, lsl #5
   25870:	mov	r1, #10
   25874:	cmp	r4, #0
   25878:	str	r2, [r8, #64]	; 0x40
   2587c:	str	r9, [r0, #4]!
   25880:	stmib	r0, {r4, r6, r9}
   25884:	str	r9, [r0, #16]
   25888:	str	r9, [r0, #20]
   2588c:	str	r1, [r0, #24]
   25890:	mvn	r1, #0
   25894:	str	r1, [r0, #28]
   25898:	strne	r0, [r4]
   2589c:	cmp	r6, #0
   258a0:	mov	r4, r0
   258a4:	strne	r0, [r6]
   258a8:	ldrb	r1, [r5, #4]
   258ac:	cmp	r1, #10
   258b0:	beq	25828 <__assert_fail@plt+0x13994>
   258b4:	b	259c4 <__assert_fail@plt+0x13b30>
   258b8:	mov	r0, #996	; 0x3e4
   258bc:	bl	36fb4 <__assert_fail@plt+0x25120>
   258c0:	cmp	r0, #0
   258c4:	beq	25a70 <__assert_fail@plt+0x13bdc>
   258c8:	ldr	r1, [r8, #56]	; 0x38
   258cc:	str	r1, [r0]
   258d0:	mov	r1, #0
   258d4:	str	r1, [r8, #64]	; 0x40
   258d8:	str	r0, [r8, #56]	; 0x38
   258dc:	b	25978 <__assert_fail@plt+0x13ae4>
   258e0:	mov	r0, r5
   258e4:	mov	r1, r7
   258e8:	mov	r2, sl
   258ec:	bl	25a88 <__assert_fail@plt+0x13bf4>
   258f0:	ldr	r1, [r7, #40]	; 0x28
   258f4:	mov	r6, #0
   258f8:	add	r0, r1, r0
   258fc:	str	r0, [r7, #40]	; 0x28
   25900:	ldrb	r0, [r5, #4]
   25904:	orr	r0, r0, #8
   25908:	cmp	r0, #10
   2590c:	beq	25968 <__assert_fail@plt+0x13ad4>
   25910:	ldr	r0, [sp, #16]
   25914:	ldr	sl, [r8, #84]	; 0x54
   25918:	ldr	r1, [sp, #20]
   2591c:	ldr	r3, [sp, #24]
   25920:	mov	r2, r5
   25924:	str	r0, [r8, #84]	; 0x54
   25928:	ldr	r0, [fp, #12]
   2592c:	str	r9, [sp]
   25930:	str	r0, [sp, #4]
   25934:	mov	r0, r7
   25938:	bl	262d8 <__assert_fail@plt+0x14444>
   2593c:	mov	r6, r0
   25940:	cmp	r0, #0
   25944:	bne	25958 <__assert_fail@plt+0x13ac4>
   25948:	ldr	r0, [fp, #12]
   2594c:	ldr	r0, [r0]
   25950:	cmp	r0, #0
   25954:	bne	259cc <__assert_fail@plt+0x13b38>
   25958:	ldr	r0, [r8, #84]	; 0x54
   2595c:	orr	r0, r0, sl
   25960:	ldr	sl, [sp, #12]
   25964:	str	r0, [r8, #84]	; 0x54
   25968:	ldr	r1, [r8, #64]	; 0x40
   2596c:	cmp	r1, #31
   25970:	beq	258b8 <__assert_fail@plt+0x13a24>
   25974:	ldr	r0, [r8, #56]	; 0x38
   25978:	add	r2, r1, #1
   2597c:	add	r0, r0, r1, lsl #5
   25980:	mov	r1, #10
   25984:	cmp	r4, #0
   25988:	str	r2, [r8, #64]	; 0x40
   2598c:	str	r9, [r0, #4]!
   25990:	stmib	r0, {r4, r6, r9}
   25994:	str	r9, [r0, #16]
   25998:	str	r9, [r0, #20]
   2599c:	str	r1, [r0, #24]
   259a0:	mvn	r1, #0
   259a4:	str	r1, [r0, #28]
   259a8:	strne	r0, [r4]
   259ac:	cmp	r6, #0
   259b0:	mov	r4, r0
   259b4:	strne	r0, [r6]
   259b8:	ldrb	r1, [r5, #4]
   259bc:	cmp	r1, #10
   259c0:	beq	258e0 <__assert_fail@plt+0x13a4c>
   259c4:	sub	sp, fp, #28
   259c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   259cc:	cmp	r4, #0
   259d0:	beq	25a7c <__assert_fail@plt+0x13be8>
   259d4:	movw	r5, #255	; 0xff
   259d8:	movt	r5, #4
   259dc:	mov	r6, r4
   259e0:	ldr	r4, [r4, #4]
   259e4:	cmp	r4, #0
   259e8:	bne	259dc <__assert_fail@plt+0x13b48>
   259ec:	ldr	r4, [r6, #8]
   259f0:	cmp	r4, #0
   259f4:	bne	259dc <__assert_fail@plt+0x13b48>
   259f8:	ldr	r0, [r6, #24]
   259fc:	and	r0, r0, r5
   25a00:	cmp	r0, #3
   25a04:	beq	25a3c <__assert_fail@plt+0x13ba8>
   25a08:	cmp	r0, #6
   25a0c:	bne	25a44 <__assert_fail@plt+0x13bb0>
   25a10:	ldr	r4, [r6, #20]
   25a14:	ldr	r0, [r4]
   25a18:	bl	17b10 <__assert_fail@plt+0x5c7c>
   25a1c:	ldr	r0, [r4, #4]
   25a20:	bl	17b10 <__assert_fail@plt+0x5c7c>
   25a24:	ldr	r0, [r4, #8]
   25a28:	bl	17b10 <__assert_fail@plt+0x5c7c>
   25a2c:	ldr	r0, [r4, #12]
   25a30:	bl	17b10 <__assert_fail@plt+0x5c7c>
   25a34:	mov	r0, r4
   25a38:	b	25a40 <__assert_fail@plt+0x13bac>
   25a3c:	ldr	r0, [r6, #20]
   25a40:	bl	17b10 <__assert_fail@plt+0x5c7c>
   25a44:	ldr	r0, [r6]
   25a48:	cmp	r0, #0
   25a4c:	beq	25a7c <__assert_fail@plt+0x13be8>
   25a50:	ldr	r4, [r0, #8]
   25a54:	cmp	r4, r6
   25a58:	mov	r6, r0
   25a5c:	beq	259f8 <__assert_fail@plt+0x13b64>
   25a60:	cmp	r4, #0
   25a64:	mov	r6, r0
   25a68:	beq	259f8 <__assert_fail@plt+0x13b64>
   25a6c:	b	259dc <__assert_fail@plt+0x13b48>
   25a70:	ldr	r1, [fp, #12]
   25a74:	mov	r0, #12
   25a78:	str	r0, [r1]
   25a7c:	mov	r0, #0
   25a80:	sub	sp, fp, #28
   25a84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a88:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   25a8c:	add	fp, sp, #24
   25a90:	sub	sp, sp, #8
   25a94:	mov	r9, r0
   25a98:	mov	r7, r1
   25a9c:	ldr	r0, [r1, #40]	; 0x28
   25aa0:	ldr	r1, [r1, #56]	; 0x38
   25aa4:	cmp	r1, r0
   25aa8:	ble	25b90 <__assert_fail@plt+0x13cfc>
   25aac:	ldr	r1, [r7, #4]
   25ab0:	mov	r5, r9
   25ab4:	mov	r8, r2
   25ab8:	ldrb	r6, [r1, r0]
   25abc:	strb	r6, [r5], #4
   25ac0:	ldr	r0, [r5]
   25ac4:	bic	r1, r0, #6291456	; 0x600000
   25ac8:	str	r1, [r5]
   25acc:	ldr	r3, [r7, #80]	; 0x50
   25ad0:	cmp	r3, #2
   25ad4:	blt	25af8 <__assert_fail@plt+0x13c64>
   25ad8:	ldr	r2, [r7, #28]
   25adc:	ldr	r1, [r7, #40]	; 0x28
   25ae0:	cmp	r1, r2
   25ae4:	beq	25af8 <__assert_fail@plt+0x13c64>
   25ae8:	ldr	r2, [r7, #8]
   25aec:	ldr	r1, [r2, r1, lsl #2]
   25af0:	cmn	r1, #1
   25af4:	beq	25fd4 <__assert_fail@plt+0x14140>
   25af8:	movw	r1, #65280	; 0xff00
   25afc:	cmp	r6, #92	; 0x5c
   25b00:	movt	r1, #65439	; 0xff9f
   25b04:	bne	25ba8 <__assert_fail@plt+0x13d14>
   25b08:	ldr	r6, [r7, #40]	; 0x28
   25b0c:	ldr	r4, [r7, #48]	; 0x30
   25b10:	add	r2, r6, #1
   25b14:	cmp	r2, r4
   25b18:	bge	25bfc <__assert_fail@plt+0x13d68>
   25b1c:	ldrb	r4, [r7, #75]	; 0x4b
   25b20:	cmp	r4, #0
   25b24:	bne	26268 <__assert_fail@plt+0x143d4>
   25b28:	ldr	r3, [r7, #4]
   25b2c:	ldrb	r6, [r3, r2]
   25b30:	and	r0, r0, r1
   25b34:	strb	r6, [r9]
   25b38:	orr	r4, r0, #1
   25b3c:	str	r4, [r9, #4]
   25b40:	ldr	r0, [r7, #80]	; 0x50
   25b44:	cmp	r0, #2
   25b48:	blt	25e20 <__assert_fail@plt+0x13f8c>
   25b4c:	ldr	r0, [r7, #8]
   25b50:	ldr	r1, [r7, #40]	; 0x28
   25b54:	add	r0, r0, r1, lsl #2
   25b58:	ldr	r4, [r0, #4]
   25b5c:	mov	r0, r4
   25b60:	bl	11cb4 <iswalnum@plt>
   25b64:	sub	r1, r4, #95	; 0x5f
   25b68:	cmp	r0, #0
   25b6c:	clz	r1, r1
   25b70:	movwne	r0, #1
   25b74:	lsr	r1, r1, #5
   25b78:	orr	r0, r1, r0
   25b7c:	ldr	r1, [r5]
   25b80:	bic	r1, r1, #4194304	; 0x400000
   25b84:	orr	r0, r1, r0, lsl #22
   25b88:	uxtb	r1, r6
   25b8c:	b	25e44 <__assert_fail@plt+0x13fb0>
   25b90:	mov	r0, #2
   25b94:	mov	r4, #0
   25b98:	strb	r0, [r9, #4]
   25b9c:	mov	r0, r4
   25ba0:	sub	sp, fp, #24
   25ba4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25ba8:	and	r0, r0, r1
   25bac:	orr	r4, r0, #1
   25bb0:	str	r4, [r5]
   25bb4:	ldr	r0, [r7, #80]	; 0x50
   25bb8:	cmp	r0, #2
   25bbc:	blt	25c08 <__assert_fail@plt+0x13d74>
   25bc0:	ldr	r0, [r7, #8]
   25bc4:	ldr	r1, [r7, #40]	; 0x28
   25bc8:	ldr	r4, [r0, r1, lsl #2]
   25bcc:	mov	r0, r4
   25bd0:	bl	11cb4 <iswalnum@plt>
   25bd4:	sub	r1, r4, #95	; 0x5f
   25bd8:	cmp	r0, #0
   25bdc:	clz	r1, r1
   25be0:	movwne	r0, #1
   25be4:	lsr	r1, r1, #5
   25be8:	orr	r0, r1, r0
   25bec:	ldr	r1, [r5]
   25bf0:	bic	r1, r1, #4194304	; 0x400000
   25bf4:	orr	r0, r1, r0, lsl #22
   25bf8:	b	25c28 <__assert_fail@plt+0x13d94>
   25bfc:	and	r0, r0, r1
   25c00:	orr	r0, r0, #36	; 0x24
   25c04:	b	25fe8 <__assert_fail@plt+0x14154>
   25c08:	bl	11c54 <__ctype_b_loc@plt>
   25c0c:	ldr	r0, [r0]
   25c10:	cmp	r6, #95	; 0x5f
   25c14:	add	r0, r0, r6, lsl #1
   25c18:	ldrh	r0, [r0]
   25c1c:	ubfx	r0, r0, #3, #1
   25c20:	movweq	r0, #1
   25c24:	orr	r0, r4, r0, lsl #22
   25c28:	sub	r1, r6, #10
   25c2c:	mov	r4, #1
   25c30:	str	r0, [r5]
   25c34:	cmp	r1, #115	; 0x73
   25c38:	bhi	2625c <__assert_fail@plt+0x143c8>
   25c3c:	add	r2, pc, #0
   25c40:	ldr	pc, [r2, r1, lsl #2]
   25c44:	andeq	r5, r2, r4, lsl lr
   25c48:	andeq	r6, r2, ip, asr r2
   25c4c:	andeq	r6, r2, ip, asr r2
   25c50:	andeq	r6, r2, ip, asr r2
   25c54:	andeq	r6, r2, ip, asr r2
   25c58:	andeq	r6, r2, ip, asr r2
   25c5c:	andeq	r6, r2, ip, asr r2
   25c60:	andeq	r6, r2, ip, asr r2
   25c64:	andeq	r6, r2, ip, asr r2
   25c68:	andeq	r6, r2, ip, asr r2
   25c6c:	andeq	r6, r2, ip, asr r2
   25c70:	andeq	r6, r2, ip, asr r2
   25c74:	andeq	r6, r2, ip, asr r2
   25c78:	andeq	r6, r2, ip, asr r2
   25c7c:	andeq	r6, r2, ip, asr r2
   25c80:	andeq	r6, r2, ip, asr r2
   25c84:	andeq	r6, r2, ip, asr r2
   25c88:	andeq	r6, r2, ip, asr r2
   25c8c:	andeq	r6, r2, ip, asr r2
   25c90:	andeq	r6, r2, ip, asr r2
   25c94:	andeq	r6, r2, ip, asr r2
   25c98:	andeq	r6, r2, ip, asr r2
   25c9c:	andeq	r6, r2, ip, asr r2
   25ca0:	andeq	r6, r2, ip, asr r2
   25ca4:	andeq	r6, r2, ip, asr r2
   25ca8:	andeq	r6, r2, ip, asr r2
   25cac:	strdeq	r5, [r2], -ip
   25cb0:	andeq	r6, r2, ip, asr r2
   25cb4:	andeq	r6, r2, ip, asr r2
   25cb8:	andeq	r6, r2, ip, asr r2
   25cbc:	andeq	r6, r2, r4, asr r0
   25cc0:	andeq	r6, r2, r0, rrx
   25cc4:	andeq	r6, r2, ip, rrx
   25cc8:	andeq	r6, r2, r4, ror r0
   25ccc:	andeq	r6, r2, ip, asr r2
   25cd0:	andeq	r6, r2, ip, asr r2
   25cd4:	andeq	r6, r2, r4, lsl #1
   25cd8:	andeq	r6, r2, ip, asr r2
   25cdc:	andeq	r6, r2, ip, asr r2
   25ce0:	andeq	r6, r2, ip, asr r2
   25ce4:	andeq	r6, r2, ip, asr r2
   25ce8:	andeq	r6, r2, ip, asr r2
   25cec:	andeq	r6, r2, ip, asr r2
   25cf0:	andeq	r6, r2, ip, asr r2
   25cf4:	andeq	r6, r2, ip, asr r2
   25cf8:	andeq	r6, r2, ip, asr r2
   25cfc:	andeq	r6, r2, ip, asr r2
   25d00:	andeq	r6, r2, ip, asr r2
   25d04:	andeq	r6, r2, ip, asr r2
   25d08:	andeq	r6, r2, ip, asr r2
   25d0c:	andeq	r6, r2, ip, asr r2
   25d10:	andeq	r6, r2, ip, asr r2
   25d14:	andeq	r6, r2, ip, asr r2
   25d18:	andeq	r6, r2, ip, lsl #1
   25d1c:	andeq	r6, r2, ip, asr r2
   25d20:	andeq	r6, r2, ip, asr r2
   25d24:	andeq	r6, r2, ip, asr r2
   25d28:	andeq	r6, r2, ip, asr r2
   25d2c:	andeq	r6, r2, ip, asr r2
   25d30:	andeq	r6, r2, ip, asr r2
   25d34:	andeq	r6, r2, ip, asr r2
   25d38:	andeq	r6, r2, ip, asr r2
   25d3c:	andeq	r6, r2, ip, asr r2
   25d40:	andeq	r6, r2, ip, asr r2
   25d44:	andeq	r6, r2, ip, asr r2
   25d48:	andeq	r6, r2, ip, asr r2
   25d4c:	andeq	r6, r2, ip, asr r2
   25d50:	andeq	r6, r2, ip, asr r2
   25d54:	andeq	r6, r2, ip, asr r2
   25d58:	andeq	r6, r2, ip, asr r2
   25d5c:	andeq	r6, r2, ip, asr r2
   25d60:	andeq	r6, r2, ip, asr r2
   25d64:	andeq	r6, r2, ip, asr r2
   25d68:	andeq	r6, r2, ip, asr r2
   25d6c:	andeq	r6, r2, ip, asr r2
   25d70:	andeq	r6, r2, ip, asr r2
   25d74:	andeq	r6, r2, ip, asr r2
   25d78:	andeq	r6, r2, ip, asr r2
   25d7c:	andeq	r6, r2, ip, asr r2
   25d80:	andeq	r6, r2, ip, asr r2
   25d84:	andeq	r6, r2, ip, asr r2
   25d88:	muleq	r2, ip, r0
   25d8c:	andeq	r6, r2, ip, asr r2
   25d90:	andeq	r6, r2, ip, asr r2
   25d94:	andeq	r6, r2, r4, lsr #1
   25d98:	andeq	r6, r2, ip, asr r2
   25d9c:	andeq	r6, r2, ip, asr r2
   25da0:	andeq	r6, r2, ip, asr r2
   25da4:	andeq	r6, r2, ip, asr r2
   25da8:	andeq	r6, r2, ip, asr r2
   25dac:	andeq	r6, r2, ip, asr r2
   25db0:	andeq	r6, r2, ip, asr r2
   25db4:	andeq	r6, r2, ip, asr r2
   25db8:	andeq	r6, r2, ip, asr r2
   25dbc:	andeq	r6, r2, ip, asr r2
   25dc0:	andeq	r6, r2, ip, asr r2
   25dc4:	andeq	r6, r2, ip, asr r2
   25dc8:	andeq	r6, r2, ip, asr r2
   25dcc:	andeq	r6, r2, ip, asr r2
   25dd0:	andeq	r6, r2, ip, asr r2
   25dd4:	andeq	r6, r2, ip, asr r2
   25dd8:	andeq	r6, r2, ip, asr r2
   25ddc:	andeq	r6, r2, ip, asr r2
   25de0:	andeq	r6, r2, ip, asr r2
   25de4:	andeq	r6, r2, ip, asr r2
   25de8:	andeq	r6, r2, ip, asr r2
   25dec:	andeq	r6, r2, ip, asr r2
   25df0:	andeq	r6, r2, ip, asr r2
   25df4:	andeq	r6, r2, ip, asr r2
   25df8:	andeq	r6, r2, ip, asr r2
   25dfc:	andeq	r6, r2, ip, asr r2
   25e00:	andeq	r6, r2, ip, asr r2
   25e04:	andeq	r6, r2, ip, asr r2
   25e08:	ldrdeq	r6, [r2], -r4
   25e0c:	andeq	r6, r2, r4, ror #1
   25e10:	strdeq	r6, [r2], -r8
   25e14:	tst	r8, #2048	; 0x800
   25e18:	bne	260f0 <__assert_fail@plt+0x1425c>
   25e1c:	b	2625c <__assert_fail@plt+0x143c8>
   25e20:	bl	11c54 <__ctype_b_loc@plt>
   25e24:	ldr	r0, [r0]
   25e28:	uxtb	r1, r6
   25e2c:	cmp	r1, #95	; 0x5f
   25e30:	add	r0, r0, r1, lsl #1
   25e34:	ldrh	r0, [r0]
   25e38:	ubfx	r0, r0, #3, #1
   25e3c:	movweq	r0, #1
   25e40:	orr	r0, r4, r0, lsl #22
   25e44:	mvn	r2, #38	; 0x26
   25e48:	mov	r4, #2
   25e4c:	str	r0, [r5]
   25e50:	uxtab	r2, r2, r6
   25e54:	cmp	r2, #86	; 0x56
   25e58:	bhi	2625c <__assert_fail@plt+0x143c8>
   25e5c:	add	r3, pc, #0
   25e60:	ldr	pc, [r3, r2, lsl #2]
   25e64:	andeq	r6, r2, r4, lsr r1
   25e68:	andeq	r6, r2, r4, asr #2
   25e6c:	andeq	r6, r2, r4, asr r1
   25e70:	andeq	r6, r2, ip, asr r2
   25e74:	andeq	r6, r2, r4, ror #2
   25e78:	andeq	r6, r2, ip, asr r2
   25e7c:	andeq	r6, r2, ip, asr r2
   25e80:	andeq	r6, r2, ip, asr r2
   25e84:	andeq	r6, r2, ip, asr r2
   25e88:	andeq	r6, r2, ip, asr r2
   25e8c:	andeq	r5, r2, r0, asr #31
   25e90:	andeq	r5, r2, r0, asr #31
   25e94:	andeq	r5, r2, r0, asr #31
   25e98:	andeq	r5, r2, r0, asr #31
   25e9c:	andeq	r5, r2, r0, asr #31
   25ea0:	andeq	r5, r2, r0, asr #31
   25ea4:	andeq	r5, r2, r0, asr #31
   25ea8:	andeq	r5, r2, r0, asr #31
   25eac:	andeq	r5, r2, r0, asr #31
   25eb0:	andeq	r6, r2, ip, asr r2
   25eb4:	andeq	r6, r2, ip, asr r2
   25eb8:	andeq	r6, r2, ip, ror r1
   25ebc:	andeq	r6, r2, ip, asr r2
   25ec0:	andeq	r6, r2, ip, lsl #3
   25ec4:	muleq	r2, ip, r1
   25ec8:	andeq	r6, r2, ip, asr r2
   25ecc:	andeq	r6, r2, ip, asr r2
   25ed0:			; <UNDEFINED> instruction: 0x000261b4
   25ed4:	andeq	r6, r2, ip, asr r2
   25ed8:	andeq	r6, r2, ip, asr r2
   25edc:	andeq	r6, r2, ip, asr r2
   25ee0:	andeq	r6, r2, ip, asr r2
   25ee4:	andeq	r6, r2, ip, asr r2
   25ee8:	andeq	r6, r2, ip, asr r2
   25eec:	andeq	r6, r2, ip, asr r2
   25ef0:	andeq	r6, r2, ip, asr r2
   25ef4:	andeq	r6, r2, ip, asr r2
   25ef8:	andeq	r6, r2, ip, asr r2
   25efc:	andeq	r6, r2, ip, asr r2
   25f00:	andeq	r6, r2, ip, asr r2
   25f04:	andeq	r6, r2, ip, asr r2
   25f08:	andeq	r6, r2, ip, asr r2
   25f0c:	andeq	r6, r2, ip, asr r2
   25f10:	andeq	r6, r2, ip, asr r2
   25f14:	andeq	r6, r2, r4, asr #3
   25f18:	andeq	r6, r2, ip, asr r2
   25f1c:	andeq	r6, r2, ip, asr r2
   25f20:	andeq	r6, r2, ip, asr r2
   25f24:	ldrdeq	r6, [r2], -r4
   25f28:	andeq	r6, r2, ip, asr r2
   25f2c:	andeq	r6, r2, ip, asr r2
   25f30:	andeq	r6, r2, ip, asr r2
   25f34:	andeq	r6, r2, ip, asr r2
   25f38:	andeq	r6, r2, ip, asr r2
   25f3c:	andeq	r6, r2, ip, asr r2
   25f40:	andeq	r6, r2, ip, asr r2
   25f44:	andeq	r6, r2, ip, asr r2
   25f48:	andeq	r6, r2, r4, ror #3
   25f4c:	andeq	r6, r2, ip, asr r2
   25f50:	strdeq	r6, [r2], -r4
   25f54:	andeq	r6, r2, ip, asr r2
   25f58:	andeq	r6, r2, ip, asr r2
   25f5c:	andeq	r6, r2, ip, asr r2
   25f60:	andeq	r6, r2, ip, asr r2
   25f64:	andeq	r6, r2, ip, asr r2
   25f68:	andeq	r6, r2, ip, asr r2
   25f6c:	andeq	r6, r2, ip, asr r2
   25f70:	andeq	r6, r2, ip, asr r2
   25f74:	andeq	r6, r2, ip, asr r2
   25f78:	andeq	r6, r2, ip, asr r2
   25f7c:	andeq	r6, r2, ip, asr r2
   25f80:	andeq	r6, r2, ip, asr r2
   25f84:	andeq	r6, r2, ip, asr r2
   25f88:	andeq	r6, r2, ip, asr r2
   25f8c:	andeq	r6, r2, ip, asr r2
   25f90:	andeq	r6, r2, ip, asr r2
   25f94:	andeq	r6, r2, r4, lsl #4
   25f98:	andeq	r6, r2, ip, asr r2
   25f9c:	andeq	r6, r2, ip, asr r2
   25fa0:	andeq	r6, r2, ip, asr r2
   25fa4:	andeq	r6, r2, r4, lsl r2
   25fa8:	andeq	r6, r2, ip, asr r2
   25fac:	andeq	r6, r2, ip, asr r2
   25fb0:	andeq	r6, r2, ip, asr r2
   25fb4:	andeq	r6, r2, r4, lsr #4
   25fb8:	andeq	r6, r2, r8, lsr r2
   25fbc:	andeq	r6, r2, r4, asr #4
   25fc0:	tst	r8, #16384	; 0x4000
   25fc4:	bne	2625c <__assert_fail@plt+0x143c8>
   25fc8:	sub	r1, r1, #49	; 0x31
   25fcc:	mov	r2, #4
   25fd0:	b	260bc <__assert_fail@plt+0x14228>
   25fd4:	movw	r1, #65280	; 0xff00
   25fd8:	movt	r1, #65439	; 0xff9f
   25fdc:	and	r0, r0, r1
   25fe0:	orr	r0, r0, #1
   25fe4:	orr	r0, r0, #2097152	; 0x200000
   25fe8:	str	r0, [r5]
   25fec:	mov	r4, #1
   25ff0:	mov	r0, r4
   25ff4:	sub	sp, fp, #24
   25ff8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25ffc:	tst	r8, #8
   26000:	bne	2604c <__assert_fail@plt+0x141b8>
   26004:	ldr	r1, [r7, #40]	; 0x28
   26008:	ldr	r2, [r7, #48]	; 0x30
   2600c:	add	r1, r1, #1
   26010:	cmp	r1, r2
   26014:	beq	2604c <__assert_fail@plt+0x141b8>
   26018:	str	r1, [r7, #40]	; 0x28
   2601c:	mov	r0, sp
   26020:	mov	r1, r7
   26024:	mov	r2, r8
   26028:	bl	25a88 <__assert_fail@plt+0x13bf4>
   2602c:	ldr	r0, [r7, #40]	; 0x28
   26030:	sub	r0, r0, #1
   26034:	str	r0, [r7, #40]	; 0x28
   26038:	ldrb	r0, [sp, #4]
   2603c:	sub	r0, r0, #9
   26040:	cmp	r0, #1
   26044:	bhi	2625c <__assert_fail@plt+0x143c8>
   26048:	ldr	r0, [r5]
   2604c:	mov	r1, #32
   26050:	b	260b8 <__assert_fail@plt+0x14224>
   26054:	tst	r8, #8192	; 0x2000
   26058:	bne	2614c <__assert_fail@plt+0x142b8>
   2605c:	b	2625c <__assert_fail@plt+0x143c8>
   26060:	tst	r8, #8192	; 0x2000
   26064:	bne	2615c <__assert_fail@plt+0x142c8>
   26068:	b	2625c <__assert_fail@plt+0x143c8>
   2606c:	mov	r1, #11
   26070:	b	26254 <__assert_fail@plt+0x143c0>
   26074:	movw	r1, #1026	; 0x402
   26078:	tst	r8, r1
   2607c:	bne	2625c <__assert_fail@plt+0x143c8>
   26080:	b	26174 <__assert_fail@plt+0x142e0>
   26084:	mov	r1, #5
   26088:	b	26254 <__assert_fail@plt+0x143c0>
   2608c:	movw	r1, #1026	; 0x402
   26090:	tst	r8, r1
   26094:	bne	2625c <__assert_fail@plt+0x143c8>
   26098:	b	261ac <__assert_fail@plt+0x14318>
   2609c:	mov	r1, #20
   260a0:	b	26254 <__assert_fail@plt+0x143c0>
   260a4:	movw	r1, #8
   260a8:	movt	r1, #128	; 0x80
   260ac:	tst	r8, r1
   260b0:	beq	26108 <__assert_fail@plt+0x14274>
   260b4:	mov	r1, #16
   260b8:	mov	r2, #12
   260bc:	bfi	r0, r2, #0, #8
   260c0:	str	r1, [r9]
   260c4:	str	r0, [r9, #4]
   260c8:	mov	r0, r4
   260cc:	sub	sp, fp, #24
   260d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   260d4:	and	r1, r8, #4608	; 0x1200
   260d8:	cmp	r1, #4608	; 0x1200
   260dc:	beq	26230 <__assert_fail@plt+0x1439c>
   260e0:	b	2625c <__assert_fail@plt+0x143c8>
   260e4:	and	r1, r8, #33792	; 0x8400
   260e8:	cmp	r1, #32768	; 0x8000
   260ec:	bne	2625c <__assert_fail@plt+0x143c8>
   260f0:	mov	r1, #10
   260f4:	b	26254 <__assert_fail@plt+0x143c0>
   260f8:	and	r1, r8, #4608	; 0x1200
   260fc:	cmp	r1, #4608	; 0x1200
   26100:	beq	26250 <__assert_fail@plt+0x143bc>
   26104:	b	2625c <__assert_fail@plt+0x143c8>
   26108:	ldr	r1, [r7, #40]	; 0x28
   2610c:	cmp	r1, #0
   26110:	beq	260b4 <__assert_fail@plt+0x14220>
   26114:	tst	r8, #2048	; 0x800
   26118:	beq	2625c <__assert_fail@plt+0x143c8>
   2611c:	ldr	r2, [r7, #4]
   26120:	add	r1, r2, r1
   26124:	ldrb	r1, [r1, #-1]
   26128:	cmp	r1, #10
   2612c:	beq	260b4 <__assert_fail@plt+0x14220>
   26130:	b	2625c <__assert_fail@plt+0x143c8>
   26134:	tst	r8, #524288	; 0x80000
   26138:	bne	2625c <__assert_fail@plt+0x143c8>
   2613c:	mov	r1, #128	; 0x80
   26140:	b	260b8 <__assert_fail@plt+0x14224>
   26144:	tst	r8, #8192	; 0x2000
   26148:	bne	2625c <__assert_fail@plt+0x143c8>
   2614c:	mov	r1, #8
   26150:	b	26254 <__assert_fail@plt+0x143c0>
   26154:	tst	r8, #8192	; 0x2000
   26158:	bne	2625c <__assert_fail@plt+0x143c8>
   2615c:	mov	r1, #9
   26160:	b	26254 <__assert_fail@plt+0x143c0>
   26164:	movw	r1, #1026	; 0x402
   26168:	and	r1, r8, r1
   2616c:	cmp	r1, #2
   26170:	bne	2625c <__assert_fail@plt+0x143c8>
   26174:	mov	r1, #18
   26178:	b	26254 <__assert_fail@plt+0x143c0>
   2617c:	tst	r8, #524288	; 0x80000
   26180:	bne	2625c <__assert_fail@plt+0x143c8>
   26184:	mov	r1, #6
   26188:	b	260b8 <__assert_fail@plt+0x14224>
   2618c:	tst	r8, #524288	; 0x80000
   26190:	bne	2625c <__assert_fail@plt+0x143c8>
   26194:	mov	r1, #9
   26198:	b	260b8 <__assert_fail@plt+0x14224>
   2619c:	movw	r1, #1026	; 0x402
   261a0:	and	r1, r8, r1
   261a4:	cmp	r1, #2
   261a8:	bne	2625c <__assert_fail@plt+0x143c8>
   261ac:	mov	r1, #19
   261b0:	b	26254 <__assert_fail@plt+0x143c0>
   261b4:	tst	r8, #524288	; 0x80000
   261b8:	bne	2625c <__assert_fail@plt+0x143c8>
   261bc:	mov	r1, #512	; 0x200
   261c0:	b	260b8 <__assert_fail@plt+0x14224>
   261c4:	tst	r8, #524288	; 0x80000
   261c8:	bne	2625c <__assert_fail@plt+0x143c8>
   261cc:	mov	r1, #35	; 0x23
   261d0:	b	26254 <__assert_fail@plt+0x143c0>
   261d4:	tst	r8, #524288	; 0x80000
   261d8:	bne	2625c <__assert_fail@plt+0x143c8>
   261dc:	mov	r1, #33	; 0x21
   261e0:	b	26254 <__assert_fail@plt+0x143c0>
   261e4:	tst	r8, #524288	; 0x80000
   261e8:	bne	2625c <__assert_fail@plt+0x143c8>
   261ec:	mov	r1, #64	; 0x40
   261f0:	b	260b8 <__assert_fail@plt+0x14224>
   261f4:	tst	r8, #524288	; 0x80000
   261f8:	bne	2625c <__assert_fail@plt+0x143c8>
   261fc:	mov	r1, #256	; 0x100
   26200:	b	260b8 <__assert_fail@plt+0x14224>
   26204:	tst	r8, #524288	; 0x80000
   26208:	bne	2625c <__assert_fail@plt+0x143c8>
   2620c:	mov	r1, #34	; 0x22
   26210:	b	26254 <__assert_fail@plt+0x143c0>
   26214:	tst	r8, #524288	; 0x80000
   26218:	bne	2625c <__assert_fail@plt+0x143c8>
   2621c:	mov	r1, #32
   26220:	b	26254 <__assert_fail@plt+0x143c0>
   26224:	and	r1, r8, #4608	; 0x1200
   26228:	cmp	r1, #512	; 0x200
   2622c:	bne	2625c <__assert_fail@plt+0x143c8>
   26230:	mov	r1, #23
   26234:	b	26254 <__assert_fail@plt+0x143c0>
   26238:	tst	r8, #33792	; 0x8400
   2623c:	bne	2625c <__assert_fail@plt+0x143c8>
   26240:	b	260f0 <__assert_fail@plt+0x1425c>
   26244:	and	r1, r8, #4608	; 0x1200
   26248:	cmp	r1, #512	; 0x200
   2624c:	bne	2625c <__assert_fail@plt+0x143c8>
   26250:	mov	r1, #24
   26254:	bfi	r0, r1, #0, #8
   26258:	str	r0, [r5]
   2625c:	mov	r0, r4
   26260:	sub	sp, fp, #24
   26264:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26268:	cmp	r3, #2
   2626c:	blt	2629c <__assert_fail@plt+0x14408>
   26270:	ldr	r3, [r7, #8]
   26274:	ldr	r4, [r3, r2, lsl #2]
   26278:	cmn	r4, #1
   2627c:	beq	25b28 <__assert_fail@plt+0x13c94>
   26280:	ldr	r4, [r7, #28]
   26284:	add	r6, r6, #2
   26288:	cmp	r4, r6
   2628c:	beq	2629c <__assert_fail@plt+0x14408>
   26290:	ldr	r3, [r3, r6, lsl #2]
   26294:	cmn	r3, #1
   26298:	beq	25b28 <__assert_fail@plt+0x13c94>
   2629c:	ldrb	r3, [r7, #76]	; 0x4c
   262a0:	mov	r6, r2
   262a4:	ldr	r4, [r7, #24]
   262a8:	ldr	ip, [r7]
   262ac:	cmp	r3, #0
   262b0:	ldrne	r6, [r7, #12]
   262b4:	ldrne	r6, [r6, r2, lsl #2]
   262b8:	cmp	r3, #0
   262bc:	add	r6, r4, r6
   262c0:	add	r6, ip, r6
   262c4:	ldrsb	r6, [r6]
   262c8:	beq	25b30 <__assert_fail@plt+0x13c9c>
   262cc:	cmn	r6, #1
   262d0:	ble	25b28 <__assert_fail@plt+0x13c94>
   262d4:	b	25b30 <__assert_fail@plt+0x13c9c>
   262d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   262dc:	add	fp, sp, #28
   262e0:	sub	sp, sp, #12
   262e4:	mov	r4, r1
   262e8:	ldr	r8, [r1]
   262ec:	ldr	r1, [fp, #8]
   262f0:	ldr	r5, [fp, #12]
   262f4:	mov	r7, r2
   262f8:	str	r0, [sp, #8]
   262fc:	mov	sl, r3
   26300:	mov	r9, r1
   26304:	str	r1, [sp]
   26308:	mov	r1, r4
   2630c:	str	r5, [sp, #4]
   26310:	bl	26740 <__assert_fail@plt+0x148ac>
   26314:	mov	r3, r5
   26318:	mov	r5, r0
   2631c:	mov	r0, #0
   26320:	cmp	r5, #0
   26324:	bne	26334 <__assert_fail@plt+0x144a0>
   26328:	ldr	r1, [r3]
   2632c:	cmp	r1, #0
   26330:	bne	26534 <__assert_fail@plt+0x146a0>
   26334:	cmp	r9, #0
   26338:	bne	2644c <__assert_fail@plt+0x145b8>
   2633c:	mov	r9, #0
   26340:	ldrb	r0, [r7, #4]
   26344:	orr	r0, r0, #8
   26348:	cmp	r0, #10
   2634c:	bne	2636c <__assert_fail@plt+0x144d8>
   26350:	b	26530 <__assert_fail@plt+0x1469c>
   26354:	cmp	r5, #0
   26358:	moveq	r5, r6
   2635c:	ldrb	r0, [r7, #4]
   26360:	orr	r0, r0, #8
   26364:	cmp	r0, #10
   26368:	beq	26530 <__assert_fail@plt+0x1469c>
   2636c:	ldr	r0, [sp, #8]
   26370:	str	r3, [sp, #4]
   26374:	mov	r1, r4
   26378:	mov	r2, r7
   2637c:	mov	r3, sl
   26380:	str	r9, [sp]
   26384:	bl	26740 <__assert_fail@plt+0x148ac>
   26388:	ldr	r3, [fp, #12]
   2638c:	cmp	r5, #0
   26390:	mov	r2, r5
   26394:	mov	r6, r0
   26398:	movwne	r2, #1
   2639c:	cmp	r0, #0
   263a0:	bne	263b0 <__assert_fail@plt+0x1451c>
   263a4:	ldr	r1, [r3]
   263a8:	cmp	r1, #0
   263ac:	bne	2653c <__assert_fail@plt+0x146a8>
   263b0:	cmp	r5, #0
   263b4:	cmpne	r6, #0
   263b8:	beq	26354 <__assert_fail@plt+0x144c0>
   263bc:	ldr	r1, [r8, #64]	; 0x40
   263c0:	cmp	r1, #31
   263c4:	beq	26418 <__assert_fail@plt+0x14584>
   263c8:	ldr	r0, [r8, #56]	; 0x38
   263cc:	add	r2, r1, #1
   263d0:	add	r0, r0, r1, lsl #5
   263d4:	mov	r1, #16
   263d8:	str	r2, [r8, #64]	; 0x40
   263dc:	str	r9, [r0, #4]!
   263e0:	stmib	r0, {r5, r6, r9}
   263e4:	str	r9, [r0, #16]
   263e8:	str	r9, [r0, #20]
   263ec:	str	r1, [r0, #24]
   263f0:	mvn	r1, #0
   263f4:	str	r1, [r0, #28]
   263f8:	str	r0, [r5]
   263fc:	str	r0, [r6]
   26400:	mov	r5, r0
   26404:	ldrb	r0, [r7, #4]
   26408:	orr	r0, r0, #8
   2640c:	cmp	r0, #10
   26410:	bne	2636c <__assert_fail@plt+0x144d8>
   26414:	b	26530 <__assert_fail@plt+0x1469c>
   26418:	mov	r0, #996	; 0x3e4
   2641c:	bl	36fb4 <__assert_fail@plt+0x25120>
   26420:	cmp	r0, #0
   26424:	beq	265e8 <__assert_fail@plt+0x14754>
   26428:	ldr	r1, [r8, #56]	; 0x38
   2642c:	ldr	r3, [fp, #12]
   26430:	str	r1, [r0]
   26434:	mov	r1, #0
   26438:	str	r1, [r8, #64]	; 0x40
   2643c:	str	r0, [r8, #56]	; 0x38
   26440:	b	263cc <__assert_fail@plt+0x14538>
   26444:	cmp	r5, #0
   26448:	moveq	r5, r6
   2644c:	ldrb	r0, [r7, #4]
   26450:	orr	r1, r0, #8
   26454:	cmp	r1, #10
   26458:	cmpne	r0, #9
   2645c:	beq	26530 <__assert_fail@plt+0x1469c>
   26460:	ldr	r0, [sp, #8]
   26464:	str	r3, [sp, #4]
   26468:	mov	r1, r4
   2646c:	mov	r2, r7
   26470:	mov	r3, sl
   26474:	str	r9, [sp]
   26478:	bl	26740 <__assert_fail@plt+0x148ac>
   2647c:	ldr	r3, [fp, #12]
   26480:	cmp	r5, #0
   26484:	mov	r2, r5
   26488:	mov	r6, r0
   2648c:	movwne	r2, #1
   26490:	cmp	r0, #0
   26494:	bne	264a4 <__assert_fail@plt+0x14610>
   26498:	ldr	r1, [r3]
   2649c:	cmp	r1, #0
   264a0:	bne	2653c <__assert_fail@plt+0x146a8>
   264a4:	cmp	r5, #0
   264a8:	cmpne	r6, #0
   264ac:	beq	26444 <__assert_fail@plt+0x145b0>
   264b0:	ldr	r1, [r8, #64]	; 0x40
   264b4:	cmp	r1, #31
   264b8:	beq	26504 <__assert_fail@plt+0x14670>
   264bc:	ldr	r0, [r8, #56]	; 0x38
   264c0:	add	r2, r1, #1
   264c4:	add	r0, r0, r1, lsl #5
   264c8:	mov	r1, #0
   264cc:	str	r2, [r8, #64]	; 0x40
   264d0:	str	r1, [r0, #4]!
   264d4:	stmib	r0, {r5, r6}
   264d8:	str	r1, [r0, #12]
   264dc:	str	r1, [r0, #16]
   264e0:	str	r1, [r0, #20]
   264e4:	mov	r1, #16
   264e8:	str	r1, [r0, #24]
   264ec:	mvn	r1, #0
   264f0:	str	r1, [r0, #28]
   264f4:	str	r0, [r5]
   264f8:	str	r0, [r6]
   264fc:	mov	r5, r0
   26500:	b	2644c <__assert_fail@plt+0x145b8>
   26504:	mov	r0, #996	; 0x3e4
   26508:	bl	36fb4 <__assert_fail@plt+0x25120>
   2650c:	cmp	r0, #0
   26510:	beq	265e8 <__assert_fail@plt+0x14754>
   26514:	ldr	r1, [r8, #56]	; 0x38
   26518:	ldr	r3, [fp, #12]
   2651c:	str	r1, [r0]
   26520:	mov	r1, #0
   26524:	str	r1, [r8, #64]	; 0x40
   26528:	str	r0, [r8, #56]	; 0x38
   2652c:	b	264c0 <__assert_fail@plt+0x1462c>
   26530:	mov	r0, r5
   26534:	sub	sp, fp, #28
   26538:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2653c:	mov	r0, #0
   26540:	cmp	r2, #0
   26544:	beq	26534 <__assert_fail@plt+0x146a0>
   26548:	movw	r6, #255	; 0xff
   2654c:	movt	r6, #4
   26550:	mov	r7, r5
   26554:	ldr	r5, [r5, #4]
   26558:	cmp	r5, #0
   2655c:	bne	26550 <__assert_fail@plt+0x146bc>
   26560:	ldr	r5, [r7, #8]
   26564:	cmp	r5, #0
   26568:	bne	26550 <__assert_fail@plt+0x146bc>
   2656c:	ldr	r1, [r7, #24]
   26570:	and	r1, r1, r6
   26574:	cmp	r1, #3
   26578:	beq	265b0 <__assert_fail@plt+0x1471c>
   2657c:	cmp	r1, #6
   26580:	bne	265bc <__assert_fail@plt+0x14728>
   26584:	ldr	r4, [r7, #20]
   26588:	ldr	r0, [r4]
   2658c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   26590:	ldr	r0, [r4, #4]
   26594:	bl	17b10 <__assert_fail@plt+0x5c7c>
   26598:	ldr	r0, [r4, #8]
   2659c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   265a0:	ldr	r0, [r4, #12]
   265a4:	bl	17b10 <__assert_fail@plt+0x5c7c>
   265a8:	mov	r0, r4
   265ac:	b	265b4 <__assert_fail@plt+0x14720>
   265b0:	ldr	r0, [r7, #20]
   265b4:	bl	17b10 <__assert_fail@plt+0x5c7c>
   265b8:	mov	r0, #0
   265bc:	ldr	r1, [r7]
   265c0:	cmp	r1, #0
   265c4:	beq	26534 <__assert_fail@plt+0x146a0>
   265c8:	ldr	r5, [r1, #8]
   265cc:	cmp	r5, r7
   265d0:	mov	r7, r1
   265d4:	beq	2656c <__assert_fail@plt+0x146d8>
   265d8:	cmp	r5, #0
   265dc:	mov	r7, r1
   265e0:	beq	2656c <__assert_fail@plt+0x146d8>
   265e4:	b	26550 <__assert_fail@plt+0x146bc>
   265e8:	ldr	r1, [fp, #12]
   265ec:	movw	r8, #255	; 0xff
   265f0:	movt	r8, #4
   265f4:	mov	r7, r6
   265f8:	ldr	r6, [r6, #4]
   265fc:	cmp	r6, #0
   26600:	bne	265f4 <__assert_fail@plt+0x14760>
   26604:	ldr	r6, [r7, #8]
   26608:	cmp	r6, #0
   2660c:	bne	265f4 <__assert_fail@plt+0x14760>
   26610:	ldr	r0, [r7, #24]
   26614:	and	r0, r0, r8
   26618:	cmp	r0, #3
   2661c:	beq	26654 <__assert_fail@plt+0x147c0>
   26620:	cmp	r0, #6
   26624:	bne	26660 <__assert_fail@plt+0x147cc>
   26628:	ldr	r4, [r7, #20]
   2662c:	ldr	r0, [r4]
   26630:	bl	17b10 <__assert_fail@plt+0x5c7c>
   26634:	ldr	r0, [r4, #4]
   26638:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2663c:	ldr	r0, [r4, #8]
   26640:	bl	17b10 <__assert_fail@plt+0x5c7c>
   26644:	ldr	r0, [r4, #12]
   26648:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2664c:	mov	r0, r4
   26650:	b	26658 <__assert_fail@plt+0x147c4>
   26654:	ldr	r0, [r7, #20]
   26658:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2665c:	ldr	r1, [fp, #12]
   26660:	ldr	r0, [r7]
   26664:	cmp	r0, #0
   26668:	beq	2668c <__assert_fail@plt+0x147f8>
   2666c:	ldr	r6, [r0, #8]
   26670:	cmp	r6, r7
   26674:	mov	r7, r0
   26678:	beq	26610 <__assert_fail@plt+0x1477c>
   2667c:	cmp	r6, #0
   26680:	mov	r7, r0
   26684:	beq	26610 <__assert_fail@plt+0x1477c>
   26688:	b	265f4 <__assert_fail@plt+0x14760>
   2668c:	mov	r6, r5
   26690:	ldr	r5, [r5, #4]
   26694:	cmp	r5, #0
   26698:	bne	2668c <__assert_fail@plt+0x147f8>
   2669c:	ldr	r5, [r6, #8]
   266a0:	cmp	r5, #0
   266a4:	bne	2668c <__assert_fail@plt+0x147f8>
   266a8:	ldr	r0, [r6, #24]
   266ac:	and	r0, r0, r8
   266b0:	cmp	r0, #3
   266b4:	beq	266ec <__assert_fail@plt+0x14858>
   266b8:	cmp	r0, #6
   266bc:	bne	266f8 <__assert_fail@plt+0x14864>
   266c0:	ldr	r4, [r6, #20]
   266c4:	ldr	r0, [r4]
   266c8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   266cc:	ldr	r0, [r4, #4]
   266d0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   266d4:	ldr	r0, [r4, #8]
   266d8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   266dc:	ldr	r0, [r4, #12]
   266e0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   266e4:	mov	r0, r4
   266e8:	b	266f0 <__assert_fail@plt+0x1485c>
   266ec:	ldr	r0, [r6, #20]
   266f0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   266f4:	ldr	r1, [fp, #12]
   266f8:	ldr	r0, [r6]
   266fc:	cmp	r0, #0
   26700:	beq	26724 <__assert_fail@plt+0x14890>
   26704:	ldr	r5, [r0, #8]
   26708:	cmp	r5, r6
   2670c:	mov	r6, r0
   26710:	beq	266a8 <__assert_fail@plt+0x14814>
   26714:	cmp	r5, #0
   26718:	mov	r6, r0
   2671c:	beq	266a8 <__assert_fail@plt+0x14814>
   26720:	b	2668c <__assert_fail@plt+0x147f8>
   26724:	mov	r0, #12
   26728:	str	r0, [r1]
   2672c:	mov	r0, #0
   26730:	sub	sp, fp, #28
   26734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26738:	nop	{0}
   2673c:	nop	{0}
   26740:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26744:	add	fp, sp, #28
   26748:	sub	sp, sp, #148	; 0x94
   2674c:	str	r0, [sp, #24]
   26750:	ldr	r0, [r2, #4]
   26754:	mov	r7, r1
   26758:	mov	lr, r2
   2675c:	mvn	r1, #0
   26760:	mov	r6, r3
   26764:	mov	sl, #0
   26768:	ldr	r2, [fp, #12]
   2676c:	ldr	r8, [r7]
   26770:	uxtab	r1, r1, r0
   26774:	cmp	r1, #35	; 0x23
   26778:	str	r2, [sp, #16]
   2677c:	str	lr, [sp, #44]	; 0x2c
   26780:	bhi	268ac <__assert_fail@plt+0x14a18>
   26784:	add	r2, pc, #0
   26788:	ldr	pc, [r2, r1, lsl #2]
   2678c:	andeq	r6, r2, r0, ror fp
   26790:	andeq	r8, r2, r4, asr r6
   26794:	andeq	r6, r2, ip, lsr #17
   26798:	andeq	r6, r2, r0, lsr r9
   2679c:			; <UNDEFINED> instruction: 0x000269b0
   267a0:	andeq	r6, r2, ip, lsr #17
   267a4:	andeq	r6, r2, ip, lsr #17
   267a8:	andeq	r6, r2, r8, lsl sl
   267ac:			; <UNDEFINED> instruction: 0x000268bc
   267b0:	andeq	r8, r2, r4, asr r6
   267b4:	andeq	r6, r2, ip, lsr #17
   267b8:	andeq	r6, r2, r8, lsr #21
   267bc:	andeq	r6, r2, ip, lsr #17
   267c0:	andeq	r6, r2, ip, lsr #17
   267c4:	andeq	r6, r2, ip, lsr #17
   267c8:	andeq	r6, r2, ip, lsr #17
   267cc:	andeq	r6, r2, ip, lsr #17
   267d0:	andeq	r6, r2, ip, lsr #17
   267d4:	andeq	r6, r2, ip, lsr #17
   267d8:	andeq	r6, r2, r8, asr #26
   267dc:	andeq	r6, r2, ip, lsr #17
   267e0:	andeq	r6, r2, ip, lsr #17
   267e4:	andeq	r6, r2, r4, lsr #17
   267e8:	andeq	r6, r2, ip, asr #17
   267ec:	andeq	r6, r2, ip, lsr #17
   267f0:	andeq	r6, r2, ip, lsr #17
   267f4:	andeq	r6, r2, ip, lsr #17
   267f8:	andeq	r6, r2, ip, lsr #17
   267fc:	andeq	r6, r2, ip, lsr #17
   26800:	andeq	r6, r2, ip, lsr #17
   26804:	andeq	r6, r2, ip, lsr #17
   26808:	andeq	r6, r2, ip, lsl r8
   2680c:	andeq	r6, r2, ip, lsl r8
   26810:	andeq	r6, r2, r0, asr #16
   26814:	andeq	r6, r2, r0, asr #16
   26818:	andeq	r6, r2, r0, asr #26
   2681c:	ldr	r1, [sp, #24]
   26820:	mvn	r2, #32
   26824:	movw	r3, #39913	; 0x9be9
   26828:	uxtab	r0, r2, r0
   2682c:	movw	r2, #42790	; 0xa726
   26830:	movt	r3, #3
   26834:	clz	r0, r0
   26838:	movt	r2, #3
   2683c:	b	26860 <__assert_fail@plt+0x149cc>
   26840:	ldr	r1, [sp, #24]
   26844:	mvn	r2, #34	; 0x22
   26848:	movw	r3, #38108	; 0x94dc
   2684c:	uxtab	r0, r2, r0
   26850:	movw	r2, #42796	; 0xa72c
   26854:	movt	r3, #3
   26858:	clz	r0, r0
   2685c:	movt	r2, #3
   26860:	lsr	r0, r0, #5
   26864:	ldr	r1, [r1, #64]	; 0x40
   26868:	str	r0, [sp]
   2686c:	ldr	r4, [sp, #16]
   26870:	str	r4, [sp, #4]
   26874:	mov	r0, r8
   26878:	bl	28cd4 <__assert_fail@plt+0x16e40>
   2687c:	mov	r7, r0
   26880:	cmp	r0, #0
   26884:	bne	2689c <__assert_fail@plt+0x14a08>
   26888:	ldr	r0, [r4]
   2688c:	cmp	r0, #0
   26890:	ldr	lr, [sp, #44]	; 0x2c
   26894:	beq	27860 <__assert_fail@plt+0x159cc>
   26898:	b	28654 <__assert_fail@plt+0x167c0>
   2689c:	ldr	lr, [sp, #44]	; 0x2c
   268a0:	b	27860 <__assert_fail@plt+0x159cc>
   268a4:	tst	r6, #16777216	; 0x1000000
   268a8:	bne	26928 <__assert_fail@plt+0x14a94>
   268ac:	tst	r6, #32
   268b0:	bne	26928 <__assert_fail@plt+0x14a94>
   268b4:	tst	r6, #16
   268b8:	bne	26dc4 <__assert_fail@plt+0x14f30>
   268bc:	tst	r6, #131072	; 0x20000
   268c0:	uxtbeq	r1, r0
   268c4:	cmpeq	r1, #9
   268c8:	beq	26e0c <__assert_fail@plt+0x14f78>
   268cc:	mov	r1, #1
   268d0:	bfi	r0, r1, #0, #8
   268d4:	str	r0, [lr, #4]
   268d8:	ldr	r1, [r8, #64]	; 0x40
   268dc:	cmp	r1, #31
   268e0:	beq	287cc <__assert_fail@plt+0x16938>
   268e4:	ldr	r0, [r8, #56]	; 0x38
   268e8:	add	r2, r1, #1
   268ec:	add	r7, r0, r1, lsl #5
   268f0:	mov	r0, #0
   268f4:	str	r2, [r8, #64]	; 0x40
   268f8:	str	r0, [r7, #4]!
   268fc:	str	r0, [r7, #4]
   26900:	str	r0, [r7, #8]
   26904:	ldm	lr, {r1, r2}
   26908:	str	r0, [r7, #12]
   2690c:	str	r0, [r7, #16]
   26910:	mvn	r0, #0
   26914:	str	r0, [r7, #28]
   26918:	bic	r0, r2, #786432	; 0xc0000
   2691c:	str	r1, [r7, #20]
   26920:	str	r0, [r7, #24]
   26924:	b	27860 <__assert_fail@plt+0x159cc>
   26928:	mov	r0, #13
   2692c:	b	27754 <__assert_fail@plt+0x158c0>
   26930:	ldr	r0, [lr]
   26934:	ldr	r2, [r8, #84]	; 0x54
   26938:	mov	r1, #1
   2693c:	tst	r2, r1, lsl r0
   26940:	beq	28810 <__assert_fail@plt+0x1697c>
   26944:	lsl	r0, r1, r0
   26948:	ldr	r1, [r8, #64]	; 0x40
   2694c:	ldr	r2, [r8, #80]	; 0x50
   26950:	orr	r0, r2, r0
   26954:	cmp	r1, #31
   26958:	str	r0, [r8, #80]	; 0x50
   2695c:	beq	28888 <__assert_fail@plt+0x169f4>
   26960:	ldr	r0, [r8, #56]	; 0x38
   26964:	add	r2, r1, #1
   26968:	add	r7, r0, r1, lsl #5
   2696c:	mov	r0, #0
   26970:	str	r2, [r8, #64]	; 0x40
   26974:	str	r0, [r7, #4]!
   26978:	str	r0, [r7, #4]
   2697c:	str	r0, [r7, #8]
   26980:	ldm	lr, {r1, r2}
   26984:	str	r0, [r7, #12]
   26988:	str	r0, [r7, #16]
   2698c:	mvn	r0, #0
   26990:	str	r0, [r7, #28]
   26994:	bic	r0, r2, #786432	; 0xc0000
   26998:	str	r1, [r7, #20]
   2699c:	str	r0, [r7, #24]
   269a0:	ldr	r0, [r8, #76]	; 0x4c
   269a4:	add	r0, r0, #1
   269a8:	str	r0, [r8, #76]	; 0x4c
   269ac:	b	26a08 <__assert_fail@plt+0x14b74>
   269b0:	ldr	r1, [r8, #64]	; 0x40
   269b4:	cmp	r1, #31
   269b8:	beq	28818 <__assert_fail@plt+0x16984>
   269bc:	ldr	r0, [r8, #56]	; 0x38
   269c0:	add	r2, r1, #1
   269c4:	add	r7, r0, r1, lsl #5
   269c8:	mov	r0, #0
   269cc:	str	r2, [r8, #64]	; 0x40
   269d0:	str	r0, [r7, #4]!
   269d4:	str	r0, [r7, #4]
   269d8:	str	r0, [r7, #8]
   269dc:	ldm	lr, {r1, r2}
   269e0:	str	r0, [r7, #12]
   269e4:	str	r0, [r7, #16]
   269e8:	mvn	r0, #0
   269ec:	str	r0, [r7, #28]
   269f0:	bic	r0, r2, #786432	; 0xc0000
   269f4:	str	r1, [r7, #20]
   269f8:	str	r0, [r7, #24]
   269fc:	ldr	r0, [r8, #92]	; 0x5c
   26a00:	cmp	r0, #2
   26a04:	blt	27860 <__assert_fail@plt+0x159cc>
   26a08:	ldrb	r0, [r8, #88]	; 0x58
   26a0c:	orr	r0, r0, #2
   26a10:	strb	r0, [r8, #88]	; 0x58
   26a14:	b	27860 <__assert_fail@plt+0x159cc>
   26a18:	ldr	r4, [r7, #24]
   26a1c:	mov	sl, r6
   26a20:	orr	r2, r6, #8388608	; 0x800000
   26a24:	ldr	r6, [sp, #24]
   26a28:	ldr	r5, [fp, #8]
   26a2c:	add	r0, r4, #1
   26a30:	mov	r1, r6
   26a34:	str	r0, [r7, #24]
   26a38:	mov	r0, lr
   26a3c:	bl	25a88 <__assert_fail@plt+0x13bf4>
   26a40:	ldr	r1, [r6, #40]	; 0x28
   26a44:	ldr	lr, [sp, #44]	; 0x2c
   26a48:	mov	r9, #0
   26a4c:	add	r0, r1, r0
   26a50:	str	r0, [r6, #40]	; 0x28
   26a54:	ldrb	r0, [lr, #4]
   26a58:	cmp	r0, #9
   26a5c:	beq	277f4 <__assert_fail@plt+0x15960>
   26a60:	add	r0, r5, #1
   26a64:	mov	r1, r7
   26a68:	mov	r2, lr
   26a6c:	mov	r3, sl
   26a70:	mov	r6, lr
   26a74:	str	r0, [sp]
   26a78:	ldr	r5, [sp, #16]
   26a7c:	str	r5, [sp, #4]
   26a80:	ldr	r0, [sp, #24]
   26a84:	bl	25700 <__assert_fail@plt+0x1386c>
   26a88:	mov	r9, r0
   26a8c:	ldr	r0, [r5]
   26a90:	cmp	r0, #0
   26a94:	beq	277e4 <__assert_fail@plt+0x15950>
   26a98:	mov	sl, #0
   26a9c:	mov	r0, sl
   26aa0:	sub	sp, fp, #28
   26aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26aa8:	ldr	r0, [lr]
   26aac:	ldr	r7, [sp, #24]
   26ab0:	movw	r1, #783	; 0x30f
   26ab4:	tst	r0, r1
   26ab8:	beq	26b00 <__assert_fail@plt+0x14c6c>
   26abc:	ldrb	r0, [r8, #88]	; 0x58
   26ac0:	tst	r0, #16
   26ac4:	bne	26afc <__assert_fail@plt+0x14c68>
   26ac8:	orr	r1, r0, #16
   26acc:	tst	r0, #8
   26ad0:	strb	r1, [r8, #88]	; 0x58
   26ad4:	bne	28acc <__assert_fail@plt+0x16c38>
   26ad8:	add	r1, pc, #832	; 0x340
   26adc:	tst	r0, #4
   26ae0:	vld1.64	{d16-d17}, [r1 :128]
   26ae4:	add	r1, r8, #96	; 0x60
   26ae8:	vst1.32	{d16-d17}, [r1]
   26aec:	beq	28ad8 <__assert_fail@plt+0x16c44>
   26af0:	vmov.i32	q8, #0	; 0x00000000
   26af4:	add	r0, r8, #112	; 0x70
   26af8:	vst1.32	{d16-d17}, [r0]
   26afc:	ldr	r0, [lr]
   26b00:	cmp	r0, #512	; 0x200
   26b04:	beq	27648 <__assert_fail@plt+0x157b4>
   26b08:	cmp	r0, #256	; 0x100
   26b0c:	bne	27768 <__assert_fail@plt+0x158d4>
   26b10:	mov	r0, #6
   26b14:	mov	r4, r8
   26b18:	str	r0, [lr]
   26b1c:	ldr	r1, [r4, #64]!	; 0x40
   26b20:	cmp	r1, #31
   26b24:	beq	28a18 <__assert_fail@plt+0x16b84>
   26b28:	ldr	r0, [r8, #56]	; 0x38
   26b2c:	add	r2, r1, #1
   26b30:	add	r5, r0, r1, lsl #5
   26b34:	mov	r0, #0
   26b38:	str	r2, [r4]
   26b3c:	str	r0, [r5, #4]!
   26b40:	str	r0, [r5, #4]
   26b44:	str	r0, [r5, #8]
   26b48:	ldm	lr, {r1, r2}
   26b4c:	str	r0, [r5, #12]
   26b50:	str	r0, [r5, #16]
   26b54:	mvn	r0, #0
   26b58:	str	r0, [r5, #28]
   26b5c:	bic	r0, r2, #786432	; 0xc0000
   26b60:	str	r1, [r5, #20]
   26b64:	str	r0, [r5, #24]
   26b68:	mov	r0, #9
   26b6c:	b	276a4 <__assert_fail@plt+0x15810>
   26b70:	ldr	r1, [r8, #64]	; 0x40
   26b74:	cmp	r1, #31
   26b78:	beq	28844 <__assert_fail@plt+0x169b0>
   26b7c:	ldr	r0, [r8, #56]	; 0x38
   26b80:	ldr	r3, [sp, #24]
   26b84:	add	r2, r1, #1
   26b88:	add	r4, r0, r1, lsl #5
   26b8c:	mov	r0, #0
   26b90:	str	r2, [r8, #64]	; 0x40
   26b94:	str	r0, [r4, #4]!
   26b98:	str	r0, [r4, #4]
   26b9c:	str	r0, [r4, #8]
   26ba0:	ldm	lr, {r1, r2}
   26ba4:	str	r0, [r4, #12]
   26ba8:	str	r0, [r4, #16]
   26bac:	mvn	r0, #0
   26bb0:	str	r0, [r4, #28]
   26bb4:	bic	r0, r2, #786432	; 0xc0000
   26bb8:	str	r1, [r4, #20]
   26bbc:	str	r0, [r4, #24]
   26bc0:	ldr	r0, [r8, #92]	; 0x5c
   26bc4:	cmp	r0, #2
   26bc8:	blt	26e04 <__assert_fail@plt+0x14f70>
   26bcc:	ldr	r0, [r3, #40]	; 0x28
   26bd0:	ldr	r1, [r3, #56]	; 0x38
   26bd4:	cmp	r1, r0
   26bd8:	ble	26e04 <__assert_fail@plt+0x14f70>
   26bdc:	mov	r5, #0
   26be0:	mvn	sl, #0
   26be4:	mov	r9, r6
   26be8:	ldr	r6, [sp, #24]
   26bec:	ldr	r1, [r6, #28]
   26bf0:	cmp	r0, r1
   26bf4:	beq	28660 <__assert_fail@plt+0x167cc>
   26bf8:	ldr	r1, [r6, #8]
   26bfc:	ldr	r0, [r1, r0, lsl #2]
   26c00:	cmn	r0, #1
   26c04:	bne	28660 <__assert_fail@plt+0x167cc>
   26c08:	mov	r0, lr
   26c0c:	mov	r1, r6
   26c10:	mov	r2, r9
   26c14:	bl	25a88 <__assert_fail@plt+0x13bf4>
   26c18:	ldr	r1, [r6, #40]	; 0x28
   26c1c:	add	r0, r1, r0
   26c20:	str	r0, [r6, #40]	; 0x28
   26c24:	ldr	r1, [r8, #64]	; 0x40
   26c28:	cmp	r1, #31
   26c2c:	beq	26cd8 <__assert_fail@plt+0x14e44>
   26c30:	ldr	r0, [r8, #56]	; 0x38
   26c34:	ldr	lr, [sp, #44]	; 0x2c
   26c38:	add	r2, r1, #1
   26c3c:	add	r6, r0, r1, lsl #5
   26c40:	str	r2, [r8, #64]	; 0x40
   26c44:	str	r5, [r6, #4]!
   26c48:	str	r5, [r6, #4]
   26c4c:	str	r5, [r6, #8]
   26c50:	ldm	lr, {r0, r1}
   26c54:	str	r5, [r6, #12]
   26c58:	str	r5, [r6, #16]
   26c5c:	str	sl, [r6, #28]
   26c60:	str	r0, [r6, #20]
   26c64:	bic	r0, r1, #786432	; 0xc0000
   26c68:	str	r0, [r6, #24]
   26c6c:	ldr	r1, [r8, #64]	; 0x40
   26c70:	cmp	r1, #31
   26c74:	beq	26d14 <__assert_fail@plt+0x14e80>
   26c78:	ldr	r0, [r8, #56]	; 0x38
   26c7c:	add	r2, r1, #1
   26c80:	add	r7, r0, r1, lsl #5
   26c84:	mov	r0, #16
   26c88:	cmp	r6, #0
   26c8c:	str	r2, [r8, #64]	; 0x40
   26c90:	str	r5, [r7, #4]!
   26c94:	stmib	r7, {r4, r6}
   26c98:	str	r5, [r7, #12]
   26c9c:	str	r5, [r7, #16]
   26ca0:	str	r5, [r7, #20]
   26ca4:	str	r0, [r7, #24]
   26ca8:	str	sl, [r7, #28]
   26cac:	str	r7, [r4]
   26cb0:	beq	28ab0 <__assert_fail@plt+0x16c1c>
   26cb4:	ldr	r1, [sp, #24]
   26cb8:	str	r7, [r6]
   26cbc:	mov	r4, r7
   26cc0:	mov	r6, r9
   26cc4:	ldr	r0, [r1, #40]	; 0x28
   26cc8:	ldr	r1, [r1, #56]	; 0x38
   26ccc:	cmp	r1, r0
   26cd0:	bgt	26be4 <__assert_fail@plt+0x14d50>
   26cd4:	b	27860 <__assert_fail@plt+0x159cc>
   26cd8:	mov	r0, #996	; 0x3e4
   26cdc:	bl	36fb4 <__assert_fail@plt+0x25120>
   26ce0:	cmp	r0, #0
   26ce4:	beq	26d00 <__assert_fail@plt+0x14e6c>
   26ce8:	ldr	r1, [r8, #56]	; 0x38
   26cec:	str	r1, [r0]
   26cf0:	mov	r1, #0
   26cf4:	str	r1, [r8, #64]	; 0x40
   26cf8:	str	r0, [r8, #56]	; 0x38
   26cfc:	b	26c34 <__assert_fail@plt+0x14da0>
   26d00:	ldr	lr, [sp, #44]	; 0x2c
   26d04:	mov	r6, #0
   26d08:	ldr	r1, [r8, #64]	; 0x40
   26d0c:	cmp	r1, #31
   26d10:	bne	26c78 <__assert_fail@plt+0x14de4>
   26d14:	mov	r0, #996	; 0x3e4
   26d18:	bl	36fb4 <__assert_fail@plt+0x25120>
   26d1c:	ldr	lr, [sp, #44]	; 0x2c
   26d20:	cmp	r0, #0
   26d24:	beq	28ab0 <__assert_fail@plt+0x16c1c>
   26d28:	ldr	r1, [r8, #56]	; 0x38
   26d2c:	str	r1, [r0]
   26d30:	mov	r1, #0
   26d34:	str	r1, [r8, #64]	; 0x40
   26d38:	str	r0, [r8, #56]	; 0x38
   26d3c:	b	26c7c <__assert_fail@plt+0x14de8>
   26d40:	mov	r0, #5
   26d44:	b	27754 <__assert_fail@plt+0x158c0>
   26d48:	mov	sl, #0
   26d4c:	mov	r0, #32
   26d50:	mov	r1, #1
   26d54:	str	sl, [fp, #-32]	; 0xffffffe0
   26d58:	bl	36f60 <__assert_fail@plt+0x250cc>
   26d5c:	mov	r4, r0
   26d60:	mov	r0, #40	; 0x28
   26d64:	mov	r1, #1
   26d68:	bl	36f60 <__assert_fail@plt+0x250cc>
   26d6c:	mov	r5, r0
   26d70:	cmp	r4, #0
   26d74:	cmpne	r5, #0
   26d78:	beq	28874 <__assert_fail@plt+0x169e0>
   26d7c:	str	r5, [sp, #48]	; 0x30
   26d80:	mov	r2, r6
   26d84:	ldr	r5, [sp, #44]	; 0x2c
   26d88:	ldr	r7, [sp, #24]
   26d8c:	mov	r0, r5
   26d90:	mov	r1, r7
   26d94:	bl	290dc <__assert_fail@plt+0x17248>
   26d98:	mov	r3, r0
   26d9c:	ldr	r0, [r5, #4]
   26da0:	mov	r2, r5
   26da4:	uxtb	r1, r0
   26da8:	cmp	r1, #25
   26dac:	beq	26e30 <__assert_fail@plt+0x14f9c>
   26db0:	ldr	sl, [sp, #48]	; 0x30
   26db4:	cmp	r1, #2
   26db8:	beq	28808 <__assert_fail@plt+0x16974>
   26dbc:	mov	r1, #0
   26dc0:	b	26e88 <__assert_fail@plt+0x14ff4>
   26dc4:	ldr	r4, [sp, #24]
   26dc8:	mov	r0, lr
   26dcc:	mov	r2, r6
   26dd0:	mov	r5, lr
   26dd4:	mov	r1, r4
   26dd8:	bl	25a88 <__assert_fail@plt+0x13bf4>
   26ddc:	ldr	r1, [r4, #40]	; 0x28
   26de0:	mov	r2, r5
   26de4:	mov	r3, r6
   26de8:	add	r0, r1, r0
   26dec:	mov	r1, r7
   26df0:	str	r0, [r4, #40]	; 0x28
   26df4:	mov	r0, r4
   26df8:	sub	sp, fp, #28
   26dfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26e00:	b	26740 <__assert_fail@plt+0x148ac>
   26e04:	mov	r7, r4
   26e08:	b	27860 <__assert_fail@plt+0x159cc>
   26e0c:	mov	r0, #16
   26e10:	b	27754 <__assert_fail@plt+0x158c0>
   26e14:	nop	{0}
   26e18:	nop	{0}
   26e1c:	nop	{0}
   26e20:	andeq	r0, r0, r0
   26e24:	mvnseq	r0, #0
   26e28:			; <UNDEFINED> instruction: 0x87fffffe
   26e2c:			; <UNDEFINED> instruction: 0x07fffffe
   26e30:	ldr	sl, [sp, #48]	; 0x30
   26e34:	tst	r6, #256	; 0x100
   26e38:	mov	r1, r7
   26e3c:	ldrb	r0, [sl, #16]
   26e40:	orr	r0, r0, #1
   26e44:	strb	r0, [sl, #16]
   26e48:	ldrne	r0, [r4]
   26e4c:	orrne	r0, r0, #1024	; 0x400
   26e50:	strne	r0, [r4]
   26e54:	ldr	r0, [r7, #40]	; 0x28
   26e58:	add	r0, r0, r3
   26e5c:	str	r0, [r7, #40]	; 0x28
   26e60:	mov	r0, r2
   26e64:	mov	r2, r6
   26e68:	bl	290dc <__assert_fail@plt+0x17248>
   26e6c:	ldr	r2, [sp, #44]	; 0x2c
   26e70:	mov	r3, r0
   26e74:	ldr	r0, [r2, #4]
   26e78:	uxtb	r1, r0
   26e7c:	cmp	r1, #2
   26e80:	beq	28808 <__assert_fail@plt+0x16974>
   26e84:	mov	r1, #1
   26e88:	str	r1, [sp, #36]	; 0x24
   26e8c:	uxtb	r1, r0
   26e90:	str	r4, [sp, #52]	; 0x34
   26e94:	str	r6, [sp, #40]	; 0x28
   26e98:	cmp	r1, #21
   26e9c:	ldr	r5, [sp, #40]	; 0x28
   26ea0:	moveq	r1, #1
   26ea4:	bfieq	r0, r1, #0, #8
   26ea8:	mov	r1, r7
   26eac:	streq	r0, [r2, #4]
   26eb0:	mov	r0, #3
   26eb4:	str	r0, [fp, #-40]	; 0xffffffd8
   26eb8:	sub	r0, fp, #80	; 0x50
   26ebc:	str	r0, [fp, #-36]	; 0xffffffdc
   26ec0:	mov	r0, #1
   26ec4:	str	r5, [sp]
   26ec8:	str	r0, [sp, #4]
   26ecc:	sub	r0, fp, #40	; 0x28
   26ed0:	bl	29284 <__assert_fail@plt+0x173f0>
   26ed4:	cmp	r0, #0
   26ed8:	bne	287f8 <__assert_fail@plt+0x16964>
   26edc:	and	r0, r5, #65536	; 0x10000
   26ee0:	str	r0, [sp, #32]
   26ee4:	mov	r0, #0
   26ee8:	str	r0, [sp, #28]
   26eec:	mov	r0, #0
   26ef0:	str	r0, [sp, #20]
   26ef4:	ldr	r6, [sp, #24]
   26ef8:	ldr	r7, [sp, #44]	; 0x2c
   26efc:	mov	r0, r7
   26f00:	mov	r1, r6
   26f04:	mov	r2, r5
   26f08:	bl	290dc <__assert_fail@plt+0x17248>
   26f0c:	ldr	r5, [fp, #-40]	; 0xffffffd8
   26f10:	ldr	r4, [sp, #52]	; 0x34
   26f14:	mov	r9, r0
   26f18:	cmp	r5, #2
   26f1c:	beq	27120 <__assert_fail@plt+0x1528c>
   26f20:	cmp	r5, #4
   26f24:	bne	26f64 <__assert_fail@plt+0x150d0>
   26f28:	ldr	r1, [fp, #-36]	; 0xffffffdc
   26f2c:	ldr	r0, [r6, #64]	; 0x40
   26f30:	mov	r2, sl
   26f34:	sub	r3, fp, #32
   26f38:	str	r1, [sp]
   26f3c:	ldr	r1, [sp, #40]	; 0x28
   26f40:	str	r1, [sp, #4]
   26f44:	mov	r1, r4
   26f48:	bl	29588 <__assert_fail@plt+0x176f4>
   26f4c:	ldr	r1, [sp, #16]
   26f50:	ldr	lr, [sp, #44]	; 0x2c
   26f54:	cmp	r0, #0
   26f58:	str	r0, [r1]
   26f5c:	beq	27160 <__assert_fail@plt+0x152cc>
   26f60:	b	288c8 <__assert_fail@plt+0x16a34>
   26f64:	ldr	lr, [sp, #44]	; 0x2c
   26f68:	mov	r7, r9
   26f6c:	mov	r9, #7
   26f70:	ldrb	r0, [lr, #4]
   26f74:	cmp	r0, #22
   26f78:	beq	26f88 <__assert_fail@plt+0x150f4>
   26f7c:	cmp	r0, #2
   26f80:	bne	270d8 <__assert_fail@plt+0x15244>
   26f84:	b	288b8 <__assert_fail@plt+0x16a24>
   26f88:	ldr	r4, [sp, #24]
   26f8c:	ldr	r2, [sp, #40]	; 0x28
   26f90:	mov	r6, r7
   26f94:	ldr	r0, [r4, #40]	; 0x28
   26f98:	mov	r1, r4
   26f9c:	add	r0, r0, r7
   26fa0:	str	r0, [r4, #40]	; 0x28
   26fa4:	add	r0, sp, #56	; 0x38
   26fa8:	bl	290dc <__assert_fail@plt+0x17248>
   26fac:	mov	r3, r0
   26fb0:	ldrb	r0, [sp, #60]	; 0x3c
   26fb4:	cmp	r0, #21
   26fb8:	beq	270c0 <__assert_fail@plt+0x1522c>
   26fbc:	cmp	r0, #2
   26fc0:	beq	288b8 <__assert_fail@plt+0x16a24>
   26fc4:	ldr	r7, [sp, #40]	; 0x28
   26fc8:	mov	r0, #3
   26fcc:	add	r2, sp, #56	; 0x38
   26fd0:	str	r0, [fp, #-48]	; 0xffffffd0
   26fd4:	add	r0, sp, #64	; 0x40
   26fd8:	str	r0, [fp, #-44]	; 0xffffffd4
   26fdc:	mov	r0, #1
   26fe0:	str	r0, [sp, #4]
   26fe4:	sub	r0, fp, #48	; 0x30
   26fe8:	str	r7, [sp]
   26fec:	ldr	r4, [sp, #24]
   26ff0:	mov	r1, r4
   26ff4:	bl	29284 <__assert_fail@plt+0x173f0>
   26ff8:	cmp	r0, #0
   26ffc:	bne	287f8 <__assert_fail@plt+0x16964>
   27000:	ldr	r0, [sp, #44]	; 0x2c
   27004:	mov	r1, r4
   27008:	mov	r2, r7
   2700c:	bl	290dc <__assert_fail@plt+0x17248>
   27010:	ldr	r4, [fp, #-48]	; 0xffffffd0
   27014:	mov	r9, #11
   27018:	str	r0, [sp, #12]
   2701c:	cmp	r4, #2
   27020:	cmpne	r4, #4
   27024:	beq	288b8 <__assert_fail@plt+0x16a24>
   27028:	cmp	r5, #3
   2702c:	bne	27040 <__assert_fail@plt+0x151ac>
   27030:	ldr	r0, [fp, #-36]	; 0xffffffdc
   27034:	bl	11c78 <strlen@plt>
   27038:	cmp	r0, #1
   2703c:	bhi	288b4 <__assert_fail@plt+0x16a20>
   27040:	cmp	r4, #3
   27044:	bne	27058 <__assert_fail@plt+0x151c4>
   27048:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2704c:	bl	11c78 <strlen@plt>
   27050:	cmp	r0, #1
   27054:	bhi	288b4 <__assert_fail@plt+0x16a20>
   27058:	ldr	lr, [sp, #44]	; 0x2c
   2705c:	cmp	r5, #3
   27060:	beq	2722c <__assert_fail@plt+0x15398>
   27064:	mov	r7, #0
   27068:	cmp	r5, #0
   2706c:	ldrbeq	r7, [fp, #-36]	; 0xffffffdc
   27070:	cmp	r4, #3
   27074:	beq	2723c <__assert_fail@plt+0x153a8>
   27078:	mov	sl, #0
   2707c:	cmp	r4, #0
   27080:	ldrbeq	sl, [fp, #-44]	; 0xffffffd4
   27084:	cmp	r5, #3
   27088:	cmpne	r5, #0
   2708c:	bne	27250 <__assert_fail@plt+0x153bc>
   27090:	ldr	r0, [r8, #92]	; 0x5c
   27094:	cmp	r0, #2
   27098:	blt	27254 <__assert_fail@plt+0x153c0>
   2709c:	mov	r0, r7
   270a0:	bl	11ce4 <btowc@plt>
   270a4:	ldr	lr, [sp, #44]	; 0x2c
   270a8:	mov	r7, r0
   270ac:	cmp	r4, #3
   270b0:	cmpne	r4, #0
   270b4:	beq	27260 <__assert_fail@plt+0x153cc>
   270b8:	ldr	sl, [fp, #-44]	; 0xffffffd4
   270bc:	b	27290 <__assert_fail@plt+0x153fc>
   270c0:	ldr	r0, [r4, #40]	; 0x28
   270c4:	ldr	lr, [sp, #44]	; 0x2c
   270c8:	sub	r0, r0, r6
   270cc:	str	r0, [r4, #40]	; 0x28
   270d0:	mov	r0, #1
   270d4:	strb	r0, [lr, #4]
   270d8:	cmp	r5, #1
   270dc:	beq	271b8 <__assert_fail@plt+0x15324>
   270e0:	ldr	r6, [sp, #24]
   270e4:	ldr	r4, [sp, #52]	; 0x34
   270e8:	ldr	sl, [sp, #48]	; 0x30
   270ec:	cmp	r5, #2
   270f0:	mov	r9, r7
   270f4:	beq	27120 <__assert_fail@plt+0x1528c>
   270f8:	cmp	r5, #3
   270fc:	bne	271fc <__assert_fail@plt+0x15368>
   27100:	ldr	r7, [fp, #-36]	; 0xffffffdc
   27104:	mov	r0, r7
   27108:	bl	11c78 <strlen@plt>
   2710c:	cmp	r0, #1
   27110:	mov	r3, #1
   27114:	bne	288b4 <__assert_fail@plt+0x16a20>
   27118:	ldrb	r0, [r7]
   2711c:	b	2713c <__assert_fail@plt+0x152a8>
   27120:	ldr	r7, [fp, #-36]	; 0xffffffdc
   27124:	mov	r0, r7
   27128:	bl	11c78 <strlen@plt>
   2712c:	cmp	r0, #1
   27130:	bne	288b4 <__assert_fail@plt+0x16a20>
   27134:	ldrb	r0, [r7]
   27138:	mov	r3, #1
   2713c:	ubfx	r1, r0, #5, #3
   27140:	and	r0, r0, #31
   27144:	ldr	r2, [r4, r1, lsl #2]
   27148:	orr	r0, r2, r3, lsl r0
   2714c:	str	r0, [r4, r1, lsl #2]
   27150:	mov	r1, #0
   27154:	ldr	r0, [sp, #16]
   27158:	ldr	lr, [sp, #44]	; 0x2c
   2715c:	str	r1, [r0]
   27160:	ldrb	r0, [lr, #4]
   27164:	cmp	r0, #21
   27168:	beq	273ec <__assert_fail@plt+0x15558>
   2716c:	cmp	r0, #2
   27170:	beq	28800 <__assert_fail@plt+0x1696c>
   27174:	mov	r0, #3
   27178:	ldr	r5, [sp, #40]	; 0x28
   2717c:	mov	r1, r6
   27180:	mov	r2, lr
   27184:	mov	r3, r9
   27188:	mov	r7, lr
   2718c:	str	r0, [fp, #-40]	; 0xffffffd8
   27190:	sub	r0, fp, #80	; 0x50
   27194:	str	r0, [fp, #-36]	; 0xffffffdc
   27198:	mov	r0, #0
   2719c:	str	r0, [sp, #4]
   271a0:	sub	r0, fp, #40	; 0x28
   271a4:	str	r5, [sp]
   271a8:	bl	29284 <__assert_fail@plt+0x173f0>
   271ac:	cmp	r0, #0
   271b0:	beq	26efc <__assert_fail@plt+0x15068>
   271b4:	b	287f8 <__assert_fail@plt+0x16964>
   271b8:	ldr	sl, [sp, #48]	; 0x30
   271bc:	ldr	r0, [sp, #28]
   271c0:	ldr	r4, [sp, #52]	; 0x34
   271c4:	ldr	r1, [sl, #20]
   271c8:	cmp	r0, r1
   271cc:	beq	27358 <__assert_fail@plt+0x154c4>
   271d0:	ldr	r0, [sl]
   271d4:	ldr	r6, [sp, #24]
   271d8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   271dc:	add	r2, r1, #1
   271e0:	mov	r9, r7
   271e4:	str	r2, [sl, #20]
   271e8:	str	r3, [r0, r1, lsl #2]
   271ec:	ldrb	r0, [lr, #4]
   271f0:	cmp	r0, #21
   271f4:	bne	2716c <__assert_fail@plt+0x152d8>
   271f8:	b	273ec <__assert_fail@plt+0x15558>
   271fc:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   27200:	mov	r3, #1
   27204:	ubfx	r1, r0, #5, #3
   27208:	ldr	lr, [sp, #44]	; 0x2c
   2720c:	and	r0, r0, #31
   27210:	ldr	r2, [r4, r1, lsl #2]
   27214:	orr	r0, r2, r3, lsl r0
   27218:	str	r0, [r4, r1, lsl #2]
   2721c:	ldrb	r0, [lr, #4]
   27220:	cmp	r0, #21
   27224:	bne	2716c <__assert_fail@plt+0x152d8>
   27228:	b	273ec <__assert_fail@plt+0x15558>
   2722c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   27230:	ldrb	r7, [r0]
   27234:	cmp	r4, #3
   27238:	bne	27078 <__assert_fail@plt+0x151e4>
   2723c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   27240:	ldrb	sl, [r0]
   27244:	cmp	r5, #3
   27248:	cmpne	r5, #0
   2724c:	beq	27090 <__assert_fail@plt+0x151fc>
   27250:	ldr	r7, [fp, #-36]	; 0xffffffdc
   27254:	cmp	r4, #3
   27258:	cmpne	r4, #0
   2725c:	bne	270b8 <__assert_fail@plt+0x15224>
   27260:	ldr	r0, [r8, #92]	; 0x5c
   27264:	cmp	r0, #2
   27268:	blt	27290 <__assert_fail@plt+0x153fc>
   2726c:	mov	r0, sl
   27270:	bl	11ce4 <btowc@plt>
   27274:	ldr	lr, [sp, #44]	; 0x2c
   27278:	mov	sl, r0
   2727c:	cmn	r7, #1
   27280:	mov	r9, #3
   27284:	cmnne	sl, #1
   27288:	beq	288b8 <__assert_fail@plt+0x16a24>
   2728c:	b	272a0 <__assert_fail@plt+0x1540c>
   27290:	cmn	r7, #1
   27294:	mov	r9, #3
   27298:	cmnne	sl, #1
   2729c:	beq	288b8 <__assert_fail@plt+0x16a24>
   272a0:	ldr	r0, [sp, #32]
   272a4:	cmp	r0, #0
   272a8:	beq	272b8 <__assert_fail@plt+0x15424>
   272ac:	cmp	r7, sl
   272b0:	mov	r9, #11
   272b4:	bhi	288b8 <__assert_fail@plt+0x16a24>
   272b8:	ldr	r0, [r8, #92]	; 0x5c
   272bc:	cmp	r0, #2
   272c0:	blt	272fc <__assert_fail@plt+0x15468>
   272c4:	ldr	r4, [sp, #48]	; 0x30
   272c8:	ldr	r1, [sp, #20]
   272cc:	mov	r5, #1
   272d0:	ldr	r0, [r4, #32]
   272d4:	cmp	r1, r0
   272d8:	beq	27398 <__assert_fail@plt+0x15504>
   272dc:	ldmib	r4, {r6, r9}
   272e0:	str	r7, [r6, r0, lsl #2]
   272e4:	ldr	r0, [r4, #32]
   272e8:	add	r1, r0, #1
   272ec:	str	r1, [r4, #32]
   272f0:	ldr	r4, [sp, #52]	; 0x34
   272f4:	str	sl, [r9, r0, lsl #2]
   272f8:	b	27304 <__assert_fail@plt+0x15470>
   272fc:	ldr	r4, [sp, #52]	; 0x34
   27300:	mov	r5, #1
   27304:	ldr	r6, [sp, #24]
   27308:	ldr	r9, [sp, #12]
   2730c:	mov	r0, #0
   27310:	cmp	r7, r0
   27314:	cmpls	r0, sl
   27318:	ubfxls	r1, r0, #5, #3
   2731c:	andls	r3, r0, #31
   27320:	add	r0, r0, #1
   27324:	ldrls	r2, [r4, r1, lsl #2]
   27328:	orrls	r2, r2, r5, lsl r3
   2732c:	strls	r2, [r4, r1, lsl #2]
   27330:	cmp	r0, #256	; 0x100
   27334:	bne	27310 <__assert_fail@plt+0x1547c>
   27338:	ldr	r0, [sp, #16]
   2733c:	ldr	sl, [sp, #48]	; 0x30
   27340:	mov	r1, #0
   27344:	str	r1, [r0]
   27348:	ldrb	r0, [lr, #4]
   2734c:	cmp	r0, #21
   27350:	bne	2716c <__assert_fail@plt+0x152d8>
   27354:	b	273ec <__assert_fail@plt+0x15558>
   27358:	ldr	r1, [sp, #28]
   2735c:	mov	r0, #1
   27360:	orr	r1, r0, r1, lsl #1
   27364:	ldr	r0, [sl]
   27368:	str	r1, [sp, #28]
   2736c:	lsl	r1, r1, #2
   27370:	bl	36fe4 <__assert_fail@plt+0x25150>
   27374:	cmp	r0, #0
   27378:	beq	28ca0 <__assert_fail@plt+0x16e0c>
   2737c:	ldr	sl, [sp, #48]	; 0x30
   27380:	ldr	r6, [sp, #24]
   27384:	ldr	lr, [sp, #44]	; 0x2c
   27388:	ldr	r4, [sp, #52]	; 0x34
   2738c:	str	r0, [sl]
   27390:	ldr	r1, [sl, #20]
   27394:	b	271d8 <__assert_fail@plt+0x15344>
   27398:	ldr	r0, [sp, #20]
   2739c:	orr	r0, r5, r0, lsl #1
   273a0:	lsl	r9, r0, #2
   273a4:	str	r0, [sp, #20]
   273a8:	ldr	r0, [r4, #4]
   273ac:	mov	r1, r9
   273b0:	bl	36fe4 <__assert_fail@plt+0x25150>
   273b4:	mov	r6, r0
   273b8:	ldr	r0, [r4, #8]
   273bc:	mov	r1, r9
   273c0:	bl	36fe4 <__assert_fail@plt+0x25150>
   273c4:	mov	r9, r0
   273c8:	cmp	r6, #0
   273cc:	cmpne	r9, #0
   273d0:	beq	28cbc <__assert_fail@plt+0x16e28>
   273d4:	ldr	r4, [sp, #48]	; 0x30
   273d8:	mov	r5, #1
   273dc:	stmib	r4, {r6, r9}
   273e0:	ldr	r0, [r4, #32]
   273e4:	ldr	lr, [sp, #44]	; 0x2c
   273e8:	b	272e0 <__assert_fail@plt+0x1544c>
   273ec:	ldr	r0, [r6, #40]	; 0x28
   273f0:	add	r0, r0, r9
   273f4:	str	r0, [r6, #40]	; 0x28
   273f8:	ldr	r0, [sp, #36]	; 0x24
   273fc:	cmp	r0, #0
   27400:	beq	27440 <__assert_fail@plt+0x155ac>
   27404:	vld1.32	{d16-d17}, [r4]
   27408:	mov	r0, r4
   2740c:	vmvn	q8, q8
   27410:	vst1.32	{d16-d17}, [r0]!
   27414:	vld1.32	{d16-d17}, [r0]
   27418:	vmvn	q8, q8
   2741c:	vst1.32	{d16-d17}, [r0]
   27420:	ldr	r0, [r8, #92]	; 0x5c
   27424:	cmp	r0, #2
   27428:	bge	2744c <__assert_fail@plt+0x155b8>
   2742c:	ldr	r1, [sl, #20]
   27430:	ldr	r6, [sp, #40]	; 0x28
   27434:	cmp	r1, #0
   27438:	bne	274f8 <__assert_fail@plt+0x15664>
   2743c:	b	274d4 <__assert_fail@plt+0x15640>
   27440:	ldr	r0, [r8, #92]	; 0x5c
   27444:	cmp	r0, #2
   27448:	blt	2742c <__assert_fail@plt+0x15598>
   2744c:	ldm	r4, {r1, r2, r3, r7}
   27450:	ldr	r6, [r8, #60]	; 0x3c
   27454:	ldr	r5, [r6]
   27458:	and	r1, r1, r5
   2745c:	str	r1, [r4]
   27460:	ldr	r1, [r6, #4]
   27464:	and	r1, r2, r1
   27468:	str	r1, [r4, #4]
   2746c:	ldr	r1, [r6, #8]
   27470:	and	r1, r3, r1
   27474:	str	r1, [r4, #8]
   27478:	ldr	r1, [r6, #12]
   2747c:	and	r1, r7, r1
   27480:	str	r1, [r4, #12]
   27484:	ldr	r1, [r4, #16]
   27488:	ldr	r2, [r6, #16]
   2748c:	and	r1, r1, r2
   27490:	str	r1, [r4, #16]
   27494:	ldr	r1, [r6, #20]
   27498:	ldr	r2, [r4, #20]
   2749c:	and	r1, r2, r1
   274a0:	str	r1, [r4, #20]
   274a4:	ldr	r1, [r6, #24]
   274a8:	ldr	r2, [r4, #24]
   274ac:	and	r1, r2, r1
   274b0:	str	r1, [r4, #24]
   274b4:	ldr	r1, [r6, #28]
   274b8:	ldr	r2, [r4, #28]
   274bc:	and	r1, r2, r1
   274c0:	str	r1, [r4, #28]
   274c4:	ldr	r1, [sl, #20]
   274c8:	ldr	r6, [sp, #40]	; 0x28
   274cc:	cmp	r1, #0
   274d0:	bne	274f8 <__assert_fail@plt+0x15664>
   274d4:	ldr	r1, [sl, #24]
   274d8:	cmp	r1, #0
   274dc:	bne	274f8 <__assert_fail@plt+0x15664>
   274e0:	ldr	r1, [sl, #28]
   274e4:	cmp	r1, #0
   274e8:	bne	274f8 <__assert_fail@plt+0x15664>
   274ec:	ldr	r1, [sl, #32]
   274f0:	cmp	r1, #0
   274f4:	beq	28730 <__assert_fail@plt+0x1689c>
   274f8:	ldrb	r0, [r8, #88]	; 0x58
   274fc:	orr	r0, r0, #2
   27500:	strb	r0, [r8, #88]	; 0x58
   27504:	ldr	r1, [r8, #64]	; 0x40
   27508:	cmp	r1, #31
   2750c:	beq	2891c <__assert_fail@plt+0x16a88>
   27510:	ldr	r0, [r8, #56]	; 0x38
   27514:	add	r2, r1, #1
   27518:	add	r0, r0, r1, lsl #5
   2751c:	mov	r1, #6
   27520:	vmov.i32	q8, #0	; 0x00000000
   27524:	str	r2, [r8, #64]	; 0x40
   27528:	mov	r2, #0
   2752c:	add	r9, r0, #4
   27530:	str	r2, [r0, #20]
   27534:	str	sl, [r0, #24]
   27538:	str	r1, [r0, #28]
   2753c:	mov	r0, #28
   27540:	mov	r1, r9
   27544:	vst1.32	{d16-d17}, [r1], r0
   27548:	mvn	r0, #0
   2754c:	str	r0, [r1]
   27550:	ldr	r0, [r4]
   27554:	cmp	r0, #0
   27558:	bne	275b0 <__assert_fail@plt+0x1571c>
   2755c:	ldr	r0, [r4, #4]
   27560:	cmp	r0, #0
   27564:	bne	275b0 <__assert_fail@plt+0x1571c>
   27568:	ldr	r0, [r4, #8]
   2756c:	cmp	r0, #0
   27570:	bne	275b0 <__assert_fail@plt+0x1571c>
   27574:	ldr	r0, [r4, #12]
   27578:	cmp	r0, #0
   2757c:	bne	275b0 <__assert_fail@plt+0x1571c>
   27580:	ldr	r0, [r4, #16]
   27584:	cmp	r0, #0
   27588:	bne	275b0 <__assert_fail@plt+0x1571c>
   2758c:	ldr	r0, [r4, #20]
   27590:	cmp	r0, #0
   27594:	bne	275b0 <__assert_fail@plt+0x1571c>
   27598:	ldr	r0, [r4, #24]
   2759c:	cmp	r0, #0
   275a0:	bne	275b0 <__assert_fail@plt+0x1571c>
   275a4:	ldr	r0, [r4, #28]
   275a8:	cmp	r0, #0
   275ac:	beq	289d0 <__assert_fail@plt+0x16b3c>
   275b0:	ldr	r1, [r8, #64]	; 0x40
   275b4:	cmp	r1, #31
   275b8:	beq	28948 <__assert_fail@plt+0x16ab4>
   275bc:	ldr	r0, [r8, #56]	; 0x38
   275c0:	add	r2, r1, #1
   275c4:	add	r0, r0, r1, lsl #5
   275c8:	mov	r1, #3
   275cc:	vmov.i32	q8, #0	; 0x00000000
   275d0:	str	r2, [r8, #64]	; 0x40
   275d4:	mov	r2, #0
   275d8:	add	r5, r0, #4
   275dc:	str	r2, [r0, #20]
   275e0:	str	r4, [r0, #24]
   275e4:	str	r1, [r0, #28]
   275e8:	mov	r0, #28
   275ec:	mov	r1, r5
   275f0:	vst1.32	{d16-d17}, [r1], r0
   275f4:	mvn	r0, #0
   275f8:	str	r0, [r1]
   275fc:	ldr	r1, [r8, #64]	; 0x40
   27600:	cmp	r1, #31
   27604:	beq	28974 <__assert_fail@plt+0x16ae0>
   27608:	ldr	r0, [r8, #56]	; 0x38
   2760c:	add	r2, r1, #1
   27610:	add	r7, r0, r1, lsl #5
   27614:	mov	r0, #0
   27618:	mov	r1, #10
   2761c:	str	r2, [r8, #64]	; 0x40
   27620:	str	r0, [r7, #4]!
   27624:	mvn	r2, #0
   27628:	add	r3, r7, #20
   2762c:	stmib	r7, {r5, r9}
   27630:	str	r0, [r7, #12]
   27634:	str	r0, [r7, #16]
   27638:	stm	r3, {r0, r1, r2}
   2763c:	str	r7, [r5]
   27640:	str	r7, [r9]
   27644:	b	27860 <__assert_fail@plt+0x159cc>
   27648:	mov	r0, #5
   2764c:	mov	r4, r8
   27650:	str	r0, [lr]
   27654:	ldr	r1, [r4, #64]!	; 0x40
   27658:	cmp	r1, #31
   2765c:	beq	28a4c <__assert_fail@plt+0x16bb8>
   27660:	ldr	r0, [r8, #56]	; 0x38
   27664:	add	r2, r1, #1
   27668:	add	r5, r0, r1, lsl #5
   2766c:	mov	r0, #0
   27670:	str	r2, [r4]
   27674:	str	r0, [r5, #4]!
   27678:	str	r0, [r5, #4]
   2767c:	str	r0, [r5, #8]
   27680:	ldm	lr, {r1, r2}
   27684:	str	r0, [r5, #12]
   27688:	str	r0, [r5, #16]
   2768c:	mvn	r0, #0
   27690:	str	r0, [r5, #28]
   27694:	bic	r0, r2, #786432	; 0xc0000
   27698:	str	r1, [r5, #20]
   2769c:	str	r0, [r5, #24]
   276a0:	mov	r0, #10
   276a4:	str	r0, [lr]
   276a8:	mov	r9, r6
   276ac:	ldr	r1, [r4]
   276b0:	cmp	r1, #31
   276b4:	beq	289e4 <__assert_fail@plt+0x16b50>
   276b8:	ldr	r0, [r8, #56]	; 0x38
   276bc:	add	r2, r1, #1
   276c0:	add	r6, r0, r1, lsl #5
   276c4:	mov	r0, #0
   276c8:	str	r2, [r4]
   276cc:	str	r0, [r6, #4]!
   276d0:	str	r0, [r6, #4]
   276d4:	str	r0, [r6, #8]
   276d8:	ldm	lr, {r1, r2}
   276dc:	str	r0, [r6, #12]
   276e0:	str	r0, [r6, #16]
   276e4:	mvn	r0, #0
   276e8:	str	r0, [r6, #28]
   276ec:	bic	r0, r2, #786432	; 0xc0000
   276f0:	str	r1, [r6, #20]
   276f4:	str	r0, [r6, #24]
   276f8:	ldr	r1, [r4]
   276fc:	cmp	r1, #31
   27700:	beq	28b7c <__assert_fail@plt+0x16ce8>
   27704:	ldr	r0, [r8, #56]	; 0x38
   27708:	add	r2, r1, #1
   2770c:	cmp	r5, #0
   27710:	str	r2, [r4]
   27714:	add	r4, r0, r1, lsl #5
   27718:	mov	r0, #0
   2771c:	mov	r1, #10
   27720:	mvn	r2, #0
   27724:	str	r0, [r4, #4]!
   27728:	add	r3, r4, #20
   2772c:	stmib	r4, {r5, r6}
   27730:	str	r0, [r4, #12]
   27734:	str	r0, [r4, #16]
   27738:	stm	r3, {r0, r1, r2}
   2773c:	strne	r4, [r5]
   27740:	cmp	r6, #0
   27744:	strne	r4, [r6]
   27748:	cmpne	r5, #0
   2774c:	bne	277b8 <__assert_fail@plt+0x15924>
   27750:	mov	r0, #12
   27754:	ldr	r1, [sp, #16]
   27758:	str	r0, [r1]
   2775c:	mov	r0, sl
   27760:	sub	sp, fp, #28
   27764:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27768:	ldr	r1, [r8, #64]	; 0x40
   2776c:	mov	r9, r6
   27770:	cmp	r1, #31
   27774:	beq	28a80 <__assert_fail@plt+0x16bec>
   27778:	ldr	r0, [r8, #56]	; 0x38
   2777c:	add	r2, r1, #1
   27780:	add	r4, r0, r1, lsl #5
   27784:	mov	r0, #0
   27788:	str	r2, [r8, #64]	; 0x40
   2778c:	str	r0, [r4, #4]!
   27790:	str	r0, [r4, #4]
   27794:	str	r0, [r4, #8]
   27798:	ldm	lr, {r1, r2}
   2779c:	str	r0, [r4, #12]
   277a0:	str	r0, [r4, #16]
   277a4:	mvn	r0, #0
   277a8:	str	r0, [r4, #28]
   277ac:	bic	r0, r2, #786432	; 0xc0000
   277b0:	str	r1, [r4, #20]
   277b4:	str	r0, [r4, #24]
   277b8:	mov	r0, lr
   277bc:	mov	r1, r7
   277c0:	mov	r2, r9
   277c4:	bl	25a88 <__assert_fail@plt+0x13bf4>
   277c8:	ldr	r1, [r7, #40]	; 0x28
   277cc:	mov	sl, r4
   277d0:	add	r0, r1, r0
   277d4:	str	r0, [r7, #40]	; 0x28
   277d8:	mov	r0, sl
   277dc:	sub	sp, fp, #28
   277e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   277e4:	ldrb	r0, [r6, #4]
   277e8:	cmp	r0, #9
   277ec:	bne	28ba8 <__assert_fail@plt+0x16d14>
   277f0:	mov	lr, r6
   277f4:	cmp	r4, #8
   277f8:	ldrls	r0, [r8, #84]	; 0x54
   277fc:	movls	r1, #1
   27800:	orrls	r0, r0, r1, lsl r4
   27804:	strls	r0, [r8, #84]	; 0x54
   27808:	ldr	r1, [r8, #64]	; 0x40
   2780c:	cmp	r1, #31
   27810:	beq	289a0 <__assert_fail@plt+0x16b0c>
   27814:	ldr	r0, [r8, #56]	; 0x38
   27818:	mov	r6, sl
   2781c:	add	r0, r0, r1, lsl #5
   27820:	add	r2, r1, #1
   27824:	mov	r1, #0
   27828:	mvn	r3, #0
   2782c:	cmp	r9, #0
   27830:	mov	r7, r0
   27834:	str	r2, [r8, #64]	; 0x40
   27838:	mov	r2, #17
   2783c:	str	r1, [r7, #4]!
   27840:	add	ip, r7, #20
   27844:	str	r9, [r7, #4]
   27848:	str	r1, [r7, #8]
   2784c:	str	r1, [r7, #12]
   27850:	str	r1, [r7, #16]
   27854:	stm	ip, {r1, r2, r3}
   27858:	strne	r7, [r9]
   2785c:	str	r4, [r0, #24]
   27860:	mov	r4, r6
   27864:	ldr	r6, [sp, #24]
   27868:	mov	r0, lr
   2786c:	mov	r2, r4
   27870:	mov	r1, r6
   27874:	bl	25a88 <__assert_fail@plt+0x13bf4>
   27878:	ldr	r1, [r6, #40]	; 0x28
   2787c:	ldr	ip, [sp, #44]	; 0x2c
   27880:	add	r0, r1, r0
   27884:	str	r0, [r6, #40]	; 0x28
   27888:	add	r0, r8, #56	; 0x38
   2788c:	add	r8, r8, #64	; 0x40
   27890:	str	r0, [sp, #20]
   27894:	and	r0, r4, #2097152	; 0x200000
   27898:	str	r0, [sp, #12]
   2789c:	str	r4, [sp, #40]	; 0x28
   278a0:	and	r0, r4, #16777216	; 0x1000000
   278a4:	mov	r4, #0
   278a8:	str	r0, [sp, #28]
   278ac:	b	2858c <__assert_fail@plt+0x166f8>
   278b0:	movw	r2, #2048	; 0x800
   278b4:	mov	r1, #1
   278b8:	movt	r2, #140	; 0x8c
   278bc:	tst	r2, r1, lsl r0
   278c0:	beq	28654 <__assert_fail@plt+0x167c0>
   278c4:	cmp	r0, #23
   278c8:	str	sl, [sp, #36]	; 0x24
   278cc:	bne	278e0 <__assert_fail@plt+0x15a4c>
   278d0:	ldm	ip, {r5, sl}
   278d4:	ldr	r7, [r6, #40]	; 0x28
   278d8:	mvn	r2, #0
   278dc:	b	27914 <__assert_fail@plt+0x15a80>
   278e0:	cmp	r0, #19
   278e4:	sub	r0, r0, #18
   278e8:	mvn	r5, #0
   278ec:	clz	r0, r0
   278f0:	movweq	r5, #1
   278f4:	lsr	r9, r0, #5
   278f8:	b	27b28 <__assert_fail@plt+0x15c94>
   278fc:	add	r0, r9, r9, lsl #2
   27900:	add	r0, r1, r0, lsl #1
   27904:	movw	r1, #32816	; 0x8030
   27908:	sub	r2, r0, #48	; 0x30
   2790c:	cmp	r0, r1
   27910:	movwgt	r2, #32768	; 0x8000
   27914:	mov	r9, r2
   27918:	ldr	r2, [sp, #40]	; 0x28
   2791c:	mov	r0, ip
   27920:	mov	r1, r6
   27924:	bl	25a88 <__assert_fail@plt+0x13bf4>
   27928:	ldr	r1, [r6, #40]	; 0x28
   2792c:	ldr	ip, [sp, #44]	; 0x2c
   27930:	add	r0, r1, r0
   27934:	str	r0, [r6, #40]	; 0x28
   27938:	ldrb	r0, [ip, #4]
   2793c:	ldrb	r1, [ip]
   27940:	cmp	r0, #24
   27944:	beq	2798c <__assert_fail@plt+0x15af8>
   27948:	cmp	r0, #2
   2794c:	beq	279fc <__assert_fail@plt+0x15b68>
   27950:	cmp	r1, #44	; 0x2c
   27954:	beq	2798c <__assert_fail@plt+0x15af8>
   27958:	mvn	r2, #1
   2795c:	cmp	r1, #48	; 0x30
   27960:	bcc	27914 <__assert_fail@plt+0x15a80>
   27964:	cmp	r0, #1
   27968:	bne	27914 <__assert_fail@plt+0x15a80>
   2796c:	cmn	r9, #2
   27970:	beq	27914 <__assert_fail@plt+0x15a80>
   27974:	cmp	r1, #57	; 0x39
   27978:	bhi	27914 <__assert_fail@plt+0x15a80>
   2797c:	cmn	r9, #1
   27980:	bne	278fc <__assert_fail@plt+0x15a68>
   27984:	sub	r2, r1, #48	; 0x30
   27988:	b	27914 <__assert_fail@plt+0x15a80>
   2798c:	cmn	r9, #1
   27990:	bne	279dc <__assert_fail@plt+0x15b48>
   27994:	cmp	r1, #44	; 0x2c
   27998:	moveq	r9, #0
   2799c:	cmpeq	r0, #1
   279a0:	beq	27a34 <__assert_fail@plt+0x15ba0>
   279a4:	ldr	r0, [sp, #16]
   279a8:	mov	r1, #10
   279ac:	str	r1, [r0]
   279b0:	ldr	sl, [sp, #36]	; 0x24
   279b4:	mov	r7, #0
   279b8:	clz	r0, r7
   279bc:	cmp	r7, #0
   279c0:	lsr	r0, r0, #5
   279c4:	bne	28580 <__assert_fail@plt+0x166ec>
   279c8:	ldr	r1, [sp, #16]
   279cc:	ldr	r1, [r1]
   279d0:	cmp	r1, #0
   279d4:	beq	28580 <__assert_fail@plt+0x166ec>
   279d8:	b	2866c <__assert_fail@plt+0x167d8>
   279dc:	cmn	r9, #2
   279e0:	mov	r2, r9
   279e4:	beq	279fc <__assert_fail@plt+0x15b68>
   279e8:	cmp	r0, #24
   279ec:	beq	27a40 <__assert_fail@plt+0x15bac>
   279f0:	cmp	r0, #1
   279f4:	cmpeq	r1, #44	; 0x2c
   279f8:	beq	27a34 <__assert_fail@plt+0x15ba0>
   279fc:	ldr	r1, [sp, #12]
   27a00:	cmp	r1, #0
   27a04:	beq	280dc <__assert_fail@plt+0x16248>
   27a08:	mov	r0, #1
   27a0c:	str	r7, [r6, #40]	; 0x28
   27a10:	bfi	sl, r0, #0, #8
   27a14:	stm	ip, {r5, sl}
   27a18:	ldr	sl, [sp, #36]	; 0x24
   27a1c:	mov	r7, sl
   27a20:	clz	r0, r7
   27a24:	cmp	r7, #0
   27a28:	lsr	r0, r0, #5
   27a2c:	beq	279c8 <__assert_fail@plt+0x15b34>
   27a30:	b	28580 <__assert_fail@plt+0x166ec>
   27a34:	mvn	r2, #0
   27a38:	str	sl, [sp, #52]	; 0x34
   27a3c:	b	27a6c <__assert_fail@plt+0x15bd8>
   27a40:	ldr	sl, [sp, #36]	; 0x24
   27a44:	mov	r5, r9
   27a48:	cmp	r0, #24
   27a4c:	beq	27b14 <__assert_fail@plt+0x15c80>
   27a50:	b	28124 <__assert_fail@plt+0x16290>
   27a54:	add	r0, sl, sl, lsl #2
   27a58:	add	r0, r1, r0, lsl #1
   27a5c:	movw	r1, #32816	; 0x8030
   27a60:	sub	r2, r0, #48	; 0x30
   27a64:	cmp	r0, r1
   27a68:	movwgt	r2, #32768	; 0x8000
   27a6c:	mov	sl, r2
   27a70:	ldr	r2, [sp, #40]	; 0x28
   27a74:	mov	r0, ip
   27a78:	mov	r1, r6
   27a7c:	bl	25a88 <__assert_fail@plt+0x13bf4>
   27a80:	ldr	r1, [r6, #40]	; 0x28
   27a84:	ldr	ip, [sp, #44]	; 0x2c
   27a88:	add	r0, r1, r0
   27a8c:	str	r0, [r6, #40]	; 0x28
   27a90:	ldrb	r0, [ip, #4]
   27a94:	cmp	r0, #24
   27a98:	beq	27ae4 <__assert_fail@plt+0x15c50>
   27a9c:	cmp	r0, #2
   27aa0:	beq	280cc <__assert_fail@plt+0x16238>
   27aa4:	ldrb	r1, [ip]
   27aa8:	cmp	r1, #44	; 0x2c
   27aac:	beq	27ae4 <__assert_fail@plt+0x15c50>
   27ab0:	mvn	r2, #1
   27ab4:	cmp	r1, #48	; 0x30
   27ab8:	bcc	27a6c <__assert_fail@plt+0x15bd8>
   27abc:	cmp	r0, #1
   27ac0:	bne	27a6c <__assert_fail@plt+0x15bd8>
   27ac4:	cmn	sl, #2
   27ac8:	beq	27a6c <__assert_fail@plt+0x15bd8>
   27acc:	cmp	r1, #57	; 0x39
   27ad0:	bhi	27a6c <__assert_fail@plt+0x15bd8>
   27ad4:	cmn	sl, #1
   27ad8:	bne	27a54 <__assert_fail@plt+0x15bc0>
   27adc:	sub	r2, r1, #48	; 0x30
   27ae0:	b	27a6c <__assert_fail@plt+0x15bd8>
   27ae4:	cmn	sl, #2
   27ae8:	beq	280cc <__assert_fail@plt+0x16238>
   27aec:	cmn	sl, #1
   27af0:	mov	r5, sl
   27af4:	beq	27b08 <__assert_fail@plt+0x15c74>
   27af8:	ldr	sl, [sp, #36]	; 0x24
   27afc:	cmp	r9, r5
   27b00:	ble	27b0c <__assert_fail@plt+0x15c78>
   27b04:	b	28124 <__assert_fail@plt+0x16290>
   27b08:	ldr	sl, [sp, #36]	; 0x24
   27b0c:	cmp	r0, #24
   27b10:	bne	28124 <__assert_fail@plt+0x16290>
   27b14:	cmn	r5, #1
   27b18:	mov	r0, r5
   27b1c:	moveq	r0, r9
   27b20:	cmp	r0, #32768	; 0x8000
   27b24:	bge	28130 <__assert_fail@plt+0x1629c>
   27b28:	ldr	r2, [sp, #40]	; 0x28
   27b2c:	mov	r0, ip
   27b30:	mov	r1, r6
   27b34:	bl	25a88 <__assert_fail@plt+0x13bf4>
   27b38:	ldr	r1, [r6, #40]	; 0x28
   27b3c:	mov	r7, #0
   27b40:	cmp	sl, #0
   27b44:	add	r0, r1, r0
   27b48:	str	r0, [r6, #40]	; 0x28
   27b4c:	beq	27fb8 <__assert_fail@plt+0x16124>
   27b50:	ldr	lr, [sp, #20]
   27b54:	orrs	r0, r5, r9
   27b58:	beq	27fd0 <__assert_fail@plt+0x1613c>
   27b5c:	mov	r0, #0
   27b60:	cmp	r9, #1
   27b64:	mov	r7, sl
   27b68:	str	r0, [sp, #32]
   27b6c:	ldr	ip, [sp, #44]	; 0x2c
   27b70:	str	r5, [sp, #48]	; 0x30
   27b74:	bge	28078 <__assert_fail@plt+0x161e4>
   27b78:	ldrb	r0, [r7, #24]
   27b7c:	cmp	r0, #17
   27b80:	bne	27bf0 <__assert_fail@plt+0x15d5c>
   27b84:	ldr	r0, [r7, #20]
   27b88:	mov	r2, r7
   27b8c:	mov	r1, r2
   27b90:	ldr	r2, [r2, #4]
   27b94:	cmp	r2, #0
   27b98:	bne	27b8c <__assert_fail@plt+0x15cf8>
   27b9c:	ldr	r2, [r1, #8]
   27ba0:	cmp	r2, #0
   27ba4:	bne	27b8c <__assert_fail@plt+0x15cf8>
   27ba8:	ldr	r2, [r1, #24]
   27bac:	uxtb	r3, r2
   27bb0:	cmp	r3, #17
   27bb4:	ldreq	r3, [r1, #20]
   27bb8:	cmpeq	r3, r0
   27bbc:	orreq	r2, r2, #524288	; 0x80000
   27bc0:	streq	r2, [r1, #24]
   27bc4:	ldr	r3, [r1]
   27bc8:	cmp	r3, #0
   27bcc:	beq	27bf0 <__assert_fail@plt+0x15d5c>
   27bd0:	ldr	r2, [r3, #8]
   27bd4:	cmp	r2, r1
   27bd8:	mov	r1, r3
   27bdc:	beq	27ba8 <__assert_fail@plt+0x15d14>
   27be0:	cmp	r2, #0
   27be4:	mov	r1, r3
   27be8:	beq	27ba8 <__assert_fail@plt+0x15d14>
   27bec:	b	27b8c <__assert_fail@plt+0x15cf8>
   27bf0:	ldr	r1, [r8]
   27bf4:	cmn	r5, #1
   27bf8:	mov	r6, #10
   27bfc:	movweq	r6, #11
   27c00:	cmp	r1, #31
   27c04:	beq	28098 <__assert_fail@plt+0x16204>
   27c08:	ldr	r0, [lr]
   27c0c:	add	r2, r1, #1
   27c10:	add	sl, r0, r1, lsl #5
   27c14:	mvn	r0, #0
   27c18:	str	r2, [r8]
   27c1c:	str	r4, [sl, #4]!
   27c20:	str	r7, [sl, #4]
   27c24:	str	r4, [sl, #8]
   27c28:	str	r4, [sl, #12]
   27c2c:	str	r4, [sl, #16]
   27c30:	str	r4, [sl, #20]
   27c34:	str	r6, [sl, #24]
   27c38:	str	r0, [sl, #28]
   27c3c:	add	r0, r9, #2
   27c40:	str	sl, [r7]
   27c44:	cmp	r0, r5
   27c48:	bgt	27f24 <__assert_fail@plt+0x16090>
   27c4c:	mov	r6, sl
   27c50:	ldr	r1, [r8]
   27c54:	str	r0, [sp, #52]	; 0x34
   27c58:	cmp	r1, #31
   27c5c:	beq	27e68 <__assert_fail@plt+0x15fd4>
   27c60:	ldr	r0, [lr]
   27c64:	add	r3, r1, #1
   27c68:	add	r9, r0, r1, lsl #5
   27c6c:	add	r2, r7, #20
   27c70:	sub	r5, fp, #80	; 0x50
   27c74:	str	r3, [r8]
   27c78:	str	r4, [r9, #4]!
   27c7c:	str	r4, [r9, #4]
   27c80:	str	r4, [r9, #8]
   27c84:	ldm	r2, {r0, r1}
   27c88:	mvn	r2, #0
   27c8c:	str	r4, [r9, #12]
   27c90:	str	r4, [r9, #16]
   27c94:	str	r2, [r9, #28]
   27c98:	str	r0, [r9, #20]
   27c9c:	bic	r0, r1, #786432	; 0xc0000
   27ca0:	str	r0, [r9, #24]
   27ca4:	mov	r0, r9
   27ca8:	str	r9, [fp, #-80]	; 0xffffffb0
   27cac:	b	27cf0 <__assert_fail@plt+0x15e5c>
   27cb0:	add	r3, r1, #1
   27cb4:	add	r0, r0, r1, lsl #5
   27cb8:	add	r2, r7, #20
   27cbc:	str	r3, [r8]
   27cc0:	str	r4, [r0, #4]!
   27cc4:	mvn	r3, #0
   27cc8:	str	r4, [r0, #4]
   27ccc:	str	r4, [r0, #8]
   27cd0:	ldm	r2, {r1, r2}
   27cd4:	str	r4, [r0, #12]
   27cd8:	str	r4, [r0, #16]
   27cdc:	str	r3, [r0, #28]
   27ce0:	str	r1, [r0, #20]
   27ce4:	bic	r1, r2, #786432	; 0xc0000
   27ce8:	str	r1, [r0, #24]
   27cec:	str	r0, [r5]
   27cf0:	str	sl, [r0]
   27cf4:	ldr	r0, [r5]
   27cf8:	ldr	r1, [r0, #24]
   27cfc:	orr	r1, r1, #262144	; 0x40000
   27d00:	str	r1, [r0, #24]
   27d04:	ldr	r0, [r7, #4]
   27d08:	ldr	sl, [r5]
   27d0c:	cmp	r0, #0
   27d10:	beq	27d30 <__assert_fail@plt+0x15e9c>
   27d14:	add	r5, sl, #4
   27d18:	mov	r7, r0
   27d1c:	ldr	r1, [r8]
   27d20:	cmp	r1, #31
   27d24:	beq	27d70 <__assert_fail@plt+0x15edc>
   27d28:	ldr	r0, [lr]
   27d2c:	b	27cb0 <__assert_fail@plt+0x15e1c>
   27d30:	mov	r1, #0
   27d34:	mov	r0, r7
   27d38:	ldr	r7, [r7, #8]
   27d3c:	cmp	r7, r1
   27d40:	cmpne	r7, #0
   27d44:	bne	27d60 <__assert_fail@plt+0x15ecc>
   27d48:	ldr	r7, [r0]
   27d4c:	ldr	sl, [sl]
   27d50:	mov	r1, r0
   27d54:	cmp	r7, #0
   27d58:	bne	27d34 <__assert_fail@plt+0x15ea0>
   27d5c:	b	27da0 <__assert_fail@plt+0x15f0c>
   27d60:	add	r5, sl, #8
   27d64:	ldr	r1, [r8]
   27d68:	cmp	r1, #31
   27d6c:	bne	27d28 <__assert_fail@plt+0x15e94>
   27d70:	mov	r0, #996	; 0x3e4
   27d74:	bl	36fb4 <__assert_fail@plt+0x25120>
   27d78:	cmp	r0, #0
   27d7c:	beq	27ed4 <__assert_fail@plt+0x16040>
   27d80:	ldr	lr, [sp, #20]
   27d84:	ldr	ip, [sp, #44]	; 0x2c
   27d88:	ldr	r1, [lr]
   27d8c:	str	r1, [r0]
   27d90:	mov	r1, #0
   27d94:	str	r0, [lr]
   27d98:	str	r1, [r8]
   27d9c:	b	27cb0 <__assert_fail@plt+0x15e1c>
   27da0:	mov	r7, r9
   27da4:	ldr	r1, [r8]
   27da8:	cmp	r1, #31
   27dac:	beq	27ef0 <__assert_fail@plt+0x1605c>
   27db0:	ldr	r0, [lr]
   27db4:	add	r2, r1, #1
   27db8:	add	r5, r0, r1, lsl #5
   27dbc:	mov	r0, #16
   27dc0:	cmp	r7, #0
   27dc4:	str	r2, [r8]
   27dc8:	str	r4, [r5, #4]!
   27dcc:	stmib	r5, {r6, r7}
   27dd0:	str	r4, [r5, #12]
   27dd4:	str	r4, [r5, #16]
   27dd8:	str	r4, [r5, #20]
   27ddc:	str	r0, [r5, #24]
   27de0:	mvn	r0, #0
   27de4:	str	r0, [r5, #28]
   27de8:	str	r5, [r6]
   27dec:	beq	28558 <__assert_fail@plt+0x166c4>
   27df0:	str	r5, [r7]
   27df4:	ldr	r1, [r8]
   27df8:	cmp	r1, #31
   27dfc:	beq	27e98 <__assert_fail@plt+0x16004>
   27e00:	ldr	r0, [lr]
   27e04:	add	r2, r1, #1
   27e08:	add	r6, r0, r1, lsl #5
   27e0c:	mov	r0, #10
   27e10:	ldr	r1, [sp, #52]	; 0x34
   27e14:	str	r2, [r8]
   27e18:	str	r4, [r6, #4]!
   27e1c:	str	r5, [r6, #4]
   27e20:	str	r4, [r6, #8]
   27e24:	str	r4, [r6, #12]
   27e28:	str	r4, [r6, #16]
   27e2c:	str	r4, [r6, #20]
   27e30:	str	r0, [r6, #24]
   27e34:	mvn	r0, #0
   27e38:	str	r0, [r6, #28]
   27e3c:	ldr	r0, [sp, #48]	; 0x30
   27e40:	str	r6, [r5]
   27e44:	cmp	r1, r0
   27e48:	bge	27f20 <__assert_fail@plt+0x1608c>
   27e4c:	ldr	sl, [r7]
   27e50:	mov	r0, r1
   27e54:	add	r0, r1, #1
   27e58:	ldr	r1, [r8]
   27e5c:	str	r0, [sp, #52]	; 0x34
   27e60:	cmp	r1, #31
   27e64:	bne	27c60 <__assert_fail@plt+0x15dcc>
   27e68:	mov	r0, #996	; 0x3e4
   27e6c:	bl	36fb4 <__assert_fail@plt+0x25120>
   27e70:	cmp	r0, #0
   27e74:	beq	27ec8 <__assert_fail@plt+0x16034>
   27e78:	ldr	lr, [sp, #20]
   27e7c:	ldr	ip, [sp, #44]	; 0x2c
   27e80:	ldr	r1, [lr]
   27e84:	str	r1, [r0]
   27e88:	mov	r1, #0
   27e8c:	str	r0, [lr]
   27e90:	str	r1, [r8]
   27e94:	b	27c64 <__assert_fail@plt+0x15dd0>
   27e98:	mov	r0, #996	; 0x3e4
   27e9c:	bl	36fb4 <__assert_fail@plt+0x25120>
   27ea0:	ldr	lr, [sp, #20]
   27ea4:	ldr	ip, [sp, #44]	; 0x2c
   27ea8:	cmp	r0, #0
   27eac:	beq	28558 <__assert_fail@plt+0x166c4>
   27eb0:	ldr	r1, [lr]
   27eb4:	str	r1, [r0]
   27eb8:	mov	r1, #0
   27ebc:	str	r0, [lr]
   27ec0:	str	r1, [r8]
   27ec4:	b	27e04 <__assert_fail@plt+0x15f70>
   27ec8:	mov	r7, #0
   27ecc:	str	r7, [fp, #-80]	; 0xffffffb0
   27ed0:	b	27edc <__assert_fail@plt+0x16048>
   27ed4:	mov	r7, #0
   27ed8:	str	r7, [r5]
   27edc:	ldr	ip, [sp, #44]	; 0x2c
   27ee0:	ldr	lr, [sp, #20]
   27ee4:	ldr	r1, [r8]
   27ee8:	cmp	r1, #31
   27eec:	bne	27db0 <__assert_fail@plt+0x15f1c>
   27ef0:	mov	r0, #996	; 0x3e4
   27ef4:	bl	36fb4 <__assert_fail@plt+0x25120>
   27ef8:	ldr	lr, [sp, #20]
   27efc:	ldr	ip, [sp, #44]	; 0x2c
   27f00:	cmp	r0, #0
   27f04:	beq	28558 <__assert_fail@plt+0x166c4>
   27f08:	ldr	r1, [lr]
   27f0c:	str	r1, [r0]
   27f10:	mov	r1, #0
   27f14:	str	r0, [lr]
   27f18:	str	r1, [r8]
   27f1c:	b	27db4 <__assert_fail@plt+0x15f20>
   27f20:	mov	sl, r6
   27f24:	ldr	r5, [sp, #32]
   27f28:	ldr	r6, [sp, #24]
   27f2c:	cmp	r5, #0
   27f30:	beq	27fa0 <__assert_fail@plt+0x1610c>
   27f34:	ldr	r1, [r8]
   27f38:	cmp	r1, #31
   27f3c:	beq	280f4 <__assert_fail@plt+0x16260>
   27f40:	ldr	r0, [lr]
   27f44:	add	r2, r1, #1
   27f48:	add	r7, r0, r1, lsl #5
   27f4c:	mov	r0, #0
   27f50:	mov	r1, #16
   27f54:	str	r2, [r8]
   27f58:	str	r0, [r7, #4]!
   27f5c:	stmib	r7, {r5, sl}
   27f60:	str	r0, [r7, #12]
   27f64:	str	r0, [r7, #16]
   27f68:	str	r0, [r7, #20]
   27f6c:	str	r1, [r7, #24]
   27f70:	mvn	r1, #0
   27f74:	str	r1, [r7, #28]
   27f78:	str	r7, [r5]
   27f7c:	str	r7, [sl]
   27f80:	ldr	r1, [sp, #28]
   27f84:	cmp	r1, #0
   27f88:	beq	2858c <__assert_fail@plt+0x166f8>
   27f8c:	ldrb	r1, [ip, #4]
   27f90:	cmp	r1, #23
   27f94:	cmpne	r1, #11
   27f98:	bne	2858c <__assert_fail@plt+0x166f8>
   27f9c:	b	285a0 <__assert_fail@plt+0x1670c>
   27fa0:	mov	r0, #0
   27fa4:	mov	r7, sl
   27fa8:	ldr	r1, [sp, #28]
   27fac:	cmp	r1, #0
   27fb0:	beq	2858c <__assert_fail@plt+0x166f8>
   27fb4:	b	27f8c <__assert_fail@plt+0x160f8>
   27fb8:	ldr	ip, [sp, #44]	; 0x2c
   27fbc:	clz	r0, r7
   27fc0:	cmp	r7, #0
   27fc4:	lsr	r0, r0, #5
   27fc8:	beq	279c8 <__assert_fail@plt+0x15b34>
   27fcc:	b	28580 <__assert_fail@plt+0x166ec>
   27fd0:	ldr	ip, [sp, #44]	; 0x2c
   27fd4:	mov	r0, sl
   27fd8:	mov	r5, r0
   27fdc:	ldr	r0, [r0, #4]
   27fe0:	cmp	r0, #0
   27fe4:	bne	27fd8 <__assert_fail@plt+0x16144>
   27fe8:	ldr	r0, [r5, #8]
   27fec:	cmp	r0, #0
   27ff0:	bne	27fd8 <__assert_fail@plt+0x16144>
   27ff4:	ldr	r0, [r5, #24]
   27ff8:	movw	r1, #255	; 0xff
   27ffc:	movt	r1, #4
   28000:	and	r0, r0, r1
   28004:	cmp	r0, #3
   28008:	beq	28040 <__assert_fail@plt+0x161ac>
   2800c:	cmp	r0, #6
   28010:	bne	2804c <__assert_fail@plt+0x161b8>
   28014:	ldr	r9, [r5, #20]
   28018:	ldr	r0, [r9]
   2801c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28020:	ldr	r0, [r9, #4]
   28024:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28028:	ldr	r0, [r9, #8]
   2802c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28030:	ldr	r0, [r9, #12]
   28034:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28038:	mov	r0, r9
   2803c:	b	28044 <__assert_fail@plt+0x161b0>
   28040:	ldr	r0, [r5, #20]
   28044:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28048:	ldr	ip, [sp, #44]	; 0x2c
   2804c:	ldr	r1, [r5]
   28050:	cmp	r1, #0
   28054:	beq	28570 <__assert_fail@plt+0x166dc>
   28058:	ldr	r0, [r1, #8]
   2805c:	cmp	r0, r5
   28060:	mov	r5, r1
   28064:	beq	27ff4 <__assert_fail@plt+0x16160>
   28068:	cmp	r0, #0
   2806c:	mov	r5, r1
   28070:	beq	27ff4 <__assert_fail@plt+0x16160>
   28074:	b	27fd8 <__assert_fail@plt+0x16144>
   28078:	mov	r5, sl
   2807c:	str	r9, [sp, #8]
   28080:	beq	28390 <__assert_fail@plt+0x164fc>
   28084:	ldr	r9, [sp, #36]	; 0x24
   28088:	mov	r0, #2
   2808c:	ldr	r5, [r9]
   28090:	mov	sl, r9
   28094:	b	281d0 <__assert_fail@plt+0x1633c>
   28098:	mov	r0, #996	; 0x3e4
   2809c:	bl	36fb4 <__assert_fail@plt+0x25120>
   280a0:	ldr	lr, [sp, #20]
   280a4:	ldr	ip, [sp, #44]	; 0x2c
   280a8:	cmp	r0, #0
   280ac:	beq	28558 <__assert_fail@plt+0x166c4>
   280b0:	ldr	r1, [lr]
   280b4:	ldr	r5, [sp, #48]	; 0x30
   280b8:	str	r1, [r0]
   280bc:	mov	r1, #0
   280c0:	str	r0, [lr]
   280c4:	str	r1, [r8]
   280c8:	b	27c0c <__assert_fail@plt+0x15d78>
   280cc:	ldr	sl, [sp, #52]	; 0x34
   280d0:	ldr	r1, [sp, #12]
   280d4:	cmp	r1, #0
   280d8:	bne	27a08 <__assert_fail@plt+0x15b74>
   280dc:	ldr	r1, [sp, #16]
   280e0:	cmp	r0, #2
   280e4:	mov	r0, #10
   280e8:	movweq	r0, #9
   280ec:	str	r0, [r1]
   280f0:	b	279b0 <__assert_fail@plt+0x15b1c>
   280f4:	mov	r0, #996	; 0x3e4
   280f8:	bl	36fb4 <__assert_fail@plt+0x25120>
   280fc:	cmp	r0, #0
   28100:	beq	28140 <__assert_fail@plt+0x162ac>
   28104:	ldr	r2, [sp, #20]
   28108:	ldr	ip, [sp, #44]	; 0x2c
   2810c:	ldr	r1, [r2]
   28110:	str	r1, [r0]
   28114:	mov	r1, #0
   28118:	str	r0, [r2]
   2811c:	str	r1, [r8]
   28120:	b	27f44 <__assert_fail@plt+0x160b0>
   28124:	ldr	r0, [sp, #16]
   28128:	mov	r1, #10
   2812c:	b	28138 <__assert_fail@plt+0x162a4>
   28130:	ldr	r0, [sp, #16]
   28134:	mov	r1, #15
   28138:	str	r1, [r0]
   2813c:	b	279b4 <__assert_fail@plt+0x15b20>
   28140:	ldr	ip, [sp, #44]	; 0x2c
   28144:	b	279b0 <__assert_fail@plt+0x15b1c>
   28148:	mov	r0, #996	; 0x3e4
   2814c:	bl	36fb4 <__assert_fail@plt+0x25120>
   28150:	cmp	r0, #0
   28154:	beq	28178 <__assert_fail@plt+0x162e4>
   28158:	ldr	lr, [sp, #20]
   2815c:	ldr	ip, [sp, #44]	; 0x2c
   28160:	ldr	r1, [lr]
   28164:	str	r1, [r0]
   28168:	mov	r1, #0
   2816c:	str	r0, [lr]
   28170:	str	r1, [r8]
   28174:	b	281e4 <__assert_fail@plt+0x16350>
   28178:	mov	sl, #0
   2817c:	str	sl, [fp, #-80]	; 0xffffffb0
   28180:	b	2818c <__assert_fail@plt+0x162f8>
   28184:	mov	sl, #0
   28188:	str	sl, [r6]
   2818c:	ldr	ip, [sp, #44]	; 0x2c
   28190:	ldr	lr, [sp, #20]
   28194:	ldr	r1, [r8]
   28198:	cmp	r1, #31
   2819c:	bne	28330 <__assert_fail@plt+0x1649c>
   281a0:	mov	r0, #996	; 0x3e4
   281a4:	bl	36fb4 <__assert_fail@plt+0x25120>
   281a8:	ldr	lr, [sp, #20]
   281ac:	ldr	ip, [sp, #44]	; 0x2c
   281b0:	cmp	r0, #0
   281b4:	beq	28558 <__assert_fail@plt+0x166c4>
   281b8:	ldr	r1, [lr]
   281bc:	str	r1, [r0]
   281c0:	mov	r1, #0
   281c4:	str	r0, [lr]
   281c8:	str	r1, [r8]
   281cc:	b	28334 <__assert_fail@plt+0x164a0>
   281d0:	ldr	r1, [r8]
   281d4:	str	r0, [sp, #52]	; 0x34
   281d8:	cmp	r1, #31
   281dc:	beq	28148 <__assert_fail@plt+0x162b4>
   281e0:	ldr	r0, [lr]
   281e4:	add	r3, r1, #1
   281e8:	add	r7, r0, r1, lsl #5
   281ec:	add	r2, sl, #20
   281f0:	sub	r6, fp, #80	; 0x50
   281f4:	str	r3, [r8]
   281f8:	str	r4, [r7, #4]!
   281fc:	str	r4, [r7, #4]
   28200:	str	r4, [r7, #8]
   28204:	ldm	r2, {r0, r1}
   28208:	mvn	r2, #0
   2820c:	str	r4, [r7, #12]
   28210:	str	r4, [r7, #16]
   28214:	str	r2, [r7, #28]
   28218:	str	r0, [r7, #20]
   2821c:	bic	r0, r1, #786432	; 0xc0000
   28220:	str	r0, [r7, #24]
   28224:	mov	r0, r7
   28228:	str	r7, [fp, #-80]	; 0xffffffb0
   2822c:	b	28270 <__assert_fail@plt+0x163dc>
   28230:	add	r3, r1, #1
   28234:	add	r0, r0, r1, lsl #5
   28238:	add	r2, sl, #20
   2823c:	str	r3, [r8]
   28240:	str	r4, [r0, #4]!
   28244:	mvn	r3, #0
   28248:	str	r4, [r0, #4]
   2824c:	str	r4, [r0, #8]
   28250:	ldm	r2, {r1, r2}
   28254:	str	r4, [r0, #12]
   28258:	str	r4, [r0, #16]
   2825c:	str	r3, [r0, #28]
   28260:	str	r1, [r0, #20]
   28264:	bic	r1, r2, #786432	; 0xc0000
   28268:	str	r1, [r0, #24]
   2826c:	str	r0, [r6]
   28270:	str	r5, [r0]
   28274:	ldr	r0, [r6]
   28278:	ldr	r1, [r0, #24]
   2827c:	orr	r1, r1, #262144	; 0x40000
   28280:	str	r1, [r0, #24]
   28284:	ldr	r0, [sl, #4]
   28288:	ldr	r5, [r6]
   2828c:	cmp	r0, #0
   28290:	beq	282b0 <__assert_fail@plt+0x1641c>
   28294:	add	r6, r5, #4
   28298:	mov	sl, r0
   2829c:	ldr	r1, [r8]
   282a0:	cmp	r1, #31
   282a4:	beq	282f0 <__assert_fail@plt+0x1645c>
   282a8:	ldr	r0, [lr]
   282ac:	b	28230 <__assert_fail@plt+0x1639c>
   282b0:	mov	r1, #0
   282b4:	mov	r0, sl
   282b8:	ldr	sl, [sl, #8]
   282bc:	cmp	sl, r1
   282c0:	cmpne	sl, #0
   282c4:	bne	282e0 <__assert_fail@plt+0x1644c>
   282c8:	ldr	sl, [r0]
   282cc:	ldr	r5, [r5]
   282d0:	mov	r1, r0
   282d4:	cmp	sl, #0
   282d8:	bne	282b4 <__assert_fail@plt+0x16420>
   282dc:	b	28320 <__assert_fail@plt+0x1648c>
   282e0:	add	r6, r5, #8
   282e4:	ldr	r1, [r8]
   282e8:	cmp	r1, #31
   282ec:	bne	282a8 <__assert_fail@plt+0x16414>
   282f0:	mov	r0, #996	; 0x3e4
   282f4:	bl	36fb4 <__assert_fail@plt+0x25120>
   282f8:	cmp	r0, #0
   282fc:	beq	28184 <__assert_fail@plt+0x162f0>
   28300:	ldr	lr, [sp, #20]
   28304:	ldr	ip, [sp, #44]	; 0x2c
   28308:	ldr	r1, [lr]
   2830c:	str	r1, [r0]
   28310:	mov	r1, #0
   28314:	str	r0, [lr]
   28318:	str	r1, [r8]
   2831c:	b	28230 <__assert_fail@plt+0x1639c>
   28320:	mov	sl, r7
   28324:	ldr	r1, [r8]
   28328:	cmp	r1, #31
   2832c:	beq	281a0 <__assert_fail@plt+0x1630c>
   28330:	ldr	r0, [lr]
   28334:	add	r2, r1, #1
   28338:	add	r1, r0, r1, lsl #5
   2833c:	mov	r0, #16
   28340:	cmp	sl, #0
   28344:	str	r2, [r8]
   28348:	str	r4, [r1, #4]!
   2834c:	stmib	r1, {r9, sl}
   28350:	str	r4, [r1, #12]
   28354:	str	r4, [r1, #16]
   28358:	str	r4, [r1, #20]
   2835c:	str	r0, [r1, #24]
   28360:	mvn	r0, #0
   28364:	str	r0, [r1, #28]
   28368:	str	r1, [r9]
   2836c:	beq	28558 <__assert_fail@plt+0x166c4>
   28370:	mov	r5, r1
   28374:	str	r1, [sl]
   28378:	ldr	r2, [sp, #52]	; 0x34
   2837c:	ldr	r1, [sp, #8]
   28380:	mov	r9, r5
   28384:	add	r0, r2, #1
   28388:	cmp	r2, r1
   2838c:	blt	281d0 <__assert_fail@plt+0x1633c>
   28390:	ldr	r1, [sp, #48]	; 0x30
   28394:	ldr	r2, [sp, #8]
   28398:	mov	r0, #0
   2839c:	cmp	r2, r1
   283a0:	bne	283bc <__assert_fail@plt+0x16528>
   283a4:	ldr	r6, [sp, #24]
   283a8:	mov	r7, r5
   283ac:	ldr	r1, [sp, #28]
   283b0:	cmp	r1, #0
   283b4:	beq	2858c <__assert_fail@plt+0x166f8>
   283b8:	b	27f8c <__assert_fail@plt+0x160f8>
   283bc:	mov	r9, sl
   283c0:	ldr	r1, [r8]
   283c4:	str	r5, [sp, #32]
   283c8:	ldr	r6, [r9], #20
   283cc:	cmp	r1, #31
   283d0:	beq	28518 <__assert_fail@plt+0x16684>
   283d4:	ldr	r0, [lr]
   283d8:	add	r2, r1, #1
   283dc:	add	r7, r0, r1, lsl #5
   283e0:	str	r2, [r8]
   283e4:	str	r4, [r7, #4]!
   283e8:	mvn	r2, #0
   283ec:	str	r4, [r7, #4]
   283f0:	str	r4, [r7, #8]
   283f4:	ldm	r9, {r0, r1}
   283f8:	str	r4, [r7, #12]
   283fc:	str	r4, [r7, #16]
   28400:	str	r2, [r7, #28]
   28404:	sub	r9, fp, #80	; 0x50
   28408:	str	r0, [r7, #20]
   2840c:	bic	r0, r1, #786432	; 0xc0000
   28410:	str	r0, [r7, #24]
   28414:	mov	r0, r7
   28418:	str	r7, [fp, #-80]	; 0xffffffb0
   2841c:	b	28460 <__assert_fail@plt+0x165cc>
   28420:	add	r3, r1, #1
   28424:	add	r0, r0, r1, lsl #5
   28428:	add	r2, sl, #20
   2842c:	str	r3, [r8]
   28430:	str	r4, [r0, #4]!
   28434:	mvn	r3, #0
   28438:	str	r4, [r0, #4]
   2843c:	str	r4, [r0, #8]
   28440:	ldm	r2, {r1, r2}
   28444:	str	r4, [r0, #12]
   28448:	str	r4, [r0, #16]
   2844c:	str	r3, [r0, #28]
   28450:	str	r1, [r0, #20]
   28454:	bic	r1, r2, #786432	; 0xc0000
   28458:	str	r1, [r0, #24]
   2845c:	str	r0, [r9]
   28460:	str	r6, [r0]
   28464:	ldr	r0, [r9]
   28468:	ldr	r1, [r0, #24]
   2846c:	orr	r1, r1, #262144	; 0x40000
   28470:	str	r1, [r0, #24]
   28474:	ldr	r0, [sl, #4]
   28478:	ldr	r6, [r9]
   2847c:	cmp	r0, #0
   28480:	beq	284a0 <__assert_fail@plt+0x1660c>
   28484:	add	r9, r6, #4
   28488:	mov	sl, r0
   2848c:	ldr	r1, [r8]
   28490:	cmp	r1, #31
   28494:	beq	284e8 <__assert_fail@plt+0x16654>
   28498:	ldr	r0, [lr]
   2849c:	b	28420 <__assert_fail@plt+0x1658c>
   284a0:	ldr	r5, [sp, #48]	; 0x30
   284a4:	ldr	r9, [sp, #8]
   284a8:	mov	r1, #0
   284ac:	mov	r0, sl
   284b0:	ldr	sl, [sl, #8]
   284b4:	cmp	sl, r1
   284b8:	cmpne	sl, #0
   284bc:	bne	284d8 <__assert_fail@plt+0x16644>
   284c0:	ldr	sl, [r0]
   284c4:	ldr	r6, [r6]
   284c8:	mov	r1, r0
   284cc:	cmp	sl, #0
   284d0:	bne	284ac <__assert_fail@plt+0x16618>
   284d4:	b	27b78 <__assert_fail@plt+0x15ce4>
   284d8:	add	r9, r6, #8
   284dc:	ldr	r1, [r8]
   284e0:	cmp	r1, #31
   284e4:	bne	28498 <__assert_fail@plt+0x16604>
   284e8:	mov	r0, #996	; 0x3e4
   284ec:	bl	36fb4 <__assert_fail@plt+0x25120>
   284f0:	cmp	r0, #0
   284f4:	beq	28550 <__assert_fail@plt+0x166bc>
   284f8:	ldr	lr, [sp, #20]
   284fc:	ldr	ip, [sp, #44]	; 0x2c
   28500:	ldr	r1, [lr]
   28504:	str	r1, [r0]
   28508:	mov	r1, #0
   2850c:	str	r0, [lr]
   28510:	str	r1, [r8]
   28514:	b	28420 <__assert_fail@plt+0x1658c>
   28518:	mov	r0, #996	; 0x3e4
   2851c:	bl	36fb4 <__assert_fail@plt+0x25120>
   28520:	cmp	r0, #0
   28524:	beq	28548 <__assert_fail@plt+0x166b4>
   28528:	ldr	lr, [sp, #20]
   2852c:	ldr	ip, [sp, #44]	; 0x2c
   28530:	ldr	r1, [lr]
   28534:	str	r1, [r0]
   28538:	mov	r1, #0
   2853c:	str	r0, [lr]
   28540:	str	r1, [r8]
   28544:	b	283d8 <__assert_fail@plt+0x16544>
   28548:	str	r4, [fp, #-80]	; 0xffffffb0
   2854c:	b	28554 <__assert_fail@plt+0x166c0>
   28550:	str	r4, [r9]
   28554:	ldr	ip, [sp, #44]	; 0x2c
   28558:	ldr	r0, [sp, #16]
   2855c:	ldr	r6, [sp, #24]
   28560:	ldr	sl, [sp, #36]	; 0x24
   28564:	mov	r1, #12
   28568:	mov	r7, #0
   2856c:	str	r1, [r0]
   28570:	clz	r0, r7
   28574:	cmp	r7, #0
   28578:	lsr	r0, r0, #5
   2857c:	beq	279c8 <__assert_fail@plt+0x15b34>
   28580:	ldr	r1, [sp, #28]
   28584:	cmp	r1, #0
   28588:	bne	27f8c <__assert_fail@plt+0x160f8>
   2858c:	ldrb	r0, [ip, #4]
   28590:	mov	sl, r7
   28594:	cmp	r0, #23
   28598:	bls	278b0 <__assert_fail@plt+0x15a1c>
   2859c:	b	28654 <__assert_fail@plt+0x167c0>
   285a0:	ldr	r8, [sp, #16]
   285a4:	movw	r6, #255	; 0xff
   285a8:	cmp	r0, #0
   285ac:	movt	r6, #4
   285b0:	bne	28648 <__assert_fail@plt+0x167b4>
   285b4:	mov	r5, r7
   285b8:	ldr	r7, [r7, #4]
   285bc:	cmp	r7, #0
   285c0:	bne	285b4 <__assert_fail@plt+0x16720>
   285c4:	ldr	r7, [r5, #8]
   285c8:	cmp	r7, #0
   285cc:	bne	285b4 <__assert_fail@plt+0x16720>
   285d0:	ldr	r0, [r5, #24]
   285d4:	and	r0, r0, r6
   285d8:	cmp	r0, #3
   285dc:	beq	28614 <__assert_fail@plt+0x16780>
   285e0:	cmp	r0, #6
   285e4:	bne	2861c <__assert_fail@plt+0x16788>
   285e8:	ldr	r4, [r5, #20]
   285ec:	ldr	r0, [r4]
   285f0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   285f4:	ldr	r0, [r4, #4]
   285f8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   285fc:	ldr	r0, [r4, #8]
   28600:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28604:	ldr	r0, [r4, #12]
   28608:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2860c:	mov	r0, r4
   28610:	b	28618 <__assert_fail@plt+0x16784>
   28614:	ldr	r0, [r5, #20]
   28618:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2861c:	ldr	r0, [r5]
   28620:	cmp	r0, #0
   28624:	beq	28648 <__assert_fail@plt+0x167b4>
   28628:	ldr	r7, [r0, #8]
   2862c:	cmp	r7, r5
   28630:	mov	r5, r0
   28634:	beq	285d0 <__assert_fail@plt+0x1673c>
   28638:	cmp	r7, #0
   2863c:	mov	r5, r0
   28640:	beq	285d0 <__assert_fail@plt+0x1673c>
   28644:	b	285b4 <__assert_fail@plt+0x16720>
   28648:	mov	r0, #13
   2864c:	mov	sl, #0
   28650:	str	r0, [r8]
   28654:	mov	r0, sl
   28658:	sub	sp, fp, #28
   2865c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28660:	mov	r7, r4
   28664:	mov	r6, r9
   28668:	b	27860 <__assert_fail@plt+0x159cc>
   2866c:	cmp	sl, #0
   28670:	beq	28720 <__assert_fail@plt+0x1688c>
   28674:	movw	r6, #255	; 0xff
   28678:	movt	r6, #4
   2867c:	mov	r5, sl
   28680:	ldr	sl, [sl, #4]
   28684:	cmp	sl, #0
   28688:	bne	2867c <__assert_fail@plt+0x167e8>
   2868c:	ldr	sl, [r5, #8]
   28690:	cmp	sl, #0
   28694:	bne	2867c <__assert_fail@plt+0x167e8>
   28698:	ldr	r0, [r5, #24]
   2869c:	and	r0, r0, r6
   286a0:	cmp	r0, #3
   286a4:	beq	286dc <__assert_fail@plt+0x16848>
   286a8:	cmp	r0, #6
   286ac:	bne	286e4 <__assert_fail@plt+0x16850>
   286b0:	ldr	r4, [r5, #20]
   286b4:	ldr	r0, [r4]
   286b8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   286bc:	ldr	r0, [r4, #4]
   286c0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   286c4:	ldr	r0, [r4, #8]
   286c8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   286cc:	ldr	r0, [r4, #12]
   286d0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   286d4:	mov	r0, r4
   286d8:	b	286e0 <__assert_fail@plt+0x1684c>
   286dc:	ldr	r0, [r5, #20]
   286e0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   286e4:	ldr	r0, [r5]
   286e8:	cmp	r0, #0
   286ec:	beq	28710 <__assert_fail@plt+0x1687c>
   286f0:	ldr	sl, [r0, #8]
   286f4:	cmp	sl, r5
   286f8:	mov	r5, r0
   286fc:	beq	28698 <__assert_fail@plt+0x16804>
   28700:	cmp	sl, #0
   28704:	mov	r5, r0
   28708:	beq	28698 <__assert_fail@plt+0x16804>
   2870c:	b	2867c <__assert_fail@plt+0x167e8>
   28710:	mov	sl, #0
   28714:	mov	r0, sl
   28718:	sub	sp, fp, #28
   2871c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28720:	mov	sl, #0
   28724:	mov	r0, sl
   28728:	sub	sp, fp, #28
   2872c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28730:	cmp	r0, #2
   28734:	blt	28750 <__assert_fail@plt+0x168bc>
   28738:	ldr	r0, [sl, #36]	; 0x24
   2873c:	cmp	r0, #0
   28740:	bne	274f8 <__assert_fail@plt+0x15664>
   28744:	ldrb	r0, [sl, #16]
   28748:	tst	r0, #1
   2874c:	bne	274f8 <__assert_fail@plt+0x15664>
   28750:	ldr	r0, [sl]
   28754:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28758:	ldr	r0, [sl, #4]
   2875c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28760:	ldr	r0, [sl, #8]
   28764:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28768:	ldr	r0, [sl, #12]
   2876c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28770:	mov	r0, sl
   28774:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28778:	ldr	r1, [r8, #64]	; 0x40
   2877c:	cmp	r1, #31
   28780:	beq	28c78 <__assert_fail@plt+0x16de4>
   28784:	ldr	r0, [r8, #56]	; 0x38
   28788:	add	r2, r1, #1
   2878c:	add	r0, r0, r1, lsl #5
   28790:	ldr	lr, [sp, #44]	; 0x2c
   28794:	mov	r1, #3
   28798:	vmov.i32	q8, #0	; 0x00000000
   2879c:	str	r2, [r8, #64]	; 0x40
   287a0:	mov	r2, #0
   287a4:	add	r7, r0, #4
   287a8:	str	r2, [r0, #20]
   287ac:	str	r4, [r0, #24]
   287b0:	str	r1, [r0, #28]
   287b4:	mov	r0, #28
   287b8:	mov	r1, r7
   287bc:	vst1.32	{d16-d17}, [r1], r0
   287c0:	mvn	r0, #0
   287c4:	str	r0, [r1]
   287c8:	b	27860 <__assert_fail@plt+0x159cc>
   287cc:	mov	r0, #996	; 0x3e4
   287d0:	bl	36fb4 <__assert_fail@plt+0x25120>
   287d4:	cmp	r0, #0
   287d8:	beq	28ab0 <__assert_fail@plt+0x16c1c>
   287dc:	ldr	r1, [r8, #56]	; 0x38
   287e0:	ldr	lr, [sp, #44]	; 0x2c
   287e4:	str	r1, [r0]
   287e8:	mov	r1, #0
   287ec:	str	r1, [r8, #64]	; 0x40
   287f0:	str	r0, [r8, #56]	; 0x38
   287f4:	b	268e8 <__assert_fail@plt+0x14a54>
   287f8:	mov	r9, r0
   287fc:	b	288b8 <__assert_fail@plt+0x16a24>
   28800:	mov	r9, #7
   28804:	b	288b8 <__assert_fail@plt+0x16a24>
   28808:	mov	r0, #2
   2880c:	b	28cb0 <__assert_fail@plt+0x16e1c>
   28810:	mov	r0, #6
   28814:	b	27754 <__assert_fail@plt+0x158c0>
   28818:	mov	r0, #996	; 0x3e4
   2881c:	bl	36fb4 <__assert_fail@plt+0x25120>
   28820:	cmp	r0, #0
   28824:	beq	28ab0 <__assert_fail@plt+0x16c1c>
   28828:	ldr	r1, [r8, #56]	; 0x38
   2882c:	ldr	lr, [sp, #44]	; 0x2c
   28830:	str	r1, [r0]
   28834:	mov	r1, #0
   28838:	str	r1, [r8, #64]	; 0x40
   2883c:	str	r0, [r8, #56]	; 0x38
   28840:	b	269c0 <__assert_fail@plt+0x14b2c>
   28844:	mov	r0, #996	; 0x3e4
   28848:	bl	36fb4 <__assert_fail@plt+0x25120>
   2884c:	cmp	r0, #0
   28850:	beq	28ab0 <__assert_fail@plt+0x16c1c>
   28854:	ldr	r1, [r8, #56]	; 0x38
   28858:	ldr	r3, [sp, #24]
   2885c:	ldr	lr, [sp, #44]	; 0x2c
   28860:	str	r1, [r0]
   28864:	mov	r1, #0
   28868:	str	r1, [r8, #64]	; 0x40
   2886c:	str	r0, [r8, #56]	; 0x38
   28870:	b	26b84 <__assert_fail@plt+0x14cf0>
   28874:	mov	r0, r4
   28878:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2887c:	mov	r0, r5
   28880:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28884:	b	27750 <__assert_fail@plt+0x158bc>
   28888:	mov	r0, #996	; 0x3e4
   2888c:	bl	36fb4 <__assert_fail@plt+0x25120>
   28890:	cmp	r0, #0
   28894:	beq	28ab0 <__assert_fail@plt+0x16c1c>
   28898:	ldr	r1, [r8, #56]	; 0x38
   2889c:	ldr	lr, [sp, #44]	; 0x2c
   288a0:	str	r1, [r0]
   288a4:	mov	r1, #0
   288a8:	str	r1, [r8, #64]	; 0x40
   288ac:	str	r0, [r8, #56]	; 0x38
   288b0:	b	26964 <__assert_fail@plt+0x14ad0>
   288b4:	mov	r9, #3
   288b8:	ldr	r0, [sp, #16]
   288bc:	ldr	r4, [sp, #52]	; 0x34
   288c0:	ldr	sl, [sp, #48]	; 0x30
   288c4:	str	r9, [r0]
   288c8:	ldr	r6, [sp, #40]	; 0x28
   288cc:	mov	r0, r4
   288d0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   288d4:	ldr	r0, [sl]
   288d8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   288dc:	ldr	r0, [sl, #4]
   288e0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   288e4:	ldr	r0, [sl, #8]
   288e8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   288ec:	ldr	r0, [sl, #12]
   288f0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   288f4:	mov	r0, sl
   288f8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   288fc:	ldr	r0, [sp, #16]
   28900:	mov	r7, #0
   28904:	mov	sl, #0
   28908:	ldr	r0, [r0]
   2890c:	cmp	r0, #0
   28910:	ldr	lr, [sp, #44]	; 0x2c
   28914:	beq	27860 <__assert_fail@plt+0x159cc>
   28918:	b	28654 <__assert_fail@plt+0x167c0>
   2891c:	mov	r0, #996	; 0x3e4
   28920:	bl	36fb4 <__assert_fail@plt+0x25120>
   28924:	cmp	r0, #0
   28928:	beq	28cac <__assert_fail@plt+0x16e18>
   2892c:	ldr	r1, [r8, #56]	; 0x38
   28930:	ldr	lr, [sp, #44]	; 0x2c
   28934:	str	r1, [r0]
   28938:	mov	r1, #0
   2893c:	str	r1, [r8, #64]	; 0x40
   28940:	str	r0, [r8, #56]	; 0x38
   28944:	b	27514 <__assert_fail@plt+0x15680>
   28948:	mov	r0, #996	; 0x3e4
   2894c:	bl	36fb4 <__assert_fail@plt+0x25120>
   28950:	cmp	r0, #0
   28954:	beq	28cac <__assert_fail@plt+0x16e18>
   28958:	ldr	r1, [r8, #56]	; 0x38
   2895c:	ldr	lr, [sp, #44]	; 0x2c
   28960:	str	r1, [r0]
   28964:	mov	r1, #0
   28968:	str	r1, [r8, #64]	; 0x40
   2896c:	str	r0, [r8, #56]	; 0x38
   28970:	b	275c0 <__assert_fail@plt+0x1572c>
   28974:	mov	r0, #996	; 0x3e4
   28978:	bl	36fb4 <__assert_fail@plt+0x25120>
   2897c:	cmp	r0, #0
   28980:	beq	28cac <__assert_fail@plt+0x16e18>
   28984:	ldr	r1, [r8, #56]	; 0x38
   28988:	ldr	lr, [sp, #44]	; 0x2c
   2898c:	str	r1, [r0]
   28990:	mov	r1, #0
   28994:	str	r1, [r8, #64]	; 0x40
   28998:	str	r0, [r8, #56]	; 0x38
   2899c:	b	2760c <__assert_fail@plt+0x15778>
   289a0:	mov	r0, #996	; 0x3e4
   289a4:	bl	36fb4 <__assert_fail@plt+0x25120>
   289a8:	cmp	r0, #0
   289ac:	beq	28ab0 <__assert_fail@plt+0x16c1c>
   289b0:	ldr	r1, [r8, #56]	; 0x38
   289b4:	ldr	lr, [sp, #44]	; 0x2c
   289b8:	mov	r6, sl
   289bc:	str	r1, [r0]
   289c0:	mov	r1, #0
   289c4:	str	r1, [r8, #64]	; 0x40
   289c8:	str	r0, [r8, #56]	; 0x38
   289cc:	b	2781c <__assert_fail@plt+0x15988>
   289d0:	mov	r0, r4
   289d4:	bl	17b10 <__assert_fail@plt+0x5c7c>
   289d8:	ldr	lr, [sp, #44]	; 0x2c
   289dc:	mov	r7, r9
   289e0:	b	27860 <__assert_fail@plt+0x159cc>
   289e4:	mov	r0, #996	; 0x3e4
   289e8:	bl	36fb4 <__assert_fail@plt+0x25120>
   289ec:	cmp	r0, #0
   289f0:	beq	28b60 <__assert_fail@plt+0x16ccc>
   289f4:	ldr	r1, [r8, #56]	; 0x38
   289f8:	ldr	r7, [sp, #24]
   289fc:	ldr	lr, [sp, #44]	; 0x2c
   28a00:	mov	sl, #0
   28a04:	str	r1, [r0]
   28a08:	mov	r1, #0
   28a0c:	str	r1, [r8, #64]	; 0x40
   28a10:	str	r0, [r8, #56]	; 0x38
   28a14:	b	276bc <__assert_fail@plt+0x15828>
   28a18:	mov	r0, #996	; 0x3e4
   28a1c:	bl	36fb4 <__assert_fail@plt+0x25120>
   28a20:	cmp	r0, #0
   28a24:	beq	28c54 <__assert_fail@plt+0x16dc0>
   28a28:	ldr	r1, [r8, #56]	; 0x38
   28a2c:	ldr	r7, [sp, #24]
   28a30:	ldr	lr, [sp, #44]	; 0x2c
   28a34:	mov	sl, #0
   28a38:	str	r1, [r0]
   28a3c:	mov	r1, #0
   28a40:	str	r1, [r8, #64]	; 0x40
   28a44:	str	r0, [r8, #56]	; 0x38
   28a48:	b	26b2c <__assert_fail@plt+0x14c98>
   28a4c:	mov	r0, #996	; 0x3e4
   28a50:	bl	36fb4 <__assert_fail@plt+0x25120>
   28a54:	cmp	r0, #0
   28a58:	beq	28c60 <__assert_fail@plt+0x16dcc>
   28a5c:	ldr	r1, [r8, #56]	; 0x38
   28a60:	ldr	r7, [sp, #24]
   28a64:	ldr	lr, [sp, #44]	; 0x2c
   28a68:	mov	sl, #0
   28a6c:	str	r1, [r0]
   28a70:	mov	r1, #0
   28a74:	str	r1, [r8, #64]	; 0x40
   28a78:	str	r0, [r8, #56]	; 0x38
   28a7c:	b	27664 <__assert_fail@plt+0x157d0>
   28a80:	mov	r0, #996	; 0x3e4
   28a84:	bl	36fb4 <__assert_fail@plt+0x25120>
   28a88:	cmp	r0, #0
   28a8c:	beq	28ab0 <__assert_fail@plt+0x16c1c>
   28a90:	ldr	r1, [r8, #56]	; 0x38
   28a94:	ldr	r7, [sp, #24]
   28a98:	ldr	lr, [sp, #44]	; 0x2c
   28a9c:	str	r1, [r0]
   28aa0:	mov	r1, #0
   28aa4:	str	r1, [r8, #64]	; 0x40
   28aa8:	str	r0, [r8, #56]	; 0x38
   28aac:	b	2777c <__assert_fail@plt+0x158e8>
   28ab0:	mov	r0, #12
   28ab4:	ldr	r1, [sp, #16]
   28ab8:	mov	sl, #0
   28abc:	str	r0, [r1]
   28ac0:	mov	r0, sl
   28ac4:	sub	sp, fp, #28
   28ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28acc:	mov	r4, #0
   28ad0:	mov	r9, #0
   28ad4:	b	28ae0 <__assert_fail@plt+0x16c4c>
   28ad8:	mov	r9, #4
   28adc:	mov	r4, #128	; 0x80
   28ae0:	bl	11c54 <__ctype_b_loc@plt>
   28ae4:	ldr	r0, [r0]
   28ae8:	ldr	r7, [sp, #24]
   28aec:	ldr	lr, [sp, #44]	; 0x2c
   28af0:	mov	r1, #1
   28af4:	mov	sl, #0
   28af8:	add	r5, r0, r4, lsl #1
   28afc:	add	r0, r8, r9, lsl #2
   28b00:	mov	ip, r6
   28b04:	mov	r3, #0
   28b08:	add	r2, r0, #96	; 0x60
   28b0c:	mov	r0, r5
   28b10:	add	r6, r4, r3
   28b14:	cmp	r6, #95	; 0x5f
   28b18:	beq	28b28 <__assert_fail@plt+0x16c94>
   28b1c:	ldrh	r6, [r0]
   28b20:	ands	r6, r6, #8
   28b24:	beq	28b34 <__assert_fail@plt+0x16ca0>
   28b28:	ldr	r6, [r2]
   28b2c:	orr	r6, r6, r1, lsl r3
   28b30:	str	r6, [r2]
   28b34:	add	r3, r3, #1
   28b38:	add	r0, r0, #2
   28b3c:	cmp	r3, #32
   28b40:	bne	28b10 <__assert_fail@plt+0x16c7c>
   28b44:	add	r9, r9, #1
   28b48:	add	r5, r5, #64	; 0x40
   28b4c:	add	r4, r4, #32
   28b50:	mov	r6, ip
   28b54:	cmp	r9, #8
   28b58:	bne	28afc <__assert_fail@plt+0x16c68>
   28b5c:	b	26afc <__assert_fail@plt+0x14c68>
   28b60:	ldr	r7, [sp, #24]
   28b64:	ldr	lr, [sp, #44]	; 0x2c
   28b68:	mov	r6, #0
   28b6c:	mov	sl, #0
   28b70:	ldr	r1, [r4]
   28b74:	cmp	r1, #31
   28b78:	bne	27704 <__assert_fail@plt+0x15870>
   28b7c:	mov	r0, #996	; 0x3e4
   28b80:	bl	36fb4 <__assert_fail@plt+0x25120>
   28b84:	ldr	lr, [sp, #44]	; 0x2c
   28b88:	cmp	r0, #0
   28b8c:	beq	27750 <__assert_fail@plt+0x158bc>
   28b90:	ldr	r1, [r8, #56]	; 0x38
   28b94:	str	r1, [r0]
   28b98:	mov	r1, #0
   28b9c:	str	r1, [r8, #64]	; 0x40
   28ba0:	str	r0, [r8, #56]	; 0x38
   28ba4:	b	27708 <__assert_fail@plt+0x15874>
   28ba8:	cmp	r9, #0
   28bac:	beq	28c4c <__assert_fail@plt+0x16db8>
   28bb0:	movw	r5, #255	; 0xff
   28bb4:	movt	r5, #4
   28bb8:	mov	r6, r9
   28bbc:	ldr	r9, [r9, #4]
   28bc0:	cmp	r9, #0
   28bc4:	bne	28bb8 <__assert_fail@plt+0x16d24>
   28bc8:	ldr	r9, [r6, #8]
   28bcc:	cmp	r9, #0
   28bd0:	bne	28bb8 <__assert_fail@plt+0x16d24>
   28bd4:	ldr	r0, [r6, #24]
   28bd8:	and	r0, r0, r5
   28bdc:	cmp	r0, #3
   28be0:	beq	28c18 <__assert_fail@plt+0x16d84>
   28be4:	cmp	r0, #6
   28be8:	bne	28c20 <__assert_fail@plt+0x16d8c>
   28bec:	ldr	r4, [r6, #20]
   28bf0:	ldr	r0, [r4]
   28bf4:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28bf8:	ldr	r0, [r4, #4]
   28bfc:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28c00:	ldr	r0, [r4, #8]
   28c04:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28c08:	ldr	r0, [r4, #12]
   28c0c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28c10:	mov	r0, r4
   28c14:	b	28c1c <__assert_fail@plt+0x16d88>
   28c18:	ldr	r0, [r6, #20]
   28c1c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28c20:	ldr	r0, [r6]
   28c24:	cmp	r0, #0
   28c28:	beq	28c4c <__assert_fail@plt+0x16db8>
   28c2c:	ldr	r9, [r0, #8]
   28c30:	cmp	r9, r6
   28c34:	mov	r6, r0
   28c38:	beq	28bd4 <__assert_fail@plt+0x16d40>
   28c3c:	cmp	r9, #0
   28c40:	mov	r6, r0
   28c44:	beq	28bd4 <__assert_fail@plt+0x16d40>
   28c48:	b	28bb8 <__assert_fail@plt+0x16d24>
   28c4c:	mov	r0, #8
   28c50:	b	28ab4 <__assert_fail@plt+0x16c20>
   28c54:	mov	r5, #0
   28c58:	mov	r0, #9
   28c5c:	b	28c68 <__assert_fail@plt+0x16dd4>
   28c60:	mov	r5, #0
   28c64:	mov	r0, #10
   28c68:	ldr	r7, [sp, #24]
   28c6c:	ldr	lr, [sp, #44]	; 0x2c
   28c70:	mov	sl, #0
   28c74:	b	276a4 <__assert_fail@plt+0x15810>
   28c78:	mov	r0, #996	; 0x3e4
   28c7c:	bl	36fb4 <__assert_fail@plt+0x25120>
   28c80:	cmp	r0, #0
   28c84:	beq	28cac <__assert_fail@plt+0x16e18>
   28c88:	ldr	r1, [r8, #56]	; 0x38
   28c8c:	str	r1, [r0]
   28c90:	mov	r1, #0
   28c94:	str	r1, [r8, #64]	; 0x40
   28c98:	str	r0, [r8, #56]	; 0x38
   28c9c:	b	28788 <__assert_fail@plt+0x168f4>
   28ca0:	ldr	r6, [sp, #40]	; 0x28
   28ca4:	ldr	r4, [sp, #52]	; 0x34
   28ca8:	ldr	sl, [sp, #48]	; 0x30
   28cac:	mov	r0, #12
   28cb0:	ldr	r1, [sp, #16]
   28cb4:	str	r0, [r1]
   28cb8:	b	288cc <__assert_fail@plt+0x16a38>
   28cbc:	mov	r0, r6
   28cc0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28cc4:	mov	r0, r9
   28cc8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28ccc:	mov	r9, #12
   28cd0:	b	288b8 <__assert_fail@plt+0x16a24>
   28cd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28cd8:	add	fp, sp, #28
   28cdc:	sub	sp, sp, #12
   28ce0:	mov	r9, r1
   28ce4:	mov	r6, r0
   28ce8:	mov	r4, #0
   28cec:	mov	r0, #32
   28cf0:	mov	r1, #1
   28cf4:	mov	sl, r3
   28cf8:	mov	r5, r2
   28cfc:	str	r4, [sp, #8]
   28d00:	bl	36f60 <__assert_fail@plt+0x250cc>
   28d04:	ldr	r1, [fp, #12]
   28d08:	cmp	r0, #0
   28d0c:	beq	28fc4 <__assert_fail@plt+0x17130>
   28d10:	mov	r7, r0
   28d14:	mov	r0, #40	; 0x28
   28d18:	mov	r1, #1
   28d1c:	bl	36f60 <__assert_fail@plt+0x250cc>
   28d20:	cmp	r0, #0
   28d24:	beq	28fd8 <__assert_fail@plt+0x17144>
   28d28:	mov	r8, r0
   28d2c:	ldrb	r0, [r0, #16]
   28d30:	ldr	r1, [fp, #8]
   28d34:	mov	r4, #0
   28d38:	add	r3, sp, #8
   28d3c:	str	r5, [sp]
   28d40:	mov	r2, r8
   28d44:	str	r4, [sp, #4]
   28d48:	and	r0, r0, #254	; 0xfe
   28d4c:	orr	r0, r0, r1
   28d50:	mov	r1, r7
   28d54:	strb	r0, [r8, #16]
   28d58:	mov	r0, r9
   28d5c:	bl	29588 <__assert_fail@plt+0x176f4>
   28d60:	cmp	r0, #0
   28d64:	bne	28ffc <__assert_fail@plt+0x17168>
   28d68:	ldrb	r0, [sl]
   28d6c:	cmp	r0, #0
   28d70:	beq	28d9c <__assert_fail@plt+0x16f08>
   28d74:	add	r1, sl, #1
   28d78:	mov	r2, #1
   28d7c:	ubfx	r3, r0, #5, #3
   28d80:	and	r0, r0, #31
   28d84:	ldr	r5, [r7, r3, lsl #2]
   28d88:	orr	r0, r5, r2, lsl r0
   28d8c:	str	r0, [r7, r3, lsl #2]
   28d90:	ldrb	r0, [r1], #1
   28d94:	cmp	r0, #0
   28d98:	bne	28d7c <__assert_fail@plt+0x16ee8>
   28d9c:	ldr	r0, [fp, #8]
   28da0:	cmp	r0, #0
   28da4:	bne	28eb8 <__assert_fail@plt+0x17024>
   28da8:	ldr	r0, [r6, #92]	; 0x5c
   28dac:	cmp	r0, #2
   28db0:	bge	28ee0 <__assert_fail@plt+0x1704c>
   28db4:	ldr	r1, [r6, #64]	; 0x40
   28db8:	cmp	r1, #31
   28dbc:	beq	28f64 <__assert_fail@plt+0x170d0>
   28dc0:	ldr	r0, [r6, #56]	; 0x38
   28dc4:	add	r2, r1, #1
   28dc8:	add	r0, r0, r1, lsl #5
   28dcc:	mov	r1, #3
   28dd0:	vmov.i32	q8, #0	; 0x00000000
   28dd4:	str	r2, [r6, #64]	; 0x40
   28dd8:	mov	r2, #0
   28ddc:	add	r5, r0, #4
   28de0:	str	r2, [r0, #20]
   28de4:	str	r7, [r0, #24]
   28de8:	str	r1, [r0, #28]
   28dec:	mov	r0, #28
   28df0:	mov	r1, r5
   28df4:	vst1.32	{d16-d17}, [r1], r0
   28df8:	mvn	r0, #0
   28dfc:	str	r0, [r1]
   28e00:	ldr	r0, [r6, #92]	; 0x5c
   28e04:	cmp	r0, #2
   28e08:	blt	28f8c <__assert_fail@plt+0x170f8>
   28e0c:	ldrb	r0, [r6, #88]	; 0x58
   28e10:	orr	r0, r0, #2
   28e14:	strb	r0, [r6, #88]	; 0x58
   28e18:	ldr	r1, [r6, #64]	; 0x40
   28e1c:	cmp	r1, #31
   28e20:	beq	29044 <__assert_fail@plt+0x171b0>
   28e24:	ldr	r0, [r6, #56]	; 0x38
   28e28:	add	r0, r0, r1, lsl #5
   28e2c:	add	r2, r1, #1
   28e30:	mov	r1, #6
   28e34:	mov	r4, #0
   28e38:	vmov.i32	q8, #0	; 0x00000000
   28e3c:	add	r7, r0, #4
   28e40:	str	r2, [r6, #64]	; 0x40
   28e44:	str	r4, [r0, #20]
   28e48:	str	r8, [r0, #24]
   28e4c:	str	r1, [r0, #28]
   28e50:	mov	r0, #28
   28e54:	mov	r1, r7
   28e58:	vst1.32	{d16-d17}, [r1], r0
   28e5c:	mvn	r0, #0
   28e60:	str	r0, [r1]
   28e64:	ldr	r1, [r6, #64]	; 0x40
   28e68:	cmp	r1, #31
   28e6c:	beq	290b4 <__assert_fail@plt+0x17220>
   28e70:	ldr	r0, [r6, #56]	; 0x38
   28e74:	add	r2, r1, #1
   28e78:	add	r4, r0, r1, lsl #5
   28e7c:	mov	r0, #0
   28e80:	mov	r1, #10
   28e84:	str	r2, [r6, #64]	; 0x40
   28e88:	str	r0, [r4, #4]!
   28e8c:	mvn	r2, #0
   28e90:	add	r3, r4, #20
   28e94:	stmib	r4, {r5, r7}
   28e98:	str	r0, [r4, #12]
   28e9c:	str	r0, [r4, #16]
   28ea0:	stm	r3, {r0, r1, r2}
   28ea4:	str	r4, [r5]
   28ea8:	str	r4, [r7]
   28eac:	mov	r0, r4
   28eb0:	sub	sp, fp, #28
   28eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28eb8:	vld1.32	{d16-d17}, [r7]
   28ebc:	mov	r0, r7
   28ec0:	vmvn	q8, q8
   28ec4:	vst1.32	{d16-d17}, [r0]!
   28ec8:	vld1.32	{d16-d17}, [r0]
   28ecc:	vmvn	q8, q8
   28ed0:	vst1.32	{d16-d17}, [r0]
   28ed4:	ldr	r0, [r6, #92]	; 0x5c
   28ed8:	cmp	r0, #2
   28edc:	blt	28db4 <__assert_fail@plt+0x16f20>
   28ee0:	ldm	r7, {r0, r1, r2, ip}
   28ee4:	ldr	r5, [r6, #60]	; 0x3c
   28ee8:	ldr	r3, [r5]
   28eec:	and	r0, r0, r3
   28ef0:	str	r0, [r7]
   28ef4:	ldr	r0, [r5, #4]
   28ef8:	and	r0, r1, r0
   28efc:	str	r0, [r7, #4]
   28f00:	ldr	r0, [r5, #8]
   28f04:	and	r0, r2, r0
   28f08:	str	r0, [r7, #8]
   28f0c:	ldr	r0, [r5, #12]
   28f10:	and	r0, ip, r0
   28f14:	str	r0, [r7, #12]
   28f18:	ldr	r0, [r7, #16]
   28f1c:	ldr	r1, [r5, #16]
   28f20:	and	r0, r0, r1
   28f24:	str	r0, [r7, #16]
   28f28:	ldr	r0, [r5, #20]
   28f2c:	ldr	r1, [r7, #20]
   28f30:	and	r0, r1, r0
   28f34:	str	r0, [r7, #20]
   28f38:	ldr	r0, [r5, #24]
   28f3c:	ldr	r1, [r7, #24]
   28f40:	and	r0, r1, r0
   28f44:	str	r0, [r7, #24]
   28f48:	ldr	r0, [r5, #28]
   28f4c:	ldr	r1, [r7, #28]
   28f50:	and	r0, r1, r0
   28f54:	str	r0, [r7, #28]
   28f58:	ldr	r1, [r6, #64]	; 0x40
   28f5c:	cmp	r1, #31
   28f60:	bne	28dc0 <__assert_fail@plt+0x16f2c>
   28f64:	mov	r0, #996	; 0x3e4
   28f68:	bl	36fb4 <__assert_fail@plt+0x25120>
   28f6c:	cmp	r0, #0
   28f70:	beq	2906c <__assert_fail@plt+0x171d8>
   28f74:	ldr	r1, [r6, #56]	; 0x38
   28f78:	str	r1, [r0]
   28f7c:	mov	r1, #0
   28f80:	str	r1, [r6, #64]	; 0x40
   28f84:	str	r0, [r6, #56]	; 0x38
   28f88:	b	28dc4 <__assert_fail@plt+0x16f30>
   28f8c:	ldr	r0, [r8]
   28f90:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28f94:	ldr	r0, [r8, #4]
   28f98:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28f9c:	ldr	r0, [r8, #8]
   28fa0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28fa4:	ldr	r0, [r8, #12]
   28fa8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28fac:	mov	r0, r8
   28fb0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28fb4:	mov	r4, r5
   28fb8:	mov	r0, r4
   28fbc:	sub	sp, fp, #28
   28fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28fc4:	mov	r0, #12
   28fc8:	str	r0, [r1]
   28fcc:	mov	r0, r4
   28fd0:	sub	sp, fp, #28
   28fd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28fd8:	mov	r0, r7
   28fdc:	bl	17b10 <__assert_fail@plt+0x5c7c>
   28fe0:	ldr	r1, [fp, #12]
   28fe4:	mov	r0, #12
   28fe8:	mov	r4, #0
   28fec:	str	r0, [r1]
   28ff0:	mov	r0, r4
   28ff4:	sub	sp, fp, #28
   28ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28ffc:	mov	r5, r0
   29000:	mov	r0, r7
   29004:	bl	17b10 <__assert_fail@plt+0x5c7c>
   29008:	ldr	r0, [r8]
   2900c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   29010:	ldr	r0, [r8, #4]
   29014:	bl	17b10 <__assert_fail@plt+0x5c7c>
   29018:	ldr	r0, [r8, #8]
   2901c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   29020:	ldr	r0, [r8, #12]
   29024:	bl	17b10 <__assert_fail@plt+0x5c7c>
   29028:	mov	r0, r8
   2902c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   29030:	ldr	r0, [fp, #12]
   29034:	str	r5, [r0]
   29038:	mov	r0, r4
   2903c:	sub	sp, fp, #28
   29040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29044:	mov	r0, #996	; 0x3e4
   29048:	bl	36fb4 <__assert_fail@plt+0x25120>
   2904c:	cmp	r0, #0
   29050:	beq	2906c <__assert_fail@plt+0x171d8>
   29054:	ldr	r1, [r6, #56]	; 0x38
   29058:	str	r1, [r0]
   2905c:	mov	r1, #0
   29060:	str	r1, [r6, #64]	; 0x40
   29064:	str	r0, [r6, #56]	; 0x38
   29068:	b	28e28 <__assert_fail@plt+0x16f94>
   2906c:	mov	r0, r7
   29070:	bl	17b10 <__assert_fail@plt+0x5c7c>
   29074:	ldr	r0, [r8]
   29078:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2907c:	ldr	r0, [r8, #4]
   29080:	bl	17b10 <__assert_fail@plt+0x5c7c>
   29084:	ldr	r0, [r8, #8]
   29088:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2908c:	ldr	r0, [r8, #12]
   29090:	bl	17b10 <__assert_fail@plt+0x5c7c>
   29094:	mov	r0, r8
   29098:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2909c:	ldr	r1, [fp, #12]
   290a0:	mov	r0, #12
   290a4:	str	r0, [r1]
   290a8:	mov	r0, r4
   290ac:	sub	sp, fp, #28
   290b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   290b4:	mov	r0, #996	; 0x3e4
   290b8:	bl	36fb4 <__assert_fail@plt+0x25120>
   290bc:	cmp	r0, #0
   290c0:	beq	28fb8 <__assert_fail@plt+0x17124>
   290c4:	ldr	r1, [r6, #56]	; 0x38
   290c8:	str	r1, [r0]
   290cc:	mov	r1, #0
   290d0:	str	r1, [r6, #64]	; 0x40
   290d4:	str	r0, [r6, #56]	; 0x38
   290d8:	b	28e74 <__assert_fail@plt+0x16fe0>
   290dc:	push	{fp, lr}
   290e0:	mov	fp, sp
   290e4:	ldr	ip, [r1, #40]	; 0x28
   290e8:	ldr	r3, [r1, #56]	; 0x38
   290ec:	cmp	r3, ip
   290f0:	ble	29170 <__assert_fail@plt+0x172dc>
   290f4:	ldr	r3, [r1, #4]
   290f8:	ldrb	lr, [r3, ip]
   290fc:	strb	lr, [r0]
   29100:	ldr	r3, [r1, #80]	; 0x50
   29104:	cmp	r3, #2
   29108:	blt	2912c <__assert_fail@plt+0x17298>
   2910c:	ldr	r3, [r1, #28]
   29110:	ldr	ip, [r1, #40]	; 0x28
   29114:	cmp	ip, r3
   29118:	beq	2912c <__assert_fail@plt+0x17298>
   2911c:	ldr	r3, [r1, #8]
   29120:	ldr	r3, [r3, ip, lsl #2]
   29124:	cmn	r3, #1
   29128:	beq	29244 <__assert_fail@plt+0x173b0>
   2912c:	tst	r2, #1
   29130:	beq	29184 <__assert_fail@plt+0x172f0>
   29134:	cmp	lr, #92	; 0x5c
   29138:	bne	29184 <__assert_fail@plt+0x172f0>
   2913c:	ldr	r2, [r1, #40]	; 0x28
   29140:	ldr	r3, [r1, #48]	; 0x30
   29144:	add	r2, r2, #1
   29148:	cmp	r2, r3
   2914c:	bge	29244 <__assert_fail@plt+0x173b0>
   29150:	str	r2, [r1, #40]	; 0x28
   29154:	ldr	r1, [r1, #4]
   29158:	ldrb	r2, [r1, r2]
   2915c:	mov	r1, #1
   29160:	strb	r1, [r0, #4]
   29164:	strb	r2, [r0]
   29168:	mov	r0, r1
   2916c:	pop	{fp, pc}
   29170:	mov	r1, #2
   29174:	strb	r1, [r0, #4]
   29178:	mov	r1, #0
   2917c:	mov	r0, r1
   29180:	pop	{fp, pc}
   29184:	cmp	lr, #92	; 0x5c
   29188:	bgt	291e8 <__assert_fail@plt+0x17354>
   2918c:	cmp	lr, #45	; 0x2d
   29190:	beq	2920c <__assert_fail@plt+0x17378>
   29194:	cmp	lr, #91	; 0x5b
   29198:	bne	29244 <__assert_fail@plt+0x173b0>
   2919c:	ldr	r3, [r1, #40]	; 0x28
   291a0:	ldr	ip, [r1, #48]	; 0x30
   291a4:	add	r3, r3, #1
   291a8:	cmp	r3, ip
   291ac:	bge	29234 <__assert_fail@plt+0x173a0>
   291b0:	ldr	r1, [r1, #4]
   291b4:	ldrb	r1, [r1, r3]
   291b8:	cmp	r1, #61	; 0x3d
   291bc:	strb	r1, [r0]
   291c0:	beq	29254 <__assert_fail@plt+0x173c0>
   291c4:	cmp	r1, #58	; 0x3a
   291c8:	beq	29268 <__assert_fail@plt+0x173d4>
   291cc:	cmp	r1, #46	; 0x2e
   291d0:	bne	2923c <__assert_fail@plt+0x173a8>
   291d4:	mov	r1, #26
   291d8:	strb	r1, [r0, #4]
   291dc:	mov	r1, #2
   291e0:	mov	r0, r1
   291e4:	pop	{fp, pc}
   291e8:	cmp	lr, #93	; 0x5d
   291ec:	beq	29220 <__assert_fail@plt+0x1738c>
   291f0:	cmp	lr, #94	; 0x5e
   291f4:	bne	29244 <__assert_fail@plt+0x173b0>
   291f8:	mov	r1, #25
   291fc:	strb	r1, [r0, #4]
   29200:	mov	r1, #1
   29204:	mov	r0, r1
   29208:	pop	{fp, pc}
   2920c:	mov	r1, #22
   29210:	strb	r1, [r0, #4]
   29214:	mov	r1, #1
   29218:	mov	r0, r1
   2921c:	pop	{fp, pc}
   29220:	mov	r1, #21
   29224:	strb	r1, [r0, #4]
   29228:	mov	r1, #1
   2922c:	mov	r0, r1
   29230:	pop	{fp, pc}
   29234:	mov	r1, #0
   29238:	strb	r1, [r0]
   2923c:	mov	r1, #91	; 0x5b
   29240:	strb	r1, [r0]
   29244:	mov	r1, #1
   29248:	strb	r1, [r0, #4]
   2924c:	mov	r0, r1
   29250:	pop	{fp, pc}
   29254:	mov	r1, #28
   29258:	strb	r1, [r0, #4]
   2925c:	mov	r1, #2
   29260:	mov	r0, r1
   29264:	pop	{fp, pc}
   29268:	tst	r2, #4
   2926c:	beq	2923c <__assert_fail@plt+0x173a8>
   29270:	mov	r1, #30
   29274:	strb	r1, [r0, #4]
   29278:	mov	r1, #2
   2927c:	mov	r0, r1
   29280:	pop	{fp, pc}
   29284:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   29288:	add	fp, sp, #24
   2928c:	sub	sp, sp, #8
   29290:	mov	r5, r2
   29294:	ldr	r2, [r1, #80]	; 0x50
   29298:	mov	r9, r0
   2929c:	ldr	r0, [r1, #40]	; 0x28
   292a0:	cmp	r2, #1
   292a4:	beq	29314 <__assert_fail@plt+0x17480>
   292a8:	ldr	r4, [r1, #28]
   292ac:	add	r2, r0, #1
   292b0:	cmp	r2, r4
   292b4:	bge	29314 <__assert_fail@plt+0x17480>
   292b8:	ldr	ip, [r1, #8]
   292bc:	mov	r2, #1
   292c0:	add	r6, ip, r0, lsl #2
   292c4:	ldr	r7, [r6, r2, lsl #2]
   292c8:	cmn	r7, #1
   292cc:	bne	292e4 <__assert_fail@plt+0x17450>
   292d0:	add	r2, r2, #1
   292d4:	add	r7, r0, r2
   292d8:	cmp	r7, r4
   292dc:	blt	292c4 <__assert_fail@plt+0x17430>
   292e0:	b	292ec <__assert_fail@plt+0x17458>
   292e4:	cmp	r2, #2
   292e8:	bcc	29314 <__assert_fail@plt+0x17480>
   292ec:	mov	r3, #1
   292f0:	str	r3, [r9]
   292f4:	ldr	r0, [ip, r0, lsl #2]
   292f8:	str	r0, [r9, #4]
   292fc:	ldr	r0, [r1, #40]	; 0x28
   29300:	add	r0, r0, r2
   29304:	str	r0, [r1, #40]	; 0x28
   29308:	mov	r0, #0
   2930c:	sub	sp, fp, #24
   29310:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29314:	add	r2, r0, r3
   29318:	str	r2, [r1, #40]	; 0x28
   2931c:	ldrb	r6, [r5, #4]
   29320:	sub	r0, r6, #22
   29324:	cmp	r0, #8
   29328:	bhi	29570 <__assert_fail@plt+0x176dc>
   2932c:	add	r3, pc, #0
   29330:	ldr	pc, [r3, r0, lsl #2]
   29334:	andeq	r9, r2, r8, asr #10
   29338:	andeq	r9, r2, r0, ror r5
   2933c:	andeq	r9, r2, r0, ror r5
   29340:	andeq	r9, r2, r0, ror r5
   29344:	andeq	r9, r2, r8, asr r3
   29348:	andeq	r9, r2, r0, ror r5
   2934c:	andeq	r9, r2, r8, asr r3
   29350:	andeq	r9, r2, r0, ror r5
   29354:	andeq	r9, r2, r8, asr r3
   29358:	ldr	r3, [r1, #56]	; 0x38
   2935c:	mov	r0, #7
   29360:	cmp	r3, r2
   29364:	ble	29580 <__assert_fail@plt+0x176ec>
   29368:	ldrb	r3, [r5]
   2936c:	mov	r2, #0
   29370:	uxtb	r7, r6
   29374:	cmp	r7, #30
   29378:	bne	293a0 <__assert_fail@plt+0x1750c>
   2937c:	b	29394 <__assert_fail@plt+0x17500>
   29380:	ldrb	r6, [r5, #4]
   29384:	add	r2, r2, #1
   29388:	uxtb	r7, r6
   2938c:	cmp	r7, #30
   29390:	bne	293a0 <__assert_fail@plt+0x1750c>
   29394:	ldrb	r7, [r1, #75]	; 0x4b
   29398:	cmp	r7, #0
   2939c:	bne	293f0 <__assert_fail@plt+0x1755c>
   293a0:	ldr	r4, [r1, #40]	; 0x28
   293a4:	ldr	r7, [r1, #4]
   293a8:	add	r6, r4, #1
   293ac:	str	r6, [r1, #40]	; 0x28
   293b0:	ldrb	r4, [r7, r4]
   293b4:	ldr	r7, [r1, #56]	; 0x38
   293b8:	cmp	r7, r6
   293bc:	ble	29580 <__assert_fail@plt+0x176ec>
   293c0:	uxtb	r7, r4
   293c4:	cmp	r7, r3
   293c8:	bne	293dc <__assert_fail@plt+0x17548>
   293cc:	ldr	r7, [r1, #4]
   293d0:	ldrb	r7, [r7, r6]
   293d4:	cmp	r7, #93	; 0x5d
   293d8:	beq	294e8 <__assert_fail@plt+0x17654>
   293dc:	ldr	r7, [r9, #4]
   293e0:	cmp	r2, #30
   293e4:	strb	r4, [r7, r2]
   293e8:	bls	29380 <__assert_fail@plt+0x174ec>
   293ec:	b	29580 <__assert_fail@plt+0x176ec>
   293f0:	ldrb	r7, [r1, #76]	; 0x4c
   293f4:	cmp	r7, #0
   293f8:	beq	2949c <__assert_fail@plt+0x17608>
   293fc:	ldr	lr, [r1, #28]
   29400:	ldr	ip, [r1, #40]	; 0x28
   29404:	cmp	ip, lr
   29408:	beq	2941c <__assert_fail@plt+0x17588>
   2940c:	ldr	r4, [r1, #8]
   29410:	ldr	r4, [r4, ip, lsl #2]
   29414:	cmn	r4, #1
   29418:	beq	294c8 <__assert_fail@plt+0x17634>
   2941c:	ldr	r6, [r1, #12]
   29420:	ldr	r7, [r1, #24]
   29424:	ldr	r4, [r1]
   29428:	ldr	r6, [r6, ip, lsl #2]
   2942c:	add	r6, r7, r6
   29430:	add	r4, r4, r6
   29434:	ldrsb	r4, [r4]
   29438:	cmn	r4, #1
   2943c:	ble	294c8 <__assert_fail@plt+0x17634>
   29440:	ldr	r7, [r1, #80]	; 0x50
   29444:	mov	r6, #1
   29448:	cmp	r7, #1
   2944c:	beq	29484 <__assert_fail@plt+0x175f0>
   29450:	add	r7, ip, #1
   29454:	cmp	r7, lr
   29458:	bge	29484 <__assert_fail@plt+0x175f0>
   2945c:	ldr	r6, [r1, #8]
   29460:	add	r8, r6, ip, lsl #2
   29464:	mov	r6, #1
   29468:	ldr	r7, [r8, r6, lsl #2]
   2946c:	cmn	r7, #1
   29470:	bne	29484 <__assert_fail@plt+0x175f0>
   29474:	add	r6, r6, #1
   29478:	add	r7, ip, r6
   2947c:	cmp	r7, lr
   29480:	blt	29468 <__assert_fail@plt+0x175d4>
   29484:	add	r6, r6, ip
   29488:	str	r6, [r1, #40]	; 0x28
   2948c:	ldr	r7, [r1, #56]	; 0x38
   29490:	cmp	r7, r6
   29494:	bgt	293c0 <__assert_fail@plt+0x1752c>
   29498:	b	29580 <__assert_fail@plt+0x176ec>
   2949c:	ldr	r7, [r1, #40]	; 0x28
   294a0:	ldr	r4, [r1, #24]
   294a4:	ldr	ip, [r1]
   294a8:	add	r6, r7, #1
   294ac:	add	r7, r7, r4
   294b0:	str	r6, [r1, #40]	; 0x28
   294b4:	ldrb	r4, [ip, r7]
   294b8:	ldr	r7, [r1, #56]	; 0x38
   294bc:	cmp	r7, r6
   294c0:	bgt	293c0 <__assert_fail@plt+0x1752c>
   294c4:	b	29580 <__assert_fail@plt+0x176ec>
   294c8:	add	r6, ip, #1
   294cc:	str	r6, [r1, #40]	; 0x28
   294d0:	ldr	r7, [r1, #4]
   294d4:	ldrb	r4, [r7, ip]
   294d8:	ldr	r7, [r1, #56]	; 0x38
   294dc:	cmp	r7, r6
   294e0:	bgt	293c0 <__assert_fail@plt+0x1752c>
   294e4:	b	29580 <__assert_fail@plt+0x176ec>
   294e8:	add	r0, r6, #1
   294ec:	str	r0, [r1, #40]	; 0x28
   294f0:	mov	r0, #0
   294f4:	ldr	r1, [r9, #4]
   294f8:	strb	r0, [r1, r2]
   294fc:	ldrb	r1, [r5, #4]
   29500:	cmp	r1, #30
   29504:	beq	29528 <__assert_fail@plt+0x17694>
   29508:	cmp	r1, #28
   2950c:	beq	29538 <__assert_fail@plt+0x176a4>
   29510:	cmp	r1, #26
   29514:	bne	29580 <__assert_fail@plt+0x176ec>
   29518:	mov	r1, #3
   2951c:	str	r1, [r9]
   29520:	sub	sp, fp, #24
   29524:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29528:	mov	r1, #4
   2952c:	str	r1, [r9]
   29530:	sub	sp, fp, #24
   29534:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29538:	mov	r1, #2
   2953c:	str	r1, [r9]
   29540:	sub	sp, fp, #24
   29544:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29548:	ldr	r0, [fp, #12]
   2954c:	cmp	r0, #0
   29550:	bne	29570 <__assert_fail@plt+0x176dc>
   29554:	ldr	r2, [fp, #8]
   29558:	mov	r0, sp
   2955c:	bl	290dc <__assert_fail@plt+0x17248>
   29560:	ldrb	r1, [sp, #4]
   29564:	mov	r0, #11
   29568:	cmp	r1, #21
   2956c:	bne	29580 <__assert_fail@plt+0x176ec>
   29570:	mov	r0, #0
   29574:	str	r0, [r9]
   29578:	ldrb	r1, [r5]
   2957c:	strb	r1, [r9, #4]
   29580:	sub	sp, fp, #24
   29584:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29588:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2958c:	add	fp, sp, #24
   29590:	mov	r8, r0
   29594:	ldrb	r0, [fp, #14]
   29598:	ldr	r6, [fp, #8]
   2959c:	mov	r5, r3
   295a0:	mov	r7, r2
   295a4:	mov	r4, r1
   295a8:	tst	r0, #64	; 0x40
   295ac:	beq	295e8 <__assert_fail@plt+0x17754>
   295b0:	movw	r1, #42802	; 0xa732
   295b4:	mov	r0, r6
   295b8:	movt	r1, #3
   295bc:	bl	11a14 <strcmp@plt>
   295c0:	cmp	r0, #0
   295c4:	beq	295e0 <__assert_fail@plt+0x1774c>
   295c8:	movw	r1, #42808	; 0xa738
   295cc:	mov	r0, r6
   295d0:	movt	r1, #3
   295d4:	bl	11a14 <strcmp@plt>
   295d8:	cmp	r0, #0
   295dc:	bne	295e8 <__assert_fail@plt+0x17754>
   295e0:	movw	r6, #42814	; 0xa73e
   295e4:	movt	r6, #3
   295e8:	ldr	r0, [r5]
   295ec:	ldr	r1, [r7, #36]	; 0x24
   295f0:	cmp	r0, r1
   295f4:	beq	29b44 <__assert_fail@plt+0x17cb0>
   295f8:	mov	r0, r6
   295fc:	bl	119cc <wctype@plt>
   29600:	ldr	r2, [r7, #36]	; 0x24
   29604:	ldr	r1, [r7, #12]
   29608:	add	r3, r2, #1
   2960c:	str	r3, [r7, #36]	; 0x24
   29610:	str	r0, [r1, r2, lsl #2]
   29614:	movw	r1, #42790	; 0xa726
   29618:	mov	r0, r6
   2961c:	movt	r1, #3
   29620:	bl	11a14 <strcmp@plt>
   29624:	cmp	r0, #0
   29628:	beq	2978c <__assert_fail@plt+0x178f8>
   2962c:	movw	r1, #42820	; 0xa744
   29630:	mov	r0, r6
   29634:	movt	r1, #3
   29638:	bl	11a14 <strcmp@plt>
   2963c:	cmp	r0, #0
   29640:	beq	297e8 <__assert_fail@plt+0x17954>
   29644:	movw	r1, #42808	; 0xa738
   29648:	mov	r0, r6
   2964c:	movt	r1, #3
   29650:	bl	11a14 <strcmp@plt>
   29654:	cmp	r0, #0
   29658:	beq	29844 <__assert_fail@plt+0x179b0>
   2965c:	movw	r1, #42796	; 0xa72c
   29660:	mov	r0, r6
   29664:	movt	r1, #3
   29668:	bl	11a14 <strcmp@plt>
   2966c:	cmp	r0, #0
   29670:	beq	298a0 <__assert_fail@plt+0x17a0c>
   29674:	movw	r1, #42814	; 0xa73e
   29678:	mov	r0, r6
   2967c:	movt	r1, #3
   29680:	bl	11a14 <strcmp@plt>
   29684:	cmp	r0, #0
   29688:	beq	298fc <__assert_fail@plt+0x17a68>
   2968c:	movw	r1, #42851	; 0xa763
   29690:	mov	r0, r6
   29694:	movt	r1, #3
   29698:	bl	11a14 <strcmp@plt>
   2969c:	cmp	r0, #0
   296a0:	beq	29958 <__assert_fail@plt+0x17ac4>
   296a4:	movw	r1, #42826	; 0xa74a
   296a8:	mov	r0, r6
   296ac:	movt	r1, #3
   296b0:	bl	11a14 <strcmp@plt>
   296b4:	cmp	r0, #0
   296b8:	beq	299b4 <__assert_fail@plt+0x17b20>
   296bc:	movw	r1, #42802	; 0xa732
   296c0:	mov	r0, r6
   296c4:	movt	r1, #3
   296c8:	bl	11a14 <strcmp@plt>
   296cc:	cmp	r0, #0
   296d0:	beq	29a04 <__assert_fail@plt+0x17b70>
   296d4:	movw	r1, #42832	; 0xa750
   296d8:	mov	r0, r6
   296dc:	movt	r1, #3
   296e0:	bl	11a14 <strcmp@plt>
   296e4:	cmp	r0, #0
   296e8:	beq	29a54 <__assert_fail@plt+0x17bc0>
   296ec:	movw	r1, #42838	; 0xa756
   296f0:	mov	r0, r6
   296f4:	movt	r1, #3
   296f8:	bl	11a14 <strcmp@plt>
   296fc:	cmp	r0, #0
   29700:	beq	29aa4 <__assert_fail@plt+0x17c10>
   29704:	movw	r1, #42844	; 0xa75c
   29708:	mov	r0, r6
   2970c:	movt	r1, #3
   29710:	bl	11a14 <strcmp@plt>
   29714:	cmp	r0, #0
   29718:	beq	29af4 <__assert_fail@plt+0x17c60>
   2971c:	movw	r1, #42850	; 0xa762
   29720:	mov	r0, r6
   29724:	movt	r1, #3
   29728:	bl	11a14 <strcmp@plt>
   2972c:	mov	r1, r0
   29730:	mov	r0, #4
   29734:	cmp	r1, #0
   29738:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   2973c:	bl	11c54 <__ctype_b_loc@plt>
   29740:	ldr	r1, [r0]
   29744:	mov	r2, #0
   29748:	mov	r3, #1
   2974c:	cmp	r8, #0
   29750:	bne	29cac <__assert_fail@plt+0x17e18>
   29754:	ldrb	r0, [r1, #1]
   29758:	tst	r0, #16
   2975c:	beq	29774 <__assert_fail@plt+0x178e0>
   29760:	ubfx	r0, r2, #5, #3
   29764:	and	r6, r2, #31
   29768:	ldr	r7, [r4, r0, lsl #2]
   2976c:	orr	r7, r7, r3, lsl r6
   29770:	str	r7, [r4, r0, lsl #2]
   29774:	add	r2, r2, #1
   29778:	add	r1, r1, #2
   2977c:	mov	r0, #0
   29780:	cmp	r2, #256	; 0x100
   29784:	bne	29754 <__assert_fail@plt+0x178c0>
   29788:	b	29b40 <__assert_fail@plt+0x17cac>
   2978c:	bl	11c54 <__ctype_b_loc@plt>
   29790:	ldr	r1, [r0]
   29794:	cmp	r8, #0
   29798:	bne	29be8 <__assert_fail@plt+0x17d54>
   2979c:	mov	r0, #0
   297a0:	mov	r2, #1
   297a4:	ldrb	r3, [r1]
   297a8:	tst	r3, #8
   297ac:	bne	297d0 <__assert_fail@plt+0x1793c>
   297b0:	add	r0, r0, #1
   297b4:	add	r1, r1, #2
   297b8:	cmp	r0, #256	; 0x100
   297bc:	moveq	r0, #0
   297c0:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   297c4:	ldrb	r3, [r1]
   297c8:	tst	r3, #8
   297cc:	beq	297b0 <__assert_fail@plt+0x1791c>
   297d0:	ubfx	r3, r0, #5, #3
   297d4:	and	r6, r0, #31
   297d8:	ldr	r7, [r4, r3, lsl #2]
   297dc:	orr	r7, r7, r2, lsl r6
   297e0:	str	r7, [r4, r3, lsl #2]
   297e4:	b	297b0 <__assert_fail@plt+0x1791c>
   297e8:	bl	11c54 <__ctype_b_loc@plt>
   297ec:	ldr	r1, [r0]
   297f0:	cmp	r8, #0
   297f4:	bne	29c68 <__assert_fail@plt+0x17dd4>
   297f8:	mov	r0, #0
   297fc:	mov	r2, #1
   29800:	ldrb	r3, [r1]
   29804:	tst	r3, #2
   29808:	bne	2982c <__assert_fail@plt+0x17998>
   2980c:	add	r0, r0, #1
   29810:	add	r1, r1, #2
   29814:	cmp	r0, #256	; 0x100
   29818:	moveq	r0, #0
   2981c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   29820:	ldrb	r3, [r1]
   29824:	tst	r3, #2
   29828:	beq	2980c <__assert_fail@plt+0x17978>
   2982c:	ubfx	r3, r0, #5, #3
   29830:	and	r6, r0, #31
   29834:	ldr	r7, [r4, r3, lsl #2]
   29838:	orr	r7, r7, r2, lsl r6
   2983c:	str	r7, [r4, r3, lsl #2]
   29840:	b	2980c <__assert_fail@plt+0x17978>
   29844:	bl	11c54 <__ctype_b_loc@plt>
   29848:	ldr	r1, [r0]
   2984c:	cmp	r8, #0
   29850:	bne	29d24 <__assert_fail@plt+0x17e90>
   29854:	mov	r0, #0
   29858:	mov	r2, #1
   2985c:	ldrb	r3, [r1, #1]
   29860:	tst	r3, #2
   29864:	bne	29888 <__assert_fail@plt+0x179f4>
   29868:	add	r0, r0, #1
   2986c:	add	r1, r1, #2
   29870:	cmp	r0, #256	; 0x100
   29874:	moveq	r0, #0
   29878:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2987c:	ldrb	r3, [r1, #1]
   29880:	tst	r3, #2
   29884:	beq	29868 <__assert_fail@plt+0x179d4>
   29888:	ubfx	r3, r0, #5, #3
   2988c:	and	r6, r0, #31
   29890:	ldr	r7, [r4, r3, lsl #2]
   29894:	orr	r7, r7, r2, lsl r6
   29898:	str	r7, [r4, r3, lsl #2]
   2989c:	b	29868 <__assert_fail@plt+0x179d4>
   298a0:	bl	11c54 <__ctype_b_loc@plt>
   298a4:	ldr	r1, [r0]
   298a8:	cmp	r8, #0
   298ac:	bne	29da4 <__assert_fail@plt+0x17f10>
   298b0:	mov	r0, #0
   298b4:	mov	r2, #1
   298b8:	ldrb	r3, [r1, #1]
   298bc:	tst	r3, #32
   298c0:	bne	298e4 <__assert_fail@plt+0x17a50>
   298c4:	add	r0, r0, #1
   298c8:	add	r1, r1, #2
   298cc:	cmp	r0, #256	; 0x100
   298d0:	moveq	r0, #0
   298d4:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   298d8:	ldrb	r3, [r1, #1]
   298dc:	tst	r3, #32
   298e0:	beq	298c4 <__assert_fail@plt+0x17a30>
   298e4:	ubfx	r3, r0, #5, #3
   298e8:	and	r6, r0, #31
   298ec:	ldr	r7, [r4, r3, lsl #2]
   298f0:	orr	r7, r7, r2, lsl r6
   298f4:	str	r7, [r4, r3, lsl #2]
   298f8:	b	298c4 <__assert_fail@plt+0x17a30>
   298fc:	bl	11c54 <__ctype_b_loc@plt>
   29900:	ldr	r1, [r0]
   29904:	cmp	r8, #0
   29908:	bne	29de8 <__assert_fail@plt+0x17f54>
   2990c:	mov	r0, #0
   29910:	mov	r2, #1
   29914:	ldrb	r3, [r1, #1]
   29918:	tst	r3, #4
   2991c:	bne	29940 <__assert_fail@plt+0x17aac>
   29920:	add	r0, r0, #1
   29924:	add	r1, r1, #2
   29928:	cmp	r0, #256	; 0x100
   2992c:	moveq	r0, #0
   29930:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   29934:	ldrb	r3, [r1, #1]
   29938:	tst	r3, #4
   2993c:	beq	29920 <__assert_fail@plt+0x17a8c>
   29940:	ubfx	r3, r0, #5, #3
   29944:	and	r6, r0, #31
   29948:	ldr	r7, [r4, r3, lsl #2]
   2994c:	orr	r7, r7, r2, lsl r6
   29950:	str	r7, [r4, r3, lsl #2]
   29954:	b	29920 <__assert_fail@plt+0x17a8c>
   29958:	bl	11c54 <__ctype_b_loc@plt>
   2995c:	ldr	r1, [r0]
   29960:	cmp	r8, #0
   29964:	bne	29e2c <__assert_fail@plt+0x17f98>
   29968:	mov	r0, #0
   2996c:	mov	r2, #1
   29970:	ldrb	r3, [r1, #1]
   29974:	tst	r3, #8
   29978:	bne	2999c <__assert_fail@plt+0x17b08>
   2997c:	add	r0, r0, #1
   29980:	add	r1, r1, #2
   29984:	cmp	r0, #256	; 0x100
   29988:	moveq	r0, #0
   2998c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   29990:	ldrb	r3, [r1, #1]
   29994:	tst	r3, #8
   29998:	beq	2997c <__assert_fail@plt+0x17ae8>
   2999c:	ubfx	r3, r0, #5, #3
   299a0:	and	r6, r0, #31
   299a4:	ldr	r7, [r4, r3, lsl #2]
   299a8:	orr	r7, r7, r2, lsl r6
   299ac:	str	r7, [r4, r3, lsl #2]
   299b0:	b	2997c <__assert_fail@plt+0x17ae8>
   299b4:	bl	11c54 <__ctype_b_loc@plt>
   299b8:	ldr	r1, [r0]
   299bc:	mov	r2, #0
   299c0:	mov	r3, #1
   299c4:	cmp	r8, #0
   299c8:	bne	29b70 <__assert_fail@plt+0x17cdc>
   299cc:	ldrb	r0, [r1, #1]
   299d0:	tst	r0, #64	; 0x40
   299d4:	beq	299ec <__assert_fail@plt+0x17b58>
   299d8:	ubfx	r0, r2, #5, #3
   299dc:	and	r6, r2, #31
   299e0:	ldr	r7, [r4, r0, lsl #2]
   299e4:	orr	r7, r7, r3, lsl r6
   299e8:	str	r7, [r4, r0, lsl #2]
   299ec:	add	r2, r2, #1
   299f0:	add	r1, r1, #2
   299f4:	mov	r0, #0
   299f8:	cmp	r2, #256	; 0x100
   299fc:	bne	299cc <__assert_fail@plt+0x17b38>
   29a00:	b	29b40 <__assert_fail@plt+0x17cac>
   29a04:	bl	11c54 <__ctype_b_loc@plt>
   29a08:	ldr	r1, [r0]
   29a0c:	mov	r2, #0
   29a10:	mov	r3, #1
   29a14:	cmp	r8, #0
   29a18:	bne	29bac <__assert_fail@plt+0x17d18>
   29a1c:	ldrb	r0, [r1, #1]
   29a20:	tst	r0, #1
   29a24:	beq	29a3c <__assert_fail@plt+0x17ba8>
   29a28:	ubfx	r0, r2, #5, #3
   29a2c:	and	r6, r2, #31
   29a30:	ldr	r7, [r4, r0, lsl #2]
   29a34:	orr	r7, r7, r3, lsl r6
   29a38:	str	r7, [r4, r0, lsl #2]
   29a3c:	add	r2, r2, #1
   29a40:	add	r1, r1, #2
   29a44:	mov	r0, #0
   29a48:	cmp	r2, #256	; 0x100
   29a4c:	bne	29a1c <__assert_fail@plt+0x17b88>
   29a50:	b	29b40 <__assert_fail@plt+0x17cac>
   29a54:	bl	11c54 <__ctype_b_loc@plt>
   29a58:	ldr	r1, [r0]
   29a5c:	mov	r2, #0
   29a60:	mov	r3, #1
   29a64:	cmp	r8, #0
   29a68:	bne	29c2c <__assert_fail@plt+0x17d98>
   29a6c:	ldrb	r0, [r1]
   29a70:	tst	r0, #1
   29a74:	beq	29a8c <__assert_fail@plt+0x17bf8>
   29a78:	ubfx	r0, r2, #5, #3
   29a7c:	and	r6, r2, #31
   29a80:	ldr	r7, [r4, r0, lsl #2]
   29a84:	orr	r7, r7, r3, lsl r6
   29a88:	str	r7, [r4, r0, lsl #2]
   29a8c:	add	r2, r2, #1
   29a90:	add	r1, r1, #2
   29a94:	mov	r0, #0
   29a98:	cmp	r2, #256	; 0x100
   29a9c:	bne	29a6c <__assert_fail@plt+0x17bd8>
   29aa0:	b	29b40 <__assert_fail@plt+0x17cac>
   29aa4:	bl	11c54 <__ctype_b_loc@plt>
   29aa8:	ldr	r1, [r0]
   29aac:	mov	r2, #0
   29ab0:	mov	r3, #1
   29ab4:	cmp	r8, #0
   29ab8:	bne	29ce8 <__assert_fail@plt+0x17e54>
   29abc:	ldrsh	r0, [r1]
   29ac0:	cmn	r0, #1
   29ac4:	bgt	29adc <__assert_fail@plt+0x17c48>
   29ac8:	ubfx	r0, r2, #5, #3
   29acc:	and	r6, r2, #31
   29ad0:	ldr	r7, [r4, r0, lsl #2]
   29ad4:	orr	r7, r7, r3, lsl r6
   29ad8:	str	r7, [r4, r0, lsl #2]
   29adc:	add	r2, r2, #1
   29ae0:	add	r1, r1, #2
   29ae4:	mov	r0, #0
   29ae8:	cmp	r2, #256	; 0x100
   29aec:	bne	29abc <__assert_fail@plt+0x17c28>
   29af0:	b	29b40 <__assert_fail@plt+0x17cac>
   29af4:	bl	11c54 <__ctype_b_loc@plt>
   29af8:	ldr	r1, [r0]
   29afc:	mov	r2, #0
   29b00:	mov	r3, #1
   29b04:	cmp	r8, #0
   29b08:	bne	29d68 <__assert_fail@plt+0x17ed4>
   29b0c:	ldrb	r0, [r1]
   29b10:	tst	r0, #4
   29b14:	beq	29b2c <__assert_fail@plt+0x17c98>
   29b18:	ubfx	r0, r2, #5, #3
   29b1c:	and	r6, r2, #31
   29b20:	ldr	r7, [r4, r0, lsl #2]
   29b24:	orr	r7, r7, r3, lsl r6
   29b28:	str	r7, [r4, r0, lsl #2]
   29b2c:	add	r2, r2, #1
   29b30:	add	r1, r1, #2
   29b34:	mov	r0, #0
   29b38:	cmp	r2, #256	; 0x100
   29b3c:	bne	29b0c <__assert_fail@plt+0x17c78>
   29b40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29b44:	mov	r1, #1
   29b48:	orr	r9, r1, r0, lsl #1
   29b4c:	ldr	r0, [r7, #12]
   29b50:	lsl	r1, r9, #2
   29b54:	bl	36fe4 <__assert_fail@plt+0x25150>
   29b58:	cmp	r0, #0
   29b5c:	moveq	r0, #12
   29b60:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   29b64:	str	r0, [r7, #12]
   29b68:	str	r9, [r5]
   29b6c:	b	295f8 <__assert_fail@plt+0x17764>
   29b70:	ldrb	r0, [r1, #1]
   29b74:	tst	r0, #64	; 0x40
   29b78:	beq	29b94 <__assert_fail@plt+0x17d00>
   29b7c:	ldrb	r0, [r8, r2]
   29b80:	ubfx	r7, r0, #5, #3
   29b84:	and	r0, r0, #31
   29b88:	ldr	r6, [r4, r7, lsl #2]
   29b8c:	orr	r0, r6, r3, lsl r0
   29b90:	str	r0, [r4, r7, lsl #2]
   29b94:	add	r2, r2, #1
   29b98:	add	r1, r1, #2
   29b9c:	mov	r0, #0
   29ba0:	cmp	r2, #256	; 0x100
   29ba4:	bne	29b70 <__assert_fail@plt+0x17cdc>
   29ba8:	b	29b40 <__assert_fail@plt+0x17cac>
   29bac:	ldrb	r0, [r1, #1]
   29bb0:	tst	r0, #1
   29bb4:	beq	29bd0 <__assert_fail@plt+0x17d3c>
   29bb8:	ldrb	r0, [r8, r2]
   29bbc:	ubfx	r7, r0, #5, #3
   29bc0:	and	r0, r0, #31
   29bc4:	ldr	r6, [r4, r7, lsl #2]
   29bc8:	orr	r0, r6, r3, lsl r0
   29bcc:	str	r0, [r4, r7, lsl #2]
   29bd0:	add	r2, r2, #1
   29bd4:	add	r1, r1, #2
   29bd8:	mov	r0, #0
   29bdc:	cmp	r2, #256	; 0x100
   29be0:	bne	29bac <__assert_fail@plt+0x17d18>
   29be4:	b	29b40 <__assert_fail@plt+0x17cac>
   29be8:	mov	r2, #0
   29bec:	mov	r3, #1
   29bf0:	ldrb	r0, [r1]
   29bf4:	tst	r0, #8
   29bf8:	beq	29c14 <__assert_fail@plt+0x17d80>
   29bfc:	ldrb	r0, [r8, r2]
   29c00:	ubfx	r7, r0, #5, #3
   29c04:	and	r0, r0, #31
   29c08:	ldr	r6, [r4, r7, lsl #2]
   29c0c:	orr	r0, r6, r3, lsl r0
   29c10:	str	r0, [r4, r7, lsl #2]
   29c14:	add	r2, r2, #1
   29c18:	add	r1, r1, #2
   29c1c:	mov	r0, #0
   29c20:	cmp	r2, #256	; 0x100
   29c24:	bne	29bf0 <__assert_fail@plt+0x17d5c>
   29c28:	b	29b40 <__assert_fail@plt+0x17cac>
   29c2c:	ldrb	r0, [r1]
   29c30:	tst	r0, #1
   29c34:	beq	29c50 <__assert_fail@plt+0x17dbc>
   29c38:	ldrb	r0, [r8, r2]
   29c3c:	ubfx	r7, r0, #5, #3
   29c40:	and	r0, r0, #31
   29c44:	ldr	r6, [r4, r7, lsl #2]
   29c48:	orr	r0, r6, r3, lsl r0
   29c4c:	str	r0, [r4, r7, lsl #2]
   29c50:	add	r2, r2, #1
   29c54:	add	r1, r1, #2
   29c58:	mov	r0, #0
   29c5c:	cmp	r2, #256	; 0x100
   29c60:	bne	29c2c <__assert_fail@plt+0x17d98>
   29c64:	b	29b40 <__assert_fail@plt+0x17cac>
   29c68:	mov	r2, #0
   29c6c:	mov	r3, #1
   29c70:	ldrb	r0, [r1]
   29c74:	tst	r0, #2
   29c78:	beq	29c94 <__assert_fail@plt+0x17e00>
   29c7c:	ldrb	r0, [r8, r2]
   29c80:	ubfx	r7, r0, #5, #3
   29c84:	and	r0, r0, #31
   29c88:	ldr	r6, [r4, r7, lsl #2]
   29c8c:	orr	r0, r6, r3, lsl r0
   29c90:	str	r0, [r4, r7, lsl #2]
   29c94:	add	r2, r2, #1
   29c98:	add	r1, r1, #2
   29c9c:	mov	r0, #0
   29ca0:	cmp	r2, #256	; 0x100
   29ca4:	bne	29c70 <__assert_fail@plt+0x17ddc>
   29ca8:	b	29b40 <__assert_fail@plt+0x17cac>
   29cac:	ldrb	r0, [r1, #1]
   29cb0:	tst	r0, #16
   29cb4:	beq	29cd0 <__assert_fail@plt+0x17e3c>
   29cb8:	ldrb	r0, [r8, r2]
   29cbc:	ubfx	r7, r0, #5, #3
   29cc0:	and	r0, r0, #31
   29cc4:	ldr	r6, [r4, r7, lsl #2]
   29cc8:	orr	r0, r6, r3, lsl r0
   29ccc:	str	r0, [r4, r7, lsl #2]
   29cd0:	add	r2, r2, #1
   29cd4:	add	r1, r1, #2
   29cd8:	mov	r0, #0
   29cdc:	cmp	r2, #256	; 0x100
   29ce0:	bne	29cac <__assert_fail@plt+0x17e18>
   29ce4:	b	29b40 <__assert_fail@plt+0x17cac>
   29ce8:	ldrsh	r0, [r1]
   29cec:	cmn	r0, #1
   29cf0:	bgt	29d0c <__assert_fail@plt+0x17e78>
   29cf4:	ldrb	r0, [r8, r2]
   29cf8:	ubfx	r7, r0, #5, #3
   29cfc:	and	r0, r0, #31
   29d00:	ldr	r6, [r4, r7, lsl #2]
   29d04:	orr	r0, r6, r3, lsl r0
   29d08:	str	r0, [r4, r7, lsl #2]
   29d0c:	add	r2, r2, #1
   29d10:	add	r1, r1, #2
   29d14:	mov	r0, #0
   29d18:	cmp	r2, #256	; 0x100
   29d1c:	bne	29ce8 <__assert_fail@plt+0x17e54>
   29d20:	b	29b40 <__assert_fail@plt+0x17cac>
   29d24:	mov	r2, #0
   29d28:	mov	r3, #1
   29d2c:	ldrb	r0, [r1, #1]
   29d30:	tst	r0, #2
   29d34:	beq	29d50 <__assert_fail@plt+0x17ebc>
   29d38:	ldrb	r0, [r8, r2]
   29d3c:	ubfx	r7, r0, #5, #3
   29d40:	and	r0, r0, #31
   29d44:	ldr	r6, [r4, r7, lsl #2]
   29d48:	orr	r0, r6, r3, lsl r0
   29d4c:	str	r0, [r4, r7, lsl #2]
   29d50:	add	r2, r2, #1
   29d54:	add	r1, r1, #2
   29d58:	mov	r0, #0
   29d5c:	cmp	r2, #256	; 0x100
   29d60:	bne	29d2c <__assert_fail@plt+0x17e98>
   29d64:	b	29b40 <__assert_fail@plt+0x17cac>
   29d68:	ldrb	r0, [r1]
   29d6c:	tst	r0, #4
   29d70:	beq	29d8c <__assert_fail@plt+0x17ef8>
   29d74:	ldrb	r0, [r8, r2]
   29d78:	ubfx	r7, r0, #5, #3
   29d7c:	and	r0, r0, #31
   29d80:	ldr	r6, [r4, r7, lsl #2]
   29d84:	orr	r0, r6, r3, lsl r0
   29d88:	str	r0, [r4, r7, lsl #2]
   29d8c:	add	r2, r2, #1
   29d90:	add	r1, r1, #2
   29d94:	mov	r0, #0
   29d98:	cmp	r2, #256	; 0x100
   29d9c:	bne	29d68 <__assert_fail@plt+0x17ed4>
   29da0:	b	29b40 <__assert_fail@plt+0x17cac>
   29da4:	mov	r2, #0
   29da8:	mov	r3, #1
   29dac:	ldrb	r0, [r1, #1]
   29db0:	tst	r0, #32
   29db4:	beq	29dd0 <__assert_fail@plt+0x17f3c>
   29db8:	ldrb	r0, [r8, r2]
   29dbc:	ubfx	r7, r0, #5, #3
   29dc0:	and	r0, r0, #31
   29dc4:	ldr	r6, [r4, r7, lsl #2]
   29dc8:	orr	r0, r6, r3, lsl r0
   29dcc:	str	r0, [r4, r7, lsl #2]
   29dd0:	add	r2, r2, #1
   29dd4:	add	r1, r1, #2
   29dd8:	mov	r0, #0
   29ddc:	cmp	r2, #256	; 0x100
   29de0:	bne	29dac <__assert_fail@plt+0x17f18>
   29de4:	b	29b40 <__assert_fail@plt+0x17cac>
   29de8:	mov	r2, #0
   29dec:	mov	r3, #1
   29df0:	ldrb	r0, [r1, #1]
   29df4:	tst	r0, #4
   29df8:	beq	29e14 <__assert_fail@plt+0x17f80>
   29dfc:	ldrb	r0, [r8, r2]
   29e00:	ubfx	r7, r0, #5, #3
   29e04:	and	r0, r0, #31
   29e08:	ldr	r6, [r4, r7, lsl #2]
   29e0c:	orr	r0, r6, r3, lsl r0
   29e10:	str	r0, [r4, r7, lsl #2]
   29e14:	add	r2, r2, #1
   29e18:	add	r1, r1, #2
   29e1c:	mov	r0, #0
   29e20:	cmp	r2, #256	; 0x100
   29e24:	bne	29df0 <__assert_fail@plt+0x17f5c>
   29e28:	b	29b40 <__assert_fail@plt+0x17cac>
   29e2c:	mov	r2, #0
   29e30:	mov	r3, #1
   29e34:	ldrb	r0, [r1, #1]
   29e38:	tst	r0, #8
   29e3c:	beq	29e58 <__assert_fail@plt+0x17fc4>
   29e40:	ldrb	r0, [r8, r2]
   29e44:	ubfx	r7, r0, #5, #3
   29e48:	and	r0, r0, #31
   29e4c:	ldr	r6, [r4, r7, lsl #2]
   29e50:	orr	r0, r6, r3, lsl r0
   29e54:	str	r0, [r4, r7, lsl #2]
   29e58:	add	r2, r2, #1
   29e5c:	add	r1, r1, #2
   29e60:	mov	r0, #0
   29e64:	cmp	r2, #256	; 0x100
   29e68:	bne	29e34 <__assert_fail@plt+0x17fa0>
   29e6c:	b	29b40 <__assert_fail@plt+0x17cac>
   29e70:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   29e74:	add	fp, sp, #24
   29e78:	ldrb	r3, [r1, #24]
   29e7c:	ldr	r2, [r1, #28]
   29e80:	mov	r4, #0
   29e84:	sub	r3, r3, #2
   29e88:	cmp	r3, #14
   29e8c:	bhi	29fb0 <__assert_fail@plt+0x1811c>
   29e90:	add	r7, pc, #0
   29e94:	ldr	pc, [r7, r3, lsl #2]
   29e98:	andeq	r9, r2, r4, ror #31
   29e9c:			; <UNDEFINED> instruction: 0x00029fb0
   29ea0:	andeq	r9, r2, r8, asr #31
   29ea4:			; <UNDEFINED> instruction: 0x00029fb0
   29ea8:			; <UNDEFINED> instruction: 0x00029fb0
   29eac:			; <UNDEFINED> instruction: 0x00029fb0
   29eb0:	ldrdeq	r9, [r2], -r4
   29eb4:	ldrdeq	r9, [r2], -r4
   29eb8:	andeq	r9, r2, r8, lsr #30
   29ebc:	andeq	r9, r2, r8, lsr #30
   29ec0:	ldrdeq	r9, [r2], -r4
   29ec4:			; <UNDEFINED> instruction: 0x00029fb0
   29ec8:			; <UNDEFINED> instruction: 0x00029fb0
   29ecc:			; <UNDEFINED> instruction: 0x00029fb0
   29ed0:	andeq	r9, r2, r4, ror #31
   29ed4:	ldr	r1, [r1, #16]
   29ed8:	ldr	r5, [r1, #28]
   29edc:	ldr	r6, [r0, #20]
   29ee0:	add	r0, r2, r2, lsl #1
   29ee4:	mov	r1, #1
   29ee8:	str	r1, [r6, r0, lsl #2]!
   29eec:	mov	r0, #4
   29ef0:	mov	r7, r6
   29ef4:	str	r1, [r7, #4]!
   29ef8:	bl	36fb4 <__assert_fail@plt+0x25120>
   29efc:	cmp	r0, #0
   29f00:	str	r0, [r6, #8]
   29f04:	strne	r5, [r0]
   29f08:	movne	r0, r4
   29f0c:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   29f10:	mov	r0, #0
   29f14:	str	r0, [r7]
   29f18:	str	r0, [r6]
   29f1c:	mov	r4, #12
   29f20:	mov	r0, r4
   29f24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29f28:	ldrb	r3, [r0, #88]	; 0x58
   29f2c:	add	r6, r1, #16
   29f30:	add	r5, r2, r2, lsl #1
   29f34:	orr	r3, r3, #1
   29f38:	strb	r3, [r0, #88]	; 0x58
   29f3c:	mov	r3, r6
   29f40:	ldr	r7, [r1, #4]
   29f44:	ldr	r1, [r1, #8]
   29f48:	cmp	r1, #0
   29f4c:	addne	r3, r1, #12
   29f50:	cmp	r7, #0
   29f54:	ldr	r1, [r3]
   29f58:	addne	r6, r7, #12
   29f5c:	ldr	r8, [r1, #28]
   29f60:	ldr	r1, [r6]
   29f64:	ldr	r6, [r0, #20]
   29f68:	mov	r0, #2
   29f6c:	ldr	r9, [r1, #28]
   29f70:	mov	r7, r6
   29f74:	str	r0, [r7, r5, lsl #2]!
   29f78:	mov	r0, #8
   29f7c:	bl	36fb4 <__assert_fail@plt+0x25120>
   29f80:	cmp	r0, #0
   29f84:	str	r0, [r7, #8]
   29f88:	beq	29f1c <__assert_fail@plt+0x18088>
   29f8c:	add	r1, r6, r5, lsl #2
   29f90:	cmp	r9, r8
   29f94:	add	r1, r1, #4
   29f98:	bne	29fec <__assert_fail@plt+0x18158>
   29f9c:	mov	r2, #1
   29fa0:	str	r2, [r1]
   29fa4:	str	r9, [r0]
   29fa8:	mov	r0, r4
   29fac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29fb0:	ldr	r1, [r1, #16]
   29fb4:	ldr	r0, [r0, #12]
   29fb8:	ldr	r1, [r1, #28]
   29fbc:	str	r1, [r0, r2, lsl #2]
   29fc0:	mov	r0, r4
   29fc4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29fc8:	ldr	r7, [r1, #16]
   29fcc:	ldr	r3, [r0, #12]
   29fd0:	ldr	r5, [r7, #28]
   29fd4:	str	r5, [r3, r2, lsl #2]
   29fd8:	ldrb	r1, [r1, #24]
   29fdc:	cmp	r1, #4
   29fe0:	beq	29edc <__assert_fail@plt+0x18048>
   29fe4:	mov	r0, r4
   29fe8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29fec:	mov	r2, #2
   29ff0:	str	r2, [r1]
   29ff4:	stmge	r0, {r8, r9}
   29ff8:	strlt	r9, [r0]
   29ffc:	strlt	r8, [r0, #4]
   2a000:	mov	r0, r4
   2a004:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2a008:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a00c:	add	fp, sp, #28
   2a010:	sub	sp, sp, #4
   2a014:	ldr	r6, [r3, #4]
   2a018:	tst	r2, #16
   2a01c:	mov	r9, r3
   2a020:	mov	r7, r1
   2a024:	mov	r8, r0
   2a028:	cmpne	r6, #0
   2a02c:	bne	2a1e4 <__assert_fail@plt+0x18350>
   2a030:	ldr	r1, [r7, #64]	; 0x40
   2a034:	cmp	r1, #31
   2a038:	beq	2a20c <__assert_fail@plt+0x18378>
   2a03c:	ldr	r0, [r7, #56]	; 0x38
   2a040:	add	r2, r1, #1
   2a044:	add	r0, r0, r1, lsl #5
   2a048:	mov	r1, #0
   2a04c:	vmov.i32	q8, #0	; 0x00000000
   2a050:	str	r2, [r7, #64]	; 0x40
   2a054:	add	sl, r0, #4
   2a058:	mov	r2, #8
   2a05c:	str	r1, [r0, #20]
   2a060:	str	r1, [r0, #24]
   2a064:	str	r2, [r0, #28]
   2a068:	mov	r0, #28
   2a06c:	mov	r1, sl
   2a070:	vst1.32	{d16-d17}, [r1], r0
   2a074:	mvn	r0, #0
   2a078:	str	r0, [r1]
   2a07c:	ldr	r1, [r7, #64]	; 0x40
   2a080:	cmp	r1, #31
   2a084:	beq	2a26c <__assert_fail@plt+0x183d8>
   2a088:	ldr	r0, [r7, #56]	; 0x38
   2a08c:	add	r2, r1, #1
   2a090:	add	r0, r0, r1, lsl #5
   2a094:	mov	r1, #0
   2a098:	vmov.i32	q8, #0	; 0x00000000
   2a09c:	str	r2, [r7, #64]	; 0x40
   2a0a0:	add	r5, r0, #4
   2a0a4:	mov	r2, #9
   2a0a8:	str	r1, [r0, #20]
   2a0ac:	str	r1, [r0, #24]
   2a0b0:	str	r2, [r0, #28]
   2a0b4:	mov	r0, #28
   2a0b8:	mov	r1, r5
   2a0bc:	vst1.32	{d16-d17}, [r1], r0
   2a0c0:	mvn	r0, #0
   2a0c4:	str	r0, [r1]
   2a0c8:	cmp	r6, #0
   2a0cc:	mov	r4, r5
   2a0d0:	beq	2a124 <__assert_fail@plt+0x18290>
   2a0d4:	ldr	r1, [r7, #64]	; 0x40
   2a0d8:	cmp	r1, #31
   2a0dc:	beq	2a234 <__assert_fail@plt+0x183a0>
   2a0e0:	ldr	r0, [r7, #56]	; 0x38
   2a0e4:	add	r2, r1, #1
   2a0e8:	add	r4, r0, r1, lsl #5
   2a0ec:	mov	r0, #0
   2a0f0:	mov	r1, #16
   2a0f4:	cmp	r5, #0
   2a0f8:	str	r2, [r7, #64]	; 0x40
   2a0fc:	str	r0, [r4, #4]!
   2a100:	mvn	r2, #0
   2a104:	add	r3, r4, #20
   2a108:	str	r6, [r4, #4]
   2a10c:	str	r5, [r4, #8]
   2a110:	str	r0, [r4, #12]
   2a114:	str	r0, [r4, #16]
   2a118:	stm	r3, {r0, r1, r2}
   2a11c:	str	r4, [r6]
   2a120:	strne	r4, [r5]
   2a124:	ldr	r1, [r7, #64]	; 0x40
   2a128:	cmp	r1, #31
   2a12c:	beq	2a2b8 <__assert_fail@plt+0x18424>
   2a130:	ldr	r0, [r7, #56]	; 0x38
   2a134:	add	r2, r1, #1
   2a138:	add	r6, r0, r1, lsl #5
   2a13c:	mov	r0, #0
   2a140:	mov	r1, #16
   2a144:	cmp	sl, #0
   2a148:	str	r2, [r7, #64]	; 0x40
   2a14c:	str	r0, [r6, #4]!
   2a150:	mvn	r2, #0
   2a154:	add	r3, r6, #20
   2a158:	str	sl, [r6, #4]
   2a15c:	str	r4, [r6, #8]
   2a160:	str	r0, [r6, #12]
   2a164:	str	r0, [r6, #16]
   2a168:	stm	r3, {r0, r1, r2}
   2a16c:	strne	r6, [sl]
   2a170:	cmp	r4, #0
   2a174:	strne	r6, [r4]
   2a178:	cmp	r5, #0
   2a17c:	beq	2a18c <__assert_fail@plt+0x182f8>
   2a180:	cmp	sl, #0
   2a184:	cmpne	r4, #0
   2a188:	bne	2a1a4 <__assert_fail@plt+0x18310>
   2a18c:	mov	r0, #12
   2a190:	mov	r6, #0
   2a194:	str	r0, [r8]
   2a198:	mov	r0, r6
   2a19c:	sub	sp, fp, #28
   2a1a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a1a4:	cmp	r6, #0
   2a1a8:	beq	2a18c <__assert_fail@plt+0x182f8>
   2a1ac:	ldr	r0, [r9, #20]
   2a1b0:	str	r0, [r5, #20]
   2a1b4:	str	r0, [sl, #20]
   2a1b8:	ldr	r1, [r9, #24]
   2a1bc:	ldr	r0, [r5, #24]
   2a1c0:	lsr	r1, r1, #19
   2a1c4:	bfi	r0, r1, #19, #1
   2a1c8:	str	r0, [r5, #24]
   2a1cc:	ldr	r0, [sl, #24]
   2a1d0:	bfi	r0, r1, #19, #1
   2a1d4:	str	r0, [sl, #24]
   2a1d8:	mov	r0, r6
   2a1dc:	sub	sp, fp, #28
   2a1e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a1e4:	ldr	r0, [r9, #20]
   2a1e8:	cmp	r0, #31
   2a1ec:	bgt	2a200 <__assert_fail@plt+0x1836c>
   2a1f0:	ldr	r1, [r7, #80]	; 0x50
   2a1f4:	mov	r2, #1
   2a1f8:	tst	r1, r2, lsl r0
   2a1fc:	bne	2a030 <__assert_fail@plt+0x1819c>
   2a200:	mov	r0, r6
   2a204:	sub	sp, fp, #28
   2a208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a20c:	mov	r0, #996	; 0x3e4
   2a210:	bl	36fb4 <__assert_fail@plt+0x25120>
   2a214:	cmp	r0, #0
   2a218:	beq	2a25c <__assert_fail@plt+0x183c8>
   2a21c:	ldr	r1, [r7, #56]	; 0x38
   2a220:	str	r1, [r0]
   2a224:	mov	r1, #0
   2a228:	str	r1, [r7, #64]	; 0x40
   2a22c:	str	r0, [r7, #56]	; 0x38
   2a230:	b	2a040 <__assert_fail@plt+0x181ac>
   2a234:	mov	r0, #996	; 0x3e4
   2a238:	bl	36fb4 <__assert_fail@plt+0x25120>
   2a23c:	cmp	r0, #0
   2a240:	beq	2a2a8 <__assert_fail@plt+0x18414>
   2a244:	ldr	r1, [r7, #56]	; 0x38
   2a248:	str	r1, [r0]
   2a24c:	mov	r1, #0
   2a250:	str	r1, [r7, #64]	; 0x40
   2a254:	str	r0, [r7, #56]	; 0x38
   2a258:	b	2a0e4 <__assert_fail@plt+0x18250>
   2a25c:	mov	sl, #0
   2a260:	ldr	r1, [r7, #64]	; 0x40
   2a264:	cmp	r1, #31
   2a268:	bne	2a088 <__assert_fail@plt+0x181f4>
   2a26c:	mov	r0, #996	; 0x3e4
   2a270:	bl	36fb4 <__assert_fail@plt+0x25120>
   2a274:	cmp	r0, #0
   2a278:	beq	2a294 <__assert_fail@plt+0x18400>
   2a27c:	ldr	r1, [r7, #56]	; 0x38
   2a280:	str	r1, [r0]
   2a284:	mov	r1, #0
   2a288:	str	r1, [r7, #64]	; 0x40
   2a28c:	str	r0, [r7, #56]	; 0x38
   2a290:	b	2a08c <__assert_fail@plt+0x181f8>
   2a294:	mov	r5, #0
   2a298:	cmp	r6, #0
   2a29c:	mov	r4, r5
   2a2a0:	bne	2a0d4 <__assert_fail@plt+0x18240>
   2a2a4:	b	2a124 <__assert_fail@plt+0x18290>
   2a2a8:	mov	r4, #0
   2a2ac:	ldr	r1, [r7, #64]	; 0x40
   2a2b0:	cmp	r1, #31
   2a2b4:	bne	2a130 <__assert_fail@plt+0x1829c>
   2a2b8:	mov	r0, #996	; 0x3e4
   2a2bc:	bl	36fb4 <__assert_fail@plt+0x25120>
   2a2c0:	cmp	r0, #0
   2a2c4:	beq	2a2e0 <__assert_fail@plt+0x1844c>
   2a2c8:	ldr	r1, [r7, #56]	; 0x38
   2a2cc:	str	r1, [r0]
   2a2d0:	mov	r1, #0
   2a2d4:	str	r1, [r7, #64]	; 0x40
   2a2d8:	str	r0, [r7, #56]	; 0x38
   2a2dc:	b	2a134 <__assert_fail@plt+0x182a0>
   2a2e0:	mov	r6, #0
   2a2e4:	cmp	r5, #0
   2a2e8:	bne	2a180 <__assert_fail@plt+0x182ec>
   2a2ec:	b	2a18c <__assert_fail@plt+0x182f8>
   2a2f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a2f4:	add	fp, sp, #28
   2a2f8:	sub	sp, sp, #12
   2a2fc:	mov	r4, r0
   2a300:	ldr	r7, [r0, #4]
   2a304:	ldr	r0, [r0, #8]
   2a308:	mov	r5, r2
   2a30c:	mov	r9, r1
   2a310:	cmp	r0, r7
   2a314:	bcs	2a3e0 <__assert_fail@plt+0x1854c>
   2a318:	ldr	r1, [r4]
   2a31c:	str	r9, [r1, r0, lsl #3]!
   2a320:	str	r5, [r1, #4]
   2a324:	ldr	r0, [r4]
   2a328:	ldr	r1, [r4, #8]
   2a32c:	add	r0, r0, r1, lsl #3
   2a330:	ldr	r1, [r0, #4]
   2a334:	bfc	r1, #8, #10
   2a338:	str	r1, [r0, #4]
   2a33c:	uxtb	r1, r5
   2a340:	cmp	r1, #5
   2a344:	bne	2a358 <__assert_fail@plt+0x184c4>
   2a348:	ldr	r2, [r4, #92]	; 0x5c
   2a34c:	mov	r0, #1048576	; 0x100000
   2a350:	cmp	r2, #1
   2a354:	bgt	2a368 <__assert_fail@plt+0x184d4>
   2a358:	sub	r0, r1, #6
   2a35c:	clz	r0, r0
   2a360:	lsr	r0, r0, #5
   2a364:	lsl	r0, r0, #20
   2a368:	ldr	r1, [r4]
   2a36c:	ldr	r2, [r4, #8]
   2a370:	add	r1, r1, r2, lsl #3
   2a374:	ldr	r2, [r1, #4]
   2a378:	bic	r2, r2, #1048576	; 0x100000
   2a37c:	orr	r0, r2, r0
   2a380:	mvn	r2, #0
   2a384:	str	r0, [r1, #4]
   2a388:	ldr	r0, [r4, #8]
   2a38c:	ldr	r1, [r4, #12]
   2a390:	str	r2, [r1, r0, lsl #2]
   2a394:	mov	r2, #0
   2a398:	ldr	r0, [r4, #8]
   2a39c:	ldr	r1, [r4, #20]
   2a3a0:	add	r0, r0, r0, lsl #1
   2a3a4:	str	r2, [r1, r0, lsl #2]!
   2a3a8:	str	r2, [r1, #4]
   2a3ac:	str	r2, [r1, #8]
   2a3b0:	ldr	r0, [r4, #8]
   2a3b4:	ldr	r1, [r4, #24]
   2a3b8:	add	r0, r0, r0, lsl #1
   2a3bc:	str	r2, [r1, r0, lsl #2]!
   2a3c0:	str	r2, [r1, #4]
   2a3c4:	str	r2, [r1, #8]
   2a3c8:	ldr	r6, [r4, #8]
   2a3cc:	add	r0, r6, #1
   2a3d0:	str	r0, [r4, #8]
   2a3d4:	mov	r0, r6
   2a3d8:	sub	sp, fp, #28
   2a3dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a3e0:	movw	r0, #21845	; 0x5555
   2a3e4:	lsl	r1, r7, #1
   2a3e8:	mvn	r6, #0
   2a3ec:	movt	r0, #5461	; 0x1555
   2a3f0:	cmp	r1, r0
   2a3f4:	bhi	2a3d4 <__assert_fail@plt+0x18540>
   2a3f8:	ldr	r0, [r4]
   2a3fc:	str	r1, [sp, #8]
   2a400:	lsl	r1, r7, #4
   2a404:	bl	36fe4 <__assert_fail@plt+0x25150>
   2a408:	cmp	r0, #0
   2a40c:	beq	2a3d4 <__assert_fail@plt+0x18540>
   2a410:	str	r0, [r4]
   2a414:	lsl	r8, r7, #3
   2a418:	ldr	r0, [r4, #12]
   2a41c:	mov	r1, r8
   2a420:	bl	36fe4 <__assert_fail@plt+0x25150>
   2a424:	str	r0, [sp, #4]
   2a428:	ldr	r0, [r4, #16]
   2a42c:	mov	r1, r8
   2a430:	bl	36fe4 <__assert_fail@plt+0x25150>
   2a434:	mov	r2, r0
   2a438:	ldr	r0, [r4, #20]
   2a43c:	add	r1, r7, r7, lsl #1
   2a440:	lsl	r8, r1, #3
   2a444:	mov	r7, r2
   2a448:	mov	r1, r8
   2a44c:	bl	36fe4 <__assert_fail@plt+0x25150>
   2a450:	mov	sl, r0
   2a454:	ldr	r0, [r4, #24]
   2a458:	mov	r1, r8
   2a45c:	bl	36fe4 <__assert_fail@plt+0x25150>
   2a460:	mov	r8, r0
   2a464:	ldr	r0, [sp, #4]
   2a468:	cmp	r0, #0
   2a46c:	beq	2a47c <__assert_fail@plt+0x185e8>
   2a470:	cmp	r7, #0
   2a474:	cmpne	sl, #0
   2a478:	bne	2a4a4 <__assert_fail@plt+0x18610>
   2a47c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2a480:	mov	r0, r7
   2a484:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2a488:	mov	r0, sl
   2a48c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2a490:	mov	r0, r8
   2a494:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2a498:	mov	r0, r6
   2a49c:	sub	sp, fp, #28
   2a4a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a4a4:	cmp	r8, #0
   2a4a8:	beq	2a47c <__assert_fail@plt+0x185e8>
   2a4ac:	add	r1, r4, #12
   2a4b0:	stm	r1, {r0, r7, sl}
   2a4b4:	str	r8, [r4, #24]
   2a4b8:	ldr	r0, [sp, #8]
   2a4bc:	str	r0, [r4, #4]
   2a4c0:	ldr	r0, [r4, #8]
   2a4c4:	b	2a318 <__assert_fail@plt+0x18484>
   2a4c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a4cc:	add	fp, sp, #28
   2a4d0:	sub	sp, sp, #44	; 0x2c
   2a4d4:	mov	r8, r0
   2a4d8:	ldr	r0, [r1, #20]
   2a4dc:	add	r4, r2, r2, lsl #1
   2a4e0:	mov	r5, r1
   2a4e4:	mov	r1, #0
   2a4e8:	mov	r9, r3
   2a4ec:	mov	r6, r2
   2a4f0:	add	r0, r0, r4, lsl #2
   2a4f4:	ldr	r0, [r0, #4]
   2a4f8:	str	r1, [sp, #36]	; 0x24
   2a4fc:	add	r0, r0, #1
   2a500:	str	r0, [sp, #32]
   2a504:	lsl	r0, r0, #2
   2a508:	bl	36fb4 <__assert_fail@plt+0x25120>
   2a50c:	cmp	r0, #0
   2a510:	str	r0, [sp, #40]	; 0x28
   2a514:	beq	2a6dc <__assert_fail@plt+0x18848>
   2a518:	mov	r1, #1
   2a51c:	str	r6, [r0]
   2a520:	str	r1, [sp, #36]	; 0x24
   2a524:	mvn	r1, #0
   2a528:	ldr	r0, [r5, #24]
   2a52c:	add	r0, r0, r4, lsl #2
   2a530:	str	r1, [r0, #4]
   2a534:	ldr	r2, [r5]
   2a538:	add	r0, r2, r6, lsl #3
   2a53c:	ldr	r0, [r0, #4]
   2a540:	ubfx	r1, r0, #8, #10
   2a544:	cmp	r1, #0
   2a548:	beq	2a5a4 <__assert_fail@plt+0x18710>
   2a54c:	ldr	r3, [r5, #20]
   2a550:	add	r3, r3, r4, lsl #2
   2a554:	ldr	r7, [r3, #4]
   2a558:	cmp	r7, #0
   2a55c:	beq	2a5a4 <__assert_fail@plt+0x18710>
   2a560:	ldr	r3, [r3, #8]
   2a564:	ldr	r3, [r3]
   2a568:	add	r2, r2, r3, lsl #3
   2a56c:	ldrb	r2, [r2, #6]
   2a570:	tst	r2, #4
   2a574:	bne	2a5a4 <__assert_fail@plt+0x18710>
   2a578:	str	r1, [sp]
   2a57c:	mov	r0, r5
   2a580:	mov	r1, r6
   2a584:	mov	r2, r6
   2a588:	mov	r3, r6
   2a58c:	bl	2a6e8 <__assert_fail@plt+0x18854>
   2a590:	cmp	r0, #0
   2a594:	bne	2a6d4 <__assert_fail@plt+0x18840>
   2a598:	ldr	r0, [r5]
   2a59c:	add	r0, r0, r6, lsl #3
   2a5a0:	ldr	r0, [r0, #4]
   2a5a4:	tst	r0, #8
   2a5a8:	beq	2a6a8 <__assert_fail@plt+0x18814>
   2a5ac:	ldr	r0, [r5, #20]
   2a5b0:	add	r1, r0, r4, lsl #2
   2a5b4:	ldr	r1, [r1, #4]
   2a5b8:	cmp	r1, #1
   2a5bc:	blt	2a6a8 <__assert_fail@plt+0x18814>
   2a5c0:	str	r8, [sp, #12]
   2a5c4:	mov	r8, #0
   2a5c8:	add	r7, sp, #16
   2a5cc:	add	sl, sp, #32
   2a5d0:	mov	r6, #0
   2a5d4:	str	r9, [sp, #8]
   2a5d8:	add	r0, r0, r4, lsl #2
   2a5dc:	ldr	r0, [r0, #8]
   2a5e0:	ldr	r2, [r0, r6, lsl #2]
   2a5e4:	ldr	r0, [r5, #24]
   2a5e8:	add	r9, r2, r2, lsl #1
   2a5ec:	add	r0, r0, r9, lsl #2
   2a5f0:	ldr	r1, [r0, #4]
   2a5f4:	cmn	r1, #1
   2a5f8:	beq	2a660 <__assert_fail@plt+0x187cc>
   2a5fc:	cmp	r1, #0
   2a600:	bne	2a620 <__assert_fail@plt+0x1878c>
   2a604:	mov	r0, r7
   2a608:	mov	r1, r5
   2a60c:	mov	r3, #0
   2a610:	bl	2a4c8 <__assert_fail@plt+0x18634>
   2a614:	cmp	r0, #0
   2a618:	beq	2a630 <__assert_fail@plt+0x1879c>
   2a61c:	b	2a6d4 <__assert_fail@plt+0x18840>
   2a620:	vldr	d16, [r0]
   2a624:	ldr	r0, [r0, #8]
   2a628:	str	r0, [sp, #24]
   2a62c:	vstr	d16, [sp, #16]
   2a630:	mov	r0, sl
   2a634:	mov	r1, r7
   2a638:	bl	2abac <__assert_fail@plt+0x18d18>
   2a63c:	cmp	r0, #0
   2a640:	bne	2a6d4 <__assert_fail@plt+0x18840>
   2a644:	ldr	r0, [r5, #24]
   2a648:	add	r0, r0, r9, lsl #2
   2a64c:	ldr	r0, [r0, #4]
   2a650:	cmp	r0, #0
   2a654:	bne	2a664 <__assert_fail@plt+0x187d0>
   2a658:	ldr	r0, [sp, #24]
   2a65c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2a660:	mov	r8, #1
   2a664:	ldr	r0, [r5, #20]
   2a668:	add	r6, r6, #1
   2a66c:	add	r1, r0, r4, lsl #2
   2a670:	ldr	r1, [r1, #4]
   2a674:	cmp	r6, r1
   2a678:	blt	2a5d8 <__assert_fail@plt+0x18744>
   2a67c:	tst	r8, #1
   2a680:	ldr	r8, [sp, #12]
   2a684:	ldr	r0, [sp, #8]
   2a688:	beq	2a6a8 <__assert_fail@plt+0x18814>
   2a68c:	cmp	r0, #0
   2a690:	bne	2a6a8 <__assert_fail@plt+0x18814>
   2a694:	ldr	r0, [r5, #24]
   2a698:	mov	r1, #0
   2a69c:	add	r0, r0, r4, lsl #2
   2a6a0:	str	r1, [r0, #4]
   2a6a4:	b	2a6c0 <__assert_fail@plt+0x1882c>
   2a6a8:	ldr	r0, [r5, #24]
   2a6ac:	vldr	d16, [sp, #32]
   2a6b0:	ldr	r1, [sp, #40]	; 0x28
   2a6b4:	add	r0, r0, r4, lsl #2
   2a6b8:	str	r1, [r0, #8]
   2a6bc:	vstr	d16, [r0]
   2a6c0:	ldr	r0, [sp, #40]	; 0x28
   2a6c4:	vldr	d16, [sp, #32]
   2a6c8:	str	r0, [r8, #8]
   2a6cc:	mov	r0, #0
   2a6d0:	vstr	d16, [r8]
   2a6d4:	sub	sp, fp, #28
   2a6d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a6dc:	mov	r0, #12
   2a6e0:	sub	sp, fp, #28
   2a6e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a6e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a6ec:	add	fp, sp, #28
   2a6f0:	sub	sp, sp, #20
   2a6f4:	mov	r9, r0
   2a6f8:	ldr	r0, [fp, #8]
   2a6fc:	mov	sl, r2
   2a700:	mov	r8, r1
   2a704:	str	r3, [sp, #8]
   2a708:	str	r0, [sp, #16]
   2a70c:	ldr	r2, [r9]
   2a710:	add	r3, r2, r8, lsl #3
   2a714:	ldrb	r0, [r3, #4]!
   2a718:	cmp	r0, #4
   2a71c:	bne	2a80c <__assert_fail@plt+0x18978>
   2a720:	ldr	r0, [r9, #12]
   2a724:	ldr	r1, [r9, #20]
   2a728:	add	r6, sl, sl, lsl #1
   2a72c:	ldr	r4, [r0, r8, lsl #2]
   2a730:	add	r0, r1, r6, lsl #2
   2a734:	mov	r1, #0
   2a738:	str	r1, [r0, #4]
   2a73c:	mov	r0, r9
   2a740:	ldr	r1, [r2, r4, lsl #3]!
   2a744:	ldr	r2, [r2, #4]
   2a748:	bl	2a2f0 <__assert_fail@plt+0x1845c>
   2a74c:	mov	r7, r0
   2a750:	mov	r0, #12
   2a754:	cmn	r7, #1
   2a758:	str	r0, [sp, #12]
   2a75c:	beq	2ab80 <__assert_fail@plt+0x18cec>
   2a760:	ldr	r1, [r9]
   2a764:	movw	r0, #65280	; 0xff00
   2a768:	movw	r3, #255	; 0xff
   2a76c:	movt	r0, #3
   2a770:	movt	r3, #65532	; 0xfffc
   2a774:	mov	ip, r0
   2a778:	ldr	r0, [sp, #16]
   2a77c:	add	r1, r1, r7, lsl #3
   2a780:	ldr	r2, [r1, #4]
   2a784:	and	r0, ip, r0, lsl #8
   2a788:	and	r2, r2, r3
   2a78c:	orr	r0, r2, r0
   2a790:	str	r0, [r1, #4]
   2a794:	ldr	r0, [r9]
   2a798:	add	r1, r0, r4, lsl #3
   2a79c:	add	r0, r0, r7, lsl #3
   2a7a0:	ldr	r1, [r1, #4]
   2a7a4:	ldr	r2, [r0, #4]
   2a7a8:	and	r1, r1, ip
   2a7ac:	orr	r1, r1, r2
   2a7b0:	str	r1, [r0, #4]
   2a7b4:	ldr	r0, [r9]
   2a7b8:	add	r0, r0, r7, lsl #3
   2a7bc:	ldr	r1, [r0, #4]
   2a7c0:	orr	r1, r1, #262144	; 0x40000
   2a7c4:	str	r1, [r0, #4]
   2a7c8:	ldr	r0, [r9, #16]
   2a7cc:	str	r4, [r0, r7, lsl #2]
   2a7d0:	ldr	r0, [r9, #12]
   2a7d4:	ldr	r1, [r0, r8, lsl #2]
   2a7d8:	str	r1, [r0, sl, lsl #2]
   2a7dc:	mov	r1, r7
   2a7e0:	ldr	r0, [r9, #20]
   2a7e4:	add	r0, r0, r6, lsl #2
   2a7e8:	bl	2ad54 <__assert_fail@plt+0x18ec0>
   2a7ec:	mov	r1, #0
   2a7f0:	cmp	r0, #0
   2a7f4:	mov	r8, r4
   2a7f8:	mov	sl, r7
   2a7fc:	beq	2ab80 <__assert_fail@plt+0x18cec>
   2a800:	cmp	r1, #0
   2a804:	beq	2a70c <__assert_fail@plt+0x18878>
   2a808:	b	2ab70 <__assert_fail@plt+0x18cdc>
   2a80c:	ldr	r0, [r9, #20]
   2a810:	add	ip, r8, r8, lsl #1
   2a814:	add	r7, r0, ip, lsl #2
   2a818:	ldr	r1, [r7, #4]
   2a81c:	cmp	r1, #0
   2a820:	beq	2ab8c <__assert_fail@plt+0x18cf8>
   2a824:	ldr	r7, [r7, #8]
   2a828:	add	r6, sl, sl, lsl #1
   2a82c:	cmp	r1, #1
   2a830:	add	r0, r0, r6, lsl #2
   2a834:	ldr	r5, [r7]
   2a838:	mov	r7, #0
   2a83c:	str	r7, [r0, #4]
   2a840:	bne	2a87c <__assert_fail@plt+0x189e8>
   2a844:	ldr	r1, [sp, #8]
   2a848:	cmp	r8, r1
   2a84c:	bne	2aa7c <__assert_fail@plt+0x18be8>
   2a850:	cmp	sl, r8
   2a854:	beq	2aa7c <__assert_fail@plt+0x18be8>
   2a858:	mov	r1, r5
   2a85c:	bl	2ad54 <__assert_fail@plt+0x18ec0>
   2a860:	ldr	r8, [sp, #8]
   2a864:	cmp	r0, #0
   2a868:	mov	r1, #1
   2a86c:	movwne	r1, #2
   2a870:	cmp	r1, #0
   2a874:	beq	2a70c <__assert_fail@plt+0x18878>
   2a878:	b	2ab70 <__assert_fail@plt+0x18cdc>
   2a87c:	ldr	r1, [r9, #8]
   2a880:	ldr	r8, [sp, #16]
   2a884:	str	r6, [sp, #4]
   2a888:	sub	r3, r1, #1
   2a88c:	cmp	r3, #1
   2a890:	blt	2a8e0 <__assert_fail@plt+0x18a4c>
   2a894:	add	r3, r2, r3, lsl #3
   2a898:	ldr	r6, [r3, #4]
   2a89c:	ands	r3, r6, #262144	; 0x40000
   2a8a0:	beq	2a8e0 <__assert_fail@plt+0x18a4c>
   2a8a4:	ldr	r4, [r9, #16]
   2a8a8:	sub	r3, r2, #12
   2a8ac:	sub	r4, r4, #4
   2a8b0:	ldr	r7, [r4, r1, lsl #2]
   2a8b4:	cmp	r7, r5
   2a8b8:	ubfxeq	r7, r6, #8, #10
   2a8bc:	cmpeq	r7, r8
   2a8c0:	beq	2ab44 <__assert_fail@plt+0x18cb0>
   2a8c4:	sub	r7, r1, #2
   2a8c8:	cmp	r7, #1
   2a8cc:	blt	2a8e0 <__assert_fail@plt+0x18a4c>
   2a8d0:	ldr	r6, [r3, r1, lsl #3]
   2a8d4:	sub	r1, r1, #1
   2a8d8:	ands	r7, r6, #262144	; 0x40000
   2a8dc:	bne	2a8b0 <__assert_fail@plt+0x18a1c>
   2a8e0:	ldr	r1, [r2, r5, lsl #3]!
   2a8e4:	mov	r0, r9
   2a8e8:	mov	sl, ip
   2a8ec:	ldr	r2, [r2, #4]
   2a8f0:	bl	2a2f0 <__assert_fail@plt+0x1845c>
   2a8f4:	mov	r4, r0
   2a8f8:	mov	r0, #12
   2a8fc:	cmn	r4, #1
   2a900:	str	r0, [sp, #12]
   2a904:	beq	2ab80 <__assert_fail@plt+0x18cec>
   2a908:	ldr	r1, [r9]
   2a90c:	movw	r0, #65280	; 0xff00
   2a910:	movw	r7, #255	; 0xff
   2a914:	ldr	r6, [sp, #4]
   2a918:	movt	r0, #3
   2a91c:	movt	r7, #65532	; 0xfffc
   2a920:	mov	r3, r0
   2a924:	and	r0, r0, r8, lsl #8
   2a928:	add	r1, r1, r4, lsl #3
   2a92c:	ldr	r2, [r1, #4]
   2a930:	and	r2, r2, r7
   2a934:	orr	r0, r2, r0
   2a938:	str	r0, [r1, #4]
   2a93c:	ldr	r0, [r9]
   2a940:	add	r1, r0, r5, lsl #3
   2a944:	add	r0, r0, r4, lsl #3
   2a948:	ldr	r1, [r1, #4]
   2a94c:	ldr	r2, [r0, #4]
   2a950:	and	r1, r1, r3
   2a954:	orr	r1, r1, r2
   2a958:	str	r1, [r0, #4]
   2a95c:	ldr	r0, [r9]
   2a960:	add	r0, r0, r4, lsl #3
   2a964:	ldr	r1, [r0, #4]
   2a968:	orr	r1, r1, #262144	; 0x40000
   2a96c:	str	r1, [r0, #4]
   2a970:	mov	r1, r4
   2a974:	ldr	r0, [r9, #16]
   2a978:	str	r5, [r0, r4, lsl #2]
   2a97c:	ldr	r0, [r9, #20]
   2a980:	add	r0, r0, r6, lsl #2
   2a984:	bl	2ad54 <__assert_fail@plt+0x18ec0>
   2a988:	cmp	r0, #0
   2a98c:	beq	2ab80 <__assert_fail@plt+0x18cec>
   2a990:	ldr	r0, [sp, #16]
   2a994:	ldr	r3, [sp, #8]
   2a998:	mov	r1, r5
   2a99c:	mov	r2, r4
   2a9a0:	str	r0, [sp]
   2a9a4:	mov	r0, r9
   2a9a8:	bl	2a6e8 <__assert_fail@plt+0x18854>
   2a9ac:	cmp	r0, #0
   2a9b0:	bne	2ab9c <__assert_fail@plt+0x18d08>
   2a9b4:	ldr	r1, [r9, #20]
   2a9b8:	ldr	r0, [r9]
   2a9bc:	add	r1, r1, sl, lsl #2
   2a9c0:	ldr	r1, [r1, #8]
   2a9c4:	ldr	r8, [r1, #4]
   2a9c8:	ldr	r1, [r0, r8, lsl #3]!
   2a9cc:	ldr	r2, [r0, #4]
   2a9d0:	mov	r0, r9
   2a9d4:	bl	2a2f0 <__assert_fail@plt+0x1845c>
   2a9d8:	mov	sl, r0
   2a9dc:	mov	r0, #12
   2a9e0:	cmn	sl, #1
   2a9e4:	str	r0, [sp, #12]
   2a9e8:	beq	2ab80 <__assert_fail@plt+0x18cec>
   2a9ec:	ldr	r1, [r9]
   2a9f0:	movw	r0, #65280	; 0xff00
   2a9f4:	movw	r7, #255	; 0xff
   2a9f8:	movt	r0, #3
   2a9fc:	movt	r7, #65532	; 0xfffc
   2aa00:	mov	r3, r0
   2aa04:	ldr	r0, [sp, #16]
   2aa08:	add	r1, r1, sl, lsl #3
   2aa0c:	ldr	r2, [r1, #4]
   2aa10:	and	r0, r3, r0, lsl #8
   2aa14:	and	r2, r2, r7
   2aa18:	orr	r0, r2, r0
   2aa1c:	str	r0, [r1, #4]
   2aa20:	ldr	r0, [r9]
   2aa24:	add	r1, r0, r8, lsl #3
   2aa28:	add	r0, r0, sl, lsl #3
   2aa2c:	ldr	r1, [r1, #4]
   2aa30:	ldr	r2, [r0, #4]
   2aa34:	and	r1, r1, r3
   2aa38:	orr	r1, r1, r2
   2aa3c:	str	r1, [r0, #4]
   2aa40:	ldr	r0, [r9]
   2aa44:	add	r0, r0, sl, lsl #3
   2aa48:	ldr	r1, [r0, #4]
   2aa4c:	orr	r1, r1, #262144	; 0x40000
   2aa50:	str	r1, [r0, #4]
   2aa54:	mov	r1, sl
   2aa58:	ldr	r0, [r9, #16]
   2aa5c:	str	r8, [r0, sl, lsl #2]
   2aa60:	ldr	r0, [r9, #20]
   2aa64:	add	r0, r0, r6, lsl #2
   2aa68:	bl	2ad54 <__assert_fail@plt+0x18ec0>
   2aa6c:	mov	r1, #0
   2aa70:	cmp	r0, #0
   2aa74:	bne	2a800 <__assert_fail@plt+0x1896c>
   2aa78:	b	2ab80 <__assert_fail@plt+0x18cec>
   2aa7c:	ldr	r1, [r2, r5, lsl #3]!
   2aa80:	ldr	r4, [r3]
   2aa84:	mov	r0, r9
   2aa88:	ldr	r2, [r2, #4]
   2aa8c:	bl	2a2f0 <__assert_fail@plt+0x1845c>
   2aa90:	mov	sl, r0
   2aa94:	ubfx	r0, r4, #8, #10
   2aa98:	mov	r1, #12
   2aa9c:	cmn	sl, #1
   2aaa0:	str	r1, [sp, #12]
   2aaa4:	beq	2ab80 <__assert_fail@plt+0x18cec>
   2aaa8:	ldr	r1, [sp, #16]
   2aaac:	movw	r7, #255	; 0xff
   2aab0:	movt	r7, #65532	; 0xfffc
   2aab4:	orr	r1, r0, r1
   2aab8:	movw	r0, #65280	; 0xff00
   2aabc:	movt	r0, #3
   2aac0:	str	r1, [sp, #16]
   2aac4:	mov	r3, r0
   2aac8:	and	r0, r0, r1, lsl #8
   2aacc:	ldr	r1, [r9]
   2aad0:	add	r1, r1, sl, lsl #3
   2aad4:	ldr	r2, [r1, #4]
   2aad8:	and	r2, r2, r7
   2aadc:	orr	r0, r2, r0
   2aae0:	str	r0, [r1, #4]
   2aae4:	ldr	r0, [r9]
   2aae8:	add	r1, r0, r5, lsl #3
   2aaec:	add	r0, r0, sl, lsl #3
   2aaf0:	ldr	r1, [r1, #4]
   2aaf4:	ldr	r2, [r0, #4]
   2aaf8:	and	r1, r1, r3
   2aafc:	orr	r1, r1, r2
   2ab00:	str	r1, [r0, #4]
   2ab04:	ldr	r0, [r9]
   2ab08:	add	r0, r0, sl, lsl #3
   2ab0c:	ldr	r1, [r0, #4]
   2ab10:	orr	r1, r1, #262144	; 0x40000
   2ab14:	str	r1, [r0, #4]
   2ab18:	mov	r1, sl
   2ab1c:	ldr	r0, [r9, #16]
   2ab20:	str	r5, [r0, sl, lsl #2]
   2ab24:	ldr	r0, [r9, #20]
   2ab28:	add	r0, r0, r6, lsl #2
   2ab2c:	bl	2ad54 <__assert_fail@plt+0x18ec0>
   2ab30:	mov	r1, #0
   2ab34:	cmp	r0, #0
   2ab38:	mov	r8, r5
   2ab3c:	bne	2a800 <__assert_fail@plt+0x1896c>
   2ab40:	b	2ab80 <__assert_fail@plt+0x18cec>
   2ab44:	sub	r1, r1, #1
   2ab48:	mov	sl, ip
   2ab4c:	bl	2ad54 <__assert_fail@plt+0x18ec0>
   2ab50:	ldr	r6, [sp, #4]
   2ab54:	cmp	r0, #0
   2ab58:	bne	2a9b4 <__assert_fail@plt+0x18b20>
   2ab5c:	mov	r0, #12
   2ab60:	str	r0, [sp, #12]
   2ab64:	ldr	r0, [sp, #12]
   2ab68:	sub	sp, fp, #28
   2ab6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ab70:	mov	r0, #12
   2ab74:	cmp	r1, #2
   2ab78:	str	r0, [sp, #12]
   2ab7c:	beq	2ab98 <__assert_fail@plt+0x18d04>
   2ab80:	ldr	r0, [sp, #12]
   2ab84:	sub	sp, fp, #28
   2ab88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ab8c:	ldr	r0, [r9, #12]
   2ab90:	ldr	r1, [r0, r8, lsl #2]
   2ab94:	str	r1, [r0, sl, lsl #2]
   2ab98:	mov	r0, #0
   2ab9c:	str	r0, [sp, #12]
   2aba0:	ldr	r0, [sp, #12]
   2aba4:	sub	sp, fp, #28
   2aba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2abac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2abb0:	add	fp, sp, #24
   2abb4:	mov	r8, #0
   2abb8:	cmp	r1, #0
   2abbc:	beq	2ad2c <__assert_fail@plt+0x18e98>
   2abc0:	mov	r5, r0
   2abc4:	ldr	r0, [r1, #4]
   2abc8:	mov	r9, r1
   2abcc:	cmp	r0, #0
   2abd0:	beq	2ad2c <__assert_fail@plt+0x18e98>
   2abd4:	ldr	r1, [r5, #4]
   2abd8:	ldr	r2, [r5]
   2abdc:	add	r3, r1, r0, lsl #1
   2abe0:	cmp	r2, r3
   2abe4:	bge	2ac14 <__assert_fail@plt+0x18d80>
   2abe8:	add	r7, r2, r0
   2abec:	ldr	r0, [r5, #8]
   2abf0:	lsl	r1, r7, #3
   2abf4:	bl	36fe4 <__assert_fail@plt+0x25150>
   2abf8:	cmp	r0, #0
   2abfc:	beq	2ad48 <__assert_fail@plt+0x18eb4>
   2ac00:	str	r0, [r5, #8]
   2ac04:	lsl	r0, r7, #1
   2ac08:	str	r0, [r5]
   2ac0c:	ldr	r1, [r5, #4]
   2ac10:	ldr	r0, [r9, #4]
   2ac14:	cmp	r1, #0
   2ac18:	beq	2ad34 <__assert_fail@plt+0x18ea0>
   2ac1c:	add	r7, r1, r0, lsl #1
   2ac20:	sub	r1, r1, #1
   2ac24:	sub	r0, r0, #1
   2ac28:	orr	r2, r0, r1
   2ac2c:	cmp	r2, #0
   2ac30:	blt	2ac94 <__assert_fail@plt+0x18e00>
   2ac34:	ldr	r2, [r9, #8]
   2ac38:	ldr	r3, [r5, #8]
   2ac3c:	ldr	r4, [r2, r0, lsl #2]
   2ac40:	ldr	r6, [r3, r1, lsl #2]
   2ac44:	cmp	r6, r4
   2ac48:	bne	2ac64 <__assert_fail@plt+0x18dd0>
   2ac4c:	sub	r1, r1, #1
   2ac50:	sub	r0, r0, #1
   2ac54:	orr	r6, r0, r1
   2ac58:	cmn	r6, #1
   2ac5c:	bgt	2ac3c <__assert_fail@plt+0x18da8>
   2ac60:	b	2ac94 <__assert_fail@plt+0x18e00>
   2ac64:	bge	2ac84 <__assert_fail@plt+0x18df0>
   2ac68:	sub	r7, r7, #1
   2ac6c:	sub	r0, r0, #1
   2ac70:	str	r4, [r3, r7, lsl #2]
   2ac74:	orr	r6, r0, r1
   2ac78:	cmn	r6, #1
   2ac7c:	bgt	2ac3c <__assert_fail@plt+0x18da8>
   2ac80:	b	2ac94 <__assert_fail@plt+0x18e00>
   2ac84:	sub	r1, r1, #1
   2ac88:	orr	r6, r0, r1
   2ac8c:	cmn	r6, #1
   2ac90:	bgt	2ac3c <__assert_fail@plt+0x18da8>
   2ac94:	cmp	r0, #0
   2ac98:	blt	2acb8 <__assert_fail@plt+0x18e24>
   2ac9c:	add	r2, r0, #1
   2aca0:	ldr	r0, [r5, #8]
   2aca4:	ldr	r1, [r9, #8]
   2aca8:	sub	r7, r7, r2
   2acac:	lsl	r2, r2, #2
   2acb0:	add	r0, r0, r7, lsl #2
   2acb4:	bl	11a8c <memcpy@plt>
   2acb8:	ldr	r0, [r5, #4]
   2acbc:	ldr	r2, [r9, #4]
   2acc0:	sub	r1, r0, #1
   2acc4:	add	r3, r1, r2, lsl #1
   2acc8:	sub	r2, r3, r7
   2accc:	adds	r2, r2, #1
   2acd0:	beq	2ad2c <__assert_fail@plt+0x18e98>
   2acd4:	add	r0, r2, r0
   2acd8:	str	r0, [r5, #4]
   2acdc:	ldr	r0, [r5, #8]
   2ace0:	ldr	r6, [r0, r1, lsl #2]
   2ace4:	ldr	r5, [r0, r3, lsl #2]
   2ace8:	cmp	r5, r6
   2acec:	ble	2ad08 <__assert_fail@plt+0x18e74>
   2acf0:	add	r6, r2, r1
   2acf4:	subs	r2, r2, #1
   2acf8:	sub	r3, r3, #1
   2acfc:	str	r5, [r0, r6, lsl #2]
   2ad00:	bne	2ace0 <__assert_fail@plt+0x18e4c>
   2ad04:	b	2ad2c <__assert_fail@plt+0x18e98>
   2ad08:	add	r5, r2, r1
   2ad0c:	cmp	r1, #0
   2ad10:	str	r6, [r0, r5, lsl #2]
   2ad14:	sub	r6, r1, #1
   2ad18:	mov	r1, r6
   2ad1c:	bgt	2ace0 <__assert_fail@plt+0x18e4c>
   2ad20:	add	r1, r0, r7, lsl #2
   2ad24:	lsl	r2, r2, #2
   2ad28:	bl	11a8c <memcpy@plt>
   2ad2c:	mov	r0, r8
   2ad30:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2ad34:	str	r0, [r5, #4]
   2ad38:	ldr	r0, [r5, #8]
   2ad3c:	ldr	r2, [r9, #4]
   2ad40:	ldr	r1, [r9, #8]
   2ad44:	b	2ad24 <__assert_fail@plt+0x18e90>
   2ad48:	mov	r8, #12
   2ad4c:	mov	r0, r8
   2ad50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2ad54:	push	{r4, r5, r6, sl, fp, lr}
   2ad58:	add	fp, sp, #16
   2ad5c:	ldr	r2, [r0]
   2ad60:	mov	r5, r1
   2ad64:	mov	r4, r0
   2ad68:	cmp	r2, #0
   2ad6c:	beq	2ad9c <__assert_fail@plt+0x18f08>
   2ad70:	ldr	r1, [r4, #4]
   2ad74:	cmp	r1, #0
   2ad78:	bne	2add8 <__assert_fail@plt+0x18f44>
   2ad7c:	ldr	r0, [r4, #8]
   2ad80:	str	r5, [r0]
   2ad84:	ldr	r0, [r4, #4]
   2ad88:	mov	r6, #1
   2ad8c:	add	r0, r0, #1
   2ad90:	str	r0, [r4, #4]
   2ad94:	mov	r0, r6
   2ad98:	pop	{r4, r5, r6, sl, fp, pc}
   2ad9c:	mov	r6, #1
   2ada0:	mov	r0, #4
   2ada4:	str	r6, [r4]
   2ada8:	str	r6, [r4, #4]
   2adac:	bl	36fb4 <__assert_fail@plt+0x25120>
   2adb0:	cmp	r0, #0
   2adb4:	str	r0, [r4, #8]
   2adb8:	strne	r5, [r0]
   2adbc:	movne	r0, r6
   2adc0:	popne	{r4, r5, r6, sl, fp, pc}
   2adc4:	mov	r6, #0
   2adc8:	mov	r0, r6
   2adcc:	str	r6, [r4]
   2add0:	str	r6, [r4, #4]
   2add4:	pop	{r4, r5, r6, sl, fp, pc}
   2add8:	cmp	r2, r1
   2addc:	bne	2ae14 <__assert_fail@plt+0x18f80>
   2ade0:	lsl	r0, r2, #1
   2ade4:	lsl	r1, r2, #3
   2ade8:	str	r0, [r4]
   2adec:	ldr	r0, [r4, #8]
   2adf0:	bl	36fe4 <__assert_fail@plt+0x25150>
   2adf4:	cmp	r0, #0
   2adf8:	beq	2ae90 <__assert_fail@plt+0x18ffc>
   2adfc:	str	r0, [r4, #8]
   2ae00:	ldr	r1, [r4, #4]
   2ae04:	ldr	r2, [r0]
   2ae08:	cmp	r2, r5
   2ae0c:	bgt	2ae24 <__assert_fail@plt+0x18f90>
   2ae10:	b	2ae58 <__assert_fail@plt+0x18fc4>
   2ae14:	ldr	r0, [r4, #8]
   2ae18:	ldr	r2, [r0]
   2ae1c:	cmp	r2, r5
   2ae20:	ble	2ae58 <__assert_fail@plt+0x18fc4>
   2ae24:	cmp	r1, #1
   2ae28:	blt	2ae88 <__assert_fail@plt+0x18ff4>
   2ae2c:	add	r2, r0, r1, lsl #2
   2ae30:	add	r1, r1, #1
   2ae34:	mov	r3, r2
   2ae38:	ldr	r6, [r3, #-4]!
   2ae3c:	sub	r1, r1, #1
   2ae40:	cmp	r1, #1
   2ae44:	str	r6, [r2]
   2ae48:	mov	r2, r3
   2ae4c:	bgt	2ae38 <__assert_fail@plt+0x18fa4>
   2ae50:	sub	r1, r1, #1
   2ae54:	b	2ae88 <__assert_fail@plt+0x18ff4>
   2ae58:	add	r2, r0, r1, lsl #2
   2ae5c:	ldr	r3, [r2, #-4]
   2ae60:	cmp	r3, r5
   2ae64:	ble	2ae88 <__assert_fail@plt+0x18ff4>
   2ae68:	sub	r1, r1, #2
   2ae6c:	str	r3, [r2]
   2ae70:	sub	r1, r1, #1
   2ae74:	ldr	r3, [r2, #-8]
   2ae78:	sub	r2, r2, #4
   2ae7c:	cmp	r3, r5
   2ae80:	bgt	2ae6c <__assert_fail@plt+0x18fd8>
   2ae84:	add	r1, r1, #2
   2ae88:	str	r5, [r0, r1, lsl #2]
   2ae8c:	b	2ad84 <__assert_fail@plt+0x18ef0>
   2ae90:	mov	r6, #0
   2ae94:	mov	r0, r6
   2ae98:	pop	{r4, r5, r6, sl, fp, pc}
   2ae9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aea0:	add	fp, sp, #28
   2aea4:	sub	sp, sp, #28
   2aea8:	ldr	lr, [r2, #4]
   2aeac:	mov	sl, r0
   2aeb0:	cmp	lr, #0
   2aeb4:	beq	2b058 <__assert_fail@plt+0x191c4>
   2aeb8:	mov	r9, r3
   2aebc:	add	r7, lr, r3
   2aec0:	cmp	lr, #1
   2aec4:	str	r2, [sp, #20]
   2aec8:	blt	2af38 <__assert_fail@plt+0x190a4>
   2aecc:	ldr	r6, [r2, #8]
   2aed0:	mov	r2, #0
   2aed4:	cmp	lr, #4
   2aed8:	bcc	2af20 <__assert_fail@plt+0x1908c>
   2aedc:	mov	r0, #0
   2aee0:	bic	r2, lr, #3
   2aee4:	vdup.32	q8, r0
   2aee8:	mov	r3, r2
   2aeec:	mov	r0, r6
   2aef0:	vmov.32	d16[0], r7
   2aef4:	vld1.32	{d18-d19}, [r0]!
   2aef8:	subs	r3, r3, #4
   2aefc:	vadd.i32	q8, q9, q8
   2af00:	bne	2aef4 <__assert_fail@plt+0x19060>
   2af04:	vext.8	q9, q8, q8, #8
   2af08:	cmp	lr, r2
   2af0c:	vadd.i32	q8, q8, q9
   2af10:	vdup.32	q9, d16[1]
   2af14:	vadd.i32	q8, q8, q9
   2af18:	vmov.32	r7, d16[0]
   2af1c:	beq	2af38 <__assert_fail@plt+0x190a4>
   2af20:	add	r0, r6, r2, lsl #2
   2af24:	sub	r2, lr, r2
   2af28:	ldr	r3, [r0], #4
   2af2c:	subs	r2, r2, #1
   2af30:	add	r7, r3, r7
   2af34:	bne	2af28 <__assert_fail@plt+0x19094>
   2af38:	ldr	r2, [r1, #32]
   2af3c:	str	r1, [sp, #12]
   2af40:	ldr	r1, [r1, #68]	; 0x44
   2af44:	and	r1, r1, r7
   2af48:	add	r3, r1, r1, lsl #1
   2af4c:	ldr	r1, [r2, r3, lsl #2]
   2af50:	cmp	r1, #1
   2af54:	blt	2afe8 <__assert_fail@plt+0x19154>
   2af58:	ldr	r0, [sp, #20]
   2af5c:	cmp	r0, #0
   2af60:	beq	2afe8 <__assert_fail@plt+0x19154>
   2af64:	add	r2, r2, r3, lsl #2
   2af68:	sub	ip, lr, #1
   2af6c:	mov	r6, #0
   2af70:	ldr	r2, [r2, #8]
   2af74:	ldr	r8, [r2, r6, lsl #2]
   2af78:	ldr	r3, [r8]
   2af7c:	cmp	r3, r7
   2af80:	bne	2afdc <__assert_fail@plt+0x19148>
   2af84:	ldrb	r3, [r8, #52]	; 0x34
   2af88:	and	r3, r3, #15
   2af8c:	cmp	r3, r9
   2af90:	bne	2afdc <__assert_fail@plt+0x19148>
   2af94:	ldr	r4, [r8, #40]	; 0x28
   2af98:	cmp	r4, #0
   2af9c:	beq	2afdc <__assert_fail@plt+0x19148>
   2afa0:	ldr	r3, [r4, #4]
   2afa4:	cmp	r3, lr
   2afa8:	bne	2afdc <__assert_fail@plt+0x19148>
   2afac:	mov	r3, ip
   2afb0:	add	r5, r3, #1
   2afb4:	cmp	r5, #1
   2afb8:	blt	2b7f8 <__assert_fail@plt+0x19964>
   2afbc:	ldr	r0, [sp, #20]
   2afc0:	ldr	r5, [r0, #8]
   2afc4:	ldr	r0, [r4, #8]
   2afc8:	ldr	r5, [r5, r3, lsl #2]
   2afcc:	ldr	r0, [r0, r3, lsl #2]
   2afd0:	sub	r3, r3, #1
   2afd4:	cmp	r0, r5
   2afd8:	beq	2afb0 <__assert_fail@plt+0x1911c>
   2afdc:	add	r6, r6, #1
   2afe0:	cmp	r6, r1
   2afe4:	blt	2af74 <__assert_fail@plt+0x190e0>
   2afe8:	mov	r0, #56	; 0x38
   2afec:	mov	r1, #1
   2aff0:	bl	36f60 <__assert_fail@plt+0x250cc>
   2aff4:	cmp	r0, #0
   2aff8:	beq	2b830 <__assert_fail@plt+0x1999c>
   2affc:	ldr	ip, [sp, #20]
   2b000:	str	sl, [sp]
   2b004:	add	lr, r0, #4
   2b008:	mov	r8, r0
   2b00c:	str	lr, [sp, #8]
   2b010:	ldr	sl, [ip, #4]
   2b014:	cmp	sl, #1
   2b018:	str	sl, [r0, #8]
   2b01c:	blt	2b06c <__assert_fail@plt+0x191d8>
   2b020:	lsl	r0, sl, #2
   2b024:	str	sl, [r8, #4]
   2b028:	bl	36fb4 <__assert_fail@plt+0x25120>
   2b02c:	cmp	r0, #0
   2b030:	str	r0, [r8, #12]
   2b034:	beq	2b848 <__assert_fail@plt+0x199b4>
   2b038:	ldr	r4, [sp, #20]
   2b03c:	ldr	sl, [r4, #4]
   2b040:	ldr	r1, [r4, #8]
   2b044:	lsl	r2, sl, #2
   2b048:	bl	11a8c <memcpy@plt>
   2b04c:	ldr	lr, [sp, #8]
   2b050:	mov	ip, r4
   2b054:	b	2b07c <__assert_fail@plt+0x191e8>
   2b058:	mov	r8, #0
   2b05c:	str	r8, [sl]
   2b060:	mov	r0, r8
   2b064:	sub	sp, fp, #28
   2b068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b06c:	mov	r0, #0
   2b070:	str	r0, [lr]
   2b074:	str	r0, [lr, #4]
   2b078:	str	r0, [lr, #8]
   2b07c:	mov	r2, r8
   2b080:	and	r1, r9, #15
   2b084:	cmp	sl, #1
   2b088:	ldrb	r0, [r2, #52]!	; 0x34
   2b08c:	and	r0, r0, #240	; 0xf0
   2b090:	str	lr, [r2, #-12]
   2b094:	str	r2, [sp, #24]
   2b098:	orr	r0, r0, r1
   2b09c:	strb	r0, [r2]
   2b0a0:	ldr	r0, [sp, #12]
   2b0a4:	blt	2b7e4 <__assert_fail@plt+0x19950>
   2b0a8:	and	r1, r9, #4
   2b0ac:	tst	r9, #1
   2b0b0:	str	r1, [sp, #4]
   2b0b4:	and	r1, r9, #2
   2b0b8:	bne	2b288 <__assert_fail@plt+0x193f4>
   2b0bc:	cmp	r1, #0
   2b0c0:	bne	2b454 <__assert_fail@plt+0x195c0>
   2b0c4:	movw	r1, #65280	; 0xff00
   2b0c8:	mov	r6, #0
   2b0cc:	mov	r9, #0
   2b0d0:	movt	r1, #3
   2b0d4:	add	r1, r1, #255	; 0xff
   2b0d8:	str	r1, [sp, #16]
   2b0dc:	b	2b1d4 <__assert_fail@plt+0x19340>
   2b0e0:	mov	r0, #12
   2b0e4:	bl	36fb4 <__assert_fail@plt+0x25120>
   2b0e8:	cmp	r0, #0
   2b0ec:	beq	2b804 <__assert_fail@plt+0x19970>
   2b0f0:	ldr	ip, [sp, #20]
   2b0f4:	str	r0, [r8, #40]	; 0x28
   2b0f8:	mov	r5, r0
   2b0fc:	ldr	sl, [ip, #4]
   2b100:	cmp	sl, #0
   2b104:	str	sl, [r0, #4]
   2b108:	ble	2b140 <__assert_fail@plt+0x192ac>
   2b10c:	lsl	r0, sl, #2
   2b110:	str	sl, [r5]
   2b114:	bl	36fb4 <__assert_fail@plt+0x25120>
   2b118:	cmp	r0, #0
   2b11c:	str	r0, [r5, #8]
   2b120:	beq	2b814 <__assert_fail@plt+0x19980>
   2b124:	ldr	r5, [sp, #20]
   2b128:	ldr	sl, [r5, #4]
   2b12c:	ldr	r1, [r5, #8]
   2b130:	lsl	r2, sl, #2
   2b134:	bl	11a8c <memcpy@plt>
   2b138:	mov	ip, r5
   2b13c:	b	2b150 <__assert_fail@plt+0x192bc>
   2b140:	mov	r0, #0
   2b144:	str	r0, [r5]
   2b148:	str	r0, [r5, #4]
   2b14c:	str	r0, [r5, #8]
   2b150:	ldr	r1, [sp, #24]
   2b154:	ldr	lr, [sp, #8]
   2b158:	mov	r9, #0
   2b15c:	ldrb	r0, [r1]
   2b160:	orr	r0, r0, #128	; 0x80
   2b164:	strb	r0, [r1]
   2b168:	ldr	r0, [sp, #12]
   2b16c:	tst	r4, #4352	; 0x1100
   2b170:	beq	2b264 <__assert_fail@plt+0x193d0>
   2b174:	sub	r1, r6, r9
   2b178:	cmp	r1, #0
   2b17c:	ldrge	r2, [r8, #8]
   2b180:	cmpge	r2, r1
   2b184:	bgt	2b19c <__assert_fail@plt+0x19308>
   2b188:	add	r9, r9, #1
   2b18c:	add	r6, r6, #1
   2b190:	cmp	r6, sl
   2b194:	blt	2b1d4 <__assert_fail@plt+0x19340>
   2b198:	b	2b7e4 <__assert_fail@plt+0x19950>
   2b19c:	sub	r2, r2, #1
   2b1a0:	cmp	r2, r1
   2b1a4:	str	r2, [r8, #8]
   2b1a8:	ble	2b188 <__assert_fail@plt+0x192f4>
   2b1ac:	ldr	r2, [r8, #12]
   2b1b0:	add	r3, r2, r1, lsl #2
   2b1b4:	ldr	r3, [r3, #4]
   2b1b8:	str	r3, [r2, r1, lsl #2]
   2b1bc:	add	r1, r1, #1
   2b1c0:	ldr	r3, [r8, #8]
   2b1c4:	cmp	r1, r3
   2b1c8:	blt	2b1b0 <__assert_fail@plt+0x1931c>
   2b1cc:	ldr	sl, [ip, #4]
   2b1d0:	b	2b188 <__assert_fail@plt+0x192f4>
   2b1d4:	ldr	r1, [ip, #8]
   2b1d8:	ldr	r2, [r0]
   2b1dc:	ldr	r1, [r1, r6, lsl #2]
   2b1e0:	add	r1, r2, r1, lsl #3
   2b1e4:	ldr	r4, [r1, #4]
   2b1e8:	ldr	r1, [sp, #16]
   2b1ec:	and	r1, r4, r1
   2b1f0:	cmp	r1, #1
   2b1f4:	beq	2b278 <__assert_fail@plt+0x193e4>
   2b1f8:	ldr	r5, [sp, #24]
   2b1fc:	mov	r2, #32
   2b200:	movw	r1, #65280	; 0xff00
   2b204:	and	r2, r2, r4, lsr #15
   2b208:	movt	r1, #3
   2b20c:	and	r1, r4, r1
   2b210:	ldrb	r3, [r5]
   2b214:	orr	r2, r3, r2
   2b218:	uxtb	r3, r4
   2b21c:	cmp	r3, #4
   2b220:	strb	r2, [r5]
   2b224:	beq	2b238 <__assert_fail@plt+0x193a4>
   2b228:	cmp	r3, #2
   2b22c:	bne	2b248 <__assert_fail@plt+0x193b4>
   2b230:	mov	r3, #16
   2b234:	b	2b23c <__assert_fail@plt+0x193a8>
   2b238:	mov	r3, #64	; 0x40
   2b23c:	orr	r2, r2, r3
   2b240:	ldr	r3, [sp, #24]
   2b244:	strb	r2, [r3]
   2b248:	cmp	r1, #0
   2b24c:	beq	2b278 <__assert_fail@plt+0x193e4>
   2b250:	ldr	r1, [r8, #40]	; 0x28
   2b254:	cmp	r1, lr
   2b258:	beq	2b0e0 <__assert_fail@plt+0x1924c>
   2b25c:	tst	r4, #4352	; 0x1100
   2b260:	bne	2b174 <__assert_fail@plt+0x192e0>
   2b264:	ldr	r1, [sp, #4]
   2b268:	cmp	r1, #0
   2b26c:	bne	2b278 <__assert_fail@plt+0x193e4>
   2b270:	ands	r1, r4, #16384	; 0x4000
   2b274:	bne	2b174 <__assert_fail@plt+0x192e0>
   2b278:	add	r6, r6, #1
   2b27c:	cmp	r6, sl
   2b280:	blt	2b1d4 <__assert_fail@plt+0x19340>
   2b284:	b	2b7e4 <__assert_fail@plt+0x19950>
   2b288:	cmp	r1, #0
   2b28c:	bne	2b618 <__assert_fail@plt+0x19784>
   2b290:	movw	r1, #65280	; 0xff00
   2b294:	mov	r6, #0
   2b298:	mov	r9, #0
   2b29c:	movt	r1, #3
   2b2a0:	add	r1, r1, #255	; 0xff
   2b2a4:	str	r1, [sp, #16]
   2b2a8:	b	2b3a0 <__assert_fail@plt+0x1950c>
   2b2ac:	mov	r0, #12
   2b2b0:	bl	36fb4 <__assert_fail@plt+0x25120>
   2b2b4:	cmp	r0, #0
   2b2b8:	beq	2b804 <__assert_fail@plt+0x19970>
   2b2bc:	ldr	ip, [sp, #20]
   2b2c0:	str	r0, [r8, #40]	; 0x28
   2b2c4:	mov	r5, r0
   2b2c8:	ldr	sl, [ip, #4]
   2b2cc:	cmp	sl, #0
   2b2d0:	str	sl, [r0, #4]
   2b2d4:	ble	2b30c <__assert_fail@plt+0x19478>
   2b2d8:	lsl	r0, sl, #2
   2b2dc:	str	sl, [r5]
   2b2e0:	bl	36fb4 <__assert_fail@plt+0x25120>
   2b2e4:	cmp	r0, #0
   2b2e8:	str	r0, [r5, #8]
   2b2ec:	beq	2b814 <__assert_fail@plt+0x19980>
   2b2f0:	ldr	r5, [sp, #20]
   2b2f4:	ldr	sl, [r5, #4]
   2b2f8:	ldr	r1, [r5, #8]
   2b2fc:	lsl	r2, sl, #2
   2b300:	bl	11a8c <memcpy@plt>
   2b304:	mov	ip, r5
   2b308:	b	2b31c <__assert_fail@plt+0x19488>
   2b30c:	mov	r0, #0
   2b310:	str	r0, [r5]
   2b314:	str	r0, [r5, #4]
   2b318:	str	r0, [r5, #8]
   2b31c:	ldr	r1, [sp, #24]
   2b320:	ldr	lr, [sp, #8]
   2b324:	mov	r9, #0
   2b328:	ldrb	r0, [r1]
   2b32c:	orr	r0, r0, #128	; 0x80
   2b330:	strb	r0, [r1]
   2b334:	ldr	r0, [sp, #12]
   2b338:	tst	r4, #4608	; 0x1200
   2b33c:	beq	2b430 <__assert_fail@plt+0x1959c>
   2b340:	sub	r1, r6, r9
   2b344:	cmp	r1, #0
   2b348:	ldrge	r2, [r8, #8]
   2b34c:	cmpge	r2, r1
   2b350:	bgt	2b368 <__assert_fail@plt+0x194d4>
   2b354:	add	r9, r9, #1
   2b358:	add	r6, r6, #1
   2b35c:	cmp	r6, sl
   2b360:	blt	2b3a0 <__assert_fail@plt+0x1950c>
   2b364:	b	2b7e4 <__assert_fail@plt+0x19950>
   2b368:	sub	r2, r2, #1
   2b36c:	cmp	r2, r1
   2b370:	str	r2, [r8, #8]
   2b374:	ble	2b354 <__assert_fail@plt+0x194c0>
   2b378:	ldr	r2, [r8, #12]
   2b37c:	add	r3, r2, r1, lsl #2
   2b380:	ldr	r3, [r3, #4]
   2b384:	str	r3, [r2, r1, lsl #2]
   2b388:	add	r1, r1, #1
   2b38c:	ldr	r3, [r8, #8]
   2b390:	cmp	r1, r3
   2b394:	blt	2b37c <__assert_fail@plt+0x194e8>
   2b398:	ldr	sl, [ip, #4]
   2b39c:	b	2b354 <__assert_fail@plt+0x194c0>
   2b3a0:	ldr	r1, [ip, #8]
   2b3a4:	ldr	r2, [r0]
   2b3a8:	ldr	r1, [r1, r6, lsl #2]
   2b3ac:	add	r1, r2, r1, lsl #3
   2b3b0:	ldr	r4, [r1, #4]
   2b3b4:	ldr	r1, [sp, #16]
   2b3b8:	and	r1, r4, r1
   2b3bc:	cmp	r1, #1
   2b3c0:	beq	2b444 <__assert_fail@plt+0x195b0>
   2b3c4:	ldr	r5, [sp, #24]
   2b3c8:	mov	r2, #32
   2b3cc:	movw	r1, #65280	; 0xff00
   2b3d0:	and	r2, r2, r4, lsr #15
   2b3d4:	movt	r1, #3
   2b3d8:	and	r1, r4, r1
   2b3dc:	ldrb	r3, [r5]
   2b3e0:	orr	r2, r3, r2
   2b3e4:	uxtb	r3, r4
   2b3e8:	cmp	r3, #4
   2b3ec:	strb	r2, [r5]
   2b3f0:	beq	2b404 <__assert_fail@plt+0x19570>
   2b3f4:	cmp	r3, #2
   2b3f8:	bne	2b414 <__assert_fail@plt+0x19580>
   2b3fc:	mov	r3, #16
   2b400:	b	2b408 <__assert_fail@plt+0x19574>
   2b404:	mov	r3, #64	; 0x40
   2b408:	orr	r2, r2, r3
   2b40c:	ldr	r3, [sp, #24]
   2b410:	strb	r2, [r3]
   2b414:	cmp	r1, #0
   2b418:	beq	2b444 <__assert_fail@plt+0x195b0>
   2b41c:	ldr	r1, [r8, #40]	; 0x28
   2b420:	cmp	r1, lr
   2b424:	beq	2b2ac <__assert_fail@plt+0x19418>
   2b428:	tst	r4, #4608	; 0x1200
   2b42c:	bne	2b340 <__assert_fail@plt+0x194ac>
   2b430:	ldr	r1, [sp, #4]
   2b434:	cmp	r1, #0
   2b438:	bne	2b444 <__assert_fail@plt+0x195b0>
   2b43c:	ands	r1, r4, #16384	; 0x4000
   2b440:	bne	2b340 <__assert_fail@plt+0x194ac>
   2b444:	add	r6, r6, #1
   2b448:	cmp	r6, sl
   2b44c:	blt	2b3a0 <__assert_fail@plt+0x1950c>
   2b450:	b	2b7e4 <__assert_fail@plt+0x19950>
   2b454:	movw	r1, #65280	; 0xff00
   2b458:	mov	r6, #0
   2b45c:	mov	r9, #0
   2b460:	movt	r1, #3
   2b464:	add	r1, r1, #255	; 0xff
   2b468:	str	r1, [sp, #16]
   2b46c:	b	2b564 <__assert_fail@plt+0x196d0>
   2b470:	mov	r0, #12
   2b474:	bl	36fb4 <__assert_fail@plt+0x25120>
   2b478:	cmp	r0, #0
   2b47c:	beq	2b804 <__assert_fail@plt+0x19970>
   2b480:	ldr	ip, [sp, #20]
   2b484:	str	r0, [r8, #40]	; 0x28
   2b488:	mov	r5, r0
   2b48c:	ldr	sl, [ip, #4]
   2b490:	cmp	sl, #0
   2b494:	str	sl, [r0, #4]
   2b498:	ble	2b4d0 <__assert_fail@plt+0x1963c>
   2b49c:	lsl	r0, sl, #2
   2b4a0:	str	sl, [r5]
   2b4a4:	bl	36fb4 <__assert_fail@plt+0x25120>
   2b4a8:	cmp	r0, #0
   2b4ac:	str	r0, [r5, #8]
   2b4b0:	beq	2b814 <__assert_fail@plt+0x19980>
   2b4b4:	ldr	r5, [sp, #20]
   2b4b8:	ldr	sl, [r5, #4]
   2b4bc:	ldr	r1, [r5, #8]
   2b4c0:	lsl	r2, sl, #2
   2b4c4:	bl	11a8c <memcpy@plt>
   2b4c8:	mov	ip, r5
   2b4cc:	b	2b4e0 <__assert_fail@plt+0x1964c>
   2b4d0:	mov	r0, #0
   2b4d4:	str	r0, [r5]
   2b4d8:	str	r0, [r5, #4]
   2b4dc:	str	r0, [r5, #8]
   2b4e0:	ldr	r1, [sp, #24]
   2b4e4:	ldr	lr, [sp, #8]
   2b4e8:	mov	r9, #0
   2b4ec:	ldrb	r0, [r1]
   2b4f0:	orr	r0, r0, #128	; 0x80
   2b4f4:	strb	r0, [r1]
   2b4f8:	ldr	r0, [sp, #12]
   2b4fc:	tst	r4, #256	; 0x100
   2b500:	beq	2b5f4 <__assert_fail@plt+0x19760>
   2b504:	sub	r1, r6, r9
   2b508:	cmp	r1, #0
   2b50c:	ldrge	r2, [r8, #8]
   2b510:	cmpge	r2, r1
   2b514:	bgt	2b52c <__assert_fail@plt+0x19698>
   2b518:	add	r9, r9, #1
   2b51c:	add	r6, r6, #1
   2b520:	cmp	r6, sl
   2b524:	blt	2b564 <__assert_fail@plt+0x196d0>
   2b528:	b	2b7e4 <__assert_fail@plt+0x19950>
   2b52c:	sub	r2, r2, #1
   2b530:	cmp	r2, r1
   2b534:	str	r2, [r8, #8]
   2b538:	ble	2b518 <__assert_fail@plt+0x19684>
   2b53c:	ldr	r2, [r8, #12]
   2b540:	add	r3, r2, r1, lsl #2
   2b544:	ldr	r3, [r3, #4]
   2b548:	str	r3, [r2, r1, lsl #2]
   2b54c:	add	r1, r1, #1
   2b550:	ldr	r3, [r8, #8]
   2b554:	cmp	r1, r3
   2b558:	blt	2b540 <__assert_fail@plt+0x196ac>
   2b55c:	ldr	sl, [ip, #4]
   2b560:	b	2b518 <__assert_fail@plt+0x19684>
   2b564:	ldr	r1, [ip, #8]
   2b568:	ldr	r2, [r0]
   2b56c:	ldr	r1, [r1, r6, lsl #2]
   2b570:	add	r1, r2, r1, lsl #3
   2b574:	ldr	r4, [r1, #4]
   2b578:	ldr	r1, [sp, #16]
   2b57c:	and	r1, r4, r1
   2b580:	cmp	r1, #1
   2b584:	beq	2b608 <__assert_fail@plt+0x19774>
   2b588:	ldr	r5, [sp, #24]
   2b58c:	mov	r2, #32
   2b590:	movw	r1, #65280	; 0xff00
   2b594:	and	r2, r2, r4, lsr #15
   2b598:	movt	r1, #3
   2b59c:	and	r1, r4, r1
   2b5a0:	ldrb	r3, [r5]
   2b5a4:	orr	r2, r3, r2
   2b5a8:	uxtb	r3, r4
   2b5ac:	cmp	r3, #4
   2b5b0:	strb	r2, [r5]
   2b5b4:	beq	2b5c8 <__assert_fail@plt+0x19734>
   2b5b8:	cmp	r3, #2
   2b5bc:	bne	2b5d8 <__assert_fail@plt+0x19744>
   2b5c0:	mov	r3, #16
   2b5c4:	b	2b5cc <__assert_fail@plt+0x19738>
   2b5c8:	mov	r3, #64	; 0x40
   2b5cc:	orr	r2, r2, r3
   2b5d0:	ldr	r3, [sp, #24]
   2b5d4:	strb	r2, [r3]
   2b5d8:	cmp	r1, #0
   2b5dc:	beq	2b608 <__assert_fail@plt+0x19774>
   2b5e0:	ldr	r1, [r8, #40]	; 0x28
   2b5e4:	cmp	r1, lr
   2b5e8:	beq	2b470 <__assert_fail@plt+0x195dc>
   2b5ec:	tst	r4, #256	; 0x100
   2b5f0:	bne	2b504 <__assert_fail@plt+0x19670>
   2b5f4:	ldr	r1, [sp, #4]
   2b5f8:	cmp	r1, #0
   2b5fc:	bne	2b608 <__assert_fail@plt+0x19774>
   2b600:	ands	r1, r4, #16384	; 0x4000
   2b604:	bne	2b504 <__assert_fail@plt+0x19670>
   2b608:	add	r6, r6, #1
   2b60c:	cmp	r6, sl
   2b610:	blt	2b564 <__assert_fail@plt+0x196d0>
   2b614:	b	2b7e4 <__assert_fail@plt+0x19950>
   2b618:	movw	r1, #65280	; 0xff00
   2b61c:	mov	r9, #0
   2b620:	mov	r5, #0
   2b624:	movt	r1, #3
   2b628:	add	r1, r1, #255	; 0xff
   2b62c:	str	r1, [sp, #16]
   2b630:	ldr	r1, [ip, #8]
   2b634:	ldr	r2, [r0]
   2b638:	ldr	r1, [r1, r9, lsl #2]
   2b63c:	add	r1, r2, r1, lsl #3
   2b640:	ldr	r6, [r1, #4]
   2b644:	ldr	r1, [sp, #16]
   2b648:	and	r1, r6, r1
   2b64c:	cmp	r1, #1
   2b650:	beq	2b6d4 <__assert_fail@plt+0x19840>
   2b654:	ldr	r4, [sp, #24]
   2b658:	mov	r2, #32
   2b65c:	movw	r1, #65280	; 0xff00
   2b660:	and	r2, r2, r6, lsr #15
   2b664:	movt	r1, #3
   2b668:	and	r1, r6, r1
   2b66c:	ldrb	r3, [r4]
   2b670:	orr	r2, r3, r2
   2b674:	uxtb	r3, r6
   2b678:	cmp	r3, #2
   2b67c:	strb	r2, [r4]
   2b680:	beq	2b694 <__assert_fail@plt+0x19800>
   2b684:	cmp	r3, #4
   2b688:	bne	2b6a4 <__assert_fail@plt+0x19810>
   2b68c:	mov	r3, #64	; 0x40
   2b690:	b	2b698 <__assert_fail@plt+0x19804>
   2b694:	mov	r3, #16
   2b698:	orr	r2, r2, r3
   2b69c:	ldr	r3, [sp, #24]
   2b6a0:	strb	r2, [r3]
   2b6a4:	cmp	r1, #0
   2b6a8:	beq	2b6d4 <__assert_fail@plt+0x19840>
   2b6ac:	ldr	r1, [r8, #40]	; 0x28
   2b6b0:	cmp	r1, lr
   2b6b4:	beq	2b6e4 <__assert_fail@plt+0x19850>
   2b6b8:	tst	r6, #512	; 0x200
   2b6bc:	bne	2b778 <__assert_fail@plt+0x198e4>
   2b6c0:	ldr	r1, [sp, #4]
   2b6c4:	cmp	r1, #0
   2b6c8:	bne	2b6d4 <__assert_fail@plt+0x19840>
   2b6cc:	ands	r1, r6, #16384	; 0x4000
   2b6d0:	bne	2b778 <__assert_fail@plt+0x198e4>
   2b6d4:	add	r9, r9, #1
   2b6d8:	cmp	r9, sl
   2b6dc:	blt	2b630 <__assert_fail@plt+0x1979c>
   2b6e0:	b	2b7e4 <__assert_fail@plt+0x19950>
   2b6e4:	mov	r0, #12
   2b6e8:	bl	36fb4 <__assert_fail@plt+0x25120>
   2b6ec:	cmp	r0, #0
   2b6f0:	beq	2b804 <__assert_fail@plt+0x19970>
   2b6f4:	ldr	ip, [sp, #20]
   2b6f8:	str	r0, [r8, #40]	; 0x28
   2b6fc:	mov	r5, r0
   2b700:	ldr	sl, [ip, #4]
   2b704:	cmp	sl, #1
   2b708:	str	sl, [r0, #4]
   2b70c:	blt	2b744 <__assert_fail@plt+0x198b0>
   2b710:	lsl	r0, sl, #2
   2b714:	str	sl, [r5]
   2b718:	bl	36fb4 <__assert_fail@plt+0x25120>
   2b71c:	cmp	r0, #0
   2b720:	str	r0, [r5, #8]
   2b724:	beq	2b814 <__assert_fail@plt+0x19980>
   2b728:	ldr	r4, [sp, #20]
   2b72c:	ldr	sl, [r4, #4]
   2b730:	ldr	r1, [r4, #8]
   2b734:	lsl	r2, sl, #2
   2b738:	bl	11a8c <memcpy@plt>
   2b73c:	mov	ip, r4
   2b740:	b	2b754 <__assert_fail@plt+0x198c0>
   2b744:	mov	r0, #0
   2b748:	str	r0, [r5]
   2b74c:	str	r0, [r5, #4]
   2b750:	str	r0, [r5, #8]
   2b754:	ldr	r1, [sp, #24]
   2b758:	ldr	lr, [sp, #8]
   2b75c:	mov	r5, #0
   2b760:	ldrb	r0, [r1]
   2b764:	orr	r0, r0, #128	; 0x80
   2b768:	strb	r0, [r1]
   2b76c:	ldr	r0, [sp, #12]
   2b770:	tst	r6, #512	; 0x200
   2b774:	beq	2b6c0 <__assert_fail@plt+0x1982c>
   2b778:	sub	r1, r9, r5
   2b77c:	cmp	r1, #0
   2b780:	ldrge	r2, [r8, #8]
   2b784:	cmpge	r2, r1
   2b788:	bgt	2b7a0 <__assert_fail@plt+0x1990c>
   2b78c:	add	r5, r5, #1
   2b790:	add	r9, r9, #1
   2b794:	cmp	r9, sl
   2b798:	blt	2b630 <__assert_fail@plt+0x1979c>
   2b79c:	b	2b7e4 <__assert_fail@plt+0x19950>
   2b7a0:	sub	r2, r2, #1
   2b7a4:	cmp	r2, r1
   2b7a8:	str	r2, [r8, #8]
   2b7ac:	ble	2b78c <__assert_fail@plt+0x198f8>
   2b7b0:	ldr	r2, [r8, #12]
   2b7b4:	add	r3, r2, r1, lsl #2
   2b7b8:	ldr	r3, [r3, #4]
   2b7bc:	str	r3, [r2, r1, lsl #2]
   2b7c0:	add	r1, r1, #1
   2b7c4:	ldr	r3, [r8, #8]
   2b7c8:	cmp	r1, r3
   2b7cc:	blt	2b7b4 <__assert_fail@plt+0x19920>
   2b7d0:	ldr	sl, [ip, #4]
   2b7d4:	add	r5, r5, #1
   2b7d8:	add	r9, r9, #1
   2b7dc:	cmp	r9, sl
   2b7e0:	blt	2b630 <__assert_fail@plt+0x1979c>
   2b7e4:	mov	r1, r8
   2b7e8:	mov	r2, r7
   2b7ec:	bl	2b860 <__assert_fail@plt+0x199cc>
   2b7f0:	cmp	r0, #0
   2b7f4:	bne	2b804 <__assert_fail@plt+0x19970>
   2b7f8:	mov	r0, r8
   2b7fc:	sub	sp, fp, #28
   2b800:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b804:	mov	r0, r8
   2b808:	bl	24df0 <__assert_fail@plt+0x12f5c>
   2b80c:	ldr	sl, [sp]
   2b810:	b	2b830 <__assert_fail@plt+0x1999c>
   2b814:	ldr	sl, [sp]
   2b818:	add	r0, r5, #4
   2b81c:	mov	r1, #0
   2b820:	str	r1, [r0]
   2b824:	mov	r0, r8
   2b828:	str	r1, [r5]
   2b82c:	bl	24df0 <__assert_fail@plt+0x12f5c>
   2b830:	mov	r0, #12
   2b834:	mov	r8, #0
   2b838:	str	r0, [sl]
   2b83c:	mov	r0, r8
   2b840:	sub	sp, fp, #28
   2b844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b848:	mov	r0, #0
   2b84c:	str	r0, [r8, #4]
   2b850:	str	r0, [r8, #8]
   2b854:	mov	r0, r8
   2b858:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2b85c:	b	2b80c <__assert_fail@plt+0x19978>
   2b860:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b864:	add	fp, sp, #28
   2b868:	sub	sp, sp, #4
   2b86c:	str	r2, [r1]
   2b870:	mov	r4, r1
   2b874:	mov	r7, r0
   2b878:	mov	r0, #0
   2b87c:	mov	r9, r2
   2b880:	ldr	r1, [r1, #8]
   2b884:	str	r1, [r4, #16]
   2b888:	str	r0, [r4, #20]
   2b88c:	lsl	r0, r1, #2
   2b890:	bl	36fb4 <__assert_fail@plt+0x25120>
   2b894:	mov	r8, #12
   2b898:	cmp	r0, #0
   2b89c:	str	r0, [r4, #24]
   2b8a0:	beq	2b960 <__assert_fail@plt+0x19acc>
   2b8a4:	ldr	r1, [r4, #8]
   2b8a8:	cmp	r1, #1
   2b8ac:	blt	2b920 <__assert_fail@plt+0x19a8c>
   2b8b0:	mov	r5, #0
   2b8b4:	mov	sl, #2
   2b8b8:	ldr	r2, [r4, #12]
   2b8bc:	ldr	r6, [r2, r5, lsl #2]
   2b8c0:	ldr	r2, [r7]
   2b8c4:	add	r2, r2, r6, lsl #3
   2b8c8:	ldrb	r2, [r2, #4]
   2b8cc:	tst	r2, #8
   2b8d0:	bne	2b914 <__assert_fail@plt+0x19a80>
   2b8d4:	ldr	r2, [r4, #16]
   2b8d8:	ldr	r1, [r4, #20]
   2b8dc:	cmp	r2, r1
   2b8e0:	bne	2b904 <__assert_fail@plt+0x19a70>
   2b8e4:	add	r1, sl, r2, lsl #1
   2b8e8:	str	r1, [r4, #16]
   2b8ec:	lsl	r1, r1, #2
   2b8f0:	bl	36fe4 <__assert_fail@plt+0x25150>
   2b8f4:	cmp	r0, #0
   2b8f8:	beq	2b960 <__assert_fail@plt+0x19acc>
   2b8fc:	str	r0, [r4, #24]
   2b900:	ldr	r1, [r4, #20]
   2b904:	add	r2, r1, #1
   2b908:	str	r2, [r4, #20]
   2b90c:	str	r6, [r0, r1, lsl #2]
   2b910:	ldr	r1, [r4, #8]
   2b914:	add	r5, r5, #1
   2b918:	cmp	r5, r1
   2b91c:	blt	2b8b8 <__assert_fail@plt+0x19a24>
   2b920:	ldr	r1, [r7, #68]	; 0x44
   2b924:	ldr	r0, [r7, #32]
   2b928:	and	r1, r1, r9
   2b92c:	mov	r5, r0
   2b930:	add	r2, r1, r1, lsl #1
   2b934:	ldr	r1, [r5, r2, lsl #2]!
   2b938:	mov	r6, r5
   2b93c:	ldr	r3, [r6, #4]!
   2b940:	cmp	r3, r1
   2b944:	ble	2b96c <__assert_fail@plt+0x19ad8>
   2b948:	add	r0, r0, r2, lsl #2
   2b94c:	ldr	r0, [r0, #8]
   2b950:	add	r2, r1, #1
   2b954:	mov	r8, #0
   2b958:	str	r2, [r5]
   2b95c:	str	r4, [r0, r1, lsl #2]
   2b960:	mov	r0, r8
   2b964:	sub	sp, fp, #28
   2b968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b96c:	add	r7, r0, r2, lsl #2
   2b970:	mov	r2, #2
   2b974:	ldr	r0, [r7, #8]!
   2b978:	add	r9, r2, r1, lsl #1
   2b97c:	lsl	r1, r9, #2
   2b980:	bl	36fe4 <__assert_fail@plt+0x25150>
   2b984:	cmp	r0, #0
   2b988:	beq	2b960 <__assert_fail@plt+0x19acc>
   2b98c:	str	r0, [r7]
   2b990:	str	r9, [r6]
   2b994:	ldr	r1, [r5]
   2b998:	b	2b950 <__assert_fail@plt+0x19abc>
   2b99c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b9a0:	add	fp, sp, #28
   2b9a4:	sub	sp, sp, #36	; 0x24
   2b9a8:	mov	r4, r0
   2b9ac:	ldr	r0, [r0, #24]
   2b9b0:	mov	r6, r2
   2b9b4:	mov	r9, r1
   2b9b8:	cmp	r0, r1
   2b9bc:	ble	2bbd8 <__assert_fail@plt+0x19d44>
   2b9c0:	ldr	r0, [r4, #80]	; 0x50
   2b9c4:	mov	r1, #4
   2b9c8:	mov	r5, r9
   2b9cc:	cmp	r0, #2
   2b9d0:	movge	r0, #0
   2b9d4:	strge	r0, [r4, #16]
   2b9d8:	strge	r0, [r4, #20]
   2b9dc:	mov	r0, #0
   2b9e0:	tst	r6, #1
   2b9e4:	str	r0, [r4, #24]
   2b9e8:	str	r0, [r4, #28]
   2b9ec:	str	r0, [r4, #32]
   2b9f0:	strb	r0, [r4, #76]	; 0x4c
   2b9f4:	movweq	r1, #6
   2b9f8:	ldr	r2, [r4, #44]	; 0x2c
   2b9fc:	ldr	r3, [r4, #52]	; 0x34
   2ba00:	str	r2, [r4, #48]	; 0x30
   2ba04:	str	r3, [r4, #56]	; 0x38
   2ba08:	str	r1, [r4, #60]	; 0x3c
   2ba0c:	ldrb	r1, [r4, #75]	; 0x4b
   2ba10:	cmp	r1, #0
   2ba14:	ldreq	r1, [r4]
   2ba18:	streq	r1, [r4, #4]
   2ba1c:	cmp	r5, #0
   2ba20:	beq	2bb54 <__assert_fail@plt+0x19cc0>
   2ba24:	ldr	r1, [r4, #32]
   2ba28:	cmp	r5, r1
   2ba2c:	bge	2bbe8 <__assert_fail@plt+0x19d54>
   2ba30:	ldrb	r0, [r4, #76]	; 0x4c
   2ba34:	cmp	r0, #0
   2ba38:	bne	2bd98 <__assert_fail@plt+0x19f04>
   2ba3c:	cmp	r5, #0
   2ba40:	ble	2ba84 <__assert_fail@plt+0x19bf0>
   2ba44:	ldr	r1, [r4, #48]	; 0x30
   2ba48:	sub	r0, r5, #1
   2ba4c:	cmp	r1, r0
   2ba50:	beq	2be60 <__assert_fail@plt+0x19fcc>
   2ba54:	ldr	r1, [r4, #80]	; 0x50
   2ba58:	cmp	r1, #2
   2ba5c:	blt	2ba9c <__assert_fail@plt+0x19c08>
   2ba60:	ldr	r0, [r4, #8]
   2ba64:	mov	r1, r5
   2ba68:	sub	r0, r0, #4
   2ba6c:	ldr	r6, [r0, r1, lsl #2]
   2ba70:	cmn	r6, #1
   2ba74:	bne	2bad0 <__assert_fail@plt+0x19c3c>
   2ba78:	sub	r1, r1, #1
   2ba7c:	cmp	r1, #0
   2ba80:	bgt	2ba6c <__assert_fail@plt+0x19bd8>
   2ba84:	ldr	r1, [r4, #60]	; 0x3c
   2ba88:	str	r1, [r4, #60]	; 0x3c
   2ba8c:	ldr	r0, [r4, #80]	; 0x50
   2ba90:	cmp	r0, #2
   2ba94:	bge	2bb04 <__assert_fail@plt+0x19c70>
   2ba98:	b	2bb1c <__assert_fail@plt+0x19c88>
   2ba9c:	ldr	r1, [r4, #4]
   2baa0:	ldr	r2, [r4, #68]	; 0x44
   2baa4:	ldrb	r0, [r1, r0]
   2baa8:	ubfx	r1, r0, #5, #3
   2baac:	and	r3, r0, #31
   2bab0:	ldr	r2, [r2, r1, lsl #2]
   2bab4:	mov	r1, #1
   2bab8:	tst	r2, r1, lsl r3
   2babc:	bne	2baf4 <__assert_fail@plt+0x19c60>
   2bac0:	mov	r1, #0
   2bac4:	cmp	r0, #10
   2bac8:	beq	2bae8 <__assert_fail@plt+0x19c54>
   2bacc:	b	2baf4 <__assert_fail@plt+0x19c60>
   2bad0:	ldrb	r0, [r4, #78]	; 0x4e
   2bad4:	cmp	r0, #0
   2bad8:	bne	2c05c <__assert_fail@plt+0x1a1c8>
   2badc:	mov	r1, #0
   2bae0:	cmp	r6, #10
   2bae4:	bne	2baf4 <__assert_fail@plt+0x19c60>
   2bae8:	ldrb	r1, [r4, #77]	; 0x4d
   2baec:	cmp	r1, #0
   2baf0:	movwne	r1, #2
   2baf4:	str	r1, [r4, #60]	; 0x3c
   2baf8:	ldr	r0, [r4, #80]	; 0x50
   2bafc:	cmp	r0, #2
   2bb00:	blt	2bb1c <__assert_fail@plt+0x19c88>
   2bb04:	ldr	r2, [r4, #28]
   2bb08:	ldr	r0, [r4, #8]
   2bb0c:	sub	r2, r2, r5
   2bb10:	add	r1, r0, r5, lsl #2
   2bb14:	lsl	r2, r2, #2
   2bb18:	bl	11a50 <memmove@plt>
   2bb1c:	ldrb	r0, [r4, #75]	; 0x4b
   2bb20:	cmp	r0, #0
   2bb24:	bne	2be48 <__assert_fail@plt+0x19fb4>
   2bb28:	ldr	r0, [r4, #28]
   2bb2c:	ldr	r1, [r4, #32]
   2bb30:	sub	r0, r0, r5
   2bb34:	sub	r1, r1, r5
   2bb38:	str	r0, [r4, #28]
   2bb3c:	str	r1, [r4, #32]
   2bb40:	ldrb	r0, [r4, #75]	; 0x4b
   2bb44:	cmp	r0, #0
   2bb48:	ldreq	r0, [r4, #4]
   2bb4c:	addeq	r0, r0, r5
   2bb50:	streq	r0, [r4, #4]
   2bb54:	str	r9, [r4, #24]
   2bb58:	ldr	r0, [r4, #48]	; 0x30
   2bb5c:	ldr	r3, [r4, #80]	; 0x50
   2bb60:	ldr	r2, [r4, #56]	; 0x38
   2bb64:	sub	r1, r0, r5
   2bb68:	cmp	r3, #2
   2bb6c:	sub	r0, r2, r5
   2bb70:	str	r1, [r4, #48]	; 0x30
   2bb74:	str	r0, [r4, #56]	; 0x38
   2bb78:	blt	2bba0 <__assert_fail@plt+0x19d0c>
   2bb7c:	ldrb	r0, [r4, #72]	; 0x48
   2bb80:	cmp	r0, #0
   2bb84:	beq	2bbc0 <__assert_fail@plt+0x19d2c>
   2bb88:	mov	r0, r4
   2bb8c:	bl	24e50 <__assert_fail@plt+0x12fbc>
   2bb90:	cmp	r0, #0
   2bb94:	beq	2bbc8 <__assert_fail@plt+0x19d34>
   2bb98:	sub	sp, fp, #28
   2bb9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bba0:	ldrb	r0, [r4, #75]	; 0x4b
   2bba4:	cmp	r0, #0
   2bba8:	bne	2be7c <__assert_fail@plt+0x19fe8>
   2bbac:	str	r1, [r4, #28]
   2bbb0:	mov	r0, #0
   2bbb4:	str	r0, [r4, #40]	; 0x28
   2bbb8:	sub	sp, fp, #28
   2bbbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bbc0:	mov	r0, r4
   2bbc4:	bl	25510 <__assert_fail@plt+0x1367c>
   2bbc8:	mov	r0, #0
   2bbcc:	str	r0, [r4, #40]	; 0x28
   2bbd0:	sub	sp, fp, #28
   2bbd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bbd8:	sub	r5, r9, r0
   2bbdc:	cmp	r5, #0
   2bbe0:	bne	2ba24 <__assert_fail@plt+0x19b90>
   2bbe4:	b	2bb54 <__assert_fail@plt+0x19cc0>
   2bbe8:	ldrb	r2, [r4, #76]	; 0x4c
   2bbec:	ldr	lr, [r4, #28]
   2bbf0:	cmp	r2, #0
   2bbf4:	bne	2c1d0 <__assert_fail@plt+0x1a33c>
   2bbf8:	mov	r2, #0
   2bbfc:	str	r2, [r4, #28]
   2bc00:	ldr	r3, [r4, #80]	; 0x50
   2bc04:	cmp	r3, #2
   2bc08:	blt	2bf0c <__assert_fail@plt+0x1a078>
   2bc0c:	ldrb	r2, [r4, #73]	; 0x49
   2bc10:	cmp	r2, #0
   2bc14:	beq	2bcd0 <__assert_fail@plt+0x19e3c>
   2bc18:	ldr	r7, [r4]
   2bc1c:	sub	r3, r5, r3
   2bc20:	add	ip, r7, r0
   2bc24:	add	r3, ip, r3
   2bc28:	add	r8, ip, r5
   2bc2c:	cmp	r3, r7
   2bc30:	movcc	r3, r7
   2bc34:	mov	r7, r8
   2bc38:	sub	r7, r7, #1
   2bc3c:	cmp	r7, r3
   2bc40:	bcc	2bcd0 <__assert_fail@plt+0x19e3c>
   2bc44:	ldrb	r2, [r7]
   2bc48:	and	r2, r2, #192	; 0xc0
   2bc4c:	cmp	r2, #128	; 0x80
   2bc50:	beq	2bc38 <__assert_fail@plt+0x19da4>
   2bc54:	ldr	r0, [r4, #48]	; 0x30
   2bc58:	mov	sl, lr
   2bc5c:	mov	r1, r7
   2bc60:	add	r3, ip, r0
   2bc64:	ldr	r0, [r4, #64]	; 0x40
   2bc68:	sub	r2, r3, r7
   2bc6c:	cmp	r0, #0
   2bc70:	bne	2c39c <__assert_fail@plt+0x1a508>
   2bc74:	mov	r0, #0
   2bc78:	add	r3, sp, #24
   2bc7c:	str	r0, [sp, #28]
   2bc80:	str	r0, [sp, #24]
   2bc84:	add	r0, sp, #20
   2bc88:	bl	38138 <__assert_fail@plt+0x262a4>
   2bc8c:	sub	r1, r8, r7
   2bc90:	mvn	r7, #0
   2bc94:	cmp	r0, r1
   2bc98:	bcc	2bcbc <__assert_fail@plt+0x19e28>
   2bc9c:	cmn	r0, #3
   2bca0:	bhi	2bcbc <__assert_fail@plt+0x19e28>
   2bca4:	mov	r2, #0
   2bca8:	sub	r0, r0, r1
   2bcac:	str	r2, [r4, #16]
   2bcb0:	str	r2, [r4, #20]
   2bcb4:	str	r0, [r4, #28]
   2bcb8:	ldr	r7, [sp, #20]
   2bcbc:	cmn	r7, #1
   2bcc0:	bne	2bd7c <__assert_fail@plt+0x19ee8>
   2bcc4:	ldr	r0, [r4, #24]
   2bcc8:	ldr	r1, [r4, #32]
   2bccc:	mov	lr, sl
   2bcd0:	add	r8, r1, r0
   2bcd4:	cmp	r8, r9
   2bcd8:	bge	2c07c <__assert_fail@plt+0x1a1e8>
   2bcdc:	add	sl, r4, #16
   2bce0:	str	lr, [sp]
   2bce4:	ldr	r0, [r4]
   2bce8:	ldr	r2, [r4, #44]	; 0x2c
   2bcec:	mov	r3, sl
   2bcf0:	add	r1, r0, r8
   2bcf4:	ldr	r0, [sl]
   2bcf8:	sub	r7, r2, r8
   2bcfc:	mov	r2, r7
   2bd00:	str	r0, [sp, #8]
   2bd04:	ldr	r0, [sl, #4]
   2bd08:	str	r0, [sp, #4]
   2bd0c:	add	r0, sp, #24
   2bd10:	bl	38138 <__assert_fail@plt+0x262a4>
   2bd14:	sub	r1, r0, #1
   2bd18:	cmn	r1, #3
   2bd1c:	bcs	2bd34 <__assert_fail@plt+0x19ea0>
   2bd20:	ldr	r7, [sp, #24]
   2bd24:	add	r8, r0, r8
   2bd28:	cmp	r8, r9
   2bd2c:	blt	2bce4 <__assert_fail@plt+0x19e50>
   2bd30:	b	2bd68 <__assert_fail@plt+0x19ed4>
   2bd34:	cmp	r7, #0
   2bd38:	mov	r1, #0
   2bd3c:	ldr	r3, [sp, #4]
   2bd40:	ldr	r2, [sp, #8]
   2bd44:	cmpne	r0, #0
   2bd48:	ldrne	r0, [r4]
   2bd4c:	ldrbne	r1, [r0, r8]
   2bd50:	stm	sl, {r2, r3}
   2bd54:	mov	r0, #1
   2bd58:	mov	r7, r1
   2bd5c:	add	r8, r0, r8
   2bd60:	cmp	r8, r9
   2bd64:	blt	2bce4 <__assert_fail@plt+0x19e50>
   2bd68:	ldr	lr, [sp]
   2bd6c:	sub	r0, r8, r9
   2bd70:	cmn	r7, #1
   2bd74:	str	r0, [r4, #28]
   2bd78:	beq	2c084 <__assert_fail@plt+0x1a1f0>
   2bd7c:	ldrb	r0, [r4, #78]	; 0x4e
   2bd80:	cmp	r0, #0
   2bd84:	bne	2c36c <__assert_fail@plt+0x1a4d8>
   2bd88:	mov	r1, #0
   2bd8c:	cmp	r7, #10
   2bd90:	beq	2c1a8 <__assert_fail@plt+0x1a314>
   2bd94:	b	2c1b4 <__assert_fail@plt+0x1a320>
   2bd98:	ldr	ip, [r4, #12]
   2bd9c:	ldr	r0, [r4, #28]
   2bda0:	mov	r1, #0
   2bda4:	add	r2, r1, r0
   2bda8:	add	r2, r2, r2, lsr #31
   2bdac:	asr	r7, r2, #1
   2bdb0:	ldr	r3, [ip, r7, lsl #2]
   2bdb4:	mov	r2, r7
   2bdb8:	cmp	r3, r5
   2bdbc:	bgt	2bdcc <__assert_fail@plt+0x19f38>
   2bdc0:	bge	2bdd8 <__assert_fail@plt+0x19f44>
   2bdc4:	add	r1, r7, #1
   2bdc8:	mov	r2, r0
   2bdcc:	cmp	r1, r2
   2bdd0:	mov	r0, r2
   2bdd4:	blt	2bda4 <__assert_fail@plt+0x19f10>
   2bdd8:	mov	r8, #0
   2bddc:	cmp	r3, r5
   2bde0:	movwlt	r8, #1
   2bde4:	add	sl, r7, r8
   2bde8:	cmp	sl, #0
   2bdec:	ble	2be30 <__assert_fail@plt+0x19f9c>
   2bdf0:	ldr	r1, [r4, #48]	; 0x30
   2bdf4:	sub	r0, sl, #1
   2bdf8:	cmp	r1, r0
   2bdfc:	beq	2c1f8 <__assert_fail@plt+0x1a364>
   2be00:	ldr	r1, [r4, #80]	; 0x50
   2be04:	cmp	r1, #2
   2be08:	blt	2bf68 <__assert_fail@plt+0x1a0d4>
   2be0c:	ldr	r0, [r4, #8]
   2be10:	mov	r1, sl
   2be14:	sub	r0, r0, #4
   2be18:	ldr	r6, [r0, r1, lsl #2]
   2be1c:	cmn	r6, #1
   2be20:	bne	2bf9c <__assert_fail@plt+0x1a108>
   2be24:	sub	r1, r1, #1
   2be28:	cmp	r1, #0
   2be2c:	bgt	2be18 <__assert_fail@plt+0x19f84>
   2be30:	ldr	r1, [r4, #60]	; 0x3c
   2be34:	str	r1, [r4, #60]	; 0x3c
   2be38:	cmp	sl, r5
   2be3c:	ldr	r2, [r4, #28]
   2be40:	beq	2bfd0 <__assert_fail@plt+0x1a13c>
   2be44:	b	2c210 <__assert_fail@plt+0x1a37c>
   2be48:	ldr	r2, [r4, #28]
   2be4c:	ldr	r0, [r4, #4]
   2be50:	add	r1, r0, r5
   2be54:	sub	r2, r2, r5
   2be58:	bl	11a50 <memmove@plt>
   2be5c:	b	2bb28 <__assert_fail@plt+0x19c94>
   2be60:	and	r0, r6, #2
   2be64:	eor	r1, r0, #10
   2be68:	str	r1, [r4, #60]	; 0x3c
   2be6c:	ldr	r0, [r4, #80]	; 0x50
   2be70:	cmp	r0, #2
   2be74:	bge	2bb04 <__assert_fail@plt+0x19c70>
   2be78:	b	2bb1c <__assert_fail@plt+0x19c88>
   2be7c:	ldrb	r0, [r4, #72]	; 0x48
   2be80:	cmp	r0, #0
   2be84:	beq	2c0d0 <__assert_fail@plt+0x1a23c>
   2be88:	ldr	r6, [r4, #36]	; 0x24
   2be8c:	ldr	r5, [r4, #28]
   2be90:	cmp	r6, r1
   2be94:	movgt	r6, r1
   2be98:	cmp	r5, r6
   2be9c:	blt	2bea8 <__assert_fail@plt+0x1a014>
   2bea0:	b	2bef4 <__assert_fail@plt+0x1a060>
   2bea4:	ldr	r9, [r4, #24]
   2bea8:	ldr	r1, [r4]
   2beac:	ldr	r0, [r4, #64]	; 0x40
   2beb0:	add	r1, r1, r9
   2beb4:	cmp	r0, #0
   2beb8:	ldrb	r7, [r1, r5]
   2bebc:	ldrbne	r7, [r0, r7]
   2bec0:	add	r0, r7, #128	; 0x80
   2bec4:	lsr	r0, r0, #7
   2bec8:	cmp	r0, #2
   2becc:	bhi	2bedc <__assert_fail@plt+0x1a048>
   2bed0:	bl	11c24 <__ctype_toupper_loc@plt>
   2bed4:	ldr	r0, [r0]
   2bed8:	ldr	r7, [r0, r7, lsl #2]
   2bedc:	ldr	r0, [r4, #4]
   2bee0:	strb	r7, [r0, r5]
   2bee4:	add	r5, r5, #1
   2bee8:	cmp	r5, r6
   2beec:	blt	2bea4 <__assert_fail@plt+0x1a010>
   2bef0:	mov	r5, r6
   2bef4:	str	r5, [r4, #28]
   2bef8:	str	r5, [r4, #32]
   2befc:	mov	r0, #0
   2bf00:	str	r0, [r4, #40]	; 0x28
   2bf04:	sub	sp, fp, #28
   2bf08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bf0c:	ldr	r3, [r4]
   2bf10:	add	r0, r5, r0
   2bf14:	ldr	r1, [r4, #64]	; 0x40
   2bf18:	add	r0, r3, r0
   2bf1c:	cmp	r1, #0
   2bf20:	ldrb	r0, [r0, #-1]
   2bf24:	str	r2, [r4, #32]
   2bf28:	ldrbne	r0, [r1, r0]
   2bf2c:	ldr	r1, [r4, #68]	; 0x44
   2bf30:	ubfx	r2, r0, #5, #3
   2bf34:	and	r3, r0, #31
   2bf38:	ldr	r2, [r1, r2, lsl #2]
   2bf3c:	mov	r1, #1
   2bf40:	tst	r2, r1, lsl r3
   2bf44:	bne	2bf60 <__assert_fail@plt+0x1a0cc>
   2bf48:	mov	r1, #0
   2bf4c:	cmp	r0, #10
   2bf50:	bne	2bf60 <__assert_fail@plt+0x1a0cc>
   2bf54:	ldrb	r1, [r4, #77]	; 0x4d
   2bf58:	cmp	r1, #0
   2bf5c:	movwne	r1, #2
   2bf60:	str	r1, [r4, #60]	; 0x3c
   2bf64:	b	2bb40 <__assert_fail@plt+0x19cac>
   2bf68:	ldr	r1, [r4, #4]
   2bf6c:	ldr	r2, [r4, #68]	; 0x44
   2bf70:	ldrb	r0, [r1, r0]
   2bf74:	ubfx	r1, r0, #5, #3
   2bf78:	and	r3, r0, #31
   2bf7c:	ldr	r2, [r2, r1, lsl #2]
   2bf80:	mov	r1, #1
   2bf84:	tst	r2, r1, lsl r3
   2bf88:	bne	2bfc0 <__assert_fail@plt+0x1a12c>
   2bf8c:	mov	r1, #0
   2bf90:	cmp	r0, #10
   2bf94:	beq	2bfb4 <__assert_fail@plt+0x1a120>
   2bf98:	b	2bfc0 <__assert_fail@plt+0x1a12c>
   2bf9c:	ldrb	r0, [r4, #78]	; 0x4e
   2bfa0:	cmp	r0, #0
   2bfa4:	bne	2c34c <__assert_fail@plt+0x1a4b8>
   2bfa8:	mov	r1, #0
   2bfac:	cmp	r6, #10
   2bfb0:	bne	2bfc0 <__assert_fail@plt+0x1a12c>
   2bfb4:	ldrb	r1, [r4, #77]	; 0x4d
   2bfb8:	cmp	r1, #0
   2bfbc:	movwne	r1, #2
   2bfc0:	str	r1, [r4, #60]	; 0x3c
   2bfc4:	cmp	sl, r5
   2bfc8:	ldr	r2, [r4, #28]
   2bfcc:	bne	2c210 <__assert_fail@plt+0x1a37c>
   2bfd0:	cmp	r2, r5
   2bfd4:	ble	2c210 <__assert_fail@plt+0x1a37c>
   2bfd8:	ldr	r0, [r4, #12]
   2bfdc:	ldr	r0, [r0, r5, lsl #2]
   2bfe0:	cmp	r0, r5
   2bfe4:	bne	2c210 <__assert_fail@plt+0x1a37c>
   2bfe8:	ldr	r0, [r4, #8]
   2bfec:	sub	r2, r2, r5
   2bff0:	lsl	r2, r2, #2
   2bff4:	add	r1, r0, r5, lsl #2
   2bff8:	bl	11a50 <memmove@plt>
   2bffc:	ldr	r2, [r4, #28]
   2c000:	ldr	r0, [r4, #4]
   2c004:	add	r1, r0, r5
   2c008:	sub	r2, r2, r5
   2c00c:	bl	11a50 <memmove@plt>
   2c010:	ldr	r0, [r4, #28]
   2c014:	ldr	r1, [r4, #32]
   2c018:	sub	r0, r0, r5
   2c01c:	sub	r1, r1, r5
   2c020:	cmp	r0, #1
   2c024:	str	r0, [r4, #28]
   2c028:	str	r1, [r4, #32]
   2c02c:	blt	2bb40 <__assert_fail@plt+0x19cac>
   2c030:	ldr	r0, [r4, #12]
   2c034:	mov	r2, #0
   2c038:	add	r1, r0, r5, lsl #2
   2c03c:	ldr	r3, [r1, r2, lsl #2]
   2c040:	sub	r3, r3, r5
   2c044:	str	r3, [r0, r2, lsl #2]
   2c048:	add	r2, r2, #1
   2c04c:	ldr	r3, [r4, #28]
   2c050:	cmp	r2, r3
   2c054:	blt	2c03c <__assert_fail@plt+0x1a1a8>
   2c058:	b	2bb40 <__assert_fail@plt+0x19cac>
   2c05c:	mov	r0, r6
   2c060:	bl	11cb4 <iswalnum@plt>
   2c064:	mov	r1, #1
   2c068:	cmp	r6, #95	; 0x5f
   2c06c:	beq	2baf4 <__assert_fail@plt+0x19c60>
   2c070:	cmp	r0, #0
   2c074:	beq	2badc <__assert_fail@plt+0x19c48>
   2c078:	b	2baf4 <__assert_fail@plt+0x19c60>
   2c07c:	sub	r0, r8, r9
   2c080:	str	r0, [r4, #28]
   2c084:	cmp	lr, #0
   2c088:	ble	2c0c8 <__assert_fail@plt+0x1a234>
   2c08c:	ldr	r1, [r4, #48]	; 0x30
   2c090:	sub	r0, lr, #1
   2c094:	cmp	r1, r0
   2c098:	beq	2c340 <__assert_fail@plt+0x1a4ac>
   2c09c:	ldr	r1, [r4, #80]	; 0x50
   2c0a0:	cmp	r1, #2
   2c0a4:	blt	2c15c <__assert_fail@plt+0x1a2c8>
   2c0a8:	ldr	r0, [r4, #8]
   2c0ac:	sub	r0, r0, #4
   2c0b0:	ldr	r6, [r0, lr, lsl #2]
   2c0b4:	cmn	r6, #1
   2c0b8:	bne	2c190 <__assert_fail@plt+0x1a2fc>
   2c0bc:	sub	lr, lr, #1
   2c0c0:	cmp	lr, #0
   2c0c4:	bgt	2c0b0 <__assert_fail@plt+0x1a21c>
   2c0c8:	ldr	r1, [r4, #60]	; 0x3c
   2c0cc:	b	2c1b4 <__assert_fail@plt+0x1a320>
   2c0d0:	ldr	r3, [r4, #64]	; 0x40
   2c0d4:	cmp	r3, #0
   2c0d8:	beq	2bbc8 <__assert_fail@plt+0x19d34>
   2c0dc:	ldr	r0, [r4, #36]	; 0x24
   2c0e0:	ldr	r2, [r4, #28]
   2c0e4:	cmp	r0, r1
   2c0e8:	movgt	r0, r1
   2c0ec:	cmp	r2, r0
   2c0f0:	bge	2c144 <__assert_fail@plt+0x1a2b0>
   2c0f4:	ldr	r7, [r4]
   2c0f8:	add	r1, r2, r9
   2c0fc:	ldr	r6, [r4, #4]
   2c100:	ldrb	r1, [r7, r1]
   2c104:	ldrb	r1, [r3, r1]
   2c108:	strb	r1, [r6, r2]
   2c10c:	add	r1, r2, #1
   2c110:	cmp	r1, r0
   2c114:	bge	2c140 <__assert_fail@plt+0x1a2ac>
   2c118:	ldm	r4, {r2, r3}
   2c11c:	ldr	r7, [r4, #24]
   2c120:	ldr	r6, [r4, #64]	; 0x40
   2c124:	add	r2, r2, r7
   2c128:	ldrb	r2, [r2, r1]
   2c12c:	ldrb	r2, [r6, r2]
   2c130:	strb	r2, [r3, r1]
   2c134:	add	r1, r1, #1
   2c138:	cmp	r1, r0
   2c13c:	blt	2c118 <__assert_fail@plt+0x1a284>
   2c140:	mov	r2, r0
   2c144:	str	r2, [r4, #28]
   2c148:	str	r2, [r4, #32]
   2c14c:	mov	r0, #0
   2c150:	str	r0, [r4, #40]	; 0x28
   2c154:	sub	sp, fp, #28
   2c158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c15c:	ldr	r1, [r4, #4]
   2c160:	ldr	r2, [r4, #68]	; 0x44
   2c164:	ldrb	r0, [r1, r0]
   2c168:	ubfx	r1, r0, #5, #3
   2c16c:	and	r3, r0, #31
   2c170:	ldr	r2, [r2, r1, lsl #2]
   2c174:	mov	r1, #1
   2c178:	tst	r2, r1, lsl r3
   2c17c:	bne	2c1b4 <__assert_fail@plt+0x1a320>
   2c180:	mov	r1, #0
   2c184:	cmp	r0, #10
   2c188:	beq	2c1a8 <__assert_fail@plt+0x1a314>
   2c18c:	b	2c1b4 <__assert_fail@plt+0x1a320>
   2c190:	ldrb	r0, [r4, #78]	; 0x4e
   2c194:	cmp	r0, #0
   2c198:	bne	2c3e4 <__assert_fail@plt+0x1a550>
   2c19c:	mov	r1, #0
   2c1a0:	cmp	r6, #10
   2c1a4:	bne	2c1b4 <__assert_fail@plt+0x1a320>
   2c1a8:	ldrb	r1, [r4, #77]	; 0x4d
   2c1ac:	cmp	r1, #0
   2c1b0:	movwne	r1, #2
   2c1b4:	str	r1, [r4, #60]	; 0x3c
   2c1b8:	mov	r0, #0
   2c1bc:	ldr	r2, [r4, #28]
   2c1c0:	cmp	r2, #0
   2c1c4:	bne	2c2f8 <__assert_fail@plt+0x1a464>
   2c1c8:	str	r0, [r4, #32]
   2c1cc:	b	2bb40 <__assert_fail@plt+0x19cac>
   2c1d0:	mov	r2, #0
   2c1d4:	strb	r2, [r4, #76]	; 0x4c
   2c1d8:	sub	r2, r5, r9
   2c1dc:	ldr	r3, [r4, #44]	; 0x2c
   2c1e0:	ldr	r7, [r4, #52]	; 0x34
   2c1e4:	add	r3, r2, r3
   2c1e8:	add	r2, r2, r7
   2c1ec:	str	r3, [r4, #48]	; 0x30
   2c1f0:	str	r2, [r4, #56]	; 0x38
   2c1f4:	b	2bbf8 <__assert_fail@plt+0x19d64>
   2c1f8:	and	r0, r6, #2
   2c1fc:	eor	r1, r0, #10
   2c200:	str	r1, [r4, #60]	; 0x3c
   2c204:	cmp	sl, r5
   2c208:	ldr	r2, [r4, #28]
   2c20c:	beq	2bfd0 <__assert_fail@plt+0x1a13c>
   2c210:	mov	r0, #0
   2c214:	strb	r0, [r4, #76]	; 0x4c
   2c218:	sub	r0, r5, r9
   2c21c:	ldr	r1, [r4, #44]	; 0x2c
   2c220:	ldr	r3, [r4, #52]	; 0x34
   2c224:	add	r1, r0, r1
   2c228:	add	r0, r0, r3
   2c22c:	str	r1, [r4, #48]	; 0x30
   2c230:	str	r0, [r4, #56]	; 0x38
   2c234:	add	r0, r7, r8
   2c238:	sub	r1, r0, #1
   2c23c:	add	r0, r1, #1
   2c240:	cmp	r0, #1
   2c244:	blt	2c25c <__assert_fail@plt+0x1a3c8>
   2c248:	ldr	r3, [r4, #12]
   2c24c:	ldr	r3, [r3, r1, lsl #2]
   2c250:	sub	r1, r1, #1
   2c254:	cmp	r3, r5
   2c258:	beq	2c23c <__assert_fail@plt+0x1a3a8>
   2c25c:	cmp	r0, r2
   2c260:	bge	2c280 <__assert_fail@plt+0x1a3ec>
   2c264:	ldr	r1, [r4, #8]
   2c268:	ldr	r3, [r1, r0, lsl #2]
   2c26c:	cmn	r3, #1
   2c270:	bne	2c280 <__assert_fail@plt+0x1a3ec>
   2c274:	add	r0, r0, #1
   2c278:	cmp	r0, r2
   2c27c:	blt	2c268 <__assert_fail@plt+0x1a3d4>
   2c280:	cmp	r0, r2
   2c284:	bne	2c298 <__assert_fail@plt+0x1a404>
   2c288:	mov	r0, #0
   2c28c:	str	r0, [r4, #28]
   2c290:	str	r0, [r4, #32]
   2c294:	b	2bb40 <__assert_fail@plt+0x19cac>
   2c298:	ldr	r1, [r4, #12]
   2c29c:	ldr	r0, [r1, r0, lsl #2]
   2c2a0:	subs	r2, r0, r5
   2c2a4:	str	r2, [r4, #28]
   2c2a8:	beq	2c2ec <__assert_fail@plt+0x1a458>
   2c2ac:	cmp	r2, #1
   2c2b0:	blt	2c2d4 <__assert_fail@plt+0x1a440>
   2c2b4:	ldr	r0, [r4, #8]
   2c2b8:	mov	r1, #0
   2c2bc:	mvn	r3, #0
   2c2c0:	str	r3, [r0, r1, lsl #2]
   2c2c4:	add	r1, r1, #1
   2c2c8:	ldr	r2, [r4, #28]
   2c2cc:	cmp	r1, r2
   2c2d0:	blt	2c2c0 <__assert_fail@plt+0x1a42c>
   2c2d4:	ldr	r0, [r4, #4]
   2c2d8:	mov	r1, #255	; 0xff
   2c2dc:	bl	11cd8 <memset@plt>
   2c2e0:	ldr	r0, [r4, #28]
   2c2e4:	str	r0, [r4, #32]
   2c2e8:	b	2bb40 <__assert_fail@plt+0x19cac>
   2c2ec:	mov	r0, #0
   2c2f0:	str	r0, [r4, #32]
   2c2f4:	b	2bb40 <__assert_fail@plt+0x19cac>
   2c2f8:	cmp	r2, #1
   2c2fc:	blt	2c320 <__assert_fail@plt+0x1a48c>
   2c300:	ldr	r0, [r4, #8]
   2c304:	mov	r1, #0
   2c308:	mvn	r3, #0
   2c30c:	str	r3, [r0, r1, lsl #2]
   2c310:	add	r1, r1, #1
   2c314:	ldr	r2, [r4, #28]
   2c318:	cmp	r1, r2
   2c31c:	blt	2c30c <__assert_fail@plt+0x1a478>
   2c320:	ldrb	r0, [r4, #75]	; 0x4b
   2c324:	cmp	r0, #0
   2c328:	beq	2c390 <__assert_fail@plt+0x1a4fc>
   2c32c:	ldr	r0, [r4, #4]
   2c330:	mov	r1, #255	; 0xff
   2c334:	bl	11cd8 <memset@plt>
   2c338:	ldr	r0, [r4, #28]
   2c33c:	b	2c1c8 <__assert_fail@plt+0x1a334>
   2c340:	and	r0, r6, #2
   2c344:	eor	r1, r0, #10
   2c348:	b	2c1b4 <__assert_fail@plt+0x1a320>
   2c34c:	mov	r0, r6
   2c350:	bl	11cb4 <iswalnum@plt>
   2c354:	mov	r1, #1
   2c358:	cmp	r6, #95	; 0x5f
   2c35c:	beq	2bfc0 <__assert_fail@plt+0x1a12c>
   2c360:	cmp	r0, #0
   2c364:	beq	2bfa8 <__assert_fail@plt+0x1a114>
   2c368:	b	2bfc0 <__assert_fail@plt+0x1a12c>
   2c36c:	mov	r0, r7
   2c370:	bl	11cb4 <iswalnum@plt>
   2c374:	mov	r1, #1
   2c378:	cmp	r7, #95	; 0x5f
   2c37c:	beq	2c1b4 <__assert_fail@plt+0x1a320>
   2c380:	cmp	r0, #0
   2c384:	mov	r2, r7
   2c388:	beq	2bd88 <__assert_fail@plt+0x19ef4>
   2c38c:	b	2c1b4 <__assert_fail@plt+0x1a320>
   2c390:	mov	r0, r2
   2c394:	str	r2, [r4, #32]
   2c398:	b	2bb40 <__assert_fail@plt+0x19cac>
   2c39c:	cmp	r2, #1
   2c3a0:	blt	2c404 <__assert_fail@plt+0x1a570>
   2c3a4:	sub	r1, r7, #1
   2c3a8:	sub	r1, r1, r3
   2c3ac:	mvn	r3, #1
   2c3b0:	cmn	r1, #7
   2c3b4:	mvnle	r1, #6
   2c3b8:	sub	ip, r3, r1
   2c3bc:	add	r1, sp, #14
   2c3c0:	ldrb	r3, [r7, ip]
   2c3c4:	sub	lr, ip, #1
   2c3c8:	ldrb	r3, [r0, r3]
   2c3cc:	strb	r3, [r1, ip]
   2c3d0:	add	r3, ip, #1
   2c3d4:	mov	ip, lr
   2c3d8:	cmp	r3, #1
   2c3dc:	bgt	2c3c0 <__assert_fail@plt+0x1a52c>
   2c3e0:	b	2bc74 <__assert_fail@plt+0x19de0>
   2c3e4:	mov	r0, r6
   2c3e8:	bl	11cb4 <iswalnum@plt>
   2c3ec:	mov	r1, #1
   2c3f0:	cmp	r6, #95	; 0x5f
   2c3f4:	beq	2c1b4 <__assert_fail@plt+0x1a320>
   2c3f8:	cmp	r0, #0
   2c3fc:	beq	2c19c <__assert_fail@plt+0x1a308>
   2c400:	b	2c1b4 <__assert_fail@plt+0x1a320>
   2c404:	add	r1, sp, #14
   2c408:	b	2bc74 <__assert_fail@plt+0x19de0>
   2c40c:	push	{r4, r5, r6, sl, fp, lr}
   2c410:	add	fp, sp, #16
   2c414:	mov	r3, r2
   2c418:	ldr	r2, [r0, #88]	; 0x58
   2c41c:	mov	r5, r1
   2c420:	mov	r4, r0
   2c424:	mov	r1, r3
   2c428:	bl	2c658 <__assert_fail@plt+0x1a7c4>
   2c42c:	ldr	r1, [r5, #8]
   2c430:	cmp	r1, #1
   2c434:	blt	2c5a8 <__assert_fail@plt+0x1a714>
   2c438:	ldr	r3, [r5, #12]
   2c43c:	ldr	r5, [r4, #84]	; 0x54
   2c440:	movw	lr, #65280	; 0xff00
   2c444:	and	ip, r0, #8
   2c448:	and	r2, r0, #2
   2c44c:	tst	r0, #1
   2c450:	movt	lr, #3
   2c454:	ldr	r5, [r5]
   2c458:	bne	2c4b0 <__assert_fail@plt+0x1a61c>
   2c45c:	cmp	r2, #0
   2c460:	bne	2c514 <__assert_fail@plt+0x1a680>
   2c464:	mov	r2, #0
   2c468:	ldr	r0, [r3, r2, lsl #2]
   2c46c:	add	r4, r5, r0, lsl #3
   2c470:	ldr	r4, [r4, #4]
   2c474:	uxtb	r6, r4
   2c478:	cmp	r6, #2
   2c47c:	bne	2c4a0 <__assert_fail@plt+0x1a60c>
   2c480:	tst	r4, lr
   2c484:	beq	2c5ac <__assert_fail@plt+0x1a718>
   2c488:	tst	r4, #9216	; 0x2400
   2c48c:	bne	2c4a0 <__assert_fail@plt+0x1a60c>
   2c490:	cmp	ip, #0
   2c494:	bne	2c5ac <__assert_fail@plt+0x1a718>
   2c498:	ands	r4, r4, #32768	; 0x8000
   2c49c:	beq	2c5ac <__assert_fail@plt+0x1a718>
   2c4a0:	add	r2, r2, #1
   2c4a4:	cmp	r2, r1
   2c4a8:	blt	2c468 <__assert_fail@plt+0x1a5d4>
   2c4ac:	b	2c5a8 <__assert_fail@plt+0x1a714>
   2c4b0:	cmp	r2, #0
   2c4b4:	bne	2c560 <__assert_fail@plt+0x1a6cc>
   2c4b8:	mov	r2, #0
   2c4bc:	ldr	r0, [r3, r2, lsl #2]
   2c4c0:	add	r4, r5, r0, lsl #3
   2c4c4:	ldr	r4, [r4, #4]
   2c4c8:	uxtb	r6, r4
   2c4cc:	cmp	r6, #2
   2c4d0:	bne	2c4e4 <__assert_fail@plt+0x1a650>
   2c4d4:	tst	r4, lr
   2c4d8:	beq	2c5ac <__assert_fail@plt+0x1a718>
   2c4dc:	tst	r4, #10240	; 0x2800
   2c4e0:	beq	2c4f4 <__assert_fail@plt+0x1a660>
   2c4e4:	add	r2, r2, #1
   2c4e8:	cmp	r2, r1
   2c4ec:	blt	2c4bc <__assert_fail@plt+0x1a628>
   2c4f0:	b	2c5a8 <__assert_fail@plt+0x1a714>
   2c4f4:	cmp	ip, #0
   2c4f8:	bne	2c5ac <__assert_fail@plt+0x1a718>
   2c4fc:	ands	r4, r4, #32768	; 0x8000
   2c500:	popeq	{r4, r5, r6, sl, fp, pc}
   2c504:	add	r2, r2, #1
   2c508:	cmp	r2, r1
   2c50c:	blt	2c4bc <__assert_fail@plt+0x1a628>
   2c510:	b	2c5a8 <__assert_fail@plt+0x1a714>
   2c514:	mov	r2, #0
   2c518:	ldr	r0, [r3, r2, lsl #2]
   2c51c:	add	r4, r5, r0, lsl #3
   2c520:	ldr	r4, [r4, #4]
   2c524:	uxtb	r6, r4
   2c528:	cmp	r6, #2
   2c52c:	bne	2c550 <__assert_fail@plt+0x1a6bc>
   2c530:	tst	r4, lr
   2c534:	beq	2c5ac <__assert_fail@plt+0x1a718>
   2c538:	tst	r4, #1024	; 0x400
   2c53c:	bne	2c550 <__assert_fail@plt+0x1a6bc>
   2c540:	cmp	ip, #0
   2c544:	bne	2c5ac <__assert_fail@plt+0x1a718>
   2c548:	ands	r4, r4, #32768	; 0x8000
   2c54c:	beq	2c5ac <__assert_fail@plt+0x1a718>
   2c550:	add	r2, r2, #1
   2c554:	cmp	r2, r1
   2c558:	blt	2c518 <__assert_fail@plt+0x1a684>
   2c55c:	b	2c5a8 <__assert_fail@plt+0x1a714>
   2c560:	mov	r2, #0
   2c564:	ldr	r0, [r3, r2, lsl #2]
   2c568:	add	r4, r5, r0, lsl #3
   2c56c:	ldr	r4, [r4, #4]
   2c570:	uxtb	r6, r4
   2c574:	cmp	r6, #2
   2c578:	bne	2c59c <__assert_fail@plt+0x1a708>
   2c57c:	tst	r4, lr
   2c580:	beq	2c5ac <__assert_fail@plt+0x1a718>
   2c584:	tst	r4, #2048	; 0x800
   2c588:	bne	2c59c <__assert_fail@plt+0x1a708>
   2c58c:	cmp	ip, #0
   2c590:	bne	2c5ac <__assert_fail@plt+0x1a718>
   2c594:	ands	r4, r4, #32768	; 0x8000
   2c598:	beq	2c5ac <__assert_fail@plt+0x1a718>
   2c59c:	add	r2, r2, #1
   2c5a0:	cmp	r2, r1
   2c5a4:	blt	2c564 <__assert_fail@plt+0x1a6d0>
   2c5a8:	mov	r0, #0
   2c5ac:	pop	{r4, r5, r6, sl, fp, pc}
   2c5b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c5b4:	add	fp, sp, #24
   2c5b8:	mov	r8, r0
   2c5bc:	ldr	r0, [r0, #124]	; 0x7c
   2c5c0:	cmp	r0, #1
   2c5c4:	blt	2c648 <__assert_fail@plt+0x1a7b4>
   2c5c8:	mov	r7, #0
   2c5cc:	ldr	r0, [r8, #132]	; 0x84
   2c5d0:	ldr	r5, [r0, r7, lsl #2]
   2c5d4:	ldr	r0, [r5, #16]
   2c5d8:	cmp	r0, #1
   2c5dc:	blt	2c60c <__assert_fail@plt+0x1a778>
   2c5e0:	mov	r4, #0
   2c5e4:	ldr	r0, [r5, #20]
   2c5e8:	ldr	r6, [r0, r4, lsl #2]
   2c5ec:	ldr	r0, [r6, #16]
   2c5f0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2c5f4:	mov	r0, r6
   2c5f8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2c5fc:	ldr	r0, [r5, #16]
   2c600:	add	r4, r4, #1
   2c604:	cmp	r4, r0
   2c608:	blt	2c5e4 <__assert_fail@plt+0x1a750>
   2c60c:	ldr	r0, [r5, #20]
   2c610:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2c614:	ldr	r0, [r5, #8]
   2c618:	cmp	r0, #0
   2c61c:	beq	2c630 <__assert_fail@plt+0x1a79c>
   2c620:	ldr	r0, [r0, #8]
   2c624:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2c628:	ldr	r0, [r5, #8]
   2c62c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2c630:	mov	r0, r5
   2c634:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2c638:	ldr	r0, [r8, #124]	; 0x7c
   2c63c:	add	r7, r7, #1
   2c640:	cmp	r7, r0
   2c644:	blt	2c5cc <__assert_fail@plt+0x1a738>
   2c648:	mov	r0, #0
   2c64c:	str	r0, [r8, #108]	; 0x6c
   2c650:	str	r0, [r8, #124]	; 0x7c
   2c654:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2c658:	push	{r4, r5, fp, lr}
   2c65c:	add	fp, sp, #8
   2c660:	mov	r4, r0
   2c664:	cmn	r1, #1
   2c668:	ldrle	r0, [r4, #60]	; 0x3c
   2c66c:	pople	{r4, r5, fp, pc}
   2c670:	ldr	r0, [r4, #48]	; 0x30
   2c674:	cmp	r0, r1
   2c678:	beq	2c714 <__assert_fail@plt+0x1a880>
   2c67c:	ldr	r0, [r4, #80]	; 0x50
   2c680:	cmp	r0, #2
   2c684:	blt	2c6d4 <__assert_fail@plt+0x1a840>
   2c688:	ldr	r0, [r4, #8]
   2c68c:	ldr	r5, [r0, r1, lsl #2]
   2c690:	cmn	r5, #1
   2c694:	bne	2c6b8 <__assert_fail@plt+0x1a824>
   2c698:	cmp	r1, #0
   2c69c:	sub	r2, r1, #1
   2c6a0:	ldrle	r0, [r4, #60]	; 0x3c
   2c6a4:	mov	r1, r2
   2c6a8:	pople	{r4, r5, fp, pc}
   2c6ac:	ldr	r5, [r0, r1, lsl #2]
   2c6b0:	cmn	r5, #1
   2c6b4:	beq	2c698 <__assert_fail@plt+0x1a804>
   2c6b8:	ldrb	r0, [r4, #78]	; 0x4e
   2c6bc:	cmp	r0, #0
   2c6c0:	bne	2c720 <__assert_fail@plt+0x1a88c>
   2c6c4:	mov	r0, #0
   2c6c8:	cmp	r5, #10
   2c6cc:	beq	2c704 <__assert_fail@plt+0x1a870>
   2c6d0:	b	2c710 <__assert_fail@plt+0x1a87c>
   2c6d4:	ldr	r0, [r4, #4]
   2c6d8:	ldr	r2, [r4, #68]	; 0x44
   2c6dc:	ldrb	r1, [r0, r1]
   2c6e0:	ubfx	r0, r1, #5, #3
   2c6e4:	and	r3, r1, #31
   2c6e8:	ldr	r2, [r2, r0, lsl #2]
   2c6ec:	mov	r0, #1
   2c6f0:	tst	r2, r0, lsl r3
   2c6f4:	bne	2c710 <__assert_fail@plt+0x1a87c>
   2c6f8:	mov	r0, #0
   2c6fc:	cmp	r1, #10
   2c700:	popne	{r4, r5, fp, pc}
   2c704:	ldrb	r0, [r4, #77]	; 0x4d
   2c708:	cmp	r0, #0
   2c70c:	movwne	r0, #2
   2c710:	pop	{r4, r5, fp, pc}
   2c714:	and	r0, r2, #2
   2c718:	eor	r0, r0, #10
   2c71c:	pop	{r4, r5, fp, pc}
   2c720:	mov	r0, r5
   2c724:	bl	11cb4 <iswalnum@plt>
   2c728:	mov	r1, r0
   2c72c:	mov	r0, #1
   2c730:	cmp	r5, #95	; 0x5f
   2c734:	beq	2c710 <__assert_fail@plt+0x1a87c>
   2c738:	cmp	r1, #0
   2c73c:	beq	2c6c4 <__assert_fail@plt+0x1a830>
   2c740:	b	2c710 <__assert_fail@plt+0x1a87c>
   2c744:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c748:	add	fp, sp, #28
   2c74c:	sub	sp, sp, #4
   2c750:	mov	sl, r0
   2c754:	ldr	r0, [r1, #4]
   2c758:	cmp	r0, #1
   2c75c:	blt	2c828 <__assert_fail@plt+0x1a994>
   2c760:	ldr	r7, [sl, #84]	; 0x54
   2c764:	mov	r8, r2
   2c768:	mov	r5, r1
   2c76c:	mov	r4, #0
   2c770:	b	2c798 <__assert_fail@plt+0x1a904>
   2c774:	ldr	r0, [sl, #132]	; 0x84
   2c778:	lsl	r1, r9, #3
   2c77c:	bl	36fe4 <__assert_fail@plt+0x25150>
   2c780:	cmp	r0, #0
   2c784:	beq	2c834 <__assert_fail@plt+0x1a9a0>
   2c788:	lsl	r1, r9, #1
   2c78c:	str	r1, [sl, #128]	; 0x80
   2c790:	str	r0, [sl, #132]	; 0x84
   2c794:	b	2c7e0 <__assert_fail@plt+0x1a94c>
   2c798:	ldr	r1, [r5, #8]
   2c79c:	ldr	r6, [r1, r4, lsl #2]
   2c7a0:	ldr	r1, [r7]
   2c7a4:	add	r2, r1, r6, lsl #3
   2c7a8:	ldrb	r2, [r2, #4]
   2c7ac:	cmp	r2, #8
   2c7b0:	bne	2c81c <__assert_fail@plt+0x1a988>
   2c7b4:	ldr	r1, [r1, r6, lsl #3]
   2c7b8:	cmp	r1, #31
   2c7bc:	bgt	2c81c <__assert_fail@plt+0x1a988>
   2c7c0:	ldr	r2, [r7, #80]	; 0x50
   2c7c4:	mov	r3, #1
   2c7c8:	tst	r2, r3, lsl r1
   2c7cc:	beq	2c81c <__assert_fail@plt+0x1a988>
   2c7d0:	ldr	r9, [sl, #124]	; 0x7c
   2c7d4:	ldr	r0, [sl, #128]	; 0x80
   2c7d8:	cmp	r9, r0
   2c7dc:	beq	2c774 <__assert_fail@plt+0x1a8e0>
   2c7e0:	mov	r0, #1
   2c7e4:	mov	r1, #24
   2c7e8:	bl	36f60 <__assert_fail@plt+0x250cc>
   2c7ec:	ldr	r1, [sl, #124]	; 0x7c
   2c7f0:	ldr	r2, [sl, #132]	; 0x84
   2c7f4:	str	r0, [r2, r1, lsl #2]
   2c7f8:	ldr	r0, [sl, #132]	; 0x84
   2c7fc:	ldr	r0, [r0, r1, lsl #2]
   2c800:	cmp	r0, #0
   2c804:	beq	2c834 <__assert_fail@plt+0x1a9a0>
   2c808:	add	r1, r1, #1
   2c80c:	str	r6, [r0, #4]
   2c810:	str	r1, [sl, #124]	; 0x7c
   2c814:	str	r8, [r0]
   2c818:	ldr	r0, [r5, #4]
   2c81c:	add	r4, r4, #1
   2c820:	cmp	r4, r0
   2c824:	blt	2c798 <__assert_fail@plt+0x1a904>
   2c828:	mov	r0, #0
   2c82c:	sub	sp, fp, #28
   2c830:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c834:	mov	r0, #12
   2c838:	sub	sp, fp, #28
   2c83c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c840:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c844:	add	fp, sp, #28
   2c848:	sub	sp, sp, #76	; 0x4c
   2c84c:	mov	r9, r0
   2c850:	ldr	r0, [r1, #4]
   2c854:	cmp	r0, #1
   2c858:	blt	2d21c <__assert_fail@plt+0x1b388>
   2c85c:	ldr	r2, [r9, #84]	; 0x54
   2c860:	ldr	r5, [r9, #40]	; 0x28
   2c864:	mov	r3, #0
   2c868:	str	r9, [sp, #40]	; 0x28
   2c86c:	str	r1, [sp, #16]
   2c870:	str	r5, [sp, #52]	; 0x34
   2c874:	str	r2, [sp, #20]
   2c878:	b	2c8c0 <__assert_fail@plt+0x1aa2c>
   2c87c:	ldr	r0, [r9, #88]	; 0x58
   2c880:	and	r0, r0, #2
   2c884:	eor	r1, r0, #10
   2c888:	and	r0, r1, #1
   2c88c:	tst	r6, #1024	; 0x400
   2c890:	eor	r2, r0, #1
   2c894:	bne	2c954 <__assert_fail@plt+0x1aac0>
   2c898:	b	2c9cc <__assert_fail@plt+0x1ab38>
   2c89c:	mov	r0, r4
   2c8a0:	bl	11cb4 <iswalnum@plt>
   2c8a4:	mov	r1, #1
   2c8a8:	mov	r2, #0
   2c8ac:	cmp	r4, #95	; 0x5f
   2c8b0:	beq	2c9cc <__assert_fail@plt+0x1ab38>
   2c8b4:	cmp	r0, #0
   2c8b8:	beq	2c9a4 <__assert_fail@plt+0x1ab10>
   2c8bc:	b	2c9cc <__assert_fail@plt+0x1ab38>
   2c8c0:	ldr	r0, [r1, #8]
   2c8c4:	str	r3, [sp, #24]
   2c8c8:	ldr	r3, [r0, r3, lsl #2]
   2c8cc:	ldr	r0, [r2]
   2c8d0:	add	r7, r0, r3, lsl #3
   2c8d4:	mov	r1, r3
   2c8d8:	str	r3, [sp, #48]	; 0x30
   2c8dc:	ldr	r6, [r7, #4]!
   2c8e0:	uxtb	r0, r6
   2c8e4:	cmp	r0, #4
   2c8e8:	bne	2d200 <__assert_fail@plt+0x1b36c>
   2c8ec:	movw	r0, #65280	; 0xff00
   2c8f0:	movt	r0, #3
   2c8f4:	tst	r6, r0
   2c8f8:	beq	2ca00 <__assert_fail@plt+0x1ab6c>
   2c8fc:	cmn	r5, #1
   2c900:	ble	2c940 <__assert_fail@plt+0x1aaac>
   2c904:	ldr	r0, [r9, #48]	; 0x30
   2c908:	cmp	r0, r5
   2c90c:	beq	2c87c <__assert_fail@plt+0x1a9e8>
   2c910:	ldr	r0, [r9, #80]	; 0x50
   2c914:	cmp	r0, #2
   2c918:	blt	2c960 <__assert_fail@plt+0x1aacc>
   2c91c:	ldr	r0, [r9, #8]
   2c920:	mov	r1, r5
   2c924:	ldr	r4, [r0, r1, lsl #2]
   2c928:	cmn	r4, #1
   2c92c:	bne	2c998 <__assert_fail@plt+0x1ab04>
   2c930:	sub	r2, r1, #1
   2c934:	cmp	r1, #0
   2c938:	mov	r1, r2
   2c93c:	bgt	2c924 <__assert_fail@plt+0x1aa90>
   2c940:	ldr	r1, [r9, #60]	; 0x3c
   2c944:	and	r0, r1, #1
   2c948:	tst	r6, #1024	; 0x400
   2c94c:	eor	r2, r0, #1
   2c950:	beq	2c9cc <__assert_fail@plt+0x1ab38>
   2c954:	cmp	r0, #0
   2c958:	beq	2d200 <__assert_fail@plt+0x1b36c>
   2c95c:	b	2c9cc <__assert_fail@plt+0x1ab38>
   2c960:	ldr	r0, [r9, #4]
   2c964:	ldr	r1, [r9, #68]	; 0x44
   2c968:	ldrb	r0, [r0, r5]
   2c96c:	ubfx	r2, r0, #5, #3
   2c970:	and	r4, r0, #31
   2c974:	ldr	r3, [r1, r2, lsl #2]
   2c978:	mov	r1, #1
   2c97c:	mov	r2, #0
   2c980:	tst	r3, r1, lsl r4
   2c984:	bne	2c9cc <__assert_fail@plt+0x1ab38>
   2c988:	mov	r1, #0
   2c98c:	cmp	r0, #10
   2c990:	beq	2c9b0 <__assert_fail@plt+0x1ab1c>
   2c994:	b	2c9bc <__assert_fail@plt+0x1ab28>
   2c998:	ldrb	r0, [r9, #78]	; 0x4e
   2c99c:	cmp	r0, #0
   2c9a0:	bne	2c89c <__assert_fail@plt+0x1aa08>
   2c9a4:	mov	r1, #0
   2c9a8:	cmp	r4, #10
   2c9ac:	bne	2c9bc <__assert_fail@plt+0x1ab28>
   2c9b0:	ldrb	r1, [r9, #77]	; 0x4d
   2c9b4:	cmp	r1, #0
   2c9b8:	movwne	r1, #2
   2c9bc:	and	r0, r1, #1
   2c9c0:	tst	r6, #1024	; 0x400
   2c9c4:	eor	r2, r0, #1
   2c9c8:	bne	2c954 <__assert_fail@plt+0x1aac0>
   2c9cc:	ldr	r0, [r7]
   2c9d0:	cmp	r2, #0
   2c9d4:	bne	2c9e0 <__assert_fail@plt+0x1ab4c>
   2c9d8:	ands	r2, r0, #2048	; 0x800
   2c9dc:	bne	2d200 <__assert_fail@plt+0x1b36c>
   2c9e0:	tst	r1, #2
   2c9e4:	bne	2c9f0 <__assert_fail@plt+0x1ab5c>
   2c9e8:	ands	r2, r0, #8192	; 0x2000
   2c9ec:	bne	2d200 <__assert_fail@plt+0x1b36c>
   2c9f0:	tst	r1, #8
   2c9f4:	bne	2ca00 <__assert_fail@plt+0x1ab6c>
   2c9f8:	ands	r0, r0, #32768	; 0x8000
   2c9fc:	bne	2d200 <__assert_fail@plt+0x1b36c>
   2ca00:	ldr	r2, [r9, #108]	; 0x6c
   2ca04:	ldr	r0, [r9, #84]	; 0x54
   2ca08:	ldr	ip, [r9, #4]
   2ca0c:	cmp	r2, #1
   2ca10:	str	r0, [sp, #28]
   2ca14:	str	r2, [sp, #12]
   2ca18:	blt	2caa8 <__assert_fail@plt+0x1ac14>
   2ca1c:	ldr	r1, [r9, #116]	; 0x74
   2ca20:	mov	r0, #0
   2ca24:	mov	r4, #1
   2ca28:	add	r3, r2, r0
   2ca2c:	add	r3, r3, r3, lsr #31
   2ca30:	asr	r7, r3, #1
   2ca34:	add	r6, r7, r7, lsl #1
   2ca38:	add	r6, r1, r6, lsl #3
   2ca3c:	ldr	r6, [r6, #4]
   2ca40:	cmp	r6, r5
   2ca44:	addlt	r0, r4, r3, asr #1
   2ca48:	movge	r2, r7
   2ca4c:	cmp	r0, r2
   2ca50:	blt	2ca28 <__assert_fail@plt+0x1ab94>
   2ca54:	ldr	r1, [sp, #12]
   2ca58:	ldr	r7, [sp, #28]
   2ca5c:	cmp	r0, r1
   2ca60:	bge	2cabc <__assert_fail@plt+0x1ac28>
   2ca64:	cmn	r0, #1
   2ca68:	beq	2cabc <__assert_fail@plt+0x1ac28>
   2ca6c:	ldr	r1, [r9, #116]	; 0x74
   2ca70:	add	r0, r0, r0, lsl #1
   2ca74:	add	r0, r1, r0, lsl #3
   2ca78:	ldr	r1, [r0, #4]
   2ca7c:	cmp	r1, r5
   2ca80:	bne	2cabc <__assert_fail@plt+0x1ac28>
   2ca84:	ldr	r1, [r0]
   2ca88:	ldr	r2, [sp, #48]	; 0x30
   2ca8c:	cmp	r1, r2
   2ca90:	beq	2cf28 <__assert_fail@plt+0x1b094>
   2ca94:	ldrb	r1, [r0, #20]
   2ca98:	add	r0, r0, #24
   2ca9c:	cmp	r1, #0
   2caa0:	bne	2ca84 <__assert_fail@plt+0x1abf0>
   2caa4:	b	2cabc <__assert_fail@plt+0x1ac28>
   2caa8:	mov	r0, #0
   2caac:	ldr	r1, [sp, #12]
   2cab0:	ldr	r7, [sp, #28]
   2cab4:	cmp	r0, r1
   2cab8:	blt	2ca64 <__assert_fail@plt+0x1abd0>
   2cabc:	ldr	r0, [r9, #124]	; 0x7c
   2cac0:	cmp	r0, #1
   2cac4:	blt	2cf28 <__assert_fail@plt+0x1b094>
   2cac8:	ldr	r0, [r7]
   2cacc:	ldr	r1, [sp, #48]	; 0x30
   2cad0:	mov	r2, #0
   2cad4:	ldr	r1, [r0, r1, lsl #3]
   2cad8:	str	r1, [sp, #36]	; 0x24
   2cadc:	b	2cae4 <__assert_fail@plt+0x1ac50>
   2cae0:	ldr	r0, [r7]
   2cae4:	ldr	r1, [r9, #132]	; 0x84
   2cae8:	str	r2, [sp, #32]
   2caec:	ldr	lr, [r1, r2, lsl #2]
   2caf0:	ldr	r1, [lr, #4]
   2caf4:	ldr	r0, [r0, r1, lsl #3]
   2caf8:	ldr	r1, [sp, #36]	; 0x24
   2cafc:	cmp	r0, r1
   2cb00:	bne	2cec4 <__assert_fail@plt+0x1b030>
   2cb04:	ldr	r0, [lr, #16]
   2cb08:	ldr	r2, [lr]
   2cb0c:	mov	r8, #0
   2cb10:	str	lr, [sp, #44]	; 0x2c
   2cb14:	cmp	r0, #1
   2cb18:	blt	2cb28 <__assert_fail@plt+0x1ac94>
   2cb1c:	ldr	r6, [sp, #52]	; 0x34
   2cb20:	mov	r7, r2
   2cb24:	b	2ce18 <__assert_fail@plt+0x1af84>
   2cb28:	ldr	r6, [sp, #52]	; 0x34
   2cb2c:	ldr	r7, [sp, #28]
   2cb30:	cmp	r8, r0
   2cb34:	blt	2cec0 <__assert_fail@plt+0x1b02c>
   2cb38:	ldr	r5, [sp, #52]	; 0x34
   2cb3c:	cmp	r8, #0
   2cb40:	addne	r2, r2, #1
   2cb44:	cmp	r2, r5
   2cb48:	bgt	2cec4 <__assert_fail@plt+0x1b030>
   2cb4c:	b	2cce8 <__assert_fail@plt+0x1ae54>
   2cb50:	ldr	r0, [sp, #40]	; 0x28
   2cb54:	cmn	r4, #1
   2cb58:	beq	2cd80 <__assert_fail@plt+0x1aeec>
   2cb5c:	ldr	r1, [lr, #8]
   2cb60:	str	r6, [fp, #-48]	; 0xffffffd0
   2cb64:	mov	r6, ip
   2cb68:	cmp	r1, #0
   2cb6c:	beq	2cb88 <__assert_fail@plt+0x1acf4>
   2cb70:	ldr	r3, [lr]
   2cb74:	ldr	r2, [lr, #4]
   2cb78:	mov	r7, #9
   2cb7c:	stm	sp, {r4, sl}
   2cb80:	str	r7, [sp, #8]
   2cb84:	b	2cbcc <__assert_fail@plt+0x1ad38>
   2cb88:	ldr	r0, [lr]
   2cb8c:	add	r1, sl, #1
   2cb90:	mov	r9, #12
   2cb94:	sub	r1, r1, r0
   2cb98:	mov	r0, #12
   2cb9c:	bl	36f60 <__assert_fail@plt+0x250cc>
   2cba0:	ldr	r2, [sp, #44]	; 0x2c
   2cba4:	cmp	r0, #0
   2cba8:	str	r0, [r2, #8]
   2cbac:	beq	2d220 <__assert_fail@plt+0x1b38c>
   2cbb0:	mov	r1, r0
   2cbb4:	ldr	r3, [r2]
   2cbb8:	ldr	r2, [r2, #4]
   2cbbc:	stm	sp, {r4, sl}
   2cbc0:	mov	r0, #9
   2cbc4:	str	r0, [sp, #8]
   2cbc8:	ldr	r0, [sp, #40]	; 0x28
   2cbcc:	bl	2db3c <__assert_fail@plt+0x1bca8>
   2cbd0:	mov	ip, r6
   2cbd4:	ldr	lr, [sp, #44]	; 0x2c
   2cbd8:	ldr	r6, [fp, #-48]	; 0xffffffd0
   2cbdc:	ldr	r5, [sp, #52]	; 0x34
   2cbe0:	mov	r9, r0
   2cbe4:	cmp	r0, #1
   2cbe8:	mov	r7, r8
   2cbec:	beq	2cd88 <__assert_fail@plt+0x1aef4>
   2cbf0:	cmp	r9, #0
   2cbf4:	bne	2d220 <__assert_fail@plt+0x1b38c>
   2cbf8:	ldr	r1, [lr, #12]
   2cbfc:	ldr	r0, [lr, #16]
   2cc00:	ldr	r5, [sp, #52]	; 0x34
   2cc04:	cmp	r0, r1
   2cc08:	beq	2ccbc <__assert_fail@plt+0x1ae28>
   2cc0c:	mov	r0, #1
   2cc10:	mov	r1, #20
   2cc14:	bl	36f60 <__assert_fail@plt+0x250cc>
   2cc18:	ldr	r6, [sp, #40]	; 0x28
   2cc1c:	cmp	r0, #0
   2cc20:	beq	2d238 <__assert_fail@plt+0x1b3a4>
   2cc24:	ldr	r1, [sp, #44]	; 0x2c
   2cc28:	mov	r2, r0
   2cc2c:	ldr	r0, [r1, #16]
   2cc30:	ldr	r3, [r1, #20]
   2cc34:	str	r2, [r3, r0, lsl #2]
   2cc38:	stm	r2, {r4, sl}
   2cc3c:	add	r0, r0, #1
   2cc40:	ldr	r3, [sp, #48]	; 0x30
   2cc44:	str	r0, [r1, #16]
   2cc48:	mov	r0, r6
   2cc4c:	str	r5, [sp]
   2cc50:	bl	2d968 <__assert_fail@plt+0x1bad4>
   2cc54:	cmp	r0, #1
   2cc58:	bhi	2d230 <__assert_fail@plt+0x1b39c>
   2cc5c:	ldr	ip, [r6, #4]
   2cc60:	ldr	r7, [sp, #28]
   2cc64:	ldr	lr, [sp, #44]	; 0x2c
   2cc68:	ldr	r6, [fp, #-48]	; 0xffffffd0
   2cc6c:	ldr	r9, [sp, #40]	; 0x28
   2cc70:	add	r2, sl, #1
   2cc74:	cmp	sl, r5
   2cc78:	blt	2cce8 <__assert_fail@plt+0x1ae54>
   2cc7c:	b	2cec4 <__assert_fail@plt+0x1b030>
   2cc80:	ldr	r0, [r9, #48]	; 0x30
   2cc84:	cmp	r6, r0
   2cc88:	bge	2cec4 <__assert_fail@plt+0x1b030>
   2cc8c:	add	r4, r6, #1
   2cc90:	mov	r0, r9
   2cc94:	mov	r8, r6
   2cc98:	mov	r1, r4
   2cc9c:	bl	2d278 <__assert_fail@plt+0x1b3e4>
   2cca0:	cmp	r0, #0
   2cca4:	bne	2d230 <__assert_fail@plt+0x1b39c>
   2cca8:	ldr	ip, [r9, #4]
   2ccac:	ldr	lr, [sp, #44]	; 0x2c
   2ccb0:	mov	r6, r8
   2ccb4:	mov	r1, r9
   2ccb8:	b	2cd08 <__assert_fail@plt+0x1ae74>
   2ccbc:	mov	r1, #1
   2ccc0:	mov	r7, lr
   2ccc4:	orr	r6, r1, r0, lsl #1
   2ccc8:	ldr	r0, [lr, #20]
   2cccc:	lsl	r1, r6, #2
   2ccd0:	bl	36fe4 <__assert_fail@plt+0x25150>
   2ccd4:	cmp	r0, #0
   2ccd8:	beq	2d238 <__assert_fail@plt+0x1b3a4>
   2ccdc:	str	r6, [r7, #12]
   2cce0:	str	r0, [r7, #20]
   2cce4:	b	2cc0c <__assert_fail@plt+0x1ad78>
   2cce8:	ldr	r0, [lr]
   2ccec:	mov	sl, r2
   2ccf0:	cmp	r2, r0
   2ccf4:	ble	2cd20 <__assert_fail@plt+0x1ae8c>
   2ccf8:	ldr	r0, [r9, #28]
   2ccfc:	cmp	r6, r0
   2cd00:	bge	2cc80 <__assert_fail@plt+0x1adec>
   2cd04:	add	r4, r6, #1
   2cd08:	add	r1, ip, sl
   2cd0c:	ldrb	r0, [ip, r6]
   2cd10:	ldrb	r1, [r1, #-1]
   2cd14:	cmp	r0, r1
   2cd18:	beq	2cd24 <__assert_fail@plt+0x1ae90>
   2cd1c:	b	2cec4 <__assert_fail@plt+0x1b030>
   2cd20:	mov	r4, r6
   2cd24:	ldr	r0, [r9, #100]	; 0x64
   2cd28:	mov	r6, r4
   2cd2c:	ldr	r2, [r0, sl, lsl #2]
   2cd30:	cmp	r2, #0
   2cd34:	beq	2cd88 <__assert_fail@plt+0x1aef4>
   2cd38:	ldr	r0, [r2, #8]
   2cd3c:	cmp	r0, #1
   2cd40:	blt	2cd88 <__assert_fail@plt+0x1aef4>
   2cd44:	ldr	r1, [r7]
   2cd48:	ldr	r2, [r2, #12]
   2cd4c:	ldr	r5, [sp, #36]	; 0x24
   2cd50:	mov	r8, r7
   2cd54:	mov	r3, #0
   2cd58:	ldr	r4, [r2, r3, lsl #2]
   2cd5c:	add	r7, r1, r4, lsl #3
   2cd60:	ldrb	r7, [r7, #4]
   2cd64:	cmp	r7, #9
   2cd68:	ldreq	r7, [r1, r4, lsl #3]
   2cd6c:	cmpeq	r7, r5
   2cd70:	beq	2cb50 <__assert_fail@plt+0x1acbc>
   2cd74:	add	r3, r3, #1
   2cd78:	cmp	r3, r0
   2cd7c:	blt	2cd58 <__assert_fail@plt+0x1aec4>
   2cd80:	ldr	r5, [sp, #52]	; 0x34
   2cd84:	mov	r7, r8
   2cd88:	ldr	r9, [sp, #40]	; 0x28
   2cd8c:	add	r2, sl, #1
   2cd90:	cmp	sl, r5
   2cd94:	blt	2cce8 <__assert_fail@plt+0x1ae54>
   2cd98:	b	2cec4 <__assert_fail@plt+0x1b030>
   2cd9c:	ldr	r2, [r9, #48]	; 0x30
   2cda0:	cmp	r5, r2
   2cda4:	bgt	2cef8 <__assert_fail@plt+0x1b064>
   2cda8:	ldr	r0, [r9, #36]	; 0x24
   2cdac:	ldr	r3, [r9, #104]	; 0x68
   2cdb0:	cmp	r0, r5
   2cdb4:	cmple	r0, r2
   2cdb8:	blt	2cdc8 <__assert_fail@plt+0x1af34>
   2cdbc:	cmp	r1, r5
   2cdc0:	cmple	r1, r2
   2cdc4:	bge	2cde4 <__assert_fail@plt+0x1af50>
   2cdc8:	ldr	r0, [sp, #40]	; 0x28
   2cdcc:	add	r1, r5, #1
   2cdd0:	mov	r9, r3
   2cdd4:	bl	2d278 <__assert_fail@plt+0x1b3e4>
   2cdd8:	mov	r3, r9
   2cddc:	cmp	r0, #0
   2cde0:	bne	2d230 <__assert_fail@plt+0x1b39c>
   2cde4:	ldr	r9, [sp, #40]	; 0x28
   2cde8:	cmp	r5, r3
   2cdec:	ble	2ce10 <__assert_fail@plt+0x1af7c>
   2cdf0:	sub	r0, r5, r3
   2cdf4:	mov	r1, #0
   2cdf8:	lsl	r2, r0, #2
   2cdfc:	ldr	r0, [r9, #100]	; 0x64
   2ce00:	add	r0, r0, r3, lsl #2
   2ce04:	add	r0, r0, #4
   2ce08:	bl	11cd8 <memset@plt>
   2ce0c:	str	r5, [r9, #104]	; 0x68
   2ce10:	ldr	ip, [r9, #4]
   2ce14:	b	2ce44 <__assert_fail@plt+0x1afb0>
   2ce18:	ldr	r1, [lr, #20]
   2ce1c:	ldr	sl, [r1, r8, lsl #2]
   2ce20:	ldr	r1, [sl, #4]
   2ce24:	sub	r4, r1, r7
   2ce28:	str	r1, [fp, #-48]	; 0xffffffd0
   2ce2c:	cmp	r4, #1
   2ce30:	blt	2ce64 <__assert_fail@plt+0x1afd0>
   2ce34:	ldr	r1, [r9, #28]
   2ce38:	add	r5, r4, r6
   2ce3c:	cmp	r5, r1
   2ce40:	bgt	2cd9c <__assert_fail@plt+0x1af08>
   2ce44:	add	r0, ip, r6
   2ce48:	add	r1, ip, r7
   2ce4c:	mov	r2, r4
   2ce50:	mov	r5, ip
   2ce54:	bl	11ac8 <memcmp@plt>
   2ce58:	ldr	lr, [sp, #44]	; 0x2c
   2ce5c:	cmp	r0, #0
   2ce60:	bne	2cedc <__assert_fail@plt+0x1b048>
   2ce64:	ldr	r0, [sp, #52]	; 0x34
   2ce68:	ldr	r3, [sp, #48]	; 0x30
   2ce6c:	mov	r1, lr
   2ce70:	mov	r2, sl
   2ce74:	mov	r5, lr
   2ce78:	str	r0, [sp]
   2ce7c:	mov	r0, r9
   2ce80:	bl	2d968 <__assert_fail@plt+0x1bad4>
   2ce84:	cmp	r0, #1
   2ce88:	bhi	2d230 <__assert_fail@plt+0x1b39c>
   2ce8c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   2ce90:	ldr	r0, [r5, #16]
   2ce94:	ldr	ip, [r9, #4]
   2ce98:	add	r8, r8, #1
   2ce9c:	add	r6, r4, r6
   2cea0:	mov	lr, r5
   2cea4:	mov	r1, r9
   2cea8:	cmp	r8, r0
   2ceac:	mov	r7, r2
   2ceb0:	blt	2ce18 <__assert_fail@plt+0x1af84>
   2ceb4:	ldr	r7, [sp, #28]
   2ceb8:	cmp	r8, r0
   2cebc:	bge	2cb38 <__assert_fail@plt+0x1aca4>
   2cec0:	ldr	r5, [sp, #52]	; 0x34
   2cec4:	ldr	r2, [sp, #32]
   2cec8:	ldr	r0, [r9, #124]	; 0x7c
   2cecc:	add	r2, r2, #1
   2ced0:	cmp	r2, r0
   2ced4:	blt	2cae0 <__assert_fail@plt+0x1ac4c>
   2ced8:	b	2cf0c <__assert_fail@plt+0x1b078>
   2cedc:	ldr	r0, [lr, #16]
   2cee0:	mov	ip, r5
   2cee4:	mov	r2, r7
   2cee8:	ldr	r7, [sp, #28]
   2ceec:	cmp	r8, r0
   2cef0:	blt	2cec0 <__assert_fail@plt+0x1b02c>
   2cef4:	b	2cb38 <__assert_fail@plt+0x1aca4>
   2cef8:	mov	r2, r7
   2cefc:	ldr	r7, [sp, #28]
   2cf00:	cmp	r8, r0
   2cf04:	blt	2cec0 <__assert_fail@plt+0x1b02c>
   2cf08:	b	2cb38 <__assert_fail@plt+0x1aca4>
   2cf0c:	mov	r1, #0
   2cf10:	ldr	r0, [r9, #108]	; 0x6c
   2cf14:	str	r1, [fp, #-32]	; 0xffffffe0
   2cf18:	ldr	r1, [sp, #12]
   2cf1c:	cmp	r1, r0
   2cf20:	bge	2d200 <__assert_fail@plt+0x1b36c>
   2cf24:	b	2cf70 <__assert_fail@plt+0x1b0dc>
   2cf28:	mov	r0, #0
   2cf2c:	str	r0, [fp, #-32]	; 0xffffffe0
   2cf30:	b	2d200 <__assert_fail@plt+0x1b36c>
   2cf34:	ldr	r0, [r3, #88]	; 0x58
   2cf38:	and	r0, r0, #2
   2cf3c:	eor	sl, r0, #10
   2cf40:	b	2d0a4 <__assert_fail@plt+0x1b210>
   2cf44:	mov	r0, r4
   2cf48:	bl	11cb4 <iswalnum@plt>
   2cf4c:	mov	sl, #1
   2cf50:	cmp	r4, #95	; 0x5f
   2cf54:	beq	2cf68 <__assert_fail@plt+0x1b0d4>
   2cf58:	ldr	r3, [sp, #40]	; 0x28
   2cf5c:	cmp	r0, #0
   2cf60:	beq	2d08c <__assert_fail@plt+0x1b1f8>
   2cf64:	b	2d0a4 <__assert_fail@plt+0x1b210>
   2cf68:	ldr	r3, [sp, #40]	; 0x28
   2cf6c:	b	2d0a4 <__assert_fail@plt+0x1b210>
   2cf70:	ldr	r0, [r9, #116]	; 0x74
   2cf74:	mov	r5, r1
   2cf78:	add	r1, r1, r1, lsl #1
   2cf7c:	ldr	r3, [sp, #48]	; 0x30
   2cf80:	ldr	r2, [r0, r1, lsl #3]
   2cf84:	cmp	r2, r3
   2cf88:	bne	2d1e4 <__assert_fail@plt+0x1b350>
   2cf8c:	add	r0, r0, r1, lsl #3
   2cf90:	ldr	r2, [sp, #52]	; 0x34
   2cf94:	ldr	r1, [r0, #4]
   2cf98:	cmp	r1, r2
   2cf9c:	bne	2d1e4 <__assert_fail@plt+0x1b350>
   2cfa0:	ldr	r2, [r0, #8]
   2cfa4:	ldr	r6, [r0, #12]
   2cfa8:	ldr	r0, [sp, #20]
   2cfac:	ldr	r8, [r0, #24]
   2cfb0:	cmp	r6, r2
   2cfb4:	bne	2cfd0 <__assert_fail@plt+0x1b13c>
   2cfb8:	ldr	r1, [sp, #48]	; 0x30
   2cfbc:	ldr	r0, [r0, #20]
   2cfc0:	add	r1, r1, r1, lsl #1
   2cfc4:	add	r0, r0, r1, lsl #2
   2cfc8:	ldr	r0, [r0, #8]
   2cfcc:	b	2cfdc <__assert_fail@plt+0x1b148>
   2cfd0:	ldr	r0, [r0, #12]
   2cfd4:	ldr	r1, [sp, #48]	; 0x30
   2cfd8:	add	r0, r0, r1, lsl #2
   2cfdc:	ldr	r9, [r0]
   2cfe0:	ldr	r0, [sp, #52]	; 0x34
   2cfe4:	str	r2, [fp, #-48]	; 0xffffffd0
   2cfe8:	add	r0, r6, r0
   2cfec:	sub	r7, r0, r2
   2cff0:	cmp	r7, #0
   2cff4:	ble	2d03c <__assert_fail@plt+0x1b1a8>
   2cff8:	ldr	r3, [sp, #40]	; 0x28
   2cffc:	sub	r0, r7, #1
   2d000:	ldr	r1, [r3, #48]	; 0x30
   2d004:	cmp	r1, r0
   2d008:	beq	2cf34 <__assert_fail@plt+0x1b0a0>
   2d00c:	ldr	r1, [r3, #80]	; 0x50
   2d010:	cmp	r1, #2
   2d014:	blt	2d048 <__assert_fail@plt+0x1b1b4>
   2d018:	ldr	r0, [r3, #8]
   2d01c:	mov	r1, r7
   2d020:	sub	r0, r0, #4
   2d024:	ldr	r4, [r0, r1, lsl #2]
   2d028:	cmn	r4, #1
   2d02c:	bne	2d07c <__assert_fail@plt+0x1b1e8>
   2d030:	sub	r1, r1, #1
   2d034:	cmp	r1, #0
   2d038:	bgt	2d024 <__assert_fail@plt+0x1b190>
   2d03c:	ldr	r3, [sp, #40]	; 0x28
   2d040:	ldr	sl, [r3, #60]	; 0x3c
   2d044:	b	2d0a4 <__assert_fail@plt+0x1b210>
   2d048:	ldr	r1, [r3, #4]
   2d04c:	ldr	r2, [r3, #68]	; 0x44
   2d050:	mov	sl, #1
   2d054:	ldrb	r0, [r1, r0]
   2d058:	ubfx	r1, r0, #5, #3
   2d05c:	ldr	r1, [r2, r1, lsl #2]
   2d060:	and	r2, r0, #31
   2d064:	tst	r1, sl, lsl r2
   2d068:	bne	2d0a4 <__assert_fail@plt+0x1b210>
   2d06c:	mov	sl, #0
   2d070:	cmp	r0, #10
   2d074:	beq	2d098 <__assert_fail@plt+0x1b204>
   2d078:	b	2d0a4 <__assert_fail@plt+0x1b210>
   2d07c:	ldr	r3, [sp, #40]	; 0x28
   2d080:	ldrb	r0, [r3, #78]	; 0x4e
   2d084:	cmp	r0, #0
   2d088:	bne	2cf44 <__assert_fail@plt+0x1b0b0>
   2d08c:	mov	sl, #0
   2d090:	cmp	r4, #10
   2d094:	bne	2d0a4 <__assert_fail@plt+0x1b210>
   2d098:	ldrb	sl, [r3, #77]	; 0x4d
   2d09c:	cmp	sl, #0
   2d0a0:	movwne	sl, #2
   2d0a4:	ldr	r0, [r3, #100]	; 0x64
   2d0a8:	ldr	r2, [sp, #52]	; 0x34
   2d0ac:	add	r1, r9, r9, lsl #1
   2d0b0:	mov	r4, r3
   2d0b4:	add	r8, r8, r1, lsl #2
   2d0b8:	ldr	r2, [r0, r2, lsl #2]
   2d0bc:	ldr	r0, [r0, r7, lsl #2]
   2d0c0:	cmp	r2, #0
   2d0c4:	ldrne	r2, [r2, #8]
   2d0c8:	moveq	r2, #0
   2d0cc:	cmp	r0, #0
   2d0d0:	str	r2, [sp, #44]	; 0x2c
   2d0d4:	beq	2d140 <__assert_fail@plt+0x1b2ac>
   2d0d8:	ldr	r1, [r0, #40]	; 0x28
   2d0dc:	sub	r4, fp, #44	; 0x2c
   2d0e0:	mov	r2, r8
   2d0e4:	mov	r0, r4
   2d0e8:	bl	2d6dc <__assert_fail@plt+0x1b848>
   2d0ec:	cmp	r0, #0
   2d0f0:	str	r0, [fp, #-32]	; 0xffffffe0
   2d0f4:	bne	2d240 <__assert_fail@plt+0x1b3ac>
   2d0f8:	ldr	r1, [sp, #20]
   2d0fc:	sub	r0, fp, #32
   2d100:	mov	r2, r4
   2d104:	mov	r3, sl
   2d108:	bl	2ae9c <__assert_fail@plt+0x19008>
   2d10c:	ldr	r4, [sp, #40]	; 0x28
   2d110:	ldr	r1, [r4, #100]	; 0x64
   2d114:	str	r0, [r1, r7, lsl #2]
   2d118:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2d11c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2d120:	ldr	r0, [r4, #100]	; 0x64
   2d124:	ldr	r1, [r0, r7, lsl #2]
   2d128:	cmp	r1, #0
   2d12c:	bne	2d188 <__assert_fail@plt+0x1b2f4>
   2d130:	ldr	r9, [fp, #-32]	; 0xffffffe0
   2d134:	cmp	r9, #0
   2d138:	beq	2d188 <__assert_fail@plt+0x1b2f4>
   2d13c:	b	2d224 <__assert_fail@plt+0x1b390>
   2d140:	ldr	r1, [sp, #20]
   2d144:	sub	r0, fp, #32
   2d148:	mov	r2, r8
   2d14c:	mov	r3, sl
   2d150:	bl	2ae9c <__assert_fail@plt+0x19008>
   2d154:	ldr	r1, [r4, #100]	; 0x64
   2d158:	str	r0, [r1, r7, lsl #2]
   2d15c:	ldr	r0, [r4, #100]	; 0x64
   2d160:	ldr	r1, [r0, r7, lsl #2]
   2d164:	cmp	r1, #0
   2d168:	bne	2d188 <__assert_fail@plt+0x1b2f4>
   2d16c:	ldr	r9, [fp, #-32]	; 0xffffffe0
   2d170:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2d174:	cmp	r9, #0
   2d178:	bne	2d224 <__assert_fail@plt+0x1b390>
   2d17c:	cmp	r6, r1
   2d180:	bne	2d1e4 <__assert_fail@plt+0x1b350>
   2d184:	b	2d194 <__assert_fail@plt+0x1b300>
   2d188:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2d18c:	cmp	r6, r1
   2d190:	bne	2d1e4 <__assert_fail@plt+0x1b350>
   2d194:	ldr	r1, [sp, #52]	; 0x34
   2d198:	ldr	r0, [r0, r1, lsl #2]
   2d19c:	ldr	r1, [sp, #44]	; 0x2c
   2d1a0:	ldr	r0, [r0, #8]
   2d1a4:	cmp	r0, r1
   2d1a8:	ble	2d1e4 <__assert_fail@plt+0x1b350>
   2d1ac:	ldr	r4, [sp, #40]	; 0x28
   2d1b0:	ldr	r2, [sp, #52]	; 0x34
   2d1b4:	mov	r1, r8
   2d1b8:	mov	r0, r4
   2d1bc:	bl	2c744 <__assert_fail@plt+0x1a8b0>
   2d1c0:	cmp	r0, #0
   2d1c4:	str	r0, [fp, #-32]	; 0xffffffe0
   2d1c8:	bne	2d258 <__assert_fail@plt+0x1b3c4>
   2d1cc:	mov	r0, r4
   2d1d0:	mov	r1, r8
   2d1d4:	bl	2c840 <__assert_fail@plt+0x1a9ac>
   2d1d8:	cmp	r0, #0
   2d1dc:	str	r0, [fp, #-32]	; 0xffffffe0
   2d1e0:	bne	2d268 <__assert_fail@plt+0x1b3d4>
   2d1e4:	ldr	r9, [sp, #40]	; 0x28
   2d1e8:	mov	r1, r5
   2d1ec:	add	r1, r5, #1
   2d1f0:	ldr	r5, [sp, #52]	; 0x34
   2d1f4:	ldr	r0, [r9, #108]	; 0x6c
   2d1f8:	cmp	r1, r0
   2d1fc:	blt	2cf70 <__assert_fail@plt+0x1b0dc>
   2d200:	ldr	r1, [sp, #16]
   2d204:	ldr	r3, [sp, #24]
   2d208:	ldr	r2, [sp, #20]
   2d20c:	ldr	r0, [r1, #4]
   2d210:	add	r3, r3, #1
   2d214:	cmp	r3, r0
   2d218:	blt	2c8c0 <__assert_fail@plt+0x1aa2c>
   2d21c:	mov	r9, #0
   2d220:	str	r9, [fp, #-32]	; 0xffffffe0
   2d224:	mov	r0, r9
   2d228:	sub	sp, fp, #28
   2d22c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d230:	mov	r9, r0
   2d234:	b	2d220 <__assert_fail@plt+0x1b38c>
   2d238:	mov	r9, #12
   2d23c:	b	2d220 <__assert_fail@plt+0x1b38c>
   2d240:	mov	r9, r0
   2d244:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2d248:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2d24c:	mov	r0, r9
   2d250:	sub	sp, fp, #28
   2d254:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d258:	mov	r9, r0
   2d25c:	mov	r0, r9
   2d260:	sub	sp, fp, #28
   2d264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d268:	mov	r9, r0
   2d26c:	mov	r0, r9
   2d270:	sub	sp, fp, #28
   2d274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d278:	push	{r4, r5, r6, r7, fp, lr}
   2d27c:	add	fp, sp, #16
   2d280:	mov	r4, r0
   2d284:	ldr	r0, [r0, #36]	; 0x24
   2d288:	mov	r5, #12
   2d28c:	cmn	r0, #-536870910	; 0xe0000002
   2d290:	bhi	2d480 <__assert_fail@plt+0x1b5ec>
   2d294:	ldr	r6, [r4, #48]	; 0x30
   2d298:	ldr	r2, [r4, #80]	; 0x50
   2d29c:	cmp	r6, r0, lsl #1
   2d2a0:	lslge	r6, r0, #1
   2d2a4:	cmp	r6, r1
   2d2a8:	movle	r6, r1
   2d2ac:	cmp	r2, #2
   2d2b0:	blt	2d2f8 <__assert_fail@plt+0x1b464>
   2d2b4:	cmn	r6, #-1073741823	; 0xc0000001
   2d2b8:	bhi	2d480 <__assert_fail@plt+0x1b5ec>
   2d2bc:	ldr	r0, [r4, #8]
   2d2c0:	lsl	r7, r6, #2
   2d2c4:	mov	r1, r7
   2d2c8:	bl	36fe4 <__assert_fail@plt+0x25150>
   2d2cc:	cmp	r0, #0
   2d2d0:	beq	2d480 <__assert_fail@plt+0x1b5ec>
   2d2d4:	str	r0, [r4, #8]
   2d2d8:	ldr	r0, [r4, #12]
   2d2dc:	cmp	r0, #0
   2d2e0:	beq	2d2f8 <__assert_fail@plt+0x1b464>
   2d2e4:	mov	r1, r7
   2d2e8:	bl	36fe4 <__assert_fail@plt+0x25150>
   2d2ec:	cmp	r0, #0
   2d2f0:	beq	2d480 <__assert_fail@plt+0x1b5ec>
   2d2f4:	str	r0, [r4, #12]
   2d2f8:	ldrb	r0, [r4, #75]	; 0x4b
   2d2fc:	cmp	r0, #0
   2d300:	beq	2d31c <__assert_fail@plt+0x1b488>
   2d304:	ldr	r0, [r4, #4]
   2d308:	mov	r1, r6
   2d30c:	bl	36fe4 <__assert_fail@plt+0x25150>
   2d310:	cmp	r0, #0
   2d314:	beq	2d480 <__assert_fail@plt+0x1b5ec>
   2d318:	str	r0, [r4, #4]
   2d31c:	str	r6, [r4, #36]	; 0x24
   2d320:	ldr	r0, [r4, #100]	; 0x64
   2d324:	cmp	r0, #0
   2d328:	beq	2d344 <__assert_fail@plt+0x1b4b0>
   2d32c:	mov	r1, #4
   2d330:	add	r1, r1, r6, lsl #2
   2d334:	bl	36fe4 <__assert_fail@plt+0x25150>
   2d338:	cmp	r0, #0
   2d33c:	beq	2d480 <__assert_fail@plt+0x1b5ec>
   2d340:	str	r0, [r4, #100]	; 0x64
   2d344:	ldrb	r1, [r4, #72]	; 0x48
   2d348:	ldr	r0, [r4, #80]	; 0x50
   2d34c:	cmp	r1, #0
   2d350:	beq	2d370 <__assert_fail@plt+0x1b4dc>
   2d354:	cmp	r0, #2
   2d358:	blt	2d384 <__assert_fail@plt+0x1b4f0>
   2d35c:	mov	r0, r4
   2d360:	bl	24e50 <__assert_fail@plt+0x12fbc>
   2d364:	cmp	r0, #0
   2d368:	popne	{r4, r5, r6, r7, fp, pc}
   2d36c:	b	2d47c <__assert_fail@plt+0x1b5e8>
   2d370:	cmp	r0, #2
   2d374:	blt	2d3fc <__assert_fail@plt+0x1b568>
   2d378:	mov	r0, r4
   2d37c:	bl	25510 <__assert_fail@plt+0x1367c>
   2d380:	b	2d47c <__assert_fail@plt+0x1b5e8>
   2d384:	ldr	r6, [r4, #36]	; 0x24
   2d388:	ldr	r0, [r4, #48]	; 0x30
   2d38c:	ldr	r5, [r4, #28]
   2d390:	cmp	r6, r0
   2d394:	movgt	r6, r0
   2d398:	cmp	r5, r6
   2d39c:	bge	2d3f0 <__assert_fail@plt+0x1b55c>
   2d3a0:	ldr	r1, [r4]
   2d3a4:	ldr	r2, [r4, #24]
   2d3a8:	ldr	r0, [r4, #64]	; 0x40
   2d3ac:	add	r1, r1, r2
   2d3b0:	cmp	r0, #0
   2d3b4:	ldrb	r7, [r1, r5]
   2d3b8:	ldrbne	r7, [r0, r7]
   2d3bc:	add	r0, r7, #128	; 0x80
   2d3c0:	lsr	r0, r0, #7
   2d3c4:	cmp	r0, #2
   2d3c8:	bhi	2d3d8 <__assert_fail@plt+0x1b544>
   2d3cc:	bl	11c24 <__ctype_toupper_loc@plt>
   2d3d0:	ldr	r0, [r0]
   2d3d4:	ldr	r7, [r0, r7, lsl #2]
   2d3d8:	ldr	r0, [r4, #4]
   2d3dc:	strb	r7, [r0, r5]
   2d3e0:	add	r5, r5, #1
   2d3e4:	cmp	r5, r6
   2d3e8:	blt	2d3a0 <__assert_fail@plt+0x1b50c>
   2d3ec:	mov	r5, r6
   2d3f0:	str	r5, [r4, #28]
   2d3f4:	str	r5, [r4, #32]
   2d3f8:	b	2d47c <__assert_fail@plt+0x1b5e8>
   2d3fc:	ldr	r2, [r4, #64]	; 0x40
   2d400:	cmp	r2, #0
   2d404:	beq	2d47c <__assert_fail@plt+0x1b5e8>
   2d408:	ldr	r0, [r4, #36]	; 0x24
   2d40c:	ldr	r3, [r4, #48]	; 0x30
   2d410:	ldr	r1, [r4, #28]
   2d414:	cmp	r0, r3
   2d418:	movgt	r0, r3
   2d41c:	cmp	r1, r0
   2d420:	bge	2d474 <__assert_fail@plt+0x1b5e0>
   2d424:	ldm	r4, {r3, r7}
   2d428:	ldr	r6, [r4, #24]
   2d42c:	add	r6, r6, r1
   2d430:	ldrb	r3, [r3, r6]
   2d434:	ldrb	r2, [r2, r3]
   2d438:	strb	r2, [r7, r1]
   2d43c:	add	r1, r1, #1
   2d440:	cmp	r1, r0
   2d444:	bge	2d470 <__assert_fail@plt+0x1b5dc>
   2d448:	ldm	r4, {r2, r3}
   2d44c:	ldr	r7, [r4, #24]
   2d450:	ldr	r6, [r4, #64]	; 0x40
   2d454:	add	r2, r2, r7
   2d458:	ldrb	r2, [r2, r1]
   2d45c:	ldrb	r2, [r6, r2]
   2d460:	strb	r2, [r3, r1]
   2d464:	add	r1, r1, #1
   2d468:	cmp	r1, r0
   2d46c:	blt	2d448 <__assert_fail@plt+0x1b5b4>
   2d470:	mov	r1, r0
   2d474:	str	r1, [r4, #28]
   2d478:	str	r1, [r4, #32]
   2d47c:	mov	r5, #0
   2d480:	mov	r0, r5
   2d484:	pop	{r4, r5, r6, r7, fp, pc}
   2d488:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2d48c:	add	fp, sp, #24
   2d490:	sub	sp, sp, #16
   2d494:	mov	r9, r0
   2d498:	mov	r4, r1
   2d49c:	ldr	r5, [r1, #40]	; 0x28
   2d4a0:	ldr	r7, [r1, #84]	; 0x54
   2d4a4:	ldr	r0, [r1, #100]	; 0x64
   2d4a8:	ldr	r1, [r1, #104]	; 0x68
   2d4ac:	mov	r6, r2
   2d4b0:	cmp	r5, r1
   2d4b4:	ble	2d4d4 <__assert_fail@plt+0x1b640>
   2d4b8:	str	r6, [r0, r5, lsl #2]
   2d4bc:	str	r5, [r4, #104]	; 0x68
   2d4c0:	cmp	r6, #0
   2d4c4:	ldrne	r0, [r7, #76]	; 0x4c
   2d4c8:	cmpne	r0, #0
   2d4cc:	beq	2d628 <__assert_fail@plt+0x1b794>
   2d4d0:	b	2d634 <__assert_fail@plt+0x1b7a0>
   2d4d4:	ldr	r1, [r0, r5, lsl #2]
   2d4d8:	cmp	r1, #0
   2d4dc:	beq	2d558 <__assert_fail@plt+0x1b6c4>
   2d4e0:	ldr	r2, [r1, #40]	; 0x28
   2d4e4:	cmp	r6, #0
   2d4e8:	beq	2d5a4 <__assert_fail@plt+0x1b710>
   2d4ec:	ldr	r8, [r6, #40]	; 0x28
   2d4f0:	mov	r0, sp
   2d4f4:	mov	r1, r8
   2d4f8:	bl	2d6dc <__assert_fail@plt+0x1b848>
   2d4fc:	cmp	r0, #0
   2d500:	str	r0, [r9]
   2d504:	bne	2d6ac <__assert_fail@plt+0x1b818>
   2d508:	ldr	r0, [r4, #40]	; 0x28
   2d50c:	cmp	r0, #0
   2d510:	ble	2d550 <__assert_fail@plt+0x1b6bc>
   2d514:	ldr	r2, [r4, #48]	; 0x30
   2d518:	sub	r1, r0, #1
   2d51c:	cmp	r2, r1
   2d520:	beq	2d69c <__assert_fail@plt+0x1b808>
   2d524:	ldr	r2, [r4, #80]	; 0x50
   2d528:	cmp	r2, #2
   2d52c:	blt	2d570 <__assert_fail@plt+0x1b6dc>
   2d530:	ldr	r1, [r4, #8]
   2d534:	sub	r1, r1, #4
   2d538:	ldr	r6, [r1, r0, lsl #2]
   2d53c:	cmn	r6, #1
   2d540:	bne	2d5c8 <__assert_fail@plt+0x1b734>
   2d544:	sub	r0, r0, #1
   2d548:	cmp	r0, #0
   2d54c:	bgt	2d538 <__assert_fail@plt+0x1b6a4>
   2d550:	ldr	r3, [r4, #60]	; 0x3c
   2d554:	b	2d5ec <__assert_fail@plt+0x1b758>
   2d558:	str	r6, [r0, r5, lsl #2]
   2d55c:	cmp	r6, #0
   2d560:	ldrne	r0, [r7, #76]	; 0x4c
   2d564:	cmpne	r0, #0
   2d568:	beq	2d628 <__assert_fail@plt+0x1b794>
   2d56c:	b	2d634 <__assert_fail@plt+0x1b7a0>
   2d570:	ldr	r0, [r4, #4]
   2d574:	ldr	r2, [r4, #68]	; 0x44
   2d578:	mov	r3, #1
   2d57c:	ldrb	r0, [r0, r1]
   2d580:	ubfx	r1, r0, #5, #3
   2d584:	ldr	r1, [r2, r1, lsl #2]
   2d588:	and	r2, r0, #31
   2d58c:	tst	r1, r3, lsl r2
   2d590:	bne	2d5ec <__assert_fail@plt+0x1b758>
   2d594:	mov	r3, #0
   2d598:	cmp	r0, #10
   2d59c:	beq	2d5e0 <__assert_fail@plt+0x1b74c>
   2d5a0:	b	2d5ec <__assert_fail@plt+0x1b758>
   2d5a4:	ldr	r0, [r2, #8]
   2d5a8:	vldr	d16, [r2]
   2d5ac:	mov	r8, #0
   2d5b0:	str	r0, [sp, #8]
   2d5b4:	mov	r0, r5
   2d5b8:	vstr	d16, [sp]
   2d5bc:	cmp	r0, #0
   2d5c0:	bgt	2d514 <__assert_fail@plt+0x1b680>
   2d5c4:	b	2d550 <__assert_fail@plt+0x1b6bc>
   2d5c8:	ldrb	r0, [r4, #78]	; 0x4e
   2d5cc:	cmp	r0, #0
   2d5d0:	bne	2d6bc <__assert_fail@plt+0x1b828>
   2d5d4:	mov	r3, #0
   2d5d8:	cmp	r6, #10
   2d5dc:	bne	2d5ec <__assert_fail@plt+0x1b758>
   2d5e0:	ldrb	r3, [r4, #77]	; 0x4d
   2d5e4:	cmp	r3, #0
   2d5e8:	movwne	r3, #2
   2d5ec:	mov	r2, sp
   2d5f0:	mov	r0, r9
   2d5f4:	mov	r1, r7
   2d5f8:	bl	2ae9c <__assert_fail@plt+0x19008>
   2d5fc:	mov	r6, r0
   2d600:	ldr	r0, [r4, #100]	; 0x64
   2d604:	cmp	r8, #0
   2d608:	str	r6, [r0, r5, lsl #2]
   2d60c:	beq	2d618 <__assert_fail@plt+0x1b784>
   2d610:	ldr	r0, [sp, #8]
   2d614:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2d618:	cmp	r6, #0
   2d61c:	ldrne	r0, [r7, #76]	; 0x4c
   2d620:	cmpne	r0, #0
   2d624:	bne	2d634 <__assert_fail@plt+0x1b7a0>
   2d628:	mov	r0, r6
   2d62c:	sub	sp, fp, #24
   2d630:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2d634:	add	r7, r6, #4
   2d638:	mov	r0, r4
   2d63c:	mov	r2, r5
   2d640:	mov	r1, r7
   2d644:	bl	2c744 <__assert_fail@plt+0x1a8b0>
   2d648:	cmp	r0, #0
   2d64c:	str	r0, [r9]
   2d650:	bne	2d68c <__assert_fail@plt+0x1b7f8>
   2d654:	ldrb	r0, [r6, #52]	; 0x34
   2d658:	tst	r0, #64	; 0x40
   2d65c:	beq	2d628 <__assert_fail@plt+0x1b794>
   2d660:	mov	r0, r4
   2d664:	mov	r1, r7
   2d668:	bl	2c840 <__assert_fail@plt+0x1a9ac>
   2d66c:	str	r0, [r9]
   2d670:	cmp	r0, #0
   2d674:	mov	r6, #0
   2d678:	ldreq	r0, [r4, #100]	; 0x64
   2d67c:	ldreq	r6, [r0, r5, lsl #2]
   2d680:	mov	r0, r6
   2d684:	sub	sp, fp, #24
   2d688:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2d68c:	mov	r6, #0
   2d690:	mov	r0, r6
   2d694:	sub	sp, fp, #24
   2d698:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2d69c:	ldr	r0, [r4, #88]	; 0x58
   2d6a0:	and	r0, r0, #2
   2d6a4:	eor	r3, r0, #10
   2d6a8:	b	2d5ec <__assert_fail@plt+0x1b758>
   2d6ac:	mov	r6, #0
   2d6b0:	mov	r0, r6
   2d6b4:	sub	sp, fp, #24
   2d6b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2d6bc:	mov	r0, r6
   2d6c0:	bl	11cb4 <iswalnum@plt>
   2d6c4:	mov	r3, #1
   2d6c8:	cmp	r6, #95	; 0x5f
   2d6cc:	beq	2d5ec <__assert_fail@plt+0x1b758>
   2d6d0:	cmp	r0, #0
   2d6d4:	beq	2d5d4 <__assert_fail@plt+0x1b740>
   2d6d8:	b	2d5ec <__assert_fail@plt+0x1b758>
   2d6dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d6e0:	add	fp, sp, #28
   2d6e4:	sub	sp, sp, #20
   2d6e8:	mov	sl, r2
   2d6ec:	cmp	r1, #0
   2d6f0:	str	r0, [sp, #16]
   2d6f4:	beq	2d75c <__assert_fail@plt+0x1b8c8>
   2d6f8:	ldr	r0, [r1, #4]
   2d6fc:	mov	r8, r1
   2d700:	cmp	sl, #0
   2d704:	beq	2d718 <__assert_fail@plt+0x1b884>
   2d708:	cmp	r0, #1
   2d70c:	ldrge	r1, [sl, #4]
   2d710:	cmpge	r1, #1
   2d714:	bge	2d7d8 <__assert_fail@plt+0x1b944>
   2d718:	cmp	r0, #1
   2d71c:	blt	2d75c <__assert_fail@plt+0x1b8c8>
   2d720:	ldr	r1, [sp, #16]
   2d724:	str	r0, [r1, #4]
   2d728:	ldr	r1, [r8, #4]
   2d72c:	cmp	r1, #1
   2d730:	blt	2d7bc <__assert_fail@plt+0x1b928>
   2d734:	ldr	r4, [sp, #16]
   2d738:	str	r0, [r4]
   2d73c:	lsl	r0, r0, #2
   2d740:	bl	36fb4 <__assert_fail@plt+0x25120>
   2d744:	cmp	r0, #0
   2d748:	str	r0, [r4, #8]
   2d74c:	beq	2d94c <__assert_fail@plt+0x1bab8>
   2d750:	ldr	r2, [r8, #4]
   2d754:	ldr	r1, [r8, #8]
   2d758:	b	2d7a8 <__assert_fail@plt+0x1b914>
   2d75c:	cmp	sl, #0
   2d760:	beq	2d7bc <__assert_fail@plt+0x1b928>
   2d764:	ldr	r0, [sl, #4]
   2d768:	cmp	r0, #1
   2d76c:	blt	2d7bc <__assert_fail@plt+0x1b928>
   2d770:	ldr	r1, [sp, #16]
   2d774:	str	r0, [r1, #4]
   2d778:	ldr	r1, [sl, #4]
   2d77c:	cmp	r1, #1
   2d780:	blt	2d7bc <__assert_fail@plt+0x1b928>
   2d784:	ldr	r4, [sp, #16]
   2d788:	str	r0, [r4]
   2d78c:	lsl	r0, r0, #2
   2d790:	bl	36fb4 <__assert_fail@plt+0x25120>
   2d794:	cmp	r0, #0
   2d798:	str	r0, [r4, #8]
   2d79c:	beq	2d94c <__assert_fail@plt+0x1bab8>
   2d7a0:	ldr	r2, [sl, #4]
   2d7a4:	ldr	r1, [sl, #8]
   2d7a8:	lsl	r2, r2, #2
   2d7ac:	bl	11a8c <memcpy@plt>
   2d7b0:	mov	r0, #0
   2d7b4:	sub	sp, fp, #28
   2d7b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d7bc:	ldr	r1, [sp, #16]
   2d7c0:	mov	r0, #0
   2d7c4:	str	r0, [r1]
   2d7c8:	str	r0, [r1, #4]
   2d7cc:	str	r0, [r1, #8]
   2d7d0:	sub	sp, fp, #28
   2d7d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d7d8:	ldr	r4, [sp, #16]
   2d7dc:	add	r0, r1, r0
   2d7e0:	str	r0, [r4]
   2d7e4:	lsl	r0, r0, #2
   2d7e8:	bl	36fb4 <__assert_fail@plt+0x25120>
   2d7ec:	cmp	r0, #0
   2d7f0:	str	r0, [r4, #8]
   2d7f4:	beq	2d95c <__assert_fail@plt+0x1bac8>
   2d7f8:	ldr	r9, [sl, #4]
   2d7fc:	ldr	lr, [r8, #4]
   2d800:	mov	r1, #0
   2d804:	mov	r7, #0
   2d808:	cmp	r9, #0
   2d80c:	movwgt	r1, #1
   2d810:	cmp	lr, #1
   2d814:	blt	2d8e0 <__assert_fail@plt+0x1ba4c>
   2d818:	mov	r2, #0
   2d81c:	mov	ip, #0
   2d820:	str	r2, [sp, #8]
   2d824:	mov	r2, #0
   2d828:	str	r2, [sp, #12]
   2d82c:	mov	r2, #0
   2d830:	ldr	r4, [sp, #12]
   2d834:	mov	r7, ip
   2d838:	tst	r1, #1
   2d83c:	beq	2d910 <__assert_fail@plt+0x1ba7c>
   2d840:	ldr	r1, [sl, #8]
   2d844:	ldr	r5, [r1, r7, lsl #2]
   2d848:	ldr	r1, [r8, #8]
   2d84c:	ldr	r3, [r1, r2, lsl #2]
   2d850:	cmp	r3, r5
   2d854:	ble	2d87c <__assert_fail@plt+0x1b9e8>
   2d858:	add	r7, r7, #1
   2d85c:	mov	r1, #0
   2d860:	str	r5, [r0, r4, lsl #2]
   2d864:	add	r4, r4, #1
   2d868:	cmp	r9, r7
   2d86c:	movwgt	r1, #1
   2d870:	cmp	lr, r2
   2d874:	bgt	2d838 <__assert_fail@plt+0x1b9a4>
   2d878:	b	2d8e4 <__assert_fail@plt+0x1ba50>
   2d87c:	str	r3, [r0, r4, lsl #2]
   2d880:	ldr	r6, [sp, #8]
   2d884:	add	r1, r7, #1
   2d888:	mov	ip, r7
   2d88c:	add	r2, r2, #1
   2d890:	ldr	r9, [sl, #4]
   2d894:	ldr	lr, [r8, #4]
   2d898:	moveq	ip, r1
   2d89c:	str	r1, [sp, #4]
   2d8a0:	mov	r1, #0
   2d8a4:	sub	r6, r6, #1
   2d8a8:	cmp	r9, ip
   2d8ac:	str	r6, [sp, #8]
   2d8b0:	add	r6, r4, #1
   2d8b4:	movwgt	r1, #1
   2d8b8:	cmp	lr, r2
   2d8bc:	str	r6, [sp, #12]
   2d8c0:	bgt	2d830 <__assert_fail@plt+0x1b99c>
   2d8c4:	ldr	r2, [sp, #4]
   2d8c8:	cmp	r3, r5
   2d8cc:	add	r4, r4, #1
   2d8d0:	moveq	r7, r2
   2d8d4:	cmp	r1, #0
   2d8d8:	bne	2d8ec <__assert_fail@plt+0x1ba58>
   2d8dc:	b	2d938 <__assert_fail@plt+0x1baa4>
   2d8e0:	mov	r4, #0
   2d8e4:	cmp	r1, #0
   2d8e8:	beq	2d938 <__assert_fail@plt+0x1baa4>
   2d8ec:	ldr	r1, [sl, #8]
   2d8f0:	sub	r2, r9, r7
   2d8f4:	add	r0, r0, r4, lsl #2
   2d8f8:	lsl	r2, r2, #2
   2d8fc:	add	r1, r1, r7, lsl #2
   2d900:	bl	11a8c <memcpy@plt>
   2d904:	sub	r0, r4, r7
   2d908:	add	r4, r0, r9
   2d90c:	b	2d938 <__assert_fail@plt+0x1baa4>
   2d910:	ldr	r1, [r8, #8]
   2d914:	add	r0, r0, r4, lsl #2
   2d918:	add	r1, r1, r2, lsl #2
   2d91c:	sub	r2, lr, r2
   2d920:	lsl	r2, r2, #2
   2d924:	bl	11a8c <memcpy@plt>
   2d928:	ldr	r0, [r8, #4]
   2d92c:	ldr	r1, [sp, #8]
   2d930:	add	r0, r0, r1
   2d934:	add	r4, r0, r4
   2d938:	ldr	r0, [sp, #16]
   2d93c:	str	r4, [r0, #4]
   2d940:	mov	r0, #0
   2d944:	sub	sp, fp, #28
   2d948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d94c:	ldr	r1, [sp, #16]
   2d950:	mov	r0, #0
   2d954:	str	r0, [r1]
   2d958:	str	r0, [r1, #4]
   2d95c:	mov	r0, #12
   2d960:	sub	sp, fp, #28
   2d964:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d968:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d96c:	add	fp, sp, #28
   2d970:	sub	sp, sp, #12
   2d974:	mov	r6, r2
   2d978:	mov	r7, r3
   2d97c:	ldr	r2, [r2]
   2d980:	ldr	r9, [fp, #8]
   2d984:	mov	r4, r0
   2d988:	mov	r0, #8
   2d98c:	mov	r8, r1
   2d990:	ldr	r3, [r6, #4]
   2d994:	str	r0, [sp, #8]
   2d998:	add	r1, r6, #8
   2d99c:	mov	r0, r4
   2d9a0:	stm	sp, {r7, r9}
   2d9a4:	bl	2db3c <__assert_fail@plt+0x1bca8>
   2d9a8:	mov	r5, r0
   2d9ac:	cmp	r0, #0
   2d9b0:	beq	2d9c0 <__assert_fail@plt+0x1bb2c>
   2d9b4:	mov	r0, r5
   2d9b8:	sub	sp, fp, #28
   2d9bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d9c0:	ldr	r0, [r4, #108]	; 0x6c
   2d9c4:	ldr	r1, [r4, #112]	; 0x70
   2d9c8:	ldr	sl, [r6, #4]
   2d9cc:	ldr	r5, [r8]
   2d9d0:	cmp	r0, r1
   2d9d4:	blt	2da24 <__assert_fail@plt+0x1bb90>
   2d9d8:	ldr	r0, [r4, #116]	; 0x74
   2d9dc:	add	r1, r1, r1, lsl #1
   2d9e0:	lsl	r1, r1, #4
   2d9e4:	bl	36fe4 <__assert_fail@plt+0x25150>
   2d9e8:	cmp	r0, #0
   2d9ec:	beq	2db24 <__assert_fail@plt+0x1bc90>
   2d9f0:	str	r0, [r4, #116]	; 0x74
   2d9f4:	ldr	r1, [r4, #108]	; 0x6c
   2d9f8:	ldr	r2, [r4, #112]	; 0x70
   2d9fc:	add	r1, r1, r1, lsl #1
   2da00:	add	r0, r0, r1, lsl #3
   2da04:	add	r1, r2, r2, lsl #1
   2da08:	lsl	r2, r1, #3
   2da0c:	mov	r1, #0
   2da10:	bl	11cd8 <memset@plt>
   2da14:	ldr	r1, [r4, #112]	; 0x70
   2da18:	ldr	r0, [r4, #108]	; 0x6c
   2da1c:	lsl	r1, r1, #1
   2da20:	str	r1, [r4, #112]	; 0x70
   2da24:	ldr	r1, [r4, #116]	; 0x74
   2da28:	cmp	r0, #1
   2da2c:	blt	2da4c <__assert_fail@plt+0x1bbb8>
   2da30:	sub	r2, r0, #1
   2da34:	add	r2, r2, r2, lsl #1
   2da38:	add	r2, r1, r2, lsl #3
   2da3c:	ldr	r3, [r2, #4]
   2da40:	cmp	r3, r9
   2da44:	moveq	r3, #1
   2da48:	strbeq	r3, [r2, #20]
   2da4c:	add	r2, r0, r0, lsl #1
   2da50:	cmp	sl, r5
   2da54:	mov	r3, #0
   2da58:	add	r0, r0, #1
   2da5c:	str	r7, [r1, r2, lsl #3]!
   2da60:	mov	r2, #0
   2da64:	mvneq	r3, #0
   2da68:	str	r9, [r1, #4]
   2da6c:	str	r5, [r1, #8]
   2da70:	str	sl, [r1, #12]
   2da74:	str	r3, [r1, #16]
   2da78:	str	r0, [r4, #108]	; 0x6c
   2da7c:	strb	r2, [r1, #20]
   2da80:	sub	r0, sl, r5
   2da84:	ldr	r1, [r4, #120]	; 0x78
   2da88:	cmp	r1, r0
   2da8c:	strlt	r0, [r4, #120]	; 0x78
   2da90:	ldr	r0, [r6, #4]
   2da94:	ldr	r1, [r8]
   2da98:	ldr	r7, [r4, #104]	; 0x68
   2da9c:	add	r0, r0, r9
   2daa0:	sub	r6, r0, r1
   2daa4:	ldr	r0, [r4, #36]	; 0x24
   2daa8:	cmp	r0, r6
   2daac:	ldrle	r1, [r4, #48]	; 0x30
   2dab0:	cmple	r0, r1
   2dab4:	blt	2db08 <__assert_fail@plt+0x1bc74>
   2dab8:	ldr	r0, [r4, #28]
   2dabc:	cmp	r0, r6
   2dac0:	ldrle	r1, [r4, #48]	; 0x30
   2dac4:	cmple	r0, r1
   2dac8:	blt	2db08 <__assert_fail@plt+0x1bc74>
   2dacc:	mov	r5, #0
   2dad0:	cmp	r6, r7
   2dad4:	ble	2d9b4 <__assert_fail@plt+0x1bb20>
   2dad8:	sub	r0, r6, r7
   2dadc:	mov	r1, #0
   2dae0:	mov	r5, #0
   2dae4:	lsl	r2, r0, #2
   2dae8:	ldr	r0, [r4, #100]	; 0x64
   2daec:	add	r0, r0, r7, lsl #2
   2daf0:	add	r0, r0, #4
   2daf4:	bl	11cd8 <memset@plt>
   2daf8:	str	r6, [r4, #104]	; 0x68
   2dafc:	mov	r0, r5
   2db00:	sub	sp, fp, #28
   2db04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2db08:	add	r1, r6, #1
   2db0c:	mov	r0, r4
   2db10:	bl	2d278 <__assert_fail@plt+0x1b3e4>
   2db14:	mov	r5, r0
   2db18:	cmp	r0, #0
   2db1c:	bne	2d9b4 <__assert_fail@plt+0x1bb20>
   2db20:	b	2dacc <__assert_fail@plt+0x1bc38>
   2db24:	ldr	r0, [r4, #116]	; 0x74
   2db28:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2db2c:	mov	r5, #12
   2db30:	mov	r0, r5
   2db34:	sub	sp, fp, #28
   2db38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2db3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2db40:	add	fp, sp, #28
   2db44:	sub	sp, sp, #84	; 0x54
   2db48:	ldr	sl, [r0, #84]	; 0x54
   2db4c:	mov	r8, r2
   2db50:	mov	r2, #0
   2db54:	mov	r9, r3
   2db58:	ldr	r3, [fp, #12]
   2db5c:	str	r0, [sp, #40]	; 0x28
   2db60:	str	r2, [fp, #-52]	; 0xffffffcc
   2db64:	ldr	r5, [r1, #4]
   2db68:	ldr	r2, [sl]
   2db6c:	str	sl, [sp, #20]
   2db70:	ldr	r2, [r2, r8, lsl #3]
   2db74:	str	r2, [sp, #24]
   2db78:	ldr	r2, [r0, #120]	; 0x78
   2db7c:	add	r2, r2, r3
   2db80:	cmp	r5, r2
   2db84:	ble	2e488 <__assert_fail@plt+0x1c5f4>
   2db88:	add	r4, r1, #8
   2db8c:	ldr	r2, [r0, #40]	; 0x28
   2db90:	ldr	r5, [r1]
   2db94:	ldr	r3, [r0, #88]	; 0x58
   2db98:	str	r1, [sp, #16]
   2db9c:	str	r2, [sp, #12]
   2dba0:	ldr	r2, [r0, #100]	; 0x64
   2dba4:	cmp	r5, #0
   2dba8:	moveq	r5, r9
   2dbac:	cmp	r5, #0
   2dbb0:	str	r2, [sp, #8]
   2dbb4:	ldr	r2, [r4]
   2dbb8:	str	r2, [r0, #100]	; 0x64
   2dbbc:	str	r5, [r0, #40]	; 0x28
   2dbc0:	ble	2dc04 <__assert_fail@plt+0x1bd70>
   2dbc4:	ldr	r2, [r0, #48]	; 0x30
   2dbc8:	sub	r7, r5, #1
   2dbcc:	cmp	r2, r7
   2dbd0:	beq	2e4f8 <__assert_fail@plt+0x1c664>
   2dbd4:	ldr	r2, [r0, #80]	; 0x50
   2dbd8:	cmp	r2, #2
   2dbdc:	blt	2dc48 <__assert_fail@plt+0x1bdb4>
   2dbe0:	ldr	r2, [r0, #8]
   2dbe4:	mov	r3, r5
   2dbe8:	sub	r2, r2, #4
   2dbec:	ldr	r6, [r2, r3, lsl #2]
   2dbf0:	cmn	r6, #1
   2dbf4:	bne	2dc7c <__assert_fail@plt+0x1bde8>
   2dbf8:	sub	r3, r3, #1
   2dbfc:	cmp	r3, #0
   2dc00:	bgt	2dbec <__assert_fail@plt+0x1bd58>
   2dc04:	ldr	r7, [r0, #60]	; 0x3c
   2dc08:	cmp	r5, r9
   2dc0c:	beq	2dcac <__assert_fail@plt+0x1be18>
   2dc10:	ldr	r0, [sp, #40]	; 0x28
   2dc14:	ldr	r0, [r0, #100]	; 0x64
   2dc18:	ldr	r4, [r0, r5, lsl #2]
   2dc1c:	cmp	r4, #0
   2dc20:	beq	2dd68 <__assert_fail@plt+0x1bed4>
   2dc24:	ldrb	r0, [r4, #52]	; 0x34
   2dc28:	ldr	r8, [fp, #16]
   2dc2c:	tst	r0, #64	; 0x40
   2dc30:	bne	2dd80 <__assert_fail@plt+0x1beec>
   2dc34:	mov	r0, #0
   2dc38:	str	r0, [sp, #52]	; 0x34
   2dc3c:	str	r0, [sp, #48]	; 0x30
   2dc40:	str	r0, [sp, #56]	; 0x38
   2dc44:	b	2ddcc <__assert_fail@plt+0x1bf38>
   2dc48:	ldr	r3, [r0, #4]
   2dc4c:	ldr	r2, [r0, #68]	; 0x44
   2dc50:	ldrb	r0, [r3, r7]
   2dc54:	mov	r7, #1
   2dc58:	ubfx	r1, r0, #5, #3
   2dc5c:	ldr	r1, [r2, r1, lsl #2]
   2dc60:	and	r2, r0, #31
   2dc64:	tst	r1, r7, lsl r2
   2dc68:	bne	2dca4 <__assert_fail@plt+0x1be10>
   2dc6c:	mov	r7, #0
   2dc70:	cmp	r0, #10
   2dc74:	beq	2dc94 <__assert_fail@plt+0x1be00>
   2dc78:	b	2dca4 <__assert_fail@plt+0x1be10>
   2dc7c:	ldrb	r0, [r0, #78]	; 0x4e
   2dc80:	cmp	r0, #0
   2dc84:	bne	2e544 <__assert_fail@plt+0x1c6b0>
   2dc88:	mov	r7, #0
   2dc8c:	cmp	r6, #10
   2dc90:	bne	2dca4 <__assert_fail@plt+0x1be10>
   2dc94:	ldr	r0, [sp, #40]	; 0x28
   2dc98:	ldrb	r7, [r0, #77]	; 0x4d
   2dc9c:	cmp	r7, #0
   2dca0:	movwne	r7, #2
   2dca4:	cmp	r5, r9
   2dca8:	bne	2dc10 <__assert_fail@plt+0x1bd7c>
   2dcac:	mov	r0, #1
   2dcb0:	str	r0, [sp, #52]	; 0x34
   2dcb4:	str	r0, [sp, #48]	; 0x30
   2dcb8:	mov	r0, #4
   2dcbc:	bl	36fb4 <__assert_fail@plt+0x25120>
   2dcc0:	cmp	r0, #0
   2dcc4:	str	r0, [sp, #56]	; 0x38
   2dcc8:	beq	2e524 <__assert_fail@plt+0x1c690>
   2dccc:	str	r8, [r0]
   2dcd0:	ldr	r8, [fp, #16]
   2dcd4:	ldr	r2, [sp, #24]
   2dcd8:	mov	r0, #0
   2dcdc:	add	r1, sp, #48	; 0x30
   2dce0:	str	r0, [fp, #-52]	; 0xffffffcc
   2dce4:	mov	r0, sl
   2dce8:	mov	r3, r8
   2dcec:	bl	2e564 <__assert_fail@plt+0x1c6d0>
   2dcf0:	cmp	r0, #0
   2dcf4:	str	r0, [fp, #-52]	; 0xffffffcc
   2dcf8:	bne	2e50c <__assert_fail@plt+0x1c678>
   2dcfc:	ldr	r0, [sp, #52]	; 0x34
   2dd00:	cmp	r0, #0
   2dd04:	beq	2dd2c <__assert_fail@plt+0x1be98>
   2dd08:	ldr	r0, [sp, #40]	; 0x28
   2dd0c:	ldr	r3, [sp, #24]
   2dd10:	add	r1, sp, #48	; 0x30
   2dd14:	mov	r2, r5
   2dd18:	str	r8, [sp]
   2dd1c:	bl	2e6b0 <__assert_fail@plt+0x1c81c>
   2dd20:	cmp	r0, #0
   2dd24:	str	r0, [fp, #-52]	; 0xffffffcc
   2dd28:	bne	2e50c <__assert_fail@plt+0x1c678>
   2dd2c:	ldr	r1, [sp, #20]
   2dd30:	sub	r0, fp, #52	; 0x34
   2dd34:	add	r2, sp, #48	; 0x30
   2dd38:	mov	r3, r7
   2dd3c:	bl	2ae9c <__assert_fail@plt+0x19008>
   2dd40:	mov	r4, r0
   2dd44:	cmp	r0, #0
   2dd48:	bne	2dd58 <__assert_fail@plt+0x1bec4>
   2dd4c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2dd50:	cmp	r0, #0
   2dd54:	bne	2e470 <__assert_fail@plt+0x1c5dc>
   2dd58:	ldr	r0, [sp, #40]	; 0x28
   2dd5c:	ldr	r0, [r0, #100]	; 0x64
   2dd60:	str	r4, [r0, r5, lsl #2]
   2dd64:	b	2ddcc <__assert_fail@plt+0x1bf38>
   2dd68:	ldr	r8, [fp, #16]
   2dd6c:	mov	r4, #0
   2dd70:	str	r4, [sp, #52]	; 0x34
   2dd74:	str	r4, [sp, #48]	; 0x30
   2dd78:	str	r4, [sp, #56]	; 0x38
   2dd7c:	b	2ddcc <__assert_fail@plt+0x1bf38>
   2dd80:	ldr	r0, [r4, #8]
   2dd84:	cmp	r0, #1
   2dd88:	str	r0, [sp, #52]	; 0x34
   2dd8c:	blt	2e41c <__assert_fail@plt+0x1c588>
   2dd90:	str	r0, [sp, #48]	; 0x30
   2dd94:	lsl	r0, r0, #2
   2dd98:	bl	36fb4 <__assert_fail@plt+0x25120>
   2dd9c:	cmp	r0, #0
   2dda0:	str	r0, [sp, #56]	; 0x38
   2dda4:	beq	2e524 <__assert_fail@plt+0x1c690>
   2dda8:	ldr	r2, [r4, #8]
   2ddac:	ldr	r1, [r4, #12]
   2ddb0:	lsl	r2, r2, #2
   2ddb4:	bl	11a8c <memcpy@plt>
   2ddb8:	ldrb	r0, [r4, #52]	; 0x34
   2ddbc:	mov	r1, #0
   2ddc0:	str	r1, [fp, #-52]	; 0xffffffcc
   2ddc4:	tst	r0, #64	; 0x40
   2ddc8:	bne	2dd08 <__assert_fail@plt+0x1be74>
   2ddcc:	str	r4, [sp, #36]	; 0x24
   2ddd0:	ldr	r4, [fp, #12]
   2ddd4:	mov	r9, r4
   2ddd8:	cmp	r5, r4
   2dddc:	bge	2e364 <__assert_fail@plt+0x1c4d0>
   2dde0:	ldr	r7, [sp, #40]	; 0x28
   2dde4:	ldr	r4, [sp, #20]
   2dde8:	ldr	sl, [sp, #24]
   2ddec:	mov	r0, #0
   2ddf0:	str	r0, [sp, #32]
   2ddf4:	ldr	r0, [r7, #120]	; 0x78
   2ddf8:	ldr	r1, [sp, #32]
   2ddfc:	cmp	r1, r0
   2de00:	bgt	2e368 <__assert_fail@plt+0x1c4d4>
   2de04:	mov	r0, #0
   2de08:	add	r1, r5, #1
   2de0c:	str	r0, [sp, #52]	; 0x34
   2de10:	str	r1, [sp, #28]
   2de14:	ldr	r0, [r7, #100]	; 0x64
   2de18:	ldr	r0, [r0, r1, lsl #2]
   2de1c:	cmp	r0, #0
   2de20:	beq	2de3c <__assert_fail@plt+0x1bfa8>
   2de24:	add	r1, r0, #4
   2de28:	add	r0, sp, #48	; 0x30
   2de2c:	bl	2abac <__assert_fail@plt+0x18d18>
   2de30:	cmp	r0, #0
   2de34:	str	r0, [fp, #-52]	; 0xffffffcc
   2de38:	bne	2e470 <__assert_fail@plt+0x1c5dc>
   2de3c:	ldr	r1, [sp, #36]	; 0x24
   2de40:	cmp	r1, #0
   2de44:	beq	2e1d8 <__assert_fail@plt+0x1c344>
   2de48:	mov	r0, #0
   2de4c:	ldr	r8, [r7, #84]	; 0x54
   2de50:	str	r0, [fp, #-32]	; 0xffffffe0
   2de54:	str	r0, [fp, #-44]	; 0xffffffd4
   2de58:	str	r0, [fp, #-48]	; 0xffffffd0
   2de5c:	str	r0, [fp, #-40]	; 0xffffffd8
   2de60:	ldr	r1, [r1, #20]
   2de64:	cmp	r1, #1
   2de68:	blt	2e1c8 <__assert_fail@plt+0x1c334>
   2de6c:	str	r5, [sp, #44]	; 0x2c
   2de70:	ldr	r5, [sp, #36]	; 0x24
   2de74:	mov	r4, #0
   2de78:	b	2e034 <__assert_fail@plt+0x1c1a0>
   2de7c:	mov	r0, #1
   2de80:	str	r0, [sp, #52]	; 0x34
   2de84:	str	r0, [sp, #48]	; 0x30
   2de88:	mov	r0, #4
   2de8c:	bl	36fb4 <__assert_fail@plt+0x25120>
   2de90:	cmp	r0, #0
   2de94:	str	r0, [sp, #56]	; 0x38
   2de98:	beq	2e434 <__assert_fail@plt+0x1c5a0>
   2de9c:	str	r6, [r0]
   2dea0:	ldr	r0, [r5, #20]
   2dea4:	add	r4, r4, #1
   2dea8:	cmp	r4, r0
   2deac:	blt	2e034 <__assert_fail@plt+0x1c1a0>
   2deb0:	b	2e1b0 <__assert_fail@plt+0x1c31c>
   2deb4:	cmp	r2, r1
   2deb8:	bne	2df24 <__assert_fail@plt+0x1c090>
   2debc:	lsl	r0, r2, #1
   2dec0:	lsl	r1, r2, #3
   2dec4:	str	r0, [sp, #48]	; 0x30
   2dec8:	ldr	r0, [sp, #56]	; 0x38
   2decc:	bl	36fe4 <__assert_fail@plt+0x25150>
   2ded0:	cmp	r0, #0
   2ded4:	beq	2e440 <__assert_fail@plt+0x1c5ac>
   2ded8:	str	r0, [sp, #56]	; 0x38
   2dedc:	ldr	r1, [sp, #52]	; 0x34
   2dee0:	ldr	r2, [r0]
   2dee4:	cmp	r2, r6
   2dee8:	ble	2df34 <__assert_fail@plt+0x1c0a0>
   2deec:	cmp	r1, #1
   2def0:	blt	2df64 <__assert_fail@plt+0x1c0d0>
   2def4:	add	r2, r0, r1, lsl #2
   2def8:	add	r1, r1, #1
   2defc:	mov	r3, r2
   2df00:	ldr	r7, [r3, #-4]!
   2df04:	sub	r1, r1, #1
   2df08:	cmp	r1, #1
   2df0c:	str	r7, [r2]
   2df10:	mov	r2, r3
   2df14:	bgt	2df00 <__assert_fail@plt+0x1c06c>
   2df18:	ldr	r7, [sp, #40]	; 0x28
   2df1c:	sub	r1, r1, #1
   2df20:	b	2df64 <__assert_fail@plt+0x1c0d0>
   2df24:	ldr	r0, [sp, #56]	; 0x38
   2df28:	ldr	r2, [r0]
   2df2c:	cmp	r2, r6
   2df30:	bgt	2deec <__assert_fail@plt+0x1c058>
   2df34:	add	r2, r0, r1, lsl #2
   2df38:	ldr	r3, [r2, #-4]
   2df3c:	cmp	r3, r6
   2df40:	ble	2df64 <__assert_fail@plt+0x1c0d0>
   2df44:	sub	r1, r1, #2
   2df48:	str	r3, [r2]
   2df4c:	sub	r1, r1, #1
   2df50:	ldr	r3, [r2, #-8]
   2df54:	sub	r2, r2, #4
   2df58:	cmp	r3, r6
   2df5c:	bgt	2df48 <__assert_fail@plt+0x1c0b4>
   2df60:	add	r1, r1, #2
   2df64:	str	r6, [r0, r1, lsl #2]
   2df68:	b	2e194 <__assert_fail@plt+0x1c300>
   2df6c:	cmp	r2, r1
   2df70:	bne	2dfdc <__assert_fail@plt+0x1c148>
   2df74:	lsl	r0, r2, #1
   2df78:	lsl	r1, r2, #3
   2df7c:	str	r0, [fp, #-48]	; 0xffffffd0
   2df80:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2df84:	bl	36fe4 <__assert_fail@plt+0x25150>
   2df88:	cmp	r0, #0
   2df8c:	beq	2e440 <__assert_fail@plt+0x1c5ac>
   2df90:	str	r0, [fp, #-40]	; 0xffffffd8
   2df94:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2df98:	ldr	r2, [r0]
   2df9c:	cmp	r2, r5
   2dfa0:	bgt	2dfec <__assert_fail@plt+0x1c158>
   2dfa4:	add	r2, r0, r1, lsl #2
   2dfa8:	ldr	r7, [sp, #40]	; 0x28
   2dfac:	ldr	r3, [r2, #-4]
   2dfb0:	cmp	r3, r5
   2dfb4:	ble	2e020 <__assert_fail@plt+0x1c18c>
   2dfb8:	sub	r1, r1, #2
   2dfbc:	str	r3, [r2]
   2dfc0:	sub	r1, r1, #1
   2dfc4:	ldr	r3, [r2, #-8]
   2dfc8:	sub	r2, r2, #4
   2dfcc:	cmp	r3, r5
   2dfd0:	bgt	2dfbc <__assert_fail@plt+0x1c128>
   2dfd4:	add	r1, r1, #2
   2dfd8:	b	2e020 <__assert_fail@plt+0x1c18c>
   2dfdc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2dfe0:	ldr	r2, [r0]
   2dfe4:	cmp	r2, r5
   2dfe8:	ble	2dfa4 <__assert_fail@plt+0x1c110>
   2dfec:	cmp	r1, #1
   2dff0:	blt	2e01c <__assert_fail@plt+0x1c188>
   2dff4:	add	r2, r0, r1, lsl #2
   2dff8:	add	r1, r1, #1
   2dffc:	mov	r3, r2
   2e000:	ldr	r7, [r3, #-4]!
   2e004:	sub	r1, r1, #1
   2e008:	cmp	r1, #1
   2e00c:	str	r7, [r2]
   2e010:	mov	r2, r3
   2e014:	bgt	2e000 <__assert_fail@plt+0x1c16c>
   2e018:	sub	r1, r1, #1
   2e01c:	ldr	r7, [sp, #40]	; 0x28
   2e020:	str	r5, [r0, r1, lsl #2]
   2e024:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2e028:	add	r0, r0, #1
   2e02c:	str	r0, [fp, #-44]	; 0xffffffd4
   2e030:	b	2e10c <__assert_fail@plt+0x1c278>
   2e034:	ldr	r0, [r5, #24]
   2e038:	ldr	sl, [r0, r4, lsl #2]
   2e03c:	ldr	r0, [r8]
   2e040:	add	r1, r0, sl, lsl #3
   2e044:	ldrb	r1, [r1, #6]
   2e048:	tst	r1, #16
   2e04c:	beq	2e154 <__assert_fail@plt+0x1c2c0>
   2e050:	ldr	r5, [sp, #44]	; 0x2c
   2e054:	mov	r0, r8
   2e058:	mov	r1, sl
   2e05c:	mov	r2, r7
   2e060:	mov	r3, r5
   2e064:	bl	2eff0 <__assert_fail@plt+0x1d15c>
   2e068:	mov	r9, r0
   2e06c:	cmp	r0, #2
   2e070:	blt	2e140 <__assert_fail@plt+0x1c2ac>
   2e074:	ldr	r0, [sp, #40]	; 0x28
   2e078:	ldr	r1, [r8, #12]
   2e07c:	add	r6, r9, r5
   2e080:	ldr	r0, [r0, #100]	; 0x64
   2e084:	ldr	r5, [r1, sl, lsl #2]
   2e088:	mov	r1, #0
   2e08c:	ldr	r0, [r0, r6, lsl #2]
   2e090:	str	r1, [fp, #-44]	; 0xffffffd4
   2e094:	cmp	r0, #0
   2e098:	beq	2e0b4 <__assert_fail@plt+0x1c220>
   2e09c:	add	r1, r0, #4
   2e0a0:	sub	r0, fp, #48	; 0x30
   2e0a4:	bl	2abac <__assert_fail@plt+0x18d18>
   2e0a8:	cmp	r0, #0
   2e0ac:	str	r0, [fp, #-32]	; 0xffffffe0
   2e0b0:	bne	2e448 <__assert_fail@plt+0x1c5b4>
   2e0b4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   2e0b8:	cmp	r2, #0
   2e0bc:	beq	2e0e4 <__assert_fail@plt+0x1c250>
   2e0c0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2e0c4:	cmp	r1, #0
   2e0c8:	bne	2df6c <__assert_fail@plt+0x1c0d8>
   2e0cc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2e0d0:	str	r5, [r0]
   2e0d4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2e0d8:	add	r0, r0, #1
   2e0dc:	str	r0, [fp, #-44]	; 0xffffffd4
   2e0e0:	b	2e108 <__assert_fail@plt+0x1c274>
   2e0e4:	mov	r0, #1
   2e0e8:	str	r0, [fp, #-44]	; 0xffffffd4
   2e0ec:	str	r0, [fp, #-48]	; 0xffffffd0
   2e0f0:	mov	r0, #4
   2e0f4:	bl	36fb4 <__assert_fail@plt+0x25120>
   2e0f8:	cmp	r0, #0
   2e0fc:	str	r0, [fp, #-40]	; 0xffffffd8
   2e100:	beq	2e458 <__assert_fail@plt+0x1c5c4>
   2e104:	str	r5, [r0]
   2e108:	ldr	r7, [sp, #40]	; 0x28
   2e10c:	sub	r0, fp, #32
   2e110:	mov	r1, r8
   2e114:	sub	r2, fp, #48	; 0x30
   2e118:	bl	2ed50 <__assert_fail@plt+0x1cebc>
   2e11c:	ldr	r1, [r7, #100]	; 0x64
   2e120:	str	r0, [r1, r6, lsl #2]
   2e124:	ldr	r0, [r7, #100]	; 0x64
   2e128:	ldr	r0, [r0, r6, lsl #2]
   2e12c:	cmp	r0, #0
   2e130:	bne	2e140 <__assert_fail@plt+0x1c2ac>
   2e134:	ldr	r7, [fp, #-32]	; 0xffffffe0
   2e138:	cmp	r7, #0
   2e13c:	bne	2e44c <__assert_fail@plt+0x1c5b8>
   2e140:	ldr	r7, [sp, #40]	; 0x28
   2e144:	ldr	r5, [sp, #36]	; 0x24
   2e148:	cmp	r9, #0
   2e14c:	bne	2e16c <__assert_fail@plt+0x1c2d8>
   2e150:	ldr	r0, [r8]
   2e154:	ldr	r2, [sp, #44]	; 0x2c
   2e158:	add	r1, r0, sl, lsl #3
   2e15c:	mov	r0, r7
   2e160:	bl	2f308 <__assert_fail@plt+0x1d474>
   2e164:	cmp	r0, #0
   2e168:	beq	2e1a0 <__assert_fail@plt+0x1c30c>
   2e16c:	ldr	r0, [r8, #12]
   2e170:	ldr	r2, [sp, #48]	; 0x30
   2e174:	ldr	r6, [r0, sl, lsl #2]
   2e178:	cmp	r2, #0
   2e17c:	beq	2de7c <__assert_fail@plt+0x1bfe8>
   2e180:	ldr	r1, [sp, #52]	; 0x34
   2e184:	cmp	r1, #0
   2e188:	bne	2deb4 <__assert_fail@plt+0x1c020>
   2e18c:	ldr	r0, [sp, #56]	; 0x38
   2e190:	str	r6, [r0]
   2e194:	ldr	r0, [sp, #52]	; 0x34
   2e198:	add	r0, r0, #1
   2e19c:	str	r0, [sp, #52]	; 0x34
   2e1a0:	ldr	r0, [r5, #20]
   2e1a4:	add	r4, r4, #1
   2e1a8:	cmp	r4, r0
   2e1ac:	blt	2e034 <__assert_fail@plt+0x1c1a0>
   2e1b0:	ldr	r4, [fp, #12]
   2e1b4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2e1b8:	ldr	sl, [sp, #24]
   2e1bc:	ldr	r5, [sp, #44]	; 0x2c
   2e1c0:	mov	r9, r4
   2e1c4:	ldr	r4, [sp, #20]
   2e1c8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2e1cc:	ldr	r8, [fp, #16]
   2e1d0:	mov	r0, #0
   2e1d4:	str	r0, [fp, #-52]	; 0xffffffcc
   2e1d8:	ldr	r0, [sp, #52]	; 0x34
   2e1dc:	cmp	r0, #0
   2e1e0:	beq	2e22c <__assert_fail@plt+0x1c398>
   2e1e4:	add	r6, sp, #48	; 0x30
   2e1e8:	mov	r0, r4
   2e1ec:	mov	r2, sl
   2e1f0:	mov	r3, r8
   2e1f4:	mov	r1, r6
   2e1f8:	bl	2e564 <__assert_fail@plt+0x1c6d0>
   2e1fc:	cmp	r0, #0
   2e200:	str	r0, [fp, #-52]	; 0xffffffcc
   2e204:	bne	2e470 <__assert_fail@plt+0x1c5dc>
   2e208:	ldr	r2, [sp, #28]
   2e20c:	mov	r0, r7
   2e210:	mov	r1, r6
   2e214:	mov	r3, sl
   2e218:	str	r8, [sp]
   2e21c:	bl	2e6b0 <__assert_fail@plt+0x1c81c>
   2e220:	cmp	r0, #0
   2e224:	str	r0, [fp, #-52]	; 0xffffffcc
   2e228:	bne	2e470 <__assert_fail@plt+0x1c5dc>
   2e22c:	cmn	r5, #1
   2e230:	ble	2e26c <__assert_fail@plt+0x1c3d8>
   2e234:	ldr	r0, [r7, #48]	; 0x30
   2e238:	cmp	r0, r5
   2e23c:	beq	2e330 <__assert_fail@plt+0x1c49c>
   2e240:	ldr	r0, [r7, #80]	; 0x50
   2e244:	cmp	r0, #2
   2e248:	blt	2e278 <__assert_fail@plt+0x1c3e4>
   2e24c:	ldr	r0, [r7, #8]
   2e250:	ldr	r6, [r0, r5, lsl #2]
   2e254:	cmn	r6, #1
   2e258:	bne	2e2b0 <__assert_fail@plt+0x1c41c>
   2e25c:	sub	r1, r5, #1
   2e260:	cmp	r5, #0
   2e264:	mov	r5, r1
   2e268:	bgt	2e250 <__assert_fail@plt+0x1c3bc>
   2e26c:	ldr	r3, [r7, #60]	; 0x3c
   2e270:	add	r5, sp, #48	; 0x30
   2e274:	b	2e2d8 <__assert_fail@plt+0x1c444>
   2e278:	ldr	r0, [r7, #4]
   2e27c:	ldr	r1, [r7, #68]	; 0x44
   2e280:	mov	r3, #1
   2e284:	ldrb	r0, [r0, r5]
   2e288:	add	r5, sp, #48	; 0x30
   2e28c:	ubfx	r2, r0, #5, #3
   2e290:	ldr	r1, [r1, r2, lsl #2]
   2e294:	and	r2, r0, #31
   2e298:	tst	r1, r3, lsl r2
   2e29c:	bne	2e2d8 <__assert_fail@plt+0x1c444>
   2e2a0:	mov	r3, #0
   2e2a4:	cmp	r0, #10
   2e2a8:	beq	2e2cc <__assert_fail@plt+0x1c438>
   2e2ac:	b	2e2d8 <__assert_fail@plt+0x1c444>
   2e2b0:	ldrb	r0, [r7, #78]	; 0x4e
   2e2b4:	add	r5, sp, #48	; 0x30
   2e2b8:	cmp	r0, #0
   2e2bc:	bne	2e344 <__assert_fail@plt+0x1c4b0>
   2e2c0:	mov	r3, #0
   2e2c4:	cmp	r6, #10
   2e2c8:	bne	2e2d8 <__assert_fail@plt+0x1c444>
   2e2cc:	ldrb	r3, [r7, #77]	; 0x4d
   2e2d0:	cmp	r3, #0
   2e2d4:	movwne	r3, #2
   2e2d8:	sub	r0, fp, #52	; 0x34
   2e2dc:	mov	r1, r4
   2e2e0:	mov	r2, r5
   2e2e4:	bl	2ae9c <__assert_fail@plt+0x19008>
   2e2e8:	cmp	r0, #0
   2e2ec:	str	r0, [sp, #36]	; 0x24
   2e2f0:	bne	2e300 <__assert_fail@plt+0x1c46c>
   2e2f4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2e2f8:	cmp	r0, #0
   2e2fc:	bne	2e470 <__assert_fail@plt+0x1c5dc>
   2e300:	ldr	r1, [sp, #28]
   2e304:	ldr	r2, [sp, #36]	; 0x24
   2e308:	ldr	r0, [r7, #100]	; 0x64
   2e30c:	str	r2, [r0, r1, lsl #2]
   2e310:	cmp	r2, #0
   2e314:	ldr	r2, [sp, #32]
   2e318:	mov	r0, #0
   2e31c:	mov	r5, r1
   2e320:	addeq	r0, r2, #1
   2e324:	cmp	r1, r9
   2e328:	blt	2ddf0 <__assert_fail@plt+0x1bf5c>
   2e32c:	b	2e36c <__assert_fail@plt+0x1c4d8>
   2e330:	ldr	r0, [r7, #88]	; 0x58
   2e334:	add	r5, sp, #48	; 0x30
   2e338:	and	r0, r0, #2
   2e33c:	eor	r3, r0, #10
   2e340:	b	2e2d8 <__assert_fail@plt+0x1c444>
   2e344:	mov	r0, r6
   2e348:	bl	11cb4 <iswalnum@plt>
   2e34c:	mov	r3, #1
   2e350:	cmp	r6, #95	; 0x5f
   2e354:	beq	2e2d8 <__assert_fail@plt+0x1c444>
   2e358:	cmp	r0, #0
   2e35c:	beq	2e2c0 <__assert_fail@plt+0x1c42c>
   2e360:	b	2e2d8 <__assert_fail@plt+0x1c444>
   2e364:	ldr	r7, [sp, #40]	; 0x28
   2e368:	mov	r1, r5
   2e36c:	ldr	r0, [sp, #56]	; 0x38
   2e370:	mov	r4, r1
   2e374:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2e378:	ldr	r0, [r7, #100]	; 0x64
   2e37c:	mov	sl, #1
   2e380:	ldr	r1, [r0, r9, lsl #2]
   2e384:	ldr	r0, [sp, #16]
   2e388:	str	r4, [r0]
   2e38c:	ldr	r0, [sp, #12]
   2e390:	cmp	r1, #0
   2e394:	addne	r1, r1, #4
   2e398:	str	r0, [r7, #40]	; 0x28
   2e39c:	ldr	r0, [sp, #8]
   2e3a0:	str	r0, [r7, #100]	; 0x64
   2e3a4:	beq	2e400 <__assert_fail@plt+0x1c56c>
   2e3a8:	ldr	r2, [r1, #4]
   2e3ac:	cmp	r2, #1
   2e3b0:	blt	2e40c <__assert_fail@plt+0x1c578>
   2e3b4:	ldr	r0, [fp, #8]
   2e3b8:	ldr	r1, [r1, #8]
   2e3bc:	subs	r2, r2, #1
   2e3c0:	mov	sl, #0
   2e3c4:	mov	r3, #0
   2e3c8:	beq	2e3f4 <__assert_fail@plt+0x1c560>
   2e3cc:	mov	r3, #0
   2e3d0:	mov	r7, #1
   2e3d4:	add	r5, r3, r2
   2e3d8:	lsr	r4, r5, #1
   2e3dc:	ldr	r6, [r1, r4, lsl #2]
   2e3e0:	cmp	r6, r0
   2e3e4:	movge	r2, r4
   2e3e8:	addlt	r3, r7, r5, lsr #1
   2e3ec:	cmp	r3, r2
   2e3f0:	bcc	2e3d4 <__assert_fail@plt+0x1c540>
   2e3f4:	ldr	r1, [r1, r3, lsl #2]
   2e3f8:	cmp	r1, r0
   2e3fc:	movne	sl, #1
   2e400:	mov	r0, sl
   2e404:	sub	sp, fp, #28
   2e408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e40c:	mov	sl, #1
   2e410:	mov	r0, sl
   2e414:	sub	sp, fp, #28
   2e418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e41c:	mov	r0, #0
   2e420:	str	r0, [sp, #52]	; 0x34
   2e424:	str	r0, [sp, #48]	; 0x30
   2e428:	str	r0, [sp, #56]	; 0x38
   2e42c:	str	r0, [fp, #-52]	; 0xffffffcc
   2e430:	b	2dd2c <__assert_fail@plt+0x1be98>
   2e434:	mov	r0, #0
   2e438:	str	r0, [sp, #48]	; 0x30
   2e43c:	str	r0, [sp, #52]	; 0x34
   2e440:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2e444:	b	2e464 <__assert_fail@plt+0x1c5d0>
   2e448:	mov	r7, r0
   2e44c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2e450:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2e454:	b	2e46c <__assert_fail@plt+0x1c5d8>
   2e458:	mov	r0, #0
   2e45c:	str	r0, [fp, #-48]	; 0xffffffd0
   2e460:	str	r0, [fp, #-44]	; 0xffffffd4
   2e464:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2e468:	mov	r7, #12
   2e46c:	str	r7, [fp, #-52]	; 0xffffffcc
   2e470:	ldr	r0, [sp, #56]	; 0x38
   2e474:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2e478:	ldr	sl, [fp, #-52]	; 0xffffffcc
   2e47c:	mov	r0, sl
   2e480:	sub	sp, fp, #28
   2e484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e488:	mov	r6, r1
   2e48c:	mvn	r1, #-2147483648	; 0x80000000
   2e490:	mov	sl, #12
   2e494:	sub	r1, r1, r5
   2e498:	cmp	r1, r2
   2e49c:	ble	2e400 <__assert_fail@plt+0x1c56c>
   2e4a0:	add	r0, r2, #1
   2e4a4:	add	r7, r0, r5
   2e4a8:	str	r0, [sp, #44]	; 0x2c
   2e4ac:	cmn	r7, #-1073741823	; 0xc0000001
   2e4b0:	bhi	2e400 <__assert_fail@plt+0x1c56c>
   2e4b4:	mov	r4, r6
   2e4b8:	lsl	r1, r7, #2
   2e4bc:	ldr	r0, [r4, #8]!
   2e4c0:	bl	36fe4 <__assert_fail@plt+0x25150>
   2e4c4:	cmp	r0, #0
   2e4c8:	beq	2e400 <__assert_fail@plt+0x1c56c>
   2e4cc:	ldr	r1, [sp, #44]	; 0x2c
   2e4d0:	str	r7, [r6, #4]
   2e4d4:	str	r0, [r6, #8]
   2e4d8:	add	r0, r0, r5, lsl #2
   2e4dc:	lsl	r2, r1, #2
   2e4e0:	mov	r1, #0
   2e4e4:	bl	11cd8 <memset@plt>
   2e4e8:	ldr	r0, [sp, #40]	; 0x28
   2e4ec:	ldr	sl, [sp, #20]
   2e4f0:	mov	r1, r6
   2e4f4:	b	2db8c <__assert_fail@plt+0x1bcf8>
   2e4f8:	and	r0, r3, #2
   2e4fc:	eor	r7, r0, #10
   2e500:	cmp	r5, r9
   2e504:	beq	2dcac <__assert_fail@plt+0x1be18>
   2e508:	b	2dc10 <__assert_fail@plt+0x1bd7c>
   2e50c:	mov	sl, r0
   2e510:	ldr	r0, [sp, #56]	; 0x38
   2e514:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2e518:	mov	r0, sl
   2e51c:	sub	sp, fp, #28
   2e520:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e524:	mov	r0, #0
   2e528:	mov	sl, #12
   2e52c:	str	r0, [sp, #48]	; 0x30
   2e530:	str	r0, [sp, #52]	; 0x34
   2e534:	str	sl, [fp, #-52]	; 0xffffffcc
   2e538:	mov	r0, sl
   2e53c:	sub	sp, fp, #28
   2e540:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e544:	mov	r0, r6
   2e548:	bl	11cb4 <iswalnum@plt>
   2e54c:	mov	r7, #1
   2e550:	cmp	r6, #95	; 0x5f
   2e554:	beq	2dca4 <__assert_fail@plt+0x1be10>
   2e558:	cmp	r0, #0
   2e55c:	beq	2dc88 <__assert_fail@plt+0x1bdf4>
   2e560:	b	2dca4 <__assert_fail@plt+0x1be10>
   2e564:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e568:	add	fp, sp, #28
   2e56c:	sub	sp, sp, #28
   2e570:	str	r0, [sp, #12]
   2e574:	ldr	r0, [r1, #4]
   2e578:	mov	r4, r1
   2e57c:	mov	r1, #0
   2e580:	mov	sl, r3
   2e584:	mov	r8, r2
   2e588:	str	r1, [sp, #20]
   2e58c:	str	r0, [sp, #16]
   2e590:	lsl	r0, r0, #2
   2e594:	bl	36fb4 <__assert_fail@plt+0x25120>
   2e598:	cmp	r0, #0
   2e59c:	str	r0, [sp, #24]
   2e5a0:	beq	2e6a0 <__assert_fail@plt+0x1c80c>
   2e5a4:	ldr	r0, [r4, #4]
   2e5a8:	cmp	r0, #1
   2e5ac:	blt	2e678 <__assert_fail@plt+0x1c7e4>
   2e5b0:	mov	r9, #0
   2e5b4:	str	r4, [sp, #8]
   2e5b8:	ldr	r0, [r4, #8]
   2e5bc:	ldr	r1, [sp, #12]
   2e5c0:	ldr	r2, [r0, r9, lsl #2]
   2e5c4:	ldr	r1, [r1, #24]
   2e5c8:	add	r0, r2, r2, lsl #1
   2e5cc:	add	r1, r1, r0, lsl #2
   2e5d0:	ldr	r0, [r1, #4]
   2e5d4:	cmp	r0, #1
   2e5d8:	blt	2e614 <__assert_fail@plt+0x1c780>
   2e5dc:	ldr	r7, [sp, #12]
   2e5e0:	ldr	r3, [r1, #8]
   2e5e4:	mov	r6, #0
   2e5e8:	ldr	r7, [r7]
   2e5ec:	ldr	r4, [r3, r6, lsl #2]
   2e5f0:	add	r5, r7, r4, lsl #3
   2e5f4:	ldrb	r5, [r5, #4]
   2e5f8:	cmp	r5, sl
   2e5fc:	ldreq	r5, [r7, r4, lsl #3]
   2e600:	cmpeq	r5, r8
   2e604:	beq	2e63c <__assert_fail@plt+0x1c7a8>
   2e608:	add	r6, r6, #1
   2e60c:	cmp	r6, r0
   2e610:	blt	2e5ec <__assert_fail@plt+0x1c758>
   2e614:	add	r0, sp, #16
   2e618:	bl	2abac <__assert_fail@plt+0x18d18>
   2e61c:	cmp	r0, #0
   2e620:	bne	2e660 <__assert_fail@plt+0x1c7cc>
   2e624:	ldr	r4, [sp, #8]
   2e628:	add	r9, r9, #1
   2e62c:	ldr	r0, [r4, #4]
   2e630:	cmp	r9, r0
   2e634:	blt	2e5b8 <__assert_fail@plt+0x1c724>
   2e638:	b	2e678 <__assert_fail@plt+0x1c7e4>
   2e63c:	cmn	r4, #1
   2e640:	beq	2e614 <__assert_fail@plt+0x1c780>
   2e644:	ldr	r0, [sp, #12]
   2e648:	add	r1, sp, #16
   2e64c:	mov	r3, r8
   2e650:	str	sl, [sp]
   2e654:	bl	2ec0c <__assert_fail@plt+0x1cd78>
   2e658:	cmp	r0, #0
   2e65c:	beq	2e624 <__assert_fail@plt+0x1c790>
   2e660:	mov	r7, r0
   2e664:	ldr	r0, [sp, #24]
   2e668:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2e66c:	mov	r0, r7
   2e670:	sub	sp, fp, #28
   2e674:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e678:	ldr	r0, [r4, #8]
   2e67c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2e680:	vldr	d16, [sp, #16]
   2e684:	ldr	r0, [sp, #24]
   2e688:	mov	r7, #0
   2e68c:	str	r0, [r4, #8]
   2e690:	vstr	d16, [r4]
   2e694:	mov	r0, r7
   2e698:	sub	sp, fp, #28
   2e69c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e6a0:	mov	r7, #12
   2e6a4:	mov	r0, r7
   2e6a8:	sub	sp, fp, #28
   2e6ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e6b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e6b4:	add	fp, sp, #28
   2e6b8:	sub	sp, sp, #52	; 0x34
   2e6bc:	ldr	ip, [r0, #108]	; 0x6c
   2e6c0:	mov	lr, r1
   2e6c4:	ldr	r1, [r0, #84]	; 0x54
   2e6c8:	str	r0, [sp, #24]
   2e6cc:	mov	sl, r2
   2e6d0:	mov	r8, #0
   2e6d4:	mov	r0, #0
   2e6d8:	cmp	ip, #1
   2e6dc:	str	r1, [sp, #28]
   2e6e0:	blt	2e724 <__assert_fail@plt+0x1c890>
   2e6e4:	ldr	r0, [sp, #24]
   2e6e8:	mov	r7, #1
   2e6ec:	mov	r1, ip
   2e6f0:	ldr	r2, [r0, #116]	; 0x74
   2e6f4:	mov	r0, #0
   2e6f8:	add	r6, r1, r0
   2e6fc:	add	r6, r6, r6, lsr #31
   2e700:	asr	r4, r6, #1
   2e704:	add	r5, r4, r4, lsl #1
   2e708:	add	r5, r2, r5, lsl #3
   2e70c:	ldr	r5, [r5, #4]
   2e710:	cmp	r5, sl
   2e714:	addlt	r0, r7, r6, asr #1
   2e718:	movge	r1, r4
   2e71c:	cmp	r0, r1
   2e720:	blt	2e6f8 <__assert_fail@plt+0x1c864>
   2e724:	cmp	r0, ip
   2e728:	bge	2ebf0 <__assert_fail@plt+0x1cd5c>
   2e72c:	cmn	r0, #1
   2e730:	beq	2ebf0 <__assert_fail@plt+0x1cd5c>
   2e734:	ldr	r1, [sp, #24]
   2e738:	add	r0, r0, r0, lsl #1
   2e73c:	str	r0, [sp, #8]
   2e740:	ldr	r1, [r1, #116]	; 0x74
   2e744:	add	r0, r1, r0, lsl #3
   2e748:	ldr	r0, [r0, #4]
   2e74c:	cmp	r0, sl
   2e750:	bne	2ebf0 <__assert_fail@plt+0x1cd5c>
   2e754:	str	r3, [sp, #12]
   2e758:	mov	r9, #1
   2e75c:	str	lr, [sp, #16]
   2e760:	b	2e76c <__assert_fail@plt+0x1c8d8>
   2e764:	ldr	r0, [sp, #24]
   2e768:	ldr	r1, [r0, #116]	; 0x74
   2e76c:	ldr	r0, [sp, #8]
   2e770:	add	r0, r1, r0, lsl #3
   2e774:	mov	r8, r0
   2e778:	ldr	r0, [lr, #4]
   2e77c:	cmp	r0, #1
   2e780:	blt	2ea88 <__assert_fail@plt+0x1cbf4>
   2e784:	subs	r6, r0, #1
   2e788:	ldr	r2, [r8]
   2e78c:	ldr	r0, [lr, #8]
   2e790:	mov	r3, #0
   2e794:	beq	2e7bc <__assert_fail@plt+0x1c928>
   2e798:	mov	r1, r6
   2e79c:	add	r7, r3, r1
   2e7a0:	lsr	r5, r7, #1
   2e7a4:	ldr	r4, [r0, r5, lsl #2]
   2e7a8:	cmp	r4, r2
   2e7ac:	movge	r1, r5
   2e7b0:	addlt	r3, r9, r7, lsr #1
   2e7b4:	cmp	r3, r1
   2e7b8:	bcc	2e79c <__assert_fail@plt+0x1c908>
   2e7bc:	ldr	r1, [r0, r3, lsl #2]
   2e7c0:	cmp	r1, r2
   2e7c4:	bne	2ea88 <__assert_fail@plt+0x1cbf4>
   2e7c8:	ldr	r3, [r8, #12]
   2e7cc:	ldr	r1, [r8, #8]
   2e7d0:	add	r3, r3, sl
   2e7d4:	sub	r7, r3, r1
   2e7d8:	cmp	r7, sl
   2e7dc:	bne	2e8d4 <__assert_fail@plt+0x1ca40>
   2e7e0:	ldr	r1, [sp, #28]
   2e7e4:	add	r2, r2, r2, lsl #1
   2e7e8:	cmp	r6, #0
   2e7ec:	ldr	r1, [r1, #20]
   2e7f0:	add	r1, r1, r2, lsl #2
   2e7f4:	mov	r2, #0
   2e7f8:	ldr	r1, [r1, #8]
   2e7fc:	ldr	r4, [r1]
   2e800:	beq	2e824 <__assert_fail@plt+0x1c990>
   2e804:	add	r1, r2, r6
   2e808:	lsr	r3, r1, #1
   2e80c:	ldr	r7, [r0, r3, lsl #2]
   2e810:	cmp	r7, r4
   2e814:	movge	r6, r3
   2e818:	addlt	r2, r9, r1, lsr #1
   2e81c:	cmp	r2, r6
   2e820:	bcc	2e804 <__assert_fail@plt+0x1c970>
   2e824:	ldr	r1, [r0, r2, lsl #2]
   2e828:	mov	r0, #4
   2e82c:	cmp	r1, r4
   2e830:	beq	2ea7c <__assert_fail@plt+0x1cbe8>
   2e834:	mov	r0, #4
   2e838:	str	r9, [sp, #36]	; 0x24
   2e83c:	str	r9, [sp, #32]
   2e840:	bl	36fb4 <__assert_fail@plt+0x25120>
   2e844:	cmp	r0, #0
   2e848:	str	r0, [sp, #40]	; 0x28
   2e84c:	beq	2ea9c <__assert_fail@plt+0x1cc08>
   2e850:	mov	r6, #0
   2e854:	str	r4, [r0]
   2e858:	ldr	r0, [sp, #28]
   2e85c:	ldr	r2, [sp, #12]
   2e860:	ldr	r3, [fp, #8]
   2e864:	add	r4, sp, #32
   2e868:	str	r6, [fp, #-32]	; 0xffffffe0
   2e86c:	mov	r1, r4
   2e870:	bl	2e564 <__assert_fail@plt+0x1c6d0>
   2e874:	ldr	r5, [sp, #16]
   2e878:	mov	r7, r0
   2e87c:	mov	r1, r4
   2e880:	mov	r0, r5
   2e884:	bl	2abac <__assert_fail@plt+0x18d18>
   2e888:	mov	r4, r0
   2e88c:	ldr	r0, [sp, #40]	; 0x28
   2e890:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2e894:	orr	r0, r7, r6
   2e898:	mov	lr, r5
   2e89c:	orrs	r0, r0, r4
   2e8a0:	mov	r0, #2
   2e8a4:	beq	2ea7c <__assert_fail@plt+0x1cbe8>
   2e8a8:	cmp	r7, #0
   2e8ac:	mov	r0, #1
   2e8b0:	movne	r4, r7
   2e8b4:	cmp	r6, #0
   2e8b8:	movne	r4, r6
   2e8bc:	str	r4, [fp, #-32]	; 0xffffffe0
   2e8c0:	str	r4, [sp, #20]
   2e8c4:	cmp	r0, #0
   2e8c8:	cmpne	r0, #4
   2e8cc:	beq	2ea88 <__assert_fail@plt+0x1cbf4>
   2e8d0:	b	2ebe4 <__assert_fail@plt+0x1cd50>
   2e8d4:	ldr	r0, [sp, #24]
   2e8d8:	ldr	r0, [r0, #100]	; 0x64
   2e8dc:	ldr	r5, [r0, r7, lsl #2]
   2e8e0:	ldr	r0, [sp, #28]
   2e8e4:	ldr	r0, [r0, #12]
   2e8e8:	cmp	r5, #0
   2e8ec:	ldr	r4, [r0, r2, lsl #2]
   2e8f0:	beq	2e9b8 <__assert_fail@plt+0x1cb24>
   2e8f4:	ldr	ip, [r5, #8]
   2e8f8:	cmp	ip, #0
   2e8fc:	ble	2e9e4 <__assert_fail@plt+0x1cb50>
   2e900:	ldr	r0, [r5, #12]
   2e904:	subs	r3, ip, #1
   2e908:	mov	r2, #0
   2e90c:	str	r7, [sp, #4]
   2e910:	beq	2e934 <__assert_fail@plt+0x1caa0>
   2e914:	add	r6, r2, r3
   2e918:	lsr	r7, r6, #1
   2e91c:	ldr	r1, [r0, r7, lsl #2]
   2e920:	cmp	r1, r4
   2e924:	movge	r3, r7
   2e928:	addlt	r2, r9, r6, lsr #1
   2e92c:	cmp	r2, r3
   2e930:	bcc	2e914 <__assert_fail@plt+0x1ca80>
   2e934:	ldr	r1, [r0, r2, lsl #2]
   2e938:	mov	r0, #4
   2e93c:	cmp	r1, r4
   2e940:	beq	2ea7c <__assert_fail@plt+0x1cbe8>
   2e944:	ldr	r7, [sp, #4]
   2e948:	cmp	ip, #1
   2e94c:	str	ip, [sp, #36]	; 0x24
   2e950:	blt	2e9e8 <__assert_fail@plt+0x1cb54>
   2e954:	lsl	r0, ip, #2
   2e958:	str	ip, [sp, #32]
   2e95c:	bl	36fb4 <__assert_fail@plt+0x25120>
   2e960:	cmp	r0, #0
   2e964:	str	r0, [sp, #40]	; 0x28
   2e968:	beq	2eb04 <__assert_fail@plt+0x1cc70>
   2e96c:	ldr	r2, [r5, #8]
   2e970:	ldr	r1, [r5, #12]
   2e974:	mov	r5, r0
   2e978:	lsl	r2, r2, #2
   2e97c:	bl	11a8c <memcpy@plt>
   2e980:	ldr	r1, [sp, #32]
   2e984:	mov	r6, #0
   2e988:	str	r6, [fp, #-32]	; 0xffffffe0
   2e98c:	cmp	r1, #0
   2e990:	beq	2e9fc <__assert_fail@plt+0x1cb68>
   2e994:	ldr	r0, [sp, #36]	; 0x24
   2e998:	cmp	r0, #0
   2e99c:	bne	2eb18 <__assert_fail@plt+0x1cc84>
   2e9a0:	str	r4, [r5]
   2e9a4:	str	r9, [sp, #36]	; 0x24
   2e9a8:	mov	r6, #0
   2e9ac:	cmp	r6, #0
   2e9b0:	beq	2ea24 <__assert_fail@plt+0x1cb90>
   2e9b4:	b	2eadc <__assert_fail@plt+0x1cc48>
   2e9b8:	mov	r0, #4
   2e9bc:	str	r9, [sp, #36]	; 0x24
   2e9c0:	str	r9, [sp, #32]
   2e9c4:	bl	36fb4 <__assert_fail@plt+0x25120>
   2e9c8:	cmp	r0, #0
   2e9cc:	str	r0, [sp, #40]	; 0x28
   2e9d0:	beq	2eab0 <__assert_fail@plt+0x1cc1c>
   2e9d4:	str	r4, [r0]
   2e9d8:	mov	r0, #0
   2e9dc:	str	r0, [fp, #-32]	; 0xffffffe0
   2e9e0:	b	2ea24 <__assert_fail@plt+0x1cb90>
   2e9e4:	str	ip, [sp, #36]	; 0x24
   2e9e8:	mov	r6, #0
   2e9ec:	str	r6, [sp, #36]	; 0x24
   2e9f0:	str	r6, [sp, #32]
   2e9f4:	str	r6, [sp, #40]	; 0x28
   2e9f8:	str	r6, [fp, #-32]	; 0xffffffe0
   2e9fc:	mov	r0, #4
   2ea00:	str	r9, [sp, #36]	; 0x24
   2ea04:	str	r9, [sp, #32]
   2ea08:	bl	36fb4 <__assert_fail@plt+0x25120>
   2ea0c:	cmp	r0, #0
   2ea10:	str	r0, [sp, #40]	; 0x28
   2ea14:	beq	2ead0 <__assert_fail@plt+0x1cc3c>
   2ea18:	str	r4, [r0]
   2ea1c:	cmp	r6, #0
   2ea20:	bne	2eadc <__assert_fail@plt+0x1cc48>
   2ea24:	ldr	r1, [sp, #28]
   2ea28:	sub	r0, fp, #32
   2ea2c:	add	r2, sp, #32
   2ea30:	bl	2ed50 <__assert_fail@plt+0x1cebc>
   2ea34:	ldr	r4, [sp, #24]
   2ea38:	ldr	r1, [r4, #100]	; 0x64
   2ea3c:	str	r0, [r1, r7, lsl #2]
   2ea40:	ldr	r0, [sp, #40]	; 0x28
   2ea44:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2ea48:	ldr	r0, [r4, #100]	; 0x64
   2ea4c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2ea50:	ldr	r0, [r0, r7, lsl #2]
   2ea54:	cmp	r1, #0
   2ea58:	mov	r2, r1
   2ea5c:	movwne	r2, #1
   2ea60:	clz	r0, r0
   2ea64:	lsr	r0, r0, #5
   2ea68:	ands	r0, r0, r2
   2ea6c:	ldr	r2, [sp, #20]
   2ea70:	movne	r2, r1
   2ea74:	str	r2, [sp, #20]
   2ea78:	ldr	lr, [sp, #16]
   2ea7c:	cmp	r0, #0
   2ea80:	cmpne	r0, #4
   2ea84:	bne	2ebe4 <__assert_fail@plt+0x1cd50>
   2ea88:	ldrb	r1, [r8, #20]
   2ea8c:	add	r0, r8, #24
   2ea90:	cmp	r1, #0
   2ea94:	bne	2e774 <__assert_fail@plt+0x1c8e0>
   2ea98:	b	2ebfc <__assert_fail@plt+0x1cd68>
   2ea9c:	mov	r0, #0
   2eaa0:	mov	r6, #12
   2eaa4:	str	r0, [sp, #32]
   2eaa8:	str	r0, [sp, #36]	; 0x24
   2eaac:	b	2e858 <__assert_fail@plt+0x1c9c4>
   2eab0:	mov	r0, #0
   2eab4:	mov	r1, #12
   2eab8:	str	r0, [sp, #32]
   2eabc:	str	r0, [sp, #36]	; 0x24
   2eac0:	mov	r0, #12
   2eac4:	str	r1, [fp, #-32]	; 0xffffffe0
   2eac8:	str	r0, [sp, #20]
   2eacc:	b	2eafc <__assert_fail@plt+0x1cc68>
   2ead0:	mov	r0, #0
   2ead4:	str	r0, [sp, #32]
   2ead8:	str	r0, [sp, #36]	; 0x24
   2eadc:	clz	r0, r6
   2eae0:	lsr	r4, r0, #5
   2eae4:	ldr	r0, [sp, #40]	; 0x28
   2eae8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2eaec:	cmp	r4, #0
   2eaf0:	movwne	r6, #12
   2eaf4:	str	r6, [sp, #20]
   2eaf8:	str	r6, [fp, #-32]	; 0xffffffe0
   2eafc:	mov	r0, #1
   2eb00:	b	2ea78 <__assert_fail@plt+0x1cbe4>
   2eb04:	mov	r0, #0
   2eb08:	mov	r6, #12
   2eb0c:	str	r0, [sp, #32]
   2eb10:	str	r0, [sp, #36]	; 0x24
   2eb14:	b	2e9f8 <__assert_fail@plt+0x1cb64>
   2eb18:	cmp	r1, r0
   2eb1c:	bne	2eb48 <__assert_fail@plt+0x1ccb4>
   2eb20:	lsl	r0, r1, #1
   2eb24:	lsl	r1, r1, #3
   2eb28:	str	r0, [sp, #32]
   2eb2c:	mov	r0, r5
   2eb30:	bl	36fe4 <__assert_fail@plt+0x25150>
   2eb34:	cmp	r0, #0
   2eb38:	beq	2ebdc <__assert_fail@plt+0x1cd48>
   2eb3c:	str	r0, [sp, #40]	; 0x28
   2eb40:	mov	r5, r0
   2eb44:	ldr	r0, [sp, #36]	; 0x24
   2eb48:	ldr	r1, [r5]
   2eb4c:	cmp	r1, r4
   2eb50:	ble	2eb88 <__assert_fail@plt+0x1ccf4>
   2eb54:	cmp	r0, #1
   2eb58:	blt	2ebb8 <__assert_fail@plt+0x1cd24>
   2eb5c:	add	r1, r5, r0, lsl #2
   2eb60:	add	r0, r0, #1
   2eb64:	mov	r2, r1
   2eb68:	ldr	r3, [r2, #-4]!
   2eb6c:	sub	r0, r0, #1
   2eb70:	cmp	r0, #1
   2eb74:	str	r3, [r1]
   2eb78:	mov	r1, r2
   2eb7c:	bgt	2eb68 <__assert_fail@plt+0x1ccd4>
   2eb80:	sub	r0, r0, #1
   2eb84:	b	2ebb8 <__assert_fail@plt+0x1cd24>
   2eb88:	add	r1, r5, r0, lsl #2
   2eb8c:	ldr	r2, [r1, #-4]
   2eb90:	cmp	r2, r4
   2eb94:	ble	2ebb8 <__assert_fail@plt+0x1cd24>
   2eb98:	sub	r0, r0, #2
   2eb9c:	str	r2, [r1]
   2eba0:	sub	r0, r0, #1
   2eba4:	ldr	r2, [r1, #-8]
   2eba8:	sub	r1, r1, #4
   2ebac:	cmp	r2, r4
   2ebb0:	bgt	2eb9c <__assert_fail@plt+0x1cd08>
   2ebb4:	add	r0, r0, #2
   2ebb8:	str	r4, [r5, r0, lsl #2]
   2ebbc:	ldr	r7, [sp, #4]
   2ebc0:	mov	r6, #0
   2ebc4:	ldr	r0, [sp, #36]	; 0x24
   2ebc8:	add	r0, r0, #1
   2ebcc:	str	r0, [sp, #36]	; 0x24
   2ebd0:	cmp	r6, #0
   2ebd4:	beq	2ea24 <__assert_fail@plt+0x1cb90>
   2ebd8:	b	2eadc <__assert_fail@plt+0x1cc48>
   2ebdc:	mov	r6, #0
   2ebe0:	b	2eadc <__assert_fail@plt+0x1cc48>
   2ebe4:	cmp	r0, #2
   2ebe8:	beq	2e764 <__assert_fail@plt+0x1c8d0>
   2ebec:	ldr	r8, [sp, #20]
   2ebf0:	mov	r0, r8
   2ebf4:	sub	sp, fp, #28
   2ebf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ebfc:	mov	r8, #0
   2ec00:	mov	r0, r8
   2ec04:	sub	sp, fp, #28
   2ec08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ec0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ec10:	add	fp, sp, #28
   2ec14:	sub	sp, sp, #4
   2ec18:	ldr	r4, [fp, #8]
   2ec1c:	mov	r9, r3
   2ec20:	mov	r7, r2
   2ec24:	mov	r8, r1
   2ec28:	mov	sl, r0
   2ec2c:	mov	r5, #1
   2ec30:	ldr	r0, [r8, #4]
   2ec34:	cmp	r0, #1
   2ec38:	bge	2ec58 <__assert_fail@plt+0x1cdc4>
   2ec3c:	b	2ec9c <__assert_fail@plt+0x1ce08>
   2ec40:	add	r0, r0, r7, lsl #2
   2ec44:	ldr	r0, [r0, #8]
   2ec48:	ldr	r7, [r0]
   2ec4c:	ldr	r0, [r8, #4]
   2ec50:	cmp	r0, #1
   2ec54:	blt	2ec9c <__assert_fail@plt+0x1ce08>
   2ec58:	subs	r2, r0, #1
   2ec5c:	ldr	r0, [r8, #8]
   2ec60:	mov	ip, r4
   2ec64:	mov	r1, #0
   2ec68:	beq	2ec8c <__assert_fail@plt+0x1cdf8>
   2ec6c:	add	r3, r1, r2
   2ec70:	lsr	r6, r3, #1
   2ec74:	ldr	r4, [r0, r6, lsl #2]
   2ec78:	cmp	r4, r7
   2ec7c:	movge	r2, r6
   2ec80:	addlt	r1, r5, r3, lsr #1
   2ec84:	cmp	r1, r2
   2ec88:	bcc	2ec6c <__assert_fail@plt+0x1cdd8>
   2ec8c:	ldr	r0, [r0, r1, lsl #2]
   2ec90:	mov	r4, ip
   2ec94:	cmp	r0, r7
   2ec98:	beq	2ed38 <__assert_fail@plt+0x1cea4>
   2ec9c:	ldr	r0, [sl]
   2eca0:	add	r1, r0, r7, lsl #3
   2eca4:	ldrb	r1, [r1, #4]
   2eca8:	cmp	r1, r4
   2ecac:	ldreq	r0, [r0, r7, lsl #3]
   2ecb0:	cmpeq	r0, r9
   2ecb4:	beq	2ed1c <__assert_fail@plt+0x1ce88>
   2ecb8:	mov	r0, r8
   2ecbc:	mov	r1, r7
   2ecc0:	bl	2ad54 <__assert_fail@plt+0x18ec0>
   2ecc4:	cmp	r0, #0
   2ecc8:	beq	2ed44 <__assert_fail@plt+0x1ceb0>
   2eccc:	ldr	r0, [sl, #20]
   2ecd0:	add	r7, r7, r7, lsl #1
   2ecd4:	add	r1, r0, r7, lsl #2
   2ecd8:	ldr	r2, [r1, #4]
   2ecdc:	cmp	r2, #2
   2ece0:	beq	2ecf0 <__assert_fail@plt+0x1ce5c>
   2ece4:	cmp	r2, #0
   2ece8:	bne	2ec40 <__assert_fail@plt+0x1cdac>
   2ecec:	b	2ed38 <__assert_fail@plt+0x1cea4>
   2ecf0:	ldr	r0, [r1, #8]
   2ecf4:	mov	r1, r8
   2ecf8:	mov	r3, r9
   2ecfc:	ldr	r2, [r0, #4]
   2ed00:	mov	r0, sl
   2ed04:	str	r4, [sp]
   2ed08:	bl	2ec0c <__assert_fail@plt+0x1cd78>
   2ed0c:	cmp	r0, #0
   2ed10:	bne	2ed3c <__assert_fail@plt+0x1cea8>
   2ed14:	ldr	r0, [sl, #20]
   2ed18:	b	2ec40 <__assert_fail@plt+0x1cdac>
   2ed1c:	cmp	r4, #9
   2ed20:	bne	2ed38 <__assert_fail@plt+0x1cea4>
   2ed24:	mov	r0, r8
   2ed28:	mov	r1, r7
   2ed2c:	bl	2ad54 <__assert_fail@plt+0x18ec0>
   2ed30:	cmp	r0, #0
   2ed34:	beq	2ed44 <__assert_fail@plt+0x1ceb0>
   2ed38:	mov	r0, #0
   2ed3c:	sub	sp, fp, #28
   2ed40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ed44:	mov	r0, #12
   2ed48:	sub	sp, fp, #28
   2ed4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ed50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ed54:	add	fp, sp, #28
   2ed58:	sub	sp, sp, #4
   2ed5c:	ldr	sl, [r2, #4]
   2ed60:	cmp	sl, #0
   2ed64:	beq	2efa0 <__assert_fail@plt+0x1d10c>
   2ed68:	mov	r7, r2
   2ed6c:	mov	r9, r1
   2ed70:	cmp	sl, #1
   2ed74:	mov	r6, sl
   2ed78:	blt	2edec <__assert_fail@plt+0x1cf58>
   2ed7c:	ldr	r5, [r7, #8]
   2ed80:	mov	r2, #0
   2ed84:	cmp	sl, #4
   2ed88:	mov	r6, sl
   2ed8c:	bcc	2edd4 <__assert_fail@plt+0x1cf40>
   2ed90:	mov	r1, #0
   2ed94:	bic	r2, sl, #3
   2ed98:	vdup.32	q8, r1
   2ed9c:	mov	r3, r2
   2eda0:	mov	r1, r5
   2eda4:	vmov.32	d16[0], sl
   2eda8:	vld1.32	{d18-d19}, [r1]!
   2edac:	subs	r3, r3, #4
   2edb0:	vadd.i32	q8, q9, q8
   2edb4:	bne	2eda8 <__assert_fail@plt+0x1cf14>
   2edb8:	vext.8	q9, q8, q8, #8
   2edbc:	cmp	sl, r2
   2edc0:	vadd.i32	q8, q8, q9
   2edc4:	vdup.32	q9, d16[1]
   2edc8:	vadd.i32	q8, q8, q9
   2edcc:	vmov.32	r6, d16[0]
   2edd0:	beq	2edec <__assert_fail@plt+0x1cf58>
   2edd4:	add	r1, r5, r2, lsl #2
   2edd8:	sub	r2, sl, r2
   2eddc:	ldr	r3, [r1], #4
   2ede0:	subs	r2, r2, #1
   2ede4:	add	r6, r3, r6
   2ede8:	bne	2eddc <__assert_fail@plt+0x1cf48>
   2edec:	ldr	r1, [r9, #68]	; 0x44
   2edf0:	ldr	r2, [r9, #32]
   2edf4:	str	r0, [sp]
   2edf8:	and	r1, r1, r6
   2edfc:	add	r3, r1, r1, lsl #1
   2ee00:	ldr	r1, [r2, r3, lsl #2]
   2ee04:	cmp	r1, #1
   2ee08:	blt	2ee7c <__assert_fail@plt+0x1cfe8>
   2ee0c:	cmp	r7, #0
   2ee10:	beq	2ee7c <__assert_fail@plt+0x1cfe8>
   2ee14:	add	r2, r2, r3, lsl #2
   2ee18:	sub	ip, sl, #1
   2ee1c:	mov	r5, #0
   2ee20:	ldr	lr, [r2, #8]
   2ee24:	b	2ee58 <__assert_fail@plt+0x1cfc4>
   2ee28:	mov	r3, ip
   2ee2c:	add	r2, r3, #1
   2ee30:	cmp	r2, #1
   2ee34:	blt	2ef94 <__assert_fail@plt+0x1d100>
   2ee38:	ldr	r2, [r7, #8]
   2ee3c:	ldr	r0, [r4, #12]
   2ee40:	ldr	r2, [r2, r3, lsl #2]
   2ee44:	ldr	r0, [r0, r3, lsl #2]
   2ee48:	sub	r3, r3, #1
   2ee4c:	cmp	r0, r2
   2ee50:	beq	2ee2c <__assert_fail@plt+0x1cf98>
   2ee54:	b	2ee70 <__assert_fail@plt+0x1cfdc>
   2ee58:	ldr	r4, [lr, r5, lsl #2]
   2ee5c:	ldr	r3, [r4]
   2ee60:	cmp	r6, r3
   2ee64:	ldreq	r3, [r4, #8]
   2ee68:	cmpeq	r3, sl
   2ee6c:	beq	2ee28 <__assert_fail@plt+0x1cf94>
   2ee70:	add	r5, r5, #1
   2ee74:	cmp	r5, r1
   2ee78:	blt	2ee58 <__assert_fail@plt+0x1cfc4>
   2ee7c:	mov	r0, #56	; 0x38
   2ee80:	mov	r1, #1
   2ee84:	bl	36f60 <__assert_fail@plt+0x250cc>
   2ee88:	cmp	r0, #0
   2ee8c:	beq	2efd4 <__assert_fail@plt+0x1d140>
   2ee90:	mov	r4, r0
   2ee94:	ldr	r0, [r7, #4]
   2ee98:	add	sl, r4, #4
   2ee9c:	cmp	r0, #1
   2eea0:	str	r0, [r4, #8]
   2eea4:	blt	2ef68 <__assert_fail@plt+0x1d0d4>
   2eea8:	str	r0, [r4, #4]
   2eeac:	lsl	r0, r0, #2
   2eeb0:	bl	36fb4 <__assert_fail@plt+0x25120>
   2eeb4:	cmp	r0, #0
   2eeb8:	str	r0, [r4, #12]
   2eebc:	beq	2efc0 <__assert_fail@plt+0x1d12c>
   2eec0:	ldmib	r7, {r5, r7}
   2eec4:	lsl	r2, r5, #2
   2eec8:	mov	r1, r7
   2eecc:	bl	11a8c <memcpy@plt>
   2eed0:	cmp	r5, #1
   2eed4:	str	sl, [r4, #40]	; 0x28
   2eed8:	blt	2ef7c <__assert_fail@plt+0x1d0e8>
   2eedc:	ldr	sl, [r9]
   2eee0:	movw	ip, #65280	; 0xff00
   2eee4:	mov	lr, #32
   2eee8:	movt	ip, #3
   2eeec:	add	r2, ip, #255	; 0xff
   2eef0:	ldr	r0, [r7]
   2eef4:	add	r1, sl, r0, lsl #3
   2eef8:	ldr	r0, [r1, #4]!
   2eefc:	and	r3, r0, r2
   2ef00:	cmp	r3, #1
   2ef04:	beq	2ef58 <__assert_fail@plt+0x1d0c4>
   2ef08:	ldrb	r8, [r4, #52]	; 0x34
   2ef0c:	and	r3, lr, r0, lsr #15
   2ef10:	uxtb	r0, r0
   2ef14:	cmp	r0, #12
   2ef18:	orr	r3, r8, r3
   2ef1c:	strb	r3, [r4, #52]	; 0x34
   2ef20:	beq	2ef50 <__assert_fail@plt+0x1d0bc>
   2ef24:	cmp	r0, #4
   2ef28:	beq	2ef3c <__assert_fail@plt+0x1d0a8>
   2ef2c:	cmp	r0, #2
   2ef30:	bne	2ef44 <__assert_fail@plt+0x1d0b0>
   2ef34:	orr	r0, r3, #16
   2ef38:	b	2ef54 <__assert_fail@plt+0x1d0c0>
   2ef3c:	orr	r0, r3, #64	; 0x40
   2ef40:	b	2ef54 <__assert_fail@plt+0x1d0c0>
   2ef44:	ldr	r0, [r1]
   2ef48:	tst	r0, ip
   2ef4c:	beq	2ef58 <__assert_fail@plt+0x1d0c4>
   2ef50:	orr	r0, r3, #128	; 0x80
   2ef54:	strb	r0, [r4, #52]	; 0x34
   2ef58:	add	r7, r7, #4
   2ef5c:	subs	r5, r5, #1
   2ef60:	bne	2eef0 <__assert_fail@plt+0x1d05c>
   2ef64:	b	2ef7c <__assert_fail@plt+0x1d0e8>
   2ef68:	mov	r0, #0
   2ef6c:	str	r0, [sl]
   2ef70:	str	r0, [sl, #4]
   2ef74:	str	r0, [sl, #8]
   2ef78:	str	sl, [r4, #40]	; 0x28
   2ef7c:	mov	r0, r9
   2ef80:	mov	r1, r4
   2ef84:	mov	r2, r6
   2ef88:	bl	2b860 <__assert_fail@plt+0x199cc>
   2ef8c:	cmp	r0, #0
   2ef90:	bne	2efb4 <__assert_fail@plt+0x1d120>
   2ef94:	mov	r0, r4
   2ef98:	sub	sp, fp, #28
   2ef9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2efa0:	mov	r4, #0
   2efa4:	str	r4, [r0]
   2efa8:	mov	r0, r4
   2efac:	sub	sp, fp, #28
   2efb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2efb4:	mov	r0, r4
   2efb8:	bl	24df0 <__assert_fail@plt+0x12f5c>
   2efbc:	b	2efd4 <__assert_fail@plt+0x1d140>
   2efc0:	mov	r0, #0
   2efc4:	str	r0, [r4, #4]
   2efc8:	str	r0, [r4, #8]
   2efcc:	mov	r0, r4
   2efd0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   2efd4:	ldr	r1, [sp]
   2efd8:	mov	r0, #12
   2efdc:	mov	r4, #0
   2efe0:	str	r0, [r1]
   2efe4:	mov	r0, r4
   2efe8:	sub	sp, fp, #28
   2efec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eff0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2eff4:	add	fp, sp, #24
   2eff8:	ldr	lr, [r0]
   2effc:	add	r7, lr, r1, lsl #3
   2f000:	ldrb	r9, [r7, #4]
   2f004:	cmp	r9, #7
   2f008:	beq	2f1ec <__assert_fail@plt+0x1d358>
   2f00c:	ldr	ip, [r2, #80]	; 0x50
   2f010:	mov	r6, #1
   2f014:	cmp	ip, #1
   2f018:	beq	2f054 <__assert_fail@plt+0x1d1c0>
   2f01c:	ldr	r5, [r2, #28]
   2f020:	add	r7, r3, #1
   2f024:	cmp	r7, r5
   2f028:	bge	2f054 <__assert_fail@plt+0x1d1c0>
   2f02c:	ldr	r6, [r2, #8]
   2f030:	add	r7, r6, r3, lsl #2
   2f034:	mov	r6, #1
   2f038:	ldr	r4, [r7, r6, lsl #2]
   2f03c:	cmn	r4, #1
   2f040:	bne	2f054 <__assert_fail@plt+0x1d1c0>
   2f044:	add	r6, r6, #1
   2f048:	add	r4, r3, r6
   2f04c:	cmp	r4, r5
   2f050:	blt	2f038 <__assert_fail@plt+0x1d1a4>
   2f054:	mov	r8, #0
   2f058:	cmp	r9, #5
   2f05c:	bne	2f0a4 <__assert_fail@plt+0x1d210>
   2f060:	cmp	r6, #2
   2f064:	blt	2f1d0 <__assert_fail@plt+0x1d33c>
   2f068:	ldr	r0, [r0, #128]	; 0x80
   2f06c:	tst	r0, #64	; 0x40
   2f070:	bne	2f084 <__assert_fail@plt+0x1d1f0>
   2f074:	ldr	r1, [r2, #4]
   2f078:	ldrb	r1, [r1, r3]
   2f07c:	cmp	r1, #10
   2f080:	beq	2f1d0 <__assert_fail@plt+0x1d33c>
   2f084:	tst	r0, #128	; 0x80
   2f088:	beq	2f1cc <__assert_fail@plt+0x1d338>
   2f08c:	ldr	r0, [r2, #4]
   2f090:	ldrb	r0, [r0, r3]
   2f094:	cmp	r0, #0
   2f098:	movne	r8, r6
   2f09c:	mov	r0, r8
   2f0a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2f0a4:	cmp	r9, #6
   2f0a8:	bne	2f1d0 <__assert_fail@plt+0x1d33c>
   2f0ac:	cmp	r6, #2
   2f0b0:	blt	2f1d0 <__assert_fail@plt+0x1d33c>
   2f0b4:	ldr	r7, [lr, r1, lsl #3]
   2f0b8:	ldr	r0, [r7, #32]
   2f0bc:	cmp	r0, #0
   2f0c0:	bne	2f0dc <__assert_fail@plt+0x1d248>
   2f0c4:	ldr	r1, [r7, #36]	; 0x24
   2f0c8:	cmp	r1, #0
   2f0cc:	bne	2f0dc <__assert_fail@plt+0x1d248>
   2f0d0:	ldr	r1, [r7, #20]
   2f0d4:	cmp	r1, #0
   2f0d8:	beq	2f1d8 <__assert_fail@plt+0x1d344>
   2f0dc:	cmp	ip, #1
   2f0e0:	bne	2f0fc <__assert_fail@plt+0x1d268>
   2f0e4:	ldr	r1, [r2, #4]
   2f0e8:	ldrb	r5, [r1, r3]
   2f0ec:	ldr	r1, [r7, #20]
   2f0f0:	cmp	r1, #1
   2f0f4:	bge	2f110 <__assert_fail@plt+0x1d27c>
   2f0f8:	b	2f130 <__assert_fail@plt+0x1d29c>
   2f0fc:	ldr	r1, [r2, #8]
   2f100:	ldr	r5, [r1, r3, lsl #2]
   2f104:	ldr	r1, [r7, #20]
   2f108:	cmp	r1, #1
   2f10c:	blt	2f130 <__assert_fail@plt+0x1d29c>
   2f110:	ldr	r2, [r7]
   2f114:	mov	r3, #0
   2f118:	ldr	r4, [r2, r3, lsl #2]
   2f11c:	cmp	r5, r4
   2f120:	beq	2f1ac <__assert_fail@plt+0x1d318>
   2f124:	add	r3, r3, #1
   2f128:	cmp	r3, r1
   2f12c:	blt	2f118 <__assert_fail@plt+0x1d284>
   2f130:	ldr	r1, [r7, #36]	; 0x24
   2f134:	cmp	r1, #1
   2f138:	blt	2f16c <__assert_fail@plt+0x1d2d8>
   2f13c:	mov	r4, #0
   2f140:	ldr	r0, [r7, #12]
   2f144:	ldr	r1, [r0, r4, lsl #2]
   2f148:	mov	r0, r5
   2f14c:	bl	11a08 <iswctype@plt>
   2f150:	cmp	r0, #0
   2f154:	bne	2f1ac <__assert_fail@plt+0x1d318>
   2f158:	ldr	r0, [r7, #36]	; 0x24
   2f15c:	add	r4, r4, #1
   2f160:	cmp	r4, r0
   2f164:	blt	2f140 <__assert_fail@plt+0x1d2ac>
   2f168:	ldr	r0, [r7, #32]
   2f16c:	cmp	r0, #1
   2f170:	blt	2f1a4 <__assert_fail@plt+0x1d310>
   2f174:	ldr	r1, [r7, #4]
   2f178:	mov	r2, #0
   2f17c:	ldr	r3, [r1, r2, lsl #2]
   2f180:	cmp	r3, r5
   2f184:	bhi	2f198 <__assert_fail@plt+0x1d304>
   2f188:	ldr	r3, [r7, #8]
   2f18c:	ldr	r3, [r3, r2, lsl #2]
   2f190:	cmp	r5, r3
   2f194:	bls	2f1ac <__assert_fail@plt+0x1d318>
   2f198:	add	r2, r2, #1
   2f19c:	cmp	r2, r0
   2f1a0:	blt	2f17c <__assert_fail@plt+0x1d2e8>
   2f1a4:	mov	r0, #0
   2f1a8:	b	2f1b0 <__assert_fail@plt+0x1d31c>
   2f1ac:	mov	r0, r6
   2f1b0:	ldrb	r1, [r7, #16]
   2f1b4:	tst	r1, #1
   2f1b8:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2f1bc:	cmp	r0, #0
   2f1c0:	bgt	2f1d0 <__assert_fail@plt+0x1d33c>
   2f1c4:	cmp	r6, #1
   2f1c8:	movle	r6, #1
   2f1cc:	mov	r8, r6
   2f1d0:	mov	r0, r8
   2f1d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2f1d8:	mov	r5, #0
   2f1dc:	ldr	r1, [r7, #20]
   2f1e0:	cmp	r1, #1
   2f1e4:	bge	2f110 <__assert_fail@plt+0x1d27c>
   2f1e8:	b	2f130 <__assert_fail@plt+0x1d29c>
   2f1ec:	ldr	r0, [r2, #4]
   2f1f0:	mov	r8, #0
   2f1f4:	ldrb	r6, [r0, r3]
   2f1f8:	cmp	r6, #194	; 0xc2
   2f1fc:	bcc	2f1d0 <__assert_fail@plt+0x1d33c>
   2f200:	ldr	r1, [r2, #48]	; 0x30
   2f204:	add	r2, r3, #2
   2f208:	cmp	r2, r1
   2f20c:	bgt	2f1d0 <__assert_fail@plt+0x1d33c>
   2f210:	add	r0, r0, r3
   2f214:	cmp	r6, #223	; 0xdf
   2f218:	ldrb	r7, [r0, #1]
   2f21c:	bhi	2f240 <__assert_fail@plt+0x1d3ac>
   2f220:	mov	r8, #2
   2f224:	cmp	r7, #191	; 0xbf
   2f228:	sxtb	r0, r7
   2f22c:	movwhi	r8, #0
   2f230:	cmn	r0, #1
   2f234:	movwgt	r8, #0
   2f238:	mov	r0, r8
   2f23c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2f240:	cmp	r6, #239	; 0xef
   2f244:	bhi	2f260 <__assert_fail@plt+0x1d3cc>
   2f248:	mov	r2, #3
   2f24c:	cmp	r6, #224	; 0xe0
   2f250:	bne	2f2bc <__assert_fail@plt+0x1d428>
   2f254:	cmp	r7, #160	; 0xa0
   2f258:	bcc	2f1d0 <__assert_fail@plt+0x1d33c>
   2f25c:	b	2f2bc <__assert_fail@plt+0x1d428>
   2f260:	cmp	r6, #247	; 0xf7
   2f264:	bhi	2f280 <__assert_fail@plt+0x1d3ec>
   2f268:	mov	r2, #4
   2f26c:	cmp	r6, #240	; 0xf0
   2f270:	bne	2f2bc <__assert_fail@plt+0x1d428>
   2f274:	cmp	r7, #144	; 0x90
   2f278:	bcc	2f1d0 <__assert_fail@plt+0x1d33c>
   2f27c:	b	2f2bc <__assert_fail@plt+0x1d428>
   2f280:	cmp	r6, #251	; 0xfb
   2f284:	bhi	2f2a0 <__assert_fail@plt+0x1d40c>
   2f288:	mov	r2, #5
   2f28c:	cmp	r6, #248	; 0xf8
   2f290:	bne	2f2bc <__assert_fail@plt+0x1d428>
   2f294:	cmp	r7, #136	; 0x88
   2f298:	bcc	2f1d0 <__assert_fail@plt+0x1d33c>
   2f29c:	b	2f2bc <__assert_fail@plt+0x1d428>
   2f2a0:	cmp	r6, #253	; 0xfd
   2f2a4:	bhi	2f1d0 <__assert_fail@plt+0x1d33c>
   2f2a8:	mov	r2, #6
   2f2ac:	cmp	r6, #252	; 0xfc
   2f2b0:	bne	2f2bc <__assert_fail@plt+0x1d428>
   2f2b4:	cmp	r7, #132	; 0x84
   2f2b8:	bcc	2f1d0 <__assert_fail@plt+0x1d33c>
   2f2bc:	add	r3, r2, r3
   2f2c0:	cmp	r3, r1
   2f2c4:	bgt	2f1d0 <__assert_fail@plt+0x1d33c>
   2f2c8:	mov	r1, #1
   2f2cc:	ldrb	r3, [r0, r1]
   2f2d0:	sxtb	r7, r3
   2f2d4:	cmn	r7, #1
   2f2d8:	bgt	2f1d0 <__assert_fail@plt+0x1d33c>
   2f2dc:	cmp	r3, #191	; 0xbf
   2f2e0:	bhi	2f1d0 <__assert_fail@plt+0x1d33c>
   2f2e4:	add	r1, r1, #1
   2f2e8:	cmp	r1, r2
   2f2ec:	movcs	r0, r2
   2f2f0:	popcs	{r4, r5, r6, r7, r8, r9, fp, pc}
   2f2f4:	ldrb	r3, [r0, r1]
   2f2f8:	sxtb	r7, r3
   2f2fc:	cmn	r7, #1
   2f300:	ble	2f2dc <__assert_fail@plt+0x1d448>
   2f304:	b	2f1d0 <__assert_fail@plt+0x1d33c>
   2f308:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2f30c:	add	fp, sp, #24
   2f310:	ldr	r4, [r1, #4]
   2f314:	mov	r6, r0
   2f318:	mvn	r0, #0
   2f31c:	mov	r8, #0
   2f320:	uxtab	r3, r0, r4
   2f324:	cmp	r3, #6
   2f328:	bhi	2f4d4 <__assert_fail@plt+0x1d640>
   2f32c:	ldr	r0, [r6, #4]
   2f330:	mov	r9, r1
   2f334:	ldrb	r1, [r0, r2]
   2f338:	add	r7, pc, #4
   2f33c:	sxtb	r0, r1
   2f340:	ldr	pc, [r7, r3, lsl #2]
   2f344:	andeq	pc, r2, r0, ror #6
   2f348:	ldrdeq	pc, [r2], -r4
   2f34c:	andeq	pc, r2, r4, ror r3	; <UNPREDICTABLE>
   2f350:	ldrdeq	pc, [r2], -r4
   2f354:	muleq	r2, ip, r3
   2f358:	ldrdeq	pc, [r2], -r4
   2f35c:	muleq	r2, r4, r3
   2f360:	ldrb	r3, [r9]
   2f364:	uxtb	r7, r0
   2f368:	cmp	r3, r7
   2f36c:	beq	2f3bc <__assert_fail@plt+0x1d528>
   2f370:	b	2f4d4 <__assert_fail@plt+0x1d640>
   2f374:	ldr	r3, [r9]
   2f378:	ubfx	r7, r1, #5, #3
   2f37c:	mov	r5, #1
   2f380:	ldr	r3, [r3, r7, lsl #2]
   2f384:	and	r7, r1, #31
   2f388:	tst	r3, r5, lsl r7
   2f38c:	bne	2f3bc <__assert_fail@plt+0x1d528>
   2f390:	b	2f4d4 <__assert_fail@plt+0x1d640>
   2f394:	cmp	r0, #0
   2f398:	blt	2f4d4 <__assert_fail@plt+0x1d640>
   2f39c:	cmp	r1, #0
   2f3a0:	beq	2f468 <__assert_fail@plt+0x1d5d4>
   2f3a4:	cmp	r1, #10
   2f3a8:	bne	2f3bc <__assert_fail@plt+0x1d528>
   2f3ac:	ldr	r3, [r6, #84]	; 0x54
   2f3b0:	ldrb	r3, [r3, #128]	; 0x80
   2f3b4:	tst	r3, #64	; 0x40
   2f3b8:	beq	2f4d4 <__assert_fail@plt+0x1d640>
   2f3bc:	movw	r3, #65280	; 0xff00
   2f3c0:	movt	r3, #3
   2f3c4:	tst	r4, r3
   2f3c8:	beq	2f42c <__assert_fail@plt+0x1d598>
   2f3cc:	cmn	r2, #1
   2f3d0:	ble	2f40c <__assert_fail@plt+0x1d578>
   2f3d4:	ldr	r3, [r6, #48]	; 0x30
   2f3d8:	cmp	r3, r2
   2f3dc:	beq	2f4f4 <__assert_fail@plt+0x1d660>
   2f3e0:	ldr	r3, [r6, #80]	; 0x50
   2f3e4:	cmp	r3, #2
   2f3e8:	blt	2f438 <__assert_fail@plt+0x1d5a4>
   2f3ec:	ldr	r0, [r6, #8]
   2f3f0:	ldr	r7, [r0, r2, lsl #2]
   2f3f4:	cmn	r7, #1
   2f3f8:	bne	2f47c <__assert_fail@plt+0x1d5e8>
   2f3fc:	sub	r1, r2, #1
   2f400:	cmp	r2, #0
   2f404:	mov	r2, r1
   2f408:	bgt	2f3f0 <__assert_fail@plt+0x1d55c>
   2f40c:	ldr	r1, [r6, #60]	; 0x3c
   2f410:	and	r0, r1, #1
   2f414:	tst	r4, #1024	; 0x400
   2f418:	eor	r2, r0, #1
   2f41c:	beq	2f4b0 <__assert_fail@plt+0x1d61c>
   2f420:	cmp	r0, #0
   2f424:	beq	2f4d4 <__assert_fail@plt+0x1d640>
   2f428:	b	2f4b0 <__assert_fail@plt+0x1d61c>
   2f42c:	mov	r8, #1
   2f430:	mov	r0, r8
   2f434:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2f438:	ldr	r2, [r6, #68]	; 0x44
   2f43c:	ubfx	r3, r1, #5, #3
   2f440:	and	r7, r1, #31
   2f444:	mov	r1, #1
   2f448:	ldr	r3, [r2, r3, lsl #2]
   2f44c:	mov	r2, #0
   2f450:	tst	r3, r1, lsl r7
   2f454:	bne	2f4b0 <__assert_fail@plt+0x1d61c>
   2f458:	mov	r1, #0
   2f45c:	cmp	r0, #10
   2f460:	beq	2f494 <__assert_fail@plt+0x1d600>
   2f464:	b	2f4a0 <__assert_fail@plt+0x1d60c>
   2f468:	ldr	r3, [r6, #84]	; 0x54
   2f46c:	ldrb	r3, [r3, #128]	; 0x80
   2f470:	tst	r3, #128	; 0x80
   2f474:	bne	2f4d4 <__assert_fail@plt+0x1d640>
   2f478:	b	2f3bc <__assert_fail@plt+0x1d528>
   2f47c:	ldrb	r0, [r6, #78]	; 0x4e
   2f480:	cmp	r0, #0
   2f484:	bne	2f514 <__assert_fail@plt+0x1d680>
   2f488:	mov	r1, #0
   2f48c:	cmp	r7, #10
   2f490:	bne	2f4a0 <__assert_fail@plt+0x1d60c>
   2f494:	ldrb	r1, [r6, #77]	; 0x4d
   2f498:	cmp	r1, #0
   2f49c:	movwne	r1, #2
   2f4a0:	and	r0, r1, #1
   2f4a4:	tst	r4, #1024	; 0x400
   2f4a8:	eor	r2, r0, #1
   2f4ac:	bne	2f420 <__assert_fail@plt+0x1d58c>
   2f4b0:	ldr	r0, [r9, #4]
   2f4b4:	cmp	r2, #0
   2f4b8:	bne	2f4c4 <__assert_fail@plt+0x1d630>
   2f4bc:	ands	r2, r0, #2048	; 0x800
   2f4c0:	bne	2f4d4 <__assert_fail@plt+0x1d640>
   2f4c4:	tst	r1, #2
   2f4c8:	bne	2f4dc <__assert_fail@plt+0x1d648>
   2f4cc:	ands	r2, r0, #8192	; 0x2000
   2f4d0:	beq	2f4dc <__assert_fail@plt+0x1d648>
   2f4d4:	mov	r0, r8
   2f4d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2f4dc:	and	r0, r0, #32768	; 0x8000
   2f4e0:	mov	r2, #1
   2f4e4:	and	r1, r1, #8
   2f4e8:	eor	r0, r2, r0, lsr #15
   2f4ec:	orr	r0, r0, r1, lsr #3
   2f4f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2f4f4:	ldr	r0, [r6, #88]	; 0x58
   2f4f8:	and	r0, r0, #2
   2f4fc:	eor	r1, r0, #10
   2f500:	and	r0, r1, #1
   2f504:	tst	r4, #1024	; 0x400
   2f508:	eor	r2, r0, #1
   2f50c:	bne	2f420 <__assert_fail@plt+0x1d58c>
   2f510:	b	2f4b0 <__assert_fail@plt+0x1d61c>
   2f514:	mov	r0, r7
   2f518:	bl	11cb4 <iswalnum@plt>
   2f51c:	mov	r1, #1
   2f520:	mov	r2, #0
   2f524:	cmp	r7, #95	; 0x5f
   2f528:	beq	2f4b0 <__assert_fail@plt+0x1d61c>
   2f52c:	cmp	r0, #0
   2f530:	beq	2f488 <__assert_fail@plt+0x1d5f4>
   2f534:	b	2f4b0 <__assert_fail@plt+0x1d61c>
   2f538:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f53c:	add	fp, sp, #28
   2f540:	sub	sp, sp, #4
   2f544:	vpush	{d8-d9}
   2f548:	sub	sp, sp, #216	; 0xd8
   2f54c:	sub	sp, sp, #14336	; 0x3800
   2f550:	sub	lr, fp, #1024	; 0x400
   2f554:	mov	r5, #0
   2f558:	mov	sl, r0
   2f55c:	vmov.i32	q4, #0	; 0x00000000
   2f560:	str	r1, [sp, #88]	; 0x58
   2f564:	sub	r2, lr, #56	; 0x38
   2f568:	str	r5, [r1, #44]	; 0x2c
   2f56c:	str	r5, [r1, #48]	; 0x30
   2f570:	mov	r0, r2
   2f574:	vst1.64	{d8-d9}, [r0]!
   2f578:	vst1.64	{d8-d9}, [r0]
   2f57c:	ldr	r0, [r1, #8]
   2f580:	cmp	r0, #1
   2f584:	blt	30d60 <__assert_fail@plt+0x1eecc>
   2f588:	add	r0, sp, #160	; 0xa0
   2f58c:	mov	r5, #0
   2f590:	str	sl, [sp, #16]
   2f594:	add	r0, r0, #28
   2f598:	str	r0, [sp, #12]
   2f59c:	add	r0, sl, #112	; 0x70
   2f5a0:	str	r0, [sp, #4]
   2f5a4:	add	r0, sl, #96	; 0x60
   2f5a8:	str	r0, [sp]
   2f5ac:	add	r0, r2, #16
   2f5b0:	str	r0, [sp, #8]
   2f5b4:	mov	r0, #0
   2f5b8:	str	r0, [sp, #112]	; 0x70
   2f5bc:	ldr	r0, [sp, #88]	; 0x58
   2f5c0:	ldr	r1, [sp, #112]	; 0x70
   2f5c4:	ldr	r3, [sl]
   2f5c8:	ldr	r0, [r0, #12]
   2f5cc:	ldr	r2, [r0, r1, lsl #2]
   2f5d0:	add	r0, r3, r2, lsl #3
   2f5d4:	ldr	r1, [r0, #4]
   2f5d8:	uxtb	ip, r1
   2f5dc:	cmp	ip, #1
   2f5e0:	bne	2f6e8 <__assert_fail@plt+0x1d854>
   2f5e4:	mov	r8, r2
   2f5e8:	ldrb	r2, [r3, r2, lsl #3]
   2f5ec:	sub	lr, fp, #1024	; 0x400
   2f5f0:	mov	r0, r3
   2f5f4:	mov	r4, r5
   2f5f8:	mov	r5, #1
   2f5fc:	sub	r7, lr, #56	; 0x38
   2f600:	mov	r6, r7
   2f604:	ubfx	r3, r2, #5, #3
   2f608:	ldr	sl, [sp, #16]
   2f60c:	and	r2, r2, #31
   2f610:	ldr	r7, [r7, r3, lsl #2]
   2f614:	orr	r2, r7, r5, lsl r2
   2f618:	mov	r5, r4
   2f61c:	str	r2, [r6, r3, lsl #2]
   2f620:	movw	r2, #65280	; 0xff00
   2f624:	movt	r2, #3
   2f628:	ands	r2, r1, r2
   2f62c:	mov	r2, r0
   2f630:	beq	2fa40 <__assert_fail@plt+0x1dbac>
   2f634:	tst	r1, #8192	; 0x2000
   2f638:	beq	2f668 <__assert_fail@plt+0x1d7d4>
   2f63c:	mov	r0, r2
   2f640:	ldr	r2, [fp, #-1080]	; 0xfffffbc8
   2f644:	sub	lr, fp, #1024	; 0x400
   2f648:	sub	r3, lr, #56	; 0x38
   2f64c:	vst1.64	{d8-d9}, [r3]!
   2f650:	vst1.64	{d8-d9}, [r3]
   2f654:	tst	r2, #1024	; 0x400
   2f658:	beq	30314 <__assert_fail@plt+0x1e480>
   2f65c:	mov	r2, #1024	; 0x400
   2f660:	str	r2, [fp, #-1080]	; 0xfffffbc8
   2f664:	mov	r2, r0
   2f668:	tst	r1, #32768	; 0x8000
   2f66c:	bne	2f7e4 <__assert_fail@plt+0x1d950>
   2f670:	tst	r1, #1024	; 0x400
   2f674:	bne	2f7cc <__assert_fail@plt+0x1d938>
   2f678:	tst	r1, #2048	; 0x800
   2f67c:	beq	2fa40 <__assert_fail@plt+0x1dbac>
   2f680:	tst	r1, #4194304	; 0x400000
   2f684:	beq	2f690 <__assert_fail@plt+0x1d7fc>
   2f688:	cmp	ip, #1
   2f68c:	beq	2f7e4 <__assert_fail@plt+0x1d950>
   2f690:	ldr	r1, [sl, #92]	; 0x5c
   2f694:	mov	r0, r2
   2f698:	cmp	r1, #1
   2f69c:	ble	2f9c8 <__assert_fail@plt+0x1db34>
   2f6a0:	ldr	r1, [sl, #60]	; 0x3c
   2f6a4:	ldr	r2, [sp]
   2f6a8:	sub	lr, fp, #1024	; 0x400
   2f6ac:	vld1.32	{d16-d17}, [r2]
   2f6b0:	vld1.32	{d18-d19}, [r1]!
   2f6b4:	sub	r2, lr, #56	; 0x38
   2f6b8:	vld1.64	{d20-d21}, [r2]
   2f6bc:	vand	q8, q9, q8
   2f6c0:	vbic	q9, q10, q8
   2f6c4:	vst1.64	{d18-d19}, [r2]
   2f6c8:	ldr	r2, [sp, #4]
   2f6cc:	vld1.32	{d20-d21}, [r1]
   2f6d0:	ldr	r1, [sp, #8]
   2f6d4:	vld1.32	{d16-d17}, [r2]
   2f6d8:	vld1.32	{d22-d23}, [r1]
   2f6dc:	vand	q8, q10, q8
   2f6e0:	vbic	q8, q11, q8
   2f6e4:	b	2f9f8 <__assert_fail@plt+0x1db64>
   2f6e8:	mov	r0, r3
   2f6ec:	mov	r8, r2
   2f6f0:	cmp	ip, #7
   2f6f4:	beq	2f73c <__assert_fail@plt+0x1d8a8>
   2f6f8:	cmp	ip, #5
   2f6fc:	beq	2f788 <__assert_fail@plt+0x1d8f4>
   2f700:	cmp	ip, #3
   2f704:	bne	30314 <__assert_fail@plt+0x1e480>
   2f708:	ldr	r2, [r0, r8, lsl #3]
   2f70c:	sub	lr, fp, #1024	; 0x400
   2f710:	sub	r3, lr, #56	; 0x38
   2f714:	vld1.64	{d16-d17}, [r3]
   2f718:	vld1.32	{d18-d19}, [r2]!
   2f71c:	vorr	q8, q8, q9
   2f720:	vst1.64	{d16-d17}, [r3]
   2f724:	vld1.32	{d16-d17}, [r2]
   2f728:	ldr	r2, [sp, #8]
   2f72c:	vld1.32	{d18-d19}, [r2]
   2f730:	vorr	q8, q9, q8
   2f734:	vst1.32	{d16-d17}, [r2]
   2f738:	b	2f620 <__assert_fail@plt+0x1d78c>
   2f73c:	mvn	r2, #0
   2f740:	str	r2, [fp, #-1068]	; 0xfffffbd4
   2f744:	str	r2, [fp, #-1072]	; 0xfffffbd0
   2f748:	str	r2, [fp, #-1076]	; 0xfffffbcc
   2f74c:	str	r2, [fp, #-1080]	; 0xfffffbc8
   2f750:	ldr	r3, [sl, #128]	; 0x80
   2f754:	and	r2, r3, #128	; 0x80
   2f758:	ands	r3, r3, #64	; 0x40
   2f75c:	beq	2f768 <__assert_fail@plt+0x1d8d4>
   2f760:	cmp	r2, #0
   2f764:	beq	2f620 <__assert_fail@plt+0x1d78c>
   2f768:	cmp	r3, #0
   2f76c:	mvn	r3, #1
   2f770:	movweq	r3, #64510	; 0xfbfe
   2f774:	movteq	r3, #65535	; 0xffff
   2f778:	cmp	r2, #0
   2f77c:	mvneq	r3, #1024	; 0x400
   2f780:	str	r3, [fp, #-1080]	; 0xfffffbc8
   2f784:	b	2f620 <__assert_fail@plt+0x1d78c>
   2f788:	ldr	r2, [sl, #92]	; 0x5c
   2f78c:	cmp	r2, #2
   2f790:	blt	2f7f0 <__assert_fail@plt+0x1d95c>
   2f794:	ldr	r2, [sl, #60]	; 0x3c
   2f798:	sub	lr, fp, #1024	; 0x400
   2f79c:	sub	r3, lr, #56	; 0x38
   2f7a0:	vld1.64	{d16-d17}, [r3]
   2f7a4:	vld1.32	{d18-d19}, [r2]!
   2f7a8:	vorr	q8, q8, q9
   2f7ac:	vst1.64	{d16-d17}, [r3]
   2f7b0:	vld1.32	{d18-d19}, [r2]
   2f7b4:	ldr	r2, [sp, #8]
   2f7b8:	vld1.32	{d20-d21}, [r2]
   2f7bc:	vorr	q9, q10, q9
   2f7c0:	vst1.32	{d18-d19}, [r2]
   2f7c4:	vmov.32	r2, d16[0]
   2f7c8:	b	2f814 <__assert_fail@plt+0x1d980>
   2f7cc:	mov	r0, r2
   2f7d0:	movw	r2, #255	; 0xff
   2f7d4:	movt	r2, #64	; 0x40
   2f7d8:	and	r2, r1, r2
   2f7dc:	cmp	r2, #1
   2f7e0:	bne	2f840 <__assert_fail@plt+0x1d9ac>
   2f7e4:	sub	lr, fp, #1024	; 0x400
   2f7e8:	sub	r0, lr, #56	; 0x38
   2f7ec:	b	3030c <__assert_fail@plt+0x1e478>
   2f7f0:	mvn	r2, #0
   2f7f4:	str	r2, [fp, #-1052]	; 0xfffffbe4
   2f7f8:	str	r2, [fp, #-1056]	; 0xfffffbe0
   2f7fc:	str	r2, [fp, #-1060]	; 0xfffffbdc
   2f800:	str	r2, [fp, #-1064]	; 0xfffffbd8
   2f804:	str	r2, [fp, #-1068]	; 0xfffffbd4
   2f808:	str	r2, [fp, #-1072]	; 0xfffffbd0
   2f80c:	str	r2, [fp, #-1076]	; 0xfffffbcc
   2f810:	str	r2, [fp, #-1080]	; 0xfffffbc8
   2f814:	ldr	r3, [sl, #128]	; 0x80
   2f818:	ands	r7, r3, #64	; 0x40
   2f81c:	and	r3, r3, #128	; 0x80
   2f820:	biceq	r2, r2, #1024	; 0x400
   2f824:	beq	2f830 <__assert_fail@plt+0x1d99c>
   2f828:	cmp	r3, #0
   2f82c:	beq	2f620 <__assert_fail@plt+0x1d78c>
   2f830:	cmp	r3, #0
   2f834:	bicne	r2, r2, #1
   2f838:	str	r2, [fp, #-1080]	; 0xfffffbc8
   2f83c:	b	2f620 <__assert_fail@plt+0x1d78c>
   2f840:	ldr	r2, [sl, #92]	; 0x5c
   2f844:	cmp	r2, #1
   2f848:	ble	2f8e0 <__assert_fail@plt+0x1da4c>
   2f84c:	ldr	r2, [sl, #60]	; 0x3c
   2f850:	ldr	r3, [sp]
   2f854:	sub	lr, fp, #1024	; 0x400
   2f858:	vld1.32	{d16-d17}, [r3]
   2f85c:	vld1.32	{d18-d19}, [r2]!
   2f860:	sub	r3, lr, #56	; 0x38
   2f864:	vld1.64	{d20-d21}, [r3]
   2f868:	vorn	q8, q8, q9
   2f86c:	vand	q8, q10, q8
   2f870:	vst1.64	{d16-d17}, [r3]
   2f874:	vmov.32	r3, d16[1]
   2f878:	vld1.32	{d18-d19}, [r2]
   2f87c:	ldr	r2, [sp, #4]
   2f880:	vld1.32	{d20-d21}, [r2]
   2f884:	ldr	r2, [sp, #8]
   2f888:	vld1.32	{d22-d23}, [r2]
   2f88c:	vorn	q9, q10, q9
   2f890:	vand	q9, q11, q9
   2f894:	vst1.32	{d18-d19}, [r2]
   2f898:	vmov.32	r2, d16[0]
   2f89c:	orr	r2, r3, r2
   2f8a0:	vmov.32	r3, d17[0]
   2f8a4:	orr	r2, r2, r3
   2f8a8:	vmov.32	r3, d17[1]
   2f8ac:	orr	r2, r2, r3
   2f8b0:	vmov.32	r3, d18[0]
   2f8b4:	orr	r2, r2, r3
   2f8b8:	vmov.32	r3, d18[1]
   2f8bc:	orr	r2, r2, r3
   2f8c0:	vmov.32	r3, d19[0]
   2f8c4:	orr	r2, r2, r3
   2f8c8:	vmov.32	r3, d19[1]
   2f8cc:	orr	r2, r2, r3
   2f8d0:	cmp	r2, #0
   2f8d4:	mov	r2, r0
   2f8d8:	bne	2f678 <__assert_fail@plt+0x1d7e4>
   2f8dc:	b	30314 <__assert_fail@plt+0x1e480>
   2f8e0:	ldr	r2, [sl, #112]	; 0x70
   2f8e4:	str	r0, [sp, #24]
   2f8e8:	str	r8, [sp, #28]
   2f8ec:	str	r5, [sp, #156]	; 0x9c
   2f8f0:	ldr	r3, [sl, #96]	; 0x60
   2f8f4:	ldr	r4, [fp, #-1080]	; 0xfffffbc8
   2f8f8:	ldr	r0, [sl, #100]	; 0x64
   2f8fc:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   2f900:	ldr	r8, [sl, #104]	; 0x68
   2f904:	ldr	r9, [sl, #108]	; 0x6c
   2f908:	ldr	r6, [fp, #-1072]	; 0xfffffbd0
   2f90c:	str	r2, [sp, #140]	; 0x8c
   2f910:	ldr	r2, [sl, #116]	; 0x74
   2f914:	and	lr, r5, r0
   2f918:	and	r7, r4, r3
   2f91c:	ldr	r0, [sp, #140]	; 0x8c
   2f920:	str	r2, [sp, #144]	; 0x90
   2f924:	ldr	r2, [sl, #120]	; 0x78
   2f928:	str	r2, [sp, #148]	; 0x94
   2f92c:	ldr	r2, [sl, #124]	; 0x7c
   2f930:	and	sl, r6, r8
   2f934:	ldr	r8, [sp, #28]
   2f938:	str	r2, [sp, #152]	; 0x98
   2f93c:	ldr	r2, [fp, #-1068]	; 0xfffffbd4
   2f940:	str	r7, [fp, #-1080]	; 0xfffffbc8
   2f944:	str	lr, [fp, #-1076]	; 0xfffffbcc
   2f948:	str	sl, [fp, #-1072]	; 0xfffffbd0
   2f94c:	orr	r7, lr, r7
   2f950:	orr	r7, r7, sl
   2f954:	ldr	sl, [sp, #16]
   2f958:	and	r2, r2, r9
   2f95c:	str	r2, [fp, #-1068]	; 0xfffffbd4
   2f960:	orr	r2, r7, r2
   2f964:	ldr	r6, [fp, #-1064]	; 0xfffffbd8
   2f968:	and	r9, r6, r0
   2f96c:	ldr	r0, [sp, #144]	; 0x90
   2f970:	str	r9, [fp, #-1064]	; 0xfffffbd8
   2f974:	orr	r2, r2, r9
   2f978:	ldr	r4, [fp, #-1060]	; 0xfffffbdc
   2f97c:	and	r4, r4, r0
   2f980:	ldr	r0, [sp, #148]	; 0x94
   2f984:	str	r4, [fp, #-1060]	; 0xfffffbdc
   2f988:	orr	r2, r2, r4
   2f98c:	ldr	r3, [fp, #-1056]	; 0xfffffbe0
   2f990:	and	r3, r3, r0
   2f994:	ldr	r0, [sp, #152]	; 0x98
   2f998:	str	r3, [fp, #-1056]	; 0xfffffbe0
   2f99c:	orr	r2, r2, r3
   2f9a0:	ldr	r5, [fp, #-1052]	; 0xfffffbe4
   2f9a4:	and	r6, r5, r0
   2f9a8:	ldr	r0, [sp, #24]
   2f9ac:	ldr	r5, [sp, #156]	; 0x9c
   2f9b0:	str	r6, [fp, #-1052]	; 0xfffffbe4
   2f9b4:	orr	r2, r2, r6
   2f9b8:	cmp	r2, #0
   2f9bc:	mov	r2, r0
   2f9c0:	bne	2f678 <__assert_fail@plt+0x1d7e4>
   2f9c4:	b	30314 <__assert_fail@plt+0x1e480>
   2f9c8:	ldr	r1, [sp]
   2f9cc:	sub	lr, fp, #1024	; 0x400
   2f9d0:	vld1.32	{d16-d17}, [r1]
   2f9d4:	sub	r1, lr, #56	; 0x38
   2f9d8:	vld1.64	{d18-d19}, [r1]
   2f9dc:	vbic	q9, q9, q8
   2f9e0:	vst1.64	{d18-d19}, [r1]
   2f9e4:	ldr	r1, [sp, #4]
   2f9e8:	vld1.32	{d16-d17}, [r1]
   2f9ec:	ldr	r1, [sp, #8]
   2f9f0:	vld1.32	{d20-d21}, [r1]
   2f9f4:	vbic	q8, q10, q8
   2f9f8:	vst1.32	{d16-d17}, [r1]
   2f9fc:	vmov.32	r1, d18[0]
   2fa00:	vmov.32	r2, d18[1]
   2fa04:	orr	r1, r2, r1
   2fa08:	vmov.32	r2, d19[0]
   2fa0c:	orr	r1, r1, r2
   2fa10:	vmov.32	r2, d19[1]
   2fa14:	orr	r1, r1, r2
   2fa18:	vmov.32	r2, d16[0]
   2fa1c:	orr	r1, r1, r2
   2fa20:	vmov.32	r2, d16[1]
   2fa24:	orr	r1, r1, r2
   2fa28:	vmov.32	r2, d17[0]
   2fa2c:	orr	r1, r1, r2
   2fa30:	vmov.32	r2, d17[1]
   2fa34:	orrs	r1, r1, r2
   2fa38:	mov	r2, r0
   2fa3c:	beq	30314 <__assert_fail@plt+0x1e480>
   2fa40:	cmp	r5, #1
   2fa44:	blt	2fe50 <__assert_fail@plt+0x1dfbc>
   2fa48:	ldr	r6, [sp, #12]
   2fa4c:	cmp	ip, #1
   2fa50:	bne	2fe60 <__assert_fail@plt+0x1dfcc>
   2fa54:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   2fa58:	ldr	r7, [fp, #-1080]	; 0xfffffbc8
   2fa5c:	ldr	sl, [fp, #-1076]	; 0xfffffbcc
   2fa60:	ldr	r9, [fp, #-1072]	; 0xfffffbd0
   2fa64:	ldr	lr, [fp, #-1068]	; 0xfffffbd4
   2fa68:	str	r5, [sp, #156]	; 0x9c
   2fa6c:	mov	r4, #0
   2fa70:	str	r6, [sp, #148]	; 0x94
   2fa74:	add	r5, sp, #160	; 0xa0
   2fa78:	mov	ip, r8
   2fa7c:	str	r8, [sp, #28]
   2fa80:	str	r2, [sp, #24]
   2fa84:	str	r0, [sp, #140]	; 0x8c
   2fa88:	sub	r0, fp, #6144	; 0x1800
   2fa8c:	sub	r6, r0, #104	; 0x68
   2fa90:	ldrb	r0, [r2, ip, lsl #3]
   2fa94:	mov	r8, r2
   2fa98:	mov	r2, #1
   2fa9c:	ubfx	r1, r0, #5, #3
   2faa0:	and	r0, r0, #31
   2faa4:	add	r1, r5, r1, lsl #2
   2faa8:	ldr	r1, [r1, r4, lsl #5]
   2faac:	tst	r1, r2, lsl r0
   2fab0:	beq	2fd24 <__assert_fail@plt+0x1de90>
   2fab4:	add	r0, r5, r4, lsl #5
   2fab8:	str	r6, [sp, #116]	; 0x74
   2fabc:	str	r4, [sp, #152]	; 0x98
   2fac0:	add	ip, r0, #8
   2fac4:	ldr	r6, [r0, #4]
   2fac8:	ldm	ip, {r1, r3, ip}
   2facc:	ldr	r5, [sp, #148]	; 0x94
   2fad0:	str	lr, [sp, #136]	; 0x88
   2fad4:	str	sl, [sp, #132]	; 0x84
   2fad8:	ldr	r8, [fp, #-1052]	; 0xfffffbe4
   2fadc:	str	r6, [sp, #124]	; 0x7c
   2fae0:	and	r6, r6, sl
   2fae4:	ldr	sl, [fp, #-1056]	; 0xfffffbe0
   2fae8:	ldr	r2, [r5, #-28]	; 0xffffffe4
   2faec:	and	r4, r1, r9
   2faf0:	str	r6, [sp, #84]	; 0x54
   2faf4:	str	r1, [sp, #104]	; 0x68
   2faf8:	ldr	r1, [r5]
   2fafc:	str	ip, [sp, #144]	; 0x90
   2fb00:	str	r3, [sp, #108]	; 0x6c
   2fb04:	str	r8, [sp, #100]	; 0x64
   2fb08:	str	r4, [sp, #96]	; 0x60
   2fb0c:	str	r2, [sp, #120]	; 0x78
   2fb10:	and	r2, r2, r7
   2fb14:	str	r1, [sp, #128]	; 0x80
   2fb18:	and	r1, r1, r8
   2fb1c:	str	r2, [sp, #92]	; 0x5c
   2fb20:	orr	r2, r6, r2
   2fb24:	and	r6, r3, lr
   2fb28:	ldr	lr, [fp, #-1060]	; 0xfffffbdc
   2fb2c:	orr	r2, r2, r4
   2fb30:	str	r6, [sp, #80]	; 0x50
   2fb34:	orr	r2, r2, r6
   2fb38:	ldr	r6, [sp, #140]	; 0x8c
   2fb3c:	and	r4, ip, r6
   2fb40:	str	r4, [sp, #76]	; 0x4c
   2fb44:	orr	r4, r2, r4
   2fb48:	ldr	r2, [r0, #20]
   2fb4c:	and	r6, r2, lr
   2fb50:	str	r6, [sp, #72]	; 0x48
   2fb54:	orr	r6, r4, r6
   2fb58:	ldr	r4, [r0, #24]
   2fb5c:	and	ip, r4, sl
   2fb60:	orr	r6, r6, ip
   2fb64:	str	ip, [sp, #68]	; 0x44
   2fb68:	orrs	r6, r6, r1
   2fb6c:	beq	2fd30 <__assert_fail@plt+0x1de9c>
   2fb70:	str	r1, [sp, #20]
   2fb74:	ldr	r1, [sp, #120]	; 0x78
   2fb78:	mov	r8, r2
   2fb7c:	str	r2, [sp, #44]	; 0x2c
   2fb80:	ldr	r2, [sp, #132]	; 0x84
   2fb84:	ldr	ip, [sp, #104]	; 0x68
   2fb88:	ldr	r3, [sp, #140]	; 0x8c
   2fb8c:	bic	r6, r7, r1
   2fb90:	ldr	r1, [sp, #124]	; 0x7c
   2fb94:	str	r6, [sp, #64]	; 0x40
   2fb98:	bic	r6, r2, r1
   2fb9c:	ldr	r2, [sp, #108]	; 0x6c
   2fba0:	ldr	r1, [sp, #136]	; 0x88
   2fba4:	str	r6, [sp, #48]	; 0x30
   2fba8:	bic	r6, r9, ip
   2fbac:	str	r6, [sp, #60]	; 0x3c
   2fbb0:	bic	r6, r1, r2
   2fbb4:	ldr	r1, [sp, #144]	; 0x90
   2fbb8:	str	r6, [sp, #56]	; 0x38
   2fbbc:	bic	r6, r3, r1
   2fbc0:	ldr	r1, [sp, #128]	; 0x80
   2fbc4:	ldr	r3, [sp, #120]	; 0x78
   2fbc8:	str	r6, [sp, #52]	; 0x34
   2fbcc:	bic	r6, lr, r8
   2fbd0:	ldr	r8, [sp, #100]	; 0x64
   2fbd4:	str	r6, [sp, #40]	; 0x28
   2fbd8:	str	r6, [fp, #-1060]	; 0xfffffbdc
   2fbdc:	bic	r6, sl, r4
   2fbe0:	str	r6, [sp, #36]	; 0x24
   2fbe4:	str	r6, [fp, #-1056]	; 0xfffffbe0
   2fbe8:	bic	r7, r3, r7
   2fbec:	ldr	r3, [sp, #124]	; 0x7c
   2fbf0:	bic	r6, r8, r1
   2fbf4:	bic	r1, ip, r9
   2fbf8:	str	r6, [sp, #32]
   2fbfc:	str	r6, [fp, #-1052]	; 0xfffffbe4
   2fc00:	ldr	r6, [sp, #132]	; 0x84
   2fc04:	bic	r3, r3, r6
   2fc08:	orr	r6, r3, r7
   2fc0c:	str	r3, [sp, #132]	; 0x84
   2fc10:	mov	r3, r7
   2fc14:	ldr	r7, [sp, #136]	; 0x88
   2fc18:	orr	r6, r6, r1
   2fc1c:	bic	r2, r2, r7
   2fc20:	ldr	r7, [sp, #140]	; 0x8c
   2fc24:	str	r2, [sp, #136]	; 0x88
   2fc28:	orr	r6, r6, r2
   2fc2c:	ldr	r2, [sp, #144]	; 0x90
   2fc30:	bic	ip, r2, r7
   2fc34:	ldr	r2, [sp, #44]	; 0x2c
   2fc38:	orr	r6, r6, ip
   2fc3c:	bic	lr, r2, lr
   2fc40:	bic	r2, r4, sl
   2fc44:	ldr	r4, [sp, #128]	; 0x80
   2fc48:	orr	r6, r6, lr
   2fc4c:	orr	r6, r6, r2
   2fc50:	bic	r7, r4, r8
   2fc54:	orrs	r6, r6, r7
   2fc58:	beq	2fd50 <__assert_fail@plt+0x1debc>
   2fc5c:	ldr	r4, [sp, #156]	; 0x9c
   2fc60:	add	r6, sp, #160	; 0xa0
   2fc64:	str	r3, [r6, r4, lsl #5]
   2fc68:	ldr	r3, [sp, #132]	; 0x84
   2fc6c:	add	r6, r6, r4, lsl #5
   2fc70:	str	r3, [r6, #4]
   2fc74:	str	r1, [r6, #8]
   2fc78:	ldr	r1, [sp, #136]	; 0x88
   2fc7c:	add	r3, r6, #12
   2fc80:	stm	r3, {r1, ip, lr}
   2fc84:	str	r2, [r6, #24]
   2fc88:	str	r7, [r6, #28]
   2fc8c:	sub	lr, fp, #6144	; 0x1800
   2fc90:	str	r4, [sp, #156]	; 0x9c
   2fc94:	ldr	r1, [sp, #92]	; 0x5c
   2fc98:	ldr	r6, [sp, #116]	; 0x74
   2fc9c:	str	r1, [r5, #-28]	; 0xffffffe4
   2fca0:	ldr	r1, [sp, #84]	; 0x54
   2fca4:	str	r1, [r0, #4]
   2fca8:	ldr	r1, [sp, #96]	; 0x60
   2fcac:	str	r1, [r0, #8]
   2fcb0:	ldr	r1, [sp, #80]	; 0x50
   2fcb4:	str	r1, [r0, #12]
   2fcb8:	ldr	r1, [sp, #76]	; 0x4c
   2fcbc:	str	r1, [r0, #16]
   2fcc0:	ldr	r1, [sp, #72]	; 0x48
   2fcc4:	str	r1, [r0, #20]
   2fcc8:	ldr	r1, [sp, #68]	; 0x44
   2fccc:	str	r1, [r0, #24]
   2fcd0:	ldr	r0, [sp, #20]
   2fcd4:	sub	r1, lr, #104	; 0x68
   2fcd8:	str	r0, [r5]
   2fcdc:	add	r0, r4, r4, lsl #1
   2fce0:	add	r5, r1, r0, lsl #2
   2fce4:	ldr	r0, [r6, #4]
   2fce8:	mov	r4, r5
   2fcec:	str	r0, [r4, #4]!
   2fcf0:	ldr	r8, [r6, #4]
   2fcf4:	cmp	r8, #0
   2fcf8:	ble	2fd5c <__assert_fail@plt+0x1dec8>
   2fcfc:	str	r0, [r5]
   2fd00:	lsl	r0, r0, #2
   2fd04:	bl	36fb4 <__assert_fail@plt+0x25120>
   2fd08:	cmp	r0, #0
   2fd0c:	str	r0, [r5, #8]
   2fd10:	beq	30cf4 <__assert_fail@plt+0x1ee60>
   2fd14:	ldr	r1, [r6, #8]
   2fd18:	lsl	r2, r8, #2
   2fd1c:	bl	11a8c <memcpy@plt>
   2fd20:	b	2fd6c <__assert_fail@plt+0x1ded8>
   2fd24:	str	r9, [sp, #144]	; 0x90
   2fd28:	mov	r2, r8
   2fd2c:	b	2fdfc <__assert_fail@plt+0x1df68>
   2fd30:	ldr	r4, [sp, #152]	; 0x98
   2fd34:	ldr	ip, [sp, #28]
   2fd38:	ldr	r2, [sp, #24]
   2fd3c:	ldr	r6, [sp, #116]	; 0x74
   2fd40:	ldr	lr, [sp, #136]	; 0x88
   2fd44:	ldr	sl, [sp, #132]	; 0x84
   2fd48:	str	r9, [sp, #144]	; 0x90
   2fd4c:	b	2fe00 <__assert_fail@plt+0x1df6c>
   2fd50:	ldr	r4, [sp, #152]	; 0x98
   2fd54:	ldr	r6, [sp, #116]	; 0x74
   2fd58:	b	2fd7c <__assert_fail@plt+0x1dee8>
   2fd5c:	mov	r0, #0
   2fd60:	str	r0, [r5]
   2fd64:	str	r0, [r5, #4]
   2fd68:	str	r0, [r5, #8]
   2fd6c:	ldr	r0, [sp, #156]	; 0x9c
   2fd70:	ldr	r4, [sp, #152]	; 0x98
   2fd74:	add	r0, r0, #1
   2fd78:	str	r0, [sp, #156]	; 0x9c
   2fd7c:	ldr	r0, [sp, #88]	; 0x58
   2fd80:	ldr	r1, [sp, #112]	; 0x70
   2fd84:	ldr	r0, [r0, #12]
   2fd88:	ldr	r1, [r0, r1, lsl #2]
   2fd8c:	mov	r0, r6
   2fd90:	bl	2ad54 <__assert_fail@plt+0x18ec0>
   2fd94:	cmp	r0, #0
   2fd98:	beq	307e4 <__assert_fail@plt+0x1e950>
   2fd9c:	ldr	r2, [sp, #64]	; 0x40
   2fda0:	ldr	sl, [sp, #48]	; 0x30
   2fda4:	ldr	r9, [sp, #60]	; 0x3c
   2fda8:	ldr	lr, [sp, #56]	; 0x38
   2fdac:	ldr	r1, [sp, #52]	; 0x34
   2fdb0:	ldr	r5, [sp, #40]	; 0x28
   2fdb4:	orr	r0, sl, r2
   2fdb8:	orr	r0, r0, r9
   2fdbc:	orr	r0, r0, lr
   2fdc0:	orr	r0, r0, r1
   2fdc4:	orr	r0, r0, r5
   2fdc8:	ldr	r5, [sp, #36]	; 0x24
   2fdcc:	orr	r0, r0, r5
   2fdd0:	ldr	r5, [sp, #32]
   2fdd4:	orrs	r0, r0, r5
   2fdd8:	mov	r0, #0
   2fddc:	movweq	r0, #17
   2fde0:	cmp	r0, #0
   2fde4:	bne	3033c <__assert_fail@plt+0x1e4a8>
   2fde8:	mov	r7, r2
   2fdec:	ldr	ip, [sp, #28]
   2fdf0:	ldr	r2, [sp, #24]
   2fdf4:	str	r1, [sp, #140]	; 0x8c
   2fdf8:	str	r9, [sp, #144]	; 0x90
   2fdfc:	ldr	r5, [sp, #148]	; 0x94
   2fe00:	ldr	r3, [sp, #156]	; 0x9c
   2fe04:	ldr	r9, [sp, #144]	; 0x90
   2fe08:	add	r5, r5, #32
   2fe0c:	add	r4, r4, #1
   2fe10:	add	r6, r6, #12
   2fe14:	str	r5, [sp, #148]	; 0x94
   2fe18:	add	r5, sp, #160	; 0xa0
   2fe1c:	cmp	r4, r3
   2fe20:	blt	2fa90 <__assert_fail@plt+0x1dbfc>
   2fe24:	ldr	r5, [sp, #156]	; 0x9c
   2fe28:	ldr	r0, [sp, #140]	; 0x8c
   2fe2c:	str	sl, [fp, #-1076]	; 0xfffffbcc
   2fe30:	str	r7, [fp, #-1080]	; 0xfffffbc8
   2fe34:	str	r9, [fp, #-1072]	; 0xfffffbd0
   2fe38:	str	lr, [fp, #-1068]	; 0xfffffbd4
   2fe3c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   2fe40:	ldr	sl, [sp, #16]
   2fe44:	cmp	r4, r5
   2fe48:	beq	30290 <__assert_fail@plt+0x1e3fc>
   2fe4c:	b	30314 <__assert_fail@plt+0x1e480>
   2fe50:	mov	r4, #0
   2fe54:	cmp	r4, r5
   2fe58:	beq	30290 <__assert_fail@plt+0x1e3fc>
   2fe5c:	b	30314 <__assert_fail@plt+0x1e480>
   2fe60:	ldr	r0, [fp, #-1052]	; 0xfffffbe4
   2fe64:	ldr	r9, [fp, #-1080]	; 0xfffffbc8
   2fe68:	ldr	ip, [fp, #-1072]	; 0xfffffbd0
   2fe6c:	ldr	sl, [fp, #-1076]	; 0xfffffbcc
   2fe70:	ldr	r2, [fp, #-1068]	; 0xfffffbd4
   2fe74:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   2fe78:	sub	lr, fp, #6144	; 0x1800
   2fe7c:	mov	r4, #0
   2fe80:	str	r0, [sp, #144]	; 0x90
   2fe84:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   2fe88:	mov	r3, ip
   2fe8c:	mov	r7, r9
   2fe90:	str	r2, [sp, #80]	; 0x50
   2fe94:	str	sl, [sp, #76]	; 0x4c
   2fe98:	str	r0, [sp, #140]	; 0x8c
   2fe9c:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   2fea0:	str	r0, [sp, #84]	; 0x54
   2fea4:	sub	r0, lr, #104	; 0x68
   2fea8:	str	r0, [sp, #148]	; 0x94
   2feac:	mov	r0, r6
   2feb0:	add	r1, sp, #160	; 0xa0
   2feb4:	str	r9, [sp, #136]	; 0x88
   2feb8:	str	r7, [sp, #120]	; 0x78
   2febc:	str	r3, [sp, #92]	; 0x5c
   2fec0:	str	r8, [sp, #96]	; 0x60
   2fec4:	str	ip, [sp, #124]	; 0x7c
   2fec8:	str	sl, [sp, #128]	; 0x80
   2fecc:	str	r2, [sp, #132]	; 0x84
   2fed0:	str	r5, [sp, #156]	; 0x9c
   2fed4:	str	r4, [sp, #152]	; 0x98
   2fed8:	add	r9, r1, r4, lsl #5
   2fedc:	ldmib	r9, {sl, ip}
   2fee0:	ldr	lr, [r0, #-28]	; 0xffffffe4
   2fee4:	ldr	r5, [r0]
   2fee8:	str	r0, [sp, #116]	; 0x74
   2feec:	ldr	r4, [r9, #12]
   2fef0:	ldr	r6, [r9, #16]
   2fef4:	and	r0, lr, r7
   2fef8:	ldr	r7, [sp, #76]	; 0x4c
   2fefc:	and	r1, ip, r3
   2ff00:	str	r4, [sp, #108]	; 0x6c
   2ff04:	str	r6, [sp, #104]	; 0x68
   2ff08:	str	r5, [sp, #100]	; 0x64
   2ff0c:	str	r0, [sp, #68]	; 0x44
   2ff10:	str	r1, [sp, #72]	; 0x48
   2ff14:	and	r2, sl, r7
   2ff18:	orr	r0, r2, r0
   2ff1c:	str	r2, [sp, #64]	; 0x40
   2ff20:	orr	r0, r0, r1
   2ff24:	ldr	r1, [sp, #80]	; 0x50
   2ff28:	and	r2, r4, r1
   2ff2c:	ldr	r4, [sp, #140]	; 0x8c
   2ff30:	str	r2, [sp, #60]	; 0x3c
   2ff34:	orr	r0, r0, r2
   2ff38:	and	r2, r6, r8
   2ff3c:	ldr	r8, [sp, #84]	; 0x54
   2ff40:	str	r2, [sp, #56]	; 0x38
   2ff44:	orr	r0, r0, r2
   2ff48:	ldr	r2, [r9, #20]
   2ff4c:	and	r3, r2, r8
   2ff50:	str	r3, [sp, #52]	; 0x34
   2ff54:	orr	r0, r0, r3
   2ff58:	ldr	r3, [r9, #24]
   2ff5c:	and	r6, r3, r4
   2ff60:	str	r6, [sp, #48]	; 0x30
   2ff64:	orr	r0, r0, r6
   2ff68:	ldr	r6, [sp, #144]	; 0x90
   2ff6c:	and	r6, r5, r6
   2ff70:	orrs	r0, r0, r6
   2ff74:	beq	30128 <__assert_fail@plt+0x1e294>
   2ff78:	ldr	r0, [sp, #120]	; 0x78
   2ff7c:	ldr	r5, [sp, #92]	; 0x5c
   2ff80:	str	sl, [sp, #24]
   2ff84:	str	r6, [sp, #20]
   2ff88:	ldr	r6, [sp, #144]	; 0x90
   2ff8c:	str	ip, [sp, #28]
   2ff90:	str	r4, [sp, #140]	; 0x8c
   2ff94:	bic	r0, r0, lr
   2ff98:	str	r0, [sp, #136]	; 0x88
   2ff9c:	bic	r0, r7, sl
   2ffa0:	ldr	sl, [sp, #96]	; 0x60
   2ffa4:	str	r0, [sp, #128]	; 0x80
   2ffa8:	bic	r0, r5, ip
   2ffac:	str	r0, [sp, #124]	; 0x7c
   2ffb0:	ldr	r0, [sp, #108]	; 0x6c
   2ffb4:	bic	r0, r1, r0
   2ffb8:	str	r0, [sp, #132]	; 0x84
   2ffbc:	ldr	r0, [sp, #104]	; 0x68
   2ffc0:	bic	r0, sl, r0
   2ffc4:	str	r0, [sp, #44]	; 0x2c
   2ffc8:	bic	r0, r8, r2
   2ffcc:	bic	r2, r2, r8
   2ffd0:	str	r0, [sp, #40]	; 0x28
   2ffd4:	bic	r0, r4, r3
   2ffd8:	str	r0, [sp, #36]	; 0x24
   2ffdc:	ldr	r0, [sp, #100]	; 0x64
   2ffe0:	bic	r0, r6, r0
   2ffe4:	str	r0, [sp, #32]
   2ffe8:	ldr	r0, [sp, #28]
   2ffec:	bic	r0, r0, r5
   2fff0:	ldr	r5, [sp, #120]	; 0x78
   2fff4:	str	r0, [sp, #120]	; 0x78
   2fff8:	bic	ip, lr, r5
   2fffc:	ldr	r5, [sp, #24]
   30000:	bic	r7, r5, r7
   30004:	mov	r5, r6
   30008:	str	r7, [sp, #92]	; 0x5c
   3000c:	orr	r7, r7, ip
   30010:	orr	r4, r7, r0
   30014:	ldr	r0, [sp, #108]	; 0x6c
   30018:	bic	lr, r0, r1
   3001c:	ldr	r0, [sp, #104]	; 0x68
   30020:	orr	r4, r4, lr
   30024:	bic	r6, r0, sl
   30028:	ldr	r0, [sp, #140]	; 0x8c
   3002c:	orr	r4, r4, r6
   30030:	orr	r4, r4, r2
   30034:	bic	r3, r3, r0
   30038:	ldr	r0, [sp, #100]	; 0x64
   3003c:	orr	r4, r4, r3
   30040:	bic	r1, r0, r5
   30044:	orrs	r4, r4, r1
   30048:	beq	30154 <__assert_fail@plt+0x1e2c0>
   3004c:	ldr	r7, [sp, #156]	; 0x9c
   30050:	ldr	r5, [sp, #92]	; 0x5c
   30054:	add	r4, sp, #160	; 0xa0
   30058:	add	r0, r4, r7, lsl #5
   3005c:	str	ip, [r4, r7, lsl #5]
   30060:	mov	r8, r7
   30064:	str	r5, [r0, #4]
   30068:	ldr	r5, [sp, #120]	; 0x78
   3006c:	str	r5, [r0, #8]
   30070:	str	lr, [r0, #12]
   30074:	str	r6, [r0, #16]
   30078:	str	r2, [r0, #20]
   3007c:	str	r3, [r0, #24]
   30080:	str	r1, [r0, #28]
   30084:	ldr	r0, [sp, #116]	; 0x74
   30088:	ldr	r1, [sp, #68]	; 0x44
   3008c:	sub	lr, fp, #6144	; 0x1800
   30090:	str	r1, [r0, #-28]	; 0xffffffe4
   30094:	ldr	r1, [sp, #64]	; 0x40
   30098:	str	r1, [r9, #4]
   3009c:	ldr	r1, [sp, #72]	; 0x48
   300a0:	str	r1, [r9, #8]
   300a4:	ldr	r1, [sp, #60]	; 0x3c
   300a8:	str	r1, [r9, #12]
   300ac:	ldr	r1, [sp, #56]	; 0x38
   300b0:	str	r1, [r9, #16]
   300b4:	ldr	r1, [sp, #52]	; 0x34
   300b8:	str	r1, [r9, #20]
   300bc:	ldr	r1, [sp, #48]	; 0x30
   300c0:	str	r1, [r9, #24]
   300c4:	ldr	r1, [sp, #20]
   300c8:	str	r1, [r0]
   300cc:	add	r0, r7, r7, lsl #1
   300d0:	sub	r1, lr, #104	; 0x68
   300d4:	add	r6, r1, r0, lsl #2
   300d8:	ldr	r1, [sp, #148]	; 0x94
   300dc:	mov	r4, r6
   300e0:	ldr	r0, [r1, #4]
   300e4:	str	r0, [r4, #4]!
   300e8:	ldr	r5, [r1, #4]
   300ec:	cmp	r5, #1
   300f0:	blt	30164 <__assert_fail@plt+0x1e2d0>
   300f4:	str	r0, [r6]
   300f8:	lsl	r0, r0, #2
   300fc:	bl	36fb4 <__assert_fail@plt+0x25120>
   30100:	ldr	r7, [sp, #40]	; 0x28
   30104:	cmp	r0, #0
   30108:	str	r0, [r6, #8]
   3010c:	beq	3081c <__assert_fail@plt+0x1e988>
   30110:	ldr	r1, [sp, #148]	; 0x94
   30114:	lsl	r2, r5, #2
   30118:	ldr	r1, [r1, #8]
   3011c:	bl	11a8c <memcpy@plt>
   30120:	mov	r5, r8
   30124:	b	3017c <__assert_fail@plt+0x1e2e8>
   30128:	ldr	r6, [sp, #120]	; 0x78
   3012c:	ldr	r1, [sp, #92]	; 0x5c
   30130:	ldr	r0, [sp, #144]	; 0x90
   30134:	ldr	r5, [sp, #156]	; 0x9c
   30138:	ldr	r4, [sp, #152]	; 0x98
   3013c:	ldr	r9, [sp, #136]	; 0x88
   30140:	ldr	r2, [sp, #132]	; 0x84
   30144:	ldr	sl, [sp, #128]	; 0x80
   30148:	ldr	ip, [sp, #124]	; 0x7c
   3014c:	ldr	r8, [sp, #96]	; 0x60
   30150:	b	3020c <__assert_fail@plt+0x1e378>
   30154:	ldr	r5, [sp, #156]	; 0x9c
   30158:	ldr	r4, [sp, #152]	; 0x98
   3015c:	ldr	r7, [sp, #40]	; 0x28
   30160:	b	30184 <__assert_fail@plt+0x1e2f0>
   30164:	ldr	r7, [sp, #40]	; 0x28
   30168:	mov	r0, #0
   3016c:	mov	r5, r8
   30170:	str	r0, [r6]
   30174:	str	r0, [r6, #4]
   30178:	str	r0, [r6, #8]
   3017c:	ldr	r4, [sp, #152]	; 0x98
   30180:	add	r5, r5, #1
   30184:	ldr	r0, [sp, #88]	; 0x58
   30188:	ldr	r1, [sp, #112]	; 0x70
   3018c:	ldr	r0, [r0, #12]
   30190:	ldr	r1, [r0, r1, lsl #2]
   30194:	ldr	r0, [sp, #148]	; 0x94
   30198:	bl	2ad54 <__assert_fail@plt+0x18ec0>
   3019c:	cmp	r0, #0
   301a0:	beq	30760 <__assert_fail@plt+0x1e8cc>
   301a4:	ldr	r9, [sp, #136]	; 0x88
   301a8:	ldr	sl, [sp, #128]	; 0x80
   301ac:	ldr	ip, [sp, #124]	; 0x7c
   301b0:	ldr	r2, [sp, #132]	; 0x84
   301b4:	ldr	r6, [sp, #44]	; 0x2c
   301b8:	ldr	r1, [sp, #36]	; 0x24
   301bc:	ldr	lr, [sp, #32]
   301c0:	orr	r0, sl, r9
   301c4:	orr	r0, r0, ip
   301c8:	orr	r0, r0, r2
   301cc:	orr	r0, r0, r6
   301d0:	orr	r0, r0, r7
   301d4:	orr	r0, r0, r1
   301d8:	orrs	r0, r0, lr
   301dc:	mov	r0, #0
   301e0:	movweq	r0, #17
   301e4:	cmp	r0, #0
   301e8:	bne	3023c <__assert_fail@plt+0x1e3a8>
   301ec:	str	r1, [sp, #140]	; 0x8c
   301f0:	mov	r8, r6
   301f4:	mov	r0, lr
   301f8:	mov	r1, ip
   301fc:	mov	r6, r9
   30200:	str	r7, [sp, #84]	; 0x54
   30204:	str	r2, [sp, #80]	; 0x50
   30208:	str	sl, [sp, #76]	; 0x4c
   3020c:	ldr	r7, [sp, #148]	; 0x94
   30210:	str	r0, [sp, #144]	; 0x90
   30214:	ldr	r0, [sp, #116]	; 0x74
   30218:	add	r4, r4, #1
   3021c:	mov	r3, r1
   30220:	cmp	r4, r5
   30224:	add	r7, r7, #12
   30228:	add	r0, r0, #32
   3022c:	str	r7, [sp, #148]	; 0x94
   30230:	mov	r7, r6
   30234:	blt	2feb0 <__assert_fail@plt+0x1e01c>
   30238:	b	30258 <__assert_fail@plt+0x1e3c4>
   3023c:	cmp	r0, #17
   30240:	bne	30350 <__assert_fail@plt+0x1e4bc>
   30244:	mov	r8, r6
   30248:	mov	r0, r7
   3024c:	str	lr, [sp, #144]	; 0x90
   30250:	str	r1, [sp, #140]	; 0x8c
   30254:	str	r7, [sp, #84]	; 0x54
   30258:	ldr	r0, [sp, #84]	; 0x54
   3025c:	str	ip, [fp, #-1072]	; 0xfffffbd0
   30260:	str	sl, [fp, #-1076]	; 0xfffffbcc
   30264:	str	r2, [fp, #-1068]	; 0xfffffbd4
   30268:	str	r8, [fp, #-1064]	; 0xfffffbd8
   3026c:	str	r0, [fp, #-1060]	; 0xfffffbdc
   30270:	ldr	r0, [sp, #140]	; 0x8c
   30274:	str	r0, [fp, #-1056]	; 0xfffffbe0
   30278:	ldr	r0, [sp, #144]	; 0x90
   3027c:	str	r0, [fp, #-1052]	; 0xfffffbe4
   30280:	str	r9, [fp, #-1080]	; 0xfffffbc8
   30284:	ldr	sl, [sp, #16]
   30288:	cmp	r4, r5
   3028c:	bne	30314 <__assert_fail@plt+0x1e480>
   30290:	sub	lr, fp, #1024	; 0x400
   30294:	ldr	r1, [sp, #112]	; 0x70
   30298:	sub	r7, lr, #56	; 0x38
   3029c:	sub	lr, fp, #6144	; 0x1800
   302a0:	mov	r0, r7
   302a4:	mov	r9, r7
   302a8:	sub	r2, lr, #104	; 0x68
   302ac:	vld1.32	{d16-d17}, [r0]!
   302b0:	vld1.64	{d18-d19}, [r0]
   302b4:	add	r0, sp, #160	; 0xa0
   302b8:	add	r0, r0, r4, lsl #5
   302bc:	vst1.32	{d16-d17}, [r0]!
   302c0:	vst1.32	{d18-d19}, [r0]
   302c4:	ldr	r0, [sp, #88]	; 0x58
   302c8:	ldr	r0, [r0, #12]
   302cc:	ldr	r7, [r0, r1, lsl #2]
   302d0:	add	r0, r4, r4, lsl #1
   302d4:	mov	r1, #1
   302d8:	add	r5, r2, r0, lsl #2
   302dc:	str	r1, [r2, r0, lsl #2]
   302e0:	mov	r0, #4
   302e4:	mov	r6, r5
   302e8:	str	r1, [r6, #4]!
   302ec:	bl	36fb4 <__assert_fail@plt+0x25120>
   302f0:	cmp	r0, #0
   302f4:	str	r0, [r5, #8]
   302f8:	beq	30da8 <__assert_fail@plt+0x1ef14>
   302fc:	ldr	sl, [sp, #16]
   30300:	str	r7, [r0]
   30304:	mov	r0, r9
   30308:	add	r5, r4, #1
   3030c:	vst1.64	{d8-d9}, [r0]!
   30310:	vst1.64	{d8-d9}, [r0]
   30314:	ldr	r0, [sp, #88]	; 0x58
   30318:	ldr	r1, [sp, #112]	; 0x70
   3031c:	ldr	r0, [r0, #8]
   30320:	mov	r2, r1
   30324:	add	r2, r1, #1
   30328:	mov	r1, r2
   3032c:	str	r2, [sp, #112]	; 0x70
   30330:	cmp	r2, r0
   30334:	blt	2f5bc <__assert_fail@plt+0x1d728>
   30338:	b	303a8 <__assert_fail@plt+0x1e514>
   3033c:	cmp	r0, #17
   30340:	bne	30380 <__assert_fail@plt+0x1e4ec>
   30344:	mov	r7, r2
   30348:	str	r1, [sp, #140]	; 0x8c
   3034c:	b	2fe24 <__assert_fail@plt+0x1df90>
   30350:	str	ip, [fp, #-1072]	; 0xfffffbd0
   30354:	str	sl, [fp, #-1076]	; 0xfffffbcc
   30358:	str	r2, [fp, #-1068]	; 0xfffffbd4
   3035c:	str	r6, [fp, #-1064]	; 0xfffffbd8
   30360:	str	r7, [fp, #-1060]	; 0xfffffbdc
   30364:	str	r1, [fp, #-1056]	; 0xfffffbe0
   30368:	str	lr, [fp, #-1052]	; 0xfffffbe4
   3036c:	str	r9, [fp, #-1080]	; 0xfffffbc8
   30370:	ldr	sl, [sp, #16]
   30374:	cmp	r0, #0
   30378:	beq	30314 <__assert_fail@plt+0x1e480>
   3037c:	b	303a4 <__assert_fail@plt+0x1e510>
   30380:	ldr	r5, [sp, #156]	; 0x9c
   30384:	str	sl, [fp, #-1076]	; 0xfffffbcc
   30388:	str	r2, [fp, #-1080]	; 0xfffffbc8
   3038c:	str	r9, [fp, #-1072]	; 0xfffffbd0
   30390:	str	lr, [fp, #-1068]	; 0xfffffbd4
   30394:	str	r1, [fp, #-1064]	; 0xfffffbd8
   30398:	ldr	sl, [sp, #16]
   3039c:	cmp	r0, #0
   303a0:	beq	30314 <__assert_fail@plt+0x1e480>
   303a4:	b	303b0 <__assert_fail@plt+0x1e51c>
   303a8:	cmp	r5, #0
   303ac:	ble	30d60 <__assert_fail@plt+0x1eecc>
   303b0:	mov	r0, #0
   303b4:	str	r0, [fp, #-3136]	; 0xfffff3c0
   303b8:	add	r0, r5, #1
   303bc:	str	r0, [fp, #-3140]	; 0xfffff3bc
   303c0:	lsl	r0, r0, #2
   303c4:	bl	36fb4 <__assert_fail@plt+0x25120>
   303c8:	cmp	r0, #0
   303cc:	str	r0, [fp, #-3132]	; 0xfffff3c4
   303d0:	mov	r0, #0
   303d4:	movweq	r0, #12
   303d8:	str	r0, [fp, #-56]	; 0xffffffc8
   303dc:	beq	30dc4 <__assert_fail@plt+0x1ef30>
   303e0:	sub	lr, fp, #3072	; 0xc00
   303e4:	vmov.i32	q8, #0	; 0x00000000
   303e8:	mov	r1, #0
   303ec:	mov	r9, #0
   303f0:	mov	r6, #0
   303f4:	mov	r2, #0
   303f8:	mov	r7, #0
   303fc:	mov	r3, #0
   30400:	mov	r8, #0
   30404:	add	r4, sp, #160	; 0xa0
   30408:	str	r5, [sp, #156]	; 0x9c
   3040c:	sub	r0, lr, #104	; 0x68
   30410:	vst1.64	{d16-d17}, [r0]!
   30414:	vst1.64	{d16-d17}, [r0]
   30418:	mov	r0, #0
   3041c:	str	r0, [sp, #152]	; 0x98
   30420:	mov	r0, #0
   30424:	str	r0, [sp, #144]	; 0x90
   30428:	mov	r0, #0
   3042c:	str	r0, [sp, #148]	; 0x94
   30430:	mov	r0, #0
   30434:	str	r0, [sp, #124]	; 0x7c
   30438:	mov	r0, #0
   3043c:	sub	lr, fp, #6144	; 0x1800
   30440:	str	r2, [sp, #140]	; 0x8c
   30444:	str	r7, [sp, #136]	; 0x88
   30448:	str	r3, [sp, #132]	; 0x84
   3044c:	str	r0, [fp, #-3136]	; 0xfffff3c0
   30450:	add	r0, r8, r8, lsl #1
   30454:	sub	r2, lr, #104	; 0x68
   30458:	add	r2, r2, r0, lsl #2
   3045c:	mov	r7, r2
   30460:	ldr	r0, [r7, #4]!
   30464:	cmp	r0, #1
   30468:	blt	304cc <__assert_fail@plt+0x1e638>
   3046c:	str	r9, [sp, #128]	; 0x80
   30470:	add	r9, r2, #8
   30474:	mov	r5, #0
   30478:	ldr	r2, [r9]
   3047c:	ldr	r3, [sl, #12]
   30480:	ldr	r2, [r2, r5, lsl #2]
   30484:	ldr	r2, [r3, r2, lsl #2]
   30488:	cmn	r2, #1
   3048c:	beq	304b8 <__assert_fail@plt+0x1e624>
   30490:	ldr	r0, [sl, #24]
   30494:	add	r1, r2, r2, lsl #1
   30498:	sub	lr, fp, #3072	; 0xc00
   3049c:	add	r1, r0, r1, lsl #2
   304a0:	sub	r0, lr, #68	; 0x44
   304a4:	bl	2abac <__assert_fail@plt+0x18d18>
   304a8:	cmp	r0, #0
   304ac:	bne	306c8 <__assert_fail@plt+0x1e834>
   304b0:	ldr	r0, [r7]
   304b4:	mov	r1, #0
   304b8:	add	r5, r5, #1
   304bc:	cmp	r5, r0
   304c0:	blt	30478 <__assert_fail@plt+0x1e5e4>
   304c4:	ldr	r9, [sp, #128]	; 0x80
   304c8:	str	r1, [fp, #-56]	; 0xffffffc8
   304cc:	sub	lr, fp, #3072	; 0xc00
   304d0:	sub	r0, fp, #56	; 0x38
   304d4:	mov	r1, sl
   304d8:	mov	r3, #0
   304dc:	sub	r2, lr, #68	; 0x44
   304e0:	bl	2ae9c <__assert_fail@plt+0x19008>
   304e4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   304e8:	mov	r7, r0
   304ec:	sub	lr, fp, #1024	; 0x400
   304f0:	sub	r0, lr, #56	; 0x38
   304f4:	cmp	r7, #0
   304f8:	str	r7, [r0, r8, lsl #2]
   304fc:	bne	30508 <__assert_fail@plt+0x1e674>
   30500:	cmp	r1, #0
   30504:	bne	307a8 <__assert_fail@plt+0x1e914>
   30508:	ldrsb	r0, [r7, #52]	; 0x34
   3050c:	cmn	r0, #1
   30510:	ble	30530 <__assert_fail@plt+0x1e69c>
   30514:	sub	lr, fp, #3072	; 0xc00
   30518:	sub	r0, lr, #56	; 0x38
   3051c:	sub	lr, fp, #2048	; 0x800
   30520:	str	r7, [r0, r8, lsl #2]
   30524:	sub	r0, lr, #56	; 0x38
   30528:	str	r7, [r0, r8, lsl #2]
   3052c:	b	305c4 <__assert_fail@plt+0x1e730>
   30530:	sub	lr, fp, #3072	; 0xc00
   30534:	sub	r0, fp, #56	; 0x38
   30538:	mov	r1, sl
   3053c:	mov	r3, #1
   30540:	sub	r2, lr, #68	; 0x44
   30544:	bl	2ae9c <__assert_fail@plt+0x19008>
   30548:	sub	lr, fp, #2048	; 0x800
   3054c:	cmp	r0, #0
   30550:	sub	r1, lr, #56	; 0x38
   30554:	str	r0, [r1, r8, lsl #2]
   30558:	bne	30568 <__assert_fail@plt+0x1e6d4>
   3055c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   30560:	cmp	r1, #0
   30564:	bne	307a8 <__assert_fail@plt+0x1e914>
   30568:	cmp	r7, r0
   3056c:	beq	3058c <__assert_fail@plt+0x1e6f8>
   30570:	ldr	r0, [sl, #92]	; 0x5c
   30574:	ldr	r1, [sp, #124]	; 0x7c
   30578:	cmp	r0, #1
   3057c:	mov	r0, #0
   30580:	movwgt	r0, #1
   30584:	orr	r1, r1, r0
   30588:	str	r1, [sp, #124]	; 0x7c
   3058c:	sub	lr, fp, #3072	; 0xc00
   30590:	sub	r0, fp, #56	; 0x38
   30594:	mov	r1, sl
   30598:	mov	r3, #2
   3059c:	sub	r2, lr, #68	; 0x44
   305a0:	bl	2ae9c <__assert_fail@plt+0x19008>
   305a4:	sub	lr, fp, #3072	; 0xc00
   305a8:	cmp	r0, #0
   305ac:	sub	r1, lr, #56	; 0x38
   305b0:	str	r0, [r1, r8, lsl #2]
   305b4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   305b8:	bne	305c4 <__assert_fail@plt+0x1e730>
   305bc:	cmp	r1, #0
   305c0:	bne	307a8 <__assert_fail@plt+0x1e914>
   305c4:	ldr	r0, [r4, r8, lsl #5]
   305c8:	ldr	r2, [sp, #148]	; 0x94
   305cc:	ldr	sl, [sp, #16]
   305d0:	orr	r2, r2, r0
   305d4:	add	r0, r4, r8, lsl #5
   305d8:	add	r8, r8, #1
   305dc:	str	r2, [sp, #148]	; 0x94
   305e0:	ldr	r2, [r0, #24]
   305e4:	ldr	ip, [r0, #4]
   305e8:	ldr	r3, [r0, #8]
   305ec:	ldr	r7, [r0, #12]
   305f0:	ldr	r5, [r0, #16]
   305f4:	ldr	r4, [r0, #20]
   305f8:	ldr	r0, [r0, #28]
   305fc:	orr	r9, r9, r0
   30600:	ldr	r0, [sp, #152]	; 0x98
   30604:	orr	r6, r6, r2
   30608:	ldr	r2, [sp, #140]	; 0x8c
   3060c:	orr	r0, r0, r5
   30610:	orr	r2, r2, r4
   30614:	add	r4, sp, #160	; 0xa0
   30618:	str	r0, [sp, #152]	; 0x98
   3061c:	ldr	r0, [sp, #136]	; 0x88
   30620:	orr	r0, r0, r7
   30624:	mov	r7, r0
   30628:	ldr	r0, [sp, #132]	; 0x84
   3062c:	orr	r0, r0, r3
   30630:	mov	r3, r0
   30634:	ldr	r0, [sp, #144]	; 0x90
   30638:	orr	r0, r0, ip
   3063c:	str	r0, [sp, #144]	; 0x90
   30640:	ldr	r0, [sp, #156]	; 0x9c
   30644:	cmp	r8, r0
   30648:	blt	30438 <__assert_fail@plt+0x1e5a4>
   3064c:	ldr	r0, [sp, #144]	; 0x90
   30650:	ldr	r8, [sp, #124]	; 0x7c
   30654:	str	r0, [fp, #-3172]	; 0xfffff39c
   30658:	ldr	r0, [sp, #148]	; 0x94
   3065c:	tst	r8, #1
   30660:	str	r0, [fp, #-3176]	; 0xfffff398
   30664:	ldr	r0, [sp, #152]	; 0x98
   30668:	str	r3, [fp, #-3168]	; 0xfffff3a0
   3066c:	str	r7, [fp, #-3164]	; 0xfffff3a4
   30670:	str	r0, [fp, #-3160]	; 0xfffff3a8
   30674:	mov	r0, #4
   30678:	str	r2, [fp, #-3156]	; 0xfffff3ac
   3067c:	str	r6, [fp, #-3152]	; 0xfffff3b0
   30680:	str	r9, [fp, #-3148]	; 0xfffff3b4
   30684:	bne	30dd0 <__assert_fail@plt+0x1ef3c>
   30688:	mov	r1, #256	; 0x100
   3068c:	bl	36f60 <__assert_fail@plt+0x250cc>
   30690:	ldr	r1, [sp, #88]	; 0x58
   30694:	ldr	r5, [sp, #156]	; 0x9c
   30698:	cmp	r0, #0
   3069c:	str	r0, [r1, #44]	; 0x2c
   306a0:	beq	3070c <__assert_fail@plt+0x1e878>
   306a4:	ldr	ip, [fp, #-3176]	; 0xfffff398
   306a8:	mov	r9, r5
   306ac:	cmp	ip, #0
   306b0:	beq	308c4 <__assert_fail@plt+0x1ea30>
   306b4:	mov	r2, #0
   306b8:	mov	r3, #1
   306bc:	mov	r1, ip
   306c0:	mov	r7, #0
   306c4:	b	308a4 <__assert_fail@plt+0x1ea10>
   306c8:	ldr	r1, [sp, #144]	; 0x90
   306cc:	str	r0, [fp, #-56]	; 0xffffffc8
   306d0:	str	r1, [fp, #-3172]	; 0xfffff39c
   306d4:	ldr	r1, [sp, #148]	; 0x94
   306d8:	str	r1, [fp, #-3176]	; 0xfffff398
   306dc:	ldr	r1, [sp, #132]	; 0x84
   306e0:	str	r1, [fp, #-3168]	; 0xfffff3a0
   306e4:	ldr	r1, [sp, #136]	; 0x88
   306e8:	str	r1, [fp, #-3164]	; 0xfffff3a4
   306ec:	ldr	r1, [sp, #152]	; 0x98
   306f0:	str	r1, [fp, #-3160]	; 0xfffff3a8
   306f4:	ldr	r1, [sp, #140]	; 0x8c
   306f8:	str	r1, [fp, #-3156]	; 0xfffff3ac
   306fc:	ldr	r1, [sp, #128]	; 0x80
   30700:	str	r6, [fp, #-3152]	; 0xfffff3b0
   30704:	str	r1, [fp, #-3148]	; 0xfffff3b4
   30708:	ldr	r5, [sp, #156]	; 0x9c
   3070c:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   30710:	bl	17b10 <__assert_fail@plt+0x5c7c>
   30714:	cmp	r5, #1
   30718:	blt	3074c <__assert_fail@plt+0x1e8b8>
   3071c:	sub	lr, fp, #6144	; 0x1800
   30720:	sub	r0, lr, #104	; 0x68
   30724:	add	r4, r0, #8
   30728:	ldr	r0, [r4], #12
   3072c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   30730:	subs	r5, r5, #1
   30734:	bne	30728 <__assert_fail@plt+0x1e894>
   30738:	mov	r0, #0
   3073c:	sub	sp, fp, #48	; 0x30
   30740:	vpop	{d8-d9}
   30744:	add	sp, sp, #4
   30748:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3074c:	mov	r0, #0
   30750:	sub	sp, fp, #48	; 0x30
   30754:	vpop	{d8-d9}
   30758:	add	sp, sp, #4
   3075c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30760:	ldr	r0, [sp, #124]	; 0x7c
   30764:	str	r0, [fp, #-1072]	; 0xfffffbd0
   30768:	ldr	r0, [sp, #128]	; 0x80
   3076c:	str	r0, [fp, #-1076]	; 0xfffffbcc
   30770:	ldr	r0, [sp, #132]	; 0x84
   30774:	str	r0, [fp, #-1068]	; 0xfffffbd4
   30778:	ldr	r0, [sp, #44]	; 0x2c
   3077c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   30780:	ldr	r0, [sp, #36]	; 0x24
   30784:	str	r7, [fp, #-1060]	; 0xfffffbdc
   30788:	str	r0, [fp, #-1056]	; 0xfffffbe0
   3078c:	ldr	r0, [sp, #32]
   30790:	str	r0, [fp, #-1052]	; 0xfffffbe4
   30794:	ldr	r0, [sp, #136]	; 0x88
   30798:	str	r0, [fp, #-1080]	; 0xfffffbc8
   3079c:	cmp	r5, #1
   307a0:	bge	30d40 <__assert_fail@plt+0x1eeac>
   307a4:	b	30d5c <__assert_fail@plt+0x1eec8>
   307a8:	ldr	r0, [sp, #144]	; 0x90
   307ac:	str	r0, [fp, #-3172]	; 0xfffff39c
   307b0:	ldr	r0, [sp, #148]	; 0x94
   307b4:	str	r0, [fp, #-3176]	; 0xfffff398
   307b8:	ldr	r0, [sp, #132]	; 0x84
   307bc:	str	r0, [fp, #-3168]	; 0xfffff3a0
   307c0:	ldr	r0, [sp, #136]	; 0x88
   307c4:	str	r0, [fp, #-3164]	; 0xfffff3a4
   307c8:	ldr	r0, [sp, #152]	; 0x98
   307cc:	str	r0, [fp, #-3160]	; 0xfffff3a8
   307d0:	ldr	r0, [sp, #140]	; 0x8c
   307d4:	str	r0, [fp, #-3156]	; 0xfffff3ac
   307d8:	str	r6, [fp, #-3152]	; 0xfffff3b0
   307dc:	str	r9, [fp, #-3148]	; 0xfffff3b4
   307e0:	b	30708 <__assert_fail@plt+0x1e874>
   307e4:	ldr	r0, [sp, #48]	; 0x30
   307e8:	ldr	r5, [sp, #156]	; 0x9c
   307ec:	str	r0, [fp, #-1076]	; 0xfffffbcc
   307f0:	ldr	r0, [sp, #64]	; 0x40
   307f4:	str	r0, [fp, #-1080]	; 0xfffffbc8
   307f8:	ldr	r0, [sp, #60]	; 0x3c
   307fc:	str	r0, [fp, #-1072]	; 0xfffffbd0
   30800:	ldr	r0, [sp, #56]	; 0x38
   30804:	str	r0, [fp, #-1068]	; 0xfffffbd4
   30808:	ldr	r0, [sp, #52]	; 0x34
   3080c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   30810:	cmp	r5, #1
   30814:	bge	30d40 <__assert_fail@plt+0x1eeac>
   30818:	b	30d5c <__assert_fail@plt+0x1eec8>
   3081c:	ldr	r0, [sp, #124]	; 0x7c
   30820:	mov	r5, r8
   30824:	str	r0, [fp, #-1072]	; 0xfffffbd0
   30828:	ldr	r0, [sp, #128]	; 0x80
   3082c:	str	r0, [fp, #-1076]	; 0xfffffbcc
   30830:	ldr	r0, [sp, #132]	; 0x84
   30834:	str	r0, [fp, #-1068]	; 0xfffffbd4
   30838:	ldr	r0, [sp, #44]	; 0x2c
   3083c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   30840:	ldr	r0, [sp, #36]	; 0x24
   30844:	str	r7, [fp, #-1060]	; 0xfffffbdc
   30848:	str	r0, [fp, #-1056]	; 0xfffffbe0
   3084c:	ldr	r0, [sp, #32]
   30850:	str	r0, [fp, #-1052]	; 0xfffffbe4
   30854:	ldr	r0, [sp, #136]	; 0x88
   30858:	str	r0, [fp, #-1080]	; 0xfffffbc8
   3085c:	b	30d20 <__assert_fail@plt+0x1ee8c>
   30860:	mov	lr, #0
   30864:	ldr	r5, [r4, lr, lsl #3]
   30868:	add	lr, lr, #4
   3086c:	tst	r5, r3
   30870:	beq	30864 <__assert_fail@plt+0x1e9d0>
   30874:	ldr	r5, [sp]
   30878:	sub	r6, fp, #1024	; 0x400
   3087c:	sub	r6, r6, #56	; 0x38
   30880:	ldr	r5, [r5]
   30884:	tst	r5, r3
   30888:	sub	r5, fp, #2048	; 0x800
   3088c:	sub	r5, r5, #56	; 0x38
   30890:	moveq	r5, r6
   30894:	add	r6, r5, lr
   30898:	ldr	r6, [r6, #-4]
   3089c:	str	r6, [r0, r7, lsl #2]
   308a0:	b	308ac <__assert_fail@plt+0x1ea18>
   308a4:	tst	r1, #1
   308a8:	bne	30860 <__assert_fail@plt+0x1e9cc>
   308ac:	lsr	r6, r1, #1
   308b0:	cmp	r2, r1, lsr #1
   308b4:	add	r7, r7, #1
   308b8:	lsl	r3, r3, #1
   308bc:	mov	r1, r6
   308c0:	bne	308a4 <__assert_fail@plt+0x1ea10>
   308c4:	ldr	r2, [fp, #-3172]	; 0xfffff39c
   308c8:	cmp	r2, #0
   308cc:	beq	3094c <__assert_fail@plt+0x1eab8>
   308d0:	add	lr, r4, #4
   308d4:	mov	r7, #32
   308d8:	mov	r6, #1
   308dc:	mov	r5, #0
   308e0:	b	3092c <__assert_fail@plt+0x1ea98>
   308e4:	mov	r1, #0
   308e8:	ldr	r4, [lr, r1, lsl #3]
   308ec:	add	r1, r1, #4
   308f0:	tst	r4, r6
   308f4:	beq	308e8 <__assert_fail@plt+0x1ea54>
   308f8:	ldr	r3, [sp, #16]
   308fc:	ldr	r4, [r3, #100]	; 0x64
   30900:	sub	r3, fp, #2048	; 0x800
   30904:	tst	r4, r6
   30908:	sub	r4, r3, #56	; 0x38
   3090c:	sub	r3, fp, #1024	; 0x400
   30910:	sub	r3, r3, #56	; 0x38
   30914:	moveq	r4, r3
   30918:	add	r1, r4, r1
   3091c:	add	r4, sp, #160	; 0xa0
   30920:	ldr	r1, [r1, #-4]
   30924:	str	r1, [r0, r7, lsl #2]
   30928:	b	30934 <__assert_fail@plt+0x1eaa0>
   3092c:	tst	r2, #1
   30930:	bne	308e4 <__assert_fail@plt+0x1ea50>
   30934:	lsr	r1, r2, #1
   30938:	cmp	r5, r2, lsr #1
   3093c:	add	r7, r7, #1
   30940:	lsl	r6, r6, #1
   30944:	mov	r2, r1
   30948:	bne	3092c <__assert_fail@plt+0x1ea98>
   3094c:	ldr	r2, [fp, #-3168]	; 0xfffff3a0
   30950:	cmp	r2, #0
   30954:	beq	309d4 <__assert_fail@plt+0x1eb40>
   30958:	add	lr, r4, #8
   3095c:	mov	r7, #64	; 0x40
   30960:	mov	r6, #1
   30964:	mov	r5, #0
   30968:	b	309b4 <__assert_fail@plt+0x1eb20>
   3096c:	mov	r1, #0
   30970:	ldr	r4, [lr, r1, lsl #3]
   30974:	add	r1, r1, #4
   30978:	tst	r4, r6
   3097c:	beq	30970 <__assert_fail@plt+0x1eadc>
   30980:	ldr	r3, [sp, #16]
   30984:	ldr	r4, [r3, #104]	; 0x68
   30988:	sub	r3, fp, #2048	; 0x800
   3098c:	tst	r4, r6
   30990:	sub	r4, r3, #56	; 0x38
   30994:	sub	r3, fp, #1024	; 0x400
   30998:	sub	r3, r3, #56	; 0x38
   3099c:	moveq	r4, r3
   309a0:	add	r1, r4, r1
   309a4:	add	r4, sp, #160	; 0xa0
   309a8:	ldr	r1, [r1, #-4]
   309ac:	str	r1, [r0, r7, lsl #2]
   309b0:	b	309bc <__assert_fail@plt+0x1eb28>
   309b4:	tst	r2, #1
   309b8:	bne	3096c <__assert_fail@plt+0x1ead8>
   309bc:	lsr	r1, r2, #1
   309c0:	cmp	r5, r2, lsr #1
   309c4:	add	r7, r7, #1
   309c8:	lsl	r6, r6, #1
   309cc:	mov	r2, r1
   309d0:	bne	309b4 <__assert_fail@plt+0x1eb20>
   309d4:	ldr	r2, [fp, #-3164]	; 0xfffff3a4
   309d8:	cmp	r2, #0
   309dc:	beq	30a5c <__assert_fail@plt+0x1ebc8>
   309e0:	add	lr, r4, #12
   309e4:	mov	r7, #96	; 0x60
   309e8:	mov	r6, #1
   309ec:	mov	r5, #0
   309f0:	b	30a3c <__assert_fail@plt+0x1eba8>
   309f4:	mov	r1, #0
   309f8:	ldr	r4, [lr, r1, lsl #3]
   309fc:	add	r1, r1, #4
   30a00:	tst	r4, r6
   30a04:	beq	309f8 <__assert_fail@plt+0x1eb64>
   30a08:	ldr	r3, [sp, #16]
   30a0c:	ldr	r4, [r3, #108]	; 0x6c
   30a10:	sub	r3, fp, #2048	; 0x800
   30a14:	tst	r4, r6
   30a18:	sub	r4, r3, #56	; 0x38
   30a1c:	sub	r3, fp, #1024	; 0x400
   30a20:	sub	r3, r3, #56	; 0x38
   30a24:	moveq	r4, r3
   30a28:	add	r1, r4, r1
   30a2c:	add	r4, sp, #160	; 0xa0
   30a30:	ldr	r1, [r1, #-4]
   30a34:	str	r1, [r0, r7, lsl #2]
   30a38:	b	30a44 <__assert_fail@plt+0x1ebb0>
   30a3c:	tst	r2, #1
   30a40:	bne	309f4 <__assert_fail@plt+0x1eb60>
   30a44:	lsr	r1, r2, #1
   30a48:	cmp	r5, r2, lsr #1
   30a4c:	add	r7, r7, #1
   30a50:	lsl	r6, r6, #1
   30a54:	mov	r2, r1
   30a58:	bne	30a3c <__assert_fail@plt+0x1eba8>
   30a5c:	ldr	r2, [fp, #-3160]	; 0xfffff3a8
   30a60:	cmp	r2, #0
   30a64:	beq	30ae4 <__assert_fail@plt+0x1ec50>
   30a68:	add	lr, r4, #16
   30a6c:	mov	r7, #128	; 0x80
   30a70:	mov	r6, #1
   30a74:	mov	r5, #0
   30a78:	b	30ac4 <__assert_fail@plt+0x1ec30>
   30a7c:	mov	r1, #0
   30a80:	ldr	r4, [lr, r1, lsl #3]
   30a84:	add	r1, r1, #4
   30a88:	tst	r4, r6
   30a8c:	beq	30a80 <__assert_fail@plt+0x1ebec>
   30a90:	ldr	r3, [sp, #4]
   30a94:	ldr	r4, [r3]
   30a98:	sub	r3, fp, #2048	; 0x800
   30a9c:	tst	r4, r6
   30aa0:	sub	r4, r3, #56	; 0x38
   30aa4:	sub	r3, fp, #1024	; 0x400
   30aa8:	sub	r3, r3, #56	; 0x38
   30aac:	moveq	r4, r3
   30ab0:	add	r1, r4, r1
   30ab4:	add	r4, sp, #160	; 0xa0
   30ab8:	ldr	r1, [r1, #-4]
   30abc:	str	r1, [r0, r7, lsl #2]
   30ac0:	b	30acc <__assert_fail@plt+0x1ec38>
   30ac4:	tst	r2, #1
   30ac8:	bne	30a7c <__assert_fail@plt+0x1ebe8>
   30acc:	lsr	r1, r2, #1
   30ad0:	cmp	r5, r2, lsr #1
   30ad4:	add	r7, r7, #1
   30ad8:	lsl	r6, r6, #1
   30adc:	mov	r2, r1
   30ae0:	bne	30ac4 <__assert_fail@plt+0x1ec30>
   30ae4:	ldr	r2, [fp, #-3156]	; 0xfffff3ac
   30ae8:	cmp	r2, #0
   30aec:	beq	30b6c <__assert_fail@plt+0x1ecd8>
   30af0:	add	lr, r4, #20
   30af4:	mov	r7, #160	; 0xa0
   30af8:	mov	r6, #1
   30afc:	mov	r5, #0
   30b00:	b	30b4c <__assert_fail@plt+0x1ecb8>
   30b04:	mov	r1, #0
   30b08:	ldr	r4, [lr, r1, lsl #3]
   30b0c:	add	r1, r1, #4
   30b10:	tst	r4, r6
   30b14:	beq	30b08 <__assert_fail@plt+0x1ec74>
   30b18:	ldr	r3, [sp, #16]
   30b1c:	ldr	r4, [r3, #116]	; 0x74
   30b20:	sub	r3, fp, #2048	; 0x800
   30b24:	tst	r4, r6
   30b28:	sub	r4, r3, #56	; 0x38
   30b2c:	sub	r3, fp, #1024	; 0x400
   30b30:	sub	r3, r3, #56	; 0x38
   30b34:	moveq	r4, r3
   30b38:	add	r1, r4, r1
   30b3c:	add	r4, sp, #160	; 0xa0
   30b40:	ldr	r1, [r1, #-4]
   30b44:	str	r1, [r0, r7, lsl #2]
   30b48:	b	30b54 <__assert_fail@plt+0x1ecc0>
   30b4c:	tst	r2, #1
   30b50:	bne	30b04 <__assert_fail@plt+0x1ec70>
   30b54:	lsr	r1, r2, #1
   30b58:	cmp	r5, r2, lsr #1
   30b5c:	add	r7, r7, #1
   30b60:	lsl	r6, r6, #1
   30b64:	mov	r2, r1
   30b68:	bne	30b4c <__assert_fail@plt+0x1ecb8>
   30b6c:	ldr	r2, [fp, #-3152]	; 0xfffff3b0
   30b70:	cmp	r2, #0
   30b74:	beq	30bf4 <__assert_fail@plt+0x1ed60>
   30b78:	add	lr, r4, #24
   30b7c:	mov	r7, #192	; 0xc0
   30b80:	mov	r6, #1
   30b84:	mov	r5, #0
   30b88:	b	30bd4 <__assert_fail@plt+0x1ed40>
   30b8c:	mov	r1, #0
   30b90:	ldr	r4, [lr, r1, lsl #3]
   30b94:	add	r1, r1, #4
   30b98:	tst	r4, r6
   30b9c:	beq	30b90 <__assert_fail@plt+0x1ecfc>
   30ba0:	ldr	r3, [sp, #16]
   30ba4:	ldr	r4, [r3, #120]	; 0x78
   30ba8:	sub	r3, fp, #2048	; 0x800
   30bac:	tst	r4, r6
   30bb0:	sub	r4, r3, #56	; 0x38
   30bb4:	sub	r3, fp, #1024	; 0x400
   30bb8:	sub	r3, r3, #56	; 0x38
   30bbc:	moveq	r4, r3
   30bc0:	add	r1, r4, r1
   30bc4:	add	r4, sp, #160	; 0xa0
   30bc8:	ldr	r1, [r1, #-4]
   30bcc:	str	r1, [r0, r7, lsl #2]
   30bd0:	b	30bdc <__assert_fail@plt+0x1ed48>
   30bd4:	tst	r2, #1
   30bd8:	bne	30b8c <__assert_fail@plt+0x1ecf8>
   30bdc:	lsr	r1, r2, #1
   30be0:	cmp	r5, r2, lsr #1
   30be4:	add	r7, r7, #1
   30be8:	lsl	r6, r6, #1
   30bec:	mov	r2, r1
   30bf0:	bne	30bd4 <__assert_fail@plt+0x1ed40>
   30bf4:	ldr	r2, [fp, #-3148]	; 0xfffff3b4
   30bf8:	cmp	r2, #0
   30bfc:	beq	30c78 <__assert_fail@plt+0x1ede4>
   30c00:	mov	r3, #224	; 0xe0
   30c04:	mov	r7, #1
   30c08:	mov	r6, #0
   30c0c:	b	30c58 <__assert_fail@plt+0x1edc4>
   30c10:	ldr	r1, [sp, #12]
   30c14:	mov	lr, #0
   30c18:	ldr	r5, [r1, lr, lsl #3]
   30c1c:	add	lr, lr, #4
   30c20:	tst	r5, r7
   30c24:	beq	30c18 <__assert_fail@plt+0x1ed84>
   30c28:	ldr	r1, [sp, #16]
   30c2c:	ldr	r5, [r1, #124]	; 0x7c
   30c30:	sub	r1, fp, #2048	; 0x800
   30c34:	tst	r5, r7
   30c38:	sub	r5, r1, #56	; 0x38
   30c3c:	sub	r1, fp, #1024	; 0x400
   30c40:	sub	r1, r1, #56	; 0x38
   30c44:	moveq	r5, r1
   30c48:	add	r1, r5, lr
   30c4c:	ldr	r1, [r1, #-4]
   30c50:	str	r1, [r0, r3, lsl #2]
   30c54:	b	30c60 <__assert_fail@plt+0x1edcc>
   30c58:	tst	r2, #1
   30c5c:	bne	30c10 <__assert_fail@plt+0x1ed7c>
   30c60:	lsr	r1, r2, #1
   30c64:	cmp	r6, r2, lsr #1
   30c68:	add	r3, r3, #1
   30c6c:	lsl	r7, r7, #1
   30c70:	mov	r2, r1
   30c74:	bne	30c58 <__assert_fail@plt+0x1edc4>
   30c78:	tst	ip, #1024	; 0x400
   30c7c:	beq	30cbc <__assert_fail@plt+0x1ee28>
   30c80:	mov	r1, #0
   30c84:	add	r2, r4, r1, lsl #5
   30c88:	ldrb	r2, [r2, #1]
   30c8c:	tst	r2, #4
   30c90:	bne	30ca4 <__assert_fail@plt+0x1ee10>
   30c94:	add	r1, r1, #1
   30c98:	cmp	r1, r9
   30c9c:	blt	30c84 <__assert_fail@plt+0x1edf0>
   30ca0:	b	30cbc <__assert_fail@plt+0x1ee28>
   30ca4:	sub	lr, fp, #3072	; 0xc00
   30ca8:	tst	r8, #1
   30cac:	sub	r2, lr, #56	; 0x38
   30cb0:	ldr	r1, [r2, r1, lsl #2]
   30cb4:	str	r1, [r0, #40]	; 0x28
   30cb8:	strne	r1, [r0, #1064]	; 0x428
   30cbc:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   30cc0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   30cc4:	sub	lr, fp, #6144	; 0x1800
   30cc8:	sub	r0, lr, #104	; 0x68
   30ccc:	add	r4, r0, #8
   30cd0:	ldr	r0, [r4], #12
   30cd4:	bl	17b10 <__assert_fail@plt+0x5c7c>
   30cd8:	subs	r9, r9, #1
   30cdc:	bne	30cd0 <__assert_fail@plt+0x1ee3c>
   30ce0:	mov	r0, #1
   30ce4:	sub	sp, fp, #48	; 0x30
   30ce8:	vpop	{d8-d9}
   30cec:	add	sp, sp, #4
   30cf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30cf4:	ldr	r0, [sp, #48]	; 0x30
   30cf8:	ldr	r5, [sp, #156]	; 0x9c
   30cfc:	str	r0, [fp, #-1076]	; 0xfffffbcc
   30d00:	ldr	r0, [sp, #64]	; 0x40
   30d04:	str	r0, [fp, #-1080]	; 0xfffffbc8
   30d08:	ldr	r0, [sp, #60]	; 0x3c
   30d0c:	str	r0, [fp, #-1072]	; 0xfffffbd0
   30d10:	ldr	r0, [sp, #56]	; 0x38
   30d14:	str	r0, [fp, #-1068]	; 0xfffffbd4
   30d18:	ldr	r0, [sp, #52]	; 0x34
   30d1c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   30d20:	sub	lr, fp, #6144	; 0x1800
   30d24:	mov	r0, #0
   30d28:	add	r1, r5, r5, lsl #1
   30d2c:	sub	r2, lr, #104	; 0x68
   30d30:	str	r0, [r4]
   30d34:	str	r0, [r2, r1, lsl #2]
   30d38:	cmp	r5, #1
   30d3c:	blt	30d5c <__assert_fail@plt+0x1eec8>
   30d40:	sub	lr, fp, #6144	; 0x1800
   30d44:	sub	r0, lr, #104	; 0x68
   30d48:	add	r4, r0, #8
   30d4c:	ldr	r0, [r4], #12
   30d50:	bl	17b10 <__assert_fail@plt+0x5c7c>
   30d54:	subs	r5, r5, #1
   30d58:	bne	30d4c <__assert_fail@plt+0x1eeb8>
   30d5c:	mvn	r5, #0
   30d60:	mov	r0, #0
   30d64:	cmp	r5, #0
   30d68:	beq	30d7c <__assert_fail@plt+0x1eee8>
   30d6c:	sub	sp, fp, #48	; 0x30
   30d70:	vpop	{d8-d9}
   30d74:	add	sp, sp, #4
   30d78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30d7c:	mov	r0, #4
   30d80:	mov	r1, #256	; 0x100
   30d84:	bl	36f60 <__assert_fail@plt+0x250cc>
   30d88:	ldr	r1, [sp, #88]	; 0x58
   30d8c:	cmp	r0, #0
   30d90:	str	r0, [r1, #44]	; 0x2c
   30d94:	movwne	r0, #1
   30d98:	sub	sp, fp, #48	; 0x30
   30d9c:	vpop	{d8-d9}
   30da0:	add	sp, sp, #4
   30da4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30da8:	mov	r0, #0
   30dac:	str	r0, [r6]
   30db0:	str	r0, [r5]
   30db4:	mov	r5, r4
   30db8:	cmp	r5, #1
   30dbc:	bge	30d40 <__assert_fail@plt+0x1eeac>
   30dc0:	b	30d5c <__assert_fail@plt+0x1eec8>
   30dc4:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   30dc8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   30dcc:	b	3071c <__assert_fail@plt+0x1e888>
   30dd0:	mov	r1, #512	; 0x200
   30dd4:	bl	36f60 <__assert_fail@plt+0x250cc>
   30dd8:	ldr	r1, [sp, #88]	; 0x58
   30ddc:	ldr	r5, [sp, #156]	; 0x9c
   30de0:	cmp	r0, #0
   30de4:	str	r0, [r1, #48]	; 0x30
   30de8:	beq	3070c <__assert_fail@plt+0x1e878>
   30dec:	ldr	ip, [fp, #-3176]	; 0xfffff398
   30df0:	mov	r9, r5
   30df4:	cmp	ip, #0
   30df8:	beq	30e84 <__assert_fail@plt+0x1eff0>
   30dfc:	sub	lr, fp, #1024	; 0x400
   30e00:	mov	r7, #0
   30e04:	mov	r6, #1
   30e08:	mov	r5, #0
   30e0c:	sub	r1, lr, #56	; 0x38
   30e10:	sub	lr, fp, #2048	; 0x800
   30e14:	sub	r4, r1, #4
   30e18:	sub	r1, lr, #56	; 0x38
   30e1c:	sub	lr, r1, #4
   30e20:	mov	r1, ip
   30e24:	b	30e64 <__assert_fail@plt+0x1efd0>
   30e28:	add	r3, sp, #160	; 0xa0
   30e2c:	mov	r9, r4
   30e30:	mov	r8, lr
   30e34:	ldr	r2, [r3], #32
   30e38:	add	r9, r9, #4
   30e3c:	add	r8, r8, #4
   30e40:	tst	r2, r6
   30e44:	beq	30e34 <__assert_fail@plt+0x1efa0>
   30e48:	ldr	r2, [r9]
   30e4c:	mov	r3, r0
   30e50:	str	r2, [r3, r5, lsl #2]!
   30e54:	ldr	r2, [r8]
   30e58:	ldr	r9, [sp, #156]	; 0x9c
   30e5c:	str	r2, [r3, #1024]	; 0x400
   30e60:	b	30e6c <__assert_fail@plt+0x1efd8>
   30e64:	tst	r1, #1
   30e68:	bne	30e28 <__assert_fail@plt+0x1ef94>
   30e6c:	lsr	r2, r1, #1
   30e70:	cmp	r7, r1, lsr #1
   30e74:	add	r5, r5, #1
   30e78:	lsl	r6, r6, #1
   30e7c:	mov	r1, r2
   30e80:	bne	30e64 <__assert_fail@plt+0x1efd0>
   30e84:	ldr	r2, [fp, #-3172]	; 0xfffff39c
   30e88:	cmp	r2, #0
   30e8c:	beq	30f1c <__assert_fail@plt+0x1f088>
   30e90:	add	r1, sp, #160	; 0xa0
   30e94:	sub	lr, fp, #2048	; 0x800
   30e98:	mov	r5, #32
   30e9c:	mov	r3, #0
   30ea0:	add	r4, r1, #4
   30ea4:	sub	r1, lr, #56	; 0x38
   30ea8:	sub	lr, r1, #4
   30eac:	sub	r1, fp, #1024	; 0x400
   30eb0:	sub	r1, r1, #56	; 0x38
   30eb4:	sub	r8, r1, #4
   30eb8:	mov	r1, #1
   30ebc:	b	30efc <__assert_fail@plt+0x1f068>
   30ec0:	mov	r7, r4
   30ec4:	mov	r9, lr
   30ec8:	mov	sl, r8
   30ecc:	ldr	r6, [r7], #32
   30ed0:	add	r9, r9, #4
   30ed4:	add	sl, sl, #4
   30ed8:	tst	r6, r1
   30edc:	beq	30ecc <__assert_fail@plt+0x1f038>
   30ee0:	ldr	r6, [sl]
   30ee4:	mov	r7, r0
   30ee8:	str	r6, [r7, r5, lsl #2]!
   30eec:	ldr	r6, [r9]
   30ef0:	ldr	r9, [sp, #156]	; 0x9c
   30ef4:	str	r6, [r7, #1024]	; 0x400
   30ef8:	b	30f04 <__assert_fail@plt+0x1f070>
   30efc:	tst	r2, #1
   30f00:	bne	30ec0 <__assert_fail@plt+0x1f02c>
   30f04:	lsr	r6, r2, #1
   30f08:	cmp	r3, r2, lsr #1
   30f0c:	add	r5, r5, #1
   30f10:	lsl	r1, r1, #1
   30f14:	mov	r2, r6
   30f18:	bne	30efc <__assert_fail@plt+0x1f068>
   30f1c:	ldr	r2, [fp, #-3168]	; 0xfffff3a0
   30f20:	cmp	r2, #0
   30f24:	beq	30fb4 <__assert_fail@plt+0x1f120>
   30f28:	add	r1, sp, #160	; 0xa0
   30f2c:	sub	lr, fp, #2048	; 0x800
   30f30:	mov	r5, #64	; 0x40
   30f34:	mov	r3, #0
   30f38:	add	r4, r1, #8
   30f3c:	sub	r1, lr, #56	; 0x38
   30f40:	sub	lr, r1, #4
   30f44:	sub	r1, fp, #1024	; 0x400
   30f48:	sub	r1, r1, #56	; 0x38
   30f4c:	sub	r8, r1, #4
   30f50:	mov	r1, #1
   30f54:	b	30f94 <__assert_fail@plt+0x1f100>
   30f58:	mov	r7, r4
   30f5c:	mov	r9, lr
   30f60:	mov	sl, r8
   30f64:	ldr	r6, [r7], #32
   30f68:	add	r9, r9, #4
   30f6c:	add	sl, sl, #4
   30f70:	tst	r6, r1
   30f74:	beq	30f64 <__assert_fail@plt+0x1f0d0>
   30f78:	ldr	r6, [sl]
   30f7c:	mov	r7, r0
   30f80:	str	r6, [r7, r5, lsl #2]!
   30f84:	ldr	r6, [r9]
   30f88:	ldr	r9, [sp, #156]	; 0x9c
   30f8c:	str	r6, [r7, #1024]	; 0x400
   30f90:	b	30f9c <__assert_fail@plt+0x1f108>
   30f94:	tst	r2, #1
   30f98:	bne	30f58 <__assert_fail@plt+0x1f0c4>
   30f9c:	lsr	r6, r2, #1
   30fa0:	cmp	r3, r2, lsr #1
   30fa4:	add	r5, r5, #1
   30fa8:	lsl	r1, r1, #1
   30fac:	mov	r2, r6
   30fb0:	bne	30f94 <__assert_fail@plt+0x1f100>
   30fb4:	ldr	r2, [fp, #-3164]	; 0xfffff3a4
   30fb8:	cmp	r2, #0
   30fbc:	beq	3104c <__assert_fail@plt+0x1f1b8>
   30fc0:	add	r1, sp, #160	; 0xa0
   30fc4:	sub	lr, fp, #2048	; 0x800
   30fc8:	mov	r5, #96	; 0x60
   30fcc:	mov	r3, #0
   30fd0:	add	r4, r1, #12
   30fd4:	sub	r1, lr, #56	; 0x38
   30fd8:	sub	lr, r1, #4
   30fdc:	sub	r1, fp, #1024	; 0x400
   30fe0:	sub	r1, r1, #56	; 0x38
   30fe4:	sub	r8, r1, #4
   30fe8:	mov	r1, #1
   30fec:	b	3102c <__assert_fail@plt+0x1f198>
   30ff0:	mov	r7, r4
   30ff4:	mov	r9, lr
   30ff8:	mov	sl, r8
   30ffc:	ldr	r6, [r7], #32
   31000:	add	r9, r9, #4
   31004:	add	sl, sl, #4
   31008:	tst	r6, r1
   3100c:	beq	30ffc <__assert_fail@plt+0x1f168>
   31010:	ldr	r6, [sl]
   31014:	mov	r7, r0
   31018:	str	r6, [r7, r5, lsl #2]!
   3101c:	ldr	r6, [r9]
   31020:	ldr	r9, [sp, #156]	; 0x9c
   31024:	str	r6, [r7, #1024]	; 0x400
   31028:	b	31034 <__assert_fail@plt+0x1f1a0>
   3102c:	tst	r2, #1
   31030:	bne	30ff0 <__assert_fail@plt+0x1f15c>
   31034:	lsr	r6, r2, #1
   31038:	cmp	r3, r2, lsr #1
   3103c:	add	r5, r5, #1
   31040:	lsl	r1, r1, #1
   31044:	mov	r2, r6
   31048:	bne	3102c <__assert_fail@plt+0x1f198>
   3104c:	ldr	r2, [fp, #-3160]	; 0xfffff3a8
   31050:	cmp	r2, #0
   31054:	beq	310e4 <__assert_fail@plt+0x1f250>
   31058:	add	r1, sp, #160	; 0xa0
   3105c:	sub	lr, fp, #2048	; 0x800
   31060:	mov	r5, #128	; 0x80
   31064:	mov	r3, #0
   31068:	add	r4, r1, #16
   3106c:	sub	r1, lr, #56	; 0x38
   31070:	sub	lr, r1, #4
   31074:	sub	r1, fp, #1024	; 0x400
   31078:	sub	r1, r1, #56	; 0x38
   3107c:	sub	r8, r1, #4
   31080:	mov	r1, #1
   31084:	b	310c4 <__assert_fail@plt+0x1f230>
   31088:	mov	r7, r4
   3108c:	mov	r9, lr
   31090:	mov	sl, r8
   31094:	ldr	r6, [r7], #32
   31098:	add	r9, r9, #4
   3109c:	add	sl, sl, #4
   310a0:	tst	r6, r1
   310a4:	beq	31094 <__assert_fail@plt+0x1f200>
   310a8:	ldr	r6, [sl]
   310ac:	mov	r7, r0
   310b0:	str	r6, [r7, r5, lsl #2]!
   310b4:	ldr	r6, [r9]
   310b8:	ldr	r9, [sp, #156]	; 0x9c
   310bc:	str	r6, [r7, #1024]	; 0x400
   310c0:	b	310cc <__assert_fail@plt+0x1f238>
   310c4:	tst	r2, #1
   310c8:	bne	31088 <__assert_fail@plt+0x1f1f4>
   310cc:	lsr	r6, r2, #1
   310d0:	cmp	r3, r2, lsr #1
   310d4:	add	r5, r5, #1
   310d8:	lsl	r1, r1, #1
   310dc:	mov	r2, r6
   310e0:	bne	310c4 <__assert_fail@plt+0x1f230>
   310e4:	ldr	r2, [fp, #-3156]	; 0xfffff3ac
   310e8:	cmp	r2, #0
   310ec:	beq	3117c <__assert_fail@plt+0x1f2e8>
   310f0:	add	r1, sp, #160	; 0xa0
   310f4:	sub	lr, fp, #2048	; 0x800
   310f8:	mov	r5, #160	; 0xa0
   310fc:	mov	r3, #0
   31100:	add	r4, r1, #20
   31104:	sub	r1, lr, #56	; 0x38
   31108:	sub	lr, r1, #4
   3110c:	sub	r1, fp, #1024	; 0x400
   31110:	sub	r1, r1, #56	; 0x38
   31114:	sub	r8, r1, #4
   31118:	mov	r1, #1
   3111c:	b	3115c <__assert_fail@plt+0x1f2c8>
   31120:	mov	r7, r4
   31124:	mov	r9, lr
   31128:	mov	sl, r8
   3112c:	ldr	r6, [r7], #32
   31130:	add	r9, r9, #4
   31134:	add	sl, sl, #4
   31138:	tst	r6, r1
   3113c:	beq	3112c <__assert_fail@plt+0x1f298>
   31140:	ldr	r6, [sl]
   31144:	mov	r7, r0
   31148:	str	r6, [r7, r5, lsl #2]!
   3114c:	ldr	r6, [r9]
   31150:	ldr	r9, [sp, #156]	; 0x9c
   31154:	str	r6, [r7, #1024]	; 0x400
   31158:	b	31164 <__assert_fail@plt+0x1f2d0>
   3115c:	tst	r2, #1
   31160:	bne	31120 <__assert_fail@plt+0x1f28c>
   31164:	lsr	r6, r2, #1
   31168:	cmp	r3, r2, lsr #1
   3116c:	add	r5, r5, #1
   31170:	lsl	r1, r1, #1
   31174:	mov	r2, r6
   31178:	bne	3115c <__assert_fail@plt+0x1f2c8>
   3117c:	ldr	r2, [fp, #-3152]	; 0xfffff3b0
   31180:	cmp	r2, #0
   31184:	beq	31214 <__assert_fail@plt+0x1f380>
   31188:	add	r1, sp, #160	; 0xa0
   3118c:	sub	lr, fp, #2048	; 0x800
   31190:	mov	r5, #192	; 0xc0
   31194:	mov	r3, #0
   31198:	add	r4, r1, #24
   3119c:	sub	r1, lr, #56	; 0x38
   311a0:	sub	lr, r1, #4
   311a4:	sub	r1, fp, #1024	; 0x400
   311a8:	sub	r1, r1, #56	; 0x38
   311ac:	sub	r8, r1, #4
   311b0:	mov	r1, #1
   311b4:	b	311f4 <__assert_fail@plt+0x1f360>
   311b8:	mov	r7, r4
   311bc:	mov	r9, lr
   311c0:	mov	sl, r8
   311c4:	ldr	r6, [r7], #32
   311c8:	add	r9, r9, #4
   311cc:	add	sl, sl, #4
   311d0:	tst	r6, r1
   311d4:	beq	311c4 <__assert_fail@plt+0x1f330>
   311d8:	ldr	r6, [sl]
   311dc:	mov	r7, r0
   311e0:	str	r6, [r7, r5, lsl #2]!
   311e4:	ldr	r6, [r9]
   311e8:	ldr	r9, [sp, #156]	; 0x9c
   311ec:	str	r6, [r7, #1024]	; 0x400
   311f0:	b	311fc <__assert_fail@plt+0x1f368>
   311f4:	tst	r2, #1
   311f8:	bne	311b8 <__assert_fail@plt+0x1f324>
   311fc:	lsr	r6, r2, #1
   31200:	cmp	r3, r2, lsr #1
   31204:	add	r5, r5, #1
   31208:	lsl	r1, r1, #1
   3120c:	mov	r2, r6
   31210:	bne	311f4 <__assert_fail@plt+0x1f360>
   31214:	ldr	r2, [fp, #-3148]	; 0xfffff3b4
   31218:	cmp	r2, #0
   3121c:	beq	312ac <__assert_fail@plt+0x1f418>
   31220:	add	r1, sp, #160	; 0xa0
   31224:	sub	lr, fp, #2048	; 0x800
   31228:	mov	r5, #224	; 0xe0
   3122c:	mov	r3, #0
   31230:	add	r4, r1, #28
   31234:	sub	r1, lr, #56	; 0x38
   31238:	sub	lr, r1, #4
   3123c:	sub	r1, fp, #1024	; 0x400
   31240:	sub	r1, r1, #56	; 0x38
   31244:	sub	r8, r1, #4
   31248:	mov	r1, #1
   3124c:	b	3128c <__assert_fail@plt+0x1f3f8>
   31250:	mov	r7, r4
   31254:	mov	r9, lr
   31258:	mov	sl, r8
   3125c:	ldr	r6, [r7], #32
   31260:	add	r9, r9, #4
   31264:	add	sl, sl, #4
   31268:	tst	r6, r1
   3126c:	beq	3125c <__assert_fail@plt+0x1f3c8>
   31270:	ldr	r6, [sl]
   31274:	mov	r7, r0
   31278:	str	r6, [r7, r5, lsl #2]!
   3127c:	ldr	r6, [r9]
   31280:	ldr	r9, [sp, #156]	; 0x9c
   31284:	str	r6, [r7, #1024]	; 0x400
   31288:	b	31294 <__assert_fail@plt+0x1f400>
   3128c:	tst	r2, #1
   31290:	bne	31250 <__assert_fail@plt+0x1f3bc>
   31294:	lsr	r6, r2, #1
   31298:	cmp	r3, r2, lsr #1
   3129c:	add	r5, r5, #1
   312a0:	lsl	r1, r1, #1
   312a4:	mov	r2, r6
   312a8:	bne	3128c <__assert_fail@plt+0x1f3f8>
   312ac:	ldr	r8, [sp, #124]	; 0x7c
   312b0:	add	r4, sp, #160	; 0xa0
   312b4:	tst	ip, #1024	; 0x400
   312b8:	bne	30c80 <__assert_fail@plt+0x1edec>
   312bc:	b	30cbc <__assert_fail@plt+0x1ee28>
   312c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   312c4:	add	fp, sp, #28
   312c8:	sub	sp, sp, #68	; 0x44
   312cc:	ldr	r4, [r1, #8]
   312d0:	ldr	r6, [r1, #12]
   312d4:	mov	r8, r0
   312d8:	mov	r0, #1
   312dc:	mov	r5, r1
   312e0:	str	r0, [fp, #-36]	; 0xffffffdc
   312e4:	str	r0, [fp, #-40]	; 0xffffffd8
   312e8:	mov	r0, #4
   312ec:	bl	36fb4 <__assert_fail@plt+0x25120>
   312f0:	cmp	r0, #0
   312f4:	str	r0, [fp, #-32]	; 0xffffffe0
   312f8:	beq	3198c <__assert_fail@plt+0x1faf8>
   312fc:	str	r4, [r0]
   31300:	sub	r3, fp, #40	; 0x28
   31304:	mov	r0, r8
   31308:	mov	r1, r5
   3130c:	mov	r2, r6
   31310:	str	r5, [sp, #28]
   31314:	bl	319b0 <__assert_fail@plt+0x1fb1c>
   31318:	cmp	r0, #0
   3131c:	bne	31944 <__assert_fail@plt+0x1fab0>
   31320:	mov	r4, r6
   31324:	mov	r9, #1
   31328:	mov	r1, #0
   3132c:	str	r8, [sp, #48]	; 0x30
   31330:	cmp	r4, #1
   31334:	blt	3194c <__assert_fail@plt+0x1fab8>
   31338:	ldr	lr, [sp, #28]
   3133c:	ldr	r0, [lr]
   31340:	ldr	r2, [r0, r4, lsl #2]
   31344:	cmp	r2, #0
   31348:	mov	r2, #0
   3134c:	addeq	r2, r1, #1
   31350:	ldr	r1, [r8, #120]	; 0x78
   31354:	cmp	r2, r1
   31358:	bgt	31954 <__assert_fail@plt+0x1fac0>
   3135c:	mov	r0, #0
   31360:	str	r4, [sp, #36]	; 0x24
   31364:	sub	r4, r4, #1
   31368:	str	r2, [sp, #4]
   3136c:	str	r0, [fp, #-36]	; 0xffffffdc
   31370:	ldr	r0, [r8, #100]	; 0x64
   31374:	ldr	r1, [r0, r4, lsl #2]
   31378:	cmp	r1, #0
   3137c:	beq	31924 <__assert_fail@plt+0x1fa90>
   31380:	ldr	r0, [r1, #20]
   31384:	cmp	r0, #1
   31388:	blt	31924 <__assert_fail@plt+0x1fa90>
   3138c:	ldr	r0, [r8, #84]	; 0x54
   31390:	mov	r2, #0
   31394:	str	r4, [sp, #32]
   31398:	str	r1, [sp, #16]
   3139c:	str	r0, [sp, #24]
   313a0:	b	31460 <__assert_fail@plt+0x1f5cc>
   313a4:	cmp	r2, r1
   313a8:	bne	313e4 <__assert_fail@plt+0x1f550>
   313ac:	lsl	r0, r2, #1
   313b0:	lsl	r1, r2, #3
   313b4:	str	r0, [fp, #-40]	; 0xffffffd8
   313b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   313bc:	bl	36fe4 <__assert_fail@plt+0x25150>
   313c0:	cmp	r0, #0
   313c4:	beq	319a8 <__assert_fail@plt+0x1fb14>
   313c8:	str	r0, [fp, #-32]	; 0xffffffe0
   313cc:	ldr	lr, [sp, #28]
   313d0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   313d4:	ldr	r2, [r0]
   313d8:	cmp	r2, r5
   313dc:	bgt	313f4 <__assert_fail@plt+0x1f560>
   313e0:	b	31428 <__assert_fail@plt+0x1f594>
   313e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   313e8:	ldr	r2, [r0]
   313ec:	cmp	r2, r5
   313f0:	ble	31428 <__assert_fail@plt+0x1f594>
   313f4:	cmp	r1, #1
   313f8:	blt	31458 <__assert_fail@plt+0x1f5c4>
   313fc:	add	r2, r0, r1, lsl #2
   31400:	add	r1, r1, #1
   31404:	mov	r3, r2
   31408:	ldr	r7, [r3, #-4]!
   3140c:	sub	r1, r1, #1
   31410:	cmp	r1, #1
   31414:	str	r7, [r2]
   31418:	mov	r2, r3
   3141c:	bgt	31408 <__assert_fail@plt+0x1f574>
   31420:	sub	r1, r1, #1
   31424:	b	31458 <__assert_fail@plt+0x1f5c4>
   31428:	add	r2, r0, r1, lsl #2
   3142c:	ldr	r3, [r2, #-4]
   31430:	cmp	r3, r5
   31434:	ble	31458 <__assert_fail@plt+0x1f5c4>
   31438:	sub	r1, r1, #2
   3143c:	str	r3, [r2]
   31440:	sub	r1, r1, #1
   31444:	ldr	r3, [r2, #-8]
   31448:	sub	r2, r2, #4
   3144c:	cmp	r3, r5
   31450:	bgt	3143c <__assert_fail@plt+0x1f5a8>
   31454:	add	r1, r1, #2
   31458:	str	r5, [r0, r1, lsl #2]
   3145c:	b	318d4 <__assert_fail@plt+0x1fa40>
   31460:	ldr	r0, [r1, #24]
   31464:	str	r2, [sp, #20]
   31468:	ldr	r2, [r0, r2, lsl #2]
   3146c:	ldr	r0, [sp, #24]
   31470:	ldr	r0, [r0]
   31474:	mov	r1, r2
   31478:	str	r2, [fp, #-44]	; 0xffffffd4
   3147c:	add	r0, r0, r2, lsl #3
   31480:	ldrb	r0, [r0, #6]
   31484:	tst	r0, #16
   31488:	bne	31528 <__assert_fail@plt+0x1f694>
   3148c:	ldr	r0, [sp, #24]
   31490:	ldr	r1, [fp, #-44]	; 0xffffffd4
   31494:	mov	r2, r4
   31498:	ldr	r0, [r0]
   3149c:	add	r1, r0, r1, lsl #3
   314a0:	mov	r0, r8
   314a4:	bl	2f308 <__assert_fail@plt+0x1d474>
   314a8:	ldr	lr, [sp, #28]
   314ac:	cmp	r0, #0
   314b0:	beq	3190c <__assert_fail@plt+0x1fa78>
   314b4:	ldr	r0, [lr]
   314b8:	ldr	r1, [sp, #36]	; 0x24
   314bc:	ldr	r0, [r0, r1, lsl #2]
   314c0:	cmp	r0, #0
   314c4:	beq	3190c <__assert_fail@plt+0x1fa78>
   314c8:	ldr	r2, [r0, #8]
   314cc:	cmp	r2, #1
   314d0:	blt	3190c <__assert_fail@plt+0x1fa78>
   314d4:	ldr	r1, [sp, #24]
   314d8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   314dc:	ldr	r0, [r0, #12]
   314e0:	ldr	r1, [r1, #12]
   314e4:	ldr	r1, [r1, r3, lsl #2]
   314e8:	subs	r3, r2, #1
   314ec:	mov	r2, #0
   314f0:	beq	31514 <__assert_fail@plt+0x1f680>
   314f4:	add	r7, r2, r3
   314f8:	lsr	r6, r7, #1
   314fc:	ldr	r5, [r0, r6, lsl #2]
   31500:	cmp	r5, r1
   31504:	movge	r3, r6
   31508:	addlt	r2, r9, r7, lsr #1
   3150c:	cmp	r2, r3
   31510:	bcc	314f4 <__assert_fail@plt+0x1f660>
   31514:	ldr	r2, [r0, r2, lsl #2]
   31518:	mov	r0, #1
   3151c:	cmp	r2, r1
   31520:	beq	31584 <__assert_fail@plt+0x1f6f0>
   31524:	b	3190c <__assert_fail@plt+0x1fa78>
   31528:	ldr	r7, [r8, #84]	; 0x54
   3152c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   31530:	mov	r5, r4
   31534:	ldr	r4, [lr, #12]
   31538:	mov	r2, r8
   3153c:	mov	r3, r5
   31540:	mov	r0, r7
   31544:	bl	2eff0 <__assert_fail@plt+0x1d15c>
   31548:	cmp	r0, #1
   3154c:	blt	31574 <__assert_fail@plt+0x1f6e0>
   31550:	add	r1, r0, r5
   31554:	cmp	r1, r4
   31558:	ble	3162c <__assert_fail@plt+0x1f798>
   3155c:	ldr	lr, [sp, #28]
   31560:	ldr	r4, [sp, #32]
   31564:	ldr	ip, [lr, #20]
   31568:	cmp	ip, #0
   3156c:	bne	31590 <__assert_fail@plt+0x1f6fc>
   31570:	b	318b0 <__assert_fail@plt+0x1fa1c>
   31574:	ldr	lr, [sp, #28]
   31578:	cmp	r0, #0
   3157c:	mov	r4, r5
   31580:	beq	3148c <__assert_fail@plt+0x1f5f8>
   31584:	ldr	ip, [lr, #20]
   31588:	cmp	ip, #0
   3158c:	beq	318b0 <__assert_fail@plt+0x1fa1c>
   31590:	add	r0, r0, r4
   31594:	ldr	r1, [fp, #-44]	; 0xffffffd4
   31598:	str	r0, [sp, #40]	; 0x28
   3159c:	ldr	r0, [sp, #24]
   315a0:	ldr	r0, [r0, #12]
   315a4:	ldr	r0, [r0, r1, lsl #2]
   315a8:	str	r0, [sp, #8]
   315ac:	ldr	r0, [r8, #108]	; 0x6c
   315b0:	cmp	r0, #1
   315b4:	blt	316a8 <__assert_fail@plt+0x1f814>
   315b8:	ldr	r2, [r8, #116]	; 0x74
   315bc:	ldr	r1, [sp, #40]	; 0x28
   315c0:	mov	sl, #0
   315c4:	mov	r3, r0
   315c8:	add	r7, r3, sl
   315cc:	add	r7, r7, r7, lsr #31
   315d0:	asr	r6, r7, #1
   315d4:	add	r5, r6, r6, lsl #1
   315d8:	add	r5, r2, r5, lsl #3
   315dc:	ldr	r5, [r5, #4]
   315e0:	cmp	r5, r1
   315e4:	addlt	sl, r9, r7, asr #1
   315e8:	movge	r3, r6
   315ec:	cmp	sl, r3
   315f0:	blt	315c8 <__assert_fail@plt+0x1f734>
   315f4:	cmp	sl, r0
   315f8:	bge	316b8 <__assert_fail@plt+0x1f824>
   315fc:	ldr	r2, [r8, #116]	; 0x74
   31600:	add	r3, sl, sl, lsl #1
   31604:	add	r2, r2, r3, lsl #3
   31608:	ldr	r2, [r2, #4]
   3160c:	cmp	r2, r1
   31610:	mvnne	sl, #0
   31614:	cmp	r0, #1
   31618:	bge	316c4 <__assert_fail@plt+0x1f830>
   3161c:	mov	r5, #0
   31620:	cmp	r5, r0
   31624:	blt	31704 <__assert_fail@plt+0x1f870>
   31628:	b	31728 <__assert_fail@plt+0x1f894>
   3162c:	ldr	lr, [sp, #28]
   31630:	ldr	r4, [sp, #32]
   31634:	ldr	r2, [lr]
   31638:	ldr	r2, [r2, r1, lsl #2]
   3163c:	cmp	r2, #0
   31640:	beq	3148c <__assert_fail@plt+0x1f5f8>
   31644:	ldr	r3, [r2, #8]
   31648:	cmp	r3, #1
   3164c:	blt	3148c <__assert_fail@plt+0x1f5f8>
   31650:	ldr	r1, [r7, #12]
   31654:	ldr	r7, [fp, #-44]	; 0xffffffd4
   31658:	ldr	r2, [r2, #12]
   3165c:	ldr	r1, [r1, r7, lsl #2]
   31660:	subs	r7, r3, #1
   31664:	mov	r3, #0
   31668:	beq	3168c <__assert_fail@plt+0x1f7f8>
   3166c:	add	r6, r3, r7
   31670:	lsr	r5, r6, #1
   31674:	ldr	r4, [r2, r5, lsl #2]
   31678:	cmp	r4, r1
   3167c:	movge	r7, r5
   31680:	addlt	r3, r9, r6, lsr #1
   31684:	cmp	r3, r7
   31688:	bcc	3166c <__assert_fail@plt+0x1f7d8>
   3168c:	ldr	r4, [sp, #32]
   31690:	cmp	r0, #0
   31694:	beq	3148c <__assert_fail@plt+0x1f5f8>
   31698:	ldr	r2, [r2, r3, lsl #2]
   3169c:	cmp	r2, r1
   316a0:	beq	31584 <__assert_fail@plt+0x1f6f0>
   316a4:	b	3148c <__assert_fail@plt+0x1f5f8>
   316a8:	ldr	r1, [sp, #40]	; 0x28
   316ac:	mov	sl, #0
   316b0:	cmp	sl, r0
   316b4:	blt	315fc <__assert_fail@plt+0x1f768>
   316b8:	mvn	sl, #0
   316bc:	cmp	r0, #1
   316c0:	blt	3161c <__assert_fail@plt+0x1f788>
   316c4:	ldr	r2, [r8, #116]	; 0x74
   316c8:	mov	r5, #0
   316cc:	mov	r3, r0
   316d0:	add	r7, r3, r5
   316d4:	add	r7, r7, r7, lsr #31
   316d8:	asr	r6, r7, #1
   316dc:	add	r1, r6, r6, lsl #1
   316e0:	add	r1, r2, r1, lsl #3
   316e4:	ldr	r1, [r1, #4]
   316e8:	cmp	r1, r4
   316ec:	addlt	r5, r9, r7, asr #1
   316f0:	movge	r3, r6
   316f4:	cmp	r5, r3
   316f8:	blt	316d0 <__assert_fail@plt+0x1f83c>
   316fc:	cmp	r5, r0
   31700:	bge	31728 <__assert_fail@plt+0x1f894>
   31704:	ldr	r0, [r8, #116]	; 0x74
   31708:	add	r1, r5, r5, lsl #1
   3170c:	add	r0, r0, r1, lsl #3
   31710:	ldr	r0, [r0, #4]
   31714:	cmp	r0, r4
   31718:	mvnne	r5, #0
   3171c:	cmp	ip, #1
   31720:	bge	31734 <__assert_fail@plt+0x1f8a0>
   31724:	b	318b0 <__assert_fail@plt+0x1fa1c>
   31728:	mvn	r5, #0
   3172c:	cmp	ip, #1
   31730:	blt	318b0 <__assert_fail@plt+0x1fa1c>
   31734:	ldr	ip, [r8, #84]	; 0x54
   31738:	mov	r6, #0
   3173c:	str	ip, [sp, #12]
   31740:	ldr	r0, [lr, #24]
   31744:	ldr	r3, [r8, #116]	; 0x74
   31748:	ldr	r4, [ip]
   3174c:	mvn	r8, #0
   31750:	ldr	r2, [r0, r6, lsl #2]
   31754:	mov	r0, r3
   31758:	add	r1, r2, r2, lsl #1
   3175c:	ldr	r7, [r0, r1, lsl #3]!
   31760:	ldr	r4, [r4, r7, lsl #3]
   31764:	ldr	r0, [r0, #8]
   31768:	ldr	r7, [sp, #40]	; 0x28
   3176c:	cmp	r0, r7
   31770:	str	r4, [sp, #44]	; 0x2c
   31774:	ble	31790 <__assert_fail@plt+0x1f8fc>
   31778:	mvn	r9, #0
   3177c:	ldr	r1, [sp, #36]	; 0x24
   31780:	ldr	r4, [sp, #32]
   31784:	cmp	r0, r1
   31788:	blt	31814 <__assert_fail@plt+0x1f980>
   3178c:	b	31890 <__assert_fail@plt+0x1f9fc>
   31790:	add	r1, r3, r1, lsl #3
   31794:	mov	r9, #1
   31798:	ldr	r1, [r1, #12]
   3179c:	cmp	r1, r7
   317a0:	blt	31804 <__assert_fail@plt+0x1f970>
   317a4:	sub	r1, r1, r7
   317a8:	cmp	r0, r7
   317ac:	mov	r7, #1
   317b0:	clz	r1, r1
   317b4:	lsr	r4, r1, #5
   317b8:	lsl	r1, r4, #1
   317bc:	orreq	r1, r7, r4, lsl #1
   317c0:	cmp	r1, #0
   317c4:	beq	31874 <__assert_fail@plt+0x1f9e0>
   317c8:	ldr	r4, [sp, #48]	; 0x30
   317cc:	ldr	r2, [sp, #44]	; 0x2c
   317d0:	ldr	r3, [sp, #8]
   317d4:	str	sl, [sp]
   317d8:	mov	r0, r4
   317dc:	bl	32ef0 <__assert_fail@plt+0x2105c>
   317e0:	ldr	lr, [sp, #28]
   317e4:	mov	r9, r0
   317e8:	ldr	r3, [r4, #116]	; 0x74
   317ec:	ldr	ip, [sp, #12]
   317f0:	ldr	r0, [lr, #24]
   317f4:	ldr	r2, [r0, r6, lsl #2]
   317f8:	add	r0, r2, r2, lsl #1
   317fc:	add	r0, r3, r0, lsl #3
   31800:	ldr	r0, [r0, #8]
   31804:	ldr	r1, [sp, #36]	; 0x24
   31808:	ldr	r4, [sp, #32]
   3180c:	cmp	r0, r1
   31810:	bge	31890 <__assert_fail@plt+0x1f9fc>
   31814:	add	r1, r2, r2, lsl #1
   31818:	mov	r8, #1
   3181c:	add	r1, r3, r1, lsl #3
   31820:	ldr	r1, [r1, #12]
   31824:	cmp	r1, r4
   31828:	blt	31890 <__assert_fail@plt+0x1f9fc>
   3182c:	sub	r1, r1, r4
   31830:	cmp	r0, r4
   31834:	mov	r0, #1
   31838:	clz	r1, r1
   3183c:	lsr	r2, r1, #5
   31840:	lsl	r1, r2, #1
   31844:	orreq	r1, r0, r2, lsl #1
   31848:	cmp	r1, #0
   3184c:	beq	3188c <__assert_fail@plt+0x1f9f8>
   31850:	ldr	r0, [sp, #48]	; 0x30
   31854:	ldr	r2, [sp, #44]	; 0x2c
   31858:	ldr	r3, [fp, #-44]	; 0xffffffd4
   3185c:	str	r5, [sp]
   31860:	bl	32ef0 <__assert_fail@plt+0x2105c>
   31864:	ldr	ip, [sp, #12]
   31868:	ldr	lr, [sp, #28]
   3186c:	mov	r8, r0
   31870:	b	31890 <__assert_fail@plt+0x1f9fc>
   31874:	mov	r9, #0
   31878:	ldr	r1, [sp, #36]	; 0x24
   3187c:	ldr	r4, [sp, #32]
   31880:	cmp	r0, r1
   31884:	blt	31814 <__assert_fail@plt+0x1f980>
   31888:	b	31890 <__assert_fail@plt+0x1f9fc>
   3188c:	mov	r8, #0
   31890:	cmp	r8, r9
   31894:	ldr	r8, [sp, #48]	; 0x30
   31898:	mov	r9, #1
   3189c:	bne	3190c <__assert_fail@plt+0x1fa78>
   318a0:	ldr	r0, [lr, #20]
   318a4:	add	r6, r6, #1
   318a8:	cmp	r6, r0
   318ac:	blt	31740 <__assert_fail@plt+0x1f8ac>
   318b0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   318b4:	cmp	r2, #0
   318b8:	beq	318e4 <__assert_fail@plt+0x1fa50>
   318bc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   318c0:	ldr	r5, [fp, #-44]	; 0xffffffd4
   318c4:	cmp	r1, #0
   318c8:	bne	313a4 <__assert_fail@plt+0x1f510>
   318cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   318d0:	str	r5, [r0]
   318d4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   318d8:	add	r0, r0, #1
   318dc:	str	r0, [fp, #-36]	; 0xffffffdc
   318e0:	b	3190c <__assert_fail@plt+0x1fa78>
   318e4:	mov	r0, #4
   318e8:	str	r9, [fp, #-36]	; 0xffffffdc
   318ec:	str	r9, [fp, #-40]	; 0xffffffd8
   318f0:	bl	36fb4 <__assert_fail@plt+0x25120>
   318f4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   318f8:	cmp	r0, #0
   318fc:	str	r0, [fp, #-32]	; 0xffffffe0
   31900:	beq	31978 <__assert_fail@plt+0x1fae4>
   31904:	ldr	lr, [sp, #28]
   31908:	str	r1, [r0]
   3190c:	ldr	r1, [sp, #16]
   31910:	ldr	r2, [sp, #20]
   31914:	ldr	r0, [r1, #20]
   31918:	add	r2, r2, #1
   3191c:	cmp	r2, r0
   31920:	blt	31460 <__assert_fail@plt+0x1f5cc>
   31924:	mov	r0, r8
   31928:	mov	r1, lr
   3192c:	mov	r2, r4
   31930:	sub	r3, fp, #40	; 0x28
   31934:	bl	319b0 <__assert_fail@plt+0x1fb1c>
   31938:	ldr	r1, [sp, #4]
   3193c:	cmp	r0, #0
   31940:	beq	31330 <__assert_fail@plt+0x1f49c>
   31944:	mov	r7, r0
   31948:	b	31964 <__assert_fail@plt+0x1fad0>
   3194c:	mov	r7, #0
   31950:	b	31964 <__assert_fail@plt+0x1fad0>
   31954:	lsl	r2, r4, #2
   31958:	mov	r1, #0
   3195c:	mov	r7, #0
   31960:	bl	11cd8 <memset@plt>
   31964:	ldr	r0, [fp, #-32]	; 0xffffffe0
   31968:	bl	17b10 <__assert_fail@plt+0x5c7c>
   3196c:	mov	r0, r7
   31970:	sub	sp, fp, #28
   31974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31978:	mov	r0, #0
   3197c:	mov	r7, #12
   31980:	str	r0, [fp, #-40]	; 0xffffffd8
   31984:	str	r0, [fp, #-36]	; 0xffffffdc
   31988:	b	31964 <__assert_fail@plt+0x1fad0>
   3198c:	mov	r0, #0
   31990:	mov	r7, #12
   31994:	str	r0, [fp, #-40]	; 0xffffffd8
   31998:	str	r0, [fp, #-36]	; 0xffffffdc
   3199c:	mov	r0, r7
   319a0:	sub	sp, fp, #28
   319a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   319a8:	mov	r7, #12
   319ac:	b	31964 <__assert_fail@plt+0x1fad0>
   319b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   319b4:	add	fp, sp, #28
   319b8:	sub	sp, sp, #140	; 0x8c
   319bc:	mov	r9, r3
   319c0:	mov	r3, #0
   319c4:	ldr	r6, [r0, #84]	; 0x54
   319c8:	mov	r4, r1
   319cc:	str	r2, [fp, #-80]	; 0xffffffb0
   319d0:	str	r0, [sp, #64]	; 0x40
   319d4:	str	r3, [fp, #-76]	; 0xffffffb4
   319d8:	str	r4, [sp, #80]	; 0x50
   319dc:	ldr	r1, [r0, #100]	; 0x64
   319e0:	ldr	r7, [r1, r2, lsl #2]
   319e4:	cmp	r7, #0
   319e8:	mov	r1, r7
   319ec:	addne	r1, r1, #4
   319f0:	str	r1, [sp, #68]	; 0x44
   319f4:	ldr	r1, [r9, #4]
   319f8:	cmp	r1, #0
   319fc:	beq	31e14 <__assert_fail@plt+0x1ff80>
   31a00:	cmp	r7, #0
   31a04:	beq	31ddc <__assert_fail@plt+0x1ff48>
   31a08:	mov	r0, #0
   31a0c:	mov	r1, r6
   31a10:	mov	r2, r9
   31a14:	str	r9, [sp, #60]	; 0x3c
   31a18:	str	r0, [fp, #-72]	; 0xffffffb8
   31a1c:	sub	r0, fp, #72	; 0x48
   31a20:	bl	2ed50 <__assert_fail@plt+0x1cebc>
   31a24:	ldr	r9, [fp, #-72]	; 0xffffffb8
   31a28:	cmp	r9, #0
   31a2c:	bne	3282c <__assert_fail@plt+0x20998>
   31a30:	mov	r4, r0
   31a34:	mov	r5, r0
   31a38:	str	r6, [sp, #76]	; 0x4c
   31a3c:	ldr	r0, [r4, #28]!
   31a40:	cmp	r0, #0
   31a44:	bne	31ad8 <__assert_fail@plt+0x1fc44>
   31a48:	ldr	r8, [sp, #60]	; 0x3c
   31a4c:	mov	r6, #0
   31a50:	ldr	r0, [r8, #4]
   31a54:	str	r0, [r5, #28]
   31a58:	lsl	r0, r0, #2
   31a5c:	str	r6, [r5, #32]
   31a60:	bl	36fb4 <__assert_fail@plt+0x25120>
   31a64:	cmp	r0, #0
   31a68:	mov	r9, #12
   31a6c:	str	r0, [r5, #36]	; 0x24
   31a70:	movweq	r6, #12
   31a74:	str	r6, [fp, #-72]	; 0xffffffb8
   31a78:	beq	3282c <__assert_fail@plt+0x20998>
   31a7c:	ldr	r0, [r8, #4]
   31a80:	ldr	r6, [sp, #76]	; 0x4c
   31a84:	cmp	r0, #1
   31a88:	blt	31ad8 <__assert_fail@plt+0x1fc44>
   31a8c:	ldr	r6, [sp, #60]	; 0x3c
   31a90:	mov	r5, #0
   31a94:	ldr	r0, [r6, #8]
   31a98:	ldr	r1, [sp, #76]	; 0x4c
   31a9c:	ldr	r0, [r0, r5, lsl #2]
   31aa0:	ldr	r1, [r1, #28]
   31aa4:	add	r0, r0, r0, lsl #1
   31aa8:	add	r1, r1, r0, lsl #2
   31aac:	mov	r0, r4
   31ab0:	bl	2abac <__assert_fail@plt+0x18d18>
   31ab4:	cmp	r0, #0
   31ab8:	bne	32828 <__assert_fail@plt+0x20994>
   31abc:	ldr	r0, [r6, #4]
   31ac0:	add	r5, r5, #1
   31ac4:	cmp	r5, r0
   31ac8:	blt	31a94 <__assert_fail@plt+0x1fc00>
   31acc:	ldr	r6, [sp, #76]	; 0x4c
   31ad0:	mov	r0, #0
   31ad4:	str	r0, [fp, #-72]	; 0xffffffb8
   31ad8:	ldr	r5, [sp, #68]	; 0x44
   31adc:	ldr	r0, [sp, #60]	; 0x3c
   31ae0:	mov	r2, r4
   31ae4:	mov	r1, r5
   31ae8:	bl	32894 <__assert_fail@plt+0x20a00>
   31aec:	cmp	r0, #0
   31af0:	str	r0, [fp, #-76]	; 0xffffffb4
   31af4:	bne	32850 <__assert_fail@plt+0x209bc>
   31af8:	ldr	r4, [sp, #80]	; 0x50
   31afc:	ldr	r9, [sp, #60]	; 0x3c
   31b00:	ldr	r0, [r4, #20]
   31b04:	cmp	r0, #0
   31b08:	beq	31ddc <__assert_fail@plt+0x1ff48>
   31b0c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   31b10:	cmp	r0, #1
   31b14:	str	r7, [sp, #56]	; 0x38
   31b18:	blt	31dd0 <__assert_fail@plt+0x1ff3c>
   31b1c:	ldr	r0, [sp, #64]	; 0x40
   31b20:	mov	r1, #0
   31b24:	ldr	r0, [r0, #116]	; 0x74
   31b28:	str	r0, [sp, #72]	; 0x48
   31b2c:	ldr	r0, [r4, #24]
   31b30:	str	r1, [sp, #84]	; 0x54
   31b34:	ldr	r0, [r0, r1, lsl #2]
   31b38:	ldr	r1, [sp, #72]	; 0x48
   31b3c:	add	r0, r0, r0, lsl #1
   31b40:	add	r1, r1, r0, lsl #3
   31b44:	ldr	r2, [r1, #8]
   31b48:	cmp	r2, lr
   31b4c:	bge	31dbc <__assert_fail@plt+0x1ff28>
   31b50:	ldr	r1, [r1, #4]
   31b54:	cmp	r1, lr
   31b58:	blt	31dbc <__assert_fail@plt+0x1ff28>
   31b5c:	ldr	r1, [sp, #72]	; 0x48
   31b60:	ldr	r2, [r6]
   31b64:	ldr	r0, [r1, r0, lsl #3]!
   31b68:	ldr	r1, [r1, #12]
   31b6c:	ldr	sl, [r2, r0, lsl #3]
   31b70:	ldr	r0, [r9, #4]
   31b74:	cmp	r1, lr
   31b78:	bne	31d40 <__assert_fail@plt+0x1feac>
   31b7c:	cmp	r0, #1
   31b80:	blt	31dbc <__assert_fail@plt+0x1ff28>
   31b84:	ldr	r3, [r9, #8]
   31b88:	mvn	r8, #0
   31b8c:	mvn	r1, #0
   31b90:	ldr	r7, [r3]
   31b94:	add	r6, r2, r7, lsl #3
   31b98:	ldrb	r6, [r6, #4]
   31b9c:	cmp	r6, #9
   31ba0:	beq	31bc8 <__assert_fail@plt+0x1fd34>
   31ba4:	cmp	r6, #8
   31ba8:	bne	31bb8 <__assert_fail@plt+0x1fd24>
   31bac:	ldr	r6, [r2, r7, lsl #3]
   31bb0:	cmp	sl, r6
   31bb4:	moveq	r1, r7
   31bb8:	add	r3, r3, #4
   31bbc:	subs	r0, r0, #1
   31bc0:	bne	31b90 <__assert_fail@plt+0x1fcfc>
   31bc4:	b	31be0 <__assert_fail@plt+0x1fd4c>
   31bc8:	ldr	r6, [r2, r7, lsl #3]
   31bcc:	cmp	sl, r6
   31bd0:	moveq	r8, r7
   31bd4:	add	r3, r3, #4
   31bd8:	subs	r0, r0, #1
   31bdc:	bne	31b90 <__assert_fail@plt+0x1fcfc>
   31be0:	ldr	r6, [sp, #76]	; 0x4c
   31be4:	cmp	r1, #0
   31be8:	blt	31c08 <__assert_fail@plt+0x1fd74>
   31bec:	ldr	r2, [sp, #60]	; 0x3c
   31bf0:	mov	r0, r6
   31bf4:	mov	r3, r5
   31bf8:	bl	32ab0 <__assert_fail@plt+0x20c1c>
   31bfc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   31c00:	cmp	r0, #0
   31c04:	bne	32800 <__assert_fail@plt+0x2096c>
   31c08:	ldr	r9, [sp, #60]	; 0x3c
   31c0c:	cmp	r8, #0
   31c10:	ldrge	ip, [r9, #4]
   31c14:	cmpge	ip, #1
   31c18:	blt	31dbc <__assert_fail@plt+0x1ff28>
   31c1c:	mov	sl, #0
   31c20:	ldr	r1, [r9, #8]
   31c24:	ldr	r3, [r6, #28]
   31c28:	ldr	r1, [r1, sl, lsl #2]
   31c2c:	add	r2, r1, r1, lsl #1
   31c30:	add	r3, r3, r2, lsl #2
   31c34:	ldr	r7, [r3, #4]
   31c38:	cmp	r7, #1
   31c3c:	blt	31ca0 <__assert_fail@plt+0x1fe0c>
   31c40:	ldr	r3, [r3, #8]
   31c44:	mov	lr, ip
   31c48:	subs	r6, r7, #1
   31c4c:	beq	31c7c <__assert_fail@plt+0x1fde8>
   31c50:	mov	r7, #0
   31c54:	mov	ip, #1
   31c58:	add	r0, r7, r6
   31c5c:	lsr	r4, r0, #1
   31c60:	ldr	r5, [r3, r4, lsl #2]
   31c64:	cmp	r5, r8
   31c68:	movge	r6, r4
   31c6c:	addlt	r7, ip, r0, lsr #1
   31c70:	cmp	r7, r6
   31c74:	bcc	31c58 <__assert_fail@plt+0x1fdc4>
   31c78:	b	31c80 <__assert_fail@plt+0x1fdec>
   31c7c:	mov	r7, #0
   31c80:	ldr	r0, [r3, r7, lsl #2]
   31c84:	mov	ip, lr
   31c88:	ldr	r4, [sp, #80]	; 0x50
   31c8c:	ldr	r5, [sp, #68]	; 0x44
   31c90:	ldr	r6, [sp, #76]	; 0x4c
   31c94:	ldr	lr, [fp, #-80]	; 0xffffffb0
   31c98:	cmp	r0, r8
   31c9c:	beq	31d30 <__assert_fail@plt+0x1fe9c>
   31ca0:	ldr	r0, [r6, #24]
   31ca4:	add	r2, r0, r2, lsl #2
   31ca8:	ldr	r3, [r2, #4]
   31cac:	cmp	r3, #1
   31cb0:	blt	31d08 <__assert_fail@plt+0x1fe74>
   31cb4:	ldr	r2, [r2, #8]
   31cb8:	subs	r7, r3, #1
   31cbc:	beq	31cec <__assert_fail@plt+0x1fe58>
   31cc0:	mov	r3, #0
   31cc4:	mov	r4, #1
   31cc8:	add	r0, r3, r7
   31ccc:	lsr	r6, r0, #1
   31cd0:	ldr	r5, [r2, r6, lsl #2]
   31cd4:	cmp	r5, r8
   31cd8:	movge	r7, r6
   31cdc:	addlt	r3, r4, r0, lsr #1
   31ce0:	cmp	r3, r7
   31ce4:	bcc	31cc8 <__assert_fail@plt+0x1fe34>
   31ce8:	b	31cf0 <__assert_fail@plt+0x1fe5c>
   31cec:	mov	r3, #0
   31cf0:	ldr	r0, [r2, r3, lsl #2]
   31cf4:	ldr	r4, [sp, #80]	; 0x50
   31cf8:	ldr	r5, [sp, #68]	; 0x44
   31cfc:	ldr	r6, [sp, #76]	; 0x4c
   31d00:	cmp	r0, r8
   31d04:	beq	31d30 <__assert_fail@plt+0x1fe9c>
   31d08:	mov	r0, r6
   31d0c:	mov	r2, r9
   31d10:	mov	r3, r5
   31d14:	bl	32ab0 <__assert_fail@plt+0x20c1c>
   31d18:	cmp	r0, #0
   31d1c:	bne	32800 <__assert_fail@plt+0x2096c>
   31d20:	ldr	ip, [r9, #4]
   31d24:	ldr	lr, [fp, #-80]	; 0xffffffb0
   31d28:	sub	sl, sl, #1
   31d2c:	mov	r1, r9
   31d30:	add	sl, sl, #1
   31d34:	cmp	sl, ip
   31d38:	blt	31c20 <__assert_fail@plt+0x1fd8c>
   31d3c:	b	31dbc <__assert_fail@plt+0x1ff28>
   31d40:	cmp	r0, #1
   31d44:	blt	31dbc <__assert_fail@plt+0x1ff28>
   31d48:	mov	r7, #0
   31d4c:	b	31d54 <__assert_fail@plt+0x1fec0>
   31d50:	ldr	r2, [r6]
   31d54:	ldr	r1, [r9, #8]
   31d58:	ldr	r1, [r1, r7, lsl #2]
   31d5c:	add	r3, r2, r1, lsl #3
   31d60:	ldr	r3, [r3, #4]
   31d64:	and	r3, r3, #254	; 0xfe
   31d68:	orr	r3, r3, #1
   31d6c:	cmp	r3, #9
   31d70:	ldreq	r2, [r2, r1, lsl #3]
   31d74:	cmpeq	sl, r2
   31d78:	beq	31d8c <__assert_fail@plt+0x1fef8>
   31d7c:	add	r7, r7, #1
   31d80:	cmp	r7, r0
   31d84:	blt	31d50 <__assert_fail@plt+0x1febc>
   31d88:	b	31dbc <__assert_fail@plt+0x1ff28>
   31d8c:	mov	r0, r6
   31d90:	mov	r2, r9
   31d94:	mov	r3, r5
   31d98:	bl	32ab0 <__assert_fail@plt+0x20c1c>
   31d9c:	cmp	r0, #0
   31da0:	bne	32800 <__assert_fail@plt+0x2096c>
   31da4:	ldr	r0, [r9, #4]
   31da8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   31dac:	mov	r1, r9
   31db0:	add	r7, r7, #1
   31db4:	cmp	r7, r0
   31db8:	blt	31d50 <__assert_fail@plt+0x1febc>
   31dbc:	ldr	r1, [sp, #84]	; 0x54
   31dc0:	ldr	r0, [r4, #20]
   31dc4:	add	r1, r1, #1
   31dc8:	cmp	r1, r0
   31dcc:	blt	31b2c <__assert_fail@plt+0x1fc98>
   31dd0:	ldr	r7, [sp, #56]	; 0x38
   31dd4:	mov	r0, #0
   31dd8:	str	r0, [fp, #-76]	; 0xffffffb4
   31ddc:	sub	r0, fp, #76	; 0x4c
   31de0:	mov	r1, r6
   31de4:	mov	r2, r9
   31de8:	bl	2ed50 <__assert_fail@plt+0x1cebc>
   31dec:	ldr	r1, [r4]
   31df0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   31df4:	str	r0, [r1, r4, lsl #2]
   31df8:	ldr	r0, [sp, #64]	; 0x40
   31dfc:	ldr	r9, [fp, #-76]	; 0xffffffb4
   31e00:	cmp	r9, #0
   31e04:	bne	327d0 <__assert_fail@plt+0x2093c>
   31e08:	cmp	r7, #0
   31e0c:	bne	31e28 <__assert_fail@plt+0x1ff94>
   31e10:	b	327f0 <__assert_fail@plt+0x2095c>
   31e14:	ldr	r1, [r4]
   31e18:	mov	r4, r2
   31e1c:	str	r3, [r1, r2, lsl #2]
   31e20:	cmp	r7, #0
   31e24:	beq	327f0 <__assert_fail@plt+0x2095c>
   31e28:	ldr	r1, [r0, #100]	; 0x64
   31e2c:	ldr	r1, [r1, r4, lsl #2]
   31e30:	ldrb	r1, [r1, #52]	; 0x34
   31e34:	tst	r1, #64	; 0x40
   31e38:	beq	327f0 <__assert_fail@plt+0x2095c>
   31e3c:	ldr	lr, [r0, #108]	; 0x6c
   31e40:	ldr	r8, [r0, #84]	; 0x54
   31e44:	cmp	lr, #1
   31e48:	blt	327dc <__assert_fail@plt+0x20948>
   31e4c:	ldr	r1, [r0, #116]	; 0x74
   31e50:	mov	ip, #0
   31e54:	mov	r2, #1
   31e58:	mov	r3, lr
   31e5c:	add	r7, r3, ip
   31e60:	add	r7, r7, r7, lsr #31
   31e64:	asr	r6, r7, #1
   31e68:	add	r5, r6, r6, lsl #1
   31e6c:	add	r5, r1, r5, lsl #3
   31e70:	ldr	r5, [r5, #4]
   31e74:	cmp	r5, r4
   31e78:	addlt	ip, r2, r7, asr #1
   31e7c:	movge	r3, r6
   31e80:	cmp	ip, r3
   31e84:	blt	31e5c <__assert_fail@plt+0x1ffc8>
   31e88:	cmp	ip, lr
   31e8c:	bge	327e8 <__assert_fail@plt+0x20954>
   31e90:	cmn	ip, #1
   31e94:	beq	327e8 <__assert_fail@plt+0x20954>
   31e98:	ldr	r2, [r0, #116]	; 0x74
   31e9c:	add	r1, ip, ip, lsl #1
   31ea0:	str	r1, [sp, #20]
   31ea4:	add	r1, r2, r1, lsl #3
   31ea8:	ldr	r1, [r1, #4]
   31eac:	cmp	r1, r4
   31eb0:	bne	327e8 <__assert_fail@plt+0x20954>
   31eb4:	ldr	r1, [sp, #68]	; 0x44
   31eb8:	mov	r2, #0
   31ebc:	str	r2, [fp, #-72]	; 0xffffffb8
   31ec0:	ldr	r3, [r1, #4]
   31ec4:	cmp	r3, #0
   31ec8:	ble	32814 <__assert_fail@plt+0x20980>
   31ecc:	sub	r0, fp, #72	; 0x48
   31ed0:	ldr	r5, [sp, #80]	; 0x50
   31ed4:	mov	r9, #1
   31ed8:	mov	lr, #0
   31edc:	mov	r7, r8
   31ee0:	str	r8, [sp, #60]	; 0x3c
   31ee4:	str	ip, [sp, #24]
   31ee8:	add	r0, r0, #16
   31eec:	str	r0, [sp, #8]
   31ef0:	mov	r0, #0
   31ef4:	str	r0, [sp, #32]
   31ef8:	ldr	r0, [r1, #8]
   31efc:	ldr	r1, [r5, #8]
   31f00:	str	sl, [sp, #48]	; 0x30
   31f04:	ldr	r8, [r0, lr, lsl #2]
   31f08:	ldr	r0, [r7]
   31f0c:	add	r0, r0, r8, lsl #3
   31f10:	cmp	r8, r1
   31f14:	ldrb	r0, [r0, #4]
   31f18:	bne	31f34 <__assert_fail@plt+0x200a0>
   31f1c:	cmp	r0, #4
   31f20:	bne	32790 <__assert_fail@plt+0x208fc>
   31f24:	ldr	r0, [r5, #12]
   31f28:	cmp	r0, r4
   31f2c:	bne	31f3c <__assert_fail@plt+0x200a8>
   31f30:	b	32790 <__assert_fail@plt+0x208fc>
   31f34:	cmp	r0, #4
   31f38:	bne	32790 <__assert_fail@plt+0x208fc>
   31f3c:	ldr	r0, [sp, #64]	; 0x40
   31f40:	ldr	r1, [sp, #20]
   31f44:	mov	r4, ip
   31f48:	str	lr, [sp, #36]	; 0x24
   31f4c:	str	r8, [sp, #56]	; 0x38
   31f50:	ldr	r0, [r0, #116]	; 0x74
   31f54:	add	sl, r0, r1, lsl #3
   31f58:	b	32604 <__assert_fail@plt+0x20770>
   31f5c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   31f60:	mov	r9, #0
   31f64:	cmp	r9, r0
   31f68:	blt	32700 <__assert_fail@plt+0x2086c>
   31f6c:	mvn	r9, #0
   31f70:	cmp	r0, #1
   31f74:	blt	32720 <__assert_fail@plt+0x2088c>
   31f78:	ldr	r1, [r7, #116]	; 0x74
   31f7c:	ldr	r4, [sp, #84]	; 0x54
   31f80:	mov	r8, #0
   31f84:	mov	r2, r0
   31f88:	mov	lr, #1
   31f8c:	add	r3, r2, r8
   31f90:	add	r3, r3, r3, lsr #31
   31f94:	asr	r6, r3, #1
   31f98:	add	r5, r6, r6, lsl #1
   31f9c:	add	r5, r1, r5, lsl #3
   31fa0:	ldr	r5, [r5, #4]
   31fa4:	cmp	r5, r4
   31fa8:	addlt	r8, lr, r3, asr #1
   31fac:	movge	r2, r6
   31fb0:	cmp	r8, r2
   31fb4:	blt	31f8c <__assert_fail@plt+0x200f8>
   31fb8:	ldr	lr, [sp, #64]	; 0x40
   31fbc:	cmp	r8, r0
   31fc0:	bge	32734 <__assert_fail@plt+0x208a0>
   31fc4:	ldr	r0, [lr, #116]	; 0x74
   31fc8:	add	r1, r8, r8, lsl #1
   31fcc:	add	r0, r0, r1, lsl #3
   31fd0:	ldr	r0, [r0, #4]
   31fd4:	cmp	r0, r4
   31fd8:	mvnne	r8, #0
   31fdc:	ldr	r5, [sp, #80]	; 0x50
   31fe0:	ldr	r4, [r5, #20]
   31fe4:	cmp	r4, #1
   31fe8:	blt	32160 <__assert_fail@plt+0x202cc>
   31fec:	ldr	ip, [lr, #84]	; 0x54
   31ff0:	mov	r6, #0
   31ff4:	str	ip, [sp, #52]	; 0x34
   31ff8:	ldr	r0, [r5, #24]
   31ffc:	ldr	r3, [lr, #116]	; 0x74
   32000:	ldr	r4, [ip]
   32004:	ldr	r7, [fp, #-80]	; 0xffffffb0
   32008:	ldr	r2, [r0, r6, lsl #2]
   3200c:	mov	r0, r3
   32010:	add	r1, r2, r2, lsl #1
   32014:	ldr	r5, [r0, r1, lsl #3]!
   32018:	ldr	r0, [r0, #8]
   3201c:	ldr	r4, [r4, r5, lsl #3]
   32020:	mvn	r5, #0
   32024:	cmp	r0, r7
   32028:	str	r4, [sp, #76]	; 0x4c
   3202c:	ble	32044 <__assert_fail@plt+0x201b0>
   32030:	mvn	r4, #0
   32034:	ldr	r7, [sp, #84]	; 0x54
   32038:	cmp	r0, r7
   3203c:	ble	320c4 <__assert_fail@plt+0x20230>
   32040:	b	32144 <__assert_fail@plt+0x202b0>
   32044:	add	r1, r3, r1, lsl #3
   32048:	mov	r4, #1
   3204c:	ldr	r1, [r1, #12]
   32050:	cmp	r1, r7
   32054:	blt	320b8 <__assert_fail@plt+0x20224>
   32058:	sub	r1, r1, r7
   3205c:	cmp	r0, r7
   32060:	mov	r7, #1
   32064:	clz	r1, r1
   32068:	lsr	r4, r1, #5
   3206c:	lsl	r1, r4, #1
   32070:	orreq	r1, r7, r4, lsl #1
   32074:	cmp	r1, #0
   32078:	beq	3212c <__assert_fail@plt+0x20298>
   3207c:	ldr	r2, [sp, #76]	; 0x4c
   32080:	ldr	r3, [sp, #56]	; 0x38
   32084:	mov	r0, lr
   32088:	str	r9, [sp]
   3208c:	bl	32ef0 <__assert_fail@plt+0x2105c>
   32090:	mov	r4, r0
   32094:	ldr	r0, [sp, #80]	; 0x50
   32098:	ldr	lr, [sp, #64]	; 0x40
   3209c:	ldr	ip, [sp, #52]	; 0x34
   320a0:	ldr	r0, [r0, #24]
   320a4:	ldr	r3, [lr, #116]	; 0x74
   320a8:	ldr	r2, [r0, r6, lsl #2]
   320ac:	add	r0, r2, r2, lsl #1
   320b0:	add	r0, r3, r0, lsl #3
   320b4:	ldr	r0, [r0, #8]
   320b8:	ldr	r7, [sp, #84]	; 0x54
   320bc:	cmp	r0, r7
   320c0:	bgt	32144 <__assert_fail@plt+0x202b0>
   320c4:	add	r1, r2, r2, lsl #1
   320c8:	mov	r5, #1
   320cc:	add	r1, r3, r1, lsl #3
   320d0:	ldr	r1, [r1, #12]
   320d4:	cmp	r1, r7
   320d8:	blt	32144 <__assert_fail@plt+0x202b0>
   320dc:	sub	r1, r1, r7
   320e0:	cmp	r0, r7
   320e4:	mov	r0, #1
   320e8:	clz	r1, r1
   320ec:	lsr	r2, r1, #5
   320f0:	lsl	r1, r2, #1
   320f4:	orreq	r1, r0, r2, lsl #1
   320f8:	cmp	r1, #0
   320fc:	beq	32140 <__assert_fail@plt+0x202ac>
   32100:	ldr	r2, [sp, #76]	; 0x4c
   32104:	ldr	r3, [sp, #44]	; 0x2c
   32108:	mov	r0, lr
   3210c:	str	r8, [sp]
   32110:	bl	32ef0 <__assert_fail@plt+0x2105c>
   32114:	ldr	ip, [sp, #52]	; 0x34
   32118:	ldr	lr, [sp, #64]	; 0x40
   3211c:	mov	r5, r0
   32120:	cmp	r5, r4
   32124:	beq	3214c <__assert_fail@plt+0x202b8>
   32128:	b	321bc <__assert_fail@plt+0x20328>
   3212c:	mov	r4, #0
   32130:	ldr	r7, [sp, #84]	; 0x54
   32134:	cmp	r0, r7
   32138:	ble	320c4 <__assert_fail@plt+0x20230>
   3213c:	b	32144 <__assert_fail@plt+0x202b0>
   32140:	mov	r5, #0
   32144:	cmp	r5, r4
   32148:	bne	321bc <__assert_fail@plt+0x20328>
   3214c:	ldr	r5, [sp, #80]	; 0x50
   32150:	add	r6, r6, #1
   32154:	ldr	r4, [r5, #20]
   32158:	cmp	r6, r4
   3215c:	blt	31ff8 <__assert_fail@plt+0x20164>
   32160:	ldr	r0, [sp, #32]
   32164:	cmp	r0, #0
   32168:	beq	321e0 <__assert_fail@plt+0x2034c>
   3216c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   32170:	mov	r2, #1
   32174:	str	r0, [fp, #-60]	; 0xffffffc4
   32178:	ldr	r0, [sp, #56]	; 0x38
   3217c:	str	r0, [fp, #-64]	; 0xffffffc0
   32180:	ldr	r0, [sp, #16]
   32184:	cmp	r0, #0
   32188:	beq	322fc <__assert_fail@plt+0x20468>
   3218c:	ldr	r4, [sp, #40]	; 0x28
   32190:	cmp	r4, #0
   32194:	bne	325ec <__assert_fail@plt+0x20758>
   32198:	ldr	sl, [sp, #48]	; 0x30
   3219c:	ldr	r0, [sp, #72]	; 0x48
   321a0:	mov	r1, #1
   321a4:	str	r0, [sl]
   321a8:	mov	r0, #1
   321ac:	str	r1, [fp, #-52]	; 0xffffffcc
   321b0:	str	sl, [sp, #28]
   321b4:	str	r0, [sp, #40]	; 0x28
   321b8:	b	32398 <__assert_fail@plt+0x20504>
   321bc:	ldr	r5, [sp, #80]	; 0x50
   321c0:	ldr	r7, [sp, #60]	; 0x3c
   321c4:	ldr	ip, [sp, #24]
   321c8:	ldr	lr, [sp, #36]	; 0x24
   321cc:	ldr	r8, [sp, #56]	; 0x38
   321d0:	ldr	r4, [sp, #72]	; 0x48
   321d4:	mov	r0, sl
   321d8:	mov	r9, #1
   321dc:	b	3277c <__assert_fail@plt+0x208e8>
   321e0:	mov	r0, r5
   321e4:	mov	r1, #12
   321e8:	cmp	r4, #1
   321ec:	mov	r2, #1
   321f0:	vld1.32	{d16-d17}, [r0], r1
   321f4:	sub	r1, fp, #72	; 0x48
   321f8:	vld1.32	{d18-d19}, [r0]
   321fc:	add	r0, r1, #12
   32200:	vst1.32	{d18-d19}, [r0]
   32204:	mov	r0, r1
   32208:	mov	r1, #20
   3220c:	vst1.64	{d16-d17}, [r0], r1
   32210:	str	r4, [r0]
   32214:	blt	322d8 <__assert_fail@plt+0x20444>
   32218:	lsl	r0, r4, #2
   3221c:	str	r4, [fp, #-56]	; 0xffffffc8
   32220:	bl	36fb4 <__assert_fail@plt+0x25120>
   32224:	cmp	r0, #0
   32228:	str	r0, [fp, #-48]	; 0xffffffd0
   3222c:	beq	32860 <__assert_fail@plt+0x209cc>
   32230:	mov	r6, r0
   32234:	ldr	r0, [r5, #20]
   32238:	ldr	r1, [r5, #24]
   3223c:	lsl	r2, r0, #2
   32240:	mov	r0, r6
   32244:	bl	11a8c <memcpy@plt>
   32248:	ldr	r0, [sp, #56]	; 0x38
   3224c:	mov	sl, r6
   32250:	str	r0, [fp, #-64]	; 0xffffffc0
   32254:	ldr	r0, [fp, #-80]	; 0xffffffb0
   32258:	str	r0, [fp, #-60]	; 0xffffffc4
   3225c:	lsl	r0, r4, #1
   32260:	lsl	r1, r4, #3
   32264:	str	r0, [sp, #16]
   32268:	str	r0, [fp, #-56]	; 0xffffffc8
   3226c:	mov	r0, r6
   32270:	bl	36fe4 <__assert_fail@plt+0x25150>
   32274:	cmp	r0, #0
   32278:	beq	32880 <__assert_fail@plt+0x209ec>
   3227c:	mov	sl, r0
   32280:	mov	r6, r0
   32284:	str	r0, [fp, #-48]	; 0xffffffd0
   32288:	str	r0, [sp, #12]
   3228c:	ldr	r0, [sl]
   32290:	ldr	r2, [sp, #72]	; 0x48
   32294:	cmp	r0, r2
   32298:	ble	32344 <__assert_fail@plt+0x204b0>
   3229c:	ldr	lr, [sp, #64]	; 0x40
   322a0:	cmp	r4, #1
   322a4:	mov	r2, r4
   322a8:	blt	32380 <__assert_fail@plt+0x204ec>
   322ac:	add	r1, sl, r4, lsl #2
   322b0:	add	r0, r4, #1
   322b4:	mov	r2, r1
   322b8:	ldr	r3, [r2, #-4]!
   322bc:	sub	r0, r0, #1
   322c0:	cmp	r0, #1
   322c4:	str	r3, [r1]
   322c8:	mov	r1, r2
   322cc:	bgt	322b8 <__assert_fail@plt+0x20424>
   322d0:	sub	r2, r0, #1
   322d4:	b	32380 <__assert_fail@plt+0x204ec>
   322d8:	ldr	r1, [sp, #8]
   322dc:	mov	r0, #0
   322e0:	str	r0, [r1]
   322e4:	str	r0, [r1, #4]
   322e8:	str	r0, [r1, #8]
   322ec:	ldr	r0, [fp, #-80]	; 0xffffffb0
   322f0:	str	r0, [fp, #-60]	; 0xffffffc4
   322f4:	ldr	r0, [sp, #56]	; 0x38
   322f8:	str	r0, [fp, #-64]	; 0xffffffc0
   322fc:	mov	r0, #4
   32300:	str	r2, [fp, #-52]	; 0xffffffcc
   32304:	str	r2, [fp, #-56]	; 0xffffffc8
   32308:	bl	36fb4 <__assert_fail@plt+0x25120>
   3230c:	cmp	r0, #0
   32310:	str	r0, [fp, #-48]	; 0xffffffd0
   32314:	beq	32860 <__assert_fail@plt+0x209cc>
   32318:	mov	sl, r0
   3231c:	ldr	r0, [sp, #72]	; 0x48
   32320:	ldr	lr, [sp, #64]	; 0x40
   32324:	str	sl, [sp, #12]
   32328:	str	sl, [sp, #28]
   3232c:	str	r0, [sl]
   32330:	mov	r0, #1
   32334:	str	r0, [sp, #40]	; 0x28
   32338:	mov	r0, #1
   3233c:	str	r0, [sp, #16]
   32340:	b	32398 <__assert_fail@plt+0x20504>
   32344:	add	r0, sl, r4, lsl #2
   32348:	ldr	lr, [sp, #64]	; 0x40
   3234c:	ldr	r1, [r0, #-4]
   32350:	cmp	r1, r2
   32354:	mov	r2, r4
   32358:	ble	32380 <__assert_fail@plt+0x204ec>
   3235c:	ldr	r3, [sp, #72]	; 0x48
   32360:	sub	r2, r4, #2
   32364:	str	r1, [r0]
   32368:	sub	r2, r2, #1
   3236c:	ldr	r1, [r0, #-8]
   32370:	sub	r0, r0, #4
   32374:	cmp	r1, r3
   32378:	bgt	32364 <__assert_fail@plt+0x204d0>
   3237c:	add	r2, r2, #2
   32380:	ldr	r0, [sp, #72]	; 0x48
   32384:	add	r4, r4, #1
   32388:	str	r6, [sp, #28]
   3238c:	str	r4, [sp, #40]	; 0x28
   32390:	str	r0, [sl, r2, lsl #2]
   32394:	str	r4, [fp, #-52]	; 0xffffffcc
   32398:	ldr	r0, [fp, #-80]	; 0xffffffb0
   3239c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   323a0:	ldr	r6, [r1, r0, lsl #2]
   323a4:	mov	r8, r1
   323a8:	mov	r0, lr
   323ac:	sub	r1, fp, #72	; 0x48
   323b0:	bl	312c0 <__assert_fail@plt+0x1f42c>
   323b4:	cmp	r0, #0
   323b8:	bne	3283c <__assert_fail@plt+0x209a8>
   323bc:	ldr	r5, [r5, #4]
   323c0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   323c4:	ldr	r4, [sp, #72]	; 0x48
   323c8:	mov	r7, r8
   323cc:	cmp	r5, #0
   323d0:	beq	32480 <__assert_fail@plt+0x205ec>
   323d4:	mov	r3, r0
   323d8:	cmp	r0, #0
   323dc:	str	r6, [sp, #84]	; 0x54
   323e0:	blt	32478 <__assert_fail@plt+0x205e4>
   323e4:	mov	r0, #0
   323e8:	mov	r6, r0
   323ec:	ldr	r0, [r7, r0, lsl #2]
   323f0:	ldr	r1, [r5, r6, lsl #2]
   323f4:	cmp	r1, #0
   323f8:	beq	32468 <__assert_fail@plt+0x205d4>
   323fc:	cmp	r0, #0
   32400:	beq	32458 <__assert_fail@plt+0x205c4>
   32404:	sub	r4, fp, #44	; 0x2c
   32408:	add	r2, r0, #4
   3240c:	add	r1, r1, #4
   32410:	mov	r0, r4
   32414:	bl	2d6dc <__assert_fail@plt+0x1b848>
   32418:	cmp	r0, #0
   3241c:	str	r0, [fp, #-32]	; 0xffffffe0
   32420:	bne	3283c <__assert_fail@plt+0x209a8>
   32424:	ldr	r1, [sp, #60]	; 0x3c
   32428:	sub	r0, fp, #32
   3242c:	mov	r2, r4
   32430:	bl	2ed50 <__assert_fail@plt+0x1cebc>
   32434:	str	r0, [r5, r6, lsl #2]
   32438:	ldr	r0, [fp, #-36]	; 0xffffffdc
   3243c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   32440:	ldr	r9, [fp, #-32]	; 0xffffffe0
   32444:	ldr	r3, [fp, #-80]	; 0xffffffb0
   32448:	ldr	r4, [sp, #72]	; 0x48
   3244c:	mov	r7, r8
   32450:	cmp	r9, #0
   32454:	bne	327b0 <__assert_fail@plt+0x2091c>
   32458:	add	r0, r6, #1
   3245c:	cmp	r6, r3
   32460:	blt	323e8 <__assert_fail@plt+0x20554>
   32464:	b	32478 <__assert_fail@plt+0x205e4>
   32468:	str	r0, [r5, r6, lsl #2]
   3246c:	add	r0, r6, #1
   32470:	cmp	r6, r3
   32474:	blt	323e8 <__assert_fail@plt+0x20554>
   32478:	ldr	r6, [sp, #84]	; 0x54
   3247c:	mov	r0, r3
   32480:	str	r6, [r7, r0, lsl #2]
   32484:	ldr	r0, [sp, #40]	; 0x28
   32488:	str	r7, [sp, #32]
   3248c:	str	sl, [sp, #48]	; 0x30
   32490:	cmp	r0, #1
   32494:	blt	32528 <__assert_fail@plt+0x20694>
   32498:	ldr	r5, [sp, #80]	; 0x50
   3249c:	ldr	ip, [sp, #24]
   324a0:	ldr	r8, [sp, #56]	; 0x38
   324a4:	subs	r0, r0, #1
   324a8:	mov	r9, #1
   324ac:	mov	r1, #0
   324b0:	beq	324d8 <__assert_fail@plt+0x20644>
   324b4:	mov	r2, r0
   324b8:	add	r3, r1, r2
   324bc:	lsr	r7, r3, #1
   324c0:	ldr	r6, [sl, r7, lsl #2]
   324c4:	cmp	r6, r4
   324c8:	movge	r2, r7
   324cc:	addlt	r1, r9, r3, lsr #1
   324d0:	cmp	r1, r2
   324d4:	bcc	324b8 <__assert_fail@plt+0x20624>
   324d8:	ldr	r2, [sl, r1, lsl #2]
   324dc:	cmp	r2, r4
   324e0:	mov	r2, r1
   324e4:	mvnne	r2, #0
   324e8:	cmp	r2, #0
   324ec:	blt	32544 <__assert_fail@plt+0x206b0>
   324f0:	ldr	r3, [sp, #40]	; 0x28
   324f4:	ldr	r7, [sp, #60]	; 0x3c
   324f8:	cmp	r3, r2
   324fc:	ble	32554 <__assert_fail@plt+0x206c0>
   32500:	cmp	r0, r2
   32504:	str	r0, [fp, #-52]	; 0xffffffcc
   32508:	ble	32560 <__assert_fail@plt+0x206cc>
   3250c:	ldr	r3, [sp, #40]	; 0x28
   32510:	mvn	r2, r1
   32514:	add	r3, r3, r2
   32518:	cmp	r3, #4
   3251c:	bcs	3256c <__assert_fail@plt+0x206d8>
   32520:	mov	r2, r1
   32524:	b	325c4 <__assert_fail@plt+0x20730>
   32528:	ldr	r5, [sp, #80]	; 0x50
   3252c:	ldr	ip, [sp, #24]
   32530:	ldr	lr, [sp, #36]	; 0x24
   32534:	ldr	r8, [sp, #56]	; 0x38
   32538:	ldr	r7, [sp, #60]	; 0x3c
   3253c:	mov	r9, #1
   32540:	b	325b0 <__assert_fail@plt+0x2071c>
   32544:	ldr	r0, [sp, #12]
   32548:	ldr	r7, [sp, #60]	; 0x3c
   3254c:	str	r0, [sp, #28]
   32550:	b	325ac <__assert_fail@plt+0x20718>
   32554:	ldr	r0, [sp, #12]
   32558:	str	r0, [sp, #28]
   3255c:	b	325ac <__assert_fail@plt+0x20718>
   32560:	ldr	r1, [sp, #12]
   32564:	str	r1, [sp, #28]
   32568:	b	325a8 <__assert_fail@plt+0x20714>
   3256c:	bic	r6, r3, #3
   32570:	add	r2, r1, r6
   32574:	add	r1, sl, r1, lsl #2
   32578:	mov	r7, r6
   3257c:	add	r1, r1, #4
   32580:	sub	r5, r1, #4
   32584:	vld1.32	{d16-d17}, [r1]!
   32588:	subs	r7, r7, #4
   3258c:	vst1.32	{d16-d17}, [r5]
   32590:	bne	32580 <__assert_fail@plt+0x206ec>
   32594:	ldr	r5, [sp, #80]	; 0x50
   32598:	ldr	r7, [sp, #60]	; 0x3c
   3259c:	cmp	r3, r6
   325a0:	bne	325c4 <__assert_fail@plt+0x20730>
   325a4:	str	sl, [sp, #28]
   325a8:	str	r0, [sp, #40]	; 0x28
   325ac:	ldr	lr, [sp, #36]	; 0x24
   325b0:	ldr	r0, [sp, #64]	; 0x40
   325b4:	add	r1, r4, r4, lsl #1
   325b8:	ldr	r0, [r0, #116]	; 0x74
   325bc:	add	r0, r0, r1, lsl #3
   325c0:	b	3277c <__assert_fail@plt+0x208e8>
   325c4:	ldr	lr, [sp, #36]	; 0x24
   325c8:	add	r1, sl, r2, lsl #2
   325cc:	ldr	r1, [r1, #4]
   325d0:	str	r1, [sl, r2, lsl #2]
   325d4:	add	r2, r2, #1
   325d8:	cmp	r0, r2
   325dc:	bne	325c8 <__assert_fail@plt+0x20734>
   325e0:	str	sl, [sp, #28]
   325e4:	str	r0, [sp, #40]	; 0x28
   325e8:	b	325b0 <__assert_fail@plt+0x2071c>
   325ec:	ldr	r0, [sp, #16]
   325f0:	ldr	sl, [sp, #48]	; 0x30
   325f4:	ldr	r6, [sp, #28]
   325f8:	cmp	r0, r4
   325fc:	beq	3225c <__assert_fail@plt+0x203c8>
   32600:	b	3228c <__assert_fail@plt+0x203f8>
   32604:	ldr	r0, [sl]
   32608:	cmp	r0, r8
   3260c:	bne	32778 <__assert_fail@plt+0x208e4>
   32610:	ldr	r0, [sl, #8]
   32614:	ldr	r1, [sl, #12]
   32618:	subs	r0, r1, r0
   3261c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   32620:	add	r0, r0, r1
   32624:	str	r0, [sp, #84]	; 0x54
   32628:	beq	3274c <__assert_fail@plt+0x208b8>
   3262c:	ldr	r0, [r7, #12]
   32630:	add	r0, r0, r8, lsl #2
   32634:	ldr	r1, [r5, #12]
   32638:	ldr	r2, [sp, #84]	; 0x54
   3263c:	cmp	r2, r1
   32640:	bgt	32778 <__assert_fail@plt+0x208e4>
   32644:	ldr	r1, [r5]
   32648:	ldr	r1, [r1, r2, lsl #2]
   3264c:	cmp	r1, #0
   32650:	beq	32778 <__assert_fail@plt+0x208e4>
   32654:	ldr	r2, [r1, #8]
   32658:	cmp	r2, #1
   3265c:	blt	32778 <__assert_fail@plt+0x208e4>
   32660:	ldr	r7, [r0]
   32664:	ldr	r0, [r1, #12]
   32668:	subs	r2, r2, #1
   3266c:	mov	r1, #0
   32670:	beq	32694 <__assert_fail@plt+0x20800>
   32674:	add	r3, r1, r2
   32678:	lsr	r6, r3, #1
   3267c:	ldr	r5, [r0, r6, lsl #2]
   32680:	cmp	r5, r7
   32684:	movge	r2, r6
   32688:	addlt	r1, r9, r3, lsr #1
   3268c:	cmp	r1, r2
   32690:	bcc	32674 <__assert_fail@plt+0x207e0>
   32694:	ldr	r0, [r0, r1, lsl #2]
   32698:	cmp	r0, r7
   3269c:	bne	32770 <__assert_fail@plt+0x208dc>
   326a0:	str	r7, [sp, #44]	; 0x2c
   326a4:	ldr	r7, [sp, #64]	; 0x40
   326a8:	str	r4, [sp, #72]	; 0x48
   326ac:	ldr	r0, [r7, #108]	; 0x6c
   326b0:	cmp	r0, #1
   326b4:	blt	31f5c <__assert_fail@plt+0x200c8>
   326b8:	ldr	r1, [r7, #116]	; 0x74
   326bc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   326c0:	mov	r9, #0
   326c4:	mov	r2, r0
   326c8:	mov	r8, #1
   326cc:	add	r3, r2, r9
   326d0:	add	r3, r3, r3, lsr #31
   326d4:	asr	r6, r3, #1
   326d8:	add	r5, r6, r6, lsl #1
   326dc:	add	r5, r1, r5, lsl #3
   326e0:	ldr	r5, [r5, #4]
   326e4:	cmp	r5, r4
   326e8:	addlt	r9, r8, r3, asr #1
   326ec:	movge	r2, r6
   326f0:	cmp	r9, r2
   326f4:	blt	326cc <__assert_fail@plt+0x20838>
   326f8:	cmp	r9, r0
   326fc:	bge	31f6c <__assert_fail@plt+0x200d8>
   32700:	ldr	r1, [r7, #116]	; 0x74
   32704:	add	r2, r9, r9, lsl #1
   32708:	add	r1, r1, r2, lsl #3
   3270c:	ldr	r1, [r1, #4]
   32710:	cmp	r1, r4
   32714:	mvnne	r9, #0
   32718:	cmp	r0, #1
   3271c:	bge	31f78 <__assert_fail@plt+0x200e4>
   32720:	ldr	r4, [sp, #84]	; 0x54
   32724:	mov	r8, #0
   32728:	ldr	lr, [sp, #64]	; 0x40
   3272c:	cmp	r8, r0
   32730:	blt	31fc4 <__assert_fail@plt+0x20130>
   32734:	mvn	r8, #0
   32738:	ldr	r5, [sp, #80]	; 0x50
   3273c:	ldr	r4, [r5, #20]
   32740:	cmp	r4, #1
   32744:	bge	31fec <__assert_fail@plt+0x20158>
   32748:	b	32160 <__assert_fail@plt+0x202cc>
   3274c:	ldr	r0, [r7, #20]
   32750:	add	r1, r8, r8, lsl #1
   32754:	add	r0, r0, r1, lsl #2
   32758:	ldr	r0, [r0, #8]
   3275c:	ldr	r1, [r5, #12]
   32760:	ldr	r2, [sp, #84]	; 0x54
   32764:	cmp	r2, r1
   32768:	bgt	32778 <__assert_fail@plt+0x208e4>
   3276c:	b	32644 <__assert_fail@plt+0x207b0>
   32770:	ldr	r5, [sp, #80]	; 0x50
   32774:	ldr	r7, [sp, #60]	; 0x3c
   32778:	mov	r0, sl
   3277c:	add	sl, r0, #24
   32780:	ldrb	r0, [r0, #20]
   32784:	add	r4, r4, #1
   32788:	cmp	r0, #0
   3278c:	bne	32604 <__assert_fail@plt+0x20770>
   32790:	ldr	r1, [sp, #68]	; 0x44
   32794:	ldr	sl, [sp, #48]	; 0x30
   32798:	ldr	r4, [fp, #-80]	; 0xffffffb0
   3279c:	add	lr, lr, #1
   327a0:	ldr	r0, [r1, #4]
   327a4:	cmp	lr, r0
   327a8:	blt	31ef8 <__assert_fail@plt+0x20064>
   327ac:	mov	r9, #0
   327b0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   327b4:	cmp	r0, #0
   327b8:	beq	327c4 <__assert_fail@plt+0x20930>
   327bc:	mov	r0, sl
   327c0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   327c4:	cmp	r9, #0
   327c8:	str	r9, [fp, #-76]	; 0xffffffb4
   327cc:	moveq	r9, #0
   327d0:	mov	r0, r9
   327d4:	sub	sp, fp, #28
   327d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   327dc:	mov	ip, #0
   327e0:	cmp	ip, lr
   327e4:	blt	31e90 <__assert_fail@plt+0x1fffc>
   327e8:	mov	r0, #0
   327ec:	str	r0, [fp, #-76]	; 0xffffffb4
   327f0:	mov	r9, #0
   327f4:	mov	r0, r9
   327f8:	sub	sp, fp, #28
   327fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32800:	mov	r9, r0
   32804:	str	r0, [fp, #-76]	; 0xffffffb4
   32808:	mov	r0, r9
   3280c:	sub	sp, fp, #28
   32810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32814:	str	r2, [fp, #-76]	; 0xffffffb4
   32818:	mov	r9, #0
   3281c:	mov	r0, r9
   32820:	sub	sp, fp, #28
   32824:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32828:	str	r0, [fp, #-72]	; 0xffffffb8
   3282c:	str	r9, [fp, #-76]	; 0xffffffb4
   32830:	mov	r0, r9
   32834:	sub	sp, fp, #28
   32838:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3283c:	mov	r9, r0
   32840:	ldr	r0, [fp, #-72]	; 0xffffffb8
   32844:	cmp	r0, #0
   32848:	bne	327bc <__assert_fail@plt+0x20928>
   3284c:	b	327c4 <__assert_fail@plt+0x20930>
   32850:	mov	r9, r0
   32854:	mov	r0, r9
   32858:	sub	sp, fp, #28
   3285c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32860:	mov	sl, #0
   32864:	mov	r9, #12
   32868:	str	sl, [fp, #-56]	; 0xffffffc8
   3286c:	str	sl, [fp, #-52]	; 0xffffffcc
   32870:	ldr	r0, [fp, #-72]	; 0xffffffb8
   32874:	cmp	r0, #0
   32878:	bne	327bc <__assert_fail@plt+0x20928>
   3287c:	b	327c4 <__assert_fail@plt+0x20930>
   32880:	mov	r9, #12
   32884:	ldr	r0, [fp, #-72]	; 0xffffffb8
   32888:	cmp	r0, #0
   3288c:	bne	327bc <__assert_fail@plt+0x20928>
   32890:	b	327c4 <__assert_fail@plt+0x20930>
   32894:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32898:	add	fp, sp, #28
   3289c:	sub	sp, sp, #12
   328a0:	ldr	ip, [r1, #4]
   328a4:	mov	sl, r0
   328a8:	mov	r0, #0
   328ac:	cmp	ip, #0
   328b0:	ldrne	lr, [r2, #4]
   328b4:	cmpne	lr, #0
   328b8:	bne	328c4 <__assert_fail@plt+0x20a30>
   328bc:	sub	sp, fp, #28
   328c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   328c4:	mov	r7, r1
   328c8:	ldr	r1, [sl, #4]
   328cc:	ldr	r6, [sl]
   328d0:	add	r3, lr, ip
   328d4:	add	r4, r1, r3
   328d8:	cmp	r4, r6
   328dc:	ble	32920 <__assert_fail@plt+0x20a8c>
   328e0:	mov	r5, r2
   328e4:	mov	r2, sl
   328e8:	add	r4, r6, r3
   328ec:	ldr	r0, [r2, #8]!
   328f0:	lsl	r1, r4, #2
   328f4:	str	r2, [sp, #8]
   328f8:	bl	36fe4 <__assert_fail@plt+0x25150>
   328fc:	cmp	r0, #0
   32900:	beq	32aa4 <__assert_fail@plt+0x20c10>
   32904:	str	r4, [sl]
   32908:	str	r0, [sl, #8]
   3290c:	mov	r2, r5
   32910:	ldr	r1, [sl, #4]
   32914:	ldr	lr, [r5, #4]
   32918:	ldr	ip, [r7, #4]
   3291c:	b	32928 <__assert_fail@plt+0x20a94>
   32920:	add	r0, sl, #8
   32924:	str	r0, [sp, #8]
   32928:	str	r2, [sp, #4]
   3292c:	ldr	r2, [r2, #8]
   32930:	ldr	r4, [r7, #8]
   32934:	add	r3, ip, r1
   32938:	sub	r8, r1, #1
   3293c:	add	r9, r3, lr
   32940:	sub	ip, ip, #1
   32944:	sub	r3, lr, #1
   32948:	ldr	r1, [r2, r3, lsl #2]
   3294c:	ldr	r6, [r4, ip, lsl #2]
   32950:	cmp	r6, r1
   32954:	beq	32980 <__assert_fail@plt+0x20aec>
   32958:	blt	32970 <__assert_fail@plt+0x20adc>
   3295c:	sub	r5, ip, #1
   32960:	cmp	ip, #0
   32964:	mov	ip, r5
   32968:	bgt	3294c <__assert_fail@plt+0x20ab8>
   3296c:	b	329fc <__assert_fail@plt+0x20b68>
   32970:	cmp	lr, #2
   32974:	mov	lr, r3
   32978:	bge	32944 <__assert_fail@plt+0x20ab0>
   3297c:	b	329fc <__assert_fail@plt+0x20b68>
   32980:	mov	r0, r9
   32984:	cmp	r8, #0
   32988:	blt	329d4 <__assert_fail@plt+0x20b40>
   3298c:	ldr	r1, [sp, #8]
   32990:	ldr	r9, [r1]
   32994:	mov	r1, r8
   32998:	ldr	r5, [r9, r1, lsl #2]
   3299c:	cmp	r5, r6
   329a0:	ble	329b8 <__assert_fail@plt+0x20b24>
   329a4:	sub	r8, r1, #1
   329a8:	cmp	r1, #0
   329ac:	mov	r1, r8
   329b0:	bgt	32998 <__assert_fail@plt+0x20b04>
   329b4:	b	329d4 <__assert_fail@plt+0x20b40>
   329b8:	mov	r8, r1
   329bc:	bne	329d4 <__assert_fail@plt+0x20b40>
   329c0:	mov	r8, r1
   329c4:	mov	r9, r0
   329c8:	cmp	ip, #1
   329cc:	bge	329f0 <__assert_fail@plt+0x20b5c>
   329d0:	b	329fc <__assert_fail@plt+0x20b68>
   329d4:	ldr	r1, [sp, #8]
   329d8:	mov	r9, r0
   329dc:	sub	r9, r0, #1
   329e0:	ldr	r1, [r1]
   329e4:	str	r6, [r1, r9, lsl #2]
   329e8:	cmp	ip, #1
   329ec:	blt	329fc <__assert_fail@plt+0x20b68>
   329f0:	cmp	lr, #2
   329f4:	mov	lr, r3
   329f8:	bge	32940 <__assert_fail@plt+0x20aac>
   329fc:	ldr	lr, [r7, #4]
   32a00:	ldr	r7, [sp, #4]
   32a04:	ldr	r2, [sl, #4]
   32a08:	ldr	r0, [sl, #8]
   32a0c:	ldr	r4, [r7, #4]
   32a10:	subs	r1, r2, #1
   32a14:	add	r3, r1, lr
   32a18:	add	r3, r3, r4
   32a1c:	sub	r5, r3, r9
   32a20:	add	r6, r5, #1
   32a24:	cmpge	r5, #0
   32a28:	add	r7, r6, r2
   32a2c:	str	r7, [sl, #4]
   32a30:	blt	32a88 <__assert_fail@plt+0x20bf4>
   32a34:	add	r2, r2, r4
   32a38:	add	r2, r2, lr
   32a3c:	sub	r2, r2, r9
   32a40:	add	r7, r0, r2, lsl #2
   32a44:	ldr	r2, [r0, r1, lsl #2]
   32a48:	ldr	r5, [r0, r3, lsl #2]
   32a4c:	cmp	r5, r2
   32a50:	bgt	32a6c <__assert_fail@plt+0x20bd8>
   32a54:	str	r2, [r7, r1, lsl #2]
   32a58:	sub	r2, r1, #1
   32a5c:	cmp	r1, #0
   32a60:	mov	r1, r2
   32a64:	bgt	32a44 <__assert_fail@plt+0x20bb0>
   32a68:	b	32a88 <__assert_fail@plt+0x20bf4>
   32a6c:	str	r5, [r7, r1, lsl #2]
   32a70:	sub	r7, r7, #4
   32a74:	subs	r6, r6, #1
   32a78:	sub	r3, r3, #1
   32a7c:	mov	r2, #0
   32a80:	bne	32a44 <__assert_fail@plt+0x20bb0>
   32a84:	b	32a8c <__assert_fail@plt+0x20bf8>
   32a88:	mov	r2, r6
   32a8c:	add	r1, r0, r9, lsl #2
   32a90:	lsl	r2, r2, #2
   32a94:	bl	11a8c <memcpy@plt>
   32a98:	mov	r0, #0
   32a9c:	sub	sp, fp, #28
   32aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32aa4:	mov	r0, #12
   32aa8:	sub	sp, fp, #28
   32aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32ab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32ab4:	add	fp, sp, #28
   32ab8:	sub	sp, sp, #44	; 0x2c
   32abc:	mov	ip, r0
   32ac0:	ldr	r0, [r0, #28]
   32ac4:	str	r3, [sp, #4]
   32ac8:	add	r3, r1, r1, lsl #1
   32acc:	mov	r9, #0
   32ad0:	str	r9, [sp, #36]	; 0x24
   32ad4:	str	r9, [sp, #32]
   32ad8:	str	r9, [sp, #40]	; 0x28
   32adc:	add	r3, r0, r3, lsl #2
   32ae0:	mov	r0, r3
   32ae4:	ldr	lr, [r0, #4]!
   32ae8:	cmp	lr, #1
   32aec:	str	r0, [sp, #24]
   32af0:	blt	32e00 <__assert_fail@plt+0x20f6c>
   32af4:	add	r4, r3, #8
   32af8:	mov	sl, #1
   32afc:	str	r2, [sp, #28]
   32b00:	str	r3, [sp]
   32b04:	str	r1, [sp, #12]
   32b08:	str	ip, [sp, #8]
   32b0c:	str	r4, [sp, #20]
   32b10:	ldr	r3, [r4]
   32b14:	ldr	r0, [r3, r9, lsl #2]
   32b18:	cmp	r0, r1
   32b1c:	beq	32cc4 <__assert_fail@plt+0x20e30>
   32b20:	ldr	r2, [ip]
   32b24:	add	r2, r2, r0, lsl #3
   32b28:	ldrb	r2, [r2, #4]
   32b2c:	tst	r2, #8
   32b30:	beq	32cc4 <__assert_fail@plt+0x20e30>
   32b34:	ldr	r2, [ip, #20]
   32b38:	add	r0, r0, r0, lsl #1
   32b3c:	mvn	r8, #0
   32b40:	str	r0, [sp, #16]
   32b44:	add	r0, r2, r0, lsl #2
   32b48:	ldr	r7, [r0, #4]
   32b4c:	ldr	r0, [r0, #8]
   32b50:	cmp	r7, #2
   32b54:	ldr	r5, [r0]
   32b58:	ldrge	r8, [r0, #4]
   32b5c:	cmp	lr, #1
   32b60:	blt	32ba0 <__assert_fail@plt+0x20d0c>
   32b64:	mov	r2, #0
   32b68:	subs	r7, lr, #1
   32b6c:	beq	32b90 <__assert_fail@plt+0x20cfc>
   32b70:	add	r6, r2, r7
   32b74:	lsr	r4, r6, #1
   32b78:	ldr	r0, [r3, r4, lsl #2]
   32b7c:	cmp	r0, r5
   32b80:	movge	r7, r4
   32b84:	addlt	r2, sl, r6, lsr #1
   32b88:	cmp	r2, r7
   32b8c:	bcc	32b70 <__assert_fail@plt+0x20cdc>
   32b90:	ldr	r0, [r3, r2, lsl #2]
   32b94:	ldr	r4, [sp, #20]
   32b98:	cmp	r0, r5
   32b9c:	beq	32bfc <__assert_fail@plt+0x20d68>
   32ba0:	ldr	r0, [sp, #28]
   32ba4:	ldr	r0, [r0, #4]
   32ba8:	cmp	r0, #1
   32bac:	blt	32bfc <__assert_fail@plt+0x20d68>
   32bb0:	subs	r6, r0, #1
   32bb4:	ldr	r0, [sp, #28]
   32bb8:	mov	r7, #0
   32bbc:	ldr	r1, [r0, #8]
   32bc0:	beq	32be4 <__assert_fail@plt+0x20d50>
   32bc4:	add	r0, r7, r6
   32bc8:	lsr	r4, r0, #1
   32bcc:	ldr	ip, [r1, r4, lsl #2]
   32bd0:	cmp	ip, r5
   32bd4:	movge	r6, r4
   32bd8:	addlt	r7, sl, r0, lsr #1
   32bdc:	cmp	r7, r6
   32be0:	bcc	32bc4 <__assert_fail@plt+0x20d30>
   32be4:	ldr	r0, [r1, r7, lsl #2]
   32be8:	ldr	r1, [sp, #12]
   32bec:	ldr	ip, [sp, #8]
   32bf0:	ldr	r4, [sp, #20]
   32bf4:	cmp	r0, r5
   32bf8:	beq	32c94 <__assert_fail@plt+0x20e00>
   32bfc:	cmp	r8, #1
   32c00:	blt	32cc4 <__assert_fail@plt+0x20e30>
   32c04:	cmp	lr, #1
   32c08:	blt	32c44 <__assert_fail@plt+0x20db0>
   32c0c:	mov	r2, #0
   32c10:	subs	r7, lr, #1
   32c14:	beq	32c38 <__assert_fail@plt+0x20da4>
   32c18:	add	r0, r2, r7
   32c1c:	lsr	r6, r0, #1
   32c20:	ldr	r5, [r3, r6, lsl #2]
   32c24:	cmp	r5, r8
   32c28:	movge	r7, r6
   32c2c:	addlt	r2, sl, r0, lsr #1
   32c30:	cmp	r2, r7
   32c34:	bcc	32c18 <__assert_fail@plt+0x20d84>
   32c38:	ldr	r0, [r3, r2, lsl #2]
   32c3c:	cmp	r0, r8
   32c40:	beq	32cc4 <__assert_fail@plt+0x20e30>
   32c44:	ldr	r2, [sp, #28]
   32c48:	ldr	r0, [r2, #4]
   32c4c:	cmp	r0, #1
   32c50:	blt	32cc4 <__assert_fail@plt+0x20e30>
   32c54:	ldr	r4, [r2, #8]
   32c58:	subs	r7, r0, #1
   32c5c:	mov	r3, #0
   32c60:	beq	32c84 <__assert_fail@plt+0x20df0>
   32c64:	add	r0, r3, r7
   32c68:	lsr	r6, r0, #1
   32c6c:	ldr	r5, [r4, r6, lsl #2]
   32c70:	cmp	r5, r8
   32c74:	movge	r7, r6
   32c78:	addlt	r3, sl, r0, lsr #1
   32c7c:	cmp	r3, r7
   32c80:	bcc	32c64 <__assert_fail@plt+0x20dd0>
   32c84:	ldr	r0, [r4, r3, lsl #2]
   32c88:	ldr	r4, [sp, #20]
   32c8c:	cmp	r0, r8
   32c90:	bne	32cc4 <__assert_fail@plt+0x20e30>
   32c94:	ldr	r0, [ip, #28]
   32c98:	ldr	r1, [sp, #16]
   32c9c:	add	r2, r0, r1, lsl #2
   32ca0:	ldr	r1, [sp, #4]
   32ca4:	add	r0, sp, #32
   32ca8:	bl	32894 <__assert_fail@plt+0x20a00>
   32cac:	cmp	r0, #0
   32cb0:	bne	32ed8 <__assert_fail@plt+0x21044>
   32cb4:	ldr	r0, [sp, #24]
   32cb8:	ldr	r1, [sp, #12]
   32cbc:	ldr	ip, [sp, #8]
   32cc0:	ldr	lr, [r0]
   32cc4:	add	r9, r9, #1
   32cc8:	cmp	r9, lr
   32ccc:	blt	32b10 <__assert_fail@plt+0x20c7c>
   32cd0:	ldr	r2, [sp, #28]
   32cd4:	ldr	r0, [sp]
   32cd8:	cmp	lr, #0
   32cdc:	ble	32e00 <__assert_fail@plt+0x20f6c>
   32ce0:	ldr	r1, [sp, #36]	; 0x24
   32ce4:	ldr	r9, [r0, #8]
   32ce8:	ldr	r0, [sp, #40]	; 0x28
   32cec:	subs	lr, r1, #1
   32cf0:	str	r9, [sp, #20]
   32cf4:	blt	32e18 <__assert_fail@plt+0x20f84>
   32cf8:	mov	ip, #0
   32cfc:	mov	r7, #1
   32d00:	b	32d24 <__assert_fail@plt+0x20e90>
   32d04:	add	r2, r5, r1, lsl #2
   32d08:	ldr	r2, [r2, #4]
   32d0c:	str	r2, [r5, r1, lsl #2]
   32d10:	add	r1, r1, #1
   32d14:	ldr	r2, [r3, #4]
   32d18:	cmp	r1, r2
   32d1c:	blt	32d04 <__assert_fail@plt+0x20e70>
   32d20:	b	32de8 <__assert_fail@plt+0x20f54>
   32d24:	ldr	r6, [r9, ip, lsl #2]
   32d28:	cmp	lr, #0
   32d2c:	mov	r1, #0
   32d30:	beq	32d5c <__assert_fail@plt+0x20ec8>
   32d34:	mov	r1, #0
   32d38:	mov	r2, lr
   32d3c:	add	r5, r1, r2
   32d40:	lsr	r4, r5, #1
   32d44:	ldr	r3, [r0, r4, lsl #2]
   32d48:	cmp	r3, r6
   32d4c:	movge	r2, r4
   32d50:	addlt	r1, r7, r5, lsr #1
   32d54:	cmp	r1, r2
   32d58:	bcc	32d3c <__assert_fail@plt+0x20ea8>
   32d5c:	ldr	r1, [r0, r1, lsl #2]
   32d60:	cmp	r1, r6
   32d64:	ldr	r1, [sp, #28]
   32d68:	beq	32de8 <__assert_fail@plt+0x20f54>
   32d6c:	ldr	sl, [r1, #4]
   32d70:	cmp	sl, #1
   32d74:	blt	32de8 <__assert_fail@plt+0x20f54>
   32d78:	ldr	r5, [r1, #8]
   32d7c:	subs	r4, sl, #1
   32d80:	beq	32db0 <__assert_fail@plt+0x20f1c>
   32d84:	mov	r1, #0
   32d88:	mov	r8, r4
   32d8c:	add	r3, r1, r4
   32d90:	lsr	r2, r3, #1
   32d94:	ldr	r9, [r5, r2, lsl #2]
   32d98:	cmp	r9, r6
   32d9c:	movge	r4, r2
   32da0:	addlt	r1, r7, r3, lsr #1
   32da4:	cmp	r1, r4
   32da8:	bcc	32d8c <__assert_fail@plt+0x20ef8>
   32dac:	b	32db8 <__assert_fail@plt+0x20f24>
   32db0:	mov	r8, r4
   32db4:	mov	r1, #0
   32db8:	ldr	r2, [r5, r1, lsl #2]
   32dbc:	ldr	r3, [sp, #28]
   32dc0:	ldr	r9, [sp, #20]
   32dc4:	mov	r4, r1
   32dc8:	cmp	r2, r6
   32dcc:	mvnne	r4, #0
   32dd0:	cmp	r4, #0
   32dd4:	blt	32de8 <__assert_fail@plt+0x20f54>
   32dd8:	cmp	sl, r4
   32ddc:	strgt	r8, [r3, #4]
   32de0:	cmpgt	r8, r4
   32de4:	bgt	32d04 <__assert_fail@plt+0x20e70>
   32de8:	ldr	r1, [sp, #24]
   32dec:	add	ip, ip, #1
   32df0:	ldr	r1, [r1]
   32df4:	cmp	ip, r1
   32df8:	blt	32d24 <__assert_fail@plt+0x20e90>
   32dfc:	b	32e04 <__assert_fail@plt+0x20f70>
   32e00:	ldr	r0, [sp, #40]	; 0x28
   32e04:	bl	17b10 <__assert_fail@plt+0x5c7c>
   32e08:	mov	r5, #0
   32e0c:	mov	r0, r5
   32e10:	sub	sp, fp, #28
   32e14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32e18:	ldr	r7, [r2, #4]
   32e1c:	mov	sl, #0
   32e20:	mov	r9, #1
   32e24:	cmp	r7, #1
   32e28:	blt	32ec0 <__assert_fail@plt+0x2102c>
   32e2c:	ldr	r1, [sp, #20]
   32e30:	ldr	r6, [r2, #8]
   32e34:	subs	lr, r7, #1
   32e38:	mov	r5, #0
   32e3c:	ldr	r1, [r1, sl, lsl #2]
   32e40:	beq	32e68 <__assert_fail@plt+0x20fd4>
   32e44:	mov	r4, lr
   32e48:	add	r3, r5, r4
   32e4c:	lsr	r2, r3, #1
   32e50:	ldr	ip, [r6, r2, lsl #2]
   32e54:	cmp	ip, r1
   32e58:	movge	r4, r2
   32e5c:	addlt	r5, r9, r3, lsr #1
   32e60:	cmp	r5, r4
   32e64:	bcc	32e48 <__assert_fail@plt+0x20fb4>
   32e68:	ldr	r2, [r6, r5, lsl #2]
   32e6c:	cmp	r2, r1
   32e70:	mov	r1, r5
   32e74:	mvnne	r1, #0
   32e78:	cmp	r1, #0
   32e7c:	blt	32ebc <__assert_fail@plt+0x21028>
   32e80:	ldr	r2, [sp, #28]
   32e84:	cmp	r7, r1
   32e88:	ble	32ec0 <__assert_fail@plt+0x2102c>
   32e8c:	cmp	lr, r1
   32e90:	mov	r7, lr
   32e94:	str	lr, [r2, #4]
   32e98:	ble	32ec0 <__assert_fail@plt+0x2102c>
   32e9c:	add	r1, r6, r5, lsl #2
   32ea0:	ldr	r1, [r1, #4]
   32ea4:	str	r1, [r6, r5, lsl #2]
   32ea8:	add	r5, r5, #1
   32eac:	ldr	r7, [r2, #4]
   32eb0:	cmp	r5, r7
   32eb4:	blt	32e9c <__assert_fail@plt+0x21008>
   32eb8:	b	32ec0 <__assert_fail@plt+0x2102c>
   32ebc:	ldr	r2, [sp, #28]
   32ec0:	ldr	r1, [sp, #24]
   32ec4:	add	sl, sl, #1
   32ec8:	ldr	r1, [r1]
   32ecc:	cmp	sl, r1
   32ed0:	blt	32e24 <__assert_fail@plt+0x20f90>
   32ed4:	b	32e04 <__assert_fail@plt+0x20f70>
   32ed8:	mov	r5, r0
   32edc:	ldr	r0, [sp, #40]	; 0x28
   32ee0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   32ee4:	mov	r0, r5
   32ee8:	sub	sp, fp, #28
   32eec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32ef0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32ef4:	add	fp, sp, #28
   32ef8:	sub	sp, sp, #44	; 0x2c
   32efc:	ldr	r4, [r0, #84]	; 0x54
   32f00:	mov	r7, r0
   32f04:	str	r1, [fp, #-32]	; 0xffffffe0
   32f08:	add	r1, r3, r3, lsl #1
   32f0c:	mov	r6, r2
   32f10:	str	r3, [sp, #36]	; 0x24
   32f14:	ldr	r0, [r4, #24]
   32f18:	add	r0, r0, r1, lsl #2
   32f1c:	mov	r2, r0
   32f20:	ldr	r1, [r2, #4]!
   32f24:	cmp	r1, #1
   32f28:	str	r2, [sp, #28]
   32f2c:	blt	331e0 <__assert_fail@plt+0x2134c>
   32f30:	mov	r1, #1
   32f34:	cmp	r6, #31
   32f38:	add	r0, r0, #8
   32f3c:	mov	sl, #0
   32f40:	mvn	r2, r1, lsl r6
   32f44:	lsl	r1, r1, r6
   32f48:	str	r0, [sp, #32]
   32f4c:	str	r2, [sp, #16]
   32f50:	ldr	r2, [fp, #-32]	; 0xffffffe0
   32f54:	str	r1, [sp, #24]
   32f58:	mov	r1, #0
   32f5c:	movwgt	r1, #1
   32f60:	and	r3, r2, #2
   32f64:	and	r0, r2, #1
   32f68:	orr	r1, r1, r3, lsr #1
   32f6c:	str	r3, [sp, #20]
   32f70:	str	r0, [sp, #8]
   32f74:	str	r1, [sp, #12]
   32f78:	b	33098 <__assert_fail@plt+0x21204>
   32f7c:	ldr	r2, [sp, #12]
   32f80:	cmp	r2, #0
   32f84:	beq	33004 <__assert_fail@plt+0x21170>
   32f88:	add	r5, r0, r1, lsl #3
   32f8c:	ldr	r0, [r5]
   32f90:	cmp	r0, r8
   32f94:	bne	32ff0 <__assert_fail@plt+0x2115c>
   32f98:	ldr	r0, [r4, #20]
   32f9c:	add	r1, r8, r8, lsl #1
   32fa0:	add	r0, r0, r1, lsl #2
   32fa4:	ldr	r0, [r0, #8]
   32fa8:	ldr	r3, [r0]
   32fac:	ldr	r0, [sp, #36]	; 0x24
   32fb0:	cmp	r3, r0
   32fb4:	beq	331f0 <__assert_fail@plt+0x2135c>
   32fb8:	ldr	r0, [fp, #8]
   32fbc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   32fc0:	mov	r2, r6
   32fc4:	str	r0, [sp]
   32fc8:	mov	r0, r7
   32fcc:	bl	32ef0 <__assert_fail@plt+0x2105c>
   32fd0:	cmp	r0, #0
   32fd4:	beq	32fe4 <__assert_fail@plt+0x21150>
   32fd8:	cmn	r0, #1
   32fdc:	bne	32ff0 <__assert_fail@plt+0x2115c>
   32fe0:	b	33204 <__assert_fail@plt+0x21370>
   32fe4:	ldr	r0, [sp, #20]
   32fe8:	cmp	r0, #0
   32fec:	bne	33200 <__assert_fail@plt+0x2136c>
   32ff0:	ldrb	r0, [r5, #20]
   32ff4:	add	r5, r5, #24
   32ff8:	cmp	r0, #0
   32ffc:	bne	32f8c <__assert_fail@plt+0x210f8>
   33000:	b	331cc <__assert_fail@plt+0x21338>
   33004:	add	r0, r0, r1, lsl #3
   33008:	add	r5, r0, #16
   3300c:	ldr	r0, [r5, #-16]
   33010:	cmp	r0, r8
   33014:	bne	33060 <__assert_fail@plt+0x211cc>
   33018:	ldr	r0, [r4, #20]
   3301c:	add	r1, r8, r8, lsl #1
   33020:	add	r0, r0, r1, lsl #2
   33024:	ldr	r0, [r0, #8]
   33028:	ldr	r3, [r0]
   3302c:	ldr	r0, [sp, #36]	; 0x24
   33030:	cmp	r3, r0
   33034:	beq	331f0 <__assert_fail@plt+0x2135c>
   33038:	ldr	r0, [fp, #8]
   3303c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   33040:	mov	r2, r6
   33044:	str	r0, [sp]
   33048:	mov	r0, r7
   3304c:	bl	32ef0 <__assert_fail@plt+0x2105c>
   33050:	cmp	r0, #0
   33054:	beq	33074 <__assert_fail@plt+0x211e0>
   33058:	cmn	r0, #1
   3305c:	beq	33204 <__assert_fail@plt+0x21370>
   33060:	ldrb	r0, [r5, #4]
   33064:	add	r5, r5, #24
   33068:	cmp	r0, #0
   3306c:	bne	3300c <__assert_fail@plt+0x21178>
   33070:	b	331cc <__assert_fail@plt+0x21338>
   33074:	ldr	r0, [r5]
   33078:	ldr	r1, [sp, #16]
   3307c:	and	r0, r0, r1
   33080:	str	r0, [r5]
   33084:	ldrb	r0, [r5, #4]
   33088:	add	r5, r5, #24
   3308c:	cmp	r0, #0
   33090:	bne	3300c <__assert_fail@plt+0x21178>
   33094:	b	331cc <__assert_fail@plt+0x21338>
   33098:	ldr	r0, [sp, #32]
   3309c:	ldr	r0, [r0]
   330a0:	ldr	r8, [r0, sl, lsl #2]
   330a4:	ldr	r0, [r4]
   330a8:	add	r1, r0, r8, lsl #3
   330ac:	ldrb	r1, [r1, #4]
   330b0:	cmp	r1, #9
   330b4:	beq	33198 <__assert_fail@plt+0x21304>
   330b8:	cmp	r1, #8
   330bc:	beq	331b4 <__assert_fail@plt+0x21320>
   330c0:	cmp	r1, #4
   330c4:	bne	331cc <__assert_fail@plt+0x21338>
   330c8:	ldr	r0, [fp, #8]
   330cc:	cmn	r0, #1
   330d0:	beq	331cc <__assert_fail@plt+0x21338>
   330d4:	ldr	r1, [fp, #8]
   330d8:	ldr	r0, [r7, #116]	; 0x74
   330dc:	cmp	r6, #31
   330e0:	add	r1, r1, r1, lsl #1
   330e4:	bgt	32f7c <__assert_fail@plt+0x210e8>
   330e8:	add	r0, r0, r1, lsl #3
   330ec:	add	r9, r0, #16
   330f0:	ldr	r0, [r9, #-16]
   330f4:	cmp	r0, r8
   330f8:	bne	33184 <__assert_fail@plt+0x212f0>
   330fc:	ldr	r0, [r9]
   33100:	ldr	r1, [sp, #24]
   33104:	tst	r0, r1
   33108:	beq	33184 <__assert_fail@plt+0x212f0>
   3310c:	ldr	r0, [r4, #20]
   33110:	add	r1, r8, r8, lsl #1
   33114:	add	r0, r0, r1, lsl #2
   33118:	ldr	r0, [r0, #8]
   3311c:	ldr	r3, [r0]
   33120:	ldr	r0, [sp, #36]	; 0x24
   33124:	cmp	r3, r0
   33128:	beq	331f0 <__assert_fail@plt+0x2135c>
   3312c:	ldr	r0, [fp, #8]
   33130:	ldr	r1, [fp, #-32]	; 0xffffffe0
   33134:	mov	r2, r6
   33138:	str	r0, [sp]
   3313c:	mov	r0, r7
   33140:	bl	32ef0 <__assert_fail@plt+0x2105c>
   33144:	cmp	r0, #0
   33148:	beq	33158 <__assert_fail@plt+0x212c4>
   3314c:	cmn	r0, #1
   33150:	bne	33174 <__assert_fail@plt+0x212e0>
   33154:	b	33204 <__assert_fail@plt+0x21370>
   33158:	ldr	r0, [sp, #12]
   3315c:	cmp	r0, #0
   33160:	beq	33174 <__assert_fail@plt+0x212e0>
   33164:	ldr	r0, [sp, #20]
   33168:	cmp	r0, #0
   3316c:	beq	33184 <__assert_fail@plt+0x212f0>
   33170:	b	33200 <__assert_fail@plt+0x2136c>
   33174:	ldr	r0, [r9]
   33178:	ldr	r1, [sp, #16]
   3317c:	and	r0, r0, r1
   33180:	str	r0, [r9]
   33184:	ldrb	r0, [r9, #4]
   33188:	add	r9, r9, #24
   3318c:	cmp	r0, #0
   33190:	bne	330f0 <__assert_fail@plt+0x2125c>
   33194:	b	331cc <__assert_fail@plt+0x21338>
   33198:	ldr	r1, [sp, #20]
   3319c:	cmp	r1, #0
   331a0:	beq	331cc <__assert_fail@plt+0x21338>
   331a4:	ldr	r0, [r0, r8, lsl #3]
   331a8:	cmp	r0, r6
   331ac:	bne	331cc <__assert_fail@plt+0x21338>
   331b0:	b	33200 <__assert_fail@plt+0x2136c>
   331b4:	ldr	r1, [sp, #8]
   331b8:	cmp	r1, #0
   331bc:	beq	331cc <__assert_fail@plt+0x21338>
   331c0:	ldr	r0, [r0, r8, lsl #3]
   331c4:	cmp	r0, r6
   331c8:	beq	3320c <__assert_fail@plt+0x21378>
   331cc:	ldr	r0, [sp, #28]
   331d0:	add	sl, sl, #1
   331d4:	ldr	r0, [r0]
   331d8:	cmp	sl, r0
   331dc:	blt	33098 <__assert_fail@plt+0x21204>
   331e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   331e4:	ubfx	r0, r0, #1, #1
   331e8:	sub	sp, fp, #28
   331ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   331f0:	ldr	r0, [sp, #8]
   331f4:	rsb	r0, r0, #0
   331f8:	sub	sp, fp, #28
   331fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33200:	mov	r0, #0
   33204:	sub	sp, fp, #28
   33208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3320c:	mvn	r0, #0
   33210:	sub	sp, fp, #28
   33214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33218:	push	{r4, r5, fp, lr}
   3321c:	add	fp, sp, #8
   33220:	mov	r4, r1
   33224:	mov	r1, #0
   33228:	mov	r5, r0
   3322c:	mov	r2, r4
   33230:	bl	11d14 <memchr@plt>
   33234:	rsb	r1, r5, #1
   33238:	cmp	r0, #0
   3323c:	addne	r4, r1, r0
   33240:	mov	r0, r4
   33244:	pop	{r4, r5, fp, pc}
   33248:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3324c:	add	fp, sp, #24
   33250:	mov	r4, r0
   33254:	cmp	r0, #0
   33258:	beq	3328c <__assert_fail@plt+0x213f8>
   3325c:	mov	r0, r4
   33260:	bl	11c78 <strlen@plt>
   33264:	add	r5, r0, #1
   33268:	cmp	r5, #58	; 0x3a
   3326c:	bls	33290 <__assert_fail@plt+0x213fc>
   33270:	add	r0, r0, #10
   33274:	bic	r0, r0, #3
   33278:	bl	36fb4 <__assert_fail@plt+0x25120>
   3327c:	mov	r6, r0
   33280:	cmp	r0, #0
   33284:	bne	332a4 <__assert_fail@plt+0x21410>
   33288:	b	332dc <__assert_fail@plt+0x21448>
   3328c:	mov	r5, #0
   33290:	mov	r0, #64	; 0x40
   33294:	bl	36fb4 <__assert_fail@plt+0x25120>
   33298:	mov	r6, r0
   3329c:	cmp	r0, #0
   332a0:	beq	332dc <__assert_fail@plt+0x21448>
   332a4:	cmp	r4, #0
   332a8:	mov	r0, r4
   332ac:	mov	r8, #0
   332b0:	mov	r7, r6
   332b4:	movwne	r0, #1
   332b8:	str	r8, [r6]
   332bc:	strb	r0, [r6, #4]
   332c0:	strb	r8, [r7, #5]!
   332c4:	beq	332dc <__assert_fail@plt+0x21448>
   332c8:	mov	r0, r7
   332cc:	mov	r1, r4
   332d0:	mov	r2, r5
   332d4:	bl	11a8c <memcpy@plt>
   332d8:	strb	r8, [r7, r5]
   332dc:	mov	r0, r6
   332e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   332e4:	push	{r4, sl, fp, lr}
   332e8:	add	fp, sp, #8
   332ec:	cmp	r0, #2
   332f0:	popcc	{r4, sl, fp, pc}
   332f4:	ldr	r4, [r0]
   332f8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   332fc:	cmp	r4, #0
   33300:	mov	r0, r4
   33304:	bne	332f4 <__assert_fail@plt+0x21460>
   33308:	pop	{r4, sl, fp, pc}
   3330c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33310:	add	fp, sp, #28
   33314:	sub	sp, sp, #4
   33318:	mov	r9, r2
   3331c:	mov	r7, r1
   33320:	cmp	r0, #0
   33324:	beq	3339c <__assert_fail@plt+0x21508>
   33328:	mov	r6, r0
   3332c:	movw	r0, #38557	; 0x969d
   33330:	movt	r0, #3
   33334:	bl	11bdc <getenv@plt>
   33338:	mov	r4, r0
   3333c:	ldrb	r0, [r6, #4]
   33340:	cmp	r4, #0
   33344:	beq	333b0 <__assert_fail@plt+0x2151c>
   33348:	cmp	r0, #0
   3334c:	beq	33364 <__assert_fail@plt+0x214d0>
   33350:	add	r0, r6, #5
   33354:	mov	r1, r4
   33358:	bl	11a14 <strcmp@plt>
   3335c:	cmp	r0, #0
   33360:	beq	33474 <__assert_fail@plt+0x215e0>
   33364:	mov	r0, r4
   33368:	bl	11c78 <strlen@plt>
   3336c:	add	sl, r0, #1
   33370:	mov	r8, #1
   33374:	cmp	sl, #58	; 0x3a
   33378:	bls	333c0 <__assert_fail@plt+0x2152c>
   3337c:	add	r0, r0, #10
   33380:	bic	r0, r0, #3
   33384:	bl	36fb4 <__assert_fail@plt+0x25120>
   33388:	cmp	r0, #0
   3338c:	bne	333d0 <__assert_fail@plt+0x2153c>
   33390:	mov	r0, #0
   33394:	sub	sp, fp, #28
   33398:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3339c:	mov	r0, r7
   333a0:	mov	r1, r9
   333a4:	sub	sp, fp, #28
   333a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   333ac:	b	119f0 <gmtime_r@plt>
   333b0:	mov	r8, #0
   333b4:	cmp	r0, #0
   333b8:	mov	sl, #0
   333bc:	beq	33474 <__assert_fail@plt+0x215e0>
   333c0:	mov	r0, #64	; 0x40
   333c4:	bl	36fb4 <__assert_fail@plt+0x25120>
   333c8:	cmp	r0, #0
   333cc:	beq	33390 <__assert_fail@plt+0x214fc>
   333d0:	mov	r5, r0
   333d4:	str	r7, [sp]
   333d8:	strb	r8, [r0, #4]
   333dc:	mov	r0, #0
   333e0:	cmp	r8, #0
   333e4:	mov	r7, r5
   333e8:	str	r0, [r5]
   333ec:	strb	r0, [r7, #5]!
   333f0:	beq	3340c <__assert_fail@plt+0x21578>
   333f4:	mov	r0, r7
   333f8:	mov	r1, r4
   333fc:	mov	r2, sl
   33400:	mov	r8, #0
   33404:	bl	11a8c <memcpy@plt>
   33408:	strb	r8, [r7, sl]
   3340c:	ldrb	r0, [r6, #4]
   33410:	cmp	r0, #0
   33414:	beq	3347c <__assert_fail@plt+0x215e8>
   33418:	movw	r0, #38557	; 0x969d
   3341c:	add	r1, r6, #5
   33420:	mov	r2, #1
   33424:	movt	r0, #3
   33428:	bl	11c90 <setenv@plt>
   3342c:	ldr	r7, [sp]
   33430:	cmp	r0, #0
   33434:	beq	33494 <__assert_fail@plt+0x21600>
   33438:	bl	11ca8 <__errno_location@plt>
   3343c:	ldr	r6, [r0]
   33440:	mov	r4, r0
   33444:	cmp	r5, #2
   33448:	bcc	33464 <__assert_fail@plt+0x215d0>
   3344c:	ldr	r7, [r5]
   33450:	mov	r0, r5
   33454:	bl	17b10 <__assert_fail@plt+0x5c7c>
   33458:	cmp	r7, #0
   3345c:	mov	r5, r7
   33460:	bne	3344c <__assert_fail@plt+0x215b8>
   33464:	str	r6, [r4]
   33468:	mov	r0, #0
   3346c:	sub	sp, fp, #28
   33470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33474:	mov	r5, #1
   33478:	b	33498 <__assert_fail@plt+0x21604>
   3347c:	movw	r0, #38557	; 0x969d
   33480:	movt	r0, #3
   33484:	bl	11e34 <unsetenv@plt>
   33488:	ldr	r7, [sp]
   3348c:	cmp	r0, #0
   33490:	bne	33438 <__assert_fail@plt+0x215a4>
   33494:	bl	11b40 <tzset@plt>
   33498:	mov	r0, r7
   3349c:	mov	r1, r9
   334a0:	bl	11af8 <localtime_r@plt>
   334a4:	cmp	r0, #0
   334a8:	beq	33524 <__assert_fail@plt+0x21690>
   334ac:	mov	r0, r6
   334b0:	mov	r1, r9
   334b4:	bl	33634 <__assert_fail@plt+0x217a0>
   334b8:	mov	r6, r0
   334bc:	cmp	r5, #1
   334c0:	beq	33590 <__assert_fail@plt+0x216fc>
   334c4:	bl	11ca8 <__errno_location@plt>
   334c8:	mov	r8, r0
   334cc:	ldr	sl, [r0]
   334d0:	ldrb	r0, [r5, #4]
   334d4:	cmp	r0, #0
   334d8:	beq	33598 <__assert_fail@plt+0x21704>
   334dc:	movw	r0, #38557	; 0x969d
   334e0:	add	r1, r5, #5
   334e4:	mov	r2, #1
   334e8:	movt	r0, #3
   334ec:	bl	11c90 <setenv@plt>
   334f0:	cmp	r0, #0
   334f4:	beq	335ac <__assert_fail@plt+0x21718>
   334f8:	ldr	sl, [r8]
   334fc:	mov	r4, #0
   33500:	cmp	r5, #2
   33504:	bcc	33614 <__assert_fail@plt+0x21780>
   33508:	ldr	r7, [r5]
   3350c:	mov	r0, r5
   33510:	bl	17b10 <__assert_fail@plt+0x5c7c>
   33514:	cmp	r7, #0
   33518:	mov	r5, r7
   3351c:	bne	33508 <__assert_fail@plt+0x21674>
   33520:	b	33614 <__assert_fail@plt+0x21780>
   33524:	mov	r6, #0
   33528:	cmp	r5, #1
   3352c:	beq	33590 <__assert_fail@plt+0x216fc>
   33530:	bl	11ca8 <__errno_location@plt>
   33534:	mov	r8, r0
   33538:	ldr	sl, [r0]
   3353c:	ldrb	r0, [r5, #4]
   33540:	cmp	r0, #0
   33544:	beq	335d8 <__assert_fail@plt+0x21744>
   33548:	movw	r0, #38557	; 0x969d
   3354c:	add	r1, r5, #5
   33550:	mov	r2, #1
   33554:	movt	r0, #3
   33558:	bl	11c90 <setenv@plt>
   3355c:	cmp	r0, #0
   33560:	beq	335ec <__assert_fail@plt+0x21758>
   33564:	ldr	sl, [r8]
   33568:	mov	r4, #0
   3356c:	cmp	r5, #2
   33570:	bcc	33614 <__assert_fail@plt+0x21780>
   33574:	ldr	r7, [r5]
   33578:	mov	r0, r5
   3357c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   33580:	cmp	r7, #0
   33584:	mov	r5, r7
   33588:	bne	33574 <__assert_fail@plt+0x216e0>
   3358c:	b	33614 <__assert_fail@plt+0x21780>
   33590:	mov	r4, #1
   33594:	b	33618 <__assert_fail@plt+0x21784>
   33598:	movw	r0, #38557	; 0x969d
   3359c:	movt	r0, #3
   335a0:	bl	11e34 <unsetenv@plt>
   335a4:	cmp	r0, #0
   335a8:	bne	334f8 <__assert_fail@plt+0x21664>
   335ac:	bl	11b40 <tzset@plt>
   335b0:	mov	r4, #1
   335b4:	cmp	r5, #2
   335b8:	bcc	33614 <__assert_fail@plt+0x21780>
   335bc:	ldr	r7, [r5]
   335c0:	mov	r0, r5
   335c4:	bl	17b10 <__assert_fail@plt+0x5c7c>
   335c8:	cmp	r7, #0
   335cc:	mov	r5, r7
   335d0:	bne	335bc <__assert_fail@plt+0x21728>
   335d4:	b	33614 <__assert_fail@plt+0x21780>
   335d8:	movw	r0, #38557	; 0x969d
   335dc:	movt	r0, #3
   335e0:	bl	11e34 <unsetenv@plt>
   335e4:	cmp	r0, #0
   335e8:	bne	33564 <__assert_fail@plt+0x216d0>
   335ec:	bl	11b40 <tzset@plt>
   335f0:	mov	r4, #1
   335f4:	cmp	r5, #2
   335f8:	bcc	33614 <__assert_fail@plt+0x21780>
   335fc:	ldr	r7, [r5]
   33600:	mov	r0, r5
   33604:	bl	17b10 <__assert_fail@plt+0x5c7c>
   33608:	cmp	r7, #0
   3360c:	mov	r5, r7
   33610:	bne	335fc <__assert_fail@plt+0x21768>
   33614:	str	sl, [r8]
   33618:	cmp	r6, #0
   3361c:	moveq	r9, r6
   33620:	cmp	r4, #0
   33624:	moveq	r9, r4
   33628:	mov	r0, r9
   3362c:	sub	sp, fp, #28
   33630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33634:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33638:	add	fp, sp, #28
   3363c:	sub	sp, sp, #4
   33640:	ldr	r7, [r1, #40]	; 0x28
   33644:	mov	r8, #1
   33648:	cmp	r7, #0
   3364c:	beq	336f0 <__assert_fail@plt+0x2185c>
   33650:	mov	r5, r1
   33654:	mov	r6, r0
   33658:	cmp	r7, r1
   3365c:	bcc	3366c <__assert_fail@plt+0x217d8>
   33660:	add	r0, r5, #44	; 0x2c
   33664:	cmp	r7, r0
   33668:	bcc	336f0 <__assert_fail@plt+0x2185c>
   3366c:	ldrb	r0, [r7]
   33670:	cmp	r0, #0
   33674:	beq	336e4 <__assert_fail@plt+0x21850>
   33678:	add	r4, r6, #5
   3367c:	b	33690 <__assert_fail@plt+0x217fc>
   33680:	ldr	r0, [r6]
   33684:	cmp	r0, #0
   33688:	addne	r4, r0, #5
   3368c:	movne	r6, r0
   33690:	mov	r0, r4
   33694:	mov	r1, r7
   33698:	bl	11a14 <strcmp@plt>
   3369c:	cmp	r0, #0
   336a0:	beq	33794 <__assert_fail@plt+0x21900>
   336a4:	ldrb	r0, [r4]
   336a8:	cmp	r0, #0
   336ac:	bne	336c8 <__assert_fail@plt+0x21834>
   336b0:	add	r0, r6, #5
   336b4:	cmp	r4, r0
   336b8:	bne	336fc <__assert_fail@plt+0x21868>
   336bc:	ldrb	r0, [r6, #4]
   336c0:	cmp	r0, #0
   336c4:	beq	336fc <__assert_fail@plt+0x21868>
   336c8:	mov	r0, r4
   336cc:	bl	11c78 <strlen@plt>
   336d0:	add	r4, r4, r0
   336d4:	ldrb	r0, [r4, #1]!
   336d8:	cmp	r0, #0
   336dc:	bne	33690 <__assert_fail@plt+0x217fc>
   336e0:	b	33680 <__assert_fail@plt+0x217ec>
   336e4:	movw	r4, #38108	; 0x94dc
   336e8:	movt	r4, #3
   336ec:	str	r4, [r5, #40]	; 0x28
   336f0:	mov	r0, r8
   336f4:	sub	sp, fp, #28
   336f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   336fc:	add	r0, r6, #64	; 0x40
   33700:	sub	sl, r0, r4
   33704:	mov	r0, r7
   33708:	bl	11c78 <strlen@plt>
   3370c:	add	r9, r0, #1
   33710:	cmp	r9, sl
   33714:	bge	33740 <__assert_fail@plt+0x218ac>
   33718:	mov	r0, r4
   3371c:	mov	r1, r7
   33720:	mov	r2, r9
   33724:	bl	11a8c <memcpy@plt>
   33728:	mov	r0, #0
   3372c:	strb	r0, [r4, r9]
   33730:	str	r4, [r5, #40]	; 0x28
   33734:	mov	r0, r8
   33738:	sub	sp, fp, #28
   3373c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33740:	add	r0, r0, #10
   33744:	cmp	r9, #59	; 0x3b
   33748:	bic	r0, r0, #3
   3374c:	movwcc	r0, #64	; 0x40
   33750:	bl	36fb4 <__assert_fail@plt+0x25120>
   33754:	cmp	r0, #0
   33758:	beq	337a4 <__assert_fail@plt+0x21910>
   3375c:	mov	sl, r0
   33760:	mov	r0, #0
   33764:	mov	r1, r7
   33768:	mov	r2, r9
   3376c:	str	r0, [sl]
   33770:	mov	r0, #1
   33774:	add	r4, sl, #5
   33778:	strh	r0, [sl, #4]
   3377c:	mov	r0, r4
   33780:	bl	11a8c <memcpy@plt>
   33784:	mov	r0, #0
   33788:	strb	r0, [r4, r9]
   3378c:	str	sl, [r6]
   33790:	strb	r0, [sl, #4]
   33794:	str	r4, [r5, #40]	; 0x28
   33798:	mov	r0, r8
   3379c:	sub	sp, fp, #28
   337a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   337a4:	mov	r8, #0
   337a8:	str	r8, [r6]
   337ac:	mov	r0, r8
   337b0:	sub	sp, fp, #28
   337b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   337b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   337bc:	add	fp, sp, #28
   337c0:	sub	sp, sp, #52	; 0x34
   337c4:	mov	r9, r1
   337c8:	cmp	r0, #0
   337cc:	beq	33848 <__assert_fail@plt+0x219b4>
   337d0:	mov	r7, r0
   337d4:	movw	r0, #38557	; 0x969d
   337d8:	movt	r0, #3
   337dc:	bl	11bdc <getenv@plt>
   337e0:	mov	r6, r0
   337e4:	ldrb	r0, [r7, #4]
   337e8:	cmp	r6, #0
   337ec:	beq	33858 <__assert_fail@plt+0x219c4>
   337f0:	cmp	r0, #0
   337f4:	beq	3380c <__assert_fail@plt+0x21978>
   337f8:	add	r0, r7, #5
   337fc:	mov	r1, r6
   33800:	bl	11a14 <strcmp@plt>
   33804:	cmp	r0, #0
   33808:	beq	3391c <__assert_fail@plt+0x21a88>
   3380c:	mov	r0, r6
   33810:	bl	11c78 <strlen@plt>
   33814:	add	r8, r0, #1
   33818:	mov	sl, #1
   3381c:	cmp	r8, #58	; 0x3a
   33820:	bls	33868 <__assert_fail@plt+0x219d4>
   33824:	add	r0, r0, #10
   33828:	bic	r0, r0, #3
   3382c:	bl	36fb4 <__assert_fail@plt+0x25120>
   33830:	mvn	r4, #0
   33834:	cmp	r0, #0
   33838:	bne	3387c <__assert_fail@plt+0x219e8>
   3383c:	mov	r0, r4
   33840:	sub	sp, fp, #28
   33844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33848:	mov	r0, r9
   3384c:	sub	sp, fp, #28
   33850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33854:	b	11dbc <timegm@plt>
   33858:	mov	sl, #0
   3385c:	cmp	r0, #0
   33860:	mov	r8, #0
   33864:	beq	3391c <__assert_fail@plt+0x21a88>
   33868:	mov	r0, #64	; 0x40
   3386c:	bl	36fb4 <__assert_fail@plt+0x25120>
   33870:	mvn	r4, #0
   33874:	cmp	r0, #0
   33878:	beq	3383c <__assert_fail@plt+0x219a8>
   3387c:	mov	r5, r0
   33880:	strb	sl, [r0, #4]
   33884:	mov	r0, #0
   33888:	cmp	sl, #0
   3388c:	mov	r4, r5
   33890:	str	r0, [r5]
   33894:	strb	r0, [r4, #5]!
   33898:	beq	338b4 <__assert_fail@plt+0x21a20>
   3389c:	mov	r0, r4
   338a0:	mov	r1, r6
   338a4:	mov	r2, r8
   338a8:	mov	sl, #0
   338ac:	bl	11a8c <memcpy@plt>
   338b0:	strb	sl, [r4, r8]
   338b4:	ldrb	r0, [r7, #4]
   338b8:	cmp	r0, #0
   338bc:	beq	33924 <__assert_fail@plt+0x21a90>
   338c0:	movw	r0, #38557	; 0x969d
   338c4:	add	r1, r7, #5
   338c8:	mov	r2, #1
   338cc:	movt	r0, #3
   338d0:	bl	11c90 <setenv@plt>
   338d4:	mvn	r4, #0
   338d8:	cmp	r0, #0
   338dc:	beq	3393c <__assert_fail@plt+0x21aa8>
   338e0:	bl	11ca8 <__errno_location@plt>
   338e4:	ldr	r8, [r0]
   338e8:	mov	r6, r0
   338ec:	cmp	r5, #2
   338f0:	bcc	3390c <__assert_fail@plt+0x21a78>
   338f4:	ldr	r7, [r5]
   338f8:	mov	r0, r5
   338fc:	bl	17b10 <__assert_fail@plt+0x5c7c>
   33900:	cmp	r7, #0
   33904:	mov	r5, r7
   33908:	bne	338f4 <__assert_fail@plt+0x21a60>
   3390c:	str	r8, [r6]
   33910:	mov	r0, r4
   33914:	sub	sp, fp, #28
   33918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3391c:	mov	r5, #1
   33920:	b	33940 <__assert_fail@plt+0x21aac>
   33924:	movw	r0, #38557	; 0x969d
   33928:	movt	r0, #3
   3392c:	bl	11e34 <unsetenv@plt>
   33930:	mvn	r4, #0
   33934:	cmp	r0, #0
   33938:	bne	338e0 <__assert_fail@plt+0x21a4c>
   3393c:	bl	11b40 <tzset@plt>
   33940:	mov	r1, #32
   33944:	mov	r2, r9
   33948:	add	r0, sp, #8
   3394c:	vld1.32	{d16-d17}, [r2], r1
   33950:	mov	r3, r0
   33954:	vst1.32	{d16-d17}, [r3], r1
   33958:	ldr	r1, [r9, #16]
   3395c:	ldr	r6, [r9, #20]
   33960:	str	r1, [sp, #24]
   33964:	mvn	r1, #0
   33968:	str	r1, [sp, #36]	; 0x24
   3396c:	str	r6, [sp, #28]
   33970:	ldr	r1, [r2]
   33974:	str	r1, [r3]
   33978:	bl	11a2c <mktime@plt>
   3397c:	ldr	r1, [sp, #36]	; 0x24
   33980:	cmn	r1, #1
   33984:	ble	33a0c <__assert_fail@plt+0x21b78>
   33988:	add	r8, sp, #8
   3398c:	str	r0, [sp, #4]
   33990:	mov	r0, r7
   33994:	mov	r1, r8
   33998:	bl	33634 <__assert_fail@plt+0x217a0>
   3399c:	mov	sl, r0
   339a0:	cmp	r5, #1
   339a4:	beq	33a70 <__assert_fail@plt+0x21bdc>
   339a8:	bl	11ca8 <__errno_location@plt>
   339ac:	mov	r7, r0
   339b0:	ldr	r4, [r0]
   339b4:	ldrb	r0, [r5, #4]
   339b8:	cmp	r0, #0
   339bc:	beq	33a90 <__assert_fail@plt+0x21bfc>
   339c0:	movw	r0, #38557	; 0x969d
   339c4:	add	r1, r5, #5
   339c8:	mov	r2, #1
   339cc:	movt	r0, #3
   339d0:	bl	11c90 <setenv@plt>
   339d4:	cmp	r0, #0
   339d8:	beq	33aa4 <__assert_fail@plt+0x21c10>
   339dc:	ldr	r4, [r7]
   339e0:	mov	r6, #0
   339e4:	cmp	r5, #2
   339e8:	bcc	33ad4 <__assert_fail@plt+0x21c40>
   339ec:	str	r4, [sp]
   339f0:	ldr	r4, [r5]
   339f4:	mov	r0, r5
   339f8:	bl	17b10 <__assert_fail@plt+0x5c7c>
   339fc:	cmp	r4, #0
   33a00:	mov	r5, r4
   33a04:	bne	339f0 <__assert_fail@plt+0x21b5c>
   33a08:	b	33ad0 <__assert_fail@plt+0x21c3c>
   33a0c:	cmp	r5, #1
   33a10:	beq	33a80 <__assert_fail@plt+0x21bec>
   33a14:	bl	11ca8 <__errno_location@plt>
   33a18:	mov	r4, r0
   33a1c:	ldr	r6, [r0]
   33a20:	ldrb	r0, [r5, #4]
   33a24:	cmp	r0, #0
   33a28:	beq	33b18 <__assert_fail@plt+0x21c84>
   33a2c:	movw	r0, #38557	; 0x969d
   33a30:	add	r1, r5, #5
   33a34:	mov	r2, #1
   33a38:	movt	r0, #3
   33a3c:	bl	11c90 <setenv@plt>
   33a40:	cmp	r0, #0
   33a44:	beq	33b2c <__assert_fail@plt+0x21c98>
   33a48:	ldr	r6, [r4]
   33a4c:	cmp	r5, #2
   33a50:	bcc	33b50 <__assert_fail@plt+0x21cbc>
   33a54:	ldr	r7, [r5]
   33a58:	mov	r0, r5
   33a5c:	bl	17b10 <__assert_fail@plt+0x5c7c>
   33a60:	cmp	r7, #0
   33a64:	mov	r5, r7
   33a68:	bne	33a54 <__assert_fail@plt+0x21bc0>
   33a6c:	b	33b50 <__assert_fail@plt+0x21cbc>
   33a70:	mov	r6, #1
   33a74:	and	r0, sl, r6
   33a78:	cmp	r0, #1
   33a7c:	beq	33ae4 <__assert_fail@plt+0x21c50>
   33a80:	mvn	r4, #0
   33a84:	mov	r0, r4
   33a88:	sub	sp, fp, #28
   33a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33a90:	movw	r0, #38557	; 0x969d
   33a94:	movt	r0, #3
   33a98:	bl	11e34 <unsetenv@plt>
   33a9c:	cmp	r0, #0
   33aa0:	bne	339dc <__assert_fail@plt+0x21b48>
   33aa4:	bl	11b40 <tzset@plt>
   33aa8:	mov	r6, #1
   33aac:	cmp	r5, #2
   33ab0:	bcc	33ad4 <__assert_fail@plt+0x21c40>
   33ab4:	str	r4, [sp]
   33ab8:	ldr	r4, [r5]
   33abc:	mov	r0, r5
   33ac0:	bl	17b10 <__assert_fail@plt+0x5c7c>
   33ac4:	cmp	r4, #0
   33ac8:	mov	r5, r4
   33acc:	bne	33ab8 <__assert_fail@plt+0x21c24>
   33ad0:	ldr	r4, [sp]
   33ad4:	str	r4, [r7]
   33ad8:	and	r0, sl, r6
   33adc:	cmp	r0, #1
   33ae0:	bne	33a80 <__assert_fail@plt+0x21bec>
   33ae4:	mov	r0, #28
   33ae8:	add	r1, r8, #16
   33aec:	ldr	r4, [sp, #4]
   33af0:	vld1.32	{d16-d17}, [r8], r0
   33af4:	vld1.64	{d18-d19}, [r1]
   33af8:	add	r1, r9, #16
   33afc:	vld1.32	{d20-d21}, [r8]
   33b00:	vst1.32	{d16-d17}, [r9], r0
   33b04:	vst1.32	{d18-d19}, [r1]
   33b08:	vst1.32	{d20-d21}, [r9]
   33b0c:	mov	r0, r4
   33b10:	sub	sp, fp, #28
   33b14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33b18:	movw	r0, #38557	; 0x969d
   33b1c:	movt	r0, #3
   33b20:	bl	11e34 <unsetenv@plt>
   33b24:	cmp	r0, #0
   33b28:	bne	33a48 <__assert_fail@plt+0x21bb4>
   33b2c:	bl	11b40 <tzset@plt>
   33b30:	cmp	r5, #2
   33b34:	bcc	33b50 <__assert_fail@plt+0x21cbc>
   33b38:	ldr	r7, [r5]
   33b3c:	mov	r0, r5
   33b40:	bl	17b10 <__assert_fail@plt+0x5c7c>
   33b44:	cmp	r7, #0
   33b48:	mov	r5, r7
   33b4c:	bne	33b38 <__assert_fail@plt+0x21ca4>
   33b50:	str	r6, [r4]
   33b54:	mvn	r4, #0
   33b58:	mov	r0, r4
   33b5c:	sub	sp, fp, #28
   33b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33b64:	push	{r4, r5, r6, r7, fp, lr}
   33b68:	add	fp, sp, #16
   33b6c:	mov	r4, r0
   33b70:	cmp	r0, #2
   33b74:	movhi	r0, r4
   33b78:	pophi	{r4, r5, r6, r7, fp, pc}
   33b7c:	mov	r0, r4
   33b80:	bl	381d4 <__assert_fail@plt+0x26340>
   33b84:	mov	r5, r0
   33b88:	bl	11ca8 <__errno_location@plt>
   33b8c:	ldr	r7, [r0]
   33b90:	mov	r6, r0
   33b94:	mov	r0, r4
   33b98:	bl	11e70 <close@plt>
   33b9c:	mov	r0, r5
   33ba0:	str	r7, [r6]
   33ba4:	pop	{r4, r5, r6, r7, fp, pc}
   33ba8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   33bac:	add	fp, sp, #24
   33bb0:	sub	sp, sp, #32
   33bb4:	ldr	r6, [fp, #12]
   33bb8:	ldr	r7, [fp, #8]
   33bbc:	mov	r4, r2
   33bc0:	mov	r8, r0
   33bc4:	cmp	r1, #0
   33bc8:	beq	33bf0 <__assert_fail@plt+0x21d5c>
   33bcc:	movw	r2, #42857	; 0xa769
   33bd0:	mov	r5, r1
   33bd4:	str	r3, [sp, #4]
   33bd8:	str	r4, [sp]
   33bdc:	mov	r0, r8
   33be0:	mov	r1, #1
   33be4:	movt	r2, #3
   33be8:	mov	r3, r5
   33bec:	b	33c08 <__assert_fail@plt+0x21d74>
   33bf0:	movw	r2, #42869	; 0xa775
   33bf4:	str	r3, [sp]
   33bf8:	mov	r0, r8
   33bfc:	mov	r1, #1
   33c00:	mov	r3, r4
   33c04:	movt	r2, #3
   33c08:	bl	11d08 <__fprintf_chk@plt>
   33c0c:	movw	r1, #42876	; 0xa77c
   33c10:	mov	r0, #0
   33c14:	mov	r2, #5
   33c18:	movt	r1, #3
   33c1c:	bl	11ad4 <dcgettext@plt>
   33c20:	movw	r2, #43594	; 0xaa4a
   33c24:	mov	r3, r0
   33c28:	movw	r0, #2022	; 0x7e6
   33c2c:	mov	r1, #1
   33c30:	str	r0, [sp]
   33c34:	movt	r2, #3
   33c38:	mov	r0, r8
   33c3c:	bl	11d08 <__fprintf_chk@plt>
   33c40:	movw	r4, #38107	; 0x94db
   33c44:	mov	r1, r8
   33c48:	movt	r4, #3
   33c4c:	mov	r0, r4
   33c50:	bl	119c0 <fputs_unlocked@plt>
   33c54:	movw	r1, #42880	; 0xa780
   33c58:	mov	r0, #0
   33c5c:	mov	r2, #5
   33c60:	movt	r1, #3
   33c64:	bl	11ad4 <dcgettext@plt>
   33c68:	movw	r3, #43051	; 0xa82b
   33c6c:	mov	r2, r0
   33c70:	mov	r0, r8
   33c74:	mov	r1, #1
   33c78:	movt	r3, #3
   33c7c:	bl	11d08 <__fprintf_chk@plt>
   33c80:	mov	r0, r4
   33c84:	mov	r1, r8
   33c88:	bl	119c0 <fputs_unlocked@plt>
   33c8c:	cmp	r6, #9
   33c90:	bhi	33ccc <__assert_fail@plt+0x21e38>
   33c94:	add	r0, pc, #0
   33c98:	ldr	pc, [r0, r6, lsl #2]
   33c9c:	andeq	r3, r3, r4, asr #25
   33ca0:	ldrdeq	r3, [r3], -r8
   33ca4:	andeq	r3, r3, r8, lsl #26
   33ca8:	andeq	r3, r3, r0, lsr sp
   33cac:	andeq	r3, r3, r8, asr sp
   33cb0:	andeq	r3, r3, r0, lsl #27
   33cb4:	andeq	r3, r3, r8, lsr #27
   33cb8:	andeq	r3, r3, r0, ror #27
   33cbc:	andeq	r3, r3, r8, lsl #29
   33cc0:	andeq	r3, r3, r0, lsr lr
   33cc4:	sub	sp, fp, #24
   33cc8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   33ccc:	movw	r1, #43404	; 0xa98c
   33cd0:	movt	r1, #3
   33cd4:	b	33e38 <__assert_fail@plt+0x21fa4>
   33cd8:	movw	r1, #43085	; 0xa84d
   33cdc:	mov	r0, #0
   33ce0:	mov	r2, #5
   33ce4:	movt	r1, #3
   33ce8:	bl	11ad4 <dcgettext@plt>
   33cec:	ldr	r3, [r7]
   33cf0:	mov	r2, r0
   33cf4:	mov	r0, r8
   33cf8:	mov	r1, #1
   33cfc:	sub	sp, fp, #24
   33d00:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   33d04:	b	11d08 <__fprintf_chk@plt>
   33d08:	movw	r1, #43101	; 0xa85d
   33d0c:	mov	r0, #0
   33d10:	mov	r2, #5
   33d14:	movt	r1, #3
   33d18:	bl	11ad4 <dcgettext@plt>
   33d1c:	mov	r2, r0
   33d20:	ldr	r3, [r7]
   33d24:	ldr	r0, [r7, #4]
   33d28:	str	r0, [sp]
   33d2c:	b	33e1c <__assert_fail@plt+0x21f88>
   33d30:	movw	r1, #43124	; 0xa874
   33d34:	mov	r0, #0
   33d38:	mov	r2, #5
   33d3c:	movt	r1, #3
   33d40:	bl	11ad4 <dcgettext@plt>
   33d44:	ldr	r3, [r7]
   33d48:	mov	r2, r0
   33d4c:	ldmib	r7, {r0, r1}
   33d50:	stm	sp, {r0, r1}
   33d54:	b	33e1c <__assert_fail@plt+0x21f88>
   33d58:	movw	r1, #43152	; 0xa890
   33d5c:	mov	r0, #0
   33d60:	mov	r2, #5
   33d64:	movt	r1, #3
   33d68:	bl	11ad4 <dcgettext@plt>
   33d6c:	ldr	r3, [r7]
   33d70:	mov	r2, r0
   33d74:	ldmib	r7, {r0, r1, r7}
   33d78:	stm	sp, {r0, r1, r7}
   33d7c:	b	33e1c <__assert_fail@plt+0x21f88>
   33d80:	movw	r1, #43184	; 0xa8b0
   33d84:	mov	r0, #0
   33d88:	mov	r2, #5
   33d8c:	movt	r1, #3
   33d90:	bl	11ad4 <dcgettext@plt>
   33d94:	ldr	r3, [r7]
   33d98:	mov	r2, r0
   33d9c:	ldmib	r7, {r0, r1, r6, r7}
   33da0:	stm	sp, {r0, r1, r6, r7}
   33da4:	b	33e1c <__assert_fail@plt+0x21f88>
   33da8:	movw	r1, #43220	; 0xa8d4
   33dac:	mov	r0, #0
   33db0:	mov	r2, #5
   33db4:	movt	r1, #3
   33db8:	bl	11ad4 <dcgettext@plt>
   33dbc:	ldr	r3, [r7]
   33dc0:	mov	r2, r0
   33dc4:	ldmib	r7, {r0, r1, r6}
   33dc8:	ldr	r5, [r7, #16]
   33dcc:	ldr	r7, [r7, #20]
   33dd0:	stm	sp, {r0, r1, r6}
   33dd4:	str	r5, [sp, #12]
   33dd8:	str	r7, [sp, #16]
   33ddc:	b	33e1c <__assert_fail@plt+0x21f88>
   33de0:	movw	r1, #43260	; 0xa8fc
   33de4:	mov	r0, #0
   33de8:	mov	r2, #5
   33dec:	movt	r1, #3
   33df0:	bl	11ad4 <dcgettext@plt>
   33df4:	ldr	r3, [r7]
   33df8:	mov	r2, r0
   33dfc:	ldmib	r7, {r0, r1, r6}
   33e00:	ldr	r5, [r7, #16]
   33e04:	ldr	r4, [r7, #20]
   33e08:	ldr	r7, [r7, #24]
   33e0c:	stm	sp, {r0, r1, r6}
   33e10:	str	r5, [sp, #12]
   33e14:	str	r4, [sp, #16]
   33e18:	str	r7, [sp, #20]
   33e1c:	mov	r0, r8
   33e20:	mov	r1, #1
   33e24:	bl	11d08 <__fprintf_chk@plt>
   33e28:	sub	sp, fp, #24
   33e2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   33e30:	movw	r1, #43352	; 0xa958
   33e34:	movt	r1, #3
   33e38:	mov	r0, #0
   33e3c:	mov	r2, #5
   33e40:	bl	11ad4 <dcgettext@plt>
   33e44:	mov	ip, r0
   33e48:	ldr	r3, [r7]
   33e4c:	ldr	r0, [r7, #4]
   33e50:	ldr	r1, [r7, #8]
   33e54:	ldr	r6, [r7, #12]
   33e58:	ldr	r5, [r7, #16]
   33e5c:	ldr	r4, [r7, #20]
   33e60:	ldr	r2, [r7, #24]
   33e64:	ldr	lr, [r7, #28]
   33e68:	ldr	r7, [r7, #32]
   33e6c:	stm	sp, {r0, r1, r6}
   33e70:	str	r5, [sp, #12]
   33e74:	str	r4, [sp, #16]
   33e78:	str	r2, [sp, #20]
   33e7c:	str	lr, [sp, #24]
   33e80:	str	r7, [sp, #28]
   33e84:	b	33ecc <__assert_fail@plt+0x22038>
   33e88:	movw	r1, #43304	; 0xa928
   33e8c:	mov	r0, #0
   33e90:	mov	r2, #5
   33e94:	movt	r1, #3
   33e98:	bl	11ad4 <dcgettext@plt>
   33e9c:	mov	ip, r0
   33ea0:	ldr	r3, [r7]
   33ea4:	ldmib	r7, {r0, r1, r6}
   33ea8:	ldr	r5, [r7, #16]
   33eac:	ldr	r4, [r7, #20]
   33eb0:	ldr	r2, [r7, #24]
   33eb4:	ldr	r7, [r7, #28]
   33eb8:	stm	sp, {r0, r1, r6}
   33ebc:	str	r5, [sp, #12]
   33ec0:	str	r4, [sp, #16]
   33ec4:	str	r2, [sp, #20]
   33ec8:	str	r7, [sp, #24]
   33ecc:	mov	r0, r8
   33ed0:	mov	r1, #1
   33ed4:	mov	r2, ip
   33ed8:	bl	11d08 <__fprintf_chk@plt>
   33edc:	sub	sp, fp, #24
   33ee0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   33ee4:	push	{r4, sl, fp, lr}
   33ee8:	add	fp, sp, #8
   33eec:	sub	sp, sp, #8
   33ef0:	ldr	ip, [fp, #8]
   33ef4:	mov	lr, #0
   33ef8:	ldr	r4, [ip, lr, lsl #2]
   33efc:	add	lr, lr, #1
   33f00:	cmp	r4, #0
   33f04:	bne	33ef8 <__assert_fail@plt+0x22064>
   33f08:	sub	r4, lr, #1
   33f0c:	str	ip, [sp]
   33f10:	str	r4, [sp, #4]
   33f14:	bl	33ba8 <__assert_fail@plt+0x21d14>
   33f18:	sub	sp, fp, #8
   33f1c:	pop	{r4, sl, fp, pc}
   33f20:	push	{fp, lr}
   33f24:	mov	fp, sp
   33f28:	sub	sp, sp, #48	; 0x30
   33f2c:	ldr	ip, [fp, #8]
   33f30:	ldr	lr, [ip]
   33f34:	cmp	lr, #0
   33f38:	str	lr, [sp, #8]
   33f3c:	beq	33fd8 <__assert_fail@plt+0x22144>
   33f40:	ldr	lr, [ip, #4]
   33f44:	cmp	lr, #0
   33f48:	str	lr, [sp, #12]
   33f4c:	beq	33fe0 <__assert_fail@plt+0x2214c>
   33f50:	ldr	lr, [ip, #8]
   33f54:	cmp	lr, #0
   33f58:	str	lr, [sp, #16]
   33f5c:	beq	33fe8 <__assert_fail@plt+0x22154>
   33f60:	ldr	lr, [ip, #12]
   33f64:	cmp	lr, #0
   33f68:	str	lr, [sp, #20]
   33f6c:	beq	33ff0 <__assert_fail@plt+0x2215c>
   33f70:	ldr	lr, [ip, #16]
   33f74:	cmp	lr, #0
   33f78:	str	lr, [sp, #24]
   33f7c:	beq	33ff8 <__assert_fail@plt+0x22164>
   33f80:	ldr	lr, [ip, #20]
   33f84:	cmp	lr, #0
   33f88:	str	lr, [sp, #28]
   33f8c:	beq	34000 <__assert_fail@plt+0x2216c>
   33f90:	ldr	lr, [ip, #24]
   33f94:	cmp	lr, #0
   33f98:	str	lr, [sp, #32]
   33f9c:	beq	34008 <__assert_fail@plt+0x22174>
   33fa0:	ldr	lr, [ip, #28]
   33fa4:	cmp	lr, #0
   33fa8:	str	lr, [sp, #36]	; 0x24
   33fac:	beq	34010 <__assert_fail@plt+0x2217c>
   33fb0:	ldr	lr, [ip, #32]
   33fb4:	cmp	lr, #0
   33fb8:	str	lr, [sp, #40]	; 0x28
   33fbc:	beq	34018 <__assert_fail@plt+0x22184>
   33fc0:	ldr	lr, [ip, #36]	; 0x24
   33fc4:	mov	ip, #10
   33fc8:	cmp	lr, #0
   33fcc:	str	lr, [sp, #44]	; 0x2c
   33fd0:	movweq	ip, #9
   33fd4:	b	3401c <__assert_fail@plt+0x22188>
   33fd8:	mov	ip, #0
   33fdc:	b	3401c <__assert_fail@plt+0x22188>
   33fe0:	mov	ip, #1
   33fe4:	b	3401c <__assert_fail@plt+0x22188>
   33fe8:	mov	ip, #2
   33fec:	b	3401c <__assert_fail@plt+0x22188>
   33ff0:	mov	ip, #3
   33ff4:	b	3401c <__assert_fail@plt+0x22188>
   33ff8:	mov	ip, #4
   33ffc:	b	3401c <__assert_fail@plt+0x22188>
   34000:	mov	ip, #5
   34004:	b	3401c <__assert_fail@plt+0x22188>
   34008:	mov	ip, #6
   3400c:	b	3401c <__assert_fail@plt+0x22188>
   34010:	mov	ip, #7
   34014:	b	3401c <__assert_fail@plt+0x22188>
   34018:	mov	ip, #8
   3401c:	add	lr, sp, #8
   34020:	str	ip, [sp, #4]
   34024:	str	lr, [sp]
   34028:	bl	33ba8 <__assert_fail@plt+0x21d14>
   3402c:	mov	sp, fp
   34030:	pop	{fp, pc}
   34034:	push	{fp, lr}
   34038:	mov	fp, sp
   3403c:	sub	sp, sp, #56	; 0x38
   34040:	add	ip, fp, #8
   34044:	str	ip, [sp, #12]
   34048:	ldr	lr, [fp, #8]
   3404c:	cmp	lr, #0
   34050:	str	lr, [sp, #16]
   34054:	beq	340f0 <__assert_fail@plt+0x2225c>
   34058:	ldr	lr, [ip, #4]
   3405c:	cmp	lr, #0
   34060:	str	lr, [sp, #20]
   34064:	beq	340f8 <__assert_fail@plt+0x22264>
   34068:	ldr	lr, [ip, #8]
   3406c:	cmp	lr, #0
   34070:	str	lr, [sp, #24]
   34074:	beq	34100 <__assert_fail@plt+0x2226c>
   34078:	ldr	lr, [ip, #12]
   3407c:	cmp	lr, #0
   34080:	str	lr, [sp, #28]
   34084:	beq	34108 <__assert_fail@plt+0x22274>
   34088:	ldr	lr, [ip, #16]
   3408c:	cmp	lr, #0
   34090:	str	lr, [sp, #32]
   34094:	beq	34110 <__assert_fail@plt+0x2227c>
   34098:	ldr	lr, [ip, #20]
   3409c:	cmp	lr, #0
   340a0:	str	lr, [sp, #36]	; 0x24
   340a4:	beq	34118 <__assert_fail@plt+0x22284>
   340a8:	ldr	lr, [ip, #24]
   340ac:	cmp	lr, #0
   340b0:	str	lr, [sp, #40]	; 0x28
   340b4:	beq	34120 <__assert_fail@plt+0x2228c>
   340b8:	ldr	lr, [ip, #28]
   340bc:	cmp	lr, #0
   340c0:	str	lr, [sp, #44]	; 0x2c
   340c4:	beq	34128 <__assert_fail@plt+0x22294>
   340c8:	ldr	lr, [ip, #32]
   340cc:	cmp	lr, #0
   340d0:	str	lr, [sp, #48]	; 0x30
   340d4:	beq	34130 <__assert_fail@plt+0x2229c>
   340d8:	ldr	lr, [ip, #36]	; 0x24
   340dc:	mov	ip, #10
   340e0:	cmp	lr, #0
   340e4:	str	lr, [sp, #52]	; 0x34
   340e8:	movweq	ip, #9
   340ec:	b	34134 <__assert_fail@plt+0x222a0>
   340f0:	mov	ip, #0
   340f4:	b	34134 <__assert_fail@plt+0x222a0>
   340f8:	mov	ip, #1
   340fc:	b	34134 <__assert_fail@plt+0x222a0>
   34100:	mov	ip, #2
   34104:	b	34134 <__assert_fail@plt+0x222a0>
   34108:	mov	ip, #3
   3410c:	b	34134 <__assert_fail@plt+0x222a0>
   34110:	mov	ip, #4
   34114:	b	34134 <__assert_fail@plt+0x222a0>
   34118:	mov	ip, #5
   3411c:	b	34134 <__assert_fail@plt+0x222a0>
   34120:	mov	ip, #6
   34124:	b	34134 <__assert_fail@plt+0x222a0>
   34128:	mov	ip, #7
   3412c:	b	34134 <__assert_fail@plt+0x222a0>
   34130:	mov	ip, #8
   34134:	add	lr, sp, #16
   34138:	str	ip, [sp, #4]
   3413c:	str	lr, [sp]
   34140:	bl	33ba8 <__assert_fail@plt+0x21d14>
   34144:	mov	sp, fp
   34148:	pop	{fp, pc}
   3414c:	push	{fp, lr}
   34150:	mov	fp, sp
   34154:	movw	r0, #45620	; 0xb234
   34158:	movt	r0, #4
   3415c:	ldr	r1, [r0]
   34160:	movw	r0, #38107	; 0x94db
   34164:	movt	r0, #3
   34168:	bl	119c0 <fputs_unlocked@plt>
   3416c:	movw	r1, #43464	; 0xa9c8
   34170:	mov	r0, #0
   34174:	mov	r2, #5
   34178:	movt	r1, #3
   3417c:	bl	11ad4 <dcgettext@plt>
   34180:	movw	r2, #43484	; 0xa9dc
   34184:	mov	r1, r0
   34188:	mov	r0, #1
   3418c:	movt	r2, #3
   34190:	bl	11cf0 <__printf_chk@plt>
   34194:	movw	r1, #43506	; 0xa9f2
   34198:	mov	r0, #0
   3419c:	mov	r2, #5
   341a0:	movt	r1, #3
   341a4:	bl	11ad4 <dcgettext@plt>
   341a8:	movw	r2, #38560	; 0x96a0
   341ac:	movw	r3, #39871	; 0x9bbf
   341b0:	mov	r1, r0
   341b4:	mov	r0, #1
   341b8:	movt	r2, #3
   341bc:	movt	r3, #3
   341c0:	bl	11cf0 <__printf_chk@plt>
   341c4:	movw	r1, #43526	; 0xaa06
   341c8:	mov	r0, #0
   341cc:	mov	r2, #5
   341d0:	movt	r1, #3
   341d4:	bl	11ad4 <dcgettext@plt>
   341d8:	movw	r2, #43565	; 0xaa2d
   341dc:	mov	r1, r0
   341e0:	mov	r0, #1
   341e4:	movt	r2, #3
   341e8:	pop	{fp, lr}
   341ec:	b	11cf0 <__printf_chk@plt>
   341f0:	push	{r4, r5, r6, sl, fp, lr}
   341f4:	add	fp, sp, #16
   341f8:	mov	r4, r2
   341fc:	mov	r5, r1
   34200:	mov	r6, r0
   34204:	bl	38198 <__assert_fail@plt+0x26304>
   34208:	cmp	r0, #0
   3420c:	popne	{r4, r5, r6, sl, fp, pc}
   34210:	cmp	r6, #0
   34214:	beq	34228 <__assert_fail@plt+0x22394>
   34218:	cmp	r5, #0
   3421c:	cmpne	r4, #0
   34220:	bne	34228 <__assert_fail@plt+0x22394>
   34224:	pop	{r4, r5, r6, sl, fp, pc}
   34228:	bl	347c8 <__assert_fail@plt+0x22934>
   3422c:	push	{r4, r5, r6, sl, fp, lr}
   34230:	add	fp, sp, #16
   34234:	mov	r4, r2
   34238:	mov	r5, r1
   3423c:	mov	r6, r0
   34240:	bl	38198 <__assert_fail@plt+0x26304>
   34244:	cmp	r0, #0
   34248:	popne	{r4, r5, r6, sl, fp, pc}
   3424c:	cmp	r6, #0
   34250:	beq	34264 <__assert_fail@plt+0x223d0>
   34254:	cmp	r5, #0
   34258:	cmpne	r4, #0
   3425c:	bne	34264 <__assert_fail@plt+0x223d0>
   34260:	pop	{r4, r5, r6, sl, fp, pc}
   34264:	bl	347c8 <__assert_fail@plt+0x22934>
   34268:	push	{fp, lr}
   3426c:	mov	fp, sp
   34270:	bl	36fb4 <__assert_fail@plt+0x25120>
   34274:	cmp	r0, #0
   34278:	popne	{fp, pc}
   3427c:	bl	347c8 <__assert_fail@plt+0x22934>
   34280:	push	{fp, lr}
   34284:	mov	fp, sp
   34288:	bl	36fb4 <__assert_fail@plt+0x25120>
   3428c:	cmp	r0, #0
   34290:	popne	{fp, pc}
   34294:	bl	347c8 <__assert_fail@plt+0x22934>
   34298:	push	{fp, lr}
   3429c:	mov	fp, sp
   342a0:	bl	36fb4 <__assert_fail@plt+0x25120>
   342a4:	cmp	r0, #0
   342a8:	popne	{fp, pc}
   342ac:	bl	347c8 <__assert_fail@plt+0x22934>
   342b0:	push	{r4, r5, fp, lr}
   342b4:	add	fp, sp, #8
   342b8:	mov	r4, r1
   342bc:	mov	r5, r0
   342c0:	bl	36fe4 <__assert_fail@plt+0x25150>
   342c4:	cmp	r0, #0
   342c8:	popne	{r4, r5, fp, pc}
   342cc:	cmp	r5, #0
   342d0:	beq	342e0 <__assert_fail@plt+0x2244c>
   342d4:	cmp	r4, #0
   342d8:	bne	342e0 <__assert_fail@plt+0x2244c>
   342dc:	pop	{r4, r5, fp, pc}
   342e0:	bl	347c8 <__assert_fail@plt+0x22934>
   342e4:	push	{fp, lr}
   342e8:	mov	fp, sp
   342ec:	cmp	r1, #0
   342f0:	orreq	r1, r1, #1
   342f4:	bl	36fe4 <__assert_fail@plt+0x25150>
   342f8:	cmp	r0, #0
   342fc:	popne	{fp, pc}
   34300:	bl	347c8 <__assert_fail@plt+0x22934>
   34304:	push	{fp, lr}
   34308:	mov	fp, sp
   3430c:	clz	r3, r2
   34310:	lsr	ip, r3, #5
   34314:	clz	r3, r1
   34318:	lsr	r3, r3, #5
   3431c:	orrs	r3, r3, ip
   34320:	movwne	r1, #1
   34324:	movwne	r2, #1
   34328:	bl	38198 <__assert_fail@plt+0x26304>
   3432c:	cmp	r0, #0
   34330:	popne	{fp, pc}
   34334:	bl	347c8 <__assert_fail@plt+0x22934>
   34338:	push	{fp, lr}
   3433c:	mov	fp, sp
   34340:	mov	r2, r1
   34344:	mov	r1, r0
   34348:	mov	r0, #0
   3434c:	bl	38198 <__assert_fail@plt+0x26304>
   34350:	cmp	r0, #0
   34354:	popne	{fp, pc}
   34358:	bl	347c8 <__assert_fail@plt+0x22934>
   3435c:	push	{fp, lr}
   34360:	mov	fp, sp
   34364:	mov	r2, r1
   34368:	mov	r1, r0
   3436c:	clz	r0, r2
   34370:	clz	r3, r1
   34374:	lsr	r0, r0, #5
   34378:	lsr	r3, r3, #5
   3437c:	orrs	r0, r3, r0
   34380:	movwne	r1, #1
   34384:	movwne	r2, #1
   34388:	mov	r0, #0
   3438c:	bl	38198 <__assert_fail@plt+0x26304>
   34390:	cmp	r0, #0
   34394:	popne	{fp, pc}
   34398:	bl	347c8 <__assert_fail@plt+0x22934>
   3439c:	push	{r4, r5, r6, sl, fp, lr}
   343a0:	add	fp, sp, #16
   343a4:	ldr	r5, [r1]
   343a8:	mov	r4, r1
   343ac:	mov	r6, r0
   343b0:	cmp	r0, #0
   343b4:	beq	343cc <__assert_fail@plt+0x22538>
   343b8:	mov	r0, #1
   343bc:	add	r0, r0, r5, lsr #1
   343c0:	adds	r5, r5, r0
   343c4:	bcc	343d4 <__assert_fail@plt+0x22540>
   343c8:	b	34410 <__assert_fail@plt+0x2257c>
   343cc:	cmp	r5, #0
   343d0:	movweq	r5, #64	; 0x40
   343d4:	mov	r0, r6
   343d8:	mov	r1, r5
   343dc:	mov	r2, #1
   343e0:	bl	38198 <__assert_fail@plt+0x26304>
   343e4:	cmp	r5, #0
   343e8:	mov	r1, r5
   343ec:	movwne	r1, #1
   343f0:	cmp	r0, #0
   343f4:	bne	34408 <__assert_fail@plt+0x22574>
   343f8:	clz	r2, r6
   343fc:	lsr	r2, r2, #5
   34400:	orrs	r1, r2, r1
   34404:	bne	34410 <__assert_fail@plt+0x2257c>
   34408:	str	r5, [r4]
   3440c:	pop	{r4, r5, r6, sl, fp, pc}
   34410:	bl	347c8 <__assert_fail@plt+0x22934>
   34414:	push	{r4, r5, r6, r7, fp, lr}
   34418:	add	fp, sp, #16
   3441c:	ldr	r5, [r1]
   34420:	mov	r6, r2
   34424:	mov	r4, r1
   34428:	mov	r7, r0
   3442c:	cmp	r0, #0
   34430:	beq	34448 <__assert_fail@plt+0x225b4>
   34434:	mov	r0, #1
   34438:	add	r0, r0, r5, lsr #1
   3443c:	adds	r5, r5, r0
   34440:	bcc	34460 <__assert_fail@plt+0x225cc>
   34444:	b	34494 <__assert_fail@plt+0x22600>
   34448:	cmp	r5, #0
   3444c:	bne	34460 <__assert_fail@plt+0x225cc>
   34450:	mov	r0, #64	; 0x40
   34454:	cmp	r6, #64	; 0x40
   34458:	udiv	r5, r0, r6
   3445c:	addhi	r5, r5, #1
   34460:	mov	r0, r7
   34464:	mov	r1, r5
   34468:	mov	r2, r6
   3446c:	bl	38198 <__assert_fail@plt+0x26304>
   34470:	cmp	r0, #0
   34474:	bne	3448c <__assert_fail@plt+0x225f8>
   34478:	cmp	r7, #0
   3447c:	beq	34494 <__assert_fail@plt+0x22600>
   34480:	cmp	r6, #0
   34484:	cmpne	r5, #0
   34488:	bne	34494 <__assert_fail@plt+0x22600>
   3448c:	str	r5, [r4]
   34490:	pop	{r4, r5, r6, r7, fp, pc}
   34494:	bl	347c8 <__assert_fail@plt+0x22934>
   34498:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3449c:	add	fp, sp, #24
   344a0:	mov	r8, r1
   344a4:	ldr	r1, [r1]
   344a8:	mov	r5, r0
   344ac:	add	r0, r1, r1, asr #1
   344b0:	cmp	r0, r1
   344b4:	mvnvs	r0, #-2147483648	; 0x80000000
   344b8:	cmp	r0, r3
   344bc:	mov	r7, r0
   344c0:	movgt	r7, r3
   344c4:	cmn	r3, #1
   344c8:	movle	r7, r0
   344cc:	ldr	r0, [fp, #8]
   344d0:	cmn	r0, #1
   344d4:	ble	344fc <__assert_fail@plt+0x22668>
   344d8:	cmp	r0, #0
   344dc:	beq	34550 <__assert_fail@plt+0x226bc>
   344e0:	cmn	r7, #1
   344e4:	ble	34524 <__assert_fail@plt+0x22690>
   344e8:	mvn	r4, #-2147483648	; 0x80000000
   344ec:	udiv	r6, r4, r0
   344f0:	cmp	r6, r7
   344f4:	bge	34550 <__assert_fail@plt+0x226bc>
   344f8:	b	34560 <__assert_fail@plt+0x226cc>
   344fc:	cmn	r7, #1
   34500:	ble	34540 <__assert_fail@plt+0x226ac>
   34504:	cmn	r0, #1
   34508:	beq	34550 <__assert_fail@plt+0x226bc>
   3450c:	mov	r6, #-2147483648	; 0x80000000
   34510:	mvn	r4, #-2147483648	; 0x80000000
   34514:	sdiv	r6, r6, r0
   34518:	cmp	r6, r7
   3451c:	bge	34550 <__assert_fail@plt+0x226bc>
   34520:	b	34560 <__assert_fail@plt+0x226cc>
   34524:	beq	34550 <__assert_fail@plt+0x226bc>
   34528:	mov	r6, #-2147483648	; 0x80000000
   3452c:	mvn	r4, #-2147483648	; 0x80000000
   34530:	sdiv	r6, r6, r7
   34534:	cmp	r6, r0
   34538:	bge	34550 <__assert_fail@plt+0x226bc>
   3453c:	b	34560 <__assert_fail@plt+0x226cc>
   34540:	mvn	r4, #-2147483648	; 0x80000000
   34544:	sdiv	r6, r4, r0
   34548:	cmp	r7, r6
   3454c:	blt	34560 <__assert_fail@plt+0x226cc>
   34550:	mul	r6, r7, r0
   34554:	mov	r4, #64	; 0x40
   34558:	cmp	r6, #63	; 0x3f
   3455c:	bgt	34568 <__assert_fail@plt+0x226d4>
   34560:	sdiv	r7, r4, r0
   34564:	mul	r6, r7, r0
   34568:	cmp	r5, #0
   3456c:	moveq	r4, #0
   34570:	streq	r4, [r8]
   34574:	sub	r4, r7, r1
   34578:	cmp	r4, r2
   3457c:	bge	34628 <__assert_fail@plt+0x22794>
   34580:	add	r7, r1, r2
   34584:	mov	r6, #0
   34588:	mov	r2, #0
   3458c:	cmp	r7, r3
   34590:	movwgt	r6, #1
   34594:	cmn	r3, #1
   34598:	movwgt	r2, #1
   3459c:	cmp	r7, r1
   345a0:	bvs	3465c <__assert_fail@plt+0x227c8>
   345a4:	ands	r1, r2, r6
   345a8:	bne	3465c <__assert_fail@plt+0x227c8>
   345ac:	cmn	r0, #1
   345b0:	ble	345d8 <__assert_fail@plt+0x22744>
   345b4:	cmp	r0, #0
   345b8:	beq	34624 <__assert_fail@plt+0x22790>
   345bc:	cmn	r7, #1
   345c0:	ble	345fc <__assert_fail@plt+0x22768>
   345c4:	mvn	r1, #-2147483648	; 0x80000000
   345c8:	udiv	r1, r1, r0
   345cc:	cmp	r1, r7
   345d0:	bge	34624 <__assert_fail@plt+0x22790>
   345d4:	b	3465c <__assert_fail@plt+0x227c8>
   345d8:	cmn	r7, #1
   345dc:	ble	34614 <__assert_fail@plt+0x22780>
   345e0:	cmn	r0, #1
   345e4:	beq	34624 <__assert_fail@plt+0x22790>
   345e8:	mov	r1, #-2147483648	; 0x80000000
   345ec:	sdiv	r1, r1, r0
   345f0:	cmp	r1, r7
   345f4:	bge	34624 <__assert_fail@plt+0x22790>
   345f8:	b	3465c <__assert_fail@plt+0x227c8>
   345fc:	beq	34624 <__assert_fail@plt+0x22790>
   34600:	mov	r1, #-2147483648	; 0x80000000
   34604:	sdiv	r1, r1, r7
   34608:	cmp	r1, r0
   3460c:	bge	34624 <__assert_fail@plt+0x22790>
   34610:	b	3465c <__assert_fail@plt+0x227c8>
   34614:	mvn	r1, #-2147483648	; 0x80000000
   34618:	sdiv	r1, r1, r0
   3461c:	cmp	r7, r1
   34620:	blt	3465c <__assert_fail@plt+0x227c8>
   34624:	mul	r6, r7, r0
   34628:	mov	r0, r5
   3462c:	mov	r1, r6
   34630:	bl	36fe4 <__assert_fail@plt+0x25150>
   34634:	cmp	r6, #0
   34638:	movwne	r6, #1
   3463c:	cmp	r0, #0
   34640:	bne	34654 <__assert_fail@plt+0x227c0>
   34644:	clz	r1, r5
   34648:	lsr	r1, r1, #5
   3464c:	orrs	r1, r1, r6
   34650:	bne	3465c <__assert_fail@plt+0x227c8>
   34654:	str	r7, [r8]
   34658:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3465c:	bl	347c8 <__assert_fail@plt+0x22934>
   34660:	push	{fp, lr}
   34664:	mov	fp, sp
   34668:	mov	r1, #1
   3466c:	bl	36f60 <__assert_fail@plt+0x250cc>
   34670:	cmp	r0, #0
   34674:	popne	{fp, pc}
   34678:	bl	347c8 <__assert_fail@plt+0x22934>
   3467c:	push	{fp, lr}
   34680:	mov	fp, sp
   34684:	bl	36f60 <__assert_fail@plt+0x250cc>
   34688:	cmp	r0, #0
   3468c:	popne	{fp, pc}
   34690:	bl	347c8 <__assert_fail@plt+0x22934>
   34694:	push	{fp, lr}
   34698:	mov	fp, sp
   3469c:	mov	r1, #1
   346a0:	bl	36f60 <__assert_fail@plt+0x250cc>
   346a4:	cmp	r0, #0
   346a8:	popne	{fp, pc}
   346ac:	bl	347c8 <__assert_fail@plt+0x22934>
   346b0:	push	{fp, lr}
   346b4:	mov	fp, sp
   346b8:	bl	36f60 <__assert_fail@plt+0x250cc>
   346bc:	cmp	r0, #0
   346c0:	popne	{fp, pc}
   346c4:	bl	347c8 <__assert_fail@plt+0x22934>
   346c8:	push	{r4, r5, r6, sl, fp, lr}
   346cc:	add	fp, sp, #16
   346d0:	mov	r5, r0
   346d4:	mov	r0, r1
   346d8:	mov	r4, r1
   346dc:	bl	36fb4 <__assert_fail@plt+0x25120>
   346e0:	cmp	r0, #0
   346e4:	beq	34700 <__assert_fail@plt+0x2286c>
   346e8:	mov	r1, r5
   346ec:	mov	r2, r4
   346f0:	mov	r6, r0
   346f4:	bl	11a8c <memcpy@plt>
   346f8:	mov	r0, r6
   346fc:	pop	{r4, r5, r6, sl, fp, pc}
   34700:	bl	347c8 <__assert_fail@plt+0x22934>
   34704:	push	{r4, r5, r6, sl, fp, lr}
   34708:	add	fp, sp, #16
   3470c:	mov	r5, r0
   34710:	mov	r0, r1
   34714:	mov	r4, r1
   34718:	bl	36fb4 <__assert_fail@plt+0x25120>
   3471c:	cmp	r0, #0
   34720:	beq	3473c <__assert_fail@plt+0x228a8>
   34724:	mov	r1, r5
   34728:	mov	r2, r4
   3472c:	mov	r6, r0
   34730:	bl	11a8c <memcpy@plt>
   34734:	mov	r0, r6
   34738:	pop	{r4, r5, r6, sl, fp, pc}
   3473c:	bl	347c8 <__assert_fail@plt+0x22934>
   34740:	push	{r4, r5, r6, sl, fp, lr}
   34744:	add	fp, sp, #16
   34748:	mov	r5, r0
   3474c:	add	r0, r1, #1
   34750:	mov	r4, r1
   34754:	bl	36fb4 <__assert_fail@plt+0x25120>
   34758:	cmp	r0, #0
   3475c:	beq	34784 <__assert_fail@plt+0x228f0>
   34760:	mov	r6, r0
   34764:	mov	r0, #0
   34768:	mov	r1, r5
   3476c:	mov	r2, r4
   34770:	strb	r0, [r6, r4]
   34774:	mov	r0, r6
   34778:	bl	11a8c <memcpy@plt>
   3477c:	mov	r0, r6
   34780:	pop	{r4, r5, r6, sl, fp, pc}
   34784:	bl	347c8 <__assert_fail@plt+0x22934>
   34788:	push	{r4, r5, r6, sl, fp, lr}
   3478c:	add	fp, sp, #16
   34790:	mov	r4, r0
   34794:	bl	11c78 <strlen@plt>
   34798:	add	r5, r0, #1
   3479c:	mov	r0, r5
   347a0:	bl	36fb4 <__assert_fail@plt+0x25120>
   347a4:	cmp	r0, #0
   347a8:	beq	347c4 <__assert_fail@plt+0x22930>
   347ac:	mov	r1, r4
   347b0:	mov	r2, r5
   347b4:	mov	r6, r0
   347b8:	bl	11a8c <memcpy@plt>
   347bc:	mov	r0, r6
   347c0:	pop	{r4, r5, r6, sl, fp, pc}
   347c4:	bl	347c8 <__assert_fail@plt+0x22934>
   347c8:	push	{fp, lr}
   347cc:	mov	fp, sp
   347d0:	movw	r0, #45524	; 0xb1d4
   347d4:	movw	r1, #43641	; 0xaa79
   347d8:	mov	r2, #5
   347dc:	movt	r0, #4
   347e0:	movt	r1, #3
   347e4:	ldr	r4, [r0]
   347e8:	mov	r0, #0
   347ec:	bl	11ad4 <dcgettext@plt>
   347f0:	movw	r2, #41334	; 0xa176
   347f4:	mov	r3, r0
   347f8:	mov	r0, r4
   347fc:	mov	r1, #0
   34800:	movt	r2, #3
   34804:	bl	11bac <error@plt>
   34808:	bl	11e58 <abort@plt>
   3480c:	push	{fp, lr}
   34810:	mov	fp, sp
   34814:	orr	r1, r1, #512	; 0x200
   34818:	bl	17e48 <__assert_fail@plt+0x5fb4>
   3481c:	cmp	r0, #0
   34820:	popne	{fp, pc}
   34824:	bl	11ca8 <__errno_location@plt>
   34828:	ldr	r0, [r0]
   3482c:	cmp	r0, #22
   34830:	bne	34854 <__assert_fail@plt+0x229c0>
   34834:	movw	r0, #43658	; 0xaa8a
   34838:	movw	r1, #43674	; 0xaa9a
   3483c:	movw	r3, #43685	; 0xaaa5
   34840:	mov	r2, #41	; 0x29
   34844:	movt	r0, #3
   34848:	movt	r1, #3
   3484c:	movt	r3, #3
   34850:	bl	11e94 <__assert_fail@plt>
   34854:	bl	347c8 <__assert_fail@plt+0x22934>
   34858:	ldr	r0, [r0, #48]	; 0x30
   3485c:	and	r0, r0, #17
   34860:	cmp	r0, #16
   34864:	moveq	r0, #1
   34868:	bxeq	lr
   3486c:	cmp	r0, #17
   34870:	movne	r0, #0
   34874:	bxne	lr
   34878:	ldr	r0, [r1, #48]	; 0x30
   3487c:	cmp	r0, #0
   34880:	movwne	r0, #1
   34884:	bx	lr
   34888:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3488c:	add	fp, sp, #28
   34890:	sub	sp, sp, #36	; 0x24
   34894:	cmp	r2, #37	; 0x25
   34898:	bcs	361c8 <__assert_fail@plt+0x24334>
   3489c:	ldr	r8, [fp, #8]
   348a0:	mov	r9, r3
   348a4:	mov	r6, r2
   348a8:	mov	r7, r1
   348ac:	mov	r4, r0
   348b0:	bl	11ca8 <__errno_location@plt>
   348b4:	add	sl, sp, #32
   348b8:	cmp	r7, #0
   348bc:	mov	r5, r0
   348c0:	mov	r0, #0
   348c4:	mov	r2, r6
   348c8:	mov	r3, #0
   348cc:	movne	sl, r7
   348d0:	str	r0, [r5]
   348d4:	mov	r0, r4
   348d8:	mov	r1, sl
   348dc:	bl	11de0 <__strtoll_internal@plt>
   348e0:	mov	r7, r1
   348e4:	ldr	r1, [sl]
   348e8:	cmp	r1, r4
   348ec:	beq	34928 <__assert_fail@plt+0x22a94>
   348f0:	mov	r6, r0
   348f4:	ldr	r0, [r5]
   348f8:	cmp	r0, #0
   348fc:	beq	34ab4 <__assert_fail@plt+0x22c20>
   34900:	mov	r5, #4
   34904:	cmp	r0, #34	; 0x22
   34908:	bne	34d0c <__assert_fail@plt+0x22e78>
   3490c:	mov	r5, #1
   34910:	cmp	r8, #0
   34914:	beq	34ac0 <__assert_fail@plt+0x22c2c>
   34918:	ldrb	r4, [r1]
   3491c:	cmp	r4, #0
   34920:	bne	34970 <__assert_fail@plt+0x22adc>
   34924:	b	34ac0 <__assert_fail@plt+0x22c2c>
   34928:	mov	r5, #4
   3492c:	cmp	r8, #0
   34930:	beq	34d0c <__assert_fail@plt+0x22e78>
   34934:	mov	r6, r1
   34938:	ldrb	r1, [r4]
   3493c:	cmp	r1, #0
   34940:	beq	34d0c <__assert_fail@plt+0x22e78>
   34944:	mov	r0, r8
   34948:	bl	11c84 <strchr@plt>
   3494c:	cmp	r0, #0
   34950:	beq	34d0c <__assert_fail@plt+0x22e78>
   34954:	mov	r1, r6
   34958:	mov	r5, #0
   3495c:	mov	r6, #1
   34960:	mov	r7, #0
   34964:	ldrb	r4, [r1]
   34968:	cmp	r4, #0
   3496c:	beq	34ac0 <__assert_fail@plt+0x22c2c>
   34970:	str	r1, [sp, #20]
   34974:	mov	r0, r8
   34978:	mov	r1, r4
   3497c:	bl	11c84 <strchr@plt>
   34980:	cmp	r0, #0
   34984:	beq	34d04 <__assert_fail@plt+0x22e70>
   34988:	sub	r0, r4, #69	; 0x45
   3498c:	mov	r1, #1
   34990:	mov	r3, #0
   34994:	mov	r2, #1024	; 0x400
   34998:	cmp	r0, #47	; 0x2f
   3499c:	str	r1, [sp, #16]
   349a0:	bhi	34ad8 <__assert_fail@plt+0x22c44>
   349a4:	add	r1, pc, #0
   349a8:	ldr	pc, [r1, r0, lsl #2]
   349ac:	andeq	r4, r3, ip, ror #20
   349b0:	ldrdeq	r4, [r3], -r8
   349b4:	andeq	r4, r3, ip, ror #20
   349b8:	ldrdeq	r4, [r3], -r8
   349bc:	ldrdeq	r4, [r3], -r8
   349c0:	ldrdeq	r4, [r3], -r8
   349c4:	andeq	r4, r3, ip, ror #20
   349c8:	ldrdeq	r4, [r3], -r8
   349cc:	andeq	r4, r3, ip, ror #20
   349d0:	ldrdeq	r4, [r3], -r8
   349d4:	ldrdeq	r4, [r3], -r8
   349d8:	andeq	r4, r3, ip, ror #20
   349dc:	ldrdeq	r4, [r3], -r8
   349e0:	ldrdeq	r4, [r3], -r8
   349e4:	ldrdeq	r4, [r3], -r8
   349e8:	andeq	r4, r3, ip, ror #20
   349ec:	ldrdeq	r4, [r3], -r8
   349f0:	ldrdeq	r4, [r3], -r8
   349f4:	ldrdeq	r4, [r3], -r8
   349f8:	ldrdeq	r4, [r3], -r8
   349fc:	andeq	r4, r3, ip, ror #20
   34a00:	andeq	r4, r3, ip, ror #20
   34a04:	ldrdeq	r4, [r3], -r8
   34a08:	ldrdeq	r4, [r3], -r8
   34a0c:	ldrdeq	r4, [r3], -r8
   34a10:	ldrdeq	r4, [r3], -r8
   34a14:	ldrdeq	r4, [r3], -r8
   34a18:	ldrdeq	r4, [r3], -r8
   34a1c:	ldrdeq	r4, [r3], -r8
   34a20:	ldrdeq	r4, [r3], -r8
   34a24:	ldrdeq	r4, [r3], -r8
   34a28:	ldrdeq	r4, [r3], -r8
   34a2c:	ldrdeq	r4, [r3], -r8
   34a30:	ldrdeq	r4, [r3], -r8
   34a34:	andeq	r4, r3, ip, ror #20
   34a38:	ldrdeq	r4, [r3], -r8
   34a3c:	ldrdeq	r4, [r3], -r8
   34a40:	ldrdeq	r4, [r3], -r8
   34a44:	andeq	r4, r3, ip, ror #20
   34a48:	ldrdeq	r4, [r3], -r8
   34a4c:	andeq	r4, r3, ip, ror #20
   34a50:	ldrdeq	r4, [r3], -r8
   34a54:	ldrdeq	r4, [r3], -r8
   34a58:	ldrdeq	r4, [r3], -r8
   34a5c:	ldrdeq	r4, [r3], -r8
   34a60:	ldrdeq	r4, [r3], -r8
   34a64:	ldrdeq	r4, [r3], -r8
   34a68:	andeq	r4, r3, ip, ror #20
   34a6c:	mov	r0, r8
   34a70:	mov	r1, #48	; 0x30
   34a74:	bl	11c84 <strchr@plt>
   34a78:	cmp	r0, #0
   34a7c:	beq	34ad0 <__assert_fail@plt+0x22c3c>
   34a80:	ldr	r1, [sp, #20]
   34a84:	ldrb	r0, [r1, #1]
   34a88:	cmp	r0, #66	; 0x42
   34a8c:	cmpne	r0, #68	; 0x44
   34a90:	bne	34c0c <__assert_fail@plt+0x22d78>
   34a94:	mov	r0, #2
   34a98:	mov	r2, #1000	; 0x3e8
   34a9c:	mov	r3, #0
   34aa0:	str	r0, [sp, #16]
   34aa4:	sub	r0, r4, #66	; 0x42
   34aa8:	cmp	r0, #53	; 0x35
   34aac:	bls	34ae4 <__assert_fail@plt+0x22c50>
   34ab0:	b	34d04 <__assert_fail@plt+0x22e70>
   34ab4:	mov	r5, r0
   34ab8:	cmp	r8, #0
   34abc:	bne	34918 <__assert_fail@plt+0x22a84>
   34ac0:	strd	r6, [r9]
   34ac4:	mov	r0, r5
   34ac8:	sub	sp, fp, #28
   34acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34ad0:	mov	r3, #0
   34ad4:	mov	r2, #1024	; 0x400
   34ad8:	sub	r0, r4, #66	; 0x42
   34adc:	cmp	r0, #53	; 0x35
   34ae0:	bhi	34d04 <__assert_fail@plt+0x22e70>
   34ae4:	add	r1, pc, #8
   34ae8:	str	r3, [sp, #28]
   34aec:	str	r2, [sp, #24]
   34af0:	ldr	pc, [r1, r0, lsl #2]
   34af4:	andeq	r4, r3, ip, asr sp
   34af8:	andeq	r4, r3, r4, lsl #26
   34afc:	andeq	r4, r3, r4, lsl #26
   34b00:	andeq	r4, r3, r0, ror sp
   34b04:	andeq	r4, r3, r4, lsl #26
   34b08:	andeq	r4, r3, ip, asr #23
   34b0c:	andeq	r4, r3, r4, lsl #26
   34b10:	andeq	r4, r3, r4, lsl #26
   34b14:	andeq	r4, r3, r4, lsl #26
   34b18:	andeq	r4, r3, r0, asr #24
   34b1c:	andeq	r4, r3, r4, lsl #26
   34b20:	andeq	r4, r3, r0, ror ip
   34b24:	andeq	r4, r3, r4, lsl #26
   34b28:	andeq	r4, r3, r4, lsl #26
   34b2c:			; <UNDEFINED> instruction: 0x00034db4
   34b30:	andeq	r4, r3, r4, lsl #26
   34b34:	andeq	r4, r3, r4, lsl #26
   34b38:	andeq	r4, r3, r4, lsl #26
   34b3c:			; <UNDEFINED> instruction: 0x00034cb0
   34b40:	andeq	r4, r3, r4, lsl #26
   34b44:	andeq	r4, r3, r4, lsl #26
   34b48:	andeq	r4, r3, r4, lsl #26
   34b4c:	andeq	r4, r3, r4, lsl #26
   34b50:	strdeq	r4, [r3], -r8
   34b54:	andeq	r4, r3, r8, lsl sp
   34b58:	andeq	r4, r3, r4, lsl #26
   34b5c:	andeq	r4, r3, r4, lsl #26
   34b60:	andeq	r4, r3, r4, lsl #26
   34b64:	andeq	r4, r3, r4, lsl #26
   34b68:	andeq	r4, r3, r4, lsl #26
   34b6c:	andeq	r4, r3, r4, lsl #26
   34b70:	andeq	r4, r3, r4, lsl #26
   34b74:	andeq	r4, r3, ip, lsr lr
   34b78:			; <UNDEFINED> instruction: 0x00035db4
   34b7c:	andeq	r4, r3, r4, lsl #26
   34b80:	andeq	r4, r3, r4, lsl #26
   34b84:	andeq	r4, r3, r4, lsl #26
   34b88:	andeq	r4, r3, ip, asr #23
   34b8c:	andeq	r4, r3, r4, lsl #26
   34b90:	andeq	r4, r3, r4, lsl #26
   34b94:	andeq	r4, r3, r4, lsl #26
   34b98:	andeq	r4, r3, r0, asr #24
   34b9c:	andeq	r4, r3, r4, lsl #26
   34ba0:	andeq	r4, r3, r0, ror ip
   34ba4:	andeq	r4, r3, r4, lsl #26
   34ba8:	andeq	r4, r3, r4, lsl #26
   34bac:	andeq	r4, r3, r4, lsl #26
   34bb0:	andeq	r4, r3, r4, lsl #26
   34bb4:	andeq	r4, r3, r4, lsl #26
   34bb8:	andeq	r4, r3, r4, lsl #26
   34bbc:			; <UNDEFINED> instruction: 0x00034cb0
   34bc0:	andeq	r4, r3, r4, lsl #26
   34bc4:	andeq	r4, r3, r4, lsl #26
   34bc8:	andeq	r4, r3, r0, asr lr
   34bcc:	cmn	r7, #1
   34bd0:	str	r9, [sp, #12]
   34bd4:	ble	34e64 <__assert_fail@plt+0x22fd0>
   34bd8:	ldr	r3, [sp, #28]
   34bdc:	mvn	r0, #0
   34be0:	mvn	r1, #-2147483648	; 0x80000000
   34be4:	mvn	r8, #0
   34be8:	mvn	r9, #-2147483648	; 0x80000000
   34bec:	bl	3877c <__assert_fail@plt+0x268e8>
   34bf0:	ldr	r2, [sp, #24]
   34bf4:	ldr	r3, [sp, #28]
   34bf8:	subs	r0, r0, r6
   34bfc:	mov	r4, #1
   34c00:	sbcs	r0, r1, r7
   34c04:	bge	34ea4 <__assert_fail@plt+0x23010>
   34c08:	b	34ebc <__assert_fail@plt+0x23028>
   34c0c:	cmp	r0, #105	; 0x69
   34c10:	mov	r3, #0
   34c14:	bne	34cf4 <__assert_fail@plt+0x22e60>
   34c18:	ldrb	r0, [r1, #2]
   34c1c:	mov	r1, #1
   34c20:	mov	r2, #1024	; 0x400
   34c24:	cmp	r0, #66	; 0x42
   34c28:	movweq	r1, #3
   34c2c:	str	r1, [sp, #16]
   34c30:	sub	r0, r4, #66	; 0x42
   34c34:	cmp	r0, #53	; 0x35
   34c38:	bls	34ae4 <__assert_fail@plt+0x22c50>
   34c3c:	b	34d04 <__assert_fail@plt+0x22e70>
   34c40:	cmn	r7, #1
   34c44:	ble	34ef8 <__assert_fail@plt+0x23064>
   34c48:	ldr	r3, [sp, #28]
   34c4c:	mvn	r0, #0
   34c50:	mvn	r1, #-2147483648	; 0x80000000
   34c54:	bl	3877c <__assert_fail@plt+0x268e8>
   34c58:	ldr	r2, [sp, #24]
   34c5c:	ldr	r3, [sp, #28]
   34c60:	subs	r0, r0, r6
   34c64:	sbcs	r0, r1, r7
   34c68:	bge	34f2c <__assert_fail@plt+0x23098>
   34c6c:	b	3563c <__assert_fail@plt+0x237a8>
   34c70:	cmn	r7, #1
   34c74:	str	r9, [sp, #12]
   34c78:	ble	34f40 <__assert_fail@plt+0x230ac>
   34c7c:	ldr	r3, [sp, #28]
   34c80:	mvn	r0, #0
   34c84:	mvn	r1, #-2147483648	; 0x80000000
   34c88:	mvn	r8, #0
   34c8c:	mvn	r9, #-2147483648	; 0x80000000
   34c90:	bl	3877c <__assert_fail@plt+0x268e8>
   34c94:	ldr	r2, [sp, #24]
   34c98:	ldr	r3, [sp, #28]
   34c9c:	subs	r0, r0, r6
   34ca0:	mov	r4, #1
   34ca4:	sbcs	r0, r1, r7
   34ca8:	bge	34f80 <__assert_fail@plt+0x230ec>
   34cac:	b	34f98 <__assert_fail@plt+0x23104>
   34cb0:	cmn	r7, #1
   34cb4:	str	r9, [sp, #12]
   34cb8:	ble	34fd0 <__assert_fail@plt+0x2313c>
   34cbc:	ldr	r3, [sp, #28]
   34cc0:	mvn	r0, #0
   34cc4:	mvn	r1, #-2147483648	; 0x80000000
   34cc8:	mvn	r9, #-2147483648	; 0x80000000
   34ccc:	str	r0, [sp, #8]
   34cd0:	mvn	r0, #0
   34cd4:	bl	3877c <__assert_fail@plt+0x268e8>
   34cd8:	ldr	r2, [sp, #24]
   34cdc:	ldr	r3, [sp, #28]
   34ce0:	subs	r0, r0, r6
   34ce4:	mov	r4, #1
   34ce8:	sbcs	r0, r1, r7
   34cec:	bge	35014 <__assert_fail@plt+0x23180>
   34cf0:	b	35030 <__assert_fail@plt+0x2319c>
   34cf4:	mov	r2, #1024	; 0x400
   34cf8:	sub	r0, r4, #66	; 0x42
   34cfc:	cmp	r0, #53	; 0x35
   34d00:	bls	34ae4 <__assert_fail@plt+0x22c50>
   34d04:	orr	r5, r5, #2
   34d08:	strd	r6, [r9]
   34d0c:	mov	r0, r5
   34d10:	sub	sp, fp, #28
   34d14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34d18:	cmp	r7, #0
   34d1c:	str	r9, [sp, #12]
   34d20:	blt	35318 <__assert_fail@plt+0x23484>
   34d24:	ldr	r3, [sp, #28]
   34d28:	mvn	r0, #0
   34d2c:	mvn	r1, #-2147483648	; 0x80000000
   34d30:	mvn	r9, #-2147483648	; 0x80000000
   34d34:	str	r0, [sp, #8]
   34d38:	mvn	r0, #0
   34d3c:	bl	3877c <__assert_fail@plt+0x268e8>
   34d40:	ldr	r2, [sp, #24]
   34d44:	ldr	r3, [sp, #28]
   34d48:	subs	r0, r0, r6
   34d4c:	mov	r4, #1
   34d50:	sbcs	r0, r1, r7
   34d54:	bge	3535c <__assert_fail@plt+0x234c8>
   34d58:	b	35378 <__assert_fail@plt+0x234e4>
   34d5c:	cmn	r7, #1
   34d60:	ble	353b4 <__assert_fail@plt+0x23520>
   34d64:	cmp	r7, #2097152	; 0x200000
   34d68:	blt	353e4 <__assert_fail@plt+0x23550>
   34d6c:	b	3563c <__assert_fail@plt+0x237a8>
   34d70:	cmp	r7, #0
   34d74:	str	r9, [sp, #12]
   34d78:	blt	353f4 <__assert_fail@plt+0x23560>
   34d7c:	ldr	r3, [sp, #28]
   34d80:	mvn	r0, #0
   34d84:	mvn	r1, #-2147483648	; 0x80000000
   34d88:	mvn	r9, #-2147483648	; 0x80000000
   34d8c:	str	r0, [sp, #8]
   34d90:	mvn	r0, #0
   34d94:	bl	3877c <__assert_fail@plt+0x268e8>
   34d98:	ldr	r2, [sp, #24]
   34d9c:	ldr	r3, [sp, #28]
   34da0:	subs	r0, r0, r6
   34da4:	mov	r4, #1
   34da8:	sbcs	r0, r1, r7
   34dac:	bge	35438 <__assert_fail@plt+0x235a4>
   34db0:	b	35454 <__assert_fail@plt+0x235c0>
   34db4:	cmp	r7, #0
   34db8:	str	r9, [sp, #12]
   34dbc:	blt	35490 <__assert_fail@plt+0x235fc>
   34dc0:	ldr	r3, [sp, #28]
   34dc4:	mvn	r0, #0
   34dc8:	mvn	r1, #-2147483648	; 0x80000000
   34dcc:	mvn	r8, #-2147483648	; 0x80000000
   34dd0:	str	r0, [sp, #8]
   34dd4:	mvn	r0, #0
   34dd8:	bl	3877c <__assert_fail@plt+0x268e8>
   34ddc:	ldr	r2, [sp, #24]
   34de0:	ldr	r3, [sp, #28]
   34de4:	subs	r0, r0, r6
   34de8:	mov	r4, #1
   34dec:	sbcs	r0, r1, r7
   34df0:	bge	354d4 <__assert_fail@plt+0x23640>
   34df4:	b	354f0 <__assert_fail@plt+0x2365c>
   34df8:	cmp	r7, #0
   34dfc:	str	r9, [sp, #12]
   34e00:	blt	3552c <__assert_fail@plt+0x23698>
   34e04:	ldr	r3, [sp, #28]
   34e08:	mvn	r0, #0
   34e0c:	mvn	r1, #-2147483648	; 0x80000000
   34e10:	mvn	r9, #-2147483648	; 0x80000000
   34e14:	str	r0, [sp, #8]
   34e18:	mvn	r0, #0
   34e1c:	bl	3877c <__assert_fail@plt+0x268e8>
   34e20:	ldr	r2, [sp, #24]
   34e24:	ldr	r3, [sp, #28]
   34e28:	subs	r0, r0, r6
   34e2c:	mov	r4, #1
   34e30:	sbcs	r0, r1, r7
   34e34:	bge	35570 <__assert_fail@plt+0x236dc>
   34e38:	b	3558c <__assert_fail@plt+0x236f8>
   34e3c:	cmn	r7, #1
   34e40:	ble	355cc <__assert_fail@plt+0x23738>
   34e44:	cmp	r7, #4194304	; 0x400000
   34e48:	blt	355fc <__assert_fail@plt+0x23768>
   34e4c:	b	3563c <__assert_fail@plt+0x237a8>
   34e50:	cmn	r7, #1
   34e54:	ble	3560c <__assert_fail@plt+0x23778>
   34e58:	cmp	r7, #1073741824	; 0x40000000
   34e5c:	bge	3563c <__assert_fail@plt+0x237a8>
   34e60:	b	3565c <__assert_fail@plt+0x237c8>
   34e64:	and	r0, r6, r7
   34e68:	cmn	r0, #1
   34e6c:	beq	34ea4 <__assert_fail@plt+0x23010>
   34e70:	mov	r0, #0
   34e74:	mov	r1, #-2147483648	; 0x80000000
   34e78:	mov	r2, r6
   34e7c:	mov	r3, r7
   34e80:	mov	r8, #0
   34e84:	mov	r9, #-2147483648	; 0x80000000
   34e88:	bl	386a8 <__assert_fail@plt+0x26814>
   34e8c:	ldr	r2, [sp, #24]
   34e90:	ldr	r3, [sp, #28]
   34e94:	mov	r4, #1
   34e98:	subs	r0, r0, r2
   34e9c:	sbcs	r0, r1, r3
   34ea0:	blt	3506c <__assert_fail@plt+0x231d8>
   34ea4:	umull	r8, r0, r6, r2
   34ea8:	mov	r4, #0
   34eac:	mla	r0, r6, r3, r0
   34eb0:	mla	r9, r7, r2, r0
   34eb4:	cmp	r9, #0
   34eb8:	blt	3506c <__assert_fail@plt+0x231d8>
   34ebc:	ldr	r3, [sp, #28]
   34ec0:	mvn	r0, #-2147483648	; 0x80000000
   34ec4:	mvn	r1, #-2147483648	; 0x80000000
   34ec8:	mov	r6, r4
   34ecc:	mvn	r4, #0
   34ed0:	str	r0, [sp, #8]
   34ed4:	mvn	r0, #0
   34ed8:	bl	3877c <__assert_fail@plt+0x268e8>
   34edc:	ldr	r2, [sp, #24]
   34ee0:	ldr	r3, [sp, #28]
   34ee4:	subs	r0, r0, r8
   34ee8:	mov	r7, #1
   34eec:	sbcs	r0, r1, r9
   34ef0:	bge	350a8 <__assert_fail@plt+0x23214>
   34ef4:	b	350c4 <__assert_fail@plt+0x23230>
   34ef8:	and	r0, r6, r7
   34efc:	cmn	r0, #1
   34f00:	beq	34f2c <__assert_fail@plt+0x23098>
   34f04:	mov	r0, #0
   34f08:	mov	r1, #-2147483648	; 0x80000000
   34f0c:	mov	r2, r6
   34f10:	mov	r3, r7
   34f14:	bl	386a8 <__assert_fail@plt+0x26814>
   34f18:	ldr	r2, [sp, #24]
   34f1c:	ldr	r3, [sp, #28]
   34f20:	subs	r0, r0, r2
   34f24:	sbcs	r0, r1, r3
   34f28:	blt	3563c <__assert_fail@plt+0x237a8>
   34f2c:	umull	r0, r1, r6, r2
   34f30:	mla	r1, r6, r3, r1
   34f34:	mov	r6, r0
   34f38:	mla	r7, r7, r2, r1
   34f3c:	b	35db4 <__assert_fail@plt+0x23f20>
   34f40:	and	r0, r6, r7
   34f44:	cmn	r0, #1
   34f48:	beq	34f80 <__assert_fail@plt+0x230ec>
   34f4c:	mov	r0, #0
   34f50:	mov	r1, #-2147483648	; 0x80000000
   34f54:	mov	r2, r6
   34f58:	mov	r3, r7
   34f5c:	mov	r8, #0
   34f60:	mov	r9, #-2147483648	; 0x80000000
   34f64:	bl	386a8 <__assert_fail@plt+0x26814>
   34f68:	ldr	r2, [sp, #24]
   34f6c:	ldr	r3, [sp, #28]
   34f70:	mov	r4, #1
   34f74:	subs	r0, r0, r2
   34f78:	sbcs	r0, r1, r3
   34f7c:	blt	35158 <__assert_fail@plt+0x232c4>
   34f80:	umull	r8, r0, r6, r2
   34f84:	mov	r4, #0
   34f88:	mla	r0, r6, r3, r0
   34f8c:	mla	r9, r7, r2, r0
   34f90:	cmp	r9, #0
   34f94:	blt	35158 <__assert_fail@plt+0x232c4>
   34f98:	ldr	r3, [sp, #28]
   34f9c:	mvn	r0, #0
   34fa0:	mvn	r1, #-2147483648	; 0x80000000
   34fa4:	str	r4, [sp, #8]
   34fa8:	mvn	r6, #0
   34fac:	mvn	r7, #-2147483648	; 0x80000000
   34fb0:	bl	3877c <__assert_fail@plt+0x268e8>
   34fb4:	ldr	r4, [sp, #24]
   34fb8:	ldr	r3, [sp, #28]
   34fbc:	subs	r0, r0, r8
   34fc0:	mov	r2, #1
   34fc4:	sbcs	r0, r1, r9
   34fc8:	bge	35190 <__assert_fail@plt+0x232fc>
   34fcc:	b	352c8 <__assert_fail@plt+0x23434>
   34fd0:	and	r0, r6, r7
   34fd4:	cmn	r0, #1
   34fd8:	beq	35014 <__assert_fail@plt+0x23180>
   34fdc:	mov	r0, #0
   34fe0:	mov	r1, #-2147483648	; 0x80000000
   34fe4:	mov	r2, r6
   34fe8:	mov	r3, r7
   34fec:	bl	386a8 <__assert_fail@plt+0x26814>
   34ff0:	ldr	r2, [sp, #24]
   34ff4:	ldr	r3, [sp, #28]
   34ff8:	mov	r4, #1
   34ffc:	mov	r9, #-2147483648	; 0x80000000
   35000:	subs	r0, r0, r2
   35004:	sbcs	r0, r1, r3
   35008:	mov	r0, #0
   3500c:	str	r0, [sp, #8]
   35010:	blt	351a4 <__assert_fail@plt+0x23310>
   35014:	umull	r1, r0, r6, r2
   35018:	mov	r4, #0
   3501c:	mla	r0, r6, r3, r0
   35020:	str	r1, [sp, #8]
   35024:	mla	r9, r7, r2, r0
   35028:	cmp	r9, #0
   3502c:	blt	351a4 <__assert_fail@plt+0x23310>
   35030:	ldr	r3, [sp, #28]
   35034:	mvn	r0, #0
   35038:	mvn	r1, #-2147483648	; 0x80000000
   3503c:	str	r4, [sp, #4]
   35040:	mvn	r6, #0
   35044:	mvn	r8, #-2147483648	; 0x80000000
   35048:	bl	3877c <__assert_fail@plt+0x268e8>
   3504c:	ldr	r4, [sp, #8]
   35050:	ldr	r2, [sp, #24]
   35054:	ldr	r3, [sp, #28]
   35058:	mov	r7, #1
   3505c:	subs	r0, r0, r4
   35060:	sbcs	r0, r1, r9
   35064:	bge	351e0 <__assert_fail@plt+0x2334c>
   35068:	b	351f8 <__assert_fail@plt+0x23364>
   3506c:	mov	r0, #-2147483648	; 0x80000000
   35070:	mov	r1, #-2147483648	; 0x80000000
   35074:	mov	r2, r8
   35078:	mov	r3, r9
   3507c:	mov	r6, r4
   35080:	mov	r4, #0
   35084:	str	r0, [sp, #8]
   35088:	mov	r0, #0
   3508c:	bl	386a8 <__assert_fail@plt+0x26814>
   35090:	ldr	r2, [sp, #24]
   35094:	ldr	r3, [sp, #28]
   35098:	mov	r7, #1
   3509c:	subs	r0, r0, r2
   350a0:	sbcs	r0, r1, r3
   350a4:	blt	35118 <__assert_fail@plt+0x23284>
   350a8:	umull	r4, r0, r8, r2
   350ac:	mov	r7, r6
   350b0:	mla	r0, r8, r3, r0
   350b4:	mla	r0, r9, r2, r0
   350b8:	cmp	r0, #0
   350bc:	str	r0, [sp, #8]
   350c0:	blt	35118 <__assert_fail@plt+0x23284>
   350c4:	ldr	r3, [sp, #28]
   350c8:	mvn	r0, #0
   350cc:	mvn	r1, #-2147483648	; 0x80000000
   350d0:	mov	r9, r7
   350d4:	mvn	r6, #0
   350d8:	mvn	r7, #-2147483648	; 0x80000000
   350dc:	bl	3877c <__assert_fail@plt+0x268e8>
   350e0:	ldr	r8, [sp, #8]
   350e4:	ldr	r3, [sp, #24]
   350e8:	ldr	ip, [sp, #28]
   350ec:	subs	r0, r0, r4
   350f0:	mov	r2, #1
   350f4:	sbcs	r0, r1, r8
   350f8:	blt	3510c <__assert_fail@plt+0x23278>
   350fc:	umull	r6, r0, r4, r3
   35100:	mov	r2, #0
   35104:	mla	r0, r4, ip, r0
   35108:	mla	r7, r8, r3, r0
   3510c:	orr	r3, r2, r9
   35110:	ldr	r9, [sp, #12]
   35114:	b	35db4 <__assert_fail@plt+0x23f20>
   35118:	ldr	r8, [sp, #8]
   3511c:	mov	r0, #0
   35120:	mov	r1, #-2147483648	; 0x80000000
   35124:	mov	r2, r4
   35128:	mov	r9, r7
   3512c:	mov	r6, #0
   35130:	mov	r7, #-2147483648	; 0x80000000
   35134:	mov	r3, r8
   35138:	bl	386a8 <__assert_fail@plt+0x26814>
   3513c:	ldr	r3, [sp, #24]
   35140:	ldr	ip, [sp, #28]
   35144:	mov	r2, #1
   35148:	subs	r0, r0, r3
   3514c:	sbcs	r0, r1, ip
   35150:	bge	350fc <__assert_fail@plt+0x23268>
   35154:	b	3510c <__assert_fail@plt+0x23278>
   35158:	mov	r0, #0
   3515c:	mov	r1, #-2147483648	; 0x80000000
   35160:	mov	r2, r8
   35164:	mov	r3, r9
   35168:	str	r4, [sp, #8]
   3516c:	mov	r6, #0
   35170:	mov	r7, #-2147483648	; 0x80000000
   35174:	bl	386a8 <__assert_fail@plt+0x26814>
   35178:	ldr	r4, [sp, #24]
   3517c:	ldr	r3, [sp, #28]
   35180:	mov	r2, #1
   35184:	subs	r0, r0, r4
   35188:	sbcs	r0, r1, r3
   3518c:	blt	352c8 <__assert_fail@plt+0x23434>
   35190:	umull	r6, r0, r8, r4
   35194:	mov	r2, #0
   35198:	mla	r0, r8, r3, r0
   3519c:	mla	r7, r9, r4, r0
   351a0:	b	352c8 <__assert_fail@plt+0x23434>
   351a4:	str	r4, [sp, #4]
   351a8:	ldr	r4, [sp, #8]
   351ac:	mov	r0, #0
   351b0:	mov	r1, #-2147483648	; 0x80000000
   351b4:	mov	r3, r9
   351b8:	mov	r2, r4
   351bc:	bl	386a8 <__assert_fail@plt+0x26814>
   351c0:	ldr	r2, [sp, #24]
   351c4:	ldr	r3, [sp, #28]
   351c8:	mov	r7, #1
   351cc:	mov	r6, #0
   351d0:	mov	r8, #-2147483648	; 0x80000000
   351d4:	subs	r0, r0, r2
   351d8:	sbcs	r0, r1, r3
   351dc:	blt	35230 <__assert_fail@plt+0x2339c>
   351e0:	umull	r6, r0, r4, r2
   351e4:	ldr	r7, [sp, #4]
   351e8:	mla	r0, r4, r3, r0
   351ec:	mla	r8, r9, r2, r0
   351f0:	cmp	r8, #0
   351f4:	blt	35230 <__assert_fail@plt+0x2339c>
   351f8:	ldr	r3, [sp, #28]
   351fc:	mvn	r0, #0
   35200:	mvn	r1, #-2147483648	; 0x80000000
   35204:	str	r7, [sp, #8]
   35208:	mvn	r4, #0
   3520c:	mvn	r9, #-2147483648	; 0x80000000
   35210:	bl	3877c <__assert_fail@plt+0x268e8>
   35214:	ldr	r2, [sp, #24]
   35218:	ldr	r3, [sp, #28]
   3521c:	subs	r0, r0, r6
   35220:	mov	r7, #1
   35224:	sbcs	r0, r1, r8
   35228:	bge	35268 <__assert_fail@plt+0x233d4>
   3522c:	b	35280 <__assert_fail@plt+0x233ec>
   35230:	mov	r0, #0
   35234:	mov	r1, #-2147483648	; 0x80000000
   35238:	mov	r2, r6
   3523c:	mov	r3, r8
   35240:	str	r7, [sp, #8]
   35244:	bl	386a8 <__assert_fail@plt+0x26814>
   35248:	ldr	r2, [sp, #24]
   3524c:	ldr	r3, [sp, #28]
   35250:	mov	r7, #1
   35254:	mov	r4, #0
   35258:	mov	r9, #-2147483648	; 0x80000000
   3525c:	subs	r0, r0, r2
   35260:	sbcs	r0, r1, r3
   35264:	blt	352d8 <__assert_fail@plt+0x23444>
   35268:	umull	r4, r0, r6, r2
   3526c:	ldr	r7, [sp, #8]
   35270:	mla	r0, r6, r3, r0
   35274:	mla	r9, r8, r2, r0
   35278:	cmp	r9, #0
   3527c:	blt	352d8 <__assert_fail@plt+0x23444>
   35280:	ldr	r3, [sp, #28]
   35284:	mvn	r0, #0
   35288:	mvn	r1, #-2147483648	; 0x80000000
   3528c:	str	r7, [sp, #8]
   35290:	mvn	r6, #0
   35294:	mvn	r7, #-2147483648	; 0x80000000
   35298:	bl	3877c <__assert_fail@plt+0x268e8>
   3529c:	ldr	r3, [sp, #24]
   352a0:	ldr	ip, [sp, #28]
   352a4:	subs	r0, r0, r4
   352a8:	mov	r2, #1
   352ac:	mov	r8, r4
   352b0:	sbcs	r0, r1, r9
   352b4:	blt	352c8 <__assert_fail@plt+0x23434>
   352b8:	umull	r6, r0, r8, r3
   352bc:	mov	r2, #0
   352c0:	mla	r0, r8, ip, r0
   352c4:	mla	r7, r9, r3, r0
   352c8:	ldr	r0, [sp, #8]
   352cc:	ldr	r9, [sp, #12]
   352d0:	orr	r3, r2, r0
   352d4:	b	35db4 <__assert_fail@plt+0x23f20>
   352d8:	mov	r0, #0
   352dc:	mov	r1, #-2147483648	; 0x80000000
   352e0:	mov	r2, r4
   352e4:	mov	r3, r9
   352e8:	str	r7, [sp, #8]
   352ec:	mov	r8, r4
   352f0:	bl	386a8 <__assert_fail@plt+0x26814>
   352f4:	ldr	r3, [sp, #24]
   352f8:	ldr	ip, [sp, #28]
   352fc:	mov	r2, #1
   35300:	mov	r6, #0
   35304:	mov	r7, #-2147483648	; 0x80000000
   35308:	subs	r0, r0, r3
   3530c:	sbcs	r0, r1, ip
   35310:	bge	352b8 <__assert_fail@plt+0x23424>
   35314:	b	352c8 <__assert_fail@plt+0x23434>
   35318:	and	r0, r6, r7
   3531c:	cmn	r0, #1
   35320:	beq	3535c <__assert_fail@plt+0x234c8>
   35324:	mov	r0, #0
   35328:	mov	r1, #-2147483648	; 0x80000000
   3532c:	mov	r2, r6
   35330:	mov	r3, r7
   35334:	bl	386a8 <__assert_fail@plt+0x26814>
   35338:	ldr	r2, [sp, #24]
   3533c:	ldr	r3, [sp, #28]
   35340:	mov	r4, #1
   35344:	mov	r9, #-2147483648	; 0x80000000
   35348:	subs	r0, r0, r2
   3534c:	sbcs	r0, r1, r3
   35350:	mov	r0, #0
   35354:	str	r0, [sp, #8]
   35358:	blt	3566c <__assert_fail@plt+0x237d8>
   3535c:	umull	r1, r0, r6, r2
   35360:	mov	r4, #0
   35364:	mla	r0, r6, r3, r0
   35368:	str	r1, [sp, #8]
   3536c:	mla	r9, r7, r2, r0
   35370:	cmp	r9, #0
   35374:	blt	3566c <__assert_fail@plt+0x237d8>
   35378:	ldr	r3, [sp, #28]
   3537c:	mvn	r0, #0
   35380:	mvn	r1, #-2147483648	; 0x80000000
   35384:	str	r4, [sp, #4]
   35388:	mvn	r8, #0
   3538c:	mvn	r4, #-2147483648	; 0x80000000
   35390:	bl	3877c <__assert_fail@plt+0x268e8>
   35394:	ldr	r6, [sp, #8]
   35398:	ldr	r2, [sp, #24]
   3539c:	ldr	r3, [sp, #28]
   353a0:	mov	r7, #1
   353a4:	subs	r0, r0, r6
   353a8:	sbcs	r0, r1, r9
   353ac:	bge	356a8 <__assert_fail@plt+0x23814>
   353b0:	b	356c0 <__assert_fail@plt+0x2382c>
   353b4:	and	r0, r6, r7
   353b8:	cmn	r0, #1
   353bc:	beq	353e4 <__assert_fail@plt+0x23550>
   353c0:	mov	r0, #0
   353c4:	mov	r1, #-2147483648	; 0x80000000
   353c8:	mov	r2, r6
   353cc:	mov	r3, r7
   353d0:	bl	386a8 <__assert_fail@plt+0x26814>
   353d4:	ldr	r3, [sp, #28]
   353d8:	subs	r0, r0, #1024	; 0x400
   353dc:	sbcs	r0, r1, #0
   353e0:	blt	3563c <__assert_fail@plt+0x237a8>
   353e4:	lsl	r0, r7, #10
   353e8:	orr	r7, r0, r6, lsr #22
   353ec:	lsl	r6, r6, #10
   353f0:	b	35db4 <__assert_fail@plt+0x23f20>
   353f4:	and	r0, r6, r7
   353f8:	cmn	r0, #1
   353fc:	beq	35438 <__assert_fail@plt+0x235a4>
   35400:	mov	r0, #0
   35404:	mov	r1, #-2147483648	; 0x80000000
   35408:	mov	r2, r6
   3540c:	mov	r3, r7
   35410:	bl	386a8 <__assert_fail@plt+0x26814>
   35414:	ldr	r2, [sp, #24]
   35418:	ldr	r3, [sp, #28]
   3541c:	mov	r4, #1
   35420:	mov	r9, #-2147483648	; 0x80000000
   35424:	subs	r0, r0, r2
   35428:	sbcs	r0, r1, r3
   3542c:	mov	r0, #0
   35430:	str	r0, [sp, #8]
   35434:	blt	35984 <__assert_fail@plt+0x23af0>
   35438:	umull	r1, r0, r6, r2
   3543c:	mov	r4, #0
   35440:	mla	r0, r6, r3, r0
   35444:	str	r1, [sp, #8]
   35448:	mla	r9, r7, r2, r0
   3544c:	cmp	r9, #0
   35450:	blt	35984 <__assert_fail@plt+0x23af0>
   35454:	ldr	r3, [sp, #28]
   35458:	mvn	r0, #0
   3545c:	mvn	r1, #-2147483648	; 0x80000000
   35460:	str	r4, [sp, #4]
   35464:	mvn	r8, #0
   35468:	mvn	r4, #-2147483648	; 0x80000000
   3546c:	bl	3877c <__assert_fail@plt+0x268e8>
   35470:	ldr	r6, [sp, #8]
   35474:	ldr	r2, [sp, #24]
   35478:	ldr	r3, [sp, #28]
   3547c:	mov	r7, #1
   35480:	subs	r0, r0, r6
   35484:	sbcs	r0, r1, r9
   35488:	bge	359c0 <__assert_fail@plt+0x23b2c>
   3548c:	b	359d8 <__assert_fail@plt+0x23b44>
   35490:	and	r0, r6, r7
   35494:	cmn	r0, #1
   35498:	beq	354d4 <__assert_fail@plt+0x23640>
   3549c:	mov	r0, #0
   354a0:	mov	r1, #-2147483648	; 0x80000000
   354a4:	mov	r2, r6
   354a8:	mov	r3, r7
   354ac:	bl	386a8 <__assert_fail@plt+0x26814>
   354b0:	ldr	r2, [sp, #24]
   354b4:	ldr	r3, [sp, #28]
   354b8:	mov	r4, #1
   354bc:	mov	r8, #-2147483648	; 0x80000000
   354c0:	subs	r0, r0, r2
   354c4:	sbcs	r0, r1, r3
   354c8:	mov	r0, #0
   354cc:	str	r0, [sp, #8]
   354d0:	blt	35c00 <__assert_fail@plt+0x23d6c>
   354d4:	umull	r1, r0, r6, r2
   354d8:	mov	r4, #0
   354dc:	mla	r0, r6, r3, r0
   354e0:	str	r1, [sp, #8]
   354e4:	mla	r8, r7, r2, r0
   354e8:	cmp	r8, #0
   354ec:	blt	35c00 <__assert_fail@plt+0x23d6c>
   354f0:	ldr	r3, [sp, #28]
   354f4:	mvn	r0, #0
   354f8:	mvn	r1, #-2147483648	; 0x80000000
   354fc:	str	r4, [sp, #4]
   35500:	mvn	r9, #0
   35504:	mvn	r4, #-2147483648	; 0x80000000
   35508:	bl	3877c <__assert_fail@plt+0x268e8>
   3550c:	ldr	r6, [sp, #8]
   35510:	ldr	r2, [sp, #24]
   35514:	ldr	r3, [sp, #28]
   35518:	mov	r7, #1
   3551c:	subs	r0, r0, r6
   35520:	sbcs	r0, r1, r8
   35524:	bge	35c3c <__assert_fail@plt+0x23da8>
   35528:	b	35c54 <__assert_fail@plt+0x23dc0>
   3552c:	and	r0, r6, r7
   35530:	cmn	r0, #1
   35534:	beq	35570 <__assert_fail@plt+0x236dc>
   35538:	mov	r0, #0
   3553c:	mov	r1, #-2147483648	; 0x80000000
   35540:	mov	r2, r6
   35544:	mov	r3, r7
   35548:	bl	386a8 <__assert_fail@plt+0x26814>
   3554c:	ldr	r2, [sp, #24]
   35550:	ldr	r3, [sp, #28]
   35554:	mov	r4, #1
   35558:	mov	r9, #-2147483648	; 0x80000000
   3555c:	subs	r0, r0, r2
   35560:	sbcs	r0, r1, r3
   35564:	mov	r0, #0
   35568:	str	r0, [sp, #8]
   3556c:	blt	35e1c <__assert_fail@plt+0x23f88>
   35570:	umull	r1, r0, r6, r2
   35574:	mov	r4, #0
   35578:	mla	r0, r6, r3, r0
   3557c:	str	r1, [sp, #8]
   35580:	mla	r9, r7, r2, r0
   35584:	cmp	r9, #0
   35588:	blt	35e1c <__assert_fail@plt+0x23f88>
   3558c:	ldr	r3, [sp, #28]
   35590:	mvn	r0, #0
   35594:	mvn	r1, #-2147483648	; 0x80000000
   35598:	str	r4, [sp]
   3559c:	mvn	r8, #-2147483648	; 0x80000000
   355a0:	str	r0, [sp, #4]
   355a4:	mvn	r0, #0
   355a8:	bl	3877c <__assert_fail@plt+0x268e8>
   355ac:	ldr	r6, [sp, #8]
   355b0:	ldr	r2, [sp, #24]
   355b4:	ldr	r3, [sp, #28]
   355b8:	mov	r7, #1
   355bc:	subs	r0, r0, r6
   355c0:	sbcs	r0, r1, r9
   355c4:	bge	35e5c <__assert_fail@plt+0x23fc8>
   355c8:	b	35e78 <__assert_fail@plt+0x23fe4>
   355cc:	and	r0, r6, r7
   355d0:	cmn	r0, #1
   355d4:	beq	355fc <__assert_fail@plt+0x23768>
   355d8:	mov	r0, #0
   355dc:	mov	r1, #-2147483648	; 0x80000000
   355e0:	mov	r2, r6
   355e4:	mov	r3, r7
   355e8:	bl	386a8 <__assert_fail@plt+0x26814>
   355ec:	ldr	r3, [sp, #28]
   355f0:	subs	r0, r0, #512	; 0x200
   355f4:	sbcs	r0, r1, #0
   355f8:	blt	3563c <__assert_fail@plt+0x237a8>
   355fc:	lsl	r0, r7, #9
   35600:	orr	r7, r0, r6, lsr #23
   35604:	lsl	r6, r6, #9
   35608:	b	35db4 <__assert_fail@plt+0x23f20>
   3560c:	and	r0, r6, r7
   35610:	cmn	r0, #1
   35614:	beq	3565c <__assert_fail@plt+0x237c8>
   35618:	mov	r0, #0
   3561c:	mov	r1, #-2147483648	; 0x80000000
   35620:	mov	r2, r6
   35624:	mov	r3, r7
   35628:	bl	386a8 <__assert_fail@plt+0x26814>
   3562c:	ldr	r3, [sp, #28]
   35630:	subs	r0, r0, #2
   35634:	sbcs	r0, r1, #0
   35638:	bge	3565c <__assert_fail@plt+0x237c8>
   3563c:	mvn	r0, #-2147483648	; 0x80000000
   35640:	cmp	r7, #0
   35644:	mvn	r6, #0
   35648:	mov	r3, #1
   3564c:	movlt	r0, #-2147483648	; 0x80000000
   35650:	movwlt	r6, #0
   35654:	mov	r7, r0
   35658:	b	35db4 <__assert_fail@plt+0x23f20>
   3565c:	lsl	r0, r7, #1
   35660:	orr	r7, r0, r6, lsr #31
   35664:	lsl	r6, r6, #1
   35668:	b	35db4 <__assert_fail@plt+0x23f20>
   3566c:	ldr	r6, [sp, #8]
   35670:	mov	r0, #0
   35674:	mov	r1, #-2147483648	; 0x80000000
   35678:	mov	r3, r9
   3567c:	str	r4, [sp, #4]
   35680:	mov	r2, r6
   35684:	bl	386a8 <__assert_fail@plt+0x26814>
   35688:	ldr	r2, [sp, #24]
   3568c:	ldr	r3, [sp, #28]
   35690:	mov	r7, #1
   35694:	mov	r8, #0
   35698:	mov	r4, #-2147483648	; 0x80000000
   3569c:	subs	r0, r0, r2
   356a0:	sbcs	r0, r1, r3
   356a4:	blt	356f8 <__assert_fail@plt+0x23864>
   356a8:	umull	r8, r0, r6, r2
   356ac:	ldr	r7, [sp, #4]
   356b0:	mla	r0, r6, r3, r0
   356b4:	mla	r4, r9, r2, r0
   356b8:	cmp	r4, #0
   356bc:	blt	356f8 <__assert_fail@plt+0x23864>
   356c0:	ldr	r3, [sp, #28]
   356c4:	mvn	r0, #0
   356c8:	mvn	r1, #-2147483648	; 0x80000000
   356cc:	str	r7, [sp, #8]
   356d0:	mvn	r7, #0
   356d4:	mvn	r9, #-2147483648	; 0x80000000
   356d8:	bl	3877c <__assert_fail@plt+0x268e8>
   356dc:	ldr	r2, [sp, #24]
   356e0:	ldr	r3, [sp, #28]
   356e4:	subs	r0, r0, r8
   356e8:	mov	r6, #1
   356ec:	sbcs	r0, r1, r4
   356f0:	bge	35730 <__assert_fail@plt+0x2389c>
   356f4:	b	35748 <__assert_fail@plt+0x238b4>
   356f8:	mov	r0, #0
   356fc:	mov	r1, #-2147483648	; 0x80000000
   35700:	mov	r2, r8
   35704:	mov	r3, r4
   35708:	str	r7, [sp, #8]
   3570c:	bl	386a8 <__assert_fail@plt+0x26814>
   35710:	ldr	r2, [sp, #24]
   35714:	ldr	r3, [sp, #28]
   35718:	mov	r6, #1
   3571c:	mov	r7, #0
   35720:	mov	r9, #-2147483648	; 0x80000000
   35724:	subs	r0, r0, r2
   35728:	sbcs	r0, r1, r3
   3572c:	blt	35788 <__assert_fail@plt+0x238f4>
   35730:	umull	r7, r0, r8, r2
   35734:	ldr	r6, [sp, #8]
   35738:	mla	r0, r8, r3, r0
   3573c:	mla	r9, r4, r2, r0
   35740:	cmp	r9, #0
   35744:	blt	35788 <__assert_fail@plt+0x238f4>
   35748:	ldr	r3, [sp, #28]
   3574c:	mvn	r0, #0
   35750:	mvn	r1, #-2147483648	; 0x80000000
   35754:	str	r6, [sp, #8]
   35758:	mvn	r8, #0
   3575c:	mvn	r4, #-2147483648	; 0x80000000
   35760:	bl	3877c <__assert_fail@plt+0x268e8>
   35764:	ldr	r2, [sp, #24]
   35768:	ldr	r3, [sp, #28]
   3576c:	subs	r0, r0, r7
   35770:	sbcs	r0, r1, r9
   35774:	bge	357cc <__assert_fail@plt+0x23938>
   35778:	mov	r0, #1
   3577c:	mov	r6, #0
   35780:	str	r0, [sp, #8]
   35784:	b	357e4 <__assert_fail@plt+0x23950>
   35788:	mov	r0, #0
   3578c:	mov	r1, #-2147483648	; 0x80000000
   35790:	mov	r2, r7
   35794:	mov	r3, r9
   35798:	str	r6, [sp, #8]
   3579c:	bl	386a8 <__assert_fail@plt+0x26814>
   357a0:	ldr	r2, [sp, #24]
   357a4:	ldr	r3, [sp, #28]
   357a8:	subs	r0, r0, r2
   357ac:	sbcs	r0, r1, r3
   357b0:	bge	357cc <__assert_fail@plt+0x23938>
   357b4:	mov	r0, #1
   357b8:	mov	r8, #0
   357bc:	mov	r4, #-2147483648	; 0x80000000
   357c0:	mov	r6, #0
   357c4:	str	r0, [sp, #8]
   357c8:	b	3581c <__assert_fail@plt+0x23988>
   357cc:	umull	r8, r0, r7, r2
   357d0:	mov	r6, #0
   357d4:	mla	r0, r7, r3, r0
   357d8:	mla	r4, r9, r2, r0
   357dc:	cmp	r4, #0
   357e0:	blt	3581c <__assert_fail@plt+0x23988>
   357e4:	ldr	r3, [sp, #28]
   357e8:	mvn	r0, #0
   357ec:	mvn	r1, #-2147483648	; 0x80000000
   357f0:	mvn	r9, #0
   357f4:	mvn	r7, #-2147483648	; 0x80000000
   357f8:	bl	3877c <__assert_fail@plt+0x268e8>
   357fc:	ldr	r2, [sp, #24]
   35800:	ldr	r3, [sp, #28]
   35804:	subs	r0, r0, r8
   35808:	sbcs	r0, r1, r4
   3580c:	bge	35858 <__assert_fail@plt+0x239c4>
   35810:	mov	r0, #1
   35814:	str	r0, [sp, #8]
   35818:	b	3586c <__assert_fail@plt+0x239d8>
   3581c:	mov	r0, #0
   35820:	mov	r1, #-2147483648	; 0x80000000
   35824:	mov	r2, r8
   35828:	mov	r3, r4
   3582c:	bl	386a8 <__assert_fail@plt+0x26814>
   35830:	ldr	r2, [sp, #24]
   35834:	ldr	r3, [sp, #28]
   35838:	subs	r0, r0, r2
   3583c:	sbcs	r0, r1, r3
   35840:	bge	35858 <__assert_fail@plt+0x239c4>
   35844:	mov	r0, #1
   35848:	mov	r9, #0
   3584c:	mov	r7, #-2147483648	; 0x80000000
   35850:	str	r0, [sp, #8]
   35854:	b	358a8 <__assert_fail@plt+0x23a14>
   35858:	umull	r9, r0, r8, r2
   3585c:	mla	r0, r8, r3, r0
   35860:	mla	r7, r4, r2, r0
   35864:	cmp	r7, #0
   35868:	blt	358a8 <__assert_fail@plt+0x23a14>
   3586c:	ldr	r3, [sp, #28]
   35870:	mvn	r0, #0
   35874:	mvn	r1, #-2147483648	; 0x80000000
   35878:	mvn	r8, #0
   3587c:	mvn	r4, #-2147483648	; 0x80000000
   35880:	bl	3877c <__assert_fail@plt+0x268e8>
   35884:	ldr	r2, [sp, #24]
   35888:	ldr	r3, [sp, #28]
   3588c:	subs	r0, r0, r9
   35890:	sbcs	r0, r1, r7
   35894:	bge	358e8 <__assert_fail@plt+0x23a54>
   35898:	ldr	r9, [sp, #12]
   3589c:	mov	r0, #1
   358a0:	str	r0, [sp, #8]
   358a4:	b	35900 <__assert_fail@plt+0x23a6c>
   358a8:	mov	r0, #0
   358ac:	mov	r1, #-2147483648	; 0x80000000
   358b0:	mov	r2, r9
   358b4:	mov	r3, r7
   358b8:	bl	386a8 <__assert_fail@plt+0x26814>
   358bc:	ldr	r2, [sp, #24]
   358c0:	ldr	r3, [sp, #28]
   358c4:	subs	r0, r0, r2
   358c8:	sbcs	r0, r1, r3
   358cc:	bge	358e8 <__assert_fail@plt+0x23a54>
   358d0:	ldr	r9, [sp, #12]
   358d4:	mov	r0, #1
   358d8:	mov	r8, #0
   358dc:	mov	r4, #-2147483648	; 0x80000000
   358e0:	str	r0, [sp, #8]
   358e4:	b	35950 <__assert_fail@plt+0x23abc>
   358e8:	umull	r8, r0, r9, r2
   358ec:	mla	r0, r9, r3, r0
   358f0:	ldr	r9, [sp, #12]
   358f4:	mla	r4, r7, r2, r0
   358f8:	cmp	r4, #0
   358fc:	blt	35950 <__assert_fail@plt+0x23abc>
   35900:	ldr	r3, [sp, #28]
   35904:	mvn	r0, #0
   35908:	mvn	r1, #-2147483648	; 0x80000000
   3590c:	mvn	r6, #0
   35910:	bl	3877c <__assert_fail@plt+0x268e8>
   35914:	ldr	r7, [sp, #24]
   35918:	ldr	r3, [sp, #28]
   3591c:	subs	r0, r0, r8
   35920:	mov	r2, #1
   35924:	sbcs	r0, r1, r4
   35928:	mvn	r0, #-2147483648	; 0x80000000
   3592c:	blt	35940 <__assert_fail@plt+0x23aac>
   35930:	umull	r6, r0, r8, r7
   35934:	mov	r2, #0
   35938:	mla	r0, r8, r3, r0
   3593c:	mla	r0, r4, r7, r0
   35940:	ldr	r1, [sp, #8]
   35944:	mov	r7, r0
   35948:	orr	r3, r2, r1
   3594c:	b	35db4 <__assert_fail@plt+0x23f20>
   35950:	mov	r0, #0
   35954:	mov	r1, #-2147483648	; 0x80000000
   35958:	mov	r2, r8
   3595c:	mov	r3, r4
   35960:	bl	386a8 <__assert_fail@plt+0x26814>
   35964:	ldr	r7, [sp, #24]
   35968:	ldr	r3, [sp, #28]
   3596c:	mov	r2, #1
   35970:	subs	r0, r0, r7
   35974:	sbcs	r0, r1, r3
   35978:	mov	r0, #-2147483648	; 0x80000000
   3597c:	bge	35930 <__assert_fail@plt+0x23a9c>
   35980:	b	35940 <__assert_fail@plt+0x23aac>
   35984:	ldr	r6, [sp, #8]
   35988:	mov	r0, #0
   3598c:	mov	r1, #-2147483648	; 0x80000000
   35990:	mov	r3, r9
   35994:	str	r4, [sp, #4]
   35998:	mov	r2, r6
   3599c:	bl	386a8 <__assert_fail@plt+0x26814>
   359a0:	ldr	r2, [sp, #24]
   359a4:	ldr	r3, [sp, #28]
   359a8:	mov	r7, #1
   359ac:	mov	r8, #0
   359b0:	mov	r4, #-2147483648	; 0x80000000
   359b4:	subs	r0, r0, r2
   359b8:	sbcs	r0, r1, r3
   359bc:	blt	35a14 <__assert_fail@plt+0x23b80>
   359c0:	umull	r8, r0, r6, r2
   359c4:	ldr	r7, [sp, #4]
   359c8:	mla	r0, r6, r3, r0
   359cc:	mla	r4, r9, r2, r0
   359d0:	cmp	r4, #0
   359d4:	blt	35a14 <__assert_fail@plt+0x23b80>
   359d8:	ldr	r3, [sp, #28]
   359dc:	mvn	r0, #0
   359e0:	mvn	r1, #-2147483648	; 0x80000000
   359e4:	str	r7, [sp, #4]
   359e8:	mvn	r7, #0
   359ec:	mvn	r9, #-2147483648	; 0x80000000
   359f0:	bl	3877c <__assert_fail@plt+0x268e8>
   359f4:	ldr	r2, [sp, #24]
   359f8:	ldr	r3, [sp, #28]
   359fc:	subs	r0, r0, r8
   35a00:	mov	r6, #1
   35a04:	sbcs	r0, r1, r4
   35a08:	str	r6, [sp, #8]
   35a0c:	bge	35a50 <__assert_fail@plt+0x23bbc>
   35a10:	b	35a6c <__assert_fail@plt+0x23bd8>
   35a14:	mov	r0, #0
   35a18:	mov	r1, #-2147483648	; 0x80000000
   35a1c:	mov	r2, r8
   35a20:	mov	r3, r4
   35a24:	str	r7, [sp, #4]
   35a28:	bl	386a8 <__assert_fail@plt+0x26814>
   35a2c:	ldr	r2, [sp, #24]
   35a30:	ldr	r3, [sp, #28]
   35a34:	mov	r7, #1
   35a38:	mov	r9, #-2147483648	; 0x80000000
   35a3c:	str	r7, [sp, #8]
   35a40:	mov	r7, #0
   35a44:	subs	r0, r0, r2
   35a48:	sbcs	r0, r1, r3
   35a4c:	blt	35aa4 <__assert_fail@plt+0x23c10>
   35a50:	umull	r7, r0, r8, r2
   35a54:	mla	r0, r8, r3, r0
   35a58:	mla	r9, r4, r2, r0
   35a5c:	ldr	r0, [sp, #4]
   35a60:	cmp	r9, #0
   35a64:	str	r0, [sp, #8]
   35a68:	blt	35aa4 <__assert_fail@plt+0x23c10>
   35a6c:	ldr	r3, [sp, #28]
   35a70:	mvn	r0, #0
   35a74:	mvn	r1, #-2147483648	; 0x80000000
   35a78:	mvn	r4, #0
   35a7c:	mvn	r8, #-2147483648	; 0x80000000
   35a80:	bl	3877c <__assert_fail@plt+0x268e8>
   35a84:	ldr	r2, [sp, #24]
   35a88:	ldr	r3, [sp, #28]
   35a8c:	subs	r0, r0, r7
   35a90:	sbcs	r0, r1, r9
   35a94:	bge	35ae0 <__assert_fail@plt+0x23c4c>
   35a98:	mov	r0, #1
   35a9c:	str	r0, [sp, #8]
   35aa0:	b	35af4 <__assert_fail@plt+0x23c60>
   35aa4:	mov	r0, #0
   35aa8:	mov	r1, #-2147483648	; 0x80000000
   35aac:	mov	r2, r7
   35ab0:	mov	r3, r9
   35ab4:	bl	386a8 <__assert_fail@plt+0x26814>
   35ab8:	ldr	r2, [sp, #24]
   35abc:	ldr	r3, [sp, #28]
   35ac0:	subs	r0, r0, r2
   35ac4:	sbcs	r0, r1, r3
   35ac8:	bge	35ae0 <__assert_fail@plt+0x23c4c>
   35acc:	mov	r0, #1
   35ad0:	mov	r4, #0
   35ad4:	mov	r8, #-2147483648	; 0x80000000
   35ad8:	str	r0, [sp, #8]
   35adc:	b	35b28 <__assert_fail@plt+0x23c94>
   35ae0:	umull	r4, r0, r7, r2
   35ae4:	mla	r0, r7, r3, r0
   35ae8:	mla	r8, r9, r2, r0
   35aec:	cmp	r8, #0
   35af0:	blt	35b28 <__assert_fail@plt+0x23c94>
   35af4:	ldr	r3, [sp, #28]
   35af8:	mvn	r0, #0
   35afc:	mvn	r1, #-2147483648	; 0x80000000
   35b00:	mvn	r6, #0
   35b04:	mvn	r9, #-2147483648	; 0x80000000
   35b08:	bl	3877c <__assert_fail@plt+0x268e8>
   35b0c:	ldr	r2, [sp, #24]
   35b10:	ldr	r3, [sp, #28]
   35b14:	subs	r0, r0, r4
   35b18:	sbcs	r0, r1, r8
   35b1c:	bge	35b60 <__assert_fail@plt+0x23ccc>
   35b20:	mov	r8, #1
   35b24:	b	35b78 <__assert_fail@plt+0x23ce4>
   35b28:	mov	r0, #0
   35b2c:	mov	r1, #-2147483648	; 0x80000000
   35b30:	mov	r2, r4
   35b34:	mov	r3, r8
   35b38:	bl	386a8 <__assert_fail@plt+0x26814>
   35b3c:	ldr	r2, [sp, #24]
   35b40:	ldr	r3, [sp, #28]
   35b44:	subs	r0, r0, r2
   35b48:	sbcs	r0, r1, r3
   35b4c:	bge	35b60 <__assert_fail@plt+0x23ccc>
   35b50:	mov	r8, #1
   35b54:	mov	r6, #0
   35b58:	mov	r9, #-2147483648	; 0x80000000
   35b5c:	b	35bc8 <__assert_fail@plt+0x23d34>
   35b60:	umull	r6, r0, r4, r2
   35b64:	mla	r0, r4, r3, r0
   35b68:	mla	r9, r8, r2, r0
   35b6c:	ldr	r8, [sp, #8]
   35b70:	cmp	r9, #0
   35b74:	blt	35bc8 <__assert_fail@plt+0x23d34>
   35b78:	ldr	r3, [sp, #28]
   35b7c:	mvn	r0, #0
   35b80:	mvn	r1, #-2147483648	; 0x80000000
   35b84:	mvn	r4, #0
   35b88:	mvn	r7, #-2147483648	; 0x80000000
   35b8c:	bl	3877c <__assert_fail@plt+0x268e8>
   35b90:	ldr	r3, [sp, #24]
   35b94:	ldr	ip, [sp, #28]
   35b98:	subs	r0, r0, r6
   35b9c:	mov	r2, #1
   35ba0:	sbcs	r0, r1, r9
   35ba4:	blt	35bb8 <__assert_fail@plt+0x23d24>
   35ba8:	umull	r4, r0, r6, r3
   35bac:	mov	r2, #0
   35bb0:	mla	r0, r6, ip, r0
   35bb4:	mla	r7, r9, r3, r0
   35bb8:	ldr	r9, [sp, #12]
   35bbc:	orr	r3, r2, r8
   35bc0:	mov	r6, r4
   35bc4:	b	35db4 <__assert_fail@plt+0x23f20>
   35bc8:	mov	r0, #0
   35bcc:	mov	r1, #-2147483648	; 0x80000000
   35bd0:	mov	r2, r6
   35bd4:	mov	r3, r9
   35bd8:	bl	386a8 <__assert_fail@plt+0x26814>
   35bdc:	ldr	r3, [sp, #24]
   35be0:	ldr	ip, [sp, #28]
   35be4:	mov	r2, #1
   35be8:	mov	r4, #0
   35bec:	mov	r7, #-2147483648	; 0x80000000
   35bf0:	subs	r0, r0, r3
   35bf4:	sbcs	r0, r1, ip
   35bf8:	bge	35ba8 <__assert_fail@plt+0x23d14>
   35bfc:	b	35bb8 <__assert_fail@plt+0x23d24>
   35c00:	ldr	r6, [sp, #8]
   35c04:	mov	r0, #0
   35c08:	mov	r1, #-2147483648	; 0x80000000
   35c0c:	mov	r3, r8
   35c10:	str	r4, [sp, #4]
   35c14:	mov	r2, r6
   35c18:	bl	386a8 <__assert_fail@plt+0x26814>
   35c1c:	ldr	r2, [sp, #24]
   35c20:	ldr	r3, [sp, #28]
   35c24:	mov	r7, #1
   35c28:	mov	r9, #0
   35c2c:	mov	r4, #-2147483648	; 0x80000000
   35c30:	subs	r0, r0, r2
   35c34:	sbcs	r0, r1, r3
   35c38:	blt	35c90 <__assert_fail@plt+0x23dfc>
   35c3c:	umull	r9, r0, r6, r2
   35c40:	ldr	r7, [sp, #4]
   35c44:	mla	r0, r6, r3, r0
   35c48:	mla	r4, r8, r2, r0
   35c4c:	cmp	r4, #0
   35c50:	blt	35c90 <__assert_fail@plt+0x23dfc>
   35c54:	ldr	r3, [sp, #28]
   35c58:	mvn	r0, #0
   35c5c:	mvn	r1, #-2147483648	; 0x80000000
   35c60:	str	r7, [sp, #4]
   35c64:	mvn	r8, #0
   35c68:	mvn	r7, #-2147483648	; 0x80000000
   35c6c:	bl	3877c <__assert_fail@plt+0x268e8>
   35c70:	ldr	r2, [sp, #24]
   35c74:	ldr	r3, [sp, #28]
   35c78:	subs	r0, r0, r9
   35c7c:	mov	r6, #1
   35c80:	sbcs	r0, r1, r4
   35c84:	str	r6, [sp, #8]
   35c88:	bge	35ccc <__assert_fail@plt+0x23e38>
   35c8c:	b	35ce8 <__assert_fail@plt+0x23e54>
   35c90:	mov	r0, #0
   35c94:	mov	r1, #-2147483648	; 0x80000000
   35c98:	mov	r2, r9
   35c9c:	mov	r3, r4
   35ca0:	str	r7, [sp, #4]
   35ca4:	bl	386a8 <__assert_fail@plt+0x26814>
   35ca8:	ldr	r2, [sp, #24]
   35cac:	ldr	r3, [sp, #28]
   35cb0:	mov	r7, #1
   35cb4:	mov	r8, #0
   35cb8:	str	r7, [sp, #8]
   35cbc:	mov	r7, #-2147483648	; 0x80000000
   35cc0:	subs	r0, r0, r2
   35cc4:	sbcs	r0, r1, r3
   35cc8:	blt	35d1c <__assert_fail@plt+0x23e88>
   35ccc:	umull	r8, r0, r9, r2
   35cd0:	mla	r0, r9, r3, r0
   35cd4:	mla	r7, r4, r2, r0
   35cd8:	ldr	r0, [sp, #4]
   35cdc:	cmp	r7, #0
   35ce0:	str	r0, [sp, #8]
   35ce4:	blt	35d1c <__assert_fail@plt+0x23e88>
   35ce8:	ldr	r3, [sp, #28]
   35cec:	mvn	r0, #0
   35cf0:	mvn	r1, #-2147483648	; 0x80000000
   35cf4:	mvn	r4, #0
   35cf8:	mvn	r9, #-2147483648	; 0x80000000
   35cfc:	bl	3877c <__assert_fail@plt+0x268e8>
   35d00:	ldr	r2, [sp, #24]
   35d04:	ldr	r3, [sp, #28]
   35d08:	subs	r0, r0, r8
   35d0c:	sbcs	r0, r1, r7
   35d10:	bge	35d54 <__assert_fail@plt+0x23ec0>
   35d14:	mov	r8, #1
   35d18:	b	35d6c <__assert_fail@plt+0x23ed8>
   35d1c:	mov	r0, #0
   35d20:	mov	r1, #-2147483648	; 0x80000000
   35d24:	mov	r2, r8
   35d28:	mov	r3, r7
   35d2c:	bl	386a8 <__assert_fail@plt+0x26814>
   35d30:	ldr	r2, [sp, #24]
   35d34:	ldr	r3, [sp, #28]
   35d38:	subs	r0, r0, r2
   35d3c:	sbcs	r0, r1, r3
   35d40:	bge	35d54 <__assert_fail@plt+0x23ec0>
   35d44:	mov	r8, #1
   35d48:	mov	r4, #0
   35d4c:	mov	r9, #-2147483648	; 0x80000000
   35d50:	b	35de4 <__assert_fail@plt+0x23f50>
   35d54:	umull	r4, r0, r8, r2
   35d58:	mla	r0, r8, r3, r0
   35d5c:	ldr	r8, [sp, #8]
   35d60:	mla	r9, r7, r2, r0
   35d64:	cmp	r9, #0
   35d68:	blt	35de4 <__assert_fail@plt+0x23f50>
   35d6c:	ldr	r3, [sp, #28]
   35d70:	mvn	r0, #0
   35d74:	mvn	r1, #-2147483648	; 0x80000000
   35d78:	mvn	r6, #0
   35d7c:	mvn	r7, #-2147483648	; 0x80000000
   35d80:	bl	3877c <__assert_fail@plt+0x268e8>
   35d84:	ldr	r3, [sp, #24]
   35d88:	ldr	ip, [sp, #28]
   35d8c:	subs	r0, r0, r4
   35d90:	mov	r2, #1
   35d94:	sbcs	r0, r1, r9
   35d98:	blt	35dac <__assert_fail@plt+0x23f18>
   35d9c:	umull	r6, r0, r4, r3
   35da0:	mov	r2, #0
   35da4:	mla	r0, r4, ip, r0
   35da8:	mla	r7, r9, r3, r0
   35dac:	ldr	r9, [sp, #12]
   35db0:	orr	r3, r2, r8
   35db4:	ldr	r1, [sp, #20]
   35db8:	ldr	r2, [sp, #16]
   35dbc:	orr	r5, r3, r5
   35dc0:	add	r0, r1, r2
   35dc4:	str	r0, [sl]
   35dc8:	ldrb	r0, [r1, r2]
   35dcc:	cmp	r0, #0
   35dd0:	orrne	r5, r5, #2
   35dd4:	strd	r6, [r9]
   35dd8:	mov	r0, r5
   35ddc:	sub	sp, fp, #28
   35de0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35de4:	mov	r0, #0
   35de8:	mov	r1, #-2147483648	; 0x80000000
   35dec:	mov	r2, r4
   35df0:	mov	r3, r9
   35df4:	bl	386a8 <__assert_fail@plt+0x26814>
   35df8:	ldr	r3, [sp, #24]
   35dfc:	ldr	ip, [sp, #28]
   35e00:	mov	r2, #1
   35e04:	mov	r6, #0
   35e08:	mov	r7, #-2147483648	; 0x80000000
   35e0c:	subs	r0, r0, r3
   35e10:	sbcs	r0, r1, ip
   35e14:	bge	35d9c <__assert_fail@plt+0x23f08>
   35e18:	b	35dac <__assert_fail@plt+0x23f18>
   35e1c:	ldr	r6, [sp, #8]
   35e20:	mov	r0, #0
   35e24:	mov	r1, #-2147483648	; 0x80000000
   35e28:	mov	r3, r9
   35e2c:	str	r4, [sp]
   35e30:	mov	r2, r6
   35e34:	bl	386a8 <__assert_fail@plt+0x26814>
   35e38:	ldr	r2, [sp, #24]
   35e3c:	ldr	r3, [sp, #28]
   35e40:	mov	r7, #1
   35e44:	mov	r8, #-2147483648	; 0x80000000
   35e48:	subs	r0, r0, r2
   35e4c:	sbcs	r0, r1, r3
   35e50:	mov	r0, #0
   35e54:	str	r0, [sp, #4]
   35e58:	blt	35eb8 <__assert_fail@plt+0x24024>
   35e5c:	umull	r1, r0, r6, r2
   35e60:	ldr	r7, [sp]
   35e64:	mla	r0, r6, r3, r0
   35e68:	str	r1, [sp, #4]
   35e6c:	mla	r8, r9, r2, r0
   35e70:	cmp	r8, #0
   35e74:	blt	35eb8 <__assert_fail@plt+0x24024>
   35e78:	ldr	r3, [sp, #28]
   35e7c:	mvn	r0, #0
   35e80:	mvn	r1, #-2147483648	; 0x80000000
   35e84:	str	r7, [sp]
   35e88:	mvn	r7, #0
   35e8c:	mvn	r4, #-2147483648	; 0x80000000
   35e90:	bl	3877c <__assert_fail@plt+0x268e8>
   35e94:	mov	r6, #1
   35e98:	ldr	r2, [sp, #24]
   35e9c:	ldr	r3, [sp, #28]
   35ea0:	str	r6, [sp, #8]
   35ea4:	ldr	r6, [sp, #4]
   35ea8:	subs	r0, r0, r6
   35eac:	sbcs	r0, r1, r8
   35eb0:	bge	35ef8 <__assert_fail@plt+0x24064>
   35eb4:	b	35f14 <__assert_fail@plt+0x24080>
   35eb8:	ldr	r6, [sp, #4]
   35ebc:	mov	r0, #0
   35ec0:	mov	r1, #-2147483648	; 0x80000000
   35ec4:	mov	r3, r8
   35ec8:	str	r7, [sp]
   35ecc:	mov	r2, r6
   35ed0:	bl	386a8 <__assert_fail@plt+0x26814>
   35ed4:	ldr	r2, [sp, #24]
   35ed8:	ldr	r3, [sp, #28]
   35edc:	mov	r7, #1
   35ee0:	mov	r4, #-2147483648	; 0x80000000
   35ee4:	str	r7, [sp, #8]
   35ee8:	mov	r7, #0
   35eec:	subs	r0, r0, r2
   35ef0:	sbcs	r0, r1, r3
   35ef4:	blt	35f4c <__assert_fail@plt+0x240b8>
   35ef8:	umull	r7, r0, r6, r2
   35efc:	mla	r0, r6, r3, r0
   35f00:	mla	r4, r8, r2, r0
   35f04:	ldr	r0, [sp]
   35f08:	cmp	r4, #0
   35f0c:	str	r0, [sp, #8]
   35f10:	blt	35f4c <__assert_fail@plt+0x240b8>
   35f14:	ldr	r3, [sp, #28]
   35f18:	mvn	r0, #0
   35f1c:	mvn	r1, #-2147483648	; 0x80000000
   35f20:	mvn	r9, #0
   35f24:	mvn	r8, #-2147483648	; 0x80000000
   35f28:	bl	3877c <__assert_fail@plt+0x268e8>
   35f2c:	ldr	r2, [sp, #24]
   35f30:	ldr	r3, [sp, #28]
   35f34:	subs	r0, r0, r7
   35f38:	sbcs	r0, r1, r4
   35f3c:	bge	35f88 <__assert_fail@plt+0x240f4>
   35f40:	mov	r0, #1
   35f44:	str	r0, [sp, #8]
   35f48:	b	35f9c <__assert_fail@plt+0x24108>
   35f4c:	mov	r0, #0
   35f50:	mov	r1, #-2147483648	; 0x80000000
   35f54:	mov	r2, r7
   35f58:	mov	r3, r4
   35f5c:	bl	386a8 <__assert_fail@plt+0x26814>
   35f60:	ldr	r2, [sp, #24]
   35f64:	ldr	r3, [sp, #28]
   35f68:	subs	r0, r0, r2
   35f6c:	sbcs	r0, r1, r3
   35f70:	bge	35f88 <__assert_fail@plt+0x240f4>
   35f74:	mov	r0, #1
   35f78:	mov	r9, #0
   35f7c:	mov	r8, #-2147483648	; 0x80000000
   35f80:	str	r0, [sp, #8]
   35f84:	b	35fd4 <__assert_fail@plt+0x24140>
   35f88:	umull	r9, r0, r7, r2
   35f8c:	mla	r0, r7, r3, r0
   35f90:	mla	r8, r4, r2, r0
   35f94:	cmp	r8, #0
   35f98:	blt	35fd4 <__assert_fail@plt+0x24140>
   35f9c:	ldr	r3, [sp, #28]
   35fa0:	mvn	r0, #0
   35fa4:	mvn	r1, #-2147483648	; 0x80000000
   35fa8:	mvn	r4, #0
   35fac:	mvn	r7, #-2147483648	; 0x80000000
   35fb0:	bl	3877c <__assert_fail@plt+0x268e8>
   35fb4:	ldr	r2, [sp, #24]
   35fb8:	ldr	r3, [sp, #28]
   35fbc:	subs	r0, r0, r9
   35fc0:	sbcs	r0, r1, r8
   35fc4:	bge	36010 <__assert_fail@plt+0x2417c>
   35fc8:	mov	r0, #1
   35fcc:	str	r0, [sp, #8]
   35fd0:	b	36024 <__assert_fail@plt+0x24190>
   35fd4:	mov	r0, #0
   35fd8:	mov	r1, #-2147483648	; 0x80000000
   35fdc:	mov	r2, r9
   35fe0:	mov	r3, r8
   35fe4:	bl	386a8 <__assert_fail@plt+0x26814>
   35fe8:	ldr	r2, [sp, #24]
   35fec:	ldr	r3, [sp, #28]
   35ff0:	subs	r0, r0, r2
   35ff4:	sbcs	r0, r1, r3
   35ff8:	bge	36010 <__assert_fail@plt+0x2417c>
   35ffc:	mov	r0, #1
   36000:	mov	r4, #0
   36004:	mov	r7, #-2147483648	; 0x80000000
   36008:	str	r0, [sp, #8]
   3600c:	b	3605c <__assert_fail@plt+0x241c8>
   36010:	umull	r4, r0, r9, r2
   36014:	mla	r0, r9, r3, r0
   36018:	mla	r7, r8, r2, r0
   3601c:	cmp	r7, #0
   36020:	blt	3605c <__assert_fail@plt+0x241c8>
   36024:	ldr	r3, [sp, #28]
   36028:	mvn	r0, #0
   3602c:	mvn	r1, #-2147483648	; 0x80000000
   36030:	mvn	r8, #0
   36034:	mvn	r9, #-2147483648	; 0x80000000
   36038:	bl	3877c <__assert_fail@plt+0x268e8>
   3603c:	ldr	r2, [sp, #24]
   36040:	ldr	r3, [sp, #28]
   36044:	subs	r0, r0, r4
   36048:	sbcs	r0, r1, r7
   3604c:	bge	36098 <__assert_fail@plt+0x24204>
   36050:	mov	r0, #1
   36054:	str	r0, [sp, #8]
   36058:	b	360ac <__assert_fail@plt+0x24218>
   3605c:	mov	r0, #0
   36060:	mov	r1, #-2147483648	; 0x80000000
   36064:	mov	r2, r4
   36068:	mov	r3, r7
   3606c:	bl	386a8 <__assert_fail@plt+0x26814>
   36070:	ldr	r2, [sp, #24]
   36074:	ldr	r3, [sp, #28]
   36078:	subs	r0, r0, r2
   3607c:	sbcs	r0, r1, r3
   36080:	bge	36098 <__assert_fail@plt+0x24204>
   36084:	mov	r0, #1
   36088:	mov	r8, #0
   3608c:	mov	r9, #-2147483648	; 0x80000000
   36090:	str	r0, [sp, #8]
   36094:	b	360e8 <__assert_fail@plt+0x24254>
   36098:	umull	r8, r0, r4, r2
   3609c:	mla	r0, r4, r3, r0
   360a0:	mla	r9, r7, r2, r0
   360a4:	cmp	r9, #0
   360a8:	blt	360e8 <__assert_fail@plt+0x24254>
   360ac:	ldr	r3, [sp, #28]
   360b0:	mvn	r0, #0
   360b4:	mvn	r1, #-2147483648	; 0x80000000
   360b8:	mvn	r4, #0
   360bc:	mvn	r6, #-2147483648	; 0x80000000
   360c0:	bl	3877c <__assert_fail@plt+0x268e8>
   360c4:	ldr	r2, [sp, #24]
   360c8:	ldr	r3, [sp, #28]
   360cc:	subs	r0, r0, r8
   360d0:	sbcs	r0, r1, r9
   360d4:	bge	36128 <__assert_fail@plt+0x24294>
   360d8:	ldr	r9, [sp, #12]
   360dc:	mov	r0, #1
   360e0:	str	r0, [sp, #8]
   360e4:	b	36140 <__assert_fail@plt+0x242ac>
   360e8:	mov	r0, #0
   360ec:	mov	r1, #-2147483648	; 0x80000000
   360f0:	mov	r2, r8
   360f4:	mov	r3, r9
   360f8:	bl	386a8 <__assert_fail@plt+0x26814>
   360fc:	ldr	r2, [sp, #24]
   36100:	ldr	r3, [sp, #28]
   36104:	subs	r0, r0, r2
   36108:	sbcs	r0, r1, r3
   3610c:	bge	36128 <__assert_fail@plt+0x24294>
   36110:	ldr	r9, [sp, #12]
   36114:	mov	r0, #1
   36118:	mov	r4, #0
   3611c:	mov	r6, #-2147483648	; 0x80000000
   36120:	str	r0, [sp, #8]
   36124:	b	3618c <__assert_fail@plt+0x242f8>
   36128:	umull	r4, r0, r8, r2
   3612c:	mla	r0, r8, r3, r0
   36130:	mla	r6, r9, r2, r0
   36134:	ldr	r9, [sp, #12]
   36138:	cmp	r6, #0
   3613c:	blt	3618c <__assert_fail@plt+0x242f8>
   36140:	ldr	r3, [sp, #28]
   36144:	mvn	r0, #0
   36148:	mvn	r1, #-2147483648	; 0x80000000
   3614c:	mov	r8, r6
   36150:	mvn	r6, #0
   36154:	mvn	r7, #-2147483648	; 0x80000000
   36158:	bl	3877c <__assert_fail@plt+0x268e8>
   3615c:	ldr	r3, [sp, #24]
   36160:	ldr	ip, [sp, #28]
   36164:	subs	r0, r0, r4
   36168:	mov	r2, #1
   3616c:	sbcs	r0, r1, r8
   36170:	blt	36184 <__assert_fail@plt+0x242f0>
   36174:	umull	r6, r0, r4, r3
   36178:	mov	r2, #0
   3617c:	mla	r0, r4, ip, r0
   36180:	mla	r7, r8, r3, r0
   36184:	ldr	r0, [sp, #8]
   36188:	b	352d0 <__assert_fail@plt+0x2343c>
   3618c:	mov	r0, #0
   36190:	mov	r1, #-2147483648	; 0x80000000
   36194:	mov	r2, r4
   36198:	mov	r3, r6
   3619c:	bl	386a8 <__assert_fail@plt+0x26814>
   361a0:	ldr	r3, [sp, #24]
   361a4:	ldr	ip, [sp, #28]
   361a8:	mov	r8, r6
   361ac:	mov	r2, #1
   361b0:	mov	r6, #0
   361b4:	mov	r7, #-2147483648	; 0x80000000
   361b8:	subs	r0, r0, r3
   361bc:	sbcs	r0, r1, ip
   361c0:	bge	36174 <__assert_fail@plt+0x242e0>
   361c4:	b	36184 <__assert_fail@plt+0x242f0>
   361c8:	movw	r0, #43763	; 0xaaf3
   361cc:	movw	r1, #43801	; 0xab19
   361d0:	movw	r3, #43817	; 0xab29
   361d4:	mov	r2, #85	; 0x55
   361d8:	movt	r0, #3
   361dc:	movt	r1, #3
   361e0:	movt	r3, #3
   361e4:	bl	11e94 <__assert_fail@plt>
   361e8:	push	{fp, lr}
   361ec:	mov	fp, sp
   361f0:	sub	sp, sp, #8
   361f4:	movw	ip, #45524	; 0xb1d4
   361f8:	movt	ip, #4
   361fc:	ldr	ip, [ip]
   36200:	str	ip, [sp, #4]
   36204:	ldr	ip, [fp, #8]
   36208:	str	ip, [sp]
   3620c:	bl	36214 <__assert_fail@plt+0x24380>
   36210:	bl	11e58 <abort@plt>
   36214:	push	{r4, r5, r6, r7, fp, lr}
   36218:	add	fp, sp, #16
   3621c:	sub	sp, sp, #16
   36220:	sub	r0, r0, #1
   36224:	cmp	r0, #4
   36228:	bcs	362a8 <__assert_fail@plt+0x24414>
   3622c:	mov	r5, r1
   36230:	movw	r1, #43992	; 0xabd8
   36234:	ldr	r4, [fp, #12]
   36238:	ldr	r6, [fp, #8]
   3623c:	movt	r1, #3
   36240:	cmn	r5, #1
   36244:	ldr	r1, [r1, r0, lsl #2]
   36248:	ble	3625c <__assert_fail@plt+0x243c8>
   3624c:	ldr	r7, [r3, r5, lsl #4]
   36250:	movw	r5, #43895	; 0xab77
   36254:	movt	r5, #3
   36258:	b	36278 <__assert_fail@plt+0x243e4>
   3625c:	mov	r0, #0
   36260:	add	r7, sp, #14
   36264:	strb	r0, [sp, #15]
   36268:	movw	r0, #43895	; 0xab77
   3626c:	strb	r2, [sp, #14]
   36270:	movt	r0, #3
   36274:	sub	r5, r0, r5
   36278:	mov	r0, #0
   3627c:	mov	r2, #5
   36280:	bl	11ad4 <dcgettext@plt>
   36284:	mov	r2, r0
   36288:	mov	r0, r4
   3628c:	mov	r1, #0
   36290:	mov	r3, r5
   36294:	str	r7, [sp]
   36298:	str	r6, [sp, #4]
   3629c:	bl	11bac <error@plt>
   362a0:	sub	sp, fp, #16
   362a4:	pop	{r4, r5, r6, r7, fp, pc}
   362a8:	bl	11e58 <abort@plt>
   362ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   362b0:	add	fp, sp, #28
   362b4:	sub	sp, sp, #44	; 0x2c
   362b8:	cmp	r2, #37	; 0x25
   362bc:	bcs	36f40 <__assert_fail@plt+0x250ac>
   362c0:	ldr	sl, [fp, #8]
   362c4:	mov	r6, r2
   362c8:	mov	r7, r1
   362cc:	mov	r4, r0
   362d0:	str	r3, [sp, #36]	; 0x24
   362d4:	bl	11ca8 <__errno_location@plt>
   362d8:	mov	r5, r0
   362dc:	mov	r0, #0
   362e0:	str	r0, [r5]
   362e4:	bl	11c54 <__ctype_b_loc@plt>
   362e8:	ldr	r1, [r0]
   362ec:	mov	r2, r4
   362f0:	ldrb	r0, [r2], #1
   362f4:	add	r3, r1, r0, lsl #1
   362f8:	ldrb	r3, [r3, #1]
   362fc:	tst	r3, #32
   36300:	bne	362f0 <__assert_fail@plt+0x2445c>
   36304:	sub	r9, fp, #32
   36308:	cmp	r7, #0
   3630c:	mov	r8, #4
   36310:	movne	r9, r7
   36314:	cmp	r0, #45	; 0x2d
   36318:	beq	366d8 <__assert_fail@plt+0x24844>
   3631c:	mov	r0, r4
   36320:	mov	r1, r9
   36324:	mov	r2, r6
   36328:	mov	r3, #0
   3632c:	bl	11aa4 <__strtoull_internal@plt>
   36330:	mov	r7, r1
   36334:	ldr	r1, [r9]
   36338:	cmp	r1, r4
   3633c:	beq	36374 <__assert_fail@plt+0x244e0>
   36340:	mov	r6, r0
   36344:	ldr	r0, [r5]
   36348:	cmp	r0, #0
   3634c:	beq	36690 <__assert_fail@plt+0x247fc>
   36350:	cmp	r0, #34	; 0x22
   36354:	bne	366d8 <__assert_fail@plt+0x24844>
   36358:	mov	r8, #1
   3635c:	cmp	sl, #0
   36360:	beq	36f2c <__assert_fail@plt+0x25098>
   36364:	ldrb	r4, [r1]
   36368:	cmp	r4, #0
   3636c:	bne	363b8 <__assert_fail@plt+0x24524>
   36370:	b	36f2c <__assert_fail@plt+0x25098>
   36374:	cmp	sl, #0
   36378:	beq	366d8 <__assert_fail@plt+0x24844>
   3637c:	mov	r5, r1
   36380:	ldrb	r1, [r4]
   36384:	cmp	r1, #0
   36388:	beq	366d8 <__assert_fail@plt+0x24844>
   3638c:	mov	r0, sl
   36390:	bl	11c84 <strchr@plt>
   36394:	cmp	r0, #0
   36398:	beq	366d8 <__assert_fail@plt+0x24844>
   3639c:	mov	r1, r5
   363a0:	mov	r8, #0
   363a4:	mov	r6, #1
   363a8:	mov	r7, #0
   363ac:	ldrb	r4, [r1]
   363b0:	cmp	r4, #0
   363b4:	beq	36f2c <__assert_fail@plt+0x25098>
   363b8:	str	r1, [sp, #32]
   363bc:	mov	r0, sl
   363c0:	mov	r1, r4
   363c4:	bl	11c84 <strchr@plt>
   363c8:	cmp	r0, #0
   363cc:	beq	366cc <__assert_fail@plt+0x24838>
   363d0:	sub	r0, r4, #69	; 0x45
   363d4:	mov	r1, #1
   363d8:	mov	r3, #0
   363dc:	mov	r5, #1024	; 0x400
   363e0:	cmp	r0, #47	; 0x2f
   363e4:	str	r1, [sp, #28]
   363e8:	bhi	364ec <__assert_fail@plt+0x24658>
   363ec:	add	r1, pc, #0
   363f0:	ldr	pc, [r1, r0, lsl #2]
   363f4:			; <UNDEFINED> instruction: 0x000364b4
   363f8:	andeq	r6, r3, ip, ror #9
   363fc:			; <UNDEFINED> instruction: 0x000364b4
   36400:	andeq	r6, r3, ip, ror #9
   36404:	andeq	r6, r3, ip, ror #9
   36408:	andeq	r6, r3, ip, ror #9
   3640c:			; <UNDEFINED> instruction: 0x000364b4
   36410:	andeq	r6, r3, ip, ror #9
   36414:			; <UNDEFINED> instruction: 0x000364b4
   36418:	andeq	r6, r3, ip, ror #9
   3641c:	andeq	r6, r3, ip, ror #9
   36420:			; <UNDEFINED> instruction: 0x000364b4
   36424:	andeq	r6, r3, ip, ror #9
   36428:	andeq	r6, r3, ip, ror #9
   3642c:	andeq	r6, r3, ip, ror #9
   36430:			; <UNDEFINED> instruction: 0x000364b4
   36434:	andeq	r6, r3, ip, ror #9
   36438:	andeq	r6, r3, ip, ror #9
   3643c:	andeq	r6, r3, ip, ror #9
   36440:	andeq	r6, r3, ip, ror #9
   36444:			; <UNDEFINED> instruction: 0x000364b4
   36448:			; <UNDEFINED> instruction: 0x000364b4
   3644c:	andeq	r6, r3, ip, ror #9
   36450:	andeq	r6, r3, ip, ror #9
   36454:	andeq	r6, r3, ip, ror #9
   36458:	andeq	r6, r3, ip, ror #9
   3645c:	andeq	r6, r3, ip, ror #9
   36460:	andeq	r6, r3, ip, ror #9
   36464:	andeq	r6, r3, ip, ror #9
   36468:	andeq	r6, r3, ip, ror #9
   3646c:	andeq	r6, r3, ip, ror #9
   36470:	andeq	r6, r3, ip, ror #9
   36474:	andeq	r6, r3, ip, ror #9
   36478:	andeq	r6, r3, ip, ror #9
   3647c:			; <UNDEFINED> instruction: 0x000364b4
   36480:	andeq	r6, r3, ip, ror #9
   36484:	andeq	r6, r3, ip, ror #9
   36488:	andeq	r6, r3, ip, ror #9
   3648c:			; <UNDEFINED> instruction: 0x000364b4
   36490:	andeq	r6, r3, ip, ror #9
   36494:			; <UNDEFINED> instruction: 0x000364b4
   36498:	andeq	r6, r3, ip, ror #9
   3649c:	andeq	r6, r3, ip, ror #9
   364a0:	andeq	r6, r3, ip, ror #9
   364a4:	andeq	r6, r3, ip, ror #9
   364a8:	andeq	r6, r3, ip, ror #9
   364ac:	andeq	r6, r3, ip, ror #9
   364b0:			; <UNDEFINED> instruction: 0x000364b4
   364b4:	mov	r0, sl
   364b8:	mov	r1, #48	; 0x30
   364bc:	bl	11c84 <strchr@plt>
   364c0:	cmp	r0, #0
   364c4:	beq	364e8 <__assert_fail@plt+0x24654>
   364c8:	ldr	r1, [sp, #32]
   364cc:	ldrb	r0, [r1, #1]
   364d0:	cmp	r0, #66	; 0x42
   364d4:	cmpne	r0, #68	; 0x44
   364d8:	bne	366a0 <__assert_fail@plt+0x2480c>
   364dc:	mov	r5, #1000	; 0x3e8
   364e0:	mov	r0, #2
   364e4:	str	r0, [sp, #28]
   364e8:	mov	r3, #0
   364ec:	sub	r0, r4, #66	; 0x42
   364f0:	cmp	r0, #53	; 0x35
   364f4:	bhi	366cc <__assert_fail@plt+0x24838>
   364f8:	add	r1, pc, #0
   364fc:	ldr	pc, [r1, r0, lsl #2]
   36500:	andeq	r6, r3, ip, lsr sl
   36504:	andeq	r6, r3, ip, asr #13
   36508:	andeq	r6, r3, ip, asr #13
   3650c:	andeq	r6, r3, r4, ror #20
   36510:	andeq	r6, r3, ip, asr #13
   36514:	ldrdeq	r6, [r3], -r8
   36518:	andeq	r6, r3, ip, asr #13
   3651c:	andeq	r6, r3, ip, asr #13
   36520:	andeq	r6, r3, ip, asr #13
   36524:	andeq	r6, r3, r4, ror #13
   36528:	andeq	r6, r3, ip, asr #13
   3652c:	andeq	r6, r3, ip, lsr #14
   36530:	andeq	r6, r3, ip, asr #13
   36534:	andeq	r6, r3, ip, asr #13
   36538:			; <UNDEFINED> instruction: 0x00036bb8
   3653c:	andeq	r6, r3, ip, asr #13
   36540:	andeq	r6, r3, ip, asr #13
   36544:	andeq	r6, r3, ip, asr #13
   36548:			; <UNDEFINED> instruction: 0x000367b8
   3654c:	andeq	r6, r3, ip, asr #13
   36550:	andeq	r6, r3, ip, asr #13
   36554:	andeq	r6, r3, ip, asr #13
   36558:	andeq	r6, r3, ip, asr #13
   3655c:	andeq	r6, r3, r0, ror #25
   36560:	andeq	r6, r3, r0, lsr #17
   36564:	andeq	r6, r3, ip, asr #13
   36568:	andeq	r6, r3, ip, asr #13
   3656c:	andeq	r6, r3, ip, asr #13
   36570:	andeq	r6, r3, ip, asr #13
   36574:	andeq	r6, r3, ip, asr #13
   36578:	andeq	r6, r3, ip, asr #13
   3657c:	andeq	r6, r3, ip, asr #13
   36580:			; <UNDEFINED> instruction: 0x00036eb4
   36584:	andeq	r6, r3, ip, lsl #30
   36588:	andeq	r6, r3, ip, asr #13
   3658c:	andeq	r6, r3, ip, asr #13
   36590:	andeq	r6, r3, ip, asr #13
   36594:	ldrdeq	r6, [r3], -r8
   36598:	andeq	r6, r3, ip, asr #13
   3659c:	andeq	r6, r3, ip, asr #13
   365a0:	andeq	r6, r3, ip, asr #13
   365a4:	andeq	r6, r3, r4, ror #13
   365a8:	andeq	r6, r3, ip, asr #13
   365ac:	andeq	r6, r3, ip, lsr #14
   365b0:	andeq	r6, r3, ip, asr #13
   365b4:	andeq	r6, r3, ip, asr #13
   365b8:	andeq	r6, r3, ip, asr #13
   365bc:	andeq	r6, r3, ip, asr #13
   365c0:	andeq	r6, r3, ip, asr #13
   365c4:	andeq	r6, r3, ip, asr #13
   365c8:			; <UNDEFINED> instruction: 0x000367b8
   365cc:	andeq	r6, r3, ip, asr #13
   365d0:	andeq	r6, r3, ip, asr #13
   365d4:	andeq	r6, r3, r8, ror #29
   365d8:	mvn	r0, #0
   365dc:	mvn	r1, #0
   365e0:	mov	r2, r5
   365e4:	mov	sl, r3
   365e8:	bl	3877c <__assert_fail@plt+0x268e8>
   365ec:	subs	r3, r0, r6
   365f0:	mov	lr, #0
   365f4:	umull	r4, r2, r6, r5
   365f8:	str	r1, [sp, #20]
   365fc:	sbcs	r3, r1, r7
   36600:	mla	ip, r6, sl, r2
   36604:	mov	r2, r1
   36608:	movwcc	lr, #1
   3660c:	mla	r7, r7, r5, ip
   36610:	mov	r2, #0
   36614:	cmp	lr, #0
   36618:	mvnne	r4, #0
   3661c:	mvnne	r7, #0
   36620:	subs	r6, r0, r4
   36624:	sbcs	r6, r1, r7
   36628:	movwcc	r2, #1
   3662c:	umull	r3, r6, r4, r5
   36630:	cmp	r2, #0
   36634:	str	r6, [sp, #16]
   36638:	mvnne	r3, #0
   3663c:	cmp	r2, #0
   36640:	umull	r6, ip, r3, r5
   36644:	mla	r1, r3, sl, ip
   36648:	ldr	ip, [sp, #16]
   3664c:	str	r1, [sp, #12]
   36650:	mla	r4, r4, sl, ip
   36654:	mla	r4, r7, r5, r4
   36658:	ldr	r7, [sp, #12]
   3665c:	mvnne	r4, #0
   36660:	subs	r0, r0, r3
   36664:	ldr	r0, [sp, #20]
   36668:	mla	r7, r4, r5, r7
   3666c:	sbcs	r0, r0, r4
   36670:	mov	r0, #0
   36674:	movwcc	r0, #1
   36678:	cmp	r0, #0
   3667c:	mov	r1, r0
   36680:	orr	r0, lr, r2
   36684:	mvnne	r7, #0
   36688:	mvnne	r6, #0
   3668c:	b	36cd8 <__assert_fail@plt+0x24e44>
   36690:	mov	r8, r0
   36694:	cmp	sl, #0
   36698:	bne	36364 <__assert_fail@plt+0x244d0>
   3669c:	b	36f2c <__assert_fail@plt+0x25098>
   366a0:	cmp	r0, #105	; 0x69
   366a4:	mov	r3, #0
   366a8:	bne	364ec <__assert_fail@plt+0x24658>
   366ac:	ldrb	r0, [r1, #2]
   366b0:	mov	r1, #1
   366b4:	cmp	r0, #66	; 0x42
   366b8:	movweq	r1, #3
   366bc:	str	r1, [sp, #28]
   366c0:	sub	r0, r4, #66	; 0x42
   366c4:	cmp	r0, #53	; 0x35
   366c8:	bls	364f8 <__assert_fail@plt+0x24664>
   366cc:	ldr	r0, [sp, #36]	; 0x24
   366d0:	orr	r8, r8, #2
   366d4:	strd	r6, [r0]
   366d8:	mov	r0, r8
   366dc:	sub	sp, fp, #28
   366e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   366e4:	mvn	r0, #0
   366e8:	mvn	r1, #0
   366ec:	mov	r2, r5
   366f0:	mov	r4, r3
   366f4:	bl	3877c <__assert_fail@plt+0x268e8>
   366f8:	subs	r0, r0, r6
   366fc:	mov	r2, #0
   36700:	sbcs	r0, r1, r7
   36704:	movwcc	r2, #1
   36708:	umull	r0, r1, r6, r5
   3670c:	mla	r1, r6, r4, r1
   36710:	cmp	r2, #0
   36714:	mov	r3, r2
   36718:	mla	r7, r7, r5, r1
   3671c:	mvnne	r0, #0
   36720:	mvnne	r7, #0
   36724:	mov	r6, r0
   36728:	b	36f0c <__assert_fail@plt+0x25078>
   3672c:	mvn	r0, #0
   36730:	mvn	r1, #0
   36734:	mov	r2, r5
   36738:	str	r3, [sp, #24]
   3673c:	bl	3877c <__assert_fail@plt+0x268e8>
   36740:	subs	r3, r0, r6
   36744:	mov	ip, r0
   36748:	umull	r4, r0, r6, r5
   3674c:	mov	sl, #0
   36750:	sbcs	r3, r1, r7
   36754:	str	r0, [sp, #20]
   36758:	ldr	r0, [sp, #24]
   3675c:	mov	r3, #0
   36760:	movwcc	r3, #1
   36764:	cmp	r3, #0
   36768:	mvnne	r4, #0
   3676c:	cmp	r3, #0
   36770:	umull	lr, r2, r4, r5
   36774:	mla	r2, r4, r0, r2
   36778:	str	r2, [sp, #16]
   3677c:	ldr	r2, [sp, #20]
   36780:	mla	r6, r6, r0, r2
   36784:	ldr	r0, [sp, #16]
   36788:	mla	r6, r7, r5, r6
   3678c:	mvnne	r6, #0
   36790:	mla	r7, r6, r5, r0
   36794:	subs	r0, ip, r4
   36798:	sbcs	r0, r1, r6
   3679c:	movwcc	sl, #1
   367a0:	cmp	sl, #0
   367a4:	orr	r3, r3, sl
   367a8:	mvnne	lr, #0
   367ac:	mvnne	r7, #0
   367b0:	mov	r6, lr
   367b4:	b	36f0c <__assert_fail@plt+0x25078>
   367b8:	mvn	r0, #0
   367bc:	mvn	r1, #0
   367c0:	mov	r2, r5
   367c4:	mov	sl, r3
   367c8:	bl	3877c <__assert_fail@plt+0x268e8>
   367cc:	subs	r3, r0, r6
   367d0:	mov	ip, r1
   367d4:	umull	r2, lr, r6, r5
   367d8:	str	r0, [sp, #20]
   367dc:	sbcs	r3, r1, r7
   367e0:	mov	r1, #0
   367e4:	mla	r6, r6, sl, lr
   367e8:	mov	lr, #0
   367ec:	str	ip, [sp, #16]
   367f0:	movwcc	r1, #1
   367f4:	mla	r7, r7, r5, r6
   367f8:	cmp	r1, #0
   367fc:	mvnne	r2, #0
   36800:	cmp	r1, #0
   36804:	umull	r3, r4, r2, r5
   36808:	mvnne	r7, #0
   3680c:	mla	r4, r2, sl, r4
   36810:	subs	r2, r0, r2
   36814:	sbcs	r2, ip, r7
   36818:	mla	r4, r7, r5, r4
   3681c:	movwcc	lr, #1
   36820:	mov	r2, #0
   36824:	cmp	lr, #0
   36828:	mvnne	r3, #0
   3682c:	mvnne	r4, #0
   36830:	subs	r7, r0, r3
   36834:	mov	r0, r5
   36838:	sbcs	r7, ip, r4
   3683c:	movwcc	r2, #1
   36840:	umull	r5, r7, r3, r5
   36844:	cmp	r2, #0
   36848:	mla	r3, r3, sl, r7
   3684c:	mvnne	r5, #0
   36850:	mla	r3, r4, r0, r3
   36854:	cmp	r2, #0
   36858:	umull	r6, ip, r5, r0
   3685c:	mvnne	r3, #0
   36860:	mla	ip, r5, sl, ip
   36864:	mla	r7, r3, r0, ip
   36868:	ldr	r0, [sp, #20]
   3686c:	subs	r0, r0, r5
   36870:	ldr	r0, [sp, #16]
   36874:	sbcs	r0, r0, r3
   36878:	mov	r0, #0
   3687c:	movwcc	r0, #1
   36880:	cmp	r0, #0
   36884:	mov	r3, r0
   36888:	orr	r0, r1, lr
   3688c:	orr	r0, r0, r2
   36890:	mvnne	r7, #0
   36894:	mvnne	r6, #0
   36898:	orr	r3, r0, r3
   3689c:	b	36f0c <__assert_fail@plt+0x25078>
   368a0:	mvn	r0, #0
   368a4:	mvn	r1, #0
   368a8:	mov	r2, r5
   368ac:	mov	r4, r3
   368b0:	str	r3, [sp, #24]
   368b4:	bl	3877c <__assert_fail@plt+0x268e8>
   368b8:	umull	r3, r2, r6, r5
   368bc:	mla	r2, r6, r4, r2
   368c0:	subs	r6, r0, r6
   368c4:	sbcs	r6, r1, r7
   368c8:	mla	r2, r7, r5, r2
   368cc:	mov	r7, #0
   368d0:	mov	r6, #0
   368d4:	movwcc	r6, #1
   368d8:	cmp	r6, #0
   368dc:	str	r6, [sp, #20]
   368e0:	mvnne	r3, #0
   368e4:	mvnne	r2, #0
   368e8:	subs	r4, r0, r3
   368ec:	umull	r6, ip, r3, r5
   368f0:	sbcs	r4, r1, r2
   368f4:	ldr	r4, [sp, #24]
   368f8:	movwcc	r7, #1
   368fc:	cmp	r7, #0
   36900:	mov	lr, r7
   36904:	str	r7, [sp, #16]
   36908:	mvnne	r6, #0
   3690c:	cmp	lr, #0
   36910:	mov	lr, #0
   36914:	umull	sl, r7, r6, r5
   36918:	mla	r3, r3, r4, ip
   3691c:	mla	r7, r6, r4, r7
   36920:	mov	r4, r0
   36924:	mla	r2, r2, r5, r3
   36928:	mvnne	r2, #0
   3692c:	subs	r3, r0, r6
   36930:	mov	r0, #0
   36934:	mla	r7, r2, r5, r7
   36938:	sbcs	r2, r1, r2
   3693c:	mov	r3, r4
   36940:	movwcc	r0, #1
   36944:	str	r3, [sp, #4]
   36948:	cmp	r0, #0
   3694c:	str	r0, [sp, #12]
   36950:	mov	r0, r1
   36954:	mvnne	sl, #0
   36958:	mvnne	r7, #0
   3695c:	str	r0, [sp, #8]
   36960:	subs	r2, r4, sl
   36964:	ldr	r4, [sp, #24]
   36968:	sbcs	r2, r1, r7
   3696c:	movwcc	lr, #1
   36970:	umull	r6, r2, sl, r5
   36974:	cmp	lr, #0
   36978:	mvnne	r6, #0
   3697c:	mla	r2, sl, r4, r2
   36980:	cmp	lr, #0
   36984:	umull	r1, ip, r6, r5
   36988:	mla	r2, r7, r5, r2
   3698c:	mla	ip, r6, r4, ip
   36990:	mvnne	r2, #0
   36994:	subs	r6, r3, r6
   36998:	mla	r7, r2, r5, ip
   3699c:	sbcs	r2, r0, r2
   369a0:	mov	ip, #0
   369a4:	movwcc	ip, #1
   369a8:	mov	r2, #0
   369ac:	cmp	ip, #0
   369b0:	mvnne	r1, #0
   369b4:	mvnne	r7, #0
   369b8:	subs	r6, r3, r1
   369bc:	ldr	r3, [sp, #24]
   369c0:	sbcs	r6, r0, r7
   369c4:	umull	r0, sl, r1, r5
   369c8:	movwcc	r2, #1
   369cc:	cmp	r2, #0
   369d0:	mvnne	r0, #0
   369d4:	mla	r1, r1, r3, sl
   369d8:	cmp	r2, #0
   369dc:	umull	r6, r4, r0, r5
   369e0:	mla	r1, r7, r5, r1
   369e4:	mla	r4, r0, r3, r4
   369e8:	ldr	r3, [sp, #4]
   369ec:	mvnne	r1, #0
   369f0:	mla	r7, r1, r5, r4
   369f4:	ldr	r5, [sp, #16]
   369f8:	subs	r0, r3, r0
   369fc:	ldr	r0, [sp, #8]
   36a00:	sbcs	r0, r0, r1
   36a04:	mov	r0, #0
   36a08:	movwcc	r0, #1
   36a0c:	cmp	r0, #0
   36a10:	mov	r1, r0
   36a14:	ldr	r0, [sp, #20]
   36a18:	mvnne	r7, #0
   36a1c:	mvnne	r6, #0
   36a20:	orr	r0, r0, r5
   36a24:	ldr	r5, [sp, #12]
   36a28:	orr	r0, r0, r5
   36a2c:	orr	r0, r0, lr
   36a30:	orr	r0, r0, ip
   36a34:	orr	r0, r0, r2
   36a38:	b	36ea8 <__assert_fail@plt+0x25014>
   36a3c:	mov	r1, #0
   36a40:	lsl	r2, r7, #10
   36a44:	lsl	r0, r6, #10
   36a48:	lsr	r3, r7, #22
   36a4c:	cmp	r1, r7, lsr #22
   36a50:	orr	r2, r2, r6, lsr #22
   36a54:	mvnne	r0, #0
   36a58:	movwne	r3, #1
   36a5c:	cmp	r1, r7, lsr #22
   36a60:	b	36ed8 <__assert_fail@plt+0x25044>
   36a64:	mvn	r0, #0
   36a68:	mvn	r1, #0
   36a6c:	mov	r2, r5
   36a70:	mov	sl, r3
   36a74:	bl	3877c <__assert_fail@plt+0x268e8>
   36a78:	subs	r2, r0, r6
   36a7c:	mov	ip, r0
   36a80:	mov	r0, #0
   36a84:	sbcs	r2, r1, r7
   36a88:	movwcc	r0, #1
   36a8c:	umull	r4, r2, r6, r5
   36a90:	cmp	r0, #0
   36a94:	mla	r2, r6, sl, r2
   36a98:	str	r0, [sp, #20]
   36a9c:	mvnne	r4, #0
   36aa0:	cmp	r0, #0
   36aa4:	mla	r2, r7, r5, r2
   36aa8:	mov	r0, #0
   36aac:	umull	lr, r3, r4, r5
   36ab0:	mvnne	r2, #0
   36ab4:	mla	r3, r4, sl, r3
   36ab8:	mla	r6, r2, r5, r3
   36abc:	subs	r3, ip, r4
   36ac0:	sbcs	r2, r1, r2
   36ac4:	mov	r3, r1
   36ac8:	movwcc	r0, #1
   36acc:	str	r3, [sp, #8]
   36ad0:	cmp	r0, #0
   36ad4:	str	r0, [sp, #16]
   36ad8:	mov	r0, ip
   36adc:	mvnne	lr, #0
   36ae0:	mvnne	r6, #0
   36ae4:	str	r0, [sp, #12]
   36ae8:	subs	r2, ip, lr
   36aec:	umull	r7, r4, lr, r5
   36af0:	sbcs	r2, r1, r6
   36af4:	mla	r4, lr, sl, r4
   36af8:	mov	r2, #0
   36afc:	mla	r6, r6, r5, r4
   36b00:	mov	r4, #0
   36b04:	movwcc	r2, #1
   36b08:	cmp	r2, #0
   36b0c:	mvnne	r7, #0
   36b10:	cmp	r2, #0
   36b14:	umull	r1, ip, r7, r5
   36b18:	mvnne	r6, #0
   36b1c:	mla	ip, r7, sl, ip
   36b20:	subs	r7, r0, r7
   36b24:	mla	lr, r6, r5, ip
   36b28:	sbcs	r7, r3, r6
   36b2c:	mov	ip, #0
   36b30:	movwcc	ip, #1
   36b34:	cmp	ip, #0
   36b38:	mvnne	r1, #0
   36b3c:	mvnne	lr, #0
   36b40:	subs	r7, r0, r1
   36b44:	sbcs	r7, r3, lr
   36b48:	movwcc	r4, #1
   36b4c:	umull	r0, r7, r1, r5
   36b50:	cmp	r4, #0
   36b54:	mla	r1, r1, sl, r7
   36b58:	mvnne	r0, #0
   36b5c:	mla	r1, lr, r5, r1
   36b60:	cmp	r4, #0
   36b64:	umull	r6, r3, r0, r5
   36b68:	mvnne	r1, #0
   36b6c:	mla	r3, r0, sl, r3
   36b70:	mla	r7, r1, r5, r3
   36b74:	ldr	r3, [sp, #12]
   36b78:	subs	r0, r3, r0
   36b7c:	ldr	r3, [sp, #16]
   36b80:	ldr	r0, [sp, #8]
   36b84:	sbcs	r0, r0, r1
   36b88:	mov	r0, #0
   36b8c:	movwcc	r0, #1
   36b90:	cmp	r0, #0
   36b94:	mov	r1, r0
   36b98:	ldr	r0, [sp, #20]
   36b9c:	mvnne	r7, #0
   36ba0:	mvnne	r6, #0
   36ba4:	orr	r0, r0, r3
   36ba8:	orr	r0, r0, r2
   36bac:	orr	r0, r0, ip
   36bb0:	orr	r0, r0, r4
   36bb4:	b	36cd8 <__assert_fail@plt+0x24e44>
   36bb8:	mvn	r0, #0
   36bbc:	mvn	r1, #0
   36bc0:	mov	r2, r5
   36bc4:	mov	sl, r3
   36bc8:	bl	3877c <__assert_fail@plt+0x268e8>
   36bcc:	umull	r3, r2, r6, r5
   36bd0:	mov	lr, r1
   36bd4:	mov	r1, r0
   36bd8:	mla	r2, r6, sl, r2
   36bdc:	subs	r6, r0, r6
   36be0:	mov	r0, #0
   36be4:	sbcs	r6, lr, r7
   36be8:	mla	r2, r7, r5, r2
   36bec:	movwcc	r0, #1
   36bf0:	cmp	r0, #0
   36bf4:	str	r0, [sp, #20]
   36bf8:	mov	r0, r1
   36bfc:	mvnne	r3, #0
   36c00:	mvnne	r2, #0
   36c04:	str	r0, [sp, #16]
   36c08:	subs	r4, r1, r3
   36c0c:	umull	r7, ip, r3, r5
   36c10:	sbcs	r4, lr, r2
   36c14:	mla	r3, r3, sl, ip
   36c18:	mov	ip, #0
   36c1c:	mov	r4, #0
   36c20:	mla	r2, r2, r5, r3
   36c24:	movwcc	r4, #1
   36c28:	cmp	r4, #0
   36c2c:	mvnne	r7, #0
   36c30:	cmp	r4, #0
   36c34:	umull	r1, r6, r7, r5
   36c38:	mvnne	r2, #0
   36c3c:	mla	r6, r7, sl, r6
   36c40:	mla	r3, r2, r5, r6
   36c44:	subs	r6, r0, r7
   36c48:	sbcs	r2, lr, r2
   36c4c:	movwcc	ip, #1
   36c50:	mov	r2, #0
   36c54:	cmp	ip, #0
   36c58:	mvnne	r1, #0
   36c5c:	mvnne	r3, #0
   36c60:	subs	r6, r0, r1
   36c64:	sbcs	r6, lr, r3
   36c68:	movwcc	r2, #1
   36c6c:	umull	r0, r6, r1, r5
   36c70:	cmp	r2, #0
   36c74:	str	r6, [sp, #12]
   36c78:	mvnne	r0, #0
   36c7c:	cmp	r2, #0
   36c80:	umull	r6, r7, r0, r5
   36c84:	mla	r7, r0, sl, r7
   36c88:	str	r7, [sp, #8]
   36c8c:	ldr	r7, [sp, #12]
   36c90:	mla	r1, r1, sl, r7
   36c94:	mla	r1, r3, r5, r1
   36c98:	ldr	r3, [sp, #8]
   36c9c:	mvnne	r1, #0
   36ca0:	mla	r7, r1, r5, r3
   36ca4:	ldr	r3, [sp, #16]
   36ca8:	subs	r0, r3, r0
   36cac:	sbcs	r0, lr, r1
   36cb0:	mov	r0, #0
   36cb4:	movwcc	r0, #1
   36cb8:	cmp	r0, #0
   36cbc:	mov	r1, r0
   36cc0:	ldr	r0, [sp, #20]
   36cc4:	mvnne	r7, #0
   36cc8:	mvnne	r6, #0
   36ccc:	orr	r0, r0, r4
   36cd0:	orr	r0, r0, ip
   36cd4:	orr	r0, r0, r2
   36cd8:	orr	r3, r0, r1
   36cdc:	b	36f0c <__assert_fail@plt+0x25078>
   36ce0:	mvn	r0, #0
   36ce4:	mvn	r1, #0
   36ce8:	mov	r2, r5
   36cec:	mov	sl, r3
   36cf0:	bl	3877c <__assert_fail@plt+0x268e8>
   36cf4:	mov	ip, r1
   36cf8:	subs	r1, r0, r6
   36cfc:	umull	r3, lr, r6, r5
   36d00:	mov	r2, r5
   36d04:	sbcs	r1, ip, r7
   36d08:	mla	r6, r6, sl, lr
   36d0c:	str	ip, [sp, #4]
   36d10:	mov	r1, #0
   36d14:	mla	r7, r7, r2, r6
   36d18:	movwcc	r1, #1
   36d1c:	cmp	r1, #0
   36d20:	str	r1, [sp, #20]
   36d24:	mvnne	r3, #0
   36d28:	cmp	r1, #0
   36d2c:	mov	r1, r0
   36d30:	umull	r4, r5, r3, r5
   36d34:	mvnne	r7, #0
   36d38:	mov	lr, r1
   36d3c:	mla	r5, r3, sl, r5
   36d40:	subs	r3, r0, r3
   36d44:	sbcs	r0, ip, r7
   36d48:	mla	r5, r7, r2, r5
   36d4c:	mov	r0, #0
   36d50:	movwcc	r0, #1
   36d54:	cmp	r0, #0
   36d58:	str	r0, [sp, #16]
   36d5c:	mvnne	r4, #0
   36d60:	mvnne	r5, #0
   36d64:	subs	r0, r1, r4
   36d68:	mov	r1, #0
   36d6c:	sbcs	r0, ip, r5
   36d70:	movwcc	r1, #1
   36d74:	umull	r3, r0, r4, r2
   36d78:	cmp	r1, #0
   36d7c:	mla	r0, r4, sl, r0
   36d80:	mov	r4, lr
   36d84:	str	r1, [sp, #12]
   36d88:	mvnne	r3, #0
   36d8c:	mla	r0, r5, r2, r0
   36d90:	cmp	r1, #0
   36d94:	str	r4, [sp]
   36d98:	umull	r7, r6, r3, r2
   36d9c:	mvnne	r0, #0
   36da0:	mla	r6, r3, sl, r6
   36da4:	subs	r3, lr, r3
   36da8:	mla	r5, r0, r2, r6
   36dac:	sbcs	r0, ip, r0
   36db0:	mov	r3, #0
   36db4:	mov	r0, #0
   36db8:	movwcc	r0, #1
   36dbc:	cmp	r0, #0
   36dc0:	str	r0, [sp, #8]
   36dc4:	mvnne	r7, #0
   36dc8:	mvnne	r5, #0
   36dcc:	subs	r0, lr, r7
   36dd0:	sbcs	r0, ip, r5
   36dd4:	movwcc	r3, #1
   36dd8:	umull	r6, r0, r7, r2
   36ddc:	cmp	r3, #0
   36de0:	mla	r7, r7, sl, r0
   36de4:	mov	r0, ip
   36de8:	mvnne	r6, #0
   36dec:	mla	r7, r5, r2, r7
   36df0:	cmp	r3, #0
   36df4:	mov	r5, #0
   36df8:	umull	r1, lr, r6, r2
   36dfc:	mvnne	r7, #0
   36e00:	mla	lr, r6, sl, lr
   36e04:	subs	r6, r4, r6
   36e08:	mla	lr, r7, r2, lr
   36e0c:	sbcs	r7, ip, r7
   36e10:	mov	ip, #0
   36e14:	movwcc	ip, #1
   36e18:	cmp	ip, #0
   36e1c:	mvnne	r1, #0
   36e20:	mvnne	lr, #0
   36e24:	subs	r7, r4, r1
   36e28:	sbcs	r7, r0, lr
   36e2c:	movwcc	r5, #1
   36e30:	umull	r0, r7, r1, r2
   36e34:	cmp	r5, #0
   36e38:	mla	r1, r1, sl, r7
   36e3c:	mvnne	r0, #0
   36e40:	mla	r1, lr, r2, r1
   36e44:	cmp	r5, #0
   36e48:	umull	r6, r4, r0, r2
   36e4c:	mvnne	r1, #0
   36e50:	mla	r4, r0, sl, r4
   36e54:	mla	r7, r1, r2, r4
   36e58:	ldr	r2, [sp]
   36e5c:	subs	r0, r2, r0
   36e60:	ldr	r2, [sp, #16]
   36e64:	ldr	r0, [sp, #4]
   36e68:	sbcs	r0, r0, r1
   36e6c:	mov	r0, #0
   36e70:	movwcc	r0, #1
   36e74:	cmp	r0, #0
   36e78:	mov	r1, r0
   36e7c:	ldr	r0, [sp, #20]
   36e80:	mvnne	r7, #0
   36e84:	mvnne	r6, #0
   36e88:	orr	r0, r0, r2
   36e8c:	ldr	r2, [sp, #12]
   36e90:	orr	r0, r0, r2
   36e94:	ldr	r2, [sp, #8]
   36e98:	orr	r0, r0, r2
   36e9c:	orr	r0, r0, r3
   36ea0:	orr	r0, r0, ip
   36ea4:	orr	r0, r0, r5
   36ea8:	orr	r0, r0, r1
   36eac:	and	r3, r0, #1
   36eb0:	b	36f0c <__assert_fail@plt+0x25078>
   36eb4:	mov	r1, #0
   36eb8:	lsl	r2, r7, #9
   36ebc:	lsl	r0, r6, #9
   36ec0:	lsr	r3, r7, #23
   36ec4:	cmp	r1, r7, lsr #23
   36ec8:	orr	r2, r2, r6, lsr #23
   36ecc:	mvnne	r0, #0
   36ed0:	movwne	r3, #1
   36ed4:	cmp	r1, r7, lsr #23
   36ed8:	mvnne	r2, #0
   36edc:	mov	r6, r0
   36ee0:	mov	r7, r2
   36ee4:	b	36f0c <__assert_fail@plt+0x25078>
   36ee8:	lsl	r1, r7, #1
   36eec:	lsl	r0, r6, #1
   36ef0:	cmp	r7, #0
   36ef4:	lsr	r3, r7, #31
   36ef8:	orr	r1, r1, r6, lsr #31
   36efc:	mvnlt	r0, #0
   36f00:	mvnlt	r1, #0
   36f04:	mov	r6, r0
   36f08:	mov	r7, r1
   36f0c:	ldr	r1, [sp, #32]
   36f10:	ldr	r2, [sp, #28]
   36f14:	orr	r8, r3, r8
   36f18:	add	r0, r1, r2
   36f1c:	str	r0, [r9]
   36f20:	ldrb	r0, [r1, r2]
   36f24:	cmp	r0, #0
   36f28:	orrne	r8, r8, #2
   36f2c:	ldr	r0, [sp, #36]	; 0x24
   36f30:	strd	r6, [r0]
   36f34:	mov	r0, r8
   36f38:	sub	sp, fp, #28
   36f3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36f40:	movw	r0, #43763	; 0xaaf3
   36f44:	movw	r1, #43801	; 0xab19
   36f48:	movw	r3, #44008	; 0xabe8
   36f4c:	mov	r2, #85	; 0x55
   36f50:	movt	r0, #3
   36f54:	movt	r1, #3
   36f58:	movt	r3, #3
   36f5c:	bl	11e94 <__assert_fail@plt>
   36f60:	clz	r2, r1
   36f64:	clz	r3, r0
   36f68:	lsr	r2, r2, #5
   36f6c:	lsr	r3, r3, #5
   36f70:	orrs	r2, r3, r2
   36f74:	movwne	r1, #1
   36f78:	movwne	r0, #1
   36f7c:	cmp	r1, #0
   36f80:	beq	36fb0 <__assert_fail@plt+0x2511c>
   36f84:	mvn	r2, #-2147483648	; 0x80000000
   36f88:	udiv	r2, r2, r1
   36f8c:	cmp	r2, r0
   36f90:	bcs	36fb0 <__assert_fail@plt+0x2511c>
   36f94:	push	{fp, lr}
   36f98:	mov	fp, sp
   36f9c:	bl	11ca8 <__errno_location@plt>
   36fa0:	mov	r1, #12
   36fa4:	str	r1, [r0]
   36fa8:	mov	r0, #0
   36fac:	pop	{fp, pc}
   36fb0:	b	119b4 <calloc@plt>
   36fb4:	cmp	r0, #0
   36fb8:	movweq	r0, #1
   36fbc:	cmn	r0, #1
   36fc0:	ble	36fc8 <__assert_fail@plt+0x25134>
   36fc4:	b	11be8 <malloc@plt>
   36fc8:	push	{fp, lr}
   36fcc:	mov	fp, sp
   36fd0:	bl	11ca8 <__errno_location@plt>
   36fd4:	mov	r1, #12
   36fd8:	str	r1, [r0]
   36fdc:	mov	r0, #0
   36fe0:	pop	{fp, pc}
   36fe4:	push	{fp, lr}
   36fe8:	mov	fp, sp
   36fec:	cmp	r0, #0
   36ff0:	beq	3700c <__assert_fail@plt+0x25178>
   36ff4:	cmp	r1, #0
   36ff8:	beq	37018 <__assert_fail@plt+0x25184>
   36ffc:	cmn	r1, #1
   37000:	ble	37024 <__assert_fail@plt+0x25190>
   37004:	pop	{fp, lr}
   37008:	b	11aec <realloc@plt>
   3700c:	mov	r0, r1
   37010:	pop	{fp, lr}
   37014:	b	36fb4 <__assert_fail@plt+0x25120>
   37018:	bl	17b10 <__assert_fail@plt+0x5c7c>
   3701c:	mov	r0, #0
   37020:	pop	{fp, pc}
   37024:	bl	11ca8 <__errno_location@plt>
   37028:	mov	r1, #12
   3702c:	str	r1, [r0]
   37030:	mov	r0, #0
   37034:	pop	{fp, pc}
   37038:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3703c:	add	fp, sp, #28
   37040:	sub	sp, sp, #28
   37044:	sub	sp, sp, #1024	; 0x400
   37048:	ldrb	r3, [r0]
   3704c:	mov	r5, r0
   37050:	cmp	r3, #0
   37054:	beq	37100 <__assert_fail@plt+0x2526c>
   37058:	mov	r0, #1
   3705c:	mov	r2, #0
   37060:	ldrb	r7, [r1, r2]
   37064:	cmp	r7, #0
   37068:	uxtbne	r3, r3
   3706c:	subne	r3, r3, r7
   37070:	clzne	r3, r3
   37074:	lsrne	r3, r3, #5
   37078:	andne	r0, r0, r3
   3707c:	addne	r3, r5, r2
   37080:	addne	r2, r2, #1
   37084:	ldrbne	r3, [r3, #1]
   37088:	cmpne	r3, #0
   3708c:	bne	37060 <__assert_fail@plt+0x251cc>
   37090:	add	r4, r1, r2
   37094:	mov	r6, r5
   37098:	ldrb	r2, [r4]
   3709c:	cmp	r2, #0
   370a0:	movwne	r6, #0
   370a4:	tst	r0, #1
   370a8:	cmpeq	r2, #0
   370ac:	bne	37110 <__assert_fail@plt+0x2527c>
   370b0:	sub	r8, r4, r1
   370b4:	ldrb	r1, [r1]
   370b8:	add	r0, r5, #1
   370bc:	bl	11c84 <strchr@plt>
   370c0:	mov	r6, r0
   370c4:	cmp	r8, #1
   370c8:	cmpne	r6, #0
   370cc:	beq	37110 <__assert_fail@plt+0x2527c>
   370d0:	add	r0, r5, r8
   370d4:	sub	r9, r4, r8
   370d8:	str	r6, [sp, #20]
   370dc:	subs	r5, r0, r6
   370e0:	movwcc	r5, #1
   370e4:	cmp	r8, #31
   370e8:	bhi	3711c <__assert_fail@plt+0x25288>
   370ec:	cmp	r8, #3
   370f0:	bcs	37264 <__assert_fail@plt+0x253d0>
   370f4:	sub	r2, r8, #1
   370f8:	mov	sl, #1
   370fc:	b	378a4 <__assert_fail@plt+0x25a10>
   37100:	ldrb	r0, [r1]
   37104:	cmp	r0, #0
   37108:	movne	r5, #0
   3710c:	mov	r6, r5
   37110:	mov	r0, r6
   37114:	sub	sp, fp, #28
   37118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3711c:	mvn	r1, #0
   37120:	mov	r0, #0
   37124:	mov	r2, #1
   37128:	mov	ip, #1
   3712c:	mov	r3, #1
   37130:	add	r6, r1, r3
   37134:	ldrb	r7, [r9, r2]
   37138:	ldrb	r6, [r9, r6]
   3713c:	cmp	r7, r6
   37140:	bcs	37160 <__assert_fail@plt+0x252cc>
   37144:	sub	ip, r2, r1
   37148:	mov	r3, #1
   3714c:	mov	r0, r2
   37150:	add	r2, r3, r0
   37154:	cmp	r2, r8
   37158:	bcc	37130 <__assert_fail@plt+0x2529c>
   3715c:	b	371b8 <__assert_fail@plt+0x25324>
   37160:	bne	37184 <__assert_fail@plt+0x252f0>
   37164:	cmp	r3, ip
   37168:	bne	371a8 <__assert_fail@plt+0x25314>
   3716c:	add	r0, r0, ip
   37170:	mov	r3, #1
   37174:	add	r2, r3, r0
   37178:	cmp	r2, r8
   3717c:	bcc	37130 <__assert_fail@plt+0x2529c>
   37180:	b	371b8 <__assert_fail@plt+0x25324>
   37184:	add	r2, r0, #1
   37188:	mov	r1, r0
   3718c:	mov	r3, #1
   37190:	mov	ip, #1
   37194:	mov	r0, r2
   37198:	add	r2, r3, r0
   3719c:	cmp	r2, r8
   371a0:	bcc	37130 <__assert_fail@plt+0x2529c>
   371a4:	b	371b8 <__assert_fail@plt+0x25324>
   371a8:	add	r3, r3, #1
   371ac:	add	r2, r3, r0
   371b0:	cmp	r2, r8
   371b4:	bcc	37130 <__assert_fail@plt+0x2529c>
   371b8:	cmp	r8, #2
   371bc:	bcc	373ac <__assert_fail@plt+0x25518>
   371c0:	mvn	lr, #0
   371c4:	mov	r2, #0
   371c8:	mov	r3, #1
   371cc:	mov	sl, #1
   371d0:	mov	r7, #1
   371d4:	add	r6, lr, r7
   371d8:	ldrb	r0, [r9, r3]
   371dc:	ldrb	r6, [r9, r6]
   371e0:	cmp	r6, r0
   371e4:	bcs	37204 <__assert_fail@plt+0x25370>
   371e8:	sub	sl, r3, lr
   371ec:	mov	r7, #1
   371f0:	mov	r2, r3
   371f4:	add	r3, r7, r2
   371f8:	cmp	r3, r8
   371fc:	bcc	371d4 <__assert_fail@plt+0x25340>
   37200:	b	373b4 <__assert_fail@plt+0x25520>
   37204:	cmp	r0, r6
   37208:	bne	3722c <__assert_fail@plt+0x25398>
   3720c:	cmp	r7, sl
   37210:	bne	37250 <__assert_fail@plt+0x253bc>
   37214:	add	r2, r2, sl
   37218:	mov	r7, #1
   3721c:	add	r3, r7, r2
   37220:	cmp	r3, r8
   37224:	bcc	371d4 <__assert_fail@plt+0x25340>
   37228:	b	373b4 <__assert_fail@plt+0x25520>
   3722c:	add	r0, r2, #1
   37230:	mov	lr, r2
   37234:	mov	r7, #1
   37238:	mov	sl, #1
   3723c:	mov	r2, r0
   37240:	add	r3, r7, r2
   37244:	cmp	r3, r8
   37248:	bcc	371d4 <__assert_fail@plt+0x25340>
   3724c:	b	373b4 <__assert_fail@plt+0x25520>
   37250:	add	r7, r7, #1
   37254:	add	r3, r7, r2
   37258:	cmp	r3, r8
   3725c:	bcc	371d4 <__assert_fail@plt+0x25340>
   37260:	b	373b4 <__assert_fail@plt+0x25520>
   37264:	mvn	r1, #0
   37268:	mov	r0, #0
   3726c:	mov	r2, #1
   37270:	mov	ip, #1
   37274:	mov	r3, #1
   37278:	add	r6, r1, r3
   3727c:	ldrb	r7, [r9, r2]
   37280:	ldrb	r6, [r9, r6]
   37284:	cmp	r7, r6
   37288:	bcs	372a8 <__assert_fail@plt+0x25414>
   3728c:	sub	ip, r2, r1
   37290:	mov	r3, #1
   37294:	mov	r0, r2
   37298:	add	r2, r3, r0
   3729c:	cmp	r2, r8
   372a0:	bcc	37278 <__assert_fail@plt+0x253e4>
   372a4:	b	37300 <__assert_fail@plt+0x2546c>
   372a8:	bne	372cc <__assert_fail@plt+0x25438>
   372ac:	cmp	r3, ip
   372b0:	bne	372f0 <__assert_fail@plt+0x2545c>
   372b4:	add	r0, r0, ip
   372b8:	mov	r3, #1
   372bc:	add	r2, r3, r0
   372c0:	cmp	r2, r8
   372c4:	bcc	37278 <__assert_fail@plt+0x253e4>
   372c8:	b	37300 <__assert_fail@plt+0x2546c>
   372cc:	add	r2, r0, #1
   372d0:	mov	r1, r0
   372d4:	mov	r3, #1
   372d8:	mov	ip, #1
   372dc:	mov	r0, r2
   372e0:	add	r2, r3, r0
   372e4:	cmp	r2, r8
   372e8:	bcc	37278 <__assert_fail@plt+0x253e4>
   372ec:	b	37300 <__assert_fail@plt+0x2546c>
   372f0:	add	r3, r3, #1
   372f4:	add	r2, r3, r0
   372f8:	cmp	r2, r8
   372fc:	bcc	37278 <__assert_fail@plt+0x253e4>
   37300:	cmp	r8, #2
   37304:	bcc	37888 <__assert_fail@plt+0x259f4>
   37308:	mvn	r7, #0
   3730c:	mov	r2, #0
   37310:	mov	r3, #1
   37314:	mov	sl, #1
   37318:	mov	r6, #1
   3731c:	add	r4, r7, r6
   37320:	ldrb	r0, [r9, r3]
   37324:	ldrb	r4, [r9, r4]
   37328:	cmp	r4, r0
   3732c:	bcs	3734c <__assert_fail@plt+0x254b8>
   37330:	sub	sl, r3, r7
   37334:	mov	r6, #1
   37338:	mov	r2, r3
   3733c:	add	r3, r6, r2
   37340:	cmp	r3, r8
   37344:	bcc	3731c <__assert_fail@plt+0x25488>
   37348:	b	37890 <__assert_fail@plt+0x259fc>
   3734c:	cmp	r0, r4
   37350:	bne	37374 <__assert_fail@plt+0x254e0>
   37354:	cmp	r6, sl
   37358:	bne	37398 <__assert_fail@plt+0x25504>
   3735c:	add	r2, r2, sl
   37360:	mov	r6, #1
   37364:	add	r3, r6, r2
   37368:	cmp	r3, r8
   3736c:	bcc	3731c <__assert_fail@plt+0x25488>
   37370:	b	37890 <__assert_fail@plt+0x259fc>
   37374:	add	r0, r2, #1
   37378:	mov	r7, r2
   3737c:	mov	r6, #1
   37380:	mov	sl, #1
   37384:	mov	r2, r0
   37388:	add	r3, r6, r2
   3738c:	cmp	r3, r8
   37390:	bcc	3731c <__assert_fail@plt+0x25488>
   37394:	b	37890 <__assert_fail@plt+0x259fc>
   37398:	add	r6, r6, #1
   3739c:	add	r3, r6, r2
   373a0:	cmp	r3, r8
   373a4:	bcc	3731c <__assert_fail@plt+0x25488>
   373a8:	b	37890 <__assert_fail@plt+0x259fc>
   373ac:	mov	sl, #1
   373b0:	mvn	lr, #0
   373b4:	add	r6, sp, #24
   373b8:	vdup.32	q8, r8
   373bc:	add	r2, lr, #1
   373c0:	add	r0, r6, #16
   373c4:	mov	r3, r6
   373c8:	vst1.32	{d16-d17}, [r0]
   373cc:	add	r0, r6, #32
   373d0:	vst1.32	{d16-d17}, [r0]
   373d4:	add	r0, r6, #48	; 0x30
   373d8:	vst1.32	{d16-d17}, [r0]
   373dc:	add	r0, r6, #64	; 0x40
   373e0:	vst1.32	{d16-d17}, [r0]
   373e4:	add	r0, r6, #80	; 0x50
   373e8:	vst1.32	{d16-d17}, [r0]
   373ec:	add	r0, r6, #96	; 0x60
   373f0:	vst1.32	{d16-d17}, [r0]
   373f4:	add	r0, r6, #112	; 0x70
   373f8:	vst1.32	{d16-d17}, [r0]
   373fc:	add	r0, r6, #128	; 0x80
   37400:	vst1.32	{d16-d17}, [r0]
   37404:	add	r0, r6, #144	; 0x90
   37408:	vst1.32	{d16-d17}, [r0]
   3740c:	add	r0, r6, #160	; 0xa0
   37410:	vst1.32	{d16-d17}, [r0]
   37414:	add	r0, r6, #176	; 0xb0
   37418:	vst1.32	{d16-d17}, [r0]
   3741c:	add	r0, r6, #192	; 0xc0
   37420:	vst1.32	{d16-d17}, [r0]
   37424:	add	r0, r6, #208	; 0xd0
   37428:	vst1.32	{d16-d17}, [r0]
   3742c:	add	r0, r6, #224	; 0xe0
   37430:	vst1.32	{d16-d17}, [r0]
   37434:	add	r0, r6, #240	; 0xf0
   37438:	vst1.32	{d16-d17}, [r0]
   3743c:	add	r0, r6, #256	; 0x100
   37440:	vst1.32	{d16-d17}, [r0]
   37444:	add	r0, r6, #272	; 0x110
   37448:	vst1.32	{d16-d17}, [r0]
   3744c:	add	r0, r6, #288	; 0x120
   37450:	vst1.32	{d16-d17}, [r0]
   37454:	mov	r0, #1008	; 0x3f0
   37458:	vst1.32	{d16-d17}, [r3], r0
   3745c:	add	r0, r6, #320	; 0x140
   37460:	vst1.32	{d16-d17}, [r0]
   37464:	add	r0, r6, #304	; 0x130
   37468:	vst1.32	{d16-d17}, [r0]
   3746c:	add	r0, r6, #336	; 0x150
   37470:	vst1.32	{d16-d17}, [r0]
   37474:	add	r0, r6, #352	; 0x160
   37478:	vst1.32	{d16-d17}, [r0]
   3747c:	add	r0, r6, #368	; 0x170
   37480:	vst1.32	{d16-d17}, [r0]
   37484:	add	r0, r6, #384	; 0x180
   37488:	vst1.32	{d16-d17}, [r0]
   3748c:	add	r0, r6, #400	; 0x190
   37490:	vst1.32	{d16-d17}, [r0]
   37494:	add	r0, r6, #416	; 0x1a0
   37498:	vst1.32	{d16-d17}, [r0]
   3749c:	add	r0, r6, #432	; 0x1b0
   374a0:	vst1.32	{d16-d17}, [r0]
   374a4:	add	r0, r6, #448	; 0x1c0
   374a8:	vst1.32	{d16-d17}, [r0]
   374ac:	add	r0, r6, #464	; 0x1d0
   374b0:	vst1.32	{d16-d17}, [r0]
   374b4:	add	r0, r6, #480	; 0x1e0
   374b8:	vst1.32	{d16-d17}, [r0]
   374bc:	add	r0, r6, #496	; 0x1f0
   374c0:	vst1.32	{d16-d17}, [r0]
   374c4:	add	r0, r6, #512	; 0x200
   374c8:	vst1.32	{d16-d17}, [r0]
   374cc:	add	r0, r6, #528	; 0x210
   374d0:	vst1.32	{d16-d17}, [r0]
   374d4:	add	r0, r6, #544	; 0x220
   374d8:	vst1.32	{d16-d17}, [r0]
   374dc:	add	r0, r6, #560	; 0x230
   374e0:	vst1.32	{d16-d17}, [r0]
   374e4:	add	r0, r6, #576	; 0x240
   374e8:	vst1.32	{d16-d17}, [r0]
   374ec:	add	r0, r6, #592	; 0x250
   374f0:	vst1.32	{d16-d17}, [r0]
   374f4:	add	r0, r6, #624	; 0x270
   374f8:	vst1.32	{d16-d17}, [r0]
   374fc:	add	r0, r6, #608	; 0x260
   37500:	vst1.32	{d16-d17}, [r0]
   37504:	add	r0, r6, #640	; 0x280
   37508:	vst1.32	{d16-d17}, [r0]
   3750c:	add	r0, r6, #656	; 0x290
   37510:	vst1.32	{d16-d17}, [r0]
   37514:	add	r0, r6, #672	; 0x2a0
   37518:	vst1.32	{d16-d17}, [r0]
   3751c:	add	r0, r6, #688	; 0x2b0
   37520:	vst1.32	{d16-d17}, [r0]
   37524:	add	r0, r6, #704	; 0x2c0
   37528:	vst1.32	{d16-d17}, [r0]
   3752c:	add	r0, r6, #720	; 0x2d0
   37530:	vst1.32	{d16-d17}, [r0]
   37534:	add	r0, r6, #736	; 0x2e0
   37538:	vst1.32	{d16-d17}, [r0]
   3753c:	add	r0, r6, #752	; 0x2f0
   37540:	vst1.32	{d16-d17}, [r0]
   37544:	add	r0, r6, #768	; 0x300
   37548:	vst1.32	{d16-d17}, [r0]
   3754c:	add	r0, r6, #784	; 0x310
   37550:	vst1.32	{d16-d17}, [r0]
   37554:	add	r0, r6, #800	; 0x320
   37558:	vst1.32	{d16-d17}, [r0]
   3755c:	add	r0, r6, #816	; 0x330
   37560:	vst1.32	{d16-d17}, [r0]
   37564:	add	r0, r6, #832	; 0x340
   37568:	vst1.32	{d16-d17}, [r0]
   3756c:	add	r0, r6, #848	; 0x350
   37570:	vst1.32	{d16-d17}, [r0]
   37574:	add	r0, r6, #864	; 0x360
   37578:	vst1.32	{d16-d17}, [r0]
   3757c:	add	r0, r6, #880	; 0x370
   37580:	vst1.32	{d16-d17}, [r0]
   37584:	add	r0, r6, #896	; 0x380
   37588:	vst1.32	{d16-d17}, [r0]
   3758c:	add	r0, r6, #928	; 0x3a0
   37590:	vst1.32	{d16-d17}, [r0]
   37594:	add	r0, r6, #912	; 0x390
   37598:	vst1.32	{d16-d17}, [r0]
   3759c:	add	r0, r6, #944	; 0x3b0
   375a0:	vst1.32	{d16-d17}, [r0]
   375a4:	add	r0, r6, #960	; 0x3c0
   375a8:	vst1.32	{d16-d17}, [r0]
   375ac:	add	r0, r6, #976	; 0x3d0
   375b0:	vst1.32	{d16-d17}, [r0]
   375b4:	add	r0, r6, #992	; 0x3e0
   375b8:	vst1.32	{d16-d17}, [r0]
   375bc:	add	r0, r1, #1
   375c0:	vst1.32	{d16-d17}, [r3]
   375c4:	cmp	r2, r0
   375c8:	movcc	sl, ip
   375cc:	movcc	r2, r0
   375d0:	cmp	r8, #0
   375d4:	beq	375ec <__assert_fail@plt+0x25758>
   375d8:	mov	r0, r8
   375dc:	ldrb	r1, [r4, -r0]
   375e0:	subs	r0, r0, #1
   375e4:	str	r0, [r6, r1, lsl #2]
   375e8:	bne	375dc <__assert_fail@plt+0x25748>
   375ec:	add	r1, r9, sl
   375f0:	mov	r0, r9
   375f4:	mov	r4, r2
   375f8:	bl	11ac8 <memcmp@plt>
   375fc:	cmp	r0, #0
   37600:	str	r4, [sp, #16]
   37604:	beq	3772c <__assert_fail@plt+0x25898>
   37608:	ldr	r0, [sp, #20]
   3760c:	sub	r2, r8, r5
   37610:	mov	r1, #0
   37614:	mov	r6, #0
   37618:	add	r0, r0, r5
   3761c:	bl	11d14 <memchr@plt>
   37620:	sub	r2, r8, r4
   37624:	cmp	r4, r2
   37628:	movcs	r2, r4
   3762c:	cmp	r8, #0
   37630:	beq	37110 <__assert_fail@plt+0x2527c>
   37634:	ldr	lr, [sp, #20]
   37638:	cmp	r0, #0
   3763c:	str	r2, [sp, #12]
   37640:	bne	37110 <__assert_fail@plt+0x2527c>
   37644:	sub	r5, r8, #1
   37648:	mov	r1, r4
   3764c:	cmp	r4, r5
   37650:	bcs	37ac8 <__assert_fail@plt+0x25c34>
   37654:	add	r0, lr, r1
   37658:	add	sl, r9, r1
   3765c:	mov	ip, #0
   37660:	mov	r7, r8
   37664:	str	r0, [sp, #8]
   37668:	rsb	r0, r1, #1
   3766c:	str	r0, [sp, #4]
   37670:	add	r0, lr, r7
   37674:	add	r3, sp, #24
   37678:	mov	r4, r7
   3767c:	ldrb	r2, [r0, #-1]
   37680:	ldr	r2, [r3, r2, lsl #2]
   37684:	cmp	r2, #0
   37688:	beq	37694 <__assert_fail@plt+0x25800>
   3768c:	add	ip, r2, ip
   37690:	b	376f0 <__assert_fail@plt+0x2585c>
   37694:	ldr	r2, [sp, #8]
   37698:	add	r3, r2, ip
   3769c:	mov	r2, #0
   376a0:	ldrb	r7, [r3, r2]
   376a4:	ldrb	r6, [sl, r2]
   376a8:	cmp	r6, r7
   376ac:	bne	376e8 <__assert_fail@plt+0x25854>
   376b0:	add	r2, r2, #1
   376b4:	add	r7, r1, r2
   376b8:	cmp	r7, r5
   376bc:	bcc	376a0 <__assert_fail@plt+0x2580c>
   376c0:	ldr	r3, [sp, #4]
   376c4:	add	r2, lr, ip
   376c8:	cmp	r3, #1
   376cc:	beq	37b58 <__assert_fail@plt+0x25cc4>
   376d0:	ldrb	r7, [r2, -r3]
   376d4:	ldrb	r6, [r9, -r3]
   376d8:	add	r3, r3, #1
   376dc:	cmp	r6, r7
   376e0:	beq	376c8 <__assert_fail@plt+0x25834>
   376e4:	ldr	r2, [sp, #12]
   376e8:	add	r2, ip, r2
   376ec:	add	ip, r2, #1
   376f0:	mov	r1, r4
   376f4:	add	r7, ip, r8
   376f8:	mov	r4, ip
   376fc:	mov	r6, #0
   37700:	sub	r2, r7, r1
   37704:	mov	r1, #0
   37708:	bl	11d14 <memchr@plt>
   3770c:	cmp	r7, #0
   37710:	beq	37110 <__assert_fail@plt+0x2527c>
   37714:	ldr	lr, [sp, #20]
   37718:	ldr	r1, [sp, #16]
   3771c:	cmp	r0, #0
   37720:	mov	ip, r4
   37724:	beq	37670 <__assert_fail@plt+0x257dc>
   37728:	b	37110 <__assert_fail@plt+0x2527c>
   3772c:	ldr	r0, [sp, #20]
   37730:	sub	r2, r8, r5
   37734:	mov	r1, #0
   37738:	mov	r6, #0
   3773c:	add	r0, r0, r5
   37740:	bl	11d14 <memchr@plt>
   37744:	cmp	r8, #0
   37748:	beq	37110 <__assert_fail@plt+0x2527c>
   3774c:	ldr	lr, [sp, #20]
   37750:	ldr	r7, [sp, #16]
   37754:	cmp	r0, #0
   37758:	str	sl, [sp, #12]
   3775c:	bne	37110 <__assert_fail@plt+0x2527c>
   37760:	ldr	r0, [sp, #12]
   37764:	sub	r5, r8, #1
   37768:	mov	sl, #0
   3776c:	mov	ip, r8
   37770:	mov	r1, #0
   37774:	sub	r0, r8, r0
   37778:	str	r0, [sp, #8]
   3777c:	sub	r0, r7, #1
   37780:	str	r0, [sp, #4]
   37784:	rsb	r0, r7, #0
   37788:	str	r0, [sp]
   3778c:	add	r0, lr, ip
   37790:	add	r3, sp, #24
   37794:	ldrb	r2, [r0, #-1]
   37798:	ldr	r3, [r3, r2, lsl #2]
   3779c:	cmp	r3, #0
   377a0:	beq	377c8 <__assert_fail@plt+0x25934>
   377a4:	ldr	r2, [sp, #12]
   377a8:	ldr	r7, [sp, #8]
   377ac:	cmp	r3, r2
   377b0:	mov	r2, r3
   377b4:	movcc	r2, r7
   377b8:	cmp	sl, #0
   377bc:	moveq	r2, r3
   377c0:	mov	sl, #0
   377c4:	b	37838 <__assert_fail@plt+0x259a4>
   377c8:	cmp	r7, sl
   377cc:	mov	r2, r7
   377d0:	movcc	r2, sl
   377d4:	cmp	r2, r5
   377d8:	bcs	377fc <__assert_fail@plt+0x25968>
   377dc:	add	r3, lr, r1
   377e0:	ldrb	r7, [r3, r2]
   377e4:	ldrb	r6, [r9, r2]
   377e8:	cmp	r6, r7
   377ec:	bne	37878 <__assert_fail@plt+0x259e4>
   377f0:	add	r2, r2, #1
   377f4:	cmp	r2, r5
   377f8:	bcc	377e0 <__assert_fail@plt+0x2594c>
   377fc:	ldr	r2, [sp, #4]
   37800:	add	r6, lr, r1
   37804:	add	r3, r2, #1
   37808:	cmp	sl, r3
   3780c:	bcs	37824 <__assert_fail@plt+0x25990>
   37810:	ldrb	r7, [r6, r2]
   37814:	ldrb	r4, [r9, r2]
   37818:	sub	r2, r2, #1
   3781c:	cmp	r4, r7
   37820:	beq	37804 <__assert_fail@plt+0x25970>
   37824:	add	r2, sl, #1
   37828:	ldr	sl, [sp, #8]
   3782c:	cmp	r3, r2
   37830:	ldr	r2, [sp, #12]
   37834:	bcc	37110 <__assert_fail@plt+0x2527c>
   37838:	add	r1, r2, r1
   3783c:	mov	r6, #0
   37840:	add	r7, r1, r8
   37844:	mov	r4, r1
   37848:	mov	r1, #0
   3784c:	sub	r2, r7, ip
   37850:	bl	11d14 <memchr@plt>
   37854:	cmp	r7, #0
   37858:	beq	37110 <__assert_fail@plt+0x2527c>
   3785c:	mov	ip, r7
   37860:	ldr	lr, [sp, #20]
   37864:	ldr	r7, [sp, #16]
   37868:	cmp	r0, #0
   3786c:	mov	r1, r4
   37870:	beq	3778c <__assert_fail@plt+0x258f8>
   37874:	b	37110 <__assert_fail@plt+0x2527c>
   37878:	ldr	r3, [sp]
   3787c:	add	r2, r3, r2
   37880:	add	r2, r2, #1
   37884:	b	377c0 <__assert_fail@plt+0x2592c>
   37888:	mov	sl, #1
   3788c:	mvn	r7, #0
   37890:	add	r0, r1, #1
   37894:	add	r2, r7, #1
   37898:	cmp	r2, r0
   3789c:	movcc	sl, ip
   378a0:	movcc	r2, r0
   378a4:	add	r1, r9, sl
   378a8:	mov	r0, r9
   378ac:	mov	r4, r2
   378b0:	bl	11ac8 <memcmp@plt>
   378b4:	cmp	r0, #0
   378b8:	str	r4, [sp, #16]
   378bc:	beq	379b0 <__assert_fail@plt+0x25b1c>
   378c0:	ldr	r0, [sp, #20]
   378c4:	sub	r2, r8, r5
   378c8:	mov	r1, #0
   378cc:	mov	r6, #0
   378d0:	add	r0, r0, r5
   378d4:	bl	11d14 <memchr@plt>
   378d8:	sub	r5, r8, r4
   378dc:	cmp	r4, r5
   378e0:	movcs	r5, r4
   378e4:	cmp	r8, #0
   378e8:	beq	37110 <__assert_fail@plt+0x2527c>
   378ec:	ldr	ip, [sp, #20]
   378f0:	cmp	r0, #0
   378f4:	bne	37110 <__assert_fail@plt+0x2527c>
   378f8:	cmp	r8, r4
   378fc:	bls	37b68 <__assert_fail@plt+0x25cd4>
   37900:	add	r0, ip, r4
   37904:	add	r7, r9, r4
   37908:	mov	sl, #0
   3790c:	mov	r1, r8
   37910:	str	r0, [sp, #12]
   37914:	rsb	r0, r4, #1
   37918:	str	r0, [sp, #8]
   3791c:	ldr	r0, [sp, #12]
   37920:	mov	r2, #0
   37924:	add	r0, r0, sl
   37928:	ldrb	r3, [r0, r2]
   3792c:	ldrb	r6, [r7, r2]
   37930:	cmp	r6, r3
   37934:	bne	37970 <__assert_fail@plt+0x25adc>
   37938:	add	r2, r2, #1
   3793c:	add	r3, r4, r2
   37940:	cmp	r3, r8
   37944:	bcc	37928 <__assert_fail@plt+0x25a94>
   37948:	ldr	r2, [sp, #8]
   3794c:	add	r0, ip, sl
   37950:	cmp	r2, #1
   37954:	beq	37be0 <__assert_fail@plt+0x25d4c>
   37958:	ldrb	r3, [r0, -r2]
   3795c:	ldrb	r6, [r9, -r2]
   37960:	add	r2, r2, #1
   37964:	cmp	r6, r3
   37968:	beq	37950 <__assert_fail@plt+0x25abc>
   3796c:	mov	r2, r5
   37970:	add	r2, sl, r2
   37974:	add	r0, ip, r1
   37978:	mov	r6, #0
   3797c:	add	sl, r2, #1
   37980:	add	r4, sl, r8
   37984:	sub	r2, r4, r1
   37988:	mov	r1, #0
   3798c:	bl	11d14 <memchr@plt>
   37990:	cmp	r0, #0
   37994:	bne	37110 <__assert_fail@plt+0x2527c>
   37998:	cmp	r4, #0
   3799c:	mov	r1, r4
   379a0:	ldr	ip, [sp, #20]
   379a4:	ldr	r4, [sp, #16]
   379a8:	bne	3791c <__assert_fail@plt+0x25a88>
   379ac:	b	37110 <__assert_fail@plt+0x2527c>
   379b0:	ldr	r0, [sp, #20]
   379b4:	sub	r2, r8, r5
   379b8:	mov	r1, #0
   379bc:	mov	r6, #0
   379c0:	add	r0, r0, r5
   379c4:	bl	11d14 <memchr@plt>
   379c8:	cmp	r8, #0
   379cc:	beq	37110 <__assert_fail@plt+0x2527c>
   379d0:	cmp	r0, #0
   379d4:	ldr	r4, [sp, #20]
   379d8:	ldr	r0, [sp, #16]
   379dc:	str	sl, [sp, #12]
   379e0:	bne	37110 <__assert_fail@plt+0x2527c>
   379e4:	ldr	r1, [sp, #12]
   379e8:	mov	sl, #0
   379ec:	mov	r5, #0
   379f0:	sub	r1, r8, r1
   379f4:	str	r1, [sp, #8]
   379f8:	sub	r1, r0, #1
   379fc:	str	r1, [sp, #4]
   37a00:	rsb	r1, r0, #0
   37a04:	str	r1, [sp]
   37a08:	mov	r1, r8
   37a0c:	cmp	r0, sl
   37a10:	movcc	r0, sl
   37a14:	cmp	r0, r8
   37a18:	bcs	37a3c <__assert_fail@plt+0x25ba8>
   37a1c:	add	r2, r4, r5
   37a20:	ldrb	r3, [r2, r0]
   37a24:	ldrb	r7, [r9, r0]
   37a28:	cmp	r7, r3
   37a2c:	bne	37a7c <__assert_fail@plt+0x25be8>
   37a30:	add	r0, r0, #1
   37a34:	cmp	r0, r8
   37a38:	bcc	37a20 <__assert_fail@plt+0x25b8c>
   37a3c:	ldr	r0, [sp, #4]
   37a40:	add	r6, r4, r5
   37a44:	add	r2, r0, #1
   37a48:	cmp	sl, r2
   37a4c:	bcs	37a64 <__assert_fail@plt+0x25bd0>
   37a50:	ldrb	r3, [r6, r0]
   37a54:	ldrb	r7, [r9, r0]
   37a58:	sub	r0, r0, #1
   37a5c:	cmp	r7, r3
   37a60:	beq	37a44 <__assert_fail@plt+0x25bb0>
   37a64:	add	r0, sl, #1
   37a68:	ldr	sl, [sp, #8]
   37a6c:	cmp	r2, r0
   37a70:	ldr	r2, [sp, #12]
   37a74:	bcs	37a8c <__assert_fail@plt+0x25bf8>
   37a78:	b	37110 <__assert_fail@plt+0x2527c>
   37a7c:	ldr	r2, [sp]
   37a80:	mov	sl, #0
   37a84:	add	r0, r2, r0
   37a88:	add	r2, r0, #1
   37a8c:	add	r5, r2, r5
   37a90:	add	r0, r4, r1
   37a94:	mov	r6, #0
   37a98:	add	r7, r5, r8
   37a9c:	sub	r2, r7, r1
   37aa0:	mov	r1, #0
   37aa4:	bl	11d14 <memchr@plt>
   37aa8:	cmp	r7, #0
   37aac:	beq	37110 <__assert_fail@plt+0x2527c>
   37ab0:	cmp	r0, #0
   37ab4:	ldr	r4, [sp, #20]
   37ab8:	ldr	r0, [sp, #16]
   37abc:	mov	r1, r7
   37ac0:	beq	37a0c <__assert_fail@plt+0x25b78>
   37ac4:	b	37110 <__assert_fail@plt+0x2527c>
   37ac8:	ldr	r0, [sp, #12]
   37acc:	rsb	r5, r1, #1
   37ad0:	mov	ip, #0
   37ad4:	mov	r1, r8
   37ad8:	add	sl, r0, #1
   37adc:	add	r0, lr, r1
   37ae0:	add	r3, sp, #24
   37ae4:	ldrb	r2, [r0, #-1]
   37ae8:	ldr	r2, [r3, r2, lsl #2]
   37aec:	cmp	r2, #0
   37af0:	bne	37b1c <__assert_fail@plt+0x25c88>
   37af4:	add	r2, lr, ip
   37af8:	mov	r3, r5
   37afc:	cmp	r3, #1
   37b00:	beq	37b58 <__assert_fail@plt+0x25cc4>
   37b04:	ldrb	r7, [r2, -r3]
   37b08:	ldrb	r6, [r9, -r3]
   37b0c:	add	r3, r3, #1
   37b10:	cmp	r6, r7
   37b14:	beq	37afc <__assert_fail@plt+0x25c68>
   37b18:	mov	r2, sl
   37b1c:	add	ip, r2, ip
   37b20:	mov	r6, #0
   37b24:	add	r7, ip, r8
   37b28:	mov	r4, ip
   37b2c:	sub	r2, r7, r1
   37b30:	mov	r1, #0
   37b34:	bl	11d14 <memchr@plt>
   37b38:	cmp	r7, #0
   37b3c:	beq	37110 <__assert_fail@plt+0x2527c>
   37b40:	ldr	lr, [sp, #20]
   37b44:	cmp	r0, #0
   37b48:	mov	r1, r7
   37b4c:	mov	ip, r4
   37b50:	beq	37adc <__assert_fail@plt+0x25c48>
   37b54:	b	37110 <__assert_fail@plt+0x2527c>
   37b58:	add	r6, lr, ip
   37b5c:	mov	r0, r6
   37b60:	sub	sp, fp, #28
   37b64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37b68:	rsb	r4, r4, #1
   37b6c:	add	r5, r5, #1
   37b70:	mov	sl, #0
   37b74:	mov	r7, ip
   37b78:	mov	r0, r8
   37b7c:	mov	r1, r4
   37b80:	cmp	r1, #1
   37b84:	beq	37be0 <__assert_fail@plt+0x25d4c>
   37b88:	ldrb	r6, [r7, -r1]
   37b8c:	ldrb	r3, [r9, -r1]
   37b90:	add	r1, r1, #1
   37b94:	cmp	r3, r6
   37b98:	beq	37b80 <__assert_fail@plt+0x25cec>
   37b9c:	add	sl, r5, sl
   37ba0:	add	r0, ip, r0
   37ba4:	mov	r1, #0
   37ba8:	mov	r2, r5
   37bac:	str	r4, [sp, #16]
   37bb0:	mov	r6, #0
   37bb4:	add	r4, sl, r8
   37bb8:	bl	11d14 <memchr@plt>
   37bbc:	cmp	r4, #0
   37bc0:	beq	37110 <__assert_fail@plt+0x2527c>
   37bc4:	cmp	r0, #0
   37bc8:	mov	r0, r4
   37bcc:	ldr	ip, [sp, #20]
   37bd0:	ldr	r4, [sp, #16]
   37bd4:	add	r7, r7, r5
   37bd8:	beq	37b7c <__assert_fail@plt+0x25ce8>
   37bdc:	b	37110 <__assert_fail@plt+0x2527c>
   37be0:	add	r6, ip, sl
   37be4:	mov	r0, r6
   37be8:	sub	sp, fp, #28
   37bec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37bf0:	push	{r4, r5, r6, sl, fp, lr}
   37bf4:	add	fp, sp, #16
   37bf8:	mov	r4, r0
   37bfc:	bl	11b94 <__fpending@plt>
   37c00:	ldr	r6, [r4]
   37c04:	mov	r5, r0
   37c08:	mov	r0, r4
   37c0c:	bl	15ff8 <__assert_fail@plt+0x4164>
   37c10:	tst	r6, #32
   37c14:	bne	37c4c <__assert_fail@plt+0x25db8>
   37c18:	cmp	r0, #0
   37c1c:	mov	r4, r0
   37c20:	mvnne	r4, #0
   37c24:	cmp	r5, #0
   37c28:	bne	37c58 <__assert_fail@plt+0x25dc4>
   37c2c:	cmp	r0, #0
   37c30:	beq	37c58 <__assert_fail@plt+0x25dc4>
   37c34:	bl	11ca8 <__errno_location@plt>
   37c38:	ldr	r0, [r0]
   37c3c:	subs	r4, r0, #9
   37c40:	mvnne	r4, #0
   37c44:	mov	r0, r4
   37c48:	pop	{r4, r5, r6, sl, fp, pc}
   37c4c:	mvn	r4, #0
   37c50:	cmp	r0, #0
   37c54:	beq	37c60 <__assert_fail@plt+0x25dcc>
   37c58:	mov	r0, r4
   37c5c:	pop	{r4, r5, r6, sl, fp, pc}
   37c60:	bl	11ca8 <__errno_location@plt>
   37c64:	mov	r1, #0
   37c68:	str	r1, [r0]
   37c6c:	mov	r0, r4
   37c70:	pop	{r4, r5, r6, sl, fp, pc}
   37c74:	movw	r2, #62998	; 0xf616
   37c78:	mov	r1, #0
   37c7c:	movt	r2, #149	; 0x95
   37c80:	str	r1, [r0, #16]
   37c84:	str	r1, [r0, #20]
   37c88:	str	r2, [r0, #24]
   37c8c:	bx	lr
   37c90:	push	{r4, r5, r6, r7, fp, lr}
   37c94:	add	fp, sp, #16
   37c98:	ldr	r2, [r0, #24]
   37c9c:	movw	r3, #62998	; 0xf616
   37ca0:	movt	r3, #149	; 0x95
   37ca4:	cmp	r2, r3
   37ca8:	bne	37d48 <__assert_fail@plt+0x25eb4>
   37cac:	mov	r3, r0
   37cb0:	ldr	r2, [r3, #16]!
   37cb4:	ldr	lr, [r3, #4]
   37cb8:	orrs	r5, r2, lr
   37cbc:	beq	37cf4 <__assert_fail@plt+0x25e60>
   37cc0:	ldrd	r4, [r0]
   37cc4:	ldrd	r6, [r1, #96]	; 0x60
   37cc8:	eor	r7, r7, r5
   37ccc:	eor	r6, r6, r4
   37cd0:	orrs	r7, r6, r7
   37cd4:	bne	37cf4 <__assert_fail@plt+0x25e60>
   37cd8:	ldrd	r4, [r0, #8]
   37cdc:	ldrd	r6, [r1]
   37ce0:	mov	ip, #1
   37ce4:	eor	r7, r7, r5
   37ce8:	eor	r6, r6, r4
   37cec:	orrs	r7, r6, r7
   37cf0:	beq	37d14 <__assert_fail@plt+0x25e80>
   37cf4:	adds	r4, r2, #1
   37cf8:	mov	ip, #0
   37cfc:	adc	r5, lr, #0
   37d00:	and	r2, r4, r2
   37d04:	strd	r4, [r3]
   37d08:	and	r3, r5, lr
   37d0c:	orrs	r2, r2, r3
   37d10:	beq	37d1c <__assert_fail@plt+0x25e88>
   37d14:	mov	r0, ip
   37d18:	pop	{r4, r5, r6, r7, fp, pc}
   37d1c:	orrs	r2, r4, r5
   37d20:	moveq	ip, #1
   37d24:	moveq	r0, ip
   37d28:	popeq	{r4, r5, r6, r7, fp, pc}
   37d2c:	ldrd	r2, [r1]
   37d30:	str	r3, [r0, #12]
   37d34:	str	r2, [r0, #8]
   37d38:	ldrd	r2, [r1, #96]	; 0x60
   37d3c:	stm	r0, {r2, r3}
   37d40:	mov	r0, ip
   37d44:	pop	{r4, r5, r6, r7, fp, pc}
   37d48:	movw	r0, #44087	; 0xac37
   37d4c:	movw	r1, #44111	; 0xac4f
   37d50:	movw	r3, #44129	; 0xac61
   37d54:	mov	r2, #60	; 0x3c
   37d58:	movt	r0, #3
   37d5c:	movt	r1, #3
   37d60:	movt	r3, #3
   37d64:	bl	11e94 <__assert_fail@plt>
   37d68:	push	{r4, r5, r6, r7, fp, lr}
   37d6c:	add	fp, sp, #16
   37d70:	mov	r4, r0
   37d74:	ldr	r0, [r0, #4]
   37d78:	mov	r5, r1
   37d7c:	cmp	r0, r1
   37d80:	movcs	r0, #1
   37d84:	strcs	r5, [r4]
   37d88:	popcs	{r4, r5, r6, r7, fp, pc}
   37d8c:	mov	r6, r3
   37d90:	cmp	r3, #0
   37d94:	beq	37dbc <__assert_fail@plt+0x25f28>
   37d98:	mvn	r0, #0
   37d9c:	udiv	r0, r0, r6
   37da0:	cmp	r0, r5
   37da4:	bcs	37dbc <__assert_fail@plt+0x25f28>
   37da8:	bl	11ca8 <__errno_location@plt>
   37dac:	mov	r1, #12
   37db0:	str	r1, [r0]
   37db4:	mov	r0, #0
   37db8:	pop	{r4, r5, r6, r7, fp, pc}
   37dbc:	ldr	r0, [r4, #8]
   37dc0:	mul	r1, r6, r5
   37dc4:	cmp	r0, r2
   37dc8:	beq	37de0 <__assert_fail@plt+0x25f4c>
   37dcc:	bl	36fe4 <__assert_fail@plt+0x25150>
   37dd0:	mov	r7, r0
   37dd4:	cmp	r0, #0
   37dd8:	bne	37e10 <__assert_fail@plt+0x25f7c>
   37ddc:	b	37e20 <__assert_fail@plt+0x25f8c>
   37de0:	mov	r0, r1
   37de4:	bl	36fb4 <__assert_fail@plt+0x25120>
   37de8:	cmp	r0, #0
   37dec:	beq	37e20 <__assert_fail@plt+0x25f8c>
   37df0:	ldr	r1, [r4, #8]
   37df4:	mov	r7, r0
   37df8:	cmp	r1, #0
   37dfc:	beq	37e10 <__assert_fail@plt+0x25f7c>
   37e00:	ldr	r0, [r4]
   37e04:	mul	r2, r0, r6
   37e08:	mov	r0, r7
   37e0c:	bl	11a8c <memcpy@plt>
   37e10:	mov	r0, #1
   37e14:	str	r5, [r4]
   37e18:	stmib	r4, {r5, r7}
   37e1c:	pop	{r4, r5, r6, r7, fp, pc}
   37e20:	mov	r0, #0
   37e24:	pop	{r4, r5, r6, r7, fp, pc}
   37e28:	sub	sp, sp, #8
   37e2c:	push	{r4, r5, r6, r7, fp, lr}
   37e30:	add	fp, sp, #16
   37e34:	sub	sp, sp, #8
   37e38:	mov	r5, r0
   37e3c:	add	r0, fp, #8
   37e40:	cmp	r1, #11
   37e44:	str	r3, [fp, #12]
   37e48:	str	r2, [fp, #8]
   37e4c:	str	r0, [sp, #4]
   37e50:	bhi	37e8c <__assert_fail@plt+0x25ff8>
   37e54:	mov	r0, #1
   37e58:	movw	r2, #1300	; 0x514
   37e5c:	tst	r2, r0, lsl r1
   37e60:	bne	37f4c <__assert_fail@plt+0x260b8>
   37e64:	movw	r2, #2570	; 0xa0a
   37e68:	tst	r2, r0, lsl r1
   37e6c:	bne	37eb4 <__assert_fail@plt+0x26020>
   37e70:	cmp	r1, #0
   37e74:	bne	37e8c <__assert_fail@plt+0x25ff8>
   37e78:	ldr	r0, [sp, #4]
   37e7c:	add	r1, r0, #4
   37e80:	str	r1, [sp, #4]
   37e84:	mov	r1, #0
   37e88:	b	37f58 <__assert_fail@plt+0x260c4>
   37e8c:	sub	r0, r1, #1024	; 0x400
   37e90:	cmp	r0, #10
   37e94:	bhi	37f4c <__assert_fail@plt+0x260b8>
   37e98:	mov	r2, #1
   37e9c:	movw	r3, #645	; 0x285
   37ea0:	tst	r3, r2, lsl r0
   37ea4:	bne	37f4c <__assert_fail@plt+0x260b8>
   37ea8:	movw	r3, #1282	; 0x502
   37eac:	tst	r3, r2, lsl r0
   37eb0:	beq	37ec0 <__assert_fail@plt+0x2602c>
   37eb4:	mov	r0, r5
   37eb8:	bl	11d44 <fcntl64@plt>
   37ebc:	b	37f64 <__assert_fail@plt+0x260d0>
   37ec0:	cmp	r0, #6
   37ec4:	bne	37f4c <__assert_fail@plt+0x260b8>
   37ec8:	ldr	r0, [sp, #4]
   37ecc:	movw	r7, #46056	; 0xb3e8
   37ed0:	movt	r7, #4
   37ed4:	add	r1, r0, #4
   37ed8:	str	r1, [sp, #4]
   37edc:	ldr	r6, [r0]
   37ee0:	ldr	r0, [r7]
   37ee4:	cmp	r0, #0
   37ee8:	blt	37f88 <__assert_fail@plt+0x260f4>
   37eec:	mov	r0, r5
   37ef0:	movw	r1, #1030	; 0x406
   37ef4:	mov	r2, r6
   37ef8:	bl	11d44 <fcntl64@plt>
   37efc:	mov	r4, r0
   37f00:	cmn	r0, #1
   37f04:	bgt	37f7c <__assert_fail@plt+0x260e8>
   37f08:	bl	11ca8 <__errno_location@plt>
   37f0c:	ldr	r0, [r0]
   37f10:	cmp	r0, #22
   37f14:	bne	37f7c <__assert_fail@plt+0x260e8>
   37f18:	mov	r0, r5
   37f1c:	mov	r1, #0
   37f20:	mov	r2, r6
   37f24:	bl	11d44 <fcntl64@plt>
   37f28:	mov	r4, r0
   37f2c:	cmp	r0, #0
   37f30:	blt	37f68 <__assert_fail@plt+0x260d4>
   37f34:	mvn	r0, #0
   37f38:	str	r0, [r7]
   37f3c:	mov	r0, #1
   37f40:	cmp	r0, #0
   37f44:	bne	37fb4 <__assert_fail@plt+0x26120>
   37f48:	b	37f68 <__assert_fail@plt+0x260d4>
   37f4c:	ldr	r0, [sp, #4]
   37f50:	add	r2, r0, #4
   37f54:	str	r2, [sp, #4]
   37f58:	ldr	r2, [r0]
   37f5c:	mov	r0, r5
   37f60:	bl	11d44 <fcntl64@plt>
   37f64:	mov	r4, r0
   37f68:	mov	r0, r4
   37f6c:	sub	sp, fp, #16
   37f70:	pop	{r4, r5, r6, r7, fp, lr}
   37f74:	add	sp, sp, #8
   37f78:	bx	lr
   37f7c:	mov	r0, #1
   37f80:	str	r0, [r7]
   37f84:	b	37f68 <__assert_fail@plt+0x260d4>
   37f88:	mov	r0, r5
   37f8c:	mov	r1, #0
   37f90:	mov	r2, r6
   37f94:	bl	11d44 <fcntl64@plt>
   37f98:	mov	r4, r0
   37f9c:	ldr	r0, [r7]
   37fa0:	add	r0, r0, #1
   37fa4:	clz	r0, r0
   37fa8:	lsr	r0, r0, #5
   37fac:	cmp	r0, #0
   37fb0:	beq	37f68 <__assert_fail@plt+0x260d4>
   37fb4:	cmp	r4, #0
   37fb8:	blt	37f68 <__assert_fail@plt+0x260d4>
   37fbc:	mov	r0, r4
   37fc0:	mov	r1, #1
   37fc4:	bl	11d44 <fcntl64@plt>
   37fc8:	cmp	r0, #0
   37fcc:	blt	37fe8 <__assert_fail@plt+0x26154>
   37fd0:	orr	r2, r0, #1
   37fd4:	mov	r0, r4
   37fd8:	mov	r1, #2
   37fdc:	bl	11d44 <fcntl64@plt>
   37fe0:	cmn	r0, #1
   37fe4:	bne	37f68 <__assert_fail@plt+0x260d4>
   37fe8:	bl	11ca8 <__errno_location@plt>
   37fec:	ldr	r6, [r0]
   37ff0:	mov	r5, r0
   37ff4:	mov	r0, r4
   37ff8:	bl	11e70 <close@plt>
   37ffc:	str	r6, [r5]
   38000:	mvn	r4, #0
   38004:	b	37f68 <__assert_fail@plt+0x260d4>
   38008:	sub	sp, sp, #8
   3800c:	push	{fp, lr}
   38010:	mov	fp, sp
   38014:	sub	sp, sp, #8
   38018:	str	r2, [fp, #8]
   3801c:	mov	r2, #0
   38020:	tst	r1, #64	; 0x40
   38024:	str	r3, [fp, #12]
   38028:	addne	r2, fp, #8
   3802c:	orrne	r2, r2, #4
   38030:	strne	r2, [sp, #4]
   38034:	ldrne	r2, [fp, #8]
   38038:	bl	11bd0 <open64@plt>
   3803c:	bl	33b64 <__assert_fail@plt+0x21cd0>
   38040:	mov	sp, fp
   38044:	pop	{fp, lr}
   38048:	add	sp, sp, #8
   3804c:	bx	lr
   38050:	push	{fp, lr}
   38054:	mov	fp, sp
   38058:	mov	r0, #14
   3805c:	bl	11d74 <nl_langinfo@plt>
   38060:	movw	r1, #38108	; 0x94dc
   38064:	cmp	r0, #0
   38068:	movt	r1, #3
   3806c:	movne	r1, r0
   38070:	movw	r0, #44196	; 0xaca4
   38074:	ldrb	r2, [r1]
   38078:	movt	r0, #3
   3807c:	cmp	r2, #0
   38080:	movne	r0, r1
   38084:	pop	{fp, pc}
   38088:	push	{r4, sl, fp, lr}
   3808c:	add	fp, sp, #8
   38090:	mov	r4, r0
   38094:	bl	11a44 <wcwidth@plt>
   38098:	cmn	r0, #1
   3809c:	popgt	{r4, sl, fp, pc}
   380a0:	mov	r0, r4
   380a4:	bl	11b10 <iswcntrl@plt>
   380a8:	clz	r0, r0
   380ac:	lsr	r0, r0, #5
   380b0:	pop	{r4, sl, fp, pc}
   380b4:	push	{r4, r5, r6, sl, fp, lr}
   380b8:	add	fp, sp, #16
   380bc:	mov	r4, r0
   380c0:	mov	r0, r1
   380c4:	mov	r5, r1
   380c8:	ldr	r1, [r0], #16
   380cc:	cmp	r1, r0
   380d0:	beq	380dc <__assert_fail@plt+0x26248>
   380d4:	mov	r6, r1
   380d8:	b	380ec <__assert_fail@plt+0x26258>
   380dc:	ldr	r2, [r5, #4]
   380e0:	add	r6, r4, #16
   380e4:	mov	r0, r6
   380e8:	bl	11a8c <memcpy@plt>
   380ec:	str	r6, [r4]
   380f0:	ldr	r0, [r5, #4]
   380f4:	str	r0, [r4, #4]
   380f8:	ldrb	r0, [r5, #8]
   380fc:	strb	r0, [r4, #8]
   38100:	cmp	r0, #0
   38104:	ldrne	r0, [r5, #12]
   38108:	strne	r0, [r4, #12]
   3810c:	pop	{r4, r5, r6, sl, fp, pc}
   38110:	movw	r2, #44204	; 0xacac
   38114:	ubfx	r1, r0, #5, #3
   38118:	and	r0, r0, #31
   3811c:	movt	r2, #3
   38120:	ldr	r1, [r2, r1, lsl #2]
   38124:	mov	r2, #1
   38128:	and	r0, r1, r2, lsl r0
   3812c:	cmp	r0, #0
   38130:	movwne	r0, #1
   38134:	bx	lr
   38138:	push	{r4, r5, r6, r7, fp, lr}
   3813c:	add	fp, sp, #16
   38140:	sub	sp, sp, #8
   38144:	add	r5, sp, #4
   38148:	cmp	r0, #0
   3814c:	mov	r7, r2
   38150:	mov	r4, r1
   38154:	movne	r5, r0
   38158:	mov	r0, r5
   3815c:	bl	11ba0 <mbrtowc@plt>
   38160:	mov	r6, r0
   38164:	cmp	r7, #0
   38168:	beq	3818c <__assert_fail@plt+0x262f8>
   3816c:	cmn	r6, #2
   38170:	bcc	3818c <__assert_fail@plt+0x262f8>
   38174:	mov	r0, #0
   38178:	bl	381e0 <__assert_fail@plt+0x2634c>
   3817c:	cmp	r0, #0
   38180:	ldrbeq	r0, [r4]
   38184:	moveq	r6, #1
   38188:	streq	r0, [r5]
   3818c:	mov	r0, r6
   38190:	sub	sp, fp, #16
   38194:	pop	{r4, r5, r6, r7, fp, pc}
   38198:	cmp	r2, #0
   3819c:	beq	381cc <__assert_fail@plt+0x26338>
   381a0:	mvn	r3, #0
   381a4:	udiv	r3, r3, r2
   381a8:	cmp	r3, r1
   381ac:	bcs	381cc <__assert_fail@plt+0x26338>
   381b0:	push	{fp, lr}
   381b4:	mov	fp, sp
   381b8:	bl	11ca8 <__errno_location@plt>
   381bc:	mov	r1, #12
   381c0:	str	r1, [r0]
   381c4:	mov	r0, #0
   381c8:	pop	{fp, pc}
   381cc:	mul	r1, r2, r1
   381d0:	b	36fe4 <__assert_fail@plt+0x25150>
   381d4:	mov	r1, #0
   381d8:	mov	r2, #3
   381dc:	b	37e28 <__assert_fail@plt+0x25f94>
   381e0:	push	{r4, sl, fp, lr}
   381e4:	add	fp, sp, #8
   381e8:	sub	sp, sp, #264	; 0x108
   381ec:	add	r1, sp, #7
   381f0:	movw	r2, #257	; 0x101
   381f4:	bl	38244 <__assert_fail@plt+0x263b0>
   381f8:	mov	r4, #0
   381fc:	cmp	r0, #0
   38200:	bne	38238 <__assert_fail@plt+0x263a4>
   38204:	movw	r1, #44236	; 0xaccc
   38208:	add	r0, sp, #7
   3820c:	movt	r1, #3
   38210:	bl	11a14 <strcmp@plt>
   38214:	cmp	r0, #0
   38218:	beq	38238 <__assert_fail@plt+0x263a4>
   3821c:	movw	r1, #44238	; 0xacce
   38220:	add	r0, sp, #7
   38224:	movt	r1, #3
   38228:	bl	11a14 <strcmp@plt>
   3822c:	mov	r4, r0
   38230:	cmp	r0, #0
   38234:	movwne	r4, #1
   38238:	mov	r0, r4
   3823c:	sub	sp, fp, #8
   38240:	pop	{r4, sl, fp, pc}
   38244:	push	{r4, r5, r6, r7, fp, lr}
   38248:	add	fp, sp, #16
   3824c:	mov	r4, r1
   38250:	mov	r1, #0
   38254:	mov	r6, r2
   38258:	bl	11d5c <setlocale@plt>
   3825c:	cmp	r0, #0
   38260:	beq	38290 <__assert_fail@plt+0x263fc>
   38264:	mov	r7, r0
   38268:	bl	11c78 <strlen@plt>
   3826c:	cmp	r0, r6
   38270:	bcs	382b0 <__assert_fail@plt+0x2641c>
   38274:	add	r2, r0, #1
   38278:	mov	r0, r4
   3827c:	mov	r1, r7
   38280:	bl	11a8c <memcpy@plt>
   38284:	mov	r5, #0
   38288:	mov	r0, r5
   3828c:	pop	{r4, r5, r6, r7, fp, pc}
   38290:	cmp	r6, #0
   38294:	mov	r5, #22
   38298:	movne	r0, #0
   3829c:	strbne	r0, [r4]
   382a0:	movne	r0, r5
   382a4:	popne	{r4, r5, r6, r7, fp, pc}
   382a8:	mov	r0, r5
   382ac:	pop	{r4, r5, r6, r7, fp, pc}
   382b0:	mov	r5, #34	; 0x22
   382b4:	cmp	r6, #0
   382b8:	beq	382d8 <__assert_fail@plt+0x26444>
   382bc:	sub	r6, r6, #1
   382c0:	mov	r0, r4
   382c4:	mov	r1, r7
   382c8:	mov	r2, r6
   382cc:	bl	11a8c <memcpy@plt>
   382d0:	mov	r0, #0
   382d4:	strb	r0, [r4, r6]
   382d8:	mov	r0, r5
   382dc:	pop	{r4, r5, r6, r7, fp, pc}
   382e0:	mov	r1, #0
   382e4:	b	11d5c <setlocale@plt>
   382e8:	eor	r1, r1, #-2147483648	; 0x80000000
   382ec:	b	382f4 <__assert_fail@plt+0x26460>
   382f0:	eor	r3, r3, #-2147483648	; 0x80000000
   382f4:	push	{r4, r5, lr}
   382f8:	lsl	r4, r1, #1
   382fc:	lsl	r5, r3, #1
   38300:	teq	r4, r5
   38304:	teqeq	r0, r2
   38308:	orrsne	ip, r4, r0
   3830c:	orrsne	ip, r5, r2
   38310:	mvnsne	ip, r4, asr #21
   38314:	mvnsne	ip, r5, asr #21
   38318:	beq	38504 <__assert_fail@plt+0x26670>
   3831c:	lsr	r4, r4, #21
   38320:	rsbs	r5, r4, r5, lsr #21
   38324:	rsblt	r5, r5, #0
   38328:	ble	38348 <__assert_fail@plt+0x264b4>
   3832c:	add	r4, r4, r5
   38330:	eor	r2, r0, r2
   38334:	eor	r3, r1, r3
   38338:	eor	r0, r2, r0
   3833c:	eor	r1, r3, r1
   38340:	eor	r2, r0, r2
   38344:	eor	r3, r1, r3
   38348:	cmp	r5, #54	; 0x36
   3834c:	pophi	{r4, r5, pc}
   38350:	tst	r1, #-2147483648	; 0x80000000
   38354:	lsl	r1, r1, #12
   38358:	mov	ip, #1048576	; 0x100000
   3835c:	orr	r1, ip, r1, lsr #12
   38360:	beq	3836c <__assert_fail@plt+0x264d8>
   38364:	rsbs	r0, r0, #0
   38368:	rsc	r1, r1, #0
   3836c:	tst	r3, #-2147483648	; 0x80000000
   38370:	lsl	r3, r3, #12
   38374:	orr	r3, ip, r3, lsr #12
   38378:	beq	38384 <__assert_fail@plt+0x264f0>
   3837c:	rsbs	r2, r2, #0
   38380:	rsc	r3, r3, #0
   38384:	teq	r4, r5
   38388:	beq	384ec <__assert_fail@plt+0x26658>
   3838c:	sub	r4, r4, #1
   38390:	rsbs	lr, r5, #32
   38394:	blt	383b0 <__assert_fail@plt+0x2651c>
   38398:	lsl	ip, r2, lr
   3839c:	adds	r0, r0, r2, lsr r5
   383a0:	adc	r1, r1, #0
   383a4:	adds	r0, r0, r3, lsl lr
   383a8:	adcs	r1, r1, r3, asr r5
   383ac:	b	383cc <__assert_fail@plt+0x26538>
   383b0:	sub	r5, r5, #32
   383b4:	add	lr, lr, #32
   383b8:	cmp	r2, #1
   383bc:	lsl	ip, r3, lr
   383c0:	orrcs	ip, ip, #2
   383c4:	adds	r0, r0, r3, asr r5
   383c8:	adcs	r1, r1, r3, asr #31
   383cc:	and	r5, r1, #-2147483648	; 0x80000000
   383d0:	bpl	383e0 <__assert_fail@plt+0x2654c>
   383d4:	rsbs	ip, ip, #0
   383d8:	rscs	r0, r0, #0
   383dc:	rsc	r1, r1, #0
   383e0:	cmp	r1, #1048576	; 0x100000
   383e4:	bcc	38424 <__assert_fail@plt+0x26590>
   383e8:	cmp	r1, #2097152	; 0x200000
   383ec:	bcc	3840c <__assert_fail@plt+0x26578>
   383f0:	lsrs	r1, r1, #1
   383f4:	rrxs	r0, r0
   383f8:	rrx	ip, ip
   383fc:	add	r4, r4, #1
   38400:	lsl	r2, r4, #21
   38404:	cmn	r2, #4194304	; 0x400000
   38408:	bcs	38564 <__assert_fail@plt+0x266d0>
   3840c:	cmp	ip, #-2147483648	; 0x80000000
   38410:	lsrseq	ip, r0, #1
   38414:	adcs	r0, r0, #0
   38418:	adc	r1, r1, r4, lsl #20
   3841c:	orr	r1, r1, r5
   38420:	pop	{r4, r5, pc}
   38424:	lsls	ip, ip, #1
   38428:	adcs	r0, r0, r0
   3842c:	adc	r1, r1, r1
   38430:	tst	r1, #1048576	; 0x100000
   38434:	sub	r4, r4, #1
   38438:	bne	3840c <__assert_fail@plt+0x26578>
   3843c:	teq	r1, #0
   38440:	moveq	r1, r0
   38444:	moveq	r0, #0
   38448:	clz	r3, r1
   3844c:	addeq	r3, r3, #32
   38450:	sub	r3, r3, #11
   38454:	subs	r2, r3, #32
   38458:	bge	3847c <__assert_fail@plt+0x265e8>
   3845c:	adds	r2, r2, #12
   38460:	ble	38478 <__assert_fail@plt+0x265e4>
   38464:	add	ip, r2, #20
   38468:	rsb	r2, r2, #12
   3846c:	lsl	r0, r1, ip
   38470:	lsr	r1, r1, r2
   38474:	b	3848c <__assert_fail@plt+0x265f8>
   38478:	add	r2, r2, #20
   3847c:	rsble	ip, r2, #32
   38480:	lsl	r1, r1, r2
   38484:	orrle	r1, r1, r0, lsr ip
   38488:	lslle	r0, r0, r2
   3848c:	subs	r4, r4, r3
   38490:	addge	r1, r1, r4, lsl #20
   38494:	orrge	r1, r1, r5
   38498:	popge	{r4, r5, pc}
   3849c:	mvn	r4, r4
   384a0:	subs	r4, r4, #31
   384a4:	bge	384e0 <__assert_fail@plt+0x2664c>
   384a8:	adds	r4, r4, #12
   384ac:	bgt	384c8 <__assert_fail@plt+0x26634>
   384b0:	add	r4, r4, #20
   384b4:	rsb	r2, r4, #32
   384b8:	lsr	r0, r0, r4
   384bc:	orr	r0, r0, r1, lsl r2
   384c0:	orr	r1, r5, r1, lsr r4
   384c4:	pop	{r4, r5, pc}
   384c8:	rsb	r4, r4, #12
   384cc:	rsb	r2, r4, #32
   384d0:	lsr	r0, r0, r2
   384d4:	orr	r0, r0, r1, lsl r4
   384d8:	mov	r1, r5
   384dc:	pop	{r4, r5, pc}
   384e0:	lsr	r0, r1, r4
   384e4:	mov	r1, r5
   384e8:	pop	{r4, r5, pc}
   384ec:	teq	r4, #0
   384f0:	eor	r3, r3, #1048576	; 0x100000
   384f4:	eoreq	r1, r1, #1048576	; 0x100000
   384f8:	addeq	r4, r4, #1
   384fc:	subne	r5, r5, #1
   38500:	b	3838c <__assert_fail@plt+0x264f8>
   38504:	mvns	ip, r4, asr #21
   38508:	mvnsne	ip, r5, asr #21
   3850c:	beq	38574 <__assert_fail@plt+0x266e0>
   38510:	teq	r4, r5
   38514:	teqeq	r0, r2
   38518:	beq	3852c <__assert_fail@plt+0x26698>
   3851c:	orrs	ip, r4, r0
   38520:	moveq	r1, r3
   38524:	moveq	r0, r2
   38528:	pop	{r4, r5, pc}
   3852c:	teq	r1, r3
   38530:	movne	r1, #0
   38534:	movne	r0, #0
   38538:	popne	{r4, r5, pc}
   3853c:	lsrs	ip, r4, #21
   38540:	bne	38554 <__assert_fail@plt+0x266c0>
   38544:	lsls	r0, r0, #1
   38548:	adcs	r1, r1, r1
   3854c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   38550:	pop	{r4, r5, pc}
   38554:	adds	r4, r4, #4194304	; 0x400000
   38558:	addcc	r1, r1, #1048576	; 0x100000
   3855c:	popcc	{r4, r5, pc}
   38560:	and	r5, r1, #-2147483648	; 0x80000000
   38564:	orr	r1, r5, #2130706432	; 0x7f000000
   38568:	orr	r1, r1, #15728640	; 0xf00000
   3856c:	mov	r0, #0
   38570:	pop	{r4, r5, pc}
   38574:	mvns	ip, r4, asr #21
   38578:	movne	r1, r3
   3857c:	movne	r0, r2
   38580:	mvnseq	ip, r5, asr #21
   38584:	movne	r3, r1
   38588:	movne	r2, r0
   3858c:	orrs	r4, r0, r1, lsl #12
   38590:	orrseq	r5, r2, r3, lsl #12
   38594:	teqeq	r1, r3
   38598:	orrne	r1, r1, #524288	; 0x80000
   3859c:	pop	{r4, r5, pc}
   385a0:	teq	r0, #0
   385a4:	moveq	r1, #0
   385a8:	bxeq	lr
   385ac:	push	{r4, r5, lr}
   385b0:	mov	r4, #1024	; 0x400
   385b4:	add	r4, r4, #50	; 0x32
   385b8:	mov	r5, #0
   385bc:	mov	r1, #0
   385c0:	b	3843c <__assert_fail@plt+0x265a8>
   385c4:	teq	r0, #0
   385c8:	moveq	r1, #0
   385cc:	bxeq	lr
   385d0:	push	{r4, r5, lr}
   385d4:	mov	r4, #1024	; 0x400
   385d8:	add	r4, r4, #50	; 0x32
   385dc:	ands	r5, r0, #-2147483648	; 0x80000000
   385e0:	rsbmi	r0, r0, #0
   385e4:	mov	r1, #0
   385e8:	b	3843c <__assert_fail@plt+0x265a8>
   385ec:	lsls	r2, r0, #1
   385f0:	asr	r1, r2, #3
   385f4:	rrx	r1, r1
   385f8:	lsl	r0, r2, #28
   385fc:	andsne	r3, r2, #-16777216	; 0xff000000
   38600:	teqne	r3, #-16777216	; 0xff000000
   38604:	eorne	r1, r1, #939524096	; 0x38000000
   38608:	bxne	lr
   3860c:	bics	r2, r2, #-16777216	; 0xff000000
   38610:	bxeq	lr
   38614:	teq	r3, #-16777216	; 0xff000000
   38618:	orreq	r1, r1, #524288	; 0x80000
   3861c:	bxeq	lr
   38620:	push	{r4, r5, lr}
   38624:	mov	r4, #896	; 0x380
   38628:	and	r5, r1, #-2147483648	; 0x80000000
   3862c:	bic	r1, r1, #-2147483648	; 0x80000000
   38630:	b	3843c <__assert_fail@plt+0x265a8>
   38634:	orrs	r2, r0, r1
   38638:	bxeq	lr
   3863c:	push	{r4, r5, lr}
   38640:	mov	r5, #0
   38644:	b	38664 <__assert_fail@plt+0x267d0>
   38648:	orrs	r2, r0, r1
   3864c:	bxeq	lr
   38650:	push	{r4, r5, lr}
   38654:	ands	r5, r1, #-2147483648	; 0x80000000
   38658:	bpl	38664 <__assert_fail@plt+0x267d0>
   3865c:	rsbs	r0, r0, #0
   38660:	rsc	r1, r1, #0
   38664:	mov	r4, #1024	; 0x400
   38668:	add	r4, r4, #50	; 0x32
   3866c:	lsrs	ip, r1, #22
   38670:	beq	383e0 <__assert_fail@plt+0x2654c>
   38674:	mov	r2, #3
   38678:	lsrs	ip, ip, #3
   3867c:	addne	r2, r2, #3
   38680:	lsrs	ip, ip, #3
   38684:	addne	r2, r2, #3
   38688:	add	r2, r2, ip, lsr #3
   3868c:	rsb	r3, r2, #32
   38690:	lsl	ip, r0, r3
   38694:	lsr	r0, r0, r2
   38698:	orr	r0, r0, r1, lsl r3
   3869c:	lsr	r1, r1, r2
   386a0:	add	r4, r4, r2
   386a4:	b	383e0 <__assert_fail@plt+0x2654c>
   386a8:	cmp	r3, #0
   386ac:	cmpeq	r2, #0
   386b0:	bne	386d4 <__assert_fail@plt+0x26840>
   386b4:	cmp	r1, #0
   386b8:	movlt	r1, #-2147483648	; 0x80000000
   386bc:	movlt	r0, #0
   386c0:	blt	386d0 <__assert_fail@plt+0x2683c>
   386c4:	cmpeq	r0, #0
   386c8:	mvnne	r1, #-2147483648	; 0x80000000
   386cc:	mvnne	r0, #0
   386d0:	b	387b8 <__assert_fail@plt+0x26924>
   386d4:	sub	sp, sp, #8
   386d8:	push	{sp, lr}
   386dc:	cmp	r1, #0
   386e0:	blt	38700 <__assert_fail@plt+0x2686c>
   386e4:	cmp	r3, #0
   386e8:	blt	38734 <__assert_fail@plt+0x268a0>
   386ec:	bl	38808 <__assert_fail@plt+0x26974>
   386f0:	ldr	lr, [sp, #4]
   386f4:	add	sp, sp, #8
   386f8:	pop	{r2, r3}
   386fc:	bx	lr
   38700:	rsbs	r0, r0, #0
   38704:	sbc	r1, r1, r1, lsl #1
   38708:	cmp	r3, #0
   3870c:	blt	38758 <__assert_fail@plt+0x268c4>
   38710:	bl	38808 <__assert_fail@plt+0x26974>
   38714:	ldr	lr, [sp, #4]
   38718:	add	sp, sp, #8
   3871c:	pop	{r2, r3}
   38720:	rsbs	r0, r0, #0
   38724:	sbc	r1, r1, r1, lsl #1
   38728:	rsbs	r2, r2, #0
   3872c:	sbc	r3, r3, r3, lsl #1
   38730:	bx	lr
   38734:	rsbs	r2, r2, #0
   38738:	sbc	r3, r3, r3, lsl #1
   3873c:	bl	38808 <__assert_fail@plt+0x26974>
   38740:	ldr	lr, [sp, #4]
   38744:	add	sp, sp, #8
   38748:	pop	{r2, r3}
   3874c:	rsbs	r0, r0, #0
   38750:	sbc	r1, r1, r1, lsl #1
   38754:	bx	lr
   38758:	rsbs	r2, r2, #0
   3875c:	sbc	r3, r3, r3, lsl #1
   38760:	bl	38808 <__assert_fail@plt+0x26974>
   38764:	ldr	lr, [sp, #4]
   38768:	add	sp, sp, #8
   3876c:	pop	{r2, r3}
   38770:	rsbs	r2, r2, #0
   38774:	sbc	r3, r3, r3, lsl #1
   38778:	bx	lr
   3877c:	cmp	r3, #0
   38780:	cmpeq	r2, #0
   38784:	bne	3879c <__assert_fail@plt+0x26908>
   38788:	cmp	r1, #0
   3878c:	cmpeq	r0, #0
   38790:	mvnne	r1, #0
   38794:	mvnne	r0, #0
   38798:	b	387b8 <__assert_fail@plt+0x26924>
   3879c:	sub	sp, sp, #8
   387a0:	push	{sp, lr}
   387a4:	bl	38808 <__assert_fail@plt+0x26974>
   387a8:	ldr	lr, [sp, #4]
   387ac:	add	sp, sp, #8
   387b0:	pop	{r2, r3}
   387b4:	bx	lr
   387b8:	push	{r1, lr}
   387bc:	mov	r0, #8
   387c0:	bl	119d8 <raise@plt>
   387c4:	pop	{r1, pc}
   387c8:	vmov	d6, r0, r1
   387cc:	vldr	d7, [pc, #36]	; 387f8 <__assert_fail@plt+0x26964>
   387d0:	vldr	d5, [pc, #40]	; 38800 <__assert_fail@plt+0x2696c>
   387d4:	vmul.f64	d7, d6, d7
   387d8:	vcvt.u32.f64	s14, d7
   387dc:	vcvt.f64.u32	d4, s14
   387e0:	vmov	r1, s14
   387e4:	vmls.f64	d6, d4, d5
   387e8:	vcvt.u32.f64	s15, d6
   387ec:	vmov	r0, s15
   387f0:	bx	lr
   387f4:	nop			; (mov r0, r0)
   387f8:	andeq	r0, r0, r0
   387fc:	ldclcc	0, cr0, [r0]
   38800:	andeq	r0, r0, r0
   38804:	mvnsmi	r0, r0
   38808:	cmp	r1, r3
   3880c:	cmpeq	r0, r2
   38810:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38814:	mov	r4, r0
   38818:	movcc	r0, #0
   3881c:	mov	r5, r1
   38820:	ldr	lr, [sp, #36]	; 0x24
   38824:	movcc	r1, r0
   38828:	bcc	38924 <__assert_fail@plt+0x26a90>
   3882c:	cmp	r3, #0
   38830:	clzeq	ip, r2
   38834:	clzne	ip, r3
   38838:	addeq	ip, ip, #32
   3883c:	cmp	r5, #0
   38840:	clzeq	r1, r4
   38844:	addeq	r1, r1, #32
   38848:	clzne	r1, r5
   3884c:	sub	ip, ip, r1
   38850:	sub	sl, ip, #32
   38854:	lsl	r9, r3, ip
   38858:	rsb	fp, ip, #32
   3885c:	orr	r9, r9, r2, lsl sl
   38860:	orr	r9, r9, r2, lsr fp
   38864:	lsl	r8, r2, ip
   38868:	cmp	r5, r9
   3886c:	cmpeq	r4, r8
   38870:	movcc	r0, #0
   38874:	movcc	r1, r0
   38878:	bcc	38894 <__assert_fail@plt+0x26a00>
   3887c:	mov	r0, #1
   38880:	subs	r4, r4, r8
   38884:	lsl	r1, r0, sl
   38888:	orr	r1, r1, r0, lsr fp
   3888c:	lsl	r0, r0, ip
   38890:	sbc	r5, r5, r9
   38894:	cmp	ip, #0
   38898:	beq	38924 <__assert_fail@plt+0x26a90>
   3889c:	lsr	r6, r8, #1
   388a0:	orr	r6, r6, r9, lsl #31
   388a4:	lsr	r7, r9, #1
   388a8:	mov	r2, ip
   388ac:	b	388d0 <__assert_fail@plt+0x26a3c>
   388b0:	subs	r3, r4, r6
   388b4:	sbc	r8, r5, r7
   388b8:	adds	r3, r3, r3
   388bc:	adc	r8, r8, r8
   388c0:	adds	r4, r3, #1
   388c4:	adc	r5, r8, #0
   388c8:	subs	r2, r2, #1
   388cc:	beq	388ec <__assert_fail@plt+0x26a58>
   388d0:	cmp	r5, r7
   388d4:	cmpeq	r4, r6
   388d8:	bcs	388b0 <__assert_fail@plt+0x26a1c>
   388dc:	adds	r4, r4, r4
   388e0:	adc	r5, r5, r5
   388e4:	subs	r2, r2, #1
   388e8:	bne	388d0 <__assert_fail@plt+0x26a3c>
   388ec:	lsr	r3, r4, ip
   388f0:	orr	r3, r3, r5, lsl fp
   388f4:	lsr	r2, r5, ip
   388f8:	orr	r3, r3, r5, lsr sl
   388fc:	adds	r0, r0, r4
   38900:	mov	r4, r3
   38904:	lsl	r3, r2, ip
   38908:	orr	r3, r3, r4, lsl sl
   3890c:	lsl	ip, r4, ip
   38910:	orr	r3, r3, r4, lsr fp
   38914:	adc	r1, r1, r5
   38918:	subs	r0, r0, ip
   3891c:	mov	r5, r2
   38920:	sbc	r1, r1, r3
   38924:	cmp	lr, #0
   38928:	strdne	r4, [lr]
   3892c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38930:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   38934:	mov	r7, r0
   38938:	ldr	r6, [pc, #72]	; 38988 <__assert_fail@plt+0x26af4>
   3893c:	ldr	r5, [pc, #72]	; 3898c <__assert_fail@plt+0x26af8>
   38940:	add	r6, pc, r6
   38944:	add	r5, pc, r5
   38948:	sub	r6, r6, r5
   3894c:	mov	r8, r1
   38950:	mov	r9, r2
   38954:	bl	1197c <pthread_mutex_unlock@plt-0x20>
   38958:	asrs	r6, r6, #2
   3895c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   38960:	mov	r4, #0
   38964:	add	r4, r4, #1
   38968:	ldr	r3, [r5], #4
   3896c:	mov	r2, r9
   38970:	mov	r1, r8
   38974:	mov	r0, r7
   38978:	blx	r3
   3897c:	cmp	r6, r4
   38980:	bne	38964 <__assert_fail@plt+0x26ad0>
   38984:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   38988:	andeq	r2, r1, r4, asr #11
   3898c:			; <UNDEFINED> instruction: 0x000125bc
   38990:	bx	lr
   38994:	ldr	r3, [pc, #12]	; 389a8 <__assert_fail@plt+0x26b14>
   38998:	mov	r1, #0
   3899c:	add	r3, pc, r3
   389a0:	ldr	r2, [r3]
   389a4:	b	11ccc <__cxa_atexit@plt>
   389a8:	andeq	r2, r1, r0, lsr #16

Disassembly of section .fini:

000389ac <.fini>:
   389ac:	push	{r3, lr}
   389b0:	pop	{r3, pc}
