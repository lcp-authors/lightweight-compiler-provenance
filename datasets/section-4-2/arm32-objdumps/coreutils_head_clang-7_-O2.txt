
../repos/coreutils/src/head:     file format elf32-littlearm


Disassembly of section .init:

00010e1c <.init>:
   10e1c:	push	{r3, lr}
   10e20:	bl	11100 <__assert_fail@plt+0x48>
   10e24:	pop	{r3, pc}

Disassembly of section .plt:

00010e28 <calloc@plt-0x14>:
   10e28:	push	{lr}		; (str lr, [sp, #-4]!)
   10e2c:	ldr	lr, [pc, #4]	; 10e38 <calloc@plt-0x4>
   10e30:	add	lr, pc, lr
   10e34:	ldr	pc, [lr, #8]!
   10e38:	andeq	r8, r1, r8, asr #3

00010e3c <calloc@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #24, 20	; 0x18000
   10e44:	ldr	pc, [ip, #456]!	; 0x1c8

00010e48 <fputs_unlocked@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #24, 20	; 0x18000
   10e50:	ldr	pc, [ip, #448]!	; 0x1c0

00010e54 <raise@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #24, 20	; 0x18000
   10e5c:	ldr	pc, [ip, #440]!	; 0x1b8

00010e60 <strcmp@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #24, 20	; 0x18000
   10e68:	ldr	pc, [ip, #432]!	; 0x1b0

00010e6c <read@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #24, 20	; 0x18000
   10e74:	ldr	pc, [ip, #424]!	; 0x1a8

00010e78 <fflush@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #24, 20	; 0x18000
   10e80:	ldr	pc, [ip, #416]!	; 0x1a0

00010e84 <free@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #24, 20	; 0x18000
   10e8c:	ldr	pc, [ip, #408]!	; 0x198

00010e90 <_exit@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #24, 20	; 0x18000
   10e98:	ldr	pc, [ip, #400]!	; 0x190

00010e9c <memcpy@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #24, 20	; 0x18000
   10ea4:	ldr	pc, [ip, #392]!	; 0x188

00010ea8 <__strtoull_internal@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #24, 20	; 0x18000
   10eb0:	ldr	pc, [ip, #384]!	; 0x180

00010eb4 <mbsinit@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #24, 20	; 0x18000
   10ebc:	ldr	pc, [ip, #376]!	; 0x178

00010ec0 <fwrite_unlocked@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #368]!	; 0x170

00010ecc <memcmp@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #360]!	; 0x168

00010ed8 <dcgettext@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #352]!	; 0x160

00010ee4 <realloc@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #344]!	; 0x158

00010ef0 <textdomain@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #336]!	; 0x150

00010efc <rawmemchr@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #328]!	; 0x148

00010f08 <iswprint@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #320]!	; 0x140

00010f14 <__fxstat64@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #312]!	; 0x138

00010f20 <fwrite@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #304]!	; 0x130

00010f2c <lseek64@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #296]!	; 0x128

00010f38 <__ctype_get_mb_cur_max@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #288]!	; 0x120

00010f44 <__fpending@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #280]!	; 0x118

00010f50 <mbrtowc@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #24, 20	; 0x18000
   10f58:	ldr	pc, [ip, #272]!	; 0x110

00010f5c <error@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #24, 20	; 0x18000
   10f64:	ldr	pc, [ip, #264]!	; 0x108

00010f68 <open64@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #24, 20	; 0x18000
   10f70:	ldr	pc, [ip, #256]!	; 0x100

00010f74 <malloc@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #24, 20	; 0x18000
   10f7c:	ldr	pc, [ip, #248]!	; 0xf8

00010f80 <__libc_start_main@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #24, 20	; 0x18000
   10f88:	ldr	pc, [ip, #240]!	; 0xf0

00010f8c <__freading@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #24, 20	; 0x18000
   10f94:	ldr	pc, [ip, #232]!	; 0xe8

00010f98 <__gmon_start__@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #24, 20	; 0x18000
   10fa0:	ldr	pc, [ip, #224]!	; 0xe0

00010fa4 <getopt_long@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #24, 20	; 0x18000
   10fac:	ldr	pc, [ip, #216]!	; 0xd8

00010fb0 <__ctype_b_loc@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #24, 20	; 0x18000
   10fb8:	ldr	pc, [ip, #208]!	; 0xd0

00010fbc <exit@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #24, 20	; 0x18000
   10fc4:	ldr	pc, [ip, #200]!	; 0xc8

00010fc8 <strlen@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #24, 20	; 0x18000
   10fd0:	ldr	pc, [ip, #192]!	; 0xc0

00010fd4 <strchr@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #24, 20	; 0x18000
   10fdc:	ldr	pc, [ip, #184]!	; 0xb8

00010fe0 <memrchr@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #24, 20	; 0x18000
   10fe8:	ldr	pc, [ip, #176]!	; 0xb0

00010fec <__errno_location@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #24, 20	; 0x18000
   10ff4:	ldr	pc, [ip, #168]!	; 0xa8

00010ff8 <__cxa_atexit@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #24, 20	; 0x18000
   11000:	ldr	pc, [ip, #160]!	; 0xa0

00011004 <memset@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #24, 20	; 0x18000
   1100c:	ldr	pc, [ip, #152]!	; 0x98

00011010 <__printf_chk@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #24, 20	; 0x18000
   11018:	ldr	pc, [ip, #144]!	; 0x90

0001101c <fileno@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #24, 20	; 0x18000
   11024:	ldr	pc, [ip, #136]!	; 0x88

00011028 <__fprintf_chk@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #24, 20	; 0x18000
   11030:	ldr	pc, [ip, #128]!	; 0x80

00011034 <memchr@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #24, 20	; 0x18000
   1103c:	ldr	pc, [ip, #120]!	; 0x78

00011040 <fclose@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #24, 20	; 0x18000
   11048:	ldr	pc, [ip, #112]!	; 0x70

0001104c <fseeko64@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #24, 20	; 0x18000
   11054:	ldr	pc, [ip, #104]!	; 0x68

00011058 <setlocale@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #24, 20	; 0x18000
   11060:	ldr	pc, [ip, #96]!	; 0x60

00011064 <strrchr@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #24, 20	; 0x18000
   1106c:	ldr	pc, [ip, #88]!	; 0x58

00011070 <nl_langinfo@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #24, 20	; 0x18000
   11078:	ldr	pc, [ip, #80]!	; 0x50

0001107c <clearerr_unlocked@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #24, 20	; 0x18000
   11084:	ldr	pc, [ip, #72]!	; 0x48

00011088 <bindtextdomain@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #24, 20	; 0x18000
   11090:	ldr	pc, [ip, #64]!	; 0x40

00011094 <strncmp@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #24, 20	; 0x18000
   1109c:	ldr	pc, [ip, #56]!	; 0x38

000110a0 <abort@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #24, 20	; 0x18000
   110a8:	ldr	pc, [ip, #48]!	; 0x30

000110ac <close@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #24, 20	; 0x18000
   110b4:	ldr	pc, [ip, #40]!	; 0x28

000110b8 <__assert_fail@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #24, 20	; 0x18000
   110c0:	ldr	pc, [ip, #32]!

Disassembly of section .text:

000110c4 <.text>:
   110c4:	mov	fp, #0
   110c8:	mov	lr, #0
   110cc:	pop	{r1}		; (ldr r1, [sp], #4)
   110d0:	mov	r2, sp
   110d4:	push	{r2}		; (str r2, [sp, #-4]!)
   110d8:	push	{r0}		; (str r0, [sp, #-4]!)
   110dc:	ldr	ip, [pc, #16]	; 110f4 <__assert_fail@plt+0x3c>
   110e0:	push	{ip}		; (str ip, [sp, #-4]!)
   110e4:	ldr	r0, [pc, #12]	; 110f8 <__assert_fail@plt+0x40>
   110e8:	ldr	r3, [pc, #12]	; 110fc <__assert_fail@plt+0x44>
   110ec:	bl	10f80 <__libc_start_main@plt>
   110f0:	bl	110a0 <abort@plt>
   110f4:	andeq	r7, r1, r4, ror #5
   110f8:			; <UNDEFINED> instruction: 0x000114b0
   110fc:	andeq	r7, r1, r4, lsl #5
   11100:	ldr	r3, [pc, #20]	; 1111c <__assert_fail@plt+0x64>
   11104:	ldr	r2, [pc, #20]	; 11120 <__assert_fail@plt+0x68>
   11108:	add	r3, pc, r3
   1110c:	ldr	r2, [r3, r2]
   11110:	cmp	r2, #0
   11114:	bxeq	lr
   11118:	b	10f98 <__gmon_start__@plt>
   1111c:	strdeq	r7, [r1], -r0
   11120:	andeq	r0, r0, r4, ror #1
   11124:	ldr	r0, [pc, #24]	; 11144 <__assert_fail@plt+0x8c>
   11128:	ldr	r3, [pc, #24]	; 11148 <__assert_fail@plt+0x90>
   1112c:	cmp	r3, r0
   11130:	bxeq	lr
   11134:	ldr	r3, [pc, #16]	; 1114c <__assert_fail@plt+0x94>
   11138:	cmp	r3, #0
   1113c:	bxeq	lr
   11140:	bx	r3
   11144:	andeq	r9, r2, r8, lsr r1
   11148:	andeq	r9, r2, r8, lsr r1
   1114c:	andeq	r0, r0, r0
   11150:	ldr	r0, [pc, #36]	; 1117c <__assert_fail@plt+0xc4>
   11154:	ldr	r1, [pc, #36]	; 11180 <__assert_fail@plt+0xc8>
   11158:	sub	r1, r1, r0
   1115c:	asr	r1, r1, #2
   11160:	add	r1, r1, r1, lsr #31
   11164:	asrs	r1, r1, #1
   11168:	bxeq	lr
   1116c:	ldr	r3, [pc, #16]	; 11184 <__assert_fail@plt+0xcc>
   11170:	cmp	r3, #0
   11174:	bxeq	lr
   11178:	bx	r3
   1117c:	andeq	r9, r2, r8, lsr r1
   11180:	andeq	r9, r2, r8, lsr r1
   11184:	andeq	r0, r0, r0
   11188:	push	{r4, lr}
   1118c:	ldr	r4, [pc, #24]	; 111ac <__assert_fail@plt+0xf4>
   11190:	ldrb	r3, [r4]
   11194:	cmp	r3, #0
   11198:	popne	{r4, pc}
   1119c:	bl	11124 <__assert_fail@plt+0x6c>
   111a0:	mov	r3, #1
   111a4:	strb	r3, [r4]
   111a8:	pop	{r4, pc}
   111ac:	andeq	r9, r2, r4, asr r1
   111b0:	b	11150 <__assert_fail@plt+0x98>
   111b4:	push	{fp, lr}
   111b8:	mov	fp, sp
   111bc:	sub	sp, sp, #56	; 0x38
   111c0:	mov	r4, r0
   111c4:	cmp	r0, #0
   111c8:	bne	1146c <__assert_fail@plt+0x3b4>
   111cc:	movw	r1, #29491	; 0x7333
   111d0:	mov	r0, #0
   111d4:	mov	r2, #5
   111d8:	movt	r1, #1
   111dc:	bl	10ed8 <dcgettext@plt>
   111e0:	mov	r1, r0
   111e4:	movw	r0, #37220	; 0x9164
   111e8:	movt	r0, #2
   111ec:	ldr	r2, [r0]
   111f0:	mov	r0, #1
   111f4:	bl	11010 <__printf_chk@plt>
   111f8:	movw	r1, #29524	; 0x7354
   111fc:	mov	r0, #0
   11200:	mov	r2, #5
   11204:	movt	r1, #1
   11208:	bl	10ed8 <dcgettext@plt>
   1120c:	mov	r1, r0
   11210:	mov	r0, #1
   11214:	mov	r2, #10
   11218:	bl	11010 <__printf_chk@plt>
   1121c:	movw	r1, #30712	; 0x77f8
   11220:	mov	r0, #0
   11224:	mov	r2, #5
   11228:	movt	r1, #1
   1122c:	bl	10ed8 <dcgettext@plt>
   11230:	movw	r7, #37196	; 0x914c
   11234:	movt	r7, #2
   11238:	ldr	r1, [r7]
   1123c:	bl	10e48 <fputs_unlocked@plt>
   11240:	movw	r1, #30768	; 0x7830
   11244:	mov	r0, #0
   11248:	mov	r2, #5
   1124c:	movt	r1, #1
   11250:	bl	10ed8 <dcgettext@plt>
   11254:	ldr	r1, [r7]
   11258:	bl	10e48 <fputs_unlocked@plt>
   1125c:	movw	r1, #29657	; 0x73d9
   11260:	mov	r0, #0
   11264:	mov	r2, #5
   11268:	movt	r1, #1
   1126c:	bl	10ed8 <dcgettext@plt>
   11270:	mov	r1, r0
   11274:	mov	r0, #1
   11278:	mov	r2, #10
   1127c:	bl	11010 <__printf_chk@plt>
   11280:	movw	r1, #30055	; 0x7567
   11284:	mov	r0, #0
   11288:	mov	r2, #5
   1128c:	movt	r1, #1
   11290:	bl	10ed8 <dcgettext@plt>
   11294:	ldr	r1, [r7]
   11298:	bl	10e48 <fputs_unlocked@plt>
   1129c:	movw	r1, #30187	; 0x75eb
   112a0:	mov	r0, #0
   112a4:	mov	r2, #5
   112a8:	movt	r1, #1
   112ac:	bl	10ed8 <dcgettext@plt>
   112b0:	ldr	r1, [r7]
   112b4:	bl	10e48 <fputs_unlocked@plt>
   112b8:	movw	r1, #30250	; 0x762a
   112bc:	mov	r0, #0
   112c0:	mov	r2, #5
   112c4:	movt	r1, #1
   112c8:	bl	10ed8 <dcgettext@plt>
   112cc:	ldr	r1, [r7]
   112d0:	bl	10e48 <fputs_unlocked@plt>
   112d4:	movw	r1, #30295	; 0x7657
   112d8:	mov	r0, #0
   112dc:	mov	r2, #5
   112e0:	movt	r1, #1
   112e4:	bl	10ed8 <dcgettext@plt>
   112e8:	ldr	r1, [r7]
   112ec:	bl	10e48 <fputs_unlocked@plt>
   112f0:	movw	r1, #30349	; 0x768d
   112f4:	mov	r0, #0
   112f8:	mov	r2, #5
   112fc:	movt	r1, #1
   11300:	bl	10ed8 <dcgettext@plt>
   11304:	ldr	r1, [r7]
   11308:	bl	10e48 <fputs_unlocked@plt>
   1130c:	movw	r0, #31704	; 0x7bd8
   11310:	mov	r2, #48	; 0x30
   11314:	mov	r6, sp
   11318:	movw	r5, #30561	; 0x7761
   1131c:	movt	r0, #1
   11320:	movt	r5, #1
   11324:	add	r1, r0, #32
   11328:	add	r3, r0, #16
   1132c:	vld1.64	{d18-d19}, [r0], r2
   11330:	vld1.64	{d16-d17}, [r1]
   11334:	vld1.64	{d20-d21}, [r3]
   11338:	add	r1, r6, #32
   1133c:	vldr	d22, [r0]
   11340:	add	r0, r6, #16
   11344:	vst1.64	{d16-d17}, [r1]
   11348:	movw	r1, #30843	; 0x787b
   1134c:	vst1.64	{d20-d21}, [r0]
   11350:	mov	r0, r6
   11354:	vst1.64	{d18-d19}, [r0], r2
   11358:	movt	r1, #1
   1135c:	vstr	d22, [r0]
   11360:	mov	r0, r5
   11364:	bl	10e60 <strcmp@plt>
   11368:	cmp	r0, #0
   1136c:	ldrne	r1, [r6, #8]!
   11370:	cmpne	r1, #0
   11374:	bne	11360 <__assert_fail@plt+0x2a8>
   11378:	ldr	r6, [r6, #4]
   1137c:	movw	r1, #30938	; 0x78da
   11380:	mov	r0, #0
   11384:	mov	r2, #5
   11388:	movt	r1, #1
   1138c:	bl	10ed8 <dcgettext@plt>
   11390:	movw	r2, #30638	; 0x77ae
   11394:	movw	r3, #30961	; 0x78f1
   11398:	mov	r1, r0
   1139c:	mov	r0, #1
   113a0:	movt	r2, #1
   113a4:	movt	r3, #1
   113a8:	bl	11010 <__printf_chk@plt>
   113ac:	cmp	r6, #0
   113b0:	mov	r0, #5
   113b4:	mov	r1, #0
   113b8:	moveq	r6, r5
   113bc:	bl	11058 <setlocale@plt>
   113c0:	cmp	r0, #0
   113c4:	beq	113fc <__assert_fail@plt+0x344>
   113c8:	movw	r1, #31001	; 0x7919
   113cc:	mov	r2, #3
   113d0:	movt	r1, #1
   113d4:	bl	11094 <strncmp@plt>
   113d8:	cmp	r0, #0
   113dc:	beq	113fc <__assert_fail@plt+0x344>
   113e0:	movw	r1, #31005	; 0x791d
   113e4:	mov	r0, #0
   113e8:	mov	r2, #5
   113ec:	movt	r1, #1
   113f0:	bl	10ed8 <dcgettext@plt>
   113f4:	ldr	r1, [r7]
   113f8:	bl	10e48 <fputs_unlocked@plt>
   113fc:	movw	r1, #31076	; 0x7964
   11400:	mov	r0, #0
   11404:	mov	r2, #5
   11408:	movt	r1, #1
   1140c:	bl	10ed8 <dcgettext@plt>
   11410:	movw	r2, #30961	; 0x78f1
   11414:	mov	r1, r0
   11418:	mov	r0, #1
   1141c:	mov	r3, r5
   11420:	movt	r2, #1
   11424:	bl	11010 <__printf_chk@plt>
   11428:	movw	r1, #31103	; 0x797f
   1142c:	mov	r0, #0
   11430:	mov	r2, #5
   11434:	movt	r1, #1
   11438:	bl	10ed8 <dcgettext@plt>
   1143c:	movw	r3, #31153	; 0x79b1
   11440:	mov	r1, r0
   11444:	movw	r0, #30871	; 0x7897
   11448:	cmp	r6, r5
   1144c:	mov	r2, r6
   11450:	movt	r0, #1
   11454:	movt	r3, #1
   11458:	moveq	r3, r0
   1145c:	mov	r0, #1
   11460:	bl	11010 <__printf_chk@plt>
   11464:	mov	r0, r4
   11468:	bl	10fbc <exit@plt>
   1146c:	movw	r0, #37192	; 0x9148
   11470:	movw	r1, #29452	; 0x730c
   11474:	mov	r2, #5
   11478:	movt	r0, #2
   1147c:	movt	r1, #1
   11480:	ldr	r5, [r0]
   11484:	mov	r0, #0
   11488:	bl	10ed8 <dcgettext@plt>
   1148c:	mov	r2, r0
   11490:	movw	r0, #37220	; 0x9164
   11494:	mov	r1, #1
   11498:	movt	r0, #2
   1149c:	ldr	r3, [r0]
   114a0:	mov	r0, r5
   114a4:	bl	11028 <__fprintf_chk@plt>
   114a8:	mov	r0, r4
   114ac:	bl	10fbc <exit@plt>
   114b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114b4:	add	fp, sp, #28
   114b8:	sub	sp, sp, #244	; 0xf4
   114bc:	sub	sp, sp, #16384	; 0x4000
   114c0:	mov	r4, r0
   114c4:	ldr	r0, [r1]
   114c8:	mov	r6, r1
   114cc:	bl	133a0 <__assert_fail@plt+0x22e8>
   114d0:	movw	r1, #31153	; 0x79b1
   114d4:	mov	r0, #6
   114d8:	movt	r1, #1
   114dc:	bl	11058 <setlocale@plt>
   114e0:	movw	r5, #30642	; 0x77b2
   114e4:	movw	r1, #30566	; 0x7766
   114e8:	movt	r5, #1
   114ec:	movt	r1, #1
   114f0:	mov	r0, r5
   114f4:	bl	11088 <bindtextdomain@plt>
   114f8:	mov	r0, r5
   114fc:	bl	10ef0 <textdomain@plt>
   11500:	movw	r0, #12544	; 0x3100
   11504:	movt	r0, #1
   11508:	bl	172e8 <__assert_fail@plt+0x6230>
   1150c:	movw	r0, #37205	; 0x9155
   11510:	mov	r9, #0
   11514:	mov	sl, #1
   11518:	cmp	r4, #2
   1151c:	movt	r0, #2
   11520:	strb	r9, [r0]
   11524:	movw	r0, #37206	; 0x9156
   11528:	movt	r0, #2
   1152c:	strb	r9, [r0]
   11530:	movw	r0, #37207	; 0x9157
   11534:	movt	r0, #2
   11538:	strb	sl, [r0]
   1153c:	blt	11594 <__assert_fail@plt+0x4dc>
   11540:	mov	r5, r6
   11544:	ldr	r1, [r5, #4]!
   11548:	ldrb	r0, [r1]
   1154c:	cmp	r0, #45	; 0x2d
   11550:	bne	11684 <__assert_fail@plt+0x5cc>
   11554:	ldrb	r0, [r1, #1]!
   11558:	sub	r0, r0, #48	; 0x30
   1155c:	cmp	r0, #9
   11560:	bhi	11684 <__assert_fail@plt+0x5cc>
   11564:	mov	r0, r1
   11568:	str	r1, [sp, #128]	; 0x80
   1156c:	ldrb	r3, [r0, #1]!
   11570:	sub	r1, r3, #48	; 0x30
   11574:	cmp	r1, #10
   11578:	bcc	1156c <__assert_fail@plt+0x4b4>
   1157c:	mov	r2, #0
   11580:	mov	r1, #1
   11584:	mov	r7, r0
   11588:	str	r2, [sp, #132]	; 0x84
   1158c:	mov	r2, #0
   11590:	b	115bc <__assert_fail@plt+0x504>
   11594:	mov	r0, #10
   11598:	str	r0, [sp, #128]	; 0x80
   1159c:	mov	r0, #0
   115a0:	str	r0, [sp, #132]	; 0x84
   115a4:	b	11694 <__assert_fail@plt+0x5dc>
   115a8:	ldrb	r3, [r7, #1]!
   115ac:	b	115bc <__assert_fail@plt+0x504>
   115b0:	mov	r1, #0
   115b4:	mov	r2, r3
   115b8:	b	115a8 <__assert_fail@plt+0x4f0>
   115bc:	mov	ip, r1
   115c0:	mvn	r1, #97	; 0x61
   115c4:	mov	lr, r2
   115c8:	uxtab	r8, r1, r3
   115cc:	cmp	r8, #24
   115d0:	bhi	12d04 <__assert_fail@plt+0x1c4c>
   115d4:	add	sl, pc, #8
   115d8:	mov	r1, #0
   115dc:	mov	r2, #0
   115e0:	ldr	pc, [sl, r8, lsl #2]
   115e4:			; <UNDEFINED> instruction: 0x000115b0
   115e8:	andeq	r1, r1, r8, lsr #11
   115ec:	andeq	r2, r1, ip, lsr lr
   115f0:	andeq	r2, r1, ip, lsr lr
   115f4:	andeq	r2, r1, ip, lsr lr
   115f8:	andeq	r2, r1, ip, lsr lr
   115fc:	andeq	r2, r1, ip, lsr lr
   11600:	andeq	r2, r1, ip, lsr lr
   11604:	andeq	r2, r1, ip, lsr lr
   11608:			; <UNDEFINED> instruction: 0x000115b0
   1160c:	andeq	r1, r1, r8, asr #12
   11610:			; <UNDEFINED> instruction: 0x000115b0
   11614:	andeq	r2, r1, ip, lsr lr
   11618:	andeq	r2, r1, ip, lsr lr
   1161c:	andeq	r2, r1, ip, lsr lr
   11620:	andeq	r1, r1, r4, ror #12
   11624:	andeq	r2, r1, ip, lsr lr
   11628:	andeq	r2, r1, ip, lsr lr
   1162c:	andeq	r2, r1, ip, lsr lr
   11630:	andeq	r2, r1, ip, lsr lr
   11634:	andeq	r1, r1, ip, ror #12
   11638:	andeq	r2, r1, ip, lsr lr
   1163c:	andeq	r2, r1, ip, lsr lr
   11640:	andeq	r2, r1, ip, lsr lr
   11644:	andeq	r1, r1, r0, asr r6
   11648:	mov	r1, #1
   1164c:	b	11678 <__assert_fail@plt+0x5c0>
   11650:	movw	r1, #37207	; 0x9157
   11654:	mov	r2, #0
   11658:	movt	r1, #2
   1165c:	strb	r2, [r1]
   11660:	b	11674 <__assert_fail@plt+0x5bc>
   11664:	mov	r1, #2
   11668:	b	11670 <__assert_fail@plt+0x5b8>
   1166c:	mov	r1, #1
   11670:	str	r1, [sp, #132]	; 0x84
   11674:	mov	r1, ip
   11678:	ldrb	r3, [r7, #1]!
   1167c:	mov	r2, lr
   11680:	b	115bc <__assert_fail@plt+0x504>
   11684:	mov	r0, #0
   11688:	str	r0, [sp, #132]	; 0x84
   1168c:	mov	r0, #10
   11690:	str	r0, [sp, #128]	; 0x80
   11694:	mov	r0, #1
   11698:	mov	r5, r6
   1169c:	mov	r1, #0
   116a0:	str	r0, [sp, #76]	; 0x4c
   116a4:	movw	r8, #30620	; 0x779c
   116a8:	movw	r7, #31544	; 0x7b38
   116ac:	mov	r0, #0
   116b0:	movt	r8, #1
   116b4:	movt	r7, #1
   116b8:	str	r0, [sp, #84]	; 0x54
   116bc:	b	116d4 <__assert_fail@plt+0x61c>
   116c0:	ldr	r1, [sp, #100]	; 0x64
   116c4:	str	r0, [sp, #132]	; 0x84
   116c8:	b	116d4 <__assert_fail@plt+0x61c>
   116cc:	mov	r0, #1
   116d0:	b	116c0 <__assert_fail@plt+0x608>
   116d4:	str	r1, [sp, #100]	; 0x64
   116d8:	b	116e8 <__assert_fail@plt+0x630>
   116dc:	movw	r0, #37207	; 0x9157
   116e0:	movt	r0, #2
   116e4:	strb	r9, [r0]
   116e8:	mov	r0, r4
   116ec:	mov	r1, r5
   116f0:	mov	r2, r8
   116f4:	mov	r3, r7
   116f8:	str	r9, [sp]
   116fc:	bl	10fa4 <getopt_long@plt>
   11700:	mov	r6, r0
   11704:	cmp	r0, #98	; 0x62
   11708:	ble	11854 <__assert_fail@plt+0x79c>
   1170c:	sub	r0, r6, #99	; 0x63
   11710:	cmp	r0, #23
   11714:	bhi	11780 <__assert_fail@plt+0x6c8>
   11718:	add	r1, pc, #0
   1171c:	ldr	pc, [r1, r0, lsl #2]
   11720:	andeq	r1, r1, r0, lsr #15
   11724:	andeq	r2, r1, r0, lsl #28
   11728:	andeq	r2, r1, r0, lsl #28
   1172c:	andeq	r2, r1, r0, lsl #28
   11730:	andeq	r2, r1, r0, lsl #28
   11734:	andeq	r2, r1, r0, lsl #28
   11738:	andeq	r2, r1, r0, lsl #28
   1173c:	andeq	r2, r1, r0, lsl #28
   11740:	andeq	r2, r1, r0, lsl #28
   11744:	andeq	r2, r1, r0, lsl #28
   11748:	andeq	r2, r1, r0, lsl #28
   1174c:	ldrdeq	r1, [r1], -r8
   11750:	andeq	r2, r1, r0, lsl #28
   11754:	andeq	r2, r1, r0, lsl #28
   11758:	muleq	r1, r8, r7
   1175c:	andeq	r2, r1, r0, lsl #28
   11760:	andeq	r2, r1, r0, lsl #28
   11764:	andeq	r2, r1, r0, lsl #28
   11768:	andeq	r2, r1, r0, lsl #28
   1176c:	andeq	r1, r1, ip, asr #13
   11770:	andeq	r2, r1, r0, lsl #28
   11774:	andeq	r2, r1, r0, lsl #28
   11778:	andeq	r2, r1, r0, lsl #28
   1177c:	ldrdeq	r1, [r1], -ip
   11780:	cmp	r6, #256	; 0x100
   11784:	bne	12e00 <__assert_fail@plt+0x1d48>
   11788:	movw	r0, #37208	; 0x9158
   1178c:	movt	r0, #2
   11790:	strb	sl, [r0]
   11794:	b	116e8 <__assert_fail@plt+0x630>
   11798:	mov	r0, #2
   1179c:	b	116c0 <__assert_fail@plt+0x608>
   117a0:	movw	r1, #37200	; 0x9150
   117a4:	movt	r1, #2
   117a8:	ldr	r6, [r1]
   117ac:	ldrb	r0, [r6]
   117b0:	subs	r0, r0, #45	; 0x2d
   117b4:	clz	r0, r0
   117b8:	addeq	r6, r6, #1
   117bc:	lsr	r0, r0, #5
   117c0:	streq	r6, [r1]
   117c4:	movw	r1, #30688	; 0x77e0
   117c8:	str	r0, [sp, #84]	; 0x54
   117cc:	mov	r0, #0
   117d0:	movt	r1, #1
   117d4:	b	1180c <__assert_fail@plt+0x754>
   117d8:	movw	r1, #37200	; 0x9150
   117dc:	movt	r1, #2
   117e0:	ldr	r6, [r1]
   117e4:	ldrb	r0, [r6]
   117e8:	subs	r0, r0, #45	; 0x2d
   117ec:	clz	r0, r0
   117f0:	addeq	r6, r6, #1
   117f4:	lsr	r0, r0, #5
   117f8:	streq	r6, [r1]
   117fc:	movw	r1, #31167	; 0x79bf
   11800:	str	r0, [sp, #84]	; 0x54
   11804:	mov	r0, #1
   11808:	movt	r1, #1
   1180c:	str	r0, [sp, #76]	; 0x4c
   11810:	mov	r0, #0
   11814:	mov	r2, #5
   11818:	bl	10ed8 <dcgettext@plt>
   1181c:	mvn	r1, #0
   11820:	str	r0, [sp, #12]
   11824:	mov	r0, r6
   11828:	mov	r2, #0
   1182c:	mov	r3, #0
   11830:	str	r9, [sp, #16]
   11834:	str	r1, [sp]
   11838:	str	r1, [sp, #4]
   1183c:	movw	r1, #31154	; 0x79b2
   11840:	movt	r1, #1
   11844:	str	r1, [sp, #8]
   11848:	bl	15ec0 <__assert_fail@plt+0x4e08>
   1184c:	str	r0, [sp, #128]	; 0x80
   11850:	b	116d4 <__assert_fail@plt+0x61c>
   11854:	ldr	r3, [sp, #100]	; 0x64
   11858:	cmn	r6, #1
   1185c:	bne	12d94 <__assert_fail@plt+0x1cdc>
   11860:	ldr	r0, [sp, #132]	; 0x84
   11864:	cmp	r0, #1
   11868:	beq	1188c <__assert_fail@plt+0x7d4>
   1186c:	cmp	r0, #0
   11870:	bne	1189c <__assert_fail@plt+0x7e4>
   11874:	movw	r0, #37184	; 0x9140
   11878:	sub	r1, r4, #1
   1187c:	movt	r0, #2
   11880:	ldr	r0, [r0]
   11884:	cmp	r0, r1
   11888:	bge	1189c <__assert_fail@plt+0x7e4>
   1188c:	movw	r1, #37206	; 0x9156
   11890:	mov	r0, #1
   11894:	movt	r1, #2
   11898:	strb	r0, [r1]
   1189c:	ldr	r1, [sp, #84]	; 0x54
   118a0:	cmp	r3, #0
   118a4:	mov	r0, #0
   118a8:	mov	r6, #0
   118ac:	movwlt	r0, #1
   118b0:	and	r0, r0, r1
   118b4:	cmp	r0, #1
   118b8:	bne	118cc <__assert_fail@plt+0x814>
   118bc:	ldr	r0, [sp, #76]	; 0x4c
   118c0:	eor	r0, r0, #1
   118c4:	tst	r0, #1
   118c8:	bne	12eac <__assert_fail@plt+0x1df4>
   118cc:	movw	r0, #37184	; 0x9140
   118d0:	movw	r1, #31536	; 0x7b30
   118d4:	movt	r0, #2
   118d8:	movt	r1, #1
   118dc:	ldr	r0, [r0]
   118e0:	cmp	r0, r4
   118e4:	addlt	r1, r5, r0, lsl #2
   118e8:	ldr	r7, [r1]
   118ec:	str	r1, [sp, #88]	; 0x58
   118f0:	cmp	r7, #0
   118f4:	beq	12cd4 <__assert_fail@plt+0x1c1c>
   118f8:	ldr	r6, [sp, #128]	; 0x80
   118fc:	mov	r1, #1
   11900:	movw	r9, #8204	; 0x200c
   11904:	add	sl, sp, #240	; 0xf0
   11908:	adds	r0, r6, #8192	; 0x2000
   1190c:	adc	r0, r3, #0
   11910:	str	r0, [sp, #28]
   11914:	mov	r0, r6
   11918:	bfc	r0, #13, #19
   1191c:	str	r0, [sp, #24]
   11920:	rsb	r0, r0, #8192	; 0x2000
   11924:	str	r0, [sp, #64]	; 0x40
   11928:	add	r0, r0, r6
   1192c:	add	r1, r1, r0, lsr #13
   11930:	lsr	r0, r0, #13
   11934:	str	r0, [sp, #68]	; 0x44
   11938:	add	r0, sp, #136	; 0x88
   1193c:	cmp	r1, #16
   11940:	mov	r2, r1
   11944:	str	r1, [sp, #80]	; 0x50
   11948:	add	r0, r0, #48	; 0x30
   1194c:	movcs	r2, #16
   11950:	str	r0, [sp, #32]
   11954:	add	r0, r6, #8192	; 0x2000
   11958:	str	r2, [sp, #40]	; 0x28
   1195c:	mov	r2, #0
   11960:	str	r0, [sp, #72]	; 0x48
   11964:	lsr	r0, r1, #1
   11968:	mov	r1, #1
   1196c:	str	r0, [sp, #36]	; 0x24
   11970:	b	1287c <__assert_fail@plt+0x17c4>
   11974:	mvn	r1, #0
   11978:	mov	r0, #0
   1197c:	str	r1, [sp, #56]	; 0x38
   11980:	mvn	r1, #0
   11984:	str	r1, [sp, #44]	; 0x2c
   11988:	cmp	r1, #0
   1198c:	mov	r1, #0
   11990:	movwlt	r1, #1
   11994:	orr	r2, r0, r1
   11998:	ldr	r0, [sp, #32]
   1199c:	ldr	r4, [r0]
   119a0:	ldr	r1, [r0, #4]
   119a4:	ldr	r3, [sp, #76]	; 0x4c
   119a8:	tst	r3, #1
   119ac:	beq	11c18 <__assert_fail@plt+0xb60>
   119b0:	cmp	r2, #0
   119b4:	bne	11d18 <__assert_fail@plt+0xc60>
   119b8:	ldr	r2, [sp, #192]	; 0xc0
   119bc:	mov	r6, #0
   119c0:	subs	r3, r2, #536870913	; 0x20000001
   119c4:	rscs	r3, r6, r2, asr #31
   119c8:	mov	r3, #0
   119cc:	movwcc	r3, #1
   119d0:	rsbs	r7, r2, #0
   119d4:	sbcs	r7, r6, r2, asr #31
   119d8:	ldr	r6, [sp, #132]	; 0x84
   119dc:	mov	r7, #0
   119e0:	movwlt	r7, #1
   119e4:	ands	r3, r7, r3
   119e8:	mov	r7, #512	; 0x200
   119ec:	asrne	r3, r2, #31
   119f0:	moveq	r2, r7
   119f4:	subs	r2, r2, r4
   119f8:	sbcs	r2, r3, r1
   119fc:	bge	11d18 <__assert_fail@plt+0xc60>
   11a00:	mov	r0, #1
   11a04:	ldr	r3, [sp, #56]	; 0x38
   11a08:	ldr	r7, [sp, #92]	; 0x5c
   11a0c:	str	r0, [sp, #112]	; 0x70
   11a10:	ldr	r0, [sp, #44]	; 0x2c
   11a14:	subs	r2, r3, r4
   11a18:	sbcs	r2, r0, r1
   11a1c:	bge	12c44 <__assert_fail@plt+0x1b8c>
   11a20:	subs	r2, r4, r3
   11a24:	mov	r8, #0
   11a28:	str	r7, [sp, #4]
   11a2c:	sbc	r3, r1, r0
   11a30:	mov	r0, r6
   11a34:	str	r8, [sp]
   11a38:	asr	r3, r3, #31
   11a3c:	add	r3, r2, r3, lsr #19
   11a40:	bfc	r3, #0, #13
   11a44:	subs	r6, r2, r3
   11a48:	movweq	r6, #8192	; 0x2000
   11a4c:	subs	r2, r4, r6
   11a50:	sbc	r9, r1, #0
   11a54:	str	r2, [sp, #112]	; 0x70
   11a58:	mov	r3, r9
   11a5c:	bl	12f14 <__assert_fail@plt+0x1e5c>
   11a60:	cmp	r1, #0
   11a64:	blt	1286c <__assert_fail@plt+0x17b4>
   11a68:	ldr	r0, [sp, #132]	; 0x84
   11a6c:	sub	lr, fp, #8192	; 0x2000
   11a70:	mov	r2, r6
   11a74:	sub	r1, lr, #32
   11a78:	bl	1510c <__assert_fail@plt+0x4054>
   11a7c:	cmn	r0, #1
   11a80:	beq	11bd0 <__assert_fail@plt+0xb18>
   11a84:	ldr	r2, [sp, #128]	; 0x80
   11a88:	ldr	r3, [sp, #100]	; 0x64
   11a8c:	mov	r6, r0
   11a90:	orrs	sl, r2, r3
   11a94:	mov	r5, r2
   11a98:	mov	r4, r3
   11a9c:	beq	11ae8 <__assert_fail@plt+0xa30>
   11aa0:	cmp	r6, #0
   11aa4:	mov	r5, r2
   11aa8:	mov	r4, r3
   11aac:	beq	11ae8 <__assert_fail@plt+0xa30>
   11ab0:	movw	r1, #37207	; 0x9157
   11ab4:	sub	lr, fp, #8192	; 0x2000
   11ab8:	subs	r5, r2, #1
   11abc:	movt	r1, #2
   11ac0:	sub	r0, lr, #32
   11ac4:	sbc	r4, r3, #0
   11ac8:	ldrb	r1, [r1]
   11acc:	add	r0, r0, r6
   11ad0:	ldrb	r0, [r0, #-1]
   11ad4:	cmp	r1, #0
   11ad8:	movwne	r1, #10
   11adc:	cmp	r1, r0
   11ae0:	moveq	r4, r3
   11ae4:	moveq	r5, r2
   11ae8:	movw	r0, #37207	; 0x9157
   11aec:	movt	r0, #2
   11af0:	ldrb	r7, [r0]
   11af4:	cmp	r7, #0
   11af8:	movwne	r7, #10
   11afc:	cmp	r6, #0
   11b00:	beq	11b58 <__assert_fail@plt+0xaa0>
   11b04:	cmp	sl, #0
   11b08:	beq	11b38 <__assert_fail@plt+0xa80>
   11b0c:	sub	lr, fp, #8192	; 0x2000
   11b10:	mov	r1, r7
   11b14:	mov	r2, r6
   11b18:	sub	r0, lr, #32
   11b1c:	bl	10fe0 <memrchr@plt>
   11b20:	cmp	r0, #0
   11b24:	beq	11b58 <__assert_fail@plt+0xaa0>
   11b28:	sub	lr, fp, #8192	; 0x2000
   11b2c:	sub	r1, lr, #32
   11b30:	sub	r6, r0, r1
   11b34:	b	11b3c <__assert_fail@plt+0xa84>
   11b38:	sub	r6, r6, #1
   11b3c:	subs	r0, r5, #1
   11b40:	sbc	r1, r4, #0
   11b44:	orrs	r2, r5, r4
   11b48:	mov	r5, r0
   11b4c:	mov	r4, r1
   11b50:	bne	11afc <__assert_fail@plt+0xa44>
   11b54:	b	12720 <__assert_fail@plt+0x1668>
   11b58:	ldr	r1, [sp, #44]	; 0x2c
   11b5c:	ldr	r0, [sp, #56]	; 0x38
   11b60:	ldr	r2, [sp, #112]	; 0x70
   11b64:	eor	r0, r2, r0
   11b68:	eor	r1, r9, r1
   11b6c:	orrs	r0, r0, r1
   11b70:	beq	12864 <__assert_fail@plt+0x17ac>
   11b74:	ldr	r7, [sp, #92]	; 0x5c
   11b78:	ldr	r0, [sp, #132]	; 0x84
   11b7c:	subs	r2, r2, #8192	; 0x2000
   11b80:	mov	r8, #0
   11b84:	sbc	r9, r9, #0
   11b88:	str	r8, [sp]
   11b8c:	str	r2, [sp, #112]	; 0x70
   11b90:	mov	r3, r9
   11b94:	str	r7, [sp, #4]
   11b98:	bl	12f14 <__assert_fail@plt+0x1e5c>
   11b9c:	cmp	r1, #0
   11ba0:	blt	1286c <__assert_fail@plt+0x17b4>
   11ba4:	ldr	r0, [sp, #132]	; 0x84
   11ba8:	sub	lr, fp, #8192	; 0x2000
   11bac:	mov	r2, #8192	; 0x2000
   11bb0:	sub	r1, lr, #32
   11bb4:	bl	1510c <__assert_fail@plt+0x4054>
   11bb8:	cmp	r0, #0
   11bbc:	mov	r8, #1
   11bc0:	beq	1286c <__assert_fail@plt+0x17b4>
   11bc4:	mov	r6, r0
   11bc8:	cmn	r0, #1
   11bcc:	bne	11ae8 <__assert_fail@plt+0xa30>
   11bd0:	bl	10fec <__errno_location@plt>
   11bd4:	ldr	r4, [r0]
   11bd8:	movw	r1, #31419	; 0x7abb
   11bdc:	mov	r0, #0
   11be0:	mov	r2, #5
   11be4:	mov	r8, #0
   11be8:	movt	r1, #1
   11bec:	bl	10ed8 <dcgettext@plt>
   11bf0:	mov	r5, r0
   11bf4:	mov	r0, #4
   11bf8:	mov	r1, r7
   11bfc:	bl	14aac <__assert_fail@plt+0x39f4>
   11c00:	mov	r3, r0
   11c04:	mov	r0, #0
   11c08:	mov	r1, r4
   11c0c:	mov	r2, r5
   11c10:	bl	10f5c <error@plt>
   11c14:	b	1286c <__assert_fail@plt+0x17b4>
   11c18:	cmp	r2, #0
   11c1c:	bne	11d8c <__assert_fail@plt+0xcd4>
   11c20:	ldr	r2, [sp, #192]	; 0xc0
   11c24:	mov	r6, #0
   11c28:	subs	r3, r2, #536870913	; 0x20000001
   11c2c:	rscs	r3, r6, r2, asr #31
   11c30:	mov	r3, #0
   11c34:	movwcc	r3, #1
   11c38:	rsbs	r7, r2, #0
   11c3c:	sbcs	r7, r6, r2, asr #31
   11c40:	ldr	r6, [sp, #132]	; 0x84
   11c44:	mov	r7, #0
   11c48:	movwlt	r7, #1
   11c4c:	ands	r3, r7, r3
   11c50:	mov	r7, #512	; 0x200
   11c54:	asrne	r3, r2, #31
   11c58:	moveq	r2, r7
   11c5c:	ldr	r7, [sp, #92]	; 0x5c
   11c60:	subs	r2, r2, r4
   11c64:	sbcs	r2, r3, r1
   11c68:	bge	11d8c <__assert_fail@plt+0xcd4>
   11c6c:	ldr	r0, [sp, #56]	; 0x38
   11c70:	ldr	r5, [sp, #128]	; 0x80
   11c74:	ldr	r3, [sp, #100]	; 0x64
   11c78:	subs	r2, r4, r0
   11c7c:	ldr	r0, [sp, #44]	; 0x2c
   11c80:	sbc	r0, r1, r0
   11c84:	rsbs	r1, r2, #0
   11c88:	rscs	r1, r0, #0
   11c8c:	mov	r1, #0
   11c90:	movwlt	r1, #1
   11c94:	cmp	r1, #0
   11c98:	moveq	r0, r1
   11c9c:	movne	r1, r2
   11ca0:	mov	r2, #1
   11ca4:	str	r2, [sp, #112]	; 0x70
   11ca8:	subs	r2, r5, r1
   11cac:	sbcs	r2, r3, r0
   11cb0:	bcs	12c44 <__assert_fail@plt+0x1b8c>
   11cb4:	subs	r4, r1, r5
   11cb8:	sbc	r5, r0, r3
   11cbc:	orrs	r0, r4, r5
   11cc0:	beq	12c44 <__assert_fail@plt+0x1b8c>
   11cc4:	subs	r0, r4, #8192	; 0x2000
   11cc8:	mov	r2, #8192	; 0x2000
   11ccc:	mov	r1, sl
   11cd0:	sbcs	r0, r5, #0
   11cd4:	movcc	r2, r4
   11cd8:	mov	r0, r6
   11cdc:	bl	1510c <__assert_fail@plt+0x4054>
   11ce0:	cmn	r0, #1
   11ce4:	beq	1281c <__assert_fail@plt+0x1764>
   11ce8:	subs	r4, r4, r0
   11cec:	mov	r1, r0
   11cf0:	sbc	r5, r5, #0
   11cf4:	cmp	r0, #0
   11cf8:	bne	11d04 <__assert_fail@plt+0xc4c>
   11cfc:	orrs	r0, r4, r5
   11d00:	bne	12824 <__assert_fail@plt+0x176c>
   11d04:	mov	r0, sl
   11d08:	bl	12fc4 <__assert_fail@plt+0x1f0c>
   11d0c:	orrs	r0, r4, r5
   11d10:	bne	11cc4 <__assert_fail@plt+0xc0c>
   11d14:	b	12c44 <__assert_fail@plt+0x1b8c>
   11d18:	movw	r0, #8208	; 0x2010
   11d1c:	bl	15828 <__assert_fail@plt+0x4770>
   11d20:	mov	r1, #0
   11d24:	movw	r7, #8200	; 0x2008
   11d28:	movw	r8, #8196	; 0x2004
   11d2c:	mov	r4, r0
   11d30:	str	r1, [r0, r7]
   11d34:	str	r1, [r0, r8]
   11d38:	mov	r0, #0
   11d3c:	str	r1, [r4, r9]
   11d40:	str	r0, [sp, #112]	; 0x70
   11d44:	movw	r0, #8208	; 0x2010
   11d48:	bl	15828 <__assert_fail@plt+0x4770>
   11d4c:	mov	r5, r0
   11d50:	mov	r0, r6
   11d54:	mov	r2, #8192	; 0x2000
   11d58:	mov	r1, r5
   11d5c:	bl	1510c <__assert_fail@plt+0x4054>
   11d60:	mov	r9, r0
   11d64:	add	r0, r0, #1
   11d68:	str	r4, [sp, #60]	; 0x3c
   11d6c:	cmp	r0, #2
   11d70:	bcs	11f00 <__assert_fail@plt+0xe48>
   11d74:	ldr	r0, [sp, #56]	; 0x38
   11d78:	str	r4, [sp, #104]	; 0x68
   11d7c:	str	r0, [sp, #52]	; 0x34
   11d80:	ldr	r0, [sp, #44]	; 0x2c
   11d84:	str	r0, [sp, #48]	; 0x30
   11d88:	b	12314 <__assert_fail@plt+0x125c>
   11d8c:	ldr	r0, [sp, #28]
   11d90:	cmp	r0, #0
   11d94:	bne	12e6c <__assert_fail@plt+0x1db4>
   11d98:	ldr	r0, [sp, #128]	; 0x80
   11d9c:	cmp	r0, #1048576	; 0x100000
   11da0:	bhi	120f0 <__assert_fail@plt+0x1038>
   11da4:	ldr	r4, [sp, #72]	; 0x48
   11da8:	mov	r0, #2
   11dac:	mov	r1, r4
   11db0:	bl	158f8 <__assert_fail@plt+0x4840>
   11db4:	sub	lr, fp, #8192	; 0x2000
   11db8:	mov	r8, r0
   11dbc:	add	r0, r0, r4
   11dc0:	mov	sl, #0
   11dc4:	mov	r5, #1
   11dc8:	sub	r1, lr, #32
   11dcc:	mov	r9, r8
   11dd0:	str	r8, [r1]
   11dd4:	str	r0, [r1, #4]
   11dd8:	ldr	r0, [sp, #56]	; 0x38
   11ddc:	str	r0, [sp, #108]	; 0x6c
   11de0:	ldr	r0, [sp, #44]	; 0x2c
   11de4:	str	r0, [sp, #104]	; 0x68
   11de8:	b	11e04 <__assert_fail@plt+0xd4c>
   11dec:	eor	sl, sl, #1
   11df0:	sub	lr, fp, #8192	; 0x2000
   11df4:	mov	r5, #0
   11df8:	and	r0, sl, #1
   11dfc:	sub	r1, lr, #32
   11e00:	ldr	r9, [r1, r0, lsl #2]
   11e04:	ldr	r4, [sp, #72]	; 0x48
   11e08:	mov	r0, r6
   11e0c:	mov	r1, r9
   11e10:	mov	r2, r4
   11e14:	bl	13210 <__assert_fail@plt+0x2158>
   11e18:	mov	r6, r0
   11e1c:	cmp	r0, r4
   11e20:	mov	r0, #0
   11e24:	mov	r7, #0
   11e28:	bcs	11e5c <__assert_fail@plt+0xda4>
   11e2c:	bl	10fec <__errno_location@plt>
   11e30:	ldr	r4, [r0]
   11e34:	cmp	r4, #0
   11e38:	bne	12500 <__assert_fail@plt+0x1448>
   11e3c:	ldr	r1, [sp, #128]	; 0x80
   11e40:	mov	r7, #1
   11e44:	mov	r0, #0
   11e48:	cmp	r6, r1
   11e4c:	bhi	11e5c <__assert_fail@plt+0xda4>
   11e50:	sub	r0, r1, r6
   11e54:	tst	r5, #1
   11e58:	movwne	r0, #0
   11e5c:	tst	r5, #1
   11e60:	beq	11e74 <__assert_fail@plt+0xdbc>
   11e64:	ldr	r5, [sp, #128]	; 0x80
   11e68:	cmp	r6, r5
   11e6c:	bhi	11ebc <__assert_fail@plt+0xe04>
   11e70:	b	11ee4 <__assert_fail@plt+0xe2c>
   11e74:	ldr	r5, [sp, #128]	; 0x80
   11e78:	sub	lr, fp, #8192	; 0x2000
   11e7c:	sub	r1, lr, #32
   11e80:	sub	r4, r5, r0
   11e84:	mov	r0, #1
   11e88:	bic	r0, r0, sl
   11e8c:	ldr	r0, [r1, r0, lsl #2]
   11e90:	mov	r1, r4
   11e94:	add	r0, r0, #8192	; 0x2000
   11e98:	bl	12fc4 <__assert_fail@plt+0x1f0c>
   11e9c:	ldr	r0, [sp, #108]	; 0x6c
   11ea0:	adds	r0, r0, r4
   11ea4:	str	r0, [sp, #108]	; 0x6c
   11ea8:	ldr	r0, [sp, #104]	; 0x68
   11eac:	adc	r0, r0, #0
   11eb0:	str	r0, [sp, #104]	; 0x68
   11eb4:	cmp	r6, r5
   11eb8:	bls	11ee4 <__assert_fail@plt+0xe2c>
   11ebc:	sub	r4, r6, r5
   11ec0:	mov	r0, r9
   11ec4:	mov	r1, r4
   11ec8:	bl	12fc4 <__assert_fail@plt+0x1f0c>
   11ecc:	ldr	r0, [sp, #108]	; 0x6c
   11ed0:	adds	r0, r0, r4
   11ed4:	str	r0, [sp, #108]	; 0x6c
   11ed8:	ldr	r0, [sp, #104]	; 0x68
   11edc:	adc	r0, r0, #0
   11ee0:	str	r0, [sp, #104]	; 0x68
   11ee4:	ldr	r6, [sp, #132]	; 0x84
   11ee8:	cmp	r7, #0
   11eec:	beq	11dec <__assert_fail@plt+0xd34>
   11ef0:	ldr	r7, [sp, #92]	; 0x5c
   11ef4:	mov	r0, #1
   11ef8:	str	r0, [sp, #112]	; 0x70
   11efc:	b	12548 <__assert_fail@plt+0x1490>
   11f00:	ldr	r0, [sp, #100]	; 0x64
   11f04:	ldr	r1, [sp, #128]	; 0x80
   11f08:	orrs	r0, r1, r0
   11f0c:	beq	122b8 <__assert_fail@plt+0x1200>
   11f10:	mov	r0, #0
   11f14:	str	r0, [sp, #112]	; 0x70
   11f18:	ldr	r0, [sp, #56]	; 0x38
   11f1c:	str	r0, [sp, #52]	; 0x34
   11f20:	ldr	r0, [sp, #44]	; 0x2c
   11f24:	str	r0, [sp, #48]	; 0x30
   11f28:	ldr	r0, [sp, #60]	; 0x3c
   11f2c:	str	r0, [sp, #104]	; 0x68
   11f30:	mov	r0, #0
   11f34:	movw	r1, #8204	; 0x200c
   11f38:	mov	r4, r5
   11f3c:	mov	sl, r5
   11f40:	str	r0, [r5, r1]
   11f44:	mov	r1, r5
   11f48:	str	r9, [r1, r8]!
   11f4c:	str	r1, [sp, #108]	; 0x6c
   11f50:	str	r0, [r4, r7]!
   11f54:	movw	r0, #37207	; 0x9157
   11f58:	str	r5, [sp, #96]	; 0x60
   11f5c:	movt	r0, #2
   11f60:	mov	r1, r0
   11f64:	ldrb	r0, [r0]
   11f68:	cmp	r0, #0
   11f6c:	movwne	r0, #10
   11f70:	strb	r0, [r5, r9]
   11f74:	mov	r0, r5
   11f78:	ldrb	r8, [r1]
   11f7c:	cmp	r8, #0
   11f80:	movwne	r8, #10
   11f84:	mov	r1, r8
   11f88:	bl	10efc <rawmemchr@plt>
   11f8c:	ldr	r5, [r4]
   11f90:	add	r7, sl, r9
   11f94:	cmp	r0, r7
   11f98:	bcs	11fb8 <__assert_fail@plt+0xf00>
   11f9c:	add	r5, r5, #1
   11fa0:	add	r0, r0, #1
   11fa4:	mov	r1, r8
   11fa8:	str	r5, [r4]
   11fac:	bl	10efc <rawmemchr@plt>
   11fb0:	cmp	r0, r7
   11fb4:	bcc	11f9c <__assert_fail@plt+0xee4>
   11fb8:	ldr	r7, [sp, #112]	; 0x70
   11fbc:	ldr	r6, [sp, #104]	; 0x68
   11fc0:	ldr	r9, [sp, #108]	; 0x6c
   11fc4:	movw	r8, #8196	; 0x2004
   11fc8:	mov	r3, #0
   11fcc:	add	r7, r5, r7
   11fd0:	mov	r5, r6
   11fd4:	ldr	r2, [r9]
   11fd8:	ldr	r0, [r5, r8]!
   11fdc:	add	r1, r0, r2
   11fe0:	cmp	r3, r1, lsr #13
   11fe4:	bne	1202c <__assert_fail@plt+0xf74>
   11fe8:	ldr	r1, [sp, #96]	; 0x60
   11fec:	add	r0, r6, r0
   11ff0:	str	r7, [sp, #112]	; 0x70
   11ff4:	bl	10e9c <memcpy@plt>
   11ff8:	ldr	r0, [r9]
   11ffc:	ldr	r1, [r5]
   12000:	movw	r7, #8200	; 0x2008
   12004:	add	r0, r1, r0
   12008:	str	r0, [r5]
   1200c:	mov	r0, r6
   12010:	mov	r5, sl
   12014:	add	sl, sp, #240	; 0xf0
   12018:	ldr	r1, [r0, r7]!
   1201c:	ldr	r2, [r4]
   12020:	add	r1, r1, r2
   12024:	str	r1, [r0]
   12028:	b	120c8 <__assert_fail@plt+0x1010>
   1202c:	ldr	r2, [sp, #60]	; 0x3c
   12030:	movw	r9, #8204	; 0x200c
   12034:	movw	r0, #8200	; 0x2008
   12038:	ldr	r1, [sp, #128]	; 0x80
   1203c:	str	sl, [r6, r9]
   12040:	mov	r5, r2
   12044:	ldr	r0, [r5, r0]!
   12048:	sub	r0, r7, r0
   1204c:	subs	r0, r1, r0
   12050:	ldr	r0, [sp, #100]	; 0x64
   12054:	sbcs	r0, r0, #0
   12058:	bcs	120ac <__assert_fail@plt+0xff4>
   1205c:	ldr	r4, [r2, r8]
   12060:	mov	r0, r2
   12064:	mov	r8, r2
   12068:	mov	r1, r4
   1206c:	bl	12fc4 <__assert_fail@plt+0x1f0c>
   12070:	ldr	r0, [sp, #52]	; 0x34
   12074:	ldr	r1, [r5]
   12078:	mov	r5, r8
   1207c:	str	sl, [sp, #104]	; 0x68
   12080:	adds	r0, r0, r4
   12084:	sub	r7, r7, r1
   12088:	str	r0, [sp, #52]	; 0x34
   1208c:	ldr	r0, [sp, #48]	; 0x30
   12090:	str	r7, [sp, #112]	; 0x70
   12094:	adc	r0, r0, #0
   12098:	str	r0, [sp, #48]	; 0x30
   1209c:	ldr	r0, [r8, r9]
   120a0:	movw	r8, #8196	; 0x2004
   120a4:	str	r0, [sp, #60]	; 0x3c
   120a8:	b	120c0 <__assert_fail@plt+0x1008>
   120ac:	movw	r0, #8208	; 0x2010
   120b0:	str	r7, [sp, #112]	; 0x70
   120b4:	bl	15828 <__assert_fail@plt+0x4770>
   120b8:	mov	r5, r0
   120bc:	str	sl, [sp, #104]	; 0x68
   120c0:	add	sl, sp, #240	; 0xf0
   120c4:	movw	r7, #8200	; 0x2008
   120c8:	ldr	r6, [sp, #132]	; 0x84
   120cc:	mov	r1, r5
   120d0:	mov	r2, #8192	; 0x2000
   120d4:	mov	r0, r6
   120d8:	bl	1510c <__assert_fail@plt+0x4054>
   120dc:	mov	r9, r0
   120e0:	add	r0, r0, #1
   120e4:	cmp	r0, #1
   120e8:	bhi	11f30 <__assert_fail@plt+0xe78>
   120ec:	b	12314 <__assert_fail@plt+0x125c>
   120f0:	ldr	r0, [sp, #56]	; 0x38
   120f4:	mov	r3, #0
   120f8:	mov	r7, #1
   120fc:	mov	r5, #0
   12100:	mov	r9, #0
   12104:	mov	r8, #0
   12108:	str	r0, [sp, #108]	; 0x6c
   1210c:	ldr	r0, [sp, #44]	; 0x2c
   12110:	str	r0, [sp, #104]	; 0x68
   12114:	mov	r0, #0
   12118:	str	r0, [sp, #96]	; 0x60
   1211c:	cmp	r3, r9
   12120:	str	r7, [sp, #112]	; 0x70
   12124:	bne	12168 <__assert_fail@plt+0x10b0>
   12128:	ldr	r4, [sp, #40]	; 0x28
   1212c:	ldr	r1, [sp, #96]	; 0x60
   12130:	cmp	r3, #0
   12134:	beq	12148 <__assert_fail@plt+0x1090>
   12138:	ldr	r0, [sp, #36]	; 0x24
   1213c:	ldr	r4, [sp, #80]	; 0x50
   12140:	cmp	r3, r0
   12144:	lslls	r4, r3, #1
   12148:	mov	r0, r1
   1214c:	mov	r1, r4
   12150:	mov	r2, #4
   12154:	bl	157ec <__assert_fail@plt+0x4734>
   12158:	mov	r3, r4
   1215c:	ldr	r4, [sp, #132]	; 0x84
   12160:	mov	r6, r0
   12164:	b	12170 <__assert_fail@plt+0x10b8>
   12168:	ldr	r4, [sp, #132]	; 0x84
   1216c:	ldr	r6, [sp, #96]	; 0x60
   12170:	tst	r8, #1
   12174:	mov	r7, r3
   12178:	str	r6, [sp, #96]	; 0x60
   1217c:	beq	12188 <__assert_fail@plt+0x10d0>
   12180:	ldr	r1, [r6, r9, lsl #2]
   12184:	b	1219c <__assert_fail@plt+0x10e4>
   12188:	mov	r0, #8192	; 0x2000
   1218c:	bl	15828 <__assert_fail@plt+0x4770>
   12190:	mov	r1, r0
   12194:	add	r5, r9, #1
   12198:	str	r0, [r6, r9, lsl #2]
   1219c:	mov	r0, r4
   121a0:	mov	r2, #8192	; 0x2000
   121a4:	bl	13210 <__assert_fail@plt+0x2158>
   121a8:	mov	sl, #0
   121ac:	mov	r6, r0
   121b0:	cmp	sl, r0, lsr #13
   121b4:	bne	121cc <__assert_fail@plt+0x1114>
   121b8:	bl	10fec <__errno_location@plt>
   121bc:	ldr	r4, [r0]
   121c0:	mov	sl, #1
   121c4:	cmp	r4, #0
   121c8:	bne	1255c <__assert_fail@plt+0x14a4>
   121cc:	ldr	r0, [sp, #68]	; 0x44
   121d0:	sub	r0, r9, r0
   121d4:	clz	r0, r0
   121d8:	lsr	r0, r0, #5
   121dc:	orr	r8, r8, r0
   121e0:	tst	r8, #1
   121e4:	beq	12218 <__assert_fail@plt+0x1160>
   121e8:	ldr	r0, [sp, #96]	; 0x60
   121ec:	ldr	r4, [sp, #112]	; 0x70
   121f0:	mov	r1, r6
   121f4:	ldr	r0, [r0, r4, lsl #2]
   121f8:	bl	12fc4 <__assert_fail@plt+0x1f0c>
   121fc:	ldr	r0, [sp, #108]	; 0x6c
   12200:	adds	r0, r0, r6
   12204:	str	r0, [sp, #108]	; 0x6c
   12208:	ldr	r0, [sp, #104]	; 0x68
   1220c:	adc	r0, r0, #0
   12210:	str	r0, [sp, #104]	; 0x68
   12214:	b	1221c <__assert_fail@plt+0x1164>
   12218:	ldr	r4, [sp, #112]	; 0x70
   1221c:	ldr	r2, [sp, #80]	; 0x50
   12220:	add	r0, r4, #1
   12224:	mov	r3, r7
   12228:	cmp	sl, #0
   1222c:	mov	r9, r4
   12230:	add	sl, sp, #240	; 0xf0
   12234:	udiv	r1, r0, r2
   12238:	mls	r7, r1, r2, r0
   1223c:	ldr	r0, [sp, #128]	; 0x80
   12240:	ldr	r1, [sp, #64]	; 0x40
   12244:	beq	1211c <__assert_fail@plt+0x1064>
   12248:	str	r0, [sp, #128]	; 0x80
   1224c:	mov	r0, #1
   12250:	cmp	r1, #0
   12254:	str	r0, [sp, #112]	; 0x70
   12258:	beq	125ac <__assert_fail@plt+0x14f4>
   1225c:	tst	r8, #1
   12260:	beq	125e4 <__assert_fail@plt+0x152c>
   12264:	ldr	r0, [sp, #108]	; 0x6c
   12268:	movw	r9, #8204	; 0x200c
   1226c:	adds	r0, r0, r1
   12270:	str	r0, [sp, #108]	; 0x6c
   12274:	ldr	r0, [sp, #104]	; 0x68
   12278:	adc	r0, r0, #0
   1227c:	str	r0, [sp, #104]	; 0x68
   12280:	mov	r0, r4
   12284:	ldr	r4, [sp, #96]	; 0x60
   12288:	ldr	r0, [r4, r0, lsl #2]
   1228c:	add	r0, r0, r6
   12290:	rsb	r6, r6, #8192	; 0x2000
   12294:	cmp	r1, r6
   12298:	bcc	122b0 <__assert_fail@plt+0x11f8>
   1229c:	mov	r8, r1
   122a0:	mov	r1, r6
   122a4:	bl	12fc4 <__assert_fail@plt+0x1f0c>
   122a8:	ldr	r0, [r4, r7, lsl #2]
   122ac:	sub	r1, r8, r6
   122b0:	bl	12fc4 <__assert_fail@plt+0x1f0c>
   122b4:	b	12624 <__assert_fail@plt+0x156c>
   122b8:	mov	r8, r5
   122bc:	ldr	r4, [sp, #56]	; 0x38
   122c0:	ldr	r5, [sp, #44]	; 0x2c
   122c4:	mov	r7, r9
   122c8:	mov	r0, r8
   122cc:	mov	r1, r7
   122d0:	bl	12fc4 <__assert_fail@plt+0x1f0c>
   122d4:	mov	r0, r6
   122d8:	mov	r1, r8
   122dc:	mov	r2, #8192	; 0x2000
   122e0:	bl	1510c <__assert_fail@plt+0x4054>
   122e4:	mov	r9, r0
   122e8:	adds	r4, r4, r7
   122ec:	add	r0, r0, #1
   122f0:	adc	r5, r5, #0
   122f4:	cmp	r0, #2
   122f8:	mov	r7, r9
   122fc:	bcs	122c8 <__assert_fail@plt+0x1210>
   12300:	ldr	r0, [sp, #60]	; 0x3c
   12304:	str	r5, [sp, #48]	; 0x30
   12308:	str	r4, [sp, #52]	; 0x34
   1230c:	mov	r5, r8
   12310:	str	r0, [sp, #104]	; 0x68
   12314:	mov	r0, r5
   12318:	movw	r4, #8196	; 0x2004
   1231c:	movw	r7, #8200	; 0x2008
   12320:	bl	131e8 <__assert_fail@plt+0x2130>
   12324:	cmn	r9, #1
   12328:	beq	1237c <__assert_fail@plt+0x12c4>
   1232c:	ldr	r3, [sp, #104]	; 0x68
   12330:	ldr	ip, [sp, #100]	; 0x64
   12334:	ldr	r0, [r3, r4]
   12338:	cmp	r0, #0
   1233c:	beq	123cc <__assert_fail@plt+0x1314>
   12340:	movw	r1, #37207	; 0x9157
   12344:	add	r0, r3, r0
   12348:	ldr	r2, [sp, #112]	; 0x70
   1234c:	ldr	r4, [sp, #60]	; 0x3c
   12350:	movt	r1, #2
   12354:	ldrb	r0, [r0, #-1]
   12358:	ldrb	r1, [r1]
   1235c:	cmp	r1, #0
   12360:	movwne	r1, #10
   12364:	cmp	r1, r0
   12368:	ldrne	r0, [r3, r7]!
   1236c:	addne	r2, r2, #1
   12370:	addne	r0, r0, #1
   12374:	strne	r0, [r3]
   12378:	b	123d4 <__assert_fail@plt+0x131c>
   1237c:	bl	10fec <__errno_location@plt>
   12380:	ldr	r4, [r0]
   12384:	movw	r1, #31419	; 0x7abb
   12388:	mov	r0, #0
   1238c:	mov	r2, #5
   12390:	str	r0, [sp, #112]	; 0x70
   12394:	mov	r0, #0
   12398:	movt	r1, #1
   1239c:	bl	10ed8 <dcgettext@plt>
   123a0:	ldr	r1, [sp, #92]	; 0x5c
   123a4:	mov	r7, r0
   123a8:	mov	r0, #4
   123ac:	bl	14aac <__assert_fail@plt+0x39f4>
   123b0:	mov	r3, r0
   123b4:	mov	r0, #0
   123b8:	mov	r1, r4
   123bc:	mov	r2, r7
   123c0:	bl	10f5c <error@plt>
   123c4:	movw	r9, #8204	; 0x200c
   123c8:	b	124f4 <__assert_fail@plt+0x143c>
   123cc:	ldr	r4, [sp, #60]	; 0x3c
   123d0:	ldr	r2, [sp, #112]	; 0x70
   123d4:	mov	r5, r4
   123d8:	ldr	r3, [sp, #128]	; 0x80
   123dc:	ldr	r0, [r5, r7]!
   123e0:	sub	r1, r2, r0
   123e4:	subs	r1, r3, r1
   123e8:	sbcs	r1, ip, #0
   123ec:	bcs	12458 <__assert_fail@plt+0x13a0>
   123f0:	ldr	r8, [sp, #128]	; 0x80
   123f4:	ldr	r9, [sp, #52]	; 0x34
   123f8:	ldr	sl, [sp, #48]	; 0x30
   123fc:	movw	r0, #8196	; 0x2004
   12400:	mov	r6, r2
   12404:	ldr	r7, [r4, r0]
   12408:	mov	r0, r4
   1240c:	mov	r1, r7
   12410:	bl	12fc4 <__assert_fail@plt+0x1f0c>
   12414:	movw	r0, #8204	; 0x200c
   12418:	mov	r2, r6
   1241c:	ldr	r1, [r5]
   12420:	ldr	ip, [sp, #100]	; 0x64
   12424:	adds	r9, r9, r7
   12428:	ldr	r4, [r4, r0]
   1242c:	movw	r0, #8200	; 0x2008
   12430:	adc	sl, sl, #0
   12434:	sub	r2, r2, r1
   12438:	mov	r6, r4
   1243c:	ldr	r0, [r6, r0]!
   12440:	sub	r1, r2, r0
   12444:	mov	r5, r6
   12448:	subs	r1, r8, r1
   1244c:	sbcs	r1, ip, #0
   12450:	bcc	123fc <__assert_fail@plt+0x1344>
   12454:	b	12468 <__assert_fail@plt+0x13b0>
   12458:	ldr	r8, [sp, #128]	; 0x80
   1245c:	ldr	r9, [sp, #52]	; 0x34
   12460:	ldr	sl, [sp, #48]	; 0x30
   12464:	mov	r6, r5
   12468:	mov	r1, #1
   1246c:	movw	r3, #8196	; 0x2004
   12470:	str	sl, [sp, #48]	; 0x30
   12474:	str	r9, [sp, #52]	; 0x34
   12478:	str	r1, [sp, #112]	; 0x70
   1247c:	subs	r1, r8, r2
   12480:	sbcs	r1, ip, #0
   12484:	bcs	124e8 <__assert_fail@plt+0x1430>
   12488:	subs	r1, r2, r8
   1248c:	add	sl, sp, #240	; 0xf0
   12490:	beq	125b4 <__assert_fail@plt+0x14fc>
   12494:	add	r7, r0, #1
   12498:	movw	r0, #37207	; 0x9157
   1249c:	sub	r5, r8, r2
   124a0:	ldr	r1, [r4, r3]
   124a4:	movt	r0, #2
   124a8:	ldrb	r8, [r0]
   124ac:	mov	r0, r4
   124b0:	add	r9, r4, r1
   124b4:	cmp	r8, #0
   124b8:	movwne	r8, #10
   124bc:	sub	r2, r9, r0
   124c0:	mov	r1, r8
   124c4:	bl	11034 <memchr@plt>
   124c8:	cmp	r0, #0
   124cc:	beq	12680 <__assert_fail@plt+0x15c8>
   124d0:	str	r7, [r6]
   124d4:	adds	r5, r5, #1
   124d8:	add	r7, r7, #1
   124dc:	add	r0, r0, #1
   124e0:	bne	124bc <__assert_fail@plt+0x1404>
   124e4:	b	12684 <__assert_fail@plt+0x15cc>
   124e8:	ldr	r6, [sp, #132]	; 0x84
   124ec:	movw	r9, #8204	; 0x200c
   124f0:	add	sl, sp, #240	; 0xf0
   124f4:	ldr	r8, [sp, #52]	; 0x34
   124f8:	ldr	r5, [sp, #48]	; 0x30
   124fc:	b	126ac <__assert_fail@plt+0x15f4>
   12500:	movw	r1, #31419	; 0x7abb
   12504:	mov	r0, #0
   12508:	mov	r2, #5
   1250c:	str	r0, [sp, #112]	; 0x70
   12510:	mov	r0, #0
   12514:	movt	r1, #1
   12518:	bl	10ed8 <dcgettext@plt>
   1251c:	ldr	r7, [sp, #92]	; 0x5c
   12520:	mov	r6, r0
   12524:	mov	r0, #4
   12528:	mov	r1, r7
   1252c:	bl	14aac <__assert_fail@plt+0x39f4>
   12530:	mov	r3, r0
   12534:	mov	r0, #0
   12538:	mov	r1, r4
   1253c:	mov	r2, r6
   12540:	bl	10f5c <error@plt>
   12544:	ldr	r6, [sp, #132]	; 0x84
   12548:	mov	r0, r8
   1254c:	bl	131e8 <__assert_fail@plt+0x2130>
   12550:	movw	r9, #8204	; 0x200c
   12554:	add	sl, sp, #240	; 0xf0
   12558:	b	12650 <__assert_fail@plt+0x1598>
   1255c:	movw	r1, #31419	; 0x7abb
   12560:	mov	r0, #0
   12564:	mov	r2, #5
   12568:	str	r0, [sp, #112]	; 0x70
   1256c:	mov	r0, #0
   12570:	movt	r1, #1
   12574:	bl	10ed8 <dcgettext@plt>
   12578:	ldr	r7, [sp, #92]	; 0x5c
   1257c:	mov	r6, r0
   12580:	mov	r0, #4
   12584:	mov	r1, r7
   12588:	bl	14aac <__assert_fail@plt+0x39f4>
   1258c:	mov	r3, r0
   12590:	mov	r0, #0
   12594:	mov	r1, r4
   12598:	mov	r2, r6
   1259c:	bl	10f5c <error@plt>
   125a0:	movw	r9, #8204	; 0x200c
   125a4:	add	sl, sp, #240	; 0xf0
   125a8:	b	12628 <__assert_fail@plt+0x1570>
   125ac:	movw	r9, #8204	; 0x200c
   125b0:	b	12624 <__assert_fail@plt+0x156c>
   125b4:	mov	r0, r4
   125b8:	b	12684 <__assert_fail@plt+0x15cc>
   125bc:	bl	10fec <__errno_location@plt>
   125c0:	ldr	r4, [r0]
   125c4:	movw	r1, #31419	; 0x7abb
   125c8:	mov	r0, #0
   125cc:	mov	r2, #5
   125d0:	str	r0, [sp, #112]	; 0x70
   125d4:	mov	r0, #0
   125d8:	movt	r1, #1
   125dc:	bl	10ed8 <dcgettext@plt>
   125e0:	b	12c1c <__assert_fail@plt+0x1b64>
   125e4:	ldr	r0, [sp, #68]	; 0x44
   125e8:	movw	r9, #8204	; 0x200c
   125ec:	cmp	r4, r0
   125f0:	bne	12624 <__assert_fail@plt+0x156c>
   125f4:	ldr	r0, [sp, #96]	; 0x60
   125f8:	ldr	r1, [sp, #24]
   125fc:	ldr	r0, [r0, r7, lsl #2]
   12600:	sub	r4, r6, r1
   12604:	mov	r1, r4
   12608:	bl	12fc4 <__assert_fail@plt+0x1f0c>
   1260c:	ldr	r0, [sp, #108]	; 0x6c
   12610:	adds	r0, r0, r4
   12614:	str	r0, [sp, #108]	; 0x6c
   12618:	ldr	r0, [sp, #104]	; 0x68
   1261c:	adc	r0, r0, #0
   12620:	str	r0, [sp, #104]	; 0x68
   12624:	ldr	r7, [sp, #92]	; 0x5c
   12628:	ldr	r6, [sp, #132]	; 0x84
   1262c:	cmp	r5, #0
   12630:	beq	12648 <__assert_fail@plt+0x1590>
   12634:	ldr	r4, [sp, #96]	; 0x60
   12638:	ldr	r0, [r4], #4
   1263c:	bl	131e8 <__assert_fail@plt+0x2130>
   12640:	subs	r5, r5, #1
   12644:	bne	12638 <__assert_fail@plt+0x1580>
   12648:	ldr	r0, [sp, #96]	; 0x60
   1264c:	bl	131e8 <__assert_fail@plt+0x2130>
   12650:	ldr	r0, [sp, #56]	; 0x38
   12654:	mvn	r4, #0
   12658:	subs	r0, r4, r0
   1265c:	ldr	r0, [sp, #44]	; 0x2c
   12660:	sbcs	r0, r4, r0
   12664:	bge	12c44 <__assert_fail@plt+0x1b8c>
   12668:	mov	r0, #0
   1266c:	stm	sp, {r0, r7}
   12670:	mov	r0, r6
   12674:	ldr	r2, [sp, #108]	; 0x6c
   12678:	ldr	r3, [sp, #104]	; 0x68
   1267c:	b	126fc <__assert_fail@plt+0x1644>
   12680:	mov	r0, #0
   12684:	sub	r7, r0, r4
   12688:	mov	r0, r4
   1268c:	mov	r1, r7
   12690:	bl	12fc4 <__assert_fail@plt+0x1f0c>
   12694:	ldr	r8, [sp, #52]	; 0x34
   12698:	ldr	r5, [sp, #48]	; 0x30
   1269c:	ldr	r6, [sp, #132]	; 0x84
   126a0:	movw	r9, #8204	; 0x200c
   126a4:	adds	r8, r8, r7
   126a8:	adc	r5, r5, r7, asr #31
   126ac:	ldr	r0, [sp, #60]	; 0x3c
   126b0:	cmp	r0, #0
   126b4:	beq	126cc <__assert_fail@plt+0x1614>
   126b8:	ldr	r4, [r0, r9]
   126bc:	bl	131e8 <__assert_fail@plt+0x2130>
   126c0:	cmp	r4, #0
   126c4:	mov	r0, r4
   126c8:	bne	126b8 <__assert_fail@plt+0x1600>
   126cc:	ldr	r0, [sp, #56]	; 0x38
   126d0:	mvn	r4, #0
   126d4:	ldr	r7, [sp, #92]	; 0x5c
   126d8:	subs	r0, r4, r0
   126dc:	ldr	r0, [sp, #44]	; 0x2c
   126e0:	sbcs	r0, r4, r0
   126e4:	bge	12c44 <__assert_fail@plt+0x1b8c>
   126e8:	mov	r0, #0
   126ec:	mov	r2, r8
   126f0:	mov	r3, r5
   126f4:	stm	sp, {r0, r7}
   126f8:	mov	r0, r6
   126fc:	bl	12f14 <__assert_fail@plt+0x1e5c>
   12700:	subs	r0, r4, r0
   12704:	sbcs	r0, r4, r1
   12708:	ldr	r1, [sp, #112]	; 0x70
   1270c:	mov	r0, #0
   12710:	movwlt	r0, #1
   12714:	and	r1, r1, r0
   12718:	str	r1, [sp, #112]	; 0x70
   1271c:	b	12c44 <__assert_fail@plt+0x1b8c>
   12720:	ldr	r4, [sp, #56]	; 0x38
   12724:	ldr	r5, [sp, #112]	; 0x70
   12728:	ldr	r3, [sp, #44]	; 0x2c
   1272c:	subs	r0, r4, r5
   12730:	sbcs	r0, r3, r9
   12734:	bge	127cc <__assert_fail@plt+0x1714>
   12738:	mov	r0, #0
   1273c:	ldr	r7, [sp, #92]	; 0x5c
   12740:	mov	r2, r4
   12744:	mov	r5, r3
   12748:	str	r0, [sp]
   1274c:	ldr	r0, [sp, #132]	; 0x84
   12750:	str	r7, [sp, #4]
   12754:	bl	12f14 <__assert_fail@plt+0x1e5c>
   12758:	cmp	r1, #0
   1275c:	blt	1283c <__assert_fail@plt+0x1784>
   12760:	ldr	r0, [sp, #112]	; 0x70
   12764:	add	r7, sp, #240	; 0xf0
   12768:	subs	r4, r0, r4
   1276c:	sbc	r5, r9, r5
   12770:	orrs	r0, r4, r5
   12774:	beq	127c8 <__assert_fail@plt+0x1710>
   12778:	subs	r0, r4, #8192	; 0x2000
   1277c:	mov	r2, #8192	; 0x2000
   12780:	mov	r1, r7
   12784:	sbcs	r0, r5, #0
   12788:	ldr	r0, [sp, #132]	; 0x84
   1278c:	movcc	r2, r4
   12790:	bl	1510c <__assert_fail@plt+0x4054>
   12794:	cmn	r0, #1
   12798:	beq	12844 <__assert_fail@plt+0x178c>
   1279c:	subs	r4, r4, r0
   127a0:	mov	r1, r0
   127a4:	sbc	r5, r5, #0
   127a8:	cmp	r0, #0
   127ac:	bne	127b8 <__assert_fail@plt+0x1700>
   127b0:	orrs	r0, r4, r5
   127b4:	bne	1284c <__assert_fail@plt+0x1794>
   127b8:	mov	r0, r7
   127bc:	bl	12fc4 <__assert_fail@plt+0x1f0c>
   127c0:	orrs	r0, r4, r5
   127c4:	bne	12778 <__assert_fail@plt+0x16c0>
   127c8:	ldr	r5, [sp, #112]	; 0x70
   127cc:	sub	lr, fp, #8192	; 0x2000
   127d0:	add	r1, r6, #1
   127d4:	sub	r0, lr, #32
   127d8:	bl	12fc4 <__assert_fail@plt+0x1f0c>
   127dc:	mov	r0, #0
   127e0:	ldr	r7, [sp, #92]	; 0x5c
   127e4:	str	r0, [sp]
   127e8:	adds	r0, r5, r6
   127ec:	adc	r1, r9, #0
   127f0:	adds	r2, r0, #1
   127f4:	ldr	r0, [sp, #132]	; 0x84
   127f8:	adc	r3, r1, #0
   127fc:	str	r7, [sp, #4]
   12800:	bl	12f14 <__assert_fail@plt+0x1e5c>
   12804:	mvn	r2, #0
   12808:	mov	r8, #0
   1280c:	subs	r0, r2, r0
   12810:	sbcs	r0, r2, r1
   12814:	movwlt	r8, #1
   12818:	b	1286c <__assert_fail@plt+0x17b4>
   1281c:	mov	r0, #1
   12820:	b	12828 <__assert_fail@plt+0x1770>
   12824:	mov	r0, #2
   12828:	mov	r1, r7
   1282c:	bl	13048 <__assert_fail@plt+0x1f90>
   12830:	mov	r0, #0
   12834:	str	r0, [sp, #112]	; 0x70
   12838:	b	12c44 <__assert_fail@plt+0x1b8c>
   1283c:	mov	r8, #0
   12840:	b	1286c <__assert_fail@plt+0x17b4>
   12844:	mov	r0, #1
   12848:	b	12850 <__assert_fail@plt+0x1798>
   1284c:	mov	r0, #2
   12850:	ldr	r7, [sp, #92]	; 0x5c
   12854:	mov	r1, r7
   12858:	bl	13048 <__assert_fail@plt+0x1f90>
   1285c:	mov	r8, #0
   12860:	b	1286c <__assert_fail@plt+0x17b4>
   12864:	ldr	r7, [sp, #92]	; 0x5c
   12868:	mov	r8, #1
   1286c:	str	r8, [sp, #112]	; 0x70
   12870:	movw	r9, #8204	; 0x200c
   12874:	add	sl, sp, #240	; 0xf0
   12878:	b	12c40 <__assert_fail@plt+0x1b88>
   1287c:	str	r1, [sp, #124]	; 0x7c
   12880:	movw	r1, #31853	; 0x7c6d
   12884:	mov	r0, r7
   12888:	str	r2, [sp, #120]	; 0x78
   1288c:	movt	r1, #1
   12890:	bl	10e60 <strcmp@plt>
   12894:	cmp	r0, #0
   12898:	str	r0, [sp, #116]	; 0x74
   1289c:	beq	128bc <__assert_fail@plt+0x1804>
   128a0:	mov	r0, r7
   128a4:	mov	r1, #0
   128a8:	bl	10f68 <open64@plt>
   128ac:	cmn	r0, #1
   128b0:	ble	12a5c <__assert_fail@plt+0x19a4>
   128b4:	mov	r6, r0
   128b8:	b	128e8 <__assert_fail@plt+0x1830>
   128bc:	movw	r1, #37205	; 0x9155
   128c0:	mov	r0, #1
   128c4:	mov	r2, #5
   128c8:	mov	r6, #0
   128cc:	movt	r1, #2
   128d0:	strb	r0, [r1]
   128d4:	movw	r1, #31261	; 0x7a1d
   128d8:	mov	r0, #0
   128dc:	movt	r1, #1
   128e0:	bl	10ed8 <dcgettext@plt>
   128e4:	mov	r7, r0
   128e8:	movw	r0, #37206	; 0x9156
   128ec:	movt	r0, #2
   128f0:	ldrb	r0, [r0]
   128f4:	cmp	r0, #1
   128f8:	bne	12940 <__assert_fail@plt+0x1888>
   128fc:	movw	r0, #37209	; 0x9159
   12900:	movw	r2, #31153	; 0x79b1
   12904:	movw	r1, #31338	; 0x7a6a
   12908:	mov	r3, r7
   1290c:	movt	r0, #2
   12910:	movt	r2, #1
   12914:	movt	r1, #1
   12918:	mov	r4, r0
   1291c:	ldrb	r0, [r0]
   12920:	cmp	r0, #0
   12924:	movw	r0, #31152	; 0x79b0
   12928:	movt	r0, #1
   1292c:	movne	r2, r0
   12930:	mov	r0, #1
   12934:	bl	11010 <__printf_chk@plt>
   12938:	mov	r0, #1
   1293c:	strb	r0, [r4]
   12940:	ldr	r0, [sp, #84]	; 0x54
   12944:	str	r7, [sp, #92]	; 0x5c
   12948:	str	r6, [sp, #132]	; 0x84
   1294c:	tst	r0, #1
   12950:	beq	129b8 <__assert_fail@plt+0x1900>
   12954:	mov	r0, #3
   12958:	mov	r1, r6
   1295c:	add	r2, sp, #136	; 0x88
   12960:	bl	10f14 <__fxstat64@plt>
   12964:	cmp	r0, #0
   12968:	beq	12ae4 <__assert_fail@plt+0x1a2c>
   1296c:	bl	10fec <__errno_location@plt>
   12970:	ldr	r4, [r0]
   12974:	movw	r1, #31322	; 0x7a5a
   12978:	mov	r0, #0
   1297c:	mov	r2, #5
   12980:	str	r0, [sp, #112]	; 0x70
   12984:	mov	r0, #0
   12988:	movt	r1, #1
   1298c:	bl	10ed8 <dcgettext@plt>
   12990:	mov	r5, r0
   12994:	mov	r0, #4
   12998:	mov	r1, r7
   1299c:	bl	14aac <__assert_fail@plt+0x39f4>
   129a0:	mov	r3, r0
   129a4:	mov	r0, #0
   129a8:	mov	r1, r4
   129ac:	mov	r2, r5
   129b0:	bl	10f5c <error@plt>
   129b4:	b	12c44 <__assert_fail@plt+0x1b8c>
   129b8:	ldr	r0, [sp, #76]	; 0x4c
   129bc:	ldr	r7, [sp, #100]	; 0x64
   129c0:	ldr	r5, [sp, #128]	; 0x80
   129c4:	tst	r0, #1
   129c8:	beq	12a78 <__assert_fail@plt+0x19c0>
   129cc:	orrs	r0, r5, r7
   129d0:	mov	r0, #1
   129d4:	str	r0, [sp, #112]	; 0x70
   129d8:	beq	12b58 <__assert_fail@plt+0x1aa0>
   129dc:	mov	r6, r7
   129e0:	ldr	r7, [sp, #92]	; 0x5c
   129e4:	ldr	r0, [sp, #132]	; 0x84
   129e8:	mov	r1, sl
   129ec:	mov	r2, #8192	; 0x2000
   129f0:	bl	1510c <__assert_fail@plt+0x4054>
   129f4:	cmn	r0, #1
   129f8:	beq	125bc <__assert_fail@plt+0x1504>
   129fc:	cmp	r0, #0
   12a00:	beq	12c40 <__assert_fail@plt+0x1b88>
   12a04:	movw	r1, #37207	; 0x9157
   12a08:	mov	r4, #0
   12a0c:	movt	r1, #2
   12a10:	ldrb	r1, [r1]
   12a14:	cmp	r1, #0
   12a18:	movwne	r1, #10
   12a1c:	ldrb	r2, [sl, r4]
   12a20:	cmp	r1, r2
   12a24:	bne	12a38 <__assert_fail@plt+0x1980>
   12a28:	subs	r5, r5, #1
   12a2c:	sbc	r6, r6, #0
   12a30:	orrs	r2, r5, r6
   12a34:	beq	12b60 <__assert_fail@plt+0x1aa8>
   12a38:	add	r4, r4, #1
   12a3c:	cmp	r0, r4
   12a40:	bhi	12a1c <__assert_fail@plt+0x1964>
   12a44:	mov	r0, sl
   12a48:	mov	r1, r4
   12a4c:	bl	12fc4 <__assert_fail@plt+0x1f0c>
   12a50:	orrs	r0, r5, r6
   12a54:	bne	129e4 <__assert_fail@plt+0x192c>
   12a58:	b	12c40 <__assert_fail@plt+0x1b88>
   12a5c:	bl	10fec <__errno_location@plt>
   12a60:	ldr	r4, [r0]
   12a64:	movw	r1, #31276	; 0x7a2c
   12a68:	mov	r6, #0
   12a6c:	mov	r0, #0
   12a70:	movt	r1, #1
   12a74:	b	12c7c <__assert_fail@plt+0x1bc4>
   12a78:	orrs	r0, r5, r7
   12a7c:	mov	r0, #1
   12a80:	str	r0, [sp, #112]	; 0x70
   12a84:	beq	12b58 <__assert_fail@plt+0x1aa0>
   12a88:	mov	r4, #8192	; 0x2000
   12a8c:	mov	r6, r5
   12a90:	subs	r0, r6, r4
   12a94:	mov	r1, sl
   12a98:	sbcs	r0, r7, #0
   12a9c:	ldr	r0, [sp, #132]	; 0x84
   12aa0:	movcc	r4, r6
   12aa4:	mov	r2, r4
   12aa8:	bl	1510c <__assert_fail@plt+0x4054>
   12aac:	cmp	r0, #0
   12ab0:	beq	12adc <__assert_fail@plt+0x1a24>
   12ab4:	mov	r5, r0
   12ab8:	cmn	r0, #1
   12abc:	beq	12bf4 <__assert_fail@plt+0x1b3c>
   12ac0:	mov	r0, sl
   12ac4:	mov	r1, r5
   12ac8:	bl	12fc4 <__assert_fail@plt+0x1f0c>
   12acc:	subs	r6, r6, r5
   12ad0:	sbc	r7, r7, #0
   12ad4:	orrs	r0, r6, r7
   12ad8:	bne	12a90 <__assert_fail@plt+0x19d8>
   12adc:	ldr	r7, [sp, #92]	; 0x5c
   12ae0:	b	12c40 <__assert_fail@plt+0x1b88>
   12ae4:	movw	r0, #37208	; 0x9158
   12ae8:	movt	r0, #2
   12aec:	ldrb	r1, [r0]
   12af0:	mov	r0, #1
   12af4:	cmp	r1, #0
   12af8:	mvn	r1, #0
   12afc:	str	r1, [sp, #56]	; 0x38
   12b00:	mvn	r1, #0
   12b04:	bne	11984 <__assert_fail@plt+0x8cc>
   12b08:	ldr	r0, [sp, #152]	; 0x98
   12b0c:	and	r0, r0, #53248	; 0xd000
   12b10:	orr	r0, r0, #8192	; 0x2000
   12b14:	cmp	r0, #40960	; 0xa000
   12b18:	bne	11974 <__assert_fail@plt+0x8bc>
   12b1c:	mov	r0, #1
   12b20:	mov	r2, #0
   12b24:	mov	r3, #0
   12b28:	stm	sp, {r0, r7}
   12b2c:	mov	r0, #0
   12b30:	str	r0, [sp, #112]	; 0x70
   12b34:	mov	r0, r6
   12b38:	bl	12f14 <__assert_fail@plt+0x1e5c>
   12b3c:	cmp	r1, #0
   12b40:	blt	12c44 <__assert_fail@plt+0x1b8c>
   12b44:	str	r0, [sp, #56]	; 0x38
   12b48:	movw	r0, #37208	; 0x9158
   12b4c:	movt	r0, #2
   12b50:	ldrb	r0, [r0]
   12b54:	b	11984 <__assert_fail@plt+0x8cc>
   12b58:	ldr	r7, [sp, #92]	; 0x5c
   12b5c:	b	12c44 <__assert_fail@plt+0x1b8c>
   12b60:	sub	r0, r0, #1
   12b64:	mov	r1, #1
   12b68:	sub	r0, r0, r4
   12b6c:	str	r1, [sp]
   12b70:	rsbs	r5, r0, #0
   12b74:	mov	r0, #0
   12b78:	sbc	r6, r0, #0
   12b7c:	ldr	r0, [sp, #132]	; 0x84
   12b80:	mov	r2, r5
   12b84:	mov	r3, r6
   12b88:	bl	10f2c <lseek64@plt>
   12b8c:	add	r4, r4, #1
   12b90:	cmn	r1, #1
   12b94:	bgt	12be4 <__assert_fail@plt+0x1b2c>
   12b98:	ldr	r1, [sp, #132]	; 0x84
   12b9c:	sub	lr, fp, #8192	; 0x2000
   12ba0:	mov	r0, #3
   12ba4:	sub	r2, lr, #32
   12ba8:	bl	10f14 <__fxstat64@plt>
   12bac:	cmp	r0, #0
   12bb0:	bne	12bcc <__assert_fail@plt+0x1b14>
   12bb4:	sub	lr, fp, #8192	; 0x2000
   12bb8:	sub	r0, lr, #32
   12bbc:	ldr	r0, [r0, #16]
   12bc0:	and	r0, r0, #61440	; 0xf000
   12bc4:	cmp	r0, #32768	; 0x8000
   12bc8:	bne	12be4 <__assert_fail@plt+0x1b2c>
   12bcc:	mov	r0, #1
   12bd0:	mov	r2, r5
   12bd4:	mov	r3, r6
   12bd8:	stm	sp, {r0, r7}
   12bdc:	ldr	r0, [sp, #132]	; 0x84
   12be0:	bl	12f14 <__assert_fail@plt+0x1e5c>
   12be4:	mov	r0, sl
   12be8:	mov	r1, r4
   12bec:	bl	12fc4 <__assert_fail@plt+0x1f0c>
   12bf0:	b	12c40 <__assert_fail@plt+0x1b88>
   12bf4:	bl	10fec <__errno_location@plt>
   12bf8:	ldr	r4, [r0]
   12bfc:	movw	r1, #31419	; 0x7abb
   12c00:	mov	r0, #0
   12c04:	mov	r2, #5
   12c08:	str	r0, [sp, #112]	; 0x70
   12c0c:	mov	r0, #0
   12c10:	movt	r1, #1
   12c14:	bl	10ed8 <dcgettext@plt>
   12c18:	ldr	r7, [sp, #92]	; 0x5c
   12c1c:	mov	r5, r0
   12c20:	mov	r0, #4
   12c24:	mov	r1, r7
   12c28:	bl	14aac <__assert_fail@plt+0x39f4>
   12c2c:	mov	r3, r0
   12c30:	mov	r0, #0
   12c34:	mov	r1, r4
   12c38:	mov	r2, r5
   12c3c:	bl	10f5c <error@plt>
   12c40:	ldr	r6, [sp, #132]	; 0x84
   12c44:	ldr	r0, [sp, #116]	; 0x74
   12c48:	cmp	r0, #0
   12c4c:	beq	12cac <__assert_fail@plt+0x1bf4>
   12c50:	mov	r0, r6
   12c54:	bl	110ac <close@plt>
   12c58:	ldr	r6, [sp, #112]	; 0x70
   12c5c:	cmp	r0, #0
   12c60:	beq	12cb0 <__assert_fail@plt+0x1bf8>
   12c64:	bl	10fec <__errno_location@plt>
   12c68:	ldr	r4, [r0]
   12c6c:	movw	r1, #31303	; 0x7a47
   12c70:	mov	r6, #0
   12c74:	mov	r0, #0
   12c78:	movt	r1, #1
   12c7c:	mov	r2, #5
   12c80:	bl	10ed8 <dcgettext@plt>
   12c84:	mov	r5, r0
   12c88:	mov	r0, #4
   12c8c:	mov	r1, r7
   12c90:	bl	14aac <__assert_fail@plt+0x39f4>
   12c94:	mov	r3, r0
   12c98:	mov	r0, #0
   12c9c:	mov	r1, r4
   12ca0:	mov	r2, r5
   12ca4:	bl	10f5c <error@plt>
   12ca8:	b	12cb0 <__assert_fail@plt+0x1bf8>
   12cac:	ldr	r6, [sp, #112]	; 0x70
   12cb0:	ldr	r2, [sp, #120]	; 0x78
   12cb4:	ldr	r0, [sp, #88]	; 0x58
   12cb8:	ldr	r1, [sp, #124]	; 0x7c
   12cbc:	add	r2, r2, #1
   12cc0:	and	r1, r1, r6
   12cc4:	ldr	r7, [r0, r2, lsl #2]
   12cc8:	cmp	r7, #0
   12ccc:	bne	1287c <__assert_fail@plt+0x17c4>
   12cd0:	eor	r6, r1, #1
   12cd4:	movw	r0, #37205	; 0x9155
   12cd8:	movt	r0, #2
   12cdc:	ldrb	r0, [r0]
   12ce0:	cmp	r0, #1
   12ce4:	bne	12cf8 <__assert_fail@plt+0x1c40>
   12ce8:	mov	r0, #0
   12cec:	bl	110ac <close@plt>
   12cf0:	cmn	r0, #1
   12cf4:	ble	12efc <__assert_fail@plt+0x1e44>
   12cf8:	mov	r0, r6
   12cfc:	sub	sp, fp, #28
   12d00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d04:	uxtb	r1, r3
   12d08:	cmp	r1, #0
   12d0c:	bne	12e3c <__assert_fail@plt+0x1d84>
   12d10:	tst	lr, #255	; 0xff
   12d14:	strb	lr, [r0]
   12d18:	mov	r2, #5
   12d1c:	mov	r7, #0
   12d20:	movne	r1, #0
   12d24:	strbne	r1, [r0, #1]
   12d28:	ands	r0, ip, #1
   12d2c:	movw	r1, #30688	; 0x77e0
   12d30:	str	r0, [sp, #76]	; 0x4c
   12d34:	movw	r0, #31167	; 0x79bf
   12d38:	movt	r1, #1
   12d3c:	movt	r0, #1
   12d40:	movne	r1, r0
   12d44:	mov	r0, #0
   12d48:	bl	10ed8 <dcgettext@plt>
   12d4c:	str	r0, [sp, #12]
   12d50:	ldr	r0, [sp, #128]	; 0x80
   12d54:	movw	r1, #31154	; 0x79b2
   12d58:	mvn	r2, #0
   12d5c:	mov	r3, #0
   12d60:	str	r7, [sp, #16]
   12d64:	movt	r1, #1
   12d68:	str	r2, [sp]
   12d6c:	str	r2, [sp, #4]
   12d70:	mov	r2, #0
   12d74:	str	r1, [sp, #8]
   12d78:	bl	15ec0 <__assert_fail@plt+0x4e08>
   12d7c:	str	r0, [sp, #128]	; 0x80
   12d80:	ldr	r0, [r6]
   12d84:	sub	r4, r4, #1
   12d88:	mov	sl, #1
   12d8c:	str	r0, [r6, #4]
   12d90:	b	116a4 <__assert_fail@plt+0x5ec>
   12d94:	cmn	r6, #3
   12d98:	bne	12df0 <__assert_fail@plt+0x1d38>
   12d9c:	movw	r0, #37104	; 0x90f0
   12da0:	movw	r2, #30668	; 0x77cc
   12da4:	mov	r1, #0
   12da8:	movw	r7, #30652	; 0x77bc
   12dac:	movt	r0, #2
   12db0:	movt	r2, #1
   12db4:	str	r1, [sp, #8]
   12db8:	movw	r1, #30561	; 0x7761
   12dbc:	movt	r7, #1
   12dc0:	ldr	r3, [r0]
   12dc4:	movw	r0, #37196	; 0x914c
   12dc8:	str	r2, [sp, #4]
   12dcc:	movw	r2, #30638	; 0x77ae
   12dd0:	movt	r1, #1
   12dd4:	str	r7, [sp]
   12dd8:	movt	r0, #2
   12ddc:	movt	r2, #1
   12de0:	ldr	r0, [r0]
   12de4:	bl	155f4 <__assert_fail@plt+0x453c>
   12de8:	mov	r0, #0
   12dec:	bl	10fbc <exit@plt>
   12df0:	cmn	r6, #2
   12df4:	bne	12e00 <__assert_fail@plt+0x1d48>
   12df8:	mov	r0, #0
   12dfc:	bl	111b4 <__assert_fail@plt+0xfc>
   12e00:	sub	r0, r6, #48	; 0x30
   12e04:	cmp	r0, #9
   12e08:	bhi	12e34 <__assert_fail@plt+0x1d7c>
   12e0c:	movw	r1, #30590	; 0x777e
   12e10:	mov	r0, #0
   12e14:	mov	r2, #5
   12e18:	movt	r1, #1
   12e1c:	bl	10ed8 <dcgettext@plt>
   12e20:	mov	r2, r0
   12e24:	mov	r0, #0
   12e28:	mov	r1, #0
   12e2c:	mov	r3, r6
   12e30:	bl	10f5c <error@plt>
   12e34:	mov	r0, #1
   12e38:	bl	111b4 <__assert_fail@plt+0xfc>
   12e3c:	movw	r1, #30590	; 0x777e
   12e40:	mov	r0, #0
   12e44:	mov	r2, #5
   12e48:	movt	r1, #1
   12e4c:	bl	10ed8 <dcgettext@plt>
   12e50:	ldrb	r3, [r7]
   12e54:	mov	r2, r0
   12e58:	mov	r0, #0
   12e5c:	mov	r1, #0
   12e60:	bl	10f5c <error@plt>
   12e64:	mov	r0, #1
   12e68:	bl	111b4 <__assert_fail@plt+0xfc>
   12e6c:	movw	r1, #31498	; 0x7b0a
   12e70:	mov	r0, #0
   12e74:	mov	r2, #5
   12e78:	movt	r1, #1
   12e7c:	bl	10ed8 <dcgettext@plt>
   12e80:	mov	r4, r0
   12e84:	ldr	r0, [sp, #128]	; 0x80
   12e88:	ldr	r1, [sp, #100]	; 0x64
   12e8c:	sub	lr, fp, #8192	; 0x2000
   12e90:	sub	r2, lr, #32
   12e94:	bl	13344 <__assert_fail@plt+0x228c>
   12e98:	mov	r3, r0
   12e9c:	mov	r0, #1
   12ea0:	mov	r1, #0
   12ea4:	mov	r2, r4
   12ea8:	bl	10f5c <error@plt>
   12eac:	movw	r1, #30688	; 0x77e0
   12eb0:	mov	r0, #0
   12eb4:	mov	r2, #5
   12eb8:	mov	r5, r3
   12ebc:	movt	r1, #1
   12ec0:	bl	10ed8 <dcgettext@plt>
   12ec4:	mov	r4, r0
   12ec8:	ldr	r0, [sp, #128]	; 0x80
   12ecc:	sub	lr, fp, #8192	; 0x2000
   12ed0:	mov	r1, r5
   12ed4:	sub	r2, lr, #32
   12ed8:	bl	13344 <__assert_fail@plt+0x228c>
   12edc:	bl	14fd4 <__assert_fail@plt+0x3f1c>
   12ee0:	movw	r2, #30681	; 0x77d9
   12ee4:	str	r0, [sp]
   12ee8:	mov	r0, #1
   12eec:	mov	r1, #75	; 0x4b
   12ef0:	mov	r3, r4
   12ef4:	movt	r2, #1
   12ef8:	bl	10f5c <error@plt>
   12efc:	bl	10fec <__errno_location@plt>
   12f00:	ldr	r1, [r0]
   12f04:	movw	r2, #31853	; 0x7c6d
   12f08:	mov	r0, #1
   12f0c:	movt	r2, #1
   12f10:	bl	10f5c <error@plt>
   12f14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f18:	add	fp, sp, #28
   12f1c:	sub	sp, sp, #28
   12f20:	ldr	r8, [fp, #8]
   12f24:	mov	r6, r3
   12f28:	mov	r7, r2
   12f2c:	str	r8, [sp]
   12f30:	bl	10f2c <lseek64@plt>
   12f34:	mov	r9, r0
   12f38:	mov	r5, r1
   12f3c:	cmn	r1, #1
   12f40:	bgt	12fb4 <__assert_fail@plt+0x1efc>
   12f44:	movw	r0, #31352	; 0x7a78
   12f48:	movw	r4, #31381	; 0x7a95
   12f4c:	cmp	r8, #0
   12f50:	movt	r0, #1
   12f54:	movt	r4, #1
   12f58:	moveq	r4, r0
   12f5c:	bl	10fec <__errno_location@plt>
   12f60:	ldr	sl, [r0]
   12f64:	mov	r0, #0
   12f68:	mov	r1, r4
   12f6c:	mov	r2, #5
   12f70:	bl	10ed8 <dcgettext@plt>
   12f74:	ldr	r2, [fp, #12]
   12f78:	mov	r8, r0
   12f7c:	mov	r0, #0
   12f80:	mov	r1, #3
   12f84:	bl	14d28 <__assert_fail@plt+0x3c70>
   12f88:	mov	r4, r0
   12f8c:	add	r2, sp, #7
   12f90:	mov	r0, r7
   12f94:	mov	r1, r6
   12f98:	bl	13284 <__assert_fail@plt+0x21cc>
   12f9c:	str	r0, [sp]
   12fa0:	mov	r0, #0
   12fa4:	mov	r1, sl
   12fa8:	mov	r2, r8
   12fac:	mov	r3, r4
   12fb0:	bl	10f5c <error@plt>
   12fb4:	mov	r0, r9
   12fb8:	mov	r1, r5
   12fbc:	sub	sp, fp, #28
   12fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fc4:	push	{r4, r5, fp, lr}
   12fc8:	add	fp, sp, #8
   12fcc:	cmp	r1, #0
   12fd0:	popeq	{r4, r5, fp, pc}
   12fd4:	movw	r5, #37196	; 0x914c
   12fd8:	mov	r4, r1
   12fdc:	mov	r1, #1
   12fe0:	movt	r5, #2
   12fe4:	mov	r2, r4
   12fe8:	ldr	r3, [r5]
   12fec:	bl	10ec0 <fwrite_unlocked@plt>
   12ff0:	cmp	r0, r4
   12ff4:	bcc	12ffc <__assert_fail@plt+0x1f44>
   12ff8:	pop	{r4, r5, fp, pc}
   12ffc:	ldr	r0, [r5]
   13000:	bl	1107c <clearerr_unlocked@plt>
   13004:	bl	10fec <__errno_location@plt>
   13008:	ldr	r4, [r0]
   1300c:	movw	r1, #31436	; 0x7acc
   13010:	mov	r0, #0
   13014:	mov	r2, #5
   13018:	movt	r1, #1
   1301c:	bl	10ed8 <dcgettext@plt>
   13020:	movw	r1, #31453	; 0x7add
   13024:	mov	r5, r0
   13028:	mov	r0, #4
   1302c:	movt	r1, #1
   13030:	bl	14aac <__assert_fail@plt+0x39f4>
   13034:	mov	r3, r0
   13038:	mov	r0, #1
   1303c:	mov	r1, r4
   13040:	mov	r2, r5
   13044:	bl	10f5c <error@plt>
   13048:	push	{r4, r5, r6, sl, fp, lr}
   1304c:	add	fp, sp, #16
   13050:	mov	r4, r1
   13054:	cmp	r0, #2
   13058:	beq	13094 <__assert_fail@plt+0x1fdc>
   1305c:	cmp	r0, #1
   13060:	bne	130dc <__assert_fail@plt+0x2024>
   13064:	bl	10fec <__errno_location@plt>
   13068:	ldr	r5, [r0]
   1306c:	movw	r1, #31419	; 0x7abb
   13070:	mov	r0, #0
   13074:	mov	r2, #5
   13078:	movt	r1, #1
   1307c:	bl	10ed8 <dcgettext@plt>
   13080:	mov	r6, r0
   13084:	mov	r0, #4
   13088:	mov	r1, r4
   1308c:	bl	14aac <__assert_fail@plt+0x39f4>
   13090:	b	130c4 <__assert_fail@plt+0x200c>
   13094:	bl	10fec <__errno_location@plt>
   13098:	ldr	r5, [r0]
   1309c:	movw	r1, #31469	; 0x7aed
   130a0:	mov	r0, #0
   130a4:	mov	r2, #5
   130a8:	movt	r1, #1
   130ac:	bl	10ed8 <dcgettext@plt>
   130b0:	mov	r6, r0
   130b4:	mov	r0, #0
   130b8:	mov	r1, #3
   130bc:	mov	r2, r4
   130c0:	bl	14d28 <__assert_fail@plt+0x3c70>
   130c4:	mov	r3, r0
   130c8:	mov	r0, #0
   130cc:	mov	r1, r5
   130d0:	mov	r2, r6
   130d4:	pop	{r4, r5, r6, sl, fp, lr}
   130d8:	b	10f5c <error@plt>
   130dc:	bl	110a0 <abort@plt>
   130e0:	movw	r1, #37212	; 0x915c
   130e4:	movt	r1, #2
   130e8:	str	r0, [r1]
   130ec:	bx	lr
   130f0:	movw	r1, #37216	; 0x9160
   130f4:	movt	r1, #2
   130f8:	strb	r0, [r1]
   130fc:	bx	lr
   13100:	push	{r4, r5, r6, sl, fp, lr}
   13104:	add	fp, sp, #16
   13108:	sub	sp, sp, #8
   1310c:	movw	r0, #37196	; 0x914c
   13110:	movt	r0, #2
   13114:	ldr	r0, [r0]
   13118:	bl	16c40 <__assert_fail@plt+0x5b88>
   1311c:	cmp	r0, #0
   13120:	beq	13148 <__assert_fail@plt+0x2090>
   13124:	movw	r0, #37216	; 0x9160
   13128:	movt	r0, #2
   1312c:	ldrb	r0, [r0]
   13130:	cmp	r0, #0
   13134:	beq	13168 <__assert_fail@plt+0x20b0>
   13138:	bl	10fec <__errno_location@plt>
   1313c:	ldr	r0, [r0]
   13140:	cmp	r0, #32
   13144:	bne	13168 <__assert_fail@plt+0x20b0>
   13148:	movw	r0, #37192	; 0x9148
   1314c:	movt	r0, #2
   13150:	ldr	r0, [r0]
   13154:	bl	16c40 <__assert_fail@plt+0x5b88>
   13158:	cmp	r0, #0
   1315c:	subeq	sp, fp, #16
   13160:	popeq	{r4, r5, r6, sl, fp, pc}
   13164:	b	131d8 <__assert_fail@plt+0x2120>
   13168:	movw	r1, #31775	; 0x7c1f
   1316c:	mov	r0, #0
   13170:	mov	r2, #5
   13174:	movt	r1, #1
   13178:	bl	10ed8 <dcgettext@plt>
   1317c:	mov	r4, r0
   13180:	movw	r0, #37212	; 0x915c
   13184:	movt	r0, #2
   13188:	ldr	r6, [r0]
   1318c:	bl	10fec <__errno_location@plt>
   13190:	ldr	r5, [r0]
   13194:	cmp	r6, #0
   13198:	bne	131b4 <__assert_fail@plt+0x20fc>
   1319c:	movw	r2, #30685	; 0x77dd
   131a0:	mov	r0, #0
   131a4:	mov	r1, r5
   131a8:	mov	r3, r4
   131ac:	movt	r2, #1
   131b0:	b	131d4 <__assert_fail@plt+0x211c>
   131b4:	mov	r0, r6
   131b8:	bl	14c4c <__assert_fail@plt+0x3b94>
   131bc:	movw	r2, #30681	; 0x77d9
   131c0:	mov	r3, r0
   131c4:	str	r4, [sp]
   131c8:	mov	r0, #0
   131cc:	mov	r1, r5
   131d0:	movt	r2, #1
   131d4:	bl	10f5c <error@plt>
   131d8:	movw	r0, #37108	; 0x90f4
   131dc:	movt	r0, #2
   131e0:	ldr	r0, [r0]
   131e4:	bl	10e90 <_exit@plt>
   131e8:	push	{r4, r5, r6, sl, fp, lr}
   131ec:	add	fp, sp, #16
   131f0:	mov	r4, r0
   131f4:	bl	10fec <__errno_location@plt>
   131f8:	ldr	r6, [r0]
   131fc:	mov	r5, r0
   13200:	mov	r0, r4
   13204:	bl	10e84 <free@plt>
   13208:	str	r6, [r5]
   1320c:	pop	{r4, r5, r6, sl, fp, pc}
   13210:	push	{r4, r5, r6, r7, fp, lr}
   13214:	add	fp, sp, #16
   13218:	cmp	r2, #0
   1321c:	moveq	r4, #0
   13220:	moveq	r0, r4
   13224:	popeq	{r4, r5, r6, r7, fp, pc}
   13228:	mov	r5, r2
   1322c:	mov	r6, r1
   13230:	mov	r7, r0
   13234:	mov	r4, #0
   13238:	mov	r0, r7
   1323c:	mov	r1, r6
   13240:	mov	r2, r5
   13244:	bl	1510c <__assert_fail@plt+0x4054>
   13248:	cmn	r0, #1
   1324c:	beq	13268 <__assert_fail@plt+0x21b0>
   13250:	cmp	r0, #0
   13254:	beq	13270 <__assert_fail@plt+0x21b8>
   13258:	subs	r5, r5, r0
   1325c:	add	r6, r6, r0
   13260:	add	r4, r0, r4
   13264:	bne	13238 <__assert_fail@plt+0x2180>
   13268:	mov	r0, r4
   1326c:	pop	{r4, r5, r6, r7, fp, pc}
   13270:	bl	10fec <__errno_location@plt>
   13274:	mov	r1, #0
   13278:	str	r1, [r0]
   1327c:	mov	r0, r4
   13280:	pop	{r4, r5, r6, r7, fp, pc}
   13284:	push	{r4, r5, r6, sl, fp, lr}
   13288:	add	fp, sp, #16
   1328c:	mov	r5, r0
   13290:	mov	r0, #0
   13294:	mov	r4, r1
   13298:	add	r6, r2, #19
   1329c:	cmp	r1, #0
   132a0:	strb	r0, [r2, #20]
   132a4:	blt	132f4 <__assert_fail@plt+0x223c>
   132a8:	mov	r0, r5
   132ac:	mov	r1, r4
   132b0:	mov	r2, #10
   132b4:	mov	r3, #0
   132b8:	bl	1703c <__assert_fail@plt+0x5f84>
   132bc:	add	r2, r0, r0, lsl #2
   132c0:	sub	r2, r5, r2, lsl #1
   132c4:	add	r2, r2, #48	; 0x30
   132c8:	strb	r2, [r6], #-1
   132cc:	adds	r2, r5, #9
   132d0:	mov	r5, r0
   132d4:	adc	r3, r4, #0
   132d8:	rsbs	r2, r2, #18
   132dc:	mov	r4, r1
   132e0:	rscs	r2, r3, #0
   132e4:	bcc	132a8 <__assert_fail@plt+0x21f0>
   132e8:	add	r6, r6, #1
   132ec:	mov	r0, r6
   132f0:	pop	{r4, r5, r6, sl, fp, pc}
   132f4:	mov	r0, r5
   132f8:	mov	r1, r4
   132fc:	mov	r2, #10
   13300:	mov	r3, #0
   13304:	bl	1703c <__assert_fail@plt+0x5f84>
   13308:	add	r2, r0, r0, lsl #2
   1330c:	rsb	r2, r5, r2, lsl #1
   13310:	add	r2, r2, #48	; 0x30
   13314:	strb	r2, [r6], #-1
   13318:	adds	r2, r5, #9
   1331c:	mov	r5, r0
   13320:	adc	r3, r4, #0
   13324:	rsbs	r2, r2, #18
   13328:	mov	r4, r1
   1332c:	rscs	r2, r3, #0
   13330:	bcc	132f4 <__assert_fail@plt+0x223c>
   13334:	mov	r0, #45	; 0x2d
   13338:	strb	r0, [r6]
   1333c:	mov	r0, r6
   13340:	pop	{r4, r5, r6, sl, fp, pc}
   13344:	push	{r4, r5, r6, sl, fp, lr}
   13348:	add	fp, sp, #16
   1334c:	mov	r5, r0
   13350:	mov	r0, #0
   13354:	mov	r4, r1
   13358:	add	r6, r2, #19
   1335c:	strb	r0, [r2, #20]
   13360:	mov	r0, r5
   13364:	mov	r1, r4
   13368:	mov	r2, #10
   1336c:	mov	r3, #0
   13370:	bl	17110 <__assert_fail@plt+0x6058>
   13374:	add	r2, r0, r0, lsl #2
   13378:	sub	r2, r5, r2, lsl #1
   1337c:	orr	r2, r2, #48	; 0x30
   13380:	strb	r2, [r6], #-1
   13384:	rsbs	r2, r5, #9
   13388:	mov	r5, r0
   1338c:	rscs	r2, r4, #0
   13390:	mov	r4, r1
   13394:	bcc	13360 <__assert_fail@plt+0x22a8>
   13398:	add	r0, r6, #1
   1339c:	pop	{r4, r5, r6, sl, fp, pc}
   133a0:	push	{r4, r5, fp, lr}
   133a4:	add	fp, sp, #8
   133a8:	cmp	r0, #0
   133ac:	beq	13440 <__assert_fail@plt+0x2388>
   133b0:	mov	r1, #47	; 0x2f
   133b4:	mov	r4, r0
   133b8:	bl	11064 <strrchr@plt>
   133bc:	cmp	r0, #0
   133c0:	mov	r5, r4
   133c4:	addne	r5, r0, #1
   133c8:	sub	r0, r5, r4
   133cc:	cmp	r0, #7
   133d0:	blt	13424 <__assert_fail@plt+0x236c>
   133d4:	movw	r1, #31843	; 0x7c63
   133d8:	sub	r0, r5, #7
   133dc:	mov	r2, #7
   133e0:	movt	r1, #1
   133e4:	bl	11094 <strncmp@plt>
   133e8:	cmp	r0, #0
   133ec:	bne	13424 <__assert_fail@plt+0x236c>
   133f0:	movw	r1, #31851	; 0x7c6b
   133f4:	mov	r0, r5
   133f8:	mov	r2, #3
   133fc:	movt	r1, #1
   13400:	bl	11094 <strncmp@plt>
   13404:	cmp	r0, #0
   13408:	beq	13414 <__assert_fail@plt+0x235c>
   1340c:	mov	r4, r5
   13410:	b	13424 <__assert_fail@plt+0x236c>
   13414:	movw	r0, #37176	; 0x9138
   13418:	add	r4, r5, #3
   1341c:	movt	r0, #2
   13420:	str	r4, [r0]
   13424:	movw	r0, #37180	; 0x913c
   13428:	movt	r0, #2
   1342c:	str	r4, [r0]
   13430:	movw	r0, #37220	; 0x9164
   13434:	movt	r0, #2
   13438:	str	r4, [r0]
   1343c:	pop	{r4, r5, fp, pc}
   13440:	movw	r0, #37192	; 0x9148
   13444:	mov	r1, #55	; 0x37
   13448:	mov	r2, #1
   1344c:	movt	r0, #2
   13450:	ldr	r3, [r0]
   13454:	movw	r0, #31787	; 0x7c2b
   13458:	movt	r0, #1
   1345c:	bl	10f20 <fwrite@plt>
   13460:	bl	110a0 <abort@plt>
   13464:	push	{r4, r5, r6, sl, fp, lr}
   13468:	add	fp, sp, #16
   1346c:	mov	r4, r0
   13470:	movw	r0, #37224	; 0x9168
   13474:	movt	r0, #2
   13478:	cmp	r4, #0
   1347c:	moveq	r4, r0
   13480:	bl	10fec <__errno_location@plt>
   13484:	ldr	r6, [r0]
   13488:	mov	r5, r0
   1348c:	mov	r0, r4
   13490:	mov	r1, #48	; 0x30
   13494:	bl	15c88 <__assert_fail@plt+0x4bd0>
   13498:	str	r6, [r5]
   1349c:	pop	{r4, r5, r6, sl, fp, pc}
   134a0:	movw	r1, #37224	; 0x9168
   134a4:	cmp	r0, #0
   134a8:	movt	r1, #2
   134ac:	movne	r1, r0
   134b0:	ldr	r0, [r1]
   134b4:	bx	lr
   134b8:	movw	r2, #37224	; 0x9168
   134bc:	cmp	r0, #0
   134c0:	movt	r2, #2
   134c4:	movne	r2, r0
   134c8:	str	r1, [r2]
   134cc:	bx	lr
   134d0:	movw	r3, #37224	; 0x9168
   134d4:	cmp	r0, #0
   134d8:	movt	r3, #2
   134dc:	movne	r3, r0
   134e0:	ubfx	r0, r1, #5, #3
   134e4:	and	r1, r1, #31
   134e8:	add	r0, r3, r0, lsl #2
   134ec:	ldr	r3, [r0, #8]
   134f0:	eor	r2, r2, r3, lsr r1
   134f4:	and	r2, r2, #1
   134f8:	eor	r2, r3, r2, lsl r1
   134fc:	str	r2, [r0, #8]
   13500:	mov	r0, #1
   13504:	and	r0, r0, r3, lsr r1
   13508:	bx	lr
   1350c:	movw	r2, #37224	; 0x9168
   13510:	cmp	r0, #0
   13514:	movt	r2, #2
   13518:	movne	r2, r0
   1351c:	ldr	r0, [r2, #4]
   13520:	str	r1, [r2, #4]
   13524:	bx	lr
   13528:	movw	r3, #37224	; 0x9168
   1352c:	cmp	r0, #0
   13530:	movt	r3, #2
   13534:	movne	r3, r0
   13538:	cmp	r1, #0
   1353c:	mov	r0, #10
   13540:	cmpne	r2, #0
   13544:	str	r0, [r3]
   13548:	bne	13558 <__assert_fail@plt+0x24a0>
   1354c:	push	{fp, lr}
   13550:	mov	fp, sp
   13554:	bl	110a0 <abort@plt>
   13558:	str	r1, [r3, #40]	; 0x28
   1355c:	str	r2, [r3, #44]	; 0x2c
   13560:	bx	lr
   13564:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13568:	add	fp, sp, #28
   1356c:	sub	sp, sp, #20
   13570:	mov	r7, r0
   13574:	ldr	r0, [fp, #8]
   13578:	movw	r5, #37224	; 0x9168
   1357c:	mov	r8, r3
   13580:	mov	r9, r2
   13584:	mov	sl, r1
   13588:	movt	r5, #2
   1358c:	cmp	r0, #0
   13590:	movne	r5, r0
   13594:	bl	10fec <__errno_location@plt>
   13598:	mov	r4, r0
   1359c:	ldm	r5, {r0, r1}
   135a0:	ldr	r2, [r5, #40]	; 0x28
   135a4:	ldr	r3, [r5, #44]	; 0x2c
   135a8:	add	r5, r5, #8
   135ac:	ldr	r6, [r4]
   135b0:	stm	sp, {r0, r1, r5}
   135b4:	str	r2, [sp, #12]
   135b8:	str	r3, [sp, #16]
   135bc:	mov	r0, r7
   135c0:	mov	r1, sl
   135c4:	mov	r2, r9
   135c8:	mov	r3, r8
   135cc:	bl	135dc <__assert_fail@plt+0x2524>
   135d0:	str	r6, [r4]
   135d4:	sub	sp, fp, #28
   135d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135e0:	add	fp, sp, #28
   135e4:	sub	sp, sp, #156	; 0x9c
   135e8:	str	r0, [sp, #80]	; 0x50
   135ec:	ldr	r0, [fp, #12]
   135f0:	mov	r6, r1
   135f4:	mov	r9, r3
   135f8:	str	r2, [fp, #-84]	; 0xffffffac
   135fc:	and	r1, r0, #4
   13600:	str	r1, [sp, #32]
   13604:	and	r1, r0, #1
   13608:	str	r1, [sp, #36]	; 0x24
   1360c:	ubfx	r4, r0, #1, #1
   13610:	bl	10f38 <__ctype_get_mb_cur_max@plt>
   13614:	str	r0, [sp, #40]	; 0x28
   13618:	ldr	r0, [fp, #24]
   1361c:	ldr	r7, [fp, #8]
   13620:	mov	r1, #0
   13624:	mov	r5, #1
   13628:	str	r1, [fp, #-56]	; 0xffffffc8
   1362c:	mov	r1, #0
   13630:	str	r1, [sp, #60]	; 0x3c
   13634:	str	r0, [sp, #76]	; 0x4c
   13638:	ldr	r0, [fp, #20]
   1363c:	str	r0, [sp, #72]	; 0x48
   13640:	mov	r0, #0
   13644:	str	r0, [sp, #56]	; 0x38
   13648:	mov	r0, #0
   1364c:	str	r0, [sp, #92]	; 0x5c
   13650:	mov	r0, #0
   13654:	str	r0, [fp, #-76]	; 0xffffffb4
   13658:	mov	r0, #0
   1365c:	cmp	r7, #10
   13660:	bhi	145e0 <__assert_fail@plt+0x3528>
   13664:	add	r1, pc, #28
   13668:	mov	sl, r6
   1366c:	ldr	r6, [sp, #80]	; 0x50
   13670:	ldr	ip, [fp, #-84]	; 0xffffffac
   13674:	mov	r8, #0
   13678:	mov	r2, #1
   1367c:	mov	r3, #0
   13680:	mov	lr, r9
   13684:	ldr	pc, [r1, r7, lsl #2]
   13688:	andeq	r3, r1, ip, ror #14
   1368c:	muleq	r1, r8, r7
   13690:	andeq	r3, r1, ip, asr r7
   13694:	andeq	r3, r1, r4, asr r7
   13698:	andeq	r3, r1, ip, lsl #15
   1369c:	andeq	r3, r1, r0, ror #15
   136a0:	andeq	r3, r1, ip, ror r7
   136a4:	andeq	r3, r1, ip, lsr r8
   136a8:			; <UNDEFINED> instruction: 0x000136b4
   136ac:			; <UNDEFINED> instruction: 0x000136b4
   136b0:	ldrdeq	r3, [r1], -ip
   136b4:	movw	r0, #31933	; 0x7cbd
   136b8:	mov	r1, r7
   136bc:	movt	r0, #1
   136c0:	bl	14fec <__assert_fail@plt+0x3f34>
   136c4:	str	r0, [sp, #72]	; 0x48
   136c8:	movw	r0, #31935	; 0x7cbf
   136cc:	mov	r1, r7
   136d0:	movt	r0, #1
   136d4:	bl	14fec <__assert_fail@plt+0x3f34>
   136d8:	str	r0, [sp, #76]	; 0x4c
   136dc:	str	r5, [fp, #-48]	; 0xffffffd0
   136e0:	mov	r8, #0
   136e4:	mov	r5, r7
   136e8:	tst	r4, #1
   136ec:	bne	13724 <__assert_fail@plt+0x266c>
   136f0:	ldr	r0, [sp, #72]	; 0x48
   136f4:	ldrb	r0, [r0]
   136f8:	cmp	r0, #0
   136fc:	beq	13724 <__assert_fail@plt+0x266c>
   13700:	ldr	r1, [sp, #72]	; 0x48
   13704:	mov	r8, #0
   13708:	add	r1, r1, #1
   1370c:	cmp	r8, sl
   13710:	strbcc	r0, [r6, r8]
   13714:	ldrb	r0, [r1, r8]
   13718:	add	r8, r8, #1
   1371c:	cmp	r0, #0
   13720:	bne	1370c <__assert_fail@plt+0x2654>
   13724:	ldr	r7, [sp, #76]	; 0x4c
   13728:	mov	r0, r7
   1372c:	bl	10fc8 <strlen@plt>
   13730:	str	r7, [sp, #92]	; 0x5c
   13734:	mov	r7, r5
   13738:	ldr	ip, [fp, #-84]	; 0xffffffac
   1373c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13740:	str	r0, [fp, #-76]	; 0xffffffb4
   13744:	mov	r2, #1
   13748:	mov	r3, r4
   1374c:	mov	lr, r9
   13750:	b	1383c <__assert_fail@plt+0x2784>
   13754:	mov	r0, #1
   13758:	b	13798 <__assert_fail@plt+0x26e0>
   1375c:	tst	r4, #1
   13760:	bne	13798 <__assert_fail@plt+0x26e0>
   13764:	mov	r2, r0
   13768:	b	137c0 <__assert_fail@plt+0x2708>
   1376c:	mov	r7, #0
   13770:	mov	r8, #0
   13774:	mov	r2, r0
   13778:	b	13838 <__assert_fail@plt+0x2780>
   1377c:	mov	r0, #1
   13780:	mov	r8, #0
   13784:	mov	r7, #5
   13788:	b	137f4 <__assert_fail@plt+0x273c>
   1378c:	mov	r2, #1
   13790:	tst	r4, #1
   13794:	beq	137c0 <__assert_fail@plt+0x2708>
   13798:	mov	r1, #1
   1379c:	mov	r8, #0
   137a0:	mov	r7, #2
   137a4:	mov	r2, r0
   137a8:	mov	r3, #1
   137ac:	str	r1, [fp, #-76]	; 0xffffffb4
   137b0:	movw	r1, #31935	; 0x7cbf
   137b4:	movt	r1, #1
   137b8:	str	r1, [sp, #92]	; 0x5c
   137bc:	b	1383c <__assert_fail@plt+0x2784>
   137c0:	cmp	sl, #0
   137c4:	mov	r8, #1
   137c8:	mov	r7, #2
   137cc:	movne	r0, #39	; 0x27
   137d0:	strbne	r0, [r6]
   137d4:	movw	r0, #31935	; 0x7cbf
   137d8:	movt	r0, #1
   137dc:	b	1382c <__assert_fail@plt+0x2774>
   137e0:	mov	r7, #5
   137e4:	tst	r4, #1
   137e8:	beq	13810 <__assert_fail@plt+0x2758>
   137ec:	mov	r0, #1
   137f0:	mov	r8, #0
   137f4:	str	r0, [fp, #-76]	; 0xffffffb4
   137f8:	movw	r0, #31931	; 0x7cbb
   137fc:	mov	r2, #1
   13800:	mov	r3, #1
   13804:	movt	r0, #1
   13808:	str	r0, [sp, #92]	; 0x5c
   1380c:	b	1383c <__assert_fail@plt+0x2784>
   13810:	cmp	sl, #0
   13814:	mov	r8, #1
   13818:	mov	r2, #1
   1381c:	movne	r0, #34	; 0x22
   13820:	strbne	r0, [r6]
   13824:	movw	r0, #31931	; 0x7cbb
   13828:	movt	r0, #1
   1382c:	str	r0, [sp, #92]	; 0x5c
   13830:	mov	r0, #1
   13834:	str	r0, [fp, #-76]	; 0xffffffb4
   13838:	mov	r3, #0
   1383c:	ldr	r0, [fp, #16]
   13840:	str	r3, [fp, #-72]	; 0xffffffb8
   13844:	str	r7, [fp, #-64]	; 0xffffffc0
   13848:	str	r2, [sp, #84]	; 0x54
   1384c:	cmp	r0, #0
   13850:	movwne	r0, #1
   13854:	and	r0, r0, r3
   13858:	str	r0, [fp, #-88]	; 0xffffffa8
   1385c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13860:	cmp	r0, #0
   13864:	movwne	r0, #1
   13868:	subs	r4, r7, #2
   1386c:	mov	r7, #0
   13870:	and	r1, r0, r3
   13874:	str	r4, [fp, #-80]	; 0xffffffb0
   13878:	and	r1, r2, r1
   1387c:	str	r1, [sp, #48]	; 0x30
   13880:	clz	r1, r4
   13884:	lsr	r1, r1, #5
   13888:	and	r1, r1, r3
   1388c:	eor	r3, r3, #1
   13890:	str	r1, [sp, #64]	; 0x40
   13894:	mov	r1, r4
   13898:	str	r3, [sp, #88]	; 0x58
   1389c:	movwne	r1, #1
   138a0:	orr	r3, r1, r3
   138a4:	and	r1, r1, r2
   138a8:	and	r0, r0, r1
   138ac:	str	r3, [sp, #68]	; 0x44
   138b0:	str	r1, [fp, #-68]	; 0xffffffbc
   138b4:	str	r0, [fp, #-60]	; 0xffffffc4
   138b8:	eor	r0, r2, #1
   138bc:	str	r0, [sp, #52]	; 0x34
   138c0:	cmn	lr, #1
   138c4:	beq	138d4 <__assert_fail@plt+0x281c>
   138c8:	cmp	r7, lr
   138cc:	bne	138e0 <__assert_fail@plt+0x2828>
   138d0:	b	14408 <__assert_fail@plt+0x3350>
   138d4:	ldrb	r0, [ip, r7]
   138d8:	cmp	r0, #0
   138dc:	beq	14410 <__assert_fail@plt+0x3358>
   138e0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   138e4:	mov	r9, #0
   138e8:	str	r5, [fp, #-48]	; 0xffffffd0
   138ec:	cmp	r0, #0
   138f0:	beq	13924 <__assert_fail@plt+0x286c>
   138f4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   138f8:	add	r4, r7, r0
   138fc:	cmp	r0, #2
   13900:	bcc	1391c <__assert_fail@plt+0x2864>
   13904:	cmn	lr, #1
   13908:	bne	1391c <__assert_fail@plt+0x2864>
   1390c:	mov	r0, ip
   13910:	bl	10fc8 <strlen@plt>
   13914:	ldr	ip, [fp, #-84]	; 0xffffffac
   13918:	mov	lr, r0
   1391c:	cmp	r4, lr
   13920:	bls	1392c <__assert_fail@plt+0x2874>
   13924:	mov	r0, #0
   13928:	b	1396c <__assert_fail@plt+0x28b4>
   1392c:	ldr	r1, [sp, #92]	; 0x5c
   13930:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13934:	add	r0, ip, r7
   13938:	mov	r4, lr
   1393c:	bl	10ecc <memcmp@plt>
   13940:	ldr	r2, [sp, #88]	; 0x58
   13944:	cmp	r0, #0
   13948:	mov	r1, r0
   1394c:	movwne	r1, #1
   13950:	orr	r1, r1, r2
   13954:	tst	r1, #1
   13958:	beq	144a0 <__assert_fail@plt+0x33e8>
   1395c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13960:	clz	r0, r0
   13964:	mov	lr, r4
   13968:	lsr	r0, r0, #5
   1396c:	str	r0, [fp, #-52]	; 0xffffffcc
   13970:	ldrb	r5, [ip, r7]
   13974:	cmp	r5, #126	; 0x7e
   13978:	bhi	13d30 <__assert_fail@plt+0x2c78>
   1397c:	add	r3, pc, #16
   13980:	mov	r4, #1
   13984:	mov	r2, #110	; 0x6e
   13988:	mov	r0, #97	; 0x61
   1398c:	mov	r1, #0
   13990:	ldr	pc, [r3, r5, lsl #2]
   13994:	andeq	r3, r1, ip, lsr #24
   13998:	andeq	r3, r1, r0, lsr sp
   1399c:	andeq	r3, r1, r0, lsr sp
   139a0:	andeq	r3, r1, r0, lsr sp
   139a4:	andeq	r3, r1, r0, lsr sp
   139a8:	andeq	r3, r1, r0, lsr sp
   139ac:	andeq	r3, r1, r0, lsr sp
   139b0:	andeq	r3, r1, r4, ror #27
   139b4:	andeq	r3, r1, ip, lsl #24
   139b8:	andeq	r3, r1, r4, lsl #24
   139bc:	andeq	r3, r1, r8, lsl ip
   139c0:	muleq	r1, r8, ip
   139c4:	strdeq	r3, [r1], -ip
   139c8:	andeq	r3, r1, r4, lsl ip
   139cc:	andeq	r3, r1, r0, lsr sp
   139d0:	andeq	r3, r1, r0, lsr sp
   139d4:	andeq	r3, r1, r0, lsr sp
   139d8:	andeq	r3, r1, r0, lsr sp
   139dc:	andeq	r3, r1, r0, lsr sp
   139e0:	andeq	r3, r1, r0, lsr sp
   139e4:	andeq	r3, r1, r0, lsr sp
   139e8:	andeq	r3, r1, r0, lsr sp
   139ec:	andeq	r3, r1, r0, lsr sp
   139f0:	andeq	r3, r1, r0, lsr sp
   139f4:	andeq	r3, r1, r0, lsr sp
   139f8:	andeq	r3, r1, r0, lsr sp
   139fc:	andeq	r3, r1, r0, lsr sp
   13a00:	andeq	r3, r1, r0, lsr sp
   13a04:	andeq	r3, r1, r0, lsr sp
   13a08:	andeq	r3, r1, r0, lsr sp
   13a0c:	andeq	r3, r1, r0, lsr sp
   13a10:	andeq	r3, r1, r0, lsr sp
   13a14:	muleq	r1, ip, sp
   13a18:	andeq	r3, r1, r0, lsr #27
   13a1c:	andeq	r3, r1, r0, lsr #27
   13a20:	andeq	r3, r1, r4, lsr #23
   13a24:	andeq	r3, r1, r0, lsr #27
   13a28:	muleq	r1, r0, fp
   13a2c:	andeq	r3, r1, r0, lsr #27
   13a30:	andeq	r3, r1, r0, lsr #25
   13a34:	andeq	r3, r1, r0, lsr #27
   13a38:	andeq	r3, r1, r0, lsr #27
   13a3c:	andeq	r3, r1, r0, lsr #27
   13a40:	muleq	r1, r0, fp
   13a44:	muleq	r1, r0, fp
   13a48:	muleq	r1, r0, fp
   13a4c:	muleq	r1, r0, fp
   13a50:	muleq	r1, r0, fp
   13a54:	muleq	r1, r0, fp
   13a58:	muleq	r1, r0, fp
   13a5c:	muleq	r1, r0, fp
   13a60:	muleq	r1, r0, fp
   13a64:	muleq	r1, r0, fp
   13a68:	muleq	r1, r0, fp
   13a6c:	muleq	r1, r0, fp
   13a70:	muleq	r1, r0, fp
   13a74:	muleq	r1, r0, fp
   13a78:	muleq	r1, r0, fp
   13a7c:	muleq	r1, r0, fp
   13a80:	andeq	r3, r1, r0, lsr #27
   13a84:	andeq	r3, r1, r0, lsr #27
   13a88:	andeq	r3, r1, r0, lsr #27
   13a8c:	andeq	r3, r1, r0, lsr #27
   13a90:	andeq	r3, r1, ip, ror #24
   13a94:	andeq	r3, r1, r0, lsr sp
   13a98:	muleq	r1, r0, fp
   13a9c:	muleq	r1, r0, fp
   13aa0:	muleq	r1, r0, fp
   13aa4:	muleq	r1, r0, fp
   13aa8:	muleq	r1, r0, fp
   13aac:	muleq	r1, r0, fp
   13ab0:	muleq	r1, r0, fp
   13ab4:	muleq	r1, r0, fp
   13ab8:	muleq	r1, r0, fp
   13abc:	muleq	r1, r0, fp
   13ac0:	muleq	r1, r0, fp
   13ac4:	muleq	r1, r0, fp
   13ac8:	muleq	r1, r0, fp
   13acc:	muleq	r1, r0, fp
   13ad0:	muleq	r1, r0, fp
   13ad4:	muleq	r1, r0, fp
   13ad8:	muleq	r1, r0, fp
   13adc:	muleq	r1, r0, fp
   13ae0:	muleq	r1, r0, fp
   13ae4:	muleq	r1, r0, fp
   13ae8:	muleq	r1, r0, fp
   13aec:	muleq	r1, r0, fp
   13af0:	muleq	r1, r0, fp
   13af4:	muleq	r1, r0, fp
   13af8:	muleq	r1, r0, fp
   13afc:	muleq	r1, r0, fp
   13b00:	andeq	r3, r1, r0, lsr #27
   13b04:	ldrdeq	r3, [r1], -r8
   13b08:	muleq	r1, r0, fp
   13b0c:	andeq	r3, r1, r0, lsr #27
   13b10:	muleq	r1, r0, fp
   13b14:	andeq	r3, r1, r0, lsr #27
   13b18:	muleq	r1, r0, fp
   13b1c:	muleq	r1, r0, fp
   13b20:	muleq	r1, r0, fp
   13b24:	muleq	r1, r0, fp
   13b28:	muleq	r1, r0, fp
   13b2c:	muleq	r1, r0, fp
   13b30:	muleq	r1, r0, fp
   13b34:	muleq	r1, r0, fp
   13b38:	muleq	r1, r0, fp
   13b3c:	muleq	r1, r0, fp
   13b40:	muleq	r1, r0, fp
   13b44:	muleq	r1, r0, fp
   13b48:	muleq	r1, r0, fp
   13b4c:	muleq	r1, r0, fp
   13b50:	muleq	r1, r0, fp
   13b54:	muleq	r1, r0, fp
   13b58:	muleq	r1, r0, fp
   13b5c:	muleq	r1, r0, fp
   13b60:	muleq	r1, r0, fp
   13b64:	muleq	r1, r0, fp
   13b68:	muleq	r1, r0, fp
   13b6c:	muleq	r1, r0, fp
   13b70:	muleq	r1, r0, fp
   13b74:	muleq	r1, r0, fp
   13b78:	muleq	r1, r0, fp
   13b7c:	muleq	r1, r0, fp
   13b80:			; <UNDEFINED> instruction: 0x00013bb8
   13b84:	andeq	r3, r1, r0, lsr #27
   13b88:			; <UNDEFINED> instruction: 0x00013bb8
   13b8c:	andeq	r3, r1, r4, lsr #23
   13b90:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13b94:	cmp	r0, #0
   13b98:	beq	13df8 <__assert_fail@plt+0x2d40>
   13b9c:	ldr	r0, [fp, #16]
   13ba0:	b	13dfc <__assert_fail@plt+0x2d44>
   13ba4:	mov	r4, #0
   13ba8:	cmp	r7, #0
   13bac:	beq	13d9c <__assert_fail@plt+0x2ce4>
   13bb0:	mov	r9, #0
   13bb4:	b	13b90 <__assert_fail@plt+0x2ad8>
   13bb8:	mov	r4, #0
   13bbc:	cmn	lr, #1
   13bc0:	beq	13d80 <__assert_fail@plt+0x2cc8>
   13bc4:	cmp	r7, #0
   13bc8:	bne	13bb0 <__assert_fail@plt+0x2af8>
   13bcc:	cmp	lr, #1
   13bd0:	beq	13d9c <__assert_fail@plt+0x2ce4>
   13bd4:	b	13bb0 <__assert_fail@plt+0x2af8>
   13bd8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13bdc:	cmp	r0, #2
   13be0:	bne	13dc0 <__assert_fail@plt+0x2d08>
   13be4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13be8:	tst	r0, #1
   13bec:	bne	144bc <__assert_fail@plt+0x3404>
   13bf0:	mov	r9, #0
   13bf4:	mov	r0, #92	; 0x5c
   13bf8:	b	13dd4 <__assert_fail@plt+0x2d1c>
   13bfc:	mov	r0, #102	; 0x66
   13c00:	b	13de4 <__assert_fail@plt+0x2d2c>
   13c04:	mov	r2, #116	; 0x74
   13c08:	b	13c18 <__assert_fail@plt+0x2b60>
   13c0c:	mov	r0, #98	; 0x62
   13c10:	b	13de4 <__assert_fail@plt+0x2d2c>
   13c14:	mov	r2, #114	; 0x72
   13c18:	ldr	r0, [sp, #68]	; 0x44
   13c1c:	tst	r0, #1
   13c20:	mov	r0, r2
   13c24:	bne	13de4 <__assert_fail@plt+0x2d2c>
   13c28:	b	144bc <__assert_fail@plt+0x3404>
   13c2c:	ldr	r0, [sp, #84]	; 0x54
   13c30:	tst	r0, #1
   13c34:	beq	13ed4 <__assert_fail@plt+0x2e1c>
   13c38:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13c3c:	tst	r0, #1
   13c40:	bne	145cc <__assert_fail@plt+0x3514>
   13c44:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13c48:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13c4c:	cmp	r0, #2
   13c50:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13c54:	movwne	r0, #1
   13c58:	orr	r0, r0, r2
   13c5c:	tst	r0, #1
   13c60:	beq	142a4 <__assert_fail@plt+0x31ec>
   13c64:	mov	r0, r8
   13c68:	b	142d8 <__assert_fail@plt+0x3220>
   13c6c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13c70:	mov	r9, #0
   13c74:	mov	r5, #63	; 0x3f
   13c78:	cmp	r0, #5
   13c7c:	beq	14088 <__assert_fail@plt+0x2fd0>
   13c80:	cmp	r0, #2
   13c84:	bne	1412c <__assert_fail@plt+0x3074>
   13c88:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13c8c:	tst	r0, #1
   13c90:	beq	14130 <__assert_fail@plt+0x3078>
   13c94:	b	144bc <__assert_fail@plt+0x3404>
   13c98:	mov	r0, #118	; 0x76
   13c9c:	b	13de4 <__assert_fail@plt+0x2d2c>
   13ca0:	mov	r0, #1
   13ca4:	mov	r5, #39	; 0x27
   13ca8:	str	r0, [sp, #60]	; 0x3c
   13cac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13cb0:	cmp	r0, #2
   13cb4:	bne	13d28 <__assert_fail@plt+0x2c70>
   13cb8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13cbc:	tst	r0, #1
   13cc0:	bne	144bc <__assert_fail@plt+0x3404>
   13cc4:	ldr	r2, [sp, #56]	; 0x38
   13cc8:	clz	r1, sl
   13ccc:	mov	r9, #0
   13cd0:	lsr	r1, r1, #5
   13cd4:	cmp	r2, #0
   13cd8:	mov	r0, r2
   13cdc:	movwne	r0, #1
   13ce0:	orrs	r0, r0, r1
   13ce4:	moveq	r2, sl
   13ce8:	moveq	sl, r0
   13cec:	cmp	r8, sl
   13cf0:	str	r2, [sp, #56]	; 0x38
   13cf4:	movcc	r0, #39	; 0x27
   13cf8:	strbcc	r0, [r6, r8]
   13cfc:	add	r0, r8, #1
   13d00:	cmp	r0, sl
   13d04:	movcc	r1, #92	; 0x5c
   13d08:	strbcc	r1, [r6, r0]
   13d0c:	add	r0, r8, #2
   13d10:	add	r8, r8, #3
   13d14:	cmp	r0, sl
   13d18:	movcc	r1, #39	; 0x27
   13d1c:	strbcc	r1, [r6, r0]
   13d20:	mov	r0, #0
   13d24:	str	r0, [fp, #-56]	; 0xffffffc8
   13d28:	mov	r4, #1
   13d2c:	b	13b90 <__assert_fail@plt+0x2ad8>
   13d30:	ldr	r0, [sp, #40]	; 0x28
   13d34:	cmp	r0, #1
   13d38:	bne	13f00 <__assert_fail@plt+0x2e48>
   13d3c:	str	lr, [sp, #28]
   13d40:	bl	10fb0 <__ctype_b_loc@plt>
   13d44:	ldr	r0, [r0]
   13d48:	ldr	ip, [fp, #-84]	; 0xffffffac
   13d4c:	mov	r1, #1
   13d50:	add	r0, r0, r5, lsl #1
   13d54:	ldrb	r0, [r0, #1]
   13d58:	ubfx	r4, r0, #6, #1
   13d5c:	ldr	r0, [sp, #52]	; 0x34
   13d60:	mov	r2, r1
   13d64:	cmp	r1, #1
   13d68:	orr	r0, r4, r0
   13d6c:	bhi	14138 <__assert_fail@plt+0x3080>
   13d70:	tst	r0, #1
   13d74:	beq	14138 <__assert_fail@plt+0x3080>
   13d78:	ldr	lr, [sp, #28]
   13d7c:	b	13b90 <__assert_fail@plt+0x2ad8>
   13d80:	cmp	r7, #0
   13d84:	ldrbeq	r0, [ip, #1]
   13d88:	cmpeq	r0, #0
   13d8c:	beq	13d9c <__assert_fail@plt+0x2ce4>
   13d90:	mvn	lr, #0
   13d94:	mov	r9, #0
   13d98:	b	13b90 <__assert_fail@plt+0x2ad8>
   13d9c:	mov	r1, #1
   13da0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13da4:	cmp	r0, #2
   13da8:	bne	13db8 <__assert_fail@plt+0x2d00>
   13dac:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13db0:	tst	r0, #1
   13db4:	bne	144bc <__assert_fail@plt+0x3404>
   13db8:	mov	r4, r1
   13dbc:	b	13b90 <__assert_fail@plt+0x2ad8>
   13dc0:	ldr	r1, [sp, #48]	; 0x30
   13dc4:	mov	r9, #0
   13dc8:	mov	r0, #92	; 0x5c
   13dcc:	cmp	r1, #0
   13dd0:	beq	13de4 <__assert_fail@plt+0x2d2c>
   13dd4:	mov	r4, #0
   13dd8:	cmp	r9, #0
   13ddc:	beq	14370 <__assert_fail@plt+0x32b8>
   13de0:	b	143ac <__assert_fail@plt+0x32f4>
   13de4:	ldr	r1, [sp, #84]	; 0x54
   13de8:	mov	r4, #0
   13dec:	mov	r9, #0
   13df0:	tst	r1, #1
   13df4:	bne	13e34 <__assert_fail@plt+0x2d7c>
   13df8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13dfc:	cmp	r0, #0
   13e00:	mov	r0, r5
   13e04:	beq	13e28 <__assert_fail@plt+0x2d70>
   13e08:	ldr	r1, [fp, #16]
   13e0c:	ubfx	r0, r5, #5, #3
   13e10:	mov	r2, #1
   13e14:	ldr	r0, [r1, r0, lsl #2]
   13e18:	and	r1, r5, #31
   13e1c:	tst	r0, r2, lsl r1
   13e20:	mov	r0, r5
   13e24:	bne	13e34 <__assert_fail@plt+0x2d7c>
   13e28:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13e2c:	cmp	r1, #0
   13e30:	beq	14368 <__assert_fail@plt+0x32b0>
   13e34:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13e38:	tst	r1, #1
   13e3c:	bne	14494 <__assert_fail@plt+0x33dc>
   13e40:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13e44:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13e48:	cmp	r1, #2
   13e4c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13e50:	movwne	r1, #1
   13e54:	orr	r1, r1, r2
   13e58:	tst	r1, #1
   13e5c:	beq	13e68 <__assert_fail@plt+0x2db0>
   13e60:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13e64:	b	13ea4 <__assert_fail@plt+0x2dec>
   13e68:	cmp	r8, sl
   13e6c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13e70:	movcc	r1, #39	; 0x27
   13e74:	strbcc	r1, [r6, r8]
   13e78:	add	r1, r8, #1
   13e7c:	cmp	r1, sl
   13e80:	movcc	r2, #36	; 0x24
   13e84:	strbcc	r2, [r6, r1]
   13e88:	add	r1, r8, #2
   13e8c:	add	r8, r8, #3
   13e90:	cmp	r1, sl
   13e94:	movcc	r2, #39	; 0x27
   13e98:	strbcc	r2, [r6, r1]
   13e9c:	mov	r1, #1
   13ea0:	str	r1, [fp, #-56]	; 0xffffffc8
   13ea4:	cmp	r8, sl
   13ea8:	movcc	r1, #92	; 0x5c
   13eac:	strbcc	r1, [r6, r8]
   13eb0:	add	r8, r8, #1
   13eb4:	cmp	r8, sl
   13eb8:	and	r5, r5, r4
   13ebc:	add	r7, r7, #1
   13ec0:	strbcc	r0, [r6, r8]
   13ec4:	add	r8, r8, #1
   13ec8:	cmn	lr, #1
   13ecc:	bne	138c8 <__assert_fail@plt+0x2810>
   13ed0:	b	138d4 <__assert_fail@plt+0x281c>
   13ed4:	ldr	r0, [sp, #36]	; 0x24
   13ed8:	mov	r4, #0
   13edc:	mov	r9, #0
   13ee0:	mov	r5, #0
   13ee4:	cmp	r0, #0
   13ee8:	beq	13df8 <__assert_fail@plt+0x2d40>
   13eec:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13ef0:	add	r7, r7, #1
   13ef4:	cmn	lr, #1
   13ef8:	bne	138c8 <__assert_fail@plt+0x2810>
   13efc:	b	138d4 <__assert_fail@plt+0x281c>
   13f00:	mov	r0, #0
   13f04:	cmn	lr, #1
   13f08:	str	r0, [fp, #-36]	; 0xffffffdc
   13f0c:	str	r0, [fp, #-40]	; 0xffffffd8
   13f10:	bne	13f24 <__assert_fail@plt+0x2e6c>
   13f14:	mov	r0, ip
   13f18:	bl	10fc8 <strlen@plt>
   13f1c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13f20:	mov	lr, r0
   13f24:	add	r0, ip, r7
   13f28:	mov	r4, #1
   13f2c:	mov	r6, #0
   13f30:	str	lr, [sp, #28]
   13f34:	str	r0, [sp, #24]
   13f38:	sub	r0, fp, #40	; 0x28
   13f3c:	mov	r3, r0
   13f40:	str	r6, [sp, #44]	; 0x2c
   13f44:	add	r6, r6, r7
   13f48:	sub	r0, fp, #44	; 0x2c
   13f4c:	add	r1, ip, r6
   13f50:	sub	r2, lr, r6
   13f54:	bl	16e98 <__assert_fail@plt+0x5de0>
   13f58:	cmp	r0, #0
   13f5c:	beq	143f4 <__assert_fail@plt+0x333c>
   13f60:	cmn	r0, #1
   13f64:	beq	143b4 <__assert_fail@plt+0x32fc>
   13f68:	ldr	lr, [sp, #28]
   13f6c:	cmn	r0, #2
   13f70:	beq	143bc <__assert_fail@plt+0x3304>
   13f74:	ldr	r2, [sp, #64]	; 0x40
   13f78:	cmp	r0, #2
   13f7c:	mov	r1, #0
   13f80:	movwcc	r1, #1
   13f84:	eor	r2, r2, #1
   13f88:	orrs	r1, r2, r1
   13f8c:	bne	1404c <__assert_fail@plt+0x2f94>
   13f90:	ldr	r1, [sp, #44]	; 0x2c
   13f94:	ldr	r2, [sp, #24]
   13f98:	add	r1, r2, r1
   13f9c:	mov	r2, #1
   13fa0:	ldrb	r3, [r1, r2]
   13fa4:	sub	r3, r3, #91	; 0x5b
   13fa8:	cmp	r3, #33	; 0x21
   13fac:	bhi	14040 <__assert_fail@plt+0x2f88>
   13fb0:	add	r6, pc, #0
   13fb4:	ldr	pc, [r6, r3, lsl #2]
   13fb8:			; <UNDEFINED> instruction: 0x000144b4
   13fbc:			; <UNDEFINED> instruction: 0x000144b4
   13fc0:	andeq	r4, r1, r0, asr #32
   13fc4:			; <UNDEFINED> instruction: 0x000144b4
   13fc8:	andeq	r4, r1, r0, asr #32
   13fcc:			; <UNDEFINED> instruction: 0x000144b4
   13fd0:	andeq	r4, r1, r0, asr #32
   13fd4:	andeq	r4, r1, r0, asr #32
   13fd8:	andeq	r4, r1, r0, asr #32
   13fdc:	andeq	r4, r1, r0, asr #32
   13fe0:	andeq	r4, r1, r0, asr #32
   13fe4:	andeq	r4, r1, r0, asr #32
   13fe8:	andeq	r4, r1, r0, asr #32
   13fec:	andeq	r4, r1, r0, asr #32
   13ff0:	andeq	r4, r1, r0, asr #32
   13ff4:	andeq	r4, r1, r0, asr #32
   13ff8:	andeq	r4, r1, r0, asr #32
   13ffc:	andeq	r4, r1, r0, asr #32
   14000:	andeq	r4, r1, r0, asr #32
   14004:	andeq	r4, r1, r0, asr #32
   14008:	andeq	r4, r1, r0, asr #32
   1400c:	andeq	r4, r1, r0, asr #32
   14010:	andeq	r4, r1, r0, asr #32
   14014:	andeq	r4, r1, r0, asr #32
   14018:	andeq	r4, r1, r0, asr #32
   1401c:	andeq	r4, r1, r0, asr #32
   14020:	andeq	r4, r1, r0, asr #32
   14024:	andeq	r4, r1, r0, asr #32
   14028:	andeq	r4, r1, r0, asr #32
   1402c:	andeq	r4, r1, r0, asr #32
   14030:	andeq	r4, r1, r0, asr #32
   14034:	andeq	r4, r1, r0, asr #32
   14038:	andeq	r4, r1, r0, asr #32
   1403c:			; <UNDEFINED> instruction: 0x000144b4
   14040:	add	r2, r2, #1
   14044:	cmp	r2, r0
   14048:	bcc	13fa0 <__assert_fail@plt+0x2ee8>
   1404c:	ldr	r6, [sp, #44]	; 0x2c
   14050:	add	r6, r0, r6
   14054:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14058:	bl	10f08 <iswprint@plt>
   1405c:	cmp	r0, #0
   14060:	movwne	r0, #1
   14064:	and	r4, r4, r0
   14068:	sub	r0, fp, #40	; 0x28
   1406c:	bl	10eb4 <mbsinit@plt>
   14070:	ldr	lr, [sp, #28]
   14074:	ldr	ip, [fp, #-84]	; 0xffffffac
   14078:	sub	r3, fp, #40	; 0x28
   1407c:	cmp	r0, #0
   14080:	beq	13f40 <__assert_fail@plt+0x2e88>
   14084:	b	143fc <__assert_fail@plt+0x3344>
   14088:	ldr	r0, [sp, #32]
   1408c:	cmp	r0, #0
   14090:	beq	1412c <__assert_fail@plt+0x3074>
   14094:	add	r0, r7, #2
   14098:	cmp	r0, lr
   1409c:	bcs	1412c <__assert_fail@plt+0x3074>
   140a0:	add	r1, ip, r7
   140a4:	ldrb	r1, [r1, #1]
   140a8:	cmp	r1, #63	; 0x3f
   140ac:	bne	1412c <__assert_fail@plt+0x3074>
   140b0:	ldrb	r5, [ip, r0]
   140b4:	sub	r1, r5, #33	; 0x21
   140b8:	cmp	r1, #29
   140bc:	bhi	1412c <__assert_fail@plt+0x3074>
   140c0:	movw	r3, #20929	; 0x51c1
   140c4:	mov	r2, #1
   140c8:	movt	r3, #14336	; 0x3800
   140cc:	tst	r3, r2, lsl r1
   140d0:	beq	1412c <__assert_fail@plt+0x3074>
   140d4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   140d8:	tst	r1, #1
   140dc:	bne	145d4 <__assert_fail@plt+0x351c>
   140e0:	cmp	r8, sl
   140e4:	mov	r7, r0
   140e8:	mov	r4, #0
   140ec:	movcc	r1, #63	; 0x3f
   140f0:	strbcc	r1, [r6, r8]
   140f4:	add	r1, r8, #1
   140f8:	cmp	r1, sl
   140fc:	movcc	r2, #34	; 0x22
   14100:	strbcc	r2, [r6, r1]
   14104:	add	r1, r8, #2
   14108:	cmp	r1, sl
   1410c:	movcc	r2, #34	; 0x22
   14110:	strbcc	r2, [r6, r1]
   14114:	add	r1, r8, #3
   14118:	add	r8, r8, #4
   1411c:	cmp	r1, sl
   14120:	movcc	r2, #63	; 0x3f
   14124:	strbcc	r2, [r6, r1]
   14128:	b	13b90 <__assert_fail@plt+0x2ad8>
   1412c:	mov	r5, #63	; 0x3f
   14130:	mov	r4, #0
   14134:	b	13b90 <__assert_fail@plt+0x2ad8>
   14138:	add	r1, r2, r7
   1413c:	ldr	lr, [sp, #28]
   14140:	mov	r3, #0
   14144:	str	r1, [sp, #44]	; 0x2c
   14148:	add	r1, r7, #1
   1414c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14150:	tst	r0, #1
   14154:	bne	14228 <__assert_fail@plt+0x3170>
   14158:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1415c:	tst	r2, #1
   14160:	bne	1451c <__assert_fail@plt+0x3464>
   14164:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14168:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1416c:	cmp	r7, #2
   14170:	movwne	r3, #1
   14174:	orr	r3, r3, r2
   14178:	tst	r3, #1
   1417c:	bne	141b8 <__assert_fail@plt+0x3100>
   14180:	cmp	r8, sl
   14184:	add	r3, r8, #1
   14188:	movcc	r2, #39	; 0x27
   1418c:	strbcc	r2, [r6, r8]
   14190:	cmp	r3, sl
   14194:	movcc	r2, #36	; 0x24
   14198:	strbcc	r2, [r6, r3]
   1419c:	add	r3, r8, #2
   141a0:	add	r8, r8, #3
   141a4:	cmp	r3, sl
   141a8:	movcc	r2, #39	; 0x27
   141ac:	strbcc	r2, [r6, r3]
   141b0:	mov	r2, #1
   141b4:	str	r2, [fp, #-56]	; 0xffffffc8
   141b8:	cmp	r8, sl
   141bc:	movcc	r3, #92	; 0x5c
   141c0:	strbcc	r3, [r6, r8]
   141c4:	add	r3, r8, #1
   141c8:	cmp	r3, sl
   141cc:	andcc	r7, r5, #192	; 0xc0
   141d0:	movcc	r2, #48	; 0x30
   141d4:	orrcc	r7, r2, r7, lsr #6
   141d8:	strbcc	r7, [r6, r3]
   141dc:	add	r3, r8, #2
   141e0:	add	r8, r8, #3
   141e4:	cmp	r3, sl
   141e8:	lsrcc	r7, r5, #3
   141ec:	movcc	r2, #6
   141f0:	bficc	r7, r2, #3, #29
   141f4:	mov	r2, #6
   141f8:	strbcc	r7, [r6, r3]
   141fc:	bfi	r5, r2, #3, #29
   14200:	mov	r3, #1
   14204:	b	1424c <__assert_fail@plt+0x3194>
   14208:	cmp	r8, sl
   1420c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14210:	strbcc	r5, [r6, r8]
   14214:	add	r8, r8, #1
   14218:	ldrb	r5, [ip, r1]
   1421c:	add	r1, r1, #1
   14220:	tst	r0, #1
   14224:	beq	14158 <__assert_fail@plt+0x30a0>
   14228:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1422c:	tst	r2, #1
   14230:	beq	14244 <__assert_fail@plt+0x318c>
   14234:	cmp	r8, sl
   14238:	movcc	r7, #92	; 0x5c
   1423c:	strbcc	r7, [r6, r8]
   14240:	add	r8, r8, #1
   14244:	mov	r2, #0
   14248:	str	r2, [fp, #-52]	; 0xffffffcc
   1424c:	ldr	r2, [sp, #44]	; 0x2c
   14250:	and	r9, r3, #1
   14254:	cmp	r2, r1
   14258:	bls	14358 <__assert_fail@plt+0x32a0>
   1425c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14260:	cmp	r9, #0
   14264:	movwne	r9, #1
   14268:	mvn	r7, r2
   1426c:	orr	r7, r7, r9
   14270:	tst	r7, #1
   14274:	bne	14208 <__assert_fail@plt+0x3150>
   14278:	cmp	r8, sl
   1427c:	movcc	r7, #39	; 0x27
   14280:	strbcc	r7, [r6, r8]
   14284:	add	r7, r8, #1
   14288:	add	r8, r8, #2
   1428c:	cmp	r7, sl
   14290:	movcc	r2, #39	; 0x27
   14294:	strbcc	r2, [r6, r7]
   14298:	mov	r2, #0
   1429c:	str	r2, [fp, #-56]	; 0xffffffc8
   142a0:	b	14208 <__assert_fail@plt+0x3150>
   142a4:	cmp	r8, sl
   142a8:	mov	r2, #1
   142ac:	movcc	r0, #39	; 0x27
   142b0:	strbcc	r0, [r6, r8]
   142b4:	add	r0, r8, #1
   142b8:	cmp	r0, sl
   142bc:	movcc	r1, #36	; 0x24
   142c0:	strbcc	r1, [r6, r0]
   142c4:	add	r0, r8, #2
   142c8:	cmp	r0, sl
   142cc:	movcc	r1, #39	; 0x27
   142d0:	strbcc	r1, [r6, r0]
   142d4:	add	r0, r8, #3
   142d8:	cmp	r0, sl
   142dc:	add	r8, r0, #1
   142e0:	str	r2, [fp, #-56]	; 0xffffffc8
   142e4:	movcc	r1, #92	; 0x5c
   142e8:	strbcc	r1, [r6, r0]
   142ec:	ldr	r1, [fp, #-64]	; 0xffffffc0
   142f0:	cmp	r1, #2
   142f4:	beq	14348 <__assert_fail@plt+0x3290>
   142f8:	add	r1, r7, #1
   142fc:	mov	r4, #0
   14300:	mov	r9, #1
   14304:	mov	r5, #48	; 0x30
   14308:	cmp	r1, lr
   1430c:	bcs	13b90 <__assert_fail@plt+0x2ad8>
   14310:	ldrb	r1, [ip, r1]
   14314:	sub	r1, r1, #48	; 0x30
   14318:	uxtb	r1, r1
   1431c:	cmp	r1, #9
   14320:	bhi	13b90 <__assert_fail@plt+0x2ad8>
   14324:	cmp	r8, sl
   14328:	movcc	r1, #48	; 0x30
   1432c:	strbcc	r1, [r6, r8]
   14330:	add	r1, r0, #2
   14334:	add	r8, r0, #3
   14338:	cmp	r1, sl
   1433c:	movcc	r2, #48	; 0x30
   14340:	strbcc	r2, [r6, r1]
   14344:	b	13b90 <__assert_fail@plt+0x2ad8>
   14348:	mov	r0, #48	; 0x30
   1434c:	mov	r9, #1
   14350:	mov	r4, #0
   14354:	b	13e28 <__assert_fail@plt+0x2d70>
   14358:	cmp	r9, #0
   1435c:	sub	r7, r1, #1
   14360:	mov	r0, r5
   14364:	movwne	r9, #1
   14368:	cmp	r9, #0
   1436c:	bne	143ac <__assert_fail@plt+0x32f4>
   14370:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14374:	tst	r1, #1
   14378:	beq	143ac <__assert_fail@plt+0x32f4>
   1437c:	cmp	r8, sl
   14380:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14384:	movcc	r1, #39	; 0x27
   14388:	strbcc	r1, [r6, r8]
   1438c:	add	r1, r8, #1
   14390:	add	r8, r8, #2
   14394:	cmp	r1, sl
   14398:	movcc	r2, #39	; 0x27
   1439c:	strbcc	r2, [r6, r1]
   143a0:	mov	r1, #0
   143a4:	str	r1, [fp, #-56]	; 0xffffffc8
   143a8:	b	13eb4 <__assert_fail@plt+0x2dfc>
   143ac:	ldr	r5, [fp, #-48]	; 0xffffffd0
   143b0:	b	13eb4 <__assert_fail@plt+0x2dfc>
   143b4:	mov	r4, #0
   143b8:	b	143f4 <__assert_fail@plt+0x333c>
   143bc:	mov	r4, #0
   143c0:	cmp	lr, r6
   143c4:	bls	143f4 <__assert_fail@plt+0x333c>
   143c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   143cc:	ldr	r6, [sp, #44]	; 0x2c
   143d0:	ldr	r0, [sp, #24]
   143d4:	ldrb	r0, [r0, r6]
   143d8:	cmp	r0, #0
   143dc:	beq	143fc <__assert_fail@plt+0x3344>
   143e0:	add	r6, r6, #1
   143e4:	add	r0, r7, r6
   143e8:	cmp	r0, lr
   143ec:	bcc	143d0 <__assert_fail@plt+0x3318>
   143f0:	b	143fc <__assert_fail@plt+0x3344>
   143f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   143f8:	ldr	r6, [sp, #44]	; 0x2c
   143fc:	mov	r1, r6
   14400:	ldr	r6, [sp, #80]	; 0x50
   14404:	b	13d5c <__assert_fail@plt+0x2ca4>
   14408:	mov	lr, r7
   1440c:	b	14414 <__assert_fail@plt+0x335c>
   14410:	mvn	lr, #0
   14414:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14418:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1441c:	eor	r0, r7, #2
   14420:	orr	r0, r0, r8
   14424:	clz	r0, r0
   14428:	lsr	r0, r0, #5
   1442c:	tst	r1, r0
   14430:	bne	144bc <__assert_fail@plt+0x3404>
   14434:	mov	r0, r1
   14438:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1443c:	cmp	r7, #2
   14440:	movwne	r1, #1
   14444:	orr	r0, r0, r1
   14448:	tst	r0, #1
   1444c:	ldreq	r0, [sp, #60]	; 0x3c
   14450:	eoreq	r0, r0, #1
   14454:	tsteq	r0, #1
   14458:	bne	14568 <__assert_fail@plt+0x34b0>
   1445c:	mov	r9, lr
   14460:	tst	r5, #1
   14464:	bne	14524 <__assert_fail@plt+0x346c>
   14468:	ldr	r6, [sp, #56]	; 0x38
   1446c:	mov	r4, #0
   14470:	cmp	r6, #0
   14474:	beq	14560 <__assert_fail@plt+0x34a8>
   14478:	ldr	r0, [sp, #84]	; 0x54
   1447c:	mov	r1, #0
   14480:	cmp	sl, #0
   14484:	mov	r5, #0
   14488:	str	r1, [fp, #-72]	; 0xffffffb8
   1448c:	beq	1365c <__assert_fail@plt+0x25a4>
   14490:	b	14568 <__assert_fail@plt+0x34b0>
   14494:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14498:	ldr	r2, [sp, #84]	; 0x54
   1449c:	b	144c4 <__assert_fail@plt+0x340c>
   144a0:	ldr	ip, [fp, #-84]	; 0xffffffac
   144a4:	mov	r2, #1
   144a8:	mov	lr, r4
   144ac:	ldr	r7, [fp, #-64]	; 0xffffffc0
   144b0:	b	144c4 <__assert_fail@plt+0x340c>
   144b4:	ldr	r6, [sp, #80]	; 0x50
   144b8:	ldr	ip, [fp, #-84]	; 0xffffffac
   144bc:	ldr	r2, [sp, #84]	; 0x54
   144c0:	mov	r7, #2
   144c4:	mov	r0, #0
   144c8:	ldr	r1, [fp, #12]
   144cc:	tst	r2, #1
   144d0:	mov	r2, r7
   144d4:	mov	r3, lr
   144d8:	str	r0, [sp, #8]
   144dc:	ldr	r0, [sp, #72]	; 0x48
   144e0:	movwne	r2, #4
   144e4:	cmp	r7, #2
   144e8:	movne	r2, r7
   144ec:	str	r2, [sp]
   144f0:	mov	r2, ip
   144f4:	bic	r1, r1, #2
   144f8:	str	r0, [sp, #12]
   144fc:	ldr	r0, [sp, #76]	; 0x4c
   14500:	str	r1, [sp, #4]
   14504:	mov	r1, sl
   14508:	str	r0, [sp, #16]
   1450c:	mov	r0, r6
   14510:	bl	135dc <__assert_fail@plt+0x2524>
   14514:	mov	r8, r0
   14518:	b	145c0 <__assert_fail@plt+0x3508>
   1451c:	ldr	r2, [sp, #84]	; 0x54
   14520:	b	144c4 <__assert_fail@plt+0x340c>
   14524:	mov	r0, #5
   14528:	ldr	r1, [sp, #56]	; 0x38
   1452c:	ldr	r2, [fp, #-84]	; 0xffffffac
   14530:	mov	r3, r9
   14534:	str	r0, [sp]
   14538:	ldr	r0, [fp, #12]
   1453c:	str	r0, [sp, #4]
   14540:	ldr	r0, [fp, #16]
   14544:	str	r0, [sp, #8]
   14548:	ldr	r0, [sp, #72]	; 0x48
   1454c:	str	r0, [sp, #12]
   14550:	ldr	r0, [sp, #76]	; 0x4c
   14554:	str	r0, [sp, #16]
   14558:	ldr	r0, [sp, #80]	; 0x50
   1455c:	b	14510 <__assert_fail@plt+0x3458>
   14560:	mov	r0, #0
   14564:	str	r0, [fp, #-72]	; 0xffffffb8
   14568:	ldr	r1, [sp, #92]	; 0x5c
   1456c:	cmp	r1, #0
   14570:	beq	145b0 <__assert_fail@plt+0x34f8>
   14574:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14578:	ldr	r2, [sp, #80]	; 0x50
   1457c:	tst	r0, #1
   14580:	bne	145b4 <__assert_fail@plt+0x34fc>
   14584:	ldrb	r0, [r1]
   14588:	cmp	r0, #0
   1458c:	beq	145b4 <__assert_fail@plt+0x34fc>
   14590:	add	r1, r1, #1
   14594:	cmp	r8, sl
   14598:	strbcc	r0, [r2, r8]
   1459c:	add	r8, r8, #1
   145a0:	ldrb	r0, [r1], #1
   145a4:	cmp	r0, #0
   145a8:	bne	14594 <__assert_fail@plt+0x34dc>
   145ac:	b	145b4 <__assert_fail@plt+0x34fc>
   145b0:	ldr	r2, [sp, #80]	; 0x50
   145b4:	cmp	r8, sl
   145b8:	movcc	r0, #0
   145bc:	strbcc	r0, [r2, r8]
   145c0:	mov	r0, r8
   145c4:	sub	sp, fp, #28
   145c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145cc:	mov	r2, #1
   145d0:	b	144ac <__assert_fail@plt+0x33f4>
   145d4:	ldr	r2, [sp, #84]	; 0x54
   145d8:	mov	r7, #5
   145dc:	b	144c4 <__assert_fail@plt+0x340c>
   145e0:	bl	110a0 <abort@plt>
   145e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145e8:	add	fp, sp, #28
   145ec:	sub	sp, sp, #28
   145f0:	movw	r5, #37224	; 0x9168
   145f4:	cmp	r2, #0
   145f8:	mov	r4, r1
   145fc:	mov	r7, r0
   14600:	str	r0, [sp, #20]
   14604:	movt	r5, #2
   14608:	movne	r5, r2
   1460c:	bl	10fec <__errno_location@plt>
   14610:	mov	sl, r0
   14614:	ldm	r5, {r0, r1}
   14618:	ldr	r2, [r5, #40]	; 0x28
   1461c:	ldr	r3, [r5, #44]	; 0x2c
   14620:	add	r9, r5, #8
   14624:	ldr	r6, [sl]
   14628:	orr	r8, r1, #1
   1462c:	mov	r1, #0
   14630:	str	r6, [sp, #24]
   14634:	stm	sp, {r0, r8, r9}
   14638:	str	r2, [sp, #12]
   1463c:	str	r3, [sp, #16]
   14640:	mov	r0, #0
   14644:	mov	r2, r7
   14648:	mov	r3, r4
   1464c:	mov	r6, r4
   14650:	bl	135dc <__assert_fail@plt+0x2524>
   14654:	add	r7, r0, #1
   14658:	mov	r0, r7
   1465c:	bl	15858 <__assert_fail@plt+0x47a0>
   14660:	mov	r4, r0
   14664:	ldr	r0, [r5]
   14668:	ldr	r2, [r5, #44]	; 0x2c
   1466c:	ldr	r1, [r5, #40]	; 0x28
   14670:	mov	r3, r6
   14674:	stm	sp, {r0, r8, r9}
   14678:	str	r2, [sp, #16]
   1467c:	str	r1, [sp, #12]
   14680:	mov	r0, r4
   14684:	mov	r1, r7
   14688:	ldr	r2, [sp, #20]
   1468c:	bl	135dc <__assert_fail@plt+0x2524>
   14690:	ldr	r0, [sp, #24]
   14694:	str	r0, [sl]
   14698:	mov	r0, r4
   1469c:	sub	sp, fp, #28
   146a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146a8:	add	fp, sp, #28
   146ac:	sub	sp, sp, #36	; 0x24
   146b0:	movw	r8, #37224	; 0x9168
   146b4:	cmp	r3, #0
   146b8:	mov	r4, r2
   146bc:	str	r2, [sp, #24]
   146c0:	mov	r5, r1
   146c4:	mov	r6, r0
   146c8:	str	r0, [sp, #20]
   146cc:	movt	r8, #2
   146d0:	movne	r8, r3
   146d4:	bl	10fec <__errno_location@plt>
   146d8:	str	r0, [sp, #28]
   146dc:	cmp	r4, #0
   146e0:	add	sl, r8, #8
   146e4:	ldm	r8, {r3, r9}
   146e8:	ldr	r7, [r0]
   146ec:	ldr	r1, [r8, #40]	; 0x28
   146f0:	ldr	r2, [r8, #44]	; 0x2c
   146f4:	mov	r0, #0
   146f8:	orreq	r9, r9, #1
   146fc:	str	r7, [sp, #32]
   14700:	mov	r7, r5
   14704:	stm	sp, {r3, r9, sl}
   14708:	str	r1, [sp, #12]
   1470c:	str	r2, [sp, #16]
   14710:	mov	r1, #0
   14714:	mov	r2, r6
   14718:	mov	r3, r5
   1471c:	bl	135dc <__assert_fail@plt+0x2524>
   14720:	add	r4, r0, #1
   14724:	mov	r5, r0
   14728:	mov	r0, r4
   1472c:	bl	15858 <__assert_fail@plt+0x47a0>
   14730:	mov	r6, r0
   14734:	ldr	r0, [r8]
   14738:	ldr	r2, [r8, #44]	; 0x2c
   1473c:	ldr	r1, [r8, #40]	; 0x28
   14740:	mov	r3, r7
   14744:	stm	sp, {r0, r9, sl}
   14748:	str	r2, [sp, #16]
   1474c:	str	r1, [sp, #12]
   14750:	mov	r0, r6
   14754:	mov	r1, r4
   14758:	ldr	r2, [sp, #20]
   1475c:	bl	135dc <__assert_fail@plt+0x2524>
   14760:	ldr	r0, [sp, #24]
   14764:	ldr	r1, [sp, #32]
   14768:	ldr	r2, [sp, #28]
   1476c:	cmp	r0, #0
   14770:	str	r1, [r2]
   14774:	strne	r5, [r0]
   14778:	mov	r0, r6
   1477c:	sub	sp, fp, #28
   14780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14784:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14788:	add	fp, sp, #24
   1478c:	movw	r5, #37116	; 0x90fc
   14790:	movw	r8, #37112	; 0x90f8
   14794:	movt	r5, #2
   14798:	movt	r8, #2
   1479c:	ldr	r0, [r5]
   147a0:	ldr	r4, [r8]
   147a4:	cmp	r0, #2
   147a8:	blt	147d4 <__assert_fail@plt+0x371c>
   147ac:	add	r7, r4, #12
   147b0:	mov	r6, #0
   147b4:	ldr	r0, [r7, r6, lsl #3]
   147b8:	bl	131e8 <__assert_fail@plt+0x2130>
   147bc:	ldr	r1, [r5]
   147c0:	add	r2, r6, #2
   147c4:	add	r0, r6, #1
   147c8:	mov	r6, r0
   147cc:	cmp	r2, r1
   147d0:	blt	147b4 <__assert_fail@plt+0x36fc>
   147d4:	ldr	r0, [r4, #4]
   147d8:	movw	r7, #37272	; 0x9198
   147dc:	movt	r7, #2
   147e0:	cmp	r0, r7
   147e4:	beq	147fc <__assert_fail@plt+0x3744>
   147e8:	bl	131e8 <__assert_fail@plt+0x2130>
   147ec:	movw	r0, #37120	; 0x9100
   147f0:	mov	r6, #256	; 0x100
   147f4:	movt	r0, #2
   147f8:	strd	r6, [r0]
   147fc:	movw	r6, #37120	; 0x9100
   14800:	movt	r6, #2
   14804:	cmp	r4, r6
   14808:	beq	14818 <__assert_fail@plt+0x3760>
   1480c:	mov	r0, r4
   14810:	bl	131e8 <__assert_fail@plt+0x2130>
   14814:	str	r6, [r8]
   14818:	mov	r0, #1
   1481c:	str	r0, [r5]
   14820:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14824:	movw	r3, #37224	; 0x9168
   14828:	mvn	r2, #0
   1482c:	movt	r3, #2
   14830:	b	14834 <__assert_fail@plt+0x377c>
   14834:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14838:	add	fp, sp, #28
   1483c:	sub	sp, sp, #44	; 0x2c
   14840:	mov	r7, r3
   14844:	str	r2, [sp, #36]	; 0x24
   14848:	str	r1, [sp, #32]
   1484c:	mov	r5, r0
   14850:	bl	10fec <__errno_location@plt>
   14854:	cmp	r5, #0
   14858:	blt	149c4 <__assert_fail@plt+0x390c>
   1485c:	cmn	r5, #-2147483647	; 0x80000001
   14860:	beq	149c4 <__assert_fail@plt+0x390c>
   14864:	movw	r8, #37116	; 0x90fc
   14868:	movw	r4, #37112	; 0x90f8
   1486c:	str	r0, [sp, #28]
   14870:	ldr	r0, [r0]
   14874:	movt	r8, #2
   14878:	movt	r4, #2
   1487c:	ldr	r1, [r8]
   14880:	ldr	r6, [r4]
   14884:	str	r0, [sp, #24]
   14888:	cmp	r1, r5
   1488c:	ble	14898 <__assert_fail@plt+0x37e0>
   14890:	mov	sl, r6
   14894:	b	14900 <__assert_fail@plt+0x3848>
   14898:	movw	r9, #37120	; 0x9100
   1489c:	mov	r0, #8
   148a0:	add	r2, r5, #1
   148a4:	str	r1, [fp, #-32]	; 0xffffffe0
   148a8:	mvn	r3, #-2147483648	; 0x80000000
   148ac:	movt	r9, #2
   148b0:	str	r0, [sp]
   148b4:	sub	r2, r2, r1
   148b8:	sub	r1, fp, #32
   148bc:	subs	r0, r6, r9
   148c0:	movne	r0, r6
   148c4:	bl	15a58 <__assert_fail@plt+0x49a0>
   148c8:	cmp	r6, r9
   148cc:	mov	sl, r0
   148d0:	str	r0, [r4]
   148d4:	ldrdeq	r0, [r9]
   148d8:	stmeq	sl, {r0, r1}
   148dc:	ldr	r1, [r8]
   148e0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   148e4:	add	r0, sl, r1, lsl #3
   148e8:	sub	r1, r2, r1
   148ec:	lsl	r2, r1, #3
   148f0:	mov	r1, #0
   148f4:	bl	11004 <memset@plt>
   148f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   148fc:	str	r0, [r8]
   14900:	mov	r9, sl
   14904:	ldr	r6, [r9, r5, lsl #3]!
   14908:	ldr	r4, [r9, #4]!
   1490c:	ldm	r7, {r0, r1}
   14910:	ldr	r2, [r7, #40]	; 0x28
   14914:	ldr	r3, [r7, #44]	; 0x2c
   14918:	orr	r8, r1, #1
   1491c:	add	r1, r7, #8
   14920:	stm	sp, {r0, r8}
   14924:	add	r0, sp, #8
   14928:	str	r1, [sp, #20]
   1492c:	stm	r0, {r1, r2, r3}
   14930:	mov	r0, r4
   14934:	mov	r1, r6
   14938:	ldr	r2, [sp, #32]
   1493c:	ldr	r3, [sp, #36]	; 0x24
   14940:	bl	135dc <__assert_fail@plt+0x2524>
   14944:	cmp	r6, r0
   14948:	bhi	149ac <__assert_fail@plt+0x38f4>
   1494c:	add	r6, r0, #1
   14950:	movw	r0, #37272	; 0x9198
   14954:	movt	r0, #2
   14958:	str	r6, [sl, r5, lsl #3]
   1495c:	cmp	r4, r0
   14960:	beq	1496c <__assert_fail@plt+0x38b4>
   14964:	mov	r0, r4
   14968:	bl	131e8 <__assert_fail@plt+0x2130>
   1496c:	mov	r0, r6
   14970:	bl	15858 <__assert_fail@plt+0x47a0>
   14974:	str	r0, [r9]
   14978:	mov	r4, r0
   1497c:	add	r3, sp, #8
   14980:	ldr	r0, [r7]
   14984:	ldr	r1, [r7, #40]	; 0x28
   14988:	ldr	r2, [r7, #44]	; 0x2c
   1498c:	stm	sp, {r0, r8}
   14990:	ldr	r0, [sp, #20]
   14994:	stm	r3, {r0, r1, r2}
   14998:	mov	r0, r4
   1499c:	mov	r1, r6
   149a0:	ldr	r2, [sp, #32]
   149a4:	ldr	r3, [sp, #36]	; 0x24
   149a8:	bl	135dc <__assert_fail@plt+0x2524>
   149ac:	ldr	r0, [sp, #28]
   149b0:	ldr	r1, [sp, #24]
   149b4:	str	r1, [r0]
   149b8:	mov	r0, r4
   149bc:	sub	sp, fp, #28
   149c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149c4:	bl	110a0 <abort@plt>
   149c8:	movw	r3, #37224	; 0x9168
   149cc:	movt	r3, #2
   149d0:	b	14834 <__assert_fail@plt+0x377c>
   149d4:	movw	r3, #37224	; 0x9168
   149d8:	mov	r1, r0
   149dc:	mov	r0, #0
   149e0:	mvn	r2, #0
   149e4:	movt	r3, #2
   149e8:	b	14834 <__assert_fail@plt+0x377c>
   149ec:	movw	r3, #37224	; 0x9168
   149f0:	mov	r2, r1
   149f4:	mov	r1, r0
   149f8:	mov	r0, #0
   149fc:	movt	r3, #2
   14a00:	b	14834 <__assert_fail@plt+0x377c>
   14a04:	push	{fp, lr}
   14a08:	mov	fp, sp
   14a0c:	sub	sp, sp, #48	; 0x30
   14a10:	vmov.i32	q8, #0	; 0x00000000
   14a14:	mov	ip, #32
   14a18:	mov	r3, sp
   14a1c:	mov	lr, r2
   14a20:	cmp	r1, #10
   14a24:	add	r2, r3, #16
   14a28:	vst1.64	{d16-d17}, [r3], ip
   14a2c:	vst1.64	{d16-d17}, [r3]
   14a30:	vst1.64	{d16-d17}, [r2]
   14a34:	beq	14a54 <__assert_fail@plt+0x399c>
   14a38:	str	r1, [sp]
   14a3c:	mov	r3, sp
   14a40:	mov	r1, lr
   14a44:	mvn	r2, #0
   14a48:	bl	14834 <__assert_fail@plt+0x377c>
   14a4c:	mov	sp, fp
   14a50:	pop	{fp, pc}
   14a54:	bl	110a0 <abort@plt>
   14a58:	push	{r4, sl, fp, lr}
   14a5c:	add	fp, sp, #8
   14a60:	sub	sp, sp, #48	; 0x30
   14a64:	mov	ip, r3
   14a68:	mov	r3, sp
   14a6c:	vmov.i32	q8, #0	; 0x00000000
   14a70:	mov	lr, #32
   14a74:	cmp	r1, #10
   14a78:	add	r4, r3, #16
   14a7c:	vst1.64	{d16-d17}, [r3], lr
   14a80:	vst1.64	{d16-d17}, [r3]
   14a84:	vst1.64	{d16-d17}, [r4]
   14a88:	beq	14aa8 <__assert_fail@plt+0x39f0>
   14a8c:	str	r1, [sp]
   14a90:	mov	r1, r2
   14a94:	mov	r3, sp
   14a98:	mov	r2, ip
   14a9c:	bl	14834 <__assert_fail@plt+0x377c>
   14aa0:	sub	sp, fp, #8
   14aa4:	pop	{r4, sl, fp, pc}
   14aa8:	bl	110a0 <abort@plt>
   14aac:	push	{fp, lr}
   14ab0:	mov	fp, sp
   14ab4:	sub	sp, sp, #48	; 0x30
   14ab8:	mov	r3, sp
   14abc:	vmov.i32	q8, #0	; 0x00000000
   14ac0:	mov	ip, #32
   14ac4:	cmp	r0, #10
   14ac8:	add	r2, r3, #16
   14acc:	vst1.64	{d16-d17}, [r3], ip
   14ad0:	vst1.64	{d16-d17}, [r3]
   14ad4:	vst1.64	{d16-d17}, [r2]
   14ad8:	beq	14af8 <__assert_fail@plt+0x3a40>
   14adc:	str	r0, [sp]
   14ae0:	mov	r3, sp
   14ae4:	mov	r0, #0
   14ae8:	mvn	r2, #0
   14aec:	bl	14834 <__assert_fail@plt+0x377c>
   14af0:	mov	sp, fp
   14af4:	pop	{fp, pc}
   14af8:	bl	110a0 <abort@plt>
   14afc:	push	{fp, lr}
   14b00:	mov	fp, sp
   14b04:	sub	sp, sp, #48	; 0x30
   14b08:	mov	r3, sp
   14b0c:	vmov.i32	q8, #0	; 0x00000000
   14b10:	mov	ip, #32
   14b14:	cmp	r0, #10
   14b18:	add	lr, r3, #16
   14b1c:	vst1.64	{d16-d17}, [r3], ip
   14b20:	vst1.64	{d16-d17}, [r3]
   14b24:	vst1.64	{d16-d17}, [lr]
   14b28:	beq	14b44 <__assert_fail@plt+0x3a8c>
   14b2c:	str	r0, [sp]
   14b30:	mov	r3, sp
   14b34:	mov	r0, #0
   14b38:	bl	14834 <__assert_fail@plt+0x377c>
   14b3c:	mov	sp, fp
   14b40:	pop	{fp, pc}
   14b44:	bl	110a0 <abort@plt>
   14b48:	push	{r4, sl, fp, lr}
   14b4c:	add	fp, sp, #8
   14b50:	sub	sp, sp, #48	; 0x30
   14b54:	mov	lr, r0
   14b58:	movw	r0, #37224	; 0x9168
   14b5c:	mov	r3, #32
   14b60:	mov	ip, r1
   14b64:	mov	r4, #1
   14b68:	movt	r0, #2
   14b6c:	add	r1, r0, #16
   14b70:	vld1.64	{d16-d17}, [r0], r3
   14b74:	mov	r3, sp
   14b78:	vld1.64	{d18-d19}, [r1]
   14b7c:	add	r1, r3, #16
   14b80:	vld1.64	{d20-d21}, [r0]
   14b84:	add	r0, r3, #32
   14b88:	vst1.64	{d18-d19}, [r1]
   14b8c:	mov	r1, r3
   14b90:	vst1.64	{d20-d21}, [r0]
   14b94:	mov	r0, #28
   14b98:	and	r0, r0, r2, lsr #3
   14b9c:	and	r2, r2, #31
   14ba0:	vst1.64	{d16-d17}, [r1], r0
   14ba4:	ldr	r0, [r1, #8]
   14ba8:	bic	r4, r4, r0, lsr r2
   14bac:	eor	r0, r0, r4, lsl r2
   14bb0:	mov	r2, ip
   14bb4:	str	r0, [r1, #8]
   14bb8:	mov	r0, #0
   14bbc:	mov	r1, lr
   14bc0:	bl	14834 <__assert_fail@plt+0x377c>
   14bc4:	sub	sp, fp, #8
   14bc8:	pop	{r4, sl, fp, pc}
   14bcc:	push	{fp, lr}
   14bd0:	mov	fp, sp
   14bd4:	sub	sp, sp, #48	; 0x30
   14bd8:	mov	ip, r0
   14bdc:	movw	r0, #37224	; 0x9168
   14be0:	mov	r3, #32
   14be4:	movt	r0, #2
   14be8:	add	r2, r0, #16
   14bec:	vld1.64	{d16-d17}, [r0], r3
   14bf0:	mov	r3, sp
   14bf4:	vld1.64	{d18-d19}, [r2]
   14bf8:	add	r2, r3, #16
   14bfc:	vld1.64	{d20-d21}, [r0]
   14c00:	add	r0, r3, #32
   14c04:	vst1.64	{d18-d19}, [r2]
   14c08:	mov	r2, r3
   14c0c:	vst1.64	{d20-d21}, [r0]
   14c10:	mov	r0, #28
   14c14:	and	r0, r0, r1, lsr #3
   14c18:	and	r1, r1, #31
   14c1c:	vst1.64	{d16-d17}, [r2], r0
   14c20:	mov	r0, #1
   14c24:	ldr	lr, [r2, #8]
   14c28:	bic	r0, r0, lr, lsr r1
   14c2c:	eor	r0, lr, r0, lsl r1
   14c30:	mov	r1, ip
   14c34:	str	r0, [r2, #8]
   14c38:	mov	r0, #0
   14c3c:	mvn	r2, #0
   14c40:	bl	14834 <__assert_fail@plt+0x377c>
   14c44:	mov	sp, fp
   14c48:	pop	{fp, pc}
   14c4c:	push	{fp, lr}
   14c50:	mov	fp, sp
   14c54:	sub	sp, sp, #48	; 0x30
   14c58:	movw	r2, #37224	; 0x9168
   14c5c:	mov	r3, #32
   14c60:	mov	r1, r0
   14c64:	movt	r2, #2
   14c68:	add	r0, r2, #16
   14c6c:	vld1.64	{d16-d17}, [r2], r3
   14c70:	mov	r3, sp
   14c74:	vld1.64	{d18-d19}, [r0]
   14c78:	add	r0, r3, #16
   14c7c:	vld1.64	{d20-d21}, [r2]
   14c80:	mov	r2, r3
   14c84:	vst1.64	{d18-d19}, [r0]
   14c88:	add	r0, r3, #32
   14c8c:	vst1.64	{d20-d21}, [r0]
   14c90:	mov	r0, #12
   14c94:	vst1.64	{d16-d17}, [r2], r0
   14c98:	ldr	r0, [r2]
   14c9c:	orr	r0, r0, #67108864	; 0x4000000
   14ca0:	str	r0, [r2]
   14ca4:	mov	r0, #0
   14ca8:	mvn	r2, #0
   14cac:	bl	14834 <__assert_fail@plt+0x377c>
   14cb0:	mov	sp, fp
   14cb4:	pop	{fp, pc}
   14cb8:	push	{fp, lr}
   14cbc:	mov	fp, sp
   14cc0:	sub	sp, sp, #48	; 0x30
   14cc4:	mov	ip, r1
   14cc8:	mov	r1, r0
   14ccc:	movw	r0, #37224	; 0x9168
   14cd0:	mov	r3, #32
   14cd4:	movt	r0, #2
   14cd8:	add	r2, r0, #16
   14cdc:	vld1.64	{d16-d17}, [r0], r3
   14ce0:	mov	r3, sp
   14ce4:	vld1.64	{d18-d19}, [r2]
   14ce8:	add	r2, r3, #16
   14cec:	vld1.64	{d20-d21}, [r0]
   14cf0:	add	r0, r3, #32
   14cf4:	vst1.64	{d18-d19}, [r2]
   14cf8:	mov	r2, r3
   14cfc:	vst1.64	{d20-d21}, [r0]
   14d00:	mov	r0, #12
   14d04:	vst1.64	{d16-d17}, [r2], r0
   14d08:	ldr	r0, [r2]
   14d0c:	orr	r0, r0, #67108864	; 0x4000000
   14d10:	str	r0, [r2]
   14d14:	mov	r0, #0
   14d18:	mov	r2, ip
   14d1c:	bl	14834 <__assert_fail@plt+0x377c>
   14d20:	mov	sp, fp
   14d24:	pop	{fp, pc}
   14d28:	push	{r4, sl, fp, lr}
   14d2c:	add	fp, sp, #8
   14d30:	sub	sp, sp, #96	; 0x60
   14d34:	mov	ip, r2
   14d38:	mov	r2, sp
   14d3c:	vmov.i32	q8, #0	; 0x00000000
   14d40:	mov	r4, #28
   14d44:	cmp	r1, #10
   14d48:	mov	r3, r2
   14d4c:	add	lr, r2, #16
   14d50:	vst1.64	{d16-d17}, [r3], r4
   14d54:	vst1.64	{d16-d17}, [lr]
   14d58:	vst1.32	{d16-d17}, [r3]
   14d5c:	beq	14dac <__assert_fail@plt+0x3cf4>
   14d60:	vld1.64	{d16-d17}, [r2], r4
   14d64:	vld1.64	{d18-d19}, [lr]
   14d68:	add	r3, sp, #48	; 0x30
   14d6c:	add	r4, r3, #4
   14d70:	vld1.32	{d20-d21}, [r2]
   14d74:	add	r2, r3, #20
   14d78:	vst1.32	{d16-d17}, [r4]
   14d7c:	vst1.32	{d18-d19}, [r2]
   14d80:	add	r2, r3, #32
   14d84:	vst1.32	{d20-d21}, [r2]
   14d88:	str	r1, [sp, #48]	; 0x30
   14d8c:	mvn	r2, #0
   14d90:	ldr	r1, [sp, #60]	; 0x3c
   14d94:	orr	r1, r1, #67108864	; 0x4000000
   14d98:	str	r1, [sp, #60]	; 0x3c
   14d9c:	mov	r1, ip
   14da0:	bl	14834 <__assert_fail@plt+0x377c>
   14da4:	sub	sp, fp, #8
   14da8:	pop	{r4, sl, fp, pc}
   14dac:	bl	110a0 <abort@plt>
   14db0:	push	{r4, r5, fp, lr}
   14db4:	add	fp, sp, #8
   14db8:	sub	sp, sp, #48	; 0x30
   14dbc:	mov	ip, r3
   14dc0:	movw	r3, #37224	; 0x9168
   14dc4:	mov	lr, #32
   14dc8:	cmp	r1, #0
   14dcc:	mov	r5, sp
   14dd0:	movt	r3, #2
   14dd4:	cmpne	r2, #0
   14dd8:	add	r4, r3, #16
   14ddc:	vld1.64	{d16-d17}, [r3], lr
   14de0:	vld1.64	{d18-d19}, [r4]
   14de4:	add	r4, r5, #16
   14de8:	vld1.64	{d20-d21}, [r3]
   14dec:	vst1.64	{d16-d17}, [r5], lr
   14df0:	mov	r3, #10
   14df4:	vst1.64	{d18-d19}, [r4]
   14df8:	vst1.64	{d20-d21}, [r5]
   14dfc:	str	r3, [sp]
   14e00:	bne	14e08 <__assert_fail@plt+0x3d50>
   14e04:	bl	110a0 <abort@plt>
   14e08:	str	r2, [sp, #44]	; 0x2c
   14e0c:	str	r1, [sp, #40]	; 0x28
   14e10:	mov	r3, sp
   14e14:	mov	r1, ip
   14e18:	mvn	r2, #0
   14e1c:	bl	14834 <__assert_fail@plt+0x377c>
   14e20:	sub	sp, fp, #8
   14e24:	pop	{r4, r5, fp, pc}
   14e28:	push	{r4, r5, fp, lr}
   14e2c:	add	fp, sp, #8
   14e30:	sub	sp, sp, #48	; 0x30
   14e34:	mov	lr, r3
   14e38:	movw	r3, #37224	; 0x9168
   14e3c:	mov	ip, #32
   14e40:	cmp	r1, #0
   14e44:	mov	r5, sp
   14e48:	movt	r3, #2
   14e4c:	cmpne	r2, #0
   14e50:	add	r4, r3, #16
   14e54:	vld1.64	{d16-d17}, [r3], ip
   14e58:	vld1.64	{d18-d19}, [r4]
   14e5c:	add	r4, r5, #16
   14e60:	vld1.64	{d20-d21}, [r3]
   14e64:	vst1.64	{d16-d17}, [r5], ip
   14e68:	mov	r3, #10
   14e6c:	vst1.64	{d18-d19}, [r4]
   14e70:	vst1.64	{d20-d21}, [r5]
   14e74:	str	r3, [sp]
   14e78:	bne	14e80 <__assert_fail@plt+0x3dc8>
   14e7c:	bl	110a0 <abort@plt>
   14e80:	ldr	ip, [fp, #8]
   14e84:	str	r2, [sp, #44]	; 0x2c
   14e88:	str	r1, [sp, #40]	; 0x28
   14e8c:	mov	r3, sp
   14e90:	mov	r1, lr
   14e94:	mov	r2, ip
   14e98:	bl	14834 <__assert_fail@plt+0x377c>
   14e9c:	sub	sp, fp, #8
   14ea0:	pop	{r4, r5, fp, pc}
   14ea4:	push	{r4, sl, fp, lr}
   14ea8:	add	fp, sp, #8
   14eac:	sub	sp, sp, #48	; 0x30
   14eb0:	mov	ip, r2
   14eb4:	movw	r2, #37224	; 0x9168
   14eb8:	mov	lr, #32
   14ebc:	cmp	r0, #0
   14ec0:	mov	r4, sp
   14ec4:	movt	r2, #2
   14ec8:	cmpne	r1, #0
   14ecc:	add	r3, r2, #16
   14ed0:	vld1.64	{d16-d17}, [r2], lr
   14ed4:	vld1.64	{d18-d19}, [r3]
   14ed8:	add	r3, r4, #16
   14edc:	vld1.64	{d20-d21}, [r2]
   14ee0:	vst1.64	{d16-d17}, [r4], lr
   14ee4:	mov	r2, #10
   14ee8:	vst1.64	{d18-d19}, [r3]
   14eec:	vst1.64	{d20-d21}, [r4]
   14ef0:	str	r2, [sp]
   14ef4:	bne	14efc <__assert_fail@plt+0x3e44>
   14ef8:	bl	110a0 <abort@plt>
   14efc:	str	r1, [sp, #44]	; 0x2c
   14f00:	str	r0, [sp, #40]	; 0x28
   14f04:	mov	r3, sp
   14f08:	mov	r0, #0
   14f0c:	mov	r1, ip
   14f10:	mvn	r2, #0
   14f14:	bl	14834 <__assert_fail@plt+0x377c>
   14f18:	sub	sp, fp, #8
   14f1c:	pop	{r4, sl, fp, pc}
   14f20:	push	{r4, r5, fp, lr}
   14f24:	add	fp, sp, #8
   14f28:	sub	sp, sp, #48	; 0x30
   14f2c:	mov	lr, r2
   14f30:	movw	r2, #37224	; 0x9168
   14f34:	mov	ip, r3
   14f38:	mov	r3, #32
   14f3c:	cmp	r0, #0
   14f40:	mov	r5, sp
   14f44:	movt	r2, #2
   14f48:	cmpne	r1, #0
   14f4c:	add	r4, r2, #16
   14f50:	vld1.64	{d16-d17}, [r2], r3
   14f54:	vld1.64	{d18-d19}, [r4]
   14f58:	add	r4, r5, #16
   14f5c:	vld1.64	{d20-d21}, [r2]
   14f60:	vst1.64	{d16-d17}, [r5], r3
   14f64:	mov	r2, #10
   14f68:	vst1.64	{d18-d19}, [r4]
   14f6c:	vst1.64	{d20-d21}, [r5]
   14f70:	str	r2, [sp]
   14f74:	bne	14f7c <__assert_fail@plt+0x3ec4>
   14f78:	bl	110a0 <abort@plt>
   14f7c:	str	r1, [sp, #44]	; 0x2c
   14f80:	str	r0, [sp, #40]	; 0x28
   14f84:	mov	r3, sp
   14f88:	mov	r0, #0
   14f8c:	mov	r1, lr
   14f90:	mov	r2, ip
   14f94:	bl	14834 <__assert_fail@plt+0x377c>
   14f98:	sub	sp, fp, #8
   14f9c:	pop	{r4, r5, fp, pc}
   14fa0:	movw	r3, #37128	; 0x9108
   14fa4:	movt	r3, #2
   14fa8:	b	14834 <__assert_fail@plt+0x377c>
   14fac:	movw	r3, #37128	; 0x9108
   14fb0:	mov	r2, r1
   14fb4:	mov	r1, r0
   14fb8:	mov	r0, #0
   14fbc:	movt	r3, #2
   14fc0:	b	14834 <__assert_fail@plt+0x377c>
   14fc4:	movw	r3, #37128	; 0x9108
   14fc8:	mvn	r2, #0
   14fcc:	movt	r3, #2
   14fd0:	b	14834 <__assert_fail@plt+0x377c>
   14fd4:	movw	r3, #37128	; 0x9108
   14fd8:	mov	r1, r0
   14fdc:	mov	r0, #0
   14fe0:	mvn	r2, #0
   14fe4:	movt	r3, #2
   14fe8:	b	14834 <__assert_fail@plt+0x377c>
   14fec:	push	{r4, r5, fp, lr}
   14ff0:	add	fp, sp, #8
   14ff4:	mov	r5, r0
   14ff8:	mov	r4, r1
   14ffc:	mov	r0, #0
   15000:	mov	r2, #5
   15004:	mov	r1, r5
   15008:	bl	10ed8 <dcgettext@plt>
   1500c:	cmp	r0, r5
   15010:	popne	{r4, r5, fp, pc}
   15014:	bl	16e60 <__assert_fail@plt+0x5da8>
   15018:	ldrb	r1, [r0]
   1501c:	and	r1, r1, #223	; 0xdf
   15020:	cmp	r1, #71	; 0x47
   15024:	beq	1508c <__assert_fail@plt+0x3fd4>
   15028:	cmp	r1, #85	; 0x55
   1502c:	bne	150b0 <__assert_fail@plt+0x3ff8>
   15030:	ldrb	r1, [r0, #1]
   15034:	and	r1, r1, #223	; 0xdf
   15038:	cmp	r1, #84	; 0x54
   1503c:	bne	150b0 <__assert_fail@plt+0x3ff8>
   15040:	ldrb	r1, [r0, #2]
   15044:	and	r1, r1, #223	; 0xdf
   15048:	cmp	r1, #70	; 0x46
   1504c:	ldrbeq	r1, [r0, #3]
   15050:	cmpeq	r1, #45	; 0x2d
   15054:	bne	150b0 <__assert_fail@plt+0x3ff8>
   15058:	ldrb	r1, [r0, #4]
   1505c:	cmp	r1, #56	; 0x38
   15060:	ldrbeq	r0, [r0, #5]
   15064:	cmpeq	r0, #0
   15068:	bne	150b0 <__assert_fail@plt+0x3ff8>
   1506c:	ldrb	r1, [r5]
   15070:	movw	r2, #31937	; 0x7cc1
   15074:	movw	r0, #31941	; 0x7cc5
   15078:	movt	r2, #1
   1507c:	movt	r0, #1
   15080:	cmp	r1, #96	; 0x60
   15084:	moveq	r0, r2
   15088:	pop	{r4, r5, fp, pc}
   1508c:	ldrb	r1, [r0, #1]
   15090:	and	r1, r1, #223	; 0xdf
   15094:	cmp	r1, #66	; 0x42
   15098:	bne	150b0 <__assert_fail@plt+0x3ff8>
   1509c:	ldrb	r1, [r0, #2]
   150a0:	cmp	r1, #49	; 0x31
   150a4:	ldrbeq	r1, [r0, #3]
   150a8:	cmpeq	r1, #56	; 0x38
   150ac:	beq	150cc <__assert_fail@plt+0x4014>
   150b0:	movw	r1, #31931	; 0x7cbb
   150b4:	movw	r0, #31935	; 0x7cbf
   150b8:	cmp	r4, #9
   150bc:	movt	r1, #1
   150c0:	movt	r0, #1
   150c4:	moveq	r0, r1
   150c8:	pop	{r4, r5, fp, pc}
   150cc:	ldrb	r1, [r0, #4]
   150d0:	cmp	r1, #48	; 0x30
   150d4:	ldrbeq	r1, [r0, #5]
   150d8:	cmpeq	r1, #51	; 0x33
   150dc:	bne	150b0 <__assert_fail@plt+0x3ff8>
   150e0:	ldrb	r1, [r0, #6]
   150e4:	cmp	r1, #48	; 0x30
   150e8:	ldrbeq	r0, [r0, #7]
   150ec:	cmpeq	r0, #0
   150f0:	bne	150b0 <__assert_fail@plt+0x3ff8>
   150f4:	ldrb	r1, [r5]
   150f8:	movw	r2, #31945	; 0x7cc9
   150fc:	movw	r0, #31949	; 0x7ccd
   15100:	movt	r2, #1
   15104:	movt	r0, #1
   15108:	b	15080 <__assert_fail@plt+0x3fc8>
   1510c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15110:	add	fp, sp, #24
   15114:	movw	r8, #0
   15118:	mov	r6, r2
   1511c:	mov	r4, r1
   15120:	mov	r5, r0
   15124:	movt	r8, #32752	; 0x7ff0
   15128:	mov	r0, r5
   1512c:	mov	r1, r4
   15130:	mov	r2, r6
   15134:	bl	10e6c <read@plt>
   15138:	mov	r7, r0
   1513c:	cmn	r0, #1
   15140:	bgt	15168 <__assert_fail@plt+0x40b0>
   15144:	bl	10fec <__errno_location@plt>
   15148:	ldr	r0, [r0]
   1514c:	cmp	r0, #4
   15150:	beq	15128 <__assert_fail@plt+0x4070>
   15154:	cmp	r6, r8
   15158:	bls	15168 <__assert_fail@plt+0x40b0>
   1515c:	cmp	r0, #22
   15160:	mov	r6, r8
   15164:	beq	15128 <__assert_fail@plt+0x4070>
   15168:	mov	r0, r7
   1516c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15170:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15174:	add	fp, sp, #24
   15178:	sub	sp, sp, #32
   1517c:	ldr	r6, [fp, #12]
   15180:	ldr	r7, [fp, #8]
   15184:	mov	r4, r2
   15188:	mov	r8, r0
   1518c:	cmp	r1, #0
   15190:	beq	151b8 <__assert_fail@plt+0x4100>
   15194:	movw	r2, #32036	; 0x7d24
   15198:	mov	r5, r1
   1519c:	str	r3, [sp, #4]
   151a0:	str	r4, [sp]
   151a4:	mov	r0, r8
   151a8:	mov	r1, #1
   151ac:	movt	r2, #1
   151b0:	mov	r3, r5
   151b4:	b	151d0 <__assert_fail@plt+0x4118>
   151b8:	movw	r2, #32048	; 0x7d30
   151bc:	str	r3, [sp]
   151c0:	mov	r0, r8
   151c4:	mov	r1, #1
   151c8:	mov	r3, r4
   151cc:	movt	r2, #1
   151d0:	bl	11028 <__fprintf_chk@plt>
   151d4:	movw	r1, #32055	; 0x7d37
   151d8:	mov	r0, #0
   151dc:	mov	r2, #5
   151e0:	movt	r1, #1
   151e4:	bl	10ed8 <dcgettext@plt>
   151e8:	movw	r2, #32773	; 0x8005
   151ec:	mov	r3, r0
   151f0:	movw	r0, #2022	; 0x7e6
   151f4:	mov	r1, #1
   151f8:	str	r0, [sp]
   151fc:	movt	r2, #1
   15200:	mov	r0, r8
   15204:	bl	11028 <__fprintf_chk@plt>
   15208:	movw	r4, #31152	; 0x79b0
   1520c:	mov	r1, r8
   15210:	movt	r4, #1
   15214:	mov	r0, r4
   15218:	bl	10e48 <fputs_unlocked@plt>
   1521c:	movw	r1, #32059	; 0x7d3b
   15220:	mov	r0, #0
   15224:	mov	r2, #5
   15228:	movt	r1, #1
   1522c:	bl	10ed8 <dcgettext@plt>
   15230:	movw	r3, #32230	; 0x7de6
   15234:	mov	r2, r0
   15238:	mov	r0, r8
   1523c:	mov	r1, #1
   15240:	movt	r3, #1
   15244:	bl	11028 <__fprintf_chk@plt>
   15248:	mov	r0, r4
   1524c:	mov	r1, r8
   15250:	bl	10e48 <fputs_unlocked@plt>
   15254:	cmp	r6, #9
   15258:	bhi	15294 <__assert_fail@plt+0x41dc>
   1525c:	add	r0, pc, #0
   15260:	ldr	pc, [r0, r6, lsl #2]
   15264:	andeq	r5, r1, ip, lsl #5
   15268:	andeq	r5, r1, r0, lsr #5
   1526c:	ldrdeq	r5, [r1], -r0
   15270:	strdeq	r5, [r1], -r8
   15274:	andeq	r5, r1, r0, lsr #6
   15278:	andeq	r5, r1, r8, asr #6
   1527c:	andeq	r5, r1, r0, ror r3
   15280:	andeq	r5, r1, r8, lsr #7
   15284:	andeq	r5, r1, r8, asr #8
   15288:	strdeq	r5, [r1], -r0
   1528c:	sub	sp, fp, #24
   15290:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15294:	movw	r1, #32583	; 0x7f47
   15298:	movt	r1, #1
   1529c:	b	153f8 <__assert_fail@plt+0x4340>
   152a0:	movw	r1, #32264	; 0x7e08
   152a4:	mov	r0, #0
   152a8:	mov	r2, #5
   152ac:	movt	r1, #1
   152b0:	bl	10ed8 <dcgettext@plt>
   152b4:	ldr	r3, [r7]
   152b8:	mov	r2, r0
   152bc:	mov	r0, r8
   152c0:	mov	r1, #1
   152c4:	sub	sp, fp, #24
   152c8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   152cc:	b	11028 <__fprintf_chk@plt>
   152d0:	movw	r1, #32280	; 0x7e18
   152d4:	mov	r0, #0
   152d8:	mov	r2, #5
   152dc:	movt	r1, #1
   152e0:	bl	10ed8 <dcgettext@plt>
   152e4:	mov	r2, r0
   152e8:	ldr	r3, [r7]
   152ec:	ldr	r0, [r7, #4]
   152f0:	str	r0, [sp]
   152f4:	b	153e4 <__assert_fail@plt+0x432c>
   152f8:	movw	r1, #32303	; 0x7e2f
   152fc:	mov	r0, #0
   15300:	mov	r2, #5
   15304:	movt	r1, #1
   15308:	bl	10ed8 <dcgettext@plt>
   1530c:	ldr	r3, [r7]
   15310:	mov	r2, r0
   15314:	ldmib	r7, {r0, r1}
   15318:	stm	sp, {r0, r1}
   1531c:	b	153e4 <__assert_fail@plt+0x432c>
   15320:	movw	r1, #32331	; 0x7e4b
   15324:	mov	r0, #0
   15328:	mov	r2, #5
   1532c:	movt	r1, #1
   15330:	bl	10ed8 <dcgettext@plt>
   15334:	ldr	r3, [r7]
   15338:	mov	r2, r0
   1533c:	ldmib	r7, {r0, r1, r7}
   15340:	stm	sp, {r0, r1, r7}
   15344:	b	153e4 <__assert_fail@plt+0x432c>
   15348:	movw	r1, #32363	; 0x7e6b
   1534c:	mov	r0, #0
   15350:	mov	r2, #5
   15354:	movt	r1, #1
   15358:	bl	10ed8 <dcgettext@plt>
   1535c:	ldr	r3, [r7]
   15360:	mov	r2, r0
   15364:	ldmib	r7, {r0, r1, r6, r7}
   15368:	stm	sp, {r0, r1, r6, r7}
   1536c:	b	153e4 <__assert_fail@plt+0x432c>
   15370:	movw	r1, #32399	; 0x7e8f
   15374:	mov	r0, #0
   15378:	mov	r2, #5
   1537c:	movt	r1, #1
   15380:	bl	10ed8 <dcgettext@plt>
   15384:	ldr	r3, [r7]
   15388:	mov	r2, r0
   1538c:	ldmib	r7, {r0, r1, r6}
   15390:	ldr	r5, [r7, #16]
   15394:	ldr	r7, [r7, #20]
   15398:	stm	sp, {r0, r1, r6}
   1539c:	str	r5, [sp, #12]
   153a0:	str	r7, [sp, #16]
   153a4:	b	153e4 <__assert_fail@plt+0x432c>
   153a8:	movw	r1, #32439	; 0x7eb7
   153ac:	mov	r0, #0
   153b0:	mov	r2, #5
   153b4:	movt	r1, #1
   153b8:	bl	10ed8 <dcgettext@plt>
   153bc:	ldr	r3, [r7]
   153c0:	mov	r2, r0
   153c4:	ldmib	r7, {r0, r1, r6}
   153c8:	ldr	r5, [r7, #16]
   153cc:	ldr	r4, [r7, #20]
   153d0:	ldr	r7, [r7, #24]
   153d4:	stm	sp, {r0, r1, r6}
   153d8:	str	r5, [sp, #12]
   153dc:	str	r4, [sp, #16]
   153e0:	str	r7, [sp, #20]
   153e4:	mov	r0, r8
   153e8:	mov	r1, #1
   153ec:	b	15498 <__assert_fail@plt+0x43e0>
   153f0:	movw	r1, #32531	; 0x7f13
   153f4:	movt	r1, #1
   153f8:	mov	r0, #0
   153fc:	mov	r2, #5
   15400:	bl	10ed8 <dcgettext@plt>
   15404:	mov	ip, r0
   15408:	ldr	r3, [r7]
   1540c:	ldr	r0, [r7, #4]
   15410:	ldr	r1, [r7, #8]
   15414:	ldr	r6, [r7, #12]
   15418:	ldr	r5, [r7, #16]
   1541c:	ldr	r4, [r7, #20]
   15420:	ldr	r2, [r7, #24]
   15424:	ldr	lr, [r7, #28]
   15428:	ldr	r7, [r7, #32]
   1542c:	stm	sp, {r0, r1, r6}
   15430:	str	r5, [sp, #12]
   15434:	str	r4, [sp, #16]
   15438:	str	r2, [sp, #20]
   1543c:	str	lr, [sp, #24]
   15440:	str	r7, [sp, #28]
   15444:	b	1548c <__assert_fail@plt+0x43d4>
   15448:	movw	r1, #32483	; 0x7ee3
   1544c:	mov	r0, #0
   15450:	mov	r2, #5
   15454:	movt	r1, #1
   15458:	bl	10ed8 <dcgettext@plt>
   1545c:	mov	ip, r0
   15460:	ldr	r3, [r7]
   15464:	ldmib	r7, {r0, r1, r6}
   15468:	ldr	r5, [r7, #16]
   1546c:	ldr	r4, [r7, #20]
   15470:	ldr	r2, [r7, #24]
   15474:	ldr	r7, [r7, #28]
   15478:	stm	sp, {r0, r1, r6}
   1547c:	str	r5, [sp, #12]
   15480:	str	r4, [sp, #16]
   15484:	str	r2, [sp, #20]
   15488:	str	r7, [sp, #24]
   1548c:	mov	r0, r8
   15490:	mov	r1, #1
   15494:	mov	r2, ip
   15498:	bl	11028 <__fprintf_chk@plt>
   1549c:	sub	sp, fp, #24
   154a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   154a4:	push	{r4, sl, fp, lr}
   154a8:	add	fp, sp, #8
   154ac:	sub	sp, sp, #8
   154b0:	ldr	ip, [fp, #8]
   154b4:	mov	lr, #0
   154b8:	ldr	r4, [ip, lr, lsl #2]
   154bc:	add	lr, lr, #1
   154c0:	cmp	r4, #0
   154c4:	bne	154b8 <__assert_fail@plt+0x4400>
   154c8:	sub	r4, lr, #1
   154cc:	str	ip, [sp]
   154d0:	str	r4, [sp, #4]
   154d4:	bl	15170 <__assert_fail@plt+0x40b8>
   154d8:	sub	sp, fp, #8
   154dc:	pop	{r4, sl, fp, pc}
   154e0:	push	{fp, lr}
   154e4:	mov	fp, sp
   154e8:	sub	sp, sp, #48	; 0x30
   154ec:	ldr	ip, [fp, #8]
   154f0:	ldr	lr, [ip]
   154f4:	cmp	lr, #0
   154f8:	str	lr, [sp, #8]
   154fc:	beq	15598 <__assert_fail@plt+0x44e0>
   15500:	ldr	lr, [ip, #4]
   15504:	cmp	lr, #0
   15508:	str	lr, [sp, #12]
   1550c:	beq	155a0 <__assert_fail@plt+0x44e8>
   15510:	ldr	lr, [ip, #8]
   15514:	cmp	lr, #0
   15518:	str	lr, [sp, #16]
   1551c:	beq	155a8 <__assert_fail@plt+0x44f0>
   15520:	ldr	lr, [ip, #12]
   15524:	cmp	lr, #0
   15528:	str	lr, [sp, #20]
   1552c:	beq	155b0 <__assert_fail@plt+0x44f8>
   15530:	ldr	lr, [ip, #16]
   15534:	cmp	lr, #0
   15538:	str	lr, [sp, #24]
   1553c:	beq	155b8 <__assert_fail@plt+0x4500>
   15540:	ldr	lr, [ip, #20]
   15544:	cmp	lr, #0
   15548:	str	lr, [sp, #28]
   1554c:	beq	155c0 <__assert_fail@plt+0x4508>
   15550:	ldr	lr, [ip, #24]
   15554:	cmp	lr, #0
   15558:	str	lr, [sp, #32]
   1555c:	beq	155c8 <__assert_fail@plt+0x4510>
   15560:	ldr	lr, [ip, #28]
   15564:	cmp	lr, #0
   15568:	str	lr, [sp, #36]	; 0x24
   1556c:	beq	155d0 <__assert_fail@plt+0x4518>
   15570:	ldr	lr, [ip, #32]
   15574:	cmp	lr, #0
   15578:	str	lr, [sp, #40]	; 0x28
   1557c:	beq	155d8 <__assert_fail@plt+0x4520>
   15580:	ldr	lr, [ip, #36]	; 0x24
   15584:	mov	ip, #10
   15588:	cmp	lr, #0
   1558c:	str	lr, [sp, #44]	; 0x2c
   15590:	movweq	ip, #9
   15594:	b	155dc <__assert_fail@plt+0x4524>
   15598:	mov	ip, #0
   1559c:	b	155dc <__assert_fail@plt+0x4524>
   155a0:	mov	ip, #1
   155a4:	b	155dc <__assert_fail@plt+0x4524>
   155a8:	mov	ip, #2
   155ac:	b	155dc <__assert_fail@plt+0x4524>
   155b0:	mov	ip, #3
   155b4:	b	155dc <__assert_fail@plt+0x4524>
   155b8:	mov	ip, #4
   155bc:	b	155dc <__assert_fail@plt+0x4524>
   155c0:	mov	ip, #5
   155c4:	b	155dc <__assert_fail@plt+0x4524>
   155c8:	mov	ip, #6
   155cc:	b	155dc <__assert_fail@plt+0x4524>
   155d0:	mov	ip, #7
   155d4:	b	155dc <__assert_fail@plt+0x4524>
   155d8:	mov	ip, #8
   155dc:	add	lr, sp, #8
   155e0:	str	ip, [sp, #4]
   155e4:	str	lr, [sp]
   155e8:	bl	15170 <__assert_fail@plt+0x40b8>
   155ec:	mov	sp, fp
   155f0:	pop	{fp, pc}
   155f4:	push	{fp, lr}
   155f8:	mov	fp, sp
   155fc:	sub	sp, sp, #56	; 0x38
   15600:	add	ip, fp, #8
   15604:	str	ip, [sp, #12]
   15608:	ldr	lr, [fp, #8]
   1560c:	cmp	lr, #0
   15610:	str	lr, [sp, #16]
   15614:	beq	156b0 <__assert_fail@plt+0x45f8>
   15618:	ldr	lr, [ip, #4]
   1561c:	cmp	lr, #0
   15620:	str	lr, [sp, #20]
   15624:	beq	156b8 <__assert_fail@plt+0x4600>
   15628:	ldr	lr, [ip, #8]
   1562c:	cmp	lr, #0
   15630:	str	lr, [sp, #24]
   15634:	beq	156c0 <__assert_fail@plt+0x4608>
   15638:	ldr	lr, [ip, #12]
   1563c:	cmp	lr, #0
   15640:	str	lr, [sp, #28]
   15644:	beq	156c8 <__assert_fail@plt+0x4610>
   15648:	ldr	lr, [ip, #16]
   1564c:	cmp	lr, #0
   15650:	str	lr, [sp, #32]
   15654:	beq	156d0 <__assert_fail@plt+0x4618>
   15658:	ldr	lr, [ip, #20]
   1565c:	cmp	lr, #0
   15660:	str	lr, [sp, #36]	; 0x24
   15664:	beq	156d8 <__assert_fail@plt+0x4620>
   15668:	ldr	lr, [ip, #24]
   1566c:	cmp	lr, #0
   15670:	str	lr, [sp, #40]	; 0x28
   15674:	beq	156e0 <__assert_fail@plt+0x4628>
   15678:	ldr	lr, [ip, #28]
   1567c:	cmp	lr, #0
   15680:	str	lr, [sp, #44]	; 0x2c
   15684:	beq	156e8 <__assert_fail@plt+0x4630>
   15688:	ldr	lr, [ip, #32]
   1568c:	cmp	lr, #0
   15690:	str	lr, [sp, #48]	; 0x30
   15694:	beq	156f0 <__assert_fail@plt+0x4638>
   15698:	ldr	lr, [ip, #36]	; 0x24
   1569c:	mov	ip, #10
   156a0:	cmp	lr, #0
   156a4:	str	lr, [sp, #52]	; 0x34
   156a8:	movweq	ip, #9
   156ac:	b	156f4 <__assert_fail@plt+0x463c>
   156b0:	mov	ip, #0
   156b4:	b	156f4 <__assert_fail@plt+0x463c>
   156b8:	mov	ip, #1
   156bc:	b	156f4 <__assert_fail@plt+0x463c>
   156c0:	mov	ip, #2
   156c4:	b	156f4 <__assert_fail@plt+0x463c>
   156c8:	mov	ip, #3
   156cc:	b	156f4 <__assert_fail@plt+0x463c>
   156d0:	mov	ip, #4
   156d4:	b	156f4 <__assert_fail@plt+0x463c>
   156d8:	mov	ip, #5
   156dc:	b	156f4 <__assert_fail@plt+0x463c>
   156e0:	mov	ip, #6
   156e4:	b	156f4 <__assert_fail@plt+0x463c>
   156e8:	mov	ip, #7
   156ec:	b	156f4 <__assert_fail@plt+0x463c>
   156f0:	mov	ip, #8
   156f4:	add	lr, sp, #16
   156f8:	str	ip, [sp, #4]
   156fc:	str	lr, [sp]
   15700:	bl	15170 <__assert_fail@plt+0x40b8>
   15704:	mov	sp, fp
   15708:	pop	{fp, pc}
   1570c:	push	{fp, lr}
   15710:	mov	fp, sp
   15714:	movw	r0, #37196	; 0x914c
   15718:	movt	r0, #2
   1571c:	ldr	r1, [r0]
   15720:	movw	r0, #31152	; 0x79b0
   15724:	movt	r0, #1
   15728:	bl	10e48 <fputs_unlocked@plt>
   1572c:	movw	r1, #32643	; 0x7f83
   15730:	mov	r0, #0
   15734:	mov	r2, #5
   15738:	movt	r1, #1
   1573c:	bl	10ed8 <dcgettext@plt>
   15740:	movw	r2, #32663	; 0x7f97
   15744:	mov	r1, r0
   15748:	mov	r0, #1
   1574c:	movt	r2, #1
   15750:	bl	11010 <__printf_chk@plt>
   15754:	movw	r1, #32685	; 0x7fad
   15758:	mov	r0, #0
   1575c:	mov	r2, #5
   15760:	movt	r1, #1
   15764:	bl	10ed8 <dcgettext@plt>
   15768:	movw	r2, #30638	; 0x77ae
   1576c:	movw	r3, #30961	; 0x78f1
   15770:	mov	r1, r0
   15774:	mov	r0, #1
   15778:	movt	r2, #1
   1577c:	movt	r3, #1
   15780:	bl	11010 <__printf_chk@plt>
   15784:	movw	r1, #32705	; 0x7fc1
   15788:	mov	r0, #0
   1578c:	mov	r2, #5
   15790:	movt	r1, #1
   15794:	bl	10ed8 <dcgettext@plt>
   15798:	movw	r2, #32744	; 0x7fe8
   1579c:	mov	r1, r0
   157a0:	mov	r0, #1
   157a4:	movt	r2, #1
   157a8:	pop	{fp, lr}
   157ac:	b	11010 <__printf_chk@plt>
   157b0:	push	{r4, r5, r6, sl, fp, lr}
   157b4:	add	fp, sp, #16
   157b8:	mov	r4, r2
   157bc:	mov	r5, r1
   157c0:	mov	r6, r0
   157c4:	bl	16ef8 <__assert_fail@plt+0x5e40>
   157c8:	cmp	r0, #0
   157cc:	popne	{r4, r5, r6, sl, fp, pc}
   157d0:	cmp	r6, #0
   157d4:	beq	157e8 <__assert_fail@plt+0x4730>
   157d8:	cmp	r5, #0
   157dc:	cmpne	r4, #0
   157e0:	bne	157e8 <__assert_fail@plt+0x4730>
   157e4:	pop	{r4, r5, r6, sl, fp, pc}
   157e8:	bl	15d88 <__assert_fail@plt+0x4cd0>
   157ec:	push	{r4, r5, r6, sl, fp, lr}
   157f0:	add	fp, sp, #16
   157f4:	mov	r4, r2
   157f8:	mov	r5, r1
   157fc:	mov	r6, r0
   15800:	bl	16ef8 <__assert_fail@plt+0x5e40>
   15804:	cmp	r0, #0
   15808:	popne	{r4, r5, r6, sl, fp, pc}
   1580c:	cmp	r6, #0
   15810:	beq	15824 <__assert_fail@plt+0x476c>
   15814:	cmp	r5, #0
   15818:	cmpne	r4, #0
   1581c:	bne	15824 <__assert_fail@plt+0x476c>
   15820:	pop	{r4, r5, r6, sl, fp, pc}
   15824:	bl	15d88 <__assert_fail@plt+0x4cd0>
   15828:	push	{fp, lr}
   1582c:	mov	fp, sp
   15830:	bl	16bbc <__assert_fail@plt+0x5b04>
   15834:	cmp	r0, #0
   15838:	popne	{fp, pc}
   1583c:	bl	15d88 <__assert_fail@plt+0x4cd0>
   15840:	push	{fp, lr}
   15844:	mov	fp, sp
   15848:	bl	16bbc <__assert_fail@plt+0x5b04>
   1584c:	cmp	r0, #0
   15850:	popne	{fp, pc}
   15854:	bl	15d88 <__assert_fail@plt+0x4cd0>
   15858:	push	{fp, lr}
   1585c:	mov	fp, sp
   15860:	bl	16bbc <__assert_fail@plt+0x5b04>
   15864:	cmp	r0, #0
   15868:	popne	{fp, pc}
   1586c:	bl	15d88 <__assert_fail@plt+0x4cd0>
   15870:	push	{r4, r5, fp, lr}
   15874:	add	fp, sp, #8
   15878:	mov	r4, r1
   1587c:	mov	r5, r0
   15880:	bl	16bec <__assert_fail@plt+0x5b34>
   15884:	cmp	r0, #0
   15888:	popne	{r4, r5, fp, pc}
   1588c:	cmp	r5, #0
   15890:	beq	158a0 <__assert_fail@plt+0x47e8>
   15894:	cmp	r4, #0
   15898:	bne	158a0 <__assert_fail@plt+0x47e8>
   1589c:	pop	{r4, r5, fp, pc}
   158a0:	bl	15d88 <__assert_fail@plt+0x4cd0>
   158a4:	push	{fp, lr}
   158a8:	mov	fp, sp
   158ac:	cmp	r1, #0
   158b0:	orreq	r1, r1, #1
   158b4:	bl	16bec <__assert_fail@plt+0x5b34>
   158b8:	cmp	r0, #0
   158bc:	popne	{fp, pc}
   158c0:	bl	15d88 <__assert_fail@plt+0x4cd0>
   158c4:	push	{fp, lr}
   158c8:	mov	fp, sp
   158cc:	clz	r3, r2
   158d0:	lsr	ip, r3, #5
   158d4:	clz	r3, r1
   158d8:	lsr	r3, r3, #5
   158dc:	orrs	r3, r3, ip
   158e0:	movwne	r1, #1
   158e4:	movwne	r2, #1
   158e8:	bl	16ef8 <__assert_fail@plt+0x5e40>
   158ec:	cmp	r0, #0
   158f0:	popne	{fp, pc}
   158f4:	bl	15d88 <__assert_fail@plt+0x4cd0>
   158f8:	push	{fp, lr}
   158fc:	mov	fp, sp
   15900:	mov	r2, r1
   15904:	mov	r1, r0
   15908:	mov	r0, #0
   1590c:	bl	16ef8 <__assert_fail@plt+0x5e40>
   15910:	cmp	r0, #0
   15914:	popne	{fp, pc}
   15918:	bl	15d88 <__assert_fail@plt+0x4cd0>
   1591c:	push	{fp, lr}
   15920:	mov	fp, sp
   15924:	mov	r2, r1
   15928:	mov	r1, r0
   1592c:	clz	r0, r2
   15930:	clz	r3, r1
   15934:	lsr	r0, r0, #5
   15938:	lsr	r3, r3, #5
   1593c:	orrs	r0, r3, r0
   15940:	movwne	r1, #1
   15944:	movwne	r2, #1
   15948:	mov	r0, #0
   1594c:	bl	16ef8 <__assert_fail@plt+0x5e40>
   15950:	cmp	r0, #0
   15954:	popne	{fp, pc}
   15958:	bl	15d88 <__assert_fail@plt+0x4cd0>
   1595c:	push	{r4, r5, r6, sl, fp, lr}
   15960:	add	fp, sp, #16
   15964:	ldr	r5, [r1]
   15968:	mov	r4, r1
   1596c:	mov	r6, r0
   15970:	cmp	r0, #0
   15974:	beq	1598c <__assert_fail@plt+0x48d4>
   15978:	mov	r0, #1
   1597c:	add	r0, r0, r5, lsr #1
   15980:	adds	r5, r5, r0
   15984:	bcc	15994 <__assert_fail@plt+0x48dc>
   15988:	b	159d0 <__assert_fail@plt+0x4918>
   1598c:	cmp	r5, #0
   15990:	movweq	r5, #64	; 0x40
   15994:	mov	r0, r6
   15998:	mov	r1, r5
   1599c:	mov	r2, #1
   159a0:	bl	16ef8 <__assert_fail@plt+0x5e40>
   159a4:	cmp	r5, #0
   159a8:	mov	r1, r5
   159ac:	movwne	r1, #1
   159b0:	cmp	r0, #0
   159b4:	bne	159c8 <__assert_fail@plt+0x4910>
   159b8:	clz	r2, r6
   159bc:	lsr	r2, r2, #5
   159c0:	orrs	r1, r2, r1
   159c4:	bne	159d0 <__assert_fail@plt+0x4918>
   159c8:	str	r5, [r4]
   159cc:	pop	{r4, r5, r6, sl, fp, pc}
   159d0:	bl	15d88 <__assert_fail@plt+0x4cd0>
   159d4:	push	{r4, r5, r6, r7, fp, lr}
   159d8:	add	fp, sp, #16
   159dc:	ldr	r5, [r1]
   159e0:	mov	r6, r2
   159e4:	mov	r4, r1
   159e8:	mov	r7, r0
   159ec:	cmp	r0, #0
   159f0:	beq	15a08 <__assert_fail@plt+0x4950>
   159f4:	mov	r0, #1
   159f8:	add	r0, r0, r5, lsr #1
   159fc:	adds	r5, r5, r0
   15a00:	bcc	15a20 <__assert_fail@plt+0x4968>
   15a04:	b	15a54 <__assert_fail@plt+0x499c>
   15a08:	cmp	r5, #0
   15a0c:	bne	15a20 <__assert_fail@plt+0x4968>
   15a10:	mov	r0, #64	; 0x40
   15a14:	cmp	r6, #64	; 0x40
   15a18:	udiv	r5, r0, r6
   15a1c:	addhi	r5, r5, #1
   15a20:	mov	r0, r7
   15a24:	mov	r1, r5
   15a28:	mov	r2, r6
   15a2c:	bl	16ef8 <__assert_fail@plt+0x5e40>
   15a30:	cmp	r0, #0
   15a34:	bne	15a4c <__assert_fail@plt+0x4994>
   15a38:	cmp	r7, #0
   15a3c:	beq	15a54 <__assert_fail@plt+0x499c>
   15a40:	cmp	r6, #0
   15a44:	cmpne	r5, #0
   15a48:	bne	15a54 <__assert_fail@plt+0x499c>
   15a4c:	str	r5, [r4]
   15a50:	pop	{r4, r5, r6, r7, fp, pc}
   15a54:	bl	15d88 <__assert_fail@plt+0x4cd0>
   15a58:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15a5c:	add	fp, sp, #24
   15a60:	mov	r8, r1
   15a64:	ldr	r1, [r1]
   15a68:	mov	r5, r0
   15a6c:	add	r0, r1, r1, asr #1
   15a70:	cmp	r0, r1
   15a74:	mvnvs	r0, #-2147483648	; 0x80000000
   15a78:	cmp	r0, r3
   15a7c:	mov	r7, r0
   15a80:	movgt	r7, r3
   15a84:	cmn	r3, #1
   15a88:	movle	r7, r0
   15a8c:	ldr	r0, [fp, #8]
   15a90:	cmn	r0, #1
   15a94:	ble	15abc <__assert_fail@plt+0x4a04>
   15a98:	cmp	r0, #0
   15a9c:	beq	15b10 <__assert_fail@plt+0x4a58>
   15aa0:	cmn	r7, #1
   15aa4:	ble	15ae4 <__assert_fail@plt+0x4a2c>
   15aa8:	mvn	r4, #-2147483648	; 0x80000000
   15aac:	udiv	r6, r4, r0
   15ab0:	cmp	r6, r7
   15ab4:	bge	15b10 <__assert_fail@plt+0x4a58>
   15ab8:	b	15b20 <__assert_fail@plt+0x4a68>
   15abc:	cmn	r7, #1
   15ac0:	ble	15b00 <__assert_fail@plt+0x4a48>
   15ac4:	cmn	r0, #1
   15ac8:	beq	15b10 <__assert_fail@plt+0x4a58>
   15acc:	mov	r6, #-2147483648	; 0x80000000
   15ad0:	mvn	r4, #-2147483648	; 0x80000000
   15ad4:	sdiv	r6, r6, r0
   15ad8:	cmp	r6, r7
   15adc:	bge	15b10 <__assert_fail@plt+0x4a58>
   15ae0:	b	15b20 <__assert_fail@plt+0x4a68>
   15ae4:	beq	15b10 <__assert_fail@plt+0x4a58>
   15ae8:	mov	r6, #-2147483648	; 0x80000000
   15aec:	mvn	r4, #-2147483648	; 0x80000000
   15af0:	sdiv	r6, r6, r7
   15af4:	cmp	r6, r0
   15af8:	bge	15b10 <__assert_fail@plt+0x4a58>
   15afc:	b	15b20 <__assert_fail@plt+0x4a68>
   15b00:	mvn	r4, #-2147483648	; 0x80000000
   15b04:	sdiv	r6, r4, r0
   15b08:	cmp	r7, r6
   15b0c:	blt	15b20 <__assert_fail@plt+0x4a68>
   15b10:	mul	r6, r7, r0
   15b14:	mov	r4, #64	; 0x40
   15b18:	cmp	r6, #63	; 0x3f
   15b1c:	bgt	15b28 <__assert_fail@plt+0x4a70>
   15b20:	sdiv	r7, r4, r0
   15b24:	mul	r6, r7, r0
   15b28:	cmp	r5, #0
   15b2c:	moveq	r4, #0
   15b30:	streq	r4, [r8]
   15b34:	sub	r4, r7, r1
   15b38:	cmp	r4, r2
   15b3c:	bge	15be8 <__assert_fail@plt+0x4b30>
   15b40:	add	r7, r1, r2
   15b44:	mov	r6, #0
   15b48:	mov	r2, #0
   15b4c:	cmp	r7, r3
   15b50:	movwgt	r6, #1
   15b54:	cmn	r3, #1
   15b58:	movwgt	r2, #1
   15b5c:	cmp	r7, r1
   15b60:	bvs	15c1c <__assert_fail@plt+0x4b64>
   15b64:	ands	r1, r2, r6
   15b68:	bne	15c1c <__assert_fail@plt+0x4b64>
   15b6c:	cmn	r0, #1
   15b70:	ble	15b98 <__assert_fail@plt+0x4ae0>
   15b74:	cmp	r0, #0
   15b78:	beq	15be4 <__assert_fail@plt+0x4b2c>
   15b7c:	cmn	r7, #1
   15b80:	ble	15bbc <__assert_fail@plt+0x4b04>
   15b84:	mvn	r1, #-2147483648	; 0x80000000
   15b88:	udiv	r1, r1, r0
   15b8c:	cmp	r1, r7
   15b90:	bge	15be4 <__assert_fail@plt+0x4b2c>
   15b94:	b	15c1c <__assert_fail@plt+0x4b64>
   15b98:	cmn	r7, #1
   15b9c:	ble	15bd4 <__assert_fail@plt+0x4b1c>
   15ba0:	cmn	r0, #1
   15ba4:	beq	15be4 <__assert_fail@plt+0x4b2c>
   15ba8:	mov	r1, #-2147483648	; 0x80000000
   15bac:	sdiv	r1, r1, r0
   15bb0:	cmp	r1, r7
   15bb4:	bge	15be4 <__assert_fail@plt+0x4b2c>
   15bb8:	b	15c1c <__assert_fail@plt+0x4b64>
   15bbc:	beq	15be4 <__assert_fail@plt+0x4b2c>
   15bc0:	mov	r1, #-2147483648	; 0x80000000
   15bc4:	sdiv	r1, r1, r7
   15bc8:	cmp	r1, r0
   15bcc:	bge	15be4 <__assert_fail@plt+0x4b2c>
   15bd0:	b	15c1c <__assert_fail@plt+0x4b64>
   15bd4:	mvn	r1, #-2147483648	; 0x80000000
   15bd8:	sdiv	r1, r1, r0
   15bdc:	cmp	r7, r1
   15be0:	blt	15c1c <__assert_fail@plt+0x4b64>
   15be4:	mul	r6, r7, r0
   15be8:	mov	r0, r5
   15bec:	mov	r1, r6
   15bf0:	bl	16bec <__assert_fail@plt+0x5b34>
   15bf4:	cmp	r6, #0
   15bf8:	movwne	r6, #1
   15bfc:	cmp	r0, #0
   15c00:	bne	15c14 <__assert_fail@plt+0x4b5c>
   15c04:	clz	r1, r5
   15c08:	lsr	r1, r1, #5
   15c0c:	orrs	r1, r1, r6
   15c10:	bne	15c1c <__assert_fail@plt+0x4b64>
   15c14:	str	r7, [r8]
   15c18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15c1c:	bl	15d88 <__assert_fail@plt+0x4cd0>
   15c20:	push	{fp, lr}
   15c24:	mov	fp, sp
   15c28:	mov	r1, #1
   15c2c:	bl	16b68 <__assert_fail@plt+0x5ab0>
   15c30:	cmp	r0, #0
   15c34:	popne	{fp, pc}
   15c38:	bl	15d88 <__assert_fail@plt+0x4cd0>
   15c3c:	push	{fp, lr}
   15c40:	mov	fp, sp
   15c44:	bl	16b68 <__assert_fail@plt+0x5ab0>
   15c48:	cmp	r0, #0
   15c4c:	popne	{fp, pc}
   15c50:	bl	15d88 <__assert_fail@plt+0x4cd0>
   15c54:	push	{fp, lr}
   15c58:	mov	fp, sp
   15c5c:	mov	r1, #1
   15c60:	bl	16b68 <__assert_fail@plt+0x5ab0>
   15c64:	cmp	r0, #0
   15c68:	popne	{fp, pc}
   15c6c:	bl	15d88 <__assert_fail@plt+0x4cd0>
   15c70:	push	{fp, lr}
   15c74:	mov	fp, sp
   15c78:	bl	16b68 <__assert_fail@plt+0x5ab0>
   15c7c:	cmp	r0, #0
   15c80:	popne	{fp, pc}
   15c84:	bl	15d88 <__assert_fail@plt+0x4cd0>
   15c88:	push	{r4, r5, r6, sl, fp, lr}
   15c8c:	add	fp, sp, #16
   15c90:	mov	r5, r0
   15c94:	mov	r0, r1
   15c98:	mov	r4, r1
   15c9c:	bl	16bbc <__assert_fail@plt+0x5b04>
   15ca0:	cmp	r0, #0
   15ca4:	beq	15cc0 <__assert_fail@plt+0x4c08>
   15ca8:	mov	r1, r5
   15cac:	mov	r2, r4
   15cb0:	mov	r6, r0
   15cb4:	bl	10e9c <memcpy@plt>
   15cb8:	mov	r0, r6
   15cbc:	pop	{r4, r5, r6, sl, fp, pc}
   15cc0:	bl	15d88 <__assert_fail@plt+0x4cd0>
   15cc4:	push	{r4, r5, r6, sl, fp, lr}
   15cc8:	add	fp, sp, #16
   15ccc:	mov	r5, r0
   15cd0:	mov	r0, r1
   15cd4:	mov	r4, r1
   15cd8:	bl	16bbc <__assert_fail@plt+0x5b04>
   15cdc:	cmp	r0, #0
   15ce0:	beq	15cfc <__assert_fail@plt+0x4c44>
   15ce4:	mov	r1, r5
   15ce8:	mov	r2, r4
   15cec:	mov	r6, r0
   15cf0:	bl	10e9c <memcpy@plt>
   15cf4:	mov	r0, r6
   15cf8:	pop	{r4, r5, r6, sl, fp, pc}
   15cfc:	bl	15d88 <__assert_fail@plt+0x4cd0>
   15d00:	push	{r4, r5, r6, sl, fp, lr}
   15d04:	add	fp, sp, #16
   15d08:	mov	r5, r0
   15d0c:	add	r0, r1, #1
   15d10:	mov	r4, r1
   15d14:	bl	16bbc <__assert_fail@plt+0x5b04>
   15d18:	cmp	r0, #0
   15d1c:	beq	15d44 <__assert_fail@plt+0x4c8c>
   15d20:	mov	r6, r0
   15d24:	mov	r0, #0
   15d28:	mov	r1, r5
   15d2c:	mov	r2, r4
   15d30:	strb	r0, [r6, r4]
   15d34:	mov	r0, r6
   15d38:	bl	10e9c <memcpy@plt>
   15d3c:	mov	r0, r6
   15d40:	pop	{r4, r5, r6, sl, fp, pc}
   15d44:	bl	15d88 <__assert_fail@plt+0x4cd0>
   15d48:	push	{r4, r5, r6, sl, fp, lr}
   15d4c:	add	fp, sp, #16
   15d50:	mov	r4, r0
   15d54:	bl	10fc8 <strlen@plt>
   15d58:	add	r5, r0, #1
   15d5c:	mov	r0, r5
   15d60:	bl	16bbc <__assert_fail@plt+0x5b04>
   15d64:	cmp	r0, #0
   15d68:	beq	15d84 <__assert_fail@plt+0x4ccc>
   15d6c:	mov	r1, r4
   15d70:	mov	r2, r5
   15d74:	mov	r6, r0
   15d78:	bl	10e9c <memcpy@plt>
   15d7c:	mov	r0, r6
   15d80:	pop	{r4, r5, r6, sl, fp, pc}
   15d84:	bl	15d88 <__assert_fail@plt+0x4cd0>
   15d88:	push	{fp, lr}
   15d8c:	mov	fp, sp
   15d90:	movw	r0, #37108	; 0x90f4
   15d94:	movw	r1, #32820	; 0x8034
   15d98:	mov	r2, #5
   15d9c:	movt	r0, #2
   15da0:	movt	r1, #1
   15da4:	ldr	r4, [r0]
   15da8:	mov	r0, #0
   15dac:	bl	10ed8 <dcgettext@plt>
   15db0:	movw	r2, #30685	; 0x77dd
   15db4:	mov	r3, r0
   15db8:	mov	r0, r4
   15dbc:	mov	r1, #0
   15dc0:	movt	r2, #1
   15dc4:	bl	10f5c <error@plt>
   15dc8:	bl	110a0 <abort@plt>
   15dcc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15dd0:	add	fp, sp, #24
   15dd4:	sub	sp, sp, #16
   15dd8:	mov	r8, r0
   15ddc:	ldr	r0, [fp, #16]
   15de0:	mov	r5, r3
   15de4:	mov	r6, r2
   15de8:	mov	r2, r1
   15dec:	add	r3, sp, #8
   15df0:	mov	r1, #0
   15df4:	str	r0, [sp]
   15df8:	mov	r0, r8
   15dfc:	bl	15ec8 <__assert_fail@plt+0x4e10>
   15e00:	cmp	r0, #0
   15e04:	bne	15e90 <__assert_fail@plt+0x4dd8>
   15e08:	ldr	r4, [sp, #8]
   15e0c:	ldr	r7, [sp, #12]
   15e10:	subs	r0, r4, r6
   15e14:	sbcs	r0, r7, r5
   15e18:	bcc	15e3c <__assert_fail@plt+0x4d84>
   15e1c:	ldr	r1, [fp, #8]
   15e20:	ldr	r0, [fp, #12]
   15e24:	subs	r1, r1, r4
   15e28:	sbcs	r0, r0, r7
   15e2c:	movcs	r0, r4
   15e30:	movcs	r1, r7
   15e34:	subcs	sp, fp, #24
   15e38:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   15e3c:	bl	10fec <__errno_location@plt>
   15e40:	subs	r1, r4, #1073741824	; 0x40000000
   15e44:	sbcs	r1, r7, #0
   15e48:	movcc	r1, #34	; 0x22
   15e4c:	movcs	r1, #75	; 0x4b
   15e50:	str	r1, [r0]
   15e54:	ldr	r6, [r0]
   15e58:	ldr	r4, [fp, #24]
   15e5c:	ldr	r5, [fp, #20]
   15e60:	mov	r0, r8
   15e64:	bl	14fd4 <__assert_fail@plt+0x3f1c>
   15e68:	subs	r1, r6, #22
   15e6c:	movw	r2, #30681	; 0x77d9
   15e70:	str	r0, [sp]
   15e74:	mov	r3, r5
   15e78:	movne	r1, r6
   15e7c:	cmp	r4, #0
   15e80:	movt	r2, #1
   15e84:	movweq	r4, #1
   15e88:	mov	r0, r4
   15e8c:	bl	10f5c <error@plt>
   15e90:	cmp	r0, #1
   15e94:	beq	15eac <__assert_fail@plt+0x4df4>
   15e98:	cmp	r0, #3
   15e9c:	bne	15eb8 <__assert_fail@plt+0x4e00>
   15ea0:	bl	10fec <__errno_location@plt>
   15ea4:	mov	r1, #0
   15ea8:	b	15e50 <__assert_fail@plt+0x4d98>
   15eac:	bl	10fec <__errno_location@plt>
   15eb0:	mov	r1, #75	; 0x4b
   15eb4:	b	15e50 <__assert_fail@plt+0x4d98>
   15eb8:	bl	10fec <__errno_location@plt>
   15ebc:	b	15e54 <__assert_fail@plt+0x4d9c>
   15ec0:	mov	r1, #10
   15ec4:	b	15dcc <__assert_fail@plt+0x4d14>
   15ec8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ecc:	add	fp, sp, #28
   15ed0:	sub	sp, sp, #44	; 0x2c
   15ed4:	cmp	r2, #37	; 0x25
   15ed8:	bcs	16b48 <__assert_fail@plt+0x5a90>
   15edc:	ldr	sl, [fp, #8]
   15ee0:	mov	r6, r2
   15ee4:	mov	r7, r1
   15ee8:	mov	r4, r0
   15eec:	str	r3, [sp, #36]	; 0x24
   15ef0:	bl	10fec <__errno_location@plt>
   15ef4:	mov	r5, r0
   15ef8:	mov	r0, #0
   15efc:	str	r0, [r5]
   15f00:	bl	10fb0 <__ctype_b_loc@plt>
   15f04:	ldr	r1, [r0]
   15f08:	mov	r2, r4
   15f0c:	ldrb	r0, [r2], #1
   15f10:	add	r3, r1, r0, lsl #1
   15f14:	ldrb	r3, [r3, #1]
   15f18:	tst	r3, #32
   15f1c:	bne	15f0c <__assert_fail@plt+0x4e54>
   15f20:	sub	r9, fp, #32
   15f24:	cmp	r7, #0
   15f28:	mov	r8, #4
   15f2c:	movne	r9, r7
   15f30:	cmp	r0, #45	; 0x2d
   15f34:	beq	16b3c <__assert_fail@plt+0x5a84>
   15f38:	mov	r0, r4
   15f3c:	mov	r1, r9
   15f40:	mov	r2, r6
   15f44:	mov	r3, #0
   15f48:	bl	10ea8 <__strtoull_internal@plt>
   15f4c:	mov	r7, r1
   15f50:	ldr	r1, [r9]
   15f54:	cmp	r1, r4
   15f58:	beq	15f84 <__assert_fail@plt+0x4ecc>
   15f5c:	mov	r6, r0
   15f60:	ldr	r0, [r5]
   15f64:	cmp	r0, #0
   15f68:	beq	15fc0 <__assert_fail@plt+0x4f08>
   15f6c:	cmp	r0, #34	; 0x22
   15f70:	bne	16b3c <__assert_fail@plt+0x5a84>
   15f74:	mov	r8, #1
   15f78:	cmp	sl, #0
   15f7c:	bne	15fcc <__assert_fail@plt+0x4f14>
   15f80:	b	16b34 <__assert_fail@plt+0x5a7c>
   15f84:	cmp	sl, #0
   15f88:	beq	16b3c <__assert_fail@plt+0x5a84>
   15f8c:	mov	r5, r1
   15f90:	ldrb	r1, [r4]
   15f94:	cmp	r1, #0
   15f98:	beq	16b3c <__assert_fail@plt+0x5a84>
   15f9c:	mov	r0, sl
   15fa0:	bl	10fd4 <strchr@plt>
   15fa4:	cmp	r0, #0
   15fa8:	beq	16b3c <__assert_fail@plt+0x5a84>
   15fac:	mov	r1, r5
   15fb0:	mov	r8, #0
   15fb4:	mov	r6, #1
   15fb8:	mov	r7, #0
   15fbc:	b	15fcc <__assert_fail@plt+0x4f14>
   15fc0:	mov	r8, r0
   15fc4:	cmp	sl, #0
   15fc8:	beq	16b34 <__assert_fail@plt+0x5a7c>
   15fcc:	ldrb	r4, [r1]
   15fd0:	cmp	r4, #0
   15fd4:	beq	16b34 <__assert_fail@plt+0x5a7c>
   15fd8:	str	r1, [sp, #32]
   15fdc:	mov	r0, sl
   15fe0:	mov	r1, r4
   15fe4:	bl	10fd4 <strchr@plt>
   15fe8:	cmp	r0, #0
   15fec:	beq	162b4 <__assert_fail@plt+0x51fc>
   15ff0:	sub	r0, r4, #69	; 0x45
   15ff4:	mov	r1, #1
   15ff8:	mov	r3, #0
   15ffc:	mov	r5, #1024	; 0x400
   16000:	cmp	r0, #47	; 0x2f
   16004:	str	r1, [sp, #28]
   16008:	bhi	1610c <__assert_fail@plt+0x5054>
   1600c:	add	r1, pc, #0
   16010:	ldr	pc, [r1, r0, lsl #2]
   16014:	ldrdeq	r6, [r1], -r4
   16018:	andeq	r6, r1, ip, lsl #2
   1601c:	ldrdeq	r6, [r1], -r4
   16020:	andeq	r6, r1, ip, lsl #2
   16024:	andeq	r6, r1, ip, lsl #2
   16028:	andeq	r6, r1, ip, lsl #2
   1602c:	ldrdeq	r6, [r1], -r4
   16030:	andeq	r6, r1, ip, lsl #2
   16034:	ldrdeq	r6, [r1], -r4
   16038:	andeq	r6, r1, ip, lsl #2
   1603c:	andeq	r6, r1, ip, lsl #2
   16040:	ldrdeq	r6, [r1], -r4
   16044:	andeq	r6, r1, ip, lsl #2
   16048:	andeq	r6, r1, ip, lsl #2
   1604c:	andeq	r6, r1, ip, lsl #2
   16050:	ldrdeq	r6, [r1], -r4
   16054:	andeq	r6, r1, ip, lsl #2
   16058:	andeq	r6, r1, ip, lsl #2
   1605c:	andeq	r6, r1, ip, lsl #2
   16060:	andeq	r6, r1, ip, lsl #2
   16064:	ldrdeq	r6, [r1], -r4
   16068:	ldrdeq	r6, [r1], -r4
   1606c:	andeq	r6, r1, ip, lsl #2
   16070:	andeq	r6, r1, ip, lsl #2
   16074:	andeq	r6, r1, ip, lsl #2
   16078:	andeq	r6, r1, ip, lsl #2
   1607c:	andeq	r6, r1, ip, lsl #2
   16080:	andeq	r6, r1, ip, lsl #2
   16084:	andeq	r6, r1, ip, lsl #2
   16088:	andeq	r6, r1, ip, lsl #2
   1608c:	andeq	r6, r1, ip, lsl #2
   16090:	andeq	r6, r1, ip, lsl #2
   16094:	andeq	r6, r1, ip, lsl #2
   16098:	andeq	r6, r1, ip, lsl #2
   1609c:	ldrdeq	r6, [r1], -r4
   160a0:	andeq	r6, r1, ip, lsl #2
   160a4:	andeq	r6, r1, ip, lsl #2
   160a8:	andeq	r6, r1, ip, lsl #2
   160ac:	ldrdeq	r6, [r1], -r4
   160b0:	andeq	r6, r1, ip, lsl #2
   160b4:	ldrdeq	r6, [r1], -r4
   160b8:	andeq	r6, r1, ip, lsl #2
   160bc:	andeq	r6, r1, ip, lsl #2
   160c0:	andeq	r6, r1, ip, lsl #2
   160c4:	andeq	r6, r1, ip, lsl #2
   160c8:	andeq	r6, r1, ip, lsl #2
   160cc:	andeq	r6, r1, ip, lsl #2
   160d0:	ldrdeq	r6, [r1], -r4
   160d4:	mov	r0, sl
   160d8:	mov	r1, #48	; 0x30
   160dc:	bl	10fd4 <strchr@plt>
   160e0:	cmp	r0, #0
   160e4:	beq	16108 <__assert_fail@plt+0x5050>
   160e8:	ldr	r1, [sp, #32]
   160ec:	ldrb	r0, [r1, #1]
   160f0:	cmp	r0, #66	; 0x42
   160f4:	cmpne	r0, #68	; 0x44
   160f8:	bne	162c0 <__assert_fail@plt+0x5208>
   160fc:	mov	r5, #1000	; 0x3e8
   16100:	mov	r0, #2
   16104:	str	r0, [sp, #28]
   16108:	mov	r3, #0
   1610c:	sub	r0, r4, #66	; 0x42
   16110:	cmp	r0, #53	; 0x35
   16114:	bhi	162b4 <__assert_fail@plt+0x51fc>
   16118:	add	r1, pc, #0
   1611c:	ldr	pc, [r1, r0, lsl #2]
   16120:	andeq	r6, r1, ip, lsr r6
   16124:			; <UNDEFINED> instruction: 0x000162b4
   16128:			; <UNDEFINED> instruction: 0x000162b4
   1612c:	andeq	r6, r1, r4, ror #12
   16130:			; <UNDEFINED> instruction: 0x000162b4
   16134:	strdeq	r6, [r1], -r8
   16138:			; <UNDEFINED> instruction: 0x000162b4
   1613c:			; <UNDEFINED> instruction: 0x000162b4
   16140:			; <UNDEFINED> instruction: 0x000162b4
   16144:	andeq	r6, r1, r4, ror #5
   16148:			; <UNDEFINED> instruction: 0x000162b4
   1614c:	andeq	r6, r1, ip, lsr #6
   16150:			; <UNDEFINED> instruction: 0x000162b4
   16154:			; <UNDEFINED> instruction: 0x000162b4
   16158:			; <UNDEFINED> instruction: 0x000167bc
   1615c:			; <UNDEFINED> instruction: 0x000162b4
   16160:			; <UNDEFINED> instruction: 0x000162b4
   16164:			; <UNDEFINED> instruction: 0x000162b4
   16168:			; <UNDEFINED> instruction: 0x000163b8
   1616c:			; <UNDEFINED> instruction: 0x000162b4
   16170:			; <UNDEFINED> instruction: 0x000162b4
   16174:			; <UNDEFINED> instruction: 0x000162b4
   16178:			; <UNDEFINED> instruction: 0x000162b4
   1617c:	andeq	r6, r1, r4, ror #17
   16180:	andeq	r6, r1, r0, lsr #9
   16184:			; <UNDEFINED> instruction: 0x000162b4
   16188:			; <UNDEFINED> instruction: 0x000162b4
   1618c:			; <UNDEFINED> instruction: 0x000162b4
   16190:			; <UNDEFINED> instruction: 0x000162b4
   16194:			; <UNDEFINED> instruction: 0x000162b4
   16198:			; <UNDEFINED> instruction: 0x000162b4
   1619c:			; <UNDEFINED> instruction: 0x000162b4
   161a0:			; <UNDEFINED> instruction: 0x00016abc
   161a4:	andeq	r6, r1, r4, lsl fp
   161a8:			; <UNDEFINED> instruction: 0x000162b4
   161ac:			; <UNDEFINED> instruction: 0x000162b4
   161b0:			; <UNDEFINED> instruction: 0x000162b4
   161b4:	strdeq	r6, [r1], -r8
   161b8:			; <UNDEFINED> instruction: 0x000162b4
   161bc:			; <UNDEFINED> instruction: 0x000162b4
   161c0:			; <UNDEFINED> instruction: 0x000162b4
   161c4:	andeq	r6, r1, r4, ror #5
   161c8:			; <UNDEFINED> instruction: 0x000162b4
   161cc:	andeq	r6, r1, ip, lsr #6
   161d0:			; <UNDEFINED> instruction: 0x000162b4
   161d4:			; <UNDEFINED> instruction: 0x000162b4
   161d8:			; <UNDEFINED> instruction: 0x000162b4
   161dc:			; <UNDEFINED> instruction: 0x000162b4
   161e0:			; <UNDEFINED> instruction: 0x000162b4
   161e4:			; <UNDEFINED> instruction: 0x000162b4
   161e8:			; <UNDEFINED> instruction: 0x000163b8
   161ec:			; <UNDEFINED> instruction: 0x000162b4
   161f0:			; <UNDEFINED> instruction: 0x000162b4
   161f4:	strdeq	r6, [r1], -r0
   161f8:	mvn	r0, #0
   161fc:	mvn	r1, #0
   16200:	mov	r2, r5
   16204:	mov	sl, r3
   16208:	bl	17110 <__assert_fail@plt+0x6058>
   1620c:	subs	r3, r0, r6
   16210:	mov	lr, #0
   16214:	umull	r4, r2, r6, r5
   16218:	str	r1, [sp, #20]
   1621c:	sbcs	r3, r1, r7
   16220:	mla	ip, r6, sl, r2
   16224:	mov	r2, r1
   16228:	movwcc	lr, #1
   1622c:	mla	r7, r7, r5, ip
   16230:	mov	r2, #0
   16234:	cmp	lr, #0
   16238:	mvnne	r4, #0
   1623c:	mvnne	r7, #0
   16240:	subs	r6, r0, r4
   16244:	sbcs	r6, r1, r7
   16248:	movwcc	r2, #1
   1624c:	umull	r3, r6, r4, r5
   16250:	cmp	r2, #0
   16254:	str	r6, [sp, #16]
   16258:	mvnne	r3, #0
   1625c:	cmp	r2, #0
   16260:	umull	r6, ip, r3, r5
   16264:	mla	r1, r3, sl, ip
   16268:	ldr	ip, [sp, #16]
   1626c:	str	r1, [sp, #12]
   16270:	mla	r4, r4, sl, ip
   16274:	mla	r4, r7, r5, r4
   16278:	ldr	r7, [sp, #12]
   1627c:	mvnne	r4, #0
   16280:	subs	r0, r0, r3
   16284:	ldr	r0, [sp, #20]
   16288:	mla	r7, r4, r5, r7
   1628c:	sbcs	r0, r0, r4
   16290:	mov	r0, #0
   16294:	movwcc	r0, #1
   16298:	cmp	r0, #0
   1629c:	mov	r1, r0
   162a0:	orr	r0, lr, r2
   162a4:	mvnne	r7, #0
   162a8:	mvnne	r6, #0
   162ac:	orr	r3, r0, r1
   162b0:	b	16b14 <__assert_fail@plt+0x5a5c>
   162b4:	ldr	r0, [sp, #36]	; 0x24
   162b8:	orr	r8, r8, #2
   162bc:	b	16b38 <__assert_fail@plt+0x5a80>
   162c0:	cmp	r0, #105	; 0x69
   162c4:	mov	r3, #0
   162c8:	bne	1610c <__assert_fail@plt+0x5054>
   162cc:	ldrb	r0, [r1, #2]
   162d0:	mov	r1, #1
   162d4:	cmp	r0, #66	; 0x42
   162d8:	movweq	r1, #3
   162dc:	str	r1, [sp, #28]
   162e0:	b	1610c <__assert_fail@plt+0x5054>
   162e4:	mvn	r0, #0
   162e8:	mvn	r1, #0
   162ec:	mov	r2, r5
   162f0:	mov	r4, r3
   162f4:	bl	17110 <__assert_fail@plt+0x6058>
   162f8:	subs	r0, r0, r6
   162fc:	mov	r2, #0
   16300:	sbcs	r0, r1, r7
   16304:	movwcc	r2, #1
   16308:	umull	r0, r1, r6, r5
   1630c:	mla	r1, r6, r4, r1
   16310:	cmp	r2, #0
   16314:	mov	r3, r2
   16318:	mla	r7, r7, r5, r1
   1631c:	mvnne	r0, #0
   16320:	mvnne	r7, #0
   16324:	mov	r6, r0
   16328:	b	16b14 <__assert_fail@plt+0x5a5c>
   1632c:	mvn	r0, #0
   16330:	mvn	r1, #0
   16334:	mov	r2, r5
   16338:	str	r3, [sp, #24]
   1633c:	bl	17110 <__assert_fail@plt+0x6058>
   16340:	subs	r3, r0, r6
   16344:	mov	ip, r0
   16348:	umull	r4, r0, r6, r5
   1634c:	mov	sl, #0
   16350:	sbcs	r3, r1, r7
   16354:	str	r0, [sp, #20]
   16358:	ldr	r0, [sp, #24]
   1635c:	mov	r3, #0
   16360:	movwcc	r3, #1
   16364:	cmp	r3, #0
   16368:	mvnne	r4, #0
   1636c:	cmp	r3, #0
   16370:	umull	lr, r2, r4, r5
   16374:	mla	r2, r4, r0, r2
   16378:	str	r2, [sp, #16]
   1637c:	ldr	r2, [sp, #20]
   16380:	mla	r6, r6, r0, r2
   16384:	ldr	r0, [sp, #16]
   16388:	mla	r6, r7, r5, r6
   1638c:	mvnne	r6, #0
   16390:	mla	r7, r6, r5, r0
   16394:	subs	r0, ip, r4
   16398:	sbcs	r0, r1, r6
   1639c:	movwcc	sl, #1
   163a0:	cmp	sl, #0
   163a4:	orr	r3, r3, sl
   163a8:	mvnne	lr, #0
   163ac:	mvnne	r7, #0
   163b0:	mov	r6, lr
   163b4:	b	16b14 <__assert_fail@plt+0x5a5c>
   163b8:	mvn	r0, #0
   163bc:	mvn	r1, #0
   163c0:	mov	r2, r5
   163c4:	mov	sl, r3
   163c8:	bl	17110 <__assert_fail@plt+0x6058>
   163cc:	subs	r3, r0, r6
   163d0:	mov	ip, r1
   163d4:	umull	r2, lr, r6, r5
   163d8:	str	r0, [sp, #20]
   163dc:	sbcs	r3, r1, r7
   163e0:	mov	r1, #0
   163e4:	mla	r6, r6, sl, lr
   163e8:	mov	lr, #0
   163ec:	str	ip, [sp, #16]
   163f0:	movwcc	r1, #1
   163f4:	mla	r7, r7, r5, r6
   163f8:	cmp	r1, #0
   163fc:	mvnne	r2, #0
   16400:	cmp	r1, #0
   16404:	umull	r3, r4, r2, r5
   16408:	mvnne	r7, #0
   1640c:	mla	r4, r2, sl, r4
   16410:	subs	r2, r0, r2
   16414:	sbcs	r2, ip, r7
   16418:	mla	r4, r7, r5, r4
   1641c:	movwcc	lr, #1
   16420:	mov	r2, #0
   16424:	cmp	lr, #0
   16428:	mvnne	r3, #0
   1642c:	mvnne	r4, #0
   16430:	subs	r7, r0, r3
   16434:	mov	r0, r5
   16438:	sbcs	r7, ip, r4
   1643c:	movwcc	r2, #1
   16440:	umull	r5, r7, r3, r5
   16444:	cmp	r2, #0
   16448:	mla	r3, r3, sl, r7
   1644c:	mvnne	r5, #0
   16450:	mla	r3, r4, r0, r3
   16454:	cmp	r2, #0
   16458:	umull	r6, ip, r5, r0
   1645c:	mvnne	r3, #0
   16460:	mla	ip, r5, sl, ip
   16464:	mla	r7, r3, r0, ip
   16468:	ldr	r0, [sp, #20]
   1646c:	subs	r0, r0, r5
   16470:	ldr	r0, [sp, #16]
   16474:	sbcs	r0, r0, r3
   16478:	mov	r0, #0
   1647c:	movwcc	r0, #1
   16480:	cmp	r0, #0
   16484:	mov	r3, r0
   16488:	orr	r0, r1, lr
   1648c:	orr	r0, r0, r2
   16490:	mvnne	r7, #0
   16494:	mvnne	r6, #0
   16498:	orr	r3, r0, r3
   1649c:	b	16b14 <__assert_fail@plt+0x5a5c>
   164a0:	mvn	r0, #0
   164a4:	mvn	r1, #0
   164a8:	mov	r2, r5
   164ac:	mov	r4, r3
   164b0:	str	r3, [sp, #24]
   164b4:	bl	17110 <__assert_fail@plt+0x6058>
   164b8:	umull	r3, r2, r6, r5
   164bc:	mla	r2, r6, r4, r2
   164c0:	subs	r6, r0, r6
   164c4:	sbcs	r6, r1, r7
   164c8:	mla	ip, r7, r5, r2
   164cc:	ldr	r2, [sp, #24]
   164d0:	mov	r6, #0
   164d4:	movwcc	r6, #1
   164d8:	cmp	r6, #0
   164dc:	str	r6, [sp, #20]
   164e0:	mov	r6, #0
   164e4:	mvnne	r3, #0
   164e8:	mvnne	ip, #0
   164ec:	subs	r4, r0, r3
   164f0:	umull	r7, lr, r3, r5
   164f4:	sbcs	r4, r1, ip
   164f8:	mla	r3, r3, r2, lr
   164fc:	movwcc	r6, #1
   16500:	cmp	r6, #0
   16504:	str	r6, [sp, #16]
   16508:	mvnne	r7, #0
   1650c:	cmp	r6, #0
   16510:	umull	sl, r4, r7, r5
   16514:	mla	r4, r7, r2, r4
   16518:	mla	r2, ip, r5, r3
   1651c:	mov	ip, #0
   16520:	mvnne	r2, #0
   16524:	subs	r3, r0, r7
   16528:	mla	r6, r2, r5, r4
   1652c:	mov	r4, r0
   16530:	sbcs	r2, r1, r2
   16534:	mov	r0, #0
   16538:	movwcc	r0, #1
   1653c:	mov	r3, r4
   16540:	cmp	r0, #0
   16544:	str	r0, [sp, #12]
   16548:	mov	r0, r1
   1654c:	str	r3, [sp, #4]
   16550:	mvnne	sl, #0
   16554:	mvnne	r6, #0
   16558:	str	r0, [sp, #8]
   1655c:	subs	r2, r4, sl
   16560:	ldr	r4, [sp, #24]
   16564:	sbcs	r2, r1, r6
   16568:	movwcc	ip, #1
   1656c:	umull	r7, r2, sl, r5
   16570:	cmp	ip, #0
   16574:	mla	r2, sl, r4, r2
   16578:	mvnne	r7, #0
   1657c:	cmp	ip, #0
   16580:	mov	sl, #0
   16584:	umull	r1, lr, r7, r5
   16588:	mla	r2, r6, r5, r2
   1658c:	mvnne	r2, #0
   16590:	mla	lr, r7, r4, lr
   16594:	subs	r6, r3, r7
   16598:	mla	lr, r2, r5, lr
   1659c:	sbcs	r2, r0, r2
   165a0:	movwcc	sl, #1
   165a4:	mov	r2, #0
   165a8:	cmp	sl, #0
   165ac:	mvnne	r1, #0
   165b0:	mvnne	lr, #0
   165b4:	subs	r6, r3, r1
   165b8:	ldr	r3, [sp, #24]
   165bc:	sbcs	r6, r0, lr
   165c0:	umull	r0, r7, r1, r5
   165c4:	movwcc	r2, #1
   165c8:	cmp	r2, #0
   165cc:	mvnne	r0, #0
   165d0:	mla	r1, r1, r3, r7
   165d4:	cmp	r2, #0
   165d8:	umull	r6, r4, r0, r5
   165dc:	mla	r1, lr, r5, r1
   165e0:	mla	r4, r0, r3, r4
   165e4:	ldr	r3, [sp, #4]
   165e8:	mvnne	r1, #0
   165ec:	mla	r7, r1, r5, r4
   165f0:	ldr	r5, [sp, #16]
   165f4:	subs	r0, r3, r0
   165f8:	ldr	r0, [sp, #8]
   165fc:	sbcs	r0, r0, r1
   16600:	mov	r0, #0
   16604:	movwcc	r0, #1
   16608:	cmp	r0, #0
   1660c:	mov	r1, r0
   16610:	ldr	r0, [sp, #20]
   16614:	mvnne	r7, #0
   16618:	mvnne	r6, #0
   1661c:	orr	r0, r0, r5
   16620:	ldr	r5, [sp, #12]
   16624:	orr	r0, r0, r5
   16628:	orr	r0, r0, ip
   1662c:	orr	r0, r0, sl
   16630:	orr	r0, r0, r2
   16634:	orr	r0, r0, r1
   16638:	b	16ab4 <__assert_fail@plt+0x59fc>
   1663c:	mov	r1, #0
   16640:	lsl	r2, r7, #10
   16644:	lsl	r0, r6, #10
   16648:	lsr	r3, r7, #22
   1664c:	cmp	r1, r7, lsr #22
   16650:	orr	r2, r2, r6, lsr #22
   16654:	mvnne	r0, #0
   16658:	movwne	r3, #1
   1665c:	cmp	r1, r7, lsr #22
   16660:	b	16ae0 <__assert_fail@plt+0x5a28>
   16664:	mvn	r0, #0
   16668:	mvn	r1, #0
   1666c:	mov	r2, r5
   16670:	mov	sl, r3
   16674:	bl	17110 <__assert_fail@plt+0x6058>
   16678:	subs	r2, r0, r6
   1667c:	mov	ip, r0
   16680:	mov	r0, #0
   16684:	sbcs	r2, r1, r7
   16688:	movwcc	r0, #1
   1668c:	umull	r4, r2, r6, r5
   16690:	cmp	r0, #0
   16694:	mla	r2, r6, sl, r2
   16698:	str	r0, [sp, #20]
   1669c:	mvnne	r4, #0
   166a0:	cmp	r0, #0
   166a4:	mla	r2, r7, r5, r2
   166a8:	mov	r0, #0
   166ac:	umull	lr, r3, r4, r5
   166b0:	mvnne	r2, #0
   166b4:	mla	r3, r4, sl, r3
   166b8:	mla	r6, r2, r5, r3
   166bc:	subs	r3, ip, r4
   166c0:	sbcs	r2, r1, r2
   166c4:	mov	r3, r1
   166c8:	movwcc	r0, #1
   166cc:	str	r3, [sp, #8]
   166d0:	cmp	r0, #0
   166d4:	str	r0, [sp, #16]
   166d8:	mov	r0, ip
   166dc:	mvnne	lr, #0
   166e0:	mvnne	r6, #0
   166e4:	str	r0, [sp, #12]
   166e8:	subs	r2, ip, lr
   166ec:	umull	r7, r4, lr, r5
   166f0:	sbcs	r2, r1, r6
   166f4:	mla	r4, lr, sl, r4
   166f8:	mov	r2, #0
   166fc:	mla	r6, r6, r5, r4
   16700:	mov	r4, #0
   16704:	movwcc	r2, #1
   16708:	cmp	r2, #0
   1670c:	mvnne	r7, #0
   16710:	cmp	r2, #0
   16714:	umull	r1, ip, r7, r5
   16718:	mvnne	r6, #0
   1671c:	mla	ip, r7, sl, ip
   16720:	subs	r7, r0, r7
   16724:	mla	lr, r6, r5, ip
   16728:	sbcs	r7, r3, r6
   1672c:	mov	ip, #0
   16730:	movwcc	ip, #1
   16734:	cmp	ip, #0
   16738:	mvnne	r1, #0
   1673c:	mvnne	lr, #0
   16740:	subs	r7, r0, r1
   16744:	sbcs	r7, r3, lr
   16748:	movwcc	r4, #1
   1674c:	umull	r0, r7, r1, r5
   16750:	cmp	r4, #0
   16754:	mla	r1, r1, sl, r7
   16758:	mvnne	r0, #0
   1675c:	mla	r1, lr, r5, r1
   16760:	cmp	r4, #0
   16764:	umull	r6, r3, r0, r5
   16768:	mvnne	r1, #0
   1676c:	mla	r3, r0, sl, r3
   16770:	mla	r7, r1, r5, r3
   16774:	ldr	r3, [sp, #12]
   16778:	subs	r0, r3, r0
   1677c:	ldr	r3, [sp, #16]
   16780:	ldr	r0, [sp, #8]
   16784:	sbcs	r0, r0, r1
   16788:	mov	r0, #0
   1678c:	movwcc	r0, #1
   16790:	cmp	r0, #0
   16794:	mov	r1, r0
   16798:	ldr	r0, [sp, #20]
   1679c:	mvnne	r7, #0
   167a0:	mvnne	r6, #0
   167a4:	orr	r0, r0, r3
   167a8:	orr	r0, r0, r2
   167ac:	orr	r0, r0, ip
   167b0:	orr	r0, r0, r4
   167b4:	orr	r3, r0, r1
   167b8:	b	16b14 <__assert_fail@plt+0x5a5c>
   167bc:	mvn	r0, #0
   167c0:	mvn	r1, #0
   167c4:	mov	r2, r5
   167c8:	mov	sl, r3
   167cc:	bl	17110 <__assert_fail@plt+0x6058>
   167d0:	umull	r3, r2, r6, r5
   167d4:	mov	lr, r1
   167d8:	mov	r1, r0
   167dc:	mla	r2, r6, sl, r2
   167e0:	subs	r6, r0, r6
   167e4:	mov	r0, #0
   167e8:	sbcs	r6, lr, r7
   167ec:	mla	r2, r7, r5, r2
   167f0:	movwcc	r0, #1
   167f4:	cmp	r0, #0
   167f8:	str	r0, [sp, #20]
   167fc:	mov	r0, r1
   16800:	mvnne	r3, #0
   16804:	mvnne	r2, #0
   16808:	str	r0, [sp, #16]
   1680c:	subs	r4, r1, r3
   16810:	umull	r7, ip, r3, r5
   16814:	sbcs	r4, lr, r2
   16818:	mla	r3, r3, sl, ip
   1681c:	mov	ip, #0
   16820:	mov	r4, #0
   16824:	mla	r2, r2, r5, r3
   16828:	movwcc	r4, #1
   1682c:	cmp	r4, #0
   16830:	mvnne	r7, #0
   16834:	cmp	r4, #0
   16838:	umull	r1, r6, r7, r5
   1683c:	mvnne	r2, #0
   16840:	mla	r6, r7, sl, r6
   16844:	mla	r3, r2, r5, r6
   16848:	subs	r6, r0, r7
   1684c:	sbcs	r2, lr, r2
   16850:	movwcc	ip, #1
   16854:	mov	r2, #0
   16858:	cmp	ip, #0
   1685c:	mvnne	r1, #0
   16860:	mvnne	r3, #0
   16864:	subs	r6, r0, r1
   16868:	sbcs	r6, lr, r3
   1686c:	movwcc	r2, #1
   16870:	umull	r0, r6, r1, r5
   16874:	cmp	r2, #0
   16878:	str	r6, [sp, #12]
   1687c:	mvnne	r0, #0
   16880:	cmp	r2, #0
   16884:	umull	r6, r7, r0, r5
   16888:	mla	r7, r0, sl, r7
   1688c:	str	r7, [sp, #8]
   16890:	ldr	r7, [sp, #12]
   16894:	mla	r1, r1, sl, r7
   16898:	mla	r1, r3, r5, r1
   1689c:	ldr	r3, [sp, #8]
   168a0:	mvnne	r1, #0
   168a4:	mla	r7, r1, r5, r3
   168a8:	ldr	r3, [sp, #16]
   168ac:	subs	r0, r3, r0
   168b0:	sbcs	r0, lr, r1
   168b4:	mov	r0, #0
   168b8:	movwcc	r0, #1
   168bc:	cmp	r0, #0
   168c0:	mov	r1, r0
   168c4:	ldr	r0, [sp, #20]
   168c8:	mvnne	r7, #0
   168cc:	mvnne	r6, #0
   168d0:	orr	r0, r0, r4
   168d4:	orr	r0, r0, ip
   168d8:	orr	r0, r0, r2
   168dc:	orr	r3, r0, r1
   168e0:	b	16b14 <__assert_fail@plt+0x5a5c>
   168e4:	mvn	r0, #0
   168e8:	mvn	r1, #0
   168ec:	mov	r2, r5
   168f0:	mov	sl, r3
   168f4:	bl	17110 <__assert_fail@plt+0x6058>
   168f8:	mov	lr, r0
   168fc:	subs	r0, r0, r6
   16900:	mov	r2, #0
   16904:	mov	ip, r1
   16908:	str	sl, [sp, #24]
   1690c:	sbcs	r0, r1, r7
   16910:	umull	r3, r1, r6, r5
   16914:	str	lr, [sp, #4]
   16918:	movwcc	r2, #1
   1691c:	mla	r6, r6, sl, r1
   16920:	mov	r1, #0
   16924:	cmp	r2, #0
   16928:	mla	r7, r7, r5, r6
   1692c:	str	r2, [sp, #20]
   16930:	mvnne	r3, #0
   16934:	cmp	r2, #0
   16938:	mov	r2, #0
   1693c:	umull	r0, r4, r3, r5
   16940:	mvnne	r7, #0
   16944:	mla	r4, r3, sl, r4
   16948:	subs	r3, lr, r3
   1694c:	sbcs	r3, ip, r7
   16950:	mla	r4, r7, r5, r4
   16954:	movwcc	r1, #1
   16958:	cmp	r1, #0
   1695c:	str	r1, [sp, #16]
   16960:	mvnne	r0, #0
   16964:	mvnne	r4, #0
   16968:	subs	r3, lr, r0
   1696c:	sbcs	r3, ip, r4
   16970:	movwcc	r2, #1
   16974:	umull	r6, r3, r0, r5
   16978:	cmp	r2, #0
   1697c:	mla	r0, r0, sl, r3
   16980:	str	r2, [sp, #12]
   16984:	mvnne	r6, #0
   16988:	mla	r0, r4, r5, r0
   1698c:	cmp	r2, #0
   16990:	ldr	r4, [sp, #24]
   16994:	umull	r1, r7, r6, r5
   16998:	mvnne	r0, #0
   1699c:	subs	r3, lr, r6
   169a0:	mla	r7, r6, sl, r7
   169a4:	mov	r3, ip
   169a8:	mla	r7, r0, r5, r7
   169ac:	sbcs	r0, ip, r0
   169b0:	str	r3, [sp]
   169b4:	mov	r0, #0
   169b8:	movwcc	r0, #1
   169bc:	cmp	r0, #0
   169c0:	str	r0, [sp, #8]
   169c4:	mvnne	r1, #0
   169c8:	mvnne	r7, #0
   169cc:	subs	r0, lr, r1
   169d0:	sbcs	r0, ip, r7
   169d4:	mov	ip, #0
   169d8:	movwcc	ip, #1
   169dc:	umull	r6, r0, r1, r5
   169e0:	cmp	ip, #0
   169e4:	mla	r1, r1, r4, r0
   169e8:	mov	r0, lr
   169ec:	mvnne	r6, #0
   169f0:	mla	r1, r7, r5, r1
   169f4:	cmp	ip, #0
   169f8:	umull	r2, sl, r6, r5
   169fc:	mvnne	r1, #0
   16a00:	mla	sl, r6, r4, sl
   16a04:	subs	r6, lr, r6
   16a08:	mov	lr, #0
   16a0c:	mla	r7, r1, r5, sl
   16a10:	sbcs	r1, r3, r1
   16a14:	movwcc	lr, #1
   16a18:	ldr	r1, [sp, #24]
   16a1c:	cmp	lr, #0
   16a20:	mvnne	r2, #0
   16a24:	mvnne	r7, #0
   16a28:	subs	r6, r0, r2
   16a2c:	umull	r0, sl, r2, r5
   16a30:	sbcs	r6, r3, r7
   16a34:	mov	r3, #0
   16a38:	mla	r2, r2, r1, sl
   16a3c:	movwcc	r3, #1
   16a40:	mla	r2, r7, r5, r2
   16a44:	cmp	r3, #0
   16a48:	mvnne	r0, #0
   16a4c:	cmp	r3, #0
   16a50:	umull	r6, r4, r0, r5
   16a54:	mvnne	r2, #0
   16a58:	mla	r4, r0, r1, r4
   16a5c:	ldr	r1, [sp, #4]
   16a60:	mla	r7, r2, r5, r4
   16a64:	ldr	r5, [sp, #16]
   16a68:	subs	r0, r1, r0
   16a6c:	ldr	r0, [sp]
   16a70:	sbcs	r0, r0, r2
   16a74:	mov	r0, #0
   16a78:	movwcc	r0, #1
   16a7c:	cmp	r0, #0
   16a80:	mov	r2, r0
   16a84:	ldr	r0, [sp, #20]
   16a88:	mvnne	r7, #0
   16a8c:	mvnne	r6, #0
   16a90:	orr	r0, r0, r5
   16a94:	ldr	r5, [sp, #12]
   16a98:	orr	r0, r0, r5
   16a9c:	ldr	r5, [sp, #8]
   16aa0:	orr	r0, r0, r5
   16aa4:	orr	r0, r0, ip
   16aa8:	orr	r0, r0, lr
   16aac:	orr	r0, r0, r3
   16ab0:	orr	r0, r0, r2
   16ab4:	and	r3, r0, #1
   16ab8:	b	16b14 <__assert_fail@plt+0x5a5c>
   16abc:	mov	r1, #0
   16ac0:	lsl	r2, r7, #9
   16ac4:	lsl	r0, r6, #9
   16ac8:	lsr	r3, r7, #23
   16acc:	cmp	r1, r7, lsr #23
   16ad0:	orr	r2, r2, r6, lsr #23
   16ad4:	mvnne	r0, #0
   16ad8:	movwne	r3, #1
   16adc:	cmp	r1, r7, lsr #23
   16ae0:	mvnne	r2, #0
   16ae4:	mov	r6, r0
   16ae8:	mov	r7, r2
   16aec:	b	16b14 <__assert_fail@plt+0x5a5c>
   16af0:	lsl	r1, r7, #1
   16af4:	lsl	r0, r6, #1
   16af8:	cmp	r7, #0
   16afc:	lsr	r3, r7, #31
   16b00:	orr	r1, r1, r6, lsr #31
   16b04:	mvnlt	r0, #0
   16b08:	mvnlt	r1, #0
   16b0c:	mov	r6, r0
   16b10:	mov	r7, r1
   16b14:	ldr	r1, [sp, #32]
   16b18:	ldr	r2, [sp, #28]
   16b1c:	orr	r8, r3, r8
   16b20:	add	r0, r1, r2
   16b24:	str	r0, [r9]
   16b28:	ldrb	r0, [r1, r2]
   16b2c:	cmp	r0, #0
   16b30:	orrne	r8, r8, #2
   16b34:	ldr	r0, [sp, #36]	; 0x24
   16b38:	strd	r6, [r0]
   16b3c:	mov	r0, r8
   16b40:	sub	sp, fp, #28
   16b44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b48:	movw	r0, #32837	; 0x8045
   16b4c:	movw	r1, #32875	; 0x806b
   16b50:	movw	r3, #32891	; 0x807b
   16b54:	mov	r2, #85	; 0x55
   16b58:	movt	r0, #1
   16b5c:	movt	r1, #1
   16b60:	movt	r3, #1
   16b64:	bl	110b8 <__assert_fail@plt>
   16b68:	clz	r2, r1
   16b6c:	clz	r3, r0
   16b70:	lsr	r2, r2, #5
   16b74:	lsr	r3, r3, #5
   16b78:	orrs	r2, r3, r2
   16b7c:	movwne	r1, #1
   16b80:	movwne	r0, #1
   16b84:	cmp	r1, #0
   16b88:	beq	16bb8 <__assert_fail@plt+0x5b00>
   16b8c:	mvn	r2, #-2147483648	; 0x80000000
   16b90:	udiv	r2, r2, r1
   16b94:	cmp	r2, r0
   16b98:	bcs	16bb8 <__assert_fail@plt+0x5b00>
   16b9c:	push	{fp, lr}
   16ba0:	mov	fp, sp
   16ba4:	bl	10fec <__errno_location@plt>
   16ba8:	mov	r1, #12
   16bac:	str	r1, [r0]
   16bb0:	mov	r0, #0
   16bb4:	pop	{fp, pc}
   16bb8:	b	10e3c <calloc@plt>
   16bbc:	cmp	r0, #0
   16bc0:	movweq	r0, #1
   16bc4:	cmn	r0, #1
   16bc8:	ble	16bd0 <__assert_fail@plt+0x5b18>
   16bcc:	b	10f74 <malloc@plt>
   16bd0:	push	{fp, lr}
   16bd4:	mov	fp, sp
   16bd8:	bl	10fec <__errno_location@plt>
   16bdc:	mov	r1, #12
   16be0:	str	r1, [r0]
   16be4:	mov	r0, #0
   16be8:	pop	{fp, pc}
   16bec:	push	{fp, lr}
   16bf0:	mov	fp, sp
   16bf4:	cmp	r0, #0
   16bf8:	beq	16c14 <__assert_fail@plt+0x5b5c>
   16bfc:	cmp	r1, #0
   16c00:	beq	16c20 <__assert_fail@plt+0x5b68>
   16c04:	cmn	r1, #1
   16c08:	ble	16c2c <__assert_fail@plt+0x5b74>
   16c0c:	pop	{fp, lr}
   16c10:	b	10ee4 <realloc@plt>
   16c14:	mov	r0, r1
   16c18:	pop	{fp, lr}
   16c1c:	b	16bbc <__assert_fail@plt+0x5b04>
   16c20:	bl	131e8 <__assert_fail@plt+0x2130>
   16c24:	mov	r0, #0
   16c28:	pop	{fp, pc}
   16c2c:	bl	10fec <__errno_location@plt>
   16c30:	mov	r1, #12
   16c34:	str	r1, [r0]
   16c38:	mov	r0, #0
   16c3c:	pop	{fp, pc}
   16c40:	push	{r4, r5, r6, sl, fp, lr}
   16c44:	add	fp, sp, #16
   16c48:	mov	r4, r0
   16c4c:	bl	10f44 <__fpending@plt>
   16c50:	ldr	r6, [r4]
   16c54:	mov	r5, r0
   16c58:	mov	r0, r4
   16c5c:	bl	16cc4 <__assert_fail@plt+0x5c0c>
   16c60:	tst	r6, #32
   16c64:	bne	16c9c <__assert_fail@plt+0x5be4>
   16c68:	cmp	r0, #0
   16c6c:	mov	r4, r0
   16c70:	mvnne	r4, #0
   16c74:	cmp	r5, #0
   16c78:	bne	16ca8 <__assert_fail@plt+0x5bf0>
   16c7c:	cmp	r0, #0
   16c80:	beq	16ca8 <__assert_fail@plt+0x5bf0>
   16c84:	bl	10fec <__errno_location@plt>
   16c88:	ldr	r0, [r0]
   16c8c:	subs	r4, r0, #9
   16c90:	mvnne	r4, #0
   16c94:	mov	r0, r4
   16c98:	pop	{r4, r5, r6, sl, fp, pc}
   16c9c:	mvn	r4, #0
   16ca0:	cmp	r0, #0
   16ca4:	beq	16cb0 <__assert_fail@plt+0x5bf8>
   16ca8:	mov	r0, r4
   16cac:	pop	{r4, r5, r6, sl, fp, pc}
   16cb0:	bl	10fec <__errno_location@plt>
   16cb4:	mov	r1, #0
   16cb8:	str	r1, [r0]
   16cbc:	mov	r0, r4
   16cc0:	pop	{r4, r5, r6, sl, fp, pc}
   16cc4:	push	{r4, r5, r6, sl, fp, lr}
   16cc8:	add	fp, sp, #16
   16ccc:	sub	sp, sp, #8
   16cd0:	mov	r4, r0
   16cd4:	bl	1101c <fileno@plt>
   16cd8:	cmn	r0, #1
   16cdc:	ble	16d50 <__assert_fail@plt+0x5c98>
   16ce0:	mov	r0, r4
   16ce4:	bl	10f8c <__freading@plt>
   16ce8:	cmp	r0, #0
   16cec:	beq	16d18 <__assert_fail@plt+0x5c60>
   16cf0:	mov	r0, r4
   16cf4:	bl	1101c <fileno@plt>
   16cf8:	mov	r1, #1
   16cfc:	mov	r2, #0
   16d00:	mov	r3, #0
   16d04:	str	r1, [sp]
   16d08:	bl	10f2c <lseek64@plt>
   16d0c:	and	r0, r0, r1
   16d10:	cmn	r0, #1
   16d14:	beq	16d50 <__assert_fail@plt+0x5c98>
   16d18:	mov	r0, r4
   16d1c:	bl	16d60 <__assert_fail@plt+0x5ca8>
   16d20:	cmp	r0, #0
   16d24:	beq	16d50 <__assert_fail@plt+0x5c98>
   16d28:	bl	10fec <__errno_location@plt>
   16d2c:	ldr	r6, [r0]
   16d30:	mov	r5, r0
   16d34:	mov	r0, r4
   16d38:	bl	11040 <fclose@plt>
   16d3c:	cmp	r6, #0
   16d40:	strne	r6, [r5]
   16d44:	mvnne	r0, #0
   16d48:	sub	sp, fp, #16
   16d4c:	pop	{r4, r5, r6, sl, fp, pc}
   16d50:	mov	r0, r4
   16d54:	sub	sp, fp, #16
   16d58:	pop	{r4, r5, r6, sl, fp, lr}
   16d5c:	b	11040 <fclose@plt>
   16d60:	push	{r4, sl, fp, lr}
   16d64:	add	fp, sp, #8
   16d68:	sub	sp, sp, #8
   16d6c:	mov	r4, r0
   16d70:	cmp	r0, #0
   16d74:	beq	16d90 <__assert_fail@plt+0x5cd8>
   16d78:	mov	r0, r4
   16d7c:	bl	10f8c <__freading@plt>
   16d80:	cmp	r0, #0
   16d84:	ldrbne	r0, [r4, #1]
   16d88:	tstne	r0, #1
   16d8c:	bne	16da0 <__assert_fail@plt+0x5ce8>
   16d90:	mov	r0, r4
   16d94:	sub	sp, fp, #8
   16d98:	pop	{r4, sl, fp, lr}
   16d9c:	b	10e78 <fflush@plt>
   16da0:	mov	r0, #1
   16da4:	mov	r2, #0
   16da8:	mov	r3, #0
   16dac:	str	r0, [sp]
   16db0:	mov	r0, r4
   16db4:	bl	16dbc <__assert_fail@plt+0x5d04>
   16db8:	b	16d90 <__assert_fail@plt+0x5cd8>
   16dbc:	push	{r4, r5, r6, r7, fp, lr}
   16dc0:	add	fp, sp, #16
   16dc4:	sub	sp, sp, #8
   16dc8:	mov	r4, r0
   16dcc:	ldr	r0, [r0, #4]
   16dd0:	mov	r5, r3
   16dd4:	mov	r6, r2
   16dd8:	ldr	r1, [r4, #8]
   16ddc:	cmp	r1, r0
   16de0:	bne	16dfc <__assert_fail@plt+0x5d44>
   16de4:	ldrd	r0, [r4, #16]
   16de8:	cmp	r1, r0
   16dec:	bne	16dfc <__assert_fail@plt+0x5d44>
   16df0:	ldr	r0, [r4, #36]	; 0x24
   16df4:	cmp	r0, #0
   16df8:	beq	16e14 <__assert_fail@plt+0x5d5c>
   16dfc:	mov	r0, r4
   16e00:	mov	r2, r6
   16e04:	mov	r3, r5
   16e08:	sub	sp, fp, #16
   16e0c:	pop	{r4, r5, r6, r7, fp, lr}
   16e10:	b	1104c <fseeko64@plt>
   16e14:	ldr	r7, [fp, #8]
   16e18:	mov	r0, r4
   16e1c:	bl	1101c <fileno@plt>
   16e20:	mov	r2, r6
   16e24:	mov	r3, r5
   16e28:	str	r7, [sp]
   16e2c:	bl	10f2c <lseek64@plt>
   16e30:	and	r2, r0, r1
   16e34:	cmn	r2, #1
   16e38:	mvneq	r0, #0
   16e3c:	subeq	sp, fp, #16
   16e40:	popeq	{r4, r5, r6, r7, fp, pc}
   16e44:	strd	r0, [r4, #80]	; 0x50
   16e48:	ldr	r0, [r4]
   16e4c:	bic	r0, r0, #16
   16e50:	str	r0, [r4]
   16e54:	mov	r0, #0
   16e58:	sub	sp, fp, #16
   16e5c:	pop	{r4, r5, r6, r7, fp, pc}
   16e60:	push	{fp, lr}
   16e64:	mov	fp, sp
   16e68:	mov	r0, #14
   16e6c:	bl	11070 <nl_langinfo@plt>
   16e70:	movw	r1, #31153	; 0x79b1
   16e74:	cmp	r0, #0
   16e78:	movt	r1, #1
   16e7c:	movne	r1, r0
   16e80:	movw	r0, #32970	; 0x80ca
   16e84:	ldrb	r2, [r1]
   16e88:	movt	r0, #1
   16e8c:	cmp	r2, #0
   16e90:	movne	r0, r1
   16e94:	pop	{fp, pc}
   16e98:	push	{r4, r5, r6, r7, fp, lr}
   16e9c:	add	fp, sp, #16
   16ea0:	sub	sp, sp, #8
   16ea4:	add	r5, sp, #4
   16ea8:	cmp	r0, #0
   16eac:	mov	r7, r2
   16eb0:	mov	r4, r1
   16eb4:	movne	r5, r0
   16eb8:	mov	r0, r5
   16ebc:	bl	10f50 <mbrtowc@plt>
   16ec0:	mov	r6, r0
   16ec4:	cmp	r7, #0
   16ec8:	beq	16eec <__assert_fail@plt+0x5e34>
   16ecc:	cmn	r6, #2
   16ed0:	bcc	16eec <__assert_fail@plt+0x5e34>
   16ed4:	mov	r0, #0
   16ed8:	bl	16f34 <__assert_fail@plt+0x5e7c>
   16edc:	cmp	r0, #0
   16ee0:	ldrbeq	r0, [r4]
   16ee4:	moveq	r6, #1
   16ee8:	streq	r0, [r5]
   16eec:	mov	r0, r6
   16ef0:	sub	sp, fp, #16
   16ef4:	pop	{r4, r5, r6, r7, fp, pc}
   16ef8:	cmp	r2, #0
   16efc:	beq	16f2c <__assert_fail@plt+0x5e74>
   16f00:	mvn	r3, #0
   16f04:	udiv	r3, r3, r2
   16f08:	cmp	r3, r1
   16f0c:	bcs	16f2c <__assert_fail@plt+0x5e74>
   16f10:	push	{fp, lr}
   16f14:	mov	fp, sp
   16f18:	bl	10fec <__errno_location@plt>
   16f1c:	mov	r1, #12
   16f20:	str	r1, [r0]
   16f24:	mov	r0, #0
   16f28:	pop	{fp, pc}
   16f2c:	mul	r1, r2, r1
   16f30:	b	16bec <__assert_fail@plt+0x5b34>
   16f34:	push	{r4, sl, fp, lr}
   16f38:	add	fp, sp, #8
   16f3c:	sub	sp, sp, #264	; 0x108
   16f40:	add	r1, sp, #7
   16f44:	movw	r2, #257	; 0x101
   16f48:	bl	16f98 <__assert_fail@plt+0x5ee0>
   16f4c:	mov	r4, #0
   16f50:	cmp	r0, #0
   16f54:	bne	16f8c <__assert_fail@plt+0x5ed4>
   16f58:	movw	r1, #32976	; 0x80d0
   16f5c:	add	r0, sp, #7
   16f60:	movt	r1, #1
   16f64:	bl	10e60 <strcmp@plt>
   16f68:	cmp	r0, #0
   16f6c:	beq	16f8c <__assert_fail@plt+0x5ed4>
   16f70:	movw	r1, #32978	; 0x80d2
   16f74:	add	r0, sp, #7
   16f78:	movt	r1, #1
   16f7c:	bl	10e60 <strcmp@plt>
   16f80:	mov	r4, r0
   16f84:	cmp	r0, #0
   16f88:	movwne	r4, #1
   16f8c:	mov	r0, r4
   16f90:	sub	sp, fp, #8
   16f94:	pop	{r4, sl, fp, pc}
   16f98:	push	{r4, r5, r6, r7, fp, lr}
   16f9c:	add	fp, sp, #16
   16fa0:	mov	r4, r1
   16fa4:	mov	r1, #0
   16fa8:	mov	r6, r2
   16fac:	bl	11058 <setlocale@plt>
   16fb0:	cmp	r0, #0
   16fb4:	beq	16fe4 <__assert_fail@plt+0x5f2c>
   16fb8:	mov	r7, r0
   16fbc:	bl	10fc8 <strlen@plt>
   16fc0:	cmp	r0, r6
   16fc4:	bcs	17004 <__assert_fail@plt+0x5f4c>
   16fc8:	add	r2, r0, #1
   16fcc:	mov	r0, r4
   16fd0:	mov	r1, r7
   16fd4:	bl	10e9c <memcpy@plt>
   16fd8:	mov	r5, #0
   16fdc:	mov	r0, r5
   16fe0:	pop	{r4, r5, r6, r7, fp, pc}
   16fe4:	cmp	r6, #0
   16fe8:	mov	r5, #22
   16fec:	movne	r0, #0
   16ff0:	strbne	r0, [r4]
   16ff4:	movne	r0, r5
   16ff8:	popne	{r4, r5, r6, r7, fp, pc}
   16ffc:	mov	r0, r5
   17000:	pop	{r4, r5, r6, r7, fp, pc}
   17004:	mov	r5, #34	; 0x22
   17008:	cmp	r6, #0
   1700c:	beq	1702c <__assert_fail@plt+0x5f74>
   17010:	sub	r6, r6, #1
   17014:	mov	r0, r4
   17018:	mov	r1, r7
   1701c:	mov	r2, r6
   17020:	bl	10e9c <memcpy@plt>
   17024:	mov	r0, #0
   17028:	strb	r0, [r4, r6]
   1702c:	mov	r0, r5
   17030:	pop	{r4, r5, r6, r7, fp, pc}
   17034:	mov	r1, #0
   17038:	b	11058 <setlocale@plt>
   1703c:	cmp	r3, #0
   17040:	cmpeq	r2, #0
   17044:	bne	17068 <__assert_fail@plt+0x5fb0>
   17048:	cmp	r1, #0
   1704c:	movlt	r1, #-2147483648	; 0x80000000
   17050:	movlt	r0, #0
   17054:	blt	17064 <__assert_fail@plt+0x5fac>
   17058:	cmpeq	r0, #0
   1705c:	mvnne	r1, #-2147483648	; 0x80000000
   17060:	mvnne	r0, #0
   17064:	b	1714c <__assert_fail@plt+0x6094>
   17068:	sub	sp, sp, #8
   1706c:	push	{sp, lr}
   17070:	cmp	r1, #0
   17074:	blt	17094 <__assert_fail@plt+0x5fdc>
   17078:	cmp	r3, #0
   1707c:	blt	170c8 <__assert_fail@plt+0x6010>
   17080:	bl	1715c <__assert_fail@plt+0x60a4>
   17084:	ldr	lr, [sp, #4]
   17088:	add	sp, sp, #8
   1708c:	pop	{r2, r3}
   17090:	bx	lr
   17094:	rsbs	r0, r0, #0
   17098:	sbc	r1, r1, r1, lsl #1
   1709c:	cmp	r3, #0
   170a0:	blt	170ec <__assert_fail@plt+0x6034>
   170a4:	bl	1715c <__assert_fail@plt+0x60a4>
   170a8:	ldr	lr, [sp, #4]
   170ac:	add	sp, sp, #8
   170b0:	pop	{r2, r3}
   170b4:	rsbs	r0, r0, #0
   170b8:	sbc	r1, r1, r1, lsl #1
   170bc:	rsbs	r2, r2, #0
   170c0:	sbc	r3, r3, r3, lsl #1
   170c4:	bx	lr
   170c8:	rsbs	r2, r2, #0
   170cc:	sbc	r3, r3, r3, lsl #1
   170d0:	bl	1715c <__assert_fail@plt+0x60a4>
   170d4:	ldr	lr, [sp, #4]
   170d8:	add	sp, sp, #8
   170dc:	pop	{r2, r3}
   170e0:	rsbs	r0, r0, #0
   170e4:	sbc	r1, r1, r1, lsl #1
   170e8:	bx	lr
   170ec:	rsbs	r2, r2, #0
   170f0:	sbc	r3, r3, r3, lsl #1
   170f4:	bl	1715c <__assert_fail@plt+0x60a4>
   170f8:	ldr	lr, [sp, #4]
   170fc:	add	sp, sp, #8
   17100:	pop	{r2, r3}
   17104:	rsbs	r2, r2, #0
   17108:	sbc	r3, r3, r3, lsl #1
   1710c:	bx	lr
   17110:	cmp	r3, #0
   17114:	cmpeq	r2, #0
   17118:	bne	17130 <__assert_fail@plt+0x6078>
   1711c:	cmp	r1, #0
   17120:	cmpeq	r0, #0
   17124:	mvnne	r1, #0
   17128:	mvnne	r0, #0
   1712c:	b	1714c <__assert_fail@plt+0x6094>
   17130:	sub	sp, sp, #8
   17134:	push	{sp, lr}
   17138:	bl	1715c <__assert_fail@plt+0x60a4>
   1713c:	ldr	lr, [sp, #4]
   17140:	add	sp, sp, #8
   17144:	pop	{r2, r3}
   17148:	bx	lr
   1714c:	push	{r1, lr}
   17150:	mov	r0, #8
   17154:	bl	10e54 <raise@plt>
   17158:	pop	{r1, pc}
   1715c:	cmp	r1, r3
   17160:	cmpeq	r0, r2
   17164:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17168:	mov	r4, r0
   1716c:	movcc	r0, #0
   17170:	mov	r5, r1
   17174:	ldr	lr, [sp, #36]	; 0x24
   17178:	movcc	r1, r0
   1717c:	bcc	17278 <__assert_fail@plt+0x61c0>
   17180:	cmp	r3, #0
   17184:	clzeq	ip, r2
   17188:	clzne	ip, r3
   1718c:	addeq	ip, ip, #32
   17190:	cmp	r5, #0
   17194:	clzeq	r1, r4
   17198:	addeq	r1, r1, #32
   1719c:	clzne	r1, r5
   171a0:	sub	ip, ip, r1
   171a4:	sub	sl, ip, #32
   171a8:	lsl	r9, r3, ip
   171ac:	rsb	fp, ip, #32
   171b0:	orr	r9, r9, r2, lsl sl
   171b4:	orr	r9, r9, r2, lsr fp
   171b8:	lsl	r8, r2, ip
   171bc:	cmp	r5, r9
   171c0:	cmpeq	r4, r8
   171c4:	movcc	r0, #0
   171c8:	movcc	r1, r0
   171cc:	bcc	171e8 <__assert_fail@plt+0x6130>
   171d0:	mov	r0, #1
   171d4:	subs	r4, r4, r8
   171d8:	lsl	r1, r0, sl
   171dc:	orr	r1, r1, r0, lsr fp
   171e0:	lsl	r0, r0, ip
   171e4:	sbc	r5, r5, r9
   171e8:	cmp	ip, #0
   171ec:	beq	17278 <__assert_fail@plt+0x61c0>
   171f0:	lsr	r6, r8, #1
   171f4:	orr	r6, r6, r9, lsl #31
   171f8:	lsr	r7, r9, #1
   171fc:	mov	r2, ip
   17200:	b	17224 <__assert_fail@plt+0x616c>
   17204:	subs	r3, r4, r6
   17208:	sbc	r8, r5, r7
   1720c:	adds	r3, r3, r3
   17210:	adc	r8, r8, r8
   17214:	adds	r4, r3, #1
   17218:	adc	r5, r8, #0
   1721c:	subs	r2, r2, #1
   17220:	beq	17240 <__assert_fail@plt+0x6188>
   17224:	cmp	r5, r7
   17228:	cmpeq	r4, r6
   1722c:	bcs	17204 <__assert_fail@plt+0x614c>
   17230:	adds	r4, r4, r4
   17234:	adc	r5, r5, r5
   17238:	subs	r2, r2, #1
   1723c:	bne	17224 <__assert_fail@plt+0x616c>
   17240:	lsr	r3, r4, ip
   17244:	orr	r3, r3, r5, lsl fp
   17248:	lsr	r2, r5, ip
   1724c:	orr	r3, r3, r5, lsr sl
   17250:	adds	r0, r0, r4
   17254:	mov	r4, r3
   17258:	lsl	r3, r2, ip
   1725c:	orr	r3, r3, r4, lsl sl
   17260:	lsl	ip, r4, ip
   17264:	orr	r3, r3, r4, lsr fp
   17268:	adc	r1, r1, r5
   1726c:	subs	r0, r0, ip
   17270:	mov	r5, r2
   17274:	sbc	r1, r1, r3
   17278:	cmp	lr, #0
   1727c:	strdne	r4, [lr]
   17280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17284:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17288:	mov	r7, r0
   1728c:	ldr	r6, [pc, #72]	; 172dc <__assert_fail@plt+0x6224>
   17290:	ldr	r5, [pc, #72]	; 172e0 <__assert_fail@plt+0x6228>
   17294:	add	r6, pc, r6
   17298:	add	r5, pc, r5
   1729c:	sub	r6, r6, r5
   172a0:	mov	r8, r1
   172a4:	mov	r9, r2
   172a8:	bl	10e1c <calloc@plt-0x20>
   172ac:	asrs	r6, r6, #2
   172b0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   172b4:	mov	r4, #0
   172b8:	add	r4, r4, #1
   172bc:	ldr	r3, [r5], #4
   172c0:	mov	r2, r9
   172c4:	mov	r1, r8
   172c8:	mov	r0, r7
   172cc:	blx	r3
   172d0:	cmp	r6, r4
   172d4:	bne	172b8 <__assert_fail@plt+0x6200>
   172d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   172dc:	andeq	r1, r1, r0, ror ip
   172e0:	andeq	r1, r1, r8, ror #24
   172e4:	bx	lr
   172e8:	ldr	r3, [pc, #12]	; 172fc <__assert_fail@plt+0x6244>
   172ec:	mov	r1, #0
   172f0:	add	r3, pc, r3
   172f4:	ldr	r2, [r3]
   172f8:	b	10ff8 <__cxa_atexit@plt>
   172fc:	strdeq	r1, [r1], -r4

Disassembly of section .fini:

00017300 <.fini>:
   17300:	push	{r3, lr}
   17304:	pop	{r3, pc}
