
../repos/findutils/xargs/xargs:     file format elf32-littlearm


Disassembly of section .init:

00011178 <.init>:
   11178:	push	{r3, lr}
   1117c:	bl	127b8 <__assert_fail@plt+0x1248>
   11180:	pop	{r3, pc}

Disassembly of section .plt:

00011184 <fdopen@plt-0x14>:
   11184:	push	{lr}		; (str lr, [sp, #-4]!)
   11188:	ldr	lr, [pc, #4]	; 11194 <fdopen@plt-0x4>
   1118c:	add	lr, pc, lr
   11190:	ldr	pc, [lr, #8]!
   11194:	andeq	ip, r1, ip, ror #28

00011198 <fdopen@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #28, 20	; 0x1c000
   111a0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111a4 <calloc@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #28, 20	; 0x1c000
   111ac:	ldr	pc, [ip, #3684]!	; 0xe64

000111b0 <strcmp@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #28, 20	; 0x1c000
   111b8:	ldr	pc, [ip, #3676]!	; 0xe5c

000111bc <strtol@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #28, 20	; 0x1c000
   111c4:	ldr	pc, [ip, #3668]!	; 0xe54

000111c8 <printf@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #28, 20	; 0x1c000
   111d0:	ldr	pc, [ip, #3660]!	; 0xe4c

000111d4 <read@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #28, 20	; 0x1c000
   111dc:	ldr	pc, [ip, #3652]!	; 0xe44

000111e0 <fflush@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #28, 20	; 0x1c000
   111e8:	ldr	pc, [ip, #3644]!	; 0xe3c

000111ec <wcwidth@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #28, 20	; 0x1c000
   111f4:	ldr	pc, [ip, #3636]!	; 0xe34

000111f8 <free@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #28, 20	; 0x1c000
   11200:	ldr	pc, [ip, #3628]!	; 0xe2c

00011204 <ferror@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #28, 20	; 0x1c000
   1120c:	ldr	pc, [ip, #3620]!	; 0xe24

00011210 <_exit@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #28, 20	; 0x1c000
   11218:	ldr	pc, [ip, #3612]!	; 0xe1c

0001121c <memcpy@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #28, 20	; 0x1c000
   11224:	ldr	pc, [ip, #3604]!	; 0xe14

00011228 <execvp@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #28, 20	; 0x1c000
   11230:	ldr	pc, [ip, #3596]!	; 0xe0c

00011234 <mbsinit@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #28, 20	; 0x1c000
   1123c:	ldr	pc, [ip, #3588]!	; 0xe04

00011240 <signal@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #28, 20	; 0x1c000
   11248:	ldr	pc, [ip, #3580]!	; 0xdfc

0001124c <memcmp@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #28, 20	; 0x1c000
   11254:	ldr	pc, [ip, #3572]!	; 0xdf4

00011258 <dcgettext@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #28, 20	; 0x1c000
   11260:	ldr	pc, [ip, #3564]!	; 0xdec

00011264 <sysconf@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #28, 20	; 0x1c000
   1126c:	ldr	pc, [ip, #3556]!	; 0xde4

00011270 <dup2@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #28, 20	; 0x1c000
   11278:	ldr	pc, [ip, #3548]!	; 0xddc

0001127c <getrlimit64@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #28, 20	; 0x1c000
   11284:	ldr	pc, [ip, #3540]!	; 0xdd4

00011288 <realloc@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #28, 20	; 0x1c000
   11290:	ldr	pc, [ip, #3532]!	; 0xdcc

00011294 <textdomain@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #28, 20	; 0x1c000
   1129c:	ldr	pc, [ip, #3524]!	; 0xdc4

000112a0 <iswcntrl@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #28, 20	; 0x1c000
   112a8:	ldr	pc, [ip, #3516]!	; 0xdbc

000112ac <iswprint@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #28, 20	; 0x1c000
   112b4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112b8 <poll@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #28, 20	; 0x1c000
   112c0:	ldr	pc, [ip, #3500]!	; 0xdac

000112c4 <sigaction@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #28, 20	; 0x1c000
   112cc:	ldr	pc, [ip, #3492]!	; 0xda4

000112d0 <fwrite@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #28, 20	; 0x1c000
   112d8:	ldr	pc, [ip, #3484]!	; 0xd9c

000112dc <lseek64@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #28, 20	; 0x1c000
   112e4:	ldr	pc, [ip, #3476]!	; 0xd94

000112e8 <waitpid@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #28, 20	; 0x1c000
   112f0:	ldr	pc, [ip, #3468]!	; 0xd8c

000112f4 <__ctype_get_mb_cur_max@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #28, 20	; 0x1c000
   112fc:	ldr	pc, [ip, #3460]!	; 0xd84

00011300 <strcpy@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #28, 20	; 0x1c000
   11308:	ldr	pc, [ip, #3452]!	; 0xd7c

0001130c <__fpending@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #28, 20	; 0x1c000
   11314:	ldr	pc, [ip, #3444]!	; 0xd74

00011318 <mbrtowc@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #28, 20	; 0x1c000
   11320:	ldr	pc, [ip, #3436]!	; 0xd6c

00011324 <error@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #28, 20	; 0x1c000
   1132c:	ldr	pc, [ip, #3428]!	; 0xd64

00011330 <opendir@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #28, 20	; 0x1c000
   11338:	ldr	pc, [ip, #3420]!	; 0xd5c

0001133c <open64@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #28, 20	; 0x1c000
   11344:	ldr	pc, [ip, #3412]!	; 0xd54

00011348 <getenv@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #28, 20	; 0x1c000
   11350:	ldr	pc, [ip, #3404]!	; 0xd4c

00011354 <malloc@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #28, 20	; 0x1c000
   1135c:	ldr	pc, [ip, #3396]!	; 0xd44

00011360 <__libc_start_main@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #28, 20	; 0x1c000
   11368:	ldr	pc, [ip, #3388]!	; 0xd3c

0001136c <__freading@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #28, 20	; 0x1c000
   11374:	ldr	pc, [ip, #3380]!	; 0xd34

00011378 <__gmon_start__@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #28, 20	; 0x1c000
   11380:	ldr	pc, [ip, #3372]!	; 0xd2c

00011384 <getopt_long@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #28, 20	; 0x1c000
   1138c:	ldr	pc, [ip, #3364]!	; 0xd24

00011390 <__ctype_b_loc@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #28, 20	; 0x1c000
   11398:	ldr	pc, [ip, #3356]!	; 0xd1c

0001139c <getpid@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #28, 20	; 0x1c000
   113a4:	ldr	pc, [ip, #3348]!	; 0xd14

000113a8 <exit@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #28, 20	; 0x1c000
   113b0:	ldr	pc, [ip, #3340]!	; 0xd0c

000113b4 <strtoul@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #28, 20	; 0x1c000
   113bc:	ldr	pc, [ip, #3332]!	; 0xd04

000113c0 <strlen@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #28, 20	; 0x1c000
   113c8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113cc <strchr@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #28, 20	; 0x1c000
   113d4:	ldr	pc, [ip, #3316]!	; 0xcf4

000113d8 <setenv@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #28, 20	; 0x1c000
   113e0:	ldr	pc, [ip, #3308]!	; 0xcec

000113e4 <fprintf@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #28, 20	; 0x1c000
   113ec:	ldr	pc, [ip, #3300]!	; 0xce4

000113f0 <__errno_location@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #28, 20	; 0x1c000
   113f8:	ldr	pc, [ip, #3292]!	; 0xcdc

000113fc <snprintf@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #28, 20	; 0x1c000
   11404:	ldr	pc, [ip, #3284]!	; 0xcd4

00011408 <__cxa_atexit@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #28, 20	; 0x1c000
   11410:	ldr	pc, [ip, #3276]!	; 0xccc

00011414 <memset@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #28, 20	; 0x1c000
   1141c:	ldr	pc, [ip, #3268]!	; 0xcc4

00011420 <strncpy@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #28, 20	; 0x1c000
   11428:	ldr	pc, [ip, #3260]!	; 0xcbc

0001142c <write@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #28, 20	; 0x1c000
   11434:	ldr	pc, [ip, #3252]!	; 0xcb4

00011438 <fileno@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #28, 20	; 0x1c000
   11440:	ldr	pc, [ip, #3244]!	; 0xcac

00011444 <memchr@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #28, 20	; 0x1c000
   1144c:	ldr	pc, [ip, #3236]!	; 0xca4

00011450 <fclose@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #28, 20	; 0x1c000
   11458:	ldr	pc, [ip, #3228]!	; 0xc9c

0001145c <strnlen@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #28, 20	; 0x1c000
   11464:	ldr	pc, [ip, #3220]!	; 0xc94

00011468 <pipe@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #28, 20	; 0x1c000
   11470:	ldr	pc, [ip, #3212]!	; 0xc8c

00011474 <fseeko64@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #28, 20	; 0x1c000
   1147c:	ldr	pc, [ip, #3204]!	; 0xc84

00011480 <fcntl64@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #28, 20	; 0x1c000
   11488:	ldr	pc, [ip, #3196]!	; 0xc7c

0001148c <setlocale@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #28, 20	; 0x1c000
   11494:	ldr	pc, [ip, #3188]!	; 0xc74

00011498 <sigemptyset@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #28, 20	; 0x1c000
   114a0:	ldr	pc, [ip, #3180]!	; 0xc6c

000114a4 <fork@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #28, 20	; 0x1c000
   114ac:	ldr	pc, [ip, #3172]!	; 0xc64

000114b0 <strrchr@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #28, 20	; 0x1c000
   114b8:	ldr	pc, [ip, #3164]!	; 0xc5c

000114bc <nl_langinfo@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #28, 20	; 0x1c000
   114c4:	ldr	pc, [ip, #3156]!	; 0xc54

000114c8 <fputc@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #28, 20	; 0x1c000
   114d0:	ldr	pc, [ip, #3148]!	; 0xc4c

000114d4 <readdir64@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #28, 20	; 0x1c000
   114dc:	ldr	pc, [ip, #3140]!	; 0xc44

000114e0 <fdopendir@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #28, 20	; 0x1c000
   114e8:	ldr	pc, [ip, #3132]!	; 0xc3c

000114ec <putc@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #28, 20	; 0x1c000
   114f4:	ldr	pc, [ip, #3124]!	; 0xc34

000114f8 <dirfd@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #28, 20	; 0x1c000
   11500:	ldr	pc, [ip, #3116]!	; 0xc2c

00011504 <bindtextdomain@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #28, 20	; 0x1c000
   1150c:	ldr	pc, [ip, #3108]!	; 0xc24

00011510 <isatty@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #28, 20	; 0x1c000
   11518:	ldr	pc, [ip, #3100]!	; 0xc1c

0001151c <unsetenv@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #28, 20	; 0x1c000
   11524:	ldr	pc, [ip, #3092]!	; 0xc14

00011528 <fputs@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #28, 20	; 0x1c000
   11530:	ldr	pc, [ip, #3084]!	; 0xc0c

00011534 <strncmp@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #28, 20	; 0x1c000
   1153c:	ldr	pc, [ip, #3076]!	; 0xc04

00011540 <abort@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #28, 20	; 0x1c000
   11548:	ldr	pc, [ip, #3068]!	; 0xbfc

0001154c <getc@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #28, 20	; 0x1c000
   11554:	ldr	pc, [ip, #3060]!	; 0xbf4

00011558 <close@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #28, 20	; 0x1c000
   11560:	ldr	pc, [ip, #3052]!	; 0xbec

00011564 <closedir@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #28, 20	; 0x1c000
   1156c:	ldr	pc, [ip, #3044]!	; 0xbe4

00011570 <__assert_fail@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #28, 20	; 0x1c000
   11578:	ldr	pc, [ip, #3036]!	; 0xbdc

Disassembly of section .text:

0001157c <.text>:
   1157c:	ldr	r2, [r1]
   11580:	movw	r3, #51336	; 0xc888
   11584:	movt	r3, #1
   11588:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1158c:	strd	r6, [sp, #8]
   11590:	strd	r8, [sp, #16]
   11594:	mov	r8, r1
   11598:	ldr	r1, [r3]
   1159c:	cmp	r2, #0
   115a0:	strd	sl, [sp, #24]
   115a4:	mov	sl, r0
   115a8:	ldrb	r3, [r3, #4]
   115ac:	movweq	r0, #49596	; 0xc1bc
   115b0:	movne	r0, r2
   115b4:	str	lr, [sp, #32]
   115b8:	sub	sp, sp, #228	; 0xe4
   115bc:	movteq	r0, #1
   115c0:	movw	fp, #57832	; 0xe1e8
   115c4:	movt	fp, #2
   115c8:	str	r1, [sp, #76]	; 0x4c
   115cc:	strb	r3, [sp, #80]	; 0x50
   115d0:	bl	1703c <__assert_fail@plt+0x5acc>
   115d4:	bl	14f04 <__assert_fail@plt+0x3994>
   115d8:	bl	1139c <getpid@plt>
   115dc:	mov	r3, #0
   115e0:	movw	r1, #48704	; 0xbe40
   115e4:	movt	r1, #1
   115e8:	str	r0, [fp, #164]	; 0xa4
   115ec:	mov	r0, #6
   115f0:	str	r3, [fp, #172]	; 0xac
   115f4:	bl	1148c <setlocale@plt>
   115f8:	movw	r1, #49604	; 0xc1c4
   115fc:	movt	r1, #1
   11600:	movw	r0, #52408	; 0xccb8
   11604:	movt	r0, #1
   11608:	bl	11504 <bindtextdomain@plt>
   1160c:	movw	r0, #52408	; 0xccb8
   11610:	movt	r0, #1
   11614:	bl	11294 <textdomain@plt>
   11618:	movw	r0, #21968	; 0x55d0
   1161c:	movt	r0, #1
   11620:	bl	1b038 <__assert_fail@plt+0x9ac8>
   11624:	cmp	r0, #0
   11628:	bne	12668 <__assert_fail@plt+0x10f8>
   1162c:	movw	r0, #16312	; 0x3fb8
   11630:	movt	r0, #1
   11634:	bl	1b038 <__assert_fail@plt+0x9ac8>
   11638:	subs	r3, r0, #0
   1163c:	str	r3, [sp, #32]
   11640:	bne	12668 <__assert_fail@plt+0x10f8>
   11644:	mov	r1, #2048	; 0x800
   11648:	add	r0, fp, #88	; 0x58
   1164c:	bl	14904 <__assert_fail@plt+0x3394>
   11650:	sub	r3, r0, #1
   11654:	str	r0, [sp, #52]	; 0x34
   11658:	cmp	r3, #1
   1165c:	movwls	r3, #10488	; 0x28f8
   11660:	movtls	r3, #1
   11664:	strls	r3, [sp, #44]	; 0x2c
   11668:	bhi	11f28 <__assert_fail@plt+0x9b8>
   1166c:	movw	r3, #14744	; 0x3998
   11670:	movt	r3, #1
   11674:	ldr	r6, [pc, #4060]	; 12658 <__assert_fail@plt+0x10e8>
   11678:	movw	r4, #50472	; 0xc528
   1167c:	movt	r4, #1
   11680:	str	r3, [sp, #28]
   11684:	movw	r3, #49592	; 0xc1b8
   11688:	movt	r3, #1
   1168c:	movw	r9, #57824	; 0xe1e0
   11690:	movt	r9, #2
   11694:	str	r3, [sp, #36]	; 0x24
   11698:	mov	r3, #0
   1169c:	add	r5, sp, #68	; 0x44
   116a0:	str	r3, [sp, #40]	; 0x28
   116a4:	mov	r3, #1
   116a8:	str	r3, [sp, #48]	; 0x30
   116ac:	mov	r3, r6
   116b0:	mov	r2, r4
   116b4:	str	r5, [sp]
   116b8:	mov	r1, r8
   116bc:	mov	r0, sl
   116c0:	bl	11384 <getopt_long@plt>
   116c4:	cmn	r0, #1
   116c8:	beq	11f84 <__assert_fail@plt+0xa14>
   116cc:	sub	r0, r0, #48	; 0x30
   116d0:	cmp	r0, #208	; 0xd0
   116d4:	ldrls	pc, [pc, r0, lsl #2]
   116d8:	b	12628 <__assert_fail@plt+0x10b8>
   116dc:	andeq	r1, r1, ip, lsr #26
   116e0:	andeq	r2, r1, r8, lsr #12
   116e4:	andeq	r2, r1, r8, lsr #12
   116e8:	andeq	r2, r1, r8, lsr #12
   116ec:	andeq	r2, r1, r8, lsr #12
   116f0:	andeq	r2, r1, r8, lsr #12
   116f4:	andeq	r2, r1, r8, lsr #12
   116f8:	andeq	r2, r1, r8, lsr #12
   116fc:	andeq	r2, r1, r8, lsr #12
   11700:	andeq	r2, r1, r8, lsr #12
   11704:	andeq	r2, r1, r8, lsr #12
   11708:	andeq	r2, r1, r8, lsr #12
   1170c:	andeq	r2, r1, r8, lsr #12
   11710:	andeq	r2, r1, r8, lsr #12
   11714:	andeq	r2, r1, r8, lsr #12
   11718:	andeq	r2, r1, r8, lsr #12
   1171c:	andeq	r2, r1, r8, lsr #12
   11720:	andeq	r2, r1, r8, lsr #12
   11724:	andeq	r2, r1, r8, lsr #12
   11728:	andeq	r2, r1, r8, lsr #12
   1172c:	andeq	r2, r1, r8, lsr #12
   11730:	andeq	r1, r1, r8, lsl #26
   11734:	andeq	r2, r1, r8, lsr #12
   11738:	andeq	r2, r1, r8, lsr #12
   1173c:	andeq	r2, r1, r8, lsr #12
   11740:	andeq	r1, r1, r4, asr #26
   11744:	andeq	r2, r1, r8, lsr #12
   11748:	andeq	r2, r1, r8, lsr #12
   1174c:	andeq	r1, r1, r4, lsr #25
   11750:	andeq	r2, r1, r8, lsr #12
   11754:	andeq	r2, r1, r8, lsr #12
   11758:	andeq	r2, r1, r8, lsr #12
   1175c:	andeq	r1, r1, r0, lsr #27
   11760:	andeq	r2, r1, r8, lsr #12
   11764:	andeq	r2, r1, r8, lsr #12
   11768:	strdeq	r1, [r1], -ip
   1176c:	andeq	r2, r1, r8, lsr #12
   11770:	andeq	r2, r1, r8, lsr #12
   11774:	andeq	r2, r1, r8, lsr #12
   11778:	andeq	r2, r1, r8, lsr #12
   1177c:	andeq	r2, r1, r8, lsr #12
   11780:	andeq	r2, r1, r8, lsr #12
   11784:	andeq	r2, r1, r8, lsr #12
   11788:	andeq	r2, r1, r8, lsr #12
   1178c:	andeq	r2, r1, r8, lsr #12
   11790:	andeq	r2, r1, r8, lsr #12
   11794:	andeq	r2, r1, r8, lsr #12
   11798:	andeq	r2, r1, r8, lsr #12
   1179c:	andeq	r2, r1, r8, lsr #12
   117a0:	muleq	r1, r4, sp
   117a4:	andeq	r2, r1, r8, lsr #12
   117a8:	andeq	r2, r1, r8, lsr #12
   117ac:	strdeq	r1, [r1], -ip
   117b0:	andeq	r1, r1, r8, lsl #26
   117b4:	andeq	r2, r1, r8, lsr #12
   117b8:	andeq	r2, r1, r8, lsr #12
   117bc:	andeq	r2, r1, r0, lsr #12
   117c0:	andeq	r1, r1, r4, asr #26
   117c4:	andeq	r2, r1, r8, lsr #12
   117c8:	andeq	r2, r1, r8, lsr #12
   117cc:	muleq	r1, r4, fp
   117d0:	andeq	r2, r1, r8, lsr #12
   117d4:	andeq	r1, r1, r8, lsr #22
   117d8:	andeq	r1, r1, ip, lsl fp
   117dc:	andeq	r1, r1, ip, lsl #22
   117e0:	andeq	r2, r1, r8, lsr #12
   117e4:	andeq	r1, r1, r0, lsl #22
   117e8:	andeq	r1, r1, r4, asr #21
   117ec:			; <UNDEFINED> instruction: 0x00011ab8
   117f0:	andeq	r2, r1, r8, lsr #12
   117f4:	andeq	r1, r1, ip, lsl #21
   117f8:	andeq	r2, r1, r8, lsr #12
   117fc:	andeq	r1, r1, r0, lsl #21
   11800:	andeq	r2, r1, r8, lsr #12
   11804:	andeq	r2, r1, r8, lsr #12
   11808:	andeq	r2, r1, r8, lsr #12
   1180c:	andeq	r2, r1, r8, lsr #12
   11810:	andeq	r2, r1, r8, lsr #12
   11814:	andeq	r2, r1, r8, lsr #12
   11818:	andeq	r2, r1, r8, lsr #12
   1181c:	andeq	r2, r1, r8, lsr #12
   11820:	andeq	r2, r1, r8, lsr #12
   11824:	andeq	r2, r1, r8, lsr #12
   11828:	andeq	r2, r1, r8, lsr #12
   1182c:	andeq	r2, r1, r8, lsr #12
   11830:	andeq	r2, r1, r8, lsr #12
   11834:	andeq	r2, r1, r8, lsr #12
   11838:	andeq	r2, r1, r8, lsr #12
   1183c:	andeq	r2, r1, r8, lsr #12
   11840:	andeq	r2, r1, r8, lsr #12
   11844:	andeq	r2, r1, r8, lsr #12
   11848:	andeq	r2, r1, r8, lsr #12
   1184c:	andeq	r2, r1, r8, lsr #12
   11850:	andeq	r2, r1, r8, lsr #12
   11854:	andeq	r2, r1, r8, lsr #12
   11858:	andeq	r2, r1, r8, lsr #12
   1185c:	andeq	r2, r1, r8, lsr #12
   11860:	andeq	r2, r1, r8, lsr #12
   11864:	andeq	r2, r1, r8, lsr #12
   11868:	andeq	r2, r1, r8, lsr #12
   1186c:	andeq	r2, r1, r8, lsr #12
   11870:	andeq	r2, r1, r8, lsr #12
   11874:	andeq	r2, r1, r8, lsr #12
   11878:	andeq	r2, r1, r8, lsr #12
   1187c:	andeq	r2, r1, r8, lsr #12
   11880:	andeq	r2, r1, r8, lsr #12
   11884:	andeq	r2, r1, r8, lsr #12
   11888:	andeq	r2, r1, r8, lsr #12
   1188c:	andeq	r2, r1, r8, lsr #12
   11890:	andeq	r2, r1, r8, lsr #12
   11894:	andeq	r2, r1, r8, lsr #12
   11898:	andeq	r2, r1, r8, lsr #12
   1189c:	andeq	r2, r1, r8, lsr #12
   118a0:	andeq	r2, r1, r8, lsr #12
   118a4:	andeq	r2, r1, r8, lsr #12
   118a8:	andeq	r2, r1, r8, lsr #12
   118ac:	andeq	r2, r1, r8, lsr #12
   118b0:	andeq	r2, r1, r8, lsr #12
   118b4:	andeq	r2, r1, r8, lsr #12
   118b8:	andeq	r2, r1, r8, lsr #12
   118bc:	andeq	r2, r1, r8, lsr #12
   118c0:	andeq	r2, r1, r8, lsr #12
   118c4:	andeq	r2, r1, r8, lsr #12
   118c8:	andeq	r2, r1, r8, lsr #12
   118cc:	andeq	r2, r1, r8, lsr #12
   118d0:	andeq	r2, r1, r8, lsr #12
   118d4:	andeq	r2, r1, r8, lsr #12
   118d8:	andeq	r2, r1, r8, lsr #12
   118dc:	andeq	r2, r1, r8, lsr #12
   118e0:	andeq	r2, r1, r8, lsr #12
   118e4:	andeq	r2, r1, r8, lsr #12
   118e8:	andeq	r2, r1, r8, lsr #12
   118ec:	andeq	r2, r1, r8, lsr #12
   118f0:	andeq	r2, r1, r8, lsr #12
   118f4:	andeq	r2, r1, r8, lsr #12
   118f8:	andeq	r2, r1, r8, lsr #12
   118fc:	andeq	r2, r1, r8, lsr #12
   11900:	andeq	r2, r1, r8, lsr #12
   11904:	andeq	r2, r1, r8, lsr #12
   11908:	andeq	r2, r1, r8, lsr #12
   1190c:	andeq	r2, r1, r8, lsr #12
   11910:	andeq	r2, r1, r8, lsr #12
   11914:	andeq	r2, r1, r8, lsr #12
   11918:	andeq	r2, r1, r8, lsr #12
   1191c:	andeq	r2, r1, r8, lsr #12
   11920:	andeq	r2, r1, r8, lsr #12
   11924:	andeq	r2, r1, r8, lsr #12
   11928:	andeq	r2, r1, r8, lsr #12
   1192c:	andeq	r2, r1, r8, lsr #12
   11930:	andeq	r2, r1, r8, lsr #12
   11934:	andeq	r2, r1, r8, lsr #12
   11938:	andeq	r2, r1, r8, lsr #12
   1193c:	andeq	r2, r1, r8, lsr #12
   11940:	andeq	r2, r1, r8, lsr #12
   11944:	andeq	r2, r1, r8, lsr #12
   11948:	andeq	r2, r1, r8, lsr #12
   1194c:	andeq	r2, r1, r8, lsr #12
   11950:	andeq	r2, r1, r8, lsr #12
   11954:	andeq	r2, r1, r8, lsr #12
   11958:	andeq	r2, r1, r8, lsr #12
   1195c:	andeq	r2, r1, r8, lsr #12
   11960:	andeq	r2, r1, r8, lsr #12
   11964:	andeq	r2, r1, r8, lsr #12
   11968:	andeq	r2, r1, r8, lsr #12
   1196c:	andeq	r2, r1, r8, lsr #12
   11970:	andeq	r2, r1, r8, lsr #12
   11974:	andeq	r2, r1, r8, lsr #12
   11978:	andeq	r2, r1, r8, lsr #12
   1197c:	andeq	r2, r1, r8, lsr #12
   11980:	andeq	r2, r1, r8, lsr #12
   11984:	andeq	r2, r1, r8, lsr #12
   11988:	andeq	r2, r1, r8, lsr #12
   1198c:	andeq	r2, r1, r8, lsr #12
   11990:	andeq	r2, r1, r8, lsr #12
   11994:	andeq	r2, r1, r8, lsr #12
   11998:	andeq	r2, r1, r8, lsr #12
   1199c:	andeq	r2, r1, r8, lsr #12
   119a0:	andeq	r2, r1, r8, lsr #12
   119a4:	andeq	r2, r1, r8, lsr #12
   119a8:	andeq	r2, r1, r8, lsr #12
   119ac:	andeq	r2, r1, r8, lsr #12
   119b0:	andeq	r2, r1, r8, lsr #12
   119b4:	andeq	r2, r1, r8, lsr #12
   119b8:	andeq	r2, r1, r8, lsr #12
   119bc:	andeq	r2, r1, r8, lsr #12
   119c0:	andeq	r2, r1, r8, lsr #12
   119c4:	andeq	r2, r1, r8, lsr #12
   119c8:	andeq	r2, r1, r8, lsr #12
   119cc:	andeq	r2, r1, r8, lsr #12
   119d0:	andeq	r2, r1, r8, lsr #12
   119d4:	andeq	r2, r1, r8, lsr #12
   119d8:	andeq	r2, r1, r8, lsr #12
   119dc:	andeq	r2, r1, r8, lsr #12
   119e0:	andeq	r2, r1, r8, lsr #12
   119e4:	andeq	r2, r1, r8, lsr #12
   119e8:	andeq	r2, r1, r8, lsr #12
   119ec:	andeq	r2, r1, r8, lsr #12
   119f0:	andeq	r2, r1, r8, lsr #12
   119f4:	andeq	r2, r1, r8, lsr #12
   119f8:	andeq	r2, r1, r8, lsr #12
   119fc:	andeq	r2, r1, r8, lsr #12
   11a00:	andeq	r2, r1, r8, lsr #12
   11a04:	andeq	r2, r1, r8, lsr #12
   11a08:	andeq	r2, r1, r8, lsr #12
   11a0c:	andeq	r2, r1, r8, lsr #12
   11a10:	andeq	r2, r1, r8, lsr #12
   11a14:	andeq	r2, r1, r8, lsr #12
   11a18:	andeq	r2, r1, r8, lsr #12
   11a1c:	andeq	r1, r1, r0, lsr #20
   11a20:	ldr	r7, [r9]
   11a24:	mov	r1, #61	; 0x3d
   11a28:	mov	r0, r7
   11a2c:	bl	113cc <strchr@plt>
   11a30:	subs	r3, r0, #0
   11a34:	str	r3, [sp, #56]	; 0x38
   11a38:	bne	126fc <__assert_fail@plt+0x118c>
   11a3c:	mov	r0, r7
   11a40:	str	r7, [fp, #76]	; 0x4c
   11a44:	bl	1151c <unsetenv@plt>
   11a48:	cmp	r0, #0
   11a4c:	beq	116ac <__assert_fail@plt+0x13c>
   11a50:	bl	113f0 <__errno_location@plt>
   11a54:	ldr	r4, [r0]
   11a58:	mov	r2, #5
   11a5c:	movw	r1, #50432	; 0xc500
   11a60:	movt	r1, #1
   11a64:	ldr	r0, [sp, #56]	; 0x38
   11a68:	bl	11258 <dcgettext@plt>
   11a6c:	mov	r2, r0
   11a70:	mov	r3, r7
   11a74:	mov	r1, r4
   11a78:	mov	r0, #1
   11a7c:	bl	11324 <error@plt>
   11a80:	mov	r3, #1
   11a84:	str	r3, [fp, #88]	; 0x58
   11a88:	b	116ac <__assert_fail@plt+0x13c>
   11a8c:	movw	r0, #49596	; 0xc1bc
   11a90:	movt	r0, #1
   11a94:	bl	15168 <__assert_fail@plt+0x3bf8>
   11a98:	ldr	r0, [sp, #32]
   11a9c:	add	sp, sp, #228	; 0xe4
   11aa0:	ldrd	r4, [sp]
   11aa4:	ldrd	r6, [sp, #8]
   11aa8:	ldrd	r8, [sp, #16]
   11aac:	ldrd	sl, [sp, #24]
   11ab0:	add	sp, sp, #32
   11ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   11ab8:	mov	r3, #1
   11abc:	strb	r3, [fp, #73]	; 0x49
   11ac0:	b	116ac <__assert_fail@plt+0x13c>
   11ac4:	mov	r7, #0
   11ac8:	ldr	r3, [sp, #44]	; 0x2c
   11acc:	blx	r3
   11ad0:	mov	r2, #1
   11ad4:	mov	r1, #115	; 0x73
   11ad8:	str	r7, [sp]
   11adc:	ldr	r0, [r9]
   11ae0:	ldr	r3, [fp, #92]	; 0x5c
   11ae4:	bl	12fd0 <__assert_fail@plt+0x1a60>
   11ae8:	ldr	r2, [fp, #92]	; 0x5c
   11aec:	mov	r3, r0
   11af0:	cmp	r2, r0
   11af4:	bcc	11eec <__assert_fail@plt+0x97c>
   11af8:	str	r3, [fp, #100]	; 0x64
   11afc:	b	116ac <__assert_fail@plt+0x13c>
   11b00:	mov	r3, #0
   11b04:	str	r3, [sp, #48]	; 0x30
   11b08:	b	116ac <__assert_fail@plt+0x13c>
   11b0c:	mov	r3, #1
   11b10:	strb	r3, [fp, #72]	; 0x48
   11b14:	strb	r3, [fp, #73]	; 0x49
   11b18:	b	116ac <__assert_fail@plt+0x13c>
   11b1c:	mov	r3, #1
   11b20:	strb	r3, [fp, #80]	; 0x50
   11b24:	b	116ac <__assert_fail@plt+0x13c>
   11b28:	mov	ip, #1
   11b2c:	mvn	r3, #0
   11b30:	ldr	r0, [r9]
   11b34:	mov	r2, ip
   11b38:	mov	r1, #110	; 0x6e
   11b3c:	str	ip, [sp]
   11b40:	bl	12fd0 <__assert_fail@plt+0x1a60>
   11b44:	ldr	r3, [fp, #124]	; 0x7c
   11b48:	str	r0, [fp, #128]	; 0x80
   11b4c:	cmp	r3, #0
   11b50:	bne	11ecc <__assert_fail@plt+0x95c>
   11b54:	ldr	r3, [fp, #112]	; 0x70
   11b58:	cmp	r3, #0
   11b5c:	beq	116ac <__assert_fail@plt+0x13c>
   11b60:	ldr	r3, [fp, #128]	; 0x80
   11b64:	cmp	r3, #1
   11b68:	moveq	r3, #0
   11b6c:	streq	r3, [fp, #128]	; 0x80
   11b70:	beq	116ac <__assert_fail@plt+0x13c>
   11b74:	movw	r1, #50260	; 0xc454
   11b78:	movt	r1, #1
   11b7c:	movw	r0, #50288	; 0xc470
   11b80:	movt	r0, #1
   11b84:	bl	128a4 <__assert_fail@plt+0x1334>
   11b88:	mov	r3, #0
   11b8c:	str	r3, [fp, #112]	; 0x70
   11b90:	b	116ac <__assert_fail@plt+0x13c>
   11b94:	ldr	r0, [r9]
   11b98:	cmp	r0, #0
   11b9c:	moveq	r3, #1
   11ba0:	streq	r3, [fp, #124]	; 0x7c
   11ba4:	beq	11bc4 <__assert_fail@plt+0x654>
   11ba8:	mov	r1, #1
   11bac:	mvn	r3, #0
   11bb0:	mov	r2, r1
   11bb4:	str	r1, [sp]
   11bb8:	mov	r1, #108	; 0x6c
   11bbc:	bl	12fd0 <__assert_fail@plt+0x1a60>
   11bc0:	str	r0, [fp, #124]	; 0x7c
   11bc4:	ldr	r3, [fp, #128]	; 0x80
   11bc8:	cmp	r3, #0
   11bcc:	bne	11e6c <__assert_fail@plt+0x8fc>
   11bd0:	ldr	r3, [fp, #112]	; 0x70
   11bd4:	cmp	r3, #0
   11bd8:	beq	116ac <__assert_fail@plt+0x13c>
   11bdc:	movw	r1, #50260	; 0xc454
   11be0:	movt	r1, #1
   11be4:	movw	r0, #50272	; 0xc460
   11be8:	movt	r0, #1
   11bec:	bl	128a4 <__assert_fail@plt+0x1334>
   11bf0:	mov	r3, #0
   11bf4:	str	r3, [fp, #112]	; 0x70
   11bf8:	b	116ac <__assert_fail@plt+0x13c>
   11bfc:	ldr	r3, [r9]
   11c00:	mov	r0, r3
   11c04:	str	r3, [sp, #28]
   11c08:	bl	113c0 <strlen@plt>
   11c0c:	ldr	r3, [sp, #28]
   11c10:	cmp	r0, #1
   11c14:	ldrb	r7, [r3]
   11c18:	beq	11e58 <__assert_fail@plt+0x8e8>
   11c1c:	cmp	r7, #92	; 0x5c
   11c20:	bne	12734 <__assert_fail@plt+0x11c4>
   11c24:	ldrb	r7, [r3, #1]
   11c28:	sub	r2, r7, #92	; 0x5c
   11c2c:	cmp	r2, #26
   11c30:	ldrls	pc, [pc, r2, lsl #2]
   11c34:	b	11dcc <__assert_fail@plt+0x85c>
   11c38:	andeq	r1, r1, r8, asr lr
   11c3c:	andeq	r1, r1, ip, asr #27
   11c40:	andeq	r1, r1, ip, asr #27
   11c44:	andeq	r1, r1, ip, asr #27
   11c48:	andeq	r1, r1, ip, asr #27
   11c4c:	andeq	r2, r1, r8, lsl #6
   11c50:	andeq	r2, r1, r0, lsl r3
   11c54:	andeq	r1, r1, ip, asr #27
   11c58:	andeq	r1, r1, ip, asr #27
   11c5c:	andeq	r1, r1, ip, asr #27
   11c60:	strdeq	r2, [r1], -r8
   11c64:	andeq	r1, r1, ip, asr #27
   11c68:	andeq	r1, r1, ip, asr #27
   11c6c:	andeq	r1, r1, ip, asr #27
   11c70:	andeq	r1, r1, ip, asr #27
   11c74:	andeq	r1, r1, ip, asr #27
   11c78:	andeq	r1, r1, ip, asr #27
   11c7c:	andeq	r1, r1, ip, asr #27
   11c80:	andeq	r2, r1, r8, lsl r3
   11c84:	andeq	r1, r1, ip, asr #27
   11c88:	andeq	r1, r1, ip, asr #27
   11c8c:	andeq	r1, r1, ip, asr #27
   11c90:	andeq	r2, r1, r0, lsr #6
   11c94:	andeq	r1, r1, ip, asr #27
   11c98:	andeq	r2, r1, r8, lsr #6
   11c9c:	andeq	r1, r1, ip, asr #27
   11ca0:	andeq	r2, r1, r0, lsl #6
   11ca4:	mov	ip, #1
   11ca8:	mvn	r3, #0
   11cac:	ldr	r0, [r9]
   11cb0:	mov	r2, ip
   11cb4:	mov	r1, #76	; 0x4c
   11cb8:	str	ip, [sp]
   11cbc:	bl	12fd0 <__assert_fail@plt+0x1a60>
   11cc0:	ldr	r3, [fp, #128]	; 0x80
   11cc4:	str	r0, [fp, #124]	; 0x7c
   11cc8:	cmp	r3, #0
   11ccc:	bne	11e8c <__assert_fail@plt+0x91c>
   11cd0:	ldr	r3, [fp, #112]	; 0x70
   11cd4:	cmp	r3, #0
   11cd8:	beq	116ac <__assert_fail@plt+0x13c>
   11cdc:	movw	r1, #50260	; 0xc454
   11ce0:	movt	r1, #1
   11ce4:	movw	r0, #50256	; 0xc450
   11ce8:	movt	r0, #1
   11cec:	bl	128a4 <__assert_fail@plt+0x1334>
   11cf0:	mov	r3, #0
   11cf4:	str	r3, [fp, #112]	; 0x70
   11cf8:	b	116ac <__assert_fail@plt+0x13c>
   11cfc:	mov	r3, #1
   11d00:	str	r3, [sp, #40]	; 0x28
   11d04:	b	116ac <__assert_fail@plt+0x13c>
   11d08:	ldr	r3, [r9]
   11d0c:	cmp	r3, #0
   11d10:	beq	11d20 <__assert_fail@plt+0x7b0>
   11d14:	ldrb	r2, [r3]
   11d18:	cmp	r2, #0
   11d1c:	bne	11d24 <__assert_fail@plt+0x7b4>
   11d20:	mov	r3, #0
   11d24:	str	r3, [fp, #156]	; 0x9c
   11d28:	b	116ac <__assert_fail@plt+0x13c>
   11d2c:	mov	r3, #0
   11d30:	movw	r2, #14440	; 0x3868
   11d34:	movt	r2, #1
   11d38:	strb	r3, [fp, #144]	; 0x90
   11d3c:	str	r2, [sp, #28]
   11d40:	b	116ac <__assert_fail@plt+0x13c>
   11d44:	ldr	r3, [r9]
   11d48:	movw	r2, #49588	; 0xc1b4
   11d4c:	movt	r2, #1
   11d50:	ldr	r1, [fp, #128]	; 0x80
   11d54:	cmp	r3, #0
   11d58:	moveq	r3, r2
   11d5c:	cmp	r1, #0
   11d60:	str	r3, [fp, #112]	; 0x70
   11d64:	bne	11eac <__assert_fail@plt+0x93c>
   11d68:	ldr	r3, [fp, #124]	; 0x7c
   11d6c:	cmp	r3, #0
   11d70:	beq	116ac <__assert_fail@plt+0x13c>
   11d74:	movw	r1, #50244	; 0xc444
   11d78:	movt	r1, #1
   11d7c:	movw	r0, #50228	; 0xc434
   11d80:	movt	r0, #1
   11d84:	bl	128a4 <__assert_fail@plt+0x1334>
   11d88:	mov	r3, #0
   11d8c:	str	r3, [fp, #124]	; 0x7c
   11d90:	b	116ac <__assert_fail@plt+0x13c>
   11d94:	ldr	r3, [r9]
   11d98:	str	r3, [sp, #36]	; 0x24
   11d9c:	b	116ac <__assert_fail@plt+0x13c>
   11da0:	mov	ip, #1
   11da4:	mvn	r3, #-2147483648	; 0x80000000
   11da8:	ldr	r0, [r9]
   11dac:	mov	r2, #0
   11db0:	mov	r1, #80	; 0x50
   11db4:	movw	r7, #57700	; 0xe164
   11db8:	movt	r7, #2
   11dbc:	str	ip, [sp]
   11dc0:	bl	12fd0 <__assert_fail@plt+0x1a60>
   11dc4:	str	r0, [r7]
   11dc8:	b	116ac <__assert_fail@plt+0x13c>
   11dcc:	cmp	r7, #120	; 0x78
   11dd0:	moveq	r1, #16
   11dd4:	addeq	r2, r3, #2
   11dd8:	streq	r1, [sp, #28]
   11ddc:	beq	11e0c <__assert_fail@plt+0x89c>
   11de0:	str	r3, [sp, #28]
   11de4:	lsl	r7, r7, #1
   11de8:	bl	11390 <__ctype_b_loc@plt>
   11dec:	ldr	r2, [r0]
   11df0:	ldr	r3, [sp, #28]
   11df4:	ldrh	r2, [r2, r7]
   11df8:	ands	r7, r2, #2048	; 0x800
   11dfc:	beq	126b4 <__assert_fail@plt+0x1144>
   11e00:	mov	r1, #8
   11e04:	add	r2, r3, #1
   11e08:	str	r1, [sp, #28]
   11e0c:	strd	r2, [sp, #56]	; 0x38
   11e10:	mov	r7, #0
   11e14:	bl	113f0 <__errno_location@plt>
   11e18:	ldr	r2, [sp, #56]	; 0x38
   11e1c:	mov	r1, r0
   11e20:	str	r7, [sp, #84]	; 0x54
   11e24:	str	r7, [r1]
   11e28:	add	r1, sp, #84	; 0x54
   11e2c:	mov	r0, r2
   11e30:	ldr	r2, [sp, #28]
   11e34:	bl	113b4 <strtoul@plt>
   11e38:	cmp	r0, #255	; 0xff
   11e3c:	ldr	r3, [sp, #60]	; 0x3c
   11e40:	bhi	125dc <__assert_fail@plt+0x106c>
   11e44:	ldr	r2, [sp, #84]	; 0x54
   11e48:	ldrb	r2, [r2]
   11e4c:	cmp	r2, #0
   11e50:	bne	12694 <__assert_fail@plt+0x1124>
   11e54:	uxtb	r7, r0
   11e58:	movw	r3, #14440	; 0x3868
   11e5c:	movt	r3, #1
   11e60:	strb	r7, [fp, #144]	; 0x90
   11e64:	str	r3, [sp, #28]
   11e68:	b	116ac <__assert_fail@plt+0x13c>
   11e6c:	movw	r1, #50216	; 0xc428
   11e70:	movt	r1, #1
   11e74:	movw	r0, #50272	; 0xc460
   11e78:	movt	r0, #1
   11e7c:	bl	128a4 <__assert_fail@plt+0x1334>
   11e80:	mov	r3, #0
   11e84:	str	r3, [fp, #128]	; 0x80
   11e88:	b	11bd0 <__assert_fail@plt+0x660>
   11e8c:	movw	r1, #50216	; 0xc428
   11e90:	movt	r1, #1
   11e94:	movw	r0, #50256	; 0xc450
   11e98:	movt	r0, #1
   11e9c:	bl	128a4 <__assert_fail@plt+0x1334>
   11ea0:	mov	r3, #0
   11ea4:	str	r3, [fp, #128]	; 0x80
   11ea8:	b	11cd0 <__assert_fail@plt+0x760>
   11eac:	movw	r1, #50216	; 0xc428
   11eb0:	movt	r1, #1
   11eb4:	movw	r0, #50228	; 0xc434
   11eb8:	movt	r0, #1
   11ebc:	bl	128a4 <__assert_fail@plt+0x1334>
   11ec0:	mov	r3, #0
   11ec4:	str	r3, [fp, #128]	; 0x80
   11ec8:	b	11d68 <__assert_fail@plt+0x7f8>
   11ecc:	movw	r1, #50244	; 0xc444
   11ed0:	movt	r1, #1
   11ed4:	movw	r0, #50288	; 0xc470
   11ed8:	movt	r0, #1
   11edc:	bl	128a4 <__assert_fail@plt+0x1334>
   11ee0:	mov	r3, #0
   11ee4:	str	r3, [fp, #124]	; 0x7c
   11ee8:	b	11b54 <__assert_fail@plt+0x5e4>
   11eec:	mov	r2, #5
   11ef0:	movw	r1, #50304	; 0xc480
   11ef4:	movt	r1, #1
   11ef8:	mov	r0, r7
   11efc:	str	r3, [sp, #56]	; 0x38
   11f00:	bl	11258 <dcgettext@plt>
   11f04:	ldr	ip, [fp, #92]	; 0x5c
   11f08:	mov	r2, r0
   11f0c:	mov	r1, r7
   11f10:	mov	r0, r7
   11f14:	ldr	r3, [sp, #56]	; 0x38
   11f18:	str	ip, [sp]
   11f1c:	bl	11324 <error@plt>
   11f20:	ldr	r3, [fp, #92]	; 0x5c
   11f24:	b	11af8 <__assert_fail@plt+0x588>
   11f28:	ldr	r0, [sp, #32]
   11f2c:	bl	11264 <sysconf@plt>
   11f30:	cmp	r0, #0
   11f34:	ble	11f54 <__assert_fail@plt+0x9e4>
   11f38:	cmp	r0, #2048	; 0x800
   11f3c:	ble	126e0 <__assert_fail@plt+0x1170>
   11f40:	ldr	r3, [fp, #100]	; 0x64
   11f44:	sub	r0, r0, #2048	; 0x800
   11f48:	cmp	r3, r0
   11f4c:	movcc	r0, r3
   11f50:	str	r0, [fp, #100]	; 0x64
   11f54:	ldr	r3, [fp, #100]	; 0x64
   11f58:	cmp	r3, #2048	; 0x800
   11f5c:	bcc	12760 <__assert_fail@plt+0x11f0>
   11f60:	movw	r3, #13196	; 0x338c
   11f64:	movt	r3, #1
   11f68:	ldr	r0, [pc, #1772]	; 1265c <__assert_fail@plt+0x10ec>
   11f6c:	str	r3, [fp, #120]	; 0x78
   11f70:	movw	r3, #10348	; 0x286c
   11f74:	movt	r3, #1
   11f78:	str	r3, [sp, #44]	; 0x2c
   11f7c:	bl	149f0 <__assert_fail@plt+0x3480>
   11f80:	b	1166c <__assert_fail@plt+0xfc>
   11f84:	ldr	r1, [sp, #28]
   11f88:	movw	r3, #14440	; 0x3868
   11f8c:	movt	r3, #1
   11f90:	ldr	r2, [fp, #156]	; 0x9c
   11f94:	sub	r3, r1, r3
   11f98:	clz	r3, r3
   11f9c:	lsr	r3, r3, #5
   11fa0:	cmp	r2, #0
   11fa4:	moveq	r3, #0
   11fa8:	cmp	r3, #0
   11fac:	bne	12630 <__assert_fail@plt+0x10c0>
   11fb0:	ldr	r3, [sp, #44]	; 0x2c
   11fb4:	blx	r3
   11fb8:	ldr	r3, [sp, #52]	; 0x34
   11fbc:	cmp	r3, #0
   11fc0:	bne	12744 <__assert_fail@plt+0x11d4>
   11fc4:	movw	r3, #10352	; 0x2870
   11fc8:	movt	r3, #1
   11fcc:	add	r0, sp, #88	; 0x58
   11fd0:	str	r3, [sp, #84]	; 0x54
   11fd4:	bl	11498 <sigemptyset@plt>
   11fd8:	ldr	r3, [sp, #52]	; 0x34
   11fdc:	add	r1, sp, #84	; 0x54
   11fe0:	mov	r0, #10
   11fe4:	mov	r2, r3
   11fe8:	str	r3, [sp, #216]	; 0xd8
   11fec:	bl	112c4 <sigaction@plt>
   11ff0:	cmp	r0, #0
   11ff4:	bne	122c4 <__assert_fail@plt+0xd54>
   11ff8:	movw	r3, #14320	; 0x37f0
   11ffc:	movt	r3, #1
   12000:	mov	r4, #0
   12004:	add	r0, sp, #88	; 0x58
   12008:	str	r3, [sp, #84]	; 0x54
   1200c:	bl	11498 <sigemptyset@plt>
   12010:	add	r1, sp, #84	; 0x54
   12014:	mov	r2, r4
   12018:	str	r4, [sp, #216]	; 0xd8
   1201c:	mov	r0, #12
   12020:	bl	112c4 <sigaction@plt>
   12024:	cmp	r0, r4
   12028:	bne	12230 <__assert_fail@plt+0xcc0>
   1202c:	movw	r1, #49592	; 0xc1b8
   12030:	movt	r1, #1
   12034:	ldr	r0, [sp, #36]	; 0x24
   12038:	bl	111b0 <strcmp@plt>
   1203c:	cmp	r0, #0
   12040:	bne	12260 <__assert_fail@plt+0xcf0>
   12044:	movw	r3, #57816	; 0xe1d8
   12048:	movt	r3, #2
   1204c:	ldr	r3, [r3]
   12050:	str	r3, [fp, #140]	; 0x8c
   12054:	ldr	r3, [fp, #112]	; 0x70
   12058:	cmp	r3, #0
   1205c:	beq	125cc <__assert_fail@plt+0x105c>
   12060:	mov	r3, #1
   12064:	str	r3, [fp, #88]	; 0x58
   12068:	movw	r3, #57800	; 0xe1c8
   1206c:	movt	r3, #2
   12070:	str	r3, [sp, #44]	; 0x2c
   12074:	ldr	r3, [r3]
   12078:	cmp	r3, sl
   1207c:	bne	1209c <__assert_fail@plt+0xb2c>
   12080:	add	r2, sp, #76	; 0x4c
   12084:	mov	r3, #0
   12088:	add	r8, sp, #72	; 0x48
   1208c:	mov	sl, #1
   12090:	str	r2, [sp, #72]	; 0x48
   12094:	ldr	r2, [sp, #44]	; 0x2c
   12098:	str	r3, [r2]
   1209c:	ldr	r3, [sp, #40]	; 0x28
   120a0:	cmp	r3, #0
   120a4:	bne	12434 <__assert_fail@plt+0xec4>
   120a8:	ldr	r0, [fp, #100]	; 0x64
   120ac:	add	r0, r0, #1
   120b0:	bl	19a30 <__assert_fail@plt+0x84c0>
   120b4:	ldr	r3, [fp, #100]	; 0x64
   120b8:	str	r0, [fp, #132]	; 0x84
   120bc:	add	r0, r3, #1
   120c0:	bl	19a30 <__assert_fail@plt+0x84c0>
   120c4:	mov	r1, #0
   120c8:	str	r0, [fp, #28]
   120cc:	mov	r0, #17
   120d0:	bl	11240 <signal@plt>
   120d4:	ldr	r4, [fp, #112]	; 0x70
   120d8:	cmp	r4, #0
   120dc:	beq	12378 <__assert_fail@plt+0xe08>
   120e0:	lsl	r4, sl, #2
   120e4:	mov	r0, r4
   120e8:	bl	19a30 <__assert_fail@plt+0x84c0>
   120ec:	ldr	r3, [sp, #44]	; 0x2c
   120f0:	str	r0, [sp, #32]
   120f4:	ldr	r3, [r3]
   120f8:	cmp	sl, r3
   120fc:	ble	12128 <__assert_fail@plt+0xbb8>
   12100:	ldr	r2, [sp, #32]
   12104:	lsl	r3, r3, #2
   12108:	add	r5, r8, r4
   1210c:	add	r6, r8, r3
   12110:	add	r7, r2, r3
   12114:	ldr	r0, [r6], #4
   12118:	bl	113c0 <strlen@plt>
   1211c:	str	r0, [r7], #4
   12120:	cmp	r6, r5
   12124:	bne	12114 <__assert_fail@plt+0xba4>
   12128:	ldr	r9, [pc, #1328]	; 12660 <__assert_fail@plt+0x10f0>
   1212c:	movw	r5, #57700	; 0xe164
   12130:	movt	r5, #2
   12134:	mov	r6, #0
   12138:	ldr	r0, [fp, #112]	; 0x70
   1213c:	bl	113c0 <strlen@plt>
   12140:	sub	r3, r8, #4
   12144:	str	r8, [sp, #36]	; 0x24
   12148:	mov	r8, r5
   1214c:	add	r3, r3, r4
   12150:	str	sl, [sp, #40]	; 0x28
   12154:	mov	sl, r3
   12158:	str	r0, [fp, #108]	; 0x6c
   1215c:	ldr	r3, [sp, #28]
   12160:	blx	r3
   12164:	cmn	r0, #1
   12168:	mov	r7, r0
   1216c:	beq	12364 <__assert_fail@plt+0xdf4>
   12170:	mov	r1, r9
   12174:	ldr	r0, [pc, #1248]	; 1265c <__assert_fail@plt+0x10ec>
   12178:	sub	r7, r7, #1
   1217c:	bl	14aa8 <__assert_fail@plt+0x3538>
   12180:	ldr	r3, [sp, #32]
   12184:	mov	r1, r9
   12188:	ldr	r4, [sp, #44]	; 0x2c
   1218c:	ldrb	ip, [r8, #4]
   12190:	ldr	lr, [sp, #36]	; 0x24
   12194:	ldr	r2, [r4]
   12198:	ldr	r0, [pc, #1212]	; 1265c <__assert_fail@plt+0x10ec>
   1219c:	ldr	r3, [r3, r2, lsl #2]
   121a0:	ldr	r2, [lr, r2, lsl #2]
   121a4:	str	r6, [sp]
   121a8:	stmib	sp, {r6, ip}
   121ac:	add	r3, r3, #1
   121b0:	str	r6, [fp, #32]
   121b4:	bl	140f0 <__assert_fail@plt+0x2b80>
   121b8:	ldr	r5, [r4]
   121bc:	strb	r6, [r8, #4]
   121c0:	ldr	r1, [sp, #40]	; 0x28
   121c4:	add	r3, r5, #1
   121c8:	cmp	r1, r3
   121cc:	ble	12220 <__assert_fail@plt+0xcb0>
   121d0:	ldr	r2, [sp, #32]
   121d4:	lsl	r5, r5, #2
   121d8:	mov	r3, #0
   121dc:	ldr	lr, [sp, #36]	; 0x24
   121e0:	add	r4, lr, r5
   121e4:	add	r5, r2, r5
   121e8:	b	121f0 <__assert_fail@plt+0xc80>
   121ec:	ldrb	r3, [r8, #4]
   121f0:	mov	r1, r9
   121f4:	ldr	ip, [fp, #132]	; 0x84
   121f8:	ldr	r2, [r4, #4]!
   121fc:	str	r6, [sp]
   12200:	ldr	r0, [pc, #1108]	; 1265c <__assert_fail@plt+0x10ec>
   12204:	stmib	sp, {r6, ip}
   12208:	str	r7, [sp, #12]
   1220c:	str	r3, [sp, #16]
   12210:	ldr	r3, [r5, #4]!
   12214:	bl	143b0 <__assert_fail@plt+0x2e40>
   12218:	cmp	sl, r4
   1221c:	bne	121ec <__assert_fail@plt+0xc7c>
   12220:	mov	r1, r9
   12224:	ldr	r0, [pc, #1072]	; 1265c <__assert_fail@plt+0x10ec>
   12228:	bl	14588 <__assert_fail@plt+0x3018>
   1222c:	b	1215c <__assert_fail@plt+0xbec>
   12230:	bl	113f0 <__errno_location@plt>
   12234:	ldr	r5, [r0]
   12238:	mov	r2, #5
   1223c:	mov	r0, r4
   12240:	movw	r1, #50628	; 0xc5c4
   12244:	movt	r1, #1
   12248:	bl	11258 <dcgettext@plt>
   1224c:	mov	r2, r0
   12250:	mov	r0, r4
   12254:	mov	r1, r5
   12258:	bl	11324 <error@plt>
   1225c:	b	1202c <__assert_fail@plt+0xabc>
   12260:	mov	r4, #1
   12264:	ldr	r0, [sp, #36]	; 0x24
   12268:	str	r4, [fp, #84]	; 0x54
   1226c:	bl	13138 <__assert_fail@plt+0x1bc8>
   12270:	cmp	r0, #0
   12274:	mov	r5, r0
   12278:	str	r0, [fp, #140]	; 0x8c
   1227c:	bne	12054 <__assert_fail@plt+0xae4>
   12280:	bl	113f0 <__errno_location@plt>
   12284:	ldr	r6, [r0]
   12288:	mov	r2, #5
   1228c:	movw	r1, #50664	; 0xc5e8
   12290:	movt	r1, #1
   12294:	mov	r0, r5
   12298:	bl	11258 <dcgettext@plt>
   1229c:	mov	r7, r0
   122a0:	mov	r1, #8
   122a4:	ldr	r2, [sp, #36]	; 0x24
   122a8:	mov	r0, r5
   122ac:	bl	18fec <__assert_fail@plt+0x7a7c>
   122b0:	mov	r3, r0
   122b4:	mov	r2, r7
   122b8:	mov	r1, r6
   122bc:	mov	r0, r4
   122c0:	bl	11324 <error@plt>
   122c4:	bl	113f0 <__errno_location@plt>
   122c8:	ldr	r5, [sp, #52]	; 0x34
   122cc:	mov	r2, #5
   122d0:	movw	r1, #50592	; 0xc5a0
   122d4:	movt	r1, #1
   122d8:	ldr	r4, [r0]
   122dc:	mov	r0, r5
   122e0:	bl	11258 <dcgettext@plt>
   122e4:	mov	r2, r0
   122e8:	mov	r1, r4
   122ec:	mov	r0, r5
   122f0:	bl	11324 <error@plt>
   122f4:	b	11ff8 <__assert_fail@plt+0xa88>
   122f8:	mov	r7, #12
   122fc:	b	11e58 <__assert_fail@plt+0x8e8>
   12300:	mov	r7, #11
   12304:	b	11e58 <__assert_fail@plt+0x8e8>
   12308:	mov	r7, #7
   1230c:	b	11e58 <__assert_fail@plt+0x8e8>
   12310:	mov	r7, #8
   12314:	b	11e58 <__assert_fail@plt+0x8e8>
   12318:	mov	r7, #10
   1231c:	b	11e58 <__assert_fail@plt+0x8e8>
   12320:	mov	r7, #13
   12324:	b	11e58 <__assert_fail@plt+0x8e8>
   12328:	mov	r7, #9
   1232c:	b	11e58 <__assert_fail@plt+0x8e8>
   12330:	ldr	r2, [fp, #16]
   12334:	ldr	r3, [fp, #116]	; 0x74
   12338:	cmp	r2, r3
   1233c:	bne	12358 <__assert_fail@plt+0xde8>
   12340:	ldr	r3, [sp, #48]	; 0x30
   12344:	cmp	r3, #0
   12348:	beq	12364 <__assert_fail@plt+0xdf4>
   1234c:	ldrb	r3, [fp, #64]	; 0x40
   12350:	cmp	r3, #0
   12354:	bne	12364 <__assert_fail@plt+0xdf4>
   12358:	ldr	r1, [pc, #768]	; 12660 <__assert_fail@plt+0x10f0>
   1235c:	add	r0, r1, #72	; 0x48
   12360:	bl	14588 <__assert_fail@plt+0x3018>
   12364:	ldr	r3, [fp, #60]	; 0x3c
   12368:	str	r3, [fp, #172]	; 0xac
   1236c:	ldr	r3, [fp, #60]	; 0x3c
   12370:	str	r3, [sp, #32]
   12374:	b	11a98 <__assert_fail@plt+0x528>
   12378:	ldr	r3, [sp, #44]	; 0x2c
   1237c:	movw	r5, #57700	; 0xe164
   12380:	movt	r5, #2
   12384:	ldr	r3, [r3]
   12388:	cmp	r3, sl
   1238c:	ldrlt	r6, [pc, #716]	; 12660 <__assert_fail@plt+0x10f0>
   12390:	ldrlt	r7, [sp, #44]	; 0x2c
   12394:	bge	123d8 <__assert_fail@plt+0xe68>
   12398:	ldr	r9, [r8, r3, lsl #2]
   1239c:	mov	r0, r9
   123a0:	bl	113c0 <strlen@plt>
   123a4:	ldrb	ip, [r5, #4]
   123a8:	add	r3, r0, #1
   123ac:	mov	r2, r9
   123b0:	mov	r1, r6
   123b4:	str	r4, [sp]
   123b8:	ldr	r0, [pc, #668]	; 1265c <__assert_fail@plt+0x10ec>
   123bc:	stmib	sp, {r4, ip}
   123c0:	bl	140f0 <__assert_fail@plt+0x2b80>
   123c4:	ldr	r3, [r7]
   123c8:	add	r3, r3, #1
   123cc:	cmp	r3, sl
   123d0:	str	r3, [r7]
   123d4:	blt	12398 <__assert_fail@plt+0xe28>
   123d8:	mov	r3, #0
   123dc:	ldr	r1, [fp, #16]
   123e0:	mov	r4, r3
   123e4:	strb	r3, [r5, #4]
   123e8:	ldr	r5, [pc, #624]	; 12660 <__assert_fail@plt+0x10f0>
   123ec:	ldr	r2, [fp, #32]
   123f0:	str	r2, [fp, #36]	; 0x24
   123f4:	str	r1, [fp, #116]	; 0x74
   123f8:	ldr	r3, [sp, #28]
   123fc:	blx	r3
   12400:	cmn	r0, #1
   12404:	beq	12330 <__assert_fail@plt+0xdc0>
   12408:	ldr	r3, [fp, #124]	; 0x7c
   1240c:	cmp	r3, #0
   12410:	beq	123f8 <__assert_fail@plt+0xe88>
   12414:	ldr	r2, [fp, #148]	; 0x94
   12418:	cmp	r3, r2
   1241c:	bhi	123f8 <__assert_fail@plt+0xe88>
   12420:	mov	r1, r5
   12424:	ldr	r0, [pc, #560]	; 1265c <__assert_fail@plt+0x10ec>
   12428:	bl	14588 <__assert_fail@plt+0x3018>
   1242c:	str	r4, [fp, #148]	; 0x94
   12430:	b	123f8 <__assert_fail@plt+0xe88>
   12434:	movw	r4, #57808	; 0xe1d0
   12438:	movt	r4, #2
   1243c:	ldr	r5, [r4]
   12440:	mov	r2, #5
   12444:	movw	r1, #50692	; 0xc604
   12448:	movt	r1, #1
   1244c:	mov	r0, #0
   12450:	bl	11258 <dcgettext@plt>
   12454:	mov	r6, r0
   12458:	bl	148a4 <__assert_fail@plt+0x3334>
   1245c:	mov	r2, r0
   12460:	mov	r1, r6
   12464:	mov	r3, #0
   12468:	mov	r0, r5
   1246c:	bl	113e4 <fprintf@plt>
   12470:	ldr	r5, [r4]
   12474:	mov	r2, #5
   12478:	movw	r1, #50740	; 0xc634
   1247c:	movt	r1, #1
   12480:	mov	r0, #0
   12484:	bl	11258 <dcgettext@plt>
   12488:	mov	r1, r0
   1248c:	mov	r3, #0
   12490:	ldr	r2, [fp, #92]	; 0x5c
   12494:	mov	r0, r5
   12498:	bl	113e4 <fprintf@plt>
   1249c:	ldr	r5, [r4]
   124a0:	mov	r2, #5
   124a4:	movw	r1, #50800	; 0xc670
   124a8:	movt	r1, #1
   124ac:	mov	r0, #0
   124b0:	bl	11258 <dcgettext@plt>
   124b4:	mov	r1, r0
   124b8:	mov	r3, #0
   124bc:	ldr	r2, [fp, #96]	; 0x60
   124c0:	mov	r0, r5
   124c4:	bl	113e4 <fprintf@plt>
   124c8:	mov	r2, #5
   124cc:	movw	r1, #50880	; 0xc6c0
   124d0:	movt	r1, #1
   124d4:	mov	r0, #0
   124d8:	ldr	r5, [r4]
   124dc:	bl	11258 <dcgettext@plt>
   124e0:	ldr	r6, [fp, #92]	; 0x5c
   124e4:	mov	r7, r0
   124e8:	bl	148a4 <__assert_fail@plt+0x3334>
   124ec:	mov	r3, #0
   124f0:	mov	r1, r7
   124f4:	sub	r2, r6, r0
   124f8:	mov	r0, r5
   124fc:	bl	113e4 <fprintf@plt>
   12500:	ldr	r5, [r4]
   12504:	mov	r2, #5
   12508:	movw	r1, #50936	; 0xc6f8
   1250c:	movt	r1, #1
   12510:	mov	r0, #0
   12514:	bl	11258 <dcgettext@plt>
   12518:	mov	r1, r0
   1251c:	mov	r3, #0
   12520:	ldr	r2, [fp, #100]	; 0x64
   12524:	mov	r0, r5
   12528:	bl	113e4 <fprintf@plt>
   1252c:	ldr	r5, [r4]
   12530:	mov	r2, #5
   12534:	movw	r1, #50988	; 0xc72c
   12538:	movt	r1, #1
   1253c:	mov	r0, #0
   12540:	bl	11258 <dcgettext@plt>
   12544:	mov	r1, r0
   12548:	mvn	r2, #-2147483648	; 0x80000000
   1254c:	mov	r3, #0
   12550:	mov	r0, r5
   12554:	bl	113e4 <fprintf@plt>
   12558:	mov	r0, #0
   1255c:	bl	11510 <isatty@plt>
   12560:	cmp	r0, #0
   12564:	beq	120a8 <__assert_fail@plt+0xb38>
   12568:	ldr	r5, [r4]
   1256c:	mov	r2, #5
   12570:	movw	r1, #51048	; 0xc768
   12574:	movt	r1, #1
   12578:	mov	r0, #0
   1257c:	bl	11258 <dcgettext@plt>
   12580:	mov	r1, r0
   12584:	mov	r0, r5
   12588:	bl	113e4 <fprintf@plt>
   1258c:	ldr	r3, [sp, #48]	; 0x30
   12590:	cmp	r3, #0
   12594:	beq	120a8 <__assert_fail@plt+0xb38>
   12598:	mov	r2, #5
   1259c:	movw	r1, #51224	; 0xc818
   125a0:	movt	r1, #1
   125a4:	mov	r0, #0
   125a8:	ldr	r4, [r4]
   125ac:	bl	11258 <dcgettext@plt>
   125b0:	ldr	r3, [sp, #44]	; 0x2c
   125b4:	mov	r1, r0
   125b8:	mov	r0, r4
   125bc:	ldr	r3, [r3]
   125c0:	ldr	r2, [r8, r3, lsl #2]
   125c4:	bl	113e4 <fprintf@plt>
   125c8:	b	120a8 <__assert_fail@plt+0xb38>
   125cc:	ldr	r3, [fp, #124]	; 0x7c
   125d0:	cmp	r3, #0
   125d4:	beq	12068 <__assert_fail@plt+0xaf8>
   125d8:	b	12060 <__assert_fail@plt+0xaf0>
   125dc:	ldr	r2, [sp, #28]
   125e0:	mov	r0, r7
   125e4:	str	r3, [sp, #28]
   125e8:	cmp	r2, #16
   125ec:	mov	r2, #5
   125f0:	movweq	r1, #49784	; 0xc278
   125f4:	movwne	r1, #49884	; 0xc2dc
   125f8:	movteq	r1, #1
   125fc:	movtne	r1, #1
   12600:	bl	11258 <dcgettext@plt>
   12604:	mov	ip, #255	; 0xff
   12608:	mov	r2, r0
   1260c:	mov	r1, r7
   12610:	str	ip, [sp]
   12614:	mov	r0, #1
   12618:	ldr	r3, [sp, #28]
   1261c:	bl	11324 <error@plt>
   12620:	mov	r0, #0
   12624:	bl	12cb4 <__assert_fail@plt+0x1744>
   12628:	mov	r0, #1
   1262c:	bl	12cb4 <__assert_fail@plt+0x1744>
   12630:	mov	r2, #5
   12634:	movw	r1, #50508	; 0xc54c
   12638:	movt	r1, #1
   1263c:	mov	r0, #0
   12640:	bl	11258 <dcgettext@plt>
   12644:	mov	r1, #0
   12648:	mov	r2, r0
   1264c:	mov	r0, r1
   12650:	bl	11324 <error@plt>
   12654:	b	11fb0 <__assert_fail@plt+0xa40>
   12658:	andeq	fp, r1, r4, lsl #1
   1265c:	andeq	lr, r2, r0, asr #4
   12660:	strdeq	lr, [r2], -r8
   12664:	andeq	fp, r1, ip, ror r0
   12668:	bl	113f0 <__errno_location@plt>
   1266c:	ldr	r4, [r0]
   12670:	mov	r2, #5
   12674:	movw	r1, #49628	; 0xc1dc
   12678:	movt	r1, #1
   1267c:	mov	r0, #0
   12680:	bl	11258 <dcgettext@plt>
   12684:	mov	r2, r0
   12688:	mov	r0, #1
   1268c:	mov	r1, r4
   12690:	bl	11324 <error@plt>
   12694:	movw	r1, #49984	; 0xc340
   12698:	movt	r1, #1
   1269c:	str	r3, [sp, #28]
   126a0:	mov	r2, #5
   126a4:	mov	r0, r7
   126a8:	bl	11258 <dcgettext@plt>
   126ac:	ldr	ip, [sp, #84]	; 0x54
   126b0:	b	12608 <__assert_fail@plt+0x1098>
   126b4:	movw	r1, #49720	; 0xc238
   126b8:	movt	r1, #1
   126bc:	str	r3, [sp, #28]
   126c0:	mov	r2, #5
   126c4:	mov	r0, #0
   126c8:	bl	11258 <dcgettext@plt>
   126cc:	mov	r2, r0
   126d0:	mov	r1, #0
   126d4:	ldr	r3, [sp, #28]
   126d8:	mov	r0, #1
   126dc:	bl	11324 <error@plt>
   126e0:	movw	r1, #45780	; 0xb2d4
   126e4:	movt	r1, #1
   126e8:	ldr	r3, [pc, #-140]	; 12664 <__assert_fail@plt+0x10f4>
   126ec:	movw	r0, #49664	; 0xc200
   126f0:	movt	r0, #1
   126f4:	movw	r2, #483	; 0x1e3
   126f8:	bl	11570 <__assert_fail@plt>
   126fc:	mov	r2, #5
   12700:	movw	r1, #50372	; 0xc4c4
   12704:	movt	r1, #1
   12708:	mov	r0, #0
   1270c:	bl	11258 <dcgettext@plt>
   12710:	ldr	ip, [sp, #68]	; 0x44
   12714:	movw	r3, #45148	; 0xb05c
   12718:	movt	r3, #1
   1271c:	mov	r2, r0
   12720:	mov	r1, #0
   12724:	mov	r0, #1
   12728:	add	r3, r3, ip, lsl #4
   1272c:	ldr	r3, [r3, #40]	; 0x28
   12730:	bl	11324 <error@plt>
   12734:	movw	r1, #50084	; 0xc3a4
   12738:	movt	r1, #1
   1273c:	str	r3, [sp, #28]
   12740:	b	126c0 <__assert_fail@plt+0x1150>
   12744:	movw	r1, #45780	; 0xb2d4
   12748:	movt	r1, #1
   1274c:	ldr	r3, [pc, #-240]	; 12664 <__assert_fail@plt+0x10f4>
   12750:	movw	r0, #50568	; 0xc588
   12754:	movt	r0, #1
   12758:	movw	r2, #723	; 0x2d3
   1275c:	bl	11570 <__assert_fail@plt>
   12760:	movw	r1, #45780	; 0xb2d4
   12764:	movt	r1, #1
   12768:	ldr	r3, [pc, #-268]	; 12664 <__assert_fail@plt+0x10f4>
   1276c:	movw	r0, #49692	; 0xc21c
   12770:	movt	r0, #1
   12774:	movw	r2, #511	; 0x1ff
   12778:	bl	11570 <__assert_fail@plt>
   1277c:	mov	fp, #0
   12780:	mov	lr, #0
   12784:	pop	{r1}		; (ldr r1, [sp], #4)
   12788:	mov	r2, sp
   1278c:	push	{r2}		; (str r2, [sp, #-4]!)
   12790:	push	{r0}		; (str r0, [sp, #-4]!)
   12794:	ldr	ip, [pc, #16]	; 127ac <__assert_fail@plt+0x123c>
   12798:	push	{ip}		; (str ip, [sp, #-4]!)
   1279c:	ldr	r0, [pc, #12]	; 127b0 <__assert_fail@plt+0x1240>
   127a0:	ldr	r3, [pc, #12]	; 127b4 <__assert_fail@plt+0x1244>
   127a4:	bl	11360 <__libc_start_main@plt>
   127a8:	bl	11540 <abort@plt>
   127ac:	andeq	fp, r1, r4, lsr r0
   127b0:	andeq	r1, r1, ip, ror r5
   127b4:	ldrdeq	sl, [r1], -r4
   127b8:	ldr	r3, [pc, #20]	; 127d4 <__assert_fail@plt+0x1264>
   127bc:	ldr	r2, [pc, #20]	; 127d8 <__assert_fail@plt+0x1268>
   127c0:	add	r3, pc, r3
   127c4:	ldr	r2, [r3, r2]
   127c8:	cmp	r2, #0
   127cc:	bxeq	lr
   127d0:	b	11378 <__gmon_start__@plt>
   127d4:	andeq	fp, r1, r8, lsr r8
   127d8:	andeq	r0, r0, r8, asr r1
   127dc:	ldr	r0, [pc, #24]	; 127fc <__assert_fail@plt+0x128c>
   127e0:	ldr	r3, [pc, #24]	; 12800 <__assert_fail@plt+0x1290>
   127e4:	cmp	r3, r0
   127e8:	bxeq	lr
   127ec:	ldr	r3, [pc, #16]	; 12804 <__assert_fail@plt+0x1294>
   127f0:	cmp	r3, #0
   127f4:	bxeq	lr
   127f8:	bx	r3
   127fc:			; <UNDEFINED> instruction: 0x0002e1b4
   12800:			; <UNDEFINED> instruction: 0x0002e1b4
   12804:	andeq	r0, r0, r0
   12808:	ldr	r0, [pc, #36]	; 12834 <__assert_fail@plt+0x12c4>
   1280c:	ldr	r1, [pc, #36]	; 12838 <__assert_fail@plt+0x12c8>
   12810:	sub	r1, r1, r0
   12814:	asr	r1, r1, #2
   12818:	add	r1, r1, r1, lsr #31
   1281c:	asrs	r1, r1, #1
   12820:	bxeq	lr
   12824:	ldr	r3, [pc, #16]	; 1283c <__assert_fail@plt+0x12cc>
   12828:	cmp	r3, #0
   1282c:	bxeq	lr
   12830:	bx	r3
   12834:			; <UNDEFINED> instruction: 0x0002e1b4
   12838:			; <UNDEFINED> instruction: 0x0002e1b4
   1283c:	andeq	r0, r0, r0
   12840:	push	{r4, lr}
   12844:	ldr	r4, [pc, #24]	; 12864 <__assert_fail@plt+0x12f4>
   12848:	ldrb	r3, [r4]
   1284c:	cmp	r3, #0
   12850:	popne	{r4, pc}
   12854:	bl	127dc <__assert_fail@plt+0x126c>
   12858:	mov	r3, #1
   1285c:	strb	r3, [r4]
   12860:	pop	{r4, pc}
   12864:	andeq	lr, r2, r4, ror #3
   12868:	b	12808 <__assert_fail@plt+0x1298>
   1286c:	bx	lr
   12870:	movw	r3, #57700	; 0xe164
   12874:	movt	r3, #2
   12878:	ldr	r2, [r3]
   1287c:	cmn	r2, #-2147483647	; 0x80000001
   12880:	beq	12890 <__assert_fail@plt+0x1320>
   12884:	ldr	r2, [r3]
   12888:	add	r2, r2, #1
   1288c:	str	r2, [r3]
   12890:	movw	r3, #57832	; 0xe1e8
   12894:	movt	r3, #2
   12898:	mov	r2, #1
   1289c:	str	r2, [r3]
   128a0:	bx	lr
   128a4:	mov	r2, #5
   128a8:	strd	r4, [sp, #-12]!
   128ac:	mov	r4, r1
   128b0:	mov	r5, r0
   128b4:	movw	r1, #45492	; 0xb1b4
   128b8:	movt	r1, #1
   128bc:	mov	r0, #0
   128c0:	str	lr, [sp, #8]
   128c4:	sub	sp, sp, #12
   128c8:	bl	11258 <dcgettext@plt>
   128cc:	mov	r1, #0
   128d0:	mov	r2, r0
   128d4:	str	r5, [sp]
   128d8:	mov	r3, r4
   128dc:	mov	r0, r1
   128e0:	str	r4, [sp, #4]
   128e4:	bl	11324 <error@plt>
   128e8:	add	sp, sp, #12
   128ec:	ldrd	r4, [sp]
   128f0:	add	sp, sp, #8
   128f4:	pop	{pc}		; (ldr pc, [sp], #4)
   128f8:	mov	r2, #5
   128fc:	movw	r1, #45572	; 0xb204
   12900:	movt	r1, #1
   12904:	mov	r0, #0
   12908:	str	r4, [sp, #-8]!
   1290c:	str	lr, [sp, #4]
   12910:	bl	11258 <dcgettext@plt>
   12914:	mov	r2, r0
   12918:	mov	r1, #0
   1291c:	mov	r0, #1
   12920:	bl	11324 <error@plt>
   12924:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12928:	movw	r5, #57832	; 0xe1e8
   1292c:	movt	r5, #2
   12930:	ldr	r3, [r5, #4]
   12934:	strd	r6, [sp, #8]
   12938:	strd	r8, [sp, #16]
   1293c:	strd	sl, [sp, #24]
   12940:	str	lr, [sp, #32]
   12944:	sub	sp, sp, #28
   12948:	cmp	r3, #0
   1294c:	beq	129bc <__assert_fail@plt+0x144c>
   12950:	movw	fp, #45684	; 0xb274
   12954:	movt	fp, #1
   12958:	movw	r3, #45724	; 0xb29c
   1295c:	movt	r3, #1
   12960:	movw	sl, #45752	; 0xb2b8
   12964:	movt	sl, #1
   12968:	mov	r8, r1
   1296c:	mov	r6, r0
   12970:	str	r3, [sp, #12]
   12974:	eor	r9, r0, #1
   12978:	mov	r7, #0
   1297c:	mov	r3, #0
   12980:	cmp	r8, r7
   12984:	movhi	r4, #0
   12988:	andls	r4, r9, #1
   1298c:	str	r3, [r5]
   12990:	mov	r2, r4
   12994:	add	r1, sp, #20
   12998:	mvn	r0, #0
   1299c:	bl	112e8 <waitpid@plt>
   129a0:	cmn	r0, #1
   129a4:	mov	r2, r0
   129a8:	beq	129d8 <__assert_fail@plt+0x1468>
   129ac:	cmp	r0, #0
   129b0:	bne	12a04 <__assert_fail@plt+0x1494>
   129b4:	cmp	r4, #0
   129b8:	beq	12b44 <__assert_fail@plt+0x15d4>
   129bc:	add	sp, sp, #28
   129c0:	ldrd	r4, [sp]
   129c4:	ldrd	r6, [sp, #8]
   129c8:	ldrd	r8, [sp, #16]
   129cc:	ldrd	sl, [sp, #24]
   129d0:	add	sp, sp, #32
   129d4:	pop	{pc}		; (ldr pc, [sp], #4)
   129d8:	bl	113f0 <__errno_location@plt>
   129dc:	ldr	r3, [r0]
   129e0:	cmp	r3, #4
   129e4:	bne	12b6c <__assert_fail@plt+0x15fc>
   129e8:	ldr	r3, [r5]
   129ec:	cmp	r3, #0
   129f0:	movne	r3, r6
   129f4:	orreq	r3, r6, #1
   129f8:	cmp	r3, #0
   129fc:	moveq	r4, #1
   12a00:	b	12990 <__assert_fail@plt+0x1420>
   12a04:	ldr	ip, [r5, #8]
   12a08:	cmp	ip, #0
   12a0c:	beq	12990 <__assert_fail@plt+0x1420>
   12a10:	ldr	r1, [r5, #12]
   12a14:	ldr	r3, [r1]
   12a18:	cmp	r0, r3
   12a1c:	mov	r3, #0
   12a20:	beq	12a3c <__assert_fail@plt+0x14cc>
   12a24:	add	r3, r3, #1
   12a28:	cmp	r3, ip
   12a2c:	beq	12990 <__assert_fail@plt+0x1420>
   12a30:	ldr	r0, [r1, #4]!
   12a34:	cmp	r0, r2
   12a38:	bne	12a24 <__assert_fail@plt+0x14b4>
   12a3c:	mov	r4, #0
   12a40:	ldr	r1, [r5, #4]
   12a44:	add	r7, r7, #1
   12a48:	ldr	r2, [r5, #12]
   12a4c:	str	r4, [r2, r3, lsl #2]
   12a50:	sub	r3, r1, #1
   12a54:	ldr	r2, [sp, #20]
   12a58:	str	r3, [r5, #4]
   12a5c:	ubfx	r3, r2, #8, #8
   12a60:	cmp	r3, #255	; 0xff
   12a64:	beq	12b14 <__assert_fail@plt+0x15a4>
   12a68:	uxtb	r3, r2
   12a6c:	cmp	r3, #127	; 0x7f
   12a70:	beq	12adc <__assert_fail@plt+0x156c>
   12a74:	and	r3, r2, #127	; 0x7f
   12a78:	add	r3, r3, #1
   12a7c:	sbfx	r3, r3, #1, #7
   12a80:	cmp	r3, #0
   12a84:	ble	12ac0 <__assert_fail@plt+0x1550>
   12a88:	mov	r2, #5
   12a8c:	mov	r1, sl
   12a90:	mov	r0, #0
   12a94:	bl	11258 <dcgettext@plt>
   12a98:	ldr	ip, [sp, #20]
   12a9c:	mov	r2, r0
   12aa0:	mov	r1, #0
   12aa4:	mov	r0, #125	; 0x7d
   12aa8:	ldr	r3, [r5, #20]
   12aac:	and	ip, ip, #127	; 0x7f
   12ab0:	ldr	r3, [r3]
   12ab4:	str	ip, [sp]
   12ab8:	bl	11324 <error@plt>
   12abc:	ldr	r2, [sp, #20]
   12ac0:	tst	r2, #65280	; 0xff00
   12ac4:	movne	r3, #123	; 0x7b
   12ac8:	strne	r3, [r5, #60]	; 0x3c
   12acc:	ldr	r3, [r5, #4]
   12ad0:	cmp	r3, #0
   12ad4:	bne	1297c <__assert_fail@plt+0x140c>
   12ad8:	b	129bc <__assert_fail@plt+0x144c>
   12adc:	mov	r2, #5
   12ae0:	mov	r0, #0
   12ae4:	ldr	r1, [sp, #12]
   12ae8:	bl	11258 <dcgettext@plt>
   12aec:	ldrb	ip, [sp, #21]
   12af0:	mov	r2, r0
   12af4:	mov	r1, #0
   12af8:	mov	r0, #125	; 0x7d
   12afc:	ldr	r3, [r5, #20]
   12b00:	ldr	r3, [r3]
   12b04:	str	ip, [sp]
   12b08:	bl	11324 <error@plt>
   12b0c:	ldr	r2, [sp, #20]
   12b10:	b	12a74 <__assert_fail@plt+0x1504>
   12b14:	mov	r2, #5
   12b18:	mov	r1, fp
   12b1c:	mov	r0, r4
   12b20:	bl	11258 <dcgettext@plt>
   12b24:	ldr	r3, [r5, #20]
   12b28:	mov	r2, r0
   12b2c:	mov	r1, r4
   12b30:	mov	r0, #124	; 0x7c
   12b34:	ldr	r3, [r3]
   12b38:	bl	11324 <error@plt>
   12b3c:	ldr	r2, [sp, #20]
   12b40:	b	12a68 <__assert_fail@plt+0x14f8>
   12b44:	mov	r2, #5
   12b48:	movw	r1, #45640	; 0xb248
   12b4c:	movt	r1, #1
   12b50:	bl	11258 <dcgettext@plt>
   12b54:	mov	r2, r0
   12b58:	mov	r1, r4
   12b5c:	ldr	r3, [r5, #4]
   12b60:	mov	r0, r4
   12b64:	bl	11324 <error@plt>
   12b68:	b	129bc <__assert_fail@plt+0x144c>
   12b6c:	mov	r2, #5
   12b70:	movw	r1, #45608	; 0xb228
   12b74:	movt	r1, #1
   12b78:	mov	r0, #0
   12b7c:	str	r3, [sp, #12]
   12b80:	bl	11258 <dcgettext@plt>
   12b84:	ldr	r3, [sp, #12]
   12b88:	mov	r2, r0
   12b8c:	mov	r0, #1
   12b90:	mov	r1, r3
   12b94:	bl	11324 <error@plt>
   12b98:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12b9c:	movw	r5, #57832	; 0xe1e8
   12ba0:	movt	r5, #2
   12ba4:	ldr	r4, [r5, #8]
   12ba8:	strd	r6, [sp, #8]
   12bac:	mov	r6, r0
   12bb0:	str	r8, [sp, #16]
   12bb4:	str	lr, [sp, #20]
   12bb8:	ldr	r0, [r5, #12]
   12bbc:	cmp	r4, #0
   12bc0:	beq	12c88 <__assert_fail@plt+0x1718>
   12bc4:	ldr	r3, [r0]
   12bc8:	cmp	r3, #0
   12bcc:	beq	12c7c <__assert_fail@plt+0x170c>
   12bd0:	add	r2, r0, #4
   12bd4:	mov	r3, #0
   12bd8:	b	12bf0 <__assert_fail@plt+0x1680>
   12bdc:	mov	r1, r2
   12be0:	add	r2, r2, #4
   12be4:	ldr	ip, [r1]
   12be8:	cmp	ip, #0
   12bec:	beq	12c80 <__assert_fail@plt+0x1710>
   12bf0:	add	r3, r3, #1
   12bf4:	cmp	r3, r4
   12bf8:	lsl	r7, r3, #2
   12bfc:	bne	12bdc <__assert_fail@plt+0x166c>
   12c00:	mov	r2, #4
   12c04:	ldr	r1, [pc, #164]	; 12cb0 <__assert_fail@plt+0x1740>
   12c08:	bl	19bb8 <__assert_fail@plt+0x8648>
   12c0c:	ldr	r3, [r5, #8]
   12c10:	str	r0, [r5, #12]
   12c14:	cmp	r3, r4
   12c18:	bls	12c3c <__assert_fail@plt+0x16cc>
   12c1c:	add	r2, r0, r4, lsl #2
   12c20:	mov	r3, r4
   12c24:	mov	ip, #0
   12c28:	str	ip, [r2], #4
   12c2c:	add	r3, r3, #1
   12c30:	ldr	r1, [r5, #8]
   12c34:	cmp	r1, r3
   12c38:	bhi	12c28 <__assert_fail@plt+0x16b8>
   12c3c:	ldr	r3, [r0, r7]
   12c40:	add	r1, r0, r7
   12c44:	cmp	r3, #0
   12c48:	bne	12c90 <__assert_fail@plt+0x1720>
   12c4c:	ldr	r3, [r5, #4]
   12c50:	mov	r2, #1
   12c54:	mov	r0, r4
   12c58:	strb	r2, [r5, #64]	; 0x40
   12c5c:	ldr	r8, [sp, #16]
   12c60:	str	r6, [r1]
   12c64:	add	r3, r3, r2
   12c68:	ldrd	r6, [sp, #8]
   12c6c:	str	r3, [r5, #4]
   12c70:	ldrd	r4, [sp]
   12c74:	add	sp, sp, #20
   12c78:	pop	{pc}		; (ldr pc, [sp], #4)
   12c7c:	mov	r1, r0
   12c80:	mov	r4, r3
   12c84:	b	12c4c <__assert_fail@plt+0x16dc>
   12c88:	mov	r7, r4
   12c8c:	b	12c00 <__assert_fail@plt+0x1690>
   12c90:	movw	r3, #45148	; 0xb05c
   12c94:	movt	r3, #1
   12c98:	movw	r1, #45780	; 0xb2d4
   12c9c:	movt	r1, #1
   12ca0:	movw	r0, #45788	; 0xb2dc
   12ca4:	movt	r0, #1
   12ca8:	movw	r2, #1477	; 0x5c5
   12cac:	bl	11570 <__assert_fail@plt>
   12cb0:	strdeq	lr, [r2], -r0
   12cb4:	subs	r5, r0, #0
   12cb8:	str	r7, [sp, #-8]!
   12cbc:	str	lr, [sp, #4]
   12cc0:	beq	12d04 <__assert_fail@plt+0x1794>
   12cc4:	movw	r3, #57808	; 0xe1d0
   12cc8:	movt	r3, #2
   12ccc:	ldr	r4, [r3]
   12cd0:	mov	r2, #5
   12cd4:	movw	r1, #45804	; 0xb2ec
   12cd8:	movt	r1, #1
   12cdc:	mov	r0, #0
   12ce0:	bl	11258 <dcgettext@plt>
   12ce4:	movw	r3, #58036	; 0xe2b4
   12ce8:	movt	r3, #2
   12cec:	mov	r1, r0
   12cf0:	ldr	r2, [r3]
   12cf4:	mov	r0, r4
   12cf8:	bl	113e4 <fprintf@plt>
   12cfc:	mov	r0, #1
   12d00:	bl	113a8 <exit@plt>
   12d04:	movw	r4, #57820	; 0xe1dc
   12d08:	movt	r4, #2
   12d0c:	ldr	r7, [r4]
   12d10:	mov	r2, #5
   12d14:	movw	r1, #45844	; 0xb314
   12d18:	movt	r1, #1
   12d1c:	movw	r6, #58036	; 0xe2b4
   12d20:	movt	r6, #2
   12d24:	bl	11258 <dcgettext@plt>
   12d28:	mov	r1, r0
   12d2c:	ldr	r2, [r6]
   12d30:	mov	r0, r7
   12d34:	bl	113e4 <fprintf@plt>
   12d38:	mov	r2, #5
   12d3c:	movw	r1, #45896	; 0xb348
   12d40:	movt	r1, #1
   12d44:	mov	r0, r5
   12d48:	bl	11258 <dcgettext@plt>
   12d4c:	ldr	r1, [r4]
   12d50:	bl	11528 <fputs@plt>
   12d54:	mov	r2, #5
   12d58:	movw	r1, #45976	; 0xb398
   12d5c:	movt	r1, #1
   12d60:	mov	r0, r5
   12d64:	bl	11258 <dcgettext@plt>
   12d68:	ldr	r1, [r4]
   12d6c:	bl	11528 <fputs@plt>
   12d70:	mov	r2, #5
   12d74:	movw	r1, #46096	; 0xb410
   12d78:	movt	r1, #1
   12d7c:	mov	r0, r5
   12d80:	bl	11258 <dcgettext@plt>
   12d84:	ldr	r1, [r4]
   12d88:	bl	11528 <fputs@plt>
   12d8c:	mov	r2, #5
   12d90:	movw	r1, #46308	; 0xb4e4
   12d94:	movt	r1, #1
   12d98:	mov	r0, r5
   12d9c:	bl	11258 <dcgettext@plt>
   12da0:	ldr	r1, [r4]
   12da4:	bl	11528 <fputs@plt>
   12da8:	mov	r2, #5
   12dac:	movw	r1, #46388	; 0xb534
   12db0:	movt	r1, #1
   12db4:	mov	r0, r5
   12db8:	bl	11258 <dcgettext@plt>
   12dbc:	ldr	r1, [r4]
   12dc0:	bl	11528 <fputs@plt>
   12dc4:	mov	r2, #5
   12dc8:	movw	r1, #46624	; 0xb620
   12dcc:	movt	r1, #1
   12dd0:	mov	r0, r5
   12dd4:	bl	11258 <dcgettext@plt>
   12dd8:	ldr	r1, [r4]
   12ddc:	bl	11528 <fputs@plt>
   12de0:	mov	r2, #5
   12de4:	movw	r1, #46852	; 0xb704
   12de8:	movt	r1, #1
   12dec:	mov	r0, r5
   12df0:	bl	11258 <dcgettext@plt>
   12df4:	ldr	r1, [r4]
   12df8:	bl	11528 <fputs@plt>
   12dfc:	mov	r2, #5
   12e00:	movw	r1, #47004	; 0xb79c
   12e04:	movt	r1, #1
   12e08:	mov	r0, r5
   12e0c:	bl	11258 <dcgettext@plt>
   12e10:	ldr	r1, [r4]
   12e14:	bl	11528 <fputs@plt>
   12e18:	mov	r2, #5
   12e1c:	movw	r1, #47056	; 0xb7d0
   12e20:	movt	r1, #1
   12e24:	mov	r0, r5
   12e28:	bl	11258 <dcgettext@plt>
   12e2c:	ldr	r1, [r4]
   12e30:	bl	11528 <fputs@plt>
   12e34:	mov	r2, #5
   12e38:	movw	r1, #47268	; 0xb8a4
   12e3c:	movt	r1, #1
   12e40:	mov	r0, r5
   12e44:	bl	11258 <dcgettext@plt>
   12e48:	ldr	r1, [r4]
   12e4c:	bl	11528 <fputs@plt>
   12e50:	mov	r2, #5
   12e54:	movw	r1, #47396	; 0xb924
   12e58:	movt	r1, #1
   12e5c:	mov	r0, r5
   12e60:	bl	11258 <dcgettext@plt>
   12e64:	ldr	r1, [r4]
   12e68:	bl	11528 <fputs@plt>
   12e6c:	mov	r2, #5
   12e70:	movw	r1, #47556	; 0xb9c4
   12e74:	movt	r1, #1
   12e78:	mov	r0, r5
   12e7c:	bl	11258 <dcgettext@plt>
   12e80:	ldr	r1, [r4]
   12e84:	bl	11528 <fputs@plt>
   12e88:	mov	r2, #5
   12e8c:	movw	r1, #47636	; 0xba14
   12e90:	movt	r1, #1
   12e94:	mov	r0, r5
   12e98:	bl	11258 <dcgettext@plt>
   12e9c:	ldr	r1, [r4]
   12ea0:	bl	11528 <fputs@plt>
   12ea4:	mov	r2, #5
   12ea8:	movw	r1, #47852	; 0xbaec
   12eac:	movt	r1, #1
   12eb0:	mov	r0, r5
   12eb4:	bl	11258 <dcgettext@plt>
   12eb8:	ldr	r1, [r4]
   12ebc:	bl	11528 <fputs@plt>
   12ec0:	mov	r2, #5
   12ec4:	movw	r1, #47928	; 0xbb38
   12ec8:	movt	r1, #1
   12ecc:	mov	r0, r5
   12ed0:	bl	11258 <dcgettext@plt>
   12ed4:	ldr	r1, [r4]
   12ed8:	bl	11528 <fputs@plt>
   12edc:	mov	r2, #5
   12ee0:	movw	r1, #47992	; 0xbb78
   12ee4:	movt	r1, #1
   12ee8:	mov	r0, r5
   12eec:	bl	11258 <dcgettext@plt>
   12ef0:	ldr	r1, [r4]
   12ef4:	bl	11528 <fputs@plt>
   12ef8:	mov	r2, #5
   12efc:	movw	r1, #48072	; 0xbbc8
   12f00:	movt	r1, #1
   12f04:	mov	r0, r5
   12f08:	bl	11258 <dcgettext@plt>
   12f0c:	ldr	r1, [r4]
   12f10:	bl	11528 <fputs@plt>
   12f14:	mov	r2, #5
   12f18:	movw	r1, #48288	; 0xbca0
   12f1c:	movt	r1, #1
   12f20:	mov	r0, r5
   12f24:	bl	11258 <dcgettext@plt>
   12f28:	ldr	r1, [r4]
   12f2c:	bl	11528 <fputs@plt>
   12f30:	mov	r2, #5
   12f34:	movw	r1, #48364	; 0xbcec
   12f38:	movt	r1, #1
   12f3c:	mov	r0, r5
   12f40:	bl	11258 <dcgettext@plt>
   12f44:	ldr	r1, [r4]
   12f48:	bl	11528 <fputs@plt>
   12f4c:	mov	r2, #5
   12f50:	movw	r1, #48432	; 0xbd30
   12f54:	movt	r1, #1
   12f58:	mov	r0, r5
   12f5c:	bl	11258 <dcgettext@plt>
   12f60:	ldr	r1, [r4]
   12f64:	bl	11528 <fputs@plt>
   12f68:	mov	r2, #5
   12f6c:	movw	r1, #48504	; 0xbd78
   12f70:	movt	r1, #1
   12f74:	mov	r0, r5
   12f78:	bl	11258 <dcgettext@plt>
   12f7c:	ldr	r1, [r4]
   12f80:	bl	11528 <fputs@plt>
   12f84:	mov	r2, #5
   12f88:	movw	r1, #48576	; 0xbdc0
   12f8c:	movt	r1, #1
   12f90:	mov	r0, r5
   12f94:	bl	11258 <dcgettext@plt>
   12f98:	ldr	r1, [r4]
   12f9c:	bl	11528 <fputs@plt>
   12fa0:	mov	r2, #5
   12fa4:	movw	r1, #48636	; 0xbdfc
   12fa8:	movt	r1, #1
   12fac:	mov	r0, r5
   12fb0:	bl	11258 <dcgettext@plt>
   12fb4:	ldr	r1, [r4]
   12fb8:	bl	11528 <fputs@plt>
   12fbc:	ldr	r0, [r4]
   12fc0:	ldr	r1, [r6]
   12fc4:	bl	15358 <__assert_fail@plt+0x3de8>
   12fc8:	mov	r0, r5
   12fcc:	bl	113a8 <exit@plt>
   12fd0:	strd	r4, [sp, #-20]!	; 0xffffffec
   12fd4:	mov	r5, r2
   12fd8:	mov	r2, #10
   12fdc:	strd	r6, [sp, #8]
   12fe0:	mov	r7, r1
   12fe4:	mov	r4, r3
   12fe8:	str	lr, [sp, #16]
   12fec:	sub	sp, sp, #20
   12ff0:	mov	r6, r0
   12ff4:	add	r1, sp, #12
   12ff8:	bl	111bc <strtol@plt>
   12ffc:	ldr	r3, [sp, #12]
   13000:	cmp	r3, r6
   13004:	beq	130f0 <__assert_fail@plt+0x1b80>
   13008:	ldrb	r3, [r3]
   1300c:	cmp	r3, #0
   13010:	bne	130f0 <__assert_fail@plt+0x1b80>
   13014:	cmp	r0, r5
   13018:	blt	13094 <__assert_fail@plt+0x1b24>
   1301c:	cmp	r4, #0
   13020:	cmpge	r0, r4
   13024:	bgt	1303c <__assert_fail@plt+0x1acc>
   13028:	add	sp, sp, #20
   1302c:	ldrd	r4, [sp]
   13030:	ldrd	r6, [sp, #8]
   13034:	add	sp, sp, #16
   13038:	pop	{pc}		; (ldr pc, [sp], #4)
   1303c:	movw	r2, #57808	; 0xe1d0
   13040:	movt	r2, #2
   13044:	ldr	r5, [r2]
   13048:	mov	r0, r3
   1304c:	mov	r2, #5
   13050:	movw	r1, #48796	; 0xbe9c
   13054:	movt	r1, #1
   13058:	bl	11258 <dcgettext@plt>
   1305c:	movw	r2, #58036	; 0xe2b4
   13060:	movt	r2, #2
   13064:	str	r7, [sp]
   13068:	mov	r1, r0
   1306c:	mov	r3, r6
   13070:	str	r4, [sp, #4]
   13074:	mov	r0, r5
   13078:	ldr	r2, [r2]
   1307c:	bl	113e4 <fprintf@plt>
   13080:	ldr	r3, [sp, #40]	; 0x28
   13084:	cmp	r3, #0
   13088:	bne	130e8 <__assert_fail@plt+0x1b78>
   1308c:	mov	r0, r4
   13090:	b	13028 <__assert_fail@plt+0x1ab8>
   13094:	movw	r2, #57808	; 0xe1d0
   13098:	movt	r2, #2
   1309c:	ldr	r4, [r2]
   130a0:	mov	r0, r3
   130a4:	mov	r2, #5
   130a8:	movw	r1, #48748	; 0xbe6c
   130ac:	movt	r1, #1
   130b0:	bl	11258 <dcgettext@plt>
   130b4:	movw	r2, #58036	; 0xe2b4
   130b8:	movt	r2, #2
   130bc:	str	r7, [sp]
   130c0:	mov	r1, r0
   130c4:	mov	r3, r6
   130c8:	str	r5, [sp, #4]
   130cc:	mov	r0, r4
   130d0:	ldr	r2, [r2]
   130d4:	bl	113e4 <fprintf@plt>
   130d8:	ldr	r3, [sp, #40]	; 0x28
   130dc:	cmp	r3, #0
   130e0:	moveq	r0, r5
   130e4:	beq	13028 <__assert_fail@plt+0x1ab8>
   130e8:	mov	r0, #1
   130ec:	bl	12cb4 <__assert_fail@plt+0x1744>
   130f0:	movw	r3, #57808	; 0xe1d0
   130f4:	movt	r3, #2
   130f8:	ldr	r4, [r3]
   130fc:	mov	r2, #5
   13100:	movw	r1, #48708	; 0xbe44
   13104:	movt	r1, #1
   13108:	mov	r0, #0
   1310c:	bl	11258 <dcgettext@plt>
   13110:	movw	r2, #58036	; 0xe2b4
   13114:	movt	r2, #2
   13118:	str	r7, [sp]
   1311c:	mov	r1, r0
   13120:	mov	r3, r6
   13124:	ldr	r2, [r2]
   13128:	mov	r0, r4
   1312c:	bl	113e4 <fprintf@plt>
   13130:	mov	r0, #1
   13134:	bl	12cb4 <__assert_fail@plt+0x1744>
   13138:	mov	r1, #0
   1313c:	strd	r4, [sp, #-16]!
   13140:	str	r6, [sp, #8]
   13144:	str	lr, [sp, #12]
   13148:	bl	14f5c <__assert_fail@plt+0x39ec>
   1314c:	subs	r5, r0, #0
   13150:	movlt	r4, #0
   13154:	blt	1316c <__assert_fail@plt+0x1bfc>
   13158:	movw	r1, #50624	; 0xc5c0
   1315c:	movt	r1, #1
   13160:	bl	11198 <fdopen@plt>
   13164:	subs	r4, r0, #0
   13168:	beq	13180 <__assert_fail@plt+0x1c10>
   1316c:	mov	r0, r4
   13170:	ldrd	r4, [sp]
   13174:	ldr	r6, [sp, #8]
   13178:	add	sp, sp, #12
   1317c:	pop	{pc}		; (ldr pc, [sp], #4)
   13180:	bl	113f0 <__errno_location@plt>
   13184:	mov	r6, r0
   13188:	mov	r0, r5
   1318c:	ldr	r5, [r6]
   13190:	bl	11558 <close@plt>
   13194:	str	r5, [r6]
   13198:	b	1316c <__assert_fail@plt+0x1bfc>
   1319c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   131a0:	movw	r5, #57832	; 0xe1e8
   131a4:	movt	r5, #2
   131a8:	ldr	r3, [r5, #16]
   131ac:	strd	r6, [sp, #8]
   131b0:	strd	r8, [sp, #16]
   131b4:	strd	sl, [sp, #24]
   131b8:	str	lr, [sp, #32]
   131bc:	sub	sp, sp, #12
   131c0:	cmp	r3, #1
   131c4:	str	r0, [sp, #4]
   131c8:	beq	13244 <__assert_fail@plt+0x1cd4>
   131cc:	movw	fp, #57808	; 0xe1d0
   131d0:	movt	fp, #2
   131d4:	movw	sl, #48704	; 0xbe40
   131d8:	movt	sl, #1
   131dc:	movw	r9, #48844	; 0xbecc
   131e0:	movt	r9, #1
   131e4:	movw	r8, #48848	; 0xbed0
   131e8:	movt	r8, #1
   131ec:	mov	r4, #0
   131f0:	ldr	r3, [r5, #20]
   131f4:	cmp	r4, #0
   131f8:	mov	r1, #3
   131fc:	mov	r0, #0
   13200:	moveq	r7, sl
   13204:	ldr	r6, [fp]
   13208:	movne	r7, r9
   1320c:	ldr	r2, [r3, r4, lsl #2]
   13210:	bl	18fec <__assert_fail@plt+0x7a7c>
   13214:	mov	r3, r0
   13218:	mov	r2, r7
   1321c:	mov	r1, r8
   13220:	mov	r0, r6
   13224:	bl	113e4 <fprintf@plt>
   13228:	cmp	r0, #0
   1322c:	blt	13350 <__assert_fail@plt+0x1de0>
   13230:	ldr	r3, [r5, #16]
   13234:	add	r4, r4, #1
   13238:	sub	r3, r3, #1
   1323c:	cmp	r3, r4
   13240:	bhi	131f0 <__assert_fail@plt+0x1c80>
   13244:	ldr	r3, [sp, #4]
   13248:	cmp	r3, #0
   1324c:	beq	132ec <__assert_fail@plt+0x1d7c>
   13250:	ldr	r3, [r5, #68]	; 0x44
   13254:	cmp	r3, #0
   13258:	beq	13308 <__assert_fail@plt+0x1d98>
   1325c:	movw	r4, #57808	; 0xe1d0
   13260:	movt	r4, #2
   13264:	mov	r2, #4
   13268:	mov	r1, #1
   1326c:	ldr	r3, [r4]
   13270:	movw	r0, #48932	; 0xbf24
   13274:	movt	r0, #1
   13278:	bl	112d0 <fwrite@plt>
   1327c:	ldr	r0, [r4]
   13280:	bl	1a77c <__assert_fail@plt+0x920c>
   13284:	cmp	r0, #0
   13288:	bne	13350 <__assert_fail@plt+0x1de0>
   1328c:	ldr	r0, [r5, #68]	; 0x44
   13290:	bl	1154c <getc@plt>
   13294:	cmp	r0, #10
   13298:	cmnne	r0, #1
   1329c:	mov	r4, r0
   132a0:	beq	132b8 <__assert_fail@plt+0x1d48>
   132a4:	ldr	r0, [r5, #68]	; 0x44
   132a8:	bl	1154c <getc@plt>
   132ac:	cmp	r0, #10
   132b0:	cmnne	r0, #1
   132b4:	bne	132a4 <__assert_fail@plt+0x1d34>
   132b8:	cmn	r0, #1
   132bc:	beq	1337c <__assert_fail@plt+0x1e0c>
   132c0:	bic	r0, r4, #32
   132c4:	sub	r0, r0, #89	; 0x59
   132c8:	clz	r0, r0
   132cc:	lsr	r0, r0, #5
   132d0:	add	sp, sp, #12
   132d4:	ldrd	r4, [sp]
   132d8:	ldrd	r6, [sp, #8]
   132dc:	ldrd	r8, [sp, #16]
   132e0:	ldrd	sl, [sp, #24]
   132e4:	add	sp, sp, #32
   132e8:	pop	{pc}		; (ldr pc, [sp], #4)
   132ec:	movw	r3, #57808	; 0xe1d0
   132f0:	movt	r3, #2
   132f4:	mov	r0, #10
   132f8:	ldr	r1, [r3]
   132fc:	bl	114ec <putc@plt>
   13300:	ldr	r0, [sp, #4]
   13304:	b	132d0 <__assert_fail@plt+0x1d60>
   13308:	movw	r0, #48884	; 0xbef4
   1330c:	movt	r0, #1
   13310:	bl	13138 <__assert_fail@plt+0x1bc8>
   13314:	cmp	r0, #0
   13318:	mov	r4, r0
   1331c:	str	r0, [r5, #68]	; 0x44
   13320:	bne	1325c <__assert_fail@plt+0x1cec>
   13324:	bl	113f0 <__errno_location@plt>
   13328:	ldr	r5, [r0]
   1332c:	mov	r2, #5
   13330:	movw	r1, #48896	; 0xbf00
   13334:	movt	r1, #1
   13338:	mov	r0, r4
   1333c:	bl	11258 <dcgettext@plt>
   13340:	mov	r2, r0
   13344:	mov	r0, #1
   13348:	mov	r1, r5
   1334c:	bl	11324 <error@plt>
   13350:	bl	113f0 <__errno_location@plt>
   13354:	movw	r1, #48856	; 0xbed8
   13358:	movt	r1, #1
   1335c:	ldr	r4, [r0]
   13360:	mov	r2, #5
   13364:	mov	r0, #0
   13368:	bl	11258 <dcgettext@plt>
   1336c:	mov	r2, r0
   13370:	mov	r0, #1
   13374:	mov	r1, r4
   13378:	bl	11324 <error@plt>
   1337c:	bl	113f0 <__errno_location@plt>
   13380:	movw	r1, #48940	; 0xbf2c
   13384:	movt	r1, #1
   13388:	b	1335c <__assert_fail@plt+0x1dec>
   1338c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13390:	movw	r5, #57700	; 0xe164
   13394:	movt	r5, #2
   13398:	ldr	r2, [r5]
   1339c:	movw	r4, #57832	; 0xe1e8
   133a0:	movt	r4, #2
   133a4:	strd	r6, [sp, #8]
   133a8:	mov	r6, r3
   133ac:	str	r8, [sp, #16]
   133b0:	str	lr, [sp, #20]
   133b4:	sub	sp, sp, #32
   133b8:	cmp	r2, #0
   133bc:	beq	133ec <__assert_fail@plt+0x1e7c>
   133c0:	ldr	r3, [r5]
   133c4:	ldr	r2, [r4, #4]
   133c8:	cmp	r2, r3
   133cc:	bcc	133ec <__assert_fail@plt+0x1e7c>
   133d0:	mov	r1, #1
   133d4:	mov	r0, #0
   133d8:	bl	12924 <__assert_fail@plt+0x13b4>
   133dc:	ldr	r3, [r5]
   133e0:	ldr	r2, [r4, #4]
   133e4:	cmp	r2, r3
   133e8:	bcs	133d0 <__assert_fail@plt+0x1e60>
   133ec:	ldrb	r3, [r4, #72]	; 0x48
   133f0:	cmp	r3, #0
   133f4:	bne	13544 <__assert_fail@plt+0x1fd4>
   133f8:	ldrb	r3, [r4, #73]	; 0x49
   133fc:	cmp	r3, #0
   13400:	bne	13598 <__assert_fail@plt+0x2028>
   13404:	mov	r1, #0
   13408:	mov	r0, r1
   1340c:	bl	12924 <__assert_fail@plt+0x13b4>
   13410:	add	r0, sp, #4
   13414:	bl	19464 <__assert_fail@plt+0x7ef4>
   13418:	subs	r7, r0, #0
   1341c:	bne	1370c <__assert_fail@plt+0x219c>
   13420:	mov	r2, #1
   13424:	mov	r1, #2
   13428:	ldr	r0, [sp, #8]
   1342c:	bl	1a594 <__assert_fail@plt+0x9024>
   13430:	b	1345c <__assert_fail@plt+0x1eec>
   13434:	bl	113f0 <__errno_location@plt>
   13438:	ldr	r3, [r0]
   1343c:	cmp	r3, #11
   13440:	bne	13468 <__assert_fail@plt+0x1ef8>
   13444:	ldr	r3, [r4, #4]
   13448:	cmp	r3, #0
   1344c:	beq	13468 <__assert_fail@plt+0x1ef8>
   13450:	mov	r1, #1
   13454:	mov	r0, #0
   13458:	bl	12924 <__assert_fail@plt+0x13b4>
   1345c:	bl	114a4 <fork@plt>
   13460:	subs	r5, r0, #0
   13464:	blt	13434 <__assert_fail@plt+0x1ec4>
   13468:	cmn	r5, #1
   1346c:	beq	136e0 <__assert_fail@plt+0x2170>
   13470:	cmp	r5, #0
   13474:	beq	135b4 <__assert_fail@plt+0x2044>
   13478:	ldr	r0, [sp, #8]
   1347c:	bl	11558 <close@plt>
   13480:	mov	r2, #4
   13484:	mov	r1, sp
   13488:	ldr	r0, [sp, #4]
   1348c:	bl	19344 <__assert_fail@plt+0x7dd4>
   13490:	cmp	r0, #4
   13494:	mov	r4, r0
   13498:	beq	13564 <__assert_fail@plt+0x1ff4>
   1349c:	cmn	r0, #1
   134a0:	beq	1350c <__assert_fail@plt+0x1f9c>
   134a4:	cmp	r0, #0
   134a8:	beq	134dc <__assert_fail@plt+0x1f6c>
   134ac:	bl	113f0 <__errno_location@plt>
   134b0:	ldr	r5, [r0]
   134b4:	mov	r2, #5
   134b8:	movw	r1, #49220	; 0xc044
   134bc:	movt	r1, #1
   134c0:	mov	r0, #0
   134c4:	bl	11258 <dcgettext@plt>
   134c8:	mov	r2, r0
   134cc:	mov	r3, r4
   134d0:	mov	r0, #1
   134d4:	mov	r1, r5
   134d8:	bl	11324 <error@plt>
   134dc:	mov	r0, r5
   134e0:	bl	12b98 <__assert_fail@plt+0x1628>
   134e4:	ldr	r0, [sp, #4]
   134e8:	mov	r7, #1
   134ec:	bl	11558 <close@plt>
   134f0:	mov	r0, r7
   134f4:	add	sp, sp, #32
   134f8:	ldrd	r4, [sp]
   134fc:	ldrd	r6, [sp, #8]
   13500:	ldr	r8, [sp, #16]
   13504:	add	sp, sp, #20
   13508:	pop	{pc}		; (ldr pc, [sp], #4)
   1350c:	ldr	r0, [sp, #4]
   13510:	bl	11558 <close@plt>
   13514:	bl	113f0 <__errno_location@plt>
   13518:	ldr	r4, [r0]
   1351c:	mov	r2, #5
   13520:	movw	r1, #49128	; 0xbfe8
   13524:	movt	r1, #1
   13528:	mov	r0, #0
   1352c:	bl	11258 <dcgettext@plt>
   13530:	mov	r2, r0
   13534:	mov	r0, #0
   13538:	mov	r1, r4
   1353c:	bl	11324 <error@plt>
   13540:	b	134e4 <__assert_fail@plt+0x1f74>
   13544:	mov	r0, #1
   13548:	bl	1319c <__assert_fail@plt+0x1c2c>
   1354c:	cmp	r0, #0
   13550:	beq	135a4 <__assert_fail@plt+0x2034>
   13554:	ldrb	r3, [r4, #72]	; 0x48
   13558:	cmp	r3, #0
   1355c:	bne	13404 <__assert_fail@plt+0x1e94>
   13560:	b	133f8 <__assert_fail@plt+0x1e88>
   13564:	ldr	r0, [sp, #4]
   13568:	bl	11558 <close@plt>
   1356c:	mov	r0, r5
   13570:	mov	r2, #0
   13574:	add	r1, sp, #12
   13578:	bl	112e8 <waitpid@plt>
   1357c:	ldr	r3, [sp]
   13580:	cmp	r3, #7
   13584:	beq	134f0 <__assert_fail@plt+0x1f80>
   13588:	cmp	r3, #2
   1358c:	beq	135ac <__assert_fail@plt+0x203c>
   13590:	mov	r0, #126	; 0x7e
   13594:	bl	113a8 <exit@plt>
   13598:	mov	r0, #0
   1359c:	bl	1319c <__assert_fail@plt+0x1c2c>
   135a0:	b	13404 <__assert_fail@plt+0x1e94>
   135a4:	mov	r7, #1
   135a8:	b	134f0 <__assert_fail@plt+0x1f80>
   135ac:	mov	r0, #127	; 0x7f
   135b0:	bl	113a8 <exit@plt>
   135b4:	ldr	r0, [sp, #4]
   135b8:	bl	11558 <close@plt>
   135bc:	str	r5, [r4, #60]	; 0x3c
   135c0:	bl	15078 <__assert_fail@plt+0x3b08>
   135c4:	cmp	r0, #0
   135c8:	bne	1371c <__assert_fail@plt+0x21ac>
   135cc:	mov	r0, #0
   135d0:	bl	12b98 <__assert_fail@plt+0x1628>
   135d4:	mov	r3, r0
   135d8:	mov	r1, #19
   135dc:	movw	r2, #49028	; 0xbf84
   135e0:	movt	r2, #1
   135e4:	add	r0, sp, #12
   135e8:	bl	113fc <snprintf@plt>
   135ec:	bl	113f0 <__errno_location@plt>
   135f0:	ldr	r5, [r4, #76]	; 0x4c
   135f4:	mov	r7, r0
   135f8:	cmp	r5, #0
   135fc:	beq	13618 <__assert_fail@plt+0x20a8>
   13600:	add	r1, sp, #12
   13604:	mov	r2, #1
   13608:	mov	r0, r5
   1360c:	bl	113d8 <setenv@plt>
   13610:	cmp	r0, #0
   13614:	blt	13724 <__assert_fail@plt+0x21b4>
   13618:	ldr	r3, [r4, #84]	; 0x54
   1361c:	ldrb	r2, [r4, #80]	; 0x50
   13620:	cmp	r3, #0
   13624:	beq	13754 <__assert_fail@plt+0x21e4>
   13628:	cmp	r2, #0
   1362c:	beq	1367c <__assert_fail@plt+0x210c>
   13630:	movw	r5, #48884	; 0xbef4
   13634:	movt	r5, #1
   13638:	mov	r0, #0
   1363c:	bl	11558 <close@plt>
   13640:	mov	r1, #0
   13644:	mov	r0, r5
   13648:	bl	158a0 <__assert_fail@plt+0x4330>
   1364c:	subs	r8, r0, #0
   13650:	blt	13770 <__assert_fail@plt+0x2200>
   13654:	beq	1367c <__assert_fail@plt+0x210c>
   13658:	mov	r1, #0
   1365c:	bl	11270 <dup2@plt>
   13660:	cmp	r0, #0
   13664:	movwne	r1, #49072	; 0xbfb0
   13668:	ldrne	r4, [r7]
   1366c:	movtne	r1, #1
   13670:	bne	136f0 <__assert_fail@plt+0x2180>
   13674:	mov	r0, r8
   13678:	bl	11558 <close@plt>
   1367c:	mov	r0, r6
   13680:	bl	14acc <__assert_fail@plt+0x355c>
   13684:	cmp	r0, #0
   13688:	beq	137b4 <__assert_fail@plt+0x2244>
   1368c:	mov	r3, #7
   13690:	str	r3, [r7]
   13694:	mov	r2, #4
   13698:	mov	r1, r7
   1369c:	ldr	r0, [sp, #8]
   136a0:	bl	1142c <write@plt>
   136a4:	ldr	r0, [sp, #8]
   136a8:	bl	11558 <close@plt>
   136ac:	ldr	r1, [r7]
   136b0:	cmp	r1, #7
   136b4:	beq	137ac <__assert_fail@plt+0x223c>
   136b8:	movw	r2, #52888	; 0xce98
   136bc:	movt	r2, #1
   136c0:	ldr	r3, [r6]
   136c4:	mov	r0, #0
   136c8:	bl	11324 <error@plt>
   136cc:	ldr	r3, [r7]
   136d0:	cmp	r3, #2
   136d4:	bne	137ac <__assert_fail@plt+0x223c>
   136d8:	mov	r0, #127	; 0x7f
   136dc:	bl	11210 <_exit@plt>
   136e0:	bl	113f0 <__errno_location@plt>
   136e4:	movw	r1, #49016	; 0xbf78
   136e8:	movt	r1, #1
   136ec:	ldr	r4, [r0]
   136f0:	mov	r2, #5
   136f4:	mov	r0, #0
   136f8:	bl	11258 <dcgettext@plt>
   136fc:	mov	r2, r0
   13700:	mov	r1, r4
   13704:	mov	r0, #1
   13708:	bl	11324 <error@plt>
   1370c:	bl	113f0 <__errno_location@plt>
   13710:	movw	r1, #48980	; 0xbf54
   13714:	movt	r1, #1
   13718:	b	136ec <__assert_fail@plt+0x217c>
   1371c:	bl	150a0 <__assert_fail@plt+0x3b30>
   13720:	b	135cc <__assert_fail@plt+0x205c>
   13724:	ldr	r8, [r7]
   13728:	mov	r2, #5
   1372c:	movw	r1, #49032	; 0xbf88
   13730:	movt	r1, #1
   13734:	mov	r0, #0
   13738:	bl	11258 <dcgettext@plt>
   1373c:	mov	r2, r0
   13740:	mov	r3, r5
   13744:	mov	r0, #0
   13748:	mov	r1, r8
   1374c:	bl	11324 <error@plt>
   13750:	b	13618 <__assert_fail@plt+0x20a8>
   13754:	movw	r3, #48968	; 0xbf48
   13758:	movt	r3, #1
   1375c:	cmp	r2, #0
   13760:	movw	r5, #48884	; 0xbef4
   13764:	movt	r5, #1
   13768:	moveq	r5, r3
   1376c:	b	13638 <__assert_fail@plt+0x20c8>
   13770:	ldrb	r4, [r4, #80]	; 0x50
   13774:	mov	r2, r5
   13778:	mov	r1, #8
   1377c:	ldr	r8, [r7]
   13780:	cmp	r4, #0
   13784:	bne	137d0 <__assert_fail@plt+0x2260>
   13788:	mov	r0, r4
   1378c:	bl	18fec <__assert_fail@plt+0x7a7c>
   13790:	mov	r3, r0
   13794:	mov	r1, r8
   13798:	mov	r0, r4
   1379c:	movw	r2, #52888	; 0xce98
   137a0:	movt	r2, #1
   137a4:	bl	11324 <error@plt>
   137a8:	b	1367c <__assert_fail@plt+0x210c>
   137ac:	mov	r0, #126	; 0x7e
   137b0:	b	136dc <__assert_fail@plt+0x216c>
   137b4:	mov	r1, r6
   137b8:	ldr	r0, [r6]
   137bc:	bl	11228 <execvp@plt>
   137c0:	ldr	r3, [r7]
   137c4:	cmp	r3, #0
   137c8:	beq	136a4 <__assert_fail@plt+0x2134>
   137cc:	b	13694 <__assert_fail@plt+0x2124>
   137d0:	mov	r0, #0
   137d4:	bl	18fec <__assert_fail@plt+0x7a7c>
   137d8:	mov	r3, r0
   137dc:	movw	r2, #52888	; 0xce98
   137e0:	movt	r2, #1
   137e4:	mov	r1, r8
   137e8:	mov	r0, #1
   137ec:	bl	11324 <error@plt>
   137f0:	movw	r3, #57700	; 0xe164
   137f4:	movt	r3, #2
   137f8:	ldr	r2, [r3]
   137fc:	cmp	r2, #1
   13800:	ble	13810 <__assert_fail@plt+0x22a0>
   13804:	ldr	r2, [r3]
   13808:	sub	r2, r2, #1
   1380c:	str	r2, [r3]
   13810:	bx	lr
   13814:	movw	r0, #57832	; 0xe1e8
   13818:	movt	r0, #2
   1381c:	ldr	r3, [r0, #112]	; 0x70
   13820:	cmp	r3, #0
   13824:	beq	1382c <__assert_fail@plt+0x22bc>
   13828:	bx	lr
   1382c:	movw	r3, #57700	; 0xe164
   13830:	movt	r3, #2
   13834:	ldrb	r3, [r3, #4]
   13838:	cmp	r3, #0
   1383c:	bne	13828 <__assert_fail@plt+0x22b8>
   13840:	ldr	r2, [r0, #16]
   13844:	ldr	r3, [r0, #116]	; 0x74
   13848:	cmp	r2, r3
   1384c:	beq	13828 <__assert_fail@plt+0x22b8>
   13850:	ldr	r3, [r0, #88]	; 0x58
   13854:	cmp	r3, #0
   13858:	bne	13828 <__assert_fail@plt+0x22b8>
   1385c:	add	r1, r0, #16
   13860:	add	r0, r0, #88	; 0x58
   13864:	b	14588 <__assert_fail@plt+0x3018>
   13868:	strd	r4, [sp, #-16]!
   1386c:	movw	r5, #57832	; 0xe1e8
   13870:	movt	r5, #2
   13874:	str	r6, [sp, #8]
   13878:	ldrb	r2, [r5, #136]	; 0x88
   1387c:	str	lr, [sp, #12]
   13880:	sub	sp, sp, #16
   13884:	ldr	r6, [r5, #100]	; 0x64
   13888:	ldr	r3, [r5, #36]	; 0x24
   1388c:	cmp	r2, #0
   13890:	ldr	r4, [r5, #132]	; 0x84
   13894:	sub	r6, r6, #1
   13898:	sub	r6, r6, r3
   1389c:	add	r6, r4, r6
   138a0:	beq	138c0 <__assert_fail@plt+0x2350>
   138a4:	b	13964 <__assert_fail@plt+0x23f4>
   138a8:	ldrb	r3, [r5, #144]	; 0x90
   138ac:	cmp	r3, r0
   138b0:	beq	13914 <__assert_fail@plt+0x23a4>
   138b4:	cmp	r4, r6
   138b8:	bcs	1396c <__assert_fail@plt+0x23fc>
   138bc:	strb	r0, [r4], #1
   138c0:	ldr	r0, [r5, #140]	; 0x8c
   138c4:	bl	1154c <getc@plt>
   138c8:	cmn	r0, #1
   138cc:	bne	138a8 <__assert_fail@plt+0x2338>
   138d0:	ldr	r2, [r5, #132]	; 0x84
   138d4:	mov	r3, #1
   138d8:	strb	r3, [r5, #136]	; 0x88
   138dc:	cmp	r2, r4
   138e0:	beq	13964 <__assert_fail@plt+0x23f4>
   138e4:	mov	r3, #0
   138e8:	strb	r3, [r4], #1
   138ec:	sub	r4, r4, r2
   138f0:	ldr	r0, [r5, #112]	; 0x70
   138f4:	cmp	r0, r3
   138f8:	beq	1393c <__assert_fail@plt+0x23cc>
   138fc:	mov	r0, r4
   13900:	add	sp, sp, #16
   13904:	ldrd	r4, [sp]
   13908:	ldr	r6, [sp, #8]
   1390c:	add	sp, sp, #12
   13910:	pop	{pc}		; (ldr pc, [sp], #4)
   13914:	mov	r2, #0
   13918:	ldr	r3, [r5, #148]	; 0x94
   1391c:	strb	r2, [r4], #1
   13920:	ldr	r0, [r5, #112]	; 0x70
   13924:	ldr	r2, [r5, #132]	; 0x84
   13928:	add	r3, r3, #1
   1392c:	str	r3, [r5, #148]	; 0x94
   13930:	cmp	r0, #0
   13934:	sub	r4, r4, r2
   13938:	bne	138fc <__assert_fail@plt+0x238c>
   1393c:	movw	ip, #57700	; 0xe164
   13940:	movt	ip, #2
   13944:	ldr	r1, [pc, #72]	; 13994 <__assert_fail@plt+0x2424>
   13948:	str	r0, [sp]
   1394c:	mov	r3, r4
   13950:	ldrb	ip, [ip, #4]
   13954:	stmib	sp, {r0, ip}
   13958:	add	r0, r1, #72	; 0x48
   1395c:	bl	140f0 <__assert_fail@plt+0x2b80>
   13960:	b	138fc <__assert_fail@plt+0x238c>
   13964:	mvn	r4, #0
   13968:	b	138fc <__assert_fail@plt+0x238c>
   1396c:	bl	13814 <__assert_fail@plt+0x22a4>
   13970:	mov	r2, #5
   13974:	movw	r1, #49300	; 0xc094
   13978:	movt	r1, #1
   1397c:	mov	r0, #0
   13980:	bl	11258 <dcgettext@plt>
   13984:	mov	r2, r0
   13988:	mov	r1, #0
   1398c:	mov	r0, #1
   13990:	bl	11324 <error@plt>
   13994:	strdeq	lr, [r2], -r8
   13998:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1399c:	strd	r6, [sp, #8]
   139a0:	movw	r6, #57832	; 0xe1e8
   139a4:	movt	r6, #2
   139a8:	strd	r8, [sp, #16]
   139ac:	strd	sl, [sp, #24]
   139b0:	ldr	r8, [r6, #100]	; 0x64
   139b4:	str	lr, [sp, #32]
   139b8:	sub	sp, sp, #28
   139bc:	ldrb	sl, [r6, #152]	; 0x98
   139c0:	ldr	r3, [r6, #36]	; 0x24
   139c4:	sub	r8, r8, #1
   139c8:	ldr	r4, [r6, #132]	; 0x84
   139cc:	cmp	sl, #0
   139d0:	sub	r8, r8, r3
   139d4:	add	r8, r4, r8
   139d8:	bne	13b4c <__assert_fail@plt+0x25dc>
   139dc:	ldr	r0, [r6, #140]	; 0x8c
   139e0:	bl	1154c <getc@plt>
   139e4:	cmn	r0, #1
   139e8:	mov	r5, r0
   139ec:	movne	r9, #1
   139f0:	mvnne	fp, #0
   139f4:	beq	13f30 <__assert_fail@plt+0x29c0>
   139f8:	bics	r3, r5, #127	; 0x7f
   139fc:	bne	13a44 <__assert_fail@plt+0x24d4>
   13a00:	bl	11390 <__ctype_b_loc@plt>
   13a04:	ldr	r0, [r0]
   13a08:	lsl	r2, r5, #1
   13a0c:	ldrh	r2, [r0, r2]
   13a10:	tst	r2, #1
   13a14:	bne	13a24 <__assert_fail@plt+0x24b4>
   13a18:	cmp	r5, #13
   13a1c:	cmpne	r5, #10
   13a20:	bne	13a44 <__assert_fail@plt+0x24d4>
   13a24:	ldr	r0, [r6, #140]	; 0x8c
   13a28:	bl	1154c <getc@plt>
   13a2c:	cmn	r0, #1
   13a30:	beq	13ee8 <__assert_fail@plt+0x2978>
   13a34:	mov	fp, r5
   13a38:	mov	r5, r0
   13a3c:	bics	r3, r5, #127	; 0x7f
   13a40:	beq	13a00 <__assert_fail@plt+0x2490>
   13a44:	sub	r2, r5, #11
   13a48:	cmp	r2, #1
   13a4c:	bls	13a24 <__assert_fail@plt+0x24b4>
   13a50:	movw	r3, #49428	; 0xc114
   13a54:	movt	r3, #1
   13a58:	str	r3, [sp, #20]
   13a5c:	mov	r7, #1
   13a60:	cmp	r5, #10
   13a64:	beq	13ad0 <__assert_fail@plt+0x2560>
   13a68:	ldr	r3, [r6, #112]	; 0x70
   13a6c:	cmp	r3, #0
   13a70:	beq	13d0c <__assert_fail@plt+0x279c>
   13a74:	cmp	r5, #39	; 0x27
   13a78:	beq	13c08 <__assert_fail@plt+0x2698>
   13a7c:	cmp	r5, #92	; 0x5c
   13a80:	beq	13bb8 <__assert_fail@plt+0x2648>
   13a84:	cmp	r5, #34	; 0x22
   13a88:	beq	13c08 <__assert_fail@plt+0x2698>
   13a8c:	cmp	r5, #0
   13a90:	bne	13dac <__assert_fail@plt+0x283c>
   13a94:	ldr	r3, [r6, #160]	; 0xa0
   13a98:	cmp	r3, #0
   13a9c:	beq	13eb8 <__assert_fail@plt+0x2948>
   13aa0:	cmp	r8, r4
   13aa4:	bls	13e90 <__assert_fail@plt+0x2920>
   13aa8:	strb	r5, [r4], #1
   13aac:	mov	fp, r5
   13ab0:	mov	sl, #1
   13ab4:	ldr	r0, [r6, #140]	; 0x8c
   13ab8:	bl	1154c <getc@plt>
   13abc:	cmn	r0, #1
   13ac0:	beq	13ee8 <__assert_fail@plt+0x2978>
   13ac4:	mov	r5, r0
   13ac8:	cmp	r5, #10
   13acc:	bne	13a68 <__assert_fail@plt+0x24f8>
   13ad0:	bics	r3, fp, #127	; 0x7f
   13ad4:	bne	13ba8 <__assert_fail@plt+0x2638>
   13ad8:	bl	11390 <__ctype_b_loc@plt>
   13adc:	ldr	r2, [r0]
   13ae0:	lsl	r3, fp, #1
   13ae4:	ldrh	r3, [r2, r3]
   13ae8:	tst	r3, #1
   13aec:	beq	13ba8 <__assert_fail@plt+0x2638>
   13af0:	ldr	r7, [r6, #132]	; 0x84
   13af4:	cmp	r7, r4
   13af8:	orrne	sl, sl, #1
   13afc:	cmp	sl, #0
   13b00:	beq	13e4c <__assert_fail@plt+0x28dc>
   13b04:	ldr	r0, [r6, #156]	; 0x9c
   13b08:	mov	r3, #0
   13b0c:	strb	r3, [r4], #1
   13b10:	sub	r4, r4, r7
   13b14:	cmp	r0, r3
   13b18:	beq	13b70 <__assert_fail@plt+0x2600>
   13b1c:	ldrb	r2, [r0]
   13b20:	ldrb	r3, [r7]
   13b24:	cmp	r2, r3
   13b28:	bne	13b70 <__assert_fail@plt+0x2600>
   13b2c:	mov	r1, r7
   13b30:	bl	111b0 <strcmp@plt>
   13b34:	cmp	r0, #0
   13b38:	bne	13b70 <__assert_fail@plt+0x2600>
   13b3c:	mov	r3, #1
   13b40:	cmp	r9, #0
   13b44:	strb	r3, [r6, #152]	; 0x98
   13b48:	beq	13b50 <__assert_fail@plt+0x25e0>
   13b4c:	mvn	r4, #0
   13b50:	mov	r0, r4
   13b54:	add	sp, sp, #28
   13b58:	ldrd	r4, [sp]
   13b5c:	ldrd	r6, [sp, #8]
   13b60:	ldrd	r8, [sp, #16]
   13b64:	ldrd	sl, [sp, #24]
   13b68:	add	sp, sp, #32
   13b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   13b70:	ldr	r0, [r6, #112]	; 0x70
   13b74:	cmp	r0, #0
   13b78:	bne	13b50 <__assert_fail@plt+0x25e0>
   13b7c:	ldr	r1, [pc, #1072]	; 13fb4 <__assert_fail@plt+0x2a44>
   13b80:	movw	ip, #57700	; 0xe164
   13b84:	movt	ip, #2
   13b88:	mov	r2, r7
   13b8c:	str	r0, [sp]
   13b90:	mov	r3, r4
   13b94:	ldrb	ip, [ip, #4]
   13b98:	stmib	sp, {r0, ip}
   13b9c:	add	r0, r1, #72	; 0x48
   13ba0:	bl	140f0 <__assert_fail@plt+0x2b80>
   13ba4:	b	13b50 <__assert_fail@plt+0x25e0>
   13ba8:	ldr	r3, [r6, #148]	; 0x94
   13bac:	add	r3, r3, #1
   13bb0:	str	r3, [r6, #148]	; 0x94
   13bb4:	b	13af0 <__assert_fail@plt+0x2580>
   13bb8:	ldr	r0, [r6, #140]	; 0x8c
   13bbc:	bl	1154c <getc@plt>
   13bc0:	cmn	r0, #1
   13bc4:	mov	fp, r0
   13bc8:	beq	13dec <__assert_fail@plt+0x287c>
   13bcc:	cmp	r0, #0
   13bd0:	bne	13be0 <__assert_fail@plt+0x2670>
   13bd4:	ldr	r2, [r6, #160]	; 0xa0
   13bd8:	cmp	r2, #0
   13bdc:	beq	13e04 <__assert_fail@plt+0x2894>
   13be0:	cmp	r8, r4
   13be4:	bls	13e90 <__assert_fail@plt+0x2920>
   13be8:	strb	fp, [r4], #1
   13bec:	ldr	r0, [r6, #140]	; 0x8c
   13bf0:	bl	1154c <getc@plt>
   13bf4:	cmn	r0, #1
   13bf8:	mov	r5, r0
   13bfc:	beq	13ee8 <__assert_fail@plt+0x2978>
   13c00:	mov	sl, #1
   13c04:	b	13a5c <__assert_fail@plt+0x24ec>
   13c08:	ldr	r0, [r6, #140]	; 0x8c
   13c0c:	bl	1154c <getc@plt>
   13c10:	cmn	r0, #1
   13c14:	mov	fp, r0
   13c18:	beq	13f7c <__assert_fail@plt+0x2a0c>
   13c1c:	cmp	fp, #10
   13c20:	beq	13c70 <__assert_fail@plt+0x2700>
   13c24:	cmp	r5, fp
   13c28:	beq	13dd8 <__assert_fail@plt+0x2868>
   13c2c:	cmp	fp, #0
   13c30:	beq	13cc0 <__assert_fail@plt+0x2750>
   13c34:	cmp	r8, r4
   13c38:	bls	13e90 <__assert_fail@plt+0x2920>
   13c3c:	strb	fp, [r4], #1
   13c40:	ldr	r0, [r6, #140]	; 0x8c
   13c44:	bl	1154c <getc@plt>
   13c48:	cmn	r0, #1
   13c4c:	mov	fp, r0
   13c50:	bne	13c1c <__assert_fail@plt+0x26ac>
   13c54:	ldr	r3, [r6, #132]	; 0x84
   13c58:	mov	r2, #1
   13c5c:	strb	r2, [r6, #152]	; 0x98
   13c60:	cmp	r3, r4
   13c64:	beq	13b4c <__assert_fail@plt+0x25dc>
   13c68:	mov	r3, #0
   13c6c:	strb	r3, [r4]
   13c70:	bl	13814 <__assert_fail@plt+0x22a4>
   13c74:	mov	r2, #5
   13c78:	movw	r1, #49324	; 0xc0ac
   13c7c:	movt	r1, #1
   13c80:	mov	r0, #0
   13c84:	bl	11258 <dcgettext@plt>
   13c88:	cmp	r5, #34	; 0x22
   13c8c:	mov	r4, r0
   13c90:	movweq	r1, #49412	; 0xc104
   13c94:	movwne	r1, #49420	; 0xc10c
   13c98:	movteq	r1, #1
   13c9c:	movtne	r1, #1
   13ca0:	mov	r2, #5
   13ca4:	mov	r0, #0
   13ca8:	bl	11258 <dcgettext@plt>
   13cac:	mov	r3, r0
   13cb0:	mov	r2, r4
   13cb4:	mov	r1, #0
   13cb8:	mov	r0, #1
   13cbc:	bl	11324 <error@plt>
   13cc0:	ldr	r2, [r6, #160]	; 0xa0
   13cc4:	cmp	r2, #0
   13cc8:	beq	13e60 <__assert_fail@plt+0x28f0>
   13ccc:	cmp	r8, r4
   13cd0:	bls	13e90 <__assert_fail@plt+0x2920>
   13cd4:	strb	fp, [r4], #1
   13cd8:	ldr	r0, [r6, #140]	; 0x8c
   13cdc:	bl	1154c <getc@plt>
   13ce0:	cmn	r0, #1
   13ce4:	mov	fp, r0
   13ce8:	bne	13c1c <__assert_fail@plt+0x26ac>
   13cec:	ldr	r3, [r6, #132]	; 0x84
   13cf0:	mov	r2, #1
   13cf4:	strb	r2, [r6, #152]	; 0x98
   13cf8:	cmp	r3, r4
   13cfc:	beq	13b4c <__assert_fail@plt+0x25dc>
   13d00:	mov	r3, #0
   13d04:	strb	r3, [r4]
   13d08:	b	13c70 <__assert_fail@plt+0x2700>
   13d0c:	bics	sl, r5, #127	; 0x7f
   13d10:	bne	13a74 <__assert_fail@plt+0x2504>
   13d14:	bl	11390 <__ctype_b_loc@plt>
   13d18:	ldr	r1, [r0]
   13d1c:	lsl	r2, r5, #1
   13d20:	ldrh	r2, [r1, r2]
   13d24:	tst	r2, #1
   13d28:	beq	13a74 <__assert_fail@plt+0x2504>
   13d2c:	ldr	r7, [r6, #132]	; 0x84
   13d30:	strb	sl, [r4], #1
   13d34:	ldr	r0, [r6, #156]	; 0x9c
   13d38:	sub	r4, r4, r7
   13d3c:	cmp	r0, #0
   13d40:	beq	13d64 <__assert_fail@plt+0x27f4>
   13d44:	ldrb	r2, [r0]
   13d48:	ldrb	r3, [r7]
   13d4c:	cmp	r2, r3
   13d50:	bne	13d64 <__assert_fail@plt+0x27f4>
   13d54:	mov	r1, r7
   13d58:	bl	111b0 <strcmp@plt>
   13d5c:	cmp	r0, #0
   13d60:	beq	13b3c <__assert_fail@plt+0x25cc>
   13d64:	movw	r2, #57700	; 0xe164
   13d68:	movt	r2, #2
   13d6c:	ldr	r1, [pc, #576]	; 13fb4 <__assert_fail@plt+0x2a44>
   13d70:	mov	r9, #0
   13d74:	mov	r3, r4
   13d78:	ldrb	ip, [r2, #4]
   13d7c:	mov	r2, r7
   13d80:	str	r9, [sp]
   13d84:	add	r0, r1, #72	; 0x48
   13d88:	stmib	sp, {r9, ip}
   13d8c:	bl	140f0 <__assert_fail@plt+0x2b80>
   13d90:	ldr	r4, [r6, #132]	; 0x84
   13d94:	ldr	r0, [r6, #140]	; 0x8c
   13d98:	bl	1154c <getc@plt>
   13d9c:	cmn	r0, #1
   13da0:	beq	13f94 <__assert_fail@plt+0x2a24>
   13da4:	mov	sl, #1
   13da8:	b	13a34 <__assert_fail@plt+0x24c4>
   13dac:	cmp	r8, r4
   13db0:	bls	13e90 <__assert_fail@plt+0x2920>
   13db4:	strb	r5, [r4], #1
   13db8:	ldr	r0, [r6, #140]	; 0x8c
   13dbc:	bl	1154c <getc@plt>
   13dc0:	cmn	r0, #1
   13dc4:	beq	13dec <__assert_fail@plt+0x287c>
   13dc8:	mov	fp, r5
   13dcc:	mov	sl, #1
   13dd0:	mov	r5, r0
   13dd4:	b	13a60 <__assert_fail@plt+0x24f0>
   13dd8:	ldr	r0, [r6, #140]	; 0x8c
   13ddc:	bl	1154c <getc@plt>
   13de0:	cmn	r0, #1
   13de4:	mov	r5, r0
   13de8:	bne	13c00 <__assert_fail@plt+0x2690>
   13dec:	ldr	r5, [r6, #132]	; 0x84
   13df0:	mov	r3, #1
   13df4:	strb	r3, [r6, #152]	; 0x98
   13df8:	cmp	r4, r5
   13dfc:	bne	13efc <__assert_fail@plt+0x298c>
   13e00:	b	13b4c <__assert_fail@plt+0x25dc>
   13e04:	mov	r2, #5
   13e08:	ldr	r1, [sp, #20]
   13e0c:	mov	sl, #1
   13e10:	bl	11258 <dcgettext@plt>
   13e14:	mov	r2, r0
   13e18:	mov	r1, fp
   13e1c:	mov	r0, fp
   13e20:	bl	11324 <error@plt>
   13e24:	cmp	r8, r4
   13e28:	str	sl, [r6, #160]	; 0xa0
   13e2c:	bls	13e90 <__assert_fail@plt+0x2920>
   13e30:	strb	fp, [r4], #1
   13e34:	ldr	r0, [r6, #140]	; 0x8c
   13e38:	bl	1154c <getc@plt>
   13e3c:	cmn	r0, #1
   13e40:	mov	r5, r0
   13e44:	bne	13a5c <__assert_fail@plt+0x24ec>
   13e48:	b	13dec <__assert_fail@plt+0x287c>
   13e4c:	ldr	r0, [r6, #140]	; 0x8c
   13e50:	bl	1154c <getc@plt>
   13e54:	cmn	r0, #1
   13e58:	bne	13a34 <__assert_fail@plt+0x24c4>
   13e5c:	b	13dec <__assert_fail@plt+0x287c>
   13e60:	mov	r2, #5
   13e64:	mov	r0, fp
   13e68:	ldr	r1, [sp, #20]
   13e6c:	bl	11258 <dcgettext@plt>
   13e70:	mov	r2, r0
   13e74:	mov	r1, fp
   13e78:	mov	r0, fp
   13e7c:	bl	11324 <error@plt>
   13e80:	mov	r2, #1
   13e84:	cmp	r8, r4
   13e88:	str	r2, [r6, #160]	; 0xa0
   13e8c:	bhi	13c3c <__assert_fail@plt+0x26cc>
   13e90:	bl	13814 <__assert_fail@plt+0x22a4>
   13e94:	mov	r2, #5
   13e98:	movw	r1, #49300	; 0xc094
   13e9c:	movt	r1, #1
   13ea0:	mov	r0, #0
   13ea4:	bl	11258 <dcgettext@plt>
   13ea8:	mov	r2, r0
   13eac:	mov	r1, #0
   13eb0:	mov	r0, #1
   13eb4:	bl	11324 <error@plt>
   13eb8:	mov	r2, #5
   13ebc:	mov	r0, r5
   13ec0:	ldr	r1, [sp, #20]
   13ec4:	bl	11258 <dcgettext@plt>
   13ec8:	mov	r2, r0
   13ecc:	mov	r1, r5
   13ed0:	mov	r0, r5
   13ed4:	bl	11324 <error@plt>
   13ed8:	cmp	r8, r4
   13edc:	str	r7, [r6, #160]	; 0xa0
   13ee0:	bhi	13db4 <__assert_fail@plt+0x2844>
   13ee4:	b	13e90 <__assert_fail@plt+0x2920>
   13ee8:	ldr	r5, [r6, #132]	; 0x84
   13eec:	mov	r3, #1
   13ef0:	strb	r3, [r6, #152]	; 0x98
   13ef4:	cmp	r5, r4
   13ef8:	beq	13b4c <__assert_fail@plt+0x25dc>
   13efc:	mov	r3, #0
   13f00:	cmp	r9, #0
   13f04:	strb	r3, [r4], #1
   13f08:	sub	r4, r4, r5
   13f0c:	bne	13f4c <__assert_fail@plt+0x29dc>
   13f10:	ldr	r0, [r6, #112]	; 0x70
   13f14:	cmp	r0, #0
   13f18:	bne	13b50 <__assert_fail@plt+0x25e0>
   13f1c:	movw	ip, #57700	; 0xe164
   13f20:	movt	ip, #2
   13f24:	ldr	r1, [pc, #136]	; 13fb4 <__assert_fail@plt+0x2a44>
   13f28:	mov	r2, r5
   13f2c:	b	13b8c <__assert_fail@plt+0x261c>
   13f30:	ldr	r5, [r6, #132]	; 0x84
   13f34:	mov	r3, #1
   13f38:	strb	r3, [r6, #152]	; 0x98
   13f3c:	cmp	r5, r4
   13f40:	beq	13b4c <__assert_fail@plt+0x25dc>
   13f44:	strb	sl, [r4], #1
   13f48:	sub	r4, r4, r5
   13f4c:	ldr	r0, [r6, #156]	; 0x9c
   13f50:	cmp	r0, #0
   13f54:	beq	13f10 <__assert_fail@plt+0x29a0>
   13f58:	ldrb	r2, [r0]
   13f5c:	ldrb	r3, [r5]
   13f60:	cmp	r2, r3
   13f64:	bne	13f10 <__assert_fail@plt+0x29a0>
   13f68:	mov	r1, r5
   13f6c:	bl	111b0 <strcmp@plt>
   13f70:	cmp	r0, #0
   13f74:	bne	13f10 <__assert_fail@plt+0x29a0>
   13f78:	b	13b4c <__assert_fail@plt+0x25dc>
   13f7c:	ldr	r3, [r6, #132]	; 0x84
   13f80:	mov	r2, #1
   13f84:	strb	r2, [r6, #152]	; 0x98
   13f88:	cmp	r4, r3
   13f8c:	beq	13b4c <__assert_fail@plt+0x25dc>
   13f90:	b	13c68 <__assert_fail@plt+0x26f8>
   13f94:	ldr	r5, [r6, #132]	; 0x84
   13f98:	mov	r3, #1
   13f9c:	strb	r3, [r6, #152]	; 0x98
   13fa0:	cmp	r4, r5
   13fa4:	strbne	r9, [r4], #1
   13fa8:	subne	r4, r4, r5
   13fac:	bne	13f10 <__assert_fail@plt+0x29a0>
   13fb0:	b	13b4c <__assert_fail@plt+0x25dc>
   13fb4:	strdeq	lr, [r2], -r8
   13fb8:	strd	r4, [sp, #-16]!
   13fbc:	movw	r4, #57832	; 0xe1e8
   13fc0:	movt	r4, #2
   13fc4:	str	r6, [sp, #8]
   13fc8:	str	lr, [sp, #12]
   13fcc:	bl	1139c <getpid@plt>
   13fd0:	ldr	r3, [r4, #164]	; 0xa4
   13fd4:	cmp	r0, r3
   13fd8:	bne	14028 <__assert_fail@plt+0x2ab8>
   13fdc:	ldrb	r5, [r4, #168]	; 0xa8
   13fe0:	cmp	r5, #0
   13fe4:	beq	13ff8 <__assert_fail@plt+0x2a88>
   13fe8:	ldrd	r4, [sp]
   13fec:	ldr	r6, [sp, #8]
   13ff0:	add	sp, sp, #12
   13ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ff8:	mov	r3, #1
   13ffc:	mov	r1, r5
   14000:	mov	r0, r3
   14004:	strb	r3, [r4, #168]	; 0xa8
   14008:	bl	12924 <__assert_fail@plt+0x13b4>
   1400c:	ldr	r2, [r4, #172]	; 0xac
   14010:	strb	r5, [r4, #168]	; 0xa8
   14014:	ldr	r3, [r4, #60]	; 0x3c
   14018:	cmp	r2, r3
   1401c:	beq	13fe8 <__assert_fail@plt+0x2a78>
   14020:	ldr	r0, [r4, #60]	; 0x3c
   14024:	bl	11210 <_exit@plt>
   14028:	movw	r1, #45780	; 0xb2d4
   1402c:	movt	r1, #1
   14030:	ldr	r3, [pc, #12]	; 14044 <__assert_fail@plt+0x2ad4>
   14034:	movw	r0, #49568	; 0xc1a0
   14038:	movt	r0, #1
   1403c:	movw	r2, #1605	; 0x645
   14040:	bl	11570 <__assert_fail@plt>
   14044:	andeq	fp, r1, r8, rrx
   14048:	mov	r0, #0
   1404c:	bx	lr
   14050:	strd	r4, [sp, #-16]!
   14054:	mov	r4, r1
   14058:	str	r6, [sp, #8]
   1405c:	mov	r6, r0
   14060:	str	lr, [sp, #12]
   14064:	sub	sp, sp, #16
   14068:	bl	11348 <getenv@plt>
   1406c:	subs	r3, r0, #0
   14070:	beq	140b8 <__assert_fail@plt+0x2b48>
   14074:	mov	r5, #0
   14078:	add	r3, sp, #12
   1407c:	mov	r2, #10
   14080:	add	r1, sp, #8
   14084:	str	r5, [sp]
   14088:	bl	19eec <__assert_fail@plt+0x897c>
   1408c:	cmp	r0, r5
   14090:	bne	140c0 <__assert_fail@plt+0x2b50>
   14094:	ldr	r0, [sp, #12]
   14098:	cmp	r0, r4
   1409c:	movcs	r0, #0
   140a0:	movcc	r0, #1
   140a4:	add	sp, sp, #16
   140a8:	ldrd	r4, [sp]
   140ac:	ldr	r6, [sp, #8]
   140b0:	add	sp, sp, #12
   140b4:	pop	{pc}		; (ldr pc, [sp], #4)
   140b8:	mov	r0, r3
   140bc:	b	140a4 <__assert_fail@plt+0x2b34>
   140c0:	bl	113f0 <__errno_location@plt>
   140c4:	ldr	r4, [r0]
   140c8:	mov	r2, #5
   140cc:	movw	r1, #51612	; 0xc99c
   140d0:	movt	r1, #1
   140d4:	mov	r0, r5
   140d8:	bl	11258 <dcgettext@plt>
   140dc:	mov	r2, r0
   140e0:	mov	r3, r6
   140e4:	mov	r0, #1
   140e8:	mov	r1, r4
   140ec:	bl	11324 <error@plt>
   140f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   140f4:	strd	r6, [sp, #8]
   140f8:	str	sl, [sp, #24]
   140fc:	subs	sl, r2, #0
   14100:	strd	r8, [sp, #16]
   14104:	str	lr, [sp, #28]
   14108:	ldr	r9, [sp, #36]	; 0x24
   1410c:	ldr	r7, [sp, #40]	; 0x28
   14110:	beq	14360 <__assert_fail@plt+0x2df0>
   14114:	movw	r6, #51700	; 0xc9f4
   14118:	movt	r6, #1
   1411c:	cmp	sl, r6
   14120:	mov	r5, r0
   14124:	mov	r4, r1
   14128:	mov	r8, r3
   1412c:	beq	141d4 <__assert_fail@plt+0x2c64>
   14130:	add	r2, r3, r9
   14134:	ldr	r3, [r1, #16]
   14138:	ldr	r1, [r0, #12]
   1413c:	add	r2, r2, r3
   14140:	cmp	r2, r1
   14144:	bls	142ec <__assert_fail@plt+0x2d7c>
   14148:	cmp	r7, #0
   1414c:	bne	14380 <__assert_fail@plt+0x2e10>
   14150:	ldr	r2, [r4]
   14154:	ldr	r3, [r0, #28]
   14158:	cmp	r2, r3
   1415c:	beq	14380 <__assert_fail@plt+0x2e10>
   14160:	ldr	r3, [r0, #24]
   14164:	cmp	r3, #0
   14168:	bne	143a4 <__assert_fail@plt+0x2e34>
   1416c:	ldr	r3, [r0]
   14170:	cmp	r3, #0
   14174:	beq	14190 <__assert_fail@plt+0x2c20>
   14178:	ldr	r3, [r0, #36]	; 0x24
   1417c:	cmp	r3, #0
   14180:	bne	143a4 <__assert_fail@plt+0x2e34>
   14184:	ldr	r3, [r0, #40]	; 0x28
   14188:	cmp	r3, #0
   1418c:	bne	143a4 <__assert_fail@plt+0x2e34>
   14190:	mov	r1, r4
   14194:	mov	r0, r5
   14198:	bl	14588 <__assert_fail@plt+0x3018>
   1419c:	ldr	r2, [r4]
   141a0:	ldr	r3, [r5, #40]	; 0x28
   141a4:	cmp	r3, #0
   141a8:	beq	141bc <__assert_fail@plt+0x2c4c>
   141ac:	ldr	r1, [r5, #28]
   141b0:	sub	r1, r2, r1
   141b4:	cmp	r3, r1
   141b8:	beq	141c8 <__assert_fail@plt+0x2c58>
   141bc:	ldr	r3, [r5, #16]
   141c0:	cmp	r3, r2
   141c4:	bne	141dc <__assert_fail@plt+0x2c6c>
   141c8:	mov	r1, r4
   141cc:	mov	r0, r5
   141d0:	bl	14588 <__assert_fail@plt+0x3018>
   141d4:	cmp	r7, #0
   141d8:	bne	141e4 <__assert_fail@plt+0x2c74>
   141dc:	mov	r3, #1
   141e0:	str	r3, [r4, #28]
   141e4:	ldr	r3, [r4]
   141e8:	ldrd	r0, [r4, #4]
   141ec:	cmp	r3, r1
   141f0:	bcs	142c8 <__assert_fail@plt+0x2d58>
   141f4:	cmp	sl, r6
   141f8:	add	r1, r0, r3, lsl #2
   141fc:	add	r2, r3, #1
   14200:	moveq	r1, #0
   14204:	streq	r2, [r4]
   14208:	streq	r1, [r0, r3, lsl #2]
   1420c:	beq	142a8 <__assert_fail@plt+0x2d38>
   14210:	ldr	r3, [r4, #16]
   14214:	str	r2, [r4]
   14218:	ldr	r2, [r4, #12]
   1421c:	ldr	r0, [sp, #32]
   14220:	add	r2, r2, r3
   14224:	cmp	r0, #0
   14228:	str	r2, [r1]
   1422c:	beq	1424c <__assert_fail@plt+0x2cdc>
   14230:	ldr	r0, [r4, #12]
   14234:	ldr	r1, [sp, #32]
   14238:	add	r0, r0, r3
   1423c:	bl	11300 <strcpy@plt>
   14240:	ldr	r3, [r4, #16]
   14244:	add	r3, r9, r3
   14248:	str	r3, [r4, #16]
   1424c:	ldr	r0, [r4, #12]
   14250:	mov	r1, sl
   14254:	add	r0, r0, r3
   14258:	bl	11300 <strcpy@plt>
   1425c:	cmp	r7, #0
   14260:	ldr	r2, [r4]
   14264:	ldr	r3, [r4, #16]
   14268:	add	r8, r8, r3
   1426c:	str	r8, [r4, #16]
   14270:	bne	1431c <__assert_fail@plt+0x2dac>
   14274:	ldr	r3, [r5, #40]	; 0x28
   14278:	cmp	r3, #0
   1427c:	beq	14290 <__assert_fail@plt+0x2d20>
   14280:	ldr	r1, [r5, #28]
   14284:	sub	r1, r2, r1
   14288:	cmp	r3, r1
   1428c:	beq	1429c <__assert_fail@plt+0x2d2c>
   14290:	ldr	r3, [r5, #16]
   14294:	cmp	r2, r3
   14298:	bne	142b0 <__assert_fail@plt+0x2d40>
   1429c:	mov	r0, r5
   142a0:	mov	r1, r4
   142a4:	bl	14588 <__assert_fail@plt+0x3018>
   142a8:	cmp	r7, #0
   142ac:	bne	14338 <__assert_fail@plt+0x2dc8>
   142b0:	ldrd	r4, [sp]
   142b4:	ldrd	r6, [sp, #8]
   142b8:	ldrd	r8, [sp, #16]
   142bc:	ldr	sl, [sp, #24]
   142c0:	add	sp, sp, #28
   142c4:	pop	{pc}		; (ldr pc, [sp], #4)
   142c8:	cmp	r0, #0
   142cc:	beq	14344 <__assert_fail@plt+0x2dd4>
   142d0:	lsl	r3, r1, #1
   142d4:	lsl	r1, r1, #3
   142d8:	str	r3, [r4, #8]
   142dc:	bl	19a9c <__assert_fail@plt+0x852c>
   142e0:	str	r0, [r4, #4]
   142e4:	ldr	r3, [r4]
   142e8:	b	141f4 <__assert_fail@plt+0x2c84>
   142ec:	cmp	r7, #0
   142f0:	ldr	r2, [r4]
   142f4:	beq	141a0 <__assert_fail@plt+0x2c30>
   142f8:	ldr	r1, [r0, #16]
   142fc:	cmp	r2, r1
   14300:	beq	141c8 <__assert_fail@plt+0x2c58>
   14304:	ldrd	r0, [r4, #4]
   14308:	cmp	r2, r1
   1430c:	bcs	142c8 <__assert_fail@plt+0x2d58>
   14310:	add	r1, r0, r2, lsl #2
   14314:	add	r2, r2, #1
   14318:	b	14214 <__assert_fail@plt+0x2ca4>
   1431c:	ldr	r3, [r5, #16]
   14320:	cmp	r2, r3
   14324:	bne	1433c <__assert_fail@plt+0x2dcc>
   14328:	mov	r0, r5
   1432c:	mov	r1, r4
   14330:	bl	14588 <__assert_fail@plt+0x3018>
   14334:	b	142a8 <__assert_fail@plt+0x2d38>
   14338:	ldr	r8, [r4, #16]
   1433c:	str	r8, [r4, #20]
   14340:	b	142b0 <__assert_fail@plt+0x2d40>
   14344:	mov	r3, #64	; 0x40
   14348:	mov	r0, #256	; 0x100
   1434c:	str	r3, [r4, #8]
   14350:	bl	19a30 <__assert_fail@plt+0x84c0>
   14354:	str	r0, [r4, #4]
   14358:	ldr	r3, [r4]
   1435c:	b	141f4 <__assert_fail@plt+0x2c84>
   14360:	movw	r3, #51540	; 0xc954
   14364:	movt	r3, #1
   14368:	movw	r1, #51676	; 0xc9dc
   1436c:	movt	r1, #1
   14370:	movw	r0, #51688	; 0xc9e8
   14374:	movt	r0, #1
   14378:	movw	r2, #341	; 0x155
   1437c:	bl	11570 <__assert_fail@plt>
   14380:	movw	r1, #51712	; 0xca00
   14384:	movt	r1, #1
   14388:	mov	r2, #5
   1438c:	mov	r0, #0
   14390:	bl	11258 <dcgettext@plt>
   14394:	mov	r2, r0
   14398:	mov	r1, #0
   1439c:	mov	r0, #1
   143a0:	bl	11324 <error@plt>
   143a4:	movw	r1, #51772	; 0xca3c
   143a8:	movt	r1, #1
   143ac:	b	14388 <__assert_fail@plt+0x2e18>
   143b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   143b4:	movw	r5, #58008	; 0xe298
   143b8:	movt	r5, #2
   143bc:	strd	r6, [sp, #8]
   143c0:	mov	r7, r3
   143c4:	mov	r4, r2
   143c8:	strd	r8, [sp, #16]
   143cc:	mov	r9, r0
   143d0:	strd	sl, [sp, #24]
   143d4:	str	lr, [sp, #32]
   143d8:	sub	sp, sp, #36	; 0x24
   143dc:	ldr	r0, [r0, #12]
   143e0:	str	r1, [sp, #24]
   143e4:	ldr	r3, [sp, #76]	; 0x4c
   143e8:	ldr	r1, [r5]
   143ec:	sub	r6, r0, #1
   143f0:	ldr	ip, [sp, #72]	; 0x48
   143f4:	cmp	r1, #0
   143f8:	str	r3, [sp, #16]
   143fc:	ldr	r3, [sp, #80]	; 0x50
   14400:	str	ip, [sp, #8]
   14404:	str	r3, [sp, #12]
   14408:	ldr	r3, [sp, #84]	; 0x54
   1440c:	str	r1, [sp, #20]
   14410:	str	r3, [sp, #4]
   14414:	ldr	r3, [sp, #88]	; 0x58
   14418:	str	r3, [sp, #28]
   1441c:	beq	14574 <__assert_fail@plt+0x3004>
   14420:	ldr	r3, [sp, #4]
   14424:	ldr	r2, [sp, #16]
   14428:	ldr	r5, [sp, #20]
   1442c:	add	sl, r3, r2
   14430:	b	144b0 <__assert_fail@plt+0x2f40>
   14434:	sub	fp, r8, r4
   14438:	cmp	r6, fp
   1443c:	bls	14544 <__assert_fail@plt+0x2fd4>
   14440:	mov	r0, r5
   14444:	mov	r1, r4
   14448:	sub	r6, r6, fp
   1444c:	mov	r2, fp
   14450:	bl	11420 <strncpy@plt>
   14454:	cmp	sl, r6
   14458:	add	r5, r5, fp
   1445c:	bcs	14540 <__assert_fail@plt+0x2fd0>
   14460:	ldr	r1, [sp, #8]
   14464:	sub	r6, r6, sl
   14468:	cmp	r1, #0
   1446c:	beq	14480 <__assert_fail@plt+0x2f10>
   14470:	ldr	r3, [sp, #16]
   14474:	mov	r0, r5
   14478:	add	r5, r5, r3
   1447c:	bl	11300 <strcpy@plt>
   14480:	mov	r0, r5
   14484:	ldr	r1, [sp, #12]
   14488:	bl	11300 <strcpy@plt>
   1448c:	ldr	r4, [r9, #20]
   14490:	ldr	r3, [sp, #4]
   14494:	sub	r7, r7, r4
   14498:	add	r4, r8, r4
   1449c:	sub	r7, r7, fp
   144a0:	add	r5, r5, r3
   144a4:	ldrb	r3, [r4]
   144a8:	cmp	r3, #0
   144ac:	beq	144f8 <__assert_fail@plt+0x2f88>
   144b0:	mov	r0, r4
   144b4:	ldr	r1, [r9, #24]
   144b8:	bl	1634c <__assert_fail@plt+0x4ddc>
   144bc:	subs	r8, r0, #0
   144c0:	bne	14434 <__assert_fail@plt+0x2ec4>
   144c4:	cmp	r7, r6
   144c8:	bcs	14544 <__assert_fail@plt+0x2fd4>
   144cc:	mov	r1, r4
   144d0:	mov	r0, r5
   144d4:	mov	r2, r7
   144d8:	add	r4, r4, r7
   144dc:	bl	11420 <strncpy@plt>
   144e0:	ldrb	r3, [r4]
   144e4:	sub	r6, r6, r7
   144e8:	add	r5, r5, r7
   144ec:	mov	r7, r8
   144f0:	cmp	r3, #0
   144f4:	bne	144b0 <__assert_fail@plt+0x2f40>
   144f8:	mov	ip, #0
   144fc:	ldr	r2, [sp, #20]
   14500:	mov	r0, r9
   14504:	strb	ip, [r5], #1
   14508:	str	ip, [sp, #72]	; 0x48
   1450c:	str	ip, [sp, #76]	; 0x4c
   14510:	ldr	r1, [sp, #24]
   14514:	sub	r3, r5, r2
   14518:	ldr	ip, [sp, #28]
   1451c:	str	ip, [sp, #80]	; 0x50
   14520:	add	sp, sp, #36	; 0x24
   14524:	ldrd	r4, [sp]
   14528:	ldrd	r6, [sp, #8]
   1452c:	ldrd	r8, [sp, #16]
   14530:	ldrd	sl, [sp, #24]
   14534:	ldr	lr, [sp, #32]
   14538:	add	sp, sp, #36	; 0x24
   1453c:	b	140f0 <__assert_fail@plt+0x2b80>
   14540:	mov	r4, r8
   14544:	ldrb	r3, [r4]
   14548:	cmp	r3, #0
   1454c:	beq	144f8 <__assert_fail@plt+0x2f88>
   14550:	mov	r2, #5
   14554:	movw	r1, #51796	; 0xca54
   14558:	movt	r1, #1
   1455c:	mov	r0, #0
   14560:	bl	11258 <dcgettext@plt>
   14564:	mov	r2, r0
   14568:	mov	r1, #0
   1456c:	mov	r0, #1
   14570:	bl	11324 <error@plt>
   14574:	add	r0, r0, #1
   14578:	bl	19a30 <__assert_fail@plt+0x84c0>
   1457c:	str	r0, [r5]
   14580:	str	r0, [sp, #20]
   14584:	b	14420 <__assert_fail@plt+0x2eb0>
   14588:	mov	ip, #0
   1458c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14590:	movw	r2, #51700	; 0xc9f4
   14594:	movt	r2, #1
   14598:	strd	r6, [sp, #8]
   1459c:	mov	r3, ip
   145a0:	strd	r8, [sp, #16]
   145a4:	mov	r6, r1
   145a8:	mov	r8, r0
   145ac:	strd	sl, [sp, #24]
   145b0:	str	lr, [sp, #32]
   145b4:	sub	sp, sp, #20
   145b8:	str	ip, [sp]
   145bc:	str	ip, [sp, #4]
   145c0:	str	ip, [sp, #8]
   145c4:	bl	140f0 <__assert_fail@plt+0x2b80>
   145c8:	ldr	r3, [r6]
   145cc:	cmp	r3, #0
   145d0:	beq	1485c <__assert_fail@plt+0x32ec>
   145d4:	ldr	r2, [r6, #4]
   145d8:	sub	r3, r3, #-1073741823	; 0xc0000001
   145dc:	lsl	r0, r3, #2
   145e0:	ldr	r9, [r2, r3, lsl #2]
   145e4:	cmp	r9, #0
   145e8:	bne	14840 <__assert_fail@plt+0x32d0>
   145ec:	add	r0, r0, #8
   145f0:	mov	sl, r9
   145f4:	bl	19a30 <__assert_fail@plt+0x84c0>
   145f8:	ldr	r1, [r6]
   145fc:	mov	r7, r0
   14600:	ldr	r3, [r8, #28]
   14604:	mov	r4, r1
   14608:	cmp	r3, #0
   1460c:	beq	147fc <__assert_fail@plt+0x328c>
   14610:	ldr	r2, [r6, #4]
   14614:	sub	r0, r7, #4
   14618:	add	lr, r2, r3, lsl #2
   1461c:	ldr	ip, [r2], #4
   14620:	cmp	lr, r2
   14624:	str	ip, [r0, #4]!
   14628:	bne	1461c <__assert_fail@plt+0x30ac>
   1462c:	add	ip, r9, r3
   14630:	cmp	r4, r3
   14634:	movls	r2, #0
   14638:	movhi	r2, #1
   1463c:	cmp	ip, r1
   14640:	movcs	r2, #0
   14644:	cmp	r2, #0
   14648:	moveq	r5, r3
   1464c:	beq	14688 <__assert_fail@plt+0x3118>
   14650:	ldr	r2, [r6, #4]
   14654:	add	lr, r7, r3, lsl #2
   14658:	mov	r5, r3
   1465c:	add	r2, r2, ip, lsl #2
   14660:	ldr	fp, [r2], #4
   14664:	add	r5, r5, #1
   14668:	add	r0, r5, ip
   1466c:	sub	r0, r0, r3
   14670:	cmp	r1, r0
   14674:	cmphi	r4, r5
   14678:	str	fp, [lr], #4
   1467c:	bhi	14660 <__assert_fail@plt+0x30f0>
   14680:	cmp	r5, r3
   14684:	bcc	14804 <__assert_fail@plt+0x3294>
   14688:	mov	r3, r7
   1468c:	mov	r2, r5
   14690:	str	sl, [r7, r5, lsl #2]
   14694:	mov	r0, r8
   14698:	ldr	r1, [r6, #24]
   1469c:	ldr	fp, [r8, #32]
   146a0:	blx	fp
   146a4:	subs	fp, r0, #0
   146a8:	bne	14780 <__assert_fail@plt+0x3210>
   146ac:	ldr	r2, [r8, #28]
   146b0:	add	ip, r2, #1
   146b4:	cmp	ip, r4
   146b8:	bcs	14820 <__assert_fail@plt+0x32b0>
   146bc:	ldr	r1, [r6, #40]	; 0x28
   146c0:	clz	r3, r1
   146c4:	lsr	r3, r3, #5
   146c8:	cmp	r4, r1
   146cc:	orrcc	r3, r3, #1
   146d0:	ldr	r1, [r6, #36]	; 0x24
   146d4:	cmp	r3, #0
   146d8:	moveq	r3, r2
   146dc:	strne	r4, [r6, #40]	; 0x28
   146e0:	ldrne	r3, [r8, #28]
   146e4:	cmp	r1, #0
   146e8:	beq	14778 <__assert_fail@plt+0x3208>
   146ec:	ldr	r0, [r6, #40]	; 0x28
   146f0:	cmp	r1, r0
   146f4:	bcs	14778 <__assert_fail@plt+0x3208>
   146f8:	sub	r1, r0, r1
   146fc:	cmp	r1, #1
   14700:	subne	r4, r4, r1, lsr #1
   14704:	subeq	r4, r4, #1
   14708:	cmp	r2, #0
   1470c:	beq	1471c <__assert_fail@plt+0x31ac>
   14710:	cmp	ip, r4
   14714:	bcc	14724 <__assert_fail@plt+0x31b4>
   14718:	mov	r4, ip
   1471c:	cmp	r4, #0
   14720:	moveq	r4, #1
   14724:	ldr	r1, [r6]
   14728:	add	r2, r9, #1
   1472c:	sub	r0, r1, r3
   14730:	cmp	r2, r0
   14734:	bcc	14608 <__assert_fail@plt+0x3098>
   14738:	mov	r0, r7
   1473c:	bl	1a81c <__assert_fail@plt+0x92ac>
   14740:	ldr	r2, [r6, #20]
   14744:	mov	r0, #0
   14748:	mvn	r1, #0
   1474c:	ldr	r3, [r8, #28]
   14750:	strd	r0, [r6, #28]
   14754:	str	r3, [r6]
   14758:	str	r2, [r6, #16]
   1475c:	add	sp, sp, #20
   14760:	ldrd	r4, [sp]
   14764:	ldrd	r6, [sp, #8]
   14768:	ldrd	r8, [sp, #16]
   1476c:	ldrd	sl, [sp, #24]
   14770:	add	sp, sp, #32
   14774:	pop	{pc}		; (ldr pc, [sp], #4)
   14778:	lsr	r4, r4, #1
   1477c:	b	14708 <__assert_fail@plt+0x3198>
   14780:	ldr	r1, [r6, #36]	; 0x24
   14784:	ldr	r2, [r8, #28]
   14788:	cmp	r4, r1
   1478c:	movhi	r1, r4
   14790:	strhi	r4, [r6, #36]	; 0x24
   14794:	movls	r3, r2
   14798:	ldrhi	r3, [r8, #28]
   1479c:	cmp	r1, #0
   147a0:	beq	147e8 <__assert_fail@plt+0x3278>
   147a4:	ldr	r0, [r6, #40]	; 0x28
   147a8:	cmp	r0, r1
   147ac:	bls	147e8 <__assert_fail@plt+0x3278>
   147b0:	sub	r1, r0, r1
   147b4:	cmp	r1, #1
   147b8:	addne	r4, r4, r1, lsr #1
   147bc:	addeq	r4, r4, #1
   147c0:	cmp	r2, #0
   147c4:	beq	147d4 <__assert_fail@plt+0x3264>
   147c8:	add	r2, r2, #1
   147cc:	cmp	r4, r2
   147d0:	movcc	r4, r2
   147d4:	cmp	r4, #0
   147d8:	moveq	r4, #1
   147dc:	add	r9, r9, r5
   147e0:	sub	r9, r9, r3
   147e4:	b	14724 <__assert_fail@plt+0x31b4>
   147e8:	cmn	r4, #1
   147ec:	addne	r4, r4, #1
   147f0:	cmp	r2, #0
   147f4:	bne	147c8 <__assert_fail@plt+0x3258>
   147f8:	b	147dc <__assert_fail@plt+0x326c>
   147fc:	mov	ip, r9
   14800:	b	14630 <__assert_fail@plt+0x30c0>
   14804:	movw	r1, #51676	; 0xc9dc
   14808:	movt	r1, #1
   1480c:	ldr	r3, [pc, #100]	; 14878 <__assert_fail@plt+0x3308>
   14810:	movw	r0, #51880	; 0xcaa8
   14814:	movt	r0, #1
   14818:	mov	r2, #242	; 0xf2
   1481c:	bl	11570 <__assert_fail@plt>
   14820:	mov	r2, #5
   14824:	movw	r1, #51912	; 0xcac8
   14828:	movt	r1, #1
   1482c:	bl	11258 <dcgettext@plt>
   14830:	mov	r2, r0
   14834:	mov	r1, fp
   14838:	mov	r0, #1
   1483c:	bl	11324 <error@plt>
   14840:	movw	r1, #51676	; 0xc9dc
   14844:	movt	r1, #1
   14848:	ldr	r3, [pc, #44]	; 1487c <__assert_fail@plt+0x330c>
   1484c:	movw	r0, #51836	; 0xca7c
   14850:	movt	r0, #1
   14854:	movw	r2, #262	; 0x106
   14858:	bl	11570 <__assert_fail@plt>
   1485c:	movw	r1, #51676	; 0xc9dc
   14860:	movt	r1, #1
   14864:	ldr	r3, [pc, #16]	; 1487c <__assert_fail@plt+0x330c>
   14868:	movw	r0, #51816	; 0xca68
   1486c:	movt	r0, #1
   14870:	movw	r2, #261	; 0x105
   14874:	bl	11570 <__assert_fail@plt>
   14878:	andeq	ip, r1, ip, ror #18
   1487c:	andeq	ip, r1, r0, ror #18
   14880:	mov	r0, #0
   14884:	str	r4, [sp, #-8]!
   14888:	str	lr, [sp, #4]
   1488c:	bl	11264 <sysconf@plt>
   14890:	cmp	r0, #0
   14894:	ldr	r4, [sp]
   14898:	add	sp, sp, #4
   1489c:	mvnle	r0, #-2147483648	; 0x80000000
   148a0:	pop	{pc}		; (ldr pc, [sp], #4)
   148a4:	movw	r3, #57788	; 0xe1bc
   148a8:	movt	r3, #2
   148ac:	strd	r4, [sp, #-16]!
   148b0:	ldr	r4, [r3]
   148b4:	ldr	r3, [r4]
   148b8:	str	r6, [sp, #8]
   148bc:	str	lr, [sp, #12]
   148c0:	cmp	r3, #0
   148c4:	beq	148fc <__assert_fail@plt+0x338c>
   148c8:	mov	r5, #0
   148cc:	mov	r0, r3
   148d0:	bl	113c0 <strlen@plt>
   148d4:	ldr	r3, [r4, #4]!
   148d8:	add	r0, r0, #1
   148dc:	add	r5, r5, r0
   148e0:	cmp	r3, #0
   148e4:	bne	148cc <__assert_fail@plt+0x335c>
   148e8:	mov	r0, r5
   148ec:	ldrd	r4, [sp]
   148f0:	ldr	r6, [sp, #8]
   148f4:	add	sp, sp, #12
   148f8:	pop	{pc}		; (ldr pc, [sp], #4)
   148fc:	mov	r5, r3
   14900:	b	148e8 <__assert_fail@plt+0x3378>
   14904:	strd	r4, [sp, #-16]!
   14908:	mov	r4, r0
   1490c:	str	r6, [sp, #8]
   14910:	mov	r6, r1
   14914:	str	lr, [sp, #12]
   14918:	bl	148a4 <__assert_fail@plt+0x3334>
   1491c:	mov	r3, #4096	; 0x1000
   14920:	mov	r5, r0
   14924:	mov	r0, #0
   14928:	str	r3, [r4, #8]
   1492c:	bl	11264 <sysconf@plt>
   14930:	cmp	r0, #0
   14934:	mov	r3, #0
   14938:	mvnle	r0, #-2147483648	; 0x80000000
   1493c:	cmp	r5, r0
   14940:	str	r3, [r4]
   14944:	str	r0, [r4, #4]
   14948:	bhi	149a8 <__assert_fail@plt+0x3438>
   1494c:	add	r5, r5, r6
   14950:	cmp	r5, r0
   14954:	bcs	149bc <__assert_fail@plt+0x344c>
   14958:	sub	r0, r0, r5
   1495c:	lsr	r2, r0, #2
   14960:	str	r0, [r4, #4]
   14964:	sub	r2, r2, #2
   14968:	cmp	r2, r3
   1496c:	str	r2, [r4, #16]
   14970:	beq	149d0 <__assert_fail@plt+0x3460>
   14974:	movw	r2, #16456	; 0x4048
   14978:	movt	r2, #1
   1497c:	str	r0, [r4, #12]
   14980:	str	r3, [r4, #20]
   14984:	mov	r0, r3
   14988:	str	r3, [r4, #24]
   1498c:	str	r3, [r4, #28]
   14990:	strd	r2, [r4, #32]
   14994:	str	r3, [r4, #40]	; 0x28
   14998:	ldrd	r4, [sp]
   1499c:	ldr	r6, [sp, #8]
   149a0:	add	sp, sp, #12
   149a4:	pop	{pc}		; (ldr pc, [sp], #4)
   149a8:	ldrd	r4, [sp]
   149ac:	mov	r0, #1
   149b0:	ldr	r6, [sp, #8]
   149b4:	add	sp, sp, #12
   149b8:	pop	{pc}		; (ldr pc, [sp], #4)
   149bc:	ldrd	r4, [sp]
   149c0:	mov	r0, #2
   149c4:	ldr	r6, [sp, #8]
   149c8:	add	sp, sp, #12
   149cc:	pop	{pc}		; (ldr pc, [sp], #4)
   149d0:	movw	r1, #51676	; 0xc9dc
   149d4:	movt	r1, #1
   149d8:	ldr	r3, [pc, #12]	; 149ec <__assert_fail@plt+0x347c>
   149dc:	movw	r0, #51964	; 0xcafc
   149e0:	movt	r0, #1
   149e4:	movw	r2, #518	; 0x206
   149e8:	bl	11570 <__assert_fail@plt>
   149ec:	andeq	ip, r1, r8, ror r9
   149f0:	ldr	r3, [r0, #4]
   149f4:	cmp	r3, #131072	; 0x20000
   149f8:	bcc	14a08 <__assert_fail@plt+0x3498>
   149fc:	ldr	r3, [r0, #8]
   14a00:	cmp	r3, #131072	; 0x20000
   14a04:	movls	r3, #131072	; 0x20000
   14a08:	str	r3, [r0, #12]
   14a0c:	bx	lr
   14a10:	ldr	r0, [r0, #12]
   14a14:	movw	r3, #63487	; 0xf7ff
   14a18:	movt	r3, #32767	; 0x7fff
   14a1c:	strd	r4, [sp, #-16]!
   14a20:	mov	r5, #0
   14a24:	str	r6, [sp, #8]
   14a28:	str	lr, [sp, #12]
   14a2c:	str	r5, [r1]
   14a30:	cmp	r0, r3
   14a34:	str	r5, [r1, #4]
   14a38:	str	r5, [r1, #8]
   14a3c:	str	r5, [r1, #16]
   14a40:	str	r5, [r1, #36]	; 0x24
   14a44:	str	r5, [r1, #40]	; 0x28
   14a48:	bhi	14a88 <__assert_fail@plt+0x3518>
   14a4c:	add	r0, r0, #1
   14a50:	mov	r4, r1
   14a54:	mov	r6, r2
   14a58:	bl	19a30 <__assert_fail@plt+0x84c0>
   14a5c:	mvn	r3, #0
   14a60:	str	r0, [r4, #12]
   14a64:	str	r5, [r4, #16]
   14a68:	str	r5, [r4, #20]
   14a6c:	str	r6, [r4, #24]
   14a70:	str	r5, [r4, #28]
   14a74:	str	r3, [r4, #32]
   14a78:	ldrd	r4, [sp]
   14a7c:	ldr	r6, [sp, #8]
   14a80:	add	sp, sp, #12
   14a84:	pop	{pc}		; (ldr pc, [sp], #4)
   14a88:	movw	r1, #51676	; 0xc9dc
   14a8c:	movt	r1, #1
   14a90:	ldr	r3, [pc, #12]	; 14aa4 <__assert_fail@plt+0x3534>
   14a94:	movw	r0, #51988	; 0xcb14
   14a98:	movt	r0, #1
   14a9c:	mov	r2, #572	; 0x23c
   14aa0:	bl	11570 <__assert_fail@plt>
   14aa4:	andeq	ip, r1, ip, lsl #19
   14aa8:	ldr	r3, [r1, #20]
   14aac:	mov	ip, #0
   14ab0:	ldr	r2, [r0, #28]
   14ab4:	mvn	r0, #0
   14ab8:	str	ip, [r1, #28]
   14abc:	str	r0, [r1, #32]
   14ac0:	str	r2, [r1]
   14ac4:	str	r3, [r1, #16]
   14ac8:	bx	lr
   14acc:	ldr	r3, [r0]
   14ad0:	strd	r4, [sp, #-16]!
   14ad4:	str	r6, [sp, #8]
   14ad8:	str	lr, [sp, #12]
   14adc:	cmp	r3, #0
   14ae0:	beq	14b60 <__assert_fail@plt+0x35f0>
   14ae4:	mov	r4, #0
   14ae8:	mov	r5, r0
   14aec:	mov	r6, r4
   14af0:	mov	r0, r3
   14af4:	add	r4, r4, #1
   14af8:	bl	113c0 <strlen@plt>
   14afc:	ldr	r3, [r5, #4]!
   14b00:	add	r6, r6, r0
   14b04:	cmp	r3, #0
   14b08:	bne	14af0 <__assert_fail@plt+0x3580>
   14b0c:	mov	r1, r4
   14b10:	movw	r0, #52024	; 0xcb38
   14b14:	movt	r0, #1
   14b18:	bl	14050 <__assert_fail@plt+0x2ae0>
   14b1c:	cmp	r0, #0
   14b20:	movne	r0, #1
   14b24:	beq	14b38 <__assert_fail@plt+0x35c8>
   14b28:	ldrd	r4, [sp]
   14b2c:	ldr	r6, [sp, #8]
   14b30:	add	sp, sp, #12
   14b34:	pop	{pc}		; (ldr pc, [sp], #4)
   14b38:	mov	r1, r6
   14b3c:	movw	r0, #52064	; 0xcb60
   14b40:	movt	r0, #1
   14b44:	bl	14050 <__assert_fail@plt+0x2ae0>
   14b48:	adds	r0, r0, #0
   14b4c:	ldrd	r4, [sp]
   14b50:	movne	r0, #1
   14b54:	ldr	r6, [sp, #8]
   14b58:	add	sp, sp, #12
   14b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b60:	mov	r4, r3
   14b64:	mov	r6, r3
   14b68:	b	14b0c <__assert_fail@plt+0x359c>
   14b6c:	movw	r0, #52132	; 0xcba4
   14b70:	movt	r0, #1
   14b74:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14b78:	strd	r6, [sp, #8]
   14b7c:	strd	r8, [sp, #16]
   14b80:	str	sl, [sp, #24]
   14b84:	str	lr, [sp, #28]
   14b88:	bl	15804 <__assert_fail@plt+0x4294>
   14b8c:	subs	r6, r0, #0
   14b90:	beq	14c6c <__assert_fail@plt+0x36fc>
   14b94:	mov	r9, #0
   14b98:	mvn	r5, #0
   14b9c:	bl	113f0 <__errno_location@plt>
   14ba0:	mov	r8, r9
   14ba4:	mov	r7, r0
   14ba8:	mov	r0, r6
   14bac:	str	r8, [r7]
   14bb0:	bl	114d4 <readdir64@plt>
   14bb4:	subs	r4, r0, #0
   14bb8:	mov	r1, #0
   14bbc:	beq	14bfc <__assert_fail@plt+0x368c>
   14bc0:	ldrb	r3, [r4, #19]
   14bc4:	add	r0, r4, #19
   14bc8:	cmp	r3, #46	; 0x2e
   14bcc:	bne	14be8 <__assert_fail@plt+0x3678>
   14bd0:	ldrb	r3, [r4, #20]
   14bd4:	cmp	r3, #0
   14bd8:	beq	14ba8 <__assert_fail@plt+0x3638>
   14bdc:	ldrh	r3, [r4, #20]
   14be0:	cmp	r3, #46	; 0x2e
   14be4:	beq	14ba8 <__assert_fail@plt+0x3638>
   14be8:	bl	15230 <__assert_fail@plt+0x3cc0>
   14bec:	cmp	r5, r0
   14bf0:	mov	r9, #1
   14bf4:	movlt	r5, r0
   14bf8:	b	14ba8 <__assert_fail@plt+0x3638>
   14bfc:	ldr	r7, [r7]
   14c00:	cmp	r7, r1
   14c04:	bne	14c34 <__assert_fail@plt+0x36c4>
   14c08:	mov	r0, r6
   14c0c:	bl	11564 <closedir@plt>
   14c10:	cmp	r9, #0
   14c14:	beq	14c6c <__assert_fail@plt+0x36fc>
   14c18:	mov	r0, r5
   14c1c:	ldrd	r4, [sp]
   14c20:	ldrd	r6, [sp, #8]
   14c24:	ldrd	r8, [sp, #16]
   14c28:	ldr	sl, [sp, #24]
   14c2c:	add	sp, sp, #28
   14c30:	pop	{pc}		; (ldr pc, [sp], #4)
   14c34:	mov	r1, #8
   14c38:	movw	r2, #52132	; 0xcba4
   14c3c:	movt	r2, #1
   14c40:	mvn	r5, #0
   14c44:	bl	18fec <__assert_fail@plt+0x7a7c>
   14c48:	mov	r3, r0
   14c4c:	mov	r1, r7
   14c50:	mov	r0, r4
   14c54:	movw	r2, #52888	; 0xce98
   14c58:	movt	r2, #1
   14c5c:	bl	11324 <error@plt>
   14c60:	mov	r0, r6
   14c64:	bl	11564 <closedir@plt>
   14c68:	b	14c18 <__assert_fail@plt+0x36a8>
   14c6c:	mvn	r5, #0
   14c70:	b	14c18 <__assert_fail@plt+0x36a8>
   14c74:	strd	r4, [sp, #-16]!
   14c78:	mov	r4, r1
   14c7c:	mov	r1, #1
   14c80:	str	r6, [sp, #8]
   14c84:	mov	r6, r0
   14c88:	str	lr, [sp, #12]
   14c8c:	bl	1a594 <__assert_fail@plt+0x9024>
   14c90:	ands	r5, r0, #1
   14c94:	movne	r5, #0
   14c98:	beq	14cb0 <__assert_fail@plt+0x3740>
   14c9c:	mov	r0, r5
   14ca0:	ldrd	r4, [sp]
   14ca4:	ldr	r6, [sp, #8]
   14ca8:	add	sp, sp, #12
   14cac:	pop	{pc}		; (ldr pc, [sp], #4)
   14cb0:	ldrd	r0, [r4]
   14cb4:	add	r2, r4, #8
   14cb8:	add	r1, r1, #1
   14cbc:	lsl	r1, r1, #2
   14cc0:	bl	153cc <__assert_fail@plt+0x3e5c>
   14cc4:	cmp	r0, #0
   14cc8:	beq	14ce8 <__assert_fail@plt+0x3778>
   14ccc:	ldr	r3, [r4, #4]
   14cd0:	str	r0, [r4]
   14cd4:	str	r6, [r0, r3, lsl #2]
   14cd8:	ldr	r3, [r4, #4]
   14cdc:	add	r3, r3, #1
   14ce0:	str	r3, [r4, #4]
   14ce4:	b	14c9c <__assert_fail@plt+0x372c>
   14ce8:	mvn	r5, #0
   14cec:	b	14c9c <__assert_fail@plt+0x372c>
   14cf0:	strd	r4, [sp, #-16]!
   14cf4:	mov	r4, r1
   14cf8:	mov	r1, #1
   14cfc:	mov	r5, r0
   14d00:	str	r6, [sp, #8]
   14d04:	str	lr, [sp, #12]
   14d08:	bl	1a594 <__assert_fail@plt+0x9024>
   14d0c:	tst	r0, #1
   14d10:	bne	14d78 <__assert_fail@plt+0x3808>
   14d14:	ldmib	r4, {r0, r3}
   14d18:	cmp	r3, r0
   14d1c:	bcs	14d58 <__assert_fail@plt+0x37e8>
   14d20:	ldr	r2, [r4]
   14d24:	ldr	r1, [r2, r3, lsl #2]
   14d28:	add	r2, r2, r3, lsl #2
   14d2c:	cmp	r1, r5
   14d30:	bge	14d70 <__assert_fail@plt+0x3800>
   14d34:	add	r3, r3, #1
   14d38:	b	14d48 <__assert_fail@plt+0x37d8>
   14d3c:	ldr	r1, [r2, #4]!
   14d40:	cmp	r5, r1
   14d44:	ble	14d70 <__assert_fail@plt+0x3800>
   14d48:	cmp	r0, r3
   14d4c:	str	r3, [r4, #8]
   14d50:	add	r3, r3, #1
   14d54:	bne	14d3c <__assert_fail@plt+0x37cc>
   14d58:	str	r5, [r4, #12]
   14d5c:	mvn	r0, #0
   14d60:	ldrd	r4, [sp]
   14d64:	ldr	r6, [sp, #8]
   14d68:	add	sp, sp, #12
   14d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   14d70:	cmp	r5, r1
   14d74:	bne	14d58 <__assert_fail@plt+0x37e8>
   14d78:	ldrd	r4, [sp]
   14d7c:	mov	r0, #0
   14d80:	ldr	r6, [sp, #8]
   14d84:	add	sp, sp, #12
   14d88:	pop	{pc}		; (ldr pc, [sp], #4)
   14d8c:	mov	r0, #4
   14d90:	str	r4, [sp, #-8]!
   14d94:	str	lr, [sp, #4]
   14d98:	sub	sp, sp, #16
   14d9c:	bl	11264 <sysconf@plt>
   14da0:	cmn	r0, #1
   14da4:	mov	r1, sp
   14da8:	movne	r4, r0
   14dac:	mov	r0, #7
   14db0:	moveq	r4, #20
   14db4:	bl	1127c <getrlimit64@plt>
   14db8:	cmp	r0, #0
   14dbc:	bne	14dd8 <__assert_fail@plt+0x3868>
   14dc0:	ldrd	r2, [sp]
   14dc4:	mvn	r1, #0
   14dc8:	mvn	r0, #0
   14dcc:	cmp	r3, r1
   14dd0:	cmpeq	r2, r0
   14dd4:	movne	r4, r2
   14dd8:	mov	r0, r4
   14ddc:	add	sp, sp, #16
   14de0:	ldr	r4, [sp]
   14de4:	add	sp, sp, #4
   14de8:	pop	{pc}		; (ldr pc, [sp], #4)
   14dec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14df0:	strd	r6, [sp, #8]
   14df4:	strd	sl, [sp, #24]
   14df8:	subs	sl, r0, #0
   14dfc:	strd	r8, [sp, #16]
   14e00:	str	lr, [sp, #32]
   14e04:	sub	sp, sp, #524	; 0x20c
   14e08:	ble	14ec4 <__assert_fail@plt+0x3954>
   14e0c:	mov	r5, #0
   14e10:	mov	r6, r2
   14e14:	str	sl, [sp, #4]
   14e18:	mov	r9, r1
   14e1c:	mov	r8, r5
   14e20:	mov	r7, #5
   14e24:	ldr	r3, [sp, #4]
   14e28:	sub	r3, r3, r5
   14e2c:	cmp	r3, #64	; 0x40
   14e30:	movlt	fp, r3
   14e34:	movge	fp, #64	; 0x40
   14e38:	cmp	r3, #0
   14e3c:	ble	14ee4 <__assert_fail@plt+0x3974>
   14e40:	add	r4, sp, #8
   14e44:	mov	r3, #0
   14e48:	mov	r2, r4
   14e4c:	add	r1, r5, r3
   14e50:	add	r3, r3, #1
   14e54:	strh	r7, [r2, #4]
   14e58:	cmp	r3, fp
   14e5c:	strh	r8, [r2, #6]
   14e60:	str	r1, [r2], #8
   14e64:	blt	14e4c <__assert_fail@plt+0x38dc>
   14e68:	mov	r2, #0
   14e6c:	mov	r1, fp
   14e70:	add	r0, sp, #8
   14e74:	bl	112b8 <poll@plt>
   14e78:	cmn	r0, #1
   14e7c:	beq	14efc <__assert_fail@plt+0x398c>
   14e80:	mov	sl, #0
   14e84:	ldrsh	r2, [r4, #6]
   14e88:	mov	r1, r6
   14e8c:	add	sl, sl, #1
   14e90:	cmp	r2, #32
   14e94:	beq	14ea8 <__assert_fail@plt+0x3938>
   14e98:	ldr	r0, [r4]
   14e9c:	blx	r9
   14ea0:	cmp	r0, #0
   14ea4:	bne	14ec8 <__assert_fail@plt+0x3958>
   14ea8:	cmp	sl, fp
   14eac:	add	r4, r4, #8
   14eb0:	blt	14e84 <__assert_fail@plt+0x3914>
   14eb4:	ldr	r3, [sp, #4]
   14eb8:	add	r5, r5, fp
   14ebc:	cmp	r3, r5
   14ec0:	bgt	14e24 <__assert_fail@plt+0x38b4>
   14ec4:	mov	r0, #0
   14ec8:	add	sp, sp, #524	; 0x20c
   14ecc:	ldrd	r4, [sp]
   14ed0:	ldrd	r6, [sp, #8]
   14ed4:	ldrd	r8, [sp, #16]
   14ed8:	ldrd	sl, [sp, #24]
   14edc:	add	sp, sp, #32
   14ee0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ee4:	mov	r2, #0
   14ee8:	mov	r1, fp
   14eec:	add	r0, sp, #8
   14ef0:	bl	112b8 <poll@plt>
   14ef4:	cmn	r0, #1
   14ef8:	bne	14eb4 <__assert_fail@plt+0x3944>
   14efc:	mvn	r0, #0
   14f00:	b	14ec8 <__assert_fail@plt+0x3958>
   14f04:	push	{lr}		; (str lr, [sp, #-4]!)
   14f08:	sub	sp, sp, #20
   14f0c:	bl	14b6c <__assert_fail@plt+0x35fc>
   14f10:	cmp	r0, #0
   14f14:	bge	14f1c <__assert_fail@plt+0x39ac>
   14f18:	bl	14d8c <__assert_fail@plt+0x381c>
   14f1c:	mov	r3, #0
   14f20:	cmn	r0, #-2147483647	; 0x80000001
   14f24:	add	r2, sp, #4
   14f28:	addne	r0, r0, #1
   14f2c:	movw	r1, #19572	; 0x4c74
   14f30:	movt	r1, #1
   14f34:	str	r3, [sp, #4]
   14f38:	str	r3, [sp, #8]
   14f3c:	str	r3, [sp, #12]
   14f40:	bl	14dec <__assert_fail@plt+0x387c>
   14f44:	ldmib	sp, {r1, r2}
   14f48:	movw	r3, #58012	; 0xe29c
   14f4c:	movt	r3, #2
   14f50:	stm	r3, {r1, r2}
   14f54:	add	sp, sp, #20
   14f58:	pop	{pc}		; (ldr pc, [sp], #4)
   14f5c:	push	{r1, r2, r3}
   14f60:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14f64:	strd	r6, [sp, #8]
   14f68:	strd	r8, [sp, #16]
   14f6c:	mov	r8, r0
   14f70:	str	lr, [sp, #24]
   14f74:	sub	sp, sp, #8
   14f78:	ldr	r5, [sp, #36]	; 0x24
   14f7c:	ands	r6, r5, #64	; 0x40
   14f80:	bne	15008 <__assert_fail@plt+0x3a98>
   14f84:	movw	r4, #58012	; 0xe29c
   14f88:	movt	r4, #2
   14f8c:	ldrb	r7, [r4, #8]
   14f90:	cmp	r7, #0
   14f94:	beq	14fe0 <__assert_fail@plt+0x3a70>
   14f98:	orr	r1, r5, #524288	; 0x80000
   14f9c:	mov	r2, r6
   14fa0:	mov	r0, r8
   14fa4:	bl	158a0 <__assert_fail@plt+0x4330>
   14fa8:	subs	r5, r0, #0
   14fac:	blt	14fbc <__assert_fail@plt+0x3a4c>
   14fb0:	ldrb	r3, [r4, #9]
   14fb4:	cmp	r3, #0
   14fb8:	beq	15018 <__assert_fail@plt+0x3aa8>
   14fbc:	mov	r0, r5
   14fc0:	add	sp, sp, #8
   14fc4:	ldrd	r4, [sp]
   14fc8:	ldrd	r6, [sp, #8]
   14fcc:	ldrd	r8, [sp, #16]
   14fd0:	ldr	lr, [sp, #24]
   14fd4:	add	sp, sp, #28
   14fd8:	add	sp, sp, #12
   14fdc:	bx	lr
   14fe0:	movw	r0, #52148	; 0xcbb4
   14fe4:	movt	r0, #1
   14fe8:	mov	r1, #524288	; 0x80000
   14fec:	bl	158a0 <__assert_fail@plt+0x4330>
   14ff0:	subs	r9, r0, #0
   14ff4:	bge	15024 <__assert_fail@plt+0x3ab4>
   14ff8:	mov	r3, #1
   14ffc:	strb	r3, [r4, #8]
   15000:	strb	r7, [r4, #9]
   15004:	b	14f98 <__assert_fail@plt+0x3a28>
   15008:	add	r3, sp, #40	; 0x28
   1500c:	ldr	r6, [sp, #40]	; 0x28
   15010:	str	r3, [sp, #4]
   15014:	b	14f84 <__assert_fail@plt+0x3a14>
   15018:	mov	r1, #1
   1501c:	bl	15540 <__assert_fail@plt+0x3fd0>
   15020:	b	14fbc <__assert_fail@plt+0x3a4c>
   15024:	mov	r1, #1
   15028:	bl	1a594 <__assert_fail@plt+0x9024>
   1502c:	and	r7, r0, #1
   15030:	mov	r0, r9
   15034:	bl	11558 <close@plt>
   15038:	mov	r3, #1
   1503c:	strb	r3, [r4, #8]
   15040:	strb	r7, [r4, #9]
   15044:	b	14f98 <__assert_fail@plt+0x3a28>
   15048:	str	r4, [sp, #-8]!
   1504c:	movw	r4, #58012	; 0xe29c
   15050:	movt	r4, #2
   15054:	ldr	r0, [r4]
   15058:	str	lr, [sp, #4]
   1505c:	bl	1a81c <__assert_fail@plt+0x92ac>
   15060:	mov	r3, #0
   15064:	str	r3, [r4]
   15068:	str	r3, [r4, #4]
   1506c:	ldr	r4, [sp]
   15070:	add	sp, sp, #4
   15074:	pop	{pc}		; (ldr pc, [sp], #4)
   15078:	movw	r0, #52152	; 0xcbb8
   1507c:	movt	r0, #1
   15080:	str	r4, [sp, #-8]!
   15084:	str	lr, [sp, #4]
   15088:	bl	11348 <getenv@plt>
   1508c:	adds	r0, r0, #0
   15090:	ldr	r4, [sp]
   15094:	add	sp, sp, #4
   15098:	movne	r0, #1
   1509c:	pop	{pc}		; (ldr pc, [sp], #4)
   150a0:	movw	r3, #58012	; 0xe29c
   150a4:	movt	r3, #2
   150a8:	strd	r4, [sp, #-16]!
   150ac:	ldr	r5, [r3, #4]
   150b0:	str	r6, [sp, #8]
   150b4:	str	lr, [sp, #12]
   150b8:	sub	sp, sp, #16
   150bc:	ldr	r6, [r3]
   150c0:	bl	14b6c <__assert_fail@plt+0x35fc>
   150c4:	cmp	r0, #0
   150c8:	bge	150d0 <__assert_fail@plt+0x3b60>
   150cc:	bl	14d8c <__assert_fail@plt+0x381c>
   150d0:	cmn	r0, #-2147483647	; 0x80000001
   150d4:	mov	r4, #0
   150d8:	str	r6, [sp]
   150dc:	mvn	r3, #0
   150e0:	addne	r0, r0, #1
   150e4:	str	r5, [sp, #4]
   150e8:	movw	r1, #19696	; 0x4cf0
   150ec:	movt	r1, #1
   150f0:	str	r4, [sp, #8]
   150f4:	mov	r2, sp
   150f8:	str	r3, [sp, #12]
   150fc:	bl	14dec <__assert_fail@plt+0x387c>
   15100:	ldr	r5, [sp, #12]
   15104:	cmp	r5, r4
   15108:	bge	15120 <__assert_fail@plt+0x3bb0>
   1510c:	add	sp, sp, #16
   15110:	ldrd	r4, [sp]
   15114:	ldr	r6, [sp, #8]
   15118:	add	sp, sp, #12
   1511c:	pop	{pc}		; (ldr pc, [sp], #4)
   15120:	mov	r2, #5
   15124:	movw	r1, #52180	; 0xcbd4
   15128:	movt	r1, #1
   1512c:	mov	r0, r4
   15130:	bl	11258 <dcgettext@plt>
   15134:	mov	r2, r0
   15138:	mov	r3, r5
   1513c:	mov	r1, r4
   15140:	mov	r0, r4
   15144:	bl	11324 <error@plt>
   15148:	movw	r3, #52104	; 0xcb88
   1514c:	movt	r3, #1
   15150:	movw	r1, #52332	; 0xcc6c
   15154:	movt	r1, #1
   15158:	movw	r0, #52344	; 0xcc78
   1515c:	movt	r0, #1
   15160:	mov	r2, #396	; 0x18c
   15164:	bl	11570 <__assert_fail@plt>
   15168:	movw	r3, #57808	; 0xe1d0
   1516c:	movt	r3, #2
   15170:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15174:	strd	r6, [sp, #8]
   15178:	mov	r6, r0
   1517c:	str	r8, [sp, #16]
   15180:	str	lr, [sp, #20]
   15184:	sub	sp, sp, #16
   15188:	ldr	r0, [r3]
   1518c:	bl	1a77c <__assert_fail@plt+0x920c>
   15190:	movw	r2, #57820	; 0xe1dc
   15194:	movt	r2, #2
   15198:	movw	r3, #57708	; 0xe16c
   1519c:	movt	r3, #2
   151a0:	ldr	r4, [r2]
   151a4:	movw	r1, #52356	; 0xcc84
   151a8:	movt	r1, #1
   151ac:	mov	r2, #5
   151b0:	mov	r0, #0
   151b4:	ldr	r8, [r3]
   151b8:	bl	11258 <dcgettext@plt>
   151bc:	mov	r7, r0
   151c0:	mov	r2, #5
   151c4:	movw	r1, #52372	; 0xcc94
   151c8:	movt	r1, #1
   151cc:	mov	r0, #0
   151d0:	bl	11258 <dcgettext@plt>
   151d4:	mov	r5, r0
   151d8:	mov	r2, #5
   151dc:	movw	r1, #52388	; 0xcca4
   151e0:	movt	r1, #1
   151e4:	mov	r0, #0
   151e8:	bl	11258 <dcgettext@plt>
   151ec:	mov	ip, #0
   151f0:	mov	r3, r8
   151f4:	str	r7, [sp]
   151f8:	mov	r1, r6
   151fc:	movw	r2, #52404	; 0xccb4
   15200:	movt	r2, #1
   15204:	str	r5, [sp, #4]
   15208:	str	r0, [sp, #8]
   1520c:	mov	r0, r4
   15210:	str	ip, [sp, #12]
   15214:	bl	19938 <__assert_fail@plt+0x83c8>
   15218:	add	sp, sp, #16
   1521c:	ldrd	r4, [sp]
   15220:	ldrd	r6, [sp, #8]
   15224:	ldr	r8, [sp, #16]
   15228:	add	sp, sp, #20
   1522c:	pop	{pc}		; (ldr pc, [sp], #4)
   15230:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15234:	mov	r4, r0
   15238:	strd	r6, [sp, #8]
   1523c:	mov	r7, r1
   15240:	mov	r6, #0
   15244:	str	r8, [sp, #16]
   15248:	str	lr, [sp, #20]
   1524c:	sub	sp, sp, #16
   15250:	bl	113f0 <__errno_location@plt>
   15254:	mov	r5, r0
   15258:	mov	r2, #10
   1525c:	mov	r0, r4
   15260:	add	r1, sp, #12
   15264:	str	r6, [r5]
   15268:	bl	111bc <strtol@plt>
   1526c:	sub	r3, r0, #-2147483647	; 0x80000001
   15270:	cmn	r3, #3
   15274:	bls	15290 <__assert_fail@plt+0x3d20>
   15278:	ldr	r1, [r5]
   1527c:	movw	r2, #52888	; 0xce98
   15280:	movt	r2, #1
   15284:	mov	r3, r4
   15288:	mov	r0, #1
   1528c:	bl	11324 <error@plt>
   15290:	ldr	r3, [sp, #12]
   15294:	ldrb	r8, [r3]
   15298:	cmp	r8, #0
   1529c:	bne	152c0 <__assert_fail@plt+0x3d50>
   152a0:	cmp	r4, r3
   152a4:	beq	15318 <__assert_fail@plt+0x3da8>
   152a8:	add	sp, sp, #16
   152ac:	ldrd	r4, [sp]
   152b0:	ldrd	r6, [sp, #8]
   152b4:	ldr	r8, [sp, #16]
   152b8:	add	sp, sp, #20
   152bc:	pop	{pc}		; (ldr pc, [sp], #4)
   152c0:	mov	r2, #5
   152c4:	mov	r0, r6
   152c8:	ldr	r5, [r5]
   152cc:	movw	r1, #52436	; 0xccd4
   152d0:	movt	r1, #1
   152d4:	bl	11258 <dcgettext@plt>
   152d8:	mov	r8, r0
   152dc:	mov	r1, r7
   152e0:	ldr	r2, [sp, #12]
   152e4:	mov	r0, r6
   152e8:	bl	18fec <__assert_fail@plt+0x7a7c>
   152ec:	mov	r6, r0
   152f0:	mov	r2, r4
   152f4:	mov	r1, r7
   152f8:	mov	r0, #1
   152fc:	bl	18fec <__assert_fail@plt+0x7a7c>
   15300:	mov	r3, r6
   15304:	mov	r2, r8
   15308:	str	r0, [sp]
   1530c:	mov	r1, r5
   15310:	mov	r0, #1
   15314:	bl	11324 <error@plt>
   15318:	ldr	r5, [r5]
   1531c:	mov	r2, #5
   15320:	movw	r1, #52464	; 0xccf0
   15324:	movt	r1, #1
   15328:	mov	r0, r8
   1532c:	bl	11258 <dcgettext@plt>
   15330:	mov	r6, r0
   15334:	mov	r2, r4
   15338:	mov	r1, r7
   1533c:	mov	r0, r8
   15340:	bl	18fec <__assert_fail@plt+0x7a7c>
   15344:	mov	r3, r0
   15348:	mov	r2, r6
   1534c:	mov	r1, r5
   15350:	mov	r0, #1
   15354:	b	1528c <__assert_fail@plt+0x3d1c>
   15358:	mov	r2, #5
   1535c:	strd	r4, [sp, #-12]!
   15360:	mov	r5, r1
   15364:	mov	r4, r0
   15368:	movw	r1, #52488	; 0xcd08
   1536c:	movt	r1, #1
   15370:	mov	r0, #0
   15374:	str	lr, [sp, #8]
   15378:	sub	sp, sp, #20
   1537c:	bl	11258 <dcgettext@plt>
   15380:	movw	r1, #52736	; 0xce00
   15384:	movt	r1, #1
   15388:	movw	r2, #52760	; 0xce18
   1538c:	movt	r2, #1
   15390:	movw	ip, #52404	; 0xccb4
   15394:	movt	ip, #1
   15398:	mov	r3, r5
   1539c:	str	ip, [sp]
   153a0:	str	r2, [sp, #4]
   153a4:	movw	r2, #52696	; 0xcdd8
   153a8:	movt	r2, #1
   153ac:	str	r1, [sp, #8]
   153b0:	mov	r1, r0
   153b4:	mov	r0, r4
   153b8:	bl	113e4 <fprintf@plt>
   153bc:	add	sp, sp, #20
   153c0:	ldrd	r4, [sp]
   153c4:	add	sp, sp, #8
   153c8:	pop	{pc}		; (ldr pc, [sp], #4)
   153cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   153d0:	mov	r4, r1
   153d4:	mov	r5, r0
   153d8:	strd	r6, [sp, #8]
   153dc:	mov	r6, r2
   153e0:	str	r8, [sp, #16]
   153e4:	str	lr, [sp, #20]
   153e8:	bl	113f0 <__errno_location@plt>
   153ec:	cmp	r4, #0
   153f0:	ldr	r8, [r0]
   153f4:	beq	154d0 <__assert_fail@plt+0x3f60>
   153f8:	ldr	r1, [r6]
   153fc:	mov	r7, r0
   15400:	cmp	r1, #0
   15404:	beq	15474 <__assert_fail@plt+0x3f04>
   15408:	cmp	r1, r4
   1540c:	bcs	1549c <__assert_fail@plt+0x3f2c>
   15410:	lsl	r3, r1, #1
   15414:	cmp	r1, r3
   15418:	bls	15430 <__assert_fail@plt+0x3ec0>
   1541c:	b	154b0 <__assert_fail@plt+0x3f40>
   15420:	lsl	ip, r3, #1
   15424:	cmp	r3, ip
   15428:	bhi	15488 <__assert_fail@plt+0x3f18>
   1542c:	mov	r3, ip
   15430:	cmp	r3, r4
   15434:	bcc	15420 <__assert_fail@plt+0x3eb0>
   15438:	cmp	r1, #0
   1543c:	bne	15494 <__assert_fail@plt+0x3f24>
   15440:	cmp	r5, #0
   15444:	bne	154f0 <__assert_fail@plt+0x3f80>
   15448:	mov	r0, r3
   1544c:	str	r3, [r6]
   15450:	bl	1a94c <__assert_fail@plt+0x93dc>
   15454:	cmp	r0, #0
   15458:	beq	154a8 <__assert_fail@plt+0x3f38>
   1545c:	str	r8, [r7]
   15460:	ldrd	r4, [sp]
   15464:	ldrd	r6, [sp, #8]
   15468:	ldr	r8, [sp, #16]
   1546c:	add	sp, sp, #20
   15470:	pop	{pc}		; (ldr pc, [sp], #4)
   15474:	cmp	r4, #16
   15478:	movls	r3, #16
   1547c:	bls	15440 <__assert_fail@plt+0x3ed0>
   15480:	mov	r3, #32
   15484:	b	15430 <__assert_fail@plt+0x3ec0>
   15488:	cmp	r1, #0
   1548c:	mov	r3, r4
   15490:	beq	15440 <__assert_fail@plt+0x3ed0>
   15494:	cmp	r1, r3
   15498:	bne	154b4 <__assert_fail@plt+0x3f44>
   1549c:	mov	r0, r5
   154a0:	cmp	r0, #0
   154a4:	bne	1545c <__assert_fail@plt+0x3eec>
   154a8:	mov	r0, #0
   154ac:	b	15460 <__assert_fail@plt+0x3ef0>
   154b0:	mov	r3, r4
   154b4:	mov	r0, r5
   154b8:	mov	r1, r3
   154bc:	str	r3, [r6]
   154c0:	bl	1a9f8 <__assert_fail@plt+0x9488>
   154c4:	cmp	r0, #0
   154c8:	bne	1545c <__assert_fail@plt+0x3eec>
   154cc:	b	154a8 <__assert_fail@plt+0x3f38>
   154d0:	movw	r3, #52808	; 0xce48
   154d4:	movt	r3, #1
   154d8:	movw	r1, #52820	; 0xce54
   154dc:	movt	r1, #1
   154e0:	movw	r0, #52832	; 0xce60
   154e4:	movt	r0, #1
   154e8:	mov	r2, #71	; 0x47
   154ec:	bl	11570 <__assert_fail@plt>
   154f0:	movw	r3, #52808	; 0xce48
   154f4:	movt	r3, #1
   154f8:	movw	r1, #52820	; 0xce54
   154fc:	movt	r1, #1
   15500:	movw	r0, #52844	; 0xce6c
   15504:	movt	r0, #1
   15508:	mov	r2, #79	; 0x4f
   1550c:	bl	11570 <__assert_fail@plt>
   15510:	str	r4, [sp, #-8]!
   15514:	mov	r4, r0
   15518:	str	lr, [sp, #4]
   1551c:	bl	153cc <__assert_fail@plt+0x3e5c>
   15520:	cmp	r0, #0
   15524:	beq	15534 <__assert_fail@plt+0x3fc4>
   15528:	ldr	r4, [sp]
   1552c:	add	sp, sp, #4
   15530:	pop	{pc}		; (ldr pc, [sp], #4)
   15534:	mov	r0, r4
   15538:	bl	1a81c <__assert_fail@plt+0x92ac>
   1553c:	bl	19ea8 <__assert_fail@plt+0x8938>
   15540:	mov	r2, #0
   15544:	strd	r4, [sp, #-16]!
   15548:	mov	r4, r1
   1554c:	mov	r1, #1
   15550:	mov	r5, r0
   15554:	str	r6, [sp, #8]
   15558:	str	lr, [sp, #12]
   1555c:	bl	1a594 <__assert_fail@plt+0x9024>
   15560:	cmp	r0, #0
   15564:	blt	155ac <__assert_fail@plt+0x403c>
   15568:	cmp	r4, #0
   1556c:	biceq	r2, r0, #1
   15570:	orrne	r2, r0, #1
   15574:	cmp	r2, r0
   15578:	moveq	r0, #0
   1557c:	beq	1559c <__assert_fail@plt+0x402c>
   15580:	mov	r0, r5
   15584:	mov	r1, #2
   15588:	bl	1a594 <__assert_fail@plt+0x9024>
   1558c:	cmn	r0, #1
   15590:	movne	r0, #0
   15594:	moveq	r0, #1
   15598:	rsb	r0, r0, #0
   1559c:	ldrd	r4, [sp]
   155a0:	ldr	r6, [sp, #8]
   155a4:	add	sp, sp, #12
   155a8:	pop	{pc}		; (ldr pc, [sp], #4)
   155ac:	mvn	r0, #0
   155b0:	b	1559c <__assert_fail@plt+0x402c>
   155b4:	mov	r2, #0
   155b8:	movw	r1, #1030	; 0x406
   155bc:	b	1a594 <__assert_fail@plt+0x9024>
   155c0:	movw	r3, #58024	; 0xe2a8
   155c4:	movt	r3, #2
   155c8:	str	r0, [r3]
   155cc:	bx	lr
   155d0:	strd	r4, [sp, #-16]!
   155d4:	movw	r4, #57816	; 0xe1d8
   155d8:	movt	r4, #2
   155dc:	ldr	r5, [r4]
   155e0:	str	r6, [sp, #8]
   155e4:	str	lr, [sp, #12]
   155e8:	sub	sp, sp, #8
   155ec:	mov	r0, r5
   155f0:	bl	1a7dc <__assert_fail@plt+0x926c>
   155f4:	cmp	r0, #0
   155f8:	bne	156a8 <__assert_fail@plt+0x4138>
   155fc:	mov	r0, r5
   15600:	bl	1aa88 <__assert_fail@plt+0x9518>
   15604:	cmp	r0, #0
   15608:	bne	15638 <__assert_fail@plt+0x40c8>
   1560c:	add	sp, sp, #8
   15610:	ldrd	r4, [sp]
   15614:	ldr	r6, [sp, #8]
   15618:	ldr	lr, [sp, #12]
   1561c:	add	sp, sp, #16
   15620:	b	15718 <__assert_fail@plt+0x41a8>
   15624:	bl	1a77c <__assert_fail@plt+0x920c>
   15628:	cmp	r0, #0
   1562c:	ldr	r0, [r4]
   15630:	beq	156cc <__assert_fail@plt+0x415c>
   15634:	bl	1aa88 <__assert_fail@plt+0x9518>
   15638:	mov	r2, #5
   1563c:	movw	r1, #52864	; 0xce80
   15640:	movt	r1, #1
   15644:	mov	r0, #0
   15648:	bl	11258 <dcgettext@plt>
   1564c:	movw	r3, #58024	; 0xe2a8
   15650:	movt	r3, #2
   15654:	ldr	r4, [r3]
   15658:	mov	r5, r0
   1565c:	bl	113f0 <__errno_location@plt>
   15660:	mov	r2, r0
   15664:	cmp	r4, #0
   15668:	beq	156dc <__assert_fail@plt+0x416c>
   1566c:	ldr	r6, [r2]
   15670:	mov	r0, r4
   15674:	bl	19140 <__assert_fail@plt+0x7bd0>
   15678:	mov	r3, r0
   1567c:	movw	r2, #52884	; 0xce94
   15680:	movt	r2, #1
   15684:	mov	r0, #0
   15688:	str	r5, [sp]
   1568c:	mov	r1, r6
   15690:	bl	11324 <error@plt>
   15694:	bl	15718 <__assert_fail@plt+0x41a8>
   15698:	movw	r3, #57712	; 0xe170
   1569c:	movt	r3, #2
   156a0:	ldr	r0, [r3]
   156a4:	bl	11210 <_exit@plt>
   156a8:	mov	r1, #1
   156ac:	mov	r0, r5
   156b0:	mov	r2, #0
   156b4:	mov	r3, #0
   156b8:	str	r1, [sp]
   156bc:	bl	1a87c <__assert_fail@plt+0x930c>
   156c0:	cmp	r0, #0
   156c4:	ldr	r0, [r4]
   156c8:	beq	15624 <__assert_fail@plt+0x40b4>
   156cc:	bl	1aa88 <__assert_fail@plt+0x9518>
   156d0:	cmp	r0, #0
   156d4:	beq	1560c <__assert_fail@plt+0x409c>
   156d8:	b	15638 <__assert_fail@plt+0x40c8>
   156dc:	mov	r3, r5
   156e0:	mov	r0, r4
   156e4:	ldr	r1, [r2]
   156e8:	movw	r2, #52888	; 0xce98
   156ec:	movt	r2, #1
   156f0:	bl	11324 <error@plt>
   156f4:	b	15694 <__assert_fail@plt+0x4124>
   156f8:	movw	r3, #58028	; 0xe2ac
   156fc:	movt	r3, #2
   15700:	str	r0, [r3]
   15704:	bx	lr
   15708:	movw	r3, #58028	; 0xe2ac
   1570c:	movt	r3, #2
   15710:	strb	r0, [r3, #4]
   15714:	bx	lr
   15718:	movw	r3, #57820	; 0xe1dc
   1571c:	movt	r3, #2
   15720:	strd	r4, [sp, #-16]!
   15724:	ldr	r0, [r3]
   15728:	str	r6, [sp, #8]
   1572c:	str	lr, [sp, #12]
   15730:	sub	sp, sp, #8
   15734:	bl	1aa88 <__assert_fail@plt+0x9518>
   15738:	cmp	r0, #0
   1573c:	beq	15768 <__assert_fail@plt+0x41f8>
   15740:	movw	r4, #58028	; 0xe2ac
   15744:	movt	r4, #2
   15748:	ldrb	r6, [r4, #4]
   1574c:	bl	113f0 <__errno_location@plt>
   15750:	mov	r5, r0
   15754:	cmp	r6, #0
   15758:	beq	15794 <__assert_fail@plt+0x4224>
   1575c:	ldr	r3, [r0]
   15760:	cmp	r3, #32
   15764:	bne	15794 <__assert_fail@plt+0x4224>
   15768:	movw	r3, #57808	; 0xe1d0
   1576c:	movt	r3, #2
   15770:	ldr	r0, [r3]
   15774:	bl	1aa88 <__assert_fail@plt+0x9518>
   15778:	cmp	r0, #0
   1577c:	bne	157dc <__assert_fail@plt+0x426c>
   15780:	add	sp, sp, #8
   15784:	ldrd	r4, [sp]
   15788:	ldr	r6, [sp, #8]
   1578c:	add	sp, sp, #12
   15790:	pop	{pc}		; (ldr pc, [sp], #4)
   15794:	movw	r1, #52892	; 0xce9c
   15798:	movt	r1, #1
   1579c:	mov	r2, #5
   157a0:	mov	r0, #0
   157a4:	bl	11258 <dcgettext@plt>
   157a8:	mov	r6, r0
   157ac:	ldr	r0, [r4]
   157b0:	cmp	r0, #0
   157b4:	beq	157ec <__assert_fail@plt+0x427c>
   157b8:	ldr	r4, [r5]
   157bc:	bl	19140 <__assert_fail@plt+0x7bd0>
   157c0:	mov	r3, r0
   157c4:	movw	r2, #52884	; 0xce94
   157c8:	movt	r2, #1
   157cc:	mov	r0, #0
   157d0:	str	r6, [sp]
   157d4:	mov	r1, r4
   157d8:	bl	11324 <error@plt>
   157dc:	movw	r3, #57712	; 0xe170
   157e0:	movt	r3, #2
   157e4:	ldr	r0, [r3]
   157e8:	bl	11210 <_exit@plt>
   157ec:	mov	r3, r6
   157f0:	movw	r2, #52888	; 0xce98
   157f4:	movt	r2, #1
   157f8:	ldr	r1, [r5]
   157fc:	bl	11324 <error@plt>
   15800:	b	157dc <__assert_fail@plt+0x426c>
   15804:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15808:	strd	r6, [sp, #8]
   1580c:	str	r8, [sp, #16]
   15810:	str	lr, [sp, #20]
   15814:	bl	11330 <opendir@plt>
   15818:	subs	r4, r0, #0
   1581c:	beq	1582c <__assert_fail@plt+0x42bc>
   15820:	bl	114f8 <dirfd@plt>
   15824:	cmp	r0, #2
   15828:	bls	15844 <__assert_fail@plt+0x42d4>
   1582c:	mov	r0, r4
   15830:	ldrd	r4, [sp]
   15834:	ldrd	r6, [sp, #8]
   15838:	ldr	r8, [sp, #16]
   1583c:	add	sp, sp, #20
   15840:	pop	{pc}		; (ldr pc, [sp], #4)
   15844:	mov	r2, #3
   15848:	movw	r1, #1030	; 0x406
   1584c:	bl	1a594 <__assert_fail@plt+0x9024>
   15850:	mov	r6, r0
   15854:	bl	113f0 <__errno_location@plt>
   15858:	cmp	r6, #0
   1585c:	mov	r5, r0
   15860:	bge	15880 <__assert_fail@plt+0x4310>
   15864:	ldr	r7, [r0]
   15868:	mov	r8, #0
   1586c:	mov	r0, r4
   15870:	mov	r4, r8
   15874:	bl	11564 <closedir@plt>
   15878:	str	r7, [r5]
   1587c:	b	1582c <__assert_fail@plt+0x42bc>
   15880:	mov	r0, r6
   15884:	bl	114e0 <fdopendir@plt>
   15888:	subs	r8, r0, #0
   1588c:	ldr	r7, [r5]
   15890:	bne	1586c <__assert_fail@plt+0x42fc>
   15894:	mov	r0, r6
   15898:	bl	11558 <close@plt>
   1589c:	b	1586c <__assert_fail@plt+0x42fc>
   158a0:	push	{r1, r2, r3}
   158a4:	push	{lr}		; (str lr, [sp, #-4]!)
   158a8:	sub	sp, sp, #8
   158ac:	ldr	r1, [sp, #12]
   158b0:	ands	r2, r1, #64	; 0x40
   158b4:	bne	158d0 <__assert_fail@plt+0x4360>
   158b8:	bl	1133c <open64@plt>
   158bc:	bl	19408 <__assert_fail@plt+0x7e98>
   158c0:	add	sp, sp, #8
   158c4:	pop	{lr}		; (ldr lr, [sp], #4)
   158c8:	add	sp, sp, #12
   158cc:	bx	lr
   158d0:	add	r3, sp, #16
   158d4:	ldr	r2, [sp, #16]
   158d8:	str	r3, [sp, #4]
   158dc:	b	158b8 <__assert_fail@plt+0x4348>
   158e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   158e4:	mov	r5, r0
   158e8:	strd	r6, [sp, #8]
   158ec:	mov	r6, r2
   158f0:	lsrs	r2, r6, #30
   158f4:	str	fp, [sp, #16]
   158f8:	add	fp, sp, #20
   158fc:	movne	r2, #1
   15900:	moveq	r2, #0
   15904:	lsls	r0, r6, #2
   15908:	str	lr, [sp, #20]
   1590c:	bmi	15a14 <__assert_fail@plt+0x44a4>
   15910:	cmp	r2, #0
   15914:	bne	15a14 <__assert_fail@plt+0x44a4>
   15918:	cmp	r0, #4016	; 0xfb0
   1591c:	mov	r4, r1
   15920:	mov	r7, r3
   15924:	bhi	15a08 <__assert_fail@plt+0x4498>
   15928:	add	r3, r0, #22
   1592c:	bic	r3, r3, #7
   15930:	sub	sp, sp, r3
   15934:	add	r0, sp, #15
   15938:	bic	r0, r0, #15
   1593c:	cmp	r0, #0
   15940:	beq	15a14 <__assert_fail@plt+0x44a4>
   15944:	mov	r3, #1
   15948:	cmp	r6, #2
   1594c:	movhi	r2, r4
   15950:	movhi	ip, #0
   15954:	str	r3, [r0, #4]
   15958:	movhi	r3, #2
   1595c:	bls	159a4 <__assert_fail@plt+0x4434>
   15960:	ldrb	r1, [r2, #1]!
   15964:	ldrb	lr, [r4, ip]
   15968:	cmp	lr, r1
   1596c:	bne	15988 <__assert_fail@plt+0x4418>
   15970:	b	15a48 <__assert_fail@plt+0x44d8>
   15974:	ldr	lr, [r0, ip, lsl #2]
   15978:	sub	ip, ip, lr
   1597c:	ldrb	lr, [r4, ip]
   15980:	cmp	lr, r1
   15984:	beq	15a48 <__assert_fail@plt+0x44d8>
   15988:	cmp	ip, #0
   1598c:	bne	15974 <__assert_fail@plt+0x4404>
   15990:	mov	ip, #0
   15994:	str	r3, [r0, r3, lsl #2]
   15998:	add	r3, r3, #1
   1599c:	cmp	r6, r3
   159a0:	bne	15960 <__assert_fail@plt+0x43f0>
   159a4:	mov	r3, #0
   159a8:	mov	r1, r5
   159ac:	mov	r2, r3
   159b0:	str	r3, [r7]
   159b4:	ldrb	r3, [r5]
   159b8:	cmp	r3, #0
   159bc:	beq	159e8 <__assert_fail@plt+0x4478>
   159c0:	ldrb	ip, [r4, r2]
   159c4:	cmp	ip, r3
   159c8:	beq	15a1c <__assert_fail@plt+0x44ac>
   159cc:	cmp	r2, #0
   159d0:	beq	15a38 <__assert_fail@plt+0x44c8>
   159d4:	ldr	ip, [r0, r2, lsl #2]
   159d8:	cmp	r3, #0
   159dc:	add	r5, r5, ip
   159e0:	sub	r2, r2, ip
   159e4:	bne	159c0 <__assert_fail@plt+0x4450>
   159e8:	bl	1ac10 <__assert_fail@plt+0x96a0>
   159ec:	mov	r0, #1
   159f0:	sub	sp, fp, #20
   159f4:	ldrd	r4, [sp]
   159f8:	ldrd	r6, [sp, #8]
   159fc:	ldr	fp, [sp, #16]
   15a00:	add	sp, sp, #20
   15a04:	pop	{pc}		; (ldr pc, [sp], #4)
   15a08:	bl	1abb8 <__assert_fail@plt+0x9648>
   15a0c:	cmp	r0, #0
   15a10:	bne	15944 <__assert_fail@plt+0x43d4>
   15a14:	mov	r0, #0
   15a18:	b	159f0 <__assert_fail@plt+0x4480>
   15a1c:	add	r2, r2, #1
   15a20:	add	ip, r1, #1
   15a24:	cmp	r6, r2
   15a28:	beq	15a58 <__assert_fail@plt+0x44e8>
   15a2c:	ldrb	r3, [r1, #1]
   15a30:	mov	r1, ip
   15a34:	b	159b8 <__assert_fail@plt+0x4448>
   15a38:	ldrb	r3, [r1, #1]
   15a3c:	add	r5, r5, #1
   15a40:	add	r1, r1, #1
   15a44:	b	159b8 <__assert_fail@plt+0x4448>
   15a48:	add	ip, ip, #1
   15a4c:	sub	r1, r3, ip
   15a50:	str	r1, [r0, r3, lsl #2]
   15a54:	b	15998 <__assert_fail@plt+0x4428>
   15a58:	str	r5, [r7]
   15a5c:	b	159e8 <__assert_fail@plt+0x4478>
   15a60:	movw	r3, #52904	; 0xcea8
   15a64:	movt	r3, #1
   15a68:	str	r4, [sp, #-8]!
   15a6c:	movw	r1, #52924	; 0xcebc
   15a70:	movt	r1, #1
   15a74:	str	lr, [sp, #4]
   15a78:	movw	r0, #52936	; 0xcec8
   15a7c:	movt	r0, #1
   15a80:	mov	r2, #172	; 0xac
   15a84:	bl	11570 <__assert_fail@plt>
   15a88:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15a8c:	mov	r4, r1
   15a90:	strd	r6, [sp, #8]
   15a94:	strd	r8, [sp, #16]
   15a98:	strd	sl, [sp, #24]
   15a9c:	add	fp, sp, #32
   15aa0:	str	lr, [sp, #32]
   15aa4:	sub	sp, sp, #188	; 0xbc
   15aa8:	str	r2, [fp, #-220]	; 0xffffff24
   15aac:	str	r0, [fp, #-212]	; 0xffffff2c
   15ab0:	mov	r0, r1
   15ab4:	bl	1acf8 <__assert_fail@plt+0x9788>
   15ab8:	mov	r3, #44	; 0x2c
   15abc:	str	r0, [fp, #-208]	; 0xffffff30
   15ac0:	umull	r0, r1, r0, r3
   15ac4:	adds	r2, r1, #0
   15ac8:	movne	r2, #1
   15acc:	cmp	r0, #0
   15ad0:	blt	15eb8 <__assert_fail@plt+0x4948>
   15ad4:	cmp	r2, #0
   15ad8:	bne	15eb8 <__assert_fail@plt+0x4948>
   15adc:	ldr	r2, [fp, #-208]	; 0xffffff30
   15ae0:	mul	r0, r3, r2
   15ae4:	cmp	r0, #4016	; 0xfb0
   15ae8:	bhi	15ed8 <__assert_fail@plt+0x4968>
   15aec:	add	r3, r0, #22
   15af0:	bic	r3, r3, #7
   15af4:	sub	sp, sp, r3
   15af8:	add	r3, sp, #15
   15afc:	bic	sl, r3, #15
   15b00:	cmp	sl, #0
   15b04:	beq	15eb8 <__assert_fail@plt+0x4948>
   15b08:	ldr	r3, [fp, #-208]	; 0xffffff30
   15b0c:	mov	r1, #0
   15b10:	mov	r2, #0
   15b14:	movw	r8, #54160	; 0xd390
   15b18:	movt	r8, #1
   15b1c:	mov	r6, r1
   15b20:	add	r5, sl, #16
   15b24:	strb	r1, [fp, #-204]	; 0xffffff34
   15b28:	strb	r1, [fp, #-192]	; 0xffffff40
   15b2c:	str	r4, [fp, #-188]	; 0xffffff44
   15b30:	add	r9, r3, r3, lsl #2
   15b34:	mov	r3, #0
   15b38:	add	r9, sl, r9, lsl #3
   15b3c:	str	r9, [fp, #-216]	; 0xffffff28
   15b40:	strd	r2, [fp, #-200]	; 0xffffff38
   15b44:	b	15bc8 <__assert_fail@plt+0x4658>
   15b48:	ldrb	r3, [r4]
   15b4c:	lsr	r2, r3, #5
   15b50:	and	r3, r3, #31
   15b54:	ldr	r2, [r8, r2, lsl #2]
   15b58:	lsr	r3, r2, r3
   15b5c:	tst	r3, #1
   15b60:	beq	15ee4 <__assert_fail@plt+0x4974>
   15b64:	mov	r3, #1
   15b68:	str	r3, [fp, #-184]	; 0xffffff48
   15b6c:	ldrb	r2, [r4]
   15b70:	strb	r3, [fp, #-192]	; 0xffffff40
   15b74:	strb	r3, [fp, #-180]	; 0xffffff4c
   15b78:	mov	r4, r2
   15b7c:	str	r2, [fp, #-176]	; 0xffffff50
   15b80:	cmp	r4, #0
   15b84:	beq	15c44 <__assert_fail@plt+0x46d4>
   15b88:	mov	r9, #1
   15b8c:	ldr	r4, [fp, #-188]	; 0xffffff44
   15b90:	sub	r2, fp, #172	; 0xac
   15b94:	ldr	r7, [fp, #-184]	; 0xffffff48
   15b98:	cmp	r4, r2
   15b9c:	strne	r4, [r5, #-16]
   15ba0:	beq	15f04 <__assert_fail@plt+0x4994>
   15ba4:	cmp	r9, #0
   15ba8:	add	r4, r4, r7
   15bac:	str	r7, [r5, #-12]
   15bb0:	ldrne	r3, [fp, #-176]	; 0xffffff50
   15bb4:	add	r5, r5, #40	; 0x28
   15bb8:	strb	r9, [r5, #-48]	; 0xffffffd0
   15bbc:	strb	r6, [fp, #-192]	; 0xffffff40
   15bc0:	str	r4, [fp, #-188]	; 0xffffff44
   15bc4:	strne	r3, [r5, #-44]	; 0xffffffd4
   15bc8:	ldrb	r3, [fp, #-204]	; 0xffffff34
   15bcc:	ldr	r4, [fp, #-188]	; 0xffffff44
   15bd0:	cmp	r3, #0
   15bd4:	subne	r7, fp, #200	; 0xc8
   15bd8:	beq	15b48 <__assert_fail@plt+0x45d8>
   15bdc:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   15be0:	mov	r1, r0
   15be4:	mov	r0, r4
   15be8:	bl	193c8 <__assert_fail@plt+0x7e58>
   15bec:	mov	r2, r0
   15bf0:	mov	r3, r7
   15bf4:	mov	r1, r4
   15bf8:	sub	r0, fp, #176	; 0xb0
   15bfc:	bl	1a988 <__assert_fail@plt+0x9418>
   15c00:	cmn	r0, #1
   15c04:	str	r0, [fp, #-184]	; 0xffffff48
   15c08:	beq	15f1c <__assert_fail@plt+0x49ac>
   15c0c:	cmn	r0, #2
   15c10:	beq	15f34 <__assert_fail@plt+0x49c4>
   15c14:	cmp	r0, #0
   15c18:	beq	15f54 <__assert_fail@plt+0x49e4>
   15c1c:	ldr	r4, [fp, #-176]	; 0xffffff50
   15c20:	mov	r9, #1
   15c24:	mov	r0, r7
   15c28:	strb	r9, [fp, #-180]	; 0xffffff4c
   15c2c:	bl	11234 <mbsinit@plt>
   15c30:	cmp	r0, #0
   15c34:	strb	r9, [fp, #-192]	; 0xffffff40
   15c38:	strbne	r6, [fp, #-204]	; 0xffffff34
   15c3c:	cmp	r4, #0
   15c40:	bne	15b88 <__assert_fail@plt+0x4618>
   15c44:	ldr	r9, [fp, #-216]	; 0xffffff28
   15c48:	mov	r3, #1
   15c4c:	mov	r7, r4
   15c50:	ldr	r2, [fp, #-208]	; 0xffffff30
   15c54:	str	r3, [r9, #4]
   15c58:	cmp	r2, #2
   15c5c:	bls	15cfc <__assert_fail@plt+0x478c>
   15c60:	mov	r8, #2
   15c64:	mov	r5, sl
   15c68:	str	r4, [fp, #-216]	; 0xffffff28
   15c6c:	mov	r7, r8
   15c70:	ldr	r8, [fp, #-208]	; 0xffffff30
   15c74:	ldrb	r6, [r5, #48]	; 0x30
   15c78:	b	15ca8 <__assert_fail@plt+0x4738>
   15c7c:	ldrb	r2, [r3, #8]
   15c80:	cmp	r2, #0
   15c84:	beq	15cb8 <__assert_fail@plt+0x4748>
   15c88:	ldr	r3, [r3, #12]
   15c8c:	ldr	r2, [r5, #52]	; 0x34
   15c90:	cmp	r2, r3
   15c94:	beq	15cdc <__assert_fail@plt+0x476c>
   15c98:	cmp	r4, #0
   15c9c:	beq	1624c <__assert_fail@plt+0x4cdc>
   15ca0:	ldr	r3, [r9, r4, lsl #2]
   15ca4:	sub	r4, r4, r3
   15ca8:	add	r3, r4, r4, lsl #2
   15cac:	cmp	r6, #0
   15cb0:	add	r3, sl, r3, lsl #3
   15cb4:	bne	15c7c <__assert_fail@plt+0x470c>
   15cb8:	ldr	r1, [r3, #4]
   15cbc:	ldr	r2, [r5, #44]	; 0x2c
   15cc0:	cmp	r2, r1
   15cc4:	bne	15c98 <__assert_fail@plt+0x4728>
   15cc8:	ldr	r1, [r3]
   15ccc:	ldr	r0, [r5, #40]	; 0x28
   15cd0:	bl	1124c <memcmp@plt>
   15cd4:	cmp	r0, #0
   15cd8:	bne	15c98 <__assert_fail@plt+0x4728>
   15cdc:	add	r4, r4, #1
   15ce0:	sub	r2, r7, r4
   15ce4:	str	r2, [r9, r7, lsl #2]
   15ce8:	add	r7, r7, #1
   15cec:	add	r5, r5, #40	; 0x28
   15cf0:	cmp	r8, r7
   15cf4:	bne	15c74 <__assert_fail@plt+0x4704>
   15cf8:	ldr	r7, [fp, #-216]	; 0xffffff28
   15cfc:	mov	r1, #0
   15d00:	mov	r0, #0
   15d04:	str	r9, [fp, #-216]	; 0xffffff28
   15d08:	ldr	r3, [fp, #-212]	; 0xffffff2c
   15d0c:	mov	r2, #0
   15d10:	movw	ip, #54160	; 0xd390
   15d14:	movt	ip, #1
   15d18:	mov	r6, #1
   15d1c:	strd	r0, [fp, #-144]	; 0xffffff70
   15d20:	mov	r9, ip
   15d24:	strd	r0, [fp, #-88]	; 0xffffffa8
   15d28:	ldr	r1, [fp, #-220]	; 0xffffff24
   15d2c:	strb	r2, [fp, #-148]	; 0xffffff6c
   15d30:	str	r3, [fp, #-132]	; 0xffffff7c
   15d34:	str	r3, [fp, #-76]	; 0xffffffb4
   15d38:	mov	r3, r2
   15d3c:	strb	r2, [fp, #-136]	; 0xffffff78
   15d40:	strb	r2, [fp, #-92]	; 0xffffffa4
   15d44:	strb	r2, [fp, #-80]	; 0xffffffb0
   15d48:	str	r2, [r1]
   15d4c:	cmp	r3, #0
   15d50:	ldreq	r5, [fp, #-76]	; 0xffffffb4
   15d54:	beq	15e08 <__assert_fail@plt+0x4898>
   15d58:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   15d5c:	cmp	r3, #0
   15d60:	bne	162a8 <__assert_fail@plt+0x4d38>
   15d64:	add	r3, r7, r7, lsl #2
   15d68:	add	r3, sl, r3, lsl #3
   15d6c:	ldr	r4, [fp, #-72]	; 0xffffffb8
   15d70:	ldr	r2, [r3, #4]
   15d74:	cmp	r2, r4
   15d78:	beq	15ff8 <__assert_fail@plt+0x4a88>
   15d7c:	cmp	r7, #0
   15d80:	bne	1601c <__assert_fail@plt+0x4aac>
   15d84:	ldrb	r3, [fp, #-136]	; 0xffffff78
   15d88:	cmp	r3, #0
   15d8c:	bne	16294 <__assert_fail@plt+0x4d24>
   15d90:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   15d94:	ldr	r4, [fp, #-132]	; 0xffffff7c
   15d98:	cmp	r3, #0
   15d9c:	subne	r8, fp, #144	; 0x90
   15da0:	bne	161e8 <__assert_fail@plt+0x4c78>
   15da4:	ldrb	r3, [r4]
   15da8:	lsr	r2, r3, #5
   15dac:	and	r3, r3, #31
   15db0:	ldr	r2, [r9, r2, lsl #2]
   15db4:	lsr	r3, r2, r3
   15db8:	tst	r3, #1
   15dbc:	beq	161d0 <__assert_fail@plt+0x4c60>
   15dc0:	str	r6, [fp, #-128]	; 0xffffff80
   15dc4:	ldrb	r4, [r4]
   15dc8:	strb	r6, [fp, #-136]	; 0xffffff78
   15dcc:	strb	r6, [fp, #-124]	; 0xffffff84
   15dd0:	str	r4, [fp, #-120]	; 0xffffff88
   15dd4:	cmp	r4, #0
   15dd8:	beq	160b8 <__assert_fail@plt+0x4b48>
   15ddc:	ldr	r4, [fp, #-132]	; 0xffffff7c
   15de0:	mov	r3, #0
   15de4:	ldr	r2, [fp, #-128]	; 0xffffff80
   15de8:	strb	r3, [fp, #-136]	; 0xffffff78
   15dec:	strb	r3, [fp, #-80]	; 0xffffffb0
   15df0:	ldr	r5, [fp, #-76]	; 0xffffffb4
   15df4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   15df8:	add	r4, r4, r2
   15dfc:	str	r4, [fp, #-132]	; 0xffffff7c
   15e00:	add	r5, r5, r3
   15e04:	str	r5, [fp, #-76]	; 0xffffffb4
   15e08:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   15e0c:	cmp	r3, #0
   15e10:	subne	r4, fp, #88	; 0x58
   15e14:	bne	15f94 <__assert_fail@plt+0x4a24>
   15e18:	ldrb	r3, [r5]
   15e1c:	lsr	r2, r3, #5
   15e20:	and	r3, r3, #31
   15e24:	ldr	r2, [r9, r2, lsl #2]
   15e28:	lsr	r3, r2, r3
   15e2c:	tst	r3, #1
   15e30:	beq	15f7c <__assert_fail@plt+0x4a0c>
   15e34:	str	r6, [fp, #-72]	; 0xffffffb8
   15e38:	ldrb	r3, [r5]
   15e3c:	strb	r6, [fp, #-80]	; 0xffffffb0
   15e40:	strb	r6, [fp, #-68]	; 0xffffffbc
   15e44:	mov	r5, r3
   15e48:	str	r3, [fp, #-64]	; 0xffffffc0
   15e4c:	cmp	r5, #0
   15e50:	beq	15ea8 <__assert_fail@plt+0x4938>
   15e54:	add	r3, r7, r7, lsl #2
   15e58:	add	r3, sl, r3, lsl #3
   15e5c:	ldrb	r2, [r3, #8]
   15e60:	cmp	r2, #0
   15e64:	beq	15d6c <__assert_fail@plt+0x47fc>
   15e68:	ldr	r3, [r3, #12]
   15e6c:	cmp	r3, r5
   15e70:	bne	15d7c <__assert_fail@plt+0x480c>
   15e74:	ldr	r5, [fp, #-76]	; 0xffffffb4
   15e78:	ldr	r4, [fp, #-72]	; 0xffffffb8
   15e7c:	add	r7, r7, #1
   15e80:	add	r5, r5, r4
   15e84:	ldr	r2, [fp, #-208]	; 0xffffff30
   15e88:	mov	r3, #0
   15e8c:	strb	r3, [fp, #-80]	; 0xffffffb0
   15e90:	str	r5, [fp, #-76]	; 0xffffffb4
   15e94:	cmp	r2, r7
   15e98:	bne	15e08 <__assert_fail@plt+0x4898>
   15e9c:	ldr	r2, [fp, #-220]	; 0xffffff24
   15ea0:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15ea4:	str	r3, [r2]
   15ea8:	mov	r0, sl
   15eac:	bl	1ac10 <__assert_fail@plt+0x96a0>
   15eb0:	mov	r0, #1
   15eb4:	b	15ebc <__assert_fail@plt+0x494c>
   15eb8:	mov	r0, #0
   15ebc:	sub	sp, fp, #32
   15ec0:	ldrd	r4, [sp]
   15ec4:	ldrd	r6, [sp, #8]
   15ec8:	ldrd	r8, [sp, #16]
   15ecc:	ldrd	sl, [sp, #24]
   15ed0:	add	sp, sp, #32
   15ed4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ed8:	bl	1abb8 <__assert_fail@plt+0x9648>
   15edc:	mov	sl, r0
   15ee0:	b	15b00 <__assert_fail@plt+0x4590>
   15ee4:	sub	r7, fp, #200	; 0xc8
   15ee8:	mov	r0, r7
   15eec:	bl	11234 <mbsinit@plt>
   15ef0:	cmp	r0, #0
   15ef4:	beq	1630c <__assert_fail@plt+0x4d9c>
   15ef8:	mov	r3, #1
   15efc:	strb	r3, [fp, #-204]	; 0xffffff34
   15f00:	b	15bdc <__assert_fail@plt+0x466c>
   15f04:	mov	r2, r7
   15f08:	mov	r1, r4
   15f0c:	mov	r0, r5
   15f10:	bl	1121c <memcpy@plt>
   15f14:	str	r5, [r5, #-16]
   15f18:	b	15ba4 <__assert_fail@plt+0x4634>
   15f1c:	mov	r2, #1
   15f20:	mov	r9, #0
   15f24:	strb	r2, [fp, #-192]	; 0xffffff40
   15f28:	str	r2, [fp, #-184]	; 0xffffff48
   15f2c:	strb	r6, [fp, #-180]	; 0xffffff4c
   15f30:	b	15b8c <__assert_fail@plt+0x461c>
   15f34:	ldr	r0, [fp, #-188]	; 0xffffff44
   15f38:	mov	r9, #0
   15f3c:	bl	113c0 <strlen@plt>
   15f40:	mov	r2, #1
   15f44:	strb	r2, [fp, #-192]	; 0xffffff40
   15f48:	str	r0, [fp, #-184]	; 0xffffff48
   15f4c:	strb	r6, [fp, #-180]	; 0xffffff4c
   15f50:	b	15b8c <__assert_fail@plt+0x461c>
   15f54:	ldr	r3, [fp, #-188]	; 0xffffff44
   15f58:	mov	r2, #1
   15f5c:	str	r2, [fp, #-184]	; 0xffffff48
   15f60:	ldrb	r3, [r3]
   15f64:	cmp	r3, #0
   15f68:	bne	1632c <__assert_fail@plt+0x4dbc>
   15f6c:	ldr	r4, [fp, #-176]	; 0xffffff50
   15f70:	cmp	r4, #0
   15f74:	beq	15c20 <__assert_fail@plt+0x46b0>
   15f78:	bl	15a60 <__assert_fail@plt+0x44f0>
   15f7c:	sub	r4, fp, #88	; 0x58
   15f80:	mov	r0, r4
   15f84:	bl	11234 <mbsinit@plt>
   15f88:	cmp	r0, #0
   15f8c:	beq	1630c <__assert_fail@plt+0x4d9c>
   15f90:	strb	r6, [fp, #-92]	; 0xffffffa4
   15f94:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   15f98:	mov	r1, r0
   15f9c:	mov	r0, r5
   15fa0:	bl	193c8 <__assert_fail@plt+0x7e58>
   15fa4:	mov	r2, r0
   15fa8:	mov	r3, r4
   15fac:	mov	r1, r5
   15fb0:	sub	r0, fp, #64	; 0x40
   15fb4:	bl	1a988 <__assert_fail@plt+0x9418>
   15fb8:	cmn	r0, #1
   15fbc:	str	r0, [fp, #-72]	; 0xffffffb8
   15fc0:	beq	161bc <__assert_fail@plt+0x4c4c>
   15fc4:	cmn	r0, #2
   15fc8:	beq	16254 <__assert_fail@plt+0x4ce4>
   15fcc:	cmp	r0, #0
   15fd0:	beq	16270 <__assert_fail@plt+0x4d00>
   15fd4:	ldr	r5, [fp, #-64]	; 0xffffffc0
   15fd8:	mov	r0, r4
   15fdc:	strb	r6, [fp, #-68]	; 0xffffffbc
   15fe0:	bl	11234 <mbsinit@plt>
   15fe4:	cmp	r0, #0
   15fe8:	strb	r6, [fp, #-80]	; 0xffffffb0
   15fec:	movne	r3, #0
   15ff0:	strbne	r3, [fp, #-92]	; 0xffffffa4
   15ff4:	b	15e4c <__assert_fail@plt+0x48dc>
   15ff8:	ldr	r5, [fp, #-76]	; 0xffffffb4
   15ffc:	mov	r2, r4
   16000:	ldr	r0, [r3]
   16004:	mov	r1, r5
   16008:	bl	1124c <memcmp@plt>
   1600c:	cmp	r0, #0
   16010:	beq	15e7c <__assert_fail@plt+0x490c>
   16014:	cmp	r7, #0
   16018:	beq	15d84 <__assert_fail@plt+0x4814>
   1601c:	ldr	r3, [fp, #-216]	; 0xffffff28
   16020:	ldr	r5, [r3, r7, lsl #2]
   16024:	sub	r3, r7, r5
   16028:	cmp	r5, #0
   1602c:	str	r3, [fp, #-212]	; 0xffffff2c
   16030:	beq	161b4 <__assert_fail@plt+0x4c44>
   16034:	ldrb	r3, [fp, #-136]	; 0xffffff78
   16038:	cmp	r3, #0
   1603c:	beq	162b0 <__assert_fail@plt+0x4d40>
   16040:	ldrb	r3, [fp, #-124]	; 0xffffff84
   16044:	cmp	r3, #0
   16048:	bne	161a8 <__assert_fail@plt+0x4c38>
   1604c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16050:	mov	r2, #0
   16054:	subs	r5, r5, #1
   16058:	ldr	r3, [fp, #-128]	; 0xffffff80
   1605c:	strb	r2, [fp, #-136]	; 0xffffff78
   16060:	add	r4, r4, r3
   16064:	str	r4, [fp, #-132]	; 0xffffff7c
   16068:	beq	161b0 <__assert_fail@plt+0x4c40>
   1606c:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   16070:	cmp	r3, #0
   16074:	subne	r8, fp, #144	; 0x90
   16078:	bne	160d4 <__assert_fail@plt+0x4b64>
   1607c:	ldrb	r3, [r4]
   16080:	lsr	r2, r3, #5
   16084:	and	r3, r3, #31
   16088:	ldr	r2, [r9, r2, lsl #2]
   1608c:	lsr	r3, r2, r3
   16090:	tst	r3, #1
   16094:	beq	160bc <__assert_fail@plt+0x4b4c>
   16098:	str	r6, [fp, #-128]	; 0xffffff80
   1609c:	ldrb	r3, [r4]
   160a0:	strb	r6, [fp, #-136]	; 0xffffff78
   160a4:	strb	r6, [fp, #-124]	; 0xffffff84
   160a8:	mov	r4, r3
   160ac:	str	r3, [fp, #-120]	; 0xffffff88
   160b0:	cmp	r4, #0
   160b4:	bne	1604c <__assert_fail@plt+0x4adc>
   160b8:	bl	11540 <abort@plt>
   160bc:	sub	r8, fp, #144	; 0x90
   160c0:	mov	r0, r8
   160c4:	bl	11234 <mbsinit@plt>
   160c8:	cmp	r0, #0
   160cc:	beq	1630c <__assert_fail@plt+0x4d9c>
   160d0:	strb	r6, [fp, #-148]	; 0xffffff6c
   160d4:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   160d8:	mov	r1, r0
   160dc:	mov	r0, r4
   160e0:	bl	193c8 <__assert_fail@plt+0x7e58>
   160e4:	mov	r2, r0
   160e8:	mov	r3, r8
   160ec:	mov	r1, r4
   160f0:	sub	r0, fp, #120	; 0x78
   160f4:	bl	1a988 <__assert_fail@plt+0x9418>
   160f8:	cmn	r0, #1
   160fc:	str	r0, [fp, #-128]	; 0xffffff80
   16100:	beq	16138 <__assert_fail@plt+0x4bc8>
   16104:	cmn	r0, #2
   16108:	beq	1614c <__assert_fail@plt+0x4bdc>
   1610c:	cmp	r0, #0
   16110:	beq	16168 <__assert_fail@plt+0x4bf8>
   16114:	ldr	r4, [fp, #-120]	; 0xffffff88
   16118:	mov	r0, r8
   1611c:	strb	r6, [fp, #-124]	; 0xffffff84
   16120:	bl	11234 <mbsinit@plt>
   16124:	cmp	r0, #0
   16128:	strb	r6, [fp, #-136]	; 0xffffff78
   1612c:	movne	r3, #0
   16130:	strbne	r3, [fp, #-148]	; 0xffffff6c
   16134:	b	160b0 <__assert_fail@plt+0x4b40>
   16138:	mov	r3, #0
   1613c:	str	r6, [fp, #-128]	; 0xffffff80
   16140:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16144:	strb	r3, [fp, #-124]	; 0xffffff84
   16148:	b	16050 <__assert_fail@plt+0x4ae0>
   1614c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16150:	mov	r0, r4
   16154:	bl	113c0 <strlen@plt>
   16158:	mov	r3, #0
   1615c:	str	r0, [fp, #-128]	; 0xffffff80
   16160:	strb	r3, [fp, #-124]	; 0xffffff84
   16164:	b	16050 <__assert_fail@plt+0x4ae0>
   16168:	ldr	r4, [fp, #-132]	; 0xffffff7c
   1616c:	str	r6, [fp, #-128]	; 0xffffff80
   16170:	ldrb	r3, [r4]
   16174:	cmp	r3, #0
   16178:	bne	1632c <__assert_fail@plt+0x4dbc>
   1617c:	ldr	r4, [fp, #-120]	; 0xffffff88
   16180:	cmp	r4, #0
   16184:	beq	16118 <__assert_fail@plt+0x4ba8>
   16188:	movw	r3, #52904	; 0xcea8
   1618c:	movt	r3, #1
   16190:	movw	r1, #52924	; 0xcebc
   16194:	movt	r1, #1
   16198:	movw	r0, #52936	; 0xcec8
   1619c:	movt	r0, #1
   161a0:	mov	r2, #172	; 0xac
   161a4:	bl	11570 <__assert_fail@plt>
   161a8:	ldr	r4, [fp, #-120]	; 0xffffff88
   161ac:	b	160b0 <__assert_fail@plt+0x4b40>
   161b0:	ldr	r7, [fp, #-212]	; 0xffffff2c
   161b4:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   161b8:	b	15d4c <__assert_fail@plt+0x47dc>
   161bc:	mov	r3, #0
   161c0:	strb	r6, [fp, #-80]	; 0xffffffb0
   161c4:	str	r6, [fp, #-72]	; 0xffffffb8
   161c8:	strb	r3, [fp, #-68]	; 0xffffffbc
   161cc:	b	15d64 <__assert_fail@plt+0x47f4>
   161d0:	sub	r8, fp, #144	; 0x90
   161d4:	mov	r0, r8
   161d8:	bl	11234 <mbsinit@plt>
   161dc:	cmp	r0, #0
   161e0:	beq	1630c <__assert_fail@plt+0x4d9c>
   161e4:	strb	r6, [fp, #-148]	; 0xffffff6c
   161e8:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   161ec:	mov	r1, r0
   161f0:	mov	r0, r4
   161f4:	bl	193c8 <__assert_fail@plt+0x7e58>
   161f8:	mov	r2, r0
   161fc:	mov	r3, r8
   16200:	mov	r1, r4
   16204:	sub	r0, fp, #120	; 0x78
   16208:	bl	1a988 <__assert_fail@plt+0x9418>
   1620c:	cmn	r0, #1
   16210:	str	r0, [fp, #-128]	; 0xffffff80
   16214:	beq	162b8 <__assert_fail@plt+0x4d48>
   16218:	cmn	r0, #2
   1621c:	beq	162cc <__assert_fail@plt+0x4d5c>
   16220:	cmp	r0, #0
   16224:	beq	162e8 <__assert_fail@plt+0x4d78>
   16228:	ldr	r4, [fp, #-120]	; 0xffffff88
   1622c:	mov	r0, r8
   16230:	strb	r6, [fp, #-124]	; 0xffffff84
   16234:	bl	11234 <mbsinit@plt>
   16238:	cmp	r0, #0
   1623c:	strb	r6, [fp, #-136]	; 0xffffff78
   16240:	movne	r3, #0
   16244:	strbne	r3, [fp, #-148]	; 0xffffff6c
   16248:	b	15dd4 <__assert_fail@plt+0x4864>
   1624c:	str	r7, [r9, r7, lsl #2]
   16250:	b	15ce8 <__assert_fail@plt+0x4778>
   16254:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16258:	bl	113c0 <strlen@plt>
   1625c:	mov	r3, #0
   16260:	strb	r6, [fp, #-80]	; 0xffffffb0
   16264:	str	r0, [fp, #-72]	; 0xffffffb8
   16268:	strb	r3, [fp, #-68]	; 0xffffffbc
   1626c:	b	15d64 <__assert_fail@plt+0x47f4>
   16270:	ldr	r5, [fp, #-76]	; 0xffffffb4
   16274:	str	r6, [fp, #-72]	; 0xffffffb8
   16278:	ldrb	r3, [r5]
   1627c:	cmp	r3, #0
   16280:	bne	1632c <__assert_fail@plt+0x4dbc>
   16284:	ldr	r5, [fp, #-64]	; 0xffffffc0
   16288:	cmp	r5, #0
   1628c:	beq	15fd8 <__assert_fail@plt+0x4a68>
   16290:	b	15f78 <__assert_fail@plt+0x4a08>
   16294:	ldrb	r3, [fp, #-124]	; 0xffffff84
   16298:	cmp	r3, #0
   1629c:	beq	15ddc <__assert_fail@plt+0x486c>
   162a0:	ldr	r4, [fp, #-120]	; 0xffffff88
   162a4:	b	15dd4 <__assert_fail@plt+0x4864>
   162a8:	ldr	r5, [fp, #-64]	; 0xffffffc0
   162ac:	b	15e4c <__assert_fail@plt+0x48dc>
   162b0:	ldr	r4, [fp, #-132]	; 0xffffff7c
   162b4:	b	1606c <__assert_fail@plt+0x4afc>
   162b8:	mov	r3, #0
   162bc:	str	r6, [fp, #-128]	; 0xffffff80
   162c0:	ldr	r4, [fp, #-132]	; 0xffffff7c
   162c4:	strb	r3, [fp, #-124]	; 0xffffff84
   162c8:	b	15de0 <__assert_fail@plt+0x4870>
   162cc:	ldr	r4, [fp, #-132]	; 0xffffff7c
   162d0:	mov	r0, r4
   162d4:	bl	113c0 <strlen@plt>
   162d8:	mov	r3, #0
   162dc:	str	r0, [fp, #-128]	; 0xffffff80
   162e0:	strb	r3, [fp, #-124]	; 0xffffff84
   162e4:	b	15de0 <__assert_fail@plt+0x4870>
   162e8:	ldr	r4, [fp, #-132]	; 0xffffff7c
   162ec:	str	r6, [fp, #-128]	; 0xffffff80
   162f0:	ldrb	r3, [r4]
   162f4:	cmp	r3, #0
   162f8:	bne	1632c <__assert_fail@plt+0x4dbc>
   162fc:	ldr	r4, [fp, #-120]	; 0xffffff88
   16300:	cmp	r4, #0
   16304:	beq	1622c <__assert_fail@plt+0x4cbc>
   16308:	b	15f78 <__assert_fail@plt+0x4a08>
   1630c:	movw	r3, #52904	; 0xcea8
   16310:	movt	r3, #1
   16314:	movw	r1, #52924	; 0xcebc
   16318:	movt	r1, #1
   1631c:	movw	r0, #52956	; 0xcedc
   16320:	movt	r0, #1
   16324:	mov	r2, #143	; 0x8f
   16328:	bl	11570 <__assert_fail@plt>
   1632c:	movw	r3, #52904	; 0xcea8
   16330:	movt	r3, #1
   16334:	movw	r1, #52924	; 0xcebc
   16338:	movt	r1, #1
   1633c:	movw	r0, #52980	; 0xcef4
   16340:	movt	r0, #1
   16344:	mov	r2, #171	; 0xab
   16348:	bl	11570 <__assert_fail@plt>
   1634c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16350:	strd	r6, [sp, #8]
   16354:	strd	r8, [sp, #16]
   16358:	mov	r8, r1
   1635c:	strd	sl, [sp, #24]
   16360:	str	lr, [sp, #32]
   16364:	sub	sp, sp, #332	; 0x14c
   16368:	str	r0, [sp, #8]
   1636c:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   16370:	cmp	r0, #1
   16374:	bhi	16584 <__assert_fail@plt+0x5014>
   16378:	ldrb	r7, [r8]
   1637c:	cmp	r7, #0
   16380:	beq	16500 <__assert_fail@plt+0x4f90>
   16384:	ldr	r3, [sp, #8]
   16388:	ldrb	sl, [r3]
   1638c:	add	r3, r8, #1
   16390:	str	r3, [sp, #12]
   16394:	cmp	sl, #0
   16398:	beq	1657c <__assert_fail@plt+0x500c>
   1639c:	ldr	r3, [sp, #8]
   163a0:	mov	r5, #0
   163a4:	mov	fp, r8
   163a8:	mov	ip, r5
   163ac:	mov	lr, #1
   163b0:	str	r5, [sp, #4]
   163b4:	mov	r6, r3
   163b8:	mov	r9, r3
   163bc:	b	16420 <__assert_fail@plt+0x4eb0>
   163c0:	cmp	fp, #0
   163c4:	str	r3, [sp, #8]
   163c8:	beq	163f0 <__assert_fail@plt+0x4e80>
   163cc:	ldr	r3, [sp, #4]
   163d0:	mov	r0, fp
   163d4:	sub	r1, r4, r3
   163d8:	bl	1145c <strnlen@plt>
   163dc:	ldrb	r2, [fp, r0]!
   163e0:	ldr	r3, [sp, #8]
   163e4:	cmp	r2, #0
   163e8:	bne	16d34 <__assert_fail@plt+0x57c4>
   163ec:	str	r4, [sp, #4]
   163f0:	mov	r0, r8
   163f4:	bl	113c0 <strlen@plt>
   163f8:	mov	r2, r0
   163fc:	add	r3, sp, #272	; 0x110
   16400:	mov	r1, r8
   16404:	mov	r0, r6
   16408:	bl	158e0 <__assert_fail@plt+0x4370>
   1640c:	subs	lr, r0, #0
   16410:	bne	16fa0 <__assert_fail@plt+0x5a30>
   16414:	ldrb	sl, [r9, r5]
   16418:	mov	fp, lr
   1641c:	mov	ip, r4
   16420:	add	r5, r5, #1
   16424:	mov	r0, r6
   16428:	cmp	r7, sl
   1642c:	add	r6, r5, r9
   16430:	mov	r1, r6
   16434:	add	r4, ip, #1
   16438:	beq	16520 <__assert_fail@plt+0x4fb0>
   1643c:	ldrb	sl, [r9, r5]
   16440:	cmp	sl, #0
   16444:	beq	1657c <__assert_fail@plt+0x500c>
   16448:	cmp	r5, #9
   1644c:	movls	r3, #0
   16450:	andhi	r3, lr, #1
   16454:	cmp	r3, #0
   16458:	beq	1641c <__assert_fail@plt+0x4eac>
   1645c:	add	r2, r5, r5, lsl #2
   16460:	cmp	r4, r2
   16464:	bcs	163c0 <__assert_fail@plt+0x4e50>
   16468:	mov	lr, r3
   1646c:	b	1641c <__assert_fail@plt+0x4eac>
   16470:	add	r0, sp, #52	; 0x34
   16474:	bl	11234 <mbsinit@plt>
   16478:	cmp	r0, #0
   1647c:	beq	16ffc <__assert_fail@plt+0x5a8c>
   16480:	mov	r5, #1
   16484:	strb	r5, [sp, #48]	; 0x30
   16488:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   1648c:	mov	r1, r0
   16490:	mov	r0, r8
   16494:	bl	193c8 <__assert_fail@plt+0x7e58>
   16498:	mov	r2, r0
   1649c:	add	r3, sp, #52	; 0x34
   164a0:	mov	r1, r8
   164a4:	add	r0, sp, #76	; 0x4c
   164a8:	bl	1a988 <__assert_fail@plt+0x9418>
   164ac:	cmn	r0, #1
   164b0:	str	r0, [sp, #68]	; 0x44
   164b4:	strbeq	r5, [sp, #60]	; 0x3c
   164b8:	streq	r5, [sp, #68]	; 0x44
   164bc:	strbeq	r4, [sp, #72]	; 0x48
   164c0:	beq	165f4 <__assert_fail@plt+0x5084>
   164c4:	cmn	r0, #2
   164c8:	beq	165e0 <__assert_fail@plt+0x5070>
   164cc:	cmp	r0, #0
   164d0:	beq	16f60 <__assert_fail@plt+0x59f0>
   164d4:	ldr	r4, [sp, #76]	; 0x4c
   164d8:	mov	r5, #1
   164dc:	add	r0, sp, #52	; 0x34
   164e0:	strb	r5, [sp, #72]	; 0x48
   164e4:	bl	11234 <mbsinit@plt>
   164e8:	cmp	r0, #0
   164ec:	strb	r5, [sp, #60]	; 0x3c
   164f0:	movne	r3, #0
   164f4:	strbne	r3, [sp, #48]	; 0x30
   164f8:	cmp	r4, #0
   164fc:	bne	165f4 <__assert_fail@plt+0x5084>
   16500:	ldr	r0, [sp, #8]
   16504:	add	sp, sp, #332	; 0x14c
   16508:	ldrd	r4, [sp]
   1650c:	ldrd	r6, [sp, #8]
   16510:	ldrd	r8, [sp, #16]
   16514:	ldrd	sl, [sp, #24]
   16518:	add	sp, sp, #32
   1651c:	pop	{pc}		; (ldr pc, [sp], #4)
   16520:	ldrb	r3, [r8, #1]
   16524:	cmp	r3, #0
   16528:	beq	16504 <__assert_fail@plt+0x4f94>
   1652c:	ldrb	sl, [r9, r5]
   16530:	cmp	sl, #0
   16534:	beq	1657c <__assert_fail@plt+0x500c>
   16538:	cmp	r3, sl
   1653c:	add	r4, ip, #2
   16540:	bne	16448 <__assert_fail@plt+0x4ed8>
   16544:	ldr	r3, [sp, #12]
   16548:	add	r3, r3, #1
   1654c:	b	16564 <__assert_fail@plt+0x4ff4>
   16550:	add	r3, r3, #1
   16554:	cmp	r2, r4
   16558:	sub	r4, r3, r8
   1655c:	add	r4, r4, ip
   16560:	bne	16448 <__assert_fail@plt+0x4ed8>
   16564:	ldrb	r2, [r3]
   16568:	cmp	r2, #0
   1656c:	beq	16504 <__assert_fail@plt+0x4f94>
   16570:	ldrb	r4, [r1, #1]!
   16574:	cmp	r4, #0
   16578:	bne	16550 <__assert_fail@plt+0x4fe0>
   1657c:	mov	r0, #0
   16580:	b	16504 <__assert_fail@plt+0x4f94>
   16584:	ldrb	r2, [r8]
   16588:	mov	r3, #0
   1658c:	movw	r7, #54160	; 0xd390
   16590:	movt	r7, #1
   16594:	mov	r4, #0
   16598:	strb	r3, [sp, #48]	; 0x30
   1659c:	mov	r5, #0
   165a0:	strb	r3, [sp, #60]	; 0x3c
   165a4:	lsr	r3, r2, #5
   165a8:	and	r1, r2, #31
   165ac:	strd	r4, [sp, #52]	; 0x34
   165b0:	str	r8, [sp, #64]	; 0x40
   165b4:	ldr	r3, [r7, r3, lsl #2]
   165b8:	lsr	r3, r3, r1
   165bc:	ands	r4, r3, #1
   165c0:	beq	16470 <__assert_fail@plt+0x4f00>
   165c4:	mov	r3, #1
   165c8:	mov	r4, r2
   165cc:	strb	r3, [sp, #60]	; 0x3c
   165d0:	str	r3, [sp, #68]	; 0x44
   165d4:	strb	r3, [sp, #72]	; 0x48
   165d8:	str	r2, [sp, #76]	; 0x4c
   165dc:	b	164f8 <__assert_fail@plt+0x4f88>
   165e0:	ldr	r0, [sp, #64]	; 0x40
   165e4:	bl	113c0 <strlen@plt>
   165e8:	strb	r5, [sp, #60]	; 0x3c
   165ec:	str	r0, [sp, #68]	; 0x44
   165f0:	strb	r4, [sp, #72]	; 0x48
   165f4:	mov	r3, #0
   165f8:	ldr	r5, [sp, #8]
   165fc:	mov	r0, #1
   16600:	mov	sl, r3
   16604:	mov	r6, r3
   16608:	mov	r4, r0
   1660c:	mov	fp, r0
   16610:	str	r0, [sp, #4]
   16614:	str	r3, [sp, #32]
   16618:	str	r3, [sp, #36]	; 0x24
   1661c:	str	r3, [sp, #40]	; 0x28
   16620:	strb	r3, [sp, #104]	; 0x68
   16624:	str	r3, [sp, #108]	; 0x6c
   16628:	str	r3, [sp, #112]	; 0x70
   1662c:	strb	r3, [sp, #116]	; 0x74
   16630:	strb	r3, [sp, #160]	; 0xa0
   16634:	str	r3, [sp, #164]	; 0xa4
   16638:	str	r3, [sp, #168]	; 0xa8
   1663c:	strb	r3, [sp, #172]	; 0xac
   16640:	ldrb	r3, [sp, #160]	; 0xa0
   16644:	str	r8, [sp, #12]
   16648:	str	r8, [sp, #120]	; 0x78
   1664c:	str	r5, [sp, #176]	; 0xb0
   16650:	cmp	r3, #0
   16654:	addne	r8, sp, #164	; 0xa4
   16658:	bne	16990 <__assert_fail@plt+0x5420>
   1665c:	ldrb	r3, [r5]
   16660:	lsr	r2, r3, #5
   16664:	and	r3, r3, #31
   16668:	ldr	r2, [r7, r2, lsl #2]
   1666c:	lsr	r3, r2, r3
   16670:	tst	r3, #1
   16674:	beq	16b50 <__assert_fail@plt+0x55e0>
   16678:	str	fp, [sp, #180]	; 0xb4
   1667c:	ldrb	r5, [r5]
   16680:	strb	r4, [sp, #172]	; 0xac
   16684:	strb	r4, [sp, #184]	; 0xb8
   16688:	str	r5, [sp, #188]	; 0xbc
   1668c:	cmp	r5, #0
   16690:	beq	1657c <__assert_fail@plt+0x500c>
   16694:	ldr	r3, [sp, #4]
   16698:	cmp	sl, #9
   1669c:	movls	r3, #0
   166a0:	andhi	r3, r3, #1
   166a4:	cmp	r3, #0
   166a8:	addeq	r6, r6, #1
   166ac:	beq	166c4 <__assert_fail@plt+0x5154>
   166b0:	add	r2, sl, sl, lsl #2
   166b4:	cmp	r6, r2
   166b8:	addcc	r6, r6, #1
   166bc:	strcc	r3, [sp, #4]
   166c0:	bcs	16ba8 <__assert_fail@plt+0x5638>
   166c4:	ldrb	r3, [sp, #72]	; 0x48
   166c8:	cmp	r3, #0
   166cc:	beq	16ac0 <__assert_fail@plt+0x5550>
   166d0:	ldr	r3, [sp, #76]	; 0x4c
   166d4:	ldr	r2, [sp, #188]	; 0xbc
   166d8:	cmp	r2, r3
   166dc:	bne	16964 <__assert_fail@plt+0x53f4>
   166e0:	ldr	ip, [sp, #12]
   166e4:	ldr	r3, [sp, #32]
   166e8:	ldr	r1, [sp, #176]	; 0xb0
   166ec:	ldrb	r0, [ip]
   166f0:	str	r3, [sp, #276]	; 0x114
   166f4:	ldr	r3, [sp, #36]	; 0x24
   166f8:	str	ip, [sp, #288]	; 0x120
   166fc:	ldr	r2, [sp, #180]	; 0xb4
   16700:	and	lr, r0, #31
   16704:	str	r3, [sp, #280]	; 0x118
   16708:	lsr	r3, r0, #5
   1670c:	str	r2, [sp, #236]	; 0xec
   16710:	ldr	r8, [r7, r3, lsl #2]
   16714:	ldrd	r2, [sp, #168]	; 0xa8
   16718:	ldr	ip, [sp, #236]	; 0xec
   1671c:	lsr	r8, r8, lr
   16720:	strd	r2, [sp, #224]	; 0xe0
   16724:	ands	lr, r8, #1
   16728:	ldrd	r2, [sp, #184]	; 0xb8
   1672c:	add	ip, ip, r1
   16730:	mov	r1, #0
   16734:	str	lr, [sp, #44]	; 0x2c
   16738:	strb	r1, [sp, #228]	; 0xe4
   1673c:	str	ip, [sp, #232]	; 0xe8
   16740:	mov	r8, r2
   16744:	mov	r9, r3
   16748:	ldrd	r2, [sp, #160]	; 0xa0
   1674c:	strd	r2, [sp, #216]	; 0xd8
   16750:	mov	r2, r8
   16754:	mov	r3, r9
   16758:	ldrd	r8, [sp, #200]	; 0xc8
   1675c:	strb	r1, [sp, #272]	; 0x110
   16760:	strb	r1, [sp, #284]	; 0x11c
   16764:	strd	r8, [sp, #16]
   16768:	ldrd	r8, [sp, #208]	; 0xd0
   1676c:	strd	r2, [sp, #240]	; 0xf0
   16770:	ldrd	r2, [sp, #192]	; 0xc0
   16774:	strd	r8, [sp, #24]
   16778:	ldrd	r8, [sp, #16]
   1677c:	strd	r2, [sp, #248]	; 0xf8
   16780:	add	r3, sp, #256	; 0x100
   16784:	strd	r8, [r3]
   16788:	add	r3, sp, #264	; 0x108
   1678c:	ldrd	r8, [sp, #24]
   16790:	strd	r8, [r3]
   16794:	beq	16e08 <__assert_fail@plt+0x5898>
   16798:	mov	r5, r0
   1679c:	strb	r4, [sp, #284]	; 0x11c
   167a0:	cmp	r5, #0
   167a4:	str	fp, [sp, #292]	; 0x124
   167a8:	strb	r4, [sp, #296]	; 0x128
   167ac:	str	r0, [sp, #300]	; 0x12c
   167b0:	beq	16e88 <__assert_fail@plt+0x5918>
   167b4:	ldr	r5, [sp, #288]	; 0x120
   167b8:	mov	r3, #0
   167bc:	add	r6, r6, #1
   167c0:	ldr	r2, [sp, #292]	; 0x124
   167c4:	mov	r9, r3
   167c8:	strb	r3, [sp, #284]	; 0x11c
   167cc:	add	r5, r5, r2
   167d0:	str	r5, [sp, #288]	; 0x120
   167d4:	b	168bc <__assert_fail@plt+0x534c>
   167d8:	ldrb	r3, [r5]
   167dc:	lsr	r2, r3, #5
   167e0:	and	r3, r3, #31
   167e4:	ldr	r2, [r7, r2, lsl #2]
   167e8:	lsr	r3, r2, r3
   167ec:	tst	r3, #1
   167f0:	beq	16aa4 <__assert_fail@plt+0x5534>
   167f4:	str	fp, [sp, #292]	; 0x124
   167f8:	ldrb	r5, [r5]
   167fc:	strb	r4, [sp, #284]	; 0x11c
   16800:	strb	r4, [sp, #296]	; 0x128
   16804:	cmp	r5, #0
   16808:	str	r5, [sp, #300]	; 0x12c
   1680c:	beq	16938 <__assert_fail@plt+0x53c8>
   16810:	ldrb	r3, [sp, #228]	; 0xe4
   16814:	cmp	r3, #0
   16818:	bne	16a78 <__assert_fail@plt+0x5508>
   1681c:	ldrb	r3, [sp, #216]	; 0xd8
   16820:	ldr	r5, [sp, #232]	; 0xe8
   16824:	cmp	r3, #0
   16828:	addne	r8, sp, #220	; 0xdc
   1682c:	bne	16a0c <__assert_fail@plt+0x549c>
   16830:	ldrb	r3, [r5]
   16834:	lsr	r2, r3, #5
   16838:	and	r3, r3, #31
   1683c:	ldr	r2, [r7, r2, lsl #2]
   16840:	lsr	r3, r2, r3
   16844:	tst	r3, #1
   16848:	beq	169f4 <__assert_fail@plt+0x5484>
   1684c:	str	fp, [sp, #236]	; 0xec
   16850:	ldrb	r0, [r5]
   16854:	strb	r4, [sp, #228]	; 0xe4
   16858:	strb	r4, [sp, #240]	; 0xf0
   1685c:	mov	r5, r0
   16860:	str	r0, [sp, #244]	; 0xf4
   16864:	cmp	r5, #0
   16868:	beq	1657c <__assert_fail@plt+0x500c>
   1686c:	ldrb	r3, [sp, #296]	; 0x128
   16870:	cmp	r3, #0
   16874:	beq	16954 <__assert_fail@plt+0x53e4>
   16878:	ldr	r0, [sp, #300]	; 0x12c
   1687c:	subs	r0, r0, r5
   16880:	movne	r0, #1
   16884:	cmp	r0, #0
   16888:	add	r2, r6, #1
   1688c:	bne	16964 <__assert_fail@plt+0x53f4>
   16890:	mov	r6, r2
   16894:	ldr	r3, [sp, #232]	; 0xe8
   16898:	strb	r0, [sp, #228]	; 0xe4
   1689c:	ldr	r1, [sp, #236]	; 0xec
   168a0:	strb	r0, [sp, #284]	; 0x11c
   168a4:	ldr	r5, [sp, #288]	; 0x120
   168a8:	ldr	r2, [sp, #292]	; 0x124
   168ac:	add	r3, r3, r1
   168b0:	str	r3, [sp, #232]	; 0xe8
   168b4:	add	r5, r5, r2
   168b8:	str	r5, [sp, #288]	; 0x120
   168bc:	ldrb	r3, [sp, #272]	; 0x110
   168c0:	cmp	r3, #0
   168c4:	beq	167d8 <__assert_fail@plt+0x5268>
   168c8:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   168cc:	mov	r1, r0
   168d0:	mov	r0, r5
   168d4:	bl	193c8 <__assert_fail@plt+0x7e58>
   168d8:	mov	r2, r0
   168dc:	add	r3, sp, #276	; 0x114
   168e0:	mov	r1, r5
   168e4:	add	r0, sp, #300	; 0x12c
   168e8:	bl	1a988 <__assert_fail@plt+0x9418>
   168ec:	cmn	r0, #1
   168f0:	str	r0, [sp, #292]	; 0x124
   168f4:	strbeq	r4, [sp, #284]	; 0x11c
   168f8:	streq	fp, [sp, #292]	; 0x124
   168fc:	strbeq	r9, [sp, #296]	; 0x128
   16900:	beq	16810 <__assert_fail@plt+0x52a0>
   16904:	cmn	r0, #2
   16908:	beq	16af0 <__assert_fail@plt+0x5580>
   1690c:	cmp	r0, #0
   16910:	beq	16b08 <__assert_fail@plt+0x5598>
   16914:	ldr	r5, [sp, #300]	; 0x12c
   16918:	add	r0, sp, #276	; 0x114
   1691c:	strb	r4, [sp, #296]	; 0x128
   16920:	bl	11234 <mbsinit@plt>
   16924:	cmp	r0, #0
   16928:	strb	r4, [sp, #284]	; 0x11c
   1692c:	strbne	r9, [sp, #272]	; 0x110
   16930:	cmp	r5, #0
   16934:	bne	16810 <__assert_fail@plt+0x52a0>
   16938:	ldr	r0, [sp, #176]	; 0xb0
   1693c:	b	16504 <__assert_fail@plt+0x4f94>
   16940:	ldr	r0, [sp, #232]	; 0xe8
   16944:	bl	113c0 <strlen@plt>
   16948:	strb	r4, [sp, #228]	; 0xe4
   1694c:	str	r0, [sp, #236]	; 0xec
   16950:	strb	r9, [sp, #240]	; 0xf0
   16954:	ldr	r2, [sp, #236]	; 0xec
   16958:	ldr	r3, [sp, #292]	; 0x124
   1695c:	cmp	r2, r3
   16960:	beq	16a8c <__assert_fail@plt+0x551c>
   16964:	ldr	r5, [sp, #176]	; 0xb0
   16968:	ldr	r8, [sp, #180]	; 0xb4
   1696c:	mov	r3, #0
   16970:	add	r5, r5, r8
   16974:	add	sl, sl, #1
   16978:	strb	r3, [sp, #172]	; 0xac
   1697c:	ldrb	r3, [sp, #160]	; 0xa0
   16980:	str	r5, [sp, #176]	; 0xb0
   16984:	cmp	r3, #0
   16988:	addne	r8, sp, #164	; 0xa4
   1698c:	beq	1665c <__assert_fail@plt+0x50ec>
   16990:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   16994:	mov	r1, r0
   16998:	mov	r0, r5
   1699c:	bl	193c8 <__assert_fail@plt+0x7e58>
   169a0:	mov	r2, r0
   169a4:	mov	r3, r8
   169a8:	mov	r1, r5
   169ac:	add	r0, sp, #188	; 0xbc
   169b0:	bl	1a988 <__assert_fail@plt+0x9418>
   169b4:	cmn	r0, #1
   169b8:	str	r0, [sp, #180]	; 0xb4
   169bc:	beq	16b6c <__assert_fail@plt+0x55fc>
   169c0:	cmn	r0, #2
   169c4:	beq	16d74 <__assert_fail@plt+0x5804>
   169c8:	cmp	r0, #0
   169cc:	bne	16d48 <__assert_fail@plt+0x57d8>
   169d0:	ldr	r5, [sp, #176]	; 0xb0
   169d4:	str	fp, [sp, #180]	; 0xb4
   169d8:	ldrb	r3, [r5]
   169dc:	cmp	r3, #0
   169e0:	bne	1701c <__assert_fail@plt+0x5aac>
   169e4:	ldr	r5, [sp, #188]	; 0xbc
   169e8:	cmp	r5, #0
   169ec:	beq	16d4c <__assert_fail@plt+0x57dc>
   169f0:	b	16f80 <__assert_fail@plt+0x5a10>
   169f4:	add	r8, sp, #220	; 0xdc
   169f8:	mov	r0, r8
   169fc:	bl	11234 <mbsinit@plt>
   16a00:	cmp	r0, #0
   16a04:	beq	16ffc <__assert_fail@plt+0x5a8c>
   16a08:	strb	r4, [sp, #216]	; 0xd8
   16a0c:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   16a10:	mov	r1, r0
   16a14:	mov	r0, r5
   16a18:	bl	193c8 <__assert_fail@plt+0x7e58>
   16a1c:	mov	r2, r0
   16a20:	mov	r3, r8
   16a24:	mov	r1, r5
   16a28:	add	r0, sp, #244	; 0xf4
   16a2c:	bl	1a988 <__assert_fail@plt+0x9418>
   16a30:	cmn	r0, #1
   16a34:	str	r0, [sp, #236]	; 0xec
   16a38:	strbeq	r4, [sp, #228]	; 0xe4
   16a3c:	streq	fp, [sp, #236]	; 0xec
   16a40:	strbeq	r9, [sp, #240]	; 0xf0
   16a44:	beq	16954 <__assert_fail@plt+0x53e4>
   16a48:	cmn	r0, #2
   16a4c:	beq	16940 <__assert_fail@plt+0x53d0>
   16a50:	cmp	r0, #0
   16a54:	beq	16b2c <__assert_fail@plt+0x55bc>
   16a58:	ldr	r5, [sp, #244]	; 0xf4
   16a5c:	mov	r0, r8
   16a60:	strb	r4, [sp, #240]	; 0xf0
   16a64:	bl	11234 <mbsinit@plt>
   16a68:	cmp	r0, #0
   16a6c:	strb	r4, [sp, #228]	; 0xe4
   16a70:	strbne	r9, [sp, #216]	; 0xd8
   16a74:	b	16864 <__assert_fail@plt+0x52f4>
   16a78:	ldrb	r3, [sp, #240]	; 0xf0
   16a7c:	cmp	r3, #0
   16a80:	beq	16954 <__assert_fail@plt+0x53e4>
   16a84:	ldr	r5, [sp, #244]	; 0xf4
   16a88:	b	16864 <__assert_fail@plt+0x52f4>
   16a8c:	ldr	r0, [sp, #232]	; 0xe8
   16a90:	ldr	r1, [sp, #288]	; 0x120
   16a94:	bl	1124c <memcmp@plt>
   16a98:	adds	r0, r0, #0
   16a9c:	movne	r0, #1
   16aa0:	b	16884 <__assert_fail@plt+0x5314>
   16aa4:	add	r0, sp, #276	; 0x114
   16aa8:	bl	11234 <mbsinit@plt>
   16aac:	cmp	r0, #0
   16ab0:	beq	16ffc <__assert_fail@plt+0x5a8c>
   16ab4:	strb	r4, [sp, #272]	; 0x110
   16ab8:	b	168c8 <__assert_fail@plt+0x5358>
   16abc:	add	r6, r6, #1
   16ac0:	ldr	r3, [sp, #68]	; 0x44
   16ac4:	ldr	r5, [sp, #176]	; 0xb0
   16ac8:	ldr	r8, [sp, #180]	; 0xb4
   16acc:	cmp	r8, r3
   16ad0:	bne	1696c <__assert_fail@plt+0x53fc>
   16ad4:	mov	r2, r8
   16ad8:	mov	r0, r5
   16adc:	ldr	r1, [sp, #64]	; 0x40
   16ae0:	bl	1124c <memcmp@plt>
   16ae4:	cmp	r0, #0
   16ae8:	bne	1696c <__assert_fail@plt+0x53fc>
   16aec:	b	166e0 <__assert_fail@plt+0x5170>
   16af0:	ldr	r0, [sp, #288]	; 0x120
   16af4:	bl	113c0 <strlen@plt>
   16af8:	strb	r4, [sp, #284]	; 0x11c
   16afc:	str	r0, [sp, #292]	; 0x124
   16b00:	strb	r9, [sp, #296]	; 0x128
   16b04:	b	16810 <__assert_fail@plt+0x52a0>
   16b08:	ldr	r3, [sp, #288]	; 0x120
   16b0c:	str	fp, [sp, #292]	; 0x124
   16b10:	ldrb	r3, [r3]
   16b14:	cmp	r3, #0
   16b18:	bne	1701c <__assert_fail@plt+0x5aac>
   16b1c:	ldr	r5, [sp, #300]	; 0x12c
   16b20:	cmp	r5, #0
   16b24:	beq	16918 <__assert_fail@plt+0x53a8>
   16b28:	b	16f80 <__assert_fail@plt+0x5a10>
   16b2c:	ldr	r3, [sp, #232]	; 0xe8
   16b30:	str	fp, [sp, #236]	; 0xec
   16b34:	ldrb	r3, [r3]
   16b38:	cmp	r3, #0
   16b3c:	bne	1701c <__assert_fail@plt+0x5aac>
   16b40:	ldr	r5, [sp, #244]	; 0xf4
   16b44:	cmp	r5, #0
   16b48:	beq	16a5c <__assert_fail@plt+0x54ec>
   16b4c:	b	16f80 <__assert_fail@plt+0x5a10>
   16b50:	add	r8, sp, #164	; 0xa4
   16b54:	mov	r0, r8
   16b58:	bl	11234 <mbsinit@plt>
   16b5c:	cmp	r0, #0
   16b60:	beq	16ffc <__assert_fail@plt+0x5a8c>
   16b64:	strb	r4, [sp, #160]	; 0xa0
   16b68:	b	16990 <__assert_fail@plt+0x5420>
   16b6c:	mov	r3, #0
   16b70:	strb	r4, [sp, #172]	; 0xac
   16b74:	str	fp, [sp, #180]	; 0xb4
   16b78:	strb	r3, [sp, #184]	; 0xb8
   16b7c:	ldr	r3, [sp, #4]
   16b80:	cmp	sl, #9
   16b84:	movls	r3, #0
   16b88:	andhi	r3, r3, #1
   16b8c:	cmp	r3, #0
   16b90:	beq	16abc <__assert_fail@plt+0x554c>
   16b94:	add	r2, sl, sl, lsl #2
   16b98:	cmp	r6, r2
   16b9c:	addcc	r6, r6, #1
   16ba0:	strcc	r3, [sp, #4]
   16ba4:	bcc	16ac0 <__assert_fail@plt+0x5550>
   16ba8:	ldr	r3, [sp, #40]	; 0x28
   16bac:	subs	r8, r6, r3
   16bb0:	ldrb	r3, [sp, #116]	; 0x74
   16bb4:	beq	16fe0 <__assert_fail@plt+0x5a70>
   16bb8:	cmp	r3, #0
   16bbc:	beq	16d6c <__assert_fail@plt+0x57fc>
   16bc0:	ldrb	r3, [sp, #128]	; 0x80
   16bc4:	cmp	r3, #0
   16bc8:	bne	16d40 <__assert_fail@plt+0x57d0>
   16bcc:	ldr	r5, [sp, #120]	; 0x78
   16bd0:	mov	r2, #0
   16bd4:	subs	r8, r8, #1
   16bd8:	ldr	r3, [sp, #124]	; 0x7c
   16bdc:	strb	r2, [sp, #116]	; 0x74
   16be0:	add	r5, r5, r3
   16be4:	str	r5, [sp, #4]
   16be8:	str	r5, [sp, #120]	; 0x78
   16bec:	beq	16d98 <__assert_fail@plt+0x5828>
   16bf0:	ldrb	r3, [sp, #104]	; 0x68
   16bf4:	cmp	r3, #0
   16bf8:	addne	r9, sp, #108	; 0x6c
   16bfc:	bne	16c7c <__assert_fail@plt+0x570c>
   16c00:	ldrb	r3, [r5]
   16c04:	lsr	r2, r3, #5
   16c08:	and	r3, r3, #31
   16c0c:	ldr	r2, [r7, r2, lsl #2]
   16c10:	lsr	r3, r2, r3
   16c14:	tst	r3, #1
   16c18:	beq	16c64 <__assert_fail@plt+0x56f4>
   16c1c:	str	fp, [sp, #124]	; 0x7c
   16c20:	ldrb	r5, [r5]
   16c24:	strb	r4, [sp, #116]	; 0x74
   16c28:	strb	r4, [sp, #128]	; 0x80
   16c2c:	str	r5, [sp, #132]	; 0x84
   16c30:	cmp	r5, #0
   16c34:	bne	16bcc <__assert_fail@plt+0x565c>
   16c38:	ldrb	r3, [sp, #116]	; 0x74
   16c3c:	cmp	r3, #0
   16c40:	beq	16d90 <__assert_fail@plt+0x5820>
   16c44:	add	r2, sp, #272	; 0x110
   16c48:	ldrd	r0, [sp, #8]
   16c4c:	bl	15a88 <__assert_fail@plt+0x4518>
   16c50:	subs	r3, r0, #0
   16c54:	str	r3, [sp, #4]
   16c58:	bne	16fa0 <__assert_fail@plt+0x5a30>
   16c5c:	ldrb	r3, [sp, #184]	; 0xb8
   16c60:	b	16df0 <__assert_fail@plt+0x5880>
   16c64:	add	r9, sp, #108	; 0x6c
   16c68:	mov	r0, r9
   16c6c:	bl	11234 <mbsinit@plt>
   16c70:	cmp	r0, #0
   16c74:	beq	16ffc <__assert_fail@plt+0x5a8c>
   16c78:	strb	r4, [sp, #104]	; 0x68
   16c7c:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   16c80:	mov	r1, r0
   16c84:	mov	r0, r5
   16c88:	bl	193c8 <__assert_fail@plt+0x7e58>
   16c8c:	mov	r2, r0
   16c90:	mov	r3, r9
   16c94:	mov	r1, r5
   16c98:	add	r0, sp, #132	; 0x84
   16c9c:	bl	1a988 <__assert_fail@plt+0x9418>
   16ca0:	cmn	r0, #1
   16ca4:	str	r0, [sp, #124]	; 0x7c
   16ca8:	beq	16ce0 <__assert_fail@plt+0x5770>
   16cac:	cmn	r0, #2
   16cb0:	beq	16cf4 <__assert_fail@plt+0x5784>
   16cb4:	cmp	r0, #0
   16cb8:	beq	16d10 <__assert_fail@plt+0x57a0>
   16cbc:	ldr	r5, [sp, #132]	; 0x84
   16cc0:	mov	r0, r9
   16cc4:	strb	r4, [sp, #128]	; 0x80
   16cc8:	bl	11234 <mbsinit@plt>
   16ccc:	cmp	r0, #0
   16cd0:	strb	r4, [sp, #116]	; 0x74
   16cd4:	movne	r3, #0
   16cd8:	strbne	r3, [sp, #104]	; 0x68
   16cdc:	b	16c30 <__assert_fail@plt+0x56c0>
   16ce0:	mov	r3, #0
   16ce4:	str	fp, [sp, #124]	; 0x7c
   16ce8:	ldr	r5, [sp, #120]	; 0x78
   16cec:	strb	r3, [sp, #128]	; 0x80
   16cf0:	b	16bd0 <__assert_fail@plt+0x5660>
   16cf4:	ldr	r5, [sp, #120]	; 0x78
   16cf8:	mov	r0, r5
   16cfc:	bl	113c0 <strlen@plt>
   16d00:	mov	r3, #0
   16d04:	str	r0, [sp, #124]	; 0x7c
   16d08:	strb	r3, [sp, #128]	; 0x80
   16d0c:	b	16bd0 <__assert_fail@plt+0x5660>
   16d10:	ldr	r5, [sp, #120]	; 0x78
   16d14:	str	fp, [sp, #124]	; 0x7c
   16d18:	ldrb	r3, [r5]
   16d1c:	cmp	r3, #0
   16d20:	bne	1701c <__assert_fail@plt+0x5aac>
   16d24:	ldr	r5, [sp, #132]	; 0x84
   16d28:	cmp	r5, #0
   16d2c:	beq	16cc0 <__assert_fail@plt+0x5750>
   16d30:	b	16f80 <__assert_fail@plt+0x5a10>
   16d34:	mov	lr, r3
   16d38:	str	r4, [sp, #4]
   16d3c:	b	1641c <__assert_fail@plt+0x4eac>
   16d40:	ldr	r5, [sp, #132]	; 0x84
   16d44:	b	16c30 <__assert_fail@plt+0x56c0>
   16d48:	ldr	r5, [sp, #188]	; 0xbc
   16d4c:	mov	r0, r8
   16d50:	strb	r4, [sp, #184]	; 0xb8
   16d54:	bl	11234 <mbsinit@plt>
   16d58:	cmp	r0, #0
   16d5c:	strb	r4, [sp, #172]	; 0xac
   16d60:	movne	r3, #0
   16d64:	strbne	r3, [sp, #160]	; 0xa0
   16d68:	b	1668c <__assert_fail@plt+0x511c>
   16d6c:	ldr	r5, [sp, #120]	; 0x78
   16d70:	b	16bf0 <__assert_fail@plt+0x5680>
   16d74:	ldr	r0, [sp, #176]	; 0xb0
   16d78:	bl	113c0 <strlen@plt>
   16d7c:	mov	r3, #0
   16d80:	strb	r4, [sp, #172]	; 0xac
   16d84:	str	r0, [sp, #180]	; 0xb4
   16d88:	strb	r3, [sp, #184]	; 0xb8
   16d8c:	b	16b7c <__assert_fail@plt+0x560c>
   16d90:	ldr	r3, [sp, #120]	; 0x78
   16d94:	str	r3, [sp, #4]
   16d98:	ldrb	r3, [sp, #104]	; 0x68
   16d9c:	cmp	r3, #0
   16da0:	addne	r9, sp, #108	; 0x6c
   16da4:	bne	16ea4 <__assert_fail@plt+0x5934>
   16da8:	ldr	r1, [sp, #4]
   16dac:	ldrb	r3, [r1]
   16db0:	lsr	r2, r3, #5
   16db4:	and	r3, r3, #31
   16db8:	ldr	r2, [r7, r2, lsl #2]
   16dbc:	lsr	r3, r2, r3
   16dc0:	tst	r3, #1
   16dc4:	beq	16e8c <__assert_fail@plt+0x591c>
   16dc8:	str	fp, [sp, #124]	; 0x7c
   16dcc:	ldrb	r5, [r1]
   16dd0:	strb	r4, [sp, #116]	; 0x74
   16dd4:	strb	r4, [sp, #128]	; 0x80
   16dd8:	str	r5, [sp, #132]	; 0x84
   16ddc:	cmp	r5, #0
   16de0:	beq	16c44 <__assert_fail@plt+0x56d4>
   16de4:	ldrb	r3, [sp, #184]	; 0xb8
   16de8:	mov	r2, #1
   16dec:	str	r2, [sp, #4]
   16df0:	cmp	r3, #0
   16df4:	add	r3, r6, #1
   16df8:	str	r6, [sp, #40]	; 0x28
   16dfc:	mov	r6, r3
   16e00:	bne	166c4 <__assert_fail@plt+0x5154>
   16e04:	b	16ac0 <__assert_fail@plt+0x5550>
   16e08:	add	r0, sp, #276	; 0x114
   16e0c:	bl	11234 <mbsinit@plt>
   16e10:	cmp	r0, #0
   16e14:	beq	16ffc <__assert_fail@plt+0x5a8c>
   16e18:	strb	r4, [sp, #272]	; 0x110
   16e1c:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   16e20:	ldr	r5, [sp, #12]
   16e24:	mov	r1, r0
   16e28:	mov	r0, r5
   16e2c:	bl	193c8 <__assert_fail@plt+0x7e58>
   16e30:	mov	r2, r0
   16e34:	add	r3, sp, #276	; 0x114
   16e38:	mov	r1, r5
   16e3c:	add	r0, sp, #300	; 0x12c
   16e40:	bl	1a988 <__assert_fail@plt+0x9418>
   16e44:	cmn	r0, #1
   16e48:	str	r0, [sp, #292]	; 0x124
   16e4c:	beq	16f0c <__assert_fail@plt+0x599c>
   16e50:	cmn	r0, #2
   16e54:	beq	16f20 <__assert_fail@plt+0x59b0>
   16e58:	cmp	r0, #0
   16e5c:	beq	16f3c <__assert_fail@plt+0x59cc>
   16e60:	ldr	r5, [sp, #300]	; 0x12c
   16e64:	add	r0, sp, #276	; 0x114
   16e68:	strb	r4, [sp, #296]	; 0x128
   16e6c:	bl	11234 <mbsinit@plt>
   16e70:	cmp	r0, #0
   16e74:	strb	r4, [sp, #284]	; 0x11c
   16e78:	movne	r3, #0
   16e7c:	strbne	r3, [sp, #272]	; 0x110
   16e80:	cmp	r5, #0
   16e84:	bne	167b4 <__assert_fail@plt+0x5244>
   16e88:	bl	11540 <abort@plt>
   16e8c:	add	r9, sp, #108	; 0x6c
   16e90:	mov	r0, r9
   16e94:	bl	11234 <mbsinit@plt>
   16e98:	cmp	r0, #0
   16e9c:	beq	16ffc <__assert_fail@plt+0x5a8c>
   16ea0:	strb	r4, [sp, #104]	; 0x68
   16ea4:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   16ea8:	ldr	r5, [sp, #4]
   16eac:	mov	r1, r0
   16eb0:	mov	r0, r5
   16eb4:	bl	193c8 <__assert_fail@plt+0x7e58>
   16eb8:	mov	r2, r0
   16ebc:	mov	r3, r9
   16ec0:	mov	r1, r5
   16ec4:	add	r0, sp, #132	; 0x84
   16ec8:	bl	1a988 <__assert_fail@plt+0x9418>
   16ecc:	cmn	r0, #1
   16ed0:	str	r0, [sp, #124]	; 0x7c
   16ed4:	beq	16fa8 <__assert_fail@plt+0x5a38>
   16ed8:	cmn	r0, #2
   16edc:	beq	16f84 <__assert_fail@plt+0x5a14>
   16ee0:	cmp	r0, #0
   16ee4:	beq	16fbc <__assert_fail@plt+0x5a4c>
   16ee8:	ldr	r5, [sp, #132]	; 0x84
   16eec:	mov	r0, r9
   16ef0:	strb	r4, [sp, #128]	; 0x80
   16ef4:	bl	11234 <mbsinit@plt>
   16ef8:	cmp	r0, #0
   16efc:	strb	r4, [sp, #116]	; 0x74
   16f00:	movne	r3, #0
   16f04:	strbne	r3, [sp, #104]	; 0x68
   16f08:	b	16ddc <__assert_fail@plt+0x586c>
   16f0c:	ldr	r3, [sp, #44]	; 0x2c
   16f10:	str	fp, [sp, #292]	; 0x124
   16f14:	ldr	r5, [sp, #288]	; 0x120
   16f18:	strb	r3, [sp, #296]	; 0x128
   16f1c:	b	167b8 <__assert_fail@plt+0x5248>
   16f20:	ldr	r5, [sp, #288]	; 0x120
   16f24:	mov	r0, r5
   16f28:	bl	113c0 <strlen@plt>
   16f2c:	ldr	r3, [sp, #44]	; 0x2c
   16f30:	str	r0, [sp, #292]	; 0x124
   16f34:	strb	r3, [sp, #296]	; 0x128
   16f38:	b	167b8 <__assert_fail@plt+0x5248>
   16f3c:	ldr	r5, [sp, #288]	; 0x120
   16f40:	str	fp, [sp, #292]	; 0x124
   16f44:	ldrb	r3, [r5]
   16f48:	cmp	r3, #0
   16f4c:	bne	1701c <__assert_fail@plt+0x5aac>
   16f50:	ldr	r5, [sp, #300]	; 0x12c
   16f54:	cmp	r5, #0
   16f58:	beq	16e64 <__assert_fail@plt+0x58f4>
   16f5c:	b	16f80 <__assert_fail@plt+0x5a10>
   16f60:	ldr	r3, [sp, #64]	; 0x40
   16f64:	str	r5, [sp, #68]	; 0x44
   16f68:	ldrb	r3, [r3]
   16f6c:	cmp	r3, #0
   16f70:	bne	1701c <__assert_fail@plt+0x5aac>
   16f74:	ldr	r4, [sp, #76]	; 0x4c
   16f78:	cmp	r4, #0
   16f7c:	beq	164d8 <__assert_fail@plt+0x4f68>
   16f80:	bl	15a60 <__assert_fail@plt+0x44f0>
   16f84:	ldr	r0, [sp, #120]	; 0x78
   16f88:	bl	113c0 <strlen@plt>
   16f8c:	mov	r3, #0
   16f90:	strb	r4, [sp, #116]	; 0x74
   16f94:	str	r0, [sp, #124]	; 0x7c
   16f98:	strb	r3, [sp, #128]	; 0x80
   16f9c:	b	16de4 <__assert_fail@plt+0x5874>
   16fa0:	ldr	r0, [sp, #272]	; 0x110
   16fa4:	b	16504 <__assert_fail@plt+0x4f94>
   16fa8:	mov	r3, #0
   16fac:	strb	r4, [sp, #116]	; 0x74
   16fb0:	str	fp, [sp, #124]	; 0x7c
   16fb4:	strb	r3, [sp, #128]	; 0x80
   16fb8:	b	16de4 <__assert_fail@plt+0x5874>
   16fbc:	ldr	r5, [sp, #120]	; 0x78
   16fc0:	str	fp, [sp, #124]	; 0x7c
   16fc4:	ldrb	r3, [r5]
   16fc8:	cmp	r3, #0
   16fcc:	bne	1701c <__assert_fail@plt+0x5aac>
   16fd0:	ldr	r5, [sp, #132]	; 0x84
   16fd4:	cmp	r5, #0
   16fd8:	beq	16eec <__assert_fail@plt+0x597c>
   16fdc:	b	16f80 <__assert_fail@plt+0x5a10>
   16fe0:	cmp	r3, #0
   16fe4:	beq	16d90 <__assert_fail@plt+0x5820>
   16fe8:	ldrb	r3, [sp, #128]	; 0x80
   16fec:	cmp	r3, #0
   16ff0:	ldrne	r5, [sp, #132]	; 0x84
   16ff4:	beq	16de4 <__assert_fail@plt+0x5874>
   16ff8:	b	16ddc <__assert_fail@plt+0x586c>
   16ffc:	movw	r3, #52904	; 0xcea8
   17000:	movt	r3, #1
   17004:	movw	r1, #52924	; 0xcebc
   17008:	movt	r1, #1
   1700c:	movw	r0, #52956	; 0xcedc
   17010:	movt	r0, #1
   17014:	mov	r2, #143	; 0x8f
   17018:	bl	11570 <__assert_fail@plt>
   1701c:	movw	r3, #52904	; 0xcea8
   17020:	movt	r3, #1
   17024:	movw	r1, #52924	; 0xcebc
   17028:	movt	r1, #1
   1702c:	movw	r0, #52980	; 0xcef4
   17030:	movt	r0, #1
   17034:	mov	r2, #171	; 0xab
   17038:	bl	11570 <__assert_fail@plt>
   1703c:	strd	r4, [sp, #-16]!
   17040:	subs	r4, r0, #0
   17044:	str	r6, [sp, #8]
   17048:	str	lr, [sp, #12]
   1704c:	beq	170e4 <__assert_fail@plt+0x5b74>
   17050:	mov	r1, #47	; 0x2f
   17054:	bl	114b0 <strrchr@plt>
   17058:	subs	r5, r0, #0
   1705c:	beq	170bc <__assert_fail@plt+0x5b4c>
   17060:	add	r6, r5, #1
   17064:	sub	r3, r6, r4
   17068:	cmp	r3, #6
   1706c:	ble	170bc <__assert_fail@plt+0x5b4c>
   17070:	movw	r1, #53060	; 0xcf44
   17074:	movt	r1, #1
   17078:	mov	r2, #7
   1707c:	sub	r0, r5, #6
   17080:	bl	11534 <strncmp@plt>
   17084:	cmp	r0, #0
   17088:	bne	170bc <__assert_fail@plt+0x5b4c>
   1708c:	movw	r1, #53068	; 0xcf4c
   17090:	movt	r1, #1
   17094:	mov	r2, #3
   17098:	mov	r0, r6
   1709c:	bl	11534 <strncmp@plt>
   170a0:	cmp	r0, #0
   170a4:	movne	r4, r6
   170a8:	bne	170bc <__assert_fail@plt+0x5b4c>
   170ac:	add	r4, r5, #4
   170b0:	movw	r3, #57784	; 0xe1b8
   170b4:	movt	r3, #2
   170b8:	str	r4, [r3]
   170bc:	movw	r2, #58036	; 0xe2b4
   170c0:	movt	r2, #2
   170c4:	ldr	r6, [sp, #8]
   170c8:	movw	r3, #57792	; 0xe1c0
   170cc:	movt	r3, #2
   170d0:	str	r4, [r2]
   170d4:	str	r4, [r3]
   170d8:	ldrd	r4, [sp]
   170dc:	add	sp, sp, #12
   170e0:	pop	{pc}		; (ldr pc, [sp], #4)
   170e4:	movw	r3, #57808	; 0xe1d0
   170e8:	movt	r3, #2
   170ec:	movw	r0, #53004	; 0xcf0c
   170f0:	movt	r0, #1
   170f4:	ldr	r3, [r3]
   170f8:	mov	r2, #55	; 0x37
   170fc:	mov	r1, #1
   17100:	bl	112d0 <fwrite@plt>
   17104:	bl	11540 <abort@plt>
   17108:	strd	r4, [sp, #-16]!
   1710c:	mov	r4, #0
   17110:	mov	r5, #0
   17114:	cmp	r1, #10
   17118:	str	r6, [sp, #8]
   1711c:	strd	r4, [r0]
   17120:	strd	r4, [r0, #8]
   17124:	str	lr, [sp, #12]
   17128:	strd	r4, [r0, #16]
   1712c:	strd	r4, [r0, #24]
   17130:	strd	r4, [r0, #32]
   17134:	strd	r4, [r0, #40]	; 0x28
   17138:	beq	17150 <__assert_fail@plt+0x5be0>
   1713c:	ldrd	r4, [sp]
   17140:	str	r1, [r0]
   17144:	ldr	r6, [sp, #8]
   17148:	add	sp, sp, #12
   1714c:	pop	{pc}		; (ldr pc, [sp], #4)
   17150:	bl	11540 <abort@plt>
   17154:	mov	r2, #5
   17158:	strd	r4, [sp, #-16]!
   1715c:	mov	r5, r0
   17160:	str	r6, [sp, #8]
   17164:	mov	r6, r1
   17168:	mov	r1, r0
   1716c:	mov	r0, #0
   17170:	str	lr, [sp, #12]
   17174:	bl	11258 <dcgettext@plt>
   17178:	cmp	r5, r0
   1717c:	mov	r4, r0
   17180:	beq	17198 <__assert_fail@plt+0x5c28>
   17184:	mov	r0, r4
   17188:	ldrd	r4, [sp]
   1718c:	ldr	r6, [sp, #8]
   17190:	add	sp, sp, #12
   17194:	pop	{pc}		; (ldr pc, [sp], #4)
   17198:	bl	1ab6c <__assert_fail@plt+0x95fc>
   1719c:	ldrb	r3, [r0]
   171a0:	bic	r3, r3, #32
   171a4:	cmp	r3, #85	; 0x55
   171a8:	bne	17210 <__assert_fail@plt+0x5ca0>
   171ac:	ldrb	r3, [r0, #1]
   171b0:	bic	r3, r3, #32
   171b4:	cmp	r3, #84	; 0x54
   171b8:	bne	17290 <__assert_fail@plt+0x5d20>
   171bc:	ldrb	r3, [r0, #2]
   171c0:	bic	r3, r3, #32
   171c4:	cmp	r3, #70	; 0x46
   171c8:	bne	17290 <__assert_fail@plt+0x5d20>
   171cc:	ldrb	r3, [r0, #3]
   171d0:	cmp	r3, #45	; 0x2d
   171d4:	bne	17290 <__assert_fail@plt+0x5d20>
   171d8:	ldrb	r3, [r0, #4]
   171dc:	cmp	r3, #56	; 0x38
   171e0:	bne	17290 <__assert_fail@plt+0x5d20>
   171e4:	ldrb	r3, [r0, #5]
   171e8:	cmp	r3, #0
   171ec:	bne	17290 <__assert_fail@plt+0x5d20>
   171f0:	ldrb	r2, [r4]
   171f4:	movw	r3, #53160	; 0xcfa8
   171f8:	movt	r3, #1
   171fc:	movw	r4, #53172	; 0xcfb4
   17200:	movt	r4, #1
   17204:	cmp	r2, #96	; 0x60
   17208:	movne	r4, r3
   1720c:	b	17184 <__assert_fail@plt+0x5c14>
   17210:	cmp	r3, #71	; 0x47
   17214:	bne	17290 <__assert_fail@plt+0x5d20>
   17218:	ldrb	r3, [r0, #1]
   1721c:	bic	r3, r3, #32
   17220:	cmp	r3, #66	; 0x42
   17224:	bne	17290 <__assert_fail@plt+0x5d20>
   17228:	ldrb	r3, [r0, #2]
   1722c:	cmp	r3, #49	; 0x31
   17230:	bne	17290 <__assert_fail@plt+0x5d20>
   17234:	ldrb	r3, [r0, #3]
   17238:	cmp	r3, #56	; 0x38
   1723c:	bne	17290 <__assert_fail@plt+0x5d20>
   17240:	ldrb	r3, [r0, #4]
   17244:	cmp	r3, #48	; 0x30
   17248:	bne	17290 <__assert_fail@plt+0x5d20>
   1724c:	ldrb	r3, [r0, #5]
   17250:	cmp	r3, #51	; 0x33
   17254:	bne	17290 <__assert_fail@plt+0x5d20>
   17258:	ldrb	r3, [r0, #6]
   1725c:	cmp	r3, #48	; 0x30
   17260:	bne	17290 <__assert_fail@plt+0x5d20>
   17264:	ldrb	r3, [r0, #7]
   17268:	cmp	r3, #0
   1726c:	bne	17290 <__assert_fail@plt+0x5d20>
   17270:	ldrb	r2, [r4]
   17274:	movw	r3, #53164	; 0xcfac
   17278:	movt	r3, #1
   1727c:	movw	r4, #53168	; 0xcfb0
   17280:	movt	r4, #1
   17284:	cmp	r2, #96	; 0x60
   17288:	movne	r4, r3
   1728c:	b	17184 <__assert_fail@plt+0x5c14>
   17290:	movw	r3, #53176	; 0xcfb8
   17294:	movt	r3, #1
   17298:	cmp	r6, #9
   1729c:	movw	r4, #53156	; 0xcfa4
   172a0:	movt	r4, #1
   172a4:	movne	r4, r3
   172a8:	b	17184 <__assert_fail@plt+0x5c14>
   172ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   172b0:	strd	r6, [sp, #8]
   172b4:	strd	r8, [sp, #16]
   172b8:	strd	sl, [sp, #24]
   172bc:	mov	fp, r0
   172c0:	mov	sl, r1
   172c4:	str	lr, [sp, #32]
   172c8:	sub	sp, sp, #116	; 0x74
   172cc:	ldr	r8, [sp, #152]	; 0x98
   172d0:	str	r3, [sp, #28]
   172d4:	ldr	r3, [sp, #156]	; 0x9c
   172d8:	str	r2, [sp, #32]
   172dc:	and	r4, r3, #2
   172e0:	ubfx	r3, r3, #1, #1
   172e4:	str	r3, [sp, #44]	; 0x2c
   172e8:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   172ec:	str	r0, [sp, #64]	; 0x40
   172f0:	cmp	r8, #10
   172f4:	ldrls	pc, [pc, r8, lsl #2]
   172f8:	b	18a68 <__assert_fail@plt+0x74f8>
   172fc:	andeq	r7, r1, r0, lsl #14
   17300:	muleq	r1, ip, r7
   17304:	andeq	r7, r1, r8, ror sp
   17308:			; <UNDEFINED> instruction: 0x000177bc
   1730c:	andeq	r7, r1, r4, ror #12
   17310:			; <UNDEFINED> instruction: 0x000176b0
   17314:	andeq	r7, r1, r0, lsr r7
   17318:	andeq	r7, r1, ip, ror #14
   1731c:	andeq	r7, r1, r8, lsr #6
   17320:	andeq	r7, r1, r8, lsr #6
   17324:	andeq	r7, r1, r8, lsr #6
   17328:	cmp	r8, #10
   1732c:	beq	17358 <__assert_fail@plt+0x5de8>
   17330:	mov	r1, r8
   17334:	movw	r0, #53180	; 0xcfbc
   17338:	movt	r0, #1
   1733c:	bl	17154 <__assert_fail@plt+0x5be4>
   17340:	mov	r1, r8
   17344:	str	r0, [sp, #164]	; 0xa4
   17348:	movw	r0, #53176	; 0xcfb8
   1734c:	movt	r0, #1
   17350:	bl	17154 <__assert_fail@plt+0x5be4>
   17354:	str	r0, [sp, #168]	; 0xa8
   17358:	cmp	r4, #0
   1735c:	movne	r4, #0
   17360:	beq	18744 <__assert_fail@plt+0x71d4>
   17364:	mov	r3, #1
   17368:	mov	r5, #0
   1736c:	ldr	r0, [sp, #168]	; 0xa8
   17370:	str	r3, [sp, #36]	; 0x24
   17374:	str	r3, [sp, #40]	; 0x28
   17378:	str	r5, [sp, #68]	; 0x44
   1737c:	bl	113c0 <strlen@plt>
   17380:	ldr	r3, [sp, #168]	; 0xa8
   17384:	str	r5, [sp, #48]	; 0x30
   17388:	str	r0, [sp, #56]	; 0x38
   1738c:	str	r3, [sp, #60]	; 0x3c
   17390:	str	r5, [sp, #72]	; 0x48
   17394:	str	r8, [sp, #152]	; 0x98
   17398:	mov	r8, fp
   1739c:	mov	r9, #0
   173a0:	ldr	fp, [sp, #152]	; 0x98
   173a4:	ldr	r3, [sp, #28]
   173a8:	cmn	r3, #1
   173ac:	beq	1790c <__assert_fail@plt+0x639c>
   173b0:	ldr	r3, [sp, #28]
   173b4:	subs	r6, r3, r9
   173b8:	movne	r6, #1
   173bc:	cmp	r6, #0
   173c0:	beq	17924 <__assert_fail@plt+0x63b4>
   173c4:	ldr	r0, [sp, #32]
   173c8:	ldr	r7, [sp, #40]	; 0x28
   173cc:	add	r3, r0, r9
   173d0:	cmp	fp, #2
   173d4:	moveq	r7, #0
   173d8:	andne	r7, r7, #1
   173dc:	str	r3, [sp, #52]	; 0x34
   173e0:	cmp	r7, #0
   173e4:	beq	17dc0 <__assert_fail@plt+0x6850>
   173e8:	ldr	r2, [sp, #56]	; 0x38
   173ec:	cmp	r2, #0
   173f0:	beq	1805c <__assert_fail@plt+0x6aec>
   173f4:	ldr	r1, [sp, #28]
   173f8:	cmp	r2, #1
   173fc:	mov	r3, r2
   17400:	movls	r3, #0
   17404:	movhi	r3, #1
   17408:	add	r5, r9, r2
   1740c:	cmn	r1, #1
   17410:	movne	r3, #0
   17414:	cmp	r3, #0
   17418:	beq	17424 <__assert_fail@plt+0x5eb4>
   1741c:	bl	113c0 <strlen@plt>
   17420:	str	r0, [sp, #28]
   17424:	ldr	r3, [sp, #28]
   17428:	cmp	r5, r3
   1742c:	bhi	1805c <__assert_fail@plt+0x6aec>
   17430:	ldr	r0, [sp, #52]	; 0x34
   17434:	ldr	r2, [sp, #56]	; 0x38
   17438:	ldr	r1, [sp, #60]	; 0x3c
   1743c:	bl	1124c <memcmp@plt>
   17440:	cmp	r0, #0
   17444:	bne	1805c <__assert_fail@plt+0x6aec>
   17448:	ldr	r3, [sp, #44]	; 0x2c
   1744c:	cmp	r3, #0
   17450:	bne	1898c <__assert_fail@plt+0x741c>
   17454:	ldr	r3, [sp, #52]	; 0x34
   17458:	ldrb	r5, [r3]
   1745c:	cmp	r5, #126	; 0x7e
   17460:	ldrls	pc, [pc, r5, lsl #2]
   17464:	b	17d1c <__assert_fail@plt+0x67ac>
   17468:	andeq	r7, r1, r0, lsr #24
   1746c:	andeq	r7, r1, ip, lsl sp
   17470:	andeq	r7, r1, ip, lsl sp
   17474:	andeq	r7, r1, ip, lsl sp
   17478:	andeq	r7, r1, ip, lsl sp
   1747c:	andeq	r7, r1, ip, lsl sp
   17480:	andeq	r7, r1, ip, lsl sp
   17484:	strdeq	r7, [r1], -r4
   17488:	andeq	r7, r1, ip, ror #23
   1748c:	andeq	r7, r1, r4, lsr fp
   17490:	andeq	r7, r1, r0, ror #23
   17494:	andeq	r7, r1, ip, lsr #22
   17498:			; <UNDEFINED> instruction: 0x00017bbc
   1749c:	andeq	r7, r1, r8, lsl #24
   174a0:	andeq	r7, r1, ip, lsl sp
   174a4:	andeq	r7, r1, ip, lsl sp
   174a8:	andeq	r7, r1, ip, lsl sp
   174ac:	andeq	r7, r1, ip, lsl sp
   174b0:	andeq	r7, r1, ip, lsl sp
   174b4:	andeq	r7, r1, ip, lsl sp
   174b8:	andeq	r7, r1, ip, lsl sp
   174bc:	andeq	r7, r1, ip, lsl sp
   174c0:	andeq	r7, r1, ip, lsl sp
   174c4:	andeq	r7, r1, ip, lsl sp
   174c8:	andeq	r7, r1, ip, lsl sp
   174cc:	andeq	r7, r1, ip, lsl sp
   174d0:	andeq	r7, r1, ip, lsl sp
   174d4:	andeq	r7, r1, ip, lsl sp
   174d8:	andeq	r7, r1, ip, lsl sp
   174dc:	andeq	r7, r1, ip, lsl sp
   174e0:	andeq	r7, r1, ip, lsl sp
   174e4:	andeq	r7, r1, ip, lsl sp
   174e8:	strdeq	r7, [r1], -r8
   174ec:	andeq	r7, r1, r0, lsl #24
   174f0:	andeq	r7, r1, r0, lsl #24
   174f4:	ldrdeq	r7, [r1], -ip
   174f8:	andeq	r7, r1, r0, lsl #24
   174fc:	andeq	r7, r1, r0, lsl sp
   17500:	andeq	r7, r1, r0, lsl #24
   17504:	andeq	r7, r1, ip, asr sl
   17508:	andeq	r7, r1, r0, lsl #24
   1750c:	andeq	r7, r1, r0, lsl #24
   17510:	andeq	r7, r1, r0, lsl #24
   17514:	andeq	r7, r1, r0, lsl sp
   17518:	andeq	r7, r1, r0, lsl sp
   1751c:	andeq	r7, r1, r0, lsl sp
   17520:	andeq	r7, r1, r0, lsl sp
   17524:	andeq	r7, r1, r0, lsl sp
   17528:	andeq	r7, r1, r0, lsl sp
   1752c:	andeq	r7, r1, r0, lsl sp
   17530:	andeq	r7, r1, r0, lsl sp
   17534:	andeq	r7, r1, r0, lsl sp
   17538:	andeq	r7, r1, r0, lsl sp
   1753c:	andeq	r7, r1, r0, lsl sp
   17540:	andeq	r7, r1, r0, lsl sp
   17544:	andeq	r7, r1, r0, lsl sp
   17548:	andeq	r7, r1, r0, lsl sp
   1754c:	andeq	r7, r1, r0, lsl sp
   17550:	andeq	r7, r1, r0, lsl sp
   17554:	andeq	r7, r1, r0, lsl #24
   17558:	andeq	r7, r1, r0, lsl #24
   1755c:	andeq	r7, r1, r0, lsl #24
   17560:	andeq	r7, r1, r0, lsl #24
   17564:	andeq	r7, r1, r0, lsr sl
   17568:	andeq	r7, r1, ip, lsl sp
   1756c:	andeq	r7, r1, r0, lsl sp
   17570:	andeq	r7, r1, r0, lsl sp
   17574:	andeq	r7, r1, r0, lsl sp
   17578:	andeq	r7, r1, r0, lsl sp
   1757c:	andeq	r7, r1, r0, lsl sp
   17580:	andeq	r7, r1, r0, lsl sp
   17584:	andeq	r7, r1, r0, lsl sp
   17588:	andeq	r7, r1, r0, lsl sp
   1758c:	andeq	r7, r1, r0, lsl sp
   17590:	andeq	r7, r1, r0, lsl sp
   17594:	andeq	r7, r1, r0, lsl sp
   17598:	andeq	r7, r1, r0, lsl sp
   1759c:	andeq	r7, r1, r0, lsl sp
   175a0:	andeq	r7, r1, r0, lsl sp
   175a4:	andeq	r7, r1, r0, lsl sp
   175a8:	andeq	r7, r1, r0, lsl sp
   175ac:	andeq	r7, r1, r0, lsl sp
   175b0:	andeq	r7, r1, r0, lsl sp
   175b4:	andeq	r7, r1, r0, lsl sp
   175b8:	andeq	r7, r1, r0, lsl sp
   175bc:	andeq	r7, r1, r0, lsl sp
   175c0:	andeq	r7, r1, r0, lsl sp
   175c4:	andeq	r7, r1, r0, lsl sp
   175c8:	andeq	r7, r1, r0, lsl sp
   175cc:	andeq	r7, r1, r0, lsl sp
   175d0:	andeq	r7, r1, r0, lsl sp
   175d4:	andeq	r7, r1, r0, lsl #24
   175d8:	ldrdeq	r7, [r1], -r8
   175dc:	andeq	r7, r1, r0, lsl sp
   175e0:	andeq	r7, r1, r0, lsl #24
   175e4:	andeq	r7, r1, r0, lsl sp
   175e8:	andeq	r7, r1, r0, lsl #24
   175ec:	andeq	r7, r1, r0, lsl sp
   175f0:	andeq	r7, r1, r0, lsl sp
   175f4:	andeq	r7, r1, r0, lsl sp
   175f8:	andeq	r7, r1, r0, lsl sp
   175fc:	andeq	r7, r1, r0, lsl sp
   17600:	andeq	r7, r1, r0, lsl sp
   17604:	andeq	r7, r1, r0, lsl sp
   17608:	andeq	r7, r1, r0, lsl sp
   1760c:	andeq	r7, r1, r0, lsl sp
   17610:	andeq	r7, r1, r0, lsl sp
   17614:	andeq	r7, r1, r0, lsl sp
   17618:	andeq	r7, r1, r0, lsl sp
   1761c:	andeq	r7, r1, r0, lsl sp
   17620:	andeq	r7, r1, r0, lsl sp
   17624:	andeq	r7, r1, r0, lsl sp
   17628:	andeq	r7, r1, r0, lsl sp
   1762c:	andeq	r7, r1, r0, lsl sp
   17630:	andeq	r7, r1, r0, lsl sp
   17634:	andeq	r7, r1, r0, lsl sp
   17638:	andeq	r7, r1, r0, lsl sp
   1763c:	andeq	r7, r1, r0, lsl sp
   17640:	andeq	r7, r1, r0, lsl sp
   17644:	andeq	r7, r1, r0, lsl sp
   17648:	andeq	r7, r1, r0, lsl sp
   1764c:	andeq	r7, r1, r0, lsl sp
   17650:	andeq	r7, r1, r0, lsl sp
   17654:	strdeq	r7, [r1], -ip
   17658:	andeq	r7, r1, r0, lsl #24
   1765c:	strdeq	r7, [r1], -ip
   17660:	ldrdeq	r7, [r1], -ip
   17664:	cmp	r4, #0
   17668:	moveq	r3, #1
   1766c:	streq	r3, [sp, #40]	; 0x28
   17670:	beq	17d84 <__assert_fail@plt+0x6814>
   17674:	mov	r3, #0
   17678:	mov	r2, #1
   1767c:	mov	r4, r3
   17680:	str	r2, [sp, #36]	; 0x24
   17684:	str	r2, [sp, #44]	; 0x2c
   17688:	str	r2, [sp, #56]	; 0x38
   1768c:	str	r3, [sp, #68]	; 0x44
   17690:	movw	r3, #53176	; 0xcfb8
   17694:	movt	r3, #1
   17698:	str	r4, [sp, #40]	; 0x28
   1769c:	mov	r8, #2
   176a0:	str	r4, [sp, #48]	; 0x30
   176a4:	str	r3, [sp, #60]	; 0x3c
   176a8:	str	r4, [sp, #72]	; 0x48
   176ac:	b	17394 <__assert_fail@plt+0x5e24>
   176b0:	cmp	r4, #0
   176b4:	bne	18900 <__assert_fail@plt+0x7390>
   176b8:	cmp	sl, #0
   176bc:	beq	186c0 <__assert_fail@plt+0x7150>
   176c0:	mov	r3, #34	; 0x22
   176c4:	mov	r1, r4
   176c8:	mov	r2, #1
   176cc:	strb	r3, [fp]
   176d0:	movw	r3, #53156	; 0xcfa4
   176d4:	movt	r3, #1
   176d8:	mov	r4, r2
   176dc:	str	r2, [sp, #36]	; 0x24
   176e0:	str	r2, [sp, #40]	; 0x28
   176e4:	str	r1, [sp, #44]	; 0x2c
   176e8:	str	r1, [sp, #48]	; 0x30
   176ec:	str	r2, [sp, #56]	; 0x38
   176f0:	str	r3, [sp, #60]	; 0x3c
   176f4:	str	r1, [sp, #68]	; 0x44
   176f8:	str	r1, [sp, #72]	; 0x48
   176fc:	b	17394 <__assert_fail@plt+0x5e24>
   17700:	mov	r3, #0
   17704:	mov	r4, r8
   17708:	str	r3, [sp, #40]	; 0x28
   1770c:	str	r3, [sp, #44]	; 0x2c
   17710:	str	r3, [sp, #48]	; 0x30
   17714:	str	r8, [sp, #56]	; 0x38
   17718:	str	r3, [sp, #60]	; 0x3c
   1771c:	str	r3, [sp, #68]	; 0x44
   17720:	mov	r3, #1
   17724:	str	r3, [sp, #36]	; 0x24
   17728:	str	r8, [sp, #72]	; 0x48
   1772c:	b	17394 <__assert_fail@plt+0x5e24>
   17730:	mov	r3, #1
   17734:	mov	r2, #0
   17738:	mov	r4, r2
   1773c:	mov	r8, #5
   17740:	str	r3, [sp, #36]	; 0x24
   17744:	str	r3, [sp, #40]	; 0x28
   17748:	str	r3, [sp, #44]	; 0x2c
   1774c:	str	r2, [sp, #48]	; 0x30
   17750:	str	r3, [sp, #56]	; 0x38
   17754:	movw	r3, #53156	; 0xcfa4
   17758:	movt	r3, #1
   1775c:	str	r3, [sp, #60]	; 0x3c
   17760:	str	r2, [sp, #68]	; 0x44
   17764:	str	r2, [sp, #72]	; 0x48
   17768:	b	17394 <__assert_fail@plt+0x5e24>
   1776c:	mov	r3, #0
   17770:	mov	r2, #1
   17774:	mov	r4, r3
   17778:	str	r2, [sp, #36]	; 0x24
   1777c:	str	r2, [sp, #40]	; 0x28
   17780:	str	r3, [sp, #44]	; 0x2c
   17784:	str	r3, [sp, #48]	; 0x30
   17788:	str	r3, [sp, #56]	; 0x38
   1778c:	str	r3, [sp, #60]	; 0x3c
   17790:	str	r3, [sp, #68]	; 0x44
   17794:	str	r3, [sp, #72]	; 0x48
   17798:	b	17394 <__assert_fail@plt+0x5e24>
   1779c:	mov	r2, #1
   177a0:	mov	r3, #0
   177a4:	mov	r4, r3
   177a8:	str	r2, [sp, #36]	; 0x24
   177ac:	str	r2, [sp, #44]	; 0x2c
   177b0:	str	r8, [sp, #56]	; 0x38
   177b4:	str	r3, [sp, #68]	; 0x44
   177b8:	b	17690 <__assert_fail@plt+0x6120>
   177bc:	mov	r3, #1
   177c0:	mov	r2, #0
   177c4:	mov	r4, r2
   177c8:	mov	r8, #2
   177cc:	str	r3, [sp, #36]	; 0x24
   177d0:	str	r3, [sp, #40]	; 0x28
   177d4:	str	r3, [sp, #44]	; 0x2c
   177d8:	str	r2, [sp, #48]	; 0x30
   177dc:	str	r3, [sp, #56]	; 0x38
   177e0:	movw	r3, #53176	; 0xcfb8
   177e4:	movt	r3, #1
   177e8:	str	r3, [sp, #60]	; 0x3c
   177ec:	str	r2, [sp, #68]	; 0x44
   177f0:	str	r2, [sp, #72]	; 0x48
   177f4:	b	17394 <__assert_fail@plt+0x5e24>
   177f8:	mov	r7, #0
   177fc:	ldr	r3, [sp, #28]
   17800:	cmn	r3, #1
   17804:	beq	182dc <__assert_fail@plt+0x6d6c>
   17808:	ldr	r3, [sp, #28]
   1780c:	subs	r2, r3, #1
   17810:	movne	r2, #1
   17814:	sub	r3, fp, #2
   17818:	cmp	r2, #0
   1781c:	clz	r3, r3
   17820:	lsr	r3, r3, #5
   17824:	bne	17830 <__assert_fail@plt+0x62c0>
   17828:	cmp	r9, #0
   1782c:	beq	1803c <__assert_fail@plt+0x6acc>
   17830:	mov	r6, #0
   17834:	ldr	r2, [sp, #40]	; 0x28
   17838:	eor	r2, r2, #1
   1783c:	orrs	r3, r3, r2
   17840:	bne	17a18 <__assert_fail@plt+0x64a8>
   17844:	ldr	r2, [sp, #160]	; 0xa0
   17848:	cmp	r2, #0
   1784c:	beq	1786c <__assert_fail@plt+0x62fc>
   17850:	ldr	r0, [sp, #160]	; 0xa0
   17854:	ubfx	r1, r5, #5, #8
   17858:	and	r2, r5, #31
   1785c:	ldr	r1, [r0, r1, lsl #2]
   17860:	lsr	r2, r1, r2
   17864:	tst	r2, #1
   17868:	bne	17874 <__assert_fail@plt+0x6304>
   1786c:	cmp	r7, #0
   17870:	beq	17ae4 <__assert_fail@plt+0x6574>
   17874:	ldr	r2, [sp, #44]	; 0x2c
   17878:	sub	r3, fp, #2
   1787c:	clz	r3, r3
   17880:	lsr	r3, r3, #5
   17884:	cmp	r2, #0
   17888:	bne	18630 <__assert_fail@plt+0x70c0>
   1788c:	ldr	r2, [sp, #48]	; 0x30
   17890:	eor	r2, r2, #1
   17894:	ands	r3, r3, r2
   17898:	beq	178d0 <__assert_fail@plt+0x6360>
   1789c:	cmp	sl, r4
   178a0:	str	r3, [sp, #48]	; 0x30
   178a4:	movhi	r2, #39	; 0x27
   178a8:	strbhi	r2, [r8, r4]
   178ac:	add	r2, r4, #1
   178b0:	cmp	sl, r2
   178b4:	movhi	r1, #36	; 0x24
   178b8:	strbhi	r1, [r8, r2]
   178bc:	add	r2, r4, #2
   178c0:	add	r4, r4, #3
   178c4:	cmp	sl, r2
   178c8:	movhi	r1, #39	; 0x27
   178cc:	strbhi	r1, [r8, r2]
   178d0:	cmp	r4, sl
   178d4:	add	r9, r9, #1
   178d8:	movcc	r3, #92	; 0x5c
   178dc:	strbcc	r3, [r8, r4]
   178e0:	add	r4, r4, #1
   178e4:	cmp	r4, sl
   178e8:	ldr	r3, [sp, #36]	; 0x24
   178ec:	strbcc	r5, [r8, r4]
   178f0:	cmp	r6, #0
   178f4:	add	r4, r4, #1
   178f8:	moveq	r3, #0
   178fc:	str	r3, [sp, #36]	; 0x24
   17900:	ldr	r3, [sp, #28]
   17904:	cmn	r3, #1
   17908:	bne	173b0 <__assert_fail@plt+0x5e40>
   1790c:	ldr	r3, [sp, #32]
   17910:	ldrb	r6, [r3, r9]
   17914:	adds	r6, r6, #0
   17918:	movne	r6, #1
   1791c:	cmp	r6, #0
   17920:	bne	173c4 <__assert_fail@plt+0x5e54>
   17924:	str	fp, [sp, #152]	; 0x98
   17928:	mov	fp, r8
   1792c:	cmp	r4, #0
   17930:	ldr	r1, [sp, #44]	; 0x2c
   17934:	movne	r3, #0
   17938:	ldr	r8, [sp, #152]	; 0x98
   1793c:	sub	r2, r8, #2
   17940:	clz	r2, r2
   17944:	lsr	r2, r2, #5
   17948:	andeq	r3, r2, r1
   1794c:	cmp	r3, #0
   17950:	bne	18a0c <__assert_fail@plt+0x749c>
   17954:	eor	r3, r1, #1
   17958:	ands	r2, r2, r3
   1795c:	beq	18938 <__assert_fail@plt+0x73c8>
   17960:	ldr	r3, [sp, #68]	; 0x44
   17964:	cmp	r3, #0
   17968:	beq	1893c <__assert_fail@plt+0x73cc>
   1796c:	ldr	r3, [sp, #36]	; 0x24
   17970:	cmp	r3, #0
   17974:	bne	189c8 <__assert_fail@plt+0x7458>
   17978:	ldr	r3, [sp, #72]	; 0x48
   1797c:	adds	r3, r3, #0
   17980:	movne	r3, #1
   17984:	cmp	sl, #0
   17988:	movne	r3, #0
   1798c:	cmp	r3, #0
   17990:	ldreq	r2, [sp, #68]	; 0x44
   17994:	beq	1893c <__assert_fail@plt+0x73cc>
   17998:	ldr	r2, [sp, #72]	; 0x48
   1799c:	str	r3, [sp, #68]	; 0x44
   179a0:	movw	r3, #53176	; 0xcfb8
   179a4:	movt	r3, #1
   179a8:	mov	r1, #39	; 0x27
   179ac:	mov	r4, #1
   179b0:	ldr	sl, [sp, #72]	; 0x48
   179b4:	mov	r8, #2
   179b8:	str	r3, [sp, #60]	; 0x3c
   179bc:	mov	r3, #0
   179c0:	strb	r1, [fp]
   179c4:	str	r3, [sp, #44]	; 0x2c
   179c8:	str	r4, [sp, #56]	; 0x38
   179cc:	str	r2, [sp, #72]	; 0x48
   179d0:	b	17394 <__assert_fail@plt+0x5e24>
   179d4:	mov	r7, #0
   179d8:	cmp	fp, #2
   179dc:	beq	182bc <__assert_fail@plt+0x6d4c>
   179e0:	ldr	r2, [sp, #40]	; 0x28
   179e4:	ldr	r3, [sp, #56]	; 0x38
   179e8:	ldr	r1, [sp, #44]	; 0x2c
   179ec:	cmp	r3, #0
   179f0:	moveq	r3, #0
   179f4:	andne	r3, r2, r1
   179f8:	cmp	r3, #0
   179fc:	moveq	r5, #92	; 0x5c
   17a00:	moveq	r3, r5
   17a04:	bne	182c8 <__assert_fail@plt+0x6d58>
   17a08:	ldr	r2, [sp, #40]	; 0x28
   17a0c:	cmp	r2, #0
   17a10:	bne	18704 <__assert_fail@plt+0x7194>
   17a14:	mov	r6, #0
   17a18:	ldr	r3, [sp, #44]	; 0x2c
   17a1c:	cmp	r3, #0
   17a20:	beq	182b4 <__assert_fail@plt+0x6d44>
   17a24:	mov	r3, #0
   17a28:	b	17844 <__assert_fail@plt+0x62d4>
   17a2c:	mov	r7, #0
   17a30:	cmp	fp, #2
   17a34:	beq	1832c <__assert_fail@plt+0x6dbc>
   17a38:	cmp	fp, #5
   17a3c:	beq	182f0 <__assert_fail@plt+0x6d80>
   17a40:	sub	r3, fp, #2
   17a44:	mov	r6, #0
   17a48:	clz	r3, r3
   17a4c:	mov	r5, #63	; 0x3f
   17a50:	lsr	r3, r3, #5
   17a54:	b	17834 <__assert_fail@plt+0x62c4>
   17a58:	mov	r7, #0
   17a5c:	cmp	fp, #2
   17a60:	movne	r3, #0
   17a64:	movne	r5, #39	; 0x27
   17a68:	strne	r6, [sp, #68]	; 0x44
   17a6c:	bne	17834 <__assert_fail@plt+0x62c4>
   17a70:	ldr	r3, [sp, #44]	; 0x2c
   17a74:	cmp	r3, #0
   17a78:	bne	18734 <__assert_fail@plt+0x71c4>
   17a7c:	ldr	r3, [sp, #72]	; 0x48
   17a80:	cmp	sl, #0
   17a84:	clz	r3, r3
   17a88:	lsr	r3, r3, #5
   17a8c:	moveq	r3, #0
   17a90:	cmp	r3, #0
   17a94:	bne	18660 <__assert_fail@plt+0x70f0>
   17a98:	cmp	sl, r4
   17a9c:	movhi	r3, #39	; 0x27
   17aa0:	strbhi	r3, [r8, r4]
   17aa4:	add	r3, r4, #1
   17aa8:	cmp	sl, r3
   17aac:	movhi	r2, #92	; 0x5c
   17ab0:	strbhi	r2, [r8, r3]
   17ab4:	add	r3, r4, #2
   17ab8:	cmp	sl, r3
   17abc:	bls	17ac8 <__assert_fail@plt+0x6558>
   17ac0:	mov	r2, #39	; 0x27
   17ac4:	strb	r2, [r8, r3]
   17ac8:	mov	r3, #0
   17acc:	cmp	r7, #0
   17ad0:	add	r4, r4, #3
   17ad4:	mov	r5, #39	; 0x27
   17ad8:	str	r3, [sp, #48]	; 0x30
   17adc:	str	r6, [sp, #68]	; 0x44
   17ae0:	bne	17874 <__assert_fail@plt+0x6304>
   17ae4:	ldr	r2, [sp, #48]	; 0x30
   17ae8:	eor	r3, r3, #1
   17aec:	add	r9, r9, #1
   17af0:	and	r3, r3, r2
   17af4:	uxtb	r3, r3
   17af8:	cmp	r3, #0
   17afc:	beq	178e4 <__assert_fail@plt+0x6374>
   17b00:	cmp	sl, r4
   17b04:	movhi	r3, #39	; 0x27
   17b08:	strbhi	r3, [r8, r4]
   17b0c:	add	r3, r4, #1
   17b10:	add	r4, r4, #2
   17b14:	cmp	sl, r3
   17b18:	movhi	r2, #39	; 0x27
   17b1c:	strbhi	r2, [r8, r3]
   17b20:	mov	r3, #0
   17b24:	str	r3, [sp, #48]	; 0x30
   17b28:	b	178e4 <__assert_fail@plt+0x6374>
   17b2c:	mov	r3, #118	; 0x76
   17b30:	b	17a08 <__assert_fail@plt+0x6498>
   17b34:	mov	r3, #116	; 0x74
   17b38:	ldr	r2, [sp, #44]	; 0x2c
   17b3c:	cmp	fp, #2
   17b40:	movne	r2, #0
   17b44:	andeq	r2, r2, #1
   17b48:	cmp	r2, #0
   17b4c:	beq	17a08 <__assert_fail@plt+0x6498>
   17b50:	mov	fp, r8
   17b54:	mov	r8, #2
   17b58:	ldr	r3, [sp, #40]	; 0x28
   17b5c:	cmp	r3, #0
   17b60:	movne	r8, #4
   17b64:	mov	lr, #0
   17b68:	mov	r0, fp
   17b6c:	ldr	r2, [sp, #32]
   17b70:	ldr	r3, [sp, #156]	; 0x9c
   17b74:	ldr	r1, [sp, #164]	; 0xa4
   17b78:	bic	ip, r3, #2
   17b7c:	ldr	r3, [sp, #28]
   17b80:	stm	sp, {r8, ip, lr}
   17b84:	ldr	ip, [sp, #168]	; 0xa8
   17b88:	str	r1, [sp, #12]
   17b8c:	mov	r1, sl
   17b90:	str	ip, [sp, #16]
   17b94:	bl	172ac <__assert_fail@plt+0x5d3c>
   17b98:	mov	r4, r0
   17b9c:	mov	r0, r4
   17ba0:	add	sp, sp, #116	; 0x74
   17ba4:	ldrd	r4, [sp]
   17ba8:	ldrd	r6, [sp, #8]
   17bac:	ldrd	r8, [sp, #16]
   17bb0:	ldrd	sl, [sp, #24]
   17bb4:	add	sp, sp, #32
   17bb8:	pop	{pc}		; (ldr pc, [sp], #4)
   17bbc:	mov	r5, #102	; 0x66
   17bc0:	ldr	r2, [sp, #44]	; 0x2c
   17bc4:	sub	r3, fp, #2
   17bc8:	clz	r3, r3
   17bcc:	lsr	r3, r3, #5
   17bd0:	cmp	r2, #0
   17bd4:	bne	18630 <__assert_fail@plt+0x70c0>
   17bd8:	mov	r6, r2
   17bdc:	b	178d0 <__assert_fail@plt+0x6360>
   17be0:	mov	r5, #110	; 0x6e
   17be4:	mov	r6, #0
   17be8:	b	17874 <__assert_fail@plt+0x6304>
   17bec:	mov	r5, #98	; 0x62
   17bf0:	b	17bc0 <__assert_fail@plt+0x6650>
   17bf4:	mov	r5, #97	; 0x61
   17bf8:	b	17bc0 <__assert_fail@plt+0x6650>
   17bfc:	mov	r7, #0
   17c00:	mov	r6, #0
   17c04:	b	17a24 <__assert_fail@plt+0x64b4>
   17c08:	mov	r5, #114	; 0x72
   17c0c:	b	17be4 <__assert_fail@plt+0x6674>
   17c10:	ldr	r3, [sp, #44]	; 0x2c
   17c14:	cmp	r3, #0
   17c18:	bne	189a8 <__assert_fail@plt+0x7438>
   17c1c:	mov	r7, r3
   17c20:	ldr	r3, [sp, #48]	; 0x30
   17c24:	sub	r2, fp, #2
   17c28:	clz	r2, r2
   17c2c:	lsr	r2, r2, #5
   17c30:	eor	r3, r3, #1
   17c34:	ands	r3, r2, r3
   17c38:	beq	1864c <__assert_fail@plt+0x70dc>
   17c3c:	cmp	sl, r4
   17c40:	movhi	r1, #39	; 0x27
   17c44:	strbhi	r1, [r8, r4]
   17c48:	add	r1, r4, #1
   17c4c:	cmp	sl, r1
   17c50:	movhi	r0, #36	; 0x24
   17c54:	strbhi	r0, [r8, r1]
   17c58:	add	r1, r4, #2
   17c5c:	cmp	sl, r1
   17c60:	movhi	r0, #39	; 0x27
   17c64:	strbhi	r0, [r8, r1]
   17c68:	add	r1, r4, #3
   17c6c:	cmp	sl, r1
   17c70:	bls	186a4 <__assert_fail@plt+0x7134>
   17c74:	mov	r4, r1
   17c78:	mov	r1, #92	; 0x5c
   17c7c:	mov	r0, r4
   17c80:	str	r3, [sp, #48]	; 0x30
   17c84:	strb	r1, [r8, r4]
   17c88:	cmp	fp, #2
   17c8c:	add	r4, r4, #1
   17c90:	beq	186f4 <__assert_fail@plt+0x7184>
   17c94:	ldr	r1, [sp, #28]
   17c98:	add	r3, r9, #1
   17c9c:	cmp	r3, r1
   17ca0:	bcs	17cb8 <__assert_fail@plt+0x6748>
   17ca4:	ldr	r1, [sp, #32]
   17ca8:	ldrb	r3, [r1, r3]
   17cac:	sub	r3, r3, #48	; 0x30
   17cb0:	cmp	r3, #9
   17cb4:	bls	1870c <__assert_fail@plt+0x719c>
   17cb8:	mov	r5, #48	; 0x30
   17cbc:	ldr	r3, [sp, #40]	; 0x28
   17cc0:	eor	r3, r3, #1
   17cc4:	orrs	r2, r2, r3
   17cc8:	mov	r3, r6
   17ccc:	moveq	r6, r2
   17cd0:	beq	17844 <__assert_fail@plt+0x62d4>
   17cd4:	mov	r6, #0
   17cd8:	b	1786c <__assert_fail@plt+0x62fc>
   17cdc:	cmp	r9, #0
   17ce0:	mov	r2, r7
   17ce4:	bne	18284 <__assert_fail@plt+0x6d14>
   17ce8:	mov	r6, r7
   17cec:	mov	r3, r9
   17cf0:	mov	r7, r2
   17cf4:	b	17834 <__assert_fail@plt+0x62c4>
   17cf8:	mov	r2, r7
   17cfc:	mov	r6, r7
   17d00:	mov	r3, #0
   17d04:	mov	r7, r2
   17d08:	mov	r5, #32
   17d0c:	b	17834 <__assert_fail@plt+0x62c4>
   17d10:	mov	r6, r7
   17d14:	b	17a24 <__assert_fail@plt+0x64b4>
   17d18:	mov	r7, #0
   17d1c:	ldr	r3, [sp, #64]	; 0x40
   17d20:	cmp	r3, #1
   17d24:	bne	18344 <__assert_fail@plt+0x6dd4>
   17d28:	bl	11390 <__ctype_b_loc@plt>
   17d2c:	ldr	r2, [r0]
   17d30:	sxth	r3, r5
   17d34:	lsl	r3, r3, #1
   17d38:	ldr	r1, [sp, #64]	; 0x40
   17d3c:	ldrh	r3, [r2, r3]
   17d40:	mov	ip, r1
   17d44:	and	r3, r3, #16384	; 0x4000
   17d48:	cmp	r3, #0
   17d4c:	ldr	r3, [sp, #40]	; 0x28
   17d50:	movne	r6, #1
   17d54:	moveq	r6, #0
   17d58:	movne	r2, #0
   17d5c:	andeq	r2, r3, #1
   17d60:	cmp	r2, #0
   17d64:	bne	1868c <__assert_fail@plt+0x711c>
   17d68:	sub	r3, fp, #2
   17d6c:	clz	r3, r3
   17d70:	lsr	r3, r3, #5
   17d74:	b	17834 <__assert_fail@plt+0x62c4>
   17d78:	cmp	r4, #0
   17d7c:	bne	18a1c <__assert_fail@plt+0x74ac>
   17d80:	str	r4, [sp, #40]	; 0x28
   17d84:	cmp	sl, #0
   17d88:	bne	18a4c <__assert_fail@plt+0x74dc>
   17d8c:	mov	r3, #1
   17d90:	movw	r2, #53176	; 0xcfb8
   17d94:	movt	r2, #1
   17d98:	mov	r4, r3
   17d9c:	mov	r8, #2
   17da0:	str	r3, [sp, #36]	; 0x24
   17da4:	str	sl, [sp, #44]	; 0x2c
   17da8:	str	sl, [sp, #48]	; 0x30
   17dac:	str	r3, [sp, #56]	; 0x38
   17db0:	str	r2, [sp, #60]	; 0x3c
   17db4:	str	sl, [sp, #68]	; 0x44
   17db8:	str	sl, [sp, #72]	; 0x48
   17dbc:	b	17394 <__assert_fail@plt+0x5e24>
   17dc0:	ldr	r3, [sp, #32]
   17dc4:	ldrb	r5, [r3, r9]
   17dc8:	cmp	r5, #126	; 0x7e
   17dcc:	ldrls	pc, [pc, r5, lsl #2]
   17dd0:	b	17d1c <__assert_fail@plt+0x67ac>
   17dd4:	strdeq	r7, [r1], -r8
   17dd8:	andeq	r7, r1, ip, lsl sp
   17ddc:	andeq	r7, r1, ip, lsl sp
   17de0:	andeq	r7, r1, ip, lsl sp
   17de4:	andeq	r7, r1, ip, lsl sp
   17de8:	andeq	r7, r1, ip, lsl sp
   17dec:	andeq	r7, r1, ip, lsl sp
   17df0:	strdeq	r7, [r1], -r0
   17df4:	andeq	r7, r1, r8, ror #31
   17df8:	andeq	r7, r1, r4, lsr fp
   17dfc:	andeq	r7, r1, r0, ror #31
   17e00:	andeq	r7, r1, ip, lsr #22
   17e04:	ldrdeq	r7, [r1], -r8
   17e08:	ldrdeq	r7, [r1], -r0
   17e0c:	andeq	r7, r1, ip, lsl sp
   17e10:	andeq	r7, r1, ip, lsl sp
   17e14:	andeq	r7, r1, ip, lsl sp
   17e18:	andeq	r7, r1, ip, lsl sp
   17e1c:	andeq	r7, r1, ip, lsl sp
   17e20:	andeq	r7, r1, ip, lsl sp
   17e24:	andeq	r7, r1, ip, lsl sp
   17e28:	andeq	r7, r1, ip, lsl sp
   17e2c:	andeq	r7, r1, ip, lsl sp
   17e30:	andeq	r7, r1, ip, lsl sp
   17e34:	andeq	r7, r1, ip, lsl sp
   17e38:	andeq	r7, r1, ip, lsl sp
   17e3c:	andeq	r7, r1, ip, lsl sp
   17e40:	andeq	r7, r1, ip, lsl sp
   17e44:	andeq	r7, r1, ip, lsl sp
   17e48:	andeq	r7, r1, ip, lsl sp
   17e4c:	andeq	r7, r1, ip, lsl sp
   17e50:	andeq	r7, r1, ip, lsl sp
   17e54:	andeq	r8, r1, ip, asr #32
   17e58:	andeq	r8, r1, ip, lsr #32
   17e5c:	andeq	r8, r1, ip, lsr #32
   17e60:	andeq	r8, r1, ip, lsl r0
   17e64:	andeq	r8, r1, ip, lsr #32
   17e68:	andeq	r7, r1, r8, ror #26
   17e6c:	andeq	r8, r1, ip, lsr #32
   17e70:	andeq	r7, r1, ip, asr sl
   17e74:	andeq	r8, r1, ip, lsr #32
   17e78:	andeq	r8, r1, ip, lsr #32
   17e7c:	andeq	r8, r1, ip, lsr #32
   17e80:	andeq	r7, r1, r8, ror #26
   17e84:	andeq	r7, r1, r8, ror #26
   17e88:	andeq	r7, r1, r8, ror #26
   17e8c:	andeq	r7, r1, r8, ror #26
   17e90:	andeq	r7, r1, r8, ror #26
   17e94:	andeq	r7, r1, r8, ror #26
   17e98:	andeq	r7, r1, r8, ror #26
   17e9c:	andeq	r7, r1, r8, ror #26
   17ea0:	andeq	r7, r1, r8, ror #26
   17ea4:	andeq	r7, r1, r8, ror #26
   17ea8:	andeq	r7, r1, r8, ror #26
   17eac:	andeq	r7, r1, r8, ror #26
   17eb0:	andeq	r7, r1, r8, ror #26
   17eb4:	andeq	r7, r1, r8, ror #26
   17eb8:	andeq	r7, r1, r8, ror #26
   17ebc:	andeq	r7, r1, r8, ror #26
   17ec0:	andeq	r8, r1, ip, lsr #32
   17ec4:	andeq	r8, r1, ip, lsr #32
   17ec8:	andeq	r8, r1, ip, lsr #32
   17ecc:	andeq	r8, r1, ip, lsr #32
   17ed0:	andeq	r7, r1, r0, lsr sl
   17ed4:	andeq	r7, r1, ip, lsl sp
   17ed8:	andeq	r7, r1, r8, ror #26
   17edc:	andeq	r7, r1, r8, ror #26
   17ee0:	andeq	r7, r1, r8, ror #26
   17ee4:	andeq	r7, r1, r8, ror #26
   17ee8:	andeq	r7, r1, r8, ror #26
   17eec:	andeq	r7, r1, r8, ror #26
   17ef0:	andeq	r7, r1, r8, ror #26
   17ef4:	andeq	r7, r1, r8, ror #26
   17ef8:	andeq	r7, r1, r8, ror #26
   17efc:	andeq	r7, r1, r8, ror #26
   17f00:	andeq	r7, r1, r8, ror #26
   17f04:	andeq	r7, r1, r8, ror #26
   17f08:	andeq	r7, r1, r8, ror #26
   17f0c:	andeq	r7, r1, r8, ror #26
   17f10:	andeq	r7, r1, r8, ror #26
   17f14:	andeq	r7, r1, r8, ror #26
   17f18:	andeq	r7, r1, r8, ror #26
   17f1c:	andeq	r7, r1, r8, ror #26
   17f20:	andeq	r7, r1, r8, ror #26
   17f24:	andeq	r7, r1, r8, ror #26
   17f28:	andeq	r7, r1, r8, ror #26
   17f2c:	andeq	r7, r1, r8, ror #26
   17f30:	andeq	r7, r1, r8, ror #26
   17f34:	andeq	r7, r1, r8, ror #26
   17f38:	andeq	r7, r1, r8, ror #26
   17f3c:	andeq	r7, r1, r8, ror #26
   17f40:	andeq	r8, r1, ip, lsr #32
   17f44:	ldrdeq	r7, [r1], -r8
   17f48:	andeq	r7, r1, r8, ror #26
   17f4c:	andeq	r8, r1, ip, lsr #32
   17f50:	andeq	r7, r1, r8, ror #26
   17f54:	andeq	r8, r1, ip, lsr #32
   17f58:	andeq	r7, r1, r8, ror #26
   17f5c:	andeq	r7, r1, r8, ror #26
   17f60:	andeq	r7, r1, r8, ror #26
   17f64:	andeq	r7, r1, r8, ror #26
   17f68:	andeq	r7, r1, r8, ror #26
   17f6c:	andeq	r7, r1, r8, ror #26
   17f70:	andeq	r7, r1, r8, ror #26
   17f74:	andeq	r7, r1, r8, ror #26
   17f78:	andeq	r7, r1, r8, ror #26
   17f7c:	andeq	r7, r1, r8, ror #26
   17f80:	andeq	r7, r1, r8, ror #26
   17f84:	andeq	r7, r1, r8, ror #26
   17f88:	andeq	r7, r1, r8, ror #26
   17f8c:	andeq	r7, r1, r8, ror #26
   17f90:	andeq	r7, r1, r8, ror #26
   17f94:	andeq	r7, r1, r8, ror #26
   17f98:	andeq	r7, r1, r8, ror #26
   17f9c:	andeq	r7, r1, r8, ror #26
   17fa0:	andeq	r7, r1, r8, ror #26
   17fa4:	andeq	r7, r1, r8, ror #26
   17fa8:	andeq	r7, r1, r8, ror #26
   17fac:	andeq	r7, r1, r8, ror #26
   17fb0:	andeq	r7, r1, r8, ror #26
   17fb4:	andeq	r7, r1, r8, ror #26
   17fb8:	andeq	r7, r1, r8, ror #26
   17fbc:	andeq	r7, r1, r8, ror #26
   17fc0:	strdeq	r7, [r1], -ip
   17fc4:	andeq	r8, r1, ip, lsr #32
   17fc8:	strdeq	r7, [r1], -ip
   17fcc:	andeq	r8, r1, ip, lsl r0
   17fd0:	mov	r3, #114	; 0x72
   17fd4:	b	17b38 <__assert_fail@plt+0x65c8>
   17fd8:	mov	r3, #102	; 0x66
   17fdc:	b	17a08 <__assert_fail@plt+0x6498>
   17fe0:	mov	r3, #110	; 0x6e
   17fe4:	b	17b38 <__assert_fail@plt+0x65c8>
   17fe8:	mov	r3, #98	; 0x62
   17fec:	b	17a08 <__assert_fail@plt+0x6498>
   17ff0:	mov	r3, #97	; 0x61
   17ff4:	b	17a08 <__assert_fail@plt+0x6498>
   17ff8:	ldr	r3, [sp, #40]	; 0x28
   17ffc:	cmp	r3, #0
   18000:	bne	17c10 <__assert_fail@plt+0x66a0>
   18004:	ldr	r3, [sp, #156]	; 0x9c
   18008:	tst	r3, #1
   1800c:	addne	r9, r9, #1
   18010:	bne	173a4 <__assert_fail@plt+0x5e34>
   18014:	ldr	r7, [sp, #40]	; 0x28
   18018:	b	17a14 <__assert_fail@plt+0x64a4>
   1801c:	sub	r3, fp, #2
   18020:	clz	r3, r3
   18024:	lsr	r3, r3, #5
   18028:	b	17828 <__assert_fail@plt+0x62b8>
   1802c:	sub	r3, fp, #2
   18030:	mov	r6, #0
   18034:	clz	r3, r3
   18038:	lsr	r3, r3, #5
   1803c:	ldr	r2, [sp, #44]	; 0x2c
   18040:	tst	r2, r3
   18044:	beq	17834 <__assert_fail@plt+0x62c4>
   18048:	b	17b50 <__assert_fail@plt+0x65e0>
   1804c:	sub	r3, fp, #2
   18050:	clz	r3, r3
   18054:	lsr	r3, r3, #5
   18058:	b	1803c <__assert_fail@plt+0x6acc>
   1805c:	ldr	r3, [sp, #52]	; 0x34
   18060:	ldrb	r5, [r3]
   18064:	cmp	r5, #126	; 0x7e
   18068:	ldrls	pc, [pc, r5, lsl #2]
   1806c:	b	17d18 <__assert_fail@plt+0x67a8>
   18070:	andeq	r7, r1, r0, lsl ip
   18074:	andeq	r7, r1, r8, lsl sp
   18078:	andeq	r7, r1, r8, lsl sp
   1807c:	andeq	r7, r1, r8, lsl sp
   18080:	andeq	r7, r1, r8, lsl sp
   18084:	andeq	r7, r1, r8, lsl sp
   18088:	andeq	r7, r1, r8, lsl sp
   1808c:	strdeq	r7, [r1], -r4
   18090:	andeq	r7, r1, ip, ror #23
   18094:	andeq	r8, r1, r8, lsr #5
   18098:	andeq	r7, r1, r0, ror #23
   1809c:	muleq	r1, ip, r2
   180a0:			; <UNDEFINED> instruction: 0x00017bbc
   180a4:	andeq	r7, r1, r8, lsl #24
   180a8:	andeq	r7, r1, r8, lsl sp
   180ac:	andeq	r7, r1, r8, lsl sp
   180b0:	andeq	r7, r1, r8, lsl sp
   180b4:	andeq	r7, r1, r8, lsl sp
   180b8:	andeq	r7, r1, r8, lsl sp
   180bc:	andeq	r7, r1, r8, lsl sp
   180c0:	andeq	r7, r1, r8, lsl sp
   180c4:	andeq	r7, r1, r8, lsl sp
   180c8:	andeq	r7, r1, r8, lsl sp
   180cc:	andeq	r7, r1, r8, lsl sp
   180d0:	andeq	r7, r1, r8, lsl sp
   180d4:	andeq	r7, r1, r8, lsl sp
   180d8:	andeq	r7, r1, r8, lsl sp
   180dc:	andeq	r7, r1, r8, lsl sp
   180e0:	andeq	r7, r1, r8, lsl sp
   180e4:	andeq	r7, r1, r8, lsl sp
   180e8:	andeq	r7, r1, r8, lsl sp
   180ec:	andeq	r7, r1, r8, lsl sp
   180f0:	muleq	r1, r4, r2
   180f4:	strdeq	r7, [r1], -ip
   180f8:	strdeq	r7, [r1], -ip
   180fc:	andeq	r8, r1, r8, ror r2
   18100:	strdeq	r7, [r1], -ip
   18104:	andeq	r8, r1, ip, ror #4
   18108:	strdeq	r7, [r1], -ip
   1810c:	andeq	r7, r1, r8, asr sl
   18110:	strdeq	r7, [r1], -ip
   18114:	strdeq	r7, [r1], -ip
   18118:	strdeq	r7, [r1], -ip
   1811c:	andeq	r8, r1, ip, ror #4
   18120:	andeq	r8, r1, ip, ror #4
   18124:	andeq	r8, r1, ip, ror #4
   18128:	andeq	r8, r1, ip, ror #4
   1812c:	andeq	r8, r1, ip, ror #4
   18130:	andeq	r8, r1, ip, ror #4
   18134:	andeq	r8, r1, ip, ror #4
   18138:	andeq	r8, r1, ip, ror #4
   1813c:	andeq	r8, r1, ip, ror #4
   18140:	andeq	r8, r1, ip, ror #4
   18144:	andeq	r8, r1, ip, ror #4
   18148:	andeq	r8, r1, ip, ror #4
   1814c:	andeq	r8, r1, ip, ror #4
   18150:	andeq	r8, r1, ip, ror #4
   18154:	andeq	r8, r1, ip, ror #4
   18158:	andeq	r8, r1, ip, ror #4
   1815c:	strdeq	r7, [r1], -ip
   18160:	strdeq	r7, [r1], -ip
   18164:	strdeq	r7, [r1], -ip
   18168:	strdeq	r7, [r1], -ip
   1816c:	andeq	r7, r1, ip, lsr #20
   18170:	andeq	r7, r1, r8, lsl sp
   18174:	andeq	r8, r1, ip, ror #4
   18178:	andeq	r8, r1, ip, ror #4
   1817c:	andeq	r8, r1, ip, ror #4
   18180:	andeq	r8, r1, ip, ror #4
   18184:	andeq	r8, r1, ip, ror #4
   18188:	andeq	r8, r1, ip, ror #4
   1818c:	andeq	r8, r1, ip, ror #4
   18190:	andeq	r8, r1, ip, ror #4
   18194:	andeq	r8, r1, ip, ror #4
   18198:	andeq	r8, r1, ip, ror #4
   1819c:	andeq	r8, r1, ip, ror #4
   181a0:	andeq	r8, r1, ip, ror #4
   181a4:	andeq	r8, r1, ip, ror #4
   181a8:	andeq	r8, r1, ip, ror #4
   181ac:	andeq	r8, r1, ip, ror #4
   181b0:	andeq	r8, r1, ip, ror #4
   181b4:	andeq	r8, r1, ip, ror #4
   181b8:	andeq	r8, r1, ip, ror #4
   181bc:	andeq	r8, r1, ip, ror #4
   181c0:	andeq	r8, r1, ip, ror #4
   181c4:	andeq	r8, r1, ip, ror #4
   181c8:	andeq	r8, r1, ip, ror #4
   181cc:	andeq	r8, r1, ip, ror #4
   181d0:	andeq	r8, r1, ip, ror #4
   181d4:	andeq	r8, r1, ip, ror #4
   181d8:	andeq	r8, r1, ip, ror #4
   181dc:	strdeq	r7, [r1], -ip
   181e0:	ldrdeq	r7, [r1], -r4
   181e4:	andeq	r8, r1, ip, ror #4
   181e8:	strdeq	r7, [r1], -ip
   181ec:	andeq	r8, r1, ip, ror #4
   181f0:	strdeq	r7, [r1], -ip
   181f4:	andeq	r8, r1, ip, ror #4
   181f8:	andeq	r8, r1, ip, ror #4
   181fc:	andeq	r8, r1, ip, ror #4
   18200:	andeq	r8, r1, ip, ror #4
   18204:	andeq	r8, r1, ip, ror #4
   18208:	andeq	r8, r1, ip, ror #4
   1820c:	andeq	r8, r1, ip, ror #4
   18210:	andeq	r8, r1, ip, ror #4
   18214:	andeq	r8, r1, ip, ror #4
   18218:	andeq	r8, r1, ip, ror #4
   1821c:	andeq	r8, r1, ip, ror #4
   18220:	andeq	r8, r1, ip, ror #4
   18224:	andeq	r8, r1, ip, ror #4
   18228:	andeq	r8, r1, ip, ror #4
   1822c:	andeq	r8, r1, ip, ror #4
   18230:	andeq	r8, r1, ip, ror #4
   18234:	andeq	r8, r1, ip, ror #4
   18238:	andeq	r8, r1, ip, ror #4
   1823c:	andeq	r8, r1, ip, ror #4
   18240:	andeq	r8, r1, ip, ror #4
   18244:	andeq	r8, r1, ip, ror #4
   18248:	andeq	r8, r1, ip, ror #4
   1824c:	andeq	r8, r1, ip, ror #4
   18250:	andeq	r8, r1, ip, ror #4
   18254:	andeq	r8, r1, ip, ror #4
   18258:	andeq	r8, r1, ip, ror #4
   1825c:	strdeq	r7, [r1], -r8
   18260:	strdeq	r7, [r1], -ip
   18264:	strdeq	r7, [r1], -r8
   18268:	andeq	r8, r1, r8, ror r2
   1826c:	mov	r6, r7
   18270:	mov	r7, #0
   18274:	b	17a24 <__assert_fail@plt+0x64b4>
   18278:	cmp	r9, #0
   1827c:	mov	r2, #0
   18280:	beq	17ce8 <__assert_fail@plt+0x6778>
   18284:	mov	r6, #0
   18288:	mov	r7, r2
   1828c:	mov	r3, r6
   18290:	b	17844 <__assert_fail@plt+0x62d4>
   18294:	mov	r2, #0
   18298:	b	17cfc <__assert_fail@plt+0x678c>
   1829c:	mov	r7, #0
   182a0:	mov	r3, #118	; 0x76
   182a4:	b	17a08 <__assert_fail@plt+0x6498>
   182a8:	mov	r7, #0
   182ac:	mov	r3, #116	; 0x74
   182b0:	b	17b38 <__assert_fail@plt+0x65c8>
   182b4:	ldr	r3, [sp, #44]	; 0x2c
   182b8:	b	1786c <__assert_fail@plt+0x62fc>
   182bc:	ldr	r3, [sp, #44]	; 0x2c
   182c0:	cmp	r3, #0
   182c4:	bne	18734 <__assert_fail@plt+0x71c4>
   182c8:	add	r9, r9, #1
   182cc:	mov	r6, #0
   182d0:	ldr	r3, [sp, #48]	; 0x30
   182d4:	mov	r5, #92	; 0x5c
   182d8:	b	17af8 <__assert_fail@plt+0x6588>
   182dc:	ldr	r3, [sp, #32]
   182e0:	ldrb	r2, [r3, #1]
   182e4:	adds	r2, r2, #0
   182e8:	movne	r2, #1
   182ec:	b	17814 <__assert_fail@plt+0x62a4>
   182f0:	ldr	r3, [sp, #156]	; 0x9c
   182f4:	ands	r3, r3, #4
   182f8:	beq	18320 <__assert_fail@plt+0x6db0>
   182fc:	ldr	r2, [sp, #28]
   18300:	add	r3, r9, #2
   18304:	cmp	r3, r2
   18308:	bcs	1831c <__assert_fail@plt+0x6dac>
   1830c:	ldr	r2, [sp, #52]	; 0x34
   18310:	ldrb	r5, [r2, #1]
   18314:	cmp	r5, #63	; 0x3f
   18318:	beq	18798 <__assert_fail@plt+0x7228>
   1831c:	mov	r3, #0
   18320:	mov	r5, #63	; 0x3f
   18324:	mov	r6, r3
   18328:	b	17834 <__assert_fail@plt+0x62c4>
   1832c:	ldr	r3, [sp, #44]	; 0x2c
   18330:	cmp	r3, #0
   18334:	bne	18734 <__assert_fail@plt+0x71c4>
   18338:	mov	r6, r3
   1833c:	mov	r5, #63	; 0x3f
   18340:	b	1786c <__assert_fail@plt+0x62fc>
   18344:	ldr	r1, [sp, #28]
   18348:	mov	r2, #0
   1834c:	mov	r3, #0
   18350:	strd	r2, [sp, #104]	; 0x68
   18354:	cmn	r1, #1
   18358:	bne	18368 <__assert_fail@plt+0x6df8>
   1835c:	ldr	r0, [sp, #32]
   18360:	bl	113c0 <strlen@plt>
   18364:	str	r0, [sp, #28]
   18368:	str	r8, [sp, #76]	; 0x4c
   1836c:	mov	r3, #0
   18370:	str	sl, [sp, #80]	; 0x50
   18374:	ldr	sl, [sp, #32]
   18378:	str	r5, [sp, #84]	; 0x54
   1837c:	mov	r5, r3
   18380:	ldr	r8, [sp, #44]	; 0x2c
   18384:	str	r7, [sp, #88]	; 0x58
   18388:	str	r4, [sp, #92]	; 0x5c
   1838c:	ldr	r2, [sp, #28]
   18390:	add	r4, r9, r5
   18394:	add	r3, sp, #104	; 0x68
   18398:	add	r7, sl, r4
   1839c:	add	r0, sp, #100	; 0x64
   183a0:	mov	r1, r7
   183a4:	sub	r2, r2, r4
   183a8:	bl	1a988 <__assert_fail@plt+0x9418>
   183ac:	subs	r1, r0, #0
   183b0:	beq	183fc <__assert_fail@plt+0x6e8c>
   183b4:	cmn	r1, #1
   183b8:	beq	18774 <__assert_fail@plt+0x7204>
   183bc:	cmn	r1, #2
   183c0:	beq	18894 <__assert_fail@plt+0x7324>
   183c4:	cmp	fp, #2
   183c8:	movne	r3, #0
   183cc:	andeq	r3, r8, #1
   183d0:	cmp	r3, #0
   183d4:	bne	18560 <__assert_fail@plt+0x6ff0>
   183d8:	ldr	r0, [sp, #100]	; 0x64
   183dc:	add	r5, r5, r1
   183e0:	bl	112ac <iswprint@plt>
   183e4:	cmp	r0, #0
   183e8:	add	r0, sp, #104	; 0x68
   183ec:	moveq	r6, #0
   183f0:	bl	11234 <mbsinit@plt>
   183f4:	cmp	r0, #0
   183f8:	beq	1838c <__assert_fail@plt+0x6e1c>
   183fc:	ldr	r3, [sp, #40]	; 0x28
   18400:	mov	ip, r5
   18404:	eor	r2, r6, #1
   18408:	ldr	r8, [sp, #76]	; 0x4c
   1840c:	ldr	sl, [sp, #80]	; 0x50
   18410:	and	r2, r2, r3
   18414:	ldr	r5, [sp, #84]	; 0x54
   18418:	ldr	r7, [sp, #88]	; 0x58
   1841c:	ldr	r4, [sp, #92]	; 0x5c
   18420:	cmp	ip, #1
   18424:	bls	17d60 <__assert_fail@plt+0x67f0>
   18428:	add	r1, r9, ip
   1842c:	mov	r0, #39	; 0x27
   18430:	ldr	lr, [sp, #52]	; 0x34
   18434:	mov	ip, #0
   18438:	str	r6, [sp, #52]	; 0x34
   1843c:	ldr	r6, [sp, #48]	; 0x30
   18440:	b	184fc <__assert_fail@plt+0x6f8c>
   18444:	ldr	ip, [sp, #44]	; 0x2c
   18448:	sub	r3, fp, #2
   1844c:	clz	r3, r3
   18450:	lsr	r3, r3, #5
   18454:	cmp	ip, #0
   18458:	bne	1866c <__assert_fail@plt+0x70fc>
   1845c:	eor	ip, r6, #1
   18460:	ands	r3, r3, ip
   18464:	beq	18494 <__assert_fail@plt+0x6f24>
   18468:	cmp	sl, r4
   1846c:	add	ip, r4, #1
   18470:	strbhi	r0, [r8, r4]
   18474:	cmp	sl, ip
   18478:	movhi	r6, #36	; 0x24
   1847c:	strbhi	r6, [r8, ip]
   18480:	add	ip, r4, #2
   18484:	mov	r6, r3
   18488:	cmp	sl, ip
   1848c:	add	r4, r4, #3
   18490:	strbhi	r0, [r8, ip]
   18494:	cmp	sl, r4
   18498:	movhi	r3, #92	; 0x5c
   1849c:	strbhi	r3, [r8, r4]
   184a0:	add	r3, r4, #1
   184a4:	cmp	sl, r3
   184a8:	bls	184b8 <__assert_fail@plt+0x6f48>
   184ac:	lsr	ip, r5, #6
   184b0:	add	ip, ip, #48	; 0x30
   184b4:	strb	ip, [r8, r3]
   184b8:	add	r3, r4, #2
   184bc:	cmp	sl, r3
   184c0:	bls	184d0 <__assert_fail@plt+0x6f60>
   184c4:	ubfx	ip, r5, #3, #3
   184c8:	add	ip, ip, #48	; 0x30
   184cc:	strb	ip, [r8, r3]
   184d0:	add	r9, r9, #1
   184d4:	and	r5, r5, #7
   184d8:	cmp	r9, r1
   184dc:	add	r5, r5, #48	; 0x30
   184e0:	add	r4, r4, #3
   184e4:	bcs	18698 <__assert_fail@plt+0x7128>
   184e8:	mov	ip, r2
   184ec:	cmp	sl, r4
   184f0:	strbhi	r5, [r8, r4]
   184f4:	add	r4, r4, #1
   184f8:	ldrb	r5, [lr, #1]!
   184fc:	cmp	r2, #0
   18500:	bne	18444 <__assert_fail@plt+0x6ed4>
   18504:	eor	r3, ip, #1
   18508:	cmp	r7, #0
   1850c:	and	r3, r3, r6
   18510:	uxtb	r3, r3
   18514:	beq	18528 <__assert_fail@plt+0x6fb8>
   18518:	cmp	sl, r4
   1851c:	movhi	r7, #92	; 0x5c
   18520:	strbhi	r7, [r8, r4]
   18524:	add	r4, r4, #1
   18528:	add	r9, r9, #1
   1852c:	cmp	r9, r1
   18530:	bcs	18680 <__assert_fail@plt+0x7110>
   18534:	cmp	r3, #0
   18538:	beq	186b8 <__assert_fail@plt+0x7148>
   1853c:	cmp	sl, r4
   18540:	add	r3, r4, #1
   18544:	mov	r7, #0
   18548:	strbhi	r0, [r8, r4]
   1854c:	cmp	sl, r3
   18550:	add	r4, r4, #2
   18554:	mov	r6, r7
   18558:	strbhi	r0, [r8, r3]
   1855c:	b	184ec <__assert_fail@plt+0x6f7c>
   18560:	cmp	r1, #1
   18564:	beq	183d8 <__assert_fail@plt+0x6e68>
   18568:	add	r2, r4, #1
   1856c:	add	r3, sl, r1
   18570:	add	r2, sl, r2
   18574:	add	r4, r3, r4
   18578:	ldrb	r3, [r2], #1
   1857c:	sub	r3, r3, #91	; 0x5b
   18580:	cmp	r3, #33	; 0x21
   18584:	ldrls	pc, [pc, r3, lsl #2]
   18588:	b	18614 <__assert_fail@plt+0x70a4>
   1858c:	andeq	r8, r1, r0, lsr #12
   18590:	andeq	r8, r1, r0, lsr #12
   18594:	andeq	r8, r1, r4, lsl r6
   18598:	andeq	r8, r1, r0, lsr #12
   1859c:	andeq	r8, r1, r4, lsl r6
   185a0:	andeq	r8, r1, r0, lsr #12
   185a4:	andeq	r8, r1, r4, lsl r6
   185a8:	andeq	r8, r1, r4, lsl r6
   185ac:	andeq	r8, r1, r4, lsl r6
   185b0:	andeq	r8, r1, r4, lsl r6
   185b4:	andeq	r8, r1, r4, lsl r6
   185b8:	andeq	r8, r1, r4, lsl r6
   185bc:	andeq	r8, r1, r4, lsl r6
   185c0:	andeq	r8, r1, r4, lsl r6
   185c4:	andeq	r8, r1, r4, lsl r6
   185c8:	andeq	r8, r1, r4, lsl r6
   185cc:	andeq	r8, r1, r4, lsl r6
   185d0:	andeq	r8, r1, r4, lsl r6
   185d4:	andeq	r8, r1, r4, lsl r6
   185d8:	andeq	r8, r1, r4, lsl r6
   185dc:	andeq	r8, r1, r4, lsl r6
   185e0:	andeq	r8, r1, r4, lsl r6
   185e4:	andeq	r8, r1, r4, lsl r6
   185e8:	andeq	r8, r1, r4, lsl r6
   185ec:	andeq	r8, r1, r4, lsl r6
   185f0:	andeq	r8, r1, r4, lsl r6
   185f4:	andeq	r8, r1, r4, lsl r6
   185f8:	andeq	r8, r1, r4, lsl r6
   185fc:	andeq	r8, r1, r4, lsl r6
   18600:	andeq	r8, r1, r4, lsl r6
   18604:	andeq	r8, r1, r4, lsl r6
   18608:	andeq	r8, r1, r4, lsl r6
   1860c:	andeq	r8, r1, r4, lsl r6
   18610:	andeq	r8, r1, r0, lsr #12
   18614:	cmp	r4, r2
   18618:	bne	18578 <__assert_fail@plt+0x7008>
   1861c:	b	183d8 <__assert_fail@plt+0x6e68>
   18620:	mov	r8, #2
   18624:	ldr	fp, [sp, #76]	; 0x4c
   18628:	ldr	sl, [sp, #80]	; 0x50
   1862c:	b	17b58 <__assert_fail@plt+0x65e8>
   18630:	ldr	r2, [sp, #40]	; 0x28
   18634:	str	fp, [sp, #152]	; 0x98
   18638:	mov	fp, r8
   1863c:	ldr	r8, [sp, #152]	; 0x98
   18640:	and	r2, r2, r3
   18644:	str	r2, [sp, #40]	; 0x28
   18648:	b	17b58 <__assert_fail@plt+0x65e8>
   1864c:	cmp	sl, r4
   18650:	movls	r0, r4
   18654:	bls	17c88 <__assert_fail@plt+0x6718>
   18658:	ldr	r3, [sp, #48]	; 0x30
   1865c:	b	17c78 <__assert_fail@plt+0x6708>
   18660:	str	sl, [sp, #72]	; 0x48
   18664:	ldr	sl, [sp, #44]	; 0x2c
   18668:	b	17ac8 <__assert_fail@plt+0x6558>
   1866c:	str	r3, [sp, #40]	; 0x28
   18670:	str	fp, [sp, #152]	; 0x98
   18674:	mov	fp, r8
   18678:	ldr	r8, [sp, #152]	; 0x98
   1867c:	b	17b58 <__assert_fail@plt+0x65e8>
   18680:	str	r6, [sp, #48]	; 0x30
   18684:	ldr	r6, [sp, #52]	; 0x34
   18688:	b	17af8 <__assert_fail@plt+0x6588>
   1868c:	mov	r6, #0
   18690:	ldr	r2, [sp, #40]	; 0x28
   18694:	b	18428 <__assert_fail@plt+0x6eb8>
   18698:	str	r6, [sp, #48]	; 0x30
   1869c:	ldr	r6, [sp, #52]	; 0x34
   186a0:	b	178e4 <__assert_fail@plt+0x6374>
   186a4:	add	r4, r4, #4
   186a8:	mov	r6, #0
   186ac:	str	r3, [sp, #48]	; 0x30
   186b0:	mov	r5, #48	; 0x30
   186b4:	b	1786c <__assert_fail@plt+0x62fc>
   186b8:	mov	r7, r3
   186bc:	b	184ec <__assert_fail@plt+0x6f7c>
   186c0:	mov	r3, #1
   186c4:	movw	r2, #53156	; 0xcfa4
   186c8:	movt	r2, #1
   186cc:	mov	r4, r3
   186d0:	str	r3, [sp, #36]	; 0x24
   186d4:	str	r3, [sp, #40]	; 0x28
   186d8:	str	sl, [sp, #44]	; 0x2c
   186dc:	str	sl, [sp, #48]	; 0x30
   186e0:	str	r3, [sp, #56]	; 0x38
   186e4:	str	r2, [sp, #60]	; 0x3c
   186e8:	str	sl, [sp, #68]	; 0x44
   186ec:	str	sl, [sp, #72]	; 0x48
   186f0:	b	17394 <__assert_fail@plt+0x5e24>
   186f4:	mov	r3, r6
   186f8:	mov	r5, #48	; 0x30
   186fc:	mov	r6, #0
   18700:	b	1786c <__assert_fail@plt+0x62fc>
   18704:	mov	r5, r3
   18708:	b	17be4 <__assert_fail@plt+0x6674>
   1870c:	cmp	sl, r4
   18710:	mov	r5, #48	; 0x30
   18714:	movhi	r3, #48	; 0x30
   18718:	strbhi	r3, [r8, r4]
   1871c:	add	r3, r0, #2
   18720:	add	r4, r0, #3
   18724:	cmp	sl, r3
   18728:	movhi	r1, #48	; 0x30
   1872c:	strbhi	r1, [r8, r3]
   18730:	b	17cbc <__assert_fail@plt+0x674c>
   18734:	str	fp, [sp, #152]	; 0x98
   18738:	mov	fp, r8
   1873c:	ldr	r8, [sp, #152]	; 0x98
   18740:	b	17b58 <__assert_fail@plt+0x65e8>
   18744:	ldr	r3, [sp, #164]	; 0xa4
   18748:	ldrb	r3, [r3]
   1874c:	cmp	r3, #0
   18750:	beq	17364 <__assert_fail@plt+0x5df4>
   18754:	ldr	r2, [sp, #164]	; 0xa4
   18758:	cmp	sl, r4
   1875c:	strbhi	r3, [fp, r4]
   18760:	add	r4, r4, #1
   18764:	ldrb	r3, [r2, #1]!
   18768:	cmp	r3, #0
   1876c:	bne	18758 <__assert_fail@plt+0x71e8>
   18770:	b	17364 <__assert_fail@plt+0x5df4>
   18774:	mov	ip, r5
   18778:	mov	r6, #0
   1877c:	ldr	r2, [sp, #40]	; 0x28
   18780:	ldr	r8, [sp, #76]	; 0x4c
   18784:	ldr	sl, [sp, #80]	; 0x50
   18788:	ldr	r5, [sp, #84]	; 0x54
   1878c:	ldr	r7, [sp, #88]	; 0x58
   18790:	ldr	r4, [sp, #92]	; 0x5c
   18794:	b	18420 <__assert_fail@plt+0x6eb0>
   18798:	ldr	r2, [sp, #32]
   1879c:	ldrb	r1, [r2, r3]
   187a0:	sub	r2, r1, #33	; 0x21
   187a4:	cmp	r2, #29
   187a8:	ldrls	pc, [pc, r2, lsl #2]
   187ac:	b	18888 <__assert_fail@plt+0x7318>
   187b0:	andeq	r8, r1, r8, lsr #16
   187b4:	andeq	r8, r1, r8, lsl #17
   187b8:	andeq	r8, r1, r8, lsl #17
   187bc:	andeq	r8, r1, r8, lsl #17
   187c0:	andeq	r8, r1, r8, lsl #17
   187c4:	andeq	r8, r1, r8, lsl #17
   187c8:	andeq	r8, r1, r8, lsr #16
   187cc:	andeq	r8, r1, r8, lsr #16
   187d0:	andeq	r8, r1, r8, lsr #16
   187d4:	andeq	r8, r1, r8, lsl #17
   187d8:	andeq	r8, r1, r8, lsl #17
   187dc:	andeq	r8, r1, r8, lsl #17
   187e0:	andeq	r8, r1, r8, lsr #16
   187e4:	andeq	r8, r1, r8, lsl #17
   187e8:	andeq	r8, r1, r8, lsr #16
   187ec:	andeq	r8, r1, r8, lsl #17
   187f0:	andeq	r8, r1, r8, lsl #17
   187f4:	andeq	r8, r1, r8, lsl #17
   187f8:	andeq	r8, r1, r8, lsl #17
   187fc:	andeq	r8, r1, r8, lsl #17
   18800:	andeq	r8, r1, r8, lsl #17
   18804:	andeq	r8, r1, r8, lsl #17
   18808:	andeq	r8, r1, r8, lsl #17
   1880c:	andeq	r8, r1, r8, lsl #17
   18810:	andeq	r8, r1, r8, lsl #17
   18814:	andeq	r8, r1, r8, lsl #17
   18818:	andeq	r8, r1, r8, lsl #17
   1881c:	andeq	r8, r1, r8, lsr #16
   18820:	andeq	r8, r1, r8, lsr #16
   18824:	andeq	r8, r1, r8, lsr #16
   18828:	ldr	r2, [sp, #44]	; 0x2c
   1882c:	cmp	r2, #0
   18830:	bne	1898c <__assert_fail@plt+0x741c>
   18834:	cmp	sl, r4
   18838:	mov	r5, r1
   1883c:	movhi	r2, #63	; 0x3f
   18840:	mov	r9, r3
   18844:	strbhi	r2, [r8, r4]
   18848:	add	r2, r4, #1
   1884c:	cmp	sl, r2
   18850:	movhi	r0, #34	; 0x22
   18854:	strbhi	r0, [r8, r2]
   18858:	add	r2, r4, #2
   1885c:	cmp	sl, r2
   18860:	movhi	r0, #34	; 0x22
   18864:	strbhi	r0, [r8, r2]
   18868:	add	r2, r4, #3
   1886c:	add	r4, r4, #4
   18870:	cmp	sl, r2
   18874:	movhi	r0, #63	; 0x3f
   18878:	strbhi	r0, [r8, r2]
   1887c:	mov	r2, #0
   18880:	mov	r6, r2
   18884:	b	17cbc <__assert_fail@plt+0x674c>
   18888:	mov	r3, #0
   1888c:	mov	r6, r3
   18890:	b	17834 <__assert_fail@plt+0x62c4>
   18894:	ldr	r0, [sp, #28]
   18898:	mov	r1, r4
   1889c:	mov	r2, r7
   188a0:	mov	r3, r5
   188a4:	mov	ip, r5
   188a8:	ldr	r8, [sp, #76]	; 0x4c
   188ac:	ldr	sl, [sp, #80]	; 0x50
   188b0:	cmp	r1, r0
   188b4:	ldr	r5, [sp, #84]	; 0x54
   188b8:	ldr	r7, [sp, #88]	; 0x58
   188bc:	ldr	r4, [sp, #92]	; 0x5c
   188c0:	bcs	188f4 <__assert_fail@plt+0x7384>
   188c4:	ldrb	r6, [r2]
   188c8:	cmp	r6, #0
   188cc:	bne	188e0 <__assert_fail@plt+0x7370>
   188d0:	b	18a14 <__assert_fail@plt+0x74a4>
   188d4:	ldrb	r6, [r2, #1]!
   188d8:	cmp	r6, #0
   188dc:	beq	1899c <__assert_fail@plt+0x742c>
   188e0:	add	r3, r3, #1
   188e4:	add	r1, r9, r3
   188e8:	cmp	r1, r0
   188ec:	bcc	188d4 <__assert_fail@plt+0x7364>
   188f0:	mov	ip, r3
   188f4:	mov	r6, #0
   188f8:	ldr	r2, [sp, #40]	; 0x28
   188fc:	b	18420 <__assert_fail@plt+0x6eb0>
   18900:	mov	r3, #1
   18904:	mov	r2, #0
   18908:	mov	r4, r2
   1890c:	str	r3, [sp, #36]	; 0x24
   18910:	str	r3, [sp, #40]	; 0x28
   18914:	str	r3, [sp, #44]	; 0x2c
   18918:	str	r2, [sp, #48]	; 0x30
   1891c:	str	r3, [sp, #56]	; 0x38
   18920:	movw	r3, #53156	; 0xcfa4
   18924:	movt	r3, #1
   18928:	str	r3, [sp, #60]	; 0x3c
   1892c:	str	r2, [sp, #68]	; 0x44
   18930:	str	r2, [sp, #72]	; 0x48
   18934:	b	17394 <__assert_fail@plt+0x5e24>
   18938:	mov	r2, r3
   1893c:	ldr	r3, [sp, #60]	; 0x3c
   18940:	cmp	r3, #0
   18944:	moveq	r2, #0
   18948:	andne	r2, r2, #1
   1894c:	cmp	r2, #0
   18950:	beq	1897c <__assert_fail@plt+0x740c>
   18954:	mov	r2, r3
   18958:	ldrb	r3, [r3]
   1895c:	cmp	r3, #0
   18960:	beq	1897c <__assert_fail@plt+0x740c>
   18964:	cmp	sl, r4
   18968:	strbhi	r3, [fp, r4]
   1896c:	add	r4, r4, #1
   18970:	ldrb	r3, [r2, #1]!
   18974:	cmp	r3, #0
   18978:	bne	18964 <__assert_fail@plt+0x73f4>
   1897c:	cmp	sl, r4
   18980:	movhi	r3, #0
   18984:	strbhi	r3, [fp, r4]
   18988:	b	17b9c <__assert_fail@plt+0x662c>
   1898c:	str	fp, [sp, #152]	; 0x98
   18990:	mov	fp, r8
   18994:	ldr	r8, [sp, #152]	; 0x98
   18998:	b	17b64 <__assert_fail@plt+0x65f4>
   1899c:	mov	ip, r3
   189a0:	ldr	r2, [sp, #40]	; 0x28
   189a4:	b	18420 <__assert_fail@plt+0x6eb0>
   189a8:	str	fp, [sp, #152]	; 0x98
   189ac:	mov	fp, r8
   189b0:	ldr	r8, [sp, #152]	; 0x98
   189b4:	sub	r3, r8, #2
   189b8:	clz	r3, r3
   189bc:	lsr	r3, r3, #5
   189c0:	str	r3, [sp, #40]	; 0x28
   189c4:	b	17b58 <__assert_fail@plt+0x65e8>
   189c8:	mov	ip, #5
   189cc:	ldr	r3, [sp, #28]
   189d0:	str	ip, [sp]
   189d4:	ldr	r2, [sp, #156]	; 0x9c
   189d8:	ldr	ip, [sp, #164]	; 0xa4
   189dc:	ldr	r0, [sp, #160]	; 0xa0
   189e0:	str	r2, [sp, #4]
   189e4:	ldr	r2, [sp, #32]
   189e8:	ldr	r1, [sp, #72]	; 0x48
   189ec:	str	ip, [sp, #12]
   189f0:	ldr	ip, [sp, #168]	; 0xa8
   189f4:	str	r0, [sp, #8]
   189f8:	mov	r0, fp
   189fc:	str	ip, [sp, #16]
   18a00:	bl	172ac <__assert_fail@plt+0x5d3c>
   18a04:	mov	r4, r0
   18a08:	b	17b9c <__assert_fail@plt+0x662c>
   18a0c:	mov	r8, #2
   18a10:	b	17b58 <__assert_fail@plt+0x65e8>
   18a14:	ldr	r2, [sp, #40]	; 0x28
   18a18:	b	18420 <__assert_fail@plt+0x6eb0>
   18a1c:	mov	r3, #0
   18a20:	mov	r2, #1
   18a24:	mov	r4, r3
   18a28:	strd	r2, [sp, #36]	; 0x24
   18a2c:	strd	r2, [sp, #44]	; 0x2c
   18a30:	str	r2, [sp, #56]	; 0x38
   18a34:	str	r3, [sp, #68]	; 0x44
   18a38:	str	r3, [sp, #72]	; 0x48
   18a3c:	movw	r3, #53176	; 0xcfb8
   18a40:	movt	r3, #1
   18a44:	str	r3, [sp, #60]	; 0x3c
   18a48:	b	17394 <__assert_fail@plt+0x5e24>
   18a4c:	mov	r3, #0
   18a50:	mov	r1, #1
   18a54:	mov	r2, r3
   18a58:	str	r1, [sp, #36]	; 0x24
   18a5c:	str	r3, [sp, #48]	; 0x30
   18a60:	str	sl, [sp, #72]	; 0x48
   18a64:	b	1799c <__assert_fail@plt+0x642c>
   18a68:	bl	11540 <abort@plt>
   18a6c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18a70:	mov	r4, r0
   18a74:	mov	r5, r3
   18a78:	strd	r6, [sp, #8]
   18a7c:	movw	r7, #57716	; 0xe174
   18a80:	movt	r7, #2
   18a84:	strd	r8, [sp, #16]
   18a88:	strd	sl, [sp, #24]
   18a8c:	mov	sl, r1
   18a90:	mov	fp, r2
   18a94:	str	lr, [sp, #32]
   18a98:	sub	sp, sp, #60	; 0x3c
   18a9c:	bl	113f0 <__errno_location@plt>
   18aa0:	mov	r8, r0
   18aa4:	cmn	r4, #-2147483647	; 0x80000001
   18aa8:	ldr	r6, [r7]
   18aac:	movne	r0, #0
   18ab0:	moveq	r0, #1
   18ab4:	ldr	r3, [r8]
   18ab8:	orrs	r0, r0, r4, lsr #31
   18abc:	str	r3, [sp, #28]
   18ac0:	bne	18c50 <__assert_fail@plt+0x76e0>
   18ac4:	ldr	r3, [r7, #4]
   18ac8:	cmp	r3, r4
   18acc:	bgt	18b2c <__assert_fail@plt+0x75bc>
   18ad0:	add	r1, r7, #8
   18ad4:	sub	r2, r4, r3
   18ad8:	str	r3, [sp, #52]	; 0x34
   18adc:	cmp	r6, r1
   18ae0:	add	r2, r2, #1
   18ae4:	beq	18c28 <__assert_fail@plt+0x76b8>
   18ae8:	mov	r1, #8
   18aec:	mov	r0, r6
   18af0:	mvn	r3, #-2147483648	; 0x80000000
   18af4:	str	r1, [sp]
   18af8:	add	r1, sp, #52	; 0x34
   18afc:	bl	19c28 <__assert_fail@plt+0x86b8>
   18b00:	mov	r6, r0
   18b04:	str	r0, [r7]
   18b08:	ldr	r0, [r7, #4]
   18b0c:	mov	r1, #0
   18b10:	ldr	r2, [sp, #52]	; 0x34
   18b14:	sub	r2, r2, r0
   18b18:	add	r0, r6, r0, lsl #3
   18b1c:	lsl	r2, r2, #3
   18b20:	bl	11414 <memset@plt>
   18b24:	ldr	r3, [sp, #52]	; 0x34
   18b28:	str	r3, [r7, #4]
   18b2c:	ldr	r1, [r5, #4]
   18b30:	add	r0, r6, r4, lsl #3
   18b34:	add	ip, r5, #8
   18b38:	mov	r3, fp
   18b3c:	mov	r2, sl
   18b40:	ldr	r7, [r0, #4]
   18b44:	str	r0, [sp, #36]	; 0x24
   18b48:	str	ip, [sp, #40]	; 0x28
   18b4c:	orr	r0, r1, #1
   18b50:	ldr	r9, [r6, r4, lsl #3]
   18b54:	str	ip, [sp, #8]
   18b58:	ldr	lr, [r5, #44]	; 0x2c
   18b5c:	str	r0, [sp, #4]
   18b60:	ldr	ip, [r5]
   18b64:	mov	r1, r9
   18b68:	str	ip, [sp, #32]
   18b6c:	ldr	ip, [r5, #40]	; 0x28
   18b70:	str	ip, [sp, #12]
   18b74:	ldr	ip, [sp, #32]
   18b78:	str	lr, [sp, #16]
   18b7c:	str	r0, [sp, #44]	; 0x2c
   18b80:	mov	r0, r7
   18b84:	str	ip, [sp]
   18b88:	bl	172ac <__assert_fail@plt+0x5d3c>
   18b8c:	cmp	r9, r0
   18b90:	bhi	18c00 <__assert_fail@plt+0x7690>
   18b94:	add	r9, r0, #1
   18b98:	movw	r3, #58040	; 0xe2b8
   18b9c:	movt	r3, #2
   18ba0:	cmp	r7, r3
   18ba4:	str	r9, [r6, r4, lsl #3]
   18ba8:	beq	18bb4 <__assert_fail@plt+0x7644>
   18bac:	mov	r0, r7
   18bb0:	bl	1a81c <__assert_fail@plt+0x92ac>
   18bb4:	mov	r0, r9
   18bb8:	bl	19a78 <__assert_fail@plt+0x8508>
   18bbc:	ldr	ip, [r5]
   18bc0:	mov	r3, fp
   18bc4:	mov	r2, sl
   18bc8:	mov	r1, r9
   18bcc:	mov	r7, r0
   18bd0:	ldr	lr, [sp, #36]	; 0x24
   18bd4:	ldr	r4, [r5, #40]	; 0x28
   18bd8:	str	r0, [lr, #4]
   18bdc:	ldr	lr, [r5, #44]	; 0x2c
   18be0:	str	ip, [sp]
   18be4:	ldr	ip, [sp, #44]	; 0x2c
   18be8:	str	ip, [sp, #4]
   18bec:	ldr	ip, [sp, #40]	; 0x28
   18bf0:	str	r4, [sp, #12]
   18bf4:	str	lr, [sp, #16]
   18bf8:	str	ip, [sp, #8]
   18bfc:	bl	172ac <__assert_fail@plt+0x5d3c>
   18c00:	ldr	r3, [sp, #28]
   18c04:	mov	r0, r7
   18c08:	str	r3, [r8]
   18c0c:	add	sp, sp, #60	; 0x3c
   18c10:	ldrd	r4, [sp]
   18c14:	ldrd	r6, [sp, #8]
   18c18:	ldrd	r8, [sp, #16]
   18c1c:	ldrd	sl, [sp, #24]
   18c20:	add	sp, sp, #32
   18c24:	pop	{pc}		; (ldr pc, [sp], #4)
   18c28:	mov	r1, #8
   18c2c:	mvn	r3, #-2147483648	; 0x80000000
   18c30:	str	r1, [sp]
   18c34:	add	r1, sp, #52	; 0x34
   18c38:	bl	19c28 <__assert_fail@plt+0x86b8>
   18c3c:	ldrd	r2, [r7, #8]
   18c40:	mov	r6, r0
   18c44:	str	r0, [r7]
   18c48:	strd	r2, [r0]
   18c4c:	b	18b08 <__assert_fail@plt+0x7598>
   18c50:	bl	11540 <abort@plt>
   18c54:	strd	r4, [sp, #-16]!
   18c58:	mov	r5, r0
   18c5c:	str	r6, [sp, #8]
   18c60:	str	lr, [sp, #12]
   18c64:	bl	113f0 <__errno_location@plt>
   18c68:	mov	r4, r0
   18c6c:	cmp	r5, #0
   18c70:	ldr	r0, [pc, #32]	; 18c98 <__assert_fail@plt+0x7728>
   18c74:	mov	r1, #48	; 0x30
   18c78:	movne	r0, r5
   18c7c:	ldr	r6, [r4]
   18c80:	bl	19da0 <__assert_fail@plt+0x8830>
   18c84:	str	r6, [r4]
   18c88:	ldrd	r4, [sp]
   18c8c:	ldr	r6, [sp, #8]
   18c90:	add	sp, sp, #12
   18c94:	pop	{pc}		; (ldr pc, [sp], #4)
   18c98:			; <UNDEFINED> instruction: 0x0002e3b8
   18c9c:	ldr	r3, [pc, #12]	; 18cb0 <__assert_fail@plt+0x7740>
   18ca0:	cmp	r0, #0
   18ca4:	moveq	r0, r3
   18ca8:	ldr	r0, [r0]
   18cac:	bx	lr
   18cb0:			; <UNDEFINED> instruction: 0x0002e3b8
   18cb4:	ldr	r3, [pc, #12]	; 18cc8 <__assert_fail@plt+0x7758>
   18cb8:	cmp	r0, #0
   18cbc:	moveq	r0, r3
   18cc0:	str	r1, [r0]
   18cc4:	bx	lr
   18cc8:			; <UNDEFINED> instruction: 0x0002e3b8
   18ccc:	ldr	r3, [pc, #52]	; 18d08 <__assert_fail@plt+0x7798>
   18cd0:	cmp	r0, #0
   18cd4:	push	{lr}		; (str lr, [sp, #-4]!)
   18cd8:	lsr	lr, r1, #5
   18cdc:	and	r1, r1, #31
   18ce0:	moveq	r0, r3
   18ce4:	add	r3, r0, #8
   18ce8:	ldr	ip, [r3, lr, lsl #2]
   18cec:	lsr	r0, ip, r1
   18cf0:	eor	r2, r2, r0
   18cf4:	and	r0, r0, #1
   18cf8:	and	r2, r2, #1
   18cfc:	eor	r1, ip, r2, lsl r1
   18d00:	str	r1, [r3, lr, lsl #2]
   18d04:	pop	{pc}		; (ldr pc, [sp], #4)
   18d08:			; <UNDEFINED> instruction: 0x0002e3b8
   18d0c:	ldr	r3, [pc, #16]	; 18d24 <__assert_fail@plt+0x77b4>
   18d10:	cmp	r0, #0
   18d14:	movne	r3, r0
   18d18:	ldr	r0, [r3, #4]
   18d1c:	str	r1, [r3, #4]
   18d20:	bx	lr
   18d24:			; <UNDEFINED> instruction: 0x0002e3b8
   18d28:	ldr	r3, [pc, #48]	; 18d60 <__assert_fail@plt+0x77f0>
   18d2c:	cmp	r0, #0
   18d30:	mov	ip, #10
   18d34:	moveq	r0, r3
   18d38:	cmp	r2, #0
   18d3c:	cmpne	r1, #0
   18d40:	str	ip, [r0]
   18d44:	beq	18d54 <__assert_fail@plt+0x77e4>
   18d48:	str	r1, [r0, #40]	; 0x28
   18d4c:	str	r2, [r0, #44]	; 0x2c
   18d50:	bx	lr
   18d54:	str	r4, [sp, #-8]!
   18d58:	str	lr, [sp, #4]
   18d5c:	bl	11540 <abort@plt>
   18d60:			; <UNDEFINED> instruction: 0x0002e3b8
   18d64:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18d68:	strd	r6, [sp, #8]
   18d6c:	mov	r7, r0
   18d70:	mov	r6, r1
   18d74:	strd	r8, [sp, #16]
   18d78:	mov	r8, r2
   18d7c:	mov	r9, r3
   18d80:	str	lr, [sp, #24]
   18d84:	sub	sp, sp, #28
   18d88:	ldr	r4, [sp, #56]	; 0x38
   18d8c:	ldr	ip, [pc, #104]	; 18dfc <__assert_fail@plt+0x788c>
   18d90:	cmp	r4, #0
   18d94:	moveq	r4, ip
   18d98:	bl	113f0 <__errno_location@plt>
   18d9c:	ldr	ip, [r4, #44]	; 0x2c
   18da0:	mov	r5, r0
   18da4:	mov	r1, r6
   18da8:	add	lr, r4, #8
   18dac:	mov	r3, r9
   18db0:	ldr	r6, [r5]
   18db4:	mov	r2, r8
   18db8:	mov	r0, r7
   18dbc:	str	ip, [sp, #16]
   18dc0:	ldr	ip, [r4, #40]	; 0x28
   18dc4:	str	lr, [sp, #8]
   18dc8:	str	ip, [sp, #12]
   18dcc:	ldr	ip, [r4, #4]
   18dd0:	str	ip, [sp, #4]
   18dd4:	ldr	ip, [r4]
   18dd8:	str	ip, [sp]
   18ddc:	bl	172ac <__assert_fail@plt+0x5d3c>
   18de0:	str	r6, [r5]
   18de4:	add	sp, sp, #28
   18de8:	ldrd	r4, [sp]
   18dec:	ldrd	r6, [sp, #8]
   18df0:	ldrd	r8, [sp, #16]
   18df4:	add	sp, sp, #24
   18df8:	pop	{pc}		; (ldr pc, [sp], #4)
   18dfc:			; <UNDEFINED> instruction: 0x0002e3b8
   18e00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18e04:	cmp	r3, #0
   18e08:	ldr	r4, [pc, #220]	; 18eec <__assert_fail@plt+0x797c>
   18e0c:	movne	r4, r3
   18e10:	strd	r6, [sp, #8]
   18e14:	mov	r6, r2
   18e18:	strd	r8, [sp, #16]
   18e1c:	mov	r9, r0
   18e20:	strd	sl, [sp, #24]
   18e24:	mov	sl, r1
   18e28:	str	lr, [sp, #32]
   18e2c:	sub	sp, sp, #44	; 0x2c
   18e30:	bl	113f0 <__errno_location@plt>
   18e34:	ldr	r5, [r4, #4]
   18e38:	mov	r7, r0
   18e3c:	mov	r1, #0
   18e40:	add	r8, r4, #8
   18e44:	mov	r3, sl
   18e48:	ldr	ip, [r4, #44]	; 0x2c
   18e4c:	mov	r2, r9
   18e50:	mov	r0, r1
   18e54:	ldr	lr, [r7]
   18e58:	cmp	r6, r1
   18e5c:	orreq	r5, r5, #1
   18e60:	str	ip, [sp, #16]
   18e64:	ldr	ip, [r4, #40]	; 0x28
   18e68:	stmib	sp, {r5, r8, ip}
   18e6c:	ldr	ip, [r4]
   18e70:	str	lr, [sp, #28]
   18e74:	str	ip, [sp]
   18e78:	bl	172ac <__assert_fail@plt+0x5d3c>
   18e7c:	add	r1, r0, #1
   18e80:	mov	fp, r0
   18e84:	mov	r0, r1
   18e88:	str	r1, [sp, #36]	; 0x24
   18e8c:	bl	19a78 <__assert_fail@plt+0x8508>
   18e90:	ldr	ip, [r4, #44]	; 0x2c
   18e94:	mov	r3, sl
   18e98:	mov	r2, r9
   18e9c:	ldr	r1, [sp, #36]	; 0x24
   18ea0:	str	ip, [sp, #16]
   18ea4:	ldr	ip, [r4, #40]	; 0x28
   18ea8:	str	r0, [sp, #32]
   18eac:	stmib	sp, {r5, r8, ip}
   18eb0:	ldr	ip, [r4]
   18eb4:	str	ip, [sp]
   18eb8:	bl	172ac <__assert_fail@plt+0x5d3c>
   18ebc:	ldr	lr, [sp, #28]
   18ec0:	cmp	r6, #0
   18ec4:	ldr	r0, [sp, #32]
   18ec8:	str	lr, [r7]
   18ecc:	strne	fp, [r6]
   18ed0:	add	sp, sp, #44	; 0x2c
   18ed4:	ldrd	r4, [sp]
   18ed8:	ldrd	r6, [sp, #8]
   18edc:	ldrd	r8, [sp, #16]
   18ee0:	ldrd	sl, [sp, #24]
   18ee4:	add	sp, sp, #32
   18ee8:	pop	{pc}		; (ldr pc, [sp], #4)
   18eec:			; <UNDEFINED> instruction: 0x0002e3b8
   18ef0:	mov	r3, r2
   18ef4:	mov	r2, #0
   18ef8:	b	18e00 <__assert_fail@plt+0x7890>
   18efc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18f00:	movw	r5, #57716	; 0xe174
   18f04:	movt	r5, #2
   18f08:	ldr	r3, [r5, #4]
   18f0c:	strd	r6, [sp, #8]
   18f10:	str	r8, [sp, #16]
   18f14:	str	lr, [sp, #20]
   18f18:	ldr	r7, [r5]
   18f1c:	cmp	r3, #1
   18f20:	ble	18f44 <__assert_fail@plt+0x79d4>
   18f24:	mov	r4, #1
   18f28:	add	r6, r7, #4
   18f2c:	ldr	r0, [r6, r4, lsl #3]
   18f30:	add	r4, r4, #1
   18f34:	bl	1a81c <__assert_fail@plt+0x92ac>
   18f38:	ldr	r3, [r5, #4]
   18f3c:	cmp	r3, r4
   18f40:	bgt	18f2c <__assert_fail@plt+0x79bc>
   18f44:	ldr	r0, [r7, #4]
   18f48:	movw	r4, #58040	; 0xe2b8
   18f4c:	movt	r4, #2
   18f50:	cmp	r0, r4
   18f54:	beq	18f68 <__assert_fail@plt+0x79f8>
   18f58:	bl	1a81c <__assert_fail@plt+0x92ac>
   18f5c:	mov	r3, #256	; 0x100
   18f60:	str	r3, [r5, #8]
   18f64:	str	r4, [r5, #12]
   18f68:	ldr	r4, [pc, #44]	; 18f9c <__assert_fail@plt+0x7a2c>
   18f6c:	cmp	r7, r4
   18f70:	beq	18f80 <__assert_fail@plt+0x7a10>
   18f74:	mov	r0, r7
   18f78:	bl	1a81c <__assert_fail@plt+0x92ac>
   18f7c:	str	r4, [r5]
   18f80:	mov	r3, #1
   18f84:	ldrd	r6, [sp, #8]
   18f88:	str	r3, [r5, #4]
   18f8c:	ldrd	r4, [sp]
   18f90:	ldr	r8, [sp, #16]
   18f94:	add	sp, sp, #20
   18f98:	pop	{pc}		; (ldr pc, [sp], #4)
   18f9c:	andeq	lr, r2, ip, ror r1
   18fa0:	ldr	r3, [pc, #4]	; 18fac <__assert_fail@plt+0x7a3c>
   18fa4:	mvn	r2, #0
   18fa8:	b	18a6c <__assert_fail@plt+0x74fc>
   18fac:			; <UNDEFINED> instruction: 0x0002e3b8
   18fb0:	ldr	r3, [pc]	; 18fb8 <__assert_fail@plt+0x7a48>
   18fb4:	b	18a6c <__assert_fail@plt+0x74fc>
   18fb8:			; <UNDEFINED> instruction: 0x0002e3b8
   18fbc:	mov	r1, r0
   18fc0:	ldr	r3, [pc, #8]	; 18fd0 <__assert_fail@plt+0x7a60>
   18fc4:	mvn	r2, #0
   18fc8:	mov	r0, #0
   18fcc:	b	18a6c <__assert_fail@plt+0x74fc>
   18fd0:			; <UNDEFINED> instruction: 0x0002e3b8
   18fd4:	mov	r2, r1
   18fd8:	ldr	r3, [pc, #8]	; 18fe8 <__assert_fail@plt+0x7a78>
   18fdc:	mov	r1, r0
   18fe0:	mov	r0, #0
   18fe4:	b	18a6c <__assert_fail@plt+0x74fc>
   18fe8:			; <UNDEFINED> instruction: 0x0002e3b8
   18fec:	strd	r4, [sp, #-12]!
   18ff0:	mov	r5, r2
   18ff4:	mov	r4, r0
   18ff8:	str	lr, [sp, #8]
   18ffc:	sub	sp, sp, #52	; 0x34
   19000:	mov	r0, sp
   19004:	bl	17108 <__assert_fail@plt+0x5b98>
   19008:	mov	r3, sp
   1900c:	mov	r1, r5
   19010:	mov	r0, r4
   19014:	mvn	r2, #0
   19018:	bl	18a6c <__assert_fail@plt+0x74fc>
   1901c:	add	sp, sp, #52	; 0x34
   19020:	ldrd	r4, [sp]
   19024:	add	sp, sp, #8
   19028:	pop	{pc}		; (ldr pc, [sp], #4)
   1902c:	strd	r4, [sp, #-16]!
   19030:	mov	r5, r2
   19034:	mov	r4, r0
   19038:	str	r6, [sp, #8]
   1903c:	mov	r6, r3
   19040:	str	lr, [sp, #12]
   19044:	sub	sp, sp, #48	; 0x30
   19048:	mov	r0, sp
   1904c:	bl	17108 <__assert_fail@plt+0x5b98>
   19050:	mov	r3, sp
   19054:	mov	r2, r6
   19058:	mov	r1, r5
   1905c:	mov	r0, r4
   19060:	bl	18a6c <__assert_fail@plt+0x74fc>
   19064:	add	sp, sp, #48	; 0x30
   19068:	ldrd	r4, [sp]
   1906c:	ldr	r6, [sp, #8]
   19070:	add	sp, sp, #12
   19074:	pop	{pc}		; (ldr pc, [sp], #4)
   19078:	mov	r2, r1
   1907c:	mov	r1, r0
   19080:	mov	r0, #0
   19084:	b	18fec <__assert_fail@plt+0x7a7c>
   19088:	mov	r3, r2
   1908c:	mov	r2, r1
   19090:	mov	r1, r0
   19094:	mov	r0, #0
   19098:	b	1902c <__assert_fail@plt+0x7abc>
   1909c:	ldr	ip, [pc, #140]	; 19130 <__assert_fail@plt+0x7bc0>
   190a0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   190a4:	ldrd	r4, [ip]
   190a8:	strd	r6, [sp, #8]
   190ac:	ldrd	r6, [ip, #8]
   190b0:	strd	r8, [sp, #16]
   190b4:	lsr	r9, r2, #5
   190b8:	str	lr, [sp, #24]
   190bc:	sub	sp, sp, #52	; 0x34
   190c0:	and	lr, r2, #31
   190c4:	add	r8, sp, #8
   190c8:	mov	r2, r1
   190cc:	strd	r4, [sp]
   190d0:	mov	r1, r0
   190d4:	mov	r3, sp
   190d8:	strd	r6, [sp, #8]
   190dc:	mov	r0, #0
   190e0:	ldrd	r4, [ip, #16]
   190e4:	ldrd	r6, [ip, #24]
   190e8:	strd	r4, [sp, #16]
   190ec:	ldrd	r4, [ip, #32]
   190f0:	strd	r6, [sp, #24]
   190f4:	ldrd	r6, [ip, #40]	; 0x28
   190f8:	strd	r4, [sp, #32]
   190fc:	strd	r6, [sp, #40]	; 0x28
   19100:	ldr	ip, [r8, r9, lsl #2]
   19104:	mvn	r4, ip, lsr lr
   19108:	and	r4, r4, #1
   1910c:	eor	lr, ip, r4, lsl lr
   19110:	str	lr, [r8, r9, lsl #2]
   19114:	bl	18a6c <__assert_fail@plt+0x74fc>
   19118:	add	sp, sp, #52	; 0x34
   1911c:	ldrd	r4, [sp]
   19120:	ldrd	r6, [sp, #8]
   19124:	ldrd	r8, [sp, #16]
   19128:	add	sp, sp, #24
   1912c:	pop	{pc}		; (ldr pc, [sp], #4)
   19130:			; <UNDEFINED> instruction: 0x0002e3b8
   19134:	mov	r2, r1
   19138:	mvn	r1, #0
   1913c:	b	1909c <__assert_fail@plt+0x7b2c>
   19140:	mov	r2, #58	; 0x3a
   19144:	mvn	r1, #0
   19148:	b	1909c <__assert_fail@plt+0x7b2c>
   1914c:	mov	r2, #58	; 0x3a
   19150:	b	1909c <__assert_fail@plt+0x7b2c>
   19154:	strd	r4, [sp, #-20]!	; 0xffffffec
   19158:	strd	r6, [sp, #8]
   1915c:	mov	r6, r0
   19160:	mov	r7, r2
   19164:	str	lr, [sp, #16]
   19168:	sub	sp, sp, #100	; 0x64
   1916c:	mov	r0, sp
   19170:	bl	17108 <__assert_fail@plt+0x5b98>
   19174:	ldrd	r4, [sp, #8]
   19178:	mov	r1, r7
   1917c:	mov	r0, r6
   19180:	add	r3, sp, #48	; 0x30
   19184:	mvn	r2, #0
   19188:	ldrd	r6, [sp]
   1918c:	strd	r4, [sp, #56]	; 0x38
   19190:	ldrd	r4, [sp, #16]
   19194:	strd	r6, [sp, #48]	; 0x30
   19198:	ldrd	r6, [sp, #32]
   1919c:	ldr	lr, [sp, #60]	; 0x3c
   191a0:	strd	r4, [sp, #64]	; 0x40
   191a4:	ldrd	r4, [sp, #24]
   191a8:	mvn	ip, lr
   191ac:	and	ip, ip, #67108864	; 0x4000000
   191b0:	strd	r4, [sp, #72]	; 0x48
   191b4:	eor	ip, ip, lr
   191b8:	ldrd	r4, [sp, #40]	; 0x28
   191bc:	str	ip, [sp, #60]	; 0x3c
   191c0:	strd	r6, [sp, #80]	; 0x50
   191c4:	strd	r4, [sp, #88]	; 0x58
   191c8:	bl	18a6c <__assert_fail@plt+0x74fc>
   191cc:	add	sp, sp, #100	; 0x64
   191d0:	ldrd	r4, [sp]
   191d4:	ldrd	r6, [sp, #8]
   191d8:	add	sp, sp, #16
   191dc:	pop	{pc}		; (ldr pc, [sp], #4)
   191e0:	ldr	ip, [pc, #156]	; 19284 <__assert_fail@plt+0x7d14>
   191e4:	cmp	r2, #0
   191e8:	cmpne	r1, #0
   191ec:	strd	r4, [sp, #-32]!	; 0xffffffe0
   191f0:	strd	r6, [sp, #8]
   191f4:	mov	r6, r2
   191f8:	str	r8, [sp, #16]
   191fc:	mov	r8, r3
   19200:	strd	sl, [sp, #20]
   19204:	ldrd	r4, [ip]
   19208:	str	lr, [sp, #28]
   1920c:	sub	sp, sp, #48	; 0x30
   19210:	mov	lr, #10
   19214:	ldrd	r2, [ip, #8]
   19218:	ldrd	sl, [ip, #16]
   1921c:	strd	r4, [sp]
   19220:	ldrd	r4, [ip, #32]
   19224:	str	lr, [sp]
   19228:	strd	r2, [sp, #8]
   1922c:	strd	sl, [sp, #16]
   19230:	ldrd	r2, [ip, #24]
   19234:	ldrd	sl, [ip, #40]	; 0x28
   19238:	strd	r2, [sp, #24]
   1923c:	strd	r4, [sp, #32]
   19240:	strd	sl, [sp, #40]	; 0x28
   19244:	beq	19280 <__assert_fail@plt+0x7d10>
   19248:	ldr	r2, [sp, #80]	; 0x50
   1924c:	mov	r7, r1
   19250:	mov	r3, sp
   19254:	mov	r1, r8
   19258:	str	r7, [sp, #40]	; 0x28
   1925c:	str	r6, [sp, #44]	; 0x2c
   19260:	bl	18a6c <__assert_fail@plt+0x74fc>
   19264:	add	sp, sp, #48	; 0x30
   19268:	ldrd	r4, [sp]
   1926c:	ldrd	r6, [sp, #8]
   19270:	ldr	r8, [sp, #16]
   19274:	ldrd	sl, [sp, #20]
   19278:	add	sp, sp, #28
   1927c:	pop	{pc}		; (ldr pc, [sp], #4)
   19280:	bl	11540 <abort@plt>
   19284:			; <UNDEFINED> instruction: 0x0002e3b8
   19288:	mvn	ip, #0
   1928c:	push	{lr}		; (str lr, [sp, #-4]!)
   19290:	sub	sp, sp, #12
   19294:	str	ip, [sp]
   19298:	bl	191e0 <__assert_fail@plt+0x7c70>
   1929c:	add	sp, sp, #12
   192a0:	pop	{pc}		; (ldr pc, [sp], #4)
   192a4:	mvn	ip, #0
   192a8:	push	{lr}		; (str lr, [sp, #-4]!)
   192ac:	sub	sp, sp, #12
   192b0:	mov	r3, r2
   192b4:	mov	r2, r1
   192b8:	mov	r1, r0
   192bc:	mov	r0, #0
   192c0:	str	ip, [sp]
   192c4:	bl	191e0 <__assert_fail@plt+0x7c70>
   192c8:	add	sp, sp, #12
   192cc:	pop	{pc}		; (ldr pc, [sp], #4)
   192d0:	push	{lr}		; (str lr, [sp, #-4]!)
   192d4:	sub	sp, sp, #12
   192d8:	str	r3, [sp]
   192dc:	mov	r3, r2
   192e0:	mov	r2, r1
   192e4:	mov	r1, r0
   192e8:	mov	r0, #0
   192ec:	bl	191e0 <__assert_fail@plt+0x7c70>
   192f0:	add	sp, sp, #12
   192f4:	pop	{pc}		; (ldr pc, [sp], #4)
   192f8:	ldr	r3, [pc]	; 19300 <__assert_fail@plt+0x7d90>
   192fc:	b	18a6c <__assert_fail@plt+0x74fc>
   19300:	andeq	lr, r2, r4, lsl #3
   19304:	mov	r2, r1
   19308:	ldr	r3, [pc, #8]	; 19318 <__assert_fail@plt+0x7da8>
   1930c:	mov	r1, r0
   19310:	mov	r0, #0
   19314:	b	18a6c <__assert_fail@plt+0x74fc>
   19318:	andeq	lr, r2, r4, lsl #3
   1931c:	ldr	r3, [pc, #4]	; 19328 <__assert_fail@plt+0x7db8>
   19320:	mvn	r2, #0
   19324:	b	18a6c <__assert_fail@plt+0x74fc>
   19328:	andeq	lr, r2, r4, lsl #3
   1932c:	mov	r1, r0
   19330:	ldr	r3, [pc, #8]	; 19340 <__assert_fail@plt+0x7dd0>
   19334:	mvn	r2, #0
   19338:	mov	r0, #0
   1933c:	b	18a6c <__assert_fail@plt+0x74fc>
   19340:	andeq	lr, r2, r4, lsl #3
   19344:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19348:	mov	r5, #0
   1934c:	movt	r5, #32752	; 0x7ff0
   19350:	mov	r4, r2
   19354:	strd	r6, [sp, #8]
   19358:	mov	r7, r1
   1935c:	str	r8, [sp, #16]
   19360:	mov	r8, r0
   19364:	str	lr, [sp, #20]
   19368:	mov	r2, r4
   1936c:	mov	r1, r7
   19370:	mov	r0, r8
   19374:	bl	111d4 <read@plt>
   19378:	subs	r6, r0, #0
   1937c:	bge	193b0 <__assert_fail@plt+0x7e40>
   19380:	bl	113f0 <__errno_location@plt>
   19384:	ldr	r2, [r0]
   19388:	cmp	r2, #4
   1938c:	beq	19368 <__assert_fail@plt+0x7df8>
   19390:	sub	r3, r2, #22
   19394:	cmp	r4, r5
   19398:	clz	r3, r3
   1939c:	mov	r4, r5
   193a0:	lsr	r3, r3, #5
   193a4:	movls	r3, #0
   193a8:	cmp	r3, #0
   193ac:	bne	19368 <__assert_fail@plt+0x7df8>
   193b0:	mov	r0, r6
   193b4:	ldrd	r4, [sp]
   193b8:	ldrd	r6, [sp, #8]
   193bc:	ldr	r8, [sp, #16]
   193c0:	add	sp, sp, #20
   193c4:	pop	{pc}		; (ldr pc, [sp], #4)
   193c8:	strd	r4, [sp, #-16]!
   193cc:	mov	r4, r1
   193d0:	mov	r1, #0
   193d4:	mov	r2, r4
   193d8:	mov	r5, r0
   193dc:	str	r6, [sp, #8]
   193e0:	str	lr, [sp, #12]
   193e4:	bl	11444 <memchr@plt>
   193e8:	cmp	r0, #0
   193ec:	ldr	r6, [sp, #8]
   193f0:	subne	r0, r0, r5
   193f4:	moveq	r0, r4
   193f8:	ldrd	r4, [sp]
   193fc:	add	sp, sp, #12
   19400:	addne	r0, r0, #1
   19404:	pop	{pc}		; (ldr pc, [sp], #4)
   19408:	cmp	r0, #2
   1940c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19410:	mov	r4, r0
   19414:	strd	r6, [sp, #8]
   19418:	str	r8, [sp, #16]
   1941c:	str	lr, [sp, #20]
   19420:	bls	1943c <__assert_fail@plt+0x7ecc>
   19424:	mov	r0, r4
   19428:	ldrd	r4, [sp]
   1942c:	ldrd	r6, [sp, #8]
   19430:	ldr	r8, [sp, #16]
   19434:	add	sp, sp, #20
   19438:	pop	{pc}		; (ldr pc, [sp], #4)
   1943c:	bl	1afc8 <__assert_fail@plt+0x9a58>
   19440:	mov	r7, r0
   19444:	bl	113f0 <__errno_location@plt>
   19448:	mov	r5, r0
   1944c:	mov	r0, r4
   19450:	ldr	r6, [r5]
   19454:	mov	r4, r7
   19458:	bl	11558 <close@plt>
   1945c:	str	r6, [r5]
   19460:	b	19424 <__assert_fail@plt+0x7eb4>
   19464:	strd	r4, [sp, #-16]!
   19468:	mov	r4, r0
   1946c:	str	r6, [sp, #8]
   19470:	str	lr, [sp, #12]
   19474:	bl	11468 <pipe@plt>
   19478:	subs	r5, r0, #0
   1947c:	bne	194e0 <__assert_fail@plt+0x7f70>
   19480:	ldr	r0, [r4]
   19484:	bl	19408 <__assert_fail@plt+0x7e98>
   19488:	cmp	r0, #0
   1948c:	str	r0, [r4]
   19490:	addlt	r4, r4, #4
   19494:	blt	194c0 <__assert_fail@plt+0x7f50>
   19498:	ldr	r0, [r4, #4]
   1949c:	bl	19408 <__assert_fail@plt+0x7e98>
   194a0:	cmp	r0, #0
   194a4:	str	r0, [r4, #4]
   194a8:	blt	194c0 <__assert_fail@plt+0x7f50>
   194ac:	mov	r0, r5
   194b0:	ldrd	r4, [sp]
   194b4:	ldr	r6, [sp, #8]
   194b8:	add	sp, sp, #12
   194bc:	pop	{pc}		; (ldr pc, [sp], #4)
   194c0:	bl	113f0 <__errno_location@plt>
   194c4:	mov	r6, r0
   194c8:	ldr	r0, [r4]
   194cc:	mvn	r5, #0
   194d0:	ldr	r4, [r6]
   194d4:	bl	11558 <close@plt>
   194d8:	str	r4, [r6]
   194dc:	b	194ac <__assert_fail@plt+0x7f3c>
   194e0:	mvn	r5, #0
   194e4:	b	194ac <__assert_fail@plt+0x7f3c>
   194e8:	cmp	r1, #0
   194ec:	strd	r4, [sp, #-16]!
   194f0:	mov	r4, r0
   194f4:	str	r6, [sp, #8]
   194f8:	str	lr, [sp, #12]
   194fc:	sub	sp, sp, #32
   19500:	ldr	r5, [sp, #48]	; 0x30
   19504:	ldr	r6, [sp, #52]	; 0x34
   19508:	beq	1963c <__assert_fail@plt+0x80cc>
   1950c:	mov	ip, r3
   19510:	mov	r3, r2
   19514:	mov	r2, r1
   19518:	movw	r1, #53284	; 0xd024
   1951c:	movt	r1, #1
   19520:	str	ip, [sp]
   19524:	bl	113e4 <fprintf@plt>
   19528:	mov	r2, #5
   1952c:	movw	r1, #53304	; 0xd038
   19530:	movt	r1, #1
   19534:	mov	r0, #0
   19538:	bl	11258 <dcgettext@plt>
   1953c:	mov	r2, r0
   19540:	movw	r3, #2022	; 0x7e6
   19544:	movw	r1, #54008	; 0xd2f8
   19548:	movt	r1, #1
   1954c:	mov	r0, r4
   19550:	bl	113e4 <fprintf@plt>
   19554:	mov	r1, r4
   19558:	mov	r0, #10
   1955c:	bl	114c8 <fputc@plt>
   19560:	mov	r2, #5
   19564:	movw	r1, #53308	; 0xd03c
   19568:	movt	r1, #1
   1956c:	mov	r0, #0
   19570:	bl	11258 <dcgettext@plt>
   19574:	mov	r1, r0
   19578:	movw	r2, #53480	; 0xd0e8
   1957c:	movt	r2, #1
   19580:	mov	r0, r4
   19584:	bl	113e4 <fprintf@plt>
   19588:	mov	r1, r4
   1958c:	mov	r0, #10
   19590:	bl	114c8 <fputc@plt>
   19594:	cmp	r6, #9
   19598:	ldrls	pc, [pc, r6, lsl #2]
   1959c:	b	19888 <__assert_fail@plt+0x8318>
   195a0:	andeq	r9, r1, r8, lsr #12
   195a4:	andeq	r9, r1, ip, asr #12
   195a8:	andeq	r9, r1, r4, lsl #13
   195ac:			; <UNDEFINED> instruction: 0x000196bc
   195b0:	strdeq	r9, [r1], -ip
   195b4:	andeq	r9, r1, r8, asr #14
   195b8:	andeq	r9, r1, ip, lsl #15
   195bc:	ldrdeq	r9, [r1], -r8
   195c0:	andeq	r9, r1, ip, lsr #16
   195c4:	andeq	r9, r1, r8, asr #11
   195c8:	movw	r1, #53784	; 0xd218
   195cc:	movt	r1, #1
   195d0:	mov	r2, #5
   195d4:	mov	r0, #0
   195d8:	bl	11258 <dcgettext@plt>
   195dc:	ldr	ip, [r5, #8]
   195e0:	mov	r1, r0
   195e4:	mov	r0, r4
   195e8:	ldr	r3, [r5, #12]
   195ec:	ldr	r2, [r5, #32]
   195f0:	str	ip, [sp]
   195f4:	ldr	ip, [r5, #16]
   195f8:	str	r2, [sp, #24]
   195fc:	ldr	r2, [r5, #28]
   19600:	str	r3, [sp, #4]
   19604:	ldr	r3, [r5, #20]
   19608:	str	ip, [sp, #8]
   1960c:	ldr	ip, [r5, #24]
   19610:	str	r2, [sp, #20]
   19614:	ldr	r2, [r5]
   19618:	str	r3, [sp, #12]
   1961c:	ldr	r3, [r5, #4]
   19620:	str	ip, [sp, #16]
   19624:	bl	113e4 <fprintf@plt>
   19628:	add	sp, sp, #32
   1962c:	ldrd	r4, [sp]
   19630:	ldr	r6, [sp, #8]
   19634:	add	sp, sp, #12
   19638:	pop	{pc}		; (ldr pc, [sp], #4)
   1963c:	movw	r1, #53296	; 0xd030
   19640:	movt	r1, #1
   19644:	bl	113e4 <fprintf@plt>
   19648:	b	19528 <__assert_fail@plt+0x7fb8>
   1964c:	mov	r2, #5
   19650:	movw	r1, #53516	; 0xd10c
   19654:	movt	r1, #1
   19658:	mov	r0, #0
   1965c:	bl	11258 <dcgettext@plt>
   19660:	ldr	r2, [r5]
   19664:	mov	r1, r0
   19668:	mov	r0, r4
   1966c:	add	sp, sp, #32
   19670:	ldrd	r4, [sp]
   19674:	ldr	r6, [sp, #8]
   19678:	ldr	lr, [sp, #12]
   1967c:	add	sp, sp, #16
   19680:	b	113e4 <fprintf@plt>
   19684:	mov	r2, #5
   19688:	movw	r1, #53532	; 0xd11c
   1968c:	movt	r1, #1
   19690:	mov	r0, #0
   19694:	bl	11258 <dcgettext@plt>
   19698:	ldrd	r2, [r5]
   1969c:	mov	r1, r0
   196a0:	mov	r0, r4
   196a4:	add	sp, sp, #32
   196a8:	ldrd	r4, [sp]
   196ac:	ldr	r6, [sp, #8]
   196b0:	ldr	lr, [sp, #12]
   196b4:	add	sp, sp, #16
   196b8:	b	113e4 <fprintf@plt>
   196bc:	mov	r2, #5
   196c0:	movw	r1, #53556	; 0xd134
   196c4:	movt	r1, #1
   196c8:	mov	r0, #0
   196cc:	bl	11258 <dcgettext@plt>
   196d0:	ldrd	r2, [r5]
   196d4:	mov	r1, r0
   196d8:	mov	r0, r4
   196dc:	ldr	ip, [r5, #8]
   196e0:	str	ip, [sp, #48]	; 0x30
   196e4:	add	sp, sp, #32
   196e8:	ldrd	r4, [sp]
   196ec:	ldr	r6, [sp, #8]
   196f0:	ldr	lr, [sp, #12]
   196f4:	add	sp, sp, #16
   196f8:	b	113e4 <fprintf@plt>
   196fc:	mov	r2, #5
   19700:	movw	r1, #53584	; 0xd150
   19704:	movt	r1, #1
   19708:	mov	r0, #0
   1970c:	bl	11258 <dcgettext@plt>
   19710:	ldr	r2, [r5]
   19714:	mov	r1, r0
   19718:	mov	r0, r4
   1971c:	ldr	r3, [r5, #8]
   19720:	ldr	ip, [r5, #12]
   19724:	str	r3, [sp, #48]	; 0x30
   19728:	ldr	r3, [r5, #4]
   1972c:	str	ip, [sp, #52]	; 0x34
   19730:	add	sp, sp, #32
   19734:	ldrd	r4, [sp]
   19738:	ldr	r6, [sp, #8]
   1973c:	ldr	lr, [sp, #12]
   19740:	add	sp, sp, #16
   19744:	b	113e4 <fprintf@plt>
   19748:	mov	r2, #5
   1974c:	movw	r1, #53616	; 0xd170
   19750:	movt	r1, #1
   19754:	mov	r0, #0
   19758:	bl	11258 <dcgettext@plt>
   1975c:	ldr	r2, [r5, #8]
   19760:	mov	r1, r0
   19764:	mov	r0, r4
   19768:	ldr	ip, [r5, #12]
   1976c:	ldr	r3, [r5, #16]
   19770:	str	r2, [sp]
   19774:	ldr	r2, [r5]
   19778:	str	r3, [sp, #8]
   1977c:	ldr	r3, [r5, #4]
   19780:	str	ip, [sp, #4]
   19784:	bl	113e4 <fprintf@plt>
   19788:	b	19628 <__assert_fail@plt+0x80b8>
   1978c:	mov	r2, #5
   19790:	movw	r1, #53652	; 0xd194
   19794:	movt	r1, #1
   19798:	mov	r0, #0
   1979c:	bl	11258 <dcgettext@plt>
   197a0:	ldr	ip, [r5, #8]
   197a4:	mov	r1, r0
   197a8:	mov	r0, r4
   197ac:	ldr	r3, [r5, #12]
   197b0:	ldr	r2, [r5, #20]
   197b4:	str	ip, [sp]
   197b8:	ldr	ip, [r5, #16]
   197bc:	str	r2, [sp, #12]
   197c0:	ldr	r2, [r5]
   197c4:	str	r3, [sp, #4]
   197c8:	ldr	r3, [r5, #4]
   197cc:	str	ip, [sp, #8]
   197d0:	bl	113e4 <fprintf@plt>
   197d4:	b	19628 <__assert_fail@plt+0x80b8>
   197d8:	mov	r2, #5
   197dc:	movw	r1, #53692	; 0xd1bc
   197e0:	movt	r1, #1
   197e4:	mov	r0, #0
   197e8:	bl	11258 <dcgettext@plt>
   197ec:	ldr	r3, [r5, #8]
   197f0:	mov	r1, r0
   197f4:	mov	r0, r4
   197f8:	ldr	r2, [r5, #12]
   197fc:	ldr	ip, [r5, #24]
   19800:	str	r3, [sp]
   19804:	ldr	r3, [r5, #16]
   19808:	str	ip, [sp, #16]
   1980c:	ldr	ip, [r5, #20]
   19810:	str	r2, [sp, #4]
   19814:	ldr	r2, [r5]
   19818:	str	r3, [sp, #8]
   1981c:	ldr	r3, [r5, #4]
   19820:	str	ip, [sp, #12]
   19824:	bl	113e4 <fprintf@plt>
   19828:	b	19628 <__assert_fail@plt+0x80b8>
   1982c:	mov	r2, #5
   19830:	movw	r1, #53736	; 0xd1e8
   19834:	movt	r1, #1
   19838:	mov	r0, #0
   1983c:	bl	11258 <dcgettext@plt>
   19840:	ldr	r2, [r5, #8]
   19844:	mov	r1, r0
   19848:	mov	r0, r4
   1984c:	ldr	ip, [r5, #12]
   19850:	ldr	r3, [r5, #28]
   19854:	str	r2, [sp]
   19858:	ldr	r2, [r5, #16]
   1985c:	str	r3, [sp, #20]
   19860:	ldr	r3, [r5, #24]
   19864:	str	ip, [sp, #4]
   19868:	ldr	ip, [r5, #20]
   1986c:	str	r2, [sp, #8]
   19870:	ldr	r2, [r5]
   19874:	str	r3, [sp, #16]
   19878:	ldr	r3, [r5, #4]
   1987c:	str	ip, [sp, #12]
   19880:	bl	113e4 <fprintf@plt>
   19884:	b	19628 <__assert_fail@plt+0x80b8>
   19888:	movw	r1, #53836	; 0xd24c
   1988c:	movt	r1, #1
   19890:	b	195d0 <__assert_fail@plt+0x8060>
   19894:	strd	r4, [sp, #-12]!
   19898:	str	lr, [sp, #8]
   1989c:	sub	sp, sp, #12
   198a0:	ldr	r5, [sp, #24]
   198a4:	ldr	ip, [r5]
   198a8:	cmp	ip, #0
   198ac:	beq	198c8 <__assert_fail@plt+0x8358>
   198b0:	mov	lr, r5
   198b4:	mov	ip, #0
   198b8:	ldr	r4, [lr, #4]!
   198bc:	add	ip, ip, #1
   198c0:	cmp	r4, #0
   198c4:	bne	198b8 <__assert_fail@plt+0x8348>
   198c8:	stm	sp, {r5, ip}
   198cc:	bl	194e8 <__assert_fail@plt+0x7f78>
   198d0:	add	sp, sp, #12
   198d4:	ldrd	r4, [sp]
   198d8:	add	sp, sp, #8
   198dc:	pop	{pc}		; (ldr pc, [sp], #4)
   198e0:	strd	r4, [sp, #-16]!
   198e4:	mov	ip, #0
   198e8:	str	r6, [sp, #8]
   198ec:	str	lr, [sp, #12]
   198f0:	sub	sp, sp, #48	; 0x30
   198f4:	ldr	r5, [sp, #64]	; 0x40
   198f8:	add	r6, sp, #8
   198fc:	mov	r4, r6
   19900:	ldr	lr, [r5], #4
   19904:	cmp	lr, #0
   19908:	str	lr, [r4], #4
   1990c:	beq	1991c <__assert_fail@plt+0x83ac>
   19910:	add	ip, ip, #1
   19914:	cmp	ip, #10
   19918:	bne	19900 <__assert_fail@plt+0x8390>
   1991c:	stm	sp, {r6, ip}
   19920:	bl	194e8 <__assert_fail@plt+0x7f78>
   19924:	add	sp, sp, #48	; 0x30
   19928:	ldrd	r4, [sp]
   1992c:	ldr	r6, [sp, #8]
   19930:	add	sp, sp, #12
   19934:	pop	{pc}		; (ldr pc, [sp], #4)
   19938:	push	{r3}		; (str r3, [sp, #-4]!)
   1993c:	mov	ip, #0
   19940:	strd	r4, [sp, #-12]!
   19944:	str	lr, [sp, #8]
   19948:	sub	sp, sp, #56	; 0x38
   1994c:	add	r3, sp, #72	; 0x48
   19950:	add	r5, sp, #16
   19954:	mov	r4, r3
   19958:	mov	lr, r5
   1995c:	str	r3, [sp, #12]
   19960:	ldr	r3, [r4], #4
   19964:	cmp	r3, #0
   19968:	str	r3, [lr], #4
   1996c:	beq	1997c <__assert_fail@plt+0x840c>
   19970:	add	ip, ip, #1
   19974:	cmp	ip, #10
   19978:	bne	19960 <__assert_fail@plt+0x83f0>
   1997c:	ldr	r3, [sp, #68]	; 0x44
   19980:	stm	sp, {r5, ip}
   19984:	bl	194e8 <__assert_fail@plt+0x7f78>
   19988:	add	sp, sp, #56	; 0x38
   1998c:	ldrd	r4, [sp]
   19990:	ldr	lr, [sp, #8]
   19994:	add	sp, sp, #12
   19998:	add	sp, sp, #4
   1999c:	bx	lr
   199a0:	movw	r3, #57820	; 0xe1dc
   199a4:	movt	r3, #2
   199a8:	str	r4, [sp, #-8]!
   199ac:	mov	r0, #10
   199b0:	ldr	r1, [r3]
   199b4:	str	lr, [sp, #4]
   199b8:	bl	114c8 <fputc@plt>
   199bc:	mov	r2, #5
   199c0:	movw	r1, #53896	; 0xd288
   199c4:	movt	r1, #1
   199c8:	mov	r0, #0
   199cc:	bl	11258 <dcgettext@plt>
   199d0:	movw	r1, #52736	; 0xce00
   199d4:	movt	r1, #1
   199d8:	bl	111c8 <printf@plt>
   199dc:	mov	r2, #5
   199e0:	movw	r1, #53916	; 0xd29c
   199e4:	movt	r1, #1
   199e8:	mov	r0, #0
   199ec:	bl	11258 <dcgettext@plt>
   199f0:	movw	r2, #52696	; 0xcdd8
   199f4:	movt	r2, #1
   199f8:	movw	r1, #52404	; 0xccb4
   199fc:	movt	r1, #1
   19a00:	bl	111c8 <printf@plt>
   19a04:	movw	r1, #53936	; 0xd2b0
   19a08:	movt	r1, #1
   19a0c:	mov	r2, #5
   19a10:	mov	r0, #0
   19a14:	bl	11258 <dcgettext@plt>
   19a18:	movw	r1, #53976	; 0xd2d8
   19a1c:	movt	r1, #1
   19a20:	ldr	r4, [sp]
   19a24:	ldr	lr, [sp, #4]
   19a28:	add	sp, sp, #8
   19a2c:	b	111c8 <printf@plt>
   19a30:	str	r4, [sp, #-8]!
   19a34:	str	lr, [sp, #4]
   19a38:	bl	1a94c <__assert_fail@plt+0x93dc>
   19a3c:	cmp	r0, #0
   19a40:	beq	19a50 <__assert_fail@plt+0x84e0>
   19a44:	ldr	r4, [sp]
   19a48:	add	sp, sp, #4
   19a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   19a50:	bl	19ea8 <__assert_fail@plt+0x8938>
   19a54:	str	r4, [sp, #-8]!
   19a58:	str	lr, [sp, #4]
   19a5c:	bl	1a94c <__assert_fail@plt+0x93dc>
   19a60:	cmp	r0, #0
   19a64:	beq	19a74 <__assert_fail@plt+0x8504>
   19a68:	ldr	r4, [sp]
   19a6c:	add	sp, sp, #4
   19a70:	pop	{pc}		; (ldr pc, [sp], #4)
   19a74:	bl	19ea8 <__assert_fail@plt+0x8938>
   19a78:	str	r4, [sp, #-8]!
   19a7c:	str	lr, [sp, #4]
   19a80:	bl	1a94c <__assert_fail@plt+0x93dc>
   19a84:	cmp	r0, #0
   19a88:	beq	19a98 <__assert_fail@plt+0x8528>
   19a8c:	ldr	r4, [sp]
   19a90:	add	sp, sp, #4
   19a94:	pop	{pc}		; (ldr pc, [sp], #4)
   19a98:	bl	19ea8 <__assert_fail@plt+0x8938>
   19a9c:	strd	r4, [sp, #-16]!
   19aa0:	mov	r5, r0
   19aa4:	mov	r4, r1
   19aa8:	str	r6, [sp, #8]
   19aac:	str	lr, [sp, #12]
   19ab0:	bl	1a9f8 <__assert_fail@plt+0x9488>
   19ab4:	cmp	r0, #0
   19ab8:	beq	19acc <__assert_fail@plt+0x855c>
   19abc:	ldrd	r4, [sp]
   19ac0:	ldr	r6, [sp, #8]
   19ac4:	add	sp, sp, #12
   19ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   19acc:	adds	r4, r4, #0
   19ad0:	movne	r4, #1
   19ad4:	cmp	r5, #0
   19ad8:	moveq	r4, #1
   19adc:	cmp	r4, #0
   19ae0:	beq	19abc <__assert_fail@plt+0x854c>
   19ae4:	bl	19ea8 <__assert_fail@plt+0x8938>
   19ae8:	cmp	r1, #0
   19aec:	orreq	r1, r1, #1
   19af0:	str	r4, [sp, #-8]!
   19af4:	str	lr, [sp, #4]
   19af8:	bl	1a9f8 <__assert_fail@plt+0x9488>
   19afc:	cmp	r0, #0
   19b00:	beq	19b10 <__assert_fail@plt+0x85a0>
   19b04:	ldr	r4, [sp]
   19b08:	add	sp, sp, #4
   19b0c:	pop	{pc}		; (ldr pc, [sp], #4)
   19b10:	bl	19ea8 <__assert_fail@plt+0x8938>
   19b14:	strd	r4, [sp, #-16]!
   19b18:	mov	r4, r0
   19b1c:	mov	r5, r2
   19b20:	str	r6, [sp, #8]
   19b24:	mov	r6, r1
   19b28:	str	lr, [sp, #12]
   19b2c:	bl	1aa50 <__assert_fail@plt+0x94e0>
   19b30:	cmp	r0, #0
   19b34:	beq	19b48 <__assert_fail@plt+0x85d8>
   19b38:	ldrd	r4, [sp]
   19b3c:	ldr	r6, [sp, #8]
   19b40:	add	sp, sp, #12
   19b44:	pop	{pc}		; (ldr pc, [sp], #4)
   19b48:	cmp	r4, #0
   19b4c:	beq	19b5c <__assert_fail@plt+0x85ec>
   19b50:	cmp	r6, #0
   19b54:	cmpne	r5, #0
   19b58:	beq	19b38 <__assert_fail@plt+0x85c8>
   19b5c:	bl	19ea8 <__assert_fail@plt+0x8938>
   19b60:	b	19b14 <__assert_fail@plt+0x85a4>
   19b64:	cmp	r2, #0
   19b68:	cmpne	r1, #0
   19b6c:	str	r4, [sp, #-8]!
   19b70:	moveq	r2, #1
   19b74:	str	lr, [sp, #4]
   19b78:	moveq	r1, r2
   19b7c:	bl	1aa50 <__assert_fail@plt+0x94e0>
   19b80:	cmp	r0, #0
   19b84:	beq	19b94 <__assert_fail@plt+0x8624>
   19b88:	ldr	r4, [sp]
   19b8c:	add	sp, sp, #4
   19b90:	pop	{pc}		; (ldr pc, [sp], #4)
   19b94:	bl	19ea8 <__assert_fail@plt+0x8938>
   19b98:	mov	r2, r1
   19b9c:	mov	r1, r0
   19ba0:	mov	r0, #0
   19ba4:	b	19b14 <__assert_fail@plt+0x85a4>
   19ba8:	mov	r2, r1
   19bac:	mov	r1, r0
   19bb0:	mov	r0, #0
   19bb4:	b	19b64 <__assert_fail@plt+0x85f4>
   19bb8:	cmp	r0, #0
   19bbc:	strd	r4, [sp, #-16]!
   19bc0:	mov	r5, r1
   19bc4:	ldr	r4, [r1]
   19bc8:	str	r6, [sp, #8]
   19bcc:	str	lr, [sp, #12]
   19bd0:	beq	19c00 <__assert_fail@plt+0x8690>
   19bd4:	lsr	r3, r4, #1
   19bd8:	add	r3, r3, #1
   19bdc:	adds	r4, r4, r3
   19be0:	bcs	19c1c <__assert_fail@plt+0x86ac>
   19be4:	mov	r1, r4
   19be8:	bl	19b14 <__assert_fail@plt+0x85a4>
   19bec:	ldr	r6, [sp, #8]
   19bf0:	str	r4, [r5]
   19bf4:	ldrd	r4, [sp]
   19bf8:	add	sp, sp, #12
   19bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   19c00:	cmp	r4, #0
   19c04:	bne	19be4 <__assert_fail@plt+0x8674>
   19c08:	mov	r4, #64	; 0x40
   19c0c:	udiv	r4, r4, r2
   19c10:	cmp	r2, #64	; 0x40
   19c14:	addhi	r4, r4, #1
   19c18:	b	19be4 <__assert_fail@plt+0x8674>
   19c1c:	bl	19ea8 <__assert_fail@plt+0x8938>
   19c20:	mov	r2, #1
   19c24:	b	19bb8 <__assert_fail@plt+0x8648>
   19c28:	ldr	ip, [r1]
   19c2c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19c30:	mov	r5, r1
   19c34:	strd	r6, [sp, #8]
   19c38:	str	lr, [sp, #28]
   19c3c:	strd	r8, [sp, #16]
   19c40:	asr	lr, ip, #1
   19c44:	ldr	r8, [sp, #32]
   19c48:	str	sl, [sp, #24]
   19c4c:	adds	r4, ip, lr
   19c50:	mvn	lr, r3
   19c54:	lsr	lr, lr, #31
   19c58:	mvnvs	r4, #-2147483648	; 0x80000000
   19c5c:	cmp	r3, r4
   19c60:	movge	r1, #0
   19c64:	andlt	r1, lr, #1
   19c68:	cmp	r1, #0
   19c6c:	movne	r4, r3
   19c70:	smull	r6, r7, r4, r8
   19c74:	cmp	r7, r6, asr #31
   19c78:	bne	19d00 <__assert_fail@plt+0x8790>
   19c7c:	cmp	r6, #63	; 0x3f
   19c80:	mov	r1, r6
   19c84:	ble	19ce8 <__assert_fail@plt+0x8778>
   19c88:	cmp	r0, #0
   19c8c:	sub	r6, r4, ip
   19c90:	streq	r0, [r5]
   19c94:	cmp	r6, r2
   19c98:	bge	19cc8 <__assert_fail@plt+0x8758>
   19c9c:	adds	r4, ip, r2
   19ca0:	bvs	19cfc <__assert_fail@plt+0x878c>
   19ca4:	cmp	r4, r3
   19ca8:	movle	r3, #0
   19cac:	andgt	r3, lr, #1
   19cb0:	cmp	r3, #0
   19cb4:	bne	19cfc <__assert_fail@plt+0x878c>
   19cb8:	smull	r8, r9, r4, r8
   19cbc:	cmp	r9, r8, asr #31
   19cc0:	mov	r1, r8
   19cc4:	bne	19cfc <__assert_fail@plt+0x878c>
   19cc8:	bl	19a9c <__assert_fail@plt+0x852c>
   19ccc:	ldrd	r6, [sp, #8]
   19cd0:	ldrd	r8, [sp, #16]
   19cd4:	ldr	sl, [sp, #24]
   19cd8:	str	r4, [r5]
   19cdc:	ldrd	r4, [sp]
   19ce0:	add	sp, sp, #28
   19ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   19ce8:	mov	r6, #64	; 0x40
   19cec:	sdiv	r4, r6, r8
   19cf0:	mls	r1, r8, r4, r6
   19cf4:	sub	r1, r6, r1
   19cf8:	b	19c88 <__assert_fail@plt+0x8718>
   19cfc:	bl	19ea8 <__assert_fail@plt+0x8938>
   19d00:	mvn	r6, #-2147483648	; 0x80000000
   19d04:	b	19cec <__assert_fail@plt+0x877c>
   19d08:	mov	r1, #1
   19d0c:	str	r4, [sp, #-8]!
   19d10:	str	lr, [sp, #4]
   19d14:	bl	1a520 <__assert_fail@plt+0x8fb0>
   19d18:	cmp	r0, #0
   19d1c:	beq	19d2c <__assert_fail@plt+0x87bc>
   19d20:	ldr	r4, [sp]
   19d24:	add	sp, sp, #4
   19d28:	pop	{pc}		; (ldr pc, [sp], #4)
   19d2c:	bl	19ea8 <__assert_fail@plt+0x8938>
   19d30:	mov	r1, #1
   19d34:	str	r4, [sp, #-8]!
   19d38:	str	lr, [sp, #4]
   19d3c:	bl	1a520 <__assert_fail@plt+0x8fb0>
   19d40:	cmp	r0, #0
   19d44:	beq	19d54 <__assert_fail@plt+0x87e4>
   19d48:	ldr	r4, [sp]
   19d4c:	add	sp, sp, #4
   19d50:	pop	{pc}		; (ldr pc, [sp], #4)
   19d54:	bl	19ea8 <__assert_fail@plt+0x8938>
   19d58:	str	r4, [sp, #-8]!
   19d5c:	str	lr, [sp, #4]
   19d60:	bl	1a520 <__assert_fail@plt+0x8fb0>
   19d64:	cmp	r0, #0
   19d68:	beq	19d78 <__assert_fail@plt+0x8808>
   19d6c:	ldr	r4, [sp]
   19d70:	add	sp, sp, #4
   19d74:	pop	{pc}		; (ldr pc, [sp], #4)
   19d78:	bl	19ea8 <__assert_fail@plt+0x8938>
   19d7c:	str	r4, [sp, #-8]!
   19d80:	str	lr, [sp, #4]
   19d84:	bl	1a520 <__assert_fail@plt+0x8fb0>
   19d88:	cmp	r0, #0
   19d8c:	beq	19d9c <__assert_fail@plt+0x882c>
   19d90:	ldr	r4, [sp]
   19d94:	add	sp, sp, #4
   19d98:	pop	{pc}		; (ldr pc, [sp], #4)
   19d9c:	bl	19ea8 <__assert_fail@plt+0x8938>
   19da0:	strd	r4, [sp, #-16]!
   19da4:	mov	r4, r1
   19da8:	str	r6, [sp, #8]
   19dac:	mov	r6, r0
   19db0:	mov	r0, r1
   19db4:	str	lr, [sp, #12]
   19db8:	bl	1a94c <__assert_fail@plt+0x93dc>
   19dbc:	subs	r5, r0, #0
   19dc0:	beq	19de4 <__assert_fail@plt+0x8874>
   19dc4:	mov	r2, r4
   19dc8:	mov	r1, r6
   19dcc:	bl	1121c <memcpy@plt>
   19dd0:	mov	r0, r5
   19dd4:	ldrd	r4, [sp]
   19dd8:	ldr	r6, [sp, #8]
   19ddc:	add	sp, sp, #12
   19de0:	pop	{pc}		; (ldr pc, [sp], #4)
   19de4:	bl	19ea8 <__assert_fail@plt+0x8938>
   19de8:	strd	r4, [sp, #-16]!
   19dec:	mov	r4, r1
   19df0:	str	r6, [sp, #8]
   19df4:	mov	r6, r0
   19df8:	mov	r0, r1
   19dfc:	str	lr, [sp, #12]
   19e00:	bl	1a94c <__assert_fail@plt+0x93dc>
   19e04:	subs	r5, r0, #0
   19e08:	beq	19e2c <__assert_fail@plt+0x88bc>
   19e0c:	mov	r2, r4
   19e10:	mov	r1, r6
   19e14:	bl	1121c <memcpy@plt>
   19e18:	mov	r0, r5
   19e1c:	ldrd	r4, [sp]
   19e20:	ldr	r6, [sp, #8]
   19e24:	add	sp, sp, #12
   19e28:	pop	{pc}		; (ldr pc, [sp], #4)
   19e2c:	bl	19ea8 <__assert_fail@plt+0x8938>
   19e30:	strd	r4, [sp, #-16]!
   19e34:	mov	r4, r1
   19e38:	str	r6, [sp, #8]
   19e3c:	mov	r6, r0
   19e40:	add	r0, r1, #1
   19e44:	str	lr, [sp, #12]
   19e48:	bl	1a94c <__assert_fail@plt+0x93dc>
   19e4c:	subs	r5, r0, #0
   19e50:	beq	19e7c <__assert_fail@plt+0x890c>
   19e54:	mov	r3, #0
   19e58:	mov	r1, r6
   19e5c:	mov	r2, r4
   19e60:	strb	r3, [r5, r4]
   19e64:	bl	1121c <memcpy@plt>
   19e68:	mov	r0, r5
   19e6c:	ldrd	r4, [sp]
   19e70:	ldr	r6, [sp, #8]
   19e74:	add	sp, sp, #12
   19e78:	pop	{pc}		; (ldr pc, [sp], #4)
   19e7c:	bl	19ea8 <__assert_fail@plt+0x8938>
   19e80:	str	r4, [sp, #-8]!
   19e84:	mov	r4, r0
   19e88:	str	lr, [sp, #4]
   19e8c:	bl	113c0 <strlen@plt>
   19e90:	add	r1, r0, #1
   19e94:	mov	r0, r4
   19e98:	ldr	r4, [sp]
   19e9c:	ldr	lr, [sp, #4]
   19ea0:	add	sp, sp, #8
   19ea4:	b	19da0 <__assert_fail@plt+0x8830>
   19ea8:	movw	r3, #57712	; 0xe170
   19eac:	movt	r3, #2
   19eb0:	str	r4, [sp, #-8]!
   19eb4:	ldr	r4, [r3]
   19eb8:	mov	r2, #5
   19ebc:	movw	r1, #54056	; 0xd328
   19ec0:	movt	r1, #1
   19ec4:	mov	r0, #0
   19ec8:	str	lr, [sp, #4]
   19ecc:	bl	11258 <dcgettext@plt>
   19ed0:	mov	r3, r0
   19ed4:	movw	r2, #52888	; 0xce98
   19ed8:	movt	r2, #1
   19edc:	mov	r1, #0
   19ee0:	mov	r0, r4
   19ee4:	bl	11324 <error@plt>
   19ee8:	bl	11540 <abort@plt>
   19eec:	cmp	r2, #36	; 0x24
   19ef0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19ef4:	strd	r6, [sp, #8]
   19ef8:	strd	r8, [sp, #16]
   19efc:	str	sl, [sp, #24]
   19f00:	str	lr, [sp, #28]
   19f04:	sub	sp, sp, #8
   19f08:	bhi	1a500 <__assert_fail@plt+0x8f90>
   19f0c:	cmp	r1, #0
   19f10:	mov	r9, r2
   19f14:	mov	r5, r0
   19f18:	mov	r6, r1
   19f1c:	mov	r8, r3
   19f20:	addeq	r6, sp, #4
   19f24:	bl	113f0 <__errno_location@plt>
   19f28:	mov	r3, #0
   19f2c:	mov	r7, r0
   19f30:	str	r3, [r0]
   19f34:	bl	11390 <__ctype_b_loc@plt>
   19f38:	ldrb	r3, [r5]
   19f3c:	mov	r2, r5
   19f40:	ldr	ip, [r0]
   19f44:	b	19f4c <__assert_fail@plt+0x89dc>
   19f48:	ldrb	r3, [r2, #1]!
   19f4c:	lsl	r1, r3, #1
   19f50:	ldrh	r0, [ip, r1]
   19f54:	ands	r4, r0, #8192	; 0x2000
   19f58:	bne	19f48 <__assert_fail@plt+0x89d8>
   19f5c:	cmp	r3, #45	; 0x2d
   19f60:	beq	19ff4 <__assert_fail@plt+0x8a84>
   19f64:	mov	r2, r9
   19f68:	mov	r1, r6
   19f6c:	mov	r0, r5
   19f70:	bl	113b4 <strtoul@plt>
   19f74:	ldr	sl, [r6]
   19f78:	mov	r9, r0
   19f7c:	cmp	sl, r5
   19f80:	beq	19fdc <__assert_fail@plt+0x8a6c>
   19f84:	ldr	r4, [r7]
   19f88:	cmp	r4, #0
   19f8c:	bne	19fcc <__assert_fail@plt+0x8a5c>
   19f90:	ldr	r3, [sp, #40]	; 0x28
   19f94:	cmp	r3, #0
   19f98:	beq	19fa8 <__assert_fail@plt+0x8a38>
   19f9c:	ldrb	r5, [sl]
   19fa0:	cmp	r5, #0
   19fa4:	bne	1a35c <__assert_fail@plt+0x8dec>
   19fa8:	str	r9, [r8]
   19fac:	mov	r0, r4
   19fb0:	add	sp, sp, #8
   19fb4:	ldrd	r4, [sp]
   19fb8:	ldrd	r6, [sp, #8]
   19fbc:	ldrd	r8, [sp, #16]
   19fc0:	ldr	sl, [sp, #24]
   19fc4:	add	sp, sp, #28
   19fc8:	pop	{pc}		; (ldr pc, [sp], #4)
   19fcc:	cmp	r4, #34	; 0x22
   19fd0:	bne	19ff4 <__assert_fail@plt+0x8a84>
   19fd4:	mov	r4, #1
   19fd8:	b	19f90 <__assert_fail@plt+0x8a20>
   19fdc:	ldr	r3, [sp, #40]	; 0x28
   19fe0:	cmp	r3, #0
   19fe4:	beq	19ff4 <__assert_fail@plt+0x8a84>
   19fe8:	ldrb	r5, [r5]
   19fec:	cmp	r5, #0
   19ff0:	bne	19ffc <__assert_fail@plt+0x8a8c>
   19ff4:	mov	r4, #4
   19ff8:	b	19fac <__assert_fail@plt+0x8a3c>
   19ffc:	mov	r1, r5
   1a000:	mov	r0, r3
   1a004:	bl	113cc <strchr@plt>
   1a008:	cmp	r0, #0
   1a00c:	movne	r9, #1
   1a010:	beq	19ff4 <__assert_fail@plt+0x8a84>
   1a014:	sub	r7, r5, #69	; 0x45
   1a018:	cmp	r7, #47	; 0x2f
   1a01c:	ldrls	pc, [pc, r7, lsl #2]
   1a020:	b	1a1e0 <__assert_fail@plt+0x8c70>
   1a024:	andeq	sl, r1, r4, ror #1
   1a028:	andeq	sl, r1, r0, ror #3
   1a02c:	andeq	sl, r1, r4, ror #1
   1a030:	andeq	sl, r1, r0, ror #3
   1a034:	andeq	sl, r1, r0, ror #3
   1a038:	andeq	sl, r1, r0, ror #3
   1a03c:	andeq	sl, r1, r4, ror #1
   1a040:	andeq	sl, r1, r0, ror #3
   1a044:	andeq	sl, r1, r4, ror #1
   1a048:	andeq	sl, r1, r0, ror #3
   1a04c:	andeq	sl, r1, r0, ror #3
   1a050:	andeq	sl, r1, r4, ror #1
   1a054:	andeq	sl, r1, r0, ror #3
   1a058:	andeq	sl, r1, r0, ror #3
   1a05c:	andeq	sl, r1, r0, ror #3
   1a060:	andeq	sl, r1, r4, ror #1
   1a064:	andeq	sl, r1, r0, ror #3
   1a068:	andeq	sl, r1, r0, ror #3
   1a06c:	andeq	sl, r1, r0, ror #3
   1a070:	andeq	sl, r1, r0, ror #3
   1a074:	andeq	sl, r1, r4, ror #1
   1a078:	andeq	sl, r1, r4, ror #1
   1a07c:	andeq	sl, r1, r0, ror #3
   1a080:	andeq	sl, r1, r0, ror #3
   1a084:	andeq	sl, r1, r0, ror #3
   1a088:	andeq	sl, r1, r0, ror #3
   1a08c:	andeq	sl, r1, r0, ror #3
   1a090:	andeq	sl, r1, r0, ror #3
   1a094:	andeq	sl, r1, r0, ror #3
   1a098:	andeq	sl, r1, r0, ror #3
   1a09c:	andeq	sl, r1, r0, ror #3
   1a0a0:	andeq	sl, r1, r0, ror #3
   1a0a4:	andeq	sl, r1, r0, ror #3
   1a0a8:	andeq	sl, r1, r0, ror #3
   1a0ac:	andeq	sl, r1, r4, ror #1
   1a0b0:	andeq	sl, r1, r0, ror #3
   1a0b4:	andeq	sl, r1, r0, ror #3
   1a0b8:	andeq	sl, r1, r0, ror #3
   1a0bc:	andeq	sl, r1, r4, ror #1
   1a0c0:	andeq	sl, r1, r0, ror #3
   1a0c4:	andeq	sl, r1, r4, ror #1
   1a0c8:	andeq	sl, r1, r0, ror #3
   1a0cc:	andeq	sl, r1, r0, ror #3
   1a0d0:	andeq	sl, r1, r0, ror #3
   1a0d4:	andeq	sl, r1, r0, ror #3
   1a0d8:	andeq	sl, r1, r0, ror #3
   1a0dc:	andeq	sl, r1, r0, ror #3
   1a0e0:	andeq	sl, r1, r4, ror #1
   1a0e4:	mov	r1, #48	; 0x30
   1a0e8:	ldr	r0, [sp, #40]	; 0x28
   1a0ec:	bl	113cc <strchr@plt>
   1a0f0:	cmp	r0, #0
   1a0f4:	beq	1a1e0 <__assert_fail@plt+0x8c70>
   1a0f8:	ldrb	r3, [sl, #1]
   1a0fc:	cmp	r3, #68	; 0x44
   1a100:	beq	1a4ec <__assert_fail@plt+0x8f7c>
   1a104:	cmp	r3, #105	; 0x69
   1a108:	beq	1a374 <__assert_fail@plt+0x8e04>
   1a10c:	cmp	r3, #66	; 0x42
   1a110:	beq	1a4ec <__assert_fail@plt+0x8f7c>
   1a114:	cmp	r7, #47	; 0x2f
   1a118:	ldrls	pc, [pc, r7, lsl #2]
   1a11c:	b	1a338 <__assert_fail@plt+0x8dc8>
   1a120:	andeq	sl, r1, r4, lsr #9
   1a124:	andeq	sl, r1, r8, lsr r3
   1a128:	ldrdeq	sl, [r1], -r0
   1a12c:	andeq	sl, r1, r8, lsr r3
   1a130:	andeq	sl, r1, r8, lsr r3
   1a134:	andeq	sl, r1, r8, lsr r3
   1a138:	andeq	sl, r1, r0, asr #6
   1a13c:	andeq	sl, r1, r8, lsr r3
   1a140:	andeq	sl, r1, r4, ror r4
   1a144:	andeq	sl, r1, r8, lsr r3
   1a148:	andeq	sl, r1, r8, lsr r3
   1a14c:	andeq	sl, r1, r4, asr #8
   1a150:	andeq	sl, r1, r8, lsr r3
   1a154:	andeq	sl, r1, r8, lsr r3
   1a158:	andeq	sl, r1, r8, lsr r3
   1a15c:	andeq	sl, r1, r4, lsl r4
   1a160:	andeq	sl, r1, r8, lsr r3
   1a164:	andeq	sl, r1, r8, lsr r3
   1a168:	andeq	sl, r1, r8, lsr r3
   1a16c:	andeq	sl, r1, r8, lsr r3
   1a170:	andeq	sl, r1, r4, ror #7
   1a174:			; <UNDEFINED> instruction: 0x0001a3b0
   1a178:	andeq	sl, r1, r8, lsr r3
   1a17c:	andeq	sl, r1, r8, lsr r3
   1a180:	andeq	sl, r1, r8, lsr r3
   1a184:	andeq	sl, r1, r8, lsr r3
   1a188:	andeq	sl, r1, r8, lsr r3
   1a18c:	andeq	sl, r1, r8, lsr r3
   1a190:	andeq	sl, r1, r8, lsr r3
   1a194:	muleq	r1, ip, r3
   1a198:	andeq	sl, r1, r4, ror #9
   1a19c:	andeq	sl, r1, r8, lsr r3
   1a1a0:	andeq	sl, r1, r8, lsr r3
   1a1a4:	andeq	sl, r1, r8, lsr r3
   1a1a8:	ldrdeq	sl, [r1], -r0
   1a1ac:	andeq	sl, r1, r8, lsr r3
   1a1b0:	andeq	sl, r1, r8, lsr r3
   1a1b4:	andeq	sl, r1, r8, lsr r3
   1a1b8:	andeq	sl, r1, r0, asr #6
   1a1bc:	andeq	sl, r1, r8, lsr r3
   1a1c0:	andeq	sl, r1, r4, ror r4
   1a1c4:	andeq	sl, r1, r8, lsr r3
   1a1c8:	andeq	sl, r1, r8, lsr r3
   1a1cc:	andeq	sl, r1, r8, lsr r3
   1a1d0:	andeq	sl, r1, r8, lsr r3
   1a1d4:	andeq	sl, r1, r8, lsr r3
   1a1d8:	andeq	sl, r1, r8, lsr r3
   1a1dc:	andeq	sl, r1, r4, lsl r4
   1a1e0:	mov	r2, #1
   1a1e4:	mov	r3, #1024	; 0x400
   1a1e8:	sub	r5, r5, #66	; 0x42
   1a1ec:	cmp	r5, #53	; 0x35
   1a1f0:	ldrls	pc, [pc, r5, lsl #2]
   1a1f4:	b	1a338 <__assert_fail@plt+0x8dc8>
   1a1f8:	ldrdeq	sl, [r1], -r4
   1a1fc:	andeq	sl, r1, r8, lsr r3
   1a200:	andeq	sl, r1, r8, lsr r3
   1a204:	andeq	sl, r1, ip, lsr #9
   1a208:	andeq	sl, r1, r8, lsr r3
   1a20c:	ldrdeq	sl, [r1], -r8
   1a210:	andeq	sl, r1, r8, lsr r3
   1a214:	andeq	sl, r1, r8, lsr r3
   1a218:	andeq	sl, r1, r8, lsr r3
   1a21c:	andeq	sl, r1, r8, asr #6
   1a220:	andeq	sl, r1, r8, lsr r3
   1a224:	andeq	sl, r1, ip, ror r4
   1a228:	andeq	sl, r1, r8, lsr r3
   1a22c:	andeq	sl, r1, r8, lsr r3
   1a230:	andeq	sl, r1, ip, asr #8
   1a234:	andeq	sl, r1, r8, lsr r3
   1a238:	andeq	sl, r1, r8, lsr r3
   1a23c:	andeq	sl, r1, r8, lsr r3
   1a240:	andeq	sl, r1, ip, lsl r4
   1a244:	andeq	sl, r1, r8, lsr r3
   1a248:	andeq	sl, r1, r8, lsr r3
   1a24c:	andeq	sl, r1, r8, lsr r3
   1a250:	andeq	sl, r1, r8, lsr r3
   1a254:	andeq	sl, r1, ip, ror #7
   1a258:			; <UNDEFINED> instruction: 0x0001a3b8
   1a25c:	andeq	sl, r1, r8, lsr r3
   1a260:	andeq	sl, r1, r8, lsr r3
   1a264:	andeq	sl, r1, r8, lsr r3
   1a268:	andeq	sl, r1, r8, lsr r3
   1a26c:	andeq	sl, r1, r8, lsr r3
   1a270:	andeq	sl, r1, r8, lsr r3
   1a274:	andeq	sl, r1, r8, lsr r3
   1a278:	andeq	sl, r1, r0, lsr #7
   1a27c:	andeq	sl, r1, r4, lsr #6
   1a280:	andeq	sl, r1, r8, lsr r3
   1a284:	andeq	sl, r1, r8, lsr r3
   1a288:	andeq	sl, r1, r8, lsr r3
   1a28c:	ldrdeq	sl, [r1], -r8
   1a290:	andeq	sl, r1, r8, lsr r3
   1a294:	andeq	sl, r1, r8, lsr r3
   1a298:	andeq	sl, r1, r8, lsr r3
   1a29c:	andeq	sl, r1, r8, asr #6
   1a2a0:	andeq	sl, r1, r8, lsr r3
   1a2a4:	andeq	sl, r1, ip, ror r4
   1a2a8:	andeq	sl, r1, r8, lsr r3
   1a2ac:	andeq	sl, r1, r8, lsr r3
   1a2b0:	andeq	sl, r1, r8, lsr r3
   1a2b4:	andeq	sl, r1, r8, lsr r3
   1a2b8:	andeq	sl, r1, r8, lsr r3
   1a2bc:	andeq	sl, r1, r8, lsr r3
   1a2c0:	andeq	sl, r1, ip, lsl r4
   1a2c4:	andeq	sl, r1, r8, lsr r3
   1a2c8:	andeq	sl, r1, r8, lsr r3
   1a2cc:	andeq	sl, r1, ip, lsl #7
   1a2d0:	mov	r2, #1
   1a2d4:	mov	r3, #1024	; 0x400
   1a2d8:	umull	r0, r1, r3, r9
   1a2dc:	adds	r1, r1, #0
   1a2e0:	movne	r1, #1
   1a2e4:	cmp	r1, #0
   1a2e8:	bne	1a4f8 <__assert_fail@plt+0x8f88>
   1a2ec:	mul	r9, r3, r9
   1a2f0:	umull	r0, r1, r3, r9
   1a2f4:	adds	r1, r1, #0
   1a2f8:	movne	r1, #1
   1a2fc:	cmp	r1, #0
   1a300:	bne	1a4f8 <__assert_fail@plt+0x8f88>
   1a304:	mul	r9, r3, r9
   1a308:	umull	r0, r1, r3, r9
   1a30c:	adds	r1, r1, #0
   1a310:	movne	r1, #1
   1a314:	cmp	r1, #0
   1a318:	muleq	r9, r3, r9
   1a31c:	bne	1a4f8 <__assert_fail@plt+0x8f88>
   1a320:	orr	r4, r4, r1
   1a324:	add	r3, sl, r2
   1a328:	str	r3, [r6]
   1a32c:	ldrb	r3, [sl, r2]
   1a330:	cmp	r3, #0
   1a334:	beq	19fa8 <__assert_fail@plt+0x8a38>
   1a338:	orr	r4, r4, #2
   1a33c:	b	19fa8 <__assert_fail@plt+0x8a38>
   1a340:	mov	r2, #1
   1a344:	mov	r3, #1024	; 0x400
   1a348:	umull	r0, r1, r3, r9
   1a34c:	cmp	r1, #0
   1a350:	bne	1a498 <__assert_fail@plt+0x8f28>
   1a354:	mul	r9, r3, r9
   1a358:	b	1a324 <__assert_fail@plt+0x8db4>
   1a35c:	mov	r1, r5
   1a360:	ldr	r0, [sp, #40]	; 0x28
   1a364:	bl	113cc <strchr@plt>
   1a368:	cmp	r0, #0
   1a36c:	bne	1a014 <__assert_fail@plt+0x8aa4>
   1a370:	b	1a338 <__assert_fail@plt+0x8dc8>
   1a374:	ldrb	r2, [sl, #2]
   1a378:	mov	r3, #1024	; 0x400
   1a37c:	cmp	r2, #66	; 0x42
   1a380:	movne	r2, #1
   1a384:	moveq	r2, #3
   1a388:	b	1a1e8 <__assert_fail@plt+0x8c78>
   1a38c:	cmp	r9, #0
   1a390:	blt	1a498 <__assert_fail@plt+0x8f28>
   1a394:	lsl	r9, r9, #1
   1a398:	b	1a324 <__assert_fail@plt+0x8db4>
   1a39c:	mov	r2, #1
   1a3a0:	lsrs	r3, r9, #23
   1a3a4:	bne	1a498 <__assert_fail@plt+0x8f28>
   1a3a8:	lsl	r9, r9, #9
   1a3ac:	b	1a324 <__assert_fail@plt+0x8db4>
   1a3b0:	mov	r2, #1
   1a3b4:	mov	r3, #1024	; 0x400
   1a3b8:	mov	r1, #7
   1a3bc:	mov	ip, #0
   1a3c0:	umull	lr, r0, r3, r9
   1a3c4:	cmp	r0, #0
   1a3c8:	movne	ip, #1
   1a3cc:	mvnne	r9, #0
   1a3d0:	muleq	r9, r3, r9
   1a3d4:	subs	r1, r1, #1
   1a3d8:	bne	1a3c0 <__assert_fail@plt+0x8e50>
   1a3dc:	orr	r4, r4, ip
   1a3e0:	b	1a324 <__assert_fail@plt+0x8db4>
   1a3e4:	mov	r2, #1
   1a3e8:	mov	r3, #1024	; 0x400
   1a3ec:	mov	r1, #8
   1a3f0:	mov	ip, #0
   1a3f4:	umull	lr, r0, r3, r9
   1a3f8:	cmp	r0, #0
   1a3fc:	movne	ip, #1
   1a400:	mvnne	r9, #0
   1a404:	muleq	r9, r3, r9
   1a408:	subs	r1, r1, #1
   1a40c:	bne	1a3f4 <__assert_fail@plt+0x8e84>
   1a410:	b	1a3dc <__assert_fail@plt+0x8e6c>
   1a414:	mov	r2, #1
   1a418:	mov	r3, #1024	; 0x400
   1a41c:	mov	r1, #4
   1a420:	mov	ip, #0
   1a424:	umull	lr, r0, r3, r9
   1a428:	cmp	r0, #0
   1a42c:	movne	ip, #1
   1a430:	mvnne	r9, #0
   1a434:	muleq	r9, r3, r9
   1a438:	subs	r1, r1, #1
   1a43c:	bne	1a424 <__assert_fail@plt+0x8eb4>
   1a440:	b	1a3dc <__assert_fail@plt+0x8e6c>
   1a444:	mov	r2, #1
   1a448:	mov	r3, #1024	; 0x400
   1a44c:	mov	r1, #5
   1a450:	mov	ip, #0
   1a454:	umull	lr, r0, r3, r9
   1a458:	cmp	r0, #0
   1a45c:	movne	ip, #1
   1a460:	mvnne	r9, #0
   1a464:	muleq	r9, r3, r9
   1a468:	subs	r1, r1, #1
   1a46c:	bne	1a454 <__assert_fail@plt+0x8ee4>
   1a470:	b	1a3dc <__assert_fail@plt+0x8e6c>
   1a474:	mov	r2, #1
   1a478:	mov	r3, #1024	; 0x400
   1a47c:	umull	r0, r1, r3, r9
   1a480:	cmp	r1, #0
   1a484:	bne	1a498 <__assert_fail@plt+0x8f28>
   1a488:	mul	r9, r3, r9
   1a48c:	umull	r0, r1, r3, r9
   1a490:	cmp	r1, #0
   1a494:	beq	1a354 <__assert_fail@plt+0x8de4>
   1a498:	mov	r4, #1
   1a49c:	mvn	r9, #0
   1a4a0:	b	1a324 <__assert_fail@plt+0x8db4>
   1a4a4:	mov	r2, #1
   1a4a8:	mov	r3, #1024	; 0x400
   1a4ac:	mov	r1, #6
   1a4b0:	mov	ip, #0
   1a4b4:	umull	lr, r0, r3, r9
   1a4b8:	cmp	r0, #0
   1a4bc:	movne	ip, #1
   1a4c0:	mvnne	r9, #0
   1a4c4:	muleq	r9, r3, r9
   1a4c8:	subs	r1, r1, #1
   1a4cc:	bne	1a4b4 <__assert_fail@plt+0x8f44>
   1a4d0:	b	1a3dc <__assert_fail@plt+0x8e6c>
   1a4d4:	lsrs	r3, r9, #22
   1a4d8:	bne	1a498 <__assert_fail@plt+0x8f28>
   1a4dc:	lsl	r9, r9, #10
   1a4e0:	b	1a324 <__assert_fail@plt+0x8db4>
   1a4e4:	mov	r2, #1
   1a4e8:	b	1a324 <__assert_fail@plt+0x8db4>
   1a4ec:	mov	r2, #2
   1a4f0:	mov	r3, #1000	; 0x3e8
   1a4f4:	b	1a1e8 <__assert_fail@plt+0x8c78>
   1a4f8:	mvn	r9, #0
   1a4fc:	b	1a320 <__assert_fail@plt+0x8db0>
   1a500:	movw	r3, #54076	; 0xd33c
   1a504:	movt	r3, #1
   1a508:	movw	r1, #54088	; 0xd348
   1a50c:	movt	r1, #1
   1a510:	movw	r0, #54100	; 0xd354
   1a514:	movt	r0, #1
   1a518:	mov	r2, #84	; 0x54
   1a51c:	bl	11570 <__assert_fail@plt>
   1a520:	cmp	r1, #0
   1a524:	cmpne	r0, #0
   1a528:	beq	1a574 <__assert_fail@plt+0x9004>
   1a52c:	strd	r4, [sp, #-16]!
   1a530:	umull	r4, r5, r0, r1
   1a534:	str	r6, [sp, #8]
   1a538:	str	lr, [sp, #12]
   1a53c:	adds	r3, r5, #0
   1a540:	movne	r3, #1
   1a544:	cmp	r4, #0
   1a548:	blt	1a554 <__assert_fail@plt+0x8fe4>
   1a54c:	cmp	r3, #0
   1a550:	beq	1a580 <__assert_fail@plt+0x9010>
   1a554:	bl	113f0 <__errno_location@plt>
   1a558:	mov	r3, #12
   1a55c:	ldrd	r4, [sp]
   1a560:	ldr	r6, [sp, #8]
   1a564:	add	sp, sp, #12
   1a568:	str	r3, [r0]
   1a56c:	mov	r0, #0
   1a570:	pop	{pc}		; (ldr pc, [sp], #4)
   1a574:	mov	r1, #1
   1a578:	mov	r0, r1
   1a57c:	b	111a4 <calloc@plt>
   1a580:	ldrd	r4, [sp]
   1a584:	ldr	r6, [sp, #8]
   1a588:	ldr	lr, [sp, #12]
   1a58c:	add	sp, sp, #16
   1a590:	b	111a4 <calloc@plt>
   1a594:	push	{r1, r2, r3}
   1a598:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a59c:	strd	r6, [sp, #8]
   1a5a0:	str	lr, [sp, #16]
   1a5a4:	sub	sp, sp, #8
   1a5a8:	ldr	r1, [sp, #28]
   1a5ac:	add	r2, sp, #32
   1a5b0:	str	r2, [sp, #4]
   1a5b4:	cmp	r1, #0
   1a5b8:	beq	1a694 <__assert_fail@plt+0x9124>
   1a5bc:	movw	r3, #1030	; 0x406
   1a5c0:	mov	r6, r0
   1a5c4:	cmp	r1, r3
   1a5c8:	beq	1a6a4 <__assert_fail@plt+0x9134>
   1a5cc:	cmp	r1, #11
   1a5d0:	beq	1a64c <__assert_fail@plt+0x90dc>
   1a5d4:	ble	1a62c <__assert_fail@plt+0x90bc>
   1a5d8:	movw	r2, #1031	; 0x407
   1a5dc:	cmp	r1, r2
   1a5e0:	bgt	1a668 <__assert_fail@plt+0x90f8>
   1a5e4:	cmp	r1, r3
   1a5e8:	bge	1a5f8 <__assert_fail@plt+0x9088>
   1a5ec:	movw	r3, #1025	; 0x401
   1a5f0:	cmp	r1, r3
   1a5f4:	beq	1a64c <__assert_fail@plt+0x90dc>
   1a5f8:	ldr	r3, [sp, #4]
   1a5fc:	mov	r0, r6
   1a600:	ldr	r2, [r3]
   1a604:	bl	11480 <fcntl64@plt>
   1a608:	mov	r4, r0
   1a60c:	mov	r0, r4
   1a610:	add	sp, sp, #8
   1a614:	ldrd	r4, [sp]
   1a618:	ldrd	r6, [sp, #8]
   1a61c:	ldr	lr, [sp, #16]
   1a620:	add	sp, sp, #20
   1a624:	add	sp, sp, #12
   1a628:	bx	lr
   1a62c:	cmp	r1, #4
   1a630:	beq	1a5f8 <__assert_fail@plt+0x9088>
   1a634:	bgt	1a65c <__assert_fail@plt+0x90ec>
   1a638:	cmp	r1, #2
   1a63c:	beq	1a5f8 <__assert_fail@plt+0x9088>
   1a640:	bgt	1a64c <__assert_fail@plt+0x90dc>
   1a644:	cmp	r1, #1
   1a648:	bne	1a5f8 <__assert_fail@plt+0x9088>
   1a64c:	mov	r0, r6
   1a650:	bl	11480 <fcntl64@plt>
   1a654:	mov	r4, r0
   1a658:	b	1a60c <__assert_fail@plt+0x909c>
   1a65c:	cmp	r1, #9
   1a660:	bne	1a5f8 <__assert_fail@plt+0x9088>
   1a664:	b	1a64c <__assert_fail@plt+0x90dc>
   1a668:	movw	r3, #1033	; 0x409
   1a66c:	cmp	r1, r3
   1a670:	beq	1a5f8 <__assert_fail@plt+0x9088>
   1a674:	blt	1a64c <__assert_fail@plt+0x90dc>
   1a678:	movw	r3, #1034	; 0x40a
   1a67c:	cmp	r1, r3
   1a680:	bne	1a5f8 <__assert_fail@plt+0x9088>
   1a684:	mov	r0, r6
   1a688:	bl	11480 <fcntl64@plt>
   1a68c:	mov	r4, r0
   1a690:	b	1a60c <__assert_fail@plt+0x909c>
   1a694:	ldr	r2, [sp, #32]
   1a698:	bl	11480 <fcntl64@plt>
   1a69c:	mov	r4, r0
   1a6a0:	b	1a60c <__assert_fail@plt+0x909c>
   1a6a4:	movw	r5, #58344	; 0xe3e8
   1a6a8:	movt	r5, #2
   1a6ac:	ldr	r7, [r2]
   1a6b0:	add	r2, sp, #36	; 0x24
   1a6b4:	ldr	r3, [r5]
   1a6b8:	str	r2, [sp, #4]
   1a6bc:	mov	r2, r7
   1a6c0:	cmp	r3, #0
   1a6c4:	blt	1a6e0 <__assert_fail@plt+0x9170>
   1a6c8:	bl	11480 <fcntl64@plt>
   1a6cc:	subs	r4, r0, #0
   1a6d0:	blt	1a748 <__assert_fail@plt+0x91d8>
   1a6d4:	mov	r3, #1
   1a6d8:	str	r3, [r5]
   1a6dc:	b	1a60c <__assert_fail@plt+0x909c>
   1a6e0:	mov	r1, #0
   1a6e4:	bl	11480 <fcntl64@plt>
   1a6e8:	subs	r4, r0, #0
   1a6ec:	blt	1a60c <__assert_fail@plt+0x909c>
   1a6f0:	ldr	r3, [r5]
   1a6f4:	cmn	r3, #1
   1a6f8:	bne	1a60c <__assert_fail@plt+0x909c>
   1a6fc:	mov	r1, #1
   1a700:	mov	r0, r4
   1a704:	bl	11480 <fcntl64@plt>
   1a708:	subs	r2, r0, #0
   1a70c:	blt	1a728 <__assert_fail@plt+0x91b8>
   1a710:	orr	r2, r2, #1
   1a714:	mov	r1, #2
   1a718:	mov	r0, r4
   1a71c:	bl	11480 <fcntl64@plt>
   1a720:	cmn	r0, #1
   1a724:	bne	1a60c <__assert_fail@plt+0x909c>
   1a728:	bl	113f0 <__errno_location@plt>
   1a72c:	mov	r5, r0
   1a730:	mov	r0, r4
   1a734:	ldr	r6, [r5]
   1a738:	mvn	r4, #0
   1a73c:	bl	11558 <close@plt>
   1a740:	str	r6, [r5]
   1a744:	b	1a60c <__assert_fail@plt+0x909c>
   1a748:	bl	113f0 <__errno_location@plt>
   1a74c:	ldr	r3, [r0]
   1a750:	cmp	r3, #22
   1a754:	bne	1a6d4 <__assert_fail@plt+0x9164>
   1a758:	mov	r2, r7
   1a75c:	mov	r0, r6
   1a760:	mov	r1, #0
   1a764:	bl	11480 <fcntl64@plt>
   1a768:	subs	r4, r0, #0
   1a76c:	mvnge	r3, #0
   1a770:	strge	r3, [r5]
   1a774:	bge	1a6fc <__assert_fail@plt+0x918c>
   1a778:	b	1a60c <__assert_fail@plt+0x909c>
   1a77c:	str	r4, [sp, #-8]!
   1a780:	subs	r4, r0, #0
   1a784:	str	lr, [sp, #4]
   1a788:	sub	sp, sp, #8
   1a78c:	beq	1a7a8 <__assert_fail@plt+0x9238>
   1a790:	bl	1136c <__freading@plt>
   1a794:	cmp	r0, #0
   1a798:	beq	1a7a8 <__assert_fail@plt+0x9238>
   1a79c:	ldr	r3, [r4]
   1a7a0:	tst	r3, #256	; 0x100
   1a7a4:	bne	1a7c0 <__assert_fail@plt+0x9250>
   1a7a8:	mov	r0, r4
   1a7ac:	add	sp, sp, #8
   1a7b0:	ldr	r4, [sp]
   1a7b4:	ldr	lr, [sp, #4]
   1a7b8:	add	sp, sp, #8
   1a7bc:	b	111e0 <fflush@plt>
   1a7c0:	mov	r1, #1
   1a7c4:	mov	r2, #0
   1a7c8:	mov	r3, #0
   1a7cc:	mov	r0, r4
   1a7d0:	str	r1, [sp]
   1a7d4:	bl	1a87c <__assert_fail@plt+0x930c>
   1a7d8:	b	1a7a8 <__assert_fail@plt+0x9238>
   1a7dc:	ldr	r3, [r0, #16]
   1a7e0:	ldr	r2, [r0, #20]
   1a7e4:	cmp	r2, r3
   1a7e8:	bhi	1a814 <__assert_fail@plt+0x92a4>
   1a7ec:	ldm	r0, {r1, r2, r3}
   1a7f0:	tst	r1, #256	; 0x100
   1a7f4:	sub	r3, r3, r2
   1a7f8:	beq	1a80c <__assert_fail@plt+0x929c>
   1a7fc:	ldr	r1, [r0, #36]	; 0x24
   1a800:	ldr	r2, [r0, #44]	; 0x2c
   1a804:	sub	r2, r2, r1
   1a808:	add	r3, r3, r2
   1a80c:	mov	r0, r3
   1a810:	bx	lr
   1a814:	mov	r0, #0
   1a818:	bx	lr
   1a81c:	strd	r4, [sp, #-12]!
   1a820:	mov	r5, r0
   1a824:	str	lr, [sp, #8]
   1a828:	sub	sp, sp, #12
   1a82c:	bl	113f0 <__errno_location@plt>
   1a830:	mov	r4, r0
   1a834:	mov	r2, #0
   1a838:	ldr	r3, [r4]
   1a83c:	mov	r0, r5
   1a840:	str	r2, [r4]
   1a844:	str	r3, [sp]
   1a848:	str	r3, [sp, #4]
   1a84c:	bl	111f8 <free@plt>
   1a850:	ldr	r3, [r4]
   1a854:	add	r2, sp, #8
   1a858:	clz	r3, r3
   1a85c:	lsr	r3, r3, #5
   1a860:	add	r3, r2, r3, lsl #2
   1a864:	ldr	r3, [r3, #-8]
   1a868:	str	r3, [r4]
   1a86c:	add	sp, sp, #12
   1a870:	ldrd	r4, [sp]
   1a874:	add	sp, sp, #8
   1a878:	pop	{pc}		; (ldr pc, [sp], #4)
   1a87c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a880:	mov	r4, r0
   1a884:	ldr	ip, [r0, #4]
   1a888:	strd	r6, [sp, #8]
   1a88c:	str	lr, [sp, #20]
   1a890:	ldr	lr, [r0, #8]
   1a894:	str	r8, [sp, #16]
   1a898:	sub	sp, sp, #8
   1a89c:	ldr	r5, [sp, #32]
   1a8a0:	cmp	lr, ip
   1a8a4:	beq	1a8cc <__assert_fail@plt+0x935c>
   1a8a8:	mov	r0, r4
   1a8ac:	str	r5, [sp, #32]
   1a8b0:	add	sp, sp, #8
   1a8b4:	ldrd	r4, [sp]
   1a8b8:	ldrd	r6, [sp, #8]
   1a8bc:	ldr	r8, [sp, #16]
   1a8c0:	ldr	lr, [sp, #20]
   1a8c4:	add	sp, sp, #24
   1a8c8:	b	11474 <fseeko64@plt>
   1a8cc:	ldr	ip, [r0, #16]
   1a8d0:	ldr	lr, [r0, #20]
   1a8d4:	cmp	lr, ip
   1a8d8:	bne	1a8a8 <__assert_fail@plt+0x9338>
   1a8dc:	ldr	r8, [r0, #36]	; 0x24
   1a8e0:	cmp	r8, #0
   1a8e4:	bne	1a8a8 <__assert_fail@plt+0x9338>
   1a8e8:	mov	r6, r2
   1a8ec:	mov	r7, r3
   1a8f0:	bl	11438 <fileno@plt>
   1a8f4:	mov	r2, r6
   1a8f8:	mov	r3, r7
   1a8fc:	str	r5, [sp]
   1a900:	bl	112dc <lseek64@plt>
   1a904:	mvn	r3, #0
   1a908:	mvn	r2, #0
   1a90c:	cmp	r1, r3
   1a910:	cmpeq	r0, r2
   1a914:	beq	1a944 <__assert_fail@plt+0x93d4>
   1a918:	ldr	r3, [r4]
   1a91c:	strd	r0, [r4, #80]	; 0x50
   1a920:	bic	r3, r3, #16
   1a924:	str	r3, [r4]
   1a928:	mov	r0, r8
   1a92c:	add	sp, sp, #8
   1a930:	ldrd	r4, [sp]
   1a934:	ldrd	r6, [sp, #8]
   1a938:	ldr	r8, [sp, #16]
   1a93c:	add	sp, sp, #20
   1a940:	pop	{pc}		; (ldr pc, [sp], #4)
   1a944:	mvn	r8, #0
   1a948:	b	1a928 <__assert_fail@plt+0x93b8>
   1a94c:	cmp	r0, #0
   1a950:	beq	1a95c <__assert_fail@plt+0x93ec>
   1a954:	blt	1a964 <__assert_fail@plt+0x93f4>
   1a958:	b	11354 <malloc@plt>
   1a95c:	mov	r0, #1
   1a960:	b	11354 <malloc@plt>
   1a964:	str	r4, [sp, #-8]!
   1a968:	str	lr, [sp, #4]
   1a96c:	bl	113f0 <__errno_location@plt>
   1a970:	mov	r3, #12
   1a974:	ldr	r4, [sp]
   1a978:	add	sp, sp, #4
   1a97c:	str	r3, [r0]
   1a980:	mov	r0, #0
   1a984:	pop	{pc}		; (ldr pc, [sp], #4)
   1a988:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a98c:	mov	r5, r2
   1a990:	strd	r6, [sp, #8]
   1a994:	subs	r6, r0, #0
   1a998:	mov	r7, r1
   1a99c:	str	lr, [sp, #16]
   1a9a0:	sub	sp, sp, #12
   1a9a4:	addeq	r6, sp, #4
   1a9a8:	mov	r0, r6
   1a9ac:	bl	11318 <mbrtowc@plt>
   1a9b0:	cmp	r5, #0
   1a9b4:	cmnne	r0, #3
   1a9b8:	mov	r4, r0
   1a9bc:	bhi	1a9d8 <__assert_fail@plt+0x9468>
   1a9c0:	mov	r0, r4
   1a9c4:	add	sp, sp, #12
   1a9c8:	ldrd	r4, [sp]
   1a9cc:	ldrd	r6, [sp, #8]
   1a9d0:	add	sp, sp, #16
   1a9d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9d8:	mov	r0, #0
   1a9dc:	bl	1ab14 <__assert_fail@plt+0x95a4>
   1a9e0:	cmp	r0, #0
   1a9e4:	bne	1a9c0 <__assert_fail@plt+0x9450>
   1a9e8:	ldrb	r3, [r7]
   1a9ec:	mov	r4, #1
   1a9f0:	str	r3, [r6]
   1a9f4:	b	1a9c0 <__assert_fail@plt+0x9450>
   1a9f8:	cmp	r0, #0
   1a9fc:	beq	1aa24 <__assert_fail@plt+0x94b4>
   1aa00:	cmp	r1, #0
   1aa04:	str	r4, [sp, #-8]!
   1aa08:	str	lr, [sp, #4]
   1aa0c:	beq	1aa2c <__assert_fail@plt+0x94bc>
   1aa10:	blt	1aa40 <__assert_fail@plt+0x94d0>
   1aa14:	ldr	r4, [sp]
   1aa18:	ldr	lr, [sp, #4]
   1aa1c:	add	sp, sp, #8
   1aa20:	b	11288 <realloc@plt>
   1aa24:	mov	r0, r1
   1aa28:	b	1a94c <__assert_fail@plt+0x93dc>
   1aa2c:	bl	1a81c <__assert_fail@plt+0x92ac>
   1aa30:	ldr	r4, [sp]
   1aa34:	add	sp, sp, #4
   1aa38:	mov	r0, #0
   1aa3c:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa40:	bl	113f0 <__errno_location@plt>
   1aa44:	mov	r3, #12
   1aa48:	str	r3, [r0]
   1aa4c:	b	1aa30 <__assert_fail@plt+0x94c0>
   1aa50:	umull	r2, r3, r1, r2
   1aa54:	cmp	r3, #0
   1aa58:	bne	1aa64 <__assert_fail@plt+0x94f4>
   1aa5c:	mov	r1, r2
   1aa60:	b	1a9f8 <__assert_fail@plt+0x9488>
   1aa64:	str	r4, [sp, #-8]!
   1aa68:	str	lr, [sp, #4]
   1aa6c:	bl	113f0 <__errno_location@plt>
   1aa70:	mov	r3, #12
   1aa74:	ldr	r4, [sp]
   1aa78:	add	sp, sp, #4
   1aa7c:	str	r3, [r0]
   1aa80:	mov	r0, #0
   1aa84:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa88:	strd	r4, [sp, #-16]!
   1aa8c:	mov	r4, r0
   1aa90:	str	r6, [sp, #8]
   1aa94:	str	lr, [sp, #12]
   1aa98:	bl	1130c <__fpending@plt>
   1aa9c:	mov	r6, r0
   1aaa0:	mov	r0, r4
   1aaa4:	bl	11204 <ferror@plt>
   1aaa8:	mov	r5, r0
   1aaac:	mov	r0, r4
   1aab0:	bl	11450 <fclose@plt>
   1aab4:	cmp	r5, #0
   1aab8:	mov	r4, r0
   1aabc:	bne	1aaf4 <__assert_fail@plt+0x9584>
   1aac0:	cmp	r0, #0
   1aac4:	beq	1aae0 <__assert_fail@plt+0x9570>
   1aac8:	cmp	r6, #0
   1aacc:	bne	1ab0c <__assert_fail@plt+0x959c>
   1aad0:	bl	113f0 <__errno_location@plt>
   1aad4:	ldr	r4, [r0]
   1aad8:	subs	r4, r4, #9
   1aadc:	mvnne	r4, #0
   1aae0:	mov	r0, r4
   1aae4:	ldrd	r4, [sp]
   1aae8:	ldr	r6, [sp, #8]
   1aaec:	add	sp, sp, #12
   1aaf0:	pop	{pc}		; (ldr pc, [sp], #4)
   1aaf4:	cmp	r0, #0
   1aaf8:	bne	1ab0c <__assert_fail@plt+0x959c>
   1aafc:	bl	113f0 <__errno_location@plt>
   1ab00:	str	r4, [r0]
   1ab04:	mvn	r4, #0
   1ab08:	b	1aae0 <__assert_fail@plt+0x9570>
   1ab0c:	mvn	r4, #0
   1ab10:	b	1aae0 <__assert_fail@plt+0x9570>
   1ab14:	push	{lr}		; (str lr, [sp, #-4]!)
   1ab18:	sub	sp, sp, #268	; 0x10c
   1ab1c:	movw	r2, #257	; 0x101
   1ab20:	add	r1, sp, #4
   1ab24:	bl	1af04 <__assert_fail@plt+0x9994>
   1ab28:	cmp	r0, #0
   1ab2c:	movne	r0, #0
   1ab30:	bne	1ab64 <__assert_fail@plt+0x95f4>
   1ab34:	movw	r1, #54140	; 0xd37c
   1ab38:	movt	r1, #1
   1ab3c:	add	r0, sp, #4
   1ab40:	bl	111b0 <strcmp@plt>
   1ab44:	cmp	r0, #0
   1ab48:	beq	1ab64 <__assert_fail@plt+0x95f4>
   1ab4c:	add	r0, sp, #4
   1ab50:	movw	r1, #54144	; 0xd380
   1ab54:	movt	r1, #1
   1ab58:	bl	111b0 <strcmp@plt>
   1ab5c:	adds	r0, r0, #0
   1ab60:	movne	r0, #1
   1ab64:	add	sp, sp, #268	; 0x10c
   1ab68:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab6c:	mov	r0, #14
   1ab70:	str	r4, [sp, #-8]!
   1ab74:	str	lr, [sp, #4]
   1ab78:	bl	114bc <nl_langinfo@plt>
   1ab7c:	cmp	r0, #0
   1ab80:	beq	1aba4 <__assert_fail@plt+0x9634>
   1ab84:	ldrb	r2, [r0]
   1ab88:	movw	r3, #54152	; 0xd388
   1ab8c:	movt	r3, #1
   1ab90:	ldr	r4, [sp]
   1ab94:	add	sp, sp, #4
   1ab98:	cmp	r2, #0
   1ab9c:	moveq	r0, r3
   1aba0:	pop	{pc}		; (ldr pc, [sp], #4)
   1aba4:	ldr	r4, [sp]
   1aba8:	add	sp, sp, #4
   1abac:	movw	r0, #54152	; 0xd388
   1abb0:	movt	r0, #1
   1abb4:	pop	{pc}		; (ldr pc, [sp], #4)
   1abb8:	adds	r3, r0, #16
   1abbc:	bmi	1ac08 <__assert_fail@plt+0x9698>
   1abc0:	cmp	r3, r0
   1abc4:	bcc	1ac08 <__assert_fail@plt+0x9698>
   1abc8:	mov	r0, r3
   1abcc:	str	r4, [sp, #-8]!
   1abd0:	str	lr, [sp, #4]
   1abd4:	bl	11354 <malloc@plt>
   1abd8:	cmp	r0, #0
   1abdc:	moveq	r0, #0
   1abe0:	beq	1abfc <__assert_fail@plt+0x968c>
   1abe4:	add	r3, r0, #8
   1abe8:	rsb	r2, r0, #8
   1abec:	bic	r3, r3, #15
   1abf0:	add	r3, r3, r2
   1abf4:	add	r0, r0, r3
   1abf8:	strb	r3, [r0, #-1]
   1abfc:	ldr	r4, [sp]
   1ac00:	add	sp, sp, #4
   1ac04:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac08:	mov	r0, #0
   1ac0c:	bx	lr
   1ac10:	tst	r0, #7
   1ac14:	bne	1ac2c <__assert_fail@plt+0x96bc>
   1ac18:	tst	r0, #8
   1ac1c:	bxeq	lr
   1ac20:	ldrb	r3, [r0, #-1]
   1ac24:	sub	r0, r0, r3
   1ac28:	b	1a81c <__assert_fail@plt+0x92ac>
   1ac2c:	str	r4, [sp, #-8]!
   1ac30:	str	lr, [sp, #4]
   1ac34:	bl	11540 <abort@plt>
   1ac38:	str	r4, [sp, #-8]!
   1ac3c:	mov	r4, r0
   1ac40:	str	lr, [sp, #4]
   1ac44:	bl	111ec <wcwidth@plt>
   1ac48:	cmp	r0, #0
   1ac4c:	bge	1ac60 <__assert_fail@plt+0x96f0>
   1ac50:	mov	r0, r4
   1ac54:	bl	112a0 <iswcntrl@plt>
   1ac58:	clz	r0, r0
   1ac5c:	lsr	r0, r0, #5
   1ac60:	ldr	r4, [sp]
   1ac64:	add	sp, sp, #4
   1ac68:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac6c:	mov	r3, r1
   1ac70:	strd	r4, [sp, #-16]!
   1ac74:	mov	r4, r1
   1ac78:	ldr	r2, [r1, #4]
   1ac7c:	mov	r5, r0
   1ac80:	ldr	r1, [r3], #16
   1ac84:	str	r6, [sp, #8]
   1ac88:	str	lr, [sp, #12]
   1ac8c:	cmp	r1, r3
   1ac90:	strne	r1, [r0]
   1ac94:	beq	1acc0 <__assert_fail@plt+0x9750>
   1ac98:	ldrb	r3, [r4, #8]
   1ac9c:	str	r2, [r5, #4]
   1aca0:	ldr	r6, [sp, #8]
   1aca4:	cmp	r3, #0
   1aca8:	strb	r3, [r5, #8]
   1acac:	ldrne	r3, [r4, #12]
   1acb0:	strne	r3, [r5, #12]
   1acb4:	ldrd	r4, [sp]
   1acb8:	add	sp, sp, #12
   1acbc:	pop	{pc}		; (ldr pc, [sp], #4)
   1acc0:	add	r3, r0, #16
   1acc4:	mov	r0, r3
   1acc8:	bl	1121c <memcpy@plt>
   1accc:	ldr	r2, [r4, #4]
   1acd0:	str	r0, [r5]
   1acd4:	b	1ac98 <__assert_fail@plt+0x9728>
   1acd8:	lsr	r2, r0, #5
   1acdc:	movw	r3, #54160	; 0xd390
   1ace0:	movt	r3, #1
   1ace4:	and	r0, r0, #31
   1ace8:	ldr	r3, [r3, r2, lsl #2]
   1acec:	lsr	r0, r3, r0
   1acf0:	and	r0, r0, #1
   1acf4:	bx	lr
   1acf8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1acfc:	mov	r4, r0
   1ad00:	strd	r6, [sp, #8]
   1ad04:	str	r8, [sp, #16]
   1ad08:	str	lr, [sp, #20]
   1ad0c:	sub	sp, sp, #56	; 0x38
   1ad10:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   1ad14:	cmp	r0, #1
   1ad18:	bhi	1ad44 <__assert_fail@plt+0x97d4>
   1ad1c:	mov	r0, r4
   1ad20:	bl	113c0 <strlen@plt>
   1ad24:	mov	r5, r0
   1ad28:	mov	r0, r5
   1ad2c:	add	sp, sp, #56	; 0x38
   1ad30:	ldrd	r4, [sp]
   1ad34:	ldrd	r6, [sp, #8]
   1ad38:	ldr	r8, [sp, #16]
   1ad3c:	add	sp, sp, #20
   1ad40:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad44:	mov	r3, #0
   1ad48:	mov	r0, #0
   1ad4c:	mov	r1, #0
   1ad50:	movw	r7, #54160	; 0xd390
   1ad54:	movt	r7, #1
   1ad58:	mov	r5, r3
   1ad5c:	strb	r3, [sp]
   1ad60:	mov	r6, #1
   1ad64:	strd	r0, [sp, #4]
   1ad68:	strb	r3, [sp, #12]
   1ad6c:	str	r4, [sp, #16]
   1ad70:	b	1adc8 <__assert_fail@plt+0x9858>
   1ad74:	ldrb	r3, [r4]
   1ad78:	lsr	r2, r3, #5
   1ad7c:	and	r3, r3, #31
   1ad80:	ldr	r2, [r7, r2, lsl #2]
   1ad84:	lsr	r3, r2, r3
   1ad88:	tst	r3, #1
   1ad8c:	beq	1ae38 <__assert_fail@plt+0x98c8>
   1ad90:	str	r6, [sp, #20]
   1ad94:	ldrb	r3, [r4]
   1ad98:	strb	r6, [sp, #24]
   1ad9c:	mov	r4, r3
   1ada0:	str	r3, [sp, #28]
   1ada4:	cmp	r4, #0
   1ada8:	beq	1ad28 <__assert_fail@plt+0x97b8>
   1adac:	ldr	r4, [sp, #16]
   1adb0:	mov	r2, #0
   1adb4:	add	r5, r5, #1
   1adb8:	ldr	r3, [sp, #20]
   1adbc:	strb	r2, [sp, #12]
   1adc0:	add	r4, r4, r3
   1adc4:	str	r4, [sp, #16]
   1adc8:	ldrb	r3, [sp]
   1adcc:	cmp	r3, #0
   1add0:	addne	r8, sp, #4
   1add4:	beq	1ad74 <__assert_fail@plt+0x9804>
   1add8:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   1addc:	mov	r1, r0
   1ade0:	mov	r0, r4
   1ade4:	bl	193c8 <__assert_fail@plt+0x7e58>
   1ade8:	mov	r2, r0
   1adec:	mov	r3, r8
   1adf0:	mov	r1, r4
   1adf4:	add	r0, sp, #28
   1adf8:	bl	1a988 <__assert_fail@plt+0x9418>
   1adfc:	cmn	r0, #1
   1ae00:	str	r0, [sp, #20]
   1ae04:	beq	1ae54 <__assert_fail@plt+0x98e4>
   1ae08:	cmn	r0, #2
   1ae0c:	beq	1ae68 <__assert_fail@plt+0x98f8>
   1ae10:	cmp	r0, #0
   1ae14:	beq	1ae84 <__assert_fail@plt+0x9914>
   1ae18:	ldr	r4, [sp, #28]
   1ae1c:	mov	r0, r8
   1ae20:	strb	r6, [sp, #24]
   1ae24:	bl	11234 <mbsinit@plt>
   1ae28:	cmp	r0, #0
   1ae2c:	movne	r3, #0
   1ae30:	strbne	r3, [sp]
   1ae34:	b	1ada4 <__assert_fail@plt+0x9834>
   1ae38:	add	r8, sp, #4
   1ae3c:	mov	r0, r8
   1ae40:	bl	11234 <mbsinit@plt>
   1ae44:	cmp	r0, #0
   1ae48:	beq	1aec4 <__assert_fail@plt+0x9954>
   1ae4c:	strb	r6, [sp]
   1ae50:	b	1add8 <__assert_fail@plt+0x9868>
   1ae54:	mov	r3, #0
   1ae58:	str	r6, [sp, #20]
   1ae5c:	ldr	r4, [sp, #16]
   1ae60:	strb	r3, [sp, #24]
   1ae64:	b	1adb0 <__assert_fail@plt+0x9840>
   1ae68:	ldr	r4, [sp, #16]
   1ae6c:	mov	r0, r4
   1ae70:	bl	113c0 <strlen@plt>
   1ae74:	mov	r3, #0
   1ae78:	str	r0, [sp, #20]
   1ae7c:	strb	r3, [sp, #24]
   1ae80:	b	1adb0 <__assert_fail@plt+0x9840>
   1ae84:	ldr	r4, [sp, #16]
   1ae88:	str	r6, [sp, #20]
   1ae8c:	ldrb	r3, [r4]
   1ae90:	cmp	r3, #0
   1ae94:	bne	1aee4 <__assert_fail@plt+0x9974>
   1ae98:	ldr	r4, [sp, #28]
   1ae9c:	cmp	r4, #0
   1aea0:	beq	1ae1c <__assert_fail@plt+0x98ac>
   1aea4:	movw	r3, #54192	; 0xd3b0
   1aea8:	movt	r3, #1
   1aeac:	movw	r1, #52924	; 0xcebc
   1aeb0:	movt	r1, #1
   1aeb4:	movw	r0, #52936	; 0xcec8
   1aeb8:	movt	r0, #1
   1aebc:	mov	r2, #172	; 0xac
   1aec0:	bl	11570 <__assert_fail@plt>
   1aec4:	movw	r3, #54192	; 0xd3b0
   1aec8:	movt	r3, #1
   1aecc:	movw	r1, #52924	; 0xcebc
   1aed0:	movt	r1, #1
   1aed4:	movw	r0, #52956	; 0xcedc
   1aed8:	movt	r0, #1
   1aedc:	mov	r2, #143	; 0x8f
   1aee0:	bl	11570 <__assert_fail@plt>
   1aee4:	movw	r3, #54192	; 0xd3b0
   1aee8:	movt	r3, #1
   1aeec:	movw	r1, #52924	; 0xcebc
   1aef0:	movt	r1, #1
   1aef4:	movw	r0, #52980	; 0xcef4
   1aef8:	movt	r0, #1
   1aefc:	mov	r2, #171	; 0xab
   1af00:	bl	11570 <__assert_fail@plt>
   1af04:	strd	r4, [sp, #-16]!
   1af08:	mov	r5, r1
   1af0c:	mov	r1, #0
   1af10:	mov	r4, r2
   1af14:	str	r6, [sp, #8]
   1af18:	str	lr, [sp, #12]
   1af1c:	bl	1148c <setlocale@plt>
   1af20:	subs	r6, r0, #0
   1af24:	beq	1afa4 <__assert_fail@plt+0x9a34>
   1af28:	bl	113c0 <strlen@plt>
   1af2c:	cmp	r4, r0
   1af30:	bhi	1af50 <__assert_fail@plt+0x99e0>
   1af34:	cmp	r4, #0
   1af38:	moveq	r0, #34	; 0x22
   1af3c:	bne	1af74 <__assert_fail@plt+0x9a04>
   1af40:	ldrd	r4, [sp]
   1af44:	ldr	r6, [sp, #8]
   1af48:	add	sp, sp, #12
   1af4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1af50:	add	r2, r0, #1
   1af54:	mov	r1, r6
   1af58:	mov	r0, r5
   1af5c:	bl	1121c <memcpy@plt>
   1af60:	ldrd	r4, [sp]
   1af64:	mov	r0, #0
   1af68:	ldr	r6, [sp, #8]
   1af6c:	add	sp, sp, #12
   1af70:	pop	{pc}		; (ldr pc, [sp], #4)
   1af74:	sub	r4, r4, #1
   1af78:	mov	r1, r6
   1af7c:	mov	r2, r4
   1af80:	mov	r0, r5
   1af84:	bl	1121c <memcpy@plt>
   1af88:	mov	r3, #0
   1af8c:	mov	r0, #34	; 0x22
   1af90:	strb	r3, [r5, r4]
   1af94:	ldrd	r4, [sp]
   1af98:	ldr	r6, [sp, #8]
   1af9c:	add	sp, sp, #12
   1afa0:	pop	{pc}		; (ldr pc, [sp], #4)
   1afa4:	cmp	r4, #0
   1afa8:	mov	r0, #22
   1afac:	strbne	r6, [r5]
   1afb0:	ldrd	r4, [sp]
   1afb4:	ldr	r6, [sp, #8]
   1afb8:	add	sp, sp, #12
   1afbc:	pop	{pc}		; (ldr pc, [sp], #4)
   1afc0:	mov	r1, #0
   1afc4:	b	1148c <setlocale@plt>
   1afc8:	mov	r2, #3
   1afcc:	mov	r1, #0
   1afd0:	b	1a594 <__assert_fail@plt+0x9024>
   1afd4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1afd8:	mov	r7, r0
   1afdc:	ldr	r6, [pc, #72]	; 1b02c <__assert_fail@plt+0x9abc>
   1afe0:	ldr	r5, [pc, #72]	; 1b030 <__assert_fail@plt+0x9ac0>
   1afe4:	add	r6, pc, r6
   1afe8:	add	r5, pc, r5
   1afec:	sub	r6, r6, r5
   1aff0:	mov	r8, r1
   1aff4:	mov	r9, r2
   1aff8:	bl	11178 <fdopen@plt-0x20>
   1affc:	asrs	r6, r6, #2
   1b000:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b004:	mov	r4, #0
   1b008:	add	r4, r4, #1
   1b00c:	ldr	r3, [r5], #4
   1b010:	mov	r2, r9
   1b014:	mov	r1, r8
   1b018:	mov	r0, r7
   1b01c:	blx	r3
   1b020:	cmp	r6, r4
   1b024:	bne	1b008 <__assert_fail@plt+0x9a98>
   1b028:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b02c:	andeq	r2, r1, r8, lsr #30
   1b030:	andeq	r2, r1, r0, lsr #30
   1b034:	bx	lr
   1b038:	ldr	r3, [pc, #12]	; 1b04c <__assert_fail@plt+0x9adc>
   1b03c:	mov	r1, #0
   1b040:	add	r3, pc, r3
   1b044:	ldr	r2, [r3]
   1b048:	b	11408 <__cxa_atexit@plt>
   1b04c:	andeq	r3, r1, r8, lsl r1

Disassembly of section .fini:

0001b050 <.fini>:
   1b050:	push	{r3, lr}
   1b054:	pop	{r3, pc}
