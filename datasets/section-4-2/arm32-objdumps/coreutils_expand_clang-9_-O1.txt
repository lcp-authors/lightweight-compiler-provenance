
../repos/coreutils/src/expand:     file format elf32-littlearm


Disassembly of section .init:

00010db4 <.init>:
   10db4:	push	{r3, lr}
   10db8:	bl	11068 <__assert_fail@plt+0x48>
   10dbc:	pop	{r3, pc}

Disassembly of section .plt:

00010dc0 <calloc@plt-0x14>:
   10dc0:	push	{lr}		; (str lr, [sp, #-4]!)
   10dc4:	ldr	lr, [pc, #4]	; 10dd0 <calloc@plt-0x4>
   10dc8:	add	lr, pc, lr
   10dcc:	ldr	pc, [lr, #8]!
   10dd0:	andeq	r5, r1, r0, lsr r2

00010dd4 <calloc@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #86016	; 0x15000
   10ddc:	ldr	pc, [ip, #560]!	; 0x230

00010de0 <fputs_unlocked@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #86016	; 0x15000
   10de8:	ldr	pc, [ip, #552]!	; 0x228

00010dec <raise@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #86016	; 0x15000
   10df4:	ldr	pc, [ip, #544]!	; 0x220

00010df8 <strcmp@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #86016	; 0x15000
   10e00:	ldr	pc, [ip, #536]!	; 0x218

00010e04 <posix_fadvise64@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #86016	; 0x15000
   10e0c:	ldr	pc, [ip, #528]!	; 0x210

00010e10 <fflush@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #86016	; 0x15000
   10e18:	ldr	pc, [ip, #520]!	; 0x208

00010e1c <free@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #86016	; 0x15000
   10e24:	ldr	pc, [ip, #512]!	; 0x200

00010e28 <_exit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #86016	; 0x15000
   10e30:	ldr	pc, [ip, #504]!	; 0x1f8

00010e34 <memcpy@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #86016	; 0x15000
   10e3c:	ldr	pc, [ip, #496]!	; 0x1f0

00010e40 <mbsinit@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #86016	; 0x15000
   10e48:	ldr	pc, [ip, #488]!	; 0x1e8

00010e4c <getc_unlocked@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #86016	; 0x15000
   10e54:	ldr	pc, [ip, #480]!	; 0x1e0

00010e58 <dcgettext@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #86016	; 0x15000
   10e60:	ldr	pc, [ip, #472]!	; 0x1d8

00010e64 <realloc@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #86016	; 0x15000
   10e6c:	ldr	pc, [ip, #464]!	; 0x1d0

00010e70 <textdomain@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #86016	; 0x15000
   10e78:	ldr	pc, [ip, #456]!	; 0x1c8

00010e7c <iswprint@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #86016	; 0x15000
   10e84:	ldr	pc, [ip, #448]!	; 0x1c0

00010e88 <fwrite@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #86016	; 0x15000
   10e90:	ldr	pc, [ip, #440]!	; 0x1b8

00010e94 <lseek64@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #86016	; 0x15000
   10e9c:	ldr	pc, [ip, #432]!	; 0x1b0

00010ea0 <__ctype_get_mb_cur_max@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #86016	; 0x15000
   10ea8:	ldr	pc, [ip, #424]!	; 0x1a8

00010eac <__fpending@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #86016	; 0x15000
   10eb4:	ldr	pc, [ip, #416]!	; 0x1a0

00010eb8 <ferror_unlocked@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #86016	; 0x15000
   10ec0:	ldr	pc, [ip, #408]!	; 0x198

00010ec4 <mbrtowc@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #86016	; 0x15000
   10ecc:	ldr	pc, [ip, #400]!	; 0x190

00010ed0 <error@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #86016	; 0x15000
   10ed8:	ldr	pc, [ip, #392]!	; 0x188

00010edc <malloc@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #86016	; 0x15000
   10ee4:	ldr	pc, [ip, #384]!	; 0x180

00010ee8 <__libc_start_main@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #86016	; 0x15000
   10ef0:	ldr	pc, [ip, #376]!	; 0x178

00010ef4 <__freading@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #86016	; 0x15000
   10efc:	ldr	pc, [ip, #368]!	; 0x170

00010f00 <__gmon_start__@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #86016	; 0x15000
   10f08:	ldr	pc, [ip, #360]!	; 0x168

00010f0c <getopt_long@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #86016	; 0x15000
   10f14:	ldr	pc, [ip, #352]!	; 0x160

00010f18 <__ctype_b_loc@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #86016	; 0x15000
   10f20:	ldr	pc, [ip, #344]!	; 0x158

00010f24 <exit@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #86016	; 0x15000
   10f2c:	ldr	pc, [ip, #336]!	; 0x150

00010f30 <bcmp@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #86016	; 0x15000
   10f38:	ldr	pc, [ip, #328]!	; 0x148

00010f3c <strlen@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #86016	; 0x15000
   10f44:	ldr	pc, [ip, #320]!	; 0x140

00010f48 <__errno_location@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #86016	; 0x15000
   10f50:	ldr	pc, [ip, #312]!	; 0x138

00010f54 <__cxa_atexit@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #86016	; 0x15000
   10f5c:	ldr	pc, [ip, #304]!	; 0x130

00010f60 <memset@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #86016	; 0x15000
   10f68:	ldr	pc, [ip, #296]!	; 0x128

00010f6c <__printf_chk@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #86016	; 0x15000
   10f74:	ldr	pc, [ip, #288]!	; 0x120

00010f78 <fileno@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #86016	; 0x15000
   10f80:	ldr	pc, [ip, #280]!	; 0x118

00010f84 <__fprintf_chk@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #86016	; 0x15000
   10f8c:	ldr	pc, [ip, #272]!	; 0x110

00010f90 <fclose@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #86016	; 0x15000
   10f98:	ldr	pc, [ip, #264]!	; 0x108

00010f9c <fseeko64@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #86016	; 0x15000
   10fa4:	ldr	pc, [ip, #256]!	; 0x100

00010fa8 <setlocale@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #86016	; 0x15000
   10fb0:	ldr	pc, [ip, #248]!	; 0xf8

00010fb4 <strrchr@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #86016	; 0x15000
   10fbc:	ldr	pc, [ip, #240]!	; 0xf0

00010fc0 <nl_langinfo@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #86016	; 0x15000
   10fc8:	ldr	pc, [ip, #232]!	; 0xe8

00010fcc <clearerr_unlocked@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #86016	; 0x15000
   10fd4:	ldr	pc, [ip, #224]!	; 0xe0

00010fd8 <fopen64@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #86016	; 0x15000
   10fe0:	ldr	pc, [ip, #216]!	; 0xd8

00010fe4 <bindtextdomain@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #86016	; 0x15000
   10fec:	ldr	pc, [ip, #208]!	; 0xd0

00010ff0 <strncmp@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #86016	; 0x15000
   10ff8:	ldr	pc, [ip, #200]!	; 0xc8

00010ffc <abort@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #86016	; 0x15000
   11004:	ldr	pc, [ip, #192]!	; 0xc0

00011008 <putchar_unlocked@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #86016	; 0x15000
   11010:	ldr	pc, [ip, #184]!	; 0xb8

00011014 <strspn@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #86016	; 0x15000
   1101c:	ldr	pc, [ip, #176]!	; 0xb0

00011020 <__assert_fail@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #86016	; 0x15000
   11028:	ldr	pc, [ip, #168]!	; 0xa8

Disassembly of section .text:

0001102c <.text>:
   1102c:	mov	fp, #0
   11030:	mov	lr, #0
   11034:	pop	{r1}		; (ldr r1, [sp], #4)
   11038:	mov	r2, sp
   1103c:	push	{r2}		; (str r2, [sp, #-4]!)
   11040:	push	{r0}		; (str r0, [sp, #-4]!)
   11044:	ldr	ip, [pc, #16]	; 1105c <__assert_fail@plt+0x3c>
   11048:	push	{ip}		; (str ip, [sp, #-4]!)
   1104c:	ldr	r0, [pc, #12]	; 11060 <__assert_fail@plt+0x40>
   11050:	ldr	r3, [pc, #12]	; 11064 <__assert_fail@plt+0x44>
   11054:	bl	10ee8 <__libc_start_main@plt>
   11058:	bl	10ffc <abort@plt>
   1105c:	andeq	r5, r1, r8, lsr #4
   11060:	andeq	r1, r1, r8, lsl r4
   11064:	andeq	r5, r1, r8, asr #3
   11068:	ldr	r3, [pc, #20]	; 11084 <__assert_fail@plt+0x64>
   1106c:	ldr	r2, [pc, #20]	; 11088 <__assert_fail@plt+0x68>
   11070:	add	r3, pc, r3
   11074:	ldr	r2, [r3, r2]
   11078:	cmp	r2, #0
   1107c:	bxeq	lr
   11080:	b	10f00 <__gmon_start__@plt>
   11084:	andeq	r4, r1, r8, lsl #31
   11088:	ldrdeq	r0, [r0], -r4
   1108c:	ldr	r0, [pc, #24]	; 110ac <__assert_fail@plt+0x8c>
   11090:	ldr	r3, [pc, #24]	; 110b0 <__assert_fail@plt+0x90>
   11094:	cmp	r3, r0
   11098:	bxeq	lr
   1109c:	ldr	r3, [pc, #16]	; 110b4 <__assert_fail@plt+0x94>
   110a0:	cmp	r3, #0
   110a4:	bxeq	lr
   110a8:	bx	r3
   110ac:	andeq	r6, r2, r0, lsr r1
   110b0:	andeq	r6, r2, r0, lsr r1
   110b4:	andeq	r0, r0, r0
   110b8:	ldr	r0, [pc, #36]	; 110e4 <__assert_fail@plt+0xc4>
   110bc:	ldr	r1, [pc, #36]	; 110e8 <__assert_fail@plt+0xc8>
   110c0:	sub	r1, r1, r0
   110c4:	asr	r1, r1, #2
   110c8:	add	r1, r1, r1, lsr #31
   110cc:	asrs	r1, r1, #1
   110d0:	bxeq	lr
   110d4:	ldr	r3, [pc, #16]	; 110ec <__assert_fail@plt+0xcc>
   110d8:	cmp	r3, #0
   110dc:	bxeq	lr
   110e0:	bx	r3
   110e4:	andeq	r6, r2, r0, lsr r1
   110e8:	andeq	r6, r2, r0, lsr r1
   110ec:	andeq	r0, r0, r0
   110f0:	push	{r4, lr}
   110f4:	ldr	r4, [pc, #24]	; 11114 <__assert_fail@plt+0xf4>
   110f8:	ldrb	r3, [r4]
   110fc:	cmp	r3, #0
   11100:	popne	{r4, pc}
   11104:	bl	1108c <__assert_fail@plt+0x6c>
   11108:	mov	r3, #1
   1110c:	strb	r3, [r4]
   11110:	pop	{r4, pc}
   11114:	andeq	r6, r2, r4, asr r1
   11118:	b	110b8 <__assert_fail@plt+0x98>
   1111c:	push	{fp, lr}
   11120:	mov	fp, sp
   11124:	mov	r4, r0
   11128:	cmp	r0, #0
   1112c:	bne	111ec <__assert_fail@plt+0x1cc>
   11130:	movw	r1, #21115	; 0x527b
   11134:	movt	r1, #1
   11138:	mov	r0, #0
   1113c:	mov	r2, #5
   11140:	bl	10e58 <dcgettext@plt>
   11144:	mov	r1, r0
   11148:	movw	r0, #24988	; 0x619c
   1114c:	movt	r0, #2
   11150:	ldr	r2, [r0]
   11154:	mov	r0, #1
   11158:	bl	10f6c <__printf_chk@plt>
   1115c:	movw	r1, #21148	; 0x529c
   11160:	movt	r1, #1
   11164:	mov	r0, #0
   11168:	mov	r2, #5
   1116c:	bl	10e58 <dcgettext@plt>
   11170:	movw	r5, #24908	; 0x614c
   11174:	movt	r5, #2
   11178:	ldr	r1, [r5]
   1117c:	bl	10de0 <fputs_unlocked@plt>
   11180:	bl	11230 <__assert_fail@plt+0x210>
   11184:	bl	11260 <__assert_fail@plt+0x240>
   11188:	movw	r1, #21214	; 0x52de
   1118c:	movt	r1, #1
   11190:	mov	r0, #0
   11194:	mov	r2, #5
   11198:	bl	10e58 <dcgettext@plt>
   1119c:	ldr	r1, [r5]
   111a0:	bl	10de0 <fputs_unlocked@plt>
   111a4:	bl	12190 <__assert_fail@plt+0x1170>
   111a8:	movw	r1, #21326	; 0x534e
   111ac:	movt	r1, #1
   111b0:	mov	r0, #0
   111b4:	mov	r2, #5
   111b8:	bl	10e58 <dcgettext@plt>
   111bc:	ldr	r1, [r5]
   111c0:	bl	10de0 <fputs_unlocked@plt>
   111c4:	movw	r1, #21371	; 0x537b
   111c8:	movt	r1, #1
   111cc:	mov	r0, #0
   111d0:	mov	r2, #5
   111d4:	bl	10e58 <dcgettext@plt>
   111d8:	ldr	r1, [r5]
   111dc:	bl	10de0 <fputs_unlocked@plt>
   111e0:	bl	11290 <__assert_fail@plt+0x270>
   111e4:	mov	r0, r4
   111e8:	bl	10f24 <exit@plt>
   111ec:	movw	r0, #24896	; 0x6140
   111f0:	movt	r0, #2
   111f4:	ldr	r5, [r0]
   111f8:	movw	r1, #21076	; 0x5254
   111fc:	movt	r1, #1
   11200:	mov	r0, #0
   11204:	mov	r2, #5
   11208:	bl	10e58 <dcgettext@plt>
   1120c:	mov	r2, r0
   11210:	movw	r0, #24988	; 0x619c
   11214:	movt	r0, #2
   11218:	ldr	r3, [r0]
   1121c:	mov	r0, r5
   11220:	mov	r1, #1
   11224:	bl	10f84 <__fprintf_chk@plt>
   11228:	mov	r0, r4
   1122c:	bl	10f24 <exit@plt>
   11230:	push	{fp, lr}
   11234:	mov	fp, sp
   11238:	movw	r1, #21486	; 0x53ee
   1123c:	movt	r1, #1
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	bl	10e58 <dcgettext@plt>
   1124c:	movw	r1, #24908	; 0x614c
   11250:	movt	r1, #2
   11254:	ldr	r1, [r1]
   11258:	pop	{fp, lr}
   1125c:	b	10de0 <fputs_unlocked@plt>
   11260:	push	{fp, lr}
   11264:	mov	fp, sp
   11268:	movw	r1, #21542	; 0x5426
   1126c:	movt	r1, #1
   11270:	mov	r0, #0
   11274:	mov	r2, #5
   11278:	bl	10e58 <dcgettext@plt>
   1127c:	movw	r1, #24908	; 0x614c
   11280:	movt	r1, #2
   11284:	ldr	r1, [r1]
   11288:	pop	{fp, lr}
   1128c:	b	10de0 <fputs_unlocked@plt>
   11290:	push	{r4, r5, r6, sl, fp, lr}
   11294:	add	fp, sp, #16
   11298:	sub	sp, sp, #56	; 0x38
   1129c:	movw	r0, #22112	; 0x5660
   112a0:	movt	r0, #1
   112a4:	add	r1, r0, #32
   112a8:	mov	r2, #48	; 0x30
   112ac:	vld1.64	{d16-d17}, [r1]
   112b0:	mov	r6, sp
   112b4:	add	r1, r6, #32
   112b8:	add	r3, r0, #16
   112bc:	vld1.64	{d18-d19}, [r0], r2
   112c0:	vld1.64	{d20-d21}, [r3]
   112c4:	vldr	d22, [r0]
   112c8:	vst1.64	{d16-d17}, [r1]
   112cc:	add	r0, r6, #16
   112d0:	vst1.64	{d20-d21}, [r0]
   112d4:	mov	r0, r6
   112d8:	vst1.64	{d18-d19}, [r0], r2
   112dc:	vstr	d22, [r0]
   112e0:	ldr	r1, [sp]
   112e4:	cmp	r1, #0
   112e8:	movw	r4, #21425	; 0x53b1
   112ec:	movt	r4, #1
   112f0:	beq	11318 <__assert_fail@plt+0x2f8>
   112f4:	mov	r6, sp
   112f8:	movw	r5, #21425	; 0x53b1
   112fc:	movt	r5, #1
   11300:	mov	r0, r5
   11304:	bl	10df8 <strcmp@plt>
   11308:	cmp	r0, #0
   1130c:	ldrne	r1, [r6, #8]!
   11310:	cmpne	r1, #0
   11314:	bne	11300 <__assert_fail@plt+0x2e0>
   11318:	ldr	r5, [r6, #4]
   1131c:	movw	r1, #21712	; 0x54d0
   11320:	movt	r1, #1
   11324:	mov	r0, #0
   11328:	mov	r2, #5
   1132c:	bl	10e58 <dcgettext@plt>
   11330:	mov	r1, r0
   11334:	movw	r2, #21456	; 0x53d0
   11338:	movt	r2, #1
   1133c:	movw	r3, #21735	; 0x54e7
   11340:	movt	r3, #1
   11344:	mov	r0, #1
   11348:	bl	10f6c <__printf_chk@plt>
   1134c:	cmp	r5, #0
   11350:	moveq	r5, r4
   11354:	mov	r0, #5
   11358:	mov	r1, #0
   1135c:	bl	10fa8 <setlocale@plt>
   11360:	cmp	r0, #0
   11364:	beq	113a4 <__assert_fail@plt+0x384>
   11368:	movw	r1, #21775	; 0x550f
   1136c:	movt	r1, #1
   11370:	mov	r2, #3
   11374:	bl	10ff0 <strncmp@plt>
   11378:	cmp	r0, #0
   1137c:	beq	113a4 <__assert_fail@plt+0x384>
   11380:	movw	r1, #21779	; 0x5513
   11384:	movt	r1, #1
   11388:	mov	r0, #0
   1138c:	mov	r2, #5
   11390:	bl	10e58 <dcgettext@plt>
   11394:	movw	r1, #24908	; 0x614c
   11398:	movt	r1, #2
   1139c:	ldr	r1, [r1]
   113a0:	bl	10de0 <fputs_unlocked@plt>
   113a4:	movw	r1, #21850	; 0x555a
   113a8:	movt	r1, #1
   113ac:	mov	r0, #0
   113b0:	mov	r2, #5
   113b4:	bl	10e58 <dcgettext@plt>
   113b8:	mov	r1, r0
   113bc:	movw	r2, #21735	; 0x54e7
   113c0:	movt	r2, #1
   113c4:	mov	r0, #1
   113c8:	mov	r3, r4
   113cc:	bl	10f6c <__printf_chk@plt>
   113d0:	movw	r0, #21645	; 0x548d
   113d4:	movt	r0, #1
   113d8:	movw	r6, #21927	; 0x55a7
   113dc:	movt	r6, #1
   113e0:	cmp	r5, r4
   113e4:	moveq	r6, r0
   113e8:	movw	r1, #21877	; 0x5575
   113ec:	movt	r1, #1
   113f0:	mov	r0, #0
   113f4:	mov	r2, #5
   113f8:	bl	10e58 <dcgettext@plt>
   113fc:	mov	r1, r0
   11400:	mov	r0, #1
   11404:	mov	r2, r5
   11408:	mov	r3, r6
   1140c:	sub	sp, fp, #16
   11410:	pop	{r4, r5, r6, sl, fp, lr}
   11414:	b	10f6c <__printf_chk@plt>
   11418:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1141c:	add	fp, sp, #28
   11420:	sub	sp, sp, #12
   11424:	mov	r4, r1
   11428:	mov	r5, r0
   1142c:	ldr	r0, [r1]
   11430:	bl	124fc <__assert_fail@plt+0x14dc>
   11434:	movw	r1, #21927	; 0x55a7
   11438:	movt	r1, #1
   1143c:	mov	r0, #6
   11440:	bl	10fa8 <setlocale@plt>
   11444:	movw	r6, #21460	; 0x53d4
   11448:	movt	r6, #1
   1144c:	movw	r1, #21432	; 0x53b8
   11450:	movt	r1, #1
   11454:	mov	r0, r6
   11458:	bl	10fe4 <bindtextdomain@plt>
   1145c:	mov	r0, r6
   11460:	bl	10e70 <textdomain@plt>
   11464:	movw	r0, #8700	; 0x21fc
   11468:	movt	r0, #1
   1146c:	bl	1522c <__assert_fail@plt+0x420c>
   11470:	movw	r1, #24920	; 0x6158
   11474:	movt	r1, #2
   11478:	mov	r0, #1
   1147c:	strb	r0, [r1]
   11480:	mov	r6, #0
   11484:	movw	sl, #21992	; 0x55e8
   11488:	movt	sl, #1
   1148c:	movw	r7, #22028	; 0x560c
   11490:	movt	r7, #1
   11494:	movw	r9, #24912	; 0x6150
   11498:	movt	r9, #2
   1149c:	add	r8, sp, #10
   114a0:	b	114c0 <__assert_fail@plt+0x4a0>
   114a4:	ldr	r1, [r9]
   114a8:	cmp	r1, #0
   114ac:	subne	r0, r1, #1
   114b0:	strbeq	r6, [sp, #11]
   114b4:	strbeq	r0, [sp, #10]
   114b8:	moveq	r0, r8
   114bc:	bl	1188c <__assert_fail@plt+0x86c>
   114c0:	str	r6, [sp]
   114c4:	mov	r0, r5
   114c8:	mov	r1, r4
   114cc:	mov	r2, sl
   114d0:	mov	r3, r7
   114d4:	bl	10f0c <getopt_long@plt>
   114d8:	sub	r1, r0, #48	; 0x30
   114dc:	cmp	r1, #10
   114e0:	bcc	114a4 <__assert_fail@plt+0x484>
   114e4:	cmp	r0, #104	; 0x68
   114e8:	ble	11518 <__assert_fail@plt+0x4f8>
   114ec:	cmp	r0, #116	; 0x74
   114f0:	beq	1150c <__assert_fail@plt+0x4ec>
   114f4:	cmp	r0, #105	; 0x69
   114f8:	bne	115bc <__assert_fail@plt+0x59c>
   114fc:	movw	r0, #24920	; 0x6158
   11500:	movt	r0, #2
   11504:	strb	r6, [r0]
   11508:	b	114c0 <__assert_fail@plt+0x4a0>
   1150c:	ldr	r0, [r9]
   11510:	bl	1188c <__assert_fail@plt+0x86c>
   11514:	b	114c0 <__assert_fail@plt+0x4a0>
   11518:	cmn	r0, #1
   1151c:	bne	1155c <__assert_fail@plt+0x53c>
   11520:	bl	11cb0 <__assert_fail@plt+0xc90>
   11524:	movw	r0, #24888	; 0x6138
   11528:	movt	r0, #2
   1152c:	ldr	r1, [r0]
   11530:	mov	r0, #0
   11534:	cmp	r1, r5
   11538:	addlt	r0, r4, r1, lsl #2
   1153c:	bl	11f20 <__assert_fail@plt+0xf00>
   11540:	bl	115c4 <__assert_fail@plt+0x5a4>
   11544:	bl	12140 <__assert_fail@plt+0x1120>
   11548:	movw	r0, #24924	; 0x615c
   1154c:	movt	r0, #2
   11550:	ldr	r0, [r0]
   11554:	sub	sp, fp, #28
   11558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1155c:	cmn	r0, #3
   11560:	beq	11574 <__assert_fail@plt+0x554>
   11564:	cmn	r0, #2
   11568:	bne	115bc <__assert_fail@plt+0x59c>
   1156c:	mov	r0, #0
   11570:	bl	1111c <__assert_fail@plt+0xfc>
   11574:	movw	r0, #24808	; 0x60e8
   11578:	movt	r0, #2
   1157c:	ldr	r3, [r0]
   11580:	movw	r0, #24908	; 0x614c
   11584:	movt	r0, #2
   11588:	ldr	r0, [r0]
   1158c:	mov	r1, #0
   11590:	movw	r2, #21470	; 0x53de
   11594:	movt	r2, #1
   11598:	str	r2, [sp]
   1159c:	str	r1, [sp, #4]
   115a0:	movw	r1, #21425	; 0x53b1
   115a4:	movt	r1, #1
   115a8:	movw	r2, #21456	; 0x53d0
   115ac:	movt	r2, #1
   115b0:	bl	144c8 <__assert_fail@plt+0x34a8>
   115b4:	mov	r0, #0
   115b8:	bl	10f24 <exit@plt>
   115bc:	mov	r0, #1
   115c0:	bl	1111c <__assert_fail@plt+0xfc>
   115c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115c8:	add	fp, sp, #28
   115cc:	sub	sp, sp, #12
   115d0:	mov	sl, #0
   115d4:	mov	r0, #0
   115d8:	bl	11f50 <__assert_fail@plt+0xf30>
   115dc:	cmp	r0, #0
   115e0:	beq	11744 <__assert_fail@plt+0x724>
   115e4:	mov	r4, r0
   115e8:	movw	r8, #24920	; 0x6158
   115ec:	movt	r8, #2
   115f0:	mov	r7, #0
   115f4:	str	r7, [sp, #8]
   115f8:	mov	r9, #1
   115fc:	mov	r5, #0
   11600:	mov	r0, r4
   11604:	bl	10e4c <getc_unlocked@plt>
   11608:	mov	r6, r0
   1160c:	cmn	r0, #1
   11610:	bgt	1162c <__assert_fail@plt+0x60c>
   11614:	mov	r0, r4
   11618:	bl	11f50 <__assert_fail@plt+0xf30>
   1161c:	mov	r4, r0
   11620:	cmp	r0, #0
   11624:	bne	11600 <__assert_fail@plt+0x5e0>
   11628:	mov	r4, #0
   1162c:	tst	r9, #1
   11630:	beq	116a4 <__assert_fail@plt+0x684>
   11634:	cmp	r6, #8
   11638:	beq	116b4 <__assert_fail@plt+0x694>
   1163c:	cmp	r6, #9
   11640:	bne	116e4 <__assert_fail@plt+0x6c4>
   11644:	mov	r0, r7
   11648:	mov	r1, r5
   1164c:	add	r2, sp, #8
   11650:	add	r3, sp, #7
   11654:	bl	11e18 <__assert_fail@plt+0xdf8>
   11658:	adds	r9, r7, #1
   1165c:	adc	r6, r5, #0
   11660:	ldrb	r2, [sp, #7]
   11664:	cmp	r2, #0
   11668:	moveq	r6, r1
   1166c:	moveq	r9, r0
   11670:	subs	r0, r9, r7
   11674:	sbcs	r0, r6, r5
   11678:	bcc	11778 <__assert_fail@plt+0x758>
   1167c:	adds	r7, r7, #1
   11680:	adc	r5, r5, #0
   11684:	subs	r0, r7, r9
   11688:	sbcs	r0, r5, r6
   1168c:	bcs	116fc <__assert_fail@plt+0x6dc>
   11690:	mov	r0, #32
   11694:	bl	11008 <putchar_unlocked@plt>
   11698:	cmn	r0, #1
   1169c:	bgt	1167c <__assert_fail@plt+0x65c>
   116a0:	b	1174c <__assert_fail@plt+0x72c>
   116a4:	mov	r9, #0
   116a8:	cmp	r6, #0
   116ac:	bpl	11728 <__assert_fail@plt+0x708>
   116b0:	b	11744 <__assert_fail@plt+0x724>
   116b4:	ldr	r0, [sp, #8]
   116b8:	cmp	r0, #0
   116bc:	subne	r0, r0, #1
   116c0:	str	r0, [sp, #8]
   116c4:	orr	r0, r7, r5
   116c8:	subs	r1, r7, #1
   116cc:	sbc	r2, r5, #0
   116d0:	cmp	r0, #0
   116d4:	movne	r5, r2
   116d8:	movne	r7, r1
   116dc:	mov	r6, #8
   116e0:	b	11700 <__assert_fail@plt+0x6e0>
   116e4:	adds	r7, r7, #1
   116e8:	adcs	r5, r5, #0
   116ec:	adc	r0, sl, #0
   116f0:	cmp	r0, #1
   116f4:	bne	11700 <__assert_fail@plt+0x6e0>
   116f8:	b	11778 <__assert_fail@plt+0x758>
   116fc:	mov	r6, #32
   11700:	ldrb	r0, [r8]
   11704:	mov	r9, #1
   11708:	cmp	r0, #0
   1170c:	bne	11720 <__assert_fail@plt+0x700>
   11710:	bl	10f18 <__ctype_b_loc@plt>
   11714:	ldr	r0, [r0]
   11718:	ldrb	r0, [r0, r6, lsl #1]
   1171c:	and	r9, r0, #1
   11720:	cmp	r6, #0
   11724:	bmi	11744 <__assert_fail@plt+0x724>
   11728:	mov	r0, r6
   1172c:	bl	11008 <putchar_unlocked@plt>
   11730:	cmn	r0, #1
   11734:	ble	1174c <__assert_fail@plt+0x72c>
   11738:	cmp	r6, #10
   1173c:	bne	11600 <__assert_fail@plt+0x5e0>
   11740:	b	115f0 <__assert_fail@plt+0x5d0>
   11744:	sub	sp, fp, #28
   11748:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1174c:	bl	10f48 <__errno_location@plt>
   11750:	ldr	r4, [r0]
   11754:	movw	r1, #21977	; 0x55d9
   11758:	movt	r1, #1
   1175c:	mov	r0, #0
   11760:	mov	r2, #5
   11764:	bl	10e58 <dcgettext@plt>
   11768:	mov	r2, r0
   1176c:	mov	r0, #1
   11770:	mov	r1, r4
   11774:	bl	10ed0 <error@plt>
   11778:	movw	r1, #21954	; 0x55c2
   1177c:	movt	r1, #1
   11780:	mov	r0, #0
   11784:	mov	r2, #5
   11788:	bl	10e58 <dcgettext@plt>
   1178c:	mov	r2, r0
   11790:	mov	r0, #1
   11794:	mov	r1, #0
   11798:	bl	10ed0 <error@plt>
   1179c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   117a0:	add	fp, sp, #24
   117a4:	mov	r4, r1
   117a8:	mov	r5, r0
   117ac:	movw	r9, #24928	; 0x6160
   117b0:	movt	r9, #2
   117b4:	ldr	r0, [r9]
   117b8:	mov	r1, #0
   117bc:	cmp	r0, #0
   117c0:	movw	r8, #24932	; 0x6164
   117c4:	movt	r8, #2
   117c8:	beq	117dc <__assert_fail@plt+0x7bc>
   117cc:	ldr	r2, [r8]
   117d0:	add	r2, r2, r0, lsl #3
   117d4:	ldrd	r2, [r2, #-8]
   117d8:	b	117e4 <__assert_fail@plt+0x7c4>
   117dc:	mov	r2, #0
   117e0:	mov	r3, #0
   117e4:	subs	r7, r5, r2
   117e8:	sbcs	r6, r4, r3
   117ec:	adc	r1, r1, #0
   117f0:	rsbs	r1, r1, #1
   117f4:	movwne	r6, #0
   117f8:	movwne	r7, #0
   117fc:	movw	r1, #24936	; 0x6168
   11800:	movt	r1, #2
   11804:	ldr	r1, [r1]
   11808:	cmp	r0, r1
   1180c:	bne	11828 <__assert_fail@plt+0x808>
   11810:	ldr	r0, [r8]
   11814:	movw	r1, #24936	; 0x6168
   11818:	movt	r1, #2
   1181c:	mov	r2, #8
   11820:	bl	14694 <__assert_fail@plt+0x3674>
   11824:	str	r0, [r8]
   11828:	ldr	r0, [r9]
   1182c:	add	r1, r0, #1
   11830:	str	r1, [r9]
   11834:	ldr	r1, [r8]
   11838:	str	r5, [r1, r0, lsl #3]!
   1183c:	str	r4, [r1, #4]
   11840:	movw	r0, #25296	; 0x62d0
   11844:	movt	r0, #2
   11848:	ldr	r1, [r0]
   1184c:	subs	r1, r1, r7
   11850:	rscs	r1, r6, #0
   11854:	bcs	11864 <__assert_fail@plt+0x844>
   11858:	cmp	r6, #0
   1185c:	bne	11868 <__assert_fail@plt+0x848>
   11860:	str	r7, [r0]
   11864:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11868:	movw	r1, #22168	; 0x5698
   1186c:	movt	r1, #1
   11870:	mov	r0, #0
   11874:	mov	r2, #5
   11878:	bl	10e58 <dcgettext@plt>
   1187c:	mov	r2, r0
   11880:	mov	r0, #1
   11884:	mov	r1, #0
   11888:	bl	10ed0 <error@plt>
   1188c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11890:	add	fp, sp, #28
   11894:	sub	sp, sp, #12
   11898:	mov	r8, r0
   1189c:	mov	sl, #0
   118a0:	mov	r7, #1
   118a4:	mov	r0, #0
   118a8:	str	r0, [sp, #4]
   118ac:	mov	r5, #0
   118b0:	mov	r0, #0
   118b4:	str	r0, [sp, #8]
   118b8:	mov	r0, #0
   118bc:	str	r0, [sp]
   118c0:	mov	r4, #0
   118c4:	b	118e8 <__assert_fail@plt+0x8c8>
   118c8:	mov	r0, sl
   118cc:	ldr	r1, [sp, #4]
   118d0:	bl	1179c <__assert_fail@plt+0x77c>
   118d4:	mov	r5, #0
   118d8:	mov	r0, #0
   118dc:	str	r0, [sp, #8]
   118e0:	mov	r4, #0
   118e4:	add	r8, r8, #1
   118e8:	ldrb	r9, [r8]
   118ec:	cmp	r9, #44	; 0x2c
   118f0:	beq	11974 <__assert_fail@plt+0x954>
   118f4:	cmp	r9, #0
   118f8:	beq	11b40 <__assert_fail@plt+0xb20>
   118fc:	bl	10f18 <__ctype_b_loc@plt>
   11900:	ldr	r6, [r0]
   11904:	mov	r0, r9
   11908:	bl	11be4 <__assert_fail@plt+0xbc4>
   1190c:	ldrb	r0, [r6, r9, lsl #1]
   11910:	tst	r0, #1
   11914:	bne	11974 <__assert_fail@plt+0x954>
   11918:	cmp	r9, #43	; 0x2b
   1191c:	beq	119c8 <__assert_fail@plt+0x9a8>
   11920:	cmp	r9, #47	; 0x2f
   11924:	bne	11a28 <__assert_fail@plt+0xa08>
   11928:	mov	r0, #0
   1192c:	tst	r4, #1
   11930:	beq	11b20 <__assert_fail@plt+0xb00>
   11934:	str	r0, [sp, #8]
   11938:	mov	r0, #0
   1193c:	movw	r1, #22191	; 0x56af
   11940:	movt	r1, #1
   11944:	mov	r2, #5
   11948:	bl	10e58 <dcgettext@plt>
   1194c:	mov	r7, r0
   11950:	mov	r0, r8
   11954:	bl	13cf0 <__assert_fail@plt+0x2cd0>
   11958:	mov	r3, r0
   1195c:	mov	r0, #0
   11960:	mov	r1, #0
   11964:	mov	r2, r7
   11968:	bl	10ed0 <error@plt>
   1196c:	mov	r5, #1
   11970:	b	11a10 <__assert_fail@plt+0x9f0>
   11974:	tst	r4, #1
   11978:	beq	118e0 <__assert_fail@plt+0x8c0>
   1197c:	tst	r5, #1
   11980:	beq	119a4 <__assert_fail@plt+0x984>
   11984:	mov	r0, sl
   11988:	ldr	r1, [sp, #4]
   1198c:	bl	11be8 <__assert_fail@plt+0xbc8>
   11990:	mov	r5, #1
   11994:	cmp	r0, #0
   11998:	mov	r4, #0
   1199c:	bne	118e4 <__assert_fail@plt+0x8c4>
   119a0:	b	11b84 <__assert_fail@plt+0xb64>
   119a4:	ldr	r0, [sp, #8]
   119a8:	tst	r0, #1
   119ac:	beq	118c8 <__assert_fail@plt+0x8a8>
   119b0:	mov	r0, sl
   119b4:	ldr	r1, [sp, #4]
   119b8:	bl	11c4c <__assert_fail@plt+0xc2c>
   119bc:	cmp	r0, #0
   119c0:	bne	11a18 <__assert_fail@plt+0x9f8>
   119c4:	b	11b84 <__assert_fail@plt+0xb64>
   119c8:	tst	r4, #1
   119cc:	beq	11a18 <__assert_fail@plt+0x9f8>
   119d0:	mov	r5, #0
   119d4:	mov	r0, #0
   119d8:	movw	r1, #22232	; 0x56d8
   119dc:	movt	r1, #1
   119e0:	mov	r2, #5
   119e4:	bl	10e58 <dcgettext@plt>
   119e8:	mov	r7, r0
   119ec:	mov	r0, r8
   119f0:	bl	13cf0 <__assert_fail@plt+0x2cd0>
   119f4:	mov	r3, r0
   119f8:	mov	r0, #0
   119fc:	mov	r1, #0
   11a00:	mov	r2, r7
   11a04:	bl	10ed0 <error@plt>
   11a08:	mov	r0, #1
   11a0c:	str	r0, [sp, #8]
   11a10:	mov	r7, #0
   11a14:	b	11b14 <__assert_fail@plt+0xaf4>
   11a18:	mov	r0, #1
   11a1c:	str	r0, [sp, #8]
   11a20:	mov	r5, #0
   11a24:	b	118e0 <__assert_fail@plt+0x8c0>
   11a28:	sub	r0, r9, #48	; 0x30
   11a2c:	cmp	r0, #9
   11a30:	bhi	11ba8 <__assert_fail@plt+0xb88>
   11a34:	ands	r1, r4, #1
   11a38:	ldr	r2, [sp]
   11a3c:	moveq	r2, r8
   11a40:	str	r2, [sp]
   11a44:	mov	r2, r1
   11a48:	ldr	r3, [sp, #4]
   11a4c:	movne	r2, r3
   11a50:	movne	r1, sl
   11a54:	movw	r3, #39321	; 0x9999
   11a58:	movt	r3, #39321	; 0x9999
   11a5c:	subs	r3, r3, r1
   11a60:	movw	r3, #39321	; 0x9999
   11a64:	movt	r3, #6553	; 0x1999
   11a68:	sbcs	r3, r3, r2
   11a6c:	bcc	11aa4 <__assert_fail@plt+0xa84>
   11a70:	mov	r3, #10
   11a74:	mov	ip, r7
   11a78:	umull	r3, r7, r1, r3
   11a7c:	add	r6, r2, r2, lsl #2
   11a80:	add	r7, r7, r6, lsl #1
   11a84:	adds	r3, r3, r0
   11a88:	adc	r0, r7, r0, asr #31
   11a8c:	mov	r4, #1
   11a90:	subs	r7, r3, r1
   11a94:	sbcs	r7, r0, r2
   11a98:	mov	sl, r1
   11a9c:	str	r2, [sp, #4]
   11aa0:	bcs	11b2c <__assert_fail@plt+0xb0c>
   11aa4:	ldr	r7, [sp]
   11aa8:	mov	r0, r7
   11aac:	movw	r1, #22273	; 0x5701
   11ab0:	movt	r1, #1
   11ab4:	bl	11014 <strspn@plt>
   11ab8:	mov	r9, r0
   11abc:	mov	r0, r7
   11ac0:	mov	r1, r9
   11ac4:	bl	14908 <__assert_fail@plt+0x38e8>
   11ac8:	mov	r6, r0
   11acc:	mov	r0, #0
   11ad0:	movw	r1, #22284	; 0x570c
   11ad4:	movt	r1, #1
   11ad8:	mov	r2, #5
   11adc:	bl	10e58 <dcgettext@plt>
   11ae0:	mov	r4, r0
   11ae4:	mov	r0, r6
   11ae8:	bl	13cf0 <__assert_fail@plt+0x2cd0>
   11aec:	mov	r3, r0
   11af0:	mov	r0, #0
   11af4:	mov	r1, #0
   11af8:	mov	r2, r4
   11afc:	bl	10ed0 <error@plt>
   11b00:	mov	r0, r6
   11b04:	bl	1242c <__assert_fail@plt+0x140c>
   11b08:	add	r0, r7, r9
   11b0c:	mov	r7, #0
   11b10:	sub	r8, r0, #1
   11b14:	mov	r4, #1
   11b18:	add	r8, r8, #1
   11b1c:	b	118e8 <__assert_fail@plt+0x8c8>
   11b20:	str	r0, [sp, #8]
   11b24:	mov	r5, #1
   11b28:	b	118e0 <__assert_fail@plt+0x8c0>
   11b2c:	mov	r7, ip
   11b30:	mov	sl, r3
   11b34:	str	r0, [sp, #4]
   11b38:	add	r8, r8, #1
   11b3c:	b	118e8 <__assert_fail@plt+0x8c8>
   11b40:	and	r0, r7, r4
   11b44:	tst	r0, #1
   11b48:	beq	11b98 <__assert_fail@plt+0xb78>
   11b4c:	tst	r5, #1
   11b50:	beq	11b64 <__assert_fail@plt+0xb44>
   11b54:	mov	r0, sl
   11b58:	ldr	r1, [sp, #4]
   11b5c:	bl	11be8 <__assert_fail@plt+0xbc8>
   11b60:	b	11b7c <__assert_fail@plt+0xb5c>
   11b64:	ldr	r0, [sp, #8]
   11b68:	tst	r0, #1
   11b6c:	beq	11b8c <__assert_fail@plt+0xb6c>
   11b70:	mov	r0, sl
   11b74:	ldr	r1, [sp, #4]
   11b78:	bl	11c4c <__assert_fail@plt+0xc2c>
   11b7c:	cmp	r0, #0
   11b80:	bne	11ba0 <__assert_fail@plt+0xb80>
   11b84:	mov	r0, #1
   11b88:	bl	10f24 <exit@plt>
   11b8c:	mov	r0, sl
   11b90:	ldr	r1, [sp, #4]
   11b94:	bl	1179c <__assert_fail@plt+0x77c>
   11b98:	tst	r7, #1
   11b9c:	beq	11b84 <__assert_fail@plt+0xb64>
   11ba0:	sub	sp, fp, #28
   11ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ba8:	movw	r1, #22309	; 0x5725
   11bac:	movt	r1, #1
   11bb0:	mov	r0, #0
   11bb4:	mov	r2, #5
   11bb8:	bl	10e58 <dcgettext@plt>
   11bbc:	mov	r4, r0
   11bc0:	mov	r0, r8
   11bc4:	bl	13cf0 <__assert_fail@plt+0x2cd0>
   11bc8:	mov	r3, r0
   11bcc:	mov	r0, #0
   11bd0:	mov	r1, #0
   11bd4:	mov	r2, r4
   11bd8:	bl	10ed0 <error@plt>
   11bdc:	mov	r0, #1
   11be0:	bl	10f24 <exit@plt>
   11be4:	bx	lr
   11be8:	push	{r4, r5, r6, r7, fp, lr}
   11bec:	add	fp, sp, #16
   11bf0:	mov	r5, r1
   11bf4:	mov	r6, r0
   11bf8:	movw	r7, #24944	; 0x6170
   11bfc:	movt	r7, #2
   11c00:	ldrd	r0, [r7]
   11c04:	orrs	r0, r0, r1
   11c08:	beq	11c38 <__assert_fail@plt+0xc18>
   11c0c:	mov	r4, #0
   11c10:	movw	r1, #22834	; 0x5932
   11c14:	movt	r1, #1
   11c18:	mov	r0, #0
   11c1c:	mov	r2, #5
   11c20:	bl	10e58 <dcgettext@plt>
   11c24:	mov	r2, r0
   11c28:	mov	r0, #0
   11c2c:	mov	r1, #0
   11c30:	bl	10ed0 <error@plt>
   11c34:	b	11c3c <__assert_fail@plt+0xc1c>
   11c38:	mov	r4, #1
   11c3c:	str	r6, [r7]
   11c40:	str	r5, [r7, #4]
   11c44:	mov	r0, r4
   11c48:	pop	{r4, r5, r6, r7, fp, pc}
   11c4c:	push	{r4, r5, r6, r7, fp, lr}
   11c50:	add	fp, sp, #16
   11c54:	mov	r5, r1
   11c58:	mov	r6, r0
   11c5c:	movw	r7, #24952	; 0x6178
   11c60:	movt	r7, #2
   11c64:	ldrd	r0, [r7]
   11c68:	orrs	r0, r0, r1
   11c6c:	beq	11c9c <__assert_fail@plt+0xc7c>
   11c70:	mov	r4, #0
   11c74:	movw	r1, #22881	; 0x5961
   11c78:	movt	r1, #1
   11c7c:	mov	r0, #0
   11c80:	mov	r2, #5
   11c84:	bl	10e58 <dcgettext@plt>
   11c88:	mov	r2, r0
   11c8c:	mov	r0, #0
   11c90:	mov	r1, #0
   11c94:	bl	10ed0 <error@plt>
   11c98:	b	11ca0 <__assert_fail@plt+0xc80>
   11c9c:	mov	r4, #1
   11ca0:	str	r6, [r7]
   11ca4:	str	r5, [r7, #4]
   11ca8:	mov	r0, r4
   11cac:	pop	{r4, r5, r6, r7, fp, pc}
   11cb0:	push	{r4, r5, r6, r7, fp, lr}
   11cb4:	add	fp, sp, #16
   11cb8:	movw	r5, #24928	; 0x6160
   11cbc:	movt	r5, #2
   11cc0:	ldr	r1, [r5]
   11cc4:	movw	r4, #24932	; 0x6164
   11cc8:	movt	r4, #2
   11ccc:	ldr	r0, [r4]
   11cd0:	bl	11d6c <__assert_fail@plt+0xd4c>
   11cd4:	ldr	r1, [r5]
   11cd8:	cmp	r1, #0
   11cdc:	beq	11d24 <__assert_fail@plt+0xd04>
   11ce0:	mov	r0, #0
   11ce4:	cmp	r1, #1
   11ce8:	bne	11d58 <__assert_fail@plt+0xd38>
   11cec:	movw	r1, #24944	; 0x6170
   11cf0:	movt	r1, #2
   11cf4:	ldrd	r2, [r1]
   11cf8:	movw	r1, #24952	; 0x6178
   11cfc:	movt	r1, #2
   11d00:	ldrd	r6, [r1]
   11d04:	orr	r1, r7, r3
   11d08:	orr	r2, r6, r2
   11d0c:	orrs	r1, r2, r1
   11d10:	mov	r1, #0
   11d14:	bne	11d5c <__assert_fail@plt+0xd3c>
   11d18:	ldr	r0, [r4]
   11d1c:	ldrd	r0, [r0]
   11d20:	b	11d5c <__assert_fail@plt+0xd3c>
   11d24:	movw	r0, #24944	; 0x6170
   11d28:	movt	r0, #2
   11d2c:	ldrd	r0, [r0]
   11d30:	orrs	r1, r0, r1
   11d34:	bne	11d4c <__assert_fail@plt+0xd2c>
   11d38:	movw	r0, #24952	; 0x6178
   11d3c:	movt	r0, #2
   11d40:	ldrd	r0, [r0]
   11d44:	orrs	r1, r0, r1
   11d48:	movweq	r0, #8
   11d4c:	movw	r1, #25296	; 0x62d0
   11d50:	movt	r1, #2
   11d54:	str	r0, [r1]
   11d58:	mov	r1, #0
   11d5c:	movw	r2, #24960	; 0x6180
   11d60:	movt	r2, #2
   11d64:	strd	r0, [r2]
   11d68:	pop	{r4, r5, r6, r7, fp, pc}
   11d6c:	push	{r4, r5, fp, lr}
   11d70:	add	fp, sp, #8
   11d74:	cmp	r1, #0
   11d78:	beq	11db0 <__assert_fail@plt+0xd90>
   11d7c:	mov	ip, #0
   11d80:	mov	r3, #0
   11d84:	ldrd	r4, [r0]
   11d88:	orrs	r2, r4, r5
   11d8c:	beq	11e00 <__assert_fail@plt+0xde0>
   11d90:	subs	r2, ip, r4
   11d94:	sbcs	r2, r3, r5
   11d98:	bcs	11e0c <__assert_fail@plt+0xdec>
   11d9c:	add	r0, r0, #8
   11da0:	subs	r1, r1, #1
   11da4:	mov	ip, r4
   11da8:	mov	r3, r5
   11dac:	bne	11d84 <__assert_fail@plt+0xd64>
   11db0:	movw	r0, #24952	; 0x6178
   11db4:	movt	r0, #2
   11db8:	ldrd	r0, [r0]
   11dbc:	orrs	r0, r0, r1
   11dc0:	beq	11dfc <__assert_fail@plt+0xddc>
   11dc4:	movw	r0, #24944	; 0x6170
   11dc8:	movt	r0, #2
   11dcc:	ldrd	r0, [r0]
   11dd0:	orrs	r0, r0, r1
   11dd4:	popeq	{r4, r5, fp, pc}
   11dd8:	movw	r1, #22977	; 0x59c1
   11ddc:	movt	r1, #1
   11de0:	mov	r0, #0
   11de4:	mov	r2, #5
   11de8:	bl	10e58 <dcgettext@plt>
   11dec:	mov	r2, r0
   11df0:	mov	r0, #1
   11df4:	mov	r1, #0
   11df8:	bl	10ed0 <error@plt>
   11dfc:	pop	{r4, r5, fp, pc}
   11e00:	movw	r1, #22928	; 0x5990
   11e04:	movt	r1, #1
   11e08:	b	11de0 <__assert_fail@plt+0xdc0>
   11e0c:	movw	r1, #22949	; 0x59a5
   11e10:	movt	r1, #1
   11e14:	b	11de0 <__assert_fail@plt+0xdc0>
   11e18:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11e1c:	add	fp, sp, #24
   11e20:	mov	r8, r1
   11e24:	mov	r9, r0
   11e28:	mov	r0, #0
   11e2c:	strb	r0, [r3]
   11e30:	movw	r0, #24960	; 0x6180
   11e34:	movt	r0, #2
   11e38:	ldrd	r6, [r0]
   11e3c:	orrs	r0, r6, r7
   11e40:	bne	11ea8 <__assert_fail@plt+0xe88>
   11e44:	movw	r7, #24928	; 0x6160
   11e48:	movt	r7, #2
   11e4c:	ldr	r0, [r7]
   11e50:	ldr	r1, [r2]
   11e54:	cmp	r1, r0
   11e58:	bcs	11e94 <__assert_fail@plt+0xe74>
   11e5c:	movw	r0, #24932	; 0x6164
   11e60:	movt	r0, #2
   11e64:	ldr	r0, [r0]
   11e68:	add	r4, r0, r1, lsl #3
   11e6c:	ldr	r0, [r7]
   11e70:	ldrd	r6, [r4]
   11e74:	subs	r5, r9, r6
   11e78:	sbcs	r5, r8, r7
   11e7c:	bcc	11ecc <__assert_fail@plt+0xeac>
   11e80:	add	r1, r1, #1
   11e84:	str	r1, [r2]
   11e88:	add	r4, r4, #8
   11e8c:	cmp	r1, r0
   11e90:	bcc	11e70 <__assert_fail@plt+0xe50>
   11e94:	movw	r1, #24944	; 0x6170
   11e98:	movt	r1, #2
   11e9c:	ldrd	r6, [r1]
   11ea0:	orrs	r1, r6, r7
   11ea4:	beq	11ed8 <__assert_fail@plt+0xeb8>
   11ea8:	mov	r0, r9
   11eac:	mov	r1, r8
   11eb0:	mov	r2, r6
   11eb4:	mov	r3, r7
   11eb8:	bl	15054 <__assert_fail@plt+0x4034>
   11ebc:	adds	r0, r6, r9
   11ec0:	adc	r1, r7, r8
   11ec4:	subs	r6, r0, r2
   11ec8:	sbc	r7, r1, r3
   11ecc:	mov	r0, r6
   11ed0:	mov	r1, r7
   11ed4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11ed8:	movw	r1, #24952	; 0x6178
   11edc:	movt	r1, #2
   11ee0:	ldrd	r6, [r1]
   11ee4:	orrs	r1, r6, r7
   11ee8:	beq	11f0c <__assert_fail@plt+0xeec>
   11eec:	movw	r1, #24932	; 0x6164
   11ef0:	movt	r1, #2
   11ef4:	ldr	r1, [r1]
   11ef8:	add	r0, r1, r0, lsl #3
   11efc:	ldrd	r0, [r0, #-8]
   11f00:	subs	r0, r9, r0
   11f04:	sbc	r1, r8, r1
   11f08:	b	11eb0 <__assert_fail@plt+0xe90>
   11f0c:	mov	r0, #1
   11f10:	strb	r0, [r3]
   11f14:	mov	r6, #0
   11f18:	mov	r7, #0
   11f1c:	b	11ecc <__assert_fail@plt+0xeac>
   11f20:	movw	r1, #24968	; 0x6188
   11f24:	movt	r1, #2
   11f28:	mov	r2, #0
   11f2c:	strb	r2, [r1]
   11f30:	movw	r1, #24800	; 0x60e0
   11f34:	movt	r1, #2
   11f38:	cmp	r0, #0
   11f3c:	movne	r1, r0
   11f40:	movw	r0, #24972	; 0x618c
   11f44:	movt	r0, #2
   11f48:	str	r1, [r0]
   11f4c:	bx	lr
   11f50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f54:	add	fp, sp, #28
   11f58:	sub	sp, sp, #4
   11f5c:	cmp	r0, #0
   11f60:	beq	12000 <__assert_fail@plt+0xfe0>
   11f64:	mov	r5, r0
   11f68:	movw	r7, #24976	; 0x6190
   11f6c:	movt	r7, #2
   11f70:	ldr	r0, [r7]
   11f74:	cmp	r0, #0
   11f78:	beq	12120 <__assert_fail@plt+0x1100>
   11f7c:	bl	10f48 <__errno_location@plt>
   11f80:	mov	r6, r0
   11f84:	ldr	r4, [r0]
   11f88:	mov	r0, r5
   11f8c:	bl	10eb8 <ferror_unlocked@plt>
   11f90:	cmp	r0, #0
   11f94:	moveq	r4, r0
   11f98:	ldr	r0, [r7]
   11f9c:	movw	r1, #23110	; 0x5a46
   11fa0:	movt	r1, #1
   11fa4:	bl	10df8 <strcmp@plt>
   11fa8:	cmp	r0, #0
   11fac:	beq	1210c <__assert_fail@plt+0x10ec>
   11fb0:	mov	r0, r5
   11fb4:	bl	12324 <__assert_fail@plt+0x1304>
   11fb8:	cmp	r0, #0
   11fbc:	ldrne	r4, [r6]
   11fc0:	cmp	r4, #0
   11fc4:	beq	12000 <__assert_fail@plt+0xfe0>
   11fc8:	ldr	r2, [r7]
   11fcc:	mov	r0, #0
   11fd0:	mov	r1, #3
   11fd4:	bl	13bb0 <__assert_fail@plt+0x2b90>
   11fd8:	mov	r3, r0
   11fdc:	movw	r2, #22349	; 0x574d
   11fe0:	movt	r2, #1
   11fe4:	mov	r0, #0
   11fe8:	mov	r1, r4
   11fec:	bl	10ed0 <error@plt>
   11ff0:	mov	r0, #1
   11ff4:	movw	r1, #24924	; 0x615c
   11ff8:	movt	r1, #2
   11ffc:	str	r0, [r1]
   12000:	movw	sl, #24972	; 0x618c
   12004:	movt	sl, #2
   12008:	ldr	r0, [sl]
   1200c:	add	r1, r0, #4
   12010:	str	r1, [sl]
   12014:	ldr	r7, [r0]
   12018:	cmp	r7, #0
   1201c:	beq	120e0 <__assert_fail@plt+0x10c0>
   12020:	movw	r9, #23110	; 0x5a46
   12024:	movt	r9, #1
   12028:	mov	r8, #1
   1202c:	movw	r5, #22349	; 0x574d
   12030:	movt	r5, #1
   12034:	mov	r0, r7
   12038:	mov	r1, r9
   1203c:	bl	10df8 <strcmp@plt>
   12040:	cmp	r0, #0
   12044:	beq	12068 <__assert_fail@plt+0x1048>
   12048:	mov	r0, r7
   1204c:	movw	r1, #21987	; 0x55e3
   12050:	movt	r1, #1
   12054:	bl	10fd8 <fopen64@plt>
   12058:	mov	r6, r0
   1205c:	cmp	r6, #0
   12060:	beq	12088 <__assert_fail@plt+0x1068>
   12064:	b	120e8 <__assert_fail@plt+0x10c8>
   12068:	movw	r0, #24968	; 0x6188
   1206c:	movt	r0, #2
   12070:	strb	r8, [r0]
   12074:	movw	r0, #24904	; 0x6148
   12078:	movt	r0, #2
   1207c:	ldr	r6, [r0]
   12080:	cmp	r6, #0
   12084:	bne	120e8 <__assert_fail@plt+0x10c8>
   12088:	bl	10f48 <__errno_location@plt>
   1208c:	ldr	r4, [r0]
   12090:	mov	r6, #0
   12094:	mov	r0, #0
   12098:	mov	r1, #3
   1209c:	mov	r2, r7
   120a0:	bl	13bb0 <__assert_fail@plt+0x2b90>
   120a4:	mov	r3, r0
   120a8:	mov	r0, #0
   120ac:	mov	r1, r4
   120b0:	mov	r2, r5
   120b4:	bl	10ed0 <error@plt>
   120b8:	movw	r0, #24924	; 0x615c
   120bc:	movt	r0, #2
   120c0:	str	r8, [r0]
   120c4:	ldr	r0, [sl]
   120c8:	add	r1, r0, #4
   120cc:	str	r1, [sl]
   120d0:	ldr	r7, [r0]
   120d4:	cmp	r7, #0
   120d8:	bne	12034 <__assert_fail@plt+0x1014>
   120dc:	b	12100 <__assert_fail@plt+0x10e0>
   120e0:	mov	r6, #0
   120e4:	b	12100 <__assert_fail@plt+0x10e0>
   120e8:	movw	r0, #24976	; 0x6190
   120ec:	movt	r0, #2
   120f0:	str	r7, [r0]
   120f4:	mov	r0, r6
   120f8:	mov	r1, #2
   120fc:	bl	122e8 <__assert_fail@plt+0x12c8>
   12100:	mov	r0, r6
   12104:	sub	sp, fp, #28
   12108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1210c:	mov	r0, r5
   12110:	bl	10fcc <clearerr_unlocked@plt>
   12114:	cmp	r4, #0
   12118:	bne	11fc8 <__assert_fail@plt+0xfa8>
   1211c:	b	12000 <__assert_fail@plt+0xfe0>
   12120:	movw	r0, #22352	; 0x5750
   12124:	movt	r0, #1
   12128:	movw	r1, #22362	; 0x575a
   1212c:	movt	r1, #1
   12130:	movw	r3, #22382	; 0x576e
   12134:	movt	r3, #1
   12138:	mov	r2, #340	; 0x154
   1213c:	bl	11020 <__assert_fail@plt>
   12140:	push	{fp, lr}
   12144:	mov	fp, sp
   12148:	movw	r0, #24968	; 0x6188
   1214c:	movt	r0, #2
   12150:	ldrb	r0, [r0]
   12154:	cmp	r0, #1
   12158:	popne	{fp, pc}
   1215c:	movw	r0, #24904	; 0x6148
   12160:	movt	r0, #2
   12164:	ldr	r0, [r0]
   12168:	bl	12324 <__assert_fail@plt+0x1304>
   1216c:	cmp	r0, #0
   12170:	bne	12178 <__assert_fail@plt+0x1158>
   12174:	pop	{fp, pc}
   12178:	bl	10f48 <__errno_location@plt>
   1217c:	ldr	r1, [r0]
   12180:	movw	r2, #23110	; 0x5a46
   12184:	movt	r2, #1
   12188:	mov	r0, #1
   1218c:	bl	10ed0 <error@plt>
   12190:	push	{r4, sl, fp, lr}
   12194:	add	fp, sp, #8
   12198:	movw	r1, #22406	; 0x5786
   1219c:	movt	r1, #1
   121a0:	mov	r0, #0
   121a4:	mov	r2, #5
   121a8:	bl	10e58 <dcgettext@plt>
   121ac:	movw	r4, #24908	; 0x614c
   121b0:	movt	r4, #2
   121b4:	ldr	r1, [r4]
   121b8:	bl	10de0 <fputs_unlocked@plt>
   121bc:	movw	r1, #22469	; 0x57c5
   121c0:	movt	r1, #1
   121c4:	mov	r0, #0
   121c8:	mov	r2, #5
   121cc:	bl	10e58 <dcgettext@plt>
   121d0:	ldr	r1, [r4]
   121d4:	pop	{r4, sl, fp, lr}
   121d8:	b	10de0 <fputs_unlocked@plt>
   121dc:	movw	r1, #24980	; 0x6194
   121e0:	movt	r1, #2
   121e4:	str	r0, [r1]
   121e8:	bx	lr
   121ec:	movw	r1, #24984	; 0x6198
   121f0:	movt	r1, #2
   121f4:	strb	r0, [r1]
   121f8:	bx	lr
   121fc:	push	{r4, r5, r6, sl, fp, lr}
   12200:	add	fp, sp, #16
   12204:	sub	sp, sp, #8
   12208:	movw	r0, #24908	; 0x614c
   1220c:	movt	r0, #2
   12210:	ldr	r0, [r0]
   12214:	bl	14d98 <__assert_fail@plt+0x3d78>
   12218:	cmp	r0, #0
   1221c:	beq	12244 <__assert_fail@plt+0x1224>
   12220:	movw	r0, #24984	; 0x6198
   12224:	movt	r0, #2
   12228:	ldrb	r0, [r0]
   1222c:	cmp	r0, #0
   12230:	beq	12264 <__assert_fail@plt+0x1244>
   12234:	bl	10f48 <__errno_location@plt>
   12238:	ldr	r0, [r0]
   1223c:	cmp	r0, #32
   12240:	bne	12264 <__assert_fail@plt+0x1244>
   12244:	movw	r0, #24896	; 0x6140
   12248:	movt	r0, #2
   1224c:	ldr	r0, [r0]
   12250:	bl	14d98 <__assert_fail@plt+0x3d78>
   12254:	cmp	r0, #0
   12258:	subeq	sp, fp, #16
   1225c:	popeq	{r4, r5, r6, sl, fp, pc}
   12260:	b	122d4 <__assert_fail@plt+0x12b4>
   12264:	movw	r1, #21977	; 0x55d9
   12268:	movt	r1, #1
   1226c:	mov	r0, #0
   12270:	mov	r2, #5
   12274:	bl	10e58 <dcgettext@plt>
   12278:	mov	r4, r0
   1227c:	movw	r0, #24980	; 0x6194
   12280:	movt	r0, #2
   12284:	ldr	r6, [r0]
   12288:	bl	10f48 <__errno_location@plt>
   1228c:	ldr	r5, [r0]
   12290:	cmp	r6, #0
   12294:	bne	122b0 <__assert_fail@plt+0x1290>
   12298:	movw	r2, #22349	; 0x574d
   1229c:	movt	r2, #1
   122a0:	mov	r0, #0
   122a4:	mov	r1, r5
   122a8:	mov	r3, r4
   122ac:	b	122d0 <__assert_fail@plt+0x12b0>
   122b0:	mov	r0, r6
   122b4:	bl	13ba0 <__assert_fail@plt+0x2b80>
   122b8:	mov	r3, r0
   122bc:	str	r4, [sp]
   122c0:	movw	r2, #23037	; 0x59fd
   122c4:	movt	r2, #1
   122c8:	mov	r0, #0
   122cc:	mov	r1, r5
   122d0:	bl	10ed0 <error@plt>
   122d4:	movw	r0, #24812	; 0x60ec
   122d8:	movt	r0, #2
   122dc:	ldr	r0, [r0]
   122e0:	bl	10e28 <_exit@plt>
   122e4:	b	10e04 <posix_fadvise64@plt>
   122e8:	cmp	r0, #0
   122ec:	bxeq	lr
   122f0:	push	{r4, sl, fp, lr}
   122f4:	add	fp, sp, #8
   122f8:	sub	sp, sp, #16
   122fc:	mov	r4, r1
   12300:	bl	10f78 <fileno@plt>
   12304:	mov	r1, #0
   12308:	str	r1, [sp]
   1230c:	stmib	sp, {r1, r4}
   12310:	mov	r2, #0
   12314:	mov	r3, #0
   12318:	bl	122e4 <__assert_fail@plt+0x12c4>
   1231c:	sub	sp, fp, #8
   12320:	pop	{r4, sl, fp, pc}
   12324:	push	{r4, r5, fp, lr}
   12328:	add	fp, sp, #8
   1232c:	sub	sp, sp, #8
   12330:	mov	r4, r0
   12334:	bl	10f78 <fileno@plt>
   12338:	cmn	r0, #1
   1233c:	ble	123b4 <__assert_fail@plt+0x1394>
   12340:	mov	r0, r4
   12344:	bl	10ef4 <__freading@plt>
   12348:	cmp	r0, #0
   1234c:	beq	12378 <__assert_fail@plt+0x1358>
   12350:	mov	r0, r4
   12354:	bl	10f78 <fileno@plt>
   12358:	mov	r1, #1
   1235c:	str	r1, [sp]
   12360:	mov	r2, #0
   12364:	mov	r3, #0
   12368:	bl	10e94 <lseek64@plt>
   1236c:	and	r0, r0, r1
   12370:	cmn	r0, #1
   12374:	beq	123b4 <__assert_fail@plt+0x1394>
   12378:	mov	r0, r4
   1237c:	bl	123c4 <__assert_fail@plt+0x13a4>
   12380:	cmp	r0, #0
   12384:	beq	123b4 <__assert_fail@plt+0x1394>
   12388:	bl	10f48 <__errno_location@plt>
   1238c:	ldr	r5, [r0]
   12390:	mov	r0, r4
   12394:	bl	10f90 <fclose@plt>
   12398:	cmp	r5, #0
   1239c:	beq	123ac <__assert_fail@plt+0x138c>
   123a0:	bl	10f48 <__errno_location@plt>
   123a4:	str	r5, [r0]
   123a8:	mvn	r0, #0
   123ac:	sub	sp, fp, #8
   123b0:	pop	{r4, r5, fp, pc}
   123b4:	mov	r0, r4
   123b8:	sub	sp, fp, #8
   123bc:	pop	{r4, r5, fp, lr}
   123c0:	b	10f90 <fclose@plt>
   123c4:	push	{r4, sl, fp, lr}
   123c8:	add	fp, sp, #8
   123cc:	mov	r4, r0
   123d0:	cmp	r0, #0
   123d4:	beq	123ec <__assert_fail@plt+0x13cc>
   123d8:	mov	r0, r4
   123dc:	bl	10ef4 <__freading@plt>
   123e0:	cmp	r0, #0
   123e4:	movne	r0, r4
   123e8:	blne	123f8 <__assert_fail@plt+0x13d8>
   123ec:	mov	r0, r4
   123f0:	pop	{r4, sl, fp, lr}
   123f4:	b	10e10 <fflush@plt>
   123f8:	push	{fp, lr}
   123fc:	mov	fp, sp
   12400:	sub	sp, sp, #8
   12404:	ldrb	r1, [r0, #1]
   12408:	tst	r1, #1
   1240c:	beq	12424 <__assert_fail@plt+0x1404>
   12410:	mov	r1, #1
   12414:	str	r1, [sp]
   12418:	mov	r2, #0
   1241c:	mov	r3, #0
   12420:	bl	12454 <__assert_fail@plt+0x1434>
   12424:	mov	sp, fp
   12428:	pop	{fp, pc}
   1242c:	push	{r4, r5, r6, sl, fp, lr}
   12430:	add	fp, sp, #16
   12434:	mov	r4, r0
   12438:	bl	10f48 <__errno_location@plt>
   1243c:	mov	r5, r0
   12440:	ldr	r6, [r0]
   12444:	mov	r0, r4
   12448:	bl	10e1c <free@plt>
   1244c:	str	r6, [r5]
   12450:	pop	{r4, r5, r6, sl, fp, pc}
   12454:	push	{r4, r5, r6, r7, fp, lr}
   12458:	add	fp, sp, #16
   1245c:	sub	sp, sp, #8
   12460:	mov	r5, r3
   12464:	mov	r6, r2
   12468:	mov	r4, r0
   1246c:	ldr	r0, [r0, #4]
   12470:	ldr	r1, [r4, #8]
   12474:	cmp	r1, r0
   12478:	bne	12494 <__assert_fail@plt+0x1474>
   1247c:	ldrd	r0, [r4, #16]
   12480:	cmp	r1, r0
   12484:	bne	12494 <__assert_fail@plt+0x1474>
   12488:	ldr	r0, [r4, #36]	; 0x24
   1248c:	cmp	r0, #0
   12490:	beq	124ac <__assert_fail@plt+0x148c>
   12494:	mov	r0, r4
   12498:	mov	r2, r6
   1249c:	mov	r3, r5
   124a0:	sub	sp, fp, #16
   124a4:	pop	{r4, r5, r6, r7, fp, lr}
   124a8:	b	10f9c <fseeko64@plt>
   124ac:	ldr	r7, [fp, #8]
   124b0:	mov	r0, r4
   124b4:	bl	10f78 <fileno@plt>
   124b8:	str	r7, [sp]
   124bc:	mov	r2, r6
   124c0:	mov	r3, r5
   124c4:	bl	10e94 <lseek64@plt>
   124c8:	and	r2, r0, r1
   124cc:	cmn	r2, #1
   124d0:	beq	124f0 <__assert_fail@plt+0x14d0>
   124d4:	strd	r0, [r4, #80]	; 0x50
   124d8:	ldr	r0, [r4]
   124dc:	bic	r0, r0, #16
   124e0:	str	r0, [r4]
   124e4:	mov	r0, #0
   124e8:	sub	sp, fp, #16
   124ec:	pop	{r4, r5, r6, r7, fp, pc}
   124f0:	mvn	r0, #0
   124f4:	sub	sp, fp, #16
   124f8:	pop	{r4, r5, r6, r7, fp, pc}
   124fc:	push	{r4, r5, fp, lr}
   12500:	add	fp, sp, #8
   12504:	cmp	r0, #0
   12508:	beq	1259c <__assert_fail@plt+0x157c>
   1250c:	mov	r4, r0
   12510:	mov	r1, #47	; 0x2f
   12514:	bl	10fb4 <strrchr@plt>
   12518:	cmp	r0, #0
   1251c:	mov	r5, r4
   12520:	addne	r5, r0, #1
   12524:	sub	r0, r5, r4
   12528:	cmp	r0, #7
   1252c:	blt	12580 <__assert_fail@plt+0x1560>
   12530:	sub	r0, r5, #7
   12534:	movw	r1, #23100	; 0x5a3c
   12538:	movt	r1, #1
   1253c:	mov	r2, #7
   12540:	bl	10ff0 <strncmp@plt>
   12544:	cmp	r0, #0
   12548:	bne	12580 <__assert_fail@plt+0x1560>
   1254c:	movw	r1, #23108	; 0x5a44
   12550:	movt	r1, #1
   12554:	mov	r0, r5
   12558:	mov	r2, #3
   1255c:	bl	10ff0 <strncmp@plt>
   12560:	cmp	r0, #0
   12564:	beq	12570 <__assert_fail@plt+0x1550>
   12568:	mov	r4, r5
   1256c:	b	12580 <__assert_fail@plt+0x1560>
   12570:	add	r4, r5, #3
   12574:	movw	r0, #24880	; 0x6130
   12578:	movt	r0, #2
   1257c:	str	r4, [r0]
   12580:	movw	r0, #24884	; 0x6134
   12584:	movt	r0, #2
   12588:	str	r4, [r0]
   1258c:	movw	r0, #24988	; 0x619c
   12590:	movt	r0, #2
   12594:	str	r4, [r0]
   12598:	pop	{r4, r5, fp, pc}
   1259c:	movw	r0, #24896	; 0x6140
   125a0:	movt	r0, #2
   125a4:	ldr	r3, [r0]
   125a8:	movw	r0, #23044	; 0x5a04
   125ac:	movt	r0, #1
   125b0:	mov	r1, #55	; 0x37
   125b4:	mov	r2, #1
   125b8:	bl	10e88 <fwrite@plt>
   125bc:	bl	10ffc <abort@plt>
   125c0:	push	{r4, r5, r6, sl, fp, lr}
   125c4:	add	fp, sp, #16
   125c8:	mov	r4, r0
   125cc:	movw	r0, #24992	; 0x61a0
   125d0:	movt	r0, #2
   125d4:	cmp	r4, #0
   125d8:	moveq	r4, r0
   125dc:	bl	10f48 <__errno_location@plt>
   125e0:	mov	r5, r0
   125e4:	ldr	r6, [r0]
   125e8:	mov	r0, r4
   125ec:	mov	r1, #48	; 0x30
   125f0:	bl	148b8 <__assert_fail@plt+0x3898>
   125f4:	str	r6, [r5]
   125f8:	pop	{r4, r5, r6, sl, fp, pc}
   125fc:	movw	r1, #24992	; 0x61a0
   12600:	movt	r1, #2
   12604:	cmp	r0, #0
   12608:	movne	r1, r0
   1260c:	ldr	r0, [r1]
   12610:	bx	lr
   12614:	movw	r2, #24992	; 0x61a0
   12618:	movt	r2, #2
   1261c:	cmp	r0, #0
   12620:	movne	r2, r0
   12624:	str	r1, [r2]
   12628:	bx	lr
   1262c:	movw	r3, #24992	; 0x61a0
   12630:	movt	r3, #2
   12634:	cmp	r0, #0
   12638:	movne	r3, r0
   1263c:	ubfx	r0, r1, #5, #3
   12640:	add	ip, r3, r0, lsl #2
   12644:	ldr	r3, [ip, #8]
   12648:	and	r1, r1, #31
   1264c:	mov	r0, #1
   12650:	and	r0, r0, r3, lsr r1
   12654:	and	r2, r2, #1
   12658:	eor	r2, r0, r2
   1265c:	eor	r1, r3, r2, lsl r1
   12660:	str	r1, [ip, #8]
   12664:	bx	lr
   12668:	movw	r2, #24992	; 0x61a0
   1266c:	movt	r2, #2
   12670:	cmp	r0, #0
   12674:	movne	r2, r0
   12678:	ldr	r0, [r2, #4]
   1267c:	str	r1, [r2, #4]
   12680:	bx	lr
   12684:	push	{fp, lr}
   12688:	mov	fp, sp
   1268c:	movw	r3, #24992	; 0x61a0
   12690:	movt	r3, #2
   12694:	cmp	r0, #0
   12698:	movne	r3, r0
   1269c:	mov	r0, #10
   126a0:	str	r0, [r3]
   126a4:	cmp	r1, #0
   126a8:	cmpne	r2, #0
   126ac:	bne	126b4 <__assert_fail@plt+0x1694>
   126b0:	bl	10ffc <abort@plt>
   126b4:	str	r1, [r3, #40]	; 0x28
   126b8:	str	r2, [r3, #44]	; 0x2c
   126bc:	pop	{fp, pc}
   126c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126c4:	add	fp, sp, #28
   126c8:	sub	sp, sp, #20
   126cc:	mov	r8, r3
   126d0:	mov	r9, r2
   126d4:	mov	sl, r1
   126d8:	mov	r7, r0
   126dc:	ldr	r0, [fp, #8]
   126e0:	movw	r5, #24992	; 0x61a0
   126e4:	movt	r5, #2
   126e8:	cmp	r0, #0
   126ec:	movne	r5, r0
   126f0:	bl	10f48 <__errno_location@plt>
   126f4:	mov	r4, r0
   126f8:	ldm	r5, {r0, r1}
   126fc:	ldr	r2, [r5, #40]	; 0x28
   12700:	ldr	r3, [r5, #44]	; 0x2c
   12704:	ldr	r6, [r4]
   12708:	add	r5, r5, #8
   1270c:	stm	sp, {r0, r1, r5}
   12710:	str	r2, [sp, #12]
   12714:	str	r3, [sp, #16]
   12718:	mov	r0, r7
   1271c:	mov	r1, sl
   12720:	mov	r2, r9
   12724:	mov	r3, r8
   12728:	bl	12738 <__assert_fail@plt+0x1718>
   1272c:	str	r6, [r4]
   12730:	sub	sp, fp, #28
   12734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1273c:	add	fp, sp, #28
   12740:	sub	sp, sp, #156	; 0x9c
   12744:	mov	r9, r3
   12748:	mov	r7, r1
   1274c:	mov	r6, r0
   12750:	str	r2, [fp, #-80]	; 0xffffffb0
   12754:	add	r0, r2, #1
   12758:	str	r0, [sp, #76]	; 0x4c
   1275c:	ldr	r0, [fp, #12]
   12760:	and	r1, r0, #1
   12764:	str	r1, [sp, #40]	; 0x28
   12768:	and	r1, r0, #4
   1276c:	str	r1, [sp, #36]	; 0x24
   12770:	ubfx	r4, r0, #1, #1
   12774:	bl	10ea0 <__ctype_get_mb_cur_max@plt>
   12778:	str	r0, [sp, #44]	; 0x2c
   1277c:	ldr	r0, [fp, #24]
   12780:	str	r0, [sp, #88]	; 0x58
   12784:	ldr	r0, [fp, #20]
   12788:	str	r0, [sp, #80]	; 0x50
   1278c:	ldr	r1, [fp, #8]
   12790:	mov	r0, #0
   12794:	str	r0, [sp, #84]	; 0x54
   12798:	mov	r0, #0
   1279c:	str	r0, [fp, #-84]	; 0xffffffac
   127a0:	mov	r0, #0
   127a4:	str	r0, [fp, #-72]	; 0xffffffb8
   127a8:	mov	r0, #0
   127ac:	mov	r2, #0
   127b0:	str	r2, [fp, #-56]	; 0xffffffc8
   127b4:	mov	r2, #0
   127b8:	str	r2, [sp, #64]	; 0x40
   127bc:	mov	r2, #1
   127c0:	str	r2, [fp, #-48]	; 0xffffffd0
   127c4:	cmp	r1, #10
   127c8:	bhi	136f4 <__assert_fail@plt+0x26d4>
   127cc:	mov	sl, r7
   127d0:	mov	r7, r1
   127d4:	add	r1, pc, #24
   127d8:	mov	r8, #0
   127dc:	mov	r2, #1
   127e0:	mov	r3, #0
   127e4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   127e8:	mov	lr, r9
   127ec:	mov	r5, r6
   127f0:	ldr	pc, [r1, r7, lsl #2]
   127f4:	andeq	r2, r1, r8, asr #17
   127f8:	andeq	r2, r1, r8, lsl #18
   127fc:	ldrdeq	r2, [r1], -r8
   12800:	andeq	r2, r1, r0, asr #17
   12804:	strdeq	r2, [r1], -ip
   12808:	andeq	r2, r1, ip, asr r9
   1280c:	andeq	r2, r1, r8, ror #17
   12810:			; <UNDEFINED> instruction: 0x000129b8
   12814:	andeq	r2, r1, r0, lsr #16
   12818:	andeq	r2, r1, r0, lsr #16
   1281c:	andeq	r2, r1, ip, asr #16
   12820:	movw	r0, #23190	; 0x5a96
   12824:	movt	r0, #1
   12828:	mov	r1, r7
   1282c:	bl	13cfc <__assert_fail@plt+0x2cdc>
   12830:	str	r0, [sp, #80]	; 0x50
   12834:	movw	r0, #23020	; 0x59ec
   12838:	movt	r0, #1
   1283c:	mov	r1, r7
   12840:	bl	13cfc <__assert_fail@plt+0x2cdc>
   12844:	mov	r5, r6
   12848:	str	r0, [sp, #88]	; 0x58
   1284c:	mov	r8, #0
   12850:	tst	r4, #1
   12854:	str	r7, [fp, #-64]	; 0xffffffc0
   12858:	bne	12890 <__assert_fail@plt+0x1870>
   1285c:	ldr	r0, [sp, #80]	; 0x50
   12860:	ldrb	r0, [r0]
   12864:	cmp	r0, #0
   12868:	beq	12890 <__assert_fail@plt+0x1870>
   1286c:	ldr	r1, [sp, #80]	; 0x50
   12870:	add	r1, r1, #1
   12874:	mov	r8, #0
   12878:	cmp	r8, sl
   1287c:	strbcc	r0, [r5, r8]
   12880:	ldrb	r0, [r1, r8]
   12884:	add	r8, r8, #1
   12888:	cmp	r0, #0
   1288c:	bne	12878 <__assert_fail@plt+0x1858>
   12890:	ldr	r7, [sp, #88]	; 0x58
   12894:	mov	r0, r7
   12898:	bl	10f3c <strlen@plt>
   1289c:	mov	r5, r6
   128a0:	str	r0, [fp, #-72]	; 0xffffffb8
   128a4:	str	r7, [fp, #-84]	; 0xffffffac
   128a8:	mov	r2, #1
   128ac:	mov	r3, r4
   128b0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   128b4:	mov	lr, r9
   128b8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   128bc:	b	129b8 <__assert_fail@plt+0x1998>
   128c0:	mov	r0, #1
   128c4:	b	12908 <__assert_fail@plt+0x18e8>
   128c8:	mov	r7, #0
   128cc:	mov	r8, #0
   128d0:	mov	r2, r0
   128d4:	b	129b4 <__assert_fail@plt+0x1994>
   128d8:	tst	r4, #1
   128dc:	bne	12908 <__assert_fail@plt+0x18e8>
   128e0:	mov	r2, r0
   128e4:	b	12930 <__assert_fail@plt+0x1910>
   128e8:	mov	r0, #1
   128ec:	str	r0, [fp, #-72]	; 0xffffffb8
   128f0:	mov	r8, #0
   128f4:	mov	r7, #5
   128f8:	b	12974 <__assert_fail@plt+0x1954>
   128fc:	mov	r2, #1
   12900:	tst	r4, #1
   12904:	beq	12930 <__assert_fail@plt+0x1910>
   12908:	mov	r1, #1
   1290c:	str	r1, [fp, #-72]	; 0xffffffb8
   12910:	mov	r8, #0
   12914:	mov	r7, #2
   12918:	movw	r1, #23020	; 0x59ec
   1291c:	movt	r1, #1
   12920:	str	r1, [fp, #-84]	; 0xffffffac
   12924:	mov	r2, r0
   12928:	mov	r3, #1
   1292c:	b	129b8 <__assert_fail@plt+0x1998>
   12930:	mov	r8, #1
   12934:	mov	r7, #2
   12938:	cmp	sl, #0
   1293c:	movne	r0, #39	; 0x27
   12940:	strbne	r0, [r5]
   12944:	movw	r0, #23020	; 0x59ec
   12948:	movt	r0, #1
   1294c:	str	r0, [fp, #-84]	; 0xffffffac
   12950:	mov	r0, #1
   12954:	str	r0, [fp, #-72]	; 0xffffffb8
   12958:	b	129b4 <__assert_fail@plt+0x1994>
   1295c:	mov	r7, #5
   12960:	tst	r4, #1
   12964:	beq	1298c <__assert_fail@plt+0x196c>
   12968:	mov	r0, #1
   1296c:	str	r0, [fp, #-72]	; 0xffffffb8
   12970:	mov	r8, #0
   12974:	movw	r0, #23188	; 0x5a94
   12978:	movt	r0, #1
   1297c:	str	r0, [fp, #-84]	; 0xffffffac
   12980:	mov	r2, #1
   12984:	mov	r3, #1
   12988:	b	129b8 <__assert_fail@plt+0x1998>
   1298c:	cmp	sl, #0
   12990:	movne	r0, #34	; 0x22
   12994:	strbne	r0, [r5]
   12998:	mov	r8, #1
   1299c:	movw	r0, #23188	; 0x5a94
   129a0:	movt	r0, #1
   129a4:	str	r0, [fp, #-84]	; 0xffffffac
   129a8:	mov	r0, #1
   129ac:	str	r0, [fp, #-72]	; 0xffffffb8
   129b0:	mov	r2, #1
   129b4:	mov	r3, #0
   129b8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   129bc:	cmp	r0, #0
   129c0:	movwne	r0, #1
   129c4:	and	r1, r0, r3
   129c8:	and	r1, r2, r1
   129cc:	str	r1, [sp, #56]	; 0x38
   129d0:	sub	r1, r7, #2
   129d4:	clz	r1, r1
   129d8:	lsr	r1, r1, #5
   129dc:	and	r1, r1, r3
   129e0:	str	r1, [sp, #68]	; 0x44
   129e4:	str	r7, [fp, #-64]	; 0xffffffc0
   129e8:	subs	r1, r7, #2
   129ec:	movwne	r1, #1
   129f0:	eor	r4, r3, #1
   129f4:	str	r4, [fp, #-88]	; 0xffffffa8
   129f8:	orr	r4, r1, r4
   129fc:	str	r4, [sp, #72]	; 0x48
   12a00:	and	r1, r1, r2
   12a04:	and	r0, r0, r1
   12a08:	str	r0, [fp, #-60]	; 0xffffffc4
   12a0c:	str	r3, [fp, #-76]	; 0xffffffb4
   12a10:	orr	r0, r1, r3
   12a14:	eor	r0, r0, #1
   12a18:	ldr	r1, [fp, #16]
   12a1c:	clz	r1, r1
   12a20:	lsr	r1, r1, #5
   12a24:	orr	r0, r1, r0
   12a28:	str	r0, [fp, #-68]	; 0xffffffbc
   12a2c:	str	r2, [sp, #92]	; 0x5c
   12a30:	eor	r0, r2, #1
   12a34:	str	r0, [sp, #60]	; 0x3c
   12a38:	mov	r7, #0
   12a3c:	cmn	lr, #1
   12a40:	beq	12a50 <__assert_fail@plt+0x1a30>
   12a44:	cmp	r7, lr
   12a48:	bne	12a5c <__assert_fail@plt+0x1a3c>
   12a4c:	b	13568 <__assert_fail@plt+0x2548>
   12a50:	ldrb	r0, [ip, r7]
   12a54:	cmp	r0, #0
   12a58:	beq	13568 <__assert_fail@plt+0x2548>
   12a5c:	mov	r9, #0
   12a60:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12a64:	cmp	r0, #0
   12a68:	beq	12a9c <__assert_fail@plt+0x1a7c>
   12a6c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12a70:	add	r4, r7, r0
   12a74:	cmp	r0, #2
   12a78:	bcc	12a94 <__assert_fail@plt+0x1a74>
   12a7c:	cmn	lr, #1
   12a80:	bne	12a94 <__assert_fail@plt+0x1a74>
   12a84:	mov	r0, ip
   12a88:	bl	10f3c <strlen@plt>
   12a8c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12a90:	mov	lr, r0
   12a94:	cmp	r4, lr
   12a98:	bls	12aa8 <__assert_fail@plt+0x1a88>
   12a9c:	mov	r0, #0
   12aa0:	str	r0, [fp, #-52]	; 0xffffffcc
   12aa4:	b	12aec <__assert_fail@plt+0x1acc>
   12aa8:	mov	r4, lr
   12aac:	add	r0, ip, r7
   12ab0:	ldr	r1, [fp, #-84]	; 0xffffffac
   12ab4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12ab8:	bl	10f30 <bcmp@plt>
   12abc:	cmp	r0, #0
   12ac0:	mov	r1, r0
   12ac4:	movwne	r1, #1
   12ac8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12acc:	orr	r1, r1, r2
   12ad0:	tst	r1, #1
   12ad4:	beq	1363c <__assert_fail@plt+0x261c>
   12ad8:	clz	r0, r0
   12adc:	lsr	r0, r0, #5
   12ae0:	str	r0, [fp, #-52]	; 0xffffffcc
   12ae4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12ae8:	mov	lr, r4
   12aec:	ldrb	r4, [ip, r7]
   12af0:	cmp	r4, #126	; 0x7e
   12af4:	bhi	13024 <__assert_fail@plt+0x2004>
   12af8:	mov	r6, #1
   12afc:	mov	r2, #110	; 0x6e
   12b00:	mov	r0, #97	; 0x61
   12b04:	add	r3, pc, #4
   12b08:	mov	r1, #0
   12b0c:	ldr	pc, [r3, r4, lsl #2]
   12b10:	andeq	r2, r1, r4, lsl #29
   12b14:	andeq	r3, r1, r4, lsr #32
   12b18:	andeq	r3, r1, r4, lsr #32
   12b1c:	andeq	r3, r1, r4, lsr #32
   12b20:	andeq	r3, r1, r4, lsr #32
   12b24:	andeq	r3, r1, r4, lsr #32
   12b28:	andeq	r3, r1, r4, lsr #32
   12b2c:	strdeq	r3, [r1], -r8
   12b30:	andeq	r2, r1, r4, ror #28
   12b34:	andeq	r2, r1, ip, asr lr
   12b38:	andeq	r2, r1, r0, ror lr
   12b3c:	andeq	r2, r1, ip, lsl #31
   12b40:	andeq	r2, r1, r4, asr lr
   12b44:	andeq	r2, r1, ip, ror #28
   12b48:	andeq	r3, r1, r4, lsr #32
   12b4c:	andeq	r3, r1, r4, lsr #32
   12b50:	andeq	r3, r1, r4, lsr #32
   12b54:	andeq	r3, r1, r4, lsr #32
   12b58:	andeq	r3, r1, r4, lsr #32
   12b5c:	andeq	r3, r1, r4, lsr #32
   12b60:	andeq	r3, r1, r4, lsr #32
   12b64:	andeq	r3, r1, r4, lsr #32
   12b68:	andeq	r3, r1, r4, lsr #32
   12b6c:	andeq	r3, r1, r4, lsr #32
   12b70:	andeq	r3, r1, r4, lsr #32
   12b74:	andeq	r3, r1, r4, lsr #32
   12b78:	andeq	r3, r1, r4, lsr #32
   12b7c:	andeq	r3, r1, r4, lsr #32
   12b80:	andeq	r3, r1, r4, lsr #32
   12b84:	andeq	r3, r1, r4, lsr #32
   12b88:	andeq	r3, r1, r4, lsr #32
   12b8c:	andeq	r3, r1, r4, lsr #32
   12b90:	andeq	r2, r1, r8, lsl #28
   12b94:	andeq	r2, r1, ip, lsl #28
   12b98:	andeq	r2, r1, ip, lsl #28
   12b9c:	strdeq	r2, [r1], -r4
   12ba0:	andeq	r2, r1, ip, lsl #28
   12ba4:	andeq	r2, r1, ip, lsl #26
   12ba8:	andeq	r2, r1, ip, lsl #28
   12bac:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   12bb0:	andeq	r2, r1, ip, lsl #28
   12bb4:	andeq	r2, r1, ip, lsl #28
   12bb8:	andeq	r2, r1, ip, lsl #28
   12bbc:	andeq	r2, r1, ip, lsl #26
   12bc0:	andeq	r2, r1, ip, lsl #26
   12bc4:	andeq	r2, r1, ip, lsl #26
   12bc8:	andeq	r2, r1, ip, lsl #26
   12bcc:	andeq	r2, r1, ip, lsl #26
   12bd0:	andeq	r2, r1, ip, lsl #26
   12bd4:	andeq	r2, r1, ip, lsl #26
   12bd8:	andeq	r2, r1, ip, lsl #26
   12bdc:	andeq	r2, r1, ip, lsl #26
   12be0:	andeq	r2, r1, ip, lsl #26
   12be4:	andeq	r2, r1, ip, lsl #26
   12be8:	andeq	r2, r1, ip, lsl #26
   12bec:	andeq	r2, r1, ip, lsl #26
   12bf0:	andeq	r2, r1, ip, lsl #26
   12bf4:	andeq	r2, r1, ip, lsl #26
   12bf8:	andeq	r2, r1, ip, lsl #26
   12bfc:	andeq	r2, r1, ip, lsl #28
   12c00:	andeq	r2, r1, ip, lsl #28
   12c04:	andeq	r2, r1, ip, lsl #28
   12c08:	andeq	r2, r1, ip, lsl #28
   12c0c:	andeq	r2, r1, ip, asr pc
   12c10:	andeq	r3, r1, r4, lsr #32
   12c14:	andeq	r2, r1, ip, lsl #26
   12c18:	andeq	r2, r1, ip, lsl #26
   12c1c:	andeq	r2, r1, ip, lsl #26
   12c20:	andeq	r2, r1, ip, lsl #26
   12c24:	andeq	r2, r1, ip, lsl #26
   12c28:	andeq	r2, r1, ip, lsl #26
   12c2c:	andeq	r2, r1, ip, lsl #26
   12c30:	andeq	r2, r1, ip, lsl #26
   12c34:	andeq	r2, r1, ip, lsl #26
   12c38:	andeq	r2, r1, ip, lsl #26
   12c3c:	andeq	r2, r1, ip, lsl #26
   12c40:	andeq	r2, r1, ip, lsl #26
   12c44:	andeq	r2, r1, ip, lsl #26
   12c48:	andeq	r2, r1, ip, lsl #26
   12c4c:	andeq	r2, r1, ip, lsl #26
   12c50:	andeq	r2, r1, ip, lsl #26
   12c54:	andeq	r2, r1, ip, lsl #26
   12c58:	andeq	r2, r1, ip, lsl #26
   12c5c:	andeq	r2, r1, ip, lsl #26
   12c60:	andeq	r2, r1, ip, lsl #26
   12c64:	andeq	r2, r1, ip, lsl #26
   12c68:	andeq	r2, r1, ip, lsl #26
   12c6c:	andeq	r2, r1, ip, lsl #26
   12c70:	andeq	r2, r1, ip, lsl #26
   12c74:	andeq	r2, r1, ip, lsl #26
   12c78:	andeq	r2, r1, ip, lsl #26
   12c7c:	andeq	r2, r1, ip, lsl #28
   12c80:	andeq	r2, r1, r4, lsr lr
   12c84:	andeq	r2, r1, ip, lsl #26
   12c88:	andeq	r2, r1, ip, lsl #28
   12c8c:	andeq	r2, r1, ip, lsl #26
   12c90:	andeq	r2, r1, ip, lsl #28
   12c94:	andeq	r2, r1, ip, lsl #26
   12c98:	andeq	r2, r1, ip, lsl #26
   12c9c:	andeq	r2, r1, ip, lsl #26
   12ca0:	andeq	r2, r1, ip, lsl #26
   12ca4:	andeq	r2, r1, ip, lsl #26
   12ca8:	andeq	r2, r1, ip, lsl #26
   12cac:	andeq	r2, r1, ip, lsl #26
   12cb0:	andeq	r2, r1, ip, lsl #26
   12cb4:	andeq	r2, r1, ip, lsl #26
   12cb8:	andeq	r2, r1, ip, lsl #26
   12cbc:	andeq	r2, r1, ip, lsl #26
   12cc0:	andeq	r2, r1, ip, lsl #26
   12cc4:	andeq	r2, r1, ip, lsl #26
   12cc8:	andeq	r2, r1, ip, lsl #26
   12ccc:	andeq	r2, r1, ip, lsl #26
   12cd0:	andeq	r2, r1, ip, lsl #26
   12cd4:	andeq	r2, r1, ip, lsl #26
   12cd8:	andeq	r2, r1, ip, lsl #26
   12cdc:	andeq	r2, r1, ip, lsl #26
   12ce0:	andeq	r2, r1, ip, lsl #26
   12ce4:	andeq	r2, r1, ip, lsl #26
   12ce8:	andeq	r2, r1, ip, lsl #26
   12cec:	andeq	r2, r1, ip, lsl #26
   12cf0:	andeq	r2, r1, ip, lsl #26
   12cf4:	andeq	r2, r1, ip, lsl #26
   12cf8:	andeq	r2, r1, ip, lsl #26
   12cfc:	andeq	r2, r1, r8, asr #27
   12d00:	andeq	r2, r1, ip, lsl #28
   12d04:	andeq	r2, r1, r8, asr #27
   12d08:	strdeq	r2, [r1], -r4
   12d0c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12d10:	tst	r0, #1
   12d14:	bne	12d40 <__assert_fail@plt+0x1d20>
   12d18:	ubfx	r0, r4, #5, #3
   12d1c:	ldr	r1, [fp, #16]
   12d20:	ldr	r0, [r1, r0, lsl #2]
   12d24:	and	r1, r4, #31
   12d28:	mov	r2, #1
   12d2c:	tst	r0, r2, lsl r1
   12d30:	beq	12d40 <__assert_fail@plt+0x1d20>
   12d34:	mov	r0, r4
   12d38:	mov	r1, r6
   12d3c:	b	12d54 <__assert_fail@plt+0x1d34>
   12d40:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12d44:	cmp	r0, #0
   12d48:	mov	r0, r4
   12d4c:	mov	r1, r6
   12d50:	beq	1308c <__assert_fail@plt+0x206c>
   12d54:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12d58:	tst	r2, #1
   12d5c:	bne	13650 <__assert_fail@plt+0x2630>
   12d60:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12d64:	subs	r2, r2, #2
   12d68:	movwne	r2, #1
   12d6c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12d70:	orr	r2, r2, r3
   12d74:	tst	r2, #1
   12d78:	bne	12db4 <__assert_fail@plt+0x1d94>
   12d7c:	cmp	r8, sl
   12d80:	movcc	r2, #39	; 0x27
   12d84:	strbcc	r2, [r5, r8]
   12d88:	add	r2, r8, #1
   12d8c:	cmp	r2, sl
   12d90:	movcc	r3, #36	; 0x24
   12d94:	strbcc	r3, [r5, r2]
   12d98:	add	r2, r8, #2
   12d9c:	cmp	r2, sl
   12da0:	movcc	r3, #39	; 0x27
   12da4:	strbcc	r3, [r5, r2]
   12da8:	add	r8, r8, #3
   12dac:	mov	r2, #1
   12db0:	str	r2, [fp, #-56]	; 0xffffffc8
   12db4:	cmp	r8, sl
   12db8:	movcc	r2, #92	; 0x5c
   12dbc:	strbcc	r2, [r5, r8]
   12dc0:	add	r8, r8, #1
   12dc4:	b	130d0 <__assert_fail@plt+0x20b0>
   12dc8:	cmp	lr, #1
   12dcc:	beq	12df4 <__assert_fail@plt+0x1dd4>
   12dd0:	mov	r6, #0
   12dd4:	cmn	lr, #1
   12dd8:	bne	12e00 <__assert_fail@plt+0x1de0>
   12ddc:	ldrb	r0, [ip, #1]
   12de0:	cmp	r0, #0
   12de4:	beq	12df4 <__assert_fail@plt+0x1dd4>
   12de8:	mvn	lr, #0
   12dec:	mov	r9, #0
   12df0:	b	12d0c <__assert_fail@plt+0x1cec>
   12df4:	mov	r6, #0
   12df8:	cmp	r7, #0
   12dfc:	beq	12e08 <__assert_fail@plt+0x1de8>
   12e00:	mov	r9, #0
   12e04:	b	12d0c <__assert_fail@plt+0x1cec>
   12e08:	mov	r1, #1
   12e0c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12e10:	cmp	r0, #2
   12e14:	bne	12e2c <__assert_fail@plt+0x1e0c>
   12e18:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12e1c:	tst	r0, #1
   12e20:	mov	r6, r1
   12e24:	beq	12d0c <__assert_fail@plt+0x1cec>
   12e28:	b	13650 <__assert_fail@plt+0x2630>
   12e2c:	mov	r6, r1
   12e30:	b	12d0c <__assert_fail@plt+0x1cec>
   12e34:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12e38:	cmp	r0, #2
   12e3c:	bne	13070 <__assert_fail@plt+0x2050>
   12e40:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12e44:	tst	r0, #1
   12e48:	bne	13650 <__assert_fail@plt+0x2630>
   12e4c:	mov	r9, #0
   12e50:	b	13084 <__assert_fail@plt+0x2064>
   12e54:	mov	r0, #102	; 0x66
   12e58:	b	130f8 <__assert_fail@plt+0x20d8>
   12e5c:	mov	r2, #116	; 0x74
   12e60:	b	12e70 <__assert_fail@plt+0x1e50>
   12e64:	mov	r0, #98	; 0x62
   12e68:	b	130f8 <__assert_fail@plt+0x20d8>
   12e6c:	mov	r2, #114	; 0x72
   12e70:	ldr	r0, [sp, #72]	; 0x48
   12e74:	tst	r0, #1
   12e78:	mov	r0, r2
   12e7c:	bne	130f8 <__assert_fail@plt+0x20d8>
   12e80:	b	13650 <__assert_fail@plt+0x2630>
   12e84:	ldr	r0, [sp, #92]	; 0x5c
   12e88:	tst	r0, #1
   12e8c:	beq	13114 <__assert_fail@plt+0x20f4>
   12e90:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12e94:	tst	r0, #1
   12e98:	bne	13650 <__assert_fail@plt+0x2630>
   12e9c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12ea0:	subs	r0, r0, #2
   12ea4:	movwne	r0, #1
   12ea8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12eac:	orr	r0, r0, r1
   12eb0:	tst	r0, #1
   12eb4:	bne	12ef0 <__assert_fail@plt+0x1ed0>
   12eb8:	cmp	r8, sl
   12ebc:	movcc	r0, #39	; 0x27
   12ec0:	strbcc	r0, [r5, r8]
   12ec4:	add	r0, r8, #1
   12ec8:	cmp	r0, sl
   12ecc:	movcc	r1, #36	; 0x24
   12ed0:	strbcc	r1, [r5, r0]
   12ed4:	add	r0, r8, #2
   12ed8:	cmp	r0, sl
   12edc:	movcc	r1, #39	; 0x27
   12ee0:	strbcc	r1, [r5, r0]
   12ee4:	add	r8, r8, #3
   12ee8:	mov	r0, #1
   12eec:	str	r0, [fp, #-56]	; 0xffffffc8
   12ef0:	cmp	r8, sl
   12ef4:	movcc	r0, #92	; 0x5c
   12ef8:	strbcc	r0, [r5, r8]
   12efc:	add	r0, r8, #1
   12f00:	mov	r6, #0
   12f04:	mov	r9, #1
   12f08:	mov	r4, #48	; 0x30
   12f0c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12f10:	cmp	r1, #2
   12f14:	beq	132d8 <__assert_fail@plt+0x22b8>
   12f18:	add	r1, r7, #1
   12f1c:	cmp	r1, lr
   12f20:	bcs	132d8 <__assert_fail@plt+0x22b8>
   12f24:	ldrb	r1, [ip, r1]
   12f28:	sub	r1, r1, #48	; 0x30
   12f2c:	uxtb	r1, r1
   12f30:	cmp	r1, #9
   12f34:	bhi	132d8 <__assert_fail@plt+0x22b8>
   12f38:	cmp	r0, sl
   12f3c:	movcc	r1, #48	; 0x30
   12f40:	strbcc	r1, [r5, r0]
   12f44:	add	r0, r8, #2
   12f48:	cmp	r0, sl
   12f4c:	movcc	r1, #48	; 0x30
   12f50:	strbcc	r1, [r5, r0]
   12f54:	add	r8, r8, #3
   12f58:	b	12d0c <__assert_fail@plt+0x1cec>
   12f5c:	mov	r9, #0
   12f60:	mov	r4, #63	; 0x3f
   12f64:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12f68:	cmp	r0, #5
   12f6c:	beq	132e0 <__assert_fail@plt+0x22c0>
   12f70:	cmp	r0, #2
   12f74:	bne	13388 <__assert_fail@plt+0x2368>
   12f78:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12f7c:	tst	r0, #1
   12f80:	mov	r6, #0
   12f84:	beq	12d0c <__assert_fail@plt+0x1cec>
   12f88:	b	13650 <__assert_fail@plt+0x2630>
   12f8c:	mov	r0, #118	; 0x76
   12f90:	b	130f8 <__assert_fail@plt+0x20d8>
   12f94:	mov	r4, #39	; 0x27
   12f98:	mov	r0, #1
   12f9c:	str	r0, [sp, #64]	; 0x40
   12fa0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12fa4:	cmp	r0, #2
   12fa8:	bne	13130 <__assert_fail@plt+0x2110>
   12fac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12fb0:	tst	r0, #1
   12fb4:	bne	13650 <__assert_fail@plt+0x2630>
   12fb8:	ldr	r2, [sp, #84]	; 0x54
   12fbc:	cmp	r2, #0
   12fc0:	mov	r0, r2
   12fc4:	movwne	r0, #1
   12fc8:	clz	r1, sl
   12fcc:	lsr	r1, r1, #5
   12fd0:	orrs	r0, r0, r1
   12fd4:	moveq	r2, sl
   12fd8:	str	r2, [sp, #84]	; 0x54
   12fdc:	moveq	sl, r0
   12fe0:	cmp	r8, sl
   12fe4:	movcc	r0, #39	; 0x27
   12fe8:	strbcc	r0, [r5, r8]
   12fec:	add	r0, r8, #1
   12ff0:	cmp	r0, sl
   12ff4:	movcc	r1, #92	; 0x5c
   12ff8:	strbcc	r1, [r5, r0]
   12ffc:	add	r0, r8, #2
   13000:	cmp	r0, sl
   13004:	movcc	r1, #39	; 0x27
   13008:	strbcc	r1, [r5, r0]
   1300c:	add	r8, r8, #3
   13010:	mov	r0, #0
   13014:	str	r0, [fp, #-56]	; 0xffffffc8
   13018:	mov	r9, #0
   1301c:	mov	r6, #1
   13020:	b	12d0c <__assert_fail@plt+0x1cec>
   13024:	ldr	r0, [sp, #44]	; 0x2c
   13028:	cmp	r0, #1
   1302c:	bne	13138 <__assert_fail@plt+0x2118>
   13030:	str	lr, [sp, #32]
   13034:	bl	10f18 <__ctype_b_loc@plt>
   13038:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1303c:	ldr	r0, [r0]
   13040:	add	r0, r0, r4, lsl #1
   13044:	ldrb	r0, [r0, #1]
   13048:	ubfx	r6, r0, #6, #1
   1304c:	mov	r2, #1
   13050:	ldr	r0, [sp, #60]	; 0x3c
   13054:	orr	r1, r6, r0
   13058:	cmp	r2, #1
   1305c:	bhi	13390 <__assert_fail@plt+0x2370>
   13060:	tst	r1, #1
   13064:	beq	13390 <__assert_fail@plt+0x2370>
   13068:	ldr	lr, [sp, #32]
   1306c:	b	12d0c <__assert_fail@plt+0x1cec>
   13070:	mov	r9, #0
   13074:	mov	r0, #92	; 0x5c
   13078:	ldr	r1, [sp, #56]	; 0x38
   1307c:	cmp	r1, #0
   13080:	beq	130f8 <__assert_fail@plt+0x20d8>
   13084:	mov	r4, #92	; 0x5c
   13088:	mov	r6, #0
   1308c:	cmp	r9, #0
   13090:	bne	130c8 <__assert_fail@plt+0x20a8>
   13094:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13098:	tst	r0, #1
   1309c:	beq	130c8 <__assert_fail@plt+0x20a8>
   130a0:	cmp	r8, sl
   130a4:	movcc	r0, #39	; 0x27
   130a8:	strbcc	r0, [r5, r8]
   130ac:	add	r0, r8, #1
   130b0:	cmp	r0, sl
   130b4:	movcc	r1, #39	; 0x27
   130b8:	strbcc	r1, [r5, r0]
   130bc:	add	r8, r8, #2
   130c0:	mov	r0, #0
   130c4:	str	r0, [fp, #-56]	; 0xffffffc8
   130c8:	mov	r1, r6
   130cc:	mov	r0, r4
   130d0:	cmp	r8, sl
   130d4:	strbcc	r0, [r5, r8]
   130d8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   130dc:	and	r0, r0, r1
   130e0:	str	r0, [fp, #-48]	; 0xffffffd0
   130e4:	add	r8, r8, #1
   130e8:	add	r7, r7, #1
   130ec:	cmn	lr, #1
   130f0:	bne	12a44 <__assert_fail@plt+0x1a24>
   130f4:	b	12a50 <__assert_fail@plt+0x1a30>
   130f8:	mov	r9, #0
   130fc:	ldr	r1, [sp, #92]	; 0x5c
   13100:	tst	r1, #1
   13104:	mov	r6, #0
   13108:	mov	r1, #0
   1310c:	beq	12d0c <__assert_fail@plt+0x1cec>
   13110:	b	12d54 <__assert_fail@plt+0x1d34>
   13114:	mov	r4, #0
   13118:	ldr	r0, [sp, #40]	; 0x28
   1311c:	cmp	r0, #0
   13120:	mov	r9, #0
   13124:	mov	r6, #0
   13128:	beq	12d0c <__assert_fail@plt+0x1cec>
   1312c:	b	130e8 <__assert_fail@plt+0x20c8>
   13130:	mov	r6, #1
   13134:	b	12d0c <__assert_fail@plt+0x1cec>
   13138:	mov	r0, #0
   1313c:	str	r0, [fp, #-36]	; 0xffffffdc
   13140:	str	r0, [fp, #-40]	; 0xffffffd8
   13144:	cmn	lr, #1
   13148:	bne	1315c <__assert_fail@plt+0x213c>
   1314c:	mov	r0, ip
   13150:	bl	10f3c <strlen@plt>
   13154:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13158:	mov	lr, r0
   1315c:	ldr	r0, [sp, #76]	; 0x4c
   13160:	add	r0, r0, r7
   13164:	str	r0, [sp, #24]
   13168:	mov	r6, #1
   1316c:	mov	r2, #0
   13170:	sub	r0, fp, #40	; 0x28
   13174:	mov	r3, r0
   13178:	str	r5, [sp, #28]
   1317c:	str	lr, [sp, #32]
   13180:	b	131c4 <__assert_fail@plt+0x21a4>
   13184:	ldr	r5, [sp, #52]	; 0x34
   13188:	add	r5, r0, r5
   1318c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13190:	bl	10e7c <iswprint@plt>
   13194:	cmp	r0, #0
   13198:	movwne	r0, #1
   1319c:	and	r6, r6, r0
   131a0:	sub	r0, fp, #40	; 0x28
   131a4:	bl	10e40 <mbsinit@plt>
   131a8:	sub	r3, fp, #40	; 0x28
   131ac:	mov	r2, r5
   131b0:	ldr	lr, [sp, #32]
   131b4:	cmp	r0, #0
   131b8:	ldr	r5, [sp, #28]
   131bc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   131c0:	bne	13050 <__assert_fail@plt+0x2030>
   131c4:	str	r2, [sp, #52]	; 0x34
   131c8:	add	r0, r2, r7
   131cc:	add	r1, ip, r0
   131d0:	str	r0, [sp, #48]	; 0x30
   131d4:	sub	r2, lr, r0
   131d8:	sub	r0, fp, #44	; 0x2c
   131dc:	bl	14ea4 <__assert_fail@plt+0x3e84>
   131e0:	cmp	r0, #0
   131e4:	beq	1355c <__assert_fail@plt+0x253c>
   131e8:	cmn	r0, #1
   131ec:	beq	13518 <__assert_fail@plt+0x24f8>
   131f0:	cmn	r0, #2
   131f4:	ldr	lr, [sp, #32]
   131f8:	beq	13520 <__assert_fail@plt+0x2500>
   131fc:	cmp	r0, #2
   13200:	mov	r1, #0
   13204:	movwcc	r1, #1
   13208:	ldr	r2, [sp, #68]	; 0x44
   1320c:	eor	r2, r2, #1
   13210:	orrs	r1, r2, r1
   13214:	bne	13184 <__assert_fail@plt+0x2164>
   13218:	ldr	r1, [sp, #52]	; 0x34
   1321c:	ldr	r2, [sp, #24]
   13220:	add	r1, r2, r1
   13224:	sub	r2, r0, #1
   13228:	b	13238 <__assert_fail@plt+0x2218>
   1322c:	add	r1, r1, #1
   13230:	subs	r2, r2, #1
   13234:	beq	13184 <__assert_fail@plt+0x2164>
   13238:	ldrb	r3, [r1]
   1323c:	sub	r3, r3, #91	; 0x5b
   13240:	cmp	r3, #33	; 0x21
   13244:	bhi	1322c <__assert_fail@plt+0x220c>
   13248:	add	r5, pc, #0
   1324c:	ldr	pc, [r5, r3, lsl #2]
   13250:	andeq	r3, r1, r8, asr #12
   13254:	andeq	r3, r1, r8, asr #12
   13258:	andeq	r3, r1, ip, lsr #4
   1325c:	andeq	r3, r1, r8, asr #12
   13260:	andeq	r3, r1, ip, lsr #4
   13264:	andeq	r3, r1, r8, asr #12
   13268:	andeq	r3, r1, ip, lsr #4
   1326c:	andeq	r3, r1, ip, lsr #4
   13270:	andeq	r3, r1, ip, lsr #4
   13274:	andeq	r3, r1, ip, lsr #4
   13278:	andeq	r3, r1, ip, lsr #4
   1327c:	andeq	r3, r1, ip, lsr #4
   13280:	andeq	r3, r1, ip, lsr #4
   13284:	andeq	r3, r1, ip, lsr #4
   13288:	andeq	r3, r1, ip, lsr #4
   1328c:	andeq	r3, r1, ip, lsr #4
   13290:	andeq	r3, r1, ip, lsr #4
   13294:	andeq	r3, r1, ip, lsr #4
   13298:	andeq	r3, r1, ip, lsr #4
   1329c:	andeq	r3, r1, ip, lsr #4
   132a0:	andeq	r3, r1, ip, lsr #4
   132a4:	andeq	r3, r1, ip, lsr #4
   132a8:	andeq	r3, r1, ip, lsr #4
   132ac:	andeq	r3, r1, ip, lsr #4
   132b0:	andeq	r3, r1, ip, lsr #4
   132b4:	andeq	r3, r1, ip, lsr #4
   132b8:	andeq	r3, r1, ip, lsr #4
   132bc:	andeq	r3, r1, ip, lsr #4
   132c0:	andeq	r3, r1, ip, lsr #4
   132c4:	andeq	r3, r1, ip, lsr #4
   132c8:	andeq	r3, r1, ip, lsr #4
   132cc:	andeq	r3, r1, ip, lsr #4
   132d0:	andeq	r3, r1, ip, lsr #4
   132d4:	andeq	r3, r1, r8, asr #12
   132d8:	mov	r8, r0
   132dc:	b	12d0c <__assert_fail@plt+0x1cec>
   132e0:	ldr	r0, [sp, #36]	; 0x24
   132e4:	cmp	r0, #0
   132e8:	beq	13388 <__assert_fail@plt+0x2368>
   132ec:	add	r0, r7, #2
   132f0:	cmp	r0, lr
   132f4:	bcs	13388 <__assert_fail@plt+0x2368>
   132f8:	add	r1, r7, ip
   132fc:	ldrb	r1, [r1, #1]
   13300:	cmp	r1, #63	; 0x3f
   13304:	bne	13388 <__assert_fail@plt+0x2368>
   13308:	ldrb	r1, [ip, r0]
   1330c:	sub	r2, r1, #33	; 0x21
   13310:	cmp	r2, #29
   13314:	bhi	13388 <__assert_fail@plt+0x2368>
   13318:	mov	r3, #1
   1331c:	movw	r6, #20929	; 0x51c1
   13320:	movt	r6, #14336	; 0x3800
   13324:	tst	r6, r3, lsl r2
   13328:	beq	13388 <__assert_fail@plt+0x2368>
   1332c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13330:	tst	r2, #1
   13334:	bne	13650 <__assert_fail@plt+0x2630>
   13338:	cmp	r8, sl
   1333c:	movcc	r2, #63	; 0x3f
   13340:	strbcc	r2, [r5, r8]
   13344:	add	r2, r8, #1
   13348:	cmp	r2, sl
   1334c:	movcc	r3, #34	; 0x22
   13350:	strbcc	r3, [r5, r2]
   13354:	add	r2, r8, #2
   13358:	cmp	r2, sl
   1335c:	movcc	r3, #34	; 0x22
   13360:	strbcc	r3, [r5, r2]
   13364:	add	r2, r8, #3
   13368:	cmp	r2, sl
   1336c:	movcc	r3, #63	; 0x3f
   13370:	strbcc	r3, [r5, r2]
   13374:	add	r8, r8, #4
   13378:	mov	r7, r0
   1337c:	mov	r4, r1
   13380:	mov	r6, #0
   13384:	b	12d0c <__assert_fail@plt+0x1cec>
   13388:	mov	r6, #0
   1338c:	b	12d0c <__assert_fail@plt+0x1cec>
   13390:	add	r0, r2, r7
   13394:	str	r0, [sp, #52]	; 0x34
   13398:	mov	r2, #0
   1339c:	ldr	lr, [sp, #32]
   133a0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   133a4:	str	r1, [sp, #48]	; 0x30
   133a8:	tst	r1, #1
   133ac:	bne	13488 <__assert_fail@plt+0x2468>
   133b0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   133b4:	tst	r1, #1
   133b8:	bne	13650 <__assert_fail@plt+0x2630>
   133bc:	mov	r3, r0
   133c0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   133c4:	subs	r1, r0, #2
   133c8:	movwne	r1, #1
   133cc:	orr	r1, r1, r3
   133d0:	tst	r1, #1
   133d4:	bne	1340c <__assert_fail@plt+0x23ec>
   133d8:	cmp	r8, sl
   133dc:	movcc	r0, #39	; 0x27
   133e0:	strbcc	r0, [r5, r8]
   133e4:	add	r2, r8, #1
   133e8:	cmp	r2, sl
   133ec:	movcc	r0, #36	; 0x24
   133f0:	strbcc	r0, [r5, r2]
   133f4:	add	r2, r8, #2
   133f8:	cmp	r2, sl
   133fc:	movcc	r0, #39	; 0x27
   13400:	strbcc	r0, [r5, r2]
   13404:	add	r8, r8, #3
   13408:	mov	r3, #1
   1340c:	cmp	r8, sl
   13410:	movcc	r1, #92	; 0x5c
   13414:	strbcc	r1, [r5, r8]
   13418:	add	r2, r8, #1
   1341c:	cmp	r2, sl
   13420:	bcs	13434 <__assert_fail@plt+0x2414>
   13424:	uxtb	r1, r4
   13428:	mov	r0, #48	; 0x30
   1342c:	orr	r1, r0, r1, lsr #6
   13430:	strb	r1, [r5, r2]
   13434:	add	r2, r8, #2
   13438:	cmp	r2, sl
   1343c:	lsrcc	r1, r4, #3
   13440:	movcc	r0, #6
   13444:	bficc	r1, r0, #3, #29
   13448:	strbcc	r1, [r5, r2]
   1344c:	mov	r0, #6
   13450:	bfi	r4, r0, #3, #29
   13454:	add	r8, r8, #3
   13458:	mov	r2, #1
   1345c:	mov	r0, r3
   13460:	b	134ac <__assert_fail@plt+0x248c>
   13464:	cmp	r8, sl
   13468:	strbcc	r4, [r5, r8]
   1346c:	ldr	r1, [sp, #76]	; 0x4c
   13470:	ldrb	r4, [r1, r7]
   13474:	add	r8, r8, #1
   13478:	mov	r7, r3
   1347c:	ldr	r1, [sp, #48]	; 0x30
   13480:	tst	r1, #1
   13484:	beq	133b0 <__assert_fail@plt+0x2390>
   13488:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1348c:	tst	r1, #1
   13490:	beq	134a4 <__assert_fail@plt+0x2484>
   13494:	cmp	r8, sl
   13498:	movcc	r1, #92	; 0x5c
   1349c:	strbcc	r1, [r5, r8]
   134a0:	add	r8, r8, #1
   134a4:	mov	r1, #0
   134a8:	str	r1, [fp, #-52]	; 0xffffffcc
   134ac:	and	r9, r2, #1
   134b0:	add	r3, r7, #1
   134b4:	ldr	r1, [sp, #52]	; 0x34
   134b8:	cmp	r1, r3
   134bc:	bls	13500 <__assert_fail@plt+0x24e0>
   134c0:	cmp	r9, #0
   134c4:	movwne	r9, #1
   134c8:	mvn	r1, r0
   134cc:	orr	r1, r1, r9
   134d0:	tst	r1, #1
   134d4:	bne	13464 <__assert_fail@plt+0x2444>
   134d8:	cmp	r8, sl
   134dc:	movcc	r1, #39	; 0x27
   134e0:	strbcc	r1, [r5, r8]
   134e4:	add	r1, r8, #1
   134e8:	cmp	r1, sl
   134ec:	movcc	r0, #39	; 0x27
   134f0:	strbcc	r0, [r5, r1]
   134f4:	add	r8, r8, #2
   134f8:	mov	r0, #0
   134fc:	b	13464 <__assert_fail@plt+0x2444>
   13500:	str	r0, [fp, #-56]	; 0xffffffc8
   13504:	cmp	r9, #0
   13508:	movwne	r9, #1
   1350c:	cmp	r9, #0
   13510:	beq	13094 <__assert_fail@plt+0x2074>
   13514:	b	130c8 <__assert_fail@plt+0x20a8>
   13518:	mov	r6, #0
   1351c:	b	1355c <__assert_fail@plt+0x253c>
   13520:	mov	r6, #0
   13524:	ldr	r0, [sp, #48]	; 0x30
   13528:	cmp	r0, lr
   1352c:	bcs	1355c <__assert_fail@plt+0x253c>
   13530:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13534:	add	r0, ip, r7
   13538:	ldr	r2, [sp, #52]	; 0x34
   1353c:	ldrb	r1, [r0, r2]
   13540:	cmp	r1, #0
   13544:	beq	13050 <__assert_fail@plt+0x2030>
   13548:	add	r2, r2, #1
   1354c:	add	r1, r7, r2
   13550:	cmp	r1, lr
   13554:	bcc	1353c <__assert_fail@plt+0x251c>
   13558:	b	13050 <__assert_fail@plt+0x2030>
   1355c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13560:	ldr	r2, [sp, #52]	; 0x34
   13564:	b	13050 <__assert_fail@plt+0x2030>
   13568:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1356c:	eor	r0, r1, #2
   13570:	orr	r0, r0, r8
   13574:	clz	r0, r0
   13578:	lsr	r0, r0, #5
   1357c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13580:	tst	r3, r0
   13584:	bne	13650 <__assert_fail@plt+0x2630>
   13588:	mov	r6, r5
   1358c:	subs	r0, r1, #2
   13590:	movwne	r0, #1
   13594:	orr	r0, r3, r0
   13598:	tst	r0, #1
   1359c:	ldr	r2, [sp, #92]	; 0x5c
   135a0:	ldreq	r0, [sp, #64]	; 0x40
   135a4:	eoreq	r0, r0, #1
   135a8:	tsteq	r0, #1
   135ac:	bne	135ec <__assert_fail@plt+0x25cc>
   135b0:	mov	r9, lr
   135b4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   135b8:	tst	r0, #1
   135bc:	bne	136b8 <__assert_fail@plt+0x2698>
   135c0:	ldr	r0, [sp, #84]	; 0x54
   135c4:	cmp	r0, #0
   135c8:	beq	135ec <__assert_fail@plt+0x25cc>
   135cc:	mov	r0, #0
   135d0:	str	r0, [fp, #-48]	; 0xffffffd0
   135d4:	mov	r1, #2
   135d8:	cmp	sl, #0
   135dc:	mov	r0, r2
   135e0:	mov	r4, r3
   135e4:	ldr	r7, [sp, #84]	; 0x54
   135e8:	beq	127c4 <__assert_fail@plt+0x17a4>
   135ec:	ldr	r1, [fp, #-84]	; 0xffffffac
   135f0:	clz	r0, r1
   135f4:	lsr	r0, r0, #5
   135f8:	orr	r0, r0, r3
   135fc:	tst	r0, #1
   13600:	bne	1362c <__assert_fail@plt+0x260c>
   13604:	ldrb	r0, [r1]
   13608:	cmp	r0, #0
   1360c:	beq	1362c <__assert_fail@plt+0x260c>
   13610:	add	r1, r1, #1
   13614:	cmp	r8, sl
   13618:	strbcc	r0, [r6, r8]
   1361c:	add	r8, r8, #1
   13620:	ldrb	r0, [r1], #1
   13624:	cmp	r0, #0
   13628:	bne	13614 <__assert_fail@plt+0x25f4>
   1362c:	cmp	r8, sl
   13630:	movcc	r0, #0
   13634:	strbcc	r0, [r6, r8]
   13638:	b	136ac <__assert_fail@plt+0x268c>
   1363c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13640:	mov	lr, r4
   13644:	b	13650 <__assert_fail@plt+0x2630>
   13648:	ldr	r5, [sp, #28]
   1364c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13650:	mov	r0, #0
   13654:	ldr	r1, [fp, #12]
   13658:	bic	r1, r1, #2
   1365c:	mov	r2, #2
   13660:	ldr	r3, [sp, #92]	; 0x5c
   13664:	tst	r3, #1
   13668:	movwne	r2, #4
   1366c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13670:	cmp	r3, #2
   13674:	movne	r2, r3
   13678:	str	r2, [sp]
   1367c:	str	r1, [sp, #4]
   13680:	str	r0, [sp, #8]
   13684:	ldr	r0, [sp, #80]	; 0x50
   13688:	str	r0, [sp, #12]
   1368c:	ldr	r0, [sp, #88]	; 0x58
   13690:	str	r0, [sp, #16]
   13694:	mov	r0, r5
   13698:	mov	r1, sl
   1369c:	mov	r2, ip
   136a0:	mov	r3, lr
   136a4:	bl	12738 <__assert_fail@plt+0x1718>
   136a8:	mov	r8, r0
   136ac:	mov	r0, r8
   136b0:	sub	sp, fp, #28
   136b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136b8:	mov	r0, #5
   136bc:	str	r0, [sp]
   136c0:	ldr	r0, [fp, #12]
   136c4:	str	r0, [sp, #4]
   136c8:	ldr	r0, [fp, #16]
   136cc:	str	r0, [sp, #8]
   136d0:	ldr	r0, [sp, #80]	; 0x50
   136d4:	str	r0, [sp, #12]
   136d8:	ldr	r0, [sp, #88]	; 0x58
   136dc:	str	r0, [sp, #16]
   136e0:	mov	r0, r6
   136e4:	ldr	r1, [sp, #84]	; 0x54
   136e8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   136ec:	mov	r3, r9
   136f0:	b	136a4 <__assert_fail@plt+0x2684>
   136f4:	bl	10ffc <abort@plt>
   136f8:	mov	r3, r2
   136fc:	mov	r2, #0
   13700:	b	13704 <__assert_fail@plt+0x26e4>
   13704:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13708:	add	fp, sp, #28
   1370c:	sub	sp, sp, #36	; 0x24
   13710:	mov	r4, r2
   13714:	str	r2, [sp, #24]
   13718:	mov	r5, r1
   1371c:	mov	r6, r0
   13720:	str	r0, [sp, #20]
   13724:	movw	r8, #24992	; 0x61a0
   13728:	movt	r8, #2
   1372c:	cmp	r3, #0
   13730:	movne	r8, r3
   13734:	bl	10f48 <__errno_location@plt>
   13738:	str	r0, [sp, #28]
   1373c:	ldm	r8, {r3, r9}
   13740:	ldr	r1, [r8, #40]	; 0x28
   13744:	ldr	r2, [r8, #44]	; 0x2c
   13748:	ldr	r7, [r0]
   1374c:	str	r7, [sp, #32]
   13750:	add	sl, r8, #8
   13754:	cmp	r4, #0
   13758:	orreq	r9, r9, #1
   1375c:	stm	sp, {r3, r9, sl}
   13760:	str	r1, [sp, #12]
   13764:	str	r2, [sp, #16]
   13768:	mov	r0, #0
   1376c:	mov	r1, #0
   13770:	mov	r2, r6
   13774:	mov	r3, r5
   13778:	mov	r7, r5
   1377c:	bl	12738 <__assert_fail@plt+0x1718>
   13780:	mov	r5, r0
   13784:	add	r4, r0, #1
   13788:	mov	r0, r4
   1378c:	bl	1460c <__assert_fail@plt+0x35ec>
   13790:	mov	r6, r0
   13794:	ldr	r0, [r8]
   13798:	ldr	r1, [r8, #40]	; 0x28
   1379c:	ldr	r2, [r8, #44]	; 0x2c
   137a0:	stm	sp, {r0, r9, sl}
   137a4:	str	r1, [sp, #12]
   137a8:	str	r2, [sp, #16]
   137ac:	mov	r0, r6
   137b0:	mov	r1, r4
   137b4:	ldr	r2, [sp, #20]
   137b8:	mov	r3, r7
   137bc:	bl	12738 <__assert_fail@plt+0x1718>
   137c0:	ldr	r0, [sp, #24]
   137c4:	ldr	r1, [sp, #32]
   137c8:	ldr	r2, [sp, #28]
   137cc:	str	r1, [r2]
   137d0:	cmp	r0, #0
   137d4:	strne	r5, [r0]
   137d8:	mov	r0, r6
   137dc:	sub	sp, fp, #28
   137e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   137e8:	add	fp, sp, #24
   137ec:	movw	r8, #24816	; 0x60f0
   137f0:	movt	r8, #2
   137f4:	ldr	r4, [r8]
   137f8:	movw	r5, #24820	; 0x60f4
   137fc:	movt	r5, #2
   13800:	ldr	r0, [r5]
   13804:	cmp	r0, #2
   13808:	blt	13834 <__assert_fail@plt+0x2814>
   1380c:	add	r7, r4, #12
   13810:	mov	r6, #0
   13814:	ldr	r0, [r7, r6, lsl #3]
   13818:	bl	1242c <__assert_fail@plt+0x140c>
   1381c:	add	r0, r6, #1
   13820:	ldr	r1, [r5]
   13824:	add	r2, r6, #2
   13828:	cmp	r2, r1
   1382c:	mov	r6, r0
   13830:	blt	13814 <__assert_fail@plt+0x27f4>
   13834:	ldr	r0, [r4, #4]
   13838:	movw	r9, #25040	; 0x61d0
   1383c:	movt	r9, #2
   13840:	cmp	r0, r9
   13844:	movw	r7, #24824	; 0x60f8
   13848:	movt	r7, #2
   1384c:	beq	1385c <__assert_fail@plt+0x283c>
   13850:	bl	1242c <__assert_fail@plt+0x140c>
   13854:	mov	r0, #256	; 0x100
   13858:	stm	r7, {r0, r9}
   1385c:	cmp	r4, r7
   13860:	beq	13870 <__assert_fail@plt+0x2850>
   13864:	mov	r0, r4
   13868:	bl	1242c <__assert_fail@plt+0x140c>
   1386c:	str	r7, [r8]
   13870:	mov	r0, #1
   13874:	str	r0, [r5]
   13878:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1387c:	movw	r3, #24992	; 0x61a0
   13880:	movt	r3, #2
   13884:	mvn	r2, #0
   13888:	b	1388c <__assert_fail@plt+0x286c>
   1388c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13890:	add	fp, sp, #28
   13894:	sub	sp, sp, #44	; 0x2c
   13898:	mov	r7, r3
   1389c:	str	r2, [sp, #36]	; 0x24
   138a0:	str	r1, [sp, #32]
   138a4:	mov	r5, r0
   138a8:	bl	10f48 <__errno_location@plt>
   138ac:	cmp	r5, #0
   138b0:	bmi	13a20 <__assert_fail@plt+0x2a00>
   138b4:	cmn	r5, #-2147483647	; 0x80000001
   138b8:	beq	13a20 <__assert_fail@plt+0x2a00>
   138bc:	movw	r4, #24816	; 0x60f0
   138c0:	movt	r4, #2
   138c4:	ldr	r6, [r4]
   138c8:	str	r0, [sp, #28]
   138cc:	ldr	r0, [r0]
   138d0:	str	r0, [sp, #24]
   138d4:	movw	r8, #24820	; 0x60f4
   138d8:	movt	r8, #2
   138dc:	ldr	r1, [r8]
   138e0:	cmp	r1, r5
   138e4:	ble	138f0 <__assert_fail@plt+0x28d0>
   138e8:	mov	sl, r6
   138ec:	b	1395c <__assert_fail@plt+0x293c>
   138f0:	str	r1, [fp, #-32]	; 0xffffffe0
   138f4:	mov	r0, #8
   138f8:	str	r0, [sp]
   138fc:	movw	r9, #24824	; 0x60f8
   13900:	movt	r9, #2
   13904:	subs	r0, r6, r9
   13908:	movne	r0, r6
   1390c:	sub	r1, r5, r1
   13910:	add	r2, r1, #1
   13914:	sub	r1, fp, #32
   13918:	mvn	r3, #-2147483648	; 0x80000000
   1391c:	bl	146e8 <__assert_fail@plt+0x36c8>
   13920:	mov	sl, r0
   13924:	str	r0, [r4]
   13928:	cmp	r6, r9
   1392c:	bne	13938 <__assert_fail@plt+0x2918>
   13930:	ldrd	r0, [r9]
   13934:	stm	sl, {r0, r1}
   13938:	ldr	r1, [r8]
   1393c:	add	r0, sl, r1, lsl #3
   13940:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13944:	sub	r1, r2, r1
   13948:	lsl	r2, r1, #3
   1394c:	mov	r1, #0
   13950:	bl	10f60 <memset@plt>
   13954:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13958:	str	r0, [r8]
   1395c:	mov	r9, sl
   13960:	ldr	r6, [r9, r5, lsl #3]!
   13964:	ldr	r4, [r9, #4]!
   13968:	ldm	r7, {r0, r1}
   1396c:	ldr	r2, [r7, #40]	; 0x28
   13970:	ldr	r3, [r7, #44]	; 0x2c
   13974:	orr	r8, r1, #1
   13978:	add	r1, r7, #8
   1397c:	stm	sp, {r0, r8}
   13980:	str	r1, [sp, #20]
   13984:	add	r0, sp, #8
   13988:	stm	r0, {r1, r2, r3}
   1398c:	mov	r0, r4
   13990:	mov	r1, r6
   13994:	ldr	r2, [sp, #32]
   13998:	ldr	r3, [sp, #36]	; 0x24
   1399c:	bl	12738 <__assert_fail@plt+0x1718>
   139a0:	cmp	r6, r0
   139a4:	bhi	13a08 <__assert_fail@plt+0x29e8>
   139a8:	add	r6, r0, #1
   139ac:	str	r6, [sl, r5, lsl #3]
   139b0:	movw	r0, #25040	; 0x61d0
   139b4:	movt	r0, #2
   139b8:	cmp	r4, r0
   139bc:	beq	139c8 <__assert_fail@plt+0x29a8>
   139c0:	mov	r0, r4
   139c4:	bl	1242c <__assert_fail@plt+0x140c>
   139c8:	mov	r0, r6
   139cc:	bl	1460c <__assert_fail@plt+0x35ec>
   139d0:	mov	r4, r0
   139d4:	str	r0, [r9]
   139d8:	ldr	r0, [r7]
   139dc:	ldr	r1, [r7, #40]	; 0x28
   139e0:	ldr	r2, [r7, #44]	; 0x2c
   139e4:	stm	sp, {r0, r8}
   139e8:	ldr	r0, [sp, #20]
   139ec:	add	r3, sp, #8
   139f0:	stm	r3, {r0, r1, r2}
   139f4:	mov	r0, r4
   139f8:	mov	r1, r6
   139fc:	ldr	r2, [sp, #32]
   13a00:	ldr	r3, [sp, #36]	; 0x24
   13a04:	bl	12738 <__assert_fail@plt+0x1718>
   13a08:	ldr	r0, [sp, #28]
   13a0c:	ldr	r1, [sp, #24]
   13a10:	str	r1, [r0]
   13a14:	mov	r0, r4
   13a18:	sub	sp, fp, #28
   13a1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a20:	bl	10ffc <abort@plt>
   13a24:	movw	r3, #24992	; 0x61a0
   13a28:	movt	r3, #2
   13a2c:	b	1388c <__assert_fail@plt+0x286c>
   13a30:	mov	r1, r0
   13a34:	mov	r0, #0
   13a38:	b	1387c <__assert_fail@plt+0x285c>
   13a3c:	mov	r2, r1
   13a40:	mov	r1, r0
   13a44:	mov	r0, #0
   13a48:	b	13a24 <__assert_fail@plt+0x2a04>
   13a4c:	push	{r4, r5, r6, sl, fp, lr}
   13a50:	add	fp, sp, #16
   13a54:	sub	sp, sp, #48	; 0x30
   13a58:	mov	r4, r2
   13a5c:	mov	r5, r0
   13a60:	mov	r6, sp
   13a64:	mov	r0, r6
   13a68:	bl	13a88 <__assert_fail@plt+0x2a68>
   13a6c:	mov	r0, r5
   13a70:	mov	r1, r4
   13a74:	mvn	r2, #0
   13a78:	mov	r3, r6
   13a7c:	bl	1388c <__assert_fail@plt+0x286c>
   13a80:	sub	sp, fp, #16
   13a84:	pop	{r4, r5, r6, sl, fp, pc}
   13a88:	push	{fp, lr}
   13a8c:	mov	fp, sp
   13a90:	vmov.i32	q8, #0	; 0x00000000
   13a94:	mov	r2, #32
   13a98:	mov	r3, r0
   13a9c:	vst1.32	{d16-d17}, [r3], r2
   13aa0:	vst1.32	{d16-d17}, [r3]
   13aa4:	add	r2, r0, #16
   13aa8:	vst1.32	{d16-d17}, [r2]
   13aac:	cmp	r1, #10
   13ab0:	strne	r1, [r0]
   13ab4:	popne	{fp, pc}
   13ab8:	bl	10ffc <abort@plt>
   13abc:	push	{r4, r5, r6, r7, fp, lr}
   13ac0:	add	fp, sp, #16
   13ac4:	sub	sp, sp, #48	; 0x30
   13ac8:	mov	r4, r3
   13acc:	mov	r5, r2
   13ad0:	mov	r6, r0
   13ad4:	mov	r7, sp
   13ad8:	mov	r0, r7
   13adc:	bl	13a88 <__assert_fail@plt+0x2a68>
   13ae0:	mov	r0, r6
   13ae4:	mov	r1, r5
   13ae8:	mov	r2, r4
   13aec:	mov	r3, r7
   13af0:	bl	1388c <__assert_fail@plt+0x286c>
   13af4:	sub	sp, fp, #16
   13af8:	pop	{r4, r5, r6, r7, fp, pc}
   13afc:	mov	r2, r1
   13b00:	mov	r1, r0
   13b04:	mov	r0, #0
   13b08:	b	13a4c <__assert_fail@plt+0x2a2c>
   13b0c:	mov	r3, r2
   13b10:	mov	r2, r1
   13b14:	mov	r1, r0
   13b18:	mov	r0, #0
   13b1c:	b	13abc <__assert_fail@plt+0x2a9c>
   13b20:	push	{r4, r5, r6, sl, fp, lr}
   13b24:	add	fp, sp, #16
   13b28:	sub	sp, sp, #48	; 0x30
   13b2c:	mov	r4, r1
   13b30:	mov	r5, r0
   13b34:	movw	r0, #24992	; 0x61a0
   13b38:	movt	r0, #2
   13b3c:	add	r1, r0, #16
   13b40:	mov	r3, #32
   13b44:	vld1.64	{d16-d17}, [r0], r3
   13b48:	vld1.64	{d18-d19}, [r1]
   13b4c:	mov	r6, sp
   13b50:	add	r1, r6, #16
   13b54:	vld1.64	{d20-d21}, [r0]
   13b58:	vst1.64	{d18-d19}, [r1]
   13b5c:	mov	r0, r6
   13b60:	vst1.64	{d16-d17}, [r0], r3
   13b64:	vst1.64	{d20-d21}, [r0]
   13b68:	mov	r0, r6
   13b6c:	mov	r1, r2
   13b70:	mov	r2, #1
   13b74:	bl	1262c <__assert_fail@plt+0x160c>
   13b78:	mov	r0, #0
   13b7c:	mov	r1, r5
   13b80:	mov	r2, r4
   13b84:	mov	r3, r6
   13b88:	bl	1388c <__assert_fail@plt+0x286c>
   13b8c:	sub	sp, fp, #16
   13b90:	pop	{r4, r5, r6, sl, fp, pc}
   13b94:	mov	r2, r1
   13b98:	mvn	r1, #0
   13b9c:	b	13b20 <__assert_fail@plt+0x2b00>
   13ba0:	mov	r1, #58	; 0x3a
   13ba4:	b	13b94 <__assert_fail@plt+0x2b74>
   13ba8:	mov	r2, #58	; 0x3a
   13bac:	b	13b20 <__assert_fail@plt+0x2b00>
   13bb0:	push	{r4, r5, r6, sl, fp, lr}
   13bb4:	add	fp, sp, #16
   13bb8:	sub	sp, sp, #48	; 0x30
   13bbc:	mov	r4, r2
   13bc0:	mov	r5, r0
   13bc4:	mov	r6, sp
   13bc8:	mov	r0, r6
   13bcc:	bl	13a88 <__assert_fail@plt+0x2a68>
   13bd0:	mov	r0, r6
   13bd4:	mov	r1, #58	; 0x3a
   13bd8:	mov	r2, #1
   13bdc:	bl	1262c <__assert_fail@plt+0x160c>
   13be0:	mov	r0, r5
   13be4:	mov	r1, r4
   13be8:	mvn	r2, #0
   13bec:	mov	r3, r6
   13bf0:	bl	1388c <__assert_fail@plt+0x286c>
   13bf4:	sub	sp, fp, #16
   13bf8:	pop	{r4, r5, r6, sl, fp, pc}
   13bfc:	push	{fp, lr}
   13c00:	mov	fp, sp
   13c04:	sub	sp, sp, #8
   13c08:	mvn	ip, #0
   13c0c:	str	ip, [sp]
   13c10:	bl	13c1c <__assert_fail@plt+0x2bfc>
   13c14:	mov	sp, fp
   13c18:	pop	{fp, pc}
   13c1c:	push	{r4, r5, r6, r7, fp, lr}
   13c20:	add	fp, sp, #16
   13c24:	sub	sp, sp, #48	; 0x30
   13c28:	mov	r7, r3
   13c2c:	mov	r5, r0
   13c30:	movw	r0, #24992	; 0x61a0
   13c34:	movt	r0, #2
   13c38:	add	r3, r0, #16
   13c3c:	mov	r4, #32
   13c40:	vld1.64	{d16-d17}, [r0], r4
   13c44:	vld1.64	{d18-d19}, [r3]
   13c48:	mov	r6, sp
   13c4c:	add	r3, r6, #16
   13c50:	vld1.64	{d20-d21}, [r0]
   13c54:	vst1.64	{d18-d19}, [r3]
   13c58:	mov	r0, r6
   13c5c:	vst1.64	{d16-d17}, [r0], r4
   13c60:	vst1.64	{d20-d21}, [r0]
   13c64:	mov	r0, r6
   13c68:	bl	12684 <__assert_fail@plt+0x1664>
   13c6c:	ldr	r2, [fp, #8]
   13c70:	mov	r0, r5
   13c74:	mov	r1, r7
   13c78:	mov	r3, r6
   13c7c:	bl	1388c <__assert_fail@plt+0x286c>
   13c80:	sub	sp, fp, #16
   13c84:	pop	{r4, r5, r6, r7, fp, pc}
   13c88:	mov	r3, r2
   13c8c:	mov	r2, r1
   13c90:	mov	r1, r0
   13c94:	mov	r0, #0
   13c98:	b	13bfc <__assert_fail@plt+0x2bdc>
   13c9c:	push	{fp, lr}
   13ca0:	mov	fp, sp
   13ca4:	sub	sp, sp, #8
   13ca8:	mov	ip, r2
   13cac:	mov	r2, r1
   13cb0:	mov	r1, r0
   13cb4:	str	r3, [sp]
   13cb8:	mov	r0, #0
   13cbc:	mov	r3, ip
   13cc0:	bl	13c1c <__assert_fail@plt+0x2bfc>
   13cc4:	mov	sp, fp
   13cc8:	pop	{fp, pc}
   13ccc:	movw	r3, #24832	; 0x6100
   13cd0:	movt	r3, #2
   13cd4:	b	1388c <__assert_fail@plt+0x286c>
   13cd8:	mov	r2, r1
   13cdc:	mov	r1, r0
   13ce0:	mov	r0, #0
   13ce4:	b	13ccc <__assert_fail@plt+0x2cac>
   13ce8:	mvn	r2, #0
   13cec:	b	13ccc <__assert_fail@plt+0x2cac>
   13cf0:	mov	r1, r0
   13cf4:	mov	r0, #0
   13cf8:	b	13ce8 <__assert_fail@plt+0x2cc8>
   13cfc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13d00:	add	fp, sp, #24
   13d04:	sub	sp, sp, #16
   13d08:	mov	r4, r1
   13d0c:	mov	r5, r0
   13d10:	mov	r7, #0
   13d14:	mov	r0, #0
   13d18:	mov	r1, r5
   13d1c:	mov	r2, #5
   13d20:	bl	10e58 <dcgettext@plt>
   13d24:	cmp	r0, r5
   13d28:	beq	13d34 <__assert_fail@plt+0x2d14>
   13d2c:	sub	sp, fp, #24
   13d30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13d34:	bl	14e6c <__assert_fail@plt+0x3e4c>
   13d38:	mov	r6, r0
   13d3c:	mov	r8, #56	; 0x38
   13d40:	mov	r0, #45	; 0x2d
   13d44:	stm	sp, {r0, r8}
   13d48:	str	r7, [sp, #8]
   13d4c:	str	r7, [sp, #12]
   13d50:	mov	r0, r6
   13d54:	mov	r1, #85	; 0x55
   13d58:	mov	r2, #84	; 0x54
   13d5c:	mov	r3, #70	; 0x46
   13d60:	bl	13df8 <__assert_fail@plt+0x2dd8>
   13d64:	cmp	r0, #0
   13d68:	beq	13d84 <__assert_fail@plt+0x2d64>
   13d6c:	ldrb	r1, [r5]
   13d70:	movw	r2, #23192	; 0x5a98
   13d74:	movt	r2, #1
   13d78:	movw	r0, #23196	; 0x5a9c
   13d7c:	movt	r0, #1
   13d80:	b	13dc8 <__assert_fail@plt+0x2da8>
   13d84:	mov	r0, #48	; 0x30
   13d88:	mov	r1, #51	; 0x33
   13d8c:	str	r8, [sp]
   13d90:	stmib	sp, {r0, r1}
   13d94:	str	r0, [sp, #12]
   13d98:	mov	r0, r6
   13d9c:	mov	r1, #71	; 0x47
   13da0:	mov	r2, #66	; 0x42
   13da4:	mov	r3, #49	; 0x31
   13da8:	bl	13df8 <__assert_fail@plt+0x2dd8>
   13dac:	cmp	r0, #0
   13db0:	beq	13dd8 <__assert_fail@plt+0x2db8>
   13db4:	ldrb	r1, [r5]
   13db8:	movw	r2, #23200	; 0x5aa0
   13dbc:	movt	r2, #1
   13dc0:	movw	r0, #23204	; 0x5aa4
   13dc4:	movt	r0, #1
   13dc8:	cmp	r1, #96	; 0x60
   13dcc:	moveq	r0, r2
   13dd0:	sub	sp, fp, #24
   13dd4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13dd8:	movw	r1, #23188	; 0x5a94
   13ddc:	movt	r1, #1
   13de0:	movw	r0, #23020	; 0x59ec
   13de4:	movt	r0, #1
   13de8:	cmp	r4, #9
   13dec:	moveq	r0, r1
   13df0:	sub	sp, fp, #24
   13df4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13df8:	push	{r4, r5, r6, r7, fp, lr}
   13dfc:	add	fp, sp, #16
   13e00:	sub	sp, sp, #16
   13e04:	mov	r4, r3
   13e08:	mov	r5, r2
   13e0c:	mov	r7, r1
   13e10:	mov	r6, r0
   13e14:	mov	r0, r1
   13e18:	bl	14d28 <__assert_fail@plt+0x3d08>
   13e1c:	ldrb	r1, [r6]
   13e20:	cmp	r0, #0
   13e24:	andne	r1, r1, #223	; 0xdf
   13e28:	mov	r0, #0
   13e2c:	cmp	r1, r7
   13e30:	bne	13e68 <__assert_fail@plt+0x2e48>
   13e34:	cmp	r7, #0
   13e38:	beq	13e70 <__assert_fail@plt+0x2e50>
   13e3c:	ldr	r0, [fp, #20]
   13e40:	ldr	r1, [fp, #16]
   13e44:	ldr	r2, [fp, #12]
   13e48:	ldr	r3, [fp, #8]
   13e4c:	str	r2, [sp]
   13e50:	str	r1, [sp, #4]
   13e54:	str	r0, [sp, #8]
   13e58:	mov	r0, r6
   13e5c:	mov	r1, r5
   13e60:	mov	r2, r4
   13e64:	bl	13e7c <__assert_fail@plt+0x2e5c>
   13e68:	sub	sp, fp, #16
   13e6c:	pop	{r4, r5, r6, r7, fp, pc}
   13e70:	mov	r0, #1
   13e74:	sub	sp, fp, #16
   13e78:	pop	{r4, r5, r6, r7, fp, pc}
   13e7c:	push	{r4, r5, r6, r7, fp, lr}
   13e80:	add	fp, sp, #16
   13e84:	sub	sp, sp, #8
   13e88:	mov	r4, r3
   13e8c:	mov	r5, r2
   13e90:	mov	r7, r1
   13e94:	mov	r6, r0
   13e98:	mov	r0, r1
   13e9c:	bl	14d28 <__assert_fail@plt+0x3d08>
   13ea0:	ldrb	r1, [r6, #1]
   13ea4:	cmp	r0, #0
   13ea8:	andne	r1, r1, #223	; 0xdf
   13eac:	mov	r0, #0
   13eb0:	cmp	r1, r7
   13eb4:	bne	13ee4 <__assert_fail@plt+0x2ec4>
   13eb8:	cmp	r7, #0
   13ebc:	beq	13eec <__assert_fail@plt+0x2ecc>
   13ec0:	ldr	r0, [fp, #16]
   13ec4:	ldr	r1, [fp, #12]
   13ec8:	ldr	r3, [fp, #8]
   13ecc:	str	r1, [sp]
   13ed0:	str	r0, [sp, #4]
   13ed4:	mov	r0, r6
   13ed8:	mov	r1, r5
   13edc:	mov	r2, r4
   13ee0:	bl	13ef8 <__assert_fail@plt+0x2ed8>
   13ee4:	sub	sp, fp, #16
   13ee8:	pop	{r4, r5, r6, r7, fp, pc}
   13eec:	mov	r0, #1
   13ef0:	sub	sp, fp, #16
   13ef4:	pop	{r4, r5, r6, r7, fp, pc}
   13ef8:	push	{r4, r5, r6, r7, fp, lr}
   13efc:	add	fp, sp, #16
   13f00:	sub	sp, sp, #8
   13f04:	mov	r4, r3
   13f08:	mov	r5, r2
   13f0c:	mov	r7, r1
   13f10:	mov	r6, r0
   13f14:	mov	r0, r1
   13f18:	bl	14d28 <__assert_fail@plt+0x3d08>
   13f1c:	ldrb	r1, [r6, #2]
   13f20:	cmp	r0, #0
   13f24:	andne	r1, r1, #223	; 0xdf
   13f28:	mov	r0, #0
   13f2c:	cmp	r1, r7
   13f30:	bne	13f58 <__assert_fail@plt+0x2f38>
   13f34:	cmp	r7, #0
   13f38:	beq	13f60 <__assert_fail@plt+0x2f40>
   13f3c:	ldr	r0, [fp, #12]
   13f40:	ldr	r3, [fp, #8]
   13f44:	str	r0, [sp]
   13f48:	mov	r0, r6
   13f4c:	mov	r1, r5
   13f50:	mov	r2, r4
   13f54:	bl	13f6c <__assert_fail@plt+0x2f4c>
   13f58:	sub	sp, fp, #16
   13f5c:	pop	{r4, r5, r6, r7, fp, pc}
   13f60:	mov	r0, #1
   13f64:	sub	sp, fp, #16
   13f68:	pop	{r4, r5, r6, r7, fp, pc}
   13f6c:	push	{r4, r5, r6, r7, fp, lr}
   13f70:	add	fp, sp, #16
   13f74:	mov	r4, r3
   13f78:	mov	r5, r2
   13f7c:	mov	r7, r1
   13f80:	mov	r6, r0
   13f84:	mov	r0, r1
   13f88:	bl	14d28 <__assert_fail@plt+0x3d08>
   13f8c:	ldrb	r1, [r6, #3]
   13f90:	ldr	r3, [fp, #8]
   13f94:	cmp	r0, #0
   13f98:	andne	r1, r1, #223	; 0xdf
   13f9c:	mov	r0, #0
   13fa0:	cmp	r1, r7
   13fa4:	bne	13fc8 <__assert_fail@plt+0x2fa8>
   13fa8:	cmp	r7, #0
   13fac:	beq	13fc4 <__assert_fail@plt+0x2fa4>
   13fb0:	mov	r0, r6
   13fb4:	mov	r1, r5
   13fb8:	mov	r2, r4
   13fbc:	pop	{r4, r5, r6, r7, fp, lr}
   13fc0:	b	13fcc <__assert_fail@plt+0x2fac>
   13fc4:	mov	r0, #1
   13fc8:	pop	{r4, r5, r6, r7, fp, pc}
   13fcc:	push	{r4, r5, r6, r7, fp, lr}
   13fd0:	add	fp, sp, #16
   13fd4:	mov	r4, r3
   13fd8:	mov	r5, r2
   13fdc:	mov	r7, r1
   13fe0:	mov	r6, r0
   13fe4:	mov	r0, r1
   13fe8:	bl	14d28 <__assert_fail@plt+0x3d08>
   13fec:	ldrb	r1, [r6, #4]
   13ff0:	cmp	r0, #0
   13ff4:	andne	r1, r1, #223	; 0xdf
   13ff8:	mov	r0, #0
   13ffc:	cmp	r1, r7
   14000:	bne	14024 <__assert_fail@plt+0x3004>
   14004:	cmp	r7, #0
   14008:	beq	14020 <__assert_fail@plt+0x3000>
   1400c:	mov	r0, r6
   14010:	mov	r1, r5
   14014:	mov	r2, r4
   14018:	pop	{r4, r5, r6, r7, fp, lr}
   1401c:	b	14028 <__assert_fail@plt+0x3008>
   14020:	mov	r0, #1
   14024:	pop	{r4, r5, r6, r7, fp, pc}
   14028:	push	{r4, r5, r6, sl, fp, lr}
   1402c:	add	fp, sp, #16
   14030:	mov	r4, r2
   14034:	mov	r6, r1
   14038:	mov	r5, r0
   1403c:	mov	r0, r1
   14040:	bl	14d28 <__assert_fail@plt+0x3d08>
   14044:	ldrb	r1, [r5, #5]
   14048:	cmp	r0, #0
   1404c:	andne	r1, r1, #223	; 0xdf
   14050:	mov	r0, #0
   14054:	cmp	r1, r6
   14058:	bne	14078 <__assert_fail@plt+0x3058>
   1405c:	cmp	r6, #0
   14060:	beq	14074 <__assert_fail@plt+0x3054>
   14064:	mov	r0, r5
   14068:	mov	r1, r4
   1406c:	pop	{r4, r5, r6, sl, fp, lr}
   14070:	b	1407c <__assert_fail@plt+0x305c>
   14074:	mov	r0, #1
   14078:	pop	{r4, r5, r6, sl, fp, pc}
   1407c:	push	{r4, r5, fp, lr}
   14080:	add	fp, sp, #8
   14084:	mov	r5, r1
   14088:	mov	r4, r0
   1408c:	mov	r0, r1
   14090:	bl	14d28 <__assert_fail@plt+0x3d08>
   14094:	ldrb	r1, [r4, #6]
   14098:	cmp	r0, #0
   1409c:	andne	r1, r1, #223	; 0xdf
   140a0:	mov	r0, #0
   140a4:	cmp	r1, r5
   140a8:	popne	{r4, r5, fp, pc}
   140ac:	cmp	r5, #0
   140b0:	beq	140c0 <__assert_fail@plt+0x30a0>
   140b4:	mov	r0, r4
   140b8:	pop	{r4, r5, fp, lr}
   140bc:	b	140c8 <__assert_fail@plt+0x30a8>
   140c0:	mov	r0, #1
   140c4:	pop	{r4, r5, fp, pc}
   140c8:	push	{r4, sl, fp, lr}
   140cc:	add	fp, sp, #8
   140d0:	mov	r4, r0
   140d4:	mov	r0, #0
   140d8:	bl	14d28 <__assert_fail@plt+0x3d08>
   140dc:	ldrb	r1, [r4, #7]
   140e0:	cmp	r0, #0
   140e4:	beq	140f8 <__assert_fail@plt+0x30d8>
   140e8:	tst	r1, #223	; 0xdf
   140ec:	bne	14100 <__assert_fail@plt+0x30e0>
   140f0:	mov	r0, #1
   140f4:	pop	{r4, sl, fp, pc}
   140f8:	cmp	r1, #0
   140fc:	beq	140f0 <__assert_fail@plt+0x30d0>
   14100:	mov	r0, #0
   14104:	pop	{r4, sl, fp, pc}
   14108:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1410c:	add	fp, sp, #24
   14110:	sub	sp, sp, #32
   14114:	mov	r4, r2
   14118:	mov	r8, r0
   1411c:	ldr	r6, [fp, #12]
   14120:	ldr	r7, [fp, #8]
   14124:	cmp	r1, #0
   14128:	beq	14150 <__assert_fail@plt+0x3130>
   1412c:	mov	r5, r1
   14130:	str	r4, [sp]
   14134:	str	r3, [sp, #4]
   14138:	movw	r2, #23292	; 0x5afc
   1413c:	movt	r2, #1
   14140:	mov	r0, r8
   14144:	mov	r1, #1
   14148:	mov	r3, r5
   1414c:	b	14168 <__assert_fail@plt+0x3148>
   14150:	str	r3, [sp]
   14154:	movw	r2, #23304	; 0x5b08
   14158:	movt	r2, #1
   1415c:	mov	r0, r8
   14160:	mov	r1, #1
   14164:	mov	r3, r4
   14168:	bl	10f84 <__fprintf_chk@plt>
   1416c:	movw	r1, #23311	; 0x5b0f
   14170:	movt	r1, #1
   14174:	mov	r0, #0
   14178:	mov	r2, #5
   1417c:	bl	10e58 <dcgettext@plt>
   14180:	mov	r3, r0
   14184:	movw	r0, #2022	; 0x7e6
   14188:	str	r0, [sp]
   1418c:	movw	r2, #24029	; 0x5ddd
   14190:	movt	r2, #1
   14194:	mov	r0, r8
   14198:	mov	r1, #1
   1419c:	bl	10f84 <__fprintf_chk@plt>
   141a0:	movw	r4, #21926	; 0x55a6
   141a4:	movt	r4, #1
   141a8:	mov	r0, r4
   141ac:	mov	r1, r8
   141b0:	bl	10de0 <fputs_unlocked@plt>
   141b4:	movw	r1, #23315	; 0x5b13
   141b8:	movt	r1, #1
   141bc:	mov	r0, #0
   141c0:	mov	r2, #5
   141c4:	bl	10e58 <dcgettext@plt>
   141c8:	mov	r2, r0
   141cc:	movw	r3, #23486	; 0x5bbe
   141d0:	movt	r3, #1
   141d4:	mov	r0, r8
   141d8:	mov	r1, #1
   141dc:	bl	10f84 <__fprintf_chk@plt>
   141e0:	mov	r0, r4
   141e4:	mov	r1, r8
   141e8:	bl	10de0 <fputs_unlocked@plt>
   141ec:	cmp	r6, #9
   141f0:	bhi	1422c <__assert_fail@plt+0x320c>
   141f4:	add	r0, pc, #0
   141f8:	ldr	pc, [r0, r6, lsl #2]
   141fc:	andeq	r4, r1, r4, lsr #4
   14200:	andeq	r4, r1, r8, lsr r2
   14204:	andeq	r4, r1, r8, ror #4
   14208:	muleq	r1, r0, r2
   1420c:			; <UNDEFINED> instruction: 0x000142b8
   14210:	andeq	r4, r1, r0, ror #5
   14214:	andeq	r4, r1, r8, lsl #6
   14218:	andeq	r4, r1, r0, asr #6
   1421c:	andeq	r4, r1, r0, ror #7
   14220:	andeq	r4, r1, r8, lsl #7
   14224:	sub	sp, fp, #24
   14228:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1422c:	movw	r1, #23839	; 0x5d1f
   14230:	movt	r1, #1
   14234:	b	14390 <__assert_fail@plt+0x3370>
   14238:	movw	r1, #23520	; 0x5be0
   1423c:	movt	r1, #1
   14240:	mov	r0, #0
   14244:	mov	r2, #5
   14248:	bl	10e58 <dcgettext@plt>
   1424c:	mov	r2, r0
   14250:	ldr	r3, [r7]
   14254:	mov	r0, r8
   14258:	mov	r1, #1
   1425c:	sub	sp, fp, #24
   14260:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14264:	b	10f84 <__fprintf_chk@plt>
   14268:	movw	r1, #23536	; 0x5bf0
   1426c:	movt	r1, #1
   14270:	mov	r0, #0
   14274:	mov	r2, #5
   14278:	bl	10e58 <dcgettext@plt>
   1427c:	mov	r2, r0
   14280:	ldr	r3, [r7]
   14284:	ldr	r0, [r7, #4]
   14288:	str	r0, [sp]
   1428c:	b	1437c <__assert_fail@plt+0x335c>
   14290:	movw	r1, #23559	; 0x5c07
   14294:	movt	r1, #1
   14298:	mov	r0, #0
   1429c:	mov	r2, #5
   142a0:	bl	10e58 <dcgettext@plt>
   142a4:	mov	r2, r0
   142a8:	ldr	r3, [r7]
   142ac:	ldmib	r7, {r0, r1}
   142b0:	stm	sp, {r0, r1}
   142b4:	b	1437c <__assert_fail@plt+0x335c>
   142b8:	movw	r1, #23587	; 0x5c23
   142bc:	movt	r1, #1
   142c0:	mov	r0, #0
   142c4:	mov	r2, #5
   142c8:	bl	10e58 <dcgettext@plt>
   142cc:	mov	r2, r0
   142d0:	ldr	r3, [r7]
   142d4:	ldmib	r7, {r0, r1, r7}
   142d8:	stm	sp, {r0, r1, r7}
   142dc:	b	1437c <__assert_fail@plt+0x335c>
   142e0:	movw	r1, #23619	; 0x5c43
   142e4:	movt	r1, #1
   142e8:	mov	r0, #0
   142ec:	mov	r2, #5
   142f0:	bl	10e58 <dcgettext@plt>
   142f4:	mov	r2, r0
   142f8:	ldr	r3, [r7]
   142fc:	ldmib	r7, {r0, r1, r6, r7}
   14300:	stm	sp, {r0, r1, r6, r7}
   14304:	b	1437c <__assert_fail@plt+0x335c>
   14308:	movw	r1, #23655	; 0x5c67
   1430c:	movt	r1, #1
   14310:	mov	r0, #0
   14314:	mov	r2, #5
   14318:	bl	10e58 <dcgettext@plt>
   1431c:	mov	r2, r0
   14320:	ldr	r3, [r7]
   14324:	ldmib	r7, {r0, r1, r6}
   14328:	ldr	r5, [r7, #16]
   1432c:	ldr	r7, [r7, #20]
   14330:	stm	sp, {r0, r1, r6}
   14334:	str	r5, [sp, #12]
   14338:	str	r7, [sp, #16]
   1433c:	b	1437c <__assert_fail@plt+0x335c>
   14340:	movw	r1, #23695	; 0x5c8f
   14344:	movt	r1, #1
   14348:	mov	r0, #0
   1434c:	mov	r2, #5
   14350:	bl	10e58 <dcgettext@plt>
   14354:	mov	r2, r0
   14358:	ldr	r3, [r7]
   1435c:	ldmib	r7, {r0, r1, r6}
   14360:	ldr	r5, [r7, #16]
   14364:	ldr	r4, [r7, #20]
   14368:	ldr	r7, [r7, #24]
   1436c:	stm	sp, {r0, r1, r6}
   14370:	str	r5, [sp, #12]
   14374:	str	r4, [sp, #16]
   14378:	str	r7, [sp, #20]
   1437c:	mov	r0, r8
   14380:	mov	r1, #1
   14384:	b	14430 <__assert_fail@plt+0x3410>
   14388:	movw	r1, #23787	; 0x5ceb
   1438c:	movt	r1, #1
   14390:	mov	r0, #0
   14394:	mov	r2, #5
   14398:	bl	10e58 <dcgettext@plt>
   1439c:	mov	ip, r0
   143a0:	ldr	r3, [r7]
   143a4:	ldr	r0, [r7, #4]
   143a8:	ldr	r1, [r7, #8]
   143ac:	ldr	r6, [r7, #12]
   143b0:	ldr	r5, [r7, #16]
   143b4:	ldr	r4, [r7, #20]
   143b8:	ldr	r2, [r7, #24]
   143bc:	ldr	lr, [r7, #28]
   143c0:	ldr	r7, [r7, #32]
   143c4:	stm	sp, {r0, r1, r6}
   143c8:	str	r5, [sp, #12]
   143cc:	str	r4, [sp, #16]
   143d0:	str	r2, [sp, #20]
   143d4:	str	lr, [sp, #24]
   143d8:	str	r7, [sp, #28]
   143dc:	b	14424 <__assert_fail@plt+0x3404>
   143e0:	movw	r1, #23739	; 0x5cbb
   143e4:	movt	r1, #1
   143e8:	mov	r0, #0
   143ec:	mov	r2, #5
   143f0:	bl	10e58 <dcgettext@plt>
   143f4:	mov	ip, r0
   143f8:	ldr	r3, [r7]
   143fc:	ldmib	r7, {r0, r1, r6}
   14400:	ldr	r5, [r7, #16]
   14404:	ldr	r4, [r7, #20]
   14408:	ldr	r2, [r7, #24]
   1440c:	ldr	r7, [r7, #28]
   14410:	stm	sp, {r0, r1, r6}
   14414:	str	r5, [sp, #12]
   14418:	str	r4, [sp, #16]
   1441c:	str	r2, [sp, #20]
   14420:	str	r7, [sp, #24]
   14424:	mov	r0, r8
   14428:	mov	r1, #1
   1442c:	mov	r2, ip
   14430:	bl	10f84 <__fprintf_chk@plt>
   14434:	sub	sp, fp, #24
   14438:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1443c:	push	{r4, sl, fp, lr}
   14440:	add	fp, sp, #8
   14444:	sub	sp, sp, #8
   14448:	mov	lr, #0
   1444c:	ldr	ip, [fp, #8]
   14450:	ldr	r4, [ip, lr, lsl #2]
   14454:	add	lr, lr, #1
   14458:	cmp	r4, #0
   1445c:	bne	14450 <__assert_fail@plt+0x3430>
   14460:	sub	r4, lr, #1
   14464:	str	ip, [sp]
   14468:	str	r4, [sp, #4]
   1446c:	bl	14108 <__assert_fail@plt+0x30e8>
   14470:	sub	sp, fp, #8
   14474:	pop	{r4, sl, fp, pc}
   14478:	push	{r4, r5, fp, lr}
   1447c:	add	fp, sp, #8
   14480:	sub	sp, sp, #48	; 0x30
   14484:	mov	ip, #0
   14488:	ldr	r4, [fp, #8]
   1448c:	add	lr, sp, #8
   14490:	ldr	r5, [r4]
   14494:	str	r5, [lr, ip, lsl #2]
   14498:	cmp	r5, #0
   1449c:	beq	144b4 <__assert_fail@plt+0x3494>
   144a0:	add	ip, ip, #1
   144a4:	add	r4, r4, #4
   144a8:	cmp	ip, #10
   144ac:	bne	14490 <__assert_fail@plt+0x3470>
   144b0:	mov	ip, #10
   144b4:	str	lr, [sp]
   144b8:	str	ip, [sp, #4]
   144bc:	bl	14108 <__assert_fail@plt+0x30e8>
   144c0:	sub	sp, fp, #8
   144c4:	pop	{r4, r5, fp, pc}
   144c8:	push	{fp, lr}
   144cc:	mov	fp, sp
   144d0:	sub	sp, sp, #8
   144d4:	add	ip, fp, #8
   144d8:	str	ip, [sp, #4]
   144dc:	str	ip, [sp]
   144e0:	bl	14478 <__assert_fail@plt+0x3458>
   144e4:	mov	sp, fp
   144e8:	pop	{fp, pc}
   144ec:	push	{fp, lr}
   144f0:	mov	fp, sp
   144f4:	movw	r0, #24908	; 0x614c
   144f8:	movt	r0, #2
   144fc:	ldr	r1, [r0]
   14500:	movw	r0, #21926	; 0x55a6
   14504:	movt	r0, #1
   14508:	bl	10de0 <fputs_unlocked@plt>
   1450c:	movw	r1, #23899	; 0x5d5b
   14510:	movt	r1, #1
   14514:	mov	r0, #0
   14518:	mov	r2, #5
   1451c:	bl	10e58 <dcgettext@plt>
   14520:	mov	r1, r0
   14524:	movw	r2, #23919	; 0x5d6f
   14528:	movt	r2, #1
   1452c:	mov	r0, #1
   14530:	bl	10f6c <__printf_chk@plt>
   14534:	movw	r1, #23941	; 0x5d85
   14538:	movt	r1, #1
   1453c:	mov	r0, #0
   14540:	mov	r2, #5
   14544:	bl	10e58 <dcgettext@plt>
   14548:	mov	r1, r0
   1454c:	movw	r2, #21456	; 0x53d0
   14550:	movt	r2, #1
   14554:	movw	r3, #21735	; 0x54e7
   14558:	movt	r3, #1
   1455c:	mov	r0, #1
   14560:	bl	10f6c <__printf_chk@plt>
   14564:	movw	r1, #23961	; 0x5d99
   14568:	movt	r1, #1
   1456c:	mov	r0, #0
   14570:	mov	r2, #5
   14574:	bl	10e58 <dcgettext@plt>
   14578:	mov	r1, r0
   1457c:	movw	r2, #24000	; 0x5dc0
   14580:	movt	r2, #1
   14584:	mov	r0, #1
   14588:	pop	{fp, lr}
   1458c:	b	10f6c <__printf_chk@plt>
   14590:	b	14594 <__assert_fail@plt+0x3574>
   14594:	push	{r4, r5, r6, sl, fp, lr}
   14598:	add	fp, sp, #16
   1459c:	mov	r4, r2
   145a0:	mov	r5, r1
   145a4:	mov	r6, r0
   145a8:	bl	14f08 <__assert_fail@plt+0x3ee8>
   145ac:	cmp	r0, #0
   145b0:	popne	{r4, r5, r6, sl, fp, pc}
   145b4:	cmp	r6, #0
   145b8:	beq	145cc <__assert_fail@plt+0x35ac>
   145bc:	cmp	r5, #0
   145c0:	cmpne	r4, #0
   145c4:	bne	145cc <__assert_fail@plt+0x35ac>
   145c8:	pop	{r4, r5, r6, sl, fp, pc}
   145cc:	bl	14958 <__assert_fail@plt+0x3938>
   145d0:	push	{fp, lr}
   145d4:	mov	fp, sp
   145d8:	bl	149f0 <__assert_fail@plt+0x39d0>
   145dc:	pop	{fp, lr}
   145e0:	b	145e4 <__assert_fail@plt+0x35c4>
   145e4:	cmp	r0, #0
   145e8:	bxne	lr
   145ec:	push	{fp, lr}
   145f0:	mov	fp, sp
   145f4:	bl	14958 <__assert_fail@plt+0x3938>
   145f8:	push	{fp, lr}
   145fc:	mov	fp, sp
   14600:	bl	14e38 <__assert_fail@plt+0x3e18>
   14604:	pop	{fp, lr}
   14608:	b	145e4 <__assert_fail@plt+0x35c4>
   1460c:	b	145d0 <__assert_fail@plt+0x35b0>
   14610:	push	{r4, r5, fp, lr}
   14614:	add	fp, sp, #8
   14618:	mov	r4, r1
   1461c:	mov	r5, r0
   14620:	bl	14a20 <__assert_fail@plt+0x3a00>
   14624:	cmp	r0, #0
   14628:	popne	{r4, r5, fp, pc}
   1462c:	cmp	r5, #0
   14630:	beq	14640 <__assert_fail@plt+0x3620>
   14634:	cmp	r4, #0
   14638:	bne	14640 <__assert_fail@plt+0x3620>
   1463c:	pop	{r4, r5, fp, pc}
   14640:	bl	14958 <__assert_fail@plt+0x3938>
   14644:	push	{fp, lr}
   14648:	mov	fp, sp
   1464c:	bl	14e3c <__assert_fail@plt+0x3e1c>
   14650:	pop	{fp, lr}
   14654:	b	145e4 <__assert_fail@plt+0x35c4>
   14658:	push	{fp, lr}
   1465c:	mov	fp, sp
   14660:	bl	14e4c <__assert_fail@plt+0x3e2c>
   14664:	pop	{fp, lr}
   14668:	b	145e4 <__assert_fail@plt+0x35c4>
   1466c:	mov	r2, r1
   14670:	mov	r1, r0
   14674:	mov	r0, #0
   14678:	b	14594 <__assert_fail@plt+0x3574>
   1467c:	mov	r2, r1
   14680:	mov	r1, r0
   14684:	mov	r0, #0
   14688:	b	14658 <__assert_fail@plt+0x3638>
   1468c:	mov	r2, #1
   14690:	b	14694 <__assert_fail@plt+0x3674>
   14694:	push	{r4, r5, fp, lr}
   14698:	add	fp, sp, #8
   1469c:	mov	r4, r1
   146a0:	ldr	r5, [r1]
   146a4:	cmp	r0, #0
   146a8:	beq	146c0 <__assert_fail@plt+0x36a0>
   146ac:	mov	r1, #1
   146b0:	add	r1, r1, r5, lsr #1
   146b4:	adds	r5, r5, r1
   146b8:	bcc	146d8 <__assert_fail@plt+0x36b8>
   146bc:	bl	14958 <__assert_fail@plt+0x3938>
   146c0:	cmp	r5, #0
   146c4:	bne	146d8 <__assert_fail@plt+0x36b8>
   146c8:	mov	r1, #64	; 0x40
   146cc:	udiv	r5, r1, r2
   146d0:	cmp	r2, #64	; 0x40
   146d4:	addhi	r5, r5, #1
   146d8:	mov	r1, r5
   146dc:	bl	14594 <__assert_fail@plt+0x3574>
   146e0:	str	r5, [r4]
   146e4:	pop	{r4, r5, fp, pc}
   146e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   146ec:	add	fp, sp, #24
   146f0:	mov	r8, r1
   146f4:	ldr	r6, [r1]
   146f8:	add	r1, r6, r6, asr #1
   146fc:	cmp	r1, r6
   14700:	mvnvs	r1, #-2147483648	; 0x80000000
   14704:	cmp	r1, r3
   14708:	mov	r5, r1
   1470c:	movgt	r5, r3
   14710:	cmn	r3, #1
   14714:	movle	r5, r1
   14718:	ldr	r4, [fp, #8]
   1471c:	cmn	r4, #1
   14720:	ble	14748 <__assert_fail@plt+0x3728>
   14724:	cmp	r4, #0
   14728:	beq	1479c <__assert_fail@plt+0x377c>
   1472c:	cmn	r5, #1
   14730:	ble	14770 <__assert_fail@plt+0x3750>
   14734:	mvn	r7, #-2147483648	; 0x80000000
   14738:	udiv	r1, r7, r4
   1473c:	cmp	r1, r5
   14740:	bge	1479c <__assert_fail@plt+0x377c>
   14744:	b	147ac <__assert_fail@plt+0x378c>
   14748:	cmn	r5, #1
   1474c:	ble	1478c <__assert_fail@plt+0x376c>
   14750:	cmn	r4, #1
   14754:	beq	1479c <__assert_fail@plt+0x377c>
   14758:	mov	r1, #-2147483648	; 0x80000000
   1475c:	sdiv	r1, r1, r4
   14760:	mvn	r7, #-2147483648	; 0x80000000
   14764:	cmp	r1, r5
   14768:	bge	1479c <__assert_fail@plt+0x377c>
   1476c:	b	147ac <__assert_fail@plt+0x378c>
   14770:	beq	1479c <__assert_fail@plt+0x377c>
   14774:	mov	r1, #-2147483648	; 0x80000000
   14778:	sdiv	r1, r1, r5
   1477c:	mvn	r7, #-2147483648	; 0x80000000
   14780:	cmp	r1, r4
   14784:	bge	1479c <__assert_fail@plt+0x377c>
   14788:	b	147ac <__assert_fail@plt+0x378c>
   1478c:	mvn	r7, #-2147483648	; 0x80000000
   14790:	sdiv	r1, r7, r4
   14794:	cmp	r5, r1
   14798:	blt	147ac <__assert_fail@plt+0x378c>
   1479c:	mul	r1, r5, r4
   147a0:	mov	r7, #64	; 0x40
   147a4:	cmp	r1, #63	; 0x3f
   147a8:	bgt	147b4 <__assert_fail@plt+0x3794>
   147ac:	sdiv	r5, r7, r4
   147b0:	mul	r1, r5, r4
   147b4:	cmp	r0, #0
   147b8:	moveq	r7, #0
   147bc:	streq	r7, [r8]
   147c0:	sub	r7, r5, r6
   147c4:	cmp	r7, r2
   147c8:	bge	14874 <__assert_fail@plt+0x3854>
   147cc:	add	r5, r6, r2
   147d0:	mov	r1, #0
   147d4:	cmp	r5, r3
   147d8:	mov	r2, #0
   147dc:	movwgt	r2, #1
   147e0:	cmn	r3, #1
   147e4:	movwgt	r1, #1
   147e8:	cmp	r5, r6
   147ec:	bvs	1485c <__assert_fail@plt+0x383c>
   147f0:	ands	r1, r1, r2
   147f4:	bne	1485c <__assert_fail@plt+0x383c>
   147f8:	cmn	r4, #1
   147fc:	ble	14824 <__assert_fail@plt+0x3804>
   14800:	cmp	r4, #0
   14804:	beq	14870 <__assert_fail@plt+0x3850>
   14808:	cmn	r5, #1
   1480c:	ble	14848 <__assert_fail@plt+0x3828>
   14810:	mvn	r1, #-2147483648	; 0x80000000
   14814:	udiv	r1, r1, r4
   14818:	cmp	r1, r5
   1481c:	bge	14870 <__assert_fail@plt+0x3850>
   14820:	b	1485c <__assert_fail@plt+0x383c>
   14824:	cmn	r5, #1
   14828:	ble	14860 <__assert_fail@plt+0x3840>
   1482c:	cmn	r4, #1
   14830:	beq	14870 <__assert_fail@plt+0x3850>
   14834:	mov	r1, #-2147483648	; 0x80000000
   14838:	sdiv	r1, r1, r4
   1483c:	cmp	r1, r5
   14840:	bge	14870 <__assert_fail@plt+0x3850>
   14844:	b	1485c <__assert_fail@plt+0x383c>
   14848:	beq	14870 <__assert_fail@plt+0x3850>
   1484c:	mov	r1, #-2147483648	; 0x80000000
   14850:	sdiv	r1, r1, r5
   14854:	cmp	r1, r4
   14858:	bge	14870 <__assert_fail@plt+0x3850>
   1485c:	bl	14958 <__assert_fail@plt+0x3938>
   14860:	mvn	r1, #-2147483648	; 0x80000000
   14864:	sdiv	r1, r1, r4
   14868:	cmp	r5, r1
   1486c:	blt	1485c <__assert_fail@plt+0x383c>
   14870:	mul	r1, r5, r4
   14874:	bl	14610 <__assert_fail@plt+0x35f0>
   14878:	str	r5, [r8]
   1487c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14880:	mov	r1, #1
   14884:	b	14888 <__assert_fail@plt+0x3868>
   14888:	push	{fp, lr}
   1488c:	mov	fp, sp
   14890:	bl	1499c <__assert_fail@plt+0x397c>
   14894:	pop	{fp, lr}
   14898:	b	145e4 <__assert_fail@plt+0x35c4>
   1489c:	mov	r1, #1
   148a0:	b	148a4 <__assert_fail@plt+0x3884>
   148a4:	push	{fp, lr}
   148a8:	mov	fp, sp
   148ac:	bl	14e48 <__assert_fail@plt+0x3e28>
   148b0:	pop	{fp, lr}
   148b4:	b	145e4 <__assert_fail@plt+0x35c4>
   148b8:	push	{r4, r5, fp, lr}
   148bc:	add	fp, sp, #8
   148c0:	mov	r4, r1
   148c4:	mov	r5, r0
   148c8:	mov	r0, r1
   148cc:	bl	145d0 <__assert_fail@plt+0x35b0>
   148d0:	mov	r1, r5
   148d4:	mov	r2, r4
   148d8:	pop	{r4, r5, fp, lr}
   148dc:	b	10e34 <memcpy@plt>
   148e0:	push	{r4, r5, fp, lr}
   148e4:	add	fp, sp, #8
   148e8:	mov	r4, r1
   148ec:	mov	r5, r0
   148f0:	mov	r0, r1
   148f4:	bl	145f8 <__assert_fail@plt+0x35d8>
   148f8:	mov	r1, r5
   148fc:	mov	r2, r4
   14900:	pop	{r4, r5, fp, lr}
   14904:	b	10e34 <memcpy@plt>
   14908:	push	{r4, r5, fp, lr}
   1490c:	add	fp, sp, #8
   14910:	mov	r4, r1
   14914:	mov	r5, r0
   14918:	add	r0, r1, #1
   1491c:	bl	145f8 <__assert_fail@plt+0x35d8>
   14920:	mov	r1, #0
   14924:	strb	r1, [r0, r4]
   14928:	mov	r1, r5
   1492c:	mov	r2, r4
   14930:	pop	{r4, r5, fp, lr}
   14934:	b	10e34 <memcpy@plt>
   14938:	push	{r4, sl, fp, lr}
   1493c:	add	fp, sp, #8
   14940:	mov	r4, r0
   14944:	bl	10f3c <strlen@plt>
   14948:	add	r1, r0, #1
   1494c:	mov	r0, r4
   14950:	pop	{r4, sl, fp, lr}
   14954:	b	148b8 <__assert_fail@plt+0x3898>
   14958:	push	{fp, lr}
   1495c:	mov	fp, sp
   14960:	movw	r0, #24812	; 0x60ec
   14964:	movt	r0, #2
   14968:	ldr	r4, [r0]
   1496c:	movw	r1, #24076	; 0x5e0c
   14970:	movt	r1, #1
   14974:	mov	r0, #0
   14978:	mov	r2, #5
   1497c:	bl	10e58 <dcgettext@plt>
   14980:	mov	r3, r0
   14984:	movw	r2, #22349	; 0x574d
   14988:	movt	r2, #1
   1498c:	mov	r0, r4
   14990:	mov	r1, #0
   14994:	bl	10ed0 <error@plt>
   14998:	bl	10ffc <abort@plt>
   1499c:	clz	r2, r1
   149a0:	lsr	r2, r2, #5
   149a4:	clz	r3, r0
   149a8:	lsr	r3, r3, #5
   149ac:	orrs	r2, r3, r2
   149b0:	movwne	r1, #1
   149b4:	movwne	r0, #1
   149b8:	cmp	r1, #0
   149bc:	beq	149ec <__assert_fail@plt+0x39cc>
   149c0:	mvn	r2, #-2147483648	; 0x80000000
   149c4:	udiv	r2, r2, r1
   149c8:	cmp	r2, r0
   149cc:	bcs	149ec <__assert_fail@plt+0x39cc>
   149d0:	push	{fp, lr}
   149d4:	mov	fp, sp
   149d8:	bl	10f48 <__errno_location@plt>
   149dc:	mov	r1, #12
   149e0:	str	r1, [r0]
   149e4:	mov	r0, #0
   149e8:	pop	{fp, pc}
   149ec:	b	10dd4 <calloc@plt>
   149f0:	cmp	r0, #0
   149f4:	movweq	r0, #1
   149f8:	cmn	r0, #1
   149fc:	ble	14a04 <__assert_fail@plt+0x39e4>
   14a00:	b	10edc <malloc@plt>
   14a04:	push	{fp, lr}
   14a08:	mov	fp, sp
   14a0c:	bl	10f48 <__errno_location@plt>
   14a10:	mov	r1, #12
   14a14:	str	r1, [r0]
   14a18:	mov	r0, #0
   14a1c:	pop	{fp, pc}
   14a20:	push	{fp, lr}
   14a24:	mov	fp, sp
   14a28:	cmp	r0, #0
   14a2c:	beq	14a48 <__assert_fail@plt+0x3a28>
   14a30:	cmp	r1, #0
   14a34:	beq	14a54 <__assert_fail@plt+0x3a34>
   14a38:	cmn	r1, #1
   14a3c:	ble	14a60 <__assert_fail@plt+0x3a40>
   14a40:	pop	{fp, lr}
   14a44:	b	10e64 <realloc@plt>
   14a48:	mov	r0, r1
   14a4c:	pop	{fp, lr}
   14a50:	b	149f0 <__assert_fail@plt+0x39d0>
   14a54:	bl	1242c <__assert_fail@plt+0x140c>
   14a58:	mov	r0, #0
   14a5c:	pop	{fp, pc}
   14a60:	bl	10f48 <__errno_location@plt>
   14a64:	mov	r1, #12
   14a68:	str	r1, [r0]
   14a6c:	mov	r0, #0
   14a70:	pop	{fp, pc}
   14a74:	mov	r1, r0
   14a78:	sub	r2, r0, #65	; 0x41
   14a7c:	mov	r0, #1
   14a80:	cmp	r2, #26
   14a84:	subcs	r2, r1, #97	; 0x61
   14a88:	cmpcs	r2, #26
   14a8c:	bcs	14a94 <__assert_fail@plt+0x3a74>
   14a90:	bx	lr
   14a94:	sub	r1, r1, #48	; 0x30
   14a98:	cmp	r1, #10
   14a9c:	movcs	r0, #0
   14aa0:	bx	lr
   14aa4:	mov	r1, r0
   14aa8:	sub	r2, r0, #65	; 0x41
   14aac:	mov	r0, #1
   14ab0:	cmp	r2, #26
   14ab4:	subcs	r1, r1, #97	; 0x61
   14ab8:	cmpcs	r1, #26
   14abc:	movcs	r0, #0
   14ac0:	bx	lr
   14ac4:	mov	r1, #0
   14ac8:	cmp	r0, #128	; 0x80
   14acc:	movwcc	r1, #1
   14ad0:	mov	r0, r1
   14ad4:	bx	lr
   14ad8:	sub	r1, r0, #9
   14adc:	clz	r1, r1
   14ae0:	lsr	r1, r1, #5
   14ae4:	sub	r0, r0, #32
   14ae8:	clz	r0, r0
   14aec:	lsr	r0, r0, #5
   14af0:	orr	r0, r0, r1
   14af4:	bx	lr
   14af8:	mov	r1, r0
   14afc:	mov	r0, #1
   14b00:	cmp	r1, #32
   14b04:	bxcc	lr
   14b08:	cmp	r1, #127	; 0x7f
   14b0c:	movne	r0, #0
   14b10:	bx	lr
   14b14:	sub	r1, r0, #48	; 0x30
   14b18:	mov	r0, #0
   14b1c:	cmp	r1, #10
   14b20:	movwcc	r0, #1
   14b24:	bx	lr
   14b28:	sub	r1, r0, #33	; 0x21
   14b2c:	mov	r0, #0
   14b30:	cmp	r1, #94	; 0x5e
   14b34:	movwcc	r0, #1
   14b38:	bx	lr
   14b3c:	sub	r1, r0, #97	; 0x61
   14b40:	mov	r0, #0
   14b44:	cmp	r1, #26
   14b48:	movwcc	r0, #1
   14b4c:	bx	lr
   14b50:	sub	r1, r0, #32
   14b54:	mov	r0, #0
   14b58:	cmp	r1, #95	; 0x5f
   14b5c:	movwcc	r0, #1
   14b60:	bx	lr
   14b64:	sub	r1, r0, #33	; 0x21
   14b68:	cmp	r1, #93	; 0x5d
   14b6c:	bhi	14cf8 <__assert_fail@plt+0x3cd8>
   14b70:	mov	r0, #1
   14b74:	add	r2, pc, #0
   14b78:	ldr	pc, [r2, r1, lsl #2]
   14b7c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14b80:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14b84:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14b88:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14b8c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14b90:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14b94:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14b98:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14b9c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ba0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ba4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ba8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14bac:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14bb0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14bb4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14bb8:	strdeq	r4, [r1], -r8
   14bbc:	strdeq	r4, [r1], -r8
   14bc0:	strdeq	r4, [r1], -r8
   14bc4:	strdeq	r4, [r1], -r8
   14bc8:	strdeq	r4, [r1], -r8
   14bcc:	strdeq	r4, [r1], -r8
   14bd0:	strdeq	r4, [r1], -r8
   14bd4:	strdeq	r4, [r1], -r8
   14bd8:	strdeq	r4, [r1], -r8
   14bdc:	strdeq	r4, [r1], -r8
   14be0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14be4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14be8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14bec:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14bf0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14bf4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14bf8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14bfc:	strdeq	r4, [r1], -r8
   14c00:	strdeq	r4, [r1], -r8
   14c04:	strdeq	r4, [r1], -r8
   14c08:	strdeq	r4, [r1], -r8
   14c0c:	strdeq	r4, [r1], -r8
   14c10:	strdeq	r4, [r1], -r8
   14c14:	strdeq	r4, [r1], -r8
   14c18:	strdeq	r4, [r1], -r8
   14c1c:	strdeq	r4, [r1], -r8
   14c20:	strdeq	r4, [r1], -r8
   14c24:	strdeq	r4, [r1], -r8
   14c28:	strdeq	r4, [r1], -r8
   14c2c:	strdeq	r4, [r1], -r8
   14c30:	strdeq	r4, [r1], -r8
   14c34:	strdeq	r4, [r1], -r8
   14c38:	strdeq	r4, [r1], -r8
   14c3c:	strdeq	r4, [r1], -r8
   14c40:	strdeq	r4, [r1], -r8
   14c44:	strdeq	r4, [r1], -r8
   14c48:	strdeq	r4, [r1], -r8
   14c4c:	strdeq	r4, [r1], -r8
   14c50:	strdeq	r4, [r1], -r8
   14c54:	strdeq	r4, [r1], -r8
   14c58:	strdeq	r4, [r1], -r8
   14c5c:	strdeq	r4, [r1], -r8
   14c60:	strdeq	r4, [r1], -r8
   14c64:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14c68:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14c6c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14c70:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14c74:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14c78:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14c7c:	strdeq	r4, [r1], -r8
   14c80:	strdeq	r4, [r1], -r8
   14c84:	strdeq	r4, [r1], -r8
   14c88:	strdeq	r4, [r1], -r8
   14c8c:	strdeq	r4, [r1], -r8
   14c90:	strdeq	r4, [r1], -r8
   14c94:	strdeq	r4, [r1], -r8
   14c98:	strdeq	r4, [r1], -r8
   14c9c:	strdeq	r4, [r1], -r8
   14ca0:	strdeq	r4, [r1], -r8
   14ca4:	strdeq	r4, [r1], -r8
   14ca8:	strdeq	r4, [r1], -r8
   14cac:	strdeq	r4, [r1], -r8
   14cb0:	strdeq	r4, [r1], -r8
   14cb4:	strdeq	r4, [r1], -r8
   14cb8:	strdeq	r4, [r1], -r8
   14cbc:	strdeq	r4, [r1], -r8
   14cc0:	strdeq	r4, [r1], -r8
   14cc4:	strdeq	r4, [r1], -r8
   14cc8:	strdeq	r4, [r1], -r8
   14ccc:	strdeq	r4, [r1], -r8
   14cd0:	strdeq	r4, [r1], -r8
   14cd4:	strdeq	r4, [r1], -r8
   14cd8:	strdeq	r4, [r1], -r8
   14cdc:	strdeq	r4, [r1], -r8
   14ce0:	strdeq	r4, [r1], -r8
   14ce4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ce8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cec:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cf0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cf4:	bx	lr
   14cf8:	mov	r0, #0
   14cfc:	bx	lr
   14d00:	sub	r0, r0, #9
   14d04:	cmp	r0, #23
   14d08:	movhi	r0, #0
   14d0c:	bxhi	lr
   14d10:	bic	r0, r0, #-16777216	; 0xff000000
   14d14:	movw	r1, #31
   14d18:	movt	r1, #128	; 0x80
   14d1c:	mov	r2, #1
   14d20:	and	r0, r2, r1, lsr r0
   14d24:	bx	lr
   14d28:	sub	r1, r0, #65	; 0x41
   14d2c:	mov	r0, #0
   14d30:	cmp	r1, #26
   14d34:	movwcc	r0, #1
   14d38:	bx	lr
   14d3c:	mov	r1, r0
   14d40:	sub	r2, r0, #48	; 0x30
   14d44:	mov	r0, #1
   14d48:	cmp	r2, #22
   14d4c:	bhi	14d64 <__assert_fail@plt+0x3d44>
   14d50:	mov	ip, #1
   14d54:	movw	r3, #1023	; 0x3ff
   14d58:	movt	r3, #126	; 0x7e
   14d5c:	tst	r3, ip, lsl r2
   14d60:	bxne	lr
   14d64:	sub	r1, r1, #97	; 0x61
   14d68:	cmp	r1, #6
   14d6c:	movcs	r0, #0
   14d70:	bxcs	lr
   14d74:	bx	lr
   14d78:	sub	r1, r0, #65	; 0x41
   14d7c:	cmp	r1, #26
   14d80:	addcc	r0, r0, #32
   14d84:	bx	lr
   14d88:	sub	r1, r0, #97	; 0x61
   14d8c:	cmp	r1, #26
   14d90:	subcc	r0, r0, #32
   14d94:	bx	lr
   14d98:	push	{r4, r5, r6, sl, fp, lr}
   14d9c:	add	fp, sp, #16
   14da0:	mov	r4, r0
   14da4:	bl	10eac <__fpending@plt>
   14da8:	mov	r5, r0
   14dac:	mov	r0, r4
   14db0:	bl	10eb8 <ferror_unlocked@plt>
   14db4:	mov	r6, r0
   14db8:	mov	r0, r4
   14dbc:	bl	12324 <__assert_fail@plt+0x1304>
   14dc0:	cmp	r6, #0
   14dc4:	beq	14de8 <__assert_fail@plt+0x3dc8>
   14dc8:	mvn	r4, #0
   14dcc:	cmp	r0, #0
   14dd0:	bne	14e14 <__assert_fail@plt+0x3df4>
   14dd4:	bl	10f48 <__errno_location@plt>
   14dd8:	mov	r1, #0
   14ddc:	str	r1, [r0]
   14de0:	mov	r0, r4
   14de4:	pop	{r4, r5, r6, sl, fp, pc}
   14de8:	cmp	r0, #0
   14dec:	mov	r4, r0
   14df0:	mvnne	r4, #0
   14df4:	cmp	r5, #0
   14df8:	bne	14e14 <__assert_fail@plt+0x3df4>
   14dfc:	cmp	r0, #0
   14e00:	beq	14e14 <__assert_fail@plt+0x3df4>
   14e04:	bl	10f48 <__errno_location@plt>
   14e08:	ldr	r0, [r0]
   14e0c:	subs	r4, r0, #9
   14e10:	mvnne	r4, #0
   14e14:	mov	r0, r4
   14e18:	pop	{r4, r5, r6, sl, fp, pc}
   14e1c:	push	{fp, lr}
   14e20:	mov	fp, sp
   14e24:	bl	10f48 <__errno_location@plt>
   14e28:	mov	r1, #12
   14e2c:	str	r1, [r0]
   14e30:	mov	r0, #0
   14e34:	pop	{fp, pc}
   14e38:	b	149f0 <__assert_fail@plt+0x39d0>
   14e3c:	cmp	r1, #0
   14e40:	orreq	r1, r1, #1
   14e44:	b	14a20 <__assert_fail@plt+0x3a00>
   14e48:	b	1499c <__assert_fail@plt+0x397c>
   14e4c:	clz	r3, r2
   14e50:	lsr	ip, r3, #5
   14e54:	clz	r3, r1
   14e58:	lsr	r3, r3, #5
   14e5c:	orrs	r3, r3, ip
   14e60:	movwne	r1, #1
   14e64:	movwne	r2, #1
   14e68:	b	14f08 <__assert_fail@plt+0x3ee8>
   14e6c:	push	{fp, lr}
   14e70:	mov	fp, sp
   14e74:	mov	r0, #14
   14e78:	bl	10fc0 <nl_langinfo@plt>
   14e7c:	movw	r1, #21927	; 0x55a7
   14e80:	movt	r1, #1
   14e84:	cmp	r0, #0
   14e88:	movne	r1, r0
   14e8c:	ldrb	r2, [r1]
   14e90:	movw	r0, #24093	; 0x5e1d
   14e94:	movt	r0, #1
   14e98:	cmp	r2, #0
   14e9c:	movne	r0, r1
   14ea0:	pop	{fp, pc}
   14ea4:	push	{r4, r5, r6, r7, fp, lr}
   14ea8:	add	fp, sp, #16
   14eac:	sub	sp, sp, #8
   14eb0:	mov	r7, r2
   14eb4:	mov	r4, r1
   14eb8:	add	r5, sp, #4
   14ebc:	cmp	r0, #0
   14ec0:	movne	r5, r0
   14ec4:	mov	r0, r5
   14ec8:	bl	10ec4 <mbrtowc@plt>
   14ecc:	mov	r6, r0
   14ed0:	cmp	r7, #0
   14ed4:	beq	14efc <__assert_fail@plt+0x3edc>
   14ed8:	cmn	r6, #2
   14edc:	bcc	14efc <__assert_fail@plt+0x3edc>
   14ee0:	mov	r0, #0
   14ee4:	bl	14f44 <__assert_fail@plt+0x3f24>
   14ee8:	cmp	r0, #0
   14eec:	bne	14efc <__assert_fail@plt+0x3edc>
   14ef0:	ldrb	r0, [r4]
   14ef4:	str	r0, [r5]
   14ef8:	mov	r6, #1
   14efc:	mov	r0, r6
   14f00:	sub	sp, fp, #16
   14f04:	pop	{r4, r5, r6, r7, fp, pc}
   14f08:	cmp	r2, #0
   14f0c:	beq	14f3c <__assert_fail@plt+0x3f1c>
   14f10:	mvn	r3, #0
   14f14:	udiv	r3, r3, r2
   14f18:	cmp	r3, r1
   14f1c:	bcs	14f3c <__assert_fail@plt+0x3f1c>
   14f20:	push	{fp, lr}
   14f24:	mov	fp, sp
   14f28:	bl	10f48 <__errno_location@plt>
   14f2c:	mov	r1, #12
   14f30:	str	r1, [r0]
   14f34:	mov	r0, #0
   14f38:	pop	{fp, pc}
   14f3c:	mul	r1, r2, r1
   14f40:	b	14a20 <__assert_fail@plt+0x3a00>
   14f44:	push	{r4, sl, fp, lr}
   14f48:	add	fp, sp, #8
   14f4c:	sub	sp, sp, #264	; 0x108
   14f50:	add	r1, sp, #7
   14f54:	movw	r2, #257	; 0x101
   14f58:	bl	14fb0 <__assert_fail@plt+0x3f90>
   14f5c:	mov	r4, #0
   14f60:	cmp	r0, #0
   14f64:	bne	14fa4 <__assert_fail@plt+0x3f84>
   14f68:	add	r0, sp, #7
   14f6c:	movw	r1, #24099	; 0x5e23
   14f70:	movt	r1, #1
   14f74:	mov	r2, #2
   14f78:	bl	10f30 <bcmp@plt>
   14f7c:	cmp	r0, #0
   14f80:	beq	14fa4 <__assert_fail@plt+0x3f84>
   14f84:	add	r0, sp, #7
   14f88:	movw	r1, #24101	; 0x5e25
   14f8c:	movt	r1, #1
   14f90:	mov	r2, #6
   14f94:	bl	10f30 <bcmp@plt>
   14f98:	mov	r4, r0
   14f9c:	cmp	r0, #0
   14fa0:	movwne	r4, #1
   14fa4:	mov	r0, r4
   14fa8:	sub	sp, fp, #8
   14fac:	pop	{r4, sl, fp, pc}
   14fb0:	b	14fb4 <__assert_fail@plt+0x3f94>
   14fb4:	push	{r4, r5, r6, r7, fp, lr}
   14fb8:	add	fp, sp, #16
   14fbc:	mov	r6, r2
   14fc0:	mov	r4, r1
   14fc4:	bl	1504c <__assert_fail@plt+0x402c>
   14fc8:	cmp	r0, #0
   14fcc:	beq	14ffc <__assert_fail@plt+0x3fdc>
   14fd0:	mov	r7, r0
   14fd4:	bl	10f3c <strlen@plt>
   14fd8:	cmp	r0, r6
   14fdc:	bcs	15018 <__assert_fail@plt+0x3ff8>
   14fe0:	add	r2, r0, #1
   14fe4:	mov	r0, r4
   14fe8:	mov	r1, r7
   14fec:	bl	10e34 <memcpy@plt>
   14ff0:	mov	r5, #0
   14ff4:	mov	r0, r5
   14ff8:	pop	{r4, r5, r6, r7, fp, pc}
   14ffc:	mov	r5, #22
   15000:	cmp	r6, #0
   15004:	beq	15040 <__assert_fail@plt+0x4020>
   15008:	mov	r0, #0
   1500c:	strb	r0, [r4]
   15010:	mov	r0, r5
   15014:	pop	{r4, r5, r6, r7, fp, pc}
   15018:	mov	r5, #34	; 0x22
   1501c:	cmp	r6, #0
   15020:	beq	15040 <__assert_fail@plt+0x4020>
   15024:	sub	r6, r6, #1
   15028:	mov	r0, r4
   1502c:	mov	r1, r7
   15030:	mov	r2, r6
   15034:	bl	10e34 <memcpy@plt>
   15038:	mov	r0, #0
   1503c:	strb	r0, [r4, r6]
   15040:	mov	r0, r5
   15044:	pop	{r4, r5, r6, r7, fp, pc}
   15048:	b	1504c <__assert_fail@plt+0x402c>
   1504c:	mov	r1, #0
   15050:	b	10fa8 <setlocale@plt>
   15054:	cmp	r3, #0
   15058:	cmpeq	r2, #0
   1505c:	bne	15074 <__assert_fail@plt+0x4054>
   15060:	cmp	r1, #0
   15064:	cmpeq	r0, #0
   15068:	mvnne	r1, #0
   1506c:	mvnne	r0, #0
   15070:	b	15090 <__assert_fail@plt+0x4070>
   15074:	sub	sp, sp, #8
   15078:	push	{sp, lr}
   1507c:	bl	150a0 <__assert_fail@plt+0x4080>
   15080:	ldr	lr, [sp, #4]
   15084:	add	sp, sp, #8
   15088:	pop	{r2, r3}
   1508c:	bx	lr
   15090:	push	{r1, lr}
   15094:	mov	r0, #8
   15098:	bl	10dec <raise@plt>
   1509c:	pop	{r1, pc}
   150a0:	cmp	r1, r3
   150a4:	cmpeq	r0, r2
   150a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150ac:	mov	r4, r0
   150b0:	movcc	r0, #0
   150b4:	mov	r5, r1
   150b8:	ldr	lr, [sp, #36]	; 0x24
   150bc:	movcc	r1, r0
   150c0:	bcc	151bc <__assert_fail@plt+0x419c>
   150c4:	cmp	r3, #0
   150c8:	clzeq	ip, r2
   150cc:	clzne	ip, r3
   150d0:	addeq	ip, ip, #32
   150d4:	cmp	r5, #0
   150d8:	clzeq	r1, r4
   150dc:	addeq	r1, r1, #32
   150e0:	clzne	r1, r5
   150e4:	sub	ip, ip, r1
   150e8:	sub	sl, ip, #32
   150ec:	lsl	r9, r3, ip
   150f0:	rsb	fp, ip, #32
   150f4:	orr	r9, r9, r2, lsl sl
   150f8:	orr	r9, r9, r2, lsr fp
   150fc:	lsl	r8, r2, ip
   15100:	cmp	r5, r9
   15104:	cmpeq	r4, r8
   15108:	movcc	r0, #0
   1510c:	movcc	r1, r0
   15110:	bcc	1512c <__assert_fail@plt+0x410c>
   15114:	mov	r0, #1
   15118:	subs	r4, r4, r8
   1511c:	lsl	r1, r0, sl
   15120:	orr	r1, r1, r0, lsr fp
   15124:	lsl	r0, r0, ip
   15128:	sbc	r5, r5, r9
   1512c:	cmp	ip, #0
   15130:	beq	151bc <__assert_fail@plt+0x419c>
   15134:	lsr	r6, r8, #1
   15138:	orr	r6, r6, r9, lsl #31
   1513c:	lsr	r7, r9, #1
   15140:	mov	r2, ip
   15144:	b	15168 <__assert_fail@plt+0x4148>
   15148:	subs	r3, r4, r6
   1514c:	sbc	r8, r5, r7
   15150:	adds	r3, r3, r3
   15154:	adc	r8, r8, r8
   15158:	adds	r4, r3, #1
   1515c:	adc	r5, r8, #0
   15160:	subs	r2, r2, #1
   15164:	beq	15184 <__assert_fail@plt+0x4164>
   15168:	cmp	r5, r7
   1516c:	cmpeq	r4, r6
   15170:	bcs	15148 <__assert_fail@plt+0x4128>
   15174:	adds	r4, r4, r4
   15178:	adc	r5, r5, r5
   1517c:	subs	r2, r2, #1
   15180:	bne	15168 <__assert_fail@plt+0x4148>
   15184:	lsr	r3, r4, ip
   15188:	orr	r3, r3, r5, lsl fp
   1518c:	lsr	r2, r5, ip
   15190:	orr	r3, r3, r5, lsr sl
   15194:	adds	r0, r0, r4
   15198:	mov	r4, r3
   1519c:	lsl	r3, r2, ip
   151a0:	orr	r3, r3, r4, lsl sl
   151a4:	lsl	ip, r4, ip
   151a8:	orr	r3, r3, r4, lsr fp
   151ac:	adc	r1, r1, r5
   151b0:	subs	r0, r0, ip
   151b4:	mov	r5, r2
   151b8:	sbc	r1, r1, r3
   151bc:	cmp	lr, #0
   151c0:	strdne	r4, [lr]
   151c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   151cc:	mov	r7, r0
   151d0:	ldr	r6, [pc, #72]	; 15220 <__assert_fail@plt+0x4200>
   151d4:	ldr	r5, [pc, #72]	; 15224 <__assert_fail@plt+0x4204>
   151d8:	add	r6, pc, r6
   151dc:	add	r5, pc, r5
   151e0:	sub	r6, r6, r5
   151e4:	mov	r8, r1
   151e8:	mov	r9, r2
   151ec:	bl	10db4 <calloc@plt-0x20>
   151f0:	asrs	r6, r6, #2
   151f4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   151f8:	mov	r4, #0
   151fc:	add	r4, r4, #1
   15200:	ldr	r3, [r5], #4
   15204:	mov	r2, r9
   15208:	mov	r1, r8
   1520c:	mov	r0, r7
   15210:	blx	r3
   15214:	cmp	r6, r4
   15218:	bne	151fc <__assert_fail@plt+0x41dc>
   1521c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15220:	andeq	r0, r1, ip, lsr #26
   15224:	andeq	r0, r1, r4, lsr #26
   15228:	bx	lr
   1522c:	ldr	r3, [pc, #12]	; 15240 <__assert_fail@plt+0x4220>
   15230:	mov	r1, #0
   15234:	add	r3, pc, r3
   15238:	ldr	r2, [r3]
   1523c:	b	10f54 <__cxa_atexit@plt>
   15240:	andeq	r0, r1, r0, lsr #29

Disassembly of section .fini:

00015244 <.fini>:
   15244:	push	{r3, lr}
   15248:	pop	{r3, pc}
