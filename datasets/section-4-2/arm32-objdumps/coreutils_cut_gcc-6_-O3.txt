
../repos/coreutils/src/cut:     file format elf32-littlearm


Disassembly of section .init:

00010d68 <.init>:
   10d68:	push	{r3, lr}
   10d6c:	bl	11458 <__assert_fail@plt+0x424>
   10d70:	pop	{r3, pc}

Disassembly of section .plt:

00010d74 <calloc@plt-0x14>:
   10d74:	push	{lr}		; (str lr, [sp, #-4]!)
   10d78:	ldr	lr, [pc, #4]	; 10d84 <calloc@plt-0x4>
   10d7c:	add	lr, pc, lr
   10d80:	ldr	pc, [lr, #8]!
   10d84:	andeq	r9, r1, ip, ror r2

00010d88 <calloc@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #102400	; 0x19000
   10d90:	ldr	pc, [ip, #636]!	; 0x27c

00010d94 <fputs_unlocked@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #102400	; 0x19000
   10d9c:	ldr	pc, [ip, #628]!	; 0x274

00010da0 <raise@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #102400	; 0x19000
   10da8:	ldr	pc, [ip, #620]!	; 0x26c

00010dac <strcmp@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #102400	; 0x19000
   10db4:	ldr	pc, [ip, #612]!	; 0x264

00010db8 <posix_fadvise64@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #102400	; 0x19000
   10dc0:	ldr	pc, [ip, #604]!	; 0x25c

00010dc4 <fflush@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #102400	; 0x19000
   10dcc:	ldr	pc, [ip, #596]!	; 0x254

00010dd0 <memmove@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #102400	; 0x19000
   10dd8:	ldr	pc, [ip, #588]!	; 0x24c

00010ddc <free@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #102400	; 0x19000
   10de4:	ldr	pc, [ip, #580]!	; 0x244

00010de8 <ferror@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #102400	; 0x19000
   10df0:	ldr	pc, [ip, #572]!	; 0x23c

00010df4 <_exit@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #102400	; 0x19000
   10dfc:	ldr	pc, [ip, #564]!	; 0x234

00010e00 <memcpy@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #102400	; 0x19000
   10e08:	ldr	pc, [ip, #556]!	; 0x22c

00010e0c <mbsinit@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #102400	; 0x19000
   10e14:	ldr	pc, [ip, #548]!	; 0x224

00010e18 <fwrite_unlocked@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #102400	; 0x19000
   10e20:	ldr	pc, [ip, #540]!	; 0x21c

00010e24 <memcmp@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #102400	; 0x19000
   10e2c:	ldr	pc, [ip, #532]!	; 0x214

00010e30 <fputc_unlocked@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #102400	; 0x19000
   10e38:	ldr	pc, [ip, #524]!	; 0x20c

00010e3c <dcgettext@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #102400	; 0x19000
   10e44:	ldr	pc, [ip, #516]!	; 0x204

00010e48 <realloc@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #102400	; 0x19000
   10e50:	ldr	pc, [ip, #508]!	; 0x1fc

00010e54 <textdomain@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #102400	; 0x19000
   10e5c:	ldr	pc, [ip, #500]!	; 0x1f4

00010e60 <iswprint@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #102400	; 0x19000
   10e68:	ldr	pc, [ip, #492]!	; 0x1ec

00010e6c <fwrite@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #102400	; 0x19000
   10e74:	ldr	pc, [ip, #484]!	; 0x1e4

00010e78 <lseek64@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #102400	; 0x19000
   10e80:	ldr	pc, [ip, #476]!	; 0x1dc

00010e84 <__ctype_get_mb_cur_max@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #102400	; 0x19000
   10e8c:	ldr	pc, [ip, #468]!	; 0x1d4

00010e90 <__fpending@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #102400	; 0x19000
   10e98:	ldr	pc, [ip, #460]!	; 0x1cc

00010e9c <mbrtowc@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #102400	; 0x19000
   10ea4:	ldr	pc, [ip, #452]!	; 0x1c4

00010ea8 <error@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #102400	; 0x19000
   10eb0:	ldr	pc, [ip, #444]!	; 0x1bc

00010eb4 <malloc@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #102400	; 0x19000
   10ebc:	ldr	pc, [ip, #436]!	; 0x1b4

00010ec0 <__libc_start_main@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #102400	; 0x19000
   10ec8:	ldr	pc, [ip, #428]!	; 0x1ac

00010ecc <__freading@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #102400	; 0x19000
   10ed4:	ldr	pc, [ip, #420]!	; 0x1a4

00010ed8 <__gmon_start__@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #102400	; 0x19000
   10ee0:	ldr	pc, [ip, #412]!	; 0x19c

00010ee4 <getopt_long@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #102400	; 0x19000
   10eec:	ldr	pc, [ip, #404]!	; 0x194

00010ef0 <__ctype_b_loc@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #102400	; 0x19000
   10ef8:	ldr	pc, [ip, #396]!	; 0x18c

00010efc <exit@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #102400	; 0x19000
   10f04:	ldr	pc, [ip, #388]!	; 0x184

00010f08 <strlen@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #102400	; 0x19000
   10f10:	ldr	pc, [ip, #380]!	; 0x17c

00010f14 <ungetc@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #102400	; 0x19000
   10f1c:	ldr	pc, [ip, #372]!	; 0x174

00010f20 <__errno_location@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #102400	; 0x19000
   10f28:	ldr	pc, [ip, #364]!	; 0x16c

00010f2c <__cxa_atexit@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #102400	; 0x19000
   10f34:	ldr	pc, [ip, #356]!	; 0x164

00010f38 <memset@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #102400	; 0x19000
   10f40:	ldr	pc, [ip, #348]!	; 0x15c

00010f44 <fgetc@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #102400	; 0x19000
   10f4c:	ldr	pc, [ip, #340]!	; 0x154

00010f50 <__printf_chk@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #102400	; 0x19000
   10f58:	ldr	pc, [ip, #332]!	; 0x14c

00010f5c <fileno@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #102400	; 0x19000
   10f64:	ldr	pc, [ip, #324]!	; 0x144

00010f68 <__fprintf_chk@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #102400	; 0x19000
   10f70:	ldr	pc, [ip, #316]!	; 0x13c

00010f74 <memchr@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #102400	; 0x19000
   10f7c:	ldr	pc, [ip, #308]!	; 0x134

00010f80 <fclose@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #102400	; 0x19000
   10f88:	ldr	pc, [ip, #300]!	; 0x12c

00010f8c <fseeko64@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #102400	; 0x19000
   10f94:	ldr	pc, [ip, #292]!	; 0x124

00010f98 <__fread_chk@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #102400	; 0x19000
   10fa0:	ldr	pc, [ip, #284]!	; 0x11c

00010fa4 <__uflow@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #102400	; 0x19000
   10fac:	ldr	pc, [ip, #276]!	; 0x114

00010fb0 <__overflow@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #102400	; 0x19000
   10fb8:	ldr	pc, [ip, #268]!	; 0x10c

00010fbc <setlocale@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #102400	; 0x19000
   10fc4:	ldr	pc, [ip, #260]!	; 0x104

00010fc8 <strrchr@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #102400	; 0x19000
   10fd0:	ldr	pc, [ip, #252]!	; 0xfc

00010fd4 <nl_langinfo@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #102400	; 0x19000
   10fdc:	ldr	pc, [ip, #244]!	; 0xf4

00010fe0 <clearerr_unlocked@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #102400	; 0x19000
   10fe8:	ldr	pc, [ip, #236]!	; 0xec

00010fec <fopen64@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #102400	; 0x19000
   10ff4:	ldr	pc, [ip, #228]!	; 0xe4

00010ff8 <qsort@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #102400	; 0x19000
   11000:	ldr	pc, [ip, #220]!	; 0xdc

00011004 <bindtextdomain@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #102400	; 0x19000
   1100c:	ldr	pc, [ip, #212]!	; 0xd4

00011010 <strncmp@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #102400	; 0x19000
   11018:	ldr	pc, [ip, #204]!	; 0xcc

0001101c <abort@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #102400	; 0x19000
   11024:	ldr	pc, [ip, #196]!	; 0xc4

00011028 <strspn@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #102400	; 0x19000
   11030:	ldr	pc, [ip, #188]!	; 0xbc

00011034 <__assert_fail@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #102400	; 0x19000
   1103c:	ldr	pc, [ip, #180]!	; 0xb4

Disassembly of section .text:

00011040 <.text>:
   11040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11044:	mov	r7, r0
   11048:	sub	sp, sp, #28
   1104c:	ldr	r0, [r1]
   11050:	mov	r5, r1
   11054:	bl	130f4 <__assert_fail@plt+0x20c0>
   11058:	ldr	r1, [pc, #844]	; 113ac <__assert_fail@plt+0x378>
   1105c:	mov	r0, #6
   11060:	bl	10fbc <setlocale@plt>
   11064:	ldr	r1, [pc, #836]	; 113b0 <__assert_fail@plt+0x37c>
   11068:	ldr	r0, [pc, #836]	; 113b4 <__assert_fail@plt+0x380>
   1106c:	bl	11004 <bindtextdomain@plt>
   11070:	ldr	r0, [pc, #828]	; 113b4 <__assert_fail@plt+0x380>
   11074:	bl	10e54 <textdomain@plt>
   11078:	ldr	r0, [pc, #824]	; 113b8 <__assert_fail@plt+0x384>
   1107c:	bl	18ba0 <__assert_fail@plt+0x7b6c>
   11080:	ldr	r6, [pc, #820]	; 113bc <__assert_fail@plt+0x388>
   11084:	mov	r3, #0
   11088:	ldr	r9, [pc, #816]	; 113c0 <__assert_fail@plt+0x38c>
   1108c:	ldr	r8, [pc, #816]	; 113c4 <__assert_fail@plt+0x390>
   11090:	mov	sl, r3
   11094:	mov	fp, #1
   11098:	str	r3, [sp, #16]
   1109c:	str	r3, [sp, #20]
   110a0:	strb	r3, [r6, #4]
   110a4:	strb	r3, [r6, #16]
   110a8:	strb	r3, [r6, #29]
   110ac:	mov	r4, #0
   110b0:	str	r4, [sp]
   110b4:	mov	r3, r9
   110b8:	mov	r2, r8
   110bc:	mov	r1, r5
   110c0:	mov	r0, r7
   110c4:	bl	10ee4 <getopt_long@plt>
   110c8:	cmn	r0, #1
   110cc:	beq	1122c <__assert_fail@plt+0x1f8>
   110d0:	cmp	r0, #102	; 0x66
   110d4:	beq	11148 <__assert_fail@plt+0x114>
   110d8:	ble	11100 <__assert_fail@plt+0xcc>
   110dc:	cmp	r0, #122	; 0x7a
   110e0:	beq	11220 <__assert_fail@plt+0x1ec>
   110e4:	bgt	11128 <__assert_fail@plt+0xf4>
   110e8:	cmp	r0, #110	; 0x6e
   110ec:	beq	110ac <__assert_fail@plt+0x78>
   110f0:	cmp	r0, #115	; 0x73
   110f4:	bne	11218 <__assert_fail@plt+0x1e4>
   110f8:	strb	fp, [r6, #4]
   110fc:	b	110ac <__assert_fail@plt+0x78>
   11100:	cmp	r0, #99	; 0x63
   11104:	bgt	111c4 <__assert_fail@plt+0x190>
   11108:	cmp	r0, #98	; 0x62
   1110c:	bge	11144 <__assert_fail@plt+0x110>
   11110:	cmn	r0, #3
   11114:	beq	1115c <__assert_fail@plt+0x128>
   11118:	cmn	r0, #2
   1111c:	bne	11218 <__assert_fail@plt+0x1e4>
   11120:	mov	r0, r4
   11124:	bl	11d98 <__assert_fail@plt+0xd64>
   11128:	cmp	r0, #256	; 0x100
   1112c:	beq	11198 <__assert_fail@plt+0x164>
   11130:	ldr	r3, [pc, #656]	; 113c8 <__assert_fail@plt+0x394>
   11134:	cmp	r0, r3
   11138:	bne	11218 <__assert_fail@plt+0x1e4>
   1113c:	strb	fp, [r6, #30]
   11140:	b	110ac <__assert_fail@plt+0x78>
   11144:	str	fp, [sp, #16]
   11148:	cmp	sl, #0
   1114c:	bne	111f8 <__assert_fail@plt+0x1c4>
   11150:	ldr	r3, [pc, #628]	; 113cc <__assert_fail@plt+0x398>
   11154:	ldr	sl, [r3]
   11158:	b	110ac <__assert_fail@plt+0x78>
   1115c:	ldr	ip, [pc, #620]	; 113d0 <__assert_fail@plt+0x39c>
   11160:	ldr	r1, [pc, #620]	; 113d4 <__assert_fail@plt+0x3a0>
   11164:	ldr	r3, [pc, #620]	; 113d8 <__assert_fail@plt+0x3a4>
   11168:	ldr	r0, [pc, #620]	; 113dc <__assert_fail@plt+0x3a8>
   1116c:	ldr	r2, [pc, #620]	; 113e0 <__assert_fail@plt+0x3ac>
   11170:	str	r4, [sp, #12]
   11174:	ldr	r0, [r0]
   11178:	ldr	r3, [r3]
   1117c:	stmib	sp, {r1, ip}
   11180:	str	r2, [sp]
   11184:	ldr	r1, [pc, #600]	; 113e4 <__assert_fail@plt+0x3b0>
   11188:	ldr	r2, [pc, #600]	; 113e8 <__assert_fail@plt+0x3b4>
   1118c:	bl	17994 <__assert_fail@plt+0x6960>
   11190:	mov	r0, r4
   11194:	bl	10efc <exit@plt>
   11198:	ldr	r3, [pc, #556]	; 113cc <__assert_fail@plt+0x398>
   1119c:	ldr	r4, [r3]
   111a0:	ldrb	r3, [r4]
   111a4:	cmp	r3, #0
   111a8:	moveq	r0, fp
   111ac:	beq	111b8 <__assert_fail@plt+0x184>
   111b0:	mov	r0, r4
   111b4:	bl	10f08 <strlen@plt>
   111b8:	str	r0, [r6, #20]
   111bc:	str	r4, [r6, #24]
   111c0:	b	110ac <__assert_fail@plt+0x78>
   111c4:	cmp	r0, #100	; 0x64
   111c8:	bne	11218 <__assert_fail@plt+0x1e4>
   111cc:	ldr	r3, [pc, #504]	; 113cc <__assert_fail@plt+0x398>
   111d0:	ldr	r2, [r3]
   111d4:	ldrb	r3, [r2]
   111d8:	cmp	r3, #0
   111dc:	beq	111ec <__assert_fail@plt+0x1b8>
   111e0:	ldrb	r2, [r2, #1]
   111e4:	cmp	r2, #0
   111e8:	bne	113a0 <__assert_fail@plt+0x36c>
   111ec:	strb	r3, [r6, #16]
   111f0:	str	fp, [sp, #20]
   111f4:	b	110ac <__assert_fail@plt+0x78>
   111f8:	ldr	r1, [pc, #492]	; 113ec <__assert_fail@plt+0x3b8>
   111fc:	mov	r2, #5
   11200:	mov	r0, #0
   11204:	bl	10e3c <dcgettext@plt>
   11208:	mov	r1, #0
   1120c:	mov	r2, r0
   11210:	mov	r0, r1
   11214:	bl	10ea8 <error@plt>
   11218:	mov	r0, #1
   1121c:	bl	11d98 <__assert_fail@plt+0xd64>
   11220:	ldr	r3, [pc, #456]	; 113f0 <__assert_fail@plt+0x3bc>
   11224:	strb	r4, [r3]
   11228:	b	110ac <__assert_fail@plt+0x78>
   1122c:	cmp	sl, r4
   11230:	moveq	r2, #5
   11234:	ldreq	r1, [pc, #440]	; 113f4 <__assert_fail@plt+0x3c0>
   11238:	beq	11200 <__assert_fail@plt+0x1cc>
   1123c:	ldr	r3, [sp, #16]
   11240:	cmp	r3, #0
   11244:	beq	11294 <__assert_fail@plt+0x260>
   11248:	ldr	r3, [sp, #20]
   1124c:	cmp	r3, #0
   11250:	movne	r2, #5
   11254:	ldrne	r1, [pc, #412]	; 113f8 <__assert_fail@plt+0x3c4>
   11258:	bne	11200 <__assert_fail@plt+0x1cc>
   1125c:	ldrb	r3, [r6, #4]
   11260:	cmp	r3, #0
   11264:	movne	r2, #5
   11268:	ldrne	r1, [pc, #396]	; 113fc <__assert_fail@plt+0x3c8>
   1126c:	bne	11200 <__assert_fail@plt+0x1cc>
   11270:	ldrb	r3, [r6, #30]
   11274:	mov	r0, sl
   11278:	cmp	r3, #0
   1127c:	bne	11364 <__assert_fail@plt+0x330>
   11280:	mov	r1, #4
   11284:	bl	12184 <__assert_fail@plt+0x1150>
   11288:	mov	r3, #9
   1128c:	strb	r3, [r6, #16]
   11290:	b	112b8 <__assert_fail@plt+0x284>
   11294:	ldrb	r1, [r6, #30]
   11298:	mov	r0, sl
   1129c:	cmp	r1, #0
   112a0:	movne	r1, #2
   112a4:	moveq	r1, #0
   112a8:	bl	12184 <__assert_fail@plt+0x1150>
   112ac:	ldr	r3, [sp, #20]
   112b0:	cmp	r3, #0
   112b4:	beq	11288 <__assert_fail@plt+0x254>
   112b8:	ldr	r3, [r6, #24]
   112bc:	cmp	r3, #0
   112c0:	beq	11370 <__assert_fail@plt+0x33c>
   112c4:	ldr	r9, [pc, #308]	; 11400 <__assert_fail@plt+0x3cc>
   112c8:	ldr	r1, [sp, #16]
   112cc:	ldr	r2, [pc, #304]	; 11404 <__assert_fail@plt+0x3d0>
   112d0:	ldr	r3, [r9]
   112d4:	cmp	r1, #0
   112d8:	ldr	r8, [pc, #296]	; 11408 <__assert_fail@plt+0x3d4>
   112dc:	moveq	r8, r2
   112e0:	cmp	r7, r3
   112e4:	beq	1138c <__assert_fail@plt+0x358>
   112e8:	mov	r4, #1
   112ec:	ble	11318 <__assert_fail@plt+0x2e4>
   112f0:	ldr	r0, [r5, r3, lsl #2]
   112f4:	mov	r1, r8
   112f8:	bl	11c94 <__assert_fail@plt+0xc60>
   112fc:	ldr	r3, [r9]
   11300:	add	r3, r3, #1
   11304:	cmp	r7, r3
   11308:	str	r3, [r9]
   1130c:	and	r4, r4, r0
   11310:	uxtb	r4, r4
   11314:	bgt	112f0 <__assert_fail@plt+0x2bc>
   11318:	ldrb	r3, [r6, #29]
   1131c:	cmp	r3, #0
   11320:	bne	11334 <__assert_fail@plt+0x300>
   11324:	eor	r0, r4, #1
   11328:	uxtb	r0, r0
   1132c:	add	sp, sp, #28
   11330:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11334:	ldr	r3, [pc, #208]	; 1140c <__assert_fail@plt+0x3d8>
   11338:	ldr	r0, [r3]
   1133c:	bl	12aa8 <__assert_fail@plt+0x1a74>
   11340:	cmn	r0, #1
   11344:	bne	11324 <__assert_fail@plt+0x2f0>
   11348:	bl	10f20 <__errno_location@plt>
   1134c:	mov	r4, #0
   11350:	ldr	r2, [pc, #184]	; 11410 <__assert_fail@plt+0x3dc>
   11354:	ldr	r1, [r0]
   11358:	mov	r0, r4
   1135c:	bl	10ea8 <error@plt>
   11360:	b	11324 <__assert_fail@plt+0x2f0>
   11364:	mov	r1, #6
   11368:	bl	12184 <__assert_fail@plt+0x1150>
   1136c:	b	11288 <__assert_fail@plt+0x254>
   11370:	ldrb	r1, [r6, #16]
   11374:	ldr	r2, [pc, #152]	; 11414 <__assert_fail@plt+0x3e0>
   11378:	mov	r3, #1
   1137c:	strb	r1, [r6, #28]
   11380:	str	r2, [r6, #24]
   11384:	str	r3, [r6, #20]
   11388:	b	112c4 <__assert_fail@plt+0x290>
   1138c:	mov	r1, r8
   11390:	ldr	r0, [pc, #120]	; 11410 <__assert_fail@plt+0x3dc>
   11394:	bl	11c94 <__assert_fail@plt+0xc60>
   11398:	mov	r4, r0
   1139c:	b	11318 <__assert_fail@plt+0x2e4>
   113a0:	mov	r2, #5
   113a4:	ldr	r1, [pc, #108]	; 11418 <__assert_fail@plt+0x3e4>
   113a8:	b	11200 <__assert_fail@plt+0x1cc>
   113ac:	muleq	r1, r8, lr
   113b0:	andeq	r9, r1, ip, lsr r4
   113b4:	muleq	r1, r4, r3
   113b8:	andeq	r2, r1, r4, lsl #19
   113bc:	andeq	sl, r2, r8, ror r1
   113c0:	andeq	r8, r1, r8, lsl #24
   113c4:	ldrdeq	r9, [r1], -r0
   113c8:	andeq	r0, r0, r1, lsl #2
   113cc:	andeq	sl, r2, r0, ror r1
   113d0:	andeq	r9, r1, r0, lsr #9
   113d4:			; <UNDEFINED> instruction: 0x000194b0
   113d8:	andeq	sl, r2, r4, lsl #2
   113dc:	andeq	sl, r2, ip, ror #2
   113e0:	andeq	r9, r1, r0, asr #9
   113e4:	ldrdeq	r8, [r1], -r4
   113e8:	muleq	r1, r0, r3
   113ec:	andeq	r9, r1, r4, asr r4
   113f0:	andeq	sl, r2, r0, lsl #2
   113f4:	ldrdeq	r9, [r1], -ip
   113f8:	andeq	r9, r1, r4, lsl r5
   113fc:	andeq	r9, r1, r8, asr r5
   11400:	andeq	sl, r2, r8, asr r1
   11404:	andeq	r1, r1, r4, asr #10
   11408:	andeq	r1, r1, r8, asr #21
   1140c:	andeq	sl, r2, r8, ror #2
   11410:	andeq	r9, r1, r0, lsr #14
   11414:	muleq	r2, r4, r1
   11418:	andeq	r9, r1, r4, ror r4
   1141c:	mov	fp, #0
   11420:	mov	lr, #0
   11424:	pop	{r1}		; (ldr r1, [sp], #4)
   11428:	mov	r2, sp
   1142c:	push	{r2}		; (str r2, [sp, #-4]!)
   11430:	push	{r0}		; (str r0, [sp, #-4]!)
   11434:	ldr	ip, [pc, #16]	; 1144c <__assert_fail@plt+0x418>
   11438:	push	{ip}		; (str ip, [sp, #-4]!)
   1143c:	ldr	r0, [pc, #12]	; 11450 <__assert_fail@plt+0x41c>
   11440:	ldr	r3, [pc, #12]	; 11454 <__assert_fail@plt+0x420>
   11444:	bl	10ec0 <__libc_start_main@plt>
   11448:	bl	1101c <abort@plt>
   1144c:	muleq	r1, ip, fp
   11450:	andeq	r1, r1, r0, asr #32
   11454:	andeq	r8, r1, ip, lsr fp
   11458:	ldr	r3, [pc, #20]	; 11474 <__assert_fail@plt+0x440>
   1145c:	ldr	r2, [pc, #20]	; 11478 <__assert_fail@plt+0x444>
   11460:	add	r3, pc, r3
   11464:	ldr	r2, [r3, r2]
   11468:	cmp	r2, #0
   1146c:	bxeq	lr
   11470:	b	10ed8 <__gmon_start__@plt>
   11474:	muleq	r1, r8, fp
   11478:	strdeq	r0, [r0], -r4
   1147c:	ldr	r3, [pc, #28]	; 114a0 <__assert_fail@plt+0x46c>
   11480:	ldr	r0, [pc, #28]	; 114a4 <__assert_fail@plt+0x470>
   11484:	sub	r3, r3, r0
   11488:	cmp	r3, #6
   1148c:	bxls	lr
   11490:	ldr	r3, [pc, #16]	; 114a8 <__assert_fail@plt+0x474>
   11494:	cmp	r3, #0
   11498:	bxeq	lr
   1149c:	bx	r3
   114a0:	andeq	sl, r2, pc, asr #2
   114a4:	andeq	sl, r2, ip, asr #2
   114a8:	andeq	r0, r0, r0
   114ac:	ldr	r1, [pc, #36]	; 114d8 <__assert_fail@plt+0x4a4>
   114b0:	ldr	r0, [pc, #36]	; 114dc <__assert_fail@plt+0x4a8>
   114b4:	sub	r1, r1, r0
   114b8:	asr	r1, r1, #2
   114bc:	add	r1, r1, r1, lsr #31
   114c0:	asrs	r1, r1, #1
   114c4:	bxeq	lr
   114c8:	ldr	r3, [pc, #16]	; 114e0 <__assert_fail@plt+0x4ac>
   114cc:	cmp	r3, #0
   114d0:	bxeq	lr
   114d4:	bx	r3
   114d8:	andeq	sl, r2, ip, asr #2
   114dc:	andeq	sl, r2, ip, asr #2
   114e0:	andeq	r0, r0, r0
   114e4:	push	{r4, lr}
   114e8:	ldr	r4, [pc, #24]	; 11508 <__assert_fail@plt+0x4d4>
   114ec:	ldrb	r3, [r4]
   114f0:	cmp	r3, #0
   114f4:	popne	{r4, pc}
   114f8:	bl	1147c <__assert_fail@plt+0x448>
   114fc:	mov	r3, #1
   11500:	strb	r3, [r4]
   11504:	pop	{r4, pc}
   11508:	andeq	sl, r2, r4, ror r1
   1150c:	ldr	r0, [pc, #40]	; 1153c <__assert_fail@plt+0x508>
   11510:	ldr	r3, [r0]
   11514:	cmp	r3, #0
   11518:	bne	11520 <__assert_fail@plt+0x4ec>
   1151c:	b	114ac <__assert_fail@plt+0x478>
   11520:	ldr	r3, [pc, #24]	; 11540 <__assert_fail@plt+0x50c>
   11524:	cmp	r3, #0
   11528:	beq	1151c <__assert_fail@plt+0x4e8>
   1152c:	push	{r4, lr}
   11530:	blx	r3
   11534:	pop	{r4, lr}
   11538:	b	114ac <__assert_fail@plt+0x478>
   1153c:	andeq	r9, r2, r4, lsl pc
   11540:	andeq	r0, r0, r0
   11544:	ldr	r2, [pc, #1368]	; 11aa4 <__assert_fail@plt+0xa70>
   11548:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1154c:	mov	r4, r0
   11550:	ldr	r3, [r0, #4]
   11554:	ldr	r1, [r0, #8]
   11558:	ldr	r5, [pc, #1352]	; 11aa8 <__assert_fail@plt+0xa74>
   1155c:	ldr	r2, [r2]
   11560:	cmp	r3, r1
   11564:	sub	sp, sp, #28
   11568:	str	r2, [r5]
   1156c:	bcs	11a64 <__assert_fail@plt+0xa30>
   11570:	add	r2, r3, #1
   11574:	str	r2, [r0, #4]
   11578:	ldrb	r0, [r3]
   1157c:	mov	r1, r4
   11580:	bl	10f14 <ungetc@plt>
   11584:	ldr	r3, [r5]
   11588:	mov	r2, #0
   1158c:	mov	r6, r2
   11590:	str	r2, [sp, #16]
   11594:	ldrd	r2, [r3]
   11598:	ldrb	fp, [r5, #4]
   1159c:	ldr	r7, [pc, #1288]	; 11aac <__assert_fail@plt+0xa78>
   115a0:	cmp	r3, #0
   115a4:	cmpeq	r2, #1
   115a8:	movhi	r3, #1
   115ac:	movls	r3, r6
   115b0:	ldr	r8, [pc, #1272]	; 11ab0 <__assert_fail@plt+0xa7c>
   115b4:	eor	r3, r3, fp
   115b8:	mov	sl, #1
   115bc:	mov	fp, #0
   115c0:	str	r3, [sp, #20]
   115c4:	cmp	fp, #0
   115c8:	ldr	r3, [sp, #20]
   115cc:	cmpeq	sl, #1
   115d0:	movne	r9, #0
   115d4:	andeq	r9, r3, #1
   115d8:	cmp	r9, #0
   115dc:	bne	11744 <__assert_fail@plt+0x710>
   115e0:	ldr	r1, [r5]
   115e4:	ldrd	r2, [r1]
   115e8:	cmp	r3, fp
   115ec:	cmpeq	r2, sl
   115f0:	bhi	116dc <__assert_fail@plt+0x6a8>
   115f4:	ldr	r3, [sp, #16]
   115f8:	cmp	r3, #0
   115fc:	beq	11668 <__assert_fail@plt+0x634>
   11600:	ldr	r3, [r8]
   11604:	ldr	r2, [r5, #20]
   11608:	mov	r1, #1
   1160c:	ldr	r0, [r5, #24]
   11610:	bl	10e18 <fwrite_unlocked@plt>
   11614:	b	11668 <__assert_fail@plt+0x634>
   11618:	add	r2, r3, #1
   1161c:	str	r2, [r4, #4]
   11620:	ldrb	r9, [r3]
   11624:	ldrb	r3, [r5, #16]
   11628:	cmp	r3, r9
   1162c:	beq	11690 <__assert_fail@plt+0x65c>
   11630:	ldrb	r1, [r7]
   11634:	cmp	r1, r9
   11638:	beq	118cc <__assert_fail@plt+0x898>
   1163c:	cmn	r9, #1
   11640:	beq	11924 <__assert_fail@plt+0x8f0>
   11644:	ldr	r0, [r8]
   11648:	ldr	r3, [r0, #20]
   1164c:	ldr	r2, [r0, #24]
   11650:	cmp	r3, r2
   11654:	addcc	r2, r3, #1
   11658:	strcc	r2, [r0, #20]
   1165c:	strbcc	r9, [r3]
   11660:	bcs	11738 <__assert_fail@plt+0x704>
   11664:	mov	r6, r9
   11668:	ldr	r3, [r4, #4]
   1166c:	ldr	r2, [r4, #8]
   11670:	cmp	r3, r2
   11674:	bcc	11618 <__assert_fail@plt+0x5e4>
   11678:	mov	r0, r4
   1167c:	bl	10fa4 <__uflow@plt>
   11680:	ldrb	r3, [r5, #16]
   11684:	mov	r9, r0
   11688:	cmp	r3, r9
   1168c:	bne	11630 <__assert_fail@plt+0x5fc>
   11690:	ldrb	r3, [r7]
   11694:	cmp	r3, r9
   11698:	beq	1198c <__assert_fail@plt+0x958>
   1169c:	mov	r3, #1
   116a0:	mov	r6, r9
   116a4:	str	r3, [sp, #16]
   116a8:	b	11714 <__assert_fail@plt+0x6e0>
   116ac:	add	r2, r3, #1
   116b0:	str	r2, [r4, #4]
   116b4:	ldrb	r0, [r3]
   116b8:	ldrb	r3, [r5, #16]
   116bc:	cmp	r3, r0
   116c0:	beq	11700 <__assert_fail@plt+0x6cc>
   116c4:	ldrb	r1, [r7]
   116c8:	cmp	r1, r0
   116cc:	beq	117e8 <__assert_fail@plt+0x7b4>
   116d0:	cmn	r0, #1
   116d4:	beq	1193c <__assert_fail@plt+0x908>
   116d8:	mov	r6, r0
   116dc:	ldr	r3, [r4, #4]
   116e0:	ldr	r2, [r4, #8]
   116e4:	cmp	r3, r2
   116e8:	bcc	116ac <__assert_fail@plt+0x678>
   116ec:	mov	r0, r4
   116f0:	bl	10fa4 <__uflow@plt>
   116f4:	ldrb	r3, [r5, #16]
   116f8:	cmp	r3, r0
   116fc:	bne	116c4 <__assert_fail@plt+0x690>
   11700:	ldrb	r3, [r7]
   11704:	mov	r9, r0
   11708:	cmp	r3, r0
   1170c:	movne	r6, r0
   11710:	beq	118f0 <__assert_fail@plt+0x8bc>
   11714:	ldr	r1, [r5]
   11718:	adds	sl, sl, #1
   1171c:	adc	fp, fp, #0
   11720:	ldrd	r2, [r1, #8]
   11724:	cmp	fp, r3
   11728:	cmpeq	sl, r2
   1172c:	addhi	r1, r1, #16
   11730:	strhi	r1, [r5]
   11734:	b	115c4 <__assert_fail@plt+0x590>
   11738:	uxtb	r1, r9
   1173c:	bl	10fb0 <__overflow@plt>
   11740:	b	11664 <__assert_fail@plt+0x630>
   11744:	ldrb	r2, [r7]
   11748:	ldrb	r3, [r5, #16]
   1174c:	ldr	r1, [pc, #864]	; 11ab4 <__assert_fail@plt+0xa80>
   11750:	stmib	sp, {r2, r4}
   11754:	str	r3, [sp]
   11758:	mov	r2, #0
   1175c:	mvn	r3, #0
   11760:	add	r0, r1, #4
   11764:	bl	12ca0 <__assert_fail@plt+0x1c6c>
   11768:	subs	r2, r0, #0
   1176c:	blt	11a04 <__assert_fail@plt+0x9d0>
   11770:	beq	11a90 <__assert_fail@plt+0xa5c>
   11774:	ldr	r0, [r5, #12]
   11778:	sub	sl, r2, #1
   1177c:	ldrb	r3, [r5, #16]
   11780:	ldrb	r1, [r0, sl]
   11784:	cmp	r1, r3
   11788:	beq	11954 <__assert_fail@plt+0x920>
   1178c:	ldrb	r3, [r5, #4]
   11790:	cmp	r3, #0
   11794:	bne	11944 <__assert_fail@plt+0x910>
   11798:	ldr	r3, [r8]
   1179c:	mov	r1, #1
   117a0:	bl	10e18 <fwrite_unlocked@plt>
   117a4:	ldr	r3, [r5, #12]
   117a8:	ldrb	r6, [r7]
   117ac:	ldrb	r3, [r3, sl]
   117b0:	cmp	r3, r6
   117b4:	moveq	r6, r3
   117b8:	beq	117dc <__assert_fail@plt+0x7a8>
   117bc:	ldr	r0, [r8]
   117c0:	ldr	r3, [r0, #20]
   117c4:	ldr	r2, [r0, #24]
   117c8:	cmp	r3, r2
   117cc:	addcc	r2, r3, #1
   117d0:	strcc	r2, [r0, #20]
   117d4:	strbcc	r6, [r3]
   117d8:	bcs	11a24 <__assert_fail@plt+0x9f0>
   117dc:	mov	sl, #1
   117e0:	mov	fp, #0
   117e4:	b	115c4 <__assert_fail@plt+0x590>
   117e8:	cmp	r3, r1
   117ec:	mov	r2, r6
   117f0:	mov	r9, r0
   117f4:	mov	r6, r0
   117f8:	beq	118e4 <__assert_fail@plt+0x8b0>
   117fc:	cmp	r9, r3
   11800:	beq	11714 <__assert_fail@plt+0x6e0>
   11804:	ldrb	r1, [r7]
   11808:	cmn	r6, #1
   1180c:	movne	ip, #0
   11810:	moveq	ip, #1
   11814:	sub	r0, r1, r6
   11818:	clz	r0, r0
   1181c:	lsr	r0, r0, #5
   11820:	orrs	lr, ip, r0
   11824:	beq	115c4 <__assert_fail@plt+0x590>
   11828:	ldr	lr, [sp, #16]
   1182c:	str	ip, [sp, #16]
   11830:	cmp	lr, #0
   11834:	bne	11854 <__assert_fail@plt+0x820>
   11838:	ldrb	ip, [r5, #4]
   1183c:	cmp	fp, #0
   11840:	cmpeq	sl, #1
   11844:	eor	ip, ip, #1
   11848:	orrne	ip, ip, #1
   1184c:	cmp	ip, #0
   11850:	beq	11870 <__assert_fail@plt+0x83c>
   11854:	subs	r2, r2, r1
   11858:	movne	r2, #1
   1185c:	cmp	r3, r1
   11860:	movne	r3, r2
   11864:	orreq	r3, r2, #1
   11868:	orrs	r3, r0, r3
   1186c:	bne	11894 <__assert_fail@plt+0x860>
   11870:	ldr	r3, [sp, #16]
   11874:	cmp	r3, #0
   11878:	bne	118c4 <__assert_fail@plt+0x890>
   1187c:	ldr	r3, [pc, #544]	; 11aa4 <__assert_fail@plt+0xa70>
   11880:	mov	sl, #1
   11884:	mov	fp, #0
   11888:	ldr	r3, [r3]
   1188c:	str	r3, [r5]
   11890:	b	115c4 <__assert_fail@plt+0x590>
   11894:	ldr	r0, [r8]
   11898:	ldr	r3, [r0, #20]
   1189c:	ldr	r2, [r0, #24]
   118a0:	cmp	r3, r2
   118a4:	addcc	r2, r3, #1
   118a8:	strcc	r2, [r0, #20]
   118ac:	strbcc	r1, [r3]
   118b0:	bcc	11870 <__assert_fail@plt+0x83c>
   118b4:	bl	10fb0 <__overflow@plt>
   118b8:	ldr	r3, [sp, #16]
   118bc:	cmp	r3, #0
   118c0:	beq	1187c <__assert_fail@plt+0x848>
   118c4:	add	sp, sp, #28
   118c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118cc:	mov	r0, #1
   118d0:	cmp	r3, r1
   118d4:	mov	r2, r6
   118d8:	str	r0, [sp, #16]
   118dc:	mov	r6, r9
   118e0:	bne	117fc <__assert_fail@plt+0x7c8>
   118e4:	cmp	r9, r3
   118e8:	moveq	r6, r2
   118ec:	bne	11808 <__assert_fail@plt+0x7d4>
   118f0:	ldr	r3, [r4, #4]
   118f4:	ldr	r2, [r4, #8]
   118f8:	cmp	r3, r2
   118fc:	bcs	119a4 <__assert_fail@plt+0x970>
   11900:	add	r2, r3, #1
   11904:	str	r2, [r4, #4]
   11908:	ldrb	r0, [r3]
   1190c:	mov	r1, r4
   11910:	bl	10f14 <ungetc@plt>
   11914:	mov	r2, r6
   11918:	ldrb	r3, [r5, #16]
   1191c:	mov	r6, r9
   11920:	b	117fc <__assert_fail@plt+0x7c8>
   11924:	mov	r2, r6
   11928:	mov	r3, #1
   1192c:	str	r3, [sp, #16]
   11930:	ldrb	r3, [r5, #16]
   11934:	mvn	r6, #0
   11938:	b	11804 <__assert_fail@plt+0x7d0>
   1193c:	mov	r2, r6
   11940:	b	11930 <__assert_fail@plt+0x8fc>
   11944:	mov	sl, #1
   11948:	mov	fp, #0
   1194c:	mov	r6, #0
   11950:	b	115c4 <__assert_fail@plt+0x590>
   11954:	ldr	r1, [r5]
   11958:	ldrd	r2, [r1]
   1195c:	cmp	r3, #0
   11960:	cmpeq	r2, #1
   11964:	bls	119d8 <__assert_fail@plt+0x9a4>
   11968:	ldrd	r2, [r1, #8]
   1196c:	mov	sl, #2
   11970:	mov	fp, #0
   11974:	cmp	r3, #0
   11978:	cmpeq	r2, #1
   1197c:	addls	r1, r1, #16
   11980:	strls	r1, [r5]
   11984:	mov	r6, #0
   11988:	b	115e4 <__assert_fail@plt+0x5b0>
   1198c:	mov	r3, #1
   11990:	str	r3, [sp, #16]
   11994:	ldr	r2, [r4, #8]
   11998:	ldr	r3, [r4, #4]
   1199c:	cmp	r3, r2
   119a0:	bcc	11900 <__assert_fail@plt+0x8cc>
   119a4:	mov	r0, r4
   119a8:	bl	10fa4 <__uflow@plt>
   119ac:	cmn	r0, #1
   119b0:	bne	1190c <__assert_fail@plt+0x8d8>
   119b4:	mov	ip, #1
   119b8:	mov	r2, r6
   119bc:	ldr	lr, [sp, #16]
   119c0:	ldrb	r3, [r5, #16]
   119c4:	ldrb	r1, [r7]
   119c8:	mvn	r6, #0
   119cc:	mov	r0, #0
   119d0:	str	ip, [sp, #16]
   119d4:	b	11830 <__assert_fail@plt+0x7fc>
   119d8:	mov	r2, sl
   119dc:	ldr	r3, [r8]
   119e0:	mov	r1, #1
   119e4:	bl	10e18 <fwrite_unlocked@plt>
   119e8:	ldrb	r2, [r5, #16]
   119ec:	ldrb	r3, [r7]
   119f0:	cmp	r2, r3
   119f4:	beq	11a34 <__assert_fail@plt+0xa00>
   119f8:	str	r9, [sp, #16]
   119fc:	ldr	r1, [r5]
   11a00:	b	11968 <__assert_fail@plt+0x934>
   11a04:	ldr	r0, [r5, #12]
   11a08:	bl	12ba8 <__assert_fail@plt+0x1b74>
   11a0c:	ldr	r2, [r4]
   11a10:	mov	r3, #0
   11a14:	tst	r2, #48	; 0x30
   11a18:	str	r3, [r5, #12]
   11a1c:	bne	118c4 <__assert_fail@plt+0x890>
   11a20:	bl	181c4 <__assert_fail@plt+0x7190>
   11a24:	mov	r1, r6
   11a28:	bl	10fb0 <__overflow@plt>
   11a2c:	ldrb	r6, [r7]
   11a30:	b	117dc <__assert_fail@plt+0x7a8>
   11a34:	ldr	r3, [r4, #4]
   11a38:	ldr	r2, [r4, #8]
   11a3c:	cmp	r3, r2
   11a40:	bcs	11a78 <__assert_fail@plt+0xa44>
   11a44:	add	r2, r3, #1
   11a48:	str	r2, [r4, #4]
   11a4c:	ldrb	r0, [r3]
   11a50:	mov	r1, r4
   11a54:	bl	10f14 <ungetc@plt>
   11a58:	ldr	r1, [r5]
   11a5c:	str	r9, [sp, #16]
   11a60:	b	11968 <__assert_fail@plt+0x934>
   11a64:	bl	10fa4 <__uflow@plt>
   11a68:	cmn	r0, #1
   11a6c:	bne	1157c <__assert_fail@plt+0x548>
   11a70:	add	sp, sp, #28
   11a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a78:	mov	r0, r4
   11a7c:	bl	10fa4 <__uflow@plt>
   11a80:	cmn	r0, #1
   11a84:	bne	11a50 <__assert_fail@plt+0xa1c>
   11a88:	ldr	r1, [r5]
   11a8c:	b	11968 <__assert_fail@plt+0x934>
   11a90:	ldr	r3, [pc, #32]	; 11ab8 <__assert_fail@plt+0xa84>
   11a94:	ldr	r2, [pc, #32]	; 11abc <__assert_fail@plt+0xa88>
   11a98:	ldr	r1, [pc, #32]	; 11ac0 <__assert_fail@plt+0xa8c>
   11a9c:	ldr	r0, [pc, #32]	; 11ac4 <__assert_fail@plt+0xa90>
   11aa0:	bl	11034 <__assert_fail@plt>
   11aa4:	andeq	sl, r2, r0, lsr #3
   11aa8:	andeq	sl, r2, r8, ror r1
   11aac:	andeq	sl, r2, r0, lsl #2
   11ab0:	andeq	sl, r2, ip, ror #2
   11ab4:	andeq	sl, r2, r0, lsl #3
   11ab8:	andeq	r8, r1, r4, asr #23
   11abc:	andeq	r0, r0, fp, lsr r1
   11ac0:			; <UNDEFINED> instruction: 0x00018cb8
   11ac4:	andeq	r8, r1, r4, asr #25
   11ac8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11acc:	mov	sl, #0
   11ad0:	ldr	fp, [pc, #428]	; 11c84 <__assert_fail@plt+0xc50>
   11ad4:	ldr	r8, [pc, #428]	; 11c88 <__assert_fail@plt+0xc54>
   11ad8:	ldr	r9, [pc, #428]	; 11c8c <__assert_fail@plt+0xc58>
   11adc:	mov	r2, r8
   11ae0:	sub	sp, sp, #12
   11ae4:	ldr	r3, [fp]
   11ae8:	mov	r6, r0
   11aec:	mov	r4, #0
   11af0:	mov	r5, #0
   11af4:	str	r3, [r2], #28
   11af8:	str	r2, [sp, #4]
   11afc:	ldr	r3, [r6, #4]
   11b00:	ldr	r2, [r6, #8]
   11b04:	cmp	r2, r3
   11b08:	bls	11bbc <__assert_fail@plt+0xb88>
   11b0c:	add	r2, r3, #1
   11b10:	str	r2, [r6, #4]
   11b14:	ldrb	r0, [r9]
   11b18:	ldrb	r7, [r3]
   11b1c:	cmp	r7, r0
   11b20:	beq	11c0c <__assert_fail@plt+0xbd8>
   11b24:	ldr	r1, [r8]
   11b28:	adds	r4, r4, #1
   11b2c:	adc	r5, r5, #0
   11b30:	ldrd	r2, [r1, #8]
   11b34:	cmp	r5, r3
   11b38:	cmpeq	r4, r2
   11b3c:	addhi	r1, r1, #16
   11b40:	strhi	r1, [r8]
   11b44:	ldrd	r2, [r1]
   11b48:	cmp	r3, r5
   11b4c:	cmpeq	r2, r4
   11b50:	bhi	11afc <__assert_fail@plt+0xac8>
   11b54:	ldr	r0, [r8, #24]
   11b58:	ldr	r1, [sp, #4]
   11b5c:	cmp	r0, r1
   11b60:	beq	11b80 <__assert_fail@plt+0xb4c>
   11b64:	cmp	r3, r5
   11b68:	cmpeq	r2, r4
   11b6c:	movne	sl, #0
   11b70:	andeq	sl, sl, #1
   11b74:	cmp	sl, #0
   11b78:	moveq	sl, #1
   11b7c:	bne	11c48 <__assert_fail@plt+0xc14>
   11b80:	ldr	r3, [pc, #264]	; 11c90 <__assert_fail@plt+0xc5c>
   11b84:	ldr	r0, [r3]
   11b88:	ldr	r3, [r0, #20]
   11b8c:	ldr	r2, [r0, #24]
   11b90:	cmp	r3, r2
   11b94:	addcc	r2, r3, #1
   11b98:	strcc	r2, [r0, #20]
   11b9c:	strbcc	r7, [r3]
   11ba0:	bcc	11afc <__assert_fail@plt+0xac8>
   11ba4:	uxtb	r1, r7
   11ba8:	bl	10fb0 <__overflow@plt>
   11bac:	ldr	r3, [r6, #4]
   11bb0:	ldr	r2, [r6, #8]
   11bb4:	cmp	r2, r3
   11bb8:	bhi	11b0c <__assert_fail@plt+0xad8>
   11bbc:	mov	r0, r6
   11bc0:	bl	10fa4 <__uflow@plt>
   11bc4:	ldrb	r1, [r9]
   11bc8:	cmp	r1, r0
   11bcc:	beq	11c0c <__assert_fail@plt+0xbd8>
   11bd0:	cmn	r0, #1
   11bd4:	bne	11c70 <__assert_fail@plt+0xc3c>
   11bd8:	orrs	r3, r4, r5
   11bdc:	beq	11c04 <__assert_fail@plt+0xbd0>
   11be0:	ldr	r3, [pc, #168]	; 11c90 <__assert_fail@plt+0xc5c>
   11be4:	ldr	r0, [r3]
   11be8:	ldr	r3, [r0, #20]
   11bec:	ldr	r2, [r0, #24]
   11bf0:	cmp	r3, r2
   11bf4:	addcc	r2, r3, #1
   11bf8:	strcc	r2, [r0, #20]
   11bfc:	strbcc	r1, [r3]
   11c00:	bcs	11c78 <__assert_fail@plt+0xc44>
   11c04:	add	sp, sp, #12
   11c08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c0c:	ldr	r3, [pc, #124]	; 11c90 <__assert_fail@plt+0xc5c>
   11c10:	ldr	r3, [r3]
   11c14:	ldr	r2, [r3, #20]
   11c18:	ldr	r1, [r3, #24]
   11c1c:	cmp	r2, r1
   11c20:	addcc	r1, r2, #1
   11c24:	strcc	r1, [r3, #20]
   11c28:	strbcc	r0, [r2]
   11c2c:	bcs	11c60 <__assert_fail@plt+0xc2c>
   11c30:	ldr	r3, [fp]
   11c34:	mov	r4, #0
   11c38:	mov	r5, #0
   11c3c:	str	r3, [r8]
   11c40:	mov	sl, #0
   11c44:	b	11afc <__assert_fail@plt+0xac8>
   11c48:	ldr	r3, [pc, #64]	; 11c90 <__assert_fail@plt+0xc5c>
   11c4c:	ldr	r2, [r8, #20]
   11c50:	mov	r1, #1
   11c54:	ldr	r3, [r3]
   11c58:	bl	10e18 <fwrite_unlocked@plt>
   11c5c:	b	11b80 <__assert_fail@plt+0xb4c>
   11c60:	mov	r1, r0
   11c64:	mov	r0, r3
   11c68:	bl	10fb0 <__overflow@plt>
   11c6c:	b	11c30 <__assert_fail@plt+0xbfc>
   11c70:	mov	r7, r0
   11c74:	b	11b24 <__assert_fail@plt+0xaf0>
   11c78:	add	sp, sp, #12
   11c7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c80:	b	10fb0 <__overflow@plt>
   11c84:	andeq	sl, r2, r0, lsr #3
   11c88:	andeq	sl, r2, r8, ror r1
   11c8c:	andeq	sl, r2, r0, lsl #2
   11c90:	andeq	sl, r2, ip, ror #2
   11c94:	push	{r4, r5, r6, r7, r8, lr}
   11c98:	mov	r5, r1
   11c9c:	ldr	r1, [pc, #224]	; 11d84 <__assert_fail@plt+0xd50>
   11ca0:	mov	r6, r0
   11ca4:	bl	10dac <strcmp@plt>
   11ca8:	cmp	r0, #0
   11cac:	bne	11d5c <__assert_fail@plt+0xd28>
   11cb0:	ldr	r3, [pc, #208]	; 11d88 <__assert_fail@plt+0xd54>
   11cb4:	ldr	r2, [pc, #208]	; 11d8c <__assert_fail@plt+0xd58>
   11cb8:	mov	r1, #1
   11cbc:	ldr	r4, [r3]
   11cc0:	strb	r1, [r2, #29]
   11cc4:	mov	r1, #2
   11cc8:	mov	r0, r4
   11ccc:	bl	12a74 <__assert_fail@plt+0x1a40>
   11cd0:	mov	r0, r4
   11cd4:	blx	r5
   11cd8:	bl	10f20 <__errno_location@plt>
   11cdc:	ldr	r3, [r4]
   11ce0:	ldr	r1, [pc, #156]	; 11d84 <__assert_fail@plt+0xd50>
   11ce4:	tst	r3, #32
   11ce8:	ldr	r5, [r0]
   11cec:	mov	r7, r0
   11cf0:	mov	r0, r6
   11cf4:	moveq	r5, #0
   11cf8:	bl	10dac <strcmp@plt>
   11cfc:	cmp	r0, #0
   11d00:	mov	r0, r4
   11d04:	beq	11d24 <__assert_fail@plt+0xcf0>
   11d08:	bl	12aa8 <__assert_fail@plt+0x1a74>
   11d0c:	cmn	r0, #1
   11d10:	ldreq	r5, [r7]
   11d14:	cmp	r5, #0
   11d18:	bne	11d30 <__assert_fail@plt+0xcfc>
   11d1c:	mov	r0, #1
   11d20:	pop	{r4, r5, r6, r7, r8, pc}
   11d24:	bl	10fe0 <clearerr_unlocked@plt>
   11d28:	cmp	r5, #0
   11d2c:	beq	11d1c <__assert_fail@plt+0xce8>
   11d30:	mov	r2, r6
   11d34:	mov	r1, #3
   11d38:	mov	r0, #0
   11d3c:	bl	160cc <__assert_fail@plt+0x5098>
   11d40:	mov	r1, r5
   11d44:	ldr	r2, [pc, #68]	; 11d90 <__assert_fail@plt+0xd5c>
   11d48:	mov	r3, r0
   11d4c:	mov	r0, #0
   11d50:	bl	10ea8 <error@plt>
   11d54:	mov	r0, #0
   11d58:	pop	{r4, r5, r6, r7, r8, pc}
   11d5c:	ldr	r1, [pc, #48]	; 11d94 <__assert_fail@plt+0xd60>
   11d60:	mov	r0, r6
   11d64:	bl	10fec <fopen64@plt>
   11d68:	subs	r4, r0, #0
   11d6c:	bne	11cc4 <__assert_fail@plt+0xc90>
   11d70:	bl	10f20 <__errno_location@plt>
   11d74:	mov	r2, r6
   11d78:	mov	r1, #3
   11d7c:	ldr	r5, [r0]
   11d80:	b	11d38 <__assert_fail@plt+0xd04>
   11d84:	andeq	r9, r1, r0, lsr #14
   11d88:	andeq	sl, r2, r8, ror #2
   11d8c:	andeq	sl, r2, r8, ror r1
   11d90:	andeq	r9, r1, r4, lsr r8
   11d94:	andeq	r9, r1, ip, lsr #12
   11d98:	subs	r5, r0, #0
   11d9c:	push	{r7, lr}
   11da0:	sub	sp, sp, #56	; 0x38
   11da4:	beq	11de0 <__assert_fail@plt+0xdac>
   11da8:	ldr	r3, [pc, #828]	; 120ec <__assert_fail@plt+0x10b8>
   11dac:	mov	r2, #5
   11db0:	ldr	r1, [pc, #824]	; 120f0 <__assert_fail@plt+0x10bc>
   11db4:	mov	r0, #0
   11db8:	ldr	r4, [r3]
   11dbc:	bl	10e3c <dcgettext@plt>
   11dc0:	ldr	r3, [pc, #812]	; 120f4 <__assert_fail@plt+0x10c0>
   11dc4:	mov	r1, #1
   11dc8:	ldr	r3, [r3]
   11dcc:	mov	r2, r0
   11dd0:	mov	r0, r4
   11dd4:	bl	10f68 <__fprintf_chk@plt>
   11dd8:	mov	r0, r5
   11ddc:	bl	10efc <exit@plt>
   11de0:	mov	r2, #5
   11de4:	ldr	r1, [pc, #780]	; 120f8 <__assert_fail@plt+0x10c4>
   11de8:	bl	10e3c <dcgettext@plt>
   11dec:	ldr	r3, [pc, #768]	; 120f4 <__assert_fail@plt+0x10c0>
   11df0:	ldr	r6, [pc, #772]	; 120fc <__assert_fail@plt+0x10c8>
   11df4:	ldr	r4, [pc, #772]	; 12100 <__assert_fail@plt+0x10cc>
   11df8:	ldr	r2, [r3]
   11dfc:	mov	r1, r0
   11e00:	mov	r0, #1
   11e04:	bl	10f50 <__printf_chk@plt>
   11e08:	mov	r2, #5
   11e0c:	ldr	r1, [pc, #752]	; 12104 <__assert_fail@plt+0x10d0>
   11e10:	mov	r0, r5
   11e14:	bl	10e3c <dcgettext@plt>
   11e18:	ldr	r1, [r6]
   11e1c:	bl	10d94 <fputs_unlocked@plt>
   11e20:	mov	r2, #5
   11e24:	ldr	r1, [pc, #732]	; 12108 <__assert_fail@plt+0x10d4>
   11e28:	mov	r0, r5
   11e2c:	bl	10e3c <dcgettext@plt>
   11e30:	ldr	r1, [r6]
   11e34:	bl	10d94 <fputs_unlocked@plt>
   11e38:	mov	r2, #5
   11e3c:	ldr	r1, [pc, #712]	; 1210c <__assert_fail@plt+0x10d8>
   11e40:	mov	r0, r5
   11e44:	bl	10e3c <dcgettext@plt>
   11e48:	ldr	r1, [r6]
   11e4c:	bl	10d94 <fputs_unlocked@plt>
   11e50:	mov	r2, #5
   11e54:	ldr	r1, [pc, #692]	; 12110 <__assert_fail@plt+0x10dc>
   11e58:	mov	r0, r5
   11e5c:	bl	10e3c <dcgettext@plt>
   11e60:	ldr	r1, [r6]
   11e64:	bl	10d94 <fputs_unlocked@plt>
   11e68:	mov	r2, #5
   11e6c:	ldr	r1, [pc, #672]	; 12114 <__assert_fail@plt+0x10e0>
   11e70:	mov	r0, r5
   11e74:	bl	10e3c <dcgettext@plt>
   11e78:	ldr	r1, [r6]
   11e7c:	bl	10d94 <fputs_unlocked@plt>
   11e80:	mov	r2, #5
   11e84:	ldr	r1, [pc, #652]	; 12118 <__assert_fail@plt+0x10e4>
   11e88:	mov	r0, r5
   11e8c:	bl	10e3c <dcgettext@plt>
   11e90:	ldr	r1, [r6]
   11e94:	bl	10d94 <fputs_unlocked@plt>
   11e98:	mov	r2, #5
   11e9c:	ldr	r1, [pc, #632]	; 1211c <__assert_fail@plt+0x10e8>
   11ea0:	mov	r0, r5
   11ea4:	bl	10e3c <dcgettext@plt>
   11ea8:	ldr	r1, [r6]
   11eac:	bl	10d94 <fputs_unlocked@plt>
   11eb0:	mov	r2, #5
   11eb4:	ldr	r1, [pc, #612]	; 12120 <__assert_fail@plt+0x10ec>
   11eb8:	mov	r0, r5
   11ebc:	bl	10e3c <dcgettext@plt>
   11ec0:	ldr	r1, [r6]
   11ec4:	bl	10d94 <fputs_unlocked@plt>
   11ec8:	mov	r2, #5
   11ecc:	ldr	r1, [pc, #592]	; 12124 <__assert_fail@plt+0x10f0>
   11ed0:	mov	r0, r5
   11ed4:	bl	10e3c <dcgettext@plt>
   11ed8:	ldr	r1, [r6]
   11edc:	bl	10d94 <fputs_unlocked@plt>
   11ee0:	mov	r2, #5
   11ee4:	ldr	r1, [pc, #572]	; 12128 <__assert_fail@plt+0x10f4>
   11ee8:	mov	r0, r5
   11eec:	bl	10e3c <dcgettext@plt>
   11ef0:	ldr	r1, [r6]
   11ef4:	bl	10d94 <fputs_unlocked@plt>
   11ef8:	mov	r2, #5
   11efc:	ldr	r1, [pc, #552]	; 1212c <__assert_fail@plt+0x10f8>
   11f00:	mov	r0, r5
   11f04:	bl	10e3c <dcgettext@plt>
   11f08:	ldr	r1, [r6]
   11f0c:	bl	10d94 <fputs_unlocked@plt>
   11f10:	mov	r2, #5
   11f14:	ldr	r1, [pc, #532]	; 12130 <__assert_fail@plt+0x10fc>
   11f18:	mov	r0, r5
   11f1c:	bl	10e3c <dcgettext@plt>
   11f20:	ldr	r1, [r6]
   11f24:	bl	10d94 <fputs_unlocked@plt>
   11f28:	ldm	r4!, {r0, r1, r2, r3}
   11f2c:	mov	lr, sp
   11f30:	stmia	lr!, {r0, r1, r2, r3}
   11f34:	ldm	r4!, {r0, r1, r2, r3}
   11f38:	ldr	ip, [sp]
   11f3c:	stmia	lr!, {r0, r1, r2, r3}
   11f40:	cmp	ip, #0
   11f44:	ldm	r4!, {r0, r1, r2, r3}
   11f48:	stmia	lr!, {r0, r1, r2, r3}
   11f4c:	ldm	r4, {r0, r1}
   11f50:	moveq	r4, sp
   11f54:	stm	lr, {r0, r1}
   11f58:	beq	11f88 <__assert_fail@plt+0xf54>
   11f5c:	ldr	r7, [pc, #464]	; 12134 <__assert_fail@plt+0x1100>
   11f60:	mov	r4, sp
   11f64:	b	11f74 <__assert_fail@plt+0xf40>
   11f68:	ldr	ip, [r4, #8]!
   11f6c:	cmp	ip, #0
   11f70:	beq	11f88 <__assert_fail@plt+0xf54>
   11f74:	mov	r1, ip
   11f78:	mov	r0, r7
   11f7c:	bl	10dac <strcmp@plt>
   11f80:	cmp	r0, #0
   11f84:	bne	11f68 <__assert_fail@plt+0xf34>
   11f88:	ldr	r4, [r4, #4]
   11f8c:	mov	r2, #5
   11f90:	cmp	r4, #0
   11f94:	ldr	r1, [pc, #412]	; 12138 <__assert_fail@plt+0x1104>
   11f98:	beq	12040 <__assert_fail@plt+0x100c>
   11f9c:	mov	r0, #0
   11fa0:	bl	10e3c <dcgettext@plt>
   11fa4:	ldr	r3, [pc, #400]	; 1213c <__assert_fail@plt+0x1108>
   11fa8:	ldr	r2, [pc, #400]	; 12140 <__assert_fail@plt+0x110c>
   11fac:	mov	r1, r0
   11fb0:	mov	r0, #1
   11fb4:	bl	10f50 <__printf_chk@plt>
   11fb8:	mov	r1, #0
   11fbc:	mov	r0, #5
   11fc0:	bl	10fbc <setlocale@plt>
   11fc4:	cmp	r0, #0
   11fc8:	ldreq	r7, [pc, #356]	; 12134 <__assert_fail@plt+0x1100>
   11fcc:	beq	11fe8 <__assert_fail@plt+0xfb4>
   11fd0:	mov	r2, #3
   11fd4:	ldr	r1, [pc, #360]	; 12144 <__assert_fail@plt+0x1110>
   11fd8:	bl	11010 <strncmp@plt>
   11fdc:	ldr	r7, [pc, #336]	; 12134 <__assert_fail@plt+0x1100>
   11fe0:	cmp	r0, #0
   11fe4:	bne	120d0 <__assert_fail@plt+0x109c>
   11fe8:	mov	r2, #5
   11fec:	ldr	r1, [pc, #340]	; 12148 <__assert_fail@plt+0x1114>
   11ff0:	mov	r0, #0
   11ff4:	bl	10e3c <dcgettext@plt>
   11ff8:	ldr	r3, [pc, #308]	; 12134 <__assert_fail@plt+0x1100>
   11ffc:	ldr	r2, [pc, #312]	; 1213c <__assert_fail@plt+0x1108>
   12000:	mov	r1, r0
   12004:	mov	r0, #1
   12008:	bl	10f50 <__printf_chk@plt>
   1200c:	mov	r2, #5
   12010:	ldr	r1, [pc, #308]	; 1214c <__assert_fail@plt+0x1118>
   12014:	mov	r0, #0
   12018:	bl	10e3c <dcgettext@plt>
   1201c:	ldr	r2, [pc, #300]	; 12150 <__assert_fail@plt+0x111c>
   12020:	cmp	r4, r7
   12024:	ldr	r3, [pc, #296]	; 12154 <__assert_fail@plt+0x1120>
   12028:	movne	r3, r2
   1202c:	mov	r1, r0
   12030:	mov	r2, r4
   12034:	mov	r0, #1
   12038:	bl	10f50 <__printf_chk@plt>
   1203c:	b	11dd8 <__assert_fail@plt+0xda4>
   12040:	mov	r0, r4
   12044:	bl	10e3c <dcgettext@plt>
   12048:	ldr	r3, [pc, #236]	; 1213c <__assert_fail@plt+0x1108>
   1204c:	ldr	r2, [pc, #236]	; 12140 <__assert_fail@plt+0x110c>
   12050:	mov	r1, r0
   12054:	mov	r0, #1
   12058:	bl	10f50 <__printf_chk@plt>
   1205c:	mov	r1, r4
   12060:	mov	r0, #5
   12064:	bl	10fbc <setlocale@plt>
   12068:	cmp	r0, #0
   1206c:	beq	12084 <__assert_fail@plt+0x1050>
   12070:	mov	r2, #3
   12074:	ldr	r1, [pc, #200]	; 12144 <__assert_fail@plt+0x1110>
   12078:	bl	11010 <strncmp@plt>
   1207c:	cmp	r0, #0
   12080:	bne	120c8 <__assert_fail@plt+0x1094>
   12084:	mov	r2, #5
   12088:	ldr	r1, [pc, #184]	; 12148 <__assert_fail@plt+0x1114>
   1208c:	mov	r0, #0
   12090:	bl	10e3c <dcgettext@plt>
   12094:	ldr	r3, [pc, #152]	; 12134 <__assert_fail@plt+0x1100>
   12098:	ldr	r2, [pc, #156]	; 1213c <__assert_fail@plt+0x1108>
   1209c:	mov	r4, r3
   120a0:	mov	r1, r0
   120a4:	mov	r0, #1
   120a8:	bl	10f50 <__printf_chk@plt>
   120ac:	ldr	r1, [pc, #152]	; 1214c <__assert_fail@plt+0x1118>
   120b0:	mov	r2, #5
   120b4:	mov	r0, #0
   120b8:	bl	10e3c <dcgettext@plt>
   120bc:	ldr	r3, [pc, #144]	; 12154 <__assert_fail@plt+0x1120>
   120c0:	mov	r1, r0
   120c4:	b	12030 <__assert_fail@plt+0xffc>
   120c8:	ldr	r7, [pc, #100]	; 12134 <__assert_fail@plt+0x1100>
   120cc:	mov	r4, r7
   120d0:	mov	r2, #5
   120d4:	ldr	r1, [pc, #124]	; 12158 <__assert_fail@plt+0x1124>
   120d8:	mov	r0, #0
   120dc:	bl	10e3c <dcgettext@plt>
   120e0:	ldr	r1, [r6]
   120e4:	bl	10d94 <fputs_unlocked@plt>
   120e8:	b	11fe8 <__assert_fail@plt+0xfb4>
   120ec:	andeq	sl, r2, r0, ror #2
   120f0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   120f4:			; <UNDEFINED> instruction: 0x0002a1b0
   120f8:	andeq	r8, r1, r0, lsl #26
   120fc:	andeq	sl, r2, ip, ror #2
   12100:	ldrdeq	r8, [r1], -r0
   12104:	andeq	r8, r1, r0, lsr #26
   12108:	andeq	r8, r1, r4, ror #26
   1210c:	muleq	r1, ip, sp
   12110:	andeq	r8, r1, r8, ror #27
   12114:	muleq	r1, ip, lr
   12118:	andeq	r8, r1, ip, lsl #31
   1211c:	andeq	r9, r1, r0
   12120:	ldrdeq	r9, [r1], -r4
   12124:	andeq	r9, r1, r4, lsl r1
   12128:	andeq	r9, r1, r4, asr #2
   1212c:	andeq	r9, r1, ip, ror r1
   12130:	andeq	r9, r1, r8, asr #4
   12134:	ldrdeq	r8, [r1], -r4
   12138:	andeq	r9, r1, r0, asr r3
   1213c:	andeq	r9, r1, r8, ror #6
   12140:	muleq	r1, r0, r3
   12144:	andeq	r9, r1, r0, lsr #7
   12148:	andeq	r9, r1, ip, ror #7
   1214c:	andeq	r9, r1, r8, lsl #8
   12150:	muleq	r1, r8, lr
   12154:	andeq	r9, r1, ip, lsr #11
   12158:	andeq	r9, r1, r4, lsr #7
   1215c:	andeq	r0, r0, r0
   12160:	ldr	r2, [r0]
   12164:	ldr	r3, [r1]
   12168:	cmp	r2, r3
   1216c:	blt	1217c <__assert_fail@plt+0x1148>
   12170:	movgt	r0, #1
   12174:	movle	r0, #0
   12178:	bx	lr
   1217c:	mvn	r0, #0
   12180:	bx	lr
   12184:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12188:	sub	sp, sp, #28
   1218c:	ands	r3, r1, #1
   12190:	str	r1, [sp, #20]
   12194:	str	r3, [sp, #16]
   12198:	mov	r6, r0
   1219c:	beq	121c4 <__assert_fail@plt+0x1190>
   121a0:	ldr	r1, [pc, #1104]	; 125f8 <__assert_fail@plt+0x15c4>
   121a4:	bl	10dac <strcmp@plt>
   121a8:	cmp	r0, #0
   121ac:	bne	1265c <__assert_fail@plt+0x1628>
   121b0:	add	r6, r6, #1
   121b4:	mov	r4, #1
   121b8:	mov	r5, #0
   121bc:	mov	r9, #1
   121c0:	b	121d0 <__assert_fail@plt+0x119c>
   121c4:	mov	r9, r3
   121c8:	mov	r4, #0
   121cc:	mov	r5, #0
   121d0:	mov	r0, #1
   121d4:	mov	r1, #0
   121d8:	mov	r3, #0
   121dc:	mov	sl, r9
   121e0:	mov	r7, r9
   121e4:	ldr	fp, [pc, #1040]	; 125fc <__assert_fail@plt+0x15c8>
   121e8:	add	r6, r6, #1
   121ec:	strd	r0, [sp, #8]
   121f0:	mov	r8, r3
   121f4:	mov	r9, r3
   121f8:	b	122c0 <__assert_fail@plt+0x128c>
   121fc:	cmp	r3, #44	; 0x2c
   12200:	str	r1, [sp, #4]
   12204:	str	r3, [sp]
   12208:	beq	12314 <__assert_fail@plt+0x12e0>
   1220c:	bl	10ef0 <__ctype_b_loc@plt>
   12210:	ldr	r3, [sp]
   12214:	ldr	r1, [sp, #4]
   12218:	lsl	ip, r3, #1
   1221c:	ldr	r0, [r0]
   12220:	ldrh	r0, [r0, ip]
   12224:	and	r0, r0, #1
   12228:	cmp	r3, #0
   1222c:	orreq	r0, r0, #1
   12230:	cmp	r0, #0
   12234:	bne	12314 <__assert_fail@plt+0x12e0>
   12238:	sub	ip, r3, #48	; 0x30
   1223c:	cmp	ip, #9
   12240:	bhi	12908 <__assert_fail@plt+0x18d4>
   12244:	cmp	r9, #0
   12248:	beq	125a0 <__assert_fail@plt+0x156c>
   1224c:	ldr	r3, [fp, #12]
   12250:	cmp	r3, #0
   12254:	beq	125a0 <__assert_fail@plt+0x156c>
   12258:	add	r1, pc, #912	; 0x390
   1225c:	ldrd	r0, [r1]
   12260:	cmp	r7, #0
   12264:	movne	r8, r7
   12268:	moveq	sl, #1
   1226c:	cmp	r5, r1
   12270:	cmpeq	r4, r0
   12274:	bhi	12850 <__assert_fail@plt+0x181c>
   12278:	mov	lr, #10
   1227c:	umull	r0, r1, r4, lr
   12280:	mla	r1, lr, r5, r1
   12284:	adds	r0, r0, ip
   12288:	adc	r1, r1, ip, asr #31
   1228c:	and	ip, r0, r1
   12290:	cmn	ip, #1
   12294:	movne	ip, #0
   12298:	moveq	ip, #1
   1229c:	cmp	r1, r5
   122a0:	cmpeq	r0, r4
   122a4:	orrcc	ip, ip, #1
   122a8:	cmp	ip, #0
   122ac:	bne	12850 <__assert_fail@plt+0x181c>
   122b0:	mov	r4, r0
   122b4:	mov	r5, r1
   122b8:	mov	r9, #1
   122bc:	add	r6, r6, #1
   122c0:	ldrb	r3, [r6, #-1]
   122c4:	sub	r1, r6, #1
   122c8:	cmp	r3, #45	; 0x2d
   122cc:	bne	121fc <__assert_fail@plt+0x11c8>
   122d0:	cmp	r7, #0
   122d4:	bne	12830 <__assert_fail@plt+0x17fc>
   122d8:	orrs	r3, r4, r5
   122dc:	movne	r9, #0
   122e0:	andeq	r9, sl, #1
   122e4:	cmp	r9, #0
   122e8:	bne	127fc <__assert_fail@plt+0x17c8>
   122ec:	cmp	sl, #0
   122f0:	bne	1258c <__assert_fail@plt+0x1558>
   122f4:	mov	r2, #1
   122f8:	mov	r3, #0
   122fc:	mov	r4, #0
   12300:	mov	r5, r4
   12304:	mov	r9, r4
   12308:	mov	r7, #1
   1230c:	strd	r2, [sp, #8]
   12310:	b	122bc <__assert_fail@plt+0x1288>
   12314:	cmp	r7, #0
   12318:	beq	123a0 <__assert_fail@plt+0x136c>
   1231c:	orr	sl, sl, r8
   12320:	tst	sl, #255	; 0xff
   12324:	bne	12540 <__assert_fail@plt+0x150c>
   12328:	ldr	r3, [sp, #16]
   1232c:	cmp	r3, #0
   12330:	beq	12958 <__assert_fail@plt+0x1924>
   12334:	mov	r2, #1
   12338:	mov	r3, #0
   1233c:	strd	r2, [sp, #8]
   12340:	ldr	r3, [fp]
   12344:	ldr	r2, [fp, #4]
   12348:	cmp	r3, r2
   1234c:	beq	1263c <__assert_fail@plt+0x1608>
   12350:	ldr	ip, [fp, #8]
   12354:	lsl	r2, r3, #4
   12358:	ldrd	r4, [sp, #8]
   1235c:	add	lr, ip, r2
   12360:	mvn	r0, #0
   12364:	mvn	r1, #0
   12368:	add	r3, r3, #1
   1236c:	strd	r4, [ip, r2]
   12370:	str	r3, [fp]
   12374:	strd	r0, [lr, #8]
   12378:	ldrb	r2, [r6, #-1]
   1237c:	cmp	r2, #0
   12380:	beq	123e0 <__assert_fail@plt+0x13ac>
   12384:	mov	r7, #0
   12388:	mov	r4, r7
   1238c:	mov	r5, r7
   12390:	mov	r8, r7
   12394:	mov	sl, r7
   12398:	mov	r9, r7
   1239c:	b	122bc <__assert_fail@plt+0x1288>
   123a0:	orrs	r3, r4, r5
   123a4:	beq	127fc <__assert_fail@plt+0x17c8>
   123a8:	ldr	r3, [fp]
   123ac:	ldr	r2, [fp, #4]
   123b0:	cmp	r3, r2
   123b4:	beq	125ac <__assert_fail@plt+0x1578>
   123b8:	ldr	ip, [fp, #8]
   123bc:	lsl	r2, r3, #4
   123c0:	add	r1, ip, r2
   123c4:	add	r3, r3, #1
   123c8:	strd	r4, [ip, r2]
   123cc:	strd	r4, [r1, #8]
   123d0:	str	r3, [fp]
   123d4:	ldrb	r2, [r6, #-1]
   123d8:	cmp	r2, #0
   123dc:	bne	12384 <__assert_fail@plt+0x1350>
   123e0:	mov	r1, r3
   123e4:	cmp	r1, #0
   123e8:	beq	128e8 <__assert_fail@plt+0x18b4>
   123ec:	mov	r9, r2
   123f0:	ldr	r3, [pc, #520]	; 12600 <__assert_fail@plt+0x15cc>
   123f4:	mov	r2, #16
   123f8:	mov	r0, ip
   123fc:	bl	10ff8 <qsort@plt>
   12400:	ldr	sl, [fp]
   12404:	ldr	r4, [fp, #8]
   12408:	mov	r2, sl
   1240c:	mov	r3, r9
   12410:	cmp	r3, r2
   12414:	mov	r8, r9
   12418:	str	r9, [sp]
   1241c:	mov	r1, r4
   12420:	str	r9, [sp, #4]
   12424:	bcs	124ec <__assert_fail@plt+0x14b8>
   12428:	add	r3, r3, #1
   1242c:	cmp	r3, r2
   12430:	str	r3, [sp]
   12434:	mov	ip, r3
   12438:	bcs	124d4 <__assert_fail@plt+0x14a0>
   1243c:	ldr	lr, [sp, #4]
   12440:	lsl	r5, r3, #4
   12444:	add	r3, r1, lr
   12448:	ldrd	r6, [r1, r5]
   1244c:	ldrd	r8, [r3, #8]
   12450:	add	r0, r1, r5
   12454:	cmp	r9, r7
   12458:	cmpeq	r8, r6
   1245c:	bcc	124d4 <__assert_fail@plt+0x14a0>
   12460:	mvn	sl, #-268435456	; 0xf0000000
   12464:	add	r4, lr, #32
   12468:	sub	sl, sl, ip
   1246c:	b	12490 <__assert_fail@plt+0x145c>
   12470:	ldr	r3, [sp, #4]
   12474:	ldrd	r6, [r1, r5]
   12478:	add	r3, r1, r3
   1247c:	add	r0, r1, r5
   12480:	ldrd	r8, [r3, #8]
   12484:	cmp	r7, r9
   12488:	cmpeq	r6, r8
   1248c:	bhi	124d4 <__assert_fail@plt+0x14a0>
   12490:	ldrd	r6, [r0, #8]
   12494:	add	r2, r2, sl
   12498:	add	r1, r1, r4
   1249c:	cmp	r7, r9
   124a0:	cmpeq	r6, r8
   124a4:	movcc	r6, r8
   124a8:	movcc	r7, r9
   124ac:	lsl	r2, r2, #4
   124b0:	strd	r6, [r3, #8]
   124b4:	bl	10dd0 <memmove@plt>
   124b8:	ldr	r2, [fp]
   124bc:	ldr	r3, [sp]
   124c0:	sub	r2, r2, #1
   124c4:	cmp	r3, r2
   124c8:	str	r2, [fp]
   124cc:	ldr	r1, [fp, #8]
   124d0:	bcc	12470 <__assert_fail@plt+0x143c>
   124d4:	ldr	r3, [sp, #4]
   124d8:	add	r3, r3, #16
   124dc:	str	r3, [sp, #4]
   124e0:	ldr	r3, [sp]
   124e4:	cmp	r3, r2
   124e8:	bcc	12428 <__assert_fail@plt+0x13f4>
   124ec:	ldr	r3, [sp, #20]
   124f0:	mov	r4, r1
   124f4:	tst	r3, #2
   124f8:	mov	sl, r2
   124fc:	bne	1266c <__assert_fail@plt+0x1638>
   12500:	add	sl, sl, #1
   12504:	mov	r0, r4
   12508:	lsl	r1, sl, #4
   1250c:	str	sl, [fp]
   12510:	bl	17bb8 <__assert_fail@plt+0x6b84>
   12514:	ldr	r3, [fp]
   12518:	mvn	r4, #0
   1251c:	sub	r3, r3, #-268435455	; 0xf0000001
   12520:	mvn	r5, #0
   12524:	lsl	r3, r3, #4
   12528:	add	r2, r0, r3
   1252c:	str	r0, [fp, #8]
   12530:	strd	r4, [r2, #8]
   12534:	strd	r4, [r0, r3]
   12538:	add	sp, sp, #28
   1253c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12540:	cmp	r8, #0
   12544:	beq	12340 <__assert_fail@plt+0x130c>
   12548:	ldrd	r2, [sp, #8]
   1254c:	cmp	r3, r5
   12550:	cmpeq	r2, r4
   12554:	bhi	128c0 <__assert_fail@plt+0x188c>
   12558:	ldr	r3, [fp]
   1255c:	ldr	r2, [fp, #4]
   12560:	cmp	r3, r2
   12564:	beq	125cc <__assert_fail@plt+0x1598>
   12568:	ldr	ip, [fp, #8]
   1256c:	lsl	r2, r3, #4
   12570:	ldrd	r8, [sp, #8]
   12574:	add	r1, ip, r2
   12578:	add	r3, r3, #1
   1257c:	strd	r8, [ip, r2]
   12580:	strd	r4, [r1, #8]
   12584:	str	r3, [fp]
   12588:	b	12378 <__assert_fail@plt+0x1344>
   1258c:	strd	r4, [sp, #8]
   12590:	mov	r4, #0
   12594:	mov	r5, r4
   12598:	mov	r7, sl
   1259c:	b	122bc <__assert_fail@plt+0x1288>
   125a0:	mov	r3, r1
   125a4:	str	r1, [fp, #12]
   125a8:	b	12258 <__assert_fail@plt+0x1224>
   125ac:	mov	r2, #16
   125b0:	ldr	r1, [pc, #76]	; 12604 <__assert_fail@plt+0x15d0>
   125b4:	ldr	r0, [fp, #8]
   125b8:	bl	17d2c <__assert_fail@plt+0x6cf8>
   125bc:	ldr	r3, [fp]
   125c0:	mov	ip, r0
   125c4:	str	r0, [fp, #8]
   125c8:	b	123bc <__assert_fail@plt+0x1388>
   125cc:	mov	r2, #16
   125d0:	ldr	r1, [pc, #44]	; 12604 <__assert_fail@plt+0x15d0>
   125d4:	ldr	r0, [fp, #8]
   125d8:	bl	17d2c <__assert_fail@plt+0x6cf8>
   125dc:	ldr	r3, [fp]
   125e0:	mov	ip, r0
   125e4:	str	r0, [fp, #8]
   125e8:	b	1256c <__assert_fail@plt+0x1538>
   125ec:	nop			; (mov r0, r0)
   125f0:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   125f4:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   125f8:	andeq	r9, r1, r0, lsr #14
   125fc:	muleq	r2, r8, r1
   12600:	andeq	r2, r1, r0, ror #2
   12604:	muleq	r2, ip, r1
   12608:			; <UNDEFINED> instruction: 0x000196b4
   1260c:	andeq	r9, r1, r4, ror #13
   12610:	andeq	r9, r1, r0, lsl #13
   12614:	andeq	r9, r1, r0, lsr #13
   12618:	andeq	r9, r1, r0, asr #14
   1261c:	andeq	r9, r1, ip, asr #14
   12620:	andeq	r9, r1, r4, ror r7
   12624:	andeq	r9, r1, r4, lsr #14
   12628:	ldrdeq	r9, [r1], -r0
   1262c:	strdeq	r9, [r1], -ip
   12630:	muleq	r1, r4, r7
   12634:			; <UNDEFINED> instruction: 0x000197b8
   12638:	andeq	r9, r1, r0, lsl #14
   1263c:	mov	r2, #16
   12640:	ldr	r1, [pc, #-68]	; 12604 <__assert_fail@plt+0x15d0>
   12644:	ldr	r0, [fp, #8]
   12648:	bl	17d2c <__assert_fail@plt+0x6cf8>
   1264c:	ldr	r3, [fp]
   12650:	mov	ip, r0
   12654:	str	r0, [fp, #8]
   12658:	b	12354 <__assert_fail@plt+0x1320>
   1265c:	mov	r4, #0
   12660:	mov	r5, #0
   12664:	mov	r9, #0
   12668:	b	121d0 <__assert_fail@plt+0x119c>
   1266c:	ldrd	r6, [r1]
   12670:	mov	r0, #0
   12674:	str	r0, [fp, #8]
   12678:	cmp	r7, #0
   1267c:	cmpeq	r6, #1
   12680:	str	r0, [fp]
   12684:	str	r0, [fp, #4]
   12688:	bls	126c8 <__assert_fail@plt+0x1694>
   1268c:	mov	r2, #16
   12690:	ldr	r1, [pc, #-148]	; 12604 <__assert_fail@plt+0x15d0>
   12694:	bl	17d2c <__assert_fail@plt+0x6cf8>
   12698:	ldr	r3, [fp]
   1269c:	subs	r6, r6, #1
   126a0:	sbc	r7, r7, #0
   126a4:	lsl	r2, r3, #4
   126a8:	mov	r8, #1
   126ac:	mov	r9, #0
   126b0:	add	r3, r3, #1
   126b4:	add	r1, r0, r2
   126b8:	str	r0, [fp, #8]
   126bc:	strd	r8, [r0, r2]
   126c0:	strd	r6, [r1, #8]
   126c4:	str	r3, [fp]
   126c8:	cmp	sl, #1
   126cc:	movhi	r8, #1
   126d0:	movhi	r5, r4
   126d4:	strhi	r8, [sp]
   126d8:	bhi	1271c <__assert_fail@plt+0x16e8>
   126dc:	b	12770 <__assert_fail@plt+0x173c>
   126e0:	ldr	r1, [fp, #8]
   126e4:	lsl	r2, r3, #4
   126e8:	add	r0, r1, r2
   126ec:	strd	r6, [r1, r2]
   126f0:	mov	r6, r8
   126f4:	mov	r7, r9
   126f8:	add	r3, r3, #1
   126fc:	strd	r6, [r0, #8]
   12700:	str	r3, [fp]
   12704:	ldr	r3, [sp]
   12708:	add	r5, r5, #16
   1270c:	add	r3, r3, #1
   12710:	cmp	r3, sl
   12714:	str	r3, [sp]
   12718:	beq	12770 <__assert_fail@plt+0x173c>
   1271c:	ldrd	r6, [r5, #8]
   12720:	ldrd	r0, [r5, #16]
   12724:	adds	r6, r6, #1
   12728:	adc	r7, r7, #0
   1272c:	cmp	r7, r1
   12730:	cmpeq	r6, r0
   12734:	beq	12704 <__assert_fail@plt+0x16d0>
   12738:	ldr	r3, [fp]
   1273c:	ldr	r2, [fp, #4]
   12740:	subs	r8, r0, #1
   12744:	sbc	r9, r1, #0
   12748:	cmp	r3, r2
   1274c:	bne	126e0 <__assert_fail@plt+0x16ac>
   12750:	ldr	r1, [pc, #-340]	; 12604 <__assert_fail@plt+0x15d0>
   12754:	mov	r2, #16
   12758:	ldr	r0, [fp, #8]
   1275c:	bl	17d2c <__assert_fail@plt+0x6cf8>
   12760:	ldr	r3, [fp]
   12764:	mov	r1, r0
   12768:	str	r0, [fp, #8]
   1276c:	b	126e4 <__assert_fail@plt+0x16b0>
   12770:	add	sl, r4, sl, lsl #4
   12774:	mvn	r3, #0
   12778:	ldrd	r6, [sl, #-8]
   1277c:	mvn	r2, #0
   12780:	cmp	r7, r3
   12784:	cmpeq	r6, r2
   12788:	beq	127c8 <__assert_fail@plt+0x1794>
   1278c:	ldr	r3, [fp]
   12790:	ldr	r2, [fp, #4]
   12794:	adds	r6, r6, #1
   12798:	adc	r7, r7, #0
   1279c:	cmp	r3, r2
   127a0:	beq	127dc <__assert_fail@plt+0x17a8>
   127a4:	ldr	r1, [fp, #8]
   127a8:	lsl	r2, r3, #4
   127ac:	add	r0, r1, r2
   127b0:	strd	r6, [r1, r2]
   127b4:	mvn	r6, #0
   127b8:	mvn	r7, #0
   127bc:	add	r3, r3, #1
   127c0:	str	r3, [fp]
   127c4:	strd	r6, [r0, #8]
   127c8:	mov	r0, r4
   127cc:	bl	12ba8 <__assert_fail@plt+0x1b74>
   127d0:	ldr	sl, [fp]
   127d4:	ldr	r4, [fp, #8]
   127d8:	b	12500 <__assert_fail@plt+0x14cc>
   127dc:	ldr	r1, [pc, #-480]	; 12604 <__assert_fail@plt+0x15d0>
   127e0:	mov	r2, #16
   127e4:	ldr	r0, [fp, #8]
   127e8:	bl	17d2c <__assert_fail@plt+0x6cf8>
   127ec:	ldr	r3, [fp]
   127f0:	mov	r1, r0
   127f4:	str	r0, [fp, #8]
   127f8:	b	127a8 <__assert_fail@plt+0x1774>
   127fc:	ldr	r3, [sp, #20]
   12800:	mov	r0, r7
   12804:	tst	r3, #4
   12808:	mov	r2, #5
   1280c:	ldrne	r1, [pc, #-524]	; 12608 <__assert_fail@plt+0x15d4>
   12810:	ldreq	r1, [pc, #-524]	; 1260c <__assert_fail@plt+0x15d8>
   12814:	bl	10e3c <dcgettext@plt>
   12818:	mov	r1, #0
   1281c:	mov	r2, r0
   12820:	mov	r0, r1
   12824:	bl	10ea8 <error@plt>
   12828:	mov	r0, #1
   1282c:	bl	11d98 <__assert_fail@plt+0xd64>
   12830:	ldr	r3, [sp, #20]
   12834:	mov	r2, #5
   12838:	ands	r0, r3, #4
   1283c:	movne	r0, #0
   12840:	ldrne	r1, [pc, #-568]	; 12610 <__assert_fail@plt+0x15dc>
   12844:	ldreq	r1, [pc, #-568]	; 12614 <__assert_fail@plt+0x15e0>
   12848:	bl	10e3c <dcgettext@plt>
   1284c:	b	12818 <__assert_fail@plt+0x17e4>
   12850:	ldr	r1, [pc, #-576]	; 12618 <__assert_fail@plt+0x15e4>
   12854:	mov	r0, r3
   12858:	str	r3, [sp]
   1285c:	bl	11028 <strspn@plt>
   12860:	ldr	r3, [sp]
   12864:	mov	r1, r0
   12868:	mov	r0, r3
   1286c:	bl	18150 <__assert_fail@plt+0x711c>
   12870:	ldr	r3, [sp, #20]
   12874:	mov	r2, #5
   12878:	mov	r4, r0
   1287c:	ands	r0, r3, #4
   12880:	movne	r0, #0
   12884:	ldrne	r1, [pc, #-624]	; 1261c <__assert_fail@plt+0x15e8>
   12888:	ldreq	r1, [pc, #-624]	; 12620 <__assert_fail@plt+0x15ec>
   1288c:	bl	10e3c <dcgettext@plt>
   12890:	mov	r5, r0
   12894:	mov	r0, r4
   12898:	bl	16fc0 <__assert_fail@plt+0x5f8c>
   1289c:	mov	r1, #0
   128a0:	mov	r2, r5
   128a4:	mov	r3, r0
   128a8:	mov	r0, r1
   128ac:	bl	10ea8 <error@plt>
   128b0:	mov	r0, r4
   128b4:	bl	12ba8 <__assert_fail@plt+0x1b74>
   128b8:	mov	r0, #1
   128bc:	bl	11d98 <__assert_fail@plt+0xd64>
   128c0:	ldr	r1, [pc, #-676]	; 12624 <__assert_fail@plt+0x15f0>
   128c4:	mov	r2, #5
   128c8:	mov	r0, #0
   128cc:	bl	10e3c <dcgettext@plt>
   128d0:	mov	r1, #0
   128d4:	mov	r2, r0
   128d8:	mov	r0, r1
   128dc:	bl	10ea8 <error@plt>
   128e0:	mov	r0, #1
   128e4:	bl	11d98 <__assert_fail@plt+0xd64>
   128e8:	ldr	r3, [sp, #20]
   128ec:	mov	r0, r1
   128f0:	tst	r3, #4
   128f4:	mov	r2, #5
   128f8:	ldrne	r1, [pc, #-728]	; 12628 <__assert_fail@plt+0x15f4>
   128fc:	ldreq	r1, [pc, #-728]	; 1262c <__assert_fail@plt+0x15f8>
   12900:	bl	10e3c <dcgettext@plt>
   12904:	b	12818 <__assert_fail@plt+0x17e4>
   12908:	ldr	r3, [sp, #20]
   1290c:	mov	sl, r1
   12910:	mov	r1, r0
   12914:	ands	r0, r3, #4
   12918:	movne	r0, r1
   1291c:	movne	r2, #5
   12920:	ldrne	r1, [pc, #-760]	; 12630 <__assert_fail@plt+0x15fc>
   12924:	moveq	r2, #5
   12928:	ldreq	r1, [pc, #-764]	; 12634 <__assert_fail@plt+0x1600>
   1292c:	bl	10e3c <dcgettext@plt>
   12930:	mov	r4, r0
   12934:	mov	r0, sl
   12938:	bl	16fc0 <__assert_fail@plt+0x5f8c>
   1293c:	mov	r1, #0
   12940:	mov	r2, r4
   12944:	mov	r3, r0
   12948:	mov	r0, r1
   1294c:	bl	10ea8 <error@plt>
   12950:	mov	r0, #1
   12954:	bl	11d98 <__assert_fail@plt+0xd64>
   12958:	mov	r2, #5
   1295c:	ldr	r1, [pc, #-812]	; 12638 <__assert_fail@plt+0x1604>
   12960:	b	128c8 <__assert_fail@plt+0x1894>
   12964:	ldr	r3, [pc, #4]	; 12970 <__assert_fail@plt+0x193c>
   12968:	str	r0, [r3]
   1296c:	bx	lr
   12970:	andeq	sl, r2, r8, lsr #3
   12974:	ldr	r3, [pc, #4]	; 12980 <__assert_fail@plt+0x194c>
   12978:	strb	r0, [r3, #4]
   1297c:	bx	lr
   12980:	andeq	sl, r2, r8, lsr #3
   12984:	ldr	r3, [pc, #192]	; 12a4c <__assert_fail@plt+0x1a18>
   12988:	push	{r4, r5, r6, lr}
   1298c:	sub	sp, sp, #8
   12990:	ldr	r0, [r3]
   12994:	bl	182d4 <__assert_fail@plt+0x72a0>
   12998:	cmp	r0, #0
   1299c:	beq	129c0 <__assert_fail@plt+0x198c>
   129a0:	ldr	r4, [pc, #168]	; 12a50 <__assert_fail@plt+0x1a1c>
   129a4:	ldrb	r3, [r4, #4]
   129a8:	cmp	r3, #0
   129ac:	beq	129dc <__assert_fail@plt+0x19a8>
   129b0:	bl	10f20 <__errno_location@plt>
   129b4:	ldr	r3, [r0]
   129b8:	cmp	r3, #32
   129bc:	bne	129dc <__assert_fail@plt+0x19a8>
   129c0:	ldr	r3, [pc, #140]	; 12a54 <__assert_fail@plt+0x1a20>
   129c4:	ldr	r0, [r3]
   129c8:	bl	182d4 <__assert_fail@plt+0x72a0>
   129cc:	cmp	r0, #0
   129d0:	bne	12a24 <__assert_fail@plt+0x19f0>
   129d4:	add	sp, sp, #8
   129d8:	pop	{r4, r5, r6, pc}
   129dc:	mov	r2, #5
   129e0:	ldr	r1, [pc, #112]	; 12a58 <__assert_fail@plt+0x1a24>
   129e4:	mov	r0, #0
   129e8:	bl	10e3c <dcgettext@plt>
   129ec:	ldr	r4, [r4]
   129f0:	cmp	r4, #0
   129f4:	mov	r5, r0
   129f8:	beq	12a30 <__assert_fail@plt+0x19fc>
   129fc:	bl	10f20 <__errno_location@plt>
   12a00:	ldr	r6, [r0]
   12a04:	mov	r0, r4
   12a08:	bl	15d60 <__assert_fail@plt+0x4d2c>
   12a0c:	mov	r1, r6
   12a10:	str	r5, [sp]
   12a14:	ldr	r2, [pc, #64]	; 12a5c <__assert_fail@plt+0x1a28>
   12a18:	mov	r3, r0
   12a1c:	mov	r0, #0
   12a20:	bl	10ea8 <error@plt>
   12a24:	ldr	r3, [pc, #52]	; 12a60 <__assert_fail@plt+0x1a2c>
   12a28:	ldr	r0, [r3]
   12a2c:	bl	10df4 <_exit@plt>
   12a30:	bl	10f20 <__errno_location@plt>
   12a34:	mov	r3, r5
   12a38:	ldr	r2, [pc, #36]	; 12a64 <__assert_fail@plt+0x1a30>
   12a3c:	ldr	r1, [r0]
   12a40:	mov	r0, r4
   12a44:	bl	10ea8 <error@plt>
   12a48:	b	12a24 <__assert_fail@plt+0x19f0>
   12a4c:	andeq	sl, r2, ip, ror #2
   12a50:	andeq	sl, r2, r8, lsr #3
   12a54:	andeq	sl, r2, r0, ror #2
   12a58:	andeq	r9, r1, r4, lsr #16
   12a5c:	andeq	r9, r1, r0, lsr r8
   12a60:	andeq	sl, r2, r8, lsl #2
   12a64:	andeq	r9, r1, r4, lsr r8
   12a68:	push	{r4, r5}
   12a6c:	pop	{r4, r5}
   12a70:	b	10db8 <posix_fadvise64@plt>
   12a74:	cmp	r0, #0
   12a78:	bxeq	lr
   12a7c:	push	{r4, lr}
   12a80:	sub	sp, sp, #16
   12a84:	mov	r4, r1
   12a88:	bl	10f5c <fileno@plt>
   12a8c:	mov	r2, #0
   12a90:	mov	r3, #0
   12a94:	str	r4, [sp, #8]
   12a98:	strd	r2, [sp]
   12a9c:	bl	10db8 <posix_fadvise64@plt>
   12aa0:	add	sp, sp, #16
   12aa4:	pop	{r4, pc}
   12aa8:	push	{r4, r5, lr}
   12aac:	sub	sp, sp, #12
   12ab0:	mov	r4, r0
   12ab4:	bl	10f5c <fileno@plt>
   12ab8:	cmp	r0, #0
   12abc:	mov	r0, r4
   12ac0:	blt	12b3c <__assert_fail@plt+0x1b08>
   12ac4:	bl	10ecc <__freading@plt>
   12ac8:	cmp	r0, #0
   12acc:	bne	12b08 <__assert_fail@plt+0x1ad4>
   12ad0:	mov	r0, r4
   12ad4:	bl	12b48 <__assert_fail@plt+0x1b14>
   12ad8:	cmp	r0, #0
   12adc:	beq	12b38 <__assert_fail@plt+0x1b04>
   12ae0:	bl	10f20 <__errno_location@plt>
   12ae4:	mov	r5, r0
   12ae8:	mov	r0, r4
   12aec:	ldr	r4, [r5]
   12af0:	bl	10f80 <fclose@plt>
   12af4:	cmp	r4, #0
   12af8:	mvnne	r0, #0
   12afc:	strne	r4, [r5]
   12b00:	add	sp, sp, #12
   12b04:	pop	{r4, r5, pc}
   12b08:	mov	r0, r4
   12b0c:	bl	10f5c <fileno@plt>
   12b10:	mov	r3, #1
   12b14:	str	r3, [sp]
   12b18:	mov	r2, #0
   12b1c:	mov	r3, #0
   12b20:	bl	10e78 <lseek64@plt>
   12b24:	mvn	r3, #0
   12b28:	mvn	r2, #0
   12b2c:	cmp	r1, r3
   12b30:	cmpeq	r0, r2
   12b34:	bne	12ad0 <__assert_fail@plt+0x1a9c>
   12b38:	mov	r0, r4
   12b3c:	add	sp, sp, #12
   12b40:	pop	{r4, r5, lr}
   12b44:	b	10f80 <fclose@plt>
   12b48:	push	{r4, lr}
   12b4c:	subs	r4, r0, #0
   12b50:	sub	sp, sp, #8
   12b54:	beq	12b70 <__assert_fail@plt+0x1b3c>
   12b58:	bl	10ecc <__freading@plt>
   12b5c:	cmp	r0, #0
   12b60:	beq	12b70 <__assert_fail@plt+0x1b3c>
   12b64:	ldr	r3, [r4]
   12b68:	tst	r3, #256	; 0x100
   12b6c:	bne	12b80 <__assert_fail@plt+0x1b4c>
   12b70:	mov	r0, r4
   12b74:	add	sp, sp, #8
   12b78:	pop	{r4, lr}
   12b7c:	b	10dc4 <fflush@plt>
   12b80:	mov	r3, #1
   12b84:	str	r3, [sp]
   12b88:	mov	r2, #0
   12b8c:	mov	r3, #0
   12b90:	mov	r0, r4
   12b94:	bl	12c00 <__assert_fail@plt+0x1bcc>
   12b98:	mov	r0, r4
   12b9c:	add	sp, sp, #8
   12ba0:	pop	{r4, lr}
   12ba4:	b	10dc4 <fflush@plt>
   12ba8:	push	{r4, r5, lr}
   12bac:	sub	sp, sp, #12
   12bb0:	mov	r5, r0
   12bb4:	bl	10f20 <__errno_location@plt>
   12bb8:	mov	r2, #0
   12bbc:	mov	r4, r0
   12bc0:	ldr	r3, [r0]
   12bc4:	str	r2, [r4]
   12bc8:	mov	r0, r5
   12bcc:	str	r3, [sp]
   12bd0:	str	r3, [sp, #4]
   12bd4:	bl	10ddc <free@plt>
   12bd8:	ldr	r3, [r4]
   12bdc:	add	r2, sp, #8
   12be0:	cmp	r3, #0
   12be4:	moveq	r3, #4
   12be8:	movne	r3, #0
   12bec:	add	r3, r2, r3
   12bf0:	ldr	r3, [r3, #-8]
   12bf4:	str	r3, [r4]
   12bf8:	add	sp, sp, #12
   12bfc:	pop	{r4, r5, pc}
   12c00:	push	{r4, r5, r6, r7, r8, lr}
   12c04:	sub	sp, sp, #8
   12c08:	ldmib	r0, {ip, lr}
   12c0c:	mov	r4, r0
   12c10:	ldr	r5, [sp, #32]
   12c14:	cmp	lr, ip
   12c18:	beq	12c30 <__assert_fail@plt+0x1bfc>
   12c1c:	str	r5, [sp, #32]
   12c20:	mov	r0, r4
   12c24:	add	sp, sp, #8
   12c28:	pop	{r4, r5, r6, r7, r8, lr}
   12c2c:	b	10f8c <fseeko64@plt>
   12c30:	ldr	lr, [r0, #20]
   12c34:	ldr	ip, [r0, #16]
   12c38:	cmp	lr, ip
   12c3c:	bne	12c1c <__assert_fail@plt+0x1be8>
   12c40:	ldr	r8, [r0, #36]	; 0x24
   12c44:	cmp	r8, #0
   12c48:	bne	12c1c <__assert_fail@plt+0x1be8>
   12c4c:	mov	r6, r2
   12c50:	mov	r7, r3
   12c54:	bl	10f5c <fileno@plt>
   12c58:	mov	r2, r6
   12c5c:	mov	r3, r7
   12c60:	str	r5, [sp]
   12c64:	bl	10e78 <lseek64@plt>
   12c68:	mvn	r3, #0
   12c6c:	mvn	r2, #0
   12c70:	cmp	r1, r3
   12c74:	cmpeq	r0, r2
   12c78:	beq	12c98 <__assert_fail@plt+0x1c64>
   12c7c:	ldr	r3, [r4]
   12c80:	strd	r0, [r4, #80]	; 0x50
   12c84:	mov	r0, r8
   12c88:	bic	r3, r3, #16
   12c8c:	str	r3, [r4]
   12c90:	add	sp, sp, #8
   12c94:	pop	{r4, r5, r6, r7, r8, pc}
   12c98:	mvn	r0, #0
   12c9c:	b	12c90 <__assert_fail@plt+0x1c5c>
   12ca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ca4:	sub	sp, sp, #44	; 0x2c
   12ca8:	ldr	fp, [r0]
   12cac:	str	r0, [sp, #24]
   12cb0:	cmp	fp, #0
   12cb4:	str	r1, [sp, #28]
   12cb8:	str	r2, [sp, #16]
   12cbc:	mov	sl, r3
   12cc0:	ldr	r7, [r1]
   12cc4:	ldr	r8, [sp, #88]	; 0x58
   12cc8:	beq	12f4c <__assert_fail@plt+0x1f18>
   12ccc:	ldr	r3, [sp, #16]
   12cd0:	cmp	r7, r3
   12cd4:	bcc	12cf4 <__assert_fail@plt+0x1cc0>
   12cd8:	cmp	r7, sl
   12cdc:	cmpcs	r7, r3
   12ce0:	moveq	r2, #1
   12ce4:	movne	r2, #0
   12ce8:	str	r2, [sp, #8]
   12cec:	sub	r4, r7, r3
   12cf0:	bne	12d10 <__assert_fail@plt+0x1cdc>
   12cf4:	ldr	r3, [sp, #24]
   12cf8:	mvn	r0, #0
   12cfc:	str	fp, [r3]
   12d00:	ldr	r3, [sp, #28]
   12d04:	str	r7, [r3]
   12d08:	add	sp, sp, #44	; 0x2c
   12d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d10:	ldr	r3, [sp, #80]	; 0x50
   12d14:	cmn	r3, #1
   12d18:	beq	12e94 <__assert_fail@plt+0x1e60>
   12d1c:	mov	r2, r3
   12d20:	ldr	r3, [sp, #84]	; 0x54
   12d24:	cmn	r3, #1
   12d28:	moveq	r3, r2
   12d2c:	str	r3, [sp, #84]	; 0x54
   12d30:	ldr	r3, [sp, #16]
   12d34:	str	fp, [sp, #12]
   12d38:	add	r5, fp, r3
   12d3c:	ldr	fp, [sp, #80]	; 0x50
   12d40:	b	12e40 <__assert_fail@plt+0x1e0c>
   12d44:	cmn	fp, #1
   12d48:	bne	12eb4 <__assert_fail@plt+0x1e80>
   12d4c:	ldr	r1, [sp, #36]	; 0x24
   12d50:	ldr	r9, [sp, #8]
   12d54:	add	r1, r1, #1
   12d58:	mov	r2, #0
   12d5c:	cmp	r7, sl
   12d60:	cmpcc	r4, r1
   12d64:	bcs	12dd8 <__assert_fail@plt+0x1da4>
   12d68:	ldr	r0, [sp, #12]
   12d6c:	cmp	r7, #63	; 0x3f
   12d70:	addls	r3, r7, #64	; 0x40
   12d74:	lslhi	r3, r7, #1
   12d78:	sub	r5, r5, r0
   12d7c:	sub	r0, r3, r5
   12d80:	cmp	r0, r1
   12d84:	addcc	r3, r5, r1
   12d88:	cmp	r3, sl
   12d8c:	cmpls	r7, r3
   12d90:	ldr	r0, [sp, #16]
   12d94:	movcs	r3, sl
   12d98:	sub	r1, r3, r0
   12d9c:	cmp	r1, #0
   12da0:	blt	12ea0 <__assert_fail@plt+0x1e6c>
   12da4:	mov	r1, r3
   12da8:	ldr	r0, [sp, #12]
   12dac:	str	r3, [sp, #4]
   12db0:	str	r2, [sp, #20]
   12db4:	bl	18278 <__assert_fail@plt+0x7244>
   12db8:	ldr	r3, [sp, #4]
   12dbc:	sub	r4, r3, r5
   12dc0:	cmp	r0, #0
   12dc4:	beq	12eac <__assert_fail@plt+0x1e78>
   12dc8:	ldr	r2, [sp, #20]
   12dcc:	add	r5, r0, r5
   12dd0:	mov	r7, r3
   12dd4:	str	r0, [sp, #12]
   12dd8:	cmp	r4, #1
   12ddc:	bls	12e1c <__assert_fail@plt+0x1de8>
   12de0:	ldr	r3, [sp, #36]	; 0x24
   12de4:	sub	r1, r4, #1
   12de8:	cmp	r1, r3
   12dec:	movcc	r3, r1
   12df0:	cmp	r6, #0
   12df4:	strbeq	r2, [r5]
   12df8:	beq	12e14 <__assert_fail@plt+0x1de0>
   12dfc:	mov	r2, r3
   12e00:	mov	r1, r6
   12e04:	mov	r0, r5
   12e08:	str	r3, [sp, #4]
   12e0c:	bl	10e00 <memcpy@plt>
   12e10:	ldr	r3, [sp, #4]
   12e14:	add	r5, r5, r3
   12e18:	sub	r4, r4, r3
   12e1c:	cmp	r6, #0
   12e20:	beq	12e38 <__assert_fail@plt+0x1e04>
   12e24:	ldr	r1, [sp, #36]	; 0x24
   12e28:	mov	r0, r8
   12e2c:	bl	18380 <__assert_fail@plt+0x734c>
   12e30:	cmp	r0, #0
   12e34:	bne	12eac <__assert_fail@plt+0x1e78>
   12e38:	cmp	r9, #0
   12e3c:	bne	12ef4 <__assert_fail@plt+0x1ec0>
   12e40:	add	r1, sp, #36	; 0x24
   12e44:	mov	r0, r8
   12e48:	bl	18350 <__assert_fail@plt+0x731c>
   12e4c:	subs	r6, r0, #0
   12e50:	bne	12d44 <__assert_fail@plt+0x1d10>
   12e54:	ldr	r3, [r8, #4]
   12e58:	ldr	r2, [r8, #8]
   12e5c:	cmp	r3, r2
   12e60:	bcs	12f28 <__assert_fail@plt+0x1ef4>
   12e64:	add	r2, r3, #1
   12e68:	str	r2, [r8, #4]
   12e6c:	ldrb	r2, [r3]
   12e70:	ldr	r3, [sp, #84]	; 0x54
   12e74:	mov	r1, #2
   12e78:	cmp	r3, r2
   12e7c:	cmpne	fp, r2
   12e80:	mov	r3, #1
   12e84:	moveq	r9, #1
   12e88:	movne	r9, #0
   12e8c:	str	r3, [sp, #36]	; 0x24
   12e90:	b	12d5c <__assert_fail@plt+0x1d28>
   12e94:	ldr	r3, [sp, #84]	; 0x54
   12e98:	str	r3, [sp, #80]	; 0x50
   12e9c:	b	12d30 <__assert_fail@plt+0x1cfc>
   12ea0:	add	r3, r0, #-2147483648	; 0x80000000
   12ea4:	cmp	r7, r3
   12ea8:	bne	12da4 <__assert_fail@plt+0x1d70>
   12eac:	ldr	fp, [sp, #12]
   12eb0:	b	12cf4 <__assert_fail@plt+0x1cc0>
   12eb4:	ldr	r9, [sp, #36]	; 0x24
   12eb8:	ldr	r2, [sp, #84]	; 0x54
   12ebc:	mov	r3, r9
   12ec0:	mov	r1, fp
   12ec4:	bl	12f6c <__assert_fail@plt+0x1f38>
   12ec8:	cmp	r0, #0
   12ecc:	subne	r9, r0, r6
   12ed0:	addne	r9, r9, #1
   12ed4:	addeq	r1, r9, #1
   12ed8:	strne	r9, [sp, #36]	; 0x24
   12edc:	addne	r1, r9, #1
   12ee0:	ldreq	r9, [sp, #8]
   12ee4:	moveq	r2, #0
   12ee8:	movne	r2, #0
   12eec:	movne	r9, #1
   12ef0:	b	12d5c <__assert_fail@plt+0x1d28>
   12ef4:	ldr	fp, [sp, #12]
   12ef8:	ldr	r3, [sp, #16]
   12efc:	add	r0, fp, r3
   12f00:	mov	r3, #0
   12f04:	strb	r3, [r5]
   12f08:	ldr	r3, [sp, #24]
   12f0c:	subs	r0, r5, r0
   12f10:	str	fp, [r3]
   12f14:	ldr	r3, [sp, #28]
   12f18:	str	r7, [r3]
   12f1c:	bne	12d08 <__assert_fail@plt+0x1cd4>
   12f20:	mvn	r0, #0
   12f24:	b	12d08 <__assert_fail@plt+0x1cd4>
   12f28:	mov	r0, r8
   12f2c:	bl	10fa4 <__uflow@plt>
   12f30:	cmn	r0, #1
   12f34:	mov	r2, r0
   12f38:	bne	12e70 <__assert_fail@plt+0x1e3c>
   12f3c:	ldr	fp, [sp, #12]
   12f40:	cmp	r5, fp
   12f44:	bne	12ef8 <__assert_fail@plt+0x1ec4>
   12f48:	b	12cf4 <__assert_fail@plt+0x1cc0>
   12f4c:	cmp	r3, #64	; 0x40
   12f50:	movcc	r7, r3
   12f54:	movcs	r7, #64	; 0x40
   12f58:	mov	r0, r7
   12f5c:	bl	1824c <__assert_fail@plt+0x7218>
   12f60:	subs	fp, r0, #0
   12f64:	bne	12ccc <__assert_fail@plt+0x1c98>
   12f68:	b	12f20 <__assert_fail@plt+0x1eec>
   12f6c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12f70:	uxtb	lr, r1
   12f74:	uxtb	r4, r2
   12f78:	cmp	lr, r4
   12f7c:	beq	130b0 <__assert_fail@plt+0x207c>
   12f80:	cmp	r3, #0
   12f84:	mov	r6, r0
   12f88:	beq	12fd0 <__assert_fail@plt+0x1f9c>
   12f8c:	tst	r0, #3
   12f90:	beq	12fd0 <__assert_fail@plt+0x1f9c>
   12f94:	ldrb	r0, [r0]
   12f98:	cmp	lr, r0
   12f9c:	cmpne	r4, r0
   12fa0:	beq	130c0 <__assert_fail@plt+0x208c>
   12fa4:	add	ip, r6, #1
   12fa8:	b	12fc4 <__assert_fail@plt+0x1f90>
   12fac:	tst	ip, #3
   12fb0:	beq	12fd0 <__assert_fail@plt+0x1f9c>
   12fb4:	ldrb	r5, [ip], #1
   12fb8:	cmp	r4, r5
   12fbc:	cmpne	lr, r5
   12fc0:	beq	130c0 <__assert_fail@plt+0x208c>
   12fc4:	subs	r3, r3, #1
   12fc8:	mov	r6, ip
   12fcc:	bne	12fac <__assert_fail@plt+0x1f78>
   12fd0:	ldr	r7, [pc, #272]	; 130e8 <__assert_fail@plt+0x20b4>
   12fd4:	cmp	r3, #3
   12fd8:	and	r5, r7, r1, lsl #8
   12fdc:	and	r7, r7, r2, lsl #8
   12fe0:	orr	r5, r5, lr
   12fe4:	orr	r7, r7, r4
   12fe8:	orr	r5, r5, r5, lsl #16
   12fec:	orr	r7, r7, r7, lsl #16
   12ff0:	bls	130d0 <__assert_fail@plt+0x209c>
   12ff4:	ldr	r0, [r6]
   12ff8:	ldr	r1, [pc, #236]	; 130ec <__assert_fail@plt+0x20b8>
   12ffc:	eor	r8, r5, r0
   13000:	eor	r0, r0, r7
   13004:	add	ip, r0, r1
   13008:	add	r2, r8, r1
   1300c:	bic	r0, ip, r0
   13010:	bic	r2, r2, r8
   13014:	ldr	ip, [pc, #212]	; 130f0 <__assert_fail@plt+0x20bc>
   13018:	orr	r2, r2, r0
   1301c:	tst	r2, ip
   13020:	addeq	r2, r6, #4
   13024:	moveq	r6, ip
   13028:	beq	13058 <__assert_fail@plt+0x2024>
   1302c:	b	130d8 <__assert_fail@plt+0x20a4>
   13030:	ldr	ip, [r2], #4
   13034:	eor	sl, r5, ip
   13038:	eor	ip, ip, r7
   1303c:	add	r0, sl, r1
   13040:	add	r9, ip, r1
   13044:	bic	r0, r0, sl
   13048:	bic	ip, r9, ip
   1304c:	orr	r0, r0, ip
   13050:	tst	r0, r6
   13054:	bne	130c8 <__assert_fail@plt+0x2094>
   13058:	sub	r3, r3, #4
   1305c:	cmp	r3, #3
   13060:	mov	r8, r2
   13064:	bhi	13030 <__assert_fail@plt+0x1ffc>
   13068:	cmp	r3, #0
   1306c:	beq	130a8 <__assert_fail@plt+0x2074>
   13070:	ldrb	r1, [r2]
   13074:	cmp	r4, r1
   13078:	cmpne	lr, r1
   1307c:	beq	130e0 <__assert_fail@plt+0x20ac>
   13080:	add	r3, r2, r3
   13084:	add	r2, r2, #1
   13088:	b	1309c <__assert_fail@plt+0x2068>
   1308c:	ldrb	r1, [r2], #1
   13090:	cmp	lr, r1
   13094:	cmpne	r4, r1
   13098:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1309c:	cmp	r3, r2
   130a0:	mov	r0, r2
   130a4:	bne	1308c <__assert_fail@plt+0x2058>
   130a8:	mov	r0, #0
   130ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   130b0:	mov	r1, lr
   130b4:	mov	r2, r3
   130b8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   130bc:	b	10f74 <memchr@plt>
   130c0:	mov	r0, r6
   130c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   130c8:	mov	r2, r8
   130cc:	b	13070 <__assert_fail@plt+0x203c>
   130d0:	mov	r2, r6
   130d4:	b	13068 <__assert_fail@plt+0x2034>
   130d8:	mov	r2, r6
   130dc:	b	13070 <__assert_fail@plt+0x203c>
   130e0:	mov	r0, r2
   130e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   130e8:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   130ec:	mrc2	14, 7, pc, cr14, cr15, {7}
   130f0:	addhi	r8, r0, r0, lsl #1
   130f4:	push	{r4, r5, r6, lr}
   130f8:	subs	r4, r0, #0
   130fc:	beq	13170 <__assert_fail@plt+0x213c>
   13100:	mov	r1, #47	; 0x2f
   13104:	bl	10fc8 <strrchr@plt>
   13108:	subs	r5, r0, #0
   1310c:	beq	1315c <__assert_fail@plt+0x2128>
   13110:	add	r6, r5, #1
   13114:	sub	r3, r6, r4
   13118:	cmp	r3, #6
   1311c:	ble	1315c <__assert_fail@plt+0x2128>
   13120:	mov	r2, #7
   13124:	ldr	r1, [pc, #96]	; 1318c <__assert_fail@plt+0x2158>
   13128:	sub	r0, r5, #6
   1312c:	bl	11010 <strncmp@plt>
   13130:	cmp	r0, #0
   13134:	bne	1315c <__assert_fail@plt+0x2128>
   13138:	mov	r2, #3
   1313c:	ldr	r1, [pc, #76]	; 13190 <__assert_fail@plt+0x215c>
   13140:	mov	r0, r6
   13144:	bl	11010 <strncmp@plt>
   13148:	cmp	r0, #0
   1314c:	movne	r4, r6
   13150:	ldreq	r3, [pc, #60]	; 13194 <__assert_fail@plt+0x2160>
   13154:	addeq	r4, r5, #4
   13158:	streq	r4, [r3]
   1315c:	ldr	r2, [pc, #52]	; 13198 <__assert_fail@plt+0x2164>
   13160:	ldr	r3, [pc, #52]	; 1319c <__assert_fail@plt+0x2168>
   13164:	str	r4, [r2]
   13168:	str	r4, [r3]
   1316c:	pop	{r4, r5, r6, pc}
   13170:	ldr	r3, [pc, #40]	; 131a0 <__assert_fail@plt+0x216c>
   13174:	mov	r2, #55	; 0x37
   13178:	mov	r1, #1
   1317c:	ldr	r3, [r3]
   13180:	ldr	r0, [pc, #28]	; 131a4 <__assert_fail@plt+0x2170>
   13184:	bl	10e6c <fwrite@plt>
   13188:	bl	1101c <abort@plt>
   1318c:	andeq	r9, r1, r0, ror r8
   13190:	andeq	r9, r1, r8, ror r8
   13194:	andeq	sl, r2, r0, asr r1
   13198:			; <UNDEFINED> instruction: 0x0002a1b0
   1319c:	andeq	sl, r2, r4, asr r1
   131a0:	andeq	sl, r2, r0, ror #2
   131a4:	andeq	r9, r1, r8, lsr r8
   131a8:	push	{r4, r5, r6, lr}
   131ac:	mov	r4, r0
   131b0:	mov	r5, r1
   131b4:	bl	184dc <__assert_fail@plt+0x74a8>
   131b8:	ldrb	r3, [r0]
   131bc:	bic	r3, r3, #32
   131c0:	cmp	r3, #85	; 0x55
   131c4:	bne	13224 <__assert_fail@plt+0x21f0>
   131c8:	ldrb	r3, [r0, #1]
   131cc:	bic	r3, r3, #32
   131d0:	cmp	r3, #84	; 0x54
   131d4:	bne	13260 <__assert_fail@plt+0x222c>
   131d8:	ldrb	r3, [r0, #2]
   131dc:	bic	r3, r3, #32
   131e0:	cmp	r3, #70	; 0x46
   131e4:	bne	13260 <__assert_fail@plt+0x222c>
   131e8:	ldrb	r3, [r0, #3]
   131ec:	cmp	r3, #45	; 0x2d
   131f0:	bne	13260 <__assert_fail@plt+0x222c>
   131f4:	ldrb	r3, [r0, #4]
   131f8:	cmp	r3, #56	; 0x38
   131fc:	bne	13260 <__assert_fail@plt+0x222c>
   13200:	ldrb	r3, [r0, #5]
   13204:	cmp	r3, #0
   13208:	bne	13260 <__assert_fail@plt+0x222c>
   1320c:	ldrb	r2, [r4]
   13210:	ldr	r3, [pc, #152]	; 132b0 <__assert_fail@plt+0x227c>
   13214:	ldr	r0, [pc, #152]	; 132b4 <__assert_fail@plt+0x2280>
   13218:	cmp	r2, #96	; 0x60
   1321c:	movne	r0, r3
   13220:	pop	{r4, r5, r6, pc}
   13224:	cmp	r3, #71	; 0x47
   13228:	bne	13260 <__assert_fail@plt+0x222c>
   1322c:	ldrb	r3, [r0, #1]
   13230:	bic	r3, r3, #32
   13234:	cmp	r3, #66	; 0x42
   13238:	bne	13260 <__assert_fail@plt+0x222c>
   1323c:	ldrb	r3, [r0, #2]
   13240:	cmp	r3, #49	; 0x31
   13244:	bne	13260 <__assert_fail@plt+0x222c>
   13248:	ldrb	r3, [r0, #3]
   1324c:	cmp	r3, #56	; 0x38
   13250:	bne	13260 <__assert_fail@plt+0x222c>
   13254:	ldrb	r3, [r0, #4]
   13258:	cmp	r3, #48	; 0x30
   1325c:	beq	13274 <__assert_fail@plt+0x2240>
   13260:	ldr	r3, [pc, #80]	; 132b8 <__assert_fail@plt+0x2284>
   13264:	cmp	r5, #9
   13268:	ldr	r0, [pc, #76]	; 132bc <__assert_fail@plt+0x2288>
   1326c:	movne	r0, r3
   13270:	pop	{r4, r5, r6, pc}
   13274:	ldrb	r3, [r0, #5]
   13278:	cmp	r3, #51	; 0x33
   1327c:	bne	13260 <__assert_fail@plt+0x222c>
   13280:	ldrb	r3, [r0, #6]
   13284:	cmp	r3, #48	; 0x30
   13288:	bne	13260 <__assert_fail@plt+0x222c>
   1328c:	ldrb	r3, [r0, #7]
   13290:	cmp	r3, #0
   13294:	bne	13260 <__assert_fail@plt+0x222c>
   13298:	ldrb	r2, [r4]
   1329c:	ldr	r3, [pc, #28]	; 132c0 <__assert_fail@plt+0x228c>
   132a0:	ldr	r0, [pc, #28]	; 132c4 <__assert_fail@plt+0x2290>
   132a4:	cmp	r2, #96	; 0x60
   132a8:	movne	r0, r3
   132ac:	pop	{r4, r5, r6, pc}
   132b0:	ldrdeq	r9, [r1], -r4
   132b4:	ldrdeq	r9, [r1], -r0
   132b8:	andeq	r9, r1, r4, ror #17
   132bc:	andeq	r9, r1, r0, ror #17
   132c0:	ldrdeq	r9, [r1], -ip
   132c4:	ldrdeq	r9, [r1], -r8
   132c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132cc:	sub	sp, sp, #140	; 0x8c
   132d0:	mov	r9, r1
   132d4:	str	r3, [sp, #24]
   132d8:	mov	r3, #1
   132dc:	mov	sl, r0
   132e0:	str	r2, [sp, #44]	; 0x2c
   132e4:	str	r3, [sp, #28]
   132e8:	bl	10e84 <__ctype_get_mb_cur_max@plt>
   132ec:	ldr	r3, [sp, #180]	; 0xb4
   132f0:	mov	fp, r9
   132f4:	mov	r9, sl
   132f8:	lsr	r3, r3, #1
   132fc:	and	r3, r3, #1
   13300:	str	r3, [sp, #40]	; 0x28
   13304:	ldr	r3, [sp, #180]	; 0xb4
   13308:	mov	r2, #0
   1330c:	and	r3, r3, #4
   13310:	str	r3, [sp, #100]	; 0x64
   13314:	ldr	r3, [sp, #180]	; 0xb4
   13318:	str	r2, [sp, #76]	; 0x4c
   1331c:	and	r3, r3, #1
   13320:	str	r3, [sp, #96]	; 0x60
   13324:	str	r2, [sp, #36]	; 0x24
   13328:	str	r2, [sp, #56]	; 0x38
   1332c:	str	r2, [sp, #68]	; 0x44
   13330:	str	r2, [sp, #72]	; 0x48
   13334:	str	r2, [sp, #84]	; 0x54
   13338:	str	r0, [sp, #80]	; 0x50
   1333c:	ldr	r3, [sp, #176]	; 0xb0
   13340:	cmp	r3, #10
   13344:	ldrls	pc, [pc, r3, lsl #2]
   13348:	b	14520 <__assert_fail@plt+0x34ec>
   1334c:	andeq	r3, r1, r8, ror r3
   13350:	muleq	r1, r8, r6
   13354:	strdeq	r3, [r1], -r0
   13358:	andeq	r3, r1, ip, asr #13
   1335c:	andeq	r3, r1, r4, asr #16
   13360:	andeq	r3, r1, r4, lsr #16
   13364:	andeq	r3, r1, ip, ror #13
   13368:	andeq	r3, r1, r0, lsl r7
   1336c:	andeq	r3, r1, r8, lsr r7
   13370:	andeq	r3, r1, r8, lsr r7
   13374:	andeq	r3, r1, r8, lsr r7
   13378:	mov	r3, #0
   1337c:	ldr	r1, [sp, #56]	; 0x38
   13380:	ldr	r2, [sp, #176]	; 0xb0
   13384:	ldr	lr, [sp, #176]	; 0xb0
   13388:	mov	r8, r3
   1338c:	mov	ip, r3
   13390:	str	r3, [sp, #40]	; 0x28
   13394:	mov	r3, r1
   13398:	cmp	r2, #2
   1339c:	moveq	r3, #0
   133a0:	andne	r3, r3, #1
   133a4:	mov	r0, r3
   133a8:	str	r3, [sp, #92]	; 0x5c
   133ac:	ldr	r3, [sp, #68]	; 0x44
   133b0:	sub	lr, lr, #2
   133b4:	adds	r2, r3, #0
   133b8:	movne	r2, #1
   133bc:	and	r3, r1, ip
   133c0:	and	r3, r2, r3
   133c4:	clz	lr, lr
   133c8:	str	r3, [sp, #88]	; 0x58
   133cc:	lsr	lr, lr, #5
   133d0:	mov	r3, ip
   133d4:	and	r3, r3, lr
   133d8:	mov	sl, #0
   133dc:	and	r0, r2, r0
   133e0:	str	r3, [sp, #64]	; 0x40
   133e4:	eor	r3, r1, #1
   133e8:	str	lr, [sp, #52]	; 0x34
   133ec:	str	r0, [sp, #48]	; 0x30
   133f0:	str	r3, [sp, #60]	; 0x3c
   133f4:	ldr	r3, [sp, #24]
   133f8:	cmn	r3, #1
   133fc:	beq	1392c <__assert_fail@plt+0x28f8>
   13400:	subs	r7, r3, sl
   13404:	movne	r7, #1
   13408:	cmp	r7, #0
   1340c:	beq	13944 <__assert_fail@plt+0x2910>
   13410:	ldr	r3, [sp, #48]	; 0x30
   13414:	cmp	r3, #0
   13418:	beq	13cb0 <__assert_fail@plt+0x2c7c>
   1341c:	ldr	r2, [sp, #68]	; 0x44
   13420:	ldr	r1, [sp, #24]
   13424:	cmp	r2, #1
   13428:	mov	r3, r2
   1342c:	movls	r3, #0
   13430:	movhi	r3, #1
   13434:	cmn	r1, #1
   13438:	movne	r3, #0
   1343c:	cmp	r3, #0
   13440:	add	r4, sl, r2
   13444:	beq	13454 <__assert_fail@plt+0x2420>
   13448:	ldr	r0, [sp, #44]	; 0x2c
   1344c:	bl	10f08 <strlen@plt>
   13450:	str	r0, [sp, #24]
   13454:	ldr	r3, [sp, #24]
   13458:	cmp	r3, r4
   1345c:	ldr	r3, [sp, #44]	; 0x2c
   13460:	add	r5, r3, sl
   13464:	bcc	13cb8 <__assert_fail@plt+0x2c84>
   13468:	mov	r0, r5
   1346c:	ldr	r2, [sp, #68]	; 0x44
   13470:	ldr	r1, [sp, #72]	; 0x48
   13474:	bl	10e24 <memcmp@plt>
   13478:	cmp	r0, #0
   1347c:	bne	13cb8 <__assert_fail@plt+0x2c84>
   13480:	ldr	r3, [sp, #40]	; 0x28
   13484:	cmp	r3, #0
   13488:	bne	14674 <__assert_fail@plt+0x3640>
   1348c:	ldrb	r4, [r5]
   13490:	cmp	r4, #126	; 0x7e
   13494:	ldrls	pc, [pc, r4, lsl #2]
   13498:	b	145b0 <__assert_fail@plt+0x357c>
   1349c:	andeq	r3, r1, r0, ror fp
   134a0:			; <UNDEFINED> instruction: 0x000145b0
   134a4:			; <UNDEFINED> instruction: 0x000145b0
   134a8:			; <UNDEFINED> instruction: 0x000145b0
   134ac:			; <UNDEFINED> instruction: 0x000145b0
   134b0:			; <UNDEFINED> instruction: 0x000145b0
   134b4:			; <UNDEFINED> instruction: 0x000145b0
   134b8:	andeq	r3, r1, ip, asr fp
   134bc:	andeq	r3, r1, r8, asr #22
   134c0:	andeq	r3, r1, r4, lsr #22
   134c4:	andeq	r3, r1, r4, lsl #22
   134c8:	andeq	r3, r1, r4, lsr fp
   134cc:	andeq	r3, r1, ip, ror #20
   134d0:	andeq	r3, r1, r0, lsr #25
   134d4:			; <UNDEFINED> instruction: 0x000145b0
   134d8:			; <UNDEFINED> instruction: 0x000145b0
   134dc:			; <UNDEFINED> instruction: 0x000145b0
   134e0:			; <UNDEFINED> instruction: 0x000145b0
   134e4:			; <UNDEFINED> instruction: 0x000145b0
   134e8:			; <UNDEFINED> instruction: 0x000145b0
   134ec:			; <UNDEFINED> instruction: 0x000145b0
   134f0:			; <UNDEFINED> instruction: 0x000145b0
   134f4:			; <UNDEFINED> instruction: 0x000145b0
   134f8:			; <UNDEFINED> instruction: 0x000145b0
   134fc:			; <UNDEFINED> instruction: 0x000145b0
   13500:			; <UNDEFINED> instruction: 0x000145b0
   13504:			; <UNDEFINED> instruction: 0x000145b0
   13508:			; <UNDEFINED> instruction: 0x000145b0
   1350c:			; <UNDEFINED> instruction: 0x000145b0
   13510:			; <UNDEFINED> instruction: 0x000145b0
   13514:			; <UNDEFINED> instruction: 0x000145b0
   13518:			; <UNDEFINED> instruction: 0x000145b0
   1351c:	muleq	r1, r0, ip
   13520:	andeq	r3, r1, r0, ror ip
   13524:	andeq	r3, r1, r0, ror ip
   13528:	andeq	r3, r1, r0, asr ip
   1352c:	andeq	r3, r1, r0, ror ip
   13530:	andeq	r3, r1, ip, asr sl
   13534:	andeq	r3, r1, r0, ror ip
   13538:	andeq	r3, r1, r8, lsr sl
   1353c:	andeq	r3, r1, r0, ror ip
   13540:	andeq	r3, r1, r0, ror ip
   13544:	andeq	r3, r1, r0, ror ip
   13548:	andeq	r3, r1, ip, asr sl
   1354c:	andeq	r3, r1, ip, asr sl
   13550:	andeq	r3, r1, ip, asr sl
   13554:	andeq	r3, r1, ip, asr sl
   13558:	andeq	r3, r1, ip, asr sl
   1355c:	andeq	r3, r1, ip, asr sl
   13560:	andeq	r3, r1, ip, asr sl
   13564:	andeq	r3, r1, ip, asr sl
   13568:	andeq	r3, r1, ip, asr sl
   1356c:	andeq	r3, r1, ip, asr sl
   13570:	andeq	r3, r1, ip, asr sl
   13574:	andeq	r3, r1, ip, asr sl
   13578:	andeq	r3, r1, ip, asr sl
   1357c:	andeq	r3, r1, ip, asr sl
   13580:	andeq	r3, r1, ip, asr sl
   13584:	andeq	r3, r1, ip, asr sl
   13588:	andeq	r3, r1, r0, ror ip
   1358c:	andeq	r3, r1, r0, ror ip
   13590:	andeq	r3, r1, r0, ror ip
   13594:	andeq	r3, r1, r0, ror ip
   13598:	andeq	r3, r1, r8, ror #19
   1359c:			; <UNDEFINED> instruction: 0x000145b0
   135a0:	andeq	r3, r1, ip, asr sl
   135a4:	andeq	r3, r1, ip, asr sl
   135a8:	andeq	r3, r1, ip, asr sl
   135ac:	andeq	r3, r1, ip, asr sl
   135b0:	andeq	r3, r1, ip, asr sl
   135b4:	andeq	r3, r1, ip, asr sl
   135b8:	andeq	r3, r1, ip, asr sl
   135bc:	andeq	r3, r1, ip, asr sl
   135c0:	andeq	r3, r1, ip, asr sl
   135c4:	andeq	r3, r1, ip, asr sl
   135c8:	andeq	r3, r1, ip, asr sl
   135cc:	andeq	r3, r1, ip, asr sl
   135d0:	andeq	r3, r1, ip, asr sl
   135d4:	andeq	r3, r1, ip, asr sl
   135d8:	andeq	r3, r1, ip, asr sl
   135dc:	andeq	r3, r1, ip, asr sl
   135e0:	andeq	r3, r1, ip, asr sl
   135e4:	andeq	r3, r1, ip, asr sl
   135e8:	andeq	r3, r1, ip, asr sl
   135ec:	andeq	r3, r1, ip, asr sl
   135f0:	andeq	r3, r1, ip, asr sl
   135f4:	andeq	r3, r1, ip, asr sl
   135f8:	andeq	r3, r1, ip, asr sl
   135fc:	andeq	r3, r1, ip, asr sl
   13600:	andeq	r3, r1, ip, asr sl
   13604:	andeq	r3, r1, ip, asr sl
   13608:	andeq	r3, r1, r0, ror ip
   1360c:			; <UNDEFINED> instruction: 0x000139b4
   13610:	andeq	r3, r1, ip, asr sl
   13614:	andeq	r3, r1, r0, ror ip
   13618:	andeq	r3, r1, ip, asr sl
   1361c:	andeq	r3, r1, r0, ror ip
   13620:	andeq	r3, r1, ip, asr sl
   13624:	andeq	r3, r1, ip, asr sl
   13628:	andeq	r3, r1, ip, asr sl
   1362c:	andeq	r3, r1, ip, asr sl
   13630:	andeq	r3, r1, ip, asr sl
   13634:	andeq	r3, r1, ip, asr sl
   13638:	andeq	r3, r1, ip, asr sl
   1363c:	andeq	r3, r1, ip, asr sl
   13640:	andeq	r3, r1, ip, asr sl
   13644:	andeq	r3, r1, ip, asr sl
   13648:	andeq	r3, r1, ip, asr sl
   1364c:	andeq	r3, r1, ip, asr sl
   13650:	andeq	r3, r1, ip, asr sl
   13654:	andeq	r3, r1, ip, asr sl
   13658:	andeq	r3, r1, ip, asr sl
   1365c:	andeq	r3, r1, ip, asr sl
   13660:	andeq	r3, r1, ip, asr sl
   13664:	andeq	r3, r1, ip, asr sl
   13668:	andeq	r3, r1, ip, asr sl
   1366c:	andeq	r3, r1, ip, asr sl
   13670:	andeq	r3, r1, ip, asr sl
   13674:	andeq	r3, r1, ip, asr sl
   13678:	andeq	r3, r1, ip, asr sl
   1367c:	andeq	r3, r1, ip, asr sl
   13680:	andeq	r3, r1, ip, asr sl
   13684:	andeq	r3, r1, ip, asr sl
   13688:	andeq	r3, r1, ip, ror #16
   1368c:	andeq	r3, r1, r0, ror ip
   13690:	andeq	r3, r1, ip, ror #16
   13694:	andeq	r3, r1, r0, asr ip
   13698:	mov	r3, #1
   1369c:	str	r3, [sp, #40]	; 0x28
   136a0:	str	r3, [sp, #68]	; 0x44
   136a4:	mov	r8, #0
   136a8:	ldr	r3, [pc, #4056]	; 14688 <__assert_fail@plt+0x3654>
   136ac:	str	r3, [sp, #72]	; 0x48
   136b0:	mov	r3, #2
   136b4:	str	r3, [sp, #176]	; 0xb0
   136b8:	ldr	r1, [sp, #56]	; 0x38
   136bc:	mov	r2, r3
   136c0:	ldr	ip, [sp, #40]	; 0x28
   136c4:	mov	lr, r3
   136c8:	b	13394 <__assert_fail@plt+0x2360>
   136cc:	mov	r3, #1
   136d0:	str	r3, [sp, #56]	; 0x38
   136d4:	str	r3, [sp, #68]	; 0x44
   136d8:	str	r3, [sp, #40]	; 0x28
   136dc:	ldr	r3, [pc, #4004]	; 14688 <__assert_fail@plt+0x3654>
   136e0:	mov	r8, #0
   136e4:	str	r3, [sp, #72]	; 0x48
   136e8:	b	136b0 <__assert_fail@plt+0x267c>
   136ec:	mov	r3, #1
   136f0:	str	r3, [sp, #56]	; 0x38
   136f4:	str	r3, [sp, #68]	; 0x44
   136f8:	str	r3, [sp, #40]	; 0x28
   136fc:	ldr	r3, [pc, #3976]	; 1468c <__assert_fail@plt+0x3658>
   13700:	mov	r8, #0
   13704:	str	r3, [sp, #72]	; 0x48
   13708:	mov	r3, #5
   1370c:	b	136b4 <__assert_fail@plt+0x2680>
   13710:	mov	r3, #0
   13714:	str	r3, [sp, #40]	; 0x28
   13718:	mov	r3, #1
   1371c:	str	r3, [sp, #56]	; 0x38
   13720:	mov	r8, #0
   13724:	mov	r1, r3
   13728:	ldr	r2, [sp, #176]	; 0xb0
   1372c:	ldr	ip, [sp, #40]	; 0x28
   13730:	ldr	lr, [sp, #176]	; 0xb0
   13734:	b	13394 <__assert_fail@plt+0x2360>
   13738:	ldr	r3, [sp, #176]	; 0xb0
   1373c:	cmp	r3, #10
   13740:	beq	13784 <__assert_fail@plt+0x2750>
   13744:	mov	r2, #5
   13748:	ldr	r1, [pc, #3904]	; 14690 <__assert_fail@plt+0x365c>
   1374c:	mov	r0, #0
   13750:	bl	10e3c <dcgettext@plt>
   13754:	ldr	r2, [pc, #3892]	; 14690 <__assert_fail@plt+0x365c>
   13758:	cmp	r0, r2
   1375c:	str	r0, [sp, #188]	; 0xbc
   13760:	beq	1481c <__assert_fail@plt+0x37e8>
   13764:	mov	r2, #5
   13768:	ldr	r1, [pc, #3864]	; 14688 <__assert_fail@plt+0x3654>
   1376c:	mov	r0, #0
   13770:	bl	10e3c <dcgettext@plt>
   13774:	ldr	r2, [pc, #3852]	; 14688 <__assert_fail@plt+0x3654>
   13778:	cmp	r0, r2
   1377c:	str	r0, [sp, #192]	; 0xc0
   13780:	beq	1480c <__assert_fail@plt+0x37d8>
   13784:	ldr	r8, [sp, #40]	; 0x28
   13788:	cmp	r8, #0
   1378c:	movne	r8, #0
   13790:	bne	137c0 <__assert_fail@plt+0x278c>
   13794:	ldr	r3, [sp, #188]	; 0xbc
   13798:	ldrb	r3, [r3]
   1379c:	cmp	r3, #0
   137a0:	beq	137c0 <__assert_fail@plt+0x278c>
   137a4:	ldr	r2, [sp, #188]	; 0xbc
   137a8:	cmp	fp, r8
   137ac:	strbhi	r3, [r9, r8]
   137b0:	ldrb	r3, [r2, #1]!
   137b4:	add	r8, r8, #1
   137b8:	cmp	r3, #0
   137bc:	bne	137a8 <__assert_fail@plt+0x2774>
   137c0:	ldr	r0, [sp, #192]	; 0xc0
   137c4:	bl	10f08 <strlen@plt>
   137c8:	ldr	r3, [sp, #192]	; 0xc0
   137cc:	ldr	r2, [sp, #176]	; 0xb0
   137d0:	str	r3, [sp, #72]	; 0x48
   137d4:	mov	r3, #1
   137d8:	str	r3, [sp, #56]	; 0x38
   137dc:	mov	r1, r3
   137e0:	ldr	ip, [sp, #40]	; 0x28
   137e4:	ldr	lr, [sp, #176]	; 0xb0
   137e8:	str	r0, [sp, #68]	; 0x44
   137ec:	b	13394 <__assert_fail@plt+0x2360>
   137f0:	ldr	r3, [sp, #40]	; 0x28
   137f4:	cmp	r3, #0
   137f8:	beq	144a0 <__assert_fail@plt+0x346c>
   137fc:	mov	r3, #1
   13800:	str	r3, [sp, #68]	; 0x44
   13804:	ldr	r3, [pc, #3708]	; 14688 <__assert_fail@plt+0x3654>
   13808:	str	r3, [sp, #72]	; 0x48
   1380c:	mov	r8, #0
   13810:	ldr	r1, [sp, #56]	; 0x38
   13814:	ldr	r2, [sp, #176]	; 0xb0
   13818:	ldr	ip, [sp, #40]	; 0x28
   1381c:	ldr	lr, [sp, #176]	; 0xb0
   13820:	b	13394 <__assert_fail@plt+0x2360>
   13824:	ldr	r3, [sp, #40]	; 0x28
   13828:	cmp	r3, #0
   1382c:	beq	14524 <__assert_fail@plt+0x34f0>
   13830:	str	r3, [sp, #56]	; 0x38
   13834:	mov	r3, #1
   13838:	str	r3, [sp, #68]	; 0x44
   1383c:	ldr	r3, [pc, #3656]	; 1468c <__assert_fail@plt+0x3658>
   13840:	b	13808 <__assert_fail@plt+0x27d4>
   13844:	ldr	r3, [sp, #40]	; 0x28
   13848:	cmp	r3, #0
   1384c:	mov	r3, #1
   13850:	streq	r3, [sp, #56]	; 0x38
   13854:	beq	144a0 <__assert_fail@plt+0x346c>
   13858:	str	r3, [sp, #68]	; 0x44
   1385c:	ldr	r3, [pc, #3620]	; 14688 <__assert_fail@plt+0x3654>
   13860:	mov	r8, #0
   13864:	str	r3, [sp, #72]	; 0x48
   13868:	b	136b0 <__assert_fail@plt+0x267c>
   1386c:	ldr	r3, [sp, #24]
   13870:	ldr	r6, [sp, #48]	; 0x30
   13874:	cmn	r3, #1
   13878:	beq	13ed4 <__assert_fail@plt+0x2ea0>
   1387c:	subs	r3, r3, #1
   13880:	movne	r3, #1
   13884:	cmp	r3, #0
   13888:	beq	13c54 <__assert_fail@plt+0x2c20>
   1388c:	ldr	r1, [sp, #52]	; 0x34
   13890:	mov	r7, r3
   13894:	mov	r3, #0
   13898:	str	r3, [sp, #32]
   1389c:	ldr	r3, [sp, #60]	; 0x3c
   138a0:	orr	r2, r1, r3
   138a4:	ldr	r3, [sp, #40]	; 0x28
   138a8:	eor	r2, r2, #1
   138ac:	orr	r2, r3, r2
   138b0:	tst	r2, #255	; 0xff
   138b4:	bne	141d8 <__assert_fail@plt+0x31a4>
   138b8:	cmp	r6, #0
   138bc:	bne	13a98 <__assert_fail@plt+0x2a64>
   138c0:	ldr	r3, [sp, #36]	; 0x24
   138c4:	add	sl, sl, #1
   138c8:	and	r3, r3, r7
   138cc:	uxtb	r6, r3
   138d0:	cmp	r6, #0
   138d4:	beq	13900 <__assert_fail@plt+0x28cc>
   138d8:	cmp	fp, r8
   138dc:	movhi	r3, #39	; 0x27
   138e0:	strbhi	r3, [r9, r8]
   138e4:	add	r3, r8, #1
   138e8:	cmp	fp, r3
   138ec:	movhi	r2, #39	; 0x27
   138f0:	add	r8, r8, #2
   138f4:	strbhi	r2, [r9, r3]
   138f8:	mov	r3, #0
   138fc:	str	r3, [sp, #36]	; 0x24
   13900:	ldr	r2, [sp, #32]
   13904:	cmp	r8, fp
   13908:	ldr	r3, [sp, #28]
   1390c:	strbcc	r4, [r9, r8]
   13910:	cmp	r2, #0
   13914:	moveq	r3, #0
   13918:	str	r3, [sp, #28]
   1391c:	ldr	r3, [sp, #24]
   13920:	add	r8, r8, #1
   13924:	cmn	r3, #1
   13928:	bne	13400 <__assert_fail@plt+0x23cc>
   1392c:	ldr	r3, [sp, #44]	; 0x2c
   13930:	ldrb	r3, [r3, sl]
   13934:	adds	r7, r3, #0
   13938:	movne	r7, #1
   1393c:	cmp	r7, #0
   13940:	bne	13410 <__assert_fail@plt+0x23dc>
   13944:	ldr	r3, [sp, #64]	; 0x40
   13948:	cmp	r8, #0
   1394c:	movne	r3, #0
   13950:	andeq	r3, r3, #1
   13954:	cmp	r3, #0
   13958:	str	r3, [sp, #64]	; 0x40
   1395c:	bne	14400 <__assert_fail@plt+0x33cc>
   13960:	ldr	r3, [sp, #40]	; 0x28
   13964:	ldr	r2, [sp, #52]	; 0x34
   13968:	eor	r3, r3, #1
   1396c:	ands	r2, r2, r3
   13970:	beq	1482c <__assert_fail@plt+0x37f8>
   13974:	ldr	r3, [sp, #76]	; 0x4c
   13978:	cmp	r3, #0
   1397c:	beq	147fc <__assert_fail@plt+0x37c8>
   13980:	ldr	r3, [sp, #28]
   13984:	cmp	r3, #0
   13988:	bne	147b8 <__assert_fail@plt+0x3784>
   1398c:	ldr	r2, [sp, #84]	; 0x54
   13990:	clz	r3, fp
   13994:	cmp	r2, #0
   13998:	lsr	r3, r3, #5
   1399c:	moveq	r3, #0
   139a0:	cmp	r3, #0
   139a4:	beq	14758 <__assert_fail@plt+0x3724>
   139a8:	mov	fp, r2
   139ac:	str	r3, [sp, #76]	; 0x4c
   139b0:	b	1333c <__assert_fail@plt+0x2308>
   139b4:	ldr	r3, [sp, #176]	; 0xb0
   139b8:	ldr	r6, [sp, #48]	; 0x30
   139bc:	cmp	r3, #2
   139c0:	beq	13ef8 <__assert_fail@plt+0x2ec4>
   139c4:	ldr	r3, [sp, #88]	; 0x58
   139c8:	cmp	r3, #0
   139cc:	beq	1447c <__assert_fail@plt+0x3448>
   139d0:	mov	r3, #0
   139d4:	add	sl, sl, #1
   139d8:	ldr	r6, [sp, #36]	; 0x24
   139dc:	str	r3, [sp, #32]
   139e0:	mov	r4, #92	; 0x5c
   139e4:	b	138d0 <__assert_fail@plt+0x289c>
   139e8:	ldr	r3, [sp, #176]	; 0xb0
   139ec:	ldr	r6, [sp, #48]	; 0x30
   139f0:	cmp	r3, #2
   139f4:	beq	13f28 <__assert_fail@plt+0x2ef4>
   139f8:	cmp	r3, #5
   139fc:	bne	1448c <__assert_fail@plt+0x3458>
   13a00:	ldr	r3, [sp, #100]	; 0x64
   13a04:	cmp	r3, #0
   13a08:	beq	144f0 <__assert_fail@plt+0x34bc>
   13a0c:	ldr	r2, [sp, #24]
   13a10:	add	r3, sl, #2
   13a14:	cmp	r2, r3
   13a18:	bls	13a28 <__assert_fail@plt+0x29f4>
   13a1c:	ldrb	r4, [r5, #1]
   13a20:	cmp	r4, #63	; 0x3f
   13a24:	beq	14698 <__assert_fail@plt+0x3664>
   13a28:	mov	r1, #0
   13a2c:	str	r1, [sp, #32]
   13a30:	mov	r4, #63	; 0x3f
   13a34:	b	1389c <__assert_fail@plt+0x2868>
   13a38:	ldr	r3, [sp, #176]	; 0xb0
   13a3c:	ldr	r6, [sp, #48]	; 0x30
   13a40:	cmp	r3, #2
   13a44:	beq	13f54 <__assert_fail@plt+0x2f20>
   13a48:	str	r7, [sp, #32]
   13a4c:	str	r7, [sp, #76]	; 0x4c
   13a50:	mov	r1, #0
   13a54:	mov	r4, #39	; 0x27
   13a58:	b	1389c <__assert_fail@plt+0x2868>
   13a5c:	ldr	r6, [sp, #48]	; 0x30
   13a60:	ldr	r1, [sp, #52]	; 0x34
   13a64:	str	r7, [sp, #32]
   13a68:	b	1389c <__assert_fail@plt+0x2868>
   13a6c:	ldr	r6, [sp, #48]	; 0x30
   13a70:	ldr	r1, [sp, #52]	; 0x34
   13a74:	mov	r4, #12
   13a78:	mov	r3, #102	; 0x66
   13a7c:	ldr	r2, [sp, #56]	; 0x38
   13a80:	cmp	r2, #0
   13a84:	streq	r2, [sp, #32]
   13a88:	beq	1389c <__assert_fail@plt+0x2868>
   13a8c:	mov	r4, r3
   13a90:	mov	r3, #0
   13a94:	str	r3, [sp, #32]
   13a98:	ldr	r3, [sp, #40]	; 0x28
   13a9c:	cmp	r3, #0
   13aa0:	bne	14210 <__assert_fail@plt+0x31dc>
   13aa4:	ldr	r3, [sp, #36]	; 0x24
   13aa8:	eor	r3, r3, #1
   13aac:	and	r3, r3, r1
   13ab0:	ands	r3, r3, #255	; 0xff
   13ab4:	beq	13aec <__assert_fail@plt+0x2ab8>
   13ab8:	cmp	fp, r8
   13abc:	movhi	r2, #39	; 0x27
   13ac0:	strbhi	r2, [r9, r8]
   13ac4:	add	r2, r8, #1
   13ac8:	cmp	fp, r2
   13acc:	movhi	r1, #36	; 0x24
   13ad0:	strbhi	r1, [r9, r2]
   13ad4:	add	r2, r8, #2
   13ad8:	cmp	fp, r2
   13adc:	add	r8, r8, #3
   13ae0:	movhi	r1, #39	; 0x27
   13ae4:	strbhi	r1, [r9, r2]
   13ae8:	str	r3, [sp, #36]	; 0x24
   13aec:	cmp	fp, r8
   13af0:	movhi	r3, #92	; 0x5c
   13af4:	strbhi	r3, [r9, r8]
   13af8:	add	sl, sl, #1
   13afc:	add	r8, r8, #1
   13b00:	b	13900 <__assert_fail@plt+0x28cc>
   13b04:	ldr	r6, [sp, #48]	; 0x30
   13b08:	mov	r4, #10
   13b0c:	mov	r3, #110	; 0x6e
   13b10:	ldr	r2, [sp, #64]	; 0x40
   13b14:	cmp	r2, #0
   13b18:	bne	14598 <__assert_fail@plt+0x3564>
   13b1c:	ldr	r1, [sp, #52]	; 0x34
   13b20:	b	13a7c <__assert_fail@plt+0x2a48>
   13b24:	ldr	r6, [sp, #48]	; 0x30
   13b28:	ldr	r1, [sp, #52]	; 0x34
   13b2c:	mov	r3, #116	; 0x74
   13b30:	b	13a7c <__assert_fail@plt+0x2a48>
   13b34:	ldr	r6, [sp, #48]	; 0x30
   13b38:	ldr	r1, [sp, #52]	; 0x34
   13b3c:	mov	r4, #11
   13b40:	mov	r3, #118	; 0x76
   13b44:	b	13a7c <__assert_fail@plt+0x2a48>
   13b48:	ldr	r6, [sp, #48]	; 0x30
   13b4c:	ldr	r1, [sp, #52]	; 0x34
   13b50:	mov	r4, #8
   13b54:	mov	r3, #98	; 0x62
   13b58:	b	13a7c <__assert_fail@plt+0x2a48>
   13b5c:	ldr	r6, [sp, #48]	; 0x30
   13b60:	ldr	r1, [sp, #52]	; 0x34
   13b64:	mov	r4, #7
   13b68:	mov	r3, #97	; 0x61
   13b6c:	b	13a7c <__assert_fail@plt+0x2a48>
   13b70:	ldr	r3, [sp, #56]	; 0x38
   13b74:	ldr	r6, [sp, #48]	; 0x30
   13b78:	cmp	r3, #0
   13b7c:	beq	14040 <__assert_fail@plt+0x300c>
   13b80:	ldr	r3, [sp, #40]	; 0x28
   13b84:	cmp	r3, #0
   13b88:	bne	14674 <__assert_fail@plt+0x3640>
   13b8c:	ldr	r3, [sp, #36]	; 0x24
   13b90:	ldr	r2, [sp, #52]	; 0x34
   13b94:	eor	r3, r3, #1
   13b98:	ands	r3, r2, r3
   13b9c:	moveq	r2, r8
   13ba0:	beq	13bd8 <__assert_fail@plt+0x2ba4>
   13ba4:	cmp	fp, r8
   13ba8:	movhi	r2, #39	; 0x27
   13bac:	strbhi	r2, [r9, r8]
   13bb0:	add	r2, r8, #1
   13bb4:	cmp	fp, r2
   13bb8:	movhi	r1, #36	; 0x24
   13bbc:	strbhi	r1, [r9, r2]
   13bc0:	add	r2, r8, #2
   13bc4:	cmp	fp, r2
   13bc8:	movhi	r1, #39	; 0x27
   13bcc:	strbhi	r1, [r9, r2]
   13bd0:	add	r2, r8, #3
   13bd4:	str	r3, [sp, #36]	; 0x24
   13bd8:	cmp	fp, r2
   13bdc:	movhi	r3, #92	; 0x5c
   13be0:	strbhi	r3, [r9, r2]
   13be4:	ldr	r3, [sp, #92]	; 0x5c
   13be8:	add	r8, r2, #1
   13bec:	cmp	r3, #0
   13bf0:	beq	14574 <__assert_fail@plt+0x3540>
   13bf4:	ldr	r1, [sp, #24]
   13bf8:	add	r3, sl, #1
   13bfc:	cmp	r1, r3
   13c00:	bls	13c38 <__assert_fail@plt+0x2c04>
   13c04:	ldr	r1, [sp, #44]	; 0x2c
   13c08:	ldrb	r3, [r1, r3]
   13c0c:	sub	r3, r3, #48	; 0x30
   13c10:	cmp	r3, #9
   13c14:	bhi	13c38 <__assert_fail@plt+0x2c04>
   13c18:	cmp	fp, r8
   13c1c:	movhi	r3, #48	; 0x30
   13c20:	strbhi	r3, [r9, r8]
   13c24:	add	r3, r2, #2
   13c28:	cmp	fp, r3
   13c2c:	add	r8, r2, #3
   13c30:	movhi	r1, #48	; 0x30
   13c34:	strbhi	r1, [r9, r3]
   13c38:	ldr	r3, [sp, #40]	; 0x28
   13c3c:	ldr	r1, [sp, #52]	; 0x34
   13c40:	mov	r7, r3
   13c44:	str	r3, [sp, #32]
   13c48:	mov	r4, #48	; 0x30
   13c4c:	b	1389c <__assert_fail@plt+0x2868>
   13c50:	ldr	r6, [sp, #48]	; 0x30
   13c54:	cmp	sl, #0
   13c58:	streq	r7, [sp, #32]
   13c5c:	beq	13c7c <__assert_fail@plt+0x2c48>
   13c60:	mov	r3, #0
   13c64:	ldr	r1, [sp, #52]	; 0x34
   13c68:	str	r3, [sp, #32]
   13c6c:	b	1389c <__assert_fail@plt+0x2868>
   13c70:	ldr	r6, [sp, #48]	; 0x30
   13c74:	mov	r3, #0
   13c78:	str	r3, [sp, #32]
   13c7c:	ldr	r3, [sp, #64]	; 0x40
   13c80:	cmp	r3, #0
   13c84:	bne	14400 <__assert_fail@plt+0x33cc>
   13c88:	ldr	r1, [sp, #52]	; 0x34
   13c8c:	b	1389c <__assert_fail@plt+0x2868>
   13c90:	ldr	r3, [sp, #48]	; 0x30
   13c94:	mov	r6, r3
   13c98:	str	r3, [sp, #32]
   13c9c:	b	13c7c <__assert_fail@plt+0x2c48>
   13ca0:	ldr	r6, [sp, #48]	; 0x30
   13ca4:	mov	r4, #13
   13ca8:	mov	r3, #114	; 0x72
   13cac:	b	13b10 <__assert_fail@plt+0x2adc>
   13cb0:	ldr	r3, [sp, #44]	; 0x2c
   13cb4:	add	r5, r3, sl
   13cb8:	ldrb	r4, [r5]
   13cbc:	cmp	r4, #126	; 0x7e
   13cc0:	ldrls	pc, [pc, r4, lsl #2]
   13cc4:	b	14060 <__assert_fail@plt+0x302c>
   13cc8:	andeq	r4, r1, r0, lsr r0
   13ccc:	andeq	r4, r1, r0, rrx
   13cd0:	andeq	r4, r1, r0, rrx
   13cd4:	andeq	r4, r1, r0, rrx
   13cd8:	andeq	r4, r1, r0, rrx
   13cdc:	andeq	r4, r1, r0, rrx
   13ce0:	andeq	r4, r1, r0, rrx
   13ce4:	andeq	r4, r1, r8, lsr #32
   13ce8:	andeq	r4, r1, r0, lsr #32
   13cec:	andeq	r4, r1, r4, lsl r0
   13cf0:	andeq	r4, r1, ip
   13cf4:	andeq	r4, r1, r4
   13cf8:	strdeq	r3, [r1], -ip
   13cfc:	strdeq	r3, [r1], -r4
   13d00:	andeq	r4, r1, r0, rrx
   13d04:	andeq	r4, r1, r0, rrx
   13d08:	andeq	r4, r1, r0, rrx
   13d0c:	andeq	r4, r1, r0, rrx
   13d10:	andeq	r4, r1, r0, rrx
   13d14:	andeq	r4, r1, r0, rrx
   13d18:	andeq	r4, r1, r0, rrx
   13d1c:	andeq	r4, r1, r0, rrx
   13d20:	andeq	r4, r1, r0, rrx
   13d24:	andeq	r4, r1, r0, rrx
   13d28:	andeq	r4, r1, r0, rrx
   13d2c:	andeq	r4, r1, r0, rrx
   13d30:	andeq	r4, r1, r0, rrx
   13d34:	andeq	r4, r1, r0, rrx
   13d38:	andeq	r4, r1, r0, rrx
   13d3c:	andeq	r4, r1, r0, rrx
   13d40:	andeq	r4, r1, r0, rrx
   13d44:	andeq	r4, r1, r0, rrx
   13d48:	andeq	r3, r1, r8, ror #31
   13d4c:	andeq	r3, r1, r0, ror #31
   13d50:	andeq	r3, r1, r0, ror #31
   13d54:	ldrdeq	r3, [r1], -r8
   13d58:	andeq	r3, r1, r0, ror #31
   13d5c:	ldrdeq	r3, [r1], -r0
   13d60:	andeq	r3, r1, r0, ror #31
   13d64:	andeq	r3, r1, r4, asr #30
   13d68:	andeq	r3, r1, r0, ror #31
   13d6c:	andeq	r3, r1, r0, ror #31
   13d70:	andeq	r3, r1, r0, ror #31
   13d74:	ldrdeq	r3, [r1], -r0
   13d78:	ldrdeq	r3, [r1], -r0
   13d7c:	ldrdeq	r3, [r1], -r0
   13d80:	ldrdeq	r3, [r1], -r0
   13d84:	ldrdeq	r3, [r1], -r0
   13d88:	ldrdeq	r3, [r1], -r0
   13d8c:	ldrdeq	r3, [r1], -r0
   13d90:	ldrdeq	r3, [r1], -r0
   13d94:	ldrdeq	r3, [r1], -r0
   13d98:	ldrdeq	r3, [r1], -r0
   13d9c:	ldrdeq	r3, [r1], -r0
   13da0:	ldrdeq	r3, [r1], -r0
   13da4:	ldrdeq	r3, [r1], -r0
   13da8:	ldrdeq	r3, [r1], -r0
   13dac:	ldrdeq	r3, [r1], -r0
   13db0:	ldrdeq	r3, [r1], -r0
   13db4:	andeq	r3, r1, r0, ror #31
   13db8:	andeq	r3, r1, r0, ror #31
   13dbc:	andeq	r3, r1, r0, ror #31
   13dc0:	andeq	r3, r1, r0, ror #31
   13dc4:	andeq	r3, r1, r8, lsl pc
   13dc8:	andeq	r4, r1, r0, rrx
   13dcc:	ldrdeq	r3, [r1], -r0
   13dd0:	ldrdeq	r3, [r1], -r0
   13dd4:	ldrdeq	r3, [r1], -r0
   13dd8:	ldrdeq	r3, [r1], -r0
   13ddc:	ldrdeq	r3, [r1], -r0
   13de0:	ldrdeq	r3, [r1], -r0
   13de4:	ldrdeq	r3, [r1], -r0
   13de8:	ldrdeq	r3, [r1], -r0
   13dec:	ldrdeq	r3, [r1], -r0
   13df0:	ldrdeq	r3, [r1], -r0
   13df4:	ldrdeq	r3, [r1], -r0
   13df8:	ldrdeq	r3, [r1], -r0
   13dfc:	ldrdeq	r3, [r1], -r0
   13e00:	ldrdeq	r3, [r1], -r0
   13e04:	ldrdeq	r3, [r1], -r0
   13e08:	ldrdeq	r3, [r1], -r0
   13e0c:	ldrdeq	r3, [r1], -r0
   13e10:	ldrdeq	r3, [r1], -r0
   13e14:	ldrdeq	r3, [r1], -r0
   13e18:	ldrdeq	r3, [r1], -r0
   13e1c:	ldrdeq	r3, [r1], -r0
   13e20:	ldrdeq	r3, [r1], -r0
   13e24:	ldrdeq	r3, [r1], -r0
   13e28:	ldrdeq	r3, [r1], -r0
   13e2c:	ldrdeq	r3, [r1], -r0
   13e30:	ldrdeq	r3, [r1], -r0
   13e34:	andeq	r3, r1, r0, ror #31
   13e38:	andeq	r3, r1, r8, ror #29
   13e3c:	ldrdeq	r3, [r1], -r0
   13e40:	andeq	r3, r1, r0, ror #31
   13e44:	ldrdeq	r3, [r1], -r0
   13e48:	andeq	r3, r1, r0, ror #31
   13e4c:	ldrdeq	r3, [r1], -r0
   13e50:	ldrdeq	r3, [r1], -r0
   13e54:	ldrdeq	r3, [r1], -r0
   13e58:	ldrdeq	r3, [r1], -r0
   13e5c:	ldrdeq	r3, [r1], -r0
   13e60:	ldrdeq	r3, [r1], -r0
   13e64:	ldrdeq	r3, [r1], -r0
   13e68:	ldrdeq	r3, [r1], -r0
   13e6c:	ldrdeq	r3, [r1], -r0
   13e70:	ldrdeq	r3, [r1], -r0
   13e74:	ldrdeq	r3, [r1], -r0
   13e78:	ldrdeq	r3, [r1], -r0
   13e7c:	ldrdeq	r3, [r1], -r0
   13e80:	ldrdeq	r3, [r1], -r0
   13e84:	ldrdeq	r3, [r1], -r0
   13e88:	ldrdeq	r3, [r1], -r0
   13e8c:	ldrdeq	r3, [r1], -r0
   13e90:	ldrdeq	r3, [r1], -r0
   13e94:	ldrdeq	r3, [r1], -r0
   13e98:	ldrdeq	r3, [r1], -r0
   13e9c:	ldrdeq	r3, [r1], -r0
   13ea0:	ldrdeq	r3, [r1], -r0
   13ea4:	ldrdeq	r3, [r1], -r0
   13ea8:	ldrdeq	r3, [r1], -r0
   13eac:	ldrdeq	r3, [r1], -r0
   13eb0:	ldrdeq	r3, [r1], -r0
   13eb4:	andeq	r3, r1, r4, asr #29
   13eb8:	andeq	r3, r1, r0, ror #31
   13ebc:	andeq	r3, r1, r4, asr #29
   13ec0:	ldrdeq	r3, [r1], -r8
   13ec4:	ldr	r3, [sp, #24]
   13ec8:	mov	r6, #0
   13ecc:	cmn	r3, #1
   13ed0:	bne	1387c <__assert_fail@plt+0x2848>
   13ed4:	ldr	r3, [sp, #44]	; 0x2c
   13ed8:	ldrb	r3, [r3, #1]
   13edc:	adds	r3, r3, #0
   13ee0:	movne	r3, #1
   13ee4:	b	13884 <__assert_fail@plt+0x2850>
   13ee8:	ldr	r3, [sp, #176]	; 0xb0
   13eec:	mov	r6, #0
   13ef0:	cmp	r3, #2
   13ef4:	bne	139c4 <__assert_fail@plt+0x2990>
   13ef8:	ldr	r3, [sp, #64]	; 0x40
   13efc:	cmp	r3, #0
   13f00:	bne	14738 <__assert_fail@plt+0x3704>
   13f04:	add	sl, sl, #1
   13f08:	ldr	r6, [sp, #36]	; 0x24
   13f0c:	str	r3, [sp, #32]
   13f10:	mov	r4, #92	; 0x5c
   13f14:	b	138d0 <__assert_fail@plt+0x289c>
   13f18:	ldr	r3, [sp, #176]	; 0xb0
   13f1c:	mov	r6, #0
   13f20:	cmp	r3, #2
   13f24:	bne	139f8 <__assert_fail@plt+0x29c4>
   13f28:	ldr	r3, [sp, #40]	; 0x28
   13f2c:	cmp	r3, #0
   13f30:	bne	14214 <__assert_fail@plt+0x31e0>
   13f34:	mov	r1, r7
   13f38:	str	r3, [sp, #32]
   13f3c:	mov	r4, #63	; 0x3f
   13f40:	b	1389c <__assert_fail@plt+0x2868>
   13f44:	ldr	r3, [sp, #176]	; 0xb0
   13f48:	mov	r6, #0
   13f4c:	cmp	r3, #2
   13f50:	bne	13a48 <__assert_fail@plt+0x2a14>
   13f54:	ldr	r3, [sp, #64]	; 0x40
   13f58:	cmp	r3, #0
   13f5c:	bne	14738 <__assert_fail@plt+0x3704>
   13f60:	ldr	r2, [sp, #84]	; 0x54
   13f64:	adds	r3, fp, #0
   13f68:	movne	r3, #1
   13f6c:	cmp	r2, #0
   13f70:	movne	r3, #0
   13f74:	cmp	r3, #0
   13f78:	strne	fp, [sp, #84]	; 0x54
   13f7c:	movne	fp, #0
   13f80:	bne	13fb0 <__assert_fail@plt+0x2f7c>
   13f84:	cmp	fp, r8
   13f88:	movhi	r3, #39	; 0x27
   13f8c:	strbhi	r3, [r9, r8]
   13f90:	add	r3, r8, #1
   13f94:	cmp	fp, r3
   13f98:	movhi	r2, #92	; 0x5c
   13f9c:	strbhi	r2, [r9, r3]
   13fa0:	add	r3, r8, #2
   13fa4:	cmp	fp, r3
   13fa8:	movhi	r2, #39	; 0x27
   13fac:	strbhi	r2, [r9, r3]
   13fb0:	ldr	r3, [sp, #64]	; 0x40
   13fb4:	add	r8, r8, #3
   13fb8:	mov	r1, r7
   13fbc:	str	r7, [sp, #32]
   13fc0:	str	r7, [sp, #76]	; 0x4c
   13fc4:	str	r3, [sp, #36]	; 0x24
   13fc8:	mov	r4, #39	; 0x27
   13fcc:	b	1389c <__assert_fail@plt+0x2868>
   13fd0:	mov	r6, #0
   13fd4:	b	13a60 <__assert_fail@plt+0x2a2c>
   13fd8:	mov	r6, #0
   13fdc:	b	13c54 <__assert_fail@plt+0x2c20>
   13fe0:	mov	r6, #0
   13fe4:	b	13c74 <__assert_fail@plt+0x2c40>
   13fe8:	str	r7, [sp, #32]
   13fec:	mov	r6, #0
   13ff0:	b	13c7c <__assert_fail@plt+0x2c48>
   13ff4:	mov	r6, #0
   13ff8:	b	13ca4 <__assert_fail@plt+0x2c70>
   13ffc:	mov	r6, #0
   14000:	b	13a70 <__assert_fail@plt+0x2a3c>
   14004:	mov	r6, #0
   14008:	b	13b38 <__assert_fail@plt+0x2b04>
   1400c:	mov	r6, #0
   14010:	b	13b08 <__assert_fail@plt+0x2ad4>
   14014:	mov	r6, #0
   14018:	mov	r3, #116	; 0x74
   1401c:	b	13b10 <__assert_fail@plt+0x2adc>
   14020:	mov	r6, #0
   14024:	b	13b4c <__assert_fail@plt+0x2b18>
   14028:	mov	r6, #0
   1402c:	b	13b60 <__assert_fail@plt+0x2b2c>
   14030:	ldr	r3, [sp, #56]	; 0x38
   14034:	mov	r6, #0
   14038:	cmp	r3, #0
   1403c:	bne	13b80 <__assert_fail@plt+0x2b4c>
   14040:	ldr	r3, [sp, #96]	; 0x60
   14044:	cmp	r3, #0
   14048:	addne	sl, sl, #1
   1404c:	bne	133f4 <__assert_fail@plt+0x23c0>
   14050:	ldr	r1, [sp, #52]	; 0x34
   14054:	str	r3, [sp, #32]
   14058:	mov	r4, r3
   1405c:	b	1389c <__assert_fail@plt+0x2868>
   14060:	mov	r6, #0
   14064:	ldr	r3, [sp, #80]	; 0x50
   14068:	cmp	r3, #1
   1406c:	bne	1425c <__assert_fail@plt+0x3228>
   14070:	bl	10ef0 <__ctype_b_loc@plt>
   14074:	ldr	r2, [sp, #80]	; 0x50
   14078:	sxth	r3, r4
   1407c:	mov	r1, r2
   14080:	lsl	r3, r3, #1
   14084:	ldr	r2, [r0]
   14088:	ldrh	r3, [r2, r3]
   1408c:	and	r3, r3, #16384	; 0x4000
   14090:	cmp	r3, #0
   14094:	movne	r3, #1
   14098:	moveq	r3, #0
   1409c:	str	r3, [sp, #32]
   140a0:	moveq	r3, #1
   140a4:	movne	r3, #0
   140a8:	ldr	r2, [sp, #56]	; 0x38
   140ac:	and	r3, r3, r2
   140b0:	ands	r3, r3, #255	; 0xff
   140b4:	beq	13c88 <__assert_fail@plt+0x2c54>
   140b8:	add	r1, sl, r1
   140bc:	mov	r0, #0
   140c0:	ldr	r7, [sp, #40]	; 0x28
   140c4:	ldr	r2, [sp, #36]	; 0x24
   140c8:	ldr	lr, [sp, #52]	; 0x34
   140cc:	b	1417c <__assert_fail@plt+0x3148>
   140d0:	cmp	r7, #0
   140d4:	bne	144d0 <__assert_fail@plt+0x349c>
   140d8:	eor	r0, r2, #1
   140dc:	ands	r0, lr, r0
   140e0:	beq	14118 <__assert_fail@plt+0x30e4>
   140e4:	cmp	fp, r8
   140e8:	movhi	r2, #39	; 0x27
   140ec:	strbhi	r2, [r9, r8]
   140f0:	add	r2, r8, #1
   140f4:	cmp	fp, r2
   140f8:	movhi	ip, #36	; 0x24
   140fc:	strbhi	ip, [r9, r2]
   14100:	add	r2, r8, #2
   14104:	cmp	fp, r2
   14108:	movhi	ip, #39	; 0x27
   1410c:	strbhi	ip, [r9, r2]
   14110:	add	r8, r8, #3
   14114:	mov	r2, r0
   14118:	cmp	fp, r8
   1411c:	movhi	r0, #92	; 0x5c
   14120:	strbhi	r0, [r9, r8]
   14124:	add	r0, r8, #1
   14128:	cmp	fp, r0
   1412c:	lsrhi	ip, r4, #6
   14130:	addhi	ip, ip, #48	; 0x30
   14134:	strbhi	ip, [r9, r0]
   14138:	add	ip, r8, #2
   1413c:	cmp	fp, ip
   14140:	lsrhi	r0, r4, #3
   14144:	andhi	r0, r0, #7
   14148:	addhi	r0, r0, #48	; 0x30
   1414c:	add	sl, sl, #1
   14150:	strbhi	r0, [r9, ip]
   14154:	and	r4, r4, #7
   14158:	cmp	sl, r1
   1415c:	add	r4, r4, #48	; 0x30
   14160:	add	r8, r8, #3
   14164:	bcs	144e8 <__assert_fail@plt+0x34b4>
   14168:	mov	r0, r3
   1416c:	cmp	fp, r8
   14170:	strbhi	r4, [r9, r8]
   14174:	ldrb	r4, [r5, #1]!
   14178:	add	r8, r8, #1
   1417c:	cmp	r3, #0
   14180:	bne	140d0 <__assert_fail@plt+0x309c>
   14184:	cmp	r6, #0
   14188:	bne	1422c <__assert_fail@plt+0x31f8>
   1418c:	eor	r6, r0, #1
   14190:	and	r6, r6, r2
   14194:	add	sl, sl, #1
   14198:	cmp	r1, sl
   1419c:	uxtb	r6, r6
   141a0:	bls	14254 <__assert_fail@plt+0x3220>
   141a4:	cmp	r6, #0
   141a8:	beq	1416c <__assert_fail@plt+0x3138>
   141ac:	cmp	fp, r8
   141b0:	movhi	r2, #39	; 0x27
   141b4:	strbhi	r2, [r9, r8]
   141b8:	add	r2, r8, #1
   141bc:	cmp	fp, r2
   141c0:	movhi	ip, #39	; 0x27
   141c4:	strbhi	ip, [r9, r2]
   141c8:	add	r8, r8, #2
   141cc:	mov	r6, r3
   141d0:	mov	r2, r3
   141d4:	b	1416c <__assert_fail@plt+0x3138>
   141d8:	ldr	r3, [sp, #184]	; 0xb8
   141dc:	cmp	r3, #0
   141e0:	beq	138b8 <__assert_fail@plt+0x2884>
   141e4:	lsr	r2, r4, #5
   141e8:	mov	r0, r3
   141ec:	uxtb	r2, r2
   141f0:	and	r3, r4, #31
   141f4:	ldr	r2, [r0, r2, lsl #2]
   141f8:	lsr	r3, r2, r3
   141fc:	tst	r3, #1
   14200:	beq	138b8 <__assert_fail@plt+0x2884>
   14204:	ldr	r3, [sp, #40]	; 0x28
   14208:	cmp	r3, #0
   1420c:	beq	13aa4 <__assert_fail@plt+0x2a70>
   14210:	mov	r3, r1
   14214:	str	r3, [sp, #64]	; 0x40
   14218:	mov	sl, r9
   1421c:	ldr	r3, [sp, #56]	; 0x38
   14220:	mov	r9, fp
   14224:	ldr	r2, [sp, #64]	; 0x40
   14228:	b	14418 <__assert_fail@plt+0x33e4>
   1422c:	cmp	fp, r8
   14230:	eor	r6, r0, #1
   14234:	movhi	ip, #92	; 0x5c
   14238:	and	r6, r6, r2
   1423c:	add	sl, sl, #1
   14240:	strbhi	ip, [r9, r8]
   14244:	cmp	r1, sl
   14248:	add	r8, r8, #1
   1424c:	uxtb	r6, r6
   14250:	bhi	141a4 <__assert_fail@plt+0x3170>
   14254:	str	r2, [sp, #36]	; 0x24
   14258:	b	138d0 <__assert_fail@plt+0x289c>
   1425c:	ldr	r3, [sp, #24]
   14260:	cmn	r3, #1
   14264:	mov	r3, #0
   14268:	str	r3, [sp, #128]	; 0x80
   1426c:	str	r3, [sp, #132]	; 0x84
   14270:	beq	14564 <__assert_fail@plt+0x3530>
   14274:	mov	r2, r7
   14278:	mov	r3, #0
   1427c:	str	r7, [sp, #104]	; 0x68
   14280:	str	r5, [sp, #116]	; 0x74
   14284:	mov	r7, r3
   14288:	mov	r5, r2
   1428c:	str	r4, [sp, #32]
   14290:	str	r6, [sp, #108]	; 0x6c
   14294:	str	r8, [sp, #112]	; 0x70
   14298:	ldr	r3, [sp, #44]	; 0x2c
   1429c:	add	r6, sl, r7
   142a0:	add	r4, r3, r6
   142a4:	ldr	r3, [sp, #24]
   142a8:	mov	r1, r4
   142ac:	sub	r2, r3, r6
   142b0:	add	r0, sp, #124	; 0x7c
   142b4:	add	r3, sp, #128	; 0x80
   142b8:	bl	18510 <__assert_fail@plt+0x74dc>
   142bc:	subs	r8, r0, #0
   142c0:	beq	14648 <__assert_fail@plt+0x3614>
   142c4:	cmn	r8, #1
   142c8:	beq	14620 <__assert_fail@plt+0x35ec>
   142cc:	cmn	r8, #2
   142d0:	beq	145b8 <__assert_fail@plt+0x3584>
   142d4:	ldr	r3, [sp, #64]	; 0x40
   142d8:	cmp	r3, #0
   142dc:	beq	1439c <__assert_fail@plt+0x3368>
   142e0:	cmp	r8, #1
   142e4:	beq	1439c <__assert_fail@plt+0x3368>
   142e8:	sub	r3, r8, #1
   142ec:	add	r6, r3, r6
   142f0:	ldr	r3, [sp, #44]	; 0x2c
   142f4:	add	r6, r3, r6
   142f8:	ldrb	r3, [r4, #1]!
   142fc:	sub	r3, r3, #91	; 0x5b
   14300:	cmp	r3, #33	; 0x21
   14304:	ldrls	pc, [pc, r3, lsl #2]
   14308:	b	14394 <__assert_fail@plt+0x3360>
   1430c:	andeq	r4, r1, r0, lsl #8
   14310:	andeq	r4, r1, r0, lsl #8
   14314:	muleq	r1, r4, r3
   14318:	andeq	r4, r1, r0, lsl #8
   1431c:	muleq	r1, r4, r3
   14320:	andeq	r4, r1, r0, lsl #8
   14324:	muleq	r1, r4, r3
   14328:	muleq	r1, r4, r3
   1432c:	muleq	r1, r4, r3
   14330:	muleq	r1, r4, r3
   14334:	muleq	r1, r4, r3
   14338:	muleq	r1, r4, r3
   1433c:	muleq	r1, r4, r3
   14340:	muleq	r1, r4, r3
   14344:	muleq	r1, r4, r3
   14348:	muleq	r1, r4, r3
   1434c:	muleq	r1, r4, r3
   14350:	muleq	r1, r4, r3
   14354:	muleq	r1, r4, r3
   14358:	muleq	r1, r4, r3
   1435c:	muleq	r1, r4, r3
   14360:	muleq	r1, r4, r3
   14364:	muleq	r1, r4, r3
   14368:	muleq	r1, r4, r3
   1436c:	muleq	r1, r4, r3
   14370:	muleq	r1, r4, r3
   14374:	muleq	r1, r4, r3
   14378:	muleq	r1, r4, r3
   1437c:	muleq	r1, r4, r3
   14380:	muleq	r1, r4, r3
   14384:	muleq	r1, r4, r3
   14388:	muleq	r1, r4, r3
   1438c:	muleq	r1, r4, r3
   14390:	andeq	r4, r1, r0, lsl #8
   14394:	cmp	r6, r4
   14398:	bne	142f8 <__assert_fail@plt+0x32c4>
   1439c:	ldr	r0, [sp, #124]	; 0x7c
   143a0:	bl	10e60 <iswprint@plt>
   143a4:	add	r7, r7, r8
   143a8:	cmp	r0, #0
   143ac:	add	r0, sp, #128	; 0x80
   143b0:	moveq	r5, #0
   143b4:	bl	10e0c <mbsinit@plt>
   143b8:	cmp	r0, #0
   143bc:	beq	14298 <__assert_fail@plt+0x3264>
   143c0:	ldr	r4, [sp, #32]
   143c4:	str	r5, [sp, #32]
   143c8:	ldr	r3, [sp, #32]
   143cc:	mov	r1, r7
   143d0:	eor	r3, r3, #1
   143d4:	ldr	r7, [sp, #104]	; 0x68
   143d8:	ldr	r6, [sp, #108]	; 0x6c
   143dc:	ldr	r8, [sp, #112]	; 0x70
   143e0:	ldr	r5, [sp, #116]	; 0x74
   143e4:	uxtb	r3, r3
   143e8:	cmp	r1, #1
   143ec:	bls	140a8 <__assert_fail@plt+0x3074>
   143f0:	ldr	r2, [sp, #56]	; 0x38
   143f4:	and	r3, r3, r2
   143f8:	uxtb	r3, r3
   143fc:	b	140b8 <__assert_fail@plt+0x3084>
   14400:	mov	r3, #2
   14404:	str	r3, [sp, #176]	; 0xb0
   14408:	ldr	r2, [sp, #64]	; 0x40
   1440c:	ldr	r3, [sp, #56]	; 0x38
   14410:	mov	sl, r9
   14414:	mov	r9, fp
   14418:	and	r3, r3, r2
   1441c:	tst	r3, #255	; 0xff
   14420:	ldr	r3, [sp, #176]	; 0xb0
   14424:	movne	r3, #4
   14428:	str	r3, [sp, #176]	; 0xb0
   1442c:	ldr	r3, [sp, #180]	; 0xb4
   14430:	mov	ip, #0
   14434:	bic	r3, r3, #2
   14438:	str	r3, [sp, #4]
   1443c:	ldr	r3, [sp, #192]	; 0xc0
   14440:	ldr	r2, [sp, #44]	; 0x2c
   14444:	str	r3, [sp, #16]
   14448:	ldr	r3, [sp, #188]	; 0xbc
   1444c:	mov	r1, r9
   14450:	str	r3, [sp, #12]
   14454:	ldr	r3, [sp, #176]	; 0xb0
   14458:	mov	r0, sl
   1445c:	str	r3, [sp]
   14460:	str	ip, [sp, #8]
   14464:	ldr	r3, [sp, #24]
   14468:	bl	132c8 <__assert_fail@plt+0x2294>
   1446c:	mov	fp, r0
   14470:	mov	r0, fp
   14474:	add	sp, sp, #140	; 0x8c
   14478:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1447c:	mov	r4, #92	; 0x5c
   14480:	mov	r1, #0
   14484:	mov	r3, r4
   14488:	b	13a7c <__assert_fail@plt+0x2a48>
   1448c:	mov	r3, #0
   14490:	ldr	r1, [sp, #52]	; 0x34
   14494:	str	r3, [sp, #32]
   14498:	mov	r4, #63	; 0x3f
   1449c:	b	1389c <__assert_fail@plt+0x2868>
   144a0:	cmp	fp, #0
   144a4:	beq	14500 <__assert_fail@plt+0x34cc>
   144a8:	mov	r3, #39	; 0x27
   144ac:	strb	r3, [r9]
   144b0:	mov	r3, #0
   144b4:	str	r3, [sp, #40]	; 0x28
   144b8:	mov	r3, #1
   144bc:	str	r3, [sp, #68]	; 0x44
   144c0:	ldr	r3, [pc, #448]	; 14688 <__assert_fail@plt+0x3654>
   144c4:	mov	r8, #1
   144c8:	str	r3, [sp, #72]	; 0x48
   144cc:	b	136b0 <__assert_fail@plt+0x267c>
   144d0:	ldr	r3, [sp, #40]	; 0x28
   144d4:	mov	sl, r9
   144d8:	str	r3, [sp, #56]	; 0x38
   144dc:	mov	r9, fp
   144e0:	ldr	r2, [sp, #64]	; 0x40
   144e4:	b	14418 <__assert_fail@plt+0x33e4>
   144e8:	str	r2, [sp, #36]	; 0x24
   144ec:	b	13900 <__assert_fail@plt+0x28cc>
   144f0:	mov	r1, #0
   144f4:	str	r3, [sp, #32]
   144f8:	mov	r4, #63	; 0x3f
   144fc:	b	1389c <__assert_fail@plt+0x2868>
   14500:	ldr	r3, [pc, #384]	; 14688 <__assert_fail@plt+0x3654>
   14504:	str	r3, [sp, #72]	; 0x48
   14508:	mov	r3, #0
   1450c:	str	r3, [sp, #40]	; 0x28
   14510:	mov	r3, #1
   14514:	str	r3, [sp, #68]	; 0x44
   14518:	mov	r8, r3
   1451c:	b	136b0 <__assert_fail@plt+0x267c>
   14520:	bl	1101c <abort@plt>
   14524:	cmp	fp, #0
   14528:	beq	14588 <__assert_fail@plt+0x3554>
   1452c:	mov	r2, #1
   14530:	mov	r3, #34	; 0x22
   14534:	strb	r3, [r9]
   14538:	mov	r8, r2
   1453c:	mov	r3, r2
   14540:	str	r2, [sp, #68]	; 0x44
   14544:	str	r3, [sp, #56]	; 0x38
   14548:	ldr	r3, [pc, #316]	; 1468c <__assert_fail@plt+0x3658>
   1454c:	ldr	r1, [sp, #56]	; 0x38
   14550:	str	r3, [sp, #72]	; 0x48
   14554:	ldr	r2, [sp, #176]	; 0xb0
   14558:	ldr	ip, [sp, #40]	; 0x28
   1455c:	ldr	lr, [sp, #176]	; 0xb0
   14560:	b	13394 <__assert_fail@plt+0x2360>
   14564:	ldr	r0, [sp, #44]	; 0x2c
   14568:	bl	10f08 <strlen@plt>
   1456c:	str	r0, [sp, #24]
   14570:	b	14274 <__assert_fail@plt+0x3240>
   14574:	mov	r7, #0
   14578:	ldr	r1, [sp, #52]	; 0x34
   1457c:	str	r3, [sp, #32]
   14580:	mov	r4, #48	; 0x30
   14584:	b	1389c <__assert_fail@plt+0x2868>
   14588:	mov	r3, #1
   1458c:	str	r3, [sp, #68]	; 0x44
   14590:	mov	r8, r3
   14594:	b	14544 <__assert_fail@plt+0x3510>
   14598:	mov	r3, #2
   1459c:	mov	sl, r9
   145a0:	str	r3, [sp, #176]	; 0xb0
   145a4:	mov	r9, fp
   145a8:	ldr	r3, [sp, #56]	; 0x38
   145ac:	b	14418 <__assert_fail@plt+0x33e4>
   145b0:	ldr	r6, [sp, #48]	; 0x30
   145b4:	b	14064 <__assert_fail@plt+0x3030>
   145b8:	ldr	r0, [sp, #24]
   145bc:	mov	ip, r6
   145c0:	cmp	r0, ip
   145c4:	mov	r1, r7
   145c8:	mov	r2, r4
   145cc:	ldr	r7, [sp, #104]	; 0x68
   145d0:	ldr	r4, [sp, #32]
   145d4:	ldr	r6, [sp, #108]	; 0x6c
   145d8:	ldr	r8, [sp, #112]	; 0x70
   145dc:	ldr	r5, [sp, #116]	; 0x74
   145e0:	bls	14610 <__assert_fail@plt+0x35dc>
   145e4:	ldrb	r3, [r2]
   145e8:	cmp	r3, #0
   145ec:	bne	14600 <__assert_fail@plt+0x35cc>
   145f0:	b	14720 <__assert_fail@plt+0x36ec>
   145f4:	ldrb	r3, [r2, #1]!
   145f8:	cmp	r3, #0
   145fc:	beq	14720 <__assert_fail@plt+0x36ec>
   14600:	add	r1, r1, #1
   14604:	add	r3, sl, r1
   14608:	cmp	r0, r3
   1460c:	bhi	145f4 <__assert_fail@plt+0x35c0>
   14610:	mov	r2, #0
   14614:	mov	r3, r7
   14618:	str	r2, [sp, #32]
   1461c:	b	143e8 <__assert_fail@plt+0x33b4>
   14620:	mov	r1, r7
   14624:	ldr	r7, [sp, #104]	; 0x68
   14628:	mov	r2, #0
   1462c:	ldr	r4, [sp, #32]
   14630:	ldr	r6, [sp, #108]	; 0x6c
   14634:	ldr	r8, [sp, #112]	; 0x70
   14638:	ldr	r5, [sp, #116]	; 0x74
   1463c:	mov	r3, r7
   14640:	str	r2, [sp, #32]
   14644:	b	143e8 <__assert_fail@plt+0x33b4>
   14648:	mov	r3, r5
   1464c:	eor	r3, r3, #1
   14650:	ldr	r4, [sp, #32]
   14654:	mov	r1, r7
   14658:	str	r5, [sp, #32]
   1465c:	ldr	r7, [sp, #104]	; 0x68
   14660:	ldr	r6, [sp, #108]	; 0x6c
   14664:	ldr	r8, [sp, #112]	; 0x70
   14668:	ldr	r5, [sp, #116]	; 0x74
   1466c:	uxtb	r3, r3
   14670:	b	143e8 <__assert_fail@plt+0x33b4>
   14674:	mov	sl, r9
   14678:	str	r3, [sp, #56]	; 0x38
   1467c:	mov	r9, fp
   14680:	ldr	r2, [sp, #64]	; 0x40
   14684:	b	14418 <__assert_fail@plt+0x33e4>
   14688:	andeq	r9, r1, r4, ror #17
   1468c:	andeq	r9, r1, r0, ror #17
   14690:	andeq	r9, r1, r8, ror #17
   14694:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   14698:	ldr	r2, [sp, #44]	; 0x2c
   1469c:	ldrb	r1, [r2, r3]
   146a0:	sub	r2, r1, #33	; 0x21
   146a4:	uxtb	r2, r2
   146a8:	cmp	r2, #29
   146ac:	bhi	1472c <__assert_fail@plt+0x36f8>
   146b0:	ldr	r0, [pc, #-36]	; 14694 <__assert_fail@plt+0x3660>
   146b4:	mov	ip, #1
   146b8:	ands	r2, r0, ip, lsl r2
   146bc:	beq	1474c <__assert_fail@plt+0x3718>
   146c0:	ldr	r2, [sp, #40]	; 0x28
   146c4:	cmp	r2, #0
   146c8:	bne	14840 <__assert_fail@plt+0x380c>
   146cc:	add	r2, r8, #1
   146d0:	cmp	fp, r8
   146d4:	strbhi	r4, [r9, r8]
   146d8:	cmp	fp, r2
   146dc:	movhi	r0, #34	; 0x22
   146e0:	strbhi	r0, [r9, r2]
   146e4:	add	r2, r8, #2
   146e8:	cmp	fp, r2
   146ec:	movhi	r0, #34	; 0x22
   146f0:	strbhi	r0, [r9, r2]
   146f4:	add	r2, r8, #3
   146f8:	cmp	fp, r2
   146fc:	mov	sl, r3
   14700:	ldr	r3, [sp, #40]	; 0x28
   14704:	movhi	r0, #63	; 0x3f
   14708:	mov	r4, r1
   1470c:	strbhi	r0, [r9, r2]
   14710:	add	r8, r8, #4
   14714:	mov	r1, r3
   14718:	str	r3, [sp, #32]
   1471c:	b	1389c <__assert_fail@plt+0x2868>
   14720:	str	r3, [sp, #32]
   14724:	mov	r3, r7
   14728:	b	143e8 <__assert_fail@plt+0x33b4>
   1472c:	mov	r1, #0
   14730:	str	r1, [sp, #32]
   14734:	b	1389c <__assert_fail@plt+0x2868>
   14738:	mov	sl, r9
   1473c:	ldr	r3, [sp, #56]	; 0x38
   14740:	mov	r9, fp
   14744:	ldr	r2, [sp, #64]	; 0x40
   14748:	b	14418 <__assert_fail@plt+0x33e4>
   1474c:	str	r2, [sp, #32]
   14750:	mov	r1, #0
   14754:	b	1389c <__assert_fail@plt+0x2868>
   14758:	ldr	r2, [sp, #76]	; 0x4c
   1475c:	mov	sl, r9
   14760:	mov	r9, fp
   14764:	mov	fp, r8
   14768:	ldr	r1, [sp, #72]	; 0x48
   1476c:	cmp	r1, #0
   14770:	moveq	r3, #0
   14774:	andne	r3, r2, #1
   14778:	cmp	r3, #0
   1477c:	beq	147a8 <__assert_fail@plt+0x3774>
   14780:	ldrb	r3, [r1]
   14784:	cmp	r3, #0
   14788:	beq	147a8 <__assert_fail@plt+0x3774>
   1478c:	mov	r2, r1
   14790:	cmp	r9, fp
   14794:	strbhi	r3, [sl, fp]
   14798:	ldrb	r3, [r2, #1]!
   1479c:	add	fp, fp, #1
   147a0:	cmp	r3, #0
   147a4:	bne	14790 <__assert_fail@plt+0x375c>
   147a8:	cmp	r9, fp
   147ac:	movhi	r3, #0
   147b0:	strbhi	r3, [sl, fp]
   147b4:	b	14470 <__assert_fail@plt+0x343c>
   147b8:	ldr	r3, [sp, #192]	; 0xc0
   147bc:	mov	ip, #5
   147c0:	str	r3, [sp, #16]
   147c4:	ldr	r3, [sp, #188]	; 0xbc
   147c8:	ldr	r2, [sp, #44]	; 0x2c
   147cc:	str	r3, [sp, #12]
   147d0:	ldr	r3, [sp, #184]	; 0xb8
   147d4:	ldr	r1, [sp, #84]	; 0x54
   147d8:	str	r3, [sp, #8]
   147dc:	ldr	r3, [sp, #180]	; 0xb4
   147e0:	mov	r0, r9
   147e4:	str	r3, [sp, #4]
   147e8:	str	ip, [sp]
   147ec:	ldr	r3, [sp, #24]
   147f0:	bl	132c8 <__assert_fail@plt+0x2294>
   147f4:	mov	fp, r0
   147f8:	b	14470 <__assert_fail@plt+0x343c>
   147fc:	mov	sl, r9
   14800:	mov	r9, fp
   14804:	mov	fp, r8
   14808:	b	14768 <__assert_fail@plt+0x3734>
   1480c:	ldr	r1, [sp, #176]	; 0xb0
   14810:	bl	131a8 <__assert_fail@plt+0x2174>
   14814:	str	r0, [sp, #192]	; 0xc0
   14818:	b	13784 <__assert_fail@plt+0x2750>
   1481c:	ldr	r1, [sp, #176]	; 0xb0
   14820:	bl	131a8 <__assert_fail@plt+0x2174>
   14824:	str	r0, [sp, #188]	; 0xbc
   14828:	b	13764 <__assert_fail@plt+0x2730>
   1482c:	mov	sl, r9
   14830:	mov	r2, r3
   14834:	mov	r9, fp
   14838:	mov	fp, r8
   1483c:	b	14768 <__assert_fail@plt+0x3734>
   14840:	mov	sl, r9
   14844:	mov	r9, fp
   14848:	b	1442c <__assert_fail@plt+0x33f8>
   1484c:	push	{r4, r5, r6, lr}
   14850:	mov	r5, r0
   14854:	bl	10f20 <__errno_location@plt>
   14858:	cmp	r5, #0
   1485c:	mov	r1, #48	; 0x30
   14860:	mov	r4, r0
   14864:	ldr	r0, [pc, #16]	; 1487c <__assert_fail@plt+0x3848>
   14868:	ldr	r6, [r4]
   1486c:	movne	r0, r5
   14870:	bl	180e8 <__assert_fail@plt+0x70b4>
   14874:	str	r6, [r4]
   14878:	pop	{r4, r5, r6, pc}
   1487c:			; <UNDEFINED> instruction: 0x0002a1b4
   14880:	ldr	r3, [pc, #12]	; 14894 <__assert_fail@plt+0x3860>
   14884:	cmp	r0, #0
   14888:	moveq	r0, r3
   1488c:	ldr	r0, [r0]
   14890:	bx	lr
   14894:			; <UNDEFINED> instruction: 0x0002a1b4
   14898:	ldr	r3, [pc, #12]	; 148ac <__assert_fail@plt+0x3878>
   1489c:	cmp	r0, #0
   148a0:	moveq	r0, r3
   148a4:	str	r1, [r0]
   148a8:	bx	lr
   148ac:			; <UNDEFINED> instruction: 0x0002a1b4
   148b0:	ldr	r3, [pc, #52]	; 148ec <__assert_fail@plt+0x38b8>
   148b4:	cmp	r0, #0
   148b8:	moveq	r0, r3
   148bc:	add	r3, r0, #8
   148c0:	push	{lr}		; (str lr, [sp, #-4]!)
   148c4:	lsr	lr, r1, #5
   148c8:	and	r1, r1, #31
   148cc:	ldr	ip, [r3, lr, lsl #2]
   148d0:	lsr	r0, ip, r1
   148d4:	eor	r2, r2, r0
   148d8:	and	r2, r2, #1
   148dc:	and	r0, r0, #1
   148e0:	eor	r1, ip, r2, lsl r1
   148e4:	str	r1, [r3, lr, lsl #2]
   148e8:	pop	{pc}		; (ldr pc, [sp], #4)
   148ec:			; <UNDEFINED> instruction: 0x0002a1b4
   148f0:	ldr	r3, [pc, #16]	; 14908 <__assert_fail@plt+0x38d4>
   148f4:	cmp	r0, #0
   148f8:	movne	r3, r0
   148fc:	ldr	r0, [r3, #4]
   14900:	str	r1, [r3, #4]
   14904:	bx	lr
   14908:			; <UNDEFINED> instruction: 0x0002a1b4
   1490c:	ldr	r3, [pc, #44]	; 14940 <__assert_fail@plt+0x390c>
   14910:	cmp	r0, #0
   14914:	moveq	r0, r3
   14918:	mov	ip, #10
   1491c:	cmp	r2, #0
   14920:	cmpne	r1, #0
   14924:	str	ip, [r0]
   14928:	beq	14938 <__assert_fail@plt+0x3904>
   1492c:	str	r1, [r0, #40]	; 0x28
   14930:	str	r2, [r0, #44]	; 0x2c
   14934:	bx	lr
   14938:	push	{r4, lr}
   1493c:	bl	1101c <abort@plt>
   14940:			; <UNDEFINED> instruction: 0x0002a1b4
   14944:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14948:	sub	sp, sp, #24
   1494c:	ldr	ip, [pc, #108]	; 149c0 <__assert_fail@plt+0x398c>
   14950:	ldr	r4, [sp, #56]	; 0x38
   14954:	mov	r9, r2
   14958:	cmp	r4, #0
   1495c:	moveq	r4, ip
   14960:	mov	sl, r3
   14964:	mov	r7, r0
   14968:	mov	r8, r1
   1496c:	bl	10f20 <__errno_location@plt>
   14970:	ldr	r3, [r4, #44]	; 0x2c
   14974:	mov	r1, r8
   14978:	ldr	r6, [r0]
   1497c:	str	r3, [sp, #16]
   14980:	ldr	r2, [r4, #40]	; 0x28
   14984:	add	r3, r4, #8
   14988:	str	r3, [sp, #8]
   1498c:	str	r2, [sp, #12]
   14990:	ldr	r2, [r4, #4]
   14994:	mov	r5, r0
   14998:	str	r2, [sp, #4]
   1499c:	ldr	ip, [r4]
   149a0:	mov	r3, sl
   149a4:	mov	r2, r9
   149a8:	mov	r0, r7
   149ac:	str	ip, [sp]
   149b0:	bl	132c8 <__assert_fail@plt+0x2294>
   149b4:	str	r6, [r5]
   149b8:	add	sp, sp, #24
   149bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   149c0:			; <UNDEFINED> instruction: 0x0002a1b4
   149c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149c8:	cmp	r2, #0
   149cc:	sub	sp, sp, #36	; 0x24
   149d0:	ldr	r4, [pc, #164]	; 14a7c <__assert_fail@plt+0x3a48>
   149d4:	mov	r8, r1
   149d8:	movne	r4, r2
   149dc:	mov	r7, r0
   149e0:	bl	10f20 <__errno_location@plt>
   149e4:	ldr	r3, [r4, #44]	; 0x2c
   149e8:	ldr	r5, [r4, #4]
   149ec:	add	r9, r4, #8
   149f0:	orr	r5, r5, #1
   149f4:	mov	r1, #0
   149f8:	mov	r2, r7
   149fc:	ldr	fp, [r0]
   14a00:	str	r3, [sp, #16]
   14a04:	ldr	r3, [r4, #40]	; 0x28
   14a08:	stmib	sp, {r5, r9}
   14a0c:	str	r3, [sp, #12]
   14a10:	ldr	r3, [r4]
   14a14:	mov	r6, r0
   14a18:	str	r3, [sp]
   14a1c:	mov	r0, r1
   14a20:	mov	r3, r8
   14a24:	bl	132c8 <__assert_fail@plt+0x2294>
   14a28:	add	r1, r0, #1
   14a2c:	mov	r0, r1
   14a30:	str	r1, [sp, #28]
   14a34:	bl	17ba4 <__assert_fail@plt+0x6b70>
   14a38:	ldr	r3, [r4, #44]	; 0x2c
   14a3c:	ldr	r1, [sp, #28]
   14a40:	str	r3, [sp, #16]
   14a44:	ldr	r3, [r4, #40]	; 0x28
   14a48:	str	r5, [sp, #4]
   14a4c:	str	r3, [sp, #12]
   14a50:	str	r9, [sp, #8]
   14a54:	ldr	ip, [r4]
   14a58:	mov	r3, r8
   14a5c:	mov	r2, r7
   14a60:	str	ip, [sp]
   14a64:	mov	sl, r0
   14a68:	bl	132c8 <__assert_fail@plt+0x2294>
   14a6c:	mov	r0, sl
   14a70:	str	fp, [r6]
   14a74:	add	sp, sp, #36	; 0x24
   14a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a7c:			; <UNDEFINED> instruction: 0x0002a1b4
   14a80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a84:	cmp	r3, #0
   14a88:	sub	sp, sp, #44	; 0x2c
   14a8c:	ldr	r4, [pc, #192]	; 14b54 <__assert_fail@plt+0x3b20>
   14a90:	mov	r6, r2
   14a94:	movne	r4, r3
   14a98:	mov	r9, r1
   14a9c:	mov	r8, r0
   14aa0:	bl	10f20 <__errno_location@plt>
   14aa4:	ldr	r3, [r4, #44]	; 0x2c
   14aa8:	ldr	r5, [r4, #4]
   14aac:	add	sl, r4, #8
   14ab0:	cmp	r6, #0
   14ab4:	orreq	r5, r5, #1
   14ab8:	mov	r1, #0
   14abc:	ldr	r2, [r0]
   14ac0:	str	r3, [sp, #16]
   14ac4:	ldr	r3, [r4, #40]	; 0x28
   14ac8:	stmib	sp, {r5, sl}
   14acc:	str	r3, [sp, #12]
   14ad0:	ldr	r3, [r4]
   14ad4:	mov	r7, r0
   14ad8:	str	r2, [sp, #28]
   14adc:	str	r3, [sp]
   14ae0:	mov	r2, r8
   14ae4:	mov	r3, r9
   14ae8:	mov	r0, r1
   14aec:	bl	132c8 <__assert_fail@plt+0x2294>
   14af0:	add	r1, r0, #1
   14af4:	mov	fp, r0
   14af8:	mov	r0, r1
   14afc:	str	r1, [sp, #36]	; 0x24
   14b00:	bl	17ba4 <__assert_fail@plt+0x6b70>
   14b04:	ldr	r3, [r4, #44]	; 0x2c
   14b08:	mov	r2, r8
   14b0c:	str	r3, [sp, #16]
   14b10:	ldr	r3, [r4, #40]	; 0x28
   14b14:	str	r5, [sp, #4]
   14b18:	str	r3, [sp, #12]
   14b1c:	str	sl, [sp, #8]
   14b20:	ldr	ip, [r4]
   14b24:	ldr	r1, [sp, #36]	; 0x24
   14b28:	mov	r3, r9
   14b2c:	str	ip, [sp]
   14b30:	str	r0, [sp, #32]
   14b34:	bl	132c8 <__assert_fail@plt+0x2294>
   14b38:	ldr	r2, [sp, #28]
   14b3c:	cmp	r6, #0
   14b40:	str	r2, [r7]
   14b44:	ldr	r0, [sp, #32]
   14b48:	strne	fp, [r6]
   14b4c:	add	sp, sp, #44	; 0x2c
   14b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b54:			; <UNDEFINED> instruction: 0x0002a1b4
   14b58:	push	{r4, r5, r6, r7, r8, lr}
   14b5c:	ldr	r6, [pc, #116]	; 14bd8 <__assert_fail@plt+0x3ba4>
   14b60:	ldr	r3, [r6, #4]
   14b64:	ldr	r7, [r6]
   14b68:	cmp	r3, #1
   14b6c:	movgt	r5, r7
   14b70:	movgt	r4, #1
   14b74:	ble	14b94 <__assert_fail@plt+0x3b60>
   14b78:	ldr	r0, [r5, #12]
   14b7c:	bl	12ba8 <__assert_fail@plt+0x1b74>
   14b80:	ldr	r3, [r6, #4]
   14b84:	add	r4, r4, #1
   14b88:	cmp	r3, r4
   14b8c:	add	r5, r5, #8
   14b90:	bgt	14b78 <__assert_fail@plt+0x3b44>
   14b94:	ldr	r0, [r7, #4]
   14b98:	ldr	r4, [pc, #60]	; 14bdc <__assert_fail@plt+0x3ba8>
   14b9c:	cmp	r0, r4
   14ba0:	beq	14bb4 <__assert_fail@plt+0x3b80>
   14ba4:	bl	12ba8 <__assert_fail@plt+0x1b74>
   14ba8:	mov	r3, #256	; 0x100
   14bac:	str	r4, [r6, #12]
   14bb0:	str	r3, [r6, #8]
   14bb4:	ldr	r4, [pc, #36]	; 14be0 <__assert_fail@plt+0x3bac>
   14bb8:	cmp	r7, r4
   14bbc:	beq	14bcc <__assert_fail@plt+0x3b98>
   14bc0:	mov	r0, r7
   14bc4:	bl	12ba8 <__assert_fail@plt+0x1b74>
   14bc8:	str	r4, [r6]
   14bcc:	mov	r3, #1
   14bd0:	str	r3, [r6, #4]
   14bd4:	pop	{r4, r5, r6, r7, r8, pc}
   14bd8:	andeq	sl, r2, ip, lsl #2
   14bdc:	andeq	sl, r2, r4, ror #3
   14be0:	andeq	sl, r2, r4, lsl r1
   14be4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14be8:	sub	sp, sp, #44	; 0x2c
   14bec:	mov	r5, r0
   14bf0:	mov	sl, r1
   14bf4:	bl	10f20 <__errno_location@plt>
   14bf8:	ldr	r4, [pc, #400]	; 14d90 <__assert_fail@plt+0x3d5c>
   14bfc:	cmn	r5, #-2147483647	; 0x80000001
   14c00:	ldr	r6, [r4]
   14c04:	mov	r8, r0
   14c08:	movne	r0, #0
   14c0c:	moveq	r0, #1
   14c10:	ldr	r3, [r8]
   14c14:	orrs	r0, r0, r5, lsr #31
   14c18:	str	r3, [sp, #24]
   14c1c:	bne	14d8c <__assert_fail@plt+0x3d58>
   14c20:	ldr	r2, [r4, #4]
   14c24:	cmp	r5, r2
   14c28:	blt	14c88 <__assert_fail@plt+0x3c54>
   14c2c:	add	r7, r4, #8
   14c30:	cmp	r6, r7
   14c34:	str	r2, [sp, #36]	; 0x24
   14c38:	beq	14d5c <__assert_fail@plt+0x3d28>
   14c3c:	mov	r3, #8
   14c40:	sub	r2, r5, r2
   14c44:	mov	r0, r6
   14c48:	str	r3, [sp]
   14c4c:	add	r2, r2, #1
   14c50:	mvn	r3, #-2147483648	; 0x80000000
   14c54:	add	r1, sp, #36	; 0x24
   14c58:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   14c5c:	mov	r6, r0
   14c60:	str	r0, [r4]
   14c64:	ldr	r0, [r4, #4]
   14c68:	ldr	r2, [sp, #36]	; 0x24
   14c6c:	mov	r1, #0
   14c70:	sub	r2, r2, r0
   14c74:	add	r0, r6, r0, lsl #3
   14c78:	lsl	r2, r2, #3
   14c7c:	bl	10f38 <memset@plt>
   14c80:	ldr	r3, [sp, #36]	; 0x24
   14c84:	str	r3, [r4, #4]
   14c88:	ldr	r4, [pc, #260]	; 14d94 <__assert_fail@plt+0x3d60>
   14c8c:	add	fp, r6, r5, lsl #3
   14c90:	ldr	r9, [r6, r5, lsl #3]
   14c94:	ldr	r0, [r4, #4]
   14c98:	ldr	r3, [r4]
   14c9c:	ldr	r7, [fp, #4]
   14ca0:	ldr	r1, [r4, #44]	; 0x2c
   14ca4:	ldr	r2, [r4, #40]	; 0x28
   14ca8:	orr	r0, r0, #1
   14cac:	str	r3, [sp]
   14cb0:	add	r3, r4, #8
   14cb4:	str	r0, [sp, #28]
   14cb8:	str	r0, [sp, #4]
   14cbc:	str	r1, [sp, #16]
   14cc0:	str	r2, [sp, #12]
   14cc4:	str	r3, [sp, #8]
   14cc8:	mov	r0, r7
   14ccc:	mov	r1, r9
   14cd0:	mvn	r3, #0
   14cd4:	mov	r2, sl
   14cd8:	bl	132c8 <__assert_fail@plt+0x2294>
   14cdc:	cmp	r9, r0
   14ce0:	bhi	14d48 <__assert_fail@plt+0x3d14>
   14ce4:	add	r3, r4, #48	; 0x30
   14ce8:	add	r9, r0, #1
   14cec:	cmp	r7, r3
   14cf0:	str	r9, [r6, r5, lsl #3]
   14cf4:	beq	14d00 <__assert_fail@plt+0x3ccc>
   14cf8:	mov	r0, r7
   14cfc:	bl	12ba8 <__assert_fail@plt+0x1b74>
   14d00:	mov	r0, r9
   14d04:	bl	17ba4 <__assert_fail@plt+0x6b70>
   14d08:	ldr	ip, [r4, #44]	; 0x2c
   14d0c:	ldr	r3, [r4]
   14d10:	ldr	lr, [r4, #40]	; 0x28
   14d14:	ldr	r4, [pc, #124]	; 14d98 <__assert_fail@plt+0x3d64>
   14d18:	mov	r2, sl
   14d1c:	mov	r1, r9
   14d20:	str	r0, [fp, #4]
   14d24:	str	r4, [sp, #8]
   14d28:	ldr	r4, [sp, #28]
   14d2c:	str	r3, [sp]
   14d30:	str	r4, [sp, #4]
   14d34:	str	ip, [sp, #16]
   14d38:	str	lr, [sp, #12]
   14d3c:	mvn	r3, #0
   14d40:	mov	r7, r0
   14d44:	bl	132c8 <__assert_fail@plt+0x2294>
   14d48:	ldr	r3, [sp, #24]
   14d4c:	mov	r0, r7
   14d50:	str	r3, [r8]
   14d54:	add	sp, sp, #44	; 0x2c
   14d58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d5c:	mov	r3, #8
   14d60:	sub	r2, r5, r2
   14d64:	str	r3, [sp]
   14d68:	add	r1, sp, #36	; 0x24
   14d6c:	add	r2, r2, #1
   14d70:	mvn	r3, #-2147483648	; 0x80000000
   14d74:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   14d78:	mov	r6, r0
   14d7c:	ldm	r7, {r0, r1}
   14d80:	str	r6, [r4]
   14d84:	stm	r6, {r0, r1}
   14d88:	b	14c64 <__assert_fail@plt+0x3c30>
   14d8c:	bl	1101c <abort@plt>
   14d90:	andeq	sl, r2, ip, lsl #2
   14d94:			; <UNDEFINED> instruction: 0x0002a1b4
   14d98:			; <UNDEFINED> instruction: 0x0002a1bc
   14d9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14da0:	sub	sp, sp, #52	; 0x34
   14da4:	mov	r5, r0
   14da8:	mov	sl, r1
   14dac:	mov	fp, r2
   14db0:	bl	10f20 <__errno_location@plt>
   14db4:	ldr	r4, [pc, #408]	; 14f54 <__assert_fail@plt+0x3f20>
   14db8:	cmn	r5, #-2147483647	; 0x80000001
   14dbc:	ldr	r6, [r4]
   14dc0:	mov	r8, r0
   14dc4:	movne	r0, #0
   14dc8:	moveq	r0, #1
   14dcc:	ldr	r3, [r8]
   14dd0:	orrs	r0, r0, r5, lsr #31
   14dd4:	str	r3, [sp, #28]
   14dd8:	bne	14f50 <__assert_fail@plt+0x3f1c>
   14ddc:	ldr	r2, [r4, #4]
   14de0:	cmp	r5, r2
   14de4:	blt	14e44 <__assert_fail@plt+0x3e10>
   14de8:	add	r7, r4, #8
   14dec:	cmp	r6, r7
   14df0:	str	r2, [sp, #44]	; 0x2c
   14df4:	beq	14f20 <__assert_fail@plt+0x3eec>
   14df8:	mov	r3, #8
   14dfc:	sub	r2, r5, r2
   14e00:	mov	r0, r6
   14e04:	str	r3, [sp]
   14e08:	add	r2, r2, #1
   14e0c:	mvn	r3, #-2147483648	; 0x80000000
   14e10:	add	r1, sp, #44	; 0x2c
   14e14:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   14e18:	mov	r6, r0
   14e1c:	str	r0, [r4]
   14e20:	ldr	r0, [r4, #4]
   14e24:	ldr	r2, [sp, #44]	; 0x2c
   14e28:	mov	r1, #0
   14e2c:	sub	r2, r2, r0
   14e30:	add	r0, r6, r0, lsl #3
   14e34:	lsl	r2, r2, #3
   14e38:	bl	10f38 <memset@plt>
   14e3c:	ldr	r3, [sp, #44]	; 0x2c
   14e40:	str	r3, [r4, #4]
   14e44:	ldr	r4, [pc, #268]	; 14f58 <__assert_fail@plt+0x3f24>
   14e48:	add	r3, r6, r5, lsl #3
   14e4c:	str	r3, [sp, #32]
   14e50:	ldr	r7, [r3, #4]
   14e54:	ldr	r0, [r4, #4]
   14e58:	ldr	r3, [r4]
   14e5c:	ldr	r9, [r6, r5, lsl #3]
   14e60:	ldr	r1, [r4, #44]	; 0x2c
   14e64:	ldr	r2, [r4, #40]	; 0x28
   14e68:	orr	r0, r0, #1
   14e6c:	str	r3, [sp]
   14e70:	add	r3, r4, #8
   14e74:	str	r0, [sp, #36]	; 0x24
   14e78:	str	r0, [sp, #4]
   14e7c:	str	r1, [sp, #16]
   14e80:	str	r2, [sp, #12]
   14e84:	str	r3, [sp, #8]
   14e88:	mov	r0, r7
   14e8c:	mov	r1, r9
   14e90:	mov	r3, fp
   14e94:	mov	r2, sl
   14e98:	bl	132c8 <__assert_fail@plt+0x2294>
   14e9c:	cmp	r9, r0
   14ea0:	bhi	14f0c <__assert_fail@plt+0x3ed8>
   14ea4:	add	r3, r4, #48	; 0x30
   14ea8:	add	r9, r0, #1
   14eac:	cmp	r7, r3
   14eb0:	str	r9, [r6, r5, lsl #3]
   14eb4:	beq	14ec0 <__assert_fail@plt+0x3e8c>
   14eb8:	mov	r0, r7
   14ebc:	bl	12ba8 <__assert_fail@plt+0x1b74>
   14ec0:	mov	r0, r9
   14ec4:	bl	17ba4 <__assert_fail@plt+0x6b70>
   14ec8:	ldr	ip, [sp, #32]
   14ecc:	ldr	lr, [r4, #44]	; 0x2c
   14ed0:	ldr	r5, [r4, #40]	; 0x28
   14ed4:	mov	r3, fp
   14ed8:	mov	r2, sl
   14edc:	mov	r1, r9
   14ee0:	str	r0, [ip, #4]
   14ee4:	ldr	ip, [r4]
   14ee8:	ldr	r4, [pc, #108]	; 14f5c <__assert_fail@plt+0x3f28>
   14eec:	str	lr, [sp, #16]
   14ef0:	str	r4, [sp, #8]
   14ef4:	ldr	r4, [sp, #36]	; 0x24
   14ef8:	str	r5, [sp, #12]
   14efc:	str	r4, [sp, #4]
   14f00:	str	ip, [sp]
   14f04:	mov	r7, r0
   14f08:	bl	132c8 <__assert_fail@plt+0x2294>
   14f0c:	ldr	r3, [sp, #28]
   14f10:	mov	r0, r7
   14f14:	str	r3, [r8]
   14f18:	add	sp, sp, #52	; 0x34
   14f1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f20:	mov	r3, #8
   14f24:	sub	r2, r5, r2
   14f28:	str	r3, [sp]
   14f2c:	add	r1, sp, #44	; 0x2c
   14f30:	add	r2, r2, #1
   14f34:	mvn	r3, #-2147483648	; 0x80000000
   14f38:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   14f3c:	mov	r6, r0
   14f40:	ldm	r7, {r0, r1}
   14f44:	str	r6, [r4]
   14f48:	stm	r6, {r0, r1}
   14f4c:	b	14e20 <__assert_fail@plt+0x3dec>
   14f50:	bl	1101c <abort@plt>
   14f54:	andeq	sl, r2, ip, lsl #2
   14f58:			; <UNDEFINED> instruction: 0x0002a1b4
   14f5c:			; <UNDEFINED> instruction: 0x0002a1bc
   14f60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f64:	sub	sp, sp, #44	; 0x2c
   14f68:	mov	sl, r0
   14f6c:	bl	10f20 <__errno_location@plt>
   14f70:	ldr	r4, [pc, #352]	; 150d8 <__assert_fail@plt+0x40a4>
   14f74:	ldr	r2, [r4, #4]
   14f78:	ldr	r5, [r4]
   14f7c:	cmp	r2, #0
   14f80:	ldr	r3, [r0]
   14f84:	mov	r8, r0
   14f88:	str	r3, [sp, #28]
   14f8c:	bgt	14fe8 <__assert_fail@plt+0x3fb4>
   14f90:	add	r6, r4, #8
   14f94:	cmp	r5, r6
   14f98:	str	r2, [sp, #36]	; 0x24
   14f9c:	beq	150a8 <__assert_fail@plt+0x4074>
   14fa0:	mov	r3, #8
   14fa4:	mov	r0, r5
   14fa8:	str	r3, [sp]
   14fac:	rsb	r2, r2, #1
   14fb0:	mvn	r3, #-2147483648	; 0x80000000
   14fb4:	add	r1, sp, #36	; 0x24
   14fb8:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   14fbc:	mov	r5, r0
   14fc0:	str	r0, [r4]
   14fc4:	ldr	r0, [r4, #4]
   14fc8:	ldr	r2, [sp, #36]	; 0x24
   14fcc:	mov	r1, #0
   14fd0:	sub	r2, r2, r0
   14fd4:	add	r0, r5, r0, lsl #3
   14fd8:	lsl	r2, r2, #3
   14fdc:	bl	10f38 <memset@plt>
   14fe0:	ldr	r3, [sp, #36]	; 0x24
   14fe4:	str	r3, [r4, #4]
   14fe8:	ldr	r4, [pc, #236]	; 150dc <__assert_fail@plt+0x40a8>
   14fec:	ldr	r9, [r5]
   14ff0:	ldr	r6, [r5, #4]
   14ff4:	ldr	r7, [r4, #4]
   14ff8:	ldr	r1, [r4, #44]	; 0x2c
   14ffc:	ldr	r2, [r4, #40]	; 0x28
   15000:	ldr	r3, [r4]
   15004:	orr	r7, r7, #1
   15008:	add	fp, r4, #8
   1500c:	str	r1, [sp, #16]
   15010:	str	r2, [sp, #12]
   15014:	str	r3, [sp]
   15018:	str	r7, [sp, #4]
   1501c:	str	fp, [sp, #8]
   15020:	mov	r1, r9
   15024:	mov	r0, r6
   15028:	mvn	r3, #0
   1502c:	mov	r2, sl
   15030:	bl	132c8 <__assert_fail@plt+0x2294>
   15034:	cmp	r9, r0
   15038:	bhi	15094 <__assert_fail@plt+0x4060>
   1503c:	add	r3, r4, #48	; 0x30
   15040:	add	r9, r0, #1
   15044:	cmp	r6, r3
   15048:	str	r9, [r5]
   1504c:	beq	15058 <__assert_fail@plt+0x4024>
   15050:	mov	r0, r6
   15054:	bl	12ba8 <__assert_fail@plt+0x1b74>
   15058:	mov	r0, r9
   1505c:	bl	17ba4 <__assert_fail@plt+0x6b70>
   15060:	ldr	ip, [r4, #44]	; 0x2c
   15064:	ldr	r3, [r4]
   15068:	ldr	lr, [r4, #40]	; 0x28
   1506c:	mov	r2, sl
   15070:	mov	r1, r9
   15074:	str	r0, [r5, #4]
   15078:	str	r3, [sp]
   1507c:	stmib	sp, {r7, fp}
   15080:	str	ip, [sp, #16]
   15084:	str	lr, [sp, #12]
   15088:	mvn	r3, #0
   1508c:	mov	r6, r0
   15090:	bl	132c8 <__assert_fail@plt+0x2294>
   15094:	ldr	r3, [sp, #28]
   15098:	mov	r0, r6
   1509c:	str	r3, [r8]
   150a0:	add	sp, sp, #44	; 0x2c
   150a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150a8:	mov	r3, #8
   150ac:	str	r3, [sp]
   150b0:	add	r1, sp, #36	; 0x24
   150b4:	rsb	r2, r2, #1
   150b8:	mvn	r3, #-2147483648	; 0x80000000
   150bc:	mov	r0, #0
   150c0:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   150c4:	mov	r5, r0
   150c8:	ldm	r6, {r0, r1}
   150cc:	str	r5, [r4]
   150d0:	stm	r5, {r0, r1}
   150d4:	b	14fc4 <__assert_fail@plt+0x3f90>
   150d8:	andeq	sl, r2, ip, lsl #2
   150dc:			; <UNDEFINED> instruction: 0x0002a1b4
   150e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150e4:	sub	sp, sp, #44	; 0x2c
   150e8:	mov	r9, r0
   150ec:	mov	sl, r1
   150f0:	bl	10f20 <__errno_location@plt>
   150f4:	ldr	r4, [pc, #364]	; 15268 <__assert_fail@plt+0x4234>
   150f8:	ldr	r2, [r4, #4]
   150fc:	ldr	r5, [r4]
   15100:	cmp	r2, #0
   15104:	ldr	r3, [r0]
   15108:	mov	r7, r0
   1510c:	str	r3, [sp, #24]
   15110:	bgt	1516c <__assert_fail@plt+0x4138>
   15114:	add	r6, r4, #8
   15118:	cmp	r5, r6
   1511c:	str	r2, [sp, #36]	; 0x24
   15120:	beq	15238 <__assert_fail@plt+0x4204>
   15124:	mov	r3, #8
   15128:	mov	r0, r5
   1512c:	str	r3, [sp]
   15130:	rsb	r2, r2, #1
   15134:	mvn	r3, #-2147483648	; 0x80000000
   15138:	add	r1, sp, #36	; 0x24
   1513c:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   15140:	mov	r5, r0
   15144:	str	r0, [r4]
   15148:	ldr	r0, [r4, #4]
   1514c:	ldr	r2, [sp, #36]	; 0x24
   15150:	mov	r1, #0
   15154:	sub	r2, r2, r0
   15158:	add	r0, r5, r0, lsl #3
   1515c:	lsl	r2, r2, #3
   15160:	bl	10f38 <memset@plt>
   15164:	ldr	r3, [sp, #36]	; 0x24
   15168:	str	r3, [r4, #4]
   1516c:	ldr	r4, [pc, #248]	; 1526c <__assert_fail@plt+0x4238>
   15170:	ldr	r8, [r5]
   15174:	ldr	r6, [r5, #4]
   15178:	ldr	r0, [r4, #4]
   1517c:	ldr	r1, [r4, #44]	; 0x2c
   15180:	ldr	r2, [r4, #40]	; 0x28
   15184:	ldr	r3, [r4]
   15188:	orr	r0, r0, #1
   1518c:	add	fp, r4, #8
   15190:	str	r0, [sp, #28]
   15194:	str	r0, [sp, #4]
   15198:	str	r1, [sp, #16]
   1519c:	str	r2, [sp, #12]
   151a0:	str	r3, [sp]
   151a4:	str	fp, [sp, #8]
   151a8:	mov	r1, r8
   151ac:	mov	r0, r6
   151b0:	mov	r3, sl
   151b4:	mov	r2, r9
   151b8:	bl	132c8 <__assert_fail@plt+0x2294>
   151bc:	cmp	r8, r0
   151c0:	bhi	15224 <__assert_fail@plt+0x41f0>
   151c4:	add	r3, r4, #48	; 0x30
   151c8:	add	r8, r0, #1
   151cc:	cmp	r6, r3
   151d0:	str	r8, [r5]
   151d4:	beq	151e0 <__assert_fail@plt+0x41ac>
   151d8:	mov	r0, r6
   151dc:	bl	12ba8 <__assert_fail@plt+0x1b74>
   151e0:	mov	r0, r8
   151e4:	bl	17ba4 <__assert_fail@plt+0x6b70>
   151e8:	ldr	lr, [r4, #44]	; 0x2c
   151ec:	ldr	ip, [r4]
   151f0:	mov	r3, sl
   151f4:	mov	r2, r9
   151f8:	mov	r1, r8
   151fc:	str	r0, [r5, #4]
   15200:	ldr	r5, [r4, #40]	; 0x28
   15204:	ldr	r4, [sp, #28]
   15208:	str	fp, [sp, #8]
   1520c:	str	r4, [sp, #4]
   15210:	str	lr, [sp, #16]
   15214:	str	r5, [sp, #12]
   15218:	str	ip, [sp]
   1521c:	mov	r6, r0
   15220:	bl	132c8 <__assert_fail@plt+0x2294>
   15224:	ldr	r3, [sp, #24]
   15228:	mov	r0, r6
   1522c:	str	r3, [r7]
   15230:	add	sp, sp, #44	; 0x2c
   15234:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15238:	mov	r3, #8
   1523c:	str	r3, [sp]
   15240:	add	r1, sp, #36	; 0x24
   15244:	rsb	r2, r2, #1
   15248:	mvn	r3, #-2147483648	; 0x80000000
   1524c:	mov	r0, #0
   15250:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   15254:	mov	r5, r0
   15258:	ldm	r6, {r0, r1}
   1525c:	str	r5, [r4]
   15260:	stm	r5, {r0, r1}
   15264:	b	15148 <__assert_fail@plt+0x4114>
   15268:	andeq	sl, r2, ip, lsl #2
   1526c:			; <UNDEFINED> instruction: 0x0002a1b4
   15270:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15274:	sub	sp, sp, #132	; 0x84
   15278:	mov	r5, r1
   1527c:	mov	r4, r0
   15280:	mov	r9, r2
   15284:	add	r0, sp, #80	; 0x50
   15288:	mov	r2, #48	; 0x30
   1528c:	mov	r1, #0
   15290:	bl	10f38 <memset@plt>
   15294:	cmp	r5, #10
   15298:	beq	15450 <__assert_fail@plt+0x441c>
   1529c:	add	lr, sp, #80	; 0x50
   152a0:	str	r5, [sp, #80]	; 0x50
   152a4:	ldm	lr!, {r0, r1, r2, r3}
   152a8:	add	ip, sp, #32
   152ac:	ldr	r6, [pc, #416]	; 15454 <__assert_fail@plt+0x4420>
   152b0:	stmia	ip!, {r0, r1, r2, r3}
   152b4:	ldm	lr!, {r0, r1, r2, r3}
   152b8:	stmia	ip!, {r0, r1, r2, r3}
   152bc:	ldm	lr, {r0, r1, r2, r3}
   152c0:	stm	ip, {r0, r1, r2, r3}
   152c4:	bl	10f20 <__errno_location@plt>
   152c8:	cmn	r4, #-2147483647	; 0x80000001
   152cc:	ldr	r5, [r6]
   152d0:	mov	r7, r0
   152d4:	movne	r0, #0
   152d8:	moveq	r0, #1
   152dc:	ldr	r3, [r7]
   152e0:	orrs	r0, r0, r4, lsr #31
   152e4:	str	r3, [sp, #24]
   152e8:	bne	15450 <__assert_fail@plt+0x441c>
   152ec:	ldr	r2, [r6, #4]
   152f0:	cmp	r4, r2
   152f4:	blt	15354 <__assert_fail@plt+0x4320>
   152f8:	add	r8, r6, #8
   152fc:	cmp	r5, r8
   15300:	str	r2, [sp, #80]	; 0x50
   15304:	beq	15420 <__assert_fail@plt+0x43ec>
   15308:	mov	r3, #8
   1530c:	sub	r2, r4, r2
   15310:	mov	r0, r5
   15314:	str	r3, [sp]
   15318:	add	r2, r2, #1
   1531c:	add	r1, sp, #80	; 0x50
   15320:	mvn	r3, #-2147483648	; 0x80000000
   15324:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   15328:	mov	r5, r0
   1532c:	str	r0, [r6]
   15330:	ldr	r0, [r6, #4]
   15334:	ldr	r2, [sp, #80]	; 0x50
   15338:	mov	r1, #0
   1533c:	sub	r2, r2, r0
   15340:	add	r0, r5, r0, lsl #3
   15344:	lsl	r2, r2, #3
   15348:	bl	10f38 <memset@plt>
   1534c:	ldr	r3, [sp, #80]	; 0x50
   15350:	str	r3, [r6, #4]
   15354:	add	fp, r5, r4, lsl #3
   15358:	ldr	r1, [sp, #36]	; 0x24
   1535c:	ldr	r8, [r5, r4, lsl #3]
   15360:	ldr	r6, [fp, #4]
   15364:	ldr	r2, [sp, #72]	; 0x48
   15368:	ldr	r3, [sp, #32]
   1536c:	ldr	ip, [sp, #76]	; 0x4c
   15370:	orr	r1, r1, #1
   15374:	add	sl, sp, #40	; 0x28
   15378:	str	r1, [sp, #28]
   1537c:	str	r1, [sp, #4]
   15380:	str	r2, [sp, #12]
   15384:	str	r3, [sp]
   15388:	mov	r0, r6
   1538c:	mov	r1, r8
   15390:	str	ip, [sp, #16]
   15394:	str	sl, [sp, #8]
   15398:	mvn	r3, #0
   1539c:	mov	r2, r9
   153a0:	bl	132c8 <__assert_fail@plt+0x2294>
   153a4:	cmp	r8, r0
   153a8:	bhi	1540c <__assert_fail@plt+0x43d8>
   153ac:	ldr	r3, [pc, #164]	; 15458 <__assert_fail@plt+0x4424>
   153b0:	add	r8, r0, #1
   153b4:	cmp	r6, r3
   153b8:	str	r8, [r5, r4, lsl #3]
   153bc:	beq	153c8 <__assert_fail@plt+0x4394>
   153c0:	mov	r0, r6
   153c4:	bl	12ba8 <__assert_fail@plt+0x1b74>
   153c8:	mov	r0, r8
   153cc:	bl	17ba4 <__assert_fail@plt+0x6b70>
   153d0:	ldr	lr, [sp, #76]	; 0x4c
   153d4:	ldr	r3, [sp, #32]
   153d8:	ldr	ip, [sp, #72]	; 0x48
   153dc:	ldr	r4, [sp, #28]
   153e0:	mov	r2, r9
   153e4:	mov	r1, r8
   153e8:	str	r0, [fp, #4]
   153ec:	str	r3, [sp]
   153f0:	str	sl, [sp, #8]
   153f4:	str	r4, [sp, #4]
   153f8:	str	lr, [sp, #16]
   153fc:	str	ip, [sp, #12]
   15400:	mvn	r3, #0
   15404:	mov	r6, r0
   15408:	bl	132c8 <__assert_fail@plt+0x2294>
   1540c:	ldr	r3, [sp, #24]
   15410:	mov	r0, r6
   15414:	str	r3, [r7]
   15418:	add	sp, sp, #132	; 0x84
   1541c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15420:	mov	r3, #8
   15424:	sub	r2, r4, r2
   15428:	add	r1, sp, #80	; 0x50
   1542c:	str	r3, [sp]
   15430:	add	r2, r2, #1
   15434:	mvn	r3, #-2147483648	; 0x80000000
   15438:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   1543c:	mov	r5, r0
   15440:	ldm	r8, {r0, r1}
   15444:	str	r5, [r6]
   15448:	stm	r5, {r0, r1}
   1544c:	b	15330 <__assert_fail@plt+0x42fc>
   15450:	bl	1101c <abort@plt>
   15454:	andeq	sl, r2, ip, lsl #2
   15458:	andeq	sl, r2, r4, ror #3
   1545c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15460:	sub	sp, sp, #132	; 0x84
   15464:	mov	r5, r1
   15468:	mov	r4, r0
   1546c:	mov	r9, r2
   15470:	add	r0, sp, #80	; 0x50
   15474:	mov	r2, #48	; 0x30
   15478:	mov	r1, #0
   1547c:	mov	sl, r3
   15480:	bl	10f38 <memset@plt>
   15484:	cmp	r5, #10
   15488:	beq	15644 <__assert_fail@plt+0x4610>
   1548c:	add	lr, sp, #80	; 0x50
   15490:	str	r5, [sp, #80]	; 0x50
   15494:	ldm	lr!, {r0, r1, r2, r3}
   15498:	add	ip, sp, #32
   1549c:	ldr	r6, [pc, #420]	; 15648 <__assert_fail@plt+0x4614>
   154a0:	stmia	ip!, {r0, r1, r2, r3}
   154a4:	ldm	lr!, {r0, r1, r2, r3}
   154a8:	stmia	ip!, {r0, r1, r2, r3}
   154ac:	ldm	lr, {r0, r1, r2, r3}
   154b0:	stm	ip, {r0, r1, r2, r3}
   154b4:	bl	10f20 <__errno_location@plt>
   154b8:	cmn	r4, #-2147483647	; 0x80000001
   154bc:	ldr	r5, [r6]
   154c0:	mov	r7, r0
   154c4:	movne	r0, #0
   154c8:	moveq	r0, #1
   154cc:	ldr	r3, [r7]
   154d0:	orrs	r0, r0, r4, lsr #31
   154d4:	str	r3, [sp, #24]
   154d8:	bne	15644 <__assert_fail@plt+0x4610>
   154dc:	ldr	r2, [r6, #4]
   154e0:	cmp	r4, r2
   154e4:	blt	15544 <__assert_fail@plt+0x4510>
   154e8:	add	r8, r6, #8
   154ec:	cmp	r5, r8
   154f0:	str	r2, [sp, #80]	; 0x50
   154f4:	beq	15614 <__assert_fail@plt+0x45e0>
   154f8:	mov	r3, #8
   154fc:	sub	r2, r4, r2
   15500:	mov	r0, r5
   15504:	str	r3, [sp]
   15508:	add	r2, r2, #1
   1550c:	add	r1, sp, #80	; 0x50
   15510:	mvn	r3, #-2147483648	; 0x80000000
   15514:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   15518:	mov	r5, r0
   1551c:	str	r0, [r6]
   15520:	ldr	r0, [r6, #4]
   15524:	ldr	r2, [sp, #80]	; 0x50
   15528:	mov	r1, #0
   1552c:	sub	r2, r2, r0
   15530:	add	r0, r5, r0, lsl #3
   15534:	lsl	r2, r2, #3
   15538:	bl	10f38 <memset@plt>
   1553c:	ldr	r3, [sp, #80]	; 0x50
   15540:	str	r3, [r6, #4]
   15544:	add	fp, r5, r4, lsl #3
   15548:	ldr	r3, [sp, #32]
   1554c:	ldr	r1, [sp, #36]	; 0x24
   15550:	ldr	r8, [r5, r4, lsl #3]
   15554:	ldr	r6, [fp, #4]
   15558:	ldr	r2, [sp, #72]	; 0x48
   1555c:	ldr	ip, [sp, #76]	; 0x4c
   15560:	orr	r1, r1, #1
   15564:	str	r3, [sp]
   15568:	add	r3, sp, #40	; 0x28
   1556c:	str	r1, [sp, #28]
   15570:	str	r1, [sp, #4]
   15574:	str	r2, [sp, #12]
   15578:	str	r3, [sp, #8]
   1557c:	mov	r0, r6
   15580:	mov	r1, r8
   15584:	str	ip, [sp, #16]
   15588:	mov	r3, sl
   1558c:	mov	r2, r9
   15590:	bl	132c8 <__assert_fail@plt+0x2294>
   15594:	cmp	r8, r0
   15598:	bhi	15600 <__assert_fail@plt+0x45cc>
   1559c:	ldr	r3, [pc, #168]	; 1564c <__assert_fail@plt+0x4618>
   155a0:	add	r8, r0, #1
   155a4:	cmp	r6, r3
   155a8:	str	r8, [r5, r4, lsl #3]
   155ac:	beq	155b8 <__assert_fail@plt+0x4584>
   155b0:	mov	r0, r6
   155b4:	bl	12ba8 <__assert_fail@plt+0x1b74>
   155b8:	mov	r0, r8
   155bc:	bl	17ba4 <__assert_fail@plt+0x6b70>
   155c0:	add	lr, sp, #40	; 0x28
   155c4:	ldr	ip, [sp, #76]	; 0x4c
   155c8:	ldr	r4, [sp, #72]	; 0x48
   155cc:	ldr	r5, [sp, #28]
   155d0:	mov	r3, sl
   155d4:	mov	r2, r9
   155d8:	mov	r1, r8
   155dc:	str	r0, [fp, #4]
   155e0:	str	lr, [sp, #8]
   155e4:	ldr	lr, [sp, #32]
   155e8:	str	r5, [sp, #4]
   155ec:	str	ip, [sp, #16]
   155f0:	str	r4, [sp, #12]
   155f4:	str	lr, [sp]
   155f8:	mov	r6, r0
   155fc:	bl	132c8 <__assert_fail@plt+0x2294>
   15600:	ldr	r3, [sp, #24]
   15604:	mov	r0, r6
   15608:	str	r3, [r7]
   1560c:	add	sp, sp, #132	; 0x84
   15610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15614:	mov	r3, #8
   15618:	sub	r2, r4, r2
   1561c:	add	r1, sp, #80	; 0x50
   15620:	str	r3, [sp]
   15624:	add	r2, r2, #1
   15628:	mvn	r3, #-2147483648	; 0x80000000
   1562c:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   15630:	mov	r5, r0
   15634:	ldm	r8, {r0, r1}
   15638:	str	r5, [r6]
   1563c:	stm	r5, {r0, r1}
   15640:	b	15520 <__assert_fail@plt+0x44ec>
   15644:	bl	1101c <abort@plt>
   15648:	andeq	sl, r2, ip, lsl #2
   1564c:	andeq	sl, r2, r4, ror #3
   15650:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15654:	sub	sp, sp, #124	; 0x7c
   15658:	mov	r4, r0
   1565c:	mov	r9, r1
   15660:	add	r0, sp, #72	; 0x48
   15664:	mov	r2, #48	; 0x30
   15668:	mov	r1, #0
   1566c:	bl	10f38 <memset@plt>
   15670:	cmp	r4, #10
   15674:	beq	15800 <__assert_fail@plt+0x47cc>
   15678:	add	lr, sp, #72	; 0x48
   1567c:	str	r4, [sp, #72]	; 0x48
   15680:	ldm	lr!, {r0, r1, r2, r3}
   15684:	add	ip, sp, #24
   15688:	ldr	r5, [pc, #372]	; 15804 <__assert_fail@plt+0x47d0>
   1568c:	stmia	ip!, {r0, r1, r2, r3}
   15690:	ldm	lr!, {r0, r1, r2, r3}
   15694:	stmia	ip!, {r0, r1, r2, r3}
   15698:	ldm	lr, {r0, r1, r2, r3}
   1569c:	stm	ip, {r0, r1, r2, r3}
   156a0:	bl	10f20 <__errno_location@plt>
   156a4:	ldr	r2, [r5, #4]
   156a8:	ldr	r4, [r5]
   156ac:	cmp	r2, #0
   156b0:	mov	r7, r0
   156b4:	ldr	fp, [r0]
   156b8:	bgt	15714 <__assert_fail@plt+0x46e0>
   156bc:	add	r6, r5, #8
   156c0:	cmp	r4, r6
   156c4:	str	r2, [sp, #72]	; 0x48
   156c8:	beq	157d0 <__assert_fail@plt+0x479c>
   156cc:	mov	r3, #8
   156d0:	mov	r0, r4
   156d4:	str	r3, [sp]
   156d8:	rsb	r2, r2, #1
   156dc:	add	r1, sp, #72	; 0x48
   156e0:	mvn	r3, #-2147483648	; 0x80000000
   156e4:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   156e8:	mov	r4, r0
   156ec:	str	r0, [r5]
   156f0:	ldr	r0, [r5, #4]
   156f4:	ldr	r2, [sp, #72]	; 0x48
   156f8:	mov	r1, #0
   156fc:	sub	r2, r2, r0
   15700:	add	r0, r4, r0, lsl #3
   15704:	lsl	r2, r2, #3
   15708:	bl	10f38 <memset@plt>
   1570c:	ldr	r3, [sp, #72]	; 0x48
   15710:	str	r3, [r5, #4]
   15714:	ldr	r6, [sp, #28]
   15718:	ldr	r8, [r4]
   1571c:	ldr	r5, [r4, #4]
   15720:	ldr	r2, [sp, #64]	; 0x40
   15724:	ldr	r3, [sp, #24]
   15728:	ldr	ip, [sp, #68]	; 0x44
   1572c:	orr	r6, r6, #1
   15730:	add	sl, sp, #32
   15734:	str	r2, [sp, #12]
   15738:	str	r3, [sp]
   1573c:	str	r6, [sp, #4]
   15740:	mov	r1, r8
   15744:	mov	r0, r5
   15748:	str	ip, [sp, #16]
   1574c:	str	sl, [sp, #8]
   15750:	mvn	r3, #0
   15754:	mov	r2, r9
   15758:	bl	132c8 <__assert_fail@plt+0x2294>
   1575c:	cmp	r8, r0
   15760:	bhi	157c0 <__assert_fail@plt+0x478c>
   15764:	ldr	r3, [pc, #156]	; 15808 <__assert_fail@plt+0x47d4>
   15768:	add	r8, r0, #1
   1576c:	cmp	r5, r3
   15770:	str	r8, [r4]
   15774:	beq	15780 <__assert_fail@plt+0x474c>
   15778:	mov	r0, r5
   1577c:	bl	12ba8 <__assert_fail@plt+0x1b74>
   15780:	mov	r0, r8
   15784:	bl	17ba4 <__assert_fail@plt+0x6b70>
   15788:	ldr	lr, [sp, #68]	; 0x44
   1578c:	ldr	r3, [sp, #24]
   15790:	ldr	ip, [sp, #64]	; 0x40
   15794:	mov	r2, r9
   15798:	mov	r1, r8
   1579c:	str	r0, [r4, #4]
   157a0:	str	r3, [sp]
   157a4:	str	sl, [sp, #8]
   157a8:	str	r6, [sp, #4]
   157ac:	str	lr, [sp, #16]
   157b0:	str	ip, [sp, #12]
   157b4:	mvn	r3, #0
   157b8:	mov	r5, r0
   157bc:	bl	132c8 <__assert_fail@plt+0x2294>
   157c0:	mov	r0, r5
   157c4:	str	fp, [r7]
   157c8:	add	sp, sp, #124	; 0x7c
   157cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157d0:	mov	r3, #8
   157d4:	add	r1, sp, #72	; 0x48
   157d8:	str	r3, [sp]
   157dc:	rsb	r2, r2, #1
   157e0:	mvn	r3, #-2147483648	; 0x80000000
   157e4:	mov	r0, #0
   157e8:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   157ec:	mov	r4, r0
   157f0:	ldm	r6, {r0, r1}
   157f4:	str	r4, [r5]
   157f8:	stm	r4, {r0, r1}
   157fc:	b	156f0 <__assert_fail@plt+0x46bc>
   15800:	bl	1101c <abort@plt>
   15804:	andeq	sl, r2, ip, lsl #2
   15808:	andeq	sl, r2, r4, ror #3
   1580c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15810:	sub	sp, sp, #132	; 0x84
   15814:	mov	r4, r0
   15818:	mov	r9, r1
   1581c:	mov	sl, r2
   15820:	add	r0, sp, #80	; 0x50
   15824:	mov	r2, #48	; 0x30
   15828:	mov	r1, #0
   1582c:	bl	10f38 <memset@plt>
   15830:	cmp	r4, #10
   15834:	beq	159c8 <__assert_fail@plt+0x4994>
   15838:	add	lr, sp, #80	; 0x50
   1583c:	str	r4, [sp, #80]	; 0x50
   15840:	ldm	lr!, {r0, r1, r2, r3}
   15844:	add	ip, sp, #32
   15848:	ldr	r5, [pc, #380]	; 159cc <__assert_fail@plt+0x4998>
   1584c:	stmia	ip!, {r0, r1, r2, r3}
   15850:	ldm	lr!, {r0, r1, r2, r3}
   15854:	stmia	ip!, {r0, r1, r2, r3}
   15858:	ldm	lr, {r0, r1, r2, r3}
   1585c:	stm	ip, {r0, r1, r2, r3}
   15860:	bl	10f20 <__errno_location@plt>
   15864:	ldr	r2, [r5, #4]
   15868:	ldr	r4, [r5]
   1586c:	cmp	r2, #0
   15870:	ldr	r3, [r0]
   15874:	mov	r7, r0
   15878:	str	r3, [sp, #28]
   1587c:	bgt	158d8 <__assert_fail@plt+0x48a4>
   15880:	add	r6, r5, #8
   15884:	cmp	r4, r6
   15888:	str	r2, [sp, #80]	; 0x50
   1588c:	beq	15998 <__assert_fail@plt+0x4964>
   15890:	mov	r3, #8
   15894:	mov	r0, r4
   15898:	str	r3, [sp]
   1589c:	rsb	r2, r2, #1
   158a0:	add	r1, sp, #80	; 0x50
   158a4:	mvn	r3, #-2147483648	; 0x80000000
   158a8:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   158ac:	mov	r4, r0
   158b0:	str	r0, [r5]
   158b4:	ldr	r0, [r5, #4]
   158b8:	ldr	r2, [sp, #80]	; 0x50
   158bc:	mov	r1, #0
   158c0:	sub	r2, r2, r0
   158c4:	add	r0, r4, r0, lsl #3
   158c8:	lsl	r2, r2, #3
   158cc:	bl	10f38 <memset@plt>
   158d0:	ldr	r3, [sp, #80]	; 0x50
   158d4:	str	r3, [r5, #4]
   158d8:	ldr	r6, [sp, #36]	; 0x24
   158dc:	ldr	r8, [r4]
   158e0:	ldr	r5, [r4, #4]
   158e4:	ldr	r2, [sp, #72]	; 0x48
   158e8:	ldr	r3, [sp, #32]
   158ec:	ldr	ip, [sp, #76]	; 0x4c
   158f0:	orr	r6, r6, #1
   158f4:	add	fp, sp, #40	; 0x28
   158f8:	str	r2, [sp, #12]
   158fc:	str	r3, [sp]
   15900:	str	r6, [sp, #4]
   15904:	mov	r1, r8
   15908:	mov	r0, r5
   1590c:	str	ip, [sp, #16]
   15910:	str	fp, [sp, #8]
   15914:	mov	r3, sl
   15918:	mov	r2, r9
   1591c:	bl	132c8 <__assert_fail@plt+0x2294>
   15920:	cmp	r8, r0
   15924:	bhi	15984 <__assert_fail@plt+0x4950>
   15928:	ldr	r3, [pc, #160]	; 159d0 <__assert_fail@plt+0x499c>
   1592c:	add	r8, r0, #1
   15930:	cmp	r5, r3
   15934:	str	r8, [r4]
   15938:	beq	15944 <__assert_fail@plt+0x4910>
   1593c:	mov	r0, r5
   15940:	bl	12ba8 <__assert_fail@plt+0x1b74>
   15944:	mov	r0, r8
   15948:	bl	17ba4 <__assert_fail@plt+0x6b70>
   1594c:	ldr	ip, [sp, #76]	; 0x4c
   15950:	ldr	lr, [sp, #32]
   15954:	mov	r3, sl
   15958:	mov	r2, r9
   1595c:	mov	r1, r8
   15960:	str	r0, [r4, #4]
   15964:	ldr	r4, [sp, #72]	; 0x48
   15968:	str	fp, [sp, #8]
   1596c:	str	r6, [sp, #4]
   15970:	str	ip, [sp, #16]
   15974:	str	r4, [sp, #12]
   15978:	str	lr, [sp]
   1597c:	mov	r5, r0
   15980:	bl	132c8 <__assert_fail@plt+0x2294>
   15984:	ldr	r3, [sp, #28]
   15988:	mov	r0, r5
   1598c:	str	r3, [r7]
   15990:	add	sp, sp, #132	; 0x84
   15994:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15998:	mov	r3, #8
   1599c:	add	r1, sp, #80	; 0x50
   159a0:	str	r3, [sp]
   159a4:	rsb	r2, r2, #1
   159a8:	mvn	r3, #-2147483648	; 0x80000000
   159ac:	mov	r0, #0
   159b0:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   159b4:	mov	r4, r0
   159b8:	ldm	r6, {r0, r1}
   159bc:	str	r4, [r5]
   159c0:	stm	r4, {r0, r1}
   159c4:	b	158b4 <__assert_fail@plt+0x4880>
   159c8:	bl	1101c <abort@plt>
   159cc:	andeq	sl, r2, ip, lsl #2
   159d0:	andeq	sl, r2, r4, ror #3
   159d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159d8:	mov	r4, r2
   159dc:	ldr	lr, [pc, #432]	; 15b94 <__assert_fail@plt+0x4b60>
   159e0:	mov	sl, r0
   159e4:	mov	fp, r1
   159e8:	ldm	lr!, {r0, r1, r2, r3}
   159ec:	sub	sp, sp, #92	; 0x5c
   159f0:	add	ip, sp, #40	; 0x28
   159f4:	lsr	r7, r4, #5
   159f8:	stmia	ip!, {r0, r1, r2, r3}
   159fc:	add	r6, sp, #48	; 0x30
   15a00:	ldm	lr!, {r0, r1, r2, r3}
   15a04:	and	r4, r4, #31
   15a08:	ldr	r5, [pc, #392]	; 15b98 <__assert_fail@plt+0x4b64>
   15a0c:	stmia	ip!, {r0, r1, r2, r3}
   15a10:	ldm	lr, {r0, r1, r2, r3}
   15a14:	stm	ip, {r0, r1, r2, r3}
   15a18:	ldr	r2, [r6, r7, lsl #2]
   15a1c:	lsr	r3, r2, r4
   15a20:	eor	r3, r3, #1
   15a24:	and	r3, r3, #1
   15a28:	eor	r4, r2, r3, lsl r4
   15a2c:	str	r4, [r6, r7, lsl #2]
   15a30:	bl	10f20 <__errno_location@plt>
   15a34:	ldr	r2, [r5, #4]
   15a38:	ldr	r4, [r5]
   15a3c:	cmp	r2, #0
   15a40:	ldr	r3, [r0]
   15a44:	mov	r8, r0
   15a48:	str	r3, [sp, #28]
   15a4c:	bgt	15aa8 <__assert_fail@plt+0x4a74>
   15a50:	add	r7, r5, #8
   15a54:	cmp	r4, r7
   15a58:	str	r2, [sp, #36]	; 0x24
   15a5c:	beq	15b64 <__assert_fail@plt+0x4b30>
   15a60:	mov	r3, #8
   15a64:	mov	r0, r4
   15a68:	str	r3, [sp]
   15a6c:	rsb	r2, r2, #1
   15a70:	mvn	r3, #-2147483648	; 0x80000000
   15a74:	add	r1, sp, #36	; 0x24
   15a78:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   15a7c:	mov	r4, r0
   15a80:	str	r0, [r5]
   15a84:	ldr	r0, [r5, #4]
   15a88:	ldr	r2, [sp, #36]	; 0x24
   15a8c:	mov	r1, #0
   15a90:	sub	r2, r2, r0
   15a94:	add	r0, r4, r0, lsl #3
   15a98:	lsl	r2, r2, #3
   15a9c:	bl	10f38 <memset@plt>
   15aa0:	ldr	r3, [sp, #36]	; 0x24
   15aa4:	str	r3, [r5, #4]
   15aa8:	ldr	r7, [sp, #44]	; 0x2c
   15aac:	ldr	r9, [r4]
   15ab0:	ldr	r5, [r4, #4]
   15ab4:	ldr	r2, [sp, #80]	; 0x50
   15ab8:	ldr	r3, [sp, #40]	; 0x28
   15abc:	ldr	ip, [sp, #84]	; 0x54
   15ac0:	orr	r7, r7, #1
   15ac4:	str	r2, [sp, #12]
   15ac8:	str	r3, [sp]
   15acc:	str	r7, [sp, #4]
   15ad0:	str	r6, [sp, #8]
   15ad4:	mov	r1, r9
   15ad8:	mov	r0, r5
   15adc:	str	ip, [sp, #16]
   15ae0:	mov	r3, fp
   15ae4:	mov	r2, sl
   15ae8:	bl	132c8 <__assert_fail@plt+0x2294>
   15aec:	cmp	r9, r0
   15af0:	bhi	15b50 <__assert_fail@plt+0x4b1c>
   15af4:	ldr	r3, [pc, #160]	; 15b9c <__assert_fail@plt+0x4b68>
   15af8:	add	r9, r0, #1
   15afc:	cmp	r5, r3
   15b00:	str	r9, [r4]
   15b04:	beq	15b10 <__assert_fail@plt+0x4adc>
   15b08:	mov	r0, r5
   15b0c:	bl	12ba8 <__assert_fail@plt+0x1b74>
   15b10:	mov	r0, r9
   15b14:	bl	17ba4 <__assert_fail@plt+0x6b70>
   15b18:	ldr	ip, [sp, #84]	; 0x54
   15b1c:	ldr	lr, [sp, #40]	; 0x28
   15b20:	mov	r3, fp
   15b24:	mov	r2, sl
   15b28:	mov	r1, r9
   15b2c:	str	r0, [r4, #4]
   15b30:	ldr	r4, [sp, #80]	; 0x50
   15b34:	str	r6, [sp, #8]
   15b38:	str	r7, [sp, #4]
   15b3c:	str	ip, [sp, #16]
   15b40:	str	r4, [sp, #12]
   15b44:	str	lr, [sp]
   15b48:	mov	r5, r0
   15b4c:	bl	132c8 <__assert_fail@plt+0x2294>
   15b50:	ldr	r3, [sp, #28]
   15b54:	mov	r0, r5
   15b58:	str	r3, [r8]
   15b5c:	add	sp, sp, #92	; 0x5c
   15b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b64:	mov	r3, #8
   15b68:	str	r3, [sp]
   15b6c:	add	r1, sp, #36	; 0x24
   15b70:	rsb	r2, r2, #1
   15b74:	mvn	r3, #-2147483648	; 0x80000000
   15b78:	mov	r0, #0
   15b7c:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   15b80:	mov	r4, r0
   15b84:	ldm	r7, {r0, r1}
   15b88:	str	r4, [r5]
   15b8c:	stm	r4, {r0, r1}
   15b90:	b	15a84 <__assert_fail@plt+0x4a50>
   15b94:			; <UNDEFINED> instruction: 0x0002a1b4
   15b98:	andeq	sl, r2, ip, lsl #2
   15b9c:	andeq	sl, r2, r4, ror #3
   15ba0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ba4:	mov	r4, r1
   15ba8:	ldr	lr, [pc, #420]	; 15d54 <__assert_fail@plt+0x4d20>
   15bac:	mov	r6, r0
   15bb0:	sub	sp, sp, #84	; 0x54
   15bb4:	ldm	lr!, {r0, r1, r2, r3}
   15bb8:	add	ip, sp, #32
   15bbc:	lsr	r8, r4, #5
   15bc0:	add	r5, sp, #40	; 0x28
   15bc4:	stmia	ip!, {r0, r1, r2, r3}
   15bc8:	and	r4, r4, #31
   15bcc:	ldm	lr!, {r0, r1, r2, r3}
   15bd0:	ldr	r7, [pc, #384]	; 15d58 <__assert_fail@plt+0x4d24>
   15bd4:	stmia	ip!, {r0, r1, r2, r3}
   15bd8:	ldm	lr, {r0, r1, r2, r3}
   15bdc:	stm	ip, {r0, r1, r2, r3}
   15be0:	ldr	r2, [r5, r8, lsl #2]
   15be4:	lsr	r3, r2, r4
   15be8:	eor	r3, r3, #1
   15bec:	and	r3, r3, #1
   15bf0:	eor	r4, r2, r3, lsl r4
   15bf4:	str	r4, [r5, r8, lsl #2]
   15bf8:	bl	10f20 <__errno_location@plt>
   15bfc:	ldr	r2, [r7, #4]
   15c00:	ldr	r4, [r7]
   15c04:	cmp	r2, #0
   15c08:	mov	r9, r0
   15c0c:	ldr	sl, [r0]
   15c10:	bgt	15c6c <__assert_fail@plt+0x4c38>
   15c14:	add	r8, r7, #8
   15c18:	cmp	r4, r8
   15c1c:	str	r2, [sp, #28]
   15c20:	beq	15d24 <__assert_fail@plt+0x4cf0>
   15c24:	mov	r3, #8
   15c28:	mov	r0, r4
   15c2c:	str	r3, [sp]
   15c30:	rsb	r2, r2, #1
   15c34:	mvn	r3, #-2147483648	; 0x80000000
   15c38:	add	r1, sp, #28
   15c3c:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   15c40:	mov	r4, r0
   15c44:	str	r0, [r7]
   15c48:	ldr	r0, [r7, #4]
   15c4c:	ldr	r2, [sp, #28]
   15c50:	mov	r1, #0
   15c54:	sub	r2, r2, r0
   15c58:	add	r0, r4, r0, lsl #3
   15c5c:	lsl	r2, r2, #3
   15c60:	bl	10f38 <memset@plt>
   15c64:	ldr	r3, [sp, #28]
   15c68:	str	r3, [r7, #4]
   15c6c:	ldr	r8, [sp, #36]	; 0x24
   15c70:	ldr	fp, [r4]
   15c74:	ldr	r7, [r4, #4]
   15c78:	ldr	r2, [sp, #72]	; 0x48
   15c7c:	ldr	r3, [sp, #32]
   15c80:	ldr	ip, [sp, #76]	; 0x4c
   15c84:	orr	r8, r8, #1
   15c88:	str	r2, [sp, #12]
   15c8c:	str	r3, [sp]
   15c90:	str	r8, [sp, #4]
   15c94:	str	r5, [sp, #8]
   15c98:	mov	r1, fp
   15c9c:	mov	r0, r7
   15ca0:	str	ip, [sp, #16]
   15ca4:	mvn	r3, #0
   15ca8:	mov	r2, r6
   15cac:	bl	132c8 <__assert_fail@plt+0x2294>
   15cb0:	cmp	fp, r0
   15cb4:	bhi	15d14 <__assert_fail@plt+0x4ce0>
   15cb8:	ldr	r3, [pc, #156]	; 15d5c <__assert_fail@plt+0x4d28>
   15cbc:	add	fp, r0, #1
   15cc0:	cmp	r7, r3
   15cc4:	str	fp, [r4]
   15cc8:	beq	15cd4 <__assert_fail@plt+0x4ca0>
   15ccc:	mov	r0, r7
   15cd0:	bl	12ba8 <__assert_fail@plt+0x1b74>
   15cd4:	mov	r0, fp
   15cd8:	bl	17ba4 <__assert_fail@plt+0x6b70>
   15cdc:	ldr	lr, [sp, #76]	; 0x4c
   15ce0:	ldr	r3, [sp, #32]
   15ce4:	ldr	ip, [sp, #72]	; 0x48
   15ce8:	mov	r2, r6
   15cec:	mov	r1, fp
   15cf0:	str	r0, [r4, #4]
   15cf4:	str	r3, [sp]
   15cf8:	str	r5, [sp, #8]
   15cfc:	str	r8, [sp, #4]
   15d00:	str	lr, [sp, #16]
   15d04:	str	ip, [sp, #12]
   15d08:	mvn	r3, #0
   15d0c:	mov	r7, r0
   15d10:	bl	132c8 <__assert_fail@plt+0x2294>
   15d14:	mov	r0, r7
   15d18:	str	sl, [r9]
   15d1c:	add	sp, sp, #84	; 0x54
   15d20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d24:	mov	r3, #8
   15d28:	str	r3, [sp]
   15d2c:	add	r1, sp, #28
   15d30:	rsb	r2, r2, #1
   15d34:	mvn	r3, #-2147483648	; 0x80000000
   15d38:	mov	r0, #0
   15d3c:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   15d40:	mov	r4, r0
   15d44:	ldm	r8, {r0, r1}
   15d48:	str	r4, [r7]
   15d4c:	stm	r4, {r0, r1}
   15d50:	b	15c48 <__assert_fail@plt+0x4c14>
   15d54:			; <UNDEFINED> instruction: 0x0002a1b4
   15d58:	andeq	sl, r2, ip, lsl #2
   15d5c:	andeq	sl, r2, r4, ror #3
   15d60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d64:	mov	r6, r0
   15d68:	ldr	lr, [pc, #404]	; 15f04 <__assert_fail@plt+0x4ed0>
   15d6c:	sub	sp, sp, #84	; 0x54
   15d70:	add	ip, sp, #32
   15d74:	ldm	lr!, {r0, r1, r2, r3}
   15d78:	ldr	r5, [pc, #392]	; 15f08 <__assert_fail@plt+0x4ed4>
   15d7c:	stmia	ip!, {r0, r1, r2, r3}
   15d80:	ldm	lr!, {r0, r1, r2, r3}
   15d84:	ldr	r4, [sp, #44]	; 0x2c
   15d88:	stmia	ip!, {r0, r1, r2, r3}
   15d8c:	ldm	lr, {r0, r1, r2, r3}
   15d90:	mvn	lr, r4
   15d94:	and	lr, lr, #67108864	; 0x4000000
   15d98:	eor	lr, lr, r4
   15d9c:	stm	ip, {r0, r1, r2, r3}
   15da0:	str	lr, [sp, #44]	; 0x2c
   15da4:	bl	10f20 <__errno_location@plt>
   15da8:	ldr	r2, [r5, #4]
   15dac:	ldr	r4, [r5]
   15db0:	cmp	r2, #0
   15db4:	mov	r8, r0
   15db8:	ldr	sl, [r0]
   15dbc:	bgt	15e18 <__assert_fail@plt+0x4de4>
   15dc0:	add	r7, r5, #8
   15dc4:	cmp	r4, r7
   15dc8:	str	r2, [sp, #28]
   15dcc:	beq	15ed4 <__assert_fail@plt+0x4ea0>
   15dd0:	mov	r3, #8
   15dd4:	mov	r0, r4
   15dd8:	str	r3, [sp]
   15ddc:	rsb	r2, r2, #1
   15de0:	mvn	r3, #-2147483648	; 0x80000000
   15de4:	add	r1, sp, #28
   15de8:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   15dec:	mov	r4, r0
   15df0:	str	r0, [r5]
   15df4:	ldr	r0, [r5, #4]
   15df8:	ldr	r2, [sp, #28]
   15dfc:	mov	r1, #0
   15e00:	sub	r2, r2, r0
   15e04:	add	r0, r4, r0, lsl #3
   15e08:	lsl	r2, r2, #3
   15e0c:	bl	10f38 <memset@plt>
   15e10:	ldr	r3, [sp, #28]
   15e14:	str	r3, [r5, #4]
   15e18:	ldr	r7, [sp, #36]	; 0x24
   15e1c:	ldr	r9, [r4]
   15e20:	ldr	r5, [r4, #4]
   15e24:	ldr	r2, [sp, #72]	; 0x48
   15e28:	ldr	r3, [sp, #32]
   15e2c:	ldr	ip, [sp, #76]	; 0x4c
   15e30:	orr	r7, r7, #1
   15e34:	add	fp, sp, #40	; 0x28
   15e38:	str	r2, [sp, #12]
   15e3c:	str	r3, [sp]
   15e40:	str	r7, [sp, #4]
   15e44:	mov	r1, r9
   15e48:	mov	r0, r5
   15e4c:	str	ip, [sp, #16]
   15e50:	str	fp, [sp, #8]
   15e54:	mvn	r3, #0
   15e58:	mov	r2, r6
   15e5c:	bl	132c8 <__assert_fail@plt+0x2294>
   15e60:	cmp	r9, r0
   15e64:	bhi	15ec4 <__assert_fail@plt+0x4e90>
   15e68:	ldr	r3, [pc, #156]	; 15f0c <__assert_fail@plt+0x4ed8>
   15e6c:	add	r9, r0, #1
   15e70:	cmp	r5, r3
   15e74:	str	r9, [r4]
   15e78:	beq	15e84 <__assert_fail@plt+0x4e50>
   15e7c:	mov	r0, r5
   15e80:	bl	12ba8 <__assert_fail@plt+0x1b74>
   15e84:	mov	r0, r9
   15e88:	bl	17ba4 <__assert_fail@plt+0x6b70>
   15e8c:	ldr	lr, [sp, #76]	; 0x4c
   15e90:	ldr	r3, [sp, #32]
   15e94:	ldr	ip, [sp, #72]	; 0x48
   15e98:	mov	r2, r6
   15e9c:	mov	r1, r9
   15ea0:	str	r0, [r4, #4]
   15ea4:	str	r3, [sp]
   15ea8:	str	fp, [sp, #8]
   15eac:	str	r7, [sp, #4]
   15eb0:	str	lr, [sp, #16]
   15eb4:	str	ip, [sp, #12]
   15eb8:	mvn	r3, #0
   15ebc:	mov	r5, r0
   15ec0:	bl	132c8 <__assert_fail@plt+0x2294>
   15ec4:	mov	r0, r5
   15ec8:	str	sl, [r8]
   15ecc:	add	sp, sp, #84	; 0x54
   15ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ed4:	mov	r3, #8
   15ed8:	str	r3, [sp]
   15edc:	add	r1, sp, #28
   15ee0:	rsb	r2, r2, #1
   15ee4:	mvn	r3, #-2147483648	; 0x80000000
   15ee8:	mov	r0, #0
   15eec:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   15ef0:	mov	r4, r0
   15ef4:	ldm	r7, {r0, r1}
   15ef8:	str	r4, [r5]
   15efc:	stm	r4, {r0, r1}
   15f00:	b	15df4 <__assert_fail@plt+0x4dc0>
   15f04:			; <UNDEFINED> instruction: 0x0002a1b4
   15f08:	andeq	sl, r2, ip, lsl #2
   15f0c:	andeq	sl, r2, r4, ror #3
   15f10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f14:	mov	r9, r0
   15f18:	ldr	lr, [pc, #416]	; 160c0 <__assert_fail@plt+0x508c>
   15f1c:	mov	sl, r1
   15f20:	sub	sp, sp, #92	; 0x5c
   15f24:	ldm	lr!, {r0, r1, r2, r3}
   15f28:	add	ip, sp, #40	; 0x28
   15f2c:	ldr	r5, [pc, #400]	; 160c4 <__assert_fail@plt+0x5090>
   15f30:	stmia	ip!, {r0, r1, r2, r3}
   15f34:	ldm	lr!, {r0, r1, r2, r3}
   15f38:	ldr	r4, [sp, #52]	; 0x34
   15f3c:	stmia	ip!, {r0, r1, r2, r3}
   15f40:	ldm	lr, {r0, r1, r2, r3}
   15f44:	mvn	lr, r4
   15f48:	and	lr, lr, #67108864	; 0x4000000
   15f4c:	eor	lr, lr, r4
   15f50:	stm	ip, {r0, r1, r2, r3}
   15f54:	str	lr, [sp, #52]	; 0x34
   15f58:	bl	10f20 <__errno_location@plt>
   15f5c:	ldr	r2, [r5, #4]
   15f60:	ldr	r4, [r5]
   15f64:	cmp	r2, #0
   15f68:	ldr	r3, [r0]
   15f6c:	mov	r7, r0
   15f70:	str	r3, [sp, #28]
   15f74:	bgt	15fd0 <__assert_fail@plt+0x4f9c>
   15f78:	add	r6, r5, #8
   15f7c:	cmp	r4, r6
   15f80:	str	r2, [sp, #36]	; 0x24
   15f84:	beq	16090 <__assert_fail@plt+0x505c>
   15f88:	mov	r3, #8
   15f8c:	mov	r0, r4
   15f90:	str	r3, [sp]
   15f94:	rsb	r2, r2, #1
   15f98:	mvn	r3, #-2147483648	; 0x80000000
   15f9c:	add	r1, sp, #36	; 0x24
   15fa0:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   15fa4:	mov	r4, r0
   15fa8:	str	r0, [r5]
   15fac:	ldr	r0, [r5, #4]
   15fb0:	ldr	r2, [sp, #36]	; 0x24
   15fb4:	mov	r1, #0
   15fb8:	sub	r2, r2, r0
   15fbc:	add	r0, r4, r0, lsl #3
   15fc0:	lsl	r2, r2, #3
   15fc4:	bl	10f38 <memset@plt>
   15fc8:	ldr	r3, [sp, #36]	; 0x24
   15fcc:	str	r3, [r5, #4]
   15fd0:	ldr	r6, [sp, #44]	; 0x2c
   15fd4:	ldr	r8, [r4]
   15fd8:	ldr	r5, [r4, #4]
   15fdc:	ldr	r2, [sp, #80]	; 0x50
   15fe0:	ldr	r3, [sp, #40]	; 0x28
   15fe4:	ldr	ip, [sp, #84]	; 0x54
   15fe8:	orr	r6, r6, #1
   15fec:	add	fp, sp, #48	; 0x30
   15ff0:	str	r2, [sp, #12]
   15ff4:	str	r3, [sp]
   15ff8:	str	r6, [sp, #4]
   15ffc:	mov	r1, r8
   16000:	mov	r0, r5
   16004:	str	ip, [sp, #16]
   16008:	str	fp, [sp, #8]
   1600c:	mov	r3, sl
   16010:	mov	r2, r9
   16014:	bl	132c8 <__assert_fail@plt+0x2294>
   16018:	cmp	r8, r0
   1601c:	bhi	1607c <__assert_fail@plt+0x5048>
   16020:	ldr	r3, [pc, #160]	; 160c8 <__assert_fail@plt+0x5094>
   16024:	add	r8, r0, #1
   16028:	cmp	r5, r3
   1602c:	str	r8, [r4]
   16030:	beq	1603c <__assert_fail@plt+0x5008>
   16034:	mov	r0, r5
   16038:	bl	12ba8 <__assert_fail@plt+0x1b74>
   1603c:	mov	r0, r8
   16040:	bl	17ba4 <__assert_fail@plt+0x6b70>
   16044:	ldr	ip, [sp, #84]	; 0x54
   16048:	ldr	lr, [sp, #40]	; 0x28
   1604c:	mov	r3, sl
   16050:	mov	r2, r9
   16054:	mov	r1, r8
   16058:	str	r0, [r4, #4]
   1605c:	ldr	r4, [sp, #80]	; 0x50
   16060:	str	fp, [sp, #8]
   16064:	str	r6, [sp, #4]
   16068:	str	ip, [sp, #16]
   1606c:	str	r4, [sp, #12]
   16070:	str	lr, [sp]
   16074:	mov	r5, r0
   16078:	bl	132c8 <__assert_fail@plt+0x2294>
   1607c:	ldr	r3, [sp, #28]
   16080:	mov	r0, r5
   16084:	str	r3, [r7]
   16088:	add	sp, sp, #92	; 0x5c
   1608c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16090:	mov	r3, #8
   16094:	str	r3, [sp]
   16098:	add	r1, sp, #36	; 0x24
   1609c:	rsb	r2, r2, #1
   160a0:	mvn	r3, #-2147483648	; 0x80000000
   160a4:	mov	r0, #0
   160a8:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   160ac:	mov	r4, r0
   160b0:	ldm	r6, {r0, r1}
   160b4:	str	r4, [r5]
   160b8:	stm	r4, {r0, r1}
   160bc:	b	15fac <__assert_fail@plt+0x4f78>
   160c0:			; <UNDEFINED> instruction: 0x0002a1b4
   160c4:	andeq	sl, r2, ip, lsl #2
   160c8:	andeq	sl, r2, r4, ror #3
   160cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160d0:	sub	sp, sp, #180	; 0xb4
   160d4:	mov	r6, r1
   160d8:	mov	r4, r0
   160dc:	mov	r9, r2
   160e0:	add	r0, sp, #80	; 0x50
   160e4:	mov	r2, #48	; 0x30
   160e8:	mov	r1, #0
   160ec:	bl	10f38 <memset@plt>
   160f0:	cmp	r6, #10
   160f4:	beq	162d4 <__assert_fail@plt+0x52a0>
   160f8:	add	r5, sp, #80	; 0x50
   160fc:	str	r6, [sp, #80]	; 0x50
   16100:	ldm	r5!, {r0, r1, r2, r3}
   16104:	add	ip, sp, #128	; 0x80
   16108:	mov	r7, ip
   1610c:	add	lr, sp, #32
   16110:	stmia	ip!, {r0, r1, r2, r3}
   16114:	mov	r8, #67108864	; 0x4000000
   16118:	ldm	r5!, {r0, r1, r2, r3}
   1611c:	ldr	r6, [pc, #436]	; 162d8 <__assert_fail@plt+0x52a4>
   16120:	stmia	ip!, {r0, r1, r2, r3}
   16124:	ldm	r5, {r0, r1, r2, r3}
   16128:	stm	ip, {r0, r1, r2, r3}
   1612c:	ldm	r7!, {r0, r1, r2, r3}
   16130:	stmia	lr!, {r0, r1, r2, r3}
   16134:	ldm	r7!, {r0, r1, r2, r3}
   16138:	str	r8, [sp, #44]	; 0x2c
   1613c:	stmia	lr!, {r0, r1, r2, r3}
   16140:	ldm	ip, {r0, r1, r2, r3}
   16144:	stm	lr, {r0, r1, r2, r3}
   16148:	bl	10f20 <__errno_location@plt>
   1614c:	cmn	r4, #-2147483647	; 0x80000001
   16150:	ldr	r5, [r6]
   16154:	mov	r7, r0
   16158:	movne	r0, #0
   1615c:	moveq	r0, #1
   16160:	ldr	r3, [r7]
   16164:	orrs	r0, r0, r4, lsr #31
   16168:	str	r3, [sp, #24]
   1616c:	bne	162d4 <__assert_fail@plt+0x52a0>
   16170:	ldr	r2, [r6, #4]
   16174:	cmp	r4, r2
   16178:	blt	161d8 <__assert_fail@plt+0x51a4>
   1617c:	add	r8, r6, #8
   16180:	cmp	r5, r8
   16184:	str	r2, [sp, #80]	; 0x50
   16188:	beq	162a4 <__assert_fail@plt+0x5270>
   1618c:	mov	r3, #8
   16190:	sub	r2, r4, r2
   16194:	mov	r0, r5
   16198:	str	r3, [sp]
   1619c:	add	r2, r2, #1
   161a0:	add	r1, sp, #80	; 0x50
   161a4:	mvn	r3, #-2147483648	; 0x80000000
   161a8:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   161ac:	mov	r5, r0
   161b0:	str	r0, [r6]
   161b4:	ldr	r0, [r6, #4]
   161b8:	ldr	r2, [sp, #80]	; 0x50
   161bc:	mov	r1, #0
   161c0:	sub	r2, r2, r0
   161c4:	add	r0, r5, r0, lsl #3
   161c8:	lsl	r2, r2, #3
   161cc:	bl	10f38 <memset@plt>
   161d0:	ldr	r3, [sp, #80]	; 0x50
   161d4:	str	r3, [r6, #4]
   161d8:	add	fp, r5, r4, lsl #3
   161dc:	ldr	r1, [sp, #36]	; 0x24
   161e0:	ldr	r8, [r5, r4, lsl #3]
   161e4:	ldr	r6, [fp, #4]
   161e8:	ldr	r2, [sp, #72]	; 0x48
   161ec:	ldr	r3, [sp, #32]
   161f0:	ldr	ip, [sp, #76]	; 0x4c
   161f4:	orr	r1, r1, #1
   161f8:	add	sl, sp, #40	; 0x28
   161fc:	str	r1, [sp, #28]
   16200:	str	r1, [sp, #4]
   16204:	str	r2, [sp, #12]
   16208:	str	r3, [sp]
   1620c:	mov	r0, r6
   16210:	mov	r1, r8
   16214:	str	ip, [sp, #16]
   16218:	str	sl, [sp, #8]
   1621c:	mvn	r3, #0
   16220:	mov	r2, r9
   16224:	bl	132c8 <__assert_fail@plt+0x2294>
   16228:	cmp	r8, r0
   1622c:	bhi	16290 <__assert_fail@plt+0x525c>
   16230:	ldr	r3, [pc, #164]	; 162dc <__assert_fail@plt+0x52a8>
   16234:	add	r8, r0, #1
   16238:	cmp	r6, r3
   1623c:	str	r8, [r5, r4, lsl #3]
   16240:	beq	1624c <__assert_fail@plt+0x5218>
   16244:	mov	r0, r6
   16248:	bl	12ba8 <__assert_fail@plt+0x1b74>
   1624c:	mov	r0, r8
   16250:	bl	17ba4 <__assert_fail@plt+0x6b70>
   16254:	ldr	lr, [sp, #76]	; 0x4c
   16258:	ldr	r3, [sp, #32]
   1625c:	ldr	ip, [sp, #72]	; 0x48
   16260:	ldr	r4, [sp, #28]
   16264:	mov	r2, r9
   16268:	mov	r1, r8
   1626c:	str	r0, [fp, #4]
   16270:	str	r3, [sp]
   16274:	str	sl, [sp, #8]
   16278:	str	r4, [sp, #4]
   1627c:	str	lr, [sp, #16]
   16280:	str	ip, [sp, #12]
   16284:	mvn	r3, #0
   16288:	mov	r6, r0
   1628c:	bl	132c8 <__assert_fail@plt+0x2294>
   16290:	ldr	r3, [sp, #24]
   16294:	mov	r0, r6
   16298:	str	r3, [r7]
   1629c:	add	sp, sp, #180	; 0xb4
   162a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162a4:	mov	r3, #8
   162a8:	sub	r2, r4, r2
   162ac:	add	r1, sp, #80	; 0x50
   162b0:	str	r3, [sp]
   162b4:	add	r2, r2, #1
   162b8:	mvn	r3, #-2147483648	; 0x80000000
   162bc:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   162c0:	mov	r5, r0
   162c4:	ldm	r8, {r0, r1}
   162c8:	str	r5, [r6]
   162cc:	stm	r5, {r0, r1}
   162d0:	b	161b4 <__assert_fail@plt+0x5180>
   162d4:	bl	1101c <abort@plt>
   162d8:	andeq	sl, r2, ip, lsl #2
   162dc:	andeq	sl, r2, r4, ror #3
   162e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162e4:	mov	r7, r1
   162e8:	ldr	lr, [pc, #492]	; 164dc <__assert_fail@plt+0x54a8>
   162ec:	mov	r8, r2
   162f0:	mov	r4, r0
   162f4:	mov	fp, r3
   162f8:	ldm	lr!, {r0, r1, r2, r3}
   162fc:	sub	sp, sp, #100	; 0x64
   16300:	add	ip, sp, #48	; 0x30
   16304:	mov	sl, #10
   16308:	stmia	ip!, {r0, r1, r2, r3}
   1630c:	cmp	r8, #0
   16310:	cmpne	r7, #0
   16314:	ldm	lr!, {r0, r1, r2, r3}
   16318:	str	sl, [sp, #48]	; 0x30
   1631c:	stmia	ip!, {r0, r1, r2, r3}
   16320:	ldm	lr, {r0, r1, r2, r3}
   16324:	stm	ip, {r0, r1, r2, r3}
   16328:	beq	164d8 <__assert_fail@plt+0x54a4>
   1632c:	str	r7, [sp, #88]	; 0x58
   16330:	str	r8, [sp, #92]	; 0x5c
   16334:	bl	10f20 <__errno_location@plt>
   16338:	ldr	r6, [pc, #416]	; 164e0 <__assert_fail@plt+0x54ac>
   1633c:	cmn	r4, #-2147483647	; 0x80000001
   16340:	ldr	r5, [r6]
   16344:	mov	r9, r0
   16348:	movne	r0, #0
   1634c:	moveq	r0, #1
   16350:	ldr	r3, [r9]
   16354:	orrs	r0, r0, r4, lsr #31
   16358:	str	r3, [sp, #28]
   1635c:	bne	164d8 <__assert_fail@plt+0x54a4>
   16360:	ldr	r2, [r6, #4]
   16364:	cmp	r4, r2
   16368:	movlt	r3, sl
   1636c:	blt	163d8 <__assert_fail@plt+0x53a4>
   16370:	add	r7, r6, #8
   16374:	cmp	r5, r7
   16378:	str	r2, [sp, #44]	; 0x2c
   1637c:	beq	164a8 <__assert_fail@plt+0x5474>
   16380:	mov	r3, #8
   16384:	sub	r2, r4, r2
   16388:	mov	r0, r5
   1638c:	str	r3, [sp]
   16390:	add	r2, r2, #1
   16394:	mvn	r3, #-2147483648	; 0x80000000
   16398:	add	r1, sp, #44	; 0x2c
   1639c:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   163a0:	mov	r5, r0
   163a4:	str	r0, [r6]
   163a8:	ldr	r0, [r6, #4]
   163ac:	ldr	r2, [sp, #44]	; 0x2c
   163b0:	mov	r1, #0
   163b4:	sub	r2, r2, r0
   163b8:	add	r0, r5, r0, lsl #3
   163bc:	lsl	r2, r2, #3
   163c0:	bl	10f38 <memset@plt>
   163c4:	ldr	r3, [sp, #48]	; 0x30
   163c8:	ldr	r7, [sp, #88]	; 0x58
   163cc:	ldr	r8, [sp, #92]	; 0x5c
   163d0:	ldr	r2, [sp, #44]	; 0x2c
   163d4:	str	r2, [r6, #4]
   163d8:	add	r2, r5, r4, lsl #3
   163dc:	mov	r1, r2
   163e0:	str	r2, [sp, #32]
   163e4:	ldr	r2, [sp, #52]	; 0x34
   163e8:	ldr	r6, [r1, #4]
   163ec:	ldr	sl, [r5, r4, lsl #3]
   163f0:	orr	r2, r2, #1
   163f4:	str	r3, [sp]
   163f8:	add	r3, sp, #56	; 0x38
   163fc:	str	r2, [sp, #36]	; 0x24
   16400:	str	r2, [sp, #4]
   16404:	str	r3, [sp, #8]
   16408:	mov	r0, r6
   1640c:	str	r8, [sp, #16]
   16410:	str	r7, [sp, #12]
   16414:	mov	r1, sl
   16418:	mvn	r3, #0
   1641c:	mov	r2, fp
   16420:	bl	132c8 <__assert_fail@plt+0x2294>
   16424:	cmp	sl, r0
   16428:	bhi	16494 <__assert_fail@plt+0x5460>
   1642c:	ldr	r3, [pc, #176]	; 164e4 <__assert_fail@plt+0x54b0>
   16430:	add	r7, r0, #1
   16434:	cmp	r6, r3
   16438:	str	r7, [r5, r4, lsl #3]
   1643c:	beq	16448 <__assert_fail@plt+0x5414>
   16440:	mov	r0, r6
   16444:	bl	12ba8 <__assert_fail@plt+0x1b74>
   16448:	mov	r0, r7
   1644c:	bl	17ba4 <__assert_fail@plt+0x6b70>
   16450:	ldr	r3, [sp, #32]
   16454:	ldr	lr, [sp, #92]	; 0x5c
   16458:	ldr	ip, [sp, #88]	; 0x58
   1645c:	ldr	r4, [sp, #36]	; 0x24
   16460:	mov	r2, fp
   16464:	mov	r1, r7
   16468:	str	r0, [r3, #4]
   1646c:	add	r3, sp, #56	; 0x38
   16470:	str	r3, [sp, #8]
   16474:	ldr	r3, [sp, #48]	; 0x30
   16478:	str	r4, [sp, #4]
   1647c:	str	r3, [sp]
   16480:	str	lr, [sp, #16]
   16484:	str	ip, [sp, #12]
   16488:	mvn	r3, #0
   1648c:	mov	r6, r0
   16490:	bl	132c8 <__assert_fail@plt+0x2294>
   16494:	ldr	r3, [sp, #28]
   16498:	mov	r0, r6
   1649c:	str	r3, [r9]
   164a0:	add	sp, sp, #100	; 0x64
   164a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164a8:	mov	r3, #8
   164ac:	sub	r2, r4, r2
   164b0:	str	r3, [sp]
   164b4:	add	r1, sp, #44	; 0x2c
   164b8:	add	r2, r2, #1
   164bc:	mvn	r3, #-2147483648	; 0x80000000
   164c0:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   164c4:	mov	r5, r0
   164c8:	ldm	r7, {r0, r1}
   164cc:	str	r5, [r6]
   164d0:	stm	r5, {r0, r1}
   164d4:	b	163a8 <__assert_fail@plt+0x5374>
   164d8:	bl	1101c <abort@plt>
   164dc:			; <UNDEFINED> instruction: 0x0002a1b4
   164e0:	andeq	sl, r2, ip, lsl #2
   164e4:	andeq	sl, r2, r4, ror #3
   164e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164ec:	mov	r7, r1
   164f0:	ldr	lr, [pc, #492]	; 166e4 <__assert_fail@plt+0x56b0>
   164f4:	mov	r8, r2
   164f8:	mov	r4, r0
   164fc:	mov	fp, r3
   16500:	ldm	lr!, {r0, r1, r2, r3}
   16504:	sub	sp, sp, #100	; 0x64
   16508:	add	ip, sp, #48	; 0x30
   1650c:	mov	sl, #10
   16510:	stmia	ip!, {r0, r1, r2, r3}
   16514:	cmp	r8, #0
   16518:	cmpne	r7, #0
   1651c:	ldm	lr!, {r0, r1, r2, r3}
   16520:	str	sl, [sp, #48]	; 0x30
   16524:	stmia	ip!, {r0, r1, r2, r3}
   16528:	ldm	lr, {r0, r1, r2, r3}
   1652c:	stm	ip, {r0, r1, r2, r3}
   16530:	beq	166e0 <__assert_fail@plt+0x56ac>
   16534:	str	r7, [sp, #88]	; 0x58
   16538:	str	r8, [sp, #92]	; 0x5c
   1653c:	bl	10f20 <__errno_location@plt>
   16540:	ldr	r6, [pc, #416]	; 166e8 <__assert_fail@plt+0x56b4>
   16544:	cmn	r4, #-2147483647	; 0x80000001
   16548:	ldr	r5, [r6]
   1654c:	mov	r9, r0
   16550:	movne	r0, #0
   16554:	moveq	r0, #1
   16558:	ldr	r3, [r9]
   1655c:	orrs	r0, r0, r4, lsr #31
   16560:	str	r3, [sp, #28]
   16564:	bne	166e0 <__assert_fail@plt+0x56ac>
   16568:	ldr	r2, [r6, #4]
   1656c:	cmp	r4, r2
   16570:	movlt	r3, sl
   16574:	blt	165e0 <__assert_fail@plt+0x55ac>
   16578:	add	r7, r6, #8
   1657c:	cmp	r5, r7
   16580:	str	r2, [sp, #44]	; 0x2c
   16584:	beq	166b0 <__assert_fail@plt+0x567c>
   16588:	mov	r3, #8
   1658c:	sub	r2, r4, r2
   16590:	mov	r0, r5
   16594:	str	r3, [sp]
   16598:	add	r2, r2, #1
   1659c:	mvn	r3, #-2147483648	; 0x80000000
   165a0:	add	r1, sp, #44	; 0x2c
   165a4:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   165a8:	mov	r5, r0
   165ac:	str	r0, [r6]
   165b0:	ldr	r0, [r6, #4]
   165b4:	ldr	r2, [sp, #44]	; 0x2c
   165b8:	mov	r1, #0
   165bc:	sub	r2, r2, r0
   165c0:	add	r0, r5, r0, lsl #3
   165c4:	lsl	r2, r2, #3
   165c8:	bl	10f38 <memset@plt>
   165cc:	ldr	r3, [sp, #48]	; 0x30
   165d0:	ldr	r7, [sp, #88]	; 0x58
   165d4:	ldr	r8, [sp, #92]	; 0x5c
   165d8:	ldr	r2, [sp, #44]	; 0x2c
   165dc:	str	r2, [r6, #4]
   165e0:	add	r2, r5, r4, lsl #3
   165e4:	mov	r1, r2
   165e8:	str	r2, [sp, #32]
   165ec:	ldr	r2, [sp, #52]	; 0x34
   165f0:	ldr	r6, [r1, #4]
   165f4:	ldr	sl, [r5, r4, lsl #3]
   165f8:	orr	r2, r2, #1
   165fc:	str	r3, [sp]
   16600:	add	r3, sp, #56	; 0x38
   16604:	str	r2, [sp, #36]	; 0x24
   16608:	str	r2, [sp, #4]
   1660c:	str	r3, [sp, #8]
   16610:	mov	r0, r6
   16614:	str	r8, [sp, #16]
   16618:	str	r7, [sp, #12]
   1661c:	mov	r1, sl
   16620:	ldr	r3, [sp, #136]	; 0x88
   16624:	mov	r2, fp
   16628:	bl	132c8 <__assert_fail@plt+0x2294>
   1662c:	cmp	sl, r0
   16630:	bhi	1669c <__assert_fail@plt+0x5668>
   16634:	ldr	r3, [pc, #176]	; 166ec <__assert_fail@plt+0x56b8>
   16638:	add	r7, r0, #1
   1663c:	cmp	r6, r3
   16640:	str	r7, [r5, r4, lsl #3]
   16644:	beq	16650 <__assert_fail@plt+0x561c>
   16648:	mov	r0, r6
   1664c:	bl	12ba8 <__assert_fail@plt+0x1b74>
   16650:	mov	r0, r7
   16654:	bl	17ba4 <__assert_fail@plt+0x6b70>
   16658:	ldr	r3, [sp, #32]
   1665c:	ldr	lr, [sp, #92]	; 0x5c
   16660:	ldr	ip, [sp, #88]	; 0x58
   16664:	ldr	r4, [sp, #36]	; 0x24
   16668:	mov	r2, fp
   1666c:	mov	r1, r7
   16670:	str	r0, [r3, #4]
   16674:	add	r3, sp, #56	; 0x38
   16678:	str	r3, [sp, #8]
   1667c:	ldr	r3, [sp, #48]	; 0x30
   16680:	str	r4, [sp, #4]
   16684:	str	r3, [sp]
   16688:	str	lr, [sp, #16]
   1668c:	str	ip, [sp, #12]
   16690:	ldr	r3, [sp, #136]	; 0x88
   16694:	mov	r6, r0
   16698:	bl	132c8 <__assert_fail@plt+0x2294>
   1669c:	ldr	r3, [sp, #28]
   166a0:	mov	r0, r6
   166a4:	str	r3, [r9]
   166a8:	add	sp, sp, #100	; 0x64
   166ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166b0:	mov	r3, #8
   166b4:	sub	r2, r4, r2
   166b8:	str	r3, [sp]
   166bc:	add	r1, sp, #44	; 0x2c
   166c0:	add	r2, r2, #1
   166c4:	mvn	r3, #-2147483648	; 0x80000000
   166c8:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   166cc:	mov	r5, r0
   166d0:	ldm	r7, {r0, r1}
   166d4:	str	r5, [r6]
   166d8:	stm	r5, {r0, r1}
   166dc:	b	165b0 <__assert_fail@plt+0x557c>
   166e0:	bl	1101c <abort@plt>
   166e4:			; <UNDEFINED> instruction: 0x0002a1b4
   166e8:	andeq	sl, r2, ip, lsl #2
   166ec:	andeq	sl, r2, r4, ror #3
   166f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166f4:	mov	r5, r0
   166f8:	ldr	lr, [pc, #452]	; 168c4 <__assert_fail@plt+0x5890>
   166fc:	mov	r6, r1
   16700:	mov	sl, r2
   16704:	ldm	lr!, {r0, r1, r2, r3}
   16708:	sub	sp, sp, #92	; 0x5c
   1670c:	add	ip, sp, #40	; 0x28
   16710:	cmp	r6, #0
   16714:	cmpne	r5, #0
   16718:	stmia	ip!, {r0, r1, r2, r3}
   1671c:	mov	r9, #10
   16720:	ldm	lr!, {r0, r1, r2, r3}
   16724:	moveq	fp, #1
   16728:	movne	fp, #0
   1672c:	str	r9, [sp, #40]	; 0x28
   16730:	stmia	ip!, {r0, r1, r2, r3}
   16734:	ldm	lr, {r0, r1, r2, r3}
   16738:	stm	ip, {r0, r1, r2, r3}
   1673c:	beq	168c0 <__assert_fail@plt+0x588c>
   16740:	str	r5, [sp, #80]	; 0x50
   16744:	str	r6, [sp, #84]	; 0x54
   16748:	bl	10f20 <__errno_location@plt>
   1674c:	ldr	r7, [pc, #372]	; 168c8 <__assert_fail@plt+0x5894>
   16750:	ldr	r2, [r7, #4]
   16754:	ldr	r4, [r7]
   16758:	cmp	r2, #0
   1675c:	ldr	r3, [r0]
   16760:	mov	r8, r0
   16764:	str	r3, [sp, #24]
   16768:	movgt	r3, r9
   1676c:	bgt	167d4 <__assert_fail@plt+0x57a0>
   16770:	add	r5, r7, #8
   16774:	cmp	r4, r5
   16778:	str	r2, [sp, #36]	; 0x24
   1677c:	beq	16890 <__assert_fail@plt+0x585c>
   16780:	mov	r3, #8
   16784:	mov	r0, r4
   16788:	str	r3, [sp]
   1678c:	rsb	r2, r2, #1
   16790:	mvn	r3, #-2147483648	; 0x80000000
   16794:	add	r1, sp, #36	; 0x24
   16798:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   1679c:	mov	r4, r0
   167a0:	str	r0, [r7]
   167a4:	ldr	r0, [r7, #4]
   167a8:	ldr	r2, [sp, #36]	; 0x24
   167ac:	mov	r1, #0
   167b0:	sub	r2, r2, r0
   167b4:	add	r0, r4, r0, lsl #3
   167b8:	lsl	r2, r2, #3
   167bc:	bl	10f38 <memset@plt>
   167c0:	ldr	r3, [sp, #40]	; 0x28
   167c4:	ldr	r5, [sp, #80]	; 0x50
   167c8:	ldr	r6, [sp, #84]	; 0x54
   167cc:	ldr	r2, [sp, #36]	; 0x24
   167d0:	str	r2, [r7, #4]
   167d4:	ldr	r2, [sp, #44]	; 0x2c
   167d8:	ldr	r9, [r4]
   167dc:	ldr	r7, [r4, #4]
   167e0:	orr	r2, r2, #1
   167e4:	add	fp, sp, #48	; 0x30
   167e8:	str	r2, [sp, #28]
   167ec:	str	r2, [sp, #4]
   167f0:	str	r3, [sp]
   167f4:	str	r6, [sp, #16]
   167f8:	str	r5, [sp, #12]
   167fc:	mov	r1, r9
   16800:	mov	r0, r7
   16804:	str	fp, [sp, #8]
   16808:	mvn	r3, #0
   1680c:	mov	r2, sl
   16810:	bl	132c8 <__assert_fail@plt+0x2294>
   16814:	cmp	r9, r0
   16818:	bhi	1687c <__assert_fail@plt+0x5848>
   1681c:	ldr	r3, [pc, #168]	; 168cc <__assert_fail@plt+0x5898>
   16820:	add	r5, r0, #1
   16824:	cmp	r7, r3
   16828:	str	r5, [r4]
   1682c:	beq	16838 <__assert_fail@plt+0x5804>
   16830:	mov	r0, r7
   16834:	bl	12ba8 <__assert_fail@plt+0x1b74>
   16838:	mov	r0, r5
   1683c:	bl	17ba4 <__assert_fail@plt+0x6b70>
   16840:	ldr	lr, [sp, #84]	; 0x54
   16844:	ldr	r3, [sp, #40]	; 0x28
   16848:	ldr	ip, [sp, #80]	; 0x50
   1684c:	mov	r2, sl
   16850:	mov	r1, r5
   16854:	str	r0, [r4, #4]
   16858:	ldr	r4, [sp, #28]
   1685c:	str	r3, [sp]
   16860:	str	fp, [sp, #8]
   16864:	str	r4, [sp, #4]
   16868:	str	lr, [sp, #16]
   1686c:	str	ip, [sp, #12]
   16870:	mvn	r3, #0
   16874:	mov	r7, r0
   16878:	bl	132c8 <__assert_fail@plt+0x2294>
   1687c:	ldr	r3, [sp, #24]
   16880:	mov	r0, r7
   16884:	str	r3, [r8]
   16888:	add	sp, sp, #92	; 0x5c
   1688c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16890:	mov	r3, #8
   16894:	str	r3, [sp]
   16898:	add	r1, sp, #36	; 0x24
   1689c:	rsb	r2, r2, #1
   168a0:	mov	r0, fp
   168a4:	mvn	r3, #-2147483648	; 0x80000000
   168a8:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   168ac:	mov	r4, r0
   168b0:	ldm	r5, {r0, r1}
   168b4:	str	r4, [r7]
   168b8:	stm	r4, {r0, r1}
   168bc:	b	167a4 <__assert_fail@plt+0x5770>
   168c0:	bl	1101c <abort@plt>
   168c4:			; <UNDEFINED> instruction: 0x0002a1b4
   168c8:	andeq	sl, r2, ip, lsl #2
   168cc:	andeq	sl, r2, r4, ror #3
   168d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168d4:	mov	r5, r0
   168d8:	ldr	lr, [pc, #464]	; 16ab0 <__assert_fail@plt+0x5a7c>
   168dc:	mov	r6, r1
   168e0:	mov	sl, r2
   168e4:	mov	fp, r3
   168e8:	ldm	lr!, {r0, r1, r2, r3}
   168ec:	sub	sp, sp, #92	; 0x5c
   168f0:	add	ip, sp, #40	; 0x28
   168f4:	cmp	r6, #0
   168f8:	cmpne	r5, #0
   168fc:	stmia	ip!, {r0, r1, r2, r3}
   16900:	moveq	r4, #1
   16904:	ldm	lr!, {r0, r1, r2, r3}
   16908:	movne	r4, #0
   1690c:	mov	r9, #10
   16910:	str	r4, [sp, #28]
   16914:	stmia	ip!, {r0, r1, r2, r3}
   16918:	ldm	lr, {r0, r1, r2, r3}
   1691c:	str	r9, [sp, #40]	; 0x28
   16920:	stm	ip, {r0, r1, r2, r3}
   16924:	beq	16aac <__assert_fail@plt+0x5a78>
   16928:	str	r5, [sp, #80]	; 0x50
   1692c:	str	r6, [sp, #84]	; 0x54
   16930:	bl	10f20 <__errno_location@plt>
   16934:	ldr	r7, [pc, #376]	; 16ab4 <__assert_fail@plt+0x5a80>
   16938:	ldr	r2, [r7, #4]
   1693c:	ldr	r4, [r7]
   16940:	cmp	r2, #0
   16944:	ldr	r3, [r0]
   16948:	mov	r8, r0
   1694c:	str	r3, [sp, #24]
   16950:	movgt	r3, r9
   16954:	bgt	169bc <__assert_fail@plt+0x5988>
   16958:	add	r5, r7, #8
   1695c:	cmp	r4, r5
   16960:	str	r2, [sp, #36]	; 0x24
   16964:	beq	16a7c <__assert_fail@plt+0x5a48>
   16968:	mov	r3, #8
   1696c:	mov	r0, r4
   16970:	str	r3, [sp]
   16974:	rsb	r2, r2, #1
   16978:	mvn	r3, #-2147483648	; 0x80000000
   1697c:	add	r1, sp, #36	; 0x24
   16980:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   16984:	mov	r4, r0
   16988:	str	r0, [r7]
   1698c:	ldr	r0, [r7, #4]
   16990:	ldr	r2, [sp, #36]	; 0x24
   16994:	mov	r1, #0
   16998:	sub	r2, r2, r0
   1699c:	add	r0, r4, r0, lsl #3
   169a0:	lsl	r2, r2, #3
   169a4:	bl	10f38 <memset@plt>
   169a8:	ldr	r3, [sp, #40]	; 0x28
   169ac:	ldr	r5, [sp, #80]	; 0x50
   169b0:	ldr	r6, [sp, #84]	; 0x54
   169b4:	ldr	r2, [sp, #36]	; 0x24
   169b8:	str	r2, [r7, #4]
   169bc:	ldr	r2, [sp, #44]	; 0x2c
   169c0:	ldr	r9, [r4]
   169c4:	ldr	r7, [r4, #4]
   169c8:	orr	r2, r2, #1
   169cc:	str	r3, [sp]
   169d0:	add	r3, sp, #48	; 0x30
   169d4:	str	r2, [sp, #28]
   169d8:	str	r2, [sp, #4]
   169dc:	str	r3, [sp, #8]
   169e0:	str	r6, [sp, #16]
   169e4:	str	r5, [sp, #12]
   169e8:	mov	r1, r9
   169ec:	mov	r0, r7
   169f0:	mov	r3, fp
   169f4:	mov	r2, sl
   169f8:	bl	132c8 <__assert_fail@plt+0x2294>
   169fc:	cmp	r9, r0
   16a00:	bhi	16a68 <__assert_fail@plt+0x5a34>
   16a04:	ldr	r3, [pc, #172]	; 16ab8 <__assert_fail@plt+0x5a84>
   16a08:	add	r5, r0, #1
   16a0c:	cmp	r7, r3
   16a10:	str	r5, [r4]
   16a14:	beq	16a20 <__assert_fail@plt+0x59ec>
   16a18:	mov	r0, r7
   16a1c:	bl	12ba8 <__assert_fail@plt+0x1b74>
   16a20:	mov	r0, r5
   16a24:	bl	17ba4 <__assert_fail@plt+0x6b70>
   16a28:	add	lr, sp, #48	; 0x30
   16a2c:	ldr	ip, [sp, #84]	; 0x54
   16a30:	mov	r1, r5
   16a34:	ldr	r5, [sp, #28]
   16a38:	mov	r3, fp
   16a3c:	mov	r2, sl
   16a40:	str	r0, [r4, #4]
   16a44:	ldr	r4, [sp, #80]	; 0x50
   16a48:	str	lr, [sp, #8]
   16a4c:	ldr	lr, [sp, #40]	; 0x28
   16a50:	str	r5, [sp, #4]
   16a54:	str	ip, [sp, #16]
   16a58:	str	r4, [sp, #12]
   16a5c:	str	lr, [sp]
   16a60:	mov	r7, r0
   16a64:	bl	132c8 <__assert_fail@plt+0x2294>
   16a68:	ldr	r3, [sp, #24]
   16a6c:	mov	r0, r7
   16a70:	str	r3, [r8]
   16a74:	add	sp, sp, #92	; 0x5c
   16a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a7c:	mov	r3, #8
   16a80:	str	r3, [sp]
   16a84:	add	r1, sp, #36	; 0x24
   16a88:	rsb	r2, r2, #1
   16a8c:	ldr	r0, [sp, #28]
   16a90:	mvn	r3, #-2147483648	; 0x80000000
   16a94:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   16a98:	mov	r4, r0
   16a9c:	ldm	r5, {r0, r1}
   16aa0:	str	r4, [r7]
   16aa4:	stm	r4, {r0, r1}
   16aa8:	b	1698c <__assert_fail@plt+0x5958>
   16aac:	bl	1101c <abort@plt>
   16ab0:			; <UNDEFINED> instruction: 0x0002a1b4
   16ab4:	andeq	sl, r2, ip, lsl #2
   16ab8:	andeq	sl, r2, r4, ror #3
   16abc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ac0:	sub	sp, sp, #52	; 0x34
   16ac4:	mov	r5, r0
   16ac8:	mov	sl, r1
   16acc:	mov	fp, r2
   16ad0:	bl	10f20 <__errno_location@plt>
   16ad4:	ldr	r4, [pc, #404]	; 16c70 <__assert_fail@plt+0x5c3c>
   16ad8:	cmn	r5, #-2147483647	; 0x80000001
   16adc:	ldr	r6, [r4]
   16ae0:	mov	r8, r0
   16ae4:	movne	r0, #0
   16ae8:	moveq	r0, #1
   16aec:	ldr	r3, [r8]
   16af0:	orrs	r0, r0, r5, lsr #31
   16af4:	str	r3, [sp, #28]
   16af8:	bne	16c6c <__assert_fail@plt+0x5c38>
   16afc:	ldr	r2, [r4, #4]
   16b00:	cmp	r5, r2
   16b04:	blt	16b64 <__assert_fail@plt+0x5b30>
   16b08:	add	r7, r4, #8
   16b0c:	cmp	r6, r7
   16b10:	str	r2, [sp, #44]	; 0x2c
   16b14:	beq	16c3c <__assert_fail@plt+0x5c08>
   16b18:	mov	r3, #8
   16b1c:	sub	r2, r5, r2
   16b20:	mov	r0, r6
   16b24:	str	r3, [sp]
   16b28:	add	r2, r2, #1
   16b2c:	mvn	r3, #-2147483648	; 0x80000000
   16b30:	add	r1, sp, #44	; 0x2c
   16b34:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   16b38:	mov	r6, r0
   16b3c:	str	r0, [r4]
   16b40:	ldr	r0, [r4, #4]
   16b44:	ldr	r2, [sp, #44]	; 0x2c
   16b48:	mov	r1, #0
   16b4c:	sub	r2, r2, r0
   16b50:	add	r0, r6, r0, lsl #3
   16b54:	lsl	r2, r2, #3
   16b58:	bl	10f38 <memset@plt>
   16b5c:	ldr	r3, [sp, #44]	; 0x2c
   16b60:	str	r3, [r4, #4]
   16b64:	ldr	r2, [r4, #56]	; 0x38
   16b68:	add	r3, r6, r5, lsl #3
   16b6c:	ldr	r1, [r4, #20]
   16b70:	ldr	r7, [r3, #4]
   16b74:	ldr	r9, [r6, r5, lsl #3]
   16b78:	ldr	ip, [r4, #60]	; 0x3c
   16b7c:	str	r3, [sp, #32]
   16b80:	ldr	r3, [r4, #16]
   16b84:	str	r2, [sp, #12]
   16b88:	ldr	r2, [pc, #228]	; 16c74 <__assert_fail@plt+0x5c40>
   16b8c:	orr	r1, r1, #1
   16b90:	str	r1, [sp, #36]	; 0x24
   16b94:	str	r1, [sp, #4]
   16b98:	str	r2, [sp, #8]
   16b9c:	str	r3, [sp]
   16ba0:	mov	r0, r7
   16ba4:	mov	r1, r9
   16ba8:	str	ip, [sp, #16]
   16bac:	mov	r3, fp
   16bb0:	mov	r2, sl
   16bb4:	bl	132c8 <__assert_fail@plt+0x2294>
   16bb8:	cmp	r9, r0
   16bbc:	bhi	16c28 <__assert_fail@plt+0x5bf4>
   16bc0:	ldr	r3, [pc, #176]	; 16c78 <__assert_fail@plt+0x5c44>
   16bc4:	add	r9, r0, #1
   16bc8:	cmp	r7, r3
   16bcc:	str	r9, [r6, r5, lsl #3]
   16bd0:	beq	16bdc <__assert_fail@plt+0x5ba8>
   16bd4:	mov	r0, r7
   16bd8:	bl	12ba8 <__assert_fail@plt+0x1b74>
   16bdc:	mov	r0, r9
   16be0:	bl	17ba4 <__assert_fail@plt+0x6b70>
   16be4:	ldr	ip, [sp, #32]
   16be8:	ldr	lr, [r4, #60]	; 0x3c
   16bec:	ldr	r5, [r4, #56]	; 0x38
   16bf0:	mov	r3, fp
   16bf4:	mov	r2, sl
   16bf8:	mov	r1, r9
   16bfc:	str	r0, [ip, #4]
   16c00:	ldr	ip, [r4, #16]
   16c04:	ldr	r4, [pc, #104]	; 16c74 <__assert_fail@plt+0x5c40>
   16c08:	str	lr, [sp, #16]
   16c0c:	str	r4, [sp, #8]
   16c10:	ldr	r4, [sp, #36]	; 0x24
   16c14:	str	r5, [sp, #12]
   16c18:	str	r4, [sp, #4]
   16c1c:	str	ip, [sp]
   16c20:	mov	r7, r0
   16c24:	bl	132c8 <__assert_fail@plt+0x2294>
   16c28:	ldr	r3, [sp, #28]
   16c2c:	mov	r0, r7
   16c30:	str	r3, [r8]
   16c34:	add	sp, sp, #52	; 0x34
   16c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c3c:	mov	r3, #8
   16c40:	sub	r2, r5, r2
   16c44:	str	r3, [sp]
   16c48:	add	r1, sp, #44	; 0x2c
   16c4c:	add	r2, r2, #1
   16c50:	mvn	r3, #-2147483648	; 0x80000000
   16c54:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   16c58:	mov	r6, r0
   16c5c:	ldm	r7, {r0, r1}
   16c60:	str	r6, [r4]
   16c64:	stm	r6, {r0, r1}
   16c68:	b	16b40 <__assert_fail@plt+0x5b0c>
   16c6c:	bl	1101c <abort@plt>
   16c70:	andeq	sl, r2, ip, lsl #2
   16c74:	andeq	sl, r2, r4, lsr #2
   16c78:	andeq	sl, r2, r4, ror #3
   16c7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c80:	sub	sp, sp, #44	; 0x2c
   16c84:	mov	r9, r0
   16c88:	mov	sl, r1
   16c8c:	bl	10f20 <__errno_location@plt>
   16c90:	ldr	r4, [pc, #360]	; 16e00 <__assert_fail@plt+0x5dcc>
   16c94:	ldr	r2, [r4, #4]
   16c98:	ldr	r5, [r4]
   16c9c:	cmp	r2, #0
   16ca0:	ldr	r3, [r0]
   16ca4:	mov	r7, r0
   16ca8:	str	r3, [sp, #24]
   16cac:	bgt	16d08 <__assert_fail@plt+0x5cd4>
   16cb0:	add	r6, r4, #8
   16cb4:	cmp	r5, r6
   16cb8:	str	r2, [sp, #36]	; 0x24
   16cbc:	beq	16dd0 <__assert_fail@plt+0x5d9c>
   16cc0:	mov	r3, #8
   16cc4:	mov	r0, r5
   16cc8:	str	r3, [sp]
   16ccc:	rsb	r2, r2, #1
   16cd0:	mvn	r3, #-2147483648	; 0x80000000
   16cd4:	add	r1, sp, #36	; 0x24
   16cd8:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   16cdc:	mov	r5, r0
   16ce0:	str	r0, [r4]
   16ce4:	ldr	r0, [r4, #4]
   16ce8:	ldr	r2, [sp, #36]	; 0x24
   16cec:	mov	r1, #0
   16cf0:	sub	r2, r2, r0
   16cf4:	add	r0, r5, r0, lsl #3
   16cf8:	lsl	r2, r2, #3
   16cfc:	bl	10f38 <memset@plt>
   16d00:	ldr	r3, [sp, #36]	; 0x24
   16d04:	str	r3, [r4, #4]
   16d08:	ldr	r1, [r4, #20]
   16d0c:	ldr	r8, [r5]
   16d10:	ldr	r6, [r5, #4]
   16d14:	ldr	r2, [r4, #56]	; 0x38
   16d18:	ldr	r3, [r4, #16]
   16d1c:	ldr	ip, [r4, #60]	; 0x3c
   16d20:	ldr	fp, [pc, #220]	; 16e04 <__assert_fail@plt+0x5dd0>
   16d24:	orr	r1, r1, #1
   16d28:	str	r1, [sp, #28]
   16d2c:	str	r1, [sp, #4]
   16d30:	str	r2, [sp, #12]
   16d34:	str	r3, [sp]
   16d38:	mov	r1, r8
   16d3c:	mov	r0, r6
   16d40:	str	ip, [sp, #16]
   16d44:	str	fp, [sp, #8]
   16d48:	mov	r3, sl
   16d4c:	mov	r2, r9
   16d50:	bl	132c8 <__assert_fail@plt+0x2294>
   16d54:	cmp	r8, r0
   16d58:	bhi	16dbc <__assert_fail@plt+0x5d88>
   16d5c:	ldr	r3, [pc, #164]	; 16e08 <__assert_fail@plt+0x5dd4>
   16d60:	add	r8, r0, #1
   16d64:	cmp	r6, r3
   16d68:	str	r8, [r5]
   16d6c:	beq	16d78 <__assert_fail@plt+0x5d44>
   16d70:	mov	r0, r6
   16d74:	bl	12ba8 <__assert_fail@plt+0x1b74>
   16d78:	mov	r0, r8
   16d7c:	bl	17ba4 <__assert_fail@plt+0x6b70>
   16d80:	ldr	lr, [r4, #60]	; 0x3c
   16d84:	ldr	ip, [r4, #16]
   16d88:	mov	r3, sl
   16d8c:	mov	r2, r9
   16d90:	mov	r1, r8
   16d94:	str	r0, [r5, #4]
   16d98:	ldr	r5, [r4, #56]	; 0x38
   16d9c:	ldr	r4, [sp, #28]
   16da0:	str	fp, [sp, #8]
   16da4:	str	r4, [sp, #4]
   16da8:	str	lr, [sp, #16]
   16dac:	str	r5, [sp, #12]
   16db0:	str	ip, [sp]
   16db4:	mov	r6, r0
   16db8:	bl	132c8 <__assert_fail@plt+0x2294>
   16dbc:	ldr	r3, [sp, #24]
   16dc0:	mov	r0, r6
   16dc4:	str	r3, [r7]
   16dc8:	add	sp, sp, #44	; 0x2c
   16dcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dd0:	mov	r3, #8
   16dd4:	str	r3, [sp]
   16dd8:	add	r1, sp, #36	; 0x24
   16ddc:	rsb	r2, r2, #1
   16de0:	mvn	r3, #-2147483648	; 0x80000000
   16de4:	mov	r0, #0
   16de8:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   16dec:	mov	r5, r0
   16df0:	ldm	r6, {r0, r1}
   16df4:	str	r5, [r4]
   16df8:	stm	r5, {r0, r1}
   16dfc:	b	16ce4 <__assert_fail@plt+0x5cb0>
   16e00:	andeq	sl, r2, ip, lsl #2
   16e04:	andeq	sl, r2, r4, lsr #2
   16e08:	andeq	sl, r2, r4, ror #3
   16e0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e10:	sub	sp, sp, #44	; 0x2c
   16e14:	mov	r5, r0
   16e18:	mov	sl, r1
   16e1c:	bl	10f20 <__errno_location@plt>
   16e20:	ldr	r4, [pc, #396]	; 16fb4 <__assert_fail@plt+0x5f80>
   16e24:	cmn	r5, #-2147483647	; 0x80000001
   16e28:	ldr	r6, [r4]
   16e2c:	mov	r8, r0
   16e30:	movne	r0, #0
   16e34:	moveq	r0, #1
   16e38:	ldr	r3, [r8]
   16e3c:	orrs	r0, r0, r5, lsr #31
   16e40:	str	r3, [sp, #24]
   16e44:	bne	16fb0 <__assert_fail@plt+0x5f7c>
   16e48:	ldr	r2, [r4, #4]
   16e4c:	cmp	r5, r2
   16e50:	blt	16eb0 <__assert_fail@plt+0x5e7c>
   16e54:	add	r7, r4, #8
   16e58:	cmp	r6, r7
   16e5c:	str	r2, [sp, #36]	; 0x24
   16e60:	beq	16f80 <__assert_fail@plt+0x5f4c>
   16e64:	mov	r3, #8
   16e68:	sub	r2, r5, r2
   16e6c:	mov	r0, r6
   16e70:	str	r3, [sp]
   16e74:	add	r2, r2, #1
   16e78:	mvn	r3, #-2147483648	; 0x80000000
   16e7c:	add	r1, sp, #36	; 0x24
   16e80:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   16e84:	mov	r6, r0
   16e88:	str	r0, [r4]
   16e8c:	ldr	r0, [r4, #4]
   16e90:	ldr	r2, [sp, #36]	; 0x24
   16e94:	mov	r1, #0
   16e98:	sub	r2, r2, r0
   16e9c:	add	r0, r6, r0, lsl #3
   16ea0:	lsl	r2, r2, #3
   16ea4:	bl	10f38 <memset@plt>
   16ea8:	ldr	r3, [sp, #36]	; 0x24
   16eac:	str	r3, [r4, #4]
   16eb0:	ldr	r2, [r4, #56]	; 0x38
   16eb4:	add	fp, r6, r5, lsl #3
   16eb8:	ldr	r1, [r4, #20]
   16ebc:	ldr	r9, [r6, r5, lsl #3]
   16ec0:	ldr	r7, [fp, #4]
   16ec4:	ldr	r3, [r4, #16]
   16ec8:	ldr	ip, [r4, #60]	; 0x3c
   16ecc:	str	r2, [sp, #12]
   16ed0:	ldr	r2, [pc, #224]	; 16fb8 <__assert_fail@plt+0x5f84>
   16ed4:	orr	r1, r1, #1
   16ed8:	str	r1, [sp, #28]
   16edc:	str	r1, [sp, #4]
   16ee0:	str	r2, [sp, #8]
   16ee4:	str	r3, [sp]
   16ee8:	mov	r0, r7
   16eec:	mov	r1, r9
   16ef0:	str	ip, [sp, #16]
   16ef4:	mvn	r3, #0
   16ef8:	mov	r2, sl
   16efc:	bl	132c8 <__assert_fail@plt+0x2294>
   16f00:	cmp	r9, r0
   16f04:	bhi	16f6c <__assert_fail@plt+0x5f38>
   16f08:	ldr	r3, [pc, #172]	; 16fbc <__assert_fail@plt+0x5f88>
   16f0c:	add	r9, r0, #1
   16f10:	cmp	r7, r3
   16f14:	str	r9, [r6, r5, lsl #3]
   16f18:	beq	16f24 <__assert_fail@plt+0x5ef0>
   16f1c:	mov	r0, r7
   16f20:	bl	12ba8 <__assert_fail@plt+0x1b74>
   16f24:	mov	r0, r9
   16f28:	bl	17ba4 <__assert_fail@plt+0x6b70>
   16f2c:	ldr	ip, [r4, #60]	; 0x3c
   16f30:	ldr	r3, [r4, #16]
   16f34:	ldr	lr, [r4, #56]	; 0x38
   16f38:	ldr	r4, [pc, #120]	; 16fb8 <__assert_fail@plt+0x5f84>
   16f3c:	mov	r2, sl
   16f40:	mov	r1, r9
   16f44:	str	r0, [fp, #4]
   16f48:	str	r4, [sp, #8]
   16f4c:	ldr	r4, [sp, #28]
   16f50:	str	r3, [sp]
   16f54:	str	r4, [sp, #4]
   16f58:	str	ip, [sp, #16]
   16f5c:	str	lr, [sp, #12]
   16f60:	mvn	r3, #0
   16f64:	mov	r7, r0
   16f68:	bl	132c8 <__assert_fail@plt+0x2294>
   16f6c:	ldr	r3, [sp, #24]
   16f70:	mov	r0, r7
   16f74:	str	r3, [r8]
   16f78:	add	sp, sp, #44	; 0x2c
   16f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f80:	mov	r3, #8
   16f84:	sub	r2, r5, r2
   16f88:	str	r3, [sp]
   16f8c:	add	r1, sp, #36	; 0x24
   16f90:	add	r2, r2, #1
   16f94:	mvn	r3, #-2147483648	; 0x80000000
   16f98:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   16f9c:	mov	r6, r0
   16fa0:	ldm	r7, {r0, r1}
   16fa4:	str	r6, [r4]
   16fa8:	stm	r6, {r0, r1}
   16fac:	b	16e8c <__assert_fail@plt+0x5e58>
   16fb0:	bl	1101c <abort@plt>
   16fb4:	andeq	sl, r2, ip, lsl #2
   16fb8:	andeq	sl, r2, r4, lsr #2
   16fbc:	andeq	sl, r2, r4, ror #3
   16fc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fc4:	sub	sp, sp, #44	; 0x2c
   16fc8:	mov	sl, r0
   16fcc:	bl	10f20 <__errno_location@plt>
   16fd0:	ldr	r4, [pc, #348]	; 17134 <__assert_fail@plt+0x6100>
   16fd4:	ldr	r2, [r4, #4]
   16fd8:	ldr	r5, [r4]
   16fdc:	cmp	r2, #0
   16fe0:	ldr	r3, [r0]
   16fe4:	mov	r8, r0
   16fe8:	str	r3, [sp, #28]
   16fec:	bgt	17048 <__assert_fail@plt+0x6014>
   16ff0:	add	r6, r4, #8
   16ff4:	cmp	r5, r6
   16ff8:	str	r2, [sp, #36]	; 0x24
   16ffc:	beq	17104 <__assert_fail@plt+0x60d0>
   17000:	mov	r3, #8
   17004:	mov	r0, r5
   17008:	str	r3, [sp]
   1700c:	rsb	r2, r2, #1
   17010:	mvn	r3, #-2147483648	; 0x80000000
   17014:	add	r1, sp, #36	; 0x24
   17018:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   1701c:	mov	r5, r0
   17020:	str	r0, [r4]
   17024:	ldr	r0, [r4, #4]
   17028:	ldr	r2, [sp, #36]	; 0x24
   1702c:	mov	r1, #0
   17030:	sub	r2, r2, r0
   17034:	add	r0, r5, r0, lsl #3
   17038:	lsl	r2, r2, #3
   1703c:	bl	10f38 <memset@plt>
   17040:	ldr	r3, [sp, #36]	; 0x24
   17044:	str	r3, [r4, #4]
   17048:	ldr	r7, [r4, #20]
   1704c:	ldr	r9, [r5]
   17050:	ldr	r6, [r5, #4]
   17054:	ldr	r2, [r4, #56]	; 0x38
   17058:	ldr	r3, [r4, #16]
   1705c:	ldr	ip, [r4, #60]	; 0x3c
   17060:	ldr	fp, [pc, #208]	; 17138 <__assert_fail@plt+0x6104>
   17064:	orr	r7, r7, #1
   17068:	str	r2, [sp, #12]
   1706c:	str	r3, [sp]
   17070:	str	r7, [sp, #4]
   17074:	mov	r1, r9
   17078:	mov	r0, r6
   1707c:	str	ip, [sp, #16]
   17080:	str	fp, [sp, #8]
   17084:	mvn	r3, #0
   17088:	mov	r2, sl
   1708c:	bl	132c8 <__assert_fail@plt+0x2294>
   17090:	cmp	r9, r0
   17094:	bhi	170f0 <__assert_fail@plt+0x60bc>
   17098:	ldr	r3, [pc, #156]	; 1713c <__assert_fail@plt+0x6108>
   1709c:	add	r9, r0, #1
   170a0:	cmp	r6, r3
   170a4:	str	r9, [r5]
   170a8:	beq	170b4 <__assert_fail@plt+0x6080>
   170ac:	mov	r0, r6
   170b0:	bl	12ba8 <__assert_fail@plt+0x1b74>
   170b4:	mov	r0, r9
   170b8:	bl	17ba4 <__assert_fail@plt+0x6b70>
   170bc:	ldr	ip, [r4, #60]	; 0x3c
   170c0:	ldr	r3, [r4, #16]
   170c4:	ldr	lr, [r4, #56]	; 0x38
   170c8:	mov	r2, sl
   170cc:	mov	r1, r9
   170d0:	str	r0, [r5, #4]
   170d4:	str	r3, [sp]
   170d8:	stmib	sp, {r7, fp}
   170dc:	str	ip, [sp, #16]
   170e0:	str	lr, [sp, #12]
   170e4:	mvn	r3, #0
   170e8:	mov	r6, r0
   170ec:	bl	132c8 <__assert_fail@plt+0x2294>
   170f0:	ldr	r3, [sp, #28]
   170f4:	mov	r0, r6
   170f8:	str	r3, [r8]
   170fc:	add	sp, sp, #44	; 0x2c
   17100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17104:	mov	r3, #8
   17108:	str	r3, [sp]
   1710c:	add	r1, sp, #36	; 0x24
   17110:	rsb	r2, r2, #1
   17114:	mvn	r3, #-2147483648	; 0x80000000
   17118:	mov	r0, #0
   1711c:	bl	17dc0 <__assert_fail@plt+0x6d8c>
   17120:	mov	r5, r0
   17124:	ldm	r6, {r0, r1}
   17128:	str	r5, [r4]
   1712c:	stm	r5, {r0, r1}
   17130:	b	17024 <__assert_fail@plt+0x5ff0>
   17134:	andeq	sl, r2, ip, lsl #2
   17138:	andeq	sl, r2, r4, lsr #2
   1713c:	andeq	sl, r2, r4, ror #3
   17140:	push	{r4, r5, r6, lr}
   17144:	sub	sp, sp, #32
   17148:	cmp	r1, #0
   1714c:	mov	r4, r0
   17150:	ldr	r5, [sp, #48]	; 0x30
   17154:	ldr	r6, [sp, #52]	; 0x34
   17158:	beq	17470 <__assert_fail@plt+0x643c>
   1715c:	stm	sp, {r2, r3}
   17160:	mov	r3, r1
   17164:	ldr	r2, [pc, #808]	; 17494 <__assert_fail@plt+0x6460>
   17168:	mov	r1, #1
   1716c:	bl	10f68 <__fprintf_chk@plt>
   17170:	mov	r2, #5
   17174:	ldr	r1, [pc, #796]	; 17498 <__assert_fail@plt+0x6464>
   17178:	mov	r0, #0
   1717c:	bl	10e3c <dcgettext@plt>
   17180:	ldr	r3, [pc, #788]	; 1749c <__assert_fail@plt+0x6468>
   17184:	ldr	r2, [pc, #788]	; 174a0 <__assert_fail@plt+0x646c>
   17188:	str	r3, [sp]
   1718c:	mov	r1, #1
   17190:	mov	r3, r0
   17194:	mov	r0, r4
   17198:	bl	10f68 <__fprintf_chk@plt>
   1719c:	mov	r1, r4
   171a0:	mov	r0, #10
   171a4:	bl	10e30 <fputc_unlocked@plt>
   171a8:	mov	r2, #5
   171ac:	ldr	r1, [pc, #752]	; 174a4 <__assert_fail@plt+0x6470>
   171b0:	mov	r0, #0
   171b4:	bl	10e3c <dcgettext@plt>
   171b8:	mov	r1, #1
   171bc:	ldr	r3, [pc, #740]	; 174a8 <__assert_fail@plt+0x6474>
   171c0:	mov	r2, r0
   171c4:	mov	r0, r4
   171c8:	bl	10f68 <__fprintf_chk@plt>
   171cc:	mov	r1, r4
   171d0:	mov	r0, #10
   171d4:	bl	10e30 <fputc_unlocked@plt>
   171d8:	cmp	r6, #9
   171dc:	ldrls	pc, [pc, r6, lsl #2]
   171e0:	b	17488 <__assert_fail@plt+0x6454>
   171e4:	andeq	r7, r1, r8, ror #4
   171e8:	andeq	r7, r1, r0, ror r2
   171ec:	muleq	r1, ip, r2
   171f0:	ldrdeq	r7, [r1], -r0
   171f4:	andeq	r7, r1, ip, lsl #6
   171f8:	andeq	r7, r1, r8, asr #6
   171fc:	andeq	r7, r1, r4, lsl #7
   17200:	andeq	r7, r1, r8, asr #7
   17204:	andeq	r7, r1, r8, lsl r4
   17208:	andeq	r7, r1, ip, lsl #4
   1720c:	ldr	r1, [pc, #664]	; 174ac <__assert_fail@plt+0x6478>
   17210:	mov	r2, #5
   17214:	mov	r0, #0
   17218:	bl	10e3c <dcgettext@plt>
   1721c:	ldr	ip, [r5, #32]
   17220:	ldr	r1, [r5, #28]
   17224:	ldr	r2, [r5, #24]
   17228:	ldr	r3, [r5]
   1722c:	ldr	r6, [r5, #20]
   17230:	str	ip, [sp, #28]
   17234:	ldr	lr, [r5, #16]
   17238:	str	r1, [sp, #24]
   1723c:	ldr	ip, [r5, #12]
   17240:	str	r2, [sp, #20]
   17244:	ldr	r1, [r5, #8]
   17248:	ldr	r2, [r5, #4]
   1724c:	str	r6, [sp, #16]
   17250:	stmib	sp, {r1, ip, lr}
   17254:	mov	r1, #1
   17258:	str	r2, [sp]
   1725c:	mov	r2, r0
   17260:	mov	r0, r4
   17264:	bl	10f68 <__fprintf_chk@plt>
   17268:	add	sp, sp, #32
   1726c:	pop	{r4, r5, r6, pc}
   17270:	mov	r2, #5
   17274:	ldr	r1, [pc, #564]	; 174b0 <__assert_fail@plt+0x647c>
   17278:	mov	r0, #0
   1727c:	bl	10e3c <dcgettext@plt>
   17280:	ldr	r3, [r5]
   17284:	mov	r1, #1
   17288:	mov	r2, r0
   1728c:	mov	r0, r4
   17290:	add	sp, sp, #32
   17294:	pop	{r4, r5, r6, lr}
   17298:	b	10f68 <__fprintf_chk@plt>
   1729c:	mov	r2, #5
   172a0:	ldr	r1, [pc, #524]	; 174b4 <__assert_fail@plt+0x6480>
   172a4:	mov	r0, #0
   172a8:	bl	10e3c <dcgettext@plt>
   172ac:	ldr	r2, [r5, #4]
   172b0:	ldr	r3, [r5]
   172b4:	mov	r1, #1
   172b8:	str	r2, [sp, #48]	; 0x30
   172bc:	mov	r2, r0
   172c0:	mov	r0, r4
   172c4:	add	sp, sp, #32
   172c8:	pop	{r4, r5, r6, lr}
   172cc:	b	10f68 <__fprintf_chk@plt>
   172d0:	mov	r2, #5
   172d4:	ldr	r1, [pc, #476]	; 174b8 <__assert_fail@plt+0x6484>
   172d8:	mov	r0, #0
   172dc:	bl	10e3c <dcgettext@plt>
   172e0:	ldr	r1, [r5, #8]
   172e4:	ldr	r2, [r5, #4]
   172e8:	ldr	r3, [r5]
   172ec:	str	r1, [sp, #52]	; 0x34
   172f0:	str	r2, [sp, #48]	; 0x30
   172f4:	mov	r1, #1
   172f8:	mov	r2, r0
   172fc:	mov	r0, r4
   17300:	add	sp, sp, #32
   17304:	pop	{r4, r5, r6, lr}
   17308:	b	10f68 <__fprintf_chk@plt>
   1730c:	mov	r2, #5
   17310:	ldr	r1, [pc, #420]	; 174bc <__assert_fail@plt+0x6488>
   17314:	mov	r0, #0
   17318:	bl	10e3c <dcgettext@plt>
   1731c:	ldr	r1, [r5, #8]
   17320:	ldr	ip, [r5, #12]
   17324:	ldr	r2, [r5, #4]
   17328:	ldr	r3, [r5]
   1732c:	stmib	sp, {r1, ip}
   17330:	str	r2, [sp]
   17334:	mov	r1, #1
   17338:	mov	r2, r0
   1733c:	mov	r0, r4
   17340:	bl	10f68 <__fprintf_chk@plt>
   17344:	b	17268 <__assert_fail@plt+0x6234>
   17348:	mov	r2, #5
   1734c:	ldr	r1, [pc, #364]	; 174c0 <__assert_fail@plt+0x648c>
   17350:	mov	r0, #0
   17354:	bl	10e3c <dcgettext@plt>
   17358:	add	r1, r5, #8
   1735c:	ldr	r2, [r5, #4]
   17360:	ldm	r1, {r1, ip, lr}
   17364:	ldr	r3, [r5]
   17368:	str	r2, [sp]
   1736c:	stmib	sp, {r1, ip, lr}
   17370:	mov	r1, #1
   17374:	mov	r2, r0
   17378:	mov	r0, r4
   1737c:	bl	10f68 <__fprintf_chk@plt>
   17380:	b	17268 <__assert_fail@plt+0x6234>
   17384:	mov	r2, #5
   17388:	ldr	r1, [pc, #308]	; 174c4 <__assert_fail@plt+0x6490>
   1738c:	mov	r0, #0
   17390:	bl	10e3c <dcgettext@plt>
   17394:	add	r1, r5, #8
   17398:	ldr	r2, [r5, #4]
   1739c:	ldm	r1, {r1, ip, lr}
   173a0:	ldr	r6, [r5, #20]
   173a4:	ldr	r3, [r5]
   173a8:	stmib	sp, {r1, ip, lr}
   173ac:	mov	r1, #1
   173b0:	str	r2, [sp]
   173b4:	str	r6, [sp, #16]
   173b8:	mov	r2, r0
   173bc:	mov	r0, r4
   173c0:	bl	10f68 <__fprintf_chk@plt>
   173c4:	b	17268 <__assert_fail@plt+0x6234>
   173c8:	mov	r2, #5
   173cc:	ldr	r1, [pc, #244]	; 174c8 <__assert_fail@plt+0x6494>
   173d0:	mov	r0, #0
   173d4:	bl	10e3c <dcgettext@plt>
   173d8:	ldr	r2, [r5, #24]
   173dc:	ldr	r3, [r5]
   173e0:	ldr	r6, [r5, #20]
   173e4:	ldr	lr, [r5, #16]
   173e8:	ldr	ip, [r5, #12]
   173ec:	str	r2, [sp, #20]
   173f0:	ldr	r1, [r5, #8]
   173f4:	ldr	r2, [r5, #4]
   173f8:	str	r6, [sp, #16]
   173fc:	stmib	sp, {r1, ip, lr}
   17400:	mov	r1, #1
   17404:	str	r2, [sp]
   17408:	mov	r2, r0
   1740c:	mov	r0, r4
   17410:	bl	10f68 <__fprintf_chk@plt>
   17414:	b	17268 <__assert_fail@plt+0x6234>
   17418:	mov	r2, #5
   1741c:	ldr	r1, [pc, #168]	; 174cc <__assert_fail@plt+0x6498>
   17420:	mov	r0, #0
   17424:	bl	10e3c <dcgettext@plt>
   17428:	ldr	r1, [r5, #28]
   1742c:	ldr	r2, [r5, #24]
   17430:	ldr	r3, [r5]
   17434:	ldr	r6, [r5, #20]
   17438:	ldr	lr, [r5, #16]
   1743c:	str	r1, [sp, #24]
   17440:	ldr	ip, [r5, #12]
   17444:	str	r2, [sp, #20]
   17448:	ldr	r1, [r5, #8]
   1744c:	ldr	r2, [r5, #4]
   17450:	str	r6, [sp, #16]
   17454:	stmib	sp, {r1, ip, lr}
   17458:	mov	r1, #1
   1745c:	str	r2, [sp]
   17460:	mov	r2, r0
   17464:	mov	r0, r4
   17468:	bl	10f68 <__fprintf_chk@plt>
   1746c:	b	17268 <__assert_fail@plt+0x6234>
   17470:	str	r3, [sp]
   17474:	mov	r1, #1
   17478:	mov	r3, r2
   1747c:	ldr	r2, [pc, #76]	; 174d0 <__assert_fail@plt+0x649c>
   17480:	bl	10f68 <__fprintf_chk@plt>
   17484:	b	17170 <__assert_fail@plt+0x613c>
   17488:	mov	r2, #5
   1748c:	ldr	r1, [pc, #64]	; 174d4 <__assert_fail@plt+0x64a0>
   17490:	b	17214 <__assert_fail@plt+0x61e0>
   17494:	andeq	r9, r1, r0, asr r9
   17498:	andeq	r9, r1, r4, ror #18
   1749c:	andeq	r0, r0, r6, ror #15
   174a0:	andeq	r9, r1, ip, lsr ip
   174a4:	andeq	r9, r1, r8, ror #18
   174a8:	andeq	r9, r1, r4, lsl sl
   174ac:	andeq	r9, r1, r4, asr #22
   174b0:	andeq	r9, r1, r8, lsr sl
   174b4:	andeq	r9, r1, r8, asr #20
   174b8:	andeq	r9, r1, r0, ror #20
   174bc:	andeq	r9, r1, ip, ror sl
   174c0:	muleq	r1, ip, sl
   174c4:	andeq	r9, r1, r0, asr #21
   174c8:	andeq	r9, r1, r8, ror #21
   174cc:	andeq	r9, r1, r4, lsl fp
   174d0:	andeq	r9, r1, ip, asr r9
   174d4:	andeq	r9, r1, r8, ror fp
   174d8:	push	{r4, r5, lr}
   174dc:	sub	sp, sp, #12
   174e0:	ldr	r5, [sp, #24]
   174e4:	ldr	ip, [r5]
   174e8:	cmp	ip, #0
   174ec:	beq	17508 <__assert_fail@plt+0x64d4>
   174f0:	mov	lr, r5
   174f4:	mov	ip, #0
   174f8:	ldr	r4, [lr, #4]!
   174fc:	add	ip, ip, #1
   17500:	cmp	r4, #0
   17504:	bne	174f8 <__assert_fail@plt+0x64c4>
   17508:	stm	sp, {r5, ip}
   1750c:	bl	17140 <__assert_fail@plt+0x610c>
   17510:	add	sp, sp, #12
   17514:	pop	{r4, r5, pc}
   17518:	push	{r4, r5, lr}
   1751c:	sub	sp, sp, #76	; 0x4c
   17520:	mov	r5, r0
   17524:	ldr	ip, [sp, #88]	; 0x58
   17528:	ldr	r0, [ip]
   1752c:	cmp	r0, #0
   17530:	str	r0, [sp, #32]
   17534:	beq	17908 <__assert_fail@plt+0x68d4>
   17538:	ldr	r0, [ip, #4]
   1753c:	cmp	r0, #0
   17540:	str	r0, [sp, #36]	; 0x24
   17544:	beq	17910 <__assert_fail@plt+0x68dc>
   17548:	ldr	r0, [ip, #8]
   1754c:	cmp	r0, #0
   17550:	str	r0, [sp, #40]	; 0x28
   17554:	beq	17918 <__assert_fail@plt+0x68e4>
   17558:	ldr	r0, [ip, #12]
   1755c:	cmp	r0, #0
   17560:	str	r0, [sp, #44]	; 0x2c
   17564:	beq	17920 <__assert_fail@plt+0x68ec>
   17568:	ldr	r0, [ip, #16]
   1756c:	cmp	r0, #0
   17570:	str	r0, [sp, #48]	; 0x30
   17574:	beq	17928 <__assert_fail@plt+0x68f4>
   17578:	ldr	r0, [ip, #20]
   1757c:	cmp	r0, #0
   17580:	str	r0, [sp, #52]	; 0x34
   17584:	beq	17930 <__assert_fail@plt+0x68fc>
   17588:	ldr	r0, [ip, #24]
   1758c:	cmp	r0, #0
   17590:	str	r0, [sp, #56]	; 0x38
   17594:	beq	17938 <__assert_fail@plt+0x6904>
   17598:	ldr	r0, [ip, #28]
   1759c:	cmp	r0, #0
   175a0:	str	r0, [sp, #60]	; 0x3c
   175a4:	beq	17940 <__assert_fail@plt+0x690c>
   175a8:	ldr	r0, [ip, #32]
   175ac:	cmp	r0, #0
   175b0:	str	r0, [sp, #64]	; 0x40
   175b4:	beq	17948 <__assert_fail@plt+0x6914>
   175b8:	ldr	r0, [ip, #36]	; 0x24
   175bc:	cmp	r0, #0
   175c0:	movne	r4, #10
   175c4:	moveq	r4, #9
   175c8:	cmp	r1, #0
   175cc:	beq	178e0 <__assert_fail@plt+0x68ac>
   175d0:	stm	sp, {r2, r3}
   175d4:	mov	r0, r5
   175d8:	mov	r3, r1
   175dc:	ldr	r2, [pc, #876]	; 17950 <__assert_fail@plt+0x691c>
   175e0:	mov	r1, #1
   175e4:	bl	10f68 <__fprintf_chk@plt>
   175e8:	mov	r2, #5
   175ec:	ldr	r1, [pc, #864]	; 17954 <__assert_fail@plt+0x6920>
   175f0:	mov	r0, #0
   175f4:	bl	10e3c <dcgettext@plt>
   175f8:	ldr	r3, [pc, #856]	; 17958 <__assert_fail@plt+0x6924>
   175fc:	ldr	r2, [pc, #856]	; 1795c <__assert_fail@plt+0x6928>
   17600:	str	r3, [sp]
   17604:	mov	r1, #1
   17608:	mov	r3, r0
   1760c:	mov	r0, r5
   17610:	bl	10f68 <__fprintf_chk@plt>
   17614:	mov	r1, r5
   17618:	mov	r0, #10
   1761c:	bl	10e30 <fputc_unlocked@plt>
   17620:	mov	r2, #5
   17624:	ldr	r1, [pc, #820]	; 17960 <__assert_fail@plt+0x692c>
   17628:	mov	r0, #0
   1762c:	bl	10e3c <dcgettext@plt>
   17630:	mov	r1, #1
   17634:	ldr	r3, [pc, #808]	; 17964 <__assert_fail@plt+0x6930>
   17638:	mov	r2, r0
   1763c:	mov	r0, r5
   17640:	bl	10f68 <__fprintf_chk@plt>
   17644:	mov	r1, r5
   17648:	mov	r0, #10
   1764c:	bl	10e30 <fputc_unlocked@plt>
   17650:	cmp	r4, #9
   17654:	ldrls	pc, [pc, r4, lsl #2]
   17658:	b	178fc <__assert_fail@plt+0x68c8>
   1765c:	andeq	r7, r1, r0, ror #13
   17660:	andeq	r7, r1, r8, ror #13
   17664:	andeq	r7, r1, r4, lsl r7
   17668:	andeq	r7, r1, r8, asr #14
   1766c:	andeq	r7, r1, r0, lsl #15
   17670:			; <UNDEFINED> instruction: 0x000177bc
   17674:	strdeq	r7, [r1], -r8
   17678:	andeq	r7, r1, ip, lsr r8
   1767c:	andeq	r7, r1, r8, lsl #17
   17680:	andeq	r7, r1, r4, lsl #13
   17684:	ldr	r1, [pc, #732]	; 17968 <__assert_fail@plt+0x6934>
   17688:	mov	r2, #5
   1768c:	mov	r0, #0
   17690:	bl	10e3c <dcgettext@plt>
   17694:	ldr	ip, [sp, #64]	; 0x40
   17698:	ldr	r1, [sp, #60]	; 0x3c
   1769c:	ldr	r2, [sp, #56]	; 0x38
   176a0:	ldr	lr, [sp, #48]	; 0x30
   176a4:	str	ip, [sp, #28]
   176a8:	str	r1, [sp, #24]
   176ac:	ldr	ip, [sp, #44]	; 0x2c
   176b0:	ldr	r1, [sp, #40]	; 0x28
   176b4:	ldr	r4, [sp, #52]	; 0x34
   176b8:	str	r2, [sp, #20]
   176bc:	ldr	r2, [sp, #36]	; 0x24
   176c0:	stmib	sp, {r1, ip, lr}
   176c4:	mov	r1, #1
   176c8:	str	r2, [sp]
   176cc:	ldr	r3, [sp, #32]
   176d0:	str	r4, [sp, #16]
   176d4:	mov	r2, r0
   176d8:	mov	r0, r5
   176dc:	bl	10f68 <__fprintf_chk@plt>
   176e0:	add	sp, sp, #76	; 0x4c
   176e4:	pop	{r4, r5, pc}
   176e8:	mov	r2, #5
   176ec:	ldr	r1, [pc, #632]	; 1796c <__assert_fail@plt+0x6938>
   176f0:	mov	r0, #0
   176f4:	bl	10e3c <dcgettext@plt>
   176f8:	ldr	r3, [sp, #32]
   176fc:	mov	r1, #1
   17700:	mov	r2, r0
   17704:	mov	r0, r5
   17708:	add	sp, sp, #76	; 0x4c
   1770c:	pop	{r4, r5, lr}
   17710:	b	10f68 <__fprintf_chk@plt>
   17714:	mov	r2, #5
   17718:	ldr	r1, [pc, #592]	; 17970 <__assert_fail@plt+0x693c>
   1771c:	mov	r0, #0
   17720:	bl	10e3c <dcgettext@plt>
   17724:	ldr	r2, [sp, #36]	; 0x24
   17728:	ldr	r3, [sp, #32]
   1772c:	str	r2, [sp, #88]	; 0x58
   17730:	mov	r1, #1
   17734:	mov	r2, r0
   17738:	mov	r0, r5
   1773c:	add	sp, sp, #76	; 0x4c
   17740:	pop	{r4, r5, lr}
   17744:	b	10f68 <__fprintf_chk@plt>
   17748:	mov	r2, #5
   1774c:	ldr	r1, [pc, #544]	; 17974 <__assert_fail@plt+0x6940>
   17750:	mov	r0, #0
   17754:	bl	10e3c <dcgettext@plt>
   17758:	ldr	r1, [sp, #40]	; 0x28
   1775c:	ldr	r2, [sp, #36]	; 0x24
   17760:	str	r1, [sp, #4]
   17764:	str	r2, [sp]
   17768:	ldr	r3, [sp, #32]
   1776c:	mov	r1, #1
   17770:	mov	r2, r0
   17774:	mov	r0, r5
   17778:	bl	10f68 <__fprintf_chk@plt>
   1777c:	b	176e0 <__assert_fail@plt+0x66ac>
   17780:	mov	r2, #5
   17784:	ldr	r1, [pc, #492]	; 17978 <__assert_fail@plt+0x6944>
   17788:	mov	r0, #0
   1778c:	bl	10e3c <dcgettext@plt>
   17790:	ldr	r1, [sp, #40]	; 0x28
   17794:	ldr	ip, [sp, #44]	; 0x2c
   17798:	ldr	r2, [sp, #36]	; 0x24
   1779c:	ldr	r3, [sp, #32]
   177a0:	stmib	sp, {r1, ip}
   177a4:	str	r2, [sp]
   177a8:	mov	r1, #1
   177ac:	mov	r2, r0
   177b0:	mov	r0, r5
   177b4:	bl	10f68 <__fprintf_chk@plt>
   177b8:	b	176e0 <__assert_fail@plt+0x66ac>
   177bc:	mov	r2, #5
   177c0:	ldr	r1, [pc, #436]	; 1797c <__assert_fail@plt+0x6948>
   177c4:	mov	r0, #0
   177c8:	bl	10e3c <dcgettext@plt>
   177cc:	add	r1, sp, #40	; 0x28
   177d0:	ldr	r2, [sp, #36]	; 0x24
   177d4:	ldm	r1, {r1, ip, lr}
   177d8:	ldr	r3, [sp, #32]
   177dc:	str	r2, [sp]
   177e0:	stmib	sp, {r1, ip, lr}
   177e4:	mov	r1, #1
   177e8:	mov	r2, r0
   177ec:	mov	r0, r5
   177f0:	bl	10f68 <__fprintf_chk@plt>
   177f4:	b	176e0 <__assert_fail@plt+0x66ac>
   177f8:	mov	r2, #5
   177fc:	ldr	r1, [pc, #380]	; 17980 <__assert_fail@plt+0x694c>
   17800:	mov	r0, #0
   17804:	bl	10e3c <dcgettext@plt>
   17808:	add	r1, sp, #40	; 0x28
   1780c:	ldr	r2, [sp, #36]	; 0x24
   17810:	ldm	r1, {r1, ip, lr}
   17814:	ldr	r4, [sp, #52]	; 0x34
   17818:	str	r2, [sp]
   1781c:	stmib	sp, {r1, ip, lr}
   17820:	mov	r1, #1
   17824:	ldr	r3, [sp, #32]
   17828:	str	r4, [sp, #16]
   1782c:	mov	r2, r0
   17830:	mov	r0, r5
   17834:	bl	10f68 <__fprintf_chk@plt>
   17838:	b	176e0 <__assert_fail@plt+0x66ac>
   1783c:	mov	r2, #5
   17840:	ldr	r1, [pc, #316]	; 17984 <__assert_fail@plt+0x6950>
   17844:	mov	r0, #0
   17848:	bl	10e3c <dcgettext@plt>
   1784c:	add	r1, sp, #40	; 0x28
   17850:	ldr	r2, [sp, #56]	; 0x38
   17854:	ldm	r1, {r1, ip, lr}
   17858:	ldr	r4, [sp, #52]	; 0x34
   1785c:	str	r2, [sp, #20]
   17860:	ldr	r2, [sp, #36]	; 0x24
   17864:	stmib	sp, {r1, ip, lr}
   17868:	mov	r1, #1
   1786c:	str	r2, [sp]
   17870:	ldr	r3, [sp, #32]
   17874:	str	r4, [sp, #16]
   17878:	mov	r2, r0
   1787c:	mov	r0, r5
   17880:	bl	10f68 <__fprintf_chk@plt>
   17884:	b	176e0 <__assert_fail@plt+0x66ac>
   17888:	mov	r2, #5
   1788c:	ldr	r1, [pc, #244]	; 17988 <__assert_fail@plt+0x6954>
   17890:	mov	r0, #0
   17894:	bl	10e3c <dcgettext@plt>
   17898:	ldr	r1, [sp, #60]	; 0x3c
   1789c:	ldr	r2, [sp, #56]	; 0x38
   178a0:	ldr	lr, [sp, #48]	; 0x30
   178a4:	ldr	ip, [sp, #44]	; 0x2c
   178a8:	str	r1, [sp, #24]
   178ac:	ldr	r1, [sp, #40]	; 0x28
   178b0:	ldr	r4, [sp, #52]	; 0x34
   178b4:	str	r2, [sp, #20]
   178b8:	ldr	r2, [sp, #36]	; 0x24
   178bc:	stmib	sp, {r1, ip, lr}
   178c0:	mov	r1, #1
   178c4:	str	r2, [sp]
   178c8:	ldr	r3, [sp, #32]
   178cc:	str	r4, [sp, #16]
   178d0:	mov	r2, r0
   178d4:	mov	r0, r5
   178d8:	bl	10f68 <__fprintf_chk@plt>
   178dc:	b	176e0 <__assert_fail@plt+0x66ac>
   178e0:	str	r3, [sp]
   178e4:	mov	r1, #1
   178e8:	mov	r3, r2
   178ec:	mov	r0, r5
   178f0:	ldr	r2, [pc, #148]	; 1798c <__assert_fail@plt+0x6958>
   178f4:	bl	10f68 <__fprintf_chk@plt>
   178f8:	b	175e8 <__assert_fail@plt+0x65b4>
   178fc:	mov	r2, #5
   17900:	ldr	r1, [pc, #136]	; 17990 <__assert_fail@plt+0x695c>
   17904:	b	1768c <__assert_fail@plt+0x6658>
   17908:	mov	r4, r0
   1790c:	b	175c8 <__assert_fail@plt+0x6594>
   17910:	mov	r4, #1
   17914:	b	175c8 <__assert_fail@plt+0x6594>
   17918:	mov	r4, #2
   1791c:	b	175c8 <__assert_fail@plt+0x6594>
   17920:	mov	r4, #3
   17924:	b	175c8 <__assert_fail@plt+0x6594>
   17928:	mov	r4, #4
   1792c:	b	175c8 <__assert_fail@plt+0x6594>
   17930:	mov	r4, #5
   17934:	b	175c8 <__assert_fail@plt+0x6594>
   17938:	mov	r4, #6
   1793c:	b	175c8 <__assert_fail@plt+0x6594>
   17940:	mov	r4, #7
   17944:	b	175c8 <__assert_fail@plt+0x6594>
   17948:	mov	r4, #8
   1794c:	b	175c8 <__assert_fail@plt+0x6594>
   17950:	andeq	r9, r1, r0, asr r9
   17954:	andeq	r9, r1, r4, ror #18
   17958:	andeq	r0, r0, r6, ror #15
   1795c:	andeq	r9, r1, ip, lsr ip
   17960:	andeq	r9, r1, r8, ror #18
   17964:	andeq	r9, r1, r4, lsl sl
   17968:	andeq	r9, r1, r4, asr #22
   1796c:	andeq	r9, r1, r8, lsr sl
   17970:	andeq	r9, r1, r8, asr #20
   17974:	andeq	r9, r1, r0, ror #20
   17978:	andeq	r9, r1, ip, ror sl
   1797c:	muleq	r1, ip, sl
   17980:	andeq	r9, r1, r0, asr #21
   17984:	andeq	r9, r1, r8, ror #21
   17988:	andeq	r9, r1, r4, lsl fp
   1798c:	andeq	r9, r1, ip, asr r9
   17990:	andeq	r9, r1, r8, ror fp
   17994:	push	{r3}		; (str r3, [sp, #-4]!)
   17998:	push	{lr}		; (str lr, [sp, #-4]!)
   1799c:	sub	sp, sp, #56	; 0x38
   179a0:	add	r3, sp, #64	; 0x40
   179a4:	ldr	ip, [sp, #64]	; 0x40
   179a8:	str	r3, [sp, #12]
   179ac:	cmp	ip, #0
   179b0:	str	ip, [sp, #16]
   179b4:	beq	17a4c <__assert_fail@plt+0x6a18>
   179b8:	ldr	ip, [sp, #68]	; 0x44
   179bc:	cmp	ip, #0
   179c0:	str	ip, [sp, #20]
   179c4:	beq	17a6c <__assert_fail@plt+0x6a38>
   179c8:	ldr	ip, [sp, #72]	; 0x48
   179cc:	cmp	ip, #0
   179d0:	str	ip, [sp, #24]
   179d4:	beq	17a74 <__assert_fail@plt+0x6a40>
   179d8:	ldr	ip, [sp, #76]	; 0x4c
   179dc:	cmp	ip, #0
   179e0:	str	ip, [sp, #28]
   179e4:	beq	17a7c <__assert_fail@plt+0x6a48>
   179e8:	ldr	ip, [sp, #80]	; 0x50
   179ec:	cmp	ip, #0
   179f0:	str	ip, [sp, #32]
   179f4:	beq	17a84 <__assert_fail@plt+0x6a50>
   179f8:	ldr	ip, [sp, #84]	; 0x54
   179fc:	cmp	ip, #0
   17a00:	str	ip, [sp, #36]	; 0x24
   17a04:	beq	17a8c <__assert_fail@plt+0x6a58>
   17a08:	ldr	ip, [sp, #88]	; 0x58
   17a0c:	cmp	ip, #0
   17a10:	str	ip, [sp, #40]	; 0x28
   17a14:	beq	17a94 <__assert_fail@plt+0x6a60>
   17a18:	ldr	ip, [sp, #92]	; 0x5c
   17a1c:	cmp	ip, #0
   17a20:	str	ip, [sp, #44]	; 0x2c
   17a24:	beq	17a9c <__assert_fail@plt+0x6a68>
   17a28:	ldr	ip, [sp, #96]	; 0x60
   17a2c:	cmp	ip, #0
   17a30:	str	ip, [sp, #48]	; 0x30
   17a34:	beq	17aa4 <__assert_fail@plt+0x6a70>
   17a38:	ldr	ip, [sp, #100]	; 0x64
   17a3c:	cmp	ip, #0
   17a40:	str	ip, [sp, #52]	; 0x34
   17a44:	movne	ip, #10
   17a48:	moveq	ip, #9
   17a4c:	add	r3, sp, #16
   17a50:	stm	sp, {r3, ip}
   17a54:	ldr	r3, [sp, #60]	; 0x3c
   17a58:	bl	17140 <__assert_fail@plt+0x610c>
   17a5c:	add	sp, sp, #56	; 0x38
   17a60:	pop	{lr}		; (ldr lr, [sp], #4)
   17a64:	add	sp, sp, #4
   17a68:	bx	lr
   17a6c:	mov	ip, #1
   17a70:	b	17a4c <__assert_fail@plt+0x6a18>
   17a74:	mov	ip, #2
   17a78:	b	17a4c <__assert_fail@plt+0x6a18>
   17a7c:	mov	ip, #3
   17a80:	b	17a4c <__assert_fail@plt+0x6a18>
   17a84:	mov	ip, #4
   17a88:	b	17a4c <__assert_fail@plt+0x6a18>
   17a8c:	mov	ip, #5
   17a90:	b	17a4c <__assert_fail@plt+0x6a18>
   17a94:	mov	ip, #6
   17a98:	b	17a4c <__assert_fail@plt+0x6a18>
   17a9c:	mov	ip, #7
   17aa0:	b	17a4c <__assert_fail@plt+0x6a18>
   17aa4:	mov	ip, #8
   17aa8:	b	17a4c <__assert_fail@plt+0x6a18>
   17aac:	ldr	r3, [pc, #116]	; 17b28 <__assert_fail@plt+0x6af4>
   17ab0:	push	{r4, lr}
   17ab4:	mov	r0, #10
   17ab8:	ldr	r1, [r3]
   17abc:	bl	10e30 <fputc_unlocked@plt>
   17ac0:	mov	r2, #5
   17ac4:	ldr	r1, [pc, #96]	; 17b2c <__assert_fail@plt+0x6af8>
   17ac8:	mov	r0, #0
   17acc:	bl	10e3c <dcgettext@plt>
   17ad0:	ldr	r2, [pc, #88]	; 17b30 <__assert_fail@plt+0x6afc>
   17ad4:	mov	r1, r0
   17ad8:	mov	r0, #1
   17adc:	bl	10f50 <__printf_chk@plt>
   17ae0:	mov	r2, #5
   17ae4:	ldr	r1, [pc, #72]	; 17b34 <__assert_fail@plt+0x6b00>
   17ae8:	mov	r0, #0
   17aec:	bl	10e3c <dcgettext@plt>
   17af0:	ldr	r3, [pc, #64]	; 17b38 <__assert_fail@plt+0x6b04>
   17af4:	ldr	r2, [pc, #64]	; 17b3c <__assert_fail@plt+0x6b08>
   17af8:	mov	r1, r0
   17afc:	mov	r0, #1
   17b00:	bl	10f50 <__printf_chk@plt>
   17b04:	mov	r2, #5
   17b08:	ldr	r1, [pc, #48]	; 17b40 <__assert_fail@plt+0x6b0c>
   17b0c:	mov	r0, #0
   17b10:	bl	10e3c <dcgettext@plt>
   17b14:	ldr	r2, [pc, #40]	; 17b44 <__assert_fail@plt+0x6b10>
   17b18:	pop	{r4, lr}
   17b1c:	mov	r1, r0
   17b20:	mov	r0, #1
   17b24:	b	10f50 <__printf_chk@plt>
   17b28:	andeq	sl, r2, ip, ror #2
   17b2c:			; <UNDEFINED> instruction: 0x00019bb4
   17b30:	andeq	r9, r1, r8, asr #23
   17b34:	andeq	r9, r1, r0, ror #23
   17b38:	andeq	r9, r1, r8, ror #6
   17b3c:	muleq	r1, r0, r3
   17b40:	strdeq	r9, [r1], -r4
   17b44:	andeq	r9, r1, ip, lsl ip
   17b48:	push	{r4, r5, r6, lr}
   17b4c:	mov	r6, r0
   17b50:	mov	r5, r1
   17b54:	mov	r4, r2
   17b58:	bl	18564 <__assert_fail@plt+0x7530>
   17b5c:	cmp	r0, #0
   17b60:	popne	{r4, r5, r6, pc}
   17b64:	cmp	r6, #0
   17b68:	beq	17b78 <__assert_fail@plt+0x6b44>
   17b6c:	cmp	r5, #0
   17b70:	cmpne	r4, #0
   17b74:	popeq	{r4, r5, r6, pc}
   17b78:	bl	181c4 <__assert_fail@plt+0x7190>
   17b7c:	push	{r4, lr}
   17b80:	bl	1824c <__assert_fail@plt+0x7218>
   17b84:	cmp	r0, #0
   17b88:	popne	{r4, pc}
   17b8c:	bl	181c4 <__assert_fail@plt+0x7190>
   17b90:	push	{r4, lr}
   17b94:	bl	1824c <__assert_fail@plt+0x7218>
   17b98:	cmp	r0, #0
   17b9c:	popne	{r4, pc}
   17ba0:	bl	181c4 <__assert_fail@plt+0x7190>
   17ba4:	push	{r4, lr}
   17ba8:	bl	1824c <__assert_fail@plt+0x7218>
   17bac:	cmp	r0, #0
   17bb0:	popne	{r4, pc}
   17bb4:	bl	181c4 <__assert_fail@plt+0x7190>
   17bb8:	push	{r4, r5, r6, lr}
   17bbc:	mov	r5, r0
   17bc0:	mov	r4, r1
   17bc4:	bl	18278 <__assert_fail@plt+0x7244>
   17bc8:	cmp	r0, #0
   17bcc:	popne	{r4, r5, r6, pc}
   17bd0:	adds	r4, r4, #0
   17bd4:	movne	r4, #1
   17bd8:	cmp	r5, #0
   17bdc:	orreq	r4, r4, #1
   17be0:	cmp	r4, #0
   17be4:	popeq	{r4, r5, r6, pc}
   17be8:	bl	181c4 <__assert_fail@plt+0x7190>
   17bec:	push	{r4, lr}
   17bf0:	cmp	r1, #0
   17bf4:	orreq	r1, r1, #1
   17bf8:	bl	18278 <__assert_fail@plt+0x7244>
   17bfc:	cmp	r0, #0
   17c00:	popne	{r4, pc}
   17c04:	bl	181c4 <__assert_fail@plt+0x7190>
   17c08:	push	{r4, r5, r6, lr}
   17c0c:	mov	r6, r0
   17c10:	mov	r5, r1
   17c14:	mov	r4, r2
   17c18:	bl	18564 <__assert_fail@plt+0x7530>
   17c1c:	cmp	r0, #0
   17c20:	popne	{r4, r5, r6, pc}
   17c24:	cmp	r6, #0
   17c28:	beq	17c38 <__assert_fail@plt+0x6c04>
   17c2c:	cmp	r5, #0
   17c30:	cmpne	r4, #0
   17c34:	popeq	{r4, r5, r6, pc}
   17c38:	bl	181c4 <__assert_fail@plt+0x7190>
   17c3c:	cmp	r2, #0
   17c40:	cmpne	r1, #0
   17c44:	moveq	r2, #1
   17c48:	moveq	r1, r2
   17c4c:	push	{r4, lr}
   17c50:	bl	18564 <__assert_fail@plt+0x7530>
   17c54:	cmp	r0, #0
   17c58:	popne	{r4, pc}
   17c5c:	bl	181c4 <__assert_fail@plt+0x7190>
   17c60:	push	{r4, lr}
   17c64:	mov	r2, r1
   17c68:	mov	r1, r0
   17c6c:	mov	r0, #0
   17c70:	bl	18564 <__assert_fail@plt+0x7530>
   17c74:	cmp	r0, #0
   17c78:	popne	{r4, pc}
   17c7c:	bl	181c4 <__assert_fail@plt+0x7190>
   17c80:	cmp	r1, #0
   17c84:	cmpne	r0, #0
   17c88:	moveq	r2, #1
   17c8c:	movne	r2, r1
   17c90:	moveq	r1, r2
   17c94:	movne	r1, r0
   17c98:	push	{r4, lr}
   17c9c:	mov	r0, #0
   17ca0:	bl	18564 <__assert_fail@plt+0x7530>
   17ca4:	cmp	r0, #0
   17ca8:	popne	{r4, pc}
   17cac:	bl	181c4 <__assert_fail@plt+0x7190>
   17cb0:	cmp	r0, #0
   17cb4:	push	{r4, r5, r6, lr}
   17cb8:	mov	r5, r1
   17cbc:	ldr	r4, [r1]
   17cc0:	beq	17cfc <__assert_fail@plt+0x6cc8>
   17cc4:	lsr	r2, r4, #1
   17cc8:	add	r3, r2, #1
   17ccc:	mvn	r3, r3
   17cd0:	cmp	r4, r3
   17cd4:	bhi	17d18 <__assert_fail@plt+0x6ce4>
   17cd8:	add	r4, r4, #1
   17cdc:	add	r4, r4, r2
   17ce0:	mov	r1, r4
   17ce4:	mov	r2, #1
   17ce8:	bl	18564 <__assert_fail@plt+0x7530>
   17cec:	cmp	r0, #0
   17cf0:	beq	17d1c <__assert_fail@plt+0x6ce8>
   17cf4:	str	r4, [r5]
   17cf8:	pop	{r4, r5, r6, pc}
   17cfc:	cmp	r4, #0
   17d00:	moveq	r4, #64	; 0x40
   17d04:	mov	r1, r4
   17d08:	mov	r2, #1
   17d0c:	bl	18564 <__assert_fail@plt+0x7530>
   17d10:	cmp	r0, #0
   17d14:	bne	17cf4 <__assert_fail@plt+0x6cc0>
   17d18:	bl	181c4 <__assert_fail@plt+0x7190>
   17d1c:	cmp	r4, #0
   17d20:	bne	17d18 <__assert_fail@plt+0x6ce4>
   17d24:	str	r4, [r5]
   17d28:	pop	{r4, r5, r6, pc}
   17d2c:	cmp	r0, #0
   17d30:	push	{r4, r5, r6, lr}
   17d34:	mov	r5, r1
   17d38:	ldr	r4, [r1]
   17d3c:	mov	r6, r2
   17d40:	beq	17d84 <__assert_fail@plt+0x6d50>
   17d44:	lsr	r1, r4, #1
   17d48:	add	r3, r1, #1
   17d4c:	mvn	r3, r3
   17d50:	cmp	r4, r3
   17d54:	bhi	17dbc <__assert_fail@plt+0x6d88>
   17d58:	add	r4, r4, #1
   17d5c:	add	r4, r4, r1
   17d60:	mov	r1, r4
   17d64:	bl	18564 <__assert_fail@plt+0x7530>
   17d68:	cmp	r0, #0
   17d6c:	bne	17d7c <__assert_fail@plt+0x6d48>
   17d70:	cmp	r4, #0
   17d74:	cmpne	r6, #0
   17d78:	bne	17dbc <__assert_fail@plt+0x6d88>
   17d7c:	str	r4, [r5]
   17d80:	pop	{r4, r5, r6, pc}
   17d84:	cmp	r4, #0
   17d88:	bne	17da4 <__assert_fail@plt+0x6d70>
   17d8c:	mov	r1, r2
   17d90:	mov	r0, #64	; 0x40
   17d94:	bl	186e0 <__assert_fail@plt+0x76ac>
   17d98:	cmp	r0, #0
   17d9c:	movne	r4, r0
   17da0:	addeq	r4, r0, #1
   17da4:	mov	r2, r6
   17da8:	mov	r1, r4
   17dac:	mov	r0, #0
   17db0:	bl	18564 <__assert_fail@plt+0x7530>
   17db4:	cmp	r0, #0
   17db8:	bne	17d7c <__assert_fail@plt+0x6d48>
   17dbc:	bl	181c4 <__assert_fail@plt+0x7190>
   17dc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17dc4:	sub	sp, sp, #12
   17dc8:	ldr	r6, [r1]
   17dcc:	mov	r8, r1
   17dd0:	mov	r9, r0
   17dd4:	asrs	r4, r6, #1
   17dd8:	mov	sl, r2
   17ddc:	mov	fp, r3
   17de0:	ldr	r7, [sp, #48]	; 0x30
   17de4:	bmi	17f60 <__assert_fail@plt+0x6f2c>
   17de8:	mvn	r1, #-2147483648	; 0x80000000
   17dec:	sub	r1, r1, r4
   17df0:	cmp	r6, r1
   17df4:	movle	r1, #0
   17df8:	movgt	r1, #1
   17dfc:	mvn	r3, fp
   17e00:	cmp	r1, #0
   17e04:	addeq	r4, r4, r6
   17e08:	mvnne	r4, #-2147483648	; 0x80000000
   17e0c:	lsr	r3, r3, #31
   17e10:	cmp	fp, r4
   17e14:	movge	r2, #0
   17e18:	andlt	r2, r3, #1
   17e1c:	cmp	r2, #0
   17e20:	beq	17f10 <__assert_fail@plt+0x6edc>
   17e24:	cmp	r7, #0
   17e28:	blt	17ff8 <__assert_fail@plt+0x6fc4>
   17e2c:	bne	17ff0 <__assert_fail@plt+0x6fbc>
   17e30:	mov	r5, #64	; 0x40
   17e34:	mov	r1, r7
   17e38:	mov	r0, r5
   17e3c:	str	r3, [sp, #4]
   17e40:	bl	188ec <__assert_fail@plt+0x78b8>
   17e44:	mov	r1, r7
   17e48:	mov	r4, r0
   17e4c:	mov	r0, r5
   17e50:	bl	18b0c <__assert_fail@plt+0x7ad8>
   17e54:	ldr	r3, [sp, #4]
   17e58:	sub	r5, r5, r1
   17e5c:	cmp	r9, #0
   17e60:	sub	r2, r4, r6
   17e64:	streq	r9, [r8]
   17e68:	cmp	r2, sl
   17e6c:	bge	17ef0 <__assert_fail@plt+0x6ebc>
   17e70:	cmp	sl, #0
   17e74:	blt	17f90 <__assert_fail@plt+0x6f5c>
   17e78:	cmp	r6, #0
   17e7c:	blt	17e9c <__assert_fail@plt+0x6e68>
   17e80:	mvn	r2, #-2147483648	; 0x80000000
   17e84:	sub	r2, r2, sl
   17e88:	cmp	r6, r2
   17e8c:	movle	r2, #0
   17e90:	movgt	r2, #1
   17e94:	cmp	r2, #0
   17e98:	bne	17f8c <__assert_fail@plt+0x6f58>
   17e9c:	add	r6, r6, sl
   17ea0:	cmp	fp, r6
   17ea4:	movge	r3, #0
   17ea8:	andlt	r3, r3, #1
   17eac:	cmp	r3, #0
   17eb0:	mov	r4, r6
   17eb4:	bne	17f8c <__assert_fail@plt+0x6f58>
   17eb8:	cmp	r7, #0
   17ebc:	blt	17fa4 <__assert_fail@plt+0x6f70>
   17ec0:	beq	17eec <__assert_fail@plt+0x6eb8>
   17ec4:	cmp	r6, #0
   17ec8:	blt	18048 <__assert_fail@plt+0x7014>
   17ecc:	mov	r1, r7
   17ed0:	mvn	r0, #-2147483648	; 0x80000000
   17ed4:	bl	188ec <__assert_fail@plt+0x78b8>
   17ed8:	cmp	r6, r0
   17edc:	movle	r0, #0
   17ee0:	movgt	r0, #1
   17ee4:	cmp	r0, #0
   17ee8:	bne	17f8c <__assert_fail@plt+0x6f58>
   17eec:	mul	r5, r6, r7
   17ef0:	mov	r1, r5
   17ef4:	mov	r0, r9
   17ef8:	bl	18278 <__assert_fail@plt+0x7244>
   17efc:	cmp	r0, #0
   17f00:	beq	17f74 <__assert_fail@plt+0x6f40>
   17f04:	str	r4, [r8]
   17f08:	add	sp, sp, #12
   17f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f10:	cmp	r7, #0
   17f14:	blt	17fd0 <__assert_fail@plt+0x6f9c>
   17f18:	beq	17e30 <__assert_fail@plt+0x6dfc>
   17f1c:	cmp	r4, #0
   17f20:	blt	18000 <__assert_fail@plt+0x6fcc>
   17f24:	mov	r1, r7
   17f28:	mvn	r0, #-2147483648	; 0x80000000
   17f2c:	str	r3, [sp, #4]
   17f30:	bl	188ec <__assert_fail@plt+0x78b8>
   17f34:	ldr	r3, [sp, #4]
   17f38:	cmp	r0, r4
   17f3c:	movge	r0, #0
   17f40:	movlt	r0, #1
   17f44:	cmp	r0, #0
   17f48:	mvnne	r5, #-2147483648	; 0x80000000
   17f4c:	bne	17e34 <__assert_fail@plt+0x6e00>
   17f50:	mul	r5, r7, r4
   17f54:	cmp	r5, #63	; 0x3f
   17f58:	bgt	17e5c <__assert_fail@plt+0x6e28>
   17f5c:	b	17e30 <__assert_fail@plt+0x6dfc>
   17f60:	rsb	r1, r4, #-2147483648	; 0x80000000
   17f64:	cmp	r6, r1
   17f68:	movge	r1, #0
   17f6c:	movlt	r1, #1
   17f70:	b	17dfc <__assert_fail@plt+0x6dc8>
   17f74:	adds	r5, r5, #0
   17f78:	movne	r5, #1
   17f7c:	cmp	r9, #0
   17f80:	orreq	r5, r5, #1
   17f84:	cmp	r5, #0
   17f88:	beq	17f04 <__assert_fail@plt+0x6ed0>
   17f8c:	bl	181c4 <__assert_fail@plt+0x7190>
   17f90:	rsb	r2, sl, #-2147483648	; 0x80000000
   17f94:	cmp	r6, r2
   17f98:	movge	r2, #0
   17f9c:	movlt	r2, #1
   17fa0:	b	17e94 <__assert_fail@plt+0x6e60>
   17fa4:	cmp	r6, #0
   17fa8:	blt	1802c <__assert_fail@plt+0x6ff8>
   17fac:	cmn	r7, #1
   17fb0:	beq	17eec <__assert_fail@plt+0x6eb8>
   17fb4:	mov	r1, r7
   17fb8:	mov	r0, #-2147483648	; 0x80000000
   17fbc:	bl	188ec <__assert_fail@plt+0x78b8>
   17fc0:	cmp	r6, r0
   17fc4:	movle	r0, #0
   17fc8:	movgt	r0, #1
   17fcc:	b	17ee4 <__assert_fail@plt+0x6eb0>
   17fd0:	cmp	r4, #0
   17fd4:	blt	1806c <__assert_fail@plt+0x7038>
   17fd8:	cmn	r7, #1
   17fdc:	beq	17f50 <__assert_fail@plt+0x6f1c>
   17fe0:	str	r3, [sp, #4]
   17fe4:	mov	r1, r7
   17fe8:	mov	r0, #-2147483648	; 0x80000000
   17fec:	b	17f30 <__assert_fail@plt+0x6efc>
   17ff0:	mov	r4, fp
   17ff4:	b	17f24 <__assert_fail@plt+0x6ef0>
   17ff8:	mov	r4, fp
   17ffc:	b	17fd8 <__assert_fail@plt+0x6fa4>
   18000:	cmn	r4, #1
   18004:	beq	17f50 <__assert_fail@plt+0x6f1c>
   18008:	mov	r1, r4
   1800c:	mov	r0, #-2147483648	; 0x80000000
   18010:	str	r3, [sp, #4]
   18014:	bl	188ec <__assert_fail@plt+0x78b8>
   18018:	ldr	r3, [sp, #4]
   1801c:	cmp	r7, r0
   18020:	movle	r0, #0
   18024:	movgt	r0, #1
   18028:	b	17f44 <__assert_fail@plt+0x6f10>
   1802c:	mov	r1, r7
   18030:	mvn	r0, #-2147483648	; 0x80000000
   18034:	bl	188ec <__assert_fail@plt+0x78b8>
   18038:	cmp	r6, r0
   1803c:	movge	r0, #0
   18040:	movlt	r0, #1
   18044:	b	17ee4 <__assert_fail@plt+0x6eb0>
   18048:	cmn	r6, #1
   1804c:	beq	17eec <__assert_fail@plt+0x6eb8>
   18050:	mov	r1, r6
   18054:	mov	r0, #-2147483648	; 0x80000000
   18058:	bl	188ec <__assert_fail@plt+0x78b8>
   1805c:	cmp	r7, r0
   18060:	movle	r0, #0
   18064:	movgt	r0, #1
   18068:	b	17ee4 <__assert_fail@plt+0x6eb0>
   1806c:	mov	r1, r7
   18070:	mvn	r0, #-2147483648	; 0x80000000
   18074:	str	r3, [sp, #4]
   18078:	bl	188ec <__assert_fail@plt+0x78b8>
   1807c:	ldr	r3, [sp, #4]
   18080:	cmp	r0, r4
   18084:	movle	r0, #0
   18088:	movgt	r0, #1
   1808c:	b	17f44 <__assert_fail@plt+0x6f10>
   18090:	push	{r4, lr}
   18094:	mov	r1, #1
   18098:	bl	18204 <__assert_fail@plt+0x71d0>
   1809c:	cmp	r0, #0
   180a0:	popne	{r4, pc}
   180a4:	bl	181c4 <__assert_fail@plt+0x7190>
   180a8:	push	{r4, lr}
   180ac:	mov	r1, #1
   180b0:	bl	18204 <__assert_fail@plt+0x71d0>
   180b4:	cmp	r0, #0
   180b8:	popne	{r4, pc}
   180bc:	bl	181c4 <__assert_fail@plt+0x7190>
   180c0:	push	{r4, lr}
   180c4:	bl	18204 <__assert_fail@plt+0x71d0>
   180c8:	cmp	r0, #0
   180cc:	popne	{r4, pc}
   180d0:	bl	181c4 <__assert_fail@plt+0x7190>
   180d4:	push	{r4, lr}
   180d8:	bl	18204 <__assert_fail@plt+0x71d0>
   180dc:	cmp	r0, #0
   180e0:	popne	{r4, pc}
   180e4:	bl	181c4 <__assert_fail@plt+0x7190>
   180e8:	push	{r4, r5, r6, lr}
   180ec:	mov	r6, r0
   180f0:	mov	r0, r1
   180f4:	mov	r4, r1
   180f8:	bl	1824c <__assert_fail@plt+0x7218>
   180fc:	subs	r5, r0, #0
   18100:	beq	18118 <__assert_fail@plt+0x70e4>
   18104:	mov	r2, r4
   18108:	mov	r1, r6
   1810c:	bl	10e00 <memcpy@plt>
   18110:	mov	r0, r5
   18114:	pop	{r4, r5, r6, pc}
   18118:	bl	181c4 <__assert_fail@plt+0x7190>
   1811c:	push	{r4, r5, r6, lr}
   18120:	mov	r6, r0
   18124:	mov	r0, r1
   18128:	mov	r4, r1
   1812c:	bl	1824c <__assert_fail@plt+0x7218>
   18130:	subs	r5, r0, #0
   18134:	beq	1814c <__assert_fail@plt+0x7118>
   18138:	mov	r2, r4
   1813c:	mov	r1, r6
   18140:	bl	10e00 <memcpy@plt>
   18144:	mov	r0, r5
   18148:	pop	{r4, r5, r6, pc}
   1814c:	bl	181c4 <__assert_fail@plt+0x7190>
   18150:	push	{r4, r5, r6, lr}
   18154:	mov	r6, r0
   18158:	add	r0, r1, #1
   1815c:	mov	r4, r1
   18160:	bl	1824c <__assert_fail@plt+0x7218>
   18164:	subs	r5, r0, #0
   18168:	beq	18188 <__assert_fail@plt+0x7154>
   1816c:	mov	r3, #0
   18170:	mov	r1, r6
   18174:	strb	r3, [r5, r4]
   18178:	mov	r2, r4
   1817c:	bl	10e00 <memcpy@plt>
   18180:	mov	r0, r5
   18184:	pop	{r4, r5, r6, pc}
   18188:	bl	181c4 <__assert_fail@plt+0x7190>
   1818c:	push	{r4, r5, r6, lr}
   18190:	mov	r6, r0
   18194:	bl	10f08 <strlen@plt>
   18198:	add	r4, r0, #1
   1819c:	mov	r0, r4
   181a0:	bl	1824c <__assert_fail@plt+0x7218>
   181a4:	subs	r5, r0, #0
   181a8:	beq	181c0 <__assert_fail@plt+0x718c>
   181ac:	mov	r2, r4
   181b0:	mov	r1, r6
   181b4:	bl	10e00 <memcpy@plt>
   181b8:	mov	r0, r5
   181bc:	pop	{r4, r5, r6, pc}
   181c0:	bl	181c4 <__assert_fail@plt+0x7190>
   181c4:	ldr	r3, [pc, #44]	; 181f8 <__assert_fail@plt+0x71c4>
   181c8:	push	{r4, lr}
   181cc:	mov	r2, #5
   181d0:	ldr	r1, [pc, #36]	; 181fc <__assert_fail@plt+0x71c8>
   181d4:	mov	r0, #0
   181d8:	ldr	r4, [r3]
   181dc:	bl	10e3c <dcgettext@plt>
   181e0:	ldr	r2, [pc, #24]	; 18200 <__assert_fail@plt+0x71cc>
   181e4:	mov	r1, #0
   181e8:	mov	r3, r0
   181ec:	mov	r0, r4
   181f0:	bl	10ea8 <error@plt>
   181f4:	bl	1101c <abort@plt>
   181f8:	andeq	sl, r2, r8, lsl #2
   181fc:	andeq	r9, r1, ip, ror #24
   18200:	andeq	r9, r1, r4, lsr r8
   18204:	cmp	r1, #0
   18208:	cmpne	r0, #0
   1820c:	moveq	r1, #1
   18210:	moveq	r0, r1
   18214:	umull	r2, r3, r0, r1
   18218:	adds	r3, r3, #0
   1821c:	movne	r3, #1
   18220:	cmp	r2, #0
   18224:	blt	18234 <__assert_fail@plt+0x7200>
   18228:	cmp	r3, #0
   1822c:	bne	18234 <__assert_fail@plt+0x7200>
   18230:	b	10d88 <calloc@plt>
   18234:	push	{r4, lr}
   18238:	bl	10f20 <__errno_location@plt>
   1823c:	mov	r3, #12
   18240:	str	r3, [r0]
   18244:	mov	r0, #0
   18248:	pop	{r4, pc}
   1824c:	cmp	r0, #0
   18250:	moveq	r0, #1
   18254:	cmp	r0, #0
   18258:	blt	18260 <__assert_fail@plt+0x722c>
   1825c:	b	10eb4 <malloc@plt>
   18260:	push	{r4, lr}
   18264:	bl	10f20 <__errno_location@plt>
   18268:	mov	r3, #12
   1826c:	str	r3, [r0]
   18270:	mov	r0, #0
   18274:	pop	{r4, pc}
   18278:	cmp	r0, #0
   1827c:	beq	182a0 <__assert_fail@plt+0x726c>
   18280:	cmp	r1, #0
   18284:	push	{lr}		; (str lr, [sp, #-4]!)
   18288:	sub	sp, sp, #12
   1828c:	beq	182a8 <__assert_fail@plt+0x7274>
   18290:	blt	182c0 <__assert_fail@plt+0x728c>
   18294:	add	sp, sp, #12
   18298:	pop	{lr}		; (ldr lr, [sp], #4)
   1829c:	b	10e48 <realloc@plt>
   182a0:	mov	r0, r1
   182a4:	b	1824c <__assert_fail@plt+0x7218>
   182a8:	str	r1, [sp, #4]
   182ac:	bl	12ba8 <__assert_fail@plt+0x1b74>
   182b0:	ldr	r3, [sp, #4]
   182b4:	mov	r0, r3
   182b8:	add	sp, sp, #12
   182bc:	pop	{pc}		; (ldr pc, [sp], #4)
   182c0:	bl	10f20 <__errno_location@plt>
   182c4:	mov	r2, #12
   182c8:	mov	r3, #0
   182cc:	str	r2, [r0]
   182d0:	b	182b4 <__assert_fail@plt+0x7280>
   182d4:	push	{r4, r5, r6, lr}
   182d8:	mov	r4, r0
   182dc:	bl	10e90 <__fpending@plt>
   182e0:	ldr	r5, [r4]
   182e4:	and	r5, r5, #32
   182e8:	mov	r6, r0
   182ec:	mov	r0, r4
   182f0:	bl	12aa8 <__assert_fail@plt+0x1a74>
   182f4:	cmp	r5, #0
   182f8:	mov	r4, r0
   182fc:	bne	1831c <__assert_fail@plt+0x72e8>
   18300:	cmp	r0, #0
   18304:	beq	18314 <__assert_fail@plt+0x72e0>
   18308:	cmp	r6, #0
   1830c:	beq	18338 <__assert_fail@plt+0x7304>
   18310:	mvn	r4, #0
   18314:	mov	r0, r4
   18318:	pop	{r4, r5, r6, pc}
   1831c:	cmp	r0, #0
   18320:	bne	18310 <__assert_fail@plt+0x72dc>
   18324:	bl	10f20 <__errno_location@plt>
   18328:	str	r4, [r0]
   1832c:	mvn	r4, #0
   18330:	mov	r0, r4
   18334:	pop	{r4, r5, r6, pc}
   18338:	bl	10f20 <__errno_location@plt>
   1833c:	ldr	r4, [r0]
   18340:	subs	r4, r4, #9
   18344:	mvnne	r4, #0
   18348:	mov	r0, r4
   1834c:	pop	{r4, r5, r6, pc}
   18350:	ldr	r2, [r0, #20]
   18354:	ldr	r3, [r0, #16]
   18358:	cmp	r2, r3
   1835c:	bhi	18378 <__assert_fail@plt+0x7344>
   18360:	ldr	r3, [r0, #4]
   18364:	ldr	r0, [r0, #8]
   18368:	subs	r0, r0, r3
   1836c:	strne	r0, [r1]
   18370:	movne	r0, r3
   18374:	bx	lr
   18378:	mov	r0, #0
   1837c:	bx	lr
   18380:	push	{r4, r5, r6, r7, r8, r9, lr}
   18384:	subs	r4, r1, #0
   18388:	sub	sp, sp, #4096	; 0x1000
   1838c:	sub	sp, sp, #12
   18390:	beq	1842c <__assert_fail@plt+0x73f8>
   18394:	mov	r6, r0
   18398:	bl	185b0 <__assert_fail@plt+0x757c>
   1839c:	subs	r5, r0, #0
   183a0:	beq	1843c <__assert_fail@plt+0x7408>
   183a4:	add	r7, sp, #8
   183a8:	b	183bc <__assert_fail@plt+0x7388>
   183ac:	subs	r4, r4, #1
   183b0:	beq	184b4 <__assert_fail@plt+0x7480>
   183b4:	subs	r5, r5, #1
   183b8:	beq	1843c <__assert_fail@plt+0x7408>
   183bc:	mov	r1, r7
   183c0:	mov	r0, r6
   183c4:	bl	18350 <__assert_fail@plt+0x731c>
   183c8:	cmp	r0, #0
   183cc:	mov	r0, r6
   183d0:	beq	18404 <__assert_fail@plt+0x73d0>
   183d4:	ldr	r3, [r7]
   183d8:	cmp	r3, #0
   183dc:	beq	18404 <__assert_fail@plt+0x73d0>
   183e0:	cmp	r3, r4
   183e4:	ldr	r2, [r6, #4]
   183e8:	movcs	r3, r4
   183ec:	add	r2, r2, r3
   183f0:	subs	r4, r4, r3
   183f4:	str	r2, [r6, #4]
   183f8:	beq	184b4 <__assert_fail@plt+0x7480>
   183fc:	subs	r5, r5, r3
   18400:	beq	1843c <__assert_fail@plt+0x7408>
   18404:	bl	10f44 <fgetc@plt>
   18408:	cmn	r0, #1
   1840c:	bne	183ac <__assert_fail@plt+0x7378>
   18410:	mov	r0, r6
   18414:	bl	10de8 <ferror@plt>
   18418:	adds	r0, r0, #0
   1841c:	mvnne	r0, #0
   18420:	add	sp, sp, #4096	; 0x1000
   18424:	add	sp, sp, #12
   18428:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1842c:	mov	r0, r4
   18430:	add	sp, sp, #4096	; 0x1000
   18434:	add	sp, sp, #12
   18438:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1843c:	mov	r0, r6
   18440:	bl	10f5c <fileno@plt>
   18444:	cmp	r0, #0
   18448:	blt	1846c <__assert_fail@plt+0x7438>
   1844c:	mov	r5, #1
   18450:	mov	r3, #0
   18454:	str	r5, [sp]
   18458:	mov	r2, #0
   1845c:	bl	10e78 <lseek64@plt>
   18460:	cmp	r0, #0
   18464:	sbcs	r3, r1, #0
   18468:	bge	184c4 <__assert_fail@plt+0x7490>
   1846c:	add	r7, sp, #8
   18470:	mov	r9, #1
   18474:	mov	r8, #4096	; 0x1000
   18478:	b	18484 <__assert_fail@plt+0x7450>
   1847c:	subs	r4, r4, r5
   18480:	beq	1842c <__assert_fail@plt+0x73f8>
   18484:	cmp	r4, #4096	; 0x1000
   18488:	movcc	r5, r4
   1848c:	movcs	r5, #4096	; 0x1000
   18490:	str	r6, [sp]
   18494:	mov	r3, r5
   18498:	mov	r2, r9
   1849c:	mov	r1, r8
   184a0:	mov	r0, r7
   184a4:	bl	10f98 <__fread_chk@plt>
   184a8:	cmp	r5, r0
   184ac:	bls	1847c <__assert_fail@plt+0x7448>
   184b0:	b	18410 <__assert_fail@plt+0x73dc>
   184b4:	mov	r0, #0
   184b8:	add	sp, sp, #4096	; 0x1000
   184bc:	add	sp, sp, #12
   184c0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   184c4:	str	r5, [sp]
   184c8:	mov	r2, r4
   184cc:	mov	r0, r6
   184d0:	mov	r3, #0
   184d4:	bl	12c00 <__assert_fail@plt+0x1bcc>
   184d8:	b	18420 <__assert_fail@plt+0x73ec>
   184dc:	push	{r4, lr}
   184e0:	mov	r0, #14
   184e4:	bl	10fd4 <nl_langinfo@plt>
   184e8:	cmp	r0, #0
   184ec:	beq	18504 <__assert_fail@plt+0x74d0>
   184f0:	ldrb	r2, [r0]
   184f4:	ldr	r3, [pc, #16]	; 1850c <__assert_fail@plt+0x74d8>
   184f8:	cmp	r2, #0
   184fc:	moveq	r0, r3
   18500:	pop	{r4, pc}
   18504:	ldr	r0, [pc]	; 1850c <__assert_fail@plt+0x74d8>
   18508:	pop	{r4, pc}
   1850c:	andeq	r9, r1, r0, lsl #25
   18510:	push	{r4, r5, r6, r7, lr}
   18514:	subs	r6, r0, #0
   18518:	sub	sp, sp, #12
   1851c:	addeq	r6, sp, #4
   18520:	mov	r0, r6
   18524:	mov	r5, r2
   18528:	mov	r7, r1
   1852c:	bl	10e9c <mbrtowc@plt>
   18530:	cmp	r5, #0
   18534:	cmnne	r0, #3
   18538:	mov	r4, r0
   1853c:	bls	18558 <__assert_fail@plt+0x7524>
   18540:	mov	r0, #0
   18544:	bl	185ec <__assert_fail@plt+0x75b8>
   18548:	cmp	r0, #0
   1854c:	moveq	r4, #1
   18550:	ldrbeq	r3, [r7]
   18554:	streq	r3, [r6]
   18558:	mov	r0, r4
   1855c:	add	sp, sp, #12
   18560:	pop	{r4, r5, r6, r7, pc}
   18564:	push	{r4, r5, r6, lr}
   18568:	subs	r4, r2, #0
   1856c:	mov	r6, r0
   18570:	mov	r5, r1
   18574:	beq	185a0 <__assert_fail@plt+0x756c>
   18578:	mov	r1, r4
   1857c:	mvn	r0, #0
   18580:	bl	186e0 <__assert_fail@plt+0x76ac>
   18584:	cmp	r0, r5
   18588:	bcs	185a0 <__assert_fail@plt+0x756c>
   1858c:	bl	10f20 <__errno_location@plt>
   18590:	mov	r3, #12
   18594:	str	r3, [r0]
   18598:	mov	r0, #0
   1859c:	pop	{r4, r5, r6, pc}
   185a0:	mul	r1, r5, r4
   185a4:	mov	r0, r6
   185a8:	pop	{r4, r5, r6, lr}
   185ac:	b	18278 <__assert_fail@plt+0x7244>
   185b0:	ldr	r2, [r0, #20]
   185b4:	ldr	r3, [r0, #16]
   185b8:	cmp	r2, r3
   185bc:	bhi	185e4 <__assert_fail@plt+0x75b0>
   185c0:	ldr	r3, [r0]
   185c4:	ldmib	r0, {r1, r2}
   185c8:	ands	r3, r3, #256	; 0x100
   185cc:	ldrne	r3, [r0, #44]	; 0x2c
   185d0:	ldrne	r0, [r0, #36]	; 0x24
   185d4:	sub	r2, r2, r1
   185d8:	subne	r3, r3, r0
   185dc:	add	r0, r3, r2
   185e0:	bx	lr
   185e4:	mov	r0, #0
   185e8:	bx	lr
   185ec:	push	{lr}		; (str lr, [sp, #-4]!)
   185f0:	sub	sp, sp, #268	; 0x10c
   185f4:	add	r1, sp, #4
   185f8:	ldr	r2, [pc, #60]	; 1863c <__assert_fail@plt+0x7608>
   185fc:	bl	18648 <__assert_fail@plt+0x7614>
   18600:	cmp	r0, #0
   18604:	movne	r0, #0
   18608:	bne	18634 <__assert_fail@plt+0x7600>
   1860c:	ldr	r1, [pc, #44]	; 18640 <__assert_fail@plt+0x760c>
   18610:	add	r0, sp, #4
   18614:	bl	10dac <strcmp@plt>
   18618:	cmp	r0, #0
   1861c:	beq	18634 <__assert_fail@plt+0x7600>
   18620:	add	r0, sp, #4
   18624:	ldr	r1, [pc, #24]	; 18644 <__assert_fail@plt+0x7610>
   18628:	bl	10dac <strcmp@plt>
   1862c:	adds	r0, r0, #0
   18630:	movne	r0, #1
   18634:	add	sp, sp, #268	; 0x10c
   18638:	pop	{pc}		; (ldr pc, [sp], #4)
   1863c:	andeq	r0, r0, r1, lsl #2
   18640:	andeq	r9, r1, r8, lsl #25
   18644:	andeq	r9, r1, ip, lsl #25
   18648:	push	{r4, r5, r6, lr}
   1864c:	mov	r5, r1
   18650:	mov	r1, #0
   18654:	mov	r4, r2
   18658:	bl	10fbc <setlocale@plt>
   1865c:	subs	r6, r0, #0
   18660:	beq	186bc <__assert_fail@plt+0x7688>
   18664:	bl	10f08 <strlen@plt>
   18668:	cmp	r4, r0
   1866c:	bhi	186a4 <__assert_fail@plt+0x7670>
   18670:	cmp	r4, #0
   18674:	bne	18680 <__assert_fail@plt+0x764c>
   18678:	mov	r0, #34	; 0x22
   1867c:	pop	{r4, r5, r6, pc}
   18680:	sub	r4, r4, #1
   18684:	mov	r1, r6
   18688:	mov	r2, r4
   1868c:	mov	r0, r5
   18690:	bl	10e00 <memcpy@plt>
   18694:	mov	r3, #0
   18698:	strb	r3, [r5, r4]
   1869c:	mov	r0, #34	; 0x22
   186a0:	pop	{r4, r5, r6, pc}
   186a4:	add	r2, r0, #1
   186a8:	mov	r1, r6
   186ac:	mov	r0, r5
   186b0:	bl	10e00 <memcpy@plt>
   186b4:	mov	r0, #0
   186b8:	pop	{r4, r5, r6, pc}
   186bc:	cmp	r4, #0
   186c0:	beq	186d0 <__assert_fail@plt+0x769c>
   186c4:	strb	r6, [r5]
   186c8:	mov	r0, #22
   186cc:	pop	{r4, r5, r6, pc}
   186d0:	mov	r0, #22
   186d4:	pop	{r4, r5, r6, pc}
   186d8:	mov	r1, #0
   186dc:	b	10fbc <setlocale@plt>
   186e0:	subs	r2, r1, #1
   186e4:	bxeq	lr
   186e8:	bcc	188c0 <__assert_fail@plt+0x788c>
   186ec:	cmp	r0, r1
   186f0:	bls	188a4 <__assert_fail@plt+0x7870>
   186f4:	tst	r1, r2
   186f8:	beq	188b0 <__assert_fail@plt+0x787c>
   186fc:	clz	r3, r0
   18700:	clz	r2, r1
   18704:	sub	r3, r2, r3
   18708:	rsbs	r3, r3, #31
   1870c:	addne	r3, r3, r3, lsl #1
   18710:	mov	r2, #0
   18714:	addne	pc, pc, r3, lsl #2
   18718:	nop			; (mov r0, r0)
   1871c:	cmp	r0, r1, lsl #31
   18720:	adc	r2, r2, r2
   18724:	subcs	r0, r0, r1, lsl #31
   18728:	cmp	r0, r1, lsl #30
   1872c:	adc	r2, r2, r2
   18730:	subcs	r0, r0, r1, lsl #30
   18734:	cmp	r0, r1, lsl #29
   18738:	adc	r2, r2, r2
   1873c:	subcs	r0, r0, r1, lsl #29
   18740:	cmp	r0, r1, lsl #28
   18744:	adc	r2, r2, r2
   18748:	subcs	r0, r0, r1, lsl #28
   1874c:	cmp	r0, r1, lsl #27
   18750:	adc	r2, r2, r2
   18754:	subcs	r0, r0, r1, lsl #27
   18758:	cmp	r0, r1, lsl #26
   1875c:	adc	r2, r2, r2
   18760:	subcs	r0, r0, r1, lsl #26
   18764:	cmp	r0, r1, lsl #25
   18768:	adc	r2, r2, r2
   1876c:	subcs	r0, r0, r1, lsl #25
   18770:	cmp	r0, r1, lsl #24
   18774:	adc	r2, r2, r2
   18778:	subcs	r0, r0, r1, lsl #24
   1877c:	cmp	r0, r1, lsl #23
   18780:	adc	r2, r2, r2
   18784:	subcs	r0, r0, r1, lsl #23
   18788:	cmp	r0, r1, lsl #22
   1878c:	adc	r2, r2, r2
   18790:	subcs	r0, r0, r1, lsl #22
   18794:	cmp	r0, r1, lsl #21
   18798:	adc	r2, r2, r2
   1879c:	subcs	r0, r0, r1, lsl #21
   187a0:	cmp	r0, r1, lsl #20
   187a4:	adc	r2, r2, r2
   187a8:	subcs	r0, r0, r1, lsl #20
   187ac:	cmp	r0, r1, lsl #19
   187b0:	adc	r2, r2, r2
   187b4:	subcs	r0, r0, r1, lsl #19
   187b8:	cmp	r0, r1, lsl #18
   187bc:	adc	r2, r2, r2
   187c0:	subcs	r0, r0, r1, lsl #18
   187c4:	cmp	r0, r1, lsl #17
   187c8:	adc	r2, r2, r2
   187cc:	subcs	r0, r0, r1, lsl #17
   187d0:	cmp	r0, r1, lsl #16
   187d4:	adc	r2, r2, r2
   187d8:	subcs	r0, r0, r1, lsl #16
   187dc:	cmp	r0, r1, lsl #15
   187e0:	adc	r2, r2, r2
   187e4:	subcs	r0, r0, r1, lsl #15
   187e8:	cmp	r0, r1, lsl #14
   187ec:	adc	r2, r2, r2
   187f0:	subcs	r0, r0, r1, lsl #14
   187f4:	cmp	r0, r1, lsl #13
   187f8:	adc	r2, r2, r2
   187fc:	subcs	r0, r0, r1, lsl #13
   18800:	cmp	r0, r1, lsl #12
   18804:	adc	r2, r2, r2
   18808:	subcs	r0, r0, r1, lsl #12
   1880c:	cmp	r0, r1, lsl #11
   18810:	adc	r2, r2, r2
   18814:	subcs	r0, r0, r1, lsl #11
   18818:	cmp	r0, r1, lsl #10
   1881c:	adc	r2, r2, r2
   18820:	subcs	r0, r0, r1, lsl #10
   18824:	cmp	r0, r1, lsl #9
   18828:	adc	r2, r2, r2
   1882c:	subcs	r0, r0, r1, lsl #9
   18830:	cmp	r0, r1, lsl #8
   18834:	adc	r2, r2, r2
   18838:	subcs	r0, r0, r1, lsl #8
   1883c:	cmp	r0, r1, lsl #7
   18840:	adc	r2, r2, r2
   18844:	subcs	r0, r0, r1, lsl #7
   18848:	cmp	r0, r1, lsl #6
   1884c:	adc	r2, r2, r2
   18850:	subcs	r0, r0, r1, lsl #6
   18854:	cmp	r0, r1, lsl #5
   18858:	adc	r2, r2, r2
   1885c:	subcs	r0, r0, r1, lsl #5
   18860:	cmp	r0, r1, lsl #4
   18864:	adc	r2, r2, r2
   18868:	subcs	r0, r0, r1, lsl #4
   1886c:	cmp	r0, r1, lsl #3
   18870:	adc	r2, r2, r2
   18874:	subcs	r0, r0, r1, lsl #3
   18878:	cmp	r0, r1, lsl #2
   1887c:	adc	r2, r2, r2
   18880:	subcs	r0, r0, r1, lsl #2
   18884:	cmp	r0, r1, lsl #1
   18888:	adc	r2, r2, r2
   1888c:	subcs	r0, r0, r1, lsl #1
   18890:	cmp	r0, r1
   18894:	adc	r2, r2, r2
   18898:	subcs	r0, r0, r1
   1889c:	mov	r0, r2
   188a0:	bx	lr
   188a4:	moveq	r0, #1
   188a8:	movne	r0, #0
   188ac:	bx	lr
   188b0:	clz	r2, r1
   188b4:	rsb	r2, r2, #31
   188b8:	lsr	r0, r0, r2
   188bc:	bx	lr
   188c0:	cmp	r0, #0
   188c4:	mvnne	r0, #0
   188c8:	b	18b2c <__assert_fail@plt+0x7af8>
   188cc:	cmp	r1, #0
   188d0:	beq	188c0 <__assert_fail@plt+0x788c>
   188d4:	push	{r0, r1, lr}
   188d8:	bl	186e0 <__assert_fail@plt+0x76ac>
   188dc:	pop	{r1, r2, lr}
   188e0:	mul	r3, r2, r0
   188e4:	sub	r1, r1, r3
   188e8:	bx	lr
   188ec:	cmp	r1, #0
   188f0:	beq	18afc <__assert_fail@plt+0x7ac8>
   188f4:	eor	ip, r0, r1
   188f8:	rsbmi	r1, r1, #0
   188fc:	subs	r2, r1, #1
   18900:	beq	18ac8 <__assert_fail@plt+0x7a94>
   18904:	movs	r3, r0
   18908:	rsbmi	r3, r0, #0
   1890c:	cmp	r3, r1
   18910:	bls	18ad4 <__assert_fail@plt+0x7aa0>
   18914:	tst	r1, r2
   18918:	beq	18ae4 <__assert_fail@plt+0x7ab0>
   1891c:	clz	r2, r3
   18920:	clz	r0, r1
   18924:	sub	r2, r0, r2
   18928:	rsbs	r2, r2, #31
   1892c:	addne	r2, r2, r2, lsl #1
   18930:	mov	r0, #0
   18934:	addne	pc, pc, r2, lsl #2
   18938:	nop			; (mov r0, r0)
   1893c:	cmp	r3, r1, lsl #31
   18940:	adc	r0, r0, r0
   18944:	subcs	r3, r3, r1, lsl #31
   18948:	cmp	r3, r1, lsl #30
   1894c:	adc	r0, r0, r0
   18950:	subcs	r3, r3, r1, lsl #30
   18954:	cmp	r3, r1, lsl #29
   18958:	adc	r0, r0, r0
   1895c:	subcs	r3, r3, r1, lsl #29
   18960:	cmp	r3, r1, lsl #28
   18964:	adc	r0, r0, r0
   18968:	subcs	r3, r3, r1, lsl #28
   1896c:	cmp	r3, r1, lsl #27
   18970:	adc	r0, r0, r0
   18974:	subcs	r3, r3, r1, lsl #27
   18978:	cmp	r3, r1, lsl #26
   1897c:	adc	r0, r0, r0
   18980:	subcs	r3, r3, r1, lsl #26
   18984:	cmp	r3, r1, lsl #25
   18988:	adc	r0, r0, r0
   1898c:	subcs	r3, r3, r1, lsl #25
   18990:	cmp	r3, r1, lsl #24
   18994:	adc	r0, r0, r0
   18998:	subcs	r3, r3, r1, lsl #24
   1899c:	cmp	r3, r1, lsl #23
   189a0:	adc	r0, r0, r0
   189a4:	subcs	r3, r3, r1, lsl #23
   189a8:	cmp	r3, r1, lsl #22
   189ac:	adc	r0, r0, r0
   189b0:	subcs	r3, r3, r1, lsl #22
   189b4:	cmp	r3, r1, lsl #21
   189b8:	adc	r0, r0, r0
   189bc:	subcs	r3, r3, r1, lsl #21
   189c0:	cmp	r3, r1, lsl #20
   189c4:	adc	r0, r0, r0
   189c8:	subcs	r3, r3, r1, lsl #20
   189cc:	cmp	r3, r1, lsl #19
   189d0:	adc	r0, r0, r0
   189d4:	subcs	r3, r3, r1, lsl #19
   189d8:	cmp	r3, r1, lsl #18
   189dc:	adc	r0, r0, r0
   189e0:	subcs	r3, r3, r1, lsl #18
   189e4:	cmp	r3, r1, lsl #17
   189e8:	adc	r0, r0, r0
   189ec:	subcs	r3, r3, r1, lsl #17
   189f0:	cmp	r3, r1, lsl #16
   189f4:	adc	r0, r0, r0
   189f8:	subcs	r3, r3, r1, lsl #16
   189fc:	cmp	r3, r1, lsl #15
   18a00:	adc	r0, r0, r0
   18a04:	subcs	r3, r3, r1, lsl #15
   18a08:	cmp	r3, r1, lsl #14
   18a0c:	adc	r0, r0, r0
   18a10:	subcs	r3, r3, r1, lsl #14
   18a14:	cmp	r3, r1, lsl #13
   18a18:	adc	r0, r0, r0
   18a1c:	subcs	r3, r3, r1, lsl #13
   18a20:	cmp	r3, r1, lsl #12
   18a24:	adc	r0, r0, r0
   18a28:	subcs	r3, r3, r1, lsl #12
   18a2c:	cmp	r3, r1, lsl #11
   18a30:	adc	r0, r0, r0
   18a34:	subcs	r3, r3, r1, lsl #11
   18a38:	cmp	r3, r1, lsl #10
   18a3c:	adc	r0, r0, r0
   18a40:	subcs	r3, r3, r1, lsl #10
   18a44:	cmp	r3, r1, lsl #9
   18a48:	adc	r0, r0, r0
   18a4c:	subcs	r3, r3, r1, lsl #9
   18a50:	cmp	r3, r1, lsl #8
   18a54:	adc	r0, r0, r0
   18a58:	subcs	r3, r3, r1, lsl #8
   18a5c:	cmp	r3, r1, lsl #7
   18a60:	adc	r0, r0, r0
   18a64:	subcs	r3, r3, r1, lsl #7
   18a68:	cmp	r3, r1, lsl #6
   18a6c:	adc	r0, r0, r0
   18a70:	subcs	r3, r3, r1, lsl #6
   18a74:	cmp	r3, r1, lsl #5
   18a78:	adc	r0, r0, r0
   18a7c:	subcs	r3, r3, r1, lsl #5
   18a80:	cmp	r3, r1, lsl #4
   18a84:	adc	r0, r0, r0
   18a88:	subcs	r3, r3, r1, lsl #4
   18a8c:	cmp	r3, r1, lsl #3
   18a90:	adc	r0, r0, r0
   18a94:	subcs	r3, r3, r1, lsl #3
   18a98:	cmp	r3, r1, lsl #2
   18a9c:	adc	r0, r0, r0
   18aa0:	subcs	r3, r3, r1, lsl #2
   18aa4:	cmp	r3, r1, lsl #1
   18aa8:	adc	r0, r0, r0
   18aac:	subcs	r3, r3, r1, lsl #1
   18ab0:	cmp	r3, r1
   18ab4:	adc	r0, r0, r0
   18ab8:	subcs	r3, r3, r1
   18abc:	cmp	ip, #0
   18ac0:	rsbmi	r0, r0, #0
   18ac4:	bx	lr
   18ac8:	teq	ip, r0
   18acc:	rsbmi	r0, r0, #0
   18ad0:	bx	lr
   18ad4:	movcc	r0, #0
   18ad8:	asreq	r0, ip, #31
   18adc:	orreq	r0, r0, #1
   18ae0:	bx	lr
   18ae4:	clz	r2, r1
   18ae8:	rsb	r2, r2, #31
   18aec:	cmp	ip, #0
   18af0:	lsr	r0, r3, r2
   18af4:	rsbmi	r0, r0, #0
   18af8:	bx	lr
   18afc:	cmp	r0, #0
   18b00:	mvngt	r0, #-2147483648	; 0x80000000
   18b04:	movlt	r0, #-2147483648	; 0x80000000
   18b08:	b	18b2c <__assert_fail@plt+0x7af8>
   18b0c:	cmp	r1, #0
   18b10:	beq	18afc <__assert_fail@plt+0x7ac8>
   18b14:	push	{r0, r1, lr}
   18b18:	bl	188f4 <__assert_fail@plt+0x78c0>
   18b1c:	pop	{r1, r2, lr}
   18b20:	mul	r3, r2, r0
   18b24:	sub	r1, r1, r3
   18b28:	bx	lr
   18b2c:	push	{r1, lr}
   18b30:	mov	r0, #8
   18b34:	bl	10da0 <raise@plt>
   18b38:	pop	{r1, pc}
   18b3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18b40:	mov	r7, r0
   18b44:	ldr	r6, [pc, #72]	; 18b94 <__assert_fail@plt+0x7b60>
   18b48:	ldr	r5, [pc, #72]	; 18b98 <__assert_fail@plt+0x7b64>
   18b4c:	add	r6, pc, r6
   18b50:	add	r5, pc, r5
   18b54:	sub	r6, r6, r5
   18b58:	mov	r8, r1
   18b5c:	mov	r9, r2
   18b60:	bl	10d68 <calloc@plt-0x20>
   18b64:	asrs	r6, r6, #2
   18b68:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18b6c:	mov	r4, #0
   18b70:	add	r4, r4, #1
   18b74:	ldr	r3, [r5], #4
   18b78:	mov	r2, r9
   18b7c:	mov	r1, r8
   18b80:	mov	r0, r7
   18b84:	blx	r3
   18b88:	cmp	r6, r4
   18b8c:	bne	18b70 <__assert_fail@plt+0x7b3c>
   18b90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18b94:			; <UNDEFINED> instruction: 0x000113bc
   18b98:			; <UNDEFINED> instruction: 0x000113b4
   18b9c:	bx	lr
   18ba0:	ldr	r3, [pc, #12]	; 18bb4 <__assert_fail@plt+0x7b80>
   18ba4:	mov	r1, #0
   18ba8:	add	r3, pc, r3
   18bac:	ldr	r2, [r3]
   18bb0:	b	10f2c <__cxa_atexit@plt>
   18bb4:	andeq	r1, r1, ip, asr #10

Disassembly of section .fini:

00018bb8 <.fini>:
   18bb8:	push	{r3, lr}
   18bbc:	pop	{r3, pc}
