
../repos/coreutils/src/nl:     file format elf32-littlearm


Disassembly of section .init:

00010f94 <.init>:
   10f94:	push	{r3, lr}
   10f98:	bl	11ad4 <__assert_fail@plt+0x7fc>
   10f9c:	pop	{r3, pc}

Disassembly of section .plt:

00010fa0 <pthread_mutex_unlock@plt-0x14>:
   10fa0:	push	{lr}		; (str lr, [sp, #-4]!)
   10fa4:	ldr	lr, [pc, #4]	; 10fb0 <pthread_mutex_unlock@plt-0x4>
   10fa8:	add	lr, pc, lr
   10fac:	ldr	pc, [lr, #8]!
   10fb0:	andeq	fp, r2, r0, asr r0

00010fb4 <pthread_mutex_unlock@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #176128	; 0x2b000
   10fbc:	ldr	pc, [ip, #80]!	; 0x50

00010fc0 <calloc@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #176128	; 0x2b000
   10fc8:	ldr	pc, [ip, #72]!	; 0x48

00010fcc <fputs_unlocked@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #176128	; 0x2b000
   10fd4:	ldr	pc, [ip, #64]!	; 0x40

00010fd8 <wctype@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #176128	; 0x2b000
   10fe0:	ldr	pc, [ip, #56]!	; 0x38

00010fe4 <raise@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #176128	; 0x2b000
   10fec:	ldr	pc, [ip, #48]!	; 0x30

00010ff0 <wcrtomb@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #176128	; 0x2b000
   10ff8:	ldr	pc, [ip, #40]!	; 0x28

00010ffc <iswctype@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #176128	; 0x2b000
   11004:	ldr	pc, [ip, #32]!

00011008 <strcmp@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #176128	; 0x2b000
   11010:	ldr	pc, [ip, #24]!

00011014 <posix_fadvise64@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #176128	; 0x2b000
   1101c:	ldr	pc, [ip, #16]!

00011020 <pthread_mutex_destroy@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #176128	; 0x2b000
   11028:	ldr	pc, [ip, #8]!

0001102c <fflush@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #176128	; 0x2b000
   11034:	ldr	pc, [ip, #0]!

00011038 <memmove@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #172032	; 0x2a000
   11040:	ldr	pc, [ip, #4088]!	; 0xff8

00011044 <free@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #172032	; 0x2a000
   1104c:	ldr	pc, [ip, #4080]!	; 0xff0

00011050 <pthread_mutex_lock@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #172032	; 0x2a000
   11058:	ldr	pc, [ip, #4072]!	; 0xfe8

0001105c <_exit@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #172032	; 0x2a000
   11064:	ldr	pc, [ip, #4064]!	; 0xfe0

00011068 <memcpy@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #172032	; 0x2a000
   11070:	ldr	pc, [ip, #4056]!	; 0xfd8

00011074 <pthread_mutex_init@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #172032	; 0x2a000
   1107c:	ldr	pc, [ip, #4048]!	; 0xfd0

00011080 <towlower@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #172032	; 0x2a000
   11088:	ldr	pc, [ip, #4040]!	; 0xfc8

0001108c <mbsinit@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #172032	; 0x2a000
   11094:	ldr	pc, [ip, #4032]!	; 0xfc0

00011098 <fwrite_unlocked@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #172032	; 0x2a000
   110a0:	ldr	pc, [ip, #4024]!	; 0xfb8

000110a4 <memcmp@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #172032	; 0x2a000
   110ac:	ldr	pc, [ip, #4016]!	; 0xfb0

000110b0 <stpcpy@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #172032	; 0x2a000
   110b8:	ldr	pc, [ip, #4008]!	; 0xfa8

000110bc <fputc_unlocked@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #172032	; 0x2a000
   110c4:	ldr	pc, [ip, #4000]!	; 0xfa0

000110c8 <dcgettext@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #172032	; 0x2a000
   110d0:	ldr	pc, [ip, #3992]!	; 0xf98

000110d4 <realloc@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #172032	; 0x2a000
   110dc:	ldr	pc, [ip, #3984]!	; 0xf90

000110e0 <textdomain@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #172032	; 0x2a000
   110e8:	ldr	pc, [ip, #3976]!	; 0xf88

000110ec <iswprint@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #172032	; 0x2a000
   110f4:	ldr	pc, [ip, #3968]!	; 0xf80

000110f8 <fwrite@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #172032	; 0x2a000
   11100:	ldr	pc, [ip, #3960]!	; 0xf78

00011104 <lseek64@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #172032	; 0x2a000
   1110c:	ldr	pc, [ip, #3952]!	; 0xf70

00011110 <__ctype_get_mb_cur_max@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #172032	; 0x2a000
   11118:	ldr	pc, [ip, #3944]!	; 0xf68

0001111c <strcpy@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #172032	; 0x2a000
   11124:	ldr	pc, [ip, #3936]!	; 0xf60

00011128 <__fpending@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #172032	; 0x2a000
   11130:	ldr	pc, [ip, #3928]!	; 0xf58

00011134 <mbrtowc@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #172032	; 0x2a000
   1113c:	ldr	pc, [ip, #3920]!	; 0xf50

00011140 <error@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #172032	; 0x2a000
   11148:	ldr	pc, [ip, #3912]!	; 0xf48

0001114c <malloc@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #172032	; 0x2a000
   11154:	ldr	pc, [ip, #3904]!	; 0xf40

00011158 <__libc_start_main@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #172032	; 0x2a000
   11160:	ldr	pc, [ip, #3896]!	; 0xf38

00011164 <__freading@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #172032	; 0x2a000
   1116c:	ldr	pc, [ip, #3888]!	; 0xf30

00011170 <__ctype_tolower_loc@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #172032	; 0x2a000
   11178:	ldr	pc, [ip, #3880]!	; 0xf28

0001117c <__ctype_toupper_loc@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #172032	; 0x2a000
   11184:	ldr	pc, [ip, #3872]!	; 0xf20

00011188 <__gmon_start__@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #172032	; 0x2a000
   11190:	ldr	pc, [ip, #3864]!	; 0xf18

00011194 <getopt_long@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #172032	; 0x2a000
   1119c:	ldr	pc, [ip, #3856]!	; 0xf10

000111a0 <__ctype_b_loc@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #172032	; 0x2a000
   111a8:	ldr	pc, [ip, #3848]!	; 0xf08

000111ac <exit@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #172032	; 0x2a000
   111b4:	ldr	pc, [ip, #3840]!	; 0xf00

000111b8 <strlen@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #172032	; 0x2a000
   111c0:	ldr	pc, [ip, #3832]!	; 0xef8

000111c4 <strchr@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #172032	; 0x2a000
   111cc:	ldr	pc, [ip, #3824]!	; 0xef0

000111d0 <__errno_location@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #172032	; 0x2a000
   111d8:	ldr	pc, [ip, #3816]!	; 0xee8

000111dc <iswalnum@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #172032	; 0x2a000
   111e4:	ldr	pc, [ip, #3808]!	; 0xee0

000111e8 <__cxa_atexit@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #172032	; 0x2a000
   111f0:	ldr	pc, [ip, #3800]!	; 0xed8

000111f4 <memset@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #172032	; 0x2a000
   111fc:	ldr	pc, [ip, #3792]!	; 0xed0

00011200 <btowc@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #172032	; 0x2a000
   11208:	ldr	pc, [ip, #3784]!	; 0xec8

0001120c <__printf_chk@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #172032	; 0x2a000
   11214:	ldr	pc, [ip, #3776]!	; 0xec0

00011218 <fileno@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #172032	; 0x2a000
   11220:	ldr	pc, [ip, #3768]!	; 0xeb8

00011224 <__fprintf_chk@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #172032	; 0x2a000
   1122c:	ldr	pc, [ip, #3760]!	; 0xeb0

00011230 <fclose@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #172032	; 0x2a000
   11238:	ldr	pc, [ip, #3752]!	; 0xea8

0001123c <fseeko64@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #172032	; 0x2a000
   11244:	ldr	pc, [ip, #3744]!	; 0xea0

00011248 <__uflow@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #172032	; 0x2a000
   11250:	ldr	pc, [ip, #3736]!	; 0xe98

00011254 <__overflow@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #172032	; 0x2a000
   1125c:	ldr	pc, [ip, #3728]!	; 0xe90

00011260 <setlocale@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #172032	; 0x2a000
   11268:	ldr	pc, [ip, #3720]!	; 0xe88

0001126c <strrchr@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #172032	; 0x2a000
   11274:	ldr	pc, [ip, #3712]!	; 0xe80

00011278 <nl_langinfo@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #172032	; 0x2a000
   11280:	ldr	pc, [ip, #3704]!	; 0xe78

00011284 <clearerr_unlocked@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #172032	; 0x2a000
   1128c:	ldr	pc, [ip, #3696]!	; 0xe70

00011290 <__strtoll_internal@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #172032	; 0x2a000
   11298:	ldr	pc, [ip, #3688]!	; 0xe68

0001129c <fopen64@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #172032	; 0x2a000
   112a4:	ldr	pc, [ip, #3680]!	; 0xe60

000112a8 <bindtextdomain@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #172032	; 0x2a000
   112b0:	ldr	pc, [ip, #3672]!	; 0xe58

000112b4 <towupper@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #172032	; 0x2a000
   112bc:	ldr	pc, [ip, #3664]!	; 0xe50

000112c0 <strncmp@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #172032	; 0x2a000
   112c8:	ldr	pc, [ip, #3656]!	; 0xe48

000112cc <abort@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #172032	; 0x2a000
   112d4:	ldr	pc, [ip, #3648]!	; 0xe40

000112d8 <__assert_fail@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #172032	; 0x2a000
   112e0:	ldr	pc, [ip, #3640]!	; 0xe38

Disassembly of section .text:

000112e8 <.text>:
   112e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112ec:	mov	r6, r0
   112f0:	sub	sp, sp, #36	; 0x24
   112f4:	ldr	r0, [r1]
   112f8:	mov	r5, r1
   112fc:	bl	12a68 <__assert_fail@plt+0x1790>
   11300:	ldr	r1, [pc, #1776]	; 119f8 <__assert_fail@plt+0x720>
   11304:	mov	r0, #6
   11308:	bl	11260 <setlocale@plt>
   1130c:	ldr	r1, [pc, #1768]	; 119fc <__assert_fail@plt+0x724>
   11310:	ldr	r0, [pc, #1768]	; 11a00 <__assert_fail@plt+0x728>
   11314:	bl	112a8 <bindtextdomain@plt>
   11318:	ldr	r0, [pc, #1760]	; 11a00 <__assert_fail@plt+0x728>
   1131c:	bl	110e0 <textdomain@plt>
   11320:	ldr	r0, [pc, #1756]	; 11a04 <__assert_fail@plt+0x72c>
   11324:	bl	29f8c <__assert_fail@plt+0x18cb4>
   11328:	ldr	r7, [pc, #1752]	; 11a08 <__assert_fail@plt+0x730>
   1132c:	ldr	r2, [pc, #1752]	; 11a0c <__assert_fail@plt+0x734>
   11330:	ldr	r8, [pc, #1752]	; 11a10 <__assert_fail@plt+0x738>
   11334:	ldr	r9, [pc, #1752]	; 11a14 <__assert_fail@plt+0x73c>
   11338:	ldr	fp, [pc, #1752]	; 11a18 <__assert_fail@plt+0x740>
   1133c:	mov	sl, #1
   11340:	mov	r3, #0
   11344:	strb	r3, [r2, #16]
   11348:	mov	r4, #0
   1134c:	str	r4, [sp]
   11350:	mov	r3, r7
   11354:	mov	r2, r8
   11358:	mov	r1, r5
   1135c:	mov	r0, r6
   11360:	bl	11194 <getopt_long@plt>
   11364:	cmn	r0, #1
   11368:	beq	11844 <__assert_fail@plt+0x56c>
   1136c:	add	r0, r0, #3
   11370:	cmp	r0, #122	; 0x7a
   11374:	ldrls	pc, [pc, r0, lsl #2]
   11378:	b	117fc <__assert_fail@plt+0x524>
   1137c:	andeq	r1, r1, ip, asr #14
   11380:	andeq	r1, r1, r4, asr #14
   11384:	strdeq	r1, [r1], -ip
   11388:	strdeq	r1, [r1], -ip
   1138c:	strdeq	r1, [r1], -ip
   11390:	strdeq	r1, [r1], -ip
   11394:	strdeq	r1, [r1], -ip
   11398:	strdeq	r1, [r1], -ip
   1139c:	strdeq	r1, [r1], -ip
   113a0:	strdeq	r1, [r1], -ip
   113a4:	strdeq	r1, [r1], -ip
   113a8:	strdeq	r1, [r1], -ip
   113ac:	strdeq	r1, [r1], -ip
   113b0:	strdeq	r1, [r1], -ip
   113b4:	strdeq	r1, [r1], -ip
   113b8:	strdeq	r1, [r1], -ip
   113bc:	strdeq	r1, [r1], -ip
   113c0:	strdeq	r1, [r1], -ip
   113c4:	strdeq	r1, [r1], -ip
   113c8:	strdeq	r1, [r1], -ip
   113cc:	strdeq	r1, [r1], -ip
   113d0:	strdeq	r1, [r1], -ip
   113d4:	strdeq	r1, [r1], -ip
   113d8:	strdeq	r1, [r1], -ip
   113dc:	strdeq	r1, [r1], -ip
   113e0:	strdeq	r1, [r1], -ip
   113e4:	strdeq	r1, [r1], -ip
   113e8:	strdeq	r1, [r1], -ip
   113ec:	strdeq	r1, [r1], -ip
   113f0:	strdeq	r1, [r1], -ip
   113f4:	strdeq	r1, [r1], -ip
   113f8:	strdeq	r1, [r1], -ip
   113fc:	strdeq	r1, [r1], -ip
   11400:	strdeq	r1, [r1], -ip
   11404:	strdeq	r1, [r1], -ip
   11408:	strdeq	r1, [r1], -ip
   1140c:	strdeq	r1, [r1], -ip
   11410:	strdeq	r1, [r1], -ip
   11414:	strdeq	r1, [r1], -ip
   11418:	strdeq	r1, [r1], -ip
   1141c:	strdeq	r1, [r1], -ip
   11420:	strdeq	r1, [r1], -ip
   11424:	strdeq	r1, [r1], -ip
   11428:	strdeq	r1, [r1], -ip
   1142c:	strdeq	r1, [r1], -ip
   11430:	strdeq	r1, [r1], -ip
   11434:	strdeq	r1, [r1], -ip
   11438:	strdeq	r1, [r1], -ip
   1143c:	strdeq	r1, [r1], -ip
   11440:	strdeq	r1, [r1], -ip
   11444:	strdeq	r1, [r1], -ip
   11448:	strdeq	r1, [r1], -ip
   1144c:	strdeq	r1, [r1], -ip
   11450:	strdeq	r1, [r1], -ip
   11454:	strdeq	r1, [r1], -ip
   11458:	strdeq	r1, [r1], -ip
   1145c:	strdeq	r1, [r1], -ip
   11460:	strdeq	r1, [r1], -ip
   11464:	strdeq	r1, [r1], -ip
   11468:	strdeq	r1, [r1], -ip
   1146c:	strdeq	r1, [r1], -ip
   11470:	strdeq	r1, [r1], -ip
   11474:	strdeq	r1, [r1], -ip
   11478:	strdeq	r1, [r1], -ip
   1147c:	strdeq	r1, [r1], -ip
   11480:	strdeq	r1, [r1], -ip
   11484:	strdeq	r1, [r1], -ip
   11488:	strdeq	r1, [r1], -ip
   1148c:	strdeq	r1, [r1], -ip
   11490:	strdeq	r1, [r1], -ip
   11494:	strdeq	r1, [r1], -ip
   11498:	strdeq	r1, [r1], -ip
   1149c:	strdeq	r1, [r1], -ip
   114a0:	strdeq	r1, [r1], -ip
   114a4:	strdeq	r1, [r1], -ip
   114a8:	strdeq	r1, [r1], -ip
   114ac:	strdeq	r1, [r1], -ip
   114b0:	strdeq	r1, [r1], -ip
   114b4:	strdeq	r1, [r1], -ip
   114b8:	strdeq	r1, [r1], -ip
   114bc:	strdeq	r1, [r1], -ip
   114c0:	strdeq	r1, [r1], -ip
   114c4:	strdeq	r1, [r1], -ip
   114c8:	strdeq	r1, [r1], -ip
   114cc:	strdeq	r1, [r1], -ip
   114d0:	strdeq	r1, [r1], -ip
   114d4:	strdeq	r1, [r1], -ip
   114d8:	strdeq	r1, [r1], -ip
   114dc:	strdeq	r1, [r1], -ip
   114e0:	strdeq	r1, [r1], -ip
   114e4:	strdeq	r1, [r1], -ip
   114e8:	strdeq	r1, [r1], -ip
   114ec:	strdeq	r1, [r1], -ip
   114f0:	strdeq	r1, [r1], -ip
   114f4:	strdeq	r1, [r1], -ip
   114f8:	strdeq	r1, [r1], -ip
   114fc:	strdeq	r1, [r1], -ip
   11500:	strdeq	r1, [r1], -ip
   11504:	strdeq	r1, [r1], -ip
   11508:	strdeq	r1, [r1], -ip
   1150c:	strdeq	r1, [r1], -ip
   11510:	ldrdeq	r1, [r1], -r8
   11514:	strdeq	r1, [r1], -ip
   11518:	andeq	r1, r1, r8, lsl #15
   1151c:	strdeq	r1, [r1], -ip
   11520:	andeq	r1, r1, r0, lsr #14
   11524:	strdeq	r1, [r1], -ip
   11528:	ldrdeq	r1, [r1], -r4
   1152c:	andeq	r1, r1, r8, lsl #13
   11530:	strdeq	r1, [r1], -ip
   11534:	strdeq	r1, [r1], -ip
   11538:	andeq	r1, r1, ip, lsr r6
   1153c:	strdeq	r1, [r1], -ip
   11540:	andeq	r1, r1, r8, lsl r6
   11544:	strdeq	r1, [r1], -ip
   11548:	andeq	r1, r1, ip, lsl #12
   1154c:	strdeq	r1, [r1], -ip
   11550:	strdeq	r1, [r1], -ip
   11554:	andeq	r1, r1, r0, lsl #12
   11558:	strdeq	r1, [r1], -ip
   1155c:	strdeq	r1, [r1], -ip
   11560:			; <UNDEFINED> instruction: 0x000115b4
   11564:	andeq	r1, r1, r8, ror #10
   11568:	mov	r2, #5
   1156c:	ldr	r1, [pc, #1192]	; 11a1c <__assert_fail@plt+0x744>
   11570:	mov	r0, #0
   11574:	ldr	r4, [r9]
   11578:	bl	110c8 <dcgettext@plt>
   1157c:	ldr	r1, [pc, #1140]	; 119f8 <__assert_fail@plt+0x720>
   11580:	mvn	r2, #-2147483648	; 0x80000000
   11584:	mov	r3, #0
   11588:	str	r1, [sp, #8]
   1158c:	mov	r1, #0
   11590:	strd	r2, [sp]
   11594:	str	r1, [sp, #16]
   11598:	mov	r2, #1
   1159c:	mov	r3, #0
   115a0:	str	r0, [sp, #12]
   115a4:	mov	r0, r4
   115a8:	bl	287c0 <__assert_fail@plt+0x174e8>
   115ac:	str	r0, [fp]
   115b0:	b	11348 <__assert_fail@plt+0x70>
   115b4:	mov	r2, #5
   115b8:	ldr	r1, [pc, #1120]	; 11a20 <__assert_fail@plt+0x748>
   115bc:	mov	r0, #0
   115c0:	ldr	r4, [r9]
   115c4:	bl	110c8 <dcgettext@plt>
   115c8:	ldr	ip, [pc, #1064]	; 119f8 <__assert_fail@plt+0x720>
   115cc:	mvn	r2, #0
   115d0:	mvn	r3, #-2147483648	; 0x80000000
   115d4:	mov	r1, #0
   115d8:	strd	r2, [sp]
   115dc:	str	ip, [sp, #8]
   115e0:	str	r1, [sp, #16]
   115e4:	mov	r2, #0
   115e8:	mov	r3, #-2147483648	; 0x80000000
   115ec:	str	r0, [sp, #12]
   115f0:	mov	r0, r4
   115f4:	bl	287c0 <__assert_fail@plt+0x174e8>
   115f8:	strd	r0, [fp, #32]
   115fc:	b	11348 <__assert_fail@plt+0x70>
   11600:	ldr	r3, [r9]
   11604:	str	r3, [fp, #8]
   11608:	b	11348 <__assert_fail@plt+0x70>
   1160c:	mov	r3, #0
   11610:	strb	r3, [fp, #52]	; 0x34
   11614:	b	11348 <__assert_fail@plt+0x70>
   11618:	ldr	r4, [r9]
   1161c:	ldr	r1, [pc, #1024]	; 11a24 <__assert_fail@plt+0x74c>
   11620:	mov	r0, r4
   11624:	bl	11008 <strcmp@plt>
   11628:	cmp	r0, #0
   1162c:	bne	11804 <__assert_fail@plt+0x52c>
   11630:	ldr	r3, [pc, #1008]	; 11a28 <__assert_fail@plt+0x750>
   11634:	str	r3, [fp, #4]
   11638:	b	11348 <__assert_fail@plt+0x70>
   1163c:	mov	r2, #5
   11640:	ldr	r1, [pc, #996]	; 11a2c <__assert_fail@plt+0x754>
   11644:	mov	r0, #0
   11648:	ldr	r4, [r9]
   1164c:	bl	110c8 <dcgettext@plt>
   11650:	ldr	ip, [pc, #928]	; 119f8 <__assert_fail@plt+0x720>
   11654:	mvn	r2, #0
   11658:	mvn	r3, #-2147483648	; 0x80000000
   1165c:	mov	r1, #0
   11660:	strd	r2, [sp]
   11664:	str	ip, [sp, #8]
   11668:	str	r1, [sp, #16]
   1166c:	mov	r2, #1
   11670:	mov	r3, #0
   11674:	str	r0, [sp, #12]
   11678:	mov	r0, r4
   1167c:	bl	287c0 <__assert_fail@plt+0x174e8>
   11680:	strd	r0, [fp, #40]	; 0x28
   11684:	b	11348 <__assert_fail@plt+0x70>
   11688:	mov	r2, #5
   1168c:	ldr	r1, [pc, #924]	; 11a30 <__assert_fail@plt+0x758>
   11690:	mov	r0, #0
   11694:	ldr	r4, [r9]
   11698:	bl	110c8 <dcgettext@plt>
   1169c:	ldr	ip, [pc, #852]	; 119f8 <__assert_fail@plt+0x720>
   116a0:	mvn	r2, #0
   116a4:	mvn	r3, #-2147483648	; 0x80000000
   116a8:	mov	r1, #0
   116ac:	strd	r2, [sp]
   116b0:	str	ip, [sp, #8]
   116b4:	str	r1, [sp, #16]
   116b8:	mov	r2, #0
   116bc:	mov	r3, #-2147483648	; 0x80000000
   116c0:	str	r0, [sp, #12]
   116c4:	mov	r0, r4
   116c8:	bl	287c0 <__assert_fail@plt+0x174e8>
   116cc:	strd	r0, [fp, #16]
   116d0:	b	11348 <__assert_fail@plt+0x70>
   116d4:	ldr	r2, [pc, #856]	; 11a34 <__assert_fail@plt+0x75c>
   116d8:	ldr	r0, [pc, #856]	; 11a38 <__assert_fail@plt+0x760>
   116dc:	sub	r1, r2, #32
   116e0:	bl	11cc0 <__assert_fail@plt+0x9e8>
   116e4:	subs	r4, r0, #0
   116e8:	moveq	r2, #5
   116ec:	ldreq	r1, [pc, #840]	; 11a3c <__assert_fail@plt+0x764>
   116f0:	bne	11348 <__assert_fail@plt+0x70>
   116f4:	bl	110c8 <dcgettext@plt>
   116f8:	mov	sl, r0
   116fc:	ldr	r0, [r9]
   11700:	bl	16934 <__assert_fail@plt+0x565c>
   11704:	mov	r2, sl
   11708:	mov	r1, r4
   1170c:	mov	sl, r4
   11710:	mov	r3, r0
   11714:	mov	r0, r4
   11718:	bl	11140 <error@plt>
   1171c:	b	11348 <__assert_fail@plt+0x70>
   11720:	ldr	r2, [pc, #792]	; 11a40 <__assert_fail@plt+0x768>
   11724:	ldr	r0, [pc, #792]	; 11a44 <__assert_fail@plt+0x76c>
   11728:	sub	r1, r2, #608	; 0x260
   1172c:	bl	11cc0 <__assert_fail@plt+0x9e8>
   11730:	subs	r4, r0, #0
   11734:	moveq	r2, #5
   11738:	ldreq	r1, [pc, #776]	; 11a48 <__assert_fail@plt+0x770>
   1173c:	bne	11348 <__assert_fail@plt+0x70>
   11740:	b	116f4 <__assert_fail@plt+0x41c>
   11744:	mov	r0, #0
   11748:	bl	1219c <__assert_fail@plt+0xec4>
   1174c:	ldr	r3, [pc, #760]	; 11a4c <__assert_fail@plt+0x774>
   11750:	ldr	r0, [pc, #760]	; 11a50 <__assert_fail@plt+0x778>
   11754:	ldr	r1, [pc, #760]	; 11a54 <__assert_fail@plt+0x77c>
   11758:	ldr	r2, [pc, #760]	; 11a58 <__assert_fail@plt+0x780>
   1175c:	mov	r4, #0
   11760:	ldr	r0, [r0]
   11764:	ldr	r3, [r3]
   11768:	str	r1, [sp, #4]
   1176c:	str	r2, [sp]
   11770:	str	r4, [sp, #8]
   11774:	ldr	r2, [pc, #736]	; 11a5c <__assert_fail@plt+0x784>
   11778:	ldr	r1, [pc, #736]	; 11a60 <__assert_fail@plt+0x788>
   1177c:	bl	27e08 <__assert_fail@plt+0x16b30>
   11780:	mov	r0, r4
   11784:	bl	111ac <exit@plt>
   11788:	ldr	r4, [r9]
   1178c:	mov	r0, r4
   11790:	bl	111b8 <strlen@plt>
   11794:	sub	r0, r0, #1
   11798:	cmp	r0, #1
   1179c:	strhi	r4, [fp, #24]
   117a0:	bhi	11348 <__assert_fail@plt+0x70>
   117a4:	ldrb	r2, [r4]
   117a8:	ldr	r3, [fp, #24]
   117ac:	cmp	r2, #0
   117b0:	beq	11348 <__assert_fail@plt+0x70>
   117b4:	add	r2, r4, #1
   117b8:	str	r2, [r9]
   117bc:	ldrb	r2, [r4]
   117c0:	strb	r2, [r3], #1
   117c4:	ldr	r4, [r9]
   117c8:	ldrb	r2, [r4]
   117cc:	cmp	r2, #0
   117d0:	bne	117b4 <__assert_fail@plt+0x4dc>
   117d4:	b	11348 <__assert_fail@plt+0x70>
   117d8:	ldr	r2, [pc, #644]	; 11a64 <__assert_fail@plt+0x78c>
   117dc:	ldr	r0, [pc, #644]	; 11a68 <__assert_fail@plt+0x790>
   117e0:	sub	r1, r2, #320	; 0x140
   117e4:	bl	11cc0 <__assert_fail@plt+0x9e8>
   117e8:	subs	r4, r0, #0
   117ec:	bne	11348 <__assert_fail@plt+0x70>
   117f0:	mov	r2, #5
   117f4:	ldr	r1, [pc, #624]	; 11a6c <__assert_fail@plt+0x794>
   117f8:	b	116f4 <__assert_fail@plt+0x41c>
   117fc:	mov	sl, r4
   11800:	b	1134c <__assert_fail@plt+0x74>
   11804:	ldr	r1, [pc, #612]	; 11a70 <__assert_fail@plt+0x798>
   11808:	mov	r0, r4
   1180c:	bl	11008 <strcmp@plt>
   11810:	cmp	r0, #0
   11814:	beq	11838 <__assert_fail@plt+0x560>
   11818:	mov	r0, r4
   1181c:	ldr	r1, [pc, #592]	; 11a74 <__assert_fail@plt+0x79c>
   11820:	bl	11008 <strcmp@plt>
   11824:	cmp	r0, #0
   11828:	bne	119b8 <__assert_fail@plt+0x6e0>
   1182c:	ldr	r3, [pc, #580]	; 11a78 <__assert_fail@plt+0x7a0>
   11830:	str	r3, [fp, #4]
   11834:	b	11348 <__assert_fail@plt+0x70>
   11838:	ldr	r3, [pc, #572]	; 11a7c <__assert_fail@plt+0x7a4>
   1183c:	str	r3, [fp, #4]
   11840:	b	11348 <__assert_fail@plt+0x70>
   11844:	cmp	sl, #0
   11848:	beq	119f0 <__assert_fail@plt+0x718>
   1184c:	ldr	r8, [pc, #452]	; 11a18 <__assert_fail@plt+0x740>
   11850:	ldr	r7, [pc, #552]	; 11a80 <__assert_fail@plt+0x7a8>
   11854:	ldr	r0, [r8, #24]
   11858:	bl	111b8 <strlen@plt>
   1185c:	lsl	r2, r0, #1
   11860:	add	r3, r2, r0
   11864:	str	r2, [sp, #28]
   11868:	ldr	r2, [pc, #412]	; 11a0c <__assert_fail@plt+0x734>
   1186c:	mov	r9, r0
   11870:	add	r0, r3, #1
   11874:	str	r3, [r2, #36]	; 0x24
   11878:	bl	27ff0 <__assert_fail@plt+0x16d18>
   1187c:	ldr	fp, [r8, #24]
   11880:	ldr	r2, [pc, #388]	; 11a0c <__assert_fail@plt+0x734>
   11884:	mov	r1, fp
   11888:	str	r0, [r2, #40]	; 0x28
   1188c:	str	r0, [sp, #24]
   11890:	bl	110b0 <stpcpy@plt>
   11894:	mov	r1, fp
   11898:	bl	110b0 <stpcpy@plt>
   1189c:	mov	r1, fp
   118a0:	bl	1111c <strcpy@plt>
   118a4:	ldr	r0, [pc, #472]	; 11a84 <__assert_fail@plt+0x7ac>
   118a8:	ldr	r3, [sp, #24]
   118ac:	sub	r1, r0, #20
   118b0:	ldr	r2, [sp, #28]
   118b4:	add	fp, r3, r9
   118b8:	add	r3, fp, r9
   118bc:	str	r3, [r1, #52]	; 0x34
   118c0:	str	r2, [r0, #24]
   118c4:	str	fp, [r1, #48]	; 0x30
   118c8:	str	r9, [r1, #32]
   118cc:	bl	12828 <__assert_fail@plt+0x1550>
   118d0:	ldr	r0, [r8, #8]
   118d4:	bl	111b8 <strlen@plt>
   118d8:	mov	r9, r0
   118dc:	ldr	r0, [r8]
   118e0:	add	r0, r0, #1
   118e4:	add	r0, r0, r9
   118e8:	bl	27ff0 <__assert_fail@plt+0x16d18>
   118ec:	ldr	r2, [r8]
   118f0:	ldr	ip, [pc, #276]	; 11a0c <__assert_fail@plt+0x734>
   118f4:	add	r9, r9, r2
   118f8:	mov	r1, #32
   118fc:	mov	r2, r9
   11900:	str	r0, [ip, #64]	; 0x40
   11904:	bl	111f4 <memset@plt>
   11908:	ldr	ip, [pc, #376]	; 11a88 <__assert_fail@plt+0x7b0>
   1190c:	ldr	r2, [r7]
   11910:	ldr	lr, [r8, #56]	; 0x38
   11914:	cmp	r6, r2
   11918:	mov	r3, r0
   1191c:	ldrd	r0, [r8, #32]
   11920:	strb	r4, [r3, r9]
   11924:	sub	r3, ip, #108	; 0x6c
   11928:	strd	r0, [ip, #-100]	; 0xffffff9c
   1192c:	str	lr, [r3, #72]	; 0x48
   11930:	str	ip, [r3, #68]	; 0x44
   11934:	beq	11980 <__assert_fail@plt+0x6a8>
   11938:	ble	11960 <__assert_fail@plt+0x688>
   1193c:	ldr	r0, [r5, r2, lsl #2]
   11940:	bl	11dc4 <__assert_fail@plt+0xaec>
   11944:	ldr	r2, [r7]
   11948:	add	r2, r2, #1
   1194c:	cmp	r6, r2
   11950:	str	r2, [r7]
   11954:	and	sl, sl, r0
   11958:	uxtb	sl, sl
   1195c:	bgt	1193c <__assert_fail@plt+0x664>
   11960:	ldr	r3, [pc, #164]	; 11a0c <__assert_fail@plt+0x734>
   11964:	ldrb	r3, [r3, #16]
   11968:	cmp	r3, #0
   1196c:	bne	11990 <__assert_fail@plt+0x6b8>
   11970:	eor	r0, sl, #1
   11974:	uxtb	r0, r0
   11978:	add	sp, sp, #36	; 0x24
   1197c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11980:	ldr	r0, [pc, #260]	; 11a8c <__assert_fail@plt+0x7b4>
   11984:	bl	11dc4 <__assert_fail@plt+0xaec>
   11988:	mov	sl, r0
   1198c:	b	11960 <__assert_fail@plt+0x688>
   11990:	ldr	r3, [pc, #248]	; 11a90 <__assert_fail@plt+0x7b8>
   11994:	ldr	r0, [r3]
   11998:	bl	12688 <__assert_fail@plt+0x13b0>
   1199c:	cmn	r0, #1
   119a0:	bne	11970 <__assert_fail@plt+0x698>
   119a4:	bl	111d0 <__errno_location@plt>
   119a8:	ldr	r2, [pc, #220]	; 11a8c <__assert_fail@plt+0x7b4>
   119ac:	ldr	r1, [r0]
   119b0:	mov	r0, #1
   119b4:	bl	11140 <error@plt>
   119b8:	mov	r2, #5
   119bc:	ldr	r1, [pc, #208]	; 11a94 <__assert_fail@plt+0x7bc>
   119c0:	mov	r0, #0
   119c4:	bl	110c8 <dcgettext@plt>
   119c8:	mov	sl, #0
   119cc:	mov	r4, r0
   119d0:	ldr	r0, [r9]
   119d4:	bl	16934 <__assert_fail@plt+0x565c>
   119d8:	mov	r1, #0
   119dc:	mov	r2, r4
   119e0:	mov	r3, r0
   119e4:	mov	r0, r1
   119e8:	bl	11140 <error@plt>
   119ec:	b	11348 <__assert_fail@plt+0x70>
   119f0:	mov	r0, #1
   119f4:	bl	1219c <__assert_fail@plt+0xec4>
   119f8:	andeq	sl, r2, r4, ror r1
   119fc:	andeq	sl, r2, r4, asr r9
   11a00:	andeq	sl, r2, ip, lsr #17
   11a04:	andeq	r2, r1, r4, ror #10
   11a08:	andeq	sl, r2, r8
   11a0c:	andeq	ip, r3, r0, ror #3
   11a10:	andeq	sl, r2, ip, lsr #21
   11a14:	ldrdeq	ip, [r3], -r8
   11a18:	andeq	ip, r3, r8, lsr #2
   11a1c:	andeq	sl, r2, ip, lsr sl
   11a20:	ldrdeq	sl, [r2], -r8
   11a24:	andeq	sl, r2, ip, asr sl
   11a28:	andeq	r9, r2, r8, ror #31
   11a2c:	andeq	sl, r2, r8, lsl sl
   11a30:	strdeq	sl, [r2], -r8
   11a34:	andeq	ip, r3, ip, lsl #5
   11a38:	andeq	ip, r3, r4, ror #2
   11a3c:	andeq	sl, r2, ip, ror #18
   11a40:	andeq	ip, r3, ip, lsl #9
   11a44:	andeq	ip, r3, r8, asr r1
   11a48:			; <UNDEFINED> instruction: 0x0002a9b4
   11a4c:	andeq	ip, r3, ip, ror #2
   11a50:	ldrdeq	ip, [r3], -r4
   11a54:	andeq	sl, r2, ip, lsl #21
   11a58:	muleq	r2, ip, sl
   11a5c:	andeq	sl, r2, r8, lsr #17
   11a60:	andeq	sl, r2, r8, lsr #2
   11a64:	andeq	ip, r3, ip, lsl #7
   11a68:	andeq	ip, r3, r0, ror #2
   11a6c:	muleq	r2, r0, r9
   11a70:	andeq	sl, r2, r0, ror #20
   11a74:	andeq	sl, r2, r4, ror #20
   11a78:	strdeq	r9, [r2], -ip
   11a7c:	strdeq	r9, [r2], -r4
   11a80:	andeq	ip, r3, r0, asr #3
   11a84:	strdeq	ip, [r3], -r4
   11a88:	andeq	ip, r3, ip, asr #4
   11a8c:	andeq	sl, r2, r0, lsl #2
   11a90:	ldrdeq	ip, [r3], -r0
   11a94:	andeq	sl, r2, r8, ror #20
   11a98:	mov	fp, #0
   11a9c:	mov	lr, #0
   11aa0:	pop	{r1}		; (ldr r1, [sp], #4)
   11aa4:	mov	r2, sp
   11aa8:	push	{r2}		; (str r2, [sp, #-4]!)
   11aac:	push	{r0}		; (str r0, [sp, #-4]!)
   11ab0:	ldr	ip, [pc, #16]	; 11ac8 <__assert_fail@plt+0x7f0>
   11ab4:	push	{ip}		; (str ip, [sp, #-4]!)
   11ab8:	ldr	r0, [pc, #12]	; 11acc <__assert_fail@plt+0x7f4>
   11abc:	ldr	r3, [pc, #12]	; 11ad0 <__assert_fail@plt+0x7f8>
   11ac0:	bl	11158 <__libc_start_main@plt>
   11ac4:	bl	112cc <abort@plt>
   11ac8:	andeq	r9, r2, r8, lsl #31
   11acc:	andeq	r1, r1, r8, ror #5
   11ad0:	andeq	r9, r2, r8, lsr #30
   11ad4:	ldr	r3, [pc, #20]	; 11af0 <__assert_fail@plt+0x818>
   11ad8:	ldr	r2, [pc, #20]	; 11af4 <__assert_fail@plt+0x81c>
   11adc:	add	r3, pc, r3
   11ae0:	ldr	r2, [r3, r2]
   11ae4:	cmp	r2, #0
   11ae8:	bxeq	lr
   11aec:	b	11188 <__gmon_start__@plt>
   11af0:	andeq	sl, r2, ip, lsl r5
   11af4:	andeq	r0, r0, ip, lsl r1
   11af8:	ldr	r3, [pc, #28]	; 11b1c <__assert_fail@plt+0x844>
   11afc:	ldr	r0, [pc, #28]	; 11b20 <__assert_fail@plt+0x848>
   11b00:	sub	r3, r3, r0
   11b04:	cmp	r3, #6
   11b08:	bxls	lr
   11b0c:	ldr	r3, [pc, #16]	; 11b24 <__assert_fail@plt+0x84c>
   11b10:	cmp	r3, #0
   11b14:	bxeq	lr
   11b18:	bx	r3
   11b1c:			; <UNDEFINED> instruction: 0x0003c1b7
   11b20:			; <UNDEFINED> instruction: 0x0003c1b4
   11b24:	andeq	r0, r0, r0
   11b28:	ldr	r1, [pc, #36]	; 11b54 <__assert_fail@plt+0x87c>
   11b2c:	ldr	r0, [pc, #36]	; 11b58 <__assert_fail@plt+0x880>
   11b30:	sub	r1, r1, r0
   11b34:	asr	r1, r1, #2
   11b38:	add	r1, r1, r1, lsr #31
   11b3c:	asrs	r1, r1, #1
   11b40:	bxeq	lr
   11b44:	ldr	r3, [pc, #16]	; 11b5c <__assert_fail@plt+0x884>
   11b48:	cmp	r3, #0
   11b4c:	bxeq	lr
   11b50:	bx	r3
   11b54:			; <UNDEFINED> instruction: 0x0003c1b4
   11b58:			; <UNDEFINED> instruction: 0x0003c1b4
   11b5c:	andeq	r0, r0, r0
   11b60:	push	{r4, lr}
   11b64:	ldr	r4, [pc, #24]	; 11b84 <__assert_fail@plt+0x8ac>
   11b68:	ldrb	r3, [r4]
   11b6c:	cmp	r3, #0
   11b70:	popne	{r4, pc}
   11b74:	bl	11af8 <__assert_fail@plt+0x820>
   11b78:	mov	r3, #1
   11b7c:	strb	r3, [r4]
   11b80:	pop	{r4, pc}
   11b84:	ldrdeq	ip, [r3], -ip	; <UNPREDICTABLE>
   11b88:	ldr	r0, [pc, #40]	; 11bb8 <__assert_fail@plt+0x8e0>
   11b8c:	ldr	r3, [r0]
   11b90:	cmp	r3, #0
   11b94:	bne	11b9c <__assert_fail@plt+0x8c4>
   11b98:	b	11b28 <__assert_fail@plt+0x850>
   11b9c:	ldr	r3, [pc, #24]	; 11bbc <__assert_fail@plt+0x8e4>
   11ba0:	cmp	r3, #0
   11ba4:	beq	11b98 <__assert_fail@plt+0x8c0>
   11ba8:	push	{r4, lr}
   11bac:	blx	r3
   11bb0:	pop	{r4, lr}
   11bb4:	b	11b28 <__assert_fail@plt+0x850>
   11bb8:	andeq	fp, r3, r4, lsl pc
   11bbc:	andeq	r0, r0, r0
   11bc0:	push	{r4, r5, r6, r7, lr}
   11bc4:	sub	sp, sp, #20
   11bc8:	ldr	r4, [pc, #228]	; 11cb4 <__assert_fail@plt+0x9dc>
   11bcc:	ldrb	r3, [r4]
   11bd0:	cmp	r3, #0
   11bd4:	bne	11c94 <__assert_fail@plt+0x9bc>
   11bd8:	ldr	r5, [pc, #216]	; 11cb8 <__assert_fail@plt+0x9e0>
   11bdc:	ldrd	r6, [r4, #8]
   11be0:	mov	r0, #1
   11be4:	ldmib	r5, {r1, r3}
   11be8:	ldr	r2, [r5]
   11bec:	strd	r6, [sp]
   11bf0:	str	r3, [sp, #8]
   11bf4:	bl	1120c <__printf_chk@plt>
   11bf8:	ldrd	r0, [r5, #16]
   11bfc:	cmp	r0, #0
   11c00:	sbcs	r3, r1, #0
   11c04:	ldrd	r2, [r4, #8]
   11c08:	blt	11c70 <__assert_fail@plt+0x998>
   11c0c:	cmp	r2, #0
   11c10:	sbcs	ip, r3, #0
   11c14:	blt	11c5c <__assert_fail@plt+0x984>
   11c18:	mvn	r6, #0
   11c1c:	subs	r6, r6, r0
   11c20:	mvn	r7, #-2147483648	; 0x80000000
   11c24:	sbc	r7, r7, r1
   11c28:	cmp	r6, r2
   11c2c:	sbcs	ip, r7, r3
   11c30:	movlt	ip, #1
   11c34:	movge	ip, #0
   11c38:	cmp	ip, #0
   11c3c:	beq	11c5c <__assert_fail@plt+0x984>
   11c40:	adds	r2, r2, r0
   11c44:	adc	r3, r3, r1
   11c48:	mov	ip, #1
   11c4c:	strb	ip, [r4]
   11c50:	strd	r2, [r4, #8]
   11c54:	add	sp, sp, #20
   11c58:	pop	{r4, r5, r6, r7, pc}
   11c5c:	adds	r2, r2, r0
   11c60:	adc	r3, r3, r1
   11c64:	strd	r2, [r4, #8]
   11c68:	add	sp, sp, #20
   11c6c:	pop	{r4, r5, r6, r7, pc}
   11c70:	mov	r6, #0
   11c74:	subs	r6, r6, r0
   11c78:	mov	r7, #-2147483648	; 0x80000000
   11c7c:	sbc	r7, r7, r1
   11c80:	cmp	r2, r6
   11c84:	sbcs	ip, r3, r7
   11c88:	movlt	ip, #1
   11c8c:	movge	ip, #0
   11c90:	b	11c38 <__assert_fail@plt+0x960>
   11c94:	mov	r2, #5
   11c98:	ldr	r1, [pc, #28]	; 11cbc <__assert_fail@plt+0x9e4>
   11c9c:	mov	r0, #0
   11ca0:	bl	110c8 <dcgettext@plt>
   11ca4:	mov	r1, #0
   11ca8:	mov	r2, r0
   11cac:	mov	r0, #1
   11cb0:	bl	11140 <error@plt>
   11cb4:	andeq	ip, r3, r0, ror #3
   11cb8:	andeq	ip, r3, r8, lsr #2
   11cbc:	andeq	sl, r2, r8, ror #1
   11cc0:	push	{r4, r5, r6, lr}
   11cc4:	ldr	lr, [pc, #232]	; 11db4 <__assert_fail@plt+0xadc>
   11cc8:	ldr	ip, [lr]
   11ccc:	ldrb	r3, [ip]
   11cd0:	sub	r3, r3, #97	; 0x61
   11cd4:	cmp	r3, #19
   11cd8:	ldrls	pc, [pc, r3, lsl #2]
   11cdc:	b	11d98 <__assert_fail@plt+0xac0>
   11ce0:	andeq	r1, r1, ip, lsl #27
   11ce4:	muleq	r1, r8, sp
   11ce8:	muleq	r1, r8, sp
   11cec:	muleq	r1, r8, sp
   11cf0:	muleq	r1, r8, sp
   11cf4:	muleq	r1, r8, sp
   11cf8:	muleq	r1, r8, sp
   11cfc:	muleq	r1, r8, sp
   11d00:	muleq	r1, r8, sp
   11d04:	muleq	r1, r8, sp
   11d08:	muleq	r1, r8, sp
   11d0c:	muleq	r1, r8, sp
   11d10:	muleq	r1, r8, sp
   11d14:	andeq	r1, r1, ip, lsl #27
   11d18:	muleq	r1, r8, sp
   11d1c:	andeq	r1, r1, r0, lsr sp
   11d20:	muleq	r1, r8, sp
   11d24:	muleq	r1, r8, sp
   11d28:	muleq	r1, r8, sp
   11d2c:	andeq	r1, r1, ip, lsl #27
   11d30:	add	r3, ip, #1
   11d34:	mov	r4, r1
   11d38:	str	r3, [lr]
   11d3c:	str	ip, [r0]
   11d40:	ldr	r3, [pc, #112]	; 11db8 <__assert_fail@plt+0xae0>
   11d44:	ldr	r6, [lr]
   11d48:	mov	r5, #0
   11d4c:	ldr	r1, [pc, #104]	; 11dbc <__assert_fail@plt+0xae4>
   11d50:	str	r2, [r4, #16]
   11d54:	str	r5, [r4]
   11d58:	mov	r0, r6
   11d5c:	str	r5, [r4, #4]
   11d60:	str	r5, [r4, #20]
   11d64:	str	r1, [r3]
   11d68:	bl	111b8 <strlen@plt>
   11d6c:	mov	r2, r4
   11d70:	mov	r1, r0
   11d74:	mov	r0, r6
   11d78:	bl	26a70 <__assert_fail@plt+0x15798>
   11d7c:	cmp	r0, #0
   11d80:	bne	11da0 <__assert_fail@plt+0xac8>
   11d84:	mov	r0, #1
   11d88:	pop	{r4, r5, r6, pc}
   11d8c:	str	ip, [r0]
   11d90:	mov	r0, #1
   11d94:	pop	{r4, r5, r6, pc}
   11d98:	mov	r0, #0
   11d9c:	pop	{r4, r5, r6, pc}
   11da0:	mov	r3, r0
   11da4:	mov	r1, r5
   11da8:	ldr	r2, [pc, #16]	; 11dc0 <__assert_fail@plt+0xae8>
   11dac:	mov	r0, #1
   11db0:	bl	11140 <error@plt>
   11db4:	ldrdeq	ip, [r3], -r8
   11db8:	andeq	ip, r3, r8, asr #13
   11dbc:	andeq	r0, r0, r6, asr #5
   11dc0:	andeq	sl, r2, ip, lsl #19
   11dc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dc8:	sub	sp, sp, #20
   11dcc:	ldr	r1, [pc, #920]	; 1216c <__assert_fail@plt+0xe94>
   11dd0:	str	r0, [sp, #12]
   11dd4:	bl	11008 <strcmp@plt>
   11dd8:	cmp	r0, #0
   11ddc:	bne	1210c <__assert_fail@plt+0xe34>
   11de0:	ldr	r3, [pc, #904]	; 12170 <__assert_fail@plt+0xe98>
   11de4:	ldr	r4, [pc, #904]	; 12174 <__assert_fail@plt+0xe9c>
   11de8:	mov	r2, #1
   11dec:	ldr	r6, [r3]
   11df0:	strb	r2, [r4, #16]
   11df4:	mov	r1, #2
   11df8:	mov	r0, r6
   11dfc:	bl	12654 <__assert_fail@plt+0x137c>
   11e00:	ldr	r7, [pc, #880]	; 12178 <__assert_fail@plt+0xea0>
   11e04:	ldr	r8, [pc, #880]	; 1217c <__assert_fail@plt+0xea4>
   11e08:	ldr	r9, [pc, #880]	; 12180 <__assert_fail@plt+0xea8>
   11e0c:	mov	r1, r6
   11e10:	mov	r0, r7
   11e14:	bl	1283c <__assert_fail@plt+0x1564>
   11e18:	cmp	r0, #0
   11e1c:	beq	12080 <__assert_fail@plt+0xda8>
   11e20:	ldr	r5, [r4, #24]
   11e24:	sub	fp, r5, #1
   11e28:	cmp	fp, #1
   11e2c:	bls	11e5c <__assert_fail@plt+0xb84>
   11e30:	ldr	sl, [r4, #32]
   11e34:	cmp	sl, #1
   11e38:	bls	11e5c <__assert_fail@plt+0xb84>
   11e3c:	ldr	r3, [r4, #28]
   11e40:	mov	r2, #2
   11e44:	mov	r0, r3
   11e48:	ldr	r1, [r9, #24]
   11e4c:	str	r3, [sp, #8]
   11e50:	bl	110a4 <memcmp@plt>
   11e54:	cmp	r0, #0
   11e58:	beq	11f80 <__assert_fail@plt+0xca8>
   11e5c:	ldr	r3, [r4, #72]	; 0x48
   11e60:	ldrb	r3, [r3]
   11e64:	sub	r3, r3, #97	; 0x61
   11e68:	cmp	r3, #19
   11e6c:	ldrls	pc, [pc, r3, lsl #2]
   11e70:	b	11ef0 <__assert_fail@plt+0xc18>
   11e74:	andeq	r1, r1, r8, lsl #30
   11e78:	strdeq	r1, [r1], -r0
   11e7c:	strdeq	r1, [r1], -r0
   11e80:	strdeq	r1, [r1], -r0
   11e84:	strdeq	r1, [r1], -r0
   11e88:	strdeq	r1, [r1], -r0
   11e8c:	strdeq	r1, [r1], -r0
   11e90:	strdeq	r1, [r1], -r0
   11e94:	strdeq	r1, [r1], -r0
   11e98:	strdeq	r1, [r1], -r0
   11e9c:	strdeq	r1, [r1], -r0
   11ea0:	strdeq	r1, [r1], -r0
   11ea4:	strdeq	r1, [r1], -r0
   11ea8:	andeq	r1, r1, r0, ror #29
   11eac:	strdeq	r1, [r1], -r0
   11eb0:	andeq	r1, r1, ip, asr #30
   11eb4:	strdeq	r1, [r1], -r0
   11eb8:	strdeq	r1, [r1], -r0
   11ebc:	strdeq	r1, [r1], -r0
   11ec0:	andeq	r1, r1, r8, lsr pc
   11ec4:	ldrd	r2, [r4, #56]	; 0x38
   11ec8:	adds	r2, r2, #1
   11ecc:	adc	r3, r3, #0
   11ed0:	cmp	r1, r3
   11ed4:	cmpeq	r0, r2
   11ed8:	strd	r2, [r4, #56]	; 0x38
   11edc:	beq	11f20 <__assert_fail@plt+0xc48>
   11ee0:	ldr	r1, [r8]
   11ee4:	ldr	r0, [r4, #64]	; 0x40
   11ee8:	bl	10fcc <fputs_unlocked@plt>
   11eec:	ldr	r5, [r4, #24]
   11ef0:	mov	r2, r5
   11ef4:	ldr	r3, [r8]
   11ef8:	mov	r1, #1
   11efc:	ldr	r0, [r4, #28]
   11f00:	bl	11098 <fwrite_unlocked@plt>
   11f04:	b	11e0c <__assert_fail@plt+0xb34>
   11f08:	ldrd	r0, [r9, #40]	; 0x28
   11f0c:	cmp	r0, #2
   11f10:	sbcs	r3, r1, #0
   11f14:	blt	11f40 <__assert_fail@plt+0xc68>
   11f18:	cmp	r5, #1
   11f1c:	ble	11ec4 <__assert_fail@plt+0xbec>
   11f20:	bl	11bc0 <__assert_fail@plt+0x8e8>
   11f24:	mov	r2, #0
   11f28:	mov	r3, #0
   11f2c:	ldr	r5, [r4, #24]
   11f30:	strd	r2, [r4, #56]	; 0x38
   11f34:	b	11ef0 <__assert_fail@plt+0xc18>
   11f38:	cmp	r5, #1
   11f3c:	ble	11ee0 <__assert_fail@plt+0xc08>
   11f40:	bl	11bc0 <__assert_fail@plt+0x8e8>
   11f44:	ldr	r5, [r4, #24]
   11f48:	b	11ef0 <__assert_fail@plt+0xc18>
   11f4c:	mov	sl, #0
   11f50:	ldr	r1, [r4, #28]
   11f54:	ldr	r0, [r4, #68]	; 0x44
   11f58:	mov	r2, fp
   11f5c:	str	fp, [sp]
   11f60:	str	sl, [sp, #4]
   11f64:	mov	r3, sl
   11f68:	bl	27358 <__assert_fail@plt+0x16080>
   11f6c:	cmn	r0, #2
   11f70:	beq	120e4 <__assert_fail@plt+0xe0c>
   11f74:	cmn	r0, #1
   11f78:	beq	11ee0 <__assert_fail@plt+0xc08>
   11f7c:	b	11f40 <__assert_fail@plt+0xc68>
   11f80:	ldr	r2, [r4, #36]	; 0x24
   11f84:	cmp	fp, r2
   11f88:	beq	11fe4 <__assert_fail@plt+0xd0c>
   11f8c:	ldr	r2, [r4, #44]	; 0x2c
   11f90:	cmp	fp, r2
   11f94:	beq	12048 <__assert_fail@plt+0xd70>
   11f98:	cmp	fp, sl
   11f9c:	bne	11e5c <__assert_fail@plt+0xb84>
   11fa0:	ldr	r0, [sp, #8]
   11fa4:	mov	r2, fp
   11fa8:	ldr	r1, [r4, #52]	; 0x34
   11fac:	bl	110a4 <memcmp@plt>
   11fb0:	cmp	r0, #0
   11fb4:	bne	11e5c <__assert_fail@plt+0xb84>
   11fb8:	ldrb	r2, [r9, #52]	; 0x34
   11fbc:	ldr	r3, [r9, #48]	; 0x30
   11fc0:	ldr	r1, [pc, #444]	; 12184 <__assert_fail@plt+0xeac>
   11fc4:	cmp	r2, #0
   11fc8:	str	r1, [r4, #68]	; 0x44
   11fcc:	str	r3, [r4, #72]	; 0x48
   11fd0:	beq	12018 <__assert_fail@plt+0xd40>
   11fd4:	ldrd	r2, [r9, #32]
   11fd8:	strb	r0, [r4]
   11fdc:	strd	r2, [r4, #8]
   11fe0:	b	12018 <__assert_fail@plt+0xd40>
   11fe4:	mov	r2, fp
   11fe8:	ldr	r1, [r4, #40]	; 0x28
   11fec:	ldr	r0, [sp, #8]
   11ff0:	bl	110a4 <memcmp@plt>
   11ff4:	cmp	r0, #0
   11ff8:	bne	11f8c <__assert_fail@plt+0xcb4>
   11ffc:	ldrb	r2, [r9, #52]	; 0x34
   12000:	ldr	r3, [r9, #60]	; 0x3c
   12004:	ldr	r1, [pc, #380]	; 12188 <__assert_fail@plt+0xeb0>
   12008:	cmp	r2, #0
   1200c:	str	r1, [r4, #68]	; 0x44
   12010:	str	r3, [r4, #72]	; 0x48
   12014:	bne	11fd4 <__assert_fail@plt+0xcfc>
   12018:	ldr	r0, [r8]
   1201c:	ldr	r3, [r0, #20]
   12020:	ldr	r2, [r0, #24]
   12024:	cmp	r3, r2
   12028:	addcc	r1, r3, #1
   1202c:	movcc	r2, #10
   12030:	strcc	r1, [r0, #20]
   12034:	strbcc	r2, [r3]
   12038:	bcc	11e0c <__assert_fail@plt+0xb34>
   1203c:	mov	r1, #10
   12040:	bl	11254 <__overflow@plt>
   12044:	b	11e0c <__assert_fail@plt+0xb34>
   12048:	mov	r2, fp
   1204c:	ldr	r1, [r4, #48]	; 0x30
   12050:	ldr	r0, [sp, #8]
   12054:	bl	110a4 <memcmp@plt>
   12058:	cmp	r0, #0
   1205c:	bne	11f98 <__assert_fail@plt+0xcc0>
   12060:	ldrb	r2, [r9, #52]	; 0x34
   12064:	ldr	r3, [r9, #56]	; 0x38
   12068:	ldr	r1, [pc, #284]	; 1218c <__assert_fail@plt+0xeb4>
   1206c:	cmp	r2, #0
   12070:	str	r1, [r4, #68]	; 0x44
   12074:	str	r3, [r4, #72]	; 0x48
   12078:	beq	12018 <__assert_fail@plt+0xd40>
   1207c:	b	11fd4 <__assert_fail@plt+0xcfc>
   12080:	bl	111d0 <__errno_location@plt>
   12084:	ldr	r4, [r6]
   12088:	ldr	r1, [pc, #220]	; 1216c <__assert_fail@plt+0xe94>
   1208c:	ands	r4, r4, #32
   12090:	ldr	r3, [r0]
   12094:	mov	r5, r0
   12098:	ldr	r0, [sp, #12]
   1209c:	movne	r4, r3
   120a0:	bl	11008 <strcmp@plt>
   120a4:	cmp	r0, #0
   120a8:	mov	r0, r6
   120ac:	bne	120c8 <__assert_fail@plt+0xdf0>
   120b0:	bl	11284 <clearerr_unlocked@plt>
   120b4:	cmp	r4, #0
   120b8:	moveq	r0, #1
   120bc:	bne	12128 <__assert_fail@plt+0xe50>
   120c0:	add	sp, sp, #20
   120c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120c8:	bl	12688 <__assert_fail@plt+0x13b0>
   120cc:	cmp	r0, #0
   120d0:	beq	120b4 <__assert_fail@plt+0xddc>
   120d4:	cmp	r4, #0
   120d8:	bne	12128 <__assert_fail@plt+0xe50>
   120dc:	ldr	r4, [r5]
   120e0:	b	120b4 <__assert_fail@plt+0xddc>
   120e4:	bl	111d0 <__errno_location@plt>
   120e8:	mov	r2, #5
   120ec:	ldr	r1, [pc, #156]	; 12190 <__assert_fail@plt+0xeb8>
   120f0:	ldr	r4, [r0]
   120f4:	mov	r0, sl
   120f8:	bl	110c8 <dcgettext@plt>
   120fc:	mov	r1, r4
   12100:	mov	r2, r0
   12104:	mov	r0, #1
   12108:	bl	11140 <error@plt>
   1210c:	ldr	r1, [pc, #128]	; 12194 <__assert_fail@plt+0xebc>
   12110:	ldr	r0, [sp, #12]
   12114:	bl	1129c <fopen64@plt>
   12118:	subs	r6, r0, #0
   1211c:	beq	12158 <__assert_fail@plt+0xe80>
   12120:	ldr	r4, [pc, #76]	; 12174 <__assert_fail@plt+0xe9c>
   12124:	b	11df4 <__assert_fail@plt+0xb1c>
   12128:	ldr	r2, [sp, #12]
   1212c:	mov	r1, #3
   12130:	mov	r0, #0
   12134:	bl	15a40 <__assert_fail@plt+0x4768>
   12138:	mov	r1, r4
   1213c:	ldr	r2, [pc, #84]	; 12198 <__assert_fail@plt+0xec0>
   12140:	mov	r3, r0
   12144:	mov	r0, #0
   12148:	bl	11140 <error@plt>
   1214c:	mov	r0, #0
   12150:	add	sp, sp, #20
   12154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12158:	bl	111d0 <__errno_location@plt>
   1215c:	ldr	r2, [sp, #12]
   12160:	mov	r1, #3
   12164:	ldr	r4, [r0]
   12168:	b	12130 <__assert_fail@plt+0xe58>
   1216c:	andeq	sl, r2, r0, lsl #2
   12170:	ldrdeq	ip, [r3], -r0
   12174:	andeq	ip, r3, r0, ror #3
   12178:	strdeq	ip, [r3], -r4
   1217c:	ldrdeq	ip, [r3], -r4
   12180:	andeq	ip, r3, r8, lsr #2
   12184:	andeq	ip, r3, ip, lsr #4
   12188:	andeq	ip, r3, ip, ror #4
   1218c:	andeq	ip, r3, ip, asr #4
   12190:	andeq	sl, r2, r4, lsl #2
   12194:	andeq	sl, r2, r8, lsr pc
   12198:	andeq	sl, r2, ip, lsl #19
   1219c:	subs	r5, r0, #0
   121a0:	push	{r7, lr}
   121a4:	sub	sp, sp, #56	; 0x38
   121a8:	beq	121e4 <__assert_fail@plt+0xf0c>
   121ac:	ldr	r3, [pc, #804]	; 124d8 <__assert_fail@plt+0x1200>
   121b0:	mov	r2, #5
   121b4:	ldr	r1, [pc, #800]	; 124dc <__assert_fail@plt+0x1204>
   121b8:	mov	r0, #0
   121bc:	ldr	r4, [r3]
   121c0:	bl	110c8 <dcgettext@plt>
   121c4:	ldr	r3, [pc, #788]	; 124e0 <__assert_fail@plt+0x1208>
   121c8:	mov	r1, #1
   121cc:	ldr	r3, [r3]
   121d0:	mov	r2, r0
   121d4:	mov	r0, r4
   121d8:	bl	11224 <__fprintf_chk@plt>
   121dc:	mov	r0, r5
   121e0:	bl	111ac <exit@plt>
   121e4:	mov	r2, #5
   121e8:	ldr	r1, [pc, #756]	; 124e4 <__assert_fail@plt+0x120c>
   121ec:	bl	110c8 <dcgettext@plt>
   121f0:	ldr	r3, [pc, #744]	; 124e0 <__assert_fail@plt+0x1208>
   121f4:	ldr	r6, [pc, #748]	; 124e8 <__assert_fail@plt+0x1210>
   121f8:	ldr	r4, [pc, #748]	; 124ec <__assert_fail@plt+0x1214>
   121fc:	ldr	r2, [r3]
   12200:	mov	r1, r0
   12204:	mov	r0, #1
   12208:	bl	1120c <__printf_chk@plt>
   1220c:	mov	r2, #5
   12210:	ldr	r1, [pc, #728]	; 124f0 <__assert_fail@plt+0x1218>
   12214:	mov	r0, r5
   12218:	bl	110c8 <dcgettext@plt>
   1221c:	ldr	r1, [r6]
   12220:	bl	10fcc <fputs_unlocked@plt>
   12224:	mov	r2, #5
   12228:	ldr	r1, [pc, #708]	; 124f4 <__assert_fail@plt+0x121c>
   1222c:	mov	r0, r5
   12230:	bl	110c8 <dcgettext@plt>
   12234:	ldr	r1, [r6]
   12238:	bl	10fcc <fputs_unlocked@plt>
   1223c:	mov	r2, #5
   12240:	ldr	r1, [pc, #688]	; 124f8 <__assert_fail@plt+0x1220>
   12244:	mov	r0, r5
   12248:	bl	110c8 <dcgettext@plt>
   1224c:	ldr	r1, [r6]
   12250:	bl	10fcc <fputs_unlocked@plt>
   12254:	mov	r2, #5
   12258:	ldr	r1, [pc, #668]	; 124fc <__assert_fail@plt+0x1224>
   1225c:	mov	r0, r5
   12260:	bl	110c8 <dcgettext@plt>
   12264:	ldr	r1, [r6]
   12268:	bl	10fcc <fputs_unlocked@plt>
   1226c:	mov	r2, #5
   12270:	ldr	r1, [pc, #648]	; 12500 <__assert_fail@plt+0x1228>
   12274:	mov	r0, r5
   12278:	bl	110c8 <dcgettext@plt>
   1227c:	ldr	r1, [r6]
   12280:	bl	10fcc <fputs_unlocked@plt>
   12284:	mov	r2, #5
   12288:	ldr	r1, [pc, #628]	; 12504 <__assert_fail@plt+0x122c>
   1228c:	mov	r0, r5
   12290:	bl	110c8 <dcgettext@plt>
   12294:	ldr	r1, [r6]
   12298:	bl	10fcc <fputs_unlocked@plt>
   1229c:	mov	r2, #5
   122a0:	ldr	r1, [pc, #608]	; 12508 <__assert_fail@plt+0x1230>
   122a4:	mov	r0, r5
   122a8:	bl	110c8 <dcgettext@plt>
   122ac:	ldr	r1, [r6]
   122b0:	bl	10fcc <fputs_unlocked@plt>
   122b4:	mov	r2, #5
   122b8:	ldr	r1, [pc, #588]	; 1250c <__assert_fail@plt+0x1234>
   122bc:	mov	r0, r5
   122c0:	bl	110c8 <dcgettext@plt>
   122c4:	ldr	r1, [r6]
   122c8:	bl	10fcc <fputs_unlocked@plt>
   122cc:	mov	r2, #5
   122d0:	ldr	r1, [pc, #568]	; 12510 <__assert_fail@plt+0x1238>
   122d4:	mov	r0, r5
   122d8:	bl	110c8 <dcgettext@plt>
   122dc:	ldr	r1, [r6]
   122e0:	bl	10fcc <fputs_unlocked@plt>
   122e4:	mov	r2, #5
   122e8:	ldr	r1, [pc, #548]	; 12514 <__assert_fail@plt+0x123c>
   122ec:	mov	r0, r5
   122f0:	bl	110c8 <dcgettext@plt>
   122f4:	ldr	r1, [r6]
   122f8:	bl	10fcc <fputs_unlocked@plt>
   122fc:	mov	r2, #5
   12300:	ldr	r1, [pc, #528]	; 12518 <__assert_fail@plt+0x1240>
   12304:	mov	r0, r5
   12308:	bl	110c8 <dcgettext@plt>
   1230c:	ldr	r1, [r6]
   12310:	bl	10fcc <fputs_unlocked@plt>
   12314:	ldm	r4!, {r0, r1, r2, r3}
   12318:	mov	lr, sp
   1231c:	stmia	lr!, {r0, r1, r2, r3}
   12320:	ldm	r4!, {r0, r1, r2, r3}
   12324:	ldr	ip, [sp]
   12328:	stmia	lr!, {r0, r1, r2, r3}
   1232c:	cmp	ip, #0
   12330:	ldm	r4!, {r0, r1, r2, r3}
   12334:	stmia	lr!, {r0, r1, r2, r3}
   12338:	ldm	r4, {r0, r1}
   1233c:	moveq	r4, sp
   12340:	stm	lr, {r0, r1}
   12344:	beq	12374 <__assert_fail@plt+0x109c>
   12348:	ldr	r7, [pc, #460]	; 1251c <__assert_fail@plt+0x1244>
   1234c:	mov	r4, sp
   12350:	b	12360 <__assert_fail@plt+0x1088>
   12354:	ldr	ip, [r4, #8]!
   12358:	cmp	ip, #0
   1235c:	beq	12374 <__assert_fail@plt+0x109c>
   12360:	mov	r1, ip
   12364:	mov	r0, r7
   12368:	bl	11008 <strcmp@plt>
   1236c:	cmp	r0, #0
   12370:	bne	12354 <__assert_fail@plt+0x107c>
   12374:	ldr	r4, [r4, #4]
   12378:	mov	r2, #5
   1237c:	cmp	r4, #0
   12380:	ldr	r1, [pc, #408]	; 12520 <__assert_fail@plt+0x1248>
   12384:	beq	1242c <__assert_fail@plt+0x1154>
   12388:	mov	r0, #0
   1238c:	bl	110c8 <dcgettext@plt>
   12390:	ldr	r3, [pc, #396]	; 12524 <__assert_fail@plt+0x124c>
   12394:	ldr	r2, [pc, #396]	; 12528 <__assert_fail@plt+0x1250>
   12398:	mov	r1, r0
   1239c:	mov	r0, #1
   123a0:	bl	1120c <__printf_chk@plt>
   123a4:	mov	r1, #0
   123a8:	mov	r0, #5
   123ac:	bl	11260 <setlocale@plt>
   123b0:	cmp	r0, #0
   123b4:	ldreq	r7, [pc, #352]	; 1251c <__assert_fail@plt+0x1244>
   123b8:	beq	123d4 <__assert_fail@plt+0x10fc>
   123bc:	mov	r2, #3
   123c0:	ldr	r1, [pc, #356]	; 1252c <__assert_fail@plt+0x1254>
   123c4:	bl	112c0 <strncmp@plt>
   123c8:	ldr	r7, [pc, #332]	; 1251c <__assert_fail@plt+0x1244>
   123cc:	cmp	r0, #0
   123d0:	bne	124bc <__assert_fail@plt+0x11e4>
   123d4:	mov	r2, #5
   123d8:	ldr	r1, [pc, #336]	; 12530 <__assert_fail@plt+0x1258>
   123dc:	mov	r0, #0
   123e0:	bl	110c8 <dcgettext@plt>
   123e4:	ldr	r3, [pc, #304]	; 1251c <__assert_fail@plt+0x1244>
   123e8:	ldr	r2, [pc, #308]	; 12524 <__assert_fail@plt+0x124c>
   123ec:	mov	r1, r0
   123f0:	mov	r0, #1
   123f4:	bl	1120c <__printf_chk@plt>
   123f8:	mov	r2, #5
   123fc:	ldr	r1, [pc, #304]	; 12534 <__assert_fail@plt+0x125c>
   12400:	mov	r0, #0
   12404:	bl	110c8 <dcgettext@plt>
   12408:	ldr	r2, [pc, #296]	; 12538 <__assert_fail@plt+0x1260>
   1240c:	cmp	r4, r7
   12410:	ldr	r3, [pc, #292]	; 1253c <__assert_fail@plt+0x1264>
   12414:	movne	r3, r2
   12418:	mov	r1, r0
   1241c:	mov	r2, r4
   12420:	mov	r0, #1
   12424:	bl	1120c <__printf_chk@plt>
   12428:	b	121dc <__assert_fail@plt+0xf04>
   1242c:	mov	r0, r4
   12430:	bl	110c8 <dcgettext@plt>
   12434:	ldr	r3, [pc, #232]	; 12524 <__assert_fail@plt+0x124c>
   12438:	ldr	r2, [pc, #232]	; 12528 <__assert_fail@plt+0x1250>
   1243c:	mov	r1, r0
   12440:	mov	r0, #1
   12444:	bl	1120c <__printf_chk@plt>
   12448:	mov	r1, r4
   1244c:	mov	r0, #5
   12450:	bl	11260 <setlocale@plt>
   12454:	cmp	r0, #0
   12458:	beq	12470 <__assert_fail@plt+0x1198>
   1245c:	mov	r2, #3
   12460:	ldr	r1, [pc, #196]	; 1252c <__assert_fail@plt+0x1254>
   12464:	bl	112c0 <strncmp@plt>
   12468:	cmp	r0, #0
   1246c:	bne	124b4 <__assert_fail@plt+0x11dc>
   12470:	mov	r2, #5
   12474:	ldr	r1, [pc, #180]	; 12530 <__assert_fail@plt+0x1258>
   12478:	mov	r0, #0
   1247c:	bl	110c8 <dcgettext@plt>
   12480:	ldr	r3, [pc, #148]	; 1251c <__assert_fail@plt+0x1244>
   12484:	ldr	r2, [pc, #152]	; 12524 <__assert_fail@plt+0x124c>
   12488:	mov	r4, r3
   1248c:	mov	r1, r0
   12490:	mov	r0, #1
   12494:	bl	1120c <__printf_chk@plt>
   12498:	ldr	r1, [pc, #148]	; 12534 <__assert_fail@plt+0x125c>
   1249c:	mov	r2, #5
   124a0:	mov	r0, #0
   124a4:	bl	110c8 <dcgettext@plt>
   124a8:	ldr	r3, [pc, #140]	; 1253c <__assert_fail@plt+0x1264>
   124ac:	mov	r1, r0
   124b0:	b	1241c <__assert_fail@plt+0x1144>
   124b4:	ldr	r7, [pc, #96]	; 1251c <__assert_fail@plt+0x1244>
   124b8:	mov	r4, r7
   124bc:	mov	r2, #5
   124c0:	ldr	r1, [pc, #120]	; 12540 <__assert_fail@plt+0x1268>
   124c4:	mov	r0, #0
   124c8:	bl	110c8 <dcgettext@plt>
   124cc:	ldr	r1, [r6]
   124d0:	bl	10fcc <fputs_unlocked@plt>
   124d4:	b	123d4 <__assert_fail@plt+0x10fc>
   124d8:	andeq	ip, r3, r8, asr #3
   124dc:	andeq	sl, r2, ip, lsr #2
   124e0:	muleq	r3, r4, r5
   124e4:	andeq	sl, r2, r4, asr r1
   124e8:	ldrdeq	ip, [r3], -r4
   124ec:			; <UNDEFINED> instruction: 0x00029fb0
   124f0:	andeq	sl, r2, r8, ror r1
   124f4:			; <UNDEFINED> instruction: 0x0002a1b8
   124f8:	strdeq	sl, [r2], -r0
   124fc:	andeq	sl, r2, ip, lsr r2
   12500:	andeq	sl, r2, r0, lsl r3
   12504:	andeq	sl, r2, ip, asr #9
   12508:	andeq	sl, r2, ip, asr r5
   1250c:	andeq	sl, r2, ip, lsl #11
   12510:	andeq	sl, r2, r4, asr #11
   12514:	andeq	sl, r2, r8, lsl #14
   12518:	ldrdeq	sl, [r2], -r4
   1251c:	andeq	sl, r2, r8, lsr #2
   12520:	andeq	sl, r2, r8, ror #16
   12524:	andeq	sl, r2, r0, lsl #17
   12528:	andeq	sl, r2, r8, lsr #17
   1252c:			; <UNDEFINED> instruction: 0x0002a8b8
   12530:	andeq	sl, r2, r4, lsl #18
   12534:	andeq	sl, r2, r0, lsr #18
   12538:	andeq	sl, r2, r4, ror r1
   1253c:	andeq	sl, r2, ip, asr #21
   12540:			; <UNDEFINED> instruction: 0x0002a8bc
   12544:	ldr	r3, [pc, #4]	; 12550 <__assert_fail@plt+0x1278>
   12548:	str	r0, [r3]
   1254c:	bx	lr
   12550:	andeq	ip, r3, ip, lsl #11
   12554:	ldr	r3, [pc, #4]	; 12560 <__assert_fail@plt+0x1288>
   12558:	strb	r0, [r3, #4]
   1255c:	bx	lr
   12560:	andeq	ip, r3, ip, lsl #11
   12564:	ldr	r3, [pc, #192]	; 1262c <__assert_fail@plt+0x1354>
   12568:	push	{r4, r5, r6, lr}
   1256c:	sub	sp, sp, #8
   12570:	ldr	r0, [r3]
   12574:	bl	2956c <__assert_fail@plt+0x18294>
   12578:	cmp	r0, #0
   1257c:	beq	125a0 <__assert_fail@plt+0x12c8>
   12580:	ldr	r4, [pc, #168]	; 12630 <__assert_fail@plt+0x1358>
   12584:	ldrb	r3, [r4, #4]
   12588:	cmp	r3, #0
   1258c:	beq	125bc <__assert_fail@plt+0x12e4>
   12590:	bl	111d0 <__errno_location@plt>
   12594:	ldr	r3, [r0]
   12598:	cmp	r3, #32
   1259c:	bne	125bc <__assert_fail@plt+0x12e4>
   125a0:	ldr	r3, [pc, #140]	; 12634 <__assert_fail@plt+0x135c>
   125a4:	ldr	r0, [r3]
   125a8:	bl	2956c <__assert_fail@plt+0x18294>
   125ac:	cmp	r0, #0
   125b0:	bne	12604 <__assert_fail@plt+0x132c>
   125b4:	add	sp, sp, #8
   125b8:	pop	{r4, r5, r6, pc}
   125bc:	mov	r2, #5
   125c0:	ldr	r1, [pc, #112]	; 12638 <__assert_fail@plt+0x1360>
   125c4:	mov	r0, #0
   125c8:	bl	110c8 <dcgettext@plt>
   125cc:	ldr	r4, [r4]
   125d0:	cmp	r4, #0
   125d4:	mov	r5, r0
   125d8:	beq	12610 <__assert_fail@plt+0x1338>
   125dc:	bl	111d0 <__errno_location@plt>
   125e0:	ldr	r6, [r0]
   125e4:	mov	r0, r4
   125e8:	bl	156d4 <__assert_fail@plt+0x43fc>
   125ec:	mov	r1, r6
   125f0:	str	r5, [sp]
   125f4:	ldr	r2, [pc, #64]	; 1263c <__assert_fail@plt+0x1364>
   125f8:	mov	r3, r0
   125fc:	mov	r0, #0
   12600:	bl	11140 <error@plt>
   12604:	ldr	r3, [pc, #52]	; 12640 <__assert_fail@plt+0x1368>
   12608:	ldr	r0, [r3]
   1260c:	bl	1105c <_exit@plt>
   12610:	bl	111d0 <__errno_location@plt>
   12614:	mov	r3, r5
   12618:	ldr	r2, [pc, #36]	; 12644 <__assert_fail@plt+0x136c>
   1261c:	ldr	r1, [r0]
   12620:	mov	r0, r4
   12624:	bl	11140 <error@plt>
   12628:	b	12604 <__assert_fail@plt+0x132c>
   1262c:	ldrdeq	ip, [r3], -r4
   12630:	andeq	ip, r3, ip, lsl #11
   12634:	andeq	ip, r3, r8, asr #3
   12638:	andeq	sl, r2, ip, lsl ip
   1263c:	andeq	sl, r2, r8, lsr #24
   12640:	andeq	ip, r3, r0, ror r1
   12644:	andeq	sl, r2, ip, lsl #19
   12648:	push	{r4, r5}
   1264c:	pop	{r4, r5}
   12650:	b	11014 <posix_fadvise64@plt>
   12654:	cmp	r0, #0
   12658:	bxeq	lr
   1265c:	push	{r4, lr}
   12660:	sub	sp, sp, #16
   12664:	mov	r4, r1
   12668:	bl	11218 <fileno@plt>
   1266c:	mov	r2, #0
   12670:	mov	r3, #0
   12674:	str	r4, [sp, #8]
   12678:	strd	r2, [sp]
   1267c:	bl	11014 <posix_fadvise64@plt>
   12680:	add	sp, sp, #16
   12684:	pop	{r4, pc}
   12688:	push	{r4, r5, lr}
   1268c:	sub	sp, sp, #12
   12690:	mov	r4, r0
   12694:	bl	11218 <fileno@plt>
   12698:	cmp	r0, #0
   1269c:	mov	r0, r4
   126a0:	blt	1271c <__assert_fail@plt+0x1444>
   126a4:	bl	11164 <__freading@plt>
   126a8:	cmp	r0, #0
   126ac:	bne	126e8 <__assert_fail@plt+0x1410>
   126b0:	mov	r0, r4
   126b4:	bl	12728 <__assert_fail@plt+0x1450>
   126b8:	cmp	r0, #0
   126bc:	beq	12718 <__assert_fail@plt+0x1440>
   126c0:	bl	111d0 <__errno_location@plt>
   126c4:	mov	r5, r0
   126c8:	mov	r0, r4
   126cc:	ldr	r4, [r5]
   126d0:	bl	11230 <fclose@plt>
   126d4:	cmp	r4, #0
   126d8:	mvnne	r0, #0
   126dc:	strne	r4, [r5]
   126e0:	add	sp, sp, #12
   126e4:	pop	{r4, r5, pc}
   126e8:	mov	r0, r4
   126ec:	bl	11218 <fileno@plt>
   126f0:	mov	r3, #1
   126f4:	str	r3, [sp]
   126f8:	mov	r2, #0
   126fc:	mov	r3, #0
   12700:	bl	11104 <lseek64@plt>
   12704:	mvn	r3, #0
   12708:	mvn	r2, #0
   1270c:	cmp	r1, r3
   12710:	cmpeq	r0, r2
   12714:	bne	126b0 <__assert_fail@plt+0x13d8>
   12718:	mov	r0, r4
   1271c:	add	sp, sp, #12
   12720:	pop	{r4, r5, lr}
   12724:	b	11230 <fclose@plt>
   12728:	push	{r4, lr}
   1272c:	subs	r4, r0, #0
   12730:	sub	sp, sp, #8
   12734:	beq	12750 <__assert_fail@plt+0x1478>
   12738:	bl	11164 <__freading@plt>
   1273c:	cmp	r0, #0
   12740:	beq	12750 <__assert_fail@plt+0x1478>
   12744:	ldr	r3, [r4]
   12748:	tst	r3, #256	; 0x100
   1274c:	bne	12760 <__assert_fail@plt+0x1488>
   12750:	mov	r0, r4
   12754:	add	sp, sp, #8
   12758:	pop	{r4, lr}
   1275c:	b	1102c <fflush@plt>
   12760:	mov	r3, #1
   12764:	str	r3, [sp]
   12768:	mov	r2, #0
   1276c:	mov	r3, #0
   12770:	mov	r0, r4
   12774:	bl	12788 <__assert_fail@plt+0x14b0>
   12778:	mov	r0, r4
   1277c:	add	sp, sp, #8
   12780:	pop	{r4, lr}
   12784:	b	1102c <fflush@plt>
   12788:	push	{r4, r5, r6, r7, r8, lr}
   1278c:	sub	sp, sp, #8
   12790:	ldmib	r0, {ip, lr}
   12794:	mov	r4, r0
   12798:	ldr	r5, [sp, #32]
   1279c:	cmp	lr, ip
   127a0:	beq	127b8 <__assert_fail@plt+0x14e0>
   127a4:	str	r5, [sp, #32]
   127a8:	mov	r0, r4
   127ac:	add	sp, sp, #8
   127b0:	pop	{r4, r5, r6, r7, r8, lr}
   127b4:	b	1123c <fseeko64@plt>
   127b8:	ldr	lr, [r0, #20]
   127bc:	ldr	ip, [r0, #16]
   127c0:	cmp	lr, ip
   127c4:	bne	127a4 <__assert_fail@plt+0x14cc>
   127c8:	ldr	r8, [r0, #36]	; 0x24
   127cc:	cmp	r8, #0
   127d0:	bne	127a4 <__assert_fail@plt+0x14cc>
   127d4:	mov	r6, r2
   127d8:	mov	r7, r3
   127dc:	bl	11218 <fileno@plt>
   127e0:	mov	r2, r6
   127e4:	mov	r3, r7
   127e8:	str	r5, [sp]
   127ec:	bl	11104 <lseek64@plt>
   127f0:	mvn	r3, #0
   127f4:	mvn	r2, #0
   127f8:	cmp	r1, r3
   127fc:	cmpeq	r0, r2
   12800:	beq	12820 <__assert_fail@plt+0x1548>
   12804:	ldr	r3, [r4]
   12808:	strd	r0, [r4, #80]	; 0x50
   1280c:	mov	r0, r8
   12810:	bic	r3, r3, #16
   12814:	str	r3, [r4]
   12818:	add	sp, sp, #8
   1281c:	pop	{r4, r5, r6, r7, r8, pc}
   12820:	mvn	r0, #0
   12824:	b	12818 <__assert_fail@plt+0x1540>
   12828:	mov	r3, #0
   1282c:	str	r3, [r0]
   12830:	str	r3, [r0, #4]
   12834:	str	r3, [r0, #8]
   12838:	bx	lr
   1283c:	ldr	r3, [r1]
   12840:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12844:	mov	r5, r1
   12848:	ldr	sl, [r0, #8]
   1284c:	ldr	r1, [r0]
   12850:	tst	r3, #16
   12854:	sub	sp, sp, #12
   12858:	add	fp, sl, r1
   1285c:	moveq	r8, r0
   12860:	moveq	r4, sl
   12864:	moveq	r9, #10
   12868:	beq	12898 <__assert_fail@plt+0x15c0>
   1286c:	b	12948 <__assert_fail@plt+0x1670>
   12870:	add	r0, r3, #1
   12874:	str	r0, [r5, #4]
   12878:	ldrb	r6, [r3]
   1287c:	mov	r7, r6
   12880:	cmp	r4, fp
   12884:	beq	128f0 <__assert_fail@plt+0x1618>
   12888:	cmp	r6, #10
   1288c:	strb	r7, [r4]
   12890:	add	r4, r4, #1
   12894:	beq	12934 <__assert_fail@plt+0x165c>
   12898:	ldr	r3, [r5, #4]
   1289c:	ldr	r0, [r5, #8]
   128a0:	cmp	r3, r0
   128a4:	bcc	12870 <__assert_fail@plt+0x1598>
   128a8:	mov	r0, r5
   128ac:	bl	11248 <__uflow@plt>
   128b0:	cmn	r0, #1
   128b4:	mov	r6, r0
   128b8:	uxtbne	r7, r0
   128bc:	bne	12880 <__assert_fail@plt+0x15a8>
   128c0:	cmp	sl, r4
   128c4:	beq	12948 <__assert_fail@plt+0x1670>
   128c8:	ldr	r3, [r5]
   128cc:	tst	r3, #32
   128d0:	bne	12948 <__assert_fail@plt+0x1670>
   128d4:	ldrb	r3, [r4, #-1]
   128d8:	cmp	r3, #10
   128dc:	beq	12934 <__assert_fail@plt+0x165c>
   128e0:	cmp	r4, fp
   128e4:	mov	r7, r9
   128e8:	mov	r6, #10
   128ec:	bne	12888 <__assert_fail@plt+0x15b0>
   128f0:	mov	r3, #1
   128f4:	str	r3, [sp]
   128f8:	mov	r0, sl
   128fc:	mov	r1, r8
   12900:	mvn	r3, #0
   12904:	mov	r2, #1
   12908:	ldr	r4, [r8]
   1290c:	bl	28234 <__assert_fail@plt+0x16f5c>
   12910:	ldr	r1, [r8]
   12914:	cmp	r6, #10
   12918:	add	r4, r0, r4
   1291c:	str	r0, [r8, #8]
   12920:	mov	sl, r0
   12924:	strb	r7, [r4]
   12928:	add	fp, r0, r1
   1292c:	add	r4, r4, #1
   12930:	bne	12898 <__assert_fail@plt+0x15c0>
   12934:	sub	r4, r4, sl
   12938:	mov	r0, r8
   1293c:	str	r4, [r8, #4]
   12940:	add	sp, sp, #12
   12944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12948:	mov	r0, #0
   1294c:	add	sp, sp, #12
   12950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12954:	ldr	ip, [r1]
   12958:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1295c:	tst	ip, #16
   12960:	ldr	fp, [r0, #8]
   12964:	ldr	r3, [r0]
   12968:	sub	sp, sp, #12
   1296c:	add	r8, fp, r3
   12970:	bne	12a54 <__assert_fail@plt+0x177c>
   12974:	mov	r6, r2
   12978:	mov	r7, r0
   1297c:	mov	r5, r1
   12980:	mov	r4, fp
   12984:	mov	r9, #1
   12988:	b	129b0 <__assert_fail@plt+0x16d8>
   1298c:	add	r1, r3, #1
   12990:	str	r1, [r5, #4]
   12994:	ldrb	sl, [r3]
   12998:	cmp	r4, r8
   1299c:	beq	12a00 <__assert_fail@plt+0x1728>
   129a0:	cmp	sl, r6
   129a4:	strb	sl, [r4]
   129a8:	add	r4, r4, #1
   129ac:	beq	12a40 <__assert_fail@plt+0x1768>
   129b0:	ldr	r3, [r5, #4]
   129b4:	ldr	r1, [r5, #8]
   129b8:	cmp	r3, r1
   129bc:	bcc	1298c <__assert_fail@plt+0x16b4>
   129c0:	mov	r0, r5
   129c4:	bl	11248 <__uflow@plt>
   129c8:	cmn	r0, #1
   129cc:	mov	sl, r0
   129d0:	bne	12998 <__assert_fail@plt+0x16c0>
   129d4:	cmp	fp, r4
   129d8:	beq	12a54 <__assert_fail@plt+0x177c>
   129dc:	ldr	r3, [r5]
   129e0:	tst	r3, #32
   129e4:	bne	12a54 <__assert_fail@plt+0x177c>
   129e8:	ldrb	r3, [r4, #-1]
   129ec:	cmp	r3, r6
   129f0:	beq	12a40 <__assert_fail@plt+0x1768>
   129f4:	cmp	r4, r8
   129f8:	mov	sl, r6
   129fc:	bne	129a0 <__assert_fail@plt+0x16c8>
   12a00:	str	r9, [sp]
   12a04:	mov	r0, fp
   12a08:	mov	r2, #1
   12a0c:	mvn	r3, #0
   12a10:	mov	r1, r7
   12a14:	ldr	r4, [r7]
   12a18:	bl	28234 <__assert_fail@plt+0x16f5c>
   12a1c:	ldr	r2, [r7]
   12a20:	cmp	sl, r6
   12a24:	add	r4, r0, r4
   12a28:	str	r0, [r7, #8]
   12a2c:	mov	fp, r0
   12a30:	strb	sl, [r4]
   12a34:	add	r8, r0, r2
   12a38:	add	r4, r4, #1
   12a3c:	bne	129b0 <__assert_fail@plt+0x16d8>
   12a40:	sub	r4, r4, fp
   12a44:	mov	r0, r7
   12a48:	str	r4, [r7, #4]
   12a4c:	add	sp, sp, #12
   12a50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a54:	mov	r0, #0
   12a58:	add	sp, sp, #12
   12a5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a60:	ldr	r0, [r0, #8]
   12a64:	b	296b0 <__assert_fail@plt+0x183d8>
   12a68:	push	{r4, r5, r6, lr}
   12a6c:	subs	r4, r0, #0
   12a70:	beq	12ae4 <__assert_fail@plt+0x180c>
   12a74:	mov	r1, #47	; 0x2f
   12a78:	bl	1126c <strrchr@plt>
   12a7c:	subs	r5, r0, #0
   12a80:	beq	12ad0 <__assert_fail@plt+0x17f8>
   12a84:	add	r6, r5, #1
   12a88:	sub	r3, r6, r4
   12a8c:	cmp	r3, #6
   12a90:	ble	12ad0 <__assert_fail@plt+0x17f8>
   12a94:	mov	r2, #7
   12a98:	ldr	r1, [pc, #96]	; 12b00 <__assert_fail@plt+0x1828>
   12a9c:	sub	r0, r5, #6
   12aa0:	bl	112c0 <strncmp@plt>
   12aa4:	cmp	r0, #0
   12aa8:	bne	12ad0 <__assert_fail@plt+0x17f8>
   12aac:	mov	r2, #3
   12ab0:	ldr	r1, [pc, #76]	; 12b04 <__assert_fail@plt+0x182c>
   12ab4:	mov	r0, r6
   12ab8:	bl	112c0 <strncmp@plt>
   12abc:	cmp	r0, #0
   12ac0:	movne	r4, r6
   12ac4:	ldreq	r3, [pc, #60]	; 12b08 <__assert_fail@plt+0x1830>
   12ac8:	addeq	r4, r5, #4
   12acc:	streq	r4, [r3]
   12ad0:	ldr	r2, [pc, #52]	; 12b0c <__assert_fail@plt+0x1834>
   12ad4:	ldr	r3, [pc, #52]	; 12b10 <__assert_fail@plt+0x1838>
   12ad8:	str	r4, [r2]
   12adc:	str	r4, [r3]
   12ae0:	pop	{r4, r5, r6, pc}
   12ae4:	ldr	r3, [pc, #40]	; 12b14 <__assert_fail@plt+0x183c>
   12ae8:	mov	r2, #55	; 0x37
   12aec:	mov	r1, #1
   12af0:	ldr	r3, [r3]
   12af4:	ldr	r0, [pc, #28]	; 12b18 <__assert_fail@plt+0x1840>
   12af8:	bl	110f8 <fwrite@plt>
   12afc:	bl	112cc <abort@plt>
   12b00:	andeq	sl, r2, r8, ror #24
   12b04:	andeq	sl, r2, r0, ror ip
   12b08:			; <UNDEFINED> instruction: 0x0003c1b8
   12b0c:	muleq	r3, r4, r5
   12b10:			; <UNDEFINED> instruction: 0x0003c1bc
   12b14:	andeq	ip, r3, r8, asr #3
   12b18:	andeq	sl, r2, r0, lsr ip
   12b1c:	push	{r4, r5, r6, lr}
   12b20:	mov	r4, r0
   12b24:	mov	r5, r1
   12b28:	bl	29708 <__assert_fail@plt+0x18430>
   12b2c:	ldrb	r3, [r0]
   12b30:	bic	r3, r3, #32
   12b34:	cmp	r3, #85	; 0x55
   12b38:	bne	12b98 <__assert_fail@plt+0x18c0>
   12b3c:	ldrb	r3, [r0, #1]
   12b40:	bic	r3, r3, #32
   12b44:	cmp	r3, #84	; 0x54
   12b48:	bne	12bd4 <__assert_fail@plt+0x18fc>
   12b4c:	ldrb	r3, [r0, #2]
   12b50:	bic	r3, r3, #32
   12b54:	cmp	r3, #70	; 0x46
   12b58:	bne	12bd4 <__assert_fail@plt+0x18fc>
   12b5c:	ldrb	r3, [r0, #3]
   12b60:	cmp	r3, #45	; 0x2d
   12b64:	bne	12bd4 <__assert_fail@plt+0x18fc>
   12b68:	ldrb	r3, [r0, #4]
   12b6c:	cmp	r3, #56	; 0x38
   12b70:	bne	12bd4 <__assert_fail@plt+0x18fc>
   12b74:	ldrb	r3, [r0, #5]
   12b78:	cmp	r3, #0
   12b7c:	bne	12bd4 <__assert_fail@plt+0x18fc>
   12b80:	ldrb	r2, [r4]
   12b84:	ldr	r3, [pc, #152]	; 12c24 <__assert_fail@plt+0x194c>
   12b88:	ldr	r0, [pc, #152]	; 12c28 <__assert_fail@plt+0x1950>
   12b8c:	cmp	r2, #96	; 0x60
   12b90:	movne	r0, r3
   12b94:	pop	{r4, r5, r6, pc}
   12b98:	cmp	r3, #71	; 0x47
   12b9c:	bne	12bd4 <__assert_fail@plt+0x18fc>
   12ba0:	ldrb	r3, [r0, #1]
   12ba4:	bic	r3, r3, #32
   12ba8:	cmp	r3, #66	; 0x42
   12bac:	bne	12bd4 <__assert_fail@plt+0x18fc>
   12bb0:	ldrb	r3, [r0, #2]
   12bb4:	cmp	r3, #49	; 0x31
   12bb8:	bne	12bd4 <__assert_fail@plt+0x18fc>
   12bbc:	ldrb	r3, [r0, #3]
   12bc0:	cmp	r3, #56	; 0x38
   12bc4:	bne	12bd4 <__assert_fail@plt+0x18fc>
   12bc8:	ldrb	r3, [r0, #4]
   12bcc:	cmp	r3, #48	; 0x30
   12bd0:	beq	12be8 <__assert_fail@plt+0x1910>
   12bd4:	ldr	r3, [pc, #80]	; 12c2c <__assert_fail@plt+0x1954>
   12bd8:	cmp	r5, #9
   12bdc:	ldr	r0, [pc, #76]	; 12c30 <__assert_fail@plt+0x1958>
   12be0:	movne	r0, r3
   12be4:	pop	{r4, r5, r6, pc}
   12be8:	ldrb	r3, [r0, #5]
   12bec:	cmp	r3, #51	; 0x33
   12bf0:	bne	12bd4 <__assert_fail@plt+0x18fc>
   12bf4:	ldrb	r3, [r0, #6]
   12bf8:	cmp	r3, #48	; 0x30
   12bfc:	bne	12bd4 <__assert_fail@plt+0x18fc>
   12c00:	ldrb	r3, [r0, #7]
   12c04:	cmp	r3, #0
   12c08:	bne	12bd4 <__assert_fail@plt+0x18fc>
   12c0c:	ldrb	r2, [r4]
   12c10:	ldr	r3, [pc, #28]	; 12c34 <__assert_fail@plt+0x195c>
   12c14:	ldr	r0, [pc, #28]	; 12c38 <__assert_fail@plt+0x1960>
   12c18:	cmp	r2, #96	; 0x60
   12c1c:	movne	r0, r3
   12c20:	pop	{r4, r5, r6, pc}
   12c24:	andeq	sl, r2, ip, asr #25
   12c28:	andeq	sl, r2, r8, asr #25
   12c2c:	ldrdeq	sl, [r2], -ip
   12c30:	ldrdeq	sl, [r2], -r8
   12c34:	ldrdeq	sl, [r2], -r4
   12c38:	ldrdeq	sl, [r2], -r0
   12c3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c40:	sub	sp, sp, #140	; 0x8c
   12c44:	mov	r9, r1
   12c48:	str	r3, [sp, #24]
   12c4c:	mov	r3, #1
   12c50:	mov	sl, r0
   12c54:	str	r2, [sp, #44]	; 0x2c
   12c58:	str	r3, [sp, #28]
   12c5c:	bl	11110 <__ctype_get_mb_cur_max@plt>
   12c60:	ldr	r3, [sp, #180]	; 0xb4
   12c64:	mov	fp, r9
   12c68:	mov	r9, sl
   12c6c:	lsr	r3, r3, #1
   12c70:	and	r3, r3, #1
   12c74:	str	r3, [sp, #40]	; 0x28
   12c78:	ldr	r3, [sp, #180]	; 0xb4
   12c7c:	mov	r2, #0
   12c80:	and	r3, r3, #4
   12c84:	str	r3, [sp, #100]	; 0x64
   12c88:	ldr	r3, [sp, #180]	; 0xb4
   12c8c:	str	r2, [sp, #76]	; 0x4c
   12c90:	and	r3, r3, #1
   12c94:	str	r3, [sp, #96]	; 0x60
   12c98:	str	r2, [sp, #36]	; 0x24
   12c9c:	str	r2, [sp, #56]	; 0x38
   12ca0:	str	r2, [sp, #68]	; 0x44
   12ca4:	str	r2, [sp, #72]	; 0x48
   12ca8:	str	r2, [sp, #84]	; 0x54
   12cac:	str	r0, [sp, #80]	; 0x50
   12cb0:	ldr	r3, [sp, #176]	; 0xb0
   12cb4:	cmp	r3, #10
   12cb8:	ldrls	pc, [pc, r3, lsl #2]
   12cbc:	b	13e94 <__assert_fail@plt+0x2bbc>
   12cc0:	andeq	r2, r1, ip, ror #25
   12cc4:	andeq	r3, r1, ip
   12cc8:	andeq	r3, r1, r4, ror #2
   12ccc:	andeq	r3, r1, r0, asr #32
   12cd0:			; <UNDEFINED> instruction: 0x000131b8
   12cd4:	muleq	r1, r8, r1
   12cd8:	andeq	r3, r1, r0, rrx
   12cdc:	andeq	r3, r1, r4, lsl #1
   12ce0:	andeq	r3, r1, ip, lsr #1
   12ce4:	andeq	r3, r1, ip, lsr #1
   12ce8:	andeq	r3, r1, ip, lsr #1
   12cec:	mov	r3, #0
   12cf0:	ldr	r1, [sp, #56]	; 0x38
   12cf4:	ldr	r2, [sp, #176]	; 0xb0
   12cf8:	ldr	lr, [sp, #176]	; 0xb0
   12cfc:	mov	r8, r3
   12d00:	mov	ip, r3
   12d04:	str	r3, [sp, #40]	; 0x28
   12d08:	mov	r3, r1
   12d0c:	cmp	r2, #2
   12d10:	moveq	r3, #0
   12d14:	andne	r3, r3, #1
   12d18:	mov	r0, r3
   12d1c:	str	r3, [sp, #92]	; 0x5c
   12d20:	ldr	r3, [sp, #68]	; 0x44
   12d24:	sub	lr, lr, #2
   12d28:	adds	r2, r3, #0
   12d2c:	movne	r2, #1
   12d30:	and	r3, r1, ip
   12d34:	and	r3, r2, r3
   12d38:	clz	lr, lr
   12d3c:	str	r3, [sp, #88]	; 0x58
   12d40:	lsr	lr, lr, #5
   12d44:	mov	r3, ip
   12d48:	and	r3, r3, lr
   12d4c:	mov	sl, #0
   12d50:	and	r0, r2, r0
   12d54:	str	r3, [sp, #64]	; 0x40
   12d58:	eor	r3, r1, #1
   12d5c:	str	lr, [sp, #52]	; 0x34
   12d60:	str	r0, [sp, #48]	; 0x30
   12d64:	str	r3, [sp, #60]	; 0x3c
   12d68:	ldr	r3, [sp, #24]
   12d6c:	cmn	r3, #1
   12d70:	beq	132a0 <__assert_fail@plt+0x1fc8>
   12d74:	subs	r7, r3, sl
   12d78:	movne	r7, #1
   12d7c:	cmp	r7, #0
   12d80:	beq	132b8 <__assert_fail@plt+0x1fe0>
   12d84:	ldr	r3, [sp, #48]	; 0x30
   12d88:	cmp	r3, #0
   12d8c:	beq	13624 <__assert_fail@plt+0x234c>
   12d90:	ldr	r2, [sp, #68]	; 0x44
   12d94:	ldr	r1, [sp, #24]
   12d98:	cmp	r2, #1
   12d9c:	mov	r3, r2
   12da0:	movls	r3, #0
   12da4:	movhi	r3, #1
   12da8:	cmn	r1, #1
   12dac:	movne	r3, #0
   12db0:	cmp	r3, #0
   12db4:	add	r4, sl, r2
   12db8:	beq	12dc8 <__assert_fail@plt+0x1af0>
   12dbc:	ldr	r0, [sp, #44]	; 0x2c
   12dc0:	bl	111b8 <strlen@plt>
   12dc4:	str	r0, [sp, #24]
   12dc8:	ldr	r3, [sp, #24]
   12dcc:	cmp	r3, r4
   12dd0:	ldr	r3, [sp, #44]	; 0x2c
   12dd4:	add	r5, r3, sl
   12dd8:	bcc	1362c <__assert_fail@plt+0x2354>
   12ddc:	mov	r0, r5
   12de0:	ldr	r2, [sp, #68]	; 0x44
   12de4:	ldr	r1, [sp, #72]	; 0x48
   12de8:	bl	110a4 <memcmp@plt>
   12dec:	cmp	r0, #0
   12df0:	bne	1362c <__assert_fail@plt+0x2354>
   12df4:	ldr	r3, [sp, #40]	; 0x28
   12df8:	cmp	r3, #0
   12dfc:	bne	13fe8 <__assert_fail@plt+0x2d10>
   12e00:	ldrb	r4, [r5]
   12e04:	cmp	r4, #126	; 0x7e
   12e08:	ldrls	pc, [pc, r4, lsl #2]
   12e0c:	b	13f24 <__assert_fail@plt+0x2c4c>
   12e10:	andeq	r3, r1, r4, ror #9
   12e14:	andeq	r3, r1, r4, lsr #30
   12e18:	andeq	r3, r1, r4, lsr #30
   12e1c:	andeq	r3, r1, r4, lsr #30
   12e20:	andeq	r3, r1, r4, lsr #30
   12e24:	andeq	r3, r1, r4, lsr #30
   12e28:	andeq	r3, r1, r4, lsr #30
   12e2c:	ldrdeq	r3, [r1], -r0
   12e30:			; <UNDEFINED> instruction: 0x000134bc
   12e34:	muleq	r1, r8, r4
   12e38:	andeq	r3, r1, r8, ror r4
   12e3c:	andeq	r3, r1, r8, lsr #9
   12e40:	andeq	r3, r1, r0, ror #7
   12e44:	andeq	r3, r1, r4, lsl r6
   12e48:	andeq	r3, r1, r4, lsr #30
   12e4c:	andeq	r3, r1, r4, lsr #30
   12e50:	andeq	r3, r1, r4, lsr #30
   12e54:	andeq	r3, r1, r4, lsr #30
   12e58:	andeq	r3, r1, r4, lsr #30
   12e5c:	andeq	r3, r1, r4, lsr #30
   12e60:	andeq	r3, r1, r4, lsr #30
   12e64:	andeq	r3, r1, r4, lsr #30
   12e68:	andeq	r3, r1, r4, lsr #30
   12e6c:	andeq	r3, r1, r4, lsr #30
   12e70:	andeq	r3, r1, r4, lsr #30
   12e74:	andeq	r3, r1, r4, lsr #30
   12e78:	andeq	r3, r1, r4, lsr #30
   12e7c:	andeq	r3, r1, r4, lsr #30
   12e80:	andeq	r3, r1, r4, lsr #30
   12e84:	andeq	r3, r1, r4, lsr #30
   12e88:	andeq	r3, r1, r4, lsr #30
   12e8c:	andeq	r3, r1, r4, lsr #30
   12e90:	andeq	r3, r1, r4, lsl #12
   12e94:	andeq	r3, r1, r4, ror #11
   12e98:	andeq	r3, r1, r4, ror #11
   12e9c:	andeq	r3, r1, r4, asr #11
   12ea0:	andeq	r3, r1, r4, ror #11
   12ea4:	ldrdeq	r3, [r1], -r0
   12ea8:	andeq	r3, r1, r4, ror #11
   12eac:	andeq	r3, r1, ip, lsr #7
   12eb0:	andeq	r3, r1, r4, ror #11
   12eb4:	andeq	r3, r1, r4, ror #11
   12eb8:	andeq	r3, r1, r4, ror #11
   12ebc:	ldrdeq	r3, [r1], -r0
   12ec0:	ldrdeq	r3, [r1], -r0
   12ec4:	ldrdeq	r3, [r1], -r0
   12ec8:	ldrdeq	r3, [r1], -r0
   12ecc:	ldrdeq	r3, [r1], -r0
   12ed0:	ldrdeq	r3, [r1], -r0
   12ed4:	ldrdeq	r3, [r1], -r0
   12ed8:	ldrdeq	r3, [r1], -r0
   12edc:	ldrdeq	r3, [r1], -r0
   12ee0:	ldrdeq	r3, [r1], -r0
   12ee4:	ldrdeq	r3, [r1], -r0
   12ee8:	ldrdeq	r3, [r1], -r0
   12eec:	ldrdeq	r3, [r1], -r0
   12ef0:	ldrdeq	r3, [r1], -r0
   12ef4:	ldrdeq	r3, [r1], -r0
   12ef8:	ldrdeq	r3, [r1], -r0
   12efc:	andeq	r3, r1, r4, ror #11
   12f00:	andeq	r3, r1, r4, ror #11
   12f04:	andeq	r3, r1, r4, ror #11
   12f08:	andeq	r3, r1, r4, ror #11
   12f0c:	andeq	r3, r1, ip, asr r3
   12f10:	andeq	r3, r1, r4, lsr #30
   12f14:	ldrdeq	r3, [r1], -r0
   12f18:	ldrdeq	r3, [r1], -r0
   12f1c:	ldrdeq	r3, [r1], -r0
   12f20:	ldrdeq	r3, [r1], -r0
   12f24:	ldrdeq	r3, [r1], -r0
   12f28:	ldrdeq	r3, [r1], -r0
   12f2c:	ldrdeq	r3, [r1], -r0
   12f30:	ldrdeq	r3, [r1], -r0
   12f34:	ldrdeq	r3, [r1], -r0
   12f38:	ldrdeq	r3, [r1], -r0
   12f3c:	ldrdeq	r3, [r1], -r0
   12f40:	ldrdeq	r3, [r1], -r0
   12f44:	ldrdeq	r3, [r1], -r0
   12f48:	ldrdeq	r3, [r1], -r0
   12f4c:	ldrdeq	r3, [r1], -r0
   12f50:	ldrdeq	r3, [r1], -r0
   12f54:	ldrdeq	r3, [r1], -r0
   12f58:	ldrdeq	r3, [r1], -r0
   12f5c:	ldrdeq	r3, [r1], -r0
   12f60:	ldrdeq	r3, [r1], -r0
   12f64:	ldrdeq	r3, [r1], -r0
   12f68:	ldrdeq	r3, [r1], -r0
   12f6c:	ldrdeq	r3, [r1], -r0
   12f70:	ldrdeq	r3, [r1], -r0
   12f74:	ldrdeq	r3, [r1], -r0
   12f78:	ldrdeq	r3, [r1], -r0
   12f7c:	andeq	r3, r1, r4, ror #11
   12f80:	andeq	r3, r1, r8, lsr #6
   12f84:	ldrdeq	r3, [r1], -r0
   12f88:	andeq	r3, r1, r4, ror #11
   12f8c:	ldrdeq	r3, [r1], -r0
   12f90:	andeq	r3, r1, r4, ror #11
   12f94:	ldrdeq	r3, [r1], -r0
   12f98:	ldrdeq	r3, [r1], -r0
   12f9c:	ldrdeq	r3, [r1], -r0
   12fa0:	ldrdeq	r3, [r1], -r0
   12fa4:	ldrdeq	r3, [r1], -r0
   12fa8:	ldrdeq	r3, [r1], -r0
   12fac:	ldrdeq	r3, [r1], -r0
   12fb0:	ldrdeq	r3, [r1], -r0
   12fb4:	ldrdeq	r3, [r1], -r0
   12fb8:	ldrdeq	r3, [r1], -r0
   12fbc:	ldrdeq	r3, [r1], -r0
   12fc0:	ldrdeq	r3, [r1], -r0
   12fc4:	ldrdeq	r3, [r1], -r0
   12fc8:	ldrdeq	r3, [r1], -r0
   12fcc:	ldrdeq	r3, [r1], -r0
   12fd0:	ldrdeq	r3, [r1], -r0
   12fd4:	ldrdeq	r3, [r1], -r0
   12fd8:	ldrdeq	r3, [r1], -r0
   12fdc:	ldrdeq	r3, [r1], -r0
   12fe0:	ldrdeq	r3, [r1], -r0
   12fe4:	ldrdeq	r3, [r1], -r0
   12fe8:	ldrdeq	r3, [r1], -r0
   12fec:	ldrdeq	r3, [r1], -r0
   12ff0:	ldrdeq	r3, [r1], -r0
   12ff4:	ldrdeq	r3, [r1], -r0
   12ff8:	ldrdeq	r3, [r1], -r0
   12ffc:	andeq	r3, r1, r0, ror #3
   13000:	andeq	r3, r1, r4, ror #11
   13004:	andeq	r3, r1, r0, ror #3
   13008:	andeq	r3, r1, r4, asr #11
   1300c:	mov	r3, #1
   13010:	str	r3, [sp, #40]	; 0x28
   13014:	str	r3, [sp, #68]	; 0x44
   13018:	mov	r8, #0
   1301c:	ldr	r3, [pc, #4056]	; 13ffc <__assert_fail@plt+0x2d24>
   13020:	str	r3, [sp, #72]	; 0x48
   13024:	mov	r3, #2
   13028:	str	r3, [sp, #176]	; 0xb0
   1302c:	ldr	r1, [sp, #56]	; 0x38
   13030:	mov	r2, r3
   13034:	ldr	ip, [sp, #40]	; 0x28
   13038:	mov	lr, r3
   1303c:	b	12d08 <__assert_fail@plt+0x1a30>
   13040:	mov	r3, #1
   13044:	str	r3, [sp, #56]	; 0x38
   13048:	str	r3, [sp, #68]	; 0x44
   1304c:	str	r3, [sp, #40]	; 0x28
   13050:	ldr	r3, [pc, #4004]	; 13ffc <__assert_fail@plt+0x2d24>
   13054:	mov	r8, #0
   13058:	str	r3, [sp, #72]	; 0x48
   1305c:	b	13024 <__assert_fail@plt+0x1d4c>
   13060:	mov	r3, #1
   13064:	str	r3, [sp, #56]	; 0x38
   13068:	str	r3, [sp, #68]	; 0x44
   1306c:	str	r3, [sp, #40]	; 0x28
   13070:	ldr	r3, [pc, #3976]	; 14000 <__assert_fail@plt+0x2d28>
   13074:	mov	r8, #0
   13078:	str	r3, [sp, #72]	; 0x48
   1307c:	mov	r3, #5
   13080:	b	13028 <__assert_fail@plt+0x1d50>
   13084:	mov	r3, #0
   13088:	str	r3, [sp, #40]	; 0x28
   1308c:	mov	r3, #1
   13090:	str	r3, [sp, #56]	; 0x38
   13094:	mov	r8, #0
   13098:	mov	r1, r3
   1309c:	ldr	r2, [sp, #176]	; 0xb0
   130a0:	ldr	ip, [sp, #40]	; 0x28
   130a4:	ldr	lr, [sp, #176]	; 0xb0
   130a8:	b	12d08 <__assert_fail@plt+0x1a30>
   130ac:	ldr	r3, [sp, #176]	; 0xb0
   130b0:	cmp	r3, #10
   130b4:	beq	130f8 <__assert_fail@plt+0x1e20>
   130b8:	mov	r2, #5
   130bc:	ldr	r1, [pc, #3904]	; 14004 <__assert_fail@plt+0x2d2c>
   130c0:	mov	r0, #0
   130c4:	bl	110c8 <dcgettext@plt>
   130c8:	ldr	r2, [pc, #3892]	; 14004 <__assert_fail@plt+0x2d2c>
   130cc:	cmp	r0, r2
   130d0:	str	r0, [sp, #188]	; 0xbc
   130d4:	beq	14190 <__assert_fail@plt+0x2eb8>
   130d8:	mov	r2, #5
   130dc:	ldr	r1, [pc, #3864]	; 13ffc <__assert_fail@plt+0x2d24>
   130e0:	mov	r0, #0
   130e4:	bl	110c8 <dcgettext@plt>
   130e8:	ldr	r2, [pc, #3852]	; 13ffc <__assert_fail@plt+0x2d24>
   130ec:	cmp	r0, r2
   130f0:	str	r0, [sp, #192]	; 0xc0
   130f4:	beq	14180 <__assert_fail@plt+0x2ea8>
   130f8:	ldr	r8, [sp, #40]	; 0x28
   130fc:	cmp	r8, #0
   13100:	movne	r8, #0
   13104:	bne	13134 <__assert_fail@plt+0x1e5c>
   13108:	ldr	r3, [sp, #188]	; 0xbc
   1310c:	ldrb	r3, [r3]
   13110:	cmp	r3, #0
   13114:	beq	13134 <__assert_fail@plt+0x1e5c>
   13118:	ldr	r2, [sp, #188]	; 0xbc
   1311c:	cmp	fp, r8
   13120:	strbhi	r3, [r9, r8]
   13124:	ldrb	r3, [r2, #1]!
   13128:	add	r8, r8, #1
   1312c:	cmp	r3, #0
   13130:	bne	1311c <__assert_fail@plt+0x1e44>
   13134:	ldr	r0, [sp, #192]	; 0xc0
   13138:	bl	111b8 <strlen@plt>
   1313c:	ldr	r3, [sp, #192]	; 0xc0
   13140:	ldr	r2, [sp, #176]	; 0xb0
   13144:	str	r3, [sp, #72]	; 0x48
   13148:	mov	r3, #1
   1314c:	str	r3, [sp, #56]	; 0x38
   13150:	mov	r1, r3
   13154:	ldr	ip, [sp, #40]	; 0x28
   13158:	ldr	lr, [sp, #176]	; 0xb0
   1315c:	str	r0, [sp, #68]	; 0x44
   13160:	b	12d08 <__assert_fail@plt+0x1a30>
   13164:	ldr	r3, [sp, #40]	; 0x28
   13168:	cmp	r3, #0
   1316c:	beq	13e14 <__assert_fail@plt+0x2b3c>
   13170:	mov	r3, #1
   13174:	str	r3, [sp, #68]	; 0x44
   13178:	ldr	r3, [pc, #3708]	; 13ffc <__assert_fail@plt+0x2d24>
   1317c:	str	r3, [sp, #72]	; 0x48
   13180:	mov	r8, #0
   13184:	ldr	r1, [sp, #56]	; 0x38
   13188:	ldr	r2, [sp, #176]	; 0xb0
   1318c:	ldr	ip, [sp, #40]	; 0x28
   13190:	ldr	lr, [sp, #176]	; 0xb0
   13194:	b	12d08 <__assert_fail@plt+0x1a30>
   13198:	ldr	r3, [sp, #40]	; 0x28
   1319c:	cmp	r3, #0
   131a0:	beq	13e98 <__assert_fail@plt+0x2bc0>
   131a4:	str	r3, [sp, #56]	; 0x38
   131a8:	mov	r3, #1
   131ac:	str	r3, [sp, #68]	; 0x44
   131b0:	ldr	r3, [pc, #3656]	; 14000 <__assert_fail@plt+0x2d28>
   131b4:	b	1317c <__assert_fail@plt+0x1ea4>
   131b8:	ldr	r3, [sp, #40]	; 0x28
   131bc:	cmp	r3, #0
   131c0:	mov	r3, #1
   131c4:	streq	r3, [sp, #56]	; 0x38
   131c8:	beq	13e14 <__assert_fail@plt+0x2b3c>
   131cc:	str	r3, [sp, #68]	; 0x44
   131d0:	ldr	r3, [pc, #3620]	; 13ffc <__assert_fail@plt+0x2d24>
   131d4:	mov	r8, #0
   131d8:	str	r3, [sp, #72]	; 0x48
   131dc:	b	13024 <__assert_fail@plt+0x1d4c>
   131e0:	ldr	r3, [sp, #24]
   131e4:	ldr	r6, [sp, #48]	; 0x30
   131e8:	cmn	r3, #1
   131ec:	beq	13848 <__assert_fail@plt+0x2570>
   131f0:	subs	r3, r3, #1
   131f4:	movne	r3, #1
   131f8:	cmp	r3, #0
   131fc:	beq	135c8 <__assert_fail@plt+0x22f0>
   13200:	ldr	r1, [sp, #52]	; 0x34
   13204:	mov	r7, r3
   13208:	mov	r3, #0
   1320c:	str	r3, [sp, #32]
   13210:	ldr	r3, [sp, #60]	; 0x3c
   13214:	orr	r2, r1, r3
   13218:	ldr	r3, [sp, #40]	; 0x28
   1321c:	eor	r2, r2, #1
   13220:	orr	r2, r3, r2
   13224:	tst	r2, #255	; 0xff
   13228:	bne	13b4c <__assert_fail@plt+0x2874>
   1322c:	cmp	r6, #0
   13230:	bne	1340c <__assert_fail@plt+0x2134>
   13234:	ldr	r3, [sp, #36]	; 0x24
   13238:	add	sl, sl, #1
   1323c:	and	r3, r3, r7
   13240:	uxtb	r6, r3
   13244:	cmp	r6, #0
   13248:	beq	13274 <__assert_fail@plt+0x1f9c>
   1324c:	cmp	fp, r8
   13250:	movhi	r3, #39	; 0x27
   13254:	strbhi	r3, [r9, r8]
   13258:	add	r3, r8, #1
   1325c:	cmp	fp, r3
   13260:	movhi	r2, #39	; 0x27
   13264:	add	r8, r8, #2
   13268:	strbhi	r2, [r9, r3]
   1326c:	mov	r3, #0
   13270:	str	r3, [sp, #36]	; 0x24
   13274:	ldr	r2, [sp, #32]
   13278:	cmp	r8, fp
   1327c:	ldr	r3, [sp, #28]
   13280:	strbcc	r4, [r9, r8]
   13284:	cmp	r2, #0
   13288:	moveq	r3, #0
   1328c:	str	r3, [sp, #28]
   13290:	ldr	r3, [sp, #24]
   13294:	add	r8, r8, #1
   13298:	cmn	r3, #1
   1329c:	bne	12d74 <__assert_fail@plt+0x1a9c>
   132a0:	ldr	r3, [sp, #44]	; 0x2c
   132a4:	ldrb	r3, [r3, sl]
   132a8:	adds	r7, r3, #0
   132ac:	movne	r7, #1
   132b0:	cmp	r7, #0
   132b4:	bne	12d84 <__assert_fail@plt+0x1aac>
   132b8:	ldr	r3, [sp, #64]	; 0x40
   132bc:	cmp	r8, #0
   132c0:	movne	r3, #0
   132c4:	andeq	r3, r3, #1
   132c8:	cmp	r3, #0
   132cc:	str	r3, [sp, #64]	; 0x40
   132d0:	bne	13d74 <__assert_fail@plt+0x2a9c>
   132d4:	ldr	r3, [sp, #40]	; 0x28
   132d8:	ldr	r2, [sp, #52]	; 0x34
   132dc:	eor	r3, r3, #1
   132e0:	ands	r2, r2, r3
   132e4:	beq	141a0 <__assert_fail@plt+0x2ec8>
   132e8:	ldr	r3, [sp, #76]	; 0x4c
   132ec:	cmp	r3, #0
   132f0:	beq	14170 <__assert_fail@plt+0x2e98>
   132f4:	ldr	r3, [sp, #28]
   132f8:	cmp	r3, #0
   132fc:	bne	1412c <__assert_fail@plt+0x2e54>
   13300:	ldr	r2, [sp, #84]	; 0x54
   13304:	clz	r3, fp
   13308:	cmp	r2, #0
   1330c:	lsr	r3, r3, #5
   13310:	moveq	r3, #0
   13314:	cmp	r3, #0
   13318:	beq	140cc <__assert_fail@plt+0x2df4>
   1331c:	mov	fp, r2
   13320:	str	r3, [sp, #76]	; 0x4c
   13324:	b	12cb0 <__assert_fail@plt+0x19d8>
   13328:	ldr	r3, [sp, #176]	; 0xb0
   1332c:	ldr	r6, [sp, #48]	; 0x30
   13330:	cmp	r3, #2
   13334:	beq	1386c <__assert_fail@plt+0x2594>
   13338:	ldr	r3, [sp, #88]	; 0x58
   1333c:	cmp	r3, #0
   13340:	beq	13df0 <__assert_fail@plt+0x2b18>
   13344:	mov	r3, #0
   13348:	add	sl, sl, #1
   1334c:	ldr	r6, [sp, #36]	; 0x24
   13350:	str	r3, [sp, #32]
   13354:	mov	r4, #92	; 0x5c
   13358:	b	13244 <__assert_fail@plt+0x1f6c>
   1335c:	ldr	r3, [sp, #176]	; 0xb0
   13360:	ldr	r6, [sp, #48]	; 0x30
   13364:	cmp	r3, #2
   13368:	beq	1389c <__assert_fail@plt+0x25c4>
   1336c:	cmp	r3, #5
   13370:	bne	13e00 <__assert_fail@plt+0x2b28>
   13374:	ldr	r3, [sp, #100]	; 0x64
   13378:	cmp	r3, #0
   1337c:	beq	13e64 <__assert_fail@plt+0x2b8c>
   13380:	ldr	r2, [sp, #24]
   13384:	add	r3, sl, #2
   13388:	cmp	r2, r3
   1338c:	bls	1339c <__assert_fail@plt+0x20c4>
   13390:	ldrb	r4, [r5, #1]
   13394:	cmp	r4, #63	; 0x3f
   13398:	beq	1400c <__assert_fail@plt+0x2d34>
   1339c:	mov	r1, #0
   133a0:	str	r1, [sp, #32]
   133a4:	mov	r4, #63	; 0x3f
   133a8:	b	13210 <__assert_fail@plt+0x1f38>
   133ac:	ldr	r3, [sp, #176]	; 0xb0
   133b0:	ldr	r6, [sp, #48]	; 0x30
   133b4:	cmp	r3, #2
   133b8:	beq	138c8 <__assert_fail@plt+0x25f0>
   133bc:	str	r7, [sp, #32]
   133c0:	str	r7, [sp, #76]	; 0x4c
   133c4:	mov	r1, #0
   133c8:	mov	r4, #39	; 0x27
   133cc:	b	13210 <__assert_fail@plt+0x1f38>
   133d0:	ldr	r6, [sp, #48]	; 0x30
   133d4:	ldr	r1, [sp, #52]	; 0x34
   133d8:	str	r7, [sp, #32]
   133dc:	b	13210 <__assert_fail@plt+0x1f38>
   133e0:	ldr	r6, [sp, #48]	; 0x30
   133e4:	ldr	r1, [sp, #52]	; 0x34
   133e8:	mov	r4, #12
   133ec:	mov	r3, #102	; 0x66
   133f0:	ldr	r2, [sp, #56]	; 0x38
   133f4:	cmp	r2, #0
   133f8:	streq	r2, [sp, #32]
   133fc:	beq	13210 <__assert_fail@plt+0x1f38>
   13400:	mov	r4, r3
   13404:	mov	r3, #0
   13408:	str	r3, [sp, #32]
   1340c:	ldr	r3, [sp, #40]	; 0x28
   13410:	cmp	r3, #0
   13414:	bne	13b84 <__assert_fail@plt+0x28ac>
   13418:	ldr	r3, [sp, #36]	; 0x24
   1341c:	eor	r3, r3, #1
   13420:	and	r3, r3, r1
   13424:	ands	r3, r3, #255	; 0xff
   13428:	beq	13460 <__assert_fail@plt+0x2188>
   1342c:	cmp	fp, r8
   13430:	movhi	r2, #39	; 0x27
   13434:	strbhi	r2, [r9, r8]
   13438:	add	r2, r8, #1
   1343c:	cmp	fp, r2
   13440:	movhi	r1, #36	; 0x24
   13444:	strbhi	r1, [r9, r2]
   13448:	add	r2, r8, #2
   1344c:	cmp	fp, r2
   13450:	add	r8, r8, #3
   13454:	movhi	r1, #39	; 0x27
   13458:	strbhi	r1, [r9, r2]
   1345c:	str	r3, [sp, #36]	; 0x24
   13460:	cmp	fp, r8
   13464:	movhi	r3, #92	; 0x5c
   13468:	strbhi	r3, [r9, r8]
   1346c:	add	sl, sl, #1
   13470:	add	r8, r8, #1
   13474:	b	13274 <__assert_fail@plt+0x1f9c>
   13478:	ldr	r6, [sp, #48]	; 0x30
   1347c:	mov	r4, #10
   13480:	mov	r3, #110	; 0x6e
   13484:	ldr	r2, [sp, #64]	; 0x40
   13488:	cmp	r2, #0
   1348c:	bne	13f0c <__assert_fail@plt+0x2c34>
   13490:	ldr	r1, [sp, #52]	; 0x34
   13494:	b	133f0 <__assert_fail@plt+0x2118>
   13498:	ldr	r6, [sp, #48]	; 0x30
   1349c:	ldr	r1, [sp, #52]	; 0x34
   134a0:	mov	r3, #116	; 0x74
   134a4:	b	133f0 <__assert_fail@plt+0x2118>
   134a8:	ldr	r6, [sp, #48]	; 0x30
   134ac:	ldr	r1, [sp, #52]	; 0x34
   134b0:	mov	r4, #11
   134b4:	mov	r3, #118	; 0x76
   134b8:	b	133f0 <__assert_fail@plt+0x2118>
   134bc:	ldr	r6, [sp, #48]	; 0x30
   134c0:	ldr	r1, [sp, #52]	; 0x34
   134c4:	mov	r4, #8
   134c8:	mov	r3, #98	; 0x62
   134cc:	b	133f0 <__assert_fail@plt+0x2118>
   134d0:	ldr	r6, [sp, #48]	; 0x30
   134d4:	ldr	r1, [sp, #52]	; 0x34
   134d8:	mov	r4, #7
   134dc:	mov	r3, #97	; 0x61
   134e0:	b	133f0 <__assert_fail@plt+0x2118>
   134e4:	ldr	r3, [sp, #56]	; 0x38
   134e8:	ldr	r6, [sp, #48]	; 0x30
   134ec:	cmp	r3, #0
   134f0:	beq	139b4 <__assert_fail@plt+0x26dc>
   134f4:	ldr	r3, [sp, #40]	; 0x28
   134f8:	cmp	r3, #0
   134fc:	bne	13fe8 <__assert_fail@plt+0x2d10>
   13500:	ldr	r3, [sp, #36]	; 0x24
   13504:	ldr	r2, [sp, #52]	; 0x34
   13508:	eor	r3, r3, #1
   1350c:	ands	r3, r2, r3
   13510:	moveq	r2, r8
   13514:	beq	1354c <__assert_fail@plt+0x2274>
   13518:	cmp	fp, r8
   1351c:	movhi	r2, #39	; 0x27
   13520:	strbhi	r2, [r9, r8]
   13524:	add	r2, r8, #1
   13528:	cmp	fp, r2
   1352c:	movhi	r1, #36	; 0x24
   13530:	strbhi	r1, [r9, r2]
   13534:	add	r2, r8, #2
   13538:	cmp	fp, r2
   1353c:	movhi	r1, #39	; 0x27
   13540:	strbhi	r1, [r9, r2]
   13544:	add	r2, r8, #3
   13548:	str	r3, [sp, #36]	; 0x24
   1354c:	cmp	fp, r2
   13550:	movhi	r3, #92	; 0x5c
   13554:	strbhi	r3, [r9, r2]
   13558:	ldr	r3, [sp, #92]	; 0x5c
   1355c:	add	r8, r2, #1
   13560:	cmp	r3, #0
   13564:	beq	13ee8 <__assert_fail@plt+0x2c10>
   13568:	ldr	r1, [sp, #24]
   1356c:	add	r3, sl, #1
   13570:	cmp	r1, r3
   13574:	bls	135ac <__assert_fail@plt+0x22d4>
   13578:	ldr	r1, [sp, #44]	; 0x2c
   1357c:	ldrb	r3, [r1, r3]
   13580:	sub	r3, r3, #48	; 0x30
   13584:	cmp	r3, #9
   13588:	bhi	135ac <__assert_fail@plt+0x22d4>
   1358c:	cmp	fp, r8
   13590:	movhi	r3, #48	; 0x30
   13594:	strbhi	r3, [r9, r8]
   13598:	add	r3, r2, #2
   1359c:	cmp	fp, r3
   135a0:	add	r8, r2, #3
   135a4:	movhi	r1, #48	; 0x30
   135a8:	strbhi	r1, [r9, r3]
   135ac:	ldr	r3, [sp, #40]	; 0x28
   135b0:	ldr	r1, [sp, #52]	; 0x34
   135b4:	mov	r7, r3
   135b8:	str	r3, [sp, #32]
   135bc:	mov	r4, #48	; 0x30
   135c0:	b	13210 <__assert_fail@plt+0x1f38>
   135c4:	ldr	r6, [sp, #48]	; 0x30
   135c8:	cmp	sl, #0
   135cc:	streq	r7, [sp, #32]
   135d0:	beq	135f0 <__assert_fail@plt+0x2318>
   135d4:	mov	r3, #0
   135d8:	ldr	r1, [sp, #52]	; 0x34
   135dc:	str	r3, [sp, #32]
   135e0:	b	13210 <__assert_fail@plt+0x1f38>
   135e4:	ldr	r6, [sp, #48]	; 0x30
   135e8:	mov	r3, #0
   135ec:	str	r3, [sp, #32]
   135f0:	ldr	r3, [sp, #64]	; 0x40
   135f4:	cmp	r3, #0
   135f8:	bne	13d74 <__assert_fail@plt+0x2a9c>
   135fc:	ldr	r1, [sp, #52]	; 0x34
   13600:	b	13210 <__assert_fail@plt+0x1f38>
   13604:	ldr	r3, [sp, #48]	; 0x30
   13608:	mov	r6, r3
   1360c:	str	r3, [sp, #32]
   13610:	b	135f0 <__assert_fail@plt+0x2318>
   13614:	ldr	r6, [sp, #48]	; 0x30
   13618:	mov	r4, #13
   1361c:	mov	r3, #114	; 0x72
   13620:	b	13484 <__assert_fail@plt+0x21ac>
   13624:	ldr	r3, [sp, #44]	; 0x2c
   13628:	add	r5, r3, sl
   1362c:	ldrb	r4, [r5]
   13630:	cmp	r4, #126	; 0x7e
   13634:	ldrls	pc, [pc, r4, lsl #2]
   13638:	b	139d4 <__assert_fail@plt+0x26fc>
   1363c:	andeq	r3, r1, r4, lsr #19
   13640:	ldrdeq	r3, [r1], -r4
   13644:	ldrdeq	r3, [r1], -r4
   13648:	ldrdeq	r3, [r1], -r4
   1364c:	ldrdeq	r3, [r1], -r4
   13650:	ldrdeq	r3, [r1], -r4
   13654:	ldrdeq	r3, [r1], -r4
   13658:	muleq	r1, ip, r9
   1365c:	muleq	r1, r4, r9
   13660:	andeq	r3, r1, r8, lsl #19
   13664:	andeq	r3, r1, r0, lsl #19
   13668:	andeq	r3, r1, r8, ror r9
   1366c:	andeq	r3, r1, r0, ror r9
   13670:	andeq	r3, r1, r8, ror #18
   13674:	ldrdeq	r3, [r1], -r4
   13678:	ldrdeq	r3, [r1], -r4
   1367c:	ldrdeq	r3, [r1], -r4
   13680:	ldrdeq	r3, [r1], -r4
   13684:	ldrdeq	r3, [r1], -r4
   13688:	ldrdeq	r3, [r1], -r4
   1368c:	ldrdeq	r3, [r1], -r4
   13690:	ldrdeq	r3, [r1], -r4
   13694:	ldrdeq	r3, [r1], -r4
   13698:	ldrdeq	r3, [r1], -r4
   1369c:	ldrdeq	r3, [r1], -r4
   136a0:	ldrdeq	r3, [r1], -r4
   136a4:	ldrdeq	r3, [r1], -r4
   136a8:	ldrdeq	r3, [r1], -r4
   136ac:	ldrdeq	r3, [r1], -r4
   136b0:	ldrdeq	r3, [r1], -r4
   136b4:	ldrdeq	r3, [r1], -r4
   136b8:	ldrdeq	r3, [r1], -r4
   136bc:	andeq	r3, r1, ip, asr r9
   136c0:	andeq	r3, r1, r4, asr r9
   136c4:	andeq	r3, r1, r4, asr r9
   136c8:	andeq	r3, r1, ip, asr #18
   136cc:	andeq	r3, r1, r4, asr r9
   136d0:	andeq	r3, r1, r4, asr #18
   136d4:	andeq	r3, r1, r4, asr r9
   136d8:			; <UNDEFINED> instruction: 0x000138b8
   136dc:	andeq	r3, r1, r4, asr r9
   136e0:	andeq	r3, r1, r4, asr r9
   136e4:	andeq	r3, r1, r4, asr r9
   136e8:	andeq	r3, r1, r4, asr #18
   136ec:	andeq	r3, r1, r4, asr #18
   136f0:	andeq	r3, r1, r4, asr #18
   136f4:	andeq	r3, r1, r4, asr #18
   136f8:	andeq	r3, r1, r4, asr #18
   136fc:	andeq	r3, r1, r4, asr #18
   13700:	andeq	r3, r1, r4, asr #18
   13704:	andeq	r3, r1, r4, asr #18
   13708:	andeq	r3, r1, r4, asr #18
   1370c:	andeq	r3, r1, r4, asr #18
   13710:	andeq	r3, r1, r4, asr #18
   13714:	andeq	r3, r1, r4, asr #18
   13718:	andeq	r3, r1, r4, asr #18
   1371c:	andeq	r3, r1, r4, asr #18
   13720:	andeq	r3, r1, r4, asr #18
   13724:	andeq	r3, r1, r4, asr #18
   13728:	andeq	r3, r1, r4, asr r9
   1372c:	andeq	r3, r1, r4, asr r9
   13730:	andeq	r3, r1, r4, asr r9
   13734:	andeq	r3, r1, r4, asr r9
   13738:	andeq	r3, r1, ip, lsl #17
   1373c:	ldrdeq	r3, [r1], -r4
   13740:	andeq	r3, r1, r4, asr #18
   13744:	andeq	r3, r1, r4, asr #18
   13748:	andeq	r3, r1, r4, asr #18
   1374c:	andeq	r3, r1, r4, asr #18
   13750:	andeq	r3, r1, r4, asr #18
   13754:	andeq	r3, r1, r4, asr #18
   13758:	andeq	r3, r1, r4, asr #18
   1375c:	andeq	r3, r1, r4, asr #18
   13760:	andeq	r3, r1, r4, asr #18
   13764:	andeq	r3, r1, r4, asr #18
   13768:	andeq	r3, r1, r4, asr #18
   1376c:	andeq	r3, r1, r4, asr #18
   13770:	andeq	r3, r1, r4, asr #18
   13774:	andeq	r3, r1, r4, asr #18
   13778:	andeq	r3, r1, r4, asr #18
   1377c:	andeq	r3, r1, r4, asr #18
   13780:	andeq	r3, r1, r4, asr #18
   13784:	andeq	r3, r1, r4, asr #18
   13788:	andeq	r3, r1, r4, asr #18
   1378c:	andeq	r3, r1, r4, asr #18
   13790:	andeq	r3, r1, r4, asr #18
   13794:	andeq	r3, r1, r4, asr #18
   13798:	andeq	r3, r1, r4, asr #18
   1379c:	andeq	r3, r1, r4, asr #18
   137a0:	andeq	r3, r1, r4, asr #18
   137a4:	andeq	r3, r1, r4, asr #18
   137a8:	andeq	r3, r1, r4, asr r9
   137ac:	andeq	r3, r1, ip, asr r8
   137b0:	andeq	r3, r1, r4, asr #18
   137b4:	andeq	r3, r1, r4, asr r9
   137b8:	andeq	r3, r1, r4, asr #18
   137bc:	andeq	r3, r1, r4, asr r9
   137c0:	andeq	r3, r1, r4, asr #18
   137c4:	andeq	r3, r1, r4, asr #18
   137c8:	andeq	r3, r1, r4, asr #18
   137cc:	andeq	r3, r1, r4, asr #18
   137d0:	andeq	r3, r1, r4, asr #18
   137d4:	andeq	r3, r1, r4, asr #18
   137d8:	andeq	r3, r1, r4, asr #18
   137dc:	andeq	r3, r1, r4, asr #18
   137e0:	andeq	r3, r1, r4, asr #18
   137e4:	andeq	r3, r1, r4, asr #18
   137e8:	andeq	r3, r1, r4, asr #18
   137ec:	andeq	r3, r1, r4, asr #18
   137f0:	andeq	r3, r1, r4, asr #18
   137f4:	andeq	r3, r1, r4, asr #18
   137f8:	andeq	r3, r1, r4, asr #18
   137fc:	andeq	r3, r1, r4, asr #18
   13800:	andeq	r3, r1, r4, asr #18
   13804:	andeq	r3, r1, r4, asr #18
   13808:	andeq	r3, r1, r4, asr #18
   1380c:	andeq	r3, r1, r4, asr #18
   13810:	andeq	r3, r1, r4, asr #18
   13814:	andeq	r3, r1, r4, asr #18
   13818:	andeq	r3, r1, r4, asr #18
   1381c:	andeq	r3, r1, r4, asr #18
   13820:	andeq	r3, r1, r4, asr #18
   13824:	andeq	r3, r1, r4, asr #18
   13828:	andeq	r3, r1, r8, lsr r8
   1382c:	andeq	r3, r1, r4, asr r9
   13830:	andeq	r3, r1, r8, lsr r8
   13834:	andeq	r3, r1, ip, asr #18
   13838:	ldr	r3, [sp, #24]
   1383c:	mov	r6, #0
   13840:	cmn	r3, #1
   13844:	bne	131f0 <__assert_fail@plt+0x1f18>
   13848:	ldr	r3, [sp, #44]	; 0x2c
   1384c:	ldrb	r3, [r3, #1]
   13850:	adds	r3, r3, #0
   13854:	movne	r3, #1
   13858:	b	131f8 <__assert_fail@plt+0x1f20>
   1385c:	ldr	r3, [sp, #176]	; 0xb0
   13860:	mov	r6, #0
   13864:	cmp	r3, #2
   13868:	bne	13338 <__assert_fail@plt+0x2060>
   1386c:	ldr	r3, [sp, #64]	; 0x40
   13870:	cmp	r3, #0
   13874:	bne	140ac <__assert_fail@plt+0x2dd4>
   13878:	add	sl, sl, #1
   1387c:	ldr	r6, [sp, #36]	; 0x24
   13880:	str	r3, [sp, #32]
   13884:	mov	r4, #92	; 0x5c
   13888:	b	13244 <__assert_fail@plt+0x1f6c>
   1388c:	ldr	r3, [sp, #176]	; 0xb0
   13890:	mov	r6, #0
   13894:	cmp	r3, #2
   13898:	bne	1336c <__assert_fail@plt+0x2094>
   1389c:	ldr	r3, [sp, #40]	; 0x28
   138a0:	cmp	r3, #0
   138a4:	bne	13b88 <__assert_fail@plt+0x28b0>
   138a8:	mov	r1, r7
   138ac:	str	r3, [sp, #32]
   138b0:	mov	r4, #63	; 0x3f
   138b4:	b	13210 <__assert_fail@plt+0x1f38>
   138b8:	ldr	r3, [sp, #176]	; 0xb0
   138bc:	mov	r6, #0
   138c0:	cmp	r3, #2
   138c4:	bne	133bc <__assert_fail@plt+0x20e4>
   138c8:	ldr	r3, [sp, #64]	; 0x40
   138cc:	cmp	r3, #0
   138d0:	bne	140ac <__assert_fail@plt+0x2dd4>
   138d4:	ldr	r2, [sp, #84]	; 0x54
   138d8:	adds	r3, fp, #0
   138dc:	movne	r3, #1
   138e0:	cmp	r2, #0
   138e4:	movne	r3, #0
   138e8:	cmp	r3, #0
   138ec:	strne	fp, [sp, #84]	; 0x54
   138f0:	movne	fp, #0
   138f4:	bne	13924 <__assert_fail@plt+0x264c>
   138f8:	cmp	fp, r8
   138fc:	movhi	r3, #39	; 0x27
   13900:	strbhi	r3, [r9, r8]
   13904:	add	r3, r8, #1
   13908:	cmp	fp, r3
   1390c:	movhi	r2, #92	; 0x5c
   13910:	strbhi	r2, [r9, r3]
   13914:	add	r3, r8, #2
   13918:	cmp	fp, r3
   1391c:	movhi	r2, #39	; 0x27
   13920:	strbhi	r2, [r9, r3]
   13924:	ldr	r3, [sp, #64]	; 0x40
   13928:	add	r8, r8, #3
   1392c:	mov	r1, r7
   13930:	str	r7, [sp, #32]
   13934:	str	r7, [sp, #76]	; 0x4c
   13938:	str	r3, [sp, #36]	; 0x24
   1393c:	mov	r4, #39	; 0x27
   13940:	b	13210 <__assert_fail@plt+0x1f38>
   13944:	mov	r6, #0
   13948:	b	133d4 <__assert_fail@plt+0x20fc>
   1394c:	mov	r6, #0
   13950:	b	135c8 <__assert_fail@plt+0x22f0>
   13954:	mov	r6, #0
   13958:	b	135e8 <__assert_fail@plt+0x2310>
   1395c:	str	r7, [sp, #32]
   13960:	mov	r6, #0
   13964:	b	135f0 <__assert_fail@plt+0x2318>
   13968:	mov	r6, #0
   1396c:	b	13618 <__assert_fail@plt+0x2340>
   13970:	mov	r6, #0
   13974:	b	133e4 <__assert_fail@plt+0x210c>
   13978:	mov	r6, #0
   1397c:	b	134ac <__assert_fail@plt+0x21d4>
   13980:	mov	r6, #0
   13984:	b	1347c <__assert_fail@plt+0x21a4>
   13988:	mov	r6, #0
   1398c:	mov	r3, #116	; 0x74
   13990:	b	13484 <__assert_fail@plt+0x21ac>
   13994:	mov	r6, #0
   13998:	b	134c0 <__assert_fail@plt+0x21e8>
   1399c:	mov	r6, #0
   139a0:	b	134d4 <__assert_fail@plt+0x21fc>
   139a4:	ldr	r3, [sp, #56]	; 0x38
   139a8:	mov	r6, #0
   139ac:	cmp	r3, #0
   139b0:	bne	134f4 <__assert_fail@plt+0x221c>
   139b4:	ldr	r3, [sp, #96]	; 0x60
   139b8:	cmp	r3, #0
   139bc:	addne	sl, sl, #1
   139c0:	bne	12d68 <__assert_fail@plt+0x1a90>
   139c4:	ldr	r1, [sp, #52]	; 0x34
   139c8:	str	r3, [sp, #32]
   139cc:	mov	r4, r3
   139d0:	b	13210 <__assert_fail@plt+0x1f38>
   139d4:	mov	r6, #0
   139d8:	ldr	r3, [sp, #80]	; 0x50
   139dc:	cmp	r3, #1
   139e0:	bne	13bd0 <__assert_fail@plt+0x28f8>
   139e4:	bl	111a0 <__ctype_b_loc@plt>
   139e8:	ldr	r2, [sp, #80]	; 0x50
   139ec:	sxth	r3, r4
   139f0:	mov	r1, r2
   139f4:	lsl	r3, r3, #1
   139f8:	ldr	r2, [r0]
   139fc:	ldrh	r3, [r2, r3]
   13a00:	and	r3, r3, #16384	; 0x4000
   13a04:	cmp	r3, #0
   13a08:	movne	r3, #1
   13a0c:	moveq	r3, #0
   13a10:	str	r3, [sp, #32]
   13a14:	moveq	r3, #1
   13a18:	movne	r3, #0
   13a1c:	ldr	r2, [sp, #56]	; 0x38
   13a20:	and	r3, r3, r2
   13a24:	ands	r3, r3, #255	; 0xff
   13a28:	beq	135fc <__assert_fail@plt+0x2324>
   13a2c:	add	r1, sl, r1
   13a30:	mov	r0, #0
   13a34:	ldr	r7, [sp, #40]	; 0x28
   13a38:	ldr	r2, [sp, #36]	; 0x24
   13a3c:	ldr	lr, [sp, #52]	; 0x34
   13a40:	b	13af0 <__assert_fail@plt+0x2818>
   13a44:	cmp	r7, #0
   13a48:	bne	13e44 <__assert_fail@plt+0x2b6c>
   13a4c:	eor	r0, r2, #1
   13a50:	ands	r0, lr, r0
   13a54:	beq	13a8c <__assert_fail@plt+0x27b4>
   13a58:	cmp	fp, r8
   13a5c:	movhi	r2, #39	; 0x27
   13a60:	strbhi	r2, [r9, r8]
   13a64:	add	r2, r8, #1
   13a68:	cmp	fp, r2
   13a6c:	movhi	ip, #36	; 0x24
   13a70:	strbhi	ip, [r9, r2]
   13a74:	add	r2, r8, #2
   13a78:	cmp	fp, r2
   13a7c:	movhi	ip, #39	; 0x27
   13a80:	strbhi	ip, [r9, r2]
   13a84:	add	r8, r8, #3
   13a88:	mov	r2, r0
   13a8c:	cmp	fp, r8
   13a90:	movhi	r0, #92	; 0x5c
   13a94:	strbhi	r0, [r9, r8]
   13a98:	add	r0, r8, #1
   13a9c:	cmp	fp, r0
   13aa0:	lsrhi	ip, r4, #6
   13aa4:	addhi	ip, ip, #48	; 0x30
   13aa8:	strbhi	ip, [r9, r0]
   13aac:	add	ip, r8, #2
   13ab0:	cmp	fp, ip
   13ab4:	lsrhi	r0, r4, #3
   13ab8:	andhi	r0, r0, #7
   13abc:	addhi	r0, r0, #48	; 0x30
   13ac0:	add	sl, sl, #1
   13ac4:	strbhi	r0, [r9, ip]
   13ac8:	and	r4, r4, #7
   13acc:	cmp	sl, r1
   13ad0:	add	r4, r4, #48	; 0x30
   13ad4:	add	r8, r8, #3
   13ad8:	bcs	13e5c <__assert_fail@plt+0x2b84>
   13adc:	mov	r0, r3
   13ae0:	cmp	fp, r8
   13ae4:	strbhi	r4, [r9, r8]
   13ae8:	ldrb	r4, [r5, #1]!
   13aec:	add	r8, r8, #1
   13af0:	cmp	r3, #0
   13af4:	bne	13a44 <__assert_fail@plt+0x276c>
   13af8:	cmp	r6, #0
   13afc:	bne	13ba0 <__assert_fail@plt+0x28c8>
   13b00:	eor	r6, r0, #1
   13b04:	and	r6, r6, r2
   13b08:	add	sl, sl, #1
   13b0c:	cmp	r1, sl
   13b10:	uxtb	r6, r6
   13b14:	bls	13bc8 <__assert_fail@plt+0x28f0>
   13b18:	cmp	r6, #0
   13b1c:	beq	13ae0 <__assert_fail@plt+0x2808>
   13b20:	cmp	fp, r8
   13b24:	movhi	r2, #39	; 0x27
   13b28:	strbhi	r2, [r9, r8]
   13b2c:	add	r2, r8, #1
   13b30:	cmp	fp, r2
   13b34:	movhi	ip, #39	; 0x27
   13b38:	strbhi	ip, [r9, r2]
   13b3c:	add	r8, r8, #2
   13b40:	mov	r6, r3
   13b44:	mov	r2, r3
   13b48:	b	13ae0 <__assert_fail@plt+0x2808>
   13b4c:	ldr	r3, [sp, #184]	; 0xb8
   13b50:	cmp	r3, #0
   13b54:	beq	1322c <__assert_fail@plt+0x1f54>
   13b58:	lsr	r2, r4, #5
   13b5c:	mov	r0, r3
   13b60:	uxtb	r2, r2
   13b64:	and	r3, r4, #31
   13b68:	ldr	r2, [r0, r2, lsl #2]
   13b6c:	lsr	r3, r2, r3
   13b70:	tst	r3, #1
   13b74:	beq	1322c <__assert_fail@plt+0x1f54>
   13b78:	ldr	r3, [sp, #40]	; 0x28
   13b7c:	cmp	r3, #0
   13b80:	beq	13418 <__assert_fail@plt+0x2140>
   13b84:	mov	r3, r1
   13b88:	str	r3, [sp, #64]	; 0x40
   13b8c:	mov	sl, r9
   13b90:	ldr	r3, [sp, #56]	; 0x38
   13b94:	mov	r9, fp
   13b98:	ldr	r2, [sp, #64]	; 0x40
   13b9c:	b	13d8c <__assert_fail@plt+0x2ab4>
   13ba0:	cmp	fp, r8
   13ba4:	eor	r6, r0, #1
   13ba8:	movhi	ip, #92	; 0x5c
   13bac:	and	r6, r6, r2
   13bb0:	add	sl, sl, #1
   13bb4:	strbhi	ip, [r9, r8]
   13bb8:	cmp	r1, sl
   13bbc:	add	r8, r8, #1
   13bc0:	uxtb	r6, r6
   13bc4:	bhi	13b18 <__assert_fail@plt+0x2840>
   13bc8:	str	r2, [sp, #36]	; 0x24
   13bcc:	b	13244 <__assert_fail@plt+0x1f6c>
   13bd0:	ldr	r3, [sp, #24]
   13bd4:	cmn	r3, #1
   13bd8:	mov	r3, #0
   13bdc:	str	r3, [sp, #128]	; 0x80
   13be0:	str	r3, [sp, #132]	; 0x84
   13be4:	beq	13ed8 <__assert_fail@plt+0x2c00>
   13be8:	mov	r2, r7
   13bec:	mov	r3, #0
   13bf0:	str	r7, [sp, #104]	; 0x68
   13bf4:	str	r5, [sp, #116]	; 0x74
   13bf8:	mov	r7, r3
   13bfc:	mov	r5, r2
   13c00:	str	r4, [sp, #32]
   13c04:	str	r6, [sp, #108]	; 0x6c
   13c08:	str	r8, [sp, #112]	; 0x70
   13c0c:	ldr	r3, [sp, #44]	; 0x2c
   13c10:	add	r6, sl, r7
   13c14:	add	r4, r3, r6
   13c18:	ldr	r3, [sp, #24]
   13c1c:	mov	r1, r4
   13c20:	sub	r2, r3, r6
   13c24:	add	r0, sp, #124	; 0x7c
   13c28:	add	r3, sp, #128	; 0x80
   13c2c:	bl	2973c <__assert_fail@plt+0x18464>
   13c30:	subs	r8, r0, #0
   13c34:	beq	13fbc <__assert_fail@plt+0x2ce4>
   13c38:	cmn	r8, #1
   13c3c:	beq	13f94 <__assert_fail@plt+0x2cbc>
   13c40:	cmn	r8, #2
   13c44:	beq	13f2c <__assert_fail@plt+0x2c54>
   13c48:	ldr	r3, [sp, #64]	; 0x40
   13c4c:	cmp	r3, #0
   13c50:	beq	13d10 <__assert_fail@plt+0x2a38>
   13c54:	cmp	r8, #1
   13c58:	beq	13d10 <__assert_fail@plt+0x2a38>
   13c5c:	sub	r3, r8, #1
   13c60:	add	r6, r3, r6
   13c64:	ldr	r3, [sp, #44]	; 0x2c
   13c68:	add	r6, r3, r6
   13c6c:	ldrb	r3, [r4, #1]!
   13c70:	sub	r3, r3, #91	; 0x5b
   13c74:	cmp	r3, #33	; 0x21
   13c78:	ldrls	pc, [pc, r3, lsl #2]
   13c7c:	b	13d08 <__assert_fail@plt+0x2a30>
   13c80:	andeq	r3, r1, r4, ror sp
   13c84:	andeq	r3, r1, r4, ror sp
   13c88:	andeq	r3, r1, r8, lsl #26
   13c8c:	andeq	r3, r1, r4, ror sp
   13c90:	andeq	r3, r1, r8, lsl #26
   13c94:	andeq	r3, r1, r4, ror sp
   13c98:	andeq	r3, r1, r8, lsl #26
   13c9c:	andeq	r3, r1, r8, lsl #26
   13ca0:	andeq	r3, r1, r8, lsl #26
   13ca4:	andeq	r3, r1, r8, lsl #26
   13ca8:	andeq	r3, r1, r8, lsl #26
   13cac:	andeq	r3, r1, r8, lsl #26
   13cb0:	andeq	r3, r1, r8, lsl #26
   13cb4:	andeq	r3, r1, r8, lsl #26
   13cb8:	andeq	r3, r1, r8, lsl #26
   13cbc:	andeq	r3, r1, r8, lsl #26
   13cc0:	andeq	r3, r1, r8, lsl #26
   13cc4:	andeq	r3, r1, r8, lsl #26
   13cc8:	andeq	r3, r1, r8, lsl #26
   13ccc:	andeq	r3, r1, r8, lsl #26
   13cd0:	andeq	r3, r1, r8, lsl #26
   13cd4:	andeq	r3, r1, r8, lsl #26
   13cd8:	andeq	r3, r1, r8, lsl #26
   13cdc:	andeq	r3, r1, r8, lsl #26
   13ce0:	andeq	r3, r1, r8, lsl #26
   13ce4:	andeq	r3, r1, r8, lsl #26
   13ce8:	andeq	r3, r1, r8, lsl #26
   13cec:	andeq	r3, r1, r8, lsl #26
   13cf0:	andeq	r3, r1, r8, lsl #26
   13cf4:	andeq	r3, r1, r8, lsl #26
   13cf8:	andeq	r3, r1, r8, lsl #26
   13cfc:	andeq	r3, r1, r8, lsl #26
   13d00:	andeq	r3, r1, r8, lsl #26
   13d04:	andeq	r3, r1, r4, ror sp
   13d08:	cmp	r6, r4
   13d0c:	bne	13c6c <__assert_fail@plt+0x2994>
   13d10:	ldr	r0, [sp, #124]	; 0x7c
   13d14:	bl	110ec <iswprint@plt>
   13d18:	add	r7, r7, r8
   13d1c:	cmp	r0, #0
   13d20:	add	r0, sp, #128	; 0x80
   13d24:	moveq	r5, #0
   13d28:	bl	1108c <mbsinit@plt>
   13d2c:	cmp	r0, #0
   13d30:	beq	13c0c <__assert_fail@plt+0x2934>
   13d34:	ldr	r4, [sp, #32]
   13d38:	str	r5, [sp, #32]
   13d3c:	ldr	r3, [sp, #32]
   13d40:	mov	r1, r7
   13d44:	eor	r3, r3, #1
   13d48:	ldr	r7, [sp, #104]	; 0x68
   13d4c:	ldr	r6, [sp, #108]	; 0x6c
   13d50:	ldr	r8, [sp, #112]	; 0x70
   13d54:	ldr	r5, [sp, #116]	; 0x74
   13d58:	uxtb	r3, r3
   13d5c:	cmp	r1, #1
   13d60:	bls	13a1c <__assert_fail@plt+0x2744>
   13d64:	ldr	r2, [sp, #56]	; 0x38
   13d68:	and	r3, r3, r2
   13d6c:	uxtb	r3, r3
   13d70:	b	13a2c <__assert_fail@plt+0x2754>
   13d74:	mov	r3, #2
   13d78:	str	r3, [sp, #176]	; 0xb0
   13d7c:	ldr	r2, [sp, #64]	; 0x40
   13d80:	ldr	r3, [sp, #56]	; 0x38
   13d84:	mov	sl, r9
   13d88:	mov	r9, fp
   13d8c:	and	r3, r3, r2
   13d90:	tst	r3, #255	; 0xff
   13d94:	ldr	r3, [sp, #176]	; 0xb0
   13d98:	movne	r3, #4
   13d9c:	str	r3, [sp, #176]	; 0xb0
   13da0:	ldr	r3, [sp, #180]	; 0xb4
   13da4:	mov	ip, #0
   13da8:	bic	r3, r3, #2
   13dac:	str	r3, [sp, #4]
   13db0:	ldr	r3, [sp, #192]	; 0xc0
   13db4:	ldr	r2, [sp, #44]	; 0x2c
   13db8:	str	r3, [sp, #16]
   13dbc:	ldr	r3, [sp, #188]	; 0xbc
   13dc0:	mov	r1, r9
   13dc4:	str	r3, [sp, #12]
   13dc8:	ldr	r3, [sp, #176]	; 0xb0
   13dcc:	mov	r0, sl
   13dd0:	str	r3, [sp]
   13dd4:	str	ip, [sp, #8]
   13dd8:	ldr	r3, [sp, #24]
   13ddc:	bl	12c3c <__assert_fail@plt+0x1964>
   13de0:	mov	fp, r0
   13de4:	mov	r0, fp
   13de8:	add	sp, sp, #140	; 0x8c
   13dec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13df0:	mov	r4, #92	; 0x5c
   13df4:	mov	r1, #0
   13df8:	mov	r3, r4
   13dfc:	b	133f0 <__assert_fail@plt+0x2118>
   13e00:	mov	r3, #0
   13e04:	ldr	r1, [sp, #52]	; 0x34
   13e08:	str	r3, [sp, #32]
   13e0c:	mov	r4, #63	; 0x3f
   13e10:	b	13210 <__assert_fail@plt+0x1f38>
   13e14:	cmp	fp, #0
   13e18:	beq	13e74 <__assert_fail@plt+0x2b9c>
   13e1c:	mov	r3, #39	; 0x27
   13e20:	strb	r3, [r9]
   13e24:	mov	r3, #0
   13e28:	str	r3, [sp, #40]	; 0x28
   13e2c:	mov	r3, #1
   13e30:	str	r3, [sp, #68]	; 0x44
   13e34:	ldr	r3, [pc, #448]	; 13ffc <__assert_fail@plt+0x2d24>
   13e38:	mov	r8, #1
   13e3c:	str	r3, [sp, #72]	; 0x48
   13e40:	b	13024 <__assert_fail@plt+0x1d4c>
   13e44:	ldr	r3, [sp, #40]	; 0x28
   13e48:	mov	sl, r9
   13e4c:	str	r3, [sp, #56]	; 0x38
   13e50:	mov	r9, fp
   13e54:	ldr	r2, [sp, #64]	; 0x40
   13e58:	b	13d8c <__assert_fail@plt+0x2ab4>
   13e5c:	str	r2, [sp, #36]	; 0x24
   13e60:	b	13274 <__assert_fail@plt+0x1f9c>
   13e64:	mov	r1, #0
   13e68:	str	r3, [sp, #32]
   13e6c:	mov	r4, #63	; 0x3f
   13e70:	b	13210 <__assert_fail@plt+0x1f38>
   13e74:	ldr	r3, [pc, #384]	; 13ffc <__assert_fail@plt+0x2d24>
   13e78:	str	r3, [sp, #72]	; 0x48
   13e7c:	mov	r3, #0
   13e80:	str	r3, [sp, #40]	; 0x28
   13e84:	mov	r3, #1
   13e88:	str	r3, [sp, #68]	; 0x44
   13e8c:	mov	r8, r3
   13e90:	b	13024 <__assert_fail@plt+0x1d4c>
   13e94:	bl	112cc <abort@plt>
   13e98:	cmp	fp, #0
   13e9c:	beq	13efc <__assert_fail@plt+0x2c24>
   13ea0:	mov	r2, #1
   13ea4:	mov	r3, #34	; 0x22
   13ea8:	strb	r3, [r9]
   13eac:	mov	r8, r2
   13eb0:	mov	r3, r2
   13eb4:	str	r2, [sp, #68]	; 0x44
   13eb8:	str	r3, [sp, #56]	; 0x38
   13ebc:	ldr	r3, [pc, #316]	; 14000 <__assert_fail@plt+0x2d28>
   13ec0:	ldr	r1, [sp, #56]	; 0x38
   13ec4:	str	r3, [sp, #72]	; 0x48
   13ec8:	ldr	r2, [sp, #176]	; 0xb0
   13ecc:	ldr	ip, [sp, #40]	; 0x28
   13ed0:	ldr	lr, [sp, #176]	; 0xb0
   13ed4:	b	12d08 <__assert_fail@plt+0x1a30>
   13ed8:	ldr	r0, [sp, #44]	; 0x2c
   13edc:	bl	111b8 <strlen@plt>
   13ee0:	str	r0, [sp, #24]
   13ee4:	b	13be8 <__assert_fail@plt+0x2910>
   13ee8:	mov	r7, #0
   13eec:	ldr	r1, [sp, #52]	; 0x34
   13ef0:	str	r3, [sp, #32]
   13ef4:	mov	r4, #48	; 0x30
   13ef8:	b	13210 <__assert_fail@plt+0x1f38>
   13efc:	mov	r3, #1
   13f00:	str	r3, [sp, #68]	; 0x44
   13f04:	mov	r8, r3
   13f08:	b	13eb8 <__assert_fail@plt+0x2be0>
   13f0c:	mov	r3, #2
   13f10:	mov	sl, r9
   13f14:	str	r3, [sp, #176]	; 0xb0
   13f18:	mov	r9, fp
   13f1c:	ldr	r3, [sp, #56]	; 0x38
   13f20:	b	13d8c <__assert_fail@plt+0x2ab4>
   13f24:	ldr	r6, [sp, #48]	; 0x30
   13f28:	b	139d8 <__assert_fail@plt+0x2700>
   13f2c:	ldr	r0, [sp, #24]
   13f30:	mov	ip, r6
   13f34:	cmp	r0, ip
   13f38:	mov	r1, r7
   13f3c:	mov	r2, r4
   13f40:	ldr	r7, [sp, #104]	; 0x68
   13f44:	ldr	r4, [sp, #32]
   13f48:	ldr	r6, [sp, #108]	; 0x6c
   13f4c:	ldr	r8, [sp, #112]	; 0x70
   13f50:	ldr	r5, [sp, #116]	; 0x74
   13f54:	bls	13f84 <__assert_fail@plt+0x2cac>
   13f58:	ldrb	r3, [r2]
   13f5c:	cmp	r3, #0
   13f60:	bne	13f74 <__assert_fail@plt+0x2c9c>
   13f64:	b	14094 <__assert_fail@plt+0x2dbc>
   13f68:	ldrb	r3, [r2, #1]!
   13f6c:	cmp	r3, #0
   13f70:	beq	14094 <__assert_fail@plt+0x2dbc>
   13f74:	add	r1, r1, #1
   13f78:	add	r3, sl, r1
   13f7c:	cmp	r0, r3
   13f80:	bhi	13f68 <__assert_fail@plt+0x2c90>
   13f84:	mov	r2, #0
   13f88:	mov	r3, r7
   13f8c:	str	r2, [sp, #32]
   13f90:	b	13d5c <__assert_fail@plt+0x2a84>
   13f94:	mov	r1, r7
   13f98:	ldr	r7, [sp, #104]	; 0x68
   13f9c:	mov	r2, #0
   13fa0:	ldr	r4, [sp, #32]
   13fa4:	ldr	r6, [sp, #108]	; 0x6c
   13fa8:	ldr	r8, [sp, #112]	; 0x70
   13fac:	ldr	r5, [sp, #116]	; 0x74
   13fb0:	mov	r3, r7
   13fb4:	str	r2, [sp, #32]
   13fb8:	b	13d5c <__assert_fail@plt+0x2a84>
   13fbc:	mov	r3, r5
   13fc0:	eor	r3, r3, #1
   13fc4:	ldr	r4, [sp, #32]
   13fc8:	mov	r1, r7
   13fcc:	str	r5, [sp, #32]
   13fd0:	ldr	r7, [sp, #104]	; 0x68
   13fd4:	ldr	r6, [sp, #108]	; 0x6c
   13fd8:	ldr	r8, [sp, #112]	; 0x70
   13fdc:	ldr	r5, [sp, #116]	; 0x74
   13fe0:	uxtb	r3, r3
   13fe4:	b	13d5c <__assert_fail@plt+0x2a84>
   13fe8:	mov	sl, r9
   13fec:	str	r3, [sp, #56]	; 0x38
   13ff0:	mov	r9, fp
   13ff4:	ldr	r2, [sp, #64]	; 0x40
   13ff8:	b	13d8c <__assert_fail@plt+0x2ab4>
   13ffc:	ldrdeq	sl, [r2], -ip
   14000:	ldrdeq	sl, [r2], -r8
   14004:	andeq	sl, r2, r0, ror #25
   14008:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1400c:	ldr	r2, [sp, #44]	; 0x2c
   14010:	ldrb	r1, [r2, r3]
   14014:	sub	r2, r1, #33	; 0x21
   14018:	uxtb	r2, r2
   1401c:	cmp	r2, #29
   14020:	bhi	140a0 <__assert_fail@plt+0x2dc8>
   14024:	ldr	r0, [pc, #-36]	; 14008 <__assert_fail@plt+0x2d30>
   14028:	mov	ip, #1
   1402c:	ands	r2, r0, ip, lsl r2
   14030:	beq	140c0 <__assert_fail@plt+0x2de8>
   14034:	ldr	r2, [sp, #40]	; 0x28
   14038:	cmp	r2, #0
   1403c:	bne	141b4 <__assert_fail@plt+0x2edc>
   14040:	add	r2, r8, #1
   14044:	cmp	fp, r8
   14048:	strbhi	r4, [r9, r8]
   1404c:	cmp	fp, r2
   14050:	movhi	r0, #34	; 0x22
   14054:	strbhi	r0, [r9, r2]
   14058:	add	r2, r8, #2
   1405c:	cmp	fp, r2
   14060:	movhi	r0, #34	; 0x22
   14064:	strbhi	r0, [r9, r2]
   14068:	add	r2, r8, #3
   1406c:	cmp	fp, r2
   14070:	mov	sl, r3
   14074:	ldr	r3, [sp, #40]	; 0x28
   14078:	movhi	r0, #63	; 0x3f
   1407c:	mov	r4, r1
   14080:	strbhi	r0, [r9, r2]
   14084:	add	r8, r8, #4
   14088:	mov	r1, r3
   1408c:	str	r3, [sp, #32]
   14090:	b	13210 <__assert_fail@plt+0x1f38>
   14094:	str	r3, [sp, #32]
   14098:	mov	r3, r7
   1409c:	b	13d5c <__assert_fail@plt+0x2a84>
   140a0:	mov	r1, #0
   140a4:	str	r1, [sp, #32]
   140a8:	b	13210 <__assert_fail@plt+0x1f38>
   140ac:	mov	sl, r9
   140b0:	ldr	r3, [sp, #56]	; 0x38
   140b4:	mov	r9, fp
   140b8:	ldr	r2, [sp, #64]	; 0x40
   140bc:	b	13d8c <__assert_fail@plt+0x2ab4>
   140c0:	str	r2, [sp, #32]
   140c4:	mov	r1, #0
   140c8:	b	13210 <__assert_fail@plt+0x1f38>
   140cc:	ldr	r2, [sp, #76]	; 0x4c
   140d0:	mov	sl, r9
   140d4:	mov	r9, fp
   140d8:	mov	fp, r8
   140dc:	ldr	r1, [sp, #72]	; 0x48
   140e0:	cmp	r1, #0
   140e4:	moveq	r3, #0
   140e8:	andne	r3, r2, #1
   140ec:	cmp	r3, #0
   140f0:	beq	1411c <__assert_fail@plt+0x2e44>
   140f4:	ldrb	r3, [r1]
   140f8:	cmp	r3, #0
   140fc:	beq	1411c <__assert_fail@plt+0x2e44>
   14100:	mov	r2, r1
   14104:	cmp	r9, fp
   14108:	strbhi	r3, [sl, fp]
   1410c:	ldrb	r3, [r2, #1]!
   14110:	add	fp, fp, #1
   14114:	cmp	r3, #0
   14118:	bne	14104 <__assert_fail@plt+0x2e2c>
   1411c:	cmp	r9, fp
   14120:	movhi	r3, #0
   14124:	strbhi	r3, [sl, fp]
   14128:	b	13de4 <__assert_fail@plt+0x2b0c>
   1412c:	ldr	r3, [sp, #192]	; 0xc0
   14130:	mov	ip, #5
   14134:	str	r3, [sp, #16]
   14138:	ldr	r3, [sp, #188]	; 0xbc
   1413c:	ldr	r2, [sp, #44]	; 0x2c
   14140:	str	r3, [sp, #12]
   14144:	ldr	r3, [sp, #184]	; 0xb8
   14148:	ldr	r1, [sp, #84]	; 0x54
   1414c:	str	r3, [sp, #8]
   14150:	ldr	r3, [sp, #180]	; 0xb4
   14154:	mov	r0, r9
   14158:	str	r3, [sp, #4]
   1415c:	str	ip, [sp]
   14160:	ldr	r3, [sp, #24]
   14164:	bl	12c3c <__assert_fail@plt+0x1964>
   14168:	mov	fp, r0
   1416c:	b	13de4 <__assert_fail@plt+0x2b0c>
   14170:	mov	sl, r9
   14174:	mov	r9, fp
   14178:	mov	fp, r8
   1417c:	b	140dc <__assert_fail@plt+0x2e04>
   14180:	ldr	r1, [sp, #176]	; 0xb0
   14184:	bl	12b1c <__assert_fail@plt+0x1844>
   14188:	str	r0, [sp, #192]	; 0xc0
   1418c:	b	130f8 <__assert_fail@plt+0x1e20>
   14190:	ldr	r1, [sp, #176]	; 0xb0
   14194:	bl	12b1c <__assert_fail@plt+0x1844>
   14198:	str	r0, [sp, #188]	; 0xbc
   1419c:	b	130d8 <__assert_fail@plt+0x1e00>
   141a0:	mov	sl, r9
   141a4:	mov	r2, r3
   141a8:	mov	r9, fp
   141ac:	mov	fp, r8
   141b0:	b	140dc <__assert_fail@plt+0x2e04>
   141b4:	mov	sl, r9
   141b8:	mov	r9, fp
   141bc:	b	13da0 <__assert_fail@plt+0x2ac8>
   141c0:	push	{r4, r5, r6, lr}
   141c4:	mov	r5, r0
   141c8:	bl	111d0 <__errno_location@plt>
   141cc:	cmp	r5, #0
   141d0:	mov	r1, #48	; 0x30
   141d4:	mov	r4, r0
   141d8:	ldr	r0, [pc, #16]	; 141f0 <__assert_fail@plt+0x2f18>
   141dc:	ldr	r6, [r4]
   141e0:	movne	r0, r5
   141e4:	bl	2855c <__assert_fail@plt+0x17284>
   141e8:	str	r6, [r4]
   141ec:	pop	{r4, r5, r6, pc}
   141f0:	muleq	r3, r8, r5
   141f4:	ldr	r3, [pc, #12]	; 14208 <__assert_fail@plt+0x2f30>
   141f8:	cmp	r0, #0
   141fc:	moveq	r0, r3
   14200:	ldr	r0, [r0]
   14204:	bx	lr
   14208:	muleq	r3, r8, r5
   1420c:	ldr	r3, [pc, #12]	; 14220 <__assert_fail@plt+0x2f48>
   14210:	cmp	r0, #0
   14214:	moveq	r0, r3
   14218:	str	r1, [r0]
   1421c:	bx	lr
   14220:	muleq	r3, r8, r5
   14224:	ldr	r3, [pc, #52]	; 14260 <__assert_fail@plt+0x2f88>
   14228:	cmp	r0, #0
   1422c:	moveq	r0, r3
   14230:	add	r3, r0, #8
   14234:	push	{lr}		; (str lr, [sp, #-4]!)
   14238:	lsr	lr, r1, #5
   1423c:	and	r1, r1, #31
   14240:	ldr	ip, [r3, lr, lsl #2]
   14244:	lsr	r0, ip, r1
   14248:	eor	r2, r2, r0
   1424c:	and	r2, r2, #1
   14250:	and	r0, r0, #1
   14254:	eor	r1, ip, r2, lsl r1
   14258:	str	r1, [r3, lr, lsl #2]
   1425c:	pop	{pc}		; (ldr pc, [sp], #4)
   14260:	muleq	r3, r8, r5
   14264:	ldr	r3, [pc, #16]	; 1427c <__assert_fail@plt+0x2fa4>
   14268:	cmp	r0, #0
   1426c:	movne	r3, r0
   14270:	ldr	r0, [r3, #4]
   14274:	str	r1, [r3, #4]
   14278:	bx	lr
   1427c:	muleq	r3, r8, r5
   14280:	ldr	r3, [pc, #44]	; 142b4 <__assert_fail@plt+0x2fdc>
   14284:	cmp	r0, #0
   14288:	moveq	r0, r3
   1428c:	mov	ip, #10
   14290:	cmp	r2, #0
   14294:	cmpne	r1, #0
   14298:	str	ip, [r0]
   1429c:	beq	142ac <__assert_fail@plt+0x2fd4>
   142a0:	str	r1, [r0, #40]	; 0x28
   142a4:	str	r2, [r0, #44]	; 0x2c
   142a8:	bx	lr
   142ac:	push	{r4, lr}
   142b0:	bl	112cc <abort@plt>
   142b4:	muleq	r3, r8, r5
   142b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   142bc:	sub	sp, sp, #24
   142c0:	ldr	ip, [pc, #108]	; 14334 <__assert_fail@plt+0x305c>
   142c4:	ldr	r4, [sp, #56]	; 0x38
   142c8:	mov	r9, r2
   142cc:	cmp	r4, #0
   142d0:	moveq	r4, ip
   142d4:	mov	sl, r3
   142d8:	mov	r7, r0
   142dc:	mov	r8, r1
   142e0:	bl	111d0 <__errno_location@plt>
   142e4:	ldr	r3, [r4, #44]	; 0x2c
   142e8:	mov	r1, r8
   142ec:	ldr	r6, [r0]
   142f0:	str	r3, [sp, #16]
   142f4:	ldr	r2, [r4, #40]	; 0x28
   142f8:	add	r3, r4, #8
   142fc:	str	r3, [sp, #8]
   14300:	str	r2, [sp, #12]
   14304:	ldr	r2, [r4, #4]
   14308:	mov	r5, r0
   1430c:	str	r2, [sp, #4]
   14310:	ldr	ip, [r4]
   14314:	mov	r3, sl
   14318:	mov	r2, r9
   1431c:	mov	r0, r7
   14320:	str	ip, [sp]
   14324:	bl	12c3c <__assert_fail@plt+0x1964>
   14328:	str	r6, [r5]
   1432c:	add	sp, sp, #24
   14330:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14334:	muleq	r3, r8, r5
   14338:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1433c:	cmp	r2, #0
   14340:	sub	sp, sp, #36	; 0x24
   14344:	ldr	r4, [pc, #164]	; 143f0 <__assert_fail@plt+0x3118>
   14348:	mov	r8, r1
   1434c:	movne	r4, r2
   14350:	mov	r7, r0
   14354:	bl	111d0 <__errno_location@plt>
   14358:	ldr	r3, [r4, #44]	; 0x2c
   1435c:	ldr	r5, [r4, #4]
   14360:	add	r9, r4, #8
   14364:	orr	r5, r5, #1
   14368:	mov	r1, #0
   1436c:	mov	r2, r7
   14370:	ldr	fp, [r0]
   14374:	str	r3, [sp, #16]
   14378:	ldr	r3, [r4, #40]	; 0x28
   1437c:	stmib	sp, {r5, r9}
   14380:	str	r3, [sp, #12]
   14384:	ldr	r3, [r4]
   14388:	mov	r6, r0
   1438c:	str	r3, [sp]
   14390:	mov	r0, r1
   14394:	mov	r3, r8
   14398:	bl	12c3c <__assert_fail@plt+0x1964>
   1439c:	add	r1, r0, #1
   143a0:	mov	r0, r1
   143a4:	str	r1, [sp, #28]
   143a8:	bl	28018 <__assert_fail@plt+0x16d40>
   143ac:	ldr	r3, [r4, #44]	; 0x2c
   143b0:	ldr	r1, [sp, #28]
   143b4:	str	r3, [sp, #16]
   143b8:	ldr	r3, [r4, #40]	; 0x28
   143bc:	str	r5, [sp, #4]
   143c0:	str	r3, [sp, #12]
   143c4:	str	r9, [sp, #8]
   143c8:	ldr	ip, [r4]
   143cc:	mov	r3, r8
   143d0:	mov	r2, r7
   143d4:	str	ip, [sp]
   143d8:	mov	sl, r0
   143dc:	bl	12c3c <__assert_fail@plt+0x1964>
   143e0:	mov	r0, sl
   143e4:	str	fp, [r6]
   143e8:	add	sp, sp, #36	; 0x24
   143ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143f0:	muleq	r3, r8, r5
   143f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143f8:	cmp	r3, #0
   143fc:	sub	sp, sp, #44	; 0x2c
   14400:	ldr	r4, [pc, #192]	; 144c8 <__assert_fail@plt+0x31f0>
   14404:	mov	r6, r2
   14408:	movne	r4, r3
   1440c:	mov	r9, r1
   14410:	mov	r8, r0
   14414:	bl	111d0 <__errno_location@plt>
   14418:	ldr	r3, [r4, #44]	; 0x2c
   1441c:	ldr	r5, [r4, #4]
   14420:	add	sl, r4, #8
   14424:	cmp	r6, #0
   14428:	orreq	r5, r5, #1
   1442c:	mov	r1, #0
   14430:	ldr	r2, [r0]
   14434:	str	r3, [sp, #16]
   14438:	ldr	r3, [r4, #40]	; 0x28
   1443c:	stmib	sp, {r5, sl}
   14440:	str	r3, [sp, #12]
   14444:	ldr	r3, [r4]
   14448:	mov	r7, r0
   1444c:	str	r2, [sp, #28]
   14450:	str	r3, [sp]
   14454:	mov	r2, r8
   14458:	mov	r3, r9
   1445c:	mov	r0, r1
   14460:	bl	12c3c <__assert_fail@plt+0x1964>
   14464:	add	r1, r0, #1
   14468:	mov	fp, r0
   1446c:	mov	r0, r1
   14470:	str	r1, [sp, #36]	; 0x24
   14474:	bl	28018 <__assert_fail@plt+0x16d40>
   14478:	ldr	r3, [r4, #44]	; 0x2c
   1447c:	mov	r2, r8
   14480:	str	r3, [sp, #16]
   14484:	ldr	r3, [r4, #40]	; 0x28
   14488:	str	r5, [sp, #4]
   1448c:	str	r3, [sp, #12]
   14490:	str	sl, [sp, #8]
   14494:	ldr	ip, [r4]
   14498:	ldr	r1, [sp, #36]	; 0x24
   1449c:	mov	r3, r9
   144a0:	str	ip, [sp]
   144a4:	str	r0, [sp, #32]
   144a8:	bl	12c3c <__assert_fail@plt+0x1964>
   144ac:	ldr	r2, [sp, #28]
   144b0:	cmp	r6, #0
   144b4:	str	r2, [r7]
   144b8:	ldr	r0, [sp, #32]
   144bc:	strne	fp, [r6]
   144c0:	add	sp, sp, #44	; 0x2c
   144c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144c8:	muleq	r3, r8, r5
   144cc:	push	{r4, r5, r6, r7, r8, lr}
   144d0:	ldr	r6, [pc, #116]	; 1454c <__assert_fail@plt+0x3274>
   144d4:	ldr	r3, [r6, #4]
   144d8:	ldr	r7, [r6]
   144dc:	cmp	r3, #1
   144e0:	movgt	r5, r7
   144e4:	movgt	r4, #1
   144e8:	ble	14508 <__assert_fail@plt+0x3230>
   144ec:	ldr	r0, [r5, #12]
   144f0:	bl	296b0 <__assert_fail@plt+0x183d8>
   144f4:	ldr	r3, [r6, #4]
   144f8:	add	r4, r4, #1
   144fc:	cmp	r3, r4
   14500:	add	r5, r5, #8
   14504:	bgt	144ec <__assert_fail@plt+0x3214>
   14508:	ldr	r0, [r7, #4]
   1450c:	ldr	r4, [pc, #60]	; 14550 <__assert_fail@plt+0x3278>
   14510:	cmp	r0, r4
   14514:	beq	14528 <__assert_fail@plt+0x3250>
   14518:	bl	296b0 <__assert_fail@plt+0x183d8>
   1451c:	mov	r3, #256	; 0x100
   14520:	str	r4, [r6, #12]
   14524:	str	r3, [r6, #8]
   14528:	ldr	r4, [pc, #36]	; 14554 <__assert_fail@plt+0x327c>
   1452c:	cmp	r7, r4
   14530:	beq	14540 <__assert_fail@plt+0x3268>
   14534:	mov	r0, r7
   14538:	bl	296b0 <__assert_fail@plt+0x183d8>
   1453c:	str	r4, [r6]
   14540:	mov	r3, #1
   14544:	str	r3, [r6, #4]
   14548:	pop	{r4, r5, r6, r7, r8, pc}
   1454c:	andeq	ip, r3, r4, ror r1
   14550:	andeq	ip, r3, r8, asr #11
   14554:	andeq	ip, r3, ip, ror r1
   14558:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1455c:	sub	sp, sp, #44	; 0x2c
   14560:	mov	r5, r0
   14564:	mov	sl, r1
   14568:	bl	111d0 <__errno_location@plt>
   1456c:	ldr	r4, [pc, #400]	; 14704 <__assert_fail@plt+0x342c>
   14570:	cmn	r5, #-2147483647	; 0x80000001
   14574:	ldr	r6, [r4]
   14578:	mov	r8, r0
   1457c:	movne	r0, #0
   14580:	moveq	r0, #1
   14584:	ldr	r3, [r8]
   14588:	orrs	r0, r0, r5, lsr #31
   1458c:	str	r3, [sp, #24]
   14590:	bne	14700 <__assert_fail@plt+0x3428>
   14594:	ldr	r2, [r4, #4]
   14598:	cmp	r5, r2
   1459c:	blt	145fc <__assert_fail@plt+0x3324>
   145a0:	add	r7, r4, #8
   145a4:	cmp	r6, r7
   145a8:	str	r2, [sp, #36]	; 0x24
   145ac:	beq	146d0 <__assert_fail@plt+0x33f8>
   145b0:	mov	r3, #8
   145b4:	sub	r2, r5, r2
   145b8:	mov	r0, r6
   145bc:	str	r3, [sp]
   145c0:	add	r2, r2, #1
   145c4:	mvn	r3, #-2147483648	; 0x80000000
   145c8:	add	r1, sp, #36	; 0x24
   145cc:	bl	28234 <__assert_fail@plt+0x16f5c>
   145d0:	mov	r6, r0
   145d4:	str	r0, [r4]
   145d8:	ldr	r0, [r4, #4]
   145dc:	ldr	r2, [sp, #36]	; 0x24
   145e0:	mov	r1, #0
   145e4:	sub	r2, r2, r0
   145e8:	add	r0, r6, r0, lsl #3
   145ec:	lsl	r2, r2, #3
   145f0:	bl	111f4 <memset@plt>
   145f4:	ldr	r3, [sp, #36]	; 0x24
   145f8:	str	r3, [r4, #4]
   145fc:	ldr	r4, [pc, #260]	; 14708 <__assert_fail@plt+0x3430>
   14600:	add	fp, r6, r5, lsl #3
   14604:	ldr	r9, [r6, r5, lsl #3]
   14608:	ldr	r0, [r4, #4]
   1460c:	ldr	r3, [r4]
   14610:	ldr	r7, [fp, #4]
   14614:	ldr	r1, [r4, #44]	; 0x2c
   14618:	ldr	r2, [r4, #40]	; 0x28
   1461c:	orr	r0, r0, #1
   14620:	str	r3, [sp]
   14624:	add	r3, r4, #8
   14628:	str	r0, [sp, #28]
   1462c:	str	r0, [sp, #4]
   14630:	str	r1, [sp, #16]
   14634:	str	r2, [sp, #12]
   14638:	str	r3, [sp, #8]
   1463c:	mov	r0, r7
   14640:	mov	r1, r9
   14644:	mvn	r3, #0
   14648:	mov	r2, sl
   1464c:	bl	12c3c <__assert_fail@plt+0x1964>
   14650:	cmp	r9, r0
   14654:	bhi	146bc <__assert_fail@plt+0x33e4>
   14658:	add	r3, r4, #48	; 0x30
   1465c:	add	r9, r0, #1
   14660:	cmp	r7, r3
   14664:	str	r9, [r6, r5, lsl #3]
   14668:	beq	14674 <__assert_fail@plt+0x339c>
   1466c:	mov	r0, r7
   14670:	bl	296b0 <__assert_fail@plt+0x183d8>
   14674:	mov	r0, r9
   14678:	bl	28018 <__assert_fail@plt+0x16d40>
   1467c:	ldr	ip, [r4, #44]	; 0x2c
   14680:	ldr	r3, [r4]
   14684:	ldr	lr, [r4, #40]	; 0x28
   14688:	ldr	r4, [pc, #124]	; 1470c <__assert_fail@plt+0x3434>
   1468c:	mov	r2, sl
   14690:	mov	r1, r9
   14694:	str	r0, [fp, #4]
   14698:	str	r4, [sp, #8]
   1469c:	ldr	r4, [sp, #28]
   146a0:	str	r3, [sp]
   146a4:	str	r4, [sp, #4]
   146a8:	str	ip, [sp, #16]
   146ac:	str	lr, [sp, #12]
   146b0:	mvn	r3, #0
   146b4:	mov	r7, r0
   146b8:	bl	12c3c <__assert_fail@plt+0x1964>
   146bc:	ldr	r3, [sp, #24]
   146c0:	mov	r0, r7
   146c4:	str	r3, [r8]
   146c8:	add	sp, sp, #44	; 0x2c
   146cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146d0:	mov	r3, #8
   146d4:	sub	r2, r5, r2
   146d8:	str	r3, [sp]
   146dc:	add	r1, sp, #36	; 0x24
   146e0:	add	r2, r2, #1
   146e4:	mvn	r3, #-2147483648	; 0x80000000
   146e8:	bl	28234 <__assert_fail@plt+0x16f5c>
   146ec:	mov	r6, r0
   146f0:	ldm	r7, {r0, r1}
   146f4:	str	r6, [r4]
   146f8:	stm	r6, {r0, r1}
   146fc:	b	145d8 <__assert_fail@plt+0x3300>
   14700:	bl	112cc <abort@plt>
   14704:	andeq	ip, r3, r4, ror r1
   14708:	muleq	r3, r8, r5
   1470c:	andeq	ip, r3, r0, lsr #11
   14710:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14714:	sub	sp, sp, #52	; 0x34
   14718:	mov	r5, r0
   1471c:	mov	sl, r1
   14720:	mov	fp, r2
   14724:	bl	111d0 <__errno_location@plt>
   14728:	ldr	r4, [pc, #408]	; 148c8 <__assert_fail@plt+0x35f0>
   1472c:	cmn	r5, #-2147483647	; 0x80000001
   14730:	ldr	r6, [r4]
   14734:	mov	r8, r0
   14738:	movne	r0, #0
   1473c:	moveq	r0, #1
   14740:	ldr	r3, [r8]
   14744:	orrs	r0, r0, r5, lsr #31
   14748:	str	r3, [sp, #28]
   1474c:	bne	148c4 <__assert_fail@plt+0x35ec>
   14750:	ldr	r2, [r4, #4]
   14754:	cmp	r5, r2
   14758:	blt	147b8 <__assert_fail@plt+0x34e0>
   1475c:	add	r7, r4, #8
   14760:	cmp	r6, r7
   14764:	str	r2, [sp, #44]	; 0x2c
   14768:	beq	14894 <__assert_fail@plt+0x35bc>
   1476c:	mov	r3, #8
   14770:	sub	r2, r5, r2
   14774:	mov	r0, r6
   14778:	str	r3, [sp]
   1477c:	add	r2, r2, #1
   14780:	mvn	r3, #-2147483648	; 0x80000000
   14784:	add	r1, sp, #44	; 0x2c
   14788:	bl	28234 <__assert_fail@plt+0x16f5c>
   1478c:	mov	r6, r0
   14790:	str	r0, [r4]
   14794:	ldr	r0, [r4, #4]
   14798:	ldr	r2, [sp, #44]	; 0x2c
   1479c:	mov	r1, #0
   147a0:	sub	r2, r2, r0
   147a4:	add	r0, r6, r0, lsl #3
   147a8:	lsl	r2, r2, #3
   147ac:	bl	111f4 <memset@plt>
   147b0:	ldr	r3, [sp, #44]	; 0x2c
   147b4:	str	r3, [r4, #4]
   147b8:	ldr	r4, [pc, #268]	; 148cc <__assert_fail@plt+0x35f4>
   147bc:	add	r3, r6, r5, lsl #3
   147c0:	str	r3, [sp, #32]
   147c4:	ldr	r7, [r3, #4]
   147c8:	ldr	r0, [r4, #4]
   147cc:	ldr	r3, [r4]
   147d0:	ldr	r9, [r6, r5, lsl #3]
   147d4:	ldr	r1, [r4, #44]	; 0x2c
   147d8:	ldr	r2, [r4, #40]	; 0x28
   147dc:	orr	r0, r0, #1
   147e0:	str	r3, [sp]
   147e4:	add	r3, r4, #8
   147e8:	str	r0, [sp, #36]	; 0x24
   147ec:	str	r0, [sp, #4]
   147f0:	str	r1, [sp, #16]
   147f4:	str	r2, [sp, #12]
   147f8:	str	r3, [sp, #8]
   147fc:	mov	r0, r7
   14800:	mov	r1, r9
   14804:	mov	r3, fp
   14808:	mov	r2, sl
   1480c:	bl	12c3c <__assert_fail@plt+0x1964>
   14810:	cmp	r9, r0
   14814:	bhi	14880 <__assert_fail@plt+0x35a8>
   14818:	add	r3, r4, #48	; 0x30
   1481c:	add	r9, r0, #1
   14820:	cmp	r7, r3
   14824:	str	r9, [r6, r5, lsl #3]
   14828:	beq	14834 <__assert_fail@plt+0x355c>
   1482c:	mov	r0, r7
   14830:	bl	296b0 <__assert_fail@plt+0x183d8>
   14834:	mov	r0, r9
   14838:	bl	28018 <__assert_fail@plt+0x16d40>
   1483c:	ldr	ip, [sp, #32]
   14840:	ldr	lr, [r4, #44]	; 0x2c
   14844:	ldr	r5, [r4, #40]	; 0x28
   14848:	mov	r3, fp
   1484c:	mov	r2, sl
   14850:	mov	r1, r9
   14854:	str	r0, [ip, #4]
   14858:	ldr	ip, [r4]
   1485c:	ldr	r4, [pc, #108]	; 148d0 <__assert_fail@plt+0x35f8>
   14860:	str	lr, [sp, #16]
   14864:	str	r4, [sp, #8]
   14868:	ldr	r4, [sp, #36]	; 0x24
   1486c:	str	r5, [sp, #12]
   14870:	str	r4, [sp, #4]
   14874:	str	ip, [sp]
   14878:	mov	r7, r0
   1487c:	bl	12c3c <__assert_fail@plt+0x1964>
   14880:	ldr	r3, [sp, #28]
   14884:	mov	r0, r7
   14888:	str	r3, [r8]
   1488c:	add	sp, sp, #52	; 0x34
   14890:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14894:	mov	r3, #8
   14898:	sub	r2, r5, r2
   1489c:	str	r3, [sp]
   148a0:	add	r1, sp, #44	; 0x2c
   148a4:	add	r2, r2, #1
   148a8:	mvn	r3, #-2147483648	; 0x80000000
   148ac:	bl	28234 <__assert_fail@plt+0x16f5c>
   148b0:	mov	r6, r0
   148b4:	ldm	r7, {r0, r1}
   148b8:	str	r6, [r4]
   148bc:	stm	r6, {r0, r1}
   148c0:	b	14794 <__assert_fail@plt+0x34bc>
   148c4:	bl	112cc <abort@plt>
   148c8:	andeq	ip, r3, r4, ror r1
   148cc:	muleq	r3, r8, r5
   148d0:	andeq	ip, r3, r0, lsr #11
   148d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148d8:	sub	sp, sp, #44	; 0x2c
   148dc:	mov	sl, r0
   148e0:	bl	111d0 <__errno_location@plt>
   148e4:	ldr	r4, [pc, #352]	; 14a4c <__assert_fail@plt+0x3774>
   148e8:	ldr	r2, [r4, #4]
   148ec:	ldr	r5, [r4]
   148f0:	cmp	r2, #0
   148f4:	ldr	r3, [r0]
   148f8:	mov	r8, r0
   148fc:	str	r3, [sp, #28]
   14900:	bgt	1495c <__assert_fail@plt+0x3684>
   14904:	add	r6, r4, #8
   14908:	cmp	r5, r6
   1490c:	str	r2, [sp, #36]	; 0x24
   14910:	beq	14a1c <__assert_fail@plt+0x3744>
   14914:	mov	r3, #8
   14918:	mov	r0, r5
   1491c:	str	r3, [sp]
   14920:	rsb	r2, r2, #1
   14924:	mvn	r3, #-2147483648	; 0x80000000
   14928:	add	r1, sp, #36	; 0x24
   1492c:	bl	28234 <__assert_fail@plt+0x16f5c>
   14930:	mov	r5, r0
   14934:	str	r0, [r4]
   14938:	ldr	r0, [r4, #4]
   1493c:	ldr	r2, [sp, #36]	; 0x24
   14940:	mov	r1, #0
   14944:	sub	r2, r2, r0
   14948:	add	r0, r5, r0, lsl #3
   1494c:	lsl	r2, r2, #3
   14950:	bl	111f4 <memset@plt>
   14954:	ldr	r3, [sp, #36]	; 0x24
   14958:	str	r3, [r4, #4]
   1495c:	ldr	r4, [pc, #236]	; 14a50 <__assert_fail@plt+0x3778>
   14960:	ldr	r9, [r5]
   14964:	ldr	r6, [r5, #4]
   14968:	ldr	r7, [r4, #4]
   1496c:	ldr	r1, [r4, #44]	; 0x2c
   14970:	ldr	r2, [r4, #40]	; 0x28
   14974:	ldr	r3, [r4]
   14978:	orr	r7, r7, #1
   1497c:	add	fp, r4, #8
   14980:	str	r1, [sp, #16]
   14984:	str	r2, [sp, #12]
   14988:	str	r3, [sp]
   1498c:	str	r7, [sp, #4]
   14990:	str	fp, [sp, #8]
   14994:	mov	r1, r9
   14998:	mov	r0, r6
   1499c:	mvn	r3, #0
   149a0:	mov	r2, sl
   149a4:	bl	12c3c <__assert_fail@plt+0x1964>
   149a8:	cmp	r9, r0
   149ac:	bhi	14a08 <__assert_fail@plt+0x3730>
   149b0:	add	r3, r4, #48	; 0x30
   149b4:	add	r9, r0, #1
   149b8:	cmp	r6, r3
   149bc:	str	r9, [r5]
   149c0:	beq	149cc <__assert_fail@plt+0x36f4>
   149c4:	mov	r0, r6
   149c8:	bl	296b0 <__assert_fail@plt+0x183d8>
   149cc:	mov	r0, r9
   149d0:	bl	28018 <__assert_fail@plt+0x16d40>
   149d4:	ldr	ip, [r4, #44]	; 0x2c
   149d8:	ldr	r3, [r4]
   149dc:	ldr	lr, [r4, #40]	; 0x28
   149e0:	mov	r2, sl
   149e4:	mov	r1, r9
   149e8:	str	r0, [r5, #4]
   149ec:	str	r3, [sp]
   149f0:	stmib	sp, {r7, fp}
   149f4:	str	ip, [sp, #16]
   149f8:	str	lr, [sp, #12]
   149fc:	mvn	r3, #0
   14a00:	mov	r6, r0
   14a04:	bl	12c3c <__assert_fail@plt+0x1964>
   14a08:	ldr	r3, [sp, #28]
   14a0c:	mov	r0, r6
   14a10:	str	r3, [r8]
   14a14:	add	sp, sp, #44	; 0x2c
   14a18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a1c:	mov	r3, #8
   14a20:	str	r3, [sp]
   14a24:	add	r1, sp, #36	; 0x24
   14a28:	rsb	r2, r2, #1
   14a2c:	mvn	r3, #-2147483648	; 0x80000000
   14a30:	mov	r0, #0
   14a34:	bl	28234 <__assert_fail@plt+0x16f5c>
   14a38:	mov	r5, r0
   14a3c:	ldm	r6, {r0, r1}
   14a40:	str	r5, [r4]
   14a44:	stm	r5, {r0, r1}
   14a48:	b	14938 <__assert_fail@plt+0x3660>
   14a4c:	andeq	ip, r3, r4, ror r1
   14a50:	muleq	r3, r8, r5
   14a54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a58:	sub	sp, sp, #44	; 0x2c
   14a5c:	mov	r9, r0
   14a60:	mov	sl, r1
   14a64:	bl	111d0 <__errno_location@plt>
   14a68:	ldr	r4, [pc, #364]	; 14bdc <__assert_fail@plt+0x3904>
   14a6c:	ldr	r2, [r4, #4]
   14a70:	ldr	r5, [r4]
   14a74:	cmp	r2, #0
   14a78:	ldr	r3, [r0]
   14a7c:	mov	r7, r0
   14a80:	str	r3, [sp, #24]
   14a84:	bgt	14ae0 <__assert_fail@plt+0x3808>
   14a88:	add	r6, r4, #8
   14a8c:	cmp	r5, r6
   14a90:	str	r2, [sp, #36]	; 0x24
   14a94:	beq	14bac <__assert_fail@plt+0x38d4>
   14a98:	mov	r3, #8
   14a9c:	mov	r0, r5
   14aa0:	str	r3, [sp]
   14aa4:	rsb	r2, r2, #1
   14aa8:	mvn	r3, #-2147483648	; 0x80000000
   14aac:	add	r1, sp, #36	; 0x24
   14ab0:	bl	28234 <__assert_fail@plt+0x16f5c>
   14ab4:	mov	r5, r0
   14ab8:	str	r0, [r4]
   14abc:	ldr	r0, [r4, #4]
   14ac0:	ldr	r2, [sp, #36]	; 0x24
   14ac4:	mov	r1, #0
   14ac8:	sub	r2, r2, r0
   14acc:	add	r0, r5, r0, lsl #3
   14ad0:	lsl	r2, r2, #3
   14ad4:	bl	111f4 <memset@plt>
   14ad8:	ldr	r3, [sp, #36]	; 0x24
   14adc:	str	r3, [r4, #4]
   14ae0:	ldr	r4, [pc, #248]	; 14be0 <__assert_fail@plt+0x3908>
   14ae4:	ldr	r8, [r5]
   14ae8:	ldr	r6, [r5, #4]
   14aec:	ldr	r0, [r4, #4]
   14af0:	ldr	r1, [r4, #44]	; 0x2c
   14af4:	ldr	r2, [r4, #40]	; 0x28
   14af8:	ldr	r3, [r4]
   14afc:	orr	r0, r0, #1
   14b00:	add	fp, r4, #8
   14b04:	str	r0, [sp, #28]
   14b08:	str	r0, [sp, #4]
   14b0c:	str	r1, [sp, #16]
   14b10:	str	r2, [sp, #12]
   14b14:	str	r3, [sp]
   14b18:	str	fp, [sp, #8]
   14b1c:	mov	r1, r8
   14b20:	mov	r0, r6
   14b24:	mov	r3, sl
   14b28:	mov	r2, r9
   14b2c:	bl	12c3c <__assert_fail@plt+0x1964>
   14b30:	cmp	r8, r0
   14b34:	bhi	14b98 <__assert_fail@plt+0x38c0>
   14b38:	add	r3, r4, #48	; 0x30
   14b3c:	add	r8, r0, #1
   14b40:	cmp	r6, r3
   14b44:	str	r8, [r5]
   14b48:	beq	14b54 <__assert_fail@plt+0x387c>
   14b4c:	mov	r0, r6
   14b50:	bl	296b0 <__assert_fail@plt+0x183d8>
   14b54:	mov	r0, r8
   14b58:	bl	28018 <__assert_fail@plt+0x16d40>
   14b5c:	ldr	lr, [r4, #44]	; 0x2c
   14b60:	ldr	ip, [r4]
   14b64:	mov	r3, sl
   14b68:	mov	r2, r9
   14b6c:	mov	r1, r8
   14b70:	str	r0, [r5, #4]
   14b74:	ldr	r5, [r4, #40]	; 0x28
   14b78:	ldr	r4, [sp, #28]
   14b7c:	str	fp, [sp, #8]
   14b80:	str	r4, [sp, #4]
   14b84:	str	lr, [sp, #16]
   14b88:	str	r5, [sp, #12]
   14b8c:	str	ip, [sp]
   14b90:	mov	r6, r0
   14b94:	bl	12c3c <__assert_fail@plt+0x1964>
   14b98:	ldr	r3, [sp, #24]
   14b9c:	mov	r0, r6
   14ba0:	str	r3, [r7]
   14ba4:	add	sp, sp, #44	; 0x2c
   14ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bac:	mov	r3, #8
   14bb0:	str	r3, [sp]
   14bb4:	add	r1, sp, #36	; 0x24
   14bb8:	rsb	r2, r2, #1
   14bbc:	mvn	r3, #-2147483648	; 0x80000000
   14bc0:	mov	r0, #0
   14bc4:	bl	28234 <__assert_fail@plt+0x16f5c>
   14bc8:	mov	r5, r0
   14bcc:	ldm	r6, {r0, r1}
   14bd0:	str	r5, [r4]
   14bd4:	stm	r5, {r0, r1}
   14bd8:	b	14abc <__assert_fail@plt+0x37e4>
   14bdc:	andeq	ip, r3, r4, ror r1
   14be0:	muleq	r3, r8, r5
   14be4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14be8:	sub	sp, sp, #132	; 0x84
   14bec:	mov	r5, r1
   14bf0:	mov	r4, r0
   14bf4:	mov	r9, r2
   14bf8:	add	r0, sp, #80	; 0x50
   14bfc:	mov	r2, #48	; 0x30
   14c00:	mov	r1, #0
   14c04:	bl	111f4 <memset@plt>
   14c08:	cmp	r5, #10
   14c0c:	beq	14dc4 <__assert_fail@plt+0x3aec>
   14c10:	add	lr, sp, #80	; 0x50
   14c14:	str	r5, [sp, #80]	; 0x50
   14c18:	ldm	lr!, {r0, r1, r2, r3}
   14c1c:	add	ip, sp, #32
   14c20:	ldr	r6, [pc, #416]	; 14dc8 <__assert_fail@plt+0x3af0>
   14c24:	stmia	ip!, {r0, r1, r2, r3}
   14c28:	ldm	lr!, {r0, r1, r2, r3}
   14c2c:	stmia	ip!, {r0, r1, r2, r3}
   14c30:	ldm	lr, {r0, r1, r2, r3}
   14c34:	stm	ip, {r0, r1, r2, r3}
   14c38:	bl	111d0 <__errno_location@plt>
   14c3c:	cmn	r4, #-2147483647	; 0x80000001
   14c40:	ldr	r5, [r6]
   14c44:	mov	r7, r0
   14c48:	movne	r0, #0
   14c4c:	moveq	r0, #1
   14c50:	ldr	r3, [r7]
   14c54:	orrs	r0, r0, r4, lsr #31
   14c58:	str	r3, [sp, #24]
   14c5c:	bne	14dc4 <__assert_fail@plt+0x3aec>
   14c60:	ldr	r2, [r6, #4]
   14c64:	cmp	r4, r2
   14c68:	blt	14cc8 <__assert_fail@plt+0x39f0>
   14c6c:	add	r8, r6, #8
   14c70:	cmp	r5, r8
   14c74:	str	r2, [sp, #80]	; 0x50
   14c78:	beq	14d94 <__assert_fail@plt+0x3abc>
   14c7c:	mov	r3, #8
   14c80:	sub	r2, r4, r2
   14c84:	mov	r0, r5
   14c88:	str	r3, [sp]
   14c8c:	add	r2, r2, #1
   14c90:	add	r1, sp, #80	; 0x50
   14c94:	mvn	r3, #-2147483648	; 0x80000000
   14c98:	bl	28234 <__assert_fail@plt+0x16f5c>
   14c9c:	mov	r5, r0
   14ca0:	str	r0, [r6]
   14ca4:	ldr	r0, [r6, #4]
   14ca8:	ldr	r2, [sp, #80]	; 0x50
   14cac:	mov	r1, #0
   14cb0:	sub	r2, r2, r0
   14cb4:	add	r0, r5, r0, lsl #3
   14cb8:	lsl	r2, r2, #3
   14cbc:	bl	111f4 <memset@plt>
   14cc0:	ldr	r3, [sp, #80]	; 0x50
   14cc4:	str	r3, [r6, #4]
   14cc8:	add	fp, r5, r4, lsl #3
   14ccc:	ldr	r1, [sp, #36]	; 0x24
   14cd0:	ldr	r8, [r5, r4, lsl #3]
   14cd4:	ldr	r6, [fp, #4]
   14cd8:	ldr	r2, [sp, #72]	; 0x48
   14cdc:	ldr	r3, [sp, #32]
   14ce0:	ldr	ip, [sp, #76]	; 0x4c
   14ce4:	orr	r1, r1, #1
   14ce8:	add	sl, sp, #40	; 0x28
   14cec:	str	r1, [sp, #28]
   14cf0:	str	r1, [sp, #4]
   14cf4:	str	r2, [sp, #12]
   14cf8:	str	r3, [sp]
   14cfc:	mov	r0, r6
   14d00:	mov	r1, r8
   14d04:	str	ip, [sp, #16]
   14d08:	str	sl, [sp, #8]
   14d0c:	mvn	r3, #0
   14d10:	mov	r2, r9
   14d14:	bl	12c3c <__assert_fail@plt+0x1964>
   14d18:	cmp	r8, r0
   14d1c:	bhi	14d80 <__assert_fail@plt+0x3aa8>
   14d20:	ldr	r3, [pc, #164]	; 14dcc <__assert_fail@plt+0x3af4>
   14d24:	add	r8, r0, #1
   14d28:	cmp	r6, r3
   14d2c:	str	r8, [r5, r4, lsl #3]
   14d30:	beq	14d3c <__assert_fail@plt+0x3a64>
   14d34:	mov	r0, r6
   14d38:	bl	296b0 <__assert_fail@plt+0x183d8>
   14d3c:	mov	r0, r8
   14d40:	bl	28018 <__assert_fail@plt+0x16d40>
   14d44:	ldr	lr, [sp, #76]	; 0x4c
   14d48:	ldr	r3, [sp, #32]
   14d4c:	ldr	ip, [sp, #72]	; 0x48
   14d50:	ldr	r4, [sp, #28]
   14d54:	mov	r2, r9
   14d58:	mov	r1, r8
   14d5c:	str	r0, [fp, #4]
   14d60:	str	r3, [sp]
   14d64:	str	sl, [sp, #8]
   14d68:	str	r4, [sp, #4]
   14d6c:	str	lr, [sp, #16]
   14d70:	str	ip, [sp, #12]
   14d74:	mvn	r3, #0
   14d78:	mov	r6, r0
   14d7c:	bl	12c3c <__assert_fail@plt+0x1964>
   14d80:	ldr	r3, [sp, #24]
   14d84:	mov	r0, r6
   14d88:	str	r3, [r7]
   14d8c:	add	sp, sp, #132	; 0x84
   14d90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d94:	mov	r3, #8
   14d98:	sub	r2, r4, r2
   14d9c:	add	r1, sp, #80	; 0x50
   14da0:	str	r3, [sp]
   14da4:	add	r2, r2, #1
   14da8:	mvn	r3, #-2147483648	; 0x80000000
   14dac:	bl	28234 <__assert_fail@plt+0x16f5c>
   14db0:	mov	r5, r0
   14db4:	ldm	r8, {r0, r1}
   14db8:	str	r5, [r6]
   14dbc:	stm	r5, {r0, r1}
   14dc0:	b	14ca4 <__assert_fail@plt+0x39cc>
   14dc4:	bl	112cc <abort@plt>
   14dc8:	andeq	ip, r3, r4, ror r1
   14dcc:	andeq	ip, r3, r8, asr #11
   14dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14dd4:	sub	sp, sp, #132	; 0x84
   14dd8:	mov	r5, r1
   14ddc:	mov	r4, r0
   14de0:	mov	r9, r2
   14de4:	add	r0, sp, #80	; 0x50
   14de8:	mov	r2, #48	; 0x30
   14dec:	mov	r1, #0
   14df0:	mov	sl, r3
   14df4:	bl	111f4 <memset@plt>
   14df8:	cmp	r5, #10
   14dfc:	beq	14fb8 <__assert_fail@plt+0x3ce0>
   14e00:	add	lr, sp, #80	; 0x50
   14e04:	str	r5, [sp, #80]	; 0x50
   14e08:	ldm	lr!, {r0, r1, r2, r3}
   14e0c:	add	ip, sp, #32
   14e10:	ldr	r6, [pc, #420]	; 14fbc <__assert_fail@plt+0x3ce4>
   14e14:	stmia	ip!, {r0, r1, r2, r3}
   14e18:	ldm	lr!, {r0, r1, r2, r3}
   14e1c:	stmia	ip!, {r0, r1, r2, r3}
   14e20:	ldm	lr, {r0, r1, r2, r3}
   14e24:	stm	ip, {r0, r1, r2, r3}
   14e28:	bl	111d0 <__errno_location@plt>
   14e2c:	cmn	r4, #-2147483647	; 0x80000001
   14e30:	ldr	r5, [r6]
   14e34:	mov	r7, r0
   14e38:	movne	r0, #0
   14e3c:	moveq	r0, #1
   14e40:	ldr	r3, [r7]
   14e44:	orrs	r0, r0, r4, lsr #31
   14e48:	str	r3, [sp, #24]
   14e4c:	bne	14fb8 <__assert_fail@plt+0x3ce0>
   14e50:	ldr	r2, [r6, #4]
   14e54:	cmp	r4, r2
   14e58:	blt	14eb8 <__assert_fail@plt+0x3be0>
   14e5c:	add	r8, r6, #8
   14e60:	cmp	r5, r8
   14e64:	str	r2, [sp, #80]	; 0x50
   14e68:	beq	14f88 <__assert_fail@plt+0x3cb0>
   14e6c:	mov	r3, #8
   14e70:	sub	r2, r4, r2
   14e74:	mov	r0, r5
   14e78:	str	r3, [sp]
   14e7c:	add	r2, r2, #1
   14e80:	add	r1, sp, #80	; 0x50
   14e84:	mvn	r3, #-2147483648	; 0x80000000
   14e88:	bl	28234 <__assert_fail@plt+0x16f5c>
   14e8c:	mov	r5, r0
   14e90:	str	r0, [r6]
   14e94:	ldr	r0, [r6, #4]
   14e98:	ldr	r2, [sp, #80]	; 0x50
   14e9c:	mov	r1, #0
   14ea0:	sub	r2, r2, r0
   14ea4:	add	r0, r5, r0, lsl #3
   14ea8:	lsl	r2, r2, #3
   14eac:	bl	111f4 <memset@plt>
   14eb0:	ldr	r3, [sp, #80]	; 0x50
   14eb4:	str	r3, [r6, #4]
   14eb8:	add	fp, r5, r4, lsl #3
   14ebc:	ldr	r3, [sp, #32]
   14ec0:	ldr	r1, [sp, #36]	; 0x24
   14ec4:	ldr	r8, [r5, r4, lsl #3]
   14ec8:	ldr	r6, [fp, #4]
   14ecc:	ldr	r2, [sp, #72]	; 0x48
   14ed0:	ldr	ip, [sp, #76]	; 0x4c
   14ed4:	orr	r1, r1, #1
   14ed8:	str	r3, [sp]
   14edc:	add	r3, sp, #40	; 0x28
   14ee0:	str	r1, [sp, #28]
   14ee4:	str	r1, [sp, #4]
   14ee8:	str	r2, [sp, #12]
   14eec:	str	r3, [sp, #8]
   14ef0:	mov	r0, r6
   14ef4:	mov	r1, r8
   14ef8:	str	ip, [sp, #16]
   14efc:	mov	r3, sl
   14f00:	mov	r2, r9
   14f04:	bl	12c3c <__assert_fail@plt+0x1964>
   14f08:	cmp	r8, r0
   14f0c:	bhi	14f74 <__assert_fail@plt+0x3c9c>
   14f10:	ldr	r3, [pc, #168]	; 14fc0 <__assert_fail@plt+0x3ce8>
   14f14:	add	r8, r0, #1
   14f18:	cmp	r6, r3
   14f1c:	str	r8, [r5, r4, lsl #3]
   14f20:	beq	14f2c <__assert_fail@plt+0x3c54>
   14f24:	mov	r0, r6
   14f28:	bl	296b0 <__assert_fail@plt+0x183d8>
   14f2c:	mov	r0, r8
   14f30:	bl	28018 <__assert_fail@plt+0x16d40>
   14f34:	add	lr, sp, #40	; 0x28
   14f38:	ldr	ip, [sp, #76]	; 0x4c
   14f3c:	ldr	r4, [sp, #72]	; 0x48
   14f40:	ldr	r5, [sp, #28]
   14f44:	mov	r3, sl
   14f48:	mov	r2, r9
   14f4c:	mov	r1, r8
   14f50:	str	r0, [fp, #4]
   14f54:	str	lr, [sp, #8]
   14f58:	ldr	lr, [sp, #32]
   14f5c:	str	r5, [sp, #4]
   14f60:	str	ip, [sp, #16]
   14f64:	str	r4, [sp, #12]
   14f68:	str	lr, [sp]
   14f6c:	mov	r6, r0
   14f70:	bl	12c3c <__assert_fail@plt+0x1964>
   14f74:	ldr	r3, [sp, #24]
   14f78:	mov	r0, r6
   14f7c:	str	r3, [r7]
   14f80:	add	sp, sp, #132	; 0x84
   14f84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f88:	mov	r3, #8
   14f8c:	sub	r2, r4, r2
   14f90:	add	r1, sp, #80	; 0x50
   14f94:	str	r3, [sp]
   14f98:	add	r2, r2, #1
   14f9c:	mvn	r3, #-2147483648	; 0x80000000
   14fa0:	bl	28234 <__assert_fail@plt+0x16f5c>
   14fa4:	mov	r5, r0
   14fa8:	ldm	r8, {r0, r1}
   14fac:	str	r5, [r6]
   14fb0:	stm	r5, {r0, r1}
   14fb4:	b	14e94 <__assert_fail@plt+0x3bbc>
   14fb8:	bl	112cc <abort@plt>
   14fbc:	andeq	ip, r3, r4, ror r1
   14fc0:	andeq	ip, r3, r8, asr #11
   14fc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fc8:	sub	sp, sp, #124	; 0x7c
   14fcc:	mov	r4, r0
   14fd0:	mov	r9, r1
   14fd4:	add	r0, sp, #72	; 0x48
   14fd8:	mov	r2, #48	; 0x30
   14fdc:	mov	r1, #0
   14fe0:	bl	111f4 <memset@plt>
   14fe4:	cmp	r4, #10
   14fe8:	beq	15174 <__assert_fail@plt+0x3e9c>
   14fec:	add	lr, sp, #72	; 0x48
   14ff0:	str	r4, [sp, #72]	; 0x48
   14ff4:	ldm	lr!, {r0, r1, r2, r3}
   14ff8:	add	ip, sp, #24
   14ffc:	ldr	r5, [pc, #372]	; 15178 <__assert_fail@plt+0x3ea0>
   15000:	stmia	ip!, {r0, r1, r2, r3}
   15004:	ldm	lr!, {r0, r1, r2, r3}
   15008:	stmia	ip!, {r0, r1, r2, r3}
   1500c:	ldm	lr, {r0, r1, r2, r3}
   15010:	stm	ip, {r0, r1, r2, r3}
   15014:	bl	111d0 <__errno_location@plt>
   15018:	ldr	r2, [r5, #4]
   1501c:	ldr	r4, [r5]
   15020:	cmp	r2, #0
   15024:	mov	r7, r0
   15028:	ldr	fp, [r0]
   1502c:	bgt	15088 <__assert_fail@plt+0x3db0>
   15030:	add	r6, r5, #8
   15034:	cmp	r4, r6
   15038:	str	r2, [sp, #72]	; 0x48
   1503c:	beq	15144 <__assert_fail@plt+0x3e6c>
   15040:	mov	r3, #8
   15044:	mov	r0, r4
   15048:	str	r3, [sp]
   1504c:	rsb	r2, r2, #1
   15050:	add	r1, sp, #72	; 0x48
   15054:	mvn	r3, #-2147483648	; 0x80000000
   15058:	bl	28234 <__assert_fail@plt+0x16f5c>
   1505c:	mov	r4, r0
   15060:	str	r0, [r5]
   15064:	ldr	r0, [r5, #4]
   15068:	ldr	r2, [sp, #72]	; 0x48
   1506c:	mov	r1, #0
   15070:	sub	r2, r2, r0
   15074:	add	r0, r4, r0, lsl #3
   15078:	lsl	r2, r2, #3
   1507c:	bl	111f4 <memset@plt>
   15080:	ldr	r3, [sp, #72]	; 0x48
   15084:	str	r3, [r5, #4]
   15088:	ldr	r6, [sp, #28]
   1508c:	ldr	r8, [r4]
   15090:	ldr	r5, [r4, #4]
   15094:	ldr	r2, [sp, #64]	; 0x40
   15098:	ldr	r3, [sp, #24]
   1509c:	ldr	ip, [sp, #68]	; 0x44
   150a0:	orr	r6, r6, #1
   150a4:	add	sl, sp, #32
   150a8:	str	r2, [sp, #12]
   150ac:	str	r3, [sp]
   150b0:	str	r6, [sp, #4]
   150b4:	mov	r1, r8
   150b8:	mov	r0, r5
   150bc:	str	ip, [sp, #16]
   150c0:	str	sl, [sp, #8]
   150c4:	mvn	r3, #0
   150c8:	mov	r2, r9
   150cc:	bl	12c3c <__assert_fail@plt+0x1964>
   150d0:	cmp	r8, r0
   150d4:	bhi	15134 <__assert_fail@plt+0x3e5c>
   150d8:	ldr	r3, [pc, #156]	; 1517c <__assert_fail@plt+0x3ea4>
   150dc:	add	r8, r0, #1
   150e0:	cmp	r5, r3
   150e4:	str	r8, [r4]
   150e8:	beq	150f4 <__assert_fail@plt+0x3e1c>
   150ec:	mov	r0, r5
   150f0:	bl	296b0 <__assert_fail@plt+0x183d8>
   150f4:	mov	r0, r8
   150f8:	bl	28018 <__assert_fail@plt+0x16d40>
   150fc:	ldr	lr, [sp, #68]	; 0x44
   15100:	ldr	r3, [sp, #24]
   15104:	ldr	ip, [sp, #64]	; 0x40
   15108:	mov	r2, r9
   1510c:	mov	r1, r8
   15110:	str	r0, [r4, #4]
   15114:	str	r3, [sp]
   15118:	str	sl, [sp, #8]
   1511c:	str	r6, [sp, #4]
   15120:	str	lr, [sp, #16]
   15124:	str	ip, [sp, #12]
   15128:	mvn	r3, #0
   1512c:	mov	r5, r0
   15130:	bl	12c3c <__assert_fail@plt+0x1964>
   15134:	mov	r0, r5
   15138:	str	fp, [r7]
   1513c:	add	sp, sp, #124	; 0x7c
   15140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15144:	mov	r3, #8
   15148:	add	r1, sp, #72	; 0x48
   1514c:	str	r3, [sp]
   15150:	rsb	r2, r2, #1
   15154:	mvn	r3, #-2147483648	; 0x80000000
   15158:	mov	r0, #0
   1515c:	bl	28234 <__assert_fail@plt+0x16f5c>
   15160:	mov	r4, r0
   15164:	ldm	r6, {r0, r1}
   15168:	str	r4, [r5]
   1516c:	stm	r4, {r0, r1}
   15170:	b	15064 <__assert_fail@plt+0x3d8c>
   15174:	bl	112cc <abort@plt>
   15178:	andeq	ip, r3, r4, ror r1
   1517c:	andeq	ip, r3, r8, asr #11
   15180:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15184:	sub	sp, sp, #132	; 0x84
   15188:	mov	r4, r0
   1518c:	mov	r9, r1
   15190:	mov	sl, r2
   15194:	add	r0, sp, #80	; 0x50
   15198:	mov	r2, #48	; 0x30
   1519c:	mov	r1, #0
   151a0:	bl	111f4 <memset@plt>
   151a4:	cmp	r4, #10
   151a8:	beq	1533c <__assert_fail@plt+0x4064>
   151ac:	add	lr, sp, #80	; 0x50
   151b0:	str	r4, [sp, #80]	; 0x50
   151b4:	ldm	lr!, {r0, r1, r2, r3}
   151b8:	add	ip, sp, #32
   151bc:	ldr	r5, [pc, #380]	; 15340 <__assert_fail@plt+0x4068>
   151c0:	stmia	ip!, {r0, r1, r2, r3}
   151c4:	ldm	lr!, {r0, r1, r2, r3}
   151c8:	stmia	ip!, {r0, r1, r2, r3}
   151cc:	ldm	lr, {r0, r1, r2, r3}
   151d0:	stm	ip, {r0, r1, r2, r3}
   151d4:	bl	111d0 <__errno_location@plt>
   151d8:	ldr	r2, [r5, #4]
   151dc:	ldr	r4, [r5]
   151e0:	cmp	r2, #0
   151e4:	ldr	r3, [r0]
   151e8:	mov	r7, r0
   151ec:	str	r3, [sp, #28]
   151f0:	bgt	1524c <__assert_fail@plt+0x3f74>
   151f4:	add	r6, r5, #8
   151f8:	cmp	r4, r6
   151fc:	str	r2, [sp, #80]	; 0x50
   15200:	beq	1530c <__assert_fail@plt+0x4034>
   15204:	mov	r3, #8
   15208:	mov	r0, r4
   1520c:	str	r3, [sp]
   15210:	rsb	r2, r2, #1
   15214:	add	r1, sp, #80	; 0x50
   15218:	mvn	r3, #-2147483648	; 0x80000000
   1521c:	bl	28234 <__assert_fail@plt+0x16f5c>
   15220:	mov	r4, r0
   15224:	str	r0, [r5]
   15228:	ldr	r0, [r5, #4]
   1522c:	ldr	r2, [sp, #80]	; 0x50
   15230:	mov	r1, #0
   15234:	sub	r2, r2, r0
   15238:	add	r0, r4, r0, lsl #3
   1523c:	lsl	r2, r2, #3
   15240:	bl	111f4 <memset@plt>
   15244:	ldr	r3, [sp, #80]	; 0x50
   15248:	str	r3, [r5, #4]
   1524c:	ldr	r6, [sp, #36]	; 0x24
   15250:	ldr	r8, [r4]
   15254:	ldr	r5, [r4, #4]
   15258:	ldr	r2, [sp, #72]	; 0x48
   1525c:	ldr	r3, [sp, #32]
   15260:	ldr	ip, [sp, #76]	; 0x4c
   15264:	orr	r6, r6, #1
   15268:	add	fp, sp, #40	; 0x28
   1526c:	str	r2, [sp, #12]
   15270:	str	r3, [sp]
   15274:	str	r6, [sp, #4]
   15278:	mov	r1, r8
   1527c:	mov	r0, r5
   15280:	str	ip, [sp, #16]
   15284:	str	fp, [sp, #8]
   15288:	mov	r3, sl
   1528c:	mov	r2, r9
   15290:	bl	12c3c <__assert_fail@plt+0x1964>
   15294:	cmp	r8, r0
   15298:	bhi	152f8 <__assert_fail@plt+0x4020>
   1529c:	ldr	r3, [pc, #160]	; 15344 <__assert_fail@plt+0x406c>
   152a0:	add	r8, r0, #1
   152a4:	cmp	r5, r3
   152a8:	str	r8, [r4]
   152ac:	beq	152b8 <__assert_fail@plt+0x3fe0>
   152b0:	mov	r0, r5
   152b4:	bl	296b0 <__assert_fail@plt+0x183d8>
   152b8:	mov	r0, r8
   152bc:	bl	28018 <__assert_fail@plt+0x16d40>
   152c0:	ldr	ip, [sp, #76]	; 0x4c
   152c4:	ldr	lr, [sp, #32]
   152c8:	mov	r3, sl
   152cc:	mov	r2, r9
   152d0:	mov	r1, r8
   152d4:	str	r0, [r4, #4]
   152d8:	ldr	r4, [sp, #72]	; 0x48
   152dc:	str	fp, [sp, #8]
   152e0:	str	r6, [sp, #4]
   152e4:	str	ip, [sp, #16]
   152e8:	str	r4, [sp, #12]
   152ec:	str	lr, [sp]
   152f0:	mov	r5, r0
   152f4:	bl	12c3c <__assert_fail@plt+0x1964>
   152f8:	ldr	r3, [sp, #28]
   152fc:	mov	r0, r5
   15300:	str	r3, [r7]
   15304:	add	sp, sp, #132	; 0x84
   15308:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1530c:	mov	r3, #8
   15310:	add	r1, sp, #80	; 0x50
   15314:	str	r3, [sp]
   15318:	rsb	r2, r2, #1
   1531c:	mvn	r3, #-2147483648	; 0x80000000
   15320:	mov	r0, #0
   15324:	bl	28234 <__assert_fail@plt+0x16f5c>
   15328:	mov	r4, r0
   1532c:	ldm	r6, {r0, r1}
   15330:	str	r4, [r5]
   15334:	stm	r4, {r0, r1}
   15338:	b	15228 <__assert_fail@plt+0x3f50>
   1533c:	bl	112cc <abort@plt>
   15340:	andeq	ip, r3, r4, ror r1
   15344:	andeq	ip, r3, r8, asr #11
   15348:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1534c:	mov	r4, r2
   15350:	ldr	lr, [pc, #432]	; 15508 <__assert_fail@plt+0x4230>
   15354:	mov	sl, r0
   15358:	mov	fp, r1
   1535c:	ldm	lr!, {r0, r1, r2, r3}
   15360:	sub	sp, sp, #92	; 0x5c
   15364:	add	ip, sp, #40	; 0x28
   15368:	lsr	r7, r4, #5
   1536c:	stmia	ip!, {r0, r1, r2, r3}
   15370:	add	r6, sp, #48	; 0x30
   15374:	ldm	lr!, {r0, r1, r2, r3}
   15378:	and	r4, r4, #31
   1537c:	ldr	r5, [pc, #392]	; 1550c <__assert_fail@plt+0x4234>
   15380:	stmia	ip!, {r0, r1, r2, r3}
   15384:	ldm	lr, {r0, r1, r2, r3}
   15388:	stm	ip, {r0, r1, r2, r3}
   1538c:	ldr	r2, [r6, r7, lsl #2]
   15390:	lsr	r3, r2, r4
   15394:	eor	r3, r3, #1
   15398:	and	r3, r3, #1
   1539c:	eor	r4, r2, r3, lsl r4
   153a0:	str	r4, [r6, r7, lsl #2]
   153a4:	bl	111d0 <__errno_location@plt>
   153a8:	ldr	r2, [r5, #4]
   153ac:	ldr	r4, [r5]
   153b0:	cmp	r2, #0
   153b4:	ldr	r3, [r0]
   153b8:	mov	r8, r0
   153bc:	str	r3, [sp, #28]
   153c0:	bgt	1541c <__assert_fail@plt+0x4144>
   153c4:	add	r7, r5, #8
   153c8:	cmp	r4, r7
   153cc:	str	r2, [sp, #36]	; 0x24
   153d0:	beq	154d8 <__assert_fail@plt+0x4200>
   153d4:	mov	r3, #8
   153d8:	mov	r0, r4
   153dc:	str	r3, [sp]
   153e0:	rsb	r2, r2, #1
   153e4:	mvn	r3, #-2147483648	; 0x80000000
   153e8:	add	r1, sp, #36	; 0x24
   153ec:	bl	28234 <__assert_fail@plt+0x16f5c>
   153f0:	mov	r4, r0
   153f4:	str	r0, [r5]
   153f8:	ldr	r0, [r5, #4]
   153fc:	ldr	r2, [sp, #36]	; 0x24
   15400:	mov	r1, #0
   15404:	sub	r2, r2, r0
   15408:	add	r0, r4, r0, lsl #3
   1540c:	lsl	r2, r2, #3
   15410:	bl	111f4 <memset@plt>
   15414:	ldr	r3, [sp, #36]	; 0x24
   15418:	str	r3, [r5, #4]
   1541c:	ldr	r7, [sp, #44]	; 0x2c
   15420:	ldr	r9, [r4]
   15424:	ldr	r5, [r4, #4]
   15428:	ldr	r2, [sp, #80]	; 0x50
   1542c:	ldr	r3, [sp, #40]	; 0x28
   15430:	ldr	ip, [sp, #84]	; 0x54
   15434:	orr	r7, r7, #1
   15438:	str	r2, [sp, #12]
   1543c:	str	r3, [sp]
   15440:	str	r7, [sp, #4]
   15444:	str	r6, [sp, #8]
   15448:	mov	r1, r9
   1544c:	mov	r0, r5
   15450:	str	ip, [sp, #16]
   15454:	mov	r3, fp
   15458:	mov	r2, sl
   1545c:	bl	12c3c <__assert_fail@plt+0x1964>
   15460:	cmp	r9, r0
   15464:	bhi	154c4 <__assert_fail@plt+0x41ec>
   15468:	ldr	r3, [pc, #160]	; 15510 <__assert_fail@plt+0x4238>
   1546c:	add	r9, r0, #1
   15470:	cmp	r5, r3
   15474:	str	r9, [r4]
   15478:	beq	15484 <__assert_fail@plt+0x41ac>
   1547c:	mov	r0, r5
   15480:	bl	296b0 <__assert_fail@plt+0x183d8>
   15484:	mov	r0, r9
   15488:	bl	28018 <__assert_fail@plt+0x16d40>
   1548c:	ldr	ip, [sp, #84]	; 0x54
   15490:	ldr	lr, [sp, #40]	; 0x28
   15494:	mov	r3, fp
   15498:	mov	r2, sl
   1549c:	mov	r1, r9
   154a0:	str	r0, [r4, #4]
   154a4:	ldr	r4, [sp, #80]	; 0x50
   154a8:	str	r6, [sp, #8]
   154ac:	str	r7, [sp, #4]
   154b0:	str	ip, [sp, #16]
   154b4:	str	r4, [sp, #12]
   154b8:	str	lr, [sp]
   154bc:	mov	r5, r0
   154c0:	bl	12c3c <__assert_fail@plt+0x1964>
   154c4:	ldr	r3, [sp, #28]
   154c8:	mov	r0, r5
   154cc:	str	r3, [r8]
   154d0:	add	sp, sp, #92	; 0x5c
   154d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154d8:	mov	r3, #8
   154dc:	str	r3, [sp]
   154e0:	add	r1, sp, #36	; 0x24
   154e4:	rsb	r2, r2, #1
   154e8:	mvn	r3, #-2147483648	; 0x80000000
   154ec:	mov	r0, #0
   154f0:	bl	28234 <__assert_fail@plt+0x16f5c>
   154f4:	mov	r4, r0
   154f8:	ldm	r7, {r0, r1}
   154fc:	str	r4, [r5]
   15500:	stm	r4, {r0, r1}
   15504:	b	153f8 <__assert_fail@plt+0x4120>
   15508:	muleq	r3, r8, r5
   1550c:	andeq	ip, r3, r4, ror r1
   15510:	andeq	ip, r3, r8, asr #11
   15514:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15518:	mov	r4, r1
   1551c:	ldr	lr, [pc, #420]	; 156c8 <__assert_fail@plt+0x43f0>
   15520:	mov	r6, r0
   15524:	sub	sp, sp, #84	; 0x54
   15528:	ldm	lr!, {r0, r1, r2, r3}
   1552c:	add	ip, sp, #32
   15530:	lsr	r8, r4, #5
   15534:	add	r5, sp, #40	; 0x28
   15538:	stmia	ip!, {r0, r1, r2, r3}
   1553c:	and	r4, r4, #31
   15540:	ldm	lr!, {r0, r1, r2, r3}
   15544:	ldr	r7, [pc, #384]	; 156cc <__assert_fail@plt+0x43f4>
   15548:	stmia	ip!, {r0, r1, r2, r3}
   1554c:	ldm	lr, {r0, r1, r2, r3}
   15550:	stm	ip, {r0, r1, r2, r3}
   15554:	ldr	r2, [r5, r8, lsl #2]
   15558:	lsr	r3, r2, r4
   1555c:	eor	r3, r3, #1
   15560:	and	r3, r3, #1
   15564:	eor	r4, r2, r3, lsl r4
   15568:	str	r4, [r5, r8, lsl #2]
   1556c:	bl	111d0 <__errno_location@plt>
   15570:	ldr	r2, [r7, #4]
   15574:	ldr	r4, [r7]
   15578:	cmp	r2, #0
   1557c:	mov	r9, r0
   15580:	ldr	sl, [r0]
   15584:	bgt	155e0 <__assert_fail@plt+0x4308>
   15588:	add	r8, r7, #8
   1558c:	cmp	r4, r8
   15590:	str	r2, [sp, #28]
   15594:	beq	15698 <__assert_fail@plt+0x43c0>
   15598:	mov	r3, #8
   1559c:	mov	r0, r4
   155a0:	str	r3, [sp]
   155a4:	rsb	r2, r2, #1
   155a8:	mvn	r3, #-2147483648	; 0x80000000
   155ac:	add	r1, sp, #28
   155b0:	bl	28234 <__assert_fail@plt+0x16f5c>
   155b4:	mov	r4, r0
   155b8:	str	r0, [r7]
   155bc:	ldr	r0, [r7, #4]
   155c0:	ldr	r2, [sp, #28]
   155c4:	mov	r1, #0
   155c8:	sub	r2, r2, r0
   155cc:	add	r0, r4, r0, lsl #3
   155d0:	lsl	r2, r2, #3
   155d4:	bl	111f4 <memset@plt>
   155d8:	ldr	r3, [sp, #28]
   155dc:	str	r3, [r7, #4]
   155e0:	ldr	r8, [sp, #36]	; 0x24
   155e4:	ldr	fp, [r4]
   155e8:	ldr	r7, [r4, #4]
   155ec:	ldr	r2, [sp, #72]	; 0x48
   155f0:	ldr	r3, [sp, #32]
   155f4:	ldr	ip, [sp, #76]	; 0x4c
   155f8:	orr	r8, r8, #1
   155fc:	str	r2, [sp, #12]
   15600:	str	r3, [sp]
   15604:	str	r8, [sp, #4]
   15608:	str	r5, [sp, #8]
   1560c:	mov	r1, fp
   15610:	mov	r0, r7
   15614:	str	ip, [sp, #16]
   15618:	mvn	r3, #0
   1561c:	mov	r2, r6
   15620:	bl	12c3c <__assert_fail@plt+0x1964>
   15624:	cmp	fp, r0
   15628:	bhi	15688 <__assert_fail@plt+0x43b0>
   1562c:	ldr	r3, [pc, #156]	; 156d0 <__assert_fail@plt+0x43f8>
   15630:	add	fp, r0, #1
   15634:	cmp	r7, r3
   15638:	str	fp, [r4]
   1563c:	beq	15648 <__assert_fail@plt+0x4370>
   15640:	mov	r0, r7
   15644:	bl	296b0 <__assert_fail@plt+0x183d8>
   15648:	mov	r0, fp
   1564c:	bl	28018 <__assert_fail@plt+0x16d40>
   15650:	ldr	lr, [sp, #76]	; 0x4c
   15654:	ldr	r3, [sp, #32]
   15658:	ldr	ip, [sp, #72]	; 0x48
   1565c:	mov	r2, r6
   15660:	mov	r1, fp
   15664:	str	r0, [r4, #4]
   15668:	str	r3, [sp]
   1566c:	str	r5, [sp, #8]
   15670:	str	r8, [sp, #4]
   15674:	str	lr, [sp, #16]
   15678:	str	ip, [sp, #12]
   1567c:	mvn	r3, #0
   15680:	mov	r7, r0
   15684:	bl	12c3c <__assert_fail@plt+0x1964>
   15688:	mov	r0, r7
   1568c:	str	sl, [r9]
   15690:	add	sp, sp, #84	; 0x54
   15694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15698:	mov	r3, #8
   1569c:	str	r3, [sp]
   156a0:	add	r1, sp, #28
   156a4:	rsb	r2, r2, #1
   156a8:	mvn	r3, #-2147483648	; 0x80000000
   156ac:	mov	r0, #0
   156b0:	bl	28234 <__assert_fail@plt+0x16f5c>
   156b4:	mov	r4, r0
   156b8:	ldm	r8, {r0, r1}
   156bc:	str	r4, [r7]
   156c0:	stm	r4, {r0, r1}
   156c4:	b	155bc <__assert_fail@plt+0x42e4>
   156c8:	muleq	r3, r8, r5
   156cc:	andeq	ip, r3, r4, ror r1
   156d0:	andeq	ip, r3, r8, asr #11
   156d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156d8:	mov	r6, r0
   156dc:	ldr	lr, [pc, #404]	; 15878 <__assert_fail@plt+0x45a0>
   156e0:	sub	sp, sp, #84	; 0x54
   156e4:	add	ip, sp, #32
   156e8:	ldm	lr!, {r0, r1, r2, r3}
   156ec:	ldr	r5, [pc, #392]	; 1587c <__assert_fail@plt+0x45a4>
   156f0:	stmia	ip!, {r0, r1, r2, r3}
   156f4:	ldm	lr!, {r0, r1, r2, r3}
   156f8:	ldr	r4, [sp, #44]	; 0x2c
   156fc:	stmia	ip!, {r0, r1, r2, r3}
   15700:	ldm	lr, {r0, r1, r2, r3}
   15704:	mvn	lr, r4
   15708:	and	lr, lr, #67108864	; 0x4000000
   1570c:	eor	lr, lr, r4
   15710:	stm	ip, {r0, r1, r2, r3}
   15714:	str	lr, [sp, #44]	; 0x2c
   15718:	bl	111d0 <__errno_location@plt>
   1571c:	ldr	r2, [r5, #4]
   15720:	ldr	r4, [r5]
   15724:	cmp	r2, #0
   15728:	mov	r8, r0
   1572c:	ldr	sl, [r0]
   15730:	bgt	1578c <__assert_fail@plt+0x44b4>
   15734:	add	r7, r5, #8
   15738:	cmp	r4, r7
   1573c:	str	r2, [sp, #28]
   15740:	beq	15848 <__assert_fail@plt+0x4570>
   15744:	mov	r3, #8
   15748:	mov	r0, r4
   1574c:	str	r3, [sp]
   15750:	rsb	r2, r2, #1
   15754:	mvn	r3, #-2147483648	; 0x80000000
   15758:	add	r1, sp, #28
   1575c:	bl	28234 <__assert_fail@plt+0x16f5c>
   15760:	mov	r4, r0
   15764:	str	r0, [r5]
   15768:	ldr	r0, [r5, #4]
   1576c:	ldr	r2, [sp, #28]
   15770:	mov	r1, #0
   15774:	sub	r2, r2, r0
   15778:	add	r0, r4, r0, lsl #3
   1577c:	lsl	r2, r2, #3
   15780:	bl	111f4 <memset@plt>
   15784:	ldr	r3, [sp, #28]
   15788:	str	r3, [r5, #4]
   1578c:	ldr	r7, [sp, #36]	; 0x24
   15790:	ldr	r9, [r4]
   15794:	ldr	r5, [r4, #4]
   15798:	ldr	r2, [sp, #72]	; 0x48
   1579c:	ldr	r3, [sp, #32]
   157a0:	ldr	ip, [sp, #76]	; 0x4c
   157a4:	orr	r7, r7, #1
   157a8:	add	fp, sp, #40	; 0x28
   157ac:	str	r2, [sp, #12]
   157b0:	str	r3, [sp]
   157b4:	str	r7, [sp, #4]
   157b8:	mov	r1, r9
   157bc:	mov	r0, r5
   157c0:	str	ip, [sp, #16]
   157c4:	str	fp, [sp, #8]
   157c8:	mvn	r3, #0
   157cc:	mov	r2, r6
   157d0:	bl	12c3c <__assert_fail@plt+0x1964>
   157d4:	cmp	r9, r0
   157d8:	bhi	15838 <__assert_fail@plt+0x4560>
   157dc:	ldr	r3, [pc, #156]	; 15880 <__assert_fail@plt+0x45a8>
   157e0:	add	r9, r0, #1
   157e4:	cmp	r5, r3
   157e8:	str	r9, [r4]
   157ec:	beq	157f8 <__assert_fail@plt+0x4520>
   157f0:	mov	r0, r5
   157f4:	bl	296b0 <__assert_fail@plt+0x183d8>
   157f8:	mov	r0, r9
   157fc:	bl	28018 <__assert_fail@plt+0x16d40>
   15800:	ldr	lr, [sp, #76]	; 0x4c
   15804:	ldr	r3, [sp, #32]
   15808:	ldr	ip, [sp, #72]	; 0x48
   1580c:	mov	r2, r6
   15810:	mov	r1, r9
   15814:	str	r0, [r4, #4]
   15818:	str	r3, [sp]
   1581c:	str	fp, [sp, #8]
   15820:	str	r7, [sp, #4]
   15824:	str	lr, [sp, #16]
   15828:	str	ip, [sp, #12]
   1582c:	mvn	r3, #0
   15830:	mov	r5, r0
   15834:	bl	12c3c <__assert_fail@plt+0x1964>
   15838:	mov	r0, r5
   1583c:	str	sl, [r8]
   15840:	add	sp, sp, #84	; 0x54
   15844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15848:	mov	r3, #8
   1584c:	str	r3, [sp]
   15850:	add	r1, sp, #28
   15854:	rsb	r2, r2, #1
   15858:	mvn	r3, #-2147483648	; 0x80000000
   1585c:	mov	r0, #0
   15860:	bl	28234 <__assert_fail@plt+0x16f5c>
   15864:	mov	r4, r0
   15868:	ldm	r7, {r0, r1}
   1586c:	str	r4, [r5]
   15870:	stm	r4, {r0, r1}
   15874:	b	15768 <__assert_fail@plt+0x4490>
   15878:	muleq	r3, r8, r5
   1587c:	andeq	ip, r3, r4, ror r1
   15880:	andeq	ip, r3, r8, asr #11
   15884:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15888:	mov	r9, r0
   1588c:	ldr	lr, [pc, #416]	; 15a34 <__assert_fail@plt+0x475c>
   15890:	mov	sl, r1
   15894:	sub	sp, sp, #92	; 0x5c
   15898:	ldm	lr!, {r0, r1, r2, r3}
   1589c:	add	ip, sp, #40	; 0x28
   158a0:	ldr	r5, [pc, #400]	; 15a38 <__assert_fail@plt+0x4760>
   158a4:	stmia	ip!, {r0, r1, r2, r3}
   158a8:	ldm	lr!, {r0, r1, r2, r3}
   158ac:	ldr	r4, [sp, #52]	; 0x34
   158b0:	stmia	ip!, {r0, r1, r2, r3}
   158b4:	ldm	lr, {r0, r1, r2, r3}
   158b8:	mvn	lr, r4
   158bc:	and	lr, lr, #67108864	; 0x4000000
   158c0:	eor	lr, lr, r4
   158c4:	stm	ip, {r0, r1, r2, r3}
   158c8:	str	lr, [sp, #52]	; 0x34
   158cc:	bl	111d0 <__errno_location@plt>
   158d0:	ldr	r2, [r5, #4]
   158d4:	ldr	r4, [r5]
   158d8:	cmp	r2, #0
   158dc:	ldr	r3, [r0]
   158e0:	mov	r7, r0
   158e4:	str	r3, [sp, #28]
   158e8:	bgt	15944 <__assert_fail@plt+0x466c>
   158ec:	add	r6, r5, #8
   158f0:	cmp	r4, r6
   158f4:	str	r2, [sp, #36]	; 0x24
   158f8:	beq	15a04 <__assert_fail@plt+0x472c>
   158fc:	mov	r3, #8
   15900:	mov	r0, r4
   15904:	str	r3, [sp]
   15908:	rsb	r2, r2, #1
   1590c:	mvn	r3, #-2147483648	; 0x80000000
   15910:	add	r1, sp, #36	; 0x24
   15914:	bl	28234 <__assert_fail@plt+0x16f5c>
   15918:	mov	r4, r0
   1591c:	str	r0, [r5]
   15920:	ldr	r0, [r5, #4]
   15924:	ldr	r2, [sp, #36]	; 0x24
   15928:	mov	r1, #0
   1592c:	sub	r2, r2, r0
   15930:	add	r0, r4, r0, lsl #3
   15934:	lsl	r2, r2, #3
   15938:	bl	111f4 <memset@plt>
   1593c:	ldr	r3, [sp, #36]	; 0x24
   15940:	str	r3, [r5, #4]
   15944:	ldr	r6, [sp, #44]	; 0x2c
   15948:	ldr	r8, [r4]
   1594c:	ldr	r5, [r4, #4]
   15950:	ldr	r2, [sp, #80]	; 0x50
   15954:	ldr	r3, [sp, #40]	; 0x28
   15958:	ldr	ip, [sp, #84]	; 0x54
   1595c:	orr	r6, r6, #1
   15960:	add	fp, sp, #48	; 0x30
   15964:	str	r2, [sp, #12]
   15968:	str	r3, [sp]
   1596c:	str	r6, [sp, #4]
   15970:	mov	r1, r8
   15974:	mov	r0, r5
   15978:	str	ip, [sp, #16]
   1597c:	str	fp, [sp, #8]
   15980:	mov	r3, sl
   15984:	mov	r2, r9
   15988:	bl	12c3c <__assert_fail@plt+0x1964>
   1598c:	cmp	r8, r0
   15990:	bhi	159f0 <__assert_fail@plt+0x4718>
   15994:	ldr	r3, [pc, #160]	; 15a3c <__assert_fail@plt+0x4764>
   15998:	add	r8, r0, #1
   1599c:	cmp	r5, r3
   159a0:	str	r8, [r4]
   159a4:	beq	159b0 <__assert_fail@plt+0x46d8>
   159a8:	mov	r0, r5
   159ac:	bl	296b0 <__assert_fail@plt+0x183d8>
   159b0:	mov	r0, r8
   159b4:	bl	28018 <__assert_fail@plt+0x16d40>
   159b8:	ldr	ip, [sp, #84]	; 0x54
   159bc:	ldr	lr, [sp, #40]	; 0x28
   159c0:	mov	r3, sl
   159c4:	mov	r2, r9
   159c8:	mov	r1, r8
   159cc:	str	r0, [r4, #4]
   159d0:	ldr	r4, [sp, #80]	; 0x50
   159d4:	str	fp, [sp, #8]
   159d8:	str	r6, [sp, #4]
   159dc:	str	ip, [sp, #16]
   159e0:	str	r4, [sp, #12]
   159e4:	str	lr, [sp]
   159e8:	mov	r5, r0
   159ec:	bl	12c3c <__assert_fail@plt+0x1964>
   159f0:	ldr	r3, [sp, #28]
   159f4:	mov	r0, r5
   159f8:	str	r3, [r7]
   159fc:	add	sp, sp, #92	; 0x5c
   15a00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a04:	mov	r3, #8
   15a08:	str	r3, [sp]
   15a0c:	add	r1, sp, #36	; 0x24
   15a10:	rsb	r2, r2, #1
   15a14:	mvn	r3, #-2147483648	; 0x80000000
   15a18:	mov	r0, #0
   15a1c:	bl	28234 <__assert_fail@plt+0x16f5c>
   15a20:	mov	r4, r0
   15a24:	ldm	r6, {r0, r1}
   15a28:	str	r4, [r5]
   15a2c:	stm	r4, {r0, r1}
   15a30:	b	15920 <__assert_fail@plt+0x4648>
   15a34:	muleq	r3, r8, r5
   15a38:	andeq	ip, r3, r4, ror r1
   15a3c:	andeq	ip, r3, r8, asr #11
   15a40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a44:	sub	sp, sp, #180	; 0xb4
   15a48:	mov	r6, r1
   15a4c:	mov	r4, r0
   15a50:	mov	r9, r2
   15a54:	add	r0, sp, #80	; 0x50
   15a58:	mov	r2, #48	; 0x30
   15a5c:	mov	r1, #0
   15a60:	bl	111f4 <memset@plt>
   15a64:	cmp	r6, #10
   15a68:	beq	15c48 <__assert_fail@plt+0x4970>
   15a6c:	add	r5, sp, #80	; 0x50
   15a70:	str	r6, [sp, #80]	; 0x50
   15a74:	ldm	r5!, {r0, r1, r2, r3}
   15a78:	add	ip, sp, #128	; 0x80
   15a7c:	mov	r7, ip
   15a80:	add	lr, sp, #32
   15a84:	stmia	ip!, {r0, r1, r2, r3}
   15a88:	mov	r8, #67108864	; 0x4000000
   15a8c:	ldm	r5!, {r0, r1, r2, r3}
   15a90:	ldr	r6, [pc, #436]	; 15c4c <__assert_fail@plt+0x4974>
   15a94:	stmia	ip!, {r0, r1, r2, r3}
   15a98:	ldm	r5, {r0, r1, r2, r3}
   15a9c:	stm	ip, {r0, r1, r2, r3}
   15aa0:	ldm	r7!, {r0, r1, r2, r3}
   15aa4:	stmia	lr!, {r0, r1, r2, r3}
   15aa8:	ldm	r7!, {r0, r1, r2, r3}
   15aac:	str	r8, [sp, #44]	; 0x2c
   15ab0:	stmia	lr!, {r0, r1, r2, r3}
   15ab4:	ldm	ip, {r0, r1, r2, r3}
   15ab8:	stm	lr, {r0, r1, r2, r3}
   15abc:	bl	111d0 <__errno_location@plt>
   15ac0:	cmn	r4, #-2147483647	; 0x80000001
   15ac4:	ldr	r5, [r6]
   15ac8:	mov	r7, r0
   15acc:	movne	r0, #0
   15ad0:	moveq	r0, #1
   15ad4:	ldr	r3, [r7]
   15ad8:	orrs	r0, r0, r4, lsr #31
   15adc:	str	r3, [sp, #24]
   15ae0:	bne	15c48 <__assert_fail@plt+0x4970>
   15ae4:	ldr	r2, [r6, #4]
   15ae8:	cmp	r4, r2
   15aec:	blt	15b4c <__assert_fail@plt+0x4874>
   15af0:	add	r8, r6, #8
   15af4:	cmp	r5, r8
   15af8:	str	r2, [sp, #80]	; 0x50
   15afc:	beq	15c18 <__assert_fail@plt+0x4940>
   15b00:	mov	r3, #8
   15b04:	sub	r2, r4, r2
   15b08:	mov	r0, r5
   15b0c:	str	r3, [sp]
   15b10:	add	r2, r2, #1
   15b14:	add	r1, sp, #80	; 0x50
   15b18:	mvn	r3, #-2147483648	; 0x80000000
   15b1c:	bl	28234 <__assert_fail@plt+0x16f5c>
   15b20:	mov	r5, r0
   15b24:	str	r0, [r6]
   15b28:	ldr	r0, [r6, #4]
   15b2c:	ldr	r2, [sp, #80]	; 0x50
   15b30:	mov	r1, #0
   15b34:	sub	r2, r2, r0
   15b38:	add	r0, r5, r0, lsl #3
   15b3c:	lsl	r2, r2, #3
   15b40:	bl	111f4 <memset@plt>
   15b44:	ldr	r3, [sp, #80]	; 0x50
   15b48:	str	r3, [r6, #4]
   15b4c:	add	fp, r5, r4, lsl #3
   15b50:	ldr	r1, [sp, #36]	; 0x24
   15b54:	ldr	r8, [r5, r4, lsl #3]
   15b58:	ldr	r6, [fp, #4]
   15b5c:	ldr	r2, [sp, #72]	; 0x48
   15b60:	ldr	r3, [sp, #32]
   15b64:	ldr	ip, [sp, #76]	; 0x4c
   15b68:	orr	r1, r1, #1
   15b6c:	add	sl, sp, #40	; 0x28
   15b70:	str	r1, [sp, #28]
   15b74:	str	r1, [sp, #4]
   15b78:	str	r2, [sp, #12]
   15b7c:	str	r3, [sp]
   15b80:	mov	r0, r6
   15b84:	mov	r1, r8
   15b88:	str	ip, [sp, #16]
   15b8c:	str	sl, [sp, #8]
   15b90:	mvn	r3, #0
   15b94:	mov	r2, r9
   15b98:	bl	12c3c <__assert_fail@plt+0x1964>
   15b9c:	cmp	r8, r0
   15ba0:	bhi	15c04 <__assert_fail@plt+0x492c>
   15ba4:	ldr	r3, [pc, #164]	; 15c50 <__assert_fail@plt+0x4978>
   15ba8:	add	r8, r0, #1
   15bac:	cmp	r6, r3
   15bb0:	str	r8, [r5, r4, lsl #3]
   15bb4:	beq	15bc0 <__assert_fail@plt+0x48e8>
   15bb8:	mov	r0, r6
   15bbc:	bl	296b0 <__assert_fail@plt+0x183d8>
   15bc0:	mov	r0, r8
   15bc4:	bl	28018 <__assert_fail@plt+0x16d40>
   15bc8:	ldr	lr, [sp, #76]	; 0x4c
   15bcc:	ldr	r3, [sp, #32]
   15bd0:	ldr	ip, [sp, #72]	; 0x48
   15bd4:	ldr	r4, [sp, #28]
   15bd8:	mov	r2, r9
   15bdc:	mov	r1, r8
   15be0:	str	r0, [fp, #4]
   15be4:	str	r3, [sp]
   15be8:	str	sl, [sp, #8]
   15bec:	str	r4, [sp, #4]
   15bf0:	str	lr, [sp, #16]
   15bf4:	str	ip, [sp, #12]
   15bf8:	mvn	r3, #0
   15bfc:	mov	r6, r0
   15c00:	bl	12c3c <__assert_fail@plt+0x1964>
   15c04:	ldr	r3, [sp, #24]
   15c08:	mov	r0, r6
   15c0c:	str	r3, [r7]
   15c10:	add	sp, sp, #180	; 0xb4
   15c14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c18:	mov	r3, #8
   15c1c:	sub	r2, r4, r2
   15c20:	add	r1, sp, #80	; 0x50
   15c24:	str	r3, [sp]
   15c28:	add	r2, r2, #1
   15c2c:	mvn	r3, #-2147483648	; 0x80000000
   15c30:	bl	28234 <__assert_fail@plt+0x16f5c>
   15c34:	mov	r5, r0
   15c38:	ldm	r8, {r0, r1}
   15c3c:	str	r5, [r6]
   15c40:	stm	r5, {r0, r1}
   15c44:	b	15b28 <__assert_fail@plt+0x4850>
   15c48:	bl	112cc <abort@plt>
   15c4c:	andeq	ip, r3, r4, ror r1
   15c50:	andeq	ip, r3, r8, asr #11
   15c54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c58:	mov	r7, r1
   15c5c:	ldr	lr, [pc, #492]	; 15e50 <__assert_fail@plt+0x4b78>
   15c60:	mov	r8, r2
   15c64:	mov	r4, r0
   15c68:	mov	fp, r3
   15c6c:	ldm	lr!, {r0, r1, r2, r3}
   15c70:	sub	sp, sp, #100	; 0x64
   15c74:	add	ip, sp, #48	; 0x30
   15c78:	mov	sl, #10
   15c7c:	stmia	ip!, {r0, r1, r2, r3}
   15c80:	cmp	r8, #0
   15c84:	cmpne	r7, #0
   15c88:	ldm	lr!, {r0, r1, r2, r3}
   15c8c:	str	sl, [sp, #48]	; 0x30
   15c90:	stmia	ip!, {r0, r1, r2, r3}
   15c94:	ldm	lr, {r0, r1, r2, r3}
   15c98:	stm	ip, {r0, r1, r2, r3}
   15c9c:	beq	15e4c <__assert_fail@plt+0x4b74>
   15ca0:	str	r7, [sp, #88]	; 0x58
   15ca4:	str	r8, [sp, #92]	; 0x5c
   15ca8:	bl	111d0 <__errno_location@plt>
   15cac:	ldr	r6, [pc, #416]	; 15e54 <__assert_fail@plt+0x4b7c>
   15cb0:	cmn	r4, #-2147483647	; 0x80000001
   15cb4:	ldr	r5, [r6]
   15cb8:	mov	r9, r0
   15cbc:	movne	r0, #0
   15cc0:	moveq	r0, #1
   15cc4:	ldr	r3, [r9]
   15cc8:	orrs	r0, r0, r4, lsr #31
   15ccc:	str	r3, [sp, #28]
   15cd0:	bne	15e4c <__assert_fail@plt+0x4b74>
   15cd4:	ldr	r2, [r6, #4]
   15cd8:	cmp	r4, r2
   15cdc:	movlt	r3, sl
   15ce0:	blt	15d4c <__assert_fail@plt+0x4a74>
   15ce4:	add	r7, r6, #8
   15ce8:	cmp	r5, r7
   15cec:	str	r2, [sp, #44]	; 0x2c
   15cf0:	beq	15e1c <__assert_fail@plt+0x4b44>
   15cf4:	mov	r3, #8
   15cf8:	sub	r2, r4, r2
   15cfc:	mov	r0, r5
   15d00:	str	r3, [sp]
   15d04:	add	r2, r2, #1
   15d08:	mvn	r3, #-2147483648	; 0x80000000
   15d0c:	add	r1, sp, #44	; 0x2c
   15d10:	bl	28234 <__assert_fail@plt+0x16f5c>
   15d14:	mov	r5, r0
   15d18:	str	r0, [r6]
   15d1c:	ldr	r0, [r6, #4]
   15d20:	ldr	r2, [sp, #44]	; 0x2c
   15d24:	mov	r1, #0
   15d28:	sub	r2, r2, r0
   15d2c:	add	r0, r5, r0, lsl #3
   15d30:	lsl	r2, r2, #3
   15d34:	bl	111f4 <memset@plt>
   15d38:	ldr	r3, [sp, #48]	; 0x30
   15d3c:	ldr	r7, [sp, #88]	; 0x58
   15d40:	ldr	r8, [sp, #92]	; 0x5c
   15d44:	ldr	r2, [sp, #44]	; 0x2c
   15d48:	str	r2, [r6, #4]
   15d4c:	add	r2, r5, r4, lsl #3
   15d50:	mov	r1, r2
   15d54:	str	r2, [sp, #32]
   15d58:	ldr	r2, [sp, #52]	; 0x34
   15d5c:	ldr	r6, [r1, #4]
   15d60:	ldr	sl, [r5, r4, lsl #3]
   15d64:	orr	r2, r2, #1
   15d68:	str	r3, [sp]
   15d6c:	add	r3, sp, #56	; 0x38
   15d70:	str	r2, [sp, #36]	; 0x24
   15d74:	str	r2, [sp, #4]
   15d78:	str	r3, [sp, #8]
   15d7c:	mov	r0, r6
   15d80:	str	r8, [sp, #16]
   15d84:	str	r7, [sp, #12]
   15d88:	mov	r1, sl
   15d8c:	mvn	r3, #0
   15d90:	mov	r2, fp
   15d94:	bl	12c3c <__assert_fail@plt+0x1964>
   15d98:	cmp	sl, r0
   15d9c:	bhi	15e08 <__assert_fail@plt+0x4b30>
   15da0:	ldr	r3, [pc, #176]	; 15e58 <__assert_fail@plt+0x4b80>
   15da4:	add	r7, r0, #1
   15da8:	cmp	r6, r3
   15dac:	str	r7, [r5, r4, lsl #3]
   15db0:	beq	15dbc <__assert_fail@plt+0x4ae4>
   15db4:	mov	r0, r6
   15db8:	bl	296b0 <__assert_fail@plt+0x183d8>
   15dbc:	mov	r0, r7
   15dc0:	bl	28018 <__assert_fail@plt+0x16d40>
   15dc4:	ldr	r3, [sp, #32]
   15dc8:	ldr	lr, [sp, #92]	; 0x5c
   15dcc:	ldr	ip, [sp, #88]	; 0x58
   15dd0:	ldr	r4, [sp, #36]	; 0x24
   15dd4:	mov	r2, fp
   15dd8:	mov	r1, r7
   15ddc:	str	r0, [r3, #4]
   15de0:	add	r3, sp, #56	; 0x38
   15de4:	str	r3, [sp, #8]
   15de8:	ldr	r3, [sp, #48]	; 0x30
   15dec:	str	r4, [sp, #4]
   15df0:	str	r3, [sp]
   15df4:	str	lr, [sp, #16]
   15df8:	str	ip, [sp, #12]
   15dfc:	mvn	r3, #0
   15e00:	mov	r6, r0
   15e04:	bl	12c3c <__assert_fail@plt+0x1964>
   15e08:	ldr	r3, [sp, #28]
   15e0c:	mov	r0, r6
   15e10:	str	r3, [r9]
   15e14:	add	sp, sp, #100	; 0x64
   15e18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e1c:	mov	r3, #8
   15e20:	sub	r2, r4, r2
   15e24:	str	r3, [sp]
   15e28:	add	r1, sp, #44	; 0x2c
   15e2c:	add	r2, r2, #1
   15e30:	mvn	r3, #-2147483648	; 0x80000000
   15e34:	bl	28234 <__assert_fail@plt+0x16f5c>
   15e38:	mov	r5, r0
   15e3c:	ldm	r7, {r0, r1}
   15e40:	str	r5, [r6]
   15e44:	stm	r5, {r0, r1}
   15e48:	b	15d1c <__assert_fail@plt+0x4a44>
   15e4c:	bl	112cc <abort@plt>
   15e50:	muleq	r3, r8, r5
   15e54:	andeq	ip, r3, r4, ror r1
   15e58:	andeq	ip, r3, r8, asr #11
   15e5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e60:	mov	r7, r1
   15e64:	ldr	lr, [pc, #492]	; 16058 <__assert_fail@plt+0x4d80>
   15e68:	mov	r8, r2
   15e6c:	mov	r4, r0
   15e70:	mov	fp, r3
   15e74:	ldm	lr!, {r0, r1, r2, r3}
   15e78:	sub	sp, sp, #100	; 0x64
   15e7c:	add	ip, sp, #48	; 0x30
   15e80:	mov	sl, #10
   15e84:	stmia	ip!, {r0, r1, r2, r3}
   15e88:	cmp	r8, #0
   15e8c:	cmpne	r7, #0
   15e90:	ldm	lr!, {r0, r1, r2, r3}
   15e94:	str	sl, [sp, #48]	; 0x30
   15e98:	stmia	ip!, {r0, r1, r2, r3}
   15e9c:	ldm	lr, {r0, r1, r2, r3}
   15ea0:	stm	ip, {r0, r1, r2, r3}
   15ea4:	beq	16054 <__assert_fail@plt+0x4d7c>
   15ea8:	str	r7, [sp, #88]	; 0x58
   15eac:	str	r8, [sp, #92]	; 0x5c
   15eb0:	bl	111d0 <__errno_location@plt>
   15eb4:	ldr	r6, [pc, #416]	; 1605c <__assert_fail@plt+0x4d84>
   15eb8:	cmn	r4, #-2147483647	; 0x80000001
   15ebc:	ldr	r5, [r6]
   15ec0:	mov	r9, r0
   15ec4:	movne	r0, #0
   15ec8:	moveq	r0, #1
   15ecc:	ldr	r3, [r9]
   15ed0:	orrs	r0, r0, r4, lsr #31
   15ed4:	str	r3, [sp, #28]
   15ed8:	bne	16054 <__assert_fail@plt+0x4d7c>
   15edc:	ldr	r2, [r6, #4]
   15ee0:	cmp	r4, r2
   15ee4:	movlt	r3, sl
   15ee8:	blt	15f54 <__assert_fail@plt+0x4c7c>
   15eec:	add	r7, r6, #8
   15ef0:	cmp	r5, r7
   15ef4:	str	r2, [sp, #44]	; 0x2c
   15ef8:	beq	16024 <__assert_fail@plt+0x4d4c>
   15efc:	mov	r3, #8
   15f00:	sub	r2, r4, r2
   15f04:	mov	r0, r5
   15f08:	str	r3, [sp]
   15f0c:	add	r2, r2, #1
   15f10:	mvn	r3, #-2147483648	; 0x80000000
   15f14:	add	r1, sp, #44	; 0x2c
   15f18:	bl	28234 <__assert_fail@plt+0x16f5c>
   15f1c:	mov	r5, r0
   15f20:	str	r0, [r6]
   15f24:	ldr	r0, [r6, #4]
   15f28:	ldr	r2, [sp, #44]	; 0x2c
   15f2c:	mov	r1, #0
   15f30:	sub	r2, r2, r0
   15f34:	add	r0, r5, r0, lsl #3
   15f38:	lsl	r2, r2, #3
   15f3c:	bl	111f4 <memset@plt>
   15f40:	ldr	r3, [sp, #48]	; 0x30
   15f44:	ldr	r7, [sp, #88]	; 0x58
   15f48:	ldr	r8, [sp, #92]	; 0x5c
   15f4c:	ldr	r2, [sp, #44]	; 0x2c
   15f50:	str	r2, [r6, #4]
   15f54:	add	r2, r5, r4, lsl #3
   15f58:	mov	r1, r2
   15f5c:	str	r2, [sp, #32]
   15f60:	ldr	r2, [sp, #52]	; 0x34
   15f64:	ldr	r6, [r1, #4]
   15f68:	ldr	sl, [r5, r4, lsl #3]
   15f6c:	orr	r2, r2, #1
   15f70:	str	r3, [sp]
   15f74:	add	r3, sp, #56	; 0x38
   15f78:	str	r2, [sp, #36]	; 0x24
   15f7c:	str	r2, [sp, #4]
   15f80:	str	r3, [sp, #8]
   15f84:	mov	r0, r6
   15f88:	str	r8, [sp, #16]
   15f8c:	str	r7, [sp, #12]
   15f90:	mov	r1, sl
   15f94:	ldr	r3, [sp, #136]	; 0x88
   15f98:	mov	r2, fp
   15f9c:	bl	12c3c <__assert_fail@plt+0x1964>
   15fa0:	cmp	sl, r0
   15fa4:	bhi	16010 <__assert_fail@plt+0x4d38>
   15fa8:	ldr	r3, [pc, #176]	; 16060 <__assert_fail@plt+0x4d88>
   15fac:	add	r7, r0, #1
   15fb0:	cmp	r6, r3
   15fb4:	str	r7, [r5, r4, lsl #3]
   15fb8:	beq	15fc4 <__assert_fail@plt+0x4cec>
   15fbc:	mov	r0, r6
   15fc0:	bl	296b0 <__assert_fail@plt+0x183d8>
   15fc4:	mov	r0, r7
   15fc8:	bl	28018 <__assert_fail@plt+0x16d40>
   15fcc:	ldr	r3, [sp, #32]
   15fd0:	ldr	lr, [sp, #92]	; 0x5c
   15fd4:	ldr	ip, [sp, #88]	; 0x58
   15fd8:	ldr	r4, [sp, #36]	; 0x24
   15fdc:	mov	r2, fp
   15fe0:	mov	r1, r7
   15fe4:	str	r0, [r3, #4]
   15fe8:	add	r3, sp, #56	; 0x38
   15fec:	str	r3, [sp, #8]
   15ff0:	ldr	r3, [sp, #48]	; 0x30
   15ff4:	str	r4, [sp, #4]
   15ff8:	str	r3, [sp]
   15ffc:	str	lr, [sp, #16]
   16000:	str	ip, [sp, #12]
   16004:	ldr	r3, [sp, #136]	; 0x88
   16008:	mov	r6, r0
   1600c:	bl	12c3c <__assert_fail@plt+0x1964>
   16010:	ldr	r3, [sp, #28]
   16014:	mov	r0, r6
   16018:	str	r3, [r9]
   1601c:	add	sp, sp, #100	; 0x64
   16020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16024:	mov	r3, #8
   16028:	sub	r2, r4, r2
   1602c:	str	r3, [sp]
   16030:	add	r1, sp, #44	; 0x2c
   16034:	add	r2, r2, #1
   16038:	mvn	r3, #-2147483648	; 0x80000000
   1603c:	bl	28234 <__assert_fail@plt+0x16f5c>
   16040:	mov	r5, r0
   16044:	ldm	r7, {r0, r1}
   16048:	str	r5, [r6]
   1604c:	stm	r5, {r0, r1}
   16050:	b	15f24 <__assert_fail@plt+0x4c4c>
   16054:	bl	112cc <abort@plt>
   16058:	muleq	r3, r8, r5
   1605c:	andeq	ip, r3, r4, ror r1
   16060:	andeq	ip, r3, r8, asr #11
   16064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16068:	mov	r5, r0
   1606c:	ldr	lr, [pc, #452]	; 16238 <__assert_fail@plt+0x4f60>
   16070:	mov	r6, r1
   16074:	mov	sl, r2
   16078:	ldm	lr!, {r0, r1, r2, r3}
   1607c:	sub	sp, sp, #92	; 0x5c
   16080:	add	ip, sp, #40	; 0x28
   16084:	cmp	r6, #0
   16088:	cmpne	r5, #0
   1608c:	stmia	ip!, {r0, r1, r2, r3}
   16090:	mov	r9, #10
   16094:	ldm	lr!, {r0, r1, r2, r3}
   16098:	moveq	fp, #1
   1609c:	movne	fp, #0
   160a0:	str	r9, [sp, #40]	; 0x28
   160a4:	stmia	ip!, {r0, r1, r2, r3}
   160a8:	ldm	lr, {r0, r1, r2, r3}
   160ac:	stm	ip, {r0, r1, r2, r3}
   160b0:	beq	16234 <__assert_fail@plt+0x4f5c>
   160b4:	str	r5, [sp, #80]	; 0x50
   160b8:	str	r6, [sp, #84]	; 0x54
   160bc:	bl	111d0 <__errno_location@plt>
   160c0:	ldr	r7, [pc, #372]	; 1623c <__assert_fail@plt+0x4f64>
   160c4:	ldr	r2, [r7, #4]
   160c8:	ldr	r4, [r7]
   160cc:	cmp	r2, #0
   160d0:	ldr	r3, [r0]
   160d4:	mov	r8, r0
   160d8:	str	r3, [sp, #24]
   160dc:	movgt	r3, r9
   160e0:	bgt	16148 <__assert_fail@plt+0x4e70>
   160e4:	add	r5, r7, #8
   160e8:	cmp	r4, r5
   160ec:	str	r2, [sp, #36]	; 0x24
   160f0:	beq	16204 <__assert_fail@plt+0x4f2c>
   160f4:	mov	r3, #8
   160f8:	mov	r0, r4
   160fc:	str	r3, [sp]
   16100:	rsb	r2, r2, #1
   16104:	mvn	r3, #-2147483648	; 0x80000000
   16108:	add	r1, sp, #36	; 0x24
   1610c:	bl	28234 <__assert_fail@plt+0x16f5c>
   16110:	mov	r4, r0
   16114:	str	r0, [r7]
   16118:	ldr	r0, [r7, #4]
   1611c:	ldr	r2, [sp, #36]	; 0x24
   16120:	mov	r1, #0
   16124:	sub	r2, r2, r0
   16128:	add	r0, r4, r0, lsl #3
   1612c:	lsl	r2, r2, #3
   16130:	bl	111f4 <memset@plt>
   16134:	ldr	r3, [sp, #40]	; 0x28
   16138:	ldr	r5, [sp, #80]	; 0x50
   1613c:	ldr	r6, [sp, #84]	; 0x54
   16140:	ldr	r2, [sp, #36]	; 0x24
   16144:	str	r2, [r7, #4]
   16148:	ldr	r2, [sp, #44]	; 0x2c
   1614c:	ldr	r9, [r4]
   16150:	ldr	r7, [r4, #4]
   16154:	orr	r2, r2, #1
   16158:	add	fp, sp, #48	; 0x30
   1615c:	str	r2, [sp, #28]
   16160:	str	r2, [sp, #4]
   16164:	str	r3, [sp]
   16168:	str	r6, [sp, #16]
   1616c:	str	r5, [sp, #12]
   16170:	mov	r1, r9
   16174:	mov	r0, r7
   16178:	str	fp, [sp, #8]
   1617c:	mvn	r3, #0
   16180:	mov	r2, sl
   16184:	bl	12c3c <__assert_fail@plt+0x1964>
   16188:	cmp	r9, r0
   1618c:	bhi	161f0 <__assert_fail@plt+0x4f18>
   16190:	ldr	r3, [pc, #168]	; 16240 <__assert_fail@plt+0x4f68>
   16194:	add	r5, r0, #1
   16198:	cmp	r7, r3
   1619c:	str	r5, [r4]
   161a0:	beq	161ac <__assert_fail@plt+0x4ed4>
   161a4:	mov	r0, r7
   161a8:	bl	296b0 <__assert_fail@plt+0x183d8>
   161ac:	mov	r0, r5
   161b0:	bl	28018 <__assert_fail@plt+0x16d40>
   161b4:	ldr	lr, [sp, #84]	; 0x54
   161b8:	ldr	r3, [sp, #40]	; 0x28
   161bc:	ldr	ip, [sp, #80]	; 0x50
   161c0:	mov	r2, sl
   161c4:	mov	r1, r5
   161c8:	str	r0, [r4, #4]
   161cc:	ldr	r4, [sp, #28]
   161d0:	str	r3, [sp]
   161d4:	str	fp, [sp, #8]
   161d8:	str	r4, [sp, #4]
   161dc:	str	lr, [sp, #16]
   161e0:	str	ip, [sp, #12]
   161e4:	mvn	r3, #0
   161e8:	mov	r7, r0
   161ec:	bl	12c3c <__assert_fail@plt+0x1964>
   161f0:	ldr	r3, [sp, #24]
   161f4:	mov	r0, r7
   161f8:	str	r3, [r8]
   161fc:	add	sp, sp, #92	; 0x5c
   16200:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16204:	mov	r3, #8
   16208:	str	r3, [sp]
   1620c:	add	r1, sp, #36	; 0x24
   16210:	rsb	r2, r2, #1
   16214:	mov	r0, fp
   16218:	mvn	r3, #-2147483648	; 0x80000000
   1621c:	bl	28234 <__assert_fail@plt+0x16f5c>
   16220:	mov	r4, r0
   16224:	ldm	r5, {r0, r1}
   16228:	str	r4, [r7]
   1622c:	stm	r4, {r0, r1}
   16230:	b	16118 <__assert_fail@plt+0x4e40>
   16234:	bl	112cc <abort@plt>
   16238:	muleq	r3, r8, r5
   1623c:	andeq	ip, r3, r4, ror r1
   16240:	andeq	ip, r3, r8, asr #11
   16244:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16248:	mov	r5, r0
   1624c:	ldr	lr, [pc, #464]	; 16424 <__assert_fail@plt+0x514c>
   16250:	mov	r6, r1
   16254:	mov	sl, r2
   16258:	mov	fp, r3
   1625c:	ldm	lr!, {r0, r1, r2, r3}
   16260:	sub	sp, sp, #92	; 0x5c
   16264:	add	ip, sp, #40	; 0x28
   16268:	cmp	r6, #0
   1626c:	cmpne	r5, #0
   16270:	stmia	ip!, {r0, r1, r2, r3}
   16274:	moveq	r4, #1
   16278:	ldm	lr!, {r0, r1, r2, r3}
   1627c:	movne	r4, #0
   16280:	mov	r9, #10
   16284:	str	r4, [sp, #28]
   16288:	stmia	ip!, {r0, r1, r2, r3}
   1628c:	ldm	lr, {r0, r1, r2, r3}
   16290:	str	r9, [sp, #40]	; 0x28
   16294:	stm	ip, {r0, r1, r2, r3}
   16298:	beq	16420 <__assert_fail@plt+0x5148>
   1629c:	str	r5, [sp, #80]	; 0x50
   162a0:	str	r6, [sp, #84]	; 0x54
   162a4:	bl	111d0 <__errno_location@plt>
   162a8:	ldr	r7, [pc, #376]	; 16428 <__assert_fail@plt+0x5150>
   162ac:	ldr	r2, [r7, #4]
   162b0:	ldr	r4, [r7]
   162b4:	cmp	r2, #0
   162b8:	ldr	r3, [r0]
   162bc:	mov	r8, r0
   162c0:	str	r3, [sp, #24]
   162c4:	movgt	r3, r9
   162c8:	bgt	16330 <__assert_fail@plt+0x5058>
   162cc:	add	r5, r7, #8
   162d0:	cmp	r4, r5
   162d4:	str	r2, [sp, #36]	; 0x24
   162d8:	beq	163f0 <__assert_fail@plt+0x5118>
   162dc:	mov	r3, #8
   162e0:	mov	r0, r4
   162e4:	str	r3, [sp]
   162e8:	rsb	r2, r2, #1
   162ec:	mvn	r3, #-2147483648	; 0x80000000
   162f0:	add	r1, sp, #36	; 0x24
   162f4:	bl	28234 <__assert_fail@plt+0x16f5c>
   162f8:	mov	r4, r0
   162fc:	str	r0, [r7]
   16300:	ldr	r0, [r7, #4]
   16304:	ldr	r2, [sp, #36]	; 0x24
   16308:	mov	r1, #0
   1630c:	sub	r2, r2, r0
   16310:	add	r0, r4, r0, lsl #3
   16314:	lsl	r2, r2, #3
   16318:	bl	111f4 <memset@plt>
   1631c:	ldr	r3, [sp, #40]	; 0x28
   16320:	ldr	r5, [sp, #80]	; 0x50
   16324:	ldr	r6, [sp, #84]	; 0x54
   16328:	ldr	r2, [sp, #36]	; 0x24
   1632c:	str	r2, [r7, #4]
   16330:	ldr	r2, [sp, #44]	; 0x2c
   16334:	ldr	r9, [r4]
   16338:	ldr	r7, [r4, #4]
   1633c:	orr	r2, r2, #1
   16340:	str	r3, [sp]
   16344:	add	r3, sp, #48	; 0x30
   16348:	str	r2, [sp, #28]
   1634c:	str	r2, [sp, #4]
   16350:	str	r3, [sp, #8]
   16354:	str	r6, [sp, #16]
   16358:	str	r5, [sp, #12]
   1635c:	mov	r1, r9
   16360:	mov	r0, r7
   16364:	mov	r3, fp
   16368:	mov	r2, sl
   1636c:	bl	12c3c <__assert_fail@plt+0x1964>
   16370:	cmp	r9, r0
   16374:	bhi	163dc <__assert_fail@plt+0x5104>
   16378:	ldr	r3, [pc, #172]	; 1642c <__assert_fail@plt+0x5154>
   1637c:	add	r5, r0, #1
   16380:	cmp	r7, r3
   16384:	str	r5, [r4]
   16388:	beq	16394 <__assert_fail@plt+0x50bc>
   1638c:	mov	r0, r7
   16390:	bl	296b0 <__assert_fail@plt+0x183d8>
   16394:	mov	r0, r5
   16398:	bl	28018 <__assert_fail@plt+0x16d40>
   1639c:	add	lr, sp, #48	; 0x30
   163a0:	ldr	ip, [sp, #84]	; 0x54
   163a4:	mov	r1, r5
   163a8:	ldr	r5, [sp, #28]
   163ac:	mov	r3, fp
   163b0:	mov	r2, sl
   163b4:	str	r0, [r4, #4]
   163b8:	ldr	r4, [sp, #80]	; 0x50
   163bc:	str	lr, [sp, #8]
   163c0:	ldr	lr, [sp, #40]	; 0x28
   163c4:	str	r5, [sp, #4]
   163c8:	str	ip, [sp, #16]
   163cc:	str	r4, [sp, #12]
   163d0:	str	lr, [sp]
   163d4:	mov	r7, r0
   163d8:	bl	12c3c <__assert_fail@plt+0x1964>
   163dc:	ldr	r3, [sp, #24]
   163e0:	mov	r0, r7
   163e4:	str	r3, [r8]
   163e8:	add	sp, sp, #92	; 0x5c
   163ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163f0:	mov	r3, #8
   163f4:	str	r3, [sp]
   163f8:	add	r1, sp, #36	; 0x24
   163fc:	rsb	r2, r2, #1
   16400:	ldr	r0, [sp, #28]
   16404:	mvn	r3, #-2147483648	; 0x80000000
   16408:	bl	28234 <__assert_fail@plt+0x16f5c>
   1640c:	mov	r4, r0
   16410:	ldm	r5, {r0, r1}
   16414:	str	r4, [r7]
   16418:	stm	r4, {r0, r1}
   1641c:	b	16300 <__assert_fail@plt+0x5028>
   16420:	bl	112cc <abort@plt>
   16424:	muleq	r3, r8, r5
   16428:	andeq	ip, r3, r4, ror r1
   1642c:	andeq	ip, r3, r8, asr #11
   16430:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16434:	sub	sp, sp, #52	; 0x34
   16438:	mov	r5, r0
   1643c:	mov	sl, r1
   16440:	mov	fp, r2
   16444:	bl	111d0 <__errno_location@plt>
   16448:	ldr	r4, [pc, #404]	; 165e4 <__assert_fail@plt+0x530c>
   1644c:	cmn	r5, #-2147483647	; 0x80000001
   16450:	ldr	r6, [r4]
   16454:	mov	r8, r0
   16458:	movne	r0, #0
   1645c:	moveq	r0, #1
   16460:	ldr	r3, [r8]
   16464:	orrs	r0, r0, r5, lsr #31
   16468:	str	r3, [sp, #28]
   1646c:	bne	165e0 <__assert_fail@plt+0x5308>
   16470:	ldr	r2, [r4, #4]
   16474:	cmp	r5, r2
   16478:	blt	164d8 <__assert_fail@plt+0x5200>
   1647c:	add	r7, r4, #8
   16480:	cmp	r6, r7
   16484:	str	r2, [sp, #44]	; 0x2c
   16488:	beq	165b0 <__assert_fail@plt+0x52d8>
   1648c:	mov	r3, #8
   16490:	sub	r2, r5, r2
   16494:	mov	r0, r6
   16498:	str	r3, [sp]
   1649c:	add	r2, r2, #1
   164a0:	mvn	r3, #-2147483648	; 0x80000000
   164a4:	add	r1, sp, #44	; 0x2c
   164a8:	bl	28234 <__assert_fail@plt+0x16f5c>
   164ac:	mov	r6, r0
   164b0:	str	r0, [r4]
   164b4:	ldr	r0, [r4, #4]
   164b8:	ldr	r2, [sp, #44]	; 0x2c
   164bc:	mov	r1, #0
   164c0:	sub	r2, r2, r0
   164c4:	add	r0, r6, r0, lsl #3
   164c8:	lsl	r2, r2, #3
   164cc:	bl	111f4 <memset@plt>
   164d0:	ldr	r3, [sp, #44]	; 0x2c
   164d4:	str	r3, [r4, #4]
   164d8:	ldr	r2, [r4, #56]	; 0x38
   164dc:	add	r3, r6, r5, lsl #3
   164e0:	ldr	r1, [r4, #20]
   164e4:	ldr	r7, [r3, #4]
   164e8:	ldr	r9, [r6, r5, lsl #3]
   164ec:	ldr	ip, [r4, #60]	; 0x3c
   164f0:	str	r3, [sp, #32]
   164f4:	ldr	r3, [r4, #16]
   164f8:	str	r2, [sp, #12]
   164fc:	ldr	r2, [pc, #228]	; 165e8 <__assert_fail@plt+0x5310>
   16500:	orr	r1, r1, #1
   16504:	str	r1, [sp, #36]	; 0x24
   16508:	str	r1, [sp, #4]
   1650c:	str	r2, [sp, #8]
   16510:	str	r3, [sp]
   16514:	mov	r0, r7
   16518:	mov	r1, r9
   1651c:	str	ip, [sp, #16]
   16520:	mov	r3, fp
   16524:	mov	r2, sl
   16528:	bl	12c3c <__assert_fail@plt+0x1964>
   1652c:	cmp	r9, r0
   16530:	bhi	1659c <__assert_fail@plt+0x52c4>
   16534:	ldr	r3, [pc, #176]	; 165ec <__assert_fail@plt+0x5314>
   16538:	add	r9, r0, #1
   1653c:	cmp	r7, r3
   16540:	str	r9, [r6, r5, lsl #3]
   16544:	beq	16550 <__assert_fail@plt+0x5278>
   16548:	mov	r0, r7
   1654c:	bl	296b0 <__assert_fail@plt+0x183d8>
   16550:	mov	r0, r9
   16554:	bl	28018 <__assert_fail@plt+0x16d40>
   16558:	ldr	ip, [sp, #32]
   1655c:	ldr	lr, [r4, #60]	; 0x3c
   16560:	ldr	r5, [r4, #56]	; 0x38
   16564:	mov	r3, fp
   16568:	mov	r2, sl
   1656c:	mov	r1, r9
   16570:	str	r0, [ip, #4]
   16574:	ldr	ip, [r4, #16]
   16578:	ldr	r4, [pc, #104]	; 165e8 <__assert_fail@plt+0x5310>
   1657c:	str	lr, [sp, #16]
   16580:	str	r4, [sp, #8]
   16584:	ldr	r4, [sp, #36]	; 0x24
   16588:	str	r5, [sp, #12]
   1658c:	str	r4, [sp, #4]
   16590:	str	ip, [sp]
   16594:	mov	r7, r0
   16598:	bl	12c3c <__assert_fail@plt+0x1964>
   1659c:	ldr	r3, [sp, #28]
   165a0:	mov	r0, r7
   165a4:	str	r3, [r8]
   165a8:	add	sp, sp, #52	; 0x34
   165ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165b0:	mov	r3, #8
   165b4:	sub	r2, r5, r2
   165b8:	str	r3, [sp]
   165bc:	add	r1, sp, #44	; 0x2c
   165c0:	add	r2, r2, #1
   165c4:	mvn	r3, #-2147483648	; 0x80000000
   165c8:	bl	28234 <__assert_fail@plt+0x16f5c>
   165cc:	mov	r6, r0
   165d0:	ldm	r7, {r0, r1}
   165d4:	str	r6, [r4]
   165d8:	stm	r6, {r0, r1}
   165dc:	b	164b4 <__assert_fail@plt+0x51dc>
   165e0:	bl	112cc <abort@plt>
   165e4:	andeq	ip, r3, r4, ror r1
   165e8:	andeq	ip, r3, ip, lsl #3
   165ec:	andeq	ip, r3, r8, asr #11
   165f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165f4:	sub	sp, sp, #44	; 0x2c
   165f8:	mov	r9, r0
   165fc:	mov	sl, r1
   16600:	bl	111d0 <__errno_location@plt>
   16604:	ldr	r4, [pc, #360]	; 16774 <__assert_fail@plt+0x549c>
   16608:	ldr	r2, [r4, #4]
   1660c:	ldr	r5, [r4]
   16610:	cmp	r2, #0
   16614:	ldr	r3, [r0]
   16618:	mov	r7, r0
   1661c:	str	r3, [sp, #24]
   16620:	bgt	1667c <__assert_fail@plt+0x53a4>
   16624:	add	r6, r4, #8
   16628:	cmp	r5, r6
   1662c:	str	r2, [sp, #36]	; 0x24
   16630:	beq	16744 <__assert_fail@plt+0x546c>
   16634:	mov	r3, #8
   16638:	mov	r0, r5
   1663c:	str	r3, [sp]
   16640:	rsb	r2, r2, #1
   16644:	mvn	r3, #-2147483648	; 0x80000000
   16648:	add	r1, sp, #36	; 0x24
   1664c:	bl	28234 <__assert_fail@plt+0x16f5c>
   16650:	mov	r5, r0
   16654:	str	r0, [r4]
   16658:	ldr	r0, [r4, #4]
   1665c:	ldr	r2, [sp, #36]	; 0x24
   16660:	mov	r1, #0
   16664:	sub	r2, r2, r0
   16668:	add	r0, r5, r0, lsl #3
   1666c:	lsl	r2, r2, #3
   16670:	bl	111f4 <memset@plt>
   16674:	ldr	r3, [sp, #36]	; 0x24
   16678:	str	r3, [r4, #4]
   1667c:	ldr	r1, [r4, #20]
   16680:	ldr	r8, [r5]
   16684:	ldr	r6, [r5, #4]
   16688:	ldr	r2, [r4, #56]	; 0x38
   1668c:	ldr	r3, [r4, #16]
   16690:	ldr	ip, [r4, #60]	; 0x3c
   16694:	ldr	fp, [pc, #220]	; 16778 <__assert_fail@plt+0x54a0>
   16698:	orr	r1, r1, #1
   1669c:	str	r1, [sp, #28]
   166a0:	str	r1, [sp, #4]
   166a4:	str	r2, [sp, #12]
   166a8:	str	r3, [sp]
   166ac:	mov	r1, r8
   166b0:	mov	r0, r6
   166b4:	str	ip, [sp, #16]
   166b8:	str	fp, [sp, #8]
   166bc:	mov	r3, sl
   166c0:	mov	r2, r9
   166c4:	bl	12c3c <__assert_fail@plt+0x1964>
   166c8:	cmp	r8, r0
   166cc:	bhi	16730 <__assert_fail@plt+0x5458>
   166d0:	ldr	r3, [pc, #164]	; 1677c <__assert_fail@plt+0x54a4>
   166d4:	add	r8, r0, #1
   166d8:	cmp	r6, r3
   166dc:	str	r8, [r5]
   166e0:	beq	166ec <__assert_fail@plt+0x5414>
   166e4:	mov	r0, r6
   166e8:	bl	296b0 <__assert_fail@plt+0x183d8>
   166ec:	mov	r0, r8
   166f0:	bl	28018 <__assert_fail@plt+0x16d40>
   166f4:	ldr	lr, [r4, #60]	; 0x3c
   166f8:	ldr	ip, [r4, #16]
   166fc:	mov	r3, sl
   16700:	mov	r2, r9
   16704:	mov	r1, r8
   16708:	str	r0, [r5, #4]
   1670c:	ldr	r5, [r4, #56]	; 0x38
   16710:	ldr	r4, [sp, #28]
   16714:	str	fp, [sp, #8]
   16718:	str	r4, [sp, #4]
   1671c:	str	lr, [sp, #16]
   16720:	str	r5, [sp, #12]
   16724:	str	ip, [sp]
   16728:	mov	r6, r0
   1672c:	bl	12c3c <__assert_fail@plt+0x1964>
   16730:	ldr	r3, [sp, #24]
   16734:	mov	r0, r6
   16738:	str	r3, [r7]
   1673c:	add	sp, sp, #44	; 0x2c
   16740:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16744:	mov	r3, #8
   16748:	str	r3, [sp]
   1674c:	add	r1, sp, #36	; 0x24
   16750:	rsb	r2, r2, #1
   16754:	mvn	r3, #-2147483648	; 0x80000000
   16758:	mov	r0, #0
   1675c:	bl	28234 <__assert_fail@plt+0x16f5c>
   16760:	mov	r5, r0
   16764:	ldm	r6, {r0, r1}
   16768:	str	r5, [r4]
   1676c:	stm	r5, {r0, r1}
   16770:	b	16658 <__assert_fail@plt+0x5380>
   16774:	andeq	ip, r3, r4, ror r1
   16778:	andeq	ip, r3, ip, lsl #3
   1677c:	andeq	ip, r3, r8, asr #11
   16780:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16784:	sub	sp, sp, #44	; 0x2c
   16788:	mov	r5, r0
   1678c:	mov	sl, r1
   16790:	bl	111d0 <__errno_location@plt>
   16794:	ldr	r4, [pc, #396]	; 16928 <__assert_fail@plt+0x5650>
   16798:	cmn	r5, #-2147483647	; 0x80000001
   1679c:	ldr	r6, [r4]
   167a0:	mov	r8, r0
   167a4:	movne	r0, #0
   167a8:	moveq	r0, #1
   167ac:	ldr	r3, [r8]
   167b0:	orrs	r0, r0, r5, lsr #31
   167b4:	str	r3, [sp, #24]
   167b8:	bne	16924 <__assert_fail@plt+0x564c>
   167bc:	ldr	r2, [r4, #4]
   167c0:	cmp	r5, r2
   167c4:	blt	16824 <__assert_fail@plt+0x554c>
   167c8:	add	r7, r4, #8
   167cc:	cmp	r6, r7
   167d0:	str	r2, [sp, #36]	; 0x24
   167d4:	beq	168f4 <__assert_fail@plt+0x561c>
   167d8:	mov	r3, #8
   167dc:	sub	r2, r5, r2
   167e0:	mov	r0, r6
   167e4:	str	r3, [sp]
   167e8:	add	r2, r2, #1
   167ec:	mvn	r3, #-2147483648	; 0x80000000
   167f0:	add	r1, sp, #36	; 0x24
   167f4:	bl	28234 <__assert_fail@plt+0x16f5c>
   167f8:	mov	r6, r0
   167fc:	str	r0, [r4]
   16800:	ldr	r0, [r4, #4]
   16804:	ldr	r2, [sp, #36]	; 0x24
   16808:	mov	r1, #0
   1680c:	sub	r2, r2, r0
   16810:	add	r0, r6, r0, lsl #3
   16814:	lsl	r2, r2, #3
   16818:	bl	111f4 <memset@plt>
   1681c:	ldr	r3, [sp, #36]	; 0x24
   16820:	str	r3, [r4, #4]
   16824:	ldr	r2, [r4, #56]	; 0x38
   16828:	add	fp, r6, r5, lsl #3
   1682c:	ldr	r1, [r4, #20]
   16830:	ldr	r9, [r6, r5, lsl #3]
   16834:	ldr	r7, [fp, #4]
   16838:	ldr	r3, [r4, #16]
   1683c:	ldr	ip, [r4, #60]	; 0x3c
   16840:	str	r2, [sp, #12]
   16844:	ldr	r2, [pc, #224]	; 1692c <__assert_fail@plt+0x5654>
   16848:	orr	r1, r1, #1
   1684c:	str	r1, [sp, #28]
   16850:	str	r1, [sp, #4]
   16854:	str	r2, [sp, #8]
   16858:	str	r3, [sp]
   1685c:	mov	r0, r7
   16860:	mov	r1, r9
   16864:	str	ip, [sp, #16]
   16868:	mvn	r3, #0
   1686c:	mov	r2, sl
   16870:	bl	12c3c <__assert_fail@plt+0x1964>
   16874:	cmp	r9, r0
   16878:	bhi	168e0 <__assert_fail@plt+0x5608>
   1687c:	ldr	r3, [pc, #172]	; 16930 <__assert_fail@plt+0x5658>
   16880:	add	r9, r0, #1
   16884:	cmp	r7, r3
   16888:	str	r9, [r6, r5, lsl #3]
   1688c:	beq	16898 <__assert_fail@plt+0x55c0>
   16890:	mov	r0, r7
   16894:	bl	296b0 <__assert_fail@plt+0x183d8>
   16898:	mov	r0, r9
   1689c:	bl	28018 <__assert_fail@plt+0x16d40>
   168a0:	ldr	ip, [r4, #60]	; 0x3c
   168a4:	ldr	r3, [r4, #16]
   168a8:	ldr	lr, [r4, #56]	; 0x38
   168ac:	ldr	r4, [pc, #120]	; 1692c <__assert_fail@plt+0x5654>
   168b0:	mov	r2, sl
   168b4:	mov	r1, r9
   168b8:	str	r0, [fp, #4]
   168bc:	str	r4, [sp, #8]
   168c0:	ldr	r4, [sp, #28]
   168c4:	str	r3, [sp]
   168c8:	str	r4, [sp, #4]
   168cc:	str	ip, [sp, #16]
   168d0:	str	lr, [sp, #12]
   168d4:	mvn	r3, #0
   168d8:	mov	r7, r0
   168dc:	bl	12c3c <__assert_fail@plt+0x1964>
   168e0:	ldr	r3, [sp, #24]
   168e4:	mov	r0, r7
   168e8:	str	r3, [r8]
   168ec:	add	sp, sp, #44	; 0x2c
   168f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168f4:	mov	r3, #8
   168f8:	sub	r2, r5, r2
   168fc:	str	r3, [sp]
   16900:	add	r1, sp, #36	; 0x24
   16904:	add	r2, r2, #1
   16908:	mvn	r3, #-2147483648	; 0x80000000
   1690c:	bl	28234 <__assert_fail@plt+0x16f5c>
   16910:	mov	r6, r0
   16914:	ldm	r7, {r0, r1}
   16918:	str	r6, [r4]
   1691c:	stm	r6, {r0, r1}
   16920:	b	16800 <__assert_fail@plt+0x5528>
   16924:	bl	112cc <abort@plt>
   16928:	andeq	ip, r3, r4, ror r1
   1692c:	andeq	ip, r3, ip, lsl #3
   16930:	andeq	ip, r3, r8, asr #11
   16934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16938:	sub	sp, sp, #44	; 0x2c
   1693c:	mov	sl, r0
   16940:	bl	111d0 <__errno_location@plt>
   16944:	ldr	r4, [pc, #348]	; 16aa8 <__assert_fail@plt+0x57d0>
   16948:	ldr	r2, [r4, #4]
   1694c:	ldr	r5, [r4]
   16950:	cmp	r2, #0
   16954:	ldr	r3, [r0]
   16958:	mov	r8, r0
   1695c:	str	r3, [sp, #28]
   16960:	bgt	169bc <__assert_fail@plt+0x56e4>
   16964:	add	r6, r4, #8
   16968:	cmp	r5, r6
   1696c:	str	r2, [sp, #36]	; 0x24
   16970:	beq	16a78 <__assert_fail@plt+0x57a0>
   16974:	mov	r3, #8
   16978:	mov	r0, r5
   1697c:	str	r3, [sp]
   16980:	rsb	r2, r2, #1
   16984:	mvn	r3, #-2147483648	; 0x80000000
   16988:	add	r1, sp, #36	; 0x24
   1698c:	bl	28234 <__assert_fail@plt+0x16f5c>
   16990:	mov	r5, r0
   16994:	str	r0, [r4]
   16998:	ldr	r0, [r4, #4]
   1699c:	ldr	r2, [sp, #36]	; 0x24
   169a0:	mov	r1, #0
   169a4:	sub	r2, r2, r0
   169a8:	add	r0, r5, r0, lsl #3
   169ac:	lsl	r2, r2, #3
   169b0:	bl	111f4 <memset@plt>
   169b4:	ldr	r3, [sp, #36]	; 0x24
   169b8:	str	r3, [r4, #4]
   169bc:	ldr	r7, [r4, #20]
   169c0:	ldr	r9, [r5]
   169c4:	ldr	r6, [r5, #4]
   169c8:	ldr	r2, [r4, #56]	; 0x38
   169cc:	ldr	r3, [r4, #16]
   169d0:	ldr	ip, [r4, #60]	; 0x3c
   169d4:	ldr	fp, [pc, #208]	; 16aac <__assert_fail@plt+0x57d4>
   169d8:	orr	r7, r7, #1
   169dc:	str	r2, [sp, #12]
   169e0:	str	r3, [sp]
   169e4:	str	r7, [sp, #4]
   169e8:	mov	r1, r9
   169ec:	mov	r0, r6
   169f0:	str	ip, [sp, #16]
   169f4:	str	fp, [sp, #8]
   169f8:	mvn	r3, #0
   169fc:	mov	r2, sl
   16a00:	bl	12c3c <__assert_fail@plt+0x1964>
   16a04:	cmp	r9, r0
   16a08:	bhi	16a64 <__assert_fail@plt+0x578c>
   16a0c:	ldr	r3, [pc, #156]	; 16ab0 <__assert_fail@plt+0x57d8>
   16a10:	add	r9, r0, #1
   16a14:	cmp	r6, r3
   16a18:	str	r9, [r5]
   16a1c:	beq	16a28 <__assert_fail@plt+0x5750>
   16a20:	mov	r0, r6
   16a24:	bl	296b0 <__assert_fail@plt+0x183d8>
   16a28:	mov	r0, r9
   16a2c:	bl	28018 <__assert_fail@plt+0x16d40>
   16a30:	ldr	ip, [r4, #60]	; 0x3c
   16a34:	ldr	r3, [r4, #16]
   16a38:	ldr	lr, [r4, #56]	; 0x38
   16a3c:	mov	r2, sl
   16a40:	mov	r1, r9
   16a44:	str	r0, [r5, #4]
   16a48:	str	r3, [sp]
   16a4c:	stmib	sp, {r7, fp}
   16a50:	str	ip, [sp, #16]
   16a54:	str	lr, [sp, #12]
   16a58:	mvn	r3, #0
   16a5c:	mov	r6, r0
   16a60:	bl	12c3c <__assert_fail@plt+0x1964>
   16a64:	ldr	r3, [sp, #28]
   16a68:	mov	r0, r6
   16a6c:	str	r3, [r8]
   16a70:	add	sp, sp, #44	; 0x2c
   16a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a78:	mov	r3, #8
   16a7c:	str	r3, [sp]
   16a80:	add	r1, sp, #36	; 0x24
   16a84:	rsb	r2, r2, #1
   16a88:	mvn	r3, #-2147483648	; 0x80000000
   16a8c:	mov	r0, #0
   16a90:	bl	28234 <__assert_fail@plt+0x16f5c>
   16a94:	mov	r5, r0
   16a98:	ldm	r6, {r0, r1}
   16a9c:	str	r5, [r4]
   16aa0:	stm	r5, {r0, r1}
   16aa4:	b	16998 <__assert_fail@plt+0x56c0>
   16aa8:	andeq	ip, r3, r4, ror r1
   16aac:	andeq	ip, r3, ip, lsl #3
   16ab0:	andeq	ip, r3, r8, asr #11
   16ab4:	mov	ip, r0
   16ab8:	ldr	r3, [r1, #40]	; 0x28
   16abc:	ldr	r0, [r1, #56]	; 0x38
   16ac0:	cmp	r0, r3
   16ac4:	ble	16b38 <__assert_fail@plt+0x5860>
   16ac8:	push	{r4, lr}
   16acc:	ldr	lr, [r1, #4]
   16ad0:	ldrb	r0, [lr, r3]
   16ad4:	strb	r0, [ip]
   16ad8:	ldr	r4, [r1, #80]	; 0x50
   16adc:	cmp	r4, #1
   16ae0:	ble	16b00 <__assert_fail@plt+0x5828>
   16ae4:	ldr	r4, [r1, #28]
   16ae8:	cmp	r3, r4
   16aec:	beq	16b00 <__assert_fail@plt+0x5828>
   16af0:	ldr	r4, [r1, #8]
   16af4:	ldr	r4, [r4, r3, lsl #2]
   16af8:	cmn	r4, #1
   16afc:	beq	16b80 <__assert_fail@plt+0x58a8>
   16b00:	cmp	r0, #92	; 0x5c
   16b04:	beq	16b48 <__assert_fail@plt+0x5870>
   16b08:	cmp	r0, #91	; 0x5b
   16b0c:	beq	16b8c <__assert_fail@plt+0x58b4>
   16b10:	cmp	r0, #93	; 0x5d
   16b14:	beq	16b70 <__assert_fail@plt+0x5898>
   16b18:	cmp	r0, #94	; 0x5e
   16b1c:	beq	16bb0 <__assert_fail@plt+0x58d8>
   16b20:	cmp	r0, #45	; 0x2d
   16b24:	bne	16b60 <__assert_fail@plt+0x5888>
   16b28:	mov	r3, #22
   16b2c:	strb	r3, [ip, #4]
   16b30:	mov	r0, #1
   16b34:	pop	{r4, pc}
   16b38:	mov	r3, #2
   16b3c:	strb	r3, [ip, #4]
   16b40:	mov	r0, #0
   16b44:	bx	lr
   16b48:	tst	r2, #1
   16b4c:	beq	16b60 <__assert_fail@plt+0x5888>
   16b50:	ldr	r2, [r1, #48]	; 0x30
   16b54:	add	r3, r3, #1
   16b58:	cmp	r3, r2
   16b5c:	blt	16bf4 <__assert_fail@plt+0x591c>
   16b60:	mov	r3, #1
   16b64:	mov	r0, r3
   16b68:	strb	r3, [ip, #4]
   16b6c:	pop	{r4, pc}
   16b70:	mov	r3, #21
   16b74:	strb	r3, [ip, #4]
   16b78:	mov	r0, #1
   16b7c:	pop	{r4, pc}
   16b80:	mov	r0, #1
   16b84:	strb	r0, [ip, #4]
   16b88:	pop	{r4, pc}
   16b8c:	ldr	r1, [r1, #48]	; 0x30
   16b90:	add	r0, r3, #1
   16b94:	cmp	r0, r1
   16b98:	blt	16bc0 <__assert_fail@plt+0x58e8>
   16b9c:	mov	r0, #1
   16ba0:	mov	r3, #91	; 0x5b
   16ba4:	strb	r0, [ip, #4]
   16ba8:	strb	r3, [ip]
   16bac:	pop	{r4, pc}
   16bb0:	mov	r3, #25
   16bb4:	strb	r3, [ip, #4]
   16bb8:	mov	r0, #1
   16bbc:	pop	{r4, pc}
   16bc0:	add	r3, lr, r3
   16bc4:	ldrb	r3, [r3, #1]
   16bc8:	cmp	r3, #58	; 0x3a
   16bcc:	strb	r3, [ip]
   16bd0:	beq	16c0c <__assert_fail@plt+0x5934>
   16bd4:	cmp	r3, #61	; 0x3d
   16bd8:	beq	16c24 <__assert_fail@plt+0x594c>
   16bdc:	cmp	r3, #46	; 0x2e
   16be0:	bne	16b9c <__assert_fail@plt+0x58c4>
   16be4:	mov	r3, #26
   16be8:	strb	r3, [ip, #4]
   16bec:	mov	r0, #2
   16bf0:	pop	{r4, pc}
   16bf4:	str	r3, [r1, #40]	; 0x28
   16bf8:	ldrb	r3, [lr, r3]
   16bfc:	mov	r0, #1
   16c00:	strb	r0, [ip, #4]
   16c04:	strb	r3, [ip]
   16c08:	pop	{r4, pc}
   16c0c:	tst	r2, #4
   16c10:	beq	16b9c <__assert_fail@plt+0x58c4>
   16c14:	mov	r3, #30
   16c18:	strb	r3, [ip, #4]
   16c1c:	mov	r0, #2
   16c20:	pop	{r4, pc}
   16c24:	mov	r3, #28
   16c28:	strb	r3, [ip, #4]
   16c2c:	mov	r0, #2
   16c30:	pop	{r4, pc}
   16c34:	ldr	r3, [r1, #8]
   16c38:	push	{r4, r5, r6, r7, r8, lr}
   16c3c:	mov	r4, #0
   16c40:	str	r2, [r1]
   16c44:	mov	r8, r0
   16c48:	str	r3, [r1, #16]
   16c4c:	lsl	r0, r3, #2
   16c50:	str	r4, [r1, #20]
   16c54:	mov	r5, r1
   16c58:	mov	r7, r2
   16c5c:	bl	294e4 <__assert_fail@plt+0x1820c>
   16c60:	cmp	r0, r4
   16c64:	str	r0, [r5, #24]
   16c68:	beq	16d3c <__assert_fail@plt+0x5a64>
   16c6c:	ldr	r1, [r5, #8]
   16c70:	cmp	r1, #0
   16c74:	bgt	16c88 <__assert_fail@plt+0x59b0>
   16c78:	b	16cd4 <__assert_fail@plt+0x59fc>
   16c7c:	add	r4, r4, #1
   16c80:	cmp	r4, r1
   16c84:	bge	16cd4 <__assert_fail@plt+0x59fc>
   16c88:	ldr	r2, [r5, #12]
   16c8c:	ldr	r3, [r8]
   16c90:	ldr	r6, [r2, r4, lsl #2]
   16c94:	add	r3, r3, r6, lsl #3
   16c98:	ldrb	r3, [r3, #4]
   16c9c:	tst	r3, #8
   16ca0:	bne	16c7c <__assert_fail@plt+0x59a4>
   16ca4:	ldr	r1, [r5, #20]
   16ca8:	ldr	r3, [r5, #16]
   16cac:	cmp	r3, r1
   16cb0:	beq	16d14 <__assert_fail@plt+0x5a3c>
   16cb4:	ldr	r0, [r5, #24]
   16cb8:	add	r3, r1, #1
   16cbc:	str	r3, [r5, #20]
   16cc0:	str	r6, [r0, r1, lsl #2]
   16cc4:	ldr	r1, [r5, #8]
   16cc8:	add	r4, r4, #1
   16ccc:	cmp	r4, r1
   16cd0:	blt	16c88 <__assert_fail@plt+0x59b0>
   16cd4:	ldr	r4, [r8, #68]	; 0x44
   16cd8:	ldr	r6, [r8, #32]
   16cdc:	and	r7, r7, r4
   16ce0:	add	r7, r7, r7, lsl #1
   16ce4:	lsl	r4, r7, #2
   16ce8:	add	r7, r6, r4
   16cec:	ldr	r3, [r6, r4]
   16cf0:	ldr	r2, [r7, #4]
   16cf4:	cmp	r2, r3
   16cf8:	ldrgt	r2, [r7, #8]
   16cfc:	ble	16d44 <__assert_fail@plt+0x5a6c>
   16d00:	add	r1, r3, #1
   16d04:	str	r1, [r6, r4]
   16d08:	mov	r0, #0
   16d0c:	str	r5, [r2, r3, lsl #2]
   16d10:	pop	{r4, r5, r6, r7, r8, pc}
   16d14:	add	r1, r1, #1
   16d18:	ldr	r0, [r5, #24]
   16d1c:	lsl	r3, r1, #1
   16d20:	str	r3, [r5, #16]
   16d24:	lsl	r1, r1, #3
   16d28:	bl	29510 <__assert_fail@plt+0x18238>
   16d2c:	cmp	r0, #0
   16d30:	ldrne	r1, [r5, #20]
   16d34:	strne	r0, [r5, #24]
   16d38:	bne	16cb8 <__assert_fail@plt+0x59e0>
   16d3c:	mov	r0, #12
   16d40:	pop	{r4, r5, r6, r7, r8, pc}
   16d44:	add	r3, r3, #1
   16d48:	ldr	r0, [r7, #8]
   16d4c:	lsl	r1, r3, #3
   16d50:	lsl	r8, r3, #1
   16d54:	bl	29510 <__assert_fail@plt+0x18238>
   16d58:	subs	r2, r0, #0
   16d5c:	beq	16d3c <__assert_fail@plt+0x5a64>
   16d60:	ldr	r3, [r6, r4]
   16d64:	str	r2, [r7, #8]
   16d68:	str	r8, [r7, #4]
   16d6c:	b	16d00 <__assert_fail@plt+0x5a28>
   16d70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d74:	mov	r5, r0
   16d78:	ldr	r8, [r0, #36]	; 0x24
   16d7c:	ldr	r3, [r0, #48]	; 0x30
   16d80:	ldr	r4, [r0, #28]
   16d84:	cmp	r8, r3
   16d88:	movge	r8, r3
   16d8c:	cmp	r8, r4
   16d90:	sub	sp, sp, #92	; 0x5c
   16d94:	ble	16ef8 <__assert_fail@plt+0x5c20>
   16d98:	add	r6, r0, #16
   16d9c:	add	r7, sp, #16
   16da0:	mov	fp, #1
   16da4:	mvn	sl, #-1073741824	; 0xc0000000
   16da8:	mov	r9, #255	; 0xff
   16dac:	b	16e2c <__assert_fail@plt+0x5b54>
   16db0:	ldr	r3, [r5, #24]
   16db4:	ldr	r1, [r5]
   16db8:	add	r3, r4, r3
   16dbc:	add	r1, r1, r3
   16dc0:	mov	r3, r6
   16dc4:	add	r0, sp, #12
   16dc8:	bl	2973c <__assert_fail@plt+0x18464>
   16dcc:	sub	r2, r0, #1
   16dd0:	cmn	r2, #3
   16dd4:	mov	r3, r0
   16dd8:	bhi	16eac <__assert_fail@plt+0x5bd4>
   16ddc:	cmn	r0, #2
   16de0:	ldrne	r2, [sp, #12]
   16de4:	beq	16ee0 <__assert_fail@plt+0x5c08>
   16de8:	ldr	r0, [r5, #8]
   16dec:	add	r3, r4, r3
   16df0:	add	ip, r4, #1
   16df4:	cmp	ip, r3
   16df8:	str	r2, [r0, r4, lsl #2]
   16dfc:	lsl	r1, r4, #2
   16e00:	bge	16f08 <__assert_fail@plt+0x5c30>
   16e04:	sub	r2, sl, r4
   16e08:	add	r2, r2, r3
   16e0c:	add	r1, r1, #4
   16e10:	add	r0, r0, r1
   16e14:	lsl	r2, r2, #2
   16e18:	mov	r1, r9
   16e1c:	mov	r4, r3
   16e20:	bl	111f4 <memset@plt>
   16e24:	cmp	r8, r4
   16e28:	ble	16ef8 <__assert_fail@plt+0x5c20>
   16e2c:	ldm	r6, {r0, r1}
   16e30:	ldr	ip, [r5, #64]	; 0x40
   16e34:	sub	r2, r8, r4
   16e38:	cmp	ip, #0
   16e3c:	stm	r7, {r0, r1}
   16e40:	beq	16db0 <__assert_fail@plt+0x5ad8>
   16e44:	ldr	r3, [r5, #80]	; 0x50
   16e48:	cmp	r3, #0
   16e4c:	ble	16ea4 <__assert_fail@plt+0x5bcc>
   16e50:	add	r0, sp, #23
   16e54:	mov	r3, #0
   16e58:	str	r6, [sp, #4]
   16e5c:	b	16e64 <__assert_fail@plt+0x5b8c>
   16e60:	ldr	ip, [r5, #64]	; 0x40
   16e64:	ldr	r1, [r5]
   16e68:	ldr	r6, [r5, #24]
   16e6c:	add	r1, r1, r4
   16e70:	add	r1, r1, r3
   16e74:	ldr	lr, [r5, #4]
   16e78:	ldrb	r1, [r1, r6]
   16e7c:	add	lr, lr, r4
   16e80:	ldrb	r1, [ip, r1]
   16e84:	strb	r1, [lr, r3]
   16e88:	ldr	ip, [r5, #80]	; 0x50
   16e8c:	add	r3, r3, #1
   16e90:	cmp	ip, r3
   16e94:	cmpgt	r2, r3
   16e98:	strb	r1, [r0, #1]!
   16e9c:	bgt	16e60 <__assert_fail@plt+0x5b88>
   16ea0:	ldr	r6, [sp, #4]
   16ea4:	add	r1, sp, #24
   16ea8:	b	16dc0 <__assert_fail@plt+0x5ae8>
   16eac:	ldr	r3, [r5]
   16eb0:	ldr	r2, [r5, #24]
   16eb4:	add	r3, r3, r4
   16eb8:	ldr	r1, [r5, #64]	; 0x40
   16ebc:	ldrb	r2, [r3, r2]
   16ec0:	cmp	r1, #0
   16ec4:	mov	r3, fp
   16ec8:	str	r2, [sp, #12]
   16ecc:	ldrbne	r2, [r1, r2]
   16ed0:	ldm	r7, {r0, r1}
   16ed4:	strne	r2, [sp, #12]
   16ed8:	stm	r6, {r0, r1}
   16edc:	b	16de8 <__assert_fail@plt+0x5b10>
   16ee0:	ldr	r2, [r5, #36]	; 0x24
   16ee4:	ldr	r3, [r5, #48]	; 0x30
   16ee8:	cmp	r2, r3
   16eec:	bge	16eac <__assert_fail@plt+0x5bd4>
   16ef0:	ldm	r7, {r0, r1}
   16ef4:	stm	r6, {r0, r1}
   16ef8:	str	r4, [r5, #28]
   16efc:	str	r4, [r5, #32]
   16f00:	add	sp, sp, #92	; 0x5c
   16f04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f08:	mov	r4, ip
   16f0c:	b	16e24 <__assert_fail@plt+0x5b4c>
   16f10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f14:	mov	r4, r0
   16f18:	ldr	r6, [r0, #36]	; 0x24
   16f1c:	ldr	r3, [r0, #48]	; 0x30
   16f20:	ldrb	r2, [r0, #74]	; 0x4a
   16f24:	cmp	r6, r3
   16f28:	movge	r6, r3
   16f2c:	cmp	r2, #0
   16f30:	sub	sp, sp, #100	; 0x64
   16f34:	ldr	r5, [r0, #28]
   16f38:	bne	16f48 <__assert_fail@plt+0x5c70>
   16f3c:	ldr	r3, [r0, #64]	; 0x40
   16f40:	cmp	r3, #0
   16f44:	beq	17078 <__assert_fail@plt+0x5da0>
   16f48:	ldr	r7, [r4, #32]
   16f4c:	cmp	r5, r6
   16f50:	bge	17064 <__assert_fail@plt+0x5d8c>
   16f54:	add	r3, sp, #24
   16f58:	add	r9, r4, #16
   16f5c:	sub	sl, r6, r5
   16f60:	str	r3, [sp, #4]
   16f64:	add	r3, sp, #20
   16f68:	str	r3, [sp, #8]
   16f6c:	ldm	r9, {r0, r1}
   16f70:	ldr	r2, [r4, #64]	; 0x40
   16f74:	ldr	r3, [sp, #4]
   16f78:	cmp	r2, #0
   16f7c:	stm	r3, {r0, r1}
   16f80:	bne	171c8 <__assert_fail@plt+0x5ef0>
   16f84:	ldr	r3, [r4, #24]
   16f88:	ldr	r2, [r4]
   16f8c:	add	r3, r7, r3
   16f90:	add	r3, r2, r3
   16f94:	mov	r1, r3
   16f98:	str	r3, [sp, #12]
   16f9c:	mov	r3, r9
   16fa0:	mov	r2, sl
   16fa4:	ldr	r0, [sp, #8]
   16fa8:	bl	2973c <__assert_fail@plt+0x18464>
   16fac:	sub	r3, r0, #1
   16fb0:	cmn	r3, #4
   16fb4:	mov	r8, r0
   16fb8:	str	r3, [sp, #8]
   16fbc:	bhi	172d8 <__assert_fail@plt+0x6000>
   16fc0:	ldr	fp, [sp, #20]
   16fc4:	mov	r0, fp
   16fc8:	bl	112b4 <towupper@plt>
   16fcc:	cmp	fp, r0
   16fd0:	mov	sl, r0
   16fd4:	beq	172c0 <__assert_fail@plt+0x5fe8>
   16fd8:	add	r0, sp, #32
   16fdc:	ldr	r2, [sp, #4]
   16fe0:	mov	r1, sl
   16fe4:	bl	10ff0 <wcrtomb@plt>
   16fe8:	cmp	r8, r0
   16fec:	mov	fp, r0
   16ff0:	bne	1736c <__assert_fail@plt+0x6094>
   16ff4:	ldr	r0, [r4, #4]
   16ff8:	add	r1, sp, #32
   16ffc:	add	r0, r0, r5
   17000:	mov	r2, r8
   17004:	bl	11068 <memcpy@plt>
   17008:	ldrb	r3, [r4, #76]	; 0x4c
   1700c:	cmp	r3, #0
   17010:	bne	1734c <__assert_fail@plt+0x6074>
   17014:	add	r3, r8, r7
   17018:	ldr	r0, [r4, #8]
   1701c:	add	r8, r5, r8
   17020:	add	r2, r5, #1
   17024:	cmp	r2, r8
   17028:	mov	r7, r3
   1702c:	str	sl, [r0, r5, lsl #2]
   17030:	bge	17468 <__assert_fail@plt+0x6190>
   17034:	mvn	r3, #-1073741824	; 0xc0000000
   17038:	sub	r3, r3, r5
   1703c:	add	r3, r3, r8
   17040:	add	r0, r0, r2, lsl #2
   17044:	mov	r1, #255	; 0xff
   17048:	lsl	r2, r3, #2
   1704c:	mov	r5, r8
   17050:	bl	111f4 <memset@plt>
   17054:	b	16f4c <__assert_fail@plt+0x5c74>
   17058:	ldr	r3, [sp, #4]
   1705c:	ldm	r3, {r0, r1}
   17060:	stm	r9, {r0, r1}
   17064:	mov	r0, #0
   17068:	str	r5, [r4, #28]
   1706c:	str	r7, [r4, #32]
   17070:	add	sp, sp, #100	; 0x64
   17074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17078:	ldrb	r3, [r0, #76]	; 0x4c
   1707c:	cmp	r3, #0
   17080:	bne	16f48 <__assert_fail@plt+0x5c70>
   17084:	cmp	r5, r6
   17088:	bge	172b0 <__assert_fail@plt+0x5fd8>
   1708c:	add	r9, r0, #16
   17090:	b	170c0 <__assert_fail@plt+0x5de8>
   17094:	mov	r0, fp
   17098:	bl	112b4 <towupper@plt>
   1709c:	bics	r3, r0, #127	; 0x7f
   170a0:	bne	170e8 <__assert_fail@plt+0x5e10>
   170a4:	ldr	r3, [r4, #4]
   170a8:	strb	r0, [r3, r5]
   170ac:	ldr	r3, [r4, #8]
   170b0:	str	r0, [r3, r5, lsl #2]
   170b4:	add	r5, r5, #1
   170b8:	cmp	r6, r5
   170bc:	ble	172b0 <__assert_fail@plt+0x5fd8>
   170c0:	ldr	r8, [r4]
   170c4:	ldr	r7, [r4, #24]
   170c8:	add	r3, r8, r7
   170cc:	ldrb	fp, [r3, r5]
   170d0:	tst	fp, #128	; 0x80
   170d4:	bne	170e8 <__assert_fail@plt+0x5e10>
   170d8:	mov	r0, r9
   170dc:	bl	1108c <mbsinit@plt>
   170e0:	cmp	r0, #0
   170e4:	bne	17094 <__assert_fail@plt+0x5dbc>
   170e8:	ldm	r9, {r0, r1}
   170ec:	add	r3, sp, #24
   170f0:	add	r7, r7, r5
   170f4:	sub	sl, r6, r5
   170f8:	stm	r3, {r0, r1}
   170fc:	mov	r2, sl
   17100:	add	r1, r8, r7
   17104:	mov	r3, r9
   17108:	add	r0, sp, #20
   1710c:	bl	2973c <__assert_fail@plt+0x18464>
   17110:	add	r2, sp, #24
   17114:	str	r2, [sp, #4]
   17118:	add	r2, sp, #20
   1711c:	mov	r7, r5
   17120:	str	r2, [sp, #8]
   17124:	sub	r3, r0, #1
   17128:	cmn	r3, #4
   1712c:	mov	r8, r0
   17130:	bhi	17244 <__assert_fail@plt+0x5f6c>
   17134:	ldr	r3, [sp, #20]
   17138:	mov	r0, r3
   1713c:	str	r3, [sp, #12]
   17140:	bl	112b4 <towupper@plt>
   17144:	ldr	r3, [sp, #12]
   17148:	cmp	r3, r0
   1714c:	mov	fp, r0
   17150:	beq	17220 <__assert_fail@plt+0x5f48>
   17154:	mov	r1, r0
   17158:	add	r2, sp, #24
   1715c:	add	r0, sp, #32
   17160:	bl	10ff0 <wcrtomb@plt>
   17164:	cmp	r8, r0
   17168:	bne	17274 <__assert_fail@plt+0x5f9c>
   1716c:	ldr	r0, [r4, #4]
   17170:	mov	r2, r8
   17174:	add	r0, r0, r5
   17178:	add	r1, sp, #32
   1717c:	bl	11068 <memcpy@plt>
   17180:	add	r5, r5, #1
   17184:	sub	r3, r5, #1
   17188:	ldr	r0, [r4, #8]
   1718c:	add	r8, r3, r8
   17190:	cmp	r5, r8
   17194:	str	fp, [r0, r7, lsl #2]
   17198:	lsl	r3, r7, #2
   1719c:	bge	170b8 <__assert_fail@plt+0x5de0>
   171a0:	mvn	r2, #-1073741824	; 0xc0000000
   171a4:	sub	r2, r2, r7
   171a8:	add	r2, r2, r8
   171ac:	add	r3, r3, #4
   171b0:	lsl	r2, r2, #2
   171b4:	add	r0, r0, r3
   171b8:	mov	r1, #255	; 0xff
   171bc:	mov	r5, r8
   171c0:	bl	111f4 <memset@plt>
   171c4:	b	170b8 <__assert_fail@plt+0x5de0>
   171c8:	ldr	lr, [r4, #80]	; 0x50
   171cc:	cmp	lr, #0
   171d0:	ble	17210 <__assert_fail@plt+0x5f38>
   171d4:	ldr	r3, [r4, #24]
   171d8:	ldr	r1, [r4]
   171dc:	add	r3, r7, r3
   171e0:	sub	r3, r3, #1
   171e4:	cmp	lr, sl
   171e8:	add	r1, r1, r3
   171ec:	movge	lr, sl
   171f0:	add	r0, sp, #31
   171f4:	mov	r3, #0
   171f8:	ldrb	ip, [r1, #1]!
   171fc:	add	r3, r3, #1
   17200:	cmp	r3, lr
   17204:	ldrb	ip, [r2, ip]
   17208:	strb	ip, [r0, #1]!
   1720c:	blt	171f8 <__assert_fail@plt+0x5f20>
   17210:	add	r3, sp, #32
   17214:	str	r3, [sp, #12]
   17218:	mov	r1, r3
   1721c:	b	16f9c <__assert_fail@plt+0x5cc4>
   17220:	ldr	r3, [r4, #24]
   17224:	ldr	r1, [r4]
   17228:	ldr	r0, [r4, #4]
   1722c:	add	r3, r5, r3
   17230:	add	r1, r1, r3
   17234:	add	r0, r0, r5
   17238:	mov	r2, r8
   1723c:	bl	11068 <memcpy@plt>
   17240:	b	17180 <__assert_fail@plt+0x5ea8>
   17244:	cmn	r3, #3
   17248:	bne	1727c <__assert_fail@plt+0x5fa4>
   1724c:	ldr	r2, [r4, #36]	; 0x24
   17250:	ldr	r3, [r4, #48]	; 0x30
   17254:	cmp	r2, r3
   17258:	blt	172a4 <__assert_fail@plt+0x5fcc>
   1725c:	ldr	r3, [r4, #4]
   17260:	strb	fp, [r3, r5]
   17264:	ldr	r3, [r4, #8]
   17268:	add	r5, r5, #1
   1726c:	str	fp, [r3, r7, lsl #2]
   17270:	b	170b8 <__assert_fail@plt+0x5de0>
   17274:	mov	r7, r5
   17278:	b	16f6c <__assert_fail@plt+0x5c94>
   1727c:	ldr	r3, [r4, #4]
   17280:	cmn	r0, #1
   17284:	strb	fp, [r3, r5]
   17288:	ldr	r3, [r4, #8]
   1728c:	add	r5, r5, #1
   17290:	str	fp, [r3, r7, lsl #2]
   17294:	addeq	r3, sp, #24
   17298:	ldmeq	r3, {r0, r1}
   1729c:	stmeq	r9, {r0, r1}
   172a0:	b	170b8 <__assert_fail@plt+0x5de0>
   172a4:	add	r3, sp, #24
   172a8:	ldm	r3, {r0, r1}
   172ac:	stm	r9, {r0, r1}
   172b0:	str	r5, [r4, #28]
   172b4:	str	r5, [r4, #32]
   172b8:	mov	r0, #0
   172bc:	b	17070 <__assert_fail@plt+0x5d98>
   172c0:	ldr	r0, [r4, #4]
   172c4:	ldr	r1, [sp, #12]
   172c8:	add	r0, r0, r5
   172cc:	mov	r2, r8
   172d0:	bl	11068 <memcpy@plt>
   172d4:	b	17008 <__assert_fail@plt+0x5d30>
   172d8:	cmn	r3, #3
   172dc:	bne	172f0 <__assert_fail@plt+0x6018>
   172e0:	ldr	r2, [r4, #36]	; 0x24
   172e4:	ldr	r3, [r4, #48]	; 0x30
   172e8:	cmp	r2, r3
   172ec:	blt	17058 <__assert_fail@plt+0x5d80>
   172f0:	ldr	r3, [r4]
   172f4:	ldr	r1, [r4, #24]
   172f8:	add	r3, r3, r7
   172fc:	ldr	r2, [r4, #64]	; 0x40
   17300:	ldrb	r3, [r3, r1]
   17304:	cmp	r2, #0
   17308:	mov	r1, r5
   1730c:	ldrbne	r3, [r2, r3]
   17310:	ldr	r2, [r4, #4]
   17314:	strb	r3, [r2, r5]
   17318:	ldrb	r2, [r4, #76]	; 0x4c
   1731c:	cmp	r2, #0
   17320:	ldrne	r2, [r4, #12]
   17324:	strne	r7, [r2, r5, lsl #2]
   17328:	ldr	r2, [r4, #8]
   1732c:	cmn	r8, #1
   17330:	add	r7, r7, #1
   17334:	add	r5, r5, #1
   17338:	str	r3, [r2, r1, lsl #2]
   1733c:	ldreq	r3, [sp, #4]
   17340:	ldmeq	r3, {r0, r1}
   17344:	stmeq	r9, {r0, r1}
   17348:	b	16f4c <__assert_fail@plt+0x5c74>
   1734c:	ldr	r2, [r4, #12]
   17350:	add	r3, r8, r7
   17354:	add	r2, r2, r5, lsl #2
   17358:	str	r7, [r2], #4
   1735c:	add	r7, r7, #1
   17360:	cmp	r3, r7
   17364:	bne	17358 <__assert_fail@plt+0x6080>
   17368:	b	17018 <__assert_fail@plt+0x5d40>
   1736c:	cmn	r0, #1
   17370:	beq	172c0 <__assert_fail@plt+0x5fe8>
   17374:	ldr	r0, [r4, #36]	; 0x24
   17378:	add	r6, r5, fp
   1737c:	cmp	r6, r0
   17380:	bhi	17058 <__assert_fail@plt+0x5d80>
   17384:	ldr	r3, [r4, #12]
   17388:	cmp	r3, #0
   1738c:	beq	17470 <__assert_fail@plt+0x6198>
   17390:	ldrb	r3, [r4, #76]	; 0x4c
   17394:	cmp	r3, #0
   17398:	bne	173c4 <__assert_fail@plt+0x60ec>
   1739c:	cmp	r5, #0
   173a0:	ldrne	r2, [r4, #12]
   173a4:	subne	r2, r2, #4
   173a8:	beq	173bc <__assert_fail@plt+0x60e4>
   173ac:	str	r3, [r2, #4]!
   173b0:	add	r3, r3, #1
   173b4:	cmp	r5, r3
   173b8:	bne	173ac <__assert_fail@plt+0x60d4>
   173bc:	mov	r3, #1
   173c0:	strb	r3, [r4, #76]	; 0x4c
   173c4:	ldr	r0, [r4, #4]
   173c8:	add	r1, sp, #32
   173cc:	mov	r2, fp
   173d0:	add	r0, r0, r5
   173d4:	bl	11068 <memcpy@plt>
   173d8:	ldr	r3, [r4, #8]
   173dc:	ldr	r1, [r4, #12]
   173e0:	lsl	r2, r5, #2
   173e4:	cmp	fp, #1
   173e8:	str	sl, [r3, r5, lsl #2]
   173ec:	add	r3, r3, r2
   173f0:	str	r7, [r1, r5, lsl #2]
   173f4:	add	r2, r1, r2
   173f8:	bls	17428 <__assert_fail@plt+0x6150>
   173fc:	mov	r1, #1
   17400:	mvn	ip, #0
   17404:	cmp	r1, r8
   17408:	ldr	r0, [sp, #8]
   1740c:	movcc	r0, r1
   17410:	add	r1, r1, #1
   17414:	add	r0, r0, r7
   17418:	cmp	r1, fp
   1741c:	str	r0, [r2, #4]!
   17420:	str	ip, [r3, #4]!
   17424:	bne	17404 <__assert_fail@plt+0x612c>
   17428:	ldr	r2, [r4, #52]	; 0x34
   1742c:	ldr	r3, [r4, #48]	; 0x30
   17430:	cmp	r7, r2
   17434:	sub	fp, fp, r8
   17438:	ldrlt	r2, [r4, #56]	; 0x38
   1743c:	add	r3, fp, r3
   17440:	addlt	fp, r2, fp
   17444:	ldr	r2, [r4, #36]	; 0x24
   17448:	strlt	fp, [r4, #56]	; 0x38
   1744c:	cmp	r3, r2
   17450:	mov	r5, r6
   17454:	str	r3, [r4, #48]	; 0x30
   17458:	add	r7, r8, r7
   1745c:	movlt	r6, r3
   17460:	movge	r6, r2
   17464:	b	16f4c <__assert_fail@plt+0x5c74>
   17468:	mov	r5, r2
   1746c:	b	16f4c <__assert_fail@plt+0x5c74>
   17470:	lsl	r0, r0, #2
   17474:	bl	294e4 <__assert_fail@plt+0x1820c>
   17478:	cmp	r0, #0
   1747c:	str	r0, [r4, #12]
   17480:	moveq	r0, #12
   17484:	bne	17390 <__assert_fail@plt+0x60b8>
   17488:	b	17070 <__assert_fail@plt+0x5d98>
   1748c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17490:	sub	sp, sp, #12
   17494:	ldmib	r0, {r5, ip}
   17498:	stm	sp, {r1, r2}
   1749c:	mov	r4, r0
   174a0:	cmp	ip, r5
   174a4:	mov	r8, sp
   174a8:	ldrb	r6, [sp, #4]
   174ac:	bcs	1756c <__assert_fail@plt+0x6294>
   174b0:	ldr	r7, [r0, #12]
   174b4:	ldr	r5, [r0, #20]
   174b8:	ldm	r8, {r0, r1}
   174bc:	ldr	r3, [r4]
   174c0:	cmp	r6, #5
   174c4:	add	r3, r3, ip, lsl #3
   174c8:	bic	r2, r1, #261120	; 0x3fc00
   174cc:	bic	r2, r2, #768	; 0x300
   174d0:	stm	r3, {r0, r1}
   174d4:	str	r2, [r3, #4]
   174d8:	beq	17558 <__assert_fail@plt+0x6280>
   174dc:	sub	r6, r6, #6
   174e0:	clz	r6, r6
   174e4:	lsr	r6, r6, #5
   174e8:	ldrb	r2, [r3, #6]
   174ec:	mvn	r1, #0
   174f0:	bic	r2, r2, #16
   174f4:	orr	r2, r2, r6, lsl #4
   174f8:	strb	r2, [r3, #6]
   174fc:	str	r1, [r7, ip, lsl #2]
   17500:	ldr	r3, [r4, #8]
   17504:	mov	r2, #0
   17508:	add	r3, r3, r3, lsl #1
   1750c:	lsl	r3, r3, #2
   17510:	add	r1, r5, r3
   17514:	str	r2, [r5, r3]
   17518:	str	r2, [r1, #4]
   1751c:	str	r2, [r1, #8]
   17520:	ldr	r3, [r4, #8]
   17524:	ldr	r0, [r4, #24]
   17528:	add	r3, r3, r3, lsl #1
   1752c:	lsl	r3, r3, #2
   17530:	add	r1, r0, r3
   17534:	str	r2, [r0, r3]
   17538:	str	r2, [r1, #4]
   1753c:	str	r2, [r1, #8]
   17540:	ldr	r3, [r4, #8]
   17544:	mov	r0, r3
   17548:	add	r3, r3, #1
   1754c:	str	r3, [r4, #8]
   17550:	add	sp, sp, #12
   17554:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17558:	ldr	r6, [r4, #92]	; 0x5c
   1755c:	cmp	r6, #1
   17560:	movle	r6, #0
   17564:	movgt	r6, #1
   17568:	b	174e8 <__assert_fail@plt+0x6210>
   1756c:	ldr	r3, [pc, #200]	; 1763c <__assert_fail@plt+0x6364>
   17570:	lsl	r9, r5, #1
   17574:	cmp	r9, r3
   17578:	bhi	17634 <__assert_fail@plt+0x635c>
   1757c:	lsl	r1, r5, #4
   17580:	ldr	r0, [r0]
   17584:	bl	29510 <__assert_fail@plt+0x18238>
   17588:	cmp	r0, #0
   1758c:	beq	17634 <__assert_fail@plt+0x635c>
   17590:	lsl	sl, r5, #3
   17594:	mov	r1, sl
   17598:	str	r0, [r4]
   1759c:	ldr	r0, [r4, #12]
   175a0:	bl	29510 <__assert_fail@plt+0x18238>
   175a4:	mov	r1, sl
   175a8:	add	r5, r9, r5, lsl #2
   175ac:	lsl	sl, r5, #2
   175b0:	mov	r7, r0
   175b4:	ldr	r0, [r4, #16]
   175b8:	bl	29510 <__assert_fail@plt+0x18238>
   175bc:	mov	r1, sl
   175c0:	mov	fp, r0
   175c4:	ldr	r0, [r4, #20]
   175c8:	bl	29510 <__assert_fail@plt+0x18238>
   175cc:	mov	r1, sl
   175d0:	mov	r5, r0
   175d4:	ldr	r0, [r4, #24]
   175d8:	bl	29510 <__assert_fail@plt+0x18238>
   175dc:	cmp	fp, #0
   175e0:	cmpne	r7, #0
   175e4:	mov	sl, r0
   175e8:	beq	17614 <__assert_fail@plt+0x633c>
   175ec:	cmp	r0, #0
   175f0:	cmpne	r5, #0
   175f4:	beq	17614 <__assert_fail@plt+0x633c>
   175f8:	ldr	ip, [r4, #8]
   175fc:	str	r7, [r4, #12]
   17600:	str	fp, [r4, #16]
   17604:	str	r5, [r4, #20]
   17608:	str	r0, [r4, #24]
   1760c:	str	r9, [r4, #4]
   17610:	b	174b8 <__assert_fail@plt+0x61e0>
   17614:	mov	r0, r7
   17618:	bl	296b0 <__assert_fail@plt+0x183d8>
   1761c:	mov	r0, fp
   17620:	bl	296b0 <__assert_fail@plt+0x183d8>
   17624:	mov	r0, r5
   17628:	bl	296b0 <__assert_fail@plt+0x183d8>
   1762c:	mov	r0, sl
   17630:	bl	296b0 <__assert_fail@plt+0x183d8>
   17634:	mvn	r0, #0
   17638:	b	17550 <__assert_fail@plt+0x6278>
   1763c:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   17640:	ldr	r3, [r0]
   17644:	push	{r4, r5, r6, lr}
   17648:	cmp	r3, #0
   1764c:	mov	r4, r0
   17650:	mov	r6, r1
   17654:	beq	17680 <__assert_fail@plt+0x63a8>
   17658:	ldr	r2, [r0, #4]
   1765c:	cmp	r2, #0
   17660:	bne	176b0 <__assert_fail@plt+0x63d8>
   17664:	ldr	r3, [r0, #8]
   17668:	mov	r0, #1
   1766c:	str	r1, [r3]
   17670:	ldr	r3, [r4, #4]
   17674:	add	r3, r3, r0
   17678:	str	r3, [r4, #4]
   1767c:	pop	{r4, r5, r6, pc}
   17680:	mov	r5, #1
   17684:	str	r5, [r0]
   17688:	str	r5, [r0, #4]
   1768c:	mov	r0, #4
   17690:	bl	294e4 <__assert_fail@plt+0x1820c>
   17694:	cmp	r0, #0
   17698:	str	r0, [r4, #8]
   1769c:	strne	r6, [r0]
   176a0:	streq	r0, [r4, #4]
   176a4:	streq	r0, [r4]
   176a8:	movne	r0, r5
   176ac:	pop	{r4, r5, r6, pc}
   176b0:	cmp	r3, r2
   176b4:	beq	17730 <__assert_fail@plt+0x6458>
   176b8:	ldr	r5, [r0, #8]
   176bc:	ldr	r3, [r5]
   176c0:	cmp	r6, r3
   176c4:	bge	176fc <__assert_fail@plt+0x6424>
   176c8:	cmp	r2, #0
   176cc:	ble	176e4 <__assert_fail@plt+0x640c>
   176d0:	lsl	r2, r2, #2
   176d4:	mov	r1, r5
   176d8:	add	r0, r5, #4
   176dc:	bl	11038 <memmove@plt>
   176e0:	mov	r2, #0
   176e4:	str	r6, [r5, r2, lsl #2]
   176e8:	ldr	r3, [r4, #4]
   176ec:	mov	r0, #1
   176f0:	add	r3, r3, r0
   176f4:	str	r3, [r4, #4]
   176f8:	pop	{r4, r5, r6, pc}
   176fc:	sub	r3, r2, #-1073741823	; 0xc0000001
   17700:	ldr	r1, [r5, r3, lsl #2]
   17704:	lsl	r3, r3, #2
   17708:	cmp	r6, r1
   1770c:	bge	176e4 <__assert_fail@plt+0x640c>
   17710:	add	r3, r3, #4
   17714:	add	r3, r5, r3
   17718:	str	r1, [r3], #-4
   1771c:	ldr	r1, [r3, #-4]
   17720:	sub	r2, r2, #1
   17724:	cmp	r6, r1
   17728:	blt	17718 <__assert_fail@plt+0x6440>
   1772c:	b	176e4 <__assert_fail@plt+0x640c>
   17730:	lsl	r3, r2, #1
   17734:	str	r3, [r0]
   17738:	lsl	r1, r2, #3
   1773c:	ldr	r0, [r0, #8]
   17740:	bl	29510 <__assert_fail@plt+0x18238>
   17744:	subs	r5, r0, #0
   17748:	ldrne	r2, [r4, #4]
   1774c:	strne	r5, [r4, #8]
   17750:	bne	176bc <__assert_fail@plt+0x63e4>
   17754:	mov	r0, r5
   17758:	pop	{r4, r5, r6, pc}
   1775c:	cmp	r0, #0
   17760:	ble	177e4 <__assert_fail@plt+0x650c>
   17764:	push	{lr}		; (str lr, [sp, #-4]!)
   17768:	sub	ip, r0, #1
   1776c:	ldr	lr, [r1]
   17770:	mov	r0, #0
   17774:	cmp	r0, ip
   17778:	bcs	177b4 <__assert_fail@plt+0x64dc>
   1777c:	add	r1, r0, ip
   17780:	lsr	r1, r1, #1
   17784:	ldr	r3, [lr, r1, lsl #2]
   17788:	cmp	r2, r3
   1778c:	ble	177a4 <__assert_fail@plt+0x64cc>
   17790:	b	177c8 <__assert_fail@plt+0x64f0>
   17794:	ldr	ip, [lr, r3, lsl #2]
   17798:	cmp	ip, r2
   1779c:	blt	177d0 <__assert_fail@plt+0x64f8>
   177a0:	mov	r1, r3
   177a4:	add	r3, r0, r1
   177a8:	cmp	r0, r1
   177ac:	lsr	r3, r3, #1
   177b0:	bcc	17794 <__assert_fail@plt+0x64bc>
   177b4:	ldr	r3, [lr, r0, lsl #2]
   177b8:	cmp	r2, r3
   177bc:	beq	177dc <__assert_fail@plt+0x6504>
   177c0:	mov	r0, #0
   177c4:	pop	{pc}		; (ldr pc, [sp], #4)
   177c8:	mov	r3, r1
   177cc:	mov	r1, ip
   177d0:	add	r0, r3, #1
   177d4:	mov	ip, r1
   177d8:	b	17774 <__assert_fail@plt+0x649c>
   177dc:	add	r0, r0, #1
   177e0:	pop	{pc}		; (ldr pc, [sp], #4)
   177e4:	mov	r0, #0
   177e8:	bx	lr
   177ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   177f0:	mov	sl, r0
   177f4:	ldr	r7, [r2, #4]
   177f8:	ldr	r0, [r1, #4]
   177fc:	ldr	r3, [sl, #4]
   17800:	ldr	r9, [r1, #8]
   17804:	ldr	r8, [r2, #8]
   17808:	sub	r5, r0, #1
   1780c:	sub	r6, r7, #1
   17810:	add	r0, r3, r0
   17814:	add	r7, r0, r7
   17818:	ldr	ip, [r9, r5, lsl #2]
   1781c:	ldr	r4, [r8, r6, lsl #2]
   17820:	ldr	r0, [sl, #8]
   17824:	sub	r3, r3, #1
   17828:	cmp	ip, r4
   1782c:	beq	17848 <__assert_fail@plt+0x6570>
   17830:	bge	17898 <__assert_fail@plt+0x65c0>
   17834:	subs	r6, r6, #1
   17838:	bmi	178b8 <__assert_fail@plt+0x65e0>
   1783c:	ldr	r4, [r8, r6, lsl #2]
   17840:	cmp	ip, r4
   17844:	bne	17830 <__assert_fail@plt+0x6558>
   17848:	cmp	r3, #0
   1784c:	blt	17878 <__assert_fail@plt+0x65a0>
   17850:	ldr	lr, [r0, r3, lsl #2]
   17854:	add	ip, r0, r3, lsl #2
   17858:	cmp	lr, r4
   1785c:	bgt	17870 <__assert_fail@plt+0x6598>
   17860:	b	178a8 <__assert_fail@plt+0x65d0>
   17864:	ldr	lr, [ip, #-4]!
   17868:	cmp	lr, r4
   1786c:	ble	178a8 <__assert_fail@plt+0x65d0>
   17870:	subs	r3, r3, #1
   17874:	bcs	17864 <__assert_fail@plt+0x658c>
   17878:	sub	r7, r7, #1
   1787c:	subs	r5, r5, #1
   17880:	str	r4, [r0, r7, lsl #2]
   17884:	bmi	178b8 <__assert_fail@plt+0x65e0>
   17888:	subs	r6, r6, #1
   1788c:	bmi	178b8 <__assert_fail@plt+0x65e0>
   17890:	ldr	ip, [r9, r5, lsl #2]
   17894:	b	1783c <__assert_fail@plt+0x6564>
   17898:	subs	r5, r5, #1
   1789c:	bmi	178b8 <__assert_fail@plt+0x65e0>
   178a0:	ldr	ip, [r9, r5, lsl #2]
   178a4:	b	17828 <__assert_fail@plt+0x6550>
   178a8:	cmp	lr, r4
   178ac:	bne	17878 <__assert_fail@plt+0x65a0>
   178b0:	subs	r5, r5, #1
   178b4:	bpl	17888 <__assert_fail@plt+0x65b0>
   178b8:	ldr	ip, [sl, #4]
   178bc:	ldr	r1, [r1, #4]
   178c0:	ldr	r3, [r2, #4]
   178c4:	add	r1, ip, r1
   178c8:	add	r1, r1, r3
   178cc:	sub	r2, r1, r7
   178d0:	sub	r3, ip, #1
   178d4:	cmp	r3, #0
   178d8:	cmpge	r2, #0
   178dc:	add	ip, ip, r2
   178e0:	sub	r1, r1, #1
   178e4:	str	ip, [sl, #4]
   178e8:	bgt	17910 <__assert_fail@plt+0x6638>
   178ec:	lsl	r2, r2, #2
   178f0:	add	r1, r0, r7, lsl #2
   178f4:	bl	11068 <memcpy@plt>
   178f8:	mov	r0, #0
   178fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17900:	sub	r3, r3, #1
   17904:	cmn	r3, #1
   17908:	str	ip, [r0, r5, lsl #2]
   1790c:	beq	178ec <__assert_fail@plt+0x6614>
   17910:	ldr	lr, [r0, r1, lsl #2]
   17914:	ldr	ip, [r0, r3, lsl #2]
   17918:	add	r5, r3, r2
   1791c:	cmp	lr, ip
   17920:	mov	r4, r5
   17924:	ble	17900 <__assert_fail@plt+0x6628>
   17928:	subs	r2, r2, #1
   1792c:	sub	r1, r1, #1
   17930:	str	lr, [r0, r5, lsl #2]
   17934:	bne	17910 <__assert_fail@plt+0x6638>
   17938:	b	178f0 <__assert_fail@plt+0x6618>
   1793c:	push	{r4, r5, r6, lr}
   17940:	mov	r5, r0
   17944:	ldr	r0, [r1]
   17948:	sub	sp, sp, #16
   1794c:	cmp	r0, #31
   17950:	beq	179c4 <__assert_fail@plt+0x66ec>
   17954:	lsl	ip, r0, #5
   17958:	ldr	r4, [r5]
   1795c:	add	r0, r0, #1
   17960:	add	r6, ip, #4
   17964:	str	r0, [r1]
   17968:	ldr	r1, [sp, #32]
   1796c:	add	ip, r4, ip
   17970:	mov	r5, #0
   17974:	str	r2, [ip, #8]
   17978:	str	r3, [ip, #12]
   1797c:	str	r5, [ip, #4]
   17980:	ldm	r1, {r0, r1}
   17984:	add	lr, ip, #24
   17988:	cmp	r2, r5
   1798c:	stm	lr, {r0, r1}
   17990:	ldrb	r1, [ip, #30]
   17994:	mvn	lr, #0
   17998:	add	r0, r4, r6
   1799c:	and	r1, r1, #243	; 0xf3
   179a0:	str	r5, [ip, #16]
   179a4:	str	r5, [ip, #20]
   179a8:	strb	r1, [ip, #30]
   179ac:	str	lr, [ip, #32]
   179b0:	strne	r0, [r2]
   179b4:	cmp	r3, #0
   179b8:	strne	r0, [r3]
   179bc:	add	sp, sp, #16
   179c0:	pop	{r4, r5, r6, pc}
   179c4:	mov	r0, #996	; 0x3e4
   179c8:	stmib	sp, {r1, r2, r3}
   179cc:	bl	294e4 <__assert_fail@plt+0x1820c>
   179d0:	subs	r4, r0, #0
   179d4:	beq	179f8 <__assert_fail@plt+0x6720>
   179d8:	ldr	ip, [r5]
   179dc:	mov	r6, #4
   179e0:	str	ip, [r4]
   179e4:	mov	r0, #1
   179e8:	mov	ip, #0
   179ec:	str	r4, [r5]
   179f0:	ldmib	sp, {r1, r2, r3}
   179f4:	b	17964 <__assert_fail@plt+0x668c>
   179f8:	mov	r0, r4
   179fc:	b	179bc <__assert_fail@plt+0x66e4>
   17a00:	push	{r4, r5, r6, lr}
   17a04:	mov	r4, r0
   17a08:	ldr	r0, [r1, #4]
   17a0c:	str	r0, [r4, #4]
   17a10:	ldr	r2, [r1, #4]
   17a14:	cmp	r2, #0
   17a18:	ble	17a50 <__assert_fail@plt+0x6778>
   17a1c:	str	r0, [r4]
   17a20:	lsl	r0, r0, #2
   17a24:	mov	r5, r1
   17a28:	bl	294e4 <__assert_fail@plt+0x1820c>
   17a2c:	cmp	r0, #0
   17a30:	str	r0, [r4, #8]
   17a34:	beq	17a68 <__assert_fail@plt+0x6790>
   17a38:	ldr	r2, [r5, #4]
   17a3c:	ldr	r1, [r5, #8]
   17a40:	lsl	r2, r2, #2
   17a44:	bl	11068 <memcpy@plt>
   17a48:	mov	r0, #0
   17a4c:	pop	{r4, r5, r6, pc}
   17a50:	mov	r2, #0
   17a54:	mov	r0, r2
   17a58:	str	r2, [r4]
   17a5c:	str	r2, [r4, #4]
   17a60:	str	r2, [r4, #8]
   17a64:	pop	{r4, r5, r6, pc}
   17a68:	str	r0, [r4, #4]
   17a6c:	str	r0, [r4]
   17a70:	mov	r0, #12
   17a74:	pop	{r4, r5, r6, pc}
   17a78:	cmp	r1, #0
   17a7c:	beq	17b48 <__assert_fail@plt+0x6870>
   17a80:	ldr	r3, [r1, #4]
   17a84:	cmp	r2, #0
   17a88:	cmpne	r3, #0
   17a8c:	ble	17b40 <__assert_fail@plt+0x6868>
   17a90:	ldr	ip, [r2, #4]
   17a94:	cmp	ip, #0
   17a98:	ble	17b60 <__assert_fail@plt+0x6888>
   17a9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17aa0:	mov	r8, r0
   17aa4:	add	r0, r3, ip
   17aa8:	str	r0, [r8]
   17aac:	lsl	r0, r0, #2
   17ab0:	mov	r5, r2
   17ab4:	mov	r7, r1
   17ab8:	bl	294e4 <__assert_fail@plt+0x1820c>
   17abc:	cmp	r0, #0
   17ac0:	str	r0, [r8, #8]
   17ac4:	beq	17bbc <__assert_fail@plt+0x68e4>
   17ac8:	mov	r3, #0
   17acc:	mov	ip, r3
   17ad0:	ldr	r9, [r7, #4]
   17ad4:	ldr	sl, [r5, #4]
   17ad8:	mov	r4, r0
   17adc:	mov	lr, #1
   17ae0:	b	17b20 <__assert_fail@plt+0x6848>
   17ae4:	cmp	r3, sl
   17ae8:	bge	17b7c <__assert_fail@plt+0x68a4>
   17aec:	ldr	r2, [r7, #8]
   17af0:	ldr	r1, [r5, #8]
   17af4:	ldr	r2, [r2, ip, lsl #2]
   17af8:	ldr	r6, [r1, r3, lsl #2]
   17afc:	cmp	r2, r6
   17b00:	addgt	r3, r3, #1
   17b04:	strgt	r6, [r4]
   17b08:	bgt	17b18 <__assert_fail@plt+0x6840>
   17b0c:	add	ip, ip, #1
   17b10:	addeq	r3, r3, #1
   17b14:	str	r2, [r4]
   17b18:	add	lr, lr, #1
   17b1c:	add	r4, r4, #4
   17b20:	cmp	ip, r9
   17b24:	sub	r6, lr, #1
   17b28:	blt	17ae4 <__assert_fail@plt+0x680c>
   17b2c:	cmp	r3, sl
   17b30:	blt	17b9c <__assert_fail@plt+0x68c4>
   17b34:	str	r6, [r8, #4]
   17b38:	mov	r0, #0
   17b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17b40:	cmp	r3, #0
   17b44:	bgt	17b60 <__assert_fail@plt+0x6888>
   17b48:	cmp	r2, #0
   17b4c:	beq	17b64 <__assert_fail@plt+0x688c>
   17b50:	ldr	r3, [r2, #4]
   17b54:	cmp	r3, #0
   17b58:	ble	17b64 <__assert_fail@plt+0x688c>
   17b5c:	mov	r1, r2
   17b60:	b	17a00 <__assert_fail@plt+0x6728>
   17b64:	mov	r3, #0
   17b68:	str	r3, [r0]
   17b6c:	str	r3, [r0, #4]
   17b70:	str	r3, [r0, #8]
   17b74:	mov	r0, r3
   17b78:	bx	lr
   17b7c:	sub	r9, r9, ip
   17b80:	ldr	r1, [r7, #8]
   17b84:	add	r0, r0, r6, lsl #2
   17b88:	add	r1, r1, ip, lsl #2
   17b8c:	lsl	r2, r9, #2
   17b90:	add	r6, r6, r9
   17b94:	bl	11068 <memcpy@plt>
   17b98:	b	17b34 <__assert_fail@plt+0x685c>
   17b9c:	sub	sl, sl, r3
   17ba0:	ldr	r1, [r5, #8]
   17ba4:	add	r0, r0, r6, lsl #2
   17ba8:	add	r1, r1, r3, lsl #2
   17bac:	lsl	r2, sl, #2
   17bb0:	bl	11068 <memcpy@plt>
   17bb4:	add	r6, r6, sl
   17bb8:	b	17b34 <__assert_fail@plt+0x685c>
   17bbc:	mov	r0, #12
   17bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17bc4:	push	{r4, r5, r6, r7, r8, lr}
   17bc8:	mov	r5, r0
   17bcc:	ldr	r4, [r0, #4]
   17bd0:	mov	r6, r1
   17bd4:	cmp	r4, #0
   17bd8:	beq	17ce4 <__assert_fail@plt+0x6a0c>
   17bdc:	ldr	r1, [r1, #4]
   17be0:	sub	r3, r4, #1
   17be4:	sub	r2, r1, #1
   17be8:	add	r4, r4, r1, lsl #1
   17bec:	mvn	r7, r2
   17bf0:	mvn	lr, r3
   17bf4:	tst	r7, lr
   17bf8:	bpl	17c34 <__assert_fail@plt+0x695c>
   17bfc:	ldr	r1, [r5, #8]
   17c00:	ldr	r0, [r6, #8]
   17c04:	ldr	ip, [r1, r3, lsl #2]
   17c08:	ldr	r0, [r0, r2, lsl #2]
   17c0c:	cmp	ip, r0
   17c10:	beq	17cd0 <__assert_fail@plt+0x69f8>
   17c14:	sublt	r4, r4, #1
   17c18:	sublt	r2, r2, #1
   17c1c:	subge	r3, r3, #1
   17c20:	mvnlt	r7, r2
   17c24:	mvnge	lr, r3
   17c28:	strlt	r0, [r1, r4, lsl #2]
   17c2c:	tst	r7, lr
   17c30:	bmi	17bfc <__assert_fail@plt+0x6924>
   17c34:	cmp	r2, #0
   17c38:	blt	17c58 <__assert_fail@plt+0x6980>
   17c3c:	add	r2, r2, #1
   17c40:	sub	r4, r4, r2
   17c44:	ldr	r0, [r5, #8]
   17c48:	lsl	r2, r2, #2
   17c4c:	add	r0, r0, r4, lsl #2
   17c50:	ldr	r1, [r6, #8]
   17c54:	bl	11068 <memcpy@plt>
   17c58:	ldr	r1, [r6, #4]
   17c5c:	ldr	ip, [r5, #4]
   17c60:	add	r1, ip, r1, lsl #1
   17c64:	subs	r2, r1, r4
   17c68:	sub	r1, r1, #1
   17c6c:	beq	17ca8 <__assert_fail@plt+0x69d0>
   17c70:	ldr	r0, [r5, #8]
   17c74:	sub	r3, ip, #1
   17c78:	add	ip, ip, r2
   17c7c:	str	ip, [r5, #4]
   17c80:	ldr	lr, [r0, r1, lsl #2]
   17c84:	ldr	ip, [r0, r3, lsl #2]
   17c88:	add	r6, r3, r2
   17c8c:	cmp	lr, ip
   17c90:	mov	r5, r6
   17c94:	ble	17cb0 <__assert_fail@plt+0x69d8>
   17c98:	subs	r2, r2, #1
   17c9c:	sub	r1, r1, #1
   17ca0:	str	lr, [r0, r6, lsl #2]
   17ca4:	bne	17c80 <__assert_fail@plt+0x69a8>
   17ca8:	mov	r0, #0
   17cac:	pop	{r4, r5, r6, r7, r8, pc}
   17cb0:	subs	r3, r3, #1
   17cb4:	str	ip, [r0, r6, lsl #2]
   17cb8:	bpl	17c80 <__assert_fail@plt+0x69a8>
   17cbc:	lsl	r2, r2, #2
   17cc0:	add	r1, r0, r4, lsl #2
   17cc4:	bl	11068 <memcpy@plt>
   17cc8:	mov	r0, #0
   17ccc:	pop	{r4, r5, r6, r7, r8, pc}
   17cd0:	sub	r2, r2, #1
   17cd4:	sub	r3, r3, #1
   17cd8:	mvn	r7, r2
   17cdc:	mvn	lr, r3
   17ce0:	b	17bf4 <__assert_fail@plt+0x691c>
   17ce4:	ldr	r3, [r1, #4]
   17ce8:	ldr	r0, [r0, #8]
   17cec:	str	r3, [r5, #4]
   17cf0:	ldr	r2, [r1, #4]
   17cf4:	ldr	r1, [r1, #8]
   17cf8:	lsl	r2, r2, #2
   17cfc:	bl	11068 <memcpy@plt>
   17d00:	mov	r0, #0
   17d04:	pop	{r4, r5, r6, r7, r8, pc}
   17d08:	cmp	r1, #0
   17d0c:	push	{r4, r5, r6, lr}
   17d10:	mov	r5, r0
   17d14:	blt	17d70 <__assert_fail@plt+0x6a98>
   17d18:	ldr	r3, [r0, #48]	; 0x30
   17d1c:	cmp	r1, r3
   17d20:	beq	17de4 <__assert_fail@plt+0x6b0c>
   17d24:	ldr	r3, [r0, #80]	; 0x50
   17d28:	cmp	r3, #1
   17d2c:	ble	17d78 <__assert_fail@plt+0x6aa0>
   17d30:	ldr	r3, [r0, #8]
   17d34:	add	r3, r3, r1, lsl #2
   17d38:	b	17d44 <__assert_fail@plt+0x6a6c>
   17d3c:	cmn	r1, #1
   17d40:	beq	17d70 <__assert_fail@plt+0x6a98>
   17d44:	ldr	r4, [r3], #-4
   17d48:	sub	r1, r1, #1
   17d4c:	cmn	r4, #1
   17d50:	beq	17d3c <__assert_fail@plt+0x6a64>
   17d54:	ldrb	r3, [r5, #78]	; 0x4e
   17d58:	cmp	r3, #0
   17d5c:	bne	17db8 <__assert_fail@plt+0x6ae0>
   17d60:	cmp	r4, #10
   17d64:	beq	17da4 <__assert_fail@plt+0x6acc>
   17d68:	mov	r0, #0
   17d6c:	pop	{r4, r5, r6, pc}
   17d70:	ldr	r0, [r5, #60]	; 0x3c
   17d74:	pop	{r4, r5, r6, pc}
   17d78:	ldr	r3, [r0, #4]
   17d7c:	ldr	r0, [r0, #68]	; 0x44
   17d80:	ldrb	r3, [r3, r1]
   17d84:	and	r2, r3, #31
   17d88:	asr	r1, r3, #5
   17d8c:	ldr	r0, [r0, r1, lsl #2]
   17d90:	lsr	r0, r0, r2
   17d94:	ands	r0, r0, #1
   17d98:	bne	17ddc <__assert_fail@plt+0x6b04>
   17d9c:	cmp	r3, #10
   17da0:	popne	{r4, r5, r6, pc}
   17da4:	ldrb	r0, [r5, #77]	; 0x4d
   17da8:	cmp	r0, #0
   17dac:	movne	r0, #2
   17db0:	moveq	r0, #0
   17db4:	pop	{r4, r5, r6, pc}
   17db8:	mov	r0, r4
   17dbc:	bl	111dc <iswalnum@plt>
   17dc0:	sub	r3, r4, #95	; 0x5f
   17dc4:	clz	r3, r3
   17dc8:	lsr	r3, r3, #5
   17dcc:	cmp	r0, #0
   17dd0:	orrne	r3, r3, #1
   17dd4:	cmp	r3, #0
   17dd8:	beq	17d60 <__assert_fail@plt+0x6a88>
   17ddc:	mov	r0, #1
   17de0:	pop	{r4, r5, r6, pc}
   17de4:	tst	r2, #2
   17de8:	moveq	r0, #10
   17dec:	movne	r0, #8
   17df0:	pop	{r4, r5, r6, pc}
   17df4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17df8:	mov	r4, r0
   17dfc:	ldr	r6, [r0, #24]
   17e00:	sub	sp, sp, #36	; 0x24
   17e04:	cmp	r6, r1
   17e08:	mov	r7, r1
   17e0c:	mov	r8, r2
   17e10:	suble	r5, r1, r6
   17e14:	ble	17e78 <__assert_fail@plt+0x6ba0>
   17e18:	ldr	r3, [r0, #80]	; 0x50
   17e1c:	ldr	r1, [r0, #44]	; 0x2c
   17e20:	cmp	r3, #1
   17e24:	ldrb	r3, [r0, #75]	; 0x4b
   17e28:	movgt	r2, #0
   17e2c:	strgt	r2, [r0, #16]
   17e30:	strgt	r2, [r0, #20]
   17e34:	tst	r8, #1
   17e38:	ldr	r2, [r0, #52]	; 0x34
   17e3c:	moveq	r0, #6
   17e40:	movne	r0, #4
   17e44:	cmp	r3, #0
   17e48:	mov	r6, #0
   17e4c:	str	r2, [r4, #56]	; 0x38
   17e50:	str	r6, [r4, #28]
   17e54:	str	r6, [r4, #24]
   17e58:	str	r6, [r4, #32]
   17e5c:	strb	r6, [r4, #76]	; 0x4c
   17e60:	ldreq	r2, [r4]
   17e64:	moveq	r6, r3
   17e68:	mov	r5, r7
   17e6c:	str	r0, [r4, #60]	; 0x3c
   17e70:	str	r1, [r4, #48]	; 0x30
   17e74:	streq	r2, [r4, #4]
   17e78:	cmp	r5, #0
   17e7c:	ldreq	r3, [r4, #80]	; 0x50
   17e80:	beq	17f10 <__assert_fail@plt+0x6c38>
   17e84:	ldr	r2, [r4, #32]
   17e88:	ldrb	r3, [r4, #76]	; 0x4c
   17e8c:	cmp	r5, r2
   17e90:	bge	17fe0 <__assert_fail@plt+0x6d08>
   17e94:	cmp	r3, #0
   17e98:	bne	180fc <__assert_fail@plt+0x6e24>
   17e9c:	mov	r2, r8
   17ea0:	sub	r1, r5, #1
   17ea4:	mov	r0, r4
   17ea8:	bl	17d08 <__assert_fail@plt+0x6a30>
   17eac:	ldr	r3, [r4, #80]	; 0x50
   17eb0:	cmp	r3, #1
   17eb4:	str	r0, [r4, #60]	; 0x3c
   17eb8:	ble	17ed4 <__assert_fail@plt+0x6bfc>
   17ebc:	ldr	r2, [r4, #28]
   17ec0:	ldr	r0, [r4, #8]
   17ec4:	sub	r2, r2, r5
   17ec8:	add	r1, r0, r5, lsl #2
   17ecc:	lsl	r2, r2, #2
   17ed0:	bl	11038 <memmove@plt>
   17ed4:	ldrb	r3, [r4, #75]	; 0x4b
   17ed8:	cmp	r3, #0
   17edc:	bne	1823c <__assert_fail@plt+0x6f64>
   17ee0:	ldr	r0, [r4, #28]
   17ee4:	ldr	r1, [r4, #32]
   17ee8:	mov	r2, r3
   17eec:	ldr	r3, [r4, #80]	; 0x50
   17ef0:	sub	r0, r0, r5
   17ef4:	sub	r1, r1, r5
   17ef8:	str	r0, [r4, #28]
   17efc:	str	r1, [r4, #32]
   17f00:	cmp	r2, #0
   17f04:	ldreq	r2, [r4, #4]
   17f08:	addeq	r2, r2, r5
   17f0c:	streq	r2, [r4, #4]
   17f10:	ldr	r2, [r4, #48]	; 0x30
   17f14:	ldr	r1, [r4, #56]	; 0x38
   17f18:	cmp	r3, #1
   17f1c:	sub	r3, r2, r5
   17f20:	sub	r5, r1, r5
   17f24:	str	r7, [r4, #24]
   17f28:	str	r3, [r4, #48]	; 0x30
   17f2c:	str	r5, [r4, #56]	; 0x38
   17f30:	ble	17f68 <__assert_fail@plt+0x6c90>
   17f34:	ldrb	r3, [r4, #72]	; 0x48
   17f38:	mov	r0, r4
   17f3c:	cmp	r3, #0
   17f40:	bne	17f58 <__assert_fail@plt+0x6c80>
   17f44:	bl	16d70 <__assert_fail@plt+0x5a98>
   17f48:	mov	r0, #0
   17f4c:	str	r0, [r4, #40]	; 0x28
   17f50:	add	sp, sp, #36	; 0x24
   17f54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f58:	bl	16f10 <__assert_fail@plt+0x5c38>
   17f5c:	cmp	r0, #0
   17f60:	beq	17f48 <__assert_fail@plt+0x6c70>
   17f64:	b	17f50 <__assert_fail@plt+0x6c78>
   17f68:	ldrb	r2, [r4, #75]	; 0x4b
   17f6c:	cmp	r2, #0
   17f70:	streq	r3, [r4, #28]
   17f74:	beq	17f48 <__assert_fail@plt+0x6c70>
   17f78:	ldrb	r2, [r4, #72]	; 0x48
   17f7c:	cmp	r2, #0
   17f80:	bne	184b0 <__assert_fail@plt+0x71d8>
   17f84:	ldr	r0, [r4, #64]	; 0x40
   17f88:	cmp	r0, #0
   17f8c:	beq	17f48 <__assert_fail@plt+0x6c70>
   17f90:	ldr	r1, [r4, #36]	; 0x24
   17f94:	ldr	r2, [r4, #28]
   17f98:	cmp	r3, r1
   17f9c:	movge	r3, r1
   17fa0:	cmp	r3, r2
   17fa4:	bgt	17fb4 <__assert_fail@plt+0x6cdc>
   17fa8:	b	17fd4 <__assert_fail@plt+0x6cfc>
   17fac:	ldr	r7, [r4, #24]
   17fb0:	ldr	r0, [r4, #64]	; 0x40
   17fb4:	ldm	r4, {r1, ip}
   17fb8:	add	r1, r1, r2
   17fbc:	ldrb	r1, [r1, r7]
   17fc0:	ldrb	r1, [r0, r1]
   17fc4:	strb	r1, [ip, r2]
   17fc8:	add	r2, r2, #1
   17fcc:	cmp	r3, r2
   17fd0:	bne	17fac <__assert_fail@plt+0x6cd4>
   17fd4:	str	r2, [r4, #28]
   17fd8:	str	r2, [r4, #32]
   17fdc:	b	17f48 <__assert_fail@plt+0x6c70>
   17fe0:	ldr	r1, [r4, #28]
   17fe4:	cmp	r3, #0
   17fe8:	str	r1, [sp, #4]
   17fec:	bne	183f4 <__assert_fail@plt+0x711c>
   17ff0:	ldr	r3, [r4, #80]	; 0x50
   17ff4:	mov	r1, #0
   17ff8:	cmp	r3, #1
   17ffc:	str	r1, [r4, #28]
   18000:	ble	182b0 <__assert_fail@plt+0x6fd8>
   18004:	ldrb	r1, [r4, #73]	; 0x49
   18008:	cmp	r1, #0
   1800c:	beq	18074 <__assert_fail@plt+0x6d9c>
   18010:	ldr	ip, [r4]
   18014:	sub	r3, r5, r3
   18018:	add	r9, ip, r6
   1801c:	add	r3, r9, r3
   18020:	cmp	ip, r3
   18024:	sub	r0, r5, #1
   18028:	movcc	ip, r3
   1802c:	add	r1, r9, r0
   18030:	cmp	r1, ip
   18034:	bcc	18074 <__assert_fail@plt+0x6d9c>
   18038:	ldrb	r3, [r9, r0]
   1803c:	and	r3, r3, #192	; 0xc0
   18040:	cmp	r3, #128	; 0x80
   18044:	subeq	r3, r1, #1
   18048:	subeq	ip, ip, #1
   1804c:	beq	18068 <__assert_fail@plt+0x6d90>
   18050:	b	18304 <__assert_fail@plt+0x702c>
   18054:	ldrb	r0, [r1]
   18058:	sub	r3, r3, #1
   1805c:	and	r0, r0, #192	; 0xc0
   18060:	cmp	r0, #128	; 0x80
   18064:	bne	18304 <__assert_fail@plt+0x702c>
   18068:	cmp	ip, r3
   1806c:	mov	r1, r3
   18070:	bne	18054 <__assert_fail@plt+0x6d7c>
   18074:	add	r6, r6, r2
   18078:	cmp	r7, r6
   1807c:	ble	18680 <__assert_fail@plt+0x73a8>
   18080:	add	sl, r4, #16
   18084:	add	fp, sp, #24
   18088:	b	18098 <__assert_fail@plt+0x6dc0>
   1808c:	add	r6, r6, r3
   18090:	cmp	r7, r6
   18094:	ble	18420 <__assert_fail@plt+0x7148>
   18098:	ldm	sl, {r0, r1}
   1809c:	ldr	r9, [r4, #44]	; 0x2c
   180a0:	ldr	ip, [r4]
   180a4:	sub	r9, r9, r6
   180a8:	mov	r2, r9
   180ac:	stm	fp, {r0, r1}
   180b0:	mov	r3, sl
   180b4:	add	r1, ip, r6
   180b8:	add	r0, sp, #16
   180bc:	bl	2973c <__assert_fail@plt+0x18464>
   180c0:	sub	r2, r0, #1
   180c4:	cmn	r2, #4
   180c8:	mov	r3, r0
   180cc:	ldrls	r9, [sp, #16]
   180d0:	bls	1808c <__assert_fail@plt+0x6db4>
   180d4:	mov	r2, #0
   180d8:	cmp	r9, r2
   180dc:	cmpne	r0, r2
   180e0:	ldm	fp, {r0, r1}
   180e4:	ldrne	r3, [r4]
   180e8:	ldrbne	r2, [r3, r6]
   180ec:	mov	r3, #1
   180f0:	stm	sl, {r0, r1}
   180f4:	mov	r9, r2
   180f8:	b	1808c <__assert_fail@plt+0x6db4>
   180fc:	ldr	sl, [r4, #28]
   18100:	ldr	r9, [r4, #12]
   18104:	mov	r3, sl
   18108:	mov	r2, #0
   1810c:	b	18120 <__assert_fail@plt+0x6e48>
   18110:	ble	18148 <__assert_fail@plt+0x6e70>
   18114:	add	r2, r6, #1
   18118:	cmp	r2, r3
   1811c:	bge	18140 <__assert_fail@plt+0x6e68>
   18120:	add	r1, r2, r3
   18124:	add	r1, r1, r1, lsr #31
   18128:	asr	r6, r1, #1
   1812c:	ldr	r1, [r9, r6, lsl #2]
   18130:	cmp	r5, r1
   18134:	bge	18110 <__assert_fail@plt+0x6e38>
   18138:	mov	r3, r6
   1813c:	b	18118 <__assert_fail@plt+0x6e40>
   18140:	cmp	r5, r1
   18144:	addgt	r6, r6, #1
   18148:	sub	fp, r6, #1
   1814c:	mov	r2, r8
   18150:	mov	r1, fp
   18154:	mov	r0, r4
   18158:	bl	17d08 <__assert_fail@plt+0x6a30>
   1815c:	cmp	r5, sl
   18160:	movge	r3, #0
   18164:	movlt	r3, #1
   18168:	cmp	r5, r6
   1816c:	movne	r3, #0
   18170:	cmp	r3, #0
   18174:	str	r0, [r4, #60]	; 0x3c
   18178:	bne	1836c <__assert_fail@plt+0x7094>
   1817c:	ldr	r2, [r4, #44]	; 0x2c
   18180:	ldr	r3, [r4, #52]	; 0x34
   18184:	sub	r2, r2, r7
   18188:	add	r2, r2, r5
   1818c:	sub	r3, r3, r7
   18190:	add	r3, r3, r5
   18194:	str	r2, [r4, #48]	; 0x30
   18198:	cmp	r6, #0
   1819c:	mov	r2, #0
   181a0:	str	r3, [r4, #56]	; 0x38
   181a4:	strb	r2, [r4, #76]	; 0x4c
   181a8:	ble	181e0 <__assert_fail@plt+0x6f08>
   181ac:	sub	r3, r6, #-1073741823	; 0xc0000001
   181b0:	ldr	r2, [r9, r3, lsl #2]
   181b4:	add	r3, r9, r3, lsl #2
   181b8:	cmp	r5, r2
   181bc:	beq	181d4 <__assert_fail@plt+0x6efc>
   181c0:	b	181e0 <__assert_fail@plt+0x6f08>
   181c4:	ldr	r2, [r3, #-4]!
   181c8:	sub	fp, fp, #1
   181cc:	cmp	r5, r2
   181d0:	bne	181e0 <__assert_fail@plt+0x6f08>
   181d4:	cmp	fp, #0
   181d8:	mov	r6, fp
   181dc:	bne	181c4 <__assert_fail@plt+0x6eec>
   181e0:	cmp	sl, r6
   181e4:	ble	18258 <__assert_fail@plt+0x6f80>
   181e8:	ldr	r1, [r4, #8]
   181ec:	lsl	r0, r6, #2
   181f0:	add	r3, r1, r0
   181f4:	ldr	r2, [r1, r6, lsl #2]
   181f8:	cmn	r2, #1
   181fc:	rsbeq	r1, r1, #4
   18200:	beq	18214 <__assert_fail@plt+0x6f3c>
   18204:	b	18260 <__assert_fail@plt+0x6f88>
   18208:	ldr	r2, [r3, #4]!
   1820c:	cmn	r2, #1
   18210:	bne	18260 <__assert_fail@plt+0x6f88>
   18214:	add	r6, r6, #1
   18218:	cmp	sl, r6
   1821c:	add	r0, r1, r3
   18220:	bne	18208 <__assert_fail@plt+0x6f30>
   18224:	mov	r2, #0
   18228:	str	r2, [r4, #28]
   1822c:	str	r2, [r4, #32]
   18230:	ldrb	r2, [r4, #75]	; 0x4b
   18234:	ldr	r3, [r4, #80]	; 0x50
   18238:	b	17f00 <__assert_fail@plt+0x6c28>
   1823c:	ldr	r0, [r4, #4]
   18240:	ldr	r2, [r4, #28]
   18244:	add	r1, r0, r5
   18248:	sub	r2, r2, r5
   1824c:	bl	11038 <memmove@plt>
   18250:	ldrb	r3, [r4, #75]	; 0x4b
   18254:	b	17ee0 <__assert_fail@plt+0x6c08>
   18258:	beq	18224 <__assert_fail@plt+0x6f4c>
   1825c:	lsl	r0, r6, #2
   18260:	ldr	r2, [r9, r0]
   18264:	sub	r2, r2, r5
   18268:	cmp	r2, #0
   1826c:	str	r2, [r4, #28]
   18270:	beq	1822c <__assert_fail@plt+0x6f54>
   18274:	ble	1829c <__assert_fail@plt+0x6fc4>
   18278:	ldr	r1, [r4, #8]
   1827c:	mov	r3, #0
   18280:	sub	r1, r1, #4
   18284:	mvn	r0, #0
   18288:	str	r0, [r1, #4]!
   1828c:	ldr	r2, [r4, #28]
   18290:	add	r3, r3, #1
   18294:	cmp	r2, r3
   18298:	bgt	18288 <__assert_fail@plt+0x6fb0>
   1829c:	mov	r1, #255	; 0xff
   182a0:	ldr	r0, [r4, #4]
   182a4:	bl	111f4 <memset@plt>
   182a8:	ldr	r2, [r4, #28]
   182ac:	b	1822c <__assert_fail@plt+0x6f54>
   182b0:	ldr	r2, [r4]
   182b4:	ldr	ip, [r4, #64]	; 0x40
   182b8:	add	r2, r2, r5
   182bc:	add	r6, r2, r6
   182c0:	cmp	ip, #0
   182c4:	ldrb	r0, [r6, #-1]
   182c8:	str	r1, [r4, #32]
   182cc:	ldrbne	r0, [ip, r0]
   182d0:	ldr	ip, [r4, #68]	; 0x44
   182d4:	and	r2, r0, #31
   182d8:	asr	r1, r0, #5
   182dc:	ldr	r1, [ip, r1, lsl #2]
   182e0:	lsr	r2, r1, r2
   182e4:	ands	r1, r2, #1
   182e8:	movne	r1, #1
   182ec:	bne	182f8 <__assert_fail@plt+0x7020>
   182f0:	cmp	r0, #10
   182f4:	beq	185ac <__assert_fail@plt+0x72d4>
   182f8:	ldrb	r2, [r4, #75]	; 0x4b
   182fc:	str	r1, [r4, #60]	; 0x3c
   18300:	b	17f00 <__assert_fail@plt+0x6c28>
   18304:	ldr	r2, [r4, #48]	; 0x30
   18308:	ldr	r3, [r4, #64]	; 0x40
   1830c:	add	r2, r9, r2
   18310:	cmp	r3, #0
   18314:	mov	r6, r1
   18318:	sub	r2, r2, r1
   1831c:	bne	185c0 <__assert_fail@plt+0x72e8>
   18320:	add	fp, sp, #24
   18324:	mov	r3, fp
   18328:	mov	sl, #0
   1832c:	add	r0, sp, #12
   18330:	str	sl, [sp, #24]
   18334:	str	sl, [sp, #28]
   18338:	bl	2973c <__assert_fail@plt+0x18464>
   1833c:	add	r9, r9, r5
   18340:	sub	r6, r9, r6
   18344:	cmp	r0, r6
   18348:	movcc	r3, #0
   1834c:	movcs	r3, #1
   18350:	cmn	r0, #3
   18354:	movhi	r3, #0
   18358:	cmp	r3, sl
   1835c:	bne	18460 <__assert_fail@plt+0x7188>
   18360:	ldr	r6, [r4, #24]
   18364:	ldr	r2, [r4, #32]
   18368:	b	18074 <__assert_fail@plt+0x6d9c>
   1836c:	ldr	r3, [r9, r6, lsl #2]
   18370:	cmp	r5, r3
   18374:	bne	1817c <__assert_fail@plt+0x6ea4>
   18378:	ldr	r0, [r4, #8]
   1837c:	sub	r2, sl, r5
   18380:	lsl	r6, r5, #2
   18384:	lsl	r2, r2, #2
   18388:	add	r1, r0, r6
   1838c:	bl	11038 <memmove@plt>
   18390:	ldr	r0, [r4, #4]
   18394:	ldr	r2, [r4, #28]
   18398:	add	r1, r0, r5
   1839c:	sub	r2, r2, r5
   183a0:	bl	11038 <memmove@plt>
   183a4:	ldr	r3, [r4, #28]
   183a8:	ldr	r2, [r4, #32]
   183ac:	sub	r3, r3, r5
   183b0:	sub	r2, r2, r5
   183b4:	cmp	r3, #0
   183b8:	str	r3, [r4, #28]
   183bc:	str	r2, [r4, #32]
   183c0:	ble	18230 <__assert_fail@plt+0x6f58>
   183c4:	ldr	r1, [r4, #12]
   183c8:	mov	r2, #0
   183cc:	add	r0, r1, r6
   183d0:	sub	r1, r1, #4
   183d4:	ldr	r3, [r0], #4
   183d8:	add	r2, r2, #1
   183dc:	sub	r3, r3, r5
   183e0:	str	r3, [r1, #4]!
   183e4:	ldr	r3, [r4, #28]
   183e8:	cmp	r3, r2
   183ec:	bgt	183d4 <__assert_fail@plt+0x70fc>
   183f0:	b	18230 <__assert_fail@plt+0x6f58>
   183f4:	ldr	r1, [r4, #44]	; 0x2c
   183f8:	ldr	r3, [r4, #52]	; 0x34
   183fc:	sub	r1, r1, r7
   18400:	add	r1, r1, r5
   18404:	sub	r3, r3, r7
   18408:	add	r3, r3, r5
   1840c:	str	r1, [r4, #48]	; 0x30
   18410:	mov	r1, #0
   18414:	str	r3, [r4, #56]	; 0x38
   18418:	strb	r1, [r4, #76]	; 0x4c
   1841c:	b	17ff0 <__assert_fail@plt+0x6d18>
   18420:	sub	r6, r6, r7
   18424:	cmn	r9, #1
   18428:	str	r6, [r4, #28]
   1842c:	bne	1847c <__assert_fail@plt+0x71a4>
   18430:	ldr	r3, [sp, #4]
   18434:	mov	r2, r8
   18438:	sub	r1, r3, #1
   1843c:	mov	r0, r4
   18440:	bl	17d08 <__assert_fail@plt+0x6a30>
   18444:	str	r0, [r4, #60]	; 0x3c
   18448:	cmp	r6, #0
   1844c:	bne	18534 <__assert_fail@plt+0x725c>
   18450:	ldrb	r2, [r4, #75]	; 0x4b
   18454:	str	r6, [r4, #32]
   18458:	ldr	r3, [r4, #80]	; 0x50
   1845c:	b	17f00 <__assert_fail@plt+0x6c28>
   18460:	ldr	r9, [sp, #12]
   18464:	sub	r6, r0, r6
   18468:	cmn	r9, #1
   1846c:	str	sl, [r4, #16]
   18470:	str	sl, [r4, #20]
   18474:	str	r6, [r4, #28]
   18478:	beq	18360 <__assert_fail@plt+0x7088>
   1847c:	ldrb	r3, [r4, #78]	; 0x4e
   18480:	cmp	r3, #0
   18484:	bne	18584 <__assert_fail@plt+0x72ac>
   18488:	cmp	r9, #10
   1848c:	movne	r3, #0
   18490:	beq	1849c <__assert_fail@plt+0x71c4>
   18494:	str	r3, [r4, #60]	; 0x3c
   18498:	b	18448 <__assert_fail@plt+0x7170>
   1849c:	ldrb	r3, [r4, #77]	; 0x4d
   184a0:	cmp	r3, #0
   184a4:	movne	r3, #2
   184a8:	moveq	r3, #0
   184ac:	b	18494 <__assert_fail@plt+0x71bc>
   184b0:	ldr	r5, [r4, #36]	; 0x24
   184b4:	ldr	r6, [r4, #28]
   184b8:	cmp	r3, r5
   184bc:	movlt	r5, r3
   184c0:	cmp	r5, r6
   184c4:	ble	1868c <__assert_fail@plt+0x73b4>
   184c8:	bl	1117c <__ctype_toupper_loc@plt>
   184cc:	b	184f0 <__assert_fail@plt+0x7218>
   184d0:	ldr	r1, [r0]
   184d4:	ldr	r2, [r4, #4]
   184d8:	ldr	r3, [r1, r3, lsl #2]
   184dc:	strb	r3, [r2, r6]
   184e0:	add	r6, r6, #1
   184e4:	cmp	r6, r5
   184e8:	beq	18528 <__assert_fail@plt+0x7250>
   184ec:	ldr	r7, [r4, #24]
   184f0:	ldr	r3, [r4]
   184f4:	ldr	r2, [r4, #64]	; 0x40
   184f8:	add	r3, r3, r6
   184fc:	cmp	r2, #0
   18500:	ldrb	r3, [r3, r7]
   18504:	beq	184d0 <__assert_fail@plt+0x71f8>
   18508:	ldrb	r3, [r2, r3]
   1850c:	ldr	ip, [r0]
   18510:	ldr	r1, [r4, #4]
   18514:	ldr	r3, [ip, r3, lsl #2]
   18518:	strb	r3, [r1, r6]
   1851c:	add	r6, r6, #1
   18520:	cmp	r5, r6
   18524:	bne	184ec <__assert_fail@plt+0x7214>
   18528:	str	r5, [r4, #28]
   1852c:	str	r5, [r4, #32]
   18530:	b	17f48 <__assert_fail@plt+0x6c70>
   18534:	ble	1855c <__assert_fail@plt+0x7284>
   18538:	ldr	r2, [r4, #8]
   1853c:	mov	r3, #0
   18540:	sub	r2, r2, #4
   18544:	mvn	r1, #0
   18548:	str	r1, [r2, #4]!
   1854c:	ldr	r6, [r4, #28]
   18550:	add	r3, r3, #1
   18554:	cmp	r6, r3
   18558:	bgt	18548 <__assert_fail@plt+0x7270>
   1855c:	ldrb	r2, [r4, #75]	; 0x4b
   18560:	cmp	r2, #0
   18564:	beq	18454 <__assert_fail@plt+0x717c>
   18568:	mov	r2, r6
   1856c:	mov	r1, #255	; 0xff
   18570:	ldr	r0, [r4, #4]
   18574:	bl	111f4 <memset@plt>
   18578:	ldrb	r2, [r4, #75]	; 0x4b
   1857c:	ldr	r6, [r4, #28]
   18580:	b	18454 <__assert_fail@plt+0x717c>
   18584:	mov	r0, r9
   18588:	bl	111dc <iswalnum@plt>
   1858c:	cmp	r9, #95	; 0x5f
   18590:	clz	r0, r0
   18594:	lsr	r0, r0, #5
   18598:	moveq	r0, #0
   1859c:	cmp	r0, #0
   185a0:	moveq	r3, #1
   185a4:	bne	18488 <__assert_fail@plt+0x71b0>
   185a8:	b	18494 <__assert_fail@plt+0x71bc>
   185ac:	ldrb	r1, [r4, #77]	; 0x4d
   185b0:	cmp	r1, #0
   185b4:	movne	r1, #2
   185b8:	moveq	r1, #0
   185bc:	b	182f8 <__assert_fail@plt+0x7020>
   185c0:	cmp	r2, #6
   185c4:	movlt	r1, r2
   185c8:	movge	r1, #6
   185cc:	subs	r0, r1, #1
   185d0:	bmi	18678 <__assert_fail@plt+0x73a0>
   185d4:	ldrb	lr, [r6, r0]
   185d8:	add	ip, sp, #32
   185dc:	add	ip, ip, r0
   185e0:	sub	r0, r1, #2
   185e4:	ldrb	lr, [r3, lr]
   185e8:	cmn	r0, #1
   185ec:	strb	lr, [ip, #-16]
   185f0:	beq	18678 <__assert_fail@plt+0x73a0>
   185f4:	ldrb	lr, [r6, r0]
   185f8:	add	ip, sp, #32
   185fc:	add	ip, ip, r0
   18600:	sub	r0, r1, #3
   18604:	ldrb	lr, [r3, lr]
   18608:	cmn	r0, #1
   1860c:	strb	lr, [ip, #-16]
   18610:	beq	18678 <__assert_fail@plt+0x73a0>
   18614:	ldrb	lr, [r6, r0]
   18618:	add	ip, sp, #32
   1861c:	add	ip, ip, r0
   18620:	sub	r0, r1, #4
   18624:	ldrb	lr, [r3, lr]
   18628:	cmn	r0, #1
   1862c:	strb	lr, [ip, #-16]
   18630:	beq	18678 <__assert_fail@plt+0x73a0>
   18634:	ldrb	lr, [r6, r0]
   18638:	add	ip, sp, #32
   1863c:	add	ip, ip, r0
   18640:	sub	r0, r1, #5
   18644:	ldrb	lr, [r3, lr]
   18648:	cmn	r0, #1
   1864c:	strb	lr, [ip, #-16]
   18650:	beq	18678 <__assert_fail@plt+0x73a0>
   18654:	ldrb	ip, [r6, r0]
   18658:	add	lr, sp, #32
   1865c:	cmp	r1, #6
   18660:	add	r0, lr, r0
   18664:	ldrb	r1, [r3, ip]
   18668:	strb	r1, [r0, #-16]
   1866c:	ldrbeq	r1, [r6]
   18670:	ldrbeq	r3, [r3, r1]
   18674:	strbeq	r3, [sp, #16]
   18678:	add	r1, sp, #16
   1867c:	b	18320 <__assert_fail@plt+0x7048>
   18680:	sub	r6, r6, r7
   18684:	str	r6, [r4, #28]
   18688:	b	18430 <__assert_fail@plt+0x7158>
   1868c:	mov	r5, r6
   18690:	b	18528 <__assert_fail@plt+0x7250>
   18694:	push	{r4, r5, r6, lr}
   18698:	mov	r4, r1
   1869c:	mov	r1, r2
   186a0:	ldr	r2, [r0, #88]	; 0x58
   186a4:	mov	r5, r0
   186a8:	bl	17d08 <__assert_fail@plt+0x6a30>
   186ac:	ldr	r2, [r4, #8]
   186b0:	cmp	r2, #0
   186b4:	ble	18774 <__assert_fail@plt+0x749c>
   186b8:	ldr	r1, [r5, #84]	; 0x54
   186bc:	ands	r3, r0, #1
   186c0:	ldr	lr, [r4, #12]
   186c4:	ldr	ip, [r1]
   186c8:	and	r1, r0, #2
   186cc:	and	r0, r0, #8
   186d0:	bne	18824 <__assert_fail@plt+0x754c>
   186d4:	cmp	r1, #0
   186d8:	ldr	r5, [pc, #700]	; 1899c <__assert_fail@plt+0x76c4>
   186dc:	sub	lr, lr, #4
   186e0:	beq	1877c <__assert_fail@plt+0x74a4>
   186e4:	cmp	r0, #0
   186e8:	bne	18750 <__assert_fail@plt+0x7478>
   186ec:	mov	r3, r0
   186f0:	b	186fc <__assert_fail@plt+0x7424>
   186f4:	cmp	r2, r3
   186f8:	beq	18774 <__assert_fail@plt+0x749c>
   186fc:	ldr	r0, [lr, #4]!
   18700:	add	r3, r3, #1
   18704:	add	r1, ip, r0, lsl #3
   18708:	ldrb	r4, [r1, #4]
   1870c:	ldr	r1, [r1, #4]
   18710:	cmp	r4, #2
   18714:	and	r1, r5, r1, lsr #8
   18718:	bne	186f4 <__assert_fail@plt+0x741c>
   1871c:	cmp	r1, #0
   18720:	popeq	{r4, r5, r6, pc}
   18724:	tst	r1, #4
   18728:	bne	186f4 <__assert_fail@plt+0x741c>
   1872c:	tst	r1, #128	; 0x80
   18730:	popeq	{r4, r5, r6, pc}
   18734:	b	186f4 <__assert_fail@plt+0x741c>
   18738:	cmp	r1, #0
   1873c:	popeq	{r4, r5, r6, pc}
   18740:	tst	r1, #4
   18744:	popeq	{r4, r5, r6, pc}
   18748:	cmp	r2, r3
   1874c:	beq	18774 <__assert_fail@plt+0x749c>
   18750:	ldr	r0, [lr, #4]!
   18754:	add	r3, r3, #1
   18758:	add	r1, ip, r0, lsl #3
   1875c:	ldrb	r4, [r1, #4]
   18760:	ldr	r1, [r1, #4]
   18764:	cmp	r4, #2
   18768:	and	r1, r5, r1, lsr #8
   1876c:	bne	18748 <__assert_fail@plt+0x7470>
   18770:	b	18738 <__assert_fail@plt+0x7460>
   18774:	mov	r0, #0
   18778:	pop	{r4, r5, r6, pc}
   1877c:	cmp	r0, #0
   18780:	beq	187d0 <__assert_fail@plt+0x74f8>
   18784:	mov	r3, r1
   18788:	b	18794 <__assert_fail@plt+0x74bc>
   1878c:	cmp	r2, r3
   18790:	beq	18774 <__assert_fail@plt+0x749c>
   18794:	ldr	r0, [lr, #4]!
   18798:	add	r3, r3, #1
   1879c:	add	r1, ip, r0, lsl #3
   187a0:	ldrb	r4, [r1, #4]
   187a4:	ldr	r1, [r1, #4]
   187a8:	cmp	r4, #2
   187ac:	and	r1, r5, r1, lsr #8
   187b0:	bne	1878c <__assert_fail@plt+0x74b4>
   187b4:	cmp	r1, #0
   187b8:	popeq	{r4, r5, r6, pc}
   187bc:	tst	r1, #4
   187c0:	bne	1878c <__assert_fail@plt+0x74b4>
   187c4:	tst	r1, #32
   187c8:	popeq	{r4, r5, r6, pc}
   187cc:	b	1878c <__assert_fail@plt+0x74b4>
   187d0:	mov	r3, r0
   187d4:	b	187e4 <__assert_fail@plt+0x750c>
   187d8:	add	r3, r3, #1
   187dc:	cmp	r3, r2
   187e0:	beq	18774 <__assert_fail@plt+0x749c>
   187e4:	ldr	r0, [lr, #4]!
   187e8:	add	r1, ip, r0, lsl #3
   187ec:	ldrb	r4, [r1, #4]
   187f0:	ldr	r1, [r1, #4]
   187f4:	cmp	r4, #2
   187f8:	and	r1, r5, r1, lsr #8
   187fc:	bne	187d8 <__assert_fail@plt+0x7500>
   18800:	cmp	r1, #0
   18804:	popeq	{r4, r5, r6, pc}
   18808:	tst	r1, #4
   1880c:	bne	187d8 <__assert_fail@plt+0x7500>
   18810:	tst	r1, #32
   18814:	bne	187d8 <__assert_fail@plt+0x7500>
   18818:	tst	r1, #128	; 0x80
   1881c:	bne	187d8 <__assert_fail@plt+0x7500>
   18820:	pop	{r4, r5, r6, pc}
   18824:	cmp	r1, #0
   18828:	beq	18888 <__assert_fail@plt+0x75b0>
   1882c:	cmp	r0, #0
   18830:	ldr	r5, [pc, #356]	; 1899c <__assert_fail@plt+0x76c4>
   18834:	sub	lr, lr, #4
   18838:	beq	1894c <__assert_fail@plt+0x7674>
   1883c:	mov	r1, #0
   18840:	b	1884c <__assert_fail@plt+0x7574>
   18844:	cmp	r2, r1
   18848:	beq	18774 <__assert_fail@plt+0x749c>
   1884c:	ldr	r0, [lr, #4]!
   18850:	add	r1, r1, #1
   18854:	add	r3, ip, r0, lsl #3
   18858:	ldrb	r4, [r3, #4]
   1885c:	ldr	r3, [r3, #4]
   18860:	cmp	r4, #2
   18864:	and	r3, r5, r3, lsr #8
   18868:	bne	18844 <__assert_fail@plt+0x756c>
   1886c:	cmp	r3, #0
   18870:	popeq	{r4, r5, r6, pc}
   18874:	tst	r3, #4
   18878:	beq	188e4 <__assert_fail@plt+0x760c>
   1887c:	tst	r3, #8
   18880:	popeq	{r4, r5, r6, pc}
   18884:	b	18844 <__assert_fail@plt+0x756c>
   18888:	cmp	r0, #0
   1888c:	beq	188f0 <__assert_fail@plt+0x7618>
   18890:	ldr	r5, [pc, #260]	; 1899c <__assert_fail@plt+0x76c4>
   18894:	sub	lr, lr, #4
   18898:	mov	r3, r1
   1889c:	b	188ac <__assert_fail@plt+0x75d4>
   188a0:	add	r3, r3, #1
   188a4:	cmp	r2, r3
   188a8:	beq	18774 <__assert_fail@plt+0x749c>
   188ac:	ldr	r0, [lr, #4]!
   188b0:	add	r1, ip, r0, lsl #3
   188b4:	ldrb	r4, [r1, #4]
   188b8:	ldr	r1, [r1, #4]
   188bc:	cmp	r4, #2
   188c0:	and	r1, r5, r1, lsr #8
   188c4:	bne	188a0 <__assert_fail@plt+0x75c8>
   188c8:	cmp	r1, #0
   188cc:	popeq	{r4, r5, r6, pc}
   188d0:	tst	r1, #8
   188d4:	bne	188a0 <__assert_fail@plt+0x75c8>
   188d8:	tst	r1, #32
   188dc:	popeq	{r4, r5, r6, pc}
   188e0:	b	188a0 <__assert_fail@plt+0x75c8>
   188e4:	tst	r3, #8
   188e8:	bne	18844 <__assert_fail@plt+0x756c>
   188ec:	pop	{r4, r5, r6, pc}
   188f0:	ldr	r4, [pc, #164]	; 1899c <__assert_fail@plt+0x76c4>
   188f4:	sub	lr, lr, #4
   188f8:	mov	r3, r0
   188fc:	b	1890c <__assert_fail@plt+0x7634>
   18900:	add	r3, r3, #1
   18904:	cmp	r2, r3
   18908:	beq	18774 <__assert_fail@plt+0x749c>
   1890c:	ldr	r0, [lr, #4]!
   18910:	add	r1, ip, r0, lsl #3
   18914:	ldrb	r5, [r1, #4]
   18918:	ldr	r1, [r1, #4]
   1891c:	cmp	r5, #2
   18920:	and	r1, r4, r1, lsr #8
   18924:	bne	18900 <__assert_fail@plt+0x7628>
   18928:	cmp	r1, #0
   1892c:	beq	18998 <__assert_fail@plt+0x76c0>
   18930:	tst	r1, #8
   18934:	bne	18900 <__assert_fail@plt+0x7628>
   18938:	tst	r1, #32
   1893c:	bne	18900 <__assert_fail@plt+0x7628>
   18940:	tst	r1, #128	; 0x80
   18944:	bne	18900 <__assert_fail@plt+0x7628>
   18948:	pop	{r4, r5, r6, pc}
   1894c:	mov	r3, r0
   18950:	b	18960 <__assert_fail@plt+0x7688>
   18954:	add	r3, r3, #1
   18958:	cmp	r2, r3
   1895c:	beq	18774 <__assert_fail@plt+0x749c>
   18960:	ldr	r0, [lr, #4]!
   18964:	add	r1, ip, r0, lsl #3
   18968:	ldrb	r4, [r1, #4]
   1896c:	ldr	r1, [r1, #4]
   18970:	cmp	r4, #2
   18974:	and	r1, r5, r1, lsr #8
   18978:	bne	18954 <__assert_fail@plt+0x767c>
   1897c:	cmp	r1, #0
   18980:	popeq	{r4, r5, r6, pc}
   18984:	tst	r1, #8
   18988:	bne	18954 <__assert_fail@plt+0x767c>
   1898c:	tst	r1, #128	; 0x80
   18990:	popeq	{r4, r5, r6, pc}
   18994:	b	18954 <__assert_fail@plt+0x767c>
   18998:	pop	{r4, r5, r6, pc}
   1899c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   189a0:	ldr	ip, [r1]
   189a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189a8:	cmp	ip, #0
   189ac:	sub	sp, sp, #20
   189b0:	ldr	r6, [r0, #84]	; 0x54
   189b4:	ble	18a80 <__assert_fail@plt+0x77a8>
   189b8:	mov	r7, r2
   189bc:	str	r3, [sp, #8]
   189c0:	mov	r8, r0
   189c4:	str	r1, [sp, #4]
   189c8:	mov	r4, #0
   189cc:	mov	r2, #24
   189d0:	mov	r9, #1
   189d4:	b	189e0 <__assert_fail@plt+0x7708>
   189d8:	cmp	r4, ip
   189dc:	bge	18a80 <__assert_fail@plt+0x77a8>
   189e0:	ldr	r1, [r7]
   189e4:	ldr	r3, [r6]
   189e8:	ldr	r5, [r1, r4, lsl #2]
   189ec:	add	r4, r4, #1
   189f0:	add	r1, r3, r5, lsl #3
   189f4:	ldrb	r1, [r1, #4]
   189f8:	cmp	r1, #8
   189fc:	bne	189d8 <__assert_fail@plt+0x7700>
   18a00:	ldr	r3, [r3, r5, lsl #3]
   18a04:	cmp	r3, #31
   18a08:	bgt	189d8 <__assert_fail@plt+0x7700>
   18a0c:	ldr	r1, [r6, #80]	; 0x50
   18a10:	lsr	r3, r1, r3
   18a14:	tst	r3, #1
   18a18:	beq	189d8 <__assert_fail@plt+0x7700>
   18a1c:	ldr	sl, [r8, #124]	; 0x7c
   18a20:	ldr	r3, [r8, #128]	; 0x80
   18a24:	ldr	fp, [r8, #132]	; 0x84
   18a28:	cmp	r3, sl
   18a2c:	beq	18a94 <__assert_fail@plt+0x77bc>
   18a30:	mov	r1, r2
   18a34:	mov	r0, r9
   18a38:	str	r2, [sp, #12]
   18a3c:	bl	2949c <__assert_fail@plt+0x181c4>
   18a40:	ldr	r3, [r8, #124]	; 0x7c
   18a44:	ldr	r1, [r8, #132]	; 0x84
   18a48:	add	ip, r3, #1
   18a4c:	str	r0, [fp, sl, lsl #2]
   18a50:	ldr	r3, [r1, r3, lsl #2]
   18a54:	cmp	r3, #0
   18a58:	beq	18a8c <__assert_fail@plt+0x77b4>
   18a5c:	ldr	r2, [sp, #8]
   18a60:	str	r5, [r3, #4]
   18a64:	str	ip, [r8, #124]	; 0x7c
   18a68:	str	r2, [r3]
   18a6c:	ldr	r3, [sp, #4]
   18a70:	ldr	r2, [sp, #12]
   18a74:	ldr	ip, [r3]
   18a78:	cmp	r4, ip
   18a7c:	blt	189e0 <__assert_fail@plt+0x7708>
   18a80:	mov	r0, #0
   18a84:	add	sp, sp, #20
   18a88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a8c:	mov	r0, #12
   18a90:	b	18a84 <__assert_fail@plt+0x77ac>
   18a94:	mov	r0, fp
   18a98:	lsl	r1, sl, #3
   18a9c:	str	r2, [sp, #12]
   18aa0:	bl	29510 <__assert_fail@plt+0x18238>
   18aa4:	lsl	r3, sl, #1
   18aa8:	ldr	r2, [sp, #12]
   18aac:	subs	fp, r0, #0
   18ab0:	beq	18a8c <__assert_fail@plt+0x77b4>
   18ab4:	ldr	sl, [r8, #124]	; 0x7c
   18ab8:	str	fp, [r8, #132]	; 0x84
   18abc:	str	r3, [r8, #128]	; 0x80
   18ac0:	b	18a30 <__assert_fail@plt+0x7758>
   18ac4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18ac8:	mov	r6, r0
   18acc:	ldr	ip, [sp, #40]	; 0x28
   18ad0:	mov	r5, r1
   18ad4:	tst	ip, #4194304	; 0x400000
   18ad8:	mov	sl, r2
   18adc:	mov	r7, r3
   18ae0:	ldr	r9, [sp, #32]
   18ae4:	beq	18b04 <__assert_fail@plt+0x782c>
   18ae8:	ldr	r1, [pc, #2196]	; 19384 <__assert_fail@plt+0x80ac>
   18aec:	ldr	r0, [sp, #36]	; 0x24
   18af0:	bl	11008 <strcmp@plt>
   18af4:	cmp	r0, #0
   18af8:	bne	18be4 <__assert_fail@plt+0x790c>
   18afc:	ldr	r3, [pc, #2180]	; 19388 <__assert_fail@plt+0x80b0>
   18b00:	str	r3, [sp, #36]	; 0x24
   18b04:	ldr	r4, [r7]
   18b08:	ldr	r3, [r9]
   18b0c:	cmp	r3, r4
   18b10:	beq	18c14 <__assert_fail@plt+0x793c>
   18b14:	ldr	r8, [sl]
   18b18:	add	r3, r4, #1
   18b1c:	str	r3, [r7]
   18b20:	ldr	r0, [sp, #36]	; 0x24
   18b24:	bl	10fd8 <wctype@plt>
   18b28:	ldr	r1, [pc, #2140]	; 1938c <__assert_fail@plt+0x80b4>
   18b2c:	str	r0, [r8, r4, lsl #2]
   18b30:	ldr	r0, [sp, #36]	; 0x24
   18b34:	bl	11008 <strcmp@plt>
   18b38:	subs	r4, r0, #0
   18b3c:	beq	18b9c <__assert_fail@plt+0x78c4>
   18b40:	ldr	r1, [pc, #2120]	; 19390 <__assert_fail@plt+0x80b8>
   18b44:	ldr	r0, [sp, #36]	; 0x24
   18b48:	bl	11008 <strcmp@plt>
   18b4c:	subs	r4, r0, #0
   18b50:	bne	18c40 <__assert_fail@plt+0x7968>
   18b54:	cmp	r6, #0
   18b58:	bne	18df4 <__assert_fail@plt+0x7b1c>
   18b5c:	bl	111a0 <__ctype_b_loc@plt>
   18b60:	mov	ip, #1
   18b64:	ldr	r3, [r0]
   18b68:	sub	r3, r3, #2
   18b6c:	ldrh	r2, [r3, #2]!
   18b70:	asr	r1, r4, #5
   18b74:	and	r0, r4, #31
   18b78:	tst	r2, #2
   18b7c:	add	r4, r4, #1
   18b80:	ldrne	r2, [r5, r1, lsl #2]
   18b84:	orrne	r2, r2, ip, lsl r0
   18b88:	strne	r2, [r5, r1, lsl #2]
   18b8c:	cmp	r4, #256	; 0x100
   18b90:	bne	18b6c <__assert_fail@plt+0x7894>
   18b94:	mov	r0, #0
   18b98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18b9c:	cmp	r6, #0
   18ba0:	bne	18d60 <__assert_fail@plt+0x7a88>
   18ba4:	bl	111a0 <__ctype_b_loc@plt>
   18ba8:	mov	lr, #1
   18bac:	ldr	r3, [r0]
   18bb0:	sub	r3, r3, #2
   18bb4:	ldrh	r0, [r3, #2]!
   18bb8:	asr	r2, r4, #5
   18bbc:	and	ip, r4, #31
   18bc0:	tst	r0, #8
   18bc4:	add	r4, r4, #1
   18bc8:	ldrne	r1, [r5, r2, lsl #2]
   18bcc:	orrne	r1, r1, lr, lsl ip
   18bd0:	strne	r1, [r5, r2, lsl #2]
   18bd4:	cmp	r4, #256	; 0x100
   18bd8:	bne	18bb4 <__assert_fail@plt+0x78dc>
   18bdc:	mov	r0, #0
   18be0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18be4:	ldr	r0, [sp, #36]	; 0x24
   18be8:	ldr	r1, [pc, #1956]	; 19394 <__assert_fail@plt+0x80bc>
   18bec:	bl	11008 <strcmp@plt>
   18bf0:	ldr	r3, [pc, #1936]	; 19388 <__assert_fail@plt+0x80b0>
   18bf4:	ldr	r2, [sp, #36]	; 0x24
   18bf8:	ldr	r4, [r7]
   18bfc:	cmp	r0, #0
   18c00:	moveq	r2, r3
   18c04:	ldr	r3, [r9]
   18c08:	str	r2, [sp, #36]	; 0x24
   18c0c:	cmp	r3, r4
   18c10:	bne	18b14 <__assert_fail@plt+0x783c>
   18c14:	lsl	r4, r4, #1
   18c18:	add	r4, r4, #1
   18c1c:	ldr	r0, [sl]
   18c20:	lsl	r1, r4, #2
   18c24:	bl	29510 <__assert_fail@plt+0x18238>
   18c28:	subs	r8, r0, #0
   18c2c:	beq	18eec <__assert_fail@plt+0x7c14>
   18c30:	str	r8, [sl]
   18c34:	str	r4, [r9]
   18c38:	ldr	r4, [r7]
   18c3c:	b	18b18 <__assert_fail@plt+0x7840>
   18c40:	ldr	r1, [pc, #1868]	; 19394 <__assert_fail@plt+0x80bc>
   18c44:	ldr	r0, [sp, #36]	; 0x24
   18c48:	bl	11008 <strcmp@plt>
   18c4c:	subs	r4, r0, #0
   18c50:	beq	18cac <__assert_fail@plt+0x79d4>
   18c54:	ldr	r1, [pc, #1852]	; 19398 <__assert_fail@plt+0x80c0>
   18c58:	ldr	r0, [sp, #36]	; 0x24
   18c5c:	bl	11008 <strcmp@plt>
   18c60:	subs	r4, r0, #0
   18c64:	bne	18cf4 <__assert_fail@plt+0x7a1c>
   18c68:	cmp	r6, #0
   18c6c:	bne	18f4c <__assert_fail@plt+0x7c74>
   18c70:	bl	111a0 <__ctype_b_loc@plt>
   18c74:	mov	ip, #1
   18c78:	ldr	r3, [r0]
   18c7c:	sub	r3, r3, #2
   18c80:	ldrh	r2, [r3, #2]!
   18c84:	asr	r1, r4, #5
   18c88:	and	r0, r4, #31
   18c8c:	tst	r2, #8192	; 0x2000
   18c90:	add	r4, r4, #1
   18c94:	ldrne	r2, [r5, r1, lsl #2]
   18c98:	orrne	r2, r2, ip, lsl r0
   18c9c:	strne	r2, [r5, r1, lsl #2]
   18ca0:	cmp	r4, #256	; 0x100
   18ca4:	bne	18c80 <__assert_fail@plt+0x79a8>
   18ca8:	b	18b94 <__assert_fail@plt+0x78bc>
   18cac:	cmp	r6, #0
   18cb0:	bne	18e9c <__assert_fail@plt+0x7bc4>
   18cb4:	bl	111a0 <__ctype_b_loc@plt>
   18cb8:	mov	ip, #1
   18cbc:	ldr	r3, [r0]
   18cc0:	sub	r3, r3, #2
   18cc4:	ldrh	r2, [r3, #2]!
   18cc8:	asr	r1, r4, #5
   18ccc:	and	r0, r4, #31
   18cd0:	tst	r2, #512	; 0x200
   18cd4:	add	r4, r4, #1
   18cd8:	ldrne	r2, [r5, r1, lsl #2]
   18cdc:	orrne	r2, r2, ip, lsl r0
   18ce0:	strne	r2, [r5, r1, lsl #2]
   18ce4:	cmp	r4, #256	; 0x100
   18ce8:	bne	18cc4 <__assert_fail@plt+0x79ec>
   18cec:	mov	r0, #0
   18cf0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18cf4:	ldr	r1, [pc, #1676]	; 19388 <__assert_fail@plt+0x80b0>
   18cf8:	ldr	r0, [sp, #36]	; 0x24
   18cfc:	bl	11008 <strcmp@plt>
   18d00:	subs	r4, r0, #0
   18d04:	beq	18db0 <__assert_fail@plt+0x7ad8>
   18d08:	ldr	r1, [pc, #1676]	; 1939c <__assert_fail@plt+0x80c4>
   18d0c:	ldr	r0, [sp, #36]	; 0x24
   18d10:	bl	11008 <strcmp@plt>
   18d14:	subs	r4, r0, #0
   18d18:	bne	18e44 <__assert_fail@plt+0x7b6c>
   18d1c:	cmp	r6, #0
   18d20:	bne	1913c <__assert_fail@plt+0x7e64>
   18d24:	bl	111a0 <__ctype_b_loc@plt>
   18d28:	mov	ip, #1
   18d2c:	ldr	r3, [r0]
   18d30:	sub	r3, r3, #2
   18d34:	ldrh	r1, [r3, #2]!
   18d38:	asr	r2, r4, #5
   18d3c:	and	r0, r4, #31
   18d40:	tst	r1, #2048	; 0x800
   18d44:	add	r4, r4, #1
   18d48:	ldrne	r1, [r5, r2, lsl #2]
   18d4c:	orrne	r1, r1, ip, lsl r0
   18d50:	strne	r1, [r5, r2, lsl #2]
   18d54:	cmp	r4, #256	; 0x100
   18d58:	bne	18d34 <__assert_fail@plt+0x7a5c>
   18d5c:	b	18b94 <__assert_fail@plt+0x78bc>
   18d60:	bl	111a0 <__ctype_b_loc@plt>
   18d64:	mov	r4, #1
   18d68:	mov	r1, r6
   18d6c:	ldr	r3, [r0]
   18d70:	add	ip, r3, #508	; 0x1fc
   18d74:	add	ip, ip, #2
   18d78:	sub	r3, r3, #2
   18d7c:	ldrh	r2, [r3, #2]!
   18d80:	tst	r2, #8
   18d84:	beq	18da0 <__assert_fail@plt+0x7ac8>
   18d88:	ldrb	r2, [r1]
   18d8c:	and	lr, r2, #31
   18d90:	asr	r2, r2, #5
   18d94:	ldr	r0, [r5, r2, lsl #2]
   18d98:	orr	r0, r0, r4, lsl lr
   18d9c:	str	r0, [r5, r2, lsl #2]
   18da0:	cmp	ip, r3
   18da4:	add	r1, r1, #1
   18da8:	bne	18d7c <__assert_fail@plt+0x7aa4>
   18dac:	b	18b94 <__assert_fail@plt+0x78bc>
   18db0:	cmp	r6, #0
   18db4:	bne	18f9c <__assert_fail@plt+0x7cc4>
   18db8:	bl	111a0 <__ctype_b_loc@plt>
   18dbc:	mov	ip, #1
   18dc0:	ldr	r3, [r0]
   18dc4:	sub	r3, r3, #2
   18dc8:	ldrh	r2, [r3, #2]!
   18dcc:	asr	r1, r4, #5
   18dd0:	and	r0, r4, #31
   18dd4:	tst	r2, #1024	; 0x400
   18dd8:	add	r4, r4, #1
   18ddc:	ldrne	r2, [r5, r1, lsl #2]
   18de0:	orrne	r2, r2, ip, lsl r0
   18de4:	strne	r2, [r5, r1, lsl #2]
   18de8:	cmp	r4, #256	; 0x100
   18dec:	bne	18dc8 <__assert_fail@plt+0x7af0>
   18df0:	b	18b94 <__assert_fail@plt+0x78bc>
   18df4:	bl	111a0 <__ctype_b_loc@plt>
   18df8:	mov	r4, #1
   18dfc:	mov	r1, r6
   18e00:	ldr	r3, [r0]
   18e04:	add	ip, r3, #508	; 0x1fc
   18e08:	add	ip, ip, #2
   18e0c:	sub	r3, r3, #2
   18e10:	ldrh	r2, [r3, #2]!
   18e14:	tst	r2, #2
   18e18:	beq	18e34 <__assert_fail@plt+0x7b5c>
   18e1c:	ldrb	r2, [r1]
   18e20:	and	lr, r2, #31
   18e24:	asr	r2, r2, #5
   18e28:	ldr	r0, [r5, r2, lsl #2]
   18e2c:	orr	r0, r0, r4, lsl lr
   18e30:	str	r0, [r5, r2, lsl #2]
   18e34:	cmp	ip, r3
   18e38:	add	r1, r1, #1
   18e3c:	bne	18e10 <__assert_fail@plt+0x7b38>
   18e40:	b	18b94 <__assert_fail@plt+0x78bc>
   18e44:	ldr	r1, [pc, #1364]	; 193a0 <__assert_fail@plt+0x80c8>
   18e48:	ldr	r0, [sp, #36]	; 0x24
   18e4c:	bl	11008 <strcmp@plt>
   18e50:	subs	r4, r0, #0
   18e54:	bne	18ef4 <__assert_fail@plt+0x7c1c>
   18e58:	cmp	r6, #0
   18e5c:	bne	1918c <__assert_fail@plt+0x7eb4>
   18e60:	bl	111a0 <__ctype_b_loc@plt>
   18e64:	mov	ip, #1
   18e68:	ldr	r3, [r0]
   18e6c:	sub	r3, r3, #2
   18e70:	ldrh	r2, [r3, #2]!
   18e74:	asr	r1, r4, #5
   18e78:	and	r0, r4, #31
   18e7c:	tst	r2, #16384	; 0x4000
   18e80:	add	r4, r4, #1
   18e84:	ldrne	r2, [r5, r1, lsl #2]
   18e88:	orrne	r2, r2, ip, lsl r0
   18e8c:	strne	r2, [r5, r1, lsl #2]
   18e90:	cmp	r4, #256	; 0x100
   18e94:	bne	18e70 <__assert_fail@plt+0x7b98>
   18e98:	b	18b94 <__assert_fail@plt+0x78bc>
   18e9c:	bl	111a0 <__ctype_b_loc@plt>
   18ea0:	mov	r4, #1
   18ea4:	mov	r1, r6
   18ea8:	ldr	r3, [r0]
   18eac:	add	ip, r3, #508	; 0x1fc
   18eb0:	add	ip, ip, #2
   18eb4:	sub	r3, r3, #2
   18eb8:	ldrh	r2, [r3, #2]!
   18ebc:	tst	r2, #512	; 0x200
   18ec0:	beq	18edc <__assert_fail@plt+0x7c04>
   18ec4:	ldrb	r2, [r1]
   18ec8:	and	lr, r2, #31
   18ecc:	asr	r2, r2, #5
   18ed0:	ldr	r0, [r5, r2, lsl #2]
   18ed4:	orr	r0, r0, r4, lsl lr
   18ed8:	str	r0, [r5, r2, lsl #2]
   18edc:	cmp	ip, r3
   18ee0:	add	r1, r1, #1
   18ee4:	bne	18eb8 <__assert_fail@plt+0x7be0>
   18ee8:	b	18b94 <__assert_fail@plt+0x78bc>
   18eec:	mov	r0, #12
   18ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18ef4:	ldr	r1, [pc, #1160]	; 19384 <__assert_fail@plt+0x80ac>
   18ef8:	ldr	r0, [sp, #36]	; 0x24
   18efc:	bl	11008 <strcmp@plt>
   18f00:	subs	r4, r0, #0
   18f04:	bne	18fec <__assert_fail@plt+0x7d14>
   18f08:	cmp	r6, #0
   18f0c:	bne	19044 <__assert_fail@plt+0x7d6c>
   18f10:	bl	111a0 <__ctype_b_loc@plt>
   18f14:	mov	ip, #1
   18f18:	ldr	r3, [r0]
   18f1c:	sub	r3, r3, #2
   18f20:	ldrh	r2, [r3, #2]!
   18f24:	asr	r1, r4, #5
   18f28:	and	r0, r4, #31
   18f2c:	tst	r2, #256	; 0x100
   18f30:	add	r4, r4, #1
   18f34:	ldrne	r2, [r5, r1, lsl #2]
   18f38:	orrne	r2, r2, ip, lsl r0
   18f3c:	strne	r2, [r5, r1, lsl #2]
   18f40:	cmp	r4, #256	; 0x100
   18f44:	bne	18f20 <__assert_fail@plt+0x7c48>
   18f48:	b	18b94 <__assert_fail@plt+0x78bc>
   18f4c:	bl	111a0 <__ctype_b_loc@plt>
   18f50:	mov	r4, #1
   18f54:	mov	r1, r6
   18f58:	ldr	r3, [r0]
   18f5c:	add	ip, r3, #508	; 0x1fc
   18f60:	add	ip, ip, #2
   18f64:	sub	r3, r3, #2
   18f68:	ldrh	r2, [r3, #2]!
   18f6c:	tst	r2, #8192	; 0x2000
   18f70:	beq	18f8c <__assert_fail@plt+0x7cb4>
   18f74:	ldrb	r2, [r1]
   18f78:	and	lr, r2, #31
   18f7c:	asr	r2, r2, #5
   18f80:	ldr	r0, [r5, r2, lsl #2]
   18f84:	orr	r0, r0, r4, lsl lr
   18f88:	str	r0, [r5, r2, lsl #2]
   18f8c:	cmp	ip, r3
   18f90:	add	r1, r1, #1
   18f94:	bne	18f68 <__assert_fail@plt+0x7c90>
   18f98:	b	18b94 <__assert_fail@plt+0x78bc>
   18f9c:	bl	111a0 <__ctype_b_loc@plt>
   18fa0:	mov	r4, #1
   18fa4:	mov	r1, r6
   18fa8:	ldr	r3, [r0]
   18fac:	add	ip, r3, #508	; 0x1fc
   18fb0:	add	ip, ip, #2
   18fb4:	sub	r3, r3, #2
   18fb8:	ldrh	r2, [r3, #2]!
   18fbc:	tst	r2, #1024	; 0x400
   18fc0:	beq	18fdc <__assert_fail@plt+0x7d04>
   18fc4:	ldrb	r2, [r1]
   18fc8:	and	lr, r2, #31
   18fcc:	asr	r2, r2, #5
   18fd0:	ldr	r0, [r5, r2, lsl #2]
   18fd4:	orr	r0, r0, r4, lsl lr
   18fd8:	str	r0, [r5, r2, lsl #2]
   18fdc:	cmp	ip, r3
   18fe0:	add	r1, r1, #1
   18fe4:	bne	18fb8 <__assert_fail@plt+0x7ce0>
   18fe8:	b	18b94 <__assert_fail@plt+0x78bc>
   18fec:	ldr	r1, [pc, #944]	; 193a4 <__assert_fail@plt+0x80cc>
   18ff0:	ldr	r0, [sp, #36]	; 0x24
   18ff4:	bl	11008 <strcmp@plt>
   18ff8:	subs	r4, r0, #0
   18ffc:	bne	190e4 <__assert_fail@plt+0x7e0c>
   19000:	cmp	r6, #0
   19004:	bne	19094 <__assert_fail@plt+0x7dbc>
   19008:	bl	111a0 <__ctype_b_loc@plt>
   1900c:	mov	ip, #1
   19010:	ldr	r3, [r0]
   19014:	sub	r3, r3, #2
   19018:	ldrh	r2, [r3, #2]!
   1901c:	asr	r1, r4, #5
   19020:	and	r0, r4, #31
   19024:	tst	r2, #1
   19028:	add	r4, r4, #1
   1902c:	ldrne	r2, [r5, r1, lsl #2]
   19030:	orrne	r2, r2, ip, lsl r0
   19034:	strne	r2, [r5, r1, lsl #2]
   19038:	cmp	r4, #256	; 0x100
   1903c:	bne	19018 <__assert_fail@plt+0x7d40>
   19040:	b	18b94 <__assert_fail@plt+0x78bc>
   19044:	bl	111a0 <__ctype_b_loc@plt>
   19048:	mov	r1, r6
   1904c:	mov	lr, #1
   19050:	ldr	r3, [r0]
   19054:	add	r0, r3, #508	; 0x1fc
   19058:	add	r0, r0, #2
   1905c:	sub	r3, r3, #2
   19060:	ldrh	r2, [r3, #2]!
   19064:	tst	r2, #256	; 0x100
   19068:	beq	19084 <__assert_fail@plt+0x7dac>
   1906c:	ldrb	r2, [r1]
   19070:	and	r4, r2, #31
   19074:	asr	r2, r2, #5
   19078:	ldr	ip, [r5, r2, lsl #2]
   1907c:	orr	ip, ip, lr, lsl r4
   19080:	str	ip, [r5, r2, lsl #2]
   19084:	cmp	r0, r3
   19088:	add	r1, r1, #1
   1908c:	bne	19060 <__assert_fail@plt+0x7d88>
   19090:	b	18b94 <__assert_fail@plt+0x78bc>
   19094:	bl	111a0 <__ctype_b_loc@plt>
   19098:	mov	r1, r6
   1909c:	mov	lr, #1
   190a0:	ldr	r3, [r0]
   190a4:	add	r0, r3, #508	; 0x1fc
   190a8:	add	r0, r0, #2
   190ac:	sub	r3, r3, #2
   190b0:	ldrh	r2, [r3, #2]!
   190b4:	tst	r2, #1
   190b8:	beq	190d4 <__assert_fail@plt+0x7dfc>
   190bc:	ldrb	r2, [r1]
   190c0:	and	r4, r2, #31
   190c4:	asr	r2, r2, #5
   190c8:	ldr	ip, [r5, r2, lsl #2]
   190cc:	orr	ip, ip, lr, lsl r4
   190d0:	str	ip, [r5, r2, lsl #2]
   190d4:	cmp	r0, r3
   190d8:	add	r1, r1, #1
   190dc:	bne	190b0 <__assert_fail@plt+0x7dd8>
   190e0:	b	18b94 <__assert_fail@plt+0x78bc>
   190e4:	ldr	r1, [pc, #700]	; 193a8 <__assert_fail@plt+0x80d0>
   190e8:	ldr	r0, [sp, #36]	; 0x24
   190ec:	bl	11008 <strcmp@plt>
   190f0:	subs	r4, r0, #0
   190f4:	bne	1922c <__assert_fail@plt+0x7f54>
   190f8:	cmp	r6, #0
   190fc:	bne	191dc <__assert_fail@plt+0x7f04>
   19100:	bl	111a0 <__ctype_b_loc@plt>
   19104:	mov	ip, #1
   19108:	ldr	r3, [r0]
   1910c:	sub	r3, r3, #2
   19110:	ldrsh	r2, [r3, #2]!
   19114:	cmp	r2, #0
   19118:	asrlt	r0, r4, #5
   1911c:	andlt	r1, r4, #31
   19120:	ldrlt	r2, [r5, r0, lsl #2]
   19124:	add	r4, r4, #1
   19128:	orrlt	r2, r2, ip, lsl r1
   1912c:	strlt	r2, [r5, r0, lsl #2]
   19130:	cmp	r4, #256	; 0x100
   19134:	bne	19110 <__assert_fail@plt+0x7e38>
   19138:	b	18b94 <__assert_fail@plt+0x78bc>
   1913c:	bl	111a0 <__ctype_b_loc@plt>
   19140:	mov	r1, r6
   19144:	mov	lr, #1
   19148:	ldr	r3, [r0]
   1914c:	add	r2, r3, #508	; 0x1fc
   19150:	add	r2, r2, #2
   19154:	sub	r3, r3, #2
   19158:	ldrh	r0, [r3, #2]!
   1915c:	tst	r0, #2048	; 0x800
   19160:	beq	1917c <__assert_fail@plt+0x7ea4>
   19164:	ldrb	r0, [r1]
   19168:	and	r4, r0, #31
   1916c:	asr	r0, r0, #5
   19170:	ldr	ip, [r5, r0, lsl #2]
   19174:	orr	ip, ip, lr, lsl r4
   19178:	str	ip, [r5, r0, lsl #2]
   1917c:	cmp	r2, r3
   19180:	add	r1, r1, #1
   19184:	bne	19158 <__assert_fail@plt+0x7e80>
   19188:	b	18b94 <__assert_fail@plt+0x78bc>
   1918c:	bl	111a0 <__ctype_b_loc@plt>
   19190:	mov	r1, r6
   19194:	mov	lr, #1
   19198:	ldr	r3, [r0]
   1919c:	add	r0, r3, #508	; 0x1fc
   191a0:	add	r0, r0, #2
   191a4:	sub	r3, r3, #2
   191a8:	ldrh	r2, [r3, #2]!
   191ac:	tst	r2, #16384	; 0x4000
   191b0:	beq	191cc <__assert_fail@plt+0x7ef4>
   191b4:	ldrb	r2, [r1]
   191b8:	and	r4, r2, #31
   191bc:	asr	r2, r2, #5
   191c0:	ldr	ip, [r5, r2, lsl #2]
   191c4:	orr	ip, ip, lr, lsl r4
   191c8:	str	ip, [r5, r2, lsl #2]
   191cc:	cmp	r3, r0
   191d0:	add	r1, r1, #1
   191d4:	bne	191a8 <__assert_fail@plt+0x7ed0>
   191d8:	b	18b94 <__assert_fail@plt+0x78bc>
   191dc:	bl	111a0 <__ctype_b_loc@plt>
   191e0:	mov	r1, r6
   191e4:	mov	lr, #1
   191e8:	ldr	r3, [r0]
   191ec:	add	r0, r3, #508	; 0x1fc
   191f0:	add	r0, r0, #2
   191f4:	sub	r3, r3, #2
   191f8:	ldrsh	r2, [r3, #2]!
   191fc:	cmp	r2, #0
   19200:	bge	1921c <__assert_fail@plt+0x7f44>
   19204:	ldrb	r2, [r1]
   19208:	and	r4, r2, #31
   1920c:	asr	r2, r2, #5
   19210:	ldr	ip, [r5, r2, lsl #2]
   19214:	orr	ip, ip, lr, lsl r4
   19218:	str	ip, [r5, r2, lsl #2]
   1921c:	cmp	r0, r3
   19220:	add	r1, r1, #1
   19224:	bne	191f8 <__assert_fail@plt+0x7f20>
   19228:	b	18b94 <__assert_fail@plt+0x78bc>
   1922c:	ldr	r1, [pc, #376]	; 193ac <__assert_fail@plt+0x80d4>
   19230:	ldr	r0, [sp, #36]	; 0x24
   19234:	bl	11008 <strcmp@plt>
   19238:	subs	r4, r0, #0
   1923c:	bne	19284 <__assert_fail@plt+0x7fac>
   19240:	cmp	r6, #0
   19244:	bne	192a0 <__assert_fail@plt+0x7fc8>
   19248:	bl	111a0 <__ctype_b_loc@plt>
   1924c:	mov	ip, #1
   19250:	ldr	r3, [r0]
   19254:	sub	r3, r3, #2
   19258:	ldrh	r2, [r3, #2]!
   1925c:	asr	r1, r4, #5
   19260:	and	r0, r4, #31
   19264:	tst	r2, #4
   19268:	add	r4, r4, #1
   1926c:	ldrne	r2, [r5, r1, lsl #2]
   19270:	orrne	r2, r2, ip, lsl r0
   19274:	strne	r2, [r5, r1, lsl #2]
   19278:	cmp	r4, #256	; 0x100
   1927c:	bne	19258 <__assert_fail@plt+0x7f80>
   19280:	b	18b94 <__assert_fail@plt+0x78bc>
   19284:	ldr	r1, [pc, #292]	; 193b0 <__assert_fail@plt+0x80d8>
   19288:	ldr	r0, [sp, #36]	; 0x24
   1928c:	bl	11008 <strcmp@plt>
   19290:	subs	r4, r0, #0
   19294:	beq	192f0 <__assert_fail@plt+0x8018>
   19298:	mov	r0, #4
   1929c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   192a0:	bl	111a0 <__ctype_b_loc@plt>
   192a4:	mov	r1, r6
   192a8:	mov	lr, #1
   192ac:	ldr	r3, [r0]
   192b0:	add	r0, r3, #508	; 0x1fc
   192b4:	add	r0, r0, #2
   192b8:	sub	r3, r3, #2
   192bc:	ldrh	r2, [r3, #2]!
   192c0:	tst	r2, #4
   192c4:	beq	192e0 <__assert_fail@plt+0x8008>
   192c8:	ldrb	r2, [r1]
   192cc:	and	r4, r2, #31
   192d0:	asr	r2, r2, #5
   192d4:	ldr	ip, [r5, r2, lsl #2]
   192d8:	orr	ip, ip, lr, lsl r4
   192dc:	str	ip, [r5, r2, lsl #2]
   192e0:	cmp	r0, r3
   192e4:	add	r1, r1, #1
   192e8:	bne	192bc <__assert_fail@plt+0x7fe4>
   192ec:	b	18b94 <__assert_fail@plt+0x78bc>
   192f0:	cmp	r6, #0
   192f4:	bne	19334 <__assert_fail@plt+0x805c>
   192f8:	bl	111a0 <__ctype_b_loc@plt>
   192fc:	mov	ip, #1
   19300:	ldr	r3, [r0]
   19304:	sub	r3, r3, #2
   19308:	ldrh	r2, [r3, #2]!
   1930c:	asr	r1, r4, #5
   19310:	and	r0, r4, #31
   19314:	tst	r2, #4096	; 0x1000
   19318:	add	r4, r4, #1
   1931c:	ldrne	r2, [r5, r1, lsl #2]
   19320:	orrne	r2, r2, ip, lsl r0
   19324:	strne	r2, [r5, r1, lsl #2]
   19328:	cmp	r4, #256	; 0x100
   1932c:	bne	19308 <__assert_fail@plt+0x8030>
   19330:	b	18b94 <__assert_fail@plt+0x78bc>
   19334:	bl	111a0 <__ctype_b_loc@plt>
   19338:	mov	r1, r6
   1933c:	mov	lr, #1
   19340:	ldr	r3, [r0]
   19344:	add	r0, r3, #508	; 0x1fc
   19348:	add	r0, r0, #2
   1934c:	sub	r3, r3, #2
   19350:	ldrh	r2, [r3, #2]!
   19354:	tst	r2, #4096	; 0x1000
   19358:	beq	19374 <__assert_fail@plt+0x809c>
   1935c:	ldrb	r2, [r1]
   19360:	and	r4, r2, #31
   19364:	asr	r2, r2, #5
   19368:	ldr	ip, [r5, r2, lsl #2]
   1936c:	orr	ip, ip, lr, lsl r4
   19370:	str	ip, [r5, r2, lsl #2]
   19374:	cmp	r3, r0
   19378:	add	r1, r1, #1
   1937c:	bne	19350 <__assert_fail@plt+0x8078>
   19380:	b	18b94 <__assert_fail@plt+0x78bc>
   19384:	andeq	sl, r2, r4, lsr pc
   19388:	andeq	sl, r2, ip, lsr #30
   1938c:	andeq	sl, r2, r4, asr #30
   19390:	andeq	sl, r2, ip, asr #30
   19394:	andeq	sl, r2, ip, lsr pc
   19398:	andeq	sl, r2, r4, asr pc
   1939c:	andeq	sl, r2, ip, asr pc
   193a0:	andeq	sl, r2, r4, ror #30
   193a4:	andeq	sl, r2, ip, ror #30
   193a8:	andeq	sl, r2, r4, ror pc
   193ac:	andeq	sl, r2, ip, ror pc
   193b0:	andeq	sl, r2, r4, lsl #31
   193b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193b8:	sub	sp, sp, #308	; 0x134
   193bc:	ldr	r9, [r0]
   193c0:	ldr	ip, [r9, #92]	; 0x5c
   193c4:	cmp	ip, #1
   193c8:	movne	ip, #0
   193cc:	ldreq	ip, [r0, #12]
   193d0:	lsreq	ip, ip, #22
   193d4:	andeq	ip, ip, #1
   193d8:	str	ip, [sp, #20]
   193dc:	ldr	ip, [r1]
   193e0:	cmp	ip, #0
   193e4:	ble	19788 <__assert_fail@plt+0x84b0>
   193e8:	mov	r6, r3
   193ec:	mov	r3, #0
   193f0:	str	r2, [sp, #16]
   193f4:	str	r1, [sp, #24]
   193f8:	str	r0, [sp, #28]
   193fc:	str	r3, [sp, #4]
   19400:	mov	r5, #1
   19404:	b	19440 <__assert_fail@plt+0x8168>
   19408:	cmp	r4, #3
   1940c:	beq	19580 <__assert_fail@plt+0x82a8>
   19410:	cmp	r4, #6
   19414:	beq	19634 <__assert_fail@plt+0x835c>
   19418:	and	r3, r4, #253	; 0xfd
   1941c:	cmp	r3, #5
   19420:	beq	197c0 <__assert_fail@plt+0x84e8>
   19424:	cmp	r4, #2
   19428:	beq	19768 <__assert_fail@plt+0x8490>
   1942c:	ldr	r3, [sp, #4]
   19430:	add	r3, r3, #1
   19434:	cmp	r3, ip
   19438:	str	r3, [sp, #4]
   1943c:	bge	19788 <__assert_fail@plt+0x84b0>
   19440:	ldr	r3, [sp, #16]
   19444:	ldr	r1, [sp, #4]
   19448:	ldr	r2, [r3]
   1944c:	ldr	r3, [r9]
   19450:	ldr	r7, [r2, r1, lsl #2]
   19454:	lsl	r2, r7, #3
   19458:	str	r2, [sp, #8]
   1945c:	add	r2, r3, r2
   19460:	ldrb	r4, [r2, #4]
   19464:	cmp	r4, #1
   19468:	bne	19408 <__assert_fail@plt+0x8130>
   1946c:	ldrb	r3, [r3, r7, lsl #3]
   19470:	ldr	r2, [sp, #20]
   19474:	cmp	r2, #0
   19478:	strb	r4, [r6, r3]
   1947c:	str	r3, [sp, #12]
   19480:	beq	19498 <__assert_fail@plt+0x81c0>
   19484:	bl	11170 <__ctype_tolower_loc@plt>
   19488:	ldr	r3, [sp, #12]
   1948c:	ldr	r2, [r0]
   19490:	ldr	r3, [r2, r3, lsl #2]
   19494:	strb	r4, [r6, r3]
   19498:	ldr	r3, [sp, #28]
   1949c:	ldr	r3, [r3, #12]
   194a0:	tst	r3, #4194304	; 0x400000
   194a4:	beq	19574 <__assert_fail@plt+0x829c>
   194a8:	ldr	r3, [r9, #92]	; 0x5c
   194ac:	cmp	r3, #1
   194b0:	ble	19574 <__assert_fail@plt+0x829c>
   194b4:	ldr	r3, [r9]
   194b8:	add	r1, r7, #1
   194bc:	ldrb	r2, [r3, r7, lsl #3]
   194c0:	strb	r2, [sp, #48]	; 0x30
   194c4:	ldr	r2, [r9, #8]
   194c8:	cmp	r2, r1
   194cc:	bls	197b8 <__assert_fail@plt+0x84e0>
   194d0:	ldr	r0, [sp, #8]
   194d4:	ldr	ip, [pc, #772]	; 197e0 <__assert_fail@plt+0x8508>
   194d8:	add	r2, r0, #8
   194dc:	add	r3, r3, r2
   194e0:	ldr	r2, [r3, #4]
   194e4:	bic	r2, r2, #-16777216	; 0xff000000
   194e8:	bic	r2, r2, #14614528	; 0xdf0000
   194ec:	bic	r2, r2, #65280	; 0xff00
   194f0:	cmp	r2, ip
   194f4:	bne	197b8 <__assert_fail@plt+0x84e0>
   194f8:	add	r8, r0, #16
   194fc:	add	r4, sp, #49	; 0x31
   19500:	b	1952c <__assert_fail@plt+0x8254>
   19504:	ldr	r3, [r9]
   19508:	ldr	r0, [pc, #720]	; 197e0 <__assert_fail@plt+0x8508>
   1950c:	add	r3, r3, r8
   19510:	add	r8, r8, #8
   19514:	ldr	r2, [r3, #4]
   19518:	bic	r2, r2, #-16777216	; 0xff000000
   1951c:	bic	r2, r2, #14614528	; 0xdf0000
   19520:	bic	r2, r2, #65280	; 0xff00
   19524:	cmp	r2, r0
   19528:	bne	19544 <__assert_fail@plt+0x826c>
   1952c:	ldrb	r3, [r3]
   19530:	add	r1, r1, #1
   19534:	strb	r3, [r4], #1
   19538:	ldr	r3, [r9, #8]
   1953c:	cmp	r1, r3
   19540:	bcc	19504 <__assert_fail@plt+0x822c>
   19544:	add	r3, sp, #48	; 0x30
   19548:	sub	r4, r4, r3
   1954c:	mov	ip, #0
   19550:	mov	r2, r4
   19554:	add	r3, sp, #40	; 0x28
   19558:	add	r1, sp, #48	; 0x30
   1955c:	add	r0, sp, #36	; 0x24
   19560:	str	ip, [sp, #40]	; 0x28
   19564:	str	ip, [sp, #44]	; 0x2c
   19568:	bl	2973c <__assert_fail@plt+0x18464>
   1956c:	cmp	r4, r0
   19570:	beq	19790 <__assert_fail@plt+0x84b8>
   19574:	ldr	r3, [sp, #24]
   19578:	ldr	ip, [r3]
   1957c:	b	1942c <__assert_fail@plt+0x8154>
   19580:	ldr	r8, [sp, #20]
   19584:	mov	r7, #0
   19588:	str	r9, [sp, #12]
   1958c:	ldr	r2, [sp, #8]
   19590:	cmp	r8, #0
   19594:	ldr	r3, [r3, r2]
   19598:	ldr	r9, [r3, r7]
   1959c:	bne	195d8 <__assert_fail@plt+0x8300>
   195a0:	add	r0, r6, r7, lsl #3
   195a4:	mov	r3, r8
   195a8:	lsr	r2, r9, r3
   195ac:	tst	r2, #1
   195b0:	strbne	r5, [r0, r3]
   195b4:	add	r3, r3, #1
   195b8:	cmp	r3, #32
   195bc:	bne	195a8 <__assert_fail@plt+0x82d0>
   195c0:	add	r7, r7, #4
   195c4:	cmp	r7, #32
   195c8:	beq	19624 <__assert_fail@plt+0x834c>
   195cc:	ldr	r3, [sp, #12]
   195d0:	ldr	r3, [r3]
   195d4:	b	1958c <__assert_fail@plt+0x82b4>
   195d8:	add	sl, r6, r7, lsl #3
   195dc:	lsl	fp, r7, #5
   195e0:	mov	r4, #0
   195e4:	lsr	r3, r9, r4
   195e8:	tst	r3, #1
   195ec:	add	r4, r4, #1
   195f0:	beq	19608 <__assert_fail@plt+0x8330>
   195f4:	strb	r5, [sl]
   195f8:	bl	11170 <__ctype_tolower_loc@plt>
   195fc:	ldr	r3, [r0]
   19600:	ldr	r3, [r3, fp]
   19604:	strb	r5, [r6, r3]
   19608:	cmp	r4, #32
   1960c:	add	sl, sl, #1
   19610:	add	fp, fp, #4
   19614:	bne	195e4 <__assert_fail@plt+0x830c>
   19618:	add	r7, r7, #4
   1961c:	cmp	r7, #32
   19620:	bne	195cc <__assert_fail@plt+0x82f4>
   19624:	ldr	r3, [sp, #24]
   19628:	ldr	r9, [sp, #12]
   1962c:	ldr	ip, [r3]
   19630:	b	1942c <__assert_fail@plt+0x8154>
   19634:	ldr	r3, [r9, #92]	; 0x5c
   19638:	ldr	r7, [r2]
   1963c:	cmp	r3, #1
   19640:	ble	19668 <__assert_fail@plt+0x8390>
   19644:	ldr	r3, [r7, #36]	; 0x24
   19648:	cmp	r3, #0
   1964c:	bne	19720 <__assert_fail@plt+0x8448>
   19650:	ldrb	r3, [r7, #16]
   19654:	tst	r3, #1
   19658:	bne	19720 <__assert_fail@plt+0x8448>
   1965c:	ldr	r3, [r7, #32]
   19660:	cmp	r3, #0
   19664:	bne	19720 <__assert_fail@plt+0x8448>
   19668:	ldr	r3, [r7, #20]
   1966c:	cmp	r3, #0
   19670:	movgt	r4, #0
   19674:	ldrgt	r8, [sp, #28]
   19678:	ble	1942c <__assert_fail@plt+0x8154>
   1967c:	mov	r3, #0
   19680:	str	r3, [sp, #40]	; 0x28
   19684:	str	r3, [sp, #44]	; 0x2c
   19688:	ldr	r3, [r7]
   1968c:	add	r2, sp, #40	; 0x28
   19690:	add	r0, sp, #48	; 0x30
   19694:	ldr	r1, [r3, r4, lsl #2]
   19698:	bl	10ff0 <wcrtomb@plt>
   1969c:	lsl	sl, r4, #2
   196a0:	add	r4, r4, #1
   196a4:	cmn	r0, #1
   196a8:	beq	196d0 <__assert_fail@plt+0x83f8>
   196ac:	ldrb	fp, [sp, #48]	; 0x30
   196b0:	ldr	r3, [sp, #20]
   196b4:	cmp	r3, #0
   196b8:	strb	r5, [r6, fp]
   196bc:	beq	196d0 <__assert_fail@plt+0x83f8>
   196c0:	bl	11170 <__ctype_tolower_loc@plt>
   196c4:	ldr	r3, [r0]
   196c8:	ldr	r3, [r3, fp, lsl #2]
   196cc:	strb	r5, [r6, r3]
   196d0:	ldr	r3, [r8, #12]
   196d4:	tst	r3, #4194304	; 0x400000
   196d8:	beq	19710 <__assert_fail@plt+0x8438>
   196dc:	ldr	r3, [r9, #92]	; 0x5c
   196e0:	cmp	r3, #1
   196e4:	ble	19710 <__assert_fail@plt+0x8438>
   196e8:	ldr	r3, [r7]
   196ec:	ldr	r0, [r3, sl]
   196f0:	bl	11080 <towlower@plt>
   196f4:	add	r2, sp, #40	; 0x28
   196f8:	mov	r1, r0
   196fc:	add	r0, sp, #48	; 0x30
   19700:	bl	10ff0 <wcrtomb@plt>
   19704:	cmn	r0, #1
   19708:	ldrbne	r3, [sp, #48]	; 0x30
   1970c:	strbne	r5, [r6, r3]
   19710:	ldr	r3, [r7, #20]
   19714:	cmp	r4, r3
   19718:	blt	1967c <__assert_fail@plt+0x83a4>
   1971c:	b	19574 <__assert_fail@plt+0x829c>
   19720:	mov	r3, #0
   19724:	strb	r3, [sp, #40]	; 0x28
   19728:	mov	r0, #0
   1972c:	add	r3, sp, #48	; 0x30
   19730:	mov	r2, r5
   19734:	add	r1, sp, #40	; 0x28
   19738:	str	r0, [sp, #48]	; 0x30
   1973c:	str	r0, [sp, #52]	; 0x34
   19740:	bl	2973c <__assert_fail@plt+0x18464>
   19744:	ldrb	r3, [sp, #40]	; 0x28
   19748:	cmn	r0, #2
   1974c:	strbeq	r5, [r6, r3]
   19750:	add	r3, r3, #1
   19754:	uxtb	r3, r3
   19758:	cmp	r3, #0
   1975c:	strb	r3, [sp, #40]	; 0x28
   19760:	bne	19728 <__assert_fail@plt+0x8450>
   19764:	b	19574 <__assert_fail@plt+0x829c>
   19768:	mov	r0, r6
   1976c:	mov	r2, #256	; 0x100
   19770:	mov	r1, #1
   19774:	bl	111f4 <memset@plt>
   19778:	ldr	r2, [sp, #28]
   1977c:	ldrb	r3, [r2, #28]
   19780:	orr	r3, r3, #1
   19784:	strb	r3, [r2, #28]
   19788:	add	sp, sp, #308	; 0x134
   1978c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19790:	ldr	r0, [sp, #36]	; 0x24
   19794:	bl	11080 <towlower@plt>
   19798:	add	r2, sp, #40	; 0x28
   1979c:	mov	r1, r0
   197a0:	add	r0, sp, #48	; 0x30
   197a4:	bl	10ff0 <wcrtomb@plt>
   197a8:	cmn	r0, #1
   197ac:	ldrbne	r3, [sp, #48]	; 0x30
   197b0:	strbne	r5, [r6, r3]
   197b4:	b	19574 <__assert_fail@plt+0x829c>
   197b8:	add	r4, sp, #49	; 0x31
   197bc:	b	19544 <__assert_fail@plt+0x826c>
   197c0:	mov	r0, r6
   197c4:	mov	r2, #256	; 0x100
   197c8:	mov	r1, #1
   197cc:	bl	111f4 <memset@plt>
   197d0:	cmp	r4, #2
   197d4:	beq	19778 <__assert_fail@plt+0x84a0>
   197d8:	add	sp, sp, #308	; 0x134
   197dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197e0:	eoreq	r0, r0, r1
   197e4:	add	ip, r0, r2, lsl #3
   197e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   197ec:	ldrb	r6, [ip, #4]
   197f0:	ldr	r7, [sp, #32]
   197f4:	cmp	r6, #7
   197f8:	beq	198d8 <__assert_fail@plt+0x8600>
   197fc:	ldr	ip, [r3, #80]	; 0x50
   19800:	cmp	ip, #1
   19804:	beq	198e8 <__assert_fail@plt+0x8610>
   19808:	ldr	r5, [r3, #28]
   1980c:	add	lr, r7, #1
   19810:	cmp	r5, lr
   19814:	ble	198e8 <__assert_fail@plt+0x8610>
   19818:	ldr	r8, [r3, #8]
   1981c:	add	ip, r8, lr, lsl #2
   19820:	ldr	lr, [r8, lr, lsl #2]
   19824:	cmn	lr, #1
   19828:	subeq	r5, r5, r7
   1982c:	moveq	r4, #1
   19830:	beq	19844 <__assert_fail@plt+0x856c>
   19834:	b	198e8 <__assert_fail@plt+0x8610>
   19838:	ldr	lr, [ip, #4]!
   1983c:	cmn	lr, #1
   19840:	bne	19850 <__assert_fail@plt+0x8578>
   19844:	add	r4, r4, #1
   19848:	cmp	r4, r5
   1984c:	bne	19838 <__assert_fail@plt+0x8560>
   19850:	cmp	r6, #5
   19854:	beq	198f4 <__assert_fail@plt+0x861c>
   19858:	cmp	r4, #1
   1985c:	sub	r6, r6, #6
   19860:	clz	r6, r6
   19864:	lsr	r6, r6, #5
   19868:	moveq	r6, #0
   1986c:	cmp	r6, #0
   19870:	beq	198e8 <__assert_fail@plt+0x8610>
   19874:	ldr	r9, [r0, r2, lsl #3]
   19878:	ldr	ip, [r9, #32]
   1987c:	cmp	ip, #0
   19880:	beq	19930 <__assert_fail@plt+0x8658>
   19884:	ldr	r0, [r9, #20]
   19888:	cmp	r0, #0
   1988c:	ldr	r5, [r8, r7, lsl #2]
   19890:	ble	198c4 <__assert_fail@plt+0x85ec>
   19894:	ldr	r2, [r9]
   19898:	ldr	r3, [r2]
   1989c:	cmp	r5, r3
   198a0:	movne	r3, #0
   198a4:	bne	198b8 <__assert_fail@plt+0x85e0>
   198a8:	b	19980 <__assert_fail@plt+0x86a8>
   198ac:	ldr	r1, [r2, #4]!
   198b0:	cmp	r5, r1
   198b4:	beq	19980 <__assert_fail@plt+0x86a8>
   198b8:	add	r3, r3, #1
   198bc:	cmp	r3, r0
   198c0:	bne	198ac <__assert_fail@plt+0x85d4>
   198c4:	ldr	r3, [r9, #36]	; 0x24
   198c8:	cmp	r3, #0
   198cc:	ble	199c8 <__assert_fail@plt+0x86f0>
   198d0:	mov	r6, #0
   198d4:	b	19964 <__assert_fail@plt+0x868c>
   198d8:	ldr	r1, [r3, #4]
   198dc:	ldrb	r2, [r1, r7]
   198e0:	cmp	r2, #193	; 0xc1
   198e4:	bhi	19990 <__assert_fail@plt+0x86b8>
   198e8:	mov	r4, #0
   198ec:	mov	r0, r4
   198f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   198f4:	ldr	r2, [r1]
   198f8:	tst	r2, #64	; 0x40
   198fc:	beq	1991c <__assert_fail@plt+0x8644>
   19900:	tst	r2, #128	; 0x80
   19904:	beq	198ec <__assert_fail@plt+0x8614>
   19908:	ldr	r3, [r3, #4]
   1990c:	ldrb	r3, [r3, r7]
   19910:	cmp	r3, #0
   19914:	beq	198e8 <__assert_fail@plt+0x8610>
   19918:	b	198ec <__assert_fail@plt+0x8614>
   1991c:	ldr	r1, [r3, #4]
   19920:	ldrb	r1, [r1, r7]
   19924:	cmp	r1, #10
   19928:	bne	19900 <__assert_fail@plt+0x8628>
   1992c:	b	198e8 <__assert_fail@plt+0x8610>
   19930:	ldr	r3, [r9, #36]	; 0x24
   19934:	ldr	r0, [r9, #20]
   19938:	cmp	r3, #0
   1993c:	bne	19888 <__assert_fail@plt+0x85b0>
   19940:	cmp	r0, #0
   19944:	bne	19888 <__assert_fail@plt+0x85b0>
   19948:	ldrb	r3, [r9, #16]
   1994c:	tst	r3, #1
   19950:	bne	198ec <__assert_fail@plt+0x8614>
   19954:	b	198e8 <__assert_fail@plt+0x8610>
   19958:	ldr	r3, [r9, #36]	; 0x24
   1995c:	cmp	r6, r3
   19960:	bge	199c4 <__assert_fail@plt+0x86ec>
   19964:	ldr	r3, [r9, #12]
   19968:	mov	r0, r5
   1996c:	ldr	r1, [r3, r6, lsl #2]
   19970:	bl	10ffc <iswctype@plt>
   19974:	add	r6, r6, #1
   19978:	cmp	r0, #0
   1997c:	beq	19958 <__assert_fail@plt+0x8680>
   19980:	ldrb	r3, [r9, #16]
   19984:	tst	r3, #1
   19988:	beq	198ec <__assert_fail@plt+0x8614>
   1998c:	b	198e8 <__assert_fail@plt+0x8610>
   19990:	ldr	lr, [r3, #48]	; 0x30
   19994:	add	ip, r7, #1
   19998:	cmp	ip, lr
   1999c:	bge	198e8 <__assert_fail@plt+0x8610>
   199a0:	add	r0, r1, r7
   199a4:	cmp	r2, #223	; 0xdf
   199a8:	ldrb	r3, [r0, #1]
   199ac:	bhi	19a0c <__assert_fail@plt+0x8734>
   199b0:	eor	r3, r3, #128	; 0x80
   199b4:	cmp	r3, #63	; 0x3f
   199b8:	movls	r4, #2
   199bc:	bls	198ec <__assert_fail@plt+0x8614>
   199c0:	b	198e8 <__assert_fail@plt+0x8610>
   199c4:	ldr	ip, [r9, #32]
   199c8:	cmp	ip, #0
   199cc:	ble	19948 <__assert_fail@plt+0x8670>
   199d0:	ldr	r2, [r9, #4]
   199d4:	mov	r3, #0
   199d8:	sub	r2, r2, #4
   199dc:	b	199ec <__assert_fail@plt+0x8714>
   199e0:	add	r3, r3, #1
   199e4:	cmp	r3, ip
   199e8:	beq	19948 <__assert_fail@plt+0x8670>
   199ec:	ldr	r1, [r2, #4]!
   199f0:	cmp	r5, r1
   199f4:	bcc	199e0 <__assert_fail@plt+0x8708>
   199f8:	ldr	r1, [r9, #8]
   199fc:	ldr	r1, [r1, r3, lsl #2]
   19a00:	cmp	r5, r1
   19a04:	bhi	199e0 <__assert_fail@plt+0x8708>
   19a08:	b	19980 <__assert_fail@plt+0x86a8>
   19a0c:	cmp	r2, #239	; 0xef
   19a10:	bhi	19a9c <__assert_fail@plt+0x87c4>
   19a14:	cmp	r3, #159	; 0x9f
   19a18:	cmpls	r2, #224	; 0xe0
   19a1c:	movne	r4, #3
   19a20:	beq	198e8 <__assert_fail@plt+0x8610>
   19a24:	add	r7, r7, r4
   19a28:	cmp	lr, r7
   19a2c:	blt	198e8 <__assert_fail@plt+0x8610>
   19a30:	ldrb	r3, [r1, ip]
   19a34:	eor	r3, r3, #128	; 0x80
   19a38:	cmp	r3, #63	; 0x3f
   19a3c:	bhi	198e8 <__assert_fail@plt+0x8610>
   19a40:	ldrb	r3, [r0, #2]
   19a44:	eor	r3, r3, #128	; 0x80
   19a48:	cmp	r3, #63	; 0x3f
   19a4c:	bhi	198e8 <__assert_fail@plt+0x8610>
   19a50:	cmp	r4, #3
   19a54:	beq	198ec <__assert_fail@plt+0x8614>
   19a58:	ldrb	r3, [r0, #3]
   19a5c:	eor	r3, r3, #128	; 0x80
   19a60:	cmp	r3, #63	; 0x3f
   19a64:	bhi	198e8 <__assert_fail@plt+0x8610>
   19a68:	cmp	r4, #4
   19a6c:	beq	198ec <__assert_fail@plt+0x8614>
   19a70:	ldrb	r3, [r0, #4]
   19a74:	eor	r3, r3, #128	; 0x80
   19a78:	cmp	r3, #63	; 0x3f
   19a7c:	bhi	198e8 <__assert_fail@plt+0x8610>
   19a80:	cmp	r4, #6
   19a84:	bne	19af0 <__assert_fail@plt+0x8818>
   19a88:	ldrb	r3, [r0, #5]
   19a8c:	eor	r3, r3, #128	; 0x80
   19a90:	cmp	r3, #63	; 0x3f
   19a94:	bls	198ec <__assert_fail@plt+0x8614>
   19a98:	b	198e8 <__assert_fail@plt+0x8610>
   19a9c:	cmp	r2, #247	; 0xf7
   19aa0:	bhi	19ab8 <__assert_fail@plt+0x87e0>
   19aa4:	cmp	r3, #143	; 0x8f
   19aa8:	cmpls	r2, #240	; 0xf0
   19aac:	movne	r4, #4
   19ab0:	bne	19a24 <__assert_fail@plt+0x874c>
   19ab4:	b	198e8 <__assert_fail@plt+0x8610>
   19ab8:	cmp	r2, #251	; 0xfb
   19abc:	bhi	19ad4 <__assert_fail@plt+0x87fc>
   19ac0:	cmp	r3, #135	; 0x87
   19ac4:	cmpls	r2, #248	; 0xf8
   19ac8:	movne	r4, #5
   19acc:	bne	19a24 <__assert_fail@plt+0x874c>
   19ad0:	b	198e8 <__assert_fail@plt+0x8610>
   19ad4:	cmp	r2, #253	; 0xfd
   19ad8:	bhi	198e8 <__assert_fail@plt+0x8610>
   19adc:	cmp	r3, #131	; 0x83
   19ae0:	cmpls	r2, #252	; 0xfc
   19ae4:	beq	198e8 <__assert_fail@plt+0x8610>
   19ae8:	mov	r4, #6
   19aec:	b	19a24 <__assert_fail@plt+0x874c>
   19af0:	mov	r4, #5
   19af4:	b	198ec <__assert_fail@plt+0x8614>
   19af8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19afc:	sub	sp, sp, #8
   19b00:	ldr	r6, [r1, #40]	; 0x28
   19b04:	ldr	r3, [r1, #56]	; 0x38
   19b08:	cmp	r3, r6
   19b0c:	ble	19d80 <__assert_fail@plt+0x8aa8>
   19b10:	ldr	sl, [r1, #4]
   19b14:	ldrb	r3, [r0, #6]
   19b18:	mov	r8, r2
   19b1c:	ldrb	r7, [sl, r6]
   19b20:	and	r3, r3, #159	; 0x9f
   19b24:	strb	r3, [r0, #6]
   19b28:	strb	r7, [r0]
   19b2c:	ldr	r3, [r1, #80]	; 0x50
   19b30:	mov	r5, r0
   19b34:	cmp	r3, #1
   19b38:	mov	r4, r1
   19b3c:	ble	19d94 <__assert_fail@plt+0x8abc>
   19b40:	ldr	r2, [r1, #28]
   19b44:	cmp	r6, r2
   19b48:	beq	19b5c <__assert_fail@plt+0x8884>
   19b4c:	ldr	r2, [r1, #8]
   19b50:	ldr	r2, [r2, r6, lsl #2]
   19b54:	cmn	r2, #1
   19b58:	beq	19ff4 <__assert_fail@plt+0x8d1c>
   19b5c:	cmp	r7, #92	; 0x5c
   19b60:	beq	19dfc <__assert_fail@plt+0x8b24>
   19b64:	ldr	r3, [r4, #8]
   19b68:	mov	r2, #1
   19b6c:	strb	r2, [r5, #4]
   19b70:	ldr	r9, [r3, r6, lsl #2]
   19b74:	mov	r0, r9
   19b78:	bl	111dc <iswalnum@plt>
   19b7c:	ldrb	r3, [r5, #6]
   19b80:	sub	r9, r9, #95	; 0x5f
   19b84:	clz	r9, r9
   19b88:	lsr	r9, r9, #5
   19b8c:	bic	r3, r3, #64	; 0x40
   19b90:	cmp	r0, #0
   19b94:	orrne	r9, r9, #1
   19b98:	orr	r9, r3, r9, lsl #6
   19b9c:	strb	r9, [r5, #6]
   19ba0:	sub	r7, r7, #10
   19ba4:	cmp	r7, #115	; 0x73
   19ba8:	ldrls	pc, [pc, r7, lsl #2]
   19bac:	b	19df0 <__assert_fail@plt+0x8b18>
   19bb0:	andeq	sl, r1, r8, lsr r0
   19bb4:	strdeq	r9, [r1], -r0
   19bb8:	strdeq	r9, [r1], -r0
   19bbc:	strdeq	r9, [r1], -r0
   19bc0:	strdeq	r9, [r1], -r0
   19bc4:	strdeq	r9, [r1], -r0
   19bc8:	strdeq	r9, [r1], -r0
   19bcc:	strdeq	r9, [r1], -r0
   19bd0:	strdeq	r9, [r1], -r0
   19bd4:	strdeq	r9, [r1], -r0
   19bd8:	strdeq	r9, [r1], -r0
   19bdc:	strdeq	r9, [r1], -r0
   19be0:	strdeq	r9, [r1], -r0
   19be4:	strdeq	r9, [r1], -r0
   19be8:	strdeq	r9, [r1], -r0
   19bec:	strdeq	r9, [r1], -r0
   19bf0:	strdeq	r9, [r1], -r0
   19bf4:	strdeq	r9, [r1], -r0
   19bf8:	strdeq	r9, [r1], -r0
   19bfc:	strdeq	r9, [r1], -r0
   19c00:	strdeq	r9, [r1], -r0
   19c04:	strdeq	r9, [r1], -r0
   19c08:	strdeq	r9, [r1], -r0
   19c0c:	strdeq	r9, [r1], -r0
   19c10:	strdeq	r9, [r1], -r0
   19c14:	strdeq	r9, [r1], -r0
   19c18:	andeq	sl, r1, r0, asr r0
   19c1c:	strdeq	r9, [r1], -r0
   19c20:	strdeq	r9, [r1], -r0
   19c24:	strdeq	r9, [r1], -r0
   19c28:	strheq	sl, [r1], -r0
   19c2c:	andeq	sl, r1, r8, asr #1
   19c30:	andeq	sl, r1, r0, ror #1
   19c34:	strdeq	sl, [r1], -r0
   19c38:	strdeq	r9, [r1], -r0
   19c3c:	strdeq	r9, [r1], -r0
   19c40:	andeq	sl, r1, r0, lsl r1
   19c44:	strdeq	r9, [r1], -r0
   19c48:	strdeq	r9, [r1], -r0
   19c4c:	strdeq	r9, [r1], -r0
   19c50:	strdeq	r9, [r1], -r0
   19c54:	strdeq	r9, [r1], -r0
   19c58:	strdeq	r9, [r1], -r0
   19c5c:	strdeq	r9, [r1], -r0
   19c60:	strdeq	r9, [r1], -r0
   19c64:	strdeq	r9, [r1], -r0
   19c68:	strdeq	r9, [r1], -r0
   19c6c:	strdeq	r9, [r1], -r0
   19c70:	strdeq	r9, [r1], -r0
   19c74:	strdeq	r9, [r1], -r0
   19c78:	strdeq	r9, [r1], -r0
   19c7c:	strdeq	r9, [r1], -r0
   19c80:	strdeq	r9, [r1], -r0
   19c84:	andeq	sl, r1, r0, lsr #2
   19c88:	strdeq	r9, [r1], -r0
   19c8c:	strdeq	r9, [r1], -r0
   19c90:	strdeq	r9, [r1], -r0
   19c94:	strdeq	r9, [r1], -r0
   19c98:	strdeq	r9, [r1], -r0
   19c9c:	strdeq	r9, [r1], -r0
   19ca0:	strdeq	r9, [r1], -r0
   19ca4:	strdeq	r9, [r1], -r0
   19ca8:	strdeq	r9, [r1], -r0
   19cac:	strdeq	r9, [r1], -r0
   19cb0:	strdeq	r9, [r1], -r0
   19cb4:	strdeq	r9, [r1], -r0
   19cb8:	strdeq	r9, [r1], -r0
   19cbc:	strdeq	r9, [r1], -r0
   19cc0:	strdeq	r9, [r1], -r0
   19cc4:	strdeq	r9, [r1], -r0
   19cc8:	strdeq	r9, [r1], -r0
   19ccc:	strdeq	r9, [r1], -r0
   19cd0:	strdeq	r9, [r1], -r0
   19cd4:	strdeq	r9, [r1], -r0
   19cd8:	strdeq	r9, [r1], -r0
   19cdc:	strdeq	r9, [r1], -r0
   19ce0:	strdeq	r9, [r1], -r0
   19ce4:	strdeq	r9, [r1], -r0
   19ce8:	strdeq	r9, [r1], -r0
   19cec:	strdeq	r9, [r1], -r0
   19cf0:	strdeq	r9, [r1], -r0
   19cf4:	andeq	sl, r1, r0, asr #2
   19cf8:	strdeq	r9, [r1], -r0
   19cfc:	strdeq	r9, [r1], -r0
   19d00:	andeq	sl, r1, r0, asr r1
   19d04:	strdeq	r9, [r1], -r0
   19d08:	strdeq	r9, [r1], -r0
   19d0c:	strdeq	r9, [r1], -r0
   19d10:	strdeq	r9, [r1], -r0
   19d14:	strdeq	r9, [r1], -r0
   19d18:	strdeq	r9, [r1], -r0
   19d1c:	strdeq	r9, [r1], -r0
   19d20:	strdeq	r9, [r1], -r0
   19d24:	strdeq	r9, [r1], -r0
   19d28:	strdeq	r9, [r1], -r0
   19d2c:	strdeq	r9, [r1], -r0
   19d30:	strdeq	r9, [r1], -r0
   19d34:	strdeq	r9, [r1], -r0
   19d38:	strdeq	r9, [r1], -r0
   19d3c:	strdeq	r9, [r1], -r0
   19d40:	strdeq	r9, [r1], -r0
   19d44:	strdeq	r9, [r1], -r0
   19d48:	strdeq	r9, [r1], -r0
   19d4c:	strdeq	r9, [r1], -r0
   19d50:	strdeq	r9, [r1], -r0
   19d54:	strdeq	r9, [r1], -r0
   19d58:	strdeq	r9, [r1], -r0
   19d5c:	strdeq	r9, [r1], -r0
   19d60:	strdeq	r9, [r1], -r0
   19d64:	strdeq	r9, [r1], -r0
   19d68:	strdeq	r9, [r1], -r0
   19d6c:	strdeq	r9, [r1], -r0
   19d70:	strdeq	r9, [r1], -r0
   19d74:	ldrdeq	r9, [r1], -r8
   19d78:	andeq	sl, r1, r8, lsr #3
   19d7c:	andeq	sl, r1, ip, lsl r0
   19d80:	mov	r3, #2
   19d84:	strb	r3, [r0, #4]
   19d88:	mov	r0, #0
   19d8c:	add	sp, sp, #8
   19d90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19d94:	cmp	r7, #92	; 0x5c
   19d98:	beq	19dfc <__assert_fail@plt+0x8b24>
   19d9c:	mov	r3, #1
   19da0:	strb	r3, [r5, #4]
   19da4:	bl	111a0 <__ctype_b_loc@plt>
   19da8:	lsl	r1, r7, #1
   19dac:	ldrb	r2, [r5, #6]
   19db0:	bic	r2, r2, #64	; 0x40
   19db4:	ldr	r3, [r0]
   19db8:	ldrh	r3, [r3, r1]
   19dbc:	lsr	r3, r3, #3
   19dc0:	and	r3, r3, #1
   19dc4:	cmp	r7, #95	; 0x5f
   19dc8:	orreq	r3, r3, #1
   19dcc:	orr	r3, r2, r3, lsl #6
   19dd0:	strb	r3, [r5, #6]
   19dd4:	b	19ba0 <__assert_fail@plt+0x88c8>
   19dd8:	and	r8, r8, #4608	; 0x1200
   19ddc:	cmp	r8, #4608	; 0x1200
   19de0:	moveq	r3, #23
   19de4:	strbeq	r3, [r5, #4]
   19de8:	moveq	r0, #1
   19dec:	beq	19d8c <__assert_fail@plt+0x8ab4>
   19df0:	mov	r0, #1
   19df4:	add	sp, sp, #8
   19df8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19dfc:	ldr	r1, [r4, #48]	; 0x30
   19e00:	add	r2, r6, #1
   19e04:	cmp	r2, r1
   19e08:	bge	1a00c <__assert_fail@plt+0x8d34>
   19e0c:	ldrb	r1, [r4, #75]	; 0x4b
   19e10:	cmp	r1, #0
   19e14:	bne	1a3c8 <__assert_fail@plt+0x90f0>
   19e18:	ldrb	r6, [sl, r2]
   19e1c:	cmp	r3, #1
   19e20:	mov	r3, #1
   19e24:	strb	r6, [r5]
   19e28:	strb	r3, [r5, #4]
   19e2c:	ble	1a394 <__assert_fail@plt+0x90bc>
   19e30:	ldr	r1, [r4, #8]
   19e34:	add	r1, r1, r2, lsl #2
   19e38:	ldr	r4, [r1]
   19e3c:	mov	r0, r4
   19e40:	bl	111dc <iswalnum@plt>
   19e44:	ldrb	r3, [r5, #6]
   19e48:	sub	r4, r4, #95	; 0x5f
   19e4c:	clz	r4, r4
   19e50:	lsr	r4, r4, #5
   19e54:	bic	r3, r3, #64	; 0x40
   19e58:	cmp	r0, #0
   19e5c:	orrne	r4, r4, #1
   19e60:	orr	r4, r3, r4, lsl #6
   19e64:	strb	r4, [r5, #6]
   19e68:	sub	r3, r6, #39	; 0x27
   19e6c:	cmp	r3, #86	; 0x56
   19e70:	ldrls	pc, [pc, r3, lsl #2]
   19e74:	b	19fec <__assert_fail@plt+0x8d14>
   19e78:	ldrdeq	sl, [r1], -r0
   19e7c:			; <UNDEFINED> instruction: 0x0001a1b8
   19e80:	andeq	sl, r1, ip, ror r3
   19e84:	andeq	r9, r1, ip, ror #31
   19e88:	andeq	sl, r1, r0, ror #6
   19e8c:	andeq	r9, r1, ip, ror #31
   19e90:	andeq	r9, r1, ip, ror #31
   19e94:	andeq	r9, r1, ip, ror #31
   19e98:	andeq	r9, r1, ip, ror #31
   19e9c:	andeq	r9, r1, ip, ror #31
   19ea0:	andeq	sl, r1, r0, asr #6
   19ea4:	andeq	sl, r1, r0, asr #6
   19ea8:	andeq	sl, r1, r0, asr #6
   19eac:	andeq	sl, r1, r0, asr #6
   19eb0:	andeq	sl, r1, r0, asr #6
   19eb4:	andeq	sl, r1, r0, asr #6
   19eb8:	andeq	sl, r1, r0, asr #6
   19ebc:	andeq	sl, r1, r0, asr #6
   19ec0:	andeq	sl, r1, r0, asr #6
   19ec4:	andeq	r9, r1, ip, ror #31
   19ec8:	andeq	r9, r1, ip, ror #31
   19ecc:	andeq	sl, r1, r0, lsr #6
   19ed0:	andeq	r9, r1, ip, ror #31
   19ed4:	andeq	sl, r1, r0, lsl #6
   19ed8:	andeq	sl, r1, r4, ror #5
   19edc:	andeq	r9, r1, ip, ror #31
   19ee0:	andeq	r9, r1, ip, ror #31
   19ee4:	andeq	sl, r1, r4, asr #5
   19ee8:	andeq	r9, r1, ip, ror #31
   19eec:	andeq	r9, r1, ip, ror #31
   19ef0:	andeq	r9, r1, ip, ror #31
   19ef4:	andeq	r9, r1, ip, ror #31
   19ef8:	andeq	r9, r1, ip, ror #31
   19efc:	andeq	r9, r1, ip, ror #31
   19f00:	andeq	r9, r1, ip, ror #31
   19f04:	andeq	r9, r1, ip, ror #31
   19f08:	andeq	r9, r1, ip, ror #31
   19f0c:	andeq	r9, r1, ip, ror #31
   19f10:	andeq	r9, r1, ip, ror #31
   19f14:	andeq	r9, r1, ip, ror #31
   19f18:	andeq	r9, r1, ip, ror #31
   19f1c:	andeq	r9, r1, ip, ror #31
   19f20:	andeq	r9, r1, ip, ror #31
   19f24:	andeq	r9, r1, ip, ror #31
   19f28:	andeq	sl, r1, ip, lsr #5
   19f2c:	andeq	r9, r1, ip, ror #31
   19f30:	andeq	r9, r1, ip, ror #31
   19f34:	andeq	r9, r1, ip, ror #31
   19f38:	muleq	r1, r4, r2
   19f3c:	andeq	r9, r1, ip, ror #31
   19f40:	andeq	r9, r1, ip, ror #31
   19f44:	andeq	r9, r1, ip, ror #31
   19f48:	andeq	r9, r1, ip, ror #31
   19f4c:	andeq	r9, r1, ip, ror #31
   19f50:	andeq	r9, r1, ip, ror #31
   19f54:	andeq	r9, r1, ip, ror #31
   19f58:	andeq	r9, r1, ip, ror #31
   19f5c:	andeq	sl, r1, r4, ror r2
   19f60:	andeq	r9, r1, ip, ror #31
   19f64:	andeq	sl, r1, r4, asr r2
   19f68:	andeq	r9, r1, ip, ror #31
   19f6c:	andeq	r9, r1, ip, ror #31
   19f70:	andeq	r9, r1, ip, ror #31
   19f74:	andeq	r9, r1, ip, ror #31
   19f78:	andeq	r9, r1, ip, ror #31
   19f7c:	andeq	r9, r1, ip, ror #31
   19f80:	andeq	r9, r1, ip, ror #31
   19f84:	andeq	r9, r1, ip, ror #31
   19f88:	andeq	r9, r1, ip, ror #31
   19f8c:	andeq	r9, r1, ip, ror #31
   19f90:	andeq	r9, r1, ip, ror #31
   19f94:	andeq	r9, r1, ip, ror #31
   19f98:	andeq	r9, r1, ip, ror #31
   19f9c:	andeq	r9, r1, ip, ror #31
   19fa0:	andeq	r9, r1, ip, ror #31
   19fa4:	andeq	r9, r1, ip, ror #31
   19fa8:	andeq	sl, r1, ip, lsr r2
   19fac:	andeq	r9, r1, ip, ror #31
   19fb0:	andeq	r9, r1, ip, ror #31
   19fb4:	andeq	r9, r1, ip, ror #31
   19fb8:	andeq	sl, r1, r4, lsr #4
   19fbc:	andeq	r9, r1, ip, ror #31
   19fc0:	andeq	r9, r1, ip, ror #31
   19fc4:	andeq	r9, r1, ip, ror #31
   19fc8:	ldrdeq	r9, [r1], -r4
   19fcc:	andeq	sl, r1, ip, lsl #4
   19fd0:	strdeq	sl, [r1], -r0
   19fd4:	and	r8, r8, #4608	; 0x1200
   19fd8:	cmp	r8, #512	; 0x200
   19fdc:	moveq	r3, #23
   19fe0:	strbeq	r3, [r5, #4]
   19fe4:	moveq	r0, #2
   19fe8:	beq	19d8c <__assert_fail@plt+0x8ab4>
   19fec:	mov	r0, #2
   19ff0:	b	19d8c <__assert_fail@plt+0x8ab4>
   19ff4:	ldrb	r3, [r0, #6]
   19ff8:	mov	r0, #1
   19ffc:	strb	r0, [r5, #4]
   1a000:	orr	r3, r3, #32
   1a004:	strb	r3, [r5, #6]
   1a008:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a00c:	mov	r3, #36	; 0x24
   1a010:	strb	r3, [r5, #4]
   1a014:	mov	r0, #1
   1a018:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a01c:	and	r8, r8, #4608	; 0x1200
   1a020:	cmp	r8, #4608	; 0x1200
   1a024:	moveq	r3, #24
   1a028:	strbeq	r3, [r5, #4]
   1a02c:	moveq	r0, #1
   1a030:	bne	19df0 <__assert_fail@plt+0x8b18>
   1a034:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a038:	tst	r8, #2048	; 0x800
   1a03c:	beq	19df0 <__assert_fail@plt+0x8b18>
   1a040:	mov	r3, #10
   1a044:	strb	r3, [r5, #4]
   1a048:	mov	r0, #1
   1a04c:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a050:	tst	r8, #8
   1a054:	bne	1a098 <__assert_fail@plt+0x8dc0>
   1a058:	ldr	r3, [r4, #48]	; 0x30
   1a05c:	add	r6, r6, #1
   1a060:	cmp	r6, r3
   1a064:	beq	1a098 <__assert_fail@plt+0x8dc0>
   1a068:	mov	r2, r8
   1a06c:	str	r6, [r4, #40]	; 0x28
   1a070:	mov	r1, r4
   1a074:	mov	r0, sp
   1a078:	bl	19af8 <__assert_fail@plt+0x8820>
   1a07c:	ldrb	r2, [sp, #4]
   1a080:	ldr	r3, [r4, #40]	; 0x28
   1a084:	sub	r2, r2, #9
   1a088:	sub	r3, r3, #1
   1a08c:	cmp	r2, #1
   1a090:	str	r3, [r4, #40]	; 0x28
   1a094:	bhi	19df0 <__assert_fail@plt+0x8b18>
   1a098:	mov	r2, #12
   1a09c:	mov	r3, #32
   1a0a0:	strb	r2, [r5, #4]
   1a0a4:	str	r3, [r5]
   1a0a8:	mov	r0, #1
   1a0ac:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a0b0:	tst	r8, #8192	; 0x2000
   1a0b4:	beq	19df0 <__assert_fail@plt+0x8b18>
   1a0b8:	mov	r3, #8
   1a0bc:	strb	r3, [r5, #4]
   1a0c0:	mov	r0, #1
   1a0c4:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a0c8:	tst	r8, #8192	; 0x2000
   1a0cc:	beq	19df0 <__assert_fail@plt+0x8b18>
   1a0d0:	mov	r3, #9
   1a0d4:	strb	r3, [r5, #4]
   1a0d8:	mov	r0, #1
   1a0dc:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a0e0:	mov	r3, #11
   1a0e4:	strb	r3, [r5, #4]
   1a0e8:	mov	r0, #1
   1a0ec:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a0f0:	ldr	r3, [pc, #864]	; 1a458 <__assert_fail@plt+0x9180>
   1a0f4:	and	r3, r3, r8
   1a0f8:	cmp	r3, #0
   1a0fc:	bne	19df0 <__assert_fail@plt+0x8b18>
   1a100:	mov	r3, #18
   1a104:	strb	r3, [r5, #4]
   1a108:	mov	r0, #1
   1a10c:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a110:	mov	r3, #5
   1a114:	strb	r3, [r5, #4]
   1a118:	mov	r0, #1
   1a11c:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a120:	ldr	r3, [pc, #816]	; 1a458 <__assert_fail@plt+0x9180>
   1a124:	and	r3, r3, r8
   1a128:	cmp	r3, #0
   1a12c:	bne	19df0 <__assert_fail@plt+0x8b18>
   1a130:	mov	r3, #19
   1a134:	strb	r3, [r5, #4]
   1a138:	mov	r0, #1
   1a13c:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a140:	mov	r3, #20
   1a144:	strb	r3, [r5, #4]
   1a148:	mov	r0, #1
   1a14c:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a150:	ldr	r3, [pc, #772]	; 1a45c <__assert_fail@plt+0x9184>
   1a154:	cmp	r6, #0
   1a158:	and	r3, r3, r8
   1a15c:	clz	r3, r3
   1a160:	lsr	r3, r3, #5
   1a164:	moveq	r3, #0
   1a168:	cmp	r3, #0
   1a16c:	beq	1a190 <__assert_fail@plt+0x8eb8>
   1a170:	add	r6, sl, r6
   1a174:	lsr	r3, r8, #11
   1a178:	ldrb	r2, [r6, #-1]
   1a17c:	eor	r3, r3, #1
   1a180:	cmp	r2, #10
   1a184:	orrne	r3, r3, #1
   1a188:	tst	r3, #1
   1a18c:	bne	19df0 <__assert_fail@plt+0x8b18>
   1a190:	mov	r2, #12
   1a194:	mov	r3, #16
   1a198:	strb	r2, [r5, #4]
   1a19c:	str	r3, [r5]
   1a1a0:	mov	r0, #1
   1a1a4:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a1a8:	and	r8, r8, #33792	; 0x8400
   1a1ac:	cmp	r8, #32768	; 0x8000
   1a1b0:	bne	19df0 <__assert_fail@plt+0x8b18>
   1a1b4:	b	1a040 <__assert_fail@plt+0x8d68>
   1a1b8:	tst	r8, #8192	; 0x2000
   1a1bc:	bne	19fec <__assert_fail@plt+0x8d14>
   1a1c0:	mov	r3, #8
   1a1c4:	strb	r3, [r5, #4]
   1a1c8:	mov	r0, #2
   1a1cc:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a1d0:	tst	r8, #524288	; 0x80000
   1a1d4:	bne	19fec <__assert_fail@plt+0x8d14>
   1a1d8:	mov	r2, #12
   1a1dc:	mov	r3, #128	; 0x80
   1a1e0:	strb	r2, [r5, #4]
   1a1e4:	str	r3, [r5]
   1a1e8:	mov	r0, #2
   1a1ec:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a1f0:	and	r8, r8, #4608	; 0x1200
   1a1f4:	cmp	r8, #512	; 0x200
   1a1f8:	moveq	r3, #24
   1a1fc:	strbeq	r3, [r5, #4]
   1a200:	moveq	r0, #2
   1a204:	bne	19fec <__assert_fail@plt+0x8d14>
   1a208:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a20c:	tst	r8, #33792	; 0x8400
   1a210:	bne	19fec <__assert_fail@plt+0x8d14>
   1a214:	mov	r3, #10
   1a218:	strb	r3, [r5, #4]
   1a21c:	mov	r0, #2
   1a220:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a224:	tst	r8, #524288	; 0x80000
   1a228:	bne	19fec <__assert_fail@plt+0x8d14>
   1a22c:	mov	r3, #32
   1a230:	strb	r3, [r5, #4]
   1a234:	mov	r0, #2
   1a238:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a23c:	tst	r8, #524288	; 0x80000
   1a240:	bne	19fec <__assert_fail@plt+0x8d14>
   1a244:	mov	r3, #34	; 0x22
   1a248:	strb	r3, [r5, #4]
   1a24c:	mov	r0, #2
   1a250:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a254:	tst	r8, #524288	; 0x80000
   1a258:	bne	19fec <__assert_fail@plt+0x8d14>
   1a25c:	mov	r2, #12
   1a260:	mov	r3, #256	; 0x100
   1a264:	strb	r2, [r5, #4]
   1a268:	str	r3, [r5]
   1a26c:	mov	r0, #2
   1a270:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a274:	tst	r8, #524288	; 0x80000
   1a278:	bne	19fec <__assert_fail@plt+0x8d14>
   1a27c:	mov	r2, #12
   1a280:	mov	r3, #64	; 0x40
   1a284:	strb	r2, [r5, #4]
   1a288:	str	r3, [r5]
   1a28c:	mov	r0, #2
   1a290:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a294:	tst	r8, #524288	; 0x80000
   1a298:	bne	19fec <__assert_fail@plt+0x8d14>
   1a29c:	mov	r3, #33	; 0x21
   1a2a0:	strb	r3, [r5, #4]
   1a2a4:	mov	r0, #2
   1a2a8:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a2ac:	tst	r8, #524288	; 0x80000
   1a2b0:	bne	19fec <__assert_fail@plt+0x8d14>
   1a2b4:	mov	r3, #35	; 0x23
   1a2b8:	strb	r3, [r5, #4]
   1a2bc:	mov	r0, #2
   1a2c0:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a2c4:	tst	r8, #524288	; 0x80000
   1a2c8:	bne	19fec <__assert_fail@plt+0x8d14>
   1a2cc:	mov	r2, #12
   1a2d0:	mov	r3, #512	; 0x200
   1a2d4:	strb	r2, [r5, #4]
   1a2d8:	str	r3, [r5]
   1a2dc:	mov	r0, #2
   1a2e0:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a2e4:	ldr	r0, [pc, #364]	; 1a458 <__assert_fail@plt+0x9180>
   1a2e8:	and	r0, r0, r8
   1a2ec:	cmp	r0, #2
   1a2f0:	moveq	r3, #19
   1a2f4:	strbeq	r3, [r5, #4]
   1a2f8:	bne	19fec <__assert_fail@plt+0x8d14>
   1a2fc:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a300:	tst	r8, #524288	; 0x80000
   1a304:	bne	19fec <__assert_fail@plt+0x8d14>
   1a308:	mov	r2, #12
   1a30c:	mov	r3, #9
   1a310:	strb	r2, [r5, #4]
   1a314:	str	r3, [r5]
   1a318:	mov	r0, #2
   1a31c:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a320:	tst	r8, #524288	; 0x80000
   1a324:	bne	19fec <__assert_fail@plt+0x8d14>
   1a328:	mov	r2, #12
   1a32c:	mov	r3, #6
   1a330:	strb	r2, [r5, #4]
   1a334:	str	r3, [r5]
   1a338:	mov	r0, #2
   1a33c:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a340:	tst	r8, #16384	; 0x4000
   1a344:	bne	19fec <__assert_fail@plt+0x8d14>
   1a348:	sub	r6, r6, #49	; 0x31
   1a34c:	mov	r3, #4
   1a350:	str	r6, [r5]
   1a354:	strb	r3, [r5, #4]
   1a358:	mov	r0, #2
   1a35c:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a360:	ldr	r0, [pc, #240]	; 1a458 <__assert_fail@plt+0x9180>
   1a364:	and	r0, r0, r8
   1a368:	cmp	r0, #2
   1a36c:	moveq	r3, #18
   1a370:	strbeq	r3, [r5, #4]
   1a374:	bne	19fec <__assert_fail@plt+0x8d14>
   1a378:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a37c:	tst	r8, #8192	; 0x2000
   1a380:	bne	19fec <__assert_fail@plt+0x8d14>
   1a384:	mov	r3, #9
   1a388:	strb	r3, [r5, #4]
   1a38c:	mov	r0, #2
   1a390:	b	19d8c <__assert_fail@plt+0x8ab4>
   1a394:	bl	111a0 <__ctype_b_loc@plt>
   1a398:	lsl	r3, r6, #1
   1a39c:	ldrb	r2, [r5, #6]
   1a3a0:	bic	r2, r2, #64	; 0x40
   1a3a4:	ldr	r1, [r0]
   1a3a8:	ldrh	r3, [r1, r3]
   1a3ac:	lsr	r3, r3, #3
   1a3b0:	and	r3, r3, #1
   1a3b4:	cmp	r6, #95	; 0x5f
   1a3b8:	orreq	r3, r3, #1
   1a3bc:	orr	r3, r2, r3, lsl #6
   1a3c0:	strb	r3, [r5, #6]
   1a3c4:	b	19e68 <__assert_fail@plt+0x8b90>
   1a3c8:	cmp	r3, #1
   1a3cc:	ble	1a400 <__assert_fail@plt+0x9128>
   1a3d0:	ldr	r0, [r4, #8]
   1a3d4:	add	r1, r0, r2, lsl #2
   1a3d8:	ldr	r0, [r0, r2, lsl #2]
   1a3dc:	cmn	r0, #1
   1a3e0:	beq	1a444 <__assert_fail@plt+0x916c>
   1a3e4:	ldr	r0, [r4, #28]
   1a3e8:	add	r6, r6, #2
   1a3ec:	cmp	r0, r6
   1a3f0:	beq	1a400 <__assert_fail@plt+0x9128>
   1a3f4:	ldr	r0, [r1, #4]
   1a3f8:	cmn	r0, #1
   1a3fc:	beq	1a444 <__assert_fail@plt+0x916c>
   1a400:	ldrb	r1, [r4, #76]	; 0x4c
   1a404:	cmp	r1, #0
   1a408:	bne	1a420 <__assert_fail@plt+0x9148>
   1a40c:	ldr	r1, [r4]
   1a410:	ldr	r0, [r4, #24]
   1a414:	add	r1, r1, r2
   1a418:	ldrb	r6, [r1, r0]
   1a41c:	b	19e1c <__assert_fail@plt+0x8b44>
   1a420:	ldr	ip, [r4, #12]
   1a424:	ldr	r1, [r4]
   1a428:	ldr	r0, [r4, #24]
   1a42c:	ldr	ip, [ip, r2, lsl #2]
   1a430:	add	r1, r1, ip
   1a434:	ldrb	r6, [r1, r0]
   1a438:	tst	r6, #128	; 0x80
   1a43c:	bne	19e18 <__assert_fail@plt+0x8b40>
   1a440:	b	19e1c <__assert_fail@plt+0x8b44>
   1a444:	ldrb	r6, [sl, r2]
   1a448:	mov	r3, #1
   1a44c:	strb	r3, [r5, #4]
   1a450:	strb	r6, [r5]
   1a454:	b	19e38 <__assert_fail@plt+0x8b60>
   1a458:	andeq	r0, r0, r2, lsl #8
   1a45c:	addeq	r0, r0, r8
   1a460:	ldr	ip, [r1]
   1a464:	push	{r4, r5, r6, lr}
   1a468:	cmp	ip, #31
   1a46c:	sub	sp, sp, #8
   1a470:	mov	r5, r0
   1a474:	beq	1a4d8 <__assert_fail@plt+0x9200>
   1a478:	lsl	r3, ip, #5
   1a47c:	ldr	r4, [r0]
   1a480:	add	lr, ip, #1
   1a484:	add	r6, r3, #4
   1a488:	add	r3, r4, r3
   1a48c:	mov	ip, #0
   1a490:	str	lr, [r1]
   1a494:	str	ip, [r3, #4]
   1a498:	str	ip, [r3, #8]
   1a49c:	str	ip, [r3, #12]
   1a4a0:	ldm	r2, {r0, r1}
   1a4a4:	add	r2, r3, #24
   1a4a8:	add	r4, r4, r6
   1a4ac:	stm	r2, {r0, r1}
   1a4b0:	ldrb	r2, [r3, #30]
   1a4b4:	mvn	r1, #0
   1a4b8:	str	ip, [r3, #16]
   1a4bc:	and	r2, r2, #243	; 0xf3
   1a4c0:	str	ip, [r3, #20]
   1a4c4:	strb	r2, [r3, #30]
   1a4c8:	str	r1, [r3, #32]
   1a4cc:	mov	r0, r4
   1a4d0:	add	sp, sp, #8
   1a4d4:	pop	{r4, r5, r6, pc}
   1a4d8:	mov	r0, #996	; 0x3e4
   1a4dc:	stm	sp, {r1, r2}
   1a4e0:	bl	294e4 <__assert_fail@plt+0x1820c>
   1a4e4:	subs	r4, r0, #0
   1a4e8:	beq	1a4cc <__assert_fail@plt+0x91f4>
   1a4ec:	ldr	r0, [r5]
   1a4f0:	mov	r6, #4
   1a4f4:	mov	lr, #1
   1a4f8:	mov	r3, #0
   1a4fc:	str	r0, [r4]
   1a500:	str	r4, [r5]
   1a504:	ldm	sp, {r1, r2}
   1a508:	b	1a488 <__assert_fail@plt+0x91b0>
   1a50c:	push	{r4, r5, r6, lr}
   1a510:	mov	r4, r0
   1a514:	ldr	r5, [pc, #168]	; 1a5c4 <__assert_fail@plt+0x92ec>
   1a518:	b	1a520 <__assert_fail@plt+0x9248>
   1a51c:	mov	r4, r3
   1a520:	ldr	r3, [r4, #4]
   1a524:	cmp	r3, #0
   1a528:	bne	1a51c <__assert_fail@plt+0x9244>
   1a52c:	ldr	r3, [r4, #8]
   1a530:	cmp	r3, #0
   1a534:	bne	1a51c <__assert_fail@plt+0x9244>
   1a538:	ldr	r3, [r4, #24]
   1a53c:	and	r3, r3, r5
   1a540:	cmp	r3, #6
   1a544:	bne	1a5b0 <__assert_fail@plt+0x92d8>
   1a548:	ldr	r6, [r4, #20]
   1a54c:	ldr	r0, [r6]
   1a550:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a554:	ldr	r0, [r6, #4]
   1a558:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a55c:	ldr	r0, [r6, #8]
   1a560:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a564:	ldr	r0, [r6, #12]
   1a568:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a56c:	mov	r0, r6
   1a570:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a574:	ldr	r0, [r4]
   1a578:	cmp	r0, #0
   1a57c:	popeq	{r4, r5, r6, pc}
   1a580:	ldr	r3, [r0, #8]
   1a584:	cmp	r4, r3
   1a588:	cmpne	r3, #0
   1a58c:	moveq	r4, #1
   1a590:	movne	r4, #0
   1a594:	cmp	r4, #0
   1a598:	mov	r4, r0
   1a59c:	beq	1a51c <__assert_fail@plt+0x9244>
   1a5a0:	ldr	r3, [r4, #24]
   1a5a4:	and	r3, r3, r5
   1a5a8:	cmp	r3, #6
   1a5ac:	beq	1a548 <__assert_fail@plt+0x9270>
   1a5b0:	cmp	r3, #3
   1a5b4:	bne	1a574 <__assert_fail@plt+0x929c>
   1a5b8:	ldr	r0, [r4, #20]
   1a5bc:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a5c0:	b	1a574 <__assert_fail@plt+0x929c>
   1a5c4:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   1a5c8:	ldr	r2, [r0]
   1a5cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a5d0:	cmp	r2, #0
   1a5d4:	mov	r7, r0
   1a5d8:	beq	1a638 <__assert_fail@plt+0x9360>
   1a5dc:	ldr	r0, [r0, #8]
   1a5e0:	cmp	r0, #0
   1a5e4:	beq	1a638 <__assert_fail@plt+0x9360>
   1a5e8:	ldr	r5, [pc, #500]	; 1a7e4 <__assert_fail@plt+0x950c>
   1a5ec:	mov	r4, #0
   1a5f0:	b	1a604 <__assert_fail@plt+0x932c>
   1a5f4:	add	r4, r4, #1
   1a5f8:	cmp	r4, r0
   1a5fc:	bcs	1a638 <__assert_fail@plt+0x9360>
   1a600:	ldr	r2, [r7]
   1a604:	add	r1, r2, r4, lsl #3
   1a608:	ldr	r3, [r1, #4]
   1a60c:	and	r3, r3, r5
   1a610:	cmp	r3, #6
   1a614:	beq	1a7b0 <__assert_fail@plt+0x94d8>
   1a618:	cmp	r3, #3
   1a61c:	bne	1a5f4 <__assert_fail@plt+0x931c>
   1a620:	ldr	r0, [r1]
   1a624:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a628:	ldr	r0, [r7, #8]
   1a62c:	add	r4, r4, #1
   1a630:	cmp	r4, r0
   1a634:	bcc	1a600 <__assert_fail@plt+0x9328>
   1a638:	ldr	r0, [r7, #12]
   1a63c:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a640:	ldr	r3, [r7, #8]
   1a644:	cmp	r3, #0
   1a648:	movne	r4, #0
   1a64c:	movne	r5, r4
   1a650:	beq	1a6b0 <__assert_fail@plt+0x93d8>
   1a654:	ldr	r3, [r7, #24]
   1a658:	add	r5, r5, #1
   1a65c:	cmp	r3, #0
   1a660:	add	r2, r3, r4
   1a664:	beq	1a670 <__assert_fail@plt+0x9398>
   1a668:	ldr	r0, [r2, #8]
   1a66c:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a670:	ldr	r3, [r7, #28]
   1a674:	cmp	r3, #0
   1a678:	add	r2, r3, r4
   1a67c:	beq	1a688 <__assert_fail@plt+0x93b0>
   1a680:	ldr	r0, [r2, #8]
   1a684:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a688:	ldr	r3, [r7, #20]
   1a68c:	cmp	r3, #0
   1a690:	add	r2, r3, r4
   1a694:	beq	1a6a0 <__assert_fail@plt+0x93c8>
   1a698:	ldr	r0, [r2, #8]
   1a69c:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a6a0:	ldr	r3, [r7, #8]
   1a6a4:	add	r4, r4, #12
   1a6a8:	cmp	r3, r5
   1a6ac:	bhi	1a654 <__assert_fail@plt+0x937c>
   1a6b0:	ldr	r0, [r7, #20]
   1a6b4:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a6b8:	ldr	r0, [r7, #24]
   1a6bc:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a6c0:	ldr	r0, [r7, #28]
   1a6c4:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a6c8:	ldr	r0, [r7]
   1a6cc:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a6d0:	ldr	r0, [r7, #32]
   1a6d4:	cmp	r0, #0
   1a6d8:	beq	1a784 <__assert_fail@plt+0x94ac>
   1a6dc:	mov	r8, #0
   1a6e0:	mov	r9, r8
   1a6e4:	ldr	r3, [r0, r8]
   1a6e8:	add	r6, r0, r8
   1a6ec:	cmp	r3, #0
   1a6f0:	movgt	r5, #0
   1a6f4:	ble	1a760 <__assert_fail@plt+0x9488>
   1a6f8:	ldr	r3, [r6, #8]
   1a6fc:	ldr	r4, [r3, r5, lsl #2]
   1a700:	add	r5, r5, #1
   1a704:	ldr	r0, [r4, #24]
   1a708:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a70c:	ldr	r0, [r4, #36]	; 0x24
   1a710:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a714:	ldr	r3, [r4, #40]	; 0x28
   1a718:	add	r2, r4, #4
   1a71c:	cmp	r3, r2
   1a720:	beq	1a734 <__assert_fail@plt+0x945c>
   1a724:	ldr	r0, [r3, #8]
   1a728:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a72c:	ldr	r0, [r4, #40]	; 0x28
   1a730:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a734:	ldr	r0, [r4, #12]
   1a738:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a73c:	ldr	r0, [r4, #48]	; 0x30
   1a740:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a744:	ldr	r0, [r4, #44]	; 0x2c
   1a748:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a74c:	mov	r0, r4
   1a750:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a754:	ldr	r3, [r6]
   1a758:	cmp	r3, r5
   1a75c:	bgt	1a6f8 <__assert_fail@plt+0x9420>
   1a760:	ldr	r0, [r6, #8]
   1a764:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a768:	ldr	r3, [r7, #68]	; 0x44
   1a76c:	add	r9, r9, #1
   1a770:	cmp	r3, r9
   1a774:	add	r8, r8, #12
   1a778:	ldrcs	r0, [r7, #32]
   1a77c:	bcs	1a6e4 <__assert_fail@plt+0x940c>
   1a780:	ldr	r0, [r7, #32]
   1a784:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a788:	ldr	r0, [r7, #60]	; 0x3c
   1a78c:	ldr	r3, [pc, #84]	; 1a7e8 <__assert_fail@plt+0x9510>
   1a790:	cmp	r0, r3
   1a794:	beq	1a79c <__assert_fail@plt+0x94c4>
   1a798:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a79c:	ldr	r0, [r7, #132]	; 0x84
   1a7a0:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a7a4:	mov	r0, r7
   1a7a8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a7ac:	b	296b0 <__assert_fail@plt+0x183d8>
   1a7b0:	ldr	r6, [r2, r4, lsl #3]
   1a7b4:	ldr	r0, [r6]
   1a7b8:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a7bc:	ldr	r0, [r6, #4]
   1a7c0:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a7c4:	ldr	r0, [r6, #8]
   1a7c8:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a7cc:	ldr	r0, [r6, #12]
   1a7d0:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a7d4:	mov	r0, r6
   1a7d8:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a7dc:	ldr	r0, [r7, #8]
   1a7e0:	b	1a5f4 <__assert_fail@plt+0x931c>
   1a7e4:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   1a7e8:	andeq	sl, r2, r8, asr #26
   1a7ec:	ldr	r3, [pc, #96]	; 1a854 <__assert_fail@plt+0x957c>
   1a7f0:	ldr	r2, [r1, #24]
   1a7f4:	push	{r4, lr}
   1a7f8:	and	r3, r3, r2
   1a7fc:	cmp	r3, #6
   1a800:	beq	1a824 <__assert_fail@plt+0x954c>
   1a804:	cmp	r3, #3
   1a808:	beq	1a814 <__assert_fail@plt+0x953c>
   1a80c:	mov	r0, #0
   1a810:	pop	{r4, pc}
   1a814:	ldr	r0, [r1, #20]
   1a818:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a81c:	mov	r0, #0
   1a820:	pop	{r4, pc}
   1a824:	ldr	r4, [r1, #20]
   1a828:	ldr	r0, [r4]
   1a82c:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a830:	ldr	r0, [r4, #4]
   1a834:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a838:	ldr	r0, [r4, #8]
   1a83c:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a840:	ldr	r0, [r4, #12]
   1a844:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a848:	mov	r0, r4
   1a84c:	bl	296b0 <__assert_fail@plt+0x183d8>
   1a850:	b	1a80c <__assert_fail@plt+0x9534>
   1a854:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   1a858:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a85c:	sub	sp, sp, #12
   1a860:	mov	r5, r0
   1a864:	ldr	r6, [sp, #40]	; 0x28
   1a868:	mov	r4, r1
   1a86c:	mov	r9, r2
   1a870:	mov	r8, r3
   1a874:	mov	r7, #0
   1a878:	ldr	r0, [r4, #4]
   1a87c:	cmp	r0, #0
   1a880:	ble	1a8dc <__assert_fail@plt+0x9604>
   1a884:	ldr	ip, [r4, #8]
   1a888:	sub	r0, r0, #1
   1a88c:	mov	r1, r7
   1a890:	cmp	r1, r0
   1a894:	bcs	1a8d0 <__assert_fail@plt+0x95f8>
   1a898:	add	r2, r1, r0
   1a89c:	lsr	r2, r2, #1
   1a8a0:	ldr	r3, [ip, r2, lsl #2]
   1a8a4:	cmp	r9, r3
   1a8a8:	ble	1a8c0 <__assert_fail@plt+0x95e8>
   1a8ac:	b	1a940 <__assert_fail@plt+0x9668>
   1a8b0:	ldr	r0, [ip, r3, lsl #2]
   1a8b4:	cmp	r9, r0
   1a8b8:	bgt	1a948 <__assert_fail@plt+0x9670>
   1a8bc:	mov	r2, r3
   1a8c0:	add	r3, r2, r1
   1a8c4:	cmp	r2, r1
   1a8c8:	lsr	r3, r3, #1
   1a8cc:	bhi	1a8b0 <__assert_fail@plt+0x95d8>
   1a8d0:	ldr	r3, [ip, r1, lsl #2]
   1a8d4:	cmp	r9, r3
   1a8d8:	beq	1a970 <__assert_fail@plt+0x9698>
   1a8dc:	ldr	r3, [r5]
   1a8e0:	add	r2, r3, r9, lsl #3
   1a8e4:	ldrb	r2, [r2, #4]
   1a8e8:	cmp	r2, r6
   1a8ec:	bne	1a8fc <__assert_fail@plt+0x9624>
   1a8f0:	ldr	r3, [r3, r9, lsl #3]
   1a8f4:	cmp	r8, r3
   1a8f8:	beq	1a954 <__assert_fail@plt+0x967c>
   1a8fc:	mov	r1, r9
   1a900:	mov	r0, r4
   1a904:	bl	17640 <__assert_fail@plt+0x6368>
   1a908:	cmp	r0, #0
   1a90c:	beq	1a9ac <__assert_fail@plt+0x96d4>
   1a910:	add	r9, r9, r9, lsl #1
   1a914:	ldr	r3, [r5, #20]
   1a918:	lsl	r9, r9, #2
   1a91c:	add	r3, r3, r9
   1a920:	ldr	r2, [r3, #4]
   1a924:	cmp	r2, #0
   1a928:	beq	1a970 <__assert_fail@plt+0x9698>
   1a92c:	cmp	r2, #2
   1a930:	beq	1a97c <__assert_fail@plt+0x96a4>
   1a934:	ldr	r3, [r3, #8]
   1a938:	ldr	r9, [r3]
   1a93c:	b	1a878 <__assert_fail@plt+0x95a0>
   1a940:	mov	r3, r2
   1a944:	mov	r2, r0
   1a948:	add	r1, r3, #1
   1a94c:	mov	r0, r2
   1a950:	b	1a890 <__assert_fail@plt+0x95b8>
   1a954:	cmp	r6, #9
   1a958:	bne	1a970 <__assert_fail@plt+0x9698>
   1a95c:	mov	r1, r9
   1a960:	mov	r0, r4
   1a964:	bl	17640 <__assert_fail@plt+0x6368>
   1a968:	cmp	r0, #0
   1a96c:	beq	1a9ac <__assert_fail@plt+0x96d4>
   1a970:	mov	r0, #0
   1a974:	add	sp, sp, #12
   1a978:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a97c:	ldr	r2, [r3, #8]
   1a980:	mov	r1, r4
   1a984:	mov	r3, r8
   1a988:	ldr	r2, [r2, #4]
   1a98c:	mov	r0, r5
   1a990:	str	r6, [sp]
   1a994:	bl	1a858 <__assert_fail@plt+0x9580>
   1a998:	cmp	r0, #0
   1a99c:	bne	1a974 <__assert_fail@plt+0x969c>
   1a9a0:	ldr	r3, [r5, #20]
   1a9a4:	add	r3, r3, r9
   1a9a8:	b	1a934 <__assert_fail@plt+0x965c>
   1a9ac:	mov	r0, #12
   1a9b0:	add	sp, sp, #12
   1a9b4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a9b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a9bc:	sub	sp, sp, #20
   1a9c0:	ldr	r8, [pc, #940]	; 1ad74 <__assert_fail@plt+0x9a9c>
   1a9c4:	ldr	fp, [sp, #56]	; 0x38
   1a9c8:	mov	r7, r1
   1a9cc:	mov	r5, r0
   1a9d0:	mov	r4, r2
   1a9d4:	lsl	r6, r1, #3
   1a9d8:	str	r3, [sp, #8]
   1a9dc:	ldr	lr, [r5]
   1a9e0:	add	r6, lr, r6
   1a9e4:	ldrb	r3, [r6, #4]
   1a9e8:	cmp	r3, #4
   1a9ec:	beq	1ac80 <__assert_fail@plt+0x99a8>
   1a9f0:	add	sl, r7, r7, lsl #1
   1a9f4:	ldr	r0, [r5, #20]
   1a9f8:	lsl	sl, sl, #2
   1a9fc:	add	ip, r0, sl
   1aa00:	ldr	r3, [ip, #4]
   1aa04:	cmp	r3, #0
   1aa08:	beq	1ad48 <__assert_fail@plt+0x9a70>
   1aa0c:	cmp	r3, #1
   1aa10:	beq	1ac14 <__assert_fail@plt+0x993c>
   1aa14:	ldr	r2, [r5, #8]
   1aa18:	add	r4, r4, r4, lsl #1
   1aa1c:	sub	r1, r2, #1
   1aa20:	cmp	r1, #0
   1aa24:	add	r3, lr, r1, lsl #3
   1aa28:	lsl	r9, r4, #2
   1aa2c:	ldrb	r6, [r3, #6]
   1aa30:	ldr	r4, [ip, #8]
   1aa34:	add	r0, r0, r9
   1aa38:	movle	ip, #0
   1aa3c:	movgt	ip, #1
   1aa40:	ands	ip, ip, r6, lsr #2
   1aa44:	mov	ip, #0
   1aa48:	ldr	r4, [r4]
   1aa4c:	str	ip, [r0, #4]
   1aa50:	beq	1ab60 <__assert_fail@plt+0x9888>
   1aa54:	ldr	ip, [r5, #16]
   1aa58:	rsb	r7, r3, r2, lsl #3
   1aa5c:	sub	r7, r7, #16
   1aa60:	add	r2, ip, r2, lsl #2
   1aa64:	b	1aa88 <__assert_fail@plt+0x97b0>
   1aa68:	add	r3, lr, r6
   1aa6c:	sub	r1, r1, #1
   1aa70:	ldrb	r6, [r3, #6]
   1aa74:	cmp	r1, #0
   1aa78:	movle	ip, #0
   1aa7c:	movgt	ip, #1
   1aa80:	ands	ip, ip, r6, lsr #2
   1aa84:	beq	1ab60 <__assert_fail@plt+0x9888>
   1aa88:	ldr	ip, [r2, #-4]!
   1aa8c:	add	r6, r3, r7
   1aa90:	cmp	r4, ip
   1aa94:	bne	1aa68 <__assert_fail@plt+0x9790>
   1aa98:	ldr	r3, [r3, #4]
   1aa9c:	and	r3, r8, r3, lsr #8
   1aaa0:	cmp	fp, r3
   1aaa4:	bne	1aa68 <__assert_fail@plt+0x9790>
   1aaa8:	bl	17640 <__assert_fail@plt+0x6368>
   1aaac:	cmp	r0, #0
   1aab0:	beq	1ab54 <__assert_fail@plt+0x987c>
   1aab4:	ldr	r2, [r5, #20]
   1aab8:	ldr	r3, [r5]
   1aabc:	add	sl, r2, sl
   1aac0:	mov	r0, r5
   1aac4:	ldr	r2, [sl, #8]
   1aac8:	ldr	r7, [r2, #4]
   1aacc:	lsl	r6, r7, #3
   1aad0:	add	r3, r3, r6
   1aad4:	ldm	r3, {r1, r2}
   1aad8:	bl	1748c <__assert_fail@plt+0x61b4>
   1aadc:	cmn	r0, #1
   1aae0:	mov	r4, r0
   1aae4:	beq	1ab54 <__assert_fail@plt+0x987c>
   1aae8:	ldr	r1, [r5]
   1aaec:	ldr	lr, [pc, #644]	; 1ad78 <__assert_fail@plt+0x9aa0>
   1aaf0:	add	r2, r1, r4, lsl #3
   1aaf4:	and	r0, fp, r8
   1aaf8:	ldr	r3, [r2, #4]
   1aafc:	add	ip, r1, r6
   1ab00:	bic	r3, r3, lr
   1ab04:	orr	r3, r3, r0, lsl #8
   1ab08:	str	r3, [r2, #4]
   1ab0c:	ldr	ip, [ip, #4]
   1ab10:	bic	r3, r3, lr
   1ab14:	mov	r1, r4
   1ab18:	and	ip, r8, ip, lsr #8
   1ab1c:	orr	r0, r0, ip
   1ab20:	orr	r3, r3, r0, lsl #8
   1ab24:	str	r3, [r2, #4]
   1ab28:	lsr	r3, r3, #16
   1ab2c:	uxtb	r3, r3
   1ab30:	orr	r3, r3, #4
   1ab34:	strb	r3, [r2, #6]
   1ab38:	ldr	r3, [r5, #16]
   1ab3c:	ldr	r0, [r5, #20]
   1ab40:	str	r7, [r3, r4, lsl #2]
   1ab44:	add	r0, r0, r9
   1ab48:	bl	17640 <__assert_fail@plt+0x6368>
   1ab4c:	cmp	r0, #0
   1ab50:	bne	1a9dc <__assert_fail@plt+0x9704>
   1ab54:	mov	r0, #12
   1ab58:	add	sp, sp, #20
   1ab5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab60:	lsl	r6, r4, #3
   1ab64:	add	lr, lr, r6
   1ab68:	mov	r0, r5
   1ab6c:	ldm	lr, {r1, r2}
   1ab70:	bl	1748c <__assert_fail@plt+0x61b4>
   1ab74:	cmn	r0, #1
   1ab78:	mov	r7, r0
   1ab7c:	beq	1ab54 <__assert_fail@plt+0x987c>
   1ab80:	ldr	r3, [r5]
   1ab84:	ldr	ip, [pc, #492]	; 1ad78 <__assert_fail@plt+0x9aa0>
   1ab88:	add	r2, r3, r7, lsl #3
   1ab8c:	add	r6, r3, r6
   1ab90:	ldr	r3, [r2, #4]
   1ab94:	and	r0, fp, r8
   1ab98:	bic	r3, r3, ip
   1ab9c:	orr	r3, r3, r0, lsl #8
   1aba0:	str	r3, [r2, #4]
   1aba4:	ldr	ip, [r6, #4]
   1aba8:	ldr	lr, [pc, #456]	; 1ad78 <__assert_fail@plt+0x9aa0>
   1abac:	mov	r1, r7
   1abb0:	and	ip, r8, ip, lsr #8
   1abb4:	orr	r0, r0, ip
   1abb8:	bic	r3, r3, lr
   1abbc:	orr	r3, r3, r0, lsl #8
   1abc0:	str	r3, [r2, #4]
   1abc4:	lsr	r3, r3, #16
   1abc8:	uxtb	r3, r3
   1abcc:	orr	r3, r3, #4
   1abd0:	strb	r3, [r2, #6]
   1abd4:	ldr	r3, [r5, #16]
   1abd8:	ldr	r0, [r5, #20]
   1abdc:	str	r4, [r3, r7, lsl #2]
   1abe0:	add	r0, r0, r9
   1abe4:	bl	17640 <__assert_fail@plt+0x6368>
   1abe8:	cmp	r0, #0
   1abec:	beq	1ab54 <__assert_fail@plt+0x987c>
   1abf0:	str	fp, [sp]
   1abf4:	mov	r2, r7
   1abf8:	mov	r1, r4
   1abfc:	ldr	r3, [sp, #8]
   1ac00:	mov	r0, r5
   1ac04:	bl	1a9b8 <__assert_fail@plt+0x96e0>
   1ac08:	cmp	r0, #0
   1ac0c:	beq	1aab4 <__assert_fail@plt+0x97dc>
   1ac10:	b	1ab58 <__assert_fail@plt+0x9880>
   1ac14:	add	r9, r4, r4, lsl #1
   1ac18:	ldr	r3, [ip, #8]
   1ac1c:	ldr	r2, [sp, #8]
   1ac20:	cmp	r7, r4
   1ac24:	lsl	r9, r9, #2
   1ac28:	sub	r2, r7, r2
   1ac2c:	add	r0, r0, r9
   1ac30:	clz	r2, r2
   1ac34:	lsr	r2, r2, #5
   1ac38:	moveq	r2, #0
   1ac3c:	ldr	r7, [r3]
   1ac40:	cmp	r2, #0
   1ac44:	mov	r3, #0
   1ac48:	str	r3, [r0, #4]
   1ac4c:	bne	1ad5c <__assert_fail@plt+0x9a84>
   1ac50:	ldr	r3, [r6, #4]
   1ac54:	lsl	r6, r7, #3
   1ac58:	add	lr, lr, r6
   1ac5c:	and	r3, r8, r3, lsr #8
   1ac60:	ldm	lr, {r1, r2}
   1ac64:	mov	r0, r5
   1ac68:	orr	fp, fp, r3
   1ac6c:	bl	1748c <__assert_fail@plt+0x61b4>
   1ac70:	cmn	r0, #1
   1ac74:	mov	r4, r0
   1ac78:	bne	1aae8 <__assert_fail@plt+0x9810>
   1ac7c:	b	1ab54 <__assert_fail@plt+0x987c>
   1ac80:	ldr	r3, [r5, #12]
   1ac84:	lsl	sl, r7, #2
   1ac88:	add	r9, r4, r4, lsl #1
   1ac8c:	ldr	r7, [r3, r7, lsl #2]
   1ac90:	ldr	r3, [r5, #20]
   1ac94:	lsl	r9, r9, #2
   1ac98:	lsl	r6, r7, #3
   1ac9c:	add	lr, lr, r6
   1aca0:	add	r3, r3, r9
   1aca4:	mov	r0, #0
   1aca8:	ldm	lr, {r1, r2}
   1acac:	str	r0, [r3, #4]
   1acb0:	mov	r0, r5
   1acb4:	str	r4, [sp, #12]
   1acb8:	bl	1748c <__assert_fail@plt+0x61b4>
   1acbc:	cmn	r0, #1
   1acc0:	mov	r4, r0
   1acc4:	beq	1ab54 <__assert_fail@plt+0x987c>
   1acc8:	ldr	ip, [r5]
   1accc:	ldr	lr, [pc, #164]	; 1ad78 <__assert_fail@plt+0x9aa0>
   1acd0:	add	r0, ip, r0, lsl #3
   1acd4:	and	r2, fp, r8
   1acd8:	ldr	r3, [r0, #4]
   1acdc:	add	ip, ip, r6
   1ace0:	bic	r3, r3, lr
   1ace4:	orr	r3, r3, r2, lsl #8
   1ace8:	str	r3, [r0, #4]
   1acec:	ldr	ip, [ip, #4]
   1acf0:	bic	r3, r3, lr
   1acf4:	mov	r1, r4
   1acf8:	and	ip, r8, ip, lsr #8
   1acfc:	orr	r2, r2, ip
   1ad00:	orr	r3, r3, r2, lsl #8
   1ad04:	str	r3, [r0, #4]
   1ad08:	lsr	r3, r3, #16
   1ad0c:	uxtb	r3, r3
   1ad10:	orr	r3, r3, #4
   1ad14:	strb	r3, [r0, #6]
   1ad18:	ldr	r2, [r5, #16]
   1ad1c:	ldr	r3, [r5, #12]
   1ad20:	ldr	ip, [sp, #12]
   1ad24:	ldr	r0, [r5, #20]
   1ad28:	str	r7, [r2, r4, lsl #2]
   1ad2c:	ldr	r2, [r3, sl]
   1ad30:	add	r0, r0, r9
   1ad34:	str	r2, [r3, ip, lsl #2]
   1ad38:	bl	17640 <__assert_fail@plt+0x6368>
   1ad3c:	cmp	r0, #0
   1ad40:	bne	1a9dc <__assert_fail@plt+0x9704>
   1ad44:	b	1ab54 <__assert_fail@plt+0x987c>
   1ad48:	ldr	r2, [r5, #12]
   1ad4c:	mov	r0, r3
   1ad50:	ldr	r3, [r2, r7, lsl #2]
   1ad54:	str	r3, [r2, r4, lsl #2]
   1ad58:	b	1ab58 <__assert_fail@plt+0x9880>
   1ad5c:	mov	r1, r7
   1ad60:	bl	17640 <__assert_fail@plt+0x6368>
   1ad64:	cmp	r0, #0
   1ad68:	movne	r0, #0
   1ad6c:	bne	1ab58 <__assert_fail@plt+0x9880>
   1ad70:	b	1ab54 <__assert_fail@plt+0x987c>
   1ad74:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1ad78:	andeq	pc, r3, r0, lsl #30
   1ad7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad80:	add	r8, r2, r2, lsl #1
   1ad84:	mov	r4, r2
   1ad88:	ldr	r2, [r1, #20]
   1ad8c:	lsl	r8, r8, #2
   1ad90:	add	r2, r2, r8
   1ad94:	mov	r7, r1
   1ad98:	ldr	r1, [r2, #4]
   1ad9c:	sub	sp, sp, #44	; 0x2c
   1ada0:	add	r1, r1, #1
   1ada4:	str	r0, [sp, #8]
   1ada8:	mov	r2, #0
   1adac:	lsl	r0, r1, #2
   1adb0:	str	r3, [sp, #12]
   1adb4:	str	r1, [sp, #16]
   1adb8:	str	r2, [sp, #20]
   1adbc:	bl	294e4 <__assert_fail@plt+0x1820c>
   1adc0:	cmp	r0, #0
   1adc4:	str	r0, [sp, #24]
   1adc8:	beq	1afe8 <__assert_fail@plt+0x9d10>
   1adcc:	ldr	r6, [r7]
   1add0:	ldr	r3, [sp, #20]
   1add4:	lsl	r5, r4, #3
   1add8:	add	lr, r6, r5
   1addc:	str	r4, [r0, r3, lsl #2]
   1ade0:	ldr	r1, [r7, #24]
   1ade4:	ldr	r0, [lr, #4]
   1ade8:	ldr	r2, [pc, #520]	; 1aff8 <__assert_fail@plt+0x9d20>
   1adec:	add	ip, r1, r8
   1adf0:	and	r2, r2, r0
   1adf4:	add	r3, r3, #1
   1adf8:	cmp	r2, #0
   1adfc:	mvn	r2, #0
   1ae00:	str	r3, [sp, #20]
   1ae04:	str	r2, [ip, #4]
   1ae08:	beq	1ae38 <__assert_fail@plt+0x9b60>
   1ae0c:	ldr	r3, [r7, #20]
   1ae10:	add	r3, r3, r8
   1ae14:	ldr	r2, [r3, #4]
   1ae18:	cmp	r2, #0
   1ae1c:	beq	1af4c <__assert_fail@plt+0x9c74>
   1ae20:	ldr	r3, [r3, #8]
   1ae24:	ldr	r3, [r3]
   1ae28:	add	r6, r6, r3, lsl #3
   1ae2c:	ldrb	r3, [r6, #6]
   1ae30:	tst	r3, #4
   1ae34:	beq	1afb0 <__assert_fail@plt+0x9cd8>
   1ae38:	ldrb	r3, [lr, #4]
   1ae3c:	tst	r3, #8
   1ae40:	beq	1af48 <__assert_fail@plt+0x9c70>
   1ae44:	ldr	ip, [r7, #20]
   1ae48:	add	r3, ip, r8
   1ae4c:	ldr	r2, [r3, #4]
   1ae50:	cmp	r2, #0
   1ae54:	ble	1af48 <__assert_fail@plt+0x9c70>
   1ae58:	mov	sl, #0
   1ae5c:	mov	r5, sl
   1ae60:	mov	fp, #1
   1ae64:	add	r9, sp, #28
   1ae68:	b	1aed4 <__assert_fail@plt+0x9bfc>
   1ae6c:	ldm	r3, {r0, r1, r2}
   1ae70:	stm	r9, {r0, r1, r2}
   1ae74:	ldr	r3, [sp, #32]
   1ae78:	cmp	r3, #0
   1ae7c:	beq	1aea8 <__assert_fail@plt+0x9bd0>
   1ae80:	ldr	r2, [sp, #20]
   1ae84:	ldr	r1, [sp, #16]
   1ae88:	add	r2, r2, r3, lsl #1
   1ae8c:	cmp	r1, r2
   1ae90:	blt	1af88 <__assert_fail@plt+0x9cb0>
   1ae94:	mov	r1, r9
   1ae98:	add	r0, sp, #16
   1ae9c:	bl	17bc4 <__assert_fail@plt+0x68ec>
   1aea0:	cmp	r0, #0
   1aea4:	bne	1af18 <__assert_fail@plt+0x9c40>
   1aea8:	ldr	r1, [r7, #24]
   1aeac:	add	r4, r1, r4
   1aeb0:	ldr	r3, [r4, #4]
   1aeb4:	cmp	r3, #0
   1aeb8:	beq	1af74 <__assert_fail@plt+0x9c9c>
   1aebc:	ldr	ip, [r7, #20]
   1aec0:	add	r3, ip, r8
   1aec4:	add	r5, r5, #1
   1aec8:	ldr	r2, [r3, #4]
   1aecc:	cmp	r2, r5
   1aed0:	ble	1af28 <__assert_fail@plt+0x9c50>
   1aed4:	ldr	r3, [r3, #8]
   1aed8:	ldr	r2, [r3, r5, lsl #2]
   1aedc:	add	r4, r2, r2, lsl #1
   1aee0:	lsl	r4, r4, #2
   1aee4:	add	r3, r1, r4
   1aee8:	ldr	r0, [r3, #4]
   1aeec:	cmn	r0, #1
   1aef0:	moveq	sl, fp
   1aef4:	beq	1aec0 <__assert_fail@plt+0x9be8>
   1aef8:	cmp	r0, #0
   1aefc:	bne	1ae6c <__assert_fail@plt+0x9b94>
   1af00:	mov	r3, #0
   1af04:	mov	r1, r7
   1af08:	mov	r0, r9
   1af0c:	bl	1ad7c <__assert_fail@plt+0x9aa4>
   1af10:	cmp	r0, #0
   1af14:	beq	1ae74 <__assert_fail@plt+0x9b9c>
   1af18:	mov	r3, r0
   1af1c:	mov	r0, r3
   1af20:	add	sp, sp, #44	; 0x2c
   1af24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af28:	ldr	r3, [sp, #12]
   1af2c:	eor	r3, r3, #1
   1af30:	tst	sl, r3
   1af34:	addne	r8, r1, r8
   1af38:	movne	r3, #0
   1af3c:	strne	r3, [r8, #4]
   1af40:	addne	lr, sp, #16
   1af44:	bne	1af58 <__assert_fail@plt+0x9c80>
   1af48:	add	ip, r1, r8
   1af4c:	add	lr, sp, #16
   1af50:	ldm	lr, {r0, r1, r2}
   1af54:	stm	ip, {r0, r1, r2}
   1af58:	mov	r3, #0
   1af5c:	ldm	lr, {r0, r1, r2}
   1af60:	ldr	ip, [sp, #8]
   1af64:	stm	ip, {r0, r1, r2}
   1af68:	mov	r0, r3
   1af6c:	add	sp, sp, #44	; 0x2c
   1af70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af74:	ldr	r0, [sp, #36]	; 0x24
   1af78:	bl	296b0 <__assert_fail@plt+0x183d8>
   1af7c:	mov	sl, fp
   1af80:	ldr	r1, [r7, #24]
   1af84:	b	1aebc <__assert_fail@plt+0x9be4>
   1af88:	add	r3, r1, r3
   1af8c:	ldr	r0, [sp, #24]
   1af90:	lsl	r1, r3, #3
   1af94:	lsl	r6, r3, #1
   1af98:	bl	29510 <__assert_fail@plt+0x18238>
   1af9c:	cmp	r0, #0
   1afa0:	beq	1afe8 <__assert_fail@plt+0x9d10>
   1afa4:	str	r0, [sp, #24]
   1afa8:	str	r6, [sp, #16]
   1afac:	b	1ae94 <__assert_fail@plt+0x9bbc>
   1afb0:	ldr	r2, [pc, #68]	; 1affc <__assert_fail@plt+0x9d24>
   1afb4:	mov	r3, r4
   1afb8:	and	r0, r2, r0, lsr #8
   1afbc:	str	r0, [sp]
   1afc0:	mov	r2, r4
   1afc4:	mov	r1, r4
   1afc8:	mov	r0, r7
   1afcc:	bl	1a9b8 <__assert_fail@plt+0x96e0>
   1afd0:	subs	r3, r0, #0
   1afd4:	bne	1af68 <__assert_fail@plt+0x9c90>
   1afd8:	ldr	lr, [r7]
   1afdc:	ldr	r1, [r7, #24]
   1afe0:	add	lr, lr, r5
   1afe4:	b	1ae38 <__assert_fail@plt+0x9b60>
   1afe8:	mov	r3, #12
   1afec:	mov	r0, r3
   1aff0:	add	sp, sp, #44	; 0x2c
   1aff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aff8:	andeq	pc, r3, r0, lsl #30
   1affc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1b000:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b004:	mov	r8, r1
   1b008:	ldr	r1, [r1, #4]
   1b00c:	sub	sp, sp, #24
   1b010:	mov	r6, #0
   1b014:	mov	r7, r0
   1b018:	lsl	r0, r1, #2
   1b01c:	mov	r5, r2
   1b020:	mov	r4, r3
   1b024:	str	r1, [sp, #12]
   1b028:	str	r6, [sp, #16]
   1b02c:	bl	294e4 <__assert_fail@plt+0x1820c>
   1b030:	cmp	r0, r6
   1b034:	str	r0, [sp, #20]
   1b038:	beq	1b168 <__assert_fail@plt+0x9e90>
   1b03c:	ldr	r1, [r8, #4]
   1b040:	ldr	r0, [r8, #8]
   1b044:	cmp	r1, r6
   1b048:	ble	1b0e0 <__assert_fail@plt+0x9e08>
   1b04c:	ldr	r2, [r0, r6, lsl #2]
   1b050:	ldr	r9, [r7, #24]
   1b054:	add	r3, r2, r2, lsl #1
   1b058:	add	r9, r9, r3, lsl #2
   1b05c:	ldr	sl, [r9, #4]
   1b060:	cmp	sl, #0
   1b064:	ble	1b100 <__assert_fail@plt+0x9e28>
   1b068:	ldr	r0, [r9, #8]
   1b06c:	ldr	lr, [r7]
   1b070:	sub	r0, r0, #4
   1b074:	mov	r3, #0
   1b078:	b	1b084 <__assert_fail@plt+0x9dac>
   1b07c:	cmp	sl, r3
   1b080:	beq	1b104 <__assert_fail@plt+0x9e2c>
   1b084:	ldr	r1, [r0, #4]!
   1b088:	add	r3, r3, #1
   1b08c:	add	ip, lr, r1, lsl #3
   1b090:	ldrb	ip, [ip, #4]
   1b094:	cmp	r4, ip
   1b098:	bne	1b07c <__assert_fail@plt+0x9da4>
   1b09c:	ldr	ip, [lr, r1, lsl #3]
   1b0a0:	cmp	r5, ip
   1b0a4:	bne	1b07c <__assert_fail@plt+0x9da4>
   1b0a8:	cmn	r1, #1
   1b0ac:	beq	1b104 <__assert_fail@plt+0x9e2c>
   1b0b0:	str	r4, [sp]
   1b0b4:	mov	r3, r5
   1b0b8:	add	r1, sp, #12
   1b0bc:	mov	r0, r7
   1b0c0:	bl	1a858 <__assert_fail@plt+0x9580>
   1b0c4:	subs	r9, r0, #0
   1b0c8:	bne	1b12c <__assert_fail@plt+0x9e54>
   1b0cc:	ldr	r0, [r8, #8]
   1b0d0:	ldr	r1, [r8, #4]
   1b0d4:	add	r6, r6, #1
   1b0d8:	cmp	r6, r1
   1b0dc:	blt	1b04c <__assert_fail@plt+0x9d74>
   1b0e0:	bl	296b0 <__assert_fail@plt+0x183d8>
   1b0e4:	add	r3, sp, #24
   1b0e8:	mov	r9, #0
   1b0ec:	ldmdb	r3, {r0, r1, r2}
   1b0f0:	stm	r8, {r0, r1, r2}
   1b0f4:	mov	r0, r9
   1b0f8:	add	sp, sp, #24
   1b0fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b100:	beq	1b0d4 <__assert_fail@plt+0x9dfc>
   1b104:	ldr	r3, [sp, #16]
   1b108:	ldr	r2, [sp, #12]
   1b10c:	add	r3, r3, sl, lsl #1
   1b110:	cmp	r2, r3
   1b114:	blt	1b140 <__assert_fail@plt+0x9e68>
   1b118:	mov	r1, r9
   1b11c:	add	r0, sp, #12
   1b120:	bl	17bc4 <__assert_fail@plt+0x68ec>
   1b124:	subs	r9, r0, #0
   1b128:	beq	1b0cc <__assert_fail@plt+0x9df4>
   1b12c:	ldr	r0, [sp, #20]
   1b130:	bl	296b0 <__assert_fail@plt+0x183d8>
   1b134:	mov	r0, r9
   1b138:	add	sp, sp, #24
   1b13c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b140:	add	r2, sl, r2
   1b144:	ldr	r0, [sp, #20]
   1b148:	lsl	r1, r2, #3
   1b14c:	lsl	sl, r2, #1
   1b150:	bl	29510 <__assert_fail@plt+0x18238>
   1b154:	cmp	r0, #0
   1b158:	beq	1b178 <__assert_fail@plt+0x9ea0>
   1b15c:	str	r0, [sp, #20]
   1b160:	str	sl, [sp, #12]
   1b164:	b	1b118 <__assert_fail@plt+0x9e40>
   1b168:	mov	r9, #12
   1b16c:	mov	r0, r9
   1b170:	add	sp, sp, #24
   1b174:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b178:	mov	r9, #12
   1b17c:	b	1b12c <__assert_fail@plt+0x9e54>
   1b180:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b184:	sub	sp, sp, #172	; 0xac
   1b188:	mov	ip, r3
   1b18c:	str	r0, [sp, #64]	; 0x40
   1b190:	ldr	r0, [r0, #84]	; 0x54
   1b194:	str	r3, [sp, #152]	; 0x98
   1b198:	mov	r3, r0
   1b19c:	str	r0, [sp, #120]	; 0x78
   1b1a0:	ldr	r3, [r3, #24]
   1b1a4:	add	r0, ip, ip, lsl #1
   1b1a8:	str	r1, [sp, #20]
   1b1ac:	add	r3, r3, r0, lsl #2
   1b1b0:	str	r3, [sp, #124]	; 0x7c
   1b1b4:	ldr	r3, [r3, #4]
   1b1b8:	cmp	r3, #0
   1b1bc:	ble	1b25c <__assert_fail@plt+0x9f84>
   1b1c0:	mov	fp, r2
   1b1c4:	ldr	r2, [sp, #208]	; 0xd0
   1b1c8:	mov	r1, #1
   1b1cc:	add	r2, r2, r2, lsl r1
   1b1d0:	lsl	r1, r1, fp
   1b1d4:	lsl	r2, r2, #3
   1b1d8:	str	r2, [sp, #44]	; 0x2c
   1b1dc:	add	r2, r2, #24
   1b1e0:	str	r2, [sp, #96]	; 0x60
   1b1e4:	ldr	r2, [sp, #20]
   1b1e8:	str	r1, [sp, #24]
   1b1ec:	mvn	r1, r1
   1b1f0:	str	r1, [sp, #36]	; 0x24
   1b1f4:	and	r1, r2, #2
   1b1f8:	and	r2, r2, #1
   1b1fc:	str	r2, [sp, #32]
   1b200:	mov	r2, #0
   1b204:	str	r1, [sp, #16]
   1b208:	str	r2, [sp, #108]	; 0x6c
   1b20c:	ldr	r2, [sp, #124]	; 0x7c
   1b210:	ldr	r0, [sp, #108]	; 0x6c
   1b214:	ldr	r1, [r2, #8]
   1b218:	ldr	r2, [sp, #120]	; 0x78
   1b21c:	ldr	r1, [r1, r0, lsl #2]
   1b220:	ldr	r2, [r2]
   1b224:	str	r1, [sp, #100]	; 0x64
   1b228:	add	r1, r2, r1, lsl #3
   1b22c:	ldrb	r1, [r1, #4]
   1b230:	cmp	r1, #8
   1b234:	beq	1b2fc <__assert_fail@plt+0xa024>
   1b238:	cmp	r1, #9
   1b23c:	beq	1b2d8 <__assert_fail@plt+0xa000>
   1b240:	cmp	r1, #4
   1b244:	beq	1b270 <__assert_fail@plt+0x9f98>
   1b248:	ldr	r2, [sp, #108]	; 0x6c
   1b24c:	add	r2, r2, #1
   1b250:	cmp	r2, r3
   1b254:	str	r2, [sp, #108]	; 0x6c
   1b258:	blt	1b20c <__assert_fail@plt+0x9f34>
   1b25c:	ldr	r3, [sp, #20]
   1b260:	lsr	r0, r3, #1
   1b264:	and	r0, r0, #1
   1b268:	add	sp, sp, #172	; 0xac
   1b26c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b270:	ldr	r2, [sp, #208]	; 0xd0
   1b274:	cmn	r2, #1
   1b278:	beq	1b248 <__assert_fail@plt+0x9f70>
   1b27c:	ldr	r3, [sp, #100]	; 0x64
   1b280:	ldr	r2, [sp, #64]	; 0x40
   1b284:	add	r3, r3, r3, lsl #1
   1b288:	ldr	r2, [r2, #116]	; 0x74
   1b28c:	lsl	r3, r3, #2
   1b290:	str	r3, [sp, #156]	; 0x9c
   1b294:	ldr	r3, [sp, #96]	; 0x60
   1b298:	add	r3, r2, r3
   1b29c:	str	r3, [sp, #88]	; 0x58
   1b2a0:	ldr	r3, [sp, #88]	; 0x58
   1b2a4:	ldr	r2, [sp, #100]	; 0x64
   1b2a8:	ldr	r3, [r3, #-24]	; 0xffffffe8
   1b2ac:	cmp	r2, r3
   1b2b0:	beq	1b320 <__assert_fail@plt+0xa048>
   1b2b4:	ldr	r3, [sp, #88]	; 0x58
   1b2b8:	add	r3, r3, #24
   1b2bc:	str	r3, [sp, #88]	; 0x58
   1b2c0:	ldrb	r3, [r3, #-28]	; 0xffffffe4
   1b2c4:	cmp	r3, #0
   1b2c8:	bne	1b2a0 <__assert_fail@plt+0x9fc8>
   1b2cc:	ldr	r3, [sp, #124]	; 0x7c
   1b2d0:	ldr	r3, [r3, #4]
   1b2d4:	b	1b248 <__assert_fail@plt+0x9f70>
   1b2d8:	ldr	r1, [sp, #16]
   1b2dc:	cmp	r1, #0
   1b2e0:	beq	1b248 <__assert_fail@plt+0x9f70>
   1b2e4:	ldr	r1, [sp, #100]	; 0x64
   1b2e8:	ldr	r2, [r2, r1, lsl #3]
   1b2ec:	cmp	fp, r2
   1b2f0:	bne	1b248 <__assert_fail@plt+0x9f70>
   1b2f4:	mov	r0, #0
   1b2f8:	b	1b268 <__assert_fail@plt+0x9f90>
   1b2fc:	ldr	r1, [sp, #32]
   1b300:	cmp	r1, #0
   1b304:	beq	1b248 <__assert_fail@plt+0x9f70>
   1b308:	ldr	r1, [sp, #100]	; 0x64
   1b30c:	ldr	r2, [r2, r1, lsl #3]
   1b310:	cmp	r2, fp
   1b314:	bne	1b248 <__assert_fail@plt+0x9f70>
   1b318:	mvn	r0, #0
   1b31c:	b	1b268 <__assert_fail@plt+0x9f90>
   1b320:	cmp	fp, #31
   1b324:	bgt	1b33c <__assert_fail@plt+0xa064>
   1b328:	ldr	r3, [sp, #88]	; 0x58
   1b32c:	ldr	r2, [sp, #24]
   1b330:	ldr	r3, [r3, #-8]
   1b334:	tst	r2, r3
   1b338:	beq	1b2b4 <__assert_fail@plt+0x9fdc>
   1b33c:	ldr	r3, [sp, #120]	; 0x78
   1b340:	ldr	r2, [sp, #156]	; 0x9c
   1b344:	ldr	r3, [r3, #20]
   1b348:	add	r3, r3, r2
   1b34c:	ldr	r2, [sp, #152]	; 0x98
   1b350:	ldr	r3, [r3, #8]
   1b354:	ldr	r3, [r3]
   1b358:	cmp	r2, r3
   1b35c:	str	r3, [sp, #128]	; 0x80
   1b360:	beq	1b414 <__assert_fail@plt+0xa13c>
   1b364:	ldr	r3, [sp, #64]	; 0x40
   1b368:	ldr	r3, [r3, #84]	; 0x54
   1b36c:	mov	r2, r3
   1b370:	str	r3, [sp, #132]	; 0x84
   1b374:	ldr	r3, [sp, #128]	; 0x80
   1b378:	ldr	r2, [r2, #24]
   1b37c:	add	r3, r3, r3, lsl #1
   1b380:	add	r3, r2, r3, lsl #2
   1b384:	str	r3, [sp, #136]	; 0x88
   1b388:	ldr	r3, [r3, #4]
   1b38c:	cmp	r3, #0
   1b390:	ble	1bb44 <__assert_fail@plt+0xa86c>
   1b394:	mov	r2, #0
   1b398:	str	r2, [sp, #112]	; 0x70
   1b39c:	b	1b3c4 <__assert_fail@plt+0xa0ec>
   1b3a0:	cmp	r1, #9
   1b3a4:	beq	1bb64 <__assert_fail@plt+0xa88c>
   1b3a8:	cmp	r1, #4
   1b3ac:	beq	1b420 <__assert_fail@plt+0xa148>
   1b3b0:	ldr	r2, [sp, #112]	; 0x70
   1b3b4:	add	r2, r2, #1
   1b3b8:	cmp	r2, r3
   1b3bc:	str	r2, [sp, #112]	; 0x70
   1b3c0:	bge	1bb44 <__assert_fail@plt+0xa86c>
   1b3c4:	ldr	r2, [sp, #136]	; 0x88
   1b3c8:	ldr	r0, [sp, #112]	; 0x70
   1b3cc:	ldr	r1, [r2, #8]
   1b3d0:	ldr	r2, [sp, #132]	; 0x84
   1b3d4:	ldr	r1, [r1, r0, lsl #2]
   1b3d8:	ldr	r2, [r2]
   1b3dc:	str	r1, [sp, #104]	; 0x68
   1b3e0:	add	r1, r2, r1, lsl #3
   1b3e4:	ldrb	r1, [r1, #4]
   1b3e8:	cmp	r1, #8
   1b3ec:	bne	1b3a0 <__assert_fail@plt+0xa0c8>
   1b3f0:	ldr	r1, [sp, #32]
   1b3f4:	cmp	r1, #0
   1b3f8:	beq	1b3b0 <__assert_fail@plt+0xa0d8>
   1b3fc:	ldr	r1, [sp, #104]	; 0x68
   1b400:	ldr	r2, [r2, r1, lsl #3]
   1b404:	cmp	fp, r2
   1b408:	bne	1b3b0 <__assert_fail@plt+0xa0d8>
   1b40c:	mvn	r0, #0
   1b410:	b	1b268 <__assert_fail@plt+0x9f90>
   1b414:	ldr	r3, [sp, #32]
   1b418:	rsb	r0, r3, #0
   1b41c:	b	1b268 <__assert_fail@plt+0x9f90>
   1b420:	ldr	r3, [sp, #104]	; 0x68
   1b424:	ldr	r2, [sp, #64]	; 0x40
   1b428:	add	r3, r3, r3, lsl #1
   1b42c:	ldr	r2, [r2, #116]	; 0x74
   1b430:	lsl	r3, r3, #2
   1b434:	str	r3, [sp, #160]	; 0xa0
   1b438:	ldr	r3, [sp, #96]	; 0x60
   1b43c:	add	r3, r2, r3
   1b440:	str	r3, [sp, #92]	; 0x5c
   1b444:	b	1b460 <__assert_fail@plt+0xa188>
   1b448:	ldr	r3, [sp, #92]	; 0x5c
   1b44c:	add	r3, r3, #24
   1b450:	str	r3, [sp, #92]	; 0x5c
   1b454:	ldrb	r3, [r3, #-28]	; 0xffffffe4
   1b458:	cmp	r3, #0
   1b45c:	beq	1bb84 <__assert_fail@plt+0xa8ac>
   1b460:	ldr	r3, [sp, #92]	; 0x5c
   1b464:	ldr	r2, [sp, #104]	; 0x68
   1b468:	ldr	r3, [r3, #-24]	; 0xffffffe8
   1b46c:	cmp	r2, r3
   1b470:	bne	1b448 <__assert_fail@plt+0xa170>
   1b474:	cmp	fp, #31
   1b478:	bgt	1b490 <__assert_fail@plt+0xa1b8>
   1b47c:	ldr	r3, [sp, #92]	; 0x5c
   1b480:	ldr	r2, [sp, #24]
   1b484:	ldr	r3, [r3, #-8]
   1b488:	tst	r2, r3
   1b48c:	beq	1b448 <__assert_fail@plt+0xa170>
   1b490:	ldr	r3, [sp, #132]	; 0x84
   1b494:	ldr	r2, [sp, #160]	; 0xa0
   1b498:	ldr	r3, [r3, #20]
   1b49c:	add	r3, r3, r2
   1b4a0:	ldr	r2, [sp, #128]	; 0x80
   1b4a4:	ldr	r3, [r3, #8]
   1b4a8:	ldr	r3, [r3]
   1b4ac:	cmp	r2, r3
   1b4b0:	str	r3, [sp, #140]	; 0x8c
   1b4b4:	beq	1bb2c <__assert_fail@plt+0xa854>
   1b4b8:	ldr	r3, [sp, #64]	; 0x40
   1b4bc:	ldr	r3, [r3, #84]	; 0x54
   1b4c0:	mov	r2, r3
   1b4c4:	str	r3, [sp, #144]	; 0x90
   1b4c8:	ldr	r3, [sp, #140]	; 0x8c
   1b4cc:	ldr	r2, [r2, #24]
   1b4d0:	add	r3, r3, r3, lsl #1
   1b4d4:	add	r3, r2, r3, lsl #2
   1b4d8:	str	r3, [sp, #148]	; 0x94
   1b4dc:	ldr	r3, [r3, #4]
   1b4e0:	cmp	r3, #0
   1b4e4:	ble	1bb00 <__assert_fail@plt+0xa828>
   1b4e8:	mov	r2, #0
   1b4ec:	str	r2, [sp, #116]	; 0x74
   1b4f0:	b	1b518 <__assert_fail@plt+0xa240>
   1b4f4:	cmp	r1, #9
   1b4f8:	beq	1b564 <__assert_fail@plt+0xa28c>
   1b4fc:	cmp	r1, #4
   1b500:	beq	1b584 <__assert_fail@plt+0xa2ac>
   1b504:	ldr	r2, [sp, #116]	; 0x74
   1b508:	add	r2, r2, #1
   1b50c:	cmp	r2, r3
   1b510:	str	r2, [sp, #116]	; 0x74
   1b514:	bge	1bb00 <__assert_fail@plt+0xa828>
   1b518:	ldr	r2, [sp, #148]	; 0x94
   1b51c:	ldr	r0, [sp, #116]	; 0x74
   1b520:	ldr	r1, [r2, #8]
   1b524:	ldr	r2, [sp, #144]	; 0x90
   1b528:	ldr	r1, [r1, r0, lsl #2]
   1b52c:	ldr	r2, [r2]
   1b530:	str	r1, [sp, #84]	; 0x54
   1b534:	add	r1, r2, r1, lsl #3
   1b538:	ldrb	r1, [r1, #4]
   1b53c:	cmp	r1, #8
   1b540:	bne	1b4f4 <__assert_fail@plt+0xa21c>
   1b544:	ldr	r1, [sp, #32]
   1b548:	cmp	r1, #0
   1b54c:	beq	1b504 <__assert_fail@plt+0xa22c>
   1b550:	ldr	r1, [sp, #84]	; 0x54
   1b554:	ldr	r2, [r2, r1, lsl #3]
   1b558:	cmp	fp, r2
   1b55c:	bne	1b504 <__assert_fail@plt+0xa22c>
   1b560:	b	1b318 <__assert_fail@plt+0xa040>
   1b564:	ldr	r1, [sp, #16]
   1b568:	cmp	r1, #0
   1b56c:	beq	1b504 <__assert_fail@plt+0xa22c>
   1b570:	ldr	r1, [sp, #84]	; 0x54
   1b574:	ldr	r2, [r2, r1, lsl #3]
   1b578:	cmp	fp, r2
   1b57c:	bne	1b504 <__assert_fail@plt+0xa22c>
   1b580:	b	1b2f4 <__assert_fail@plt+0xa01c>
   1b584:	ldr	r3, [sp, #84]	; 0x54
   1b588:	ldr	r2, [sp, #64]	; 0x40
   1b58c:	add	r3, r3, r3, lsl #1
   1b590:	ldr	r2, [r2, #116]	; 0x74
   1b594:	lsl	r3, r3, #2
   1b598:	str	r3, [sp, #164]	; 0xa4
   1b59c:	ldr	r3, [sp, #96]	; 0x60
   1b5a0:	add	r3, r2, r3
   1b5a4:	str	r3, [sp, #68]	; 0x44
   1b5a8:	b	1b5c4 <__assert_fail@plt+0xa2ec>
   1b5ac:	ldr	r3, [sp, #68]	; 0x44
   1b5b0:	add	r3, r3, #24
   1b5b4:	str	r3, [sp, #68]	; 0x44
   1b5b8:	ldrb	r3, [r3, #-28]	; 0xffffffe4
   1b5bc:	cmp	r3, #0
   1b5c0:	beq	1bb20 <__assert_fail@plt+0xa848>
   1b5c4:	ldr	r3, [sp, #68]	; 0x44
   1b5c8:	ldr	r2, [sp, #84]	; 0x54
   1b5cc:	ldr	r3, [r3, #-24]	; 0xffffffe8
   1b5d0:	cmp	r2, r3
   1b5d4:	bne	1b5ac <__assert_fail@plt+0xa2d4>
   1b5d8:	cmp	fp, #31
   1b5dc:	bgt	1b5f4 <__assert_fail@plt+0xa31c>
   1b5e0:	ldr	r3, [sp, #68]	; 0x44
   1b5e4:	ldr	r2, [sp, #24]
   1b5e8:	ldr	r3, [r3, #-8]
   1b5ec:	tst	r2, r3
   1b5f0:	beq	1b5ac <__assert_fail@plt+0xa2d4>
   1b5f4:	ldr	r3, [sp, #144]	; 0x90
   1b5f8:	ldr	r2, [sp, #164]	; 0xa4
   1b5fc:	ldr	r3, [r3, #20]
   1b600:	add	r3, r3, r2
   1b604:	ldr	r2, [sp, #140]	; 0x8c
   1b608:	ldr	r3, [r3, #8]
   1b60c:	ldr	r3, [r3]
   1b610:	cmp	r2, r3
   1b614:	str	r3, [sp, #72]	; 0x48
   1b618:	beq	1bae8 <__assert_fail@plt+0xa810>
   1b61c:	ldr	r3, [sp, #64]	; 0x40
   1b620:	ldr	r3, [r3, #84]	; 0x54
   1b624:	mov	r2, r3
   1b628:	str	r3, [sp, #48]	; 0x30
   1b62c:	ldr	r3, [sp, #72]	; 0x48
   1b630:	ldr	r2, [r2, #24]
   1b634:	add	r3, r3, r3, lsl #1
   1b638:	add	r3, r2, r3, lsl #2
   1b63c:	str	r3, [sp, #80]	; 0x50
   1b640:	ldr	r1, [r3, #4]
   1b644:	cmp	r1, #0
   1b648:	ble	1bac8 <__assert_fail@plt+0xa7f0>
   1b64c:	mov	r3, #0
   1b650:	str	r3, [sp, #40]	; 0x28
   1b654:	b	1b67c <__assert_fail@plt+0xa3a4>
   1b658:	cmp	r3, #9
   1b65c:	beq	1b6c8 <__assert_fail@plt+0xa3f0>
   1b660:	cmp	r3, #4
   1b664:	beq	1b6e8 <__assert_fail@plt+0xa410>
   1b668:	ldr	r3, [sp, #40]	; 0x28
   1b66c:	add	r3, r3, #1
   1b670:	cmp	r3, r1
   1b674:	str	r3, [sp, #40]	; 0x28
   1b678:	bge	1bac8 <__assert_fail@plt+0xa7f0>
   1b67c:	ldr	r3, [sp, #80]	; 0x50
   1b680:	ldr	r0, [sp, #40]	; 0x28
   1b684:	ldr	r2, [sp, #48]	; 0x30
   1b688:	ldr	r3, [r3, #8]
   1b68c:	ldr	r2, [r2]
   1b690:	ldr	r3, [r3, r0, lsl #2]
   1b694:	str	r3, [sp, #12]
   1b698:	add	r3, r2, r3, lsl #3
   1b69c:	ldrb	r3, [r3, #4]
   1b6a0:	cmp	r3, #8
   1b6a4:	bne	1b658 <__assert_fail@plt+0xa380>
   1b6a8:	ldr	r3, [sp, #32]
   1b6ac:	cmp	r3, #0
   1b6b0:	beq	1b668 <__assert_fail@plt+0xa390>
   1b6b4:	ldr	r3, [sp, #12]
   1b6b8:	ldr	r3, [r2, r3, lsl #3]
   1b6bc:	cmp	fp, r3
   1b6c0:	bne	1b668 <__assert_fail@plt+0xa390>
   1b6c4:	b	1b318 <__assert_fail@plt+0xa040>
   1b6c8:	ldr	r3, [sp, #16]
   1b6cc:	cmp	r3, #0
   1b6d0:	beq	1b668 <__assert_fail@plt+0xa390>
   1b6d4:	ldr	r3, [sp, #12]
   1b6d8:	ldr	r3, [r2, r3, lsl #3]
   1b6dc:	cmp	fp, r3
   1b6e0:	bne	1b668 <__assert_fail@plt+0xa390>
   1b6e4:	b	1b2f4 <__assert_fail@plt+0xa01c>
   1b6e8:	ldr	r3, [sp, #12]
   1b6ec:	ldr	r2, [sp, #64]	; 0x40
   1b6f0:	add	r3, r3, r3, lsl #1
   1b6f4:	ldr	r9, [r2, #116]	; 0x74
   1b6f8:	lsl	r3, r3, #2
   1b6fc:	str	r3, [sp, #76]	; 0x4c
   1b700:	ldr	r3, [sp, #96]	; 0x60
   1b704:	add	r9, r9, r3
   1b708:	b	1b71c <__assert_fail@plt+0xa444>
   1b70c:	add	r9, r9, #24
   1b710:	ldrb	r3, [r9, #-28]	; 0xffffffe4
   1b714:	cmp	r3, #0
   1b718:	beq	1b970 <__assert_fail@plt+0xa698>
   1b71c:	ldr	r3, [r9, #-24]	; 0xffffffe8
   1b720:	ldr	r2, [sp, #12]
   1b724:	cmp	r2, r3
   1b728:	bne	1b70c <__assert_fail@plt+0xa434>
   1b72c:	cmp	fp, #31
   1b730:	bgt	1b744 <__assert_fail@plt+0xa46c>
   1b734:	ldr	r3, [r9, #-8]
   1b738:	ldr	r2, [sp, #24]
   1b73c:	tst	r2, r3
   1b740:	beq	1b70c <__assert_fail@plt+0xa434>
   1b744:	ldr	r3, [sp, #48]	; 0x30
   1b748:	ldr	r2, [sp, #76]	; 0x4c
   1b74c:	ldr	r3, [r3, #20]
   1b750:	add	r3, r3, r2
   1b754:	ldr	r2, [sp, #72]	; 0x48
   1b758:	ldr	r3, [r3, #8]
   1b75c:	ldr	r3, [r3]
   1b760:	cmp	r2, r3
   1b764:	str	r3, [sp, #28]
   1b768:	beq	1bab0 <__assert_fail@plt+0xa7d8>
   1b76c:	ldr	r2, [sp, #64]	; 0x40
   1b770:	ldr	r3, [sp, #28]
   1b774:	ldr	r7, [r2, #84]	; 0x54
   1b778:	add	sl, r3, r3, lsl #1
   1b77c:	ldr	r3, [r7, #24]
   1b780:	add	sl, r3, sl, lsl #2
   1b784:	ldr	r1, [sl, #4]
   1b788:	cmp	r1, #0
   1b78c:	ble	1b948 <__assert_fail@plt+0xa670>
   1b790:	str	r9, [sp, #52]	; 0x34
   1b794:	mov	r6, #0
   1b798:	mov	r9, r2
   1b79c:	b	1b7bc <__assert_fail@plt+0xa4e4>
   1b7a0:	cmp	r3, #9
   1b7a4:	beq	1b804 <__assert_fail@plt+0xa52c>
   1b7a8:	cmp	r3, #4
   1b7ac:	beq	1b820 <__assert_fail@plt+0xa548>
   1b7b0:	add	r6, r6, #1
   1b7b4:	cmp	r6, r1
   1b7b8:	bge	1b7fc <__assert_fail@plt+0xa524>
   1b7bc:	ldr	r3, [sl, #8]
   1b7c0:	ldr	r2, [r7]
   1b7c4:	ldr	r5, [r3, r6, lsl #2]
   1b7c8:	add	r3, r2, r5, lsl #3
   1b7cc:	ldrb	r3, [r3, #4]
   1b7d0:	cmp	r3, #8
   1b7d4:	bne	1b7a0 <__assert_fail@plt+0xa4c8>
   1b7d8:	ldr	r3, [sp, #32]
   1b7dc:	cmp	r3, #0
   1b7e0:	beq	1b7b0 <__assert_fail@plt+0xa4d8>
   1b7e4:	ldr	r3, [r2, r5, lsl #3]
   1b7e8:	cmp	fp, r3
   1b7ec:	beq	1b318 <__assert_fail@plt+0xa040>
   1b7f0:	add	r6, r6, #1
   1b7f4:	cmp	r6, r1
   1b7f8:	blt	1b7bc <__assert_fail@plt+0xa4e4>
   1b7fc:	ldr	r9, [sp, #52]	; 0x34
   1b800:	b	1b948 <__assert_fail@plt+0xa670>
   1b804:	ldr	r3, [sp, #16]
   1b808:	cmp	r3, #0
   1b80c:	beq	1b7b0 <__assert_fail@plt+0xa4d8>
   1b810:	ldr	r3, [r2, r5, lsl #3]
   1b814:	cmp	fp, r3
   1b818:	bne	1b7b0 <__assert_fail@plt+0xa4d8>
   1b81c:	b	1b2f4 <__assert_fail@plt+0xa01c>
   1b820:	ldr	r3, [sp, #44]	; 0x2c
   1b824:	ldr	r4, [r9, #116]	; 0x74
   1b828:	add	r8, r5, r5, lsl #1
   1b82c:	add	r4, r4, r3
   1b830:	cmp	fp, #31
   1b834:	lsl	r8, r8, #2
   1b838:	ldr	r3, [sp, #16]
   1b83c:	add	r4, r4, #24
   1b840:	ble	1b97c <__assert_fail@plt+0xa6a4>
   1b844:	cmp	r3, #0
   1b848:	bne	1b8e0 <__assert_fail@plt+0xa608>
   1b84c:	str	sl, [sp, #56]	; 0x38
   1b850:	str	r6, [sp, #60]	; 0x3c
   1b854:	ldr	sl, [sp, #20]
   1b858:	ldr	r6, [sp, #28]
   1b85c:	b	1b86c <__assert_fail@plt+0xa594>
   1b860:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1b864:	cmp	r3, #0
   1b868:	beq	1b8c4 <__assert_fail@plt+0xa5ec>
   1b86c:	ldr	r3, [r4, #-24]	; 0xffffffe8
   1b870:	add	r4, r4, #24
   1b874:	cmp	r5, r3
   1b878:	bne	1b860 <__assert_fail@plt+0xa588>
   1b87c:	ldr	r3, [r7, #20]
   1b880:	mov	r2, fp
   1b884:	add	r3, r3, r8
   1b888:	mov	r1, sl
   1b88c:	ldr	r3, [r3, #8]
   1b890:	mov	r0, r9
   1b894:	ldr	ip, [r3]
   1b898:	cmp	ip, r6
   1b89c:	mov	r3, ip
   1b8a0:	beq	1ba98 <__assert_fail@plt+0xa7c0>
   1b8a4:	ldr	ip, [sp, #208]	; 0xd0
   1b8a8:	str	ip, [sp]
   1b8ac:	bl	1b180 <__assert_fail@plt+0x9ea8>
   1b8b0:	cmn	r0, #1
   1b8b4:	beq	1b318 <__assert_fail@plt+0xa040>
   1b8b8:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1b8bc:	cmp	r3, #0
   1b8c0:	bne	1b86c <__assert_fail@plt+0xa594>
   1b8c4:	ldr	sl, [sp, #56]	; 0x38
   1b8c8:	ldr	r6, [sp, #60]	; 0x3c
   1b8cc:	ldr	r1, [sl, #4]
   1b8d0:	b	1b7b0 <__assert_fail@plt+0xa4d8>
   1b8d4:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1b8d8:	cmp	r3, #0
   1b8dc:	beq	1b8cc <__assert_fail@plt+0xa5f4>
   1b8e0:	ldr	r3, [r4, #-24]	; 0xffffffe8
   1b8e4:	add	r4, r4, #24
   1b8e8:	cmp	r5, r3
   1b8ec:	bne	1b8d4 <__assert_fail@plt+0xa5fc>
   1b8f0:	ldr	r3, [r7, #20]
   1b8f4:	ldr	lr, [sp, #28]
   1b8f8:	add	r3, r3, r8
   1b8fc:	mov	r2, fp
   1b900:	ldr	r3, [r3, #8]
   1b904:	ldr	r1, [sp, #20]
   1b908:	mov	r0, r9
   1b90c:	ldr	ip, [r3]
   1b910:	cmp	ip, lr
   1b914:	mov	r3, ip
   1b918:	beq	1ba98 <__assert_fail@plt+0xa7c0>
   1b91c:	ldr	ip, [sp, #208]	; 0xd0
   1b920:	str	ip, [sp]
   1b924:	bl	1b180 <__assert_fail@plt+0x9ea8>
   1b928:	cmn	r0, #1
   1b92c:	beq	1b318 <__assert_fail@plt+0xa040>
   1b930:	cmp	r0, #0
   1b934:	bne	1b8d4 <__assert_fail@plt+0xa5fc>
   1b938:	ldr	r9, [sp, #52]	; 0x34
   1b93c:	ldr	r3, [sp, #16]
   1b940:	cmp	r3, #0
   1b944:	bne	1b2f4 <__assert_fail@plt+0xa01c>
   1b948:	cmp	fp, #31
   1b94c:	bgt	1b70c <__assert_fail@plt+0xa434>
   1b950:	ldr	r3, [r9, #-8]
   1b954:	ldr	r2, [sp, #36]	; 0x24
   1b958:	add	r9, r9, #24
   1b95c:	and	r3, r3, r2
   1b960:	str	r3, [r9, #-32]	; 0xffffffe0
   1b964:	ldrb	r3, [r9, #-28]	; 0xffffffe4
   1b968:	cmp	r3, #0
   1b96c:	bne	1b71c <__assert_fail@plt+0xa444>
   1b970:	ldr	r3, [sp, #80]	; 0x50
   1b974:	ldr	r1, [r3, #4]
   1b978:	b	1b668 <__assert_fail@plt+0xa390>
   1b97c:	cmp	r3, #0
   1b980:	bne	1ba88 <__assert_fail@plt+0xa7b0>
   1b984:	str	sl, [sp, #56]	; 0x38
   1b988:	str	r6, [sp, #60]	; 0x3c
   1b98c:	ldr	sl, [sp, #208]	; 0xd0
   1b990:	ldr	r6, [sp, #28]
   1b994:	b	1b9a8 <__assert_fail@plt+0xa6d0>
   1b998:	add	r4, r4, #24
   1b99c:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1b9a0:	cmp	r3, #0
   1b9a4:	beq	1b8c4 <__assert_fail@plt+0xa5ec>
   1b9a8:	ldr	r3, [r4, #-24]	; 0xffffffe8
   1b9ac:	cmp	r5, r3
   1b9b0:	bne	1b998 <__assert_fail@plt+0xa6c0>
   1b9b4:	ldr	r3, [r4, #-8]
   1b9b8:	ldr	ip, [sp, #24]
   1b9bc:	mov	r2, fp
   1b9c0:	tst	ip, r3
   1b9c4:	ldr	r1, [sp, #20]
   1b9c8:	mov	r0, r9
   1b9cc:	beq	1b998 <__assert_fail@plt+0xa6c0>
   1b9d0:	ldr	r3, [r7, #20]
   1b9d4:	add	r3, r3, r8
   1b9d8:	ldr	r3, [r3, #8]
   1b9dc:	ldr	ip, [r3]
   1b9e0:	cmp	r6, ip
   1b9e4:	mov	r3, ip
   1b9e8:	beq	1ba98 <__assert_fail@plt+0xa7c0>
   1b9ec:	str	sl, [sp]
   1b9f0:	bl	1b180 <__assert_fail@plt+0x9ea8>
   1b9f4:	cmn	r0, #1
   1b9f8:	beq	1b318 <__assert_fail@plt+0xa040>
   1b9fc:	ldr	r3, [r4, #-8]
   1ba00:	ldr	r2, [sp, #36]	; 0x24
   1ba04:	and	r3, r3, r2
   1ba08:	str	r3, [r4, #-8]
   1ba0c:	b	1b998 <__assert_fail@plt+0xa6c0>
   1ba10:	ldr	r3, [r4, #-8]
   1ba14:	ldr	ip, [sp, #24]
   1ba18:	mov	r2, fp
   1ba1c:	tst	ip, r3
   1ba20:	ldr	r1, [sp, #20]
   1ba24:	mov	r0, r9
   1ba28:	beq	1ba78 <__assert_fail@plt+0xa7a0>
   1ba2c:	ldr	r3, [r7, #20]
   1ba30:	ldr	lr, [sp, #28]
   1ba34:	add	r3, r3, r8
   1ba38:	ldr	r3, [r3, #8]
   1ba3c:	ldr	ip, [r3]
   1ba40:	cmp	lr, ip
   1ba44:	mov	r3, ip
   1ba48:	beq	1ba98 <__assert_fail@plt+0xa7c0>
   1ba4c:	ldr	ip, [sp, #208]	; 0xd0
   1ba50:	str	ip, [sp]
   1ba54:	bl	1b180 <__assert_fail@plt+0x9ea8>
   1ba58:	cmn	r0, #1
   1ba5c:	beq	1b318 <__assert_fail@plt+0xa040>
   1ba60:	cmp	r0, #0
   1ba64:	beq	1b938 <__assert_fail@plt+0xa660>
   1ba68:	ldr	r3, [r4, #-8]
   1ba6c:	ldr	r2, [sp, #36]	; 0x24
   1ba70:	and	r3, r3, r2
   1ba74:	str	r3, [r4, #-8]
   1ba78:	add	r4, r4, #24
   1ba7c:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1ba80:	cmp	r3, #0
   1ba84:	beq	1b8cc <__assert_fail@plt+0xa5f4>
   1ba88:	ldr	r3, [r4, #-24]	; 0xffffffe8
   1ba8c:	cmp	r5, r3
   1ba90:	bne	1ba78 <__assert_fail@plt+0xa7a0>
   1ba94:	b	1ba10 <__assert_fail@plt+0xa738>
   1ba98:	ldr	r3, [sp, #32]
   1ba9c:	ldr	r9, [sp, #52]	; 0x34
   1baa0:	cmp	r3, #0
   1baa4:	beq	1b93c <__assert_fail@plt+0xa664>
   1baa8:	mvn	r0, #0
   1baac:	b	1b268 <__assert_fail@plt+0x9f90>
   1bab0:	ldr	r3, [sp, #32]
   1bab4:	cmp	r3, #0
   1bab8:	bne	1b318 <__assert_fail@plt+0xa040>
   1babc:	ldr	r3, [sp, #16]
   1bac0:	cmp	r3, #0
   1bac4:	bne	1b2f4 <__assert_fail@plt+0xa01c>
   1bac8:	cmp	fp, #31
   1bacc:	bgt	1b5ac <__assert_fail@plt+0xa2d4>
   1bad0:	ldr	r2, [sp, #68]	; 0x44
   1bad4:	ldr	r1, [sp, #36]	; 0x24
   1bad8:	ldr	r3, [r2, #-8]
   1badc:	and	r3, r3, r1
   1bae0:	str	r3, [r2, #-8]
   1bae4:	b	1b5ac <__assert_fail@plt+0xa2d4>
   1bae8:	ldr	r3, [sp, #32]
   1baec:	cmp	r3, #0
   1baf0:	bne	1b318 <__assert_fail@plt+0xa040>
   1baf4:	ldr	r3, [sp, #16]
   1baf8:	cmp	r3, #0
   1bafc:	bne	1b2f4 <__assert_fail@plt+0xa01c>
   1bb00:	cmp	fp, #31
   1bb04:	bgt	1b448 <__assert_fail@plt+0xa170>
   1bb08:	ldr	r2, [sp, #92]	; 0x5c
   1bb0c:	ldr	r1, [sp, #36]	; 0x24
   1bb10:	ldr	r3, [r2, #-8]
   1bb14:	and	r3, r3, r1
   1bb18:	str	r3, [r2, #-8]
   1bb1c:	b	1b448 <__assert_fail@plt+0xa170>
   1bb20:	ldr	r3, [sp, #148]	; 0x94
   1bb24:	ldr	r3, [r3, #4]
   1bb28:	b	1b504 <__assert_fail@plt+0xa22c>
   1bb2c:	ldr	r3, [sp, #32]
   1bb30:	cmp	r3, #0
   1bb34:	bne	1b318 <__assert_fail@plt+0xa040>
   1bb38:	ldr	r3, [sp, #16]
   1bb3c:	cmp	r3, #0
   1bb40:	bne	1b2f4 <__assert_fail@plt+0xa01c>
   1bb44:	cmp	fp, #31
   1bb48:	bgt	1b2b4 <__assert_fail@plt+0x9fdc>
   1bb4c:	ldr	r2, [sp, #88]	; 0x58
   1bb50:	ldr	r1, [sp, #36]	; 0x24
   1bb54:	ldr	r3, [r2, #-8]
   1bb58:	and	r3, r3, r1
   1bb5c:	str	r3, [r2, #-8]
   1bb60:	b	1b2b4 <__assert_fail@plt+0x9fdc>
   1bb64:	ldr	r1, [sp, #16]
   1bb68:	cmp	r1, #0
   1bb6c:	beq	1b3b0 <__assert_fail@plt+0xa0d8>
   1bb70:	ldr	r1, [sp, #104]	; 0x68
   1bb74:	ldr	r2, [r2, r1, lsl #3]
   1bb78:	cmp	fp, r2
   1bb7c:	bne	1b3b0 <__assert_fail@plt+0xa0d8>
   1bb80:	b	1b2f4 <__assert_fail@plt+0xa01c>
   1bb84:	ldr	r3, [sp, #136]	; 0x88
   1bb88:	ldr	r3, [r3, #4]
   1bb8c:	b	1b3b0 <__assert_fail@plt+0xa0d8>
   1bb90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb94:	sub	sp, sp, #36	; 0x24
   1bb98:	ldr	fp, [r0, #108]	; 0x6c
   1bb9c:	ldr	r6, [sp, #72]	; 0x48
   1bba0:	ldr	r7, [sp, #80]	; 0x50
   1bba4:	ldr	lr, [r0, #84]	; 0x54
   1bba8:	mov	ip, fp
   1bbac:	mov	r4, #0
   1bbb0:	str	lr, [sp, #12]
   1bbb4:	cmp	r4, ip
   1bbb8:	bge	1bc14 <__assert_fail@plt+0xa93c>
   1bbbc:	add	lr, r4, ip
   1bbc0:	ldr	r5, [r0, #116]	; 0x74
   1bbc4:	add	lr, lr, lr, lsr #31
   1bbc8:	asr	lr, lr, #1
   1bbcc:	add	r8, lr, lr, lsl #1
   1bbd0:	add	r8, r5, r8, lsl #3
   1bbd4:	ldr	r8, [r8, #4]
   1bbd8:	cmp	r6, r8
   1bbdc:	ble	1bc04 <__assert_fail@plt+0xa92c>
   1bbe0:	b	1bdb0 <__assert_fail@plt+0xaad8>
   1bbe4:	asr	ip, ip, #1
   1bbe8:	mov	r9, ip
   1bbec:	add	r8, ip, ip, lsl #1
   1bbf0:	add	r8, r5, r8, lsl #3
   1bbf4:	ldr	r8, [r8, #4]
   1bbf8:	cmp	r8, r6
   1bbfc:	blt	1bdb8 <__assert_fail@plt+0xaae0>
   1bc00:	mov	lr, ip
   1bc04:	add	ip, r4, lr
   1bc08:	cmp	r4, lr
   1bc0c:	add	ip, ip, ip, lsr #31
   1bc10:	blt	1bbe4 <__assert_fail@plt+0xa90c>
   1bc14:	cmp	fp, r4
   1bc18:	mvnle	r4, #0
   1bc1c:	ble	1bc38 <__assert_fail@plt+0xa960>
   1bc20:	add	lr, r4, r4, lsl #1
   1bc24:	ldr	ip, [r0, #116]	; 0x74
   1bc28:	add	ip, ip, lr, lsl #3
   1bc2c:	ldr	ip, [ip, #4]
   1bc30:	cmp	r6, ip
   1bc34:	mvnne	r4, #0
   1bc38:	mov	ip, fp
   1bc3c:	mov	r5, #0
   1bc40:	cmp	r5, ip
   1bc44:	bge	1bca0 <__assert_fail@plt+0xa9c8>
   1bc48:	add	lr, r5, ip
   1bc4c:	ldr	r8, [r0, #116]	; 0x74
   1bc50:	add	lr, lr, lr, lsr #31
   1bc54:	asr	lr, lr, #1
   1bc58:	add	r9, lr, lr, lsl #1
   1bc5c:	add	r9, r8, r9, lsl #3
   1bc60:	ldr	r9, [r9, #4]
   1bc64:	cmp	r7, r9
   1bc68:	ble	1bc90 <__assert_fail@plt+0xa9b8>
   1bc6c:	b	1bdc4 <__assert_fail@plt+0xaaec>
   1bc70:	asr	ip, ip, #1
   1bc74:	mov	sl, ip
   1bc78:	add	r9, ip, ip, lsl #1
   1bc7c:	add	r9, r8, r9, lsl #3
   1bc80:	ldr	r9, [r9, #4]
   1bc84:	cmp	r9, r7
   1bc88:	blt	1bdcc <__assert_fail@plt+0xaaf4>
   1bc8c:	mov	lr, ip
   1bc90:	add	ip, r5, lr
   1bc94:	cmp	r5, lr
   1bc98:	add	ip, ip, ip, lsr #31
   1bc9c:	blt	1bc70 <__assert_fail@plt+0xa998>
   1bca0:	cmp	fp, r5
   1bca4:	mvnle	r5, #0
   1bca8:	ble	1bcc4 <__assert_fail@plt+0xa9ec>
   1bcac:	add	lr, r5, r5, lsl #1
   1bcb0:	ldr	ip, [r0, #116]	; 0x74
   1bcb4:	add	ip, ip, lr, lsl #3
   1bcb8:	ldr	ip, [ip, #4]
   1bcbc:	cmp	r7, ip
   1bcc0:	mvnne	r5, #0
   1bcc4:	ldr	ip, [r1]
   1bcc8:	cmp	ip, #0
   1bccc:	ble	1bdec <__assert_fail@plt+0xab14>
   1bcd0:	ldr	r8, [sp, #12]
   1bcd4:	mov	sl, r2
   1bcd8:	mov	fp, r0
   1bcdc:	mov	r9, #0
   1bce0:	str	r3, [sp, #20]
   1bce4:	str	r1, [sp, #16]
   1bce8:	str	r4, [sp, #24]
   1bcec:	str	r5, [sp, #28]
   1bcf0:	ldr	r3, [sl]
   1bcf4:	ldr	r2, [fp, #116]	; 0x74
   1bcf8:	lsl	r1, r9, #2
   1bcfc:	ldr	r3, [r3, r9, lsl #2]
   1bd00:	ldr	r0, [r8]
   1bd04:	str	r1, [sp, #12]
   1bd08:	add	r3, r3, r3, lsl #1
   1bd0c:	add	lr, r2, r3, lsl #3
   1bd10:	ldr	r3, [r2, r3, lsl #3]
   1bd14:	ldr	r1, [lr, #8]
   1bd18:	cmp	r6, r1
   1bd1c:	ldr	r5, [r0, r3, lsl #3]
   1bd20:	blt	1be4c <__assert_fail@plt+0xab74>
   1bd24:	ldr	r3, [lr, #12]
   1bd28:	cmp	r6, r3
   1bd2c:	bgt	1bdf4 <__assert_fail@plt+0xab1c>
   1bd30:	cmp	r6, r3
   1bd34:	moveq	r4, #2
   1bd38:	movne	r4, #0
   1bd3c:	cmp	r6, r1
   1bd40:	orreq	r4, r4, #1
   1bd44:	cmp	r4, #0
   1bd48:	bne	1bdfc <__assert_fail@plt+0xab24>
   1bd4c:	cmp	r7, r1
   1bd50:	blt	1bda4 <__assert_fail@plt+0xaacc>
   1bd54:	cmp	r7, r3
   1bd58:	movgt	r1, #1
   1bd5c:	bgt	1bd9c <__assert_fail@plt+0xaac4>
   1bd60:	cmp	r7, r3
   1bd64:	moveq	r3, #2
   1bd68:	movne	r3, #0
   1bd6c:	cmp	r7, r1
   1bd70:	movne	r1, r3
   1bd74:	orreq	r1, r3, #1
   1bd78:	cmp	r1, #0
   1bd7c:	beq	1bd9c <__assert_fail@plt+0xaac4>
   1bd80:	ldr	r3, [sp, #28]
   1bd84:	mov	r2, r5
   1bd88:	str	r3, [sp]
   1bd8c:	mov	r0, fp
   1bd90:	ldr	r3, [sp, #76]	; 0x4c
   1bd94:	bl	1b180 <__assert_fail@plt+0x9ea8>
   1bd98:	mov	r1, r0
   1bd9c:	cmp	r1, r4
   1bda0:	beq	1bdd8 <__assert_fail@plt+0xab00>
   1bda4:	mov	r0, #1
   1bda8:	add	sp, sp, #36	; 0x24
   1bdac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bdb0:	mov	r9, lr
   1bdb4:	mov	lr, ip
   1bdb8:	add	r4, r9, #1
   1bdbc:	mov	ip, lr
   1bdc0:	b	1bbb4 <__assert_fail@plt+0xa8dc>
   1bdc4:	mov	sl, lr
   1bdc8:	mov	lr, ip
   1bdcc:	add	r5, sl, #1
   1bdd0:	mov	ip, lr
   1bdd4:	b	1bc40 <__assert_fail@plt+0xa968>
   1bdd8:	ldr	r3, [sp, #16]
   1bddc:	ldr	ip, [r3]
   1bde0:	add	r9, r9, #1
   1bde4:	cmp	r9, ip
   1bde8:	blt	1bcf0 <__assert_fail@plt+0xaa18>
   1bdec:	mov	r0, #0
   1bdf0:	b	1bda8 <__assert_fail@plt+0xaad0>
   1bdf4:	mov	r4, #1
   1bdf8:	b	1bd4c <__assert_fail@plt+0xaa74>
   1bdfc:	ldr	r3, [sp, #24]
   1be00:	mov	r1, r4
   1be04:	str	r3, [sp]
   1be08:	mov	r2, r5
   1be0c:	ldr	r3, [sp, #20]
   1be10:	mov	r0, fp
   1be14:	bl	1b180 <__assert_fail@plt+0x9ea8>
   1be18:	ldr	r2, [sl]
   1be1c:	lsl	r1, r9, #2
   1be20:	ldr	r3, [fp, #116]	; 0x74
   1be24:	ldr	r2, [r2, r1]
   1be28:	add	r2, r2, r2, lsl #1
   1be2c:	add	r3, r3, r2, lsl #3
   1be30:	ldr	r1, [r3, #8]
   1be34:	cmp	r7, r1
   1be38:	mvnlt	r1, #0
   1be3c:	mov	r4, r0
   1be40:	blt	1bd9c <__assert_fail@plt+0xaac4>
   1be44:	ldr	r3, [r3, #12]
   1be48:	b	1bd54 <__assert_fail@plt+0xaa7c>
   1be4c:	cmp	r7, r1
   1be50:	blt	1bde0 <__assert_fail@plt+0xab08>
   1be54:	ldr	r3, [lr, #12]
   1be58:	cmp	r7, r3
   1be5c:	bgt	1bda4 <__assert_fail@plt+0xaacc>
   1be60:	mvn	r4, #0
   1be64:	b	1bd60 <__assert_fail@plt+0xaa88>
   1be68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be6c:	mov	r8, r1
   1be70:	mov	r6, r0
   1be74:	ldr	r1, [r0, #28]
   1be78:	add	r0, r8, r8, lsl #1
   1be7c:	sub	sp, sp, #36	; 0x24
   1be80:	add	r1, r1, r0, lsl #2
   1be84:	mov	r4, #0
   1be88:	str	r4, [sp, #24]
   1be8c:	str	r4, [sp, #20]
   1be90:	str	r4, [sp, #28]
   1be94:	ldr	lr, [r1, #4]
   1be98:	str	r1, [sp, #12]
   1be9c:	cmp	lr, r4
   1bea0:	str	r3, [sp, #8]
   1bea4:	ble	1c34c <__assert_fail@plt+0xb074>
   1bea8:	mov	r5, r1
   1beac:	str	r2, [sp]
   1beb0:	ldr	r2, [r5, #8]
   1beb4:	ldr	r3, [r2, r4, lsl #2]
   1beb8:	cmp	r8, r3
   1bebc:	beq	1c098 <__assert_fail@plt+0xadc0>
   1bec0:	ldr	r1, [r6]
   1bec4:	add	r1, r1, r3, lsl #3
   1bec8:	ldrb	r1, [r1, #4]
   1becc:	tst	r1, #8
   1bed0:	beq	1c098 <__assert_fail@plt+0xadc0>
   1bed4:	add	r3, r3, r3, lsl #1
   1bed8:	ldr	r1, [r6, #20]
   1bedc:	lsl	r3, r3, #2
   1bee0:	str	r3, [sp, #4]
   1bee4:	add	r3, r1, r3
   1bee8:	ldr	r0, [r3, #8]
   1beec:	ldr	r3, [r3, #4]
   1bef0:	cmp	r3, #1
   1bef4:	ldr	r1, [r0]
   1bef8:	ble	1c2d0 <__assert_fail@plt+0xaff8>
   1befc:	cmp	lr, #0
   1bf00:	ldr	r7, [r0, #4]
   1bf04:	ble	1bf60 <__assert_fail@plt+0xac88>
   1bf08:	sub	sl, lr, #1
   1bf0c:	mov	r9, sl
   1bf10:	mov	ip, #0
   1bf14:	cmp	ip, r9
   1bf18:	bcs	1bf54 <__assert_fail@plt+0xac7c>
   1bf1c:	add	r0, ip, r9
   1bf20:	lsr	r0, r0, #1
   1bf24:	ldr	r3, [r2, r0, lsl #2]
   1bf28:	cmp	r1, r3
   1bf2c:	ble	1bf44 <__assert_fail@plt+0xac6c>
   1bf30:	b	1c1d0 <__assert_fail@plt+0xaef8>
   1bf34:	ldr	r9, [r2, r3, lsl #2]
   1bf38:	cmp	r1, r9
   1bf3c:	bgt	1c1d8 <__assert_fail@plt+0xaf00>
   1bf40:	mov	r0, r3
   1bf44:	add	r3, ip, r0
   1bf48:	cmp	ip, r0
   1bf4c:	lsr	r3, r3, #1
   1bf50:	bcc	1bf34 <__assert_fail@plt+0xac5c>
   1bf54:	ldr	r3, [r2, ip, lsl #2]
   1bf58:	cmp	r1, r3
   1bf5c:	beq	1c2c4 <__assert_fail@plt+0xafec>
   1bf60:	ldr	r3, [sp]
   1bf64:	ldr	fp, [r3, #4]
   1bf68:	cmp	fp, #0
   1bf6c:	ble	1bfc8 <__assert_fail@plt+0xacf0>
   1bf70:	ldr	sl, [r3, #8]
   1bf74:	sub	r9, fp, #1
   1bf78:	mov	ip, #0
   1bf7c:	cmp	ip, r9
   1bf80:	bcs	1bfbc <__assert_fail@plt+0xace4>
   1bf84:	add	r0, ip, r9
   1bf88:	lsr	r0, r0, #1
   1bf8c:	ldr	r3, [sl, r0, lsl #2]
   1bf90:	cmp	r1, r3
   1bf94:	ble	1bfac <__assert_fail@plt+0xacd4>
   1bf98:	b	1c2b0 <__assert_fail@plt+0xafd8>
   1bf9c:	ldr	r9, [sl, r3, lsl #2]
   1bfa0:	cmp	r1, r9
   1bfa4:	bgt	1c2b8 <__assert_fail@plt+0xafe0>
   1bfa8:	mov	r0, r3
   1bfac:	add	r3, ip, r0
   1bfb0:	cmp	ip, r0
   1bfb4:	lsr	r3, r3, #1
   1bfb8:	bcc	1bf9c <__assert_fail@plt+0xacc4>
   1bfbc:	ldr	r3, [sl, ip, lsl #2]
   1bfc0:	cmp	r1, r3
   1bfc4:	beq	1c254 <__assert_fail@plt+0xaf7c>
   1bfc8:	cmp	r7, #0
   1bfcc:	ble	1c098 <__assert_fail@plt+0xadc0>
   1bfd0:	cmp	lr, #0
   1bfd4:	ble	1c034 <__assert_fail@plt+0xad5c>
   1bfd8:	sub	sl, lr, #1
   1bfdc:	mov	r0, #0
   1bfe0:	cmp	r0, sl
   1bfe4:	bcs	1c020 <__assert_fail@plt+0xad48>
   1bfe8:	add	r1, r0, sl
   1bfec:	lsr	r1, r1, #1
   1bff0:	ldr	r3, [r2, r1, lsl #2]
   1bff4:	cmp	r3, r7
   1bff8:	bge	1c010 <__assert_fail@plt+0xad38>
   1bffc:	b	1c240 <__assert_fail@plt+0xaf68>
   1c000:	ldr	ip, [r2, r3, lsl #2]
   1c004:	cmp	ip, r7
   1c008:	blt	1c248 <__assert_fail@plt+0xaf70>
   1c00c:	mov	r1, r3
   1c010:	add	r3, r0, r1
   1c014:	cmp	r0, r1
   1c018:	lsr	r3, r3, #1
   1c01c:	bcc	1c000 <__assert_fail@plt+0xad28>
   1c020:	ldr	r3, [r2, r0, lsl #2]
   1c024:	cmp	r3, r7
   1c028:	beq	1c098 <__assert_fail@plt+0xadc0>
   1c02c:	ldr	r3, [sp]
   1c030:	ldr	fp, [r3, #4]
   1c034:	cmp	fp, #0
   1c038:	ble	1c098 <__assert_fail@plt+0xadc0>
   1c03c:	ldr	r3, [sp]
   1c040:	sub	fp, fp, #1
   1c044:	mov	r1, #0
   1c048:	ldr	r0, [r3, #8]
   1c04c:	cmp	r1, fp
   1c050:	bcs	1c08c <__assert_fail@plt+0xadb4>
   1c054:	add	r2, r1, fp
   1c058:	lsr	r2, r2, #1
   1c05c:	ldr	r3, [r0, r2, lsl #2]
   1c060:	cmp	r7, r3
   1c064:	ble	1c07c <__assert_fail@plt+0xada4>
   1c068:	b	1c2f4 <__assert_fail@plt+0xb01c>
   1c06c:	ldr	ip, [r0, r3, lsl #2]
   1c070:	cmp	ip, r7
   1c074:	blt	1c2fc <__assert_fail@plt+0xb024>
   1c078:	mov	r2, r3
   1c07c:	add	r3, r1, r2
   1c080:	cmp	r1, r2
   1c084:	lsr	r3, r3, #1
   1c088:	bcc	1c06c <__assert_fail@plt+0xad94>
   1c08c:	ldr	r3, [r0, r1, lsl #2]
   1c090:	cmp	r3, r7
   1c094:	beq	1c254 <__assert_fail@plt+0xaf7c>
   1c098:	add	r4, r4, #1
   1c09c:	cmp	r4, lr
   1c0a0:	blt	1beb0 <__assert_fail@plt+0xabd8>
   1c0a4:	cmp	lr, #0
   1c0a8:	ldr	r5, [sp]
   1c0ac:	ldrle	r0, [sp, #28]
   1c0b0:	ble	1c1a8 <__assert_fail@plt+0xaed0>
   1c0b4:	ldr	r3, [sp, #12]
   1c0b8:	mov	r7, #0
   1c0bc:	ldr	r0, [sp, #28]
   1c0c0:	ldr	r9, [r3, #8]
   1c0c4:	mov	sl, r7
   1c0c8:	sub	r9, r9, #4
   1c0cc:	ldr	r4, [sp, #24]
   1c0d0:	ldr	r2, [r9, #4]!
   1c0d4:	cmp	r4, #0
   1c0d8:	ble	1c130 <__assert_fail@plt+0xae58>
   1c0dc:	sub	r4, r4, #1
   1c0e0:	mov	ip, sl
   1c0e4:	cmp	ip, r4
   1c0e8:	bcs	1c124 <__assert_fail@plt+0xae4c>
   1c0ec:	add	r1, ip, r4
   1c0f0:	lsr	r1, r1, #1
   1c0f4:	ldr	r3, [r0, r1, lsl #2]
   1c0f8:	cmp	r2, r3
   1c0fc:	ble	1c114 <__assert_fail@plt+0xae3c>
   1c100:	b	1c1bc <__assert_fail@plt+0xaee4>
   1c104:	ldr	r4, [r0, r3, lsl #2]
   1c108:	cmp	r2, r4
   1c10c:	bgt	1c1c4 <__assert_fail@plt+0xaeec>
   1c110:	mov	r1, r3
   1c114:	add	r3, r1, ip
   1c118:	cmp	r1, ip
   1c11c:	lsr	r3, r3, #1
   1c120:	bhi	1c104 <__assert_fail@plt+0xae2c>
   1c124:	ldr	r3, [r0, ip, lsl #2]
   1c128:	cmp	r2, r3
   1c12c:	beq	1c19c <__assert_fail@plt+0xaec4>
   1c130:	ldr	r8, [r5, #4]
   1c134:	cmp	r8, #0
   1c138:	ble	1c19c <__assert_fail@plt+0xaec4>
   1c13c:	sub	fp, r8, #1
   1c140:	ldr	r6, [r5, #8]
   1c144:	mov	r4, fp
   1c148:	mov	ip, sl
   1c14c:	cmp	ip, r4
   1c150:	bcs	1c18c <__assert_fail@plt+0xaeb4>
   1c154:	add	r1, ip, r4
   1c158:	lsr	r1, r1, #1
   1c15c:	ldr	r3, [r6, r1, lsl #2]
   1c160:	cmp	r3, r2
   1c164:	bge	1c17c <__assert_fail@plt+0xaea4>
   1c168:	b	1c1e4 <__assert_fail@plt+0xaf0c>
   1c16c:	ldr	r4, [r6, r3, lsl #2]
   1c170:	cmp	r2, r4
   1c174:	bgt	1c1ec <__assert_fail@plt+0xaf14>
   1c178:	mov	r1, r3
   1c17c:	add	r3, ip, r1
   1c180:	cmp	ip, r1
   1c184:	lsr	r3, r3, #1
   1c188:	bcc	1c16c <__assert_fail@plt+0xae94>
   1c18c:	ldr	r3, [r6, ip, lsl #2]
   1c190:	add	r6, r6, ip, lsl #2
   1c194:	cmp	r2, r3
   1c198:	beq	1c1f8 <__assert_fail@plt+0xaf20>
   1c19c:	add	r7, r7, #1
   1c1a0:	cmp	r7, lr
   1c1a4:	blt	1c0cc <__assert_fail@plt+0xadf4>
   1c1a8:	bl	296b0 <__assert_fail@plt+0x183d8>
   1c1ac:	mov	r7, #0
   1c1b0:	mov	r0, r7
   1c1b4:	add	sp, sp, #36	; 0x24
   1c1b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1bc:	mov	r3, r1
   1c1c0:	mov	r1, r4
   1c1c4:	add	ip, r3, #1
   1c1c8:	mov	r4, r1
   1c1cc:	b	1c0e4 <__assert_fail@plt+0xae0c>
   1c1d0:	mov	r3, r0
   1c1d4:	mov	r0, r9
   1c1d8:	add	ip, r3, #1
   1c1dc:	mov	r9, r0
   1c1e0:	b	1bf14 <__assert_fail@plt+0xac3c>
   1c1e4:	mov	r3, r1
   1c1e8:	mov	r1, r4
   1c1ec:	add	ip, r3, #1
   1c1f0:	mov	r4, r1
   1c1f4:	b	1c14c <__assert_fail@plt+0xae74>
   1c1f8:	cmp	ip, r8
   1c1fc:	movlt	r8, #0
   1c200:	movge	r8, #1
   1c204:	orrs	r3, r8, ip, lsr #31
   1c208:	mov	r3, ip
   1c20c:	bne	1c19c <__assert_fail@plt+0xaec4>
   1c210:	cmp	ip, fp
   1c214:	str	fp, [r5, #4]
   1c218:	bge	1c234 <__assert_fail@plt+0xaf5c>
   1c21c:	ldr	r2, [r6, #4]
   1c220:	add	r3, r3, #1
   1c224:	str	r2, [r6], #4
   1c228:	ldr	r2, [r5, #4]
   1c22c:	cmp	r3, r2
   1c230:	blt	1c21c <__assert_fail@plt+0xaf44>
   1c234:	ldr	r3, [sp, #12]
   1c238:	ldr	lr, [r3, #4]
   1c23c:	b	1c19c <__assert_fail@plt+0xaec4>
   1c240:	mov	r3, r1
   1c244:	mov	r1, sl
   1c248:	add	r0, r3, #1
   1c24c:	mov	sl, r1
   1c250:	b	1bfe0 <__assert_fail@plt+0xad08>
   1c254:	ldr	r3, [sp, #8]
   1c258:	ldr	r3, [r3, #4]
   1c25c:	cmp	r3, #0
   1c260:	beq	1c098 <__assert_fail@plt+0xadc0>
   1c264:	ldr	r2, [r6, #28]
   1c268:	ldr	r1, [sp, #4]
   1c26c:	add	r2, r2, r1
   1c270:	ldr	r0, [r2, #4]
   1c274:	cmp	r0, #0
   1c278:	beq	1c098 <__assert_fail@plt+0xadc0>
   1c27c:	ldr	r1, [sp, #24]
   1c280:	add	r3, r3, r0
   1c284:	ldr	r7, [sp, #20]
   1c288:	add	r1, r3, r1
   1c28c:	cmp	r1, r7
   1c290:	bgt	1c308 <__assert_fail@plt+0xb030>
   1c294:	ldr	r1, [sp, #8]
   1c298:	add	r0, sp, #20
   1c29c:	bl	177ec <__assert_fail@plt+0x6514>
   1c2a0:	cmp	r0, #0
   1c2a4:	bne	1c334 <__assert_fail@plt+0xb05c>
   1c2a8:	ldr	lr, [r5, #4]
   1c2ac:	b	1c098 <__assert_fail@plt+0xadc0>
   1c2b0:	mov	r3, r0
   1c2b4:	mov	r0, r9
   1c2b8:	add	ip, r3, #1
   1c2bc:	mov	r9, r0
   1c2c0:	b	1bf7c <__assert_fail@plt+0xaca4>
   1c2c4:	cmp	r7, #0
   1c2c8:	bgt	1bfdc <__assert_fail@plt+0xad04>
   1c2cc:	b	1c098 <__assert_fail@plt+0xadc0>
   1c2d0:	cmp	lr, #0
   1c2d4:	mvngt	r7, #0
   1c2d8:	bgt	1bf08 <__assert_fail@plt+0xac30>
   1c2dc:	ldr	r3, [sp]
   1c2e0:	ldr	fp, [r3, #4]
   1c2e4:	cmp	fp, #0
   1c2e8:	ble	1c0a4 <__assert_fail@plt+0xadcc>
   1c2ec:	mvn	r7, #0
   1c2f0:	b	1bf70 <__assert_fail@plt+0xac98>
   1c2f4:	mov	r3, r2
   1c2f8:	mov	r2, fp
   1c2fc:	add	r1, r3, #1
   1c300:	mov	fp, r2
   1c304:	b	1c04c <__assert_fail@plt+0xad74>
   1c308:	add	r7, r3, r7
   1c30c:	ldr	r0, [sp, #28]
   1c310:	lsl	r1, r7, #2
   1c314:	str	r2, [sp, #4]
   1c318:	bl	29510 <__assert_fail@plt+0x18238>
   1c31c:	cmp	r0, #0
   1c320:	beq	1c354 <__assert_fail@plt+0xb07c>
   1c324:	str	r0, [sp, #28]
   1c328:	str	r7, [sp, #20]
   1c32c:	ldr	r2, [sp, #4]
   1c330:	b	1c294 <__assert_fail@plt+0xafbc>
   1c334:	mov	r7, r0
   1c338:	ldr	r0, [sp, #28]
   1c33c:	bl	296b0 <__assert_fail@plt+0x183d8>
   1c340:	mov	r0, r7
   1c344:	add	sp, sp, #36	; 0x24
   1c348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c34c:	mov	r0, r4
   1c350:	b	1c1a8 <__assert_fail@plt+0xaed0>
   1c354:	mov	r7, #12
   1c358:	b	1c338 <__assert_fail@plt+0xb060>
   1c35c:	ldr	r3, [r0, #36]	; 0x24
   1c360:	cmn	r3, #-536870910	; 0xe0000002
   1c364:	bhi	1c560 <__assert_fail@plt+0xb288>
   1c368:	ldr	r2, [r0, #48]	; 0x30
   1c36c:	push	{r4, r5, r6, lr}
   1c370:	lsl	r5, r3, #1
   1c374:	cmp	r5, r2
   1c378:	movge	r5, r2
   1c37c:	ldr	r3, [r0, #80]	; 0x50
   1c380:	cmp	r5, r1
   1c384:	movlt	r5, r1
   1c388:	cmp	r3, #1
   1c38c:	mov	r4, r0
   1c390:	ble	1c3d8 <__assert_fail@plt+0xb100>
   1c394:	cmn	r5, #-1073741823	; 0xc0000001
   1c398:	bhi	1c4b4 <__assert_fail@plt+0xb1dc>
   1c39c:	lsl	r6, r5, #2
   1c3a0:	mov	r1, r6
   1c3a4:	ldr	r0, [r0, #8]
   1c3a8:	bl	29510 <__assert_fail@plt+0x18238>
   1c3ac:	subs	r3, r0, #0
   1c3b0:	beq	1c4b4 <__assert_fail@plt+0xb1dc>
   1c3b4:	ldr	r0, [r4, #12]
   1c3b8:	str	r3, [r4, #8]
   1c3bc:	cmp	r0, #0
   1c3c0:	beq	1c3d8 <__assert_fail@plt+0xb100>
   1c3c4:	mov	r1, r6
   1c3c8:	bl	29510 <__assert_fail@plt+0x18238>
   1c3cc:	cmp	r0, #0
   1c3d0:	beq	1c4b4 <__assert_fail@plt+0xb1dc>
   1c3d4:	str	r0, [r4, #12]
   1c3d8:	ldrb	r3, [r4, #75]	; 0x4b
   1c3dc:	cmp	r3, #0
   1c3e0:	bne	1c4a0 <__assert_fail@plt+0xb1c8>
   1c3e4:	ldr	r0, [r4, #100]	; 0x64
   1c3e8:	str	r5, [r4, #36]	; 0x24
   1c3ec:	cmp	r0, #0
   1c3f0:	beq	1c40c <__assert_fail@plt+0xb134>
   1c3f4:	add	r1, r5, #1
   1c3f8:	lsl	r1, r1, #2
   1c3fc:	bl	29510 <__assert_fail@plt+0x18238>
   1c400:	cmp	r0, #0
   1c404:	beq	1c4b4 <__assert_fail@plt+0xb1dc>
   1c408:	str	r0, [r4, #100]	; 0x64
   1c40c:	ldrb	r5, [r4, #72]	; 0x48
   1c410:	ldr	r3, [r4, #80]	; 0x50
   1c414:	cmp	r5, #0
   1c418:	beq	1c430 <__assert_fail@plt+0xb158>
   1c41c:	cmp	r3, #1
   1c420:	ble	1c4d4 <__assert_fail@plt+0xb1fc>
   1c424:	mov	r0, r4
   1c428:	pop	{r4, r5, r6, lr}
   1c42c:	b	16f10 <__assert_fail@plt+0x5c38>
   1c430:	cmp	r3, #1
   1c434:	bgt	1c4c4 <__assert_fail@plt+0xb1ec>
   1c438:	ldr	r0, [r4, #64]	; 0x40
   1c43c:	cmp	r0, #0
   1c440:	popeq	{r4, r5, r6, pc}
   1c444:	ldr	lr, [r4, #36]	; 0x24
   1c448:	ldr	r2, [r4, #48]	; 0x30
   1c44c:	ldr	r3, [r4, #28]
   1c450:	cmp	lr, r2
   1c454:	movge	lr, r2
   1c458:	cmp	lr, r3
   1c45c:	bgt	1c468 <__assert_fail@plt+0xb190>
   1c460:	b	1c490 <__assert_fail@plt+0xb1b8>
   1c464:	ldr	r0, [r4, #64]	; 0x40
   1c468:	ldr	r2, [r4]
   1c46c:	ldr	ip, [r4, #24]
   1c470:	add	r2, r2, r3
   1c474:	ldr	r1, [r4, #4]
   1c478:	ldrb	r2, [r2, ip]
   1c47c:	ldrb	r2, [r0, r2]
   1c480:	strb	r2, [r1, r3]
   1c484:	add	r3, r3, #1
   1c488:	cmp	lr, r3
   1c48c:	bne	1c464 <__assert_fail@plt+0xb18c>
   1c490:	str	r3, [r4, #28]
   1c494:	str	r3, [r4, #32]
   1c498:	mov	r0, #0
   1c49c:	pop	{r4, r5, r6, pc}
   1c4a0:	mov	r1, r5
   1c4a4:	ldr	r0, [r4, #4]
   1c4a8:	bl	29510 <__assert_fail@plt+0x18238>
   1c4ac:	cmp	r0, #0
   1c4b0:	bne	1c4bc <__assert_fail@plt+0xb1e4>
   1c4b4:	mov	r0, #12
   1c4b8:	pop	{r4, r5, r6, pc}
   1c4bc:	str	r0, [r4, #4]
   1c4c0:	b	1c3e4 <__assert_fail@plt+0xb10c>
   1c4c4:	mov	r0, r4
   1c4c8:	bl	16d70 <__assert_fail@plt+0x5a98>
   1c4cc:	mov	r0, r5
   1c4d0:	pop	{r4, r5, r6, pc}
   1c4d4:	ldr	r6, [r4, #36]	; 0x24
   1c4d8:	ldr	r3, [r4, #48]	; 0x30
   1c4dc:	ldr	r5, [r4, #28]
   1c4e0:	cmp	r6, r3
   1c4e4:	movge	r6, r3
   1c4e8:	cmp	r6, r5
   1c4ec:	ble	1c568 <__assert_fail@plt+0xb290>
   1c4f0:	bl	1117c <__ctype_toupper_loc@plt>
   1c4f4:	b	1c514 <__assert_fail@plt+0xb23c>
   1c4f8:	ldr	r1, [r0]
   1c4fc:	ldr	r2, [r4, #4]
   1c500:	ldr	r3, [r1, r3, lsl #2]
   1c504:	strb	r3, [r2, r5]
   1c508:	add	r5, r5, #1
   1c50c:	cmp	r6, r5
   1c510:	beq	1c550 <__assert_fail@plt+0xb278>
   1c514:	ldr	r3, [r4]
   1c518:	ldr	r1, [r4, #24]
   1c51c:	ldr	r2, [r4, #64]	; 0x40
   1c520:	add	r3, r3, r5
   1c524:	cmp	r2, #0
   1c528:	ldrb	r3, [r3, r1]
   1c52c:	beq	1c4f8 <__assert_fail@plt+0xb220>
   1c530:	ldrb	r3, [r2, r3]
   1c534:	ldr	ip, [r0]
   1c538:	ldr	r1, [r4, #4]
   1c53c:	ldr	r3, [ip, r3, lsl #2]
   1c540:	strb	r3, [r1, r5]
   1c544:	add	r5, r5, #1
   1c548:	cmp	r6, r5
   1c54c:	bne	1c514 <__assert_fail@plt+0xb23c>
   1c550:	str	r6, [r4, #28]
   1c554:	str	r6, [r4, #32]
   1c558:	mov	r0, #0
   1c55c:	pop	{r4, r5, r6, pc}
   1c560:	mov	r0, #12
   1c564:	bx	lr
   1c568:	mov	r6, r5
   1c56c:	b	1c550 <__assert_fail@plt+0xb278>
   1c570:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c574:	mov	r3, #0
   1c578:	ldr	r7, [r2, #4]
   1c57c:	str	r3, [r0]
   1c580:	cmp	r7, r3
   1c584:	beq	1c820 <__assert_fail@plt+0xb548>
   1c588:	ble	1c82c <__assert_fail@plt+0xb554>
   1c58c:	ldr	r3, [r2, #8]
   1c590:	mov	r5, r7
   1c594:	add	lr, r3, r7, lsl #2
   1c598:	ldr	ip, [r3], #4
   1c59c:	cmp	lr, r3
   1c5a0:	add	r5, r5, ip
   1c5a4:	bne	1c598 <__assert_fail@plt+0xb2c0>
   1c5a8:	ldr	r3, [r1, #68]	; 0x44
   1c5ac:	ldr	ip, [r1, #32]
   1c5b0:	and	r3, r3, r5
   1c5b4:	add	r3, r3, r3, lsl #1
   1c5b8:	lsl	r3, r3, #2
   1c5bc:	add	lr, ip, r3
   1c5c0:	ldr	r6, [ip, r3]
   1c5c4:	cmp	r6, #0
   1c5c8:	ble	1c620 <__assert_fail@plt+0xb348>
   1c5cc:	ldr	lr, [lr, #8]
   1c5d0:	sub	sl, r7, #1
   1c5d4:	sub	lr, lr, #4
   1c5d8:	lsl	sl, sl, #2
   1c5dc:	mov	r3, #0
   1c5e0:	b	1c5f0 <__assert_fail@plt+0xb318>
   1c5e4:	add	r3, r3, #1
   1c5e8:	cmp	r3, r6
   1c5ec:	beq	1c620 <__assert_fail@plt+0xb348>
   1c5f0:	ldr	r4, [lr, #4]!
   1c5f4:	ldr	ip, [r4]
   1c5f8:	cmp	r5, ip
   1c5fc:	bne	1c5e4 <__assert_fail@plt+0xb30c>
   1c600:	ldr	ip, [r4, #8]
   1c604:	cmp	r7, ip
   1c608:	moveq	ip, sl
   1c60c:	moveq	r8, r7
   1c610:	beq	1c788 <__assert_fail@plt+0xb4b0>
   1c614:	add	r3, r3, #1
   1c618:	cmp	r3, r6
   1c61c:	bne	1c5f0 <__assert_fail@plt+0xb318>
   1c620:	mov	r6, r1
   1c624:	mov	r7, r0
   1c628:	mov	r1, #1
   1c62c:	mov	r0, #56	; 0x38
   1c630:	mov	r9, r2
   1c634:	bl	2949c <__assert_fail@plt+0x181c4>
   1c638:	subs	r4, r0, #0
   1c63c:	beq	1c80c <__assert_fail@plt+0xb534>
   1c640:	ldr	r0, [r9, #4]
   1c644:	add	r8, r4, #4
   1c648:	cmp	r0, #0
   1c64c:	str	r0, [r4, #8]
   1c650:	ble	1c7a8 <__assert_fail@plt+0xb4d0>
   1c654:	str	r0, [r4, #4]
   1c658:	lsl	r0, r0, #2
   1c65c:	bl	294e4 <__assert_fail@plt+0x1820c>
   1c660:	cmp	r0, #0
   1c664:	str	r0, [r4, #12]
   1c668:	beq	1c834 <__assert_fail@plt+0xb55c>
   1c66c:	ldr	fp, [r9, #4]
   1c670:	ldr	r1, [r9, #8]
   1c674:	lsl	sl, fp, #2
   1c678:	mov	r2, sl
   1c67c:	bl	11068 <memcpy@plt>
   1c680:	cmp	fp, #0
   1c684:	str	r8, [r4, #40]	; 0x28
   1c688:	ble	1c74c <__assert_fail@plt+0xb474>
   1c68c:	ldr	ip, [r9, #8]
   1c690:	ldr	r9, [r6]
   1c694:	add	lr, ip, sl
   1c698:	ldr	sl, [pc, #424]	; 1c848 <__assert_fail@plt+0xb570>
   1c69c:	b	1c6f8 <__assert_fail@plt+0xb420>
   1c6a0:	ldrb	r3, [r2, #6]
   1c6a4:	ldrb	r1, [r4, #52]	; 0x34
   1c6a8:	cmp	r0, #2
   1c6ac:	lsr	r3, r3, #4
   1c6b0:	orr	r3, r3, r1, lsr #5
   1c6b4:	and	r3, r3, #1
   1c6b8:	bic	r1, r1, #32
   1c6bc:	orr	r3, r1, r3, lsl #5
   1c6c0:	strb	r3, [r4, #52]	; 0x34
   1c6c4:	uxtbeq	r3, r3
   1c6c8:	orreq	r3, r3, #16
   1c6cc:	strbeq	r3, [r4, #52]	; 0x34
   1c6d0:	beq	1c6f0 <__assert_fail@plt+0xb418>
   1c6d4:	cmp	r0, #4
   1c6d8:	beq	1c798 <__assert_fail@plt+0xb4c0>
   1c6dc:	cmp	r0, #12
   1c6e0:	beq	1c738 <__assert_fail@plt+0xb460>
   1c6e4:	ldr	r3, [r2, #4]
   1c6e8:	tst	r3, sl
   1c6ec:	bne	1c738 <__assert_fail@plt+0xb460>
   1c6f0:	cmp	lr, ip
   1c6f4:	beq	1c74c <__assert_fail@plt+0xb474>
   1c6f8:	ldr	r2, [ip], #4
   1c6fc:	add	r2, r9, r2, lsl #3
   1c700:	ldrb	r0, [r2, #4]
   1c704:	cmp	r0, #1
   1c708:	bne	1c6a0 <__assert_fail@plt+0xb3c8>
   1c70c:	ldr	r3, [r2, #4]
   1c710:	tst	r3, sl
   1c714:	beq	1c6f0 <__assert_fail@plt+0xb418>
   1c718:	ldrb	r3, [r2, #6]
   1c71c:	ldrb	r2, [r4, #52]	; 0x34
   1c720:	lsr	r3, r3, #4
   1c724:	orr	r3, r3, r2, lsr #5
   1c728:	and	r3, r3, #1
   1c72c:	bic	r2, r2, #32
   1c730:	orr	r3, r2, r3, lsl #5
   1c734:	strb	r3, [r4, #52]	; 0x34
   1c738:	ldrb	r3, [r4, #52]	; 0x34
   1c73c:	cmp	lr, ip
   1c740:	orr	r3, r3, #128	; 0x80
   1c744:	strb	r3, [r4, #52]	; 0x34
   1c748:	bne	1c6f8 <__assert_fail@plt+0xb420>
   1c74c:	mov	r2, r5
   1c750:	mov	r0, r6
   1c754:	mov	r1, r4
   1c758:	bl	16c34 <__assert_fail@plt+0x595c>
   1c75c:	cmp	r0, #0
   1c760:	bne	1c7c0 <__assert_fail@plt+0xb4e8>
   1c764:	mov	r0, r4
   1c768:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c76c:	ldr	fp, [r4, #12]
   1c770:	ldr	r9, [r2, #8]
   1c774:	ldr	fp, [fp, ip]
   1c778:	ldr	r9, [r9, ip]
   1c77c:	sub	ip, ip, #4
   1c780:	cmp	fp, r9
   1c784:	bne	1c5e4 <__assert_fail@plt+0xb30c>
   1c788:	subs	r8, r8, #1
   1c78c:	bpl	1c76c <__assert_fail@plt+0xb494>
   1c790:	mov	r0, r4
   1c794:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c798:	ldrb	r3, [r4, #52]	; 0x34
   1c79c:	orr	r3, r3, #64	; 0x40
   1c7a0:	strb	r3, [r4, #52]	; 0x34
   1c7a4:	b	1c6f0 <__assert_fail@plt+0xb418>
   1c7a8:	mov	r3, #0
   1c7ac:	str	r3, [r4, #4]
   1c7b0:	str	r3, [r8, #4]
   1c7b4:	str	r3, [r8, #8]
   1c7b8:	str	r8, [r4, #40]	; 0x28
   1c7bc:	b	1c74c <__assert_fail@plt+0xb474>
   1c7c0:	ldr	r0, [r4, #24]
   1c7c4:	bl	296b0 <__assert_fail@plt+0x183d8>
   1c7c8:	ldr	r0, [r4, #36]	; 0x24
   1c7cc:	bl	296b0 <__assert_fail@plt+0x183d8>
   1c7d0:	ldr	r3, [r4, #40]	; 0x28
   1c7d4:	cmp	r8, r3
   1c7d8:	beq	1c7ec <__assert_fail@plt+0xb514>
   1c7dc:	ldr	r0, [r3, #8]
   1c7e0:	bl	296b0 <__assert_fail@plt+0x183d8>
   1c7e4:	ldr	r0, [r4, #40]	; 0x28
   1c7e8:	bl	296b0 <__assert_fail@plt+0x183d8>
   1c7ec:	ldr	r0, [r4, #12]
   1c7f0:	bl	296b0 <__assert_fail@plt+0x183d8>
   1c7f4:	ldr	r0, [r4, #48]	; 0x30
   1c7f8:	bl	296b0 <__assert_fail@plt+0x183d8>
   1c7fc:	ldr	r0, [r4, #44]	; 0x2c
   1c800:	bl	296b0 <__assert_fail@plt+0x183d8>
   1c804:	mov	r0, r4
   1c808:	bl	296b0 <__assert_fail@plt+0x183d8>
   1c80c:	mov	r4, #0
   1c810:	mov	r3, #12
   1c814:	str	r3, [r7]
   1c818:	mov	r0, r4
   1c81c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c820:	mov	r4, r7
   1c824:	mov	r0, r4
   1c828:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c82c:	mov	r5, r7
   1c830:	b	1c5a8 <__assert_fail@plt+0xb2d0>
   1c834:	str	r0, [r4, #8]
   1c838:	str	r0, [r4, #4]
   1c83c:	mov	r0, r4
   1c840:	bl	296b0 <__assert_fail@plt+0x183d8>
   1c844:	b	1c80c <__assert_fail@plt+0xb534>
   1c848:	andeq	pc, r3, r0, lsl #30
   1c84c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c850:	mov	r6, #0
   1c854:	ldr	r5, [r0, #108]	; 0x6c
   1c858:	sub	sp, sp, #36	; 0x24
   1c85c:	mov	r4, r5
   1c860:	cmp	r6, r4
   1c864:	bge	1c8c0 <__assert_fail@plt+0xb5e8>
   1c868:	add	lr, r6, r4
   1c86c:	ldr	r7, [r0, #116]	; 0x74
   1c870:	add	lr, lr, lr, lsr #31
   1c874:	asr	lr, lr, #1
   1c878:	add	ip, lr, lr, lsl #1
   1c87c:	add	ip, r7, ip, lsl #3
   1c880:	ldr	ip, [ip, #4]
   1c884:	cmp	r2, ip
   1c888:	ble	1c8b0 <__assert_fail@plt+0xb5d8>
   1c88c:	b	1cc20 <__assert_fail@plt+0xb948>
   1c890:	asr	ip, ip, #1
   1c894:	mov	r8, ip
   1c898:	add	r4, ip, ip, lsl #1
   1c89c:	add	r4, r7, r4, lsl #3
   1c8a0:	ldr	r4, [r4, #4]
   1c8a4:	cmp	r2, r4
   1c8a8:	bgt	1cc28 <__assert_fail@plt+0xb950>
   1c8ac:	mov	lr, ip
   1c8b0:	add	ip, lr, r6
   1c8b4:	cmp	lr, r6
   1c8b8:	add	ip, ip, ip, lsr #31
   1c8bc:	bgt	1c890 <__assert_fail@plt+0xb5b8>
   1c8c0:	cmp	r5, r6
   1c8c4:	ble	1c994 <__assert_fail@plt+0xb6bc>
   1c8c8:	add	ip, r6, r6, lsl #1
   1c8cc:	ldr	r5, [r0, #116]	; 0x74
   1c8d0:	lsl	ip, ip, #3
   1c8d4:	add	lr, r5, ip
   1c8d8:	cmn	r6, #1
   1c8dc:	ldr	lr, [lr, #4]
   1c8e0:	movne	r6, #0
   1c8e4:	moveq	r6, #1
   1c8e8:	cmp	lr, r2
   1c8ec:	orrne	r6, r6, #1
   1c8f0:	cmp	r6, #0
   1c8f4:	bne	1c994 <__assert_fail@plt+0xb6bc>
   1c8f8:	ldr	r9, [r0, #84]	; 0x54
   1c8fc:	mov	r7, r1
   1c900:	mov	r8, r0
   1c904:	str	r3, [sp, #12]
   1c908:	add	r3, ip, #24
   1c90c:	str	r2, [sp, #4]
   1c910:	str	r3, [sp, #8]
   1c914:	add	r5, r5, r3
   1c918:	ldr	ip, [r7, #4]
   1c91c:	cmp	ip, #0
   1c920:	ble	1c984 <__assert_fail@plt+0xb6ac>
   1c924:	sub	ip, ip, #1
   1c928:	ldr	r0, [r5, #-24]	; 0xffffffe8
   1c92c:	ldr	r1, [r7, #8]
   1c930:	mov	r4, ip
   1c934:	mov	lr, r6
   1c938:	cmp	lr, r4
   1c93c:	bcs	1c978 <__assert_fail@plt+0xb6a0>
   1c940:	add	r2, lr, r4
   1c944:	lsr	r2, r2, #1
   1c948:	ldr	r3, [r1, r2, lsl #2]
   1c94c:	cmp	r0, r3
   1c950:	ble	1c968 <__assert_fail@plt+0xb690>
   1c954:	b	1c9a4 <__assert_fail@plt+0xb6cc>
   1c958:	ldr	r4, [r1, r3, lsl #2]
   1c95c:	cmp	r0, r4
   1c960:	bgt	1c9ac <__assert_fail@plt+0xb6d4>
   1c964:	mov	r2, r3
   1c968:	add	r3, lr, r2
   1c96c:	cmp	lr, r2
   1c970:	lsr	r3, r3, #1
   1c974:	bcc	1c958 <__assert_fail@plt+0xb680>
   1c978:	ldr	r3, [r1, lr, lsl #2]
   1c97c:	cmp	r0, r3
   1c980:	beq	1c9b8 <__assert_fail@plt+0xb6e0>
   1c984:	add	r5, r5, #24
   1c988:	ldrb	r3, [r5, #-28]	; 0xffffffe4
   1c98c:	cmp	r3, #0
   1c990:	bne	1c918 <__assert_fail@plt+0xb640>
   1c994:	mov	sl, #0
   1c998:	mov	r0, sl
   1c99c:	add	sp, sp, #36	; 0x24
   1c9a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c9a4:	mov	r3, r2
   1c9a8:	mov	r2, r4
   1c9ac:	add	lr, r3, #1
   1c9b0:	mov	r4, r2
   1c9b4:	b	1c938 <__assert_fail@plt+0xb660>
   1c9b8:	ldr	r2, [sp, #4]
   1c9bc:	ldr	sl, [r5, #-12]
   1c9c0:	ldr	r3, [r5, #-16]
   1c9c4:	add	sl, r2, sl
   1c9c8:	sub	sl, sl, r3
   1c9cc:	cmp	r2, sl
   1c9d0:	beq	1cb00 <__assert_fail@plt+0xb828>
   1c9d4:	ldr	r2, [r8, #100]	; 0x64
   1c9d8:	ldr	r3, [r9, #12]
   1c9dc:	ldr	fp, [r2, sl, lsl #2]
   1c9e0:	ldr	r4, [r3, r0, lsl #2]
   1c9e4:	cmp	fp, #0
   1c9e8:	beq	1cc34 <__assert_fail@plt+0xb95c>
   1c9ec:	ldr	ip, [fp, #8]
   1c9f0:	cmp	ip, #0
   1c9f4:	ble	1cc0c <__assert_fail@plt+0xb934>
   1c9f8:	ldr	lr, [fp, #12]
   1c9fc:	sub	r0, ip, #1
   1ca00:	mov	r1, r6
   1ca04:	cmp	r1, r0
   1ca08:	bcs	1ca44 <__assert_fail@plt+0xb76c>
   1ca0c:	add	r2, r1, r0
   1ca10:	lsr	r2, r2, #1
   1ca14:	ldr	r3, [lr, r2, lsl #2]
   1ca18:	cmp	r4, r3
   1ca1c:	ble	1ca34 <__assert_fail@plt+0xb75c>
   1ca20:	b	1caec <__assert_fail@plt+0xb814>
   1ca24:	ldr	r0, [lr, r3, lsl #2]
   1ca28:	cmp	r4, r0
   1ca2c:	bgt	1caf4 <__assert_fail@plt+0xb81c>
   1ca30:	mov	r2, r3
   1ca34:	add	r3, r2, r1
   1ca38:	cmp	r2, r1
   1ca3c:	lsr	r3, r3, #1
   1ca40:	bhi	1ca24 <__assert_fail@plt+0xb74c>
   1ca44:	ldr	r3, [lr, r1, lsl #2]
   1ca48:	cmp	r4, r3
   1ca4c:	beq	1c984 <__assert_fail@plt+0xb6ac>
   1ca50:	lsl	r0, ip, #2
   1ca54:	str	ip, [sp, #24]
   1ca58:	str	ip, [sp, #20]
   1ca5c:	bl	294e4 <__assert_fail@plt+0x1820c>
   1ca60:	cmp	r0, #0
   1ca64:	mov	r3, r0
   1ca68:	str	r0, [sp, #28]
   1ca6c:	beq	1ccac <__assert_fail@plt+0xb9d4>
   1ca70:	ldr	r2, [fp, #8]
   1ca74:	ldr	r1, [fp, #12]
   1ca78:	lsl	r2, r2, #2
   1ca7c:	bl	11068 <memcpy@plt>
   1ca80:	mov	r3, r6
   1ca84:	mov	r1, r4
   1ca88:	add	r0, sp, #20
   1ca8c:	str	r3, [sp, #16]
   1ca90:	bl	17640 <__assert_fail@plt+0x6368>
   1ca94:	ldr	r2, [sp, #16]
   1ca98:	eor	r3, r0, #1
   1ca9c:	cmp	r2, #0
   1caa0:	orrne	r3, r3, #1
   1caa4:	tst	r3, #255	; 0xff
   1caa8:	bne	1cc60 <__assert_fail@plt+0xb988>
   1caac:	add	r2, sp, #20
   1cab0:	mov	r1, r9
   1cab4:	add	r0, sp, #16
   1cab8:	ldr	r4, [r8, #100]	; 0x64
   1cabc:	bl	1c570 <__assert_fail@plt+0xb298>
   1cac0:	str	r0, [r4, sl, lsl #2]
   1cac4:	ldr	r0, [sp, #28]
   1cac8:	bl	296b0 <__assert_fail@plt+0x183d8>
   1cacc:	ldr	r3, [r8, #100]	; 0x64
   1cad0:	ldr	r3, [r3, sl, lsl #2]
   1cad4:	cmp	r3, #0
   1cad8:	bne	1c984 <__assert_fail@plt+0xb6ac>
   1cadc:	ldr	sl, [sp, #16]
   1cae0:	cmp	sl, #0
   1cae4:	beq	1c984 <__assert_fail@plt+0xb6ac>
   1cae8:	b	1c998 <__assert_fail@plt+0xb6c0>
   1caec:	mov	r3, r2
   1caf0:	mov	r2, r0
   1caf4:	add	r1, r3, #1
   1caf8:	mov	r0, r2
   1cafc:	b	1ca04 <__assert_fail@plt+0xb72c>
   1cb00:	add	r0, r0, r0, lsl #1
   1cb04:	ldr	r3, [r9, #20]
   1cb08:	mov	lr, r6
   1cb0c:	add	r3, r3, r0, lsl #2
   1cb10:	ldr	r3, [r3, #8]
   1cb14:	ldr	r4, [r3]
   1cb18:	cmp	lr, ip
   1cb1c:	bcs	1cb58 <__assert_fail@plt+0xb880>
   1cb20:	add	r2, lr, ip
   1cb24:	lsr	r2, r2, #1
   1cb28:	ldr	r3, [r1, r2, lsl #2]
   1cb2c:	cmp	r4, r3
   1cb30:	ble	1cb48 <__assert_fail@plt+0xb870>
   1cb34:	b	1cbf8 <__assert_fail@plt+0xb920>
   1cb38:	ldr	r0, [r1, r3, lsl #2]
   1cb3c:	cmp	r4, r0
   1cb40:	bgt	1cc00 <__assert_fail@plt+0xb928>
   1cb44:	mov	r2, r3
   1cb48:	add	r3, lr, r2
   1cb4c:	cmp	lr, r2
   1cb50:	lsr	r3, r3, #1
   1cb54:	bcc	1cb38 <__assert_fail@plt+0xb860>
   1cb58:	ldr	r3, [r1, lr, lsl #2]
   1cb5c:	cmp	r4, r3
   1cb60:	beq	1c984 <__assert_fail@plt+0xb6ac>
   1cb64:	mov	r3, #1
   1cb68:	mov	r0, #4
   1cb6c:	str	r3, [sp, #20]
   1cb70:	str	r3, [sp, #24]
   1cb74:	bl	294e4 <__assert_fail@plt+0x1820c>
   1cb78:	cmp	r0, #0
   1cb7c:	str	r0, [sp, #28]
   1cb80:	movne	ip, r6
   1cb84:	strne	r4, [r0]
   1cb88:	beq	1ccbc <__assert_fail@plt+0xb9e4>
   1cb8c:	ldr	r3, [sp, #72]	; 0x48
   1cb90:	ldr	r2, [sp, #12]
   1cb94:	add	r1, sp, #20
   1cb98:	mov	r0, r9
   1cb9c:	str	ip, [sp, #16]
   1cba0:	bl	1b000 <__assert_fail@plt+0x9d28>
   1cba4:	ldr	sl, [sp, #24]
   1cba8:	cmp	sl, #0
   1cbac:	mov	r4, r0
   1cbb0:	beq	1cbd4 <__assert_fail@plt+0xb8fc>
   1cbb4:	ldm	r7, {r2, r3}
   1cbb8:	add	r3, r3, sl, lsl #1
   1cbbc:	cmp	r2, r3
   1cbc0:	blt	1cc84 <__assert_fail@plt+0xb9ac>
   1cbc4:	add	r1, sp, #20
   1cbc8:	mov	r0, r7
   1cbcc:	bl	17bc4 <__assert_fail@plt+0x68ec>
   1cbd0:	mov	sl, r0
   1cbd4:	ldr	r0, [sp, #28]
   1cbd8:	bl	296b0 <__assert_fail@plt+0x183d8>
   1cbdc:	ldr	r3, [sp, #16]
   1cbe0:	orr	r2, r4, r3
   1cbe4:	orrs	r2, r2, sl
   1cbe8:	bne	1cccc <__assert_fail@plt+0xb9f4>
   1cbec:	ldr	r5, [r8, #116]	; 0x74
   1cbf0:	ldr	r3, [sp, #8]
   1cbf4:	b	1c914 <__assert_fail@plt+0xb63c>
   1cbf8:	mov	r3, r2
   1cbfc:	mov	r2, ip
   1cc00:	add	lr, r3, #1
   1cc04:	mov	ip, r2
   1cc08:	b	1cb18 <__assert_fail@plt+0xb840>
   1cc0c:	str	r6, [sp, #20]
   1cc10:	str	r6, [sp, #24]
   1cc14:	str	r6, [sp, #28]
   1cc18:	mov	r3, #0
   1cc1c:	b	1ca84 <__assert_fail@plt+0xb7ac>
   1cc20:	mov	r8, lr
   1cc24:	mov	lr, r4
   1cc28:	add	r6, r8, #1
   1cc2c:	mov	r4, lr
   1cc30:	b	1c860 <__assert_fail@plt+0xb588>
   1cc34:	mov	r3, #1
   1cc38:	mov	r0, #4
   1cc3c:	str	r3, [sp, #20]
   1cc40:	str	r3, [sp, #24]
   1cc44:	bl	294e4 <__assert_fail@plt+0x1820c>
   1cc48:	cmp	r0, #0
   1cc4c:	str	r0, [sp, #28]
   1cc50:	beq	1cc74 <__assert_fail@plt+0xb99c>
   1cc54:	str	r4, [r0]
   1cc58:	str	fp, [sp, #16]
   1cc5c:	b	1caac <__assert_fail@plt+0xb7d4>
   1cc60:	ldr	r0, [sp, #28]
   1cc64:	bl	296b0 <__assert_fail@plt+0x183d8>
   1cc68:	ldr	sl, [sp, #16]
   1cc6c:	cmp	sl, #0
   1cc70:	bne	1c998 <__assert_fail@plt+0xb6c0>
   1cc74:	mov	sl, #12
   1cc78:	mov	r0, sl
   1cc7c:	add	sp, sp, #36	; 0x24
   1cc80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc84:	add	sl, sl, r2
   1cc88:	ldr	r0, [r7, #8]
   1cc8c:	lsl	r1, sl, #3
   1cc90:	bl	29510 <__assert_fail@plt+0x18238>
   1cc94:	lsl	sl, sl, #1
   1cc98:	cmp	r0, #0
   1cc9c:	beq	1cce4 <__assert_fail@plt+0xba0c>
   1cca0:	str	r0, [r7, #8]
   1cca4:	str	sl, [r7]
   1cca8:	b	1cbc4 <__assert_fail@plt+0xb8ec>
   1ccac:	str	r3, [sp, #24]
   1ccb0:	str	r3, [sp, #20]
   1ccb4:	mov	r3, #12
   1ccb8:	b	1ca84 <__assert_fail@plt+0xb7ac>
   1ccbc:	str	r0, [sp, #24]
   1ccc0:	str	r0, [sp, #20]
   1ccc4:	mov	ip, #12
   1ccc8:	b	1cb8c <__assert_fail@plt+0xb8b4>
   1cccc:	cmp	r3, #0
   1ccd0:	movne	sl, r3
   1ccd4:	bne	1c998 <__assert_fail@plt+0xb6c0>
   1ccd8:	cmp	r4, #0
   1ccdc:	movne	sl, r4
   1cce0:	b	1c998 <__assert_fail@plt+0xb6c0>
   1cce4:	mov	sl, #12
   1cce8:	b	1cbd4 <__assert_fail@plt+0xb8fc>
   1ccec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ccf0:	mov	sl, r2
   1ccf4:	ldr	r2, [r0, #100]	; 0x64
   1ccf8:	sub	sp, sp, #116	; 0x74
   1ccfc:	mov	ip, #0
   1cd00:	ldr	r8, [r2, sl, lsl #2]
   1cd04:	mov	r5, r3
   1cd08:	cmp	r8, ip
   1cd0c:	lsl	r3, sl, #2
   1cd10:	str	r3, [sp, #36]	; 0x24
   1cd14:	str	r0, [sp, #32]
   1cd18:	mov	fp, r1
   1cd1c:	ldr	r6, [r0, #84]	; 0x54
   1cd20:	str	ip, [sp, #64]	; 0x40
   1cd24:	ldr	r3, [r5, #4]
   1cd28:	beq	1d504 <__assert_fail@plt+0xc22c>
   1cd2c:	add	r2, r8, #4
   1cd30:	cmp	r3, ip
   1cd34:	str	r2, [sp, #20]
   1cd38:	bne	1cd78 <__assert_fail@plt+0xbaa0>
   1cd3c:	ldr	r3, [fp]
   1cd40:	mov	r2, #0
   1cd44:	str	r2, [r3, sl, lsl #2]
   1cd48:	ldr	r3, [sp, #20]
   1cd4c:	cmp	r3, #0
   1cd50:	beq	1cd6c <__assert_fail@plt+0xba94>
   1cd54:	ldr	r3, [sp, #32]
   1cd58:	ldr	r3, [r3, #100]	; 0x64
   1cd5c:	ldr	r3, [r3, sl, lsl #2]
   1cd60:	ldrb	r3, [r3, #52]	; 0x34
   1cd64:	ands	r3, r3, #64	; 0x40
   1cd68:	bne	1ce64 <__assert_fail@plt+0xbb8c>
   1cd6c:	mov	r0, r3
   1cd70:	add	sp, sp, #116	; 0x74
   1cd74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd78:	add	r0, sp, #112	; 0x70
   1cd7c:	mov	r2, r5
   1cd80:	str	ip, [r0, #-28]!	; 0xffffffe4
   1cd84:	mov	r1, r6
   1cd88:	bl	1c570 <__assert_fail@plt+0xb298>
   1cd8c:	ldr	r3, [sp, #84]	; 0x54
   1cd90:	cmp	r3, #0
   1cd94:	mov	r9, r0
   1cd98:	bne	1cd6c <__assert_fail@plt+0xba94>
   1cd9c:	ldr	r7, [r0, #28]
   1cda0:	cmp	r7, #0
   1cda4:	addne	r3, r0, #28
   1cda8:	strne	r3, [sp, #16]
   1cdac:	bne	1d1fc <__assert_fail@plt+0xbf24>
   1cdb0:	ldr	r0, [r5, #4]
   1cdb4:	str	r7, [r9, #32]
   1cdb8:	str	r0, [r9, #28]
   1cdbc:	lsl	r0, r0, #2
   1cdc0:	bl	294e4 <__assert_fail@plt+0x1820c>
   1cdc4:	add	r3, r9, #28
   1cdc8:	str	r3, [sp, #16]
   1cdcc:	cmp	r0, #0
   1cdd0:	str	r0, [r9, #36]	; 0x24
   1cdd4:	beq	1d378 <__assert_fail@plt+0xc0a0>
   1cdd8:	ldr	r2, [r5, #4]
   1cddc:	str	r7, [sp, #84]	; 0x54
   1cde0:	cmp	r2, #0
   1cde4:	movgt	r4, r3
   1cde8:	strgt	r8, [sp, #24]
   1cdec:	strgt	sl, [sp, #28]
   1cdf0:	bgt	1ce34 <__assert_fail@plt+0xbb5c>
   1cdf4:	b	1d1fc <__assert_fail@plt+0xbf24>
   1cdf8:	ldr	r2, [r9, #32]
   1cdfc:	ldr	r0, [r9, #28]
   1ce00:	add	r2, r2, r1, lsl #1
   1ce04:	cmp	r0, r2
   1ce08:	blt	1d4dc <__assert_fail@plt+0xc204>
   1ce0c:	mov	r1, r8
   1ce10:	mov	r0, r4
   1ce14:	bl	17bc4 <__assert_fail@plt+0x68ec>
   1ce18:	cmp	r0, #0
   1ce1c:	str	r0, [sp, #84]	; 0x54
   1ce20:	bne	1d378 <__assert_fail@plt+0xc0a0>
   1ce24:	ldr	r2, [r5, #4]
   1ce28:	add	r7, r7, #1
   1ce2c:	cmp	r7, r2
   1ce30:	bge	1d1f4 <__assert_fail@plt+0xbf1c>
   1ce34:	ldr	r3, [r5, #8]
   1ce38:	ldr	r1, [r6, #28]
   1ce3c:	ldr	r3, [r3, r7, lsl #2]
   1ce40:	add	r3, r3, r3, lsl #1
   1ce44:	adds	r8, r1, r3, lsl #2
   1ce48:	beq	1ce58 <__assert_fail@plt+0xbb80>
   1ce4c:	ldr	r1, [r8, #4]
   1ce50:	cmp	r1, #0
   1ce54:	bne	1cdf8 <__assert_fail@plt+0xbb20>
   1ce58:	mov	r3, #0
   1ce5c:	str	r3, [sp, #84]	; 0x54
   1ce60:	b	1ce28 <__assert_fail@plt+0xbb50>
   1ce64:	ldr	r4, [sp, #32]
   1ce68:	mov	r3, #0
   1ce6c:	mov	r0, r3
   1ce70:	ldr	ip, [r4, #108]	; 0x6c
   1ce74:	mov	r3, ip
   1ce78:	cmp	r0, r3
   1ce7c:	bge	1ced8 <__assert_fail@plt+0xbc00>
   1ce80:	add	r2, r0, r3
   1ce84:	ldr	lr, [r4, #116]	; 0x74
   1ce88:	add	r2, r2, r2, lsr #31
   1ce8c:	asr	r2, r2, #1
   1ce90:	add	r1, r2, r2, lsl #1
   1ce94:	add	r1, lr, r1, lsl #3
   1ce98:	ldr	r1, [r1, #4]
   1ce9c:	cmp	sl, r1
   1cea0:	ble	1cec8 <__assert_fail@plt+0xbbf0>
   1cea4:	b	1d1e0 <__assert_fail@plt+0xbf08>
   1cea8:	asr	r3, r3, #1
   1ceac:	mov	r5, r3
   1ceb0:	add	r1, r3, r3, lsl #1
   1ceb4:	add	r1, lr, r1, lsl #3
   1ceb8:	ldr	r1, [r1, #4]
   1cebc:	cmp	sl, r1
   1cec0:	bgt	1d1e8 <__assert_fail@plt+0xbf10>
   1cec4:	mov	r2, r3
   1cec8:	add	r3, r2, r0
   1cecc:	cmp	r2, r0
   1ced0:	add	r3, r3, r3, lsr #31
   1ced4:	bgt	1cea8 <__assert_fail@plt+0xbbd0>
   1ced8:	cmp	ip, r0
   1cedc:	str	r0, [sp, #40]	; 0x28
   1cee0:	ble	1d1d0 <__assert_fail@plt+0xbef8>
   1cee4:	ldr	r3, [sp, #32]
   1cee8:	add	r2, r0, r0, lsl #1
   1ceec:	ldr	r3, [r3, #116]	; 0x74
   1cef0:	lsl	r2, r2, #3
   1cef4:	add	r3, r3, r2
   1cef8:	str	r2, [sp, #56]	; 0x38
   1cefc:	ldr	r3, [r3, #4]
   1cf00:	cmp	sl, r3
   1cf04:	bne	1d1d0 <__assert_fail@plt+0xbef8>
   1cf08:	ldr	r3, [sp, #40]	; 0x28
   1cf0c:	cmn	r3, #1
   1cf10:	beq	1d1d0 <__assert_fail@plt+0xbef8>
   1cf14:	ldr	r3, [sp, #20]
   1cf18:	ldr	r2, [sp, #32]
   1cf1c:	ldr	r0, [r3, #4]
   1cf20:	mov	r3, #0
   1cf24:	cmp	r0, r3
   1cf28:	str	r3, [sp, #84]	; 0x54
   1cf2c:	ldr	r8, [r2, #84]	; 0x54
   1cf30:	ble	1d1d0 <__assert_fail@plt+0xbef8>
   1cf34:	str	r3, [sp, #16]
   1cf38:	add	r3, fp, #24
   1cf3c:	str	r3, [sp, #44]	; 0x2c
   1cf40:	add	r3, fp, #20
   1cf44:	str	r3, [sp, #48]	; 0x30
   1cf48:	b	1cf68 <__assert_fail@plt+0xbc90>
   1cf4c:	cmp	r3, #4
   1cf50:	beq	1cfa4 <__assert_fail@plt+0xbccc>
   1cf54:	ldr	r3, [sp, #16]
   1cf58:	add	r3, r3, #1
   1cf5c:	cmp	r3, r0
   1cf60:	str	r3, [sp, #16]
   1cf64:	bge	1d1c0 <__assert_fail@plt+0xbee8>
   1cf68:	ldr	r3, [sp, #20]
   1cf6c:	ldr	ip, [sp, #16]
   1cf70:	ldr	r2, [fp, #8]
   1cf74:	ldr	r1, [r3, #8]
   1cf78:	ldr	r3, [r8]
   1cf7c:	ldr	r6, [r1, ip, lsl #2]
   1cf80:	cmp	r6, r2
   1cf84:	add	r3, r3, r6, lsl #3
   1cf88:	ldrb	r3, [r3, #4]
   1cf8c:	bne	1cf4c <__assert_fail@plt+0xbc74>
   1cf90:	ldr	r2, [fp, #12]
   1cf94:	cmp	sl, r2
   1cf98:	beq	1cf54 <__assert_fail@plt+0xbc7c>
   1cf9c:	cmp	r3, #4
   1cfa0:	bne	1cf54 <__assert_fail@plt+0xbc7c>
   1cfa4:	ldr	r3, [sp, #32]
   1cfa8:	ldr	r2, [sp, #56]	; 0x38
   1cfac:	ldr	r4, [sp, #40]	; 0x28
   1cfb0:	ldr	r7, [r3, #116]	; 0x74
   1cfb4:	add	r3, r6, r6, lsl #1
   1cfb8:	add	r7, r7, r2
   1cfbc:	lsl	r3, r3, #2
   1cfc0:	str	r3, [sp, #28]
   1cfc4:	lsl	r3, r6, #2
   1cfc8:	str	r3, [sp, #24]
   1cfcc:	mov	r5, r2
   1cfd0:	b	1cfec <__assert_fail@plt+0xbd14>
   1cfd4:	ldrb	r3, [r7, #20]
   1cfd8:	add	r4, r4, #1
   1cfdc:	add	r5, r5, #24
   1cfe0:	cmp	r3, #0
   1cfe4:	add	r7, r7, #24
   1cfe8:	beq	1d39c <__assert_fail@plt+0xc0c4>
   1cfec:	ldr	r3, [r7]
   1cff0:	cmp	r6, r3
   1cff4:	bne	1cfd4 <__assert_fail@plt+0xbcfc>
   1cff8:	ldr	r3, [r7, #8]
   1cffc:	ldr	r9, [r7, #12]
   1d000:	sub	r9, r9, r3
   1d004:	cmp	r9, #0
   1d008:	add	r9, sl, r9
   1d00c:	ldreq	r3, [r8, #20]
   1d010:	ldreq	r2, [sp, #28]
   1d014:	ldrne	r3, [r8, #12]
   1d018:	addeq	r3, r3, r2
   1d01c:	ldrne	r2, [sp, #24]
   1d020:	ldreq	r3, [r3, #8]
   1d024:	ldrne	ip, [r3, r2]
   1d028:	ldreq	ip, [r3]
   1d02c:	ldr	r3, [fp, #12]
   1d030:	cmp	r9, r3
   1d034:	bgt	1cfd4 <__assert_fail@plt+0xbcfc>
   1d038:	ldr	r3, [fp]
   1d03c:	ldr	r3, [r3, r9, lsl #2]
   1d040:	cmp	r3, #0
   1d044:	beq	1cfd4 <__assert_fail@plt+0xbcfc>
   1d048:	ldr	r0, [r3, #8]
   1d04c:	cmp	r0, #0
   1d050:	ble	1cfd4 <__assert_fail@plt+0xbcfc>
   1d054:	ldr	lr, [r3, #12]
   1d058:	sub	r0, r0, #1
   1d05c:	mov	r1, #0
   1d060:	cmp	r1, r0
   1d064:	bcs	1d0a0 <__assert_fail@plt+0xbdc8>
   1d068:	add	r2, r1, r0
   1d06c:	lsr	r2, r2, #1
   1d070:	ldr	r3, [lr, r2, lsl #2]
   1d074:	cmp	r3, ip
   1d078:	bge	1d090 <__assert_fail@plt+0xbdb8>
   1d07c:	b	1d388 <__assert_fail@plt+0xc0b0>
   1d080:	ldr	r0, [lr, r3, lsl #2]
   1d084:	cmp	ip, r0
   1d088:	bgt	1d390 <__assert_fail@plt+0xc0b8>
   1d08c:	mov	r2, r3
   1d090:	add	r3, r1, r2
   1d094:	cmp	r1, r2
   1d098:	lsr	r3, r3, #1
   1d09c:	bcc	1d080 <__assert_fail@plt+0xbda8>
   1d0a0:	ldr	r3, [lr, r1, lsl #2]
   1d0a4:	cmp	ip, r3
   1d0a8:	bne	1cfd4 <__assert_fail@plt+0xbcfc>
   1d0ac:	str	r9, [sp, #8]
   1d0b0:	stm	sp, {sl, ip}
   1d0b4:	mov	r3, r6
   1d0b8:	ldr	r2, [sp, #44]	; 0x2c
   1d0bc:	ldr	r1, [sp, #48]	; 0x30
   1d0c0:	ldr	r0, [sp, #32]
   1d0c4:	bl	1bb90 <__assert_fail@plt+0xa8b8>
   1d0c8:	cmp	r0, #0
   1d0cc:	bne	1cfd4 <__assert_fail@plt+0xbcfc>
   1d0d0:	ldr	r3, [sp, #84]	; 0x54
   1d0d4:	cmp	r3, #0
   1d0d8:	beq	1d484 <__assert_fail@plt+0xc1ac>
   1d0dc:	mov	r1, r4
   1d0e0:	add	r0, sp, #100	; 0x64
   1d0e4:	str	r6, [sp, #92]	; 0x5c
   1d0e8:	str	sl, [sp, #96]	; 0x60
   1d0ec:	bl	17640 <__assert_fail@plt+0x6368>
   1d0f0:	cmp	r0, #0
   1d0f4:	beq	1d744 <__assert_fail@plt+0xc46c>
   1d0f8:	ldr	r3, [sp, #84]	; 0x54
   1d0fc:	ldr	r2, [sp, #36]	; 0x24
   1d100:	add	r1, sp, #84	; 0x54
   1d104:	ldr	r0, [sp, #32]
   1d108:	ldr	r3, [r3, r2]
   1d10c:	str	r3, [sp, #52]	; 0x34
   1d110:	bl	1d78c <__assert_fail@plt+0xc4b4>
   1d114:	subs	ip, r0, #0
   1d118:	bne	1d4b0 <__assert_fail@plt+0xc1d8>
   1d11c:	ldr	r7, [fp, #4]
   1d120:	cmp	r7, #0
   1d124:	beq	1d3a8 <__assert_fail@plt+0xc0d0>
   1d128:	cmp	sl, #0
   1d12c:	ldr	r9, [sp, #84]	; 0x54
   1d130:	blt	1d3ac <__assert_fail@plt+0xc0d4>
   1d134:	str	r4, [sp, #60]	; 0x3c
   1d138:	mov	r4, ip
   1d13c:	b	1d1a0 <__assert_fail@plt+0xbec8>
   1d140:	ldr	ip, [r9]
   1d144:	cmp	ip, #0
   1d148:	add	r2, ip, #4
   1d14c:	beq	1d18c <__assert_fail@plt+0xbeb4>
   1d150:	bl	17a78 <__assert_fail@plt+0x67a0>
   1d154:	add	r2, sp, #72	; 0x48
   1d158:	mov	r1, r8
   1d15c:	mov	ip, r0
   1d160:	cmp	ip, #0
   1d164:	add	r0, sp, #68	; 0x44
   1d168:	str	ip, [sp, #68]	; 0x44
   1d16c:	bne	1d4b0 <__assert_fail@plt+0xc1d8>
   1d170:	bl	1c570 <__assert_fail@plt+0xb298>
   1d174:	str	r0, [r7]
   1d178:	ldr	r0, [sp, #80]	; 0x50
   1d17c:	bl	296b0 <__assert_fail@plt+0x183d8>
   1d180:	ldr	ip, [sp, #68]	; 0x44
   1d184:	cmp	ip, #0
   1d188:	bne	1d4b0 <__assert_fail@plt+0xc1d8>
   1d18c:	add	r4, r4, #1
   1d190:	cmp	sl, r4
   1d194:	add	r7, r7, #4
   1d198:	add	r9, r9, #4
   1d19c:	blt	1d74c <__assert_fail@plt+0xc474>
   1d1a0:	ldr	r2, [r7]
   1d1a4:	add	r0, sp, #72	; 0x48
   1d1a8:	cmp	r2, #0
   1d1ac:	add	r1, r2, #4
   1d1b0:	bne	1d140 <__assert_fail@plt+0xbe68>
   1d1b4:	ldr	r2, [r9]
   1d1b8:	str	r2, [r7]
   1d1bc:	b	1d18c <__assert_fail@plt+0xbeb4>
   1d1c0:	ldr	r3, [sp, #84]	; 0x54
   1d1c4:	cmp	r3, #0
   1d1c8:	movne	r3, #0
   1d1cc:	bne	1d4c0 <__assert_fail@plt+0xc1e8>
   1d1d0:	mov	r3, #0
   1d1d4:	mov	r0, r3
   1d1d8:	add	sp, sp, #116	; 0x74
   1d1dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1e0:	mov	r5, r2
   1d1e4:	mov	r2, r3
   1d1e8:	add	r0, r5, #1
   1d1ec:	mov	r3, r2
   1d1f0:	b	1ce78 <__assert_fail@plt+0xbba0>
   1d1f4:	ldr	r8, [sp, #24]
   1d1f8:	ldr	sl, [sp, #28]
   1d1fc:	ldr	r3, [r8, #8]
   1d200:	cmp	r3, #0
   1d204:	beq	1d280 <__assert_fail@plt+0xbfa8>
   1d208:	ldr	r4, [r9, #32]
   1d20c:	cmp	r4, #0
   1d210:	beq	1d280 <__assert_fail@plt+0xbfa8>
   1d214:	ldr	r2, [r5, #4]
   1d218:	add	r3, r3, r4
   1d21c:	ldr	r4, [r5]
   1d220:	add	r2, r3, r2
   1d224:	cmp	r2, r4
   1d228:	bgt	1d768 <__assert_fail@plt+0xc490>
   1d22c:	ldr	r2, [sp, #16]
   1d230:	ldr	r1, [sp, #20]
   1d234:	mov	r0, r5
   1d238:	bl	177ec <__assert_fail@plt+0x6514>
   1d23c:	cmp	r0, #0
   1d240:	mov	r3, r0
   1d244:	str	r0, [sp, #64]	; 0x40
   1d248:	bne	1cd6c <__assert_fail@plt+0xba94>
   1d24c:	ldr	r1, [fp, #20]
   1d250:	cmp	r1, #0
   1d254:	bne	1d294 <__assert_fail@plt+0xbfbc>
   1d258:	mov	r2, r5
   1d25c:	mov	r1, r6
   1d260:	add	r0, sp, #64	; 0x40
   1d264:	ldr	r4, [fp]
   1d268:	bl	1c570 <__assert_fail@plt+0xb298>
   1d26c:	ldr	r3, [sp, #64]	; 0x40
   1d270:	cmp	r3, #0
   1d274:	str	r0, [r4, sl, lsl #2]
   1d278:	beq	1cd48 <__assert_fail@plt+0xba70>
   1d27c:	b	1cd6c <__assert_fail@plt+0xba94>
   1d280:	ldr	r1, [fp, #20]
   1d284:	mov	r3, #0
   1d288:	cmp	r1, #0
   1d28c:	str	r3, [sp, #64]	; 0x40
   1d290:	beq	1d258 <__assert_fail@plt+0xbf80>
   1d294:	ldr	r3, [sp, #32]
   1d298:	ldr	r3, [r3, #116]	; 0x74
   1d29c:	str	r3, [sp, #16]
   1d2a0:	ble	1d36c <__assert_fail@plt+0xc094>
   1d2a4:	mov	r9, #0
   1d2a8:	ldr	r3, [fp, #24]
   1d2ac:	ldr	ip, [sp, #16]
   1d2b0:	ldr	r3, [r3, r9, lsl #2]
   1d2b4:	add	r3, r3, r3, lsl #1
   1d2b8:	add	r2, ip, r3, lsl #3
   1d2bc:	ldr	r0, [r2, #8]
   1d2c0:	cmp	sl, r0
   1d2c4:	ble	1d360 <__assert_fail@plt+0xc088>
   1d2c8:	ldr	r0, [r2, #4]
   1d2cc:	cmp	sl, r0
   1d2d0:	bgt	1d360 <__assert_fail@plt+0xc088>
   1d2d4:	ldr	r0, [ip, r3, lsl #3]
   1d2d8:	ldr	r2, [r2, #12]
   1d2dc:	ldr	r3, [r6]
   1d2e0:	cmp	sl, r2
   1d2e4:	ldr	r7, [r3, r0, lsl #3]
   1d2e8:	beq	1d518 <__assert_fail@plt+0xc240>
   1d2ec:	ldr	r0, [r5, #4]
   1d2f0:	cmp	r0, #0
   1d2f4:	ble	1d360 <__assert_fail@plt+0xc088>
   1d2f8:	mov	r4, #0
   1d2fc:	b	1d30c <__assert_fail@plt+0xc034>
   1d300:	cmp	r4, r0
   1d304:	bge	1d35c <__assert_fail@plt+0xc084>
   1d308:	ldr	r3, [r6]
   1d30c:	ldr	r2, [r5, #8]
   1d310:	ldr	r1, [r2, r4, lsl #2]
   1d314:	add	r4, r4, #1
   1d318:	add	r2, r3, r1, lsl #3
   1d31c:	ldrb	r2, [r2, #4]
   1d320:	sub	r2, r2, #8
   1d324:	cmp	r2, #1
   1d328:	bhi	1d300 <__assert_fail@plt+0xc028>
   1d32c:	ldr	r3, [r3, r1, lsl #3]
   1d330:	cmp	r7, r3
   1d334:	bne	1d300 <__assert_fail@plt+0xc028>
   1d338:	ldr	r3, [sp, #20]
   1d33c:	mov	r2, r5
   1d340:	mov	r0, r6
   1d344:	bl	1be68 <__assert_fail@plt+0xab90>
   1d348:	cmp	r0, #0
   1d34c:	bne	1d724 <__assert_fail@plt+0xc44c>
   1d350:	ldr	r0, [r5, #4]
   1d354:	cmp	r4, r0
   1d358:	blt	1d308 <__assert_fail@plt+0xc030>
   1d35c:	ldr	r1, [fp, #20]
   1d360:	add	r9, r9, #1
   1d364:	cmp	r9, r1
   1d368:	blt	1d2a8 <__assert_fail@plt+0xbfd0>
   1d36c:	mov	r3, #0
   1d370:	str	r3, [sp, #64]	; 0x40
   1d374:	b	1d258 <__assert_fail@plt+0xbf80>
   1d378:	mov	r3, #12
   1d37c:	mov	r0, r3
   1d380:	add	sp, sp, #116	; 0x74
   1d384:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d388:	mov	r3, r2
   1d38c:	mov	r2, r0
   1d390:	add	r1, r3, #1
   1d394:	mov	r0, r2
   1d398:	b	1d060 <__assert_fail@plt+0xbd88>
   1d39c:	ldr	r3, [sp, #20]
   1d3a0:	ldr	r0, [r3, #4]
   1d3a4:	b	1cf54 <__assert_fail@plt+0xbc7c>
   1d3a8:	ldr	r9, [sp, #84]	; 0x54
   1d3ac:	ldr	lr, [sp, #104]	; 0x68
   1d3b0:	ldr	r3, [sp, #36]	; 0x24
   1d3b4:	ldr	r2, [sp, #52]	; 0x34
   1d3b8:	cmp	lr, #0
   1d3bc:	str	r2, [r9, r3]
   1d3c0:	ble	1d424 <__assert_fail@plt+0xc14c>
   1d3c4:	sub	r7, lr, #1
   1d3c8:	ldr	ip, [sp, #108]	; 0x6c
   1d3cc:	mov	r0, r7
   1d3d0:	mov	r1, #0
   1d3d4:	cmp	r1, r0
   1d3d8:	bcs	1d414 <__assert_fail@plt+0xc13c>
   1d3dc:	add	r2, r1, r0
   1d3e0:	lsr	r2, r2, #1
   1d3e4:	ldr	r3, [ip, r2, lsl #2]
   1d3e8:	cmp	r4, r3
   1d3ec:	ble	1d404 <__assert_fail@plt+0xc12c>
   1d3f0:	b	1d434 <__assert_fail@plt+0xc15c>
   1d3f4:	ldr	r0, [ip, r3, lsl #2]
   1d3f8:	cmp	r4, r0
   1d3fc:	bgt	1d43c <__assert_fail@plt+0xc164>
   1d400:	mov	r2, r3
   1d404:	add	r3, r2, r1
   1d408:	cmp	r2, r1
   1d40c:	lsr	r3, r3, #1
   1d410:	bhi	1d3f4 <__assert_fail@plt+0xc11c>
   1d414:	ldr	r2, [ip, r1, lsl #2]
   1d418:	add	r3, ip, r1, lsl #2
   1d41c:	cmp	r4, r2
   1d420:	beq	1d448 <__assert_fail@plt+0xc170>
   1d424:	ldr	r3, [sp, #32]
   1d428:	ldr	r7, [r3, #116]	; 0x74
   1d42c:	add	r7, r7, r5
   1d430:	b	1cfd4 <__assert_fail@plt+0xbcfc>
   1d434:	mov	r3, r2
   1d438:	mov	r2, r0
   1d43c:	add	r1, r3, #1
   1d440:	mov	r0, r2
   1d444:	b	1d3d4 <__assert_fail@plt+0xc0fc>
   1d448:	cmp	lr, r1
   1d44c:	movgt	lr, #0
   1d450:	movle	lr, #1
   1d454:	orrs	r2, lr, r1, lsr #31
   1d458:	bne	1d424 <__assert_fail@plt+0xc14c>
   1d45c:	cmp	r1, r7
   1d460:	str	r7, [sp, #104]	; 0x68
   1d464:	bge	1d424 <__assert_fail@plt+0xc14c>
   1d468:	ldr	r2, [r3, #4]
   1d46c:	add	r1, r1, #1
   1d470:	str	r2, [r3], #4
   1d474:	ldr	r2, [sp, #104]	; 0x68
   1d478:	cmp	r1, r2
   1d47c:	blt	1d468 <__assert_fail@plt+0xc190>
   1d480:	b	1d424 <__assert_fail@plt+0xc14c>
   1d484:	mov	ip, fp
   1d488:	add	lr, sp, #84	; 0x54
   1d48c:	ldm	ip!, {r0, r1, r2, r3}
   1d490:	stmia	lr!, {r0, r1, r2, r3}
   1d494:	ldm	ip, {r0, r1, r2}
   1d498:	stm	lr, {r0, r1, r2}
   1d49c:	mov	r1, ip
   1d4a0:	add	r0, sp, #100	; 0x64
   1d4a4:	bl	17a00 <__assert_fail@plt+0x6728>
   1d4a8:	subs	ip, r0, #0
   1d4ac:	beq	1d0dc <__assert_fail@plt+0xbe04>
   1d4b0:	mov	r3, ip
   1d4b4:	ldr	r2, [sp, #84]	; 0x54
   1d4b8:	cmp	r2, #0
   1d4bc:	beq	1cd6c <__assert_fail@plt+0xba94>
   1d4c0:	ldr	r0, [sp, #108]	; 0x6c
   1d4c4:	str	r3, [sp, #16]
   1d4c8:	bl	296b0 <__assert_fail@plt+0x183d8>
   1d4cc:	ldr	r3, [sp, #16]
   1d4d0:	mov	r0, r3
   1d4d4:	add	sp, sp, #116	; 0x74
   1d4d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d4dc:	add	r2, r1, r0
   1d4e0:	ldr	r0, [r9, #36]	; 0x24
   1d4e4:	lsl	r1, r2, #3
   1d4e8:	lsl	sl, r2, #1
   1d4ec:	bl	29510 <__assert_fail@plt+0x18238>
   1d4f0:	cmp	r0, #0
   1d4f4:	beq	1d378 <__assert_fail@plt+0xc0a0>
   1d4f8:	str	r0, [r9, #36]	; 0x24
   1d4fc:	str	sl, [r9, #28]
   1d500:	b	1ce0c <__assert_fail@plt+0xbb34>
   1d504:	cmp	r3, #0
   1d508:	strne	r8, [sp, #20]
   1d50c:	bne	1d258 <__assert_fail@plt+0xbf80>
   1d510:	str	r3, [sp, #20]
   1d514:	b	1cd3c <__assert_fail@plt+0xba64>
   1d518:	ldr	r2, [r5, #4]
   1d51c:	cmp	r2, #0
   1d520:	mov	r1, r2
   1d524:	str	r2, [sp, #24]
   1d528:	ble	1d35c <__assert_fail@plt+0xc084>
   1d52c:	ldr	lr, [r5, #8]
   1d530:	mvn	r4, #0
   1d534:	mov	r2, lr
   1d538:	add	r1, lr, r1, lsl #2
   1d53c:	mov	r8, r4
   1d540:	str	r6, [sp, #28]
   1d544:	b	1d564 <__assert_fail@plt+0xc28c>
   1d548:	cmp	ip, #9
   1d54c:	bne	1d55c <__assert_fail@plt+0xc284>
   1d550:	ldr	ip, [r6]
   1d554:	cmp	r7, ip
   1d558:	moveq	r4, r0
   1d55c:	cmp	r1, r2
   1d560:	beq	1d58c <__assert_fail@plt+0xc2b4>
   1d564:	ldr	r0, [r2], #4
   1d568:	add	r6, r3, r0, lsl #3
   1d56c:	ldrb	ip, [r6, #4]
   1d570:	cmp	ip, #8
   1d574:	bne	1d548 <__assert_fail@plt+0xc270>
   1d578:	ldr	ip, [r3, r0, lsl #3]
   1d57c:	cmp	r7, ip
   1d580:	moveq	r8, r0
   1d584:	cmp	r1, r2
   1d588:	bne	1d564 <__assert_fail@plt+0xc28c>
   1d58c:	cmp	r8, #0
   1d590:	ldr	r6, [sp, #28]
   1d594:	mov	r3, r8
   1d598:	blt	1d758 <__assert_fail@plt+0xc480>
   1d59c:	mov	r1, r8
   1d5a0:	ldr	r3, [sp, #20]
   1d5a4:	mov	r2, r5
   1d5a8:	mov	r0, r6
   1d5ac:	bl	1be68 <__assert_fail@plt+0xab90>
   1d5b0:	cmp	r0, #0
   1d5b4:	bne	1d724 <__assert_fail@plt+0xc44c>
   1d5b8:	cmp	r4, #0
   1d5bc:	blt	1d35c <__assert_fail@plt+0xc084>
   1d5c0:	ldr	r3, [r5, #4]
   1d5c4:	cmp	r3, #0
   1d5c8:	ble	1d35c <__assert_fail@plt+0xc084>
   1d5cc:	ldr	lr, [r5, #8]
   1d5d0:	str	sl, [sp, #28]
   1d5d4:	ldr	sl, [sp, #20]
   1d5d8:	str	r9, [sp, #24]
   1d5dc:	mov	r7, #0
   1d5e0:	mov	r9, r3
   1d5e4:	ldr	r1, [lr, r7, lsl #2]
   1d5e8:	ldr	r3, [r6, #28]
   1d5ec:	add	r8, r1, r1, lsl #1
   1d5f0:	lsl	r8, r8, #2
   1d5f4:	add	r3, r3, r8
   1d5f8:	ldr	ip, [r3, #4]
   1d5fc:	cmp	ip, #0
   1d600:	ble	1d65c <__assert_fail@plt+0xc384>
   1d604:	ldr	lr, [r3, #8]
   1d608:	sub	ip, ip, #1
   1d60c:	mov	r0, #0
   1d610:	cmp	r0, ip
   1d614:	bcs	1d650 <__assert_fail@plt+0xc378>
   1d618:	add	r2, r0, ip
   1d61c:	lsr	r2, r2, #1
   1d620:	ldr	r3, [lr, r2, lsl #2]
   1d624:	cmp	r4, r3
   1d628:	ble	1d640 <__assert_fail@plt+0xc368>
   1d62c:	b	1d6fc <__assert_fail@plt+0xc424>
   1d630:	ldr	ip, [lr, r3, lsl #2]
   1d634:	cmp	r4, ip
   1d638:	bgt	1d704 <__assert_fail@plt+0xc42c>
   1d63c:	mov	r2, r3
   1d640:	add	r3, r2, r0
   1d644:	cmp	r2, r0
   1d648:	lsr	r3, r3, #1
   1d64c:	bhi	1d630 <__assert_fail@plt+0xc358>
   1d650:	ldr	r3, [lr, r0, lsl #2]
   1d654:	cmp	r4, r3
   1d658:	beq	1d6e8 <__assert_fail@plt+0xc410>
   1d65c:	ldr	r3, [r6, #24]
   1d660:	add	r8, r3, r8
   1d664:	ldr	ip, [r8, #4]
   1d668:	cmp	ip, #0
   1d66c:	ble	1d6c8 <__assert_fail@plt+0xc3f0>
   1d670:	ldr	lr, [r8, #8]
   1d674:	sub	ip, ip, #1
   1d678:	mov	r0, #0
   1d67c:	cmp	r0, ip
   1d680:	bcs	1d6bc <__assert_fail@plt+0xc3e4>
   1d684:	add	r2, r0, ip
   1d688:	lsr	r2, r2, #1
   1d68c:	ldr	r3, [lr, r2, lsl #2]
   1d690:	cmp	r3, r4
   1d694:	bge	1d6ac <__assert_fail@plt+0xc3d4>
   1d698:	b	1d710 <__assert_fail@plt+0xc438>
   1d69c:	ldr	ip, [lr, r3, lsl #2]
   1d6a0:	cmp	r4, ip
   1d6a4:	bgt	1d718 <__assert_fail@plt+0xc440>
   1d6a8:	mov	r2, r3
   1d6ac:	add	r3, r0, r2
   1d6b0:	cmp	r0, r2
   1d6b4:	lsr	r3, r3, #1
   1d6b8:	bcc	1d69c <__assert_fail@plt+0xc3c4>
   1d6bc:	ldr	r3, [lr, r0, lsl #2]
   1d6c0:	cmp	r4, r3
   1d6c4:	beq	1d6e8 <__assert_fail@plt+0xc410>
   1d6c8:	mov	r3, sl
   1d6cc:	mov	r2, r5
   1d6d0:	mov	r0, r6
   1d6d4:	bl	1be68 <__assert_fail@plt+0xab90>
   1d6d8:	cmp	r0, #0
   1d6dc:	bne	1d724 <__assert_fail@plt+0xc44c>
   1d6e0:	ldr	r9, [r5, #4]
   1d6e4:	sub	r7, r7, #1
   1d6e8:	add	r7, r7, #1
   1d6ec:	cmp	r7, r9
   1d6f0:	bge	1d734 <__assert_fail@plt+0xc45c>
   1d6f4:	ldr	lr, [r5, #8]
   1d6f8:	b	1d5e4 <__assert_fail@plt+0xc30c>
   1d6fc:	mov	r3, r2
   1d700:	mov	r2, ip
   1d704:	add	r0, r3, #1
   1d708:	mov	ip, r2
   1d70c:	b	1d610 <__assert_fail@plt+0xc338>
   1d710:	mov	r3, r2
   1d714:	mov	r2, ip
   1d718:	add	r0, r3, #1
   1d71c:	mov	ip, r2
   1d720:	b	1d67c <__assert_fail@plt+0xc3a4>
   1d724:	mov	r3, r0
   1d728:	mov	r0, r3
   1d72c:	add	sp, sp, #116	; 0x74
   1d730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d734:	ldr	r9, [sp, #24]
   1d738:	ldr	sl, [sp, #28]
   1d73c:	ldr	r1, [fp, #20]
   1d740:	b	1d360 <__assert_fail@plt+0xc088>
   1d744:	mov	r3, #12
   1d748:	b	1d4b4 <__assert_fail@plt+0xc1dc>
   1d74c:	ldr	r4, [sp, #60]	; 0x3c
   1d750:	ldr	r9, [sp, #84]	; 0x54
   1d754:	b	1d3ac <__assert_fail@plt+0xc0d4>
   1d758:	cmp	r4, #0
   1d75c:	ldrge	r3, [sp, #24]
   1d760:	bge	1d5d0 <__assert_fail@plt+0xc2f8>
   1d764:	b	1d35c <__assert_fail@plt+0xc084>
   1d768:	add	r4, r3, r4
   1d76c:	ldr	r0, [r5, #8]
   1d770:	lsl	r1, r4, #2
   1d774:	bl	29510 <__assert_fail@plt+0x18238>
   1d778:	cmp	r0, #0
   1d77c:	beq	1d378 <__assert_fail@plt+0xc0a0>
   1d780:	str	r0, [r5, #8]
   1d784:	str	r4, [r5]
   1d788:	b	1d22c <__assert_fail@plt+0xbf54>
   1d78c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d790:	sub	sp, sp, #68	; 0x44
   1d794:	mov	r4, #1
   1d798:	mov	r7, r0
   1d79c:	mov	r0, #4
   1d7a0:	ldr	fp, [r1, #12]
   1d7a4:	mov	r9, r1
   1d7a8:	ldr	r5, [r1, #8]
   1d7ac:	str	r4, [sp, #52]	; 0x34
   1d7b0:	str	r4, [sp, #56]	; 0x38
   1d7b4:	bl	294e4 <__assert_fail@plt+0x1820c>
   1d7b8:	lsl	r3, fp, #2
   1d7bc:	str	r3, [sp, #20]
   1d7c0:	cmp	r0, #0
   1d7c4:	str	r0, [sp, #60]	; 0x3c
   1d7c8:	beq	1dc24 <__assert_fail@plt+0xc94c>
   1d7cc:	add	r3, sp, #52	; 0x34
   1d7d0:	str	r5, [r0]
   1d7d4:	mov	r2, fp
   1d7d8:	mov	r1, r9
   1d7dc:	mov	r0, r7
   1d7e0:	bl	1ccec <__assert_fail@plt+0xba14>
   1d7e4:	subs	r3, r0, #0
   1d7e8:	str	r3, [sp, #40]	; 0x28
   1d7ec:	bne	1dc34 <__assert_fail@plt+0xc95c>
   1d7f0:	cmp	fp, #0
   1d7f4:	ble	1daac <__assert_fail@plt+0xc7d4>
   1d7f8:	str	r3, [sp, #36]	; 0x24
   1d7fc:	add	r3, r9, #24
   1d800:	str	r3, [sp, #28]
   1d804:	add	r3, r9, #20
   1d808:	str	r3, [sp, #32]
   1d80c:	ldr	r3, [sp, #20]
   1d810:	mov	sl, r9
   1d814:	str	r4, [sp, #44]	; 0x2c
   1d818:	ldr	r0, [sl]
   1d81c:	ldr	r3, [r0, r3]
   1d820:	cmp	r3, #0
   1d824:	movne	r3, #0
   1d828:	ldreq	r3, [sp, #36]	; 0x24
   1d82c:	addeq	r3, r3, #1
   1d830:	mov	r2, r3
   1d834:	str	r3, [sp, #36]	; 0x24
   1d838:	ldr	r3, [r7, #120]	; 0x78
   1d83c:	cmp	r2, r3
   1d840:	bgt	1dc3c <__assert_fail@plt+0xc964>
   1d844:	mov	r2, #0
   1d848:	ldr	r3, [r7, #100]	; 0x64
   1d84c:	str	r2, [sp, #56]	; 0x38
   1d850:	ldr	r2, [sp, #20]
   1d854:	sub	fp, fp, #1
   1d858:	add	r3, r3, r2
   1d85c:	ldr	r6, [r3, #-4]
   1d860:	cmp	r6, #0
   1d864:	beq	1da7c <__assert_fail@plt+0xc7a4>
   1d868:	ldr	r3, [r6, #20]
   1d86c:	ldr	r2, [r7, #84]	; 0x54
   1d870:	cmp	r3, #0
   1d874:	mov	r1, r2
   1d878:	str	r2, [sp, #16]
   1d87c:	ble	1da7c <__assert_fail@plt+0xc7a4>
   1d880:	ldr	r2, [r6, #24]
   1d884:	ldr	r3, [r1]
   1d888:	mov	r4, #0
   1d88c:	ldr	r5, [r2]
   1d890:	lsl	r8, r5, #3
   1d894:	add	r3, r3, r8
   1d898:	ldrb	r1, [r3, #6]
   1d89c:	ldrb	r2, [r3, #4]
   1d8a0:	tst	r1, #16
   1d8a4:	bne	1daf8 <__assert_fail@plt+0xc820>
   1d8a8:	ldr	r1, [r7, #4]
   1d8ac:	sub	r2, r2, #1
   1d8b0:	ldrb	r1, [r1, fp]
   1d8b4:	cmp	r2, #6
   1d8b8:	ldrls	pc, [pc, r2, lsl #2]
   1d8bc:	b	1dac0 <__assert_fail@plt+0xc7e8>
   1d8c0:			; <UNDEFINED> instruction: 0x0001dab4
   1d8c4:	andeq	sp, r1, r0, asr #21
   1d8c8:	andeq	sp, r1, r0, asr sl
   1d8cc:	andeq	sp, r1, r0, asr #21
   1d8d0:	andeq	sp, r1, r4, ror #17
   1d8d4:	andeq	sp, r1, r0, asr #21
   1d8d8:	ldrdeq	sp, [r1], -ip
   1d8dc:	tst	r1, #128	; 0x80
   1d8e0:	bne	1dac0 <__assert_fail@plt+0xc7e8>
   1d8e4:	cmp	r1, #10
   1d8e8:	beq	1dc08 <__assert_fail@plt+0xc930>
   1d8ec:	cmp	r1, #0
   1d8f0:	bne	1d904 <__assert_fail@plt+0xc62c>
   1d8f4:	ldr	r2, [r7, #84]	; 0x54
   1d8f8:	ldr	r2, [r2, #128]	; 0x80
   1d8fc:	tst	r2, #128	; 0x80
   1d900:	bne	1dac0 <__assert_fail@plt+0xc7e8>
   1d904:	ldr	r8, [r3, #4]
   1d908:	ldr	r3, [pc, #848]	; 1dc60 <__assert_fail@plt+0xc988>
   1d90c:	tst	r8, r3
   1d910:	beq	1d964 <__assert_fail@plt+0xc68c>
   1d914:	ldr	r2, [r7, #88]	; 0x58
   1d918:	mov	r1, fp
   1d91c:	mov	r0, r7
   1d920:	bl	17d08 <__assert_fail@plt+0x6a30>
   1d924:	ldr	r3, [pc, #824]	; 1dc64 <__assert_fail@plt+0xc98c>
   1d928:	and	r8, r3, r8, lsr #8
   1d92c:	tst	r8, #4
   1d930:	beq	1dbf4 <__assert_fail@plt+0xc91c>
   1d934:	tst	r0, #1
   1d938:	beq	1dac0 <__assert_fail@plt+0xc7e8>
   1d93c:	tst	r8, #8
   1d940:	bne	1dac0 <__assert_fail@plt+0xc7e8>
   1d944:	tst	r8, #32
   1d948:	beq	1d954 <__assert_fail@plt+0xc67c>
   1d94c:	tst	r0, #2
   1d950:	beq	1dac0 <__assert_fail@plt+0xc7e8>
   1d954:	tst	r8, #128	; 0x80
   1d958:	beq	1d964 <__assert_fail@plt+0xc68c>
   1d95c:	tst	r0, #8
   1d960:	beq	1dac0 <__assert_fail@plt+0xc7e8>
   1d964:	ldr	r3, [sl]
   1d968:	ldr	r2, [sp, #20]
   1d96c:	ldr	r3, [r3, r2]
   1d970:	cmp	r3, #0
   1d974:	beq	1dac0 <__assert_fail@plt+0xc7e8>
   1d978:	ldr	lr, [r3, #8]
   1d97c:	ldr	r2, [sp, #16]
   1d980:	cmp	lr, #0
   1d984:	ldr	r2, [r2, #12]
   1d988:	ble	1dac0 <__assert_fail@plt+0xc7e8>
   1d98c:	ldr	r0, [r2, r5, lsl #2]
   1d990:	ldr	ip, [r3, #12]
   1d994:	sub	lr, lr, #1
   1d998:	mov	r1, #0
   1d99c:	cmp	r1, lr
   1d9a0:	bcs	1d9dc <__assert_fail@plt+0xc704>
   1d9a4:	add	r2, r1, lr
   1d9a8:	lsr	r2, r2, #1
   1d9ac:	ldr	r3, [ip, r2, lsl #2]
   1d9b0:	cmp	r3, r0
   1d9b4:	bge	1d9cc <__assert_fail@plt+0xc6f4>
   1d9b8:	b	1dbc4 <__assert_fail@plt+0xc8ec>
   1d9bc:	ldr	lr, [ip, r3, lsl #2]
   1d9c0:	cmp	r0, lr
   1d9c4:	bgt	1dbcc <__assert_fail@plt+0xc8f4>
   1d9c8:	mov	r2, r3
   1d9cc:	add	r3, r2, r1
   1d9d0:	cmp	r2, r1
   1d9d4:	lsr	r3, r3, #1
   1d9d8:	bhi	1d9bc <__assert_fail@plt+0xc6e4>
   1d9dc:	ldr	r3, [ip, r1, lsl #2]
   1d9e0:	cmp	r0, r3
   1d9e4:	bne	1dac0 <__assert_fail@plt+0xc7e8>
   1d9e8:	ldr	r0, [sp, #44]	; 0x2c
   1d9ec:	ldr	r3, [sl, #20]
   1d9f0:	cmp	r3, #0
   1d9f4:	beq	1da24 <__assert_fail@plt+0xc74c>
   1d9f8:	ldr	r3, [sp, #16]
   1d9fc:	add	r0, fp, r0
   1da00:	ldr	r2, [sp, #28]
   1da04:	ldr	r3, [r3, #12]
   1da08:	ldr	r1, [sp, #32]
   1da0c:	ldr	r3, [r3, r5, lsl #2]
   1da10:	stm	sp, {r0, r5, fp}
   1da14:	mov	r0, r7
   1da18:	bl	1bb90 <__assert_fail@plt+0xa8b8>
   1da1c:	cmp	r0, #0
   1da20:	bne	1dac0 <__assert_fail@plt+0xc7e8>
   1da24:	mov	r1, r5
   1da28:	add	r0, sp, #52	; 0x34
   1da2c:	bl	17640 <__assert_fail@plt+0x6368>
   1da30:	cmp	r0, #0
   1da34:	bne	1dac0 <__assert_fail@plt+0xc7e8>
   1da38:	mov	r4, #12
   1da3c:	ldr	r0, [sp, #60]	; 0x3c
   1da40:	bl	296b0 <__assert_fail@plt+0x183d8>
   1da44:	mov	r0, r4
   1da48:	add	sp, sp, #68	; 0x44
   1da4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da50:	ldr	r2, [r3]
   1da54:	asr	r0, r1, #5
   1da58:	and	r1, r1, #31
   1da5c:	ldr	r2, [r2, r0, lsl #2]
   1da60:	lsr	r1, r2, r1
   1da64:	tst	r1, #1
   1da68:	bne	1d904 <__assert_fail@plt+0xc62c>
   1da6c:	ldr	r3, [r6, #20]
   1da70:	add	r4, r4, #1
   1da74:	cmp	r4, r3
   1da78:	blt	1dad0 <__assert_fail@plt+0xc7f8>
   1da7c:	add	r3, sp, #52	; 0x34
   1da80:	mov	r2, fp
   1da84:	mov	r1, sl
   1da88:	mov	r0, r7
   1da8c:	bl	1ccec <__assert_fail@plt+0xba14>
   1da90:	cmp	r0, #0
   1da94:	bne	1dc1c <__assert_fail@plt+0xc944>
   1da98:	ldr	r3, [sp, #20]
   1da9c:	cmp	fp, #0
   1daa0:	sub	r3, r3, #4
   1daa4:	str	r3, [sp, #20]
   1daa8:	bne	1d818 <__assert_fail@plt+0xc540>
   1daac:	ldr	r4, [sp, #40]	; 0x28
   1dab0:	b	1da3c <__assert_fail@plt+0xc764>
   1dab4:	ldrb	r2, [r3]
   1dab8:	cmp	r2, r1
   1dabc:	beq	1d904 <__assert_fail@plt+0xc62c>
   1dac0:	ldr	r3, [r6, #20]
   1dac4:	add	r4, r4, #1
   1dac8:	cmp	r4, r3
   1dacc:	bge	1da7c <__assert_fail@plt+0xc7a4>
   1dad0:	ldr	r2, [r6, #24]
   1dad4:	ldr	r3, [sp, #16]
   1dad8:	ldr	r5, [r2, r4, lsl #2]
   1dadc:	ldr	r3, [r3]
   1dae0:	lsl	r8, r5, #3
   1dae4:	add	r3, r3, r8
   1dae8:	ldrb	r1, [r3, #6]
   1daec:	ldrb	r2, [r3, #4]
   1daf0:	tst	r1, #16
   1daf4:	beq	1d8a8 <__assert_fail@plt+0xc5d0>
   1daf8:	ldr	r9, [r7, #84]	; 0x54
   1dafc:	mov	r3, r7
   1db00:	add	r1, r9, #128	; 0x80
   1db04:	ldr	r0, [r9]
   1db08:	str	fp, [sp]
   1db0c:	ldr	ip, [sl, #12]
   1db10:	mov	r2, r5
   1db14:	str	ip, [sp, #24]
   1db18:	bl	197e4 <__assert_fail@plt+0x850c>
   1db1c:	cmp	r0, #0
   1db20:	ble	1dbec <__assert_fail@plt+0xc914>
   1db24:	ldr	ip, [sp, #24]
   1db28:	add	r3, fp, r0
   1db2c:	cmp	ip, r3
   1db30:	blt	1d9ec <__assert_fail@plt+0xc714>
   1db34:	ldr	r2, [sl]
   1db38:	ldr	r3, [r2, r3, lsl #2]
   1db3c:	cmp	r3, #0
   1db40:	beq	1dbb0 <__assert_fail@plt+0xc8d8>
   1db44:	ldr	ip, [r3, #8]
   1db48:	ldr	r2, [r9, #12]
   1db4c:	cmp	ip, #0
   1db50:	ble	1dbb0 <__assert_fail@plt+0xc8d8>
   1db54:	ldr	lr, [r2, r5, lsl #2]
   1db58:	ldr	r9, [r3, #12]
   1db5c:	sub	ip, ip, #1
   1db60:	mov	r1, #0
   1db64:	cmp	r1, ip
   1db68:	bcs	1dba4 <__assert_fail@plt+0xc8cc>
   1db6c:	add	r2, r1, ip
   1db70:	lsr	r2, r2, #1
   1db74:	ldr	r3, [r9, r2, lsl #2]
   1db78:	cmp	r3, lr
   1db7c:	bge	1db94 <__assert_fail@plt+0xc8bc>
   1db80:	b	1dbd8 <__assert_fail@plt+0xc900>
   1db84:	ldr	ip, [r9, r3, lsl #2]
   1db88:	cmp	lr, ip
   1db8c:	bgt	1dbe0 <__assert_fail@plt+0xc908>
   1db90:	mov	r2, r3
   1db94:	add	r3, r1, r2
   1db98:	cmp	r1, r2
   1db9c:	lsr	r3, r3, #1
   1dba0:	bcc	1db84 <__assert_fail@plt+0xc8ac>
   1dba4:	ldr	r3, [r9, r1, lsl #2]
   1dba8:	cmp	lr, r3
   1dbac:	beq	1d9ec <__assert_fail@plt+0xc714>
   1dbb0:	ldr	r3, [sp, #16]
   1dbb4:	ldr	r3, [r3]
   1dbb8:	add	r3, r3, r8
   1dbbc:	ldrb	r2, [r3, #4]
   1dbc0:	b	1d8a8 <__assert_fail@plt+0xc5d0>
   1dbc4:	mov	r3, r2
   1dbc8:	mov	r2, lr
   1dbcc:	add	r1, r3, #1
   1dbd0:	mov	lr, r2
   1dbd4:	b	1d99c <__assert_fail@plt+0xc6c4>
   1dbd8:	mov	r3, r2
   1dbdc:	mov	r2, ip
   1dbe0:	add	r1, r3, #1
   1dbe4:	mov	ip, r2
   1dbe8:	b	1db64 <__assert_fail@plt+0xc88c>
   1dbec:	beq	1dbb0 <__assert_fail@plt+0xc8d8>
   1dbf0:	b	1d9ec <__assert_fail@plt+0xc714>
   1dbf4:	tst	r8, #8
   1dbf8:	beq	1d944 <__assert_fail@plt+0xc66c>
   1dbfc:	tst	r0, #1
   1dc00:	beq	1d944 <__assert_fail@plt+0xc66c>
   1dc04:	b	1dac0 <__assert_fail@plt+0xc7e8>
   1dc08:	ldr	r2, [r7, #84]	; 0x54
   1dc0c:	ldr	r2, [r2, #128]	; 0x80
   1dc10:	tst	r2, #64	; 0x40
   1dc14:	bne	1d904 <__assert_fail@plt+0xc62c>
   1dc18:	b	1dac0 <__assert_fail@plt+0xc7e8>
   1dc1c:	mov	r4, r0
   1dc20:	b	1da3c <__assert_fail@plt+0xc764>
   1dc24:	mov	r4, #12
   1dc28:	mov	r0, r4
   1dc2c:	add	sp, sp, #68	; 0x44
   1dc30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc34:	mov	r4, r3
   1dc38:	b	1da3c <__assert_fail@plt+0xc764>
   1dc3c:	ldr	r2, [sp, #20]
   1dc40:	mov	r1, #0
   1dc44:	bl	111f4 <memset@plt>
   1dc48:	ldr	r0, [sp, #60]	; 0x3c
   1dc4c:	ldr	r4, [sp, #40]	; 0x28
   1dc50:	bl	296b0 <__assert_fail@plt+0x183d8>
   1dc54:	mov	r0, r4
   1dc58:	add	sp, sp, #68	; 0x44
   1dc5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc60:	andeq	pc, r3, r0, lsl #30
   1dc64:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1dc68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc6c:	sub	sp, sp, #44	; 0x2c
   1dc70:	mov	r6, r0
   1dc74:	mov	fp, r1
   1dc78:	mov	r9, #0
   1dc7c:	mov	r1, #1
   1dc80:	mov	r0, #32
   1dc84:	mov	sl, r2
   1dc88:	mov	r5, r3
   1dc8c:	str	r9, [sp, #20]
   1dc90:	ldrb	r8, [sp, #80]	; 0x50
   1dc94:	bl	2949c <__assert_fail@plt+0x181c4>
   1dc98:	subs	r4, r0, #0
   1dc9c:	beq	1dff4 <__assert_fail@plt+0xcd1c>
   1dca0:	mov	r1, #1
   1dca4:	mov	r0, #40	; 0x28
   1dca8:	bl	2949c <__assert_fail@plt+0x181c4>
   1dcac:	subs	r7, r0, #0
   1dcb0:	beq	1e010 <__assert_fail@plt+0xcd38>
   1dcb4:	ldrb	r2, [r7, #16]
   1dcb8:	and	r3, r8, #1
   1dcbc:	mov	r0, fp
   1dcc0:	bic	r2, r2, #1
   1dcc4:	orr	r3, r3, r2
   1dcc8:	add	r2, sp, #20
   1dccc:	strb	r3, [r7, #16]
   1dcd0:	mov	r1, r4
   1dcd4:	stm	sp, {r2, sl}
   1dcd8:	add	r3, r7, #36	; 0x24
   1dcdc:	str	r9, [sp, #8]
   1dce0:	add	r2, r7, #12
   1dce4:	bl	18ac4 <__assert_fail@plt+0x77ec>
   1dce8:	subs	sl, r0, #0
   1dcec:	bne	1e02c <__assert_fail@plt+0xcd54>
   1dcf0:	ldrb	r3, [r5]
   1dcf4:	cmp	r3, #0
   1dcf8:	movne	ip, #1
   1dcfc:	beq	1dd20 <__assert_fail@plt+0xca48>
   1dd00:	asr	r1, r3, #5
   1dd04:	and	r0, r3, #31
   1dd08:	ldr	r2, [r4, r1, lsl #2]
   1dd0c:	ldrb	r3, [r5, #1]!
   1dd10:	orr	r2, r2, ip, lsl r0
   1dd14:	cmp	r3, #0
   1dd18:	str	r2, [r4, r1, lsl #2]
   1dd1c:	bne	1dd00 <__assert_fail@plt+0xca28>
   1dd20:	cmp	r8, #0
   1dd24:	bne	1deec <__assert_fail@plt+0xcc14>
   1dd28:	ldr	r3, [r6, #92]	; 0x5c
   1dd2c:	cmp	r3, #1
   1dd30:	ble	1ddb4 <__assert_fail@plt+0xcadc>
   1dd34:	ldr	r3, [r6, #60]	; 0x3c
   1dd38:	ldm	r4, {r1, r2}
   1dd3c:	ldr	r0, [r4, #8]
   1dd40:	ldr	ip, [r3]
   1dd44:	and	r1, r1, ip
   1dd48:	str	r1, [r4]
   1dd4c:	ldr	ip, [r3, #4]
   1dd50:	ldr	r1, [r4, #12]
   1dd54:	and	r2, r2, ip
   1dd58:	str	r2, [r4, #4]
   1dd5c:	ldr	ip, [r3, #8]
   1dd60:	ldr	r2, [r4, #16]
   1dd64:	and	r0, r0, ip
   1dd68:	str	r0, [r4, #8]
   1dd6c:	ldr	ip, [r3, #12]
   1dd70:	ldr	r0, [r4, #20]
   1dd74:	and	r1, r1, ip
   1dd78:	str	r1, [r4, #12]
   1dd7c:	ldr	ip, [r3, #16]
   1dd80:	ldr	r1, [r4, #24]
   1dd84:	and	r2, r2, ip
   1dd88:	str	r2, [r4, #16]
   1dd8c:	ldr	ip, [r3, #20]
   1dd90:	ldr	r2, [r4, #28]
   1dd94:	and	r0, r0, ip
   1dd98:	str	r0, [r4, #20]
   1dd9c:	ldr	r0, [r3, #24]
   1dda0:	and	r1, r1, r0
   1dda4:	str	r1, [r4, #24]
   1dda8:	ldr	r3, [r3, #28]
   1ddac:	and	r3, r3, r2
   1ddb0:	str	r3, [r4, #28]
   1ddb4:	ldr	r3, [r6, #64]	; 0x40
   1ddb8:	add	r8, sp, #24
   1ddbc:	mov	r5, #0
   1ddc0:	cmp	r3, #31
   1ddc4:	str	r5, [r8, #4]
   1ddc8:	beq	1e068 <__assert_fail@plt+0xcd90>
   1ddcc:	lsl	ip, r3, #5
   1ddd0:	add	lr, r3, #1
   1ddd4:	ldr	r3, [r6, #56]	; 0x38
   1ddd8:	add	r9, ip, #4
   1dddc:	mov	r2, #3
   1dde0:	add	ip, r3, ip
   1dde4:	str	r4, [sp, #24]
   1dde8:	strb	r2, [sp, #28]
   1ddec:	ldm	r8, {r0, r1}
   1ddf0:	add	sl, ip, #24
   1ddf4:	mov	r5, #0
   1ddf8:	str	lr, [r6, #64]	; 0x40
   1ddfc:	str	r5, [ip, #4]
   1de00:	str	r5, [ip, #8]
   1de04:	str	r5, [ip, #12]
   1de08:	stm	sl, {r0, r1}
   1de0c:	ldrb	r2, [ip, #30]
   1de10:	mvn	r1, #0
   1de14:	adds	r9, r3, r9
   1de18:	and	r2, r2, #243	; 0xf3
   1de1c:	str	r5, [ip, #16]
   1de20:	str	r5, [ip, #20]
   1de24:	strb	r2, [ip, #30]
   1de28:	str	r1, [ip, #32]
   1de2c:	beq	1df74 <__assert_fail@plt+0xcc9c>
   1de30:	ldr	r2, [r6, #92]	; 0x5c
   1de34:	cmp	r2, #1
   1de38:	ble	1dfc0 <__assert_fail@plt+0xcce8>
   1de3c:	ldrb	r2, [r6, #88]	; 0x58
   1de40:	ldr	r1, [r6, #64]	; 0x40
   1de44:	orr	r2, r2, #2
   1de48:	cmp	r1, #31
   1de4c:	strb	r2, [r6, #88]	; 0x58
   1de50:	beq	1df48 <__assert_fail@plt+0xcc70>
   1de54:	lsl	ip, r1, #5
   1de58:	add	r2, r1, #1
   1de5c:	add	r5, ip, #4
   1de60:	mov	r1, #6
   1de64:	add	ip, r3, ip
   1de68:	str	r7, [sp, #24]
   1de6c:	strb	r1, [sp, #28]
   1de70:	ldm	r8, {r0, r1}
   1de74:	add	r8, ip, #24
   1de78:	mov	lr, #0
   1de7c:	str	r2, [r6, #64]	; 0x40
   1de80:	str	lr, [ip, #4]
   1de84:	str	lr, [ip, #8]
   1de88:	str	lr, [ip, #12]
   1de8c:	stm	r8, {r0, r1}
   1de90:	ldrb	r2, [ip, #30]
   1de94:	mvn	r1, #0
   1de98:	adds	r3, r3, r5
   1de9c:	and	r2, r2, #243	; 0xf3
   1dea0:	str	lr, [ip, #16]
   1dea4:	str	lr, [ip, #20]
   1dea8:	strb	r2, [ip, #30]
   1deac:	str	r1, [ip, #32]
   1deb0:	beq	1df74 <__assert_fail@plt+0xcc9c>
   1deb4:	add	ip, sp, #32
   1deb8:	mov	r2, r9
   1debc:	str	ip, [sp]
   1dec0:	mov	r4, #10
   1dec4:	add	r1, r6, #64	; 0x40
   1dec8:	add	r0, r6, #56	; 0x38
   1decc:	str	lr, [sp, #36]	; 0x24
   1ded0:	str	lr, [sp, #32]
   1ded4:	strb	r4, [sp, #36]	; 0x24
   1ded8:	bl	1793c <__assert_fail@plt+0x6664>
   1dedc:	mov	r9, r0
   1dee0:	mov	r0, r9
   1dee4:	add	sp, sp, #44	; 0x2c
   1dee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1deec:	ldm	r4, {r2, r3, lr}
   1def0:	ldr	ip, [r4, #12]
   1def4:	ldr	r0, [r4, #16]
   1def8:	mvn	r2, r2
   1defc:	mvn	r3, r3
   1df00:	ldr	r1, [r4, #20]
   1df04:	str	r2, [r4]
   1df08:	str	r3, [r4, #4]
   1df0c:	ldr	r2, [r4, #24]
   1df10:	ldr	r3, [r4, #28]
   1df14:	mvn	lr, lr
   1df18:	mvn	ip, ip
   1df1c:	mvn	r0, r0
   1df20:	mvn	r1, r1
   1df24:	mvn	r2, r2
   1df28:	mvn	r3, r3
   1df2c:	str	lr, [r4, #8]
   1df30:	str	ip, [r4, #12]
   1df34:	str	r0, [r4, #16]
   1df38:	str	r1, [r4, #20]
   1df3c:	str	r2, [r4, #24]
   1df40:	str	r3, [r4, #28]
   1df44:	b	1dd28 <__assert_fail@plt+0xca50>
   1df48:	mov	r0, #996	; 0x3e4
   1df4c:	bl	294e4 <__assert_fail@plt+0x1820c>
   1df50:	subs	r3, r0, #0
   1df54:	beq	1df74 <__assert_fail@plt+0xcc9c>
   1df58:	ldr	r1, [r6, #56]	; 0x38
   1df5c:	mov	ip, r5
   1df60:	mov	r2, #1
   1df64:	mov	r5, #4
   1df68:	str	r1, [r3]
   1df6c:	str	r3, [r6, #56]	; 0x38
   1df70:	b	1de60 <__assert_fail@plt+0xcb88>
   1df74:	mov	r0, r4
   1df78:	bl	296b0 <__assert_fail@plt+0x183d8>
   1df7c:	ldr	r0, [r7]
   1df80:	bl	296b0 <__assert_fail@plt+0x183d8>
   1df84:	ldr	r0, [r7, #4]
   1df88:	bl	296b0 <__assert_fail@plt+0x183d8>
   1df8c:	ldr	r0, [r7, #8]
   1df90:	bl	296b0 <__assert_fail@plt+0x183d8>
   1df94:	ldr	r0, [r7, #12]
   1df98:	bl	296b0 <__assert_fail@plt+0x183d8>
   1df9c:	mov	r0, r7
   1dfa0:	bl	296b0 <__assert_fail@plt+0x183d8>
   1dfa4:	ldr	r2, [sp, #84]	; 0x54
   1dfa8:	mov	r9, #0
   1dfac:	mov	r3, #12
   1dfb0:	mov	r0, r9
   1dfb4:	str	r3, [r2]
   1dfb8:	add	sp, sp, #44	; 0x2c
   1dfbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dfc0:	ldr	r0, [r7]
   1dfc4:	bl	296b0 <__assert_fail@plt+0x183d8>
   1dfc8:	ldr	r0, [r7, #4]
   1dfcc:	bl	296b0 <__assert_fail@plt+0x183d8>
   1dfd0:	ldr	r0, [r7, #8]
   1dfd4:	bl	296b0 <__assert_fail@plt+0x183d8>
   1dfd8:	ldr	r0, [r7, #12]
   1dfdc:	bl	296b0 <__assert_fail@plt+0x183d8>
   1dfe0:	mov	r0, r7
   1dfe4:	bl	296b0 <__assert_fail@plt+0x183d8>
   1dfe8:	mov	r0, r9
   1dfec:	add	sp, sp, #44	; 0x2c
   1dff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dff4:	ldr	r2, [sp, #84]	; 0x54
   1dff8:	mov	r3, #12
   1dffc:	mov	r9, r4
   1e000:	mov	r0, r9
   1e004:	str	r3, [r2]
   1e008:	add	sp, sp, #44	; 0x2c
   1e00c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e010:	mov	r0, r4
   1e014:	bl	296b0 <__assert_fail@plt+0x183d8>
   1e018:	ldr	r2, [sp, #84]	; 0x54
   1e01c:	mov	r3, #12
   1e020:	mov	r9, r7
   1e024:	str	r3, [r2]
   1e028:	b	1dee0 <__assert_fail@plt+0xcc08>
   1e02c:	mov	r0, r4
   1e030:	bl	296b0 <__assert_fail@plt+0x183d8>
   1e034:	ldr	r0, [r7]
   1e038:	bl	296b0 <__assert_fail@plt+0x183d8>
   1e03c:	ldr	r0, [r7, #4]
   1e040:	bl	296b0 <__assert_fail@plt+0x183d8>
   1e044:	ldr	r0, [r7, #8]
   1e048:	bl	296b0 <__assert_fail@plt+0x183d8>
   1e04c:	ldr	r0, [r7, #12]
   1e050:	bl	296b0 <__assert_fail@plt+0x183d8>
   1e054:	mov	r0, r7
   1e058:	bl	296b0 <__assert_fail@plt+0x183d8>
   1e05c:	ldr	r3, [sp, #84]	; 0x54
   1e060:	str	sl, [r3]
   1e064:	b	1dee0 <__assert_fail@plt+0xcc08>
   1e068:	mov	r0, #996	; 0x3e4
   1e06c:	bl	294e4 <__assert_fail@plt+0x1820c>
   1e070:	subs	r3, r0, #0
   1e074:	beq	1df74 <__assert_fail@plt+0xcc9c>
   1e078:	ldr	r2, [r6, #56]	; 0x38
   1e07c:	mov	ip, r5
   1e080:	mov	lr, #1
   1e084:	mov	r9, #4
   1e088:	str	r2, [r3]
   1e08c:	str	r3, [r6, #56]	; 0x38
   1e090:	b	1dddc <__assert_fail@plt+0xcb04>
   1e094:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e098:	sub	sp, sp, #172	; 0xac
   1e09c:	mov	r4, r1
   1e0a0:	str	r2, [sp, #32]
   1e0a4:	ldrb	r2, [r2, #4]
   1e0a8:	str	r3, [sp, #40]	; 0x28
   1e0ac:	str	r0, [sp, #44]	; 0x2c
   1e0b0:	sub	r3, r2, #1
   1e0b4:	ldr	sl, [r1]
   1e0b8:	ldr	r6, [sp, #208]	; 0xd0
   1e0bc:	cmp	r3, #35	; 0x23
   1e0c0:	ldrls	pc, [pc, r3, lsl #2]
   1e0c4:	b	1f430 <__assert_fail@plt+0xe158>
   1e0c8:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1e0cc:	andeq	lr, r1, r0, asr r2
   1e0d0:	andeq	pc, r1, r0, lsr r4	; <UNPREDICTABLE>
   1e0d4:	andeq	lr, r1, r4, lsl #29
   1e0d8:	andeq	lr, r1, ip, lsr pc
   1e0dc:	andeq	pc, r1, r0, lsr r4	; <UNPREDICTABLE>
   1e0e0:	andeq	pc, r1, r0, lsr r4	; <UNPREDICTABLE>
   1e0e4:	andeq	pc, r1, ip, ror #6
   1e0e8:	andeq	pc, r1, r0, lsl r4	; <UNPREDICTABLE>
   1e0ec:	andeq	lr, r1, r0, asr r2
   1e0f0:	andeq	lr, r1, r4, ror #2
   1e0f4:	andeq	pc, r1, r8, lsl #1
   1e0f8:	andeq	pc, r1, r0, lsr r4	; <UNPREDICTABLE>
   1e0fc:	andeq	pc, r1, r0, lsr r4	; <UNPREDICTABLE>
   1e100:	andeq	pc, r1, r0, lsr r4	; <UNPREDICTABLE>
   1e104:	andeq	pc, r1, r0, lsr r4	; <UNPREDICTABLE>
   1e108:	andeq	pc, r1, r0, lsr r4	; <UNPREDICTABLE>
   1e10c:	andeq	lr, r1, r4, ror #2
   1e110:	andeq	lr, r1, r4, ror #2
   1e114:	andeq	pc, r1, r8, lsr #3
   1e118:	andeq	pc, r1, r0, lsr r4	; <UNPREDICTABLE>
   1e11c:	andeq	pc, r1, r0, lsr r4	; <UNPREDICTABLE>
   1e120:	andeq	lr, r1, r8, asr r1
   1e124:	andeq	lr, r1, r0, lsl #3
   1e128:	andeq	pc, r1, r0, lsr r4	; <UNPREDICTABLE>
   1e12c:	andeq	pc, r1, r0, lsr r4	; <UNPREDICTABLE>
   1e130:	andeq	pc, r1, r0, lsr r4	; <UNPREDICTABLE>
   1e134:	andeq	pc, r1, r0, lsr r4	; <UNPREDICTABLE>
   1e138:	andeq	pc, r1, r0, lsr r4	; <UNPREDICTABLE>
   1e13c:	andeq	pc, r1, r0, lsr r4	; <UNPREDICTABLE>
   1e140:	andeq	pc, r1, r0, lsr r4	; <UNPREDICTABLE>
   1e144:	andeq	lr, r1, r4, ror #29
   1e148:	andeq	lr, r1, r4, ror #29
   1e14c:	andeq	lr, r1, r0, ror pc
   1e150:	andeq	lr, r1, r0, ror pc
   1e154:	andeq	pc, r1, ip, asr #6
   1e158:	ldr	r3, [sp, #40]	; 0x28
   1e15c:	tst	r3, #16777216	; 0x1000000
   1e160:	bne	1e774 <__assert_fail@plt+0xd49c>
   1e164:	ldr	r3, [sp, #40]	; 0x28
   1e168:	tst	r3, #32
   1e16c:	bne	1e774 <__assert_fail@plt+0xd49c>
   1e170:	tst	r3, #16
   1e174:	bne	1fe20 <__assert_fail@plt+0xeb48>
   1e178:	cmp	r2, #9
   1e17c:	beq	1f410 <__assert_fail@plt+0xe138>
   1e180:	ldr	r2, [sp, #32]
   1e184:	mov	r3, #1
   1e188:	add	r1, sl, #64	; 0x40
   1e18c:	strb	r3, [r2, #4]
   1e190:	add	r0, sl, #56	; 0x38
   1e194:	bl	1a460 <__assert_fail@plt+0x9188>
   1e198:	subs	r3, r0, #0
   1e19c:	str	r3, [sp, #36]	; 0x24
   1e1a0:	beq	1f070 <__assert_fail@plt+0xdd98>
   1e1a4:	ldr	r5, [sp, #40]	; 0x28
   1e1a8:	ldr	r4, [sp, #44]	; 0x2c
   1e1ac:	ldr	r6, [sp, #32]
   1e1b0:	mov	r2, r5
   1e1b4:	mov	r1, r4
   1e1b8:	mov	r0, r6
   1e1bc:	bl	19af8 <__assert_fail@plt+0x8820>
   1e1c0:	ldr	r3, [r4, #40]	; 0x28
   1e1c4:	mov	fp, #0
   1e1c8:	and	lr, r5, #2097152	; 0x200000
   1e1cc:	and	ip, r5, #16777216	; 0x1000000
   1e1d0:	ldrb	r2, [r6, #4]
   1e1d4:	str	lr, [sp, #60]	; 0x3c
   1e1d8:	str	ip, [sp, #52]	; 0x34
   1e1dc:	add	r3, r3, r0
   1e1e0:	str	r3, [r4, #40]	; 0x28
   1e1e4:	cmp	r2, #23
   1e1e8:	bls	1e264 <__assert_fail@plt+0xcf8c>
   1e1ec:	ldr	r0, [sp, #36]	; 0x24
   1e1f0:	add	sp, sp, #172	; 0xac
   1e1f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e1f8:	ldr	r3, [sp, #212]	; 0xd4
   1e1fc:	mov	r2, r8
   1e200:	str	r3, [sp, #4]
   1e204:	str	r6, [sp]
   1e208:	mov	r3, r9
   1e20c:	mov	r1, r4
   1e210:	bl	204a4 <__assert_fail@plt+0xf1cc>
   1e214:	ldr	r3, [sp, #212]	; 0xd4
   1e218:	ldr	r3, [r3]
   1e21c:	cmp	r3, #0
   1e220:	mov	r2, r0
   1e224:	bne	1e250 <__assert_fail@plt+0xcf78>
   1e228:	ldr	r3, [sp, #32]
   1e22c:	ldrb	r3, [r3, #4]
   1e230:	cmp	r3, #9
   1e234:	beq	1f3bc <__assert_fail@plt+0xe0e4>
   1e238:	cmp	r0, #0
   1e23c:	beq	1e244 <__assert_fail@plt+0xcf6c>
   1e240:	bl	1a50c <__assert_fail@plt+0x9234>
   1e244:	ldr	r2, [sp, #212]	; 0xd4
   1e248:	mov	r3, #8
   1e24c:	str	r3, [r2]
   1e250:	mov	r3, #0
   1e254:	str	r3, [sp, #36]	; 0x24
   1e258:	ldr	r0, [sp, #36]	; 0x24
   1e25c:	add	sp, sp, #172	; 0xac
   1e260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e264:	ldr	r3, [pc, #3864]	; 1f184 <__assert_fail@plt+0xdeac>
   1e268:	sub	r9, r2, #18
   1e26c:	clz	r9, r9
   1e270:	mvn	r4, r3, lsr r2
   1e274:	ands	r4, r4, #1
   1e278:	lsr	r9, r9, #5
   1e27c:	bne	1e1ec <__assert_fail@plt+0xcf14>
   1e280:	ldr	r3, [sp, #32]
   1e284:	cmp	r2, #23
   1e288:	ldm	r3, {r0, r1}
   1e28c:	ldr	r3, [sp, #44]	; 0x2c
   1e290:	ldr	r5, [r3, #40]	; 0x28
   1e294:	add	r3, sp, #104	; 0x68
   1e298:	stm	r3, {r0, r1}
   1e29c:	beq	1e670 <__assert_fail@plt+0xd398>
   1e2a0:	ldr	r4, [sp, #44]	; 0x2c
   1e2a4:	cmp	r2, #19
   1e2a8:	moveq	r3, #1
   1e2ac:	mvnne	r3, #0
   1e2b0:	mov	r1, r4
   1e2b4:	ldr	r2, [sp, #40]	; 0x28
   1e2b8:	ldr	r0, [sp, #32]
   1e2bc:	str	r3, [sp, #24]
   1e2c0:	bl	19af8 <__assert_fail@plt+0x8820>
   1e2c4:	ldr	r3, [r4, #40]	; 0x28
   1e2c8:	ldr	r1, [sp, #36]	; 0x24
   1e2cc:	cmp	r1, #0
   1e2d0:	add	r0, r3, r0
   1e2d4:	str	r0, [r4, #40]	; 0x28
   1e2d8:	beq	1e72c <__assert_fail@plt+0xd454>
   1e2dc:	cmp	r9, #0
   1e2e0:	bgt	1e8a4 <__assert_fail@plt+0xd5cc>
   1e2e4:	ldr	r5, [sp, #36]	; 0x24
   1e2e8:	mov	r8, #0
   1e2ec:	add	r3, sp, #136	; 0x88
   1e2f0:	str	r3, [sp, #48]	; 0x30
   1e2f4:	ldrb	r3, [r5, #24]
   1e2f8:	cmp	r3, #17
   1e2fc:	beq	1e794 <__assert_fail@plt+0xd4bc>
   1e300:	ldr	r3, [sp, #48]	; 0x30
   1e304:	str	fp, [r3]
   1e308:	str	fp, [r3, #4]
   1e30c:	ldr	r3, [sp, #24]
   1e310:	ldr	r1, [sl, #64]	; 0x40
   1e314:	cmn	r3, #1
   1e318:	movne	r4, #10
   1e31c:	moveq	r4, #11
   1e320:	cmp	r1, #31
   1e324:	beq	1ebb8 <__assert_fail@plt+0xd8e0>
   1e328:	lsl	r2, r1, #5
   1e32c:	ldr	r3, [sl, #56]	; 0x38
   1e330:	add	r1, r1, #1
   1e334:	add	lr, r2, #4
   1e338:	add	r2, r3, r2
   1e33c:	str	r1, [sl, #64]	; 0x40
   1e340:	str	fp, [r2, #4]
   1e344:	str	r5, [r2, #8]
   1e348:	str	fp, [r2, #12]
   1e34c:	strb	r4, [sp, #140]	; 0x8c
   1e350:	ldr	r4, [sp, #48]	; 0x30
   1e354:	add	ip, r2, #24
   1e358:	add	r3, r3, lr
   1e35c:	ldm	r4, {r0, r1}
   1e360:	cmp	r3, #0
   1e364:	stm	ip, {r0, r1}
   1e368:	ldrb	r1, [r2, #30]
   1e36c:	mvn	r0, #0
   1e370:	str	fp, [r2, #16]
   1e374:	and	r1, r1, #243	; 0xf3
   1e378:	str	fp, [r2, #20]
   1e37c:	strb	r1, [r2, #30]
   1e380:	str	r0, [r2, #32]
   1e384:	str	r3, [r5]
   1e388:	beq	1e5e4 <__assert_fail@plt+0xd30c>
   1e38c:	ldr	r1, [sp, #24]
   1e390:	add	r2, r9, #2
   1e394:	cmp	r2, r1
   1e398:	str	r2, [sp, #20]
   1e39c:	bgt	1e84c <__assert_fail@plt+0xd574>
   1e3a0:	str	r8, [sp, #56]	; 0x38
   1e3a4:	mov	r9, r0
   1e3a8:	mov	r6, r3
   1e3ac:	mov	r8, r4
   1e3b0:	mov	r4, r5
   1e3b4:	mov	r7, r8
   1e3b8:	b	1e3c4 <__assert_fail@plt+0xd0ec>
   1e3bc:	mov	r4, r2
   1e3c0:	add	r7, r6, #4
   1e3c4:	ldr	r1, [sl, #64]	; 0x40
   1e3c8:	cmp	r1, #31
   1e3cc:	beq	1e490 <__assert_fail@plt+0xd1b8>
   1e3d0:	lsl	r2, r1, #5
   1e3d4:	ldr	ip, [sl, #56]	; 0x38
   1e3d8:	add	r0, r1, #1
   1e3dc:	add	lr, r2, #4
   1e3e0:	add	r2, ip, r2
   1e3e4:	add	r1, r4, #20
   1e3e8:	str	r0, [sl, #64]	; 0x40
   1e3ec:	str	fp, [r2, #4]
   1e3f0:	str	fp, [r2, #8]
   1e3f4:	str	fp, [r2, #12]
   1e3f8:	ldm	r1, {r0, r1}
   1e3fc:	add	r5, r2, #24
   1e400:	add	ip, ip, lr
   1e404:	stm	r5, {r0, r1}
   1e408:	ldrb	r1, [r2, #30]
   1e40c:	cmp	ip, #0
   1e410:	str	fp, [r2, #16]
   1e414:	and	r1, r1, #243	; 0xf3
   1e418:	str	fp, [r2, #20]
   1e41c:	str	r9, [r2, #32]
   1e420:	strb	r1, [r2, #30]
   1e424:	str	ip, [r7]
   1e428:	beq	1e5d8 <__assert_fail@plt+0xd300>
   1e42c:	str	r6, [r2, #4]
   1e430:	ldr	r6, [r7]
   1e434:	ldrb	r2, [r6, #26]
   1e438:	orr	r2, r2, #4
   1e43c:	strb	r2, [r6, #26]
   1e440:	ldr	r2, [r4, #4]
   1e444:	cmp	r2, #0
   1e448:	bne	1e3bc <__assert_fail@plt+0xd0e4>
   1e44c:	mov	r1, fp
   1e450:	b	1e46c <__assert_fail@plt+0xd194>
   1e454:	ldr	r2, [r4]
   1e458:	ldr	r6, [r6]
   1e45c:	cmp	r2, #0
   1e460:	mov	r1, r4
   1e464:	beq	1e4c4 <__assert_fail@plt+0xd1ec>
   1e468:	mov	r4, r2
   1e46c:	ldr	r2, [r4, #8]
   1e470:	cmp	r2, r1
   1e474:	cmpne	r2, #0
   1e478:	beq	1e454 <__assert_fail@plt+0xd17c>
   1e47c:	ldr	r1, [sl, #64]	; 0x40
   1e480:	mov	r4, r2
   1e484:	cmp	r1, #31
   1e488:	add	r7, r6, #8
   1e48c:	bne	1e3d0 <__assert_fail@plt+0xd0f8>
   1e490:	mov	r0, #996	; 0x3e4
   1e494:	str	r3, [sp, #28]
   1e498:	bl	294e4 <__assert_fail@plt+0x1820c>
   1e49c:	ldr	r3, [sp, #28]
   1e4a0:	subs	ip, r0, #0
   1e4a4:	beq	1ec18 <__assert_fail@plt+0xd940>
   1e4a8:	ldr	r1, [sl, #56]	; 0x38
   1e4ac:	mov	lr, #4
   1e4b0:	str	r1, [ip]
   1e4b4:	mov	r0, #1
   1e4b8:	mov	r2, fp
   1e4bc:	str	ip, [sl, #56]	; 0x38
   1e4c0:	b	1e3e0 <__assert_fail@plt+0xd108>
   1e4c4:	ldr	r5, [sp, #136]	; 0x88
   1e4c8:	str	fp, [r8]
   1e4cc:	str	fp, [r8, #4]
   1e4d0:	ldr	r2, [sl, #64]	; 0x40
   1e4d4:	cmp	r2, #31
   1e4d8:	beq	1e610 <__assert_fail@plt+0xd338>
   1e4dc:	lsl	r4, r2, #5
   1e4e0:	ldr	ip, [sl, #56]	; 0x38
   1e4e4:	add	r2, r2, #1
   1e4e8:	add	r6, r4, #4
   1e4ec:	add	r4, ip, r4
   1e4f0:	str	r2, [sl, #64]	; 0x40
   1e4f4:	mov	r2, #16
   1e4f8:	str	fp, [r4, #4]
   1e4fc:	str	r3, [r4, #8]
   1e500:	str	r5, [r4, #12]
   1e504:	strb	r2, [sp, #140]	; 0x8c
   1e508:	ldm	r8, {r0, r1}
   1e50c:	add	r2, r4, #24
   1e510:	add	r6, ip, r6
   1e514:	stm	r2, {r0, r1}
   1e518:	ldrb	r2, [r4, #30]
   1e51c:	cmp	r5, #0
   1e520:	str	fp, [r4, #16]
   1e524:	and	r2, r2, #243	; 0xf3
   1e528:	str	fp, [r4, #20]
   1e52c:	str	r9, [r4, #32]
   1e530:	strb	r2, [r4, #30]
   1e534:	str	r6, [r3]
   1e538:	beq	1e5e4 <__assert_fail@plt+0xd30c>
   1e53c:	cmp	r6, #0
   1e540:	str	r6, [r5]
   1e544:	beq	1e5e4 <__assert_fail@plt+0xd30c>
   1e548:	str	fp, [r8]
   1e54c:	str	fp, [r8, #4]
   1e550:	ldr	r1, [sl, #64]	; 0x40
   1e554:	cmp	r1, #31
   1e558:	beq	1e644 <__assert_fail@plt+0xd36c>
   1e55c:	lsl	r2, r1, #5
   1e560:	add	r3, r2, #4
   1e564:	add	r1, r1, #1
   1e568:	add	r2, ip, r2
   1e56c:	mov	r0, #10
   1e570:	str	r1, [sl, #64]	; 0x40
   1e574:	str	fp, [r2, #4]
   1e578:	str	r6, [r2, #8]
   1e57c:	str	fp, [r2, #12]
   1e580:	strb	r0, [sp, #140]	; 0x8c
   1e584:	ldm	r8, {r0, r1}
   1e588:	add	lr, r2, #24
   1e58c:	add	r3, ip, r3
   1e590:	stm	lr, {r0, r1}
   1e594:	ldrb	r1, [r2, #30]
   1e598:	cmp	r3, #0
   1e59c:	str	fp, [r2, #16]
   1e5a0:	and	r1, r1, #243	; 0xf3
   1e5a4:	str	fp, [r2, #20]
   1e5a8:	str	r9, [r2, #32]
   1e5ac:	strb	r1, [r2, #30]
   1e5b0:	str	r3, [r4, #4]
   1e5b4:	beq	1e5e4 <__assert_fail@plt+0xd30c>
   1e5b8:	ldr	r2, [sp, #20]
   1e5bc:	ldr	r1, [sp, #24]
   1e5c0:	add	r2, r2, #1
   1e5c4:	cmp	r2, r1
   1e5c8:	str	r2, [sp, #20]
   1e5cc:	bgt	1e848 <__assert_fail@plt+0xd570>
   1e5d0:	ldr	r6, [r5]
   1e5d4:	b	1e3b0 <__assert_fail@plt+0xd0d8>
   1e5d8:	mov	r5, ip
   1e5dc:	b	1e4c8 <__assert_fail@plt+0xd1f0>
   1e5e0:	str	lr, [r6]
   1e5e4:	ldr	r2, [sp, #212]	; 0xd4
   1e5e8:	mov	r3, #12
   1e5ec:	str	r3, [r2]
   1e5f0:	ldr	r3, [sp, #36]	; 0x24
   1e5f4:	cmp	r3, #0
   1e5f8:	beq	1e250 <__assert_fail@plt+0xcf78>
   1e5fc:	mov	r0, r3
   1e600:	bl	1a50c <__assert_fail@plt+0x9234>
   1e604:	mov	r3, #0
   1e608:	str	r3, [sp, #36]	; 0x24
   1e60c:	b	1e258 <__assert_fail@plt+0xcf80>
   1e610:	mov	r0, #996	; 0x3e4
   1e614:	str	r3, [sp, #28]
   1e618:	bl	294e4 <__assert_fail@plt+0x1820c>
   1e61c:	subs	ip, r0, #0
   1e620:	beq	1e5e4 <__assert_fail@plt+0xd30c>
   1e624:	ldr	r1, [sl, #56]	; 0x38
   1e628:	mov	r6, #4
   1e62c:	str	r1, [ip]
   1e630:	mov	r2, #1
   1e634:	mov	r4, fp
   1e638:	str	ip, [sl, #56]	; 0x38
   1e63c:	ldr	r3, [sp, #28]
   1e640:	b	1e4ec <__assert_fail@plt+0xd214>
   1e644:	mov	r0, #996	; 0x3e4
   1e648:	bl	294e4 <__assert_fail@plt+0x1820c>
   1e64c:	subs	ip, r0, #0
   1e650:	beq	1e5e4 <__assert_fail@plt+0xd30c>
   1e654:	ldr	r0, [sl, #56]	; 0x38
   1e658:	mov	r1, #1
   1e65c:	str	r0, [ip]
   1e660:	mov	r3, #4
   1e664:	mov	r2, fp
   1e668:	str	ip, [sl, #56]	; 0x38
   1e66c:	b	1e568 <__assert_fail@plt+0xd290>
   1e670:	str	r4, [sp, #20]
   1e674:	ldr	r8, [sp, #44]	; 0x2c
   1e678:	ldr	r4, [sp, #32]
   1e67c:	mvn	r9, #0
   1e680:	mov	r7, #32768	; 0x8000
   1e684:	mvn	r6, #1
   1e688:	mov	r1, r8
   1e68c:	ldr	r2, [sp, #40]	; 0x28
   1e690:	mov	r0, r4
   1e694:	bl	19af8 <__assert_fail@plt+0x8820>
   1e698:	ldrb	ip, [r4, #4]
   1e69c:	ldr	r2, [r8, #40]	; 0x28
   1e6a0:	cmn	r9, #2
   1e6a4:	movne	r1, #0
   1e6a8:	moveq	r1, #1
   1e6ac:	cmp	ip, #2
   1e6b0:	add	r0, r2, r0
   1e6b4:	str	r0, [r8, #40]	; 0x28
   1e6b8:	ldrb	r2, [r4]
   1e6bc:	beq	1e810 <__assert_fail@plt+0xd538>
   1e6c0:	cmp	ip, #24
   1e6c4:	beq	1ec30 <__assert_fail@plt+0xd958>
   1e6c8:	cmp	r2, #44	; 0x2c
   1e6cc:	beq	1ed50 <__assert_fail@plt+0xda78>
   1e6d0:	cmp	ip, #1
   1e6d4:	beq	1e6e0 <__assert_fail@plt+0xd408>
   1e6d8:	mov	r9, r6
   1e6dc:	b	1e688 <__assert_fail@plt+0xd3b0>
   1e6e0:	sub	r0, r2, #48	; 0x30
   1e6e4:	uxtb	r1, r0
   1e6e8:	cmp	r1, #9
   1e6ec:	movhi	r1, #0
   1e6f0:	movls	r1, #1
   1e6f4:	cmn	r9, #2
   1e6f8:	moveq	r1, #0
   1e6fc:	cmp	r1, #0
   1e700:	beq	1e6d8 <__assert_fail@plt+0xd400>
   1e704:	cmn	r9, #1
   1e708:	moveq	r9, r0
   1e70c:	beq	1e688 <__assert_fail@plt+0xd3b0>
   1e710:	add	r3, r9, r9, lsl #2
   1e714:	add	r3, r2, r3, lsl #1
   1e718:	ldr	r2, [pc, #2664]	; 1f188 <__assert_fail@plt+0xdeb0>
   1e71c:	cmp	r3, r2
   1e720:	suble	r9, r3, #48	; 0x30
   1e724:	movgt	r9, r7
   1e728:	b	1e688 <__assert_fail@plt+0xd3b0>
   1e72c:	ldr	r3, [sp, #212]	; 0xd4
   1e730:	ldr	r3, [r3]
   1e734:	cmp	r3, #0
   1e738:	bne	1e5f0 <__assert_fail@plt+0xd318>
   1e73c:	str	fp, [sp, #36]	; 0x24
   1e740:	ldr	r3, [sp, #52]	; 0x34
   1e744:	cmp	r3, #0
   1e748:	ldr	r3, [sp, #32]
   1e74c:	ldrb	r2, [r3, #4]
   1e750:	beq	1e1e4 <__assert_fail@plt+0xcf0c>
   1e754:	cmp	r2, #23
   1e758:	cmpne	r2, #11
   1e75c:	bne	1e1e4 <__assert_fail@plt+0xcf0c>
   1e760:	ldr	r3, [sp, #36]	; 0x24
   1e764:	cmp	r3, #0
   1e768:	beq	1e774 <__assert_fail@plt+0xd49c>
   1e76c:	mov	r0, r3
   1e770:	bl	1a50c <__assert_fail@plt+0x9234>
   1e774:	ldr	r2, [sp, #212]	; 0xd4
   1e778:	mov	r3, #13
   1e77c:	str	r3, [r2]
   1e780:	mov	r3, #0
   1e784:	str	r3, [sp, #36]	; 0x24
   1e788:	ldr	r0, [sp, #36]	; 0x24
   1e78c:	add	sp, sp, #172	; 0xac
   1e790:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e794:	ldr	r1, [r5, #20]
   1e798:	mov	r3, r5
   1e79c:	b	1e7a4 <__assert_fail@plt+0xd4cc>
   1e7a0:	mov	r3, r2
   1e7a4:	ldr	r2, [r3, #4]
   1e7a8:	cmp	r2, #0
   1e7ac:	bne	1e7a0 <__assert_fail@plt+0xd4c8>
   1e7b0:	ldr	r2, [r3, #8]
   1e7b4:	cmp	r2, #0
   1e7b8:	bne	1e7a0 <__assert_fail@plt+0xd4c8>
   1e7bc:	b	1e7e0 <__assert_fail@plt+0xd508>
   1e7c0:	ldr	r2, [r0, #8]
   1e7c4:	cmp	r3, r2
   1e7c8:	cmpne	r2, #0
   1e7cc:	moveq	r3, #1
   1e7d0:	movne	r3, #0
   1e7d4:	cmp	r3, #0
   1e7d8:	mov	r3, r0
   1e7dc:	beq	1e7a0 <__assert_fail@plt+0xd4c8>
   1e7e0:	ldrb	r2, [r3, #24]
   1e7e4:	cmp	r2, #17
   1e7e8:	bne	1e800 <__assert_fail@plt+0xd528>
   1e7ec:	ldr	r2, [r3, #20]
   1e7f0:	cmp	r1, r2
   1e7f4:	ldrbeq	r2, [r3, #26]
   1e7f8:	orreq	r2, r2, #8
   1e7fc:	strbeq	r2, [r3, #26]
   1e800:	ldr	r0, [r3]
   1e804:	cmp	r0, #0
   1e808:	bne	1e7c0 <__assert_fail@plt+0xd4e8>
   1e80c:	b	1e300 <__assert_fail@plt+0xd028>
   1e810:	mov	r3, ip
   1e814:	ldr	r2, [sp, #60]	; 0x3c
   1e818:	cmp	r2, #0
   1e81c:	beq	1f4e8 <__assert_fail@plt+0xe210>
   1e820:	add	r3, sp, #104	; 0x68
   1e824:	ldr	r2, [sp, #32]
   1e828:	ldm	r3, {r0, r1}
   1e82c:	ldr	r3, [sp, #44]	; 0x2c
   1e830:	str	r5, [r3, #40]	; 0x28
   1e834:	mov	r3, #1
   1e838:	stm	r2, {r0, r1}
   1e83c:	ldr	r0, [sp, #36]	; 0x24
   1e840:	strb	r3, [r2, #4]
   1e844:	b	1e87c <__assert_fail@plt+0xd5a4>
   1e848:	ldr	r8, [sp, #56]	; 0x38
   1e84c:	cmp	r8, #0
   1e850:	beq	1ec28 <__assert_fail@plt+0xd950>
   1e854:	ldr	r0, [sp, #48]	; 0x30
   1e858:	mov	ip, #16
   1e85c:	str	r0, [sp]
   1e860:	mov	r2, r8
   1e864:	str	fp, [r0, #4]
   1e868:	str	fp, [r0]
   1e86c:	add	r1, sl, #64	; 0x40
   1e870:	add	r0, sl, #56	; 0x38
   1e874:	strb	ip, [sp, #140]	; 0x8c
   1e878:	bl	1793c <__assert_fail@plt+0x6664>
   1e87c:	ldr	r3, [sp, #212]	; 0xd4
   1e880:	ldr	r3, [r3]
   1e884:	adds	r3, r3, #0
   1e888:	movne	r3, #1
   1e88c:	cmp	r0, #0
   1e890:	movne	r3, #0
   1e894:	cmp	r3, #0
   1e898:	bne	1e5f0 <__assert_fail@plt+0xd318>
   1e89c:	str	r0, [sp, #36]	; 0x24
   1e8a0:	b	1e740 <__assert_fail@plt+0xd468>
   1e8a4:	cmp	r9, #1
   1e8a8:	beq	1f43c <__assert_fail@plt+0xe164>
   1e8ac:	ldr	r3, [sp, #36]	; 0x24
   1e8b0:	str	r9, [sp, #48]	; 0x30
   1e8b4:	mov	r2, r3
   1e8b8:	ldr	r8, [r3]
   1e8bc:	mov	r5, r3
   1e8c0:	mov	r3, #2
   1e8c4:	str	r3, [sp, #20]
   1e8c8:	add	r3, sp, #136	; 0x88
   1e8cc:	mvn	r7, #0
   1e8d0:	mov	r9, r3
   1e8d4:	mov	r4, r5
   1e8d8:	mov	r6, r9
   1e8dc:	b	1e8e8 <__assert_fail@plt+0xd610>
   1e8e0:	mov	r4, r3
   1e8e4:	add	r6, r8, #4
   1e8e8:	ldr	r1, [sl, #64]	; 0x40
   1e8ec:	cmp	r1, #31
   1e8f0:	beq	1e9b4 <__assert_fail@plt+0xd6dc>
   1e8f4:	lsl	r3, r1, #5
   1e8f8:	ldr	ip, [sl, #56]	; 0x38
   1e8fc:	add	r0, r1, #1
   1e900:	add	lr, r3, #4
   1e904:	add	r3, ip, r3
   1e908:	add	r1, r4, #20
   1e90c:	str	r0, [sl, #64]	; 0x40
   1e910:	str	fp, [r3, #4]
   1e914:	str	fp, [r3, #8]
   1e918:	str	fp, [r3, #12]
   1e91c:	ldm	r1, {r0, r1}
   1e920:	add	r5, r3, #24
   1e924:	add	ip, ip, lr
   1e928:	stm	r5, {r0, r1}
   1e92c:	ldrb	r1, [r3, #30]
   1e930:	cmp	ip, #0
   1e934:	str	fp, [r3, #16]
   1e938:	and	r1, r1, #243	; 0xf3
   1e93c:	str	fp, [r3, #20]
   1e940:	str	r7, [r3, #32]
   1e944:	strb	r1, [r3, #30]
   1e948:	str	ip, [r6]
   1e94c:	beq	1ebb0 <__assert_fail@plt+0xd8d8>
   1e950:	str	r8, [r3, #4]
   1e954:	ldr	r8, [r6]
   1e958:	ldrb	r3, [r8, #26]
   1e95c:	orr	r3, r3, #4
   1e960:	strb	r3, [r8, #26]
   1e964:	ldr	r3, [r4, #4]
   1e968:	cmp	r3, #0
   1e96c:	bne	1e8e0 <__assert_fail@plt+0xd608>
   1e970:	mov	r1, fp
   1e974:	b	1e990 <__assert_fail@plt+0xd6b8>
   1e978:	ldr	r3, [r4]
   1e97c:	ldr	r8, [r8]
   1e980:	cmp	r3, #0
   1e984:	mov	r1, r4
   1e988:	beq	1e9e8 <__assert_fail@plt+0xd710>
   1e98c:	mov	r4, r3
   1e990:	ldr	r3, [r4, #8]
   1e994:	cmp	r3, #0
   1e998:	cmpne	r3, r1
   1e99c:	beq	1e978 <__assert_fail@plt+0xd6a0>
   1e9a0:	ldr	r1, [sl, #64]	; 0x40
   1e9a4:	mov	r4, r3
   1e9a8:	cmp	r1, #31
   1e9ac:	add	r6, r8, #8
   1e9b0:	bne	1e8f4 <__assert_fail@plt+0xd61c>
   1e9b4:	mov	r0, #996	; 0x3e4
   1e9b8:	str	r2, [sp, #28]
   1e9bc:	bl	294e4 <__assert_fail@plt+0x1820c>
   1e9c0:	ldr	r2, [sp, #28]
   1e9c4:	subs	ip, r0, #0
   1e9c8:	beq	1f430 <__assert_fail@plt+0xe158>
   1e9cc:	ldr	r1, [sl, #56]	; 0x38
   1e9d0:	mov	lr, #4
   1e9d4:	str	r1, [ip]
   1e9d8:	mov	r0, #1
   1e9dc:	mov	r3, fp
   1e9e0:	str	ip, [sl, #56]	; 0x38
   1e9e4:	b	1e904 <__assert_fail@plt+0xd62c>
   1e9e8:	ldr	r5, [sp, #136]	; 0x88
   1e9ec:	str	fp, [r9]
   1e9f0:	str	fp, [r9, #4]
   1e9f4:	ldr	r1, [sl, #64]	; 0x40
   1e9f8:	cmp	r1, #31
   1e9fc:	beq	1ebe4 <__assert_fail@plt+0xd90c>
   1ea00:	lsl	r3, r1, #5
   1ea04:	ldr	r8, [sl, #56]	; 0x38
   1ea08:	add	r1, r1, #1
   1ea0c:	add	lr, r3, #4
   1ea10:	add	r3, r8, r3
   1ea14:	str	r1, [sl, #64]	; 0x40
   1ea18:	mov	r1, #16
   1ea1c:	str	fp, [r3, #4]
   1ea20:	str	r2, [r3, #8]
   1ea24:	str	r5, [r3, #12]
   1ea28:	strb	r1, [sp, #140]	; 0x8c
   1ea2c:	ldm	r9, {r0, r1}
   1ea30:	add	ip, r3, #24
   1ea34:	add	r8, r8, lr
   1ea38:	stm	ip, {r0, r1}
   1ea3c:	ldrb	r1, [r3, #30]
   1ea40:	cmp	r5, #0
   1ea44:	str	fp, [r3, #16]
   1ea48:	and	r1, r1, #243	; 0xf3
   1ea4c:	str	fp, [r3, #20]
   1ea50:	str	r7, [r3, #32]
   1ea54:	strb	r1, [r3, #30]
   1ea58:	str	r8, [r2]
   1ea5c:	beq	1e5e4 <__assert_fail@plt+0xd30c>
   1ea60:	cmp	r8, #0
   1ea64:	str	r8, [r5]
   1ea68:	beq	1e5e4 <__assert_fail@plt+0xd30c>
   1ea6c:	ldr	r3, [sp, #20]
   1ea70:	ldr	r2, [sp, #48]	; 0x30
   1ea74:	add	r3, r3, #1
   1ea78:	cmp	r3, r2
   1ea7c:	str	r3, [sp, #20]
   1ea80:	mov	r2, r8
   1ea84:	ble	1e8d4 <__assert_fail@plt+0xd5fc>
   1ea88:	ldr	r9, [sp, #48]	; 0x30
   1ea8c:	ldr	r3, [sp, #24]
   1ea90:	cmp	r9, r3
   1ea94:	beq	1ec24 <__assert_fail@plt+0xd94c>
   1ea98:	add	r3, sp, #136	; 0x88
   1ea9c:	str	r3, [sp, #48]	; 0x30
   1eaa0:	ldr	r4, [r5]
   1eaa4:	mov	r6, r3
   1eaa8:	mvn	r7, #0
   1eaac:	b	1eab8 <__assert_fail@plt+0xd7e0>
   1eab0:	mov	r5, r3
   1eab4:	add	r6, r4, #4
   1eab8:	ldr	r2, [sl, #64]	; 0x40
   1eabc:	cmp	r2, #31
   1eac0:	beq	1eb84 <__assert_fail@plt+0xd8ac>
   1eac4:	lsl	r3, r2, #5
   1eac8:	ldr	lr, [sl, #56]	; 0x38
   1eacc:	add	r1, r2, #1
   1ead0:	add	ip, r3, #4
   1ead4:	add	r3, lr, r3
   1ead8:	add	r2, r5, #20
   1eadc:	str	r1, [sl, #64]	; 0x40
   1eae0:	str	fp, [r3, #4]
   1eae4:	str	fp, [r3, #8]
   1eae8:	str	fp, [r3, #12]
   1eaec:	ldm	r2, {r0, r1}
   1eaf0:	add	r2, r3, #24
   1eaf4:	add	ip, lr, ip
   1eaf8:	stm	r2, {r0, r1}
   1eafc:	ldrb	r2, [r3, #30]
   1eb00:	cmp	ip, #0
   1eb04:	str	fp, [r3, #16]
   1eb08:	and	r2, r2, #243	; 0xf3
   1eb0c:	str	fp, [r3, #20]
   1eb10:	str	r7, [r3, #32]
   1eb14:	strb	r2, [r3, #30]
   1eb18:	str	ip, [r6]
   1eb1c:	beq	1e5e4 <__assert_fail@plt+0xd30c>
   1eb20:	str	r4, [r3, #4]
   1eb24:	ldr	r4, [r6]
   1eb28:	ldrb	r3, [r4, #26]
   1eb2c:	orr	r3, r3, #4
   1eb30:	strb	r3, [r4, #26]
   1eb34:	ldr	r3, [r5, #4]
   1eb38:	cmp	r3, #0
   1eb3c:	bne	1eab0 <__assert_fail@plt+0xd7d8>
   1eb40:	mov	r2, fp
   1eb44:	b	1eb60 <__assert_fail@plt+0xd888>
   1eb48:	ldr	r3, [r5]
   1eb4c:	ldr	r4, [r4]
   1eb50:	cmp	r3, #0
   1eb54:	mov	r2, r5
   1eb58:	beq	1ee74 <__assert_fail@plt+0xdb9c>
   1eb5c:	mov	r5, r3
   1eb60:	ldr	r3, [r5, #8]
   1eb64:	cmp	r3, r2
   1eb68:	cmpne	r3, #0
   1eb6c:	beq	1eb48 <__assert_fail@plt+0xd870>
   1eb70:	ldr	r2, [sl, #64]	; 0x40
   1eb74:	mov	r5, r3
   1eb78:	cmp	r2, #31
   1eb7c:	add	r6, r4, #8
   1eb80:	bne	1eac4 <__assert_fail@plt+0xd7ec>
   1eb84:	mov	r0, #996	; 0x3e4
   1eb88:	bl	294e4 <__assert_fail@plt+0x1820c>
   1eb8c:	subs	lr, r0, #0
   1eb90:	beq	1e5e0 <__assert_fail@plt+0xd308>
   1eb94:	ldr	r2, [sl, #56]	; 0x38
   1eb98:	mov	r1, #1
   1eb9c:	str	r2, [lr]
   1eba0:	mov	ip, #4
   1eba4:	mov	r3, fp
   1eba8:	str	lr, [sl, #56]	; 0x38
   1ebac:	b	1ead4 <__assert_fail@plt+0xd7fc>
   1ebb0:	mov	r5, ip
   1ebb4:	b	1e9ec <__assert_fail@plt+0xd714>
   1ebb8:	mov	r0, #996	; 0x3e4
   1ebbc:	bl	294e4 <__assert_fail@plt+0x1820c>
   1ebc0:	subs	r3, r0, #0
   1ebc4:	beq	1e5e4 <__assert_fail@plt+0xd30c>
   1ebc8:	ldr	r0, [sl, #56]	; 0x38
   1ebcc:	mov	lr, #4
   1ebd0:	str	r0, [r3]
   1ebd4:	mov	r1, #1
   1ebd8:	mov	r2, fp
   1ebdc:	str	r3, [sl, #56]	; 0x38
   1ebe0:	b	1e338 <__assert_fail@plt+0xd060>
   1ebe4:	mov	r0, #996	; 0x3e4
   1ebe8:	str	r2, [sp, #28]
   1ebec:	bl	294e4 <__assert_fail@plt+0x1820c>
   1ebf0:	subs	r8, r0, #0
   1ebf4:	beq	1e5e4 <__assert_fail@plt+0xd30c>
   1ebf8:	ldr	r0, [sl, #56]	; 0x38
   1ebfc:	mov	lr, #4
   1ec00:	str	r0, [r8]
   1ec04:	mov	r1, #1
   1ec08:	mov	r3, fp
   1ec0c:	str	r8, [sl, #56]	; 0x38
   1ec10:	ldr	r2, [sp, #28]
   1ec14:	b	1ea10 <__assert_fail@plt+0xd738>
   1ec18:	str	ip, [r7]
   1ec1c:	mov	r5, fp
   1ec20:	b	1e4c8 <__assert_fail@plt+0xd1f0>
   1ec24:	mov	r3, r8
   1ec28:	str	r3, [sp, #36]	; 0x24
   1ec2c:	b	1e740 <__assert_fail@plt+0xd468>
   1ec30:	cmn	r9, #1
   1ec34:	beq	1ed7c <__assert_fail@plt+0xdaa4>
   1ec38:	cmn	r9, #2
   1ec3c:	strne	r9, [sp, #24]
   1ec40:	beq	1ed70 <__assert_fail@plt+0xda98>
   1ec44:	ldr	r3, [sp, #24]
   1ec48:	cmn	r3, #1
   1ec4c:	beq	1ed8c <__assert_fail@plt+0xdab4>
   1ec50:	ldr	r2, [pc, #1332]	; 1f18c <__assert_fail@plt+0xdeb4>
   1ec54:	cmp	r3, r2
   1ec58:	movle	r3, #0
   1ec5c:	movgt	r3, #1
   1ec60:	cmp	r3, #0
   1ec64:	bne	1eda4 <__assert_fail@plt+0xdacc>
   1ec68:	ldr	r4, [sp, #44]	; 0x2c
   1ec6c:	ldr	r2, [sp, #40]	; 0x28
   1ec70:	mov	r1, r4
   1ec74:	ldr	r0, [sp, #32]
   1ec78:	bl	19af8 <__assert_fail@plt+0x8820>
   1ec7c:	ldr	r3, [r4, #40]	; 0x28
   1ec80:	mov	r2, r4
   1ec84:	ldr	r4, [sp, #36]	; 0x24
   1ec88:	cmp	r4, #0
   1ec8c:	add	r3, r3, r0
   1ec90:	str	r3, [r2, #40]	; 0x28
   1ec94:	beq	1e72c <__assert_fail@plt+0xd454>
   1ec98:	ldr	r3, [sp, #24]
   1ec9c:	orrs	r3, r9, r3
   1eca0:	beq	1ecac <__assert_fail@plt+0xd9d4>
   1eca4:	b	1e2dc <__assert_fail@plt+0xd004>
   1eca8:	mov	r4, r3
   1ecac:	ldr	r3, [r4, #4]
   1ecb0:	cmp	r3, #0
   1ecb4:	bne	1eca8 <__assert_fail@plt+0xd9d0>
   1ecb8:	ldr	r3, [r4, #8]
   1ecbc:	cmp	r3, #0
   1ecc0:	bne	1eca8 <__assert_fail@plt+0xd9d0>
   1ecc4:	b	1ecfc <__assert_fail@plt+0xda24>
   1ecc8:	ldr	r0, [r4, #20]
   1eccc:	bl	296b0 <__assert_fail@plt+0x183d8>
   1ecd0:	ldr	r2, [r4]
   1ecd4:	cmp	r2, #0
   1ecd8:	beq	1e72c <__assert_fail@plt+0xd454>
   1ecdc:	ldr	r3, [r2, #8]
   1ece0:	cmp	r3, #0
   1ece4:	cmpne	r4, r3
   1ece8:	moveq	r4, #1
   1ecec:	movne	r4, #0
   1ecf0:	cmp	r4, #0
   1ecf4:	mov	r4, r2
   1ecf8:	beq	1eca8 <__assert_fail@plt+0xd9d0>
   1ecfc:	ldr	r3, [r4, #24]
   1ed00:	bic	r3, r3, #-16777216	; 0xff000000
   1ed04:	bic	r3, r3, #16449536	; 0xfb0000
   1ed08:	bic	r3, r3, #65280	; 0xff00
   1ed0c:	cmp	r3, #6
   1ed10:	beq	1ed20 <__assert_fail@plt+0xda48>
   1ed14:	cmp	r3, #3
   1ed18:	bne	1ecd0 <__assert_fail@plt+0xd9f8>
   1ed1c:	b	1ecc8 <__assert_fail@plt+0xd9f0>
   1ed20:	ldr	r5, [r4, #20]
   1ed24:	ldr	r0, [r5]
   1ed28:	bl	296b0 <__assert_fail@plt+0x183d8>
   1ed2c:	ldr	r0, [r5, #4]
   1ed30:	bl	296b0 <__assert_fail@plt+0x183d8>
   1ed34:	ldr	r0, [r5, #8]
   1ed38:	bl	296b0 <__assert_fail@plt+0x183d8>
   1ed3c:	ldr	r0, [r5, #12]
   1ed40:	bl	296b0 <__assert_fail@plt+0x183d8>
   1ed44:	mov	r0, r5
   1ed48:	bl	296b0 <__assert_fail@plt+0x183d8>
   1ed4c:	b	1ecd0 <__assert_fail@plt+0xd9f8>
   1ed50:	cmn	r9, #1
   1ed54:	ldr	r4, [sp, #20]
   1ed58:	beq	1edb4 <__assert_fail@plt+0xdadc>
   1ed5c:	cmn	r9, #2
   1ed60:	beq	1ed70 <__assert_fail@plt+0xda98>
   1ed64:	cmp	ip, #1
   1ed68:	moveq	r4, r1
   1ed6c:	beq	1edc0 <__assert_fail@plt+0xdae8>
   1ed70:	ldr	r3, [sp, #60]	; 0x3c
   1ed74:	cmp	r3, #0
   1ed78:	bne	1e820 <__assert_fail@plt+0xd548>
   1ed7c:	ldr	r2, [sp, #212]	; 0xd4
   1ed80:	mov	r3, #10
   1ed84:	str	r3, [r2]
   1ed88:	b	1e5f0 <__assert_fail@plt+0xd318>
   1ed8c:	add	r3, r3, #32768	; 0x8000
   1ed90:	cmp	r9, r3
   1ed94:	movle	r3, #0
   1ed98:	movgt	r3, #1
   1ed9c:	cmp	r3, #0
   1eda0:	beq	1ec68 <__assert_fail@plt+0xd990>
   1eda4:	ldr	r2, [sp, #212]	; 0xd4
   1eda8:	mov	r3, #15
   1edac:	str	r3, [r2]
   1edb0:	b	1e5f0 <__assert_fail@plt+0xd318>
   1edb4:	cmp	ip, #1
   1edb8:	bne	1ed7c <__assert_fail@plt+0xdaa4>
   1edbc:	mov	r9, fp
   1edc0:	mvn	r3, #0
   1edc4:	str	r5, [sp, #20]
   1edc8:	ldr	r0, [sp, #32]
   1edcc:	mov	r5, r4
   1edd0:	ldr	r4, [sp, #44]	; 0x2c
   1edd4:	mov	r7, #32768	; 0x8000
   1edd8:	mvn	r6, #1
   1eddc:	mov	r8, r3
   1ede0:	ldr	r2, [sp, #40]	; 0x28
   1ede4:	mov	r1, r4
   1ede8:	bl	19af8 <__assert_fail@plt+0x8820>
   1edec:	ldr	r1, [sp, #32]
   1edf0:	ldr	r2, [r4, #40]	; 0x28
   1edf4:	ldrb	r3, [r1, #4]
   1edf8:	cmp	r3, #2
   1edfc:	add	r2, r2, r0
   1ee00:	str	r2, [r4, #40]	; 0x28
   1ee04:	beq	1f448 <__assert_fail@plt+0xe170>
   1ee08:	ldrb	r2, [r1]
   1ee0c:	cmp	r2, #44	; 0x2c
   1ee10:	cmpne	r3, #24
   1ee14:	beq	1f49c <__assert_fail@plt+0xe1c4>
   1ee18:	cmp	r3, #1
   1ee1c:	movne	r8, r6
   1ee20:	movne	r0, r1
   1ee24:	bne	1ede0 <__assert_fail@plt+0xdb08>
   1ee28:	sub	r1, r2, #48	; 0x30
   1ee2c:	uxtb	r3, r1
   1ee30:	cmp	r3, #9
   1ee34:	movhi	r3, #0
   1ee38:	movls	r3, #1
   1ee3c:	cmn	r8, #2
   1ee40:	moveq	r3, #0
   1ee44:	cmp	r3, #0
   1ee48:	beq	1fe90 <__assert_fail@plt+0xebb8>
   1ee4c:	cmn	r8, #1
   1ee50:	beq	1fe84 <__assert_fail@plt+0xebac>
   1ee54:	add	r8, r8, r8, lsl #2
   1ee58:	ldr	r3, [pc, #808]	; 1f188 <__assert_fail@plt+0xdeb0>
   1ee5c:	add	r2, r2, r8, lsl #1
   1ee60:	cmp	r2, r3
   1ee64:	bgt	1f500 <__assert_fail@plt+0xe228>
   1ee68:	sub	r8, r2, #48	; 0x30
   1ee6c:	ldr	r0, [sp, #32]
   1ee70:	b	1ede0 <__assert_fail@plt+0xdb08>
   1ee74:	ldr	r5, [sp, #136]	; 0x88
   1ee78:	cmp	r5, #0
   1ee7c:	bne	1e2f4 <__assert_fail@plt+0xd01c>
   1ee80:	b	1e5e4 <__assert_fail@plt+0xd30c>
   1ee84:	ldr	r3, [sp, #32]
   1ee88:	ldr	r2, [sl, #84]	; 0x54
   1ee8c:	ldr	r1, [r3]
   1ee90:	mov	r3, #1
   1ee94:	lsl	r3, r3, r1
   1ee98:	ands	r2, r3, r2
   1ee9c:	beq	1fe70 <__assert_fail@plt+0xeb98>
   1eea0:	ldr	r1, [sl, #80]	; 0x50
   1eea4:	ldr	r2, [sp, #32]
   1eea8:	orr	r3, r1, r3
   1eeac:	str	r3, [sl, #80]	; 0x50
   1eeb0:	add	r1, sl, #64	; 0x40
   1eeb4:	add	r0, sl, #56	; 0x38
   1eeb8:	bl	1a460 <__assert_fail@plt+0x9188>
   1eebc:	subs	r3, r0, #0
   1eec0:	str	r3, [sp, #36]	; 0x24
   1eec4:	beq	1f070 <__assert_fail@plt+0xdd98>
   1eec8:	ldrb	r2, [sl, #88]	; 0x58
   1eecc:	ldr	r3, [sl, #76]	; 0x4c
   1eed0:	orr	r2, r2, #2
   1eed4:	add	r3, r3, #1
   1eed8:	strb	r2, [sl, #88]	; 0x58
   1eedc:	str	r3, [sl, #76]	; 0x4c
   1eee0:	b	1e1a4 <__assert_fail@plt+0xcecc>
   1eee4:	ldr	r3, [sp, #44]	; 0x2c
   1eee8:	sub	r2, r2, #33	; 0x21
   1eeec:	clz	r2, r2
   1eef0:	ldr	r1, [r3, #64]	; 0x40
   1eef4:	ldr	r3, [sp, #212]	; 0xd4
   1eef8:	lsr	r2, r2, #5
   1eefc:	str	r2, [sp]
   1ef00:	str	r3, [sp, #4]
   1ef04:	ldr	r2, [pc, #644]	; 1f190 <__assert_fail@plt+0xdeb8>
   1ef08:	ldr	r3, [pc, #644]	; 1f194 <__assert_fail@plt+0xdebc>
   1ef0c:	mov	r0, sl
   1ef10:	bl	1dc68 <__assert_fail@plt+0xc990>
   1ef14:	ldr	r3, [sp, #212]	; 0xd4
   1ef18:	ldr	r3, [r3]
   1ef1c:	adds	r3, r3, #0
   1ef20:	movne	r3, #1
   1ef24:	cmp	r0, #0
   1ef28:	movne	r3, #0
   1ef2c:	cmp	r3, #0
   1ef30:	str	r0, [sp, #36]	; 0x24
   1ef34:	beq	1e1a4 <__assert_fail@plt+0xcecc>
   1ef38:	b	1e250 <__assert_fail@plt+0xcf78>
   1ef3c:	ldr	r2, [sp, #32]
   1ef40:	add	r1, sl, #64	; 0x40
   1ef44:	add	r0, sl, #56	; 0x38
   1ef48:	bl	1a460 <__assert_fail@plt+0x9188>
   1ef4c:	subs	r3, r0, #0
   1ef50:	str	r3, [sp, #36]	; 0x24
   1ef54:	beq	1f070 <__assert_fail@plt+0xdd98>
   1ef58:	ldr	r3, [sl, #92]	; 0x5c
   1ef5c:	cmp	r3, #1
   1ef60:	ldrbgt	r3, [sl, #88]	; 0x58
   1ef64:	orrgt	r3, r3, #2
   1ef68:	strbgt	r3, [sl, #88]	; 0x58
   1ef6c:	b	1e1a4 <__assert_fail@plt+0xcecc>
   1ef70:	ldr	r3, [sp, #44]	; 0x2c
   1ef74:	sub	r2, r2, #35	; 0x23
   1ef78:	clz	r2, r2
   1ef7c:	ldr	r1, [r3, #64]	; 0x40
   1ef80:	ldr	r3, [sp, #212]	; 0xd4
   1ef84:	lsr	r2, r2, #5
   1ef88:	str	r2, [sp]
   1ef8c:	str	r3, [sp, #4]
   1ef90:	ldr	r2, [pc, #512]	; 1f198 <__assert_fail@plt+0xdec0>
   1ef94:	ldr	r3, [pc, #512]	; 1f19c <__assert_fail@plt+0xdec4>
   1ef98:	b	1ef0c <__assert_fail@plt+0xdc34>
   1ef9c:	add	r5, sl, #56	; 0x38
   1efa0:	add	r6, sl, #64	; 0x40
   1efa4:	mov	r0, r5
   1efa8:	mov	r1, r6
   1efac:	ldr	r2, [sp, #32]
   1efb0:	bl	1a460 <__assert_fail@plt+0x9188>
   1efb4:	subs	r3, r0, #0
   1efb8:	str	r3, [sp, #36]	; 0x24
   1efbc:	beq	1f070 <__assert_fail@plt+0xdd98>
   1efc0:	ldr	r3, [sl, #92]	; 0x5c
   1efc4:	cmp	r3, #1
   1efc8:	ble	1e1a4 <__assert_fail@plt+0xcecc>
   1efcc:	ldr	r8, [sp, #44]	; 0x2c
   1efd0:	add	r4, sp, #136	; 0x88
   1efd4:	mov	r7, #0
   1efd8:	mov	r9, #16
   1efdc:	ldr	r3, [r8, #40]	; 0x28
   1efe0:	ldr	r2, [r8, #56]	; 0x38
   1efe4:	cmp	r2, r3
   1efe8:	ble	1e1a4 <__assert_fail@plt+0xcecc>
   1efec:	ldr	r2, [r8, #28]
   1eff0:	cmp	r3, r2
   1eff4:	beq	1e1a4 <__assert_fail@plt+0xcecc>
   1eff8:	ldr	r2, [r8, #8]
   1effc:	ldr	r3, [r2, r3, lsl #2]
   1f000:	cmn	r3, #1
   1f004:	bne	1e1a4 <__assert_fail@plt+0xcecc>
   1f008:	ldr	fp, [sp, #32]
   1f00c:	ldr	r2, [sp, #40]	; 0x28
   1f010:	mov	r1, r8
   1f014:	mov	r0, fp
   1f018:	bl	19af8 <__assert_fail@plt+0x8820>
   1f01c:	ldr	r3, [r8, #40]	; 0x28
   1f020:	mov	r2, fp
   1f024:	mov	r1, r6
   1f028:	add	r3, r3, r0
   1f02c:	str	r3, [r8, #40]	; 0x28
   1f030:	mov	r0, r5
   1f034:	bl	1a460 <__assert_fail@plt+0x9188>
   1f038:	str	r4, [sp]
   1f03c:	ldr	r2, [sp, #36]	; 0x24
   1f040:	str	r7, [r4, #4]
   1f044:	mov	r1, r6
   1f048:	str	r7, [r4]
   1f04c:	strb	r9, [sp, #140]	; 0x8c
   1f050:	mov	fp, r0
   1f054:	mov	r3, r0
   1f058:	mov	r0, r5
   1f05c:	bl	1793c <__assert_fail@plt+0x6664>
   1f060:	cmp	r0, #0
   1f064:	cmpne	fp, #0
   1f068:	str	r0, [sp, #36]	; 0x24
   1f06c:	bne	1efdc <__assert_fail@plt+0xdd04>
   1f070:	ldr	r2, [sp, #212]	; 0xd4
   1f074:	mov	r3, #12
   1f078:	str	r3, [r2]
   1f07c:	mov	r3, #0
   1f080:	str	r3, [sp, #36]	; 0x24
   1f084:	b	1e1ec <__assert_fail@plt+0xcf14>
   1f088:	ldr	r3, [sp, #32]
   1f08c:	ldr	r2, [r3]
   1f090:	ldr	r3, [pc, #264]	; 1f1a0 <__assert_fail@plt+0xdec8>
   1f094:	and	r3, r3, r2
   1f098:	cmp	r3, #0
   1f09c:	beq	1f0ac <__assert_fail@plt+0xddd4>
   1f0a0:	ldrb	r3, [sl, #88]	; 0x58
   1f0a4:	ands	r4, r3, #16
   1f0a8:	beq	1f5d4 <__assert_fail@plt+0xe2fc>
   1f0ac:	sub	r3, r2, #256	; 0x100
   1f0b0:	bics	r3, r3, #256	; 0x100
   1f0b4:	bne	20014 <__assert_fail@plt+0xed3c>
   1f0b8:	cmp	r2, #256	; 0x100
   1f0bc:	beq	1ffe0 <__assert_fail@plt+0xed08>
   1f0c0:	ldr	r6, [sp, #32]
   1f0c4:	mov	r3, #5
   1f0c8:	add	r5, sl, #56	; 0x38
   1f0cc:	add	sl, sl, #64	; 0x40
   1f0d0:	str	r3, [r6]
   1f0d4:	mov	r2, r6
   1f0d8:	mov	r1, sl
   1f0dc:	mov	r0, r5
   1f0e0:	bl	1a460 <__assert_fail@plt+0x9188>
   1f0e4:	mov	r3, #10
   1f0e8:	str	r3, [r6]
   1f0ec:	mov	r4, r0
   1f0f0:	ldr	r2, [sp, #32]
   1f0f4:	mov	r1, sl
   1f0f8:	mov	r0, r5
   1f0fc:	bl	1a460 <__assert_fail@plt+0x9188>
   1f100:	mov	r2, #0
   1f104:	add	ip, sp, #136	; 0x88
   1f108:	str	r2, [sp, #140]	; 0x8c
   1f10c:	str	ip, [sp]
   1f110:	str	r2, [sp, #136]	; 0x88
   1f114:	mov	ip, #10
   1f118:	mov	r1, sl
   1f11c:	mov	r2, r4
   1f120:	strb	ip, [sp, #140]	; 0x8c
   1f124:	mov	r7, r0
   1f128:	mov	r3, r7
   1f12c:	mov	r0, r5
   1f130:	bl	1793c <__assert_fail@plt+0x6664>
   1f134:	cmp	r7, #0
   1f138:	cmpne	r4, #0
   1f13c:	moveq	r3, #1
   1f140:	movne	r3, #0
   1f144:	cmp	r0, #0
   1f148:	orreq	r3, r3, #1
   1f14c:	cmp	r3, #0
   1f150:	str	r0, [sp, #36]	; 0x24
   1f154:	bne	1f070 <__assert_fail@plt+0xdd98>
   1f158:	ldr	r4, [sp, #44]	; 0x2c
   1f15c:	ldr	r2, [sp, #40]	; 0x28
   1f160:	ldr	r0, [sp, #32]
   1f164:	mov	r1, r4
   1f168:	bl	19af8 <__assert_fail@plt+0x8820>
   1f16c:	ldr	r3, [r4, #40]	; 0x28
   1f170:	add	r3, r3, r0
   1f174:	str	r3, [r4, #40]	; 0x28
   1f178:	ldr	r0, [sp, #36]	; 0x24
   1f17c:	add	sp, sp, #172	; 0xac
   1f180:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f184:	addeq	r0, ip, r0, lsl #16
   1f188:	andeq	r8, r0, r0, lsr r0
   1f18c:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   1f190:	andeq	sl, r2, r4, asr #30
   1f194:	andeq	sl, r2, ip, lsl #31
   1f198:	andeq	sl, r2, r4, asr pc
   1f19c:	andeq	sl, r2, r4, ror r1
   1f1a0:	andeq	r0, r0, pc, lsl #6
   1f1a4:	mvnseq	r0, #0
   1f1a8:	mov	r3, #0
   1f1ac:	mov	r1, #1
   1f1b0:	mov	r0, #32
   1f1b4:	str	r3, [sp, #76]	; 0x4c
   1f1b8:	bl	2949c <__assert_fail@plt+0x181c4>
   1f1bc:	mov	r1, #1
   1f1c0:	mov	fp, r0
   1f1c4:	mov	r0, #40	; 0x28
   1f1c8:	bl	2949c <__assert_fail@plt+0x181c4>
   1f1cc:	cmp	r0, #0
   1f1d0:	cmpne	fp, #0
   1f1d4:	moveq	r3, #1
   1f1d8:	movne	r3, #0
   1f1dc:	mov	r9, r0
   1f1e0:	str	r3, [sp, #24]
   1f1e4:	beq	1f5b4 <__assert_fail@plt+0xe2dc>
   1f1e8:	ldr	r4, [sp, #32]
   1f1ec:	ldr	r2, [sp, #40]	; 0x28
   1f1f0:	ldr	r1, [sp, #44]	; 0x2c
   1f1f4:	mov	r0, r4
   1f1f8:	bl	16ab4 <__assert_fail@plt+0x57dc>
   1f1fc:	ldrb	r3, [r4, #4]
   1f200:	cmp	r3, #2
   1f204:	mov	r8, r0
   1f208:	beq	1f560 <__assert_fail@plt+0xe288>
   1f20c:	cmp	r3, #25
   1f210:	beq	1f50c <__assert_fail@plt+0xe234>
   1f214:	ldr	r2, [sp, #24]
   1f218:	str	r2, [sp, #48]	; 0x30
   1f21c:	cmp	r3, #21
   1f220:	moveq	r3, #1
   1f224:	ldreq	r2, [sp, #32]
   1f228:	ldr	r6, [sp, #44]	; 0x2c
   1f22c:	ldr	r4, [sp, #32]
   1f230:	strbeq	r3, [r2, #4]
   1f234:	mov	r3, #0
   1f238:	mov	r2, r3
   1f23c:	str	r3, [sp, #36]	; 0x24
   1f240:	ldr	r3, [sp, #40]	; 0x28
   1f244:	mov	lr, #1
   1f248:	str	r2, [sp, #28]
   1f24c:	lsr	r3, r3, #16
   1f250:	and	r3, r3, lr
   1f254:	str	r3, [sp, #68]	; 0x44
   1f258:	ldr	r3, [r6, #80]	; 0x50
   1f25c:	add	r2, sp, #104	; 0x68
   1f260:	cmp	r3, #1
   1f264:	str	r3, [sp, #52]	; 0x34
   1f268:	str	r2, [sp, #84]	; 0x54
   1f26c:	ldr	r3, [r6, #40]	; 0x28
   1f270:	beq	1f45c <__assert_fail@plt+0xe184>
   1f274:	ldr	r2, [r6, #28]
   1f278:	add	r1, r3, #1
   1f27c:	cmp	r1, r2
   1f280:	bge	1f45c <__assert_fail@plt+0xe184>
   1f284:	ldr	ip, [r6, #8]
   1f288:	add	r0, ip, r1, lsl #2
   1f28c:	ldr	r1, [ip, r1, lsl #2]
   1f290:	cmn	r1, #1
   1f294:	subeq	r2, r2, r3
   1f298:	moveq	ip, r0
   1f29c:	moveq	r1, #1
   1f2a0:	beq	1f2b4 <__assert_fail@plt+0xdfdc>
   1f2a4:	b	1f45c <__assert_fail@plt+0xe184>
   1f2a8:	ldr	r5, [ip, #4]!
   1f2ac:	cmn	r5, #1
   1f2b0:	bne	1f2c4 <__assert_fail@plt+0xdfec>
   1f2b4:	add	r1, r1, #1
   1f2b8:	cmp	r1, r2
   1f2bc:	add	lr, r1, r3
   1f2c0:	bne	1f2a8 <__assert_fail@plt+0xdfd0>
   1f2c4:	ldr	r3, [r0, #-4]
   1f2c8:	mov	r5, #1
   1f2cc:	str	lr, [r6, #40]	; 0x28
   1f2d0:	str	r3, [sp, #84]	; 0x54
   1f2d4:	ldr	r2, [sp, #40]	; 0x28
   1f2d8:	mov	r1, r6
   1f2dc:	mov	r0, r4
   1f2e0:	bl	16ab4 <__assert_fail@plt+0x57dc>
   1f2e4:	mov	r8, r0
   1f2e8:	ldrb	r3, [r4, #4]
   1f2ec:	cmp	r3, #2
   1f2f0:	beq	1fbc8 <__assert_fail@plt+0xe8f0>
   1f2f4:	cmp	r3, #22
   1f2f8:	beq	1f994 <__assert_fail@plt+0xe6bc>
   1f2fc:	cmp	r5, #2
   1f300:	beq	1fb1c <__assert_fail@plt+0xe844>
   1f304:	cmp	r5, #3
   1f308:	beq	1fb1c <__assert_fail@plt+0xe844>
   1f30c:	cmp	r5, #1
   1f310:	beq	1f96c <__assert_fail@plt+0xe694>
   1f314:	ldrb	r3, [sp, #84]	; 0x54
   1f318:	mov	r0, #1
   1f31c:	and	r1, r3, #31
   1f320:	asr	r3, r3, #5
   1f324:	ldr	r2, [fp, r3, lsl #2]
   1f328:	orr	r2, r2, r0, lsl r1
   1f32c:	str	r2, [fp, r3, lsl #2]
   1f330:	ldrb	r3, [r4, #4]
   1f334:	cmp	r3, #2
   1f338:	beq	1fbc8 <__assert_fail@plt+0xe8f0>
   1f33c:	cmp	r3, #21
   1f340:	beq	1f628 <__assert_fail@plt+0xe350>
   1f344:	ldr	lr, [sp, #24]
   1f348:	b	1f258 <__assert_fail@plt+0xdf80>
   1f34c:	ldr	r2, [sp, #212]	; 0xd4
   1f350:	mov	r3, #5
   1f354:	str	r3, [r2]
   1f358:	mov	r3, #0
   1f35c:	str	r3, [sp, #36]	; 0x24
   1f360:	ldr	r0, [sp, #36]	; 0x24
   1f364:	add	sp, sp, #172	; 0xac
   1f368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f36c:	ldr	r5, [r1, #24]
   1f370:	ldr	r7, [sp, #44]	; 0x2c
   1f374:	ldr	r8, [sp, #32]
   1f378:	ldr	r9, [sp, #40]	; 0x28
   1f37c:	add	r3, r5, #1
   1f380:	str	r3, [r1, #24]
   1f384:	orr	r2, r9, #8388608	; 0x800000
   1f388:	mov	r1, r7
   1f38c:	mov	r0, r8
   1f390:	bl	19af8 <__assert_fail@plt+0x8820>
   1f394:	ldrb	r2, [r8, #4]
   1f398:	ldr	r3, [r7, #40]	; 0x28
   1f39c:	mov	r1, r7
   1f3a0:	cmp	r2, #9
   1f3a4:	add	r6, r6, #1
   1f3a8:	add	r3, r3, r0
   1f3ac:	str	r3, [r7, #40]	; 0x28
   1f3b0:	mov	r0, r7
   1f3b4:	bne	1e1f8 <__assert_fail@plt+0xcf20>
   1f3b8:	mov	r2, #0
   1f3bc:	cmp	r5, #8
   1f3c0:	movls	r1, #1
   1f3c4:	ldrls	r3, [sl, #84]	; 0x54
   1f3c8:	mov	r0, #0
   1f3cc:	orrls	r3, r3, r1, lsl r5
   1f3d0:	add	ip, sp, #136	; 0x88
   1f3d4:	strls	r3, [sl, #84]	; 0x54
   1f3d8:	mov	lr, #17
   1f3dc:	mov	r3, r0
   1f3e0:	str	r0, [sp, #140]	; 0x8c
   1f3e4:	str	r0, [sp, #136]	; 0x88
   1f3e8:	str	ip, [sp]
   1f3ec:	add	r1, sl, #64	; 0x40
   1f3f0:	add	r0, sl, #56	; 0x38
   1f3f4:	strb	lr, [sp, #140]	; 0x8c
   1f3f8:	bl	1793c <__assert_fail@plt+0x6664>
   1f3fc:	subs	r3, r0, #0
   1f400:	str	r3, [sp, #36]	; 0x24
   1f404:	beq	1f070 <__assert_fail@plt+0xdd98>
   1f408:	str	r5, [r3, #20]
   1f40c:	b	1e1a4 <__assert_fail@plt+0xcecc>
   1f410:	ldr	r3, [sp, #40]	; 0x28
   1f414:	ands	r2, r3, #131072	; 0x20000
   1f418:	bne	1e180 <__assert_fail@plt+0xcea8>
   1f41c:	str	r2, [sp, #36]	; 0x24
   1f420:	ldr	r2, [sp, #212]	; 0xd4
   1f424:	mov	r3, #16
   1f428:	str	r3, [r2]
   1f42c:	b	1e1ec <__assert_fail@plt+0xcf14>
   1f430:	str	ip, [r6]
   1f434:	mov	r5, fp
   1f438:	b	1e9ec <__assert_fail@plt+0xd714>
   1f43c:	ldr	r5, [sp, #36]	; 0x24
   1f440:	mov	r8, r5
   1f444:	b	1ea8c <__assert_fail@plt+0xd7b4>
   1f448:	ldr	r3, [sp, #60]	; 0x3c
   1f44c:	ldr	r5, [sp, #20]
   1f450:	cmp	r3, #0
   1f454:	bne	1e820 <__assert_fail@plt+0xd548>
   1f458:	b	1f4f0 <__assert_fail@plt+0xe218>
   1f45c:	ldrb	r2, [r4, #4]
   1f460:	add	r8, r8, r3
   1f464:	str	r8, [r6, #40]	; 0x28
   1f468:	and	r3, r2, #251	; 0xfb
   1f46c:	cmp	r2, #28
   1f470:	cmpne	r3, #26
   1f474:	beq	1febc <__assert_fail@plt+0xebe4>
   1f478:	cmp	r2, #22
   1f47c:	moveq	r2, lr
   1f480:	orrne	r2, lr, #1
   1f484:	cmp	r2, #0
   1f488:	beq	1fe9c <__assert_fail@plt+0xebc4>
   1f48c:	ldrb	r3, [r4]
   1f490:	mov	r5, #0
   1f494:	strb	r3, [sp, #84]	; 0x54
   1f498:	b	1f2d4 <__assert_fail@plt+0xdffc>
   1f49c:	cmn	r8, #2
   1f4a0:	mov	r2, r8
   1f4a4:	mov	r4, r5
   1f4a8:	movne	r2, #0
   1f4ac:	moveq	r2, #1
   1f4b0:	orrs	r2, r4, r2
   1f4b4:	ldr	r5, [sp, #20]
   1f4b8:	str	r8, [sp, #24]
   1f4bc:	bne	1e814 <__assert_fail@plt+0xd53c>
   1f4c0:	ldr	r2, [sp, #24]
   1f4c4:	cmn	r2, #1
   1f4c8:	cmpne	r9, r2
   1f4cc:	bgt	1ed7c <__assert_fail@plt+0xdaa4>
   1f4d0:	cmp	r3, #24
   1f4d4:	beq	1ec44 <__assert_fail@plt+0xd96c>
   1f4d8:	ldr	r2, [sp, #212]	; 0xd4
   1f4dc:	mov	r3, #10
   1f4e0:	str	r3, [r2]
   1f4e4:	b	1e5f0 <__assert_fail@plt+0xd318>
   1f4e8:	cmp	r3, #2
   1f4ec:	bne	1ed7c <__assert_fail@plt+0xdaa4>
   1f4f0:	ldr	r2, [sp, #212]	; 0xd4
   1f4f4:	mov	r3, #9
   1f4f8:	str	r3, [r2]
   1f4fc:	b	1e5f0 <__assert_fail@plt+0xd318>
   1f500:	mov	r8, r7
   1f504:	ldr	r0, [sp, #32]
   1f508:	b	1ede0 <__assert_fail@plt+0xdb08>
   1f50c:	ldrb	r3, [r9, #16]
   1f510:	ldr	r2, [sp, #40]	; 0x28
   1f514:	ldr	r1, [sp, #44]	; 0x2c
   1f518:	tst	r2, #256	; 0x100
   1f51c:	orr	r3, r3, #1
   1f520:	strb	r3, [r9, #16]
   1f524:	ldrne	r3, [fp]
   1f528:	ldr	r4, [sp, #32]
   1f52c:	orrne	r3, r3, #1024	; 0x400
   1f530:	strne	r3, [fp]
   1f534:	ldr	r3, [r1, #40]	; 0x28
   1f538:	add	r3, r3, r0
   1f53c:	str	r3, [r1, #40]	; 0x28
   1f540:	mov	r0, r4
   1f544:	bl	16ab4 <__assert_fail@plt+0x57dc>
   1f548:	ldrb	r3, [r4, #4]
   1f54c:	cmp	r3, #2
   1f550:	mov	r8, r0
   1f554:	movne	r2, #1
   1f558:	strne	r2, [sp, #48]	; 0x30
   1f55c:	bne	1f21c <__assert_fail@plt+0xdf44>
   1f560:	ldr	r2, [sp, #212]	; 0xd4
   1f564:	mov	r3, #2
   1f568:	str	r3, [r2]
   1f56c:	mov	r0, fp
   1f570:	bl	296b0 <__assert_fail@plt+0x183d8>
   1f574:	ldr	r0, [r9]
   1f578:	bl	296b0 <__assert_fail@plt+0x183d8>
   1f57c:	ldr	r0, [r9, #4]
   1f580:	bl	296b0 <__assert_fail@plt+0x183d8>
   1f584:	ldr	r0, [r9, #8]
   1f588:	bl	296b0 <__assert_fail@plt+0x183d8>
   1f58c:	ldr	r0, [r9, #12]
   1f590:	bl	296b0 <__assert_fail@plt+0x183d8>
   1f594:	mov	r0, r9
   1f598:	bl	296b0 <__assert_fail@plt+0x183d8>
   1f59c:	ldr	r3, [sp, #212]	; 0xd4
   1f5a0:	ldr	r3, [r3]
   1f5a4:	cmp	r3, #0
   1f5a8:	bne	1e250 <__assert_fail@plt+0xcf78>
   1f5ac:	str	r3, [sp, #36]	; 0x24
   1f5b0:	b	1e1a4 <__assert_fail@plt+0xcecc>
   1f5b4:	mov	r0, fp
   1f5b8:	bl	296b0 <__assert_fail@plt+0x183d8>
   1f5bc:	mov	r0, r9
   1f5c0:	bl	296b0 <__assert_fail@plt+0x183d8>
   1f5c4:	ldr	r2, [sp, #212]	; 0xd4
   1f5c8:	mov	r3, #12
   1f5cc:	str	r3, [r2]
   1f5d0:	b	1e250 <__assert_fail@plt+0xcf78>
   1f5d4:	orr	r3, r3, #16
   1f5d8:	ands	r2, r3, #8
   1f5dc:	mov	r1, r3
   1f5e0:	strb	r3, [sl, #88]	; 0x58
   1f5e4:	bne	1f964 <__assert_fail@plt+0xe68c>
   1f5e8:	ldr	r3, [pc, #-1100]	; 1f1a4 <__assert_fail@plt+0xdecc>
   1f5ec:	tst	r1, #4
   1f5f0:	str	r3, [sl, #100]	; 0x64
   1f5f4:	mvn	r1, #2013265921	; 0x78000001
   1f5f8:	mvn	r3, #-134217727	; 0xf8000001
   1f5fc:	str	r2, [sl, #96]	; 0x60
   1f600:	str	r1, [sl, #104]	; 0x68
   1f604:	str	r3, [sl, #108]	; 0x6c
   1f608:	beq	1f8e4 <__assert_fail@plt+0xe60c>
   1f60c:	ldr	r3, [sp, #32]
   1f610:	str	r2, [sl, #112]	; 0x70
   1f614:	str	r2, [sl, #116]	; 0x74
   1f618:	str	r2, [sl, #120]	; 0x78
   1f61c:	str	r2, [sl, #124]	; 0x7c
   1f620:	ldr	r2, [r3]
   1f624:	b	1f0ac <__assert_fail@plt+0xddd4>
   1f628:	ldr	r2, [sp, #44]	; 0x2c
   1f62c:	ldr	r1, [sp, #48]	; 0x30
   1f630:	ldr	r3, [r2, #40]	; 0x28
   1f634:	cmp	r1, #0
   1f638:	add	r3, r3, r8
   1f63c:	str	r3, [r2, #40]	; 0x28
   1f640:	beq	1f6a0 <__assert_fail@plt+0xe3c8>
   1f644:	ldm	fp, {r2, r3}
   1f648:	ldr	r1, [fp, #8]
   1f64c:	mvn	r2, r2
   1f650:	mvn	r3, r3
   1f654:	str	r2, [fp]
   1f658:	str	r3, [fp, #4]
   1f65c:	ldr	r2, [fp, #12]
   1f660:	ldr	r3, [fp, #16]
   1f664:	mvn	r1, r1
   1f668:	mvn	r2, r2
   1f66c:	mvn	r3, r3
   1f670:	str	r1, [fp, #8]
   1f674:	str	r2, [fp, #12]
   1f678:	ldr	r1, [fp, #20]
   1f67c:	ldr	r2, [fp, #24]
   1f680:	str	r3, [fp, #16]
   1f684:	ldr	r3, [fp, #28]
   1f688:	mvn	r1, r1
   1f68c:	mvn	r2, r2
   1f690:	mvn	r3, r3
   1f694:	str	r1, [fp, #20]
   1f698:	str	r2, [fp, #24]
   1f69c:	str	r3, [fp, #28]
   1f6a0:	ldr	r0, [sl, #92]	; 0x5c
   1f6a4:	cmp	r0, #1
   1f6a8:	ble	1f72c <__assert_fail@plt+0xe454>
   1f6ac:	ldr	r3, [sl, #60]	; 0x3c
   1f6b0:	ldm	fp, {r1, r2}
   1f6b4:	ldr	ip, [r3]
   1f6b8:	and	r1, r1, ip
   1f6bc:	str	r1, [fp]
   1f6c0:	ldr	ip, [r3, #4]
   1f6c4:	ldr	r1, [fp, #8]
   1f6c8:	and	r2, r2, ip
   1f6cc:	str	r2, [fp, #4]
   1f6d0:	ldr	ip, [r3, #8]
   1f6d4:	ldr	r2, [fp, #12]
   1f6d8:	and	r1, r1, ip
   1f6dc:	str	r1, [fp, #8]
   1f6e0:	ldr	ip, [r3, #12]
   1f6e4:	ldr	r1, [fp, #16]
   1f6e8:	and	r2, r2, ip
   1f6ec:	str	r2, [fp, #12]
   1f6f0:	ldr	ip, [r3, #16]
   1f6f4:	ldr	r2, [fp, #20]
   1f6f8:	and	r1, r1, ip
   1f6fc:	str	r1, [fp, #16]
   1f700:	ldr	ip, [r3, #20]
   1f704:	ldr	r1, [fp, #24]
   1f708:	and	r2, r2, ip
   1f70c:	str	r2, [fp, #20]
   1f710:	ldr	ip, [r3, #24]
   1f714:	ldr	r2, [fp, #28]
   1f718:	and	r1, r1, ip
   1f71c:	str	r1, [fp, #24]
   1f720:	ldr	r3, [r3, #28]
   1f724:	and	r3, r3, r2
   1f728:	str	r3, [fp, #28]
   1f72c:	ldr	r3, [r9, #20]
   1f730:	cmp	r3, #0
   1f734:	bne	1f77c <__assert_fail@plt+0xe4a4>
   1f738:	ldr	r3, [r9, #24]
   1f73c:	cmp	r3, #0
   1f740:	bne	1f77c <__assert_fail@plt+0xe4a4>
   1f744:	ldr	r3, [r9, #28]
   1f748:	cmp	r3, #0
   1f74c:	bne	1f77c <__assert_fail@plt+0xe4a4>
   1f750:	ldr	r3, [r9, #32]
   1f754:	cmp	r3, #0
   1f758:	bne	1f77c <__assert_fail@plt+0xe4a4>
   1f75c:	cmp	r0, #1
   1f760:	ble	1f824 <__assert_fail@plt+0xe54c>
   1f764:	ldr	r3, [r9, #36]	; 0x24
   1f768:	cmp	r3, #0
   1f76c:	bne	1f77c <__assert_fail@plt+0xe4a4>
   1f770:	ldrb	r3, [r9, #16]
   1f774:	tst	r3, #1
   1f778:	beq	1f824 <__assert_fail@plt+0xe54c>
   1f77c:	ldrb	r3, [sl, #88]	; 0x58
   1f780:	add	r4, sl, #56	; 0x38
   1f784:	add	r5, sl, #64	; 0x40
   1f788:	orr	r3, r3, #2
   1f78c:	strb	r3, [sl, #88]	; 0x58
   1f790:	mov	r0, r4
   1f794:	mov	r3, #6
   1f798:	mov	r1, r5
   1f79c:	add	r2, sp, #104	; 0x68
   1f7a0:	strb	r3, [sp, #108]	; 0x6c
   1f7a4:	str	r9, [sp, #104]	; 0x68
   1f7a8:	bl	1a460 <__assert_fail@plt+0x9188>
   1f7ac:	subs	r3, r0, #0
   1f7b0:	str	r3, [sp, #36]	; 0x24
   1f7b4:	beq	1f874 <__assert_fail@plt+0xe59c>
   1f7b8:	ldr	r3, [fp]
   1f7bc:	cmp	r3, #0
   1f7c0:	bne	1f884 <__assert_fail@plt+0xe5ac>
   1f7c4:	ldr	r3, [fp, #4]
   1f7c8:	cmp	r3, #0
   1f7cc:	bne	1f884 <__assert_fail@plt+0xe5ac>
   1f7d0:	ldr	r3, [fp, #8]
   1f7d4:	cmp	r3, #0
   1f7d8:	bne	1f884 <__assert_fail@plt+0xe5ac>
   1f7dc:	ldr	r3, [fp, #12]
   1f7e0:	cmp	r3, #0
   1f7e4:	bne	1f884 <__assert_fail@plt+0xe5ac>
   1f7e8:	ldr	r3, [fp, #16]
   1f7ec:	cmp	r3, #0
   1f7f0:	bne	1f884 <__assert_fail@plt+0xe5ac>
   1f7f4:	ldr	r3, [fp, #20]
   1f7f8:	cmp	r3, #0
   1f7fc:	bne	1f884 <__assert_fail@plt+0xe5ac>
   1f800:	ldr	r3, [fp, #24]
   1f804:	cmp	r3, #0
   1f808:	bne	1f884 <__assert_fail@plt+0xe5ac>
   1f80c:	ldr	r3, [fp, #28]
   1f810:	cmp	r3, #0
   1f814:	bne	1f884 <__assert_fail@plt+0xe5ac>
   1f818:	mov	r0, fp
   1f81c:	bl	296b0 <__assert_fail@plt+0x183d8>
   1f820:	b	1e1a4 <__assert_fail@plt+0xcecc>
   1f824:	ldr	r0, [r9]
   1f828:	bl	296b0 <__assert_fail@plt+0x183d8>
   1f82c:	ldr	r0, [r9, #4]
   1f830:	bl	296b0 <__assert_fail@plt+0x183d8>
   1f834:	ldr	r0, [r9, #8]
   1f838:	bl	296b0 <__assert_fail@plt+0x183d8>
   1f83c:	ldr	r0, [r9, #12]
   1f840:	bl	296b0 <__assert_fail@plt+0x183d8>
   1f844:	mov	r0, r9
   1f848:	bl	296b0 <__assert_fail@plt+0x183d8>
   1f84c:	mov	r3, #3
   1f850:	add	r2, sp, #104	; 0x68
   1f854:	add	r1, sl, #64	; 0x40
   1f858:	add	r0, sl, #56	; 0x38
   1f85c:	strb	r3, [sp, #108]	; 0x6c
   1f860:	str	fp, [sp, #104]	; 0x68
   1f864:	bl	1a460 <__assert_fail@plt+0x9188>
   1f868:	subs	r3, r0, #0
   1f86c:	str	r3, [sp, #36]	; 0x24
   1f870:	bne	1e1a4 <__assert_fail@plt+0xcecc>
   1f874:	mov	r3, #12
   1f878:	ldr	r2, [sp, #212]	; 0xd4
   1f87c:	str	r3, [r2]
   1f880:	b	1f56c <__assert_fail@plt+0xe294>
   1f884:	add	r2, sp, #104	; 0x68
   1f888:	mov	r3, #3
   1f88c:	mov	r1, r5
   1f890:	mov	r0, r4
   1f894:	str	fp, [sp, #104]	; 0x68
   1f898:	strb	r3, [sp, #108]	; 0x6c
   1f89c:	bl	1a460 <__assert_fail@plt+0x9188>
   1f8a0:	subs	r2, r0, #0
   1f8a4:	beq	1f874 <__assert_fail@plt+0xe59c>
   1f8a8:	add	ip, sp, #136	; 0x88
   1f8ac:	mov	lr, #0
   1f8b0:	ldr	r3, [sp, #36]	; 0x24
   1f8b4:	mov	r0, r4
   1f8b8:	mov	r1, r5
   1f8bc:	str	ip, [sp]
   1f8c0:	mov	r4, #10
   1f8c4:	str	lr, [sp, #140]	; 0x8c
   1f8c8:	str	lr, [sp, #136]	; 0x88
   1f8cc:	strb	r4, [sp, #140]	; 0x8c
   1f8d0:	bl	1793c <__assert_fail@plt+0x6664>
   1f8d4:	subs	r3, r0, #0
   1f8d8:	str	r3, [sp, #36]	; 0x24
   1f8dc:	bne	1e1a4 <__assert_fail@plt+0xcecc>
   1f8e0:	b	1f874 <__assert_fail@plt+0xe59c>
   1f8e4:	mov	r4, #128	; 0x80
   1f8e8:	mov	r5, #4
   1f8ec:	bl	111a0 <__ctype_b_loc@plt>
   1f8f0:	sub	r3, r4, #-2147483647	; 0x80000001
   1f8f4:	mov	ip, #1
   1f8f8:	add	r2, r5, #24
   1f8fc:	add	r2, sl, r2, lsl #2
   1f900:	ldr	r1, [r0]
   1f904:	add	r1, r1, r3, lsl ip
   1f908:	mov	r6, r1
   1f90c:	mov	r3, #0
   1f910:	ldrh	r0, [r6, #2]!
   1f914:	add	lr, r3, r4
   1f918:	lsr	r0, r0, #3
   1f91c:	cmp	lr, #95	; 0x5f
   1f920:	orreq	r0, r0, #1
   1f924:	tst	r0, #1
   1f928:	ldrne	r0, [r2]
   1f92c:	orrne	r0, r0, ip, lsl r3
   1f930:	add	r3, r3, #1
   1f934:	strne	r0, [r2]
   1f938:	cmp	r3, #32
   1f93c:	bne	1f910 <__assert_fail@plt+0xe638>
   1f940:	add	r5, r5, #1
   1f944:	cmp	r5, #8
   1f948:	add	r4, r4, #32
   1f94c:	add	r1, r1, #64	; 0x40
   1f950:	add	r2, r2, #4
   1f954:	bne	1f908 <__assert_fail@plt+0xe630>
   1f958:	ldr	r3, [sp, #32]
   1f95c:	ldr	r2, [r3]
   1f960:	b	1f0ac <__assert_fail@plt+0xddd4>
   1f964:	mov	r5, r4
   1f968:	b	1f8ec <__assert_fail@plt+0xe614>
   1f96c:	ldr	r3, [r9, #20]
   1f970:	ldr	r2, [sp, #28]
   1f974:	cmp	r3, r2
   1f978:	beq	1fbd0 <__assert_fail@plt+0xe8f8>
   1f97c:	ldr	r0, [r9]
   1f980:	ldr	r2, [sp, #84]	; 0x54
   1f984:	add	r1, r3, #1
   1f988:	str	r1, [r9, #20]
   1f98c:	str	r2, [r0, r3, lsl #2]
   1f990:	b	1f330 <__assert_fail@plt+0xe058>
   1f994:	ldr	r3, [r6, #40]	; 0x28
   1f998:	mov	r1, r6
   1f99c:	add	r3, r3, r8
   1f9a0:	ldr	r2, [sp, #40]	; 0x28
   1f9a4:	str	r3, [r6, #40]	; 0x28
   1f9a8:	add	r0, sp, #96	; 0x60
   1f9ac:	bl	16ab4 <__assert_fail@plt+0x57dc>
   1f9b0:	ldrb	r1, [sp, #100]	; 0x64
   1f9b4:	cmp	r1, #2
   1f9b8:	mov	r7, r0
   1f9bc:	beq	1fbc8 <__assert_fail@plt+0xe8f0>
   1f9c0:	cmp	r1, #21
   1f9c4:	beq	1fe08 <__assert_fail@plt+0xeb30>
   1f9c8:	ldr	r3, [r6, #80]	; 0x50
   1f9cc:	add	r2, sp, #136	; 0x88
   1f9d0:	cmp	r3, #1
   1f9d4:	str	r3, [sp, #56]	; 0x38
   1f9d8:	str	r2, [sp, #92]	; 0x5c
   1f9dc:	ldr	r3, [r6, #40]	; 0x28
   1f9e0:	beq	1fdcc <__assert_fail@plt+0xeaf4>
   1f9e4:	ldr	r2, [r6, #28]
   1f9e8:	add	r0, r3, #1
   1f9ec:	cmp	r2, r0
   1f9f0:	ble	1fdcc <__assert_fail@plt+0xeaf4>
   1f9f4:	ldr	lr, [r6, #8]
   1f9f8:	add	ip, lr, r0, lsl #2
   1f9fc:	ldr	r0, [lr, r0, lsl #2]
   1fa00:	cmn	r0, #1
   1fa04:	subeq	r2, r2, r3
   1fa08:	moveq	r0, ip
   1fa0c:	moveq	r1, #1
   1fa10:	bne	1fdcc <__assert_fail@plt+0xeaf4>
   1fa14:	add	r1, r1, #1
   1fa18:	cmp	r1, r2
   1fa1c:	add	lr, r1, r3
   1fa20:	beq	1fa30 <__assert_fail@plt+0xe758>
   1fa24:	ldr	r7, [r0, #4]!
   1fa28:	cmn	r7, #1
   1fa2c:	beq	1fa14 <__assert_fail@plt+0xe73c>
   1fa30:	ldr	r3, [ip, #-4]
   1fa34:	mov	r7, #1
   1fa38:	str	r3, [sp, #92]	; 0x5c
   1fa3c:	ldr	r3, [sp, #24]
   1fa40:	str	lr, [r6, #40]	; 0x28
   1fa44:	str	r3, [sp, #20]
   1fa48:	ldr	r2, [sp, #40]	; 0x28
   1fa4c:	mov	r1, r6
   1fa50:	mov	r0, r4
   1fa54:	bl	16ab4 <__assert_fail@plt+0x57dc>
   1fa58:	sub	r3, r5, #2
   1fa5c:	bics	r3, r3, #2
   1fa60:	mov	r8, r0
   1fa64:	beq	1fdc4 <__assert_fail@plt+0xeaec>
   1fa68:	cmp	r5, #3
   1fa6c:	moveq	r3, #1
   1fa70:	movne	r3, #0
   1fa74:	str	r3, [sp, #52]	; 0x34
   1fa78:	beq	1fdac <__assert_fail@plt+0xead4>
   1fa7c:	cmp	r7, #3
   1fa80:	beq	1fd90 <__assert_fail@plt+0xeab8>
   1fa84:	cmp	r5, #0
   1fa88:	bne	1fd7c <__assert_fail@plt+0xeaa4>
   1fa8c:	ldrb	r3, [sp, #84]	; 0x54
   1fa90:	cmp	r7, #0
   1fa94:	bne	1fd68 <__assert_fail@plt+0xea90>
   1fa98:	ldrb	r7, [sp, #92]	; 0x5c
   1fa9c:	ldr	r2, [sp, #52]	; 0x34
   1faa0:	cmp	r5, #0
   1faa4:	orreq	r2, r2, #1
   1faa8:	cmp	r2, #0
   1faac:	beq	1fd60 <__assert_fail@plt+0xea88>
   1fab0:	ldr	r2, [sl, #92]	; 0x5c
   1fab4:	cmp	r2, #1
   1fab8:	ble	1fc14 <__assert_fail@plt+0xe93c>
   1fabc:	mov	r0, r3
   1fac0:	bl	11200 <btowc@plt>
   1fac4:	mov	r3, r0
   1fac8:	ldr	r2, [sp, #20]
   1facc:	cmp	r2, #0
   1fad0:	beq	1fc0c <__assert_fail@plt+0xe934>
   1fad4:	ldr	r2, [sl, #92]	; 0x5c
   1fad8:	cmp	r2, #1
   1fadc:	ble	1faf4 <__assert_fail@plt+0xe81c>
   1fae0:	mov	r0, r7
   1fae4:	str	r3, [sp, #20]
   1fae8:	bl	11200 <btowc@plt>
   1faec:	ldr	r3, [sp, #20]
   1faf0:	mov	r7, r0
   1faf4:	cmn	r3, #1
   1faf8:	cmnne	r7, #1
   1fafc:	bne	1fc20 <__assert_fail@plt+0xe948>
   1fb00:	mov	r3, #3
   1fb04:	b	1f878 <__assert_fail@plt+0xe5a0>
   1fb08:	ldr	r2, [sp, #40]	; 0x28
   1fb0c:	mov	r1, r6
   1fb10:	mov	r0, r4
   1fb14:	bl	16ab4 <__assert_fail@plt+0x57dc>
   1fb18:	mov	r8, r0
   1fb1c:	ldr	r5, [sp, #84]	; 0x54
   1fb20:	mov	r0, r5
   1fb24:	bl	111b8 <strlen@plt>
   1fb28:	cmp	r0, #1
   1fb2c:	bne	1fbfc <__assert_fail@plt+0xe924>
   1fb30:	ldrb	r3, [r5]
   1fb34:	ldr	r2, [sp, #212]	; 0xd4
   1fb38:	mov	r1, #0
   1fb3c:	str	r1, [r2]
   1fb40:	and	r1, r3, #31
   1fb44:	asr	r3, r3, #5
   1fb48:	ldr	r2, [fp, r3, lsl #2]
   1fb4c:	orr	r2, r2, r0, lsl r1
   1fb50:	str	r2, [fp, r3, lsl #2]
   1fb54:	b	1f330 <__assert_fail@plt+0xe058>
   1fb58:	ldr	r2, [r6, #56]	; 0x38
   1fb5c:	ldrb	r0, [sp, #96]	; 0x60
   1fb60:	cmp	r3, r2
   1fb64:	str	r2, [sp, #64]	; 0x40
   1fb68:	str	r0, [sp, #60]	; 0x3c
   1fb6c:	bge	1fbc8 <__assert_fail@plt+0xe8f0>
   1fb70:	mov	lr, #0
   1fb74:	add	r2, sp, #136	; 0x88
   1fb78:	str	r2, [sp, #52]	; 0x34
   1fb7c:	cmp	r1, #30
   1fb80:	beq	20074 <__assert_fail@plt+0xed9c>
   1fb84:	ldr	r2, [r6, #4]
   1fb88:	add	r0, r3, #1
   1fb8c:	str	r0, [r6, #40]	; 0x28
   1fb90:	ldrb	r2, [r2, r3]
   1fb94:	mov	r3, r0
   1fb98:	ldr	r0, [sp, #64]	; 0x40
   1fb9c:	cmp	r0, r3
   1fba0:	ble	1fbc8 <__assert_fail@plt+0xe8f0>
   1fba4:	ldr	r0, [sp, #60]	; 0x3c
   1fba8:	cmp	r0, r2
   1fbac:	beq	20034 <__assert_fail@plt+0xed5c>
   1fbb0:	ldr	r0, [sp, #52]	; 0x34
   1fbb4:	add	lr, lr, #1
   1fbb8:	cmp	lr, #32
   1fbbc:	strb	r2, [r0], #1
   1fbc0:	str	r0, [sp, #52]	; 0x34
   1fbc4:	bne	1fb7c <__assert_fail@plt+0xe8a4>
   1fbc8:	mov	r3, #7
   1fbcc:	b	1f878 <__assert_fail@plt+0xe5a0>
   1fbd0:	lsl	r3, r2, #1
   1fbd4:	add	r3, r3, #1
   1fbd8:	ldr	r0, [r9]
   1fbdc:	lsl	r1, r3, #2
   1fbe0:	str	r3, [sp, #28]
   1fbe4:	bl	29510 <__assert_fail@plt+0x18238>
   1fbe8:	cmp	r0, #0
   1fbec:	beq	1f874 <__assert_fail@plt+0xe59c>
   1fbf0:	ldr	r3, [r9, #20]
   1fbf4:	str	r0, [r9]
   1fbf8:	b	1f980 <__assert_fail@plt+0xe6a8>
   1fbfc:	ldr	r2, [sp, #212]	; 0xd4
   1fc00:	mov	r3, #3
   1fc04:	str	r3, [r2]
   1fc08:	b	1f56c <__assert_fail@plt+0xe294>
   1fc0c:	ldr	r7, [sp, #92]	; 0x5c
   1fc10:	b	1faf4 <__assert_fail@plt+0xe81c>
   1fc14:	ldr	r2, [sp, #20]
   1fc18:	cmp	r2, #0
   1fc1c:	beq	1fc0c <__assert_fail@plt+0xe934>
   1fc20:	ldr	r2, [sp, #68]	; 0x44
   1fc24:	cmp	r7, r3
   1fc28:	movcs	r2, #0
   1fc2c:	andcc	r2, r2, #1
   1fc30:	cmp	r2, #0
   1fc34:	bne	1fce0 <__assert_fail@plt+0xea08>
   1fc38:	ldr	r2, [sl, #92]	; 0x5c
   1fc3c:	cmp	r2, #1
   1fc40:	ble	1fc70 <__assert_fail@plt+0xe998>
   1fc44:	ldr	r2, [r9, #32]
   1fc48:	ldr	r1, [sp, #36]	; 0x24
   1fc4c:	cmp	r2, r1
   1fc50:	beq	1fce8 <__assert_fail@plt+0xea10>
   1fc54:	ldr	r5, [r9, #4]
   1fc58:	ldr	r0, [r9, #8]
   1fc5c:	str	r3, [r5, r2, lsl #2]
   1fc60:	ldr	r2, [r9, #32]
   1fc64:	add	r1, r2, #1
   1fc68:	str	r1, [r9, #32]
   1fc6c:	str	r7, [r0, r2, lsl #2]
   1fc70:	mov	r2, #0
   1fc74:	cmp	r2, r3
   1fc78:	movcc	r1, #0
   1fc7c:	movcs	r1, #1
   1fc80:	cmp	r2, r7
   1fc84:	movhi	r1, #0
   1fc88:	cmp	r1, #0
   1fc8c:	beq	1fca8 <__assert_fail@plt+0xe9d0>
   1fc90:	asr	ip, r2, #5
   1fc94:	and	r0, r2, #31
   1fc98:	ldr	r1, [fp, ip, lsl #2]
   1fc9c:	mov	lr, #1
   1fca0:	orr	r1, r1, lr, lsl r0
   1fca4:	str	r1, [fp, ip, lsl #2]
   1fca8:	add	r2, r2, #1
   1fcac:	cmp	r2, #256	; 0x100
   1fcb0:	bne	1fc74 <__assert_fail@plt+0xe99c>
   1fcb4:	ldr	r3, [sp, #212]	; 0xd4
   1fcb8:	mov	r2, #0
   1fcbc:	str	r2, [r3]
   1fcc0:	b	1f330 <__assert_fail@plt+0xe058>
   1fcc4:	ldr	r2, [sp, #40]	; 0x28
   1fcc8:	ldr	r1, [sp, #44]	; 0x2c
   1fccc:	ldr	r0, [sp, #32]
   1fcd0:	bl	16ab4 <__assert_fail@plt+0x57dc>
   1fcd4:	sub	r3, r5, #2
   1fcd8:	bics	r3, r3, #2
   1fcdc:	beq	1fdc4 <__assert_fail@plt+0xeaec>
   1fce0:	mov	r3, #11
   1fce4:	b	1f878 <__assert_fail@plt+0xe5a0>
   1fce8:	str	r3, [sp, #52]	; 0x34
   1fcec:	ldr	r3, [sp, #36]	; 0x24
   1fcf0:	ldr	r0, [r9, #4]
   1fcf4:	lsl	r2, r3, #1
   1fcf8:	add	r3, r2, #1
   1fcfc:	str	r3, [sp, #36]	; 0x24
   1fd00:	lsl	r2, r3, #2
   1fd04:	mov	r1, r2
   1fd08:	str	r2, [sp, #20]
   1fd0c:	bl	29510 <__assert_fail@plt+0x18238>
   1fd10:	ldr	r2, [sp, #20]
   1fd14:	mov	r1, r2
   1fd18:	mov	r5, r0
   1fd1c:	ldr	r0, [r9, #8]
   1fd20:	bl	29510 <__assert_fail@plt+0x18238>
   1fd24:	ldr	r3, [sp, #52]	; 0x34
   1fd28:	cmp	r0, #0
   1fd2c:	cmpne	r5, #0
   1fd30:	ldrne	r2, [r9, #32]
   1fd34:	strne	r5, [r9, #4]
   1fd38:	strne	r0, [r9, #8]
   1fd3c:	bne	1fc5c <__assert_fail@plt+0xe984>
   1fd40:	mov	r4, r5
   1fd44:	mov	r5, r0
   1fd48:	mov	r0, r4
   1fd4c:	bl	296b0 <__assert_fail@plt+0x183d8>
   1fd50:	mov	r0, r5
   1fd54:	bl	296b0 <__assert_fail@plt+0x183d8>
   1fd58:	mov	r3, #12
   1fd5c:	b	1f878 <__assert_fail@plt+0xe5a0>
   1fd60:	ldr	r3, [sp, #84]	; 0x54
   1fd64:	b	1fac8 <__assert_fail@plt+0xe7f0>
   1fd68:	cmp	r7, #3
   1fd6c:	movne	r7, #0
   1fd70:	ldreq	r2, [sp, #92]	; 0x5c
   1fd74:	ldrbeq	r7, [r2]
   1fd78:	b	1fa9c <__assert_fail@plt+0xe7c4>
   1fd7c:	cmp	r5, #3
   1fd80:	movne	r3, #0
   1fd84:	ldreq	r3, [sp, #84]	; 0x54
   1fd88:	ldrbeq	r3, [r3]
   1fd8c:	b	1fa90 <__assert_fail@plt+0xe7b8>
   1fd90:	ldr	r0, [sp, #92]	; 0x5c
   1fd94:	bl	111b8 <strlen@plt>
   1fd98:	cmp	r0, #1
   1fd9c:	bls	1fa84 <__assert_fail@plt+0xe7ac>
   1fda0:	ldr	r3, [sp, #212]	; 0xd4
   1fda4:	str	r7, [r3]
   1fda8:	b	1f56c <__assert_fail@plt+0xe294>
   1fdac:	ldr	r0, [sp, #84]	; 0x54
   1fdb0:	bl	111b8 <strlen@plt>
   1fdb4:	cmp	r0, #1
   1fdb8:	bls	1fa7c <__assert_fail@plt+0xe7a4>
   1fdbc:	mov	r7, r5
   1fdc0:	b	1fda0 <__assert_fail@plt+0xeac8>
   1fdc4:	mov	r7, #11
   1fdc8:	b	1fda0 <__assert_fail@plt+0xeac8>
   1fdcc:	and	r2, r1, #251	; 0xfb
   1fdd0:	cmp	r1, #28
   1fdd4:	cmpne	r2, #26
   1fdd8:	add	r3, r7, r3
   1fddc:	moveq	r2, #1
   1fde0:	movne	r2, #0
   1fde4:	str	r2, [sp, #20]
   1fde8:	str	r3, [r6, #40]	; 0x28
   1fdec:	beq	1fb58 <__assert_fail@plt+0xe880>
   1fdf0:	ldrb	r3, [sp, #96]	; 0x60
   1fdf4:	mov	r2, #1
   1fdf8:	str	r2, [sp, #20]
   1fdfc:	mov	r7, #0
   1fe00:	strb	r3, [sp, #92]	; 0x5c
   1fe04:	b	1fa48 <__assert_fail@plt+0xe770>
   1fe08:	ldr	r3, [r6, #40]	; 0x28
   1fe0c:	sub	r3, r3, r8
   1fe10:	str	r3, [r6, #40]	; 0x28
   1fe14:	mov	r3, #1
   1fe18:	strb	r3, [r4, #4]
   1fe1c:	b	1f2fc <__assert_fail@plt+0xe024>
   1fe20:	ldr	r5, [sp, #44]	; 0x2c
   1fe24:	ldr	r7, [sp, #32]
   1fe28:	mov	r2, r3
   1fe2c:	mov	r1, r5
   1fe30:	mov	r0, r7
   1fe34:	mov	r8, r3
   1fe38:	bl	19af8 <__assert_fail@plt+0x8820>
   1fe3c:	ldr	ip, [r5, #40]	; 0x28
   1fe40:	ldr	r3, [sp, #212]	; 0xd4
   1fe44:	str	r6, [sp]
   1fe48:	str	r3, [sp, #4]
   1fe4c:	mov	r2, r7
   1fe50:	mov	r3, r8
   1fe54:	mov	r1, r4
   1fe58:	add	r0, ip, r0
   1fe5c:	str	r0, [r5, #40]	; 0x28
   1fe60:	mov	r0, r5
   1fe64:	bl	1e094 <__assert_fail@plt+0xcdbc>
   1fe68:	str	r0, [sp, #36]	; 0x24
   1fe6c:	b	1e1ec <__assert_fail@plt+0xcf14>
   1fe70:	str	r2, [sp, #36]	; 0x24
   1fe74:	ldr	r2, [sp, #212]	; 0xd4
   1fe78:	mov	r3, #6
   1fe7c:	str	r3, [r2]
   1fe80:	b	1e1ec <__assert_fail@plt+0xcf14>
   1fe84:	mov	r8, r1
   1fe88:	ldr	r0, [sp, #32]
   1fe8c:	b	1ede0 <__assert_fail@plt+0xdb08>
   1fe90:	mov	r8, r6
   1fe94:	ldr	r0, [sp, #32]
   1fe98:	b	1ede0 <__assert_fail@plt+0xdb08>
   1fe9c:	ldr	r2, [sp, #40]	; 0x28
   1fea0:	mov	r1, r6
   1fea4:	add	r0, sp, #136	; 0x88
   1fea8:	bl	16ab4 <__assert_fail@plt+0x57dc>
   1feac:	ldrb	r3, [sp, #140]	; 0x8c
   1feb0:	cmp	r3, #21
   1feb4:	bne	1fce0 <__assert_fail@plt+0xea08>
   1feb8:	b	1f48c <__assert_fail@plt+0xe1b4>
   1febc:	ldr	r7, [r6, #56]	; 0x38
   1fec0:	ldrb	r3, [r4]
   1fec4:	cmp	r8, r7
   1fec8:	str	r3, [sp, #56]	; 0x38
   1fecc:	bge	1fbc8 <__assert_fail@plt+0xe8f0>
   1fed0:	add	r3, sp, #104	; 0x68
   1fed4:	str	r3, [sp, #20]
   1fed8:	mov	ip, #0
   1fedc:	b	1ff20 <__assert_fail@plt+0xec48>
   1fee0:	ldr	r3, [r6, #4]
   1fee4:	add	r1, r8, #1
   1fee8:	str	r1, [r6, #40]	; 0x28
   1feec:	ldrb	r3, [r3, r8]
   1fef0:	mov	r8, r1
   1fef4:	cmp	r7, r8
   1fef8:	ble	1fbc8 <__assert_fail@plt+0xe8f0>
   1fefc:	ldr	r1, [sp, #56]	; 0x38
   1ff00:	cmp	r1, r3
   1ff04:	beq	20198 <__assert_fail@plt+0xeec0>
   1ff08:	ldr	r1, [sp, #20]
   1ff0c:	add	ip, ip, #1
   1ff10:	cmp	ip, #32
   1ff14:	strb	r3, [r1], #1
   1ff18:	str	r1, [sp, #20]
   1ff1c:	beq	1fbc8 <__assert_fail@plt+0xe8f0>
   1ff20:	cmp	r2, #30
   1ff24:	bne	1fee0 <__assert_fail@plt+0xec08>
   1ff28:	ldrb	r3, [r6, #75]	; 0x4b
   1ff2c:	cmp	r3, #0
   1ff30:	beq	1fee0 <__assert_fail@plt+0xec08>
   1ff34:	ldrb	r3, [r6, #76]	; 0x4c
   1ff38:	cmp	r3, #0
   1ff3c:	beq	20284 <__assert_fail@plt+0xefac>
   1ff40:	ldr	lr, [r6, #28]
   1ff44:	cmp	lr, r8
   1ff48:	beq	20278 <__assert_fail@plt+0xefa0>
   1ff4c:	ldr	r1, [r6, #8]
   1ff50:	mov	r3, r8
   1ff54:	lsl	r0, r8, #2
   1ff58:	ldr	r1, [r1, r8, lsl #2]
   1ff5c:	cmn	r1, #1
   1ff60:	movne	r1, r8
   1ff64:	beq	20264 <__assert_fail@plt+0xef8c>
   1ff68:	ldr	r5, [r6, #12]
   1ff6c:	ldr	r3, [r6]
   1ff70:	ldr	r5, [r5, r0]
   1ff74:	ldr	r0, [r6, #24]
   1ff78:	add	r3, r3, r5
   1ff7c:	ldrb	r3, [r3, r0]
   1ff80:	tst	r3, #128	; 0x80
   1ff84:	bne	20250 <__assert_fail@plt+0xef78>
   1ff88:	ldr	r1, [sp, #52]	; 0x34
   1ff8c:	cmp	r1, #1
   1ff90:	add	r1, r8, #1
   1ff94:	beq	1ffd4 <__assert_fail@plt+0xecfc>
   1ff98:	cmp	lr, r1
   1ff9c:	ble	1ffd4 <__assert_fail@plt+0xecfc>
   1ffa0:	ldr	r5, [r6, #8]
   1ffa4:	add	r0, r5, r1, lsl #2
   1ffa8:	ldr	r5, [r5, r1, lsl #2]
   1ffac:	cmn	r5, #1
   1ffb0:	addeq	r8, r8, #2
   1ffb4:	bne	1ffd4 <__assert_fail@plt+0xecfc>
   1ffb8:	cmp	lr, r8
   1ffbc:	mov	r1, r8
   1ffc0:	beq	1ffd4 <__assert_fail@plt+0xecfc>
   1ffc4:	ldr	r5, [r0, #4]!
   1ffc8:	add	r8, r8, #1
   1ffcc:	cmn	r5, #1
   1ffd0:	beq	1ffb8 <__assert_fail@plt+0xece0>
   1ffd4:	str	r1, [r6, #40]	; 0x28
   1ffd8:	mov	r8, r1
   1ffdc:	b	1fef4 <__assert_fail@plt+0xec1c>
   1ffe0:	ldr	r6, [sp, #32]
   1ffe4:	mov	r3, #6
   1ffe8:	add	r5, sl, #56	; 0x38
   1ffec:	add	sl, sl, #64	; 0x40
   1fff0:	str	r3, [r6]
   1fff4:	mov	r2, r6
   1fff8:	mov	r1, sl
   1fffc:	mov	r0, r5
   20000:	bl	1a460 <__assert_fail@plt+0x9188>
   20004:	mov	r3, #9
   20008:	str	r3, [r6]
   2000c:	mov	r4, r0
   20010:	b	1f0f0 <__assert_fail@plt+0xde18>
   20014:	ldr	r2, [sp, #32]
   20018:	add	r1, sl, #64	; 0x40
   2001c:	add	r0, sl, #56	; 0x38
   20020:	bl	1a460 <__assert_fail@plt+0x9188>
   20024:	subs	r3, r0, #0
   20028:	str	r3, [sp, #36]	; 0x24
   2002c:	bne	1f158 <__assert_fail@plt+0xde80>
   20030:	b	1f070 <__assert_fail@plt+0xdd98>
   20034:	ldr	r0, [r6, #4]
   20038:	ldrb	r0, [r0, r3]
   2003c:	cmp	r0, #93	; 0x5d
   20040:	bne	1fbb0 <__assert_fail@plt+0xe8d8>
   20044:	add	r2, sp, #168	; 0xa8
   20048:	add	lr, r2, lr
   2004c:	add	r3, r3, #1
   20050:	mov	r2, #0
   20054:	cmp	r1, #28
   20058:	strb	r2, [lr, #-32]	; 0xffffffe0
   2005c:	str	r3, [r6, #40]	; 0x28
   20060:	beq	2012c <__assert_fail@plt+0xee54>
   20064:	cmp	r1, #30
   20068:	beq	1fcc4 <__assert_fail@plt+0xe9ec>
   2006c:	mov	r7, #3
   20070:	b	1fa48 <__assert_fail@plt+0xe770>
   20074:	ldrb	r2, [r6, #75]	; 0x4b
   20078:	cmp	r2, #0
   2007c:	beq	1fb84 <__assert_fail@plt+0xe8ac>
   20080:	ldrb	r2, [r6, #76]	; 0x4c
   20084:	cmp	r2, #0
   20088:	beq	20178 <__assert_fail@plt+0xeea0>
   2008c:	ldr	r7, [r6, #28]
   20090:	cmp	r7, r3
   20094:	beq	2016c <__assert_fail@plt+0xee94>
   20098:	ldr	r0, [r6, #8]
   2009c:	mov	r2, r3
   200a0:	lsl	ip, r3, #2
   200a4:	ldr	r0, [r0, r3, lsl #2]
   200a8:	cmn	r0, #1
   200ac:	movne	r0, r3
   200b0:	beq	20158 <__assert_fail@plt+0xee80>
   200b4:	ldr	r8, [r6, #12]
   200b8:	ldr	r2, [r6]
   200bc:	ldr	r8, [r8, ip]
   200c0:	ldr	ip, [r6, #24]
   200c4:	add	r2, r2, r8
   200c8:	ldrb	r2, [r2, ip]
   200cc:	tst	r2, #128	; 0x80
   200d0:	bne	20144 <__assert_fail@plt+0xee6c>
   200d4:	ldr	r0, [sp, #56]	; 0x38
   200d8:	cmp	r0, #1
   200dc:	add	r0, r3, #1
   200e0:	beq	20120 <__assert_fail@plt+0xee48>
   200e4:	cmp	r7, r0
   200e8:	ble	20120 <__assert_fail@plt+0xee48>
   200ec:	ldr	r8, [r6, #8]
   200f0:	add	ip, r8, r0, lsl #2
   200f4:	ldr	r8, [r8, r0, lsl #2]
   200f8:	cmn	r8, #1
   200fc:	addeq	r3, r3, #2
   20100:	bne	20120 <__assert_fail@plt+0xee48>
   20104:	cmp	r7, r3
   20108:	mov	r0, r3
   2010c:	beq	20120 <__assert_fail@plt+0xee48>
   20110:	ldr	r8, [ip, #4]!
   20114:	add	r3, r3, #1
   20118:	cmn	r8, #1
   2011c:	beq	20104 <__assert_fail@plt+0xee2c>
   20120:	str	r0, [r6, #40]	; 0x28
   20124:	mov	r3, r0
   20128:	b	1fb98 <__assert_fail@plt+0xe8c0>
   2012c:	ldr	r2, [sp, #40]	; 0x28
   20130:	ldr	r1, [sp, #44]	; 0x2c
   20134:	ldr	r0, [sp, #32]
   20138:	bl	16ab4 <__assert_fail@plt+0x57dc>
   2013c:	mov	r7, #11
   20140:	b	1fda0 <__assert_fail@plt+0xeac8>
   20144:	ldr	r2, [r6, #4]
   20148:	add	r3, r3, #1
   2014c:	str	r3, [r6, #40]	; 0x28
   20150:	ldrb	r2, [r2, r0]
   20154:	b	1fb98 <__assert_fail@plt+0xe8c0>
   20158:	ldr	r0, [r6, #4]
   2015c:	add	r3, r3, #1
   20160:	str	r3, [r6, #40]	; 0x28
   20164:	ldrb	r2, [r0, r2]
   20168:	b	1fb98 <__assert_fail@plt+0xe8c0>
   2016c:	mov	r0, r3
   20170:	lsl	ip, r3, #2
   20174:	b	200b4 <__assert_fail@plt+0xeddc>
   20178:	ldr	r2, [r6]
   2017c:	ldr	ip, [r6, #24]
   20180:	add	r0, r3, #1
   20184:	add	r2, r2, ip
   20188:	str	r0, [r6, #40]	; 0x28
   2018c:	ldrb	r2, [r2, r3]
   20190:	mov	r3, r0
   20194:	b	1fb98 <__assert_fail@plt+0xe8c0>
   20198:	ldr	r1, [r6, #4]
   2019c:	ldrb	r1, [r1, r8]
   201a0:	cmp	r1, #93	; 0x5d
   201a4:	bne	1ff08 <__assert_fail@plt+0xec30>
   201a8:	add	r3, sp, #168	; 0xa8
   201ac:	add	ip, r3, ip
   201b0:	add	r8, r8, #1
   201b4:	mov	r3, #0
   201b8:	cmp	r2, #28
   201bc:	strb	r3, [ip, #-64]	; 0xffffffc0
   201c0:	str	r8, [r6, #40]	; 0x28
   201c4:	beq	1fb08 <__assert_fail@plt+0xe830>
   201c8:	cmp	r2, #30
   201cc:	beq	201fc <__assert_fail@plt+0xef24>
   201d0:	cmp	r2, #26
   201d4:	beq	201f4 <__assert_fail@plt+0xef1c>
   201d8:	ldr	r2, [sp, #40]	; 0x28
   201dc:	mov	r1, r6
   201e0:	mov	r0, r4
   201e4:	bl	16ab4 <__assert_fail@plt+0x57dc>
   201e8:	mov	r5, #3
   201ec:	mov	r8, r0
   201f0:	b	1f2e8 <__assert_fail@plt+0xe010>
   201f4:	mov	r5, #3
   201f8:	b	1f2d4 <__assert_fail@plt+0xdffc>
   201fc:	ldr	r5, [sp, #40]	; 0x28
   20200:	mov	r1, r6
   20204:	mov	r2, r5
   20208:	mov	r0, r4
   2020c:	bl	16ab4 <__assert_fail@plt+0x57dc>
   20210:	ldr	r2, [sp, #84]	; 0x54
   20214:	add	r3, sp, #76	; 0x4c
   20218:	mov	r1, fp
   2021c:	mov	r8, r0
   20220:	ldr	r0, [r6, #64]	; 0x40
   20224:	str	r2, [sp, #4]
   20228:	str	r3, [sp]
   2022c:	str	r5, [sp, #8]
   20230:	add	r3, r9, #36	; 0x24
   20234:	add	r2, r9, #12
   20238:	bl	18ac4 <__assert_fail@plt+0x77ec>
   2023c:	ldr	r3, [sp, #212]	; 0xd4
   20240:	cmp	r0, #0
   20244:	str	r0, [r3]
   20248:	beq	1f330 <__assert_fail@plt+0xe058>
   2024c:	b	1f56c <__assert_fail@plt+0xe294>
   20250:	ldr	r3, [r6, #4]
   20254:	add	r8, r8, #1
   20258:	str	r8, [r6, #40]	; 0x28
   2025c:	ldrb	r3, [r3, r1]
   20260:	b	1fef4 <__assert_fail@plt+0xec1c>
   20264:	ldr	r1, [r6, #4]
   20268:	add	r8, r8, #1
   2026c:	str	r8, [r6, #40]	; 0x28
   20270:	ldrb	r3, [r1, r3]
   20274:	b	1fef4 <__assert_fail@plt+0xec1c>
   20278:	mov	r1, r8
   2027c:	lsl	r0, r8, #2
   20280:	b	1ff68 <__assert_fail@plt+0xec90>
   20284:	ldr	r3, [r6]
   20288:	ldr	r0, [r6, #24]
   2028c:	add	r1, r8, #1
   20290:	add	r3, r3, r0
   20294:	str	r1, [r6, #40]	; 0x28
   20298:	ldrb	r3, [r3, r8]
   2029c:	mov	r8, r1
   202a0:	b	1fef4 <__assert_fail@plt+0xec1c>
   202a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   202a8:	sub	sp, sp, #36	; 0x24
   202ac:	mov	sl, r3
   202b0:	ldr	r5, [sp, #76]	; 0x4c
   202b4:	ldr	r7, [sp, #72]	; 0x48
   202b8:	str	r5, [sp, #4]
   202bc:	str	r7, [sp]
   202c0:	ldr	ip, [r1]
   202c4:	mov	r8, r1
   202c8:	str	ip, [sp, #16]
   202cc:	mov	r9, r0
   202d0:	mov	r6, r2
   202d4:	bl	1e094 <__assert_fail@plt+0xcdbc>
   202d8:	ldr	r3, [r5]
   202dc:	adds	r3, r3, #0
   202e0:	movne	r3, #1
   202e4:	cmp	r0, #0
   202e8:	movne	r3, #0
   202ec:	cmp	r3, #0
   202f0:	bne	20474 <__assert_fail@plt+0xf19c>
   202f4:	mov	r4, r0
   202f8:	str	r3, [sp, #20]
   202fc:	str	r8, [sp, #12]
   20300:	ldrb	r3, [r6, #4]
   20304:	and	r2, r3, #247	; 0xf7
   20308:	cmp	r2, #2
   2030c:	beq	20388 <__assert_fail@plt+0xf0b0>
   20310:	subs	r3, r3, #9
   20314:	movne	r3, #1
   20318:	cmp	r7, #0
   2031c:	orreq	r3, r3, #1
   20320:	cmp	r3, #0
   20324:	beq	20388 <__assert_fail@plt+0xf0b0>
   20328:	mov	r3, sl
   2032c:	str	r5, [sp, #4]
   20330:	str	r7, [sp]
   20334:	mov	r2, r6
   20338:	ldr	r1, [sp, #12]
   2033c:	mov	r0, r9
   20340:	bl	1e094 <__assert_fail@plt+0xcdbc>
   20344:	ldr	r3, [r5]
   20348:	adds	r3, r3, #0
   2034c:	movne	r3, #1
   20350:	cmp	r0, #0
   20354:	movne	r3, #0
   20358:	cmp	r3, #0
   2035c:	mov	fp, r0
   20360:	bne	20484 <__assert_fail@plt+0xf1ac>
   20364:	cmp	r4, #0
   20368:	cmpne	r0, #0
   2036c:	bne	20394 <__assert_fail@plt+0xf0bc>
   20370:	ldrb	r3, [r6, #4]
   20374:	cmp	r4, #0
   20378:	moveq	r4, r0
   2037c:	and	r2, r3, #247	; 0xf7
   20380:	cmp	r2, #2
   20384:	bne	20310 <__assert_fail@plt+0xf038>
   20388:	mov	r0, r4
   2038c:	add	sp, sp, #36	; 0x24
   20390:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20394:	ldr	r1, [sp, #16]
   20398:	str	r3, [sp, #24]
   2039c:	str	r3, [sp, #28]
   203a0:	ldr	r2, [r1, #64]	; 0x40
   203a4:	cmp	r2, #31
   203a8:	beq	20428 <__assert_fail@plt+0xf150>
   203ac:	lsl	r3, r2, #5
   203b0:	add	lr, r2, #1
   203b4:	ldr	r2, [r1, #56]	; 0x38
   203b8:	add	ip, r3, #4
   203bc:	mov	r8, r1
   203c0:	mov	r1, #16
   203c4:	strb	r1, [sp, #28]
   203c8:	add	r1, sp, #24
   203cc:	add	r3, r2, r3
   203d0:	ldm	r1, {r0, r1}
   203d4:	str	lr, [r8, #64]	; 0x40
   203d8:	ldr	r8, [sp, #20]
   203dc:	add	lr, r3, #24
   203e0:	str	r8, [r3, #4]
   203e4:	str	r4, [r3, #8]
   203e8:	str	fp, [r3, #12]
   203ec:	stm	lr, {r0, r1}
   203f0:	ldrb	r1, [r3, #30]
   203f4:	add	r2, r2, ip
   203f8:	mvn	r0, #0
   203fc:	and	r1, r1, #243	; 0xf3
   20400:	cmp	r2, #0
   20404:	str	r8, [r3, #16]
   20408:	str	r8, [r3, #20]
   2040c:	str	r0, [r3, #32]
   20410:	strb	r1, [r3, #30]
   20414:	str	r2, [r4]
   20418:	str	r2, [fp]
   2041c:	beq	2045c <__assert_fail@plt+0xf184>
   20420:	mov	r4, r2
   20424:	b	20300 <__assert_fail@plt+0xf028>
   20428:	mov	r0, #996	; 0x3e4
   2042c:	bl	294e4 <__assert_fail@plt+0x1820c>
   20430:	subs	r2, r0, #0
   20434:	beq	2045c <__assert_fail@plt+0xf184>
   20438:	ldr	r0, [sp, #16]
   2043c:	mov	lr, #1
   20440:	mov	ip, #4
   20444:	ldr	r1, [r0, #56]	; 0x38
   20448:	ldr	r3, [sp, #20]
   2044c:	str	r1, [r2]
   20450:	mov	r8, r0
   20454:	str	r2, [r0, #56]	; 0x38
   20458:	b	203c0 <__assert_fail@plt+0xf0e8>
   2045c:	mov	r0, fp
   20460:	bl	1a50c <__assert_fail@plt+0x9234>
   20464:	mov	r0, r4
   20468:	bl	1a50c <__assert_fail@plt+0x9234>
   2046c:	mov	r3, #12
   20470:	str	r3, [r5]
   20474:	mov	r4, #0
   20478:	mov	r0, r4
   2047c:	add	sp, sp, #36	; 0x24
   20480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20484:	cmp	r4, #0
   20488:	beq	20474 <__assert_fail@plt+0xf19c>
   2048c:	mov	r0, r4
   20490:	bl	1a50c <__assert_fail@plt+0x9234>
   20494:	mov	r4, #0
   20498:	mov	r0, r4
   2049c:	add	sp, sp, #36	; 0x24
   204a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   204a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   204a8:	sub	sp, sp, #44	; 0x2c
   204ac:	ldr	r5, [r1]
   204b0:	ldr	sl, [sp, #84]	; 0x54
   204b4:	str	r1, [sp, #24]
   204b8:	ldr	ip, [r5, #84]	; 0x54
   204bc:	str	sl, [sp, #4]
   204c0:	str	ip, [sp, #20]
   204c4:	ldr	ip, [sp, #80]	; 0x50
   204c8:	mov	r9, r0
   204cc:	str	ip, [sp]
   204d0:	mov	r8, r2
   204d4:	str	r3, [sp, #16]
   204d8:	bl	202a4 <__assert_fail@plt+0xefcc>
   204dc:	ldr	r4, [sl]
   204e0:	adds	r4, r4, #0
   204e4:	movne	r4, #1
   204e8:	cmp	r0, #0
   204ec:	movne	r4, #0
   204f0:	cmp	r4, #0
   204f4:	bne	20654 <__assert_fail@plt+0xf37c>
   204f8:	ldr	r3, [sp, #16]
   204fc:	mov	r6, r0
   20500:	orr	r3, r3, #8388608	; 0x800000
   20504:	str	r3, [sp, #12]
   20508:	add	r7, sp, #32
   2050c:	b	20604 <__assert_fail@plt+0xf32c>
   20510:	ldr	r3, [sp, #80]	; 0x50
   20514:	clz	r3, r3
   20518:	lsr	r3, r3, #5
   2051c:	cmp	r2, #9
   20520:	orrne	r3, r3, #1
   20524:	cmp	r3, #0
   20528:	beq	2063c <__assert_fail@plt+0xf364>
   2052c:	ldr	r2, [sp, #20]
   20530:	ldr	r1, [sp, #80]	; 0x50
   20534:	ldr	fp, [r5, #84]	; 0x54
   20538:	ldr	r3, [sp, #16]
   2053c:	str	r2, [r5, #84]	; 0x54
   20540:	mov	r0, r9
   20544:	mov	r2, r8
   20548:	str	r1, [sp]
   2054c:	str	sl, [sp, #4]
   20550:	ldr	r1, [sp, #24]
   20554:	bl	202a4 <__assert_fail@plt+0xefcc>
   20558:	ldr	r3, [sl]
   2055c:	adds	r3, r3, #0
   20560:	movne	r3, #1
   20564:	cmp	r0, #0
   20568:	movne	r3, #0
   2056c:	cmp	r3, #0
   20570:	mov	r2, r0
   20574:	bne	20644 <__assert_fail@plt+0xf36c>
   20578:	ldr	r3, [r5, #84]	; 0x54
   2057c:	orr	fp, r3, fp
   20580:	str	fp, [r5, #84]	; 0x54
   20584:	ldr	lr, [r5, #64]	; 0x40
   20588:	str	r4, [r7]
   2058c:	cmp	lr, #31
   20590:	str	r4, [r7, #4]
   20594:	beq	2067c <__assert_fail@plt+0xf3a4>
   20598:	lsl	r3, lr, #5
   2059c:	ldr	ip, [r5, #56]	; 0x38
   205a0:	add	lr, lr, #1
   205a4:	add	fp, r3, #4
   205a8:	mov	r1, #10
   205ac:	add	r3, ip, r3
   205b0:	strb	r1, [sp, #36]	; 0x24
   205b4:	ldm	r7, {r0, r1}
   205b8:	str	lr, [r5, #64]	; 0x40
   205bc:	add	lr, r3, #24
   205c0:	stmib	r3, {r4, r6}
   205c4:	str	r2, [r3, #12]
   205c8:	stm	lr, {r0, r1}
   205cc:	ldrb	r1, [r3, #30]
   205d0:	cmp	r6, #0
   205d4:	add	ip, ip, fp
   205d8:	mvn	r0, #0
   205dc:	and	r1, r1, #243	; 0xf3
   205e0:	str	r4, [r3, #16]
   205e4:	str	r4, [r3, #20]
   205e8:	strb	r1, [r3, #30]
   205ec:	str	r0, [r3, #32]
   205f0:	strne	ip, [r6]
   205f4:	cmp	r2, #0
   205f8:	strne	ip, [r2]
   205fc:	subs	r6, ip, #0
   20600:	beq	20664 <__assert_fail@plt+0xf38c>
   20604:	ldrb	r3, [r8, #4]
   20608:	cmp	r3, #10
   2060c:	bne	20658 <__assert_fail@plt+0xf380>
   20610:	ldr	r2, [sp, #12]
   20614:	mov	r1, r9
   20618:	mov	r0, r8
   2061c:	bl	19af8 <__assert_fail@plt+0x8820>
   20620:	ldrb	r2, [r8, #4]
   20624:	ldr	r3, [r9, #40]	; 0x28
   20628:	and	r1, r2, #247	; 0xf7
   2062c:	cmp	r1, #2
   20630:	add	r0, r3, r0
   20634:	str	r0, [r9, #40]	; 0x28
   20638:	bne	20510 <__assert_fail@plt+0xf238>
   2063c:	mov	r2, r4
   20640:	b	20584 <__assert_fail@plt+0xf2ac>
   20644:	cmp	r6, #0
   20648:	beq	20654 <__assert_fail@plt+0xf37c>
   2064c:	mov	r0, r6
   20650:	bl	1a50c <__assert_fail@plt+0x9234>
   20654:	mov	r6, #0
   20658:	mov	r0, r6
   2065c:	add	sp, sp, #44	; 0x2c
   20660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20664:	mov	r3, #12
   20668:	mov	r6, #0
   2066c:	mov	r0, r6
   20670:	str	r3, [sl]
   20674:	add	sp, sp, #44	; 0x2c
   20678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2067c:	mov	r0, #996	; 0x3e4
   20680:	str	r2, [sp, #28]
   20684:	bl	294e4 <__assert_fail@plt+0x1820c>
   20688:	subs	ip, r0, #0
   2068c:	beq	20664 <__assert_fail@plt+0xf38c>
   20690:	ldr	r1, [r5, #56]	; 0x38
   20694:	mov	lr, #1
   20698:	str	r1, [ip]
   2069c:	mov	fp, #4
   206a0:	mov	r3, r4
   206a4:	str	ip, [r5, #56]	; 0x38
   206a8:	ldr	r2, [sp, #28]
   206ac:	b	205a8 <__assert_fail@plt+0xf2d0>
   206b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   206b4:	mov	ip, #0
   206b8:	ldr	r9, [r2, #4]
   206bc:	sub	sp, sp, #28
   206c0:	cmp	r9, ip
   206c4:	str	r0, [sp]
   206c8:	str	ip, [r0]
   206cc:	beq	20a24 <__assert_fail@plt+0xf74c>
   206d0:	add	fp, r3, r9
   206d4:	ble	206f0 <__assert_fail@plt+0xf418>
   206d8:	ldr	ip, [r2, #8]
   206dc:	add	r4, ip, r9, lsl #2
   206e0:	ldr	r0, [ip], #4
   206e4:	cmp	r4, ip
   206e8:	add	fp, fp, r0
   206ec:	bne	206e0 <__assert_fail@plt+0xf408>
   206f0:	ldr	ip, [r1, #68]	; 0x44
   206f4:	ldr	lr, [r1, #32]
   206f8:	and	ip, ip, fp
   206fc:	add	ip, ip, ip, lsl #1
   20700:	lsl	ip, ip, #2
   20704:	add	r4, lr, ip
   20708:	ldr	r5, [lr, ip]
   2070c:	cmp	r5, #0
   20710:	ble	207b0 <__assert_fail@plt+0xf4d8>
   20714:	sub	ip, r9, #1
   20718:	ldr	lr, [r4, #8]
   2071c:	lsl	r0, ip, #2
   20720:	sub	lr, lr, #4
   20724:	str	r0, [sp, #4]
   20728:	mov	ip, #0
   2072c:	b	2073c <__assert_fail@plt+0xf464>
   20730:	add	ip, ip, #1
   20734:	cmp	ip, r5
   20738:	beq	207b0 <__assert_fail@plt+0xf4d8>
   2073c:	ldr	r4, [lr, #4]!
   20740:	ldr	r0, [r4]
   20744:	cmp	r0, fp
   20748:	bne	20730 <__assert_fail@plt+0xf458>
   2074c:	ldrb	r0, [r4, #52]	; 0x34
   20750:	and	r0, r0, #15
   20754:	cmp	r3, r0
   20758:	bne	20730 <__assert_fail@plt+0xf458>
   2075c:	ldr	r7, [r4, #40]	; 0x28
   20760:	cmp	r7, #0
   20764:	beq	20730 <__assert_fail@plt+0xf458>
   20768:	ldr	r0, [r7, #4]
   2076c:	cmp	r9, r0
   20770:	bne	20730 <__assert_fail@plt+0xf458>
   20774:	ldr	r0, [sp, #4]
   20778:	mov	r6, r9
   2077c:	b	2079c <__assert_fail@plt+0xf4c4>
   20780:	ldr	sl, [r7, #8]
   20784:	ldr	r8, [r2, #8]
   20788:	ldr	sl, [sl, r0]
   2078c:	ldr	r8, [r8, r0]
   20790:	sub	r0, r0, #4
   20794:	cmp	sl, r8
   20798:	bne	20730 <__assert_fail@plt+0xf458>
   2079c:	subs	r6, r6, #1
   207a0:	bpl	20780 <__assert_fail@plt+0xf4a8>
   207a4:	mov	r0, r4
   207a8:	add	sp, sp, #28
   207ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   207b0:	mov	r7, r3
   207b4:	ldr	r3, [sp]
   207b8:	mov	r9, r1
   207bc:	mov	r0, #56	; 0x38
   207c0:	mov	r1, #1
   207c4:	str	r3, [sp, #12]
   207c8:	mov	r8, r2
   207cc:	bl	2949c <__assert_fail@plt+0x181c4>
   207d0:	subs	r4, r0, #0
   207d4:	beq	20a18 <__assert_fail@plt+0xf740>
   207d8:	ldr	r0, [r8, #4]
   207dc:	add	r3, r4, #4
   207e0:	cmp	r0, #0
   207e4:	str	r3, [sp, #16]
   207e8:	str	r0, [r4, #8]
   207ec:	ble	20a9c <__assert_fail@plt+0xf7c4>
   207f0:	str	r0, [r4, #4]
   207f4:	lsl	r0, r0, #2
   207f8:	bl	294e4 <__assert_fail@plt+0x1820c>
   207fc:	cmp	r0, #0
   20800:	str	r0, [r4, #12]
   20804:	beq	20acc <__assert_fail@plt+0xf7f4>
   20808:	ldr	sl, [r8, #4]
   2080c:	ldr	r1, [r8, #8]
   20810:	lsl	r2, sl, #2
   20814:	bl	11068 <memcpy@plt>
   20818:	ldrb	r2, [r4, #52]	; 0x34
   2081c:	and	r3, r7, #15
   20820:	cmp	sl, #0
   20824:	bic	r2, r2, #15
   20828:	orr	r3, r3, r2
   2082c:	add	r2, r4, #4
   20830:	str	r2, [r4, #40]	; 0x28
   20834:	strb	r3, [r4, #52]	; 0x34
   20838:	ble	209b0 <__assert_fail@plt+0xf6d8>
   2083c:	and	r2, r7, #2
   20840:	str	r2, [sp]
   20844:	and	r2, r7, #4
   20848:	mov	r0, #0
   2084c:	and	r3, r7, #1
   20850:	stmib	sp, {r2, fp}
   20854:	mov	ip, sl
   20858:	ldr	r6, [pc, #676]	; 20b04 <__assert_fail@plt+0xf82c>
   2085c:	mov	r5, r0
   20860:	mov	fp, r3
   20864:	add	sl, r4, #4
   20868:	b	208cc <__assert_fail@plt+0xf5f4>
   2086c:	cmp	fp, #0
   20870:	beq	208a4 <__assert_fail@plt+0xf5cc>
   20874:	tst	r7, #2
   20878:	bne	208a4 <__assert_fail@plt+0xf5cc>
   2087c:	tst	r7, #16
   20880:	beq	20890 <__assert_fail@plt+0xf5b8>
   20884:	ldr	r3, [sp]
   20888:	cmp	r3, #0
   2088c:	beq	208a4 <__assert_fail@plt+0xf5cc>
   20890:	tst	r7, #64	; 0x40
   20894:	beq	208bc <__assert_fail@plt+0xf5e4>
   20898:	ldr	r3, [sp, #4]
   2089c:	cmp	r3, #0
   208a0:	bne	208bc <__assert_fail@plt+0xf5e4>
   208a4:	subs	r2, r5, r0
   208a8:	bmi	208b8 <__assert_fail@plt+0xf5e0>
   208ac:	ldr	r1, [r4, #8]
   208b0:	cmp	r2, r1
   208b4:	blt	20978 <__assert_fail@plt+0xf6a0>
   208b8:	add	r0, r0, #1
   208bc:	ldr	ip, [r8, #4]
   208c0:	add	r5, r5, #1
   208c4:	cmp	r5, ip
   208c8:	bge	209ac <__assert_fail@plt+0xf6d4>
   208cc:	ldr	r1, [r8, #8]
   208d0:	ldr	r2, [r9]
   208d4:	ldr	r1, [r1, r5, lsl #2]
   208d8:	add	r2, r2, r1, lsl #3
   208dc:	ldr	r7, [r2, #4]
   208e0:	ldrb	r1, [r2, #4]
   208e4:	ands	r7, r6, r7, lsr #8
   208e8:	moveq	lr, #1
   208ec:	movne	lr, #0
   208f0:	cmp	r1, #1
   208f4:	movne	lr, #0
   208f8:	andeq	lr, lr, #1
   208fc:	cmp	lr, #0
   20900:	bne	208c0 <__assert_fail@plt+0xf5e8>
   20904:	ldrb	r2, [r2, #6]
   20908:	ldrb	lr, [r4, #52]	; 0x34
   2090c:	cmp	r1, #2
   20910:	lsr	r2, r2, #4
   20914:	orr	r2, r2, lr, lsr #5
   20918:	and	r2, r2, #1
   2091c:	bic	lr, lr, #32
   20920:	orr	r2, lr, r2, lsl #5
   20924:	strb	r2, [r4, #52]	; 0x34
   20928:	uxtbeq	r2, r2
   2092c:	orreq	r2, r2, #16
   20930:	strbeq	r2, [r4, #52]	; 0x34
   20934:	beq	20948 <__assert_fail@plt+0xf670>
   20938:	cmp	r1, #4
   2093c:	ldrbeq	r2, [r4, #52]	; 0x34
   20940:	orreq	r2, r2, #64	; 0x40
   20944:	strbeq	r2, [r4, #52]	; 0x34
   20948:	cmp	r7, #0
   2094c:	beq	208c0 <__assert_fail@plt+0xf5e8>
   20950:	ldr	r2, [r4, #40]	; 0x28
   20954:	cmp	sl, r2
   20958:	beq	20a34 <__assert_fail@plt+0xf75c>
   2095c:	tst	r7, #1
   20960:	bne	2086c <__assert_fail@plt+0xf594>
   20964:	tst	r7, #2
   20968:	beq	2087c <__assert_fail@plt+0xf5a4>
   2096c:	cmp	fp, #0
   20970:	beq	2087c <__assert_fail@plt+0xf5a4>
   20974:	b	208a4 <__assert_fail@plt+0xf5cc>
   20978:	sub	r1, r1, #1
   2097c:	cmp	r2, r1
   20980:	str	r1, [r4, #8]
   20984:	bge	208b8 <__assert_fail@plt+0xf5e0>
   20988:	ldr	r1, [r4, #12]
   2098c:	add	r1, r1, r2, lsl #2
   20990:	ldr	r3, [r1, #4]
   20994:	add	r2, r2, #1
   20998:	str	r3, [r1], #4
   2099c:	ldr	r3, [r4, #8]
   209a0:	cmp	r2, r3
   209a4:	blt	20990 <__assert_fail@plt+0xf6b8>
   209a8:	b	208b8 <__assert_fail@plt+0xf5e0>
   209ac:	ldr	fp, [sp, #8]
   209b0:	mov	r2, fp
   209b4:	mov	r0, r9
   209b8:	mov	r1, r4
   209bc:	bl	16c34 <__assert_fail@plt+0x595c>
   209c0:	cmp	r0, #0
   209c4:	beq	207a4 <__assert_fail@plt+0xf4cc>
   209c8:	ldr	r0, [r4, #24]
   209cc:	bl	296b0 <__assert_fail@plt+0x183d8>
   209d0:	ldr	r0, [r4, #36]	; 0x24
   209d4:	bl	296b0 <__assert_fail@plt+0x183d8>
   209d8:	ldr	r3, [r4, #40]	; 0x28
   209dc:	ldr	r2, [sp, #16]
   209e0:	cmp	r2, r3
   209e4:	beq	209f8 <__assert_fail@plt+0xf720>
   209e8:	ldr	r0, [r3, #8]
   209ec:	bl	296b0 <__assert_fail@plt+0x183d8>
   209f0:	ldr	r0, [r4, #40]	; 0x28
   209f4:	bl	296b0 <__assert_fail@plt+0x183d8>
   209f8:	ldr	r0, [r4, #12]
   209fc:	bl	296b0 <__assert_fail@plt+0x183d8>
   20a00:	ldr	r0, [r4, #48]	; 0x30
   20a04:	bl	296b0 <__assert_fail@plt+0x183d8>
   20a08:	ldr	r0, [r4, #44]	; 0x2c
   20a0c:	bl	296b0 <__assert_fail@plt+0x183d8>
   20a10:	mov	r0, r4
   20a14:	bl	296b0 <__assert_fail@plt+0x183d8>
   20a18:	ldr	r2, [sp, #12]
   20a1c:	mov	r3, #12
   20a20:	str	r3, [r2]
   20a24:	mov	r4, #0
   20a28:	mov	r0, r4
   20a2c:	add	sp, sp, #28
   20a30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a34:	mov	r0, #12
   20a38:	bl	294e4 <__assert_fail@plt+0x1820c>
   20a3c:	subs	r1, r0, #0
   20a40:	beq	209c8 <__assert_fail@plt+0xf6f0>
   20a44:	ldr	r0, [r8, #4]
   20a48:	str	r1, [r4, #40]	; 0x28
   20a4c:	cmp	r0, #0
   20a50:	str	r0, [r1, #4]
   20a54:	ble	20ae0 <__assert_fail@plt+0xf808>
   20a58:	str	r0, [r1]
   20a5c:	lsl	r0, r0, #2
   20a60:	str	r1, [sp, #20]
   20a64:	bl	294e4 <__assert_fail@plt+0x1820c>
   20a68:	ldr	r1, [sp, #20]
   20a6c:	cmp	r0, #0
   20a70:	str	r0, [r1, #8]
   20a74:	beq	20af4 <__assert_fail@plt+0xf81c>
   20a78:	ldr	r2, [r8, #4]
   20a7c:	ldr	r1, [r8, #8]
   20a80:	lsl	r2, r2, #2
   20a84:	bl	11068 <memcpy@plt>
   20a88:	ldrb	r2, [r4, #52]	; 0x34
   20a8c:	mov	r0, #0
   20a90:	orr	r2, r2, #128	; 0x80
   20a94:	strb	r2, [r4, #52]	; 0x34
   20a98:	b	2095c <__assert_fail@plt+0xf684>
   20a9c:	add	r1, r4, #4
   20aa0:	mov	r3, #0
   20aa4:	str	r3, [r4, #4]
   20aa8:	str	r3, [r1, #4]
   20aac:	str	r3, [r1, #8]
   20ab0:	ldrb	r2, [r4, #52]	; 0x34
   20ab4:	and	r3, r7, #15
   20ab8:	str	r1, [r4, #40]	; 0x28
   20abc:	bic	r2, r2, #15
   20ac0:	orr	r3, r3, r2
   20ac4:	strb	r3, [r4, #52]	; 0x34
   20ac8:	b	209b0 <__assert_fail@plt+0xf6d8>
   20acc:	str	r0, [r4, #8]
   20ad0:	str	r0, [r4, #4]
   20ad4:	mov	r0, r4
   20ad8:	bl	296b0 <__assert_fail@plt+0x183d8>
   20adc:	b	20a18 <__assert_fail@plt+0xf740>
   20ae0:	mov	r3, #0
   20ae4:	str	r3, [r1]
   20ae8:	str	r3, [r1, #4]
   20aec:	str	r3, [r1, #8]
   20af0:	b	20a88 <__assert_fail@plt+0xf7b0>
   20af4:	mov	sl, r1
   20af8:	str	r0, [sl, #4]
   20afc:	str	r0, [sl]
   20b00:	b	209c8 <__assert_fail@plt+0xf6f0>
   20b04:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   20b08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b0c:	sub	sp, sp, #14464	; 0x3880
   20b10:	sub	sp, sp, #36	; 0x24
   20b14:	mov	r4, #0
   20b18:	mov	r5, r1
   20b1c:	add	r9, sp, #2208	; 0x8a0
   20b20:	str	r1, [sp, #72]	; 0x48
   20b24:	str	r0, [sp, #104]	; 0x68
   20b28:	str	r4, [r1, #44]	; 0x2c
   20b2c:	str	r4, [r1, #48]	; 0x30
   20b30:	mov	r0, r9
   20b34:	mov	r1, r4
   20b38:	mov	r2, #32
   20b3c:	bl	111f4 <memset@plt>
   20b40:	ldr	r1, [r5, #8]
   20b44:	cmp	r1, r4
   20b48:	ble	21a24 <__assert_fail@plt+0x1074c>
   20b4c:	str	r4, [sp, #20]
   20b50:	str	r4, [sp, #96]	; 0x60
   20b54:	ldr	r3, [sp, #72]	; 0x48
   20b58:	ldr	r0, [sp, #96]	; 0x60
   20b5c:	ldr	r2, [r3, #12]
   20b60:	ldr	r3, [sp, #104]	; 0x68
   20b64:	lsl	ip, r0, #2
   20b68:	ldr	r2, [r2, r0, lsl #2]
   20b6c:	ldr	r3, [r3]
   20b70:	str	ip, [sp, #92]	; 0x5c
   20b74:	add	r0, r3, r2, lsl #3
   20b78:	str	r0, [sp, #100]	; 0x64
   20b7c:	ldrb	ip, [r0, #4]
   20b80:	ldr	r4, [r0, #4]
   20b84:	ldr	r0, [pc, #3984]	; 21b1c <__assert_fail@plt+0x10844>
   20b88:	cmp	ip, #1
   20b8c:	str	ip, [sp, #28]
   20b90:	and	r4, r0, r4, lsr #8
   20b94:	beq	20d18 <__assert_fail@plt+0xfa40>
   20b98:	cmp	ip, #3
   20b9c:	beq	21340 <__assert_fail@plt+0x10068>
   20ba0:	cmp	ip, #5
   20ba4:	beq	21498 <__assert_fail@plt+0x101c0>
   20ba8:	cmp	ip, #7
   20bac:	beq	2188c <__assert_fail@plt+0x105b4>
   20bb0:	ldr	r3, [sp, #96]	; 0x60
   20bb4:	add	r3, r3, #1
   20bb8:	cmp	r3, r1
   20bbc:	str	r3, [sp, #96]	; 0x60
   20bc0:	blt	20b54 <__assert_fail@plt+0xf87c>
   20bc4:	ldr	r3, [sp, #20]
   20bc8:	cmp	r3, #0
   20bcc:	ble	21a20 <__assert_fail@plt+0x10748>
   20bd0:	add	r3, r3, #1
   20bd4:	mov	r4, #0
   20bd8:	lsl	r0, r3, #2
   20bdc:	str	r3, [r9, #-2092]	; 0xfffff7d4
   20be0:	str	r4, [r9, #-2088]	; 0xfffff7d8
   20be4:	bl	294e4 <__assert_fail@plt+0x1820c>
   20be8:	cmp	r0, r4
   20bec:	str	r0, [r9, #-2084]	; 0xfffff7dc
   20bf0:	beq	218e4 <__assert_fail@plt+0x1060c>
   20bf4:	add	r3, sp, #3232	; 0xca0
   20bf8:	str	r3, [sp, #12]
   20bfc:	mov	r6, r3
   20c00:	add	r3, sp, #6272	; 0x1880
   20c04:	add	r3, r3, #32
   20c08:	mov	r7, r3
   20c0c:	str	r3, [sp, #28]
   20c10:	add	r0, sp, #128	; 0x80
   20c14:	add	r3, sp, #156	; 0x9c
   20c18:	mov	r2, #32
   20c1c:	mov	r1, r4
   20c20:	str	r3, [sp, #4]
   20c24:	str	r4, [sp, #24]
   20c28:	str	r4, [r9, #-2096]	; 0xfffff7d0
   20c2c:	bl	111f4 <memset@plt>
   20c30:	add	r3, sp, #160	; 0xa0
   20c34:	ldr	fp, [sp, #104]	; 0x68
   20c38:	sub	r3, r3, #48	; 0x30
   20c3c:	mov	sl, r4
   20c40:	add	r8, sp, #116	; 0x74
   20c44:	mov	r5, r7
   20c48:	str	r3, [sp, #16]
   20c4c:	add	r3, sp, #1184	; 0x4a0
   20c50:	str	r3, [sp]
   20c54:	str	r7, [sp, #32]
   20c58:	ldr	r0, [r6, #4]
   20c5c:	mov	r3, #0
   20c60:	cmp	r0, r3
   20c64:	str	r3, [r9, #-2088]	; 0xfffff7d8
   20c68:	movgt	r5, #0
   20c6c:	strgt	r7, [sp, #8]
   20c70:	bgt	20ca0 <__assert_fail@plt+0xf9c8>
   20c74:	b	21628 <__assert_fail@plt+0x10350>
   20c78:	mov	r1, r7
   20c7c:	mov	r0, r8
   20c80:	bl	17bc4 <__assert_fail@plt+0x68ec>
   20c84:	cmp	r0, #0
   20c88:	str	r0, [r9, #-2096]	; 0xfffff7d0
   20c8c:	bne	2185c <__assert_fail@plt+0x10584>
   20c90:	ldr	r0, [r6, #4]
   20c94:	add	r5, r5, #1
   20c98:	cmp	r5, r0
   20c9c:	bge	21624 <__assert_fail@plt+0x1034c>
   20ca0:	ldr	r2, [r6, #8]
   20ca4:	ldr	r3, [fp, #12]
   20ca8:	ldr	r2, [r2, r5, lsl #2]
   20cac:	ldr	r3, [r3, r2, lsl #2]
   20cb0:	cmn	r3, #1
   20cb4:	beq	20c94 <__assert_fail@plt+0xf9bc>
   20cb8:	add	r3, r3, r3, lsl #1
   20cbc:	ldr	r2, [fp, #24]
   20cc0:	adds	r7, r2, r3, lsl #2
   20cc4:	streq	r7, [r9, #-2096]	; 0xfffff7d0
   20cc8:	beq	20c94 <__assert_fail@plt+0xf9bc>
   20ccc:	ldr	r2, [r7, #4]
   20cd0:	cmp	r2, #0
   20cd4:	streq	r2, [r9, #-2096]	; 0xfffff7d0
   20cd8:	beq	20c94 <__assert_fail@plt+0xf9bc>
   20cdc:	ldr	r1, [r9, #-2088]	; 0xfffff7d8
   20ce0:	ldr	r4, [r9, #-2092]	; 0xfffff7d4
   20ce4:	add	r1, r1, r2, lsl #1
   20ce8:	cmp	r4, r1
   20cec:	bge	20c78 <__assert_fail@plt+0xf9a0>
   20cf0:	add	r2, r2, r4
   20cf4:	ldr	r0, [r9, #-2084]	; 0xfffff7dc
   20cf8:	lsl	r1, r2, #3
   20cfc:	lsl	r4, r2, #1
   20d00:	bl	29510 <__assert_fail@plt+0x18238>
   20d04:	cmp	r0, #0
   20d08:	beq	218c0 <__assert_fail@plt+0x105e8>
   20d0c:	str	r0, [r9, #-2084]	; 0xfffff7dc
   20d10:	str	r4, [r9, #-2092]	; 0xfffff7d4
   20d14:	b	20c78 <__assert_fail@plt+0xf9a0>
   20d18:	ldrb	r3, [r3, r2, lsl #3]
   20d1c:	and	r1, r3, #31
   20d20:	asr	r3, r3, #5
   20d24:	ldr	r2, [r9, r3, lsl #2]
   20d28:	orr	r2, r2, ip, lsl r1
   20d2c:	str	r2, [r9, r3, lsl #2]
   20d30:	cmp	r4, #0
   20d34:	beq	20f88 <__assert_fail@plt+0xfcb0>
   20d38:	tst	r4, #32
   20d3c:	bne	21558 <__assert_fail@plt+0x10280>
   20d40:	tst	r4, #128	; 0x80
   20d44:	bne	213d8 <__assert_fail@plt+0x10100>
   20d48:	tst	r4, #4
   20d4c:	beq	20e78 <__assert_fail@plt+0xfba0>
   20d50:	ldr	r3, [sp, #28]
   20d54:	cmp	r3, #1
   20d58:	beq	218d0 <__assert_fail@plt+0x105f8>
   20d5c:	ldr	r3, [sp, #104]	; 0x68
   20d60:	ldr	r3, [r3, #92]	; 0x5c
   20d64:	cmp	r3, #1
   20d68:	ble	21968 <__assert_fail@plt+0x10690>
   20d6c:	ldr	r6, [sp, #104]	; 0x68
   20d70:	ldr	r3, [r6, #60]	; 0x3c
   20d74:	ldr	r0, [r6, #96]	; 0x60
   20d78:	ldr	r2, [r6, #100]	; 0x64
   20d7c:	ldr	lr, [r3]
   20d80:	ldr	r1, [r3, #4]
   20d84:	mvn	lr, lr
   20d88:	orr	lr, lr, r0
   20d8c:	ldr	r0, [r9]
   20d90:	mvn	r1, r1
   20d94:	and	lr, lr, r0
   20d98:	ldr	r0, [r9, #4]
   20d9c:	orr	r1, r1, r2
   20da0:	ldr	r2, [r3, #8]
   20da4:	and	r1, r1, r0
   20da8:	ldr	ip, [r3, #12]
   20dac:	ldr	r0, [r6, #104]	; 0x68
   20db0:	mvn	r2, r2
   20db4:	orr	r2, r2, r0
   20db8:	mvn	r0, ip
   20dbc:	ldr	ip, [r9, #8]
   20dc0:	str	lr, [r9]
   20dc4:	and	r2, r2, ip
   20dc8:	ldr	ip, [r6, #108]	; 0x6c
   20dcc:	orr	lr, lr, r1
   20dd0:	str	r1, [r9, #4]
   20dd4:	ldr	r1, [r9, #12]
   20dd8:	orr	r0, r0, ip
   20ddc:	ldr	ip, [r3, #16]
   20de0:	and	r1, r1, r0
   20de4:	orr	lr, lr, r2
   20de8:	ldr	r0, [r3, #20]
   20dec:	str	r2, [r9, #8]
   20df0:	ldr	r2, [r6, #112]	; 0x70
   20df4:	mvn	ip, ip
   20df8:	orr	ip, ip, r2
   20dfc:	mvn	r2, r0
   20e00:	ldr	r0, [r9, #16]
   20e04:	orr	lr, lr, r1
   20e08:	and	ip, ip, r0
   20e0c:	ldr	r0, [r6, #116]	; 0x74
   20e10:	str	r1, [r9, #12]
   20e14:	orr	r2, r2, r0
   20e18:	ldr	r0, [r3, #24]
   20e1c:	ldr	r3, [r3, #28]
   20e20:	mvn	r0, r0
   20e24:	mvn	r5, r3
   20e28:	ldr	r3, [r9, #20]
   20e2c:	ldr	r1, [r9, #28]
   20e30:	and	r2, r2, r3
   20e34:	ldr	r3, [r6, #120]	; 0x78
   20e38:	orr	lr, lr, ip
   20e3c:	orr	r0, r0, r3
   20e40:	ldr	r3, [r9, #24]
   20e44:	orr	lr, lr, r2
   20e48:	and	r0, r0, r3
   20e4c:	ldr	r3, [r6, #124]	; 0x7c
   20e50:	orr	lr, lr, r0
   20e54:	orr	r3, r5, r3
   20e58:	and	r3, r3, r1
   20e5c:	str	r2, [r9, #20]
   20e60:	orr	r2, lr, r3
   20e64:	str	ip, [r9, #16]
   20e68:	str	r0, [r9, #24]
   20e6c:	str	r3, [r9, #28]
   20e70:	cmp	r2, #0
   20e74:	beq	213e8 <__assert_fail@plt+0x10110>
   20e78:	tst	r4, #8
   20e7c:	beq	20f88 <__assert_fail@plt+0xfcb0>
   20e80:	ldr	r3, [sp, #28]
   20e84:	cmp	r3, #1
   20e88:	beq	213c8 <__assert_fail@plt+0x100f0>
   20e8c:	ldr	r3, [sp, #104]	; 0x68
   20e90:	ldr	r4, [sp, #104]	; 0x68
   20e94:	ldr	r3, [r3, #92]	; 0x5c
   20e98:	cmp	r3, #1
   20e9c:	ble	21584 <__assert_fail@plt+0x102ac>
   20ea0:	ldr	r1, [r4, #60]	; 0x3c
   20ea4:	ldr	r0, [r4, #96]	; 0x60
   20ea8:	ldr	ip, [r4, #100]	; 0x64
   20eac:	ldr	r3, [r1]
   20eb0:	ldr	r2, [r1, #4]
   20eb4:	and	r3, r3, r0
   20eb8:	and	r2, r2, ip
   20ebc:	ldr	r0, [r9]
   20ec0:	ldr	ip, [r9, #4]
   20ec4:	bic	r3, r0, r3
   20ec8:	bic	r2, ip, r2
   20ecc:	ldr	r0, [r1, #8]
   20ed0:	ldr	ip, [r4, #104]	; 0x68
   20ed4:	ldr	lr, [r1, #12]
   20ed8:	and	r0, r0, ip
   20edc:	ldr	ip, [r9, #8]
   20ee0:	str	r3, [r9]
   20ee4:	bic	r0, ip, r0
   20ee8:	ldr	ip, [r4, #108]	; 0x6c
   20eec:	orr	r3, r3, r2
   20ef0:	and	ip, ip, lr
   20ef4:	ldr	lr, [r9, #12]
   20ef8:	str	r2, [r9, #4]
   20efc:	bic	ip, lr, ip
   20f00:	ldr	r2, [r4, #112]	; 0x70
   20f04:	ldr	lr, [r1, #16]
   20f08:	orr	r3, r3, r0
   20f0c:	and	r2, r2, lr
   20f10:	ldr	lr, [r9, #16]
   20f14:	str	r0, [r9, #8]
   20f18:	bic	r2, lr, r2
   20f1c:	ldr	r0, [r4, #116]	; 0x74
   20f20:	ldr	lr, [r1, #20]
   20f24:	orr	r3, r3, ip
   20f28:	and	r0, r0, lr
   20f2c:	ldr	lr, [r9, #20]
   20f30:	str	ip, [r9, #12]
   20f34:	bic	r0, lr, r0
   20f38:	ldr	ip, [r1, #28]
   20f3c:	ldr	lr, [r1, #24]
   20f40:	ldr	r1, [r4, #120]	; 0x78
   20f44:	orr	r3, r3, r2
   20f48:	str	r2, [r9, #16]
   20f4c:	ldr	r2, [r4, #124]	; 0x7c
   20f50:	and	r1, r1, lr
   20f54:	ldr	lr, [r9, #24]
   20f58:	and	ip, ip, r2
   20f5c:	ldr	r2, [r9, #28]
   20f60:	bic	r1, lr, r1
   20f64:	orr	r3, r3, r0
   20f68:	bic	r2, r2, ip
   20f6c:	orr	r3, r3, r1
   20f70:	orr	r3, r3, r2
   20f74:	str	r0, [r9, #20]
   20f78:	str	r1, [r9, #24]
   20f7c:	str	r2, [r9, #28]
   20f80:	cmp	r3, #0
   20f84:	beq	213e8 <__assert_fail@plt+0x10110>
   20f88:	ldr	r3, [sp, #20]
   20f8c:	cmp	r3, #0
   20f90:	movle	r3, #0
   20f94:	strle	r3, [sp, #4]
   20f98:	ble	213f4 <__assert_fail@plt+0x1011c>
   20f9c:	add	r3, sp, #6272	; 0x1880
   20fa0:	add	r3, r3, #32
   20fa4:	str	r3, [sp, #108]	; 0x6c
   20fa8:	mov	r4, r3
   20fac:	add	r3, sp, #3232	; 0xca0
   20fb0:	str	r3, [sp]
   20fb4:	mov	r3, #0
   20fb8:	str	r3, [sp, #4]
   20fbc:	b	21298 <__assert_fail@plt+0xffc0>
   20fc0:	ldr	sl, [r9]
   20fc4:	ldr	fp, [r4]
   20fc8:	ldr	r7, [r9, #4]
   20fcc:	ldr	r8, [r4, #4]
   20fd0:	ldr	r1, [r9, #12]
   20fd4:	ldr	r5, [r9, #8]
   20fd8:	ldr	r6, [r4, #8]
   20fdc:	and	r2, r7, r8
   20fe0:	and	r3, sl, fp
   20fe4:	mov	r0, r1
   20fe8:	ldr	lr, [r4, #12]
   20fec:	and	r1, r5, r6
   20ff0:	str	r3, [sp, #44]	; 0x2c
   20ff4:	orr	r3, r3, r2
   20ff8:	ldr	ip, [r4, #16]
   20ffc:	str	r1, [sp, #52]	; 0x34
   21000:	orr	r3, r3, r1
   21004:	ldr	r1, [r9, #20]
   21008:	str	r0, [sp, #32]
   2100c:	and	r0, r0, lr
   21010:	str	ip, [sp, #8]
   21014:	mov	ip, r0
   21018:	mov	r0, r1
   2101c:	ldr	r1, [r4, #20]
   21020:	str	r0, [sp, #40]	; 0x28
   21024:	and	r0, r0, r1
   21028:	str	r0, [sp, #24]
   2102c:	ldr	r0, [r9, #28]
   21030:	str	r2, [sp, #48]	; 0x30
   21034:	str	ip, [sp, #56]	; 0x38
   21038:	ldr	r2, [r9, #16]
   2103c:	orr	r3, r3, ip
   21040:	ldr	ip, [sp, #8]
   21044:	str	r0, [sp, #16]
   21048:	ldr	r0, [r4, #28]
   2104c:	and	ip, r2, ip
   21050:	str	r2, [sp, #36]	; 0x24
   21054:	ldr	r2, [r9, #24]
   21058:	str	ip, [sp, #60]	; 0x3c
   2105c:	orr	r3, r3, ip
   21060:	mov	ip, r0
   21064:	ldr	r0, [sp, #24]
   21068:	str	r2, [sp, #12]
   2106c:	orr	r3, r3, r0
   21070:	ldr	r2, [r4, #24]
   21074:	ldr	r0, [sp, #12]
   21078:	and	r0, r0, r2
   2107c:	orr	r3, r3, r0
   21080:	str	r0, [sp, #64]	; 0x40
   21084:	ldr	r0, [sp, #16]
   21088:	and	r0, r0, ip
   2108c:	orrs	r3, r3, r0
   21090:	str	r0, [sp, #68]	; 0x44
   21094:	beq	21270 <__assert_fail@plt+0xff98>
   21098:	bic	r0, r8, r7
   2109c:	bic	r3, fp, sl
   210a0:	bic	r7, r7, r8
   210a4:	str	r3, [sp, #76]	; 0x4c
   210a8:	bic	r8, r6, r5
   210ac:	orr	r3, r3, r0
   210b0:	bic	sl, sl, fp
   210b4:	orr	r3, r3, r8
   210b8:	str	r8, [sp, #84]	; 0x54
   210bc:	ldr	r8, [sp, #32]
   210c0:	bic	r6, r5, r6
   210c4:	orr	r5, sl, r7
   210c8:	bic	fp, lr, r8
   210cc:	orr	r5, r5, r6
   210d0:	bic	lr, r8, lr
   210d4:	str	lr, [sp, #32]
   210d8:	orr	r5, r5, lr
   210dc:	str	r0, [sp, #80]	; 0x50
   210e0:	ldr	lr, [sp, #36]	; 0x24
   210e4:	ldr	r0, [sp, #8]
   210e8:	orr	r3, r3, fp
   210ec:	bic	r8, r0, lr
   210f0:	bic	r0, lr, r0
   210f4:	ldr	lr, [sp, #40]	; 0x28
   210f8:	orr	r3, r3, r8
   210fc:	str	r8, [sp, #8]
   21100:	ldr	r8, [sp, #12]
   21104:	str	fp, [sp, #88]	; 0x58
   21108:	str	sl, [r9]
   2110c:	bic	fp, r1, lr
   21110:	ldr	sl, [sp, #16]
   21114:	bic	r1, lr, r1
   21118:	orr	r3, r3, fp
   2111c:	bic	lr, r2, r8
   21120:	orr	r3, r3, lr
   21124:	bic	r2, r8, r2
   21128:	orr	r5, r5, r0
   2112c:	bic	r8, ip, sl
   21130:	orr	r5, r5, r1
   21134:	orrs	r3, r3, r8
   21138:	bic	r3, sl, ip
   2113c:	ldr	ip, [sp, #32]
   21140:	orr	r5, r5, r2
   21144:	str	r7, [r9, #4]
   21148:	str	r6, [r9, #8]
   2114c:	str	ip, [r9, #12]
   21150:	str	r0, [r9, #16]
   21154:	str	r1, [r9, #20]
   21158:	str	r2, [r9, #24]
   2115c:	orr	r5, r5, r3
   21160:	str	r3, [r9, #28]
   21164:	beq	21248 <__assert_fail@plt+0xff70>
   21168:	ldr	sl, [sp, #20]
   2116c:	ldr	r3, [sp, #108]	; 0x6c
   21170:	ldr	r6, [sp, #76]	; 0x4c
   21174:	ldr	r1, [sp]
   21178:	str	r6, [r3, sl, lsl #5]
   2117c:	add	r3, r3, sl, lsl #5
   21180:	ldr	r6, [sp, #80]	; 0x50
   21184:	add	ip, sl, sl, lsl #1
   21188:	str	r6, [r3, #4]
   2118c:	ldr	r6, [sp, #84]	; 0x54
   21190:	add	r7, sp, #3232	; 0xca0
   21194:	str	r6, [r3, #8]
   21198:	ldr	r6, [sp, #88]	; 0x58
   2119c:	str	fp, [r3, #20]
   211a0:	str	r6, [r3, #12]
   211a4:	ldr	r6, [sp, #8]
   211a8:	str	lr, [r3, #24]
   211ac:	str	r6, [r3, #16]
   211b0:	str	r8, [r3, #28]
   211b4:	ldr	r2, [r1, #4]
   211b8:	ldr	r3, [sp, #44]	; 0x2c
   211bc:	ldr	r0, [sp, #56]	; 0x38
   211c0:	add	r7, r7, ip, lsl #2
   211c4:	str	r3, [r4]
   211c8:	str	r2, [r7, #4]
   211cc:	ldr	r3, [sp, #48]	; 0x30
   211d0:	ldr	r1, [r1, #4]
   211d4:	str	r0, [r4, #12]
   211d8:	ldr	r0, [sp, #24]
   211dc:	str	r3, [r4, #4]
   211e0:	str	r0, [r4, #20]
   211e4:	ldr	r3, [sp, #60]	; 0x3c
   211e8:	ldr	r0, [sp, #64]	; 0x40
   211ec:	cmp	r1, #0
   211f0:	ldr	r1, [sp, #52]	; 0x34
   211f4:	str	r3, [r4, #16]
   211f8:	str	r1, [r4, #8]
   211fc:	str	r0, [r4, #24]
   21200:	ldr	r0, [sp, #68]	; 0x44
   21204:	str	r0, [r4, #28]
   21208:	ble	212e4 <__assert_fail@plt+0x1000c>
   2120c:	add	r3, sp, #3232	; 0xca0
   21210:	lsl	r0, r2, #2
   21214:	str	r2, [r3, ip, lsl #2]
   21218:	bl	294e4 <__assert_fail@plt+0x1820c>
   2121c:	cmp	r0, #0
   21220:	str	r0, [r7, #8]
   21224:	beq	21300 <__assert_fail@plt+0x10028>
   21228:	ldr	r3, [sp]
   2122c:	ldr	r2, [r3, #4]
   21230:	ldr	r1, [r3, #8]
   21234:	lsl	r2, r2, #2
   21238:	bl	11068 <memcpy@plt>
   2123c:	ldr	r3, [sp, #20]
   21240:	add	r3, r3, #1
   21244:	str	r3, [sp, #20]
   21248:	ldr	r3, [sp, #72]	; 0x48
   2124c:	ldr	r2, [sp, #92]	; 0x5c
   21250:	ldr	r0, [sp]
   21254:	ldr	r3, [r3, #12]
   21258:	ldr	r1, [r3, r2]
   2125c:	bl	17640 <__assert_fail@plt+0x6368>
   21260:	cmp	r0, #0
   21264:	beq	2130c <__assert_fail@plt+0x10034>
   21268:	cmp	r5, #0
   2126c:	beq	213f4 <__assert_fail@plt+0x1011c>
   21270:	ldr	r3, [sp, #4]
   21274:	ldr	r2, [sp, #20]
   21278:	add	r3, r3, #1
   2127c:	str	r3, [sp, #4]
   21280:	cmp	r3, r2
   21284:	ldr	r3, [sp]
   21288:	add	r4, r4, #32
   2128c:	add	r3, r3, #12
   21290:	str	r3, [sp]
   21294:	bge	213f4 <__assert_fail@plt+0x1011c>
   21298:	ldr	r3, [sp, #28]
   2129c:	cmp	r3, #1
   212a0:	bne	20fc0 <__assert_fail@plt+0xfce8>
   212a4:	ldr	r3, [sp, #100]	; 0x64
   212a8:	ldrb	r1, [r3]
   212ac:	ldr	r3, [sp, #4]
   212b0:	and	r2, r1, #31
   212b4:	asr	r1, r1, #5
   212b8:	lsl	r3, r3, #5
   212bc:	add	r3, r3, r1, lsl #2
   212c0:	add	r1, sp, #14464	; 0x3880
   212c4:	add	r1, r1, #32
   212c8:	add	r3, r1, r3
   212cc:	sub	r3, r3, #8192	; 0x2000
   212d0:	ldr	r3, [r3]
   212d4:	lsr	r2, r3, r2
   212d8:	tst	r2, #1
   212dc:	beq	21270 <__assert_fail@plt+0xff98>
   212e0:	b	20fc0 <__assert_fail@plt+0xfce8>
   212e4:	add	r3, sp, #3232	; 0xca0
   212e8:	mov	r2, #0
   212ec:	str	r2, [r3, ip, lsl #2]
   212f0:	str	r2, [r7, #4]
   212f4:	str	r2, [r7, #8]
   212f8:	mov	r3, sl
   212fc:	b	21240 <__assert_fail@plt+0xff68>
   21300:	mov	r2, r7
   21304:	str	r0, [r2, #4]
   21308:	str	r0, [r2]
   2130c:	ldr	r6, [sp, #20]
   21310:	add	r4, sp, #3232	; 0xca0
   21314:	mov	r5, #0
   21318:	ldr	r0, [r4, #8]
   2131c:	add	r5, r5, #1
   21320:	bl	296b0 <__assert_fail@plt+0x183d8>
   21324:	cmp	r5, r6
   21328:	add	r4, r4, #12
   2132c:	bne	21318 <__assert_fail@plt+0x10040>
   21330:	mov	r0, #0
   21334:	add	sp, sp, #14464	; 0x3880
   21338:	add	sp, sp, #36	; 0x24
   2133c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21340:	ldr	r3, [r3, r2, lsl #3]
   21344:	ldr	ip, [r9]
   21348:	ldr	r0, [r9, #4]
   2134c:	ldr	r1, [r3, #4]
   21350:	ldr	r2, [r3]
   21354:	orr	r0, r0, r1
   21358:	orr	r2, ip, r2
   2135c:	ldr	r1, [r3, #8]
   21360:	ldr	ip, [r9, #8]
   21364:	str	r2, [r9]
   21368:	orr	r1, ip, r1
   2136c:	ldr	r2, [r3, #12]
   21370:	ldr	ip, [r9, #12]
   21374:	str	r0, [r9, #4]
   21378:	orr	r2, ip, r2
   2137c:	ldr	r0, [r3, #16]
   21380:	ldr	ip, [r9, #16]
   21384:	str	r1, [r9, #8]
   21388:	orr	r0, ip, r0
   2138c:	ldr	r1, [r3, #20]
   21390:	ldr	ip, [r9, #20]
   21394:	str	r2, [r9, #12]
   21398:	orr	r1, ip, r1
   2139c:	ldr	r2, [r3, #24]
   213a0:	ldr	ip, [r3, #28]
   213a4:	ldr	r3, [r9, #24]
   213a8:	str	r0, [r9, #16]
   213ac:	orr	r2, r3, r2
   213b0:	ldr	r3, [r9, #28]
   213b4:	str	r1, [r9, #20]
   213b8:	orr	r3, r3, ip
   213bc:	str	r2, [r9, #24]
   213c0:	str	r3, [r9, #28]
   213c4:	b	20d30 <__assert_fail@plt+0xfa58>
   213c8:	ldr	r3, [sp, #100]	; 0x64
   213cc:	ldrb	r3, [r3, #6]
   213d0:	tst	r3, #64	; 0x40
   213d4:	beq	20e8c <__assert_fail@plt+0xfbb4>
   213d8:	mov	r2, #32
   213dc:	mov	r1, #0
   213e0:	mov	r0, r9
   213e4:	bl	111f4 <memset@plt>
   213e8:	ldr	r3, [sp, #72]	; 0x48
   213ec:	ldr	r1, [r3, #8]
   213f0:	b	20bb0 <__assert_fail@plt+0xf8d8>
   213f4:	ldr	r3, [sp, #20]
   213f8:	ldr	r2, [sp, #4]
   213fc:	cmp	r3, r2
   21400:	bne	213e8 <__assert_fail@plt+0x10110>
   21404:	mov	lr, r9
   21408:	mov	r4, r3
   2140c:	add	r5, sp, #14464	; 0x3880
   21410:	ldm	lr!, {r0, r1, r2, r3}
   21414:	add	r5, r5, #32
   21418:	add	ip, r5, r4, lsl #5
   2141c:	sub	ip, ip, #8192	; 0x2000
   21420:	add	r5, r4, r4, lsl #1
   21424:	stmia	ip!, {r0, r1, r2, r3}
   21428:	add	r3, sp, #3232	; 0xca0
   2142c:	add	r4, r3, r5, lsl #2
   21430:	ldm	lr, {r0, r1, r2, r3}
   21434:	ldr	lr, [sp, #72]	; 0x48
   21438:	stm	ip, {r0, r1, r2, r3}
   2143c:	mov	r2, #1
   21440:	ldr	r3, [sp, #92]	; 0x5c
   21444:	ldr	lr, [lr, #12]
   21448:	mov	r0, #4
   2144c:	ldr	r6, [lr, r3]
   21450:	add	r3, sp, #3232	; 0xca0
   21454:	str	r2, [r3, r5, lsl #2]
   21458:	str	r2, [r4, #4]
   2145c:	bl	294e4 <__assert_fail@plt+0x1820c>
   21460:	cmp	r0, #0
   21464:	str	r0, [r4, #8]
   21468:	beq	21a44 <__assert_fail@plt+0x1076c>
   2146c:	mov	r1, #0
   21470:	str	r6, [r0]
   21474:	mov	r2, #32
   21478:	mov	r0, r9
   2147c:	bl	111f4 <memset@plt>
   21480:	ldr	r3, [sp, #72]	; 0x48
   21484:	ldr	r1, [r3, #8]
   21488:	ldr	r3, [sp, #20]
   2148c:	add	r3, r3, #1
   21490:	str	r3, [sp, #20]
   21494:	b	20bb0 <__assert_fail@plt+0xf8d8>
   21498:	ldr	r2, [sp, #104]	; 0x68
   2149c:	ldr	r3, [r2, #92]	; 0x5c
   214a0:	cmp	r3, #1
   214a4:	ble	21a0c <__assert_fail@plt+0x10734>
   214a8:	ldr	r2, [r2, #60]	; 0x3c
   214ac:	ldr	ip, [r9]
   214b0:	ldr	r1, [r9, #4]
   214b4:	ldm	r2, {r0, r3}
   214b8:	orr	r0, ip, r0
   214bc:	orr	r3, r1, r3
   214c0:	ldr	ip, [r9, #8]
   214c4:	ldr	r1, [r2, #8]
   214c8:	str	r0, [r9]
   214cc:	orr	r1, ip, r1
   214d0:	ldr	r0, [r2, #12]
   214d4:	ldr	ip, [r9, #12]
   214d8:	str	r3, [r9, #4]
   214dc:	orr	r0, ip, r0
   214e0:	ldr	r3, [r2, #16]
   214e4:	ldr	ip, [r9, #16]
   214e8:	str	r1, [r9, #8]
   214ec:	orr	r3, ip, r3
   214f0:	ldr	r1, [r2, #20]
   214f4:	ldr	ip, [r9, #20]
   214f8:	str	r0, [r9, #12]
   214fc:	orr	r1, ip, r1
   21500:	ldr	r0, [r2, #28]
   21504:	ldr	ip, [r2, #24]
   21508:	str	r3, [r9, #16]
   2150c:	ldr	r2, [r9, #24]
   21510:	ldr	r3, [r9, #28]
   21514:	orr	r2, r2, ip
   21518:	orr	r3, r3, r0
   2151c:	str	r1, [r9, #20]
   21520:	str	r2, [r9, #24]
   21524:	str	r3, [r9, #28]
   21528:	ldr	r3, [sp, #104]	; 0x68
   2152c:	ldr	r3, [r3, #128]	; 0x80
   21530:	tst	r3, #64	; 0x40
   21534:	ldreq	r2, [r9]
   21538:	biceq	r2, r2, #1024	; 0x400
   2153c:	streq	r2, [r9]
   21540:	tst	r3, #128	; 0x80
   21544:	beq	20d30 <__assert_fail@plt+0xfa58>
   21548:	ldr	r3, [r9]
   2154c:	bic	r3, r3, #1
   21550:	str	r3, [r9]
   21554:	b	20d30 <__assert_fail@plt+0xfa58>
   21558:	ldr	r5, [r9]
   2155c:	mov	r2, #32
   21560:	and	r5, r5, #1024	; 0x400
   21564:	mov	r1, #0
   21568:	mov	r0, r9
   2156c:	bl	111f4 <memset@plt>
   21570:	cmp	r5, #0
   21574:	beq	213e8 <__assert_fail@plt+0x10110>
   21578:	mov	r3, #1024	; 0x400
   2157c:	str	r3, [r9]
   21580:	b	20d40 <__assert_fail@plt+0xfa68>
   21584:	ldr	r2, [r4, #96]	; 0x60
   21588:	ldr	r3, [r9]
   2158c:	ldr	r1, [r4, #100]	; 0x64
   21590:	ldr	r0, [r9, #4]
   21594:	bic	r3, r3, r2
   21598:	bic	r0, r0, r1
   2159c:	ldr	r2, [r4, #104]	; 0x68
   215a0:	ldr	r1, [r9, #8]
   215a4:	ldr	ip, [r9, #12]
   215a8:	bic	r1, r1, r2
   215ac:	ldr	r2, [r4, #108]	; 0x6c
   215b0:	ldr	lr, [r9, #16]
   215b4:	bic	ip, ip, r2
   215b8:	ldr	r2, [r4, #112]	; 0x70
   215bc:	str	r3, [r9]
   215c0:	bic	r2, lr, r2
   215c4:	orr	r3, r3, r0
   215c8:	ldr	lr, [r9, #20]
   215cc:	str	r0, [r9, #4]
   215d0:	ldr	r0, [r4, #116]	; 0x74
   215d4:	orr	r3, r3, r1
   215d8:	bic	r0, lr, r0
   215dc:	orr	r3, r3, ip
   215e0:	ldr	lr, [r9, #24]
   215e4:	str	r1, [r9, #8]
   215e8:	ldr	r1, [r4, #120]	; 0x78
   215ec:	orr	r3, r3, r2
   215f0:	str	ip, [r9, #12]
   215f4:	str	r2, [r9, #16]
   215f8:	ldr	ip, [r4, #124]	; 0x7c
   215fc:	ldr	r2, [r9, #28]
   21600:	bic	r1, lr, r1
   21604:	orr	r3, r3, r0
   21608:	bic	r2, r2, ip
   2160c:	orr	r3, r3, r1
   21610:	str	r0, [r9, #20]
   21614:	str	r1, [r9, #24]
   21618:	orr	r3, r3, r2
   2161c:	str	r2, [r9, #28]
   21620:	b	20f80 <__assert_fail@plt+0xfca8>
   21624:	ldr	r7, [sp, #8]
   21628:	mov	r3, #0
   2162c:	mov	r2, r8
   21630:	mov	r1, fp
   21634:	ldr	r0, [sp, #16]
   21638:	bl	206b0 <__assert_fail@plt+0xf3d8>
   2163c:	ldr	r3, [sp, #4]
   21640:	cmp	r0, #0
   21644:	str	r0, [r3, #4]!
   21648:	mov	r4, r0
   2164c:	str	r3, [sp, #4]
   21650:	beq	21850 <__assert_fail@plt+0x10578>
   21654:	ldrsb	r3, [r4, #52]	; 0x34
   21658:	cmp	r3, #0
   2165c:	blt	218f8 <__assert_fail@plt+0x10620>
   21660:	ldr	r3, [sp]
   21664:	str	r4, [r9, sl, lsl #2]
   21668:	str	r4, [r3]
   2166c:	ldr	r3, [r7, #4]
   21670:	ldr	r0, [r9, #-2076]	; 0xfffff7e4
   21674:	ldr	r1, [sp, #20]
   21678:	add	sl, sl, #1
   2167c:	ldr	r2, [r7]
   21680:	orr	r0, r0, r3
   21684:	ldr	r4, [r9, #-2080]	; 0xfffff7e0
   21688:	ldr	r3, [r7, #8]
   2168c:	cmp	sl, r1
   21690:	ldr	r1, [r9, #-2072]	; 0xfffff7e8
   21694:	orr	r4, r4, r2
   21698:	orr	r1, r1, r3
   2169c:	ldr	r2, [r9, #-2068]	; 0xfffff7ec
   216a0:	ldr	r3, [r7, #12]
   216a4:	str	r0, [r9, #-2076]	; 0xfffff7e4
   216a8:	orr	r2, r2, r3
   216ac:	ldr	r3, [sp]
   216b0:	ldr	r0, [r9, #-2060]	; 0xfffff7f4
   216b4:	add	r3, r3, #4
   216b8:	str	r1, [r9, #-2072]	; 0xfffff7e8
   216bc:	ldr	r1, [r7, #20]
   216c0:	ldr	ip, [r9, #-2064]	; 0xfffff7f0
   216c4:	str	r3, [sp]
   216c8:	ldr	r3, [r7, #16]
   216cc:	orr	r1, r0, r1
   216d0:	str	r2, [r9, #-2068]	; 0xfffff7ec
   216d4:	ldr	r0, [r7, #24]
   216d8:	ldr	r2, [r9, #-2056]	; 0xfffff7f8
   216dc:	orr	r3, ip, r3
   216e0:	orr	r2, r2, r0
   216e4:	str	r3, [r9, #-2064]	; 0xfffff7f0
   216e8:	ldr	r0, [r7, #28]
   216ec:	ldr	r3, [r9, #-2052]	; 0xfffff7fc
   216f0:	add	r6, r6, #12
   216f4:	orr	r3, r3, r0
   216f8:	str	r4, [r9, #-2080]	; 0xfffff7e0
   216fc:	str	r1, [r9, #-2060]	; 0xfffff7f4
   21700:	str	r2, [r9, #-2056]	; 0xfffff7f8
   21704:	str	r3, [r9, #-2052]	; 0xfffff7fc
   21708:	add	r7, r7, #32
   2170c:	bne	20c58 <__assert_fail@plt+0xf980>
   21710:	ldr	r3, [sp, #24]
   21714:	ldr	r5, [sp, #32]
   21718:	cmp	r3, #0
   2171c:	bne	21a74 <__assert_fail@plt+0x1079c>
   21720:	mov	r1, #256	; 0x100
   21724:	mov	r0, #4
   21728:	bl	2949c <__assert_fail@plt+0x181c4>
   2172c:	ldr	r3, [sp, #72]	; 0x48
   21730:	cmp	r0, #0
   21734:	str	r0, [r3, #44]	; 0x2c
   21738:	beq	2185c <__assert_fail@plt+0x10584>
   2173c:	ldr	r3, [sp, #104]	; 0x68
   21740:	add	r8, sp, #128	; 0x80
   21744:	add	r6, r3, #96	; 0x60
   21748:	mov	r7, r0
   2174c:	add	fp, r0, #1024	; 0x400
   21750:	ldr	r1, [r8], #4
   21754:	cmp	r1, #0
   21758:	movne	ip, r7
   2175c:	movne	r2, #1
   21760:	bne	21778 <__assert_fail@plt+0x104a0>
   21764:	b	217c4 <__assert_fail@plt+0x104ec>
   21768:	lsrs	r1, r1, #1
   2176c:	lsl	r2, r2, #1
   21770:	add	ip, ip, #4
   21774:	beq	217c4 <__assert_fail@plt+0x104ec>
   21778:	tst	r1, #1
   2177c:	beq	21768 <__assert_fail@plt+0x10490>
   21780:	ldr	r3, [r5]
   21784:	ands	r3, r2, r3
   21788:	bne	21a6c <__assert_fail@plt+0x10794>
   2178c:	add	r3, r3, #1
   21790:	ldr	lr, [r5, r3, lsl #5]
   21794:	tst	r2, lr
   21798:	beq	2178c <__assert_fail@plt+0x104b4>
   2179c:	ldr	lr, [r6]
   217a0:	add	r3, r9, r3, lsl #2
   217a4:	tst	r2, lr
   217a8:	add	ip, ip, #4
   217ac:	ldrne	r3, [r3, #-1024]	; 0xfffffc00
   217b0:	ldreq	r3, [r3, #-2048]	; 0xfffff800
   217b4:	lsrs	r1, r1, #1
   217b8:	str	r3, [ip, #-4]
   217bc:	lsl	r2, r2, #1
   217c0:	bne	21778 <__assert_fail@plt+0x104a0>
   217c4:	add	r7, r7, #128	; 0x80
   217c8:	cmp	fp, r7
   217cc:	add	r6, r6, #4
   217d0:	add	r5, r5, #4
   217d4:	bne	21750 <__assert_fail@plt+0x10478>
   217d8:	tst	r4, #1024	; 0x400
   217dc:	beq	21818 <__assert_fail@plt+0x10540>
   217e0:	mov	r3, #0
   217e4:	ldr	r1, [sp, #28]
   217e8:	b	217f8 <__assert_fail@plt+0x10520>
   217ec:	add	r3, r3, #1
   217f0:	cmp	sl, r3
   217f4:	beq	21818 <__assert_fail@plt+0x10540>
   217f8:	ldr	r2, [r1, r3, lsl #5]
   217fc:	tst	r2, #1024	; 0x400
   21800:	beq	217ec <__assert_fail@plt+0x10514>
   21804:	ldr	r2, [sp, #24]
   21808:	ldr	r3, [r9, r3, lsl #2]
   2180c:	cmp	r2, #0
   21810:	str	r3, [r0, #40]	; 0x28
   21814:	strne	r3, [r0, #1064]	; 0x428
   21818:	ldr	r0, [r9, #-2084]	; 0xfffff7dc
   2181c:	add	r9, sl, sl, lsl #1
   21820:	bl	296b0 <__assert_fail@plt+0x183d8>
   21824:	ldr	r5, [sp, #12]
   21828:	mov	r4, #0
   2182c:	lsl	r9, r9, #2
   21830:	add	r3, r5, r4
   21834:	add	r4, r4, #12
   21838:	ldr	r0, [r3, #8]
   2183c:	bl	296b0 <__assert_fail@plt+0x183d8>
   21840:	cmp	r4, r9
   21844:	bne	21830 <__assert_fail@plt+0x10558>
   21848:	mov	r0, #1
   2184c:	b	21334 <__assert_fail@plt+0x1005c>
   21850:	ldr	r3, [r9, #-2096]	; 0xfffff7d0
   21854:	cmp	r3, #0
   21858:	beq	21654 <__assert_fail@plt+0x1037c>
   2185c:	ldr	r0, [r9, #-2084]	; 0xfffff7dc
   21860:	bl	296b0 <__assert_fail@plt+0x183d8>
   21864:	ldr	r5, [sp, #12]
   21868:	ldr	r6, [sp, #20]
   2186c:	mov	r4, #0
   21870:	ldr	r0, [r5, #8]
   21874:	add	r4, r4, #1
   21878:	bl	296b0 <__assert_fail@plt+0x183d8>
   2187c:	cmp	r4, r6
   21880:	add	r5, r5, #12
   21884:	bne	21870 <__assert_fail@plt+0x10598>
   21888:	b	21330 <__assert_fail@plt+0x10058>
   2188c:	ldr	r3, [sp, #104]	; 0x68
   21890:	ldr	r2, [r3, #128]	; 0x80
   21894:	mvn	r3, #0
   21898:	tst	r2, #64	; 0x40
   2189c:	str	r3, [r9]
   218a0:	str	r3, [r9, #4]
   218a4:	str	r3, [r9, #8]
   218a8:	str	r3, [r9, #12]
   218ac:	mvneq	r3, #1024	; 0x400
   218b0:	streq	r3, [r9]
   218b4:	tst	r2, #128	; 0x80
   218b8:	beq	20d30 <__assert_fail@plt+0xfa58>
   218bc:	b	21548 <__assert_fail@plt+0x10270>
   218c0:	mov	r3, #12
   218c4:	str	r3, [r9, #-2096]	; 0xfffff7d0
   218c8:	ldr	r0, [r9, #-2084]	; 0xfffff7dc
   218cc:	b	21860 <__assert_fail@plt+0x10588>
   218d0:	ldr	r3, [sp, #100]	; 0x64
   218d4:	ldrb	r3, [r3, #6]
   218d8:	tst	r3, #64	; 0x40
   218dc:	bne	20d5c <__assert_fail@plt+0xfa84>
   218e0:	b	213d8 <__assert_fail@plt+0x10100>
   218e4:	mov	r3, #12
   218e8:	str	r3, [r9, #-2096]	; 0xfffff7d0
   218ec:	add	r3, sp, #3232	; 0xca0
   218f0:	str	r3, [sp, #12]
   218f4:	b	21860 <__assert_fail@plt+0x10588>
   218f8:	mov	r3, #1
   218fc:	mov	r2, r8
   21900:	mov	r1, fp
   21904:	ldr	r0, [sp, #16]
   21908:	bl	206b0 <__assert_fail@plt+0xf3d8>
   2190c:	ldr	r3, [sp]
   21910:	cmp	r0, #0
   21914:	str	r0, [r3]
   21918:	beq	21a5c <__assert_fail@plt+0x10784>
   2191c:	cmp	r4, r0
   21920:	beq	21938 <__assert_fail@plt+0x10660>
   21924:	ldr	r3, [fp, #92]	; 0x5c
   21928:	ldr	r2, [sp, #24]
   2192c:	cmp	r3, #1
   21930:	movgt	r2, #1
   21934:	str	r2, [sp, #24]
   21938:	mov	r3, #2
   2193c:	mov	r2, r8
   21940:	mov	r1, fp
   21944:	ldr	r0, [sp, #16]
   21948:	bl	206b0 <__assert_fail@plt+0xf3d8>
   2194c:	cmp	r0, #0
   21950:	str	r0, [r9, sl, lsl #2]
   21954:	bne	2166c <__assert_fail@plt+0x10394>
   21958:	ldr	r3, [r9, #-2096]	; 0xfffff7d0
   2195c:	cmp	r3, #0
   21960:	beq	2166c <__assert_fail@plt+0x10394>
   21964:	b	2185c <__assert_fail@plt+0x10584>
   21968:	ldr	r5, [sp, #104]	; 0x68
   2196c:	ldr	ip, [r9, #4]
   21970:	ldr	r1, [r9]
   21974:	ldr	r2, [r5, #100]	; 0x64
   21978:	ldr	r0, [r9, #8]
   2197c:	and	ip, ip, r2
   21980:	ldr	r3, [r5, #96]	; 0x60
   21984:	ldr	r2, [r5, #104]	; 0x68
   21988:	and	r3, r3, r1
   2198c:	and	r0, r0, r2
   21990:	ldr	r1, [r9, #12]
   21994:	ldr	r2, [r5, #108]	; 0x6c
   21998:	ldr	lr, [r9, #16]
   2199c:	and	r1, r1, r2
   219a0:	ldr	r2, [r5, #112]	; 0x70
   219a4:	str	r3, [r9]
   219a8:	and	r2, r2, lr
   219ac:	orr	r3, r3, ip
   219b0:	ldr	lr, [r9, #20]
   219b4:	str	ip, [r9, #4]
   219b8:	ldr	ip, [r5, #116]	; 0x74
   219bc:	orr	r3, r3, r0
   219c0:	and	ip, ip, lr
   219c4:	orr	r3, r3, r1
   219c8:	ldr	lr, [r9, #24]
   219cc:	str	r0, [r9, #8]
   219d0:	ldr	r0, [r5, #120]	; 0x78
   219d4:	orr	r3, r3, r2
   219d8:	str	r1, [r9, #12]
   219dc:	str	r2, [r9, #16]
   219e0:	ldr	r1, [r9, #28]
   219e4:	ldr	r2, [r5, #124]	; 0x7c
   219e8:	and	r0, r0, lr
   219ec:	orr	r3, r3, ip
   219f0:	and	r1, r1, r2
   219f4:	orr	r3, r3, r0
   219f8:	str	ip, [r9, #20]
   219fc:	str	r0, [r9, #24]
   21a00:	orr	r2, r3, r1
   21a04:	str	r1, [r9, #28]
   21a08:	b	20e70 <__assert_fail@plt+0xfb98>
   21a0c:	mov	r2, #32
   21a10:	mvn	r1, #0
   21a14:	mov	r0, r9
   21a18:	bl	111f4 <memset@plt>
   21a1c:	b	21528 <__assert_fail@plt+0x10250>
   21a20:	bne	21330 <__assert_fail@plt+0x10058>
   21a24:	mov	r1, #256	; 0x100
   21a28:	mov	r0, #4
   21a2c:	bl	2949c <__assert_fail@plt+0x181c4>
   21a30:	ldr	r3, [sp, #72]	; 0x48
   21a34:	str	r0, [r3, #44]	; 0x2c
   21a38:	adds	r0, r0, #0
   21a3c:	movne	r0, #1
   21a40:	b	21334 <__assert_fail@plt+0x1005c>
   21a44:	ldr	r3, [sp, #20]
   21a48:	str	r0, [r4, #4]
   21a4c:	cmp	r3, #0
   21a50:	str	r0, [r4]
   21a54:	beq	21330 <__assert_fail@plt+0x10058>
   21a58:	b	2130c <__assert_fail@plt+0x10034>
   21a5c:	ldr	r3, [r9, #-2096]	; 0xfffff7d0
   21a60:	cmp	r3, #0
   21a64:	beq	21924 <__assert_fail@plt+0x1064c>
   21a68:	b	2185c <__assert_fail@plt+0x10584>
   21a6c:	mov	r3, #0
   21a70:	b	2179c <__assert_fail@plt+0x104c4>
   21a74:	mov	r1, #512	; 0x200
   21a78:	mov	r0, #4
   21a7c:	bl	2949c <__assert_fail@plt+0x181c4>
   21a80:	ldr	r3, [sp, #72]	; 0x48
   21a84:	cmp	r0, #0
   21a88:	str	r0, [r3, #48]	; 0x30
   21a8c:	beq	2185c <__assert_fail@plt+0x10584>
   21a90:	add	r7, sp, #128	; 0x80
   21a94:	mov	lr, r0
   21a98:	add	r8, r0, #1024	; 0x400
   21a9c:	ldr	r1, [r7], #4
   21aa0:	cmp	r1, #0
   21aa4:	movne	ip, lr
   21aa8:	movne	r2, #1
   21aac:	bne	21ac4 <__assert_fail@plt+0x107ec>
   21ab0:	b	21b00 <__assert_fail@plt+0x10828>
   21ab4:	lsrs	r1, r1, #1
   21ab8:	lsl	r2, r2, #1
   21abc:	add	ip, ip, #4
   21ac0:	beq	21b00 <__assert_fail@plt+0x10828>
   21ac4:	tst	r1, #1
   21ac8:	beq	21ab4 <__assert_fail@plt+0x107dc>
   21acc:	ldr	r3, [r5]
   21ad0:	ands	r3, r2, r3
   21ad4:	bne	21b14 <__assert_fail@plt+0x1083c>
   21ad8:	add	r3, r3, #1
   21adc:	ldr	r6, [r5, r3, lsl #5]
   21ae0:	tst	r2, r6
   21ae4:	beq	21ad8 <__assert_fail@plt+0x10800>
   21ae8:	add	r3, r9, r3, lsl #2
   21aec:	ldr	r6, [r3, #-2048]	; 0xfffff800
   21af0:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   21af4:	str	r6, [ip]
   21af8:	str	r3, [ip, #1024]	; 0x400
   21afc:	b	21ab4 <__assert_fail@plt+0x107dc>
   21b00:	add	lr, lr, #128	; 0x80
   21b04:	cmp	r8, lr
   21b08:	add	r5, r5, #4
   21b0c:	bne	21a9c <__assert_fail@plt+0x107c4>
   21b10:	b	217d8 <__assert_fail@plt+0x10500>
   21b14:	mov	r3, #0
   21b18:	b	21ae8 <__assert_fail@plt+0x10810>
   21b1c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   21b20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b24:	mov	r5, r0
   21b28:	ldr	r0, [r0, #84]	; 0x54
   21b2c:	sub	sp, sp, #92	; 0x5c
   21b30:	mov	ip, r1
   21b34:	str	r0, [sp, #28]
   21b38:	ldr	r0, [r0]
   21b3c:	mov	r7, r2
   21b40:	str	r1, [sp, #40]	; 0x28
   21b44:	ldr	r2, [sp, #132]	; 0x84
   21b48:	ldr	r1, [r5, #120]	; 0x78
   21b4c:	ldr	r6, [ip, #4]
   21b50:	mov	r8, #0
   21b54:	add	r2, r2, r1
   21b58:	mov	r4, r3
   21b5c:	str	r8, [sp, #56]	; 0x38
   21b60:	ldr	r3, [r0, r7, lsl #3]
   21b64:	cmp	r2, r6
   21b68:	str	r3, [sp, #32]
   21b6c:	bge	2231c <__assert_fail@plt+0x11044>
   21b70:	ldr	r3, [sp, #40]	; 0x28
   21b74:	ldr	r6, [r3]
   21b78:	cmp	r6, #0
   21b7c:	beq	21d54 <__assert_fail@plt+0x10a7c>
   21b80:	ldr	r9, [r3, #8]
   21b84:	ldr	r3, [r5, #100]	; 0x64
   21b88:	ldr	r2, [r5, #88]	; 0x58
   21b8c:	str	r3, [sp, #44]	; 0x2c
   21b90:	ldr	r3, [r5, #40]	; 0x28
   21b94:	str	r9, [r5, #100]	; 0x64
   21b98:	str	r6, [r5, #40]	; 0x28
   21b9c:	sub	r1, r6, #1
   21ba0:	mov	r0, r5
   21ba4:	str	r3, [sp, #48]	; 0x30
   21ba8:	bl	17d08 <__assert_fail@plt+0x6a30>
   21bac:	cmp	r6, r4
   21bb0:	mov	r8, r0
   21bb4:	beq	21d84 <__assert_fail@plt+0x10aac>
   21bb8:	ldr	r7, [r9, r6, lsl #2]
   21bbc:	cmp	r7, #0
   21bc0:	beq	22370 <__assert_fail@plt+0x11098>
   21bc4:	ldrb	r3, [r7, #52]	; 0x34
   21bc8:	ands	r2, r3, #64	; 0x40
   21bcc:	bne	222cc <__assert_fail@plt+0x10ff4>
   21bd0:	add	r1, sp, #64	; 0x40
   21bd4:	str	r1, [sp, #16]
   21bd8:	str	r2, [sp, #64]	; 0x40
   21bdc:	str	r2, [sp, #68]	; 0x44
   21be0:	str	r2, [sp, #72]	; 0x48
   21be4:	tst	r3, #64	; 0x40
   21be8:	beq	21c44 <__assert_fail@plt+0x1096c>
   21bec:	ldr	r3, [sp, #68]	; 0x44
   21bf0:	cmp	r3, #0
   21bf4:	beq	21c20 <__assert_fail@plt+0x10948>
   21bf8:	ldr	r3, [sp, #136]	; 0x88
   21bfc:	mov	r2, r6
   21c00:	str	r3, [sp]
   21c04:	ldr	r1, [sp, #16]
   21c08:	ldr	r3, [sp, #32]
   21c0c:	mov	r0, r5
   21c10:	bl	1c84c <__assert_fail@plt+0xb574>
   21c14:	cmp	r0, #0
   21c18:	str	r0, [sp, #56]	; 0x38
   21c1c:	bne	22174 <__assert_fail@plt+0x10e9c>
   21c20:	mov	r3, r8
   21c24:	ldr	r2, [sp, #16]
   21c28:	ldr	r1, [sp, #28]
   21c2c:	add	r0, sp, #56	; 0x38
   21c30:	bl	206b0 <__assert_fail@plt+0xf3d8>
   21c34:	subs	r7, r0, #0
   21c38:	beq	22388 <__assert_fail@plt+0x110b0>
   21c3c:	ldr	r3, [r5, #100]	; 0x64
   21c40:	str	r7, [r3, r6, lsl #2]
   21c44:	ldr	r3, [sp, #132]	; 0x84
   21c48:	cmp	r3, r6
   21c4c:	ble	2207c <__assert_fail@plt+0x10da4>
   21c50:	ldr	r3, [r5, #120]	; 0x78
   21c54:	cmp	r3, #0
   21c58:	blt	2207c <__assert_fail@plt+0x10da4>
   21c5c:	mov	r3, #0
   21c60:	add	r2, r6, #1
   21c64:	str	r3, [sp, #24]
   21c68:	ldr	r3, [r5, #100]	; 0x64
   21c6c:	mov	fp, r6
   21c70:	lsl	r2, r2, #2
   21c74:	str	r2, [sp, #12]
   21c78:	ldr	r2, [sp, #12]
   21c7c:	ldr	r6, [r3, r2]
   21c80:	mov	r3, #0
   21c84:	cmp	r6, r3
   21c88:	str	r3, [sp, #68]	; 0x44
   21c8c:	beq	22148 <__assert_fail@plt+0x10e70>
   21c90:	ldr	r4, [r6, #8]
   21c94:	cmp	r4, r3
   21c98:	streq	r4, [sp, #56]	; 0x38
   21c9c:	beq	22148 <__assert_fail@plt+0x10e70>
   21ca0:	ldr	r3, [sp, #64]	; 0x40
   21ca4:	cmp	r3, r4, lsl #1
   21ca8:	blt	2227c <__assert_fail@plt+0x10fa4>
   21cac:	add	r1, r6, #4
   21cb0:	ldr	r0, [sp, #16]
   21cb4:	bl	17bc4 <__assert_fail@plt+0x68ec>
   21cb8:	cmp	r0, #0
   21cbc:	str	r0, [sp, #56]	; 0x38
   21cc0:	bne	22174 <__assert_fail@plt+0x10e9c>
   21cc4:	cmp	r7, #0
   21cc8:	beq	21fb4 <__assert_fail@plt+0x10cdc>
   21ccc:	ldr	r3, [r7, #20]
   21cd0:	mov	r2, #0
   21cd4:	cmp	r3, r2
   21cd8:	str	r2, [sp, #60]	; 0x3c
   21cdc:	str	r2, [sp, #76]	; 0x4c
   21ce0:	str	r2, [sp, #80]	; 0x50
   21ce4:	str	r2, [sp, #84]	; 0x54
   21ce8:	ldr	r8, [r5, #84]	; 0x54
   21cec:	ble	223ac <__assert_fail@plt+0x110d4>
   21cf0:	ldr	r3, [r7, #24]
   21cf4:	mov	r4, #0
   21cf8:	ldr	r6, [r3]
   21cfc:	mov	r3, r8
   21d00:	ldr	r0, [r3], #128	; 0x80
   21d04:	lsl	sl, r6, #3
   21d08:	str	r3, [sp, #20]
   21d0c:	add	r3, r0, sl
   21d10:	ldrb	r1, [r3, #6]
   21d14:	ldrb	r2, [r3, #4]
   21d18:	tst	r1, #16
   21d1c:	bne	21ed4 <__assert_fail@plt+0x10bfc>
   21d20:	ldr	r1, [r5, #4]
   21d24:	sub	r2, r2, #1
   21d28:	ldrb	r1, [r1, fp]
   21d2c:	cmp	r2, #6
   21d30:	ldrls	pc, [pc, r2, lsl #2]
   21d34:	b	21ea0 <__assert_fail@plt+0x10bc8>
   21d38:	andeq	r2, r2, r0, lsl r1
   21d3c:	andeq	r1, r2, r0, lsr #29
   21d40:	ldrdeq	r2, [r2], -r0
   21d44:	andeq	r1, r2, r0, lsr #29
   21d48:	andeq	r1, r2, r8, ror #27
   21d4c:	andeq	r1, r2, r0, lsr #29
   21d50:	andeq	r1, r2, r0, ror #27
   21d54:	ldr	r2, [r5, #100]	; 0x64
   21d58:	ldr	r3, [r3, #8]
   21d5c:	str	r2, [sp, #44]	; 0x2c
   21d60:	ldr	r2, [r5, #40]	; 0x28
   21d64:	str	r3, [r5, #100]	; 0x64
   21d68:	str	r2, [sp, #48]	; 0x30
   21d6c:	str	r4, [r5, #40]	; 0x28
   21d70:	ldr	r2, [r5, #88]	; 0x58
   21d74:	sub	r1, r4, #1
   21d78:	mov	r0, r5
   21d7c:	bl	17d08 <__assert_fail@plt+0x6a30>
   21d80:	mov	r8, r0
   21d84:	mov	r3, #1
   21d88:	mov	r0, #4
   21d8c:	str	r3, [sp, #64]	; 0x40
   21d90:	str	r3, [sp, #68]	; 0x44
   21d94:	bl	294e4 <__assert_fail@plt+0x1820c>
   21d98:	cmp	r0, #0
   21d9c:	str	r0, [sp, #72]	; 0x48
   21da0:	beq	223a4 <__assert_fail@plt+0x110cc>
   21da4:	add	r3, sp, #64	; 0x40
   21da8:	str	r3, [sp, #16]
   21dac:	mov	r1, r3
   21db0:	mov	ip, #0
   21db4:	str	r7, [r0]
   21db8:	ldr	r3, [sp, #136]	; 0x88
   21dbc:	ldr	r2, [sp, #32]
   21dc0:	ldr	r0, [sp, #28]
   21dc4:	str	ip, [sp, #56]	; 0x38
   21dc8:	bl	1b000 <__assert_fail@plt+0x9d28>
   21dcc:	cmp	r0, #0
   21dd0:	str	r0, [sp, #56]	; 0x38
   21dd4:	moveq	r6, r4
   21dd8:	beq	21bec <__assert_fail@plt+0x10914>
   21ddc:	b	22174 <__assert_fail@plt+0x10e9c>
   21de0:	tst	r1, #128	; 0x80
   21de4:	bne	21ea0 <__assert_fail@plt+0x10bc8>
   21de8:	cmp	r1, #10
   21dec:	beq	221b4 <__assert_fail@plt+0x10edc>
   21df0:	cmp	r1, #0
   21df4:	bne	21e08 <__assert_fail@plt+0x10b30>
   21df8:	ldr	r2, [r5, #84]	; 0x54
   21dfc:	ldr	r2, [r2, #128]	; 0x80
   21e00:	tst	r2, #128	; 0x80
   21e04:	bne	21ea0 <__assert_fail@plt+0x10bc8>
   21e08:	ldr	r9, [r3, #4]
   21e0c:	ldr	r3, [pc, #1472]	; 223d4 <__assert_fail@plt+0x110fc>
   21e10:	tst	r9, r3
   21e14:	beq	21e68 <__assert_fail@plt+0x10b90>
   21e18:	ldr	r2, [r5, #88]	; 0x58
   21e1c:	mov	r1, fp
   21e20:	mov	r0, r5
   21e24:	bl	17d08 <__assert_fail@plt+0x6a30>
   21e28:	ldr	r3, [pc, #1448]	; 223d8 <__assert_fail@plt+0x11100>
   21e2c:	and	r9, r3, r9, lsr #8
   21e30:	tst	r9, #4
   21e34:	beq	221a0 <__assert_fail@plt+0x10ec8>
   21e38:	tst	r0, #1
   21e3c:	beq	21ea0 <__assert_fail@plt+0x10bc8>
   21e40:	tst	r9, #8
   21e44:	bne	21ea0 <__assert_fail@plt+0x10bc8>
   21e48:	tst	r9, #32
   21e4c:	beq	21e58 <__assert_fail@plt+0x10b80>
   21e50:	tst	r0, #2
   21e54:	beq	21ea0 <__assert_fail@plt+0x10bc8>
   21e58:	tst	r9, #128	; 0x80
   21e5c:	beq	21e68 <__assert_fail@plt+0x10b90>
   21e60:	tst	r0, #8
   21e64:	beq	21ea0 <__assert_fail@plt+0x10bc8>
   21e68:	lsl	sl, r6, #2
   21e6c:	ldr	r2, [r8, #12]
   21e70:	ldr	r3, [sp, #64]	; 0x40
   21e74:	cmp	r3, #0
   21e78:	ldr	r6, [r2, sl]
   21e7c:	beq	22120 <__assert_fail@plt+0x10e48>
   21e80:	ldr	r2, [sp, #68]	; 0x44
   21e84:	cmp	r2, #0
   21e88:	bne	221c8 <__assert_fail@plt+0x10ef0>
   21e8c:	ldr	r3, [sp, #72]	; 0x48
   21e90:	str	r6, [r3]
   21e94:	ldr	r3, [sp, #68]	; 0x44
   21e98:	add	r3, r3, #1
   21e9c:	str	r3, [sp, #68]	; 0x44
   21ea0:	ldr	r3, [r7, #20]
   21ea4:	add	r4, r4, #1
   21ea8:	cmp	r4, r3
   21eac:	bge	220fc <__assert_fail@plt+0x10e24>
   21eb0:	ldr	r3, [r7, #24]
   21eb4:	ldr	r0, [r8]
   21eb8:	ldr	r6, [r3, r4, lsl #2]
   21ebc:	lsl	sl, r6, #3
   21ec0:	add	r3, r0, sl
   21ec4:	ldrb	r1, [r3, #6]
   21ec8:	ldrb	r2, [r3, #4]
   21ecc:	tst	r1, #16
   21ed0:	beq	21d20 <__assert_fail@plt+0x10a48>
   21ed4:	str	fp, [sp]
   21ed8:	mov	r3, r5
   21edc:	mov	r2, r6
   21ee0:	ldr	r1, [sp, #20]
   21ee4:	bl	197e4 <__assert_fail@plt+0x850c>
   21ee8:	cmp	r0, #1
   21eec:	ble	22188 <__assert_fail@plt+0x10eb0>
   21ef0:	ldr	r3, [r5, #100]	; 0x64
   21ef4:	add	r9, r0, fp
   21ef8:	ldr	r2, [r8, #12]
   21efc:	ldr	r3, [r3, r9, lsl #2]
   21f00:	mov	r1, #0
   21f04:	cmp	r3, #0
   21f08:	ldr	r2, [r2, r6, lsl #2]
   21f0c:	lsl	sl, r6, #2
   21f10:	str	r1, [sp, #80]	; 0x50
   21f14:	beq	21f54 <__assert_fail@plt+0x10c7c>
   21f18:	ldr	r6, [r3, #8]
   21f1c:	cmp	r6, r1
   21f20:	streq	r6, [sp, #60]	; 0x3c
   21f24:	beq	21f54 <__assert_fail@plt+0x10c7c>
   21f28:	ldr	r1, [sp, #76]	; 0x4c
   21f2c:	cmp	r1, r6, lsl #1
   21f30:	blt	22210 <__assert_fail@plt+0x10f38>
   21f34:	add	r1, r3, #4
   21f38:	add	r0, sp, #76	; 0x4c
   21f3c:	str	r2, [sp, #36]	; 0x24
   21f40:	bl	17bc4 <__assert_fail@plt+0x68ec>
   21f44:	ldr	r2, [sp, #36]	; 0x24
   21f48:	cmp	r0, #0
   21f4c:	str	r0, [sp, #60]	; 0x3c
   21f50:	bne	21f9c <__assert_fail@plt+0x10cc4>
   21f54:	mov	r1, r2
   21f58:	add	r0, sp, #76	; 0x4c
   21f5c:	bl	17640 <__assert_fail@plt+0x6368>
   21f60:	cmp	r0, #0
   21f64:	beq	22164 <__assert_fail@plt+0x10e8c>
   21f68:	add	r2, sp, #76	; 0x4c
   21f6c:	mov	r1, r8
   21f70:	add	r0, sp, #60	; 0x3c
   21f74:	ldr	r6, [r5, #100]	; 0x64
   21f78:	bl	1c570 <__assert_fail@plt+0xb298>
   21f7c:	ldr	r3, [r5, #100]	; 0x64
   21f80:	str	r0, [r6, r9, lsl #2]
   21f84:	ldr	r3, [r3, r9, lsl #2]
   21f88:	cmp	r3, #0
   21f8c:	bne	21e6c <__assert_fail@plt+0x10b94>
   21f90:	ldr	r3, [sp, #60]	; 0x3c
   21f94:	cmp	r3, #0
   21f98:	beq	21e6c <__assert_fail@plt+0x10b94>
   21f9c:	ldr	r0, [sp, #84]	; 0x54
   21fa0:	bl	296b0 <__assert_fail@plt+0x183d8>
   21fa4:	ldr	r3, [sp, #60]	; 0x3c
   21fa8:	cmp	r3, #0
   21fac:	str	r3, [sp, #56]	; 0x38
   21fb0:	bne	22174 <__assert_fail@plt+0x10e9c>
   21fb4:	ldr	r3, [sp, #68]	; 0x44
   21fb8:	add	r4, fp, #1
   21fbc:	cmp	r3, #0
   21fc0:	mov	r6, r4
   21fc4:	beq	22010 <__assert_fail@plt+0x10d38>
   21fc8:	ldr	r3, [sp, #136]	; 0x88
   21fcc:	ldr	r2, [sp, #32]
   21fd0:	ldr	r1, [sp, #16]
   21fd4:	ldr	r0, [sp, #28]
   21fd8:	bl	1b000 <__assert_fail@plt+0x9d28>
   21fdc:	cmp	r0, #0
   21fe0:	str	r0, [sp, #56]	; 0x38
   21fe4:	bne	22174 <__assert_fail@plt+0x10e9c>
   21fe8:	ldr	r3, [sp, #136]	; 0x88
   21fec:	mov	r2, r4
   21ff0:	str	r3, [sp]
   21ff4:	ldr	r1, [sp, #16]
   21ff8:	ldr	r3, [sp, #32]
   21ffc:	mov	r0, r5
   22000:	bl	1c84c <__assert_fail@plt+0xb574>
   22004:	cmp	r0, #0
   22008:	str	r0, [sp, #56]	; 0x38
   2200c:	bne	22174 <__assert_fail@plt+0x10e9c>
   22010:	ldr	r2, [r5, #88]	; 0x58
   22014:	mov	r1, fp
   22018:	mov	r0, r5
   2201c:	bl	17d08 <__assert_fail@plt+0x6a30>
   22020:	ldr	r2, [sp, #16]
   22024:	ldr	r1, [sp, #28]
   22028:	mov	r3, r0
   2202c:	add	r0, sp, #56	; 0x38
   22030:	bl	206b0 <__assert_fail@plt+0xf3d8>
   22034:	subs	r7, r0, #0
   22038:	beq	222a4 <__assert_fail@plt+0x10fcc>
   2203c:	mov	r2, #0
   22040:	str	r2, [sp, #24]
   22044:	ldr	r3, [r5, #100]	; 0x64
   22048:	ldr	r2, [sp, #12]
   2204c:	str	r7, [r3, r2]
   22050:	ldr	r2, [sp, #132]	; 0x84
   22054:	cmp	r2, r4
   22058:	ble	2207c <__assert_fail@plt+0x10da4>
   2205c:	ldr	r1, [sp, #12]
   22060:	ldr	r2, [r5, #120]	; 0x78
   22064:	add	r1, r1, #4
   22068:	str	r1, [sp, #12]
   2206c:	ldr	r1, [sp, #24]
   22070:	mov	fp, r4
   22074:	cmp	r1, r2
   22078:	ble	21c78 <__assert_fail@plt+0x109a0>
   2207c:	ldr	r0, [sp, #72]	; 0x48
   22080:	bl	296b0 <__assert_fail@plt+0x183d8>
   22084:	ldr	r3, [r5, #100]	; 0x64
   22088:	ldr	r2, [sp, #132]	; 0x84
   2208c:	ldr	r3, [r3, r2, lsl #2]
   22090:	cmp	r3, #0
   22094:	beq	223b4 <__assert_fail@plt+0x110dc>
   22098:	ldr	r2, [sp, #40]	; 0x28
   2209c:	add	r1, r3, #12
   220a0:	str	r6, [r2]
   220a4:	ldr	r2, [sp, #48]	; 0x30
   220a8:	str	r2, [r5, #40]	; 0x28
   220ac:	ldr	r2, [sp, #44]	; 0x2c
   220b0:	ldr	r0, [r3, #8]
   220b4:	str	r2, [r5, #100]	; 0x64
   220b8:	ldr	r2, [sp, #128]	; 0x80
   220bc:	bl	1775c <__assert_fail@plt+0x6484>
   220c0:	clz	r0, r0
   220c4:	lsr	r0, r0, #5
   220c8:	add	sp, sp, #92	; 0x5c
   220cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   220d0:	ldr	r2, [r3]
   220d4:	asr	r0, r1, #5
   220d8:	and	r1, r1, #31
   220dc:	ldr	r2, [r2, r0, lsl #2]
   220e0:	lsr	r1, r2, r1
   220e4:	tst	r1, #1
   220e8:	bne	21e08 <__assert_fail@plt+0x10b30>
   220ec:	ldr	r3, [r7, #20]
   220f0:	add	r4, r4, #1
   220f4:	cmp	r4, r3
   220f8:	blt	21eb0 <__assert_fail@plt+0x10bd8>
   220fc:	ldr	r0, [sp, #84]	; 0x54
   22100:	bl	296b0 <__assert_fail@plt+0x183d8>
   22104:	mov	r3, #0
   22108:	str	r3, [sp, #56]	; 0x38
   2210c:	b	21fb4 <__assert_fail@plt+0x10cdc>
   22110:	ldrb	r2, [r3]
   22114:	cmp	r2, r1
   22118:	bne	21ea0 <__assert_fail@plt+0x10bc8>
   2211c:	b	21e08 <__assert_fail@plt+0x10b30>
   22120:	mov	r3, #1
   22124:	mov	r0, #4
   22128:	str	r3, [sp, #64]	; 0x40
   2212c:	str	r3, [sp, #68]	; 0x44
   22130:	bl	294e4 <__assert_fail@plt+0x1820c>
   22134:	cmp	r0, #0
   22138:	str	r0, [sp, #72]	; 0x48
   2213c:	beq	2215c <__assert_fail@plt+0x10e84>
   22140:	str	r6, [r0]
   22144:	b	21ea0 <__assert_fail@plt+0x10bc8>
   22148:	cmp	r7, #0
   2214c:	bne	21ccc <__assert_fail@plt+0x109f4>
   22150:	add	r4, fp, #1
   22154:	mov	r6, r4
   22158:	b	22010 <__assert_fail@plt+0x10d38>
   2215c:	str	r0, [sp, #68]	; 0x44
   22160:	str	r0, [sp, #64]	; 0x40
   22164:	ldr	r0, [sp, #84]	; 0x54
   22168:	bl	296b0 <__assert_fail@plt+0x183d8>
   2216c:	mov	r3, #12
   22170:	str	r3, [sp, #56]	; 0x38
   22174:	ldr	r0, [sp, #72]	; 0x48
   22178:	bl	296b0 <__assert_fail@plt+0x183d8>
   2217c:	ldr	r0, [sp, #56]	; 0x38
   22180:	add	sp, sp, #92	; 0x5c
   22184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22188:	cmp	r0, #0
   2218c:	bne	21e68 <__assert_fail@plt+0x10b90>
   22190:	ldr	r3, [r8]
   22194:	add	r3, r3, sl
   22198:	ldrb	r2, [r3, #4]
   2219c:	b	21d20 <__assert_fail@plt+0x10a48>
   221a0:	tst	r9, #8
   221a4:	beq	21e48 <__assert_fail@plt+0x10b70>
   221a8:	tst	r0, #1
   221ac:	beq	21e48 <__assert_fail@plt+0x10b70>
   221b0:	b	21ea0 <__assert_fail@plt+0x10bc8>
   221b4:	ldr	r2, [r5, #84]	; 0x54
   221b8:	ldr	r2, [r2, #128]	; 0x80
   221bc:	tst	r2, #64	; 0x40
   221c0:	bne	21e08 <__assert_fail@plt+0x10b30>
   221c4:	b	21ea0 <__assert_fail@plt+0x10bc8>
   221c8:	cmp	r3, r2
   221cc:	beq	222f4 <__assert_fail@plt+0x1101c>
   221d0:	ldr	r9, [sp, #72]	; 0x48
   221d4:	ldr	r3, [r9]
   221d8:	cmp	r6, r3
   221dc:	bge	22248 <__assert_fail@plt+0x10f70>
   221e0:	cmp	r2, #0
   221e4:	ble	221fc <__assert_fail@plt+0x10f24>
   221e8:	lsl	r2, r2, #2
   221ec:	mov	r1, r9
   221f0:	add	r0, r9, #4
   221f4:	bl	11038 <memmove@plt>
   221f8:	mov	r2, #0
   221fc:	str	r6, [r9, r2, lsl #2]
   22200:	ldr	r3, [sp, #68]	; 0x44
   22204:	add	r3, r3, #1
   22208:	str	r3, [sp, #68]	; 0x44
   2220c:	b	21ea0 <__assert_fail@plt+0x10bc8>
   22210:	add	r6, r6, r1
   22214:	ldr	r0, [sp, #84]	; 0x54
   22218:	lsl	r1, r6, #3
   2221c:	str	r3, [sp, #52]	; 0x34
   22220:	str	r2, [sp, #36]	; 0x24
   22224:	bl	29510 <__assert_fail@plt+0x18238>
   22228:	lsl	r6, r6, #1
   2222c:	ldr	r2, [sp, #36]	; 0x24
   22230:	ldr	r3, [sp, #52]	; 0x34
   22234:	cmp	r0, #0
   22238:	beq	22398 <__assert_fail@plt+0x110c0>
   2223c:	str	r0, [sp, #84]	; 0x54
   22240:	str	r6, [sp, #76]	; 0x4c
   22244:	b	21f34 <__assert_fail@plt+0x10c5c>
   22248:	sub	r3, r2, #-1073741823	; 0xc0000001
   2224c:	ldr	r1, [r9, r3, lsl #2]
   22250:	lsl	r3, r3, #2
   22254:	cmp	r6, r1
   22258:	bge	221fc <__assert_fail@plt+0x10f24>
   2225c:	add	r3, r3, #4
   22260:	add	r3, r9, r3
   22264:	str	r1, [r3], #-4
   22268:	ldr	r1, [r3, #-4]
   2226c:	sub	r2, r2, #1
   22270:	cmp	r6, r1
   22274:	blt	22264 <__assert_fail@plt+0x10f8c>
   22278:	b	221fc <__assert_fail@plt+0x10f24>
   2227c:	add	r4, r4, r3
   22280:	ldr	r0, [sp, #72]	; 0x48
   22284:	lsl	r1, r4, #3
   22288:	bl	29510 <__assert_fail@plt+0x18238>
   2228c:	lsl	r4, r4, #1
   22290:	cmp	r0, #0
   22294:	beq	2216c <__assert_fail@plt+0x10e94>
   22298:	str	r0, [sp, #72]	; 0x48
   2229c:	str	r4, [sp, #64]	; 0x40
   222a0:	b	21cac <__assert_fail@plt+0x109d4>
   222a4:	ldr	r3, [sp, #56]	; 0x38
   222a8:	cmp	r3, #0
   222ac:	bne	22174 <__assert_fail@plt+0x10e9c>
   222b0:	ldr	r2, [sp, #24]
   222b4:	ldr	r3, [r5, #100]	; 0x64
   222b8:	add	r2, r2, #1
   222bc:	str	r2, [sp, #24]
   222c0:	ldr	r2, [sp, #12]
   222c4:	str	r7, [r3, r2]
   222c8:	b	22050 <__assert_fail@plt+0x10d78>
   222cc:	add	r3, sp, #64	; 0x40
   222d0:	mov	r0, r3
   222d4:	add	r1, r7, #4
   222d8:	str	r3, [sp, #16]
   222dc:	bl	17a00 <__assert_fail@plt+0x6728>
   222e0:	cmp	r0, #0
   222e4:	str	r0, [sp, #56]	; 0x38
   222e8:	bne	22180 <__assert_fail@plt+0x10ea8>
   222ec:	ldrb	r3, [r7, #52]	; 0x34
   222f0:	b	21be4 <__assert_fail@plt+0x1090c>
   222f4:	lsl	r3, r2, #1
   222f8:	lsl	r1, r2, #3
   222fc:	ldr	r0, [sp, #72]	; 0x48
   22300:	str	r3, [sp, #64]	; 0x40
   22304:	bl	29510 <__assert_fail@plt+0x18238>
   22308:	subs	r9, r0, #0
   2230c:	beq	22164 <__assert_fail@plt+0x10e8c>
   22310:	ldr	r2, [sp, #68]	; 0x44
   22314:	str	r9, [sp, #72]	; 0x48
   22318:	b	221d4 <__assert_fail@plt+0x10efc>
   2231c:	mvn	r3, #-2147483648	; 0x80000000
   22320:	add	r9, r2, #1
   22324:	sub	r3, r3, r6
   22328:	cmp	r9, r3
   2232c:	bgt	223a4 <__assert_fail@plt+0x110cc>
   22330:	add	sl, r6, r9
   22334:	cmn	sl, #-1073741823	; 0xc0000001
   22338:	bhi	223a4 <__assert_fail@plt+0x110cc>
   2233c:	lsl	r1, sl, #2
   22340:	ldr	r0, [ip, #8]
   22344:	mov	fp, ip
   22348:	bl	29510 <__assert_fail@plt+0x18238>
   2234c:	cmp	r0, #0
   22350:	beq	223a4 <__assert_fail@plt+0x110cc>
   22354:	str	r0, [fp, #8]
   22358:	str	sl, [fp, #4]
   2235c:	lsl	r2, r9, #2
   22360:	mov	r1, r8
   22364:	add	r0, r0, r6, lsl #2
   22368:	bl	111f4 <memset@plt>
   2236c:	b	21b70 <__assert_fail@plt+0x10898>
   22370:	add	r3, sp, #64	; 0x40
   22374:	str	r3, [sp, #16]
   22378:	str	r7, [sp, #64]	; 0x40
   2237c:	str	r7, [sp, #68]	; 0x44
   22380:	str	r7, [sp, #72]	; 0x48
   22384:	b	21c44 <__assert_fail@plt+0x1096c>
   22388:	ldr	r3, [sp, #56]	; 0x38
   2238c:	cmp	r3, #0
   22390:	beq	21c3c <__assert_fail@plt+0x10964>
   22394:	b	22174 <__assert_fail@plt+0x10e9c>
   22398:	mov	r3, #12
   2239c:	str	r3, [sp, #60]	; 0x3c
   223a0:	b	21f9c <__assert_fail@plt+0x10cc4>
   223a4:	mov	r0, #12
   223a8:	b	22180 <__assert_fail@plt+0x10ea8>
   223ac:	mov	r0, #0
   223b0:	b	22100 <__assert_fail@plt+0x10e28>
   223b4:	ldr	r3, [sp, #40]	; 0x28
   223b8:	mov	r0, #1
   223bc:	str	r6, [r3]
   223c0:	ldr	r3, [sp, #44]	; 0x2c
   223c4:	str	r3, [r5, #100]	; 0x64
   223c8:	ldr	r3, [sp, #48]	; 0x30
   223cc:	str	r3, [r5, #40]	; 0x28
   223d0:	b	22180 <__assert_fail@plt+0x10ea8>
   223d4:	andeq	pc, r3, r0, lsl #30
   223d8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   223dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   223e0:	sub	sp, sp, #20
   223e4:	mov	ip, r2
   223e8:	ldr	r5, [sp, #56]	; 0x38
   223ec:	ldr	r4, [r2, #4]
   223f0:	mov	lr, #8
   223f4:	mov	r6, r2
   223f8:	ldr	r2, [ip], #8
   223fc:	mov	r7, r3
   22400:	str	r3, [sp]
   22404:	mov	r9, r1
   22408:	mov	r3, r4
   2240c:	mov	r1, ip
   22410:	stmib	sp, {r5, lr}
   22414:	mov	r4, r0
   22418:	bl	21b20 <__assert_fail@plt+0x10848>
   2241c:	subs	r8, r0, #0
   22420:	beq	22430 <__assert_fail@plt+0x11158>
   22424:	mov	r0, r8
   22428:	add	sp, sp, #20
   2242c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22430:	ldr	r3, [r4, #108]	; 0x6c
   22434:	ldr	r1, [r4, #112]	; 0x70
   22438:	ldr	sl, [r6, #4]
   2243c:	cmp	r3, r1
   22440:	ldr	fp, [r9]
   22444:	movlt	ip, sl
   22448:	bge	22544 <__assert_fail@plt+0x1126c>
   2244c:	add	r2, r3, r3, lsl #1
   22450:	cmp	r3, #0
   22454:	ldr	r0, [r4, #116]	; 0x74
   22458:	lsl	r2, r2, #3
   2245c:	ble	22478 <__assert_fail@plt+0x111a0>
   22460:	sub	r1, r2, #24
   22464:	add	r1, r0, r1
   22468:	ldr	lr, [r1, #4]
   2246c:	cmp	r5, lr
   22470:	moveq	lr, #1
   22474:	strbeq	lr, [r1, #20]
   22478:	add	r1, r0, r2
   2247c:	cmp	fp, sl
   22480:	str	r7, [r0, r2]
   22484:	add	r3, r3, #1
   22488:	movne	r0, #0
   2248c:	mvneq	r0, #0
   22490:	mov	r2, #0
   22494:	stmib	r1, {r5, fp}
   22498:	str	sl, [r1, #12]
   2249c:	str	r0, [r1, #16]
   224a0:	str	r3, [r4, #108]	; 0x6c
   224a4:	strb	r2, [r1, #20]
   224a8:	ldr	r3, [r4, #120]	; 0x78
   224ac:	sub	sl, sl, fp
   224b0:	cmp	r3, sl
   224b4:	strlt	sl, [r4, #120]	; 0x78
   224b8:	ldr	r2, [r9]
   224bc:	add	r5, r5, ip
   224c0:	ldr	r3, [r4, #36]	; 0x24
   224c4:	sub	r5, r5, r2
   224c8:	cmp	r5, r3
   224cc:	ldr	r6, [r4, #104]	; 0x68
   224d0:	blt	22528 <__assert_fail@plt+0x11250>
   224d4:	ldr	r2, [r4, #48]	; 0x30
   224d8:	cmp	r3, r2
   224dc:	bge	22528 <__assert_fail@plt+0x11250>
   224e0:	add	r1, r5, #1
   224e4:	mov	r0, r4
   224e8:	bl	1c35c <__assert_fail@plt+0xb084>
   224ec:	cmp	r0, #0
   224f0:	bne	22598 <__assert_fail@plt+0x112c0>
   224f4:	cmp	r5, r6
   224f8:	ble	22424 <__assert_fail@plt+0x1114c>
   224fc:	sub	r2, r5, r6
   22500:	ldr	r0, [r4, #100]	; 0x64
   22504:	add	r6, r6, #1
   22508:	lsl	r2, r2, #2
   2250c:	add	r0, r0, r6, lsl #2
   22510:	mov	r1, #0
   22514:	bl	111f4 <memset@plt>
   22518:	mov	r0, r8
   2251c:	str	r5, [r4, #104]	; 0x68
   22520:	add	sp, sp, #20
   22524:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22528:	ldr	r3, [r4, #28]
   2252c:	cmp	r5, r3
   22530:	blt	224f4 <__assert_fail@plt+0x1121c>
   22534:	ldr	r2, [r4, #48]	; 0x30
   22538:	cmp	r3, r2
   2253c:	bge	224f4 <__assert_fail@plt+0x1121c>
   22540:	b	224e0 <__assert_fail@plt+0x11208>
   22544:	add	r1, r1, r1, lsl #1
   22548:	ldr	r0, [r4, #116]	; 0x74
   2254c:	lsl	r1, r1, #4
   22550:	bl	29510 <__assert_fail@plt+0x18238>
   22554:	cmp	r0, #0
   22558:	beq	225a0 <__assert_fail@plt+0x112c8>
   2255c:	ldr	r2, [r4, #112]	; 0x70
   22560:	ldr	r3, [r4, #108]	; 0x6c
   22564:	str	r0, [r4, #116]	; 0x74
   22568:	add	r2, r2, r2, lsl #1
   2256c:	add	r3, r3, r3, lsl #1
   22570:	lsl	r2, r2, #3
   22574:	add	r0, r0, r3, lsl #3
   22578:	mov	r1, r8
   2257c:	bl	111f4 <memset@plt>
   22580:	ldr	r2, [r4, #112]	; 0x70
   22584:	ldr	ip, [r6, #4]
   22588:	ldr	r3, [r4, #108]	; 0x6c
   2258c:	lsl	r2, r2, #1
   22590:	str	r2, [r4, #112]	; 0x70
   22594:	b	2244c <__assert_fail@plt+0x11174>
   22598:	mov	r8, r0
   2259c:	b	22424 <__assert_fail@plt+0x1114c>
   225a0:	ldr	r0, [r4, #116]	; 0x74
   225a4:	bl	296b0 <__assert_fail@plt+0x183d8>
   225a8:	mov	r8, #12
   225ac:	b	22424 <__assert_fail@plt+0x1114c>
   225b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   225b4:	sub	sp, sp, #92	; 0x5c
   225b8:	ldr	r6, [r1]
   225bc:	ldr	r3, [r0, #84]	; 0x54
   225c0:	cmp	r6, #0
   225c4:	str	r3, [sp, #36]	; 0x24
   225c8:	ldr	fp, [r0, #40]	; 0x28
   225cc:	ble	22b58 <__assert_fail@plt+0x11880>
   225d0:	mov	r3, #0
   225d4:	str	r3, [sp, #20]
   225d8:	lsl	r3, fp, #2
   225dc:	str	r2, [sp, #40]	; 0x28
   225e0:	mov	sl, r0
   225e4:	str	r1, [sp, #64]	; 0x40
   225e8:	str	r3, [sp, #52]	; 0x34
   225ec:	mov	r9, fp
   225f0:	b	22608 <__assert_fail@plt+0x11330>
   225f4:	ldr	r3, [sp, #20]
   225f8:	add	r3, r3, #1
   225fc:	cmp	r3, r6
   22600:	str	r3, [sp, #20]
   22604:	bge	22b58 <__assert_fail@plt+0x11880>
   22608:	ldr	r3, [sp, #40]	; 0x28
   2260c:	ldr	r1, [sp, #20]
   22610:	ldr	r2, [r3]
   22614:	ldr	r3, [sp, #36]	; 0x24
   22618:	ldr	fp, [r2, r1, lsl #2]
   2261c:	ldr	r3, [r3]
   22620:	add	r3, r3, fp, lsl #3
   22624:	ldrb	r2, [r3, #4]
   22628:	cmp	r2, #4
   2262c:	bne	225f4 <__assert_fail@plt+0x1131c>
   22630:	ldr	r4, [r3, #4]
   22634:	ldr	r3, [pc, #1928]	; 22dc4 <__assert_fail@plt+0x11aec>
   22638:	tst	r4, r3
   2263c:	beq	22690 <__assert_fail@plt+0x113b8>
   22640:	ldr	r2, [sl, #88]	; 0x58
   22644:	mov	r1, r9
   22648:	mov	r0, sl
   2264c:	bl	17d08 <__assert_fail@plt+0x6a30>
   22650:	ldr	r3, [pc, #1904]	; 22dc8 <__assert_fail@plt+0x11af0>
   22654:	and	r4, r3, r4, lsr #8
   22658:	tst	r4, #4
   2265c:	beq	228f0 <__assert_fail@plt+0x11618>
   22660:	tst	r0, #1
   22664:	beq	225f4 <__assert_fail@plt+0x1131c>
   22668:	tst	r4, #8
   2266c:	bne	225f4 <__assert_fail@plt+0x1131c>
   22670:	tst	r4, #32
   22674:	beq	22680 <__assert_fail@plt+0x113a8>
   22678:	tst	r0, #2
   2267c:	beq	225f4 <__assert_fail@plt+0x1131c>
   22680:	tst	r4, #128	; 0x80
   22684:	beq	22690 <__assert_fail@plt+0x113b8>
   22688:	tst	r0, #8
   2268c:	beq	225f4 <__assert_fail@plt+0x1131c>
   22690:	ldr	ip, [sl, #108]	; 0x6c
   22694:	mov	r0, #0
   22698:	mov	r8, ip
   2269c:	mov	r3, ip
   226a0:	cmp	r0, r3
   226a4:	bge	22700 <__assert_fail@plt+0x11428>
   226a8:	add	r2, r0, r3
   226ac:	ldr	lr, [sl, #116]	; 0x74
   226b0:	add	r2, r2, r2, lsr #31
   226b4:	asr	r2, r2, #1
   226b8:	add	r1, r2, r2, lsl #1
   226bc:	add	r1, lr, r1, lsl #3
   226c0:	ldr	r1, [r1, #4]
   226c4:	cmp	r9, r1
   226c8:	ble	226f0 <__assert_fail@plt+0x11418>
   226cc:	b	228dc <__assert_fail@plt+0x11604>
   226d0:	asr	r3, r3, #1
   226d4:	mov	r4, r3
   226d8:	add	r1, r3, r3, lsl #1
   226dc:	add	r1, lr, r1, lsl #3
   226e0:	ldr	r1, [r1, #4]
   226e4:	cmp	r9, r1
   226e8:	bgt	228e4 <__assert_fail@plt+0x1160c>
   226ec:	mov	r2, r3
   226f0:	add	r3, r0, r2
   226f4:	cmp	r0, r2
   226f8:	add	r3, r3, r3, lsr #31
   226fc:	blt	226d0 <__assert_fail@plt+0x113f8>
   22700:	cmp	ip, r0
   22704:	ble	22904 <__assert_fail@plt+0x1162c>
   22708:	add	r2, r0, r0, lsl #1
   2270c:	ldr	r3, [sl, #116]	; 0x74
   22710:	cmn	r0, #1
   22714:	add	r3, r3, r2, lsl #3
   22718:	ldr	r2, [r3, #4]
   2271c:	sub	r2, r2, r9
   22720:	clz	r2, r2
   22724:	lsr	r2, r2, #5
   22728:	moveq	r2, #0
   2272c:	cmp	r2, #0
   22730:	beq	22904 <__assert_fail@plt+0x1162c>
   22734:	add	r3, r3, #24
   22738:	b	22748 <__assert_fail@plt+0x11470>
   2273c:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   22740:	cmp	r2, #0
   22744:	beq	22904 <__assert_fail@plt+0x1162c>
   22748:	ldr	r2, [r3, #-24]	; 0xffffffe8
   2274c:	add	r3, r3, #24
   22750:	cmp	fp, r2
   22754:	bne	2273c <__assert_fail@plt+0x11464>
   22758:	mov	r3, #0
   2275c:	str	r3, [sp, #72]	; 0x48
   22760:	cmp	r8, ip
   22764:	lsl	r3, fp, #2
   22768:	str	r3, [sp, #48]	; 0x30
   2276c:	bge	228d0 <__assert_fail@plt+0x115f8>
   22770:	add	r3, fp, fp, lsl #1
   22774:	add	r4, r8, r8, lsl #1
   22778:	lsl	r3, r3, #2
   2277c:	str	r3, [sp, #56]	; 0x38
   22780:	lsl	r4, r4, #3
   22784:	ldr	r6, [sp, #36]	; 0x24
   22788:	b	2279c <__assert_fail@plt+0x114c4>
   2278c:	add	r8, r8, #1
   22790:	cmp	r8, ip
   22794:	add	r4, r4, #24
   22798:	bge	228d0 <__assert_fail@plt+0x115f8>
   2279c:	ldr	r3, [sl, #116]	; 0x74
   227a0:	add	r2, r3, r4
   227a4:	ldr	r3, [r3, r4]
   227a8:	cmp	fp, r3
   227ac:	bne	2278c <__assert_fail@plt+0x114b4>
   227b0:	ldr	r3, [r2, #4]
   227b4:	cmp	r9, r3
   227b8:	bne	2278c <__assert_fail@plt+0x114b4>
   227bc:	ldr	r3, [r2, #12]
   227c0:	ldr	r5, [r2, #8]
   227c4:	subs	r2, r3, r5
   227c8:	str	r2, [sp, #28]
   227cc:	ldreq	r0, [sp, #56]	; 0x38
   227d0:	ldreq	r2, [r6, #20]
   227d4:	ldrne	r2, [r6, #12]
   227d8:	addeq	r2, r2, r0
   227dc:	ldrne	r0, [sp, #48]	; 0x30
   227e0:	ldreq	r2, [r2, #8]
   227e4:	ldreq	r1, [r6, #24]
   227e8:	ldrne	r2, [r2, r0]
   227ec:	ldreq	r2, [r2]
   227f0:	ldrne	r1, [r6, #24]
   227f4:	add	r3, r9, r3
   227f8:	add	r2, r2, r2, lsl #1
   227fc:	sub	r5, r3, r5
   22800:	add	r2, r1, r2, lsl #2
   22804:	str	r2, [sp, #24]
   22808:	sub	r1, r5, #1
   2280c:	ldr	r2, [sl, #88]	; 0x58
   22810:	mov	r0, sl
   22814:	bl	17d08 <__assert_fail@plt+0x6a30>
   22818:	ldr	r7, [sl, #100]	; 0x64
   2281c:	ldr	r2, [sp, #52]	; 0x34
   22820:	ldr	r1, [r7, r2]
   22824:	ldr	r2, [r7, r5, lsl #2]
   22828:	cmp	r1, #0
   2282c:	moveq	r1, #0
   22830:	ldrne	r1, [r1, #8]
   22834:	cmp	r2, #0
   22838:	str	r1, [sp, #44]	; 0x2c
   2283c:	mov	r3, r0
   22840:	beq	22aa4 <__assert_fail@plt+0x117cc>
   22844:	str	r0, [sp, #32]
   22848:	ldr	r1, [r2, #40]	; 0x28
   2284c:	add	r0, sp, #76	; 0x4c
   22850:	ldr	r2, [sp, #24]
   22854:	bl	17a78 <__assert_fail@plt+0x67a0>
   22858:	ldr	r3, [sp, #32]
   2285c:	cmp	r0, #0
   22860:	str	r0, [sp, #72]	; 0x48
   22864:	bne	22b44 <__assert_fail@plt+0x1186c>
   22868:	add	r2, sp, #76	; 0x4c
   2286c:	mov	r1, r6
   22870:	add	r0, sp, #72	; 0x48
   22874:	ldr	r7, [sl, #100]	; 0x64
   22878:	bl	206b0 <__assert_fail@plt+0xf3d8>
   2287c:	str	r0, [r7, r5, lsl #2]
   22880:	ldr	r0, [sp, #84]	; 0x54
   22884:	bl	296b0 <__assert_fail@plt+0x183d8>
   22888:	ldr	r3, [sl, #100]	; 0x64
   2288c:	ldr	r2, [r3, r5, lsl #2]
   22890:	cmp	r2, #0
   22894:	beq	22ac8 <__assert_fail@plt+0x117f0>
   22898:	ldr	r2, [sp, #28]
   2289c:	cmp	r2, #0
   228a0:	bne	228bc <__assert_fail@plt+0x115e4>
   228a4:	ldr	r2, [sp, #52]	; 0x34
   228a8:	ldr	r3, [r3, r2]
   228ac:	ldr	r2, [sp, #44]	; 0x2c
   228b0:	ldr	r3, [r3, #8]
   228b4:	cmp	r3, r2
   228b8:	bgt	22ad8 <__assert_fail@plt+0x11800>
   228bc:	ldr	ip, [sl, #108]	; 0x6c
   228c0:	add	r8, r8, #1
   228c4:	cmp	r8, ip
   228c8:	add	r4, r4, #24
   228cc:	blt	2279c <__assert_fail@plt+0x114c4>
   228d0:	ldr	r3, [sp, #64]	; 0x40
   228d4:	ldr	r6, [r3]
   228d8:	b	225f4 <__assert_fail@plt+0x1131c>
   228dc:	mov	r4, r2
   228e0:	mov	r2, r3
   228e4:	add	r0, r4, #1
   228e8:	mov	r3, r2
   228ec:	b	226a0 <__assert_fail@plt+0x113c8>
   228f0:	tst	r4, #8
   228f4:	beq	22670 <__assert_fail@plt+0x11398>
   228f8:	tst	r0, #1
   228fc:	beq	22670 <__assert_fail@plt+0x11398>
   22900:	b	225f4 <__assert_fail@plt+0x1131c>
   22904:	ldr	r3, [sl, #84]	; 0x54
   22908:	ldr	r1, [sl, #124]	; 0x7c
   2290c:	str	r3, [sp, #60]	; 0x3c
   22910:	ldr	r3, [r3]
   22914:	cmp	r1, #0
   22918:	ldr	r2, [r3, fp, lsl #3]
   2291c:	str	r2, [sp, #56]	; 0x38
   22920:	ble	22758 <__assert_fail@plt+0x11480>
   22924:	ldr	r2, [sl, #4]
   22928:	str	r9, [sp, #32]
   2292c:	mov	ip, r2
   22930:	mov	r2, #0
   22934:	mov	r0, r2
   22938:	str	r2, [sp, #44]	; 0x2c
   2293c:	str	fp, [sp, #48]	; 0x30
   22940:	str	r8, [sp, #68]	; 0x44
   22944:	ldr	r2, [sl, #132]	; 0x84
   22948:	ldr	r4, [r2, r0, lsl #2]
   2294c:	ldr	r2, [r4, #4]
   22950:	ldr	r3, [r3, r2, lsl #3]
   22954:	ldr	r2, [sp, #56]	; 0x38
   22958:	cmp	r2, r3
   2295c:	beq	22984 <__assert_fail@plt+0x116ac>
   22960:	ldr	r3, [sp, #44]	; 0x2c
   22964:	add	r3, r3, #1
   22968:	cmp	r3, r1
   2296c:	str	r3, [sp, #44]	; 0x2c
   22970:	bge	22d68 <__assert_fail@plt+0x11a90>
   22974:	ldr	r3, [sp, #60]	; 0x3c
   22978:	ldr	r0, [sp, #44]	; 0x2c
   2297c:	ldr	r3, [r3]
   22980:	b	22944 <__assert_fail@plt+0x1166c>
   22984:	ldr	r2, [r4, #16]
   22988:	ldr	r7, [r4]
   2298c:	cmp	r2, #0
   22990:	ble	22dac <__assert_fail@plt+0x11ad4>
   22994:	ldr	r3, [sp, #32]
   22998:	mov	r6, #0
   2299c:	str	r7, [sp, #24]
   229a0:	mov	fp, ip
   229a4:	b	229c0 <__assert_fail@plt+0x116e8>
   229a8:	ldr	r2, [r4, #16]
   229ac:	add	r6, r6, #1
   229b0:	cmp	r6, r2
   229b4:	str	r7, [sp, #24]
   229b8:	mov	r3, r8
   229bc:	bge	22b64 <__assert_fail@plt+0x1188c>
   229c0:	ldr	r1, [r4, #20]
   229c4:	ldr	r9, [r1, r6, lsl #2]
   229c8:	ldr	r1, [sp, #24]
   229cc:	ldr	r7, [r9, #4]
   229d0:	sub	r5, r7, r1
   229d4:	cmp	r5, #0
   229d8:	addle	r8, r5, r3
   229dc:	ble	22a14 <__assert_fail@plt+0x1173c>
   229e0:	ldr	r1, [sl, #28]
   229e4:	add	r8, r5, r3
   229e8:	cmp	r8, r1
   229ec:	bgt	22a44 <__assert_fail@plt+0x1176c>
   229f0:	ldr	r1, [sp, #24]
   229f4:	add	r0, fp, r3
   229f8:	mov	r2, r5
   229fc:	add	r1, fp, r1
   22a00:	str	r3, [sp, #28]
   22a04:	bl	110a4 <memcmp@plt>
   22a08:	ldr	r3, [sp, #28]
   22a0c:	cmp	r0, #0
   22a10:	bne	22ce4 <__assert_fail@plt+0x11a0c>
   22a14:	ldr	r3, [sp, #32]
   22a18:	mov	r2, r9
   22a1c:	str	r3, [sp]
   22a20:	mov	r1, r4
   22a24:	ldr	r3, [sp, #48]	; 0x30
   22a28:	mov	r0, sl
   22a2c:	bl	223dc <__assert_fail@plt+0x11104>
   22a30:	ldr	fp, [sl, #4]
   22a34:	cmp	r0, #1
   22a38:	bls	229a8 <__assert_fail@plt+0x116d0>
   22a3c:	add	sp, sp, #92	; 0x5c
   22a40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22a44:	ldr	r0, [sl, #48]	; 0x30
   22a48:	cmp	r8, r0
   22a4c:	bgt	22db8 <__assert_fail@plt+0x11ae0>
   22a50:	ldr	r2, [sl, #36]	; 0x24
   22a54:	ldr	fp, [sl, #104]	; 0x68
   22a58:	cmp	r8, r2
   22a5c:	cmpge	r0, r2
   22a60:	bgt	22b24 <__assert_fail@plt+0x1184c>
   22a64:	cmp	r1, r0
   22a68:	blt	22b24 <__assert_fail@plt+0x1184c>
   22a6c:	cmp	r8, fp
   22a70:	ble	22a9c <__assert_fail@plt+0x117c4>
   22a74:	sub	r2, r8, fp
   22a78:	ldr	r0, [sl, #100]	; 0x64
   22a7c:	add	fp, fp, #1
   22a80:	lsl	r2, r2, #2
   22a84:	add	r0, r0, fp, lsl #2
   22a88:	mov	r1, #0
   22a8c:	str	r3, [sp, #28]
   22a90:	bl	111f4 <memset@plt>
   22a94:	ldr	r3, [sp, #28]
   22a98:	str	r8, [sl, #104]	; 0x68
   22a9c:	ldr	fp, [sl, #4]
   22aa0:	b	229f0 <__assert_fail@plt+0x11718>
   22aa4:	ldr	r2, [sp, #24]
   22aa8:	mov	r1, r6
   22aac:	add	r0, sp, #72	; 0x48
   22ab0:	bl	206b0 <__assert_fail@plt+0xf3d8>
   22ab4:	ldr	r3, [sl, #100]	; 0x64
   22ab8:	str	r0, [r7, r5, lsl #2]
   22abc:	ldr	r2, [r3, r5, lsl #2]
   22ac0:	cmp	r2, #0
   22ac4:	bne	22898 <__assert_fail@plt+0x115c0>
   22ac8:	ldr	r0, [sp, #72]	; 0x48
   22acc:	cmp	r0, #0
   22ad0:	beq	22898 <__assert_fail@plt+0x115c0>
   22ad4:	b	22a3c <__assert_fail@plt+0x11764>
   22ad8:	ldr	r3, [sp, #24]
   22adc:	mov	r0, sl
   22ae0:	add	r5, r3, #4
   22ae4:	add	r7, r3, #8
   22ae8:	mov	r2, r7
   22aec:	mov	r1, r5
   22af0:	mov	r3, r9
   22af4:	bl	189a0 <__assert_fail@plt+0x76c8>
   22af8:	cmp	r0, #0
   22afc:	str	r0, [sp, #72]	; 0x48
   22b00:	bne	22a3c <__assert_fail@plt+0x11764>
   22b04:	mov	r2, r7
   22b08:	mov	r1, r5
   22b0c:	mov	r0, sl
   22b10:	bl	225b0 <__assert_fail@plt+0x112d8>
   22b14:	cmp	r0, #0
   22b18:	str	r0, [sp, #72]	; 0x48
   22b1c:	beq	228bc <__assert_fail@plt+0x115e4>
   22b20:	b	22a3c <__assert_fail@plt+0x11764>
   22b24:	add	r1, r8, #1
   22b28:	mov	r0, sl
   22b2c:	str	r3, [sp, #28]
   22b30:	bl	1c35c <__assert_fail@plt+0xb084>
   22b34:	ldr	r3, [sp, #28]
   22b38:	cmp	r0, #0
   22b3c:	beq	22a6c <__assert_fail@plt+0x11794>
   22b40:	b	22a3c <__assert_fail@plt+0x11764>
   22b44:	ldr	r0, [sp, #84]	; 0x54
   22b48:	bl	296b0 <__assert_fail@plt+0x183d8>
   22b4c:	ldr	r0, [sp, #72]	; 0x48
   22b50:	add	sp, sp, #92	; 0x5c
   22b54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22b58:	mov	r0, #0
   22b5c:	add	sp, sp, #92	; 0x5c
   22b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22b64:	mov	ip, fp
   22b68:	mov	fp, r7
   22b6c:	ldr	r3, [sp, #32]
   22b70:	add	r7, fp, #1
   22b74:	cmp	r3, r7
   22b78:	blt	22cdc <__assert_fail@plt+0x11a04>
   22b7c:	ldr	r9, [sp, #56]	; 0x38
   22b80:	lsl	r6, r7, #2
   22b84:	mov	fp, ip
   22b88:	ldr	r3, [r4]
   22b8c:	sub	r3, r7, r3
   22b90:	cmp	r3, #0
   22b94:	ble	22bc0 <__assert_fail@plt+0x118e8>
   22b98:	ldr	r3, [sl, #28]
   22b9c:	cmp	r3, r8
   22ba0:	ble	22d3c <__assert_fail@plt+0x11a64>
   22ba4:	add	r5, r8, #1
   22ba8:	add	r3, fp, r7
   22bac:	ldrb	r2, [fp, r8]
   22bb0:	ldrb	r3, [r3, #-1]
   22bb4:	cmp	r2, r3
   22bb8:	bne	22cd8 <__assert_fail@plt+0x11a00>
   22bbc:	mov	r8, r5
   22bc0:	ldr	r3, [sl, #100]	; 0x64
   22bc4:	ldr	r3, [r3, r6]
   22bc8:	cmp	r3, #0
   22bcc:	beq	22cc4 <__assert_fail@plt+0x119ec>
   22bd0:	ldr	ip, [r3, #8]
   22bd4:	cmp	ip, #0
   22bd8:	ble	22cc4 <__assert_fail@plt+0x119ec>
   22bdc:	ldr	r2, [r3, #12]
   22be0:	ldr	r3, [sp, #60]	; 0x3c
   22be4:	sub	r2, r2, #4
   22be8:	ldr	r0, [r3]
   22bec:	mov	r3, #0
   22bf0:	b	22bfc <__assert_fail@plt+0x11924>
   22bf4:	cmp	ip, r3
   22bf8:	beq	22cc4 <__assert_fail@plt+0x119ec>
   22bfc:	ldr	r5, [r2, #4]!
   22c00:	add	r3, r3, #1
   22c04:	add	r1, r0, r5, lsl #3
   22c08:	ldrb	r1, [r1, #4]
   22c0c:	cmp	r1, #9
   22c10:	bne	22bf4 <__assert_fail@plt+0x1191c>
   22c14:	ldr	r1, [r0, r5, lsl #3]
   22c18:	cmp	r9, r1
   22c1c:	bne	22bf4 <__assert_fail@plt+0x1191c>
   22c20:	cmn	r5, #1
   22c24:	beq	22cc4 <__assert_fail@plt+0x119ec>
   22c28:	ldr	r1, [r4, #8]
   22c2c:	cmp	r1, #0
   22c30:	beq	22d14 <__assert_fail@plt+0x11a3c>
   22c34:	mov	r0, #9
   22c38:	ldr	r3, [r4]
   22c3c:	ldr	r2, [r4, #4]
   22c40:	str	r0, [sp, #8]
   22c44:	stm	sp, {r5, r7}
   22c48:	mov	r0, sl
   22c4c:	bl	21b20 <__assert_fail@plt+0x10848>
   22c50:	cmp	r0, #1
   22c54:	beq	22cc4 <__assert_fail@plt+0x119ec>
   22c58:	cmp	r0, #0
   22c5c:	bne	22a3c <__assert_fail@plt+0x11764>
   22c60:	ldr	r3, [r4, #16]
   22c64:	ldr	r2, [r4, #12]
   22c68:	cmp	r3, r2
   22c6c:	beq	22d84 <__assert_fail@plt+0x11aac>
   22c70:	mov	r1, #20
   22c74:	mov	r0, #1
   22c78:	bl	2949c <__assert_fail@plt+0x181c4>
   22c7c:	cmp	r0, #0
   22c80:	beq	22d7c <__assert_fail@plt+0x11aa4>
   22c84:	ldr	r3, [r4, #16]
   22c88:	ldr	r2, [r4, #20]
   22c8c:	add	r1, r3, #1
   22c90:	str	r0, [r2, r3, lsl #2]
   22c94:	stm	r0, {r5, r7}
   22c98:	mov	r2, r0
   22c9c:	ldr	r0, [sp, #32]
   22ca0:	str	r1, [r4, #16]
   22ca4:	ldr	r3, [sp, #48]	; 0x30
   22ca8:	str	r0, [sp]
   22cac:	mov	r1, r4
   22cb0:	mov	r0, sl
   22cb4:	bl	223dc <__assert_fail@plt+0x11104>
   22cb8:	ldr	fp, [sl, #4]
   22cbc:	cmp	r0, #1
   22cc0:	bhi	22a3c <__assert_fail@plt+0x11764>
   22cc4:	ldr	r3, [sp, #32]
   22cc8:	add	r7, r7, #1
   22ccc:	cmp	r3, r7
   22cd0:	add	r6, r6, #4
   22cd4:	bge	22b88 <__assert_fail@plt+0x118b0>
   22cd8:	mov	ip, fp
   22cdc:	ldr	r1, [sl, #124]	; 0x7c
   22ce0:	b	22960 <__assert_fail@plt+0x11688>
   22ce4:	ldr	r7, [sp, #24]
   22ce8:	ldr	r2, [r4, #16]
   22cec:	mov	ip, fp
   22cf0:	cmp	r6, r2
   22cf4:	blt	22cdc <__assert_fail@plt+0x11a04>
   22cf8:	cmp	r6, #0
   22cfc:	movle	r8, r3
   22d00:	ldrle	r3, [sp, #32]
   22d04:	ble	22b74 <__assert_fail@plt+0x1189c>
   22d08:	mov	fp, r7
   22d0c:	mov	r8, r3
   22d10:	b	22b6c <__assert_fail@plt+0x11894>
   22d14:	ldr	r1, [r4]
   22d18:	mov	r0, #12
   22d1c:	sub	r1, r7, r1
   22d20:	add	r1, r1, #1
   22d24:	bl	2949c <__assert_fail@plt+0x181c4>
   22d28:	cmp	r0, #0
   22d2c:	str	r0, [r4, #8]
   22d30:	beq	22d7c <__assert_fail@plt+0x11aa4>
   22d34:	mov	r1, r0
   22d38:	b	22c34 <__assert_fail@plt+0x1195c>
   22d3c:	ldr	r3, [sl, #48]	; 0x30
   22d40:	cmp	r3, r8
   22d44:	ble	22cd8 <__assert_fail@plt+0x11a00>
   22d48:	add	r5, r8, #1
   22d4c:	mov	r1, r5
   22d50:	mov	r0, sl
   22d54:	bl	1c35c <__assert_fail@plt+0xb084>
   22d58:	cmp	r0, #0
   22d5c:	bne	22a3c <__assert_fail@plt+0x11764>
   22d60:	ldr	fp, [sl, #4]
   22d64:	b	22ba8 <__assert_fail@plt+0x118d0>
   22d68:	ldr	r9, [sp, #32]
   22d6c:	ldr	fp, [sp, #48]	; 0x30
   22d70:	ldr	r8, [sp, #68]	; 0x44
   22d74:	ldr	ip, [sl, #108]	; 0x6c
   22d78:	b	22758 <__assert_fail@plt+0x11480>
   22d7c:	mov	r0, #12
   22d80:	b	22a3c <__assert_fail@plt+0x11764>
   22d84:	lsl	r3, r3, #1
   22d88:	add	fp, r3, #1
   22d8c:	ldr	r0, [r4, #20]
   22d90:	lsl	r1, fp, #2
   22d94:	bl	29510 <__assert_fail@plt+0x18238>
   22d98:	cmp	r0, #0
   22d9c:	beq	22d7c <__assert_fail@plt+0x11aa4>
   22da0:	str	r0, [r4, #20]
   22da4:	str	fp, [r4, #12]
   22da8:	b	22c70 <__assert_fail@plt+0x11998>
   22dac:	ldr	r8, [sp, #32]
   22db0:	mov	r3, r8
   22db4:	b	22b74 <__assert_fail@plt+0x1189c>
   22db8:	ldr	r7, [sp, #24]
   22dbc:	mov	ip, fp
   22dc0:	b	22cf0 <__assert_fail@plt+0x11a18>
   22dc4:	andeq	pc, r3, r0, lsl #30
   22dc8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   22dcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22dd0:	mov	r4, r1
   22dd4:	ldr	r3, [r1, #104]	; 0x68
   22dd8:	ldr	r5, [r1, #40]	; 0x28
   22ddc:	sub	sp, sp, #20
   22de0:	cmp	r5, r3
   22de4:	mov	r8, r0
   22de8:	ldr	r7, [r1, #84]	; 0x54
   22dec:	ldr	r3, [r1, #100]	; 0x64
   22df0:	ble	22e1c <__assert_fail@plt+0x11b44>
   22df4:	mov	r6, r2
   22df8:	lsl	r9, r5, #2
   22dfc:	str	r2, [r3, r5, lsl #2]
   22e00:	str	r5, [r1, #104]	; 0x68
   22e04:	ldr	r3, [r7, #76]	; 0x4c
   22e08:	cmp	r3, #0
   22e0c:	bne	22ee8 <__assert_fail@plt+0x11c10>
   22e10:	mov	r0, r6
   22e14:	add	sp, sp, #20
   22e18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22e1c:	ldr	r1, [r3, r5, lsl #2]
   22e20:	lsl	r9, r5, #2
   22e24:	cmp	r1, #0
   22e28:	add	sl, r3, r9
   22e2c:	streq	r2, [r3, r5, lsl #2]
   22e30:	moveq	r6, r2
   22e34:	beq	22e04 <__assert_fail@plt+0x11b2c>
   22e38:	cmp	r2, #0
   22e3c:	ldr	r3, [r1, #40]	; 0x28
   22e40:	beq	22eac <__assert_fail@plt+0x11bd4>
   22e44:	ldr	sl, [r2, #40]	; 0x28
   22e48:	add	r0, sp, #4
   22e4c:	mov	r2, r3
   22e50:	mov	r1, sl
   22e54:	bl	17a78 <__assert_fail@plt+0x67a0>
   22e58:	cmp	r0, #0
   22e5c:	str	r0, [r8]
   22e60:	bne	22f48 <__assert_fail@plt+0x11c70>
   22e64:	ldr	r1, [r4, #40]	; 0x28
   22e68:	ldr	r2, [r4, #88]	; 0x58
   22e6c:	sub	r1, r1, #1
   22e70:	mov	r0, r4
   22e74:	bl	17d08 <__assert_fail@plt+0x6a30>
   22e78:	add	r2, sp, #4
   22e7c:	mov	r1, r7
   22e80:	ldr	fp, [r4, #100]	; 0x64
   22e84:	mov	r3, r0
   22e88:	mov	r0, r8
   22e8c:	bl	206b0 <__assert_fail@plt+0xf3d8>
   22e90:	cmp	sl, #0
   22e94:	mov	r6, r0
   22e98:	str	r0, [fp, r5, lsl #2]
   22e9c:	beq	22e04 <__assert_fail@plt+0x11b2c>
   22ea0:	ldr	r0, [sp, #12]
   22ea4:	bl	296b0 <__assert_fail@plt+0x183d8>
   22ea8:	b	22e04 <__assert_fail@plt+0x11b2c>
   22eac:	ldm	r3, {r0, r1, r2}
   22eb0:	add	r6, sp, #4
   22eb4:	stm	r6, {r0, r1, r2}
   22eb8:	sub	r1, r5, #1
   22ebc:	ldr	r2, [r4, #88]	; 0x58
   22ec0:	mov	r0, r4
   22ec4:	bl	17d08 <__assert_fail@plt+0x6a30>
   22ec8:	mov	r2, r6
   22ecc:	mov	r1, r7
   22ed0:	mov	r3, r0
   22ed4:	mov	r0, r8
   22ed8:	bl	206b0 <__assert_fail@plt+0xf3d8>
   22edc:	mov	r6, r0
   22ee0:	str	r0, [sl]
   22ee4:	b	22e04 <__assert_fail@plt+0x11b2c>
   22ee8:	cmp	r6, #0
   22eec:	beq	22f48 <__assert_fail@plt+0x11c70>
   22ef0:	add	r7, r6, #8
   22ef4:	add	sl, r6, #12
   22ef8:	mov	r3, r5
   22efc:	mov	r1, r7
   22f00:	mov	r2, sl
   22f04:	mov	r0, r4
   22f08:	bl	189a0 <__assert_fail@plt+0x76c8>
   22f0c:	cmp	r0, #0
   22f10:	str	r0, [r8]
   22f14:	bne	22f48 <__assert_fail@plt+0x11c70>
   22f18:	ldrb	r3, [r6, #52]	; 0x34
   22f1c:	tst	r3, #64	; 0x40
   22f20:	beq	22e10 <__assert_fail@plt+0x11b38>
   22f24:	mov	r2, sl
   22f28:	mov	r1, r7
   22f2c:	mov	r0, r4
   22f30:	bl	225b0 <__assert_fail@plt+0x112d8>
   22f34:	cmp	r0, #0
   22f38:	str	r0, [r8]
   22f3c:	ldreq	r3, [r4, #100]	; 0x64
   22f40:	ldreq	r6, [r3, r9]
   22f44:	beq	22e10 <__assert_fail@plt+0x11b38>
   22f48:	mov	r6, #0
   22f4c:	b	22e10 <__assert_fail@plt+0x11b38>
   22f50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f54:	mov	r7, r0
   22f58:	sub	sp, sp, #420	; 0x1a4
   22f5c:	mov	r5, r3
   22f60:	ldr	r3, [r7]
   22f64:	str	r0, [sp, #44]	; 0x2c
   22f68:	str	r1, [sp, #60]	; 0x3c
   22f6c:	str	r2, [sp, #72]	; 0x48
   22f70:	mov	r1, #0
   22f74:	add	r0, sp, #140	; 0x8c
   22f78:	mov	r2, #136	; 0x88
   22f7c:	mov	r8, r3
   22f80:	str	r3, [sp, #28]
   22f84:	ldr	r4, [sp, #456]	; 0x1c8
   22f88:	ldr	r6, [sp, #464]	; 0x1d0
   22f8c:	bl	111f4 <memset@plt>
   22f90:	ldr	r1, [r7, #16]
   22f94:	str	r8, [sp, #224]	; 0xe0
   22f98:	cmp	r1, #0
   22f9c:	streq	r1, [sp, #64]	; 0x40
   22fa0:	beq	22fcc <__assert_fail@plt+0x11cf4>
   22fa4:	ldrb	r2, [r7, #28]
   22fa8:	subs	r3, r5, r4
   22fac:	movne	r3, #1
   22fb0:	ands	r3, r3, r2, lsr #3
   22fb4:	streq	r3, [sp, #64]	; 0x40
   22fb8:	beq	22fcc <__assert_fail@plt+0x11cf4>
   22fbc:	tst	r2, #1
   22fc0:	moveq	r3, r1
   22fc4:	movne	r3, #0
   22fc8:	str	r3, [sp, #64]	; 0x40
   22fcc:	ldr	r3, [sp, #44]	; 0x2c
   22fd0:	ldr	r3, [r3, #24]
   22fd4:	cmp	r3, r6
   22fd8:	subcc	r2, r6, #1
   22fdc:	subcc	r3, r2, r3
   22fe0:	ldr	r2, [sp, #44]	; 0x2c
   22fe4:	movcs	r3, #0
   22fe8:	str	r3, [sp, #96]	; 0x60
   22fec:	ldr	r2, [r2, #8]
   22ff0:	cmp	r2, #0
   22ff4:	beq	236e4 <__assert_fail@plt+0x1240c>
   22ff8:	ldr	r2, [sp, #28]
   22ffc:	ldr	r2, [r2, #36]	; 0x24
   23000:	cmp	r2, #0
   23004:	beq	236e4 <__assert_fail@plt+0x1240c>
   23008:	ldr	r1, [sp, #28]
   2300c:	ldr	r1, [r1, #40]	; 0x28
   23010:	cmp	r1, #0
   23014:	beq	236e4 <__assert_fail@plt+0x1240c>
   23018:	ldr	r0, [sp, #28]
   2301c:	ldr	ip, [r0, #44]	; 0x2c
   23020:	cmp	ip, #0
   23024:	beq	236e4 <__assert_fail@plt+0x1240c>
   23028:	ldr	r0, [r0, #48]	; 0x30
   2302c:	cmp	r0, #0
   23030:	beq	236e4 <__assert_fail@plt+0x1240c>
   23034:	ldr	r2, [r2, #8]
   23038:	cmp	r2, #0
   2303c:	bne	23080 <__assert_fail@plt+0x11da8>
   23040:	ldr	r2, [r1, #8]
   23044:	cmp	r2, #0
   23048:	bne	23080 <__assert_fail@plt+0x11da8>
   2304c:	ldr	r2, [ip, #8]
   23050:	cmp	r2, #0
   23054:	beq	23068 <__assert_fail@plt+0x11d90>
   23058:	ldr	r2, [sp, #44]	; 0x2c
   2305c:	ldrsb	r2, [r2, #28]
   23060:	cmp	r2, #0
   23064:	blt	23080 <__assert_fail@plt+0x11da8>
   23068:	cmp	r5, #0
   2306c:	cmpne	r4, #0
   23070:	movne	r4, #1
   23074:	moveq	r4, #0
   23078:	bne	236e4 <__assert_fail@plt+0x1240c>
   2307c:	mov	r5, r4
   23080:	subs	r3, r6, r3
   23084:	str	r3, [sp, #56]	; 0x38
   23088:	movne	r3, #1
   2308c:	strne	r3, [sp, #36]	; 0x24
   23090:	beq	2338c <__assert_fail@plt+0x120b4>
   23094:	ldr	r2, [sp, #28]
   23098:	ldr	lr, [sp, #44]	; 0x2c
   2309c:	ldr	ip, [sp, #72]	; 0x48
   230a0:	ldr	r3, [r2, #8]
   230a4:	ldr	r0, [r2, #92]	; 0x5c
   230a8:	add	r3, r3, #1
   230ac:	cmp	r3, r0
   230b0:	ldr	r1, [lr, #12]
   230b4:	ldrb	r2, [r2, #88]	; 0x58
   230b8:	movlt	r3, r0
   230bc:	add	r6, ip, #1
   230c0:	ldr	lr, [lr, #20]
   230c4:	cmp	r3, r6
   230c8:	movlt	r6, r3
   230cc:	lsr	r1, r1, #22
   230d0:	adds	r8, lr, #0
   230d4:	and	r1, r1, #1
   230d8:	movne	r8, #1
   230dc:	lsr	r3, r2, #2
   230e0:	ldr	r7, [sp, #60]	; 0x3c
   230e4:	lsr	r2, r2, #3
   230e8:	and	r3, r3, #1
   230ec:	and	r2, r2, #1
   230f0:	str	ip, [sp, #188]	; 0xbc
   230f4:	str	ip, [sp, #184]	; 0xb8
   230f8:	str	ip, [sp, #196]	; 0xc4
   230fc:	str	ip, [sp, #192]	; 0xc0
   23100:	cmp	r0, #1
   23104:	orr	ip, r1, r8
   23108:	str	lr, [sp, #80]	; 0x50
   2310c:	str	r7, [sp, #140]	; 0x8c
   23110:	str	r0, [sp, #220]	; 0xdc
   23114:	str	lr, [sp, #204]	; 0xcc
   23118:	strb	r1, [sp, #212]	; 0xd4
   2311c:	strb	ip, [sp, #215]	; 0xd7
   23120:	strb	r3, [sp, #213]	; 0xd5
   23124:	strb	r2, [sp, #214]	; 0xd6
   23128:	ble	23178 <__assert_fail@plt+0x11ea0>
   2312c:	cmn	r6, #-1073741823	; 0xc0000001
   23130:	bhi	24494 <__assert_fail@plt+0x131bc>
   23134:	lsl	r7, r6, #2
   23138:	mov	r1, r7
   2313c:	mov	r0, #0
   23140:	bl	29510 <__assert_fail@plt+0x18238>
   23144:	subs	r3, r0, #0
   23148:	beq	2371c <__assert_fail@plt+0x12444>
   2314c:	ldr	r0, [sp, #152]	; 0x98
   23150:	str	r3, [sp, #148]	; 0x94
   23154:	cmp	r0, #0
   23158:	ldrbeq	ip, [sp, #215]	; 0xd7
   2315c:	beq	23178 <__assert_fail@plt+0x11ea0>
   23160:	mov	r1, r7
   23164:	bl	29510 <__assert_fail@plt+0x18238>
   23168:	cmp	r0, #0
   2316c:	beq	2371c <__assert_fail@plt+0x12444>
   23170:	ldrb	ip, [sp, #215]	; 0xd7
   23174:	str	r0, [sp, #152]	; 0x98
   23178:	cmp	ip, #0
   2317c:	bne	24284 <__assert_fail@plt+0x12fac>
   23180:	ldr	r2, [sp, #28]
   23184:	str	r6, [sp, #176]	; 0xb0
   23188:	add	r2, r2, #96	; 0x60
   2318c:	ldrb	r3, [r2, #-8]
   23190:	str	r2, [sp, #208]	; 0xd0
   23194:	lsr	r3, r3, #4
   23198:	and	r3, r3, #1
   2319c:	strb	r3, [sp, #218]	; 0xda
   231a0:	ldr	r3, [sp, #28]
   231a4:	ldr	r2, [sp, #60]	; 0x3c
   231a8:	ldr	r3, [r3, #92]	; 0x5c
   231ac:	str	r2, [sp, #144]	; 0x90
   231b0:	cmp	r3, #1
   231b4:	ble	240e0 <__assert_fail@plt+0x12e08>
   231b8:	mov	r1, #0
   231bc:	ldr	r3, [sp, #44]	; 0x2c
   231c0:	mvn	r2, #0
   231c4:	str	r1, [sp, #168]	; 0xa8
   231c8:	ldrb	r3, [r3, #28]
   231cc:	str	r1, [sp, #172]	; 0xac
   231d0:	lsr	r3, r3, #7
   231d4:	strb	r3, [sp, #217]	; 0xd9
   231d8:	ldr	r3, [sp, #28]
   231dc:	ldr	r7, [r3, #76]	; 0x4c
   231e0:	ldr	r3, [sp, #460]	; 0x1cc
   231e4:	str	r2, [sp, #232]	; 0xe8
   231e8:	str	r3, [sp, #196]	; 0xc4
   231ec:	str	r3, [sp, #192]	; 0xc0
   231f0:	lsl	r6, r7, #1
   231f4:	ldr	r3, [sp, #472]	; 0x1d8
   231f8:	cmp	r6, #0
   231fc:	str	r3, [sp, #228]	; 0xe4
   23200:	ble	2323c <__assert_fail@plt+0x11f64>
   23204:	ldr	r3, [pc, #4032]	; 241cc <__assert_fail@plt+0x12ef4>
   23208:	cmp	r6, r3
   2320c:	bgt	2371c <__assert_fail@plt+0x12444>
   23210:	add	r0, r6, r7, lsl #2
   23214:	lsl	r0, r0, #3
   23218:	bl	294e4 <__assert_fail@plt+0x1820c>
   2321c:	str	r0, [sp, #256]	; 0x100
   23220:	lsl	r0, r7, #3
   23224:	bl	294e4 <__assert_fail@plt+0x1820c>
   23228:	ldr	r3, [sp, #256]	; 0x100
   2322c:	cmp	r0, #0
   23230:	cmpne	r3, #0
   23234:	str	r0, [sp, #272]	; 0x110
   23238:	beq	2371c <__assert_fail@plt+0x12444>
   2323c:	ldr	r3, [sp, #56]	; 0x38
   23240:	str	r6, [sp, #252]	; 0xfc
   23244:	cmp	r3, #1
   23248:	mov	r3, #1
   2324c:	str	r6, [sp, #268]	; 0x10c
   23250:	str	r3, [sp, #260]	; 0x104
   23254:	bls	242cc <__assert_fail@plt+0x12ff4>
   23258:	ldr	r3, [sp, #176]	; 0xb0
   2325c:	cmn	r3, #-1073741822	; 0xc0000002
   23260:	bhi	2371c <__assert_fail@plt+0x12444>
   23264:	add	r3, r3, #1
   23268:	lsl	r0, r3, #2
   2326c:	bl	294e4 <__assert_fail@plt+0x1820c>
   23270:	cmp	r0, #0
   23274:	str	r0, [sp, #240]	; 0xf0
   23278:	beq	23ce4 <__assert_fail@plt+0x12a0c>
   2327c:	ldr	r3, [sp, #472]	; 0x1d8
   23280:	str	r5, [sp, #112]	; 0x70
   23284:	tst	r3, #1
   23288:	moveq	r3, #6
   2328c:	movne	r3, #4
   23290:	cmp	r5, r4
   23294:	movle	r2, #1
   23298:	mvngt	r2, #0
   2329c:	str	r2, [sp, #92]	; 0x5c
   232a0:	str	r3, [sp, #200]	; 0xc8
   232a4:	movlt	r2, r5
   232a8:	movge	r2, r4
   232ac:	ldr	r3, [sp, #28]
   232b0:	str	r2, [sp, #68]	; 0x44
   232b4:	movge	r2, r5
   232b8:	movlt	r2, r4
   232bc:	str	r2, [sp, #52]	; 0x34
   232c0:	ldr	r2, [sp, #64]	; 0x40
   232c4:	ldr	r3, [r3, #92]	; 0x5c
   232c8:	cmp	r2, #0
   232cc:	str	r3, [sp, #84]	; 0x54
   232d0:	beq	24414 <__assert_fail@plt+0x1313c>
   232d4:	cmp	r3, #1
   232d8:	moveq	r3, #4
   232dc:	beq	23304 <__assert_fail@plt+0x1202c>
   232e0:	ldr	r3, [sp, #44]	; 0x2c
   232e4:	ldr	r2, [sp, #80]	; 0x50
   232e8:	ldr	r3, [r3, #12]
   232ec:	lsr	r3, r3, #22
   232f0:	eor	r3, r3, #1
   232f4:	cmp	r2, #0
   232f8:	movne	r3, #0
   232fc:	andeq	r3, r3, #1
   23300:	lsl	r3, r3, #2
   23304:	cmp	r5, r4
   23308:	orr	r3, r8, r3
   2330c:	movle	r2, #2
   23310:	movgt	r2, #0
   23314:	orr	r3, r3, r2
   23318:	ldr	r2, [sp, #68]	; 0x44
   2331c:	ldr	r1, [sp, #52]	; 0x34
   23320:	cmp	r5, r2
   23324:	movge	r2, #0
   23328:	movlt	r2, #1
   2332c:	cmp	r5, r1
   23330:	orrgt	r2, r2, #1
   23334:	cmp	r2, #0
   23338:	str	r2, [sp, #108]	; 0x6c
   2333c:	bne	236d4 <__assert_fail@plt+0x123fc>
   23340:	sub	r3, r3, #4
   23344:	cmp	r5, r4
   23348:	str	r3, [sp, #88]	; 0x58
   2334c:	add	r3, sp, #416	; 0x1a0
   23350:	suble	r3, r3, #304	; 0x130
   23354:	movgt	r3, #0
   23358:	str	r3, [sp, #100]	; 0x64
   2335c:	movle	r3, #1
   23360:	movgt	r3, #0
   23364:	str	r3, [sp, #104]	; 0x68
   23368:	ldr	r3, [sp, #88]	; 0x58
   2336c:	cmp	r3, #4
   23370:	ldrls	pc, [pc, r3, lsl #2]
   23374:	b	24110 <__assert_fail@plt+0x12e38>
   23378:	andeq	r4, r2, r8, asr r0
   2337c:	andeq	r4, r2, r8, asr r0
   23380:	andeq	r3, r2, r4, lsr #7
   23384:	andeq	r3, r2, ip, ror #31
   23388:	andeq	r3, r2, r8, asr #8
   2338c:	ldr	r3, [sp, #28]
   23390:	ldr	r3, [r3, #76]	; 0x4c
   23394:	adds	r3, r3, #0
   23398:	movne	r3, #1
   2339c:	str	r3, [sp, #36]	; 0x24
   233a0:	b	23094 <__assert_fail@plt+0x11dbc>
   233a4:	ldr	r3, [sp, #52]	; 0x34
   233a8:	cmp	r3, r5
   233ac:	ble	23404 <__assert_fail@plt+0x1212c>
   233b0:	ldr	r3, [sp, #60]	; 0x3c
   233b4:	ldr	r1, [sp, #64]	; 0x40
   233b8:	ldrb	r2, [r3, r5]
   233bc:	add	r3, r3, r5
   233c0:	ldrb	r2, [r1, r2]
   233c4:	cmp	r2, #0
   233c8:	bne	23448 <__assert_fail@plt+0x12170>
   233cc:	mov	ip, r1
   233d0:	add	r2, r5, #1
   233d4:	ldr	r0, [sp, #52]	; 0x34
   233d8:	b	233f0 <__assert_fail@plt+0x12118>
   233dc:	ldrb	r1, [r3, #1]!
   233e0:	add	r2, r2, #1
   233e4:	ldrb	r1, [ip, r1]
   233e8:	cmp	r1, #0
   233ec:	bne	242e0 <__assert_fail@plt+0x13008>
   233f0:	cmp	r0, r2
   233f4:	mov	r5, r2
   233f8:	bne	233dc <__assert_fail@plt+0x12104>
   233fc:	ldr	r3, [sp, #52]	; 0x34
   23400:	str	r3, [sp, #112]	; 0x70
   23404:	cmp	r3, r5
   23408:	bne	23448 <__assert_fail@plt+0x12170>
   2340c:	ldr	r2, [sp, #72]	; 0x48
   23410:	ldr	r1, [sp, #80]	; 0x50
   23414:	cmp	r2, r3
   23418:	movle	r3, #0
   2341c:	ldrgt	r2, [sp, #60]	; 0x3c
   23420:	ldrbgt	r3, [r2, r3]
   23424:	cmp	r1, #0
   23428:	mov	r2, r3
   2342c:	movne	r2, r1
   23430:	ldrbne	r2, [r2, r3]
   23434:	ldr	r3, [sp, #64]	; 0x40
   23438:	ldrb	r3, [r3, r2]
   2343c:	cmp	r3, #0
   23440:	beq	236d4 <__assert_fail@plt+0x123fc>
   23444:	ldr	r5, [sp, #52]	; 0x34
   23448:	ldr	r2, [sp, #472]	; 0x1d8
   2344c:	mov	r1, r5
   23450:	add	r0, sp, #140	; 0x8c
   23454:	bl	17df4 <__assert_fail@plt+0x6b1c>
   23458:	subs	r3, r0, #0
   2345c:	str	r3, [sp, #48]	; 0x30
   23460:	bne	24370 <__assert_fail@plt+0x13098>
   23464:	ldr	r3, [sp, #84]	; 0x54
   23468:	cmp	r3, #1
   2346c:	beq	2348c <__assert_fail@plt+0x121b4>
   23470:	ldr	r3, [sp, #168]	; 0xa8
   23474:	cmp	r3, #0
   23478:	beq	2348c <__assert_fail@plt+0x121b4>
   2347c:	ldr	r3, [sp, #148]	; 0x94
   23480:	ldr	r3, [r3]
   23484:	cmn	r3, #1
   23488:	beq	236a4 <__assert_fail@plt+0x123cc>
   2348c:	ldr	r4, [sp, #224]	; 0xe0
   23490:	mov	r3, #0
   23494:	str	r3, [sp, #260]	; 0x104
   23498:	ldr	fp, [r4, #36]	; 0x24
   2349c:	str	r3, [sp, #248]	; 0xf8
   234a0:	str	r3, [sp, #244]	; 0xf4
   234a4:	str	r3, [sp, #116]	; 0x74
   234a8:	ldrsb	r3, [fp, #52]	; 0x34
   234ac:	ldr	r2, [sp, #180]	; 0xb4
   234b0:	cmp	r3, #0
   234b4:	str	r2, [sp, #12]
   234b8:	blt	241a0 <__assert_fail@plt+0x12ec8>
   234bc:	ldr	r3, [sp, #240]	; 0xf0
   234c0:	cmp	r3, #0
   234c4:	beq	24314 <__assert_fail@plt+0x1303c>
   234c8:	ldr	r2, [r4, #76]	; 0x4c
   234cc:	ldr	r1, [sp, #12]
   234d0:	cmp	r2, #0
   234d4:	str	fp, [r3, r1, lsl #2]
   234d8:	bne	243b4 <__assert_fail@plt+0x130dc>
   234dc:	ldrb	r3, [fp, #52]	; 0x34
   234e0:	ldr	r2, [sp, #104]	; 0x68
   234e4:	str	r2, [sp, #16]
   234e8:	tst	r3, #16
   234ec:	bne	24380 <__assert_fail@plt+0x130a8>
   234f0:	mvn	r3, #0
   234f4:	str	r3, [sp, #20]
   234f8:	mov	r3, #0
   234fc:	str	r3, [sp, #40]	; 0x28
   23500:	ldr	r3, [sp, #100]	; 0x64
   23504:	ldr	r5, [sp, #180]	; 0xb4
   23508:	str	r3, [sp, #32]
   2350c:	b	23518 <__assert_fail@plt+0x12240>
   23510:	ldr	r5, [sp, #180]	; 0xb4
   23514:	mov	fp, r4
   23518:	ldr	r3, [sp, #196]	; 0xc4
   2351c:	cmp	r3, r5
   23520:	ble	237dc <__assert_fail@plt+0x12504>
   23524:	ldr	r3, [sp, #176]	; 0xb0
   23528:	add	r9, r5, #1
   2352c:	cmp	r9, r3
   23530:	bge	23bf4 <__assert_fail@plt+0x1291c>
   23534:	ldr	r3, [sp, #168]	; 0xa8
   23538:	cmp	r9, r3
   2353c:	bge	23c50 <__assert_fail@plt+0x12978>
   23540:	ldrb	r3, [fp, #52]	; 0x34
   23544:	tst	r3, #32
   23548:	bne	239c8 <__assert_fail@plt+0x126f0>
   2354c:	ldr	r3, [sp, #144]	; 0x90
   23550:	add	r2, r5, #1
   23554:	str	r2, [sp, #180]	; 0xb4
   23558:	ldrb	r4, [r3, r5]
   2355c:	ldr	r3, [fp, #44]	; 0x2c
   23560:	cmp	r3, #0
   23564:	beq	23c20 <__assert_fail@plt+0x12948>
   23568:	ldr	r4, [r3, r4, lsl #2]
   2356c:	ldr	r3, [sp, #240]	; 0xf0
   23570:	cmp	r3, #0
   23574:	beq	2358c <__assert_fail@plt+0x122b4>
   23578:	mov	r2, r4
   2357c:	add	r1, sp, #140	; 0x8c
   23580:	add	r0, sp, #116	; 0x74
   23584:	bl	22dcc <__assert_fail@plt+0x11af4>
   23588:	mov	r4, r0
   2358c:	cmp	r4, #0
   23590:	beq	23770 <__assert_fail@plt+0x12498>
   23594:	ldr	r2, [sp, #16]
   23598:	ldrb	r3, [r4, #52]	; 0x34
   2359c:	cmp	fp, r4
   235a0:	movne	r2, #0
   235a4:	andeq	r2, r2, #1
   235a8:	ldr	r1, [sp, #12]
   235ac:	cmp	r2, #0
   235b0:	movne	r1, r9
   235b4:	tst	r3, #16
   235b8:	str	r2, [sp, #16]
   235bc:	str	r1, [sp, #12]
   235c0:	beq	23510 <__assert_fail@plt+0x12238>
   235c4:	tst	r3, #128	; 0x80
   235c8:	bne	23974 <__assert_fail@plt+0x1269c>
   235cc:	ldr	r3, [sp, #180]	; 0xb4
   235d0:	str	r3, [sp, #20]
   235d4:	ldr	r3, [sp, #36]	; 0x24
   235d8:	cmp	r3, #0
   235dc:	beq	237fc <__assert_fail@plt+0x12524>
   235e0:	mov	r3, #1
   235e4:	str	r3, [sp, #40]	; 0x28
   235e8:	mov	r3, #0
   235ec:	ldr	r5, [sp, #20]
   235f0:	str	r3, [sp, #32]
   235f4:	b	23514 <__assert_fail@plt+0x1223c>
   235f8:	ldr	r0, [sp, #12]
   235fc:	bl	296b0 <__assert_fail@plt+0x183d8>
   23600:	mov	r0, #0
   23604:	bl	296b0 <__assert_fail@plt+0x183d8>
   23608:	ldr	r3, [sp, #264]	; 0x108
   2360c:	cmp	r3, #0
   23610:	movgt	r4, #0
   23614:	ble	23694 <__assert_fail@plt+0x123bc>
   23618:	ldr	r3, [sp, #272]	; 0x110
   2361c:	ldr	r7, [r3, r4, lsl #2]
   23620:	ldr	r3, [r7, #16]
   23624:	cmp	r3, #0
   23628:	movgt	r5, #0
   2362c:	ble	23658 <__assert_fail@plt+0x12380>
   23630:	ldr	r3, [r7, #20]
   23634:	ldr	r6, [r3, r5, lsl #2]
   23638:	add	r5, r5, #1
   2363c:	ldr	r0, [r6, #16]
   23640:	bl	296b0 <__assert_fail@plt+0x183d8>
   23644:	mov	r0, r6
   23648:	bl	296b0 <__assert_fail@plt+0x183d8>
   2364c:	ldr	r3, [r7, #16]
   23650:	cmp	r5, r3
   23654:	blt	23630 <__assert_fail@plt+0x12358>
   23658:	ldr	r0, [r7, #20]
   2365c:	bl	296b0 <__assert_fail@plt+0x183d8>
   23660:	ldr	r3, [r7, #8]
   23664:	cmp	r3, #0
   23668:	beq	2367c <__assert_fail@plt+0x123a4>
   2366c:	ldr	r0, [r3, #8]
   23670:	bl	296b0 <__assert_fail@plt+0x183d8>
   23674:	ldr	r0, [r7, #8]
   23678:	bl	296b0 <__assert_fail@plt+0x183d8>
   2367c:	mov	r0, r7
   23680:	bl	296b0 <__assert_fail@plt+0x183d8>
   23684:	ldr	r3, [sp, #264]	; 0x108
   23688:	add	r4, r4, #1
   2368c:	cmp	r4, r3
   23690:	blt	23618 <__assert_fail@plt+0x12340>
   23694:	ldr	r5, [sp, #112]	; 0x70
   23698:	mov	r3, #0
   2369c:	str	r3, [sp, #264]	; 0x108
   236a0:	str	r3, [sp, #248]	; 0xf8
   236a4:	ldr	r3, [sp, #92]	; 0x5c
   236a8:	ldr	r2, [sp, #68]	; 0x44
   236ac:	add	r5, r5, r3
   236b0:	ldr	r3, [sp, #52]	; 0x34
   236b4:	str	r5, [sp, #112]	; 0x70
   236b8:	cmp	r3, r5
   236bc:	movge	r3, #0
   236c0:	movlt	r3, #1
   236c4:	cmp	r2, r5
   236c8:	orrgt	r3, r3, #1
   236cc:	cmp	r3, #0
   236d0:	beq	23368 <__assert_fail@plt+0x12090>
   236d4:	mov	r3, #1
   236d8:	ldr	r7, [sp, #240]	; 0xf0
   236dc:	str	r3, [sp, #48]	; 0x30
   236e0:	b	23728 <__assert_fail@plt+0x12450>
   236e4:	mov	r3, #1
   236e8:	str	r3, [sp, #48]	; 0x30
   236ec:	ldr	r0, [sp, #48]	; 0x30
   236f0:	add	sp, sp, #420	; 0x1a4
   236f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   236f8:	tst	r0, #4
   236fc:	beq	234bc <__assert_fail@plt+0x121e4>
   23700:	mov	r3, r0
   23704:	ldr	r2, [fp, #40]	; 0x28
   23708:	mov	r1, r4
   2370c:	add	r0, sp, #116	; 0x74
   23710:	bl	206b0 <__assert_fail@plt+0xf3d8>
   23714:	subs	fp, r0, #0
   23718:	bne	234bc <__assert_fail@plt+0x121e4>
   2371c:	ldr	r7, [sp, #240]	; 0xf0
   23720:	mov	r3, #12
   23724:	str	r3, [sp, #48]	; 0x30
   23728:	mov	r0, r7
   2372c:	bl	296b0 <__assert_fail@plt+0x183d8>
   23730:	ldr	r3, [sp, #28]
   23734:	ldr	r3, [r3, #76]	; 0x4c
   23738:	cmp	r3, #0
   2373c:	bne	241d8 <__assert_fail@plt+0x12f00>
   23740:	ldr	r0, [sp, #148]	; 0x94
   23744:	bl	296b0 <__assert_fail@plt+0x183d8>
   23748:	ldr	r0, [sp, #152]	; 0x98
   2374c:	bl	296b0 <__assert_fail@plt+0x183d8>
   23750:	ldrb	r3, [sp, #215]	; 0xd7
   23754:	cmp	r3, #0
   23758:	beq	236ec <__assert_fail@plt+0x12414>
   2375c:	ldr	r0, [sp, #144]	; 0x90
   23760:	bl	296b0 <__assert_fail@plt+0x183d8>
   23764:	ldr	r0, [sp, #48]	; 0x30
   23768:	add	sp, sp, #420	; 0x1a4
   2376c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23770:	ldr	r3, [sp, #116]	; 0x74
   23774:	cmp	r3, #0
   23778:	bne	243ac <__assert_fail@plt+0x130d4>
   2377c:	ldr	r2, [sp, #240]	; 0xf0
   23780:	cmp	r2, #0
   23784:	beq	237dc <__assert_fail@plt+0x12504>
   23788:	ldr	r3, [sp, #36]	; 0x24
   2378c:	eor	r5, r3, #1
   23790:	ldr	r3, [sp, #40]	; 0x28
   23794:	ands	r5, r5, r3
   23798:	bne	237dc <__assert_fail@plt+0x12504>
   2379c:	ldr	r3, [sp, #180]	; 0xb4
   237a0:	ldr	lr, [sp, #244]	; 0xf4
   237a4:	mov	r0, r3
   237a8:	add	r2, r2, r3, lsl #2
   237ac:	mov	ip, r5
   237b0:	b	237c8 <__assert_fail@plt+0x124f0>
   237b4:	ldr	r1, [r2, #4]!
   237b8:	mov	r0, r3
   237bc:	cmp	r1, #0
   237c0:	mov	ip, #1
   237c4:	bne	23998 <__assert_fail@plt+0x126c0>
   237c8:	add	r3, r3, #1
   237cc:	cmp	lr, r3
   237d0:	bge	237b4 <__assert_fail@plt+0x124dc>
   237d4:	cmp	ip, #0
   237d8:	strne	r0, [sp, #180]	; 0xb4
   237dc:	ldr	r3, [sp, #32]
   237e0:	cmp	r3, #0
   237e4:	beq	237fc <__assert_fail@plt+0x12524>
   237e8:	mov	r2, r3
   237ec:	ldr	r1, [sp, #12]
   237f0:	ldr	r3, [r3]
   237f4:	add	r3, r3, r1
   237f8:	str	r3, [r2]
   237fc:	ldr	r3, [sp, #20]
   23800:	cmn	r3, #1
   23804:	beq	23608 <__assert_fail@plt+0x12330>
   23808:	cmn	r3, #2
   2380c:	beq	2371c <__assert_fail@plt+0x12444>
   23810:	mov	r2, r3
   23814:	ldr	r3, [sp, #44]	; 0x2c
   23818:	str	r2, [sp, #232]	; 0xe8
   2381c:	ldr	r2, [sp, #56]	; 0x38
   23820:	ldrb	r3, [r3, #28]
   23824:	lsr	r3, r3, #4
   23828:	eor	r3, r3, #1
   2382c:	cmp	r2, #1
   23830:	movls	r3, #0
   23834:	andhi	r3, r3, #1
   23838:	cmp	r3, #0
   2383c:	beq	23c98 <__assert_fail@plt+0x129c0>
   23840:	ldr	r3, [sp, #20]
   23844:	ldr	r7, [sp, #240]	; 0xf0
   23848:	mov	r2, r3
   2384c:	add	r0, sp, #140	; 0x8c
   23850:	ldr	r1, [r7, r3, lsl #2]
   23854:	bl	18694 <__assert_fail@plt+0x73bc>
   23858:	ldr	r3, [sp, #28]
   2385c:	ldrb	r3, [r3, #88]	; 0x58
   23860:	tst	r3, #1
   23864:	str	r0, [sp, #236]	; 0xec
   23868:	beq	240cc <__assert_fail@plt+0x12df4>
   2386c:	ldr	r3, [sp, #20]
   23870:	ldr	r8, [sp, #224]	; 0xe0
   23874:	cmn	r3, #-1073741822	; 0xc0000002
   23878:	ldr	r9, [sp, #236]	; 0xec
   2387c:	bhi	23ce8 <__assert_fail@plt+0x12a10>
   23880:	add	r4, r3, #1
   23884:	lsl	r5, r4, #2
   23888:	mov	r0, r5
   2388c:	bl	294e4 <__assert_fail@plt+0x1820c>
   23890:	subs	r3, r0, #0
   23894:	str	r3, [sp, #12]
   23898:	beq	243f4 <__assert_fail@plt+0x1311c>
   2389c:	ldr	r3, [r8, #76]	; 0x4c
   238a0:	cmp	r3, #0
   238a4:	beq	23cf4 <__assert_fail@plt+0x12a1c>
   238a8:	mov	r0, r5
   238ac:	bl	294e4 <__assert_fail@plt+0x1820c>
   238b0:	subs	sl, r0, #0
   238b4:	beq	2441c <__assert_fail@plt+0x13144>
   238b8:	ldr	r6, [sp, #20]
   238bc:	ldr	fp, [sp, #12]
   238c0:	add	r5, sp, #292	; 0x124
   238c4:	lsl	r4, r4, #2
   238c8:	mov	r2, r4
   238cc:	mov	r1, #0
   238d0:	mov	r0, sl
   238d4:	bl	111f4 <memset@plt>
   238d8:	mov	r3, #0
   238dc:	str	fp, [sp, #276]	; 0x114
   238e0:	str	sl, [sp, #280]	; 0x118
   238e4:	str	r9, [sp, #284]	; 0x11c
   238e8:	str	r6, [sp, #288]	; 0x120
   238ec:	add	r1, sp, #276	; 0x114
   238f0:	str	r3, [r5]
   238f4:	str	r3, [r5, #4]
   238f8:	str	r3, [r5, #8]
   238fc:	add	r0, sp, #140	; 0x8c
   23900:	bl	1d78c <__assert_fail@plt+0xc4b4>
   23904:	mov	r7, r0
   23908:	ldr	r0, [sp, #300]	; 0x12c
   2390c:	bl	296b0 <__assert_fail@plt+0x183d8>
   23910:	cmp	r7, #0
   23914:	bne	240ec <__assert_fail@plt+0x12e14>
   23918:	ldr	r3, [fp]
   2391c:	cmp	r3, #0
   23920:	bne	24500 <__assert_fail@plt+0x13228>
   23924:	ldr	r3, [sl]
   23928:	cmp	r3, #0
   2392c:	bne	24500 <__assert_fail@plt+0x13228>
   23930:	ldr	r3, [sp, #240]	; 0xf0
   23934:	sub	r4, r4, #4
   23938:	add	r3, r3, r4
   2393c:	subs	r6, r6, #1
   23940:	bcc	241c4 <__assert_fail@plt+0x12eec>
   23944:	ldr	r1, [r3, #-4]!
   23948:	cmp	r1, #0
   2394c:	beq	2393c <__assert_fail@plt+0x12664>
   23950:	ldrb	r2, [r1, #52]	; 0x34
   23954:	tst	r2, #16
   23958:	beq	2393c <__assert_fail@plt+0x12664>
   2395c:	mov	r2, r6
   23960:	add	r0, sp, #140	; 0x8c
   23964:	bl	18694 <__assert_fail@plt+0x73bc>
   23968:	add	r4, r6, #1
   2396c:	mov	r9, r0
   23970:	b	238c4 <__assert_fail@plt+0x125ec>
   23974:	ldr	r5, [sp, #180]	; 0xb4
   23978:	mov	r1, r4
   2397c:	mov	r2, r5
   23980:	add	r0, sp, #140	; 0x8c
   23984:	bl	18694 <__assert_fail@plt+0x73bc>
   23988:	cmp	r0, #0
   2398c:	beq	23514 <__assert_fail@plt+0x1223c>
   23990:	str	r5, [sp, #20]
   23994:	b	235d4 <__assert_fail@plt+0x122fc>
   23998:	mov	r2, #0
   2399c:	add	r1, sp, #140	; 0x8c
   239a0:	add	r0, sp, #116	; 0x74
   239a4:	str	r3, [sp, #180]	; 0xb4
   239a8:	bl	22dcc <__assert_fail@plt+0x11af4>
   239ac:	ldr	r3, [sp, #116]	; 0x74
   239b0:	cmp	r3, #0
   239b4:	bne	24484 <__assert_fail@plt+0x131ac>
   239b8:	cmp	r0, #0
   239bc:	bne	244ec <__assert_fail@plt+0x13214>
   239c0:	ldr	r2, [sp, #240]	; 0xf0
   239c4:	b	2379c <__assert_fail@plt+0x124c4>
   239c8:	ldr	r3, [fp, #8]
   239cc:	ldr	sl, [sp, #224]	; 0xe0
   239d0:	cmp	r3, #0
   239d4:	ble	23ac0 <__assert_fail@plt+0x127e8>
   239d8:	add	r2, sl, #128	; 0x80
   239dc:	str	r9, [sp, #76]	; 0x4c
   239e0:	mov	r4, #0
   239e4:	str	r2, [sp, #24]
   239e8:	mov	r9, r3
   239ec:	b	23a54 <__assert_fail@plt+0x1277c>
   239f0:	tst	r0, #1
   239f4:	beq	23a48 <__assert_fail@plt+0x12770>
   239f8:	tst	r6, #8
   239fc:	bne	23a48 <__assert_fail@plt+0x12770>
   23a00:	tst	r6, #32
   23a04:	beq	23a10 <__assert_fail@plt+0x12738>
   23a08:	tst	r0, #2
   23a0c:	beq	23a48 <__assert_fail@plt+0x12770>
   23a10:	tst	r6, #128	; 0x80
   23a14:	beq	23a20 <__assert_fail@plt+0x12748>
   23a18:	tst	r0, #8
   23a1c:	beq	23a48 <__assert_fail@plt+0x12770>
   23a20:	str	r5, [sp]
   23a24:	mov	r0, r8
   23a28:	add	r3, sp, #140	; 0x8c
   23a2c:	mov	r2, r7
   23a30:	ldr	r1, [sp, #24]
   23a34:	bl	197e4 <__assert_fail@plt+0x850c>
   23a38:	cmp	r0, #0
   23a3c:	bne	23acc <__assert_fail@plt+0x127f4>
   23a40:	ldr	r5, [sp, #180]	; 0xb4
   23a44:	ldr	r9, [fp, #8]
   23a48:	add	r4, r4, #1
   23a4c:	cmp	r4, r9
   23a50:	bge	23abc <__assert_fail@plt+0x127e4>
   23a54:	ldr	r2, [fp, #12]
   23a58:	ldr	r8, [sl]
   23a5c:	ldr	r7, [r2, r4, lsl #2]
   23a60:	add	r2, r8, r7, lsl #3
   23a64:	ldrb	r1, [r2, #6]
   23a68:	tst	r1, #16
   23a6c:	beq	23a48 <__assert_fail@plt+0x12770>
   23a70:	ldr	r6, [r2, #4]
   23a74:	ldr	r3, [pc, #1876]	; 241d0 <__assert_fail@plt+0x12ef8>
   23a78:	tst	r6, r3
   23a7c:	beq	23a20 <__assert_fail@plt+0x12748>
   23a80:	ldr	r2, [sp, #228]	; 0xe4
   23a84:	mov	r1, r5
   23a88:	add	r0, sp, #140	; 0x8c
   23a8c:	bl	17d08 <__assert_fail@plt+0x6a30>
   23a90:	ldr	r3, [pc, #1852]	; 241d4 <__assert_fail@plt+0x12efc>
   23a94:	and	r6, r3, r6, lsr #8
   23a98:	tst	r6, #4
   23a9c:	bne	239f0 <__assert_fail@plt+0x12718>
   23aa0:	tst	r6, #8
   23aa4:	beq	23a00 <__assert_fail@plt+0x12728>
   23aa8:	tst	r0, #1
   23aac:	beq	23a00 <__assert_fail@plt+0x12728>
   23ab0:	add	r4, r4, #1
   23ab4:	cmp	r4, r9
   23ab8:	blt	23a54 <__assert_fail@plt+0x1277c>
   23abc:	ldr	r9, [sp, #76]	; 0x4c
   23ac0:	mov	r3, #0
   23ac4:	str	r3, [sp, #116]	; 0x74
   23ac8:	b	2354c <__assert_fail@plt+0x12274>
   23acc:	ldr	r3, [sp, #260]	; 0x104
   23ad0:	ldr	r6, [sp, #180]	; 0xb4
   23ad4:	ldr	r2, [sp, #176]	; 0xb0
   23ad8:	cmp	r3, r0
   23adc:	add	r6, r0, r6
   23ae0:	movge	r0, r3
   23ae4:	cmp	r6, r2
   23ae8:	str	r0, [sp, #260]	; 0x104
   23aec:	ldr	r8, [sp, #244]	; 0xf4
   23af0:	blt	23bd8 <__assert_fail@plt+0x12900>
   23af4:	ldr	r3, [sp, #188]	; 0xbc
   23af8:	cmp	r2, r3
   23afc:	bge	23bd8 <__assert_fail@plt+0x12900>
   23b00:	add	r1, r6, #1
   23b04:	add	r0, sp, #140	; 0x8c
   23b08:	bl	1c35c <__assert_fail@plt+0xb084>
   23b0c:	cmp	r0, #0
   23b10:	bne	23cc8 <__assert_fail@plt+0x129f0>
   23b14:	cmp	r6, r8
   23b18:	ble	23b3c <__assert_fail@plt+0x12864>
   23b1c:	sub	r2, r6, r8
   23b20:	ldr	r0, [sp, #240]	; 0xf0
   23b24:	add	r8, r8, #1
   23b28:	lsl	r2, r2, #2
   23b2c:	add	r0, r0, r8, lsl #2
   23b30:	mov	r1, #0
   23b34:	bl	111f4 <memset@plt>
   23b38:	str	r6, [sp, #244]	; 0xf4
   23b3c:	ldr	r3, [sl, #12]
   23b40:	ldr	r8, [sp, #240]	; 0xf0
   23b44:	mov	r2, #0
   23b48:	ldr	r3, [r3, r7, lsl #2]
   23b4c:	ldr	r1, [r8, r6, lsl #2]
   23b50:	str	r2, [sp, #128]	; 0x80
   23b54:	add	r3, r3, r3, lsl #1
   23b58:	ldr	r2, [sl, #24]
   23b5c:	cmp	r1, #0
   23b60:	add	r2, r2, r3, lsl #2
   23b64:	beq	23c60 <__assert_fail@plt+0x12988>
   23b68:	ldr	r1, [r1, #40]	; 0x28
   23b6c:	add	r0, sp, #276	; 0x114
   23b70:	bl	17a78 <__assert_fail@plt+0x67a0>
   23b74:	cmp	r0, #0
   23b78:	str	r0, [sp, #128]	; 0x80
   23b7c:	bne	23cc8 <__assert_fail@plt+0x129f0>
   23b80:	ldr	r2, [sp, #228]	; 0xe4
   23b84:	sub	r1, r6, #1
   23b88:	add	r0, sp, #140	; 0x8c
   23b8c:	bl	17d08 <__assert_fail@plt+0x6a30>
   23b90:	add	r2, sp, #276	; 0x114
   23b94:	mov	r1, sl
   23b98:	ldr	r7, [sp, #240]	; 0xf0
   23b9c:	mov	r3, r0
   23ba0:	add	r0, sp, #128	; 0x80
   23ba4:	bl	206b0 <__assert_fail@plt+0xf3d8>
   23ba8:	str	r0, [r7, r6, lsl #2]
   23bac:	ldr	r0, [sp, #284]	; 0x11c
   23bb0:	bl	296b0 <__assert_fail@plt+0x183d8>
   23bb4:	ldr	r7, [sp, #240]	; 0xf0
   23bb8:	ldr	r3, [r7, r6, lsl #2]
   23bbc:	cmp	r3, #0
   23bc0:	bne	23a40 <__assert_fail@plt+0x12768>
   23bc4:	ldr	r0, [sp, #128]	; 0x80
   23bc8:	cmp	r0, #0
   23bcc:	beq	23a40 <__assert_fail@plt+0x12768>
   23bd0:	ldr	r9, [sp, #76]	; 0x4c
   23bd4:	b	23cd0 <__assert_fail@plt+0x129f8>
   23bd8:	ldr	r3, [sp, #168]	; 0xa8
   23bdc:	cmp	r6, r3
   23be0:	blt	23b14 <__assert_fail@plt+0x1283c>
   23be4:	ldr	r2, [sp, #188]	; 0xbc
   23be8:	cmp	r3, r2
   23bec:	bge	23b14 <__assert_fail@plt+0x1283c>
   23bf0:	b	23b00 <__assert_fail@plt+0x12828>
   23bf4:	ldr	r2, [sp, #188]	; 0xbc
   23bf8:	cmp	r3, r2
   23bfc:	bge	23534 <__assert_fail@plt+0x1225c>
   23c00:	add	r1, r5, #2
   23c04:	add	r0, sp, #140	; 0x8c
   23c08:	bl	1c35c <__assert_fail@plt+0xb084>
   23c0c:	cmp	r0, #0
   23c10:	str	r0, [sp, #116]	; 0x74
   23c14:	bne	2371c <__assert_fail@plt+0x12444>
   23c18:	ldr	r5, [sp, #180]	; 0xb4
   23c1c:	b	23540 <__assert_fail@plt+0x12268>
   23c20:	ldr	r5, [fp, #48]	; 0x30
   23c24:	cmp	r5, #0
   23c28:	beq	242e8 <__assert_fail@plt+0x13010>
   23c2c:	ldr	r1, [sp, #180]	; 0xb4
   23c30:	ldr	r2, [sp, #228]	; 0xe4
   23c34:	sub	r1, r1, #1
   23c38:	add	r0, sp, #140	; 0x8c
   23c3c:	bl	17d08 <__assert_fail@plt+0x6a30>
   23c40:	tst	r0, #1
   23c44:	addne	r4, r4, #256	; 0x100
   23c48:	ldr	r4, [r5, r4, lsl #2]
   23c4c:	b	2356c <__assert_fail@plt+0x12294>
   23c50:	ldr	r2, [sp, #188]	; 0xbc
   23c54:	cmp	r3, r2
   23c58:	bge	23540 <__assert_fail@plt+0x12268>
   23c5c:	b	23c00 <__assert_fail@plt+0x12928>
   23c60:	ldm	r2, {r0, r1, r2}
   23c64:	add	r3, sp, #276	; 0x114
   23c68:	stm	r3, {r0, r1, r2}
   23c6c:	sub	r1, r6, #1
   23c70:	ldr	r2, [sp, #228]	; 0xe4
   23c74:	add	r0, sp, #140	; 0x8c
   23c78:	bl	17d08 <__assert_fail@plt+0x6a30>
   23c7c:	add	r2, sp, #276	; 0x114
   23c80:	mov	r1, sl
   23c84:	mov	r3, r0
   23c88:	add	r0, sp, #128	; 0x80
   23c8c:	bl	206b0 <__assert_fail@plt+0xf3d8>
   23c90:	str	r0, [r8, r6, lsl #2]
   23c94:	b	23bb4 <__assert_fail@plt+0x128dc>
   23c98:	ldr	r3, [sp, #28]
   23c9c:	ldr	r7, [sp, #240]	; 0xf0
   23ca0:	ldr	r4, [r3, #76]	; 0x4c
   23ca4:	cmp	r4, #0
   23ca8:	beq	23d74 <__assert_fail@plt+0x12a9c>
   23cac:	ldr	r3, [sp, #20]
   23cb0:	add	r0, sp, #140	; 0x8c
   23cb4:	mov	r2, r3
   23cb8:	ldr	r1, [r7, r3, lsl #2]
   23cbc:	bl	18694 <__assert_fail@plt+0x73bc>
   23cc0:	str	r0, [sp, #236]	; 0xec
   23cc4:	b	240d4 <__assert_fail@plt+0x12dfc>
   23cc8:	ldr	r9, [sp, #76]	; 0x4c
   23ccc:	ldr	r7, [sp, #240]	; 0xf0
   23cd0:	cmp	r7, #0
   23cd4:	str	r0, [sp, #116]	; 0x74
   23cd8:	beq	23ce8 <__assert_fail@plt+0x12a10>
   23cdc:	mov	r4, #0
   23ce0:	b	23578 <__assert_fail@plt+0x122a0>
   23ce4:	mov	r7, r0
   23ce8:	mov	r3, #12
   23cec:	str	r3, [sp, #48]	; 0x30
   23cf0:	b	23728 <__assert_fail@plt+0x12450>
   23cf4:	ldr	r2, [sp, #20]
   23cf8:	ldr	r4, [sp, #12]
   23cfc:	add	r1, sp, #276	; 0x114
   23d00:	add	r0, sp, #140	; 0x8c
   23d04:	str	r3, [sp, #280]	; 0x118
   23d08:	str	r2, [sp, #288]	; 0x120
   23d0c:	str	r3, [sp, #292]	; 0x124
   23d10:	str	r3, [sp, #296]	; 0x128
   23d14:	str	r3, [sp, #300]	; 0x12c
   23d18:	str	r4, [sp, #276]	; 0x114
   23d1c:	str	r9, [sp, #284]	; 0x11c
   23d20:	bl	1d78c <__assert_fail@plt+0xc4b4>
   23d24:	mov	r7, r0
   23d28:	ldr	r0, [sp, #300]	; 0x12c
   23d2c:	bl	296b0 <__assert_fail@plt+0x183d8>
   23d30:	cmp	r7, #0
   23d34:	bne	240e8 <__assert_fail@plt+0x12e10>
   23d38:	ldr	r3, [r4]
   23d3c:	cmp	r3, #0
   23d40:	beq	235f8 <__assert_fail@plt+0x12320>
   23d44:	ldr	fp, [sp, #12]
   23d48:	ldr	r0, [sp, #240]	; 0xf0
   23d4c:	bl	296b0 <__assert_fail@plt+0x183d8>
   23d50:	ldr	r3, [sp, #20]
   23d54:	mov	r0, #0
   23d58:	str	r3, [sp, #232]	; 0xe8
   23d5c:	str	fp, [sp, #240]	; 0xf0
   23d60:	str	r9, [sp, #236]	; 0xec
   23d64:	bl	296b0 <__assert_fail@plt+0x183d8>
   23d68:	mov	r0, #0
   23d6c:	bl	296b0 <__assert_fail@plt+0x183d8>
   23d70:	ldr	r7, [sp, #240]	; 0xf0
   23d74:	ldr	r3, [sp, #56]	; 0x38
   23d78:	cmp	r3, #0
   23d7c:	beq	23728 <__assert_fail@plt+0x12450>
   23d80:	cmp	r3, #1
   23d84:	bls	23da8 <__assert_fail@plt+0x12ad0>
   23d88:	sub	r3, r3, #-536870911	; 0xe0000001
   23d8c:	ldr	r2, [sp, #468]	; 0x1d4
   23d90:	mvn	r1, #0
   23d94:	add	r3, r2, r3, lsl #3
   23d98:	str	r1, [r2, #12]
   23d9c:	str	r1, [r2, #8]!
   23da0:	cmp	r3, r2
   23da4:	bne	23d98 <__assert_fail@plt+0x12ac0>
   23da8:	ldr	r3, [sp, #44]	; 0x2c
   23dac:	ldr	r1, [sp, #468]	; 0x1d4
   23db0:	ldr	r2, [sp, #232]	; 0xe8
   23db4:	ldrb	r3, [r3, #28]
   23db8:	str	r2, [r1, #4]
   23dbc:	ldr	r2, [sp, #56]	; 0x38
   23dc0:	mov	r4, #0
   23dc4:	lsr	r3, r3, #4
   23dc8:	eor	r3, r3, #1
   23dcc:	cmp	r2, #1
   23dd0:	moveq	r3, #0
   23dd4:	andne	r3, r3, #1
   23dd8:	cmp	r3, #0
   23ddc:	mov	r3, r1
   23de0:	moveq	r3, r2
   23de4:	str	r4, [r1]
   23de8:	lsleq	r9, r3, #3
   23dec:	beq	24934 <__assert_fail@plt+0x1365c>
   23df0:	ldr	r2, [sp, #28]
   23df4:	ldrb	r3, [r2, #88]	; 0x58
   23df8:	tst	r3, #1
   23dfc:	beq	2501c <__assert_fail@plt+0x13d44>
   23e00:	ldr	r3, [r2, #76]	; 0x4c
   23e04:	cmp	r3, #0
   23e08:	ble	2501c <__assert_fail@plt+0x13d44>
   23e0c:	ldr	r1, [sp, #44]	; 0x2c
   23e10:	mov	r2, #2
   23e14:	mov	r3, #16
   23e18:	ldr	r1, [r1]
   23e1c:	add	r8, sp, #288	; 0x120
   23e20:	mov	r0, #48	; 0x30
   23e24:	str	r1, [sp, #20]
   23e28:	str	r4, [sp, #128]	; 0x80
   23e2c:	str	r4, [sp, #276]	; 0x114
   23e30:	str	r2, [sp, #132]	; 0x84
   23e34:	str	r3, [sp, #280]	; 0x118
   23e38:	str	r8, [sp, #284]	; 0x11c
   23e3c:	bl	294e4 <__assert_fail@plt+0x1820c>
   23e40:	cmp	r0, #0
   23e44:	str	r0, [sp, #136]	; 0x88
   23e48:	beq	25010 <__assert_fail@plt+0x13d38>
   23e4c:	ldr	r3, [sp, #276]	; 0x114
   23e50:	ldr	r1, [sp, #56]	; 0x38
   23e54:	add	r2, sp, #116	; 0x74
   23e58:	cmp	r1, r3
   23e5c:	ldr	r3, [sp, #20]
   23e60:	str	r2, [sp, #16]
   23e64:	addls	sl, sp, #128	; 0x80
   23e68:	ldr	fp, [r3, #72]	; 0x48
   23e6c:	movls	r3, r1
   23e70:	str	r4, [sp, #116]	; 0x74
   23e74:	str	r4, [sp, #120]	; 0x78
   23e78:	str	r4, [sp, #124]	; 0x7c
   23e7c:	strls	r3, [sp, #276]	; 0x114
   23e80:	bhi	25208 <__assert_fail@plt+0x13f30>
   23e84:	ldr	r5, [sp, #56]	; 0x38
   23e88:	ldr	r3, [sp, #284]	; 0x11c
   23e8c:	ldr	r1, [sp, #468]	; 0x1d4
   23e90:	lsl	r9, r5, #3
   23e94:	mov	r0, r3
   23e98:	mov	r2, r9
   23e9c:	mov	r4, r3
   23ea0:	bl	11068 <memcpy@plt>
   23ea4:	lsl	r3, r5, #4
   23ea8:	str	r3, [sp, #32]
   23eac:	ldr	r3, [sp, #468]	; 0x1d4
   23eb0:	str	r8, [sp, #12]
   23eb4:	mov	r5, r3
   23eb8:	ldr	r7, [r3]
   23ebc:	mov	r8, r4
   23ec0:	ldr	r2, [r5, #4]
   23ec4:	cmp	r2, r7
   23ec8:	blt	25198 <__assert_fail@plt+0x13ec0>
   23ecc:	ldr	r3, [sp, #20]
   23ed0:	lsl	r6, fp, #3
   23ed4:	str	fp, [sp, #24]
   23ed8:	ldr	r0, [r3]
   23edc:	add	r1, r0, r6
   23ee0:	ldrb	r3, [r1, #4]
   23ee4:	cmp	r3, #8
   23ee8:	beq	25210 <__assert_fail@plt+0x13f38>
   23eec:	cmp	r3, #9
   23ef0:	beq	24f5c <__assert_fail@plt+0x13c84>
   23ef4:	cmp	r7, r2
   23ef8:	beq	248a8 <__assert_fail@plt+0x135d0>
   23efc:	cmp	sl, #0
   23f00:	beq	23f68 <__assert_fail@plt+0x12c90>
   23f04:	ldr	r3, [sp, #120]	; 0x78
   23f08:	cmp	r3, #0
   23f0c:	ble	23f68 <__assert_fail@plt+0x12c90>
   23f10:	ldr	r0, [sp, #124]	; 0x7c
   23f14:	sub	ip, r3, #1
   23f18:	mov	r1, #0
   23f1c:	cmp	r1, ip
   23f20:	bcs	23f5c <__assert_fail@plt+0x12c84>
   23f24:	add	r3, r1, ip
   23f28:	lsr	r3, r3, #1
   23f2c:	ldr	r2, [r0, r3, lsl #2]
   23f30:	cmp	fp, r2
   23f34:	ble	23f4c <__assert_fail@plt+0x12c74>
   23f38:	b	246d4 <__assert_fail@plt+0x133fc>
   23f3c:	ldr	ip, [r0, r2, lsl #2]
   23f40:	cmp	fp, ip
   23f44:	bgt	246dc <__assert_fail@plt+0x13404>
   23f48:	mov	r3, r2
   23f4c:	add	r2, r1, r3
   23f50:	cmp	r1, r3
   23f54:	lsr	r2, r2, #1
   23f58:	bcc	23f3c <__assert_fail@plt+0x12c64>
   23f5c:	ldr	r3, [r0, r1, lsl #2]
   23f60:	cmp	fp, r3
   23f64:	beq	24a8c <__assert_fail@plt+0x137b4>
   23f68:	ldr	r4, [sp, #224]	; 0xe0
   23f6c:	ldr	r0, [r4]
   23f70:	add	r3, r0, r6
   23f74:	ldrb	r2, [r3, #4]
   23f78:	tst	r2, #8
   23f7c:	beq	24b3c <__assert_fail@plt+0x13864>
   23f80:	ldr	r1, [sp, #240]	; 0xf0
   23f84:	add	r3, fp, fp, lsl #1
   23f88:	ldr	r4, [r4, #20]
   23f8c:	ldr	r2, [sp, #120]	; 0x78
   23f90:	add	r4, r4, r3, lsl #2
   23f94:	ldr	r3, [r1, r7, lsl #2]
   23f98:	cmp	r2, #0
   23f9c:	str	r3, [sp, #24]
   23fa0:	ble	2473c <__assert_fail@plt+0x13464>
   23fa4:	ldr	r0, [sp, #124]	; 0x7c
   23fa8:	sub	r2, r2, #1
   23fac:	mov	r1, #0
   23fb0:	cmp	r1, r2
   23fb4:	bcs	24730 <__assert_fail@plt+0x13458>
   23fb8:	add	r3, r1, r2
   23fbc:	lsr	r3, r3, #1
   23fc0:	b	23fd8 <__assert_fail@plt+0x12d00>
   23fc4:	add	ip, r1, r3
   23fc8:	cmp	r1, r3
   23fcc:	mov	r2, r3
   23fd0:	lsr	r3, ip, #1
   23fd4:	bcs	24730 <__assert_fail@plt+0x13458>
   23fd8:	ldr	ip, [r0, r3, lsl #2]
   23fdc:	cmp	fp, ip
   23fe0:	ble	23fc4 <__assert_fail@plt+0x12cec>
   23fe4:	add	r1, r3, #1
   23fe8:	b	23fb0 <__assert_fail@plt+0x12cd8>
   23fec:	ldr	r3, [sp, #52]	; 0x34
   23ff0:	cmp	r3, r5
   23ff4:	ble	23404 <__assert_fail@plt+0x1212c>
   23ff8:	ldr	r3, [sp, #60]	; 0x3c
   23ffc:	ldr	r1, [sp, #80]	; 0x50
   24000:	ldrb	r2, [r3, r5]
   24004:	add	r3, r3, r5
   24008:	ldrb	r2, [r1, r2]
   2400c:	ldr	r1, [sp, #64]	; 0x40
   24010:	ldrb	r2, [r1, r2]
   24014:	cmp	r2, #0
   24018:	bne	23448 <__assert_fail@plt+0x12170>
   2401c:	mov	ip, r1
   24020:	add	r2, r5, #1
   24024:	ldr	lr, [sp, #80]	; 0x50
   24028:	ldr	r0, [sp, #52]	; 0x34
   2402c:	b	24048 <__assert_fail@plt+0x12d70>
   24030:	ldrb	r1, [r3, #1]!
   24034:	add	r2, r2, #1
   24038:	ldrb	r1, [lr, r1]
   2403c:	ldrb	r1, [ip, r1]
   24040:	cmp	r1, #0
   24044:	bne	242e0 <__assert_fail@plt+0x13008>
   24048:	cmp	r0, r2
   2404c:	mov	r5, r2
   24050:	bne	24030 <__assert_fail@plt+0x12d58>
   24054:	b	233fc <__assert_fail@plt+0x12124>
   24058:	ldr	r3, [sp, #68]	; 0x44
   2405c:	cmp	r3, r5
   24060:	bgt	236d4 <__assert_fail@plt+0x123fc>
   24064:	ldr	r3, [sp, #80]	; 0x50
   24068:	ldr	r2, [sp, #112]	; 0x70
   2406c:	cmp	r3, #0
   24070:	beq	244a4 <__assert_fail@plt+0x131cc>
   24074:	mov	ip, r3
   24078:	ldr	r1, [sp, #108]	; 0x6c
   2407c:	ldr	r0, [sp, #64]	; 0x40
   24080:	ldr	r4, [sp, #68]	; 0x44
   24084:	ldr	r6, [sp, #60]	; 0x3c
   24088:	ldr	lr, [sp, #72]	; 0x48
   2408c:	b	240a4 <__assert_fail@plt+0x12dcc>
   24090:	sub	r5, r5, #1
   24094:	cmp	r4, r5
   24098:	mov	r2, r5
   2409c:	mov	r1, #1
   240a0:	bgt	24378 <__assert_fail@plt+0x130a0>
   240a4:	cmp	lr, r5
   240a8:	mov	r3, #0
   240ac:	ldrbgt	r3, [r6, r5]
   240b0:	ldrb	r3, [ip, r3]
   240b4:	ldrb	r3, [r0, r3]
   240b8:	cmp	r3, #0
   240bc:	beq	24090 <__assert_fail@plt+0x12db8>
   240c0:	cmp	r1, #0
   240c4:	strne	r2, [sp, #112]	; 0x70
   240c8:	b	23448 <__assert_fail@plt+0x12170>
   240cc:	ldr	r3, [sp, #28]
   240d0:	ldr	r4, [r3, #76]	; 0x4c
   240d4:	cmp	r4, #0
   240d8:	bne	2386c <__assert_fail@plt+0x12594>
   240dc:	b	23d74 <__assert_fail@plt+0x12a9c>
   240e0:	ldr	r1, [sp, #72]	; 0x48
   240e4:	b	231bc <__assert_fail@plt+0x11ee4>
   240e8:	mov	sl, #0
   240ec:	ldr	r0, [sp, #12]
   240f0:	bl	296b0 <__assert_fail@plt+0x183d8>
   240f4:	mov	r0, sl
   240f8:	bl	296b0 <__assert_fail@plt+0x183d8>
   240fc:	cmp	r7, #1
   24100:	beq	23608 <__assert_fail@plt+0x12330>
   24104:	str	r7, [sp, #48]	; 0x30
   24108:	ldr	r7, [sp, #240]	; 0xf0
   2410c:	b	23728 <__assert_fail@plt+0x12450>
   24110:	ldr	r1, [sp, #164]	; 0xa4
   24114:	ldr	r4, [sp, #64]	; 0x40
   24118:	ldr	r6, [sp, #92]	; 0x5c
   2411c:	ldr	r7, [sp, #68]	; 0x44
   24120:	ldr	r8, [sp, #52]	; 0x34
   24124:	b	2416c <__assert_fail@plt+0x12e94>
   24128:	ldr	r0, [sp, #168]	; 0xa8
   2412c:	mov	r2, #0
   24130:	cmp	r3, r0
   24134:	ldrcc	r2, [sp, #144]	; 0x90
   24138:	ldrbcc	r2, [r2, r3]
   2413c:	ldrb	r3, [r4, r2]
   24140:	cmp	r3, #0
   24144:	bne	23448 <__assert_fail@plt+0x12170>
   24148:	add	r5, r5, r6
   2414c:	cmp	r8, r5
   24150:	movge	r3, #0
   24154:	movlt	r3, #1
   24158:	cmp	r7, r5
   2415c:	orrgt	r3, r3, #1
   24160:	cmp	r3, #0
   24164:	str	r5, [sp, #112]	; 0x70
   24168:	bne	236d4 <__assert_fail@plt+0x123fc>
   2416c:	ldr	r2, [sp, #172]	; 0xac
   24170:	sub	r3, r5, r1
   24174:	cmp	r3, r2
   24178:	bcc	24128 <__assert_fail@plt+0x12e50>
   2417c:	ldr	r2, [sp, #472]	; 0x1d8
   24180:	mov	r1, r5
   24184:	add	r0, sp, #140	; 0x8c
   24188:	bl	17df4 <__assert_fail@plt+0x6b1c>
   2418c:	cmp	r0, #0
   24190:	bne	244f4 <__assert_fail@plt+0x1321c>
   24194:	ldr	r1, [sp, #164]	; 0xa4
   24198:	sub	r3, r5, r1
   2419c:	b	24128 <__assert_fail@plt+0x12e50>
   241a0:	mov	r3, r2
   241a4:	sub	r1, r3, #1
   241a8:	ldr	r2, [sp, #228]	; 0xe4
   241ac:	add	r0, sp, #140	; 0x8c
   241b0:	bl	17d08 <__assert_fail@plt+0x6a30>
   241b4:	tst	r0, #1
   241b8:	beq	24324 <__assert_fail@plt+0x1304c>
   241bc:	ldr	fp, [r4, #40]	; 0x28
   241c0:	b	234bc <__assert_fail@plt+0x121e4>
   241c4:	mov	r7, #1
   241c8:	b	240ec <__assert_fail@plt+0x12e14>
   241cc:	beq	feacec7c <optarg@@GLIBC_2.4+0xfea92aa4>
   241d0:	andeq	pc, r3, r0, lsl #30
   241d4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   241d8:	ldr	r3, [sp, #264]	; 0x108
   241dc:	cmp	r3, #0
   241e0:	movgt	r7, #0
   241e4:	ble	24264 <__assert_fail@plt+0x12f8c>
   241e8:	ldr	r3, [sp, #272]	; 0x110
   241ec:	ldr	r6, [r3, r7, lsl #2]
   241f0:	ldr	r3, [r6, #16]
   241f4:	cmp	r3, #0
   241f8:	movgt	r4, #0
   241fc:	ble	24228 <__assert_fail@plt+0x12f50>
   24200:	ldr	r3, [r6, #20]
   24204:	ldr	r5, [r3, r4, lsl #2]
   24208:	add	r4, r4, #1
   2420c:	ldr	r0, [r5, #16]
   24210:	bl	296b0 <__assert_fail@plt+0x183d8>
   24214:	mov	r0, r5
   24218:	bl	296b0 <__assert_fail@plt+0x183d8>
   2421c:	ldr	r3, [r6, #16]
   24220:	cmp	r4, r3
   24224:	blt	24200 <__assert_fail@plt+0x12f28>
   24228:	ldr	r0, [r6, #20]
   2422c:	bl	296b0 <__assert_fail@plt+0x183d8>
   24230:	ldr	r3, [r6, #8]
   24234:	cmp	r3, #0
   24238:	beq	2424c <__assert_fail@plt+0x12f74>
   2423c:	ldr	r0, [r3, #8]
   24240:	bl	296b0 <__assert_fail@plt+0x183d8>
   24244:	ldr	r0, [r6, #8]
   24248:	bl	296b0 <__assert_fail@plt+0x183d8>
   2424c:	mov	r0, r6
   24250:	bl	296b0 <__assert_fail@plt+0x183d8>
   24254:	ldr	r3, [sp, #264]	; 0x108
   24258:	add	r7, r7, #1
   2425c:	cmp	r7, r3
   24260:	blt	241e8 <__assert_fail@plt+0x12f10>
   24264:	mov	r3, #0
   24268:	ldr	r0, [sp, #272]	; 0x110
   2426c:	str	r3, [sp, #264]	; 0x108
   24270:	str	r3, [sp, #248]	; 0xf8
   24274:	bl	296b0 <__assert_fail@plt+0x183d8>
   24278:	ldr	r0, [sp, #256]	; 0x100
   2427c:	bl	296b0 <__assert_fail@plt+0x183d8>
   24280:	b	23740 <__assert_fail@plt+0x12468>
   24284:	mov	r1, r6
   24288:	ldr	r0, [sp, #144]	; 0x90
   2428c:	bl	29510 <__assert_fail@plt+0x18238>
   24290:	cmp	r0, #0
   24294:	beq	2371c <__assert_fail@plt+0x12444>
   24298:	ldr	r1, [sp, #28]
   2429c:	ldrb	r2, [sp, #215]	; 0xd7
   242a0:	str	r0, [sp, #144]	; 0x90
   242a4:	ldrb	r3, [r1, #88]	; 0x58
   242a8:	cmp	r2, #0
   242ac:	add	r2, r1, #96	; 0x60
   242b0:	str	r6, [sp, #176]	; 0xb0
   242b4:	lsr	r3, r3, #4
   242b8:	and	r3, r3, #1
   242bc:	strb	r3, [sp, #218]	; 0xda
   242c0:	str	r2, [sp, #208]	; 0xd0
   242c4:	bne	231b8 <__assert_fail@plt+0x11ee0>
   242c8:	b	231a0 <__assert_fail@plt+0x11ec8>
   242cc:	ldr	r3, [sp, #28]
   242d0:	ldrb	r3, [r3, #88]	; 0x58
   242d4:	tst	r3, #2
   242d8:	bne	23258 <__assert_fail@plt+0x11f80>
   242dc:	b	2327c <__assert_fail@plt+0x11fa4>
   242e0:	str	r5, [sp, #112]	; 0x70
   242e4:	b	23448 <__assert_fail@plt+0x12170>
   242e8:	mov	r1, fp
   242ec:	ldr	r0, [sp, #224]	; 0xe0
   242f0:	bl	20b08 <__assert_fail@plt+0xf830>
   242f4:	cmp	r0, #0
   242f8:	bne	2355c <__assert_fail@plt+0x12284>
   242fc:	ldr	r7, [sp, #240]	; 0xf0
   24300:	mov	r3, #12
   24304:	cmp	r7, #0
   24308:	str	r3, [sp, #116]	; 0x74
   2430c:	bne	23cdc <__assert_fail@plt+0x12a04>
   24310:	b	23ce8 <__assert_fail@plt+0x12a10>
   24314:	ldr	r3, [sp, #104]	; 0x68
   24318:	str	r3, [sp, #16]
   2431c:	ldrb	r3, [fp, #52]	; 0x34
   24320:	b	234e8 <__assert_fail@plt+0x12210>
   24324:	cmp	r0, #0
   24328:	beq	234bc <__assert_fail@plt+0x121e4>
   2432c:	and	r3, r0, #6
   24330:	cmp	r3, #6
   24334:	ldreq	fp, [r4, #48]	; 0x30
   24338:	beq	234bc <__assert_fail@plt+0x121e4>
   2433c:	tst	r0, #2
   24340:	beq	236f8 <__assert_fail@plt+0x12420>
   24344:	ldr	fp, [r4, #44]	; 0x2c
   24348:	b	234bc <__assert_fail@plt+0x121e4>
   2434c:	ldr	r0, [sp, #124]	; 0x7c
   24350:	ldr	r8, [sp, #12]
   24354:	bl	296b0 <__assert_fail@plt+0x183d8>
   24358:	ldr	r0, [sp, #284]	; 0x11c
   2435c:	cmp	r0, r8
   24360:	beq	24368 <__assert_fail@plt+0x13090>
   24364:	bl	296b0 <__assert_fail@plt+0x183d8>
   24368:	mov	r3, #1
   2436c:	str	r3, [sp, #48]	; 0x30
   24370:	ldr	r7, [sp, #240]	; 0xf0
   24374:	b	23728 <__assert_fail@plt+0x12450>
   24378:	str	r5, [sp, #112]	; 0x70
   2437c:	b	236d4 <__assert_fail@plt+0x123fc>
   24380:	ldrsb	r3, [fp, #52]	; 0x34
   24384:	cmp	r3, #0
   24388:	blt	24440 <__assert_fail@plt+0x13168>
   2438c:	ldr	r3, [sp, #36]	; 0x24
   24390:	cmp	r3, #0
   24394:	ldr	r3, [sp, #12]
   24398:	str	r3, [sp, #20]
   2439c:	movne	r3, #1
   243a0:	strne	r3, [sp, #40]	; 0x28
   243a4:	bne	23500 <__assert_fail@plt+0x12228>
   243a8:	b	237fc <__assert_fail@plt+0x12524>
   243ac:	ldr	r7, [sp, #240]	; 0xf0
   243b0:	b	23ce8 <__assert_fail@plt+0x12a10>
   243b4:	add	r4, fp, #8
   243b8:	add	r5, fp, #12
   243bc:	mov	r1, r4
   243c0:	mov	r2, r5
   243c4:	mov	r3, #0
   243c8:	add	r0, sp, #140	; 0x8c
   243cc:	bl	189a0 <__assert_fail@plt+0x76c8>
   243d0:	cmp	r0, #0
   243d4:	str	r0, [sp, #116]	; 0x74
   243d8:	bne	2447c <__assert_fail@plt+0x131a4>
   243dc:	ldrb	r3, [fp, #52]	; 0x34
   243e0:	tst	r3, #64	; 0x40
   243e4:	bne	2445c <__assert_fail@plt+0x13184>
   243e8:	ldr	r2, [sp, #108]	; 0x6c
   243ec:	str	r2, [sp, #16]
   243f0:	b	234e8 <__assert_fail@plt+0x12210>
   243f4:	mov	fp, r3
   243f8:	bl	296b0 <__assert_fail@plt+0x183d8>
   243fc:	mov	r0, fp
   24400:	bl	296b0 <__assert_fail@plt+0x183d8>
   24404:	mov	r3, #12
   24408:	str	r3, [sp, #48]	; 0x30
   2440c:	ldr	r7, [sp, #240]	; 0xf0
   24410:	b	23728 <__assert_fail@plt+0x12450>
   24414:	mov	r3, #8
   24418:	b	23318 <__assert_fail@plt+0x12040>
   2441c:	ldr	fp, [sp, #12]
   24420:	mov	r0, fp
   24424:	bl	296b0 <__assert_fail@plt+0x183d8>
   24428:	mov	r0, sl
   2442c:	bl	296b0 <__assert_fail@plt+0x183d8>
   24430:	mov	r3, #12
   24434:	str	r3, [sp, #48]	; 0x30
   24438:	ldr	r7, [sp, #240]	; 0xf0
   2443c:	b	23728 <__assert_fail@plt+0x12450>
   24440:	ldr	r2, [sp, #12]
   24444:	mov	r1, fp
   24448:	add	r0, sp, #140	; 0x8c
   2444c:	bl	18694 <__assert_fail@plt+0x73bc>
   24450:	cmp	r0, #0
   24454:	beq	234f0 <__assert_fail@plt+0x12218>
   24458:	b	2438c <__assert_fail@plt+0x130b4>
   2445c:	mov	r2, r5
   24460:	mov	r1, r4
   24464:	add	r0, sp, #140	; 0x8c
   24468:	bl	225b0 <__assert_fail@plt+0x112d8>
   2446c:	cmp	r0, #0
   24470:	str	r0, [sp, #116]	; 0x74
   24474:	ldrbeq	r3, [fp, #52]	; 0x34
   24478:	beq	243e8 <__assert_fail@plt+0x13110>
   2447c:	str	r0, [sp, #20]
   24480:	b	237fc <__assert_fail@plt+0x12524>
   24484:	cmp	r0, #0
   24488:	mov	r4, r0
   2448c:	bne	23594 <__assert_fail@plt+0x122bc>
   24490:	b	237dc <__assert_fail@plt+0x12504>
   24494:	mov	r3, #12
   24498:	mov	r7, #0
   2449c:	str	r3, [sp, #48]	; 0x30
   244a0:	b	23728 <__assert_fail@plt+0x12450>
   244a4:	ldr	r1, [sp, #108]	; 0x6c
   244a8:	ldr	r0, [sp, #64]	; 0x40
   244ac:	ldr	lr, [sp, #68]	; 0x44
   244b0:	ldr	r4, [sp, #60]	; 0x3c
   244b4:	ldr	ip, [sp, #72]	; 0x48
   244b8:	b	244d0 <__assert_fail@plt+0x131f8>
   244bc:	sub	r5, r5, #1
   244c0:	cmp	lr, r5
   244c4:	mov	r2, r5
   244c8:	mov	r1, #1
   244cc:	bgt	24378 <__assert_fail@plt+0x130a0>
   244d0:	cmp	ip, r5
   244d4:	mov	r3, #0
   244d8:	ldrbgt	r3, [r4, r5]
   244dc:	ldrb	r3, [r0, r3]
   244e0:	cmp	r3, #0
   244e4:	beq	244bc <__assert_fail@plt+0x131e4>
   244e8:	b	240c0 <__assert_fail@plt+0x12de8>
   244ec:	mov	r4, r0
   244f0:	b	23594 <__assert_fail@plt+0x122bc>
   244f4:	str	r0, [sp, #48]	; 0x30
   244f8:	ldr	r7, [sp, #240]	; 0xf0
   244fc:	b	23728 <__assert_fail@plt+0x12450>
   24500:	ldr	r3, [sp, #12]
   24504:	str	r9, [sp, #32]
   24508:	mov	fp, r3
   2450c:	mov	r9, sl
   24510:	add	r2, r3, r4
   24514:	str	r6, [sp, #20]
   24518:	str	r2, [sp, #24]
   2451c:	str	sl, [sp, #16]
   24520:	ldr	r6, [fp]
   24524:	cmp	r6, #0
   24528:	beq	246c8 <__assert_fail@plt+0x133f0>
   2452c:	ldr	r5, [r9]
   24530:	cmp	r5, #0
   24534:	beq	24610 <__assert_fail@plt+0x13338>
   24538:	ldr	r3, [r6, #8]
   2453c:	cmp	r3, #0
   24540:	ble	2463c <__assert_fail@plt+0x13364>
   24544:	ldr	r2, [r5, #8]
   24548:	cmp	r2, #0
   2454c:	ble	2467c <__assert_fail@plt+0x133a4>
   24550:	add	r3, r3, r2
   24554:	str	r3, [sp, #128]	; 0x80
   24558:	lsl	r0, r3, #2
   2455c:	bl	294e4 <__assert_fail@plt+0x1820c>
   24560:	cmp	r0, #0
   24564:	str	r0, [sp, #136]	; 0x88
   24568:	beq	24fc0 <__assert_fail@plt+0x13ce8>
   2456c:	mov	r4, #0
   24570:	mov	r7, r4
   24574:	mov	ip, r0
   24578:	mov	r1, #1
   2457c:	b	245c0 <__assert_fail@plt+0x132e8>
   24580:	ldr	r3, [r5, #8]
   24584:	cmp	r4, r3
   24588:	bge	246e8 <__assert_fail@plt+0x13410>
   2458c:	ldr	r3, [r6, #12]
   24590:	ldr	r2, [r5, #12]
   24594:	ldr	r3, [r3, r7, lsl #2]
   24598:	ldr	r2, [r2, r4, lsl #2]
   2459c:	cmp	r3, r2
   245a0:	addgt	r4, r4, #1
   245a4:	strgt	r2, [ip]
   245a8:	bgt	245b8 <__assert_fail@plt+0x132e0>
   245ac:	add	r7, r7, #1
   245b0:	addeq	r4, r4, #1
   245b4:	str	r3, [ip]
   245b8:	add	r1, r1, #1
   245bc:	add	ip, ip, #4
   245c0:	ldr	r2, [r6, #8]
   245c4:	sub	sl, r1, #1
   245c8:	cmp	r7, r2
   245cc:	blt	24580 <__assert_fail@plt+0x132a8>
   245d0:	ldr	r2, [r5, #8]
   245d4:	cmp	r4, r2
   245d8:	blt	24fe8 <__assert_fail@plt+0x13d10>
   245dc:	add	r2, sp, #128	; 0x80
   245e0:	str	sl, [sp, #132]	; 0x84
   245e4:	mov	r3, #0
   245e8:	mov	r1, r8
   245ec:	add	r0, sp, #116	; 0x74
   245f0:	str	r3, [sp, #116]	; 0x74
   245f4:	bl	1c570 <__assert_fail@plt+0xb298>
   245f8:	str	r0, [fp]
   245fc:	ldr	r0, [sp, #136]	; 0x88
   24600:	bl	296b0 <__assert_fail@plt+0x183d8>
   24604:	ldr	r7, [sp, #116]	; 0x74
   24608:	cmp	r7, #0
   2460c:	bne	24710 <__assert_fail@plt+0x13438>
   24610:	ldr	r3, [sp, #24]
   24614:	add	fp, fp, #4
   24618:	cmp	r3, fp
   2461c:	add	r9, r9, #4
   24620:	bne	24520 <__assert_fail@plt+0x13248>
   24624:	ldr	sl, [sp, #16]
   24628:	ldr	r9, [sp, #32]
   2462c:	mov	r0, sl
   24630:	ldr	fp, [sp, #12]
   24634:	bl	296b0 <__assert_fail@plt+0x183d8>
   24638:	b	23d48 <__assert_fail@plt+0x12a70>
   2463c:	ldr	r3, [r5, #8]
   24640:	cmp	r3, #0
   24644:	ble	246b0 <__assert_fail@plt+0x133d8>
   24648:	lsl	r0, r3, #2
   2464c:	str	r3, [sp, #132]	; 0x84
   24650:	str	r3, [sp, #128]	; 0x80
   24654:	bl	294e4 <__assert_fail@plt+0x1820c>
   24658:	cmp	r0, #0
   2465c:	str	r0, [sp, #136]	; 0x88
   24660:	beq	24fc0 <__assert_fail@plt+0x13ce8>
   24664:	ldr	r2, [r5, #8]
   24668:	ldr	r1, [r5, #12]
   2466c:	lsl	r2, r2, #2
   24670:	bl	11068 <memcpy@plt>
   24674:	add	r2, sp, #128	; 0x80
   24678:	b	245e4 <__assert_fail@plt+0x1330c>
   2467c:	lsl	r0, r3, #2
   24680:	str	r3, [sp, #132]	; 0x84
   24684:	str	r3, [sp, #128]	; 0x80
   24688:	bl	294e4 <__assert_fail@plt+0x1820c>
   2468c:	cmp	r0, #0
   24690:	str	r0, [sp, #136]	; 0x88
   24694:	beq	24fc0 <__assert_fail@plt+0x13ce8>
   24698:	ldr	r2, [r6, #8]
   2469c:	ldr	r1, [r6, #12]
   246a0:	lsl	r2, r2, #2
   246a4:	bl	11068 <memcpy@plt>
   246a8:	add	r2, sp, #128	; 0x80
   246ac:	b	245e4 <__assert_fail@plt+0x1330c>
   246b0:	add	r2, sp, #128	; 0x80
   246b4:	mov	r3, #0
   246b8:	str	r3, [sp, #128]	; 0x80
   246bc:	str	r3, [r2, #4]
   246c0:	str	r3, [r2, #8]
   246c4:	b	245e4 <__assert_fail@plt+0x1330c>
   246c8:	ldr	r3, [r9]
   246cc:	str	r3, [fp]
   246d0:	b	24610 <__assert_fail@plt+0x13338>
   246d4:	mov	r2, r3
   246d8:	mov	r3, ip
   246dc:	add	r1, r2, #1
   246e0:	mov	ip, r3
   246e4:	b	23f1c <__assert_fail@plt+0x12c44>
   246e8:	sub	r2, r2, r7
   246ec:	ldr	r1, [r6, #12]
   246f0:	lsl	r2, r2, #2
   246f4:	add	r0, r0, sl, lsl #2
   246f8:	add	r1, r1, r7, lsl #2
   246fc:	bl	11068 <memcpy@plt>
   24700:	ldr	r2, [r6, #8]
   24704:	sub	r7, r2, r7
   24708:	add	sl, sl, r7
   2470c:	b	245dc <__assert_fail@plt+0x13304>
   24710:	ldr	sl, [sp, #16]
   24714:	mov	r0, sl
   24718:	bl	296b0 <__assert_fail@plt+0x183d8>
   2471c:	ldr	r0, [sp, #12]
   24720:	bl	296b0 <__assert_fail@plt+0x183d8>
   24724:	mov	r0, #0
   24728:	bl	296b0 <__assert_fail@plt+0x183d8>
   2472c:	b	240fc <__assert_fail@plt+0x12e24>
   24730:	ldr	r3, [r0, r1, lsl #2]
   24734:	cmp	fp, r3
   24738:	beq	24750 <__assert_fail@plt+0x13478>
   2473c:	mov	r1, fp
   24740:	ldr	r0, [sp, #16]
   24744:	bl	17640 <__assert_fail@plt+0x6368>
   24748:	cmp	r0, #0
   2474c:	beq	24eac <__assert_fail@plt+0x13bd4>
   24750:	ldr	r6, [r4, #4]
   24754:	cmp	r6, #0
   24758:	ble	2480c <__assert_fail@plt+0x13534>
   2475c:	ldr	r3, [sp, #24]
   24760:	ldr	r2, [r4, #8]
   24764:	mvn	fp, #0
   24768:	ldr	r3, [r3, #8]
   2476c:	mov	lr, #0
   24770:	str	r3, [sp, #40]	; 0x28
   24774:	sub	r3, r3, #1
   24778:	str	r2, [sp, #36]	; 0x24
   2477c:	str	r3, [sp, #44]	; 0x2c
   24780:	ldr	r3, [sp, #40]	; 0x28
   24784:	cmp	r3, #0
   24788:	ble	247f0 <__assert_fail@plt+0x13518>
   2478c:	ldr	r3, [sp, #36]	; 0x24
   24790:	ldr	ip, [sp, #44]	; 0x2c
   24794:	mov	r1, #0
   24798:	ldr	r4, [r3, lr, lsl #2]
   2479c:	ldr	r3, [sp, #24]
   247a0:	ldr	r0, [r3, #12]
   247a4:	cmp	r1, ip
   247a8:	bcs	247e4 <__assert_fail@plt+0x1350c>
   247ac:	add	r2, r1, ip
   247b0:	lsr	r2, r2, #1
   247b4:	ldr	r3, [r0, r2, lsl #2]
   247b8:	cmp	r4, r3
   247bc:	ble	247d4 <__assert_fail@plt+0x134fc>
   247c0:	b	24884 <__assert_fail@plt+0x135ac>
   247c4:	ldr	ip, [r0, r3, lsl #2]
   247c8:	cmp	r4, ip
   247cc:	bgt	2488c <__assert_fail@plt+0x135b4>
   247d0:	mov	r2, r3
   247d4:	add	r3, r1, r2
   247d8:	cmp	r1, r2
   247dc:	lsr	r3, r3, #1
   247e0:	bcc	247c4 <__assert_fail@plt+0x134ec>
   247e4:	ldr	r3, [r0, r1, lsl #2]
   247e8:	cmp	r4, r3
   247ec:	beq	24898 <__assert_fail@plt+0x135c0>
   247f0:	add	lr, lr, #1
   247f4:	cmp	r6, lr
   247f8:	bne	24780 <__assert_fail@plt+0x134a8>
   247fc:	cmp	fp, #0
   24800:	bge	23ec0 <__assert_fail@plt+0x12be8>
   24804:	cmn	fp, #2
   24808:	beq	24eac <__assert_fail@plt+0x13bd4>
   2480c:	cmp	sl, #0
   24810:	beq	2434c <__assert_fail@plt+0x13074>
   24814:	ldr	r4, [sl]
   24818:	cmp	r4, #0
   2481c:	beq	250fc <__assert_fail@plt+0x13e24>
   24820:	sub	r3, r4, #1
   24824:	ldr	ip, [sl, #8]
   24828:	add	lr, r3, r3, lsl #1
   2482c:	str	r3, [sl]
   24830:	add	r4, ip, lr, lsl #3
   24834:	mov	r2, r9
   24838:	ldr	r1, [r4, #8]
   2483c:	mov	r0, r5
   24840:	ldr	r7, [ip, lr, lsl #3]
   24844:	bl	11068 <memcpy@plt>
   24848:	ldr	r1, [r4, #8]
   2484c:	mov	r2, r9
   24850:	add	r1, r1, r9
   24854:	mov	r0, r8
   24858:	bl	11068 <memcpy@plt>
   2485c:	ldr	r0, [sp, #124]	; 0x7c
   24860:	bl	296b0 <__assert_fail@plt+0x183d8>
   24864:	ldr	r0, [r4, #8]
   24868:	bl	296b0 <__assert_fail@plt+0x183d8>
   2486c:	add	r3, r4, #12
   24870:	ldr	fp, [r4, #4]
   24874:	ldm	r3, {r0, r1, r2}
   24878:	ldr	r3, [sp, #16]
   2487c:	stm	r3, {r0, r1, r2}
   24880:	b	23ec0 <__assert_fail@plt+0x12be8>
   24884:	mov	r3, r2
   24888:	mov	r2, ip
   2488c:	add	r1, r3, #1
   24890:	mov	ip, r2
   24894:	b	247a4 <__assert_fail@plt+0x134cc>
   24898:	cmn	fp, #1
   2489c:	bne	24e18 <__assert_fail@plt+0x13b40>
   248a0:	mov	fp, r4
   248a4:	b	247f0 <__assert_fail@plt+0x13518>
   248a8:	ldr	r3, [sp, #236]	; 0xec
   248ac:	cmp	fp, r3
   248b0:	bne	23efc <__assert_fail@plt+0x12c24>
   248b4:	cmp	sl, #0
   248b8:	bne	24a8c <__assert_fail@plt+0x137b4>
   248bc:	ldr	r0, [sp, #124]	; 0x7c
   248c0:	ldr	r8, [sp, #12]
   248c4:	bl	296b0 <__assert_fail@plt+0x183d8>
   248c8:	ldr	r0, [sp, #284]	; 0x11c
   248cc:	cmp	r0, r8
   248d0:	beq	24930 <__assert_fail@plt+0x13658>
   248d4:	bl	296b0 <__assert_fail@plt+0x183d8>
   248d8:	mov	r4, #0
   248dc:	mov	r3, #16
   248e0:	cmp	sl, #0
   248e4:	str	r8, [sp, #284]	; 0x11c
   248e8:	str	r4, [sp, #276]	; 0x114
   248ec:	str	r3, [sp, #280]	; 0x118
   248f0:	beq	24930 <__assert_fail@plt+0x13658>
   248f4:	ldr	r6, [sl]
   248f8:	ldr	r7, [sl, #8]
   248fc:	cmp	r6, r4
   24900:	ble	24928 <__assert_fail@plt+0x13650>
   24904:	mov	r5, r7
   24908:	ldr	r0, [r5, #20]
   2490c:	bl	296b0 <__assert_fail@plt+0x183d8>
   24910:	add	r4, r4, #1
   24914:	ldr	r0, [r5, #8]
   24918:	bl	296b0 <__assert_fail@plt+0x183d8>
   2491c:	cmp	r6, r4
   24920:	add	r5, r5, #24
   24924:	bne	24908 <__assert_fail@plt+0x13630>
   24928:	mov	r0, r7
   2492c:	bl	296b0 <__assert_fail@plt+0x183d8>
   24930:	ldr	r7, [sp, #240]	; 0xf0
   24934:	ldrb	r3, [sp, #216]	; 0xd8
   24938:	ldr	r2, [sp, #468]	; 0x1d4
   2493c:	ldr	r5, [sp, #168]	; 0xa8
   24940:	cmp	r3, #0
   24944:	movne	r1, r2
   24948:	mov	r3, r2
   2494c:	ldr	r4, [sp, #152]	; 0x98
   24950:	ldr	lr, [sp, #172]	; 0xac
   24954:	ldr	r0, [sp, #112]	; 0x70
   24958:	addne	r3, r2, #4
   2495c:	addne	r6, r1, r9
   24960:	bne	24a3c <__assert_fail@plt+0x13764>
   24964:	add	r1, r3, #4
   24968:	add	ip, r3, r9
   2496c:	ldr	r3, [r1, #-4]
   24970:	add	r2, r2, #8
   24974:	cmn	r3, #1
   24978:	add	r3, r0, r3
   2497c:	ldrne	lr, [r2, #-4]
   24980:	strne	r3, [r1, #-4]
   24984:	addne	r3, r0, lr
   24988:	strne	r3, [r2, #-4]
   2498c:	cmp	ip, r2
   24990:	add	r1, r1, #8
   24994:	bne	2496c <__assert_fail@plt+0x13694>
   24998:	ldr	r3, [sp, #96]	; 0x60
   2499c:	cmp	r3, #0
   249a0:	ble	249d4 <__assert_fail@plt+0x136fc>
   249a4:	ldr	r2, [sp, #56]	; 0x38
   249a8:	ldr	r1, [sp, #468]	; 0x1d4
   249ac:	add	r2, r3, r2
   249b0:	ldr	r3, [sp, #468]	; 0x1d4
   249b4:	add	r2, r1, r2, lsl #3
   249b8:	add	r3, r3, r9
   249bc:	mvn	r1, #0
   249c0:	str	r1, [r3]
   249c4:	str	r1, [r3, #4]
   249c8:	add	r3, r3, #8
   249cc:	cmp	r3, r2
   249d0:	bne	249c0 <__assert_fail@plt+0x136e8>
   249d4:	ldr	r3, [sp, #28]
   249d8:	ldr	r3, [r3, #132]	; 0x84
   249dc:	cmp	r3, #0
   249e0:	beq	23728 <__assert_fail@plt+0x12450>
   249e4:	ldr	r0, [sp, #468]	; 0x1d4
   249e8:	mov	ip, #0
   249ec:	mov	lr, r0
   249f0:	b	24a28 <__assert_fail@plt+0x13750>
   249f4:	ldr	r1, [r3]
   249f8:	cmp	ip, r1
   249fc:	add	r4, r1, #1
   24a00:	mov	ip, r2
   24a04:	beq	24a20 <__assert_fail@plt+0x13748>
   24a08:	ldr	r2, [lr, r4, lsl #3]
   24a0c:	str	r2, [r0, #8]
   24a10:	ldr	r2, [r3]
   24a14:	add	r2, lr, r2, lsl #3
   24a18:	ldr	r2, [r2, #12]
   24a1c:	str	r2, [r0, #12]
   24a20:	add	r3, r3, #4
   24a24:	add	r0, r0, #8
   24a28:	ldr	r1, [sp, #56]	; 0x38
   24a2c:	add	r2, ip, #1
   24a30:	cmp	r2, r1
   24a34:	bne	249f4 <__assert_fail@plt+0x1371c>
   24a38:	b	23728 <__assert_fail@plt+0x12450>
   24a3c:	ldr	r1, [r3, #-4]
   24a40:	cmn	r1, #1
   24a44:	beq	24a78 <__assert_fail@plt+0x137a0>
   24a48:	cmp	r1, r5
   24a4c:	moveq	r1, lr
   24a50:	ldrne	r1, [r4, r1, lsl #2]
   24a54:	str	r1, [r3, #-4]
   24a58:	ldr	ip, [r2, #4]
   24a5c:	add	r1, r1, r0
   24a60:	cmp	r5, ip
   24a64:	moveq	ip, lr
   24a68:	ldrne	ip, [r4, ip, lsl #2]
   24a6c:	str	r1, [r3, #-4]
   24a70:	add	ip, ip, r0
   24a74:	str	ip, [r2, #4]
   24a78:	add	r2, r2, #8
   24a7c:	cmp	r2, r6
   24a80:	add	r3, r3, #8
   24a84:	bne	24a3c <__assert_fail@plt+0x13764>
   24a88:	b	24998 <__assert_fail@plt+0x136c0>
   24a8c:	mov	r2, r5
   24a90:	mov	r3, #0
   24a94:	b	24aa8 <__assert_fail@plt+0x137d0>
   24a98:	ldr	r1, [sp, #56]	; 0x38
   24a9c:	add	r2, r2, #8
   24aa0:	cmp	r1, r3
   24aa4:	beq	2517c <__assert_fail@plt+0x13ea4>
   24aa8:	ldr	r1, [r5, r3, lsl #3]
   24aac:	add	r3, r3, #1
   24ab0:	cmp	r1, #0
   24ab4:	blt	24a98 <__assert_fail@plt+0x137c0>
   24ab8:	ldr	r1, [r2, #4]
   24abc:	cmn	r1, #1
   24ac0:	bne	24a98 <__assert_fail@plt+0x137c0>
   24ac4:	ldr	r3, [sl]
   24ac8:	cmp	r3, #0
   24acc:	beq	2517c <__assert_fail@plt+0x13ea4>
   24ad0:	sub	r3, r3, #1
   24ad4:	ldr	ip, [sl, #8]
   24ad8:	add	lr, r3, r3, lsl #1
   24adc:	str	r3, [sl]
   24ae0:	add	r4, ip, lr, lsl #3
   24ae4:	mov	r2, r9
   24ae8:	ldr	r1, [r4, #8]
   24aec:	mov	r0, r5
   24af0:	ldr	r7, [ip, lr, lsl #3]
   24af4:	bl	11068 <memcpy@plt>
   24af8:	ldr	r1, [r4, #8]
   24afc:	mov	r2, r9
   24b00:	add	r1, r1, r9
   24b04:	mov	r0, r8
   24b08:	bl	11068 <memcpy@plt>
   24b0c:	ldr	r0, [sp, #124]	; 0x7c
   24b10:	bl	296b0 <__assert_fail@plt+0x183d8>
   24b14:	ldr	r0, [r4, #8]
   24b18:	bl	296b0 <__assert_fail@plt+0x183d8>
   24b1c:	add	r3, r4, #12
   24b20:	ldr	fp, [r4, #4]
   24b24:	ldm	r3, {r0, r1, r2}
   24b28:	ldr	r3, [sp, #16]
   24b2c:	str	fp, [sp, #24]
   24b30:	lsl	r6, fp, #3
   24b34:	stm	r3, {r0, r1, r2}
   24b38:	b	23f68 <__assert_fail@plt+0x12c90>
   24b3c:	ldrb	r1, [r3, #6]
   24b40:	tst	r1, #16
   24b44:	bne	24d64 <__assert_fail@plt+0x13a8c>
   24b48:	cmp	r2, #4
   24b4c:	beq	24cdc <__assert_fail@plt+0x13a04>
   24b50:	ldr	r0, [sp, #144]	; 0x90
   24b54:	sub	r1, r2, #1
   24b58:	ldrb	r2, [r0, r7]
   24b5c:	cmp	r1, #6
   24b60:	ldrls	pc, [pc, r1, lsl #2]
   24b64:	b	2480c <__assert_fail@plt+0x13534>
   24b68:	andeq	r4, r2, ip, asr #25
   24b6c:	andeq	r4, r2, ip, lsl #16
   24b70:	andeq	r4, r2, ip, lsr #25
   24b74:	andeq	r4, r2, ip, lsl #16
   24b78:	andeq	r4, r2, ip, lsl #23
   24b7c:	andeq	r4, r2, ip, lsl #16
   24b80:	andeq	r4, r2, r4, lsl #23
   24b84:	tst	r2, #128	; 0x80
   24b88:	bne	2480c <__assert_fail@plt+0x13534>
   24b8c:	cmp	r2, #10
   24b90:	beq	24e04 <__assert_fail@plt+0x13b2c>
   24b94:	cmp	r2, #0
   24b98:	bne	24bac <__assert_fail@plt+0x138d4>
   24b9c:	ldr	r2, [sp, #224]	; 0xe0
   24ba0:	ldr	r2, [r2, #128]	; 0x80
   24ba4:	tst	r2, #128	; 0x80
   24ba8:	bne	2480c <__assert_fail@plt+0x13534>
   24bac:	ldr	r6, [r3, #4]
   24bb0:	ldr	r3, [pc, #-2536]	; 241d0 <__assert_fail@plt+0x12ef8>
   24bb4:	tst	r6, r3
   24bb8:	beq	24c0c <__assert_fail@plt+0x13934>
   24bbc:	ldr	r2, [sp, #228]	; 0xe4
   24bc0:	mov	r1, r7
   24bc4:	add	r0, sp, #140	; 0x8c
   24bc8:	bl	17d08 <__assert_fail@plt+0x6a30>
   24bcc:	ldr	r3, [pc, #-2560]	; 241d4 <__assert_fail@plt+0x12efc>
   24bd0:	and	r3, r3, r6, lsr #8
   24bd4:	tst	r3, #4
   24bd8:	beq	24df0 <__assert_fail@plt+0x13b18>
   24bdc:	tst	r0, #1
   24be0:	beq	2480c <__assert_fail@plt+0x13534>
   24be4:	tst	r3, #8
   24be8:	bne	2480c <__assert_fail@plt+0x13534>
   24bec:	tst	r3, #32
   24bf0:	beq	24bfc <__assert_fail@plt+0x13924>
   24bf4:	tst	r0, #2
   24bf8:	beq	2480c <__assert_fail@plt+0x13534>
   24bfc:	tst	r3, #128	; 0x80
   24c00:	beq	24c0c <__assert_fail@plt+0x13934>
   24c04:	tst	r0, #8
   24c08:	beq	2480c <__assert_fail@plt+0x13534>
   24c0c:	ldr	r3, [r4, #12]
   24c10:	ldr	r2, [sp, #24]
   24c14:	add	r7, r7, #1
   24c18:	ldr	fp, [r3, r2, lsl #2]
   24c1c:	cmp	sl, #0
   24c20:	beq	24ca0 <__assert_fail@plt+0x139c8>
   24c24:	ldr	r3, [sp, #232]	; 0xe8
   24c28:	cmp	r7, r3
   24c2c:	bgt	24814 <__assert_fail@plt+0x1353c>
   24c30:	ldr	r3, [sp, #240]	; 0xf0
   24c34:	ldr	r3, [r3, r7, lsl #2]
   24c38:	cmp	r3, #0
   24c3c:	beq	24814 <__assert_fail@plt+0x1353c>
   24c40:	ldr	r2, [r3, #8]
   24c44:	cmp	r2, #0
   24c48:	ble	24814 <__assert_fail@plt+0x1353c>
   24c4c:	ldr	ip, [r3, #12]
   24c50:	sub	r2, r2, #1
   24c54:	mov	r0, #0
   24c58:	cmp	r0, r2
   24c5c:	bcs	24c94 <__assert_fail@plt+0x139bc>
   24c60:	add	r3, r0, r2
   24c64:	lsr	r3, r3, #1
   24c68:	b	24c80 <__assert_fail@plt+0x139a8>
   24c6c:	add	r1, r3, r0
   24c70:	cmp	r3, r0
   24c74:	mov	r2, r3
   24c78:	lsr	r3, r1, #1
   24c7c:	bls	24c94 <__assert_fail@plt+0x139bc>
   24c80:	ldr	r1, [ip, r3, lsl #2]
   24c84:	cmp	r1, fp
   24c88:	bge	24c6c <__assert_fail@plt+0x13994>
   24c8c:	add	r0, r3, #1
   24c90:	b	24c58 <__assert_fail@plt+0x13980>
   24c94:	ldr	r3, [ip, r0, lsl #2]
   24c98:	cmp	r3, fp
   24c9c:	bne	24814 <__assert_fail@plt+0x1353c>
   24ca0:	mov	r3, #0
   24ca4:	str	r3, [sp, #120]	; 0x78
   24ca8:	b	247fc <__assert_fail@plt+0x13524>
   24cac:	ldr	r1, [r3]
   24cb0:	asr	r0, r2, #5
   24cb4:	and	r2, r2, #31
   24cb8:	ldr	r1, [r1, r0, lsl #2]
   24cbc:	lsr	r2, r1, r2
   24cc0:	tst	r2, #1
   24cc4:	bne	24bac <__assert_fail@plt+0x138d4>
   24cc8:	b	2480c <__assert_fail@plt+0x13534>
   24ccc:	ldrb	r1, [r3]
   24cd0:	cmp	r1, r2
   24cd4:	bne	2480c <__assert_fail@plt+0x13534>
   24cd8:	b	24bac <__assert_fail@plt+0x138d4>
   24cdc:	ldr	r3, [r3]
   24ce0:	ldr	r2, [sp, #56]	; 0x38
   24ce4:	add	r3, r3, #1
   24ce8:	cmp	r2, r3
   24cec:	ble	24de4 <__assert_fail@plt+0x13b0c>
   24cf0:	add	r2, r5, r3, lsl #3
   24cf4:	ldr	r0, [r5, r3, lsl #3]
   24cf8:	ldr	r2, [r2, #4]
   24cfc:	cmp	sl, #0
   24d00:	sub	r3, r2, r0
   24d04:	beq	24d90 <__assert_fail@plt+0x13ab8>
   24d08:	cmn	r0, #1
   24d0c:	beq	24814 <__assert_fail@plt+0x1353c>
   24d10:	cmn	r2, #1
   24d14:	beq	24814 <__assert_fail@plt+0x1353c>
   24d18:	cmp	r3, #0
   24d1c:	beq	24d98 <__assert_fail@plt+0x13ac0>
   24d20:	ldr	r2, [sp, #168]	; 0xa8
   24d24:	ldr	r1, [sp, #144]	; 0x90
   24d28:	sub	r2, r2, r7
   24d2c:	cmp	r3, r2
   24d30:	bgt	24814 <__assert_fail@plt+0x1353c>
   24d34:	add	r0, r1, r0
   24d38:	mov	r2, r3
   24d3c:	add	r1, r1, r7
   24d40:	str	r3, [sp, #24]
   24d44:	bl	110a4 <memcmp@plt>
   24d48:	ldr	r3, [sp, #24]
   24d4c:	cmp	r0, #0
   24d50:	bne	24814 <__assert_fail@plt+0x1353c>
   24d54:	ldr	r2, [r4, #12]
   24d58:	add	r7, r7, r3
   24d5c:	ldr	fp, [r2, fp, lsl #2]
   24d60:	b	24c1c <__assert_fail@plt+0x13944>
   24d64:	add	r3, sp, #140	; 0x8c
   24d68:	str	r7, [sp]
   24d6c:	mov	r2, fp
   24d70:	add	r1, r4, #128	; 0x80
   24d74:	bl	197e4 <__assert_fail@plt+0x850c>
   24d78:	subs	r3, r0, #0
   24d7c:	bne	24d54 <__assert_fail@plt+0x13a7c>
   24d80:	ldr	r3, [r4]
   24d84:	add	r3, r3, r6
   24d88:	ldrb	r2, [r3, #4]
   24d8c:	b	24b50 <__assert_fail@plt+0x13878>
   24d90:	cmp	r3, #0
   24d94:	bne	24d54 <__assert_fail@plt+0x13a7c>
   24d98:	mov	r1, fp
   24d9c:	ldr	r0, [sp, #16]
   24da0:	bl	17640 <__assert_fail@plt+0x6368>
   24da4:	cmp	r0, #0
   24da8:	beq	24eac <__assert_fail@plt+0x13bd4>
   24dac:	add	fp, fp, fp, lsl #1
   24db0:	ldr	r3, [r4, #20]
   24db4:	ldr	r1, [sp, #240]	; 0xf0
   24db8:	add	r3, r3, fp, lsl #2
   24dbc:	ldr	r2, [r3, #8]
   24dc0:	ldr	r3, [r1, r7, lsl #2]
   24dc4:	ldr	fp, [r2]
   24dc8:	add	r1, r3, #12
   24dcc:	mov	r2, fp
   24dd0:	ldr	r0, [r3, #8]
   24dd4:	bl	1775c <__assert_fail@plt+0x6484>
   24dd8:	cmp	r0, #0
   24ddc:	beq	24d80 <__assert_fail@plt+0x13aa8>
   24de0:	b	247fc <__assert_fail@plt+0x13524>
   24de4:	cmp	sl, #0
   24de8:	bne	24814 <__assert_fail@plt+0x1353c>
   24dec:	b	24d98 <__assert_fail@plt+0x13ac0>
   24df0:	tst	r3, #8
   24df4:	beq	24bec <__assert_fail@plt+0x13914>
   24df8:	tst	r0, #1
   24dfc:	beq	24bec <__assert_fail@plt+0x13914>
   24e00:	b	2480c <__assert_fail@plt+0x13534>
   24e04:	ldr	r2, [sp, #224]	; 0xe0
   24e08:	ldr	r2, [r2, #128]	; 0x80
   24e0c:	tst	r2, #64	; 0x40
   24e10:	bne	24bac <__assert_fail@plt+0x138d4>
   24e14:	b	2480c <__assert_fail@plt+0x13534>
   24e18:	mov	r2, fp
   24e1c:	add	r1, sp, #124	; 0x7c
   24e20:	ldr	r0, [sp, #120]	; 0x78
   24e24:	bl	1775c <__assert_fail@plt+0x6484>
   24e28:	cmp	r0, #0
   24e2c:	bne	250f4 <__assert_fail@plt+0x13e1c>
   24e30:	cmp	sl, #0
   24e34:	beq	247fc <__assert_fail@plt+0x13524>
   24e38:	ldr	r6, [sl]
   24e3c:	ldr	r3, [sl, #4]
   24e40:	add	r2, r6, #1
   24e44:	cmp	r2, r3
   24e48:	str	r2, [sl]
   24e4c:	ldrne	r2, [sl, #8]
   24e50:	beq	24f2c <__assert_fail@plt+0x13c54>
   24e54:	add	r3, r6, r6, lsl #1
   24e58:	ldr	r0, [sp, #32]
   24e5c:	add	r6, r2, r3, lsl #3
   24e60:	str	r7, [r2, r3, lsl #3]
   24e64:	str	r4, [r6, #4]
   24e68:	bl	294e4 <__assert_fail@plt+0x1820c>
   24e6c:	cmp	r0, #0
   24e70:	str	r0, [r6, #8]
   24e74:	beq	24eac <__assert_fail@plt+0x13bd4>
   24e78:	mov	r2, r9
   24e7c:	mov	r1, r5
   24e80:	bl	11068 <memcpy@plt>
   24e84:	ldr	r0, [r6, #8]
   24e88:	mov	r2, r9
   24e8c:	mov	r1, r8
   24e90:	add	r0, r0, r9
   24e94:	bl	11068 <memcpy@plt>
   24e98:	ldr	r1, [sp, #16]
   24e9c:	add	r0, r6, #12
   24ea0:	bl	17a00 <__assert_fail@plt+0x6728>
   24ea4:	cmp	r0, #0
   24ea8:	beq	247fc <__assert_fail@plt+0x13524>
   24eac:	ldr	r0, [sp, #124]	; 0x7c
   24eb0:	ldr	r8, [sp, #12]
   24eb4:	bl	296b0 <__assert_fail@plt+0x183d8>
   24eb8:	ldr	r0, [sp, #284]	; 0x11c
   24ebc:	cmp	r0, r8
   24ec0:	beq	24ec8 <__assert_fail@plt+0x13bf0>
   24ec4:	bl	296b0 <__assert_fail@plt+0x183d8>
   24ec8:	mov	r4, #0
   24ecc:	mov	r3, #16
   24ed0:	cmp	sl, #0
   24ed4:	str	r8, [sp, #284]	; 0x11c
   24ed8:	str	r4, [sp, #276]	; 0x114
   24edc:	str	r3, [sp, #280]	; 0x118
   24ee0:	beq	25010 <__assert_fail@plt+0x13d38>
   24ee4:	ldr	r7, [sl]
   24ee8:	ldr	r6, [sl, #8]
   24eec:	cmp	r7, r4
   24ef0:	ble	24f18 <__assert_fail@plt+0x13c40>
   24ef4:	mov	r5, r6
   24ef8:	ldr	r0, [r5, #20]
   24efc:	bl	296b0 <__assert_fail@plt+0x183d8>
   24f00:	add	r4, r4, #1
   24f04:	ldr	r0, [r5, #8]
   24f08:	bl	296b0 <__assert_fail@plt+0x183d8>
   24f0c:	cmp	r7, r4
   24f10:	add	r5, r5, #24
   24f14:	bne	24ef8 <__assert_fail@plt+0x13c20>
   24f18:	mov	r0, r6
   24f1c:	bl	296b0 <__assert_fail@plt+0x183d8>
   24f20:	mov	r3, #12
   24f24:	str	r3, [sp, #48]	; 0x30
   24f28:	b	24370 <__assert_fail@plt+0x13098>
   24f2c:	lsl	r3, r2, #1
   24f30:	add	r2, r3, r2
   24f34:	ldr	r0, [sl, #8]
   24f38:	lsl	r1, r2, #4
   24f3c:	str	r3, [sp, #24]
   24f40:	bl	29510 <__assert_fail@plt+0x18238>
   24f44:	subs	r2, r0, #0
   24f48:	beq	24eac <__assert_fail@plt+0x13bd4>
   24f4c:	ldr	r3, [sp, #24]
   24f50:	str	r2, [sl, #8]
   24f54:	str	r3, [sl, #4]
   24f58:	b	24e54 <__assert_fail@plt+0x13b7c>
   24f5c:	ldr	r3, [r1]
   24f60:	ldr	r0, [sp, #56]	; 0x38
   24f64:	add	r3, r3, #1
   24f68:	cmp	r0, r3
   24f6c:	ble	23ef4 <__assert_fail@plt+0x12c1c>
   24f70:	ldr	r0, [r5, r3, lsl #3]
   24f74:	add	r2, r5, r3, lsl #3
   24f78:	cmp	r0, r7
   24f7c:	blt	24fa4 <__assert_fail@plt+0x13ccc>
   24f80:	ldrb	r1, [r1, #6]
   24f84:	tst	r1, #8
   24f88:	beq	24f98 <__assert_fail@plt+0x13cc0>
   24f8c:	ldr	r3, [r8, r3, lsl #3]
   24f90:	cmn	r3, #1
   24f94:	bne	2523c <__assert_fail@plt+0x13f64>
   24f98:	str	r7, [r2, #4]
   24f9c:	ldr	r2, [r5, #4]
   24fa0:	b	23ef4 <__assert_fail@plt+0x12c1c>
   24fa4:	str	r7, [r2, #4]
   24fa8:	mov	r1, r5
   24fac:	mov	r2, r9
   24fb0:	mov	r0, r8
   24fb4:	bl	11068 <memcpy@plt>
   24fb8:	ldr	r2, [r5, #4]
   24fbc:	b	23ef4 <__assert_fail@plt+0x12c1c>
   24fc0:	ldr	sl, [sp, #16]
   24fc4:	ldr	fp, [sp, #12]
   24fc8:	mov	r0, sl
   24fcc:	bl	296b0 <__assert_fail@plt+0x183d8>
   24fd0:	mov	r0, fp
   24fd4:	bl	296b0 <__assert_fail@plt+0x183d8>
   24fd8:	mov	r0, #0
   24fdc:	bl	296b0 <__assert_fail@plt+0x183d8>
   24fe0:	mov	r7, #12
   24fe4:	b	24104 <__assert_fail@plt+0x12e2c>
   24fe8:	sub	r2, r2, r4
   24fec:	ldr	r1, [r5, #12]
   24ff0:	lsl	r2, r2, #2
   24ff4:	add	r0, r0, sl, lsl #2
   24ff8:	add	r1, r1, r4, lsl #2
   24ffc:	bl	11068 <memcpy@plt>
   25000:	ldr	r2, [r5, #8]
   25004:	sub	r4, r2, r4
   25008:	add	sl, sl, r4
   2500c:	b	245dc <__assert_fail@plt+0x13304>
   25010:	mov	r3, #12
   25014:	str	r3, [sp, #48]	; 0x30
   25018:	b	24370 <__assert_fail@plt+0x13098>
   2501c:	ldr	r3, [sp, #44]	; 0x2c
   25020:	mov	r1, #16
   25024:	str	r1, [sp, #280]	; 0x118
   25028:	ldr	r3, [r3]
   2502c:	ldr	r1, [sp, #56]	; 0x38
   25030:	mov	ip, r3
   25034:	str	r3, [sp, #20]
   25038:	add	r3, sp, #116	; 0x74
   2503c:	mov	r0, r3
   25040:	str	r3, [sp, #16]
   25044:	mov	r3, #0
   25048:	mov	sl, r3
   2504c:	add	r8, sp, #288	; 0x120
   25050:	mov	r2, #2
   25054:	str	r3, [sp, #276]	; 0x114
   25058:	str	r8, [sp, #284]	; 0x11c
   2505c:	str	r3, [sp, #128]	; 0x80
   25060:	ldr	fp, [ip, #72]	; 0x48
   25064:	str	r3, [sp, #136]	; 0x88
   25068:	str	r3, [sp, #116]	; 0x74
   2506c:	str	r2, [sp, #132]	; 0x84
   25070:	str	r3, [r0, #4]
   25074:	str	r3, [r0, #8]
   25078:	mov	r3, #8
   2507c:	mov	r2, r8
   25080:	add	r0, sp, #276	; 0x114
   25084:	bl	295e8 <__assert_fail@plt+0x18310>
   25088:	cmp	r0, #0
   2508c:	bne	23e84 <__assert_fail@plt+0x12bac>
   25090:	ldr	r0, [sp, #284]	; 0x11c
   25094:	cmp	r0, r8
   25098:	beq	250a0 <__assert_fail@plt+0x13dc8>
   2509c:	bl	296b0 <__assert_fail@plt+0x183d8>
   250a0:	mov	r4, #0
   250a4:	mov	r3, #16
   250a8:	cmp	sl, #0
   250ac:	str	r8, [sp, #284]	; 0x11c
   250b0:	str	r4, [sp, #276]	; 0x114
   250b4:	str	r3, [sp, #280]	; 0x118
   250b8:	beq	25010 <__assert_fail@plt+0x13d38>
   250bc:	ldr	r7, [sl]
   250c0:	ldr	r6, [sl, #8]
   250c4:	cmp	r7, #0
   250c8:	ble	24f18 <__assert_fail@plt+0x13c40>
   250cc:	mov	r5, r6
   250d0:	ldr	r0, [r5, #20]
   250d4:	bl	296b0 <__assert_fail@plt+0x183d8>
   250d8:	add	r4, r4, #1
   250dc:	ldr	r0, [r5, #8]
   250e0:	bl	296b0 <__assert_fail@plt+0x183d8>
   250e4:	cmp	r7, r4
   250e8:	add	r5, r5, #24
   250ec:	bne	250d0 <__assert_fail@plt+0x13df8>
   250f0:	b	24f18 <__assert_fail@plt+0x13c40>
   250f4:	mov	fp, r4
   250f8:	b	247fc <__assert_fail@plt+0x13524>
   250fc:	ldr	r0, [sp, #124]	; 0x7c
   25100:	ldr	r8, [sp, #12]
   25104:	bl	296b0 <__assert_fail@plt+0x183d8>
   25108:	ldr	r0, [sp, #284]	; 0x11c
   2510c:	cmp	r0, r8
   25110:	beq	25164 <__assert_fail@plt+0x13e8c>
   25114:	bl	296b0 <__assert_fail@plt+0x183d8>
   25118:	ldr	r7, [sl]
   2511c:	mov	r3, #16
   25120:	cmp	r7, #0
   25124:	str	r4, [sp, #276]	; 0x114
   25128:	ldrgt	r6, [sl, #8]
   2512c:	str	r8, [sp, #284]	; 0x11c
   25130:	str	r3, [sp, #280]	; 0x118
   25134:	movgt	r5, r6
   25138:	ble	25174 <__assert_fail@plt+0x13e9c>
   2513c:	ldr	r0, [r5, #20]
   25140:	bl	296b0 <__assert_fail@plt+0x183d8>
   25144:	add	r4, r4, #1
   25148:	ldr	r0, [r5, #8]
   2514c:	bl	296b0 <__assert_fail@plt+0x183d8>
   25150:	cmp	r4, r7
   25154:	add	r5, r5, #24
   25158:	bne	2513c <__assert_fail@plt+0x13e64>
   2515c:	mov	r0, r6
   25160:	b	24364 <__assert_fail@plt+0x1308c>
   25164:	mov	r3, #16
   25168:	str	r4, [sp, #276]	; 0x114
   2516c:	str	r8, [sp, #284]	; 0x11c
   25170:	str	r3, [sp, #280]	; 0x118
   25174:	ldr	r6, [sl, #8]
   25178:	b	2515c <__assert_fail@plt+0x13e84>
   2517c:	ldr	r0, [sp, #124]	; 0x7c
   25180:	ldr	r8, [sp, #12]
   25184:	bl	296b0 <__assert_fail@plt+0x183d8>
   25188:	ldr	r0, [sp, #284]	; 0x11c
   2518c:	cmp	r0, r8
   25190:	bne	248d4 <__assert_fail@plt+0x135fc>
   25194:	b	248d8 <__assert_fail@plt+0x13600>
   25198:	ldr	r0, [sp, #124]	; 0x7c
   2519c:	ldr	r8, [sp, #12]
   251a0:	bl	296b0 <__assert_fail@plt+0x183d8>
   251a4:	ldr	r0, [sp, #284]	; 0x11c
   251a8:	cmp	r0, r8
   251ac:	beq	251b4 <__assert_fail@plt+0x13edc>
   251b0:	bl	296b0 <__assert_fail@plt+0x183d8>
   251b4:	mov	r4, #0
   251b8:	mov	r3, #16
   251bc:	cmp	sl, #0
   251c0:	str	r8, [sp, #284]	; 0x11c
   251c4:	str	r4, [sp, #276]	; 0x114
   251c8:	str	r3, [sp, #280]	; 0x118
   251cc:	beq	24930 <__assert_fail@plt+0x13658>
   251d0:	ldr	r6, [sl]
   251d4:	ldr	r7, [sl, #8]
   251d8:	cmp	r6, r4
   251dc:	ble	24928 <__assert_fail@plt+0x13650>
   251e0:	mov	r5, r7
   251e4:	ldr	r0, [r5, #20]
   251e8:	bl	296b0 <__assert_fail@plt+0x183d8>
   251ec:	add	r4, r4, #1
   251f0:	ldr	r0, [r5, #8]
   251f4:	bl	296b0 <__assert_fail@plt+0x183d8>
   251f8:	cmp	r4, r6
   251fc:	add	r5, r5, #24
   25200:	bne	251e4 <__assert_fail@plt+0x13f0c>
   25204:	b	24928 <__assert_fail@plt+0x13650>
   25208:	add	sl, sp, #128	; 0x80
   2520c:	b	25078 <__assert_fail@plt+0x13da0>
   25210:	ldr	r3, [r0, fp, lsl #3]
   25214:	ldr	r1, [sp, #56]	; 0x38
   25218:	add	r3, r3, #1
   2521c:	cmp	r1, r3
   25220:	ble	23ef4 <__assert_fail@plt+0x12c1c>
   25224:	add	r2, r5, r3, lsl #3
   25228:	str	r7, [r5, r3, lsl #3]
   2522c:	mvn	r3, #0
   25230:	str	r3, [r2, #4]
   25234:	ldr	r2, [r5, #4]
   25238:	b	23ef4 <__assert_fail@plt+0x12c1c>
   2523c:	mov	r2, r9
   25240:	mov	r1, r8
   25244:	mov	r0, r5
   25248:	bl	11068 <memcpy@plt>
   2524c:	ldr	r2, [r5, #4]
   25250:	b	23ef4 <__assert_fail@plt+0x12c1c>
   25254:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25258:	sub	sp, sp, #12
   2525c:	ldrb	ip, [r1, #28]
   25260:	ldr	r4, [r2, #4]
   25264:	ldr	r5, [r1]
   25268:	adds	r3, r4, #0
   2526c:	movne	r3, #1
   25270:	ands	r3, r3, ip, lsr #4
   25274:	beq	25294 <__assert_fail@plt+0x13fbc>
   25278:	ldr	r3, [r2, #20]
   2527c:	cmp	r3, #31
   25280:	bgt	254dc <__assert_fail@plt+0x14204>
   25284:	ldr	r1, [r5, #80]	; 0x50
   25288:	lsr	r3, r1, r3
   2528c:	tst	r3, #1
   25290:	beq	254dc <__assert_fail@plt+0x14204>
   25294:	mov	r8, r2
   25298:	ldr	r2, [r5, #64]	; 0x40
   2529c:	mov	sl, #0
   252a0:	cmp	r2, #31
   252a4:	mov	r9, r0
   252a8:	mov	r6, sp
   252ac:	str	sl, [sp, #4]
   252b0:	str	sl, [sp]
   252b4:	beq	25500 <__assert_fail@plt+0x14228>
   252b8:	lsl	r3, r2, #5
   252bc:	ldr	r7, [r5, #56]	; 0x38
   252c0:	add	r2, r2, #1
   252c4:	add	ip, r3, #4
   252c8:	mov	r1, #8
   252cc:	add	r3, r7, r3
   252d0:	strb	r1, [sp, #4]
   252d4:	ldm	r6, {r0, r1}
   252d8:	add	lr, r3, #24
   252dc:	str	r2, [r5, #64]	; 0x40
   252e0:	mov	r2, #0
   252e4:	str	r2, [r3, #4]
   252e8:	str	r2, [r3, #8]
   252ec:	str	r2, [r3, #12]
   252f0:	stm	lr, {r0, r1}
   252f4:	ldrb	r1, [r3, #30]
   252f8:	add	r7, r7, ip
   252fc:	mvn	r0, #0
   25300:	and	r1, r1, #243	; 0xf3
   25304:	str	r2, [r3, #16]
   25308:	str	r2, [r3, #20]
   2530c:	strb	r1, [r3, #30]
   25310:	str	r0, [r3, #32]
   25314:	ldr	r2, [r5, #64]	; 0x40
   25318:	mov	fp, #0
   2531c:	cmp	r2, #31
   25320:	str	fp, [sp]
   25324:	str	fp, [r6, #4]
   25328:	beq	2552c <__assert_fail@plt+0x14254>
   2532c:	lsl	r3, r2, #5
   25330:	ldr	sl, [r5, #56]	; 0x38
   25334:	add	r2, r2, #1
   25338:	add	ip, r3, #4
   2533c:	mov	r1, #9
   25340:	add	r3, sl, r3
   25344:	strb	r1, [sp, #4]
   25348:	ldm	r6, {r0, r1}
   2534c:	add	lr, r3, #24
   25350:	str	r2, [r5, #64]	; 0x40
   25354:	mov	r2, #0
   25358:	str	r2, [r3, #4]
   2535c:	str	r2, [r3, #8]
   25360:	str	r2, [r3, #12]
   25364:	stm	lr, {r0, r1}
   25368:	ldrb	r1, [r3, #30]
   2536c:	add	sl, sl, ip
   25370:	mvn	r0, #0
   25374:	and	r1, r1, #243	; 0xf3
   25378:	str	r2, [r3, #16]
   2537c:	str	r2, [r3, #20]
   25380:	strb	r1, [r3, #30]
   25384:	str	r0, [r3, #32]
   25388:	cmp	r4, #0
   2538c:	moveq	fp, sl
   25390:	beq	2540c <__assert_fail@plt+0x14134>
   25394:	ldr	r2, [r5, #64]	; 0x40
   25398:	mov	fp, #0
   2539c:	cmp	r2, #31
   253a0:	str	fp, [sp]
   253a4:	str	fp, [r6, #4]
   253a8:	beq	25584 <__assert_fail@plt+0x142ac>
   253ac:	lsl	r3, r2, #5
   253b0:	ldr	ip, [r5, #56]	; 0x38
   253b4:	add	r2, r2, #1
   253b8:	add	fp, r3, #4
   253bc:	mov	r1, #16
   253c0:	add	r3, ip, r3
   253c4:	strb	r1, [sp, #4]
   253c8:	ldm	r6, {r0, r1}
   253cc:	str	r2, [r5, #64]	; 0x40
   253d0:	add	lr, r3, #24
   253d4:	mov	r2, #0
   253d8:	add	fp, ip, fp
   253dc:	stmib	r3, {r2, r4, sl}
   253e0:	cmp	sl, r2
   253e4:	stm	lr, {r0, r1}
   253e8:	ldrb	r1, [r3, #30]
   253ec:	mvn	r0, #0
   253f0:	str	r2, [r3, #16]
   253f4:	and	r1, r1, #243	; 0xf3
   253f8:	str	r2, [r3, #20]
   253fc:	strb	r1, [r3, #30]
   25400:	str	r0, [r3, #32]
   25404:	str	fp, [r4]
   25408:	strne	fp, [sl]
   2540c:	ldr	r2, [r5, #64]	; 0x40
   25410:	mov	r4, #0
   25414:	cmp	r2, #31
   25418:	str	r4, [sp]
   2541c:	str	r4, [r6, #4]
   25420:	beq	25558 <__assert_fail@plt+0x14280>
   25424:	lsl	r3, r2, #5
   25428:	ldr	ip, [r5, #56]	; 0x38
   2542c:	add	r2, r2, #1
   25430:	add	r4, r3, #4
   25434:	mov	r1, #16
   25438:	add	r3, ip, r3
   2543c:	strb	r1, [sp, #4]
   25440:	ldm	r6, {r0, r1}
   25444:	str	r2, [r5, #64]	; 0x40
   25448:	add	r2, r3, #24
   2544c:	mov	lr, #0
   25450:	str	r7, [r3, #8]
   25454:	str	fp, [r3, #12]
   25458:	str	lr, [r3, #4]
   2545c:	stm	r2, {r0, r1}
   25460:	ldrb	r2, [r3, #30]
   25464:	cmp	r7, lr
   25468:	mvn	r1, #0
   2546c:	and	r2, r2, #243	; 0xf3
   25470:	add	r4, ip, r4
   25474:	str	lr, [r3, #16]
   25478:	str	lr, [r3, #20]
   2547c:	strb	r2, [r3, #30]
   25480:	str	r1, [r3, #32]
   25484:	strne	r4, [r7]
   25488:	cmp	fp, #0
   2548c:	beq	254e8 <__assert_fail@plt+0x14210>
   25490:	cmp	r4, #0
   25494:	str	r4, [fp]
   25498:	beq	254e8 <__assert_fail@plt+0x14210>
   2549c:	cmp	sl, #0
   254a0:	cmpne	r7, #0
   254a4:	beq	254e8 <__assert_fail@plt+0x14210>
   254a8:	ldr	r3, [r8, #20]
   254ac:	str	r3, [sl, #20]
   254b0:	str	r3, [r7, #20]
   254b4:	ldrb	r3, [r8, #26]
   254b8:	ldrb	r2, [sl, #26]
   254bc:	and	r3, r3, #8
   254c0:	bic	r2, r2, #8
   254c4:	orr	r2, r3, r2
   254c8:	strb	r2, [sl, #26]
   254cc:	ldrb	r2, [r7, #26]
   254d0:	bic	r2, r2, #8
   254d4:	orr	r3, r3, r2
   254d8:	strb	r3, [r7, #26]
   254dc:	mov	r0, r4
   254e0:	add	sp, sp, #12
   254e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   254e8:	mov	r3, #12
   254ec:	mov	r4, #0
   254f0:	mov	r0, r4
   254f4:	str	r3, [r9]
   254f8:	add	sp, sp, #12
   254fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25500:	mov	r0, #996	; 0x3e4
   25504:	bl	294e4 <__assert_fail@plt+0x1820c>
   25508:	subs	r7, r0, #0
   2550c:	beq	25314 <__assert_fail@plt+0x1403c>
   25510:	ldr	r1, [r5, #56]	; 0x38
   25514:	mov	r3, sl
   25518:	str	r1, [r7]
   2551c:	mov	r2, #1
   25520:	mov	ip, #4
   25524:	str	r7, [r5, #56]	; 0x38
   25528:	b	252c8 <__assert_fail@plt+0x13ff0>
   2552c:	mov	r0, #996	; 0x3e4
   25530:	bl	294e4 <__assert_fail@plt+0x1820c>
   25534:	subs	sl, r0, #0
   25538:	beq	25388 <__assert_fail@plt+0x140b0>
   2553c:	ldr	r1, [r5, #56]	; 0x38
   25540:	mov	r3, fp
   25544:	str	r1, [sl]
   25548:	mov	ip, #4
   2554c:	mov	r2, #1
   25550:	str	sl, [r5, #56]	; 0x38
   25554:	b	2533c <__assert_fail@plt+0x14064>
   25558:	mov	r0, #996	; 0x3e4
   2555c:	bl	294e4 <__assert_fail@plt+0x1820c>
   25560:	subs	ip, r0, #0
   25564:	beq	254e8 <__assert_fail@plt+0x14210>
   25568:	ldr	r1, [r5, #56]	; 0x38
   2556c:	mov	r3, r4
   25570:	str	r1, [ip]
   25574:	mov	r4, #4
   25578:	mov	r2, #1
   2557c:	str	ip, [r5, #56]	; 0x38
   25580:	b	25434 <__assert_fail@plt+0x1415c>
   25584:	mov	r0, #996	; 0x3e4
   25588:	bl	294e4 <__assert_fail@plt+0x1820c>
   2558c:	subs	ip, r0, #0
   25590:	beq	255b0 <__assert_fail@plt+0x142d8>
   25594:	ldr	r1, [r5, #56]	; 0x38
   25598:	mov	r3, fp
   2559c:	str	r1, [ip]
   255a0:	mov	r2, #1
   255a4:	mov	fp, #4
   255a8:	str	ip, [r5, #56]	; 0x38
   255ac:	b	253bc <__assert_fail@plt+0x140e4>
   255b0:	mov	fp, ip
   255b4:	b	2540c <__assert_fail@plt+0x14134>
   255b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   255bc:	mov	r8, r0
   255c0:	ldrb	r0, [r0, #28]
   255c4:	ldr	ip, [r8, #4]
   255c8:	sub	sp, sp, #148	; 0x94
   255cc:	mov	r7, r3
   255d0:	and	r0, r0, #144	; 0x90
   255d4:	mov	r3, #0
   255d8:	cmp	ip, #159	; 0x9f
   255dc:	str	r7, [r8, #12]
   255e0:	str	r1, [sp, #12]
   255e4:	mov	r5, r2
   255e8:	strb	r0, [r8, #28]
   255ec:	str	r3, [r8, #8]
   255f0:	str	r3, [sp, #36]	; 0x24
   255f4:	str	r3, [r8, #24]
   255f8:	ldr	r4, [r8]
   255fc:	bls	2609c <__assert_fail@plt+0x14dc4>
   25600:	mov	r2, #160	; 0xa0
   25604:	str	r2, [r8, #8]
   25608:	mov	r1, #0
   2560c:	mov	r0, r4
   25610:	bl	111f4 <memset@plt>
   25614:	ldr	r2, [pc, #4084]	; 26610 <__assert_fail@plt+0x15338>
   25618:	mov	r3, #31
   2561c:	cmp	r5, r2
   25620:	str	r3, [r4, #64]	; 0x40
   25624:	bhi	259c0 <__assert_fail@plt+0x146e8>
   25628:	add	r3, r5, #1
   2562c:	str	r3, [r4, #4]
   25630:	lsl	r0, r3, #3
   25634:	str	r3, [sp, #16]
   25638:	bl	294e4 <__assert_fail@plt+0x1820c>
   2563c:	cmp	r5, #0
   25640:	str	r0, [r4]
   25644:	beq	26118 <__assert_fail@plt+0x14e40>
   25648:	mov	r1, #1
   2564c:	lsl	r1, r1, #1
   25650:	cmp	r5, r1
   25654:	bcs	2564c <__assert_fail@plt+0x14374>
   25658:	sub	sl, r1, #1
   2565c:	mov	r0, #12
   25660:	bl	2949c <__assert_fail@plt+0x181c4>
   25664:	str	sl, [r4, #68]	; 0x44
   25668:	str	r0, [r4, #32]
   2566c:	bl	11110 <__ctype_get_mb_cur_max@plt>
   25670:	str	r0, [r4, #92]	; 0x5c
   25674:	mov	r0, #14
   25678:	bl	11278 <nl_langinfo@plt>
   2567c:	ldrb	r3, [r0]
   25680:	and	r3, r3, #223	; 0xdf
   25684:	cmp	r3, #85	; 0x55
   25688:	bne	256ac <__assert_fail@plt+0x143d4>
   2568c:	ldrb	r3, [r0, #1]
   25690:	and	r3, r3, #223	; 0xdf
   25694:	cmp	r3, #84	; 0x54
   25698:	bne	256ac <__assert_fail@plt+0x143d4>
   2569c:	ldrb	r3, [r0, #2]
   256a0:	and	r3, r3, #223	; 0xdf
   256a4:	cmp	r3, #70	; 0x46
   256a8:	beq	25e2c <__assert_fail@plt+0x14b54>
   256ac:	ldrb	r3, [r4, #88]	; 0x58
   256b0:	ldr	r2, [r4, #92]	; 0x5c
   256b4:	bic	r3, r3, #8
   256b8:	cmp	r2, #1
   256bc:	strb	r3, [r4, #88]	; 0x58
   256c0:	ble	256d8 <__assert_fail@plt+0x14400>
   256c4:	uxtb	r3, r3
   256c8:	ands	r6, r3, #4
   256cc:	beq	25db4 <__assert_fail@plt+0x14adc>
   256d0:	ldr	r3, [pc, #3900]	; 26614 <__assert_fail@plt+0x1533c>
   256d4:	str	r3, [r4, #60]	; 0x3c
   256d8:	ldr	r3, [r4]
   256dc:	cmp	r3, #0
   256e0:	beq	259c0 <__assert_fail@plt+0x146e8>
   256e4:	ldr	r3, [r4, #32]
   256e8:	cmp	r3, #0
   256ec:	beq	259c0 <__assert_fail@plt+0x146e8>
   256f0:	ldr	r2, [pc, #3872]	; 26618 <__assert_fail@plt+0x15340>
   256f4:	mov	r3, #0
   256f8:	ldr	r1, [pc, #3868]	; 2661c <__assert_fail@plt+0x15344>
   256fc:	cmp	r2, r3
   25700:	str	r3, [sp, #36]	; 0x24
   25704:	mov	r3, #1
   25708:	moveq	r3, r2
   2570c:	cmp	r1, #0
   25710:	mov	r2, #1
   25714:	moveq	r2, r1
   25718:	orr	r3, r3, r2
   2571c:	ands	r3, r3, #255	; 0xff
   25720:	str	r3, [sp, #24]
   25724:	beq	25748 <__assert_fail@plt+0x14470>
   25728:	mov	r1, #0
   2572c:	add	r0, r4, #136	; 0x88
   25730:	bl	11074 <pthread_mutex_init@plt>
   25734:	cmp	r0, #0
   25738:	bne	259c0 <__assert_fail@plt+0x146e8>
   2573c:	ldr	r3, [sp, #36]	; 0x24
   25740:	cmp	r3, #0
   25744:	bne	258cc <__assert_fail@plt+0x145f4>
   25748:	ands	r3, r7, #4194304	; 0x400000
   2574c:	mov	r1, #0
   25750:	mov	r2, #84	; 0x54
   25754:	add	r0, sp, #60	; 0x3c
   25758:	moveq	fp, r1
   2575c:	movne	fp, #1
   25760:	ldr	sl, [r8, #20]
   25764:	str	r3, [sp, #20]
   25768:	bl	111f4 <memset@plt>
   2576c:	ldrb	r2, [r4, #88]	; 0x58
   25770:	ldr	ip, [sp, #12]
   25774:	ldr	r1, [r4, #92]	; 0x5c
   25778:	cmp	sl, #0
   2577c:	moveq	r3, fp
   25780:	orrne	r3, fp, #1
   25784:	lsr	r0, r2, #2
   25788:	lsr	r2, r2, #3
   2578c:	and	r0, r0, #1
   25790:	and	r2, r2, #1
   25794:	cmp	r5, #0
   25798:	str	ip, [sp, #60]	; 0x3c
   2579c:	strb	fp, [sp, #132]	; 0x84
   257a0:	strb	r3, [sp, #135]	; 0x87
   257a4:	str	sl, [sp, #124]	; 0x7c
   257a8:	str	r5, [sp, #108]	; 0x6c
   257ac:	str	r5, [sp, #104]	; 0x68
   257b0:	str	r5, [sp, #116]	; 0x74
   257b4:	str	r5, [sp, #112]	; 0x70
   257b8:	mov	ip, r3
   257bc:	strb	r0, [sp, #133]	; 0x85
   257c0:	strb	r2, [sp, #134]	; 0x86
   257c4:	str	r1, [sp, #140]	; 0x8c
   257c8:	beq	258ec <__assert_fail@plt+0x14614>
   257cc:	ldr	r2, [sp, #16]
   257d0:	cmp	r1, #1
   257d4:	mov	sl, r2
   257d8:	ble	25830 <__assert_fail@plt+0x14558>
   257dc:	lsl	fp, r2, #2
   257e0:	mov	r1, fp
   257e4:	mov	r0, #0
   257e8:	str	r3, [sp, #28]
   257ec:	bl	29510 <__assert_fail@plt+0x18238>
   257f0:	subs	r2, r0, #0
   257f4:	beq	2584c <__assert_fail@plt+0x14574>
   257f8:	ldr	r0, [sp, #72]	; 0x48
   257fc:	str	r2, [sp, #68]	; 0x44
   25800:	cmp	r0, #0
   25804:	ldr	r3, [sp, #28]
   25808:	ldrbeq	ip, [sp, #135]	; 0x87
   2580c:	beq	25830 <__assert_fail@plt+0x14558>
   25810:	mov	r1, fp
   25814:	str	r3, [sp, #28]
   25818:	bl	29510 <__assert_fail@plt+0x18238>
   2581c:	cmp	r0, #0
   25820:	beq	2584c <__assert_fail@plt+0x14574>
   25824:	ldrb	ip, [sp, #135]	; 0x87
   25828:	ldr	r3, [sp, #28]
   2582c:	str	r0, [sp, #72]	; 0x48
   25830:	cmp	ip, #0
   25834:	bne	26074 <__assert_fail@plt+0x14d9c>
   25838:	ldr	r2, [sp, #16]
   2583c:	ldr	r1, [r4, #92]	; 0x5c
   25840:	str	r2, [sp, #96]	; 0x60
   25844:	b	258f0 <__assert_fail@plt+0x14618>
   25848:	ldr	r4, [sp, #16]
   2584c:	mov	r0, #12
   25850:	str	r0, [sp, #36]	; 0x24
   25854:	ldr	r6, [r8]
   25858:	ldr	r0, [r6, #56]	; 0x38
   2585c:	cmp	r0, #0
   25860:	beq	25874 <__assert_fail@plt+0x1459c>
   25864:	ldr	r5, [r0]
   25868:	bl	296b0 <__assert_fail@plt+0x183d8>
   2586c:	subs	r0, r5, #0
   25870:	bne	25864 <__assert_fail@plt+0x1458c>
   25874:	mov	r3, #31
   25878:	mov	r5, #0
   2587c:	str	r3, [r6, #64]	; 0x40
   25880:	ldr	r0, [r6, #16]
   25884:	str	r5, [r6, #56]	; 0x38
   25888:	str	r5, [r6, #52]	; 0x34
   2588c:	bl	296b0 <__assert_fail@plt+0x183d8>
   25890:	ldr	r0, [sp, #68]	; 0x44
   25894:	str	r5, [r6, #16]
   25898:	bl	296b0 <__assert_fail@plt+0x183d8>
   2589c:	ldr	r0, [sp, #72]	; 0x48
   258a0:	bl	296b0 <__assert_fail@plt+0x183d8>
   258a4:	ldrb	r3, [sp, #135]	; 0x87
   258a8:	cmp	r3, r5
   258ac:	beq	258b8 <__assert_fail@plt+0x145e0>
   258b0:	ldr	r0, [sp, #64]	; 0x40
   258b4:	bl	296b0 <__assert_fail@plt+0x183d8>
   258b8:	ldr	r3, [sp, #24]
   258bc:	cmp	r3, #0
   258c0:	beq	258cc <__assert_fail@plt+0x145f4>
   258c4:	add	r0, r4, #136	; 0x88
   258c8:	bl	11020 <pthread_mutex_destroy@plt>
   258cc:	mov	r0, r4
   258d0:	bl	1a5c8 <__assert_fail@plt+0x92f0>
   258d4:	ldr	r0, [sp, #36]	; 0x24
   258d8:	mov	r3, #0
   258dc:	str	r3, [r8]
   258e0:	str	r3, [r8, #4]
   258e4:	add	sp, sp, #148	; 0x94
   258e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   258ec:	mov	sl, r5
   258f0:	cmp	ip, #0
   258f4:	ldrne	r6, [sp, #64]	; 0x40
   258f8:	ldreq	r6, [sp, #12]
   258fc:	ands	r2, r7, #4194304	; 0x400000
   25900:	cmp	r2, #0
   25904:	str	r6, [sp, #64]	; 0x40
   25908:	beq	25d2c <__assert_fail@plt+0x14a54>
   2590c:	cmp	r1, #1
   25910:	ble	26878 <__assert_fail@plt+0x155a0>
   25914:	add	r0, sp, #60	; 0x3c
   25918:	bl	16f10 <__assert_fail@plt+0x5c38>
   2591c:	cmp	r0, #0
   25920:	bne	25850 <__assert_fail@plt+0x14578>
   25924:	ldr	r3, [sp, #92]	; 0x5c
   25928:	cmp	r5, r3
   2592c:	ble	259d4 <__assert_fail@plt+0x146fc>
   25930:	ldr	r2, [sp, #88]	; 0x58
   25934:	ldr	r1, [r4, #92]	; 0x5c
   25938:	ldr	r3, [sp, #96]	; 0x60
   2593c:	add	r2, r2, r1
   25940:	cmp	r3, r2
   25944:	bgt	259d4 <__assert_fail@plt+0x146fc>
   25948:	ldr	r2, [sp, #140]	; 0x8c
   2594c:	lsl	r9, r3, #1
   25950:	cmp	r2, #1
   25954:	ble	2599c <__assert_fail@plt+0x146c4>
   25958:	cmn	r9, #-1073741823	; 0xc0000001
   2595c:	bhi	2584c <__assert_fail@plt+0x14574>
   25960:	lsl	r6, r3, #3
   25964:	mov	r1, r6
   25968:	ldr	r0, [sp, #68]	; 0x44
   2596c:	bl	29510 <__assert_fail@plt+0x18238>
   25970:	subs	r3, r0, #0
   25974:	beq	2584c <__assert_fail@plt+0x14574>
   25978:	ldr	r0, [sp, #72]	; 0x48
   2597c:	str	r3, [sp, #68]	; 0x44
   25980:	cmp	r0, #0
   25984:	beq	2599c <__assert_fail@plt+0x146c4>
   25988:	mov	r1, r6
   2598c:	bl	29510 <__assert_fail@plt+0x18238>
   25990:	cmp	r0, #0
   25994:	beq	2584c <__assert_fail@plt+0x14574>
   25998:	str	r0, [sp, #72]	; 0x48
   2599c:	ldrb	r3, [sp, #135]	; 0x87
   259a0:	cmp	r3, #0
   259a4:	bne	25d98 <__assert_fail@plt+0x14ac0>
   259a8:	add	r0, sp, #60	; 0x3c
   259ac:	str	r9, [sp, #96]	; 0x60
   259b0:	bl	16f10 <__assert_fail@plt+0x5c38>
   259b4:	cmp	r0, #0
   259b8:	beq	25924 <__assert_fail@plt+0x1464c>
   259bc:	b	25850 <__assert_fail@plt+0x14578>
   259c0:	mov	r3, #12
   259c4:	str	r3, [sp, #36]	; 0x24
   259c8:	b	258cc <__assert_fail@plt+0x145f4>
   259cc:	add	r0, sp, #60	; 0x3c
   259d0:	bl	16d70 <__assert_fail@plt+0x5a98>
   259d4:	ldr	r5, [r8]
   259d8:	mov	r6, #0
   259dc:	str	r6, [r8, #24]
   259e0:	orr	r2, r7, #8388608	; 0x800000
   259e4:	add	r1, sp, #60	; 0x3c
   259e8:	add	r0, sp, #40	; 0x28
   259ec:	str	r7, [r5, #128]	; 0x80
   259f0:	str	r6, [sp, #36]	; 0x24
   259f4:	bl	19af8 <__assert_fail@plt+0x8820>
   259f8:	ldr	ip, [sp, #100]	; 0x64
   259fc:	add	r1, sp, #36	; 0x24
   25a00:	str	r6, [sp]
   25a04:	add	r2, sp, #40	; 0x28
   25a08:	str	r1, [sp, #4]
   25a0c:	mov	r3, r7
   25a10:	mov	r1, r8
   25a14:	add	ip, ip, r0
   25a18:	add	r0, sp, #60	; 0x3c
   25a1c:	str	ip, [sp, #100]	; 0x64
   25a20:	bl	204a4 <__assert_fail@plt+0xf1cc>
   25a24:	ldr	r6, [sp, #36]	; 0x24
   25a28:	adds	r6, r6, #0
   25a2c:	movne	r6, #1
   25a30:	cmp	r0, #0
   25a34:	movne	r6, #0
   25a38:	cmp	r6, #0
   25a3c:	mov	r2, r0
   25a40:	bne	260d8 <__assert_fail@plt+0x14e00>
   25a44:	add	fp, sp, #48	; 0x30
   25a48:	str	r6, [sp, #48]	; 0x30
   25a4c:	str	r6, [fp, #4]
   25a50:	ldr	r3, [r5, #64]	; 0x40
   25a54:	cmp	r3, #31
   25a58:	beq	260e4 <__assert_fail@plt+0x14e0c>
   25a5c:	lsl	ip, r3, #5
   25a60:	ldr	lr, [r5, #56]	; 0x38
   25a64:	add	r1, r3, #1
   25a68:	add	r3, ip, #4
   25a6c:	add	ip, lr, ip
   25a70:	mov	r6, #0
   25a74:	mov	r0, #2
   25a78:	str	r1, [r5, #64]	; 0x40
   25a7c:	str	r6, [ip, #4]
   25a80:	str	r6, [ip, #8]
   25a84:	str	r6, [ip, #12]
   25a88:	strb	r0, [sp, #52]	; 0x34
   25a8c:	ldm	fp, {r0, r1}
   25a90:	add	r7, ip, #24
   25a94:	cmp	r2, r6
   25a98:	stm	r7, {r0, r1}
   25a9c:	ldrb	r1, [ip, #30]
   25aa0:	mvn	r0, #0
   25aa4:	add	r3, lr, r3
   25aa8:	and	r1, r1, #243	; 0xf3
   25aac:	str	r6, [ip, #16]
   25ab0:	str	r6, [ip, #20]
   25ab4:	clz	r6, r3
   25ab8:	lsr	r6, r6, #5
   25abc:	strb	r1, [ip, #30]
   25ac0:	str	r0, [ip, #32]
   25ac4:	moveq	r2, r6
   25ac8:	beq	25afc <__assert_fail@plt+0x14824>
   25acc:	mov	r1, #0
   25ad0:	str	fp, [sp]
   25ad4:	mov	ip, #16
   25ad8:	str	r1, [fp, #4]
   25adc:	str	r1, [sp, #48]	; 0x30
   25ae0:	add	r0, r5, #56	; 0x38
   25ae4:	add	r1, r5, #64	; 0x40
   25ae8:	strb	ip, [sp, #52]	; 0x34
   25aec:	bl	1793c <__assert_fail@plt+0x6664>
   25af0:	clz	r2, r0
   25af4:	mov	r3, r0
   25af8:	lsr	r2, r2, #5
   25afc:	orrs	r2, r6, r2
   25b00:	str	r2, [sp, #12]
   25b04:	bne	260d0 <__assert_fail@plt+0x14df8>
   25b08:	ldr	r6, [r8]
   25b0c:	str	r3, [r4, #52]	; 0x34
   25b10:	ldr	r0, [r6, #4]
   25b14:	lsl	r0, r0, #2
   25b18:	bl	294e4 <__assert_fail@plt+0x1820c>
   25b1c:	ldr	r3, [r6, #4]
   25b20:	str	r0, [r6, #12]
   25b24:	lsl	r0, r3, #2
   25b28:	bl	294e4 <__assert_fail@plt+0x1820c>
   25b2c:	ldr	r3, [r6, #4]
   25b30:	add	r3, r3, r3, lsl #1
   25b34:	str	r0, [r6, #16]
   25b38:	lsl	r0, r3, #2
   25b3c:	bl	294e4 <__assert_fail@plt+0x1820c>
   25b40:	ldr	r3, [r6, #4]
   25b44:	add	r3, r3, r3, lsl #1
   25b48:	str	r0, [r6, #20]
   25b4c:	lsl	r0, r3, #2
   25b50:	bl	294e4 <__assert_fail@plt+0x1820c>
   25b54:	ldr	r3, [r6, #12]
   25b58:	cmp	r3, #0
   25b5c:	str	r0, [r6, #24]
   25b60:	beq	2584c <__assert_fail@plt+0x14574>
   25b64:	ldr	r3, [r6, #16]
   25b68:	cmp	r3, #0
   25b6c:	beq	2584c <__assert_fail@plt+0x14574>
   25b70:	ldr	r3, [r6, #20]
   25b74:	cmp	r3, #0
   25b78:	beq	25fac <__assert_fail@plt+0x14cd4>
   25b7c:	cmp	r0, #0
   25b80:	beq	2584c <__assert_fail@plt+0x14574>
   25b84:	ldr	r0, [r8, #24]
   25b88:	lsl	r0, r0, #2
   25b8c:	bl	294e4 <__assert_fail@plt+0x1820c>
   25b90:	cmp	r0, #0
   25b94:	str	r0, [r6, #132]	; 0x84
   25b98:	ldreq	r5, [r6, #52]	; 0x34
   25b9c:	beq	25c88 <__assert_fail@plt+0x149b0>
   25ba0:	ldr	r2, [r8, #24]
   25ba4:	cmp	r2, #0
   25ba8:	subne	r1, r0, #4
   25bac:	ldrne	r3, [sp, #12]
   25bb0:	beq	25bc4 <__assert_fail@plt+0x148ec>
   25bb4:	str	r3, [r1, #4]!
   25bb8:	add	r3, r3, #1
   25bbc:	cmp	r3, r2
   25bc0:	bne	25bb4 <__assert_fail@plt+0x148dc>
   25bc4:	ldr	r5, [r6, #52]	; 0x34
   25bc8:	mov	r9, #0
   25bcc:	mov	r3, r5
   25bd0:	ldrb	ip, [r5, #24]
   25bd4:	mov	lr, #1
   25bd8:	cmp	ip, #4
   25bdc:	beq	25c04 <__assert_fail@plt+0x1492c>
   25be0:	cmp	ip, #17
   25be4:	beq	25e5c <__assert_fail@plt+0x14b84>
   25be8:	ldr	r1, [r3, #4]
   25bec:	cmp	r1, #0
   25bf0:	beq	25c28 <__assert_fail@plt+0x14950>
   25bf4:	ldrb	ip, [r1, #24]
   25bf8:	mov	r3, r1
   25bfc:	cmp	ip, #4
   25c00:	bne	25be0 <__assert_fail@plt+0x14908>
   25c04:	ldr	ip, [r3, #20]
   25c08:	ldr	r1, [r3, #4]
   25c0c:	ldr	r7, [r0, ip, lsl #2]
   25c10:	cmp	r1, #0
   25c14:	str	r7, [r3, #20]
   25c18:	ldr	ip, [r6, #80]	; 0x50
   25c1c:	orr	ip, ip, lr, lsl r7
   25c20:	str	ip, [r6, #80]	; 0x50
   25c24:	bne	25bf4 <__assert_fail@plt+0x1491c>
   25c28:	mov	ip, r9
   25c2c:	b	25c34 <__assert_fail@plt+0x1495c>
   25c30:	mov	r3, r1
   25c34:	ldr	r1, [r3, #8]
   25c38:	cmp	r1, #0
   25c3c:	cmpne	r1, ip
   25c40:	bne	25bf4 <__assert_fail@plt+0x1491c>
   25c44:	ldr	r1, [r3]
   25c48:	mov	ip, r3
   25c4c:	cmp	r1, #0
   25c50:	bne	25c30 <__assert_fail@plt+0x14958>
   25c54:	cmp	r2, #0
   25c58:	beq	26850 <__assert_fail@plt+0x15578>
   25c5c:	ldr	r3, [r0]
   25c60:	cmp	r3, #0
   25c64:	beq	25c78 <__assert_fail@plt+0x149a0>
   25c68:	b	25c88 <__assert_fail@plt+0x149b0>
   25c6c:	ldr	r1, [r0, r3, lsl #2]
   25c70:	cmp	r1, r3
   25c74:	bne	25c88 <__assert_fail@plt+0x149b0>
   25c78:	add	r3, r3, #1
   25c7c:	cmp	r3, r2
   25c80:	bcc	25c6c <__assert_fail@plt+0x14994>
   25c84:	beq	26850 <__assert_fail@plt+0x15578>
   25c88:	mov	r7, #0
   25c8c:	b	25c94 <__assert_fail@plt+0x149bc>
   25c90:	mov	r5, r3
   25c94:	ldr	r3, [r5, #4]
   25c98:	cmp	r3, #0
   25c9c:	bne	25c90 <__assert_fail@plt+0x149b8>
   25ca0:	ldr	r3, [r5, #8]
   25ca4:	cmp	r3, #0
   25ca8:	bne	25c90 <__assert_fail@plt+0x149b8>
   25cac:	mov	r2, r7
   25cb0:	b	25ce4 <__assert_fail@plt+0x14a0c>
   25cb4:	ldr	r0, [sp, #48]	; 0x30
   25cb8:	cmp	r0, #0
   25cbc:	bne	25850 <__assert_fail@plt+0x14578>
   25cc0:	ldr	r1, [r5]
   25cc4:	cmp	r1, #0
   25cc8:	beq	25ed8 <__assert_fail@plt+0x14c00>
   25ccc:	ldr	r2, [r1, #8]
   25cd0:	cmp	r5, r2
   25cd4:	cmpne	r2, #0
   25cd8:	bne	26864 <__assert_fail@plt+0x1558c>
   25cdc:	ldr	r3, [r1, #4]
   25ce0:	mov	r5, r1
   25ce4:	cmp	r3, #0
   25ce8:	str	r7, [sp, #48]	; 0x30
   25cec:	beq	25cfc <__assert_fail@plt+0x14a24>
   25cf0:	ldrb	r1, [r3, #24]
   25cf4:	cmp	r1, #17
   25cf8:	beq	25eac <__assert_fail@plt+0x14bd4>
   25cfc:	cmp	r2, #0
   25d00:	beq	25cc0 <__assert_fail@plt+0x149e8>
   25d04:	ldrb	r3, [r2, #24]
   25d08:	cmp	r3, #17
   25d0c:	bne	25cb4 <__assert_fail@plt+0x149dc>
   25d10:	mov	r1, r8
   25d14:	mov	r0, fp
   25d18:	bl	25254 <__assert_fail@plt+0x13f7c>
   25d1c:	cmp	r0, #0
   25d20:	str	r0, [r5, #8]
   25d24:	strne	r5, [r0]
   25d28:	b	25cb4 <__assert_fail@plt+0x149dc>
   25d2c:	cmp	r1, #1
   25d30:	bgt	259cc <__assert_fail@plt+0x146f4>
   25d34:	cmp	r3, #0
   25d38:	beq	2686c <__assert_fail@plt+0x15594>
   25d3c:	ldr	r2, [sp, #108]	; 0x6c
   25d40:	ldr	r3, [sp, #88]	; 0x58
   25d44:	cmp	sl, r2
   25d48:	movge	sl, r2
   25d4c:	cmp	sl, r3
   25d50:	bgt	25d64 <__assert_fail@plt+0x14a8c>
   25d54:	str	r3, [sp, #88]	; 0x58
   25d58:	str	r3, [sp, #92]	; 0x5c
   25d5c:	b	259d4 <__assert_fail@plt+0x146fc>
   25d60:	ldr	r6, [sp, #64]	; 0x40
   25d64:	ldr	r2, [sp, #60]	; 0x3c
   25d68:	ldr	r0, [sp, #84]	; 0x54
   25d6c:	add	r2, r2, r3
   25d70:	ldr	r1, [sp, #124]	; 0x7c
   25d74:	ldrb	r2, [r2, r0]
   25d78:	ldrb	r2, [r1, r2]
   25d7c:	strb	r2, [r6, r3]
   25d80:	add	r3, r3, #1
   25d84:	cmp	sl, r3
   25d88:	bne	25d60 <__assert_fail@plt+0x14a88>
   25d8c:	str	r3, [sp, #88]	; 0x58
   25d90:	str	r3, [sp, #92]	; 0x5c
   25d94:	b	259d4 <__assert_fail@plt+0x146fc>
   25d98:	mov	r1, r9
   25d9c:	ldr	r0, [sp, #64]	; 0x40
   25da0:	bl	29510 <__assert_fail@plt+0x18238>
   25da4:	cmp	r0, #0
   25da8:	beq	2584c <__assert_fail@plt+0x14574>
   25dac:	str	r0, [sp, #64]	; 0x40
   25db0:	b	259a8 <__assert_fail@plt+0x146d0>
   25db4:	mov	r1, #1
   25db8:	mov	r0, #32
   25dbc:	bl	2949c <__assert_fail@plt+0x181c4>
   25dc0:	cmp	r0, #0
   25dc4:	str	r0, [r4, #60]	; 0x3c
   25dc8:	beq	259c0 <__assert_fail@plt+0x146e8>
   25dcc:	mov	fp, #1
   25dd0:	lsl	r9, r6, #3
   25dd4:	mov	sl, #0
   25dd8:	mov	r0, r9
   25ddc:	bl	11200 <btowc@plt>
   25de0:	cmn	r0, #1
   25de4:	ldrne	r2, [r4, #60]	; 0x3c
   25de8:	ldrne	r3, [r2, r6]
   25dec:	orrne	r3, r3, fp, lsl sl
   25df0:	strne	r3, [r2, r6]
   25df4:	bics	r3, r9, #127	; 0x7f
   25df8:	bne	25e0c <__assert_fail@plt+0x14b34>
   25dfc:	cmp	r0, r9
   25e00:	ldrbne	r3, [r4, #88]	; 0x58
   25e04:	orrne	r3, r3, #8
   25e08:	strbne	r3, [r4, #88]	; 0x58
   25e0c:	add	sl, sl, #1
   25e10:	cmp	sl, #32
   25e14:	add	r9, r9, #1
   25e18:	bne	25dd8 <__assert_fail@plt+0x14b00>
   25e1c:	add	r6, r6, #4
   25e20:	cmp	r6, #32
   25e24:	bne	25dd0 <__assert_fail@plt+0x14af8>
   25e28:	b	256d8 <__assert_fail@plt+0x14400>
   25e2c:	ldrb	r3, [r0, #3]
   25e30:	ldr	r1, [pc, #2024]	; 26620 <__assert_fail@plt+0x15348>
   25e34:	cmp	r3, #45	; 0x2d
   25e38:	moveq	r3, #4
   25e3c:	movne	r3, #3
   25e40:	add	r0, r0, r3
   25e44:	bl	11008 <strcmp@plt>
   25e48:	cmp	r0, #0
   25e4c:	ldrbeq	r3, [r4, #88]	; 0x58
   25e50:	orreq	r3, r3, #4
   25e54:	strbeq	r3, [r4, #88]	; 0x58
   25e58:	b	256ac <__assert_fail@plt+0x143d4>
   25e5c:	ldr	r7, [r3, #4]
   25e60:	cmp	r7, #0
   25e64:	beq	25c28 <__assert_fail@plt+0x14950>
   25e68:	ldrb	ip, [r7, #24]
   25e6c:	cmp	ip, #17
   25e70:	movne	r3, r7
   25e74:	bne	25bd8 <__assert_fail@plt+0x14900>
   25e78:	ldr	r1, [r7, #4]
   25e7c:	ldr	ip, [r7, #20]
   25e80:	cmp	r1, #0
   25e84:	str	r1, [r3, #4]
   25e88:	strne	r3, [r1]
   25e8c:	ldr	r7, [r3, #20]
   25e90:	cmp	ip, #31
   25e94:	ldr	r7, [r0, r7, lsl #2]
   25e98:	str	r7, [r0, ip, lsl #2]
   25e9c:	ldrle	r7, [r6, #80]	; 0x50
   25ea0:	bicle	ip, r7, lr, lsl ip
   25ea4:	strle	ip, [r6, #80]	; 0x50
   25ea8:	b	25bec <__assert_fail@plt+0x14914>
   25eac:	mov	r2, r3
   25eb0:	mov	r1, r8
   25eb4:	mov	r0, fp
   25eb8:	bl	25254 <__assert_fail@plt+0x13f7c>
   25ebc:	ldr	r2, [r5, #8]
   25ec0:	cmp	r0, #0
   25ec4:	str	r0, [r5, #4]
   25ec8:	strne	r5, [r0]
   25ecc:	cmp	r2, #0
   25ed0:	bne	25d04 <__assert_fail@plt+0x14a2c>
   25ed4:	b	25cb4 <__assert_fail@plt+0x149dc>
   25ed8:	ldr	r9, [r6, #52]	; 0x34
   25edc:	ldr	r7, [pc, #1856]	; 26624 <__assert_fail@plt+0x1534c>
   25ee0:	ldr	r5, [pc, #1856]	; 26628 <__assert_fail@plt+0x15350>
   25ee4:	b	25eec <__assert_fail@plt+0x14c14>
   25ee8:	mov	r9, r3
   25eec:	ldr	r3, [r9, #4]
   25ef0:	cmp	r3, #0
   25ef4:	bne	25ee8 <__assert_fail@plt+0x14c10>
   25ef8:	ldr	r3, [r9, #8]
   25efc:	cmp	r3, #0
   25f00:	bne	25ee8 <__assert_fail@plt+0x14c10>
   25f04:	b	25f80 <__assert_fail@plt+0x14ca8>
   25f08:	add	r3, r9, #20
   25f0c:	str	r9, [r9, #12]
   25f10:	ldm	r3, {r1, r2}
   25f14:	mov	r0, r6
   25f18:	bl	1748c <__assert_fail@plt+0x61b4>
   25f1c:	cmn	r0, #1
   25f20:	str	r0, [r9, #28]
   25f24:	beq	2584c <__assert_fail@plt+0x14574>
   25f28:	ldrb	r3, [r9, #24]
   25f2c:	cmp	r3, #12
   25f30:	bne	25f54 <__assert_fail@plt+0x14c7c>
   25f34:	ldr	r3, [r6]
   25f38:	ldr	r2, [r9, #20]
   25f3c:	add	r0, r3, r0, lsl #3
   25f40:	and	r2, r2, r7
   25f44:	ldr	r3, [r0, #4]
   25f48:	bic	r3, r3, r5
   25f4c:	orr	r3, r3, r2, lsl #8
   25f50:	str	r3, [r0, #4]
   25f54:	ldr	r2, [r9]
   25f58:	cmp	r2, #0
   25f5c:	beq	25fb8 <__assert_fail@plt+0x14ce0>
   25f60:	ldr	r3, [r2, #8]
   25f64:	cmp	r3, #0
   25f68:	cmpne	r9, r3
   25f6c:	moveq	r9, #1
   25f70:	movne	r9, #0
   25f74:	cmp	r9, #0
   25f78:	mov	r9, r2
   25f7c:	beq	25ee8 <__assert_fail@plt+0x14c10>
   25f80:	ldrb	r3, [r9, #24]
   25f84:	cmp	r3, #16
   25f88:	bne	25f08 <__assert_fail@plt+0x14c30>
   25f8c:	ldr	r3, [r9, #4]
   25f90:	ldr	r2, [r3, #12]
   25f94:	ldr	r3, [r3, #28]
   25f98:	str	r2, [r9, #12]
   25f9c:	str	r3, [r9, #28]
   25fa0:	b	25f54 <__assert_fail@plt+0x14c7c>
   25fa4:	ldr	r4, [sp, #12]
   25fa8:	ldr	r8, [sp, #16]
   25fac:	mov	r3, #12
   25fb0:	str	r3, [sp, #36]	; 0x24
   25fb4:	b	25854 <__assert_fail@plt+0x1457c>
   25fb8:	ldr	r7, [r6, #52]	; 0x34
   25fbc:	mov	r3, r7
   25fc0:	ldrb	r1, [r3, #24]
   25fc4:	cmp	r1, #11
   25fc8:	beq	25ff8 <__assert_fail@plt+0x14d20>
   25fcc:	cmp	r1, #16
   25fd0:	bne	26008 <__assert_fail@plt+0x14d30>
   25fd4:	ldmib	r3, {r0, r1}
   25fd8:	ldr	ip, [r1, #12]
   25fdc:	str	ip, [r0, #16]
   25fe0:	ldr	ip, [r3, #16]
   25fe4:	mov	r3, r0
   25fe8:	str	ip, [r1, #16]
   25fec:	ldrb	r1, [r3, #24]
   25ff0:	cmp	r1, #11
   25ff4:	bne	25fcc <__assert_fail@plt+0x14cf4>
   25ff8:	ldr	r1, [r3, #4]
   25ffc:	str	r3, [r1, #16]
   26000:	mov	r3, r1
   26004:	b	25fc0 <__assert_fail@plt+0x14ce8>
   26008:	ldmib	r3, {r0, ip}
   2600c:	cmp	r0, #0
   26010:	beq	26830 <__assert_fail@plt+0x15558>
   26014:	ldr	r1, [r3, #16]
   26018:	cmp	ip, #0
   2601c:	str	r1, [r0, #16]
   26020:	beq	26034 <__assert_fail@plt+0x14d5c>
   26024:	ldr	r1, [r3, #16]
   26028:	cmp	r0, #0
   2602c:	str	r1, [ip, #16]
   26030:	beq	2603c <__assert_fail@plt+0x14d64>
   26034:	mov	r3, r0
   26038:	b	25fc0 <__assert_fail@plt+0x14ce8>
   2603c:	mov	r1, ip
   26040:	mov	r0, r2
   26044:	b	26060 <__assert_fail@plt+0x14d88>
   26048:	ldr	r9, [r3]
   2604c:	cmp	r9, #0
   26050:	beq	26124 <__assert_fail@plt+0x14e4c>
   26054:	ldr	r1, [r9, #8]
   26058:	mov	r0, r3
   2605c:	mov	r3, r9
   26060:	cmp	r0, r1
   26064:	cmpne	r1, #0
   26068:	beq	26048 <__assert_fail@plt+0x14d70>
   2606c:	mov	r3, r1
   26070:	b	25fc0 <__assert_fail@plt+0x14ce8>
   26074:	ldr	r1, [sp, #16]
   26078:	ldr	r0, [sp, #64]	; 0x40
   2607c:	str	r3, [sp, #28]
   26080:	bl	29510 <__assert_fail@plt+0x18238>
   26084:	cmp	r0, #0
   26088:	beq	2584c <__assert_fail@plt+0x14574>
   2608c:	ldrb	ip, [sp, #135]	; 0x87
   26090:	str	r0, [sp, #64]	; 0x40
   26094:	ldr	r3, [sp, #28]
   26098:	b	25838 <__assert_fail@plt+0x14560>
   2609c:	mov	r0, r4
   260a0:	mov	r1, #160	; 0xa0
   260a4:	bl	29510 <__assert_fail@plt+0x18238>
   260a8:	subs	r4, r0, #0
   260ac:	beq	268dc <__assert_fail@plt+0x15604>
   260b0:	mov	r3, #160	; 0xa0
   260b4:	str	r4, [r8]
   260b8:	str	r3, [r8, #4]
   260bc:	b	25600 <__assert_fail@plt+0x14328>
   260c0:	cmp	r2, #0
   260c4:	movne	r3, lr
   260c8:	movne	r6, #1
   260cc:	bne	25acc <__assert_fail@plt+0x147f4>
   260d0:	mov	r3, #12
   260d4:	str	r3, [sp, #36]	; 0x24
   260d8:	mov	r3, #0
   260dc:	str	r3, [r4, #52]	; 0x34
   260e0:	b	25854 <__assert_fail@plt+0x1457c>
   260e4:	mov	r0, #996	; 0x3e4
   260e8:	str	r2, [sp, #12]
   260ec:	bl	294e4 <__assert_fail@plt+0x1820c>
   260f0:	ldr	r2, [sp, #12]
   260f4:	subs	lr, r0, #0
   260f8:	beq	260c0 <__assert_fail@plt+0x14de8>
   260fc:	ldr	r0, [r5, #56]	; 0x38
   26100:	mov	ip, r6
   26104:	str	r0, [lr]
   26108:	mov	r1, #1
   2610c:	mov	r3, #4
   26110:	str	lr, [r5, #56]	; 0x38
   26114:	b	25a6c <__assert_fail@plt+0x14794>
   26118:	mov	sl, r5
   2611c:	mov	r1, #1
   26120:	b	2565c <__assert_fail@plt+0x14384>
   26124:	str	r4, [sp, #16]
   26128:	ldrb	r3, [r7, #24]
   2612c:	ldr	r2, [r7, #28]
   26130:	sub	r3, r3, #2
   26134:	cmp	r3, #14
   26138:	ldrls	pc, [pc, r3, lsl #2]
   2613c:	b	262f8 <__assert_fail@plt+0x15020>
   26140:	andeq	r6, r2, r0, lsl #4
   26144:	strdeq	r6, [r2], -r8
   26148:	andeq	r6, r2, r8, asr #5
   2614c:	strdeq	r6, [r2], -r8
   26150:	strdeq	r6, [r2], -r8
   26154:	strdeq	r6, [r2], -r8
   26158:	andeq	r6, r2, ip, lsl #5
   2615c:	andeq	r6, r2, ip, lsl #5
   26160:	andeq	r6, r2, ip, ror r1
   26164:	andeq	r6, r2, ip, ror r1
   26168:	andeq	r6, r2, ip, lsl #5
   2616c:	strdeq	r6, [r2], -r8
   26170:	strdeq	r6, [r2], -r8
   26174:	strdeq	r6, [r2], -r8
   26178:	andeq	r6, r2, r0, lsl #4
   2617c:	ldrb	r3, [r6, #88]	; 0x58
   26180:	ldr	r5, [r6, #20]
   26184:	add	r2, r2, r2, lsl #1
   26188:	orr	r3, r3, #1
   2618c:	strb	r3, [r6, #88]	; 0x58
   26190:	ldr	r3, [r7, #4]
   26194:	mov	r0, #8
   26198:	cmp	r3, #0
   2619c:	ldrne	r3, [r3, #12]
   261a0:	ldreq	r3, [r7, #16]
   261a4:	ldr	sl, [r3, #28]
   261a8:	ldr	r3, [r7, #8]
   261ac:	cmp	r3, #0
   261b0:	ldrne	r3, [r3, #12]
   261b4:	ldreq	r3, [r7, #16]
   261b8:	ldr	r4, [r3, #28]
   261bc:	mov	r3, #2
   261c0:	str	r3, [r5, r2, lsl #2]
   261c4:	add	r5, r5, r2, lsl r3
   261c8:	bl	294e4 <__assert_fail@plt+0x1820c>
   261cc:	cmp	r0, #0
   261d0:	str	r0, [r5, #8]
   261d4:	beq	25848 <__assert_fail@plt+0x14570>
   261d8:	cmp	sl, r4
   261dc:	moveq	r3, #1
   261e0:	streq	r3, [r5, #4]
   261e4:	streq	sl, [r0]
   261e8:	beq	26200 <__assert_fail@plt+0x14f28>
   261ec:	mov	r3, #2
   261f0:	str	r3, [r5, #4]
   261f4:	strlt	sl, [r0]
   261f8:	strlt	r4, [r0, #4]
   261fc:	stmge	r0, {r4, sl}
   26200:	ldr	r3, [r7, #4]
   26204:	cmp	r3, #0
   26208:	moveq	r2, r9
   2620c:	beq	2621c <__assert_fail@plt+0x14f44>
   26210:	mov	r7, r3
   26214:	b	26128 <__assert_fail@plt+0x14e50>
   26218:	mov	r7, r5
   2621c:	ldr	r3, [r7, #8]
   26220:	cmp	r3, #0
   26224:	cmpne	r3, r2
   26228:	moveq	sl, #1
   2622c:	movne	sl, #0
   26230:	bne	26210 <__assert_fail@plt+0x14f38>
   26234:	ldr	r5, [r7]
   26238:	mov	r2, r7
   2623c:	cmp	r5, #0
   26240:	bne	26218 <__assert_fail@plt+0x14f40>
   26244:	ldr	r4, [sp, #16]
   26248:	ldr	r2, [r6, #24]
   2624c:	ldr	r9, [sp, #12]
   26250:	add	r7, r5, r5, lsl #1
   26254:	lsl	r7, r7, #2
   26258:	add	r3, r2, r7
   2625c:	ldr	r3, [r3, #4]
   26260:	cmp	r3, #0
   26264:	beq	2630c <__assert_fail@plt+0x15034>
   26268:	ldr	r0, [r6, #8]
   2626c:	add	r5, r5, #1
   26270:	cmp	r0, r5
   26274:	bne	26250 <__assert_fail@plt+0x14f78>
   26278:	cmp	r9, #0
   2627c:	beq	2636c <__assert_fail@plt+0x15094>
   26280:	ldr	r9, [sp, #12]
   26284:	mov	r5, #0
   26288:	b	26250 <__assert_fail@plt+0x14f78>
   2628c:	ldr	r1, [r7, #16]
   26290:	add	r2, r2, r2, lsl #1
   26294:	ldr	r3, [r6, #20]
   26298:	ldr	sl, [r1, #28]
   2629c:	add	r5, r3, r2, lsl #2
   262a0:	mov	r0, #4
   262a4:	mov	r1, #1
   262a8:	str	r1, [r3, r2, lsl #2]
   262ac:	str	r1, [r5, #4]
   262b0:	bl	294e4 <__assert_fail@plt+0x1820c>
   262b4:	cmp	r0, #0
   262b8:	str	r0, [r5, #8]
   262bc:	beq	268e4 <__assert_fail@plt+0x1560c>
   262c0:	str	sl, [r0]
   262c4:	b	26200 <__assert_fail@plt+0x14f28>
   262c8:	ldr	r1, [r7, #16]
   262cc:	ldr	r3, [r6, #12]
   262d0:	ldr	sl, [r1, #28]
   262d4:	str	sl, [r3, r2, lsl #2]
   262d8:	ldrb	r3, [r7, #24]
   262dc:	cmp	r3, #4
   262e0:	bne	26200 <__assert_fail@plt+0x14f28>
   262e4:	add	r2, r2, r2, lsl #1
   262e8:	ldr	r3, [r6, #20]
   262ec:	mov	r0, #4
   262f0:	add	r5, r3, r2, lsl #2
   262f4:	b	262a4 <__assert_fail@plt+0x14fcc>
   262f8:	ldr	r1, [r7, #16]
   262fc:	ldr	r3, [r6, #12]
   26300:	ldr	r1, [r1, #28]
   26304:	str	r1, [r3, r2, lsl #2]
   26308:	b	26200 <__assert_fail@plt+0x14f28>
   2630c:	mov	r3, #1
   26310:	mov	r2, r5
   26314:	mov	r1, r6
   26318:	mov	r0, fp
   2631c:	bl	1ad7c <__assert_fail@plt+0x9aa4>
   26320:	cmp	r0, #0
   26324:	bne	25850 <__assert_fail@plt+0x14578>
   26328:	ldr	r2, [r6, #24]
   2632c:	add	r7, r2, r7
   26330:	ldr	r7, [r7, #4]
   26334:	cmp	r7, #0
   26338:	bne	26268 <__assert_fail@plt+0x14f90>
   2633c:	ldr	r0, [sp, #56]	; 0x38
   26340:	bl	296b0 <__assert_fail@plt+0x183d8>
   26344:	ldr	r3, [r6, #8]
   26348:	add	r5, r5, #1
   2634c:	cmp	r3, r5
   26350:	movne	r9, sl
   26354:	beq	26360 <__assert_fail@plt+0x15088>
   26358:	ldr	r2, [r6, #24]
   2635c:	b	26250 <__assert_fail@plt+0x14f78>
   26360:	mov	r5, r7
   26364:	ldr	r9, [sp, #12]
   26368:	b	26358 <__assert_fail@plt+0x15080>
   2636c:	ldrb	r3, [r8, #28]
   26370:	tst	r3, #16
   26374:	bne	26384 <__assert_fail@plt+0x150ac>
   26378:	ldr	r3, [r8, #24]
   2637c:	cmp	r3, #0
   26380:	bne	26840 <__assert_fail@plt+0x15568>
   26384:	ldr	r3, [r6, #76]	; 0x4c
   26388:	cmp	r3, #0
   2638c:	beq	264bc <__assert_fail@plt+0x151e4>
   26390:	add	r0, r0, r0, lsl #1
   26394:	lsl	r0, r0, #2
   26398:	bl	294e4 <__assert_fail@plt+0x1820c>
   2639c:	cmp	r0, #0
   263a0:	str	r0, [r6, #28]
   263a4:	beq	2584c <__assert_fail@plt+0x14574>
   263a8:	ldr	r3, [r6, #8]
   263ac:	cmp	r3, #0
   263b0:	beq	264bc <__assert_fail@plt+0x151e4>
   263b4:	mov	r3, #0
   263b8:	mov	r2, r0
   263bc:	mov	r1, r3
   263c0:	mov	r0, r3
   263c4:	b	263cc <__assert_fail@plt+0x150f4>
   263c8:	ldr	r2, [r6, #28]
   263cc:	add	ip, r2, r3
   263d0:	str	r1, [r2, r3]
   263d4:	str	r1, [ip, #4]
   263d8:	str	r1, [ip, #8]
   263dc:	ldr	r2, [r6, #8]
   263e0:	add	r0, r0, #1
   263e4:	cmp	r0, r2
   263e8:	add	r3, r3, #12
   263ec:	bcc	263c8 <__assert_fail@plt+0x150f0>
   263f0:	cmp	r2, #0
   263f4:	beq	264bc <__assert_fail@plt+0x151e4>
   263f8:	mov	r3, #0
   263fc:	ldr	lr, [r6, #24]
   26400:	str	r8, [sp, #16]
   26404:	mov	sl, r3
   26408:	mov	r8, r3
   2640c:	str	r4, [sp, #12]
   26410:	add	r0, lr, r8
   26414:	ldmib	r0, {r3, r7}
   26418:	cmp	r3, #0
   2641c:	ble	264a4 <__assert_fail@plt+0x151cc>
   26420:	sub	r7, r7, #4
   26424:	mov	r5, #0
   26428:	b	2644c <__assert_fail@plt+0x15174>
   2642c:	ldr	r3, [r4, #8]
   26430:	add	r1, r2, #1
   26434:	str	r1, [r4, #4]
   26438:	str	sl, [r3, r2, lsl #2]
   2643c:	ldr	r3, [r0, #4]
   26440:	add	r5, r5, #1
   26444:	cmp	r5, r3
   26448:	bge	264a0 <__assert_fail@plt+0x151c8>
   2644c:	ldr	r3, [r7, #4]!
   26450:	ldr	ip, [r6, #28]
   26454:	add	r3, r3, r3, lsl #1
   26458:	add	r4, ip, r3, lsl #2
   2645c:	ldr	r1, [ip, r3, lsl #2]
   26460:	ldr	r2, [r4, #4]
   26464:	cmp	r1, r2
   26468:	bne	2642c <__assert_fail@plt+0x15154>
   2646c:	add	r2, r2, #1
   26470:	ldr	r0, [r4, #8]
   26474:	lsl	r1, r2, #1
   26478:	str	r1, [ip, r3, lsl #2]
   2647c:	lsl	r1, r2, #3
   26480:	bl	29510 <__assert_fail@plt+0x18238>
   26484:	subs	r3, r0, #0
   26488:	beq	25fa4 <__assert_fail@plt+0x14ccc>
   2648c:	ldr	lr, [r6, #24]
   26490:	ldr	r2, [r4, #4]
   26494:	add	r0, lr, r8
   26498:	str	r3, [r4, #8]
   2649c:	b	26430 <__assert_fail@plt+0x15158>
   264a0:	ldr	r2, [r6, #8]
   264a4:	add	sl, sl, #1
   264a8:	cmp	sl, r2
   264ac:	add	r8, r8, #12
   264b0:	bcc	26410 <__assert_fail@plt+0x15138>
   264b4:	ldr	r4, [sp, #12]
   264b8:	ldr	r8, [sp, #16]
   264bc:	ldrb	r2, [r4, #88]	; 0x58
   264c0:	ldr	r3, [sp, #20]
   264c4:	clz	r3, r3
   264c8:	lsr	r3, r3, #5
   264cc:	mov	r1, #0
   264d0:	ands	r3, r3, r2, lsr #2
   264d4:	str	r1, [sp, #36]	; 0x24
   264d8:	beq	264e8 <__assert_fail@plt+0x15210>
   264dc:	ldr	r1, [r8, #20]
   264e0:	cmp	r1, #0
   264e4:	beq	268f8 <__assert_fail@plt+0x15620>
   264e8:	ldr	r3, [r4, #52]	; 0x34
   264ec:	ldr	r5, [r4, #24]
   264f0:	ldr	r3, [r3, #12]
   264f4:	ldr	r3, [r3, #28]
   264f8:	str	r3, [r4, #72]	; 0x48
   264fc:	add	r3, r3, r3, lsl #1
   26500:	add	r5, r5, r3, lsl #2
   26504:	ldr	r3, [r5, #4]
   26508:	str	r3, [sp, #52]	; 0x34
   2650c:	ldr	r2, [r5, #4]
   26510:	cmp	r2, #0
   26514:	ble	26784 <__assert_fail@plt+0x154ac>
   26518:	lsl	r0, r3, #2
   2651c:	str	r3, [sp, #48]	; 0x30
   26520:	bl	294e4 <__assert_fail@plt+0x1820c>
   26524:	cmp	r0, #0
   26528:	mov	r6, r0
   2652c:	str	r0, [sp, #56]	; 0x38
   26530:	beq	26828 <__assert_fail@plt+0x15550>
   26534:	ldr	r2, [r5, #4]
   26538:	ldr	r1, [r5, #8]
   2653c:	lsl	r2, r2, #2
   26540:	bl	11068 <memcpy@plt>
   26544:	mov	r0, r6
   26548:	ldr	r3, [r4, #76]	; 0x4c
   2654c:	mov	r7, #0
   26550:	cmp	r3, r7
   26554:	str	r7, [sp, #40]	; 0x28
   26558:	ble	266a8 <__assert_fail@plt+0x153d0>
   2655c:	ldr	r6, [sp, #52]	; 0x34
   26560:	cmp	r6, r7
   26564:	ble	266a8 <__assert_fail@plt+0x153d0>
   26568:	mov	r5, r7
   2656c:	b	26580 <__assert_fail@plt+0x152a8>
   26570:	add	r7, r7, #1
   26574:	cmp	r6, r7
   26578:	ble	266a8 <__assert_fail@plt+0x153d0>
   2657c:	ldr	r0, [sp, #56]	; 0x38
   26580:	ldr	sl, [r0, r7, lsl #2]
   26584:	ldr	lr, [r4]
   26588:	add	r9, lr, sl, lsl #3
   2658c:	ldrb	r3, [r9, #4]
   26590:	cmp	r3, #4
   26594:	bne	26570 <__assert_fail@plt+0x15298>
   26598:	sub	r1, r0, #4
   2659c:	mov	r3, #0
   265a0:	b	265b0 <__assert_fail@plt+0x152d8>
   265a4:	add	r3, r3, #1
   265a8:	cmp	r6, r3
   265ac:	beq	26570 <__assert_fail@plt+0x15298>
   265b0:	ldr	r2, [r1, #4]!
   265b4:	add	ip, lr, r2, lsl #3
   265b8:	ldrb	ip, [ip, #4]
   265bc:	cmp	ip, #9
   265c0:	bne	265a4 <__assert_fail@plt+0x152cc>
   265c4:	ldr	ip, [lr, r2, lsl #3]
   265c8:	ldr	r2, [r9]
   265cc:	cmp	ip, r2
   265d0:	bne	265a4 <__assert_fail@plt+0x152cc>
   265d4:	ldr	r3, [r4, #20]
   265d8:	add	sl, sl, sl, lsl #1
   265dc:	sub	ip, r6, #1
   265e0:	add	sl, r3, sl, lsl #2
   265e4:	mov	r1, r5
   265e8:	ldr	r3, [sl, #8]
   265ec:	ldr	lr, [r3]
   265f0:	cmp	r1, ip
   265f4:	bcs	2664c <__assert_fail@plt+0x15374>
   265f8:	add	r2, r1, ip
   265fc:	lsr	r2, r2, #1
   26600:	ldr	r3, [r0, r2, lsl #2]
   26604:	cmp	lr, r3
   26608:	ble	26644 <__assert_fail@plt+0x1536c>
   2660c:	b	26768 <__assert_fail@plt+0x15490>
   26610:	beq	fead10bc <optarg@@GLIBC_2.4+0xfea94ee4>
   26614:	andeq	sl, r2, r8, asr #26
	...
   26620:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   26624:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   26628:	andeq	pc, r3, r0, lsl #30
   2662c:	add	r3, r2, r1
   26630:	lsr	r3, r3, #1
   26634:	ldr	ip, [r0, r3, lsl #2]
   26638:	cmp	lr, ip
   2663c:	bgt	26770 <__assert_fail@plt+0x15498>
   26640:	mov	r2, r3
   26644:	cmp	r2, r1
   26648:	bhi	2662c <__assert_fail@plt+0x15354>
   2664c:	ldr	r3, [r0, r1, lsl #2]
   26650:	cmp	lr, r3
   26654:	beq	26570 <__assert_fail@plt+0x15298>
   26658:	add	lr, lr, lr, lsl #1
   2665c:	ldr	r3, [r4, #24]
   26660:	adds	r7, r3, lr, lsl #2
   26664:	beq	2677c <__assert_fail@plt+0x154a4>
   26668:	ldr	r3, [r7, #4]
   2666c:	cmp	r3, #0
   26670:	beq	2677c <__assert_fail@plt+0x154a4>
   26674:	ldr	r2, [sp, #48]	; 0x30
   26678:	add	r6, r6, r3, lsl #1
   2667c:	cmp	r2, r6
   26680:	blt	26798 <__assert_fail@plt+0x154c0>
   26684:	mov	r1, r7
   26688:	mov	r0, fp
   2668c:	bl	17bc4 <__assert_fail@plt+0x68ec>
   26690:	cmp	r0, #0
   26694:	bne	266ec <__assert_fail@plt+0x15414>
   26698:	ldr	r6, [sp, #52]	; 0x34
   2669c:	mov	r7, #1
   266a0:	cmp	r6, r7
   266a4:	bgt	2657c <__assert_fail@plt+0x152a4>
   266a8:	mov	r3, #0
   266ac:	mov	r2, fp
   266b0:	mov	r1, r4
   266b4:	add	r0, sp, #40	; 0x28
   266b8:	bl	206b0 <__assert_fail@plt+0xf3d8>
   266bc:	cmp	r0, #0
   266c0:	str	r0, [r4, #36]	; 0x24
   266c4:	beq	26820 <__assert_fail@plt+0x15548>
   266c8:	ldrsb	r3, [r0, #52]	; 0x34
   266cc:	cmp	r3, #0
   266d0:	strge	r0, [r4, #48]	; 0x30
   266d4:	strge	r0, [r4, #44]	; 0x2c
   266d8:	strge	r0, [r4, #40]	; 0x28
   266dc:	blt	267bc <__assert_fail@plt+0x154e4>
   266e0:	ldr	r0, [sp, #56]	; 0x38
   266e4:	bl	296b0 <__assert_fail@plt+0x183d8>
   266e8:	mov	r0, #0
   266ec:	ldr	r6, [r8]
   266f0:	str	r0, [sp, #36]	; 0x24
   266f4:	ldr	r0, [r6, #56]	; 0x38
   266f8:	cmp	r0, #0
   266fc:	beq	26710 <__assert_fail@plt+0x15438>
   26700:	ldr	r5, [r0]
   26704:	bl	296b0 <__assert_fail@plt+0x183d8>
   26708:	subs	r0, r5, #0
   2670c:	bne	26700 <__assert_fail@plt+0x15428>
   26710:	mov	r3, #31
   26714:	mov	r5, #0
   26718:	str	r3, [r6, #64]	; 0x40
   2671c:	ldr	r0, [r6, #16]
   26720:	str	r5, [r6, #56]	; 0x38
   26724:	str	r5, [r6, #52]	; 0x34
   26728:	bl	296b0 <__assert_fail@plt+0x183d8>
   2672c:	ldr	r0, [sp, #68]	; 0x44
   26730:	str	r5, [r6, #16]
   26734:	bl	296b0 <__assert_fail@plt+0x183d8>
   26738:	ldr	r0, [sp, #72]	; 0x48
   2673c:	bl	296b0 <__assert_fail@plt+0x183d8>
   26740:	ldrb	r3, [sp, #135]	; 0x87
   26744:	cmp	r3, r5
   26748:	beq	26754 <__assert_fail@plt+0x1547c>
   2674c:	ldr	r0, [sp, #64]	; 0x40
   26750:	bl	296b0 <__assert_fail@plt+0x183d8>
   26754:	ldr	r0, [sp, #36]	; 0x24
   26758:	cmp	r0, #0
   2675c:	bne	258b8 <__assert_fail@plt+0x145e0>
   26760:	add	sp, sp, #148	; 0x94
   26764:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26768:	mov	r3, r2
   2676c:	mov	r2, ip
   26770:	add	r1, r3, #1
   26774:	mov	ip, r2
   26778:	b	265f0 <__assert_fail@plt+0x15318>
   2677c:	mov	r7, #1
   26780:	b	26574 <__assert_fail@plt+0x1529c>
   26784:	mov	r0, #0
   26788:	str	r0, [sp, #48]	; 0x30
   2678c:	str	r0, [fp, #4]
   26790:	str	r0, [fp, #8]
   26794:	b	26548 <__assert_fail@plt+0x15270>
   26798:	add	r3, r3, r2
   2679c:	lsl	r1, r3, #3
   267a0:	lsl	r6, r3, #1
   267a4:	bl	29510 <__assert_fail@plt+0x18238>
   267a8:	cmp	r0, #0
   267ac:	beq	26828 <__assert_fail@plt+0x15550>
   267b0:	str	r0, [sp, #56]	; 0x38
   267b4:	str	r6, [sp, #48]	; 0x30
   267b8:	b	26684 <__assert_fail@plt+0x153ac>
   267bc:	mov	r3, #1
   267c0:	mov	r2, fp
   267c4:	mov	r1, r4
   267c8:	add	r0, sp, #40	; 0x28
   267cc:	bl	206b0 <__assert_fail@plt+0xf3d8>
   267d0:	mov	r3, #2
   267d4:	mov	r2, fp
   267d8:	mov	r1, r4
   267dc:	str	r0, [r4, #40]	; 0x28
   267e0:	add	r0, sp, #40	; 0x28
   267e4:	bl	206b0 <__assert_fail@plt+0xf3d8>
   267e8:	mov	r3, #6
   267ec:	mov	r2, fp
   267f0:	mov	r1, r4
   267f4:	str	r0, [r4, #44]	; 0x2c
   267f8:	add	r0, sp, #40	; 0x28
   267fc:	bl	206b0 <__assert_fail@plt+0xf3d8>
   26800:	ldr	r3, [r4, #40]	; 0x28
   26804:	cmp	r3, #0
   26808:	str	r0, [r4, #48]	; 0x30
   2680c:	beq	26820 <__assert_fail@plt+0x15548>
   26810:	ldr	r3, [r4, #44]	; 0x2c
   26814:	cmp	r0, #0
   26818:	cmpne	r3, #0
   2681c:	bne	266e0 <__assert_fail@plt+0x15408>
   26820:	ldr	r0, [sp, #40]	; 0x28
   26824:	b	266ec <__assert_fail@plt+0x15414>
   26828:	mov	r0, #12
   2682c:	b	266ec <__assert_fail@plt+0x15414>
   26830:	cmp	ip, #0
   26834:	mov	r1, ip
   26838:	beq	26040 <__assert_fail@plt+0x14d68>
   2683c:	b	26024 <__assert_fail@plt+0x14d4c>
   26840:	ldrb	r3, [r6, #88]	; 0x58
   26844:	tst	r3, #1
   26848:	bne	26390 <__assert_fail@plt+0x150b8>
   2684c:	b	26384 <__assert_fail@plt+0x150ac>
   26850:	bl	296b0 <__assert_fail@plt+0x183d8>
   26854:	mov	r3, #0
   26858:	ldr	r5, [r6, #52]	; 0x34
   2685c:	str	r3, [r6, #132]	; 0x84
   26860:	b	25c88 <__assert_fail@plt+0x149b0>
   26864:	mov	r3, r2
   26868:	b	25c90 <__assert_fail@plt+0x149b8>
   2686c:	str	sl, [sp, #88]	; 0x58
   26870:	str	sl, [sp, #92]	; 0x5c
   26874:	b	259d4 <__assert_fail@plt+0x146fc>
   26878:	ldr	r3, [sp, #108]	; 0x6c
   2687c:	ldr	r5, [sp, #88]	; 0x58
   26880:	cmp	sl, r3
   26884:	movge	sl, r3
   26888:	cmp	sl, r5
   2688c:	ble	268d0 <__assert_fail@plt+0x155f8>
   26890:	bl	1117c <__ctype_toupper_loc@plt>
   26894:	b	2689c <__assert_fail@plt+0x155c4>
   26898:	ldr	r6, [sp, #64]	; 0x40
   2689c:	ldr	r3, [sp, #60]	; 0x3c
   268a0:	ldr	r1, [sp, #84]	; 0x54
   268a4:	add	r3, r3, r5
   268a8:	ldr	r2, [sp, #124]	; 0x7c
   268ac:	ldrb	r3, [r3, r1]
   268b0:	cmp	r2, #0
   268b4:	ldrbne	r3, [r2, r3]
   268b8:	ldr	r2, [r0]
   268bc:	ldr	r3, [r2, r3, lsl #2]
   268c0:	strb	r3, [r6, r5]
   268c4:	add	r5, r5, #1
   268c8:	cmp	sl, r5
   268cc:	bne	26898 <__assert_fail@plt+0x155c0>
   268d0:	str	r5, [sp, #88]	; 0x58
   268d4:	str	r5, [sp, #92]	; 0x5c
   268d8:	b	259d4 <__assert_fail@plt+0x146fc>
   268dc:	mov	r0, #12
   268e0:	b	258e4 <__assert_fail@plt+0x1460c>
   268e4:	ldr	r4, [sp, #16]
   268e8:	str	r0, [r5, #4]
   268ec:	str	r0, [r5]
   268f0:	mov	r0, #12
   268f4:	b	25850 <__assert_fail@plt+0x14578>
   268f8:	ldr	r5, [r4, #8]
   268fc:	cmp	r5, #0
   26900:	beq	26a34 <__assert_fail@plt+0x1575c>
   26904:	ldr	r0, [r4]
   26908:	mov	r2, r1
   2690c:	mov	r6, r0
   26910:	mov	r1, r0
   26914:	mov	lr, r9
   26918:	ldrb	ip, [r6, #4]
   2691c:	sub	ip, ip, #1
   26920:	cmp	ip, #11
   26924:	ldrls	pc, [pc, ip, lsl #2]
   26928:	b	269d0 <__assert_fail@plt+0x156f8>
   2692c:	andeq	r6, r2, r0, asr #19
   26930:	andeq	r6, r2, r0, ror #18
   26934:	ldrdeq	r6, [r2], -r4
   26938:	andeq	r6, r2, r0, ror #18
   2693c:	andeq	r6, r2, ip, asr r9
   26940:	andeq	r6, r2, r8, ror #9
   26944:	ldrdeq	r6, [r2], -r0
   26948:	andeq	r6, r2, r0, ror #18
   2694c:	andeq	r6, r2, r0, ror #18
   26950:	andeq	r6, r2, r0, ror #18
   26954:	andeq	r6, r2, r0, ror #18
   26958:	andeq	r6, r2, ip, lsl #20
   2695c:	mov	lr, r3
   26960:	add	r2, r2, #1
   26964:	cmp	r2, r5
   26968:	add	r6, r6, #8
   2696c:	bne	26918 <__assert_fail@plt+0x15640>
   26970:	orr	r9, r9, lr
   26974:	ands	r9, r9, #255	; 0xff
   26978:	beq	26a34 <__assert_fail@plt+0x1575c>
   2697c:	add	r2, r0, r2, lsl #3
   26980:	mov	r0, #7
   26984:	b	2699c <__assert_fail@plt+0x156c4>
   26988:	cmp	r3, #5
   2698c:	strbeq	r0, [r1, #4]
   26990:	add	r1, r1, #8
   26994:	cmp	r1, r2
   26998:	beq	26a30 <__assert_fail@plt+0x15758>
   2699c:	ldrb	r3, [r1, #4]
   269a0:	cmp	r3, #1
   269a4:	bne	26988 <__assert_fail@plt+0x156b0>
   269a8:	ldrsb	r3, [r1]
   269ac:	cmp	r3, #0
   269b0:	ldrblt	r3, [r1, #6]
   269b4:	biclt	r3, r3, #32
   269b8:	strblt	r3, [r1, #6]
   269bc:	b	26990 <__assert_fail@plt+0x156b8>
   269c0:	ldrb	ip, [r0, r2, lsl #3]
   269c4:	lsrs	ip, ip, #7
   269c8:	movne	r9, r3
   269cc:	b	26960 <__assert_fail@plt+0x15688>
   269d0:	bl	112cc <abort@plt>
   269d4:	ldr	ip, [r0, r2, lsl #3]
   269d8:	ldr	r7, [ip, #16]
   269dc:	cmp	r7, #0
   269e0:	bne	264e8 <__assert_fail@plt+0x15210>
   269e4:	ldr	r7, [ip, #20]
   269e8:	cmp	r7, #0
   269ec:	bne	264e8 <__assert_fail@plt+0x15210>
   269f0:	ldr	r7, [ip, #24]
   269f4:	cmp	r7, #0
   269f8:	bne	264e8 <__assert_fail@plt+0x15210>
   269fc:	ldr	ip, [ip, #28]
   26a00:	cmp	ip, #0
   26a04:	beq	26960 <__assert_fail@plt+0x15688>
   26a08:	b	264e8 <__assert_fail@plt+0x15210>
   26a0c:	ldr	ip, [r0, r2, lsl #3]
   26a10:	cmp	ip, #32
   26a14:	beq	26960 <__assert_fail@plt+0x15688>
   26a18:	bls	26a64 <__assert_fail@plt+0x1578c>
   26a1c:	cmp	ip, #64	; 0x40
   26a20:	beq	26960 <__assert_fail@plt+0x15688>
   26a24:	cmp	ip, #128	; 0x80
   26a28:	beq	26960 <__assert_fail@plt+0x15688>
   26a2c:	b	264e8 <__assert_fail@plt+0x15210>
   26a30:	mov	r9, lr
   26a34:	ldr	r2, [r4, #76]	; 0x4c
   26a38:	ldrb	r3, [r4, #88]	; 0x58
   26a3c:	cmp	r2, #0
   26a40:	movle	r2, r9
   26a44:	orrgt	r2, r9, #1
   26a48:	and	r2, r2, #1
   26a4c:	and	r3, r3, #249	; 0xf9
   26a50:	orr	r3, r3, r2, lsl #1
   26a54:	mov	r2, #1
   26a58:	strb	r3, [r4, #88]	; 0x58
   26a5c:	str	r2, [r4, #92]	; 0x5c
   26a60:	b	264e8 <__assert_fail@plt+0x15210>
   26a64:	cmp	ip, #16
   26a68:	beq	26960 <__assert_fail@plt+0x15688>
   26a6c:	b	264e8 <__assert_fail@plt+0x15210>
   26a70:	ldr	r3, [pc, #96]	; 26ad8 <__assert_fail@plt+0x15800>
   26a74:	push	{r4, lr}
   26a78:	mov	lr, r2
   26a7c:	ldr	r3, [r3]
   26a80:	ldrb	ip, [lr, #28]
   26a84:	mov	r2, r1
   26a88:	mov	r1, r0
   26a8c:	lsr	r0, r3, #21
   26a90:	and	r4, r0, #16
   26a94:	and	r0, ip, #239	; 0xef
   26a98:	orr	r0, r0, r4
   26a9c:	orr	r0, r0, #128	; 0x80
   26aa0:	strb	r0, [lr, #28]
   26aa4:	mov	r0, lr
   26aa8:	bl	255b8 <__assert_fail@plt+0x142e0>
   26aac:	subs	r3, r0, #0
   26ab0:	popeq	{r4, pc}
   26ab4:	ldr	r1, [pc, #32]	; 26adc <__assert_fail@plt+0x15804>
   26ab8:	mov	r2, #5
   26abc:	add	r3, r1, r3, lsl #2
   26ac0:	add	r1, r1, #32
   26ac4:	ldr	r3, [r3, #416]	; 0x1a0
   26ac8:	mov	r0, #0
   26acc:	add	r1, r1, r3
   26ad0:	pop	{r4, lr}
   26ad4:	b	110c8 <dcgettext@plt>
   26ad8:	andeq	ip, r3, r8, asr #13
   26adc:	andeq	sl, r2, r8, asr #26
   26ae0:	ldr	r3, [pc, #12]	; 26af4 <__assert_fail@plt+0x1581c>
   26ae4:	ldr	r2, [r3]
   26ae8:	str	r0, [r3]
   26aec:	mov	r0, r2
   26af0:	bx	lr
   26af4:	andeq	ip, r3, r8, asr #13
   26af8:	push	{r4, r5, r6, lr}
   26afc:	mov	r2, #256	; 0x100
   26b00:	ldr	r5, [r0]
   26b04:	ldr	r6, [r0, #16]
   26b08:	mov	r4, r0
   26b0c:	mov	r1, #0
   26b10:	mov	r0, r6
   26b14:	bl	111f4 <memset@plt>
   26b18:	ldr	r1, [r5, #36]	; 0x24
   26b1c:	mov	r3, r6
   26b20:	add	r2, r1, #12
   26b24:	mov	r0, r4
   26b28:	add	r1, r1, #8
   26b2c:	bl	193b4 <__assert_fail@plt+0x80dc>
   26b30:	ldr	r0, [r5, #40]	; 0x28
   26b34:	ldr	r3, [r5, #36]	; 0x24
   26b38:	cmp	r3, r0
   26b3c:	beq	26b58 <__assert_fail@plt+0x15880>
   26b40:	add	r2, r0, #12
   26b44:	add	r1, r0, #8
   26b48:	mov	r3, r6
   26b4c:	mov	r0, r4
   26b50:	bl	193b4 <__assert_fail@plt+0x80dc>
   26b54:	ldr	r0, [r5, #36]	; 0x24
   26b58:	ldr	r1, [r5, #44]	; 0x2c
   26b5c:	cmp	r1, r0
   26b60:	beq	26b7c <__assert_fail@plt+0x158a4>
   26b64:	add	r2, r1, #12
   26b68:	mov	r0, r4
   26b6c:	mov	r3, r6
   26b70:	add	r1, r1, #8
   26b74:	bl	193b4 <__assert_fail@plt+0x80dc>
   26b78:	ldr	r0, [r5, #36]	; 0x24
   26b7c:	ldr	r1, [r5, #48]	; 0x30
   26b80:	cmp	r1, r0
   26b84:	beq	26b9c <__assert_fail@plt+0x158c4>
   26b88:	add	r2, r1, #12
   26b8c:	mov	r3, r6
   26b90:	add	r1, r1, #8
   26b94:	mov	r0, r4
   26b98:	bl	193b4 <__assert_fail@plt+0x80dc>
   26b9c:	ldrb	r3, [r4, #28]
   26ba0:	mov	r0, #0
   26ba4:	orr	r3, r3, #8
   26ba8:	strb	r3, [r4, #28]
   26bac:	pop	{r4, r5, r6, pc}
   26bb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26bb4:	cmp	r3, r2
   26bb8:	mov	r5, r3
   26bbc:	sub	sp, sp, #52	; 0x34
   26bc0:	movle	r3, #0
   26bc4:	movgt	r3, #1
   26bc8:	orrs	r3, r3, r5, lsr #31
   26bcc:	ldrb	r3, [sp, #100]	; 0x64
   26bd0:	ldr	ip, [sp, #88]	; 0x58
   26bd4:	ldr	sl, [r0]
   26bd8:	add	r8, r5, ip
   26bdc:	ldr	r7, [sp, #96]	; 0x60
   26be0:	str	r3, [sp, #32]
   26be4:	bne	26e90 <__assert_fail@plt+0x15bb8>
   26be8:	cmp	r8, r2
   26bec:	bgt	26e88 <__assert_fail@plt+0x15bb0>
   26bf0:	cmp	ip, #0
   26bf4:	cmpge	r5, r8
   26bf8:	movgt	lr, #1
   26bfc:	movle	lr, #0
   26c00:	bgt	26e88 <__assert_fail@plt+0x15bb0>
   26c04:	cmp	r8, #0
   26c08:	blt	26f24 <__assert_fail@plt+0x15c4c>
   26c0c:	cmp	r5, r8
   26c10:	movgt	lr, #0
   26c14:	movle	lr, #1
   26c18:	ands	r3, lr, ip, lsr #31
   26c1c:	movne	r8, #0
   26c20:	ldr	lr, [pc, #812]	; 26f54 <__assert_fail@plt+0x15c7c>
   26c24:	ldr	r4, [pc, #812]	; 26f58 <__assert_fail@plt+0x15c80>
   26c28:	cmp	lr, #0
   26c2c:	mov	ip, #1
   26c30:	moveq	ip, lr
   26c34:	cmp	r4, #0
   26c38:	mov	lr, #1
   26c3c:	moveq	lr, r4
   26c40:	str	r2, [sp, #40]	; 0x28
   26c44:	orr	r2, ip, lr
   26c48:	ands	r3, r2, #255	; 0xff
   26c4c:	str	r1, [sp, #44]	; 0x2c
   26c50:	mov	r6, r0
   26c54:	str	r3, [sp, #28]
   26c58:	beq	26c64 <__assert_fail@plt+0x1598c>
   26c5c:	add	r0, sl, #136	; 0x88
   26c60:	bl	11050 <pthread_mutex_lock@plt>
   26c64:	ldrb	r2, [r6, #28]
   26c68:	cmp	r8, r5
   26c6c:	lsr	fp, r2, #5
   26c70:	and	r3, fp, #3
   26c74:	str	r3, [sp, #36]	; 0x24
   26c78:	bgt	26d2c <__assert_fail@plt+0x15a54>
   26c7c:	lsr	r1, r2, #4
   26c80:	and	r1, r1, #1
   26c84:	cmp	r7, #0
   26c88:	orreq	r1, r1, #1
   26c8c:	cmp	r1, #0
   26c90:	bne	26f2c <__assert_fail@plt+0x15c54>
   26c94:	and	r2, r2, #6
   26c98:	cmp	r2, #4
   26c9c:	ldrne	r0, [r6, #24]
   26ca0:	beq	26ef4 <__assert_fail@plt+0x15c1c>
   26ca4:	add	fp, r0, #1
   26ca8:	mov	r4, fp
   26cac:	lsl	r0, fp, #3
   26cb0:	bl	294e4 <__assert_fail@plt+0x1820c>
   26cb4:	subs	r9, r0, #0
   26cb8:	beq	26ea0 <__assert_fail@plt+0x15bc8>
   26cbc:	ldr	r3, [sp, #36]	; 0x24
   26cc0:	str	r9, [sp, #12]
   26cc4:	str	r3, [sp, #16]
   26cc8:	ldr	r3, [sp, #92]	; 0x5c
   26ccc:	str	fp, [sp, #8]
   26cd0:	str	r3, [sp, #4]
   26cd4:	str	r8, [sp]
   26cd8:	ldr	r2, [sp, #40]	; 0x28
   26cdc:	ldr	r1, [sp, #44]	; 0x2c
   26ce0:	mov	r3, r5
   26ce4:	mov	r0, r6
   26ce8:	bl	22f50 <__assert_fail@plt+0x11c78>
   26cec:	cmp	r0, #0
   26cf0:	beq	26d50 <__assert_fail@plt+0x15a78>
   26cf4:	cmp	r0, #1
   26cf8:	mvneq	r5, #0
   26cfc:	beq	26d04 <__assert_fail@plt+0x15a2c>
   26d00:	mvn	r5, #1
   26d04:	mov	r0, r9
   26d08:	bl	296b0 <__assert_fail@plt+0x183d8>
   26d0c:	ldr	r3, [sp, #28]
   26d10:	cmp	r3, #0
   26d14:	beq	26d20 <__assert_fail@plt+0x15a48>
   26d18:	add	r0, sl, #136	; 0x88
   26d1c:	bl	10fb4 <pthread_mutex_unlock@plt>
   26d20:	mov	r0, r5
   26d24:	add	sp, sp, #52	; 0x34
   26d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26d2c:	ldr	r1, [r6, #16]
   26d30:	cmp	r1, #0
   26d34:	beq	26c7c <__assert_fail@plt+0x159a4>
   26d38:	tst	r2, #8
   26d3c:	bne	26c7c <__assert_fail@plt+0x159a4>
   26d40:	mov	r0, r6
   26d44:	bl	26af8 <__assert_fail@plt+0x15820>
   26d48:	ldrb	r2, [r6, #28]
   26d4c:	b	26c7c <__assert_fail@plt+0x159a4>
   26d50:	cmp	r7, #0
   26d54:	beq	26e00 <__assert_fail@plt+0x15b28>
   26d58:	ldrb	r8, [r6, #28]
   26d5c:	add	fp, r4, #1
   26d60:	lsr	r8, r8, #1
   26d64:	ands	r8, r8, #3
   26d68:	beq	26ea8 <__assert_fail@plt+0x15bd0>
   26d6c:	cmp	r8, #1
   26d70:	ldr	r2, [r7]
   26d74:	movne	r8, #2
   26d78:	beq	26e1c <__assert_fail@plt+0x15b44>
   26d7c:	cmp	r4, #0
   26d80:	ble	26f40 <__assert_fail@plt+0x15c68>
   26d84:	ldmib	r7, {r1, r2}
   26d88:	mov	r3, r9
   26d8c:	add	ip, r9, r4, lsl #3
   26d90:	sub	r1, r1, #4
   26d94:	sub	r2, r2, #4
   26d98:	ldr	r0, [r3]
   26d9c:	add	r3, r3, #8
   26da0:	str	r0, [r1, #4]!
   26da4:	ldr	r0, [r3, #-4]
   26da8:	cmp	ip, r3
   26dac:	str	r0, [r2, #4]!
   26db0:	bne	26d98 <__assert_fail@plt+0x15ac0>
   26db4:	ldr	r2, [r7]
   26db8:	mov	r3, r4
   26dbc:	cmp	r3, r2
   26dc0:	bcs	26de8 <__assert_fail@plt+0x15b10>
   26dc4:	ldmib	r7, {r0, r1}
   26dc8:	mvn	r2, #0
   26dcc:	str	r2, [r1, r3, lsl #2]
   26dd0:	str	r2, [r0, r3, lsl #2]
   26dd4:	ldr	r3, [r7]
   26dd8:	add	r4, r4, #1
   26ddc:	cmp	r4, r3
   26de0:	mov	r3, r4
   26de4:	bcc	26dcc <__assert_fail@plt+0x15af4>
   26de8:	ldrb	r3, [r6, #28]
   26dec:	bic	r3, r3, #6
   26df0:	orr	r8, r3, r8, lsl #1
   26df4:	tst	r8, #6
   26df8:	strb	r8, [r6, #28]
   26dfc:	beq	26d00 <__assert_fail@plt+0x15a28>
   26e00:	ldr	r3, [sp, #32]
   26e04:	cmp	r3, #0
   26e08:	ldrne	r3, [r9, #4]
   26e0c:	subne	r5, r3, r5
   26e10:	bne	26d04 <__assert_fail@plt+0x15a2c>
   26e14:	ldr	r5, [r9]
   26e18:	b	26d04 <__assert_fail@plt+0x15a2c>
   26e1c:	cmp	r2, fp
   26e20:	bcs	26d7c <__assert_fail@plt+0x15aa4>
   26e24:	lsl	r2, fp, #2
   26e28:	mov	r1, r2
   26e2c:	ldr	r0, [r7, #4]
   26e30:	str	r2, [sp, #40]	; 0x28
   26e34:	bl	29510 <__assert_fail@plt+0x18238>
   26e38:	subs	r3, r0, #0
   26e3c:	str	r3, [sp, #36]	; 0x24
   26e40:	beq	26f4c <__assert_fail@plt+0x15c74>
   26e44:	ldr	r2, [sp, #40]	; 0x28
   26e48:	ldr	r0, [r7, #8]
   26e4c:	mov	r1, r2
   26e50:	bl	29510 <__assert_fail@plt+0x18238>
   26e54:	ldr	r3, [sp, #36]	; 0x24
   26e58:	subs	r2, r0, #0
   26e5c:	strne	r2, [r7, #8]
   26e60:	strne	r3, [r7, #4]
   26e64:	strne	fp, [r7]
   26e68:	movne	r2, fp
   26e6c:	bne	26d7c <__assert_fail@plt+0x15aa4>
   26e70:	mov	r0, r3
   26e74:	str	r2, [sp, #36]	; 0x24
   26e78:	bl	296b0 <__assert_fail@plt+0x183d8>
   26e7c:	ldr	r2, [sp, #36]	; 0x24
   26e80:	mov	r8, r2
   26e84:	b	26de8 <__assert_fail@plt+0x15b10>
   26e88:	mov	r8, r2
   26e8c:	b	26c20 <__assert_fail@plt+0x15948>
   26e90:	mvn	r5, #0
   26e94:	mov	r0, r5
   26e98:	add	sp, sp, #52	; 0x34
   26e9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26ea0:	mvn	r5, #1
   26ea4:	b	26d0c <__assert_fail@plt+0x15a34>
   26ea8:	lsl	r8, fp, #2
   26eac:	mov	r0, r8
   26eb0:	bl	294e4 <__assert_fail@plt+0x1820c>
   26eb4:	cmp	r0, #0
   26eb8:	str	r0, [r7, #4]
   26ebc:	beq	26f4c <__assert_fail@plt+0x15c74>
   26ec0:	mov	r0, r8
   26ec4:	str	fp, [sp, #36]	; 0x24
   26ec8:	bl	294e4 <__assert_fail@plt+0x1820c>
   26ecc:	ldr	r2, [sp, #36]	; 0x24
   26ed0:	cmp	r0, #0
   26ed4:	mov	r8, r0
   26ed8:	str	r0, [r7, #8]
   26edc:	strne	r2, [r7]
   26ee0:	movne	r8, #1
   26ee4:	bne	26d7c <__assert_fail@plt+0x15aa4>
   26ee8:	ldr	r0, [r7, #4]
   26eec:	bl	296b0 <__assert_fail@plt+0x183d8>
   26ef0:	b	26de8 <__assert_fail@plt+0x15b10>
   26ef4:	ldr	fp, [r7]
   26ef8:	ldr	r0, [r6, #24]
   26efc:	cmp	fp, r0
   26f00:	bhi	26ca4 <__assert_fail@plt+0x159cc>
   26f04:	cmp	fp, #0
   26f08:	mov	r4, fp
   26f0c:	bgt	26cac <__assert_fail@plt+0x159d4>
   26f10:	mov	fp, #1
   26f14:	mov	r7, r1
   26f18:	mov	r4, fp
   26f1c:	mov	r0, #8
   26f20:	b	26cb0 <__assert_fail@plt+0x159d8>
   26f24:	mov	r8, lr
   26f28:	b	26c20 <__assert_fail@plt+0x15948>
   26f2c:	mov	fp, #1
   26f30:	mov	r4, fp
   26f34:	mov	r0, #8
   26f38:	mov	r7, #0
   26f3c:	b	26cb0 <__assert_fail@plt+0x159d8>
   26f40:	mov	r4, #0
   26f44:	mov	r3, r4
   26f48:	b	26dbc <__assert_fail@plt+0x15ae4>
   26f4c:	mov	r8, #0
   26f50:	b	26de8 <__assert_fail@plt+0x15b10>
	...
   26f5c:	push	{r4, r5, r6, r7, r8, lr}
   26f60:	mov	r5, r2
   26f64:	and	r2, r2, #1
   26f68:	cmp	r2, #0
   26f6c:	ldr	ip, [pc, #404]	; 27108 <__assert_fail@plt+0x15e30>
   26f70:	mov	r2, #0
   26f74:	ldr	r3, [pc, #400]	; 2710c <__assert_fail@plt+0x15e34>
   26f78:	mov	r4, r0
   26f7c:	str	r2, [r0]
   26f80:	str	r2, [r0, #4]
   26f84:	str	r2, [r0, #8]
   26f88:	sub	sp, sp, #8
   26f8c:	mov	r0, #256	; 0x100
   26f90:	ldr	r8, [pc, #376]	; 27110 <__assert_fail@plt+0x15e38>
   26f94:	ldr	r6, [pc, #376]	; 27114 <__assert_fail@plt+0x15e3c>
   26f98:	moveq	r8, ip
   26f9c:	movne	r6, r3
   26fa0:	mov	r7, r1
   26fa4:	bl	294e4 <__assert_fail@plt+0x1820c>
   26fa8:	cmp	r0, #0
   26fac:	str	r0, [r4, #16]
   26fb0:	beq	270fc <__assert_fail@plt+0x15e24>
   26fb4:	tst	r5, #2
   26fb8:	movne	r6, r8
   26fbc:	ands	r2, r5, #4
   26fc0:	moveq	r3, r2
   26fc4:	ldrb	r2, [r4, #28]
   26fc8:	movne	r3, #1
   26fcc:	lsl	r5, r5, #1
   26fd0:	bic	r2, r2, #128	; 0x80
   26fd4:	orr	r2, r2, r3, lsl #7
   26fd8:	bic	r2, r2, #16
   26fdc:	and	r5, r5, #16
   26fe0:	orr	r5, r5, r2
   26fe4:	mov	r3, #0
   26fe8:	bicne	r6, r6, #64	; 0x40
   26fec:	str	r3, [r4, #20]
   26ff0:	strb	r5, [r4, #28]
   26ff4:	mov	r0, r7
   26ff8:	orrne	r6, r6, #256	; 0x100
   26ffc:	bl	111b8 <strlen@plt>
   27000:	mov	r1, r7
   27004:	mov	r3, r6
   27008:	mov	r2, r0
   2700c:	mov	r0, r4
   27010:	bl	255b8 <__assert_fail@plt+0x142e0>
   27014:	cmp	r0, #16
   27018:	mov	r1, r0
   2701c:	beq	270d8 <__assert_fail@plt+0x15e00>
   27020:	cmp	r0, #0
   27024:	bne	270dc <__assert_fail@plt+0x15e04>
   27028:	ldr	r5, [r4]
   2702c:	ldr	r6, [r4, #16]
   27030:	mov	r2, #256	; 0x100
   27034:	mov	r0, r6
   27038:	bl	111f4 <memset@plt>
   2703c:	ldr	r1, [r5, #36]	; 0x24
   27040:	mov	r3, r6
   27044:	add	r2, r1, #12
   27048:	mov	r0, r4
   2704c:	add	r1, r1, #8
   27050:	bl	193b4 <__assert_fail@plt+0x80dc>
   27054:	ldr	r1, [r5, #40]	; 0x28
   27058:	ldr	r3, [r5, #36]	; 0x24
   2705c:	cmp	r3, r1
   27060:	beq	2707c <__assert_fail@plt+0x15da4>
   27064:	add	r2, r1, #12
   27068:	mov	r3, r6
   2706c:	add	r1, r1, #8
   27070:	mov	r0, r4
   27074:	bl	193b4 <__assert_fail@plt+0x80dc>
   27078:	ldr	r1, [r5, #36]	; 0x24
   2707c:	ldr	r0, [r5, #44]	; 0x2c
   27080:	cmp	r1, r0
   27084:	beq	270a0 <__assert_fail@plt+0x15dc8>
   27088:	add	r2, r0, #12
   2708c:	add	r1, r0, #8
   27090:	mov	r3, r6
   27094:	mov	r0, r4
   27098:	bl	193b4 <__assert_fail@plt+0x80dc>
   2709c:	ldr	r0, [r5, #36]	; 0x24
   270a0:	ldr	r1, [r5, #48]	; 0x30
   270a4:	cmp	r0, r1
   270a8:	beq	270c0 <__assert_fail@plt+0x15de8>
   270ac:	add	r2, r1, #12
   270b0:	mov	r3, r6
   270b4:	add	r1, r1, #8
   270b8:	mov	r0, r4
   270bc:	bl	193b4 <__assert_fail@plt+0x80dc>
   270c0:	ldrb	r3, [r4, #28]
   270c4:	mov	r0, #0
   270c8:	orr	r3, r3, #8
   270cc:	strb	r3, [r4, #28]
   270d0:	add	sp, sp, #8
   270d4:	pop	{r4, r5, r6, r7, r8, pc}
   270d8:	mov	r1, #8
   270dc:	ldr	r0, [r4, #16]
   270e0:	str	r1, [sp, #4]
   270e4:	bl	296b0 <__assert_fail@plt+0x183d8>
   270e8:	ldr	r1, [sp, #4]
   270ec:	mov	r3, #0
   270f0:	mov	r0, r1
   270f4:	str	r3, [r4, #16]
   270f8:	b	270d0 <__assert_fail@plt+0x15df8>
   270fc:	mov	r0, #12
   27100:	add	sp, sp, #8
   27104:	pop	{r4, r5, r6, r7, r8, pc}
   27108:	smlalbteq	r0, r1, r6, r2
   2710c:	strdeq	fp, [r3], -ip
   27110:	strdeq	fp, [r3], #-44	; 0xffffffd4
   27114:	smlabteq	r1, r6, r2, r0
   27118:	cmp	r0, #16
   2711c:	push	{r4, r5, r6, r7, r8, lr}
   27120:	bhi	27188 <__assert_fail@plt+0x15eb0>
   27124:	ldr	r1, [pc, #96]	; 2718c <__assert_fail@plt+0x15eb4>
   27128:	mov	r4, r3
   2712c:	add	r0, r1, r0, lsl #2
   27130:	add	r1, r1, #32
   27134:	ldr	r3, [r0, #416]	; 0x1a0
   27138:	mov	r6, r2
   2713c:	add	r1, r1, r3
   27140:	mov	r2, #5
   27144:	mov	r0, #0
   27148:	bl	110c8 <dcgettext@plt>
   2714c:	mov	r7, r0
   27150:	bl	111b8 <strlen@plt>
   27154:	cmp	r4, #0
   27158:	add	r5, r0, #1
   2715c:	beq	27180 <__assert_fail@plt+0x15ea8>
   27160:	cmp	r5, r4
   27164:	subhi	r2, r4, #1
   27168:	movhi	r3, #0
   2716c:	strbhi	r3, [r6, r2]
   27170:	movls	r2, r5
   27174:	mov	r1, r7
   27178:	mov	r0, r6
   2717c:	bl	11068 <memcpy@plt>
   27180:	mov	r0, r5
   27184:	pop	{r4, r5, r6, r7, r8, pc}
   27188:	bl	112cc <abort@plt>
   2718c:	andeq	sl, r2, r8, asr #26
   27190:	push	{r4, r5, r6, lr}
   27194:	mov	r4, r0
   27198:	ldr	r5, [r0]
   2719c:	cmp	r5, #0
   271a0:	beq	271e0 <__assert_fail@plt+0x15f08>
   271a4:	ldr	r2, [pc, #92]	; 27208 <__assert_fail@plt+0x15f30>
   271a8:	ldr	r1, [pc, #92]	; 2720c <__assert_fail@plt+0x15f34>
   271ac:	cmp	r2, #0
   271b0:	mov	r3, #1
   271b4:	moveq	r3, r2
   271b8:	cmp	r1, #0
   271bc:	mov	r2, #1
   271c0:	moveq	r2, r1
   271c4:	orr	r3, r3, r2
   271c8:	tst	r3, #1
   271cc:	beq	271d8 <__assert_fail@plt+0x15f00>
   271d0:	add	r0, r5, #136	; 0x88
   271d4:	bl	11020 <pthread_mutex_destroy@plt>
   271d8:	mov	r0, r5
   271dc:	bl	1a5c8 <__assert_fail@plt+0x92f0>
   271e0:	mov	r5, #0
   271e4:	ldr	r0, [r4, #16]
   271e8:	str	r5, [r4]
   271ec:	str	r5, [r4, #4]
   271f0:	bl	296b0 <__assert_fail@plt+0x183d8>
   271f4:	str	r5, [r4, #16]
   271f8:	ldr	r0, [r4, #20]
   271fc:	bl	296b0 <__assert_fail@plt+0x183d8>
   27200:	str	r5, [r4, #20]
   27204:	pop	{r4, r5, r6, pc}
	...
   27210:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27214:	sub	sp, sp, #36	; 0x24
   27218:	ldr	r4, [sp, #72]	; 0x48
   2721c:	bics	ip, r4, #7
   27220:	movne	r0, #2
   27224:	beq	27230 <__assert_fail@plt+0x15f58>
   27228:	add	sp, sp, #36	; 0x24
   2722c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27230:	ands	fp, r4, #4
   27234:	mov	r8, r3
   27238:	str	r2, [sp, #28]
   2723c:	mov	r7, r1
   27240:	mov	r5, r0
   27244:	bne	272e8 <__assert_fail@plt+0x16010>
   27248:	mov	r0, r1
   2724c:	bl	111b8 <strlen@plt>
   27250:	mov	r9, r0
   27254:	ldr	r3, [pc, #204]	; 27328 <__assert_fail@plt+0x16050>
   27258:	ldr	r1, [pc, #204]	; 2732c <__assert_fail@plt+0x16054>
   2725c:	cmp	r3, #0
   27260:	mov	r6, #1
   27264:	moveq	r6, r3
   27268:	cmp	r1, #0
   2726c:	mov	r3, #1
   27270:	moveq	r3, r1
   27274:	orr	r6, r6, r3
   27278:	ands	r6, r6, #255	; 0xff
   2727c:	ldr	sl, [r5]
   27280:	beq	2728c <__assert_fail@plt+0x15fb4>
   27284:	add	r0, sl, #136	; 0x88
   27288:	bl	11050 <pthread_mutex_lock@plt>
   2728c:	ldrb	r3, [r5, #28]
   27290:	tst	r3, #16
   27294:	beq	272f4 <__assert_fail@plt+0x1601c>
   27298:	mov	ip, #0
   2729c:	str	r4, [sp, #16]
   272a0:	str	r9, [sp, #4]
   272a4:	str	r9, [sp]
   272a8:	mov	r3, fp
   272ac:	mov	r2, r9
   272b0:	mov	r1, r7
   272b4:	mov	r0, r5
   272b8:	str	ip, [sp, #12]
   272bc:	str	ip, [sp, #8]
   272c0:	bl	22f50 <__assert_fail@plt+0x11c78>
   272c4:	mov	r4, r0
   272c8:	cmp	r6, #0
   272cc:	beq	272d8 <__assert_fail@plt+0x16000>
   272d0:	add	r0, sl, #136	; 0x88
   272d4:	bl	10fb4 <pthread_mutex_unlock@plt>
   272d8:	adds	r0, r4, #0
   272dc:	movne	r0, #1
   272e0:	add	sp, sp, #36	; 0x24
   272e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   272e8:	ldr	fp, [r3]
   272ec:	ldr	r9, [r3, #4]
   272f0:	b	27254 <__assert_fail@plt+0x15f7c>
   272f4:	ldr	r3, [sp, #28]
   272f8:	str	r4, [sp, #16]
   272fc:	str	r3, [sp, #8]
   27300:	str	r8, [sp, #12]
   27304:	str	r9, [sp, #4]
   27308:	str	r9, [sp]
   2730c:	mov	r3, fp
   27310:	mov	r2, r9
   27314:	mov	r1, r7
   27318:	mov	r0, r5
   2731c:	bl	22f50 <__assert_fail@plt+0x11c78>
   27320:	mov	r4, r0
   27324:	b	272c8 <__assert_fail@plt+0x15ff0>
	...
   27330:	push	{r4, lr}
   27334:	sub	sp, sp, #16
   27338:	mov	lr, #1
   2733c:	ldr	r4, [sp, #24]
   27340:	mov	ip, #0
   27344:	str	ip, [sp]
   27348:	stmib	sp, {r2, r4, lr}
   2734c:	bl	26bb0 <__assert_fail@plt+0x158d8>
   27350:	add	sp, sp, #16
   27354:	pop	{r4, pc}
   27358:	push	{r4, lr}
   2735c:	sub	sp, sp, #16
   27360:	mov	ip, #0
   27364:	ldr	r4, [sp, #24]
   27368:	ldr	lr, [sp, #28]
   2736c:	str	r2, [sp, #4]
   27370:	str	r4, [sp]
   27374:	str	lr, [sp, #8]
   27378:	str	ip, [sp, #12]
   2737c:	bl	26bb0 <__assert_fail@plt+0x158d8>
   27380:	add	sp, sp, #16
   27384:	pop	{r4, pc}
   27388:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2738c:	sub	sp, sp, #20
   27390:	mov	r5, r2
   27394:	ldr	r6, [sp, #68]	; 0x44
   27398:	ldr	r4, [sp, #56]	; 0x38
   2739c:	orr	r2, r2, r6
   273a0:	orrs	r2, r2, r4
   273a4:	bmi	273cc <__assert_fail@plt+0x160f4>
   273a8:	cmp	r4, #0
   273ac:	mov	sl, r0
   273b0:	mov	fp, r1
   273b4:	mov	r7, r3
   273b8:	blt	273dc <__assert_fail@plt+0x16104>
   273bc:	mvn	r3, #-2147483648	; 0x80000000
   273c0:	sub	r3, r3, r4
   273c4:	cmp	r5, r3
   273c8:	ble	273dc <__assert_fail@plt+0x16104>
   273cc:	mvn	r4, #1
   273d0:	mov	r0, r4
   273d4:	add	sp, sp, #20
   273d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   273dc:	cmp	r4, #0
   273e0:	add	r9, r5, r4
   273e4:	ble	27470 <__assert_fail@plt+0x16198>
   273e8:	cmp	r5, #0
   273ec:	beq	27468 <__assert_fail@plt+0x16190>
   273f0:	mov	r0, r9
   273f4:	bl	294e4 <__assert_fail@plt+0x1820c>
   273f8:	subs	r8, r0, #0
   273fc:	beq	273cc <__assert_fail@plt+0x160f4>
   27400:	mov	r1, fp
   27404:	mov	r2, r5
   27408:	bl	11068 <memcpy@plt>
   2740c:	mov	r1, r7
   27410:	mov	r2, r4
   27414:	add	r0, r8, r5
   27418:	bl	11068 <memcpy@plt>
   2741c:	mov	r7, r8
   27420:	ldr	r2, [sp, #64]	; 0x40
   27424:	mov	ip, #1
   27428:	mov	r3, #0
   2742c:	str	r2, [sp, #8]
   27430:	mov	r1, r7
   27434:	mov	r2, r9
   27438:	str	ip, [sp, #12]
   2743c:	str	r3, [sp]
   27440:	str	r6, [sp, #4]
   27444:	ldr	r3, [sp, #60]	; 0x3c
   27448:	mov	r0, sl
   2744c:	bl	26bb0 <__assert_fail@plt+0x158d8>
   27450:	mov	r4, r0
   27454:	mov	r0, r8
   27458:	bl	296b0 <__assert_fail@plt+0x183d8>
   2745c:	mov	r0, r4
   27460:	add	sp, sp, #20
   27464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27468:	mov	r8, r5
   2746c:	b	27420 <__assert_fail@plt+0x16148>
   27470:	mov	r7, fp
   27474:	mov	r8, #0
   27478:	b	27420 <__assert_fail@plt+0x16148>
   2747c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27480:	sub	sp, sp, #20
   27484:	mov	r5, r2
   27488:	ldr	r6, [sp, #72]	; 0x48
   2748c:	ldr	r4, [sp, #56]	; 0x38
   27490:	orr	r2, r2, r6
   27494:	orrs	r2, r2, r4
   27498:	bmi	274c0 <__assert_fail@plt+0x161e8>
   2749c:	cmp	r4, #0
   274a0:	mov	sl, r0
   274a4:	mov	fp, r1
   274a8:	mov	r7, r3
   274ac:	blt	274d0 <__assert_fail@plt+0x161f8>
   274b0:	mvn	r3, #-2147483648	; 0x80000000
   274b4:	sub	r3, r3, r4
   274b8:	cmp	r5, r3
   274bc:	ble	274d0 <__assert_fail@plt+0x161f8>
   274c0:	mvn	r4, #1
   274c4:	mov	r0, r4
   274c8:	add	sp, sp, #20
   274cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   274d0:	cmp	r4, #0
   274d4:	add	r9, r5, r4
   274d8:	ble	27564 <__assert_fail@plt+0x1628c>
   274dc:	cmp	r5, #0
   274e0:	beq	2755c <__assert_fail@plt+0x16284>
   274e4:	mov	r0, r9
   274e8:	bl	294e4 <__assert_fail@plt+0x1820c>
   274ec:	subs	r8, r0, #0
   274f0:	beq	274c0 <__assert_fail@plt+0x161e8>
   274f4:	mov	r1, fp
   274f8:	mov	r2, r5
   274fc:	bl	11068 <memcpy@plt>
   27500:	mov	r1, r7
   27504:	mov	r2, r4
   27508:	add	r0, r8, r5
   2750c:	bl	11068 <memcpy@plt>
   27510:	mov	r7, r8
   27514:	ldr	r2, [sp, #68]	; 0x44
   27518:	mov	r3, #0
   2751c:	str	r2, [sp, #8]
   27520:	ldr	r2, [sp, #64]	; 0x40
   27524:	mov	r1, r7
   27528:	str	r2, [sp]
   2752c:	str	r3, [sp, #12]
   27530:	mov	r2, r9
   27534:	ldr	r3, [sp, #60]	; 0x3c
   27538:	str	r6, [sp, #4]
   2753c:	mov	r0, sl
   27540:	bl	26bb0 <__assert_fail@plt+0x158d8>
   27544:	mov	r4, r0
   27548:	mov	r0, r8
   2754c:	bl	296b0 <__assert_fail@plt+0x183d8>
   27550:	mov	r0, r4
   27554:	add	sp, sp, #20
   27558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2755c:	mov	r8, r5
   27560:	b	27514 <__assert_fail@plt+0x1623c>
   27564:	mov	r7, fp
   27568:	mov	r8, #0
   2756c:	b	27514 <__assert_fail@plt+0x1623c>
   27570:	cmp	r2, #0
   27574:	bne	27594 <__assert_fail@plt+0x162bc>
   27578:	ldrb	r3, [r0, #28]
   2757c:	bic	r3, r3, #6
   27580:	strb	r3, [r0, #28]
   27584:	str	r2, [r1]
   27588:	str	r2, [r1, #8]
   2758c:	str	r2, [r1, #4]
   27590:	bx	lr
   27594:	ldrb	ip, [r0, #28]
   27598:	bic	ip, ip, #4
   2759c:	orr	ip, ip, #2
   275a0:	strb	ip, [r0, #28]
   275a4:	stm	r1, {r2, r3}
   275a8:	ldr	r3, [sp]
   275ac:	str	r3, [r1, #8]
   275b0:	bx	lr
   275b4:	push	{r4, r5, r6, lr}
   275b8:	sub	sp, sp, #32
   275bc:	cmp	r1, #0
   275c0:	mov	r4, r0
   275c4:	ldr	r5, [sp, #48]	; 0x30
   275c8:	ldr	r6, [sp, #52]	; 0x34
   275cc:	beq	278e4 <__assert_fail@plt+0x1660c>
   275d0:	stm	sp, {r2, r3}
   275d4:	mov	r3, r1
   275d8:	ldr	r2, [pc, #808]	; 27908 <__assert_fail@plt+0x16630>
   275dc:	mov	r1, #1
   275e0:	bl	11224 <__fprintf_chk@plt>
   275e4:	mov	r2, #5
   275e8:	ldr	r1, [pc, #796]	; 2790c <__assert_fail@plt+0x16634>
   275ec:	mov	r0, #0
   275f0:	bl	110c8 <dcgettext@plt>
   275f4:	ldr	r3, [pc, #788]	; 27910 <__assert_fail@plt+0x16638>
   275f8:	ldr	r2, [pc, #788]	; 27914 <__assert_fail@plt+0x1663c>
   275fc:	str	r3, [sp]
   27600:	mov	r1, #1
   27604:	mov	r3, r0
   27608:	mov	r0, r4
   2760c:	bl	11224 <__fprintf_chk@plt>
   27610:	mov	r1, r4
   27614:	mov	r0, #10
   27618:	bl	110bc <fputc_unlocked@plt>
   2761c:	mov	r2, #5
   27620:	ldr	r1, [pc, #752]	; 27918 <__assert_fail@plt+0x16640>
   27624:	mov	r0, #0
   27628:	bl	110c8 <dcgettext@plt>
   2762c:	mov	r1, #1
   27630:	ldr	r3, [pc, #740]	; 2791c <__assert_fail@plt+0x16644>
   27634:	mov	r2, r0
   27638:	mov	r0, r4
   2763c:	bl	11224 <__fprintf_chk@plt>
   27640:	mov	r1, r4
   27644:	mov	r0, #10
   27648:	bl	110bc <fputc_unlocked@plt>
   2764c:	cmp	r6, #9
   27650:	ldrls	pc, [pc, r6, lsl #2]
   27654:	b	278fc <__assert_fail@plt+0x16624>
   27658:	ldrdeq	r7, [r2], -ip
   2765c:	andeq	r7, r2, r4, ror #13
   27660:	andeq	r7, r2, r0, lsl r7
   27664:	andeq	r7, r2, r4, asr #14
   27668:	andeq	r7, r2, r0, lsl #15
   2766c:			; <UNDEFINED> instruction: 0x000277bc
   27670:	strdeq	r7, [r2], -r8
   27674:	andeq	r7, r2, ip, lsr r8
   27678:	andeq	r7, r2, ip, lsl #17
   2767c:	andeq	r7, r2, r0, lsl #13
   27680:	ldr	r1, [pc, #664]	; 27920 <__assert_fail@plt+0x16648>
   27684:	mov	r2, #5
   27688:	mov	r0, #0
   2768c:	bl	110c8 <dcgettext@plt>
   27690:	ldr	ip, [r5, #32]
   27694:	ldr	r1, [r5, #28]
   27698:	ldr	r2, [r5, #24]
   2769c:	ldr	r3, [r5]
   276a0:	ldr	r6, [r5, #20]
   276a4:	str	ip, [sp, #28]
   276a8:	ldr	lr, [r5, #16]
   276ac:	str	r1, [sp, #24]
   276b0:	ldr	ip, [r5, #12]
   276b4:	str	r2, [sp, #20]
   276b8:	ldr	r1, [r5, #8]
   276bc:	ldr	r2, [r5, #4]
   276c0:	str	r6, [sp, #16]
   276c4:	stmib	sp, {r1, ip, lr}
   276c8:	mov	r1, #1
   276cc:	str	r2, [sp]
   276d0:	mov	r2, r0
   276d4:	mov	r0, r4
   276d8:	bl	11224 <__fprintf_chk@plt>
   276dc:	add	sp, sp, #32
   276e0:	pop	{r4, r5, r6, pc}
   276e4:	mov	r2, #5
   276e8:	ldr	r1, [pc, #564]	; 27924 <__assert_fail@plt+0x1664c>
   276ec:	mov	r0, #0
   276f0:	bl	110c8 <dcgettext@plt>
   276f4:	ldr	r3, [r5]
   276f8:	mov	r1, #1
   276fc:	mov	r2, r0
   27700:	mov	r0, r4
   27704:	add	sp, sp, #32
   27708:	pop	{r4, r5, r6, lr}
   2770c:	b	11224 <__fprintf_chk@plt>
   27710:	mov	r2, #5
   27714:	ldr	r1, [pc, #524]	; 27928 <__assert_fail@plt+0x16650>
   27718:	mov	r0, #0
   2771c:	bl	110c8 <dcgettext@plt>
   27720:	ldr	r2, [r5, #4]
   27724:	ldr	r3, [r5]
   27728:	mov	r1, #1
   2772c:	str	r2, [sp, #48]	; 0x30
   27730:	mov	r2, r0
   27734:	mov	r0, r4
   27738:	add	sp, sp, #32
   2773c:	pop	{r4, r5, r6, lr}
   27740:	b	11224 <__fprintf_chk@plt>
   27744:	mov	r2, #5
   27748:	ldr	r1, [pc, #476]	; 2792c <__assert_fail@plt+0x16654>
   2774c:	mov	r0, #0
   27750:	bl	110c8 <dcgettext@plt>
   27754:	ldr	r1, [r5, #8]
   27758:	ldr	r2, [r5, #4]
   2775c:	ldr	r3, [r5]
   27760:	str	r1, [sp, #52]	; 0x34
   27764:	str	r2, [sp, #48]	; 0x30
   27768:	mov	r1, #1
   2776c:	mov	r2, r0
   27770:	mov	r0, r4
   27774:	add	sp, sp, #32
   27778:	pop	{r4, r5, r6, lr}
   2777c:	b	11224 <__fprintf_chk@plt>
   27780:	mov	r2, #5
   27784:	ldr	r1, [pc, #420]	; 27930 <__assert_fail@plt+0x16658>
   27788:	mov	r0, #0
   2778c:	bl	110c8 <dcgettext@plt>
   27790:	ldr	r1, [r5, #8]
   27794:	ldr	ip, [r5, #12]
   27798:	ldr	r2, [r5, #4]
   2779c:	ldr	r3, [r5]
   277a0:	stmib	sp, {r1, ip}
   277a4:	str	r2, [sp]
   277a8:	mov	r1, #1
   277ac:	mov	r2, r0
   277b0:	mov	r0, r4
   277b4:	bl	11224 <__fprintf_chk@plt>
   277b8:	b	276dc <__assert_fail@plt+0x16404>
   277bc:	mov	r2, #5
   277c0:	ldr	r1, [pc, #364]	; 27934 <__assert_fail@plt+0x1665c>
   277c4:	mov	r0, #0
   277c8:	bl	110c8 <dcgettext@plt>
   277cc:	add	r1, r5, #8
   277d0:	ldr	r2, [r5, #4]
   277d4:	ldm	r1, {r1, ip, lr}
   277d8:	ldr	r3, [r5]
   277dc:	str	r2, [sp]
   277e0:	stmib	sp, {r1, ip, lr}
   277e4:	mov	r1, #1
   277e8:	mov	r2, r0
   277ec:	mov	r0, r4
   277f0:	bl	11224 <__fprintf_chk@plt>
   277f4:	b	276dc <__assert_fail@plt+0x16404>
   277f8:	mov	r2, #5
   277fc:	ldr	r1, [pc, #308]	; 27938 <__assert_fail@plt+0x16660>
   27800:	mov	r0, #0
   27804:	bl	110c8 <dcgettext@plt>
   27808:	add	r1, r5, #8
   2780c:	ldr	r2, [r5, #4]
   27810:	ldm	r1, {r1, ip, lr}
   27814:	ldr	r6, [r5, #20]
   27818:	ldr	r3, [r5]
   2781c:	stmib	sp, {r1, ip, lr}
   27820:	mov	r1, #1
   27824:	str	r2, [sp]
   27828:	str	r6, [sp, #16]
   2782c:	mov	r2, r0
   27830:	mov	r0, r4
   27834:	bl	11224 <__fprintf_chk@plt>
   27838:	b	276dc <__assert_fail@plt+0x16404>
   2783c:	mov	r2, #5
   27840:	ldr	r1, [pc, #244]	; 2793c <__assert_fail@plt+0x16664>
   27844:	mov	r0, #0
   27848:	bl	110c8 <dcgettext@plt>
   2784c:	ldr	r2, [r5, #24]
   27850:	ldr	r3, [r5]
   27854:	ldr	r6, [r5, #20]
   27858:	ldr	lr, [r5, #16]
   2785c:	ldr	ip, [r5, #12]
   27860:	str	r2, [sp, #20]
   27864:	ldr	r1, [r5, #8]
   27868:	ldr	r2, [r5, #4]
   2786c:	str	r6, [sp, #16]
   27870:	stmib	sp, {r1, ip, lr}
   27874:	mov	r1, #1
   27878:	str	r2, [sp]
   2787c:	mov	r2, r0
   27880:	mov	r0, r4
   27884:	bl	11224 <__fprintf_chk@plt>
   27888:	b	276dc <__assert_fail@plt+0x16404>
   2788c:	mov	r2, #5
   27890:	ldr	r1, [pc, #168]	; 27940 <__assert_fail@plt+0x16668>
   27894:	mov	r0, #0
   27898:	bl	110c8 <dcgettext@plt>
   2789c:	ldr	r1, [r5, #28]
   278a0:	ldr	r2, [r5, #24]
   278a4:	ldr	r3, [r5]
   278a8:	ldr	r6, [r5, #20]
   278ac:	ldr	lr, [r5, #16]
   278b0:	str	r1, [sp, #24]
   278b4:	ldr	ip, [r5, #12]
   278b8:	str	r2, [sp, #20]
   278bc:	ldr	r1, [r5, #8]
   278c0:	ldr	r2, [r5, #4]
   278c4:	str	r6, [sp, #16]
   278c8:	stmib	sp, {r1, ip, lr}
   278cc:	mov	r1, #1
   278d0:	str	r2, [sp]
   278d4:	mov	r2, r0
   278d8:	mov	r0, r4
   278dc:	bl	11224 <__fprintf_chk@plt>
   278e0:	b	276dc <__assert_fail@plt+0x16404>
   278e4:	str	r3, [sp]
   278e8:	mov	r1, #1
   278ec:	mov	r3, r2
   278f0:	ldr	r2, [pc, #76]	; 27944 <__assert_fail@plt+0x1666c>
   278f4:	bl	11224 <__fprintf_chk@plt>
   278f8:	b	275e4 <__assert_fail@plt+0x1630c>
   278fc:	mov	r2, #5
   27900:	ldr	r1, [pc, #64]	; 27948 <__assert_fail@plt+0x16670>
   27904:	b	27688 <__assert_fail@plt+0x163b0>
   27908:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   2790c:	andeq	sl, r2, r8, lsr #31
   27910:	andeq	r0, r0, r6, ror #15
   27914:	andeq	fp, r2, r0, lsl #5
   27918:	andeq	sl, r2, ip, lsr #31
   2791c:	andeq	fp, r2, r8, asr r0
   27920:	andeq	fp, r2, r8, lsl #3
   27924:	andeq	fp, r2, ip, ror r0
   27928:	andeq	fp, r2, ip, lsl #1
   2792c:	andeq	fp, r2, r4, lsr #1
   27930:	andeq	fp, r2, r0, asr #1
   27934:	andeq	fp, r2, r0, ror #1
   27938:	andeq	fp, r2, r4, lsl #2
   2793c:	andeq	fp, r2, ip, lsr #2
   27940:	andeq	fp, r2, r8, asr r1
   27944:	andeq	sl, r2, r0, lsr #31
   27948:			; <UNDEFINED> instruction: 0x0002b1bc
   2794c:	push	{r4, r5, lr}
   27950:	sub	sp, sp, #12
   27954:	ldr	r5, [sp, #24]
   27958:	ldr	ip, [r5]
   2795c:	cmp	ip, #0
   27960:	beq	2797c <__assert_fail@plt+0x166a4>
   27964:	mov	lr, r5
   27968:	mov	ip, #0
   2796c:	ldr	r4, [lr, #4]!
   27970:	add	ip, ip, #1
   27974:	cmp	r4, #0
   27978:	bne	2796c <__assert_fail@plt+0x16694>
   2797c:	stm	sp, {r5, ip}
   27980:	bl	275b4 <__assert_fail@plt+0x162dc>
   27984:	add	sp, sp, #12
   27988:	pop	{r4, r5, pc}
   2798c:	push	{r4, r5, lr}
   27990:	sub	sp, sp, #76	; 0x4c
   27994:	mov	r5, r0
   27998:	ldr	ip, [sp, #88]	; 0x58
   2799c:	ldr	r0, [ip]
   279a0:	cmp	r0, #0
   279a4:	str	r0, [sp, #32]
   279a8:	beq	27d7c <__assert_fail@plt+0x16aa4>
   279ac:	ldr	r0, [ip, #4]
   279b0:	cmp	r0, #0
   279b4:	str	r0, [sp, #36]	; 0x24
   279b8:	beq	27d84 <__assert_fail@plt+0x16aac>
   279bc:	ldr	r0, [ip, #8]
   279c0:	cmp	r0, #0
   279c4:	str	r0, [sp, #40]	; 0x28
   279c8:	beq	27d8c <__assert_fail@plt+0x16ab4>
   279cc:	ldr	r0, [ip, #12]
   279d0:	cmp	r0, #0
   279d4:	str	r0, [sp, #44]	; 0x2c
   279d8:	beq	27d94 <__assert_fail@plt+0x16abc>
   279dc:	ldr	r0, [ip, #16]
   279e0:	cmp	r0, #0
   279e4:	str	r0, [sp, #48]	; 0x30
   279e8:	beq	27d9c <__assert_fail@plt+0x16ac4>
   279ec:	ldr	r0, [ip, #20]
   279f0:	cmp	r0, #0
   279f4:	str	r0, [sp, #52]	; 0x34
   279f8:	beq	27da4 <__assert_fail@plt+0x16acc>
   279fc:	ldr	r0, [ip, #24]
   27a00:	cmp	r0, #0
   27a04:	str	r0, [sp, #56]	; 0x38
   27a08:	beq	27dac <__assert_fail@plt+0x16ad4>
   27a0c:	ldr	r0, [ip, #28]
   27a10:	cmp	r0, #0
   27a14:	str	r0, [sp, #60]	; 0x3c
   27a18:	beq	27db4 <__assert_fail@plt+0x16adc>
   27a1c:	ldr	r0, [ip, #32]
   27a20:	cmp	r0, #0
   27a24:	str	r0, [sp, #64]	; 0x40
   27a28:	beq	27dbc <__assert_fail@plt+0x16ae4>
   27a2c:	ldr	r0, [ip, #36]	; 0x24
   27a30:	cmp	r0, #0
   27a34:	movne	r4, #10
   27a38:	moveq	r4, #9
   27a3c:	cmp	r1, #0
   27a40:	beq	27d54 <__assert_fail@plt+0x16a7c>
   27a44:	stm	sp, {r2, r3}
   27a48:	mov	r0, r5
   27a4c:	mov	r3, r1
   27a50:	ldr	r2, [pc, #876]	; 27dc4 <__assert_fail@plt+0x16aec>
   27a54:	mov	r1, #1
   27a58:	bl	11224 <__fprintf_chk@plt>
   27a5c:	mov	r2, #5
   27a60:	ldr	r1, [pc, #864]	; 27dc8 <__assert_fail@plt+0x16af0>
   27a64:	mov	r0, #0
   27a68:	bl	110c8 <dcgettext@plt>
   27a6c:	ldr	r3, [pc, #856]	; 27dcc <__assert_fail@plt+0x16af4>
   27a70:	ldr	r2, [pc, #856]	; 27dd0 <__assert_fail@plt+0x16af8>
   27a74:	str	r3, [sp]
   27a78:	mov	r1, #1
   27a7c:	mov	r3, r0
   27a80:	mov	r0, r5
   27a84:	bl	11224 <__fprintf_chk@plt>
   27a88:	mov	r1, r5
   27a8c:	mov	r0, #10
   27a90:	bl	110bc <fputc_unlocked@plt>
   27a94:	mov	r2, #5
   27a98:	ldr	r1, [pc, #820]	; 27dd4 <__assert_fail@plt+0x16afc>
   27a9c:	mov	r0, #0
   27aa0:	bl	110c8 <dcgettext@plt>
   27aa4:	mov	r1, #1
   27aa8:	ldr	r3, [pc, #808]	; 27dd8 <__assert_fail@plt+0x16b00>
   27aac:	mov	r2, r0
   27ab0:	mov	r0, r5
   27ab4:	bl	11224 <__fprintf_chk@plt>
   27ab8:	mov	r1, r5
   27abc:	mov	r0, #10
   27ac0:	bl	110bc <fputc_unlocked@plt>
   27ac4:	cmp	r4, #9
   27ac8:	ldrls	pc, [pc, r4, lsl #2]
   27acc:	b	27d70 <__assert_fail@plt+0x16a98>
   27ad0:	andeq	r7, r2, r4, asr fp
   27ad4:	andeq	r7, r2, ip, asr fp
   27ad8:	andeq	r7, r2, r8, lsl #23
   27adc:			; <UNDEFINED> instruction: 0x00027bbc
   27ae0:	strdeq	r7, [r2], -r4
   27ae4:	andeq	r7, r2, r0, lsr ip
   27ae8:	andeq	r7, r2, ip, ror #24
   27aec:			; <UNDEFINED> instruction: 0x00027cb0
   27af0:	strdeq	r7, [r2], -ip
   27af4:	strdeq	r7, [r2], -r8
   27af8:	ldr	r1, [pc, #732]	; 27ddc <__assert_fail@plt+0x16b04>
   27afc:	mov	r2, #5
   27b00:	mov	r0, #0
   27b04:	bl	110c8 <dcgettext@plt>
   27b08:	ldr	ip, [sp, #64]	; 0x40
   27b0c:	ldr	r1, [sp, #60]	; 0x3c
   27b10:	ldr	r2, [sp, #56]	; 0x38
   27b14:	ldr	lr, [sp, #48]	; 0x30
   27b18:	str	ip, [sp, #28]
   27b1c:	str	r1, [sp, #24]
   27b20:	ldr	ip, [sp, #44]	; 0x2c
   27b24:	ldr	r1, [sp, #40]	; 0x28
   27b28:	ldr	r4, [sp, #52]	; 0x34
   27b2c:	str	r2, [sp, #20]
   27b30:	ldr	r2, [sp, #36]	; 0x24
   27b34:	stmib	sp, {r1, ip, lr}
   27b38:	mov	r1, #1
   27b3c:	str	r2, [sp]
   27b40:	ldr	r3, [sp, #32]
   27b44:	str	r4, [sp, #16]
   27b48:	mov	r2, r0
   27b4c:	mov	r0, r5
   27b50:	bl	11224 <__fprintf_chk@plt>
   27b54:	add	sp, sp, #76	; 0x4c
   27b58:	pop	{r4, r5, pc}
   27b5c:	mov	r2, #5
   27b60:	ldr	r1, [pc, #632]	; 27de0 <__assert_fail@plt+0x16b08>
   27b64:	mov	r0, #0
   27b68:	bl	110c8 <dcgettext@plt>
   27b6c:	ldr	r3, [sp, #32]
   27b70:	mov	r1, #1
   27b74:	mov	r2, r0
   27b78:	mov	r0, r5
   27b7c:	add	sp, sp, #76	; 0x4c
   27b80:	pop	{r4, r5, lr}
   27b84:	b	11224 <__fprintf_chk@plt>
   27b88:	mov	r2, #5
   27b8c:	ldr	r1, [pc, #592]	; 27de4 <__assert_fail@plt+0x16b0c>
   27b90:	mov	r0, #0
   27b94:	bl	110c8 <dcgettext@plt>
   27b98:	ldr	r2, [sp, #36]	; 0x24
   27b9c:	ldr	r3, [sp, #32]
   27ba0:	str	r2, [sp, #88]	; 0x58
   27ba4:	mov	r1, #1
   27ba8:	mov	r2, r0
   27bac:	mov	r0, r5
   27bb0:	add	sp, sp, #76	; 0x4c
   27bb4:	pop	{r4, r5, lr}
   27bb8:	b	11224 <__fprintf_chk@plt>
   27bbc:	mov	r2, #5
   27bc0:	ldr	r1, [pc, #544]	; 27de8 <__assert_fail@plt+0x16b10>
   27bc4:	mov	r0, #0
   27bc8:	bl	110c8 <dcgettext@plt>
   27bcc:	ldr	r1, [sp, #40]	; 0x28
   27bd0:	ldr	r2, [sp, #36]	; 0x24
   27bd4:	str	r1, [sp, #4]
   27bd8:	str	r2, [sp]
   27bdc:	ldr	r3, [sp, #32]
   27be0:	mov	r1, #1
   27be4:	mov	r2, r0
   27be8:	mov	r0, r5
   27bec:	bl	11224 <__fprintf_chk@plt>
   27bf0:	b	27b54 <__assert_fail@plt+0x1687c>
   27bf4:	mov	r2, #5
   27bf8:	ldr	r1, [pc, #492]	; 27dec <__assert_fail@plt+0x16b14>
   27bfc:	mov	r0, #0
   27c00:	bl	110c8 <dcgettext@plt>
   27c04:	ldr	r1, [sp, #40]	; 0x28
   27c08:	ldr	ip, [sp, #44]	; 0x2c
   27c0c:	ldr	r2, [sp, #36]	; 0x24
   27c10:	ldr	r3, [sp, #32]
   27c14:	stmib	sp, {r1, ip}
   27c18:	str	r2, [sp]
   27c1c:	mov	r1, #1
   27c20:	mov	r2, r0
   27c24:	mov	r0, r5
   27c28:	bl	11224 <__fprintf_chk@plt>
   27c2c:	b	27b54 <__assert_fail@plt+0x1687c>
   27c30:	mov	r2, #5
   27c34:	ldr	r1, [pc, #436]	; 27df0 <__assert_fail@plt+0x16b18>
   27c38:	mov	r0, #0
   27c3c:	bl	110c8 <dcgettext@plt>
   27c40:	add	r1, sp, #40	; 0x28
   27c44:	ldr	r2, [sp, #36]	; 0x24
   27c48:	ldm	r1, {r1, ip, lr}
   27c4c:	ldr	r3, [sp, #32]
   27c50:	str	r2, [sp]
   27c54:	stmib	sp, {r1, ip, lr}
   27c58:	mov	r1, #1
   27c5c:	mov	r2, r0
   27c60:	mov	r0, r5
   27c64:	bl	11224 <__fprintf_chk@plt>
   27c68:	b	27b54 <__assert_fail@plt+0x1687c>
   27c6c:	mov	r2, #5
   27c70:	ldr	r1, [pc, #380]	; 27df4 <__assert_fail@plt+0x16b1c>
   27c74:	mov	r0, #0
   27c78:	bl	110c8 <dcgettext@plt>
   27c7c:	add	r1, sp, #40	; 0x28
   27c80:	ldr	r2, [sp, #36]	; 0x24
   27c84:	ldm	r1, {r1, ip, lr}
   27c88:	ldr	r4, [sp, #52]	; 0x34
   27c8c:	str	r2, [sp]
   27c90:	stmib	sp, {r1, ip, lr}
   27c94:	mov	r1, #1
   27c98:	ldr	r3, [sp, #32]
   27c9c:	str	r4, [sp, #16]
   27ca0:	mov	r2, r0
   27ca4:	mov	r0, r5
   27ca8:	bl	11224 <__fprintf_chk@plt>
   27cac:	b	27b54 <__assert_fail@plt+0x1687c>
   27cb0:	mov	r2, #5
   27cb4:	ldr	r1, [pc, #316]	; 27df8 <__assert_fail@plt+0x16b20>
   27cb8:	mov	r0, #0
   27cbc:	bl	110c8 <dcgettext@plt>
   27cc0:	add	r1, sp, #40	; 0x28
   27cc4:	ldr	r2, [sp, #56]	; 0x38
   27cc8:	ldm	r1, {r1, ip, lr}
   27ccc:	ldr	r4, [sp, #52]	; 0x34
   27cd0:	str	r2, [sp, #20]
   27cd4:	ldr	r2, [sp, #36]	; 0x24
   27cd8:	stmib	sp, {r1, ip, lr}
   27cdc:	mov	r1, #1
   27ce0:	str	r2, [sp]
   27ce4:	ldr	r3, [sp, #32]
   27ce8:	str	r4, [sp, #16]
   27cec:	mov	r2, r0
   27cf0:	mov	r0, r5
   27cf4:	bl	11224 <__fprintf_chk@plt>
   27cf8:	b	27b54 <__assert_fail@plt+0x1687c>
   27cfc:	mov	r2, #5
   27d00:	ldr	r1, [pc, #244]	; 27dfc <__assert_fail@plt+0x16b24>
   27d04:	mov	r0, #0
   27d08:	bl	110c8 <dcgettext@plt>
   27d0c:	ldr	r1, [sp, #60]	; 0x3c
   27d10:	ldr	r2, [sp, #56]	; 0x38
   27d14:	ldr	lr, [sp, #48]	; 0x30
   27d18:	ldr	ip, [sp, #44]	; 0x2c
   27d1c:	str	r1, [sp, #24]
   27d20:	ldr	r1, [sp, #40]	; 0x28
   27d24:	ldr	r4, [sp, #52]	; 0x34
   27d28:	str	r2, [sp, #20]
   27d2c:	ldr	r2, [sp, #36]	; 0x24
   27d30:	stmib	sp, {r1, ip, lr}
   27d34:	mov	r1, #1
   27d38:	str	r2, [sp]
   27d3c:	ldr	r3, [sp, #32]
   27d40:	str	r4, [sp, #16]
   27d44:	mov	r2, r0
   27d48:	mov	r0, r5
   27d4c:	bl	11224 <__fprintf_chk@plt>
   27d50:	b	27b54 <__assert_fail@plt+0x1687c>
   27d54:	str	r3, [sp]
   27d58:	mov	r1, #1
   27d5c:	mov	r3, r2
   27d60:	mov	r0, r5
   27d64:	ldr	r2, [pc, #148]	; 27e00 <__assert_fail@plt+0x16b28>
   27d68:	bl	11224 <__fprintf_chk@plt>
   27d6c:	b	27a5c <__assert_fail@plt+0x16784>
   27d70:	mov	r2, #5
   27d74:	ldr	r1, [pc, #136]	; 27e04 <__assert_fail@plt+0x16b2c>
   27d78:	b	27b00 <__assert_fail@plt+0x16828>
   27d7c:	mov	r4, r0
   27d80:	b	27a3c <__assert_fail@plt+0x16764>
   27d84:	mov	r4, #1
   27d88:	b	27a3c <__assert_fail@plt+0x16764>
   27d8c:	mov	r4, #2
   27d90:	b	27a3c <__assert_fail@plt+0x16764>
   27d94:	mov	r4, #3
   27d98:	b	27a3c <__assert_fail@plt+0x16764>
   27d9c:	mov	r4, #4
   27da0:	b	27a3c <__assert_fail@plt+0x16764>
   27da4:	mov	r4, #5
   27da8:	b	27a3c <__assert_fail@plt+0x16764>
   27dac:	mov	r4, #6
   27db0:	b	27a3c <__assert_fail@plt+0x16764>
   27db4:	mov	r4, #7
   27db8:	b	27a3c <__assert_fail@plt+0x16764>
   27dbc:	mov	r4, #8
   27dc0:	b	27a3c <__assert_fail@plt+0x16764>
   27dc4:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   27dc8:	andeq	sl, r2, r8, lsr #31
   27dcc:	andeq	r0, r0, r6, ror #15
   27dd0:	andeq	fp, r2, r0, lsl #5
   27dd4:	andeq	sl, r2, ip, lsr #31
   27dd8:	andeq	fp, r2, r8, asr r0
   27ddc:	andeq	fp, r2, r8, lsl #3
   27de0:	andeq	fp, r2, ip, ror r0
   27de4:	andeq	fp, r2, ip, lsl #1
   27de8:	andeq	fp, r2, r4, lsr #1
   27dec:	andeq	fp, r2, r0, asr #1
   27df0:	andeq	fp, r2, r0, ror #1
   27df4:	andeq	fp, r2, r4, lsl #2
   27df8:	andeq	fp, r2, ip, lsr #2
   27dfc:	andeq	fp, r2, r8, asr r1
   27e00:	andeq	sl, r2, r0, lsr #31
   27e04:			; <UNDEFINED> instruction: 0x0002b1bc
   27e08:	push	{r3}		; (str r3, [sp, #-4]!)
   27e0c:	push	{lr}		; (str lr, [sp, #-4]!)
   27e10:	sub	sp, sp, #56	; 0x38
   27e14:	add	r3, sp, #64	; 0x40
   27e18:	ldr	ip, [sp, #64]	; 0x40
   27e1c:	str	r3, [sp, #12]
   27e20:	cmp	ip, #0
   27e24:	str	ip, [sp, #16]
   27e28:	beq	27ec0 <__assert_fail@plt+0x16be8>
   27e2c:	ldr	ip, [sp, #68]	; 0x44
   27e30:	cmp	ip, #0
   27e34:	str	ip, [sp, #20]
   27e38:	beq	27ee0 <__assert_fail@plt+0x16c08>
   27e3c:	ldr	ip, [sp, #72]	; 0x48
   27e40:	cmp	ip, #0
   27e44:	str	ip, [sp, #24]
   27e48:	beq	27ee8 <__assert_fail@plt+0x16c10>
   27e4c:	ldr	ip, [sp, #76]	; 0x4c
   27e50:	cmp	ip, #0
   27e54:	str	ip, [sp, #28]
   27e58:	beq	27ef0 <__assert_fail@plt+0x16c18>
   27e5c:	ldr	ip, [sp, #80]	; 0x50
   27e60:	cmp	ip, #0
   27e64:	str	ip, [sp, #32]
   27e68:	beq	27ef8 <__assert_fail@plt+0x16c20>
   27e6c:	ldr	ip, [sp, #84]	; 0x54
   27e70:	cmp	ip, #0
   27e74:	str	ip, [sp, #36]	; 0x24
   27e78:	beq	27f00 <__assert_fail@plt+0x16c28>
   27e7c:	ldr	ip, [sp, #88]	; 0x58
   27e80:	cmp	ip, #0
   27e84:	str	ip, [sp, #40]	; 0x28
   27e88:	beq	27f08 <__assert_fail@plt+0x16c30>
   27e8c:	ldr	ip, [sp, #92]	; 0x5c
   27e90:	cmp	ip, #0
   27e94:	str	ip, [sp, #44]	; 0x2c
   27e98:	beq	27f10 <__assert_fail@plt+0x16c38>
   27e9c:	ldr	ip, [sp, #96]	; 0x60
   27ea0:	cmp	ip, #0
   27ea4:	str	ip, [sp, #48]	; 0x30
   27ea8:	beq	27f18 <__assert_fail@plt+0x16c40>
   27eac:	ldr	ip, [sp, #100]	; 0x64
   27eb0:	cmp	ip, #0
   27eb4:	str	ip, [sp, #52]	; 0x34
   27eb8:	movne	ip, #10
   27ebc:	moveq	ip, #9
   27ec0:	add	r3, sp, #16
   27ec4:	stm	sp, {r3, ip}
   27ec8:	ldr	r3, [sp, #60]	; 0x3c
   27ecc:	bl	275b4 <__assert_fail@plt+0x162dc>
   27ed0:	add	sp, sp, #56	; 0x38
   27ed4:	pop	{lr}		; (ldr lr, [sp], #4)
   27ed8:	add	sp, sp, #4
   27edc:	bx	lr
   27ee0:	mov	ip, #1
   27ee4:	b	27ec0 <__assert_fail@plt+0x16be8>
   27ee8:	mov	ip, #2
   27eec:	b	27ec0 <__assert_fail@plt+0x16be8>
   27ef0:	mov	ip, #3
   27ef4:	b	27ec0 <__assert_fail@plt+0x16be8>
   27ef8:	mov	ip, #4
   27efc:	b	27ec0 <__assert_fail@plt+0x16be8>
   27f00:	mov	ip, #5
   27f04:	b	27ec0 <__assert_fail@plt+0x16be8>
   27f08:	mov	ip, #6
   27f0c:	b	27ec0 <__assert_fail@plt+0x16be8>
   27f10:	mov	ip, #7
   27f14:	b	27ec0 <__assert_fail@plt+0x16be8>
   27f18:	mov	ip, #8
   27f1c:	b	27ec0 <__assert_fail@plt+0x16be8>
   27f20:	ldr	r3, [pc, #116]	; 27f9c <__assert_fail@plt+0x16cc4>
   27f24:	push	{r4, lr}
   27f28:	mov	r0, #10
   27f2c:	ldr	r1, [r3]
   27f30:	bl	110bc <fputc_unlocked@plt>
   27f34:	mov	r2, #5
   27f38:	ldr	r1, [pc, #96]	; 27fa0 <__assert_fail@plt+0x16cc8>
   27f3c:	mov	r0, #0
   27f40:	bl	110c8 <dcgettext@plt>
   27f44:	ldr	r2, [pc, #88]	; 27fa4 <__assert_fail@plt+0x16ccc>
   27f48:	mov	r1, r0
   27f4c:	mov	r0, #1
   27f50:	bl	1120c <__printf_chk@plt>
   27f54:	mov	r2, #5
   27f58:	ldr	r1, [pc, #72]	; 27fa8 <__assert_fail@plt+0x16cd0>
   27f5c:	mov	r0, #0
   27f60:	bl	110c8 <dcgettext@plt>
   27f64:	ldr	r3, [pc, #64]	; 27fac <__assert_fail@plt+0x16cd4>
   27f68:	ldr	r2, [pc, #64]	; 27fb0 <__assert_fail@plt+0x16cd8>
   27f6c:	mov	r1, r0
   27f70:	mov	r0, #1
   27f74:	bl	1120c <__printf_chk@plt>
   27f78:	mov	r2, #5
   27f7c:	ldr	r1, [pc, #48]	; 27fb4 <__assert_fail@plt+0x16cdc>
   27f80:	mov	r0, #0
   27f84:	bl	110c8 <dcgettext@plt>
   27f88:	ldr	r2, [pc, #40]	; 27fb8 <__assert_fail@plt+0x16ce0>
   27f8c:	pop	{r4, lr}
   27f90:	mov	r1, r0
   27f94:	mov	r0, #1
   27f98:	b	1120c <__printf_chk@plt>
   27f9c:	ldrdeq	ip, [r3], -r4
   27fa0:	strdeq	fp, [r2], -r8
   27fa4:	andeq	fp, r2, ip, lsl #4
   27fa8:	andeq	fp, r2, r4, lsr #4
   27fac:	andeq	sl, r2, r0, lsl #17
   27fb0:	andeq	sl, r2, r8, lsr #17
   27fb4:	andeq	fp, r2, r8, lsr r2
   27fb8:	andeq	fp, r2, r0, ror #4
   27fbc:	push	{r4, r5, r6, lr}
   27fc0:	mov	r6, r0
   27fc4:	mov	r5, r1
   27fc8:	mov	r4, r2
   27fcc:	bl	29790 <__assert_fail@plt+0x184b8>
   27fd0:	cmp	r0, #0
   27fd4:	popne	{r4, r5, r6, pc}
   27fd8:	cmp	r6, #0
   27fdc:	beq	27fec <__assert_fail@plt+0x16d14>
   27fe0:	cmp	r5, #0
   27fe4:	cmpne	r4, #0
   27fe8:	popeq	{r4, r5, r6, pc}
   27fec:	bl	28638 <__assert_fail@plt+0x17360>
   27ff0:	push	{r4, lr}
   27ff4:	bl	294e4 <__assert_fail@plt+0x1820c>
   27ff8:	cmp	r0, #0
   27ffc:	popne	{r4, pc}
   28000:	bl	28638 <__assert_fail@plt+0x17360>
   28004:	push	{r4, lr}
   28008:	bl	294e4 <__assert_fail@plt+0x1820c>
   2800c:	cmp	r0, #0
   28010:	popne	{r4, pc}
   28014:	bl	28638 <__assert_fail@plt+0x17360>
   28018:	push	{r4, lr}
   2801c:	bl	294e4 <__assert_fail@plt+0x1820c>
   28020:	cmp	r0, #0
   28024:	popne	{r4, pc}
   28028:	bl	28638 <__assert_fail@plt+0x17360>
   2802c:	push	{r4, r5, r6, lr}
   28030:	mov	r5, r0
   28034:	mov	r4, r1
   28038:	bl	29510 <__assert_fail@plt+0x18238>
   2803c:	cmp	r0, #0
   28040:	popne	{r4, r5, r6, pc}
   28044:	adds	r4, r4, #0
   28048:	movne	r4, #1
   2804c:	cmp	r5, #0
   28050:	orreq	r4, r4, #1
   28054:	cmp	r4, #0
   28058:	popeq	{r4, r5, r6, pc}
   2805c:	bl	28638 <__assert_fail@plt+0x17360>
   28060:	push	{r4, lr}
   28064:	cmp	r1, #0
   28068:	orreq	r1, r1, #1
   2806c:	bl	29510 <__assert_fail@plt+0x18238>
   28070:	cmp	r0, #0
   28074:	popne	{r4, pc}
   28078:	bl	28638 <__assert_fail@plt+0x17360>
   2807c:	push	{r4, r5, r6, lr}
   28080:	mov	r6, r0
   28084:	mov	r5, r1
   28088:	mov	r4, r2
   2808c:	bl	29790 <__assert_fail@plt+0x184b8>
   28090:	cmp	r0, #0
   28094:	popne	{r4, r5, r6, pc}
   28098:	cmp	r6, #0
   2809c:	beq	280ac <__assert_fail@plt+0x16dd4>
   280a0:	cmp	r5, #0
   280a4:	cmpne	r4, #0
   280a8:	popeq	{r4, r5, r6, pc}
   280ac:	bl	28638 <__assert_fail@plt+0x17360>
   280b0:	cmp	r2, #0
   280b4:	cmpne	r1, #0
   280b8:	moveq	r2, #1
   280bc:	moveq	r1, r2
   280c0:	push	{r4, lr}
   280c4:	bl	29790 <__assert_fail@plt+0x184b8>
   280c8:	cmp	r0, #0
   280cc:	popne	{r4, pc}
   280d0:	bl	28638 <__assert_fail@plt+0x17360>
   280d4:	push	{r4, lr}
   280d8:	mov	r2, r1
   280dc:	mov	r1, r0
   280e0:	mov	r0, #0
   280e4:	bl	29790 <__assert_fail@plt+0x184b8>
   280e8:	cmp	r0, #0
   280ec:	popne	{r4, pc}
   280f0:	bl	28638 <__assert_fail@plt+0x17360>
   280f4:	cmp	r1, #0
   280f8:	cmpne	r0, #0
   280fc:	moveq	r2, #1
   28100:	movne	r2, r1
   28104:	moveq	r1, r2
   28108:	movne	r1, r0
   2810c:	push	{r4, lr}
   28110:	mov	r0, #0
   28114:	bl	29790 <__assert_fail@plt+0x184b8>
   28118:	cmp	r0, #0
   2811c:	popne	{r4, pc}
   28120:	bl	28638 <__assert_fail@plt+0x17360>
   28124:	cmp	r0, #0
   28128:	push	{r4, r5, r6, lr}
   2812c:	mov	r5, r1
   28130:	ldr	r4, [r1]
   28134:	beq	28170 <__assert_fail@plt+0x16e98>
   28138:	lsr	r2, r4, #1
   2813c:	add	r3, r2, #1
   28140:	mvn	r3, r3
   28144:	cmp	r4, r3
   28148:	bhi	2818c <__assert_fail@plt+0x16eb4>
   2814c:	add	r4, r4, #1
   28150:	add	r4, r4, r2
   28154:	mov	r1, r4
   28158:	mov	r2, #1
   2815c:	bl	29790 <__assert_fail@plt+0x184b8>
   28160:	cmp	r0, #0
   28164:	beq	28190 <__assert_fail@plt+0x16eb8>
   28168:	str	r4, [r5]
   2816c:	pop	{r4, r5, r6, pc}
   28170:	cmp	r4, #0
   28174:	moveq	r4, #64	; 0x40
   28178:	mov	r1, r4
   2817c:	mov	r2, #1
   28180:	bl	29790 <__assert_fail@plt+0x184b8>
   28184:	cmp	r0, #0
   28188:	bne	28168 <__assert_fail@plt+0x16e90>
   2818c:	bl	28638 <__assert_fail@plt+0x17360>
   28190:	cmp	r4, #0
   28194:	bne	2818c <__assert_fail@plt+0x16eb4>
   28198:	str	r4, [r5]
   2819c:	pop	{r4, r5, r6, pc}
   281a0:	cmp	r0, #0
   281a4:	push	{r4, r5, r6, lr}
   281a8:	mov	r5, r1
   281ac:	ldr	r4, [r1]
   281b0:	mov	r6, r2
   281b4:	beq	281f8 <__assert_fail@plt+0x16f20>
   281b8:	lsr	r1, r4, #1
   281bc:	add	r3, r1, #1
   281c0:	mvn	r3, r3
   281c4:	cmp	r4, r3
   281c8:	bhi	28230 <__assert_fail@plt+0x16f58>
   281cc:	add	r4, r4, #1
   281d0:	add	r4, r4, r1
   281d4:	mov	r1, r4
   281d8:	bl	29790 <__assert_fail@plt+0x184b8>
   281dc:	cmp	r0, #0
   281e0:	bne	281f0 <__assert_fail@plt+0x16f18>
   281e4:	cmp	r4, #0
   281e8:	cmpne	r6, #0
   281ec:	bne	28230 <__assert_fail@plt+0x16f58>
   281f0:	str	r4, [r5]
   281f4:	pop	{r4, r5, r6, pc}
   281f8:	cmp	r4, #0
   281fc:	bne	28218 <__assert_fail@plt+0x16f40>
   28200:	mov	r1, r2
   28204:	mov	r0, #64	; 0x40
   28208:	bl	298d0 <__assert_fail@plt+0x185f8>
   2820c:	cmp	r0, #0
   28210:	movne	r4, r0
   28214:	addeq	r4, r0, #1
   28218:	mov	r2, r6
   2821c:	mov	r1, r4
   28220:	mov	r0, #0
   28224:	bl	29790 <__assert_fail@plt+0x184b8>
   28228:	cmp	r0, #0
   2822c:	bne	281f0 <__assert_fail@plt+0x16f18>
   28230:	bl	28638 <__assert_fail@plt+0x17360>
   28234:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28238:	sub	sp, sp, #12
   2823c:	ldr	r6, [r1]
   28240:	mov	r8, r1
   28244:	mov	r9, r0
   28248:	asrs	r4, r6, #1
   2824c:	mov	sl, r2
   28250:	mov	fp, r3
   28254:	ldr	r7, [sp, #48]	; 0x30
   28258:	bmi	283d4 <__assert_fail@plt+0x170fc>
   2825c:	mvn	r1, #-2147483648	; 0x80000000
   28260:	sub	r1, r1, r4
   28264:	cmp	r6, r1
   28268:	movle	r1, #0
   2826c:	movgt	r1, #1
   28270:	mvn	r3, fp
   28274:	cmp	r1, #0
   28278:	addeq	r4, r4, r6
   2827c:	mvnne	r4, #-2147483648	; 0x80000000
   28280:	lsr	r3, r3, #31
   28284:	cmp	fp, r4
   28288:	movge	r2, #0
   2828c:	andlt	r2, r3, #1
   28290:	cmp	r2, #0
   28294:	beq	28384 <__assert_fail@plt+0x170ac>
   28298:	cmp	r7, #0
   2829c:	blt	2846c <__assert_fail@plt+0x17194>
   282a0:	bne	28464 <__assert_fail@plt+0x1718c>
   282a4:	mov	r5, #64	; 0x40
   282a8:	mov	r1, r7
   282ac:	mov	r0, r5
   282b0:	str	r3, [sp, #4]
   282b4:	bl	29adc <__assert_fail@plt+0x18804>
   282b8:	mov	r1, r7
   282bc:	mov	r4, r0
   282c0:	mov	r0, r5
   282c4:	bl	29cfc <__assert_fail@plt+0x18a24>
   282c8:	ldr	r3, [sp, #4]
   282cc:	sub	r5, r5, r1
   282d0:	cmp	r9, #0
   282d4:	sub	r2, r4, r6
   282d8:	streq	r9, [r8]
   282dc:	cmp	r2, sl
   282e0:	bge	28364 <__assert_fail@plt+0x1708c>
   282e4:	cmp	sl, #0
   282e8:	blt	28404 <__assert_fail@plt+0x1712c>
   282ec:	cmp	r6, #0
   282f0:	blt	28310 <__assert_fail@plt+0x17038>
   282f4:	mvn	r2, #-2147483648	; 0x80000000
   282f8:	sub	r2, r2, sl
   282fc:	cmp	r6, r2
   28300:	movle	r2, #0
   28304:	movgt	r2, #1
   28308:	cmp	r2, #0
   2830c:	bne	28400 <__assert_fail@plt+0x17128>
   28310:	add	r6, r6, sl
   28314:	cmp	fp, r6
   28318:	movge	r3, #0
   2831c:	andlt	r3, r3, #1
   28320:	cmp	r3, #0
   28324:	mov	r4, r6
   28328:	bne	28400 <__assert_fail@plt+0x17128>
   2832c:	cmp	r7, #0
   28330:	blt	28418 <__assert_fail@plt+0x17140>
   28334:	beq	28360 <__assert_fail@plt+0x17088>
   28338:	cmp	r6, #0
   2833c:	blt	284bc <__assert_fail@plt+0x171e4>
   28340:	mov	r1, r7
   28344:	mvn	r0, #-2147483648	; 0x80000000
   28348:	bl	29adc <__assert_fail@plt+0x18804>
   2834c:	cmp	r6, r0
   28350:	movle	r0, #0
   28354:	movgt	r0, #1
   28358:	cmp	r0, #0
   2835c:	bne	28400 <__assert_fail@plt+0x17128>
   28360:	mul	r5, r6, r7
   28364:	mov	r1, r5
   28368:	mov	r0, r9
   2836c:	bl	29510 <__assert_fail@plt+0x18238>
   28370:	cmp	r0, #0
   28374:	beq	283e8 <__assert_fail@plt+0x17110>
   28378:	str	r4, [r8]
   2837c:	add	sp, sp, #12
   28380:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28384:	cmp	r7, #0
   28388:	blt	28444 <__assert_fail@plt+0x1716c>
   2838c:	beq	282a4 <__assert_fail@plt+0x16fcc>
   28390:	cmp	r4, #0
   28394:	blt	28474 <__assert_fail@plt+0x1719c>
   28398:	mov	r1, r7
   2839c:	mvn	r0, #-2147483648	; 0x80000000
   283a0:	str	r3, [sp, #4]
   283a4:	bl	29adc <__assert_fail@plt+0x18804>
   283a8:	ldr	r3, [sp, #4]
   283ac:	cmp	r0, r4
   283b0:	movge	r0, #0
   283b4:	movlt	r0, #1
   283b8:	cmp	r0, #0
   283bc:	mvnne	r5, #-2147483648	; 0x80000000
   283c0:	bne	282a8 <__assert_fail@plt+0x16fd0>
   283c4:	mul	r5, r7, r4
   283c8:	cmp	r5, #63	; 0x3f
   283cc:	bgt	282d0 <__assert_fail@plt+0x16ff8>
   283d0:	b	282a4 <__assert_fail@plt+0x16fcc>
   283d4:	rsb	r1, r4, #-2147483648	; 0x80000000
   283d8:	cmp	r6, r1
   283dc:	movge	r1, #0
   283e0:	movlt	r1, #1
   283e4:	b	28270 <__assert_fail@plt+0x16f98>
   283e8:	adds	r5, r5, #0
   283ec:	movne	r5, #1
   283f0:	cmp	r9, #0
   283f4:	orreq	r5, r5, #1
   283f8:	cmp	r5, #0
   283fc:	beq	28378 <__assert_fail@plt+0x170a0>
   28400:	bl	28638 <__assert_fail@plt+0x17360>
   28404:	rsb	r2, sl, #-2147483648	; 0x80000000
   28408:	cmp	r6, r2
   2840c:	movge	r2, #0
   28410:	movlt	r2, #1
   28414:	b	28308 <__assert_fail@plt+0x17030>
   28418:	cmp	r6, #0
   2841c:	blt	284a0 <__assert_fail@plt+0x171c8>
   28420:	cmn	r7, #1
   28424:	beq	28360 <__assert_fail@plt+0x17088>
   28428:	mov	r1, r7
   2842c:	mov	r0, #-2147483648	; 0x80000000
   28430:	bl	29adc <__assert_fail@plt+0x18804>
   28434:	cmp	r6, r0
   28438:	movle	r0, #0
   2843c:	movgt	r0, #1
   28440:	b	28358 <__assert_fail@plt+0x17080>
   28444:	cmp	r4, #0
   28448:	blt	284e0 <__assert_fail@plt+0x17208>
   2844c:	cmn	r7, #1
   28450:	beq	283c4 <__assert_fail@plt+0x170ec>
   28454:	str	r3, [sp, #4]
   28458:	mov	r1, r7
   2845c:	mov	r0, #-2147483648	; 0x80000000
   28460:	b	283a4 <__assert_fail@plt+0x170cc>
   28464:	mov	r4, fp
   28468:	b	28398 <__assert_fail@plt+0x170c0>
   2846c:	mov	r4, fp
   28470:	b	2844c <__assert_fail@plt+0x17174>
   28474:	cmn	r4, #1
   28478:	beq	283c4 <__assert_fail@plt+0x170ec>
   2847c:	mov	r1, r4
   28480:	mov	r0, #-2147483648	; 0x80000000
   28484:	str	r3, [sp, #4]
   28488:	bl	29adc <__assert_fail@plt+0x18804>
   2848c:	ldr	r3, [sp, #4]
   28490:	cmp	r7, r0
   28494:	movle	r0, #0
   28498:	movgt	r0, #1
   2849c:	b	283b8 <__assert_fail@plt+0x170e0>
   284a0:	mov	r1, r7
   284a4:	mvn	r0, #-2147483648	; 0x80000000
   284a8:	bl	29adc <__assert_fail@plt+0x18804>
   284ac:	cmp	r6, r0
   284b0:	movge	r0, #0
   284b4:	movlt	r0, #1
   284b8:	b	28358 <__assert_fail@plt+0x17080>
   284bc:	cmn	r6, #1
   284c0:	beq	28360 <__assert_fail@plt+0x17088>
   284c4:	mov	r1, r6
   284c8:	mov	r0, #-2147483648	; 0x80000000
   284cc:	bl	29adc <__assert_fail@plt+0x18804>
   284d0:	cmp	r7, r0
   284d4:	movle	r0, #0
   284d8:	movgt	r0, #1
   284dc:	b	28358 <__assert_fail@plt+0x17080>
   284e0:	mov	r1, r7
   284e4:	mvn	r0, #-2147483648	; 0x80000000
   284e8:	str	r3, [sp, #4]
   284ec:	bl	29adc <__assert_fail@plt+0x18804>
   284f0:	ldr	r3, [sp, #4]
   284f4:	cmp	r0, r4
   284f8:	movle	r0, #0
   284fc:	movgt	r0, #1
   28500:	b	283b8 <__assert_fail@plt+0x170e0>
   28504:	push	{r4, lr}
   28508:	mov	r1, #1
   2850c:	bl	2949c <__assert_fail@plt+0x181c4>
   28510:	cmp	r0, #0
   28514:	popne	{r4, pc}
   28518:	bl	28638 <__assert_fail@plt+0x17360>
   2851c:	push	{r4, lr}
   28520:	mov	r1, #1
   28524:	bl	2949c <__assert_fail@plt+0x181c4>
   28528:	cmp	r0, #0
   2852c:	popne	{r4, pc}
   28530:	bl	28638 <__assert_fail@plt+0x17360>
   28534:	push	{r4, lr}
   28538:	bl	2949c <__assert_fail@plt+0x181c4>
   2853c:	cmp	r0, #0
   28540:	popne	{r4, pc}
   28544:	bl	28638 <__assert_fail@plt+0x17360>
   28548:	push	{r4, lr}
   2854c:	bl	2949c <__assert_fail@plt+0x181c4>
   28550:	cmp	r0, #0
   28554:	popne	{r4, pc}
   28558:	bl	28638 <__assert_fail@plt+0x17360>
   2855c:	push	{r4, r5, r6, lr}
   28560:	mov	r6, r0
   28564:	mov	r0, r1
   28568:	mov	r4, r1
   2856c:	bl	294e4 <__assert_fail@plt+0x1820c>
   28570:	subs	r5, r0, #0
   28574:	beq	2858c <__assert_fail@plt+0x172b4>
   28578:	mov	r2, r4
   2857c:	mov	r1, r6
   28580:	bl	11068 <memcpy@plt>
   28584:	mov	r0, r5
   28588:	pop	{r4, r5, r6, pc}
   2858c:	bl	28638 <__assert_fail@plt+0x17360>
   28590:	push	{r4, r5, r6, lr}
   28594:	mov	r6, r0
   28598:	mov	r0, r1
   2859c:	mov	r4, r1
   285a0:	bl	294e4 <__assert_fail@plt+0x1820c>
   285a4:	subs	r5, r0, #0
   285a8:	beq	285c0 <__assert_fail@plt+0x172e8>
   285ac:	mov	r2, r4
   285b0:	mov	r1, r6
   285b4:	bl	11068 <memcpy@plt>
   285b8:	mov	r0, r5
   285bc:	pop	{r4, r5, r6, pc}
   285c0:	bl	28638 <__assert_fail@plt+0x17360>
   285c4:	push	{r4, r5, r6, lr}
   285c8:	mov	r6, r0
   285cc:	add	r0, r1, #1
   285d0:	mov	r4, r1
   285d4:	bl	294e4 <__assert_fail@plt+0x1820c>
   285d8:	subs	r5, r0, #0
   285dc:	beq	285fc <__assert_fail@plt+0x17324>
   285e0:	mov	r3, #0
   285e4:	mov	r1, r6
   285e8:	strb	r3, [r5, r4]
   285ec:	mov	r2, r4
   285f0:	bl	11068 <memcpy@plt>
   285f4:	mov	r0, r5
   285f8:	pop	{r4, r5, r6, pc}
   285fc:	bl	28638 <__assert_fail@plt+0x17360>
   28600:	push	{r4, r5, r6, lr}
   28604:	mov	r6, r0
   28608:	bl	111b8 <strlen@plt>
   2860c:	add	r4, r0, #1
   28610:	mov	r0, r4
   28614:	bl	294e4 <__assert_fail@plt+0x1820c>
   28618:	subs	r5, r0, #0
   2861c:	beq	28634 <__assert_fail@plt+0x1735c>
   28620:	mov	r2, r4
   28624:	mov	r1, r6
   28628:	bl	11068 <memcpy@plt>
   2862c:	mov	r0, r5
   28630:	pop	{r4, r5, r6, pc}
   28634:	bl	28638 <__assert_fail@plt+0x17360>
   28638:	ldr	r3, [pc, #44]	; 2866c <__assert_fail@plt+0x17394>
   2863c:	push	{r4, lr}
   28640:	mov	r2, #5
   28644:	ldr	r1, [pc, #36]	; 28670 <__assert_fail@plt+0x17398>
   28648:	mov	r0, #0
   2864c:	ldr	r4, [r3]
   28650:	bl	110c8 <dcgettext@plt>
   28654:	ldr	r2, [pc, #24]	; 28674 <__assert_fail@plt+0x1739c>
   28658:	mov	r1, #0
   2865c:	mov	r3, r0
   28660:	mov	r0, r4
   28664:	bl	11140 <error@plt>
   28668:	bl	112cc <abort@plt>
   2866c:	andeq	ip, r3, r0, ror r1
   28670:			; <UNDEFINED> instruction: 0x0002b2b0
   28674:	andeq	sl, r2, ip, lsl #19
   28678:	push	{r4, r5, r6, r7, lr}
   2867c:	sub	sp, sp, #20
   28680:	mov	r6, r2
   28684:	ldr	ip, [sp, #48]	; 0x30
   28688:	mov	r2, r1
   2868c:	mov	r7, r3
   28690:	str	ip, [sp]
   28694:	add	r3, sp, #8
   28698:	mov	r1, #0
   2869c:	mov	r5, r0
   286a0:	ldr	r4, [sp, #56]	; 0x38
   286a4:	bl	28908 <__assert_fail@plt+0x17630>
   286a8:	cmp	r0, #0
   286ac:	bne	28728 <__assert_fail@plt+0x17450>
   286b0:	ldrd	r0, [sp, #8]
   286b4:	cmp	r0, r6
   286b8:	sbcs	r3, r1, r7
   286bc:	ldrd	r6, [sp, #40]	; 0x28
   286c0:	movlt	r3, #1
   286c4:	movge	r3, #0
   286c8:	cmp	r6, r0
   286cc:	sbcs	r2, r7, r1
   286d0:	orrlt	r3, r3, #1
   286d4:	cmp	r3, #0
   286d8:	beq	28720 <__assert_fail@plt+0x17448>
   286dc:	cmp	r0, #1073741824	; 0x40000000
   286e0:	sbcs	r3, r1, #0
   286e4:	blt	28754 <__assert_fail@plt+0x1747c>
   286e8:	bl	111d0 <__errno_location@plt>
   286ec:	mov	r3, #75	; 0x4b
   286f0:	mov	r6, r3
   286f4:	str	r3, [r0]
   286f8:	cmp	r4, #0
   286fc:	moveq	r4, #1
   28700:	mov	r0, r5
   28704:	bl	16934 <__assert_fail@plt+0x565c>
   28708:	mov	r1, r6
   2870c:	ldr	r3, [sp, #52]	; 0x34
   28710:	ldr	r2, [pc, #164]	; 287bc <__assert_fail@plt+0x174e4>
   28714:	str	r0, [sp]
   28718:	mov	r0, r4
   2871c:	bl	11140 <error@plt>
   28720:	add	sp, sp, #20
   28724:	pop	{r4, r5, r6, r7, pc}
   28728:	cmp	r0, #1
   2872c:	beq	2877c <__assert_fail@plt+0x174a4>
   28730:	cmp	r0, #3
   28734:	beq	287ac <__assert_fail@plt+0x174d4>
   28738:	cmp	r4, #0
   2873c:	beq	2879c <__assert_fail@plt+0x174c4>
   28740:	bl	111d0 <__errno_location@plt>
   28744:	ldr	r6, [r0]
   28748:	cmp	r6, #22
   2874c:	moveq	r6, #0
   28750:	b	28700 <__assert_fail@plt+0x17428>
   28754:	mov	r2, #-1073741824	; 0xc0000000
   28758:	mvn	r3, #0
   2875c:	cmp	r0, r2
   28760:	sbcs	r3, r1, r3
   28764:	blt	286e8 <__assert_fail@plt+0x17410>
   28768:	bl	111d0 <__errno_location@plt>
   2876c:	mov	r3, #34	; 0x22
   28770:	mov	r6, r3
   28774:	str	r3, [r0]
   28778:	b	286f8 <__assert_fail@plt+0x17420>
   2877c:	bl	111d0 <__errno_location@plt>
   28780:	mov	r3, #75	; 0x4b
   28784:	mov	r6, r3
   28788:	str	r3, [r0]
   2878c:	cmp	r4, #0
   28790:	moveq	r4, #1
   28794:	bne	28748 <__assert_fail@plt+0x17470>
   28798:	b	28700 <__assert_fail@plt+0x17428>
   2879c:	bl	111d0 <__errno_location@plt>
   287a0:	mov	r4, #1
   287a4:	ldr	r6, [r0]
   287a8:	b	28748 <__assert_fail@plt+0x17470>
   287ac:	bl	111d0 <__errno_location@plt>
   287b0:	mov	r6, #0
   287b4:	str	r6, [r0]
   287b8:	b	2878c <__assert_fail@plt+0x174b4>
   287bc:	andeq	sl, r2, r8, lsr #24
   287c0:	push	{r4, r5, r6, r7, lr}
   287c4:	sub	sp, sp, #20
   287c8:	mov	r6, r2
   287cc:	ldr	r1, [sp, #48]	; 0x30
   287d0:	mov	r7, r3
   287d4:	str	r1, [sp]
   287d8:	add	r3, sp, #8
   287dc:	mov	r2, #10
   287e0:	mov	r1, #0
   287e4:	mov	r5, r0
   287e8:	ldr	r4, [sp, #56]	; 0x38
   287ec:	bl	28908 <__assert_fail@plt+0x17630>
   287f0:	cmp	r0, #0
   287f4:	bne	28870 <__assert_fail@plt+0x17598>
   287f8:	ldrd	r0, [sp, #8]
   287fc:	cmp	r0, r6
   28800:	sbcs	r3, r1, r7
   28804:	ldrd	r6, [sp, #40]	; 0x28
   28808:	movlt	r3, #1
   2880c:	movge	r3, #0
   28810:	cmp	r6, r0
   28814:	sbcs	r2, r7, r1
   28818:	orrlt	r3, r3, #1
   2881c:	cmp	r3, #0
   28820:	beq	28868 <__assert_fail@plt+0x17590>
   28824:	cmp	r0, #1073741824	; 0x40000000
   28828:	sbcs	r3, r1, #0
   2882c:	blt	2889c <__assert_fail@plt+0x175c4>
   28830:	bl	111d0 <__errno_location@plt>
   28834:	mov	r3, #75	; 0x4b
   28838:	mov	r6, r3
   2883c:	str	r3, [r0]
   28840:	cmp	r4, #0
   28844:	moveq	r4, #1
   28848:	mov	r0, r5
   2884c:	bl	16934 <__assert_fail@plt+0x565c>
   28850:	mov	r1, r6
   28854:	ldr	r3, [sp, #52]	; 0x34
   28858:	ldr	r2, [pc, #164]	; 28904 <__assert_fail@plt+0x1762c>
   2885c:	str	r0, [sp]
   28860:	mov	r0, r4
   28864:	bl	11140 <error@plt>
   28868:	add	sp, sp, #20
   2886c:	pop	{r4, r5, r6, r7, pc}
   28870:	cmp	r0, #1
   28874:	beq	288c4 <__assert_fail@plt+0x175ec>
   28878:	cmp	r0, #3
   2887c:	beq	288f4 <__assert_fail@plt+0x1761c>
   28880:	cmp	r4, #0
   28884:	beq	288e4 <__assert_fail@plt+0x1760c>
   28888:	bl	111d0 <__errno_location@plt>
   2888c:	ldr	r6, [r0]
   28890:	cmp	r6, #22
   28894:	moveq	r6, #0
   28898:	b	28848 <__assert_fail@plt+0x17570>
   2889c:	mov	r2, #-1073741824	; 0xc0000000
   288a0:	mvn	r3, #0
   288a4:	cmp	r0, r2
   288a8:	sbcs	r3, r1, r3
   288ac:	blt	28830 <__assert_fail@plt+0x17558>
   288b0:	bl	111d0 <__errno_location@plt>
   288b4:	mov	r3, #34	; 0x22
   288b8:	mov	r6, r3
   288bc:	str	r3, [r0]
   288c0:	b	28840 <__assert_fail@plt+0x17568>
   288c4:	bl	111d0 <__errno_location@plt>
   288c8:	mov	r3, #75	; 0x4b
   288cc:	mov	r6, r3
   288d0:	str	r3, [r0]
   288d4:	cmp	r4, #0
   288d8:	moveq	r4, #1
   288dc:	bne	28890 <__assert_fail@plt+0x175b8>
   288e0:	b	28848 <__assert_fail@plt+0x17570>
   288e4:	bl	111d0 <__errno_location@plt>
   288e8:	mov	r4, #1
   288ec:	ldr	r6, [r0]
   288f0:	b	28890 <__assert_fail@plt+0x175b8>
   288f4:	bl	111d0 <__errno_location@plt>
   288f8:	mov	r6, #0
   288fc:	str	r6, [r0]
   28900:	b	288d4 <__assert_fail@plt+0x175fc>
   28904:	andeq	sl, r2, r8, lsr #24
   28908:	cmp	r2, #36	; 0x24
   2890c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28910:	sub	sp, sp, #52	; 0x34
   28914:	bhi	29488 <__assert_fail@plt+0x181b0>
   28918:	cmp	r1, #0
   2891c:	mov	r5, r1
   28920:	mov	r6, r2
   28924:	addeq	r5, sp, #44	; 0x2c
   28928:	mov	sl, r0
   2892c:	mov	r9, r3
   28930:	bl	111d0 <__errno_location@plt>
   28934:	mov	r4, #0
   28938:	mov	r2, r6
   2893c:	mov	r3, r4
   28940:	mov	r1, r5
   28944:	str	r4, [r0]
   28948:	mov	fp, r0
   2894c:	mov	r0, sl
   28950:	bl	11290 <__strtoll_internal@plt>
   28954:	ldr	r8, [r5]
   28958:	cmp	sl, r8
   2895c:	mov	r6, r0
   28960:	mov	r7, r1
   28964:	beq	289b4 <__assert_fail@plt+0x176dc>
   28968:	ldr	r4, [fp]
   2896c:	cmp	r4, #0
   28970:	bne	2899c <__assert_fail@plt+0x176c4>
   28974:	ldr	r3, [sp, #88]	; 0x58
   28978:	cmp	r3, #0
   2897c:	beq	2898c <__assert_fail@plt+0x176b4>
   28980:	ldrb	sl, [r8]
   28984:	cmp	sl, #0
   28988:	bne	289e8 <__assert_fail@plt+0x17710>
   2898c:	strd	r6, [r9]
   28990:	mov	r0, r4
   28994:	add	sp, sp, #52	; 0x34
   28998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2899c:	cmp	r4, #34	; 0x22
   289a0:	beq	28c48 <__assert_fail@plt+0x17970>
   289a4:	mov	r4, #4
   289a8:	mov	r0, r4
   289ac:	add	sp, sp, #52	; 0x34
   289b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   289b4:	ldr	r3, [sp, #88]	; 0x58
   289b8:	cmp	r3, r4
   289bc:	beq	289a4 <__assert_fail@plt+0x176cc>
   289c0:	ldrb	sl, [sl]
   289c4:	cmp	sl, r4
   289c8:	beq	289a4 <__assert_fail@plt+0x176cc>
   289cc:	mov	r1, sl
   289d0:	mov	r0, r3
   289d4:	bl	111c4 <strchr@plt>
   289d8:	cmp	r0, r4
   289dc:	movne	r6, #1
   289e0:	movne	r7, #0
   289e4:	beq	289a4 <__assert_fail@plt+0x176cc>
   289e8:	mov	r1, sl
   289ec:	ldr	r0, [sp, #88]	; 0x58
   289f0:	bl	111c4 <strchr@plt>
   289f4:	cmp	r0, #0
   289f8:	beq	29000 <__assert_fail@plt+0x17d28>
   289fc:	sub	r3, sl, #69	; 0x45
   28a00:	cmp	r3, #47	; 0x2f
   28a04:	ldrls	pc, [pc, r3, lsl #2]
   28a08:	b	28acc <__assert_fail@plt+0x177f4>
   28a0c:	andeq	r8, r2, r4, ror #23
   28a10:	andeq	r8, r2, ip, asr #21
   28a14:	andeq	r8, r2, r4, ror #23
   28a18:	andeq	r8, r2, ip, asr #21
   28a1c:	andeq	r8, r2, ip, asr #21
   28a20:	andeq	r8, r2, ip, asr #21
   28a24:	andeq	r8, r2, r4, ror #23
   28a28:	andeq	r8, r2, ip, asr #21
   28a2c:	andeq	r8, r2, r4, ror #23
   28a30:	andeq	r8, r2, ip, asr #21
   28a34:	andeq	r8, r2, ip, asr #21
   28a38:	andeq	r8, r2, r4, ror #23
   28a3c:	andeq	r8, r2, ip, asr #21
   28a40:	andeq	r8, r2, ip, asr #21
   28a44:	andeq	r8, r2, ip, asr #21
   28a48:	andeq	r8, r2, r4, ror #23
   28a4c:	andeq	r8, r2, ip, asr #21
   28a50:	andeq	r8, r2, ip, asr #21
   28a54:	andeq	r8, r2, ip, asr #21
   28a58:	andeq	r8, r2, ip, asr #21
   28a5c:	andeq	r8, r2, r4, ror #23
   28a60:	andeq	r8, r2, r4, ror #23
   28a64:	andeq	r8, r2, ip, asr #21
   28a68:	andeq	r8, r2, ip, asr #21
   28a6c:	andeq	r8, r2, ip, asr #21
   28a70:	andeq	r8, r2, ip, asr #21
   28a74:	andeq	r8, r2, ip, asr #21
   28a78:	andeq	r8, r2, ip, asr #21
   28a7c:	andeq	r8, r2, ip, asr #21
   28a80:	andeq	r8, r2, ip, asr #21
   28a84:	andeq	r8, r2, ip, asr #21
   28a88:	andeq	r8, r2, ip, asr #21
   28a8c:	andeq	r8, r2, ip, asr #21
   28a90:	andeq	r8, r2, ip, asr #21
   28a94:	andeq	r8, r2, r4, ror #23
   28a98:	andeq	r8, r2, ip, asr #21
   28a9c:	andeq	r8, r2, ip, asr #21
   28aa0:	andeq	r8, r2, ip, asr #21
   28aa4:	andeq	r8, r2, r4, ror #23
   28aa8:	andeq	r8, r2, ip, asr #21
   28aac:	andeq	r8, r2, r4, ror #23
   28ab0:	andeq	r8, r2, ip, asr #21
   28ab4:	andeq	r8, r2, ip, asr #21
   28ab8:	andeq	r8, r2, ip, asr #21
   28abc:	andeq	r8, r2, ip, asr #21
   28ac0:	andeq	r8, r2, ip, asr #21
   28ac4:	andeq	r8, r2, ip, asr #21
   28ac8:	andeq	r8, r2, r4, ror #23
   28acc:	mov	r3, #1024	; 0x400
   28ad0:	str	r3, [sp, #12]
   28ad4:	mov	r3, #0
   28ad8:	str	r3, [sp, #8]
   28adc:	ldr	r3, [pc, #1292]	; 28ff0 <__assert_fail@plt+0x17d18>
   28ae0:	mvn	r2, #0
   28ae4:	strd	r2, [sp, #16]
   28ae8:	mov	r3, #0
   28aec:	mov	r2, #1024	; 0x400
   28af0:	strd	r2, [sp, #24]
   28af4:	mov	r3, #1
   28af8:	str	r3, [sp, #4]
   28afc:	sub	sl, sl, #66	; 0x42
   28b00:	cmp	sl, #53	; 0x35
   28b04:	ldrls	pc, [pc, sl, lsl #2]
   28b08:	b	29000 <__assert_fail@plt+0x17d28>
   28b0c:	andeq	r8, r2, r4, ror #30
   28b10:	andeq	r9, r2, r0
   28b14:	andeq	r9, r2, r0
   28b18:	andeq	r8, r2, r8, ror sp
   28b1c:	andeq	r9, r2, r0
   28b20:	andeq	r8, r2, r8, lsl sp
   28b24:	andeq	r9, r2, r0
   28b28:	andeq	r9, r2, r0
   28b2c:	andeq	r9, r2, r0
   28b30:	andeq	r9, r2, ip
   28b34:	andeq	r9, r2, r0
   28b38:			; <UNDEFINED> instruction: 0x00028cb8
   28b3c:	andeq	r9, r2, r0
   28b40:	andeq	r9, r2, r0
   28b44:	andeq	r8, r2, r8, lsl #29
   28b48:	andeq	r9, r2, r0
   28b4c:	andeq	r9, r2, r0
   28b50:	andeq	r9, r2, r0
   28b54:	andeq	r8, r2, r4, lsr lr
   28b58:	andeq	r9, r2, r0
   28b5c:	andeq	r9, r2, r0
   28b60:	andeq	r9, r2, r0
   28b64:	andeq	r9, r2, r0
   28b68:	ldrdeq	r8, [r2], -ip
   28b6c:	ldrdeq	r8, [r2], -ip
   28b70:	andeq	r9, r2, r0
   28b74:	andeq	r9, r2, r0
   28b78:	andeq	r9, r2, r0
   28b7c:	andeq	r9, r2, r0
   28b80:	andeq	r9, r2, r0
   28b84:	andeq	r9, r2, r0
   28b88:	andeq	r9, r2, r0
   28b8c:	andeq	r8, r2, ip, lsl #31
   28b90:	muleq	r2, r4, ip
   28b94:	andeq	r9, r2, r0
   28b98:	andeq	r9, r2, r0
   28b9c:	andeq	r9, r2, r0
   28ba0:	andeq	r8, r2, r8, lsl sp
   28ba4:	andeq	r9, r2, r0
   28ba8:	andeq	r9, r2, r0
   28bac:	andeq	r9, r2, r0
   28bb0:	andeq	r9, r2, ip
   28bb4:	andeq	r9, r2, r0
   28bb8:			; <UNDEFINED> instruction: 0x00028cb8
   28bbc:	andeq	r9, r2, r0
   28bc0:	andeq	r9, r2, r0
   28bc4:	andeq	r9, r2, r0
   28bc8:	andeq	r9, r2, r0
   28bcc:	andeq	r9, r2, r0
   28bd0:	andeq	r9, r2, r0
   28bd4:	andeq	r8, r2, r4, lsr lr
   28bd8:	andeq	r9, r2, r0
   28bdc:	andeq	r9, r2, r0
   28be0:	andeq	r8, r2, r0, asr #31
   28be4:	mov	r1, #48	; 0x30
   28be8:	ldr	r0, [sp, #88]	; 0x58
   28bec:	bl	111c4 <strchr@plt>
   28bf0:	cmp	r0, #0
   28bf4:	beq	29048 <__assert_fail@plt+0x17d70>
   28bf8:	ldrb	r3, [r8, #1]
   28bfc:	cmp	r3, #68	; 0x44
   28c00:	beq	28c14 <__assert_fail@plt+0x1793c>
   28c04:	cmp	r3, #105	; 0x69
   28c08:	beq	28c50 <__assert_fail@plt+0x17978>
   28c0c:	cmp	r3, #66	; 0x42
   28c10:	bne	28acc <__assert_fail@plt+0x177f4>
   28c14:	mov	r3, #1000	; 0x3e8
   28c18:	str	r3, [sp, #12]
   28c1c:	mov	r3, #0
   28c20:	str	r3, [sp, #8]
   28c24:	add	r3, pc, #956	; 0x3bc
   28c28:	ldrd	r2, [r3]
   28c2c:	strd	r2, [sp, #16]
   28c30:	mov	r3, #0
   28c34:	mov	r2, #1000	; 0x3e8
   28c38:	strd	r2, [sp, #24]
   28c3c:	mov	r3, #2
   28c40:	str	r3, [sp, #4]
   28c44:	b	28afc <__assert_fail@plt+0x17824>
   28c48:	mov	r4, #1
   28c4c:	b	28974 <__assert_fail@plt+0x1769c>
   28c50:	ldrb	r3, [r8, #2]
   28c54:	mvn	r2, #0
   28c58:	cmp	r3, #66	; 0x42
   28c5c:	mov	r3, #1024	; 0x400
   28c60:	str	r3, [sp, #12]
   28c64:	mov	r3, #0
   28c68:	str	r3, [sp, #8]
   28c6c:	ldr	r3, [pc, #892]	; 28ff0 <__assert_fail@plt+0x17d18>
   28c70:	strd	r2, [sp, #16]
   28c74:	mov	r3, #0
   28c78:	mov	r2, #1024	; 0x400
   28c7c:	strd	r2, [sp, #24]
   28c80:	moveq	r3, #3
   28c84:	streq	r3, [sp, #4]
   28c88:	movne	r3, #1
   28c8c:	strne	r3, [sp, #4]
   28c90:	b	28afc <__assert_fail@plt+0x17824>
   28c94:	mov	sl, #0
   28c98:	ldr	r2, [sp, #4]
   28c9c:	orr	r4, r4, sl
   28ca0:	add	r3, r8, r2
   28ca4:	str	r3, [r5]
   28ca8:	ldrb	r3, [r8, r2]
   28cac:	cmp	r3, #0
   28cb0:	orrne	r4, r4, #2
   28cb4:	b	2898c <__assert_fail@plt+0x176b4>
   28cb8:	mov	sl, #0
   28cbc:	mov	r3, r9
   28cc0:	mov	fp, #1
   28cc4:	mov	r9, r5
   28cc8:	mov	r5, r4
   28ccc:	mov	r4, sl
   28cd0:	mov	sl, r3
   28cd4:	cmp	r6, #0
   28cd8:	sbcs	r3, r7, #0
   28cdc:	blt	29404 <__assert_fail@plt+0x1812c>
   28ce0:	ldrd	r2, [sp, #16]
   28ce4:	cmp	r2, r6
   28ce8:	sbcs	r1, r3, r7
   28cec:	bge	29314 <__assert_fail@plt+0x1803c>
   28cf0:	sub	fp, fp, #1
   28cf4:	cmn	fp, #1
   28cf8:	mov	r4, #1
   28cfc:	mvn	r6, #0
   28d00:	mvn	r7, #-2147483648	; 0x80000000
   28d04:	bne	28ce4 <__assert_fail@plt+0x17a0c>
   28d08:	mov	r4, r5
   28d0c:	mov	r5, r9
   28d10:	mov	r9, sl
   28d14:	b	28f7c <__assert_fail@plt+0x17ca4>
   28d18:	mov	sl, #0
   28d1c:	str	r9, [sp, #32]
   28d20:	mov	r9, r5
   28d24:	mov	r5, r4
   28d28:	mov	r4, sl
   28d2c:	ldr	sl, [sp, #12]
   28d30:	mov	fp, #2
   28d34:	cmp	r6, #0
   28d38:	sbcs	r3, r7, #0
   28d3c:	blt	29350 <__assert_fail@plt+0x18078>
   28d40:	ldrd	r2, [sp, #16]
   28d44:	cmp	r2, r6
   28d48:	sbcs	r1, r3, r7
   28d4c:	bge	293b8 <__assert_fail@plt+0x180e0>
   28d50:	sub	fp, fp, #1
   28d54:	cmn	fp, #1
   28d58:	mvn	r6, #0
   28d5c:	mvn	r7, #-2147483648	; 0x80000000
   28d60:	mov	r4, #1
   28d64:	bne	28d44 <__assert_fail@plt+0x17a6c>
   28d68:	mov	r4, r5
   28d6c:	mov	r5, r9
   28d70:	ldr	r9, [sp, #32]
   28d74:	b	28f7c <__assert_fail@plt+0x17ca4>
   28d78:	mov	sl, #0
   28d7c:	str	r4, [sp, #32]
   28d80:	str	r9, [sp, #36]	; 0x24
   28d84:	mov	r4, sl
   28d88:	mov	r9, r5
   28d8c:	ldr	sl, [sp, #12]
   28d90:	ldr	r5, [sp, #8]
   28d94:	mov	fp, #5
   28d98:	cmp	r6, #0
   28d9c:	sbcs	r3, r7, #0
   28da0:	blt	291c4 <__assert_fail@plt+0x17eec>
   28da4:	ldrd	r2, [sp, #16]
   28da8:	cmp	r2, r6
   28dac:	sbcs	r1, r3, r7
   28db0:	bge	291fc <__assert_fail@plt+0x17f24>
   28db4:	sub	fp, fp, #1
   28db8:	cmn	fp, #1
   28dbc:	mvn	r6, #0
   28dc0:	mvn	r7, #-2147483648	; 0x80000000
   28dc4:	mov	r4, #1
   28dc8:	bne	28da8 <__assert_fail@plt+0x17ad0>
   28dcc:	mov	r5, r9
   28dd0:	ldr	r4, [sp, #32]
   28dd4:	ldr	r9, [sp, #36]	; 0x24
   28dd8:	b	28f7c <__assert_fail@plt+0x17ca4>
   28ddc:	mov	sl, #0
   28de0:	str	r4, [sp, #32]
   28de4:	str	r9, [sp, #36]	; 0x24
   28de8:	mov	r4, sl
   28dec:	mov	r9, r5
   28df0:	ldr	sl, [sp, #12]
   28df4:	ldr	r5, [sp, #8]
   28df8:	mov	fp, #6
   28dfc:	cmp	r6, #0
   28e00:	sbcs	r3, r7, #0
   28e04:	blt	29078 <__assert_fail@plt+0x17da0>
   28e08:	ldrd	r2, [sp, #16]
   28e0c:	cmp	r2, r6
   28e10:	sbcs	r1, r3, r7
   28e14:	bge	29058 <__assert_fail@plt+0x17d80>
   28e18:	sub	fp, fp, #1
   28e1c:	cmn	fp, #1
   28e20:	mov	r4, #1
   28e24:	mvn	r6, #0
   28e28:	mvn	r7, #-2147483648	; 0x80000000
   28e2c:	bne	28e0c <__assert_fail@plt+0x17b34>
   28e30:	b	28dcc <__assert_fail@plt+0x17af4>
   28e34:	mov	sl, #0
   28e38:	str	r9, [sp, #32]
   28e3c:	mov	r9, r5
   28e40:	mov	r5, r4
   28e44:	mov	r4, sl
   28e48:	ldr	sl, [sp, #12]
   28e4c:	mov	fp, #3
   28e50:	cmp	r6, #0
   28e54:	sbcs	r3, r7, #0
   28e58:	blt	29158 <__assert_fail@plt+0x17e80>
   28e5c:	ldrd	r2, [sp, #16]
   28e60:	cmp	r2, r6
   28e64:	sbcs	r1, r3, r7
   28e68:	bge	29190 <__assert_fail@plt+0x17eb8>
   28e6c:	sub	fp, fp, #1
   28e70:	cmn	fp, #1
   28e74:	mov	r4, #1
   28e78:	mvn	r6, #0
   28e7c:	mvn	r7, #-2147483648	; 0x80000000
   28e80:	bne	28e60 <__assert_fail@plt+0x17b88>
   28e84:	b	28d68 <__assert_fail@plt+0x17a90>
   28e88:	mov	sl, #0
   28e8c:	str	r9, [sp, #32]
   28e90:	mov	r9, r5
   28e94:	mov	r5, r4
   28e98:	mov	r4, sl
   28e9c:	ldr	sl, [sp, #12]
   28ea0:	mov	fp, #4
   28ea4:	cmp	r6, #0
   28ea8:	sbcs	r3, r7, #0
   28eac:	blt	292cc <__assert_fail@plt+0x17ff4>
   28eb0:	ldrd	r2, [sp, #16]
   28eb4:	cmp	r2, r6
   28eb8:	sbcs	r1, r3, r7
   28ebc:	bge	292a8 <__assert_fail@plt+0x17fd0>
   28ec0:	sub	fp, fp, #1
   28ec4:	cmn	fp, #1
   28ec8:	mvn	r6, #0
   28ecc:	mvn	r7, #-2147483648	; 0x80000000
   28ed0:	mov	r4, #1
   28ed4:	bne	28eb4 <__assert_fail@plt+0x17bdc>
   28ed8:	b	28d68 <__assert_fail@plt+0x17a90>
   28edc:	mov	sl, #0
   28ee0:	str	r4, [sp, #32]
   28ee4:	str	r9, [sp, #36]	; 0x24
   28ee8:	mov	r4, sl
   28eec:	mov	r9, r5
   28ef0:	ldr	sl, [sp, #12]
   28ef4:	ldr	r5, [sp, #8]
   28ef8:	mov	fp, #7
   28efc:	cmp	r6, #0
   28f00:	sbcs	r3, r7, #0
   28f04:	blt	2911c <__assert_fail@plt+0x17e44>
   28f08:	ldrd	r2, [sp, #16]
   28f0c:	b	28f28 <__assert_fail@plt+0x17c50>
   28f10:	sub	fp, fp, #1
   28f14:	cmn	fp, #1
   28f18:	mvn	r6, #0
   28f1c:	mvn	r7, #-2147483648	; 0x80000000
   28f20:	mov	r4, #1
   28f24:	beq	28dcc <__assert_fail@plt+0x17af4>
   28f28:	cmp	r2, r6
   28f2c:	sbcs	r1, r3, r7
   28f30:	blt	28f10 <__assert_fail@plt+0x17c38>
   28f34:	mul	r3, r6, r5
   28f38:	cmp	fp, #0
   28f3c:	mla	r3, sl, r7, r3
   28f40:	umull	r6, r7, r6, sl
   28f44:	sub	fp, fp, #1
   28f48:	add	r7, r3, r7
   28f4c:	bne	28efc <__assert_fail@plt+0x17c24>
   28f50:	mov	sl, r4
   28f54:	mov	r5, r9
   28f58:	ldr	r4, [sp, #32]
   28f5c:	ldr	r9, [sp, #36]	; 0x24
   28f60:	b	28c98 <__assert_fail@plt+0x179c0>
   28f64:	cmp	r6, #0
   28f68:	sbcs	r3, r7, #0
   28f6c:	blt	290cc <__assert_fail@plt+0x17df4>
   28f70:	cmp	r6, #0
   28f74:	sbcs	r3, r7, #2097152	; 0x200000
   28f78:	blt	29100 <__assert_fail@plt+0x17e28>
   28f7c:	mvn	r6, #0
   28f80:	mvn	r7, #-2147483648	; 0x80000000
   28f84:	mov	sl, #1
   28f88:	b	28c98 <__assert_fail@plt+0x179c0>
   28f8c:	cmp	r6, #0
   28f90:	sbcs	r3, r7, #0
   28f94:	blt	29270 <__assert_fail@plt+0x17f98>
   28f98:	cmp	r6, #0
   28f9c:	sbcs	r3, r7, #4194304	; 0x400000
   28fa0:	bge	28f7c <__assert_fail@plt+0x17ca4>
   28fa4:	lsl	r3, r7, #9
   28fa8:	orr	r3, r3, r6, lsr #23
   28fac:	lsl	r2, r6, #9
   28fb0:	mov	r6, r2
   28fb4:	mov	r7, r3
   28fb8:	mov	sl, #0
   28fbc:	b	28c98 <__assert_fail@plt+0x179c0>
   28fc0:	cmp	r6, #0
   28fc4:	sbcs	r3, r7, #0
   28fc8:	blt	29238 <__assert_fail@plt+0x17f60>
   28fcc:	cmp	r6, #0
   28fd0:	sbcs	r3, r7, #1073741824	; 0x40000000
   28fd4:	bge	28f7c <__assert_fail@plt+0x17ca4>
   28fd8:	adds	r6, r6, r6
   28fdc:	adc	r7, r7, r7
   28fe0:	mov	sl, #0
   28fe4:	b	28c98 <__assert_fail@plt+0x179c0>
   28fe8:	strbge	r5, [r3, #1015]!	; 0x3f7
   28fec:	mlaeq	r0, fp, r4, ip
   28ff0:			; <UNDEFINED> instruction: 0x001fffff
   28ff4:	andeq	fp, r2, r4, asr #5
   28ff8:	ldrdeq	fp, [r2], -r0
   28ffc:	andeq	fp, r2, r0, ror #5
   29000:	strd	r6, [r9]
   29004:	orr	r4, r4, #2
   29008:	b	28990 <__assert_fail@plt+0x176b8>
   2900c:	cmp	r6, #0
   29010:	sbcs	r3, r7, #0
   29014:	blt	2944c <__assert_fail@plt+0x18174>
   29018:	ldrd	r2, [sp, #16]
   2901c:	cmp	r2, r6
   29020:	sbcs	r3, r3, r7
   29024:	blt	28f7c <__assert_fail@plt+0x17ca4>
   29028:	ldr	r3, [sp, #8]
   2902c:	ldr	r2, [sp, #12]
   29030:	mov	sl, #0
   29034:	mul	r3, r6, r3
   29038:	mla	r3, r2, r7, r3
   2903c:	umull	r6, r7, r6, r2
   29040:	add	r7, r3, r7
   29044:	b	28c98 <__assert_fail@plt+0x179c0>
   29048:	mov	r3, #1024	; 0x400
   2904c:	str	r0, [sp, #8]
   29050:	str	r3, [sp, #12]
   29054:	b	28adc <__assert_fail@plt+0x17804>
   29058:	mul	r3, r6, r5
   2905c:	cmp	fp, #0
   29060:	mla	r3, sl, r7, r3
   29064:	umull	r6, r7, r6, sl
   29068:	sub	fp, fp, #1
   2906c:	add	r7, r3, r7
   29070:	bne	28dfc <__assert_fail@plt+0x17b24>
   29074:	b	28f50 <__assert_fail@plt+0x17c78>
   29078:	mvn	r3, #0
   2907c:	mvn	r2, #0
   29080:	cmp	r7, r3
   29084:	cmpeq	r6, r2
   29088:	beq	29058 <__assert_fail@plt+0x17d80>
   2908c:	mov	r2, r6
   29090:	mov	r3, r7
   29094:	mov	r0, #0
   29098:	mov	r1, #-2147483648	; 0x80000000
   2909c:	bl	29d1c <__assert_fail@plt+0x18a44>
   290a0:	ldrd	r2, [sp, #24]
   290a4:	cmp	r0, r2
   290a8:	sbcs	r3, r1, r3
   290ac:	bge	29058 <__assert_fail@plt+0x17d80>
   290b0:	mov	r5, r9
   290b4:	ldr	r4, [sp, #32]
   290b8:	ldr	r9, [sp, #36]	; 0x24
   290bc:	mov	r6, #0
   290c0:	mov	r7, #-2147483648	; 0x80000000
   290c4:	mov	sl, #1
   290c8:	b	28c98 <__assert_fail@plt+0x179c0>
   290cc:	mvn	r3, #0
   290d0:	mvn	r2, #0
   290d4:	cmp	r7, r3
   290d8:	cmpeq	r6, r2
   290dc:	beq	29100 <__assert_fail@plt+0x17e28>
   290e0:	mov	r3, r7
   290e4:	mov	r2, r6
   290e8:	mov	r0, #0
   290ec:	mov	r1, #-2147483648	; 0x80000000
   290f0:	bl	29d1c <__assert_fail@plt+0x18a44>
   290f4:	cmp	r0, #1024	; 0x400
   290f8:	sbcs	r3, r1, #0
   290fc:	blt	290bc <__assert_fail@plt+0x17de4>
   29100:	lsl	r3, r7, #10
   29104:	orr	r3, r3, r6, lsr #22
   29108:	lsl	r2, r6, #10
   2910c:	mov	r6, r2
   29110:	mov	r7, r3
   29114:	mov	sl, #0
   29118:	b	28c98 <__assert_fail@plt+0x179c0>
   2911c:	mvn	r3, #0
   29120:	mvn	r2, #0
   29124:	cmp	r7, r3
   29128:	cmpeq	r6, r2
   2912c:	beq	28f34 <__assert_fail@plt+0x17c5c>
   29130:	mov	r2, r6
   29134:	mov	r3, r7
   29138:	mov	r0, #0
   2913c:	mov	r1, #-2147483648	; 0x80000000
   29140:	bl	29d1c <__assert_fail@plt+0x18a44>
   29144:	ldrd	r2, [sp, #24]
   29148:	cmp	r0, r2
   2914c:	sbcs	r3, r1, r3
   29150:	bge	28f34 <__assert_fail@plt+0x17c5c>
   29154:	b	290b0 <__assert_fail@plt+0x17dd8>
   29158:	mvn	r3, #0
   2915c:	mvn	r2, #0
   29160:	cmp	r7, r3
   29164:	cmpeq	r6, r2
   29168:	beq	29190 <__assert_fail@plt+0x17eb8>
   2916c:	mov	r2, r6
   29170:	mov	r3, r7
   29174:	mov	r0, #0
   29178:	mov	r1, #-2147483648	; 0x80000000
   2917c:	bl	29d1c <__assert_fail@plt+0x18a44>
   29180:	ldrd	r2, [sp, #24]
   29184:	cmp	r0, r2
   29188:	sbcs	r3, r1, r3
   2918c:	blt	29304 <__assert_fail@plt+0x1802c>
   29190:	ldr	r3, [sp, #8]
   29194:	cmp	fp, #0
   29198:	sub	fp, fp, #1
   2919c:	mul	r3, r6, r3
   291a0:	mla	r3, sl, r7, r3
   291a4:	umull	r6, r7, r6, sl
   291a8:	add	r7, r3, r7
   291ac:	bne	28e50 <__assert_fail@plt+0x17b78>
   291b0:	mov	sl, r4
   291b4:	mov	r4, r5
   291b8:	mov	r5, r9
   291bc:	ldr	r9, [sp, #32]
   291c0:	b	28c98 <__assert_fail@plt+0x179c0>
   291c4:	mvn	r3, #0
   291c8:	mvn	r2, #0
   291cc:	cmp	r7, r3
   291d0:	cmpeq	r6, r2
   291d4:	beq	291fc <__assert_fail@plt+0x17f24>
   291d8:	mov	r2, r6
   291dc:	mov	r3, r7
   291e0:	mov	r0, #0
   291e4:	mov	r1, #-2147483648	; 0x80000000
   291e8:	bl	29d1c <__assert_fail@plt+0x18a44>
   291ec:	ldrd	r2, [sp, #24]
   291f0:	cmp	r0, r2
   291f4:	sbcs	r3, r1, r3
   291f8:	blt	2921c <__assert_fail@plt+0x17f44>
   291fc:	mul	r3, r6, r5
   29200:	cmp	fp, #0
   29204:	mla	r3, sl, r7, r3
   29208:	umull	r6, r7, r6, sl
   2920c:	sub	fp, fp, #1
   29210:	add	r7, r3, r7
   29214:	bne	28d98 <__assert_fail@plt+0x17ac0>
   29218:	b	28f50 <__assert_fail@plt+0x17c78>
   2921c:	sub	fp, fp, #1
   29220:	cmn	fp, #1
   29224:	mov	r6, #0
   29228:	mov	r7, #-2147483648	; 0x80000000
   2922c:	mov	r4, #1
   29230:	bne	291d8 <__assert_fail@plt+0x17f00>
   29234:	b	290b0 <__assert_fail@plt+0x17dd8>
   29238:	mvn	r3, #0
   2923c:	mvn	r2, #0
   29240:	cmp	r7, r3
   29244:	cmpeq	r6, r2
   29248:	beq	28fd8 <__assert_fail@plt+0x17d00>
   2924c:	mov	r2, r6
   29250:	mov	r3, r7
   29254:	mov	r0, #0
   29258:	mov	r1, #-2147483648	; 0x80000000
   2925c:	bl	29d1c <__assert_fail@plt+0x18a44>
   29260:	cmp	r1, #0
   29264:	cmpeq	r0, #1
   29268:	beq	290bc <__assert_fail@plt+0x17de4>
   2926c:	b	28fd8 <__assert_fail@plt+0x17d00>
   29270:	mvn	r3, #0
   29274:	mvn	r2, #0
   29278:	cmp	r7, r3
   2927c:	cmpeq	r6, r2
   29280:	beq	28fa4 <__assert_fail@plt+0x17ccc>
   29284:	mov	r3, r7
   29288:	mov	r2, r6
   2928c:	mov	r0, #0
   29290:	mov	r1, #-2147483648	; 0x80000000
   29294:	bl	29d1c <__assert_fail@plt+0x18a44>
   29298:	cmp	r0, #512	; 0x200
   2929c:	sbcs	r3, r1, #0
   292a0:	blt	290bc <__assert_fail@plt+0x17de4>
   292a4:	b	28fa4 <__assert_fail@plt+0x17ccc>
   292a8:	ldr	r3, [sp, #8]
   292ac:	cmp	fp, #0
   292b0:	sub	fp, fp, #1
   292b4:	mul	r3, r6, r3
   292b8:	mla	r3, sl, r7, r3
   292bc:	umull	r6, r7, r6, sl
   292c0:	add	r7, r3, r7
   292c4:	bne	28ea4 <__assert_fail@plt+0x17bcc>
   292c8:	b	291b0 <__assert_fail@plt+0x17ed8>
   292cc:	mvn	r3, #0
   292d0:	mvn	r2, #0
   292d4:	cmp	r7, r3
   292d8:	cmpeq	r6, r2
   292dc:	beq	292a8 <__assert_fail@plt+0x17fd0>
   292e0:	mov	r2, r6
   292e4:	mov	r3, r7
   292e8:	mov	r0, #0
   292ec:	mov	r1, #-2147483648	; 0x80000000
   292f0:	bl	29d1c <__assert_fail@plt+0x18a44>
   292f4:	ldrd	r2, [sp, #24]
   292f8:	cmp	r0, r2
   292fc:	sbcs	r3, r1, r3
   29300:	bge	292a8 <__assert_fail@plt+0x17fd0>
   29304:	mov	r4, r5
   29308:	mov	r5, r9
   2930c:	ldr	r9, [sp, #32]
   29310:	b	290bc <__assert_fail@plt+0x17de4>
   29314:	ldr	r3, [sp, #8]
   29318:	ldr	r2, [sp, #12]
   2931c:	cmp	fp, #0
   29320:	mul	r3, r6, r3
   29324:	sub	fp, fp, #1
   29328:	mla	r3, r2, r7, r3
   2932c:	umull	r6, r7, r6, r2
   29330:	add	r7, r3, r7
   29334:	bne	28cd4 <__assert_fail@plt+0x179fc>
   29338:	mov	r3, sl
   2933c:	mov	sl, r4
   29340:	mov	r4, r5
   29344:	mov	r5, r9
   29348:	mov	r9, r3
   2934c:	b	28c98 <__assert_fail@plt+0x179c0>
   29350:	mvn	r3, #0
   29354:	mvn	r2, #0
   29358:	cmp	r7, r3
   2935c:	cmpeq	r6, r2
   29360:	beq	293b8 <__assert_fail@plt+0x180e0>
   29364:	mov	r3, sl
   29368:	mov	sl, r9
   2936c:	mov	r9, r5
   29370:	mov	r5, r4
   29374:	mov	r4, fp
   29378:	mov	fp, r3
   2937c:	mov	r2, r6
   29380:	mov	r3, r7
   29384:	mov	r0, #0
   29388:	mov	r1, #-2147483648	; 0x80000000
   2938c:	bl	29d1c <__assert_fail@plt+0x18a44>
   29390:	ldrd	r2, [sp, #24]
   29394:	cmp	r0, r2
   29398:	sbcs	r3, r1, r3
   2939c:	blt	293dc <__assert_fail@plt+0x18104>
   293a0:	mov	r3, fp
   293a4:	mov	fp, r4
   293a8:	mov	r4, r5
   293ac:	mov	r5, r9
   293b0:	mov	r9, sl
   293b4:	mov	sl, r3
   293b8:	ldr	r3, [sp, #8]
   293bc:	cmp	fp, #0
   293c0:	sub	fp, fp, #1
   293c4:	mul	r3, r6, r3
   293c8:	mla	r3, sl, r7, r3
   293cc:	umull	r6, r7, r6, sl
   293d0:	add	r7, r3, r7
   293d4:	bne	28d34 <__assert_fail@plt+0x17a5c>
   293d8:	b	291b0 <__assert_fail@plt+0x17ed8>
   293dc:	sub	r4, r4, #1
   293e0:	cmn	r4, #1
   293e4:	mov	r6, #0
   293e8:	mov	r7, #-2147483648	; 0x80000000
   293ec:	mov	r5, #1
   293f0:	bne	2937c <__assert_fail@plt+0x180a4>
   293f4:	mov	r4, r9
   293f8:	mov	r5, sl
   293fc:	ldr	r9, [sp, #32]
   29400:	b	290bc <__assert_fail@plt+0x17de4>
   29404:	mvn	r3, #0
   29408:	mvn	r2, #0
   2940c:	cmp	r7, r3
   29410:	cmpeq	r6, r2
   29414:	beq	29314 <__assert_fail@plt+0x1803c>
   29418:	mov	r2, r6
   2941c:	mov	r3, r7
   29420:	mov	r0, #0
   29424:	mov	r1, #-2147483648	; 0x80000000
   29428:	bl	29d1c <__assert_fail@plt+0x18a44>
   2942c:	ldrd	r2, [sp, #24]
   29430:	cmp	r0, r2
   29434:	sbcs	r3, r1, r3
   29438:	bge	29314 <__assert_fail@plt+0x1803c>
   2943c:	mov	r4, r5
   29440:	mov	r5, r9
   29444:	mov	r9, sl
   29448:	b	290bc <__assert_fail@plt+0x17de4>
   2944c:	mvn	r3, #0
   29450:	mvn	r2, #0
   29454:	cmp	r7, r3
   29458:	cmpeq	r6, r2
   2945c:	beq	29028 <__assert_fail@plt+0x17d50>
   29460:	mov	r2, r6
   29464:	mov	r3, r7
   29468:	mov	r0, #0
   2946c:	mov	r1, #-2147483648	; 0x80000000
   29470:	bl	29d1c <__assert_fail@plt+0x18a44>
   29474:	ldrd	r2, [sp, #24]
   29478:	cmp	r0, r2
   2947c:	sbcs	r3, r1, r3
   29480:	blt	290bc <__assert_fail@plt+0x17de4>
   29484:	b	29028 <__assert_fail@plt+0x17d50>
   29488:	ldr	r3, [pc, #-1180]	; 28ff4 <__assert_fail@plt+0x17d1c>
   2948c:	mov	r2, #85	; 0x55
   29490:	ldr	r1, [pc, #-1184]	; 28ff8 <__assert_fail@plt+0x17d20>
   29494:	ldr	r0, [pc, #-1184]	; 28ffc <__assert_fail@plt+0x17d24>
   29498:	bl	112d8 <__assert_fail@plt>
   2949c:	cmp	r1, #0
   294a0:	cmpne	r0, #0
   294a4:	moveq	r1, #1
   294a8:	moveq	r0, r1
   294ac:	umull	r2, r3, r0, r1
   294b0:	adds	r3, r3, #0
   294b4:	movne	r3, #1
   294b8:	cmp	r2, #0
   294bc:	blt	294cc <__assert_fail@plt+0x181f4>
   294c0:	cmp	r3, #0
   294c4:	bne	294cc <__assert_fail@plt+0x181f4>
   294c8:	b	10fc0 <calloc@plt>
   294cc:	push	{r4, lr}
   294d0:	bl	111d0 <__errno_location@plt>
   294d4:	mov	r3, #12
   294d8:	str	r3, [r0]
   294dc:	mov	r0, #0
   294e0:	pop	{r4, pc}
   294e4:	cmp	r0, #0
   294e8:	moveq	r0, #1
   294ec:	cmp	r0, #0
   294f0:	blt	294f8 <__assert_fail@plt+0x18220>
   294f4:	b	1114c <malloc@plt>
   294f8:	push	{r4, lr}
   294fc:	bl	111d0 <__errno_location@plt>
   29500:	mov	r3, #12
   29504:	str	r3, [r0]
   29508:	mov	r0, #0
   2950c:	pop	{r4, pc}
   29510:	cmp	r0, #0
   29514:	beq	29538 <__assert_fail@plt+0x18260>
   29518:	cmp	r1, #0
   2951c:	push	{lr}		; (str lr, [sp, #-4]!)
   29520:	sub	sp, sp, #12
   29524:	beq	29540 <__assert_fail@plt+0x18268>
   29528:	blt	29558 <__assert_fail@plt+0x18280>
   2952c:	add	sp, sp, #12
   29530:	pop	{lr}		; (ldr lr, [sp], #4)
   29534:	b	110d4 <realloc@plt>
   29538:	mov	r0, r1
   2953c:	b	294e4 <__assert_fail@plt+0x1820c>
   29540:	str	r1, [sp, #4]
   29544:	bl	296b0 <__assert_fail@plt+0x183d8>
   29548:	ldr	r3, [sp, #4]
   2954c:	mov	r0, r3
   29550:	add	sp, sp, #12
   29554:	pop	{pc}		; (ldr pc, [sp], #4)
   29558:	bl	111d0 <__errno_location@plt>
   2955c:	mov	r2, #12
   29560:	mov	r3, #0
   29564:	str	r2, [r0]
   29568:	b	2954c <__assert_fail@plt+0x18274>
   2956c:	push	{r4, r5, r6, lr}
   29570:	mov	r4, r0
   29574:	bl	11128 <__fpending@plt>
   29578:	ldr	r5, [r4]
   2957c:	and	r5, r5, #32
   29580:	mov	r6, r0
   29584:	mov	r0, r4
   29588:	bl	12688 <__assert_fail@plt+0x13b0>
   2958c:	cmp	r5, #0
   29590:	mov	r4, r0
   29594:	bne	295b4 <__assert_fail@plt+0x182dc>
   29598:	cmp	r0, #0
   2959c:	beq	295ac <__assert_fail@plt+0x182d4>
   295a0:	cmp	r6, #0
   295a4:	beq	295d0 <__assert_fail@plt+0x182f8>
   295a8:	mvn	r4, #0
   295ac:	mov	r0, r4
   295b0:	pop	{r4, r5, r6, pc}
   295b4:	cmp	r0, #0
   295b8:	bne	295a8 <__assert_fail@plt+0x182d0>
   295bc:	bl	111d0 <__errno_location@plt>
   295c0:	str	r4, [r0]
   295c4:	mvn	r4, #0
   295c8:	mov	r0, r4
   295cc:	pop	{r4, r5, r6, pc}
   295d0:	bl	111d0 <__errno_location@plt>
   295d4:	ldr	r4, [r0]
   295d8:	subs	r4, r4, #9
   295dc:	mvnne	r4, #0
   295e0:	mov	r0, r4
   295e4:	pop	{r4, r5, r6, pc}
   295e8:	ldr	ip, [r0, #4]
   295ec:	cmp	ip, r1
   295f0:	bcs	2966c <__assert_fail@plt+0x18394>
   295f4:	cmp	r3, #0
   295f8:	push	{r4, r5, r6, r7, r8, lr}
   295fc:	mov	r6, r3
   29600:	mov	r7, r2
   29604:	mov	r5, r1
   29608:	mov	r4, r0
   2960c:	bne	29640 <__assert_fail@plt+0x18368>
   29610:	ldr	r0, [r4, #8]
   29614:	mul	r1, r6, r5
   29618:	cmp	r0, r7
   2961c:	beq	2967c <__assert_fail@plt+0x183a4>
   29620:	bl	29510 <__assert_fail@plt+0x18238>
   29624:	subs	r7, r0, #0
   29628:	beq	296a8 <__assert_fail@plt+0x183d0>
   2962c:	mov	r3, #1
   29630:	stmib	r4, {r5, r7}
   29634:	str	r5, [r4]
   29638:	mov	r0, r3
   2963c:	pop	{r4, r5, r6, r7, r8, pc}
   29640:	mov	r1, r3
   29644:	mvn	r0, #0
   29648:	bl	298d0 <__assert_fail@plt+0x185f8>
   2964c:	cmp	r5, r0
   29650:	bls	29610 <__assert_fail@plt+0x18338>
   29654:	bl	111d0 <__errno_location@plt>
   29658:	mov	r3, #0
   2965c:	mov	r2, #12
   29660:	str	r2, [r0]
   29664:	mov	r0, r3
   29668:	pop	{r4, r5, r6, r7, r8, pc}
   2966c:	mov	r3, #1
   29670:	str	r1, [r0]
   29674:	mov	r0, r3
   29678:	bx	lr
   2967c:	mov	r0, r1
   29680:	bl	294e4 <__assert_fail@plt+0x1820c>
   29684:	subs	r7, r0, #0
   29688:	beq	296a8 <__assert_fail@plt+0x183d0>
   2968c:	ldr	r1, [r4, #8]
   29690:	cmp	r1, #0
   29694:	beq	2962c <__assert_fail@plt+0x18354>
   29698:	ldr	r2, [r4]
   2969c:	mul	r2, r2, r6
   296a0:	bl	11068 <memcpy@plt>
   296a4:	b	2962c <__assert_fail@plt+0x18354>
   296a8:	mov	r3, #0
   296ac:	b	29638 <__assert_fail@plt+0x18360>
   296b0:	push	{r4, r5, lr}
   296b4:	sub	sp, sp, #12
   296b8:	mov	r5, r0
   296bc:	bl	111d0 <__errno_location@plt>
   296c0:	mov	r2, #0
   296c4:	mov	r4, r0
   296c8:	ldr	r3, [r0]
   296cc:	str	r2, [r4]
   296d0:	mov	r0, r5
   296d4:	str	r3, [sp]
   296d8:	str	r3, [sp, #4]
   296dc:	bl	11044 <free@plt>
   296e0:	ldr	r3, [r4]
   296e4:	add	r2, sp, #8
   296e8:	cmp	r3, #0
   296ec:	moveq	r3, #4
   296f0:	movne	r3, #0
   296f4:	add	r3, r2, r3
   296f8:	ldr	r3, [r3, #-8]
   296fc:	str	r3, [r4]
   29700:	add	sp, sp, #12
   29704:	pop	{r4, r5, pc}
   29708:	push	{r4, lr}
   2970c:	mov	r0, #14
   29710:	bl	11278 <nl_langinfo@plt>
   29714:	cmp	r0, #0
   29718:	beq	29730 <__assert_fail@plt+0x18458>
   2971c:	ldrb	r2, [r0]
   29720:	ldr	r3, [pc, #16]	; 29738 <__assert_fail@plt+0x18460>
   29724:	cmp	r2, #0
   29728:	moveq	r0, r3
   2972c:	pop	{r4, pc}
   29730:	ldr	r0, [pc]	; 29738 <__assert_fail@plt+0x18460>
   29734:	pop	{r4, pc}
   29738:	andeq	fp, r2, r8, lsl #6
   2973c:	push	{r4, r5, r6, r7, lr}
   29740:	subs	r6, r0, #0
   29744:	sub	sp, sp, #12
   29748:	addeq	r6, sp, #4
   2974c:	mov	r0, r6
   29750:	mov	r5, r2
   29754:	mov	r7, r1
   29758:	bl	11134 <mbrtowc@plt>
   2975c:	cmp	r5, #0
   29760:	cmnne	r0, #3
   29764:	mov	r4, r0
   29768:	bls	29784 <__assert_fail@plt+0x184ac>
   2976c:	mov	r0, #0
   29770:	bl	297dc <__assert_fail@plt+0x18504>
   29774:	cmp	r0, #0
   29778:	moveq	r4, #1
   2977c:	ldrbeq	r3, [r7]
   29780:	streq	r3, [r6]
   29784:	mov	r0, r4
   29788:	add	sp, sp, #12
   2978c:	pop	{r4, r5, r6, r7, pc}
   29790:	push	{r4, r5, r6, lr}
   29794:	subs	r4, r2, #0
   29798:	mov	r6, r0
   2979c:	mov	r5, r1
   297a0:	beq	297cc <__assert_fail@plt+0x184f4>
   297a4:	mov	r1, r4
   297a8:	mvn	r0, #0
   297ac:	bl	298d0 <__assert_fail@plt+0x185f8>
   297b0:	cmp	r0, r5
   297b4:	bcs	297cc <__assert_fail@plt+0x184f4>
   297b8:	bl	111d0 <__errno_location@plt>
   297bc:	mov	r3, #12
   297c0:	str	r3, [r0]
   297c4:	mov	r0, #0
   297c8:	pop	{r4, r5, r6, pc}
   297cc:	mul	r1, r5, r4
   297d0:	mov	r0, r6
   297d4:	pop	{r4, r5, r6, lr}
   297d8:	b	29510 <__assert_fail@plt+0x18238>
   297dc:	push	{lr}		; (str lr, [sp, #-4]!)
   297e0:	sub	sp, sp, #268	; 0x10c
   297e4:	add	r1, sp, #4
   297e8:	ldr	r2, [pc, #60]	; 2982c <__assert_fail@plt+0x18554>
   297ec:	bl	29838 <__assert_fail@plt+0x18560>
   297f0:	cmp	r0, #0
   297f4:	movne	r0, #0
   297f8:	bne	29824 <__assert_fail@plt+0x1854c>
   297fc:	ldr	r1, [pc, #44]	; 29830 <__assert_fail@plt+0x18558>
   29800:	add	r0, sp, #4
   29804:	bl	11008 <strcmp@plt>
   29808:	cmp	r0, #0
   2980c:	beq	29824 <__assert_fail@plt+0x1854c>
   29810:	add	r0, sp, #4
   29814:	ldr	r1, [pc, #24]	; 29834 <__assert_fail@plt+0x1855c>
   29818:	bl	11008 <strcmp@plt>
   2981c:	adds	r0, r0, #0
   29820:	movne	r0, #1
   29824:	add	sp, sp, #268	; 0x10c
   29828:	pop	{pc}		; (ldr pc, [sp], #4)
   2982c:	andeq	r0, r0, r1, lsl #2
   29830:	andeq	fp, r2, r0, lsl r3
   29834:	andeq	fp, r2, r4, lsl r3
   29838:	push	{r4, r5, r6, lr}
   2983c:	mov	r5, r1
   29840:	mov	r1, #0
   29844:	mov	r4, r2
   29848:	bl	11260 <setlocale@plt>
   2984c:	subs	r6, r0, #0
   29850:	beq	298ac <__assert_fail@plt+0x185d4>
   29854:	bl	111b8 <strlen@plt>
   29858:	cmp	r4, r0
   2985c:	bhi	29894 <__assert_fail@plt+0x185bc>
   29860:	cmp	r4, #0
   29864:	bne	29870 <__assert_fail@plt+0x18598>
   29868:	mov	r0, #34	; 0x22
   2986c:	pop	{r4, r5, r6, pc}
   29870:	sub	r4, r4, #1
   29874:	mov	r1, r6
   29878:	mov	r2, r4
   2987c:	mov	r0, r5
   29880:	bl	11068 <memcpy@plt>
   29884:	mov	r3, #0
   29888:	strb	r3, [r5, r4]
   2988c:	mov	r0, #34	; 0x22
   29890:	pop	{r4, r5, r6, pc}
   29894:	add	r2, r0, #1
   29898:	mov	r1, r6
   2989c:	mov	r0, r5
   298a0:	bl	11068 <memcpy@plt>
   298a4:	mov	r0, #0
   298a8:	pop	{r4, r5, r6, pc}
   298ac:	cmp	r4, #0
   298b0:	beq	298c0 <__assert_fail@plt+0x185e8>
   298b4:	strb	r6, [r5]
   298b8:	mov	r0, #22
   298bc:	pop	{r4, r5, r6, pc}
   298c0:	mov	r0, #22
   298c4:	pop	{r4, r5, r6, pc}
   298c8:	mov	r1, #0
   298cc:	b	11260 <setlocale@plt>
   298d0:	subs	r2, r1, #1
   298d4:	bxeq	lr
   298d8:	bcc	29ab0 <__assert_fail@plt+0x187d8>
   298dc:	cmp	r0, r1
   298e0:	bls	29a94 <__assert_fail@plt+0x187bc>
   298e4:	tst	r1, r2
   298e8:	beq	29aa0 <__assert_fail@plt+0x187c8>
   298ec:	clz	r3, r0
   298f0:	clz	r2, r1
   298f4:	sub	r3, r2, r3
   298f8:	rsbs	r3, r3, #31
   298fc:	addne	r3, r3, r3, lsl #1
   29900:	mov	r2, #0
   29904:	addne	pc, pc, r3, lsl #2
   29908:	nop			; (mov r0, r0)
   2990c:	cmp	r0, r1, lsl #31
   29910:	adc	r2, r2, r2
   29914:	subcs	r0, r0, r1, lsl #31
   29918:	cmp	r0, r1, lsl #30
   2991c:	adc	r2, r2, r2
   29920:	subcs	r0, r0, r1, lsl #30
   29924:	cmp	r0, r1, lsl #29
   29928:	adc	r2, r2, r2
   2992c:	subcs	r0, r0, r1, lsl #29
   29930:	cmp	r0, r1, lsl #28
   29934:	adc	r2, r2, r2
   29938:	subcs	r0, r0, r1, lsl #28
   2993c:	cmp	r0, r1, lsl #27
   29940:	adc	r2, r2, r2
   29944:	subcs	r0, r0, r1, lsl #27
   29948:	cmp	r0, r1, lsl #26
   2994c:	adc	r2, r2, r2
   29950:	subcs	r0, r0, r1, lsl #26
   29954:	cmp	r0, r1, lsl #25
   29958:	adc	r2, r2, r2
   2995c:	subcs	r0, r0, r1, lsl #25
   29960:	cmp	r0, r1, lsl #24
   29964:	adc	r2, r2, r2
   29968:	subcs	r0, r0, r1, lsl #24
   2996c:	cmp	r0, r1, lsl #23
   29970:	adc	r2, r2, r2
   29974:	subcs	r0, r0, r1, lsl #23
   29978:	cmp	r0, r1, lsl #22
   2997c:	adc	r2, r2, r2
   29980:	subcs	r0, r0, r1, lsl #22
   29984:	cmp	r0, r1, lsl #21
   29988:	adc	r2, r2, r2
   2998c:	subcs	r0, r0, r1, lsl #21
   29990:	cmp	r0, r1, lsl #20
   29994:	adc	r2, r2, r2
   29998:	subcs	r0, r0, r1, lsl #20
   2999c:	cmp	r0, r1, lsl #19
   299a0:	adc	r2, r2, r2
   299a4:	subcs	r0, r0, r1, lsl #19
   299a8:	cmp	r0, r1, lsl #18
   299ac:	adc	r2, r2, r2
   299b0:	subcs	r0, r0, r1, lsl #18
   299b4:	cmp	r0, r1, lsl #17
   299b8:	adc	r2, r2, r2
   299bc:	subcs	r0, r0, r1, lsl #17
   299c0:	cmp	r0, r1, lsl #16
   299c4:	adc	r2, r2, r2
   299c8:	subcs	r0, r0, r1, lsl #16
   299cc:	cmp	r0, r1, lsl #15
   299d0:	adc	r2, r2, r2
   299d4:	subcs	r0, r0, r1, lsl #15
   299d8:	cmp	r0, r1, lsl #14
   299dc:	adc	r2, r2, r2
   299e0:	subcs	r0, r0, r1, lsl #14
   299e4:	cmp	r0, r1, lsl #13
   299e8:	adc	r2, r2, r2
   299ec:	subcs	r0, r0, r1, lsl #13
   299f0:	cmp	r0, r1, lsl #12
   299f4:	adc	r2, r2, r2
   299f8:	subcs	r0, r0, r1, lsl #12
   299fc:	cmp	r0, r1, lsl #11
   29a00:	adc	r2, r2, r2
   29a04:	subcs	r0, r0, r1, lsl #11
   29a08:	cmp	r0, r1, lsl #10
   29a0c:	adc	r2, r2, r2
   29a10:	subcs	r0, r0, r1, lsl #10
   29a14:	cmp	r0, r1, lsl #9
   29a18:	adc	r2, r2, r2
   29a1c:	subcs	r0, r0, r1, lsl #9
   29a20:	cmp	r0, r1, lsl #8
   29a24:	adc	r2, r2, r2
   29a28:	subcs	r0, r0, r1, lsl #8
   29a2c:	cmp	r0, r1, lsl #7
   29a30:	adc	r2, r2, r2
   29a34:	subcs	r0, r0, r1, lsl #7
   29a38:	cmp	r0, r1, lsl #6
   29a3c:	adc	r2, r2, r2
   29a40:	subcs	r0, r0, r1, lsl #6
   29a44:	cmp	r0, r1, lsl #5
   29a48:	adc	r2, r2, r2
   29a4c:	subcs	r0, r0, r1, lsl #5
   29a50:	cmp	r0, r1, lsl #4
   29a54:	adc	r2, r2, r2
   29a58:	subcs	r0, r0, r1, lsl #4
   29a5c:	cmp	r0, r1, lsl #3
   29a60:	adc	r2, r2, r2
   29a64:	subcs	r0, r0, r1, lsl #3
   29a68:	cmp	r0, r1, lsl #2
   29a6c:	adc	r2, r2, r2
   29a70:	subcs	r0, r0, r1, lsl #2
   29a74:	cmp	r0, r1, lsl #1
   29a78:	adc	r2, r2, r2
   29a7c:	subcs	r0, r0, r1, lsl #1
   29a80:	cmp	r0, r1
   29a84:	adc	r2, r2, r2
   29a88:	subcs	r0, r0, r1
   29a8c:	mov	r0, r2
   29a90:	bx	lr
   29a94:	moveq	r0, #1
   29a98:	movne	r0, #0
   29a9c:	bx	lr
   29aa0:	clz	r2, r1
   29aa4:	rsb	r2, r2, #31
   29aa8:	lsr	r0, r0, r2
   29aac:	bx	lr
   29ab0:	cmp	r0, #0
   29ab4:	mvnne	r0, #0
   29ab8:	b	29df0 <__assert_fail@plt+0x18b18>
   29abc:	cmp	r1, #0
   29ac0:	beq	29ab0 <__assert_fail@plt+0x187d8>
   29ac4:	push	{r0, r1, lr}
   29ac8:	bl	298d0 <__assert_fail@plt+0x185f8>
   29acc:	pop	{r1, r2, lr}
   29ad0:	mul	r3, r2, r0
   29ad4:	sub	r1, r1, r3
   29ad8:	bx	lr
   29adc:	cmp	r1, #0
   29ae0:	beq	29cec <__assert_fail@plt+0x18a14>
   29ae4:	eor	ip, r0, r1
   29ae8:	rsbmi	r1, r1, #0
   29aec:	subs	r2, r1, #1
   29af0:	beq	29cb8 <__assert_fail@plt+0x189e0>
   29af4:	movs	r3, r0
   29af8:	rsbmi	r3, r0, #0
   29afc:	cmp	r3, r1
   29b00:	bls	29cc4 <__assert_fail@plt+0x189ec>
   29b04:	tst	r1, r2
   29b08:	beq	29cd4 <__assert_fail@plt+0x189fc>
   29b0c:	clz	r2, r3
   29b10:	clz	r0, r1
   29b14:	sub	r2, r0, r2
   29b18:	rsbs	r2, r2, #31
   29b1c:	addne	r2, r2, r2, lsl #1
   29b20:	mov	r0, #0
   29b24:	addne	pc, pc, r2, lsl #2
   29b28:	nop			; (mov r0, r0)
   29b2c:	cmp	r3, r1, lsl #31
   29b30:	adc	r0, r0, r0
   29b34:	subcs	r3, r3, r1, lsl #31
   29b38:	cmp	r3, r1, lsl #30
   29b3c:	adc	r0, r0, r0
   29b40:	subcs	r3, r3, r1, lsl #30
   29b44:	cmp	r3, r1, lsl #29
   29b48:	adc	r0, r0, r0
   29b4c:	subcs	r3, r3, r1, lsl #29
   29b50:	cmp	r3, r1, lsl #28
   29b54:	adc	r0, r0, r0
   29b58:	subcs	r3, r3, r1, lsl #28
   29b5c:	cmp	r3, r1, lsl #27
   29b60:	adc	r0, r0, r0
   29b64:	subcs	r3, r3, r1, lsl #27
   29b68:	cmp	r3, r1, lsl #26
   29b6c:	adc	r0, r0, r0
   29b70:	subcs	r3, r3, r1, lsl #26
   29b74:	cmp	r3, r1, lsl #25
   29b78:	adc	r0, r0, r0
   29b7c:	subcs	r3, r3, r1, lsl #25
   29b80:	cmp	r3, r1, lsl #24
   29b84:	adc	r0, r0, r0
   29b88:	subcs	r3, r3, r1, lsl #24
   29b8c:	cmp	r3, r1, lsl #23
   29b90:	adc	r0, r0, r0
   29b94:	subcs	r3, r3, r1, lsl #23
   29b98:	cmp	r3, r1, lsl #22
   29b9c:	adc	r0, r0, r0
   29ba0:	subcs	r3, r3, r1, lsl #22
   29ba4:	cmp	r3, r1, lsl #21
   29ba8:	adc	r0, r0, r0
   29bac:	subcs	r3, r3, r1, lsl #21
   29bb0:	cmp	r3, r1, lsl #20
   29bb4:	adc	r0, r0, r0
   29bb8:	subcs	r3, r3, r1, lsl #20
   29bbc:	cmp	r3, r1, lsl #19
   29bc0:	adc	r0, r0, r0
   29bc4:	subcs	r3, r3, r1, lsl #19
   29bc8:	cmp	r3, r1, lsl #18
   29bcc:	adc	r0, r0, r0
   29bd0:	subcs	r3, r3, r1, lsl #18
   29bd4:	cmp	r3, r1, lsl #17
   29bd8:	adc	r0, r0, r0
   29bdc:	subcs	r3, r3, r1, lsl #17
   29be0:	cmp	r3, r1, lsl #16
   29be4:	adc	r0, r0, r0
   29be8:	subcs	r3, r3, r1, lsl #16
   29bec:	cmp	r3, r1, lsl #15
   29bf0:	adc	r0, r0, r0
   29bf4:	subcs	r3, r3, r1, lsl #15
   29bf8:	cmp	r3, r1, lsl #14
   29bfc:	adc	r0, r0, r0
   29c00:	subcs	r3, r3, r1, lsl #14
   29c04:	cmp	r3, r1, lsl #13
   29c08:	adc	r0, r0, r0
   29c0c:	subcs	r3, r3, r1, lsl #13
   29c10:	cmp	r3, r1, lsl #12
   29c14:	adc	r0, r0, r0
   29c18:	subcs	r3, r3, r1, lsl #12
   29c1c:	cmp	r3, r1, lsl #11
   29c20:	adc	r0, r0, r0
   29c24:	subcs	r3, r3, r1, lsl #11
   29c28:	cmp	r3, r1, lsl #10
   29c2c:	adc	r0, r0, r0
   29c30:	subcs	r3, r3, r1, lsl #10
   29c34:	cmp	r3, r1, lsl #9
   29c38:	adc	r0, r0, r0
   29c3c:	subcs	r3, r3, r1, lsl #9
   29c40:	cmp	r3, r1, lsl #8
   29c44:	adc	r0, r0, r0
   29c48:	subcs	r3, r3, r1, lsl #8
   29c4c:	cmp	r3, r1, lsl #7
   29c50:	adc	r0, r0, r0
   29c54:	subcs	r3, r3, r1, lsl #7
   29c58:	cmp	r3, r1, lsl #6
   29c5c:	adc	r0, r0, r0
   29c60:	subcs	r3, r3, r1, lsl #6
   29c64:	cmp	r3, r1, lsl #5
   29c68:	adc	r0, r0, r0
   29c6c:	subcs	r3, r3, r1, lsl #5
   29c70:	cmp	r3, r1, lsl #4
   29c74:	adc	r0, r0, r0
   29c78:	subcs	r3, r3, r1, lsl #4
   29c7c:	cmp	r3, r1, lsl #3
   29c80:	adc	r0, r0, r0
   29c84:	subcs	r3, r3, r1, lsl #3
   29c88:	cmp	r3, r1, lsl #2
   29c8c:	adc	r0, r0, r0
   29c90:	subcs	r3, r3, r1, lsl #2
   29c94:	cmp	r3, r1, lsl #1
   29c98:	adc	r0, r0, r0
   29c9c:	subcs	r3, r3, r1, lsl #1
   29ca0:	cmp	r3, r1
   29ca4:	adc	r0, r0, r0
   29ca8:	subcs	r3, r3, r1
   29cac:	cmp	ip, #0
   29cb0:	rsbmi	r0, r0, #0
   29cb4:	bx	lr
   29cb8:	teq	ip, r0
   29cbc:	rsbmi	r0, r0, #0
   29cc0:	bx	lr
   29cc4:	movcc	r0, #0
   29cc8:	asreq	r0, ip, #31
   29ccc:	orreq	r0, r0, #1
   29cd0:	bx	lr
   29cd4:	clz	r2, r1
   29cd8:	rsb	r2, r2, #31
   29cdc:	cmp	ip, #0
   29ce0:	lsr	r0, r3, r2
   29ce4:	rsbmi	r0, r0, #0
   29ce8:	bx	lr
   29cec:	cmp	r0, #0
   29cf0:	mvngt	r0, #-2147483648	; 0x80000000
   29cf4:	movlt	r0, #-2147483648	; 0x80000000
   29cf8:	b	29df0 <__assert_fail@plt+0x18b18>
   29cfc:	cmp	r1, #0
   29d00:	beq	29cec <__assert_fail@plt+0x18a14>
   29d04:	push	{r0, r1, lr}
   29d08:	bl	29ae4 <__assert_fail@plt+0x1880c>
   29d0c:	pop	{r1, r2, lr}
   29d10:	mul	r3, r2, r0
   29d14:	sub	r1, r1, r3
   29d18:	bx	lr
   29d1c:	cmp	r3, #0
   29d20:	cmpeq	r2, #0
   29d24:	bne	29d48 <__assert_fail@plt+0x18a70>
   29d28:	cmp	r1, #0
   29d2c:	movlt	r1, #-2147483648	; 0x80000000
   29d30:	movlt	r0, #0
   29d34:	blt	29d44 <__assert_fail@plt+0x18a6c>
   29d38:	cmpeq	r0, #0
   29d3c:	mvnne	r1, #-2147483648	; 0x80000000
   29d40:	mvnne	r0, #0
   29d44:	b	29df0 <__assert_fail@plt+0x18b18>
   29d48:	sub	sp, sp, #8
   29d4c:	push	{sp, lr}
   29d50:	cmp	r1, #0
   29d54:	blt	29d74 <__assert_fail@plt+0x18a9c>
   29d58:	cmp	r3, #0
   29d5c:	blt	29da8 <__assert_fail@plt+0x18ad0>
   29d60:	bl	29e00 <__assert_fail@plt+0x18b28>
   29d64:	ldr	lr, [sp, #4]
   29d68:	add	sp, sp, #8
   29d6c:	pop	{r2, r3}
   29d70:	bx	lr
   29d74:	rsbs	r0, r0, #0
   29d78:	sbc	r1, r1, r1, lsl #1
   29d7c:	cmp	r3, #0
   29d80:	blt	29dcc <__assert_fail@plt+0x18af4>
   29d84:	bl	29e00 <__assert_fail@plt+0x18b28>
   29d88:	ldr	lr, [sp, #4]
   29d8c:	add	sp, sp, #8
   29d90:	pop	{r2, r3}
   29d94:	rsbs	r0, r0, #0
   29d98:	sbc	r1, r1, r1, lsl #1
   29d9c:	rsbs	r2, r2, #0
   29da0:	sbc	r3, r3, r3, lsl #1
   29da4:	bx	lr
   29da8:	rsbs	r2, r2, #0
   29dac:	sbc	r3, r3, r3, lsl #1
   29db0:	bl	29e00 <__assert_fail@plt+0x18b28>
   29db4:	ldr	lr, [sp, #4]
   29db8:	add	sp, sp, #8
   29dbc:	pop	{r2, r3}
   29dc0:	rsbs	r0, r0, #0
   29dc4:	sbc	r1, r1, r1, lsl #1
   29dc8:	bx	lr
   29dcc:	rsbs	r2, r2, #0
   29dd0:	sbc	r3, r3, r3, lsl #1
   29dd4:	bl	29e00 <__assert_fail@plt+0x18b28>
   29dd8:	ldr	lr, [sp, #4]
   29ddc:	add	sp, sp, #8
   29de0:	pop	{r2, r3}
   29de4:	rsbs	r2, r2, #0
   29de8:	sbc	r3, r3, r3, lsl #1
   29dec:	bx	lr
   29df0:	push	{r1, lr}
   29df4:	mov	r0, #8
   29df8:	bl	10fe4 <raise@plt>
   29dfc:	pop	{r1, pc}
   29e00:	cmp	r1, r3
   29e04:	push	{r4, r5, r6, r7, r8, r9, lr}
   29e08:	cmpeq	r0, r2
   29e0c:	mov	r4, r0
   29e10:	mov	r5, r1
   29e14:	ldr	r9, [sp, #28]
   29e18:	movcc	r0, #0
   29e1c:	movcc	r1, #0
   29e20:	bcc	29f18 <__assert_fail@plt+0x18c40>
   29e24:	cmp	r3, #0
   29e28:	clzeq	ip, r2
   29e2c:	clzne	ip, r3
   29e30:	addeq	ip, ip, #32
   29e34:	cmp	r5, #0
   29e38:	clzeq	r1, r4
   29e3c:	addeq	r1, r1, #32
   29e40:	clzne	r1, r5
   29e44:	sub	ip, ip, r1
   29e48:	sub	lr, ip, #32
   29e4c:	lsl	r7, r3, ip
   29e50:	rsb	r8, ip, #32
   29e54:	orr	r7, r7, r2, lsl lr
   29e58:	orr	r7, r7, r2, lsr r8
   29e5c:	lsl	r6, r2, ip
   29e60:	cmp	r5, r7
   29e64:	cmpeq	r4, r6
   29e68:	movcc	r0, #0
   29e6c:	movcc	r1, #0
   29e70:	bcc	29e8c <__assert_fail@plt+0x18bb4>
   29e74:	mov	r3, #1
   29e78:	subs	r4, r4, r6
   29e7c:	lsl	r1, r3, lr
   29e80:	lsl	r0, r3, ip
   29e84:	orr	r1, r1, r3, lsr r8
   29e88:	sbc	r5, r5, r7
   29e8c:	cmp	ip, #0
   29e90:	beq	29f18 <__assert_fail@plt+0x18c40>
   29e94:	lsrs	r3, r7, #1
   29e98:	rrx	r2, r6
   29e9c:	mov	r6, ip
   29ea0:	b	29ec4 <__assert_fail@plt+0x18bec>
   29ea4:	subs	r4, r4, r2
   29ea8:	sbc	r5, r5, r3
   29eac:	adds	r4, r4, r4
   29eb0:	adc	r5, r5, r5
   29eb4:	adds	r4, r4, #1
   29eb8:	adc	r5, r5, #0
   29ebc:	subs	r6, r6, #1
   29ec0:	beq	29ee0 <__assert_fail@plt+0x18c08>
   29ec4:	cmp	r5, r3
   29ec8:	cmpeq	r4, r2
   29ecc:	bcs	29ea4 <__assert_fail@plt+0x18bcc>
   29ed0:	adds	r4, r4, r4
   29ed4:	adc	r5, r5, r5
   29ed8:	subs	r6, r6, #1
   29edc:	bne	29ec4 <__assert_fail@plt+0x18bec>
   29ee0:	lsr	r6, r4, ip
   29ee4:	lsr	r7, r5, ip
   29ee8:	orr	r6, r6, r5, lsl r8
   29eec:	adds	r2, r0, r4
   29ef0:	orr	r6, r6, r5, lsr lr
   29ef4:	adc	r3, r1, r5
   29ef8:	lsl	r1, r7, ip
   29efc:	orr	r1, r1, r6, lsl lr
   29f00:	lsl	r0, r6, ip
   29f04:	orr	r1, r1, r6, lsr r8
   29f08:	subs	r0, r2, r0
   29f0c:	mov	r4, r6
   29f10:	mov	r5, r7
   29f14:	sbc	r1, r3, r1
   29f18:	cmp	r9, #0
   29f1c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   29f20:	strd	r4, [r9]
   29f24:	pop	{r4, r5, r6, r7, r8, r9, pc}
   29f28:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29f2c:	mov	r7, r0
   29f30:	ldr	r6, [pc, #72]	; 29f80 <__assert_fail@plt+0x18ca8>
   29f34:	ldr	r5, [pc, #72]	; 29f84 <__assert_fail@plt+0x18cac>
   29f38:	add	r6, pc, r6
   29f3c:	add	r5, pc, r5
   29f40:	sub	r6, r6, r5
   29f44:	mov	r8, r1
   29f48:	mov	r9, r2
   29f4c:	bl	10f94 <pthread_mutex_unlock@plt-0x20>
   29f50:	asrs	r6, r6, #2
   29f54:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   29f58:	mov	r4, #0
   29f5c:	add	r4, r4, #1
   29f60:	ldr	r3, [r5], #4
   29f64:	mov	r2, r9
   29f68:	mov	r1, r8
   29f6c:	mov	r0, r7
   29f70:	blx	r3
   29f74:	cmp	r6, r4
   29f78:	bne	29f5c <__assert_fail@plt+0x18c84>
   29f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29f80:	ldrdeq	r1, [r1], -r0
   29f84:	andeq	r1, r1, r8, asr #31
   29f88:	bx	lr
   29f8c:	ldr	r3, [pc, #12]	; 29fa0 <__assert_fail@plt+0x18cc8>
   29f90:	mov	r1, #0
   29f94:	add	r3, pc, r3
   29f98:	ldr	r2, [r3]
   29f9c:	b	111e8 <__cxa_atexit@plt>
   29fa0:	andeq	r2, r1, r8, lsl #3

Disassembly of section .fini:

00029fa4 <.fini>:
   29fa4:	push	{r3, lr}
   29fa8:	pop	{r3, pc}
