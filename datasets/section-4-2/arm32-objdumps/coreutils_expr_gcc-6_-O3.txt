
../repos/coreutils/src/expr:     file format elf32-littlearm


Disassembly of section .init:

00011148 <.init>:
   11148:	push	{r3, lr}
   1114c:	bl	117d4 <__assert_fail@plt+0x2dc>
   11150:	pop	{r3, pc}

Disassembly of section .plt:

00011154 <pthread_mutex_unlock@plt-0x14>:
   11154:	push	{lr}		; (str lr, [sp, #-4]!)
   11158:	ldr	lr, [pc, #4]	; 11164 <pthread_mutex_unlock@plt-0x4>
   1115c:	add	lr, pc, lr
   11160:	ldr	pc, [lr, #8]!
   11164:	muleq	r2, ip, lr

00011168 <pthread_mutex_unlock@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #176128	; 0x2b000
   11170:	ldr	pc, [ip, #3740]!	; 0xe9c

00011174 <calloc@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #176128	; 0x2b000
   1117c:	ldr	pc, [ip, #3732]!	; 0xe94

00011180 <fputs_unlocked@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #176128	; 0x2b000
   11188:	ldr	pc, [ip, #3724]!	; 0xe8c

0001118c <wctype@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #176128	; 0x2b000
   11194:	ldr	pc, [ip, #3716]!	; 0xe84

00011198 <raise@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #176128	; 0x2b000
   111a0:	ldr	pc, [ip, #3708]!	; 0xe7c

000111a4 <wcrtomb@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #176128	; 0x2b000
   111ac:	ldr	pc, [ip, #3700]!	; 0xe74

000111b0 <iswctype@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #176128	; 0x2b000
   111b8:	ldr	pc, [ip, #3692]!	; 0xe6c

000111bc <strcmp@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #176128	; 0x2b000
   111c4:	ldr	pc, [ip, #3684]!	; 0xe64

000111c8 <__gmpz_tdiv_q@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #176128	; 0x2b000
   111d0:	ldr	pc, [ip, #3676]!	; 0xe5c

000111d4 <strcspn@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #176128	; 0x2b000
   111dc:	ldr	pc, [ip, #3668]!	; 0xe54

000111e0 <pthread_mutex_destroy@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #176128	; 0x2b000
   111e8:	ldr	pc, [ip, #3660]!	; 0xe4c

000111ec <fflush@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #176128	; 0x2b000
   111f4:	ldr	pc, [ip, #3652]!	; 0xe44

000111f8 <wcwidth@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #176128	; 0x2b000
   11200:	ldr	pc, [ip, #3644]!	; 0xe3c

00011204 <memmove@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #176128	; 0x2b000
   1120c:	ldr	pc, [ip, #3636]!	; 0xe34

00011210 <free@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #176128	; 0x2b000
   11218:	ldr	pc, [ip, #3628]!	; 0xe2c

0001121c <pthread_mutex_lock@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #176128	; 0x2b000
   11224:	ldr	pc, [ip, #3620]!	; 0xe24

00011228 <_exit@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #176128	; 0x2b000
   11230:	ldr	pc, [ip, #3612]!	; 0xe1c

00011234 <memcpy@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #176128	; 0x2b000
   1123c:	ldr	pc, [ip, #3604]!	; 0xe14

00011240 <__gmpz_sub@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #176128	; 0x2b000
   11248:	ldr	pc, [ip, #3596]!	; 0xe0c

0001124c <pthread_mutex_init@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #176128	; 0x2b000
   11254:	ldr	pc, [ip, #3588]!	; 0xe04

00011258 <towlower@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #176128	; 0x2b000
   11260:	ldr	pc, [ip, #3580]!	; 0xdfc

00011264 <mbsinit@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #176128	; 0x2b000
   1126c:	ldr	pc, [ip, #3572]!	; 0xdf4

00011270 <memcmp@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #176128	; 0x2b000
   11278:	ldr	pc, [ip, #3564]!	; 0xdec

0001127c <fputc_unlocked@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #176128	; 0x2b000
   11284:	ldr	pc, [ip, #3556]!	; 0xde4

00011288 <dcgettext@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #176128	; 0x2b000
   11290:	ldr	pc, [ip, #3548]!	; 0xddc

00011294 <__gmpz_get_str@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #176128	; 0x2b000
   1129c:	ldr	pc, [ip, #3540]!	; 0xdd4

000112a0 <realloc@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #176128	; 0x2b000
   112a8:	ldr	pc, [ip, #3532]!	; 0xdcc

000112ac <__gmpz_mul@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #176128	; 0x2b000
   112b4:	ldr	pc, [ip, #3524]!	; 0xdc4

000112b8 <textdomain@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #176128	; 0x2b000
   112c0:	ldr	pc, [ip, #3516]!	; 0xdbc

000112c4 <iswcntrl@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #176128	; 0x2b000
   112cc:	ldr	pc, [ip, #3508]!	; 0xdb4

000112d0 <__gmpz_out_str@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #176128	; 0x2b000
   112d8:	ldr	pc, [ip, #3500]!	; 0xdac

000112dc <iswprint@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #176128	; 0x2b000
   112e4:	ldr	pc, [ip, #3492]!	; 0xda4

000112e8 <fwrite@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #176128	; 0x2b000
   112f0:	ldr	pc, [ip, #3484]!	; 0xd9c

000112f4 <lseek64@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #176128	; 0x2b000
   112fc:	ldr	pc, [ip, #3476]!	; 0xd94

00011300 <__ctype_get_mb_cur_max@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #176128	; 0x2b000
   11308:	ldr	pc, [ip, #3468]!	; 0xd8c

0001130c <__fpending@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #176128	; 0x2b000
   11314:	ldr	pc, [ip, #3460]!	; 0xd84

00011318 <mbrtowc@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #176128	; 0x2b000
   11320:	ldr	pc, [ip, #3452]!	; 0xd7c

00011324 <error@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #176128	; 0x2b000
   1132c:	ldr	pc, [ip, #3444]!	; 0xd74

00011330 <strcoll@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #176128	; 0x2b000
   11338:	ldr	pc, [ip, #3436]!	; 0xd6c

0001133c <puts@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #176128	; 0x2b000
   11344:	ldr	pc, [ip, #3428]!	; 0xd64

00011348 <malloc@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #176128	; 0x2b000
   11350:	ldr	pc, [ip, #3420]!	; 0xd5c

00011354 <__libc_start_main@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #176128	; 0x2b000
   1135c:	ldr	pc, [ip, #3412]!	; 0xd54

00011360 <__freading@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #176128	; 0x2b000
   11368:	ldr	pc, [ip, #3404]!	; 0xd4c

0001136c <__ctype_tolower_loc@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #176128	; 0x2b000
   11374:	ldr	pc, [ip, #3396]!	; 0xd44

00011378 <__ctype_toupper_loc@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #176128	; 0x2b000
   11380:	ldr	pc, [ip, #3388]!	; 0xd3c

00011384 <__gmon_start__@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #176128	; 0x2b000
   1138c:	ldr	pc, [ip, #3380]!	; 0xd34

00011390 <mempcpy@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #176128	; 0x2b000
   11398:	ldr	pc, [ip, #3372]!	; 0xd2c

0001139c <getopt_long@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #176128	; 0x2b000
   113a4:	ldr	pc, [ip, #3364]!	; 0xd24

000113a8 <__ctype_b_loc@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #176128	; 0x2b000
   113b0:	ldr	pc, [ip, #3356]!	; 0xd1c

000113b4 <exit@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #176128	; 0x2b000
   113bc:	ldr	pc, [ip, #3348]!	; 0xd14

000113c0 <strlen@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #176128	; 0x2b000
   113c8:	ldr	pc, [ip, #3340]!	; 0xd0c

000113cc <strchr@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #176128	; 0x2b000
   113d4:	ldr	pc, [ip, #3332]!	; 0xd04

000113d8 <__gmpz_tdiv_r@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #176128	; 0x2b000
   113e0:	ldr	pc, [ip, #3324]!	; 0xcfc

000113e4 <__gmpz_clear@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #176128	; 0x2b000
   113ec:	ldr	pc, [ip, #3316]!	; 0xcf4

000113f0 <__errno_location@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #176128	; 0x2b000
   113f8:	ldr	pc, [ip, #3308]!	; 0xcec

000113fc <iswalnum@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #176128	; 0x2b000
   11404:	ldr	pc, [ip, #3300]!	; 0xce4

00011408 <__cxa_atexit@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #176128	; 0x2b000
   11410:	ldr	pc, [ip, #3292]!	; 0xcdc

00011414 <memset@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #176128	; 0x2b000
   1141c:	ldr	pc, [ip, #3284]!	; 0xcd4

00011420 <btowc@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #176128	; 0x2b000
   11428:	ldr	pc, [ip, #3276]!	; 0xccc

0001142c <__printf_chk@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #176128	; 0x2b000
   11434:	ldr	pc, [ip, #3268]!	; 0xcc4

00011438 <fileno@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #176128	; 0x2b000
   11440:	ldr	pc, [ip, #3260]!	; 0xcbc

00011444 <__fprintf_chk@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #176128	; 0x2b000
   1144c:	ldr	pc, [ip, #3252]!	; 0xcb4

00011450 <memchr@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #176128	; 0x2b000
   11458:	ldr	pc, [ip, #3244]!	; 0xcac

0001145c <fclose@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #176128	; 0x2b000
   11464:	ldr	pc, [ip, #3236]!	; 0xca4

00011468 <fseeko64@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #176128	; 0x2b000
   11470:	ldr	pc, [ip, #3228]!	; 0xc9c

00011474 <__gmpz_init_set_ui@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #176128	; 0x2b000
   1147c:	ldr	pc, [ip, #3220]!	; 0xc94

00011480 <__overflow@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #176128	; 0x2b000
   11488:	ldr	pc, [ip, #3212]!	; 0xc8c

0001148c <setlocale@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #176128	; 0x2b000
   11494:	ldr	pc, [ip, #3204]!	; 0xc84

00011498 <strrchr@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #176128	; 0x2b000
   114a0:	ldr	pc, [ip, #3196]!	; 0xc7c

000114a4 <nl_langinfo@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #176128	; 0x2b000
   114ac:	ldr	pc, [ip, #3188]!	; 0xc74

000114b0 <__gmpz_add@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #176128	; 0x2b000
   114b8:	ldr	pc, [ip, #3180]!	; 0xc6c

000114bc <__gmpz_init_set_str@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #176128	; 0x2b000
   114c4:	ldr	pc, [ip, #3172]!	; 0xc64

000114c8 <bindtextdomain@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #176128	; 0x2b000
   114d0:	ldr	pc, [ip, #3164]!	; 0xc5c

000114d4 <towupper@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #176128	; 0x2b000
   114dc:	ldr	pc, [ip, #3156]!	; 0xc54

000114e0 <strncmp@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #176128	; 0x2b000
   114e8:	ldr	pc, [ip, #3148]!	; 0xc4c

000114ec <abort@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #176128	; 0x2b000
   114f4:	ldr	pc, [ip, #3140]!	; 0xc44

000114f8 <__assert_fail@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #176128	; 0x2b000
   11500:	ldr	pc, [ip, #3132]!	; 0xc3c

Disassembly of section .text:

00011504 <.text>:
   11504:	push	{r4, lr}
   11508:	mov	r2, #5
   1150c:	ldr	r1, [pc, #52]	; 11548 <__assert_fail@plt+0x50>
   11510:	mov	r0, #0
   11514:	bl	11288 <dcgettext@plt>
   11518:	ldr	r3, [pc, #44]	; 1154c <__assert_fail@plt+0x54>
   1151c:	mov	r1, #8
   11520:	ldr	r3, [r3]
   11524:	ldr	r2, [r3, #-4]
   11528:	mov	r4, r0
   1152c:	mov	r0, #0
   11530:	bl	16a3c <__assert_fail@plt+0x5544>
   11534:	mov	r2, r4
   11538:	mov	r1, #0
   1153c:	mov	r3, r0
   11540:	mov	r0, #2
   11544:	bl	11324 <error@plt>
   11548:	andeq	fp, r2, r0, lsr #3
   1154c:			; <UNDEFINED> instruction: 0x0003d1b0
   11550:	push	{r4, r5, r6, lr}
   11554:	mov	r5, r0
   11558:	sub	sp, sp, #24
   1155c:	ldr	r0, [r1]
   11560:	mov	r4, r1
   11564:	bl	148c0 <__assert_fail@plt+0x33c8>
   11568:	ldr	r1, [pc, #484]	; 11754 <__assert_fail@plt+0x25c>
   1156c:	mov	r0, #6
   11570:	bl	1148c <setlocale@plt>
   11574:	ldr	r1, [pc, #476]	; 11758 <__assert_fail@plt+0x260>
   11578:	ldr	r0, [pc, #476]	; 1175c <__assert_fail@plt+0x264>
   1157c:	bl	114c8 <bindtextdomain@plt>
   11580:	ldr	r0, [pc, #468]	; 1175c <__assert_fail@plt+0x264>
   11584:	bl	112b8 <textdomain@plt>
   11588:	ldr	r3, [pc, #464]	; 11760 <__assert_fail@plt+0x268>
   1158c:	mov	r2, #3
   11590:	ldr	r0, [pc, #460]	; 11764 <__assert_fail@plt+0x26c>
   11594:	str	r2, [r3]
   11598:	bl	2b130 <__assert_fail@plt+0x19c38>
   1159c:	ldr	r3, [pc, #452]	; 11768 <__assert_fail@plt+0x270>
   115a0:	ldr	lr, [pc, #452]	; 1176c <__assert_fail@plt+0x274>
   115a4:	ldr	ip, [pc, #452]	; 11770 <__assert_fail@plt+0x278>
   115a8:	ldr	r2, [pc, #452]	; 11774 <__assert_fail@plt+0x27c>
   115ac:	ldr	r6, [pc, #452]	; 11778 <__assert_fail@plt+0x280>
   115b0:	str	r3, [sp, #12]
   115b4:	mov	r3, #0
   115b8:	stm	sp, {r2, ip, lr}
   115bc:	mov	r1, r4
   115c0:	str	r3, [sp, #20]
   115c4:	mov	r0, r5
   115c8:	str	r6, [sp, #16]
   115cc:	ldr	r3, [pc, #424]	; 1177c <__assert_fail@plt+0x284>
   115d0:	ldr	r2, [pc, #424]	; 11780 <__assert_fail@plt+0x288>
   115d4:	bl	1426c <__assert_fail@plt+0x2d74>
   115d8:	cmp	r5, #1
   115dc:	bls	11660 <__assert_fail@plt+0x168>
   115e0:	ldr	r1, [pc, #412]	; 11784 <__assert_fail@plt+0x28c>
   115e4:	ldr	r0, [r4, #4]
   115e8:	bl	111bc <strcmp@plt>
   115ec:	cmp	r0, #0
   115f0:	beq	11654 <__assert_fail@plt+0x15c>
   115f4:	ldr	r5, [pc, #396]	; 11788 <__assert_fail@plt+0x290>
   115f8:	add	r4, r4, #4
   115fc:	mov	r0, #1
   11600:	str	r4, [r5]
   11604:	bl	13efc <__assert_fail@plt+0x2a04>
   11608:	ldr	r4, [r5]
   1160c:	ldr	r3, [r4]
   11610:	cmp	r3, #0
   11614:	mov	r6, r0
   11618:	beq	11688 <__assert_fail@plt+0x190>
   1161c:	mov	r2, #5
   11620:	ldr	r1, [pc, #356]	; 1178c <__assert_fail@plt+0x294>
   11624:	mov	r0, #0
   11628:	bl	11288 <dcgettext@plt>
   1162c:	ldr	r2, [r4]
   11630:	mov	r1, #8
   11634:	mov	r5, r0
   11638:	mov	r0, #0
   1163c:	bl	16a3c <__assert_fail@plt+0x5544>
   11640:	mov	r2, r5
   11644:	mov	r1, #0
   11648:	mov	r3, r0
   1164c:	mov	r0, #2
   11650:	bl	11324 <error@plt>
   11654:	cmp	r5, #2
   11658:	add	r4, r4, #4
   1165c:	bne	115f4 <__assert_fail@plt+0xfc>
   11660:	mov	r2, #5
   11664:	ldr	r1, [pc, #292]	; 11790 <__assert_fail@plt+0x298>
   11668:	mov	r0, #0
   1166c:	bl	11288 <dcgettext@plt>
   11670:	mov	r1, #0
   11674:	mov	r2, r0
   11678:	mov	r0, r1
   1167c:	bl	11324 <error@plt>
   11680:	mov	r0, #2
   11684:	bl	118c0 <__assert_fail@plt+0x3c8>
   11688:	ldr	r3, [r0]
   1168c:	cmp	r3, #0
   11690:	beq	116f8 <__assert_fail@plt+0x200>
   11694:	cmp	r3, #1
   11698:	bne	116f4 <__assert_fail@plt+0x1fc>
   1169c:	ldr	r0, [r0, #4]
   116a0:	bl	1133c <puts@plt>
   116a4:	ldr	r0, [r6]
   116a8:	cmp	r0, #0
   116ac:	beq	1173c <__assert_fail@plt+0x244>
   116b0:	cmp	r0, #1
   116b4:	bne	116f4 <__assert_fail@plt+0x1fc>
   116b8:	ldr	r3, [r6, #4]
   116bc:	ldrb	r2, [r3]
   116c0:	cmp	r2, #0
   116c4:	beq	116f0 <__assert_fail@plt+0x1f8>
   116c8:	cmp	r2, #45	; 0x2d
   116cc:	addeq	r3, r3, #1
   116d0:	b	116e0 <__assert_fail@plt+0x1e8>
   116d4:	ldrb	r2, [r3, #1]!
   116d8:	cmp	r2, #0
   116dc:	beq	1174c <__assert_fail@plt+0x254>
   116e0:	ldrb	r2, [r3]
   116e4:	cmp	r2, #48	; 0x30
   116e8:	beq	116d4 <__assert_fail@plt+0x1dc>
   116ec:	mov	r0, #0
   116f0:	bl	113b4 <exit@plt>
   116f4:	bl	114ec <abort@plt>
   116f8:	ldr	r4, [pc, #148]	; 11794 <__assert_fail@plt+0x29c>
   116fc:	add	r2, r0, #4
   11700:	mov	r1, #10
   11704:	ldr	r0, [r4]
   11708:	bl	112d0 <__gmpz_out_str@plt>
   1170c:	ldr	r0, [r4]
   11710:	ldr	r3, [r0, #20]
   11714:	ldr	r2, [r0, #24]
   11718:	cmp	r3, r2
   1171c:	addcc	r1, r3, #1
   11720:	movcc	r2, #10
   11724:	strcc	r1, [r0, #20]
   11728:	strbcc	r2, [r3]
   1172c:	bcc	116a4 <__assert_fail@plt+0x1ac>
   11730:	mov	r1, #10
   11734:	bl	11480 <__overflow@plt>
   11738:	b	116a4 <__assert_fail@plt+0x1ac>
   1173c:	ldr	r0, [r6, #8]
   11740:	clz	r0, r0
   11744:	lsr	r0, r0, #5
   11748:	b	116f0 <__assert_fail@plt+0x1f8>
   1174c:	mov	r0, #1
   11750:	b	116f0 <__assert_fail@plt+0x1f8>
   11754:	andeq	fp, r2, r0, lsr r5
   11758:	andeq	fp, r2, ip, lsl ip
   1175c:	strdeq	fp, [r2], -r8
   11760:	andeq	sp, r3, ip, asr #2
   11764:	andeq	r4, r1, r0, lsr r1
   11768:	andeq	fp, r2, r0, asr #24
   1176c:	andeq	fp, r2, r0, asr ip
   11770:	andeq	r1, r1, r0, asr #17
   11774:	andeq	fp, r2, ip, asr ip
   11778:	andeq	fp, r2, r4, lsr ip
   1177c:	strdeq	fp, [r2], -r4
   11780:	andeq	fp, r2, r8, asr #3
   11784:	andeq	fp, r2, ip, ror #24
   11788:			; <UNDEFINED> instruction: 0x0003d1b0
   1178c:	andeq	fp, r2, r0, lsl #25
   11790:	andeq	fp, r2, r0, ror ip
   11794:	andeq	sp, r3, r4, lsr #3
   11798:	mov	fp, #0
   1179c:	mov	lr, #0
   117a0:	pop	{r1}		; (ldr r1, [sp], #4)
   117a4:	mov	r2, sp
   117a8:	push	{r2}		; (str r2, [sp, #-4]!)
   117ac:	push	{r0}		; (str r0, [sp, #-4]!)
   117b0:	ldr	ip, [pc, #16]	; 117c8 <__assert_fail@plt+0x2d0>
   117b4:	push	{ip}		; (str ip, [sp, #-4]!)
   117b8:	ldr	r0, [pc, #12]	; 117cc <__assert_fail@plt+0x2d4>
   117bc:	ldr	r3, [pc, #12]	; 117d0 <__assert_fail@plt+0x2d8>
   117c0:	bl	11354 <__libc_start_main@plt>
   117c4:	bl	114ec <abort@plt>
   117c8:	andeq	fp, r2, ip, lsr #2
   117cc:	andeq	r1, r1, r0, asr r5
   117d0:	andeq	fp, r2, ip, asr #1
   117d4:	ldr	r3, [pc, #20]	; 117f0 <__assert_fail@plt+0x2f8>
   117d8:	ldr	r2, [pc, #20]	; 117f4 <__assert_fail@plt+0x2fc>
   117dc:	add	r3, pc, r3
   117e0:	ldr	r2, [r3, r2]
   117e4:	cmp	r2, #0
   117e8:	bxeq	lr
   117ec:	b	11384 <__gmon_start__@plt>
   117f0:	andeq	fp, r2, ip, lsl r8
   117f4:	andeq	r0, r0, r0, asr #2
   117f8:	ldr	r3, [pc, #28]	; 1181c <__assert_fail@plt+0x324>
   117fc:	ldr	r0, [pc, #28]	; 11820 <__assert_fail@plt+0x328>
   11800:	sub	r3, r3, r0
   11804:	cmp	r3, #6
   11808:	bxls	lr
   1180c:	ldr	r3, [pc, #16]	; 11824 <__assert_fail@plt+0x32c>
   11810:	cmp	r3, #0
   11814:	bxeq	lr
   11818:	bx	r3
   1181c:	muleq	r3, r3, r1
   11820:	muleq	r3, r0, r1
   11824:	andeq	r0, r0, r0
   11828:	ldr	r1, [pc, #36]	; 11854 <__assert_fail@plt+0x35c>
   1182c:	ldr	r0, [pc, #36]	; 11858 <__assert_fail@plt+0x360>
   11830:	sub	r1, r1, r0
   11834:	asr	r1, r1, #2
   11838:	add	r1, r1, r1, lsr #31
   1183c:	asrs	r1, r1, #1
   11840:	bxeq	lr
   11844:	ldr	r3, [pc, #16]	; 1185c <__assert_fail@plt+0x364>
   11848:	cmp	r3, #0
   1184c:	bxeq	lr
   11850:	bx	r3
   11854:	muleq	r3, r0, r1
   11858:	muleq	r3, r0, r1
   1185c:	andeq	r0, r0, r0
   11860:	push	{r4, lr}
   11864:	ldr	r4, [pc, #24]	; 11884 <__assert_fail@plt+0x38c>
   11868:	ldrb	r3, [r4]
   1186c:	cmp	r3, #0
   11870:	popne	{r4, pc}
   11874:	bl	117f8 <__assert_fail@plt+0x300>
   11878:	mov	r3, #1
   1187c:	strb	r3, [r4]
   11880:	pop	{r4, pc}
   11884:	andeq	sp, r3, ip, lsr #3
   11888:	ldr	r0, [pc, #40]	; 118b8 <__assert_fail@plt+0x3c0>
   1188c:	ldr	r3, [r0]
   11890:	cmp	r3, #0
   11894:	bne	1189c <__assert_fail@plt+0x3a4>
   11898:	b	11828 <__assert_fail@plt+0x330>
   1189c:	ldr	r3, [pc, #24]	; 118bc <__assert_fail@plt+0x3c4>
   118a0:	cmp	r3, #0
   118a4:	beq	11898 <__assert_fail@plt+0x3a0>
   118a8:	push	{r4, lr}
   118ac:	blx	r3
   118b0:	pop	{r4, lr}
   118b4:	b	11828 <__assert_fail@plt+0x330>
   118b8:	andeq	ip, r3, ip, lsl #30
   118bc:	andeq	r0, r0, r0
   118c0:	push	{r7, lr}
   118c4:	subs	r7, r0, #0
   118c8:	sub	sp, sp, #56	; 0x38
   118cc:	beq	11908 <__assert_fail@plt+0x410>
   118d0:	ldr	r3, [pc, #832]	; 11c18 <__assert_fail@plt+0x720>
   118d4:	mov	r2, #5
   118d8:	ldr	r1, [pc, #828]	; 11c1c <__assert_fail@plt+0x724>
   118dc:	mov	r0, #0
   118e0:	ldr	r4, [r3]
   118e4:	bl	11288 <dcgettext@plt>
   118e8:	ldr	r3, [pc, #816]	; 11c20 <__assert_fail@plt+0x728>
   118ec:	mov	r1, #1
   118f0:	ldr	r3, [r3]
   118f4:	mov	r2, r0
   118f8:	mov	r0, r4
   118fc:	bl	11444 <__fprintf_chk@plt>
   11900:	mov	r0, r7
   11904:	bl	113b4 <exit@plt>
   11908:	mov	r2, #5
   1190c:	ldr	r1, [pc, #784]	; 11c24 <__assert_fail@plt+0x72c>
   11910:	bl	11288 <dcgettext@plt>
   11914:	ldr	r3, [pc, #772]	; 11c20 <__assert_fail@plt+0x728>
   11918:	ldr	r5, [pc, #776]	; 11c28 <__assert_fail@plt+0x730>
   1191c:	ldr	r3, [r3]
   11920:	mov	r2, r3
   11924:	mov	r1, r0
   11928:	mov	r0, #1
   1192c:	bl	1142c <__printf_chk@plt>
   11930:	ldr	r0, [r5]
   11934:	ldr	r3, [r0, #20]
   11938:	ldr	r2, [r0, #24]
   1193c:	cmp	r3, r2
   11940:	addcc	r1, r3, #1
   11944:	movcc	r2, #10
   11948:	strcc	r1, [r0, #20]
   1194c:	strbcc	r2, [r3]
   11950:	bcs	11be8 <__assert_fail@plt+0x6f0>
   11954:	mov	r2, #5
   11958:	ldr	r1, [pc, #716]	; 11c2c <__assert_fail@plt+0x734>
   1195c:	mov	r0, #0
   11960:	bl	11288 <dcgettext@plt>
   11964:	ldr	r1, [r5]
   11968:	bl	11180 <fputs_unlocked@plt>
   1196c:	mov	r2, #5
   11970:	ldr	r1, [pc, #696]	; 11c30 <__assert_fail@plt+0x738>
   11974:	mov	r0, #0
   11978:	bl	11288 <dcgettext@plt>
   1197c:	ldr	r1, [r5]
   11980:	bl	11180 <fputs_unlocked@plt>
   11984:	mov	r2, #5
   11988:	ldr	r1, [pc, #676]	; 11c34 <__assert_fail@plt+0x73c>
   1198c:	mov	r0, #0
   11990:	bl	11288 <dcgettext@plt>
   11994:	ldr	r1, [r5]
   11998:	bl	11180 <fputs_unlocked@plt>
   1199c:	mov	r2, #5
   119a0:	ldr	r1, [pc, #656]	; 11c38 <__assert_fail@plt+0x740>
   119a4:	mov	r0, #0
   119a8:	bl	11288 <dcgettext@plt>
   119ac:	ldr	r1, [r5]
   119b0:	bl	11180 <fputs_unlocked@plt>
   119b4:	mov	r2, #5
   119b8:	ldr	r1, [pc, #636]	; 11c3c <__assert_fail@plt+0x744>
   119bc:	mov	r0, #0
   119c0:	bl	11288 <dcgettext@plt>
   119c4:	ldr	r1, [r5]
   119c8:	bl	11180 <fputs_unlocked@plt>
   119cc:	mov	r2, #5
   119d0:	ldr	r1, [pc, #616]	; 11c40 <__assert_fail@plt+0x748>
   119d4:	mov	r0, #0
   119d8:	bl	11288 <dcgettext@plt>
   119dc:	ldr	r1, [r5]
   119e0:	bl	11180 <fputs_unlocked@plt>
   119e4:	mov	r2, #5
   119e8:	ldr	r1, [pc, #596]	; 11c44 <__assert_fail@plt+0x74c>
   119ec:	mov	r0, #0
   119f0:	bl	11288 <dcgettext@plt>
   119f4:	ldr	r1, [r5]
   119f8:	bl	11180 <fputs_unlocked@plt>
   119fc:	mov	r2, #5
   11a00:	ldr	r1, [pc, #576]	; 11c48 <__assert_fail@plt+0x750>
   11a04:	mov	r0, #0
   11a08:	bl	11288 <dcgettext@plt>
   11a0c:	ldr	r1, [r5]
   11a10:	bl	11180 <fputs_unlocked@plt>
   11a14:	mov	r2, #5
   11a18:	ldr	r1, [pc, #556]	; 11c4c <__assert_fail@plt+0x754>
   11a1c:	mov	r0, #0
   11a20:	bl	11288 <dcgettext@plt>
   11a24:	ldr	r4, [pc, #548]	; 11c50 <__assert_fail@plt+0x758>
   11a28:	ldr	r1, [r5]
   11a2c:	bl	11180 <fputs_unlocked@plt>
   11a30:	mov	r2, #5
   11a34:	ldr	r1, [pc, #536]	; 11c54 <__assert_fail@plt+0x75c>
   11a38:	mov	r0, #0
   11a3c:	bl	11288 <dcgettext@plt>
   11a40:	ldr	r1, [r5]
   11a44:	bl	11180 <fputs_unlocked@plt>
   11a48:	ldm	r4!, {r0, r1, r2, r3}
   11a4c:	mov	lr, sp
   11a50:	stmia	lr!, {r0, r1, r2, r3}
   11a54:	ldm	r4!, {r0, r1, r2, r3}
   11a58:	ldr	ip, [sp]
   11a5c:	stmia	lr!, {r0, r1, r2, r3}
   11a60:	cmp	ip, #0
   11a64:	ldm	r4!, {r0, r1, r2, r3}
   11a68:	stmia	lr!, {r0, r1, r2, r3}
   11a6c:	ldm	r4, {r0, r1}
   11a70:	moveq	r4, sp
   11a74:	stm	lr, {r0, r1}
   11a78:	beq	11aa8 <__assert_fail@plt+0x5b0>
   11a7c:	ldr	r6, [pc, #468]	; 11c58 <__assert_fail@plt+0x760>
   11a80:	mov	r4, sp
   11a84:	b	11a94 <__assert_fail@plt+0x59c>
   11a88:	ldr	ip, [r4, #8]!
   11a8c:	cmp	ip, #0
   11a90:	beq	11aa8 <__assert_fail@plt+0x5b0>
   11a94:	mov	r1, ip
   11a98:	mov	r0, r6
   11a9c:	bl	111bc <strcmp@plt>
   11aa0:	cmp	r0, #0
   11aa4:	bne	11a88 <__assert_fail@plt+0x590>
   11aa8:	ldr	r4, [r4, #4]
   11aac:	mov	r2, #5
   11ab0:	cmp	r4, #0
   11ab4:	ldr	r1, [pc, #416]	; 11c5c <__assert_fail@plt+0x764>
   11ab8:	beq	11b60 <__assert_fail@plt+0x668>
   11abc:	mov	r0, #0
   11ac0:	bl	11288 <dcgettext@plt>
   11ac4:	ldr	r3, [pc, #404]	; 11c60 <__assert_fail@plt+0x768>
   11ac8:	ldr	r2, [pc, #404]	; 11c64 <__assert_fail@plt+0x76c>
   11acc:	mov	r1, r0
   11ad0:	mov	r0, #1
   11ad4:	bl	1142c <__printf_chk@plt>
   11ad8:	mov	r1, #0
   11adc:	mov	r0, #5
   11ae0:	bl	1148c <setlocale@plt>
   11ae4:	cmp	r0, #0
   11ae8:	ldreq	r6, [pc, #360]	; 11c58 <__assert_fail@plt+0x760>
   11aec:	beq	11b08 <__assert_fail@plt+0x610>
   11af0:	mov	r2, #3
   11af4:	ldr	r1, [pc, #364]	; 11c68 <__assert_fail@plt+0x770>
   11af8:	bl	114e0 <strncmp@plt>
   11afc:	ldr	r6, [pc, #340]	; 11c58 <__assert_fail@plt+0x760>
   11b00:	cmp	r0, #0
   11b04:	bne	11bfc <__assert_fail@plt+0x704>
   11b08:	mov	r2, #5
   11b0c:	ldr	r1, [pc, #344]	; 11c6c <__assert_fail@plt+0x774>
   11b10:	mov	r0, #0
   11b14:	bl	11288 <dcgettext@plt>
   11b18:	ldr	r3, [pc, #312]	; 11c58 <__assert_fail@plt+0x760>
   11b1c:	ldr	r2, [pc, #316]	; 11c60 <__assert_fail@plt+0x768>
   11b20:	mov	r1, r0
   11b24:	mov	r0, #1
   11b28:	bl	1142c <__printf_chk@plt>
   11b2c:	mov	r2, #5
   11b30:	ldr	r1, [pc, #312]	; 11c70 <__assert_fail@plt+0x778>
   11b34:	mov	r0, #0
   11b38:	bl	11288 <dcgettext@plt>
   11b3c:	ldr	r2, [pc, #304]	; 11c74 <__assert_fail@plt+0x77c>
   11b40:	cmp	r4, r6
   11b44:	ldr	r3, [pc, #300]	; 11c78 <__assert_fail@plt+0x780>
   11b48:	movne	r3, r2
   11b4c:	mov	r1, r0
   11b50:	mov	r2, r4
   11b54:	mov	r0, #1
   11b58:	bl	1142c <__printf_chk@plt>
   11b5c:	b	11900 <__assert_fail@plt+0x408>
   11b60:	mov	r0, r4
   11b64:	bl	11288 <dcgettext@plt>
   11b68:	ldr	r3, [pc, #240]	; 11c60 <__assert_fail@plt+0x768>
   11b6c:	ldr	r2, [pc, #240]	; 11c64 <__assert_fail@plt+0x76c>
   11b70:	mov	r1, r0
   11b74:	mov	r0, #1
   11b78:	bl	1142c <__printf_chk@plt>
   11b7c:	mov	r1, r4
   11b80:	mov	r0, #5
   11b84:	bl	1148c <setlocale@plt>
   11b88:	cmp	r0, #0
   11b8c:	beq	11ba4 <__assert_fail@plt+0x6ac>
   11b90:	mov	r2, #3
   11b94:	ldr	r1, [pc, #204]	; 11c68 <__assert_fail@plt+0x770>
   11b98:	bl	114e0 <strncmp@plt>
   11b9c:	cmp	r0, #0
   11ba0:	bne	11bf4 <__assert_fail@plt+0x6fc>
   11ba4:	mov	r2, #5
   11ba8:	ldr	r1, [pc, #188]	; 11c6c <__assert_fail@plt+0x774>
   11bac:	mov	r0, #0
   11bb0:	bl	11288 <dcgettext@plt>
   11bb4:	ldr	r3, [pc, #156]	; 11c58 <__assert_fail@plt+0x760>
   11bb8:	ldr	r2, [pc, #160]	; 11c60 <__assert_fail@plt+0x768>
   11bbc:	mov	r4, r3
   11bc0:	mov	r1, r0
   11bc4:	mov	r0, #1
   11bc8:	bl	1142c <__printf_chk@plt>
   11bcc:	ldr	r1, [pc, #156]	; 11c70 <__assert_fail@plt+0x778>
   11bd0:	mov	r2, #5
   11bd4:	mov	r0, #0
   11bd8:	bl	11288 <dcgettext@plt>
   11bdc:	ldr	r3, [pc, #148]	; 11c78 <__assert_fail@plt+0x780>
   11be0:	mov	r1, r0
   11be4:	b	11b50 <__assert_fail@plt+0x658>
   11be8:	mov	r1, #10
   11bec:	bl	11480 <__overflow@plt>
   11bf0:	b	11954 <__assert_fail@plt+0x45c>
   11bf4:	ldr	r6, [pc, #92]	; 11c58 <__assert_fail@plt+0x760>
   11bf8:	mov	r4, r6
   11bfc:	mov	r2, #5
   11c00:	ldr	r1, [pc, #116]	; 11c7c <__assert_fail@plt+0x784>
   11c04:	mov	r0, #0
   11c08:	bl	11288 <dcgettext@plt>
   11c0c:	ldr	r1, [r5]
   11c10:	bl	11180 <fputs_unlocked@plt>
   11c14:	b	11b08 <__assert_fail@plt+0x610>
   11c18:	andeq	sp, r3, r0, lsr #3
   11c1c:	ldrdeq	fp, [r2], -r0
   11c20:			; <UNDEFINED> instruction: 0x0003d1bc
   11c24:	strdeq	fp, [r2], -r8
   11c28:	andeq	sp, r3, r4, lsr #3
   11c2c:	andeq	fp, r2, r0, lsr #4
   11c30:	andeq	fp, r2, r0, asr r2
   11c34:	andeq	fp, r2, r8, lsl #5
   11c38:	muleq	r2, ip, r3
   11c3c:	andeq	fp, r2, r0, asr #9
   11c40:	andeq	fp, r2, r4, lsr r5
   11c44:	strdeq	fp, [r2], -r0
   11c48:	andeq	fp, r2, r8, lsr #14
   11c4c:	strdeq	fp, [r2], -r4
   11c50:	andeq	fp, r2, r4, asr r1
   11c54:	andeq	fp, r2, r8, lsl r9
   11c58:	andeq	fp, r2, r8, asr #3
   11c5c:			; <UNDEFINED> instruction: 0x0002b9b4
   11c60:	andeq	fp, r2, ip, asr #19
   11c64:	strdeq	fp, [r2], -r4
   11c68:	andeq	fp, r2, r4, lsl #20
   11c6c:	andeq	fp, r2, r0, asr sl
   11c70:	andeq	fp, r2, ip, ror #20
   11c74:	andeq	fp, r2, r0, lsr r5
   11c78:			; <UNDEFINED> instruction: 0x0002bcb0
   11c7c:	andeq	fp, r2, r8, lsl #20
   11c80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11c84:	mov	r4, r0
   11c88:	ldr	r0, [r0]
   11c8c:	sub	sp, sp, #368	; 0x170
   11c90:	cmp	r0, #0
   11c94:	mov	r5, r1
   11c98:	beq	11e04 <__assert_fail@plt+0x90c>
   11c9c:	cmp	r0, #1
   11ca0:	bne	11dd8 <__assert_fail@plt+0x8e0>
   11ca4:	ldr	r0, [r5]
   11ca8:	cmp	r0, #0
   11cac:	beq	11ddc <__assert_fail@plt+0x8e4>
   11cb0:	cmp	r0, #1
   11cb4:	bne	11dd8 <__assert_fail@plt+0x8e0>
   11cb8:	ldr	r6, [r5, #4]
   11cbc:	ldr	r2, [pc, #980]	; 12098 <__assert_fail@plt+0xba0>
   11cc0:	ldr	r1, [pc, #980]	; 1209c <__assert_fail@plt+0xba4>
   11cc4:	mov	r5, #0
   11cc8:	add	r3, sp, #112	; 0x70
   11ccc:	mov	r0, r6
   11cd0:	str	r1, [r2]
   11cd4:	str	r3, [sp, #40]	; 0x28
   11cd8:	str	r5, [sp, #12]
   11cdc:	str	r5, [sp, #16]
   11ce0:	str	r5, [sp, #20]
   11ce4:	str	r5, [sp, #24]
   11ce8:	str	r5, [sp, #28]
   11cec:	str	r5, [sp, #44]	; 0x2c
   11cf0:	bl	113c0 <strlen@plt>
   11cf4:	add	r2, sp, #24
   11cf8:	mov	r1, r0
   11cfc:	mov	r0, r6
   11d00:	bl	288c8 <__assert_fail@plt+0x173d0>
   11d04:	subs	r7, r0, #0
   11d08:	bne	12028 <__assert_fail@plt+0xb30>
   11d0c:	ldrb	r3, [sp, #52]	; 0x34
   11d10:	ldr	r5, [r4, #4]
   11d14:	bic	r3, r3, #128	; 0x80
   11d18:	mov	r0, r5
   11d1c:	strb	r3, [sp, #52]	; 0x34
   11d20:	bl	113c0 <strlen@plt>
   11d24:	add	r3, sp, #12
   11d28:	str	r3, [sp]
   11d2c:	mov	r1, r5
   11d30:	mov	r3, r7
   11d34:	mov	r2, r0
   11d38:	add	r0, sp, #24
   11d3c:	bl	29188 <__assert_fail@plt+0x17c90>
   11d40:	subs	r6, r0, #0
   11d44:	blt	11e58 <__assert_fail@plt+0x960>
   11d48:	ldr	r5, [sp, #48]	; 0x30
   11d4c:	cmp	r5, #0
   11d50:	beq	11e88 <__assert_fail@plt+0x990>
   11d54:	ldr	r3, [sp, #20]
   11d58:	ldr	r3, [r3, #4]
   11d5c:	cmp	r3, #0
   11d60:	movlt	r0, #16
   11d64:	blt	11e38 <__assert_fail@plt+0x940>
   11d68:	ldr	r2, [r4, #4]
   11d6c:	mov	r0, #16
   11d70:	strb	r7, [r2, r3]
   11d74:	ldr	r3, [sp, #16]
   11d78:	ldr	r5, [r4, #4]
   11d7c:	ldr	r3, [r3, #4]
   11d80:	add	r5, r5, r3
   11d84:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   11d88:	mov	r3, #1
   11d8c:	mov	r4, r0
   11d90:	mov	r0, r5
   11d94:	str	r3, [r4]
   11d98:	bl	2a6d0 <__assert_fail@plt+0x191d8>
   11d9c:	str	r0, [r4, #4]
   11da0:	ldr	r3, [sp, #12]
   11da4:	cmp	r3, #0
   11da8:	beq	11dbc <__assert_fail@plt+0x8c4>
   11dac:	ldr	r0, [sp, #16]
   11db0:	bl	14214 <__assert_fail@plt+0x2d1c>
   11db4:	ldr	r0, [sp, #20]
   11db8:	bl	14214 <__assert_fail@plt+0x2d1c>
   11dbc:	add	r0, sp, #24
   11dc0:	mov	r3, #0
   11dc4:	str	r3, [sp, #40]	; 0x28
   11dc8:	bl	28fe8 <__assert_fail@plt+0x17af0>
   11dcc:	mov	r0, r4
   11dd0:	add	sp, sp, #368	; 0x170
   11dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11dd8:	bl	114ec <abort@plt>
   11ddc:	add	r7, r5, #4
   11de0:	mov	r2, r7
   11de4:	mov	r1, #10
   11de8:	bl	11294 <__gmpz_get_str@plt>
   11dec:	mov	r6, r0
   11df0:	mov	r0, r7
   11df4:	bl	113e4 <__gmpz_clear@plt>
   11df8:	mov	r3, #1
   11dfc:	stm	r5, {r3, r6}
   11e00:	b	11cbc <__assert_fail@plt+0x7c4>
   11e04:	add	r6, r4, #4
   11e08:	mov	r2, r6
   11e0c:	mov	r1, #10
   11e10:	bl	11294 <__gmpz_get_str@plt>
   11e14:	mov	r7, r0
   11e18:	mov	r0, r6
   11e1c:	bl	113e4 <__gmpz_clear@plt>
   11e20:	mov	r3, #1
   11e24:	stm	r4, {r3, r7}
   11e28:	ldr	r0, [r5]
   11e2c:	cmp	r0, #0
   11e30:	bne	11cb0 <__assert_fail@plt+0x7b8>
   11e34:	b	11ddc <__assert_fail@plt+0x8e4>
   11e38:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   11e3c:	mov	r3, #1
   11e40:	mov	r4, r0
   11e44:	str	r3, [r0]
   11e48:	ldr	r0, [pc, #592]	; 120a0 <__assert_fail@plt+0xba8>
   11e4c:	bl	2a6d0 <__assert_fail@plt+0x191d8>
   11e50:	str	r0, [r4, #4]
   11e54:	b	11da0 <__assert_fail@plt+0x8a8>
   11e58:	cmn	r6, #1
   11e5c:	bne	12050 <__assert_fail@plt+0xb58>
   11e60:	ldr	r5, [sp, #48]	; 0x30
   11e64:	mov	r0, #16
   11e68:	cmp	r5, #0
   11e6c:	bne	11e38 <__assert_fail@plt+0x940>
   11e70:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   11e74:	mov	r1, r5
   11e78:	mov	r4, r0
   11e7c:	str	r5, [r0], #4
   11e80:	bl	11474 <__gmpz_init_set_ui@plt>
   11e84:	b	11da0 <__assert_fail@plt+0x8a8>
   11e88:	bl	11300 <__ctype_get_mb_cur_max@plt>
   11e8c:	cmp	r0, #1
   11e90:	beq	11f20 <__assert_fail@plt+0xa28>
   11e94:	ldr	r9, [r4, #4]
   11e98:	ldr	sl, [pc, #516]	; 120a4 <__assert_fail@plt+0xbac>
   11e9c:	mov	r4, r9
   11ea0:	mov	r7, #1
   11ea4:	mov	r8, r5
   11ea8:	str	r9, [sp, #72]	; 0x48
   11eac:	strb	r5, [sp, #56]	; 0x38
   11eb0:	str	r5, [sp, #60]	; 0x3c
   11eb4:	strb	r5, [sp, #68]	; 0x44
   11eb8:	str	r5, [sp, #64]	; 0x40
   11ebc:	ldrb	r3, [sp, #56]	; 0x38
   11ec0:	cmp	r3, #0
   11ec4:	bne	11f3c <__assert_fail@plt+0xa44>
   11ec8:	ldrb	r3, [r4]
   11ecc:	and	r2, r3, #31
   11ed0:	lsr	r3, r3, #5
   11ed4:	ldr	r3, [sl, r3, lsl #2]
   11ed8:	lsr	r3, r3, r2
   11edc:	tst	r3, #1
   11ee0:	beq	11f28 <__assert_fail@plt+0xa30>
   11ee4:	str	r7, [sp, #76]	; 0x4c
   11ee8:	ldrb	r4, [r4]
   11eec:	strb	r7, [sp, #80]	; 0x50
   11ef0:	strb	r7, [sp, #68]	; 0x44
   11ef4:	cmp	r4, #0
   11ef8:	str	r4, [sp, #84]	; 0x54
   11efc:	bne	11fa0 <__assert_fail@plt+0xaa8>
   11f00:	mov	r0, #16
   11f04:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   11f08:	mov	r3, #0
   11f0c:	mov	r1, r5
   11f10:	mov	r4, r0
   11f14:	str	r3, [r0], #4
   11f18:	bl	11474 <__gmpz_init_set_ui@plt>
   11f1c:	b	11da0 <__assert_fail@plt+0x8a8>
   11f20:	mov	r5, r6
   11f24:	b	11f00 <__assert_fail@plt+0xa08>
   11f28:	add	r0, sp, #60	; 0x3c
   11f2c:	bl	11264 <mbsinit@plt>
   11f30:	cmp	r0, #0
   11f34:	beq	1203c <__assert_fail@plt+0xb44>
   11f38:	strb	r7, [sp, #56]	; 0x38
   11f3c:	bl	11300 <__ctype_get_mb_cur_max@plt>
   11f40:	mov	r1, r0
   11f44:	mov	r0, r4
   11f48:	bl	2940c <__assert_fail@plt+0x17f14>
   11f4c:	add	r3, sp, #60	; 0x3c
   11f50:	mov	r1, r4
   11f54:	mov	r2, r0
   11f58:	add	r0, sp, #84	; 0x54
   11f5c:	bl	1449c <__assert_fail@plt+0x2fa4>
   11f60:	cmn	r0, #1
   11f64:	str	r0, [sp, #76]	; 0x4c
   11f68:	beq	11fc8 <__assert_fail@plt+0xad0>
   11f6c:	cmn	r0, #2
   11f70:	beq	12010 <__assert_fail@plt+0xb18>
   11f74:	cmp	r0, #0
   11f78:	beq	11fdc <__assert_fail@plt+0xae4>
   11f7c:	ldr	r4, [sp, #84]	; 0x54
   11f80:	add	r0, sp, #60	; 0x3c
   11f84:	strb	r7, [sp, #80]	; 0x50
   11f88:	bl	11264 <mbsinit@plt>
   11f8c:	strb	r7, [sp, #68]	; 0x44
   11f90:	cmp	r0, #0
   11f94:	strbne	r8, [sp, #56]	; 0x38
   11f98:	cmp	r4, #0
   11f9c:	beq	11f00 <__assert_fail@plt+0xa08>
   11fa0:	ldr	r4, [sp, #72]	; 0x48
   11fa4:	sub	r3, r4, r9
   11fa8:	cmp	r6, r3
   11fac:	bls	11f00 <__assert_fail@plt+0xa08>
   11fb0:	ldr	r3, [sp, #76]	; 0x4c
   11fb4:	add	r5, r5, #1
   11fb8:	add	r4, r4, r3
   11fbc:	strb	r8, [sp, #68]	; 0x44
   11fc0:	str	r4, [sp, #72]	; 0x48
   11fc4:	b	11ebc <__assert_fail@plt+0x9c4>
   11fc8:	ldr	r4, [sp, #72]	; 0x48
   11fcc:	str	r7, [sp, #76]	; 0x4c
   11fd0:	strb	r8, [sp, #80]	; 0x50
   11fd4:	strb	r7, [sp, #68]	; 0x44
   11fd8:	b	11fa4 <__assert_fail@plt+0xaac>
   11fdc:	ldr	r4, [sp, #72]	; 0x48
   11fe0:	str	r7, [sp, #76]	; 0x4c
   11fe4:	ldrb	r3, [r4]
   11fe8:	cmp	r3, #0
   11fec:	bne	12084 <__assert_fail@plt+0xb8c>
   11ff0:	ldr	r4, [sp, #84]	; 0x54
   11ff4:	cmp	r4, #0
   11ff8:	beq	11f80 <__assert_fail@plt+0xa88>
   11ffc:	ldr	r3, [pc, #164]	; 120a8 <__assert_fail@plt+0xbb0>
   12000:	mov	r2, #172	; 0xac
   12004:	ldr	r1, [pc, #160]	; 120ac <__assert_fail@plt+0xbb4>
   12008:	ldr	r0, [pc, #160]	; 120b0 <__assert_fail@plt+0xbb8>
   1200c:	bl	114f8 <__assert_fail@plt>
   12010:	ldr	r4, [sp, #72]	; 0x48
   12014:	mov	r0, r4
   12018:	bl	113c0 <strlen@plt>
   1201c:	strb	r8, [sp, #80]	; 0x50
   12020:	str	r0, [sp, #76]	; 0x4c
   12024:	b	11fd4 <__assert_fail@plt+0xadc>
   12028:	mov	r3, r7
   1202c:	mov	r1, r5
   12030:	ldr	r2, [pc, #124]	; 120b4 <__assert_fail@plt+0xbbc>
   12034:	mov	r0, #2
   12038:	bl	11324 <error@plt>
   1203c:	ldr	r3, [pc, #100]	; 120a8 <__assert_fail@plt+0xbb0>
   12040:	mov	r2, #143	; 0x8f
   12044:	ldr	r1, [pc, #96]	; 120ac <__assert_fail@plt+0xbb4>
   12048:	ldr	r0, [pc, #104]	; 120b8 <__assert_fail@plt+0xbc0>
   1204c:	bl	114f8 <__assert_fail@plt>
   12050:	cmn	r6, #2
   12054:	movne	r4, #75	; 0x4b
   12058:	bne	12064 <__assert_fail@plt+0xb6c>
   1205c:	bl	113f0 <__errno_location@plt>
   12060:	ldr	r4, [r0]
   12064:	mov	r2, #5
   12068:	ldr	r1, [pc, #76]	; 120bc <__assert_fail@plt+0xbc4>
   1206c:	mov	r0, #0
   12070:	bl	11288 <dcgettext@plt>
   12074:	mov	r1, r4
   12078:	mov	r2, r0
   1207c:	mov	r0, #3
   12080:	bl	11324 <error@plt>
   12084:	ldr	r3, [pc, #28]	; 120a8 <__assert_fail@plt+0xbb0>
   12088:	mov	r2, #171	; 0xab
   1208c:	ldr	r1, [pc, #24]	; 120ac <__assert_fail@plt+0xbb4>
   12090:	ldr	r0, [pc, #40]	; 120c0 <__assert_fail@plt+0xbc8>
   12094:	bl	114f8 <__assert_fail@plt>
   12098:	strdeq	sp, [r3], -r0
   1209c:	andeq	r0, r0, r6, asr #5
   120a0:	andeq	fp, r2, r0, lsr r5
   120a4:	andeq	fp, r2, r8, ror #26
   120a8:	andeq	fp, r2, ip, lsl #3
   120ac:	andeq	fp, r2, r0, lsr #21
   120b0:	andeq	fp, r2, r0, ror #21
   120b4:	andeq	fp, r2, r4, lsr #26
   120b8:			; <UNDEFINED> instruction: 0x0002bab0
   120bc:	strdeq	fp, [r2], -r4
   120c0:	andeq	fp, r2, r8, asr #21
   120c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120c8:	mov	r8, r0
   120cc:	ldr	r6, [pc, #3988]	; 13068 <__assert_fail@plt+0x1b70>
   120d0:	sub	sp, sp, #188	; 0xbc
   120d4:	ldr	r4, [r6]
   120d8:	ldr	r0, [r4]
   120dc:	cmp	r0, #0
   120e0:	beq	12ff0 <__assert_fail@plt+0x1af8>
   120e4:	ldr	r1, [pc, #3968]	; 1306c <__assert_fail@plt+0x1b74>
   120e8:	bl	111bc <strcmp@plt>
   120ec:	cmp	r0, #0
   120f0:	moveq	r3, #1
   120f4:	movne	r3, #0
   120f8:	add	r5, r4, r3, lsl #2
   120fc:	str	r5, [r6]
   12100:	ldr	r0, [r4, r3, lsl #2]
   12104:	beq	12474 <__assert_fail@plt+0xf7c>
   12108:	cmp	r0, #0
   1210c:	beq	12ff0 <__assert_fail@plt+0x1af8>
   12110:	ldr	r1, [pc, #3928]	; 13070 <__assert_fail@plt+0x1b78>
   12114:	bl	111bc <strcmp@plt>
   12118:	cmp	r0, #0
   1211c:	moveq	r3, #1
   12120:	movne	r3, #0
   12124:	add	r4, r5, r3, lsl #2
   12128:	str	r4, [r6]
   1212c:	ldr	r0, [r5, r3, lsl #2]
   12130:	bne	12224 <__assert_fail@plt+0xd2c>
   12134:	cmp	r0, #0
   12138:	beq	12724 <__assert_fail@plt+0x122c>
   1213c:	ldr	r1, [pc, #3888]	; 13074 <__assert_fail@plt+0x1b7c>
   12140:	bl	111bc <strcmp@plt>
   12144:	cmp	r0, #0
   12148:	moveq	r2, #1
   1214c:	movne	r2, #0
   12150:	add	r3, r4, r2, lsl #2
   12154:	str	r3, [r6]
   12158:	bne	12724 <__assert_fail@plt+0x122c>
   1215c:	ldr	r4, [r4, r2, lsl #2]
   12160:	cmp	r4, #0
   12164:	beq	12ff0 <__assert_fail@plt+0x1af8>
   12168:	add	r3, r3, #4
   1216c:	mov	r0, #16
   12170:	str	r3, [r6]
   12174:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   12178:	mov	r3, #1
   1217c:	mov	r7, r0
   12180:	mov	r0, r4
   12184:	str	r3, [r7]
   12188:	bl	2a6d0 <__assert_fail@plt+0x191d8>
   1218c:	str	r0, [r7, #4]
   12190:	ldr	r4, [r6]
   12194:	ldr	r0, [r4]
   12198:	cmp	r0, #0
   1219c:	beq	12714 <__assert_fail@plt+0x121c>
   121a0:	ldr	r1, [pc, #3788]	; 13074 <__assert_fail@plt+0x1b7c>
   121a4:	bl	111bc <strcmp@plt>
   121a8:	cmp	r0, #0
   121ac:	moveq	r2, #1
   121b0:	movne	r2, #0
   121b4:	add	r3, r4, r2, lsl #2
   121b8:	str	r3, [r6]
   121bc:	bne	12714 <__assert_fail@plt+0x121c>
   121c0:	ldr	r5, [r4, r2, lsl #2]
   121c4:	cmp	r5, #0
   121c8:	beq	12ff0 <__assert_fail@plt+0x1af8>
   121cc:	add	r3, r3, #4
   121d0:	mov	r0, #16
   121d4:	str	r3, [r6]
   121d8:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   121dc:	mov	r3, #1
   121e0:	mov	r4, r0
   121e4:	mov	r0, r5
   121e8:	str	r3, [r4]
   121ec:	bl	2a6d0 <__assert_fail@plt+0x191d8>
   121f0:	str	r0, [r4, #4]
   121f4:	cmp	r8, #0
   121f8:	bne	12600 <__assert_fail@plt+0x1108>
   121fc:	ldr	r3, [r4]
   12200:	cmp	r3, #1
   12204:	beq	1251c <__assert_fail@plt+0x1024>
   12208:	add	r0, r4, #4
   1220c:	bl	113e4 <__gmpz_clear@plt>
   12210:	mov	r0, r4
   12214:	bl	14214 <__assert_fail@plt+0x2d1c>
   12218:	mov	r0, r7
   1221c:	add	sp, sp, #188	; 0xbc
   12220:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12224:	cmp	r0, #0
   12228:	beq	12ff0 <__assert_fail@plt+0x1af8>
   1222c:	ldr	r1, [pc, #3652]	; 13078 <__assert_fail@plt+0x1b80>
   12230:	bl	111bc <strcmp@plt>
   12234:	cmp	r0, #0
   12238:	moveq	r3, #1
   1223c:	movne	r3, #0
   12240:	add	r5, r4, r3, lsl #2
   12244:	str	r5, [r6]
   12248:	ldr	r0, [r4, r3, lsl #2]
   1224c:	beq	12528 <__assert_fail@plt+0x1030>
   12250:	cmp	r0, #0
   12254:	beq	12ff0 <__assert_fail@plt+0x1af8>
   12258:	ldr	r1, [pc, #3612]	; 1307c <__assert_fail@plt+0x1b84>
   1225c:	bl	111bc <strcmp@plt>
   12260:	cmp	r0, #0
   12264:	moveq	r3, #1
   12268:	movne	r3, #0
   1226c:	add	r4, r5, r3, lsl #2
   12270:	str	r4, [r6]
   12274:	ldr	r0, [r5, r3, lsl #2]
   12278:	bne	12734 <__assert_fail@plt+0x123c>
   1227c:	cmp	r0, #0
   12280:	beq	1290c <__assert_fail@plt+0x1414>
   12284:	ldr	r1, [pc, #3560]	; 13074 <__assert_fail@plt+0x1b7c>
   12288:	bl	111bc <strcmp@plt>
   1228c:	cmp	r0, #0
   12290:	moveq	r2, #1
   12294:	movne	r2, #0
   12298:	add	r3, r4, r2, lsl #2
   1229c:	str	r3, [r6]
   122a0:	bne	1290c <__assert_fail@plt+0x1414>
   122a4:	ldr	r5, [r4, r2, lsl #2]
   122a8:	cmp	r5, #0
   122ac:	beq	12ff0 <__assert_fail@plt+0x1af8>
   122b0:	add	r3, r3, #4
   122b4:	mov	r0, #16
   122b8:	str	r3, [r6]
   122bc:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   122c0:	mov	r3, #1
   122c4:	mov	r4, r0
   122c8:	mov	r0, r5
   122cc:	str	r3, [r4]
   122d0:	bl	2a6d0 <__assert_fail@plt+0x191d8>
   122d4:	str	r0, [r4, #4]
   122d8:	ldr	r5, [r6]
   122dc:	ldr	r0, [r5]
   122e0:	cmp	r0, #0
   122e4:	beq	128fc <__assert_fail@plt+0x1404>
   122e8:	ldr	r1, [pc, #3460]	; 13074 <__assert_fail@plt+0x1b7c>
   122ec:	bl	111bc <strcmp@plt>
   122f0:	cmp	r0, #0
   122f4:	moveq	r2, #1
   122f8:	movne	r2, #0
   122fc:	add	r3, r5, r2, lsl #2
   12300:	str	r3, [r6]
   12304:	bne	128fc <__assert_fail@plt+0x1404>
   12308:	ldr	r7, [r5, r2, lsl #2]
   1230c:	cmp	r7, #0
   12310:	beq	12ff0 <__assert_fail@plt+0x1af8>
   12314:	add	r3, r3, #4
   12318:	mov	r0, #16
   1231c:	str	r3, [r6]
   12320:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   12324:	mov	r3, #1
   12328:	mov	r5, r0
   1232c:	mov	r0, r7
   12330:	str	r3, [r5]
   12334:	bl	2a6d0 <__assert_fail@plt+0x191d8>
   12338:	str	r0, [r5, #4]
   1233c:	ldr	r7, [r6]
   12340:	ldr	r0, [r7]
   12344:	cmp	r0, #0
   12348:	beq	128ec <__assert_fail@plt+0x13f4>
   1234c:	ldr	r1, [pc, #3360]	; 13074 <__assert_fail@plt+0x1b7c>
   12350:	bl	111bc <strcmp@plt>
   12354:	cmp	r0, #0
   12358:	moveq	r2, #1
   1235c:	movne	r2, #0
   12360:	add	r3, r7, r2, lsl #2
   12364:	str	r3, [r6]
   12368:	bne	128ec <__assert_fail@plt+0x13f4>
   1236c:	ldr	r7, [r7, r2, lsl #2]
   12370:	cmp	r7, #0
   12374:	beq	12ff0 <__assert_fail@plt+0x1af8>
   12378:	add	r3, r3, #4
   1237c:	mov	r0, #16
   12380:	str	r3, [r6]
   12384:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   12388:	mov	r3, #1
   1238c:	mov	r6, r0
   12390:	mov	r0, r7
   12394:	str	r3, [r6]
   12398:	bl	2a6d0 <__assert_fail@plt+0x191d8>
   1239c:	str	r0, [r6, #4]
   123a0:	ldr	r0, [r4]
   123a4:	cmp	r0, #0
   123a8:	beq	128c4 <__assert_fail@plt+0x13cc>
   123ac:	cmp	r0, #1
   123b0:	bne	125fc <__assert_fail@plt+0x1104>
   123b4:	ldr	r3, [r5]
   123b8:	cmp	r3, #0
   123bc:	beq	12858 <__assert_fail@plt+0x1360>
   123c0:	cmp	r3, #1
   123c4:	bne	125fc <__assert_fail@plt+0x1104>
   123c8:	ldr	r7, [r5, #4]
   123cc:	ldrb	r1, [r7]
   123d0:	cmp	r1, #45	; 0x2d
   123d4:	movne	r1, r7
   123d8:	addeq	r1, r7, #1
   123dc:	b	123ec <__assert_fail@plt+0xef4>
   123e0:	ldrb	r3, [r1, #1]!
   123e4:	cmp	r3, #0
   123e8:	beq	12834 <__assert_fail@plt+0x133c>
   123ec:	ldrb	r3, [r1]
   123f0:	sub	r3, r3, #48	; 0x30
   123f4:	cmp	r3, #9
   123f8:	bls	123e0 <__assert_fail@plt+0xee8>
   123fc:	mov	r0, #16
   12400:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   12404:	mov	r3, #1
   12408:	mov	r7, r0
   1240c:	str	r3, [r0]
   12410:	ldr	r0, [pc, #3176]	; 13080 <__assert_fail@plt+0x1b88>
   12414:	bl	2a6d0 <__assert_fail@plt+0x191d8>
   12418:	str	r0, [r7, #4]
   1241c:	ldr	r3, [r4]
   12420:	cmp	r3, #1
   12424:	beq	12d6c <__assert_fail@plt+0x1874>
   12428:	add	r0, r4, #4
   1242c:	bl	113e4 <__gmpz_clear@plt>
   12430:	mov	r0, r4
   12434:	bl	14214 <__assert_fail@plt+0x2d1c>
   12438:	ldr	r3, [r5]
   1243c:	cmp	r3, #1
   12440:	beq	12d60 <__assert_fail@plt+0x1868>
   12444:	add	r0, r5, #4
   12448:	bl	113e4 <__gmpz_clear@plt>
   1244c:	mov	r0, r5
   12450:	bl	14214 <__assert_fail@plt+0x2d1c>
   12454:	ldr	r3, [r6]
   12458:	cmp	r3, #1
   1245c:	beq	12d78 <__assert_fail@plt+0x1880>
   12460:	add	r0, r6, #4
   12464:	bl	113e4 <__gmpz_clear@plt>
   12468:	mov	r0, r6
   1246c:	bl	14214 <__assert_fail@plt+0x2d1c>
   12470:	b	12218 <__assert_fail@plt+0xd20>
   12474:	cmp	r0, #0
   12478:	beq	12704 <__assert_fail@plt+0x120c>
   1247c:	ldr	r1, [pc, #3056]	; 13074 <__assert_fail@plt+0x1b7c>
   12480:	bl	111bc <strcmp@plt>
   12484:	cmp	r0, #0
   12488:	moveq	r2, #1
   1248c:	movne	r2, #0
   12490:	add	r3, r5, r2, lsl #2
   12494:	str	r3, [r6]
   12498:	bne	12704 <__assert_fail@plt+0x120c>
   1249c:	ldr	r5, [r5, r2, lsl #2]
   124a0:	cmp	r5, #0
   124a4:	beq	12ff0 <__assert_fail@plt+0x1af8>
   124a8:	add	r3, r3, #4
   124ac:	mov	r0, #16
   124b0:	str	r3, [r6]
   124b4:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   124b8:	mov	r3, #1
   124bc:	mov	r4, r0
   124c0:	mov	r0, r5
   124c4:	str	r3, [r4]
   124c8:	bl	2a6d0 <__assert_fail@plt+0x191d8>
   124cc:	str	r0, [r4, #4]
   124d0:	ldr	r0, [r4]
   124d4:	cmp	r0, #0
   124d8:	beq	126dc <__assert_fail@plt+0x11e4>
   124dc:	cmp	r0, #1
   124e0:	bne	125fc <__assert_fail@plt+0x1104>
   124e4:	ldr	r6, [r4, #4]
   124e8:	mov	r0, r6
   124ec:	bl	146e8 <__assert_fail@plt+0x31f0>
   124f0:	mov	r5, r0
   124f4:	mov	r0, #16
   124f8:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   124fc:	mov	r3, #0
   12500:	mov	r1, r5
   12504:	mov	r7, r0
   12508:	str	r3, [r0], #4
   1250c:	bl	11474 <__gmpz_init_set_ui@plt>
   12510:	ldr	r3, [r4]
   12514:	cmp	r3, #1
   12518:	bne	12208 <__assert_fail@plt+0xd10>
   1251c:	ldr	r0, [r4, #4]
   12520:	bl	14214 <__assert_fail@plt+0x2d1c>
   12524:	b	12210 <__assert_fail@plt+0xd18>
   12528:	cmp	r0, #0
   1252c:	beq	128a4 <__assert_fail@plt+0x13ac>
   12530:	ldr	r1, [pc, #2876]	; 13074 <__assert_fail@plt+0x1b7c>
   12534:	bl	111bc <strcmp@plt>
   12538:	cmp	r0, #0
   1253c:	moveq	r2, #1
   12540:	movne	r2, #0
   12544:	add	r3, r5, r2, lsl #2
   12548:	str	r3, [r6]
   1254c:	bne	128a4 <__assert_fail@plt+0x13ac>
   12550:	ldr	r4, [r5, r2, lsl #2]
   12554:	cmp	r4, #0
   12558:	beq	12ff0 <__assert_fail@plt+0x1af8>
   1255c:	add	r3, r3, #4
   12560:	mov	r0, #16
   12564:	str	r3, [r6]
   12568:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   1256c:	mov	r3, #1
   12570:	mov	r9, r0
   12574:	mov	r0, r4
   12578:	str	r3, [r9]
   1257c:	bl	2a6d0 <__assert_fail@plt+0x191d8>
   12580:	str	r0, [r9, #4]
   12584:	ldr	r4, [r6]
   12588:	ldr	r0, [r4]
   1258c:	cmp	r0, #0
   12590:	beq	128b4 <__assert_fail@plt+0x13bc>
   12594:	ldr	r1, [pc, #2776]	; 13074 <__assert_fail@plt+0x1b7c>
   12598:	bl	111bc <strcmp@plt>
   1259c:	cmp	r0, #0
   125a0:	moveq	r2, #1
   125a4:	movne	r2, #0
   125a8:	add	r3, r4, r2, lsl #2
   125ac:	str	r3, [r6]
   125b0:	bne	128b4 <__assert_fail@plt+0x13bc>
   125b4:	ldr	r4, [r4, r2, lsl #2]
   125b8:	cmp	r4, #0
   125bc:	beq	12ff0 <__assert_fail@plt+0x1af8>
   125c0:	add	r3, r3, #4
   125c4:	mov	r0, #16
   125c8:	str	r3, [r6]
   125cc:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   125d0:	mov	r3, #1
   125d4:	mov	r8, r0
   125d8:	mov	r0, r4
   125dc:	str	r3, [r8]
   125e0:	bl	2a6d0 <__assert_fail@plt+0x191d8>
   125e4:	str	r0, [r8, #4]
   125e8:	ldr	r0, [r9]
   125ec:	cmp	r0, #0
   125f0:	beq	12634 <__assert_fail@plt+0x113c>
   125f4:	cmp	r0, #1
   125f8:	beq	12658 <__assert_fail@plt+0x1160>
   125fc:	bl	114ec <abort@plt>
   12600:	mov	r1, r4
   12604:	mov	r0, r7
   12608:	bl	11c80 <__assert_fail@plt+0x788>
   1260c:	ldr	r3, [r7]
   12610:	cmp	r3, #1
   12614:	mov	r5, r0
   12618:	beq	12944 <__assert_fail@plt+0x144c>
   1261c:	add	r0, r7, #4
   12620:	bl	113e4 <__gmpz_clear@plt>
   12624:	mov	r0, r7
   12628:	bl	14214 <__assert_fail@plt+0x2d1c>
   1262c:	mov	r7, r5
   12630:	b	121fc <__assert_fail@plt+0xd04>
   12634:	add	r4, r9, #4
   12638:	mov	r2, r4
   1263c:	mov	r1, #10
   12640:	bl	11294 <__gmpz_get_str@plt>
   12644:	mov	r5, r0
   12648:	mov	r0, r4
   1264c:	bl	113e4 <__gmpz_clear@plt>
   12650:	mov	r3, #1
   12654:	stm	r9, {r3, r5}
   12658:	ldr	r0, [r8]
   1265c:	cmp	r0, #0
   12660:	beq	1291c <__assert_fail@plt+0x1424>
   12664:	cmp	r0, #1
   12668:	bne	125fc <__assert_fail@plt+0x1104>
   1266c:	ldr	fp, [r8, #4]
   12670:	ldrb	r3, [fp]
   12674:	cmp	r3, #0
   12678:	bne	12950 <__assert_fail@plt+0x1458>
   1267c:	mov	r3, #0
   12680:	str	r3, [sp]
   12684:	mov	r0, #16
   12688:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   1268c:	mov	r3, #0
   12690:	ldr	r1, [sp]
   12694:	mov	r7, r0
   12698:	str	r3, [r0], #4
   1269c:	bl	11474 <__gmpz_init_set_ui@plt>
   126a0:	ldr	r3, [r9]
   126a4:	cmp	r3, #1
   126a8:	beq	12c44 <__assert_fail@plt+0x174c>
   126ac:	add	r0, r9, #4
   126b0:	bl	113e4 <__gmpz_clear@plt>
   126b4:	mov	r0, r9
   126b8:	bl	14214 <__assert_fail@plt+0x2d1c>
   126bc:	ldr	r3, [r8]
   126c0:	cmp	r3, #1
   126c4:	beq	12c50 <__assert_fail@plt+0x1758>
   126c8:	add	r0, r8, #4
   126cc:	bl	113e4 <__gmpz_clear@plt>
   126d0:	mov	r0, r8
   126d4:	bl	14214 <__assert_fail@plt+0x2d1c>
   126d8:	b	12218 <__assert_fail@plt+0xd20>
   126dc:	add	r5, r4, #4
   126e0:	mov	r2, r5
   126e4:	mov	r1, #10
   126e8:	bl	11294 <__gmpz_get_str@plt>
   126ec:	mov	r6, r0
   126f0:	mov	r0, r5
   126f4:	bl	113e4 <__gmpz_clear@plt>
   126f8:	mov	r3, #1
   126fc:	stm	r4, {r3, r6}
   12700:	b	124e8 <__assert_fail@plt+0xff0>
   12704:	mov	r0, r8
   12708:	bl	120c4 <__assert_fail@plt+0xbcc>
   1270c:	mov	r4, r0
   12710:	b	124d0 <__assert_fail@plt+0xfd8>
   12714:	mov	r0, r8
   12718:	bl	120c4 <__assert_fail@plt+0xbcc>
   1271c:	mov	r4, r0
   12720:	b	121f4 <__assert_fail@plt+0xcfc>
   12724:	mov	r0, r8
   12728:	bl	120c4 <__assert_fail@plt+0xbcc>
   1272c:	mov	r7, r0
   12730:	b	12190 <__assert_fail@plt+0xc98>
   12734:	cmp	r0, #0
   12738:	beq	12ff0 <__assert_fail@plt+0x1af8>
   1273c:	ldr	r1, [pc, #2368]	; 13084 <__assert_fail@plt+0x1b8c>
   12740:	bl	111bc <strcmp@plt>
   12744:	cmp	r0, #0
   12748:	moveq	r3, #1
   1274c:	movne	r3, #0
   12750:	add	r5, r4, r3, lsl #2
   12754:	str	r5, [r6]
   12758:	bne	127d4 <__assert_fail@plt+0x12dc>
   1275c:	mov	r0, r8
   12760:	bl	13efc <__assert_fail@plt+0x2a04>
   12764:	ldr	r5, [r6]
   12768:	ldr	r4, [r5]
   1276c:	cmp	r4, #0
   12770:	mov	r7, r0
   12774:	beq	1304c <__assert_fail@plt+0x1b54>
   12778:	mov	r0, r4
   1277c:	ldr	r1, [pc, #2308]	; 13088 <__assert_fail@plt+0x1b90>
   12780:	bl	111bc <strcmp@plt>
   12784:	cmp	r0, #0
   12788:	moveq	r4, #1
   1278c:	movne	r4, #0
   12790:	add	r3, r5, r4, lsl #2
   12794:	str	r3, [r6]
   12798:	beq	12218 <__assert_fail@plt+0xd20>
   1279c:	mov	r2, #5
   127a0:	ldr	r1, [pc, #2276]	; 1308c <__assert_fail@plt+0x1b94>
   127a4:	mov	r0, #0
   127a8:	bl	11288 <dcgettext@plt>
   127ac:	ldr	r2, [r5, r4, lsl #2]
   127b0:	mov	r6, r0
   127b4:	mov	r1, #8
   127b8:	mov	r0, #0
   127bc:	bl	16a3c <__assert_fail@plt+0x5544>
   127c0:	mov	r2, r6
   127c4:	mov	r1, #0
   127c8:	mov	r3, r0
   127cc:	mov	r0, #2
   127d0:	bl	11324 <error@plt>
   127d4:	ldr	r4, [r4, r3, lsl #2]
   127d8:	cmp	r4, #0
   127dc:	beq	12808 <__assert_fail@plt+0x1310>
   127e0:	mov	r0, r4
   127e4:	ldr	r1, [pc, #2204]	; 13088 <__assert_fail@plt+0x1b90>
   127e8:	bl	111bc <strcmp@plt>
   127ec:	subs	r4, r0, #0
   127f0:	moveq	r3, #4
   127f4:	movne	r3, #0
   127f8:	add	r5, r5, r3
   127fc:	str	r5, [r6]
   12800:	beq	13030 <__assert_fail@plt+0x1b38>
   12804:	ldr	r4, [r5]
   12808:	add	r5, r5, #4
   1280c:	mov	r0, #16
   12810:	str	r5, [r6]
   12814:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   12818:	mov	r3, #1
   1281c:	mov	r7, r0
   12820:	mov	r0, r4
   12824:	str	r3, [r7]
   12828:	bl	2a6d0 <__assert_fail@plt+0x191d8>
   1282c:	str	r0, [r7, #4]
   12830:	b	12218 <__assert_fail@plt+0xd20>
   12834:	mov	r2, #10
   12838:	mov	r1, r7
   1283c:	add	r0, r5, #4
   12840:	bl	114bc <__gmpz_init_set_str@plt>
   12844:	subs	r8, r0, #0
   12848:	bne	12ff4 <__assert_fail@plt+0x1afc>
   1284c:	mov	r0, r7
   12850:	bl	14214 <__assert_fail@plt+0x2d1c>
   12854:	str	r8, [r5]
   12858:	ldr	r3, [r6]
   1285c:	cmp	r3, #0
   12860:	beq	12ca4 <__assert_fail@plt+0x17ac>
   12864:	cmp	r3, #1
   12868:	bne	125fc <__assert_fail@plt+0x1104>
   1286c:	ldr	r7, [r6, #4]
   12870:	ldrb	r1, [r7]
   12874:	cmp	r1, #45	; 0x2d
   12878:	movne	r1, r7
   1287c:	addeq	r1, r7, #1
   12880:	b	12890 <__assert_fail@plt+0x1398>
   12884:	ldrb	r3, [r1, #1]!
   12888:	cmp	r3, #0
   1288c:	beq	12c80 <__assert_fail@plt+0x1788>
   12890:	ldrb	r3, [r1]
   12894:	sub	r3, r3, #48	; 0x30
   12898:	cmp	r3, #9
   1289c:	bls	12884 <__assert_fail@plt+0x138c>
   128a0:	b	123fc <__assert_fail@plt+0xf04>
   128a4:	mov	r0, r8
   128a8:	bl	120c4 <__assert_fail@plt+0xbcc>
   128ac:	mov	r9, r0
   128b0:	b	12584 <__assert_fail@plt+0x108c>
   128b4:	mov	r0, r8
   128b8:	bl	120c4 <__assert_fail@plt+0xbcc>
   128bc:	mov	r8, r0
   128c0:	b	125e8 <__assert_fail@plt+0x10f0>
   128c4:	add	r7, r4, #4
   128c8:	mov	r2, r7
   128cc:	mov	r1, #10
   128d0:	bl	11294 <__gmpz_get_str@plt>
   128d4:	mov	r8, r0
   128d8:	mov	r0, r7
   128dc:	bl	113e4 <__gmpz_clear@plt>
   128e0:	mov	r3, #1
   128e4:	stm	r4, {r3, r8}
   128e8:	b	123b4 <__assert_fail@plt+0xebc>
   128ec:	mov	r0, r8
   128f0:	bl	120c4 <__assert_fail@plt+0xbcc>
   128f4:	mov	r6, r0
   128f8:	b	123a0 <__assert_fail@plt+0xea8>
   128fc:	mov	r0, r8
   12900:	bl	120c4 <__assert_fail@plt+0xbcc>
   12904:	mov	r5, r0
   12908:	b	1233c <__assert_fail@plt+0xe44>
   1290c:	mov	r0, r8
   12910:	bl	120c4 <__assert_fail@plt+0xbcc>
   12914:	mov	r4, r0
   12918:	b	122d8 <__assert_fail@plt+0xde0>
   1291c:	add	r4, r8, #4
   12920:	mov	r2, r4
   12924:	mov	r1, #10
   12928:	bl	11294 <__gmpz_get_str@plt>
   1292c:	mov	fp, r0
   12930:	mov	r0, r4
   12934:	bl	113e4 <__gmpz_clear@plt>
   12938:	mov	r3, #1
   1293c:	stm	r8, {r3, fp}
   12940:	b	12670 <__assert_fail@plt+0x1178>
   12944:	ldr	r0, [r7, #4]
   12948:	bl	14214 <__assert_fail@plt+0x2d1c>
   1294c:	b	12624 <__assert_fail@plt+0x112c>
   12950:	ldr	r4, [r9, #4]
   12954:	bl	11300 <__ctype_get_mb_cur_max@plt>
   12958:	cmp	r0, #1
   1295c:	bls	12c5c <__assert_fail@plt+0x1764>
   12960:	mov	r3, #0
   12964:	ldr	r7, [pc, #1828]	; 13090 <__assert_fail@plt+0x1b98>
   12968:	mov	r6, r3
   1296c:	mov	r5, #1
   12970:	str	r3, [sp]
   12974:	str	r4, [sp, #32]
   12978:	strb	r3, [sp, #16]
   1297c:	str	r3, [sp, #20]
   12980:	strb	r3, [sp, #28]
   12984:	str	r3, [sp, #24]
   12988:	ldrb	r3, [sp, #16]
   1298c:	cmp	r3, #0
   12990:	bne	12be0 <__assert_fail@plt+0x16e8>
   12994:	ldrb	r3, [r4]
   12998:	and	r2, r3, #31
   1299c:	lsr	r3, r3, #5
   129a0:	ldr	r3, [r7, r3, lsl #2]
   129a4:	lsr	r3, r3, r2
   129a8:	tst	r3, #1
   129ac:	beq	12bcc <__assert_fail@plt+0x16d4>
   129b0:	str	r5, [sp, #36]	; 0x24
   129b4:	ldrb	r4, [r4]
   129b8:	strb	r5, [sp, #40]	; 0x28
   129bc:	str	r4, [sp, #44]	; 0x2c
   129c0:	cmp	r4, #0
   129c4:	strb	r5, [sp, #28]
   129c8:	bne	129e8 <__assert_fail@plt+0x14f0>
   129cc:	str	r4, [sp]
   129d0:	b	12684 <__assert_fail@plt+0x118c>
   129d4:	ldr	r0, [sp, #32]
   129d8:	bl	113c0 <strlen@plt>
   129dc:	strb	r6, [sp, #40]	; 0x28
   129e0:	str	r0, [sp, #36]	; 0x24
   129e4:	strb	r5, [sp, #28]
   129e8:	ldr	r3, [sp]
   129ec:	ldr	r4, [sp, #36]	; 0x24
   129f0:	add	r3, r3, #1
   129f4:	cmp	r4, #1
   129f8:	str	r3, [sp]
   129fc:	bne	12a28 <__assert_fail@plt+0x1530>
   12a00:	ldr	sl, [sp, #32]
   12a04:	mov	r0, fp
   12a08:	ldrb	r1, [sl]
   12a0c:	bl	144f0 <__assert_fail@plt+0x2ff8>
   12a10:	cmp	r0, #0
   12a14:	bne	12684 <__assert_fail@plt+0x118c>
   12a18:	add	r4, sl, r4
   12a1c:	str	r4, [sp, #32]
   12a20:	strb	r6, [sp, #28]
   12a24:	b	12988 <__assert_fail@plt+0x1490>
   12a28:	strb	r6, [sp, #72]	; 0x48
   12a2c:	ldrb	r3, [sp, #72]	; 0x48
   12a30:	str	fp, [sp, #88]	; 0x58
   12a34:	str	r6, [sp, #76]	; 0x4c
   12a38:	cmp	r3, #0
   12a3c:	str	r6, [sp, #80]	; 0x50
   12a40:	strb	r6, [sp, #84]	; 0x54
   12a44:	mov	r4, fp
   12a48:	bne	12ac4 <__assert_fail@plt+0x15cc>
   12a4c:	ldrb	r3, [r4]
   12a50:	and	r2, r3, #31
   12a54:	lsr	r3, r3, #5
   12a58:	ldr	r3, [r7, r3, lsl #2]
   12a5c:	lsr	r3, r3, r2
   12a60:	tst	r3, #1
   12a64:	beq	12b54 <__assert_fail@plt+0x165c>
   12a68:	str	r5, [sp, #92]	; 0x5c
   12a6c:	ldrb	r4, [r4]
   12a70:	strb	r5, [sp, #96]	; 0x60
   12a74:	str	r4, [sp, #100]	; 0x64
   12a78:	cmp	r4, #0
   12a7c:	strb	r5, [sp, #84]	; 0x54
   12a80:	ldreq	sl, [sp, #32]
   12a84:	ldreq	r4, [sp, #36]	; 0x24
   12a88:	beq	12a18 <__assert_fail@plt+0x1520>
   12a8c:	ldrb	r3, [sp, #40]	; 0x28
   12a90:	cmp	r3, #0
   12a94:	bne	12b20 <__assert_fail@plt+0x1628>
   12a98:	ldr	sl, [sp, #88]	; 0x58
   12a9c:	ldr	r4, [sp, #92]	; 0x5c
   12aa0:	ldr	r2, [sp, #36]	; 0x24
   12aa4:	cmp	r4, r2
   12aa8:	beq	12b38 <__assert_fail@plt+0x1640>
   12aac:	ldrb	r3, [sp, #72]	; 0x48
   12ab0:	add	r4, sl, r4
   12ab4:	str	r4, [sp, #88]	; 0x58
   12ab8:	cmp	r3, #0
   12abc:	strb	r6, [sp, #84]	; 0x54
   12ac0:	beq	12a4c <__assert_fail@plt+0x1554>
   12ac4:	bl	11300 <__ctype_get_mb_cur_max@plt>
   12ac8:	mov	r1, r0
   12acc:	mov	r0, r4
   12ad0:	bl	2940c <__assert_fail@plt+0x17f14>
   12ad4:	add	r3, sp, #76	; 0x4c
   12ad8:	mov	r1, r4
   12adc:	mov	r2, r0
   12ae0:	add	r0, sp, #100	; 0x64
   12ae4:	bl	1449c <__assert_fail@plt+0x2fa4>
   12ae8:	cmn	r0, #1
   12aec:	str	r0, [sp, #92]	; 0x5c
   12af0:	beq	12b6c <__assert_fail@plt+0x1674>
   12af4:	cmn	r0, #2
   12af8:	beq	12bb4 <__assert_fail@plt+0x16bc>
   12afc:	cmp	r0, #0
   12b00:	beq	12b80 <__assert_fail@plt+0x1688>
   12b04:	ldr	r4, [sp, #100]	; 0x64
   12b08:	add	r0, sp, #76	; 0x4c
   12b0c:	strb	r5, [sp, #96]	; 0x60
   12b10:	bl	11264 <mbsinit@plt>
   12b14:	cmp	r0, #0
   12b18:	strbne	r6, [sp, #72]	; 0x48
   12b1c:	b	12a78 <__assert_fail@plt+0x1580>
   12b20:	ldr	r3, [sp, #44]	; 0x2c
   12b24:	cmp	r3, r4
   12b28:	beq	12684 <__assert_fail@plt+0x118c>
   12b2c:	ldr	r4, [sp, #92]	; 0x5c
   12b30:	ldr	sl, [sp, #88]	; 0x58
   12b34:	b	12aac <__assert_fail@plt+0x15b4>
   12b38:	mov	r2, r4
   12b3c:	ldr	r1, [sp, #32]
   12b40:	mov	r0, sl
   12b44:	bl	11270 <memcmp@plt>
   12b48:	cmp	r0, #0
   12b4c:	beq	12684 <__assert_fail@plt+0x118c>
   12b50:	b	12aac <__assert_fail@plt+0x15b4>
   12b54:	add	r0, sp, #76	; 0x4c
   12b58:	bl	11264 <mbsinit@plt>
   12b5c:	cmp	r0, #0
   12b60:	beq	13008 <__assert_fail@plt+0x1b10>
   12b64:	strb	r5, [sp, #72]	; 0x48
   12b68:	b	12ac4 <__assert_fail@plt+0x15cc>
   12b6c:	ldr	sl, [sp, #88]	; 0x58
   12b70:	str	r5, [sp, #92]	; 0x5c
   12b74:	strb	r6, [sp, #96]	; 0x60
   12b78:	strb	r5, [sp, #84]	; 0x54
   12b7c:	b	12a9c <__assert_fail@plt+0x15a4>
   12b80:	ldr	sl, [sp, #88]	; 0x58
   12b84:	str	r5, [sp, #92]	; 0x5c
   12b88:	ldrb	r3, [sl]
   12b8c:	cmp	r3, #0
   12b90:	bne	1301c <__assert_fail@plt+0x1b24>
   12b94:	ldr	r4, [sp, #100]	; 0x64
   12b98:	cmp	r4, #0
   12b9c:	beq	12b08 <__assert_fail@plt+0x1610>
   12ba0:	ldr	r3, [pc, #1260]	; 13094 <__assert_fail@plt+0x1b9c>
   12ba4:	mov	r2, #172	; 0xac
   12ba8:	ldr	r1, [pc, #1256]	; 13098 <__assert_fail@plt+0x1ba0>
   12bac:	ldr	r0, [pc, #1256]	; 1309c <__assert_fail@plt+0x1ba4>
   12bb0:	bl	114f8 <__assert_fail@plt>
   12bb4:	ldr	sl, [sp, #88]	; 0x58
   12bb8:	mov	r0, sl
   12bbc:	bl	113c0 <strlen@plt>
   12bc0:	strb	r6, [sp, #96]	; 0x60
   12bc4:	str	r0, [sp, #92]	; 0x5c
   12bc8:	b	12b78 <__assert_fail@plt+0x1680>
   12bcc:	add	r0, sp, #20
   12bd0:	bl	11264 <mbsinit@plt>
   12bd4:	cmp	r0, #0
   12bd8:	beq	13008 <__assert_fail@plt+0x1b10>
   12bdc:	strb	r5, [sp, #16]
   12be0:	bl	11300 <__ctype_get_mb_cur_max@plt>
   12be4:	mov	r1, r0
   12be8:	mov	r0, r4
   12bec:	bl	2940c <__assert_fail@plt+0x17f14>
   12bf0:	add	r3, sp, #20
   12bf4:	mov	r1, r4
   12bf8:	mov	r2, r0
   12bfc:	add	r0, sp, #44	; 0x2c
   12c00:	bl	1449c <__assert_fail@plt+0x2fa4>
   12c04:	cmn	r0, #1
   12c08:	str	r0, [sp, #36]	; 0x24
   12c0c:	strbeq	r6, [sp, #40]	; 0x28
   12c10:	streq	r5, [sp, #36]	; 0x24
   12c14:	beq	129e4 <__assert_fail@plt+0x14ec>
   12c18:	cmn	r0, #2
   12c1c:	beq	129d4 <__assert_fail@plt+0x14dc>
   12c20:	cmp	r0, #0
   12c24:	beq	12d84 <__assert_fail@plt+0x188c>
   12c28:	ldr	r4, [sp, #44]	; 0x2c
   12c2c:	add	r0, sp, #20
   12c30:	strb	r5, [sp, #40]	; 0x28
   12c34:	bl	11264 <mbsinit@plt>
   12c38:	cmp	r0, #0
   12c3c:	strbne	r6, [sp, #16]
   12c40:	b	129c0 <__assert_fail@plt+0x14c8>
   12c44:	ldr	r0, [r9, #4]
   12c48:	bl	14214 <__assert_fail@plt+0x2d1c>
   12c4c:	b	126b4 <__assert_fail@plt+0x11bc>
   12c50:	ldr	r0, [r8, #4]
   12c54:	bl	14214 <__assert_fail@plt+0x2d1c>
   12c58:	b	126d0 <__assert_fail@plt+0x11d8>
   12c5c:	mov	r1, fp
   12c60:	mov	r0, r4
   12c64:	bl	111d4 <strcspn@plt>
   12c68:	ldrb	r3, [r4, r0]
   12c6c:	cmp	r3, #0
   12c70:	beq	1267c <__assert_fail@plt+0x1184>
   12c74:	add	r3, r0, #1
   12c78:	str	r3, [sp]
   12c7c:	b	12684 <__assert_fail@plt+0x118c>
   12c80:	mov	r2, #10
   12c84:	mov	r1, r7
   12c88:	add	r0, r6, #4
   12c8c:	bl	114bc <__gmpz_init_set_str@plt>
   12c90:	subs	r8, r0, #0
   12c94:	bne	12ff4 <__assert_fail@plt+0x1afc>
   12c98:	mov	r0, r7
   12c9c:	bl	14214 <__assert_fail@plt+0x2d1c>
   12ca0:	str	r8, [r6]
   12ca4:	ldr	r9, [r5, #8]
   12ca8:	cmp	r9, #0
   12cac:	blt	12da8 <__assert_fail@plt+0x18b0>
   12cb0:	cmp	r9, #1
   12cb4:	ble	12f80 <__assert_fail@plt+0x1a88>
   12cb8:	mov	r8, #0
   12cbc:	mvn	r9, #1
   12cc0:	ldr	r3, [r6, #8]
   12cc4:	cmp	r3, #0
   12cc8:	mvnlt	sl, #0
   12ccc:	blt	12cdc <__assert_fail@plt+0x17e4>
   12cd0:	cmp	r3, #1
   12cd4:	mvngt	sl, #1
   12cd8:	ble	12fac <__assert_fail@plt+0x1ab4>
   12cdc:	ldr	r7, [r4, #4]
   12ce0:	mov	r0, r7
   12ce4:	bl	113c0 <strlen@plt>
   12ce8:	mov	fp, r0
   12cec:	bl	11300 <__ctype_get_mb_cur_max@plt>
   12cf0:	cmp	r0, #1
   12cf4:	movls	r0, fp
   12cf8:	bls	12d04 <__assert_fail@plt+0x180c>
   12cfc:	mov	r0, r7
   12d00:	bl	146e8 <__assert_fail@plt+0x31f0>
   12d04:	cmp	r9, r0
   12d08:	movls	r3, r8
   12d0c:	orrhi	r3, r8, #1
   12d10:	cmp	r3, #0
   12d14:	bne	12d24 <__assert_fail@plt+0x182c>
   12d18:	sub	r2, sl, #1
   12d1c:	cmn	r2, #3
   12d20:	bls	12db4 <__assert_fail@plt+0x18bc>
   12d24:	ldr	r0, [pc, #852]	; 13080 <__assert_fail@plt+0x1b88>
   12d28:	bl	2a6d0 <__assert_fail@plt+0x191d8>
   12d2c:	str	r0, [sp, #4]
   12d30:	mov	r0, #16
   12d34:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   12d38:	ldr	r8, [sp, #4]
   12d3c:	mov	r3, #1
   12d40:	mov	r7, r0
   12d44:	str	r3, [r0]
   12d48:	mov	r0, r8
   12d4c:	bl	2a6d0 <__assert_fail@plt+0x191d8>
   12d50:	str	r0, [r7, #4]
   12d54:	mov	r0, r8
   12d58:	bl	14214 <__assert_fail@plt+0x2d1c>
   12d5c:	b	1241c <__assert_fail@plt+0xf24>
   12d60:	ldr	r0, [r5, #4]
   12d64:	bl	14214 <__assert_fail@plt+0x2d1c>
   12d68:	b	1244c <__assert_fail@plt+0xf54>
   12d6c:	ldr	r0, [r4, #4]
   12d70:	bl	14214 <__assert_fail@plt+0x2d1c>
   12d74:	b	12430 <__assert_fail@plt+0xf38>
   12d78:	ldr	r0, [r6, #4]
   12d7c:	bl	14214 <__assert_fail@plt+0x2d1c>
   12d80:	b	12468 <__assert_fail@plt+0xf70>
   12d84:	ldr	r3, [sp, #32]
   12d88:	str	r5, [sp, #36]	; 0x24
   12d8c:	ldrb	r3, [r3]
   12d90:	cmp	r3, #0
   12d94:	bne	1301c <__assert_fail@plt+0x1b24>
   12d98:	ldr	r4, [sp, #44]	; 0x2c
   12d9c:	cmp	r4, #0
   12da0:	beq	12c2c <__assert_fail@plt+0x1734>
   12da4:	b	12ba0 <__assert_fail@plt+0x16a8>
   12da8:	mov	r8, #0
   12dac:	mvn	r9, #0
   12db0:	b	12cc0 <__assert_fail@plt+0x17c8>
   12db4:	rsb	r2, r9, #1
   12db8:	add	r0, r2, r0
   12dbc:	cmp	r0, sl
   12dc0:	str	r3, [sp]
   12dc4:	movcc	sl, r0
   12dc8:	bl	11300 <__ctype_get_mb_cur_max@plt>
   12dcc:	ldr	r3, [sp]
   12dd0:	cmp	r0, #1
   12dd4:	beq	12fcc <__assert_fail@plt+0x1ad4>
   12dd8:	add	r0, fp, #1
   12ddc:	str	r3, [sp]
   12de0:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   12de4:	mov	r8, #1
   12de8:	ldr	r3, [sp]
   12dec:	str	r6, [sp, #8]
   12df0:	mov	fp, r8
   12df4:	str	r7, [sp, #144]	; 0x90
   12df8:	strb	r3, [sp, #128]	; 0x80
   12dfc:	str	r3, [sp, #132]	; 0x84
   12e00:	strb	r3, [sp, #140]	; 0x8c
   12e04:	str	r3, [sp, #136]	; 0x88
   12e08:	str	r4, [sp, #12]
   12e0c:	mov	r6, r0
   12e10:	str	r0, [sp, #4]
   12e14:	ldrb	r3, [sp, #128]	; 0x80
   12e18:	cmp	r3, #0
   12e1c:	bne	12ec8 <__assert_fail@plt+0x19d0>
   12e20:	ldrb	r3, [r7]
   12e24:	ldr	r1, [pc, #612]	; 13090 <__assert_fail@plt+0x1b98>
   12e28:	and	r2, r3, #31
   12e2c:	lsr	r3, r3, #5
   12e30:	ldr	r3, [r1, r3, lsl #2]
   12e34:	lsr	r3, r3, r2
   12e38:	tst	r3, #1
   12e3c:	beq	12eb4 <__assert_fail@plt+0x19bc>
   12e40:	str	fp, [sp, #148]	; 0x94
   12e44:	ldrb	r7, [r7]
   12e48:	strb	fp, [sp, #152]	; 0x98
   12e4c:	str	r7, [sp, #156]	; 0x9c
   12e50:	cmp	r7, #0
   12e54:	strb	fp, [sp, #140]	; 0x8c
   12e58:	bne	12e84 <__assert_fail@plt+0x198c>
   12e5c:	mov	r2, r6
   12e60:	ldr	r4, [sp, #12]
   12e64:	ldr	r6, [sp, #8]
   12e68:	mov	r3, #0
   12e6c:	strb	r3, [r2]
   12e70:	b	12d30 <__assert_fail@plt+0x1838>
   12e74:	ldrb	r3, [sp]
   12e78:	str	fp, [sp, #148]	; 0x94
   12e7c:	strb	r3, [sp, #152]	; 0x98
   12e80:	strb	fp, [sp, #140]	; 0x8c
   12e84:	cmp	sl, #0
   12e88:	beq	12e5c <__assert_fail@plt+0x1964>
   12e8c:	cmp	r9, r8
   12e90:	ldr	r4, [sp, #144]	; 0x90
   12e94:	ldr	r7, [sp, #148]	; 0x94
   12e98:	bls	12f28 <__assert_fail@plt+0x1a30>
   12e9c:	ldrb	r3, [sp]
   12ea0:	add	r7, r4, r7
   12ea4:	add	r8, r8, #1
   12ea8:	str	r7, [sp, #144]	; 0x90
   12eac:	strb	r3, [sp, #140]	; 0x8c
   12eb0:	b	12e14 <__assert_fail@plt+0x191c>
   12eb4:	add	r0, sp, #132	; 0x84
   12eb8:	bl	11264 <mbsinit@plt>
   12ebc:	cmp	r0, #0
   12ec0:	beq	13008 <__assert_fail@plt+0x1b10>
   12ec4:	strb	fp, [sp, #128]	; 0x80
   12ec8:	bl	11300 <__ctype_get_mb_cur_max@plt>
   12ecc:	mov	r1, r0
   12ed0:	mov	r0, r7
   12ed4:	bl	2940c <__assert_fail@plt+0x17f14>
   12ed8:	add	r3, sp, #132	; 0x84
   12edc:	mov	r1, r7
   12ee0:	mov	r2, r0
   12ee4:	add	r0, sp, #156	; 0x9c
   12ee8:	bl	1449c <__assert_fail@plt+0x2fa4>
   12eec:	cmn	r0, #1
   12ef0:	str	r0, [sp, #148]	; 0x94
   12ef4:	beq	12e74 <__assert_fail@plt+0x197c>
   12ef8:	cmn	r0, #2
   12efc:	beq	12f68 <__assert_fail@plt+0x1a70>
   12f00:	cmp	r0, #0
   12f04:	beq	12f44 <__assert_fail@plt+0x1a4c>
   12f08:	ldr	r7, [sp, #156]	; 0x9c
   12f0c:	add	r0, sp, #132	; 0x84
   12f10:	strb	fp, [sp, #152]	; 0x98
   12f14:	bl	11264 <mbsinit@plt>
   12f18:	cmp	r0, #0
   12f1c:	ldrbne	r3, [sp]
   12f20:	strbne	r3, [sp, #128]	; 0x80
   12f24:	b	12e50 <__assert_fail@plt+0x1958>
   12f28:	mov	r0, r6
   12f2c:	mov	r1, r4
   12f30:	mov	r2, r7
   12f34:	bl	11390 <mempcpy@plt>
   12f38:	sub	sl, sl, #1
   12f3c:	mov	r6, r0
   12f40:	b	12e9c <__assert_fail@plt+0x19a4>
   12f44:	ldr	r3, [sp, #144]	; 0x90
   12f48:	str	fp, [sp, #148]	; 0x94
   12f4c:	ldrb	r3, [r3]
   12f50:	cmp	r3, #0
   12f54:	bne	1301c <__assert_fail@plt+0x1b24>
   12f58:	ldr	r7, [sp, #156]	; 0x9c
   12f5c:	cmp	r7, #0
   12f60:	beq	12f0c <__assert_fail@plt+0x1a14>
   12f64:	b	12ba0 <__assert_fail@plt+0x16a8>
   12f68:	ldr	r0, [sp, #144]	; 0x90
   12f6c:	bl	113c0 <strlen@plt>
   12f70:	ldrb	r3, [sp]
   12f74:	strb	r3, [sp, #152]	; 0x98
   12f78:	str	r0, [sp, #148]	; 0x94
   12f7c:	b	12e80 <__assert_fail@plt+0x1988>
   12f80:	ldr	r3, [r5, #12]
   12f84:	cmp	r9, #0
   12f88:	moveq	r8, #1
   12f8c:	ldr	r3, [r3]
   12f90:	beq	12cc0 <__assert_fail@plt+0x17c8>
   12f94:	cmn	r3, #1
   12f98:	beq	12cb8 <__assert_fail@plt+0x17c0>
   12f9c:	clz	r8, r3
   12fa0:	mov	r9, r3
   12fa4:	lsr	r8, r8, #5
   12fa8:	b	12cc0 <__assert_fail@plt+0x17c8>
   12fac:	ldr	r2, [r6, #12]
   12fb0:	cmp	r3, #0
   12fb4:	ldr	sl, [r2]
   12fb8:	moveq	sl, r3
   12fbc:	beq	12cdc <__assert_fail@plt+0x17e4>
   12fc0:	cmn	sl, #1
   12fc4:	mvneq	sl, #1
   12fc8:	b	12cdc <__assert_fail@plt+0x17e4>
   12fcc:	add	r0, sl, #1
   12fd0:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   12fd4:	sub	r1, r9, #1
   12fd8:	mov	r2, sl
   12fdc:	add	r1, r7, r1
   12fe0:	str	r0, [sp, #4]
   12fe4:	bl	11390 <mempcpy@plt>
   12fe8:	mov	r2, r0
   12fec:	b	12e68 <__assert_fail@plt+0x1970>
   12ff0:	bl	11504 <__assert_fail@plt+0xc>
   12ff4:	mov	r3, r7
   12ff8:	ldr	r2, [pc, #160]	; 130a0 <__assert_fail@plt+0x1ba8>
   12ffc:	mov	r1, #34	; 0x22
   13000:	mov	r0, #3
   13004:	bl	11324 <error@plt>
   13008:	ldr	r3, [pc, #132]	; 13094 <__assert_fail@plt+0x1b9c>
   1300c:	mov	r2, #143	; 0x8f
   13010:	ldr	r1, [pc, #128]	; 13098 <__assert_fail@plt+0x1ba0>
   13014:	ldr	r0, [pc, #136]	; 130a4 <__assert_fail@plt+0x1bac>
   13018:	bl	114f8 <__assert_fail@plt>
   1301c:	ldr	r3, [pc, #112]	; 13094 <__assert_fail@plt+0x1b9c>
   13020:	mov	r2, #171	; 0xab
   13024:	ldr	r1, [pc, #108]	; 13098 <__assert_fail@plt+0x1ba0>
   13028:	ldr	r0, [pc, #120]	; 130a8 <__assert_fail@plt+0x1bb0>
   1302c:	bl	114f8 <__assert_fail@plt>
   13030:	mov	r2, #5
   13034:	ldr	r1, [pc, #112]	; 130ac <__assert_fail@plt+0x1bb4>
   13038:	bl	11288 <dcgettext@plt>
   1303c:	mov	r1, r4
   13040:	mov	r2, r0
   13044:	mov	r0, #2
   13048:	bl	11324 <error@plt>
   1304c:	mov	r2, #5
   13050:	ldr	r1, [pc, #88]	; 130b0 <__assert_fail@plt+0x1bb8>
   13054:	mov	r0, r4
   13058:	bl	11288 <dcgettext@plt>
   1305c:	ldr	r2, [r5, #-4]
   13060:	mov	r6, r0
   13064:	b	127b4 <__assert_fail@plt+0x12bc>
   13068:			; <UNDEFINED> instruction: 0x0003d1b0
   1306c:	andeq	fp, r2, r8, lsl fp
   13070:	andeq	fp, r2, r4, lsr #22
   13074:	andeq	fp, r2, r0, lsr #22
   13078:	andeq	fp, r2, ip, lsr #22
   1307c:	andeq	fp, r2, r4, lsr fp
   13080:	andeq	fp, r2, r0, lsr r5
   13084:	andeq	fp, r2, ip, lsr fp
   13088:	andeq	fp, r2, r8, ror #22
   1308c:	andeq	fp, r2, ip, ror #22
   13090:	andeq	fp, r2, r8, ror #26
   13094:	andeq	fp, r2, ip, lsl #3
   13098:	andeq	fp, r2, r0, lsr #21
   1309c:	andeq	fp, r2, r0, ror #21
   130a0:	andeq	fp, r2, r4, lsr #26
   130a4:			; <UNDEFINED> instruction: 0x0002bab0
   130a8:	andeq	fp, r2, r8, asr #21
   130ac:	muleq	r2, r8, fp
   130b0:	andeq	fp, r2, r0, asr #22
   130b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130b8:	mov	r6, r0
   130bc:	ldr	r4, [pc, #1480]	; 1368c <__assert_fail@plt+0x2194>
   130c0:	sub	sp, sp, #12
   130c4:	ldr	r5, [r4]
   130c8:	ldr	r0, [r5]
   130cc:	cmp	r0, #0
   130d0:	beq	13658 <__assert_fail@plt+0x2160>
   130d4:	ldr	r1, [pc, #1460]	; 13690 <__assert_fail@plt+0x2198>
   130d8:	bl	111bc <strcmp@plt>
   130dc:	cmp	r0, #0
   130e0:	moveq	r2, #1
   130e4:	movne	r2, #0
   130e8:	add	r3, r5, r2, lsl #2
   130ec:	str	r3, [r4]
   130f0:	bne	13658 <__assert_fail@plt+0x2160>
   130f4:	ldr	r5, [r5, r2, lsl #2]
   130f8:	cmp	r5, #0
   130fc:	beq	13668 <__assert_fail@plt+0x2170>
   13100:	add	r3, r3, #4
   13104:	mov	r0, #16
   13108:	str	r3, [r4]
   1310c:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   13110:	mov	r3, #1
   13114:	mov	r2, r0
   13118:	str	r0, [sp]
   1311c:	str	r3, [r2]
   13120:	mov	r0, r5
   13124:	mov	r5, r2
   13128:	bl	2a6d0 <__assert_fail@plt+0x191d8>
   1312c:	str	r0, [r5, #4]
   13130:	ldr	fp, [r4]
   13134:	ldr	r0, [fp]
   13138:	cmp	r0, #0
   1313c:	beq	13260 <__assert_fail@plt+0x1d68>
   13140:	ldr	r5, [pc, #1356]	; 13694 <__assert_fail@plt+0x219c>
   13144:	ldr	r7, [pc, #1348]	; 13690 <__assert_fail@plt+0x2198>
   13148:	mov	r9, #16
   1314c:	mov	r8, #1
   13150:	b	13180 <__assert_fail@plt+0x1c88>
   13154:	ldr	r2, [sl]
   13158:	cmp	r2, #1
   1315c:	beq	13244 <__assert_fail@plt+0x1d4c>
   13160:	add	r0, sl, #4
   13164:	bl	113e4 <__gmpz_clear@plt>
   13168:	mov	r0, sl
   1316c:	bl	14214 <__assert_fail@plt+0x2d1c>
   13170:	ldr	fp, [r4]
   13174:	ldr	r0, [fp]
   13178:	cmp	r0, #0
   1317c:	beq	13260 <__assert_fail@plt+0x1d68>
   13180:	mov	r1, r5
   13184:	bl	111bc <strcmp@plt>
   13188:	cmp	r0, #0
   1318c:	moveq	r3, #1
   13190:	movne	r3, #0
   13194:	add	sl, fp, r3, lsl #2
   13198:	str	sl, [r4]
   1319c:	bne	1326c <__assert_fail@plt+0x1d74>
   131a0:	ldr	r0, [fp, r3, lsl #2]
   131a4:	cmp	r0, #0
   131a8:	beq	13250 <__assert_fail@plt+0x1d58>
   131ac:	mov	r1, r7
   131b0:	bl	111bc <strcmp@plt>
   131b4:	cmp	r0, #0
   131b8:	moveq	r1, #1
   131bc:	movne	r1, #0
   131c0:	add	r3, sl, r1, lsl #2
   131c4:	str	r3, [r4]
   131c8:	bne	13250 <__assert_fail@plt+0x1d58>
   131cc:	ldr	fp, [sl, r1, lsl #2]
   131d0:	cmp	fp, #0
   131d4:	beq	13668 <__assert_fail@plt+0x2170>
   131d8:	add	r3, r3, #4
   131dc:	mov	r0, r9
   131e0:	str	r3, [r4]
   131e4:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   131e8:	mov	sl, r0
   131ec:	mov	r0, fp
   131f0:	str	r8, [sl]
   131f4:	bl	2a6d0 <__assert_fail@plt+0x191d8>
   131f8:	str	r0, [sl, #4]
   131fc:	cmp	r6, #0
   13200:	beq	13154 <__assert_fail@plt+0x1c5c>
   13204:	mov	r1, sl
   13208:	ldr	r0, [sp]
   1320c:	bl	11c80 <__assert_fail@plt+0x788>
   13210:	ldr	r3, [sp]
   13214:	ldr	r2, [r3]
   13218:	cmp	r2, #1
   1321c:	mov	fp, r0
   13220:	beq	135e4 <__assert_fail@plt+0x20ec>
   13224:	add	r0, r3, #4
   13228:	bl	113e4 <__gmpz_clear@plt>
   1322c:	ldr	r0, [sp]
   13230:	bl	14214 <__assert_fail@plt+0x2d1c>
   13234:	ldr	r2, [sl]
   13238:	str	fp, [sp]
   1323c:	cmp	r2, #1
   13240:	bne	13160 <__assert_fail@plt+0x1c68>
   13244:	ldr	r0, [sl, #4]
   13248:	bl	14214 <__assert_fail@plt+0x2d1c>
   1324c:	b	13168 <__assert_fail@plt+0x1c70>
   13250:	mov	r0, r6
   13254:	bl	120c4 <__assert_fail@plt+0xbcc>
   13258:	mov	sl, r0
   1325c:	b	131fc <__assert_fail@plt+0x1d04>
   13260:	ldr	r0, [sp]
   13264:	add	sp, sp, #12
   13268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1326c:	ldr	r0, [sl]
   13270:	ldr	r7, [pc, #1048]	; 13690 <__assert_fail@plt+0x2198>
   13274:	ldr	fp, [pc, #1048]	; 13694 <__assert_fail@plt+0x219c>
   13278:	cmp	r0, #0
   1327c:	beq	13260 <__assert_fail@plt+0x1d68>
   13280:	ldr	r1, [pc, #1040]	; 13698 <__assert_fail@plt+0x21a0>
   13284:	bl	111bc <strcmp@plt>
   13288:	cmp	r0, #0
   1328c:	moveq	r3, #1
   13290:	movne	r3, #0
   13294:	add	r5, sl, r3, lsl #2
   13298:	str	r5, [r4]
   1329c:	beq	13548 <__assert_fail@plt+0x2050>
   132a0:	ldr	r0, [sl, r3, lsl #2]
   132a4:	cmp	r0, #0
   132a8:	beq	13260 <__assert_fail@plt+0x1d68>
   132ac:	ldr	r1, [pc, #1000]	; 1369c <__assert_fail@plt+0x21a4>
   132b0:	bl	111bc <strcmp@plt>
   132b4:	cmp	r0, #0
   132b8:	moveq	r3, #4
   132bc:	movne	r3, #0
   132c0:	add	r5, r5, r3
   132c4:	moveq	r3, #1
   132c8:	str	r5, [r4]
   132cc:	streq	r3, [sp, #4]
   132d0:	bne	13620 <__assert_fail@plt+0x2128>
   132d4:	ldr	r0, [r5]
   132d8:	cmp	r0, #0
   132dc:	beq	13558 <__assert_fail@plt+0x2060>
   132e0:	mov	r1, r7
   132e4:	bl	111bc <strcmp@plt>
   132e8:	cmp	r0, #0
   132ec:	moveq	r2, #1
   132f0:	movne	r2, #0
   132f4:	add	r3, r5, r2, lsl #2
   132f8:	str	r3, [r4]
   132fc:	bne	13558 <__assert_fail@plt+0x2060>
   13300:	ldr	r8, [r5, r2, lsl #2]
   13304:	cmp	r8, #0
   13308:	beq	13668 <__assert_fail@plt+0x2170>
   1330c:	add	r3, r3, #4
   13310:	mov	r0, #16
   13314:	str	r3, [r4]
   13318:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   1331c:	mov	r3, #1
   13320:	mov	r5, r0
   13324:	mov	r0, r8
   13328:	str	r3, [r5]
   1332c:	bl	2a6d0 <__assert_fail@plt+0x191d8>
   13330:	str	r0, [r5, #4]
   13334:	ldr	sl, [r4]
   13338:	ldr	r0, [sl]
   1333c:	cmp	r0, #0
   13340:	beq	13458 <__assert_fail@plt+0x1f60>
   13344:	mov	r9, #16
   13348:	b	13378 <__assert_fail@plt+0x1e80>
   1334c:	ldr	r3, [r8]
   13350:	cmp	r3, #1
   13354:	beq	1343c <__assert_fail@plt+0x1f44>
   13358:	add	r0, r8, #4
   1335c:	bl	113e4 <__gmpz_clear@plt>
   13360:	mov	r0, r8
   13364:	bl	14214 <__assert_fail@plt+0x2d1c>
   13368:	ldr	sl, [r4]
   1336c:	ldr	r0, [sl]
   13370:	cmp	r0, #0
   13374:	beq	13458 <__assert_fail@plt+0x1f60>
   13378:	mov	r1, fp
   1337c:	bl	111bc <strcmp@plt>
   13380:	cmp	r0, #0
   13384:	moveq	r3, #1
   13388:	movne	r3, #0
   1338c:	add	r8, sl, r3, lsl #2
   13390:	str	r8, [r4]
   13394:	bne	13458 <__assert_fail@plt+0x1f60>
   13398:	ldr	r0, [sl, r3, lsl #2]
   1339c:	cmp	r0, #0
   133a0:	beq	13448 <__assert_fail@plt+0x1f50>
   133a4:	mov	r1, r7
   133a8:	bl	111bc <strcmp@plt>
   133ac:	cmp	r0, #0
   133b0:	moveq	r2, #1
   133b4:	movne	r2, #0
   133b8:	add	r3, r8, r2, lsl #2
   133bc:	str	r3, [r4]
   133c0:	bne	13448 <__assert_fail@plt+0x1f50>
   133c4:	ldr	sl, [r8, r2, lsl #2]
   133c8:	cmp	sl, #0
   133cc:	beq	13668 <__assert_fail@plt+0x2170>
   133d0:	add	r3, r3, #4
   133d4:	mov	r0, r9
   133d8:	str	r3, [r4]
   133dc:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   133e0:	mov	r3, #1
   133e4:	mov	r8, r0
   133e8:	mov	r0, sl
   133ec:	str	r3, [r8]
   133f0:	bl	2a6d0 <__assert_fail@plt+0x191d8>
   133f4:	str	r0, [r8, #4]
   133f8:	cmp	r6, #0
   133fc:	beq	1334c <__assert_fail@plt+0x1e54>
   13400:	mov	r1, r8
   13404:	mov	r0, r5
   13408:	bl	11c80 <__assert_fail@plt+0x788>
   1340c:	ldr	r3, [r5]
   13410:	cmp	r3, #1
   13414:	mov	sl, r0
   13418:	beq	1353c <__assert_fail@plt+0x2044>
   1341c:	add	r0, r5, #4
   13420:	bl	113e4 <__gmpz_clear@plt>
   13424:	mov	r0, r5
   13428:	bl	14214 <__assert_fail@plt+0x2d1c>
   1342c:	ldr	r3, [r8]
   13430:	mov	r5, sl
   13434:	cmp	r3, #1
   13438:	bne	13358 <__assert_fail@plt+0x1e60>
   1343c:	ldr	r0, [r8, #4]
   13440:	bl	14214 <__assert_fail@plt+0x2d1c>
   13444:	b	13360 <__assert_fail@plt+0x1e68>
   13448:	mov	r0, r6
   1344c:	bl	120c4 <__assert_fail@plt+0xbcc>
   13450:	mov	r8, r0
   13454:	b	133f8 <__assert_fail@plt+0x1f00>
   13458:	cmp	r6, #0
   1345c:	beq	13514 <__assert_fail@plt+0x201c>
   13460:	ldr	r2, [sp]
   13464:	ldr	r3, [r2]
   13468:	cmp	r3, #0
   1346c:	beq	13594 <__assert_fail@plt+0x209c>
   13470:	cmp	r3, #1
   13474:	bne	135e0 <__assert_fail@plt+0x20e8>
   13478:	ldr	r8, [r2, #4]
   1347c:	ldrb	r2, [r8]
   13480:	cmp	r2, #45	; 0x2d
   13484:	movne	r2, r8
   13488:	addeq	r2, r8, #1
   1348c:	b	1349c <__assert_fail@plt+0x1fa4>
   13490:	ldrb	r3, [r2, #1]!
   13494:	cmp	r3, #0
   13498:	beq	13568 <__assert_fail@plt+0x2070>
   1349c:	ldrb	r3, [r2]
   134a0:	sub	r3, r3, #48	; 0x30
   134a4:	cmp	r3, #9
   134a8:	bls	13490 <__assert_fail@plt+0x1f98>
   134ac:	ldr	r1, [pc, #492]	; 136a0 <__assert_fail@plt+0x21a8>
   134b0:	mov	r2, #5
   134b4:	mov	r0, #0
   134b8:	bl	11288 <dcgettext@plt>
   134bc:	mov	r1, #0
   134c0:	mov	r2, r0
   134c4:	mov	r0, #2
   134c8:	bl	11324 <error@plt>
   134cc:	mov	r2, #10
   134d0:	mov	r1, r8
   134d4:	add	r0, r5, #4
   134d8:	bl	114bc <__gmpz_init_set_str@plt>
   134dc:	subs	r9, r0, #0
   134e0:	bne	1366c <__assert_fail@plt+0x2174>
   134e4:	mov	r0, r8
   134e8:	bl	14214 <__assert_fail@plt+0x2d1c>
   134ec:	str	r9, [r5]
   134f0:	ldr	r3, [sp, #4]
   134f4:	cmp	r3, #0
   134f8:	bne	135fc <__assert_fail@plt+0x2104>
   134fc:	ldr	r3, [pc, #416]	; 136a4 <__assert_fail@plt+0x21ac>
   13500:	ldr	r2, [sp]
   13504:	add	r1, r2, #4
   13508:	mov	r0, r1
   1350c:	add	r2, r5, #4
   13510:	blx	r3
   13514:	ldr	r3, [r5]
   13518:	cmp	r3, #1
   1351c:	beq	135f0 <__assert_fail@plt+0x20f8>
   13520:	add	r0, r5, #4
   13524:	bl	113e4 <__gmpz_clear@plt>
   13528:	mov	r0, r5
   1352c:	bl	14214 <__assert_fail@plt+0x2d1c>
   13530:	ldr	sl, [r4]
   13534:	ldr	r0, [sl]
   13538:	b	13278 <__assert_fail@plt+0x1d80>
   1353c:	ldr	r0, [r5, #4]
   13540:	bl	14214 <__assert_fail@plt+0x2d1c>
   13544:	b	13424 <__assert_fail@plt+0x1f2c>
   13548:	str	r0, [sp, #4]
   1354c:	ldr	r0, [r5]
   13550:	cmp	r0, #0
   13554:	bne	132e0 <__assert_fail@plt+0x1de8>
   13558:	mov	r0, r6
   1355c:	bl	120c4 <__assert_fail@plt+0xbcc>
   13560:	mov	r5, r0
   13564:	b	13334 <__assert_fail@plt+0x1e3c>
   13568:	ldr	r3, [sp]
   1356c:	mov	r2, #10
   13570:	mov	r1, r8
   13574:	add	r0, r3, #4
   13578:	bl	114bc <__gmpz_init_set_str@plt>
   1357c:	subs	r9, r0, #0
   13580:	bne	1366c <__assert_fail@plt+0x2174>
   13584:	mov	r0, r8
   13588:	bl	14214 <__assert_fail@plt+0x2d1c>
   1358c:	ldr	r3, [sp]
   13590:	str	r9, [r3]
   13594:	ldr	r3, [r5]
   13598:	cmp	r3, #0
   1359c:	beq	134f0 <__assert_fail@plt+0x1ff8>
   135a0:	cmp	r3, #1
   135a4:	bne	135e0 <__assert_fail@plt+0x20e8>
   135a8:	ldr	r8, [r5, #4]
   135ac:	ldrb	r2, [r8]
   135b0:	cmp	r2, #45	; 0x2d
   135b4:	movne	r2, r8
   135b8:	addeq	r2, r8, #1
   135bc:	b	135cc <__assert_fail@plt+0x20d4>
   135c0:	ldrb	r3, [r2, #1]!
   135c4:	cmp	r3, #0
   135c8:	beq	134cc <__assert_fail@plt+0x1fd4>
   135cc:	ldrb	r3, [r2]
   135d0:	sub	r3, r3, #48	; 0x30
   135d4:	cmp	r3, #9
   135d8:	bls	135c0 <__assert_fail@plt+0x20c8>
   135dc:	b	134ac <__assert_fail@plt+0x1fb4>
   135e0:	bl	114ec <abort@plt>
   135e4:	ldr	r0, [r3, #4]
   135e8:	bl	14214 <__assert_fail@plt+0x2d1c>
   135ec:	b	1322c <__assert_fail@plt+0x1d34>
   135f0:	ldr	r0, [r5, #4]
   135f4:	bl	14214 <__assert_fail@plt+0x2d1c>
   135f8:	b	13528 <__assert_fail@plt+0x2030>
   135fc:	ldr	r8, [r5, #8]
   13600:	cmp	r8, #0
   13604:	beq	13680 <__assert_fail@plt+0x2188>
   13608:	mov	r1, r3
   1360c:	ldr	r2, [pc, #148]	; 136a8 <__assert_fail@plt+0x21b0>
   13610:	cmp	r1, #1
   13614:	ldr	r3, [pc, #144]	; 136ac <__assert_fail@plt+0x21b4>
   13618:	moveq	r3, r2
   1361c:	b	13500 <__assert_fail@plt+0x2008>
   13620:	ldr	r0, [r5]
   13624:	cmp	r0, #0
   13628:	beq	13260 <__assert_fail@plt+0x1d68>
   1362c:	ldr	r1, [pc, #124]	; 136b0 <__assert_fail@plt+0x21b8>
   13630:	bl	111bc <strcmp@plt>
   13634:	cmp	r0, #0
   13638:	moveq	r3, #4
   1363c:	movne	r3, #0
   13640:	add	r5, r5, r3
   13644:	str	r5, [r4]
   13648:	bne	13260 <__assert_fail@plt+0x1d68>
   1364c:	mov	r3, #2
   13650:	str	r3, [sp, #4]
   13654:	b	132d4 <__assert_fail@plt+0x1ddc>
   13658:	mov	r0, r6
   1365c:	bl	120c4 <__assert_fail@plt+0xbcc>
   13660:	str	r0, [sp]
   13664:	b	13130 <__assert_fail@plt+0x1c38>
   13668:	bl	11504 <__assert_fail@plt+0xc>
   1366c:	mov	r3, r8
   13670:	ldr	r2, [pc, #60]	; 136b4 <__assert_fail@plt+0x21bc>
   13674:	mov	r1, #34	; 0x22
   13678:	mov	r0, #3
   1367c:	bl	11324 <error@plt>
   13680:	mov	r2, #5
   13684:	ldr	r1, [pc, #44]	; 136b8 <__assert_fail@plt+0x21c0>
   13688:	b	134b4 <__assert_fail@plt+0x1fbc>
   1368c:			; <UNDEFINED> instruction: 0x0003d1b0
   13690:	andeq	fp, r2, r0, lsr #22
   13694:			; <UNDEFINED> instruction: 0x0002bbb8
   13698:			; <UNDEFINED> instruction: 0x0002bbbc
   1369c:	andeq	fp, r2, r0, asr #23
   136a0:	andeq	fp, r2, r8, asr #23
   136a4:	andeq	r1, r1, ip, lsr #5
   136a8:	andeq	r1, r1, r8, asr #3
   136ac:	ldrdeq	r1, [r1], -r8
   136b0:	andeq	fp, r2, r4, asr #23
   136b4:	andeq	fp, r2, r4, lsr #26
   136b8:	andeq	fp, r2, r0, ror #23
   136bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136c0:	sub	sp, sp, #12
   136c4:	mov	r6, r0
   136c8:	bl	130b4 <__assert_fail@plt+0x1bbc>
   136cc:	ldr	r5, [pc, #556]	; 13900 <__assert_fail@plt+0x2408>
   136d0:	ldr	r9, [pc, #556]	; 13904 <__assert_fail@plt+0x240c>
   136d4:	ldr	sl, [pc, #556]	; 13908 <__assert_fail@plt+0x2410>
   136d8:	ldr	r4, [r5]
   136dc:	mov	r7, r0
   136e0:	ldr	r0, [r4]
   136e4:	cmp	r0, #0
   136e8:	beq	1380c <__assert_fail@plt+0x2314>
   136ec:	mov	r1, r9
   136f0:	bl	111bc <strcmp@plt>
   136f4:	cmp	r0, #0
   136f8:	moveq	r3, #1
   136fc:	movne	r3, #0
   13700:	add	r8, r4, r3, lsl #2
   13704:	str	r8, [r5]
   13708:	beq	13818 <__assert_fail@plt+0x2320>
   1370c:	ldr	r0, [r4, r3, lsl #2]
   13710:	cmp	r0, #0
   13714:	beq	1380c <__assert_fail@plt+0x2314>
   13718:	mov	r1, sl
   1371c:	bl	111bc <strcmp@plt>
   13720:	cmp	r0, #0
   13724:	moveq	r3, #4
   13728:	movne	r3, #0
   1372c:	add	r8, r8, r3
   13730:	str	r8, [r5]
   13734:	bne	1380c <__assert_fail@plt+0x2314>
   13738:	mov	r8, #1
   1373c:	mov	r0, r6
   13740:	bl	130b4 <__assert_fail@plt+0x1bbc>
   13744:	cmp	r6, #0
   13748:	mov	r4, r0
   1374c:	beq	137e0 <__assert_fail@plt+0x22e8>
   13750:	ldr	r3, [r7]
   13754:	cmp	r3, #0
   13758:	beq	1384c <__assert_fail@plt+0x2354>
   1375c:	cmp	r3, #1
   13760:	bne	13898 <__assert_fail@plt+0x23a0>
   13764:	ldr	fp, [r7, #4]
   13768:	ldrb	r2, [fp]
   1376c:	cmp	r2, #45	; 0x2d
   13770:	movne	r2, fp
   13774:	addeq	r2, fp, #1
   13778:	b	13788 <__assert_fail@plt+0x2290>
   1377c:	ldrb	r3, [r2, #1]!
   13780:	cmp	r3, #0
   13784:	beq	13820 <__assert_fail@plt+0x2328>
   13788:	ldrb	r3, [r2]
   1378c:	sub	r3, r3, #48	; 0x30
   13790:	cmp	r3, #9
   13794:	bls	1377c <__assert_fail@plt+0x2284>
   13798:	mov	r2, #5
   1379c:	ldr	r1, [pc, #360]	; 1390c <__assert_fail@plt+0x2414>
   137a0:	mov	r0, #0
   137a4:	bl	11288 <dcgettext@plt>
   137a8:	mov	r1, #0
   137ac:	mov	r2, r0
   137b0:	mov	r0, #2
   137b4:	bl	11324 <error@plt>
   137b8:	add	r3, r4, #4
   137bc:	ldr	r0, [pc, #332]	; 13910 <__assert_fail@plt+0x2418>
   137c0:	ldr	r2, [pc, #332]	; 13914 <__assert_fail@plt+0x241c>
   137c4:	cmp	r8, #0
   137c8:	moveq	r2, r0
   137cc:	add	r1, r7, #4
   137d0:	mov	r8, r2
   137d4:	mov	r0, r1
   137d8:	mov	r2, r3
   137dc:	blx	r8
   137e0:	ldr	r3, [r4]
   137e4:	cmp	r3, #1
   137e8:	beq	1389c <__assert_fail@plt+0x23a4>
   137ec:	add	r0, r4, #4
   137f0:	bl	113e4 <__gmpz_clear@plt>
   137f4:	mov	r0, r4
   137f8:	bl	14214 <__assert_fail@plt+0x2d1c>
   137fc:	ldr	r4, [r5]
   13800:	ldr	r0, [r4]
   13804:	cmp	r0, #0
   13808:	bne	136ec <__assert_fail@plt+0x21f4>
   1380c:	mov	r0, r7
   13810:	add	sp, sp, #12
   13814:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13818:	mov	r8, #0
   1381c:	b	1373c <__assert_fail@plt+0x2244>
   13820:	mov	r2, #10
   13824:	mov	r1, fp
   13828:	add	r0, r7, #4
   1382c:	bl	114bc <__gmpz_init_set_str@plt>
   13830:	subs	r3, r0, #0
   13834:	bne	138ec <__assert_fail@plt+0x23f4>
   13838:	mov	r0, fp
   1383c:	str	r3, [sp]
   13840:	bl	14214 <__assert_fail@plt+0x2d1c>
   13844:	ldr	r3, [sp]
   13848:	str	r3, [r7]
   1384c:	ldr	r3, [r4]
   13850:	cmp	r3, #0
   13854:	beq	137b8 <__assert_fail@plt+0x22c0>
   13858:	cmp	r3, #1
   1385c:	bne	13898 <__assert_fail@plt+0x23a0>
   13860:	ldr	fp, [r4, #4]
   13864:	ldrb	r3, [fp]
   13868:	cmp	r3, #45	; 0x2d
   1386c:	movne	r3, fp
   13870:	addeq	r3, fp, #1
   13874:	b	13884 <__assert_fail@plt+0x238c>
   13878:	ldrb	r2, [r3, #1]!
   1387c:	cmp	r2, #0
   13880:	beq	138a8 <__assert_fail@plt+0x23b0>
   13884:	ldrb	r2, [r3]
   13888:	sub	r2, r2, #48	; 0x30
   1388c:	cmp	r2, #9
   13890:	bls	13878 <__assert_fail@plt+0x2380>
   13894:	b	13798 <__assert_fail@plt+0x22a0>
   13898:	bl	114ec <abort@plt>
   1389c:	ldr	r0, [r4, #4]
   138a0:	bl	14214 <__assert_fail@plt+0x2d1c>
   138a4:	b	137f4 <__assert_fail@plt+0x22fc>
   138a8:	add	r3, r4, #4
   138ac:	mov	r0, r3
   138b0:	mov	r2, #10
   138b4:	mov	r1, fp
   138b8:	str	r3, [sp]
   138bc:	bl	114bc <__gmpz_init_set_str@plt>
   138c0:	ldr	r3, [sp]
   138c4:	subs	r2, r0, #0
   138c8:	bne	138ec <__assert_fail@plt+0x23f4>
   138cc:	mov	r0, fp
   138d0:	str	r2, [sp, #4]
   138d4:	str	r3, [sp]
   138d8:	bl	14214 <__assert_fail@plt+0x2d1c>
   138dc:	ldr	r2, [sp, #4]
   138e0:	ldr	r3, [sp]
   138e4:	str	r2, [r4]
   138e8:	b	137bc <__assert_fail@plt+0x22c4>
   138ec:	mov	r3, fp
   138f0:	ldr	r2, [pc, #32]	; 13918 <__assert_fail@plt+0x2420>
   138f4:	mov	r1, #34	; 0x22
   138f8:	mov	r0, #3
   138fc:	bl	11324 <error@plt>
   13900:			; <UNDEFINED> instruction: 0x0003d1b0
   13904:	andeq	fp, r2, r0, lsr #22
   13908:	strdeq	fp, [r2], -r4
   1390c:	andeq	fp, r2, r8, asr #23
   13910:			; <UNDEFINED> instruction: 0x000114b0
   13914:	andeq	r1, r1, r0, asr #4
   13918:	andeq	fp, r2, r4, lsr #26
   1391c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13920:	sub	sp, sp, #12
   13924:	mov	r8, r0
   13928:	bl	136bc <__assert_fail@plt+0x21c4>
   1392c:	ldr	r7, [pc, #924]	; 13cd0 <__assert_fail@plt+0x27d8>
   13930:	ldr	r9, [pc, #924]	; 13cd4 <__assert_fail@plt+0x27dc>
   13934:	ldr	sl, [pc, #924]	; 13cd8 <__assert_fail@plt+0x27e0>
   13938:	ldr	r5, [r7]
   1393c:	ldr	fp, [pc, #920]	; 13cdc <__assert_fail@plt+0x27e4>
   13940:	mov	r4, r0
   13944:	ldr	r0, [r5]
   13948:	cmp	r0, #0
   1394c:	beq	13a34 <__assert_fail@plt+0x253c>
   13950:	mov	r1, r9
   13954:	bl	111bc <strcmp@plt>
   13958:	cmp	r0, #0
   1395c:	moveq	r3, #1
   13960:	movne	r3, #0
   13964:	add	r6, r5, r3, lsl #2
   13968:	str	r6, [r7]
   1396c:	beq	13a40 <__assert_fail@plt+0x2548>
   13970:	ldr	r0, [r5, r3, lsl #2]
   13974:	cmp	r0, #0
   13978:	beq	13c6c <__assert_fail@plt+0x2774>
   1397c:	mov	r1, sl
   13980:	bl	111bc <strcmp@plt>
   13984:	cmp	r0, #0
   13988:	moveq	r3, #1
   1398c:	movne	r3, #0
   13990:	add	r5, r6, r3, lsl #2
   13994:	str	r5, [r7]
   13998:	moveq	r6, #1
   1399c:	bne	13b18 <__assert_fail@plt+0x2620>
   139a0:	mov	r0, r8
   139a4:	bl	136bc <__assert_fail@plt+0x21c4>
   139a8:	cmp	r8, #0
   139ac:	mov	r5, r0
   139b0:	beq	139cc <__assert_fail@plt+0x24d4>
   139b4:	ldr	r0, [r4]
   139b8:	cmp	r0, #0
   139bc:	beq	13a48 <__assert_fail@plt+0x2550>
   139c0:	cmp	r0, #1
   139c4:	beq	13a7c <__assert_fail@plt+0x2584>
   139c8:	bl	114ec <abort@plt>
   139cc:	mov	r6, r8
   139d0:	ldr	r3, [r4]
   139d4:	cmp	r3, #1
   139d8:	beq	13b0c <__assert_fail@plt+0x2614>
   139dc:	add	r0, r4, #4
   139e0:	bl	113e4 <__gmpz_clear@plt>
   139e4:	mov	r0, r4
   139e8:	bl	14214 <__assert_fail@plt+0x2d1c>
   139ec:	ldr	r3, [r5]
   139f0:	cmp	r3, #1
   139f4:	beq	13b00 <__assert_fail@plt+0x2608>
   139f8:	add	r0, r5, #4
   139fc:	bl	113e4 <__gmpz_clear@plt>
   13a00:	mov	r0, r5
   13a04:	bl	14214 <__assert_fail@plt+0x2d1c>
   13a08:	mov	r0, #16
   13a0c:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   13a10:	mov	r3, #0
   13a14:	mov	r1, r6
   13a18:	mov	r4, r0
   13a1c:	str	r3, [r0], #4
   13a20:	bl	11474 <__gmpz_init_set_ui@plt>
   13a24:	ldr	r5, [r7]
   13a28:	ldr	r0, [r5]
   13a2c:	cmp	r0, #0
   13a30:	bne	13950 <__assert_fail@plt+0x2458>
   13a34:	mov	r0, r4
   13a38:	add	sp, sp, #12
   13a3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a40:	mov	r6, r0
   13a44:	b	139a0 <__assert_fail@plt+0x24a8>
   13a48:	add	r3, r4, #4
   13a4c:	mov	r2, r3
   13a50:	mov	r1, #10
   13a54:	str	r3, [sp, #4]
   13a58:	bl	11294 <__gmpz_get_str@plt>
   13a5c:	ldr	r3, [sp, #4]
   13a60:	str	r0, [sp]
   13a64:	mov	r0, r3
   13a68:	bl	113e4 <__gmpz_clear@plt>
   13a6c:	ldr	r2, [sp]
   13a70:	mov	r3, #1
   13a74:	str	r2, [r4, #4]
   13a78:	str	r3, [r4]
   13a7c:	ldr	r0, [r5]
   13a80:	cmp	r0, #0
   13a84:	beq	13b4c <__assert_fail@plt+0x2654>
   13a88:	cmp	r0, #1
   13a8c:	bne	139c8 <__assert_fail@plt+0x24d0>
   13a90:	ldr	r0, [r4, #4]
   13a94:	ldrb	r2, [r0]
   13a98:	cmp	r2, #45	; 0x2d
   13a9c:	movne	r2, r0
   13aa0:	addeq	r2, r0, #1
   13aa4:	b	13ab4 <__assert_fail@plt+0x25bc>
   13aa8:	ldrb	r3, [r2, #1]!
   13aac:	cmp	r3, #0
   13ab0:	beq	13b84 <__assert_fail@plt+0x268c>
   13ab4:	ldrb	r3, [r2]
   13ab8:	sub	r3, r3, #48	; 0x30
   13abc:	cmp	r3, #9
   13ac0:	bls	13aa8 <__assert_fail@plt+0x25b0>
   13ac4:	bl	113f0 <__errno_location@plt>
   13ac8:	mov	r3, #0
   13acc:	str	r3, [r0]
   13ad0:	ldr	r1, [r5, #4]
   13ad4:	ldr	r0, [r4, #4]
   13ad8:	bl	11330 <strcoll@plt>
   13adc:	sub	r6, r6, #1
   13ae0:	cmp	r6, #4
   13ae4:	ldrls	pc, [pc, r6, lsl #2]
   13ae8:	b	13bc8 <__assert_fail@plt+0x26d0>
   13aec:	ldrdeq	r3, [r1], -r0
   13af0:	andeq	r3, r1, r0, ror #23
   13af4:	andeq	r3, r1, ip, ror #23
   13af8:			; <UNDEFINED> instruction: 0x00013bbc
   13afc:	andeq	r3, r1, r0, lsl #24
   13b00:	ldr	r0, [r5, #4]
   13b04:	bl	14214 <__assert_fail@plt+0x2d1c>
   13b08:	b	13a00 <__assert_fail@plt+0x2508>
   13b0c:	ldr	r0, [r4, #4]
   13b10:	bl	14214 <__assert_fail@plt+0x2d1c>
   13b14:	b	139e4 <__assert_fail@plt+0x24ec>
   13b18:	ldr	r0, [r6, r3, lsl #2]
   13b1c:	cmp	r0, #0
   13b20:	beq	13a34 <__assert_fail@plt+0x253c>
   13b24:	mov	r1, fp
   13b28:	bl	111bc <strcmp@plt>
   13b2c:	cmp	r0, #0
   13b30:	moveq	r3, #1
   13b34:	movne	r3, #0
   13b38:	add	r6, r5, r3, lsl #2
   13b3c:	str	r6, [r7]
   13b40:	bne	13c10 <__assert_fail@plt+0x2718>
   13b44:	mov	r6, #2
   13b48:	b	139a0 <__assert_fail@plt+0x24a8>
   13b4c:	add	r3, r5, #4
   13b50:	mov	r2, r3
   13b54:	mov	r1, #10
   13b58:	str	r3, [sp, #4]
   13b5c:	bl	11294 <__gmpz_get_str@plt>
   13b60:	ldr	r3, [sp, #4]
   13b64:	str	r0, [sp]
   13b68:	mov	r0, r3
   13b6c:	bl	113e4 <__gmpz_clear@plt>
   13b70:	ldr	r2, [sp]
   13b74:	mov	r3, #1
   13b78:	str	r2, [r5, #4]
   13b7c:	str	r3, [r5]
   13b80:	b	13a90 <__assert_fail@plt+0x2598>
   13b84:	ldr	r1, [r5, #4]
   13b88:	ldrb	r2, [r1]
   13b8c:	cmp	r2, #45	; 0x2d
   13b90:	movne	r2, r1
   13b94:	addeq	r2, r1, #1
   13b98:	b	13ba8 <__assert_fail@plt+0x26b0>
   13b9c:	ldrb	r3, [r2, #1]!
   13ba0:	cmp	r3, #0
   13ba4:	beq	13bf8 <__assert_fail@plt+0x2700>
   13ba8:	ldrb	r3, [r2]
   13bac:	sub	r3, r3, #48	; 0x30
   13bb0:	cmp	r3, #9
   13bb4:	bls	13b9c <__assert_fail@plt+0x26a4>
   13bb8:	b	13ac4 <__assert_fail@plt+0x25cc>
   13bbc:	mvn	r6, r0
   13bc0:	lsr	r6, r6, #31
   13bc4:	b	139d0 <__assert_fail@plt+0x24d8>
   13bc8:	lsr	r6, r0, #31
   13bcc:	b	139d0 <__assert_fail@plt+0x24d8>
   13bd0:	cmp	r0, #0
   13bd4:	movgt	r6, #0
   13bd8:	movle	r6, #1
   13bdc:	b	139d0 <__assert_fail@plt+0x24d8>
   13be0:	clz	r6, r0
   13be4:	lsr	r6, r6, #5
   13be8:	b	139d0 <__assert_fail@plt+0x24d8>
   13bec:	adds	r6, r0, #0
   13bf0:	movne	r6, #1
   13bf4:	b	139d0 <__assert_fail@plt+0x24d8>
   13bf8:	bl	29438 <__assert_fail@plt+0x17f40>
   13bfc:	b	13adc <__assert_fail@plt+0x25e4>
   13c00:	cmp	r0, #0
   13c04:	movle	r6, #0
   13c08:	movgt	r6, #1
   13c0c:	b	139d0 <__assert_fail@plt+0x24d8>
   13c10:	ldr	r0, [r5, r3, lsl #2]
   13c14:	cmp	r0, #0
   13c18:	beq	13a34 <__assert_fail@plt+0x253c>
   13c1c:	ldr	r1, [pc, #188]	; 13ce0 <__assert_fail@plt+0x27e8>
   13c20:	bl	111bc <strcmp@plt>
   13c24:	cmp	r0, #0
   13c28:	moveq	r3, #1
   13c2c:	movne	r3, #0
   13c30:	add	r5, r6, r3, lsl #2
   13c34:	str	r5, [r7]
   13c38:	beq	13b44 <__assert_fail@plt+0x264c>
   13c3c:	ldr	r0, [r6, r3, lsl #2]
   13c40:	cmp	r0, #0
   13c44:	beq	13a34 <__assert_fail@plt+0x253c>
   13c48:	ldr	r1, [pc, #148]	; 13ce4 <__assert_fail@plt+0x27ec>
   13c4c:	bl	111bc <strcmp@plt>
   13c50:	cmp	r0, #0
   13c54:	moveq	r6, #4
   13c58:	movne	r6, #0
   13c5c:	add	r6, r5, r6
   13c60:	str	r6, [r7]
   13c64:	moveq	r6, #3
   13c68:	beq	139a0 <__assert_fail@plt+0x24a8>
   13c6c:	ldr	r0, [r6]
   13c70:	cmp	r0, #0
   13c74:	beq	13a34 <__assert_fail@plt+0x253c>
   13c78:	ldr	r1, [pc, #104]	; 13ce8 <__assert_fail@plt+0x27f0>
   13c7c:	bl	111bc <strcmp@plt>
   13c80:	cmp	r0, #0
   13c84:	moveq	r3, #1
   13c88:	movne	r3, #0
   13c8c:	add	r5, r6, r3, lsl #2
   13c90:	str	r5, [r7]
   13c94:	moveq	r6, #4
   13c98:	beq	139a0 <__assert_fail@plt+0x24a8>
   13c9c:	ldr	r0, [r6, r3, lsl #2]
   13ca0:	cmp	r0, #0
   13ca4:	beq	13a34 <__assert_fail@plt+0x253c>
   13ca8:	ldr	r1, [pc, #60]	; 13cec <__assert_fail@plt+0x27f4>
   13cac:	bl	111bc <strcmp@plt>
   13cb0:	cmp	r0, #0
   13cb4:	moveq	r3, #4
   13cb8:	movne	r3, #0
   13cbc:	add	r5, r5, r3
   13cc0:	str	r5, [r7]
   13cc4:	bne	13a34 <__assert_fail@plt+0x253c>
   13cc8:	mov	r6, #5
   13ccc:	b	139a0 <__assert_fail@plt+0x24a8>
   13cd0:			; <UNDEFINED> instruction: 0x0003d1b0
   13cd4:	strdeq	fp, [r2], -r8
   13cd8:	strdeq	fp, [r2], -ip
   13cdc:	andeq	fp, r2, r0, lsl #24
   13ce0:	andeq	fp, r2, r4, lsl #24
   13ce4:	andeq	fp, r2, r8, lsl #24
   13ce8:	andeq	fp, r2, ip, lsl #24
   13cec:	andeq	fp, r2, r0, lsl ip
   13cf0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13cf4:	mov	r6, r0
   13cf8:	bl	1391c <__assert_fail@plt+0x2424>
   13cfc:	ldr	r5, [pc, #496]	; 13ef4 <__assert_fail@plt+0x29fc>
   13d00:	ldr	r7, [pc, #496]	; 13ef8 <__assert_fail@plt+0x2a00>
   13d04:	mov	r8, #0
   13d08:	mov	r9, #16
   13d0c:	mov	sl, r0
   13d10:	ldr	r4, [r5]
   13d14:	ldr	r0, [r4]
   13d18:	cmp	r0, #0
   13d1c:	beq	13d98 <__assert_fail@plt+0x28a0>
   13d20:	mov	r1, r7
   13d24:	bl	111bc <strcmp@plt>
   13d28:	cmp	r0, #0
   13d2c:	moveq	r3, #4
   13d30:	movne	r3, #0
   13d34:	add	r4, r4, r3
   13d38:	str	r4, [r5]
   13d3c:	bne	13d98 <__assert_fail@plt+0x28a0>
   13d40:	cmp	r6, #0
   13d44:	beq	13da0 <__assert_fail@plt+0x28a8>
   13d48:	ldr	r3, [sl]
   13d4c:	cmp	r3, #0
   13d50:	beq	13e50 <__assert_fail@plt+0x2958>
   13d54:	cmp	r3, #1
   13d58:	bne	13e4c <__assert_fail@plt+0x2954>
   13d5c:	ldr	r3, [sl, #4]
   13d60:	ldrb	r2, [r3]
   13d64:	cmp	r2, #0
   13d68:	beq	13da0 <__assert_fail@plt+0x28a8>
   13d6c:	cmp	r2, #45	; 0x2d
   13d70:	addeq	r3, r3, #1
   13d74:	b	13d84 <__assert_fail@plt+0x288c>
   13d78:	ldrb	r2, [r3, #1]!
   13d7c:	cmp	r2, #0
   13d80:	beq	13da0 <__assert_fail@plt+0x28a8>
   13d84:	ldrb	r2, [r3]
   13d88:	cmp	r2, #48	; 0x30
   13d8c:	beq	13d78 <__assert_fail@plt+0x2880>
   13d90:	mov	r0, r6
   13d94:	b	13da4 <__assert_fail@plt+0x28ac>
   13d98:	mov	r0, sl
   13d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13da0:	mov	r0, r8
   13da4:	bl	1391c <__assert_fail@plt+0x2424>
   13da8:	ldr	r1, [sl]
   13dac:	cmp	r1, #0
   13db0:	mov	r4, r0
   13db4:	beq	13e60 <__assert_fail@plt+0x2968>
   13db8:	cmp	r1, #1
   13dbc:	bne	13e4c <__assert_fail@plt+0x2954>
   13dc0:	ldr	r0, [sl, #4]
   13dc4:	ldrb	r3, [r0]
   13dc8:	cmp	r3, #0
   13dcc:	beq	13ecc <__assert_fail@plt+0x29d4>
   13dd0:	cmp	r3, #45	; 0x2d
   13dd4:	movne	r3, r0
   13dd8:	addeq	r3, r0, #1
   13ddc:	b	13dec <__assert_fail@plt+0x28f4>
   13de0:	ldrb	r2, [r3, #1]!
   13de4:	cmp	r2, #0
   13de8:	beq	13ecc <__assert_fail@plt+0x29d4>
   13dec:	ldrb	r2, [r3]
   13df0:	cmp	r2, #48	; 0x30
   13df4:	beq	13de0 <__assert_fail@plt+0x28e8>
   13df8:	ldr	r3, [r4]
   13dfc:	cmp	r3, #0
   13e00:	beq	13eb4 <__assert_fail@plt+0x29bc>
   13e04:	cmp	r3, #1
   13e08:	bne	13e4c <__assert_fail@plt+0x2954>
   13e0c:	ldr	r0, [r4, #4]
   13e10:	ldrb	r3, [r0]
   13e14:	cmp	r3, #0
   13e18:	beq	13ec0 <__assert_fail@plt+0x29c8>
   13e1c:	cmp	r3, #45	; 0x2d
   13e20:	movne	r3, r0
   13e24:	addeq	r3, r0, #1
   13e28:	b	13e38 <__assert_fail@plt+0x2940>
   13e2c:	ldrb	r2, [r3, #1]!
   13e30:	cmp	r2, #0
   13e34:	beq	13ec0 <__assert_fail@plt+0x29c8>
   13e38:	ldrb	r2, [r3]
   13e3c:	cmp	r2, #48	; 0x30
   13e40:	beq	13e2c <__assert_fail@plt+0x2934>
   13e44:	bl	14214 <__assert_fail@plt+0x2d1c>
   13e48:	b	13ee8 <__assert_fail@plt+0x29f0>
   13e4c:	bl	114ec <abort@plt>
   13e50:	ldr	r0, [sl, #8]
   13e54:	adds	r0, r0, #0
   13e58:	movne	r0, #1
   13e5c:	b	13da4 <__assert_fail@plt+0x28ac>
   13e60:	ldr	r3, [sl, #8]
   13e64:	cmp	r3, #0
   13e68:	bne	13df8 <__assert_fail@plt+0x2900>
   13e6c:	add	r0, sl, #4
   13e70:	bl	113e4 <__gmpz_clear@plt>
   13e74:	mov	r0, sl
   13e78:	bl	14214 <__assert_fail@plt+0x2d1c>
   13e7c:	ldr	r3, [r4]
   13e80:	cmp	r3, #1
   13e84:	beq	13ed4 <__assert_fail@plt+0x29dc>
   13e88:	add	r0, r4, #4
   13e8c:	bl	113e4 <__gmpz_clear@plt>
   13e90:	mov	r0, r4
   13e94:	bl	14214 <__assert_fail@plt+0x2d1c>
   13e98:	mov	r0, r9
   13e9c:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   13ea0:	mov	r1, #0
   13ea4:	mov	sl, r0
   13ea8:	str	r8, [r0], #4
   13eac:	bl	11474 <__gmpz_init_set_ui@plt>
   13eb0:	b	13d10 <__assert_fail@plt+0x2818>
   13eb4:	ldr	r3, [r4, #8]
   13eb8:	cmp	r3, #0
   13ebc:	bne	13ee0 <__assert_fail@plt+0x29e8>
   13ec0:	cmp	r1, #1
   13ec4:	bne	13e6c <__assert_fail@plt+0x2974>
   13ec8:	ldr	r0, [sl, #4]
   13ecc:	bl	14214 <__assert_fail@plt+0x2d1c>
   13ed0:	b	13e74 <__assert_fail@plt+0x297c>
   13ed4:	ldr	r0, [r4, #4]
   13ed8:	bl	14214 <__assert_fail@plt+0x2d1c>
   13edc:	b	13e90 <__assert_fail@plt+0x2998>
   13ee0:	add	r0, r4, #4
   13ee4:	bl	113e4 <__gmpz_clear@plt>
   13ee8:	mov	r0, r4
   13eec:	bl	14214 <__assert_fail@plt+0x2d1c>
   13ef0:	b	13d10 <__assert_fail@plt+0x2818>
   13ef4:			; <UNDEFINED> instruction: 0x0003d1b0
   13ef8:	andeq	fp, r2, r4, lsl ip
   13efc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13f00:	mov	r6, r0
   13f04:	bl	13cf0 <__assert_fail@plt+0x27f8>
   13f08:	ldr	r5, [pc, #504]	; 14108 <__assert_fail@plt+0x2c10>
   13f0c:	ldr	r7, [pc, #504]	; 1410c <__assert_fail@plt+0x2c14>
   13f10:	mov	r8, #0
   13f14:	mov	r9, #16
   13f18:	mov	r4, r0
   13f1c:	ldr	sl, [r5]
   13f20:	ldr	r0, [sl]
   13f24:	cmp	r0, #0
   13f28:	beq	14020 <__assert_fail@plt+0x2b28>
   13f2c:	mov	r1, r7
   13f30:	bl	111bc <strcmp@plt>
   13f34:	cmp	r0, #0
   13f38:	moveq	r3, #4
   13f3c:	movne	r3, #0
   13f40:	add	sl, sl, r3
   13f44:	str	sl, [r5]
   13f48:	bne	14020 <__assert_fail@plt+0x2b28>
   13f4c:	cmp	r6, #0
   13f50:	beq	13f9c <__assert_fail@plt+0x2aa4>
   13f54:	ldr	r3, [r4]
   13f58:	cmp	r3, #0
   13f5c:	beq	1405c <__assert_fail@plt+0x2b64>
   13f60:	cmp	r3, #1
   13f64:	bne	14058 <__assert_fail@plt+0x2b60>
   13f68:	ldr	r3, [r4, #4]
   13f6c:	ldrb	r2, [r3]
   13f70:	cmp	r2, #0
   13f74:	beq	140ac <__assert_fail@plt+0x2bb4>
   13f78:	cmp	r2, #45	; 0x2d
   13f7c:	addeq	r3, r3, #1
   13f80:	b	13f90 <__assert_fail@plt+0x2a98>
   13f84:	ldrb	r2, [r3, #1]!
   13f88:	cmp	r2, #0
   13f8c:	beq	140ac <__assert_fail@plt+0x2bb4>
   13f90:	ldrb	r2, [r3]
   13f94:	cmp	r2, #48	; 0x30
   13f98:	beq	13f84 <__assert_fail@plt+0x2a8c>
   13f9c:	mov	r0, r8
   13fa0:	bl	13cf0 <__assert_fail@plt+0x27f8>
   13fa4:	ldr	r3, [r4]
   13fa8:	cmp	r3, #0
   13fac:	mov	sl, r0
   13fb0:	beq	14028 <__assert_fail@plt+0x2b30>
   13fb4:	cmp	r3, #1
   13fb8:	bne	14058 <__assert_fail@plt+0x2b60>
   13fbc:	ldr	r0, [r4, #4]
   13fc0:	ldrb	r3, [r0]
   13fc4:	cmp	r3, #0
   13fc8:	beq	140f8 <__assert_fail@plt+0x2c00>
   13fcc:	cmp	r3, #45	; 0x2d
   13fd0:	movne	r3, r0
   13fd4:	addeq	r3, r0, #1
   13fd8:	b	13fe8 <__assert_fail@plt+0x2af0>
   13fdc:	ldrb	r2, [r3, #1]!
   13fe0:	cmp	r2, #0
   13fe4:	beq	140f8 <__assert_fail@plt+0x2c00>
   13fe8:	ldrb	r2, [r3]
   13fec:	cmp	r2, #48	; 0x30
   13ff0:	beq	13fdc <__assert_fail@plt+0x2ae4>
   13ff4:	ldr	r3, [sl]
   13ff8:	cmp	r3, #1
   13ffc:	beq	140ec <__assert_fail@plt+0x2bf4>
   14000:	add	r0, sl, #4
   14004:	bl	113e4 <__gmpz_clear@plt>
   14008:	mov	r0, sl
   1400c:	bl	14214 <__assert_fail@plt+0x2d1c>
   14010:	ldr	sl, [r5]
   14014:	ldr	r0, [sl]
   14018:	cmp	r0, #0
   1401c:	bne	13f2c <__assert_fail@plt+0x2a34>
   14020:	mov	r0, r4
   14024:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14028:	ldr	r3, [r4, #8]
   1402c:	cmp	r3, #0
   14030:	bne	13ff4 <__assert_fail@plt+0x2afc>
   14034:	add	r0, r4, #4
   14038:	bl	113e4 <__gmpz_clear@plt>
   1403c:	mov	r0, r4
   14040:	bl	14214 <__assert_fail@plt+0x2d1c>
   14044:	ldr	r3, [sl]
   14048:	cmp	r3, #0
   1404c:	beq	140b4 <__assert_fail@plt+0x2bbc>
   14050:	cmp	r3, #1
   14054:	beq	1406c <__assert_fail@plt+0x2b74>
   14058:	bl	114ec <abort@plt>
   1405c:	ldr	r0, [r4, #8]
   14060:	clz	r0, r0
   14064:	lsr	r0, r0, #5
   14068:	b	13fa0 <__assert_fail@plt+0x2aa8>
   1406c:	ldr	r0, [sl, #4]
   14070:	ldrb	r3, [r0]
   14074:	cmp	r3, #0
   14078:	beq	14100 <__assert_fail@plt+0x2c08>
   1407c:	cmp	r3, #45	; 0x2d
   14080:	movne	r3, r0
   14084:	addeq	r3, r0, #1
   14088:	b	14098 <__assert_fail@plt+0x2ba0>
   1408c:	ldrb	r2, [r3, #1]!
   14090:	cmp	r2, #0
   14094:	beq	14100 <__assert_fail@plt+0x2c08>
   14098:	ldrb	r2, [r3]
   1409c:	cmp	r2, #48	; 0x30
   140a0:	beq	1408c <__assert_fail@plt+0x2b94>
   140a4:	mov	r4, sl
   140a8:	b	13f1c <__assert_fail@plt+0x2a24>
   140ac:	mov	r0, r6
   140b0:	b	13fa0 <__assert_fail@plt+0x2aa8>
   140b4:	ldr	r3, [sl, #8]
   140b8:	cmp	r3, #0
   140bc:	bne	140a4 <__assert_fail@plt+0x2bac>
   140c0:	add	r0, sl, #4
   140c4:	bl	113e4 <__gmpz_clear@plt>
   140c8:	mov	r0, sl
   140cc:	bl	14214 <__assert_fail@plt+0x2d1c>
   140d0:	mov	r0, r9
   140d4:	bl	2a0c0 <__assert_fail@plt+0x18bc8>
   140d8:	mov	r1, #0
   140dc:	mov	r4, r0
   140e0:	str	r8, [r0], #4
   140e4:	bl	11474 <__gmpz_init_set_ui@plt>
   140e8:	b	13f1c <__assert_fail@plt+0x2a24>
   140ec:	ldr	r0, [sl, #4]
   140f0:	bl	14214 <__assert_fail@plt+0x2d1c>
   140f4:	b	14008 <__assert_fail@plt+0x2b10>
   140f8:	bl	14214 <__assert_fail@plt+0x2d1c>
   140fc:	b	1403c <__assert_fail@plt+0x2b44>
   14100:	bl	14214 <__assert_fail@plt+0x2d1c>
   14104:	b	140c8 <__assert_fail@plt+0x2bd0>
   14108:			; <UNDEFINED> instruction: 0x0003d1b0
   1410c:	andeq	fp, r2, r8, lsl ip
   14110:	ldr	r3, [pc, #4]	; 1411c <__assert_fail@plt+0x2c24>
   14114:	str	r0, [r3]
   14118:	bx	lr
   1411c:			; <UNDEFINED> instruction: 0x0003d1b4
   14120:	ldr	r3, [pc, #4]	; 1412c <__assert_fail@plt+0x2c34>
   14124:	strb	r0, [r3, #4]
   14128:	bx	lr
   1412c:			; <UNDEFINED> instruction: 0x0003d1b4
   14130:	ldr	r3, [pc, #192]	; 141f8 <__assert_fail@plt+0x2d00>
   14134:	push	{r4, r5, r6, lr}
   14138:	sub	sp, sp, #8
   1413c:	ldr	r0, [r3]
   14140:	bl	2a818 <__assert_fail@plt+0x19320>
   14144:	cmp	r0, #0
   14148:	beq	1416c <__assert_fail@plt+0x2c74>
   1414c:	ldr	r4, [pc, #168]	; 141fc <__assert_fail@plt+0x2d04>
   14150:	ldrb	r3, [r4, #4]
   14154:	cmp	r3, #0
   14158:	beq	14188 <__assert_fail@plt+0x2c90>
   1415c:	bl	113f0 <__errno_location@plt>
   14160:	ldr	r3, [r0]
   14164:	cmp	r3, #32
   14168:	bne	14188 <__assert_fail@plt+0x2c90>
   1416c:	ldr	r3, [pc, #140]	; 14200 <__assert_fail@plt+0x2d08>
   14170:	ldr	r0, [r3]
   14174:	bl	2a818 <__assert_fail@plt+0x19320>
   14178:	cmp	r0, #0
   1417c:	bne	141d0 <__assert_fail@plt+0x2cd8>
   14180:	add	sp, sp, #8
   14184:	pop	{r4, r5, r6, pc}
   14188:	mov	r2, #5
   1418c:	ldr	r1, [pc, #112]	; 14204 <__assert_fail@plt+0x2d0c>
   14190:	mov	r0, #0
   14194:	bl	11288 <dcgettext@plt>
   14198:	ldr	r4, [r4]
   1419c:	cmp	r4, #0
   141a0:	mov	r5, r0
   141a4:	beq	141dc <__assert_fail@plt+0x2ce4>
   141a8:	bl	113f0 <__errno_location@plt>
   141ac:	ldr	r6, [r0]
   141b0:	mov	r0, r4
   141b4:	bl	1752c <__assert_fail@plt+0x6034>
   141b8:	mov	r1, r6
   141bc:	str	r5, [sp]
   141c0:	ldr	r2, [pc, #64]	; 14208 <__assert_fail@plt+0x2d10>
   141c4:	mov	r3, r0
   141c8:	mov	r0, #0
   141cc:	bl	11324 <error@plt>
   141d0:	ldr	r3, [pc, #52]	; 1420c <__assert_fail@plt+0x2d14>
   141d4:	ldr	r0, [r3]
   141d8:	bl	11228 <_exit@plt>
   141dc:	bl	113f0 <__errno_location@plt>
   141e0:	mov	r3, r5
   141e4:	ldr	r2, [pc, #36]	; 14210 <__assert_fail@plt+0x2d18>
   141e8:	ldr	r1, [r0]
   141ec:	mov	r0, r4
   141f0:	bl	11324 <error@plt>
   141f4:	b	141d0 <__assert_fail@plt+0x2cd8>
   141f8:	andeq	sp, r3, r4, lsr #3
   141fc:			; <UNDEFINED> instruction: 0x0003d1b4
   14200:	andeq	sp, r3, r0, lsr #3
   14204:	andeq	fp, r2, r4, lsl sp
   14208:	andeq	fp, r2, r0, lsr #26
   1420c:	andeq	sp, r3, ip, asr #2
   14210:	andeq	fp, r2, r4, lsr #26
   14214:	push	{r4, r5, lr}
   14218:	sub	sp, sp, #12
   1421c:	mov	r5, r0
   14220:	bl	113f0 <__errno_location@plt>
   14224:	mov	r2, #0
   14228:	mov	r4, r0
   1422c:	ldr	r3, [r0]
   14230:	str	r2, [r4]
   14234:	mov	r0, r5
   14238:	str	r3, [sp]
   1423c:	str	r3, [sp, #4]
   14240:	bl	11210 <free@plt>
   14244:	ldr	r3, [r4]
   14248:	add	r2, sp, #8
   1424c:	cmp	r3, #0
   14250:	moveq	r3, #4
   14254:	movne	r3, #0
   14258:	add	r3, r2, r3
   1425c:	ldr	r3, [r3, #-8]
   14260:	str	r3, [r4]
   14264:	add	sp, sp, #12
   14268:	pop	{r4, r5, pc}
   1426c:	push	{r4, r5, r6, r7, r8, lr}
   14270:	cmp	r0, #2
   14274:	ldr	r4, [pc, #148]	; 14310 <__assert_fail@plt+0x2e18>
   14278:	mov	r5, #0
   1427c:	sub	sp, sp, #16
   14280:	ldr	r6, [r4]
   14284:	str	r5, [r4]
   14288:	beq	142a4 <__assert_fail@plt+0x2dac>
   1428c:	ldr	r3, [pc, #128]	; 14314 <__assert_fail@plt+0x2e1c>
   14290:	mov	r2, #0
   14294:	str	r6, [r4]
   14298:	str	r2, [r3]
   1429c:	add	sp, sp, #16
   142a0:	pop	{r4, r5, r6, r7, r8, pc}
   142a4:	mov	r8, r3
   142a8:	mov	r7, r2
   142ac:	str	r5, [sp]
   142b0:	ldr	r3, [pc, #96]	; 14318 <__assert_fail@plt+0x2e20>
   142b4:	ldr	r2, [pc, #96]	; 1431c <__assert_fail@plt+0x2e24>
   142b8:	bl	1139c <getopt_long@plt>
   142bc:	cmn	r0, #1
   142c0:	beq	1428c <__assert_fail@plt+0x2d94>
   142c4:	cmp	r0, #104	; 0x68
   142c8:	beq	14300 <__assert_fail@plt+0x2e08>
   142cc:	cmp	r0, #118	; 0x76
   142d0:	bne	1428c <__assert_fail@plt+0x2d94>
   142d4:	ldr	r3, [pc, #68]	; 14320 <__assert_fail@plt+0x2e28>
   142d8:	add	ip, sp, #48	; 0x30
   142dc:	mov	r2, r8
   142e0:	ldr	r0, [r3]
   142e4:	mov	r1, r7
   142e8:	str	ip, [sp]
   142ec:	ldr	r3, [sp, #40]	; 0x28
   142f0:	str	ip, [sp, #12]
   142f4:	bl	29a5c <__assert_fail@plt+0x18564>
   142f8:	mov	r0, r5
   142fc:	bl	113b4 <exit@plt>
   14300:	mov	r0, r5
   14304:	ldr	r3, [sp, #44]	; 0x2c
   14308:	blx	r3
   1430c:	b	1428c <__assert_fail@plt+0x2d94>
   14310:	andeq	sp, r3, r8, lsr #3
   14314:	muleq	r3, r8, r1
   14318:	andeq	fp, r2, r8, lsr #26
   1431c:	andeq	fp, r2, r0, lsr #22
   14320:	andeq	sp, r3, r4, lsr #3
   14324:	push	{r4, r5, r6, r7, r8, lr}
   14328:	sub	sp, sp, #16
   1432c:	ldr	r5, [pc, #176]	; 143e4 <__assert_fail@plt+0x2eec>
   14330:	ldrb	r8, [sp, #44]	; 0x2c
   14334:	ldr	r4, [pc, #172]	; 143e8 <__assert_fail@plt+0x2ef0>
   14338:	ldr	lr, [pc, #172]	; 143ec <__assert_fail@plt+0x2ef4>
   1433c:	cmp	r8, #0
   14340:	mov	r6, r2
   14344:	movne	r2, r5
   14348:	mov	r5, #0
   1434c:	mov	ip, #1
   14350:	moveq	r2, lr
   14354:	mov	r7, r3
   14358:	str	r5, [sp]
   1435c:	ldr	r3, [pc, #140]	; 143f0 <__assert_fail@plt+0x2ef8>
   14360:	ldr	r8, [r4]
   14364:	str	ip, [r4]
   14368:	bl	1139c <getopt_long@plt>
   1436c:	cmn	r0, #1
   14370:	beq	143c0 <__assert_fail@plt+0x2ec8>
   14374:	cmp	r0, #104	; 0x68
   14378:	beq	143cc <__assert_fail@plt+0x2ed4>
   1437c:	cmp	r0, #118	; 0x76
   14380:	bne	143b0 <__assert_fail@plt+0x2eb8>
   14384:	ldr	r3, [pc, #104]	; 143f4 <__assert_fail@plt+0x2efc>
   14388:	add	ip, sp, #52	; 0x34
   1438c:	mov	r2, r7
   14390:	ldr	r0, [r3]
   14394:	mov	r1, r6
   14398:	str	ip, [sp]
   1439c:	ldr	r3, [sp, #40]	; 0x28
   143a0:	str	ip, [sp, #12]
   143a4:	bl	29a5c <__assert_fail@plt+0x18564>
   143a8:	mov	r0, r5
   143ac:	bl	113b4 <exit@plt>
   143b0:	ldr	r3, [pc, #64]	; 143f8 <__assert_fail@plt+0x2f00>
   143b4:	ldr	r0, [r3]
   143b8:	ldr	r3, [sp, #48]	; 0x30
   143bc:	blx	r3
   143c0:	str	r8, [r4]
   143c4:	add	sp, sp, #16
   143c8:	pop	{r4, r5, r6, r7, r8, pc}
   143cc:	mov	r0, r5
   143d0:	ldr	r3, [sp, #48]	; 0x30
   143d4:	blx	r3
   143d8:	str	r8, [r4]
   143dc:	add	sp, sp, #16
   143e0:	pop	{r4, r5, r6, r7, r8, pc}
   143e4:	andeq	fp, r2, r0, lsr r5
   143e8:	andeq	sp, r3, r8, lsr #3
   143ec:	andeq	fp, r2, r0, lsr #22
   143f0:	andeq	fp, r2, r8, lsr #26
   143f4:	andeq	sp, r3, r4, lsr #3
   143f8:	andeq	sp, r3, ip, asr #2
   143fc:	push	{r4, lr}
   14400:	mov	r4, r0
   14404:	bl	111f8 <wcwidth@plt>
   14408:	cmp	r0, #0
   1440c:	popge	{r4, pc}
   14410:	mov	r0, r4
   14414:	bl	112c4 <iswcntrl@plt>
   14418:	clz	r0, r0
   1441c:	lsr	r0, r0, #5
   14420:	pop	{r4, pc}
   14424:	mov	r3, r1
   14428:	push	{r4, r5, r6, lr}
   1442c:	mov	r4, r1
   14430:	ldr	r1, [r3], #16
   14434:	mov	r5, r0
   14438:	cmp	r1, r3
   1443c:	strne	r1, [r0]
   14440:	beq	14464 <__assert_fail@plt+0x2f6c>
   14444:	ldrb	r3, [r4, #8]
   14448:	ldr	r2, [r4, #4]
   1444c:	cmp	r3, #0
   14450:	strb	r3, [r5, #8]
   14454:	ldrne	r3, [r4, #12]
   14458:	str	r2, [r5, #4]
   1445c:	strne	r3, [r5, #12]
   14460:	pop	{r4, r5, r6, pc}
   14464:	add	r3, r0, #16
   14468:	mov	r0, r3
   1446c:	ldr	r2, [r4, #4]
   14470:	bl	11234 <memcpy@plt>
   14474:	str	r0, [r5]
   14478:	b	14444 <__assert_fail@plt+0x2f4c>
   1447c:	ldr	r3, [pc, #20]	; 14498 <__assert_fail@plt+0x2fa0>
   14480:	lsr	r2, r0, #5
   14484:	and	r0, r0, #31
   14488:	ldr	r3, [r3, r2, lsl #2]
   1448c:	lsr	r0, r3, r0
   14490:	and	r0, r0, #1
   14494:	bx	lr
   14498:	andeq	fp, r2, r8, ror #26
   1449c:	push	{r4, r5, r6, r7, lr}
   144a0:	subs	r6, r0, #0
   144a4:	sub	sp, sp, #12
   144a8:	addeq	r6, sp, #4
   144ac:	mov	r0, r6
   144b0:	mov	r5, r2
   144b4:	mov	r7, r1
   144b8:	bl	11318 <mbrtowc@plt>
   144bc:	cmp	r5, #0
   144c0:	cmnne	r0, #3
   144c4:	mov	r4, r0
   144c8:	bls	144e4 <__assert_fail@plt+0x2fec>
   144cc:	mov	r0, #0
   144d0:	bl	2aafc <__assert_fail@plt+0x19604>
   144d4:	cmp	r0, #0
   144d8:	moveq	r4, #1
   144dc:	ldrbeq	r3, [r7]
   144e0:	streq	r3, [r6]
   144e4:	mov	r0, r4
   144e8:	add	sp, sp, #12
   144ec:	pop	{r4, r5, r6, r7, pc}
   144f0:	push	{r4, r5, r6, r7, r8, lr}
   144f4:	sub	sp, sp, #56	; 0x38
   144f8:	mov	r4, r0
   144fc:	mov	r5, r1
   14500:	bl	11300 <__ctype_get_mb_cur_max@plt>
   14504:	cmp	r0, #1
   14508:	bls	14518 <__assert_fail@plt+0x3020>
   1450c:	uxtb	r7, r5
   14510:	cmp	r7, #47	; 0x2f
   14514:	bhi	1452c <__assert_fail@plt+0x3034>
   14518:	mov	r1, r5
   1451c:	mov	r0, r4
   14520:	add	sp, sp, #56	; 0x38
   14524:	pop	{r4, r5, r6, r7, r8, lr}
   14528:	b	113cc <strchr@plt>
   1452c:	mov	r3, #0
   14530:	ldr	r8, [pc, #408]	; 146d0 <__assert_fail@plt+0x31d8>
   14534:	mov	r6, r3
   14538:	mov	r5, #1
   1453c:	str	r4, [sp, #16]
   14540:	strb	r3, [sp]
   14544:	str	r3, [sp, #4]
   14548:	strb	r3, [sp, #12]
   1454c:	str	r3, [sp, #8]
   14550:	ldrb	r3, [sp]
   14554:	cmp	r3, #0
   14558:	bne	145b4 <__assert_fail@plt+0x30bc>
   1455c:	ldrb	r3, [r4]
   14560:	and	r2, r3, #31
   14564:	lsr	r3, r3, #5
   14568:	ldr	r3, [r8, r3, lsl #2]
   1456c:	lsr	r3, r3, r2
   14570:	tst	r3, #1
   14574:	beq	145a0 <__assert_fail@plt+0x30a8>
   14578:	str	r5, [sp, #20]
   1457c:	ldrb	r4, [r4]
   14580:	strb	r5, [sp, #24]
   14584:	strb	r5, [sp, #12]
   14588:	cmp	r4, #0
   1458c:	str	r4, [sp, #28]
   14590:	bne	14618 <__assert_fail@plt+0x3120>
   14594:	mov	r0, r4
   14598:	add	sp, sp, #56	; 0x38
   1459c:	pop	{r4, r5, r6, r7, r8, pc}
   145a0:	add	r0, sp, #4
   145a4:	bl	11264 <mbsinit@plt>
   145a8:	cmp	r0, #0
   145ac:	beq	146a8 <__assert_fail@plt+0x31b0>
   145b0:	strb	r5, [sp]
   145b4:	bl	11300 <__ctype_get_mb_cur_max@plt>
   145b8:	mov	r1, r0
   145bc:	mov	r0, r4
   145c0:	bl	2940c <__assert_fail@plt+0x17f14>
   145c4:	add	r3, sp, #4
   145c8:	mov	r1, r4
   145cc:	mov	r2, r0
   145d0:	add	r0, sp, #28
   145d4:	bl	1449c <__assert_fail@plt+0x2fa4>
   145d8:	cmn	r0, #1
   145dc:	str	r0, [sp, #20]
   145e0:	beq	14648 <__assert_fail@plt+0x3150>
   145e4:	cmn	r0, #2
   145e8:	beq	14690 <__assert_fail@plt+0x3198>
   145ec:	cmp	r0, #0
   145f0:	beq	1465c <__assert_fail@plt+0x3164>
   145f4:	ldr	r4, [sp, #28]
   145f8:	add	r0, sp, #4
   145fc:	strb	r5, [sp, #24]
   14600:	bl	11264 <mbsinit@plt>
   14604:	strb	r5, [sp, #12]
   14608:	cmp	r0, #0
   1460c:	strbne	r6, [sp]
   14610:	cmp	r4, #0
   14614:	beq	14594 <__assert_fail@plt+0x309c>
   14618:	ldr	r4, [sp, #16]
   1461c:	ldr	r0, [sp, #20]
   14620:	cmp	r0, #1
   14624:	beq	14638 <__assert_fail@plt+0x3140>
   14628:	add	r4, r4, r0
   1462c:	str	r4, [sp, #16]
   14630:	strb	r6, [sp, #12]
   14634:	b	14550 <__assert_fail@plt+0x3058>
   14638:	ldrb	r3, [r4]
   1463c:	cmp	r3, r7
   14640:	bne	14628 <__assert_fail@plt+0x3130>
   14644:	b	14594 <__assert_fail@plt+0x309c>
   14648:	ldr	r4, [sp, #16]
   1464c:	str	r5, [sp, #20]
   14650:	strb	r6, [sp, #24]
   14654:	strb	r5, [sp, #12]
   14658:	b	1461c <__assert_fail@plt+0x3124>
   1465c:	ldr	r4, [sp, #16]
   14660:	str	r5, [sp, #20]
   14664:	ldrb	r3, [r4]
   14668:	cmp	r3, #0
   1466c:	bne	146bc <__assert_fail@plt+0x31c4>
   14670:	ldr	r4, [sp, #28]
   14674:	cmp	r4, #0
   14678:	beq	145f8 <__assert_fail@plt+0x3100>
   1467c:	ldr	r3, [pc, #80]	; 146d4 <__assert_fail@plt+0x31dc>
   14680:	mov	r2, #172	; 0xac
   14684:	ldr	r1, [pc, #76]	; 146d8 <__assert_fail@plt+0x31e0>
   14688:	ldr	r0, [pc, #76]	; 146dc <__assert_fail@plt+0x31e4>
   1468c:	bl	114f8 <__assert_fail@plt>
   14690:	ldr	r4, [sp, #16]
   14694:	mov	r0, r4
   14698:	bl	113c0 <strlen@plt>
   1469c:	strb	r6, [sp, #24]
   146a0:	str	r0, [sp, #20]
   146a4:	b	14654 <__assert_fail@plt+0x315c>
   146a8:	ldr	r3, [pc, #36]	; 146d4 <__assert_fail@plt+0x31dc>
   146ac:	mov	r2, #143	; 0x8f
   146b0:	ldr	r1, [pc, #32]	; 146d8 <__assert_fail@plt+0x31e0>
   146b4:	ldr	r0, [pc, #36]	; 146e0 <__assert_fail@plt+0x31e8>
   146b8:	bl	114f8 <__assert_fail@plt>
   146bc:	ldr	r3, [pc, #16]	; 146d4 <__assert_fail@plt+0x31dc>
   146c0:	mov	r2, #171	; 0xab
   146c4:	ldr	r1, [pc, #12]	; 146d8 <__assert_fail@plt+0x31e0>
   146c8:	ldr	r0, [pc, #20]	; 146e4 <__assert_fail@plt+0x31ec>
   146cc:	bl	114f8 <__assert_fail@plt>
   146d0:	andeq	fp, r2, r8, ror #26
   146d4:	andeq	fp, r2, r8, lsl #27
   146d8:	muleq	r2, ip, sp
   146dc:	andeq	fp, r2, r0, ror #21
   146e0:			; <UNDEFINED> instruction: 0x0002bab0
   146e4:	andeq	fp, r2, r8, asr #21
   146e8:	push	{r4, r5, r6, r7, r8, lr}
   146ec:	sub	sp, sp, #56	; 0x38
   146f0:	mov	r4, r0
   146f4:	bl	11300 <__ctype_get_mb_cur_max@plt>
   146f8:	cmp	r0, #1
   146fc:	bls	14868 <__assert_fail@plt+0x3370>
   14700:	mov	r3, #0
   14704:	ldr	r8, [pc, #412]	; 148a8 <__assert_fail@plt+0x33b0>
   14708:	mov	r5, r3
   1470c:	mov	r6, r3
   14710:	mov	r7, #1
   14714:	str	r4, [sp, #16]
   14718:	strb	r3, [sp]
   1471c:	str	r3, [sp, #4]
   14720:	strb	r3, [sp, #12]
   14724:	str	r3, [sp, #8]
   14728:	ldrb	r3, [sp]
   1472c:	cmp	r3, #0
   14730:	bne	14788 <__assert_fail@plt+0x3290>
   14734:	ldrb	r3, [r4]
   14738:	and	r2, r3, #31
   1473c:	lsr	r3, r3, #5
   14740:	ldr	r3, [r8, r3, lsl #2]
   14744:	lsr	r3, r3, r2
   14748:	tst	r3, #1
   1474c:	beq	14774 <__assert_fail@plt+0x327c>
   14750:	str	r7, [sp, #20]
   14754:	ldrb	r4, [r4]
   14758:	strb	r7, [sp, #24]
   1475c:	cmp	r4, #0
   14760:	str	r4, [sp, #28]
   14764:	bne	147e8 <__assert_fail@plt+0x32f0>
   14768:	mov	r0, r5
   1476c:	add	sp, sp, #56	; 0x38
   14770:	pop	{r4, r5, r6, r7, r8, pc}
   14774:	add	r0, sp, #4
   14778:	bl	11264 <mbsinit@plt>
   1477c:	cmp	r0, #0
   14780:	beq	14880 <__assert_fail@plt+0x3388>
   14784:	strb	r7, [sp]
   14788:	bl	11300 <__ctype_get_mb_cur_max@plt>
   1478c:	mov	r1, r0
   14790:	mov	r0, r4
   14794:	bl	2940c <__assert_fail@plt+0x17f14>
   14798:	add	r3, sp, #4
   1479c:	mov	r1, r4
   147a0:	mov	r2, r0
   147a4:	add	r0, sp, #28
   147a8:	bl	1449c <__assert_fail@plt+0x2fa4>
   147ac:	cmn	r0, #1
   147b0:	str	r0, [sp, #20]
   147b4:	beq	14804 <__assert_fail@plt+0x330c>
   147b8:	cmn	r0, #2
   147bc:	beq	1484c <__assert_fail@plt+0x3354>
   147c0:	cmp	r0, #0
   147c4:	beq	14818 <__assert_fail@plt+0x3320>
   147c8:	ldr	r4, [sp, #28]
   147cc:	add	r0, sp, #4
   147d0:	strb	r7, [sp, #24]
   147d4:	bl	11264 <mbsinit@plt>
   147d8:	cmp	r0, #0
   147dc:	strbne	r6, [sp]
   147e0:	cmp	r4, #0
   147e4:	beq	14768 <__assert_fail@plt+0x3270>
   147e8:	ldr	r4, [sp, #16]
   147ec:	ldr	r3, [sp, #20]
   147f0:	add	r4, r4, r3
   147f4:	add	r5, r5, #1
   147f8:	strb	r6, [sp, #12]
   147fc:	str	r4, [sp, #16]
   14800:	b	14728 <__assert_fail@plt+0x3230>
   14804:	str	r7, [sp, #20]
   14808:	strb	r6, [sp, #24]
   1480c:	ldr	r4, [sp, #16]
   14810:	mov	r3, r7
   14814:	b	147f0 <__assert_fail@plt+0x32f8>
   14818:	ldr	r4, [sp, #16]
   1481c:	str	r7, [sp, #20]
   14820:	ldrb	r3, [r4]
   14824:	cmp	r3, #0
   14828:	bne	14894 <__assert_fail@plt+0x339c>
   1482c:	ldr	r4, [sp, #28]
   14830:	cmp	r4, #0
   14834:	beq	147cc <__assert_fail@plt+0x32d4>
   14838:	ldr	r3, [pc, #108]	; 148ac <__assert_fail@plt+0x33b4>
   1483c:	mov	r2, #172	; 0xac
   14840:	ldr	r1, [pc, #104]	; 148b0 <__assert_fail@plt+0x33b8>
   14844:	ldr	r0, [pc, #104]	; 148b4 <__assert_fail@plt+0x33bc>
   14848:	bl	114f8 <__assert_fail@plt>
   1484c:	ldr	r4, [sp, #16]
   14850:	mov	r0, r4
   14854:	bl	113c0 <strlen@plt>
   14858:	strb	r6, [sp, #24]
   1485c:	str	r0, [sp, #20]
   14860:	mov	r3, r0
   14864:	b	147f0 <__assert_fail@plt+0x32f8>
   14868:	mov	r0, r4
   1486c:	bl	113c0 <strlen@plt>
   14870:	mov	r5, r0
   14874:	mov	r0, r5
   14878:	add	sp, sp, #56	; 0x38
   1487c:	pop	{r4, r5, r6, r7, r8, pc}
   14880:	ldr	r3, [pc, #36]	; 148ac <__assert_fail@plt+0x33b4>
   14884:	mov	r2, #143	; 0x8f
   14888:	ldr	r1, [pc, #32]	; 148b0 <__assert_fail@plt+0x33b8>
   1488c:	ldr	r0, [pc, #36]	; 148b8 <__assert_fail@plt+0x33c0>
   14890:	bl	114f8 <__assert_fail@plt>
   14894:	ldr	r3, [pc, #16]	; 148ac <__assert_fail@plt+0x33b4>
   14898:	mov	r2, #171	; 0xab
   1489c:	ldr	r1, [pc, #12]	; 148b0 <__assert_fail@plt+0x33b8>
   148a0:	ldr	r0, [pc, #20]	; 148bc <__assert_fail@plt+0x33c4>
   148a4:	bl	114f8 <__assert_fail@plt>
   148a8:	andeq	fp, r2, r8, ror #26
   148ac:	andeq	fp, r2, ip, lsr #27
   148b0:	muleq	r2, ip, sp
   148b4:	andeq	fp, r2, r0, ror #21
   148b8:			; <UNDEFINED> instruction: 0x0002bab0
   148bc:	andeq	fp, r2, r8, asr #21
   148c0:	push	{r4, r5, r6, lr}
   148c4:	subs	r4, r0, #0
   148c8:	beq	1493c <__assert_fail@plt+0x3444>
   148cc:	mov	r1, #47	; 0x2f
   148d0:	bl	11498 <strrchr@plt>
   148d4:	subs	r5, r0, #0
   148d8:	beq	14928 <__assert_fail@plt+0x3430>
   148dc:	add	r6, r5, #1
   148e0:	sub	r3, r6, r4
   148e4:	cmp	r3, #6
   148e8:	ble	14928 <__assert_fail@plt+0x3430>
   148ec:	mov	r2, #7
   148f0:	ldr	r1, [pc, #96]	; 14958 <__assert_fail@plt+0x3460>
   148f4:	sub	r0, r5, #6
   148f8:	bl	114e0 <strncmp@plt>
   148fc:	cmp	r0, #0
   14900:	bne	14928 <__assert_fail@plt+0x3430>
   14904:	mov	r2, #3
   14908:	ldr	r1, [pc, #76]	; 1495c <__assert_fail@plt+0x3464>
   1490c:	mov	r0, r6
   14910:	bl	114e0 <strncmp@plt>
   14914:	cmp	r0, #0
   14918:	movne	r4, r6
   1491c:	ldreq	r3, [pc, #60]	; 14960 <__assert_fail@plt+0x3468>
   14920:	addeq	r4, r5, #4
   14924:	streq	r4, [r3]
   14928:	ldr	r2, [pc, #52]	; 14964 <__assert_fail@plt+0x346c>
   1492c:	ldr	r3, [pc, #52]	; 14968 <__assert_fail@plt+0x3470>
   14930:	str	r4, [r2]
   14934:	str	r4, [r3]
   14938:	pop	{r4, r5, r6, pc}
   1493c:	ldr	r3, [pc, #40]	; 1496c <__assert_fail@plt+0x3474>
   14940:	mov	r2, #55	; 0x37
   14944:	mov	r1, #1
   14948:	ldr	r3, [r3]
   1494c:	ldr	r0, [pc, #28]	; 14970 <__assert_fail@plt+0x3478>
   14950:	bl	112e8 <fwrite@plt>
   14954:	bl	114ec <abort@plt>
   14958:	strdeq	fp, [r2], -r8
   1495c:	andeq	fp, r2, r0, lsl #28
   14960:	muleq	r3, r0, r1
   14964:			; <UNDEFINED> instruction: 0x0003d1bc
   14968:	muleq	r3, r4, r1
   1496c:	andeq	sp, r3, r0, lsr #3
   14970:	andeq	fp, r2, r0, asr #27
   14974:	push	{r4, r5, r6, lr}
   14978:	mov	r4, r0
   1497c:	mov	r5, r1
   14980:	bl	2ab58 <__assert_fail@plt+0x19660>
   14984:	ldrb	r3, [r0]
   14988:	bic	r3, r3, #32
   1498c:	cmp	r3, #85	; 0x55
   14990:	bne	149f0 <__assert_fail@plt+0x34f8>
   14994:	ldrb	r3, [r0, #1]
   14998:	bic	r3, r3, #32
   1499c:	cmp	r3, #84	; 0x54
   149a0:	bne	14a2c <__assert_fail@plt+0x3534>
   149a4:	ldrb	r3, [r0, #2]
   149a8:	bic	r3, r3, #32
   149ac:	cmp	r3, #70	; 0x46
   149b0:	bne	14a2c <__assert_fail@plt+0x3534>
   149b4:	ldrb	r3, [r0, #3]
   149b8:	cmp	r3, #45	; 0x2d
   149bc:	bne	14a2c <__assert_fail@plt+0x3534>
   149c0:	ldrb	r3, [r0, #4]
   149c4:	cmp	r3, #56	; 0x38
   149c8:	bne	14a2c <__assert_fail@plt+0x3534>
   149cc:	ldrb	r3, [r0, #5]
   149d0:	cmp	r3, #0
   149d4:	bne	14a2c <__assert_fail@plt+0x3534>
   149d8:	ldrb	r2, [r4]
   149dc:	ldr	r3, [pc, #152]	; 14a7c <__assert_fail@plt+0x3584>
   149e0:	ldr	r0, [pc, #152]	; 14a80 <__assert_fail@plt+0x3588>
   149e4:	cmp	r2, #96	; 0x60
   149e8:	movne	r0, r3
   149ec:	pop	{r4, r5, r6, pc}
   149f0:	cmp	r3, #71	; 0x47
   149f4:	bne	14a2c <__assert_fail@plt+0x3534>
   149f8:	ldrb	r3, [r0, #1]
   149fc:	bic	r3, r3, #32
   14a00:	cmp	r3, #66	; 0x42
   14a04:	bne	14a2c <__assert_fail@plt+0x3534>
   14a08:	ldrb	r3, [r0, #2]
   14a0c:	cmp	r3, #49	; 0x31
   14a10:	bne	14a2c <__assert_fail@plt+0x3534>
   14a14:	ldrb	r3, [r0, #3]
   14a18:	cmp	r3, #56	; 0x38
   14a1c:	bne	14a2c <__assert_fail@plt+0x3534>
   14a20:	ldrb	r3, [r0, #4]
   14a24:	cmp	r3, #48	; 0x30
   14a28:	beq	14a40 <__assert_fail@plt+0x3548>
   14a2c:	ldr	r3, [pc, #80]	; 14a84 <__assert_fail@plt+0x358c>
   14a30:	cmp	r5, #9
   14a34:	ldr	r0, [pc, #76]	; 14a88 <__assert_fail@plt+0x3590>
   14a38:	movne	r0, r3
   14a3c:	pop	{r4, r5, r6, pc}
   14a40:	ldrb	r3, [r0, #5]
   14a44:	cmp	r3, #51	; 0x33
   14a48:	bne	14a2c <__assert_fail@plt+0x3534>
   14a4c:	ldrb	r3, [r0, #6]
   14a50:	cmp	r3, #48	; 0x30
   14a54:	bne	14a2c <__assert_fail@plt+0x3534>
   14a58:	ldrb	r3, [r0, #7]
   14a5c:	cmp	r3, #0
   14a60:	bne	14a2c <__assert_fail@plt+0x3534>
   14a64:	ldrb	r2, [r4]
   14a68:	ldr	r3, [pc, #28]	; 14a8c <__assert_fail@plt+0x3594>
   14a6c:	ldr	r0, [pc, #28]	; 14a90 <__assert_fail@plt+0x3598>
   14a70:	cmp	r2, #96	; 0x60
   14a74:	movne	r0, r3
   14a78:	pop	{r4, r5, r6, pc}
   14a7c:	andeq	fp, r2, ip, asr lr
   14a80:	andeq	fp, r2, r8, asr lr
   14a84:	andeq	fp, r2, ip, ror #28
   14a88:	andeq	fp, r2, r8, ror #28
   14a8c:	andeq	fp, r2, r4, ror #28
   14a90:	andeq	fp, r2, r0, ror #28
   14a94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a98:	sub	sp, sp, #140	; 0x8c
   14a9c:	mov	r9, r1
   14aa0:	str	r3, [sp, #24]
   14aa4:	mov	r3, #1
   14aa8:	mov	sl, r0
   14aac:	str	r2, [sp, #44]	; 0x2c
   14ab0:	str	r3, [sp, #28]
   14ab4:	bl	11300 <__ctype_get_mb_cur_max@plt>
   14ab8:	ldr	r3, [sp, #180]	; 0xb4
   14abc:	mov	fp, r9
   14ac0:	mov	r9, sl
   14ac4:	lsr	r3, r3, #1
   14ac8:	and	r3, r3, #1
   14acc:	str	r3, [sp, #40]	; 0x28
   14ad0:	ldr	r3, [sp, #180]	; 0xb4
   14ad4:	mov	r2, #0
   14ad8:	and	r3, r3, #4
   14adc:	str	r3, [sp, #100]	; 0x64
   14ae0:	ldr	r3, [sp, #180]	; 0xb4
   14ae4:	str	r2, [sp, #76]	; 0x4c
   14ae8:	and	r3, r3, #1
   14aec:	str	r3, [sp, #96]	; 0x60
   14af0:	str	r2, [sp, #36]	; 0x24
   14af4:	str	r2, [sp, #56]	; 0x38
   14af8:	str	r2, [sp, #68]	; 0x44
   14afc:	str	r2, [sp, #72]	; 0x48
   14b00:	str	r2, [sp, #84]	; 0x54
   14b04:	str	r0, [sp, #80]	; 0x50
   14b08:	ldr	r3, [sp, #176]	; 0xb0
   14b0c:	cmp	r3, #10
   14b10:	ldrls	pc, [pc, r3, lsl #2]
   14b14:	b	15cec <__assert_fail@plt+0x47f4>
   14b18:	andeq	r4, r1, r4, asr #22
   14b1c:	andeq	r4, r1, r4, ror #28
   14b20:			; <UNDEFINED> instruction: 0x00014fbc
   14b24:	muleq	r1, r8, lr
   14b28:	andeq	r5, r1, r0, lsl r0
   14b2c:	strdeq	r4, [r1], -r0
   14b30:			; <UNDEFINED> instruction: 0x00014eb8
   14b34:	ldrdeq	r4, [r1], -ip
   14b38:	andeq	r4, r1, r4, lsl #30
   14b3c:	andeq	r4, r1, r4, lsl #30
   14b40:	andeq	r4, r1, r4, lsl #30
   14b44:	mov	r3, #0
   14b48:	ldr	r1, [sp, #56]	; 0x38
   14b4c:	ldr	r2, [sp, #176]	; 0xb0
   14b50:	ldr	lr, [sp, #176]	; 0xb0
   14b54:	mov	r8, r3
   14b58:	mov	ip, r3
   14b5c:	str	r3, [sp, #40]	; 0x28
   14b60:	mov	r3, r1
   14b64:	cmp	r2, #2
   14b68:	moveq	r3, #0
   14b6c:	andne	r3, r3, #1
   14b70:	mov	r0, r3
   14b74:	str	r3, [sp, #92]	; 0x5c
   14b78:	ldr	r3, [sp, #68]	; 0x44
   14b7c:	sub	lr, lr, #2
   14b80:	adds	r2, r3, #0
   14b84:	movne	r2, #1
   14b88:	and	r3, r1, ip
   14b8c:	and	r3, r2, r3
   14b90:	clz	lr, lr
   14b94:	str	r3, [sp, #88]	; 0x58
   14b98:	lsr	lr, lr, #5
   14b9c:	mov	r3, ip
   14ba0:	and	r3, r3, lr
   14ba4:	mov	sl, #0
   14ba8:	and	r0, r2, r0
   14bac:	str	r3, [sp, #64]	; 0x40
   14bb0:	eor	r3, r1, #1
   14bb4:	str	lr, [sp, #52]	; 0x34
   14bb8:	str	r0, [sp, #48]	; 0x30
   14bbc:	str	r3, [sp, #60]	; 0x3c
   14bc0:	ldr	r3, [sp, #24]
   14bc4:	cmn	r3, #1
   14bc8:	beq	150f8 <__assert_fail@plt+0x3c00>
   14bcc:	subs	r7, r3, sl
   14bd0:	movne	r7, #1
   14bd4:	cmp	r7, #0
   14bd8:	beq	15110 <__assert_fail@plt+0x3c18>
   14bdc:	ldr	r3, [sp, #48]	; 0x30
   14be0:	cmp	r3, #0
   14be4:	beq	1547c <__assert_fail@plt+0x3f84>
   14be8:	ldr	r2, [sp, #68]	; 0x44
   14bec:	ldr	r1, [sp, #24]
   14bf0:	cmp	r2, #1
   14bf4:	mov	r3, r2
   14bf8:	movls	r3, #0
   14bfc:	movhi	r3, #1
   14c00:	cmn	r1, #1
   14c04:	movne	r3, #0
   14c08:	cmp	r3, #0
   14c0c:	add	r4, sl, r2
   14c10:	beq	14c20 <__assert_fail@plt+0x3728>
   14c14:	ldr	r0, [sp, #44]	; 0x2c
   14c18:	bl	113c0 <strlen@plt>
   14c1c:	str	r0, [sp, #24]
   14c20:	ldr	r3, [sp, #24]
   14c24:	cmp	r3, r4
   14c28:	ldr	r3, [sp, #44]	; 0x2c
   14c2c:	add	r5, r3, sl
   14c30:	bcc	15484 <__assert_fail@plt+0x3f8c>
   14c34:	mov	r0, r5
   14c38:	ldr	r2, [sp, #68]	; 0x44
   14c3c:	ldr	r1, [sp, #72]	; 0x48
   14c40:	bl	11270 <memcmp@plt>
   14c44:	cmp	r0, #0
   14c48:	bne	15484 <__assert_fail@plt+0x3f8c>
   14c4c:	ldr	r3, [sp, #40]	; 0x28
   14c50:	cmp	r3, #0
   14c54:	bne	15e40 <__assert_fail@plt+0x4948>
   14c58:	ldrb	r4, [r5]
   14c5c:	cmp	r4, #126	; 0x7e
   14c60:	ldrls	pc, [pc, r4, lsl #2]
   14c64:	b	15d7c <__assert_fail@plt+0x4884>
   14c68:	andeq	r5, r1, ip, lsr r3
   14c6c:	andeq	r5, r1, ip, ror sp
   14c70:	andeq	r5, r1, ip, ror sp
   14c74:	andeq	r5, r1, ip, ror sp
   14c78:	andeq	r5, r1, ip, ror sp
   14c7c:	andeq	r5, r1, ip, ror sp
   14c80:	andeq	r5, r1, ip, ror sp
   14c84:	andeq	r5, r1, r8, lsr #6
   14c88:	andeq	r5, r1, r4, lsl r3
   14c8c:	strdeq	r5, [r1], -r0
   14c90:	ldrdeq	r5, [r1], -r0
   14c94:	andeq	r5, r1, r0, lsl #6
   14c98:	andeq	r5, r1, r8, lsr r2
   14c9c:	andeq	r5, r1, ip, ror #8
   14ca0:	andeq	r5, r1, ip, ror sp
   14ca4:	andeq	r5, r1, ip, ror sp
   14ca8:	andeq	r5, r1, ip, ror sp
   14cac:	andeq	r5, r1, ip, ror sp
   14cb0:	andeq	r5, r1, ip, ror sp
   14cb4:	andeq	r5, r1, ip, ror sp
   14cb8:	andeq	r5, r1, ip, ror sp
   14cbc:	andeq	r5, r1, ip, ror sp
   14cc0:	andeq	r5, r1, ip, ror sp
   14cc4:	andeq	r5, r1, ip, ror sp
   14cc8:	andeq	r5, r1, ip, ror sp
   14ccc:	andeq	r5, r1, ip, ror sp
   14cd0:	andeq	r5, r1, ip, ror sp
   14cd4:	andeq	r5, r1, ip, ror sp
   14cd8:	andeq	r5, r1, ip, ror sp
   14cdc:	andeq	r5, r1, ip, ror sp
   14ce0:	andeq	r5, r1, ip, ror sp
   14ce4:	andeq	r5, r1, ip, ror sp
   14ce8:	andeq	r5, r1, ip, asr r4
   14cec:	andeq	r5, r1, ip, lsr r4
   14cf0:	andeq	r5, r1, ip, lsr r4
   14cf4:	andeq	r5, r1, ip, lsl r4
   14cf8:	andeq	r5, r1, ip, lsr r4
   14cfc:	andeq	r5, r1, r8, lsr #4
   14d00:	andeq	r5, r1, ip, lsr r4
   14d04:	andeq	r5, r1, r4, lsl #4
   14d08:	andeq	r5, r1, ip, lsr r4
   14d0c:	andeq	r5, r1, ip, lsr r4
   14d10:	andeq	r5, r1, ip, lsr r4
   14d14:	andeq	r5, r1, r8, lsr #4
   14d18:	andeq	r5, r1, r8, lsr #4
   14d1c:	andeq	r5, r1, r8, lsr #4
   14d20:	andeq	r5, r1, r8, lsr #4
   14d24:	andeq	r5, r1, r8, lsr #4
   14d28:	andeq	r5, r1, r8, lsr #4
   14d2c:	andeq	r5, r1, r8, lsr #4
   14d30:	andeq	r5, r1, r8, lsr #4
   14d34:	andeq	r5, r1, r8, lsr #4
   14d38:	andeq	r5, r1, r8, lsr #4
   14d3c:	andeq	r5, r1, r8, lsr #4
   14d40:	andeq	r5, r1, r8, lsr #4
   14d44:	andeq	r5, r1, r8, lsr #4
   14d48:	andeq	r5, r1, r8, lsr #4
   14d4c:	andeq	r5, r1, r8, lsr #4
   14d50:	andeq	r5, r1, r8, lsr #4
   14d54:	andeq	r5, r1, ip, lsr r4
   14d58:	andeq	r5, r1, ip, lsr r4
   14d5c:	andeq	r5, r1, ip, lsr r4
   14d60:	andeq	r5, r1, ip, lsr r4
   14d64:			; <UNDEFINED> instruction: 0x000151b4
   14d68:	andeq	r5, r1, ip, ror sp
   14d6c:	andeq	r5, r1, r8, lsr #4
   14d70:	andeq	r5, r1, r8, lsr #4
   14d74:	andeq	r5, r1, r8, lsr #4
   14d78:	andeq	r5, r1, r8, lsr #4
   14d7c:	andeq	r5, r1, r8, lsr #4
   14d80:	andeq	r5, r1, r8, lsr #4
   14d84:	andeq	r5, r1, r8, lsr #4
   14d88:	andeq	r5, r1, r8, lsr #4
   14d8c:	andeq	r5, r1, r8, lsr #4
   14d90:	andeq	r5, r1, r8, lsr #4
   14d94:	andeq	r5, r1, r8, lsr #4
   14d98:	andeq	r5, r1, r8, lsr #4
   14d9c:	andeq	r5, r1, r8, lsr #4
   14da0:	andeq	r5, r1, r8, lsr #4
   14da4:	andeq	r5, r1, r8, lsr #4
   14da8:	andeq	r5, r1, r8, lsr #4
   14dac:	andeq	r5, r1, r8, lsr #4
   14db0:	andeq	r5, r1, r8, lsr #4
   14db4:	andeq	r5, r1, r8, lsr #4
   14db8:	andeq	r5, r1, r8, lsr #4
   14dbc:	andeq	r5, r1, r8, lsr #4
   14dc0:	andeq	r5, r1, r8, lsr #4
   14dc4:	andeq	r5, r1, r8, lsr #4
   14dc8:	andeq	r5, r1, r8, lsr #4
   14dcc:	andeq	r5, r1, r8, lsr #4
   14dd0:	andeq	r5, r1, r8, lsr #4
   14dd4:	andeq	r5, r1, ip, lsr r4
   14dd8:	andeq	r5, r1, r0, lsl #3
   14ddc:	andeq	r5, r1, r8, lsr #4
   14de0:	andeq	r5, r1, ip, lsr r4
   14de4:	andeq	r5, r1, r8, lsr #4
   14de8:	andeq	r5, r1, ip, lsr r4
   14dec:	andeq	r5, r1, r8, lsr #4
   14df0:	andeq	r5, r1, r8, lsr #4
   14df4:	andeq	r5, r1, r8, lsr #4
   14df8:	andeq	r5, r1, r8, lsr #4
   14dfc:	andeq	r5, r1, r8, lsr #4
   14e00:	andeq	r5, r1, r8, lsr #4
   14e04:	andeq	r5, r1, r8, lsr #4
   14e08:	andeq	r5, r1, r8, lsr #4
   14e0c:	andeq	r5, r1, r8, lsr #4
   14e10:	andeq	r5, r1, r8, lsr #4
   14e14:	andeq	r5, r1, r8, lsr #4
   14e18:	andeq	r5, r1, r8, lsr #4
   14e1c:	andeq	r5, r1, r8, lsr #4
   14e20:	andeq	r5, r1, r8, lsr #4
   14e24:	andeq	r5, r1, r8, lsr #4
   14e28:	andeq	r5, r1, r8, lsr #4
   14e2c:	andeq	r5, r1, r8, lsr #4
   14e30:	andeq	r5, r1, r8, lsr #4
   14e34:	andeq	r5, r1, r8, lsr #4
   14e38:	andeq	r5, r1, r8, lsr #4
   14e3c:	andeq	r5, r1, r8, lsr #4
   14e40:	andeq	r5, r1, r8, lsr #4
   14e44:	andeq	r5, r1, r8, lsr #4
   14e48:	andeq	r5, r1, r8, lsr #4
   14e4c:	andeq	r5, r1, r8, lsr #4
   14e50:	andeq	r5, r1, r8, lsr #4
   14e54:	andeq	r5, r1, r8, lsr r0
   14e58:	andeq	r5, r1, ip, lsr r4
   14e5c:	andeq	r5, r1, r8, lsr r0
   14e60:	andeq	r5, r1, ip, lsl r4
   14e64:	mov	r3, #1
   14e68:	str	r3, [sp, #40]	; 0x28
   14e6c:	str	r3, [sp, #68]	; 0x44
   14e70:	mov	r8, #0
   14e74:	ldr	r3, [pc, #4056]	; 15e54 <__assert_fail@plt+0x495c>
   14e78:	str	r3, [sp, #72]	; 0x48
   14e7c:	mov	r3, #2
   14e80:	str	r3, [sp, #176]	; 0xb0
   14e84:	ldr	r1, [sp, #56]	; 0x38
   14e88:	mov	r2, r3
   14e8c:	ldr	ip, [sp, #40]	; 0x28
   14e90:	mov	lr, r3
   14e94:	b	14b60 <__assert_fail@plt+0x3668>
   14e98:	mov	r3, #1
   14e9c:	str	r3, [sp, #56]	; 0x38
   14ea0:	str	r3, [sp, #68]	; 0x44
   14ea4:	str	r3, [sp, #40]	; 0x28
   14ea8:	ldr	r3, [pc, #4004]	; 15e54 <__assert_fail@plt+0x495c>
   14eac:	mov	r8, #0
   14eb0:	str	r3, [sp, #72]	; 0x48
   14eb4:	b	14e7c <__assert_fail@plt+0x3984>
   14eb8:	mov	r3, #1
   14ebc:	str	r3, [sp, #56]	; 0x38
   14ec0:	str	r3, [sp, #68]	; 0x44
   14ec4:	str	r3, [sp, #40]	; 0x28
   14ec8:	ldr	r3, [pc, #3976]	; 15e58 <__assert_fail@plt+0x4960>
   14ecc:	mov	r8, #0
   14ed0:	str	r3, [sp, #72]	; 0x48
   14ed4:	mov	r3, #5
   14ed8:	b	14e80 <__assert_fail@plt+0x3988>
   14edc:	mov	r3, #0
   14ee0:	str	r3, [sp, #40]	; 0x28
   14ee4:	mov	r3, #1
   14ee8:	str	r3, [sp, #56]	; 0x38
   14eec:	mov	r8, #0
   14ef0:	mov	r1, r3
   14ef4:	ldr	r2, [sp, #176]	; 0xb0
   14ef8:	ldr	ip, [sp, #40]	; 0x28
   14efc:	ldr	lr, [sp, #176]	; 0xb0
   14f00:	b	14b60 <__assert_fail@plt+0x3668>
   14f04:	ldr	r3, [sp, #176]	; 0xb0
   14f08:	cmp	r3, #10
   14f0c:	beq	14f50 <__assert_fail@plt+0x3a58>
   14f10:	mov	r2, #5
   14f14:	ldr	r1, [pc, #3904]	; 15e5c <__assert_fail@plt+0x4964>
   14f18:	mov	r0, #0
   14f1c:	bl	11288 <dcgettext@plt>
   14f20:	ldr	r2, [pc, #3892]	; 15e5c <__assert_fail@plt+0x4964>
   14f24:	cmp	r0, r2
   14f28:	str	r0, [sp, #188]	; 0xbc
   14f2c:	beq	15fe8 <__assert_fail@plt+0x4af0>
   14f30:	mov	r2, #5
   14f34:	ldr	r1, [pc, #3864]	; 15e54 <__assert_fail@plt+0x495c>
   14f38:	mov	r0, #0
   14f3c:	bl	11288 <dcgettext@plt>
   14f40:	ldr	r2, [pc, #3852]	; 15e54 <__assert_fail@plt+0x495c>
   14f44:	cmp	r0, r2
   14f48:	str	r0, [sp, #192]	; 0xc0
   14f4c:	beq	15fd8 <__assert_fail@plt+0x4ae0>
   14f50:	ldr	r8, [sp, #40]	; 0x28
   14f54:	cmp	r8, #0
   14f58:	movne	r8, #0
   14f5c:	bne	14f8c <__assert_fail@plt+0x3a94>
   14f60:	ldr	r3, [sp, #188]	; 0xbc
   14f64:	ldrb	r3, [r3]
   14f68:	cmp	r3, #0
   14f6c:	beq	14f8c <__assert_fail@plt+0x3a94>
   14f70:	ldr	r2, [sp, #188]	; 0xbc
   14f74:	cmp	fp, r8
   14f78:	strbhi	r3, [r9, r8]
   14f7c:	ldrb	r3, [r2, #1]!
   14f80:	add	r8, r8, #1
   14f84:	cmp	r3, #0
   14f88:	bne	14f74 <__assert_fail@plt+0x3a7c>
   14f8c:	ldr	r0, [sp, #192]	; 0xc0
   14f90:	bl	113c0 <strlen@plt>
   14f94:	ldr	r3, [sp, #192]	; 0xc0
   14f98:	ldr	r2, [sp, #176]	; 0xb0
   14f9c:	str	r3, [sp, #72]	; 0x48
   14fa0:	mov	r3, #1
   14fa4:	str	r3, [sp, #56]	; 0x38
   14fa8:	mov	r1, r3
   14fac:	ldr	ip, [sp, #40]	; 0x28
   14fb0:	ldr	lr, [sp, #176]	; 0xb0
   14fb4:	str	r0, [sp, #68]	; 0x44
   14fb8:	b	14b60 <__assert_fail@plt+0x3668>
   14fbc:	ldr	r3, [sp, #40]	; 0x28
   14fc0:	cmp	r3, #0
   14fc4:	beq	15c6c <__assert_fail@plt+0x4774>
   14fc8:	mov	r3, #1
   14fcc:	str	r3, [sp, #68]	; 0x44
   14fd0:	ldr	r3, [pc, #3708]	; 15e54 <__assert_fail@plt+0x495c>
   14fd4:	str	r3, [sp, #72]	; 0x48
   14fd8:	mov	r8, #0
   14fdc:	ldr	r1, [sp, #56]	; 0x38
   14fe0:	ldr	r2, [sp, #176]	; 0xb0
   14fe4:	ldr	ip, [sp, #40]	; 0x28
   14fe8:	ldr	lr, [sp, #176]	; 0xb0
   14fec:	b	14b60 <__assert_fail@plt+0x3668>
   14ff0:	ldr	r3, [sp, #40]	; 0x28
   14ff4:	cmp	r3, #0
   14ff8:	beq	15cf0 <__assert_fail@plt+0x47f8>
   14ffc:	str	r3, [sp, #56]	; 0x38
   15000:	mov	r3, #1
   15004:	str	r3, [sp, #68]	; 0x44
   15008:	ldr	r3, [pc, #3656]	; 15e58 <__assert_fail@plt+0x4960>
   1500c:	b	14fd4 <__assert_fail@plt+0x3adc>
   15010:	ldr	r3, [sp, #40]	; 0x28
   15014:	cmp	r3, #0
   15018:	mov	r3, #1
   1501c:	streq	r3, [sp, #56]	; 0x38
   15020:	beq	15c6c <__assert_fail@plt+0x4774>
   15024:	str	r3, [sp, #68]	; 0x44
   15028:	ldr	r3, [pc, #3620]	; 15e54 <__assert_fail@plt+0x495c>
   1502c:	mov	r8, #0
   15030:	str	r3, [sp, #72]	; 0x48
   15034:	b	14e7c <__assert_fail@plt+0x3984>
   15038:	ldr	r3, [sp, #24]
   1503c:	ldr	r6, [sp, #48]	; 0x30
   15040:	cmn	r3, #1
   15044:	beq	156a0 <__assert_fail@plt+0x41a8>
   15048:	subs	r3, r3, #1
   1504c:	movne	r3, #1
   15050:	cmp	r3, #0
   15054:	beq	15420 <__assert_fail@plt+0x3f28>
   15058:	ldr	r1, [sp, #52]	; 0x34
   1505c:	mov	r7, r3
   15060:	mov	r3, #0
   15064:	str	r3, [sp, #32]
   15068:	ldr	r3, [sp, #60]	; 0x3c
   1506c:	orr	r2, r1, r3
   15070:	ldr	r3, [sp, #40]	; 0x28
   15074:	eor	r2, r2, #1
   15078:	orr	r2, r3, r2
   1507c:	tst	r2, #255	; 0xff
   15080:	bne	159a4 <__assert_fail@plt+0x44ac>
   15084:	cmp	r6, #0
   15088:	bne	15264 <__assert_fail@plt+0x3d6c>
   1508c:	ldr	r3, [sp, #36]	; 0x24
   15090:	add	sl, sl, #1
   15094:	and	r3, r3, r7
   15098:	uxtb	r6, r3
   1509c:	cmp	r6, #0
   150a0:	beq	150cc <__assert_fail@plt+0x3bd4>
   150a4:	cmp	fp, r8
   150a8:	movhi	r3, #39	; 0x27
   150ac:	strbhi	r3, [r9, r8]
   150b0:	add	r3, r8, #1
   150b4:	cmp	fp, r3
   150b8:	movhi	r2, #39	; 0x27
   150bc:	add	r8, r8, #2
   150c0:	strbhi	r2, [r9, r3]
   150c4:	mov	r3, #0
   150c8:	str	r3, [sp, #36]	; 0x24
   150cc:	ldr	r2, [sp, #32]
   150d0:	cmp	r8, fp
   150d4:	ldr	r3, [sp, #28]
   150d8:	strbcc	r4, [r9, r8]
   150dc:	cmp	r2, #0
   150e0:	moveq	r3, #0
   150e4:	str	r3, [sp, #28]
   150e8:	ldr	r3, [sp, #24]
   150ec:	add	r8, r8, #1
   150f0:	cmn	r3, #1
   150f4:	bne	14bcc <__assert_fail@plt+0x36d4>
   150f8:	ldr	r3, [sp, #44]	; 0x2c
   150fc:	ldrb	r3, [r3, sl]
   15100:	adds	r7, r3, #0
   15104:	movne	r7, #1
   15108:	cmp	r7, #0
   1510c:	bne	14bdc <__assert_fail@plt+0x36e4>
   15110:	ldr	r3, [sp, #64]	; 0x40
   15114:	cmp	r8, #0
   15118:	movne	r3, #0
   1511c:	andeq	r3, r3, #1
   15120:	cmp	r3, #0
   15124:	str	r3, [sp, #64]	; 0x40
   15128:	bne	15bcc <__assert_fail@plt+0x46d4>
   1512c:	ldr	r3, [sp, #40]	; 0x28
   15130:	ldr	r2, [sp, #52]	; 0x34
   15134:	eor	r3, r3, #1
   15138:	ands	r2, r2, r3
   1513c:	beq	15ff8 <__assert_fail@plt+0x4b00>
   15140:	ldr	r3, [sp, #76]	; 0x4c
   15144:	cmp	r3, #0
   15148:	beq	15fc8 <__assert_fail@plt+0x4ad0>
   1514c:	ldr	r3, [sp, #28]
   15150:	cmp	r3, #0
   15154:	bne	15f84 <__assert_fail@plt+0x4a8c>
   15158:	ldr	r2, [sp, #84]	; 0x54
   1515c:	clz	r3, fp
   15160:	cmp	r2, #0
   15164:	lsr	r3, r3, #5
   15168:	moveq	r3, #0
   1516c:	cmp	r3, #0
   15170:	beq	15f24 <__assert_fail@plt+0x4a2c>
   15174:	mov	fp, r2
   15178:	str	r3, [sp, #76]	; 0x4c
   1517c:	b	14b08 <__assert_fail@plt+0x3610>
   15180:	ldr	r3, [sp, #176]	; 0xb0
   15184:	ldr	r6, [sp, #48]	; 0x30
   15188:	cmp	r3, #2
   1518c:	beq	156c4 <__assert_fail@plt+0x41cc>
   15190:	ldr	r3, [sp, #88]	; 0x58
   15194:	cmp	r3, #0
   15198:	beq	15c48 <__assert_fail@plt+0x4750>
   1519c:	mov	r3, #0
   151a0:	add	sl, sl, #1
   151a4:	ldr	r6, [sp, #36]	; 0x24
   151a8:	str	r3, [sp, #32]
   151ac:	mov	r4, #92	; 0x5c
   151b0:	b	1509c <__assert_fail@plt+0x3ba4>
   151b4:	ldr	r3, [sp, #176]	; 0xb0
   151b8:	ldr	r6, [sp, #48]	; 0x30
   151bc:	cmp	r3, #2
   151c0:	beq	156f4 <__assert_fail@plt+0x41fc>
   151c4:	cmp	r3, #5
   151c8:	bne	15c58 <__assert_fail@plt+0x4760>
   151cc:	ldr	r3, [sp, #100]	; 0x64
   151d0:	cmp	r3, #0
   151d4:	beq	15cbc <__assert_fail@plt+0x47c4>
   151d8:	ldr	r2, [sp, #24]
   151dc:	add	r3, sl, #2
   151e0:	cmp	r2, r3
   151e4:	bls	151f4 <__assert_fail@plt+0x3cfc>
   151e8:	ldrb	r4, [r5, #1]
   151ec:	cmp	r4, #63	; 0x3f
   151f0:	beq	15e64 <__assert_fail@plt+0x496c>
   151f4:	mov	r1, #0
   151f8:	str	r1, [sp, #32]
   151fc:	mov	r4, #63	; 0x3f
   15200:	b	15068 <__assert_fail@plt+0x3b70>
   15204:	ldr	r3, [sp, #176]	; 0xb0
   15208:	ldr	r6, [sp, #48]	; 0x30
   1520c:	cmp	r3, #2
   15210:	beq	15720 <__assert_fail@plt+0x4228>
   15214:	str	r7, [sp, #32]
   15218:	str	r7, [sp, #76]	; 0x4c
   1521c:	mov	r1, #0
   15220:	mov	r4, #39	; 0x27
   15224:	b	15068 <__assert_fail@plt+0x3b70>
   15228:	ldr	r6, [sp, #48]	; 0x30
   1522c:	ldr	r1, [sp, #52]	; 0x34
   15230:	str	r7, [sp, #32]
   15234:	b	15068 <__assert_fail@plt+0x3b70>
   15238:	ldr	r6, [sp, #48]	; 0x30
   1523c:	ldr	r1, [sp, #52]	; 0x34
   15240:	mov	r4, #12
   15244:	mov	r3, #102	; 0x66
   15248:	ldr	r2, [sp, #56]	; 0x38
   1524c:	cmp	r2, #0
   15250:	streq	r2, [sp, #32]
   15254:	beq	15068 <__assert_fail@plt+0x3b70>
   15258:	mov	r4, r3
   1525c:	mov	r3, #0
   15260:	str	r3, [sp, #32]
   15264:	ldr	r3, [sp, #40]	; 0x28
   15268:	cmp	r3, #0
   1526c:	bne	159dc <__assert_fail@plt+0x44e4>
   15270:	ldr	r3, [sp, #36]	; 0x24
   15274:	eor	r3, r3, #1
   15278:	and	r3, r3, r1
   1527c:	ands	r3, r3, #255	; 0xff
   15280:	beq	152b8 <__assert_fail@plt+0x3dc0>
   15284:	cmp	fp, r8
   15288:	movhi	r2, #39	; 0x27
   1528c:	strbhi	r2, [r9, r8]
   15290:	add	r2, r8, #1
   15294:	cmp	fp, r2
   15298:	movhi	r1, #36	; 0x24
   1529c:	strbhi	r1, [r9, r2]
   152a0:	add	r2, r8, #2
   152a4:	cmp	fp, r2
   152a8:	add	r8, r8, #3
   152ac:	movhi	r1, #39	; 0x27
   152b0:	strbhi	r1, [r9, r2]
   152b4:	str	r3, [sp, #36]	; 0x24
   152b8:	cmp	fp, r8
   152bc:	movhi	r3, #92	; 0x5c
   152c0:	strbhi	r3, [r9, r8]
   152c4:	add	sl, sl, #1
   152c8:	add	r8, r8, #1
   152cc:	b	150cc <__assert_fail@plt+0x3bd4>
   152d0:	ldr	r6, [sp, #48]	; 0x30
   152d4:	mov	r4, #10
   152d8:	mov	r3, #110	; 0x6e
   152dc:	ldr	r2, [sp, #64]	; 0x40
   152e0:	cmp	r2, #0
   152e4:	bne	15d64 <__assert_fail@plt+0x486c>
   152e8:	ldr	r1, [sp, #52]	; 0x34
   152ec:	b	15248 <__assert_fail@plt+0x3d50>
   152f0:	ldr	r6, [sp, #48]	; 0x30
   152f4:	ldr	r1, [sp, #52]	; 0x34
   152f8:	mov	r3, #116	; 0x74
   152fc:	b	15248 <__assert_fail@plt+0x3d50>
   15300:	ldr	r6, [sp, #48]	; 0x30
   15304:	ldr	r1, [sp, #52]	; 0x34
   15308:	mov	r4, #11
   1530c:	mov	r3, #118	; 0x76
   15310:	b	15248 <__assert_fail@plt+0x3d50>
   15314:	ldr	r6, [sp, #48]	; 0x30
   15318:	ldr	r1, [sp, #52]	; 0x34
   1531c:	mov	r4, #8
   15320:	mov	r3, #98	; 0x62
   15324:	b	15248 <__assert_fail@plt+0x3d50>
   15328:	ldr	r6, [sp, #48]	; 0x30
   1532c:	ldr	r1, [sp, #52]	; 0x34
   15330:	mov	r4, #7
   15334:	mov	r3, #97	; 0x61
   15338:	b	15248 <__assert_fail@plt+0x3d50>
   1533c:	ldr	r3, [sp, #56]	; 0x38
   15340:	ldr	r6, [sp, #48]	; 0x30
   15344:	cmp	r3, #0
   15348:	beq	1580c <__assert_fail@plt+0x4314>
   1534c:	ldr	r3, [sp, #40]	; 0x28
   15350:	cmp	r3, #0
   15354:	bne	15e40 <__assert_fail@plt+0x4948>
   15358:	ldr	r3, [sp, #36]	; 0x24
   1535c:	ldr	r2, [sp, #52]	; 0x34
   15360:	eor	r3, r3, #1
   15364:	ands	r3, r2, r3
   15368:	moveq	r2, r8
   1536c:	beq	153a4 <__assert_fail@plt+0x3eac>
   15370:	cmp	fp, r8
   15374:	movhi	r2, #39	; 0x27
   15378:	strbhi	r2, [r9, r8]
   1537c:	add	r2, r8, #1
   15380:	cmp	fp, r2
   15384:	movhi	r1, #36	; 0x24
   15388:	strbhi	r1, [r9, r2]
   1538c:	add	r2, r8, #2
   15390:	cmp	fp, r2
   15394:	movhi	r1, #39	; 0x27
   15398:	strbhi	r1, [r9, r2]
   1539c:	add	r2, r8, #3
   153a0:	str	r3, [sp, #36]	; 0x24
   153a4:	cmp	fp, r2
   153a8:	movhi	r3, #92	; 0x5c
   153ac:	strbhi	r3, [r9, r2]
   153b0:	ldr	r3, [sp, #92]	; 0x5c
   153b4:	add	r8, r2, #1
   153b8:	cmp	r3, #0
   153bc:	beq	15d40 <__assert_fail@plt+0x4848>
   153c0:	ldr	r1, [sp, #24]
   153c4:	add	r3, sl, #1
   153c8:	cmp	r1, r3
   153cc:	bls	15404 <__assert_fail@plt+0x3f0c>
   153d0:	ldr	r1, [sp, #44]	; 0x2c
   153d4:	ldrb	r3, [r1, r3]
   153d8:	sub	r3, r3, #48	; 0x30
   153dc:	cmp	r3, #9
   153e0:	bhi	15404 <__assert_fail@plt+0x3f0c>
   153e4:	cmp	fp, r8
   153e8:	movhi	r3, #48	; 0x30
   153ec:	strbhi	r3, [r9, r8]
   153f0:	add	r3, r2, #2
   153f4:	cmp	fp, r3
   153f8:	add	r8, r2, #3
   153fc:	movhi	r1, #48	; 0x30
   15400:	strbhi	r1, [r9, r3]
   15404:	ldr	r3, [sp, #40]	; 0x28
   15408:	ldr	r1, [sp, #52]	; 0x34
   1540c:	mov	r7, r3
   15410:	str	r3, [sp, #32]
   15414:	mov	r4, #48	; 0x30
   15418:	b	15068 <__assert_fail@plt+0x3b70>
   1541c:	ldr	r6, [sp, #48]	; 0x30
   15420:	cmp	sl, #0
   15424:	streq	r7, [sp, #32]
   15428:	beq	15448 <__assert_fail@plt+0x3f50>
   1542c:	mov	r3, #0
   15430:	ldr	r1, [sp, #52]	; 0x34
   15434:	str	r3, [sp, #32]
   15438:	b	15068 <__assert_fail@plt+0x3b70>
   1543c:	ldr	r6, [sp, #48]	; 0x30
   15440:	mov	r3, #0
   15444:	str	r3, [sp, #32]
   15448:	ldr	r3, [sp, #64]	; 0x40
   1544c:	cmp	r3, #0
   15450:	bne	15bcc <__assert_fail@plt+0x46d4>
   15454:	ldr	r1, [sp, #52]	; 0x34
   15458:	b	15068 <__assert_fail@plt+0x3b70>
   1545c:	ldr	r3, [sp, #48]	; 0x30
   15460:	mov	r6, r3
   15464:	str	r3, [sp, #32]
   15468:	b	15448 <__assert_fail@plt+0x3f50>
   1546c:	ldr	r6, [sp, #48]	; 0x30
   15470:	mov	r4, #13
   15474:	mov	r3, #114	; 0x72
   15478:	b	152dc <__assert_fail@plt+0x3de4>
   1547c:	ldr	r3, [sp, #44]	; 0x2c
   15480:	add	r5, r3, sl
   15484:	ldrb	r4, [r5]
   15488:	cmp	r4, #126	; 0x7e
   1548c:	ldrls	pc, [pc, r4, lsl #2]
   15490:	b	1582c <__assert_fail@plt+0x4334>
   15494:	strdeq	r5, [r1], -ip
   15498:	andeq	r5, r1, ip, lsr #16
   1549c:	andeq	r5, r1, ip, lsr #16
   154a0:	andeq	r5, r1, ip, lsr #16
   154a4:	andeq	r5, r1, ip, lsr #16
   154a8:	andeq	r5, r1, ip, lsr #16
   154ac:	andeq	r5, r1, ip, lsr #16
   154b0:	strdeq	r5, [r1], -r4
   154b4:	andeq	r5, r1, ip, ror #15
   154b8:	andeq	r5, r1, r0, ror #15
   154bc:	ldrdeq	r5, [r1], -r8
   154c0:	ldrdeq	r5, [r1], -r0
   154c4:	andeq	r5, r1, r8, asr #15
   154c8:	andeq	r5, r1, r0, asr #15
   154cc:	andeq	r5, r1, ip, lsr #16
   154d0:	andeq	r5, r1, ip, lsr #16
   154d4:	andeq	r5, r1, ip, lsr #16
   154d8:	andeq	r5, r1, ip, lsr #16
   154dc:	andeq	r5, r1, ip, lsr #16
   154e0:	andeq	r5, r1, ip, lsr #16
   154e4:	andeq	r5, r1, ip, lsr #16
   154e8:	andeq	r5, r1, ip, lsr #16
   154ec:	andeq	r5, r1, ip, lsr #16
   154f0:	andeq	r5, r1, ip, lsr #16
   154f4:	andeq	r5, r1, ip, lsr #16
   154f8:	andeq	r5, r1, ip, lsr #16
   154fc:	andeq	r5, r1, ip, lsr #16
   15500:	andeq	r5, r1, ip, lsr #16
   15504:	andeq	r5, r1, ip, lsr #16
   15508:	andeq	r5, r1, ip, lsr #16
   1550c:	andeq	r5, r1, ip, lsr #16
   15510:	andeq	r5, r1, ip, lsr #16
   15514:			; <UNDEFINED> instruction: 0x000157b4
   15518:	andeq	r5, r1, ip, lsr #15
   1551c:	andeq	r5, r1, ip, lsr #15
   15520:	andeq	r5, r1, r4, lsr #15
   15524:	andeq	r5, r1, ip, lsr #15
   15528:	muleq	r1, ip, r7
   1552c:	andeq	r5, r1, ip, lsr #15
   15530:	andeq	r5, r1, r0, lsl r7
   15534:	andeq	r5, r1, ip, lsr #15
   15538:	andeq	r5, r1, ip, lsr #15
   1553c:	andeq	r5, r1, ip, lsr #15
   15540:	muleq	r1, ip, r7
   15544:	muleq	r1, ip, r7
   15548:	muleq	r1, ip, r7
   1554c:	muleq	r1, ip, r7
   15550:	muleq	r1, ip, r7
   15554:	muleq	r1, ip, r7
   15558:	muleq	r1, ip, r7
   1555c:	muleq	r1, ip, r7
   15560:	muleq	r1, ip, r7
   15564:	muleq	r1, ip, r7
   15568:	muleq	r1, ip, r7
   1556c:	muleq	r1, ip, r7
   15570:	muleq	r1, ip, r7
   15574:	muleq	r1, ip, r7
   15578:	muleq	r1, ip, r7
   1557c:	muleq	r1, ip, r7
   15580:	andeq	r5, r1, ip, lsr #15
   15584:	andeq	r5, r1, ip, lsr #15
   15588:	andeq	r5, r1, ip, lsr #15
   1558c:	andeq	r5, r1, ip, lsr #15
   15590:	andeq	r5, r1, r4, ror #13
   15594:	andeq	r5, r1, ip, lsr #16
   15598:	muleq	r1, ip, r7
   1559c:	muleq	r1, ip, r7
   155a0:	muleq	r1, ip, r7
   155a4:	muleq	r1, ip, r7
   155a8:	muleq	r1, ip, r7
   155ac:	muleq	r1, ip, r7
   155b0:	muleq	r1, ip, r7
   155b4:	muleq	r1, ip, r7
   155b8:	muleq	r1, ip, r7
   155bc:	muleq	r1, ip, r7
   155c0:	muleq	r1, ip, r7
   155c4:	muleq	r1, ip, r7
   155c8:	muleq	r1, ip, r7
   155cc:	muleq	r1, ip, r7
   155d0:	muleq	r1, ip, r7
   155d4:	muleq	r1, ip, r7
   155d8:	muleq	r1, ip, r7
   155dc:	muleq	r1, ip, r7
   155e0:	muleq	r1, ip, r7
   155e4:	muleq	r1, ip, r7
   155e8:	muleq	r1, ip, r7
   155ec:	muleq	r1, ip, r7
   155f0:	muleq	r1, ip, r7
   155f4:	muleq	r1, ip, r7
   155f8:	muleq	r1, ip, r7
   155fc:	muleq	r1, ip, r7
   15600:	andeq	r5, r1, ip, lsr #15
   15604:			; <UNDEFINED> instruction: 0x000156b4
   15608:	muleq	r1, ip, r7
   1560c:	andeq	r5, r1, ip, lsr #15
   15610:	muleq	r1, ip, r7
   15614:	andeq	r5, r1, ip, lsr #15
   15618:	muleq	r1, ip, r7
   1561c:	muleq	r1, ip, r7
   15620:	muleq	r1, ip, r7
   15624:	muleq	r1, ip, r7
   15628:	muleq	r1, ip, r7
   1562c:	muleq	r1, ip, r7
   15630:	muleq	r1, ip, r7
   15634:	muleq	r1, ip, r7
   15638:	muleq	r1, ip, r7
   1563c:	muleq	r1, ip, r7
   15640:	muleq	r1, ip, r7
   15644:	muleq	r1, ip, r7
   15648:	muleq	r1, ip, r7
   1564c:	muleq	r1, ip, r7
   15650:	muleq	r1, ip, r7
   15654:	muleq	r1, ip, r7
   15658:	muleq	r1, ip, r7
   1565c:	muleq	r1, ip, r7
   15660:	muleq	r1, ip, r7
   15664:	muleq	r1, ip, r7
   15668:	muleq	r1, ip, r7
   1566c:	muleq	r1, ip, r7
   15670:	muleq	r1, ip, r7
   15674:	muleq	r1, ip, r7
   15678:	muleq	r1, ip, r7
   1567c:	muleq	r1, ip, r7
   15680:	muleq	r1, r0, r6
   15684:	andeq	r5, r1, ip, lsr #15
   15688:	muleq	r1, r0, r6
   1568c:	andeq	r5, r1, r4, lsr #15
   15690:	ldr	r3, [sp, #24]
   15694:	mov	r6, #0
   15698:	cmn	r3, #1
   1569c:	bne	15048 <__assert_fail@plt+0x3b50>
   156a0:	ldr	r3, [sp, #44]	; 0x2c
   156a4:	ldrb	r3, [r3, #1]
   156a8:	adds	r3, r3, #0
   156ac:	movne	r3, #1
   156b0:	b	15050 <__assert_fail@plt+0x3b58>
   156b4:	ldr	r3, [sp, #176]	; 0xb0
   156b8:	mov	r6, #0
   156bc:	cmp	r3, #2
   156c0:	bne	15190 <__assert_fail@plt+0x3c98>
   156c4:	ldr	r3, [sp, #64]	; 0x40
   156c8:	cmp	r3, #0
   156cc:	bne	15f04 <__assert_fail@plt+0x4a0c>
   156d0:	add	sl, sl, #1
   156d4:	ldr	r6, [sp, #36]	; 0x24
   156d8:	str	r3, [sp, #32]
   156dc:	mov	r4, #92	; 0x5c
   156e0:	b	1509c <__assert_fail@plt+0x3ba4>
   156e4:	ldr	r3, [sp, #176]	; 0xb0
   156e8:	mov	r6, #0
   156ec:	cmp	r3, #2
   156f0:	bne	151c4 <__assert_fail@plt+0x3ccc>
   156f4:	ldr	r3, [sp, #40]	; 0x28
   156f8:	cmp	r3, #0
   156fc:	bne	159e0 <__assert_fail@plt+0x44e8>
   15700:	mov	r1, r7
   15704:	str	r3, [sp, #32]
   15708:	mov	r4, #63	; 0x3f
   1570c:	b	15068 <__assert_fail@plt+0x3b70>
   15710:	ldr	r3, [sp, #176]	; 0xb0
   15714:	mov	r6, #0
   15718:	cmp	r3, #2
   1571c:	bne	15214 <__assert_fail@plt+0x3d1c>
   15720:	ldr	r3, [sp, #64]	; 0x40
   15724:	cmp	r3, #0
   15728:	bne	15f04 <__assert_fail@plt+0x4a0c>
   1572c:	ldr	r2, [sp, #84]	; 0x54
   15730:	adds	r3, fp, #0
   15734:	movne	r3, #1
   15738:	cmp	r2, #0
   1573c:	movne	r3, #0
   15740:	cmp	r3, #0
   15744:	strne	fp, [sp, #84]	; 0x54
   15748:	movne	fp, #0
   1574c:	bne	1577c <__assert_fail@plt+0x4284>
   15750:	cmp	fp, r8
   15754:	movhi	r3, #39	; 0x27
   15758:	strbhi	r3, [r9, r8]
   1575c:	add	r3, r8, #1
   15760:	cmp	fp, r3
   15764:	movhi	r2, #92	; 0x5c
   15768:	strbhi	r2, [r9, r3]
   1576c:	add	r3, r8, #2
   15770:	cmp	fp, r3
   15774:	movhi	r2, #39	; 0x27
   15778:	strbhi	r2, [r9, r3]
   1577c:	ldr	r3, [sp, #64]	; 0x40
   15780:	add	r8, r8, #3
   15784:	mov	r1, r7
   15788:	str	r7, [sp, #32]
   1578c:	str	r7, [sp, #76]	; 0x4c
   15790:	str	r3, [sp, #36]	; 0x24
   15794:	mov	r4, #39	; 0x27
   15798:	b	15068 <__assert_fail@plt+0x3b70>
   1579c:	mov	r6, #0
   157a0:	b	1522c <__assert_fail@plt+0x3d34>
   157a4:	mov	r6, #0
   157a8:	b	15420 <__assert_fail@plt+0x3f28>
   157ac:	mov	r6, #0
   157b0:	b	15440 <__assert_fail@plt+0x3f48>
   157b4:	str	r7, [sp, #32]
   157b8:	mov	r6, #0
   157bc:	b	15448 <__assert_fail@plt+0x3f50>
   157c0:	mov	r6, #0
   157c4:	b	15470 <__assert_fail@plt+0x3f78>
   157c8:	mov	r6, #0
   157cc:	b	1523c <__assert_fail@plt+0x3d44>
   157d0:	mov	r6, #0
   157d4:	b	15304 <__assert_fail@plt+0x3e0c>
   157d8:	mov	r6, #0
   157dc:	b	152d4 <__assert_fail@plt+0x3ddc>
   157e0:	mov	r6, #0
   157e4:	mov	r3, #116	; 0x74
   157e8:	b	152dc <__assert_fail@plt+0x3de4>
   157ec:	mov	r6, #0
   157f0:	b	15318 <__assert_fail@plt+0x3e20>
   157f4:	mov	r6, #0
   157f8:	b	1532c <__assert_fail@plt+0x3e34>
   157fc:	ldr	r3, [sp, #56]	; 0x38
   15800:	mov	r6, #0
   15804:	cmp	r3, #0
   15808:	bne	1534c <__assert_fail@plt+0x3e54>
   1580c:	ldr	r3, [sp, #96]	; 0x60
   15810:	cmp	r3, #0
   15814:	addne	sl, sl, #1
   15818:	bne	14bc0 <__assert_fail@plt+0x36c8>
   1581c:	ldr	r1, [sp, #52]	; 0x34
   15820:	str	r3, [sp, #32]
   15824:	mov	r4, r3
   15828:	b	15068 <__assert_fail@plt+0x3b70>
   1582c:	mov	r6, #0
   15830:	ldr	r3, [sp, #80]	; 0x50
   15834:	cmp	r3, #1
   15838:	bne	15a28 <__assert_fail@plt+0x4530>
   1583c:	bl	113a8 <__ctype_b_loc@plt>
   15840:	ldr	r2, [sp, #80]	; 0x50
   15844:	sxth	r3, r4
   15848:	mov	r1, r2
   1584c:	lsl	r3, r3, #1
   15850:	ldr	r2, [r0]
   15854:	ldrh	r3, [r2, r3]
   15858:	and	r3, r3, #16384	; 0x4000
   1585c:	cmp	r3, #0
   15860:	movne	r3, #1
   15864:	moveq	r3, #0
   15868:	str	r3, [sp, #32]
   1586c:	moveq	r3, #1
   15870:	movne	r3, #0
   15874:	ldr	r2, [sp, #56]	; 0x38
   15878:	and	r3, r3, r2
   1587c:	ands	r3, r3, #255	; 0xff
   15880:	beq	15454 <__assert_fail@plt+0x3f5c>
   15884:	add	r1, sl, r1
   15888:	mov	r0, #0
   1588c:	ldr	r7, [sp, #40]	; 0x28
   15890:	ldr	r2, [sp, #36]	; 0x24
   15894:	ldr	lr, [sp, #52]	; 0x34
   15898:	b	15948 <__assert_fail@plt+0x4450>
   1589c:	cmp	r7, #0
   158a0:	bne	15c9c <__assert_fail@plt+0x47a4>
   158a4:	eor	r0, r2, #1
   158a8:	ands	r0, lr, r0
   158ac:	beq	158e4 <__assert_fail@plt+0x43ec>
   158b0:	cmp	fp, r8
   158b4:	movhi	r2, #39	; 0x27
   158b8:	strbhi	r2, [r9, r8]
   158bc:	add	r2, r8, #1
   158c0:	cmp	fp, r2
   158c4:	movhi	ip, #36	; 0x24
   158c8:	strbhi	ip, [r9, r2]
   158cc:	add	r2, r8, #2
   158d0:	cmp	fp, r2
   158d4:	movhi	ip, #39	; 0x27
   158d8:	strbhi	ip, [r9, r2]
   158dc:	add	r8, r8, #3
   158e0:	mov	r2, r0
   158e4:	cmp	fp, r8
   158e8:	movhi	r0, #92	; 0x5c
   158ec:	strbhi	r0, [r9, r8]
   158f0:	add	r0, r8, #1
   158f4:	cmp	fp, r0
   158f8:	lsrhi	ip, r4, #6
   158fc:	addhi	ip, ip, #48	; 0x30
   15900:	strbhi	ip, [r9, r0]
   15904:	add	ip, r8, #2
   15908:	cmp	fp, ip
   1590c:	lsrhi	r0, r4, #3
   15910:	andhi	r0, r0, #7
   15914:	addhi	r0, r0, #48	; 0x30
   15918:	add	sl, sl, #1
   1591c:	strbhi	r0, [r9, ip]
   15920:	and	r4, r4, #7
   15924:	cmp	sl, r1
   15928:	add	r4, r4, #48	; 0x30
   1592c:	add	r8, r8, #3
   15930:	bcs	15cb4 <__assert_fail@plt+0x47bc>
   15934:	mov	r0, r3
   15938:	cmp	fp, r8
   1593c:	strbhi	r4, [r9, r8]
   15940:	ldrb	r4, [r5, #1]!
   15944:	add	r8, r8, #1
   15948:	cmp	r3, #0
   1594c:	bne	1589c <__assert_fail@plt+0x43a4>
   15950:	cmp	r6, #0
   15954:	bne	159f8 <__assert_fail@plt+0x4500>
   15958:	eor	r6, r0, #1
   1595c:	and	r6, r6, r2
   15960:	add	sl, sl, #1
   15964:	cmp	r1, sl
   15968:	uxtb	r6, r6
   1596c:	bls	15a20 <__assert_fail@plt+0x4528>
   15970:	cmp	r6, #0
   15974:	beq	15938 <__assert_fail@plt+0x4440>
   15978:	cmp	fp, r8
   1597c:	movhi	r2, #39	; 0x27
   15980:	strbhi	r2, [r9, r8]
   15984:	add	r2, r8, #1
   15988:	cmp	fp, r2
   1598c:	movhi	ip, #39	; 0x27
   15990:	strbhi	ip, [r9, r2]
   15994:	add	r8, r8, #2
   15998:	mov	r6, r3
   1599c:	mov	r2, r3
   159a0:	b	15938 <__assert_fail@plt+0x4440>
   159a4:	ldr	r3, [sp, #184]	; 0xb8
   159a8:	cmp	r3, #0
   159ac:	beq	15084 <__assert_fail@plt+0x3b8c>
   159b0:	lsr	r2, r4, #5
   159b4:	mov	r0, r3
   159b8:	uxtb	r2, r2
   159bc:	and	r3, r4, #31
   159c0:	ldr	r2, [r0, r2, lsl #2]
   159c4:	lsr	r3, r2, r3
   159c8:	tst	r3, #1
   159cc:	beq	15084 <__assert_fail@plt+0x3b8c>
   159d0:	ldr	r3, [sp, #40]	; 0x28
   159d4:	cmp	r3, #0
   159d8:	beq	15270 <__assert_fail@plt+0x3d78>
   159dc:	mov	r3, r1
   159e0:	str	r3, [sp, #64]	; 0x40
   159e4:	mov	sl, r9
   159e8:	ldr	r3, [sp, #56]	; 0x38
   159ec:	mov	r9, fp
   159f0:	ldr	r2, [sp, #64]	; 0x40
   159f4:	b	15be4 <__assert_fail@plt+0x46ec>
   159f8:	cmp	fp, r8
   159fc:	eor	r6, r0, #1
   15a00:	movhi	ip, #92	; 0x5c
   15a04:	and	r6, r6, r2
   15a08:	add	sl, sl, #1
   15a0c:	strbhi	ip, [r9, r8]
   15a10:	cmp	r1, sl
   15a14:	add	r8, r8, #1
   15a18:	uxtb	r6, r6
   15a1c:	bhi	15970 <__assert_fail@plt+0x4478>
   15a20:	str	r2, [sp, #36]	; 0x24
   15a24:	b	1509c <__assert_fail@plt+0x3ba4>
   15a28:	ldr	r3, [sp, #24]
   15a2c:	cmn	r3, #1
   15a30:	mov	r3, #0
   15a34:	str	r3, [sp, #128]	; 0x80
   15a38:	str	r3, [sp, #132]	; 0x84
   15a3c:	beq	15d30 <__assert_fail@plt+0x4838>
   15a40:	mov	r2, r7
   15a44:	mov	r3, #0
   15a48:	str	r7, [sp, #104]	; 0x68
   15a4c:	str	r5, [sp, #116]	; 0x74
   15a50:	mov	r7, r3
   15a54:	mov	r5, r2
   15a58:	str	r4, [sp, #32]
   15a5c:	str	r6, [sp, #108]	; 0x6c
   15a60:	str	r8, [sp, #112]	; 0x70
   15a64:	ldr	r3, [sp, #44]	; 0x2c
   15a68:	add	r6, sl, r7
   15a6c:	add	r4, r3, r6
   15a70:	ldr	r3, [sp, #24]
   15a74:	mov	r1, r4
   15a78:	sub	r2, r3, r6
   15a7c:	add	r0, sp, #124	; 0x7c
   15a80:	add	r3, sp, #128	; 0x80
   15a84:	bl	1449c <__assert_fail@plt+0x2fa4>
   15a88:	subs	r8, r0, #0
   15a8c:	beq	15e14 <__assert_fail@plt+0x491c>
   15a90:	cmn	r8, #1
   15a94:	beq	15dec <__assert_fail@plt+0x48f4>
   15a98:	cmn	r8, #2
   15a9c:	beq	15d84 <__assert_fail@plt+0x488c>
   15aa0:	ldr	r3, [sp, #64]	; 0x40
   15aa4:	cmp	r3, #0
   15aa8:	beq	15b68 <__assert_fail@plt+0x4670>
   15aac:	cmp	r8, #1
   15ab0:	beq	15b68 <__assert_fail@plt+0x4670>
   15ab4:	sub	r3, r8, #1
   15ab8:	add	r6, r3, r6
   15abc:	ldr	r3, [sp, #44]	; 0x2c
   15ac0:	add	r6, r3, r6
   15ac4:	ldrb	r3, [r4, #1]!
   15ac8:	sub	r3, r3, #91	; 0x5b
   15acc:	cmp	r3, #33	; 0x21
   15ad0:	ldrls	pc, [pc, r3, lsl #2]
   15ad4:	b	15b60 <__assert_fail@plt+0x4668>
   15ad8:	andeq	r5, r1, ip, asr #23
   15adc:	andeq	r5, r1, ip, asr #23
   15ae0:	andeq	r5, r1, r0, ror #22
   15ae4:	andeq	r5, r1, ip, asr #23
   15ae8:	andeq	r5, r1, r0, ror #22
   15aec:	andeq	r5, r1, ip, asr #23
   15af0:	andeq	r5, r1, r0, ror #22
   15af4:	andeq	r5, r1, r0, ror #22
   15af8:	andeq	r5, r1, r0, ror #22
   15afc:	andeq	r5, r1, r0, ror #22
   15b00:	andeq	r5, r1, r0, ror #22
   15b04:	andeq	r5, r1, r0, ror #22
   15b08:	andeq	r5, r1, r0, ror #22
   15b0c:	andeq	r5, r1, r0, ror #22
   15b10:	andeq	r5, r1, r0, ror #22
   15b14:	andeq	r5, r1, r0, ror #22
   15b18:	andeq	r5, r1, r0, ror #22
   15b1c:	andeq	r5, r1, r0, ror #22
   15b20:	andeq	r5, r1, r0, ror #22
   15b24:	andeq	r5, r1, r0, ror #22
   15b28:	andeq	r5, r1, r0, ror #22
   15b2c:	andeq	r5, r1, r0, ror #22
   15b30:	andeq	r5, r1, r0, ror #22
   15b34:	andeq	r5, r1, r0, ror #22
   15b38:	andeq	r5, r1, r0, ror #22
   15b3c:	andeq	r5, r1, r0, ror #22
   15b40:	andeq	r5, r1, r0, ror #22
   15b44:	andeq	r5, r1, r0, ror #22
   15b48:	andeq	r5, r1, r0, ror #22
   15b4c:	andeq	r5, r1, r0, ror #22
   15b50:	andeq	r5, r1, r0, ror #22
   15b54:	andeq	r5, r1, r0, ror #22
   15b58:	andeq	r5, r1, r0, ror #22
   15b5c:	andeq	r5, r1, ip, asr #23
   15b60:	cmp	r6, r4
   15b64:	bne	15ac4 <__assert_fail@plt+0x45cc>
   15b68:	ldr	r0, [sp, #124]	; 0x7c
   15b6c:	bl	112dc <iswprint@plt>
   15b70:	add	r7, r7, r8
   15b74:	cmp	r0, #0
   15b78:	add	r0, sp, #128	; 0x80
   15b7c:	moveq	r5, #0
   15b80:	bl	11264 <mbsinit@plt>
   15b84:	cmp	r0, #0
   15b88:	beq	15a64 <__assert_fail@plt+0x456c>
   15b8c:	ldr	r4, [sp, #32]
   15b90:	str	r5, [sp, #32]
   15b94:	ldr	r3, [sp, #32]
   15b98:	mov	r1, r7
   15b9c:	eor	r3, r3, #1
   15ba0:	ldr	r7, [sp, #104]	; 0x68
   15ba4:	ldr	r6, [sp, #108]	; 0x6c
   15ba8:	ldr	r8, [sp, #112]	; 0x70
   15bac:	ldr	r5, [sp, #116]	; 0x74
   15bb0:	uxtb	r3, r3
   15bb4:	cmp	r1, #1
   15bb8:	bls	15874 <__assert_fail@plt+0x437c>
   15bbc:	ldr	r2, [sp, #56]	; 0x38
   15bc0:	and	r3, r3, r2
   15bc4:	uxtb	r3, r3
   15bc8:	b	15884 <__assert_fail@plt+0x438c>
   15bcc:	mov	r3, #2
   15bd0:	str	r3, [sp, #176]	; 0xb0
   15bd4:	ldr	r2, [sp, #64]	; 0x40
   15bd8:	ldr	r3, [sp, #56]	; 0x38
   15bdc:	mov	sl, r9
   15be0:	mov	r9, fp
   15be4:	and	r3, r3, r2
   15be8:	tst	r3, #255	; 0xff
   15bec:	ldr	r3, [sp, #176]	; 0xb0
   15bf0:	movne	r3, #4
   15bf4:	str	r3, [sp, #176]	; 0xb0
   15bf8:	ldr	r3, [sp, #180]	; 0xb4
   15bfc:	mov	ip, #0
   15c00:	bic	r3, r3, #2
   15c04:	str	r3, [sp, #4]
   15c08:	ldr	r3, [sp, #192]	; 0xc0
   15c0c:	ldr	r2, [sp, #44]	; 0x2c
   15c10:	str	r3, [sp, #16]
   15c14:	ldr	r3, [sp, #188]	; 0xbc
   15c18:	mov	r1, r9
   15c1c:	str	r3, [sp, #12]
   15c20:	ldr	r3, [sp, #176]	; 0xb0
   15c24:	mov	r0, sl
   15c28:	str	r3, [sp]
   15c2c:	str	ip, [sp, #8]
   15c30:	ldr	r3, [sp, #24]
   15c34:	bl	14a94 <__assert_fail@plt+0x359c>
   15c38:	mov	fp, r0
   15c3c:	mov	r0, fp
   15c40:	add	sp, sp, #140	; 0x8c
   15c44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c48:	mov	r4, #92	; 0x5c
   15c4c:	mov	r1, #0
   15c50:	mov	r3, r4
   15c54:	b	15248 <__assert_fail@plt+0x3d50>
   15c58:	mov	r3, #0
   15c5c:	ldr	r1, [sp, #52]	; 0x34
   15c60:	str	r3, [sp, #32]
   15c64:	mov	r4, #63	; 0x3f
   15c68:	b	15068 <__assert_fail@plt+0x3b70>
   15c6c:	cmp	fp, #0
   15c70:	beq	15ccc <__assert_fail@plt+0x47d4>
   15c74:	mov	r3, #39	; 0x27
   15c78:	strb	r3, [r9]
   15c7c:	mov	r3, #0
   15c80:	str	r3, [sp, #40]	; 0x28
   15c84:	mov	r3, #1
   15c88:	str	r3, [sp, #68]	; 0x44
   15c8c:	ldr	r3, [pc, #448]	; 15e54 <__assert_fail@plt+0x495c>
   15c90:	mov	r8, #1
   15c94:	str	r3, [sp, #72]	; 0x48
   15c98:	b	14e7c <__assert_fail@plt+0x3984>
   15c9c:	ldr	r3, [sp, #40]	; 0x28
   15ca0:	mov	sl, r9
   15ca4:	str	r3, [sp, #56]	; 0x38
   15ca8:	mov	r9, fp
   15cac:	ldr	r2, [sp, #64]	; 0x40
   15cb0:	b	15be4 <__assert_fail@plt+0x46ec>
   15cb4:	str	r2, [sp, #36]	; 0x24
   15cb8:	b	150cc <__assert_fail@plt+0x3bd4>
   15cbc:	mov	r1, #0
   15cc0:	str	r3, [sp, #32]
   15cc4:	mov	r4, #63	; 0x3f
   15cc8:	b	15068 <__assert_fail@plt+0x3b70>
   15ccc:	ldr	r3, [pc, #384]	; 15e54 <__assert_fail@plt+0x495c>
   15cd0:	str	r3, [sp, #72]	; 0x48
   15cd4:	mov	r3, #0
   15cd8:	str	r3, [sp, #40]	; 0x28
   15cdc:	mov	r3, #1
   15ce0:	str	r3, [sp, #68]	; 0x44
   15ce4:	mov	r8, r3
   15ce8:	b	14e7c <__assert_fail@plt+0x3984>
   15cec:	bl	114ec <abort@plt>
   15cf0:	cmp	fp, #0
   15cf4:	beq	15d54 <__assert_fail@plt+0x485c>
   15cf8:	mov	r2, #1
   15cfc:	mov	r3, #34	; 0x22
   15d00:	strb	r3, [r9]
   15d04:	mov	r8, r2
   15d08:	mov	r3, r2
   15d0c:	str	r2, [sp, #68]	; 0x44
   15d10:	str	r3, [sp, #56]	; 0x38
   15d14:	ldr	r3, [pc, #316]	; 15e58 <__assert_fail@plt+0x4960>
   15d18:	ldr	r1, [sp, #56]	; 0x38
   15d1c:	str	r3, [sp, #72]	; 0x48
   15d20:	ldr	r2, [sp, #176]	; 0xb0
   15d24:	ldr	ip, [sp, #40]	; 0x28
   15d28:	ldr	lr, [sp, #176]	; 0xb0
   15d2c:	b	14b60 <__assert_fail@plt+0x3668>
   15d30:	ldr	r0, [sp, #44]	; 0x2c
   15d34:	bl	113c0 <strlen@plt>
   15d38:	str	r0, [sp, #24]
   15d3c:	b	15a40 <__assert_fail@plt+0x4548>
   15d40:	mov	r7, #0
   15d44:	ldr	r1, [sp, #52]	; 0x34
   15d48:	str	r3, [sp, #32]
   15d4c:	mov	r4, #48	; 0x30
   15d50:	b	15068 <__assert_fail@plt+0x3b70>
   15d54:	mov	r3, #1
   15d58:	str	r3, [sp, #68]	; 0x44
   15d5c:	mov	r8, r3
   15d60:	b	15d10 <__assert_fail@plt+0x4818>
   15d64:	mov	r3, #2
   15d68:	mov	sl, r9
   15d6c:	str	r3, [sp, #176]	; 0xb0
   15d70:	mov	r9, fp
   15d74:	ldr	r3, [sp, #56]	; 0x38
   15d78:	b	15be4 <__assert_fail@plt+0x46ec>
   15d7c:	ldr	r6, [sp, #48]	; 0x30
   15d80:	b	15830 <__assert_fail@plt+0x4338>
   15d84:	ldr	r0, [sp, #24]
   15d88:	mov	ip, r6
   15d8c:	cmp	r0, ip
   15d90:	mov	r1, r7
   15d94:	mov	r2, r4
   15d98:	ldr	r7, [sp, #104]	; 0x68
   15d9c:	ldr	r4, [sp, #32]
   15da0:	ldr	r6, [sp, #108]	; 0x6c
   15da4:	ldr	r8, [sp, #112]	; 0x70
   15da8:	ldr	r5, [sp, #116]	; 0x74
   15dac:	bls	15ddc <__assert_fail@plt+0x48e4>
   15db0:	ldrb	r3, [r2]
   15db4:	cmp	r3, #0
   15db8:	bne	15dcc <__assert_fail@plt+0x48d4>
   15dbc:	b	15eec <__assert_fail@plt+0x49f4>
   15dc0:	ldrb	r3, [r2, #1]!
   15dc4:	cmp	r3, #0
   15dc8:	beq	15eec <__assert_fail@plt+0x49f4>
   15dcc:	add	r1, r1, #1
   15dd0:	add	r3, sl, r1
   15dd4:	cmp	r0, r3
   15dd8:	bhi	15dc0 <__assert_fail@plt+0x48c8>
   15ddc:	mov	r2, #0
   15de0:	mov	r3, r7
   15de4:	str	r2, [sp, #32]
   15de8:	b	15bb4 <__assert_fail@plt+0x46bc>
   15dec:	mov	r1, r7
   15df0:	ldr	r7, [sp, #104]	; 0x68
   15df4:	mov	r2, #0
   15df8:	ldr	r4, [sp, #32]
   15dfc:	ldr	r6, [sp, #108]	; 0x6c
   15e00:	ldr	r8, [sp, #112]	; 0x70
   15e04:	ldr	r5, [sp, #116]	; 0x74
   15e08:	mov	r3, r7
   15e0c:	str	r2, [sp, #32]
   15e10:	b	15bb4 <__assert_fail@plt+0x46bc>
   15e14:	mov	r3, r5
   15e18:	eor	r3, r3, #1
   15e1c:	ldr	r4, [sp, #32]
   15e20:	mov	r1, r7
   15e24:	str	r5, [sp, #32]
   15e28:	ldr	r7, [sp, #104]	; 0x68
   15e2c:	ldr	r6, [sp, #108]	; 0x6c
   15e30:	ldr	r8, [sp, #112]	; 0x70
   15e34:	ldr	r5, [sp, #116]	; 0x74
   15e38:	uxtb	r3, r3
   15e3c:	b	15bb4 <__assert_fail@plt+0x46bc>
   15e40:	mov	sl, r9
   15e44:	str	r3, [sp, #56]	; 0x38
   15e48:	mov	r9, fp
   15e4c:	ldr	r2, [sp, #64]	; 0x40
   15e50:	b	15be4 <__assert_fail@plt+0x46ec>
   15e54:	andeq	fp, r2, ip, ror #28
   15e58:	andeq	fp, r2, r8, ror #28
   15e5c:	andeq	fp, r2, r0, ror lr
   15e60:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   15e64:	ldr	r2, [sp, #44]	; 0x2c
   15e68:	ldrb	r1, [r2, r3]
   15e6c:	sub	r2, r1, #33	; 0x21
   15e70:	uxtb	r2, r2
   15e74:	cmp	r2, #29
   15e78:	bhi	15ef8 <__assert_fail@plt+0x4a00>
   15e7c:	ldr	r0, [pc, #-36]	; 15e60 <__assert_fail@plt+0x4968>
   15e80:	mov	ip, #1
   15e84:	ands	r2, r0, ip, lsl r2
   15e88:	beq	15f18 <__assert_fail@plt+0x4a20>
   15e8c:	ldr	r2, [sp, #40]	; 0x28
   15e90:	cmp	r2, #0
   15e94:	bne	1600c <__assert_fail@plt+0x4b14>
   15e98:	add	r2, r8, #1
   15e9c:	cmp	fp, r8
   15ea0:	strbhi	r4, [r9, r8]
   15ea4:	cmp	fp, r2
   15ea8:	movhi	r0, #34	; 0x22
   15eac:	strbhi	r0, [r9, r2]
   15eb0:	add	r2, r8, #2
   15eb4:	cmp	fp, r2
   15eb8:	movhi	r0, #34	; 0x22
   15ebc:	strbhi	r0, [r9, r2]
   15ec0:	add	r2, r8, #3
   15ec4:	cmp	fp, r2
   15ec8:	mov	sl, r3
   15ecc:	ldr	r3, [sp, #40]	; 0x28
   15ed0:	movhi	r0, #63	; 0x3f
   15ed4:	mov	r4, r1
   15ed8:	strbhi	r0, [r9, r2]
   15edc:	add	r8, r8, #4
   15ee0:	mov	r1, r3
   15ee4:	str	r3, [sp, #32]
   15ee8:	b	15068 <__assert_fail@plt+0x3b70>
   15eec:	str	r3, [sp, #32]
   15ef0:	mov	r3, r7
   15ef4:	b	15bb4 <__assert_fail@plt+0x46bc>
   15ef8:	mov	r1, #0
   15efc:	str	r1, [sp, #32]
   15f00:	b	15068 <__assert_fail@plt+0x3b70>
   15f04:	mov	sl, r9
   15f08:	ldr	r3, [sp, #56]	; 0x38
   15f0c:	mov	r9, fp
   15f10:	ldr	r2, [sp, #64]	; 0x40
   15f14:	b	15be4 <__assert_fail@plt+0x46ec>
   15f18:	str	r2, [sp, #32]
   15f1c:	mov	r1, #0
   15f20:	b	15068 <__assert_fail@plt+0x3b70>
   15f24:	ldr	r2, [sp, #76]	; 0x4c
   15f28:	mov	sl, r9
   15f2c:	mov	r9, fp
   15f30:	mov	fp, r8
   15f34:	ldr	r1, [sp, #72]	; 0x48
   15f38:	cmp	r1, #0
   15f3c:	moveq	r3, #0
   15f40:	andne	r3, r2, #1
   15f44:	cmp	r3, #0
   15f48:	beq	15f74 <__assert_fail@plt+0x4a7c>
   15f4c:	ldrb	r3, [r1]
   15f50:	cmp	r3, #0
   15f54:	beq	15f74 <__assert_fail@plt+0x4a7c>
   15f58:	mov	r2, r1
   15f5c:	cmp	r9, fp
   15f60:	strbhi	r3, [sl, fp]
   15f64:	ldrb	r3, [r2, #1]!
   15f68:	add	fp, fp, #1
   15f6c:	cmp	r3, #0
   15f70:	bne	15f5c <__assert_fail@plt+0x4a64>
   15f74:	cmp	r9, fp
   15f78:	movhi	r3, #0
   15f7c:	strbhi	r3, [sl, fp]
   15f80:	b	15c3c <__assert_fail@plt+0x4744>
   15f84:	ldr	r3, [sp, #192]	; 0xc0
   15f88:	mov	ip, #5
   15f8c:	str	r3, [sp, #16]
   15f90:	ldr	r3, [sp, #188]	; 0xbc
   15f94:	ldr	r2, [sp, #44]	; 0x2c
   15f98:	str	r3, [sp, #12]
   15f9c:	ldr	r3, [sp, #184]	; 0xb8
   15fa0:	ldr	r1, [sp, #84]	; 0x54
   15fa4:	str	r3, [sp, #8]
   15fa8:	ldr	r3, [sp, #180]	; 0xb4
   15fac:	mov	r0, r9
   15fb0:	str	r3, [sp, #4]
   15fb4:	str	ip, [sp]
   15fb8:	ldr	r3, [sp, #24]
   15fbc:	bl	14a94 <__assert_fail@plt+0x359c>
   15fc0:	mov	fp, r0
   15fc4:	b	15c3c <__assert_fail@plt+0x4744>
   15fc8:	mov	sl, r9
   15fcc:	mov	r9, fp
   15fd0:	mov	fp, r8
   15fd4:	b	15f34 <__assert_fail@plt+0x4a3c>
   15fd8:	ldr	r1, [sp, #176]	; 0xb0
   15fdc:	bl	14974 <__assert_fail@plt+0x347c>
   15fe0:	str	r0, [sp, #192]	; 0xc0
   15fe4:	b	14f50 <__assert_fail@plt+0x3a58>
   15fe8:	ldr	r1, [sp, #176]	; 0xb0
   15fec:	bl	14974 <__assert_fail@plt+0x347c>
   15ff0:	str	r0, [sp, #188]	; 0xbc
   15ff4:	b	14f30 <__assert_fail@plt+0x3a38>
   15ff8:	mov	sl, r9
   15ffc:	mov	r2, r3
   16000:	mov	r9, fp
   16004:	mov	fp, r8
   16008:	b	15f34 <__assert_fail@plt+0x4a3c>
   1600c:	mov	sl, r9
   16010:	mov	r9, fp
   16014:	b	15bf8 <__assert_fail@plt+0x4700>
   16018:	push	{r4, r5, r6, lr}
   1601c:	mov	r5, r0
   16020:	bl	113f0 <__errno_location@plt>
   16024:	cmp	r5, #0
   16028:	mov	r1, #48	; 0x30
   1602c:	mov	r4, r0
   16030:	ldr	r0, [pc, #16]	; 16048 <__assert_fail@plt+0x4b50>
   16034:	ldr	r6, [r4]
   16038:	movne	r0, r5
   1603c:	bl	2a62c <__assert_fail@plt+0x19134>
   16040:	str	r6, [r4]
   16044:	pop	{r4, r5, r6, pc}
   16048:	andeq	sp, r3, r0, asr #3
   1604c:	ldr	r3, [pc, #12]	; 16060 <__assert_fail@plt+0x4b68>
   16050:	cmp	r0, #0
   16054:	moveq	r0, r3
   16058:	ldr	r0, [r0]
   1605c:	bx	lr
   16060:	andeq	sp, r3, r0, asr #3
   16064:	ldr	r3, [pc, #12]	; 16078 <__assert_fail@plt+0x4b80>
   16068:	cmp	r0, #0
   1606c:	moveq	r0, r3
   16070:	str	r1, [r0]
   16074:	bx	lr
   16078:	andeq	sp, r3, r0, asr #3
   1607c:	ldr	r3, [pc, #52]	; 160b8 <__assert_fail@plt+0x4bc0>
   16080:	cmp	r0, #0
   16084:	moveq	r0, r3
   16088:	add	r3, r0, #8
   1608c:	push	{lr}		; (str lr, [sp, #-4]!)
   16090:	lsr	lr, r1, #5
   16094:	and	r1, r1, #31
   16098:	ldr	ip, [r3, lr, lsl #2]
   1609c:	lsr	r0, ip, r1
   160a0:	eor	r2, r2, r0
   160a4:	and	r2, r2, #1
   160a8:	and	r0, r0, #1
   160ac:	eor	r1, ip, r2, lsl r1
   160b0:	str	r1, [r3, lr, lsl #2]
   160b4:	pop	{pc}		; (ldr pc, [sp], #4)
   160b8:	andeq	sp, r3, r0, asr #3
   160bc:	ldr	r3, [pc, #16]	; 160d4 <__assert_fail@plt+0x4bdc>
   160c0:	cmp	r0, #0
   160c4:	movne	r3, r0
   160c8:	ldr	r0, [r3, #4]
   160cc:	str	r1, [r3, #4]
   160d0:	bx	lr
   160d4:	andeq	sp, r3, r0, asr #3
   160d8:	ldr	r3, [pc, #44]	; 1610c <__assert_fail@plt+0x4c14>
   160dc:	cmp	r0, #0
   160e0:	moveq	r0, r3
   160e4:	mov	ip, #10
   160e8:	cmp	r2, #0
   160ec:	cmpne	r1, #0
   160f0:	str	ip, [r0]
   160f4:	beq	16104 <__assert_fail@plt+0x4c0c>
   160f8:	str	r1, [r0, #40]	; 0x28
   160fc:	str	r2, [r0, #44]	; 0x2c
   16100:	bx	lr
   16104:	push	{r4, lr}
   16108:	bl	114ec <abort@plt>
   1610c:	andeq	sp, r3, r0, asr #3
   16110:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16114:	sub	sp, sp, #24
   16118:	ldr	ip, [pc, #108]	; 1618c <__assert_fail@plt+0x4c94>
   1611c:	ldr	r4, [sp, #56]	; 0x38
   16120:	mov	r9, r2
   16124:	cmp	r4, #0
   16128:	moveq	r4, ip
   1612c:	mov	sl, r3
   16130:	mov	r7, r0
   16134:	mov	r8, r1
   16138:	bl	113f0 <__errno_location@plt>
   1613c:	ldr	r3, [r4, #44]	; 0x2c
   16140:	mov	r1, r8
   16144:	ldr	r6, [r0]
   16148:	str	r3, [sp, #16]
   1614c:	ldr	r2, [r4, #40]	; 0x28
   16150:	add	r3, r4, #8
   16154:	str	r3, [sp, #8]
   16158:	str	r2, [sp, #12]
   1615c:	ldr	r2, [r4, #4]
   16160:	mov	r5, r0
   16164:	str	r2, [sp, #4]
   16168:	ldr	ip, [r4]
   1616c:	mov	r3, sl
   16170:	mov	r2, r9
   16174:	mov	r0, r7
   16178:	str	ip, [sp]
   1617c:	bl	14a94 <__assert_fail@plt+0x359c>
   16180:	str	r6, [r5]
   16184:	add	sp, sp, #24
   16188:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1618c:	andeq	sp, r3, r0, asr #3
   16190:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16194:	cmp	r2, #0
   16198:	sub	sp, sp, #36	; 0x24
   1619c:	ldr	r4, [pc, #164]	; 16248 <__assert_fail@plt+0x4d50>
   161a0:	mov	r8, r1
   161a4:	movne	r4, r2
   161a8:	mov	r7, r0
   161ac:	bl	113f0 <__errno_location@plt>
   161b0:	ldr	r3, [r4, #44]	; 0x2c
   161b4:	ldr	r5, [r4, #4]
   161b8:	add	r9, r4, #8
   161bc:	orr	r5, r5, #1
   161c0:	mov	r1, #0
   161c4:	mov	r2, r7
   161c8:	ldr	fp, [r0]
   161cc:	str	r3, [sp, #16]
   161d0:	ldr	r3, [r4, #40]	; 0x28
   161d4:	stmib	sp, {r5, r9}
   161d8:	str	r3, [sp, #12]
   161dc:	ldr	r3, [r4]
   161e0:	mov	r6, r0
   161e4:	str	r3, [sp]
   161e8:	mov	r0, r1
   161ec:	mov	r3, r8
   161f0:	bl	14a94 <__assert_fail@plt+0x359c>
   161f4:	add	r1, r0, #1
   161f8:	mov	r0, r1
   161fc:	str	r1, [sp, #28]
   16200:	bl	2a0e8 <__assert_fail@plt+0x18bf0>
   16204:	ldr	r3, [r4, #44]	; 0x2c
   16208:	ldr	r1, [sp, #28]
   1620c:	str	r3, [sp, #16]
   16210:	ldr	r3, [r4, #40]	; 0x28
   16214:	str	r5, [sp, #4]
   16218:	str	r3, [sp, #12]
   1621c:	str	r9, [sp, #8]
   16220:	ldr	ip, [r4]
   16224:	mov	r3, r8
   16228:	mov	r2, r7
   1622c:	str	ip, [sp]
   16230:	mov	sl, r0
   16234:	bl	14a94 <__assert_fail@plt+0x359c>
   16238:	mov	r0, sl
   1623c:	str	fp, [r6]
   16240:	add	sp, sp, #36	; 0x24
   16244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16248:	andeq	sp, r3, r0, asr #3
   1624c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16250:	cmp	r3, #0
   16254:	sub	sp, sp, #44	; 0x2c
   16258:	ldr	r4, [pc, #192]	; 16320 <__assert_fail@plt+0x4e28>
   1625c:	mov	r6, r2
   16260:	movne	r4, r3
   16264:	mov	r9, r1
   16268:	mov	r8, r0
   1626c:	bl	113f0 <__errno_location@plt>
   16270:	ldr	r3, [r4, #44]	; 0x2c
   16274:	ldr	r5, [r4, #4]
   16278:	add	sl, r4, #8
   1627c:	cmp	r6, #0
   16280:	orreq	r5, r5, #1
   16284:	mov	r1, #0
   16288:	ldr	r2, [r0]
   1628c:	str	r3, [sp, #16]
   16290:	ldr	r3, [r4, #40]	; 0x28
   16294:	stmib	sp, {r5, sl}
   16298:	str	r3, [sp, #12]
   1629c:	ldr	r3, [r4]
   162a0:	mov	r7, r0
   162a4:	str	r2, [sp, #28]
   162a8:	str	r3, [sp]
   162ac:	mov	r2, r8
   162b0:	mov	r3, r9
   162b4:	mov	r0, r1
   162b8:	bl	14a94 <__assert_fail@plt+0x359c>
   162bc:	add	r1, r0, #1
   162c0:	mov	fp, r0
   162c4:	mov	r0, r1
   162c8:	str	r1, [sp, #36]	; 0x24
   162cc:	bl	2a0e8 <__assert_fail@plt+0x18bf0>
   162d0:	ldr	r3, [r4, #44]	; 0x2c
   162d4:	mov	r2, r8
   162d8:	str	r3, [sp, #16]
   162dc:	ldr	r3, [r4, #40]	; 0x28
   162e0:	str	r5, [sp, #4]
   162e4:	str	r3, [sp, #12]
   162e8:	str	sl, [sp, #8]
   162ec:	ldr	ip, [r4]
   162f0:	ldr	r1, [sp, #36]	; 0x24
   162f4:	mov	r3, r9
   162f8:	str	ip, [sp]
   162fc:	str	r0, [sp, #32]
   16300:	bl	14a94 <__assert_fail@plt+0x359c>
   16304:	ldr	r2, [sp, #28]
   16308:	cmp	r6, #0
   1630c:	str	r2, [r7]
   16310:	ldr	r0, [sp, #32]
   16314:	strne	fp, [r6]
   16318:	add	sp, sp, #44	; 0x2c
   1631c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16320:	andeq	sp, r3, r0, asr #3
   16324:	push	{r4, r5, r6, r7, r8, lr}
   16328:	ldr	r6, [pc, #116]	; 163a4 <__assert_fail@plt+0x4eac>
   1632c:	ldr	r3, [r6, #4]
   16330:	ldr	r7, [r6]
   16334:	cmp	r3, #1
   16338:	movgt	r5, r7
   1633c:	movgt	r4, #1
   16340:	ble	16360 <__assert_fail@plt+0x4e68>
   16344:	ldr	r0, [r5, #12]
   16348:	bl	14214 <__assert_fail@plt+0x2d1c>
   1634c:	ldr	r3, [r6, #4]
   16350:	add	r4, r4, #1
   16354:	cmp	r3, r4
   16358:	add	r5, r5, #8
   1635c:	bgt	16344 <__assert_fail@plt+0x4e4c>
   16360:	ldr	r0, [r7, #4]
   16364:	ldr	r4, [pc, #60]	; 163a8 <__assert_fail@plt+0x4eb0>
   16368:	cmp	r0, r4
   1636c:	beq	16380 <__assert_fail@plt+0x4e88>
   16370:	bl	14214 <__assert_fail@plt+0x2d1c>
   16374:	mov	r3, #256	; 0x100
   16378:	str	r4, [r6, #12]
   1637c:	str	r3, [r6, #8]
   16380:	ldr	r4, [pc, #36]	; 163ac <__assert_fail@plt+0x4eb4>
   16384:	cmp	r7, r4
   16388:	beq	16398 <__assert_fail@plt+0x4ea0>
   1638c:	mov	r0, r7
   16390:	bl	14214 <__assert_fail@plt+0x2d1c>
   16394:	str	r4, [r6]
   16398:	mov	r3, #1
   1639c:	str	r3, [r6, #4]
   163a0:	pop	{r4, r5, r6, r7, r8, pc}
   163a4:	andeq	sp, r3, r0, asr r1
   163a8:	strdeq	sp, [r3], -r0
   163ac:	andeq	sp, r3, r8, asr r1
   163b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163b4:	sub	sp, sp, #44	; 0x2c
   163b8:	mov	r5, r0
   163bc:	mov	sl, r1
   163c0:	bl	113f0 <__errno_location@plt>
   163c4:	ldr	r4, [pc, #400]	; 1655c <__assert_fail@plt+0x5064>
   163c8:	cmn	r5, #-2147483647	; 0x80000001
   163cc:	ldr	r6, [r4]
   163d0:	mov	r8, r0
   163d4:	movne	r0, #0
   163d8:	moveq	r0, #1
   163dc:	ldr	r3, [r8]
   163e0:	orrs	r0, r0, r5, lsr #31
   163e4:	str	r3, [sp, #24]
   163e8:	bne	16558 <__assert_fail@plt+0x5060>
   163ec:	ldr	r2, [r4, #4]
   163f0:	cmp	r5, r2
   163f4:	blt	16454 <__assert_fail@plt+0x4f5c>
   163f8:	add	r7, r4, #8
   163fc:	cmp	r6, r7
   16400:	str	r2, [sp, #36]	; 0x24
   16404:	beq	16528 <__assert_fail@plt+0x5030>
   16408:	mov	r3, #8
   1640c:	sub	r2, r5, r2
   16410:	mov	r0, r6
   16414:	str	r3, [sp]
   16418:	add	r2, r2, #1
   1641c:	mvn	r3, #-2147483648	; 0x80000000
   16420:	add	r1, sp, #36	; 0x24
   16424:	bl	2a304 <__assert_fail@plt+0x18e0c>
   16428:	mov	r6, r0
   1642c:	str	r0, [r4]
   16430:	ldr	r0, [r4, #4]
   16434:	ldr	r2, [sp, #36]	; 0x24
   16438:	mov	r1, #0
   1643c:	sub	r2, r2, r0
   16440:	add	r0, r6, r0, lsl #3
   16444:	lsl	r2, r2, #3
   16448:	bl	11414 <memset@plt>
   1644c:	ldr	r3, [sp, #36]	; 0x24
   16450:	str	r3, [r4, #4]
   16454:	ldr	r4, [pc, #260]	; 16560 <__assert_fail@plt+0x5068>
   16458:	add	fp, r6, r5, lsl #3
   1645c:	ldr	r9, [r6, r5, lsl #3]
   16460:	ldr	r0, [r4, #4]
   16464:	ldr	r3, [r4]
   16468:	ldr	r7, [fp, #4]
   1646c:	ldr	r1, [r4, #44]	; 0x2c
   16470:	ldr	r2, [r4, #40]	; 0x28
   16474:	orr	r0, r0, #1
   16478:	str	r3, [sp]
   1647c:	add	r3, r4, #8
   16480:	str	r0, [sp, #28]
   16484:	str	r0, [sp, #4]
   16488:	str	r1, [sp, #16]
   1648c:	str	r2, [sp, #12]
   16490:	str	r3, [sp, #8]
   16494:	mov	r0, r7
   16498:	mov	r1, r9
   1649c:	mvn	r3, #0
   164a0:	mov	r2, sl
   164a4:	bl	14a94 <__assert_fail@plt+0x359c>
   164a8:	cmp	r9, r0
   164ac:	bhi	16514 <__assert_fail@plt+0x501c>
   164b0:	add	r3, r4, #48	; 0x30
   164b4:	add	r9, r0, #1
   164b8:	cmp	r7, r3
   164bc:	str	r9, [r6, r5, lsl #3]
   164c0:	beq	164cc <__assert_fail@plt+0x4fd4>
   164c4:	mov	r0, r7
   164c8:	bl	14214 <__assert_fail@plt+0x2d1c>
   164cc:	mov	r0, r9
   164d0:	bl	2a0e8 <__assert_fail@plt+0x18bf0>
   164d4:	ldr	ip, [r4, #44]	; 0x2c
   164d8:	ldr	r3, [r4]
   164dc:	ldr	lr, [r4, #40]	; 0x28
   164e0:	ldr	r4, [pc, #124]	; 16564 <__assert_fail@plt+0x506c>
   164e4:	mov	r2, sl
   164e8:	mov	r1, r9
   164ec:	str	r0, [fp, #4]
   164f0:	str	r4, [sp, #8]
   164f4:	ldr	r4, [sp, #28]
   164f8:	str	r3, [sp]
   164fc:	str	r4, [sp, #4]
   16500:	str	ip, [sp, #16]
   16504:	str	lr, [sp, #12]
   16508:	mvn	r3, #0
   1650c:	mov	r7, r0
   16510:	bl	14a94 <__assert_fail@plt+0x359c>
   16514:	ldr	r3, [sp, #24]
   16518:	mov	r0, r7
   1651c:	str	r3, [r8]
   16520:	add	sp, sp, #44	; 0x2c
   16524:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16528:	mov	r3, #8
   1652c:	sub	r2, r5, r2
   16530:	str	r3, [sp]
   16534:	add	r1, sp, #36	; 0x24
   16538:	add	r2, r2, #1
   1653c:	mvn	r3, #-2147483648	; 0x80000000
   16540:	bl	2a304 <__assert_fail@plt+0x18e0c>
   16544:	mov	r6, r0
   16548:	ldm	r7, {r0, r1}
   1654c:	str	r6, [r4]
   16550:	stm	r6, {r0, r1}
   16554:	b	16430 <__assert_fail@plt+0x4f38>
   16558:	bl	114ec <abort@plt>
   1655c:	andeq	sp, r3, r0, asr r1
   16560:	andeq	sp, r3, r0, asr #3
   16564:	andeq	sp, r3, r8, asr #3
   16568:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1656c:	sub	sp, sp, #52	; 0x34
   16570:	mov	r5, r0
   16574:	mov	sl, r1
   16578:	mov	fp, r2
   1657c:	bl	113f0 <__errno_location@plt>
   16580:	ldr	r4, [pc, #408]	; 16720 <__assert_fail@plt+0x5228>
   16584:	cmn	r5, #-2147483647	; 0x80000001
   16588:	ldr	r6, [r4]
   1658c:	mov	r8, r0
   16590:	movne	r0, #0
   16594:	moveq	r0, #1
   16598:	ldr	r3, [r8]
   1659c:	orrs	r0, r0, r5, lsr #31
   165a0:	str	r3, [sp, #28]
   165a4:	bne	1671c <__assert_fail@plt+0x5224>
   165a8:	ldr	r2, [r4, #4]
   165ac:	cmp	r5, r2
   165b0:	blt	16610 <__assert_fail@plt+0x5118>
   165b4:	add	r7, r4, #8
   165b8:	cmp	r6, r7
   165bc:	str	r2, [sp, #44]	; 0x2c
   165c0:	beq	166ec <__assert_fail@plt+0x51f4>
   165c4:	mov	r3, #8
   165c8:	sub	r2, r5, r2
   165cc:	mov	r0, r6
   165d0:	str	r3, [sp]
   165d4:	add	r2, r2, #1
   165d8:	mvn	r3, #-2147483648	; 0x80000000
   165dc:	add	r1, sp, #44	; 0x2c
   165e0:	bl	2a304 <__assert_fail@plt+0x18e0c>
   165e4:	mov	r6, r0
   165e8:	str	r0, [r4]
   165ec:	ldr	r0, [r4, #4]
   165f0:	ldr	r2, [sp, #44]	; 0x2c
   165f4:	mov	r1, #0
   165f8:	sub	r2, r2, r0
   165fc:	add	r0, r6, r0, lsl #3
   16600:	lsl	r2, r2, #3
   16604:	bl	11414 <memset@plt>
   16608:	ldr	r3, [sp, #44]	; 0x2c
   1660c:	str	r3, [r4, #4]
   16610:	ldr	r4, [pc, #268]	; 16724 <__assert_fail@plt+0x522c>
   16614:	add	r3, r6, r5, lsl #3
   16618:	str	r3, [sp, #32]
   1661c:	ldr	r7, [r3, #4]
   16620:	ldr	r0, [r4, #4]
   16624:	ldr	r3, [r4]
   16628:	ldr	r9, [r6, r5, lsl #3]
   1662c:	ldr	r1, [r4, #44]	; 0x2c
   16630:	ldr	r2, [r4, #40]	; 0x28
   16634:	orr	r0, r0, #1
   16638:	str	r3, [sp]
   1663c:	add	r3, r4, #8
   16640:	str	r0, [sp, #36]	; 0x24
   16644:	str	r0, [sp, #4]
   16648:	str	r1, [sp, #16]
   1664c:	str	r2, [sp, #12]
   16650:	str	r3, [sp, #8]
   16654:	mov	r0, r7
   16658:	mov	r1, r9
   1665c:	mov	r3, fp
   16660:	mov	r2, sl
   16664:	bl	14a94 <__assert_fail@plt+0x359c>
   16668:	cmp	r9, r0
   1666c:	bhi	166d8 <__assert_fail@plt+0x51e0>
   16670:	add	r3, r4, #48	; 0x30
   16674:	add	r9, r0, #1
   16678:	cmp	r7, r3
   1667c:	str	r9, [r6, r5, lsl #3]
   16680:	beq	1668c <__assert_fail@plt+0x5194>
   16684:	mov	r0, r7
   16688:	bl	14214 <__assert_fail@plt+0x2d1c>
   1668c:	mov	r0, r9
   16690:	bl	2a0e8 <__assert_fail@plt+0x18bf0>
   16694:	ldr	ip, [sp, #32]
   16698:	ldr	lr, [r4, #44]	; 0x2c
   1669c:	ldr	r5, [r4, #40]	; 0x28
   166a0:	mov	r3, fp
   166a4:	mov	r2, sl
   166a8:	mov	r1, r9
   166ac:	str	r0, [ip, #4]
   166b0:	ldr	ip, [r4]
   166b4:	ldr	r4, [pc, #108]	; 16728 <__assert_fail@plt+0x5230>
   166b8:	str	lr, [sp, #16]
   166bc:	str	r4, [sp, #8]
   166c0:	ldr	r4, [sp, #36]	; 0x24
   166c4:	str	r5, [sp, #12]
   166c8:	str	r4, [sp, #4]
   166cc:	str	ip, [sp]
   166d0:	mov	r7, r0
   166d4:	bl	14a94 <__assert_fail@plt+0x359c>
   166d8:	ldr	r3, [sp, #28]
   166dc:	mov	r0, r7
   166e0:	str	r3, [r8]
   166e4:	add	sp, sp, #52	; 0x34
   166e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166ec:	mov	r3, #8
   166f0:	sub	r2, r5, r2
   166f4:	str	r3, [sp]
   166f8:	add	r1, sp, #44	; 0x2c
   166fc:	add	r2, r2, #1
   16700:	mvn	r3, #-2147483648	; 0x80000000
   16704:	bl	2a304 <__assert_fail@plt+0x18e0c>
   16708:	mov	r6, r0
   1670c:	ldm	r7, {r0, r1}
   16710:	str	r6, [r4]
   16714:	stm	r6, {r0, r1}
   16718:	b	165ec <__assert_fail@plt+0x50f4>
   1671c:	bl	114ec <abort@plt>
   16720:	andeq	sp, r3, r0, asr r1
   16724:	andeq	sp, r3, r0, asr #3
   16728:	andeq	sp, r3, r8, asr #3
   1672c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16730:	sub	sp, sp, #44	; 0x2c
   16734:	mov	sl, r0
   16738:	bl	113f0 <__errno_location@plt>
   1673c:	ldr	r4, [pc, #352]	; 168a4 <__assert_fail@plt+0x53ac>
   16740:	ldr	r2, [r4, #4]
   16744:	ldr	r5, [r4]
   16748:	cmp	r2, #0
   1674c:	ldr	r3, [r0]
   16750:	mov	r8, r0
   16754:	str	r3, [sp, #28]
   16758:	bgt	167b4 <__assert_fail@plt+0x52bc>
   1675c:	add	r6, r4, #8
   16760:	cmp	r5, r6
   16764:	str	r2, [sp, #36]	; 0x24
   16768:	beq	16874 <__assert_fail@plt+0x537c>
   1676c:	mov	r3, #8
   16770:	mov	r0, r5
   16774:	str	r3, [sp]
   16778:	rsb	r2, r2, #1
   1677c:	mvn	r3, #-2147483648	; 0x80000000
   16780:	add	r1, sp, #36	; 0x24
   16784:	bl	2a304 <__assert_fail@plt+0x18e0c>
   16788:	mov	r5, r0
   1678c:	str	r0, [r4]
   16790:	ldr	r0, [r4, #4]
   16794:	ldr	r2, [sp, #36]	; 0x24
   16798:	mov	r1, #0
   1679c:	sub	r2, r2, r0
   167a0:	add	r0, r5, r0, lsl #3
   167a4:	lsl	r2, r2, #3
   167a8:	bl	11414 <memset@plt>
   167ac:	ldr	r3, [sp, #36]	; 0x24
   167b0:	str	r3, [r4, #4]
   167b4:	ldr	r4, [pc, #236]	; 168a8 <__assert_fail@plt+0x53b0>
   167b8:	ldr	r9, [r5]
   167bc:	ldr	r6, [r5, #4]
   167c0:	ldr	r7, [r4, #4]
   167c4:	ldr	r1, [r4, #44]	; 0x2c
   167c8:	ldr	r2, [r4, #40]	; 0x28
   167cc:	ldr	r3, [r4]
   167d0:	orr	r7, r7, #1
   167d4:	add	fp, r4, #8
   167d8:	str	r1, [sp, #16]
   167dc:	str	r2, [sp, #12]
   167e0:	str	r3, [sp]
   167e4:	str	r7, [sp, #4]
   167e8:	str	fp, [sp, #8]
   167ec:	mov	r1, r9
   167f0:	mov	r0, r6
   167f4:	mvn	r3, #0
   167f8:	mov	r2, sl
   167fc:	bl	14a94 <__assert_fail@plt+0x359c>
   16800:	cmp	r9, r0
   16804:	bhi	16860 <__assert_fail@plt+0x5368>
   16808:	add	r3, r4, #48	; 0x30
   1680c:	add	r9, r0, #1
   16810:	cmp	r6, r3
   16814:	str	r9, [r5]
   16818:	beq	16824 <__assert_fail@plt+0x532c>
   1681c:	mov	r0, r6
   16820:	bl	14214 <__assert_fail@plt+0x2d1c>
   16824:	mov	r0, r9
   16828:	bl	2a0e8 <__assert_fail@plt+0x18bf0>
   1682c:	ldr	ip, [r4, #44]	; 0x2c
   16830:	ldr	r3, [r4]
   16834:	ldr	lr, [r4, #40]	; 0x28
   16838:	mov	r2, sl
   1683c:	mov	r1, r9
   16840:	str	r0, [r5, #4]
   16844:	str	r3, [sp]
   16848:	stmib	sp, {r7, fp}
   1684c:	str	ip, [sp, #16]
   16850:	str	lr, [sp, #12]
   16854:	mvn	r3, #0
   16858:	mov	r6, r0
   1685c:	bl	14a94 <__assert_fail@plt+0x359c>
   16860:	ldr	r3, [sp, #28]
   16864:	mov	r0, r6
   16868:	str	r3, [r8]
   1686c:	add	sp, sp, #44	; 0x2c
   16870:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16874:	mov	r3, #8
   16878:	str	r3, [sp]
   1687c:	add	r1, sp, #36	; 0x24
   16880:	rsb	r2, r2, #1
   16884:	mvn	r3, #-2147483648	; 0x80000000
   16888:	mov	r0, #0
   1688c:	bl	2a304 <__assert_fail@plt+0x18e0c>
   16890:	mov	r5, r0
   16894:	ldm	r6, {r0, r1}
   16898:	str	r5, [r4]
   1689c:	stm	r5, {r0, r1}
   168a0:	b	16790 <__assert_fail@plt+0x5298>
   168a4:	andeq	sp, r3, r0, asr r1
   168a8:	andeq	sp, r3, r0, asr #3
   168ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168b0:	sub	sp, sp, #44	; 0x2c
   168b4:	mov	r9, r0
   168b8:	mov	sl, r1
   168bc:	bl	113f0 <__errno_location@plt>
   168c0:	ldr	r4, [pc, #364]	; 16a34 <__assert_fail@plt+0x553c>
   168c4:	ldr	r2, [r4, #4]
   168c8:	ldr	r5, [r4]
   168cc:	cmp	r2, #0
   168d0:	ldr	r3, [r0]
   168d4:	mov	r7, r0
   168d8:	str	r3, [sp, #24]
   168dc:	bgt	16938 <__assert_fail@plt+0x5440>
   168e0:	add	r6, r4, #8
   168e4:	cmp	r5, r6
   168e8:	str	r2, [sp, #36]	; 0x24
   168ec:	beq	16a04 <__assert_fail@plt+0x550c>
   168f0:	mov	r3, #8
   168f4:	mov	r0, r5
   168f8:	str	r3, [sp]
   168fc:	rsb	r2, r2, #1
   16900:	mvn	r3, #-2147483648	; 0x80000000
   16904:	add	r1, sp, #36	; 0x24
   16908:	bl	2a304 <__assert_fail@plt+0x18e0c>
   1690c:	mov	r5, r0
   16910:	str	r0, [r4]
   16914:	ldr	r0, [r4, #4]
   16918:	ldr	r2, [sp, #36]	; 0x24
   1691c:	mov	r1, #0
   16920:	sub	r2, r2, r0
   16924:	add	r0, r5, r0, lsl #3
   16928:	lsl	r2, r2, #3
   1692c:	bl	11414 <memset@plt>
   16930:	ldr	r3, [sp, #36]	; 0x24
   16934:	str	r3, [r4, #4]
   16938:	ldr	r4, [pc, #248]	; 16a38 <__assert_fail@plt+0x5540>
   1693c:	ldr	r8, [r5]
   16940:	ldr	r6, [r5, #4]
   16944:	ldr	r0, [r4, #4]
   16948:	ldr	r1, [r4, #44]	; 0x2c
   1694c:	ldr	r2, [r4, #40]	; 0x28
   16950:	ldr	r3, [r4]
   16954:	orr	r0, r0, #1
   16958:	add	fp, r4, #8
   1695c:	str	r0, [sp, #28]
   16960:	str	r0, [sp, #4]
   16964:	str	r1, [sp, #16]
   16968:	str	r2, [sp, #12]
   1696c:	str	r3, [sp]
   16970:	str	fp, [sp, #8]
   16974:	mov	r1, r8
   16978:	mov	r0, r6
   1697c:	mov	r3, sl
   16980:	mov	r2, r9
   16984:	bl	14a94 <__assert_fail@plt+0x359c>
   16988:	cmp	r8, r0
   1698c:	bhi	169f0 <__assert_fail@plt+0x54f8>
   16990:	add	r3, r4, #48	; 0x30
   16994:	add	r8, r0, #1
   16998:	cmp	r6, r3
   1699c:	str	r8, [r5]
   169a0:	beq	169ac <__assert_fail@plt+0x54b4>
   169a4:	mov	r0, r6
   169a8:	bl	14214 <__assert_fail@plt+0x2d1c>
   169ac:	mov	r0, r8
   169b0:	bl	2a0e8 <__assert_fail@plt+0x18bf0>
   169b4:	ldr	lr, [r4, #44]	; 0x2c
   169b8:	ldr	ip, [r4]
   169bc:	mov	r3, sl
   169c0:	mov	r2, r9
   169c4:	mov	r1, r8
   169c8:	str	r0, [r5, #4]
   169cc:	ldr	r5, [r4, #40]	; 0x28
   169d0:	ldr	r4, [sp, #28]
   169d4:	str	fp, [sp, #8]
   169d8:	str	r4, [sp, #4]
   169dc:	str	lr, [sp, #16]
   169e0:	str	r5, [sp, #12]
   169e4:	str	ip, [sp]
   169e8:	mov	r6, r0
   169ec:	bl	14a94 <__assert_fail@plt+0x359c>
   169f0:	ldr	r3, [sp, #24]
   169f4:	mov	r0, r6
   169f8:	str	r3, [r7]
   169fc:	add	sp, sp, #44	; 0x2c
   16a00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a04:	mov	r3, #8
   16a08:	str	r3, [sp]
   16a0c:	add	r1, sp, #36	; 0x24
   16a10:	rsb	r2, r2, #1
   16a14:	mvn	r3, #-2147483648	; 0x80000000
   16a18:	mov	r0, #0
   16a1c:	bl	2a304 <__assert_fail@plt+0x18e0c>
   16a20:	mov	r5, r0
   16a24:	ldm	r6, {r0, r1}
   16a28:	str	r5, [r4]
   16a2c:	stm	r5, {r0, r1}
   16a30:	b	16914 <__assert_fail@plt+0x541c>
   16a34:	andeq	sp, r3, r0, asr r1
   16a38:	andeq	sp, r3, r0, asr #3
   16a3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a40:	sub	sp, sp, #132	; 0x84
   16a44:	mov	r5, r1
   16a48:	mov	r4, r0
   16a4c:	mov	r9, r2
   16a50:	add	r0, sp, #80	; 0x50
   16a54:	mov	r2, #48	; 0x30
   16a58:	mov	r1, #0
   16a5c:	bl	11414 <memset@plt>
   16a60:	cmp	r5, #10
   16a64:	beq	16c1c <__assert_fail@plt+0x5724>
   16a68:	add	lr, sp, #80	; 0x50
   16a6c:	str	r5, [sp, #80]	; 0x50
   16a70:	ldm	lr!, {r0, r1, r2, r3}
   16a74:	add	ip, sp, #32
   16a78:	ldr	r6, [pc, #416]	; 16c20 <__assert_fail@plt+0x5728>
   16a7c:	stmia	ip!, {r0, r1, r2, r3}
   16a80:	ldm	lr!, {r0, r1, r2, r3}
   16a84:	stmia	ip!, {r0, r1, r2, r3}
   16a88:	ldm	lr, {r0, r1, r2, r3}
   16a8c:	stm	ip, {r0, r1, r2, r3}
   16a90:	bl	113f0 <__errno_location@plt>
   16a94:	cmn	r4, #-2147483647	; 0x80000001
   16a98:	ldr	r5, [r6]
   16a9c:	mov	r7, r0
   16aa0:	movne	r0, #0
   16aa4:	moveq	r0, #1
   16aa8:	ldr	r3, [r7]
   16aac:	orrs	r0, r0, r4, lsr #31
   16ab0:	str	r3, [sp, #24]
   16ab4:	bne	16c1c <__assert_fail@plt+0x5724>
   16ab8:	ldr	r2, [r6, #4]
   16abc:	cmp	r4, r2
   16ac0:	blt	16b20 <__assert_fail@plt+0x5628>
   16ac4:	add	r8, r6, #8
   16ac8:	cmp	r5, r8
   16acc:	str	r2, [sp, #80]	; 0x50
   16ad0:	beq	16bec <__assert_fail@plt+0x56f4>
   16ad4:	mov	r3, #8
   16ad8:	sub	r2, r4, r2
   16adc:	mov	r0, r5
   16ae0:	str	r3, [sp]
   16ae4:	add	r2, r2, #1
   16ae8:	add	r1, sp, #80	; 0x50
   16aec:	mvn	r3, #-2147483648	; 0x80000000
   16af0:	bl	2a304 <__assert_fail@plt+0x18e0c>
   16af4:	mov	r5, r0
   16af8:	str	r0, [r6]
   16afc:	ldr	r0, [r6, #4]
   16b00:	ldr	r2, [sp, #80]	; 0x50
   16b04:	mov	r1, #0
   16b08:	sub	r2, r2, r0
   16b0c:	add	r0, r5, r0, lsl #3
   16b10:	lsl	r2, r2, #3
   16b14:	bl	11414 <memset@plt>
   16b18:	ldr	r3, [sp, #80]	; 0x50
   16b1c:	str	r3, [r6, #4]
   16b20:	add	fp, r5, r4, lsl #3
   16b24:	ldr	r1, [sp, #36]	; 0x24
   16b28:	ldr	r8, [r5, r4, lsl #3]
   16b2c:	ldr	r6, [fp, #4]
   16b30:	ldr	r2, [sp, #72]	; 0x48
   16b34:	ldr	r3, [sp, #32]
   16b38:	ldr	ip, [sp, #76]	; 0x4c
   16b3c:	orr	r1, r1, #1
   16b40:	add	sl, sp, #40	; 0x28
   16b44:	str	r1, [sp, #28]
   16b48:	str	r1, [sp, #4]
   16b4c:	str	r2, [sp, #12]
   16b50:	str	r3, [sp]
   16b54:	mov	r0, r6
   16b58:	mov	r1, r8
   16b5c:	str	ip, [sp, #16]
   16b60:	str	sl, [sp, #8]
   16b64:	mvn	r3, #0
   16b68:	mov	r2, r9
   16b6c:	bl	14a94 <__assert_fail@plt+0x359c>
   16b70:	cmp	r8, r0
   16b74:	bhi	16bd8 <__assert_fail@plt+0x56e0>
   16b78:	ldr	r3, [pc, #164]	; 16c24 <__assert_fail@plt+0x572c>
   16b7c:	add	r8, r0, #1
   16b80:	cmp	r6, r3
   16b84:	str	r8, [r5, r4, lsl #3]
   16b88:	beq	16b94 <__assert_fail@plt+0x569c>
   16b8c:	mov	r0, r6
   16b90:	bl	14214 <__assert_fail@plt+0x2d1c>
   16b94:	mov	r0, r8
   16b98:	bl	2a0e8 <__assert_fail@plt+0x18bf0>
   16b9c:	ldr	lr, [sp, #76]	; 0x4c
   16ba0:	ldr	r3, [sp, #32]
   16ba4:	ldr	ip, [sp, #72]	; 0x48
   16ba8:	ldr	r4, [sp, #28]
   16bac:	mov	r2, r9
   16bb0:	mov	r1, r8
   16bb4:	str	r0, [fp, #4]
   16bb8:	str	r3, [sp]
   16bbc:	str	sl, [sp, #8]
   16bc0:	str	r4, [sp, #4]
   16bc4:	str	lr, [sp, #16]
   16bc8:	str	ip, [sp, #12]
   16bcc:	mvn	r3, #0
   16bd0:	mov	r6, r0
   16bd4:	bl	14a94 <__assert_fail@plt+0x359c>
   16bd8:	ldr	r3, [sp, #24]
   16bdc:	mov	r0, r6
   16be0:	str	r3, [r7]
   16be4:	add	sp, sp, #132	; 0x84
   16be8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bec:	mov	r3, #8
   16bf0:	sub	r2, r4, r2
   16bf4:	add	r1, sp, #80	; 0x50
   16bf8:	str	r3, [sp]
   16bfc:	add	r2, r2, #1
   16c00:	mvn	r3, #-2147483648	; 0x80000000
   16c04:	bl	2a304 <__assert_fail@plt+0x18e0c>
   16c08:	mov	r5, r0
   16c0c:	ldm	r8, {r0, r1}
   16c10:	str	r5, [r6]
   16c14:	stm	r5, {r0, r1}
   16c18:	b	16afc <__assert_fail@plt+0x5604>
   16c1c:	bl	114ec <abort@plt>
   16c20:	andeq	sp, r3, r0, asr r1
   16c24:	strdeq	sp, [r3], -r0
   16c28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c2c:	sub	sp, sp, #132	; 0x84
   16c30:	mov	r5, r1
   16c34:	mov	r4, r0
   16c38:	mov	r9, r2
   16c3c:	add	r0, sp, #80	; 0x50
   16c40:	mov	r2, #48	; 0x30
   16c44:	mov	r1, #0
   16c48:	mov	sl, r3
   16c4c:	bl	11414 <memset@plt>
   16c50:	cmp	r5, #10
   16c54:	beq	16e10 <__assert_fail@plt+0x5918>
   16c58:	add	lr, sp, #80	; 0x50
   16c5c:	str	r5, [sp, #80]	; 0x50
   16c60:	ldm	lr!, {r0, r1, r2, r3}
   16c64:	add	ip, sp, #32
   16c68:	ldr	r6, [pc, #420]	; 16e14 <__assert_fail@plt+0x591c>
   16c6c:	stmia	ip!, {r0, r1, r2, r3}
   16c70:	ldm	lr!, {r0, r1, r2, r3}
   16c74:	stmia	ip!, {r0, r1, r2, r3}
   16c78:	ldm	lr, {r0, r1, r2, r3}
   16c7c:	stm	ip, {r0, r1, r2, r3}
   16c80:	bl	113f0 <__errno_location@plt>
   16c84:	cmn	r4, #-2147483647	; 0x80000001
   16c88:	ldr	r5, [r6]
   16c8c:	mov	r7, r0
   16c90:	movne	r0, #0
   16c94:	moveq	r0, #1
   16c98:	ldr	r3, [r7]
   16c9c:	orrs	r0, r0, r4, lsr #31
   16ca0:	str	r3, [sp, #24]
   16ca4:	bne	16e10 <__assert_fail@plt+0x5918>
   16ca8:	ldr	r2, [r6, #4]
   16cac:	cmp	r4, r2
   16cb0:	blt	16d10 <__assert_fail@plt+0x5818>
   16cb4:	add	r8, r6, #8
   16cb8:	cmp	r5, r8
   16cbc:	str	r2, [sp, #80]	; 0x50
   16cc0:	beq	16de0 <__assert_fail@plt+0x58e8>
   16cc4:	mov	r3, #8
   16cc8:	sub	r2, r4, r2
   16ccc:	mov	r0, r5
   16cd0:	str	r3, [sp]
   16cd4:	add	r2, r2, #1
   16cd8:	add	r1, sp, #80	; 0x50
   16cdc:	mvn	r3, #-2147483648	; 0x80000000
   16ce0:	bl	2a304 <__assert_fail@plt+0x18e0c>
   16ce4:	mov	r5, r0
   16ce8:	str	r0, [r6]
   16cec:	ldr	r0, [r6, #4]
   16cf0:	ldr	r2, [sp, #80]	; 0x50
   16cf4:	mov	r1, #0
   16cf8:	sub	r2, r2, r0
   16cfc:	add	r0, r5, r0, lsl #3
   16d00:	lsl	r2, r2, #3
   16d04:	bl	11414 <memset@plt>
   16d08:	ldr	r3, [sp, #80]	; 0x50
   16d0c:	str	r3, [r6, #4]
   16d10:	add	fp, r5, r4, lsl #3
   16d14:	ldr	r3, [sp, #32]
   16d18:	ldr	r1, [sp, #36]	; 0x24
   16d1c:	ldr	r8, [r5, r4, lsl #3]
   16d20:	ldr	r6, [fp, #4]
   16d24:	ldr	r2, [sp, #72]	; 0x48
   16d28:	ldr	ip, [sp, #76]	; 0x4c
   16d2c:	orr	r1, r1, #1
   16d30:	str	r3, [sp]
   16d34:	add	r3, sp, #40	; 0x28
   16d38:	str	r1, [sp, #28]
   16d3c:	str	r1, [sp, #4]
   16d40:	str	r2, [sp, #12]
   16d44:	str	r3, [sp, #8]
   16d48:	mov	r0, r6
   16d4c:	mov	r1, r8
   16d50:	str	ip, [sp, #16]
   16d54:	mov	r3, sl
   16d58:	mov	r2, r9
   16d5c:	bl	14a94 <__assert_fail@plt+0x359c>
   16d60:	cmp	r8, r0
   16d64:	bhi	16dcc <__assert_fail@plt+0x58d4>
   16d68:	ldr	r3, [pc, #168]	; 16e18 <__assert_fail@plt+0x5920>
   16d6c:	add	r8, r0, #1
   16d70:	cmp	r6, r3
   16d74:	str	r8, [r5, r4, lsl #3]
   16d78:	beq	16d84 <__assert_fail@plt+0x588c>
   16d7c:	mov	r0, r6
   16d80:	bl	14214 <__assert_fail@plt+0x2d1c>
   16d84:	mov	r0, r8
   16d88:	bl	2a0e8 <__assert_fail@plt+0x18bf0>
   16d8c:	add	lr, sp, #40	; 0x28
   16d90:	ldr	ip, [sp, #76]	; 0x4c
   16d94:	ldr	r4, [sp, #72]	; 0x48
   16d98:	ldr	r5, [sp, #28]
   16d9c:	mov	r3, sl
   16da0:	mov	r2, r9
   16da4:	mov	r1, r8
   16da8:	str	r0, [fp, #4]
   16dac:	str	lr, [sp, #8]
   16db0:	ldr	lr, [sp, #32]
   16db4:	str	r5, [sp, #4]
   16db8:	str	ip, [sp, #16]
   16dbc:	str	r4, [sp, #12]
   16dc0:	str	lr, [sp]
   16dc4:	mov	r6, r0
   16dc8:	bl	14a94 <__assert_fail@plt+0x359c>
   16dcc:	ldr	r3, [sp, #24]
   16dd0:	mov	r0, r6
   16dd4:	str	r3, [r7]
   16dd8:	add	sp, sp, #132	; 0x84
   16ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16de0:	mov	r3, #8
   16de4:	sub	r2, r4, r2
   16de8:	add	r1, sp, #80	; 0x50
   16dec:	str	r3, [sp]
   16df0:	add	r2, r2, #1
   16df4:	mvn	r3, #-2147483648	; 0x80000000
   16df8:	bl	2a304 <__assert_fail@plt+0x18e0c>
   16dfc:	mov	r5, r0
   16e00:	ldm	r8, {r0, r1}
   16e04:	str	r5, [r6]
   16e08:	stm	r5, {r0, r1}
   16e0c:	b	16cec <__assert_fail@plt+0x57f4>
   16e10:	bl	114ec <abort@plt>
   16e14:	andeq	sp, r3, r0, asr r1
   16e18:	strdeq	sp, [r3], -r0
   16e1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e20:	sub	sp, sp, #124	; 0x7c
   16e24:	mov	r4, r0
   16e28:	mov	r9, r1
   16e2c:	add	r0, sp, #72	; 0x48
   16e30:	mov	r2, #48	; 0x30
   16e34:	mov	r1, #0
   16e38:	bl	11414 <memset@plt>
   16e3c:	cmp	r4, #10
   16e40:	beq	16fcc <__assert_fail@plt+0x5ad4>
   16e44:	add	lr, sp, #72	; 0x48
   16e48:	str	r4, [sp, #72]	; 0x48
   16e4c:	ldm	lr!, {r0, r1, r2, r3}
   16e50:	add	ip, sp, #24
   16e54:	ldr	r5, [pc, #372]	; 16fd0 <__assert_fail@plt+0x5ad8>
   16e58:	stmia	ip!, {r0, r1, r2, r3}
   16e5c:	ldm	lr!, {r0, r1, r2, r3}
   16e60:	stmia	ip!, {r0, r1, r2, r3}
   16e64:	ldm	lr, {r0, r1, r2, r3}
   16e68:	stm	ip, {r0, r1, r2, r3}
   16e6c:	bl	113f0 <__errno_location@plt>
   16e70:	ldr	r2, [r5, #4]
   16e74:	ldr	r4, [r5]
   16e78:	cmp	r2, #0
   16e7c:	mov	r7, r0
   16e80:	ldr	fp, [r0]
   16e84:	bgt	16ee0 <__assert_fail@plt+0x59e8>
   16e88:	add	r6, r5, #8
   16e8c:	cmp	r4, r6
   16e90:	str	r2, [sp, #72]	; 0x48
   16e94:	beq	16f9c <__assert_fail@plt+0x5aa4>
   16e98:	mov	r3, #8
   16e9c:	mov	r0, r4
   16ea0:	str	r3, [sp]
   16ea4:	rsb	r2, r2, #1
   16ea8:	add	r1, sp, #72	; 0x48
   16eac:	mvn	r3, #-2147483648	; 0x80000000
   16eb0:	bl	2a304 <__assert_fail@plt+0x18e0c>
   16eb4:	mov	r4, r0
   16eb8:	str	r0, [r5]
   16ebc:	ldr	r0, [r5, #4]
   16ec0:	ldr	r2, [sp, #72]	; 0x48
   16ec4:	mov	r1, #0
   16ec8:	sub	r2, r2, r0
   16ecc:	add	r0, r4, r0, lsl #3
   16ed0:	lsl	r2, r2, #3
   16ed4:	bl	11414 <memset@plt>
   16ed8:	ldr	r3, [sp, #72]	; 0x48
   16edc:	str	r3, [r5, #4]
   16ee0:	ldr	r6, [sp, #28]
   16ee4:	ldr	r8, [r4]
   16ee8:	ldr	r5, [r4, #4]
   16eec:	ldr	r2, [sp, #64]	; 0x40
   16ef0:	ldr	r3, [sp, #24]
   16ef4:	ldr	ip, [sp, #68]	; 0x44
   16ef8:	orr	r6, r6, #1
   16efc:	add	sl, sp, #32
   16f00:	str	r2, [sp, #12]
   16f04:	str	r3, [sp]
   16f08:	str	r6, [sp, #4]
   16f0c:	mov	r1, r8
   16f10:	mov	r0, r5
   16f14:	str	ip, [sp, #16]
   16f18:	str	sl, [sp, #8]
   16f1c:	mvn	r3, #0
   16f20:	mov	r2, r9
   16f24:	bl	14a94 <__assert_fail@plt+0x359c>
   16f28:	cmp	r8, r0
   16f2c:	bhi	16f8c <__assert_fail@plt+0x5a94>
   16f30:	ldr	r3, [pc, #156]	; 16fd4 <__assert_fail@plt+0x5adc>
   16f34:	add	r8, r0, #1
   16f38:	cmp	r5, r3
   16f3c:	str	r8, [r4]
   16f40:	beq	16f4c <__assert_fail@plt+0x5a54>
   16f44:	mov	r0, r5
   16f48:	bl	14214 <__assert_fail@plt+0x2d1c>
   16f4c:	mov	r0, r8
   16f50:	bl	2a0e8 <__assert_fail@plt+0x18bf0>
   16f54:	ldr	lr, [sp, #68]	; 0x44
   16f58:	ldr	r3, [sp, #24]
   16f5c:	ldr	ip, [sp, #64]	; 0x40
   16f60:	mov	r2, r9
   16f64:	mov	r1, r8
   16f68:	str	r0, [r4, #4]
   16f6c:	str	r3, [sp]
   16f70:	str	sl, [sp, #8]
   16f74:	str	r6, [sp, #4]
   16f78:	str	lr, [sp, #16]
   16f7c:	str	ip, [sp, #12]
   16f80:	mvn	r3, #0
   16f84:	mov	r5, r0
   16f88:	bl	14a94 <__assert_fail@plt+0x359c>
   16f8c:	mov	r0, r5
   16f90:	str	fp, [r7]
   16f94:	add	sp, sp, #124	; 0x7c
   16f98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f9c:	mov	r3, #8
   16fa0:	add	r1, sp, #72	; 0x48
   16fa4:	str	r3, [sp]
   16fa8:	rsb	r2, r2, #1
   16fac:	mvn	r3, #-2147483648	; 0x80000000
   16fb0:	mov	r0, #0
   16fb4:	bl	2a304 <__assert_fail@plt+0x18e0c>
   16fb8:	mov	r4, r0
   16fbc:	ldm	r6, {r0, r1}
   16fc0:	str	r4, [r5]
   16fc4:	stm	r4, {r0, r1}
   16fc8:	b	16ebc <__assert_fail@plt+0x59c4>
   16fcc:	bl	114ec <abort@plt>
   16fd0:	andeq	sp, r3, r0, asr r1
   16fd4:	strdeq	sp, [r3], -r0
   16fd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fdc:	sub	sp, sp, #132	; 0x84
   16fe0:	mov	r4, r0
   16fe4:	mov	r9, r1
   16fe8:	mov	sl, r2
   16fec:	add	r0, sp, #80	; 0x50
   16ff0:	mov	r2, #48	; 0x30
   16ff4:	mov	r1, #0
   16ff8:	bl	11414 <memset@plt>
   16ffc:	cmp	r4, #10
   17000:	beq	17194 <__assert_fail@plt+0x5c9c>
   17004:	add	lr, sp, #80	; 0x50
   17008:	str	r4, [sp, #80]	; 0x50
   1700c:	ldm	lr!, {r0, r1, r2, r3}
   17010:	add	ip, sp, #32
   17014:	ldr	r5, [pc, #380]	; 17198 <__assert_fail@plt+0x5ca0>
   17018:	stmia	ip!, {r0, r1, r2, r3}
   1701c:	ldm	lr!, {r0, r1, r2, r3}
   17020:	stmia	ip!, {r0, r1, r2, r3}
   17024:	ldm	lr, {r0, r1, r2, r3}
   17028:	stm	ip, {r0, r1, r2, r3}
   1702c:	bl	113f0 <__errno_location@plt>
   17030:	ldr	r2, [r5, #4]
   17034:	ldr	r4, [r5]
   17038:	cmp	r2, #0
   1703c:	ldr	r3, [r0]
   17040:	mov	r7, r0
   17044:	str	r3, [sp, #28]
   17048:	bgt	170a4 <__assert_fail@plt+0x5bac>
   1704c:	add	r6, r5, #8
   17050:	cmp	r4, r6
   17054:	str	r2, [sp, #80]	; 0x50
   17058:	beq	17164 <__assert_fail@plt+0x5c6c>
   1705c:	mov	r3, #8
   17060:	mov	r0, r4
   17064:	str	r3, [sp]
   17068:	rsb	r2, r2, #1
   1706c:	add	r1, sp, #80	; 0x50
   17070:	mvn	r3, #-2147483648	; 0x80000000
   17074:	bl	2a304 <__assert_fail@plt+0x18e0c>
   17078:	mov	r4, r0
   1707c:	str	r0, [r5]
   17080:	ldr	r0, [r5, #4]
   17084:	ldr	r2, [sp, #80]	; 0x50
   17088:	mov	r1, #0
   1708c:	sub	r2, r2, r0
   17090:	add	r0, r4, r0, lsl #3
   17094:	lsl	r2, r2, #3
   17098:	bl	11414 <memset@plt>
   1709c:	ldr	r3, [sp, #80]	; 0x50
   170a0:	str	r3, [r5, #4]
   170a4:	ldr	r6, [sp, #36]	; 0x24
   170a8:	ldr	r8, [r4]
   170ac:	ldr	r5, [r4, #4]
   170b0:	ldr	r2, [sp, #72]	; 0x48
   170b4:	ldr	r3, [sp, #32]
   170b8:	ldr	ip, [sp, #76]	; 0x4c
   170bc:	orr	r6, r6, #1
   170c0:	add	fp, sp, #40	; 0x28
   170c4:	str	r2, [sp, #12]
   170c8:	str	r3, [sp]
   170cc:	str	r6, [sp, #4]
   170d0:	mov	r1, r8
   170d4:	mov	r0, r5
   170d8:	str	ip, [sp, #16]
   170dc:	str	fp, [sp, #8]
   170e0:	mov	r3, sl
   170e4:	mov	r2, r9
   170e8:	bl	14a94 <__assert_fail@plt+0x359c>
   170ec:	cmp	r8, r0
   170f0:	bhi	17150 <__assert_fail@plt+0x5c58>
   170f4:	ldr	r3, [pc, #160]	; 1719c <__assert_fail@plt+0x5ca4>
   170f8:	add	r8, r0, #1
   170fc:	cmp	r5, r3
   17100:	str	r8, [r4]
   17104:	beq	17110 <__assert_fail@plt+0x5c18>
   17108:	mov	r0, r5
   1710c:	bl	14214 <__assert_fail@plt+0x2d1c>
   17110:	mov	r0, r8
   17114:	bl	2a0e8 <__assert_fail@plt+0x18bf0>
   17118:	ldr	ip, [sp, #76]	; 0x4c
   1711c:	ldr	lr, [sp, #32]
   17120:	mov	r3, sl
   17124:	mov	r2, r9
   17128:	mov	r1, r8
   1712c:	str	r0, [r4, #4]
   17130:	ldr	r4, [sp, #72]	; 0x48
   17134:	str	fp, [sp, #8]
   17138:	str	r6, [sp, #4]
   1713c:	str	ip, [sp, #16]
   17140:	str	r4, [sp, #12]
   17144:	str	lr, [sp]
   17148:	mov	r5, r0
   1714c:	bl	14a94 <__assert_fail@plt+0x359c>
   17150:	ldr	r3, [sp, #28]
   17154:	mov	r0, r5
   17158:	str	r3, [r7]
   1715c:	add	sp, sp, #132	; 0x84
   17160:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17164:	mov	r3, #8
   17168:	add	r1, sp, #80	; 0x50
   1716c:	str	r3, [sp]
   17170:	rsb	r2, r2, #1
   17174:	mvn	r3, #-2147483648	; 0x80000000
   17178:	mov	r0, #0
   1717c:	bl	2a304 <__assert_fail@plt+0x18e0c>
   17180:	mov	r4, r0
   17184:	ldm	r6, {r0, r1}
   17188:	str	r4, [r5]
   1718c:	stm	r4, {r0, r1}
   17190:	b	17080 <__assert_fail@plt+0x5b88>
   17194:	bl	114ec <abort@plt>
   17198:	andeq	sp, r3, r0, asr r1
   1719c:	strdeq	sp, [r3], -r0
   171a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171a4:	mov	r4, r2
   171a8:	ldr	lr, [pc, #432]	; 17360 <__assert_fail@plt+0x5e68>
   171ac:	mov	sl, r0
   171b0:	mov	fp, r1
   171b4:	ldm	lr!, {r0, r1, r2, r3}
   171b8:	sub	sp, sp, #92	; 0x5c
   171bc:	add	ip, sp, #40	; 0x28
   171c0:	lsr	r7, r4, #5
   171c4:	stmia	ip!, {r0, r1, r2, r3}
   171c8:	add	r6, sp, #48	; 0x30
   171cc:	ldm	lr!, {r0, r1, r2, r3}
   171d0:	and	r4, r4, #31
   171d4:	ldr	r5, [pc, #392]	; 17364 <__assert_fail@plt+0x5e6c>
   171d8:	stmia	ip!, {r0, r1, r2, r3}
   171dc:	ldm	lr, {r0, r1, r2, r3}
   171e0:	stm	ip, {r0, r1, r2, r3}
   171e4:	ldr	r2, [r6, r7, lsl #2]
   171e8:	lsr	r3, r2, r4
   171ec:	eor	r3, r3, #1
   171f0:	and	r3, r3, #1
   171f4:	eor	r4, r2, r3, lsl r4
   171f8:	str	r4, [r6, r7, lsl #2]
   171fc:	bl	113f0 <__errno_location@plt>
   17200:	ldr	r2, [r5, #4]
   17204:	ldr	r4, [r5]
   17208:	cmp	r2, #0
   1720c:	ldr	r3, [r0]
   17210:	mov	r8, r0
   17214:	str	r3, [sp, #28]
   17218:	bgt	17274 <__assert_fail@plt+0x5d7c>
   1721c:	add	r7, r5, #8
   17220:	cmp	r4, r7
   17224:	str	r2, [sp, #36]	; 0x24
   17228:	beq	17330 <__assert_fail@plt+0x5e38>
   1722c:	mov	r3, #8
   17230:	mov	r0, r4
   17234:	str	r3, [sp]
   17238:	rsb	r2, r2, #1
   1723c:	mvn	r3, #-2147483648	; 0x80000000
   17240:	add	r1, sp, #36	; 0x24
   17244:	bl	2a304 <__assert_fail@plt+0x18e0c>
   17248:	mov	r4, r0
   1724c:	str	r0, [r5]
   17250:	ldr	r0, [r5, #4]
   17254:	ldr	r2, [sp, #36]	; 0x24
   17258:	mov	r1, #0
   1725c:	sub	r2, r2, r0
   17260:	add	r0, r4, r0, lsl #3
   17264:	lsl	r2, r2, #3
   17268:	bl	11414 <memset@plt>
   1726c:	ldr	r3, [sp, #36]	; 0x24
   17270:	str	r3, [r5, #4]
   17274:	ldr	r7, [sp, #44]	; 0x2c
   17278:	ldr	r9, [r4]
   1727c:	ldr	r5, [r4, #4]
   17280:	ldr	r2, [sp, #80]	; 0x50
   17284:	ldr	r3, [sp, #40]	; 0x28
   17288:	ldr	ip, [sp, #84]	; 0x54
   1728c:	orr	r7, r7, #1
   17290:	str	r2, [sp, #12]
   17294:	str	r3, [sp]
   17298:	str	r7, [sp, #4]
   1729c:	str	r6, [sp, #8]
   172a0:	mov	r1, r9
   172a4:	mov	r0, r5
   172a8:	str	ip, [sp, #16]
   172ac:	mov	r3, fp
   172b0:	mov	r2, sl
   172b4:	bl	14a94 <__assert_fail@plt+0x359c>
   172b8:	cmp	r9, r0
   172bc:	bhi	1731c <__assert_fail@plt+0x5e24>
   172c0:	ldr	r3, [pc, #160]	; 17368 <__assert_fail@plt+0x5e70>
   172c4:	add	r9, r0, #1
   172c8:	cmp	r5, r3
   172cc:	str	r9, [r4]
   172d0:	beq	172dc <__assert_fail@plt+0x5de4>
   172d4:	mov	r0, r5
   172d8:	bl	14214 <__assert_fail@plt+0x2d1c>
   172dc:	mov	r0, r9
   172e0:	bl	2a0e8 <__assert_fail@plt+0x18bf0>
   172e4:	ldr	ip, [sp, #84]	; 0x54
   172e8:	ldr	lr, [sp, #40]	; 0x28
   172ec:	mov	r3, fp
   172f0:	mov	r2, sl
   172f4:	mov	r1, r9
   172f8:	str	r0, [r4, #4]
   172fc:	ldr	r4, [sp, #80]	; 0x50
   17300:	str	r6, [sp, #8]
   17304:	str	r7, [sp, #4]
   17308:	str	ip, [sp, #16]
   1730c:	str	r4, [sp, #12]
   17310:	str	lr, [sp]
   17314:	mov	r5, r0
   17318:	bl	14a94 <__assert_fail@plt+0x359c>
   1731c:	ldr	r3, [sp, #28]
   17320:	mov	r0, r5
   17324:	str	r3, [r8]
   17328:	add	sp, sp, #92	; 0x5c
   1732c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17330:	mov	r3, #8
   17334:	str	r3, [sp]
   17338:	add	r1, sp, #36	; 0x24
   1733c:	rsb	r2, r2, #1
   17340:	mvn	r3, #-2147483648	; 0x80000000
   17344:	mov	r0, #0
   17348:	bl	2a304 <__assert_fail@plt+0x18e0c>
   1734c:	mov	r4, r0
   17350:	ldm	r7, {r0, r1}
   17354:	str	r4, [r5]
   17358:	stm	r4, {r0, r1}
   1735c:	b	17250 <__assert_fail@plt+0x5d58>
   17360:	andeq	sp, r3, r0, asr #3
   17364:	andeq	sp, r3, r0, asr r1
   17368:	strdeq	sp, [r3], -r0
   1736c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17370:	mov	r4, r1
   17374:	ldr	lr, [pc, #420]	; 17520 <__assert_fail@plt+0x6028>
   17378:	mov	r6, r0
   1737c:	sub	sp, sp, #84	; 0x54
   17380:	ldm	lr!, {r0, r1, r2, r3}
   17384:	add	ip, sp, #32
   17388:	lsr	r8, r4, #5
   1738c:	add	r5, sp, #40	; 0x28
   17390:	stmia	ip!, {r0, r1, r2, r3}
   17394:	and	r4, r4, #31
   17398:	ldm	lr!, {r0, r1, r2, r3}
   1739c:	ldr	r7, [pc, #384]	; 17524 <__assert_fail@plt+0x602c>
   173a0:	stmia	ip!, {r0, r1, r2, r3}
   173a4:	ldm	lr, {r0, r1, r2, r3}
   173a8:	stm	ip, {r0, r1, r2, r3}
   173ac:	ldr	r2, [r5, r8, lsl #2]
   173b0:	lsr	r3, r2, r4
   173b4:	eor	r3, r3, #1
   173b8:	and	r3, r3, #1
   173bc:	eor	r4, r2, r3, lsl r4
   173c0:	str	r4, [r5, r8, lsl #2]
   173c4:	bl	113f0 <__errno_location@plt>
   173c8:	ldr	r2, [r7, #4]
   173cc:	ldr	r4, [r7]
   173d0:	cmp	r2, #0
   173d4:	mov	r9, r0
   173d8:	ldr	sl, [r0]
   173dc:	bgt	17438 <__assert_fail@plt+0x5f40>
   173e0:	add	r8, r7, #8
   173e4:	cmp	r4, r8
   173e8:	str	r2, [sp, #28]
   173ec:	beq	174f0 <__assert_fail@plt+0x5ff8>
   173f0:	mov	r3, #8
   173f4:	mov	r0, r4
   173f8:	str	r3, [sp]
   173fc:	rsb	r2, r2, #1
   17400:	mvn	r3, #-2147483648	; 0x80000000
   17404:	add	r1, sp, #28
   17408:	bl	2a304 <__assert_fail@plt+0x18e0c>
   1740c:	mov	r4, r0
   17410:	str	r0, [r7]
   17414:	ldr	r0, [r7, #4]
   17418:	ldr	r2, [sp, #28]
   1741c:	mov	r1, #0
   17420:	sub	r2, r2, r0
   17424:	add	r0, r4, r0, lsl #3
   17428:	lsl	r2, r2, #3
   1742c:	bl	11414 <memset@plt>
   17430:	ldr	r3, [sp, #28]
   17434:	str	r3, [r7, #4]
   17438:	ldr	r8, [sp, #36]	; 0x24
   1743c:	ldr	fp, [r4]
   17440:	ldr	r7, [r4, #4]
   17444:	ldr	r2, [sp, #72]	; 0x48
   17448:	ldr	r3, [sp, #32]
   1744c:	ldr	ip, [sp, #76]	; 0x4c
   17450:	orr	r8, r8, #1
   17454:	str	r2, [sp, #12]
   17458:	str	r3, [sp]
   1745c:	str	r8, [sp, #4]
   17460:	str	r5, [sp, #8]
   17464:	mov	r1, fp
   17468:	mov	r0, r7
   1746c:	str	ip, [sp, #16]
   17470:	mvn	r3, #0
   17474:	mov	r2, r6
   17478:	bl	14a94 <__assert_fail@plt+0x359c>
   1747c:	cmp	fp, r0
   17480:	bhi	174e0 <__assert_fail@plt+0x5fe8>
   17484:	ldr	r3, [pc, #156]	; 17528 <__assert_fail@plt+0x6030>
   17488:	add	fp, r0, #1
   1748c:	cmp	r7, r3
   17490:	str	fp, [r4]
   17494:	beq	174a0 <__assert_fail@plt+0x5fa8>
   17498:	mov	r0, r7
   1749c:	bl	14214 <__assert_fail@plt+0x2d1c>
   174a0:	mov	r0, fp
   174a4:	bl	2a0e8 <__assert_fail@plt+0x18bf0>
   174a8:	ldr	lr, [sp, #76]	; 0x4c
   174ac:	ldr	r3, [sp, #32]
   174b0:	ldr	ip, [sp, #72]	; 0x48
   174b4:	mov	r2, r6
   174b8:	mov	r1, fp
   174bc:	str	r0, [r4, #4]
   174c0:	str	r3, [sp]
   174c4:	str	r5, [sp, #8]
   174c8:	str	r8, [sp, #4]
   174cc:	str	lr, [sp, #16]
   174d0:	str	ip, [sp, #12]
   174d4:	mvn	r3, #0
   174d8:	mov	r7, r0
   174dc:	bl	14a94 <__assert_fail@plt+0x359c>
   174e0:	mov	r0, r7
   174e4:	str	sl, [r9]
   174e8:	add	sp, sp, #84	; 0x54
   174ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174f0:	mov	r3, #8
   174f4:	str	r3, [sp]
   174f8:	add	r1, sp, #28
   174fc:	rsb	r2, r2, #1
   17500:	mvn	r3, #-2147483648	; 0x80000000
   17504:	mov	r0, #0
   17508:	bl	2a304 <__assert_fail@plt+0x18e0c>
   1750c:	mov	r4, r0
   17510:	ldm	r8, {r0, r1}
   17514:	str	r4, [r7]
   17518:	stm	r4, {r0, r1}
   1751c:	b	17414 <__assert_fail@plt+0x5f1c>
   17520:	andeq	sp, r3, r0, asr #3
   17524:	andeq	sp, r3, r0, asr r1
   17528:	strdeq	sp, [r3], -r0
   1752c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17530:	mov	r6, r0
   17534:	ldr	lr, [pc, #404]	; 176d0 <__assert_fail@plt+0x61d8>
   17538:	sub	sp, sp, #84	; 0x54
   1753c:	add	ip, sp, #32
   17540:	ldm	lr!, {r0, r1, r2, r3}
   17544:	ldr	r5, [pc, #392]	; 176d4 <__assert_fail@plt+0x61dc>
   17548:	stmia	ip!, {r0, r1, r2, r3}
   1754c:	ldm	lr!, {r0, r1, r2, r3}
   17550:	ldr	r4, [sp, #44]	; 0x2c
   17554:	stmia	ip!, {r0, r1, r2, r3}
   17558:	ldm	lr, {r0, r1, r2, r3}
   1755c:	mvn	lr, r4
   17560:	and	lr, lr, #67108864	; 0x4000000
   17564:	eor	lr, lr, r4
   17568:	stm	ip, {r0, r1, r2, r3}
   1756c:	str	lr, [sp, #44]	; 0x2c
   17570:	bl	113f0 <__errno_location@plt>
   17574:	ldr	r2, [r5, #4]
   17578:	ldr	r4, [r5]
   1757c:	cmp	r2, #0
   17580:	mov	r8, r0
   17584:	ldr	sl, [r0]
   17588:	bgt	175e4 <__assert_fail@plt+0x60ec>
   1758c:	add	r7, r5, #8
   17590:	cmp	r4, r7
   17594:	str	r2, [sp, #28]
   17598:	beq	176a0 <__assert_fail@plt+0x61a8>
   1759c:	mov	r3, #8
   175a0:	mov	r0, r4
   175a4:	str	r3, [sp]
   175a8:	rsb	r2, r2, #1
   175ac:	mvn	r3, #-2147483648	; 0x80000000
   175b0:	add	r1, sp, #28
   175b4:	bl	2a304 <__assert_fail@plt+0x18e0c>
   175b8:	mov	r4, r0
   175bc:	str	r0, [r5]
   175c0:	ldr	r0, [r5, #4]
   175c4:	ldr	r2, [sp, #28]
   175c8:	mov	r1, #0
   175cc:	sub	r2, r2, r0
   175d0:	add	r0, r4, r0, lsl #3
   175d4:	lsl	r2, r2, #3
   175d8:	bl	11414 <memset@plt>
   175dc:	ldr	r3, [sp, #28]
   175e0:	str	r3, [r5, #4]
   175e4:	ldr	r7, [sp, #36]	; 0x24
   175e8:	ldr	r9, [r4]
   175ec:	ldr	r5, [r4, #4]
   175f0:	ldr	r2, [sp, #72]	; 0x48
   175f4:	ldr	r3, [sp, #32]
   175f8:	ldr	ip, [sp, #76]	; 0x4c
   175fc:	orr	r7, r7, #1
   17600:	add	fp, sp, #40	; 0x28
   17604:	str	r2, [sp, #12]
   17608:	str	r3, [sp]
   1760c:	str	r7, [sp, #4]
   17610:	mov	r1, r9
   17614:	mov	r0, r5
   17618:	str	ip, [sp, #16]
   1761c:	str	fp, [sp, #8]
   17620:	mvn	r3, #0
   17624:	mov	r2, r6
   17628:	bl	14a94 <__assert_fail@plt+0x359c>
   1762c:	cmp	r9, r0
   17630:	bhi	17690 <__assert_fail@plt+0x6198>
   17634:	ldr	r3, [pc, #156]	; 176d8 <__assert_fail@plt+0x61e0>
   17638:	add	r9, r0, #1
   1763c:	cmp	r5, r3
   17640:	str	r9, [r4]
   17644:	beq	17650 <__assert_fail@plt+0x6158>
   17648:	mov	r0, r5
   1764c:	bl	14214 <__assert_fail@plt+0x2d1c>
   17650:	mov	r0, r9
   17654:	bl	2a0e8 <__assert_fail@plt+0x18bf0>
   17658:	ldr	lr, [sp, #76]	; 0x4c
   1765c:	ldr	r3, [sp, #32]
   17660:	ldr	ip, [sp, #72]	; 0x48
   17664:	mov	r2, r6
   17668:	mov	r1, r9
   1766c:	str	r0, [r4, #4]
   17670:	str	r3, [sp]
   17674:	str	fp, [sp, #8]
   17678:	str	r7, [sp, #4]
   1767c:	str	lr, [sp, #16]
   17680:	str	ip, [sp, #12]
   17684:	mvn	r3, #0
   17688:	mov	r5, r0
   1768c:	bl	14a94 <__assert_fail@plt+0x359c>
   17690:	mov	r0, r5
   17694:	str	sl, [r8]
   17698:	add	sp, sp, #84	; 0x54
   1769c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176a0:	mov	r3, #8
   176a4:	str	r3, [sp]
   176a8:	add	r1, sp, #28
   176ac:	rsb	r2, r2, #1
   176b0:	mvn	r3, #-2147483648	; 0x80000000
   176b4:	mov	r0, #0
   176b8:	bl	2a304 <__assert_fail@plt+0x18e0c>
   176bc:	mov	r4, r0
   176c0:	ldm	r7, {r0, r1}
   176c4:	str	r4, [r5]
   176c8:	stm	r4, {r0, r1}
   176cc:	b	175c0 <__assert_fail@plt+0x60c8>
   176d0:	andeq	sp, r3, r0, asr #3
   176d4:	andeq	sp, r3, r0, asr r1
   176d8:	strdeq	sp, [r3], -r0
   176dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176e0:	mov	r9, r0
   176e4:	ldr	lr, [pc, #416]	; 1788c <__assert_fail@plt+0x6394>
   176e8:	mov	sl, r1
   176ec:	sub	sp, sp, #92	; 0x5c
   176f0:	ldm	lr!, {r0, r1, r2, r3}
   176f4:	add	ip, sp, #40	; 0x28
   176f8:	ldr	r5, [pc, #400]	; 17890 <__assert_fail@plt+0x6398>
   176fc:	stmia	ip!, {r0, r1, r2, r3}
   17700:	ldm	lr!, {r0, r1, r2, r3}
   17704:	ldr	r4, [sp, #52]	; 0x34
   17708:	stmia	ip!, {r0, r1, r2, r3}
   1770c:	ldm	lr, {r0, r1, r2, r3}
   17710:	mvn	lr, r4
   17714:	and	lr, lr, #67108864	; 0x4000000
   17718:	eor	lr, lr, r4
   1771c:	stm	ip, {r0, r1, r2, r3}
   17720:	str	lr, [sp, #52]	; 0x34
   17724:	bl	113f0 <__errno_location@plt>
   17728:	ldr	r2, [r5, #4]
   1772c:	ldr	r4, [r5]
   17730:	cmp	r2, #0
   17734:	ldr	r3, [r0]
   17738:	mov	r7, r0
   1773c:	str	r3, [sp, #28]
   17740:	bgt	1779c <__assert_fail@plt+0x62a4>
   17744:	add	r6, r5, #8
   17748:	cmp	r4, r6
   1774c:	str	r2, [sp, #36]	; 0x24
   17750:	beq	1785c <__assert_fail@plt+0x6364>
   17754:	mov	r3, #8
   17758:	mov	r0, r4
   1775c:	str	r3, [sp]
   17760:	rsb	r2, r2, #1
   17764:	mvn	r3, #-2147483648	; 0x80000000
   17768:	add	r1, sp, #36	; 0x24
   1776c:	bl	2a304 <__assert_fail@plt+0x18e0c>
   17770:	mov	r4, r0
   17774:	str	r0, [r5]
   17778:	ldr	r0, [r5, #4]
   1777c:	ldr	r2, [sp, #36]	; 0x24
   17780:	mov	r1, #0
   17784:	sub	r2, r2, r0
   17788:	add	r0, r4, r0, lsl #3
   1778c:	lsl	r2, r2, #3
   17790:	bl	11414 <memset@plt>
   17794:	ldr	r3, [sp, #36]	; 0x24
   17798:	str	r3, [r5, #4]
   1779c:	ldr	r6, [sp, #44]	; 0x2c
   177a0:	ldr	r8, [r4]
   177a4:	ldr	r5, [r4, #4]
   177a8:	ldr	r2, [sp, #80]	; 0x50
   177ac:	ldr	r3, [sp, #40]	; 0x28
   177b0:	ldr	ip, [sp, #84]	; 0x54
   177b4:	orr	r6, r6, #1
   177b8:	add	fp, sp, #48	; 0x30
   177bc:	str	r2, [sp, #12]
   177c0:	str	r3, [sp]
   177c4:	str	r6, [sp, #4]
   177c8:	mov	r1, r8
   177cc:	mov	r0, r5
   177d0:	str	ip, [sp, #16]
   177d4:	str	fp, [sp, #8]
   177d8:	mov	r3, sl
   177dc:	mov	r2, r9
   177e0:	bl	14a94 <__assert_fail@plt+0x359c>
   177e4:	cmp	r8, r0
   177e8:	bhi	17848 <__assert_fail@plt+0x6350>
   177ec:	ldr	r3, [pc, #160]	; 17894 <__assert_fail@plt+0x639c>
   177f0:	add	r8, r0, #1
   177f4:	cmp	r5, r3
   177f8:	str	r8, [r4]
   177fc:	beq	17808 <__assert_fail@plt+0x6310>
   17800:	mov	r0, r5
   17804:	bl	14214 <__assert_fail@plt+0x2d1c>
   17808:	mov	r0, r8
   1780c:	bl	2a0e8 <__assert_fail@plt+0x18bf0>
   17810:	ldr	ip, [sp, #84]	; 0x54
   17814:	ldr	lr, [sp, #40]	; 0x28
   17818:	mov	r3, sl
   1781c:	mov	r2, r9
   17820:	mov	r1, r8
   17824:	str	r0, [r4, #4]
   17828:	ldr	r4, [sp, #80]	; 0x50
   1782c:	str	fp, [sp, #8]
   17830:	str	r6, [sp, #4]
   17834:	str	ip, [sp, #16]
   17838:	str	r4, [sp, #12]
   1783c:	str	lr, [sp]
   17840:	mov	r5, r0
   17844:	bl	14a94 <__assert_fail@plt+0x359c>
   17848:	ldr	r3, [sp, #28]
   1784c:	mov	r0, r5
   17850:	str	r3, [r7]
   17854:	add	sp, sp, #92	; 0x5c
   17858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1785c:	mov	r3, #8
   17860:	str	r3, [sp]
   17864:	add	r1, sp, #36	; 0x24
   17868:	rsb	r2, r2, #1
   1786c:	mvn	r3, #-2147483648	; 0x80000000
   17870:	mov	r0, #0
   17874:	bl	2a304 <__assert_fail@plt+0x18e0c>
   17878:	mov	r4, r0
   1787c:	ldm	r6, {r0, r1}
   17880:	str	r4, [r5]
   17884:	stm	r4, {r0, r1}
   17888:	b	17778 <__assert_fail@plt+0x6280>
   1788c:	andeq	sp, r3, r0, asr #3
   17890:	andeq	sp, r3, r0, asr r1
   17894:	strdeq	sp, [r3], -r0
   17898:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1789c:	sub	sp, sp, #180	; 0xb4
   178a0:	mov	r6, r1
   178a4:	mov	r4, r0
   178a8:	mov	r9, r2
   178ac:	add	r0, sp, #80	; 0x50
   178b0:	mov	r2, #48	; 0x30
   178b4:	mov	r1, #0
   178b8:	bl	11414 <memset@plt>
   178bc:	cmp	r6, #10
   178c0:	beq	17aa0 <__assert_fail@plt+0x65a8>
   178c4:	add	r5, sp, #80	; 0x50
   178c8:	str	r6, [sp, #80]	; 0x50
   178cc:	ldm	r5!, {r0, r1, r2, r3}
   178d0:	add	ip, sp, #128	; 0x80
   178d4:	mov	r7, ip
   178d8:	add	lr, sp, #32
   178dc:	stmia	ip!, {r0, r1, r2, r3}
   178e0:	mov	r8, #67108864	; 0x4000000
   178e4:	ldm	r5!, {r0, r1, r2, r3}
   178e8:	ldr	r6, [pc, #436]	; 17aa4 <__assert_fail@plt+0x65ac>
   178ec:	stmia	ip!, {r0, r1, r2, r3}
   178f0:	ldm	r5, {r0, r1, r2, r3}
   178f4:	stm	ip, {r0, r1, r2, r3}
   178f8:	ldm	r7!, {r0, r1, r2, r3}
   178fc:	stmia	lr!, {r0, r1, r2, r3}
   17900:	ldm	r7!, {r0, r1, r2, r3}
   17904:	str	r8, [sp, #44]	; 0x2c
   17908:	stmia	lr!, {r0, r1, r2, r3}
   1790c:	ldm	ip, {r0, r1, r2, r3}
   17910:	stm	lr, {r0, r1, r2, r3}
   17914:	bl	113f0 <__errno_location@plt>
   17918:	cmn	r4, #-2147483647	; 0x80000001
   1791c:	ldr	r5, [r6]
   17920:	mov	r7, r0
   17924:	movne	r0, #0
   17928:	moveq	r0, #1
   1792c:	ldr	r3, [r7]
   17930:	orrs	r0, r0, r4, lsr #31
   17934:	str	r3, [sp, #24]
   17938:	bne	17aa0 <__assert_fail@plt+0x65a8>
   1793c:	ldr	r2, [r6, #4]
   17940:	cmp	r4, r2
   17944:	blt	179a4 <__assert_fail@plt+0x64ac>
   17948:	add	r8, r6, #8
   1794c:	cmp	r5, r8
   17950:	str	r2, [sp, #80]	; 0x50
   17954:	beq	17a70 <__assert_fail@plt+0x6578>
   17958:	mov	r3, #8
   1795c:	sub	r2, r4, r2
   17960:	mov	r0, r5
   17964:	str	r3, [sp]
   17968:	add	r2, r2, #1
   1796c:	add	r1, sp, #80	; 0x50
   17970:	mvn	r3, #-2147483648	; 0x80000000
   17974:	bl	2a304 <__assert_fail@plt+0x18e0c>
   17978:	mov	r5, r0
   1797c:	str	r0, [r6]
   17980:	ldr	r0, [r6, #4]
   17984:	ldr	r2, [sp, #80]	; 0x50
   17988:	mov	r1, #0
   1798c:	sub	r2, r2, r0
   17990:	add	r0, r5, r0, lsl #3
   17994:	lsl	r2, r2, #3
   17998:	bl	11414 <memset@plt>
   1799c:	ldr	r3, [sp, #80]	; 0x50
   179a0:	str	r3, [r6, #4]
   179a4:	add	fp, r5, r4, lsl #3
   179a8:	ldr	r1, [sp, #36]	; 0x24
   179ac:	ldr	r8, [r5, r4, lsl #3]
   179b0:	ldr	r6, [fp, #4]
   179b4:	ldr	r2, [sp, #72]	; 0x48
   179b8:	ldr	r3, [sp, #32]
   179bc:	ldr	ip, [sp, #76]	; 0x4c
   179c0:	orr	r1, r1, #1
   179c4:	add	sl, sp, #40	; 0x28
   179c8:	str	r1, [sp, #28]
   179cc:	str	r1, [sp, #4]
   179d0:	str	r2, [sp, #12]
   179d4:	str	r3, [sp]
   179d8:	mov	r0, r6
   179dc:	mov	r1, r8
   179e0:	str	ip, [sp, #16]
   179e4:	str	sl, [sp, #8]
   179e8:	mvn	r3, #0
   179ec:	mov	r2, r9
   179f0:	bl	14a94 <__assert_fail@plt+0x359c>
   179f4:	cmp	r8, r0
   179f8:	bhi	17a5c <__assert_fail@plt+0x6564>
   179fc:	ldr	r3, [pc, #164]	; 17aa8 <__assert_fail@plt+0x65b0>
   17a00:	add	r8, r0, #1
   17a04:	cmp	r6, r3
   17a08:	str	r8, [r5, r4, lsl #3]
   17a0c:	beq	17a18 <__assert_fail@plt+0x6520>
   17a10:	mov	r0, r6
   17a14:	bl	14214 <__assert_fail@plt+0x2d1c>
   17a18:	mov	r0, r8
   17a1c:	bl	2a0e8 <__assert_fail@plt+0x18bf0>
   17a20:	ldr	lr, [sp, #76]	; 0x4c
   17a24:	ldr	r3, [sp, #32]
   17a28:	ldr	ip, [sp, #72]	; 0x48
   17a2c:	ldr	r4, [sp, #28]
   17a30:	mov	r2, r9
   17a34:	mov	r1, r8
   17a38:	str	r0, [fp, #4]
   17a3c:	str	r3, [sp]
   17a40:	str	sl, [sp, #8]
   17a44:	str	r4, [sp, #4]
   17a48:	str	lr, [sp, #16]
   17a4c:	str	ip, [sp, #12]
   17a50:	mvn	r3, #0
   17a54:	mov	r6, r0
   17a58:	bl	14a94 <__assert_fail@plt+0x359c>
   17a5c:	ldr	r3, [sp, #24]
   17a60:	mov	r0, r6
   17a64:	str	r3, [r7]
   17a68:	add	sp, sp, #180	; 0xb4
   17a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a70:	mov	r3, #8
   17a74:	sub	r2, r4, r2
   17a78:	add	r1, sp, #80	; 0x50
   17a7c:	str	r3, [sp]
   17a80:	add	r2, r2, #1
   17a84:	mvn	r3, #-2147483648	; 0x80000000
   17a88:	bl	2a304 <__assert_fail@plt+0x18e0c>
   17a8c:	mov	r5, r0
   17a90:	ldm	r8, {r0, r1}
   17a94:	str	r5, [r6]
   17a98:	stm	r5, {r0, r1}
   17a9c:	b	17980 <__assert_fail@plt+0x6488>
   17aa0:	bl	114ec <abort@plt>
   17aa4:	andeq	sp, r3, r0, asr r1
   17aa8:	strdeq	sp, [r3], -r0
   17aac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ab0:	mov	r7, r1
   17ab4:	ldr	lr, [pc, #492]	; 17ca8 <__assert_fail@plt+0x67b0>
   17ab8:	mov	r8, r2
   17abc:	mov	r4, r0
   17ac0:	mov	fp, r3
   17ac4:	ldm	lr!, {r0, r1, r2, r3}
   17ac8:	sub	sp, sp, #100	; 0x64
   17acc:	add	ip, sp, #48	; 0x30
   17ad0:	mov	sl, #10
   17ad4:	stmia	ip!, {r0, r1, r2, r3}
   17ad8:	cmp	r8, #0
   17adc:	cmpne	r7, #0
   17ae0:	ldm	lr!, {r0, r1, r2, r3}
   17ae4:	str	sl, [sp, #48]	; 0x30
   17ae8:	stmia	ip!, {r0, r1, r2, r3}
   17aec:	ldm	lr, {r0, r1, r2, r3}
   17af0:	stm	ip, {r0, r1, r2, r3}
   17af4:	beq	17ca4 <__assert_fail@plt+0x67ac>
   17af8:	str	r7, [sp, #88]	; 0x58
   17afc:	str	r8, [sp, #92]	; 0x5c
   17b00:	bl	113f0 <__errno_location@plt>
   17b04:	ldr	r6, [pc, #416]	; 17cac <__assert_fail@plt+0x67b4>
   17b08:	cmn	r4, #-2147483647	; 0x80000001
   17b0c:	ldr	r5, [r6]
   17b10:	mov	r9, r0
   17b14:	movne	r0, #0
   17b18:	moveq	r0, #1
   17b1c:	ldr	r3, [r9]
   17b20:	orrs	r0, r0, r4, lsr #31
   17b24:	str	r3, [sp, #28]
   17b28:	bne	17ca4 <__assert_fail@plt+0x67ac>
   17b2c:	ldr	r2, [r6, #4]
   17b30:	cmp	r4, r2
   17b34:	movlt	r3, sl
   17b38:	blt	17ba4 <__assert_fail@plt+0x66ac>
   17b3c:	add	r7, r6, #8
   17b40:	cmp	r5, r7
   17b44:	str	r2, [sp, #44]	; 0x2c
   17b48:	beq	17c74 <__assert_fail@plt+0x677c>
   17b4c:	mov	r3, #8
   17b50:	sub	r2, r4, r2
   17b54:	mov	r0, r5
   17b58:	str	r3, [sp]
   17b5c:	add	r2, r2, #1
   17b60:	mvn	r3, #-2147483648	; 0x80000000
   17b64:	add	r1, sp, #44	; 0x2c
   17b68:	bl	2a304 <__assert_fail@plt+0x18e0c>
   17b6c:	mov	r5, r0
   17b70:	str	r0, [r6]
   17b74:	ldr	r0, [r6, #4]
   17b78:	ldr	r2, [sp, #44]	; 0x2c
   17b7c:	mov	r1, #0
   17b80:	sub	r2, r2, r0
   17b84:	add	r0, r5, r0, lsl #3
   17b88:	lsl	r2, r2, #3
   17b8c:	bl	11414 <memset@plt>
   17b90:	ldr	r3, [sp, #48]	; 0x30
   17b94:	ldr	r7, [sp, #88]	; 0x58
   17b98:	ldr	r8, [sp, #92]	; 0x5c
   17b9c:	ldr	r2, [sp, #44]	; 0x2c
   17ba0:	str	r2, [r6, #4]
   17ba4:	add	r2, r5, r4, lsl #3
   17ba8:	mov	r1, r2
   17bac:	str	r2, [sp, #32]
   17bb0:	ldr	r2, [sp, #52]	; 0x34
   17bb4:	ldr	r6, [r1, #4]
   17bb8:	ldr	sl, [r5, r4, lsl #3]
   17bbc:	orr	r2, r2, #1
   17bc0:	str	r3, [sp]
   17bc4:	add	r3, sp, #56	; 0x38
   17bc8:	str	r2, [sp, #36]	; 0x24
   17bcc:	str	r2, [sp, #4]
   17bd0:	str	r3, [sp, #8]
   17bd4:	mov	r0, r6
   17bd8:	str	r8, [sp, #16]
   17bdc:	str	r7, [sp, #12]
   17be0:	mov	r1, sl
   17be4:	mvn	r3, #0
   17be8:	mov	r2, fp
   17bec:	bl	14a94 <__assert_fail@plt+0x359c>
   17bf0:	cmp	sl, r0
   17bf4:	bhi	17c60 <__assert_fail@plt+0x6768>
   17bf8:	ldr	r3, [pc, #176]	; 17cb0 <__assert_fail@plt+0x67b8>
   17bfc:	add	r7, r0, #1
   17c00:	cmp	r6, r3
   17c04:	str	r7, [r5, r4, lsl #3]
   17c08:	beq	17c14 <__assert_fail@plt+0x671c>
   17c0c:	mov	r0, r6
   17c10:	bl	14214 <__assert_fail@plt+0x2d1c>
   17c14:	mov	r0, r7
   17c18:	bl	2a0e8 <__assert_fail@plt+0x18bf0>
   17c1c:	ldr	r3, [sp, #32]
   17c20:	ldr	lr, [sp, #92]	; 0x5c
   17c24:	ldr	ip, [sp, #88]	; 0x58
   17c28:	ldr	r4, [sp, #36]	; 0x24
   17c2c:	mov	r2, fp
   17c30:	mov	r1, r7
   17c34:	str	r0, [r3, #4]
   17c38:	add	r3, sp, #56	; 0x38
   17c3c:	str	r3, [sp, #8]
   17c40:	ldr	r3, [sp, #48]	; 0x30
   17c44:	str	r4, [sp, #4]
   17c48:	str	r3, [sp]
   17c4c:	str	lr, [sp, #16]
   17c50:	str	ip, [sp, #12]
   17c54:	mvn	r3, #0
   17c58:	mov	r6, r0
   17c5c:	bl	14a94 <__assert_fail@plt+0x359c>
   17c60:	ldr	r3, [sp, #28]
   17c64:	mov	r0, r6
   17c68:	str	r3, [r9]
   17c6c:	add	sp, sp, #100	; 0x64
   17c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c74:	mov	r3, #8
   17c78:	sub	r2, r4, r2
   17c7c:	str	r3, [sp]
   17c80:	add	r1, sp, #44	; 0x2c
   17c84:	add	r2, r2, #1
   17c88:	mvn	r3, #-2147483648	; 0x80000000
   17c8c:	bl	2a304 <__assert_fail@plt+0x18e0c>
   17c90:	mov	r5, r0
   17c94:	ldm	r7, {r0, r1}
   17c98:	str	r5, [r6]
   17c9c:	stm	r5, {r0, r1}
   17ca0:	b	17b74 <__assert_fail@plt+0x667c>
   17ca4:	bl	114ec <abort@plt>
   17ca8:	andeq	sp, r3, r0, asr #3
   17cac:	andeq	sp, r3, r0, asr r1
   17cb0:	strdeq	sp, [r3], -r0
   17cb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cb8:	mov	r7, r1
   17cbc:	ldr	lr, [pc, #492]	; 17eb0 <__assert_fail@plt+0x69b8>
   17cc0:	mov	r8, r2
   17cc4:	mov	r4, r0
   17cc8:	mov	fp, r3
   17ccc:	ldm	lr!, {r0, r1, r2, r3}
   17cd0:	sub	sp, sp, #100	; 0x64
   17cd4:	add	ip, sp, #48	; 0x30
   17cd8:	mov	sl, #10
   17cdc:	stmia	ip!, {r0, r1, r2, r3}
   17ce0:	cmp	r8, #0
   17ce4:	cmpne	r7, #0
   17ce8:	ldm	lr!, {r0, r1, r2, r3}
   17cec:	str	sl, [sp, #48]	; 0x30
   17cf0:	stmia	ip!, {r0, r1, r2, r3}
   17cf4:	ldm	lr, {r0, r1, r2, r3}
   17cf8:	stm	ip, {r0, r1, r2, r3}
   17cfc:	beq	17eac <__assert_fail@plt+0x69b4>
   17d00:	str	r7, [sp, #88]	; 0x58
   17d04:	str	r8, [sp, #92]	; 0x5c
   17d08:	bl	113f0 <__errno_location@plt>
   17d0c:	ldr	r6, [pc, #416]	; 17eb4 <__assert_fail@plt+0x69bc>
   17d10:	cmn	r4, #-2147483647	; 0x80000001
   17d14:	ldr	r5, [r6]
   17d18:	mov	r9, r0
   17d1c:	movne	r0, #0
   17d20:	moveq	r0, #1
   17d24:	ldr	r3, [r9]
   17d28:	orrs	r0, r0, r4, lsr #31
   17d2c:	str	r3, [sp, #28]
   17d30:	bne	17eac <__assert_fail@plt+0x69b4>
   17d34:	ldr	r2, [r6, #4]
   17d38:	cmp	r4, r2
   17d3c:	movlt	r3, sl
   17d40:	blt	17dac <__assert_fail@plt+0x68b4>
   17d44:	add	r7, r6, #8
   17d48:	cmp	r5, r7
   17d4c:	str	r2, [sp, #44]	; 0x2c
   17d50:	beq	17e7c <__assert_fail@plt+0x6984>
   17d54:	mov	r3, #8
   17d58:	sub	r2, r4, r2
   17d5c:	mov	r0, r5
   17d60:	str	r3, [sp]
   17d64:	add	r2, r2, #1
   17d68:	mvn	r3, #-2147483648	; 0x80000000
   17d6c:	add	r1, sp, #44	; 0x2c
   17d70:	bl	2a304 <__assert_fail@plt+0x18e0c>
   17d74:	mov	r5, r0
   17d78:	str	r0, [r6]
   17d7c:	ldr	r0, [r6, #4]
   17d80:	ldr	r2, [sp, #44]	; 0x2c
   17d84:	mov	r1, #0
   17d88:	sub	r2, r2, r0
   17d8c:	add	r0, r5, r0, lsl #3
   17d90:	lsl	r2, r2, #3
   17d94:	bl	11414 <memset@plt>
   17d98:	ldr	r3, [sp, #48]	; 0x30
   17d9c:	ldr	r7, [sp, #88]	; 0x58
   17da0:	ldr	r8, [sp, #92]	; 0x5c
   17da4:	ldr	r2, [sp, #44]	; 0x2c
   17da8:	str	r2, [r6, #4]
   17dac:	add	r2, r5, r4, lsl #3
   17db0:	mov	r1, r2
   17db4:	str	r2, [sp, #32]
   17db8:	ldr	r2, [sp, #52]	; 0x34
   17dbc:	ldr	r6, [r1, #4]
   17dc0:	ldr	sl, [r5, r4, lsl #3]
   17dc4:	orr	r2, r2, #1
   17dc8:	str	r3, [sp]
   17dcc:	add	r3, sp, #56	; 0x38
   17dd0:	str	r2, [sp, #36]	; 0x24
   17dd4:	str	r2, [sp, #4]
   17dd8:	str	r3, [sp, #8]
   17ddc:	mov	r0, r6
   17de0:	str	r8, [sp, #16]
   17de4:	str	r7, [sp, #12]
   17de8:	mov	r1, sl
   17dec:	ldr	r3, [sp, #136]	; 0x88
   17df0:	mov	r2, fp
   17df4:	bl	14a94 <__assert_fail@plt+0x359c>
   17df8:	cmp	sl, r0
   17dfc:	bhi	17e68 <__assert_fail@plt+0x6970>
   17e00:	ldr	r3, [pc, #176]	; 17eb8 <__assert_fail@plt+0x69c0>
   17e04:	add	r7, r0, #1
   17e08:	cmp	r6, r3
   17e0c:	str	r7, [r5, r4, lsl #3]
   17e10:	beq	17e1c <__assert_fail@plt+0x6924>
   17e14:	mov	r0, r6
   17e18:	bl	14214 <__assert_fail@plt+0x2d1c>
   17e1c:	mov	r0, r7
   17e20:	bl	2a0e8 <__assert_fail@plt+0x18bf0>
   17e24:	ldr	r3, [sp, #32]
   17e28:	ldr	lr, [sp, #92]	; 0x5c
   17e2c:	ldr	ip, [sp, #88]	; 0x58
   17e30:	ldr	r4, [sp, #36]	; 0x24
   17e34:	mov	r2, fp
   17e38:	mov	r1, r7
   17e3c:	str	r0, [r3, #4]
   17e40:	add	r3, sp, #56	; 0x38
   17e44:	str	r3, [sp, #8]
   17e48:	ldr	r3, [sp, #48]	; 0x30
   17e4c:	str	r4, [sp, #4]
   17e50:	str	r3, [sp]
   17e54:	str	lr, [sp, #16]
   17e58:	str	ip, [sp, #12]
   17e5c:	ldr	r3, [sp, #136]	; 0x88
   17e60:	mov	r6, r0
   17e64:	bl	14a94 <__assert_fail@plt+0x359c>
   17e68:	ldr	r3, [sp, #28]
   17e6c:	mov	r0, r6
   17e70:	str	r3, [r9]
   17e74:	add	sp, sp, #100	; 0x64
   17e78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e7c:	mov	r3, #8
   17e80:	sub	r2, r4, r2
   17e84:	str	r3, [sp]
   17e88:	add	r1, sp, #44	; 0x2c
   17e8c:	add	r2, r2, #1
   17e90:	mvn	r3, #-2147483648	; 0x80000000
   17e94:	bl	2a304 <__assert_fail@plt+0x18e0c>
   17e98:	mov	r5, r0
   17e9c:	ldm	r7, {r0, r1}
   17ea0:	str	r5, [r6]
   17ea4:	stm	r5, {r0, r1}
   17ea8:	b	17d7c <__assert_fail@plt+0x6884>
   17eac:	bl	114ec <abort@plt>
   17eb0:	andeq	sp, r3, r0, asr #3
   17eb4:	andeq	sp, r3, r0, asr r1
   17eb8:	strdeq	sp, [r3], -r0
   17ebc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ec0:	mov	r5, r0
   17ec4:	ldr	lr, [pc, #452]	; 18090 <__assert_fail@plt+0x6b98>
   17ec8:	mov	r6, r1
   17ecc:	mov	sl, r2
   17ed0:	ldm	lr!, {r0, r1, r2, r3}
   17ed4:	sub	sp, sp, #92	; 0x5c
   17ed8:	add	ip, sp, #40	; 0x28
   17edc:	cmp	r6, #0
   17ee0:	cmpne	r5, #0
   17ee4:	stmia	ip!, {r0, r1, r2, r3}
   17ee8:	mov	r9, #10
   17eec:	ldm	lr!, {r0, r1, r2, r3}
   17ef0:	moveq	fp, #1
   17ef4:	movne	fp, #0
   17ef8:	str	r9, [sp, #40]	; 0x28
   17efc:	stmia	ip!, {r0, r1, r2, r3}
   17f00:	ldm	lr, {r0, r1, r2, r3}
   17f04:	stm	ip, {r0, r1, r2, r3}
   17f08:	beq	1808c <__assert_fail@plt+0x6b94>
   17f0c:	str	r5, [sp, #80]	; 0x50
   17f10:	str	r6, [sp, #84]	; 0x54
   17f14:	bl	113f0 <__errno_location@plt>
   17f18:	ldr	r7, [pc, #372]	; 18094 <__assert_fail@plt+0x6b9c>
   17f1c:	ldr	r2, [r7, #4]
   17f20:	ldr	r4, [r7]
   17f24:	cmp	r2, #0
   17f28:	ldr	r3, [r0]
   17f2c:	mov	r8, r0
   17f30:	str	r3, [sp, #24]
   17f34:	movgt	r3, r9
   17f38:	bgt	17fa0 <__assert_fail@plt+0x6aa8>
   17f3c:	add	r5, r7, #8
   17f40:	cmp	r4, r5
   17f44:	str	r2, [sp, #36]	; 0x24
   17f48:	beq	1805c <__assert_fail@plt+0x6b64>
   17f4c:	mov	r3, #8
   17f50:	mov	r0, r4
   17f54:	str	r3, [sp]
   17f58:	rsb	r2, r2, #1
   17f5c:	mvn	r3, #-2147483648	; 0x80000000
   17f60:	add	r1, sp, #36	; 0x24
   17f64:	bl	2a304 <__assert_fail@plt+0x18e0c>
   17f68:	mov	r4, r0
   17f6c:	str	r0, [r7]
   17f70:	ldr	r0, [r7, #4]
   17f74:	ldr	r2, [sp, #36]	; 0x24
   17f78:	mov	r1, #0
   17f7c:	sub	r2, r2, r0
   17f80:	add	r0, r4, r0, lsl #3
   17f84:	lsl	r2, r2, #3
   17f88:	bl	11414 <memset@plt>
   17f8c:	ldr	r3, [sp, #40]	; 0x28
   17f90:	ldr	r5, [sp, #80]	; 0x50
   17f94:	ldr	r6, [sp, #84]	; 0x54
   17f98:	ldr	r2, [sp, #36]	; 0x24
   17f9c:	str	r2, [r7, #4]
   17fa0:	ldr	r2, [sp, #44]	; 0x2c
   17fa4:	ldr	r9, [r4]
   17fa8:	ldr	r7, [r4, #4]
   17fac:	orr	r2, r2, #1
   17fb0:	add	fp, sp, #48	; 0x30
   17fb4:	str	r2, [sp, #28]
   17fb8:	str	r2, [sp, #4]
   17fbc:	str	r3, [sp]
   17fc0:	str	r6, [sp, #16]
   17fc4:	str	r5, [sp, #12]
   17fc8:	mov	r1, r9
   17fcc:	mov	r0, r7
   17fd0:	str	fp, [sp, #8]
   17fd4:	mvn	r3, #0
   17fd8:	mov	r2, sl
   17fdc:	bl	14a94 <__assert_fail@plt+0x359c>
   17fe0:	cmp	r9, r0
   17fe4:	bhi	18048 <__assert_fail@plt+0x6b50>
   17fe8:	ldr	r3, [pc, #168]	; 18098 <__assert_fail@plt+0x6ba0>
   17fec:	add	r5, r0, #1
   17ff0:	cmp	r7, r3
   17ff4:	str	r5, [r4]
   17ff8:	beq	18004 <__assert_fail@plt+0x6b0c>
   17ffc:	mov	r0, r7
   18000:	bl	14214 <__assert_fail@plt+0x2d1c>
   18004:	mov	r0, r5
   18008:	bl	2a0e8 <__assert_fail@plt+0x18bf0>
   1800c:	ldr	lr, [sp, #84]	; 0x54
   18010:	ldr	r3, [sp, #40]	; 0x28
   18014:	ldr	ip, [sp, #80]	; 0x50
   18018:	mov	r2, sl
   1801c:	mov	r1, r5
   18020:	str	r0, [r4, #4]
   18024:	ldr	r4, [sp, #28]
   18028:	str	r3, [sp]
   1802c:	str	fp, [sp, #8]
   18030:	str	r4, [sp, #4]
   18034:	str	lr, [sp, #16]
   18038:	str	ip, [sp, #12]
   1803c:	mvn	r3, #0
   18040:	mov	r7, r0
   18044:	bl	14a94 <__assert_fail@plt+0x359c>
   18048:	ldr	r3, [sp, #24]
   1804c:	mov	r0, r7
   18050:	str	r3, [r8]
   18054:	add	sp, sp, #92	; 0x5c
   18058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1805c:	mov	r3, #8
   18060:	str	r3, [sp]
   18064:	add	r1, sp, #36	; 0x24
   18068:	rsb	r2, r2, #1
   1806c:	mov	r0, fp
   18070:	mvn	r3, #-2147483648	; 0x80000000
   18074:	bl	2a304 <__assert_fail@plt+0x18e0c>
   18078:	mov	r4, r0
   1807c:	ldm	r5, {r0, r1}
   18080:	str	r4, [r7]
   18084:	stm	r4, {r0, r1}
   18088:	b	17f70 <__assert_fail@plt+0x6a78>
   1808c:	bl	114ec <abort@plt>
   18090:	andeq	sp, r3, r0, asr #3
   18094:	andeq	sp, r3, r0, asr r1
   18098:	strdeq	sp, [r3], -r0
   1809c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180a0:	mov	r5, r0
   180a4:	ldr	lr, [pc, #464]	; 1827c <__assert_fail@plt+0x6d84>
   180a8:	mov	r6, r1
   180ac:	mov	sl, r2
   180b0:	mov	fp, r3
   180b4:	ldm	lr!, {r0, r1, r2, r3}
   180b8:	sub	sp, sp, #92	; 0x5c
   180bc:	add	ip, sp, #40	; 0x28
   180c0:	cmp	r6, #0
   180c4:	cmpne	r5, #0
   180c8:	stmia	ip!, {r0, r1, r2, r3}
   180cc:	moveq	r4, #1
   180d0:	ldm	lr!, {r0, r1, r2, r3}
   180d4:	movne	r4, #0
   180d8:	mov	r9, #10
   180dc:	str	r4, [sp, #28]
   180e0:	stmia	ip!, {r0, r1, r2, r3}
   180e4:	ldm	lr, {r0, r1, r2, r3}
   180e8:	str	r9, [sp, #40]	; 0x28
   180ec:	stm	ip, {r0, r1, r2, r3}
   180f0:	beq	18278 <__assert_fail@plt+0x6d80>
   180f4:	str	r5, [sp, #80]	; 0x50
   180f8:	str	r6, [sp, #84]	; 0x54
   180fc:	bl	113f0 <__errno_location@plt>
   18100:	ldr	r7, [pc, #376]	; 18280 <__assert_fail@plt+0x6d88>
   18104:	ldr	r2, [r7, #4]
   18108:	ldr	r4, [r7]
   1810c:	cmp	r2, #0
   18110:	ldr	r3, [r0]
   18114:	mov	r8, r0
   18118:	str	r3, [sp, #24]
   1811c:	movgt	r3, r9
   18120:	bgt	18188 <__assert_fail@plt+0x6c90>
   18124:	add	r5, r7, #8
   18128:	cmp	r4, r5
   1812c:	str	r2, [sp, #36]	; 0x24
   18130:	beq	18248 <__assert_fail@plt+0x6d50>
   18134:	mov	r3, #8
   18138:	mov	r0, r4
   1813c:	str	r3, [sp]
   18140:	rsb	r2, r2, #1
   18144:	mvn	r3, #-2147483648	; 0x80000000
   18148:	add	r1, sp, #36	; 0x24
   1814c:	bl	2a304 <__assert_fail@plt+0x18e0c>
   18150:	mov	r4, r0
   18154:	str	r0, [r7]
   18158:	ldr	r0, [r7, #4]
   1815c:	ldr	r2, [sp, #36]	; 0x24
   18160:	mov	r1, #0
   18164:	sub	r2, r2, r0
   18168:	add	r0, r4, r0, lsl #3
   1816c:	lsl	r2, r2, #3
   18170:	bl	11414 <memset@plt>
   18174:	ldr	r3, [sp, #40]	; 0x28
   18178:	ldr	r5, [sp, #80]	; 0x50
   1817c:	ldr	r6, [sp, #84]	; 0x54
   18180:	ldr	r2, [sp, #36]	; 0x24
   18184:	str	r2, [r7, #4]
   18188:	ldr	r2, [sp, #44]	; 0x2c
   1818c:	ldr	r9, [r4]
   18190:	ldr	r7, [r4, #4]
   18194:	orr	r2, r2, #1
   18198:	str	r3, [sp]
   1819c:	add	r3, sp, #48	; 0x30
   181a0:	str	r2, [sp, #28]
   181a4:	str	r2, [sp, #4]
   181a8:	str	r3, [sp, #8]
   181ac:	str	r6, [sp, #16]
   181b0:	str	r5, [sp, #12]
   181b4:	mov	r1, r9
   181b8:	mov	r0, r7
   181bc:	mov	r3, fp
   181c0:	mov	r2, sl
   181c4:	bl	14a94 <__assert_fail@plt+0x359c>
   181c8:	cmp	r9, r0
   181cc:	bhi	18234 <__assert_fail@plt+0x6d3c>
   181d0:	ldr	r3, [pc, #172]	; 18284 <__assert_fail@plt+0x6d8c>
   181d4:	add	r5, r0, #1
   181d8:	cmp	r7, r3
   181dc:	str	r5, [r4]
   181e0:	beq	181ec <__assert_fail@plt+0x6cf4>
   181e4:	mov	r0, r7
   181e8:	bl	14214 <__assert_fail@plt+0x2d1c>
   181ec:	mov	r0, r5
   181f0:	bl	2a0e8 <__assert_fail@plt+0x18bf0>
   181f4:	add	lr, sp, #48	; 0x30
   181f8:	ldr	ip, [sp, #84]	; 0x54
   181fc:	mov	r1, r5
   18200:	ldr	r5, [sp, #28]
   18204:	mov	r3, fp
   18208:	mov	r2, sl
   1820c:	str	r0, [r4, #4]
   18210:	ldr	r4, [sp, #80]	; 0x50
   18214:	str	lr, [sp, #8]
   18218:	ldr	lr, [sp, #40]	; 0x28
   1821c:	str	r5, [sp, #4]
   18220:	str	ip, [sp, #16]
   18224:	str	r4, [sp, #12]
   18228:	str	lr, [sp]
   1822c:	mov	r7, r0
   18230:	bl	14a94 <__assert_fail@plt+0x359c>
   18234:	ldr	r3, [sp, #24]
   18238:	mov	r0, r7
   1823c:	str	r3, [r8]
   18240:	add	sp, sp, #92	; 0x5c
   18244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18248:	mov	r3, #8
   1824c:	str	r3, [sp]
   18250:	add	r1, sp, #36	; 0x24
   18254:	rsb	r2, r2, #1
   18258:	ldr	r0, [sp, #28]
   1825c:	mvn	r3, #-2147483648	; 0x80000000
   18260:	bl	2a304 <__assert_fail@plt+0x18e0c>
   18264:	mov	r4, r0
   18268:	ldm	r5, {r0, r1}
   1826c:	str	r4, [r7]
   18270:	stm	r4, {r0, r1}
   18274:	b	18158 <__assert_fail@plt+0x6c60>
   18278:	bl	114ec <abort@plt>
   1827c:	andeq	sp, r3, r0, asr #3
   18280:	andeq	sp, r3, r0, asr r1
   18284:	strdeq	sp, [r3], -r0
   18288:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1828c:	sub	sp, sp, #52	; 0x34
   18290:	mov	r5, r0
   18294:	mov	sl, r1
   18298:	mov	fp, r2
   1829c:	bl	113f0 <__errno_location@plt>
   182a0:	ldr	r4, [pc, #404]	; 1843c <__assert_fail@plt+0x6f44>
   182a4:	cmn	r5, #-2147483647	; 0x80000001
   182a8:	ldr	r6, [r4]
   182ac:	mov	r8, r0
   182b0:	movne	r0, #0
   182b4:	moveq	r0, #1
   182b8:	ldr	r3, [r8]
   182bc:	orrs	r0, r0, r5, lsr #31
   182c0:	str	r3, [sp, #28]
   182c4:	bne	18438 <__assert_fail@plt+0x6f40>
   182c8:	ldr	r2, [r4, #4]
   182cc:	cmp	r5, r2
   182d0:	blt	18330 <__assert_fail@plt+0x6e38>
   182d4:	add	r7, r4, #8
   182d8:	cmp	r6, r7
   182dc:	str	r2, [sp, #44]	; 0x2c
   182e0:	beq	18408 <__assert_fail@plt+0x6f10>
   182e4:	mov	r3, #8
   182e8:	sub	r2, r5, r2
   182ec:	mov	r0, r6
   182f0:	str	r3, [sp]
   182f4:	add	r2, r2, #1
   182f8:	mvn	r3, #-2147483648	; 0x80000000
   182fc:	add	r1, sp, #44	; 0x2c
   18300:	bl	2a304 <__assert_fail@plt+0x18e0c>
   18304:	mov	r6, r0
   18308:	str	r0, [r4]
   1830c:	ldr	r0, [r4, #4]
   18310:	ldr	r2, [sp, #44]	; 0x2c
   18314:	mov	r1, #0
   18318:	sub	r2, r2, r0
   1831c:	add	r0, r6, r0, lsl #3
   18320:	lsl	r2, r2, #3
   18324:	bl	11414 <memset@plt>
   18328:	ldr	r3, [sp, #44]	; 0x2c
   1832c:	str	r3, [r4, #4]
   18330:	ldr	r2, [r4, #56]	; 0x38
   18334:	add	r3, r6, r5, lsl #3
   18338:	ldr	r1, [r4, #20]
   1833c:	ldr	r7, [r3, #4]
   18340:	ldr	r9, [r6, r5, lsl #3]
   18344:	ldr	ip, [r4, #60]	; 0x3c
   18348:	str	r3, [sp, #32]
   1834c:	ldr	r3, [r4, #16]
   18350:	str	r2, [sp, #12]
   18354:	ldr	r2, [pc, #228]	; 18440 <__assert_fail@plt+0x6f48>
   18358:	orr	r1, r1, #1
   1835c:	str	r1, [sp, #36]	; 0x24
   18360:	str	r1, [sp, #4]
   18364:	str	r2, [sp, #8]
   18368:	str	r3, [sp]
   1836c:	mov	r0, r7
   18370:	mov	r1, r9
   18374:	str	ip, [sp, #16]
   18378:	mov	r3, fp
   1837c:	mov	r2, sl
   18380:	bl	14a94 <__assert_fail@plt+0x359c>
   18384:	cmp	r9, r0
   18388:	bhi	183f4 <__assert_fail@plt+0x6efc>
   1838c:	ldr	r3, [pc, #176]	; 18444 <__assert_fail@plt+0x6f4c>
   18390:	add	r9, r0, #1
   18394:	cmp	r7, r3
   18398:	str	r9, [r6, r5, lsl #3]
   1839c:	beq	183a8 <__assert_fail@plt+0x6eb0>
   183a0:	mov	r0, r7
   183a4:	bl	14214 <__assert_fail@plt+0x2d1c>
   183a8:	mov	r0, r9
   183ac:	bl	2a0e8 <__assert_fail@plt+0x18bf0>
   183b0:	ldr	ip, [sp, #32]
   183b4:	ldr	lr, [r4, #60]	; 0x3c
   183b8:	ldr	r5, [r4, #56]	; 0x38
   183bc:	mov	r3, fp
   183c0:	mov	r2, sl
   183c4:	mov	r1, r9
   183c8:	str	r0, [ip, #4]
   183cc:	ldr	ip, [r4, #16]
   183d0:	ldr	r4, [pc, #104]	; 18440 <__assert_fail@plt+0x6f48>
   183d4:	str	lr, [sp, #16]
   183d8:	str	r4, [sp, #8]
   183dc:	ldr	r4, [sp, #36]	; 0x24
   183e0:	str	r5, [sp, #12]
   183e4:	str	r4, [sp, #4]
   183e8:	str	ip, [sp]
   183ec:	mov	r7, r0
   183f0:	bl	14a94 <__assert_fail@plt+0x359c>
   183f4:	ldr	r3, [sp, #28]
   183f8:	mov	r0, r7
   183fc:	str	r3, [r8]
   18400:	add	sp, sp, #52	; 0x34
   18404:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18408:	mov	r3, #8
   1840c:	sub	r2, r5, r2
   18410:	str	r3, [sp]
   18414:	add	r1, sp, #44	; 0x2c
   18418:	add	r2, r2, #1
   1841c:	mvn	r3, #-2147483648	; 0x80000000
   18420:	bl	2a304 <__assert_fail@plt+0x18e0c>
   18424:	mov	r6, r0
   18428:	ldm	r7, {r0, r1}
   1842c:	str	r6, [r4]
   18430:	stm	r6, {r0, r1}
   18434:	b	1830c <__assert_fail@plt+0x6e14>
   18438:	bl	114ec <abort@plt>
   1843c:	andeq	sp, r3, r0, asr r1
   18440:	andeq	sp, r3, r8, ror #2
   18444:	strdeq	sp, [r3], -r0
   18448:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1844c:	sub	sp, sp, #44	; 0x2c
   18450:	mov	r9, r0
   18454:	mov	sl, r1
   18458:	bl	113f0 <__errno_location@plt>
   1845c:	ldr	r4, [pc, #360]	; 185cc <__assert_fail@plt+0x70d4>
   18460:	ldr	r2, [r4, #4]
   18464:	ldr	r5, [r4]
   18468:	cmp	r2, #0
   1846c:	ldr	r3, [r0]
   18470:	mov	r7, r0
   18474:	str	r3, [sp, #24]
   18478:	bgt	184d4 <__assert_fail@plt+0x6fdc>
   1847c:	add	r6, r4, #8
   18480:	cmp	r5, r6
   18484:	str	r2, [sp, #36]	; 0x24
   18488:	beq	1859c <__assert_fail@plt+0x70a4>
   1848c:	mov	r3, #8
   18490:	mov	r0, r5
   18494:	str	r3, [sp]
   18498:	rsb	r2, r2, #1
   1849c:	mvn	r3, #-2147483648	; 0x80000000
   184a0:	add	r1, sp, #36	; 0x24
   184a4:	bl	2a304 <__assert_fail@plt+0x18e0c>
   184a8:	mov	r5, r0
   184ac:	str	r0, [r4]
   184b0:	ldr	r0, [r4, #4]
   184b4:	ldr	r2, [sp, #36]	; 0x24
   184b8:	mov	r1, #0
   184bc:	sub	r2, r2, r0
   184c0:	add	r0, r5, r0, lsl #3
   184c4:	lsl	r2, r2, #3
   184c8:	bl	11414 <memset@plt>
   184cc:	ldr	r3, [sp, #36]	; 0x24
   184d0:	str	r3, [r4, #4]
   184d4:	ldr	r1, [r4, #20]
   184d8:	ldr	r8, [r5]
   184dc:	ldr	r6, [r5, #4]
   184e0:	ldr	r2, [r4, #56]	; 0x38
   184e4:	ldr	r3, [r4, #16]
   184e8:	ldr	ip, [r4, #60]	; 0x3c
   184ec:	ldr	fp, [pc, #220]	; 185d0 <__assert_fail@plt+0x70d8>
   184f0:	orr	r1, r1, #1
   184f4:	str	r1, [sp, #28]
   184f8:	str	r1, [sp, #4]
   184fc:	str	r2, [sp, #12]
   18500:	str	r3, [sp]
   18504:	mov	r1, r8
   18508:	mov	r0, r6
   1850c:	str	ip, [sp, #16]
   18510:	str	fp, [sp, #8]
   18514:	mov	r3, sl
   18518:	mov	r2, r9
   1851c:	bl	14a94 <__assert_fail@plt+0x359c>
   18520:	cmp	r8, r0
   18524:	bhi	18588 <__assert_fail@plt+0x7090>
   18528:	ldr	r3, [pc, #164]	; 185d4 <__assert_fail@plt+0x70dc>
   1852c:	add	r8, r0, #1
   18530:	cmp	r6, r3
   18534:	str	r8, [r5]
   18538:	beq	18544 <__assert_fail@plt+0x704c>
   1853c:	mov	r0, r6
   18540:	bl	14214 <__assert_fail@plt+0x2d1c>
   18544:	mov	r0, r8
   18548:	bl	2a0e8 <__assert_fail@plt+0x18bf0>
   1854c:	ldr	lr, [r4, #60]	; 0x3c
   18550:	ldr	ip, [r4, #16]
   18554:	mov	r3, sl
   18558:	mov	r2, r9
   1855c:	mov	r1, r8
   18560:	str	r0, [r5, #4]
   18564:	ldr	r5, [r4, #56]	; 0x38
   18568:	ldr	r4, [sp, #28]
   1856c:	str	fp, [sp, #8]
   18570:	str	r4, [sp, #4]
   18574:	str	lr, [sp, #16]
   18578:	str	r5, [sp, #12]
   1857c:	str	ip, [sp]
   18580:	mov	r6, r0
   18584:	bl	14a94 <__assert_fail@plt+0x359c>
   18588:	ldr	r3, [sp, #24]
   1858c:	mov	r0, r6
   18590:	str	r3, [r7]
   18594:	add	sp, sp, #44	; 0x2c
   18598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1859c:	mov	r3, #8
   185a0:	str	r3, [sp]
   185a4:	add	r1, sp, #36	; 0x24
   185a8:	rsb	r2, r2, #1
   185ac:	mvn	r3, #-2147483648	; 0x80000000
   185b0:	mov	r0, #0
   185b4:	bl	2a304 <__assert_fail@plt+0x18e0c>
   185b8:	mov	r5, r0
   185bc:	ldm	r6, {r0, r1}
   185c0:	str	r5, [r4]
   185c4:	stm	r5, {r0, r1}
   185c8:	b	184b0 <__assert_fail@plt+0x6fb8>
   185cc:	andeq	sp, r3, r0, asr r1
   185d0:	andeq	sp, r3, r8, ror #2
   185d4:	strdeq	sp, [r3], -r0
   185d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185dc:	sub	sp, sp, #44	; 0x2c
   185e0:	mov	r5, r0
   185e4:	mov	sl, r1
   185e8:	bl	113f0 <__errno_location@plt>
   185ec:	ldr	r4, [pc, #396]	; 18780 <__assert_fail@plt+0x7288>
   185f0:	cmn	r5, #-2147483647	; 0x80000001
   185f4:	ldr	r6, [r4]
   185f8:	mov	r8, r0
   185fc:	movne	r0, #0
   18600:	moveq	r0, #1
   18604:	ldr	r3, [r8]
   18608:	orrs	r0, r0, r5, lsr #31
   1860c:	str	r3, [sp, #24]
   18610:	bne	1877c <__assert_fail@plt+0x7284>
   18614:	ldr	r2, [r4, #4]
   18618:	cmp	r5, r2
   1861c:	blt	1867c <__assert_fail@plt+0x7184>
   18620:	add	r7, r4, #8
   18624:	cmp	r6, r7
   18628:	str	r2, [sp, #36]	; 0x24
   1862c:	beq	1874c <__assert_fail@plt+0x7254>
   18630:	mov	r3, #8
   18634:	sub	r2, r5, r2
   18638:	mov	r0, r6
   1863c:	str	r3, [sp]
   18640:	add	r2, r2, #1
   18644:	mvn	r3, #-2147483648	; 0x80000000
   18648:	add	r1, sp, #36	; 0x24
   1864c:	bl	2a304 <__assert_fail@plt+0x18e0c>
   18650:	mov	r6, r0
   18654:	str	r0, [r4]
   18658:	ldr	r0, [r4, #4]
   1865c:	ldr	r2, [sp, #36]	; 0x24
   18660:	mov	r1, #0
   18664:	sub	r2, r2, r0
   18668:	add	r0, r6, r0, lsl #3
   1866c:	lsl	r2, r2, #3
   18670:	bl	11414 <memset@plt>
   18674:	ldr	r3, [sp, #36]	; 0x24
   18678:	str	r3, [r4, #4]
   1867c:	ldr	r2, [r4, #56]	; 0x38
   18680:	add	fp, r6, r5, lsl #3
   18684:	ldr	r1, [r4, #20]
   18688:	ldr	r9, [r6, r5, lsl #3]
   1868c:	ldr	r7, [fp, #4]
   18690:	ldr	r3, [r4, #16]
   18694:	ldr	ip, [r4, #60]	; 0x3c
   18698:	str	r2, [sp, #12]
   1869c:	ldr	r2, [pc, #224]	; 18784 <__assert_fail@plt+0x728c>
   186a0:	orr	r1, r1, #1
   186a4:	str	r1, [sp, #28]
   186a8:	str	r1, [sp, #4]
   186ac:	str	r2, [sp, #8]
   186b0:	str	r3, [sp]
   186b4:	mov	r0, r7
   186b8:	mov	r1, r9
   186bc:	str	ip, [sp, #16]
   186c0:	mvn	r3, #0
   186c4:	mov	r2, sl
   186c8:	bl	14a94 <__assert_fail@plt+0x359c>
   186cc:	cmp	r9, r0
   186d0:	bhi	18738 <__assert_fail@plt+0x7240>
   186d4:	ldr	r3, [pc, #172]	; 18788 <__assert_fail@plt+0x7290>
   186d8:	add	r9, r0, #1
   186dc:	cmp	r7, r3
   186e0:	str	r9, [r6, r5, lsl #3]
   186e4:	beq	186f0 <__assert_fail@plt+0x71f8>
   186e8:	mov	r0, r7
   186ec:	bl	14214 <__assert_fail@plt+0x2d1c>
   186f0:	mov	r0, r9
   186f4:	bl	2a0e8 <__assert_fail@plt+0x18bf0>
   186f8:	ldr	ip, [r4, #60]	; 0x3c
   186fc:	ldr	r3, [r4, #16]
   18700:	ldr	lr, [r4, #56]	; 0x38
   18704:	ldr	r4, [pc, #120]	; 18784 <__assert_fail@plt+0x728c>
   18708:	mov	r2, sl
   1870c:	mov	r1, r9
   18710:	str	r0, [fp, #4]
   18714:	str	r4, [sp, #8]
   18718:	ldr	r4, [sp, #28]
   1871c:	str	r3, [sp]
   18720:	str	r4, [sp, #4]
   18724:	str	ip, [sp, #16]
   18728:	str	lr, [sp, #12]
   1872c:	mvn	r3, #0
   18730:	mov	r7, r0
   18734:	bl	14a94 <__assert_fail@plt+0x359c>
   18738:	ldr	r3, [sp, #24]
   1873c:	mov	r0, r7
   18740:	str	r3, [r8]
   18744:	add	sp, sp, #44	; 0x2c
   18748:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1874c:	mov	r3, #8
   18750:	sub	r2, r5, r2
   18754:	str	r3, [sp]
   18758:	add	r1, sp, #36	; 0x24
   1875c:	add	r2, r2, #1
   18760:	mvn	r3, #-2147483648	; 0x80000000
   18764:	bl	2a304 <__assert_fail@plt+0x18e0c>
   18768:	mov	r6, r0
   1876c:	ldm	r7, {r0, r1}
   18770:	str	r6, [r4]
   18774:	stm	r6, {r0, r1}
   18778:	b	18658 <__assert_fail@plt+0x7160>
   1877c:	bl	114ec <abort@plt>
   18780:	andeq	sp, r3, r0, asr r1
   18784:	andeq	sp, r3, r8, ror #2
   18788:	strdeq	sp, [r3], -r0
   1878c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18790:	sub	sp, sp, #44	; 0x2c
   18794:	mov	sl, r0
   18798:	bl	113f0 <__errno_location@plt>
   1879c:	ldr	r4, [pc, #348]	; 18900 <__assert_fail@plt+0x7408>
   187a0:	ldr	r2, [r4, #4]
   187a4:	ldr	r5, [r4]
   187a8:	cmp	r2, #0
   187ac:	ldr	r3, [r0]
   187b0:	mov	r8, r0
   187b4:	str	r3, [sp, #28]
   187b8:	bgt	18814 <__assert_fail@plt+0x731c>
   187bc:	add	r6, r4, #8
   187c0:	cmp	r5, r6
   187c4:	str	r2, [sp, #36]	; 0x24
   187c8:	beq	188d0 <__assert_fail@plt+0x73d8>
   187cc:	mov	r3, #8
   187d0:	mov	r0, r5
   187d4:	str	r3, [sp]
   187d8:	rsb	r2, r2, #1
   187dc:	mvn	r3, #-2147483648	; 0x80000000
   187e0:	add	r1, sp, #36	; 0x24
   187e4:	bl	2a304 <__assert_fail@plt+0x18e0c>
   187e8:	mov	r5, r0
   187ec:	str	r0, [r4]
   187f0:	ldr	r0, [r4, #4]
   187f4:	ldr	r2, [sp, #36]	; 0x24
   187f8:	mov	r1, #0
   187fc:	sub	r2, r2, r0
   18800:	add	r0, r5, r0, lsl #3
   18804:	lsl	r2, r2, #3
   18808:	bl	11414 <memset@plt>
   1880c:	ldr	r3, [sp, #36]	; 0x24
   18810:	str	r3, [r4, #4]
   18814:	ldr	r7, [r4, #20]
   18818:	ldr	r9, [r5]
   1881c:	ldr	r6, [r5, #4]
   18820:	ldr	r2, [r4, #56]	; 0x38
   18824:	ldr	r3, [r4, #16]
   18828:	ldr	ip, [r4, #60]	; 0x3c
   1882c:	ldr	fp, [pc, #208]	; 18904 <__assert_fail@plt+0x740c>
   18830:	orr	r7, r7, #1
   18834:	str	r2, [sp, #12]
   18838:	str	r3, [sp]
   1883c:	str	r7, [sp, #4]
   18840:	mov	r1, r9
   18844:	mov	r0, r6
   18848:	str	ip, [sp, #16]
   1884c:	str	fp, [sp, #8]
   18850:	mvn	r3, #0
   18854:	mov	r2, sl
   18858:	bl	14a94 <__assert_fail@plt+0x359c>
   1885c:	cmp	r9, r0
   18860:	bhi	188bc <__assert_fail@plt+0x73c4>
   18864:	ldr	r3, [pc, #156]	; 18908 <__assert_fail@plt+0x7410>
   18868:	add	r9, r0, #1
   1886c:	cmp	r6, r3
   18870:	str	r9, [r5]
   18874:	beq	18880 <__assert_fail@plt+0x7388>
   18878:	mov	r0, r6
   1887c:	bl	14214 <__assert_fail@plt+0x2d1c>
   18880:	mov	r0, r9
   18884:	bl	2a0e8 <__assert_fail@plt+0x18bf0>
   18888:	ldr	ip, [r4, #60]	; 0x3c
   1888c:	ldr	r3, [r4, #16]
   18890:	ldr	lr, [r4, #56]	; 0x38
   18894:	mov	r2, sl
   18898:	mov	r1, r9
   1889c:	str	r0, [r5, #4]
   188a0:	str	r3, [sp]
   188a4:	stmib	sp, {r7, fp}
   188a8:	str	ip, [sp, #16]
   188ac:	str	lr, [sp, #12]
   188b0:	mvn	r3, #0
   188b4:	mov	r6, r0
   188b8:	bl	14a94 <__assert_fail@plt+0x359c>
   188bc:	ldr	r3, [sp, #28]
   188c0:	mov	r0, r6
   188c4:	str	r3, [r8]
   188c8:	add	sp, sp, #44	; 0x2c
   188cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188d0:	mov	r3, #8
   188d4:	str	r3, [sp]
   188d8:	add	r1, sp, #36	; 0x24
   188dc:	rsb	r2, r2, #1
   188e0:	mvn	r3, #-2147483648	; 0x80000000
   188e4:	mov	r0, #0
   188e8:	bl	2a304 <__assert_fail@plt+0x18e0c>
   188ec:	mov	r5, r0
   188f0:	ldm	r6, {r0, r1}
   188f4:	str	r5, [r4]
   188f8:	stm	r5, {r0, r1}
   188fc:	b	187f0 <__assert_fail@plt+0x72f8>
   18900:	andeq	sp, r3, r0, asr r1
   18904:	andeq	sp, r3, r8, ror #2
   18908:	strdeq	sp, [r3], -r0
   1890c:	mov	ip, r0
   18910:	ldr	r3, [r1, #40]	; 0x28
   18914:	ldr	r0, [r1, #56]	; 0x38
   18918:	cmp	r0, r3
   1891c:	ble	18990 <__assert_fail@plt+0x7498>
   18920:	push	{r4, lr}
   18924:	ldr	lr, [r1, #4]
   18928:	ldrb	r0, [lr, r3]
   1892c:	strb	r0, [ip]
   18930:	ldr	r4, [r1, #80]	; 0x50
   18934:	cmp	r4, #1
   18938:	ble	18958 <__assert_fail@plt+0x7460>
   1893c:	ldr	r4, [r1, #28]
   18940:	cmp	r3, r4
   18944:	beq	18958 <__assert_fail@plt+0x7460>
   18948:	ldr	r4, [r1, #8]
   1894c:	ldr	r4, [r4, r3, lsl #2]
   18950:	cmn	r4, #1
   18954:	beq	189d8 <__assert_fail@plt+0x74e0>
   18958:	cmp	r0, #92	; 0x5c
   1895c:	beq	189a0 <__assert_fail@plt+0x74a8>
   18960:	cmp	r0, #91	; 0x5b
   18964:	beq	189e4 <__assert_fail@plt+0x74ec>
   18968:	cmp	r0, #93	; 0x5d
   1896c:	beq	189c8 <__assert_fail@plt+0x74d0>
   18970:	cmp	r0, #94	; 0x5e
   18974:	beq	18a08 <__assert_fail@plt+0x7510>
   18978:	cmp	r0, #45	; 0x2d
   1897c:	bne	189b8 <__assert_fail@plt+0x74c0>
   18980:	mov	r3, #22
   18984:	strb	r3, [ip, #4]
   18988:	mov	r0, #1
   1898c:	pop	{r4, pc}
   18990:	mov	r3, #2
   18994:	strb	r3, [ip, #4]
   18998:	mov	r0, #0
   1899c:	bx	lr
   189a0:	tst	r2, #1
   189a4:	beq	189b8 <__assert_fail@plt+0x74c0>
   189a8:	ldr	r2, [r1, #48]	; 0x30
   189ac:	add	r3, r3, #1
   189b0:	cmp	r3, r2
   189b4:	blt	18a4c <__assert_fail@plt+0x7554>
   189b8:	mov	r3, #1
   189bc:	mov	r0, r3
   189c0:	strb	r3, [ip, #4]
   189c4:	pop	{r4, pc}
   189c8:	mov	r3, #21
   189cc:	strb	r3, [ip, #4]
   189d0:	mov	r0, #1
   189d4:	pop	{r4, pc}
   189d8:	mov	r0, #1
   189dc:	strb	r0, [ip, #4]
   189e0:	pop	{r4, pc}
   189e4:	ldr	r1, [r1, #48]	; 0x30
   189e8:	add	r0, r3, #1
   189ec:	cmp	r0, r1
   189f0:	blt	18a18 <__assert_fail@plt+0x7520>
   189f4:	mov	r0, #1
   189f8:	mov	r3, #91	; 0x5b
   189fc:	strb	r0, [ip, #4]
   18a00:	strb	r3, [ip]
   18a04:	pop	{r4, pc}
   18a08:	mov	r3, #25
   18a0c:	strb	r3, [ip, #4]
   18a10:	mov	r0, #1
   18a14:	pop	{r4, pc}
   18a18:	add	r3, lr, r3
   18a1c:	ldrb	r3, [r3, #1]
   18a20:	cmp	r3, #58	; 0x3a
   18a24:	strb	r3, [ip]
   18a28:	beq	18a64 <__assert_fail@plt+0x756c>
   18a2c:	cmp	r3, #61	; 0x3d
   18a30:	beq	18a7c <__assert_fail@plt+0x7584>
   18a34:	cmp	r3, #46	; 0x2e
   18a38:	bne	189f4 <__assert_fail@plt+0x74fc>
   18a3c:	mov	r3, #26
   18a40:	strb	r3, [ip, #4]
   18a44:	mov	r0, #2
   18a48:	pop	{r4, pc}
   18a4c:	str	r3, [r1, #40]	; 0x28
   18a50:	ldrb	r3, [lr, r3]
   18a54:	mov	r0, #1
   18a58:	strb	r0, [ip, #4]
   18a5c:	strb	r3, [ip]
   18a60:	pop	{r4, pc}
   18a64:	tst	r2, #4
   18a68:	beq	189f4 <__assert_fail@plt+0x74fc>
   18a6c:	mov	r3, #30
   18a70:	strb	r3, [ip, #4]
   18a74:	mov	r0, #2
   18a78:	pop	{r4, pc}
   18a7c:	mov	r3, #28
   18a80:	strb	r3, [ip, #4]
   18a84:	mov	r0, #2
   18a88:	pop	{r4, pc}
   18a8c:	ldr	r3, [r1, #8]
   18a90:	push	{r4, r5, r6, r7, r8, lr}
   18a94:	mov	r4, #0
   18a98:	str	r2, [r1]
   18a9c:	mov	r8, r0
   18aa0:	str	r3, [r1, #16]
   18aa4:	lsl	r0, r3, #2
   18aa8:	str	r4, [r1, #20]
   18aac:	mov	r5, r1
   18ab0:	mov	r7, r2
   18ab4:	bl	2a790 <__assert_fail@plt+0x19298>
   18ab8:	cmp	r0, r4
   18abc:	str	r0, [r5, #24]
   18ac0:	beq	18b94 <__assert_fail@plt+0x769c>
   18ac4:	ldr	r1, [r5, #8]
   18ac8:	cmp	r1, #0
   18acc:	bgt	18ae0 <__assert_fail@plt+0x75e8>
   18ad0:	b	18b2c <__assert_fail@plt+0x7634>
   18ad4:	add	r4, r4, #1
   18ad8:	cmp	r4, r1
   18adc:	bge	18b2c <__assert_fail@plt+0x7634>
   18ae0:	ldr	r2, [r5, #12]
   18ae4:	ldr	r3, [r8]
   18ae8:	ldr	r6, [r2, r4, lsl #2]
   18aec:	add	r3, r3, r6, lsl #3
   18af0:	ldrb	r3, [r3, #4]
   18af4:	tst	r3, #8
   18af8:	bne	18ad4 <__assert_fail@plt+0x75dc>
   18afc:	ldr	r1, [r5, #20]
   18b00:	ldr	r3, [r5, #16]
   18b04:	cmp	r3, r1
   18b08:	beq	18b6c <__assert_fail@plt+0x7674>
   18b0c:	ldr	r0, [r5, #24]
   18b10:	add	r3, r1, #1
   18b14:	str	r3, [r5, #20]
   18b18:	str	r6, [r0, r1, lsl #2]
   18b1c:	ldr	r1, [r5, #8]
   18b20:	add	r4, r4, #1
   18b24:	cmp	r4, r1
   18b28:	blt	18ae0 <__assert_fail@plt+0x75e8>
   18b2c:	ldr	r4, [r8, #68]	; 0x44
   18b30:	ldr	r6, [r8, #32]
   18b34:	and	r7, r7, r4
   18b38:	add	r7, r7, r7, lsl #1
   18b3c:	lsl	r4, r7, #2
   18b40:	add	r7, r6, r4
   18b44:	ldr	r3, [r6, r4]
   18b48:	ldr	r2, [r7, #4]
   18b4c:	cmp	r2, r3
   18b50:	ldrgt	r2, [r7, #8]
   18b54:	ble	18b9c <__assert_fail@plt+0x76a4>
   18b58:	add	r1, r3, #1
   18b5c:	str	r1, [r6, r4]
   18b60:	mov	r0, #0
   18b64:	str	r5, [r2, r3, lsl #2]
   18b68:	pop	{r4, r5, r6, r7, r8, pc}
   18b6c:	add	r1, r1, #1
   18b70:	ldr	r0, [r5, #24]
   18b74:	lsl	r3, r1, #1
   18b78:	str	r3, [r5, #16]
   18b7c:	lsl	r1, r1, #3
   18b80:	bl	2a7bc <__assert_fail@plt+0x192c4>
   18b84:	cmp	r0, #0
   18b88:	ldrne	r1, [r5, #20]
   18b8c:	strne	r0, [r5, #24]
   18b90:	bne	18b10 <__assert_fail@plt+0x7618>
   18b94:	mov	r0, #12
   18b98:	pop	{r4, r5, r6, r7, r8, pc}
   18b9c:	add	r3, r3, #1
   18ba0:	ldr	r0, [r7, #8]
   18ba4:	lsl	r1, r3, #3
   18ba8:	lsl	r8, r3, #1
   18bac:	bl	2a7bc <__assert_fail@plt+0x192c4>
   18bb0:	subs	r2, r0, #0
   18bb4:	beq	18b94 <__assert_fail@plt+0x769c>
   18bb8:	ldr	r3, [r6, r4]
   18bbc:	str	r2, [r7, #8]
   18bc0:	str	r8, [r7, #4]
   18bc4:	b	18b58 <__assert_fail@plt+0x7660>
   18bc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bcc:	mov	r5, r0
   18bd0:	ldr	r8, [r0, #36]	; 0x24
   18bd4:	ldr	r3, [r0, #48]	; 0x30
   18bd8:	ldr	r4, [r0, #28]
   18bdc:	cmp	r8, r3
   18be0:	movge	r8, r3
   18be4:	cmp	r8, r4
   18be8:	sub	sp, sp, #92	; 0x5c
   18bec:	ble	18d50 <__assert_fail@plt+0x7858>
   18bf0:	add	r6, r0, #16
   18bf4:	add	r7, sp, #16
   18bf8:	mov	fp, #1
   18bfc:	mvn	sl, #-1073741824	; 0xc0000000
   18c00:	mov	r9, #255	; 0xff
   18c04:	b	18c84 <__assert_fail@plt+0x778c>
   18c08:	ldr	r3, [r5, #24]
   18c0c:	ldr	r1, [r5]
   18c10:	add	r3, r4, r3
   18c14:	add	r1, r1, r3
   18c18:	mov	r3, r6
   18c1c:	add	r0, sp, #12
   18c20:	bl	1449c <__assert_fail@plt+0x2fa4>
   18c24:	sub	r2, r0, #1
   18c28:	cmn	r2, #3
   18c2c:	mov	r3, r0
   18c30:	bhi	18d04 <__assert_fail@plt+0x780c>
   18c34:	cmn	r0, #2
   18c38:	ldrne	r2, [sp, #12]
   18c3c:	beq	18d38 <__assert_fail@plt+0x7840>
   18c40:	ldr	r0, [r5, #8]
   18c44:	add	r3, r4, r3
   18c48:	add	ip, r4, #1
   18c4c:	cmp	ip, r3
   18c50:	str	r2, [r0, r4, lsl #2]
   18c54:	lsl	r1, r4, #2
   18c58:	bge	18d60 <__assert_fail@plt+0x7868>
   18c5c:	sub	r2, sl, r4
   18c60:	add	r2, r2, r3
   18c64:	add	r1, r1, #4
   18c68:	add	r0, r0, r1
   18c6c:	lsl	r2, r2, #2
   18c70:	mov	r1, r9
   18c74:	mov	r4, r3
   18c78:	bl	11414 <memset@plt>
   18c7c:	cmp	r8, r4
   18c80:	ble	18d50 <__assert_fail@plt+0x7858>
   18c84:	ldm	r6, {r0, r1}
   18c88:	ldr	ip, [r5, #64]	; 0x40
   18c8c:	sub	r2, r8, r4
   18c90:	cmp	ip, #0
   18c94:	stm	r7, {r0, r1}
   18c98:	beq	18c08 <__assert_fail@plt+0x7710>
   18c9c:	ldr	r3, [r5, #80]	; 0x50
   18ca0:	cmp	r3, #0
   18ca4:	ble	18cfc <__assert_fail@plt+0x7804>
   18ca8:	add	r0, sp, #23
   18cac:	mov	r3, #0
   18cb0:	str	r6, [sp, #4]
   18cb4:	b	18cbc <__assert_fail@plt+0x77c4>
   18cb8:	ldr	ip, [r5, #64]	; 0x40
   18cbc:	ldr	r1, [r5]
   18cc0:	ldr	r6, [r5, #24]
   18cc4:	add	r1, r1, r4
   18cc8:	add	r1, r1, r3
   18ccc:	ldr	lr, [r5, #4]
   18cd0:	ldrb	r1, [r1, r6]
   18cd4:	add	lr, lr, r4
   18cd8:	ldrb	r1, [ip, r1]
   18cdc:	strb	r1, [lr, r3]
   18ce0:	ldr	ip, [r5, #80]	; 0x50
   18ce4:	add	r3, r3, #1
   18ce8:	cmp	ip, r3
   18cec:	cmpgt	r2, r3
   18cf0:	strb	r1, [r0, #1]!
   18cf4:	bgt	18cb8 <__assert_fail@plt+0x77c0>
   18cf8:	ldr	r6, [sp, #4]
   18cfc:	add	r1, sp, #24
   18d00:	b	18c18 <__assert_fail@plt+0x7720>
   18d04:	ldr	r3, [r5]
   18d08:	ldr	r2, [r5, #24]
   18d0c:	add	r3, r3, r4
   18d10:	ldr	r1, [r5, #64]	; 0x40
   18d14:	ldrb	r2, [r3, r2]
   18d18:	cmp	r1, #0
   18d1c:	mov	r3, fp
   18d20:	str	r2, [sp, #12]
   18d24:	ldrbne	r2, [r1, r2]
   18d28:	ldm	r7, {r0, r1}
   18d2c:	strne	r2, [sp, #12]
   18d30:	stm	r6, {r0, r1}
   18d34:	b	18c40 <__assert_fail@plt+0x7748>
   18d38:	ldr	r2, [r5, #36]	; 0x24
   18d3c:	ldr	r3, [r5, #48]	; 0x30
   18d40:	cmp	r2, r3
   18d44:	bge	18d04 <__assert_fail@plt+0x780c>
   18d48:	ldm	r7, {r0, r1}
   18d4c:	stm	r6, {r0, r1}
   18d50:	str	r4, [r5, #28]
   18d54:	str	r4, [r5, #32]
   18d58:	add	sp, sp, #92	; 0x5c
   18d5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d60:	mov	r4, ip
   18d64:	b	18c7c <__assert_fail@plt+0x7784>
   18d68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d6c:	mov	r4, r0
   18d70:	ldr	r6, [r0, #36]	; 0x24
   18d74:	ldr	r3, [r0, #48]	; 0x30
   18d78:	ldrb	r2, [r0, #74]	; 0x4a
   18d7c:	cmp	r6, r3
   18d80:	movge	r6, r3
   18d84:	cmp	r2, #0
   18d88:	sub	sp, sp, #100	; 0x64
   18d8c:	ldr	r5, [r0, #28]
   18d90:	bne	18da0 <__assert_fail@plt+0x78a8>
   18d94:	ldr	r3, [r0, #64]	; 0x40
   18d98:	cmp	r3, #0
   18d9c:	beq	18ed0 <__assert_fail@plt+0x79d8>
   18da0:	ldr	r7, [r4, #32]
   18da4:	cmp	r5, r6
   18da8:	bge	18ebc <__assert_fail@plt+0x79c4>
   18dac:	add	r3, sp, #24
   18db0:	add	r9, r4, #16
   18db4:	sub	sl, r6, r5
   18db8:	str	r3, [sp, #4]
   18dbc:	add	r3, sp, #20
   18dc0:	str	r3, [sp, #8]
   18dc4:	ldm	r9, {r0, r1}
   18dc8:	ldr	r2, [r4, #64]	; 0x40
   18dcc:	ldr	r3, [sp, #4]
   18dd0:	cmp	r2, #0
   18dd4:	stm	r3, {r0, r1}
   18dd8:	bne	19020 <__assert_fail@plt+0x7b28>
   18ddc:	ldr	r3, [r4, #24]
   18de0:	ldr	r2, [r4]
   18de4:	add	r3, r7, r3
   18de8:	add	r3, r2, r3
   18dec:	mov	r1, r3
   18df0:	str	r3, [sp, #12]
   18df4:	mov	r3, r9
   18df8:	mov	r2, sl
   18dfc:	ldr	r0, [sp, #8]
   18e00:	bl	1449c <__assert_fail@plt+0x2fa4>
   18e04:	sub	r3, r0, #1
   18e08:	cmn	r3, #4
   18e0c:	mov	r8, r0
   18e10:	str	r3, [sp, #8]
   18e14:	bhi	19130 <__assert_fail@plt+0x7c38>
   18e18:	ldr	fp, [sp, #20]
   18e1c:	mov	r0, fp
   18e20:	bl	114d4 <towupper@plt>
   18e24:	cmp	fp, r0
   18e28:	mov	sl, r0
   18e2c:	beq	19118 <__assert_fail@plt+0x7c20>
   18e30:	add	r0, sp, #32
   18e34:	ldr	r2, [sp, #4]
   18e38:	mov	r1, sl
   18e3c:	bl	111a4 <wcrtomb@plt>
   18e40:	cmp	r8, r0
   18e44:	mov	fp, r0
   18e48:	bne	191c4 <__assert_fail@plt+0x7ccc>
   18e4c:	ldr	r0, [r4, #4]
   18e50:	add	r1, sp, #32
   18e54:	add	r0, r0, r5
   18e58:	mov	r2, r8
   18e5c:	bl	11234 <memcpy@plt>
   18e60:	ldrb	r3, [r4, #76]	; 0x4c
   18e64:	cmp	r3, #0
   18e68:	bne	191a4 <__assert_fail@plt+0x7cac>
   18e6c:	add	r3, r8, r7
   18e70:	ldr	r0, [r4, #8]
   18e74:	add	r8, r5, r8
   18e78:	add	r2, r5, #1
   18e7c:	cmp	r2, r8
   18e80:	mov	r7, r3
   18e84:	str	sl, [r0, r5, lsl #2]
   18e88:	bge	192c0 <__assert_fail@plt+0x7dc8>
   18e8c:	mvn	r3, #-1073741824	; 0xc0000000
   18e90:	sub	r3, r3, r5
   18e94:	add	r3, r3, r8
   18e98:	add	r0, r0, r2, lsl #2
   18e9c:	mov	r1, #255	; 0xff
   18ea0:	lsl	r2, r3, #2
   18ea4:	mov	r5, r8
   18ea8:	bl	11414 <memset@plt>
   18eac:	b	18da4 <__assert_fail@plt+0x78ac>
   18eb0:	ldr	r3, [sp, #4]
   18eb4:	ldm	r3, {r0, r1}
   18eb8:	stm	r9, {r0, r1}
   18ebc:	mov	r0, #0
   18ec0:	str	r5, [r4, #28]
   18ec4:	str	r7, [r4, #32]
   18ec8:	add	sp, sp, #100	; 0x64
   18ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ed0:	ldrb	r3, [r0, #76]	; 0x4c
   18ed4:	cmp	r3, #0
   18ed8:	bne	18da0 <__assert_fail@plt+0x78a8>
   18edc:	cmp	r5, r6
   18ee0:	bge	19108 <__assert_fail@plt+0x7c10>
   18ee4:	add	r9, r0, #16
   18ee8:	b	18f18 <__assert_fail@plt+0x7a20>
   18eec:	mov	r0, fp
   18ef0:	bl	114d4 <towupper@plt>
   18ef4:	bics	r3, r0, #127	; 0x7f
   18ef8:	bne	18f40 <__assert_fail@plt+0x7a48>
   18efc:	ldr	r3, [r4, #4]
   18f00:	strb	r0, [r3, r5]
   18f04:	ldr	r3, [r4, #8]
   18f08:	str	r0, [r3, r5, lsl #2]
   18f0c:	add	r5, r5, #1
   18f10:	cmp	r6, r5
   18f14:	ble	19108 <__assert_fail@plt+0x7c10>
   18f18:	ldr	r8, [r4]
   18f1c:	ldr	r7, [r4, #24]
   18f20:	add	r3, r8, r7
   18f24:	ldrb	fp, [r3, r5]
   18f28:	tst	fp, #128	; 0x80
   18f2c:	bne	18f40 <__assert_fail@plt+0x7a48>
   18f30:	mov	r0, r9
   18f34:	bl	11264 <mbsinit@plt>
   18f38:	cmp	r0, #0
   18f3c:	bne	18eec <__assert_fail@plt+0x79f4>
   18f40:	ldm	r9, {r0, r1}
   18f44:	add	r3, sp, #24
   18f48:	add	r7, r7, r5
   18f4c:	sub	sl, r6, r5
   18f50:	stm	r3, {r0, r1}
   18f54:	mov	r2, sl
   18f58:	add	r1, r8, r7
   18f5c:	mov	r3, r9
   18f60:	add	r0, sp, #20
   18f64:	bl	1449c <__assert_fail@plt+0x2fa4>
   18f68:	add	r2, sp, #24
   18f6c:	str	r2, [sp, #4]
   18f70:	add	r2, sp, #20
   18f74:	mov	r7, r5
   18f78:	str	r2, [sp, #8]
   18f7c:	sub	r3, r0, #1
   18f80:	cmn	r3, #4
   18f84:	mov	r8, r0
   18f88:	bhi	1909c <__assert_fail@plt+0x7ba4>
   18f8c:	ldr	r3, [sp, #20]
   18f90:	mov	r0, r3
   18f94:	str	r3, [sp, #12]
   18f98:	bl	114d4 <towupper@plt>
   18f9c:	ldr	r3, [sp, #12]
   18fa0:	cmp	r3, r0
   18fa4:	mov	fp, r0
   18fa8:	beq	19078 <__assert_fail@plt+0x7b80>
   18fac:	mov	r1, r0
   18fb0:	add	r2, sp, #24
   18fb4:	add	r0, sp, #32
   18fb8:	bl	111a4 <wcrtomb@plt>
   18fbc:	cmp	r8, r0
   18fc0:	bne	190cc <__assert_fail@plt+0x7bd4>
   18fc4:	ldr	r0, [r4, #4]
   18fc8:	mov	r2, r8
   18fcc:	add	r0, r0, r5
   18fd0:	add	r1, sp, #32
   18fd4:	bl	11234 <memcpy@plt>
   18fd8:	add	r5, r5, #1
   18fdc:	sub	r3, r5, #1
   18fe0:	ldr	r0, [r4, #8]
   18fe4:	add	r8, r3, r8
   18fe8:	cmp	r5, r8
   18fec:	str	fp, [r0, r7, lsl #2]
   18ff0:	lsl	r3, r7, #2
   18ff4:	bge	18f10 <__assert_fail@plt+0x7a18>
   18ff8:	mvn	r2, #-1073741824	; 0xc0000000
   18ffc:	sub	r2, r2, r7
   19000:	add	r2, r2, r8
   19004:	add	r3, r3, #4
   19008:	lsl	r2, r2, #2
   1900c:	add	r0, r0, r3
   19010:	mov	r1, #255	; 0xff
   19014:	mov	r5, r8
   19018:	bl	11414 <memset@plt>
   1901c:	b	18f10 <__assert_fail@plt+0x7a18>
   19020:	ldr	lr, [r4, #80]	; 0x50
   19024:	cmp	lr, #0
   19028:	ble	19068 <__assert_fail@plt+0x7b70>
   1902c:	ldr	r3, [r4, #24]
   19030:	ldr	r1, [r4]
   19034:	add	r3, r7, r3
   19038:	sub	r3, r3, #1
   1903c:	cmp	lr, sl
   19040:	add	r1, r1, r3
   19044:	movge	lr, sl
   19048:	add	r0, sp, #31
   1904c:	mov	r3, #0
   19050:	ldrb	ip, [r1, #1]!
   19054:	add	r3, r3, #1
   19058:	cmp	r3, lr
   1905c:	ldrb	ip, [r2, ip]
   19060:	strb	ip, [r0, #1]!
   19064:	blt	19050 <__assert_fail@plt+0x7b58>
   19068:	add	r3, sp, #32
   1906c:	str	r3, [sp, #12]
   19070:	mov	r1, r3
   19074:	b	18df4 <__assert_fail@plt+0x78fc>
   19078:	ldr	r3, [r4, #24]
   1907c:	ldr	r1, [r4]
   19080:	ldr	r0, [r4, #4]
   19084:	add	r3, r5, r3
   19088:	add	r1, r1, r3
   1908c:	add	r0, r0, r5
   19090:	mov	r2, r8
   19094:	bl	11234 <memcpy@plt>
   19098:	b	18fd8 <__assert_fail@plt+0x7ae0>
   1909c:	cmn	r3, #3
   190a0:	bne	190d4 <__assert_fail@plt+0x7bdc>
   190a4:	ldr	r2, [r4, #36]	; 0x24
   190a8:	ldr	r3, [r4, #48]	; 0x30
   190ac:	cmp	r2, r3
   190b0:	blt	190fc <__assert_fail@plt+0x7c04>
   190b4:	ldr	r3, [r4, #4]
   190b8:	strb	fp, [r3, r5]
   190bc:	ldr	r3, [r4, #8]
   190c0:	add	r5, r5, #1
   190c4:	str	fp, [r3, r7, lsl #2]
   190c8:	b	18f10 <__assert_fail@plt+0x7a18>
   190cc:	mov	r7, r5
   190d0:	b	18dc4 <__assert_fail@plt+0x78cc>
   190d4:	ldr	r3, [r4, #4]
   190d8:	cmn	r0, #1
   190dc:	strb	fp, [r3, r5]
   190e0:	ldr	r3, [r4, #8]
   190e4:	add	r5, r5, #1
   190e8:	str	fp, [r3, r7, lsl #2]
   190ec:	addeq	r3, sp, #24
   190f0:	ldmeq	r3, {r0, r1}
   190f4:	stmeq	r9, {r0, r1}
   190f8:	b	18f10 <__assert_fail@plt+0x7a18>
   190fc:	add	r3, sp, #24
   19100:	ldm	r3, {r0, r1}
   19104:	stm	r9, {r0, r1}
   19108:	str	r5, [r4, #28]
   1910c:	str	r5, [r4, #32]
   19110:	mov	r0, #0
   19114:	b	18ec8 <__assert_fail@plt+0x79d0>
   19118:	ldr	r0, [r4, #4]
   1911c:	ldr	r1, [sp, #12]
   19120:	add	r0, r0, r5
   19124:	mov	r2, r8
   19128:	bl	11234 <memcpy@plt>
   1912c:	b	18e60 <__assert_fail@plt+0x7968>
   19130:	cmn	r3, #3
   19134:	bne	19148 <__assert_fail@plt+0x7c50>
   19138:	ldr	r2, [r4, #36]	; 0x24
   1913c:	ldr	r3, [r4, #48]	; 0x30
   19140:	cmp	r2, r3
   19144:	blt	18eb0 <__assert_fail@plt+0x79b8>
   19148:	ldr	r3, [r4]
   1914c:	ldr	r1, [r4, #24]
   19150:	add	r3, r3, r7
   19154:	ldr	r2, [r4, #64]	; 0x40
   19158:	ldrb	r3, [r3, r1]
   1915c:	cmp	r2, #0
   19160:	mov	r1, r5
   19164:	ldrbne	r3, [r2, r3]
   19168:	ldr	r2, [r4, #4]
   1916c:	strb	r3, [r2, r5]
   19170:	ldrb	r2, [r4, #76]	; 0x4c
   19174:	cmp	r2, #0
   19178:	ldrne	r2, [r4, #12]
   1917c:	strne	r7, [r2, r5, lsl #2]
   19180:	ldr	r2, [r4, #8]
   19184:	cmn	r8, #1
   19188:	add	r7, r7, #1
   1918c:	add	r5, r5, #1
   19190:	str	r3, [r2, r1, lsl #2]
   19194:	ldreq	r3, [sp, #4]
   19198:	ldmeq	r3, {r0, r1}
   1919c:	stmeq	r9, {r0, r1}
   191a0:	b	18da4 <__assert_fail@plt+0x78ac>
   191a4:	ldr	r2, [r4, #12]
   191a8:	add	r3, r8, r7
   191ac:	add	r2, r2, r5, lsl #2
   191b0:	str	r7, [r2], #4
   191b4:	add	r7, r7, #1
   191b8:	cmp	r3, r7
   191bc:	bne	191b0 <__assert_fail@plt+0x7cb8>
   191c0:	b	18e70 <__assert_fail@plt+0x7978>
   191c4:	cmn	r0, #1
   191c8:	beq	19118 <__assert_fail@plt+0x7c20>
   191cc:	ldr	r0, [r4, #36]	; 0x24
   191d0:	add	r6, r5, fp
   191d4:	cmp	r6, r0
   191d8:	bhi	18eb0 <__assert_fail@plt+0x79b8>
   191dc:	ldr	r3, [r4, #12]
   191e0:	cmp	r3, #0
   191e4:	beq	192c8 <__assert_fail@plt+0x7dd0>
   191e8:	ldrb	r3, [r4, #76]	; 0x4c
   191ec:	cmp	r3, #0
   191f0:	bne	1921c <__assert_fail@plt+0x7d24>
   191f4:	cmp	r5, #0
   191f8:	ldrne	r2, [r4, #12]
   191fc:	subne	r2, r2, #4
   19200:	beq	19214 <__assert_fail@plt+0x7d1c>
   19204:	str	r3, [r2, #4]!
   19208:	add	r3, r3, #1
   1920c:	cmp	r5, r3
   19210:	bne	19204 <__assert_fail@plt+0x7d0c>
   19214:	mov	r3, #1
   19218:	strb	r3, [r4, #76]	; 0x4c
   1921c:	ldr	r0, [r4, #4]
   19220:	add	r1, sp, #32
   19224:	mov	r2, fp
   19228:	add	r0, r0, r5
   1922c:	bl	11234 <memcpy@plt>
   19230:	ldr	r3, [r4, #8]
   19234:	ldr	r1, [r4, #12]
   19238:	lsl	r2, r5, #2
   1923c:	cmp	fp, #1
   19240:	str	sl, [r3, r5, lsl #2]
   19244:	add	r3, r3, r2
   19248:	str	r7, [r1, r5, lsl #2]
   1924c:	add	r2, r1, r2
   19250:	bls	19280 <__assert_fail@plt+0x7d88>
   19254:	mov	r1, #1
   19258:	mvn	ip, #0
   1925c:	cmp	r1, r8
   19260:	ldr	r0, [sp, #8]
   19264:	movcc	r0, r1
   19268:	add	r1, r1, #1
   1926c:	add	r0, r0, r7
   19270:	cmp	r1, fp
   19274:	str	r0, [r2, #4]!
   19278:	str	ip, [r3, #4]!
   1927c:	bne	1925c <__assert_fail@plt+0x7d64>
   19280:	ldr	r2, [r4, #52]	; 0x34
   19284:	ldr	r3, [r4, #48]	; 0x30
   19288:	cmp	r7, r2
   1928c:	sub	fp, fp, r8
   19290:	ldrlt	r2, [r4, #56]	; 0x38
   19294:	add	r3, fp, r3
   19298:	addlt	fp, r2, fp
   1929c:	ldr	r2, [r4, #36]	; 0x24
   192a0:	strlt	fp, [r4, #56]	; 0x38
   192a4:	cmp	r3, r2
   192a8:	mov	r5, r6
   192ac:	str	r3, [r4, #48]	; 0x30
   192b0:	add	r7, r8, r7
   192b4:	movlt	r6, r3
   192b8:	movge	r6, r2
   192bc:	b	18da4 <__assert_fail@plt+0x78ac>
   192c0:	mov	r5, r2
   192c4:	b	18da4 <__assert_fail@plt+0x78ac>
   192c8:	lsl	r0, r0, #2
   192cc:	bl	2a790 <__assert_fail@plt+0x19298>
   192d0:	cmp	r0, #0
   192d4:	str	r0, [r4, #12]
   192d8:	moveq	r0, #12
   192dc:	bne	191e8 <__assert_fail@plt+0x7cf0>
   192e0:	b	18ec8 <__assert_fail@plt+0x79d0>
   192e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192e8:	sub	sp, sp, #12
   192ec:	ldmib	r0, {r5, ip}
   192f0:	stm	sp, {r1, r2}
   192f4:	mov	r4, r0
   192f8:	cmp	ip, r5
   192fc:	mov	r8, sp
   19300:	ldrb	r6, [sp, #4]
   19304:	bcs	193c4 <__assert_fail@plt+0x7ecc>
   19308:	ldr	r7, [r0, #12]
   1930c:	ldr	r5, [r0, #20]
   19310:	ldm	r8, {r0, r1}
   19314:	ldr	r3, [r4]
   19318:	cmp	r6, #5
   1931c:	add	r3, r3, ip, lsl #3
   19320:	bic	r2, r1, #261120	; 0x3fc00
   19324:	bic	r2, r2, #768	; 0x300
   19328:	stm	r3, {r0, r1}
   1932c:	str	r2, [r3, #4]
   19330:	beq	193b0 <__assert_fail@plt+0x7eb8>
   19334:	sub	r6, r6, #6
   19338:	clz	r6, r6
   1933c:	lsr	r6, r6, #5
   19340:	ldrb	r2, [r3, #6]
   19344:	mvn	r1, #0
   19348:	bic	r2, r2, #16
   1934c:	orr	r2, r2, r6, lsl #4
   19350:	strb	r2, [r3, #6]
   19354:	str	r1, [r7, ip, lsl #2]
   19358:	ldr	r3, [r4, #8]
   1935c:	mov	r2, #0
   19360:	add	r3, r3, r3, lsl #1
   19364:	lsl	r3, r3, #2
   19368:	add	r1, r5, r3
   1936c:	str	r2, [r5, r3]
   19370:	str	r2, [r1, #4]
   19374:	str	r2, [r1, #8]
   19378:	ldr	r3, [r4, #8]
   1937c:	ldr	r0, [r4, #24]
   19380:	add	r3, r3, r3, lsl #1
   19384:	lsl	r3, r3, #2
   19388:	add	r1, r0, r3
   1938c:	str	r2, [r0, r3]
   19390:	str	r2, [r1, #4]
   19394:	str	r2, [r1, #8]
   19398:	ldr	r3, [r4, #8]
   1939c:	mov	r0, r3
   193a0:	add	r3, r3, #1
   193a4:	str	r3, [r4, #8]
   193a8:	add	sp, sp, #12
   193ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193b0:	ldr	r6, [r4, #92]	; 0x5c
   193b4:	cmp	r6, #1
   193b8:	movle	r6, #0
   193bc:	movgt	r6, #1
   193c0:	b	19340 <__assert_fail@plt+0x7e48>
   193c4:	ldr	r3, [pc, #200]	; 19494 <__assert_fail@plt+0x7f9c>
   193c8:	lsl	r9, r5, #1
   193cc:	cmp	r9, r3
   193d0:	bhi	1948c <__assert_fail@plt+0x7f94>
   193d4:	lsl	r1, r5, #4
   193d8:	ldr	r0, [r0]
   193dc:	bl	2a7bc <__assert_fail@plt+0x192c4>
   193e0:	cmp	r0, #0
   193e4:	beq	1948c <__assert_fail@plt+0x7f94>
   193e8:	lsl	sl, r5, #3
   193ec:	mov	r1, sl
   193f0:	str	r0, [r4]
   193f4:	ldr	r0, [r4, #12]
   193f8:	bl	2a7bc <__assert_fail@plt+0x192c4>
   193fc:	mov	r1, sl
   19400:	add	r5, r9, r5, lsl #2
   19404:	lsl	sl, r5, #2
   19408:	mov	r7, r0
   1940c:	ldr	r0, [r4, #16]
   19410:	bl	2a7bc <__assert_fail@plt+0x192c4>
   19414:	mov	r1, sl
   19418:	mov	fp, r0
   1941c:	ldr	r0, [r4, #20]
   19420:	bl	2a7bc <__assert_fail@plt+0x192c4>
   19424:	mov	r1, sl
   19428:	mov	r5, r0
   1942c:	ldr	r0, [r4, #24]
   19430:	bl	2a7bc <__assert_fail@plt+0x192c4>
   19434:	cmp	fp, #0
   19438:	cmpne	r7, #0
   1943c:	mov	sl, r0
   19440:	beq	1946c <__assert_fail@plt+0x7f74>
   19444:	cmp	r0, #0
   19448:	cmpne	r5, #0
   1944c:	beq	1946c <__assert_fail@plt+0x7f74>
   19450:	ldr	ip, [r4, #8]
   19454:	str	r7, [r4, #12]
   19458:	str	fp, [r4, #16]
   1945c:	str	r5, [r4, #20]
   19460:	str	r0, [r4, #24]
   19464:	str	r9, [r4, #4]
   19468:	b	19310 <__assert_fail@plt+0x7e18>
   1946c:	mov	r0, r7
   19470:	bl	14214 <__assert_fail@plt+0x2d1c>
   19474:	mov	r0, fp
   19478:	bl	14214 <__assert_fail@plt+0x2d1c>
   1947c:	mov	r0, r5
   19480:	bl	14214 <__assert_fail@plt+0x2d1c>
   19484:	mov	r0, sl
   19488:	bl	14214 <__assert_fail@plt+0x2d1c>
   1948c:	mvn	r0, #0
   19490:	b	193a8 <__assert_fail@plt+0x7eb0>
   19494:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   19498:	ldr	r3, [r0]
   1949c:	push	{r4, r5, r6, lr}
   194a0:	cmp	r3, #0
   194a4:	mov	r4, r0
   194a8:	mov	r6, r1
   194ac:	beq	194d8 <__assert_fail@plt+0x7fe0>
   194b0:	ldr	r2, [r0, #4]
   194b4:	cmp	r2, #0
   194b8:	bne	19508 <__assert_fail@plt+0x8010>
   194bc:	ldr	r3, [r0, #8]
   194c0:	mov	r0, #1
   194c4:	str	r1, [r3]
   194c8:	ldr	r3, [r4, #4]
   194cc:	add	r3, r3, r0
   194d0:	str	r3, [r4, #4]
   194d4:	pop	{r4, r5, r6, pc}
   194d8:	mov	r5, #1
   194dc:	str	r5, [r0]
   194e0:	str	r5, [r0, #4]
   194e4:	mov	r0, #4
   194e8:	bl	2a790 <__assert_fail@plt+0x19298>
   194ec:	cmp	r0, #0
   194f0:	str	r0, [r4, #8]
   194f4:	strne	r6, [r0]
   194f8:	streq	r0, [r4, #4]
   194fc:	streq	r0, [r4]
   19500:	movne	r0, r5
   19504:	pop	{r4, r5, r6, pc}
   19508:	cmp	r3, r2
   1950c:	beq	19588 <__assert_fail@plt+0x8090>
   19510:	ldr	r5, [r0, #8]
   19514:	ldr	r3, [r5]
   19518:	cmp	r6, r3
   1951c:	bge	19554 <__assert_fail@plt+0x805c>
   19520:	cmp	r2, #0
   19524:	ble	1953c <__assert_fail@plt+0x8044>
   19528:	lsl	r2, r2, #2
   1952c:	mov	r1, r5
   19530:	add	r0, r5, #4
   19534:	bl	11204 <memmove@plt>
   19538:	mov	r2, #0
   1953c:	str	r6, [r5, r2, lsl #2]
   19540:	ldr	r3, [r4, #4]
   19544:	mov	r0, #1
   19548:	add	r3, r3, r0
   1954c:	str	r3, [r4, #4]
   19550:	pop	{r4, r5, r6, pc}
   19554:	sub	r3, r2, #-1073741823	; 0xc0000001
   19558:	ldr	r1, [r5, r3, lsl #2]
   1955c:	lsl	r3, r3, #2
   19560:	cmp	r6, r1
   19564:	bge	1953c <__assert_fail@plt+0x8044>
   19568:	add	r3, r3, #4
   1956c:	add	r3, r5, r3
   19570:	str	r1, [r3], #-4
   19574:	ldr	r1, [r3, #-4]
   19578:	sub	r2, r2, #1
   1957c:	cmp	r6, r1
   19580:	blt	19570 <__assert_fail@plt+0x8078>
   19584:	b	1953c <__assert_fail@plt+0x8044>
   19588:	lsl	r3, r2, #1
   1958c:	str	r3, [r0]
   19590:	lsl	r1, r2, #3
   19594:	ldr	r0, [r0, #8]
   19598:	bl	2a7bc <__assert_fail@plt+0x192c4>
   1959c:	subs	r5, r0, #0
   195a0:	ldrne	r2, [r4, #4]
   195a4:	strne	r5, [r4, #8]
   195a8:	bne	19514 <__assert_fail@plt+0x801c>
   195ac:	mov	r0, r5
   195b0:	pop	{r4, r5, r6, pc}
   195b4:	cmp	r0, #0
   195b8:	ble	1963c <__assert_fail@plt+0x8144>
   195bc:	push	{lr}		; (str lr, [sp, #-4]!)
   195c0:	sub	ip, r0, #1
   195c4:	ldr	lr, [r1]
   195c8:	mov	r0, #0
   195cc:	cmp	r0, ip
   195d0:	bcs	1960c <__assert_fail@plt+0x8114>
   195d4:	add	r1, r0, ip
   195d8:	lsr	r1, r1, #1
   195dc:	ldr	r3, [lr, r1, lsl #2]
   195e0:	cmp	r2, r3
   195e4:	ble	195fc <__assert_fail@plt+0x8104>
   195e8:	b	19620 <__assert_fail@plt+0x8128>
   195ec:	ldr	ip, [lr, r3, lsl #2]
   195f0:	cmp	ip, r2
   195f4:	blt	19628 <__assert_fail@plt+0x8130>
   195f8:	mov	r1, r3
   195fc:	add	r3, r0, r1
   19600:	cmp	r0, r1
   19604:	lsr	r3, r3, #1
   19608:	bcc	195ec <__assert_fail@plt+0x80f4>
   1960c:	ldr	r3, [lr, r0, lsl #2]
   19610:	cmp	r2, r3
   19614:	beq	19634 <__assert_fail@plt+0x813c>
   19618:	mov	r0, #0
   1961c:	pop	{pc}		; (ldr pc, [sp], #4)
   19620:	mov	r3, r1
   19624:	mov	r1, ip
   19628:	add	r0, r3, #1
   1962c:	mov	ip, r1
   19630:	b	195cc <__assert_fail@plt+0x80d4>
   19634:	add	r0, r0, #1
   19638:	pop	{pc}		; (ldr pc, [sp], #4)
   1963c:	mov	r0, #0
   19640:	bx	lr
   19644:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19648:	mov	sl, r0
   1964c:	ldr	r7, [r2, #4]
   19650:	ldr	r0, [r1, #4]
   19654:	ldr	r3, [sl, #4]
   19658:	ldr	r9, [r1, #8]
   1965c:	ldr	r8, [r2, #8]
   19660:	sub	r5, r0, #1
   19664:	sub	r6, r7, #1
   19668:	add	r0, r3, r0
   1966c:	add	r7, r0, r7
   19670:	ldr	ip, [r9, r5, lsl #2]
   19674:	ldr	r4, [r8, r6, lsl #2]
   19678:	ldr	r0, [sl, #8]
   1967c:	sub	r3, r3, #1
   19680:	cmp	ip, r4
   19684:	beq	196a0 <__assert_fail@plt+0x81a8>
   19688:	bge	196f0 <__assert_fail@plt+0x81f8>
   1968c:	subs	r6, r6, #1
   19690:	bmi	19710 <__assert_fail@plt+0x8218>
   19694:	ldr	r4, [r8, r6, lsl #2]
   19698:	cmp	ip, r4
   1969c:	bne	19688 <__assert_fail@plt+0x8190>
   196a0:	cmp	r3, #0
   196a4:	blt	196d0 <__assert_fail@plt+0x81d8>
   196a8:	ldr	lr, [r0, r3, lsl #2]
   196ac:	add	ip, r0, r3, lsl #2
   196b0:	cmp	lr, r4
   196b4:	bgt	196c8 <__assert_fail@plt+0x81d0>
   196b8:	b	19700 <__assert_fail@plt+0x8208>
   196bc:	ldr	lr, [ip, #-4]!
   196c0:	cmp	lr, r4
   196c4:	ble	19700 <__assert_fail@plt+0x8208>
   196c8:	subs	r3, r3, #1
   196cc:	bcs	196bc <__assert_fail@plt+0x81c4>
   196d0:	sub	r7, r7, #1
   196d4:	subs	r5, r5, #1
   196d8:	str	r4, [r0, r7, lsl #2]
   196dc:	bmi	19710 <__assert_fail@plt+0x8218>
   196e0:	subs	r6, r6, #1
   196e4:	bmi	19710 <__assert_fail@plt+0x8218>
   196e8:	ldr	ip, [r9, r5, lsl #2]
   196ec:	b	19694 <__assert_fail@plt+0x819c>
   196f0:	subs	r5, r5, #1
   196f4:	bmi	19710 <__assert_fail@plt+0x8218>
   196f8:	ldr	ip, [r9, r5, lsl #2]
   196fc:	b	19680 <__assert_fail@plt+0x8188>
   19700:	cmp	lr, r4
   19704:	bne	196d0 <__assert_fail@plt+0x81d8>
   19708:	subs	r5, r5, #1
   1970c:	bpl	196e0 <__assert_fail@plt+0x81e8>
   19710:	ldr	ip, [sl, #4]
   19714:	ldr	r1, [r1, #4]
   19718:	ldr	r3, [r2, #4]
   1971c:	add	r1, ip, r1
   19720:	add	r1, r1, r3
   19724:	sub	r2, r1, r7
   19728:	sub	r3, ip, #1
   1972c:	cmp	r3, #0
   19730:	cmpge	r2, #0
   19734:	add	ip, ip, r2
   19738:	sub	r1, r1, #1
   1973c:	str	ip, [sl, #4]
   19740:	bgt	19768 <__assert_fail@plt+0x8270>
   19744:	lsl	r2, r2, #2
   19748:	add	r1, r0, r7, lsl #2
   1974c:	bl	11234 <memcpy@plt>
   19750:	mov	r0, #0
   19754:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19758:	sub	r3, r3, #1
   1975c:	cmn	r3, #1
   19760:	str	ip, [r0, r5, lsl #2]
   19764:	beq	19744 <__assert_fail@plt+0x824c>
   19768:	ldr	lr, [r0, r1, lsl #2]
   1976c:	ldr	ip, [r0, r3, lsl #2]
   19770:	add	r5, r3, r2
   19774:	cmp	lr, ip
   19778:	mov	r4, r5
   1977c:	ble	19758 <__assert_fail@plt+0x8260>
   19780:	subs	r2, r2, #1
   19784:	sub	r1, r1, #1
   19788:	str	lr, [r0, r5, lsl #2]
   1978c:	bne	19768 <__assert_fail@plt+0x8270>
   19790:	b	19748 <__assert_fail@plt+0x8250>
   19794:	push	{r4, r5, r6, lr}
   19798:	mov	r5, r0
   1979c:	ldr	r0, [r1]
   197a0:	sub	sp, sp, #16
   197a4:	cmp	r0, #31
   197a8:	beq	1981c <__assert_fail@plt+0x8324>
   197ac:	lsl	ip, r0, #5
   197b0:	ldr	r4, [r5]
   197b4:	add	r0, r0, #1
   197b8:	add	r6, ip, #4
   197bc:	str	r0, [r1]
   197c0:	ldr	r1, [sp, #32]
   197c4:	add	ip, r4, ip
   197c8:	mov	r5, #0
   197cc:	str	r2, [ip, #8]
   197d0:	str	r3, [ip, #12]
   197d4:	str	r5, [ip, #4]
   197d8:	ldm	r1, {r0, r1}
   197dc:	add	lr, ip, #24
   197e0:	cmp	r2, r5
   197e4:	stm	lr, {r0, r1}
   197e8:	ldrb	r1, [ip, #30]
   197ec:	mvn	lr, #0
   197f0:	add	r0, r4, r6
   197f4:	and	r1, r1, #243	; 0xf3
   197f8:	str	r5, [ip, #16]
   197fc:	str	r5, [ip, #20]
   19800:	strb	r1, [ip, #30]
   19804:	str	lr, [ip, #32]
   19808:	strne	r0, [r2]
   1980c:	cmp	r3, #0
   19810:	strne	r0, [r3]
   19814:	add	sp, sp, #16
   19818:	pop	{r4, r5, r6, pc}
   1981c:	mov	r0, #996	; 0x3e4
   19820:	stmib	sp, {r1, r2, r3}
   19824:	bl	2a790 <__assert_fail@plt+0x19298>
   19828:	subs	r4, r0, #0
   1982c:	beq	19850 <__assert_fail@plt+0x8358>
   19830:	ldr	ip, [r5]
   19834:	mov	r6, #4
   19838:	str	ip, [r4]
   1983c:	mov	r0, #1
   19840:	mov	ip, #0
   19844:	str	r4, [r5]
   19848:	ldmib	sp, {r1, r2, r3}
   1984c:	b	197bc <__assert_fail@plt+0x82c4>
   19850:	mov	r0, r4
   19854:	b	19814 <__assert_fail@plt+0x831c>
   19858:	push	{r4, r5, r6, lr}
   1985c:	mov	r4, r0
   19860:	ldr	r0, [r1, #4]
   19864:	str	r0, [r4, #4]
   19868:	ldr	r2, [r1, #4]
   1986c:	cmp	r2, #0
   19870:	ble	198a8 <__assert_fail@plt+0x83b0>
   19874:	str	r0, [r4]
   19878:	lsl	r0, r0, #2
   1987c:	mov	r5, r1
   19880:	bl	2a790 <__assert_fail@plt+0x19298>
   19884:	cmp	r0, #0
   19888:	str	r0, [r4, #8]
   1988c:	beq	198c0 <__assert_fail@plt+0x83c8>
   19890:	ldr	r2, [r5, #4]
   19894:	ldr	r1, [r5, #8]
   19898:	lsl	r2, r2, #2
   1989c:	bl	11234 <memcpy@plt>
   198a0:	mov	r0, #0
   198a4:	pop	{r4, r5, r6, pc}
   198a8:	mov	r2, #0
   198ac:	mov	r0, r2
   198b0:	str	r2, [r4]
   198b4:	str	r2, [r4, #4]
   198b8:	str	r2, [r4, #8]
   198bc:	pop	{r4, r5, r6, pc}
   198c0:	str	r0, [r4, #4]
   198c4:	str	r0, [r4]
   198c8:	mov	r0, #12
   198cc:	pop	{r4, r5, r6, pc}
   198d0:	cmp	r1, #0
   198d4:	beq	199a0 <__assert_fail@plt+0x84a8>
   198d8:	ldr	r3, [r1, #4]
   198dc:	cmp	r2, #0
   198e0:	cmpne	r3, #0
   198e4:	ble	19998 <__assert_fail@plt+0x84a0>
   198e8:	ldr	ip, [r2, #4]
   198ec:	cmp	ip, #0
   198f0:	ble	199b8 <__assert_fail@plt+0x84c0>
   198f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   198f8:	mov	r8, r0
   198fc:	add	r0, r3, ip
   19900:	str	r0, [r8]
   19904:	lsl	r0, r0, #2
   19908:	mov	r5, r2
   1990c:	mov	r7, r1
   19910:	bl	2a790 <__assert_fail@plt+0x19298>
   19914:	cmp	r0, #0
   19918:	str	r0, [r8, #8]
   1991c:	beq	19a14 <__assert_fail@plt+0x851c>
   19920:	mov	r3, #0
   19924:	mov	ip, r3
   19928:	ldr	r9, [r7, #4]
   1992c:	ldr	sl, [r5, #4]
   19930:	mov	r4, r0
   19934:	mov	lr, #1
   19938:	b	19978 <__assert_fail@plt+0x8480>
   1993c:	cmp	r3, sl
   19940:	bge	199d4 <__assert_fail@plt+0x84dc>
   19944:	ldr	r2, [r7, #8]
   19948:	ldr	r1, [r5, #8]
   1994c:	ldr	r2, [r2, ip, lsl #2]
   19950:	ldr	r6, [r1, r3, lsl #2]
   19954:	cmp	r2, r6
   19958:	addgt	r3, r3, #1
   1995c:	strgt	r6, [r4]
   19960:	bgt	19970 <__assert_fail@plt+0x8478>
   19964:	add	ip, ip, #1
   19968:	addeq	r3, r3, #1
   1996c:	str	r2, [r4]
   19970:	add	lr, lr, #1
   19974:	add	r4, r4, #4
   19978:	cmp	ip, r9
   1997c:	sub	r6, lr, #1
   19980:	blt	1993c <__assert_fail@plt+0x8444>
   19984:	cmp	r3, sl
   19988:	blt	199f4 <__assert_fail@plt+0x84fc>
   1998c:	str	r6, [r8, #4]
   19990:	mov	r0, #0
   19994:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19998:	cmp	r3, #0
   1999c:	bgt	199b8 <__assert_fail@plt+0x84c0>
   199a0:	cmp	r2, #0
   199a4:	beq	199bc <__assert_fail@plt+0x84c4>
   199a8:	ldr	r3, [r2, #4]
   199ac:	cmp	r3, #0
   199b0:	ble	199bc <__assert_fail@plt+0x84c4>
   199b4:	mov	r1, r2
   199b8:	b	19858 <__assert_fail@plt+0x8360>
   199bc:	mov	r3, #0
   199c0:	str	r3, [r0]
   199c4:	str	r3, [r0, #4]
   199c8:	str	r3, [r0, #8]
   199cc:	mov	r0, r3
   199d0:	bx	lr
   199d4:	sub	r9, r9, ip
   199d8:	ldr	r1, [r7, #8]
   199dc:	add	r0, r0, r6, lsl #2
   199e0:	add	r1, r1, ip, lsl #2
   199e4:	lsl	r2, r9, #2
   199e8:	add	r6, r6, r9
   199ec:	bl	11234 <memcpy@plt>
   199f0:	b	1998c <__assert_fail@plt+0x8494>
   199f4:	sub	sl, sl, r3
   199f8:	ldr	r1, [r5, #8]
   199fc:	add	r0, r0, r6, lsl #2
   19a00:	add	r1, r1, r3, lsl #2
   19a04:	lsl	r2, sl, #2
   19a08:	bl	11234 <memcpy@plt>
   19a0c:	add	r6, r6, sl
   19a10:	b	1998c <__assert_fail@plt+0x8494>
   19a14:	mov	r0, #12
   19a18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19a1c:	push	{r4, r5, r6, r7, r8, lr}
   19a20:	mov	r5, r0
   19a24:	ldr	r4, [r0, #4]
   19a28:	mov	r6, r1
   19a2c:	cmp	r4, #0
   19a30:	beq	19b3c <__assert_fail@plt+0x8644>
   19a34:	ldr	r1, [r1, #4]
   19a38:	sub	r3, r4, #1
   19a3c:	sub	r2, r1, #1
   19a40:	add	r4, r4, r1, lsl #1
   19a44:	mvn	r7, r2
   19a48:	mvn	lr, r3
   19a4c:	tst	r7, lr
   19a50:	bpl	19a8c <__assert_fail@plt+0x8594>
   19a54:	ldr	r1, [r5, #8]
   19a58:	ldr	r0, [r6, #8]
   19a5c:	ldr	ip, [r1, r3, lsl #2]
   19a60:	ldr	r0, [r0, r2, lsl #2]
   19a64:	cmp	ip, r0
   19a68:	beq	19b28 <__assert_fail@plt+0x8630>
   19a6c:	sublt	r4, r4, #1
   19a70:	sublt	r2, r2, #1
   19a74:	subge	r3, r3, #1
   19a78:	mvnlt	r7, r2
   19a7c:	mvnge	lr, r3
   19a80:	strlt	r0, [r1, r4, lsl #2]
   19a84:	tst	r7, lr
   19a88:	bmi	19a54 <__assert_fail@plt+0x855c>
   19a8c:	cmp	r2, #0
   19a90:	blt	19ab0 <__assert_fail@plt+0x85b8>
   19a94:	add	r2, r2, #1
   19a98:	sub	r4, r4, r2
   19a9c:	ldr	r0, [r5, #8]
   19aa0:	lsl	r2, r2, #2
   19aa4:	add	r0, r0, r4, lsl #2
   19aa8:	ldr	r1, [r6, #8]
   19aac:	bl	11234 <memcpy@plt>
   19ab0:	ldr	r1, [r6, #4]
   19ab4:	ldr	ip, [r5, #4]
   19ab8:	add	r1, ip, r1, lsl #1
   19abc:	subs	r2, r1, r4
   19ac0:	sub	r1, r1, #1
   19ac4:	beq	19b00 <__assert_fail@plt+0x8608>
   19ac8:	ldr	r0, [r5, #8]
   19acc:	sub	r3, ip, #1
   19ad0:	add	ip, ip, r2
   19ad4:	str	ip, [r5, #4]
   19ad8:	ldr	lr, [r0, r1, lsl #2]
   19adc:	ldr	ip, [r0, r3, lsl #2]
   19ae0:	add	r6, r3, r2
   19ae4:	cmp	lr, ip
   19ae8:	mov	r5, r6
   19aec:	ble	19b08 <__assert_fail@plt+0x8610>
   19af0:	subs	r2, r2, #1
   19af4:	sub	r1, r1, #1
   19af8:	str	lr, [r0, r6, lsl #2]
   19afc:	bne	19ad8 <__assert_fail@plt+0x85e0>
   19b00:	mov	r0, #0
   19b04:	pop	{r4, r5, r6, r7, r8, pc}
   19b08:	subs	r3, r3, #1
   19b0c:	str	ip, [r0, r6, lsl #2]
   19b10:	bpl	19ad8 <__assert_fail@plt+0x85e0>
   19b14:	lsl	r2, r2, #2
   19b18:	add	r1, r0, r4, lsl #2
   19b1c:	bl	11234 <memcpy@plt>
   19b20:	mov	r0, #0
   19b24:	pop	{r4, r5, r6, r7, r8, pc}
   19b28:	sub	r2, r2, #1
   19b2c:	sub	r3, r3, #1
   19b30:	mvn	r7, r2
   19b34:	mvn	lr, r3
   19b38:	b	19a4c <__assert_fail@plt+0x8554>
   19b3c:	ldr	r3, [r1, #4]
   19b40:	ldr	r0, [r0, #8]
   19b44:	str	r3, [r5, #4]
   19b48:	ldr	r2, [r1, #4]
   19b4c:	ldr	r1, [r1, #8]
   19b50:	lsl	r2, r2, #2
   19b54:	bl	11234 <memcpy@plt>
   19b58:	mov	r0, #0
   19b5c:	pop	{r4, r5, r6, r7, r8, pc}
   19b60:	cmp	r1, #0
   19b64:	push	{r4, r5, r6, lr}
   19b68:	mov	r5, r0
   19b6c:	blt	19bc8 <__assert_fail@plt+0x86d0>
   19b70:	ldr	r3, [r0, #48]	; 0x30
   19b74:	cmp	r1, r3
   19b78:	beq	19c3c <__assert_fail@plt+0x8744>
   19b7c:	ldr	r3, [r0, #80]	; 0x50
   19b80:	cmp	r3, #1
   19b84:	ble	19bd0 <__assert_fail@plt+0x86d8>
   19b88:	ldr	r3, [r0, #8]
   19b8c:	add	r3, r3, r1, lsl #2
   19b90:	b	19b9c <__assert_fail@plt+0x86a4>
   19b94:	cmn	r1, #1
   19b98:	beq	19bc8 <__assert_fail@plt+0x86d0>
   19b9c:	ldr	r4, [r3], #-4
   19ba0:	sub	r1, r1, #1
   19ba4:	cmn	r4, #1
   19ba8:	beq	19b94 <__assert_fail@plt+0x869c>
   19bac:	ldrb	r3, [r5, #78]	; 0x4e
   19bb0:	cmp	r3, #0
   19bb4:	bne	19c10 <__assert_fail@plt+0x8718>
   19bb8:	cmp	r4, #10
   19bbc:	beq	19bfc <__assert_fail@plt+0x8704>
   19bc0:	mov	r0, #0
   19bc4:	pop	{r4, r5, r6, pc}
   19bc8:	ldr	r0, [r5, #60]	; 0x3c
   19bcc:	pop	{r4, r5, r6, pc}
   19bd0:	ldr	r3, [r0, #4]
   19bd4:	ldr	r0, [r0, #68]	; 0x44
   19bd8:	ldrb	r3, [r3, r1]
   19bdc:	and	r2, r3, #31
   19be0:	asr	r1, r3, #5
   19be4:	ldr	r0, [r0, r1, lsl #2]
   19be8:	lsr	r0, r0, r2
   19bec:	ands	r0, r0, #1
   19bf0:	bne	19c34 <__assert_fail@plt+0x873c>
   19bf4:	cmp	r3, #10
   19bf8:	popne	{r4, r5, r6, pc}
   19bfc:	ldrb	r0, [r5, #77]	; 0x4d
   19c00:	cmp	r0, #0
   19c04:	movne	r0, #2
   19c08:	moveq	r0, #0
   19c0c:	pop	{r4, r5, r6, pc}
   19c10:	mov	r0, r4
   19c14:	bl	113fc <iswalnum@plt>
   19c18:	sub	r3, r4, #95	; 0x5f
   19c1c:	clz	r3, r3
   19c20:	lsr	r3, r3, #5
   19c24:	cmp	r0, #0
   19c28:	orrne	r3, r3, #1
   19c2c:	cmp	r3, #0
   19c30:	beq	19bb8 <__assert_fail@plt+0x86c0>
   19c34:	mov	r0, #1
   19c38:	pop	{r4, r5, r6, pc}
   19c3c:	tst	r2, #2
   19c40:	moveq	r0, #10
   19c44:	movne	r0, #8
   19c48:	pop	{r4, r5, r6, pc}
   19c4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c50:	mov	r4, r0
   19c54:	ldr	r6, [r0, #24]
   19c58:	sub	sp, sp, #36	; 0x24
   19c5c:	cmp	r6, r1
   19c60:	mov	r7, r1
   19c64:	mov	r8, r2
   19c68:	suble	r5, r1, r6
   19c6c:	ble	19cd0 <__assert_fail@plt+0x87d8>
   19c70:	ldr	r3, [r0, #80]	; 0x50
   19c74:	ldr	r1, [r0, #44]	; 0x2c
   19c78:	cmp	r3, #1
   19c7c:	ldrb	r3, [r0, #75]	; 0x4b
   19c80:	movgt	r2, #0
   19c84:	strgt	r2, [r0, #16]
   19c88:	strgt	r2, [r0, #20]
   19c8c:	tst	r8, #1
   19c90:	ldr	r2, [r0, #52]	; 0x34
   19c94:	moveq	r0, #6
   19c98:	movne	r0, #4
   19c9c:	cmp	r3, #0
   19ca0:	mov	r6, #0
   19ca4:	str	r2, [r4, #56]	; 0x38
   19ca8:	str	r6, [r4, #28]
   19cac:	str	r6, [r4, #24]
   19cb0:	str	r6, [r4, #32]
   19cb4:	strb	r6, [r4, #76]	; 0x4c
   19cb8:	ldreq	r2, [r4]
   19cbc:	moveq	r6, r3
   19cc0:	mov	r5, r7
   19cc4:	str	r0, [r4, #60]	; 0x3c
   19cc8:	str	r1, [r4, #48]	; 0x30
   19ccc:	streq	r2, [r4, #4]
   19cd0:	cmp	r5, #0
   19cd4:	ldreq	r3, [r4, #80]	; 0x50
   19cd8:	beq	19d68 <__assert_fail@plt+0x8870>
   19cdc:	ldr	r2, [r4, #32]
   19ce0:	ldrb	r3, [r4, #76]	; 0x4c
   19ce4:	cmp	r5, r2
   19ce8:	bge	19e38 <__assert_fail@plt+0x8940>
   19cec:	cmp	r3, #0
   19cf0:	bne	19f54 <__assert_fail@plt+0x8a5c>
   19cf4:	mov	r2, r8
   19cf8:	sub	r1, r5, #1
   19cfc:	mov	r0, r4
   19d00:	bl	19b60 <__assert_fail@plt+0x8668>
   19d04:	ldr	r3, [r4, #80]	; 0x50
   19d08:	cmp	r3, #1
   19d0c:	str	r0, [r4, #60]	; 0x3c
   19d10:	ble	19d2c <__assert_fail@plt+0x8834>
   19d14:	ldr	r2, [r4, #28]
   19d18:	ldr	r0, [r4, #8]
   19d1c:	sub	r2, r2, r5
   19d20:	add	r1, r0, r5, lsl #2
   19d24:	lsl	r2, r2, #2
   19d28:	bl	11204 <memmove@plt>
   19d2c:	ldrb	r3, [r4, #75]	; 0x4b
   19d30:	cmp	r3, #0
   19d34:	bne	1a094 <__assert_fail@plt+0x8b9c>
   19d38:	ldr	r0, [r4, #28]
   19d3c:	ldr	r1, [r4, #32]
   19d40:	mov	r2, r3
   19d44:	ldr	r3, [r4, #80]	; 0x50
   19d48:	sub	r0, r0, r5
   19d4c:	sub	r1, r1, r5
   19d50:	str	r0, [r4, #28]
   19d54:	str	r1, [r4, #32]
   19d58:	cmp	r2, #0
   19d5c:	ldreq	r2, [r4, #4]
   19d60:	addeq	r2, r2, r5
   19d64:	streq	r2, [r4, #4]
   19d68:	ldr	r2, [r4, #48]	; 0x30
   19d6c:	ldr	r1, [r4, #56]	; 0x38
   19d70:	cmp	r3, #1
   19d74:	sub	r3, r2, r5
   19d78:	sub	r5, r1, r5
   19d7c:	str	r7, [r4, #24]
   19d80:	str	r3, [r4, #48]	; 0x30
   19d84:	str	r5, [r4, #56]	; 0x38
   19d88:	ble	19dc0 <__assert_fail@plt+0x88c8>
   19d8c:	ldrb	r3, [r4, #72]	; 0x48
   19d90:	mov	r0, r4
   19d94:	cmp	r3, #0
   19d98:	bne	19db0 <__assert_fail@plt+0x88b8>
   19d9c:	bl	18bc8 <__assert_fail@plt+0x76d0>
   19da0:	mov	r0, #0
   19da4:	str	r0, [r4, #40]	; 0x28
   19da8:	add	sp, sp, #36	; 0x24
   19dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19db0:	bl	18d68 <__assert_fail@plt+0x7870>
   19db4:	cmp	r0, #0
   19db8:	beq	19da0 <__assert_fail@plt+0x88a8>
   19dbc:	b	19da8 <__assert_fail@plt+0x88b0>
   19dc0:	ldrb	r2, [r4, #75]	; 0x4b
   19dc4:	cmp	r2, #0
   19dc8:	streq	r3, [r4, #28]
   19dcc:	beq	19da0 <__assert_fail@plt+0x88a8>
   19dd0:	ldrb	r2, [r4, #72]	; 0x48
   19dd4:	cmp	r2, #0
   19dd8:	bne	1a308 <__assert_fail@plt+0x8e10>
   19ddc:	ldr	r0, [r4, #64]	; 0x40
   19de0:	cmp	r0, #0
   19de4:	beq	19da0 <__assert_fail@plt+0x88a8>
   19de8:	ldr	r1, [r4, #36]	; 0x24
   19dec:	ldr	r2, [r4, #28]
   19df0:	cmp	r3, r1
   19df4:	movge	r3, r1
   19df8:	cmp	r3, r2
   19dfc:	bgt	19e0c <__assert_fail@plt+0x8914>
   19e00:	b	19e2c <__assert_fail@plt+0x8934>
   19e04:	ldr	r7, [r4, #24]
   19e08:	ldr	r0, [r4, #64]	; 0x40
   19e0c:	ldm	r4, {r1, ip}
   19e10:	add	r1, r1, r2
   19e14:	ldrb	r1, [r1, r7]
   19e18:	ldrb	r1, [r0, r1]
   19e1c:	strb	r1, [ip, r2]
   19e20:	add	r2, r2, #1
   19e24:	cmp	r3, r2
   19e28:	bne	19e04 <__assert_fail@plt+0x890c>
   19e2c:	str	r2, [r4, #28]
   19e30:	str	r2, [r4, #32]
   19e34:	b	19da0 <__assert_fail@plt+0x88a8>
   19e38:	ldr	r1, [r4, #28]
   19e3c:	cmp	r3, #0
   19e40:	str	r1, [sp, #4]
   19e44:	bne	1a24c <__assert_fail@plt+0x8d54>
   19e48:	ldr	r3, [r4, #80]	; 0x50
   19e4c:	mov	r1, #0
   19e50:	cmp	r3, #1
   19e54:	str	r1, [r4, #28]
   19e58:	ble	1a108 <__assert_fail@plt+0x8c10>
   19e5c:	ldrb	r1, [r4, #73]	; 0x49
   19e60:	cmp	r1, #0
   19e64:	beq	19ecc <__assert_fail@plt+0x89d4>
   19e68:	ldr	ip, [r4]
   19e6c:	sub	r3, r5, r3
   19e70:	add	r9, ip, r6
   19e74:	add	r3, r9, r3
   19e78:	cmp	ip, r3
   19e7c:	sub	r0, r5, #1
   19e80:	movcc	ip, r3
   19e84:	add	r1, r9, r0
   19e88:	cmp	r1, ip
   19e8c:	bcc	19ecc <__assert_fail@plt+0x89d4>
   19e90:	ldrb	r3, [r9, r0]
   19e94:	and	r3, r3, #192	; 0xc0
   19e98:	cmp	r3, #128	; 0x80
   19e9c:	subeq	r3, r1, #1
   19ea0:	subeq	ip, ip, #1
   19ea4:	beq	19ec0 <__assert_fail@plt+0x89c8>
   19ea8:	b	1a15c <__assert_fail@plt+0x8c64>
   19eac:	ldrb	r0, [r1]
   19eb0:	sub	r3, r3, #1
   19eb4:	and	r0, r0, #192	; 0xc0
   19eb8:	cmp	r0, #128	; 0x80
   19ebc:	bne	1a15c <__assert_fail@plt+0x8c64>
   19ec0:	cmp	ip, r3
   19ec4:	mov	r1, r3
   19ec8:	bne	19eac <__assert_fail@plt+0x89b4>
   19ecc:	add	r6, r6, r2
   19ed0:	cmp	r7, r6
   19ed4:	ble	1a4d8 <__assert_fail@plt+0x8fe0>
   19ed8:	add	sl, r4, #16
   19edc:	add	fp, sp, #24
   19ee0:	b	19ef0 <__assert_fail@plt+0x89f8>
   19ee4:	add	r6, r6, r3
   19ee8:	cmp	r7, r6
   19eec:	ble	1a278 <__assert_fail@plt+0x8d80>
   19ef0:	ldm	sl, {r0, r1}
   19ef4:	ldr	r9, [r4, #44]	; 0x2c
   19ef8:	ldr	ip, [r4]
   19efc:	sub	r9, r9, r6
   19f00:	mov	r2, r9
   19f04:	stm	fp, {r0, r1}
   19f08:	mov	r3, sl
   19f0c:	add	r1, ip, r6
   19f10:	add	r0, sp, #16
   19f14:	bl	1449c <__assert_fail@plt+0x2fa4>
   19f18:	sub	r2, r0, #1
   19f1c:	cmn	r2, #4
   19f20:	mov	r3, r0
   19f24:	ldrls	r9, [sp, #16]
   19f28:	bls	19ee4 <__assert_fail@plt+0x89ec>
   19f2c:	mov	r2, #0
   19f30:	cmp	r9, r2
   19f34:	cmpne	r0, r2
   19f38:	ldm	fp, {r0, r1}
   19f3c:	ldrne	r3, [r4]
   19f40:	ldrbne	r2, [r3, r6]
   19f44:	mov	r3, #1
   19f48:	stm	sl, {r0, r1}
   19f4c:	mov	r9, r2
   19f50:	b	19ee4 <__assert_fail@plt+0x89ec>
   19f54:	ldr	sl, [r4, #28]
   19f58:	ldr	r9, [r4, #12]
   19f5c:	mov	r3, sl
   19f60:	mov	r2, #0
   19f64:	b	19f78 <__assert_fail@plt+0x8a80>
   19f68:	ble	19fa0 <__assert_fail@plt+0x8aa8>
   19f6c:	add	r2, r6, #1
   19f70:	cmp	r2, r3
   19f74:	bge	19f98 <__assert_fail@plt+0x8aa0>
   19f78:	add	r1, r2, r3
   19f7c:	add	r1, r1, r1, lsr #31
   19f80:	asr	r6, r1, #1
   19f84:	ldr	r1, [r9, r6, lsl #2]
   19f88:	cmp	r5, r1
   19f8c:	bge	19f68 <__assert_fail@plt+0x8a70>
   19f90:	mov	r3, r6
   19f94:	b	19f70 <__assert_fail@plt+0x8a78>
   19f98:	cmp	r5, r1
   19f9c:	addgt	r6, r6, #1
   19fa0:	sub	fp, r6, #1
   19fa4:	mov	r2, r8
   19fa8:	mov	r1, fp
   19fac:	mov	r0, r4
   19fb0:	bl	19b60 <__assert_fail@plt+0x8668>
   19fb4:	cmp	r5, sl
   19fb8:	movge	r3, #0
   19fbc:	movlt	r3, #1
   19fc0:	cmp	r5, r6
   19fc4:	movne	r3, #0
   19fc8:	cmp	r3, #0
   19fcc:	str	r0, [r4, #60]	; 0x3c
   19fd0:	bne	1a1c4 <__assert_fail@plt+0x8ccc>
   19fd4:	ldr	r2, [r4, #44]	; 0x2c
   19fd8:	ldr	r3, [r4, #52]	; 0x34
   19fdc:	sub	r2, r2, r7
   19fe0:	add	r2, r2, r5
   19fe4:	sub	r3, r3, r7
   19fe8:	add	r3, r3, r5
   19fec:	str	r2, [r4, #48]	; 0x30
   19ff0:	cmp	r6, #0
   19ff4:	mov	r2, #0
   19ff8:	str	r3, [r4, #56]	; 0x38
   19ffc:	strb	r2, [r4, #76]	; 0x4c
   1a000:	ble	1a038 <__assert_fail@plt+0x8b40>
   1a004:	sub	r3, r6, #-1073741823	; 0xc0000001
   1a008:	ldr	r2, [r9, r3, lsl #2]
   1a00c:	add	r3, r9, r3, lsl #2
   1a010:	cmp	r5, r2
   1a014:	beq	1a02c <__assert_fail@plt+0x8b34>
   1a018:	b	1a038 <__assert_fail@plt+0x8b40>
   1a01c:	ldr	r2, [r3, #-4]!
   1a020:	sub	fp, fp, #1
   1a024:	cmp	r5, r2
   1a028:	bne	1a038 <__assert_fail@plt+0x8b40>
   1a02c:	cmp	fp, #0
   1a030:	mov	r6, fp
   1a034:	bne	1a01c <__assert_fail@plt+0x8b24>
   1a038:	cmp	sl, r6
   1a03c:	ble	1a0b0 <__assert_fail@plt+0x8bb8>
   1a040:	ldr	r1, [r4, #8]
   1a044:	lsl	r0, r6, #2
   1a048:	add	r3, r1, r0
   1a04c:	ldr	r2, [r1, r6, lsl #2]
   1a050:	cmn	r2, #1
   1a054:	rsbeq	r1, r1, #4
   1a058:	beq	1a06c <__assert_fail@plt+0x8b74>
   1a05c:	b	1a0b8 <__assert_fail@plt+0x8bc0>
   1a060:	ldr	r2, [r3, #4]!
   1a064:	cmn	r2, #1
   1a068:	bne	1a0b8 <__assert_fail@plt+0x8bc0>
   1a06c:	add	r6, r6, #1
   1a070:	cmp	sl, r6
   1a074:	add	r0, r1, r3
   1a078:	bne	1a060 <__assert_fail@plt+0x8b68>
   1a07c:	mov	r2, #0
   1a080:	str	r2, [r4, #28]
   1a084:	str	r2, [r4, #32]
   1a088:	ldrb	r2, [r4, #75]	; 0x4b
   1a08c:	ldr	r3, [r4, #80]	; 0x50
   1a090:	b	19d58 <__assert_fail@plt+0x8860>
   1a094:	ldr	r0, [r4, #4]
   1a098:	ldr	r2, [r4, #28]
   1a09c:	add	r1, r0, r5
   1a0a0:	sub	r2, r2, r5
   1a0a4:	bl	11204 <memmove@plt>
   1a0a8:	ldrb	r3, [r4, #75]	; 0x4b
   1a0ac:	b	19d38 <__assert_fail@plt+0x8840>
   1a0b0:	beq	1a07c <__assert_fail@plt+0x8b84>
   1a0b4:	lsl	r0, r6, #2
   1a0b8:	ldr	r2, [r9, r0]
   1a0bc:	sub	r2, r2, r5
   1a0c0:	cmp	r2, #0
   1a0c4:	str	r2, [r4, #28]
   1a0c8:	beq	1a084 <__assert_fail@plt+0x8b8c>
   1a0cc:	ble	1a0f4 <__assert_fail@plt+0x8bfc>
   1a0d0:	ldr	r1, [r4, #8]
   1a0d4:	mov	r3, #0
   1a0d8:	sub	r1, r1, #4
   1a0dc:	mvn	r0, #0
   1a0e0:	str	r0, [r1, #4]!
   1a0e4:	ldr	r2, [r4, #28]
   1a0e8:	add	r3, r3, #1
   1a0ec:	cmp	r2, r3
   1a0f0:	bgt	1a0e0 <__assert_fail@plt+0x8be8>
   1a0f4:	mov	r1, #255	; 0xff
   1a0f8:	ldr	r0, [r4, #4]
   1a0fc:	bl	11414 <memset@plt>
   1a100:	ldr	r2, [r4, #28]
   1a104:	b	1a084 <__assert_fail@plt+0x8b8c>
   1a108:	ldr	r2, [r4]
   1a10c:	ldr	ip, [r4, #64]	; 0x40
   1a110:	add	r2, r2, r5
   1a114:	add	r6, r2, r6
   1a118:	cmp	ip, #0
   1a11c:	ldrb	r0, [r6, #-1]
   1a120:	str	r1, [r4, #32]
   1a124:	ldrbne	r0, [ip, r0]
   1a128:	ldr	ip, [r4, #68]	; 0x44
   1a12c:	and	r2, r0, #31
   1a130:	asr	r1, r0, #5
   1a134:	ldr	r1, [ip, r1, lsl #2]
   1a138:	lsr	r2, r1, r2
   1a13c:	ands	r1, r2, #1
   1a140:	movne	r1, #1
   1a144:	bne	1a150 <__assert_fail@plt+0x8c58>
   1a148:	cmp	r0, #10
   1a14c:	beq	1a404 <__assert_fail@plt+0x8f0c>
   1a150:	ldrb	r2, [r4, #75]	; 0x4b
   1a154:	str	r1, [r4, #60]	; 0x3c
   1a158:	b	19d58 <__assert_fail@plt+0x8860>
   1a15c:	ldr	r2, [r4, #48]	; 0x30
   1a160:	ldr	r3, [r4, #64]	; 0x40
   1a164:	add	r2, r9, r2
   1a168:	cmp	r3, #0
   1a16c:	mov	r6, r1
   1a170:	sub	r2, r2, r1
   1a174:	bne	1a418 <__assert_fail@plt+0x8f20>
   1a178:	add	fp, sp, #24
   1a17c:	mov	r3, fp
   1a180:	mov	sl, #0
   1a184:	add	r0, sp, #12
   1a188:	str	sl, [sp, #24]
   1a18c:	str	sl, [sp, #28]
   1a190:	bl	1449c <__assert_fail@plt+0x2fa4>
   1a194:	add	r9, r9, r5
   1a198:	sub	r6, r9, r6
   1a19c:	cmp	r0, r6
   1a1a0:	movcc	r3, #0
   1a1a4:	movcs	r3, #1
   1a1a8:	cmn	r0, #3
   1a1ac:	movhi	r3, #0
   1a1b0:	cmp	r3, sl
   1a1b4:	bne	1a2b8 <__assert_fail@plt+0x8dc0>
   1a1b8:	ldr	r6, [r4, #24]
   1a1bc:	ldr	r2, [r4, #32]
   1a1c0:	b	19ecc <__assert_fail@plt+0x89d4>
   1a1c4:	ldr	r3, [r9, r6, lsl #2]
   1a1c8:	cmp	r5, r3
   1a1cc:	bne	19fd4 <__assert_fail@plt+0x8adc>
   1a1d0:	ldr	r0, [r4, #8]
   1a1d4:	sub	r2, sl, r5
   1a1d8:	lsl	r6, r5, #2
   1a1dc:	lsl	r2, r2, #2
   1a1e0:	add	r1, r0, r6
   1a1e4:	bl	11204 <memmove@plt>
   1a1e8:	ldr	r0, [r4, #4]
   1a1ec:	ldr	r2, [r4, #28]
   1a1f0:	add	r1, r0, r5
   1a1f4:	sub	r2, r2, r5
   1a1f8:	bl	11204 <memmove@plt>
   1a1fc:	ldr	r3, [r4, #28]
   1a200:	ldr	r2, [r4, #32]
   1a204:	sub	r3, r3, r5
   1a208:	sub	r2, r2, r5
   1a20c:	cmp	r3, #0
   1a210:	str	r3, [r4, #28]
   1a214:	str	r2, [r4, #32]
   1a218:	ble	1a088 <__assert_fail@plt+0x8b90>
   1a21c:	ldr	r1, [r4, #12]
   1a220:	mov	r2, #0
   1a224:	add	r0, r1, r6
   1a228:	sub	r1, r1, #4
   1a22c:	ldr	r3, [r0], #4
   1a230:	add	r2, r2, #1
   1a234:	sub	r3, r3, r5
   1a238:	str	r3, [r1, #4]!
   1a23c:	ldr	r3, [r4, #28]
   1a240:	cmp	r3, r2
   1a244:	bgt	1a22c <__assert_fail@plt+0x8d34>
   1a248:	b	1a088 <__assert_fail@plt+0x8b90>
   1a24c:	ldr	r1, [r4, #44]	; 0x2c
   1a250:	ldr	r3, [r4, #52]	; 0x34
   1a254:	sub	r1, r1, r7
   1a258:	add	r1, r1, r5
   1a25c:	sub	r3, r3, r7
   1a260:	add	r3, r3, r5
   1a264:	str	r1, [r4, #48]	; 0x30
   1a268:	mov	r1, #0
   1a26c:	str	r3, [r4, #56]	; 0x38
   1a270:	strb	r1, [r4, #76]	; 0x4c
   1a274:	b	19e48 <__assert_fail@plt+0x8950>
   1a278:	sub	r6, r6, r7
   1a27c:	cmn	r9, #1
   1a280:	str	r6, [r4, #28]
   1a284:	bne	1a2d4 <__assert_fail@plt+0x8ddc>
   1a288:	ldr	r3, [sp, #4]
   1a28c:	mov	r2, r8
   1a290:	sub	r1, r3, #1
   1a294:	mov	r0, r4
   1a298:	bl	19b60 <__assert_fail@plt+0x8668>
   1a29c:	str	r0, [r4, #60]	; 0x3c
   1a2a0:	cmp	r6, #0
   1a2a4:	bne	1a38c <__assert_fail@plt+0x8e94>
   1a2a8:	ldrb	r2, [r4, #75]	; 0x4b
   1a2ac:	str	r6, [r4, #32]
   1a2b0:	ldr	r3, [r4, #80]	; 0x50
   1a2b4:	b	19d58 <__assert_fail@plt+0x8860>
   1a2b8:	ldr	r9, [sp, #12]
   1a2bc:	sub	r6, r0, r6
   1a2c0:	cmn	r9, #1
   1a2c4:	str	sl, [r4, #16]
   1a2c8:	str	sl, [r4, #20]
   1a2cc:	str	r6, [r4, #28]
   1a2d0:	beq	1a1b8 <__assert_fail@plt+0x8cc0>
   1a2d4:	ldrb	r3, [r4, #78]	; 0x4e
   1a2d8:	cmp	r3, #0
   1a2dc:	bne	1a3dc <__assert_fail@plt+0x8ee4>
   1a2e0:	cmp	r9, #10
   1a2e4:	movne	r3, #0
   1a2e8:	beq	1a2f4 <__assert_fail@plt+0x8dfc>
   1a2ec:	str	r3, [r4, #60]	; 0x3c
   1a2f0:	b	1a2a0 <__assert_fail@plt+0x8da8>
   1a2f4:	ldrb	r3, [r4, #77]	; 0x4d
   1a2f8:	cmp	r3, #0
   1a2fc:	movne	r3, #2
   1a300:	moveq	r3, #0
   1a304:	b	1a2ec <__assert_fail@plt+0x8df4>
   1a308:	ldr	r5, [r4, #36]	; 0x24
   1a30c:	ldr	r6, [r4, #28]
   1a310:	cmp	r3, r5
   1a314:	movlt	r5, r3
   1a318:	cmp	r5, r6
   1a31c:	ble	1a4e4 <__assert_fail@plt+0x8fec>
   1a320:	bl	11378 <__ctype_toupper_loc@plt>
   1a324:	b	1a348 <__assert_fail@plt+0x8e50>
   1a328:	ldr	r1, [r0]
   1a32c:	ldr	r2, [r4, #4]
   1a330:	ldr	r3, [r1, r3, lsl #2]
   1a334:	strb	r3, [r2, r6]
   1a338:	add	r6, r6, #1
   1a33c:	cmp	r6, r5
   1a340:	beq	1a380 <__assert_fail@plt+0x8e88>
   1a344:	ldr	r7, [r4, #24]
   1a348:	ldr	r3, [r4]
   1a34c:	ldr	r2, [r4, #64]	; 0x40
   1a350:	add	r3, r3, r6
   1a354:	cmp	r2, #0
   1a358:	ldrb	r3, [r3, r7]
   1a35c:	beq	1a328 <__assert_fail@plt+0x8e30>
   1a360:	ldrb	r3, [r2, r3]
   1a364:	ldr	ip, [r0]
   1a368:	ldr	r1, [r4, #4]
   1a36c:	ldr	r3, [ip, r3, lsl #2]
   1a370:	strb	r3, [r1, r6]
   1a374:	add	r6, r6, #1
   1a378:	cmp	r5, r6
   1a37c:	bne	1a344 <__assert_fail@plt+0x8e4c>
   1a380:	str	r5, [r4, #28]
   1a384:	str	r5, [r4, #32]
   1a388:	b	19da0 <__assert_fail@plt+0x88a8>
   1a38c:	ble	1a3b4 <__assert_fail@plt+0x8ebc>
   1a390:	ldr	r2, [r4, #8]
   1a394:	mov	r3, #0
   1a398:	sub	r2, r2, #4
   1a39c:	mvn	r1, #0
   1a3a0:	str	r1, [r2, #4]!
   1a3a4:	ldr	r6, [r4, #28]
   1a3a8:	add	r3, r3, #1
   1a3ac:	cmp	r6, r3
   1a3b0:	bgt	1a3a0 <__assert_fail@plt+0x8ea8>
   1a3b4:	ldrb	r2, [r4, #75]	; 0x4b
   1a3b8:	cmp	r2, #0
   1a3bc:	beq	1a2ac <__assert_fail@plt+0x8db4>
   1a3c0:	mov	r2, r6
   1a3c4:	mov	r1, #255	; 0xff
   1a3c8:	ldr	r0, [r4, #4]
   1a3cc:	bl	11414 <memset@plt>
   1a3d0:	ldrb	r2, [r4, #75]	; 0x4b
   1a3d4:	ldr	r6, [r4, #28]
   1a3d8:	b	1a2ac <__assert_fail@plt+0x8db4>
   1a3dc:	mov	r0, r9
   1a3e0:	bl	113fc <iswalnum@plt>
   1a3e4:	cmp	r9, #95	; 0x5f
   1a3e8:	clz	r0, r0
   1a3ec:	lsr	r0, r0, #5
   1a3f0:	moveq	r0, #0
   1a3f4:	cmp	r0, #0
   1a3f8:	moveq	r3, #1
   1a3fc:	bne	1a2e0 <__assert_fail@plt+0x8de8>
   1a400:	b	1a2ec <__assert_fail@plt+0x8df4>
   1a404:	ldrb	r1, [r4, #77]	; 0x4d
   1a408:	cmp	r1, #0
   1a40c:	movne	r1, #2
   1a410:	moveq	r1, #0
   1a414:	b	1a150 <__assert_fail@plt+0x8c58>
   1a418:	cmp	r2, #6
   1a41c:	movlt	r1, r2
   1a420:	movge	r1, #6
   1a424:	subs	r0, r1, #1
   1a428:	bmi	1a4d0 <__assert_fail@plt+0x8fd8>
   1a42c:	ldrb	lr, [r6, r0]
   1a430:	add	ip, sp, #32
   1a434:	add	ip, ip, r0
   1a438:	sub	r0, r1, #2
   1a43c:	ldrb	lr, [r3, lr]
   1a440:	cmn	r0, #1
   1a444:	strb	lr, [ip, #-16]
   1a448:	beq	1a4d0 <__assert_fail@plt+0x8fd8>
   1a44c:	ldrb	lr, [r6, r0]
   1a450:	add	ip, sp, #32
   1a454:	add	ip, ip, r0
   1a458:	sub	r0, r1, #3
   1a45c:	ldrb	lr, [r3, lr]
   1a460:	cmn	r0, #1
   1a464:	strb	lr, [ip, #-16]
   1a468:	beq	1a4d0 <__assert_fail@plt+0x8fd8>
   1a46c:	ldrb	lr, [r6, r0]
   1a470:	add	ip, sp, #32
   1a474:	add	ip, ip, r0
   1a478:	sub	r0, r1, #4
   1a47c:	ldrb	lr, [r3, lr]
   1a480:	cmn	r0, #1
   1a484:	strb	lr, [ip, #-16]
   1a488:	beq	1a4d0 <__assert_fail@plt+0x8fd8>
   1a48c:	ldrb	lr, [r6, r0]
   1a490:	add	ip, sp, #32
   1a494:	add	ip, ip, r0
   1a498:	sub	r0, r1, #5
   1a49c:	ldrb	lr, [r3, lr]
   1a4a0:	cmn	r0, #1
   1a4a4:	strb	lr, [ip, #-16]
   1a4a8:	beq	1a4d0 <__assert_fail@plt+0x8fd8>
   1a4ac:	ldrb	ip, [r6, r0]
   1a4b0:	add	lr, sp, #32
   1a4b4:	cmp	r1, #6
   1a4b8:	add	r0, lr, r0
   1a4bc:	ldrb	r1, [r3, ip]
   1a4c0:	strb	r1, [r0, #-16]
   1a4c4:	ldrbeq	r1, [r6]
   1a4c8:	ldrbeq	r3, [r3, r1]
   1a4cc:	strbeq	r3, [sp, #16]
   1a4d0:	add	r1, sp, #16
   1a4d4:	b	1a178 <__assert_fail@plt+0x8c80>
   1a4d8:	sub	r6, r6, r7
   1a4dc:	str	r6, [r4, #28]
   1a4e0:	b	1a288 <__assert_fail@plt+0x8d90>
   1a4e4:	mov	r5, r6
   1a4e8:	b	1a380 <__assert_fail@plt+0x8e88>
   1a4ec:	push	{r4, r5, r6, lr}
   1a4f0:	mov	r4, r1
   1a4f4:	mov	r1, r2
   1a4f8:	ldr	r2, [r0, #88]	; 0x58
   1a4fc:	mov	r5, r0
   1a500:	bl	19b60 <__assert_fail@plt+0x8668>
   1a504:	ldr	r2, [r4, #8]
   1a508:	cmp	r2, #0
   1a50c:	ble	1a5cc <__assert_fail@plt+0x90d4>
   1a510:	ldr	r1, [r5, #84]	; 0x54
   1a514:	ands	r3, r0, #1
   1a518:	ldr	lr, [r4, #12]
   1a51c:	ldr	ip, [r1]
   1a520:	and	r1, r0, #2
   1a524:	and	r0, r0, #8
   1a528:	bne	1a67c <__assert_fail@plt+0x9184>
   1a52c:	cmp	r1, #0
   1a530:	ldr	r5, [pc, #700]	; 1a7f4 <__assert_fail@plt+0x92fc>
   1a534:	sub	lr, lr, #4
   1a538:	beq	1a5d4 <__assert_fail@plt+0x90dc>
   1a53c:	cmp	r0, #0
   1a540:	bne	1a5a8 <__assert_fail@plt+0x90b0>
   1a544:	mov	r3, r0
   1a548:	b	1a554 <__assert_fail@plt+0x905c>
   1a54c:	cmp	r2, r3
   1a550:	beq	1a5cc <__assert_fail@plt+0x90d4>
   1a554:	ldr	r0, [lr, #4]!
   1a558:	add	r3, r3, #1
   1a55c:	add	r1, ip, r0, lsl #3
   1a560:	ldrb	r4, [r1, #4]
   1a564:	ldr	r1, [r1, #4]
   1a568:	cmp	r4, #2
   1a56c:	and	r1, r5, r1, lsr #8
   1a570:	bne	1a54c <__assert_fail@plt+0x9054>
   1a574:	cmp	r1, #0
   1a578:	popeq	{r4, r5, r6, pc}
   1a57c:	tst	r1, #4
   1a580:	bne	1a54c <__assert_fail@plt+0x9054>
   1a584:	tst	r1, #128	; 0x80
   1a588:	popeq	{r4, r5, r6, pc}
   1a58c:	b	1a54c <__assert_fail@plt+0x9054>
   1a590:	cmp	r1, #0
   1a594:	popeq	{r4, r5, r6, pc}
   1a598:	tst	r1, #4
   1a59c:	popeq	{r4, r5, r6, pc}
   1a5a0:	cmp	r2, r3
   1a5a4:	beq	1a5cc <__assert_fail@plt+0x90d4>
   1a5a8:	ldr	r0, [lr, #4]!
   1a5ac:	add	r3, r3, #1
   1a5b0:	add	r1, ip, r0, lsl #3
   1a5b4:	ldrb	r4, [r1, #4]
   1a5b8:	ldr	r1, [r1, #4]
   1a5bc:	cmp	r4, #2
   1a5c0:	and	r1, r5, r1, lsr #8
   1a5c4:	bne	1a5a0 <__assert_fail@plt+0x90a8>
   1a5c8:	b	1a590 <__assert_fail@plt+0x9098>
   1a5cc:	mov	r0, #0
   1a5d0:	pop	{r4, r5, r6, pc}
   1a5d4:	cmp	r0, #0
   1a5d8:	beq	1a628 <__assert_fail@plt+0x9130>
   1a5dc:	mov	r3, r1
   1a5e0:	b	1a5ec <__assert_fail@plt+0x90f4>
   1a5e4:	cmp	r2, r3
   1a5e8:	beq	1a5cc <__assert_fail@plt+0x90d4>
   1a5ec:	ldr	r0, [lr, #4]!
   1a5f0:	add	r3, r3, #1
   1a5f4:	add	r1, ip, r0, lsl #3
   1a5f8:	ldrb	r4, [r1, #4]
   1a5fc:	ldr	r1, [r1, #4]
   1a600:	cmp	r4, #2
   1a604:	and	r1, r5, r1, lsr #8
   1a608:	bne	1a5e4 <__assert_fail@plt+0x90ec>
   1a60c:	cmp	r1, #0
   1a610:	popeq	{r4, r5, r6, pc}
   1a614:	tst	r1, #4
   1a618:	bne	1a5e4 <__assert_fail@plt+0x90ec>
   1a61c:	tst	r1, #32
   1a620:	popeq	{r4, r5, r6, pc}
   1a624:	b	1a5e4 <__assert_fail@plt+0x90ec>
   1a628:	mov	r3, r0
   1a62c:	b	1a63c <__assert_fail@plt+0x9144>
   1a630:	add	r3, r3, #1
   1a634:	cmp	r3, r2
   1a638:	beq	1a5cc <__assert_fail@plt+0x90d4>
   1a63c:	ldr	r0, [lr, #4]!
   1a640:	add	r1, ip, r0, lsl #3
   1a644:	ldrb	r4, [r1, #4]
   1a648:	ldr	r1, [r1, #4]
   1a64c:	cmp	r4, #2
   1a650:	and	r1, r5, r1, lsr #8
   1a654:	bne	1a630 <__assert_fail@plt+0x9138>
   1a658:	cmp	r1, #0
   1a65c:	popeq	{r4, r5, r6, pc}
   1a660:	tst	r1, #4
   1a664:	bne	1a630 <__assert_fail@plt+0x9138>
   1a668:	tst	r1, #32
   1a66c:	bne	1a630 <__assert_fail@plt+0x9138>
   1a670:	tst	r1, #128	; 0x80
   1a674:	bne	1a630 <__assert_fail@plt+0x9138>
   1a678:	pop	{r4, r5, r6, pc}
   1a67c:	cmp	r1, #0
   1a680:	beq	1a6e0 <__assert_fail@plt+0x91e8>
   1a684:	cmp	r0, #0
   1a688:	ldr	r5, [pc, #356]	; 1a7f4 <__assert_fail@plt+0x92fc>
   1a68c:	sub	lr, lr, #4
   1a690:	beq	1a7a4 <__assert_fail@plt+0x92ac>
   1a694:	mov	r1, #0
   1a698:	b	1a6a4 <__assert_fail@plt+0x91ac>
   1a69c:	cmp	r2, r1
   1a6a0:	beq	1a5cc <__assert_fail@plt+0x90d4>
   1a6a4:	ldr	r0, [lr, #4]!
   1a6a8:	add	r1, r1, #1
   1a6ac:	add	r3, ip, r0, lsl #3
   1a6b0:	ldrb	r4, [r3, #4]
   1a6b4:	ldr	r3, [r3, #4]
   1a6b8:	cmp	r4, #2
   1a6bc:	and	r3, r5, r3, lsr #8
   1a6c0:	bne	1a69c <__assert_fail@plt+0x91a4>
   1a6c4:	cmp	r3, #0
   1a6c8:	popeq	{r4, r5, r6, pc}
   1a6cc:	tst	r3, #4
   1a6d0:	beq	1a73c <__assert_fail@plt+0x9244>
   1a6d4:	tst	r3, #8
   1a6d8:	popeq	{r4, r5, r6, pc}
   1a6dc:	b	1a69c <__assert_fail@plt+0x91a4>
   1a6e0:	cmp	r0, #0
   1a6e4:	beq	1a748 <__assert_fail@plt+0x9250>
   1a6e8:	ldr	r5, [pc, #260]	; 1a7f4 <__assert_fail@plt+0x92fc>
   1a6ec:	sub	lr, lr, #4
   1a6f0:	mov	r3, r1
   1a6f4:	b	1a704 <__assert_fail@plt+0x920c>
   1a6f8:	add	r3, r3, #1
   1a6fc:	cmp	r2, r3
   1a700:	beq	1a5cc <__assert_fail@plt+0x90d4>
   1a704:	ldr	r0, [lr, #4]!
   1a708:	add	r1, ip, r0, lsl #3
   1a70c:	ldrb	r4, [r1, #4]
   1a710:	ldr	r1, [r1, #4]
   1a714:	cmp	r4, #2
   1a718:	and	r1, r5, r1, lsr #8
   1a71c:	bne	1a6f8 <__assert_fail@plt+0x9200>
   1a720:	cmp	r1, #0
   1a724:	popeq	{r4, r5, r6, pc}
   1a728:	tst	r1, #8
   1a72c:	bne	1a6f8 <__assert_fail@plt+0x9200>
   1a730:	tst	r1, #32
   1a734:	popeq	{r4, r5, r6, pc}
   1a738:	b	1a6f8 <__assert_fail@plt+0x9200>
   1a73c:	tst	r3, #8
   1a740:	bne	1a69c <__assert_fail@plt+0x91a4>
   1a744:	pop	{r4, r5, r6, pc}
   1a748:	ldr	r4, [pc, #164]	; 1a7f4 <__assert_fail@plt+0x92fc>
   1a74c:	sub	lr, lr, #4
   1a750:	mov	r3, r0
   1a754:	b	1a764 <__assert_fail@plt+0x926c>
   1a758:	add	r3, r3, #1
   1a75c:	cmp	r2, r3
   1a760:	beq	1a5cc <__assert_fail@plt+0x90d4>
   1a764:	ldr	r0, [lr, #4]!
   1a768:	add	r1, ip, r0, lsl #3
   1a76c:	ldrb	r5, [r1, #4]
   1a770:	ldr	r1, [r1, #4]
   1a774:	cmp	r5, #2
   1a778:	and	r1, r4, r1, lsr #8
   1a77c:	bne	1a758 <__assert_fail@plt+0x9260>
   1a780:	cmp	r1, #0
   1a784:	beq	1a7f0 <__assert_fail@plt+0x92f8>
   1a788:	tst	r1, #8
   1a78c:	bne	1a758 <__assert_fail@plt+0x9260>
   1a790:	tst	r1, #32
   1a794:	bne	1a758 <__assert_fail@plt+0x9260>
   1a798:	tst	r1, #128	; 0x80
   1a79c:	bne	1a758 <__assert_fail@plt+0x9260>
   1a7a0:	pop	{r4, r5, r6, pc}
   1a7a4:	mov	r3, r0
   1a7a8:	b	1a7b8 <__assert_fail@plt+0x92c0>
   1a7ac:	add	r3, r3, #1
   1a7b0:	cmp	r2, r3
   1a7b4:	beq	1a5cc <__assert_fail@plt+0x90d4>
   1a7b8:	ldr	r0, [lr, #4]!
   1a7bc:	add	r1, ip, r0, lsl #3
   1a7c0:	ldrb	r4, [r1, #4]
   1a7c4:	ldr	r1, [r1, #4]
   1a7c8:	cmp	r4, #2
   1a7cc:	and	r1, r5, r1, lsr #8
   1a7d0:	bne	1a7ac <__assert_fail@plt+0x92b4>
   1a7d4:	cmp	r1, #0
   1a7d8:	popeq	{r4, r5, r6, pc}
   1a7dc:	tst	r1, #8
   1a7e0:	bne	1a7ac <__assert_fail@plt+0x92b4>
   1a7e4:	tst	r1, #128	; 0x80
   1a7e8:	popeq	{r4, r5, r6, pc}
   1a7ec:	b	1a7ac <__assert_fail@plt+0x92b4>
   1a7f0:	pop	{r4, r5, r6, pc}
   1a7f4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1a7f8:	ldr	ip, [r1]
   1a7fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a800:	cmp	ip, #0
   1a804:	sub	sp, sp, #20
   1a808:	ldr	r6, [r0, #84]	; 0x54
   1a80c:	ble	1a8d8 <__assert_fail@plt+0x93e0>
   1a810:	mov	r7, r2
   1a814:	str	r3, [sp, #8]
   1a818:	mov	r8, r0
   1a81c:	str	r1, [sp, #4]
   1a820:	mov	r4, #0
   1a824:	mov	r2, #24
   1a828:	mov	r9, #1
   1a82c:	b	1a838 <__assert_fail@plt+0x9340>
   1a830:	cmp	r4, ip
   1a834:	bge	1a8d8 <__assert_fail@plt+0x93e0>
   1a838:	ldr	r1, [r7]
   1a83c:	ldr	r3, [r6]
   1a840:	ldr	r5, [r1, r4, lsl #2]
   1a844:	add	r4, r4, #1
   1a848:	add	r1, r3, r5, lsl #3
   1a84c:	ldrb	r1, [r1, #4]
   1a850:	cmp	r1, #8
   1a854:	bne	1a830 <__assert_fail@plt+0x9338>
   1a858:	ldr	r3, [r3, r5, lsl #3]
   1a85c:	cmp	r3, #31
   1a860:	bgt	1a830 <__assert_fail@plt+0x9338>
   1a864:	ldr	r1, [r6, #80]	; 0x50
   1a868:	lsr	r3, r1, r3
   1a86c:	tst	r3, #1
   1a870:	beq	1a830 <__assert_fail@plt+0x9338>
   1a874:	ldr	sl, [r8, #124]	; 0x7c
   1a878:	ldr	r3, [r8, #128]	; 0x80
   1a87c:	ldr	fp, [r8, #132]	; 0x84
   1a880:	cmp	r3, sl
   1a884:	beq	1a8ec <__assert_fail@plt+0x93f4>
   1a888:	mov	r1, r2
   1a88c:	mov	r0, r9
   1a890:	str	r2, [sp, #12]
   1a894:	bl	2a748 <__assert_fail@plt+0x19250>
   1a898:	ldr	r3, [r8, #124]	; 0x7c
   1a89c:	ldr	r1, [r8, #132]	; 0x84
   1a8a0:	add	ip, r3, #1
   1a8a4:	str	r0, [fp, sl, lsl #2]
   1a8a8:	ldr	r3, [r1, r3, lsl #2]
   1a8ac:	cmp	r3, #0
   1a8b0:	beq	1a8e4 <__assert_fail@plt+0x93ec>
   1a8b4:	ldr	r2, [sp, #8]
   1a8b8:	str	r5, [r3, #4]
   1a8bc:	str	ip, [r8, #124]	; 0x7c
   1a8c0:	str	r2, [r3]
   1a8c4:	ldr	r3, [sp, #4]
   1a8c8:	ldr	r2, [sp, #12]
   1a8cc:	ldr	ip, [r3]
   1a8d0:	cmp	r4, ip
   1a8d4:	blt	1a838 <__assert_fail@plt+0x9340>
   1a8d8:	mov	r0, #0
   1a8dc:	add	sp, sp, #20
   1a8e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8e4:	mov	r0, #12
   1a8e8:	b	1a8dc <__assert_fail@plt+0x93e4>
   1a8ec:	mov	r0, fp
   1a8f0:	lsl	r1, sl, #3
   1a8f4:	str	r2, [sp, #12]
   1a8f8:	bl	2a7bc <__assert_fail@plt+0x192c4>
   1a8fc:	lsl	r3, sl, #1
   1a900:	ldr	r2, [sp, #12]
   1a904:	subs	fp, r0, #0
   1a908:	beq	1a8e4 <__assert_fail@plt+0x93ec>
   1a90c:	ldr	sl, [r8, #124]	; 0x7c
   1a910:	str	fp, [r8, #132]	; 0x84
   1a914:	str	r3, [r8, #128]	; 0x80
   1a918:	b	1a888 <__assert_fail@plt+0x9390>
   1a91c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a920:	mov	r6, r0
   1a924:	ldr	ip, [sp, #40]	; 0x28
   1a928:	mov	r5, r1
   1a92c:	tst	ip, #4194304	; 0x400000
   1a930:	mov	sl, r2
   1a934:	mov	r7, r3
   1a938:	ldr	r9, [sp, #32]
   1a93c:	beq	1a95c <__assert_fail@plt+0x9464>
   1a940:	ldr	r1, [pc, #2196]	; 1b1dc <__assert_fail@plt+0x9ce4>
   1a944:	ldr	r0, [sp, #36]	; 0x24
   1a948:	bl	111bc <strcmp@plt>
   1a94c:	cmp	r0, #0
   1a950:	bne	1aa3c <__assert_fail@plt+0x9544>
   1a954:	ldr	r3, [pc, #2180]	; 1b1e0 <__assert_fail@plt+0x9ce8>
   1a958:	str	r3, [sp, #36]	; 0x24
   1a95c:	ldr	r4, [r7]
   1a960:	ldr	r3, [r9]
   1a964:	cmp	r3, r4
   1a968:	beq	1aa6c <__assert_fail@plt+0x9574>
   1a96c:	ldr	r8, [sl]
   1a970:	add	r3, r4, #1
   1a974:	str	r3, [r7]
   1a978:	ldr	r0, [sp, #36]	; 0x24
   1a97c:	bl	1118c <wctype@plt>
   1a980:	ldr	r1, [pc, #2140]	; 1b1e4 <__assert_fail@plt+0x9cec>
   1a984:	str	r0, [r8, r4, lsl #2]
   1a988:	ldr	r0, [sp, #36]	; 0x24
   1a98c:	bl	111bc <strcmp@plt>
   1a990:	subs	r4, r0, #0
   1a994:	beq	1a9f4 <__assert_fail@plt+0x94fc>
   1a998:	ldr	r1, [pc, #2120]	; 1b1e8 <__assert_fail@plt+0x9cf0>
   1a99c:	ldr	r0, [sp, #36]	; 0x24
   1a9a0:	bl	111bc <strcmp@plt>
   1a9a4:	subs	r4, r0, #0
   1a9a8:	bne	1aa98 <__assert_fail@plt+0x95a0>
   1a9ac:	cmp	r6, #0
   1a9b0:	bne	1ac4c <__assert_fail@plt+0x9754>
   1a9b4:	bl	113a8 <__ctype_b_loc@plt>
   1a9b8:	mov	ip, #1
   1a9bc:	ldr	r3, [r0]
   1a9c0:	sub	r3, r3, #2
   1a9c4:	ldrh	r2, [r3, #2]!
   1a9c8:	asr	r1, r4, #5
   1a9cc:	and	r0, r4, #31
   1a9d0:	tst	r2, #2
   1a9d4:	add	r4, r4, #1
   1a9d8:	ldrne	r2, [r5, r1, lsl #2]
   1a9dc:	orrne	r2, r2, ip, lsl r0
   1a9e0:	strne	r2, [r5, r1, lsl #2]
   1a9e4:	cmp	r4, #256	; 0x100
   1a9e8:	bne	1a9c4 <__assert_fail@plt+0x94cc>
   1a9ec:	mov	r0, #0
   1a9f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a9f4:	cmp	r6, #0
   1a9f8:	bne	1abb8 <__assert_fail@plt+0x96c0>
   1a9fc:	bl	113a8 <__ctype_b_loc@plt>
   1aa00:	mov	lr, #1
   1aa04:	ldr	r3, [r0]
   1aa08:	sub	r3, r3, #2
   1aa0c:	ldrh	r0, [r3, #2]!
   1aa10:	asr	r2, r4, #5
   1aa14:	and	ip, r4, #31
   1aa18:	tst	r0, #8
   1aa1c:	add	r4, r4, #1
   1aa20:	ldrne	r1, [r5, r2, lsl #2]
   1aa24:	orrne	r1, r1, lr, lsl ip
   1aa28:	strne	r1, [r5, r2, lsl #2]
   1aa2c:	cmp	r4, #256	; 0x100
   1aa30:	bne	1aa0c <__assert_fail@plt+0x9514>
   1aa34:	mov	r0, #0
   1aa38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aa3c:	ldr	r0, [sp, #36]	; 0x24
   1aa40:	ldr	r1, [pc, #1956]	; 1b1ec <__assert_fail@plt+0x9cf4>
   1aa44:	bl	111bc <strcmp@plt>
   1aa48:	ldr	r3, [pc, #1936]	; 1b1e0 <__assert_fail@plt+0x9ce8>
   1aa4c:	ldr	r2, [sp, #36]	; 0x24
   1aa50:	ldr	r4, [r7]
   1aa54:	cmp	r0, #0
   1aa58:	moveq	r2, r3
   1aa5c:	ldr	r3, [r9]
   1aa60:	str	r2, [sp, #36]	; 0x24
   1aa64:	cmp	r3, r4
   1aa68:	bne	1a96c <__assert_fail@plt+0x9474>
   1aa6c:	lsl	r4, r4, #1
   1aa70:	add	r4, r4, #1
   1aa74:	ldr	r0, [sl]
   1aa78:	lsl	r1, r4, #2
   1aa7c:	bl	2a7bc <__assert_fail@plt+0x192c4>
   1aa80:	subs	r8, r0, #0
   1aa84:	beq	1ad44 <__assert_fail@plt+0x984c>
   1aa88:	str	r8, [sl]
   1aa8c:	str	r4, [r9]
   1aa90:	ldr	r4, [r7]
   1aa94:	b	1a970 <__assert_fail@plt+0x9478>
   1aa98:	ldr	r1, [pc, #1868]	; 1b1ec <__assert_fail@plt+0x9cf4>
   1aa9c:	ldr	r0, [sp, #36]	; 0x24
   1aaa0:	bl	111bc <strcmp@plt>
   1aaa4:	subs	r4, r0, #0
   1aaa8:	beq	1ab04 <__assert_fail@plt+0x960c>
   1aaac:	ldr	r1, [pc, #1852]	; 1b1f0 <__assert_fail@plt+0x9cf8>
   1aab0:	ldr	r0, [sp, #36]	; 0x24
   1aab4:	bl	111bc <strcmp@plt>
   1aab8:	subs	r4, r0, #0
   1aabc:	bne	1ab4c <__assert_fail@plt+0x9654>
   1aac0:	cmp	r6, #0
   1aac4:	bne	1ada4 <__assert_fail@plt+0x98ac>
   1aac8:	bl	113a8 <__ctype_b_loc@plt>
   1aacc:	mov	ip, #1
   1aad0:	ldr	r3, [r0]
   1aad4:	sub	r3, r3, #2
   1aad8:	ldrh	r2, [r3, #2]!
   1aadc:	asr	r1, r4, #5
   1aae0:	and	r0, r4, #31
   1aae4:	tst	r2, #8192	; 0x2000
   1aae8:	add	r4, r4, #1
   1aaec:	ldrne	r2, [r5, r1, lsl #2]
   1aaf0:	orrne	r2, r2, ip, lsl r0
   1aaf4:	strne	r2, [r5, r1, lsl #2]
   1aaf8:	cmp	r4, #256	; 0x100
   1aafc:	bne	1aad8 <__assert_fail@plt+0x95e0>
   1ab00:	b	1a9ec <__assert_fail@plt+0x94f4>
   1ab04:	cmp	r6, #0
   1ab08:	bne	1acf4 <__assert_fail@plt+0x97fc>
   1ab0c:	bl	113a8 <__ctype_b_loc@plt>
   1ab10:	mov	ip, #1
   1ab14:	ldr	r3, [r0]
   1ab18:	sub	r3, r3, #2
   1ab1c:	ldrh	r2, [r3, #2]!
   1ab20:	asr	r1, r4, #5
   1ab24:	and	r0, r4, #31
   1ab28:	tst	r2, #512	; 0x200
   1ab2c:	add	r4, r4, #1
   1ab30:	ldrne	r2, [r5, r1, lsl #2]
   1ab34:	orrne	r2, r2, ip, lsl r0
   1ab38:	strne	r2, [r5, r1, lsl #2]
   1ab3c:	cmp	r4, #256	; 0x100
   1ab40:	bne	1ab1c <__assert_fail@plt+0x9624>
   1ab44:	mov	r0, #0
   1ab48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ab4c:	ldr	r1, [pc, #1676]	; 1b1e0 <__assert_fail@plt+0x9ce8>
   1ab50:	ldr	r0, [sp, #36]	; 0x24
   1ab54:	bl	111bc <strcmp@plt>
   1ab58:	subs	r4, r0, #0
   1ab5c:	beq	1ac08 <__assert_fail@plt+0x9710>
   1ab60:	ldr	r1, [pc, #1676]	; 1b1f4 <__assert_fail@plt+0x9cfc>
   1ab64:	ldr	r0, [sp, #36]	; 0x24
   1ab68:	bl	111bc <strcmp@plt>
   1ab6c:	subs	r4, r0, #0
   1ab70:	bne	1ac9c <__assert_fail@plt+0x97a4>
   1ab74:	cmp	r6, #0
   1ab78:	bne	1af94 <__assert_fail@plt+0x9a9c>
   1ab7c:	bl	113a8 <__ctype_b_loc@plt>
   1ab80:	mov	ip, #1
   1ab84:	ldr	r3, [r0]
   1ab88:	sub	r3, r3, #2
   1ab8c:	ldrh	r1, [r3, #2]!
   1ab90:	asr	r2, r4, #5
   1ab94:	and	r0, r4, #31
   1ab98:	tst	r1, #2048	; 0x800
   1ab9c:	add	r4, r4, #1
   1aba0:	ldrne	r1, [r5, r2, lsl #2]
   1aba4:	orrne	r1, r1, ip, lsl r0
   1aba8:	strne	r1, [r5, r2, lsl #2]
   1abac:	cmp	r4, #256	; 0x100
   1abb0:	bne	1ab8c <__assert_fail@plt+0x9694>
   1abb4:	b	1a9ec <__assert_fail@plt+0x94f4>
   1abb8:	bl	113a8 <__ctype_b_loc@plt>
   1abbc:	mov	r4, #1
   1abc0:	mov	r1, r6
   1abc4:	ldr	r3, [r0]
   1abc8:	add	ip, r3, #508	; 0x1fc
   1abcc:	add	ip, ip, #2
   1abd0:	sub	r3, r3, #2
   1abd4:	ldrh	r2, [r3, #2]!
   1abd8:	tst	r2, #8
   1abdc:	beq	1abf8 <__assert_fail@plt+0x9700>
   1abe0:	ldrb	r2, [r1]
   1abe4:	and	lr, r2, #31
   1abe8:	asr	r2, r2, #5
   1abec:	ldr	r0, [r5, r2, lsl #2]
   1abf0:	orr	r0, r0, r4, lsl lr
   1abf4:	str	r0, [r5, r2, lsl #2]
   1abf8:	cmp	ip, r3
   1abfc:	add	r1, r1, #1
   1ac00:	bne	1abd4 <__assert_fail@plt+0x96dc>
   1ac04:	b	1a9ec <__assert_fail@plt+0x94f4>
   1ac08:	cmp	r6, #0
   1ac0c:	bne	1adf4 <__assert_fail@plt+0x98fc>
   1ac10:	bl	113a8 <__ctype_b_loc@plt>
   1ac14:	mov	ip, #1
   1ac18:	ldr	r3, [r0]
   1ac1c:	sub	r3, r3, #2
   1ac20:	ldrh	r2, [r3, #2]!
   1ac24:	asr	r1, r4, #5
   1ac28:	and	r0, r4, #31
   1ac2c:	tst	r2, #1024	; 0x400
   1ac30:	add	r4, r4, #1
   1ac34:	ldrne	r2, [r5, r1, lsl #2]
   1ac38:	orrne	r2, r2, ip, lsl r0
   1ac3c:	strne	r2, [r5, r1, lsl #2]
   1ac40:	cmp	r4, #256	; 0x100
   1ac44:	bne	1ac20 <__assert_fail@plt+0x9728>
   1ac48:	b	1a9ec <__assert_fail@plt+0x94f4>
   1ac4c:	bl	113a8 <__ctype_b_loc@plt>
   1ac50:	mov	r4, #1
   1ac54:	mov	r1, r6
   1ac58:	ldr	r3, [r0]
   1ac5c:	add	ip, r3, #508	; 0x1fc
   1ac60:	add	ip, ip, #2
   1ac64:	sub	r3, r3, #2
   1ac68:	ldrh	r2, [r3, #2]!
   1ac6c:	tst	r2, #2
   1ac70:	beq	1ac8c <__assert_fail@plt+0x9794>
   1ac74:	ldrb	r2, [r1]
   1ac78:	and	lr, r2, #31
   1ac7c:	asr	r2, r2, #5
   1ac80:	ldr	r0, [r5, r2, lsl #2]
   1ac84:	orr	r0, r0, r4, lsl lr
   1ac88:	str	r0, [r5, r2, lsl #2]
   1ac8c:	cmp	ip, r3
   1ac90:	add	r1, r1, #1
   1ac94:	bne	1ac68 <__assert_fail@plt+0x9770>
   1ac98:	b	1a9ec <__assert_fail@plt+0x94f4>
   1ac9c:	ldr	r1, [pc, #1364]	; 1b1f8 <__assert_fail@plt+0x9d00>
   1aca0:	ldr	r0, [sp, #36]	; 0x24
   1aca4:	bl	111bc <strcmp@plt>
   1aca8:	subs	r4, r0, #0
   1acac:	bne	1ad4c <__assert_fail@plt+0x9854>
   1acb0:	cmp	r6, #0
   1acb4:	bne	1afe4 <__assert_fail@plt+0x9aec>
   1acb8:	bl	113a8 <__ctype_b_loc@plt>
   1acbc:	mov	ip, #1
   1acc0:	ldr	r3, [r0]
   1acc4:	sub	r3, r3, #2
   1acc8:	ldrh	r2, [r3, #2]!
   1accc:	asr	r1, r4, #5
   1acd0:	and	r0, r4, #31
   1acd4:	tst	r2, #16384	; 0x4000
   1acd8:	add	r4, r4, #1
   1acdc:	ldrne	r2, [r5, r1, lsl #2]
   1ace0:	orrne	r2, r2, ip, lsl r0
   1ace4:	strne	r2, [r5, r1, lsl #2]
   1ace8:	cmp	r4, #256	; 0x100
   1acec:	bne	1acc8 <__assert_fail@plt+0x97d0>
   1acf0:	b	1a9ec <__assert_fail@plt+0x94f4>
   1acf4:	bl	113a8 <__ctype_b_loc@plt>
   1acf8:	mov	r4, #1
   1acfc:	mov	r1, r6
   1ad00:	ldr	r3, [r0]
   1ad04:	add	ip, r3, #508	; 0x1fc
   1ad08:	add	ip, ip, #2
   1ad0c:	sub	r3, r3, #2
   1ad10:	ldrh	r2, [r3, #2]!
   1ad14:	tst	r2, #512	; 0x200
   1ad18:	beq	1ad34 <__assert_fail@plt+0x983c>
   1ad1c:	ldrb	r2, [r1]
   1ad20:	and	lr, r2, #31
   1ad24:	asr	r2, r2, #5
   1ad28:	ldr	r0, [r5, r2, lsl #2]
   1ad2c:	orr	r0, r0, r4, lsl lr
   1ad30:	str	r0, [r5, r2, lsl #2]
   1ad34:	cmp	ip, r3
   1ad38:	add	r1, r1, #1
   1ad3c:	bne	1ad10 <__assert_fail@plt+0x9818>
   1ad40:	b	1a9ec <__assert_fail@plt+0x94f4>
   1ad44:	mov	r0, #12
   1ad48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ad4c:	ldr	r1, [pc, #1160]	; 1b1dc <__assert_fail@plt+0x9ce4>
   1ad50:	ldr	r0, [sp, #36]	; 0x24
   1ad54:	bl	111bc <strcmp@plt>
   1ad58:	subs	r4, r0, #0
   1ad5c:	bne	1ae44 <__assert_fail@plt+0x994c>
   1ad60:	cmp	r6, #0
   1ad64:	bne	1ae9c <__assert_fail@plt+0x99a4>
   1ad68:	bl	113a8 <__ctype_b_loc@plt>
   1ad6c:	mov	ip, #1
   1ad70:	ldr	r3, [r0]
   1ad74:	sub	r3, r3, #2
   1ad78:	ldrh	r2, [r3, #2]!
   1ad7c:	asr	r1, r4, #5
   1ad80:	and	r0, r4, #31
   1ad84:	tst	r2, #256	; 0x100
   1ad88:	add	r4, r4, #1
   1ad8c:	ldrne	r2, [r5, r1, lsl #2]
   1ad90:	orrne	r2, r2, ip, lsl r0
   1ad94:	strne	r2, [r5, r1, lsl #2]
   1ad98:	cmp	r4, #256	; 0x100
   1ad9c:	bne	1ad78 <__assert_fail@plt+0x9880>
   1ada0:	b	1a9ec <__assert_fail@plt+0x94f4>
   1ada4:	bl	113a8 <__ctype_b_loc@plt>
   1ada8:	mov	r4, #1
   1adac:	mov	r1, r6
   1adb0:	ldr	r3, [r0]
   1adb4:	add	ip, r3, #508	; 0x1fc
   1adb8:	add	ip, ip, #2
   1adbc:	sub	r3, r3, #2
   1adc0:	ldrh	r2, [r3, #2]!
   1adc4:	tst	r2, #8192	; 0x2000
   1adc8:	beq	1ade4 <__assert_fail@plt+0x98ec>
   1adcc:	ldrb	r2, [r1]
   1add0:	and	lr, r2, #31
   1add4:	asr	r2, r2, #5
   1add8:	ldr	r0, [r5, r2, lsl #2]
   1addc:	orr	r0, r0, r4, lsl lr
   1ade0:	str	r0, [r5, r2, lsl #2]
   1ade4:	cmp	ip, r3
   1ade8:	add	r1, r1, #1
   1adec:	bne	1adc0 <__assert_fail@plt+0x98c8>
   1adf0:	b	1a9ec <__assert_fail@plt+0x94f4>
   1adf4:	bl	113a8 <__ctype_b_loc@plt>
   1adf8:	mov	r4, #1
   1adfc:	mov	r1, r6
   1ae00:	ldr	r3, [r0]
   1ae04:	add	ip, r3, #508	; 0x1fc
   1ae08:	add	ip, ip, #2
   1ae0c:	sub	r3, r3, #2
   1ae10:	ldrh	r2, [r3, #2]!
   1ae14:	tst	r2, #1024	; 0x400
   1ae18:	beq	1ae34 <__assert_fail@plt+0x993c>
   1ae1c:	ldrb	r2, [r1]
   1ae20:	and	lr, r2, #31
   1ae24:	asr	r2, r2, #5
   1ae28:	ldr	r0, [r5, r2, lsl #2]
   1ae2c:	orr	r0, r0, r4, lsl lr
   1ae30:	str	r0, [r5, r2, lsl #2]
   1ae34:	cmp	ip, r3
   1ae38:	add	r1, r1, #1
   1ae3c:	bne	1ae10 <__assert_fail@plt+0x9918>
   1ae40:	b	1a9ec <__assert_fail@plt+0x94f4>
   1ae44:	ldr	r1, [pc, #944]	; 1b1fc <__assert_fail@plt+0x9d04>
   1ae48:	ldr	r0, [sp, #36]	; 0x24
   1ae4c:	bl	111bc <strcmp@plt>
   1ae50:	subs	r4, r0, #0
   1ae54:	bne	1af3c <__assert_fail@plt+0x9a44>
   1ae58:	cmp	r6, #0
   1ae5c:	bne	1aeec <__assert_fail@plt+0x99f4>
   1ae60:	bl	113a8 <__ctype_b_loc@plt>
   1ae64:	mov	ip, #1
   1ae68:	ldr	r3, [r0]
   1ae6c:	sub	r3, r3, #2
   1ae70:	ldrh	r2, [r3, #2]!
   1ae74:	asr	r1, r4, #5
   1ae78:	and	r0, r4, #31
   1ae7c:	tst	r2, #1
   1ae80:	add	r4, r4, #1
   1ae84:	ldrne	r2, [r5, r1, lsl #2]
   1ae88:	orrne	r2, r2, ip, lsl r0
   1ae8c:	strne	r2, [r5, r1, lsl #2]
   1ae90:	cmp	r4, #256	; 0x100
   1ae94:	bne	1ae70 <__assert_fail@plt+0x9978>
   1ae98:	b	1a9ec <__assert_fail@plt+0x94f4>
   1ae9c:	bl	113a8 <__ctype_b_loc@plt>
   1aea0:	mov	r1, r6
   1aea4:	mov	lr, #1
   1aea8:	ldr	r3, [r0]
   1aeac:	add	r0, r3, #508	; 0x1fc
   1aeb0:	add	r0, r0, #2
   1aeb4:	sub	r3, r3, #2
   1aeb8:	ldrh	r2, [r3, #2]!
   1aebc:	tst	r2, #256	; 0x100
   1aec0:	beq	1aedc <__assert_fail@plt+0x99e4>
   1aec4:	ldrb	r2, [r1]
   1aec8:	and	r4, r2, #31
   1aecc:	asr	r2, r2, #5
   1aed0:	ldr	ip, [r5, r2, lsl #2]
   1aed4:	orr	ip, ip, lr, lsl r4
   1aed8:	str	ip, [r5, r2, lsl #2]
   1aedc:	cmp	r0, r3
   1aee0:	add	r1, r1, #1
   1aee4:	bne	1aeb8 <__assert_fail@plt+0x99c0>
   1aee8:	b	1a9ec <__assert_fail@plt+0x94f4>
   1aeec:	bl	113a8 <__ctype_b_loc@plt>
   1aef0:	mov	r1, r6
   1aef4:	mov	lr, #1
   1aef8:	ldr	r3, [r0]
   1aefc:	add	r0, r3, #508	; 0x1fc
   1af00:	add	r0, r0, #2
   1af04:	sub	r3, r3, #2
   1af08:	ldrh	r2, [r3, #2]!
   1af0c:	tst	r2, #1
   1af10:	beq	1af2c <__assert_fail@plt+0x9a34>
   1af14:	ldrb	r2, [r1]
   1af18:	and	r4, r2, #31
   1af1c:	asr	r2, r2, #5
   1af20:	ldr	ip, [r5, r2, lsl #2]
   1af24:	orr	ip, ip, lr, lsl r4
   1af28:	str	ip, [r5, r2, lsl #2]
   1af2c:	cmp	r0, r3
   1af30:	add	r1, r1, #1
   1af34:	bne	1af08 <__assert_fail@plt+0x9a10>
   1af38:	b	1a9ec <__assert_fail@plt+0x94f4>
   1af3c:	ldr	r1, [pc, #700]	; 1b200 <__assert_fail@plt+0x9d08>
   1af40:	ldr	r0, [sp, #36]	; 0x24
   1af44:	bl	111bc <strcmp@plt>
   1af48:	subs	r4, r0, #0
   1af4c:	bne	1b084 <__assert_fail@plt+0x9b8c>
   1af50:	cmp	r6, #0
   1af54:	bne	1b034 <__assert_fail@plt+0x9b3c>
   1af58:	bl	113a8 <__ctype_b_loc@plt>
   1af5c:	mov	ip, #1
   1af60:	ldr	r3, [r0]
   1af64:	sub	r3, r3, #2
   1af68:	ldrsh	r2, [r3, #2]!
   1af6c:	cmp	r2, #0
   1af70:	asrlt	r0, r4, #5
   1af74:	andlt	r1, r4, #31
   1af78:	ldrlt	r2, [r5, r0, lsl #2]
   1af7c:	add	r4, r4, #1
   1af80:	orrlt	r2, r2, ip, lsl r1
   1af84:	strlt	r2, [r5, r0, lsl #2]
   1af88:	cmp	r4, #256	; 0x100
   1af8c:	bne	1af68 <__assert_fail@plt+0x9a70>
   1af90:	b	1a9ec <__assert_fail@plt+0x94f4>
   1af94:	bl	113a8 <__ctype_b_loc@plt>
   1af98:	mov	r1, r6
   1af9c:	mov	lr, #1
   1afa0:	ldr	r3, [r0]
   1afa4:	add	r2, r3, #508	; 0x1fc
   1afa8:	add	r2, r2, #2
   1afac:	sub	r3, r3, #2
   1afb0:	ldrh	r0, [r3, #2]!
   1afb4:	tst	r0, #2048	; 0x800
   1afb8:	beq	1afd4 <__assert_fail@plt+0x9adc>
   1afbc:	ldrb	r0, [r1]
   1afc0:	and	r4, r0, #31
   1afc4:	asr	r0, r0, #5
   1afc8:	ldr	ip, [r5, r0, lsl #2]
   1afcc:	orr	ip, ip, lr, lsl r4
   1afd0:	str	ip, [r5, r0, lsl #2]
   1afd4:	cmp	r2, r3
   1afd8:	add	r1, r1, #1
   1afdc:	bne	1afb0 <__assert_fail@plt+0x9ab8>
   1afe0:	b	1a9ec <__assert_fail@plt+0x94f4>
   1afe4:	bl	113a8 <__ctype_b_loc@plt>
   1afe8:	mov	r1, r6
   1afec:	mov	lr, #1
   1aff0:	ldr	r3, [r0]
   1aff4:	add	r0, r3, #508	; 0x1fc
   1aff8:	add	r0, r0, #2
   1affc:	sub	r3, r3, #2
   1b000:	ldrh	r2, [r3, #2]!
   1b004:	tst	r2, #16384	; 0x4000
   1b008:	beq	1b024 <__assert_fail@plt+0x9b2c>
   1b00c:	ldrb	r2, [r1]
   1b010:	and	r4, r2, #31
   1b014:	asr	r2, r2, #5
   1b018:	ldr	ip, [r5, r2, lsl #2]
   1b01c:	orr	ip, ip, lr, lsl r4
   1b020:	str	ip, [r5, r2, lsl #2]
   1b024:	cmp	r3, r0
   1b028:	add	r1, r1, #1
   1b02c:	bne	1b000 <__assert_fail@plt+0x9b08>
   1b030:	b	1a9ec <__assert_fail@plt+0x94f4>
   1b034:	bl	113a8 <__ctype_b_loc@plt>
   1b038:	mov	r1, r6
   1b03c:	mov	lr, #1
   1b040:	ldr	r3, [r0]
   1b044:	add	r0, r3, #508	; 0x1fc
   1b048:	add	r0, r0, #2
   1b04c:	sub	r3, r3, #2
   1b050:	ldrsh	r2, [r3, #2]!
   1b054:	cmp	r2, #0
   1b058:	bge	1b074 <__assert_fail@plt+0x9b7c>
   1b05c:	ldrb	r2, [r1]
   1b060:	and	r4, r2, #31
   1b064:	asr	r2, r2, #5
   1b068:	ldr	ip, [r5, r2, lsl #2]
   1b06c:	orr	ip, ip, lr, lsl r4
   1b070:	str	ip, [r5, r2, lsl #2]
   1b074:	cmp	r0, r3
   1b078:	add	r1, r1, #1
   1b07c:	bne	1b050 <__assert_fail@plt+0x9b58>
   1b080:	b	1a9ec <__assert_fail@plt+0x94f4>
   1b084:	ldr	r1, [pc, #376]	; 1b204 <__assert_fail@plt+0x9d0c>
   1b088:	ldr	r0, [sp, #36]	; 0x24
   1b08c:	bl	111bc <strcmp@plt>
   1b090:	subs	r4, r0, #0
   1b094:	bne	1b0dc <__assert_fail@plt+0x9be4>
   1b098:	cmp	r6, #0
   1b09c:	bne	1b0f8 <__assert_fail@plt+0x9c00>
   1b0a0:	bl	113a8 <__ctype_b_loc@plt>
   1b0a4:	mov	ip, #1
   1b0a8:	ldr	r3, [r0]
   1b0ac:	sub	r3, r3, #2
   1b0b0:	ldrh	r2, [r3, #2]!
   1b0b4:	asr	r1, r4, #5
   1b0b8:	and	r0, r4, #31
   1b0bc:	tst	r2, #4
   1b0c0:	add	r4, r4, #1
   1b0c4:	ldrne	r2, [r5, r1, lsl #2]
   1b0c8:	orrne	r2, r2, ip, lsl r0
   1b0cc:	strne	r2, [r5, r1, lsl #2]
   1b0d0:	cmp	r4, #256	; 0x100
   1b0d4:	bne	1b0b0 <__assert_fail@plt+0x9bb8>
   1b0d8:	b	1a9ec <__assert_fail@plt+0x94f4>
   1b0dc:	ldr	r1, [pc, #292]	; 1b208 <__assert_fail@plt+0x9d10>
   1b0e0:	ldr	r0, [sp, #36]	; 0x24
   1b0e4:	bl	111bc <strcmp@plt>
   1b0e8:	subs	r4, r0, #0
   1b0ec:	beq	1b148 <__assert_fail@plt+0x9c50>
   1b0f0:	mov	r0, #4
   1b0f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b0f8:	bl	113a8 <__ctype_b_loc@plt>
   1b0fc:	mov	r1, r6
   1b100:	mov	lr, #1
   1b104:	ldr	r3, [r0]
   1b108:	add	r0, r3, #508	; 0x1fc
   1b10c:	add	r0, r0, #2
   1b110:	sub	r3, r3, #2
   1b114:	ldrh	r2, [r3, #2]!
   1b118:	tst	r2, #4
   1b11c:	beq	1b138 <__assert_fail@plt+0x9c40>
   1b120:	ldrb	r2, [r1]
   1b124:	and	r4, r2, #31
   1b128:	asr	r2, r2, #5
   1b12c:	ldr	ip, [r5, r2, lsl #2]
   1b130:	orr	ip, ip, lr, lsl r4
   1b134:	str	ip, [r5, r2, lsl #2]
   1b138:	cmp	r0, r3
   1b13c:	add	r1, r1, #1
   1b140:	bne	1b114 <__assert_fail@plt+0x9c1c>
   1b144:	b	1a9ec <__assert_fail@plt+0x94f4>
   1b148:	cmp	r6, #0
   1b14c:	bne	1b18c <__assert_fail@plt+0x9c94>
   1b150:	bl	113a8 <__ctype_b_loc@plt>
   1b154:	mov	ip, #1
   1b158:	ldr	r3, [r0]
   1b15c:	sub	r3, r3, #2
   1b160:	ldrh	r2, [r3, #2]!
   1b164:	asr	r1, r4, #5
   1b168:	and	r0, r4, #31
   1b16c:	tst	r2, #4096	; 0x1000
   1b170:	add	r4, r4, #1
   1b174:	ldrne	r2, [r5, r1, lsl #2]
   1b178:	orrne	r2, r2, ip, lsl r0
   1b17c:	strne	r2, [r5, r1, lsl #2]
   1b180:	cmp	r4, #256	; 0x100
   1b184:	bne	1b160 <__assert_fail@plt+0x9c68>
   1b188:	b	1a9ec <__assert_fail@plt+0x94f4>
   1b18c:	bl	113a8 <__ctype_b_loc@plt>
   1b190:	mov	r1, r6
   1b194:	mov	lr, #1
   1b198:	ldr	r3, [r0]
   1b19c:	add	r0, r3, #508	; 0x1fc
   1b1a0:	add	r0, r0, #2
   1b1a4:	sub	r3, r3, #2
   1b1a8:	ldrh	r2, [r3, #2]!
   1b1ac:	tst	r2, #4096	; 0x1000
   1b1b0:	beq	1b1cc <__assert_fail@plt+0x9cd4>
   1b1b4:	ldrb	r2, [r1]
   1b1b8:	and	r4, r2, #31
   1b1bc:	asr	r2, r2, #5
   1b1c0:	ldr	ip, [r5, r2, lsl #2]
   1b1c4:	orr	ip, ip, lr, lsl r4
   1b1c8:	str	ip, [r5, r2, lsl #2]
   1b1cc:	cmp	r3, r0
   1b1d0:	add	r1, r1, #1
   1b1d4:	bne	1b1a8 <__assert_fail@plt+0x9cb0>
   1b1d8:	b	1a9ec <__assert_fail@plt+0x94f4>
   1b1dc:	andeq	ip, r2, r8, asr #1
   1b1e0:	andeq	ip, r2, r0, asr #1
   1b1e4:	ldrdeq	ip, [r2], -r8
   1b1e8:	andeq	ip, r2, r0, ror #1
   1b1ec:	ldrdeq	ip, [r2], -r0
   1b1f0:	andeq	ip, r2, r8, ror #1
   1b1f4:	strdeq	ip, [r2], -r0
   1b1f8:	strdeq	ip, [r2], -r8
   1b1fc:	andeq	ip, r2, r0, lsl #2
   1b200:	andeq	ip, r2, r8, lsl #2
   1b204:	andeq	ip, r2, r0, lsl r1
   1b208:	andeq	ip, r2, r8, lsl r1
   1b20c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b210:	sub	sp, sp, #308	; 0x134
   1b214:	ldr	r9, [r0]
   1b218:	ldr	ip, [r9, #92]	; 0x5c
   1b21c:	cmp	ip, #1
   1b220:	movne	ip, #0
   1b224:	ldreq	ip, [r0, #12]
   1b228:	lsreq	ip, ip, #22
   1b22c:	andeq	ip, ip, #1
   1b230:	str	ip, [sp, #20]
   1b234:	ldr	ip, [r1]
   1b238:	cmp	ip, #0
   1b23c:	ble	1b5e0 <__assert_fail@plt+0xa0e8>
   1b240:	mov	r6, r3
   1b244:	mov	r3, #0
   1b248:	str	r2, [sp, #16]
   1b24c:	str	r1, [sp, #24]
   1b250:	str	r0, [sp, #28]
   1b254:	str	r3, [sp, #4]
   1b258:	mov	r5, #1
   1b25c:	b	1b298 <__assert_fail@plt+0x9da0>
   1b260:	cmp	r4, #3
   1b264:	beq	1b3d8 <__assert_fail@plt+0x9ee0>
   1b268:	cmp	r4, #6
   1b26c:	beq	1b48c <__assert_fail@plt+0x9f94>
   1b270:	and	r3, r4, #253	; 0xfd
   1b274:	cmp	r3, #5
   1b278:	beq	1b618 <__assert_fail@plt+0xa120>
   1b27c:	cmp	r4, #2
   1b280:	beq	1b5c0 <__assert_fail@plt+0xa0c8>
   1b284:	ldr	r3, [sp, #4]
   1b288:	add	r3, r3, #1
   1b28c:	cmp	r3, ip
   1b290:	str	r3, [sp, #4]
   1b294:	bge	1b5e0 <__assert_fail@plt+0xa0e8>
   1b298:	ldr	r3, [sp, #16]
   1b29c:	ldr	r1, [sp, #4]
   1b2a0:	ldr	r2, [r3]
   1b2a4:	ldr	r3, [r9]
   1b2a8:	ldr	r7, [r2, r1, lsl #2]
   1b2ac:	lsl	r2, r7, #3
   1b2b0:	str	r2, [sp, #8]
   1b2b4:	add	r2, r3, r2
   1b2b8:	ldrb	r4, [r2, #4]
   1b2bc:	cmp	r4, #1
   1b2c0:	bne	1b260 <__assert_fail@plt+0x9d68>
   1b2c4:	ldrb	r3, [r3, r7, lsl #3]
   1b2c8:	ldr	r2, [sp, #20]
   1b2cc:	cmp	r2, #0
   1b2d0:	strb	r4, [r6, r3]
   1b2d4:	str	r3, [sp, #12]
   1b2d8:	beq	1b2f0 <__assert_fail@plt+0x9df8>
   1b2dc:	bl	1136c <__ctype_tolower_loc@plt>
   1b2e0:	ldr	r3, [sp, #12]
   1b2e4:	ldr	r2, [r0]
   1b2e8:	ldr	r3, [r2, r3, lsl #2]
   1b2ec:	strb	r4, [r6, r3]
   1b2f0:	ldr	r3, [sp, #28]
   1b2f4:	ldr	r3, [r3, #12]
   1b2f8:	tst	r3, #4194304	; 0x400000
   1b2fc:	beq	1b3cc <__assert_fail@plt+0x9ed4>
   1b300:	ldr	r3, [r9, #92]	; 0x5c
   1b304:	cmp	r3, #1
   1b308:	ble	1b3cc <__assert_fail@plt+0x9ed4>
   1b30c:	ldr	r3, [r9]
   1b310:	add	r1, r7, #1
   1b314:	ldrb	r2, [r3, r7, lsl #3]
   1b318:	strb	r2, [sp, #48]	; 0x30
   1b31c:	ldr	r2, [r9, #8]
   1b320:	cmp	r2, r1
   1b324:	bls	1b610 <__assert_fail@plt+0xa118>
   1b328:	ldr	r0, [sp, #8]
   1b32c:	ldr	ip, [pc, #772]	; 1b638 <__assert_fail@plt+0xa140>
   1b330:	add	r2, r0, #8
   1b334:	add	r3, r3, r2
   1b338:	ldr	r2, [r3, #4]
   1b33c:	bic	r2, r2, #-16777216	; 0xff000000
   1b340:	bic	r2, r2, #14614528	; 0xdf0000
   1b344:	bic	r2, r2, #65280	; 0xff00
   1b348:	cmp	r2, ip
   1b34c:	bne	1b610 <__assert_fail@plt+0xa118>
   1b350:	add	r8, r0, #16
   1b354:	add	r4, sp, #49	; 0x31
   1b358:	b	1b384 <__assert_fail@plt+0x9e8c>
   1b35c:	ldr	r3, [r9]
   1b360:	ldr	r0, [pc, #720]	; 1b638 <__assert_fail@plt+0xa140>
   1b364:	add	r3, r3, r8
   1b368:	add	r8, r8, #8
   1b36c:	ldr	r2, [r3, #4]
   1b370:	bic	r2, r2, #-16777216	; 0xff000000
   1b374:	bic	r2, r2, #14614528	; 0xdf0000
   1b378:	bic	r2, r2, #65280	; 0xff00
   1b37c:	cmp	r2, r0
   1b380:	bne	1b39c <__assert_fail@plt+0x9ea4>
   1b384:	ldrb	r3, [r3]
   1b388:	add	r1, r1, #1
   1b38c:	strb	r3, [r4], #1
   1b390:	ldr	r3, [r9, #8]
   1b394:	cmp	r1, r3
   1b398:	bcc	1b35c <__assert_fail@plt+0x9e64>
   1b39c:	add	r3, sp, #48	; 0x30
   1b3a0:	sub	r4, r4, r3
   1b3a4:	mov	ip, #0
   1b3a8:	mov	r2, r4
   1b3ac:	add	r3, sp, #40	; 0x28
   1b3b0:	add	r1, sp, #48	; 0x30
   1b3b4:	add	r0, sp, #36	; 0x24
   1b3b8:	str	ip, [sp, #40]	; 0x28
   1b3bc:	str	ip, [sp, #44]	; 0x2c
   1b3c0:	bl	1449c <__assert_fail@plt+0x2fa4>
   1b3c4:	cmp	r4, r0
   1b3c8:	beq	1b5e8 <__assert_fail@plt+0xa0f0>
   1b3cc:	ldr	r3, [sp, #24]
   1b3d0:	ldr	ip, [r3]
   1b3d4:	b	1b284 <__assert_fail@plt+0x9d8c>
   1b3d8:	ldr	r8, [sp, #20]
   1b3dc:	mov	r7, #0
   1b3e0:	str	r9, [sp, #12]
   1b3e4:	ldr	r2, [sp, #8]
   1b3e8:	cmp	r8, #0
   1b3ec:	ldr	r3, [r3, r2]
   1b3f0:	ldr	r9, [r3, r7]
   1b3f4:	bne	1b430 <__assert_fail@plt+0x9f38>
   1b3f8:	add	r0, r6, r7, lsl #3
   1b3fc:	mov	r3, r8
   1b400:	lsr	r2, r9, r3
   1b404:	tst	r2, #1
   1b408:	strbne	r5, [r0, r3]
   1b40c:	add	r3, r3, #1
   1b410:	cmp	r3, #32
   1b414:	bne	1b400 <__assert_fail@plt+0x9f08>
   1b418:	add	r7, r7, #4
   1b41c:	cmp	r7, #32
   1b420:	beq	1b47c <__assert_fail@plt+0x9f84>
   1b424:	ldr	r3, [sp, #12]
   1b428:	ldr	r3, [r3]
   1b42c:	b	1b3e4 <__assert_fail@plt+0x9eec>
   1b430:	add	sl, r6, r7, lsl #3
   1b434:	lsl	fp, r7, #5
   1b438:	mov	r4, #0
   1b43c:	lsr	r3, r9, r4
   1b440:	tst	r3, #1
   1b444:	add	r4, r4, #1
   1b448:	beq	1b460 <__assert_fail@plt+0x9f68>
   1b44c:	strb	r5, [sl]
   1b450:	bl	1136c <__ctype_tolower_loc@plt>
   1b454:	ldr	r3, [r0]
   1b458:	ldr	r3, [r3, fp]
   1b45c:	strb	r5, [r6, r3]
   1b460:	cmp	r4, #32
   1b464:	add	sl, sl, #1
   1b468:	add	fp, fp, #4
   1b46c:	bne	1b43c <__assert_fail@plt+0x9f44>
   1b470:	add	r7, r7, #4
   1b474:	cmp	r7, #32
   1b478:	bne	1b424 <__assert_fail@plt+0x9f2c>
   1b47c:	ldr	r3, [sp, #24]
   1b480:	ldr	r9, [sp, #12]
   1b484:	ldr	ip, [r3]
   1b488:	b	1b284 <__assert_fail@plt+0x9d8c>
   1b48c:	ldr	r3, [r9, #92]	; 0x5c
   1b490:	ldr	r7, [r2]
   1b494:	cmp	r3, #1
   1b498:	ble	1b4c0 <__assert_fail@plt+0x9fc8>
   1b49c:	ldr	r3, [r7, #36]	; 0x24
   1b4a0:	cmp	r3, #0
   1b4a4:	bne	1b578 <__assert_fail@plt+0xa080>
   1b4a8:	ldrb	r3, [r7, #16]
   1b4ac:	tst	r3, #1
   1b4b0:	bne	1b578 <__assert_fail@plt+0xa080>
   1b4b4:	ldr	r3, [r7, #32]
   1b4b8:	cmp	r3, #0
   1b4bc:	bne	1b578 <__assert_fail@plt+0xa080>
   1b4c0:	ldr	r3, [r7, #20]
   1b4c4:	cmp	r3, #0
   1b4c8:	movgt	r4, #0
   1b4cc:	ldrgt	r8, [sp, #28]
   1b4d0:	ble	1b284 <__assert_fail@plt+0x9d8c>
   1b4d4:	mov	r3, #0
   1b4d8:	str	r3, [sp, #40]	; 0x28
   1b4dc:	str	r3, [sp, #44]	; 0x2c
   1b4e0:	ldr	r3, [r7]
   1b4e4:	add	r2, sp, #40	; 0x28
   1b4e8:	add	r0, sp, #48	; 0x30
   1b4ec:	ldr	r1, [r3, r4, lsl #2]
   1b4f0:	bl	111a4 <wcrtomb@plt>
   1b4f4:	lsl	sl, r4, #2
   1b4f8:	add	r4, r4, #1
   1b4fc:	cmn	r0, #1
   1b500:	beq	1b528 <__assert_fail@plt+0xa030>
   1b504:	ldrb	fp, [sp, #48]	; 0x30
   1b508:	ldr	r3, [sp, #20]
   1b50c:	cmp	r3, #0
   1b510:	strb	r5, [r6, fp]
   1b514:	beq	1b528 <__assert_fail@plt+0xa030>
   1b518:	bl	1136c <__ctype_tolower_loc@plt>
   1b51c:	ldr	r3, [r0]
   1b520:	ldr	r3, [r3, fp, lsl #2]
   1b524:	strb	r5, [r6, r3]
   1b528:	ldr	r3, [r8, #12]
   1b52c:	tst	r3, #4194304	; 0x400000
   1b530:	beq	1b568 <__assert_fail@plt+0xa070>
   1b534:	ldr	r3, [r9, #92]	; 0x5c
   1b538:	cmp	r3, #1
   1b53c:	ble	1b568 <__assert_fail@plt+0xa070>
   1b540:	ldr	r3, [r7]
   1b544:	ldr	r0, [r3, sl]
   1b548:	bl	11258 <towlower@plt>
   1b54c:	add	r2, sp, #40	; 0x28
   1b550:	mov	r1, r0
   1b554:	add	r0, sp, #48	; 0x30
   1b558:	bl	111a4 <wcrtomb@plt>
   1b55c:	cmn	r0, #1
   1b560:	ldrbne	r3, [sp, #48]	; 0x30
   1b564:	strbne	r5, [r6, r3]
   1b568:	ldr	r3, [r7, #20]
   1b56c:	cmp	r4, r3
   1b570:	blt	1b4d4 <__assert_fail@plt+0x9fdc>
   1b574:	b	1b3cc <__assert_fail@plt+0x9ed4>
   1b578:	mov	r3, #0
   1b57c:	strb	r3, [sp, #40]	; 0x28
   1b580:	mov	r0, #0
   1b584:	add	r3, sp, #48	; 0x30
   1b588:	mov	r2, r5
   1b58c:	add	r1, sp, #40	; 0x28
   1b590:	str	r0, [sp, #48]	; 0x30
   1b594:	str	r0, [sp, #52]	; 0x34
   1b598:	bl	1449c <__assert_fail@plt+0x2fa4>
   1b59c:	ldrb	r3, [sp, #40]	; 0x28
   1b5a0:	cmn	r0, #2
   1b5a4:	strbeq	r5, [r6, r3]
   1b5a8:	add	r3, r3, #1
   1b5ac:	uxtb	r3, r3
   1b5b0:	cmp	r3, #0
   1b5b4:	strb	r3, [sp, #40]	; 0x28
   1b5b8:	bne	1b580 <__assert_fail@plt+0xa088>
   1b5bc:	b	1b3cc <__assert_fail@plt+0x9ed4>
   1b5c0:	mov	r0, r6
   1b5c4:	mov	r2, #256	; 0x100
   1b5c8:	mov	r1, #1
   1b5cc:	bl	11414 <memset@plt>
   1b5d0:	ldr	r2, [sp, #28]
   1b5d4:	ldrb	r3, [r2, #28]
   1b5d8:	orr	r3, r3, #1
   1b5dc:	strb	r3, [r2, #28]
   1b5e0:	add	sp, sp, #308	; 0x134
   1b5e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5e8:	ldr	r0, [sp, #36]	; 0x24
   1b5ec:	bl	11258 <towlower@plt>
   1b5f0:	add	r2, sp, #40	; 0x28
   1b5f4:	mov	r1, r0
   1b5f8:	add	r0, sp, #48	; 0x30
   1b5fc:	bl	111a4 <wcrtomb@plt>
   1b600:	cmn	r0, #1
   1b604:	ldrbne	r3, [sp, #48]	; 0x30
   1b608:	strbne	r5, [r6, r3]
   1b60c:	b	1b3cc <__assert_fail@plt+0x9ed4>
   1b610:	add	r4, sp, #49	; 0x31
   1b614:	b	1b39c <__assert_fail@plt+0x9ea4>
   1b618:	mov	r0, r6
   1b61c:	mov	r2, #256	; 0x100
   1b620:	mov	r1, #1
   1b624:	bl	11414 <memset@plt>
   1b628:	cmp	r4, #2
   1b62c:	beq	1b5d0 <__assert_fail@plt+0xa0d8>
   1b630:	add	sp, sp, #308	; 0x134
   1b634:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b638:	eoreq	r0, r0, r1
   1b63c:	add	ip, r0, r2, lsl #3
   1b640:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b644:	ldrb	r6, [ip, #4]
   1b648:	ldr	r7, [sp, #32]
   1b64c:	cmp	r6, #7
   1b650:	beq	1b730 <__assert_fail@plt+0xa238>
   1b654:	ldr	ip, [r3, #80]	; 0x50
   1b658:	cmp	ip, #1
   1b65c:	beq	1b740 <__assert_fail@plt+0xa248>
   1b660:	ldr	r5, [r3, #28]
   1b664:	add	lr, r7, #1
   1b668:	cmp	r5, lr
   1b66c:	ble	1b740 <__assert_fail@plt+0xa248>
   1b670:	ldr	r8, [r3, #8]
   1b674:	add	ip, r8, lr, lsl #2
   1b678:	ldr	lr, [r8, lr, lsl #2]
   1b67c:	cmn	lr, #1
   1b680:	subeq	r5, r5, r7
   1b684:	moveq	r4, #1
   1b688:	beq	1b69c <__assert_fail@plt+0xa1a4>
   1b68c:	b	1b740 <__assert_fail@plt+0xa248>
   1b690:	ldr	lr, [ip, #4]!
   1b694:	cmn	lr, #1
   1b698:	bne	1b6a8 <__assert_fail@plt+0xa1b0>
   1b69c:	add	r4, r4, #1
   1b6a0:	cmp	r4, r5
   1b6a4:	bne	1b690 <__assert_fail@plt+0xa198>
   1b6a8:	cmp	r6, #5
   1b6ac:	beq	1b74c <__assert_fail@plt+0xa254>
   1b6b0:	cmp	r4, #1
   1b6b4:	sub	r6, r6, #6
   1b6b8:	clz	r6, r6
   1b6bc:	lsr	r6, r6, #5
   1b6c0:	moveq	r6, #0
   1b6c4:	cmp	r6, #0
   1b6c8:	beq	1b740 <__assert_fail@plt+0xa248>
   1b6cc:	ldr	r9, [r0, r2, lsl #3]
   1b6d0:	ldr	ip, [r9, #32]
   1b6d4:	cmp	ip, #0
   1b6d8:	beq	1b788 <__assert_fail@plt+0xa290>
   1b6dc:	ldr	r0, [r9, #20]
   1b6e0:	cmp	r0, #0
   1b6e4:	ldr	r5, [r8, r7, lsl #2]
   1b6e8:	ble	1b71c <__assert_fail@plt+0xa224>
   1b6ec:	ldr	r2, [r9]
   1b6f0:	ldr	r3, [r2]
   1b6f4:	cmp	r5, r3
   1b6f8:	movne	r3, #0
   1b6fc:	bne	1b710 <__assert_fail@plt+0xa218>
   1b700:	b	1b7d8 <__assert_fail@plt+0xa2e0>
   1b704:	ldr	r1, [r2, #4]!
   1b708:	cmp	r5, r1
   1b70c:	beq	1b7d8 <__assert_fail@plt+0xa2e0>
   1b710:	add	r3, r3, #1
   1b714:	cmp	r3, r0
   1b718:	bne	1b704 <__assert_fail@plt+0xa20c>
   1b71c:	ldr	r3, [r9, #36]	; 0x24
   1b720:	cmp	r3, #0
   1b724:	ble	1b820 <__assert_fail@plt+0xa328>
   1b728:	mov	r6, #0
   1b72c:	b	1b7bc <__assert_fail@plt+0xa2c4>
   1b730:	ldr	r1, [r3, #4]
   1b734:	ldrb	r2, [r1, r7]
   1b738:	cmp	r2, #193	; 0xc1
   1b73c:	bhi	1b7e8 <__assert_fail@plt+0xa2f0>
   1b740:	mov	r4, #0
   1b744:	mov	r0, r4
   1b748:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b74c:	ldr	r2, [r1]
   1b750:	tst	r2, #64	; 0x40
   1b754:	beq	1b774 <__assert_fail@plt+0xa27c>
   1b758:	tst	r2, #128	; 0x80
   1b75c:	beq	1b744 <__assert_fail@plt+0xa24c>
   1b760:	ldr	r3, [r3, #4]
   1b764:	ldrb	r3, [r3, r7]
   1b768:	cmp	r3, #0
   1b76c:	beq	1b740 <__assert_fail@plt+0xa248>
   1b770:	b	1b744 <__assert_fail@plt+0xa24c>
   1b774:	ldr	r1, [r3, #4]
   1b778:	ldrb	r1, [r1, r7]
   1b77c:	cmp	r1, #10
   1b780:	bne	1b758 <__assert_fail@plt+0xa260>
   1b784:	b	1b740 <__assert_fail@plt+0xa248>
   1b788:	ldr	r3, [r9, #36]	; 0x24
   1b78c:	ldr	r0, [r9, #20]
   1b790:	cmp	r3, #0
   1b794:	bne	1b6e0 <__assert_fail@plt+0xa1e8>
   1b798:	cmp	r0, #0
   1b79c:	bne	1b6e0 <__assert_fail@plt+0xa1e8>
   1b7a0:	ldrb	r3, [r9, #16]
   1b7a4:	tst	r3, #1
   1b7a8:	bne	1b744 <__assert_fail@plt+0xa24c>
   1b7ac:	b	1b740 <__assert_fail@plt+0xa248>
   1b7b0:	ldr	r3, [r9, #36]	; 0x24
   1b7b4:	cmp	r6, r3
   1b7b8:	bge	1b81c <__assert_fail@plt+0xa324>
   1b7bc:	ldr	r3, [r9, #12]
   1b7c0:	mov	r0, r5
   1b7c4:	ldr	r1, [r3, r6, lsl #2]
   1b7c8:	bl	111b0 <iswctype@plt>
   1b7cc:	add	r6, r6, #1
   1b7d0:	cmp	r0, #0
   1b7d4:	beq	1b7b0 <__assert_fail@plt+0xa2b8>
   1b7d8:	ldrb	r3, [r9, #16]
   1b7dc:	tst	r3, #1
   1b7e0:	beq	1b744 <__assert_fail@plt+0xa24c>
   1b7e4:	b	1b740 <__assert_fail@plt+0xa248>
   1b7e8:	ldr	lr, [r3, #48]	; 0x30
   1b7ec:	add	ip, r7, #1
   1b7f0:	cmp	ip, lr
   1b7f4:	bge	1b740 <__assert_fail@plt+0xa248>
   1b7f8:	add	r0, r1, r7
   1b7fc:	cmp	r2, #223	; 0xdf
   1b800:	ldrb	r3, [r0, #1]
   1b804:	bhi	1b864 <__assert_fail@plt+0xa36c>
   1b808:	eor	r3, r3, #128	; 0x80
   1b80c:	cmp	r3, #63	; 0x3f
   1b810:	movls	r4, #2
   1b814:	bls	1b744 <__assert_fail@plt+0xa24c>
   1b818:	b	1b740 <__assert_fail@plt+0xa248>
   1b81c:	ldr	ip, [r9, #32]
   1b820:	cmp	ip, #0
   1b824:	ble	1b7a0 <__assert_fail@plt+0xa2a8>
   1b828:	ldr	r2, [r9, #4]
   1b82c:	mov	r3, #0
   1b830:	sub	r2, r2, #4
   1b834:	b	1b844 <__assert_fail@plt+0xa34c>
   1b838:	add	r3, r3, #1
   1b83c:	cmp	r3, ip
   1b840:	beq	1b7a0 <__assert_fail@plt+0xa2a8>
   1b844:	ldr	r1, [r2, #4]!
   1b848:	cmp	r5, r1
   1b84c:	bcc	1b838 <__assert_fail@plt+0xa340>
   1b850:	ldr	r1, [r9, #8]
   1b854:	ldr	r1, [r1, r3, lsl #2]
   1b858:	cmp	r5, r1
   1b85c:	bhi	1b838 <__assert_fail@plt+0xa340>
   1b860:	b	1b7d8 <__assert_fail@plt+0xa2e0>
   1b864:	cmp	r2, #239	; 0xef
   1b868:	bhi	1b8f4 <__assert_fail@plt+0xa3fc>
   1b86c:	cmp	r3, #159	; 0x9f
   1b870:	cmpls	r2, #224	; 0xe0
   1b874:	movne	r4, #3
   1b878:	beq	1b740 <__assert_fail@plt+0xa248>
   1b87c:	add	r7, r7, r4
   1b880:	cmp	lr, r7
   1b884:	blt	1b740 <__assert_fail@plt+0xa248>
   1b888:	ldrb	r3, [r1, ip]
   1b88c:	eor	r3, r3, #128	; 0x80
   1b890:	cmp	r3, #63	; 0x3f
   1b894:	bhi	1b740 <__assert_fail@plt+0xa248>
   1b898:	ldrb	r3, [r0, #2]
   1b89c:	eor	r3, r3, #128	; 0x80
   1b8a0:	cmp	r3, #63	; 0x3f
   1b8a4:	bhi	1b740 <__assert_fail@plt+0xa248>
   1b8a8:	cmp	r4, #3
   1b8ac:	beq	1b744 <__assert_fail@plt+0xa24c>
   1b8b0:	ldrb	r3, [r0, #3]
   1b8b4:	eor	r3, r3, #128	; 0x80
   1b8b8:	cmp	r3, #63	; 0x3f
   1b8bc:	bhi	1b740 <__assert_fail@plt+0xa248>
   1b8c0:	cmp	r4, #4
   1b8c4:	beq	1b744 <__assert_fail@plt+0xa24c>
   1b8c8:	ldrb	r3, [r0, #4]
   1b8cc:	eor	r3, r3, #128	; 0x80
   1b8d0:	cmp	r3, #63	; 0x3f
   1b8d4:	bhi	1b740 <__assert_fail@plt+0xa248>
   1b8d8:	cmp	r4, #6
   1b8dc:	bne	1b948 <__assert_fail@plt+0xa450>
   1b8e0:	ldrb	r3, [r0, #5]
   1b8e4:	eor	r3, r3, #128	; 0x80
   1b8e8:	cmp	r3, #63	; 0x3f
   1b8ec:	bls	1b744 <__assert_fail@plt+0xa24c>
   1b8f0:	b	1b740 <__assert_fail@plt+0xa248>
   1b8f4:	cmp	r2, #247	; 0xf7
   1b8f8:	bhi	1b910 <__assert_fail@plt+0xa418>
   1b8fc:	cmp	r3, #143	; 0x8f
   1b900:	cmpls	r2, #240	; 0xf0
   1b904:	movne	r4, #4
   1b908:	bne	1b87c <__assert_fail@plt+0xa384>
   1b90c:	b	1b740 <__assert_fail@plt+0xa248>
   1b910:	cmp	r2, #251	; 0xfb
   1b914:	bhi	1b92c <__assert_fail@plt+0xa434>
   1b918:	cmp	r3, #135	; 0x87
   1b91c:	cmpls	r2, #248	; 0xf8
   1b920:	movne	r4, #5
   1b924:	bne	1b87c <__assert_fail@plt+0xa384>
   1b928:	b	1b740 <__assert_fail@plt+0xa248>
   1b92c:	cmp	r2, #253	; 0xfd
   1b930:	bhi	1b740 <__assert_fail@plt+0xa248>
   1b934:	cmp	r3, #131	; 0x83
   1b938:	cmpls	r2, #252	; 0xfc
   1b93c:	beq	1b740 <__assert_fail@plt+0xa248>
   1b940:	mov	r4, #6
   1b944:	b	1b87c <__assert_fail@plt+0xa384>
   1b948:	mov	r4, #5
   1b94c:	b	1b744 <__assert_fail@plt+0xa24c>
   1b950:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b954:	sub	sp, sp, #8
   1b958:	ldr	r6, [r1, #40]	; 0x28
   1b95c:	ldr	r3, [r1, #56]	; 0x38
   1b960:	cmp	r3, r6
   1b964:	ble	1bbd8 <__assert_fail@plt+0xa6e0>
   1b968:	ldr	sl, [r1, #4]
   1b96c:	ldrb	r3, [r0, #6]
   1b970:	mov	r8, r2
   1b974:	ldrb	r7, [sl, r6]
   1b978:	and	r3, r3, #159	; 0x9f
   1b97c:	strb	r3, [r0, #6]
   1b980:	strb	r7, [r0]
   1b984:	ldr	r3, [r1, #80]	; 0x50
   1b988:	mov	r5, r0
   1b98c:	cmp	r3, #1
   1b990:	mov	r4, r1
   1b994:	ble	1bbec <__assert_fail@plt+0xa6f4>
   1b998:	ldr	r2, [r1, #28]
   1b99c:	cmp	r6, r2
   1b9a0:	beq	1b9b4 <__assert_fail@plt+0xa4bc>
   1b9a4:	ldr	r2, [r1, #8]
   1b9a8:	ldr	r2, [r2, r6, lsl #2]
   1b9ac:	cmn	r2, #1
   1b9b0:	beq	1be4c <__assert_fail@plt+0xa954>
   1b9b4:	cmp	r7, #92	; 0x5c
   1b9b8:	beq	1bc54 <__assert_fail@plt+0xa75c>
   1b9bc:	ldr	r3, [r4, #8]
   1b9c0:	mov	r2, #1
   1b9c4:	strb	r2, [r5, #4]
   1b9c8:	ldr	r9, [r3, r6, lsl #2]
   1b9cc:	mov	r0, r9
   1b9d0:	bl	113fc <iswalnum@plt>
   1b9d4:	ldrb	r3, [r5, #6]
   1b9d8:	sub	r9, r9, #95	; 0x5f
   1b9dc:	clz	r9, r9
   1b9e0:	lsr	r9, r9, #5
   1b9e4:	bic	r3, r3, #64	; 0x40
   1b9e8:	cmp	r0, #0
   1b9ec:	orrne	r9, r9, #1
   1b9f0:	orr	r9, r3, r9, lsl #6
   1b9f4:	strb	r9, [r5, #6]
   1b9f8:	sub	r7, r7, #10
   1b9fc:	cmp	r7, #115	; 0x73
   1ba00:	ldrls	pc, [pc, r7, lsl #2]
   1ba04:	b	1bc48 <__assert_fail@plt+0xa750>
   1ba08:	muleq	r1, r0, lr
   1ba0c:	andeq	fp, r1, r8, asr #24
   1ba10:	andeq	fp, r1, r8, asr #24
   1ba14:	andeq	fp, r1, r8, asr #24
   1ba18:	andeq	fp, r1, r8, asr #24
   1ba1c:	andeq	fp, r1, r8, asr #24
   1ba20:	andeq	fp, r1, r8, asr #24
   1ba24:	andeq	fp, r1, r8, asr #24
   1ba28:	andeq	fp, r1, r8, asr #24
   1ba2c:	andeq	fp, r1, r8, asr #24
   1ba30:	andeq	fp, r1, r8, asr #24
   1ba34:	andeq	fp, r1, r8, asr #24
   1ba38:	andeq	fp, r1, r8, asr #24
   1ba3c:	andeq	fp, r1, r8, asr #24
   1ba40:	andeq	fp, r1, r8, asr #24
   1ba44:	andeq	fp, r1, r8, asr #24
   1ba48:	andeq	fp, r1, r8, asr #24
   1ba4c:	andeq	fp, r1, r8, asr #24
   1ba50:	andeq	fp, r1, r8, asr #24
   1ba54:	andeq	fp, r1, r8, asr #24
   1ba58:	andeq	fp, r1, r8, asr #24
   1ba5c:	andeq	fp, r1, r8, asr #24
   1ba60:	andeq	fp, r1, r8, asr #24
   1ba64:	andeq	fp, r1, r8, asr #24
   1ba68:	andeq	fp, r1, r8, asr #24
   1ba6c:	andeq	fp, r1, r8, asr #24
   1ba70:	andeq	fp, r1, r8, lsr #29
   1ba74:	andeq	fp, r1, r8, asr #24
   1ba78:	andeq	fp, r1, r8, asr #24
   1ba7c:	andeq	fp, r1, r8, asr #24
   1ba80:	andeq	fp, r1, r8, lsl #30
   1ba84:	andeq	fp, r1, r0, lsr #30
   1ba88:	andeq	fp, r1, r8, lsr pc
   1ba8c:	andeq	fp, r1, r8, asr #30
   1ba90:	andeq	fp, r1, r8, asr #24
   1ba94:	andeq	fp, r1, r8, asr #24
   1ba98:	andeq	fp, r1, r8, ror #30
   1ba9c:	andeq	fp, r1, r8, asr #24
   1baa0:	andeq	fp, r1, r8, asr #24
   1baa4:	andeq	fp, r1, r8, asr #24
   1baa8:	andeq	fp, r1, r8, asr #24
   1baac:	andeq	fp, r1, r8, asr #24
   1bab0:	andeq	fp, r1, r8, asr #24
   1bab4:	andeq	fp, r1, r8, asr #24
   1bab8:	andeq	fp, r1, r8, asr #24
   1babc:	andeq	fp, r1, r8, asr #24
   1bac0:	andeq	fp, r1, r8, asr #24
   1bac4:	andeq	fp, r1, r8, asr #24
   1bac8:	andeq	fp, r1, r8, asr #24
   1bacc:	andeq	fp, r1, r8, asr #24
   1bad0:	andeq	fp, r1, r8, asr #24
   1bad4:	andeq	fp, r1, r8, asr #24
   1bad8:	andeq	fp, r1, r8, asr #24
   1badc:	andeq	fp, r1, r8, ror pc
   1bae0:	andeq	fp, r1, r8, asr #24
   1bae4:	andeq	fp, r1, r8, asr #24
   1bae8:	andeq	fp, r1, r8, asr #24
   1baec:	andeq	fp, r1, r8, asr #24
   1baf0:	andeq	fp, r1, r8, asr #24
   1baf4:	andeq	fp, r1, r8, asr #24
   1baf8:	andeq	fp, r1, r8, asr #24
   1bafc:	andeq	fp, r1, r8, asr #24
   1bb00:	andeq	fp, r1, r8, asr #24
   1bb04:	andeq	fp, r1, r8, asr #24
   1bb08:	andeq	fp, r1, r8, asr #24
   1bb0c:	andeq	fp, r1, r8, asr #24
   1bb10:	andeq	fp, r1, r8, asr #24
   1bb14:	andeq	fp, r1, r8, asr #24
   1bb18:	andeq	fp, r1, r8, asr #24
   1bb1c:	andeq	fp, r1, r8, asr #24
   1bb20:	andeq	fp, r1, r8, asr #24
   1bb24:	andeq	fp, r1, r8, asr #24
   1bb28:	andeq	fp, r1, r8, asr #24
   1bb2c:	andeq	fp, r1, r8, asr #24
   1bb30:	andeq	fp, r1, r8, asr #24
   1bb34:	andeq	fp, r1, r8, asr #24
   1bb38:	andeq	fp, r1, r8, asr #24
   1bb3c:	andeq	fp, r1, r8, asr #24
   1bb40:	andeq	fp, r1, r8, asr #24
   1bb44:	andeq	fp, r1, r8, asr #24
   1bb48:	andeq	fp, r1, r8, asr #24
   1bb4c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1bb50:	andeq	fp, r1, r8, asr #24
   1bb54:	andeq	fp, r1, r8, asr #24
   1bb58:	andeq	fp, r1, r8, lsr #31
   1bb5c:	andeq	fp, r1, r8, asr #24
   1bb60:	andeq	fp, r1, r8, asr #24
   1bb64:	andeq	fp, r1, r8, asr #24
   1bb68:	andeq	fp, r1, r8, asr #24
   1bb6c:	andeq	fp, r1, r8, asr #24
   1bb70:	andeq	fp, r1, r8, asr #24
   1bb74:	andeq	fp, r1, r8, asr #24
   1bb78:	andeq	fp, r1, r8, asr #24
   1bb7c:	andeq	fp, r1, r8, asr #24
   1bb80:	andeq	fp, r1, r8, asr #24
   1bb84:	andeq	fp, r1, r8, asr #24
   1bb88:	andeq	fp, r1, r8, asr #24
   1bb8c:	andeq	fp, r1, r8, asr #24
   1bb90:	andeq	fp, r1, r8, asr #24
   1bb94:	andeq	fp, r1, r8, asr #24
   1bb98:	andeq	fp, r1, r8, asr #24
   1bb9c:	andeq	fp, r1, r8, asr #24
   1bba0:	andeq	fp, r1, r8, asr #24
   1bba4:	andeq	fp, r1, r8, asr #24
   1bba8:	andeq	fp, r1, r8, asr #24
   1bbac:	andeq	fp, r1, r8, asr #24
   1bbb0:	andeq	fp, r1, r8, asr #24
   1bbb4:	andeq	fp, r1, r8, asr #24
   1bbb8:	andeq	fp, r1, r8, asr #24
   1bbbc:	andeq	fp, r1, r8, asr #24
   1bbc0:	andeq	fp, r1, r8, asr #24
   1bbc4:	andeq	fp, r1, r8, asr #24
   1bbc8:	andeq	fp, r1, r8, asr #24
   1bbcc:	andeq	fp, r1, r0, lsr ip
   1bbd0:	andeq	ip, r1, r0
   1bbd4:	andeq	fp, r1, r4, ror lr
   1bbd8:	mov	r3, #2
   1bbdc:	strb	r3, [r0, #4]
   1bbe0:	mov	r0, #0
   1bbe4:	add	sp, sp, #8
   1bbe8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bbec:	cmp	r7, #92	; 0x5c
   1bbf0:	beq	1bc54 <__assert_fail@plt+0xa75c>
   1bbf4:	mov	r3, #1
   1bbf8:	strb	r3, [r5, #4]
   1bbfc:	bl	113a8 <__ctype_b_loc@plt>
   1bc00:	lsl	r1, r7, #1
   1bc04:	ldrb	r2, [r5, #6]
   1bc08:	bic	r2, r2, #64	; 0x40
   1bc0c:	ldr	r3, [r0]
   1bc10:	ldrh	r3, [r3, r1]
   1bc14:	lsr	r3, r3, #3
   1bc18:	and	r3, r3, #1
   1bc1c:	cmp	r7, #95	; 0x5f
   1bc20:	orreq	r3, r3, #1
   1bc24:	orr	r3, r2, r3, lsl #6
   1bc28:	strb	r3, [r5, #6]
   1bc2c:	b	1b9f8 <__assert_fail@plt+0xa500>
   1bc30:	and	r8, r8, #4608	; 0x1200
   1bc34:	cmp	r8, #4608	; 0x1200
   1bc38:	moveq	r3, #23
   1bc3c:	strbeq	r3, [r5, #4]
   1bc40:	moveq	r0, #1
   1bc44:	beq	1bbe4 <__assert_fail@plt+0xa6ec>
   1bc48:	mov	r0, #1
   1bc4c:	add	sp, sp, #8
   1bc50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bc54:	ldr	r1, [r4, #48]	; 0x30
   1bc58:	add	r2, r6, #1
   1bc5c:	cmp	r2, r1
   1bc60:	bge	1be64 <__assert_fail@plt+0xa96c>
   1bc64:	ldrb	r1, [r4, #75]	; 0x4b
   1bc68:	cmp	r1, #0
   1bc6c:	bne	1c220 <__assert_fail@plt+0xad28>
   1bc70:	ldrb	r6, [sl, r2]
   1bc74:	cmp	r3, #1
   1bc78:	mov	r3, #1
   1bc7c:	strb	r6, [r5]
   1bc80:	strb	r3, [r5, #4]
   1bc84:	ble	1c1ec <__assert_fail@plt+0xacf4>
   1bc88:	ldr	r1, [r4, #8]
   1bc8c:	add	r1, r1, r2, lsl #2
   1bc90:	ldr	r4, [r1]
   1bc94:	mov	r0, r4
   1bc98:	bl	113fc <iswalnum@plt>
   1bc9c:	ldrb	r3, [r5, #6]
   1bca0:	sub	r4, r4, #95	; 0x5f
   1bca4:	clz	r4, r4
   1bca8:	lsr	r4, r4, #5
   1bcac:	bic	r3, r3, #64	; 0x40
   1bcb0:	cmp	r0, #0
   1bcb4:	orrne	r4, r4, #1
   1bcb8:	orr	r4, r3, r4, lsl #6
   1bcbc:	strb	r4, [r5, #6]
   1bcc0:	sub	r3, r6, #39	; 0x27
   1bcc4:	cmp	r3, #86	; 0x56
   1bcc8:	ldrls	pc, [pc, r3, lsl #2]
   1bccc:	b	1be44 <__assert_fail@plt+0xa94c>
   1bcd0:	andeq	ip, r1, r8, lsr #32
   1bcd4:	andeq	ip, r1, r0, lsl r0
   1bcd8:	ldrdeq	ip, [r1], -r4
   1bcdc:	andeq	fp, r1, r4, asr #28
   1bce0:			; <UNDEFINED> instruction: 0x0001c1b8
   1bce4:	andeq	fp, r1, r4, asr #28
   1bce8:	andeq	fp, r1, r4, asr #28
   1bcec:	andeq	fp, r1, r4, asr #28
   1bcf0:	andeq	fp, r1, r4, asr #28
   1bcf4:	andeq	fp, r1, r4, asr #28
   1bcf8:	muleq	r1, r8, r1
   1bcfc:	muleq	r1, r8, r1
   1bd00:	muleq	r1, r8, r1
   1bd04:	muleq	r1, r8, r1
   1bd08:	muleq	r1, r8, r1
   1bd0c:	muleq	r1, r8, r1
   1bd10:	muleq	r1, r8, r1
   1bd14:	muleq	r1, r8, r1
   1bd18:	muleq	r1, r8, r1
   1bd1c:	andeq	fp, r1, r4, asr #28
   1bd20:	andeq	fp, r1, r4, asr #28
   1bd24:	andeq	ip, r1, r8, ror r1
   1bd28:	andeq	fp, r1, r4, asr #28
   1bd2c:	andeq	ip, r1, r8, asr r1
   1bd30:	andeq	ip, r1, ip, lsr r1
   1bd34:	andeq	fp, r1, r4, asr #28
   1bd38:	andeq	fp, r1, r4, asr #28
   1bd3c:	andeq	ip, r1, ip, lsl r1
   1bd40:	andeq	fp, r1, r4, asr #28
   1bd44:	andeq	fp, r1, r4, asr #28
   1bd48:	andeq	fp, r1, r4, asr #28
   1bd4c:	andeq	fp, r1, r4, asr #28
   1bd50:	andeq	fp, r1, r4, asr #28
   1bd54:	andeq	fp, r1, r4, asr #28
   1bd58:	andeq	fp, r1, r4, asr #28
   1bd5c:	andeq	fp, r1, r4, asr #28
   1bd60:	andeq	fp, r1, r4, asr #28
   1bd64:	andeq	fp, r1, r4, asr #28
   1bd68:	andeq	fp, r1, r4, asr #28
   1bd6c:	andeq	fp, r1, r4, asr #28
   1bd70:	andeq	fp, r1, r4, asr #28
   1bd74:	andeq	fp, r1, r4, asr #28
   1bd78:	andeq	fp, r1, r4, asr #28
   1bd7c:	andeq	fp, r1, r4, asr #28
   1bd80:	andeq	ip, r1, r4, lsl #2
   1bd84:	andeq	fp, r1, r4, asr #28
   1bd88:	andeq	fp, r1, r4, asr #28
   1bd8c:	andeq	fp, r1, r4, asr #28
   1bd90:	andeq	ip, r1, ip, ror #1
   1bd94:	andeq	fp, r1, r4, asr #28
   1bd98:	andeq	fp, r1, r4, asr #28
   1bd9c:	andeq	fp, r1, r4, asr #28
   1bda0:	andeq	fp, r1, r4, asr #28
   1bda4:	andeq	fp, r1, r4, asr #28
   1bda8:	andeq	fp, r1, r4, asr #28
   1bdac:	andeq	fp, r1, r4, asr #28
   1bdb0:	andeq	fp, r1, r4, asr #28
   1bdb4:	andeq	ip, r1, ip, asr #1
   1bdb8:	andeq	fp, r1, r4, asr #28
   1bdbc:	andeq	ip, r1, ip, lsr #1
   1bdc0:	andeq	fp, r1, r4, asr #28
   1bdc4:	andeq	fp, r1, r4, asr #28
   1bdc8:	andeq	fp, r1, r4, asr #28
   1bdcc:	andeq	fp, r1, r4, asr #28
   1bdd0:	andeq	fp, r1, r4, asr #28
   1bdd4:	andeq	fp, r1, r4, asr #28
   1bdd8:	andeq	fp, r1, r4, asr #28
   1bddc:	andeq	fp, r1, r4, asr #28
   1bde0:	andeq	fp, r1, r4, asr #28
   1bde4:	andeq	fp, r1, r4, asr #28
   1bde8:	andeq	fp, r1, r4, asr #28
   1bdec:	andeq	fp, r1, r4, asr #28
   1bdf0:	andeq	fp, r1, r4, asr #28
   1bdf4:	andeq	fp, r1, r4, asr #28
   1bdf8:	andeq	fp, r1, r4, asr #28
   1bdfc:	andeq	fp, r1, r4, asr #28
   1be00:	muleq	r1, r4, r0
   1be04:	andeq	fp, r1, r4, asr #28
   1be08:	andeq	fp, r1, r4, asr #28
   1be0c:	andeq	fp, r1, r4, asr #28
   1be10:	andeq	ip, r1, ip, ror r0
   1be14:	andeq	fp, r1, r4, asr #28
   1be18:	andeq	fp, r1, r4, asr #28
   1be1c:	andeq	fp, r1, r4, asr #28
   1be20:	andeq	fp, r1, ip, lsr #28
   1be24:	andeq	ip, r1, r4, rrx
   1be28:	andeq	ip, r1, r8, asr #32
   1be2c:	and	r8, r8, #4608	; 0x1200
   1be30:	cmp	r8, #512	; 0x200
   1be34:	moveq	r3, #23
   1be38:	strbeq	r3, [r5, #4]
   1be3c:	moveq	r0, #2
   1be40:	beq	1bbe4 <__assert_fail@plt+0xa6ec>
   1be44:	mov	r0, #2
   1be48:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1be4c:	ldrb	r3, [r0, #6]
   1be50:	mov	r0, #1
   1be54:	strb	r0, [r5, #4]
   1be58:	orr	r3, r3, #32
   1be5c:	strb	r3, [r5, #6]
   1be60:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1be64:	mov	r3, #36	; 0x24
   1be68:	strb	r3, [r5, #4]
   1be6c:	mov	r0, #1
   1be70:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1be74:	and	r8, r8, #4608	; 0x1200
   1be78:	cmp	r8, #4608	; 0x1200
   1be7c:	moveq	r3, #24
   1be80:	strbeq	r3, [r5, #4]
   1be84:	moveq	r0, #1
   1be88:	bne	1bc48 <__assert_fail@plt+0xa750>
   1be8c:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1be90:	tst	r8, #2048	; 0x800
   1be94:	beq	1bc48 <__assert_fail@plt+0xa750>
   1be98:	mov	r3, #10
   1be9c:	strb	r3, [r5, #4]
   1bea0:	mov	r0, #1
   1bea4:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1bea8:	tst	r8, #8
   1beac:	bne	1bef0 <__assert_fail@plt+0xa9f8>
   1beb0:	ldr	r3, [r4, #48]	; 0x30
   1beb4:	add	r6, r6, #1
   1beb8:	cmp	r6, r3
   1bebc:	beq	1bef0 <__assert_fail@plt+0xa9f8>
   1bec0:	mov	r2, r8
   1bec4:	str	r6, [r4, #40]	; 0x28
   1bec8:	mov	r1, r4
   1becc:	mov	r0, sp
   1bed0:	bl	1b950 <__assert_fail@plt+0xa458>
   1bed4:	ldrb	r2, [sp, #4]
   1bed8:	ldr	r3, [r4, #40]	; 0x28
   1bedc:	sub	r2, r2, #9
   1bee0:	sub	r3, r3, #1
   1bee4:	cmp	r2, #1
   1bee8:	str	r3, [r4, #40]	; 0x28
   1beec:	bhi	1bc48 <__assert_fail@plt+0xa750>
   1bef0:	mov	r2, #12
   1bef4:	mov	r3, #32
   1bef8:	strb	r2, [r5, #4]
   1befc:	str	r3, [r5]
   1bf00:	mov	r0, #1
   1bf04:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1bf08:	tst	r8, #8192	; 0x2000
   1bf0c:	beq	1bc48 <__assert_fail@plt+0xa750>
   1bf10:	mov	r3, #8
   1bf14:	strb	r3, [r5, #4]
   1bf18:	mov	r0, #1
   1bf1c:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1bf20:	tst	r8, #8192	; 0x2000
   1bf24:	beq	1bc48 <__assert_fail@plt+0xa750>
   1bf28:	mov	r3, #9
   1bf2c:	strb	r3, [r5, #4]
   1bf30:	mov	r0, #1
   1bf34:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1bf38:	mov	r3, #11
   1bf3c:	strb	r3, [r5, #4]
   1bf40:	mov	r0, #1
   1bf44:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1bf48:	ldr	r3, [pc, #864]	; 1c2b0 <__assert_fail@plt+0xadb8>
   1bf4c:	and	r3, r3, r8
   1bf50:	cmp	r3, #0
   1bf54:	bne	1bc48 <__assert_fail@plt+0xa750>
   1bf58:	mov	r3, #18
   1bf5c:	strb	r3, [r5, #4]
   1bf60:	mov	r0, #1
   1bf64:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1bf68:	mov	r3, #5
   1bf6c:	strb	r3, [r5, #4]
   1bf70:	mov	r0, #1
   1bf74:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1bf78:	ldr	r3, [pc, #816]	; 1c2b0 <__assert_fail@plt+0xadb8>
   1bf7c:	and	r3, r3, r8
   1bf80:	cmp	r3, #0
   1bf84:	bne	1bc48 <__assert_fail@plt+0xa750>
   1bf88:	mov	r3, #19
   1bf8c:	strb	r3, [r5, #4]
   1bf90:	mov	r0, #1
   1bf94:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1bf98:	mov	r3, #20
   1bf9c:	strb	r3, [r5, #4]
   1bfa0:	mov	r0, #1
   1bfa4:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1bfa8:	ldr	r3, [pc, #772]	; 1c2b4 <__assert_fail@plt+0xadbc>
   1bfac:	cmp	r6, #0
   1bfb0:	and	r3, r3, r8
   1bfb4:	clz	r3, r3
   1bfb8:	lsr	r3, r3, #5
   1bfbc:	moveq	r3, #0
   1bfc0:	cmp	r3, #0
   1bfc4:	beq	1bfe8 <__assert_fail@plt+0xaaf0>
   1bfc8:	add	r6, sl, r6
   1bfcc:	lsr	r3, r8, #11
   1bfd0:	ldrb	r2, [r6, #-1]
   1bfd4:	eor	r3, r3, #1
   1bfd8:	cmp	r2, #10
   1bfdc:	orrne	r3, r3, #1
   1bfe0:	tst	r3, #1
   1bfe4:	bne	1bc48 <__assert_fail@plt+0xa750>
   1bfe8:	mov	r2, #12
   1bfec:	mov	r3, #16
   1bff0:	strb	r2, [r5, #4]
   1bff4:	str	r3, [r5]
   1bff8:	mov	r0, #1
   1bffc:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1c000:	and	r8, r8, #33792	; 0x8400
   1c004:	cmp	r8, #32768	; 0x8000
   1c008:	bne	1bc48 <__assert_fail@plt+0xa750>
   1c00c:	b	1be98 <__assert_fail@plt+0xa9a0>
   1c010:	tst	r8, #8192	; 0x2000
   1c014:	bne	1be44 <__assert_fail@plt+0xa94c>
   1c018:	mov	r3, #8
   1c01c:	strb	r3, [r5, #4]
   1c020:	mov	r0, #2
   1c024:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1c028:	tst	r8, #524288	; 0x80000
   1c02c:	bne	1be44 <__assert_fail@plt+0xa94c>
   1c030:	mov	r2, #12
   1c034:	mov	r3, #128	; 0x80
   1c038:	strb	r2, [r5, #4]
   1c03c:	str	r3, [r5]
   1c040:	mov	r0, #2
   1c044:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1c048:	and	r8, r8, #4608	; 0x1200
   1c04c:	cmp	r8, #512	; 0x200
   1c050:	moveq	r3, #24
   1c054:	strbeq	r3, [r5, #4]
   1c058:	moveq	r0, #2
   1c05c:	bne	1be44 <__assert_fail@plt+0xa94c>
   1c060:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1c064:	tst	r8, #33792	; 0x8400
   1c068:	bne	1be44 <__assert_fail@plt+0xa94c>
   1c06c:	mov	r3, #10
   1c070:	strb	r3, [r5, #4]
   1c074:	mov	r0, #2
   1c078:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1c07c:	tst	r8, #524288	; 0x80000
   1c080:	bne	1be44 <__assert_fail@plt+0xa94c>
   1c084:	mov	r3, #32
   1c088:	strb	r3, [r5, #4]
   1c08c:	mov	r0, #2
   1c090:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1c094:	tst	r8, #524288	; 0x80000
   1c098:	bne	1be44 <__assert_fail@plt+0xa94c>
   1c09c:	mov	r3, #34	; 0x22
   1c0a0:	strb	r3, [r5, #4]
   1c0a4:	mov	r0, #2
   1c0a8:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1c0ac:	tst	r8, #524288	; 0x80000
   1c0b0:	bne	1be44 <__assert_fail@plt+0xa94c>
   1c0b4:	mov	r2, #12
   1c0b8:	mov	r3, #256	; 0x100
   1c0bc:	strb	r2, [r5, #4]
   1c0c0:	str	r3, [r5]
   1c0c4:	mov	r0, #2
   1c0c8:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1c0cc:	tst	r8, #524288	; 0x80000
   1c0d0:	bne	1be44 <__assert_fail@plt+0xa94c>
   1c0d4:	mov	r2, #12
   1c0d8:	mov	r3, #64	; 0x40
   1c0dc:	strb	r2, [r5, #4]
   1c0e0:	str	r3, [r5]
   1c0e4:	mov	r0, #2
   1c0e8:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1c0ec:	tst	r8, #524288	; 0x80000
   1c0f0:	bne	1be44 <__assert_fail@plt+0xa94c>
   1c0f4:	mov	r3, #33	; 0x21
   1c0f8:	strb	r3, [r5, #4]
   1c0fc:	mov	r0, #2
   1c100:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1c104:	tst	r8, #524288	; 0x80000
   1c108:	bne	1be44 <__assert_fail@plt+0xa94c>
   1c10c:	mov	r3, #35	; 0x23
   1c110:	strb	r3, [r5, #4]
   1c114:	mov	r0, #2
   1c118:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1c11c:	tst	r8, #524288	; 0x80000
   1c120:	bne	1be44 <__assert_fail@plt+0xa94c>
   1c124:	mov	r2, #12
   1c128:	mov	r3, #512	; 0x200
   1c12c:	strb	r2, [r5, #4]
   1c130:	str	r3, [r5]
   1c134:	mov	r0, #2
   1c138:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1c13c:	ldr	r0, [pc, #364]	; 1c2b0 <__assert_fail@plt+0xadb8>
   1c140:	and	r0, r0, r8
   1c144:	cmp	r0, #2
   1c148:	moveq	r3, #19
   1c14c:	strbeq	r3, [r5, #4]
   1c150:	bne	1be44 <__assert_fail@plt+0xa94c>
   1c154:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1c158:	tst	r8, #524288	; 0x80000
   1c15c:	bne	1be44 <__assert_fail@plt+0xa94c>
   1c160:	mov	r2, #12
   1c164:	mov	r3, #9
   1c168:	strb	r2, [r5, #4]
   1c16c:	str	r3, [r5]
   1c170:	mov	r0, #2
   1c174:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1c178:	tst	r8, #524288	; 0x80000
   1c17c:	bne	1be44 <__assert_fail@plt+0xa94c>
   1c180:	mov	r2, #12
   1c184:	mov	r3, #6
   1c188:	strb	r2, [r5, #4]
   1c18c:	str	r3, [r5]
   1c190:	mov	r0, #2
   1c194:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1c198:	tst	r8, #16384	; 0x4000
   1c19c:	bne	1be44 <__assert_fail@plt+0xa94c>
   1c1a0:	sub	r6, r6, #49	; 0x31
   1c1a4:	mov	r3, #4
   1c1a8:	str	r6, [r5]
   1c1ac:	strb	r3, [r5, #4]
   1c1b0:	mov	r0, #2
   1c1b4:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1c1b8:	ldr	r0, [pc, #240]	; 1c2b0 <__assert_fail@plt+0xadb8>
   1c1bc:	and	r0, r0, r8
   1c1c0:	cmp	r0, #2
   1c1c4:	moveq	r3, #18
   1c1c8:	strbeq	r3, [r5, #4]
   1c1cc:	bne	1be44 <__assert_fail@plt+0xa94c>
   1c1d0:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1c1d4:	tst	r8, #8192	; 0x2000
   1c1d8:	bne	1be44 <__assert_fail@plt+0xa94c>
   1c1dc:	mov	r3, #9
   1c1e0:	strb	r3, [r5, #4]
   1c1e4:	mov	r0, #2
   1c1e8:	b	1bbe4 <__assert_fail@plt+0xa6ec>
   1c1ec:	bl	113a8 <__ctype_b_loc@plt>
   1c1f0:	lsl	r3, r6, #1
   1c1f4:	ldrb	r2, [r5, #6]
   1c1f8:	bic	r2, r2, #64	; 0x40
   1c1fc:	ldr	r1, [r0]
   1c200:	ldrh	r3, [r1, r3]
   1c204:	lsr	r3, r3, #3
   1c208:	and	r3, r3, #1
   1c20c:	cmp	r6, #95	; 0x5f
   1c210:	orreq	r3, r3, #1
   1c214:	orr	r3, r2, r3, lsl #6
   1c218:	strb	r3, [r5, #6]
   1c21c:	b	1bcc0 <__assert_fail@plt+0xa7c8>
   1c220:	cmp	r3, #1
   1c224:	ble	1c258 <__assert_fail@plt+0xad60>
   1c228:	ldr	r0, [r4, #8]
   1c22c:	add	r1, r0, r2, lsl #2
   1c230:	ldr	r0, [r0, r2, lsl #2]
   1c234:	cmn	r0, #1
   1c238:	beq	1c29c <__assert_fail@plt+0xada4>
   1c23c:	ldr	r0, [r4, #28]
   1c240:	add	r6, r6, #2
   1c244:	cmp	r0, r6
   1c248:	beq	1c258 <__assert_fail@plt+0xad60>
   1c24c:	ldr	r0, [r1, #4]
   1c250:	cmn	r0, #1
   1c254:	beq	1c29c <__assert_fail@plt+0xada4>
   1c258:	ldrb	r1, [r4, #76]	; 0x4c
   1c25c:	cmp	r1, #0
   1c260:	bne	1c278 <__assert_fail@plt+0xad80>
   1c264:	ldr	r1, [r4]
   1c268:	ldr	r0, [r4, #24]
   1c26c:	add	r1, r1, r2
   1c270:	ldrb	r6, [r1, r0]
   1c274:	b	1bc74 <__assert_fail@plt+0xa77c>
   1c278:	ldr	ip, [r4, #12]
   1c27c:	ldr	r1, [r4]
   1c280:	ldr	r0, [r4, #24]
   1c284:	ldr	ip, [ip, r2, lsl #2]
   1c288:	add	r1, r1, ip
   1c28c:	ldrb	r6, [r1, r0]
   1c290:	tst	r6, #128	; 0x80
   1c294:	bne	1bc70 <__assert_fail@plt+0xa778>
   1c298:	b	1bc74 <__assert_fail@plt+0xa77c>
   1c29c:	ldrb	r6, [sl, r2]
   1c2a0:	mov	r3, #1
   1c2a4:	strb	r3, [r5, #4]
   1c2a8:	strb	r6, [r5]
   1c2ac:	b	1bc90 <__assert_fail@plt+0xa798>
   1c2b0:	andeq	r0, r0, r2, lsl #8
   1c2b4:	addeq	r0, r0, r8
   1c2b8:	ldr	ip, [r1]
   1c2bc:	push	{r4, r5, r6, lr}
   1c2c0:	cmp	ip, #31
   1c2c4:	sub	sp, sp, #8
   1c2c8:	mov	r5, r0
   1c2cc:	beq	1c330 <__assert_fail@plt+0xae38>
   1c2d0:	lsl	r3, ip, #5
   1c2d4:	ldr	r4, [r0]
   1c2d8:	add	lr, ip, #1
   1c2dc:	add	r6, r3, #4
   1c2e0:	add	r3, r4, r3
   1c2e4:	mov	ip, #0
   1c2e8:	str	lr, [r1]
   1c2ec:	str	ip, [r3, #4]
   1c2f0:	str	ip, [r3, #8]
   1c2f4:	str	ip, [r3, #12]
   1c2f8:	ldm	r2, {r0, r1}
   1c2fc:	add	r2, r3, #24
   1c300:	add	r4, r4, r6
   1c304:	stm	r2, {r0, r1}
   1c308:	ldrb	r2, [r3, #30]
   1c30c:	mvn	r1, #0
   1c310:	str	ip, [r3, #16]
   1c314:	and	r2, r2, #243	; 0xf3
   1c318:	str	ip, [r3, #20]
   1c31c:	strb	r2, [r3, #30]
   1c320:	str	r1, [r3, #32]
   1c324:	mov	r0, r4
   1c328:	add	sp, sp, #8
   1c32c:	pop	{r4, r5, r6, pc}
   1c330:	mov	r0, #996	; 0x3e4
   1c334:	stm	sp, {r1, r2}
   1c338:	bl	2a790 <__assert_fail@plt+0x19298>
   1c33c:	subs	r4, r0, #0
   1c340:	beq	1c324 <__assert_fail@plt+0xae2c>
   1c344:	ldr	r0, [r5]
   1c348:	mov	r6, #4
   1c34c:	mov	lr, #1
   1c350:	mov	r3, #0
   1c354:	str	r0, [r4]
   1c358:	str	r4, [r5]
   1c35c:	ldm	sp, {r1, r2}
   1c360:	b	1c2e0 <__assert_fail@plt+0xade8>
   1c364:	push	{r4, r5, r6, lr}
   1c368:	mov	r4, r0
   1c36c:	ldr	r5, [pc, #168]	; 1c41c <__assert_fail@plt+0xaf24>
   1c370:	b	1c378 <__assert_fail@plt+0xae80>
   1c374:	mov	r4, r3
   1c378:	ldr	r3, [r4, #4]
   1c37c:	cmp	r3, #0
   1c380:	bne	1c374 <__assert_fail@plt+0xae7c>
   1c384:	ldr	r3, [r4, #8]
   1c388:	cmp	r3, #0
   1c38c:	bne	1c374 <__assert_fail@plt+0xae7c>
   1c390:	ldr	r3, [r4, #24]
   1c394:	and	r3, r3, r5
   1c398:	cmp	r3, #6
   1c39c:	bne	1c408 <__assert_fail@plt+0xaf10>
   1c3a0:	ldr	r6, [r4, #20]
   1c3a4:	ldr	r0, [r6]
   1c3a8:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c3ac:	ldr	r0, [r6, #4]
   1c3b0:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c3b4:	ldr	r0, [r6, #8]
   1c3b8:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c3bc:	ldr	r0, [r6, #12]
   1c3c0:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c3c4:	mov	r0, r6
   1c3c8:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c3cc:	ldr	r0, [r4]
   1c3d0:	cmp	r0, #0
   1c3d4:	popeq	{r4, r5, r6, pc}
   1c3d8:	ldr	r3, [r0, #8]
   1c3dc:	cmp	r4, r3
   1c3e0:	cmpne	r3, #0
   1c3e4:	moveq	r4, #1
   1c3e8:	movne	r4, #0
   1c3ec:	cmp	r4, #0
   1c3f0:	mov	r4, r0
   1c3f4:	beq	1c374 <__assert_fail@plt+0xae7c>
   1c3f8:	ldr	r3, [r4, #24]
   1c3fc:	and	r3, r3, r5
   1c400:	cmp	r3, #6
   1c404:	beq	1c3a0 <__assert_fail@plt+0xaea8>
   1c408:	cmp	r3, #3
   1c40c:	bne	1c3cc <__assert_fail@plt+0xaed4>
   1c410:	ldr	r0, [r4, #20]
   1c414:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c418:	b	1c3cc <__assert_fail@plt+0xaed4>
   1c41c:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   1c420:	ldr	r2, [r0]
   1c424:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c428:	cmp	r2, #0
   1c42c:	mov	r7, r0
   1c430:	beq	1c490 <__assert_fail@plt+0xaf98>
   1c434:	ldr	r0, [r0, #8]
   1c438:	cmp	r0, #0
   1c43c:	beq	1c490 <__assert_fail@plt+0xaf98>
   1c440:	ldr	r5, [pc, #500]	; 1c63c <__assert_fail@plt+0xb144>
   1c444:	mov	r4, #0
   1c448:	b	1c45c <__assert_fail@plt+0xaf64>
   1c44c:	add	r4, r4, #1
   1c450:	cmp	r4, r0
   1c454:	bcs	1c490 <__assert_fail@plt+0xaf98>
   1c458:	ldr	r2, [r7]
   1c45c:	add	r1, r2, r4, lsl #3
   1c460:	ldr	r3, [r1, #4]
   1c464:	and	r3, r3, r5
   1c468:	cmp	r3, #6
   1c46c:	beq	1c608 <__assert_fail@plt+0xb110>
   1c470:	cmp	r3, #3
   1c474:	bne	1c44c <__assert_fail@plt+0xaf54>
   1c478:	ldr	r0, [r1]
   1c47c:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c480:	ldr	r0, [r7, #8]
   1c484:	add	r4, r4, #1
   1c488:	cmp	r4, r0
   1c48c:	bcc	1c458 <__assert_fail@plt+0xaf60>
   1c490:	ldr	r0, [r7, #12]
   1c494:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c498:	ldr	r3, [r7, #8]
   1c49c:	cmp	r3, #0
   1c4a0:	movne	r4, #0
   1c4a4:	movne	r5, r4
   1c4a8:	beq	1c508 <__assert_fail@plt+0xb010>
   1c4ac:	ldr	r3, [r7, #24]
   1c4b0:	add	r5, r5, #1
   1c4b4:	cmp	r3, #0
   1c4b8:	add	r2, r3, r4
   1c4bc:	beq	1c4c8 <__assert_fail@plt+0xafd0>
   1c4c0:	ldr	r0, [r2, #8]
   1c4c4:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c4c8:	ldr	r3, [r7, #28]
   1c4cc:	cmp	r3, #0
   1c4d0:	add	r2, r3, r4
   1c4d4:	beq	1c4e0 <__assert_fail@plt+0xafe8>
   1c4d8:	ldr	r0, [r2, #8]
   1c4dc:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c4e0:	ldr	r3, [r7, #20]
   1c4e4:	cmp	r3, #0
   1c4e8:	add	r2, r3, r4
   1c4ec:	beq	1c4f8 <__assert_fail@plt+0xb000>
   1c4f0:	ldr	r0, [r2, #8]
   1c4f4:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c4f8:	ldr	r3, [r7, #8]
   1c4fc:	add	r4, r4, #12
   1c500:	cmp	r3, r5
   1c504:	bhi	1c4ac <__assert_fail@plt+0xafb4>
   1c508:	ldr	r0, [r7, #20]
   1c50c:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c510:	ldr	r0, [r7, #24]
   1c514:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c518:	ldr	r0, [r7, #28]
   1c51c:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c520:	ldr	r0, [r7]
   1c524:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c528:	ldr	r0, [r7, #32]
   1c52c:	cmp	r0, #0
   1c530:	beq	1c5dc <__assert_fail@plt+0xb0e4>
   1c534:	mov	r8, #0
   1c538:	mov	r9, r8
   1c53c:	ldr	r3, [r0, r8]
   1c540:	add	r6, r0, r8
   1c544:	cmp	r3, #0
   1c548:	movgt	r5, #0
   1c54c:	ble	1c5b8 <__assert_fail@plt+0xb0c0>
   1c550:	ldr	r3, [r6, #8]
   1c554:	ldr	r4, [r3, r5, lsl #2]
   1c558:	add	r5, r5, #1
   1c55c:	ldr	r0, [r4, #24]
   1c560:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c564:	ldr	r0, [r4, #36]	; 0x24
   1c568:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c56c:	ldr	r3, [r4, #40]	; 0x28
   1c570:	add	r2, r4, #4
   1c574:	cmp	r3, r2
   1c578:	beq	1c58c <__assert_fail@plt+0xb094>
   1c57c:	ldr	r0, [r3, #8]
   1c580:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c584:	ldr	r0, [r4, #40]	; 0x28
   1c588:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c58c:	ldr	r0, [r4, #12]
   1c590:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c594:	ldr	r0, [r4, #48]	; 0x30
   1c598:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c59c:	ldr	r0, [r4, #44]	; 0x2c
   1c5a0:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c5a4:	mov	r0, r4
   1c5a8:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c5ac:	ldr	r3, [r6]
   1c5b0:	cmp	r3, r5
   1c5b4:	bgt	1c550 <__assert_fail@plt+0xb058>
   1c5b8:	ldr	r0, [r6, #8]
   1c5bc:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c5c0:	ldr	r3, [r7, #68]	; 0x44
   1c5c4:	add	r9, r9, #1
   1c5c8:	cmp	r3, r9
   1c5cc:	add	r8, r8, #12
   1c5d0:	ldrcs	r0, [r7, #32]
   1c5d4:	bcs	1c53c <__assert_fail@plt+0xb044>
   1c5d8:	ldr	r0, [r7, #32]
   1c5dc:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c5e0:	ldr	r0, [r7, #60]	; 0x3c
   1c5e4:	ldr	r3, [pc, #84]	; 1c640 <__assert_fail@plt+0xb148>
   1c5e8:	cmp	r0, r3
   1c5ec:	beq	1c5f4 <__assert_fail@plt+0xb0fc>
   1c5f0:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c5f4:	ldr	r0, [r7, #132]	; 0x84
   1c5f8:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c5fc:	mov	r0, r7
   1c600:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c604:	b	14214 <__assert_fail@plt+0x2d1c>
   1c608:	ldr	r6, [r2, r4, lsl #3]
   1c60c:	ldr	r0, [r6]
   1c610:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c614:	ldr	r0, [r6, #4]
   1c618:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c61c:	ldr	r0, [r6, #8]
   1c620:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c624:	ldr	r0, [r6, #12]
   1c628:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c62c:	mov	r0, r6
   1c630:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c634:	ldr	r0, [r7, #8]
   1c638:	b	1c44c <__assert_fail@plt+0xaf54>
   1c63c:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   1c640:	ldrdeq	fp, [r2], -ip
   1c644:	ldr	r3, [pc, #96]	; 1c6ac <__assert_fail@plt+0xb1b4>
   1c648:	ldr	r2, [r1, #24]
   1c64c:	push	{r4, lr}
   1c650:	and	r3, r3, r2
   1c654:	cmp	r3, #6
   1c658:	beq	1c67c <__assert_fail@plt+0xb184>
   1c65c:	cmp	r3, #3
   1c660:	beq	1c66c <__assert_fail@plt+0xb174>
   1c664:	mov	r0, #0
   1c668:	pop	{r4, pc}
   1c66c:	ldr	r0, [r1, #20]
   1c670:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c674:	mov	r0, #0
   1c678:	pop	{r4, pc}
   1c67c:	ldr	r4, [r1, #20]
   1c680:	ldr	r0, [r4]
   1c684:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c688:	ldr	r0, [r4, #4]
   1c68c:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c690:	ldr	r0, [r4, #8]
   1c694:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c698:	ldr	r0, [r4, #12]
   1c69c:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c6a0:	mov	r0, r4
   1c6a4:	bl	14214 <__assert_fail@plt+0x2d1c>
   1c6a8:	b	1c664 <__assert_fail@plt+0xb16c>
   1c6ac:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   1c6b0:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c6b4:	sub	sp, sp, #12
   1c6b8:	mov	r5, r0
   1c6bc:	ldr	r6, [sp, #40]	; 0x28
   1c6c0:	mov	r4, r1
   1c6c4:	mov	r9, r2
   1c6c8:	mov	r8, r3
   1c6cc:	mov	r7, #0
   1c6d0:	ldr	r0, [r4, #4]
   1c6d4:	cmp	r0, #0
   1c6d8:	ble	1c734 <__assert_fail@plt+0xb23c>
   1c6dc:	ldr	ip, [r4, #8]
   1c6e0:	sub	r0, r0, #1
   1c6e4:	mov	r1, r7
   1c6e8:	cmp	r1, r0
   1c6ec:	bcs	1c728 <__assert_fail@plt+0xb230>
   1c6f0:	add	r2, r1, r0
   1c6f4:	lsr	r2, r2, #1
   1c6f8:	ldr	r3, [ip, r2, lsl #2]
   1c6fc:	cmp	r9, r3
   1c700:	ble	1c718 <__assert_fail@plt+0xb220>
   1c704:	b	1c798 <__assert_fail@plt+0xb2a0>
   1c708:	ldr	r0, [ip, r3, lsl #2]
   1c70c:	cmp	r9, r0
   1c710:	bgt	1c7a0 <__assert_fail@plt+0xb2a8>
   1c714:	mov	r2, r3
   1c718:	add	r3, r2, r1
   1c71c:	cmp	r2, r1
   1c720:	lsr	r3, r3, #1
   1c724:	bhi	1c708 <__assert_fail@plt+0xb210>
   1c728:	ldr	r3, [ip, r1, lsl #2]
   1c72c:	cmp	r9, r3
   1c730:	beq	1c7c8 <__assert_fail@plt+0xb2d0>
   1c734:	ldr	r3, [r5]
   1c738:	add	r2, r3, r9, lsl #3
   1c73c:	ldrb	r2, [r2, #4]
   1c740:	cmp	r2, r6
   1c744:	bne	1c754 <__assert_fail@plt+0xb25c>
   1c748:	ldr	r3, [r3, r9, lsl #3]
   1c74c:	cmp	r8, r3
   1c750:	beq	1c7ac <__assert_fail@plt+0xb2b4>
   1c754:	mov	r1, r9
   1c758:	mov	r0, r4
   1c75c:	bl	19498 <__assert_fail@plt+0x7fa0>
   1c760:	cmp	r0, #0
   1c764:	beq	1c804 <__assert_fail@plt+0xb30c>
   1c768:	add	r9, r9, r9, lsl #1
   1c76c:	ldr	r3, [r5, #20]
   1c770:	lsl	r9, r9, #2
   1c774:	add	r3, r3, r9
   1c778:	ldr	r2, [r3, #4]
   1c77c:	cmp	r2, #0
   1c780:	beq	1c7c8 <__assert_fail@plt+0xb2d0>
   1c784:	cmp	r2, #2
   1c788:	beq	1c7d4 <__assert_fail@plt+0xb2dc>
   1c78c:	ldr	r3, [r3, #8]
   1c790:	ldr	r9, [r3]
   1c794:	b	1c6d0 <__assert_fail@plt+0xb1d8>
   1c798:	mov	r3, r2
   1c79c:	mov	r2, r0
   1c7a0:	add	r1, r3, #1
   1c7a4:	mov	r0, r2
   1c7a8:	b	1c6e8 <__assert_fail@plt+0xb1f0>
   1c7ac:	cmp	r6, #9
   1c7b0:	bne	1c7c8 <__assert_fail@plt+0xb2d0>
   1c7b4:	mov	r1, r9
   1c7b8:	mov	r0, r4
   1c7bc:	bl	19498 <__assert_fail@plt+0x7fa0>
   1c7c0:	cmp	r0, #0
   1c7c4:	beq	1c804 <__assert_fail@plt+0xb30c>
   1c7c8:	mov	r0, #0
   1c7cc:	add	sp, sp, #12
   1c7d0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c7d4:	ldr	r2, [r3, #8]
   1c7d8:	mov	r1, r4
   1c7dc:	mov	r3, r8
   1c7e0:	ldr	r2, [r2, #4]
   1c7e4:	mov	r0, r5
   1c7e8:	str	r6, [sp]
   1c7ec:	bl	1c6b0 <__assert_fail@plt+0xb1b8>
   1c7f0:	cmp	r0, #0
   1c7f4:	bne	1c7cc <__assert_fail@plt+0xb2d4>
   1c7f8:	ldr	r3, [r5, #20]
   1c7fc:	add	r3, r3, r9
   1c800:	b	1c78c <__assert_fail@plt+0xb294>
   1c804:	mov	r0, #12
   1c808:	add	sp, sp, #12
   1c80c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c810:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c814:	sub	sp, sp, #20
   1c818:	ldr	r8, [pc, #940]	; 1cbcc <__assert_fail@plt+0xb6d4>
   1c81c:	ldr	fp, [sp, #56]	; 0x38
   1c820:	mov	r7, r1
   1c824:	mov	r5, r0
   1c828:	mov	r4, r2
   1c82c:	lsl	r6, r1, #3
   1c830:	str	r3, [sp, #8]
   1c834:	ldr	lr, [r5]
   1c838:	add	r6, lr, r6
   1c83c:	ldrb	r3, [r6, #4]
   1c840:	cmp	r3, #4
   1c844:	beq	1cad8 <__assert_fail@plt+0xb5e0>
   1c848:	add	sl, r7, r7, lsl #1
   1c84c:	ldr	r0, [r5, #20]
   1c850:	lsl	sl, sl, #2
   1c854:	add	ip, r0, sl
   1c858:	ldr	r3, [ip, #4]
   1c85c:	cmp	r3, #0
   1c860:	beq	1cba0 <__assert_fail@plt+0xb6a8>
   1c864:	cmp	r3, #1
   1c868:	beq	1ca6c <__assert_fail@plt+0xb574>
   1c86c:	ldr	r2, [r5, #8]
   1c870:	add	r4, r4, r4, lsl #1
   1c874:	sub	r1, r2, #1
   1c878:	cmp	r1, #0
   1c87c:	add	r3, lr, r1, lsl #3
   1c880:	lsl	r9, r4, #2
   1c884:	ldrb	r6, [r3, #6]
   1c888:	ldr	r4, [ip, #8]
   1c88c:	add	r0, r0, r9
   1c890:	movle	ip, #0
   1c894:	movgt	ip, #1
   1c898:	ands	ip, ip, r6, lsr #2
   1c89c:	mov	ip, #0
   1c8a0:	ldr	r4, [r4]
   1c8a4:	str	ip, [r0, #4]
   1c8a8:	beq	1c9b8 <__assert_fail@plt+0xb4c0>
   1c8ac:	ldr	ip, [r5, #16]
   1c8b0:	rsb	r7, r3, r2, lsl #3
   1c8b4:	sub	r7, r7, #16
   1c8b8:	add	r2, ip, r2, lsl #2
   1c8bc:	b	1c8e0 <__assert_fail@plt+0xb3e8>
   1c8c0:	add	r3, lr, r6
   1c8c4:	sub	r1, r1, #1
   1c8c8:	ldrb	r6, [r3, #6]
   1c8cc:	cmp	r1, #0
   1c8d0:	movle	ip, #0
   1c8d4:	movgt	ip, #1
   1c8d8:	ands	ip, ip, r6, lsr #2
   1c8dc:	beq	1c9b8 <__assert_fail@plt+0xb4c0>
   1c8e0:	ldr	ip, [r2, #-4]!
   1c8e4:	add	r6, r3, r7
   1c8e8:	cmp	r4, ip
   1c8ec:	bne	1c8c0 <__assert_fail@plt+0xb3c8>
   1c8f0:	ldr	r3, [r3, #4]
   1c8f4:	and	r3, r8, r3, lsr #8
   1c8f8:	cmp	fp, r3
   1c8fc:	bne	1c8c0 <__assert_fail@plt+0xb3c8>
   1c900:	bl	19498 <__assert_fail@plt+0x7fa0>
   1c904:	cmp	r0, #0
   1c908:	beq	1c9ac <__assert_fail@plt+0xb4b4>
   1c90c:	ldr	r2, [r5, #20]
   1c910:	ldr	r3, [r5]
   1c914:	add	sl, r2, sl
   1c918:	mov	r0, r5
   1c91c:	ldr	r2, [sl, #8]
   1c920:	ldr	r7, [r2, #4]
   1c924:	lsl	r6, r7, #3
   1c928:	add	r3, r3, r6
   1c92c:	ldm	r3, {r1, r2}
   1c930:	bl	192e4 <__assert_fail@plt+0x7dec>
   1c934:	cmn	r0, #1
   1c938:	mov	r4, r0
   1c93c:	beq	1c9ac <__assert_fail@plt+0xb4b4>
   1c940:	ldr	r1, [r5]
   1c944:	ldr	lr, [pc, #644]	; 1cbd0 <__assert_fail@plt+0xb6d8>
   1c948:	add	r2, r1, r4, lsl #3
   1c94c:	and	r0, fp, r8
   1c950:	ldr	r3, [r2, #4]
   1c954:	add	ip, r1, r6
   1c958:	bic	r3, r3, lr
   1c95c:	orr	r3, r3, r0, lsl #8
   1c960:	str	r3, [r2, #4]
   1c964:	ldr	ip, [ip, #4]
   1c968:	bic	r3, r3, lr
   1c96c:	mov	r1, r4
   1c970:	and	ip, r8, ip, lsr #8
   1c974:	orr	r0, r0, ip
   1c978:	orr	r3, r3, r0, lsl #8
   1c97c:	str	r3, [r2, #4]
   1c980:	lsr	r3, r3, #16
   1c984:	uxtb	r3, r3
   1c988:	orr	r3, r3, #4
   1c98c:	strb	r3, [r2, #6]
   1c990:	ldr	r3, [r5, #16]
   1c994:	ldr	r0, [r5, #20]
   1c998:	str	r7, [r3, r4, lsl #2]
   1c99c:	add	r0, r0, r9
   1c9a0:	bl	19498 <__assert_fail@plt+0x7fa0>
   1c9a4:	cmp	r0, #0
   1c9a8:	bne	1c834 <__assert_fail@plt+0xb33c>
   1c9ac:	mov	r0, #12
   1c9b0:	add	sp, sp, #20
   1c9b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c9b8:	lsl	r6, r4, #3
   1c9bc:	add	lr, lr, r6
   1c9c0:	mov	r0, r5
   1c9c4:	ldm	lr, {r1, r2}
   1c9c8:	bl	192e4 <__assert_fail@plt+0x7dec>
   1c9cc:	cmn	r0, #1
   1c9d0:	mov	r7, r0
   1c9d4:	beq	1c9ac <__assert_fail@plt+0xb4b4>
   1c9d8:	ldr	r3, [r5]
   1c9dc:	ldr	ip, [pc, #492]	; 1cbd0 <__assert_fail@plt+0xb6d8>
   1c9e0:	add	r2, r3, r7, lsl #3
   1c9e4:	add	r6, r3, r6
   1c9e8:	ldr	r3, [r2, #4]
   1c9ec:	and	r0, fp, r8
   1c9f0:	bic	r3, r3, ip
   1c9f4:	orr	r3, r3, r0, lsl #8
   1c9f8:	str	r3, [r2, #4]
   1c9fc:	ldr	ip, [r6, #4]
   1ca00:	ldr	lr, [pc, #456]	; 1cbd0 <__assert_fail@plt+0xb6d8>
   1ca04:	mov	r1, r7
   1ca08:	and	ip, r8, ip, lsr #8
   1ca0c:	orr	r0, r0, ip
   1ca10:	bic	r3, r3, lr
   1ca14:	orr	r3, r3, r0, lsl #8
   1ca18:	str	r3, [r2, #4]
   1ca1c:	lsr	r3, r3, #16
   1ca20:	uxtb	r3, r3
   1ca24:	orr	r3, r3, #4
   1ca28:	strb	r3, [r2, #6]
   1ca2c:	ldr	r3, [r5, #16]
   1ca30:	ldr	r0, [r5, #20]
   1ca34:	str	r4, [r3, r7, lsl #2]
   1ca38:	add	r0, r0, r9
   1ca3c:	bl	19498 <__assert_fail@plt+0x7fa0>
   1ca40:	cmp	r0, #0
   1ca44:	beq	1c9ac <__assert_fail@plt+0xb4b4>
   1ca48:	str	fp, [sp]
   1ca4c:	mov	r2, r7
   1ca50:	mov	r1, r4
   1ca54:	ldr	r3, [sp, #8]
   1ca58:	mov	r0, r5
   1ca5c:	bl	1c810 <__assert_fail@plt+0xb318>
   1ca60:	cmp	r0, #0
   1ca64:	beq	1c90c <__assert_fail@plt+0xb414>
   1ca68:	b	1c9b0 <__assert_fail@plt+0xb4b8>
   1ca6c:	add	r9, r4, r4, lsl #1
   1ca70:	ldr	r3, [ip, #8]
   1ca74:	ldr	r2, [sp, #8]
   1ca78:	cmp	r7, r4
   1ca7c:	lsl	r9, r9, #2
   1ca80:	sub	r2, r7, r2
   1ca84:	add	r0, r0, r9
   1ca88:	clz	r2, r2
   1ca8c:	lsr	r2, r2, #5
   1ca90:	moveq	r2, #0
   1ca94:	ldr	r7, [r3]
   1ca98:	cmp	r2, #0
   1ca9c:	mov	r3, #0
   1caa0:	str	r3, [r0, #4]
   1caa4:	bne	1cbb4 <__assert_fail@plt+0xb6bc>
   1caa8:	ldr	r3, [r6, #4]
   1caac:	lsl	r6, r7, #3
   1cab0:	add	lr, lr, r6
   1cab4:	and	r3, r8, r3, lsr #8
   1cab8:	ldm	lr, {r1, r2}
   1cabc:	mov	r0, r5
   1cac0:	orr	fp, fp, r3
   1cac4:	bl	192e4 <__assert_fail@plt+0x7dec>
   1cac8:	cmn	r0, #1
   1cacc:	mov	r4, r0
   1cad0:	bne	1c940 <__assert_fail@plt+0xb448>
   1cad4:	b	1c9ac <__assert_fail@plt+0xb4b4>
   1cad8:	ldr	r3, [r5, #12]
   1cadc:	lsl	sl, r7, #2
   1cae0:	add	r9, r4, r4, lsl #1
   1cae4:	ldr	r7, [r3, r7, lsl #2]
   1cae8:	ldr	r3, [r5, #20]
   1caec:	lsl	r9, r9, #2
   1caf0:	lsl	r6, r7, #3
   1caf4:	add	lr, lr, r6
   1caf8:	add	r3, r3, r9
   1cafc:	mov	r0, #0
   1cb00:	ldm	lr, {r1, r2}
   1cb04:	str	r0, [r3, #4]
   1cb08:	mov	r0, r5
   1cb0c:	str	r4, [sp, #12]
   1cb10:	bl	192e4 <__assert_fail@plt+0x7dec>
   1cb14:	cmn	r0, #1
   1cb18:	mov	r4, r0
   1cb1c:	beq	1c9ac <__assert_fail@plt+0xb4b4>
   1cb20:	ldr	ip, [r5]
   1cb24:	ldr	lr, [pc, #164]	; 1cbd0 <__assert_fail@plt+0xb6d8>
   1cb28:	add	r0, ip, r0, lsl #3
   1cb2c:	and	r2, fp, r8
   1cb30:	ldr	r3, [r0, #4]
   1cb34:	add	ip, ip, r6
   1cb38:	bic	r3, r3, lr
   1cb3c:	orr	r3, r3, r2, lsl #8
   1cb40:	str	r3, [r0, #4]
   1cb44:	ldr	ip, [ip, #4]
   1cb48:	bic	r3, r3, lr
   1cb4c:	mov	r1, r4
   1cb50:	and	ip, r8, ip, lsr #8
   1cb54:	orr	r2, r2, ip
   1cb58:	orr	r3, r3, r2, lsl #8
   1cb5c:	str	r3, [r0, #4]
   1cb60:	lsr	r3, r3, #16
   1cb64:	uxtb	r3, r3
   1cb68:	orr	r3, r3, #4
   1cb6c:	strb	r3, [r0, #6]
   1cb70:	ldr	r2, [r5, #16]
   1cb74:	ldr	r3, [r5, #12]
   1cb78:	ldr	ip, [sp, #12]
   1cb7c:	ldr	r0, [r5, #20]
   1cb80:	str	r7, [r2, r4, lsl #2]
   1cb84:	ldr	r2, [r3, sl]
   1cb88:	add	r0, r0, r9
   1cb8c:	str	r2, [r3, ip, lsl #2]
   1cb90:	bl	19498 <__assert_fail@plt+0x7fa0>
   1cb94:	cmp	r0, #0
   1cb98:	bne	1c834 <__assert_fail@plt+0xb33c>
   1cb9c:	b	1c9ac <__assert_fail@plt+0xb4b4>
   1cba0:	ldr	r2, [r5, #12]
   1cba4:	mov	r0, r3
   1cba8:	ldr	r3, [r2, r7, lsl #2]
   1cbac:	str	r3, [r2, r4, lsl #2]
   1cbb0:	b	1c9b0 <__assert_fail@plt+0xb4b8>
   1cbb4:	mov	r1, r7
   1cbb8:	bl	19498 <__assert_fail@plt+0x7fa0>
   1cbbc:	cmp	r0, #0
   1cbc0:	movne	r0, #0
   1cbc4:	bne	1c9b0 <__assert_fail@plt+0xb4b8>
   1cbc8:	b	1c9ac <__assert_fail@plt+0xb4b4>
   1cbcc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1cbd0:	andeq	pc, r3, r0, lsl #30
   1cbd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbd8:	add	r8, r2, r2, lsl #1
   1cbdc:	mov	r4, r2
   1cbe0:	ldr	r2, [r1, #20]
   1cbe4:	lsl	r8, r8, #2
   1cbe8:	add	r2, r2, r8
   1cbec:	mov	r7, r1
   1cbf0:	ldr	r1, [r2, #4]
   1cbf4:	sub	sp, sp, #44	; 0x2c
   1cbf8:	add	r1, r1, #1
   1cbfc:	str	r0, [sp, #8]
   1cc00:	mov	r2, #0
   1cc04:	lsl	r0, r1, #2
   1cc08:	str	r3, [sp, #12]
   1cc0c:	str	r1, [sp, #16]
   1cc10:	str	r2, [sp, #20]
   1cc14:	bl	2a790 <__assert_fail@plt+0x19298>
   1cc18:	cmp	r0, #0
   1cc1c:	str	r0, [sp, #24]
   1cc20:	beq	1ce40 <__assert_fail@plt+0xb948>
   1cc24:	ldr	r6, [r7]
   1cc28:	ldr	r3, [sp, #20]
   1cc2c:	lsl	r5, r4, #3
   1cc30:	add	lr, r6, r5
   1cc34:	str	r4, [r0, r3, lsl #2]
   1cc38:	ldr	r1, [r7, #24]
   1cc3c:	ldr	r0, [lr, #4]
   1cc40:	ldr	r2, [pc, #520]	; 1ce50 <__assert_fail@plt+0xb958>
   1cc44:	add	ip, r1, r8
   1cc48:	and	r2, r2, r0
   1cc4c:	add	r3, r3, #1
   1cc50:	cmp	r2, #0
   1cc54:	mvn	r2, #0
   1cc58:	str	r3, [sp, #20]
   1cc5c:	str	r2, [ip, #4]
   1cc60:	beq	1cc90 <__assert_fail@plt+0xb798>
   1cc64:	ldr	r3, [r7, #20]
   1cc68:	add	r3, r3, r8
   1cc6c:	ldr	r2, [r3, #4]
   1cc70:	cmp	r2, #0
   1cc74:	beq	1cda4 <__assert_fail@plt+0xb8ac>
   1cc78:	ldr	r3, [r3, #8]
   1cc7c:	ldr	r3, [r3]
   1cc80:	add	r6, r6, r3, lsl #3
   1cc84:	ldrb	r3, [r6, #6]
   1cc88:	tst	r3, #4
   1cc8c:	beq	1ce08 <__assert_fail@plt+0xb910>
   1cc90:	ldrb	r3, [lr, #4]
   1cc94:	tst	r3, #8
   1cc98:	beq	1cda0 <__assert_fail@plt+0xb8a8>
   1cc9c:	ldr	ip, [r7, #20]
   1cca0:	add	r3, ip, r8
   1cca4:	ldr	r2, [r3, #4]
   1cca8:	cmp	r2, #0
   1ccac:	ble	1cda0 <__assert_fail@plt+0xb8a8>
   1ccb0:	mov	sl, #0
   1ccb4:	mov	r5, sl
   1ccb8:	mov	fp, #1
   1ccbc:	add	r9, sp, #28
   1ccc0:	b	1cd2c <__assert_fail@plt+0xb834>
   1ccc4:	ldm	r3, {r0, r1, r2}
   1ccc8:	stm	r9, {r0, r1, r2}
   1cccc:	ldr	r3, [sp, #32]
   1ccd0:	cmp	r3, #0
   1ccd4:	beq	1cd00 <__assert_fail@plt+0xb808>
   1ccd8:	ldr	r2, [sp, #20]
   1ccdc:	ldr	r1, [sp, #16]
   1cce0:	add	r2, r2, r3, lsl #1
   1cce4:	cmp	r1, r2
   1cce8:	blt	1cde0 <__assert_fail@plt+0xb8e8>
   1ccec:	mov	r1, r9
   1ccf0:	add	r0, sp, #16
   1ccf4:	bl	19a1c <__assert_fail@plt+0x8524>
   1ccf8:	cmp	r0, #0
   1ccfc:	bne	1cd70 <__assert_fail@plt+0xb878>
   1cd00:	ldr	r1, [r7, #24]
   1cd04:	add	r4, r1, r4
   1cd08:	ldr	r3, [r4, #4]
   1cd0c:	cmp	r3, #0
   1cd10:	beq	1cdcc <__assert_fail@plt+0xb8d4>
   1cd14:	ldr	ip, [r7, #20]
   1cd18:	add	r3, ip, r8
   1cd1c:	add	r5, r5, #1
   1cd20:	ldr	r2, [r3, #4]
   1cd24:	cmp	r2, r5
   1cd28:	ble	1cd80 <__assert_fail@plt+0xb888>
   1cd2c:	ldr	r3, [r3, #8]
   1cd30:	ldr	r2, [r3, r5, lsl #2]
   1cd34:	add	r4, r2, r2, lsl #1
   1cd38:	lsl	r4, r4, #2
   1cd3c:	add	r3, r1, r4
   1cd40:	ldr	r0, [r3, #4]
   1cd44:	cmn	r0, #1
   1cd48:	moveq	sl, fp
   1cd4c:	beq	1cd18 <__assert_fail@plt+0xb820>
   1cd50:	cmp	r0, #0
   1cd54:	bne	1ccc4 <__assert_fail@plt+0xb7cc>
   1cd58:	mov	r3, #0
   1cd5c:	mov	r1, r7
   1cd60:	mov	r0, r9
   1cd64:	bl	1cbd4 <__assert_fail@plt+0xb6dc>
   1cd68:	cmp	r0, #0
   1cd6c:	beq	1cccc <__assert_fail@plt+0xb7d4>
   1cd70:	mov	r3, r0
   1cd74:	mov	r0, r3
   1cd78:	add	sp, sp, #44	; 0x2c
   1cd7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd80:	ldr	r3, [sp, #12]
   1cd84:	eor	r3, r3, #1
   1cd88:	tst	sl, r3
   1cd8c:	addne	r8, r1, r8
   1cd90:	movne	r3, #0
   1cd94:	strne	r3, [r8, #4]
   1cd98:	addne	lr, sp, #16
   1cd9c:	bne	1cdb0 <__assert_fail@plt+0xb8b8>
   1cda0:	add	ip, r1, r8
   1cda4:	add	lr, sp, #16
   1cda8:	ldm	lr, {r0, r1, r2}
   1cdac:	stm	ip, {r0, r1, r2}
   1cdb0:	mov	r3, #0
   1cdb4:	ldm	lr, {r0, r1, r2}
   1cdb8:	ldr	ip, [sp, #8]
   1cdbc:	stm	ip, {r0, r1, r2}
   1cdc0:	mov	r0, r3
   1cdc4:	add	sp, sp, #44	; 0x2c
   1cdc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cdcc:	ldr	r0, [sp, #36]	; 0x24
   1cdd0:	bl	14214 <__assert_fail@plt+0x2d1c>
   1cdd4:	mov	sl, fp
   1cdd8:	ldr	r1, [r7, #24]
   1cddc:	b	1cd14 <__assert_fail@plt+0xb81c>
   1cde0:	add	r3, r1, r3
   1cde4:	ldr	r0, [sp, #24]
   1cde8:	lsl	r1, r3, #3
   1cdec:	lsl	r6, r3, #1
   1cdf0:	bl	2a7bc <__assert_fail@plt+0x192c4>
   1cdf4:	cmp	r0, #0
   1cdf8:	beq	1ce40 <__assert_fail@plt+0xb948>
   1cdfc:	str	r0, [sp, #24]
   1ce00:	str	r6, [sp, #16]
   1ce04:	b	1ccec <__assert_fail@plt+0xb7f4>
   1ce08:	ldr	r2, [pc, #68]	; 1ce54 <__assert_fail@plt+0xb95c>
   1ce0c:	mov	r3, r4
   1ce10:	and	r0, r2, r0, lsr #8
   1ce14:	str	r0, [sp]
   1ce18:	mov	r2, r4
   1ce1c:	mov	r1, r4
   1ce20:	mov	r0, r7
   1ce24:	bl	1c810 <__assert_fail@plt+0xb318>
   1ce28:	subs	r3, r0, #0
   1ce2c:	bne	1cdc0 <__assert_fail@plt+0xb8c8>
   1ce30:	ldr	lr, [r7]
   1ce34:	ldr	r1, [r7, #24]
   1ce38:	add	lr, lr, r5
   1ce3c:	b	1cc90 <__assert_fail@plt+0xb798>
   1ce40:	mov	r3, #12
   1ce44:	mov	r0, r3
   1ce48:	add	sp, sp, #44	; 0x2c
   1ce4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce50:	andeq	pc, r3, r0, lsl #30
   1ce54:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1ce58:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ce5c:	mov	r8, r1
   1ce60:	ldr	r1, [r1, #4]
   1ce64:	sub	sp, sp, #24
   1ce68:	mov	r6, #0
   1ce6c:	mov	r7, r0
   1ce70:	lsl	r0, r1, #2
   1ce74:	mov	r5, r2
   1ce78:	mov	r4, r3
   1ce7c:	str	r1, [sp, #12]
   1ce80:	str	r6, [sp, #16]
   1ce84:	bl	2a790 <__assert_fail@plt+0x19298>
   1ce88:	cmp	r0, r6
   1ce8c:	str	r0, [sp, #20]
   1ce90:	beq	1cfc0 <__assert_fail@plt+0xbac8>
   1ce94:	ldr	r1, [r8, #4]
   1ce98:	ldr	r0, [r8, #8]
   1ce9c:	cmp	r1, r6
   1cea0:	ble	1cf38 <__assert_fail@plt+0xba40>
   1cea4:	ldr	r2, [r0, r6, lsl #2]
   1cea8:	ldr	r9, [r7, #24]
   1ceac:	add	r3, r2, r2, lsl #1
   1ceb0:	add	r9, r9, r3, lsl #2
   1ceb4:	ldr	sl, [r9, #4]
   1ceb8:	cmp	sl, #0
   1cebc:	ble	1cf58 <__assert_fail@plt+0xba60>
   1cec0:	ldr	r0, [r9, #8]
   1cec4:	ldr	lr, [r7]
   1cec8:	sub	r0, r0, #4
   1cecc:	mov	r3, #0
   1ced0:	b	1cedc <__assert_fail@plt+0xb9e4>
   1ced4:	cmp	sl, r3
   1ced8:	beq	1cf5c <__assert_fail@plt+0xba64>
   1cedc:	ldr	r1, [r0, #4]!
   1cee0:	add	r3, r3, #1
   1cee4:	add	ip, lr, r1, lsl #3
   1cee8:	ldrb	ip, [ip, #4]
   1ceec:	cmp	r4, ip
   1cef0:	bne	1ced4 <__assert_fail@plt+0xb9dc>
   1cef4:	ldr	ip, [lr, r1, lsl #3]
   1cef8:	cmp	r5, ip
   1cefc:	bne	1ced4 <__assert_fail@plt+0xb9dc>
   1cf00:	cmn	r1, #1
   1cf04:	beq	1cf5c <__assert_fail@plt+0xba64>
   1cf08:	str	r4, [sp]
   1cf0c:	mov	r3, r5
   1cf10:	add	r1, sp, #12
   1cf14:	mov	r0, r7
   1cf18:	bl	1c6b0 <__assert_fail@plt+0xb1b8>
   1cf1c:	subs	r9, r0, #0
   1cf20:	bne	1cf84 <__assert_fail@plt+0xba8c>
   1cf24:	ldr	r0, [r8, #8]
   1cf28:	ldr	r1, [r8, #4]
   1cf2c:	add	r6, r6, #1
   1cf30:	cmp	r6, r1
   1cf34:	blt	1cea4 <__assert_fail@plt+0xb9ac>
   1cf38:	bl	14214 <__assert_fail@plt+0x2d1c>
   1cf3c:	add	r3, sp, #24
   1cf40:	mov	r9, #0
   1cf44:	ldmdb	r3, {r0, r1, r2}
   1cf48:	stm	r8, {r0, r1, r2}
   1cf4c:	mov	r0, r9
   1cf50:	add	sp, sp, #24
   1cf54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cf58:	beq	1cf2c <__assert_fail@plt+0xba34>
   1cf5c:	ldr	r3, [sp, #16]
   1cf60:	ldr	r2, [sp, #12]
   1cf64:	add	r3, r3, sl, lsl #1
   1cf68:	cmp	r2, r3
   1cf6c:	blt	1cf98 <__assert_fail@plt+0xbaa0>
   1cf70:	mov	r1, r9
   1cf74:	add	r0, sp, #12
   1cf78:	bl	19a1c <__assert_fail@plt+0x8524>
   1cf7c:	subs	r9, r0, #0
   1cf80:	beq	1cf24 <__assert_fail@plt+0xba2c>
   1cf84:	ldr	r0, [sp, #20]
   1cf88:	bl	14214 <__assert_fail@plt+0x2d1c>
   1cf8c:	mov	r0, r9
   1cf90:	add	sp, sp, #24
   1cf94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cf98:	add	r2, sl, r2
   1cf9c:	ldr	r0, [sp, #20]
   1cfa0:	lsl	r1, r2, #3
   1cfa4:	lsl	sl, r2, #1
   1cfa8:	bl	2a7bc <__assert_fail@plt+0x192c4>
   1cfac:	cmp	r0, #0
   1cfb0:	beq	1cfd0 <__assert_fail@plt+0xbad8>
   1cfb4:	str	r0, [sp, #20]
   1cfb8:	str	sl, [sp, #12]
   1cfbc:	b	1cf70 <__assert_fail@plt+0xba78>
   1cfc0:	mov	r9, #12
   1cfc4:	mov	r0, r9
   1cfc8:	add	sp, sp, #24
   1cfcc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cfd0:	mov	r9, #12
   1cfd4:	b	1cf84 <__assert_fail@plt+0xba8c>
   1cfd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cfdc:	sub	sp, sp, #172	; 0xac
   1cfe0:	mov	ip, r3
   1cfe4:	str	r0, [sp, #64]	; 0x40
   1cfe8:	ldr	r0, [r0, #84]	; 0x54
   1cfec:	str	r3, [sp, #152]	; 0x98
   1cff0:	mov	r3, r0
   1cff4:	str	r0, [sp, #120]	; 0x78
   1cff8:	ldr	r3, [r3, #24]
   1cffc:	add	r0, ip, ip, lsl #1
   1d000:	str	r1, [sp, #20]
   1d004:	add	r3, r3, r0, lsl #2
   1d008:	str	r3, [sp, #124]	; 0x7c
   1d00c:	ldr	r3, [r3, #4]
   1d010:	cmp	r3, #0
   1d014:	ble	1d0b4 <__assert_fail@plt+0xbbbc>
   1d018:	mov	fp, r2
   1d01c:	ldr	r2, [sp, #208]	; 0xd0
   1d020:	mov	r1, #1
   1d024:	add	r2, r2, r2, lsl r1
   1d028:	lsl	r1, r1, fp
   1d02c:	lsl	r2, r2, #3
   1d030:	str	r2, [sp, #44]	; 0x2c
   1d034:	add	r2, r2, #24
   1d038:	str	r2, [sp, #96]	; 0x60
   1d03c:	ldr	r2, [sp, #20]
   1d040:	str	r1, [sp, #24]
   1d044:	mvn	r1, r1
   1d048:	str	r1, [sp, #36]	; 0x24
   1d04c:	and	r1, r2, #2
   1d050:	and	r2, r2, #1
   1d054:	str	r2, [sp, #32]
   1d058:	mov	r2, #0
   1d05c:	str	r1, [sp, #16]
   1d060:	str	r2, [sp, #108]	; 0x6c
   1d064:	ldr	r2, [sp, #124]	; 0x7c
   1d068:	ldr	r0, [sp, #108]	; 0x6c
   1d06c:	ldr	r1, [r2, #8]
   1d070:	ldr	r2, [sp, #120]	; 0x78
   1d074:	ldr	r1, [r1, r0, lsl #2]
   1d078:	ldr	r2, [r2]
   1d07c:	str	r1, [sp, #100]	; 0x64
   1d080:	add	r1, r2, r1, lsl #3
   1d084:	ldrb	r1, [r1, #4]
   1d088:	cmp	r1, #8
   1d08c:	beq	1d154 <__assert_fail@plt+0xbc5c>
   1d090:	cmp	r1, #9
   1d094:	beq	1d130 <__assert_fail@plt+0xbc38>
   1d098:	cmp	r1, #4
   1d09c:	beq	1d0c8 <__assert_fail@plt+0xbbd0>
   1d0a0:	ldr	r2, [sp, #108]	; 0x6c
   1d0a4:	add	r2, r2, #1
   1d0a8:	cmp	r2, r3
   1d0ac:	str	r2, [sp, #108]	; 0x6c
   1d0b0:	blt	1d064 <__assert_fail@plt+0xbb6c>
   1d0b4:	ldr	r3, [sp, #20]
   1d0b8:	lsr	r0, r3, #1
   1d0bc:	and	r0, r0, #1
   1d0c0:	add	sp, sp, #172	; 0xac
   1d0c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d0c8:	ldr	r2, [sp, #208]	; 0xd0
   1d0cc:	cmn	r2, #1
   1d0d0:	beq	1d0a0 <__assert_fail@plt+0xbba8>
   1d0d4:	ldr	r3, [sp, #100]	; 0x64
   1d0d8:	ldr	r2, [sp, #64]	; 0x40
   1d0dc:	add	r3, r3, r3, lsl #1
   1d0e0:	ldr	r2, [r2, #116]	; 0x74
   1d0e4:	lsl	r3, r3, #2
   1d0e8:	str	r3, [sp, #156]	; 0x9c
   1d0ec:	ldr	r3, [sp, #96]	; 0x60
   1d0f0:	add	r3, r2, r3
   1d0f4:	str	r3, [sp, #88]	; 0x58
   1d0f8:	ldr	r3, [sp, #88]	; 0x58
   1d0fc:	ldr	r2, [sp, #100]	; 0x64
   1d100:	ldr	r3, [r3, #-24]	; 0xffffffe8
   1d104:	cmp	r2, r3
   1d108:	beq	1d178 <__assert_fail@plt+0xbc80>
   1d10c:	ldr	r3, [sp, #88]	; 0x58
   1d110:	add	r3, r3, #24
   1d114:	str	r3, [sp, #88]	; 0x58
   1d118:	ldrb	r3, [r3, #-28]	; 0xffffffe4
   1d11c:	cmp	r3, #0
   1d120:	bne	1d0f8 <__assert_fail@plt+0xbc00>
   1d124:	ldr	r3, [sp, #124]	; 0x7c
   1d128:	ldr	r3, [r3, #4]
   1d12c:	b	1d0a0 <__assert_fail@plt+0xbba8>
   1d130:	ldr	r1, [sp, #16]
   1d134:	cmp	r1, #0
   1d138:	beq	1d0a0 <__assert_fail@plt+0xbba8>
   1d13c:	ldr	r1, [sp, #100]	; 0x64
   1d140:	ldr	r2, [r2, r1, lsl #3]
   1d144:	cmp	fp, r2
   1d148:	bne	1d0a0 <__assert_fail@plt+0xbba8>
   1d14c:	mov	r0, #0
   1d150:	b	1d0c0 <__assert_fail@plt+0xbbc8>
   1d154:	ldr	r1, [sp, #32]
   1d158:	cmp	r1, #0
   1d15c:	beq	1d0a0 <__assert_fail@plt+0xbba8>
   1d160:	ldr	r1, [sp, #100]	; 0x64
   1d164:	ldr	r2, [r2, r1, lsl #3]
   1d168:	cmp	r2, fp
   1d16c:	bne	1d0a0 <__assert_fail@plt+0xbba8>
   1d170:	mvn	r0, #0
   1d174:	b	1d0c0 <__assert_fail@plt+0xbbc8>
   1d178:	cmp	fp, #31
   1d17c:	bgt	1d194 <__assert_fail@plt+0xbc9c>
   1d180:	ldr	r3, [sp, #88]	; 0x58
   1d184:	ldr	r2, [sp, #24]
   1d188:	ldr	r3, [r3, #-8]
   1d18c:	tst	r2, r3
   1d190:	beq	1d10c <__assert_fail@plt+0xbc14>
   1d194:	ldr	r3, [sp, #120]	; 0x78
   1d198:	ldr	r2, [sp, #156]	; 0x9c
   1d19c:	ldr	r3, [r3, #20]
   1d1a0:	add	r3, r3, r2
   1d1a4:	ldr	r2, [sp, #152]	; 0x98
   1d1a8:	ldr	r3, [r3, #8]
   1d1ac:	ldr	r3, [r3]
   1d1b0:	cmp	r2, r3
   1d1b4:	str	r3, [sp, #128]	; 0x80
   1d1b8:	beq	1d26c <__assert_fail@plt+0xbd74>
   1d1bc:	ldr	r3, [sp, #64]	; 0x40
   1d1c0:	ldr	r3, [r3, #84]	; 0x54
   1d1c4:	mov	r2, r3
   1d1c8:	str	r3, [sp, #132]	; 0x84
   1d1cc:	ldr	r3, [sp, #128]	; 0x80
   1d1d0:	ldr	r2, [r2, #24]
   1d1d4:	add	r3, r3, r3, lsl #1
   1d1d8:	add	r3, r2, r3, lsl #2
   1d1dc:	str	r3, [sp, #136]	; 0x88
   1d1e0:	ldr	r3, [r3, #4]
   1d1e4:	cmp	r3, #0
   1d1e8:	ble	1d99c <__assert_fail@plt+0xc4a4>
   1d1ec:	mov	r2, #0
   1d1f0:	str	r2, [sp, #112]	; 0x70
   1d1f4:	b	1d21c <__assert_fail@plt+0xbd24>
   1d1f8:	cmp	r1, #9
   1d1fc:	beq	1d9bc <__assert_fail@plt+0xc4c4>
   1d200:	cmp	r1, #4
   1d204:	beq	1d278 <__assert_fail@plt+0xbd80>
   1d208:	ldr	r2, [sp, #112]	; 0x70
   1d20c:	add	r2, r2, #1
   1d210:	cmp	r2, r3
   1d214:	str	r2, [sp, #112]	; 0x70
   1d218:	bge	1d99c <__assert_fail@plt+0xc4a4>
   1d21c:	ldr	r2, [sp, #136]	; 0x88
   1d220:	ldr	r0, [sp, #112]	; 0x70
   1d224:	ldr	r1, [r2, #8]
   1d228:	ldr	r2, [sp, #132]	; 0x84
   1d22c:	ldr	r1, [r1, r0, lsl #2]
   1d230:	ldr	r2, [r2]
   1d234:	str	r1, [sp, #104]	; 0x68
   1d238:	add	r1, r2, r1, lsl #3
   1d23c:	ldrb	r1, [r1, #4]
   1d240:	cmp	r1, #8
   1d244:	bne	1d1f8 <__assert_fail@plt+0xbd00>
   1d248:	ldr	r1, [sp, #32]
   1d24c:	cmp	r1, #0
   1d250:	beq	1d208 <__assert_fail@plt+0xbd10>
   1d254:	ldr	r1, [sp, #104]	; 0x68
   1d258:	ldr	r2, [r2, r1, lsl #3]
   1d25c:	cmp	fp, r2
   1d260:	bne	1d208 <__assert_fail@plt+0xbd10>
   1d264:	mvn	r0, #0
   1d268:	b	1d0c0 <__assert_fail@plt+0xbbc8>
   1d26c:	ldr	r3, [sp, #32]
   1d270:	rsb	r0, r3, #0
   1d274:	b	1d0c0 <__assert_fail@plt+0xbbc8>
   1d278:	ldr	r3, [sp, #104]	; 0x68
   1d27c:	ldr	r2, [sp, #64]	; 0x40
   1d280:	add	r3, r3, r3, lsl #1
   1d284:	ldr	r2, [r2, #116]	; 0x74
   1d288:	lsl	r3, r3, #2
   1d28c:	str	r3, [sp, #160]	; 0xa0
   1d290:	ldr	r3, [sp, #96]	; 0x60
   1d294:	add	r3, r2, r3
   1d298:	str	r3, [sp, #92]	; 0x5c
   1d29c:	b	1d2b8 <__assert_fail@plt+0xbdc0>
   1d2a0:	ldr	r3, [sp, #92]	; 0x5c
   1d2a4:	add	r3, r3, #24
   1d2a8:	str	r3, [sp, #92]	; 0x5c
   1d2ac:	ldrb	r3, [r3, #-28]	; 0xffffffe4
   1d2b0:	cmp	r3, #0
   1d2b4:	beq	1d9dc <__assert_fail@plt+0xc4e4>
   1d2b8:	ldr	r3, [sp, #92]	; 0x5c
   1d2bc:	ldr	r2, [sp, #104]	; 0x68
   1d2c0:	ldr	r3, [r3, #-24]	; 0xffffffe8
   1d2c4:	cmp	r2, r3
   1d2c8:	bne	1d2a0 <__assert_fail@plt+0xbda8>
   1d2cc:	cmp	fp, #31
   1d2d0:	bgt	1d2e8 <__assert_fail@plt+0xbdf0>
   1d2d4:	ldr	r3, [sp, #92]	; 0x5c
   1d2d8:	ldr	r2, [sp, #24]
   1d2dc:	ldr	r3, [r3, #-8]
   1d2e0:	tst	r2, r3
   1d2e4:	beq	1d2a0 <__assert_fail@plt+0xbda8>
   1d2e8:	ldr	r3, [sp, #132]	; 0x84
   1d2ec:	ldr	r2, [sp, #160]	; 0xa0
   1d2f0:	ldr	r3, [r3, #20]
   1d2f4:	add	r3, r3, r2
   1d2f8:	ldr	r2, [sp, #128]	; 0x80
   1d2fc:	ldr	r3, [r3, #8]
   1d300:	ldr	r3, [r3]
   1d304:	cmp	r2, r3
   1d308:	str	r3, [sp, #140]	; 0x8c
   1d30c:	beq	1d984 <__assert_fail@plt+0xc48c>
   1d310:	ldr	r3, [sp, #64]	; 0x40
   1d314:	ldr	r3, [r3, #84]	; 0x54
   1d318:	mov	r2, r3
   1d31c:	str	r3, [sp, #144]	; 0x90
   1d320:	ldr	r3, [sp, #140]	; 0x8c
   1d324:	ldr	r2, [r2, #24]
   1d328:	add	r3, r3, r3, lsl #1
   1d32c:	add	r3, r2, r3, lsl #2
   1d330:	str	r3, [sp, #148]	; 0x94
   1d334:	ldr	r3, [r3, #4]
   1d338:	cmp	r3, #0
   1d33c:	ble	1d958 <__assert_fail@plt+0xc460>
   1d340:	mov	r2, #0
   1d344:	str	r2, [sp, #116]	; 0x74
   1d348:	b	1d370 <__assert_fail@plt+0xbe78>
   1d34c:	cmp	r1, #9
   1d350:	beq	1d3bc <__assert_fail@plt+0xbec4>
   1d354:	cmp	r1, #4
   1d358:	beq	1d3dc <__assert_fail@plt+0xbee4>
   1d35c:	ldr	r2, [sp, #116]	; 0x74
   1d360:	add	r2, r2, #1
   1d364:	cmp	r2, r3
   1d368:	str	r2, [sp, #116]	; 0x74
   1d36c:	bge	1d958 <__assert_fail@plt+0xc460>
   1d370:	ldr	r2, [sp, #148]	; 0x94
   1d374:	ldr	r0, [sp, #116]	; 0x74
   1d378:	ldr	r1, [r2, #8]
   1d37c:	ldr	r2, [sp, #144]	; 0x90
   1d380:	ldr	r1, [r1, r0, lsl #2]
   1d384:	ldr	r2, [r2]
   1d388:	str	r1, [sp, #84]	; 0x54
   1d38c:	add	r1, r2, r1, lsl #3
   1d390:	ldrb	r1, [r1, #4]
   1d394:	cmp	r1, #8
   1d398:	bne	1d34c <__assert_fail@plt+0xbe54>
   1d39c:	ldr	r1, [sp, #32]
   1d3a0:	cmp	r1, #0
   1d3a4:	beq	1d35c <__assert_fail@plt+0xbe64>
   1d3a8:	ldr	r1, [sp, #84]	; 0x54
   1d3ac:	ldr	r2, [r2, r1, lsl #3]
   1d3b0:	cmp	fp, r2
   1d3b4:	bne	1d35c <__assert_fail@plt+0xbe64>
   1d3b8:	b	1d170 <__assert_fail@plt+0xbc78>
   1d3bc:	ldr	r1, [sp, #16]
   1d3c0:	cmp	r1, #0
   1d3c4:	beq	1d35c <__assert_fail@plt+0xbe64>
   1d3c8:	ldr	r1, [sp, #84]	; 0x54
   1d3cc:	ldr	r2, [r2, r1, lsl #3]
   1d3d0:	cmp	fp, r2
   1d3d4:	bne	1d35c <__assert_fail@plt+0xbe64>
   1d3d8:	b	1d14c <__assert_fail@plt+0xbc54>
   1d3dc:	ldr	r3, [sp, #84]	; 0x54
   1d3e0:	ldr	r2, [sp, #64]	; 0x40
   1d3e4:	add	r3, r3, r3, lsl #1
   1d3e8:	ldr	r2, [r2, #116]	; 0x74
   1d3ec:	lsl	r3, r3, #2
   1d3f0:	str	r3, [sp, #164]	; 0xa4
   1d3f4:	ldr	r3, [sp, #96]	; 0x60
   1d3f8:	add	r3, r2, r3
   1d3fc:	str	r3, [sp, #68]	; 0x44
   1d400:	b	1d41c <__assert_fail@plt+0xbf24>
   1d404:	ldr	r3, [sp, #68]	; 0x44
   1d408:	add	r3, r3, #24
   1d40c:	str	r3, [sp, #68]	; 0x44
   1d410:	ldrb	r3, [r3, #-28]	; 0xffffffe4
   1d414:	cmp	r3, #0
   1d418:	beq	1d978 <__assert_fail@plt+0xc480>
   1d41c:	ldr	r3, [sp, #68]	; 0x44
   1d420:	ldr	r2, [sp, #84]	; 0x54
   1d424:	ldr	r3, [r3, #-24]	; 0xffffffe8
   1d428:	cmp	r2, r3
   1d42c:	bne	1d404 <__assert_fail@plt+0xbf0c>
   1d430:	cmp	fp, #31
   1d434:	bgt	1d44c <__assert_fail@plt+0xbf54>
   1d438:	ldr	r3, [sp, #68]	; 0x44
   1d43c:	ldr	r2, [sp, #24]
   1d440:	ldr	r3, [r3, #-8]
   1d444:	tst	r2, r3
   1d448:	beq	1d404 <__assert_fail@plt+0xbf0c>
   1d44c:	ldr	r3, [sp, #144]	; 0x90
   1d450:	ldr	r2, [sp, #164]	; 0xa4
   1d454:	ldr	r3, [r3, #20]
   1d458:	add	r3, r3, r2
   1d45c:	ldr	r2, [sp, #140]	; 0x8c
   1d460:	ldr	r3, [r3, #8]
   1d464:	ldr	r3, [r3]
   1d468:	cmp	r2, r3
   1d46c:	str	r3, [sp, #72]	; 0x48
   1d470:	beq	1d940 <__assert_fail@plt+0xc448>
   1d474:	ldr	r3, [sp, #64]	; 0x40
   1d478:	ldr	r3, [r3, #84]	; 0x54
   1d47c:	mov	r2, r3
   1d480:	str	r3, [sp, #48]	; 0x30
   1d484:	ldr	r3, [sp, #72]	; 0x48
   1d488:	ldr	r2, [r2, #24]
   1d48c:	add	r3, r3, r3, lsl #1
   1d490:	add	r3, r2, r3, lsl #2
   1d494:	str	r3, [sp, #80]	; 0x50
   1d498:	ldr	r1, [r3, #4]
   1d49c:	cmp	r1, #0
   1d4a0:	ble	1d920 <__assert_fail@plt+0xc428>
   1d4a4:	mov	r3, #0
   1d4a8:	str	r3, [sp, #40]	; 0x28
   1d4ac:	b	1d4d4 <__assert_fail@plt+0xbfdc>
   1d4b0:	cmp	r3, #9
   1d4b4:	beq	1d520 <__assert_fail@plt+0xc028>
   1d4b8:	cmp	r3, #4
   1d4bc:	beq	1d540 <__assert_fail@plt+0xc048>
   1d4c0:	ldr	r3, [sp, #40]	; 0x28
   1d4c4:	add	r3, r3, #1
   1d4c8:	cmp	r3, r1
   1d4cc:	str	r3, [sp, #40]	; 0x28
   1d4d0:	bge	1d920 <__assert_fail@plt+0xc428>
   1d4d4:	ldr	r3, [sp, #80]	; 0x50
   1d4d8:	ldr	r0, [sp, #40]	; 0x28
   1d4dc:	ldr	r2, [sp, #48]	; 0x30
   1d4e0:	ldr	r3, [r3, #8]
   1d4e4:	ldr	r2, [r2]
   1d4e8:	ldr	r3, [r3, r0, lsl #2]
   1d4ec:	str	r3, [sp, #12]
   1d4f0:	add	r3, r2, r3, lsl #3
   1d4f4:	ldrb	r3, [r3, #4]
   1d4f8:	cmp	r3, #8
   1d4fc:	bne	1d4b0 <__assert_fail@plt+0xbfb8>
   1d500:	ldr	r3, [sp, #32]
   1d504:	cmp	r3, #0
   1d508:	beq	1d4c0 <__assert_fail@plt+0xbfc8>
   1d50c:	ldr	r3, [sp, #12]
   1d510:	ldr	r3, [r2, r3, lsl #3]
   1d514:	cmp	fp, r3
   1d518:	bne	1d4c0 <__assert_fail@plt+0xbfc8>
   1d51c:	b	1d170 <__assert_fail@plt+0xbc78>
   1d520:	ldr	r3, [sp, #16]
   1d524:	cmp	r3, #0
   1d528:	beq	1d4c0 <__assert_fail@plt+0xbfc8>
   1d52c:	ldr	r3, [sp, #12]
   1d530:	ldr	r3, [r2, r3, lsl #3]
   1d534:	cmp	fp, r3
   1d538:	bne	1d4c0 <__assert_fail@plt+0xbfc8>
   1d53c:	b	1d14c <__assert_fail@plt+0xbc54>
   1d540:	ldr	r3, [sp, #12]
   1d544:	ldr	r2, [sp, #64]	; 0x40
   1d548:	add	r3, r3, r3, lsl #1
   1d54c:	ldr	r9, [r2, #116]	; 0x74
   1d550:	lsl	r3, r3, #2
   1d554:	str	r3, [sp, #76]	; 0x4c
   1d558:	ldr	r3, [sp, #96]	; 0x60
   1d55c:	add	r9, r9, r3
   1d560:	b	1d574 <__assert_fail@plt+0xc07c>
   1d564:	add	r9, r9, #24
   1d568:	ldrb	r3, [r9, #-28]	; 0xffffffe4
   1d56c:	cmp	r3, #0
   1d570:	beq	1d7c8 <__assert_fail@plt+0xc2d0>
   1d574:	ldr	r3, [r9, #-24]	; 0xffffffe8
   1d578:	ldr	r2, [sp, #12]
   1d57c:	cmp	r2, r3
   1d580:	bne	1d564 <__assert_fail@plt+0xc06c>
   1d584:	cmp	fp, #31
   1d588:	bgt	1d59c <__assert_fail@plt+0xc0a4>
   1d58c:	ldr	r3, [r9, #-8]
   1d590:	ldr	r2, [sp, #24]
   1d594:	tst	r2, r3
   1d598:	beq	1d564 <__assert_fail@plt+0xc06c>
   1d59c:	ldr	r3, [sp, #48]	; 0x30
   1d5a0:	ldr	r2, [sp, #76]	; 0x4c
   1d5a4:	ldr	r3, [r3, #20]
   1d5a8:	add	r3, r3, r2
   1d5ac:	ldr	r2, [sp, #72]	; 0x48
   1d5b0:	ldr	r3, [r3, #8]
   1d5b4:	ldr	r3, [r3]
   1d5b8:	cmp	r2, r3
   1d5bc:	str	r3, [sp, #28]
   1d5c0:	beq	1d908 <__assert_fail@plt+0xc410>
   1d5c4:	ldr	r2, [sp, #64]	; 0x40
   1d5c8:	ldr	r3, [sp, #28]
   1d5cc:	ldr	r7, [r2, #84]	; 0x54
   1d5d0:	add	sl, r3, r3, lsl #1
   1d5d4:	ldr	r3, [r7, #24]
   1d5d8:	add	sl, r3, sl, lsl #2
   1d5dc:	ldr	r1, [sl, #4]
   1d5e0:	cmp	r1, #0
   1d5e4:	ble	1d7a0 <__assert_fail@plt+0xc2a8>
   1d5e8:	str	r9, [sp, #52]	; 0x34
   1d5ec:	mov	r6, #0
   1d5f0:	mov	r9, r2
   1d5f4:	b	1d614 <__assert_fail@plt+0xc11c>
   1d5f8:	cmp	r3, #9
   1d5fc:	beq	1d65c <__assert_fail@plt+0xc164>
   1d600:	cmp	r3, #4
   1d604:	beq	1d678 <__assert_fail@plt+0xc180>
   1d608:	add	r6, r6, #1
   1d60c:	cmp	r6, r1
   1d610:	bge	1d654 <__assert_fail@plt+0xc15c>
   1d614:	ldr	r3, [sl, #8]
   1d618:	ldr	r2, [r7]
   1d61c:	ldr	r5, [r3, r6, lsl #2]
   1d620:	add	r3, r2, r5, lsl #3
   1d624:	ldrb	r3, [r3, #4]
   1d628:	cmp	r3, #8
   1d62c:	bne	1d5f8 <__assert_fail@plt+0xc100>
   1d630:	ldr	r3, [sp, #32]
   1d634:	cmp	r3, #0
   1d638:	beq	1d608 <__assert_fail@plt+0xc110>
   1d63c:	ldr	r3, [r2, r5, lsl #3]
   1d640:	cmp	fp, r3
   1d644:	beq	1d170 <__assert_fail@plt+0xbc78>
   1d648:	add	r6, r6, #1
   1d64c:	cmp	r6, r1
   1d650:	blt	1d614 <__assert_fail@plt+0xc11c>
   1d654:	ldr	r9, [sp, #52]	; 0x34
   1d658:	b	1d7a0 <__assert_fail@plt+0xc2a8>
   1d65c:	ldr	r3, [sp, #16]
   1d660:	cmp	r3, #0
   1d664:	beq	1d608 <__assert_fail@plt+0xc110>
   1d668:	ldr	r3, [r2, r5, lsl #3]
   1d66c:	cmp	fp, r3
   1d670:	bne	1d608 <__assert_fail@plt+0xc110>
   1d674:	b	1d14c <__assert_fail@plt+0xbc54>
   1d678:	ldr	r3, [sp, #44]	; 0x2c
   1d67c:	ldr	r4, [r9, #116]	; 0x74
   1d680:	add	r8, r5, r5, lsl #1
   1d684:	add	r4, r4, r3
   1d688:	cmp	fp, #31
   1d68c:	lsl	r8, r8, #2
   1d690:	ldr	r3, [sp, #16]
   1d694:	add	r4, r4, #24
   1d698:	ble	1d7d4 <__assert_fail@plt+0xc2dc>
   1d69c:	cmp	r3, #0
   1d6a0:	bne	1d738 <__assert_fail@plt+0xc240>
   1d6a4:	str	sl, [sp, #56]	; 0x38
   1d6a8:	str	r6, [sp, #60]	; 0x3c
   1d6ac:	ldr	sl, [sp, #20]
   1d6b0:	ldr	r6, [sp, #28]
   1d6b4:	b	1d6c4 <__assert_fail@plt+0xc1cc>
   1d6b8:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1d6bc:	cmp	r3, #0
   1d6c0:	beq	1d71c <__assert_fail@plt+0xc224>
   1d6c4:	ldr	r3, [r4, #-24]	; 0xffffffe8
   1d6c8:	add	r4, r4, #24
   1d6cc:	cmp	r5, r3
   1d6d0:	bne	1d6b8 <__assert_fail@plt+0xc1c0>
   1d6d4:	ldr	r3, [r7, #20]
   1d6d8:	mov	r2, fp
   1d6dc:	add	r3, r3, r8
   1d6e0:	mov	r1, sl
   1d6e4:	ldr	r3, [r3, #8]
   1d6e8:	mov	r0, r9
   1d6ec:	ldr	ip, [r3]
   1d6f0:	cmp	ip, r6
   1d6f4:	mov	r3, ip
   1d6f8:	beq	1d8f0 <__assert_fail@plt+0xc3f8>
   1d6fc:	ldr	ip, [sp, #208]	; 0xd0
   1d700:	str	ip, [sp]
   1d704:	bl	1cfd8 <__assert_fail@plt+0xbae0>
   1d708:	cmn	r0, #1
   1d70c:	beq	1d170 <__assert_fail@plt+0xbc78>
   1d710:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1d714:	cmp	r3, #0
   1d718:	bne	1d6c4 <__assert_fail@plt+0xc1cc>
   1d71c:	ldr	sl, [sp, #56]	; 0x38
   1d720:	ldr	r6, [sp, #60]	; 0x3c
   1d724:	ldr	r1, [sl, #4]
   1d728:	b	1d608 <__assert_fail@plt+0xc110>
   1d72c:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1d730:	cmp	r3, #0
   1d734:	beq	1d724 <__assert_fail@plt+0xc22c>
   1d738:	ldr	r3, [r4, #-24]	; 0xffffffe8
   1d73c:	add	r4, r4, #24
   1d740:	cmp	r5, r3
   1d744:	bne	1d72c <__assert_fail@plt+0xc234>
   1d748:	ldr	r3, [r7, #20]
   1d74c:	ldr	lr, [sp, #28]
   1d750:	add	r3, r3, r8
   1d754:	mov	r2, fp
   1d758:	ldr	r3, [r3, #8]
   1d75c:	ldr	r1, [sp, #20]
   1d760:	mov	r0, r9
   1d764:	ldr	ip, [r3]
   1d768:	cmp	ip, lr
   1d76c:	mov	r3, ip
   1d770:	beq	1d8f0 <__assert_fail@plt+0xc3f8>
   1d774:	ldr	ip, [sp, #208]	; 0xd0
   1d778:	str	ip, [sp]
   1d77c:	bl	1cfd8 <__assert_fail@plt+0xbae0>
   1d780:	cmn	r0, #1
   1d784:	beq	1d170 <__assert_fail@plt+0xbc78>
   1d788:	cmp	r0, #0
   1d78c:	bne	1d72c <__assert_fail@plt+0xc234>
   1d790:	ldr	r9, [sp, #52]	; 0x34
   1d794:	ldr	r3, [sp, #16]
   1d798:	cmp	r3, #0
   1d79c:	bne	1d14c <__assert_fail@plt+0xbc54>
   1d7a0:	cmp	fp, #31
   1d7a4:	bgt	1d564 <__assert_fail@plt+0xc06c>
   1d7a8:	ldr	r3, [r9, #-8]
   1d7ac:	ldr	r2, [sp, #36]	; 0x24
   1d7b0:	add	r9, r9, #24
   1d7b4:	and	r3, r3, r2
   1d7b8:	str	r3, [r9, #-32]	; 0xffffffe0
   1d7bc:	ldrb	r3, [r9, #-28]	; 0xffffffe4
   1d7c0:	cmp	r3, #0
   1d7c4:	bne	1d574 <__assert_fail@plt+0xc07c>
   1d7c8:	ldr	r3, [sp, #80]	; 0x50
   1d7cc:	ldr	r1, [r3, #4]
   1d7d0:	b	1d4c0 <__assert_fail@plt+0xbfc8>
   1d7d4:	cmp	r3, #0
   1d7d8:	bne	1d8e0 <__assert_fail@plt+0xc3e8>
   1d7dc:	str	sl, [sp, #56]	; 0x38
   1d7e0:	str	r6, [sp, #60]	; 0x3c
   1d7e4:	ldr	sl, [sp, #208]	; 0xd0
   1d7e8:	ldr	r6, [sp, #28]
   1d7ec:	b	1d800 <__assert_fail@plt+0xc308>
   1d7f0:	add	r4, r4, #24
   1d7f4:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1d7f8:	cmp	r3, #0
   1d7fc:	beq	1d71c <__assert_fail@plt+0xc224>
   1d800:	ldr	r3, [r4, #-24]	; 0xffffffe8
   1d804:	cmp	r5, r3
   1d808:	bne	1d7f0 <__assert_fail@plt+0xc2f8>
   1d80c:	ldr	r3, [r4, #-8]
   1d810:	ldr	ip, [sp, #24]
   1d814:	mov	r2, fp
   1d818:	tst	ip, r3
   1d81c:	ldr	r1, [sp, #20]
   1d820:	mov	r0, r9
   1d824:	beq	1d7f0 <__assert_fail@plt+0xc2f8>
   1d828:	ldr	r3, [r7, #20]
   1d82c:	add	r3, r3, r8
   1d830:	ldr	r3, [r3, #8]
   1d834:	ldr	ip, [r3]
   1d838:	cmp	r6, ip
   1d83c:	mov	r3, ip
   1d840:	beq	1d8f0 <__assert_fail@plt+0xc3f8>
   1d844:	str	sl, [sp]
   1d848:	bl	1cfd8 <__assert_fail@plt+0xbae0>
   1d84c:	cmn	r0, #1
   1d850:	beq	1d170 <__assert_fail@plt+0xbc78>
   1d854:	ldr	r3, [r4, #-8]
   1d858:	ldr	r2, [sp, #36]	; 0x24
   1d85c:	and	r3, r3, r2
   1d860:	str	r3, [r4, #-8]
   1d864:	b	1d7f0 <__assert_fail@plt+0xc2f8>
   1d868:	ldr	r3, [r4, #-8]
   1d86c:	ldr	ip, [sp, #24]
   1d870:	mov	r2, fp
   1d874:	tst	ip, r3
   1d878:	ldr	r1, [sp, #20]
   1d87c:	mov	r0, r9
   1d880:	beq	1d8d0 <__assert_fail@plt+0xc3d8>
   1d884:	ldr	r3, [r7, #20]
   1d888:	ldr	lr, [sp, #28]
   1d88c:	add	r3, r3, r8
   1d890:	ldr	r3, [r3, #8]
   1d894:	ldr	ip, [r3]
   1d898:	cmp	lr, ip
   1d89c:	mov	r3, ip
   1d8a0:	beq	1d8f0 <__assert_fail@plt+0xc3f8>
   1d8a4:	ldr	ip, [sp, #208]	; 0xd0
   1d8a8:	str	ip, [sp]
   1d8ac:	bl	1cfd8 <__assert_fail@plt+0xbae0>
   1d8b0:	cmn	r0, #1
   1d8b4:	beq	1d170 <__assert_fail@plt+0xbc78>
   1d8b8:	cmp	r0, #0
   1d8bc:	beq	1d790 <__assert_fail@plt+0xc298>
   1d8c0:	ldr	r3, [r4, #-8]
   1d8c4:	ldr	r2, [sp, #36]	; 0x24
   1d8c8:	and	r3, r3, r2
   1d8cc:	str	r3, [r4, #-8]
   1d8d0:	add	r4, r4, #24
   1d8d4:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1d8d8:	cmp	r3, #0
   1d8dc:	beq	1d724 <__assert_fail@plt+0xc22c>
   1d8e0:	ldr	r3, [r4, #-24]	; 0xffffffe8
   1d8e4:	cmp	r5, r3
   1d8e8:	bne	1d8d0 <__assert_fail@plt+0xc3d8>
   1d8ec:	b	1d868 <__assert_fail@plt+0xc370>
   1d8f0:	ldr	r3, [sp, #32]
   1d8f4:	ldr	r9, [sp, #52]	; 0x34
   1d8f8:	cmp	r3, #0
   1d8fc:	beq	1d794 <__assert_fail@plt+0xc29c>
   1d900:	mvn	r0, #0
   1d904:	b	1d0c0 <__assert_fail@plt+0xbbc8>
   1d908:	ldr	r3, [sp, #32]
   1d90c:	cmp	r3, #0
   1d910:	bne	1d170 <__assert_fail@plt+0xbc78>
   1d914:	ldr	r3, [sp, #16]
   1d918:	cmp	r3, #0
   1d91c:	bne	1d14c <__assert_fail@plt+0xbc54>
   1d920:	cmp	fp, #31
   1d924:	bgt	1d404 <__assert_fail@plt+0xbf0c>
   1d928:	ldr	r2, [sp, #68]	; 0x44
   1d92c:	ldr	r1, [sp, #36]	; 0x24
   1d930:	ldr	r3, [r2, #-8]
   1d934:	and	r3, r3, r1
   1d938:	str	r3, [r2, #-8]
   1d93c:	b	1d404 <__assert_fail@plt+0xbf0c>
   1d940:	ldr	r3, [sp, #32]
   1d944:	cmp	r3, #0
   1d948:	bne	1d170 <__assert_fail@plt+0xbc78>
   1d94c:	ldr	r3, [sp, #16]
   1d950:	cmp	r3, #0
   1d954:	bne	1d14c <__assert_fail@plt+0xbc54>
   1d958:	cmp	fp, #31
   1d95c:	bgt	1d2a0 <__assert_fail@plt+0xbda8>
   1d960:	ldr	r2, [sp, #92]	; 0x5c
   1d964:	ldr	r1, [sp, #36]	; 0x24
   1d968:	ldr	r3, [r2, #-8]
   1d96c:	and	r3, r3, r1
   1d970:	str	r3, [r2, #-8]
   1d974:	b	1d2a0 <__assert_fail@plt+0xbda8>
   1d978:	ldr	r3, [sp, #148]	; 0x94
   1d97c:	ldr	r3, [r3, #4]
   1d980:	b	1d35c <__assert_fail@plt+0xbe64>
   1d984:	ldr	r3, [sp, #32]
   1d988:	cmp	r3, #0
   1d98c:	bne	1d170 <__assert_fail@plt+0xbc78>
   1d990:	ldr	r3, [sp, #16]
   1d994:	cmp	r3, #0
   1d998:	bne	1d14c <__assert_fail@plt+0xbc54>
   1d99c:	cmp	fp, #31
   1d9a0:	bgt	1d10c <__assert_fail@plt+0xbc14>
   1d9a4:	ldr	r2, [sp, #88]	; 0x58
   1d9a8:	ldr	r1, [sp, #36]	; 0x24
   1d9ac:	ldr	r3, [r2, #-8]
   1d9b0:	and	r3, r3, r1
   1d9b4:	str	r3, [r2, #-8]
   1d9b8:	b	1d10c <__assert_fail@plt+0xbc14>
   1d9bc:	ldr	r1, [sp, #16]
   1d9c0:	cmp	r1, #0
   1d9c4:	beq	1d208 <__assert_fail@plt+0xbd10>
   1d9c8:	ldr	r1, [sp, #104]	; 0x68
   1d9cc:	ldr	r2, [r2, r1, lsl #3]
   1d9d0:	cmp	fp, r2
   1d9d4:	bne	1d208 <__assert_fail@plt+0xbd10>
   1d9d8:	b	1d14c <__assert_fail@plt+0xbc54>
   1d9dc:	ldr	r3, [sp, #136]	; 0x88
   1d9e0:	ldr	r3, [r3, #4]
   1d9e4:	b	1d208 <__assert_fail@plt+0xbd10>
   1d9e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d9ec:	sub	sp, sp, #36	; 0x24
   1d9f0:	ldr	fp, [r0, #108]	; 0x6c
   1d9f4:	ldr	r6, [sp, #72]	; 0x48
   1d9f8:	ldr	r7, [sp, #80]	; 0x50
   1d9fc:	ldr	lr, [r0, #84]	; 0x54
   1da00:	mov	ip, fp
   1da04:	mov	r4, #0
   1da08:	str	lr, [sp, #12]
   1da0c:	cmp	r4, ip
   1da10:	bge	1da6c <__assert_fail@plt+0xc574>
   1da14:	add	lr, r4, ip
   1da18:	ldr	r5, [r0, #116]	; 0x74
   1da1c:	add	lr, lr, lr, lsr #31
   1da20:	asr	lr, lr, #1
   1da24:	add	r8, lr, lr, lsl #1
   1da28:	add	r8, r5, r8, lsl #3
   1da2c:	ldr	r8, [r8, #4]
   1da30:	cmp	r6, r8
   1da34:	ble	1da5c <__assert_fail@plt+0xc564>
   1da38:	b	1dc08 <__assert_fail@plt+0xc710>
   1da3c:	asr	ip, ip, #1
   1da40:	mov	r9, ip
   1da44:	add	r8, ip, ip, lsl #1
   1da48:	add	r8, r5, r8, lsl #3
   1da4c:	ldr	r8, [r8, #4]
   1da50:	cmp	r8, r6
   1da54:	blt	1dc10 <__assert_fail@plt+0xc718>
   1da58:	mov	lr, ip
   1da5c:	add	ip, r4, lr
   1da60:	cmp	r4, lr
   1da64:	add	ip, ip, ip, lsr #31
   1da68:	blt	1da3c <__assert_fail@plt+0xc544>
   1da6c:	cmp	fp, r4
   1da70:	mvnle	r4, #0
   1da74:	ble	1da90 <__assert_fail@plt+0xc598>
   1da78:	add	lr, r4, r4, lsl #1
   1da7c:	ldr	ip, [r0, #116]	; 0x74
   1da80:	add	ip, ip, lr, lsl #3
   1da84:	ldr	ip, [ip, #4]
   1da88:	cmp	r6, ip
   1da8c:	mvnne	r4, #0
   1da90:	mov	ip, fp
   1da94:	mov	r5, #0
   1da98:	cmp	r5, ip
   1da9c:	bge	1daf8 <__assert_fail@plt+0xc600>
   1daa0:	add	lr, r5, ip
   1daa4:	ldr	r8, [r0, #116]	; 0x74
   1daa8:	add	lr, lr, lr, lsr #31
   1daac:	asr	lr, lr, #1
   1dab0:	add	r9, lr, lr, lsl #1
   1dab4:	add	r9, r8, r9, lsl #3
   1dab8:	ldr	r9, [r9, #4]
   1dabc:	cmp	r7, r9
   1dac0:	ble	1dae8 <__assert_fail@plt+0xc5f0>
   1dac4:	b	1dc1c <__assert_fail@plt+0xc724>
   1dac8:	asr	ip, ip, #1
   1dacc:	mov	sl, ip
   1dad0:	add	r9, ip, ip, lsl #1
   1dad4:	add	r9, r8, r9, lsl #3
   1dad8:	ldr	r9, [r9, #4]
   1dadc:	cmp	r9, r7
   1dae0:	blt	1dc24 <__assert_fail@plt+0xc72c>
   1dae4:	mov	lr, ip
   1dae8:	add	ip, r5, lr
   1daec:	cmp	r5, lr
   1daf0:	add	ip, ip, ip, lsr #31
   1daf4:	blt	1dac8 <__assert_fail@plt+0xc5d0>
   1daf8:	cmp	fp, r5
   1dafc:	mvnle	r5, #0
   1db00:	ble	1db1c <__assert_fail@plt+0xc624>
   1db04:	add	lr, r5, r5, lsl #1
   1db08:	ldr	ip, [r0, #116]	; 0x74
   1db0c:	add	ip, ip, lr, lsl #3
   1db10:	ldr	ip, [ip, #4]
   1db14:	cmp	r7, ip
   1db18:	mvnne	r5, #0
   1db1c:	ldr	ip, [r1]
   1db20:	cmp	ip, #0
   1db24:	ble	1dc44 <__assert_fail@plt+0xc74c>
   1db28:	ldr	r8, [sp, #12]
   1db2c:	mov	sl, r2
   1db30:	mov	fp, r0
   1db34:	mov	r9, #0
   1db38:	str	r3, [sp, #20]
   1db3c:	str	r1, [sp, #16]
   1db40:	str	r4, [sp, #24]
   1db44:	str	r5, [sp, #28]
   1db48:	ldr	r3, [sl]
   1db4c:	ldr	r2, [fp, #116]	; 0x74
   1db50:	lsl	r1, r9, #2
   1db54:	ldr	r3, [r3, r9, lsl #2]
   1db58:	ldr	r0, [r8]
   1db5c:	str	r1, [sp, #12]
   1db60:	add	r3, r3, r3, lsl #1
   1db64:	add	lr, r2, r3, lsl #3
   1db68:	ldr	r3, [r2, r3, lsl #3]
   1db6c:	ldr	r1, [lr, #8]
   1db70:	cmp	r6, r1
   1db74:	ldr	r5, [r0, r3, lsl #3]
   1db78:	blt	1dca4 <__assert_fail@plt+0xc7ac>
   1db7c:	ldr	r3, [lr, #12]
   1db80:	cmp	r6, r3
   1db84:	bgt	1dc4c <__assert_fail@plt+0xc754>
   1db88:	cmp	r6, r3
   1db8c:	moveq	r4, #2
   1db90:	movne	r4, #0
   1db94:	cmp	r6, r1
   1db98:	orreq	r4, r4, #1
   1db9c:	cmp	r4, #0
   1dba0:	bne	1dc54 <__assert_fail@plt+0xc75c>
   1dba4:	cmp	r7, r1
   1dba8:	blt	1dbfc <__assert_fail@plt+0xc704>
   1dbac:	cmp	r7, r3
   1dbb0:	movgt	r1, #1
   1dbb4:	bgt	1dbf4 <__assert_fail@plt+0xc6fc>
   1dbb8:	cmp	r7, r3
   1dbbc:	moveq	r3, #2
   1dbc0:	movne	r3, #0
   1dbc4:	cmp	r7, r1
   1dbc8:	movne	r1, r3
   1dbcc:	orreq	r1, r3, #1
   1dbd0:	cmp	r1, #0
   1dbd4:	beq	1dbf4 <__assert_fail@plt+0xc6fc>
   1dbd8:	ldr	r3, [sp, #28]
   1dbdc:	mov	r2, r5
   1dbe0:	str	r3, [sp]
   1dbe4:	mov	r0, fp
   1dbe8:	ldr	r3, [sp, #76]	; 0x4c
   1dbec:	bl	1cfd8 <__assert_fail@plt+0xbae0>
   1dbf0:	mov	r1, r0
   1dbf4:	cmp	r1, r4
   1dbf8:	beq	1dc30 <__assert_fail@plt+0xc738>
   1dbfc:	mov	r0, #1
   1dc00:	add	sp, sp, #36	; 0x24
   1dc04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc08:	mov	r9, lr
   1dc0c:	mov	lr, ip
   1dc10:	add	r4, r9, #1
   1dc14:	mov	ip, lr
   1dc18:	b	1da0c <__assert_fail@plt+0xc514>
   1dc1c:	mov	sl, lr
   1dc20:	mov	lr, ip
   1dc24:	add	r5, sl, #1
   1dc28:	mov	ip, lr
   1dc2c:	b	1da98 <__assert_fail@plt+0xc5a0>
   1dc30:	ldr	r3, [sp, #16]
   1dc34:	ldr	ip, [r3]
   1dc38:	add	r9, r9, #1
   1dc3c:	cmp	r9, ip
   1dc40:	blt	1db48 <__assert_fail@plt+0xc650>
   1dc44:	mov	r0, #0
   1dc48:	b	1dc00 <__assert_fail@plt+0xc708>
   1dc4c:	mov	r4, #1
   1dc50:	b	1dba4 <__assert_fail@plt+0xc6ac>
   1dc54:	ldr	r3, [sp, #24]
   1dc58:	mov	r1, r4
   1dc5c:	str	r3, [sp]
   1dc60:	mov	r2, r5
   1dc64:	ldr	r3, [sp, #20]
   1dc68:	mov	r0, fp
   1dc6c:	bl	1cfd8 <__assert_fail@plt+0xbae0>
   1dc70:	ldr	r2, [sl]
   1dc74:	lsl	r1, r9, #2
   1dc78:	ldr	r3, [fp, #116]	; 0x74
   1dc7c:	ldr	r2, [r2, r1]
   1dc80:	add	r2, r2, r2, lsl #1
   1dc84:	add	r3, r3, r2, lsl #3
   1dc88:	ldr	r1, [r3, #8]
   1dc8c:	cmp	r7, r1
   1dc90:	mvnlt	r1, #0
   1dc94:	mov	r4, r0
   1dc98:	blt	1dbf4 <__assert_fail@plt+0xc6fc>
   1dc9c:	ldr	r3, [r3, #12]
   1dca0:	b	1dbac <__assert_fail@plt+0xc6b4>
   1dca4:	cmp	r7, r1
   1dca8:	blt	1dc38 <__assert_fail@plt+0xc740>
   1dcac:	ldr	r3, [lr, #12]
   1dcb0:	cmp	r7, r3
   1dcb4:	bgt	1dbfc <__assert_fail@plt+0xc704>
   1dcb8:	mvn	r4, #0
   1dcbc:	b	1dbb8 <__assert_fail@plt+0xc6c0>
   1dcc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dcc4:	mov	r8, r1
   1dcc8:	mov	r6, r0
   1dccc:	ldr	r1, [r0, #28]
   1dcd0:	add	r0, r8, r8, lsl #1
   1dcd4:	sub	sp, sp, #36	; 0x24
   1dcd8:	add	r1, r1, r0, lsl #2
   1dcdc:	mov	r4, #0
   1dce0:	str	r4, [sp, #24]
   1dce4:	str	r4, [sp, #20]
   1dce8:	str	r4, [sp, #28]
   1dcec:	ldr	lr, [r1, #4]
   1dcf0:	str	r1, [sp, #12]
   1dcf4:	cmp	lr, r4
   1dcf8:	str	r3, [sp, #8]
   1dcfc:	ble	1e1a4 <__assert_fail@plt+0xccac>
   1dd00:	mov	r5, r1
   1dd04:	str	r2, [sp]
   1dd08:	ldr	r2, [r5, #8]
   1dd0c:	ldr	r3, [r2, r4, lsl #2]
   1dd10:	cmp	r8, r3
   1dd14:	beq	1def0 <__assert_fail@plt+0xc9f8>
   1dd18:	ldr	r1, [r6]
   1dd1c:	add	r1, r1, r3, lsl #3
   1dd20:	ldrb	r1, [r1, #4]
   1dd24:	tst	r1, #8
   1dd28:	beq	1def0 <__assert_fail@plt+0xc9f8>
   1dd2c:	add	r3, r3, r3, lsl #1
   1dd30:	ldr	r1, [r6, #20]
   1dd34:	lsl	r3, r3, #2
   1dd38:	str	r3, [sp, #4]
   1dd3c:	add	r3, r1, r3
   1dd40:	ldr	r0, [r3, #8]
   1dd44:	ldr	r3, [r3, #4]
   1dd48:	cmp	r3, #1
   1dd4c:	ldr	r1, [r0]
   1dd50:	ble	1e128 <__assert_fail@plt+0xcc30>
   1dd54:	cmp	lr, #0
   1dd58:	ldr	r7, [r0, #4]
   1dd5c:	ble	1ddb8 <__assert_fail@plt+0xc8c0>
   1dd60:	sub	sl, lr, #1
   1dd64:	mov	r9, sl
   1dd68:	mov	ip, #0
   1dd6c:	cmp	ip, r9
   1dd70:	bcs	1ddac <__assert_fail@plt+0xc8b4>
   1dd74:	add	r0, ip, r9
   1dd78:	lsr	r0, r0, #1
   1dd7c:	ldr	r3, [r2, r0, lsl #2]
   1dd80:	cmp	r1, r3
   1dd84:	ble	1dd9c <__assert_fail@plt+0xc8a4>
   1dd88:	b	1e028 <__assert_fail@plt+0xcb30>
   1dd8c:	ldr	r9, [r2, r3, lsl #2]
   1dd90:	cmp	r1, r9
   1dd94:	bgt	1e030 <__assert_fail@plt+0xcb38>
   1dd98:	mov	r0, r3
   1dd9c:	add	r3, ip, r0
   1dda0:	cmp	ip, r0
   1dda4:	lsr	r3, r3, #1
   1dda8:	bcc	1dd8c <__assert_fail@plt+0xc894>
   1ddac:	ldr	r3, [r2, ip, lsl #2]
   1ddb0:	cmp	r1, r3
   1ddb4:	beq	1e11c <__assert_fail@plt+0xcc24>
   1ddb8:	ldr	r3, [sp]
   1ddbc:	ldr	fp, [r3, #4]
   1ddc0:	cmp	fp, #0
   1ddc4:	ble	1de20 <__assert_fail@plt+0xc928>
   1ddc8:	ldr	sl, [r3, #8]
   1ddcc:	sub	r9, fp, #1
   1ddd0:	mov	ip, #0
   1ddd4:	cmp	ip, r9
   1ddd8:	bcs	1de14 <__assert_fail@plt+0xc91c>
   1dddc:	add	r0, ip, r9
   1dde0:	lsr	r0, r0, #1
   1dde4:	ldr	r3, [sl, r0, lsl #2]
   1dde8:	cmp	r1, r3
   1ddec:	ble	1de04 <__assert_fail@plt+0xc90c>
   1ddf0:	b	1e108 <__assert_fail@plt+0xcc10>
   1ddf4:	ldr	r9, [sl, r3, lsl #2]
   1ddf8:	cmp	r1, r9
   1ddfc:	bgt	1e110 <__assert_fail@plt+0xcc18>
   1de00:	mov	r0, r3
   1de04:	add	r3, ip, r0
   1de08:	cmp	ip, r0
   1de0c:	lsr	r3, r3, #1
   1de10:	bcc	1ddf4 <__assert_fail@plt+0xc8fc>
   1de14:	ldr	r3, [sl, ip, lsl #2]
   1de18:	cmp	r1, r3
   1de1c:	beq	1e0ac <__assert_fail@plt+0xcbb4>
   1de20:	cmp	r7, #0
   1de24:	ble	1def0 <__assert_fail@plt+0xc9f8>
   1de28:	cmp	lr, #0
   1de2c:	ble	1de8c <__assert_fail@plt+0xc994>
   1de30:	sub	sl, lr, #1
   1de34:	mov	r0, #0
   1de38:	cmp	r0, sl
   1de3c:	bcs	1de78 <__assert_fail@plt+0xc980>
   1de40:	add	r1, r0, sl
   1de44:	lsr	r1, r1, #1
   1de48:	ldr	r3, [r2, r1, lsl #2]
   1de4c:	cmp	r3, r7
   1de50:	bge	1de68 <__assert_fail@plt+0xc970>
   1de54:	b	1e098 <__assert_fail@plt+0xcba0>
   1de58:	ldr	ip, [r2, r3, lsl #2]
   1de5c:	cmp	ip, r7
   1de60:	blt	1e0a0 <__assert_fail@plt+0xcba8>
   1de64:	mov	r1, r3
   1de68:	add	r3, r0, r1
   1de6c:	cmp	r0, r1
   1de70:	lsr	r3, r3, #1
   1de74:	bcc	1de58 <__assert_fail@plt+0xc960>
   1de78:	ldr	r3, [r2, r0, lsl #2]
   1de7c:	cmp	r3, r7
   1de80:	beq	1def0 <__assert_fail@plt+0xc9f8>
   1de84:	ldr	r3, [sp]
   1de88:	ldr	fp, [r3, #4]
   1de8c:	cmp	fp, #0
   1de90:	ble	1def0 <__assert_fail@plt+0xc9f8>
   1de94:	ldr	r3, [sp]
   1de98:	sub	fp, fp, #1
   1de9c:	mov	r1, #0
   1dea0:	ldr	r0, [r3, #8]
   1dea4:	cmp	r1, fp
   1dea8:	bcs	1dee4 <__assert_fail@plt+0xc9ec>
   1deac:	add	r2, r1, fp
   1deb0:	lsr	r2, r2, #1
   1deb4:	ldr	r3, [r0, r2, lsl #2]
   1deb8:	cmp	r7, r3
   1debc:	ble	1ded4 <__assert_fail@plt+0xc9dc>
   1dec0:	b	1e14c <__assert_fail@plt+0xcc54>
   1dec4:	ldr	ip, [r0, r3, lsl #2]
   1dec8:	cmp	ip, r7
   1decc:	blt	1e154 <__assert_fail@plt+0xcc5c>
   1ded0:	mov	r2, r3
   1ded4:	add	r3, r1, r2
   1ded8:	cmp	r1, r2
   1dedc:	lsr	r3, r3, #1
   1dee0:	bcc	1dec4 <__assert_fail@plt+0xc9cc>
   1dee4:	ldr	r3, [r0, r1, lsl #2]
   1dee8:	cmp	r3, r7
   1deec:	beq	1e0ac <__assert_fail@plt+0xcbb4>
   1def0:	add	r4, r4, #1
   1def4:	cmp	r4, lr
   1def8:	blt	1dd08 <__assert_fail@plt+0xc810>
   1defc:	cmp	lr, #0
   1df00:	ldr	r5, [sp]
   1df04:	ldrle	r0, [sp, #28]
   1df08:	ble	1e000 <__assert_fail@plt+0xcb08>
   1df0c:	ldr	r3, [sp, #12]
   1df10:	mov	r7, #0
   1df14:	ldr	r0, [sp, #28]
   1df18:	ldr	r9, [r3, #8]
   1df1c:	mov	sl, r7
   1df20:	sub	r9, r9, #4
   1df24:	ldr	r4, [sp, #24]
   1df28:	ldr	r2, [r9, #4]!
   1df2c:	cmp	r4, #0
   1df30:	ble	1df88 <__assert_fail@plt+0xca90>
   1df34:	sub	r4, r4, #1
   1df38:	mov	ip, sl
   1df3c:	cmp	ip, r4
   1df40:	bcs	1df7c <__assert_fail@plt+0xca84>
   1df44:	add	r1, ip, r4
   1df48:	lsr	r1, r1, #1
   1df4c:	ldr	r3, [r0, r1, lsl #2]
   1df50:	cmp	r2, r3
   1df54:	ble	1df6c <__assert_fail@plt+0xca74>
   1df58:	b	1e014 <__assert_fail@plt+0xcb1c>
   1df5c:	ldr	r4, [r0, r3, lsl #2]
   1df60:	cmp	r2, r4
   1df64:	bgt	1e01c <__assert_fail@plt+0xcb24>
   1df68:	mov	r1, r3
   1df6c:	add	r3, r1, ip
   1df70:	cmp	r1, ip
   1df74:	lsr	r3, r3, #1
   1df78:	bhi	1df5c <__assert_fail@plt+0xca64>
   1df7c:	ldr	r3, [r0, ip, lsl #2]
   1df80:	cmp	r2, r3
   1df84:	beq	1dff4 <__assert_fail@plt+0xcafc>
   1df88:	ldr	r8, [r5, #4]
   1df8c:	cmp	r8, #0
   1df90:	ble	1dff4 <__assert_fail@plt+0xcafc>
   1df94:	sub	fp, r8, #1
   1df98:	ldr	r6, [r5, #8]
   1df9c:	mov	r4, fp
   1dfa0:	mov	ip, sl
   1dfa4:	cmp	ip, r4
   1dfa8:	bcs	1dfe4 <__assert_fail@plt+0xcaec>
   1dfac:	add	r1, ip, r4
   1dfb0:	lsr	r1, r1, #1
   1dfb4:	ldr	r3, [r6, r1, lsl #2]
   1dfb8:	cmp	r3, r2
   1dfbc:	bge	1dfd4 <__assert_fail@plt+0xcadc>
   1dfc0:	b	1e03c <__assert_fail@plt+0xcb44>
   1dfc4:	ldr	r4, [r6, r3, lsl #2]
   1dfc8:	cmp	r2, r4
   1dfcc:	bgt	1e044 <__assert_fail@plt+0xcb4c>
   1dfd0:	mov	r1, r3
   1dfd4:	add	r3, ip, r1
   1dfd8:	cmp	ip, r1
   1dfdc:	lsr	r3, r3, #1
   1dfe0:	bcc	1dfc4 <__assert_fail@plt+0xcacc>
   1dfe4:	ldr	r3, [r6, ip, lsl #2]
   1dfe8:	add	r6, r6, ip, lsl #2
   1dfec:	cmp	r2, r3
   1dff0:	beq	1e050 <__assert_fail@plt+0xcb58>
   1dff4:	add	r7, r7, #1
   1dff8:	cmp	r7, lr
   1dffc:	blt	1df24 <__assert_fail@plt+0xca2c>
   1e000:	bl	14214 <__assert_fail@plt+0x2d1c>
   1e004:	mov	r7, #0
   1e008:	mov	r0, r7
   1e00c:	add	sp, sp, #36	; 0x24
   1e010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e014:	mov	r3, r1
   1e018:	mov	r1, r4
   1e01c:	add	ip, r3, #1
   1e020:	mov	r4, r1
   1e024:	b	1df3c <__assert_fail@plt+0xca44>
   1e028:	mov	r3, r0
   1e02c:	mov	r0, r9
   1e030:	add	ip, r3, #1
   1e034:	mov	r9, r0
   1e038:	b	1dd6c <__assert_fail@plt+0xc874>
   1e03c:	mov	r3, r1
   1e040:	mov	r1, r4
   1e044:	add	ip, r3, #1
   1e048:	mov	r4, r1
   1e04c:	b	1dfa4 <__assert_fail@plt+0xcaac>
   1e050:	cmp	ip, r8
   1e054:	movlt	r8, #0
   1e058:	movge	r8, #1
   1e05c:	orrs	r3, r8, ip, lsr #31
   1e060:	mov	r3, ip
   1e064:	bne	1dff4 <__assert_fail@plt+0xcafc>
   1e068:	cmp	ip, fp
   1e06c:	str	fp, [r5, #4]
   1e070:	bge	1e08c <__assert_fail@plt+0xcb94>
   1e074:	ldr	r2, [r6, #4]
   1e078:	add	r3, r3, #1
   1e07c:	str	r2, [r6], #4
   1e080:	ldr	r2, [r5, #4]
   1e084:	cmp	r3, r2
   1e088:	blt	1e074 <__assert_fail@plt+0xcb7c>
   1e08c:	ldr	r3, [sp, #12]
   1e090:	ldr	lr, [r3, #4]
   1e094:	b	1dff4 <__assert_fail@plt+0xcafc>
   1e098:	mov	r3, r1
   1e09c:	mov	r1, sl
   1e0a0:	add	r0, r3, #1
   1e0a4:	mov	sl, r1
   1e0a8:	b	1de38 <__assert_fail@plt+0xc940>
   1e0ac:	ldr	r3, [sp, #8]
   1e0b0:	ldr	r3, [r3, #4]
   1e0b4:	cmp	r3, #0
   1e0b8:	beq	1def0 <__assert_fail@plt+0xc9f8>
   1e0bc:	ldr	r2, [r6, #28]
   1e0c0:	ldr	r1, [sp, #4]
   1e0c4:	add	r2, r2, r1
   1e0c8:	ldr	r0, [r2, #4]
   1e0cc:	cmp	r0, #0
   1e0d0:	beq	1def0 <__assert_fail@plt+0xc9f8>
   1e0d4:	ldr	r1, [sp, #24]
   1e0d8:	add	r3, r3, r0
   1e0dc:	ldr	r7, [sp, #20]
   1e0e0:	add	r1, r3, r1
   1e0e4:	cmp	r1, r7
   1e0e8:	bgt	1e160 <__assert_fail@plt+0xcc68>
   1e0ec:	ldr	r1, [sp, #8]
   1e0f0:	add	r0, sp, #20
   1e0f4:	bl	19644 <__assert_fail@plt+0x814c>
   1e0f8:	cmp	r0, #0
   1e0fc:	bne	1e18c <__assert_fail@plt+0xcc94>
   1e100:	ldr	lr, [r5, #4]
   1e104:	b	1def0 <__assert_fail@plt+0xc9f8>
   1e108:	mov	r3, r0
   1e10c:	mov	r0, r9
   1e110:	add	ip, r3, #1
   1e114:	mov	r9, r0
   1e118:	b	1ddd4 <__assert_fail@plt+0xc8dc>
   1e11c:	cmp	r7, #0
   1e120:	bgt	1de34 <__assert_fail@plt+0xc93c>
   1e124:	b	1def0 <__assert_fail@plt+0xc9f8>
   1e128:	cmp	lr, #0
   1e12c:	mvngt	r7, #0
   1e130:	bgt	1dd60 <__assert_fail@plt+0xc868>
   1e134:	ldr	r3, [sp]
   1e138:	ldr	fp, [r3, #4]
   1e13c:	cmp	fp, #0
   1e140:	ble	1defc <__assert_fail@plt+0xca04>
   1e144:	mvn	r7, #0
   1e148:	b	1ddc8 <__assert_fail@plt+0xc8d0>
   1e14c:	mov	r3, r2
   1e150:	mov	r2, fp
   1e154:	add	r1, r3, #1
   1e158:	mov	fp, r2
   1e15c:	b	1dea4 <__assert_fail@plt+0xc9ac>
   1e160:	add	r7, r3, r7
   1e164:	ldr	r0, [sp, #28]
   1e168:	lsl	r1, r7, #2
   1e16c:	str	r2, [sp, #4]
   1e170:	bl	2a7bc <__assert_fail@plt+0x192c4>
   1e174:	cmp	r0, #0
   1e178:	beq	1e1ac <__assert_fail@plt+0xccb4>
   1e17c:	str	r0, [sp, #28]
   1e180:	str	r7, [sp, #20]
   1e184:	ldr	r2, [sp, #4]
   1e188:	b	1e0ec <__assert_fail@plt+0xcbf4>
   1e18c:	mov	r7, r0
   1e190:	ldr	r0, [sp, #28]
   1e194:	bl	14214 <__assert_fail@plt+0x2d1c>
   1e198:	mov	r0, r7
   1e19c:	add	sp, sp, #36	; 0x24
   1e1a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e1a4:	mov	r0, r4
   1e1a8:	b	1e000 <__assert_fail@plt+0xcb08>
   1e1ac:	mov	r7, #12
   1e1b0:	b	1e190 <__assert_fail@plt+0xcc98>
   1e1b4:	ldr	r3, [r0, #36]	; 0x24
   1e1b8:	cmn	r3, #-536870910	; 0xe0000002
   1e1bc:	bhi	1e3b8 <__assert_fail@plt+0xcec0>
   1e1c0:	ldr	r2, [r0, #48]	; 0x30
   1e1c4:	push	{r4, r5, r6, lr}
   1e1c8:	lsl	r5, r3, #1
   1e1cc:	cmp	r5, r2
   1e1d0:	movge	r5, r2
   1e1d4:	ldr	r3, [r0, #80]	; 0x50
   1e1d8:	cmp	r5, r1
   1e1dc:	movlt	r5, r1
   1e1e0:	cmp	r3, #1
   1e1e4:	mov	r4, r0
   1e1e8:	ble	1e230 <__assert_fail@plt+0xcd38>
   1e1ec:	cmn	r5, #-1073741823	; 0xc0000001
   1e1f0:	bhi	1e30c <__assert_fail@plt+0xce14>
   1e1f4:	lsl	r6, r5, #2
   1e1f8:	mov	r1, r6
   1e1fc:	ldr	r0, [r0, #8]
   1e200:	bl	2a7bc <__assert_fail@plt+0x192c4>
   1e204:	subs	r3, r0, #0
   1e208:	beq	1e30c <__assert_fail@plt+0xce14>
   1e20c:	ldr	r0, [r4, #12]
   1e210:	str	r3, [r4, #8]
   1e214:	cmp	r0, #0
   1e218:	beq	1e230 <__assert_fail@plt+0xcd38>
   1e21c:	mov	r1, r6
   1e220:	bl	2a7bc <__assert_fail@plt+0x192c4>
   1e224:	cmp	r0, #0
   1e228:	beq	1e30c <__assert_fail@plt+0xce14>
   1e22c:	str	r0, [r4, #12]
   1e230:	ldrb	r3, [r4, #75]	; 0x4b
   1e234:	cmp	r3, #0
   1e238:	bne	1e2f8 <__assert_fail@plt+0xce00>
   1e23c:	ldr	r0, [r4, #100]	; 0x64
   1e240:	str	r5, [r4, #36]	; 0x24
   1e244:	cmp	r0, #0
   1e248:	beq	1e264 <__assert_fail@plt+0xcd6c>
   1e24c:	add	r1, r5, #1
   1e250:	lsl	r1, r1, #2
   1e254:	bl	2a7bc <__assert_fail@plt+0x192c4>
   1e258:	cmp	r0, #0
   1e25c:	beq	1e30c <__assert_fail@plt+0xce14>
   1e260:	str	r0, [r4, #100]	; 0x64
   1e264:	ldrb	r5, [r4, #72]	; 0x48
   1e268:	ldr	r3, [r4, #80]	; 0x50
   1e26c:	cmp	r5, #0
   1e270:	beq	1e288 <__assert_fail@plt+0xcd90>
   1e274:	cmp	r3, #1
   1e278:	ble	1e32c <__assert_fail@plt+0xce34>
   1e27c:	mov	r0, r4
   1e280:	pop	{r4, r5, r6, lr}
   1e284:	b	18d68 <__assert_fail@plt+0x7870>
   1e288:	cmp	r3, #1
   1e28c:	bgt	1e31c <__assert_fail@plt+0xce24>
   1e290:	ldr	r0, [r4, #64]	; 0x40
   1e294:	cmp	r0, #0
   1e298:	popeq	{r4, r5, r6, pc}
   1e29c:	ldr	lr, [r4, #36]	; 0x24
   1e2a0:	ldr	r2, [r4, #48]	; 0x30
   1e2a4:	ldr	r3, [r4, #28]
   1e2a8:	cmp	lr, r2
   1e2ac:	movge	lr, r2
   1e2b0:	cmp	lr, r3
   1e2b4:	bgt	1e2c0 <__assert_fail@plt+0xcdc8>
   1e2b8:	b	1e2e8 <__assert_fail@plt+0xcdf0>
   1e2bc:	ldr	r0, [r4, #64]	; 0x40
   1e2c0:	ldr	r2, [r4]
   1e2c4:	ldr	ip, [r4, #24]
   1e2c8:	add	r2, r2, r3
   1e2cc:	ldr	r1, [r4, #4]
   1e2d0:	ldrb	r2, [r2, ip]
   1e2d4:	ldrb	r2, [r0, r2]
   1e2d8:	strb	r2, [r1, r3]
   1e2dc:	add	r3, r3, #1
   1e2e0:	cmp	lr, r3
   1e2e4:	bne	1e2bc <__assert_fail@plt+0xcdc4>
   1e2e8:	str	r3, [r4, #28]
   1e2ec:	str	r3, [r4, #32]
   1e2f0:	mov	r0, #0
   1e2f4:	pop	{r4, r5, r6, pc}
   1e2f8:	mov	r1, r5
   1e2fc:	ldr	r0, [r4, #4]
   1e300:	bl	2a7bc <__assert_fail@plt+0x192c4>
   1e304:	cmp	r0, #0
   1e308:	bne	1e314 <__assert_fail@plt+0xce1c>
   1e30c:	mov	r0, #12
   1e310:	pop	{r4, r5, r6, pc}
   1e314:	str	r0, [r4, #4]
   1e318:	b	1e23c <__assert_fail@plt+0xcd44>
   1e31c:	mov	r0, r4
   1e320:	bl	18bc8 <__assert_fail@plt+0x76d0>
   1e324:	mov	r0, r5
   1e328:	pop	{r4, r5, r6, pc}
   1e32c:	ldr	r6, [r4, #36]	; 0x24
   1e330:	ldr	r3, [r4, #48]	; 0x30
   1e334:	ldr	r5, [r4, #28]
   1e338:	cmp	r6, r3
   1e33c:	movge	r6, r3
   1e340:	cmp	r6, r5
   1e344:	ble	1e3c0 <__assert_fail@plt+0xcec8>
   1e348:	bl	11378 <__ctype_toupper_loc@plt>
   1e34c:	b	1e36c <__assert_fail@plt+0xce74>
   1e350:	ldr	r1, [r0]
   1e354:	ldr	r2, [r4, #4]
   1e358:	ldr	r3, [r1, r3, lsl #2]
   1e35c:	strb	r3, [r2, r5]
   1e360:	add	r5, r5, #1
   1e364:	cmp	r6, r5
   1e368:	beq	1e3a8 <__assert_fail@plt+0xceb0>
   1e36c:	ldr	r3, [r4]
   1e370:	ldr	r1, [r4, #24]
   1e374:	ldr	r2, [r4, #64]	; 0x40
   1e378:	add	r3, r3, r5
   1e37c:	cmp	r2, #0
   1e380:	ldrb	r3, [r3, r1]
   1e384:	beq	1e350 <__assert_fail@plt+0xce58>
   1e388:	ldrb	r3, [r2, r3]
   1e38c:	ldr	ip, [r0]
   1e390:	ldr	r1, [r4, #4]
   1e394:	ldr	r3, [ip, r3, lsl #2]
   1e398:	strb	r3, [r1, r5]
   1e39c:	add	r5, r5, #1
   1e3a0:	cmp	r6, r5
   1e3a4:	bne	1e36c <__assert_fail@plt+0xce74>
   1e3a8:	str	r6, [r4, #28]
   1e3ac:	str	r6, [r4, #32]
   1e3b0:	mov	r0, #0
   1e3b4:	pop	{r4, r5, r6, pc}
   1e3b8:	mov	r0, #12
   1e3bc:	bx	lr
   1e3c0:	mov	r6, r5
   1e3c4:	b	1e3a8 <__assert_fail@plt+0xceb0>
   1e3c8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3cc:	mov	r3, #0
   1e3d0:	ldr	r7, [r2, #4]
   1e3d4:	str	r3, [r0]
   1e3d8:	cmp	r7, r3
   1e3dc:	beq	1e678 <__assert_fail@plt+0xd180>
   1e3e0:	ble	1e684 <__assert_fail@plt+0xd18c>
   1e3e4:	ldr	r3, [r2, #8]
   1e3e8:	mov	r5, r7
   1e3ec:	add	lr, r3, r7, lsl #2
   1e3f0:	ldr	ip, [r3], #4
   1e3f4:	cmp	lr, r3
   1e3f8:	add	r5, r5, ip
   1e3fc:	bne	1e3f0 <__assert_fail@plt+0xcef8>
   1e400:	ldr	r3, [r1, #68]	; 0x44
   1e404:	ldr	ip, [r1, #32]
   1e408:	and	r3, r3, r5
   1e40c:	add	r3, r3, r3, lsl #1
   1e410:	lsl	r3, r3, #2
   1e414:	add	lr, ip, r3
   1e418:	ldr	r6, [ip, r3]
   1e41c:	cmp	r6, #0
   1e420:	ble	1e478 <__assert_fail@plt+0xcf80>
   1e424:	ldr	lr, [lr, #8]
   1e428:	sub	sl, r7, #1
   1e42c:	sub	lr, lr, #4
   1e430:	lsl	sl, sl, #2
   1e434:	mov	r3, #0
   1e438:	b	1e448 <__assert_fail@plt+0xcf50>
   1e43c:	add	r3, r3, #1
   1e440:	cmp	r3, r6
   1e444:	beq	1e478 <__assert_fail@plt+0xcf80>
   1e448:	ldr	r4, [lr, #4]!
   1e44c:	ldr	ip, [r4]
   1e450:	cmp	r5, ip
   1e454:	bne	1e43c <__assert_fail@plt+0xcf44>
   1e458:	ldr	ip, [r4, #8]
   1e45c:	cmp	r7, ip
   1e460:	moveq	ip, sl
   1e464:	moveq	r8, r7
   1e468:	beq	1e5e0 <__assert_fail@plt+0xd0e8>
   1e46c:	add	r3, r3, #1
   1e470:	cmp	r3, r6
   1e474:	bne	1e448 <__assert_fail@plt+0xcf50>
   1e478:	mov	r6, r1
   1e47c:	mov	r7, r0
   1e480:	mov	r1, #1
   1e484:	mov	r0, #56	; 0x38
   1e488:	mov	r9, r2
   1e48c:	bl	2a748 <__assert_fail@plt+0x19250>
   1e490:	subs	r4, r0, #0
   1e494:	beq	1e664 <__assert_fail@plt+0xd16c>
   1e498:	ldr	r0, [r9, #4]
   1e49c:	add	r8, r4, #4
   1e4a0:	cmp	r0, #0
   1e4a4:	str	r0, [r4, #8]
   1e4a8:	ble	1e600 <__assert_fail@plt+0xd108>
   1e4ac:	str	r0, [r4, #4]
   1e4b0:	lsl	r0, r0, #2
   1e4b4:	bl	2a790 <__assert_fail@plt+0x19298>
   1e4b8:	cmp	r0, #0
   1e4bc:	str	r0, [r4, #12]
   1e4c0:	beq	1e68c <__assert_fail@plt+0xd194>
   1e4c4:	ldr	fp, [r9, #4]
   1e4c8:	ldr	r1, [r9, #8]
   1e4cc:	lsl	sl, fp, #2
   1e4d0:	mov	r2, sl
   1e4d4:	bl	11234 <memcpy@plt>
   1e4d8:	cmp	fp, #0
   1e4dc:	str	r8, [r4, #40]	; 0x28
   1e4e0:	ble	1e5a4 <__assert_fail@plt+0xd0ac>
   1e4e4:	ldr	ip, [r9, #8]
   1e4e8:	ldr	r9, [r6]
   1e4ec:	add	lr, ip, sl
   1e4f0:	ldr	sl, [pc, #424]	; 1e6a0 <__assert_fail@plt+0xd1a8>
   1e4f4:	b	1e550 <__assert_fail@plt+0xd058>
   1e4f8:	ldrb	r3, [r2, #6]
   1e4fc:	ldrb	r1, [r4, #52]	; 0x34
   1e500:	cmp	r0, #2
   1e504:	lsr	r3, r3, #4
   1e508:	orr	r3, r3, r1, lsr #5
   1e50c:	and	r3, r3, #1
   1e510:	bic	r1, r1, #32
   1e514:	orr	r3, r1, r3, lsl #5
   1e518:	strb	r3, [r4, #52]	; 0x34
   1e51c:	uxtbeq	r3, r3
   1e520:	orreq	r3, r3, #16
   1e524:	strbeq	r3, [r4, #52]	; 0x34
   1e528:	beq	1e548 <__assert_fail@plt+0xd050>
   1e52c:	cmp	r0, #4
   1e530:	beq	1e5f0 <__assert_fail@plt+0xd0f8>
   1e534:	cmp	r0, #12
   1e538:	beq	1e590 <__assert_fail@plt+0xd098>
   1e53c:	ldr	r3, [r2, #4]
   1e540:	tst	r3, sl
   1e544:	bne	1e590 <__assert_fail@plt+0xd098>
   1e548:	cmp	lr, ip
   1e54c:	beq	1e5a4 <__assert_fail@plt+0xd0ac>
   1e550:	ldr	r2, [ip], #4
   1e554:	add	r2, r9, r2, lsl #3
   1e558:	ldrb	r0, [r2, #4]
   1e55c:	cmp	r0, #1
   1e560:	bne	1e4f8 <__assert_fail@plt+0xd000>
   1e564:	ldr	r3, [r2, #4]
   1e568:	tst	r3, sl
   1e56c:	beq	1e548 <__assert_fail@plt+0xd050>
   1e570:	ldrb	r3, [r2, #6]
   1e574:	ldrb	r2, [r4, #52]	; 0x34
   1e578:	lsr	r3, r3, #4
   1e57c:	orr	r3, r3, r2, lsr #5
   1e580:	and	r3, r3, #1
   1e584:	bic	r2, r2, #32
   1e588:	orr	r3, r2, r3, lsl #5
   1e58c:	strb	r3, [r4, #52]	; 0x34
   1e590:	ldrb	r3, [r4, #52]	; 0x34
   1e594:	cmp	lr, ip
   1e598:	orr	r3, r3, #128	; 0x80
   1e59c:	strb	r3, [r4, #52]	; 0x34
   1e5a0:	bne	1e550 <__assert_fail@plt+0xd058>
   1e5a4:	mov	r2, r5
   1e5a8:	mov	r0, r6
   1e5ac:	mov	r1, r4
   1e5b0:	bl	18a8c <__assert_fail@plt+0x7594>
   1e5b4:	cmp	r0, #0
   1e5b8:	bne	1e618 <__assert_fail@plt+0xd120>
   1e5bc:	mov	r0, r4
   1e5c0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e5c4:	ldr	fp, [r4, #12]
   1e5c8:	ldr	r9, [r2, #8]
   1e5cc:	ldr	fp, [fp, ip]
   1e5d0:	ldr	r9, [r9, ip]
   1e5d4:	sub	ip, ip, #4
   1e5d8:	cmp	fp, r9
   1e5dc:	bne	1e43c <__assert_fail@plt+0xcf44>
   1e5e0:	subs	r8, r8, #1
   1e5e4:	bpl	1e5c4 <__assert_fail@plt+0xd0cc>
   1e5e8:	mov	r0, r4
   1e5ec:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e5f0:	ldrb	r3, [r4, #52]	; 0x34
   1e5f4:	orr	r3, r3, #64	; 0x40
   1e5f8:	strb	r3, [r4, #52]	; 0x34
   1e5fc:	b	1e548 <__assert_fail@plt+0xd050>
   1e600:	mov	r3, #0
   1e604:	str	r3, [r4, #4]
   1e608:	str	r3, [r8, #4]
   1e60c:	str	r3, [r8, #8]
   1e610:	str	r8, [r4, #40]	; 0x28
   1e614:	b	1e5a4 <__assert_fail@plt+0xd0ac>
   1e618:	ldr	r0, [r4, #24]
   1e61c:	bl	14214 <__assert_fail@plt+0x2d1c>
   1e620:	ldr	r0, [r4, #36]	; 0x24
   1e624:	bl	14214 <__assert_fail@plt+0x2d1c>
   1e628:	ldr	r3, [r4, #40]	; 0x28
   1e62c:	cmp	r8, r3
   1e630:	beq	1e644 <__assert_fail@plt+0xd14c>
   1e634:	ldr	r0, [r3, #8]
   1e638:	bl	14214 <__assert_fail@plt+0x2d1c>
   1e63c:	ldr	r0, [r4, #40]	; 0x28
   1e640:	bl	14214 <__assert_fail@plt+0x2d1c>
   1e644:	ldr	r0, [r4, #12]
   1e648:	bl	14214 <__assert_fail@plt+0x2d1c>
   1e64c:	ldr	r0, [r4, #48]	; 0x30
   1e650:	bl	14214 <__assert_fail@plt+0x2d1c>
   1e654:	ldr	r0, [r4, #44]	; 0x2c
   1e658:	bl	14214 <__assert_fail@plt+0x2d1c>
   1e65c:	mov	r0, r4
   1e660:	bl	14214 <__assert_fail@plt+0x2d1c>
   1e664:	mov	r4, #0
   1e668:	mov	r3, #12
   1e66c:	str	r3, [r7]
   1e670:	mov	r0, r4
   1e674:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e678:	mov	r4, r7
   1e67c:	mov	r0, r4
   1e680:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e684:	mov	r5, r7
   1e688:	b	1e400 <__assert_fail@plt+0xcf08>
   1e68c:	str	r0, [r4, #8]
   1e690:	str	r0, [r4, #4]
   1e694:	mov	r0, r4
   1e698:	bl	14214 <__assert_fail@plt+0x2d1c>
   1e69c:	b	1e664 <__assert_fail@plt+0xd16c>
   1e6a0:	andeq	pc, r3, r0, lsl #30
   1e6a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e6a8:	mov	r6, #0
   1e6ac:	ldr	r5, [r0, #108]	; 0x6c
   1e6b0:	sub	sp, sp, #36	; 0x24
   1e6b4:	mov	r4, r5
   1e6b8:	cmp	r6, r4
   1e6bc:	bge	1e718 <__assert_fail@plt+0xd220>
   1e6c0:	add	lr, r6, r4
   1e6c4:	ldr	r7, [r0, #116]	; 0x74
   1e6c8:	add	lr, lr, lr, lsr #31
   1e6cc:	asr	lr, lr, #1
   1e6d0:	add	ip, lr, lr, lsl #1
   1e6d4:	add	ip, r7, ip, lsl #3
   1e6d8:	ldr	ip, [ip, #4]
   1e6dc:	cmp	r2, ip
   1e6e0:	ble	1e708 <__assert_fail@plt+0xd210>
   1e6e4:	b	1ea78 <__assert_fail@plt+0xd580>
   1e6e8:	asr	ip, ip, #1
   1e6ec:	mov	r8, ip
   1e6f0:	add	r4, ip, ip, lsl #1
   1e6f4:	add	r4, r7, r4, lsl #3
   1e6f8:	ldr	r4, [r4, #4]
   1e6fc:	cmp	r2, r4
   1e700:	bgt	1ea80 <__assert_fail@plt+0xd588>
   1e704:	mov	lr, ip
   1e708:	add	ip, lr, r6
   1e70c:	cmp	lr, r6
   1e710:	add	ip, ip, ip, lsr #31
   1e714:	bgt	1e6e8 <__assert_fail@plt+0xd1f0>
   1e718:	cmp	r5, r6
   1e71c:	ble	1e7ec <__assert_fail@plt+0xd2f4>
   1e720:	add	ip, r6, r6, lsl #1
   1e724:	ldr	r5, [r0, #116]	; 0x74
   1e728:	lsl	ip, ip, #3
   1e72c:	add	lr, r5, ip
   1e730:	cmn	r6, #1
   1e734:	ldr	lr, [lr, #4]
   1e738:	movne	r6, #0
   1e73c:	moveq	r6, #1
   1e740:	cmp	lr, r2
   1e744:	orrne	r6, r6, #1
   1e748:	cmp	r6, #0
   1e74c:	bne	1e7ec <__assert_fail@plt+0xd2f4>
   1e750:	ldr	r9, [r0, #84]	; 0x54
   1e754:	mov	r7, r1
   1e758:	mov	r8, r0
   1e75c:	str	r3, [sp, #12]
   1e760:	add	r3, ip, #24
   1e764:	str	r2, [sp, #4]
   1e768:	str	r3, [sp, #8]
   1e76c:	add	r5, r5, r3
   1e770:	ldr	ip, [r7, #4]
   1e774:	cmp	ip, #0
   1e778:	ble	1e7dc <__assert_fail@plt+0xd2e4>
   1e77c:	sub	ip, ip, #1
   1e780:	ldr	r0, [r5, #-24]	; 0xffffffe8
   1e784:	ldr	r1, [r7, #8]
   1e788:	mov	r4, ip
   1e78c:	mov	lr, r6
   1e790:	cmp	lr, r4
   1e794:	bcs	1e7d0 <__assert_fail@plt+0xd2d8>
   1e798:	add	r2, lr, r4
   1e79c:	lsr	r2, r2, #1
   1e7a0:	ldr	r3, [r1, r2, lsl #2]
   1e7a4:	cmp	r0, r3
   1e7a8:	ble	1e7c0 <__assert_fail@plt+0xd2c8>
   1e7ac:	b	1e7fc <__assert_fail@plt+0xd304>
   1e7b0:	ldr	r4, [r1, r3, lsl #2]
   1e7b4:	cmp	r0, r4
   1e7b8:	bgt	1e804 <__assert_fail@plt+0xd30c>
   1e7bc:	mov	r2, r3
   1e7c0:	add	r3, lr, r2
   1e7c4:	cmp	lr, r2
   1e7c8:	lsr	r3, r3, #1
   1e7cc:	bcc	1e7b0 <__assert_fail@plt+0xd2b8>
   1e7d0:	ldr	r3, [r1, lr, lsl #2]
   1e7d4:	cmp	r0, r3
   1e7d8:	beq	1e810 <__assert_fail@plt+0xd318>
   1e7dc:	add	r5, r5, #24
   1e7e0:	ldrb	r3, [r5, #-28]	; 0xffffffe4
   1e7e4:	cmp	r3, #0
   1e7e8:	bne	1e770 <__assert_fail@plt+0xd278>
   1e7ec:	mov	sl, #0
   1e7f0:	mov	r0, sl
   1e7f4:	add	sp, sp, #36	; 0x24
   1e7f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e7fc:	mov	r3, r2
   1e800:	mov	r2, r4
   1e804:	add	lr, r3, #1
   1e808:	mov	r4, r2
   1e80c:	b	1e790 <__assert_fail@plt+0xd298>
   1e810:	ldr	r2, [sp, #4]
   1e814:	ldr	sl, [r5, #-12]
   1e818:	ldr	r3, [r5, #-16]
   1e81c:	add	sl, r2, sl
   1e820:	sub	sl, sl, r3
   1e824:	cmp	r2, sl
   1e828:	beq	1e958 <__assert_fail@plt+0xd460>
   1e82c:	ldr	r2, [r8, #100]	; 0x64
   1e830:	ldr	r3, [r9, #12]
   1e834:	ldr	fp, [r2, sl, lsl #2]
   1e838:	ldr	r4, [r3, r0, lsl #2]
   1e83c:	cmp	fp, #0
   1e840:	beq	1ea8c <__assert_fail@plt+0xd594>
   1e844:	ldr	ip, [fp, #8]
   1e848:	cmp	ip, #0
   1e84c:	ble	1ea64 <__assert_fail@plt+0xd56c>
   1e850:	ldr	lr, [fp, #12]
   1e854:	sub	r0, ip, #1
   1e858:	mov	r1, r6
   1e85c:	cmp	r1, r0
   1e860:	bcs	1e89c <__assert_fail@plt+0xd3a4>
   1e864:	add	r2, r1, r0
   1e868:	lsr	r2, r2, #1
   1e86c:	ldr	r3, [lr, r2, lsl #2]
   1e870:	cmp	r4, r3
   1e874:	ble	1e88c <__assert_fail@plt+0xd394>
   1e878:	b	1e944 <__assert_fail@plt+0xd44c>
   1e87c:	ldr	r0, [lr, r3, lsl #2]
   1e880:	cmp	r4, r0
   1e884:	bgt	1e94c <__assert_fail@plt+0xd454>
   1e888:	mov	r2, r3
   1e88c:	add	r3, r2, r1
   1e890:	cmp	r2, r1
   1e894:	lsr	r3, r3, #1
   1e898:	bhi	1e87c <__assert_fail@plt+0xd384>
   1e89c:	ldr	r3, [lr, r1, lsl #2]
   1e8a0:	cmp	r4, r3
   1e8a4:	beq	1e7dc <__assert_fail@plt+0xd2e4>
   1e8a8:	lsl	r0, ip, #2
   1e8ac:	str	ip, [sp, #24]
   1e8b0:	str	ip, [sp, #20]
   1e8b4:	bl	2a790 <__assert_fail@plt+0x19298>
   1e8b8:	cmp	r0, #0
   1e8bc:	mov	r3, r0
   1e8c0:	str	r0, [sp, #28]
   1e8c4:	beq	1eb04 <__assert_fail@plt+0xd60c>
   1e8c8:	ldr	r2, [fp, #8]
   1e8cc:	ldr	r1, [fp, #12]
   1e8d0:	lsl	r2, r2, #2
   1e8d4:	bl	11234 <memcpy@plt>
   1e8d8:	mov	r3, r6
   1e8dc:	mov	r1, r4
   1e8e0:	add	r0, sp, #20
   1e8e4:	str	r3, [sp, #16]
   1e8e8:	bl	19498 <__assert_fail@plt+0x7fa0>
   1e8ec:	ldr	r2, [sp, #16]
   1e8f0:	eor	r3, r0, #1
   1e8f4:	cmp	r2, #0
   1e8f8:	orrne	r3, r3, #1
   1e8fc:	tst	r3, #255	; 0xff
   1e900:	bne	1eab8 <__assert_fail@plt+0xd5c0>
   1e904:	add	r2, sp, #20
   1e908:	mov	r1, r9
   1e90c:	add	r0, sp, #16
   1e910:	ldr	r4, [r8, #100]	; 0x64
   1e914:	bl	1e3c8 <__assert_fail@plt+0xced0>
   1e918:	str	r0, [r4, sl, lsl #2]
   1e91c:	ldr	r0, [sp, #28]
   1e920:	bl	14214 <__assert_fail@plt+0x2d1c>
   1e924:	ldr	r3, [r8, #100]	; 0x64
   1e928:	ldr	r3, [r3, sl, lsl #2]
   1e92c:	cmp	r3, #0
   1e930:	bne	1e7dc <__assert_fail@plt+0xd2e4>
   1e934:	ldr	sl, [sp, #16]
   1e938:	cmp	sl, #0
   1e93c:	beq	1e7dc <__assert_fail@plt+0xd2e4>
   1e940:	b	1e7f0 <__assert_fail@plt+0xd2f8>
   1e944:	mov	r3, r2
   1e948:	mov	r2, r0
   1e94c:	add	r1, r3, #1
   1e950:	mov	r0, r2
   1e954:	b	1e85c <__assert_fail@plt+0xd364>
   1e958:	add	r0, r0, r0, lsl #1
   1e95c:	ldr	r3, [r9, #20]
   1e960:	mov	lr, r6
   1e964:	add	r3, r3, r0, lsl #2
   1e968:	ldr	r3, [r3, #8]
   1e96c:	ldr	r4, [r3]
   1e970:	cmp	lr, ip
   1e974:	bcs	1e9b0 <__assert_fail@plt+0xd4b8>
   1e978:	add	r2, lr, ip
   1e97c:	lsr	r2, r2, #1
   1e980:	ldr	r3, [r1, r2, lsl #2]
   1e984:	cmp	r4, r3
   1e988:	ble	1e9a0 <__assert_fail@plt+0xd4a8>
   1e98c:	b	1ea50 <__assert_fail@plt+0xd558>
   1e990:	ldr	r0, [r1, r3, lsl #2]
   1e994:	cmp	r4, r0
   1e998:	bgt	1ea58 <__assert_fail@plt+0xd560>
   1e99c:	mov	r2, r3
   1e9a0:	add	r3, lr, r2
   1e9a4:	cmp	lr, r2
   1e9a8:	lsr	r3, r3, #1
   1e9ac:	bcc	1e990 <__assert_fail@plt+0xd498>
   1e9b0:	ldr	r3, [r1, lr, lsl #2]
   1e9b4:	cmp	r4, r3
   1e9b8:	beq	1e7dc <__assert_fail@plt+0xd2e4>
   1e9bc:	mov	r3, #1
   1e9c0:	mov	r0, #4
   1e9c4:	str	r3, [sp, #20]
   1e9c8:	str	r3, [sp, #24]
   1e9cc:	bl	2a790 <__assert_fail@plt+0x19298>
   1e9d0:	cmp	r0, #0
   1e9d4:	str	r0, [sp, #28]
   1e9d8:	movne	ip, r6
   1e9dc:	strne	r4, [r0]
   1e9e0:	beq	1eb14 <__assert_fail@plt+0xd61c>
   1e9e4:	ldr	r3, [sp, #72]	; 0x48
   1e9e8:	ldr	r2, [sp, #12]
   1e9ec:	add	r1, sp, #20
   1e9f0:	mov	r0, r9
   1e9f4:	str	ip, [sp, #16]
   1e9f8:	bl	1ce58 <__assert_fail@plt+0xb960>
   1e9fc:	ldr	sl, [sp, #24]
   1ea00:	cmp	sl, #0
   1ea04:	mov	r4, r0
   1ea08:	beq	1ea2c <__assert_fail@plt+0xd534>
   1ea0c:	ldm	r7, {r2, r3}
   1ea10:	add	r3, r3, sl, lsl #1
   1ea14:	cmp	r2, r3
   1ea18:	blt	1eadc <__assert_fail@plt+0xd5e4>
   1ea1c:	add	r1, sp, #20
   1ea20:	mov	r0, r7
   1ea24:	bl	19a1c <__assert_fail@plt+0x8524>
   1ea28:	mov	sl, r0
   1ea2c:	ldr	r0, [sp, #28]
   1ea30:	bl	14214 <__assert_fail@plt+0x2d1c>
   1ea34:	ldr	r3, [sp, #16]
   1ea38:	orr	r2, r4, r3
   1ea3c:	orrs	r2, r2, sl
   1ea40:	bne	1eb24 <__assert_fail@plt+0xd62c>
   1ea44:	ldr	r5, [r8, #116]	; 0x74
   1ea48:	ldr	r3, [sp, #8]
   1ea4c:	b	1e76c <__assert_fail@plt+0xd274>
   1ea50:	mov	r3, r2
   1ea54:	mov	r2, ip
   1ea58:	add	lr, r3, #1
   1ea5c:	mov	ip, r2
   1ea60:	b	1e970 <__assert_fail@plt+0xd478>
   1ea64:	str	r6, [sp, #20]
   1ea68:	str	r6, [sp, #24]
   1ea6c:	str	r6, [sp, #28]
   1ea70:	mov	r3, #0
   1ea74:	b	1e8dc <__assert_fail@plt+0xd3e4>
   1ea78:	mov	r8, lr
   1ea7c:	mov	lr, r4
   1ea80:	add	r6, r8, #1
   1ea84:	mov	r4, lr
   1ea88:	b	1e6b8 <__assert_fail@plt+0xd1c0>
   1ea8c:	mov	r3, #1
   1ea90:	mov	r0, #4
   1ea94:	str	r3, [sp, #20]
   1ea98:	str	r3, [sp, #24]
   1ea9c:	bl	2a790 <__assert_fail@plt+0x19298>
   1eaa0:	cmp	r0, #0
   1eaa4:	str	r0, [sp, #28]
   1eaa8:	beq	1eacc <__assert_fail@plt+0xd5d4>
   1eaac:	str	r4, [r0]
   1eab0:	str	fp, [sp, #16]
   1eab4:	b	1e904 <__assert_fail@plt+0xd40c>
   1eab8:	ldr	r0, [sp, #28]
   1eabc:	bl	14214 <__assert_fail@plt+0x2d1c>
   1eac0:	ldr	sl, [sp, #16]
   1eac4:	cmp	sl, #0
   1eac8:	bne	1e7f0 <__assert_fail@plt+0xd2f8>
   1eacc:	mov	sl, #12
   1ead0:	mov	r0, sl
   1ead4:	add	sp, sp, #36	; 0x24
   1ead8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eadc:	add	sl, sl, r2
   1eae0:	ldr	r0, [r7, #8]
   1eae4:	lsl	r1, sl, #3
   1eae8:	bl	2a7bc <__assert_fail@plt+0x192c4>
   1eaec:	lsl	sl, sl, #1
   1eaf0:	cmp	r0, #0
   1eaf4:	beq	1eb3c <__assert_fail@plt+0xd644>
   1eaf8:	str	r0, [r7, #8]
   1eafc:	str	sl, [r7]
   1eb00:	b	1ea1c <__assert_fail@plt+0xd524>
   1eb04:	str	r3, [sp, #24]
   1eb08:	str	r3, [sp, #20]
   1eb0c:	mov	r3, #12
   1eb10:	b	1e8dc <__assert_fail@plt+0xd3e4>
   1eb14:	str	r0, [sp, #24]
   1eb18:	str	r0, [sp, #20]
   1eb1c:	mov	ip, #12
   1eb20:	b	1e9e4 <__assert_fail@plt+0xd4ec>
   1eb24:	cmp	r3, #0
   1eb28:	movne	sl, r3
   1eb2c:	bne	1e7f0 <__assert_fail@plt+0xd2f8>
   1eb30:	cmp	r4, #0
   1eb34:	movne	sl, r4
   1eb38:	b	1e7f0 <__assert_fail@plt+0xd2f8>
   1eb3c:	mov	sl, #12
   1eb40:	b	1ea2c <__assert_fail@plt+0xd534>
   1eb44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb48:	mov	sl, r2
   1eb4c:	ldr	r2, [r0, #100]	; 0x64
   1eb50:	sub	sp, sp, #116	; 0x74
   1eb54:	mov	ip, #0
   1eb58:	ldr	r8, [r2, sl, lsl #2]
   1eb5c:	mov	r5, r3
   1eb60:	cmp	r8, ip
   1eb64:	lsl	r3, sl, #2
   1eb68:	str	r3, [sp, #36]	; 0x24
   1eb6c:	str	r0, [sp, #32]
   1eb70:	mov	fp, r1
   1eb74:	ldr	r6, [r0, #84]	; 0x54
   1eb78:	str	ip, [sp, #64]	; 0x40
   1eb7c:	ldr	r3, [r5, #4]
   1eb80:	beq	1f35c <__assert_fail@plt+0xde64>
   1eb84:	add	r2, r8, #4
   1eb88:	cmp	r3, ip
   1eb8c:	str	r2, [sp, #20]
   1eb90:	bne	1ebd0 <__assert_fail@plt+0xd6d8>
   1eb94:	ldr	r3, [fp]
   1eb98:	mov	r2, #0
   1eb9c:	str	r2, [r3, sl, lsl #2]
   1eba0:	ldr	r3, [sp, #20]
   1eba4:	cmp	r3, #0
   1eba8:	beq	1ebc4 <__assert_fail@plt+0xd6cc>
   1ebac:	ldr	r3, [sp, #32]
   1ebb0:	ldr	r3, [r3, #100]	; 0x64
   1ebb4:	ldr	r3, [r3, sl, lsl #2]
   1ebb8:	ldrb	r3, [r3, #52]	; 0x34
   1ebbc:	ands	r3, r3, #64	; 0x40
   1ebc0:	bne	1ecbc <__assert_fail@plt+0xd7c4>
   1ebc4:	mov	r0, r3
   1ebc8:	add	sp, sp, #116	; 0x74
   1ebcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ebd0:	add	r0, sp, #112	; 0x70
   1ebd4:	mov	r2, r5
   1ebd8:	str	ip, [r0, #-28]!	; 0xffffffe4
   1ebdc:	mov	r1, r6
   1ebe0:	bl	1e3c8 <__assert_fail@plt+0xced0>
   1ebe4:	ldr	r3, [sp, #84]	; 0x54
   1ebe8:	cmp	r3, #0
   1ebec:	mov	r9, r0
   1ebf0:	bne	1ebc4 <__assert_fail@plt+0xd6cc>
   1ebf4:	ldr	r7, [r0, #28]
   1ebf8:	cmp	r7, #0
   1ebfc:	addne	r3, r0, #28
   1ec00:	strne	r3, [sp, #16]
   1ec04:	bne	1f054 <__assert_fail@plt+0xdb5c>
   1ec08:	ldr	r0, [r5, #4]
   1ec0c:	str	r7, [r9, #32]
   1ec10:	str	r0, [r9, #28]
   1ec14:	lsl	r0, r0, #2
   1ec18:	bl	2a790 <__assert_fail@plt+0x19298>
   1ec1c:	add	r3, r9, #28
   1ec20:	str	r3, [sp, #16]
   1ec24:	cmp	r0, #0
   1ec28:	str	r0, [r9, #36]	; 0x24
   1ec2c:	beq	1f1d0 <__assert_fail@plt+0xdcd8>
   1ec30:	ldr	r2, [r5, #4]
   1ec34:	str	r7, [sp, #84]	; 0x54
   1ec38:	cmp	r2, #0
   1ec3c:	movgt	r4, r3
   1ec40:	strgt	r8, [sp, #24]
   1ec44:	strgt	sl, [sp, #28]
   1ec48:	bgt	1ec8c <__assert_fail@plt+0xd794>
   1ec4c:	b	1f054 <__assert_fail@plt+0xdb5c>
   1ec50:	ldr	r2, [r9, #32]
   1ec54:	ldr	r0, [r9, #28]
   1ec58:	add	r2, r2, r1, lsl #1
   1ec5c:	cmp	r0, r2
   1ec60:	blt	1f334 <__assert_fail@plt+0xde3c>
   1ec64:	mov	r1, r8
   1ec68:	mov	r0, r4
   1ec6c:	bl	19a1c <__assert_fail@plt+0x8524>
   1ec70:	cmp	r0, #0
   1ec74:	str	r0, [sp, #84]	; 0x54
   1ec78:	bne	1f1d0 <__assert_fail@plt+0xdcd8>
   1ec7c:	ldr	r2, [r5, #4]
   1ec80:	add	r7, r7, #1
   1ec84:	cmp	r7, r2
   1ec88:	bge	1f04c <__assert_fail@plt+0xdb54>
   1ec8c:	ldr	r3, [r5, #8]
   1ec90:	ldr	r1, [r6, #28]
   1ec94:	ldr	r3, [r3, r7, lsl #2]
   1ec98:	add	r3, r3, r3, lsl #1
   1ec9c:	adds	r8, r1, r3, lsl #2
   1eca0:	beq	1ecb0 <__assert_fail@plt+0xd7b8>
   1eca4:	ldr	r1, [r8, #4]
   1eca8:	cmp	r1, #0
   1ecac:	bne	1ec50 <__assert_fail@plt+0xd758>
   1ecb0:	mov	r3, #0
   1ecb4:	str	r3, [sp, #84]	; 0x54
   1ecb8:	b	1ec80 <__assert_fail@plt+0xd788>
   1ecbc:	ldr	r4, [sp, #32]
   1ecc0:	mov	r3, #0
   1ecc4:	mov	r0, r3
   1ecc8:	ldr	ip, [r4, #108]	; 0x6c
   1eccc:	mov	r3, ip
   1ecd0:	cmp	r0, r3
   1ecd4:	bge	1ed30 <__assert_fail@plt+0xd838>
   1ecd8:	add	r2, r0, r3
   1ecdc:	ldr	lr, [r4, #116]	; 0x74
   1ece0:	add	r2, r2, r2, lsr #31
   1ece4:	asr	r2, r2, #1
   1ece8:	add	r1, r2, r2, lsl #1
   1ecec:	add	r1, lr, r1, lsl #3
   1ecf0:	ldr	r1, [r1, #4]
   1ecf4:	cmp	sl, r1
   1ecf8:	ble	1ed20 <__assert_fail@plt+0xd828>
   1ecfc:	b	1f038 <__assert_fail@plt+0xdb40>
   1ed00:	asr	r3, r3, #1
   1ed04:	mov	r5, r3
   1ed08:	add	r1, r3, r3, lsl #1
   1ed0c:	add	r1, lr, r1, lsl #3
   1ed10:	ldr	r1, [r1, #4]
   1ed14:	cmp	sl, r1
   1ed18:	bgt	1f040 <__assert_fail@plt+0xdb48>
   1ed1c:	mov	r2, r3
   1ed20:	add	r3, r2, r0
   1ed24:	cmp	r2, r0
   1ed28:	add	r3, r3, r3, lsr #31
   1ed2c:	bgt	1ed00 <__assert_fail@plt+0xd808>
   1ed30:	cmp	ip, r0
   1ed34:	str	r0, [sp, #40]	; 0x28
   1ed38:	ble	1f028 <__assert_fail@plt+0xdb30>
   1ed3c:	ldr	r3, [sp, #32]
   1ed40:	add	r2, r0, r0, lsl #1
   1ed44:	ldr	r3, [r3, #116]	; 0x74
   1ed48:	lsl	r2, r2, #3
   1ed4c:	add	r3, r3, r2
   1ed50:	str	r2, [sp, #56]	; 0x38
   1ed54:	ldr	r3, [r3, #4]
   1ed58:	cmp	sl, r3
   1ed5c:	bne	1f028 <__assert_fail@plt+0xdb30>
   1ed60:	ldr	r3, [sp, #40]	; 0x28
   1ed64:	cmn	r3, #1
   1ed68:	beq	1f028 <__assert_fail@plt+0xdb30>
   1ed6c:	ldr	r3, [sp, #20]
   1ed70:	ldr	r2, [sp, #32]
   1ed74:	ldr	r0, [r3, #4]
   1ed78:	mov	r3, #0
   1ed7c:	cmp	r0, r3
   1ed80:	str	r3, [sp, #84]	; 0x54
   1ed84:	ldr	r8, [r2, #84]	; 0x54
   1ed88:	ble	1f028 <__assert_fail@plt+0xdb30>
   1ed8c:	str	r3, [sp, #16]
   1ed90:	add	r3, fp, #24
   1ed94:	str	r3, [sp, #44]	; 0x2c
   1ed98:	add	r3, fp, #20
   1ed9c:	str	r3, [sp, #48]	; 0x30
   1eda0:	b	1edc0 <__assert_fail@plt+0xd8c8>
   1eda4:	cmp	r3, #4
   1eda8:	beq	1edfc <__assert_fail@plt+0xd904>
   1edac:	ldr	r3, [sp, #16]
   1edb0:	add	r3, r3, #1
   1edb4:	cmp	r3, r0
   1edb8:	str	r3, [sp, #16]
   1edbc:	bge	1f018 <__assert_fail@plt+0xdb20>
   1edc0:	ldr	r3, [sp, #20]
   1edc4:	ldr	ip, [sp, #16]
   1edc8:	ldr	r2, [fp, #8]
   1edcc:	ldr	r1, [r3, #8]
   1edd0:	ldr	r3, [r8]
   1edd4:	ldr	r6, [r1, ip, lsl #2]
   1edd8:	cmp	r6, r2
   1eddc:	add	r3, r3, r6, lsl #3
   1ede0:	ldrb	r3, [r3, #4]
   1ede4:	bne	1eda4 <__assert_fail@plt+0xd8ac>
   1ede8:	ldr	r2, [fp, #12]
   1edec:	cmp	sl, r2
   1edf0:	beq	1edac <__assert_fail@plt+0xd8b4>
   1edf4:	cmp	r3, #4
   1edf8:	bne	1edac <__assert_fail@plt+0xd8b4>
   1edfc:	ldr	r3, [sp, #32]
   1ee00:	ldr	r2, [sp, #56]	; 0x38
   1ee04:	ldr	r4, [sp, #40]	; 0x28
   1ee08:	ldr	r7, [r3, #116]	; 0x74
   1ee0c:	add	r3, r6, r6, lsl #1
   1ee10:	add	r7, r7, r2
   1ee14:	lsl	r3, r3, #2
   1ee18:	str	r3, [sp, #28]
   1ee1c:	lsl	r3, r6, #2
   1ee20:	str	r3, [sp, #24]
   1ee24:	mov	r5, r2
   1ee28:	b	1ee44 <__assert_fail@plt+0xd94c>
   1ee2c:	ldrb	r3, [r7, #20]
   1ee30:	add	r4, r4, #1
   1ee34:	add	r5, r5, #24
   1ee38:	cmp	r3, #0
   1ee3c:	add	r7, r7, #24
   1ee40:	beq	1f1f4 <__assert_fail@plt+0xdcfc>
   1ee44:	ldr	r3, [r7]
   1ee48:	cmp	r6, r3
   1ee4c:	bne	1ee2c <__assert_fail@plt+0xd934>
   1ee50:	ldr	r3, [r7, #8]
   1ee54:	ldr	r9, [r7, #12]
   1ee58:	sub	r9, r9, r3
   1ee5c:	cmp	r9, #0
   1ee60:	add	r9, sl, r9
   1ee64:	ldreq	r3, [r8, #20]
   1ee68:	ldreq	r2, [sp, #28]
   1ee6c:	ldrne	r3, [r8, #12]
   1ee70:	addeq	r3, r3, r2
   1ee74:	ldrne	r2, [sp, #24]
   1ee78:	ldreq	r3, [r3, #8]
   1ee7c:	ldrne	ip, [r3, r2]
   1ee80:	ldreq	ip, [r3]
   1ee84:	ldr	r3, [fp, #12]
   1ee88:	cmp	r9, r3
   1ee8c:	bgt	1ee2c <__assert_fail@plt+0xd934>
   1ee90:	ldr	r3, [fp]
   1ee94:	ldr	r3, [r3, r9, lsl #2]
   1ee98:	cmp	r3, #0
   1ee9c:	beq	1ee2c <__assert_fail@plt+0xd934>
   1eea0:	ldr	r0, [r3, #8]
   1eea4:	cmp	r0, #0
   1eea8:	ble	1ee2c <__assert_fail@plt+0xd934>
   1eeac:	ldr	lr, [r3, #12]
   1eeb0:	sub	r0, r0, #1
   1eeb4:	mov	r1, #0
   1eeb8:	cmp	r1, r0
   1eebc:	bcs	1eef8 <__assert_fail@plt+0xda00>
   1eec0:	add	r2, r1, r0
   1eec4:	lsr	r2, r2, #1
   1eec8:	ldr	r3, [lr, r2, lsl #2]
   1eecc:	cmp	r3, ip
   1eed0:	bge	1eee8 <__assert_fail@plt+0xd9f0>
   1eed4:	b	1f1e0 <__assert_fail@plt+0xdce8>
   1eed8:	ldr	r0, [lr, r3, lsl #2]
   1eedc:	cmp	ip, r0
   1eee0:	bgt	1f1e8 <__assert_fail@plt+0xdcf0>
   1eee4:	mov	r2, r3
   1eee8:	add	r3, r1, r2
   1eeec:	cmp	r1, r2
   1eef0:	lsr	r3, r3, #1
   1eef4:	bcc	1eed8 <__assert_fail@plt+0xd9e0>
   1eef8:	ldr	r3, [lr, r1, lsl #2]
   1eefc:	cmp	ip, r3
   1ef00:	bne	1ee2c <__assert_fail@plt+0xd934>
   1ef04:	str	r9, [sp, #8]
   1ef08:	stm	sp, {sl, ip}
   1ef0c:	mov	r3, r6
   1ef10:	ldr	r2, [sp, #44]	; 0x2c
   1ef14:	ldr	r1, [sp, #48]	; 0x30
   1ef18:	ldr	r0, [sp, #32]
   1ef1c:	bl	1d9e8 <__assert_fail@plt+0xc4f0>
   1ef20:	cmp	r0, #0
   1ef24:	bne	1ee2c <__assert_fail@plt+0xd934>
   1ef28:	ldr	r3, [sp, #84]	; 0x54
   1ef2c:	cmp	r3, #0
   1ef30:	beq	1f2dc <__assert_fail@plt+0xdde4>
   1ef34:	mov	r1, r4
   1ef38:	add	r0, sp, #100	; 0x64
   1ef3c:	str	r6, [sp, #92]	; 0x5c
   1ef40:	str	sl, [sp, #96]	; 0x60
   1ef44:	bl	19498 <__assert_fail@plt+0x7fa0>
   1ef48:	cmp	r0, #0
   1ef4c:	beq	1f59c <__assert_fail@plt+0xe0a4>
   1ef50:	ldr	r3, [sp, #84]	; 0x54
   1ef54:	ldr	r2, [sp, #36]	; 0x24
   1ef58:	add	r1, sp, #84	; 0x54
   1ef5c:	ldr	r0, [sp, #32]
   1ef60:	ldr	r3, [r3, r2]
   1ef64:	str	r3, [sp, #52]	; 0x34
   1ef68:	bl	1f5e4 <__assert_fail@plt+0xe0ec>
   1ef6c:	subs	ip, r0, #0
   1ef70:	bne	1f308 <__assert_fail@plt+0xde10>
   1ef74:	ldr	r7, [fp, #4]
   1ef78:	cmp	r7, #0
   1ef7c:	beq	1f200 <__assert_fail@plt+0xdd08>
   1ef80:	cmp	sl, #0
   1ef84:	ldr	r9, [sp, #84]	; 0x54
   1ef88:	blt	1f204 <__assert_fail@plt+0xdd0c>
   1ef8c:	str	r4, [sp, #60]	; 0x3c
   1ef90:	mov	r4, ip
   1ef94:	b	1eff8 <__assert_fail@plt+0xdb00>
   1ef98:	ldr	ip, [r9]
   1ef9c:	cmp	ip, #0
   1efa0:	add	r2, ip, #4
   1efa4:	beq	1efe4 <__assert_fail@plt+0xdaec>
   1efa8:	bl	198d0 <__assert_fail@plt+0x83d8>
   1efac:	add	r2, sp, #72	; 0x48
   1efb0:	mov	r1, r8
   1efb4:	mov	ip, r0
   1efb8:	cmp	ip, #0
   1efbc:	add	r0, sp, #68	; 0x44
   1efc0:	str	ip, [sp, #68]	; 0x44
   1efc4:	bne	1f308 <__assert_fail@plt+0xde10>
   1efc8:	bl	1e3c8 <__assert_fail@plt+0xced0>
   1efcc:	str	r0, [r7]
   1efd0:	ldr	r0, [sp, #80]	; 0x50
   1efd4:	bl	14214 <__assert_fail@plt+0x2d1c>
   1efd8:	ldr	ip, [sp, #68]	; 0x44
   1efdc:	cmp	ip, #0
   1efe0:	bne	1f308 <__assert_fail@plt+0xde10>
   1efe4:	add	r4, r4, #1
   1efe8:	cmp	sl, r4
   1efec:	add	r7, r7, #4
   1eff0:	add	r9, r9, #4
   1eff4:	blt	1f5a4 <__assert_fail@plt+0xe0ac>
   1eff8:	ldr	r2, [r7]
   1effc:	add	r0, sp, #72	; 0x48
   1f000:	cmp	r2, #0
   1f004:	add	r1, r2, #4
   1f008:	bne	1ef98 <__assert_fail@plt+0xdaa0>
   1f00c:	ldr	r2, [r9]
   1f010:	str	r2, [r7]
   1f014:	b	1efe4 <__assert_fail@plt+0xdaec>
   1f018:	ldr	r3, [sp, #84]	; 0x54
   1f01c:	cmp	r3, #0
   1f020:	movne	r3, #0
   1f024:	bne	1f318 <__assert_fail@plt+0xde20>
   1f028:	mov	r3, #0
   1f02c:	mov	r0, r3
   1f030:	add	sp, sp, #116	; 0x74
   1f034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f038:	mov	r5, r2
   1f03c:	mov	r2, r3
   1f040:	add	r0, r5, #1
   1f044:	mov	r3, r2
   1f048:	b	1ecd0 <__assert_fail@plt+0xd7d8>
   1f04c:	ldr	r8, [sp, #24]
   1f050:	ldr	sl, [sp, #28]
   1f054:	ldr	r3, [r8, #8]
   1f058:	cmp	r3, #0
   1f05c:	beq	1f0d8 <__assert_fail@plt+0xdbe0>
   1f060:	ldr	r4, [r9, #32]
   1f064:	cmp	r4, #0
   1f068:	beq	1f0d8 <__assert_fail@plt+0xdbe0>
   1f06c:	ldr	r2, [r5, #4]
   1f070:	add	r3, r3, r4
   1f074:	ldr	r4, [r5]
   1f078:	add	r2, r3, r2
   1f07c:	cmp	r2, r4
   1f080:	bgt	1f5c0 <__assert_fail@plt+0xe0c8>
   1f084:	ldr	r2, [sp, #16]
   1f088:	ldr	r1, [sp, #20]
   1f08c:	mov	r0, r5
   1f090:	bl	19644 <__assert_fail@plt+0x814c>
   1f094:	cmp	r0, #0
   1f098:	mov	r3, r0
   1f09c:	str	r0, [sp, #64]	; 0x40
   1f0a0:	bne	1ebc4 <__assert_fail@plt+0xd6cc>
   1f0a4:	ldr	r1, [fp, #20]
   1f0a8:	cmp	r1, #0
   1f0ac:	bne	1f0ec <__assert_fail@plt+0xdbf4>
   1f0b0:	mov	r2, r5
   1f0b4:	mov	r1, r6
   1f0b8:	add	r0, sp, #64	; 0x40
   1f0bc:	ldr	r4, [fp]
   1f0c0:	bl	1e3c8 <__assert_fail@plt+0xced0>
   1f0c4:	ldr	r3, [sp, #64]	; 0x40
   1f0c8:	cmp	r3, #0
   1f0cc:	str	r0, [r4, sl, lsl #2]
   1f0d0:	beq	1eba0 <__assert_fail@plt+0xd6a8>
   1f0d4:	b	1ebc4 <__assert_fail@plt+0xd6cc>
   1f0d8:	ldr	r1, [fp, #20]
   1f0dc:	mov	r3, #0
   1f0e0:	cmp	r1, #0
   1f0e4:	str	r3, [sp, #64]	; 0x40
   1f0e8:	beq	1f0b0 <__assert_fail@plt+0xdbb8>
   1f0ec:	ldr	r3, [sp, #32]
   1f0f0:	ldr	r3, [r3, #116]	; 0x74
   1f0f4:	str	r3, [sp, #16]
   1f0f8:	ble	1f1c4 <__assert_fail@plt+0xdccc>
   1f0fc:	mov	r9, #0
   1f100:	ldr	r3, [fp, #24]
   1f104:	ldr	ip, [sp, #16]
   1f108:	ldr	r3, [r3, r9, lsl #2]
   1f10c:	add	r3, r3, r3, lsl #1
   1f110:	add	r2, ip, r3, lsl #3
   1f114:	ldr	r0, [r2, #8]
   1f118:	cmp	sl, r0
   1f11c:	ble	1f1b8 <__assert_fail@plt+0xdcc0>
   1f120:	ldr	r0, [r2, #4]
   1f124:	cmp	sl, r0
   1f128:	bgt	1f1b8 <__assert_fail@plt+0xdcc0>
   1f12c:	ldr	r0, [ip, r3, lsl #3]
   1f130:	ldr	r2, [r2, #12]
   1f134:	ldr	r3, [r6]
   1f138:	cmp	sl, r2
   1f13c:	ldr	r7, [r3, r0, lsl #3]
   1f140:	beq	1f370 <__assert_fail@plt+0xde78>
   1f144:	ldr	r0, [r5, #4]
   1f148:	cmp	r0, #0
   1f14c:	ble	1f1b8 <__assert_fail@plt+0xdcc0>
   1f150:	mov	r4, #0
   1f154:	b	1f164 <__assert_fail@plt+0xdc6c>
   1f158:	cmp	r4, r0
   1f15c:	bge	1f1b4 <__assert_fail@plt+0xdcbc>
   1f160:	ldr	r3, [r6]
   1f164:	ldr	r2, [r5, #8]
   1f168:	ldr	r1, [r2, r4, lsl #2]
   1f16c:	add	r4, r4, #1
   1f170:	add	r2, r3, r1, lsl #3
   1f174:	ldrb	r2, [r2, #4]
   1f178:	sub	r2, r2, #8
   1f17c:	cmp	r2, #1
   1f180:	bhi	1f158 <__assert_fail@plt+0xdc60>
   1f184:	ldr	r3, [r3, r1, lsl #3]
   1f188:	cmp	r7, r3
   1f18c:	bne	1f158 <__assert_fail@plt+0xdc60>
   1f190:	ldr	r3, [sp, #20]
   1f194:	mov	r2, r5
   1f198:	mov	r0, r6
   1f19c:	bl	1dcc0 <__assert_fail@plt+0xc7c8>
   1f1a0:	cmp	r0, #0
   1f1a4:	bne	1f57c <__assert_fail@plt+0xe084>
   1f1a8:	ldr	r0, [r5, #4]
   1f1ac:	cmp	r4, r0
   1f1b0:	blt	1f160 <__assert_fail@plt+0xdc68>
   1f1b4:	ldr	r1, [fp, #20]
   1f1b8:	add	r9, r9, #1
   1f1bc:	cmp	r9, r1
   1f1c0:	blt	1f100 <__assert_fail@plt+0xdc08>
   1f1c4:	mov	r3, #0
   1f1c8:	str	r3, [sp, #64]	; 0x40
   1f1cc:	b	1f0b0 <__assert_fail@plt+0xdbb8>
   1f1d0:	mov	r3, #12
   1f1d4:	mov	r0, r3
   1f1d8:	add	sp, sp, #116	; 0x74
   1f1dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1e0:	mov	r3, r2
   1f1e4:	mov	r2, r0
   1f1e8:	add	r1, r3, #1
   1f1ec:	mov	r0, r2
   1f1f0:	b	1eeb8 <__assert_fail@plt+0xd9c0>
   1f1f4:	ldr	r3, [sp, #20]
   1f1f8:	ldr	r0, [r3, #4]
   1f1fc:	b	1edac <__assert_fail@plt+0xd8b4>
   1f200:	ldr	r9, [sp, #84]	; 0x54
   1f204:	ldr	lr, [sp, #104]	; 0x68
   1f208:	ldr	r3, [sp, #36]	; 0x24
   1f20c:	ldr	r2, [sp, #52]	; 0x34
   1f210:	cmp	lr, #0
   1f214:	str	r2, [r9, r3]
   1f218:	ble	1f27c <__assert_fail@plt+0xdd84>
   1f21c:	sub	r7, lr, #1
   1f220:	ldr	ip, [sp, #108]	; 0x6c
   1f224:	mov	r0, r7
   1f228:	mov	r1, #0
   1f22c:	cmp	r1, r0
   1f230:	bcs	1f26c <__assert_fail@plt+0xdd74>
   1f234:	add	r2, r1, r0
   1f238:	lsr	r2, r2, #1
   1f23c:	ldr	r3, [ip, r2, lsl #2]
   1f240:	cmp	r4, r3
   1f244:	ble	1f25c <__assert_fail@plt+0xdd64>
   1f248:	b	1f28c <__assert_fail@plt+0xdd94>
   1f24c:	ldr	r0, [ip, r3, lsl #2]
   1f250:	cmp	r4, r0
   1f254:	bgt	1f294 <__assert_fail@plt+0xdd9c>
   1f258:	mov	r2, r3
   1f25c:	add	r3, r2, r1
   1f260:	cmp	r2, r1
   1f264:	lsr	r3, r3, #1
   1f268:	bhi	1f24c <__assert_fail@plt+0xdd54>
   1f26c:	ldr	r2, [ip, r1, lsl #2]
   1f270:	add	r3, ip, r1, lsl #2
   1f274:	cmp	r4, r2
   1f278:	beq	1f2a0 <__assert_fail@plt+0xdda8>
   1f27c:	ldr	r3, [sp, #32]
   1f280:	ldr	r7, [r3, #116]	; 0x74
   1f284:	add	r7, r7, r5
   1f288:	b	1ee2c <__assert_fail@plt+0xd934>
   1f28c:	mov	r3, r2
   1f290:	mov	r2, r0
   1f294:	add	r1, r3, #1
   1f298:	mov	r0, r2
   1f29c:	b	1f22c <__assert_fail@plt+0xdd34>
   1f2a0:	cmp	lr, r1
   1f2a4:	movgt	lr, #0
   1f2a8:	movle	lr, #1
   1f2ac:	orrs	r2, lr, r1, lsr #31
   1f2b0:	bne	1f27c <__assert_fail@plt+0xdd84>
   1f2b4:	cmp	r1, r7
   1f2b8:	str	r7, [sp, #104]	; 0x68
   1f2bc:	bge	1f27c <__assert_fail@plt+0xdd84>
   1f2c0:	ldr	r2, [r3, #4]
   1f2c4:	add	r1, r1, #1
   1f2c8:	str	r2, [r3], #4
   1f2cc:	ldr	r2, [sp, #104]	; 0x68
   1f2d0:	cmp	r1, r2
   1f2d4:	blt	1f2c0 <__assert_fail@plt+0xddc8>
   1f2d8:	b	1f27c <__assert_fail@plt+0xdd84>
   1f2dc:	mov	ip, fp
   1f2e0:	add	lr, sp, #84	; 0x54
   1f2e4:	ldm	ip!, {r0, r1, r2, r3}
   1f2e8:	stmia	lr!, {r0, r1, r2, r3}
   1f2ec:	ldm	ip, {r0, r1, r2}
   1f2f0:	stm	lr, {r0, r1, r2}
   1f2f4:	mov	r1, ip
   1f2f8:	add	r0, sp, #100	; 0x64
   1f2fc:	bl	19858 <__assert_fail@plt+0x8360>
   1f300:	subs	ip, r0, #0
   1f304:	beq	1ef34 <__assert_fail@plt+0xda3c>
   1f308:	mov	r3, ip
   1f30c:	ldr	r2, [sp, #84]	; 0x54
   1f310:	cmp	r2, #0
   1f314:	beq	1ebc4 <__assert_fail@plt+0xd6cc>
   1f318:	ldr	r0, [sp, #108]	; 0x6c
   1f31c:	str	r3, [sp, #16]
   1f320:	bl	14214 <__assert_fail@plt+0x2d1c>
   1f324:	ldr	r3, [sp, #16]
   1f328:	mov	r0, r3
   1f32c:	add	sp, sp, #116	; 0x74
   1f330:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f334:	add	r2, r1, r0
   1f338:	ldr	r0, [r9, #36]	; 0x24
   1f33c:	lsl	r1, r2, #3
   1f340:	lsl	sl, r2, #1
   1f344:	bl	2a7bc <__assert_fail@plt+0x192c4>
   1f348:	cmp	r0, #0
   1f34c:	beq	1f1d0 <__assert_fail@plt+0xdcd8>
   1f350:	str	r0, [r9, #36]	; 0x24
   1f354:	str	sl, [r9, #28]
   1f358:	b	1ec64 <__assert_fail@plt+0xd76c>
   1f35c:	cmp	r3, #0
   1f360:	strne	r8, [sp, #20]
   1f364:	bne	1f0b0 <__assert_fail@plt+0xdbb8>
   1f368:	str	r3, [sp, #20]
   1f36c:	b	1eb94 <__assert_fail@plt+0xd69c>
   1f370:	ldr	r2, [r5, #4]
   1f374:	cmp	r2, #0
   1f378:	mov	r1, r2
   1f37c:	str	r2, [sp, #24]
   1f380:	ble	1f1b4 <__assert_fail@plt+0xdcbc>
   1f384:	ldr	lr, [r5, #8]
   1f388:	mvn	r4, #0
   1f38c:	mov	r2, lr
   1f390:	add	r1, lr, r1, lsl #2
   1f394:	mov	r8, r4
   1f398:	str	r6, [sp, #28]
   1f39c:	b	1f3bc <__assert_fail@plt+0xdec4>
   1f3a0:	cmp	ip, #9
   1f3a4:	bne	1f3b4 <__assert_fail@plt+0xdebc>
   1f3a8:	ldr	ip, [r6]
   1f3ac:	cmp	r7, ip
   1f3b0:	moveq	r4, r0
   1f3b4:	cmp	r1, r2
   1f3b8:	beq	1f3e4 <__assert_fail@plt+0xdeec>
   1f3bc:	ldr	r0, [r2], #4
   1f3c0:	add	r6, r3, r0, lsl #3
   1f3c4:	ldrb	ip, [r6, #4]
   1f3c8:	cmp	ip, #8
   1f3cc:	bne	1f3a0 <__assert_fail@plt+0xdea8>
   1f3d0:	ldr	ip, [r3, r0, lsl #3]
   1f3d4:	cmp	r7, ip
   1f3d8:	moveq	r8, r0
   1f3dc:	cmp	r1, r2
   1f3e0:	bne	1f3bc <__assert_fail@plt+0xdec4>
   1f3e4:	cmp	r8, #0
   1f3e8:	ldr	r6, [sp, #28]
   1f3ec:	mov	r3, r8
   1f3f0:	blt	1f5b0 <__assert_fail@plt+0xe0b8>
   1f3f4:	mov	r1, r8
   1f3f8:	ldr	r3, [sp, #20]
   1f3fc:	mov	r2, r5
   1f400:	mov	r0, r6
   1f404:	bl	1dcc0 <__assert_fail@plt+0xc7c8>
   1f408:	cmp	r0, #0
   1f40c:	bne	1f57c <__assert_fail@plt+0xe084>
   1f410:	cmp	r4, #0
   1f414:	blt	1f1b4 <__assert_fail@plt+0xdcbc>
   1f418:	ldr	r3, [r5, #4]
   1f41c:	cmp	r3, #0
   1f420:	ble	1f1b4 <__assert_fail@plt+0xdcbc>
   1f424:	ldr	lr, [r5, #8]
   1f428:	str	sl, [sp, #28]
   1f42c:	ldr	sl, [sp, #20]
   1f430:	str	r9, [sp, #24]
   1f434:	mov	r7, #0
   1f438:	mov	r9, r3
   1f43c:	ldr	r1, [lr, r7, lsl #2]
   1f440:	ldr	r3, [r6, #28]
   1f444:	add	r8, r1, r1, lsl #1
   1f448:	lsl	r8, r8, #2
   1f44c:	add	r3, r3, r8
   1f450:	ldr	ip, [r3, #4]
   1f454:	cmp	ip, #0
   1f458:	ble	1f4b4 <__assert_fail@plt+0xdfbc>
   1f45c:	ldr	lr, [r3, #8]
   1f460:	sub	ip, ip, #1
   1f464:	mov	r0, #0
   1f468:	cmp	r0, ip
   1f46c:	bcs	1f4a8 <__assert_fail@plt+0xdfb0>
   1f470:	add	r2, r0, ip
   1f474:	lsr	r2, r2, #1
   1f478:	ldr	r3, [lr, r2, lsl #2]
   1f47c:	cmp	r4, r3
   1f480:	ble	1f498 <__assert_fail@plt+0xdfa0>
   1f484:	b	1f554 <__assert_fail@plt+0xe05c>
   1f488:	ldr	ip, [lr, r3, lsl #2]
   1f48c:	cmp	r4, ip
   1f490:	bgt	1f55c <__assert_fail@plt+0xe064>
   1f494:	mov	r2, r3
   1f498:	add	r3, r2, r0
   1f49c:	cmp	r2, r0
   1f4a0:	lsr	r3, r3, #1
   1f4a4:	bhi	1f488 <__assert_fail@plt+0xdf90>
   1f4a8:	ldr	r3, [lr, r0, lsl #2]
   1f4ac:	cmp	r4, r3
   1f4b0:	beq	1f540 <__assert_fail@plt+0xe048>
   1f4b4:	ldr	r3, [r6, #24]
   1f4b8:	add	r8, r3, r8
   1f4bc:	ldr	ip, [r8, #4]
   1f4c0:	cmp	ip, #0
   1f4c4:	ble	1f520 <__assert_fail@plt+0xe028>
   1f4c8:	ldr	lr, [r8, #8]
   1f4cc:	sub	ip, ip, #1
   1f4d0:	mov	r0, #0
   1f4d4:	cmp	r0, ip
   1f4d8:	bcs	1f514 <__assert_fail@plt+0xe01c>
   1f4dc:	add	r2, r0, ip
   1f4e0:	lsr	r2, r2, #1
   1f4e4:	ldr	r3, [lr, r2, lsl #2]
   1f4e8:	cmp	r3, r4
   1f4ec:	bge	1f504 <__assert_fail@plt+0xe00c>
   1f4f0:	b	1f568 <__assert_fail@plt+0xe070>
   1f4f4:	ldr	ip, [lr, r3, lsl #2]
   1f4f8:	cmp	r4, ip
   1f4fc:	bgt	1f570 <__assert_fail@plt+0xe078>
   1f500:	mov	r2, r3
   1f504:	add	r3, r0, r2
   1f508:	cmp	r0, r2
   1f50c:	lsr	r3, r3, #1
   1f510:	bcc	1f4f4 <__assert_fail@plt+0xdffc>
   1f514:	ldr	r3, [lr, r0, lsl #2]
   1f518:	cmp	r4, r3
   1f51c:	beq	1f540 <__assert_fail@plt+0xe048>
   1f520:	mov	r3, sl
   1f524:	mov	r2, r5
   1f528:	mov	r0, r6
   1f52c:	bl	1dcc0 <__assert_fail@plt+0xc7c8>
   1f530:	cmp	r0, #0
   1f534:	bne	1f57c <__assert_fail@plt+0xe084>
   1f538:	ldr	r9, [r5, #4]
   1f53c:	sub	r7, r7, #1
   1f540:	add	r7, r7, #1
   1f544:	cmp	r7, r9
   1f548:	bge	1f58c <__assert_fail@plt+0xe094>
   1f54c:	ldr	lr, [r5, #8]
   1f550:	b	1f43c <__assert_fail@plt+0xdf44>
   1f554:	mov	r3, r2
   1f558:	mov	r2, ip
   1f55c:	add	r0, r3, #1
   1f560:	mov	ip, r2
   1f564:	b	1f468 <__assert_fail@plt+0xdf70>
   1f568:	mov	r3, r2
   1f56c:	mov	r2, ip
   1f570:	add	r0, r3, #1
   1f574:	mov	ip, r2
   1f578:	b	1f4d4 <__assert_fail@plt+0xdfdc>
   1f57c:	mov	r3, r0
   1f580:	mov	r0, r3
   1f584:	add	sp, sp, #116	; 0x74
   1f588:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f58c:	ldr	r9, [sp, #24]
   1f590:	ldr	sl, [sp, #28]
   1f594:	ldr	r1, [fp, #20]
   1f598:	b	1f1b8 <__assert_fail@plt+0xdcc0>
   1f59c:	mov	r3, #12
   1f5a0:	b	1f30c <__assert_fail@plt+0xde14>
   1f5a4:	ldr	r4, [sp, #60]	; 0x3c
   1f5a8:	ldr	r9, [sp, #84]	; 0x54
   1f5ac:	b	1f204 <__assert_fail@plt+0xdd0c>
   1f5b0:	cmp	r4, #0
   1f5b4:	ldrge	r3, [sp, #24]
   1f5b8:	bge	1f428 <__assert_fail@plt+0xdf30>
   1f5bc:	b	1f1b4 <__assert_fail@plt+0xdcbc>
   1f5c0:	add	r4, r3, r4
   1f5c4:	ldr	r0, [r5, #8]
   1f5c8:	lsl	r1, r4, #2
   1f5cc:	bl	2a7bc <__assert_fail@plt+0x192c4>
   1f5d0:	cmp	r0, #0
   1f5d4:	beq	1f1d0 <__assert_fail@plt+0xdcd8>
   1f5d8:	str	r0, [r5, #8]
   1f5dc:	str	r4, [r5]
   1f5e0:	b	1f084 <__assert_fail@plt+0xdb8c>
   1f5e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f5e8:	sub	sp, sp, #68	; 0x44
   1f5ec:	mov	r4, #1
   1f5f0:	mov	r7, r0
   1f5f4:	mov	r0, #4
   1f5f8:	ldr	fp, [r1, #12]
   1f5fc:	mov	r9, r1
   1f600:	ldr	r5, [r1, #8]
   1f604:	str	r4, [sp, #52]	; 0x34
   1f608:	str	r4, [sp, #56]	; 0x38
   1f60c:	bl	2a790 <__assert_fail@plt+0x19298>
   1f610:	lsl	r3, fp, #2
   1f614:	str	r3, [sp, #20]
   1f618:	cmp	r0, #0
   1f61c:	str	r0, [sp, #60]	; 0x3c
   1f620:	beq	1fa7c <__assert_fail@plt+0xe584>
   1f624:	add	r3, sp, #52	; 0x34
   1f628:	str	r5, [r0]
   1f62c:	mov	r2, fp
   1f630:	mov	r1, r9
   1f634:	mov	r0, r7
   1f638:	bl	1eb44 <__assert_fail@plt+0xd64c>
   1f63c:	subs	r3, r0, #0
   1f640:	str	r3, [sp, #40]	; 0x28
   1f644:	bne	1fa8c <__assert_fail@plt+0xe594>
   1f648:	cmp	fp, #0
   1f64c:	ble	1f904 <__assert_fail@plt+0xe40c>
   1f650:	str	r3, [sp, #36]	; 0x24
   1f654:	add	r3, r9, #24
   1f658:	str	r3, [sp, #28]
   1f65c:	add	r3, r9, #20
   1f660:	str	r3, [sp, #32]
   1f664:	ldr	r3, [sp, #20]
   1f668:	mov	sl, r9
   1f66c:	str	r4, [sp, #44]	; 0x2c
   1f670:	ldr	r0, [sl]
   1f674:	ldr	r3, [r0, r3]
   1f678:	cmp	r3, #0
   1f67c:	movne	r3, #0
   1f680:	ldreq	r3, [sp, #36]	; 0x24
   1f684:	addeq	r3, r3, #1
   1f688:	mov	r2, r3
   1f68c:	str	r3, [sp, #36]	; 0x24
   1f690:	ldr	r3, [r7, #120]	; 0x78
   1f694:	cmp	r2, r3
   1f698:	bgt	1fa94 <__assert_fail@plt+0xe59c>
   1f69c:	mov	r2, #0
   1f6a0:	ldr	r3, [r7, #100]	; 0x64
   1f6a4:	str	r2, [sp, #56]	; 0x38
   1f6a8:	ldr	r2, [sp, #20]
   1f6ac:	sub	fp, fp, #1
   1f6b0:	add	r3, r3, r2
   1f6b4:	ldr	r6, [r3, #-4]
   1f6b8:	cmp	r6, #0
   1f6bc:	beq	1f8d4 <__assert_fail@plt+0xe3dc>
   1f6c0:	ldr	r3, [r6, #20]
   1f6c4:	ldr	r2, [r7, #84]	; 0x54
   1f6c8:	cmp	r3, #0
   1f6cc:	mov	r1, r2
   1f6d0:	str	r2, [sp, #16]
   1f6d4:	ble	1f8d4 <__assert_fail@plt+0xe3dc>
   1f6d8:	ldr	r2, [r6, #24]
   1f6dc:	ldr	r3, [r1]
   1f6e0:	mov	r4, #0
   1f6e4:	ldr	r5, [r2]
   1f6e8:	lsl	r8, r5, #3
   1f6ec:	add	r3, r3, r8
   1f6f0:	ldrb	r1, [r3, #6]
   1f6f4:	ldrb	r2, [r3, #4]
   1f6f8:	tst	r1, #16
   1f6fc:	bne	1f950 <__assert_fail@plt+0xe458>
   1f700:	ldr	r1, [r7, #4]
   1f704:	sub	r2, r2, #1
   1f708:	ldrb	r1, [r1, fp]
   1f70c:	cmp	r2, #6
   1f710:	ldrls	pc, [pc, r2, lsl #2]
   1f714:	b	1f918 <__assert_fail@plt+0xe420>
   1f718:	andeq	pc, r1, ip, lsl #18
   1f71c:	andeq	pc, r1, r8, lsl r9	; <UNPREDICTABLE>
   1f720:	andeq	pc, r1, r8, lsr #17
   1f724:	andeq	pc, r1, r8, lsl r9	; <UNPREDICTABLE>
   1f728:	andeq	pc, r1, ip, lsr r7	; <UNPREDICTABLE>
   1f72c:	andeq	pc, r1, r8, lsl r9	; <UNPREDICTABLE>
   1f730:	andeq	pc, r1, r4, lsr r7	; <UNPREDICTABLE>
   1f734:	tst	r1, #128	; 0x80
   1f738:	bne	1f918 <__assert_fail@plt+0xe420>
   1f73c:	cmp	r1, #10
   1f740:	beq	1fa60 <__assert_fail@plt+0xe568>
   1f744:	cmp	r1, #0
   1f748:	bne	1f75c <__assert_fail@plt+0xe264>
   1f74c:	ldr	r2, [r7, #84]	; 0x54
   1f750:	ldr	r2, [r2, #128]	; 0x80
   1f754:	tst	r2, #128	; 0x80
   1f758:	bne	1f918 <__assert_fail@plt+0xe420>
   1f75c:	ldr	r8, [r3, #4]
   1f760:	ldr	r3, [pc, #848]	; 1fab8 <__assert_fail@plt+0xe5c0>
   1f764:	tst	r8, r3
   1f768:	beq	1f7bc <__assert_fail@plt+0xe2c4>
   1f76c:	ldr	r2, [r7, #88]	; 0x58
   1f770:	mov	r1, fp
   1f774:	mov	r0, r7
   1f778:	bl	19b60 <__assert_fail@plt+0x8668>
   1f77c:	ldr	r3, [pc, #824]	; 1fabc <__assert_fail@plt+0xe5c4>
   1f780:	and	r8, r3, r8, lsr #8
   1f784:	tst	r8, #4
   1f788:	beq	1fa4c <__assert_fail@plt+0xe554>
   1f78c:	tst	r0, #1
   1f790:	beq	1f918 <__assert_fail@plt+0xe420>
   1f794:	tst	r8, #8
   1f798:	bne	1f918 <__assert_fail@plt+0xe420>
   1f79c:	tst	r8, #32
   1f7a0:	beq	1f7ac <__assert_fail@plt+0xe2b4>
   1f7a4:	tst	r0, #2
   1f7a8:	beq	1f918 <__assert_fail@plt+0xe420>
   1f7ac:	tst	r8, #128	; 0x80
   1f7b0:	beq	1f7bc <__assert_fail@plt+0xe2c4>
   1f7b4:	tst	r0, #8
   1f7b8:	beq	1f918 <__assert_fail@plt+0xe420>
   1f7bc:	ldr	r3, [sl]
   1f7c0:	ldr	r2, [sp, #20]
   1f7c4:	ldr	r3, [r3, r2]
   1f7c8:	cmp	r3, #0
   1f7cc:	beq	1f918 <__assert_fail@plt+0xe420>
   1f7d0:	ldr	lr, [r3, #8]
   1f7d4:	ldr	r2, [sp, #16]
   1f7d8:	cmp	lr, #0
   1f7dc:	ldr	r2, [r2, #12]
   1f7e0:	ble	1f918 <__assert_fail@plt+0xe420>
   1f7e4:	ldr	r0, [r2, r5, lsl #2]
   1f7e8:	ldr	ip, [r3, #12]
   1f7ec:	sub	lr, lr, #1
   1f7f0:	mov	r1, #0
   1f7f4:	cmp	r1, lr
   1f7f8:	bcs	1f834 <__assert_fail@plt+0xe33c>
   1f7fc:	add	r2, r1, lr
   1f800:	lsr	r2, r2, #1
   1f804:	ldr	r3, [ip, r2, lsl #2]
   1f808:	cmp	r3, r0
   1f80c:	bge	1f824 <__assert_fail@plt+0xe32c>
   1f810:	b	1fa1c <__assert_fail@plt+0xe524>
   1f814:	ldr	lr, [ip, r3, lsl #2]
   1f818:	cmp	r0, lr
   1f81c:	bgt	1fa24 <__assert_fail@plt+0xe52c>
   1f820:	mov	r2, r3
   1f824:	add	r3, r2, r1
   1f828:	cmp	r2, r1
   1f82c:	lsr	r3, r3, #1
   1f830:	bhi	1f814 <__assert_fail@plt+0xe31c>
   1f834:	ldr	r3, [ip, r1, lsl #2]
   1f838:	cmp	r0, r3
   1f83c:	bne	1f918 <__assert_fail@plt+0xe420>
   1f840:	ldr	r0, [sp, #44]	; 0x2c
   1f844:	ldr	r3, [sl, #20]
   1f848:	cmp	r3, #0
   1f84c:	beq	1f87c <__assert_fail@plt+0xe384>
   1f850:	ldr	r3, [sp, #16]
   1f854:	add	r0, fp, r0
   1f858:	ldr	r2, [sp, #28]
   1f85c:	ldr	r3, [r3, #12]
   1f860:	ldr	r1, [sp, #32]
   1f864:	ldr	r3, [r3, r5, lsl #2]
   1f868:	stm	sp, {r0, r5, fp}
   1f86c:	mov	r0, r7
   1f870:	bl	1d9e8 <__assert_fail@plt+0xc4f0>
   1f874:	cmp	r0, #0
   1f878:	bne	1f918 <__assert_fail@plt+0xe420>
   1f87c:	mov	r1, r5
   1f880:	add	r0, sp, #52	; 0x34
   1f884:	bl	19498 <__assert_fail@plt+0x7fa0>
   1f888:	cmp	r0, #0
   1f88c:	bne	1f918 <__assert_fail@plt+0xe420>
   1f890:	mov	r4, #12
   1f894:	ldr	r0, [sp, #60]	; 0x3c
   1f898:	bl	14214 <__assert_fail@plt+0x2d1c>
   1f89c:	mov	r0, r4
   1f8a0:	add	sp, sp, #68	; 0x44
   1f8a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f8a8:	ldr	r2, [r3]
   1f8ac:	asr	r0, r1, #5
   1f8b0:	and	r1, r1, #31
   1f8b4:	ldr	r2, [r2, r0, lsl #2]
   1f8b8:	lsr	r1, r2, r1
   1f8bc:	tst	r1, #1
   1f8c0:	bne	1f75c <__assert_fail@plt+0xe264>
   1f8c4:	ldr	r3, [r6, #20]
   1f8c8:	add	r4, r4, #1
   1f8cc:	cmp	r4, r3
   1f8d0:	blt	1f928 <__assert_fail@plt+0xe430>
   1f8d4:	add	r3, sp, #52	; 0x34
   1f8d8:	mov	r2, fp
   1f8dc:	mov	r1, sl
   1f8e0:	mov	r0, r7
   1f8e4:	bl	1eb44 <__assert_fail@plt+0xd64c>
   1f8e8:	cmp	r0, #0
   1f8ec:	bne	1fa74 <__assert_fail@plt+0xe57c>
   1f8f0:	ldr	r3, [sp, #20]
   1f8f4:	cmp	fp, #0
   1f8f8:	sub	r3, r3, #4
   1f8fc:	str	r3, [sp, #20]
   1f900:	bne	1f670 <__assert_fail@plt+0xe178>
   1f904:	ldr	r4, [sp, #40]	; 0x28
   1f908:	b	1f894 <__assert_fail@plt+0xe39c>
   1f90c:	ldrb	r2, [r3]
   1f910:	cmp	r2, r1
   1f914:	beq	1f75c <__assert_fail@plt+0xe264>
   1f918:	ldr	r3, [r6, #20]
   1f91c:	add	r4, r4, #1
   1f920:	cmp	r4, r3
   1f924:	bge	1f8d4 <__assert_fail@plt+0xe3dc>
   1f928:	ldr	r2, [r6, #24]
   1f92c:	ldr	r3, [sp, #16]
   1f930:	ldr	r5, [r2, r4, lsl #2]
   1f934:	ldr	r3, [r3]
   1f938:	lsl	r8, r5, #3
   1f93c:	add	r3, r3, r8
   1f940:	ldrb	r1, [r3, #6]
   1f944:	ldrb	r2, [r3, #4]
   1f948:	tst	r1, #16
   1f94c:	beq	1f700 <__assert_fail@plt+0xe208>
   1f950:	ldr	r9, [r7, #84]	; 0x54
   1f954:	mov	r3, r7
   1f958:	add	r1, r9, #128	; 0x80
   1f95c:	ldr	r0, [r9]
   1f960:	str	fp, [sp]
   1f964:	ldr	ip, [sl, #12]
   1f968:	mov	r2, r5
   1f96c:	str	ip, [sp, #24]
   1f970:	bl	1b63c <__assert_fail@plt+0xa144>
   1f974:	cmp	r0, #0
   1f978:	ble	1fa44 <__assert_fail@plt+0xe54c>
   1f97c:	ldr	ip, [sp, #24]
   1f980:	add	r3, fp, r0
   1f984:	cmp	ip, r3
   1f988:	blt	1f844 <__assert_fail@plt+0xe34c>
   1f98c:	ldr	r2, [sl]
   1f990:	ldr	r3, [r2, r3, lsl #2]
   1f994:	cmp	r3, #0
   1f998:	beq	1fa08 <__assert_fail@plt+0xe510>
   1f99c:	ldr	ip, [r3, #8]
   1f9a0:	ldr	r2, [r9, #12]
   1f9a4:	cmp	ip, #0
   1f9a8:	ble	1fa08 <__assert_fail@plt+0xe510>
   1f9ac:	ldr	lr, [r2, r5, lsl #2]
   1f9b0:	ldr	r9, [r3, #12]
   1f9b4:	sub	ip, ip, #1
   1f9b8:	mov	r1, #0
   1f9bc:	cmp	r1, ip
   1f9c0:	bcs	1f9fc <__assert_fail@plt+0xe504>
   1f9c4:	add	r2, r1, ip
   1f9c8:	lsr	r2, r2, #1
   1f9cc:	ldr	r3, [r9, r2, lsl #2]
   1f9d0:	cmp	r3, lr
   1f9d4:	bge	1f9ec <__assert_fail@plt+0xe4f4>
   1f9d8:	b	1fa30 <__assert_fail@plt+0xe538>
   1f9dc:	ldr	ip, [r9, r3, lsl #2]
   1f9e0:	cmp	lr, ip
   1f9e4:	bgt	1fa38 <__assert_fail@plt+0xe540>
   1f9e8:	mov	r2, r3
   1f9ec:	add	r3, r1, r2
   1f9f0:	cmp	r1, r2
   1f9f4:	lsr	r3, r3, #1
   1f9f8:	bcc	1f9dc <__assert_fail@plt+0xe4e4>
   1f9fc:	ldr	r3, [r9, r1, lsl #2]
   1fa00:	cmp	lr, r3
   1fa04:	beq	1f844 <__assert_fail@plt+0xe34c>
   1fa08:	ldr	r3, [sp, #16]
   1fa0c:	ldr	r3, [r3]
   1fa10:	add	r3, r3, r8
   1fa14:	ldrb	r2, [r3, #4]
   1fa18:	b	1f700 <__assert_fail@plt+0xe208>
   1fa1c:	mov	r3, r2
   1fa20:	mov	r2, lr
   1fa24:	add	r1, r3, #1
   1fa28:	mov	lr, r2
   1fa2c:	b	1f7f4 <__assert_fail@plt+0xe2fc>
   1fa30:	mov	r3, r2
   1fa34:	mov	r2, ip
   1fa38:	add	r1, r3, #1
   1fa3c:	mov	ip, r2
   1fa40:	b	1f9bc <__assert_fail@plt+0xe4c4>
   1fa44:	beq	1fa08 <__assert_fail@plt+0xe510>
   1fa48:	b	1f844 <__assert_fail@plt+0xe34c>
   1fa4c:	tst	r8, #8
   1fa50:	beq	1f79c <__assert_fail@plt+0xe2a4>
   1fa54:	tst	r0, #1
   1fa58:	beq	1f79c <__assert_fail@plt+0xe2a4>
   1fa5c:	b	1f918 <__assert_fail@plt+0xe420>
   1fa60:	ldr	r2, [r7, #84]	; 0x54
   1fa64:	ldr	r2, [r2, #128]	; 0x80
   1fa68:	tst	r2, #64	; 0x40
   1fa6c:	bne	1f75c <__assert_fail@plt+0xe264>
   1fa70:	b	1f918 <__assert_fail@plt+0xe420>
   1fa74:	mov	r4, r0
   1fa78:	b	1f894 <__assert_fail@plt+0xe39c>
   1fa7c:	mov	r4, #12
   1fa80:	mov	r0, r4
   1fa84:	add	sp, sp, #68	; 0x44
   1fa88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fa8c:	mov	r4, r3
   1fa90:	b	1f894 <__assert_fail@plt+0xe39c>
   1fa94:	ldr	r2, [sp, #20]
   1fa98:	mov	r1, #0
   1fa9c:	bl	11414 <memset@plt>
   1faa0:	ldr	r0, [sp, #60]	; 0x3c
   1faa4:	ldr	r4, [sp, #40]	; 0x28
   1faa8:	bl	14214 <__assert_fail@plt+0x2d1c>
   1faac:	mov	r0, r4
   1fab0:	add	sp, sp, #68	; 0x44
   1fab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fab8:	andeq	pc, r3, r0, lsl #30
   1fabc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1fac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fac4:	sub	sp, sp, #44	; 0x2c
   1fac8:	mov	r6, r0
   1facc:	mov	fp, r1
   1fad0:	mov	r9, #0
   1fad4:	mov	r1, #1
   1fad8:	mov	r0, #32
   1fadc:	mov	sl, r2
   1fae0:	mov	r5, r3
   1fae4:	str	r9, [sp, #20]
   1fae8:	ldrb	r8, [sp, #80]	; 0x50
   1faec:	bl	2a748 <__assert_fail@plt+0x19250>
   1faf0:	subs	r4, r0, #0
   1faf4:	beq	1fe4c <__assert_fail@plt+0xe954>
   1faf8:	mov	r1, #1
   1fafc:	mov	r0, #40	; 0x28
   1fb00:	bl	2a748 <__assert_fail@plt+0x19250>
   1fb04:	subs	r7, r0, #0
   1fb08:	beq	1fe68 <__assert_fail@plt+0xe970>
   1fb0c:	ldrb	r2, [r7, #16]
   1fb10:	and	r3, r8, #1
   1fb14:	mov	r0, fp
   1fb18:	bic	r2, r2, #1
   1fb1c:	orr	r3, r3, r2
   1fb20:	add	r2, sp, #20
   1fb24:	strb	r3, [r7, #16]
   1fb28:	mov	r1, r4
   1fb2c:	stm	sp, {r2, sl}
   1fb30:	add	r3, r7, #36	; 0x24
   1fb34:	str	r9, [sp, #8]
   1fb38:	add	r2, r7, #12
   1fb3c:	bl	1a91c <__assert_fail@plt+0x9424>
   1fb40:	subs	sl, r0, #0
   1fb44:	bne	1fe84 <__assert_fail@plt+0xe98c>
   1fb48:	ldrb	r3, [r5]
   1fb4c:	cmp	r3, #0
   1fb50:	movne	ip, #1
   1fb54:	beq	1fb78 <__assert_fail@plt+0xe680>
   1fb58:	asr	r1, r3, #5
   1fb5c:	and	r0, r3, #31
   1fb60:	ldr	r2, [r4, r1, lsl #2]
   1fb64:	ldrb	r3, [r5, #1]!
   1fb68:	orr	r2, r2, ip, lsl r0
   1fb6c:	cmp	r3, #0
   1fb70:	str	r2, [r4, r1, lsl #2]
   1fb74:	bne	1fb58 <__assert_fail@plt+0xe660>
   1fb78:	cmp	r8, #0
   1fb7c:	bne	1fd44 <__assert_fail@plt+0xe84c>
   1fb80:	ldr	r3, [r6, #92]	; 0x5c
   1fb84:	cmp	r3, #1
   1fb88:	ble	1fc0c <__assert_fail@plt+0xe714>
   1fb8c:	ldr	r3, [r6, #60]	; 0x3c
   1fb90:	ldm	r4, {r1, r2}
   1fb94:	ldr	r0, [r4, #8]
   1fb98:	ldr	ip, [r3]
   1fb9c:	and	r1, r1, ip
   1fba0:	str	r1, [r4]
   1fba4:	ldr	ip, [r3, #4]
   1fba8:	ldr	r1, [r4, #12]
   1fbac:	and	r2, r2, ip
   1fbb0:	str	r2, [r4, #4]
   1fbb4:	ldr	ip, [r3, #8]
   1fbb8:	ldr	r2, [r4, #16]
   1fbbc:	and	r0, r0, ip
   1fbc0:	str	r0, [r4, #8]
   1fbc4:	ldr	ip, [r3, #12]
   1fbc8:	ldr	r0, [r4, #20]
   1fbcc:	and	r1, r1, ip
   1fbd0:	str	r1, [r4, #12]
   1fbd4:	ldr	ip, [r3, #16]
   1fbd8:	ldr	r1, [r4, #24]
   1fbdc:	and	r2, r2, ip
   1fbe0:	str	r2, [r4, #16]
   1fbe4:	ldr	ip, [r3, #20]
   1fbe8:	ldr	r2, [r4, #28]
   1fbec:	and	r0, r0, ip
   1fbf0:	str	r0, [r4, #20]
   1fbf4:	ldr	r0, [r3, #24]
   1fbf8:	and	r1, r1, r0
   1fbfc:	str	r1, [r4, #24]
   1fc00:	ldr	r3, [r3, #28]
   1fc04:	and	r3, r3, r2
   1fc08:	str	r3, [r4, #28]
   1fc0c:	ldr	r3, [r6, #64]	; 0x40
   1fc10:	add	r8, sp, #24
   1fc14:	mov	r5, #0
   1fc18:	cmp	r3, #31
   1fc1c:	str	r5, [r8, #4]
   1fc20:	beq	1fec0 <__assert_fail@plt+0xe9c8>
   1fc24:	lsl	ip, r3, #5
   1fc28:	add	lr, r3, #1
   1fc2c:	ldr	r3, [r6, #56]	; 0x38
   1fc30:	add	r9, ip, #4
   1fc34:	mov	r2, #3
   1fc38:	add	ip, r3, ip
   1fc3c:	str	r4, [sp, #24]
   1fc40:	strb	r2, [sp, #28]
   1fc44:	ldm	r8, {r0, r1}
   1fc48:	add	sl, ip, #24
   1fc4c:	mov	r5, #0
   1fc50:	str	lr, [r6, #64]	; 0x40
   1fc54:	str	r5, [ip, #4]
   1fc58:	str	r5, [ip, #8]
   1fc5c:	str	r5, [ip, #12]
   1fc60:	stm	sl, {r0, r1}
   1fc64:	ldrb	r2, [ip, #30]
   1fc68:	mvn	r1, #0
   1fc6c:	adds	r9, r3, r9
   1fc70:	and	r2, r2, #243	; 0xf3
   1fc74:	str	r5, [ip, #16]
   1fc78:	str	r5, [ip, #20]
   1fc7c:	strb	r2, [ip, #30]
   1fc80:	str	r1, [ip, #32]
   1fc84:	beq	1fdcc <__assert_fail@plt+0xe8d4>
   1fc88:	ldr	r2, [r6, #92]	; 0x5c
   1fc8c:	cmp	r2, #1
   1fc90:	ble	1fe18 <__assert_fail@plt+0xe920>
   1fc94:	ldrb	r2, [r6, #88]	; 0x58
   1fc98:	ldr	r1, [r6, #64]	; 0x40
   1fc9c:	orr	r2, r2, #2
   1fca0:	cmp	r1, #31
   1fca4:	strb	r2, [r6, #88]	; 0x58
   1fca8:	beq	1fda0 <__assert_fail@plt+0xe8a8>
   1fcac:	lsl	ip, r1, #5
   1fcb0:	add	r2, r1, #1
   1fcb4:	add	r5, ip, #4
   1fcb8:	mov	r1, #6
   1fcbc:	add	ip, r3, ip
   1fcc0:	str	r7, [sp, #24]
   1fcc4:	strb	r1, [sp, #28]
   1fcc8:	ldm	r8, {r0, r1}
   1fccc:	add	r8, ip, #24
   1fcd0:	mov	lr, #0
   1fcd4:	str	r2, [r6, #64]	; 0x40
   1fcd8:	str	lr, [ip, #4]
   1fcdc:	str	lr, [ip, #8]
   1fce0:	str	lr, [ip, #12]
   1fce4:	stm	r8, {r0, r1}
   1fce8:	ldrb	r2, [ip, #30]
   1fcec:	mvn	r1, #0
   1fcf0:	adds	r3, r3, r5
   1fcf4:	and	r2, r2, #243	; 0xf3
   1fcf8:	str	lr, [ip, #16]
   1fcfc:	str	lr, [ip, #20]
   1fd00:	strb	r2, [ip, #30]
   1fd04:	str	r1, [ip, #32]
   1fd08:	beq	1fdcc <__assert_fail@plt+0xe8d4>
   1fd0c:	add	ip, sp, #32
   1fd10:	mov	r2, r9
   1fd14:	str	ip, [sp]
   1fd18:	mov	r4, #10
   1fd1c:	add	r1, r6, #64	; 0x40
   1fd20:	add	r0, r6, #56	; 0x38
   1fd24:	str	lr, [sp, #36]	; 0x24
   1fd28:	str	lr, [sp, #32]
   1fd2c:	strb	r4, [sp, #36]	; 0x24
   1fd30:	bl	19794 <__assert_fail@plt+0x829c>
   1fd34:	mov	r9, r0
   1fd38:	mov	r0, r9
   1fd3c:	add	sp, sp, #44	; 0x2c
   1fd40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fd44:	ldm	r4, {r2, r3, lr}
   1fd48:	ldr	ip, [r4, #12]
   1fd4c:	ldr	r0, [r4, #16]
   1fd50:	mvn	r2, r2
   1fd54:	mvn	r3, r3
   1fd58:	ldr	r1, [r4, #20]
   1fd5c:	str	r2, [r4]
   1fd60:	str	r3, [r4, #4]
   1fd64:	ldr	r2, [r4, #24]
   1fd68:	ldr	r3, [r4, #28]
   1fd6c:	mvn	lr, lr
   1fd70:	mvn	ip, ip
   1fd74:	mvn	r0, r0
   1fd78:	mvn	r1, r1
   1fd7c:	mvn	r2, r2
   1fd80:	mvn	r3, r3
   1fd84:	str	lr, [r4, #8]
   1fd88:	str	ip, [r4, #12]
   1fd8c:	str	r0, [r4, #16]
   1fd90:	str	r1, [r4, #20]
   1fd94:	str	r2, [r4, #24]
   1fd98:	str	r3, [r4, #28]
   1fd9c:	b	1fb80 <__assert_fail@plt+0xe688>
   1fda0:	mov	r0, #996	; 0x3e4
   1fda4:	bl	2a790 <__assert_fail@plt+0x19298>
   1fda8:	subs	r3, r0, #0
   1fdac:	beq	1fdcc <__assert_fail@plt+0xe8d4>
   1fdb0:	ldr	r1, [r6, #56]	; 0x38
   1fdb4:	mov	ip, r5
   1fdb8:	mov	r2, #1
   1fdbc:	mov	r5, #4
   1fdc0:	str	r1, [r3]
   1fdc4:	str	r3, [r6, #56]	; 0x38
   1fdc8:	b	1fcb8 <__assert_fail@plt+0xe7c0>
   1fdcc:	mov	r0, r4
   1fdd0:	bl	14214 <__assert_fail@plt+0x2d1c>
   1fdd4:	ldr	r0, [r7]
   1fdd8:	bl	14214 <__assert_fail@plt+0x2d1c>
   1fddc:	ldr	r0, [r7, #4]
   1fde0:	bl	14214 <__assert_fail@plt+0x2d1c>
   1fde4:	ldr	r0, [r7, #8]
   1fde8:	bl	14214 <__assert_fail@plt+0x2d1c>
   1fdec:	ldr	r0, [r7, #12]
   1fdf0:	bl	14214 <__assert_fail@plt+0x2d1c>
   1fdf4:	mov	r0, r7
   1fdf8:	bl	14214 <__assert_fail@plt+0x2d1c>
   1fdfc:	ldr	r2, [sp, #84]	; 0x54
   1fe00:	mov	r9, #0
   1fe04:	mov	r3, #12
   1fe08:	mov	r0, r9
   1fe0c:	str	r3, [r2]
   1fe10:	add	sp, sp, #44	; 0x2c
   1fe14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe18:	ldr	r0, [r7]
   1fe1c:	bl	14214 <__assert_fail@plt+0x2d1c>
   1fe20:	ldr	r0, [r7, #4]
   1fe24:	bl	14214 <__assert_fail@plt+0x2d1c>
   1fe28:	ldr	r0, [r7, #8]
   1fe2c:	bl	14214 <__assert_fail@plt+0x2d1c>
   1fe30:	ldr	r0, [r7, #12]
   1fe34:	bl	14214 <__assert_fail@plt+0x2d1c>
   1fe38:	mov	r0, r7
   1fe3c:	bl	14214 <__assert_fail@plt+0x2d1c>
   1fe40:	mov	r0, r9
   1fe44:	add	sp, sp, #44	; 0x2c
   1fe48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe4c:	ldr	r2, [sp, #84]	; 0x54
   1fe50:	mov	r3, #12
   1fe54:	mov	r9, r4
   1fe58:	mov	r0, r9
   1fe5c:	str	r3, [r2]
   1fe60:	add	sp, sp, #44	; 0x2c
   1fe64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe68:	mov	r0, r4
   1fe6c:	bl	14214 <__assert_fail@plt+0x2d1c>
   1fe70:	ldr	r2, [sp, #84]	; 0x54
   1fe74:	mov	r3, #12
   1fe78:	mov	r9, r7
   1fe7c:	str	r3, [r2]
   1fe80:	b	1fd38 <__assert_fail@plt+0xe840>
   1fe84:	mov	r0, r4
   1fe88:	bl	14214 <__assert_fail@plt+0x2d1c>
   1fe8c:	ldr	r0, [r7]
   1fe90:	bl	14214 <__assert_fail@plt+0x2d1c>
   1fe94:	ldr	r0, [r7, #4]
   1fe98:	bl	14214 <__assert_fail@plt+0x2d1c>
   1fe9c:	ldr	r0, [r7, #8]
   1fea0:	bl	14214 <__assert_fail@plt+0x2d1c>
   1fea4:	ldr	r0, [r7, #12]
   1fea8:	bl	14214 <__assert_fail@plt+0x2d1c>
   1feac:	mov	r0, r7
   1feb0:	bl	14214 <__assert_fail@plt+0x2d1c>
   1feb4:	ldr	r3, [sp, #84]	; 0x54
   1feb8:	str	sl, [r3]
   1febc:	b	1fd38 <__assert_fail@plt+0xe840>
   1fec0:	mov	r0, #996	; 0x3e4
   1fec4:	bl	2a790 <__assert_fail@plt+0x19298>
   1fec8:	subs	r3, r0, #0
   1fecc:	beq	1fdcc <__assert_fail@plt+0xe8d4>
   1fed0:	ldr	r2, [r6, #56]	; 0x38
   1fed4:	mov	ip, r5
   1fed8:	mov	lr, #1
   1fedc:	mov	r9, #4
   1fee0:	str	r2, [r3]
   1fee4:	str	r3, [r6, #56]	; 0x38
   1fee8:	b	1fc34 <__assert_fail@plt+0xe73c>
   1feec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fef0:	sub	sp, sp, #172	; 0xac
   1fef4:	mov	r4, r1
   1fef8:	str	r2, [sp, #32]
   1fefc:	ldrb	r2, [r2, #4]
   1ff00:	str	r3, [sp, #40]	; 0x28
   1ff04:	str	r0, [sp, #44]	; 0x2c
   1ff08:	sub	r3, r2, #1
   1ff0c:	ldr	sl, [r1]
   1ff10:	ldr	r6, [sp, #208]	; 0xd0
   1ff14:	cmp	r3, #35	; 0x23
   1ff18:	ldrls	pc, [pc, r3, lsl #2]
   1ff1c:	b	21288 <__assert_fail@plt+0xfd90>
   1ff20:	strdeq	r0, [r2], -r4
   1ff24:	andeq	r0, r2, r8, lsr #1
   1ff28:	andeq	r1, r2, r8, lsl #5
   1ff2c:	ldrdeq	r0, [r2], -ip
   1ff30:	muleq	r2, r4, sp
   1ff34:	andeq	r1, r2, r8, lsl #5
   1ff38:	andeq	r1, r2, r8, lsl #5
   1ff3c:	andeq	r1, r2, r4, asr #3
   1ff40:	andeq	r1, r2, r8, ror #4
   1ff44:	andeq	r0, r2, r8, lsr #1
   1ff48:			; <UNDEFINED> instruction: 0x0001ffbc
   1ff4c:	andeq	r0, r2, r0, ror #29
   1ff50:	andeq	r1, r2, r8, lsl #5
   1ff54:	andeq	r1, r2, r8, lsl #5
   1ff58:	andeq	r1, r2, r8, lsl #5
   1ff5c:	andeq	r1, r2, r8, lsl #5
   1ff60:	andeq	r1, r2, r8, lsl #5
   1ff64:			; <UNDEFINED> instruction: 0x0001ffbc
   1ff68:			; <UNDEFINED> instruction: 0x0001ffbc
   1ff6c:	andeq	r1, r2, r0
   1ff70:	andeq	r1, r2, r8, lsl #5
   1ff74:	andeq	r1, r2, r8, lsl #5
   1ff78:			; <UNDEFINED> instruction: 0x0001ffb0
   1ff7c:	ldrdeq	pc, [r1], -r8
   1ff80:	andeq	r1, r2, r8, lsl #5
   1ff84:	andeq	r1, r2, r8, lsl #5
   1ff88:	andeq	r1, r2, r8, lsl #5
   1ff8c:	andeq	r1, r2, r8, lsl #5
   1ff90:	andeq	r1, r2, r8, lsl #5
   1ff94:	andeq	r1, r2, r8, lsl #5
   1ff98:	andeq	r1, r2, r8, lsl #5
   1ff9c:	andeq	r0, r2, ip, lsr sp
   1ffa0:	andeq	r0, r2, ip, lsr sp
   1ffa4:	andeq	r0, r2, r8, asr #27
   1ffa8:	andeq	r0, r2, r8, asr #27
   1ffac:	andeq	r1, r2, r4, lsr #3
   1ffb0:	ldr	r3, [sp, #40]	; 0x28
   1ffb4:	tst	r3, #16777216	; 0x1000000
   1ffb8:	bne	205cc <__assert_fail@plt+0xf0d4>
   1ffbc:	ldr	r3, [sp, #40]	; 0x28
   1ffc0:	tst	r3, #32
   1ffc4:	bne	205cc <__assert_fail@plt+0xf0d4>
   1ffc8:	tst	r3, #16
   1ffcc:	bne	21c78 <__assert_fail@plt+0x10780>
   1ffd0:	cmp	r2, #9
   1ffd4:	beq	21268 <__assert_fail@plt+0xfd70>
   1ffd8:	ldr	r2, [sp, #32]
   1ffdc:	mov	r3, #1
   1ffe0:	add	r1, sl, #64	; 0x40
   1ffe4:	strb	r3, [r2, #4]
   1ffe8:	add	r0, sl, #56	; 0x38
   1ffec:	bl	1c2b8 <__assert_fail@plt+0xadc0>
   1fff0:	subs	r3, r0, #0
   1fff4:	str	r3, [sp, #36]	; 0x24
   1fff8:	beq	20ec8 <__assert_fail@plt+0xf9d0>
   1fffc:	ldr	r5, [sp, #40]	; 0x28
   20000:	ldr	r4, [sp, #44]	; 0x2c
   20004:	ldr	r6, [sp, #32]
   20008:	mov	r2, r5
   2000c:	mov	r1, r4
   20010:	mov	r0, r6
   20014:	bl	1b950 <__assert_fail@plt+0xa458>
   20018:	ldr	r3, [r4, #40]	; 0x28
   2001c:	mov	fp, #0
   20020:	and	lr, r5, #2097152	; 0x200000
   20024:	and	ip, r5, #16777216	; 0x1000000
   20028:	ldrb	r2, [r6, #4]
   2002c:	str	lr, [sp, #60]	; 0x3c
   20030:	str	ip, [sp, #52]	; 0x34
   20034:	add	r3, r3, r0
   20038:	str	r3, [r4, #40]	; 0x28
   2003c:	cmp	r2, #23
   20040:	bls	200bc <__assert_fail@plt+0xebc4>
   20044:	ldr	r0, [sp, #36]	; 0x24
   20048:	add	sp, sp, #172	; 0xac
   2004c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20050:	ldr	r3, [sp, #212]	; 0xd4
   20054:	mov	r2, r8
   20058:	str	r3, [sp, #4]
   2005c:	str	r6, [sp]
   20060:	mov	r3, r9
   20064:	mov	r1, r4
   20068:	bl	222fc <__assert_fail@plt+0x10e04>
   2006c:	ldr	r3, [sp, #212]	; 0xd4
   20070:	ldr	r3, [r3]
   20074:	cmp	r3, #0
   20078:	mov	r2, r0
   2007c:	bne	200a8 <__assert_fail@plt+0xebb0>
   20080:	ldr	r3, [sp, #32]
   20084:	ldrb	r3, [r3, #4]
   20088:	cmp	r3, #9
   2008c:	beq	21214 <__assert_fail@plt+0xfd1c>
   20090:	cmp	r0, #0
   20094:	beq	2009c <__assert_fail@plt+0xeba4>
   20098:	bl	1c364 <__assert_fail@plt+0xae6c>
   2009c:	ldr	r2, [sp, #212]	; 0xd4
   200a0:	mov	r3, #8
   200a4:	str	r3, [r2]
   200a8:	mov	r3, #0
   200ac:	str	r3, [sp, #36]	; 0x24
   200b0:	ldr	r0, [sp, #36]	; 0x24
   200b4:	add	sp, sp, #172	; 0xac
   200b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   200bc:	ldr	r3, [pc, #3864]	; 20fdc <__assert_fail@plt+0xfae4>
   200c0:	sub	r9, r2, #18
   200c4:	clz	r9, r9
   200c8:	mvn	r4, r3, lsr r2
   200cc:	ands	r4, r4, #1
   200d0:	lsr	r9, r9, #5
   200d4:	bne	20044 <__assert_fail@plt+0xeb4c>
   200d8:	ldr	r3, [sp, #32]
   200dc:	cmp	r2, #23
   200e0:	ldm	r3, {r0, r1}
   200e4:	ldr	r3, [sp, #44]	; 0x2c
   200e8:	ldr	r5, [r3, #40]	; 0x28
   200ec:	add	r3, sp, #104	; 0x68
   200f0:	stm	r3, {r0, r1}
   200f4:	beq	204c8 <__assert_fail@plt+0xefd0>
   200f8:	ldr	r4, [sp, #44]	; 0x2c
   200fc:	cmp	r2, #19
   20100:	moveq	r3, #1
   20104:	mvnne	r3, #0
   20108:	mov	r1, r4
   2010c:	ldr	r2, [sp, #40]	; 0x28
   20110:	ldr	r0, [sp, #32]
   20114:	str	r3, [sp, #24]
   20118:	bl	1b950 <__assert_fail@plt+0xa458>
   2011c:	ldr	r3, [r4, #40]	; 0x28
   20120:	ldr	r1, [sp, #36]	; 0x24
   20124:	cmp	r1, #0
   20128:	add	r0, r3, r0
   2012c:	str	r0, [r4, #40]	; 0x28
   20130:	beq	20584 <__assert_fail@plt+0xf08c>
   20134:	cmp	r9, #0
   20138:	bgt	206fc <__assert_fail@plt+0xf204>
   2013c:	ldr	r5, [sp, #36]	; 0x24
   20140:	mov	r8, #0
   20144:	add	r3, sp, #136	; 0x88
   20148:	str	r3, [sp, #48]	; 0x30
   2014c:	ldrb	r3, [r5, #24]
   20150:	cmp	r3, #17
   20154:	beq	205ec <__assert_fail@plt+0xf0f4>
   20158:	ldr	r3, [sp, #48]	; 0x30
   2015c:	str	fp, [r3]
   20160:	str	fp, [r3, #4]
   20164:	ldr	r3, [sp, #24]
   20168:	ldr	r1, [sl, #64]	; 0x40
   2016c:	cmn	r3, #1
   20170:	movne	r4, #10
   20174:	moveq	r4, #11
   20178:	cmp	r1, #31
   2017c:	beq	20a10 <__assert_fail@plt+0xf518>
   20180:	lsl	r2, r1, #5
   20184:	ldr	r3, [sl, #56]	; 0x38
   20188:	add	r1, r1, #1
   2018c:	add	lr, r2, #4
   20190:	add	r2, r3, r2
   20194:	str	r1, [sl, #64]	; 0x40
   20198:	str	fp, [r2, #4]
   2019c:	str	r5, [r2, #8]
   201a0:	str	fp, [r2, #12]
   201a4:	strb	r4, [sp, #140]	; 0x8c
   201a8:	ldr	r4, [sp, #48]	; 0x30
   201ac:	add	ip, r2, #24
   201b0:	add	r3, r3, lr
   201b4:	ldm	r4, {r0, r1}
   201b8:	cmp	r3, #0
   201bc:	stm	ip, {r0, r1}
   201c0:	ldrb	r1, [r2, #30]
   201c4:	mvn	r0, #0
   201c8:	str	fp, [r2, #16]
   201cc:	and	r1, r1, #243	; 0xf3
   201d0:	str	fp, [r2, #20]
   201d4:	strb	r1, [r2, #30]
   201d8:	str	r0, [r2, #32]
   201dc:	str	r3, [r5]
   201e0:	beq	2043c <__assert_fail@plt+0xef44>
   201e4:	ldr	r1, [sp, #24]
   201e8:	add	r2, r9, #2
   201ec:	cmp	r2, r1
   201f0:	str	r2, [sp, #20]
   201f4:	bgt	206a4 <__assert_fail@plt+0xf1ac>
   201f8:	str	r8, [sp, #56]	; 0x38
   201fc:	mov	r9, r0
   20200:	mov	r6, r3
   20204:	mov	r8, r4
   20208:	mov	r4, r5
   2020c:	mov	r7, r8
   20210:	b	2021c <__assert_fail@plt+0xed24>
   20214:	mov	r4, r2
   20218:	add	r7, r6, #4
   2021c:	ldr	r1, [sl, #64]	; 0x40
   20220:	cmp	r1, #31
   20224:	beq	202e8 <__assert_fail@plt+0xedf0>
   20228:	lsl	r2, r1, #5
   2022c:	ldr	ip, [sl, #56]	; 0x38
   20230:	add	r0, r1, #1
   20234:	add	lr, r2, #4
   20238:	add	r2, ip, r2
   2023c:	add	r1, r4, #20
   20240:	str	r0, [sl, #64]	; 0x40
   20244:	str	fp, [r2, #4]
   20248:	str	fp, [r2, #8]
   2024c:	str	fp, [r2, #12]
   20250:	ldm	r1, {r0, r1}
   20254:	add	r5, r2, #24
   20258:	add	ip, ip, lr
   2025c:	stm	r5, {r0, r1}
   20260:	ldrb	r1, [r2, #30]
   20264:	cmp	ip, #0
   20268:	str	fp, [r2, #16]
   2026c:	and	r1, r1, #243	; 0xf3
   20270:	str	fp, [r2, #20]
   20274:	str	r9, [r2, #32]
   20278:	strb	r1, [r2, #30]
   2027c:	str	ip, [r7]
   20280:	beq	20430 <__assert_fail@plt+0xef38>
   20284:	str	r6, [r2, #4]
   20288:	ldr	r6, [r7]
   2028c:	ldrb	r2, [r6, #26]
   20290:	orr	r2, r2, #4
   20294:	strb	r2, [r6, #26]
   20298:	ldr	r2, [r4, #4]
   2029c:	cmp	r2, #0
   202a0:	bne	20214 <__assert_fail@plt+0xed1c>
   202a4:	mov	r1, fp
   202a8:	b	202c4 <__assert_fail@plt+0xedcc>
   202ac:	ldr	r2, [r4]
   202b0:	ldr	r6, [r6]
   202b4:	cmp	r2, #0
   202b8:	mov	r1, r4
   202bc:	beq	2031c <__assert_fail@plt+0xee24>
   202c0:	mov	r4, r2
   202c4:	ldr	r2, [r4, #8]
   202c8:	cmp	r2, r1
   202cc:	cmpne	r2, #0
   202d0:	beq	202ac <__assert_fail@plt+0xedb4>
   202d4:	ldr	r1, [sl, #64]	; 0x40
   202d8:	mov	r4, r2
   202dc:	cmp	r1, #31
   202e0:	add	r7, r6, #8
   202e4:	bne	20228 <__assert_fail@plt+0xed30>
   202e8:	mov	r0, #996	; 0x3e4
   202ec:	str	r3, [sp, #28]
   202f0:	bl	2a790 <__assert_fail@plt+0x19298>
   202f4:	ldr	r3, [sp, #28]
   202f8:	subs	ip, r0, #0
   202fc:	beq	20a70 <__assert_fail@plt+0xf578>
   20300:	ldr	r1, [sl, #56]	; 0x38
   20304:	mov	lr, #4
   20308:	str	r1, [ip]
   2030c:	mov	r0, #1
   20310:	mov	r2, fp
   20314:	str	ip, [sl, #56]	; 0x38
   20318:	b	20238 <__assert_fail@plt+0xed40>
   2031c:	ldr	r5, [sp, #136]	; 0x88
   20320:	str	fp, [r8]
   20324:	str	fp, [r8, #4]
   20328:	ldr	r2, [sl, #64]	; 0x40
   2032c:	cmp	r2, #31
   20330:	beq	20468 <__assert_fail@plt+0xef70>
   20334:	lsl	r4, r2, #5
   20338:	ldr	ip, [sl, #56]	; 0x38
   2033c:	add	r2, r2, #1
   20340:	add	r6, r4, #4
   20344:	add	r4, ip, r4
   20348:	str	r2, [sl, #64]	; 0x40
   2034c:	mov	r2, #16
   20350:	str	fp, [r4, #4]
   20354:	str	r3, [r4, #8]
   20358:	str	r5, [r4, #12]
   2035c:	strb	r2, [sp, #140]	; 0x8c
   20360:	ldm	r8, {r0, r1}
   20364:	add	r2, r4, #24
   20368:	add	r6, ip, r6
   2036c:	stm	r2, {r0, r1}
   20370:	ldrb	r2, [r4, #30]
   20374:	cmp	r5, #0
   20378:	str	fp, [r4, #16]
   2037c:	and	r2, r2, #243	; 0xf3
   20380:	str	fp, [r4, #20]
   20384:	str	r9, [r4, #32]
   20388:	strb	r2, [r4, #30]
   2038c:	str	r6, [r3]
   20390:	beq	2043c <__assert_fail@plt+0xef44>
   20394:	cmp	r6, #0
   20398:	str	r6, [r5]
   2039c:	beq	2043c <__assert_fail@plt+0xef44>
   203a0:	str	fp, [r8]
   203a4:	str	fp, [r8, #4]
   203a8:	ldr	r1, [sl, #64]	; 0x40
   203ac:	cmp	r1, #31
   203b0:	beq	2049c <__assert_fail@plt+0xefa4>
   203b4:	lsl	r2, r1, #5
   203b8:	add	r3, r2, #4
   203bc:	add	r1, r1, #1
   203c0:	add	r2, ip, r2
   203c4:	mov	r0, #10
   203c8:	str	r1, [sl, #64]	; 0x40
   203cc:	str	fp, [r2, #4]
   203d0:	str	r6, [r2, #8]
   203d4:	str	fp, [r2, #12]
   203d8:	strb	r0, [sp, #140]	; 0x8c
   203dc:	ldm	r8, {r0, r1}
   203e0:	add	lr, r2, #24
   203e4:	add	r3, ip, r3
   203e8:	stm	lr, {r0, r1}
   203ec:	ldrb	r1, [r2, #30]
   203f0:	cmp	r3, #0
   203f4:	str	fp, [r2, #16]
   203f8:	and	r1, r1, #243	; 0xf3
   203fc:	str	fp, [r2, #20]
   20400:	str	r9, [r2, #32]
   20404:	strb	r1, [r2, #30]
   20408:	str	r3, [r4, #4]
   2040c:	beq	2043c <__assert_fail@plt+0xef44>
   20410:	ldr	r2, [sp, #20]
   20414:	ldr	r1, [sp, #24]
   20418:	add	r2, r2, #1
   2041c:	cmp	r2, r1
   20420:	str	r2, [sp, #20]
   20424:	bgt	206a0 <__assert_fail@plt+0xf1a8>
   20428:	ldr	r6, [r5]
   2042c:	b	20208 <__assert_fail@plt+0xed10>
   20430:	mov	r5, ip
   20434:	b	20320 <__assert_fail@plt+0xee28>
   20438:	str	lr, [r6]
   2043c:	ldr	r2, [sp, #212]	; 0xd4
   20440:	mov	r3, #12
   20444:	str	r3, [r2]
   20448:	ldr	r3, [sp, #36]	; 0x24
   2044c:	cmp	r3, #0
   20450:	beq	200a8 <__assert_fail@plt+0xebb0>
   20454:	mov	r0, r3
   20458:	bl	1c364 <__assert_fail@plt+0xae6c>
   2045c:	mov	r3, #0
   20460:	str	r3, [sp, #36]	; 0x24
   20464:	b	200b0 <__assert_fail@plt+0xebb8>
   20468:	mov	r0, #996	; 0x3e4
   2046c:	str	r3, [sp, #28]
   20470:	bl	2a790 <__assert_fail@plt+0x19298>
   20474:	subs	ip, r0, #0
   20478:	beq	2043c <__assert_fail@plt+0xef44>
   2047c:	ldr	r1, [sl, #56]	; 0x38
   20480:	mov	r6, #4
   20484:	str	r1, [ip]
   20488:	mov	r2, #1
   2048c:	mov	r4, fp
   20490:	str	ip, [sl, #56]	; 0x38
   20494:	ldr	r3, [sp, #28]
   20498:	b	20344 <__assert_fail@plt+0xee4c>
   2049c:	mov	r0, #996	; 0x3e4
   204a0:	bl	2a790 <__assert_fail@plt+0x19298>
   204a4:	subs	ip, r0, #0
   204a8:	beq	2043c <__assert_fail@plt+0xef44>
   204ac:	ldr	r0, [sl, #56]	; 0x38
   204b0:	mov	r1, #1
   204b4:	str	r0, [ip]
   204b8:	mov	r3, #4
   204bc:	mov	r2, fp
   204c0:	str	ip, [sl, #56]	; 0x38
   204c4:	b	203c0 <__assert_fail@plt+0xeec8>
   204c8:	str	r4, [sp, #20]
   204cc:	ldr	r8, [sp, #44]	; 0x2c
   204d0:	ldr	r4, [sp, #32]
   204d4:	mvn	r9, #0
   204d8:	mov	r7, #32768	; 0x8000
   204dc:	mvn	r6, #1
   204e0:	mov	r1, r8
   204e4:	ldr	r2, [sp, #40]	; 0x28
   204e8:	mov	r0, r4
   204ec:	bl	1b950 <__assert_fail@plt+0xa458>
   204f0:	ldrb	ip, [r4, #4]
   204f4:	ldr	r2, [r8, #40]	; 0x28
   204f8:	cmn	r9, #2
   204fc:	movne	r1, #0
   20500:	moveq	r1, #1
   20504:	cmp	ip, #2
   20508:	add	r0, r2, r0
   2050c:	str	r0, [r8, #40]	; 0x28
   20510:	ldrb	r2, [r4]
   20514:	beq	20668 <__assert_fail@plt+0xf170>
   20518:	cmp	ip, #24
   2051c:	beq	20a88 <__assert_fail@plt+0xf590>
   20520:	cmp	r2, #44	; 0x2c
   20524:	beq	20ba8 <__assert_fail@plt+0xf6b0>
   20528:	cmp	ip, #1
   2052c:	beq	20538 <__assert_fail@plt+0xf040>
   20530:	mov	r9, r6
   20534:	b	204e0 <__assert_fail@plt+0xefe8>
   20538:	sub	r0, r2, #48	; 0x30
   2053c:	uxtb	r1, r0
   20540:	cmp	r1, #9
   20544:	movhi	r1, #0
   20548:	movls	r1, #1
   2054c:	cmn	r9, #2
   20550:	moveq	r1, #0
   20554:	cmp	r1, #0
   20558:	beq	20530 <__assert_fail@plt+0xf038>
   2055c:	cmn	r9, #1
   20560:	moveq	r9, r0
   20564:	beq	204e0 <__assert_fail@plt+0xefe8>
   20568:	add	r3, r9, r9, lsl #2
   2056c:	add	r3, r2, r3, lsl #1
   20570:	ldr	r2, [pc, #2664]	; 20fe0 <__assert_fail@plt+0xfae8>
   20574:	cmp	r3, r2
   20578:	suble	r9, r3, #48	; 0x30
   2057c:	movgt	r9, r7
   20580:	b	204e0 <__assert_fail@plt+0xefe8>
   20584:	ldr	r3, [sp, #212]	; 0xd4
   20588:	ldr	r3, [r3]
   2058c:	cmp	r3, #0
   20590:	bne	20448 <__assert_fail@plt+0xef50>
   20594:	str	fp, [sp, #36]	; 0x24
   20598:	ldr	r3, [sp, #52]	; 0x34
   2059c:	cmp	r3, #0
   205a0:	ldr	r3, [sp, #32]
   205a4:	ldrb	r2, [r3, #4]
   205a8:	beq	2003c <__assert_fail@plt+0xeb44>
   205ac:	cmp	r2, #23
   205b0:	cmpne	r2, #11
   205b4:	bne	2003c <__assert_fail@plt+0xeb44>
   205b8:	ldr	r3, [sp, #36]	; 0x24
   205bc:	cmp	r3, #0
   205c0:	beq	205cc <__assert_fail@plt+0xf0d4>
   205c4:	mov	r0, r3
   205c8:	bl	1c364 <__assert_fail@plt+0xae6c>
   205cc:	ldr	r2, [sp, #212]	; 0xd4
   205d0:	mov	r3, #13
   205d4:	str	r3, [r2]
   205d8:	mov	r3, #0
   205dc:	str	r3, [sp, #36]	; 0x24
   205e0:	ldr	r0, [sp, #36]	; 0x24
   205e4:	add	sp, sp, #172	; 0xac
   205e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   205ec:	ldr	r1, [r5, #20]
   205f0:	mov	r3, r5
   205f4:	b	205fc <__assert_fail@plt+0xf104>
   205f8:	mov	r3, r2
   205fc:	ldr	r2, [r3, #4]
   20600:	cmp	r2, #0
   20604:	bne	205f8 <__assert_fail@plt+0xf100>
   20608:	ldr	r2, [r3, #8]
   2060c:	cmp	r2, #0
   20610:	bne	205f8 <__assert_fail@plt+0xf100>
   20614:	b	20638 <__assert_fail@plt+0xf140>
   20618:	ldr	r2, [r0, #8]
   2061c:	cmp	r3, r2
   20620:	cmpne	r2, #0
   20624:	moveq	r3, #1
   20628:	movne	r3, #0
   2062c:	cmp	r3, #0
   20630:	mov	r3, r0
   20634:	beq	205f8 <__assert_fail@plt+0xf100>
   20638:	ldrb	r2, [r3, #24]
   2063c:	cmp	r2, #17
   20640:	bne	20658 <__assert_fail@plt+0xf160>
   20644:	ldr	r2, [r3, #20]
   20648:	cmp	r1, r2
   2064c:	ldrbeq	r2, [r3, #26]
   20650:	orreq	r2, r2, #8
   20654:	strbeq	r2, [r3, #26]
   20658:	ldr	r0, [r3]
   2065c:	cmp	r0, #0
   20660:	bne	20618 <__assert_fail@plt+0xf120>
   20664:	b	20158 <__assert_fail@plt+0xec60>
   20668:	mov	r3, ip
   2066c:	ldr	r2, [sp, #60]	; 0x3c
   20670:	cmp	r2, #0
   20674:	beq	21340 <__assert_fail@plt+0xfe48>
   20678:	add	r3, sp, #104	; 0x68
   2067c:	ldr	r2, [sp, #32]
   20680:	ldm	r3, {r0, r1}
   20684:	ldr	r3, [sp, #44]	; 0x2c
   20688:	str	r5, [r3, #40]	; 0x28
   2068c:	mov	r3, #1
   20690:	stm	r2, {r0, r1}
   20694:	ldr	r0, [sp, #36]	; 0x24
   20698:	strb	r3, [r2, #4]
   2069c:	b	206d4 <__assert_fail@plt+0xf1dc>
   206a0:	ldr	r8, [sp, #56]	; 0x38
   206a4:	cmp	r8, #0
   206a8:	beq	20a80 <__assert_fail@plt+0xf588>
   206ac:	ldr	r0, [sp, #48]	; 0x30
   206b0:	mov	ip, #16
   206b4:	str	r0, [sp]
   206b8:	mov	r2, r8
   206bc:	str	fp, [r0, #4]
   206c0:	str	fp, [r0]
   206c4:	add	r1, sl, #64	; 0x40
   206c8:	add	r0, sl, #56	; 0x38
   206cc:	strb	ip, [sp, #140]	; 0x8c
   206d0:	bl	19794 <__assert_fail@plt+0x829c>
   206d4:	ldr	r3, [sp, #212]	; 0xd4
   206d8:	ldr	r3, [r3]
   206dc:	adds	r3, r3, #0
   206e0:	movne	r3, #1
   206e4:	cmp	r0, #0
   206e8:	movne	r3, #0
   206ec:	cmp	r3, #0
   206f0:	bne	20448 <__assert_fail@plt+0xef50>
   206f4:	str	r0, [sp, #36]	; 0x24
   206f8:	b	20598 <__assert_fail@plt+0xf0a0>
   206fc:	cmp	r9, #1
   20700:	beq	21294 <__assert_fail@plt+0xfd9c>
   20704:	ldr	r3, [sp, #36]	; 0x24
   20708:	str	r9, [sp, #48]	; 0x30
   2070c:	mov	r2, r3
   20710:	ldr	r8, [r3]
   20714:	mov	r5, r3
   20718:	mov	r3, #2
   2071c:	str	r3, [sp, #20]
   20720:	add	r3, sp, #136	; 0x88
   20724:	mvn	r7, #0
   20728:	mov	r9, r3
   2072c:	mov	r4, r5
   20730:	mov	r6, r9
   20734:	b	20740 <__assert_fail@plt+0xf248>
   20738:	mov	r4, r3
   2073c:	add	r6, r8, #4
   20740:	ldr	r1, [sl, #64]	; 0x40
   20744:	cmp	r1, #31
   20748:	beq	2080c <__assert_fail@plt+0xf314>
   2074c:	lsl	r3, r1, #5
   20750:	ldr	ip, [sl, #56]	; 0x38
   20754:	add	r0, r1, #1
   20758:	add	lr, r3, #4
   2075c:	add	r3, ip, r3
   20760:	add	r1, r4, #20
   20764:	str	r0, [sl, #64]	; 0x40
   20768:	str	fp, [r3, #4]
   2076c:	str	fp, [r3, #8]
   20770:	str	fp, [r3, #12]
   20774:	ldm	r1, {r0, r1}
   20778:	add	r5, r3, #24
   2077c:	add	ip, ip, lr
   20780:	stm	r5, {r0, r1}
   20784:	ldrb	r1, [r3, #30]
   20788:	cmp	ip, #0
   2078c:	str	fp, [r3, #16]
   20790:	and	r1, r1, #243	; 0xf3
   20794:	str	fp, [r3, #20]
   20798:	str	r7, [r3, #32]
   2079c:	strb	r1, [r3, #30]
   207a0:	str	ip, [r6]
   207a4:	beq	20a08 <__assert_fail@plt+0xf510>
   207a8:	str	r8, [r3, #4]
   207ac:	ldr	r8, [r6]
   207b0:	ldrb	r3, [r8, #26]
   207b4:	orr	r3, r3, #4
   207b8:	strb	r3, [r8, #26]
   207bc:	ldr	r3, [r4, #4]
   207c0:	cmp	r3, #0
   207c4:	bne	20738 <__assert_fail@plt+0xf240>
   207c8:	mov	r1, fp
   207cc:	b	207e8 <__assert_fail@plt+0xf2f0>
   207d0:	ldr	r3, [r4]
   207d4:	ldr	r8, [r8]
   207d8:	cmp	r3, #0
   207dc:	mov	r1, r4
   207e0:	beq	20840 <__assert_fail@plt+0xf348>
   207e4:	mov	r4, r3
   207e8:	ldr	r3, [r4, #8]
   207ec:	cmp	r3, #0
   207f0:	cmpne	r3, r1
   207f4:	beq	207d0 <__assert_fail@plt+0xf2d8>
   207f8:	ldr	r1, [sl, #64]	; 0x40
   207fc:	mov	r4, r3
   20800:	cmp	r1, #31
   20804:	add	r6, r8, #8
   20808:	bne	2074c <__assert_fail@plt+0xf254>
   2080c:	mov	r0, #996	; 0x3e4
   20810:	str	r2, [sp, #28]
   20814:	bl	2a790 <__assert_fail@plt+0x19298>
   20818:	ldr	r2, [sp, #28]
   2081c:	subs	ip, r0, #0
   20820:	beq	21288 <__assert_fail@plt+0xfd90>
   20824:	ldr	r1, [sl, #56]	; 0x38
   20828:	mov	lr, #4
   2082c:	str	r1, [ip]
   20830:	mov	r0, #1
   20834:	mov	r3, fp
   20838:	str	ip, [sl, #56]	; 0x38
   2083c:	b	2075c <__assert_fail@plt+0xf264>
   20840:	ldr	r5, [sp, #136]	; 0x88
   20844:	str	fp, [r9]
   20848:	str	fp, [r9, #4]
   2084c:	ldr	r1, [sl, #64]	; 0x40
   20850:	cmp	r1, #31
   20854:	beq	20a3c <__assert_fail@plt+0xf544>
   20858:	lsl	r3, r1, #5
   2085c:	ldr	r8, [sl, #56]	; 0x38
   20860:	add	r1, r1, #1
   20864:	add	lr, r3, #4
   20868:	add	r3, r8, r3
   2086c:	str	r1, [sl, #64]	; 0x40
   20870:	mov	r1, #16
   20874:	str	fp, [r3, #4]
   20878:	str	r2, [r3, #8]
   2087c:	str	r5, [r3, #12]
   20880:	strb	r1, [sp, #140]	; 0x8c
   20884:	ldm	r9, {r0, r1}
   20888:	add	ip, r3, #24
   2088c:	add	r8, r8, lr
   20890:	stm	ip, {r0, r1}
   20894:	ldrb	r1, [r3, #30]
   20898:	cmp	r5, #0
   2089c:	str	fp, [r3, #16]
   208a0:	and	r1, r1, #243	; 0xf3
   208a4:	str	fp, [r3, #20]
   208a8:	str	r7, [r3, #32]
   208ac:	strb	r1, [r3, #30]
   208b0:	str	r8, [r2]
   208b4:	beq	2043c <__assert_fail@plt+0xef44>
   208b8:	cmp	r8, #0
   208bc:	str	r8, [r5]
   208c0:	beq	2043c <__assert_fail@plt+0xef44>
   208c4:	ldr	r3, [sp, #20]
   208c8:	ldr	r2, [sp, #48]	; 0x30
   208cc:	add	r3, r3, #1
   208d0:	cmp	r3, r2
   208d4:	str	r3, [sp, #20]
   208d8:	mov	r2, r8
   208dc:	ble	2072c <__assert_fail@plt+0xf234>
   208e0:	ldr	r9, [sp, #48]	; 0x30
   208e4:	ldr	r3, [sp, #24]
   208e8:	cmp	r9, r3
   208ec:	beq	20a7c <__assert_fail@plt+0xf584>
   208f0:	add	r3, sp, #136	; 0x88
   208f4:	str	r3, [sp, #48]	; 0x30
   208f8:	ldr	r4, [r5]
   208fc:	mov	r6, r3
   20900:	mvn	r7, #0
   20904:	b	20910 <__assert_fail@plt+0xf418>
   20908:	mov	r5, r3
   2090c:	add	r6, r4, #4
   20910:	ldr	r2, [sl, #64]	; 0x40
   20914:	cmp	r2, #31
   20918:	beq	209dc <__assert_fail@plt+0xf4e4>
   2091c:	lsl	r3, r2, #5
   20920:	ldr	lr, [sl, #56]	; 0x38
   20924:	add	r1, r2, #1
   20928:	add	ip, r3, #4
   2092c:	add	r3, lr, r3
   20930:	add	r2, r5, #20
   20934:	str	r1, [sl, #64]	; 0x40
   20938:	str	fp, [r3, #4]
   2093c:	str	fp, [r3, #8]
   20940:	str	fp, [r3, #12]
   20944:	ldm	r2, {r0, r1}
   20948:	add	r2, r3, #24
   2094c:	add	ip, lr, ip
   20950:	stm	r2, {r0, r1}
   20954:	ldrb	r2, [r3, #30]
   20958:	cmp	ip, #0
   2095c:	str	fp, [r3, #16]
   20960:	and	r2, r2, #243	; 0xf3
   20964:	str	fp, [r3, #20]
   20968:	str	r7, [r3, #32]
   2096c:	strb	r2, [r3, #30]
   20970:	str	ip, [r6]
   20974:	beq	2043c <__assert_fail@plt+0xef44>
   20978:	str	r4, [r3, #4]
   2097c:	ldr	r4, [r6]
   20980:	ldrb	r3, [r4, #26]
   20984:	orr	r3, r3, #4
   20988:	strb	r3, [r4, #26]
   2098c:	ldr	r3, [r5, #4]
   20990:	cmp	r3, #0
   20994:	bne	20908 <__assert_fail@plt+0xf410>
   20998:	mov	r2, fp
   2099c:	b	209b8 <__assert_fail@plt+0xf4c0>
   209a0:	ldr	r3, [r5]
   209a4:	ldr	r4, [r4]
   209a8:	cmp	r3, #0
   209ac:	mov	r2, r5
   209b0:	beq	20ccc <__assert_fail@plt+0xf7d4>
   209b4:	mov	r5, r3
   209b8:	ldr	r3, [r5, #8]
   209bc:	cmp	r3, r2
   209c0:	cmpne	r3, #0
   209c4:	beq	209a0 <__assert_fail@plt+0xf4a8>
   209c8:	ldr	r2, [sl, #64]	; 0x40
   209cc:	mov	r5, r3
   209d0:	cmp	r2, #31
   209d4:	add	r6, r4, #8
   209d8:	bne	2091c <__assert_fail@plt+0xf424>
   209dc:	mov	r0, #996	; 0x3e4
   209e0:	bl	2a790 <__assert_fail@plt+0x19298>
   209e4:	subs	lr, r0, #0
   209e8:	beq	20438 <__assert_fail@plt+0xef40>
   209ec:	ldr	r2, [sl, #56]	; 0x38
   209f0:	mov	r1, #1
   209f4:	str	r2, [lr]
   209f8:	mov	ip, #4
   209fc:	mov	r3, fp
   20a00:	str	lr, [sl, #56]	; 0x38
   20a04:	b	2092c <__assert_fail@plt+0xf434>
   20a08:	mov	r5, ip
   20a0c:	b	20844 <__assert_fail@plt+0xf34c>
   20a10:	mov	r0, #996	; 0x3e4
   20a14:	bl	2a790 <__assert_fail@plt+0x19298>
   20a18:	subs	r3, r0, #0
   20a1c:	beq	2043c <__assert_fail@plt+0xef44>
   20a20:	ldr	r0, [sl, #56]	; 0x38
   20a24:	mov	lr, #4
   20a28:	str	r0, [r3]
   20a2c:	mov	r1, #1
   20a30:	mov	r2, fp
   20a34:	str	r3, [sl, #56]	; 0x38
   20a38:	b	20190 <__assert_fail@plt+0xec98>
   20a3c:	mov	r0, #996	; 0x3e4
   20a40:	str	r2, [sp, #28]
   20a44:	bl	2a790 <__assert_fail@plt+0x19298>
   20a48:	subs	r8, r0, #0
   20a4c:	beq	2043c <__assert_fail@plt+0xef44>
   20a50:	ldr	r0, [sl, #56]	; 0x38
   20a54:	mov	lr, #4
   20a58:	str	r0, [r8]
   20a5c:	mov	r1, #1
   20a60:	mov	r3, fp
   20a64:	str	r8, [sl, #56]	; 0x38
   20a68:	ldr	r2, [sp, #28]
   20a6c:	b	20868 <__assert_fail@plt+0xf370>
   20a70:	str	ip, [r7]
   20a74:	mov	r5, fp
   20a78:	b	20320 <__assert_fail@plt+0xee28>
   20a7c:	mov	r3, r8
   20a80:	str	r3, [sp, #36]	; 0x24
   20a84:	b	20598 <__assert_fail@plt+0xf0a0>
   20a88:	cmn	r9, #1
   20a8c:	beq	20bd4 <__assert_fail@plt+0xf6dc>
   20a90:	cmn	r9, #2
   20a94:	strne	r9, [sp, #24]
   20a98:	beq	20bc8 <__assert_fail@plt+0xf6d0>
   20a9c:	ldr	r3, [sp, #24]
   20aa0:	cmn	r3, #1
   20aa4:	beq	20be4 <__assert_fail@plt+0xf6ec>
   20aa8:	ldr	r2, [pc, #1332]	; 20fe4 <__assert_fail@plt+0xfaec>
   20aac:	cmp	r3, r2
   20ab0:	movle	r3, #0
   20ab4:	movgt	r3, #1
   20ab8:	cmp	r3, #0
   20abc:	bne	20bfc <__assert_fail@plt+0xf704>
   20ac0:	ldr	r4, [sp, #44]	; 0x2c
   20ac4:	ldr	r2, [sp, #40]	; 0x28
   20ac8:	mov	r1, r4
   20acc:	ldr	r0, [sp, #32]
   20ad0:	bl	1b950 <__assert_fail@plt+0xa458>
   20ad4:	ldr	r3, [r4, #40]	; 0x28
   20ad8:	mov	r2, r4
   20adc:	ldr	r4, [sp, #36]	; 0x24
   20ae0:	cmp	r4, #0
   20ae4:	add	r3, r3, r0
   20ae8:	str	r3, [r2, #40]	; 0x28
   20aec:	beq	20584 <__assert_fail@plt+0xf08c>
   20af0:	ldr	r3, [sp, #24]
   20af4:	orrs	r3, r9, r3
   20af8:	beq	20b04 <__assert_fail@plt+0xf60c>
   20afc:	b	20134 <__assert_fail@plt+0xec3c>
   20b00:	mov	r4, r3
   20b04:	ldr	r3, [r4, #4]
   20b08:	cmp	r3, #0
   20b0c:	bne	20b00 <__assert_fail@plt+0xf608>
   20b10:	ldr	r3, [r4, #8]
   20b14:	cmp	r3, #0
   20b18:	bne	20b00 <__assert_fail@plt+0xf608>
   20b1c:	b	20b54 <__assert_fail@plt+0xf65c>
   20b20:	ldr	r0, [r4, #20]
   20b24:	bl	14214 <__assert_fail@plt+0x2d1c>
   20b28:	ldr	r2, [r4]
   20b2c:	cmp	r2, #0
   20b30:	beq	20584 <__assert_fail@plt+0xf08c>
   20b34:	ldr	r3, [r2, #8]
   20b38:	cmp	r3, #0
   20b3c:	cmpne	r4, r3
   20b40:	moveq	r4, #1
   20b44:	movne	r4, #0
   20b48:	cmp	r4, #0
   20b4c:	mov	r4, r2
   20b50:	beq	20b00 <__assert_fail@plt+0xf608>
   20b54:	ldr	r3, [r4, #24]
   20b58:	bic	r3, r3, #-16777216	; 0xff000000
   20b5c:	bic	r3, r3, #16449536	; 0xfb0000
   20b60:	bic	r3, r3, #65280	; 0xff00
   20b64:	cmp	r3, #6
   20b68:	beq	20b78 <__assert_fail@plt+0xf680>
   20b6c:	cmp	r3, #3
   20b70:	bne	20b28 <__assert_fail@plt+0xf630>
   20b74:	b	20b20 <__assert_fail@plt+0xf628>
   20b78:	ldr	r5, [r4, #20]
   20b7c:	ldr	r0, [r5]
   20b80:	bl	14214 <__assert_fail@plt+0x2d1c>
   20b84:	ldr	r0, [r5, #4]
   20b88:	bl	14214 <__assert_fail@plt+0x2d1c>
   20b8c:	ldr	r0, [r5, #8]
   20b90:	bl	14214 <__assert_fail@plt+0x2d1c>
   20b94:	ldr	r0, [r5, #12]
   20b98:	bl	14214 <__assert_fail@plt+0x2d1c>
   20b9c:	mov	r0, r5
   20ba0:	bl	14214 <__assert_fail@plt+0x2d1c>
   20ba4:	b	20b28 <__assert_fail@plt+0xf630>
   20ba8:	cmn	r9, #1
   20bac:	ldr	r4, [sp, #20]
   20bb0:	beq	20c0c <__assert_fail@plt+0xf714>
   20bb4:	cmn	r9, #2
   20bb8:	beq	20bc8 <__assert_fail@plt+0xf6d0>
   20bbc:	cmp	ip, #1
   20bc0:	moveq	r4, r1
   20bc4:	beq	20c18 <__assert_fail@plt+0xf720>
   20bc8:	ldr	r3, [sp, #60]	; 0x3c
   20bcc:	cmp	r3, #0
   20bd0:	bne	20678 <__assert_fail@plt+0xf180>
   20bd4:	ldr	r2, [sp, #212]	; 0xd4
   20bd8:	mov	r3, #10
   20bdc:	str	r3, [r2]
   20be0:	b	20448 <__assert_fail@plt+0xef50>
   20be4:	add	r3, r3, #32768	; 0x8000
   20be8:	cmp	r9, r3
   20bec:	movle	r3, #0
   20bf0:	movgt	r3, #1
   20bf4:	cmp	r3, #0
   20bf8:	beq	20ac0 <__assert_fail@plt+0xf5c8>
   20bfc:	ldr	r2, [sp, #212]	; 0xd4
   20c00:	mov	r3, #15
   20c04:	str	r3, [r2]
   20c08:	b	20448 <__assert_fail@plt+0xef50>
   20c0c:	cmp	ip, #1
   20c10:	bne	20bd4 <__assert_fail@plt+0xf6dc>
   20c14:	mov	r9, fp
   20c18:	mvn	r3, #0
   20c1c:	str	r5, [sp, #20]
   20c20:	ldr	r0, [sp, #32]
   20c24:	mov	r5, r4
   20c28:	ldr	r4, [sp, #44]	; 0x2c
   20c2c:	mov	r7, #32768	; 0x8000
   20c30:	mvn	r6, #1
   20c34:	mov	r8, r3
   20c38:	ldr	r2, [sp, #40]	; 0x28
   20c3c:	mov	r1, r4
   20c40:	bl	1b950 <__assert_fail@plt+0xa458>
   20c44:	ldr	r1, [sp, #32]
   20c48:	ldr	r2, [r4, #40]	; 0x28
   20c4c:	ldrb	r3, [r1, #4]
   20c50:	cmp	r3, #2
   20c54:	add	r2, r2, r0
   20c58:	str	r2, [r4, #40]	; 0x28
   20c5c:	beq	212a0 <__assert_fail@plt+0xfda8>
   20c60:	ldrb	r2, [r1]
   20c64:	cmp	r2, #44	; 0x2c
   20c68:	cmpne	r3, #24
   20c6c:	beq	212f4 <__assert_fail@plt+0xfdfc>
   20c70:	cmp	r3, #1
   20c74:	movne	r8, r6
   20c78:	movne	r0, r1
   20c7c:	bne	20c38 <__assert_fail@plt+0xf740>
   20c80:	sub	r1, r2, #48	; 0x30
   20c84:	uxtb	r3, r1
   20c88:	cmp	r3, #9
   20c8c:	movhi	r3, #0
   20c90:	movls	r3, #1
   20c94:	cmn	r8, #2
   20c98:	moveq	r3, #0
   20c9c:	cmp	r3, #0
   20ca0:	beq	21ce8 <__assert_fail@plt+0x107f0>
   20ca4:	cmn	r8, #1
   20ca8:	beq	21cdc <__assert_fail@plt+0x107e4>
   20cac:	add	r8, r8, r8, lsl #2
   20cb0:	ldr	r3, [pc, #808]	; 20fe0 <__assert_fail@plt+0xfae8>
   20cb4:	add	r2, r2, r8, lsl #1
   20cb8:	cmp	r2, r3
   20cbc:	bgt	21358 <__assert_fail@plt+0xfe60>
   20cc0:	sub	r8, r2, #48	; 0x30
   20cc4:	ldr	r0, [sp, #32]
   20cc8:	b	20c38 <__assert_fail@plt+0xf740>
   20ccc:	ldr	r5, [sp, #136]	; 0x88
   20cd0:	cmp	r5, #0
   20cd4:	bne	2014c <__assert_fail@plt+0xec54>
   20cd8:	b	2043c <__assert_fail@plt+0xef44>
   20cdc:	ldr	r3, [sp, #32]
   20ce0:	ldr	r2, [sl, #84]	; 0x54
   20ce4:	ldr	r1, [r3]
   20ce8:	mov	r3, #1
   20cec:	lsl	r3, r3, r1
   20cf0:	ands	r2, r3, r2
   20cf4:	beq	21cc8 <__assert_fail@plt+0x107d0>
   20cf8:	ldr	r1, [sl, #80]	; 0x50
   20cfc:	ldr	r2, [sp, #32]
   20d00:	orr	r3, r1, r3
   20d04:	str	r3, [sl, #80]	; 0x50
   20d08:	add	r1, sl, #64	; 0x40
   20d0c:	add	r0, sl, #56	; 0x38
   20d10:	bl	1c2b8 <__assert_fail@plt+0xadc0>
   20d14:	subs	r3, r0, #0
   20d18:	str	r3, [sp, #36]	; 0x24
   20d1c:	beq	20ec8 <__assert_fail@plt+0xf9d0>
   20d20:	ldrb	r2, [sl, #88]	; 0x58
   20d24:	ldr	r3, [sl, #76]	; 0x4c
   20d28:	orr	r2, r2, #2
   20d2c:	add	r3, r3, #1
   20d30:	strb	r2, [sl, #88]	; 0x58
   20d34:	str	r3, [sl, #76]	; 0x4c
   20d38:	b	1fffc <__assert_fail@plt+0xeb04>
   20d3c:	ldr	r3, [sp, #44]	; 0x2c
   20d40:	sub	r2, r2, #33	; 0x21
   20d44:	clz	r2, r2
   20d48:	ldr	r1, [r3, #64]	; 0x40
   20d4c:	ldr	r3, [sp, #212]	; 0xd4
   20d50:	lsr	r2, r2, #5
   20d54:	str	r2, [sp]
   20d58:	str	r3, [sp, #4]
   20d5c:	ldr	r2, [pc, #644]	; 20fe8 <__assert_fail@plt+0xfaf0>
   20d60:	ldr	r3, [pc, #644]	; 20fec <__assert_fail@plt+0xfaf4>
   20d64:	mov	r0, sl
   20d68:	bl	1fac0 <__assert_fail@plt+0xe5c8>
   20d6c:	ldr	r3, [sp, #212]	; 0xd4
   20d70:	ldr	r3, [r3]
   20d74:	adds	r3, r3, #0
   20d78:	movne	r3, #1
   20d7c:	cmp	r0, #0
   20d80:	movne	r3, #0
   20d84:	cmp	r3, #0
   20d88:	str	r0, [sp, #36]	; 0x24
   20d8c:	beq	1fffc <__assert_fail@plt+0xeb04>
   20d90:	b	200a8 <__assert_fail@plt+0xebb0>
   20d94:	ldr	r2, [sp, #32]
   20d98:	add	r1, sl, #64	; 0x40
   20d9c:	add	r0, sl, #56	; 0x38
   20da0:	bl	1c2b8 <__assert_fail@plt+0xadc0>
   20da4:	subs	r3, r0, #0
   20da8:	str	r3, [sp, #36]	; 0x24
   20dac:	beq	20ec8 <__assert_fail@plt+0xf9d0>
   20db0:	ldr	r3, [sl, #92]	; 0x5c
   20db4:	cmp	r3, #1
   20db8:	ldrbgt	r3, [sl, #88]	; 0x58
   20dbc:	orrgt	r3, r3, #2
   20dc0:	strbgt	r3, [sl, #88]	; 0x58
   20dc4:	b	1fffc <__assert_fail@plt+0xeb04>
   20dc8:	ldr	r3, [sp, #44]	; 0x2c
   20dcc:	sub	r2, r2, #35	; 0x23
   20dd0:	clz	r2, r2
   20dd4:	ldr	r1, [r3, #64]	; 0x40
   20dd8:	ldr	r3, [sp, #212]	; 0xd4
   20ddc:	lsr	r2, r2, #5
   20de0:	str	r2, [sp]
   20de4:	str	r3, [sp, #4]
   20de8:	ldr	r2, [pc, #512]	; 20ff0 <__assert_fail@plt+0xfaf8>
   20dec:	ldr	r3, [pc, #512]	; 20ff4 <__assert_fail@plt+0xfafc>
   20df0:	b	20d64 <__assert_fail@plt+0xf86c>
   20df4:	add	r5, sl, #56	; 0x38
   20df8:	add	r6, sl, #64	; 0x40
   20dfc:	mov	r0, r5
   20e00:	mov	r1, r6
   20e04:	ldr	r2, [sp, #32]
   20e08:	bl	1c2b8 <__assert_fail@plt+0xadc0>
   20e0c:	subs	r3, r0, #0
   20e10:	str	r3, [sp, #36]	; 0x24
   20e14:	beq	20ec8 <__assert_fail@plt+0xf9d0>
   20e18:	ldr	r3, [sl, #92]	; 0x5c
   20e1c:	cmp	r3, #1
   20e20:	ble	1fffc <__assert_fail@plt+0xeb04>
   20e24:	ldr	r8, [sp, #44]	; 0x2c
   20e28:	add	r4, sp, #136	; 0x88
   20e2c:	mov	r7, #0
   20e30:	mov	r9, #16
   20e34:	ldr	r3, [r8, #40]	; 0x28
   20e38:	ldr	r2, [r8, #56]	; 0x38
   20e3c:	cmp	r2, r3
   20e40:	ble	1fffc <__assert_fail@plt+0xeb04>
   20e44:	ldr	r2, [r8, #28]
   20e48:	cmp	r3, r2
   20e4c:	beq	1fffc <__assert_fail@plt+0xeb04>
   20e50:	ldr	r2, [r8, #8]
   20e54:	ldr	r3, [r2, r3, lsl #2]
   20e58:	cmn	r3, #1
   20e5c:	bne	1fffc <__assert_fail@plt+0xeb04>
   20e60:	ldr	fp, [sp, #32]
   20e64:	ldr	r2, [sp, #40]	; 0x28
   20e68:	mov	r1, r8
   20e6c:	mov	r0, fp
   20e70:	bl	1b950 <__assert_fail@plt+0xa458>
   20e74:	ldr	r3, [r8, #40]	; 0x28
   20e78:	mov	r2, fp
   20e7c:	mov	r1, r6
   20e80:	add	r3, r3, r0
   20e84:	str	r3, [r8, #40]	; 0x28
   20e88:	mov	r0, r5
   20e8c:	bl	1c2b8 <__assert_fail@plt+0xadc0>
   20e90:	str	r4, [sp]
   20e94:	ldr	r2, [sp, #36]	; 0x24
   20e98:	str	r7, [r4, #4]
   20e9c:	mov	r1, r6
   20ea0:	str	r7, [r4]
   20ea4:	strb	r9, [sp, #140]	; 0x8c
   20ea8:	mov	fp, r0
   20eac:	mov	r3, r0
   20eb0:	mov	r0, r5
   20eb4:	bl	19794 <__assert_fail@plt+0x829c>
   20eb8:	cmp	r0, #0
   20ebc:	cmpne	fp, #0
   20ec0:	str	r0, [sp, #36]	; 0x24
   20ec4:	bne	20e34 <__assert_fail@plt+0xf93c>
   20ec8:	ldr	r2, [sp, #212]	; 0xd4
   20ecc:	mov	r3, #12
   20ed0:	str	r3, [r2]
   20ed4:	mov	r3, #0
   20ed8:	str	r3, [sp, #36]	; 0x24
   20edc:	b	20044 <__assert_fail@plt+0xeb4c>
   20ee0:	ldr	r3, [sp, #32]
   20ee4:	ldr	r2, [r3]
   20ee8:	ldr	r3, [pc, #264]	; 20ff8 <__assert_fail@plt+0xfb00>
   20eec:	and	r3, r3, r2
   20ef0:	cmp	r3, #0
   20ef4:	beq	20f04 <__assert_fail@plt+0xfa0c>
   20ef8:	ldrb	r3, [sl, #88]	; 0x58
   20efc:	ands	r4, r3, #16
   20f00:	beq	2142c <__assert_fail@plt+0xff34>
   20f04:	sub	r3, r2, #256	; 0x100
   20f08:	bics	r3, r3, #256	; 0x100
   20f0c:	bne	21e6c <__assert_fail@plt+0x10974>
   20f10:	cmp	r2, #256	; 0x100
   20f14:	beq	21e38 <__assert_fail@plt+0x10940>
   20f18:	ldr	r6, [sp, #32]
   20f1c:	mov	r3, #5
   20f20:	add	r5, sl, #56	; 0x38
   20f24:	add	sl, sl, #64	; 0x40
   20f28:	str	r3, [r6]
   20f2c:	mov	r2, r6
   20f30:	mov	r1, sl
   20f34:	mov	r0, r5
   20f38:	bl	1c2b8 <__assert_fail@plt+0xadc0>
   20f3c:	mov	r3, #10
   20f40:	str	r3, [r6]
   20f44:	mov	r4, r0
   20f48:	ldr	r2, [sp, #32]
   20f4c:	mov	r1, sl
   20f50:	mov	r0, r5
   20f54:	bl	1c2b8 <__assert_fail@plt+0xadc0>
   20f58:	mov	r2, #0
   20f5c:	add	ip, sp, #136	; 0x88
   20f60:	str	r2, [sp, #140]	; 0x8c
   20f64:	str	ip, [sp]
   20f68:	str	r2, [sp, #136]	; 0x88
   20f6c:	mov	ip, #10
   20f70:	mov	r1, sl
   20f74:	mov	r2, r4
   20f78:	strb	ip, [sp, #140]	; 0x8c
   20f7c:	mov	r7, r0
   20f80:	mov	r3, r7
   20f84:	mov	r0, r5
   20f88:	bl	19794 <__assert_fail@plt+0x829c>
   20f8c:	cmp	r7, #0
   20f90:	cmpne	r4, #0
   20f94:	moveq	r3, #1
   20f98:	movne	r3, #0
   20f9c:	cmp	r0, #0
   20fa0:	orreq	r3, r3, #1
   20fa4:	cmp	r3, #0
   20fa8:	str	r0, [sp, #36]	; 0x24
   20fac:	bne	20ec8 <__assert_fail@plt+0xf9d0>
   20fb0:	ldr	r4, [sp, #44]	; 0x2c
   20fb4:	ldr	r2, [sp, #40]	; 0x28
   20fb8:	ldr	r0, [sp, #32]
   20fbc:	mov	r1, r4
   20fc0:	bl	1b950 <__assert_fail@plt+0xa458>
   20fc4:	ldr	r3, [r4, #40]	; 0x28
   20fc8:	add	r3, r3, r0
   20fcc:	str	r3, [r4, #40]	; 0x28
   20fd0:	ldr	r0, [sp, #36]	; 0x24
   20fd4:	add	sp, sp, #172	; 0xac
   20fd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20fdc:	addeq	r0, ip, r0, lsl #16
   20fe0:	andeq	r8, r0, r0, lsr r0
   20fe4:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   20fe8:	ldrdeq	ip, [r2], -r8
   20fec:	andeq	ip, r2, r0, lsr #2
   20ff0:	andeq	ip, r2, r8, ror #1
   20ff4:	andeq	fp, r2, r0, lsr r5
   20ff8:	andeq	r0, r0, pc, lsl #6
   20ffc:	mvnseq	r0, #0
   21000:	mov	r3, #0
   21004:	mov	r1, #1
   21008:	mov	r0, #32
   2100c:	str	r3, [sp, #76]	; 0x4c
   21010:	bl	2a748 <__assert_fail@plt+0x19250>
   21014:	mov	r1, #1
   21018:	mov	fp, r0
   2101c:	mov	r0, #40	; 0x28
   21020:	bl	2a748 <__assert_fail@plt+0x19250>
   21024:	cmp	r0, #0
   21028:	cmpne	fp, #0
   2102c:	moveq	r3, #1
   21030:	movne	r3, #0
   21034:	mov	r9, r0
   21038:	str	r3, [sp, #24]
   2103c:	beq	2140c <__assert_fail@plt+0xff14>
   21040:	ldr	r4, [sp, #32]
   21044:	ldr	r2, [sp, #40]	; 0x28
   21048:	ldr	r1, [sp, #44]	; 0x2c
   2104c:	mov	r0, r4
   21050:	bl	1890c <__assert_fail@plt+0x7414>
   21054:	ldrb	r3, [r4, #4]
   21058:	cmp	r3, #2
   2105c:	mov	r8, r0
   21060:	beq	213b8 <__assert_fail@plt+0xfec0>
   21064:	cmp	r3, #25
   21068:	beq	21364 <__assert_fail@plt+0xfe6c>
   2106c:	ldr	r2, [sp, #24]
   21070:	str	r2, [sp, #48]	; 0x30
   21074:	cmp	r3, #21
   21078:	moveq	r3, #1
   2107c:	ldreq	r2, [sp, #32]
   21080:	ldr	r6, [sp, #44]	; 0x2c
   21084:	ldr	r4, [sp, #32]
   21088:	strbeq	r3, [r2, #4]
   2108c:	mov	r3, #0
   21090:	mov	r2, r3
   21094:	str	r3, [sp, #36]	; 0x24
   21098:	ldr	r3, [sp, #40]	; 0x28
   2109c:	mov	lr, #1
   210a0:	str	r2, [sp, #28]
   210a4:	lsr	r3, r3, #16
   210a8:	and	r3, r3, lr
   210ac:	str	r3, [sp, #68]	; 0x44
   210b0:	ldr	r3, [r6, #80]	; 0x50
   210b4:	add	r2, sp, #104	; 0x68
   210b8:	cmp	r3, #1
   210bc:	str	r3, [sp, #52]	; 0x34
   210c0:	str	r2, [sp, #84]	; 0x54
   210c4:	ldr	r3, [r6, #40]	; 0x28
   210c8:	beq	212b4 <__assert_fail@plt+0xfdbc>
   210cc:	ldr	r2, [r6, #28]
   210d0:	add	r1, r3, #1
   210d4:	cmp	r1, r2
   210d8:	bge	212b4 <__assert_fail@plt+0xfdbc>
   210dc:	ldr	ip, [r6, #8]
   210e0:	add	r0, ip, r1, lsl #2
   210e4:	ldr	r1, [ip, r1, lsl #2]
   210e8:	cmn	r1, #1
   210ec:	subeq	r2, r2, r3
   210f0:	moveq	ip, r0
   210f4:	moveq	r1, #1
   210f8:	beq	2110c <__assert_fail@plt+0xfc14>
   210fc:	b	212b4 <__assert_fail@plt+0xfdbc>
   21100:	ldr	r5, [ip, #4]!
   21104:	cmn	r5, #1
   21108:	bne	2111c <__assert_fail@plt+0xfc24>
   2110c:	add	r1, r1, #1
   21110:	cmp	r1, r2
   21114:	add	lr, r1, r3
   21118:	bne	21100 <__assert_fail@plt+0xfc08>
   2111c:	ldr	r3, [r0, #-4]
   21120:	mov	r5, #1
   21124:	str	lr, [r6, #40]	; 0x28
   21128:	str	r3, [sp, #84]	; 0x54
   2112c:	ldr	r2, [sp, #40]	; 0x28
   21130:	mov	r1, r6
   21134:	mov	r0, r4
   21138:	bl	1890c <__assert_fail@plt+0x7414>
   2113c:	mov	r8, r0
   21140:	ldrb	r3, [r4, #4]
   21144:	cmp	r3, #2
   21148:	beq	21a20 <__assert_fail@plt+0x10528>
   2114c:	cmp	r3, #22
   21150:	beq	217ec <__assert_fail@plt+0x102f4>
   21154:	cmp	r5, #2
   21158:	beq	21974 <__assert_fail@plt+0x1047c>
   2115c:	cmp	r5, #3
   21160:	beq	21974 <__assert_fail@plt+0x1047c>
   21164:	cmp	r5, #1
   21168:	beq	217c4 <__assert_fail@plt+0x102cc>
   2116c:	ldrb	r3, [sp, #84]	; 0x54
   21170:	mov	r0, #1
   21174:	and	r1, r3, #31
   21178:	asr	r3, r3, #5
   2117c:	ldr	r2, [fp, r3, lsl #2]
   21180:	orr	r2, r2, r0, lsl r1
   21184:	str	r2, [fp, r3, lsl #2]
   21188:	ldrb	r3, [r4, #4]
   2118c:	cmp	r3, #2
   21190:	beq	21a20 <__assert_fail@plt+0x10528>
   21194:	cmp	r3, #21
   21198:	beq	21480 <__assert_fail@plt+0xff88>
   2119c:	ldr	lr, [sp, #24]
   211a0:	b	210b0 <__assert_fail@plt+0xfbb8>
   211a4:	ldr	r2, [sp, #212]	; 0xd4
   211a8:	mov	r3, #5
   211ac:	str	r3, [r2]
   211b0:	mov	r3, #0
   211b4:	str	r3, [sp, #36]	; 0x24
   211b8:	ldr	r0, [sp, #36]	; 0x24
   211bc:	add	sp, sp, #172	; 0xac
   211c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   211c4:	ldr	r5, [r1, #24]
   211c8:	ldr	r7, [sp, #44]	; 0x2c
   211cc:	ldr	r8, [sp, #32]
   211d0:	ldr	r9, [sp, #40]	; 0x28
   211d4:	add	r3, r5, #1
   211d8:	str	r3, [r1, #24]
   211dc:	orr	r2, r9, #8388608	; 0x800000
   211e0:	mov	r1, r7
   211e4:	mov	r0, r8
   211e8:	bl	1b950 <__assert_fail@plt+0xa458>
   211ec:	ldrb	r2, [r8, #4]
   211f0:	ldr	r3, [r7, #40]	; 0x28
   211f4:	mov	r1, r7
   211f8:	cmp	r2, #9
   211fc:	add	r6, r6, #1
   21200:	add	r3, r3, r0
   21204:	str	r3, [r7, #40]	; 0x28
   21208:	mov	r0, r7
   2120c:	bne	20050 <__assert_fail@plt+0xeb58>
   21210:	mov	r2, #0
   21214:	cmp	r5, #8
   21218:	movls	r1, #1
   2121c:	ldrls	r3, [sl, #84]	; 0x54
   21220:	mov	r0, #0
   21224:	orrls	r3, r3, r1, lsl r5
   21228:	add	ip, sp, #136	; 0x88
   2122c:	strls	r3, [sl, #84]	; 0x54
   21230:	mov	lr, #17
   21234:	mov	r3, r0
   21238:	str	r0, [sp, #140]	; 0x8c
   2123c:	str	r0, [sp, #136]	; 0x88
   21240:	str	ip, [sp]
   21244:	add	r1, sl, #64	; 0x40
   21248:	add	r0, sl, #56	; 0x38
   2124c:	strb	lr, [sp, #140]	; 0x8c
   21250:	bl	19794 <__assert_fail@plt+0x829c>
   21254:	subs	r3, r0, #0
   21258:	str	r3, [sp, #36]	; 0x24
   2125c:	beq	20ec8 <__assert_fail@plt+0xf9d0>
   21260:	str	r5, [r3, #20]
   21264:	b	1fffc <__assert_fail@plt+0xeb04>
   21268:	ldr	r3, [sp, #40]	; 0x28
   2126c:	ands	r2, r3, #131072	; 0x20000
   21270:	bne	1ffd8 <__assert_fail@plt+0xeae0>
   21274:	str	r2, [sp, #36]	; 0x24
   21278:	ldr	r2, [sp, #212]	; 0xd4
   2127c:	mov	r3, #16
   21280:	str	r3, [r2]
   21284:	b	20044 <__assert_fail@plt+0xeb4c>
   21288:	str	ip, [r6]
   2128c:	mov	r5, fp
   21290:	b	20844 <__assert_fail@plt+0xf34c>
   21294:	ldr	r5, [sp, #36]	; 0x24
   21298:	mov	r8, r5
   2129c:	b	208e4 <__assert_fail@plt+0xf3ec>
   212a0:	ldr	r3, [sp, #60]	; 0x3c
   212a4:	ldr	r5, [sp, #20]
   212a8:	cmp	r3, #0
   212ac:	bne	20678 <__assert_fail@plt+0xf180>
   212b0:	b	21348 <__assert_fail@plt+0xfe50>
   212b4:	ldrb	r2, [r4, #4]
   212b8:	add	r8, r8, r3
   212bc:	str	r8, [r6, #40]	; 0x28
   212c0:	and	r3, r2, #251	; 0xfb
   212c4:	cmp	r2, #28
   212c8:	cmpne	r3, #26
   212cc:	beq	21d14 <__assert_fail@plt+0x1081c>
   212d0:	cmp	r2, #22
   212d4:	moveq	r2, lr
   212d8:	orrne	r2, lr, #1
   212dc:	cmp	r2, #0
   212e0:	beq	21cf4 <__assert_fail@plt+0x107fc>
   212e4:	ldrb	r3, [r4]
   212e8:	mov	r5, #0
   212ec:	strb	r3, [sp, #84]	; 0x54
   212f0:	b	2112c <__assert_fail@plt+0xfc34>
   212f4:	cmn	r8, #2
   212f8:	mov	r2, r8
   212fc:	mov	r4, r5
   21300:	movne	r2, #0
   21304:	moveq	r2, #1
   21308:	orrs	r2, r4, r2
   2130c:	ldr	r5, [sp, #20]
   21310:	str	r8, [sp, #24]
   21314:	bne	2066c <__assert_fail@plt+0xf174>
   21318:	ldr	r2, [sp, #24]
   2131c:	cmn	r2, #1
   21320:	cmpne	r9, r2
   21324:	bgt	20bd4 <__assert_fail@plt+0xf6dc>
   21328:	cmp	r3, #24
   2132c:	beq	20a9c <__assert_fail@plt+0xf5a4>
   21330:	ldr	r2, [sp, #212]	; 0xd4
   21334:	mov	r3, #10
   21338:	str	r3, [r2]
   2133c:	b	20448 <__assert_fail@plt+0xef50>
   21340:	cmp	r3, #2
   21344:	bne	20bd4 <__assert_fail@plt+0xf6dc>
   21348:	ldr	r2, [sp, #212]	; 0xd4
   2134c:	mov	r3, #9
   21350:	str	r3, [r2]
   21354:	b	20448 <__assert_fail@plt+0xef50>
   21358:	mov	r8, r7
   2135c:	ldr	r0, [sp, #32]
   21360:	b	20c38 <__assert_fail@plt+0xf740>
   21364:	ldrb	r3, [r9, #16]
   21368:	ldr	r2, [sp, #40]	; 0x28
   2136c:	ldr	r1, [sp, #44]	; 0x2c
   21370:	tst	r2, #256	; 0x100
   21374:	orr	r3, r3, #1
   21378:	strb	r3, [r9, #16]
   2137c:	ldrne	r3, [fp]
   21380:	ldr	r4, [sp, #32]
   21384:	orrne	r3, r3, #1024	; 0x400
   21388:	strne	r3, [fp]
   2138c:	ldr	r3, [r1, #40]	; 0x28
   21390:	add	r3, r3, r0
   21394:	str	r3, [r1, #40]	; 0x28
   21398:	mov	r0, r4
   2139c:	bl	1890c <__assert_fail@plt+0x7414>
   213a0:	ldrb	r3, [r4, #4]
   213a4:	cmp	r3, #2
   213a8:	mov	r8, r0
   213ac:	movne	r2, #1
   213b0:	strne	r2, [sp, #48]	; 0x30
   213b4:	bne	21074 <__assert_fail@plt+0xfb7c>
   213b8:	ldr	r2, [sp, #212]	; 0xd4
   213bc:	mov	r3, #2
   213c0:	str	r3, [r2]
   213c4:	mov	r0, fp
   213c8:	bl	14214 <__assert_fail@plt+0x2d1c>
   213cc:	ldr	r0, [r9]
   213d0:	bl	14214 <__assert_fail@plt+0x2d1c>
   213d4:	ldr	r0, [r9, #4]
   213d8:	bl	14214 <__assert_fail@plt+0x2d1c>
   213dc:	ldr	r0, [r9, #8]
   213e0:	bl	14214 <__assert_fail@plt+0x2d1c>
   213e4:	ldr	r0, [r9, #12]
   213e8:	bl	14214 <__assert_fail@plt+0x2d1c>
   213ec:	mov	r0, r9
   213f0:	bl	14214 <__assert_fail@plt+0x2d1c>
   213f4:	ldr	r3, [sp, #212]	; 0xd4
   213f8:	ldr	r3, [r3]
   213fc:	cmp	r3, #0
   21400:	bne	200a8 <__assert_fail@plt+0xebb0>
   21404:	str	r3, [sp, #36]	; 0x24
   21408:	b	1fffc <__assert_fail@plt+0xeb04>
   2140c:	mov	r0, fp
   21410:	bl	14214 <__assert_fail@plt+0x2d1c>
   21414:	mov	r0, r9
   21418:	bl	14214 <__assert_fail@plt+0x2d1c>
   2141c:	ldr	r2, [sp, #212]	; 0xd4
   21420:	mov	r3, #12
   21424:	str	r3, [r2]
   21428:	b	200a8 <__assert_fail@plt+0xebb0>
   2142c:	orr	r3, r3, #16
   21430:	ands	r2, r3, #8
   21434:	mov	r1, r3
   21438:	strb	r3, [sl, #88]	; 0x58
   2143c:	bne	217bc <__assert_fail@plt+0x102c4>
   21440:	ldr	r3, [pc, #-1100]	; 20ffc <__assert_fail@plt+0xfb04>
   21444:	tst	r1, #4
   21448:	str	r3, [sl, #100]	; 0x64
   2144c:	mvn	r1, #2013265921	; 0x78000001
   21450:	mvn	r3, #-134217727	; 0xf8000001
   21454:	str	r2, [sl, #96]	; 0x60
   21458:	str	r1, [sl, #104]	; 0x68
   2145c:	str	r3, [sl, #108]	; 0x6c
   21460:	beq	2173c <__assert_fail@plt+0x10244>
   21464:	ldr	r3, [sp, #32]
   21468:	str	r2, [sl, #112]	; 0x70
   2146c:	str	r2, [sl, #116]	; 0x74
   21470:	str	r2, [sl, #120]	; 0x78
   21474:	str	r2, [sl, #124]	; 0x7c
   21478:	ldr	r2, [r3]
   2147c:	b	20f04 <__assert_fail@plt+0xfa0c>
   21480:	ldr	r2, [sp, #44]	; 0x2c
   21484:	ldr	r1, [sp, #48]	; 0x30
   21488:	ldr	r3, [r2, #40]	; 0x28
   2148c:	cmp	r1, #0
   21490:	add	r3, r3, r8
   21494:	str	r3, [r2, #40]	; 0x28
   21498:	beq	214f8 <__assert_fail@plt+0x10000>
   2149c:	ldm	fp, {r2, r3}
   214a0:	ldr	r1, [fp, #8]
   214a4:	mvn	r2, r2
   214a8:	mvn	r3, r3
   214ac:	str	r2, [fp]
   214b0:	str	r3, [fp, #4]
   214b4:	ldr	r2, [fp, #12]
   214b8:	ldr	r3, [fp, #16]
   214bc:	mvn	r1, r1
   214c0:	mvn	r2, r2
   214c4:	mvn	r3, r3
   214c8:	str	r1, [fp, #8]
   214cc:	str	r2, [fp, #12]
   214d0:	ldr	r1, [fp, #20]
   214d4:	ldr	r2, [fp, #24]
   214d8:	str	r3, [fp, #16]
   214dc:	ldr	r3, [fp, #28]
   214e0:	mvn	r1, r1
   214e4:	mvn	r2, r2
   214e8:	mvn	r3, r3
   214ec:	str	r1, [fp, #20]
   214f0:	str	r2, [fp, #24]
   214f4:	str	r3, [fp, #28]
   214f8:	ldr	r0, [sl, #92]	; 0x5c
   214fc:	cmp	r0, #1
   21500:	ble	21584 <__assert_fail@plt+0x1008c>
   21504:	ldr	r3, [sl, #60]	; 0x3c
   21508:	ldm	fp, {r1, r2}
   2150c:	ldr	ip, [r3]
   21510:	and	r1, r1, ip
   21514:	str	r1, [fp]
   21518:	ldr	ip, [r3, #4]
   2151c:	ldr	r1, [fp, #8]
   21520:	and	r2, r2, ip
   21524:	str	r2, [fp, #4]
   21528:	ldr	ip, [r3, #8]
   2152c:	ldr	r2, [fp, #12]
   21530:	and	r1, r1, ip
   21534:	str	r1, [fp, #8]
   21538:	ldr	ip, [r3, #12]
   2153c:	ldr	r1, [fp, #16]
   21540:	and	r2, r2, ip
   21544:	str	r2, [fp, #12]
   21548:	ldr	ip, [r3, #16]
   2154c:	ldr	r2, [fp, #20]
   21550:	and	r1, r1, ip
   21554:	str	r1, [fp, #16]
   21558:	ldr	ip, [r3, #20]
   2155c:	ldr	r1, [fp, #24]
   21560:	and	r2, r2, ip
   21564:	str	r2, [fp, #20]
   21568:	ldr	ip, [r3, #24]
   2156c:	ldr	r2, [fp, #28]
   21570:	and	r1, r1, ip
   21574:	str	r1, [fp, #24]
   21578:	ldr	r3, [r3, #28]
   2157c:	and	r3, r3, r2
   21580:	str	r3, [fp, #28]
   21584:	ldr	r3, [r9, #20]
   21588:	cmp	r3, #0
   2158c:	bne	215d4 <__assert_fail@plt+0x100dc>
   21590:	ldr	r3, [r9, #24]
   21594:	cmp	r3, #0
   21598:	bne	215d4 <__assert_fail@plt+0x100dc>
   2159c:	ldr	r3, [r9, #28]
   215a0:	cmp	r3, #0
   215a4:	bne	215d4 <__assert_fail@plt+0x100dc>
   215a8:	ldr	r3, [r9, #32]
   215ac:	cmp	r3, #0
   215b0:	bne	215d4 <__assert_fail@plt+0x100dc>
   215b4:	cmp	r0, #1
   215b8:	ble	2167c <__assert_fail@plt+0x10184>
   215bc:	ldr	r3, [r9, #36]	; 0x24
   215c0:	cmp	r3, #0
   215c4:	bne	215d4 <__assert_fail@plt+0x100dc>
   215c8:	ldrb	r3, [r9, #16]
   215cc:	tst	r3, #1
   215d0:	beq	2167c <__assert_fail@plt+0x10184>
   215d4:	ldrb	r3, [sl, #88]	; 0x58
   215d8:	add	r4, sl, #56	; 0x38
   215dc:	add	r5, sl, #64	; 0x40
   215e0:	orr	r3, r3, #2
   215e4:	strb	r3, [sl, #88]	; 0x58
   215e8:	mov	r0, r4
   215ec:	mov	r3, #6
   215f0:	mov	r1, r5
   215f4:	add	r2, sp, #104	; 0x68
   215f8:	strb	r3, [sp, #108]	; 0x6c
   215fc:	str	r9, [sp, #104]	; 0x68
   21600:	bl	1c2b8 <__assert_fail@plt+0xadc0>
   21604:	subs	r3, r0, #0
   21608:	str	r3, [sp, #36]	; 0x24
   2160c:	beq	216cc <__assert_fail@plt+0x101d4>
   21610:	ldr	r3, [fp]
   21614:	cmp	r3, #0
   21618:	bne	216dc <__assert_fail@plt+0x101e4>
   2161c:	ldr	r3, [fp, #4]
   21620:	cmp	r3, #0
   21624:	bne	216dc <__assert_fail@plt+0x101e4>
   21628:	ldr	r3, [fp, #8]
   2162c:	cmp	r3, #0
   21630:	bne	216dc <__assert_fail@plt+0x101e4>
   21634:	ldr	r3, [fp, #12]
   21638:	cmp	r3, #0
   2163c:	bne	216dc <__assert_fail@plt+0x101e4>
   21640:	ldr	r3, [fp, #16]
   21644:	cmp	r3, #0
   21648:	bne	216dc <__assert_fail@plt+0x101e4>
   2164c:	ldr	r3, [fp, #20]
   21650:	cmp	r3, #0
   21654:	bne	216dc <__assert_fail@plt+0x101e4>
   21658:	ldr	r3, [fp, #24]
   2165c:	cmp	r3, #0
   21660:	bne	216dc <__assert_fail@plt+0x101e4>
   21664:	ldr	r3, [fp, #28]
   21668:	cmp	r3, #0
   2166c:	bne	216dc <__assert_fail@plt+0x101e4>
   21670:	mov	r0, fp
   21674:	bl	14214 <__assert_fail@plt+0x2d1c>
   21678:	b	1fffc <__assert_fail@plt+0xeb04>
   2167c:	ldr	r0, [r9]
   21680:	bl	14214 <__assert_fail@plt+0x2d1c>
   21684:	ldr	r0, [r9, #4]
   21688:	bl	14214 <__assert_fail@plt+0x2d1c>
   2168c:	ldr	r0, [r9, #8]
   21690:	bl	14214 <__assert_fail@plt+0x2d1c>
   21694:	ldr	r0, [r9, #12]
   21698:	bl	14214 <__assert_fail@plt+0x2d1c>
   2169c:	mov	r0, r9
   216a0:	bl	14214 <__assert_fail@plt+0x2d1c>
   216a4:	mov	r3, #3
   216a8:	add	r2, sp, #104	; 0x68
   216ac:	add	r1, sl, #64	; 0x40
   216b0:	add	r0, sl, #56	; 0x38
   216b4:	strb	r3, [sp, #108]	; 0x6c
   216b8:	str	fp, [sp, #104]	; 0x68
   216bc:	bl	1c2b8 <__assert_fail@plt+0xadc0>
   216c0:	subs	r3, r0, #0
   216c4:	str	r3, [sp, #36]	; 0x24
   216c8:	bne	1fffc <__assert_fail@plt+0xeb04>
   216cc:	mov	r3, #12
   216d0:	ldr	r2, [sp, #212]	; 0xd4
   216d4:	str	r3, [r2]
   216d8:	b	213c4 <__assert_fail@plt+0xfecc>
   216dc:	add	r2, sp, #104	; 0x68
   216e0:	mov	r3, #3
   216e4:	mov	r1, r5
   216e8:	mov	r0, r4
   216ec:	str	fp, [sp, #104]	; 0x68
   216f0:	strb	r3, [sp, #108]	; 0x6c
   216f4:	bl	1c2b8 <__assert_fail@plt+0xadc0>
   216f8:	subs	r2, r0, #0
   216fc:	beq	216cc <__assert_fail@plt+0x101d4>
   21700:	add	ip, sp, #136	; 0x88
   21704:	mov	lr, #0
   21708:	ldr	r3, [sp, #36]	; 0x24
   2170c:	mov	r0, r4
   21710:	mov	r1, r5
   21714:	str	ip, [sp]
   21718:	mov	r4, #10
   2171c:	str	lr, [sp, #140]	; 0x8c
   21720:	str	lr, [sp, #136]	; 0x88
   21724:	strb	r4, [sp, #140]	; 0x8c
   21728:	bl	19794 <__assert_fail@plt+0x829c>
   2172c:	subs	r3, r0, #0
   21730:	str	r3, [sp, #36]	; 0x24
   21734:	bne	1fffc <__assert_fail@plt+0xeb04>
   21738:	b	216cc <__assert_fail@plt+0x101d4>
   2173c:	mov	r4, #128	; 0x80
   21740:	mov	r5, #4
   21744:	bl	113a8 <__ctype_b_loc@plt>
   21748:	sub	r3, r4, #-2147483647	; 0x80000001
   2174c:	mov	ip, #1
   21750:	add	r2, r5, #24
   21754:	add	r2, sl, r2, lsl #2
   21758:	ldr	r1, [r0]
   2175c:	add	r1, r1, r3, lsl ip
   21760:	mov	r6, r1
   21764:	mov	r3, #0
   21768:	ldrh	r0, [r6, #2]!
   2176c:	add	lr, r3, r4
   21770:	lsr	r0, r0, #3
   21774:	cmp	lr, #95	; 0x5f
   21778:	orreq	r0, r0, #1
   2177c:	tst	r0, #1
   21780:	ldrne	r0, [r2]
   21784:	orrne	r0, r0, ip, lsl r3
   21788:	add	r3, r3, #1
   2178c:	strne	r0, [r2]
   21790:	cmp	r3, #32
   21794:	bne	21768 <__assert_fail@plt+0x10270>
   21798:	add	r5, r5, #1
   2179c:	cmp	r5, #8
   217a0:	add	r4, r4, #32
   217a4:	add	r1, r1, #64	; 0x40
   217a8:	add	r2, r2, #4
   217ac:	bne	21760 <__assert_fail@plt+0x10268>
   217b0:	ldr	r3, [sp, #32]
   217b4:	ldr	r2, [r3]
   217b8:	b	20f04 <__assert_fail@plt+0xfa0c>
   217bc:	mov	r5, r4
   217c0:	b	21744 <__assert_fail@plt+0x1024c>
   217c4:	ldr	r3, [r9, #20]
   217c8:	ldr	r2, [sp, #28]
   217cc:	cmp	r3, r2
   217d0:	beq	21a28 <__assert_fail@plt+0x10530>
   217d4:	ldr	r0, [r9]
   217d8:	ldr	r2, [sp, #84]	; 0x54
   217dc:	add	r1, r3, #1
   217e0:	str	r1, [r9, #20]
   217e4:	str	r2, [r0, r3, lsl #2]
   217e8:	b	21188 <__assert_fail@plt+0xfc90>
   217ec:	ldr	r3, [r6, #40]	; 0x28
   217f0:	mov	r1, r6
   217f4:	add	r3, r3, r8
   217f8:	ldr	r2, [sp, #40]	; 0x28
   217fc:	str	r3, [r6, #40]	; 0x28
   21800:	add	r0, sp, #96	; 0x60
   21804:	bl	1890c <__assert_fail@plt+0x7414>
   21808:	ldrb	r1, [sp, #100]	; 0x64
   2180c:	cmp	r1, #2
   21810:	mov	r7, r0
   21814:	beq	21a20 <__assert_fail@plt+0x10528>
   21818:	cmp	r1, #21
   2181c:	beq	21c60 <__assert_fail@plt+0x10768>
   21820:	ldr	r3, [r6, #80]	; 0x50
   21824:	add	r2, sp, #136	; 0x88
   21828:	cmp	r3, #1
   2182c:	str	r3, [sp, #56]	; 0x38
   21830:	str	r2, [sp, #92]	; 0x5c
   21834:	ldr	r3, [r6, #40]	; 0x28
   21838:	beq	21c24 <__assert_fail@plt+0x1072c>
   2183c:	ldr	r2, [r6, #28]
   21840:	add	r0, r3, #1
   21844:	cmp	r2, r0
   21848:	ble	21c24 <__assert_fail@plt+0x1072c>
   2184c:	ldr	lr, [r6, #8]
   21850:	add	ip, lr, r0, lsl #2
   21854:	ldr	r0, [lr, r0, lsl #2]
   21858:	cmn	r0, #1
   2185c:	subeq	r2, r2, r3
   21860:	moveq	r0, ip
   21864:	moveq	r1, #1
   21868:	bne	21c24 <__assert_fail@plt+0x1072c>
   2186c:	add	r1, r1, #1
   21870:	cmp	r1, r2
   21874:	add	lr, r1, r3
   21878:	beq	21888 <__assert_fail@plt+0x10390>
   2187c:	ldr	r7, [r0, #4]!
   21880:	cmn	r7, #1
   21884:	beq	2186c <__assert_fail@plt+0x10374>
   21888:	ldr	r3, [ip, #-4]
   2188c:	mov	r7, #1
   21890:	str	r3, [sp, #92]	; 0x5c
   21894:	ldr	r3, [sp, #24]
   21898:	str	lr, [r6, #40]	; 0x28
   2189c:	str	r3, [sp, #20]
   218a0:	ldr	r2, [sp, #40]	; 0x28
   218a4:	mov	r1, r6
   218a8:	mov	r0, r4
   218ac:	bl	1890c <__assert_fail@plt+0x7414>
   218b0:	sub	r3, r5, #2
   218b4:	bics	r3, r3, #2
   218b8:	mov	r8, r0
   218bc:	beq	21c1c <__assert_fail@plt+0x10724>
   218c0:	cmp	r5, #3
   218c4:	moveq	r3, #1
   218c8:	movne	r3, #0
   218cc:	str	r3, [sp, #52]	; 0x34
   218d0:	beq	21c04 <__assert_fail@plt+0x1070c>
   218d4:	cmp	r7, #3
   218d8:	beq	21be8 <__assert_fail@plt+0x106f0>
   218dc:	cmp	r5, #0
   218e0:	bne	21bd4 <__assert_fail@plt+0x106dc>
   218e4:	ldrb	r3, [sp, #84]	; 0x54
   218e8:	cmp	r7, #0
   218ec:	bne	21bc0 <__assert_fail@plt+0x106c8>
   218f0:	ldrb	r7, [sp, #92]	; 0x5c
   218f4:	ldr	r2, [sp, #52]	; 0x34
   218f8:	cmp	r5, #0
   218fc:	orreq	r2, r2, #1
   21900:	cmp	r2, #0
   21904:	beq	21bb8 <__assert_fail@plt+0x106c0>
   21908:	ldr	r2, [sl, #92]	; 0x5c
   2190c:	cmp	r2, #1
   21910:	ble	21a6c <__assert_fail@plt+0x10574>
   21914:	mov	r0, r3
   21918:	bl	11420 <btowc@plt>
   2191c:	mov	r3, r0
   21920:	ldr	r2, [sp, #20]
   21924:	cmp	r2, #0
   21928:	beq	21a64 <__assert_fail@plt+0x1056c>
   2192c:	ldr	r2, [sl, #92]	; 0x5c
   21930:	cmp	r2, #1
   21934:	ble	2194c <__assert_fail@plt+0x10454>
   21938:	mov	r0, r7
   2193c:	str	r3, [sp, #20]
   21940:	bl	11420 <btowc@plt>
   21944:	ldr	r3, [sp, #20]
   21948:	mov	r7, r0
   2194c:	cmn	r3, #1
   21950:	cmnne	r7, #1
   21954:	bne	21a78 <__assert_fail@plt+0x10580>
   21958:	mov	r3, #3
   2195c:	b	216d0 <__assert_fail@plt+0x101d8>
   21960:	ldr	r2, [sp, #40]	; 0x28
   21964:	mov	r1, r6
   21968:	mov	r0, r4
   2196c:	bl	1890c <__assert_fail@plt+0x7414>
   21970:	mov	r8, r0
   21974:	ldr	r5, [sp, #84]	; 0x54
   21978:	mov	r0, r5
   2197c:	bl	113c0 <strlen@plt>
   21980:	cmp	r0, #1
   21984:	bne	21a54 <__assert_fail@plt+0x1055c>
   21988:	ldrb	r3, [r5]
   2198c:	ldr	r2, [sp, #212]	; 0xd4
   21990:	mov	r1, #0
   21994:	str	r1, [r2]
   21998:	and	r1, r3, #31
   2199c:	asr	r3, r3, #5
   219a0:	ldr	r2, [fp, r3, lsl #2]
   219a4:	orr	r2, r2, r0, lsl r1
   219a8:	str	r2, [fp, r3, lsl #2]
   219ac:	b	21188 <__assert_fail@plt+0xfc90>
   219b0:	ldr	r2, [r6, #56]	; 0x38
   219b4:	ldrb	r0, [sp, #96]	; 0x60
   219b8:	cmp	r3, r2
   219bc:	str	r2, [sp, #64]	; 0x40
   219c0:	str	r0, [sp, #60]	; 0x3c
   219c4:	bge	21a20 <__assert_fail@plt+0x10528>
   219c8:	mov	lr, #0
   219cc:	add	r2, sp, #136	; 0x88
   219d0:	str	r2, [sp, #52]	; 0x34
   219d4:	cmp	r1, #30
   219d8:	beq	21ecc <__assert_fail@plt+0x109d4>
   219dc:	ldr	r2, [r6, #4]
   219e0:	add	r0, r3, #1
   219e4:	str	r0, [r6, #40]	; 0x28
   219e8:	ldrb	r2, [r2, r3]
   219ec:	mov	r3, r0
   219f0:	ldr	r0, [sp, #64]	; 0x40
   219f4:	cmp	r0, r3
   219f8:	ble	21a20 <__assert_fail@plt+0x10528>
   219fc:	ldr	r0, [sp, #60]	; 0x3c
   21a00:	cmp	r0, r2
   21a04:	beq	21e8c <__assert_fail@plt+0x10994>
   21a08:	ldr	r0, [sp, #52]	; 0x34
   21a0c:	add	lr, lr, #1
   21a10:	cmp	lr, #32
   21a14:	strb	r2, [r0], #1
   21a18:	str	r0, [sp, #52]	; 0x34
   21a1c:	bne	219d4 <__assert_fail@plt+0x104dc>
   21a20:	mov	r3, #7
   21a24:	b	216d0 <__assert_fail@plt+0x101d8>
   21a28:	lsl	r3, r2, #1
   21a2c:	add	r3, r3, #1
   21a30:	ldr	r0, [r9]
   21a34:	lsl	r1, r3, #2
   21a38:	str	r3, [sp, #28]
   21a3c:	bl	2a7bc <__assert_fail@plt+0x192c4>
   21a40:	cmp	r0, #0
   21a44:	beq	216cc <__assert_fail@plt+0x101d4>
   21a48:	ldr	r3, [r9, #20]
   21a4c:	str	r0, [r9]
   21a50:	b	217d8 <__assert_fail@plt+0x102e0>
   21a54:	ldr	r2, [sp, #212]	; 0xd4
   21a58:	mov	r3, #3
   21a5c:	str	r3, [r2]
   21a60:	b	213c4 <__assert_fail@plt+0xfecc>
   21a64:	ldr	r7, [sp, #92]	; 0x5c
   21a68:	b	2194c <__assert_fail@plt+0x10454>
   21a6c:	ldr	r2, [sp, #20]
   21a70:	cmp	r2, #0
   21a74:	beq	21a64 <__assert_fail@plt+0x1056c>
   21a78:	ldr	r2, [sp, #68]	; 0x44
   21a7c:	cmp	r7, r3
   21a80:	movcs	r2, #0
   21a84:	andcc	r2, r2, #1
   21a88:	cmp	r2, #0
   21a8c:	bne	21b38 <__assert_fail@plt+0x10640>
   21a90:	ldr	r2, [sl, #92]	; 0x5c
   21a94:	cmp	r2, #1
   21a98:	ble	21ac8 <__assert_fail@plt+0x105d0>
   21a9c:	ldr	r2, [r9, #32]
   21aa0:	ldr	r1, [sp, #36]	; 0x24
   21aa4:	cmp	r2, r1
   21aa8:	beq	21b40 <__assert_fail@plt+0x10648>
   21aac:	ldr	r5, [r9, #4]
   21ab0:	ldr	r0, [r9, #8]
   21ab4:	str	r3, [r5, r2, lsl #2]
   21ab8:	ldr	r2, [r9, #32]
   21abc:	add	r1, r2, #1
   21ac0:	str	r1, [r9, #32]
   21ac4:	str	r7, [r0, r2, lsl #2]
   21ac8:	mov	r2, #0
   21acc:	cmp	r2, r3
   21ad0:	movcc	r1, #0
   21ad4:	movcs	r1, #1
   21ad8:	cmp	r2, r7
   21adc:	movhi	r1, #0
   21ae0:	cmp	r1, #0
   21ae4:	beq	21b00 <__assert_fail@plt+0x10608>
   21ae8:	asr	ip, r2, #5
   21aec:	and	r0, r2, #31
   21af0:	ldr	r1, [fp, ip, lsl #2]
   21af4:	mov	lr, #1
   21af8:	orr	r1, r1, lr, lsl r0
   21afc:	str	r1, [fp, ip, lsl #2]
   21b00:	add	r2, r2, #1
   21b04:	cmp	r2, #256	; 0x100
   21b08:	bne	21acc <__assert_fail@plt+0x105d4>
   21b0c:	ldr	r3, [sp, #212]	; 0xd4
   21b10:	mov	r2, #0
   21b14:	str	r2, [r3]
   21b18:	b	21188 <__assert_fail@plt+0xfc90>
   21b1c:	ldr	r2, [sp, #40]	; 0x28
   21b20:	ldr	r1, [sp, #44]	; 0x2c
   21b24:	ldr	r0, [sp, #32]
   21b28:	bl	1890c <__assert_fail@plt+0x7414>
   21b2c:	sub	r3, r5, #2
   21b30:	bics	r3, r3, #2
   21b34:	beq	21c1c <__assert_fail@plt+0x10724>
   21b38:	mov	r3, #11
   21b3c:	b	216d0 <__assert_fail@plt+0x101d8>
   21b40:	str	r3, [sp, #52]	; 0x34
   21b44:	ldr	r3, [sp, #36]	; 0x24
   21b48:	ldr	r0, [r9, #4]
   21b4c:	lsl	r2, r3, #1
   21b50:	add	r3, r2, #1
   21b54:	str	r3, [sp, #36]	; 0x24
   21b58:	lsl	r2, r3, #2
   21b5c:	mov	r1, r2
   21b60:	str	r2, [sp, #20]
   21b64:	bl	2a7bc <__assert_fail@plt+0x192c4>
   21b68:	ldr	r2, [sp, #20]
   21b6c:	mov	r1, r2
   21b70:	mov	r5, r0
   21b74:	ldr	r0, [r9, #8]
   21b78:	bl	2a7bc <__assert_fail@plt+0x192c4>
   21b7c:	ldr	r3, [sp, #52]	; 0x34
   21b80:	cmp	r0, #0
   21b84:	cmpne	r5, #0
   21b88:	ldrne	r2, [r9, #32]
   21b8c:	strne	r5, [r9, #4]
   21b90:	strne	r0, [r9, #8]
   21b94:	bne	21ab4 <__assert_fail@plt+0x105bc>
   21b98:	mov	r4, r5
   21b9c:	mov	r5, r0
   21ba0:	mov	r0, r4
   21ba4:	bl	14214 <__assert_fail@plt+0x2d1c>
   21ba8:	mov	r0, r5
   21bac:	bl	14214 <__assert_fail@plt+0x2d1c>
   21bb0:	mov	r3, #12
   21bb4:	b	216d0 <__assert_fail@plt+0x101d8>
   21bb8:	ldr	r3, [sp, #84]	; 0x54
   21bbc:	b	21920 <__assert_fail@plt+0x10428>
   21bc0:	cmp	r7, #3
   21bc4:	movne	r7, #0
   21bc8:	ldreq	r2, [sp, #92]	; 0x5c
   21bcc:	ldrbeq	r7, [r2]
   21bd0:	b	218f4 <__assert_fail@plt+0x103fc>
   21bd4:	cmp	r5, #3
   21bd8:	movne	r3, #0
   21bdc:	ldreq	r3, [sp, #84]	; 0x54
   21be0:	ldrbeq	r3, [r3]
   21be4:	b	218e8 <__assert_fail@plt+0x103f0>
   21be8:	ldr	r0, [sp, #92]	; 0x5c
   21bec:	bl	113c0 <strlen@plt>
   21bf0:	cmp	r0, #1
   21bf4:	bls	218dc <__assert_fail@plt+0x103e4>
   21bf8:	ldr	r3, [sp, #212]	; 0xd4
   21bfc:	str	r7, [r3]
   21c00:	b	213c4 <__assert_fail@plt+0xfecc>
   21c04:	ldr	r0, [sp, #84]	; 0x54
   21c08:	bl	113c0 <strlen@plt>
   21c0c:	cmp	r0, #1
   21c10:	bls	218d4 <__assert_fail@plt+0x103dc>
   21c14:	mov	r7, r5
   21c18:	b	21bf8 <__assert_fail@plt+0x10700>
   21c1c:	mov	r7, #11
   21c20:	b	21bf8 <__assert_fail@plt+0x10700>
   21c24:	and	r2, r1, #251	; 0xfb
   21c28:	cmp	r1, #28
   21c2c:	cmpne	r2, #26
   21c30:	add	r3, r7, r3
   21c34:	moveq	r2, #1
   21c38:	movne	r2, #0
   21c3c:	str	r2, [sp, #20]
   21c40:	str	r3, [r6, #40]	; 0x28
   21c44:	beq	219b0 <__assert_fail@plt+0x104b8>
   21c48:	ldrb	r3, [sp, #96]	; 0x60
   21c4c:	mov	r2, #1
   21c50:	str	r2, [sp, #20]
   21c54:	mov	r7, #0
   21c58:	strb	r3, [sp, #92]	; 0x5c
   21c5c:	b	218a0 <__assert_fail@plt+0x103a8>
   21c60:	ldr	r3, [r6, #40]	; 0x28
   21c64:	sub	r3, r3, r8
   21c68:	str	r3, [r6, #40]	; 0x28
   21c6c:	mov	r3, #1
   21c70:	strb	r3, [r4, #4]
   21c74:	b	21154 <__assert_fail@plt+0xfc5c>
   21c78:	ldr	r5, [sp, #44]	; 0x2c
   21c7c:	ldr	r7, [sp, #32]
   21c80:	mov	r2, r3
   21c84:	mov	r1, r5
   21c88:	mov	r0, r7
   21c8c:	mov	r8, r3
   21c90:	bl	1b950 <__assert_fail@plt+0xa458>
   21c94:	ldr	ip, [r5, #40]	; 0x28
   21c98:	ldr	r3, [sp, #212]	; 0xd4
   21c9c:	str	r6, [sp]
   21ca0:	str	r3, [sp, #4]
   21ca4:	mov	r2, r7
   21ca8:	mov	r3, r8
   21cac:	mov	r1, r4
   21cb0:	add	r0, ip, r0
   21cb4:	str	r0, [r5, #40]	; 0x28
   21cb8:	mov	r0, r5
   21cbc:	bl	1feec <__assert_fail@plt+0xe9f4>
   21cc0:	str	r0, [sp, #36]	; 0x24
   21cc4:	b	20044 <__assert_fail@plt+0xeb4c>
   21cc8:	str	r2, [sp, #36]	; 0x24
   21ccc:	ldr	r2, [sp, #212]	; 0xd4
   21cd0:	mov	r3, #6
   21cd4:	str	r3, [r2]
   21cd8:	b	20044 <__assert_fail@plt+0xeb4c>
   21cdc:	mov	r8, r1
   21ce0:	ldr	r0, [sp, #32]
   21ce4:	b	20c38 <__assert_fail@plt+0xf740>
   21ce8:	mov	r8, r6
   21cec:	ldr	r0, [sp, #32]
   21cf0:	b	20c38 <__assert_fail@plt+0xf740>
   21cf4:	ldr	r2, [sp, #40]	; 0x28
   21cf8:	mov	r1, r6
   21cfc:	add	r0, sp, #136	; 0x88
   21d00:	bl	1890c <__assert_fail@plt+0x7414>
   21d04:	ldrb	r3, [sp, #140]	; 0x8c
   21d08:	cmp	r3, #21
   21d0c:	bne	21b38 <__assert_fail@plt+0x10640>
   21d10:	b	212e4 <__assert_fail@plt+0xfdec>
   21d14:	ldr	r7, [r6, #56]	; 0x38
   21d18:	ldrb	r3, [r4]
   21d1c:	cmp	r8, r7
   21d20:	str	r3, [sp, #56]	; 0x38
   21d24:	bge	21a20 <__assert_fail@plt+0x10528>
   21d28:	add	r3, sp, #104	; 0x68
   21d2c:	str	r3, [sp, #20]
   21d30:	mov	ip, #0
   21d34:	b	21d78 <__assert_fail@plt+0x10880>
   21d38:	ldr	r3, [r6, #4]
   21d3c:	add	r1, r8, #1
   21d40:	str	r1, [r6, #40]	; 0x28
   21d44:	ldrb	r3, [r3, r8]
   21d48:	mov	r8, r1
   21d4c:	cmp	r7, r8
   21d50:	ble	21a20 <__assert_fail@plt+0x10528>
   21d54:	ldr	r1, [sp, #56]	; 0x38
   21d58:	cmp	r1, r3
   21d5c:	beq	21ff0 <__assert_fail@plt+0x10af8>
   21d60:	ldr	r1, [sp, #20]
   21d64:	add	ip, ip, #1
   21d68:	cmp	ip, #32
   21d6c:	strb	r3, [r1], #1
   21d70:	str	r1, [sp, #20]
   21d74:	beq	21a20 <__assert_fail@plt+0x10528>
   21d78:	cmp	r2, #30
   21d7c:	bne	21d38 <__assert_fail@plt+0x10840>
   21d80:	ldrb	r3, [r6, #75]	; 0x4b
   21d84:	cmp	r3, #0
   21d88:	beq	21d38 <__assert_fail@plt+0x10840>
   21d8c:	ldrb	r3, [r6, #76]	; 0x4c
   21d90:	cmp	r3, #0
   21d94:	beq	220dc <__assert_fail@plt+0x10be4>
   21d98:	ldr	lr, [r6, #28]
   21d9c:	cmp	lr, r8
   21da0:	beq	220d0 <__assert_fail@plt+0x10bd8>
   21da4:	ldr	r1, [r6, #8]
   21da8:	mov	r3, r8
   21dac:	lsl	r0, r8, #2
   21db0:	ldr	r1, [r1, r8, lsl #2]
   21db4:	cmn	r1, #1
   21db8:	movne	r1, r8
   21dbc:	beq	220bc <__assert_fail@plt+0x10bc4>
   21dc0:	ldr	r5, [r6, #12]
   21dc4:	ldr	r3, [r6]
   21dc8:	ldr	r5, [r5, r0]
   21dcc:	ldr	r0, [r6, #24]
   21dd0:	add	r3, r3, r5
   21dd4:	ldrb	r3, [r3, r0]
   21dd8:	tst	r3, #128	; 0x80
   21ddc:	bne	220a8 <__assert_fail@plt+0x10bb0>
   21de0:	ldr	r1, [sp, #52]	; 0x34
   21de4:	cmp	r1, #1
   21de8:	add	r1, r8, #1
   21dec:	beq	21e2c <__assert_fail@plt+0x10934>
   21df0:	cmp	lr, r1
   21df4:	ble	21e2c <__assert_fail@plt+0x10934>
   21df8:	ldr	r5, [r6, #8]
   21dfc:	add	r0, r5, r1, lsl #2
   21e00:	ldr	r5, [r5, r1, lsl #2]
   21e04:	cmn	r5, #1
   21e08:	addeq	r8, r8, #2
   21e0c:	bne	21e2c <__assert_fail@plt+0x10934>
   21e10:	cmp	lr, r8
   21e14:	mov	r1, r8
   21e18:	beq	21e2c <__assert_fail@plt+0x10934>
   21e1c:	ldr	r5, [r0, #4]!
   21e20:	add	r8, r8, #1
   21e24:	cmn	r5, #1
   21e28:	beq	21e10 <__assert_fail@plt+0x10918>
   21e2c:	str	r1, [r6, #40]	; 0x28
   21e30:	mov	r8, r1
   21e34:	b	21d4c <__assert_fail@plt+0x10854>
   21e38:	ldr	r6, [sp, #32]
   21e3c:	mov	r3, #6
   21e40:	add	r5, sl, #56	; 0x38
   21e44:	add	sl, sl, #64	; 0x40
   21e48:	str	r3, [r6]
   21e4c:	mov	r2, r6
   21e50:	mov	r1, sl
   21e54:	mov	r0, r5
   21e58:	bl	1c2b8 <__assert_fail@plt+0xadc0>
   21e5c:	mov	r3, #9
   21e60:	str	r3, [r6]
   21e64:	mov	r4, r0
   21e68:	b	20f48 <__assert_fail@plt+0xfa50>
   21e6c:	ldr	r2, [sp, #32]
   21e70:	add	r1, sl, #64	; 0x40
   21e74:	add	r0, sl, #56	; 0x38
   21e78:	bl	1c2b8 <__assert_fail@plt+0xadc0>
   21e7c:	subs	r3, r0, #0
   21e80:	str	r3, [sp, #36]	; 0x24
   21e84:	bne	20fb0 <__assert_fail@plt+0xfab8>
   21e88:	b	20ec8 <__assert_fail@plt+0xf9d0>
   21e8c:	ldr	r0, [r6, #4]
   21e90:	ldrb	r0, [r0, r3]
   21e94:	cmp	r0, #93	; 0x5d
   21e98:	bne	21a08 <__assert_fail@plt+0x10510>
   21e9c:	add	r2, sp, #168	; 0xa8
   21ea0:	add	lr, r2, lr
   21ea4:	add	r3, r3, #1
   21ea8:	mov	r2, #0
   21eac:	cmp	r1, #28
   21eb0:	strb	r2, [lr, #-32]	; 0xffffffe0
   21eb4:	str	r3, [r6, #40]	; 0x28
   21eb8:	beq	21f84 <__assert_fail@plt+0x10a8c>
   21ebc:	cmp	r1, #30
   21ec0:	beq	21b1c <__assert_fail@plt+0x10624>
   21ec4:	mov	r7, #3
   21ec8:	b	218a0 <__assert_fail@plt+0x103a8>
   21ecc:	ldrb	r2, [r6, #75]	; 0x4b
   21ed0:	cmp	r2, #0
   21ed4:	beq	219dc <__assert_fail@plt+0x104e4>
   21ed8:	ldrb	r2, [r6, #76]	; 0x4c
   21edc:	cmp	r2, #0
   21ee0:	beq	21fd0 <__assert_fail@plt+0x10ad8>
   21ee4:	ldr	r7, [r6, #28]
   21ee8:	cmp	r7, r3
   21eec:	beq	21fc4 <__assert_fail@plt+0x10acc>
   21ef0:	ldr	r0, [r6, #8]
   21ef4:	mov	r2, r3
   21ef8:	lsl	ip, r3, #2
   21efc:	ldr	r0, [r0, r3, lsl #2]
   21f00:	cmn	r0, #1
   21f04:	movne	r0, r3
   21f08:	beq	21fb0 <__assert_fail@plt+0x10ab8>
   21f0c:	ldr	r8, [r6, #12]
   21f10:	ldr	r2, [r6]
   21f14:	ldr	r8, [r8, ip]
   21f18:	ldr	ip, [r6, #24]
   21f1c:	add	r2, r2, r8
   21f20:	ldrb	r2, [r2, ip]
   21f24:	tst	r2, #128	; 0x80
   21f28:	bne	21f9c <__assert_fail@plt+0x10aa4>
   21f2c:	ldr	r0, [sp, #56]	; 0x38
   21f30:	cmp	r0, #1
   21f34:	add	r0, r3, #1
   21f38:	beq	21f78 <__assert_fail@plt+0x10a80>
   21f3c:	cmp	r7, r0
   21f40:	ble	21f78 <__assert_fail@plt+0x10a80>
   21f44:	ldr	r8, [r6, #8]
   21f48:	add	ip, r8, r0, lsl #2
   21f4c:	ldr	r8, [r8, r0, lsl #2]
   21f50:	cmn	r8, #1
   21f54:	addeq	r3, r3, #2
   21f58:	bne	21f78 <__assert_fail@plt+0x10a80>
   21f5c:	cmp	r7, r3
   21f60:	mov	r0, r3
   21f64:	beq	21f78 <__assert_fail@plt+0x10a80>
   21f68:	ldr	r8, [ip, #4]!
   21f6c:	add	r3, r3, #1
   21f70:	cmn	r8, #1
   21f74:	beq	21f5c <__assert_fail@plt+0x10a64>
   21f78:	str	r0, [r6, #40]	; 0x28
   21f7c:	mov	r3, r0
   21f80:	b	219f0 <__assert_fail@plt+0x104f8>
   21f84:	ldr	r2, [sp, #40]	; 0x28
   21f88:	ldr	r1, [sp, #44]	; 0x2c
   21f8c:	ldr	r0, [sp, #32]
   21f90:	bl	1890c <__assert_fail@plt+0x7414>
   21f94:	mov	r7, #11
   21f98:	b	21bf8 <__assert_fail@plt+0x10700>
   21f9c:	ldr	r2, [r6, #4]
   21fa0:	add	r3, r3, #1
   21fa4:	str	r3, [r6, #40]	; 0x28
   21fa8:	ldrb	r2, [r2, r0]
   21fac:	b	219f0 <__assert_fail@plt+0x104f8>
   21fb0:	ldr	r0, [r6, #4]
   21fb4:	add	r3, r3, #1
   21fb8:	str	r3, [r6, #40]	; 0x28
   21fbc:	ldrb	r2, [r0, r2]
   21fc0:	b	219f0 <__assert_fail@plt+0x104f8>
   21fc4:	mov	r0, r3
   21fc8:	lsl	ip, r3, #2
   21fcc:	b	21f0c <__assert_fail@plt+0x10a14>
   21fd0:	ldr	r2, [r6]
   21fd4:	ldr	ip, [r6, #24]
   21fd8:	add	r0, r3, #1
   21fdc:	add	r2, r2, ip
   21fe0:	str	r0, [r6, #40]	; 0x28
   21fe4:	ldrb	r2, [r2, r3]
   21fe8:	mov	r3, r0
   21fec:	b	219f0 <__assert_fail@plt+0x104f8>
   21ff0:	ldr	r1, [r6, #4]
   21ff4:	ldrb	r1, [r1, r8]
   21ff8:	cmp	r1, #93	; 0x5d
   21ffc:	bne	21d60 <__assert_fail@plt+0x10868>
   22000:	add	r3, sp, #168	; 0xa8
   22004:	add	ip, r3, ip
   22008:	add	r8, r8, #1
   2200c:	mov	r3, #0
   22010:	cmp	r2, #28
   22014:	strb	r3, [ip, #-64]	; 0xffffffc0
   22018:	str	r8, [r6, #40]	; 0x28
   2201c:	beq	21960 <__assert_fail@plt+0x10468>
   22020:	cmp	r2, #30
   22024:	beq	22054 <__assert_fail@plt+0x10b5c>
   22028:	cmp	r2, #26
   2202c:	beq	2204c <__assert_fail@plt+0x10b54>
   22030:	ldr	r2, [sp, #40]	; 0x28
   22034:	mov	r1, r6
   22038:	mov	r0, r4
   2203c:	bl	1890c <__assert_fail@plt+0x7414>
   22040:	mov	r5, #3
   22044:	mov	r8, r0
   22048:	b	21140 <__assert_fail@plt+0xfc48>
   2204c:	mov	r5, #3
   22050:	b	2112c <__assert_fail@plt+0xfc34>
   22054:	ldr	r5, [sp, #40]	; 0x28
   22058:	mov	r1, r6
   2205c:	mov	r2, r5
   22060:	mov	r0, r4
   22064:	bl	1890c <__assert_fail@plt+0x7414>
   22068:	ldr	r2, [sp, #84]	; 0x54
   2206c:	add	r3, sp, #76	; 0x4c
   22070:	mov	r1, fp
   22074:	mov	r8, r0
   22078:	ldr	r0, [r6, #64]	; 0x40
   2207c:	str	r2, [sp, #4]
   22080:	str	r3, [sp]
   22084:	str	r5, [sp, #8]
   22088:	add	r3, r9, #36	; 0x24
   2208c:	add	r2, r9, #12
   22090:	bl	1a91c <__assert_fail@plt+0x9424>
   22094:	ldr	r3, [sp, #212]	; 0xd4
   22098:	cmp	r0, #0
   2209c:	str	r0, [r3]
   220a0:	beq	21188 <__assert_fail@plt+0xfc90>
   220a4:	b	213c4 <__assert_fail@plt+0xfecc>
   220a8:	ldr	r3, [r6, #4]
   220ac:	add	r8, r8, #1
   220b0:	str	r8, [r6, #40]	; 0x28
   220b4:	ldrb	r3, [r3, r1]
   220b8:	b	21d4c <__assert_fail@plt+0x10854>
   220bc:	ldr	r1, [r6, #4]
   220c0:	add	r8, r8, #1
   220c4:	str	r8, [r6, #40]	; 0x28
   220c8:	ldrb	r3, [r1, r3]
   220cc:	b	21d4c <__assert_fail@plt+0x10854>
   220d0:	mov	r1, r8
   220d4:	lsl	r0, r8, #2
   220d8:	b	21dc0 <__assert_fail@plt+0x108c8>
   220dc:	ldr	r3, [r6]
   220e0:	ldr	r0, [r6, #24]
   220e4:	add	r1, r8, #1
   220e8:	add	r3, r3, r0
   220ec:	str	r1, [r6, #40]	; 0x28
   220f0:	ldrb	r3, [r3, r8]
   220f4:	mov	r8, r1
   220f8:	b	21d4c <__assert_fail@plt+0x10854>
   220fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22100:	sub	sp, sp, #36	; 0x24
   22104:	mov	sl, r3
   22108:	ldr	r5, [sp, #76]	; 0x4c
   2210c:	ldr	r7, [sp, #72]	; 0x48
   22110:	str	r5, [sp, #4]
   22114:	str	r7, [sp]
   22118:	ldr	ip, [r1]
   2211c:	mov	r8, r1
   22120:	str	ip, [sp, #16]
   22124:	mov	r9, r0
   22128:	mov	r6, r2
   2212c:	bl	1feec <__assert_fail@plt+0xe9f4>
   22130:	ldr	r3, [r5]
   22134:	adds	r3, r3, #0
   22138:	movne	r3, #1
   2213c:	cmp	r0, #0
   22140:	movne	r3, #0
   22144:	cmp	r3, #0
   22148:	bne	222cc <__assert_fail@plt+0x10dd4>
   2214c:	mov	r4, r0
   22150:	str	r3, [sp, #20]
   22154:	str	r8, [sp, #12]
   22158:	ldrb	r3, [r6, #4]
   2215c:	and	r2, r3, #247	; 0xf7
   22160:	cmp	r2, #2
   22164:	beq	221e0 <__assert_fail@plt+0x10ce8>
   22168:	subs	r3, r3, #9
   2216c:	movne	r3, #1
   22170:	cmp	r7, #0
   22174:	orreq	r3, r3, #1
   22178:	cmp	r3, #0
   2217c:	beq	221e0 <__assert_fail@plt+0x10ce8>
   22180:	mov	r3, sl
   22184:	str	r5, [sp, #4]
   22188:	str	r7, [sp]
   2218c:	mov	r2, r6
   22190:	ldr	r1, [sp, #12]
   22194:	mov	r0, r9
   22198:	bl	1feec <__assert_fail@plt+0xe9f4>
   2219c:	ldr	r3, [r5]
   221a0:	adds	r3, r3, #0
   221a4:	movne	r3, #1
   221a8:	cmp	r0, #0
   221ac:	movne	r3, #0
   221b0:	cmp	r3, #0
   221b4:	mov	fp, r0
   221b8:	bne	222dc <__assert_fail@plt+0x10de4>
   221bc:	cmp	r4, #0
   221c0:	cmpne	r0, #0
   221c4:	bne	221ec <__assert_fail@plt+0x10cf4>
   221c8:	ldrb	r3, [r6, #4]
   221cc:	cmp	r4, #0
   221d0:	moveq	r4, r0
   221d4:	and	r2, r3, #247	; 0xf7
   221d8:	cmp	r2, #2
   221dc:	bne	22168 <__assert_fail@plt+0x10c70>
   221e0:	mov	r0, r4
   221e4:	add	sp, sp, #36	; 0x24
   221e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   221ec:	ldr	r1, [sp, #16]
   221f0:	str	r3, [sp, #24]
   221f4:	str	r3, [sp, #28]
   221f8:	ldr	r2, [r1, #64]	; 0x40
   221fc:	cmp	r2, #31
   22200:	beq	22280 <__assert_fail@plt+0x10d88>
   22204:	lsl	r3, r2, #5
   22208:	add	lr, r2, #1
   2220c:	ldr	r2, [r1, #56]	; 0x38
   22210:	add	ip, r3, #4
   22214:	mov	r8, r1
   22218:	mov	r1, #16
   2221c:	strb	r1, [sp, #28]
   22220:	add	r1, sp, #24
   22224:	add	r3, r2, r3
   22228:	ldm	r1, {r0, r1}
   2222c:	str	lr, [r8, #64]	; 0x40
   22230:	ldr	r8, [sp, #20]
   22234:	add	lr, r3, #24
   22238:	str	r8, [r3, #4]
   2223c:	str	r4, [r3, #8]
   22240:	str	fp, [r3, #12]
   22244:	stm	lr, {r0, r1}
   22248:	ldrb	r1, [r3, #30]
   2224c:	add	r2, r2, ip
   22250:	mvn	r0, #0
   22254:	and	r1, r1, #243	; 0xf3
   22258:	cmp	r2, #0
   2225c:	str	r8, [r3, #16]
   22260:	str	r8, [r3, #20]
   22264:	str	r0, [r3, #32]
   22268:	strb	r1, [r3, #30]
   2226c:	str	r2, [r4]
   22270:	str	r2, [fp]
   22274:	beq	222b4 <__assert_fail@plt+0x10dbc>
   22278:	mov	r4, r2
   2227c:	b	22158 <__assert_fail@plt+0x10c60>
   22280:	mov	r0, #996	; 0x3e4
   22284:	bl	2a790 <__assert_fail@plt+0x19298>
   22288:	subs	r2, r0, #0
   2228c:	beq	222b4 <__assert_fail@plt+0x10dbc>
   22290:	ldr	r0, [sp, #16]
   22294:	mov	lr, #1
   22298:	mov	ip, #4
   2229c:	ldr	r1, [r0, #56]	; 0x38
   222a0:	ldr	r3, [sp, #20]
   222a4:	str	r1, [r2]
   222a8:	mov	r8, r0
   222ac:	str	r2, [r0, #56]	; 0x38
   222b0:	b	22218 <__assert_fail@plt+0x10d20>
   222b4:	mov	r0, fp
   222b8:	bl	1c364 <__assert_fail@plt+0xae6c>
   222bc:	mov	r0, r4
   222c0:	bl	1c364 <__assert_fail@plt+0xae6c>
   222c4:	mov	r3, #12
   222c8:	str	r3, [r5]
   222cc:	mov	r4, #0
   222d0:	mov	r0, r4
   222d4:	add	sp, sp, #36	; 0x24
   222d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   222dc:	cmp	r4, #0
   222e0:	beq	222cc <__assert_fail@plt+0x10dd4>
   222e4:	mov	r0, r4
   222e8:	bl	1c364 <__assert_fail@plt+0xae6c>
   222ec:	mov	r4, #0
   222f0:	mov	r0, r4
   222f4:	add	sp, sp, #36	; 0x24
   222f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   222fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22300:	sub	sp, sp, #44	; 0x2c
   22304:	ldr	r5, [r1]
   22308:	ldr	sl, [sp, #84]	; 0x54
   2230c:	str	r1, [sp, #24]
   22310:	ldr	ip, [r5, #84]	; 0x54
   22314:	str	sl, [sp, #4]
   22318:	str	ip, [sp, #20]
   2231c:	ldr	ip, [sp, #80]	; 0x50
   22320:	mov	r9, r0
   22324:	str	ip, [sp]
   22328:	mov	r8, r2
   2232c:	str	r3, [sp, #16]
   22330:	bl	220fc <__assert_fail@plt+0x10c04>
   22334:	ldr	r4, [sl]
   22338:	adds	r4, r4, #0
   2233c:	movne	r4, #1
   22340:	cmp	r0, #0
   22344:	movne	r4, #0
   22348:	cmp	r4, #0
   2234c:	bne	224ac <__assert_fail@plt+0x10fb4>
   22350:	ldr	r3, [sp, #16]
   22354:	mov	r6, r0
   22358:	orr	r3, r3, #8388608	; 0x800000
   2235c:	str	r3, [sp, #12]
   22360:	add	r7, sp, #32
   22364:	b	2245c <__assert_fail@plt+0x10f64>
   22368:	ldr	r3, [sp, #80]	; 0x50
   2236c:	clz	r3, r3
   22370:	lsr	r3, r3, #5
   22374:	cmp	r2, #9
   22378:	orrne	r3, r3, #1
   2237c:	cmp	r3, #0
   22380:	beq	22494 <__assert_fail@plt+0x10f9c>
   22384:	ldr	r2, [sp, #20]
   22388:	ldr	r1, [sp, #80]	; 0x50
   2238c:	ldr	fp, [r5, #84]	; 0x54
   22390:	ldr	r3, [sp, #16]
   22394:	str	r2, [r5, #84]	; 0x54
   22398:	mov	r0, r9
   2239c:	mov	r2, r8
   223a0:	str	r1, [sp]
   223a4:	str	sl, [sp, #4]
   223a8:	ldr	r1, [sp, #24]
   223ac:	bl	220fc <__assert_fail@plt+0x10c04>
   223b0:	ldr	r3, [sl]
   223b4:	adds	r3, r3, #0
   223b8:	movne	r3, #1
   223bc:	cmp	r0, #0
   223c0:	movne	r3, #0
   223c4:	cmp	r3, #0
   223c8:	mov	r2, r0
   223cc:	bne	2249c <__assert_fail@plt+0x10fa4>
   223d0:	ldr	r3, [r5, #84]	; 0x54
   223d4:	orr	fp, r3, fp
   223d8:	str	fp, [r5, #84]	; 0x54
   223dc:	ldr	lr, [r5, #64]	; 0x40
   223e0:	str	r4, [r7]
   223e4:	cmp	lr, #31
   223e8:	str	r4, [r7, #4]
   223ec:	beq	224d4 <__assert_fail@plt+0x10fdc>
   223f0:	lsl	r3, lr, #5
   223f4:	ldr	ip, [r5, #56]	; 0x38
   223f8:	add	lr, lr, #1
   223fc:	add	fp, r3, #4
   22400:	mov	r1, #10
   22404:	add	r3, ip, r3
   22408:	strb	r1, [sp, #36]	; 0x24
   2240c:	ldm	r7, {r0, r1}
   22410:	str	lr, [r5, #64]	; 0x40
   22414:	add	lr, r3, #24
   22418:	stmib	r3, {r4, r6}
   2241c:	str	r2, [r3, #12]
   22420:	stm	lr, {r0, r1}
   22424:	ldrb	r1, [r3, #30]
   22428:	cmp	r6, #0
   2242c:	add	ip, ip, fp
   22430:	mvn	r0, #0
   22434:	and	r1, r1, #243	; 0xf3
   22438:	str	r4, [r3, #16]
   2243c:	str	r4, [r3, #20]
   22440:	strb	r1, [r3, #30]
   22444:	str	r0, [r3, #32]
   22448:	strne	ip, [r6]
   2244c:	cmp	r2, #0
   22450:	strne	ip, [r2]
   22454:	subs	r6, ip, #0
   22458:	beq	224bc <__assert_fail@plt+0x10fc4>
   2245c:	ldrb	r3, [r8, #4]
   22460:	cmp	r3, #10
   22464:	bne	224b0 <__assert_fail@plt+0x10fb8>
   22468:	ldr	r2, [sp, #12]
   2246c:	mov	r1, r9
   22470:	mov	r0, r8
   22474:	bl	1b950 <__assert_fail@plt+0xa458>
   22478:	ldrb	r2, [r8, #4]
   2247c:	ldr	r3, [r9, #40]	; 0x28
   22480:	and	r1, r2, #247	; 0xf7
   22484:	cmp	r1, #2
   22488:	add	r0, r3, r0
   2248c:	str	r0, [r9, #40]	; 0x28
   22490:	bne	22368 <__assert_fail@plt+0x10e70>
   22494:	mov	r2, r4
   22498:	b	223dc <__assert_fail@plt+0x10ee4>
   2249c:	cmp	r6, #0
   224a0:	beq	224ac <__assert_fail@plt+0x10fb4>
   224a4:	mov	r0, r6
   224a8:	bl	1c364 <__assert_fail@plt+0xae6c>
   224ac:	mov	r6, #0
   224b0:	mov	r0, r6
   224b4:	add	sp, sp, #44	; 0x2c
   224b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   224bc:	mov	r3, #12
   224c0:	mov	r6, #0
   224c4:	mov	r0, r6
   224c8:	str	r3, [sl]
   224cc:	add	sp, sp, #44	; 0x2c
   224d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   224d4:	mov	r0, #996	; 0x3e4
   224d8:	str	r2, [sp, #28]
   224dc:	bl	2a790 <__assert_fail@plt+0x19298>
   224e0:	subs	ip, r0, #0
   224e4:	beq	224bc <__assert_fail@plt+0x10fc4>
   224e8:	ldr	r1, [r5, #56]	; 0x38
   224ec:	mov	lr, #1
   224f0:	str	r1, [ip]
   224f4:	mov	fp, #4
   224f8:	mov	r3, r4
   224fc:	str	ip, [r5, #56]	; 0x38
   22500:	ldr	r2, [sp, #28]
   22504:	b	22400 <__assert_fail@plt+0x10f08>
   22508:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2250c:	mov	ip, #0
   22510:	ldr	r9, [r2, #4]
   22514:	sub	sp, sp, #28
   22518:	cmp	r9, ip
   2251c:	str	r0, [sp]
   22520:	str	ip, [r0]
   22524:	beq	2287c <__assert_fail@plt+0x11384>
   22528:	add	fp, r3, r9
   2252c:	ble	22548 <__assert_fail@plt+0x11050>
   22530:	ldr	ip, [r2, #8]
   22534:	add	r4, ip, r9, lsl #2
   22538:	ldr	r0, [ip], #4
   2253c:	cmp	r4, ip
   22540:	add	fp, fp, r0
   22544:	bne	22538 <__assert_fail@plt+0x11040>
   22548:	ldr	ip, [r1, #68]	; 0x44
   2254c:	ldr	lr, [r1, #32]
   22550:	and	ip, ip, fp
   22554:	add	ip, ip, ip, lsl #1
   22558:	lsl	ip, ip, #2
   2255c:	add	r4, lr, ip
   22560:	ldr	r5, [lr, ip]
   22564:	cmp	r5, #0
   22568:	ble	22608 <__assert_fail@plt+0x11110>
   2256c:	sub	ip, r9, #1
   22570:	ldr	lr, [r4, #8]
   22574:	lsl	r0, ip, #2
   22578:	sub	lr, lr, #4
   2257c:	str	r0, [sp, #4]
   22580:	mov	ip, #0
   22584:	b	22594 <__assert_fail@plt+0x1109c>
   22588:	add	ip, ip, #1
   2258c:	cmp	ip, r5
   22590:	beq	22608 <__assert_fail@plt+0x11110>
   22594:	ldr	r4, [lr, #4]!
   22598:	ldr	r0, [r4]
   2259c:	cmp	r0, fp
   225a0:	bne	22588 <__assert_fail@plt+0x11090>
   225a4:	ldrb	r0, [r4, #52]	; 0x34
   225a8:	and	r0, r0, #15
   225ac:	cmp	r3, r0
   225b0:	bne	22588 <__assert_fail@plt+0x11090>
   225b4:	ldr	r7, [r4, #40]	; 0x28
   225b8:	cmp	r7, #0
   225bc:	beq	22588 <__assert_fail@plt+0x11090>
   225c0:	ldr	r0, [r7, #4]
   225c4:	cmp	r9, r0
   225c8:	bne	22588 <__assert_fail@plt+0x11090>
   225cc:	ldr	r0, [sp, #4]
   225d0:	mov	r6, r9
   225d4:	b	225f4 <__assert_fail@plt+0x110fc>
   225d8:	ldr	sl, [r7, #8]
   225dc:	ldr	r8, [r2, #8]
   225e0:	ldr	sl, [sl, r0]
   225e4:	ldr	r8, [r8, r0]
   225e8:	sub	r0, r0, #4
   225ec:	cmp	sl, r8
   225f0:	bne	22588 <__assert_fail@plt+0x11090>
   225f4:	subs	r6, r6, #1
   225f8:	bpl	225d8 <__assert_fail@plt+0x110e0>
   225fc:	mov	r0, r4
   22600:	add	sp, sp, #28
   22604:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22608:	mov	r7, r3
   2260c:	ldr	r3, [sp]
   22610:	mov	r9, r1
   22614:	mov	r0, #56	; 0x38
   22618:	mov	r1, #1
   2261c:	str	r3, [sp, #12]
   22620:	mov	r8, r2
   22624:	bl	2a748 <__assert_fail@plt+0x19250>
   22628:	subs	r4, r0, #0
   2262c:	beq	22870 <__assert_fail@plt+0x11378>
   22630:	ldr	r0, [r8, #4]
   22634:	add	r3, r4, #4
   22638:	cmp	r0, #0
   2263c:	str	r3, [sp, #16]
   22640:	str	r0, [r4, #8]
   22644:	ble	228f4 <__assert_fail@plt+0x113fc>
   22648:	str	r0, [r4, #4]
   2264c:	lsl	r0, r0, #2
   22650:	bl	2a790 <__assert_fail@plt+0x19298>
   22654:	cmp	r0, #0
   22658:	str	r0, [r4, #12]
   2265c:	beq	22924 <__assert_fail@plt+0x1142c>
   22660:	ldr	sl, [r8, #4]
   22664:	ldr	r1, [r8, #8]
   22668:	lsl	r2, sl, #2
   2266c:	bl	11234 <memcpy@plt>
   22670:	ldrb	r2, [r4, #52]	; 0x34
   22674:	and	r3, r7, #15
   22678:	cmp	sl, #0
   2267c:	bic	r2, r2, #15
   22680:	orr	r3, r3, r2
   22684:	add	r2, r4, #4
   22688:	str	r2, [r4, #40]	; 0x28
   2268c:	strb	r3, [r4, #52]	; 0x34
   22690:	ble	22808 <__assert_fail@plt+0x11310>
   22694:	and	r2, r7, #2
   22698:	str	r2, [sp]
   2269c:	and	r2, r7, #4
   226a0:	mov	r0, #0
   226a4:	and	r3, r7, #1
   226a8:	stmib	sp, {r2, fp}
   226ac:	mov	ip, sl
   226b0:	ldr	r6, [pc, #676]	; 2295c <__assert_fail@plt+0x11464>
   226b4:	mov	r5, r0
   226b8:	mov	fp, r3
   226bc:	add	sl, r4, #4
   226c0:	b	22724 <__assert_fail@plt+0x1122c>
   226c4:	cmp	fp, #0
   226c8:	beq	226fc <__assert_fail@plt+0x11204>
   226cc:	tst	r7, #2
   226d0:	bne	226fc <__assert_fail@plt+0x11204>
   226d4:	tst	r7, #16
   226d8:	beq	226e8 <__assert_fail@plt+0x111f0>
   226dc:	ldr	r3, [sp]
   226e0:	cmp	r3, #0
   226e4:	beq	226fc <__assert_fail@plt+0x11204>
   226e8:	tst	r7, #64	; 0x40
   226ec:	beq	22714 <__assert_fail@plt+0x1121c>
   226f0:	ldr	r3, [sp, #4]
   226f4:	cmp	r3, #0
   226f8:	bne	22714 <__assert_fail@plt+0x1121c>
   226fc:	subs	r2, r5, r0
   22700:	bmi	22710 <__assert_fail@plt+0x11218>
   22704:	ldr	r1, [r4, #8]
   22708:	cmp	r2, r1
   2270c:	blt	227d0 <__assert_fail@plt+0x112d8>
   22710:	add	r0, r0, #1
   22714:	ldr	ip, [r8, #4]
   22718:	add	r5, r5, #1
   2271c:	cmp	r5, ip
   22720:	bge	22804 <__assert_fail@plt+0x1130c>
   22724:	ldr	r1, [r8, #8]
   22728:	ldr	r2, [r9]
   2272c:	ldr	r1, [r1, r5, lsl #2]
   22730:	add	r2, r2, r1, lsl #3
   22734:	ldr	r7, [r2, #4]
   22738:	ldrb	r1, [r2, #4]
   2273c:	ands	r7, r6, r7, lsr #8
   22740:	moveq	lr, #1
   22744:	movne	lr, #0
   22748:	cmp	r1, #1
   2274c:	movne	lr, #0
   22750:	andeq	lr, lr, #1
   22754:	cmp	lr, #0
   22758:	bne	22718 <__assert_fail@plt+0x11220>
   2275c:	ldrb	r2, [r2, #6]
   22760:	ldrb	lr, [r4, #52]	; 0x34
   22764:	cmp	r1, #2
   22768:	lsr	r2, r2, #4
   2276c:	orr	r2, r2, lr, lsr #5
   22770:	and	r2, r2, #1
   22774:	bic	lr, lr, #32
   22778:	orr	r2, lr, r2, lsl #5
   2277c:	strb	r2, [r4, #52]	; 0x34
   22780:	uxtbeq	r2, r2
   22784:	orreq	r2, r2, #16
   22788:	strbeq	r2, [r4, #52]	; 0x34
   2278c:	beq	227a0 <__assert_fail@plt+0x112a8>
   22790:	cmp	r1, #4
   22794:	ldrbeq	r2, [r4, #52]	; 0x34
   22798:	orreq	r2, r2, #64	; 0x40
   2279c:	strbeq	r2, [r4, #52]	; 0x34
   227a0:	cmp	r7, #0
   227a4:	beq	22718 <__assert_fail@plt+0x11220>
   227a8:	ldr	r2, [r4, #40]	; 0x28
   227ac:	cmp	sl, r2
   227b0:	beq	2288c <__assert_fail@plt+0x11394>
   227b4:	tst	r7, #1
   227b8:	bne	226c4 <__assert_fail@plt+0x111cc>
   227bc:	tst	r7, #2
   227c0:	beq	226d4 <__assert_fail@plt+0x111dc>
   227c4:	cmp	fp, #0
   227c8:	beq	226d4 <__assert_fail@plt+0x111dc>
   227cc:	b	226fc <__assert_fail@plt+0x11204>
   227d0:	sub	r1, r1, #1
   227d4:	cmp	r2, r1
   227d8:	str	r1, [r4, #8]
   227dc:	bge	22710 <__assert_fail@plt+0x11218>
   227e0:	ldr	r1, [r4, #12]
   227e4:	add	r1, r1, r2, lsl #2
   227e8:	ldr	r3, [r1, #4]
   227ec:	add	r2, r2, #1
   227f0:	str	r3, [r1], #4
   227f4:	ldr	r3, [r4, #8]
   227f8:	cmp	r2, r3
   227fc:	blt	227e8 <__assert_fail@plt+0x112f0>
   22800:	b	22710 <__assert_fail@plt+0x11218>
   22804:	ldr	fp, [sp, #8]
   22808:	mov	r2, fp
   2280c:	mov	r0, r9
   22810:	mov	r1, r4
   22814:	bl	18a8c <__assert_fail@plt+0x7594>
   22818:	cmp	r0, #0
   2281c:	beq	225fc <__assert_fail@plt+0x11104>
   22820:	ldr	r0, [r4, #24]
   22824:	bl	14214 <__assert_fail@plt+0x2d1c>
   22828:	ldr	r0, [r4, #36]	; 0x24
   2282c:	bl	14214 <__assert_fail@plt+0x2d1c>
   22830:	ldr	r3, [r4, #40]	; 0x28
   22834:	ldr	r2, [sp, #16]
   22838:	cmp	r2, r3
   2283c:	beq	22850 <__assert_fail@plt+0x11358>
   22840:	ldr	r0, [r3, #8]
   22844:	bl	14214 <__assert_fail@plt+0x2d1c>
   22848:	ldr	r0, [r4, #40]	; 0x28
   2284c:	bl	14214 <__assert_fail@plt+0x2d1c>
   22850:	ldr	r0, [r4, #12]
   22854:	bl	14214 <__assert_fail@plt+0x2d1c>
   22858:	ldr	r0, [r4, #48]	; 0x30
   2285c:	bl	14214 <__assert_fail@plt+0x2d1c>
   22860:	ldr	r0, [r4, #44]	; 0x2c
   22864:	bl	14214 <__assert_fail@plt+0x2d1c>
   22868:	mov	r0, r4
   2286c:	bl	14214 <__assert_fail@plt+0x2d1c>
   22870:	ldr	r2, [sp, #12]
   22874:	mov	r3, #12
   22878:	str	r3, [r2]
   2287c:	mov	r4, #0
   22880:	mov	r0, r4
   22884:	add	sp, sp, #28
   22888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2288c:	mov	r0, #12
   22890:	bl	2a790 <__assert_fail@plt+0x19298>
   22894:	subs	r1, r0, #0
   22898:	beq	22820 <__assert_fail@plt+0x11328>
   2289c:	ldr	r0, [r8, #4]
   228a0:	str	r1, [r4, #40]	; 0x28
   228a4:	cmp	r0, #0
   228a8:	str	r0, [r1, #4]
   228ac:	ble	22938 <__assert_fail@plt+0x11440>
   228b0:	str	r0, [r1]
   228b4:	lsl	r0, r0, #2
   228b8:	str	r1, [sp, #20]
   228bc:	bl	2a790 <__assert_fail@plt+0x19298>
   228c0:	ldr	r1, [sp, #20]
   228c4:	cmp	r0, #0
   228c8:	str	r0, [r1, #8]
   228cc:	beq	2294c <__assert_fail@plt+0x11454>
   228d0:	ldr	r2, [r8, #4]
   228d4:	ldr	r1, [r8, #8]
   228d8:	lsl	r2, r2, #2
   228dc:	bl	11234 <memcpy@plt>
   228e0:	ldrb	r2, [r4, #52]	; 0x34
   228e4:	mov	r0, #0
   228e8:	orr	r2, r2, #128	; 0x80
   228ec:	strb	r2, [r4, #52]	; 0x34
   228f0:	b	227b4 <__assert_fail@plt+0x112bc>
   228f4:	add	r1, r4, #4
   228f8:	mov	r3, #0
   228fc:	str	r3, [r4, #4]
   22900:	str	r3, [r1, #4]
   22904:	str	r3, [r1, #8]
   22908:	ldrb	r2, [r4, #52]	; 0x34
   2290c:	and	r3, r7, #15
   22910:	str	r1, [r4, #40]	; 0x28
   22914:	bic	r2, r2, #15
   22918:	orr	r3, r3, r2
   2291c:	strb	r3, [r4, #52]	; 0x34
   22920:	b	22808 <__assert_fail@plt+0x11310>
   22924:	str	r0, [r4, #8]
   22928:	str	r0, [r4, #4]
   2292c:	mov	r0, r4
   22930:	bl	14214 <__assert_fail@plt+0x2d1c>
   22934:	b	22870 <__assert_fail@plt+0x11378>
   22938:	mov	r3, #0
   2293c:	str	r3, [r1]
   22940:	str	r3, [r1, #4]
   22944:	str	r3, [r1, #8]
   22948:	b	228e0 <__assert_fail@plt+0x113e8>
   2294c:	mov	sl, r1
   22950:	str	r0, [sl, #4]
   22954:	str	r0, [sl]
   22958:	b	22820 <__assert_fail@plt+0x11328>
   2295c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   22960:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22964:	sub	sp, sp, #14464	; 0x3880
   22968:	sub	sp, sp, #36	; 0x24
   2296c:	mov	r4, #0
   22970:	mov	r5, r1
   22974:	add	r9, sp, #2208	; 0x8a0
   22978:	str	r1, [sp, #72]	; 0x48
   2297c:	str	r0, [sp, #104]	; 0x68
   22980:	str	r4, [r1, #44]	; 0x2c
   22984:	str	r4, [r1, #48]	; 0x30
   22988:	mov	r0, r9
   2298c:	mov	r1, r4
   22990:	mov	r2, #32
   22994:	bl	11414 <memset@plt>
   22998:	ldr	r1, [r5, #8]
   2299c:	cmp	r1, r4
   229a0:	ble	2387c <__assert_fail@plt+0x12384>
   229a4:	str	r4, [sp, #20]
   229a8:	str	r4, [sp, #96]	; 0x60
   229ac:	ldr	r3, [sp, #72]	; 0x48
   229b0:	ldr	r0, [sp, #96]	; 0x60
   229b4:	ldr	r2, [r3, #12]
   229b8:	ldr	r3, [sp, #104]	; 0x68
   229bc:	lsl	ip, r0, #2
   229c0:	ldr	r2, [r2, r0, lsl #2]
   229c4:	ldr	r3, [r3]
   229c8:	str	ip, [sp, #92]	; 0x5c
   229cc:	add	r0, r3, r2, lsl #3
   229d0:	str	r0, [sp, #100]	; 0x64
   229d4:	ldrb	ip, [r0, #4]
   229d8:	ldr	r4, [r0, #4]
   229dc:	ldr	r0, [pc, #3984]	; 23974 <__assert_fail@plt+0x1247c>
   229e0:	cmp	ip, #1
   229e4:	str	ip, [sp, #28]
   229e8:	and	r4, r0, r4, lsr #8
   229ec:	beq	22b70 <__assert_fail@plt+0x11678>
   229f0:	cmp	ip, #3
   229f4:	beq	23198 <__assert_fail@plt+0x11ca0>
   229f8:	cmp	ip, #5
   229fc:	beq	232f0 <__assert_fail@plt+0x11df8>
   22a00:	cmp	ip, #7
   22a04:	beq	236e4 <__assert_fail@plt+0x121ec>
   22a08:	ldr	r3, [sp, #96]	; 0x60
   22a0c:	add	r3, r3, #1
   22a10:	cmp	r3, r1
   22a14:	str	r3, [sp, #96]	; 0x60
   22a18:	blt	229ac <__assert_fail@plt+0x114b4>
   22a1c:	ldr	r3, [sp, #20]
   22a20:	cmp	r3, #0
   22a24:	ble	23878 <__assert_fail@plt+0x12380>
   22a28:	add	r3, r3, #1
   22a2c:	mov	r4, #0
   22a30:	lsl	r0, r3, #2
   22a34:	str	r3, [r9, #-2092]	; 0xfffff7d4
   22a38:	str	r4, [r9, #-2088]	; 0xfffff7d8
   22a3c:	bl	2a790 <__assert_fail@plt+0x19298>
   22a40:	cmp	r0, r4
   22a44:	str	r0, [r9, #-2084]	; 0xfffff7dc
   22a48:	beq	2373c <__assert_fail@plt+0x12244>
   22a4c:	add	r3, sp, #3232	; 0xca0
   22a50:	str	r3, [sp, #12]
   22a54:	mov	r6, r3
   22a58:	add	r3, sp, #6272	; 0x1880
   22a5c:	add	r3, r3, #32
   22a60:	mov	r7, r3
   22a64:	str	r3, [sp, #28]
   22a68:	add	r0, sp, #128	; 0x80
   22a6c:	add	r3, sp, #156	; 0x9c
   22a70:	mov	r2, #32
   22a74:	mov	r1, r4
   22a78:	str	r3, [sp, #4]
   22a7c:	str	r4, [sp, #24]
   22a80:	str	r4, [r9, #-2096]	; 0xfffff7d0
   22a84:	bl	11414 <memset@plt>
   22a88:	add	r3, sp, #160	; 0xa0
   22a8c:	ldr	fp, [sp, #104]	; 0x68
   22a90:	sub	r3, r3, #48	; 0x30
   22a94:	mov	sl, r4
   22a98:	add	r8, sp, #116	; 0x74
   22a9c:	mov	r5, r7
   22aa0:	str	r3, [sp, #16]
   22aa4:	add	r3, sp, #1184	; 0x4a0
   22aa8:	str	r3, [sp]
   22aac:	str	r7, [sp, #32]
   22ab0:	ldr	r0, [r6, #4]
   22ab4:	mov	r3, #0
   22ab8:	cmp	r0, r3
   22abc:	str	r3, [r9, #-2088]	; 0xfffff7d8
   22ac0:	movgt	r5, #0
   22ac4:	strgt	r7, [sp, #8]
   22ac8:	bgt	22af8 <__assert_fail@plt+0x11600>
   22acc:	b	23480 <__assert_fail@plt+0x11f88>
   22ad0:	mov	r1, r7
   22ad4:	mov	r0, r8
   22ad8:	bl	19a1c <__assert_fail@plt+0x8524>
   22adc:	cmp	r0, #0
   22ae0:	str	r0, [r9, #-2096]	; 0xfffff7d0
   22ae4:	bne	236b4 <__assert_fail@plt+0x121bc>
   22ae8:	ldr	r0, [r6, #4]
   22aec:	add	r5, r5, #1
   22af0:	cmp	r5, r0
   22af4:	bge	2347c <__assert_fail@plt+0x11f84>
   22af8:	ldr	r2, [r6, #8]
   22afc:	ldr	r3, [fp, #12]
   22b00:	ldr	r2, [r2, r5, lsl #2]
   22b04:	ldr	r3, [r3, r2, lsl #2]
   22b08:	cmn	r3, #1
   22b0c:	beq	22aec <__assert_fail@plt+0x115f4>
   22b10:	add	r3, r3, r3, lsl #1
   22b14:	ldr	r2, [fp, #24]
   22b18:	adds	r7, r2, r3, lsl #2
   22b1c:	streq	r7, [r9, #-2096]	; 0xfffff7d0
   22b20:	beq	22aec <__assert_fail@plt+0x115f4>
   22b24:	ldr	r2, [r7, #4]
   22b28:	cmp	r2, #0
   22b2c:	streq	r2, [r9, #-2096]	; 0xfffff7d0
   22b30:	beq	22aec <__assert_fail@plt+0x115f4>
   22b34:	ldr	r1, [r9, #-2088]	; 0xfffff7d8
   22b38:	ldr	r4, [r9, #-2092]	; 0xfffff7d4
   22b3c:	add	r1, r1, r2, lsl #1
   22b40:	cmp	r4, r1
   22b44:	bge	22ad0 <__assert_fail@plt+0x115d8>
   22b48:	add	r2, r2, r4
   22b4c:	ldr	r0, [r9, #-2084]	; 0xfffff7dc
   22b50:	lsl	r1, r2, #3
   22b54:	lsl	r4, r2, #1
   22b58:	bl	2a7bc <__assert_fail@plt+0x192c4>
   22b5c:	cmp	r0, #0
   22b60:	beq	23718 <__assert_fail@plt+0x12220>
   22b64:	str	r0, [r9, #-2084]	; 0xfffff7dc
   22b68:	str	r4, [r9, #-2092]	; 0xfffff7d4
   22b6c:	b	22ad0 <__assert_fail@plt+0x115d8>
   22b70:	ldrb	r3, [r3, r2, lsl #3]
   22b74:	and	r1, r3, #31
   22b78:	asr	r3, r3, #5
   22b7c:	ldr	r2, [r9, r3, lsl #2]
   22b80:	orr	r2, r2, ip, lsl r1
   22b84:	str	r2, [r9, r3, lsl #2]
   22b88:	cmp	r4, #0
   22b8c:	beq	22de0 <__assert_fail@plt+0x118e8>
   22b90:	tst	r4, #32
   22b94:	bne	233b0 <__assert_fail@plt+0x11eb8>
   22b98:	tst	r4, #128	; 0x80
   22b9c:	bne	23230 <__assert_fail@plt+0x11d38>
   22ba0:	tst	r4, #4
   22ba4:	beq	22cd0 <__assert_fail@plt+0x117d8>
   22ba8:	ldr	r3, [sp, #28]
   22bac:	cmp	r3, #1
   22bb0:	beq	23728 <__assert_fail@plt+0x12230>
   22bb4:	ldr	r3, [sp, #104]	; 0x68
   22bb8:	ldr	r3, [r3, #92]	; 0x5c
   22bbc:	cmp	r3, #1
   22bc0:	ble	237c0 <__assert_fail@plt+0x122c8>
   22bc4:	ldr	r6, [sp, #104]	; 0x68
   22bc8:	ldr	r3, [r6, #60]	; 0x3c
   22bcc:	ldr	r0, [r6, #96]	; 0x60
   22bd0:	ldr	r2, [r6, #100]	; 0x64
   22bd4:	ldr	lr, [r3]
   22bd8:	ldr	r1, [r3, #4]
   22bdc:	mvn	lr, lr
   22be0:	orr	lr, lr, r0
   22be4:	ldr	r0, [r9]
   22be8:	mvn	r1, r1
   22bec:	and	lr, lr, r0
   22bf0:	ldr	r0, [r9, #4]
   22bf4:	orr	r1, r1, r2
   22bf8:	ldr	r2, [r3, #8]
   22bfc:	and	r1, r1, r0
   22c00:	ldr	ip, [r3, #12]
   22c04:	ldr	r0, [r6, #104]	; 0x68
   22c08:	mvn	r2, r2
   22c0c:	orr	r2, r2, r0
   22c10:	mvn	r0, ip
   22c14:	ldr	ip, [r9, #8]
   22c18:	str	lr, [r9]
   22c1c:	and	r2, r2, ip
   22c20:	ldr	ip, [r6, #108]	; 0x6c
   22c24:	orr	lr, lr, r1
   22c28:	str	r1, [r9, #4]
   22c2c:	ldr	r1, [r9, #12]
   22c30:	orr	r0, r0, ip
   22c34:	ldr	ip, [r3, #16]
   22c38:	and	r1, r1, r0
   22c3c:	orr	lr, lr, r2
   22c40:	ldr	r0, [r3, #20]
   22c44:	str	r2, [r9, #8]
   22c48:	ldr	r2, [r6, #112]	; 0x70
   22c4c:	mvn	ip, ip
   22c50:	orr	ip, ip, r2
   22c54:	mvn	r2, r0
   22c58:	ldr	r0, [r9, #16]
   22c5c:	orr	lr, lr, r1
   22c60:	and	ip, ip, r0
   22c64:	ldr	r0, [r6, #116]	; 0x74
   22c68:	str	r1, [r9, #12]
   22c6c:	orr	r2, r2, r0
   22c70:	ldr	r0, [r3, #24]
   22c74:	ldr	r3, [r3, #28]
   22c78:	mvn	r0, r0
   22c7c:	mvn	r5, r3
   22c80:	ldr	r3, [r9, #20]
   22c84:	ldr	r1, [r9, #28]
   22c88:	and	r2, r2, r3
   22c8c:	ldr	r3, [r6, #120]	; 0x78
   22c90:	orr	lr, lr, ip
   22c94:	orr	r0, r0, r3
   22c98:	ldr	r3, [r9, #24]
   22c9c:	orr	lr, lr, r2
   22ca0:	and	r0, r0, r3
   22ca4:	ldr	r3, [r6, #124]	; 0x7c
   22ca8:	orr	lr, lr, r0
   22cac:	orr	r3, r5, r3
   22cb0:	and	r3, r3, r1
   22cb4:	str	r2, [r9, #20]
   22cb8:	orr	r2, lr, r3
   22cbc:	str	ip, [r9, #16]
   22cc0:	str	r0, [r9, #24]
   22cc4:	str	r3, [r9, #28]
   22cc8:	cmp	r2, #0
   22ccc:	beq	23240 <__assert_fail@plt+0x11d48>
   22cd0:	tst	r4, #8
   22cd4:	beq	22de0 <__assert_fail@plt+0x118e8>
   22cd8:	ldr	r3, [sp, #28]
   22cdc:	cmp	r3, #1
   22ce0:	beq	23220 <__assert_fail@plt+0x11d28>
   22ce4:	ldr	r3, [sp, #104]	; 0x68
   22ce8:	ldr	r4, [sp, #104]	; 0x68
   22cec:	ldr	r3, [r3, #92]	; 0x5c
   22cf0:	cmp	r3, #1
   22cf4:	ble	233dc <__assert_fail@plt+0x11ee4>
   22cf8:	ldr	r1, [r4, #60]	; 0x3c
   22cfc:	ldr	r0, [r4, #96]	; 0x60
   22d00:	ldr	ip, [r4, #100]	; 0x64
   22d04:	ldr	r3, [r1]
   22d08:	ldr	r2, [r1, #4]
   22d0c:	and	r3, r3, r0
   22d10:	and	r2, r2, ip
   22d14:	ldr	r0, [r9]
   22d18:	ldr	ip, [r9, #4]
   22d1c:	bic	r3, r0, r3
   22d20:	bic	r2, ip, r2
   22d24:	ldr	r0, [r1, #8]
   22d28:	ldr	ip, [r4, #104]	; 0x68
   22d2c:	ldr	lr, [r1, #12]
   22d30:	and	r0, r0, ip
   22d34:	ldr	ip, [r9, #8]
   22d38:	str	r3, [r9]
   22d3c:	bic	r0, ip, r0
   22d40:	ldr	ip, [r4, #108]	; 0x6c
   22d44:	orr	r3, r3, r2
   22d48:	and	ip, ip, lr
   22d4c:	ldr	lr, [r9, #12]
   22d50:	str	r2, [r9, #4]
   22d54:	bic	ip, lr, ip
   22d58:	ldr	r2, [r4, #112]	; 0x70
   22d5c:	ldr	lr, [r1, #16]
   22d60:	orr	r3, r3, r0
   22d64:	and	r2, r2, lr
   22d68:	ldr	lr, [r9, #16]
   22d6c:	str	r0, [r9, #8]
   22d70:	bic	r2, lr, r2
   22d74:	ldr	r0, [r4, #116]	; 0x74
   22d78:	ldr	lr, [r1, #20]
   22d7c:	orr	r3, r3, ip
   22d80:	and	r0, r0, lr
   22d84:	ldr	lr, [r9, #20]
   22d88:	str	ip, [r9, #12]
   22d8c:	bic	r0, lr, r0
   22d90:	ldr	ip, [r1, #28]
   22d94:	ldr	lr, [r1, #24]
   22d98:	ldr	r1, [r4, #120]	; 0x78
   22d9c:	orr	r3, r3, r2
   22da0:	str	r2, [r9, #16]
   22da4:	ldr	r2, [r4, #124]	; 0x7c
   22da8:	and	r1, r1, lr
   22dac:	ldr	lr, [r9, #24]
   22db0:	and	ip, ip, r2
   22db4:	ldr	r2, [r9, #28]
   22db8:	bic	r1, lr, r1
   22dbc:	orr	r3, r3, r0
   22dc0:	bic	r2, r2, ip
   22dc4:	orr	r3, r3, r1
   22dc8:	orr	r3, r3, r2
   22dcc:	str	r0, [r9, #20]
   22dd0:	str	r1, [r9, #24]
   22dd4:	str	r2, [r9, #28]
   22dd8:	cmp	r3, #0
   22ddc:	beq	23240 <__assert_fail@plt+0x11d48>
   22de0:	ldr	r3, [sp, #20]
   22de4:	cmp	r3, #0
   22de8:	movle	r3, #0
   22dec:	strle	r3, [sp, #4]
   22df0:	ble	2324c <__assert_fail@plt+0x11d54>
   22df4:	add	r3, sp, #6272	; 0x1880
   22df8:	add	r3, r3, #32
   22dfc:	str	r3, [sp, #108]	; 0x6c
   22e00:	mov	r4, r3
   22e04:	add	r3, sp, #3232	; 0xca0
   22e08:	str	r3, [sp]
   22e0c:	mov	r3, #0
   22e10:	str	r3, [sp, #4]
   22e14:	b	230f0 <__assert_fail@plt+0x11bf8>
   22e18:	ldr	sl, [r9]
   22e1c:	ldr	fp, [r4]
   22e20:	ldr	r7, [r9, #4]
   22e24:	ldr	r8, [r4, #4]
   22e28:	ldr	r1, [r9, #12]
   22e2c:	ldr	r5, [r9, #8]
   22e30:	ldr	r6, [r4, #8]
   22e34:	and	r2, r7, r8
   22e38:	and	r3, sl, fp
   22e3c:	mov	r0, r1
   22e40:	ldr	lr, [r4, #12]
   22e44:	and	r1, r5, r6
   22e48:	str	r3, [sp, #44]	; 0x2c
   22e4c:	orr	r3, r3, r2
   22e50:	ldr	ip, [r4, #16]
   22e54:	str	r1, [sp, #52]	; 0x34
   22e58:	orr	r3, r3, r1
   22e5c:	ldr	r1, [r9, #20]
   22e60:	str	r0, [sp, #32]
   22e64:	and	r0, r0, lr
   22e68:	str	ip, [sp, #8]
   22e6c:	mov	ip, r0
   22e70:	mov	r0, r1
   22e74:	ldr	r1, [r4, #20]
   22e78:	str	r0, [sp, #40]	; 0x28
   22e7c:	and	r0, r0, r1
   22e80:	str	r0, [sp, #24]
   22e84:	ldr	r0, [r9, #28]
   22e88:	str	r2, [sp, #48]	; 0x30
   22e8c:	str	ip, [sp, #56]	; 0x38
   22e90:	ldr	r2, [r9, #16]
   22e94:	orr	r3, r3, ip
   22e98:	ldr	ip, [sp, #8]
   22e9c:	str	r0, [sp, #16]
   22ea0:	ldr	r0, [r4, #28]
   22ea4:	and	ip, r2, ip
   22ea8:	str	r2, [sp, #36]	; 0x24
   22eac:	ldr	r2, [r9, #24]
   22eb0:	str	ip, [sp, #60]	; 0x3c
   22eb4:	orr	r3, r3, ip
   22eb8:	mov	ip, r0
   22ebc:	ldr	r0, [sp, #24]
   22ec0:	str	r2, [sp, #12]
   22ec4:	orr	r3, r3, r0
   22ec8:	ldr	r2, [r4, #24]
   22ecc:	ldr	r0, [sp, #12]
   22ed0:	and	r0, r0, r2
   22ed4:	orr	r3, r3, r0
   22ed8:	str	r0, [sp, #64]	; 0x40
   22edc:	ldr	r0, [sp, #16]
   22ee0:	and	r0, r0, ip
   22ee4:	orrs	r3, r3, r0
   22ee8:	str	r0, [sp, #68]	; 0x44
   22eec:	beq	230c8 <__assert_fail@plt+0x11bd0>
   22ef0:	bic	r0, r8, r7
   22ef4:	bic	r3, fp, sl
   22ef8:	bic	r7, r7, r8
   22efc:	str	r3, [sp, #76]	; 0x4c
   22f00:	bic	r8, r6, r5
   22f04:	orr	r3, r3, r0
   22f08:	bic	sl, sl, fp
   22f0c:	orr	r3, r3, r8
   22f10:	str	r8, [sp, #84]	; 0x54
   22f14:	ldr	r8, [sp, #32]
   22f18:	bic	r6, r5, r6
   22f1c:	orr	r5, sl, r7
   22f20:	bic	fp, lr, r8
   22f24:	orr	r5, r5, r6
   22f28:	bic	lr, r8, lr
   22f2c:	str	lr, [sp, #32]
   22f30:	orr	r5, r5, lr
   22f34:	str	r0, [sp, #80]	; 0x50
   22f38:	ldr	lr, [sp, #36]	; 0x24
   22f3c:	ldr	r0, [sp, #8]
   22f40:	orr	r3, r3, fp
   22f44:	bic	r8, r0, lr
   22f48:	bic	r0, lr, r0
   22f4c:	ldr	lr, [sp, #40]	; 0x28
   22f50:	orr	r3, r3, r8
   22f54:	str	r8, [sp, #8]
   22f58:	ldr	r8, [sp, #12]
   22f5c:	str	fp, [sp, #88]	; 0x58
   22f60:	str	sl, [r9]
   22f64:	bic	fp, r1, lr
   22f68:	ldr	sl, [sp, #16]
   22f6c:	bic	r1, lr, r1
   22f70:	orr	r3, r3, fp
   22f74:	bic	lr, r2, r8
   22f78:	orr	r3, r3, lr
   22f7c:	bic	r2, r8, r2
   22f80:	orr	r5, r5, r0
   22f84:	bic	r8, ip, sl
   22f88:	orr	r5, r5, r1
   22f8c:	orrs	r3, r3, r8
   22f90:	bic	r3, sl, ip
   22f94:	ldr	ip, [sp, #32]
   22f98:	orr	r5, r5, r2
   22f9c:	str	r7, [r9, #4]
   22fa0:	str	r6, [r9, #8]
   22fa4:	str	ip, [r9, #12]
   22fa8:	str	r0, [r9, #16]
   22fac:	str	r1, [r9, #20]
   22fb0:	str	r2, [r9, #24]
   22fb4:	orr	r5, r5, r3
   22fb8:	str	r3, [r9, #28]
   22fbc:	beq	230a0 <__assert_fail@plt+0x11ba8>
   22fc0:	ldr	sl, [sp, #20]
   22fc4:	ldr	r3, [sp, #108]	; 0x6c
   22fc8:	ldr	r6, [sp, #76]	; 0x4c
   22fcc:	ldr	r1, [sp]
   22fd0:	str	r6, [r3, sl, lsl #5]
   22fd4:	add	r3, r3, sl, lsl #5
   22fd8:	ldr	r6, [sp, #80]	; 0x50
   22fdc:	add	ip, sl, sl, lsl #1
   22fe0:	str	r6, [r3, #4]
   22fe4:	ldr	r6, [sp, #84]	; 0x54
   22fe8:	add	r7, sp, #3232	; 0xca0
   22fec:	str	r6, [r3, #8]
   22ff0:	ldr	r6, [sp, #88]	; 0x58
   22ff4:	str	fp, [r3, #20]
   22ff8:	str	r6, [r3, #12]
   22ffc:	ldr	r6, [sp, #8]
   23000:	str	lr, [r3, #24]
   23004:	str	r6, [r3, #16]
   23008:	str	r8, [r3, #28]
   2300c:	ldr	r2, [r1, #4]
   23010:	ldr	r3, [sp, #44]	; 0x2c
   23014:	ldr	r0, [sp, #56]	; 0x38
   23018:	add	r7, r7, ip, lsl #2
   2301c:	str	r3, [r4]
   23020:	str	r2, [r7, #4]
   23024:	ldr	r3, [sp, #48]	; 0x30
   23028:	ldr	r1, [r1, #4]
   2302c:	str	r0, [r4, #12]
   23030:	ldr	r0, [sp, #24]
   23034:	str	r3, [r4, #4]
   23038:	str	r0, [r4, #20]
   2303c:	ldr	r3, [sp, #60]	; 0x3c
   23040:	ldr	r0, [sp, #64]	; 0x40
   23044:	cmp	r1, #0
   23048:	ldr	r1, [sp, #52]	; 0x34
   2304c:	str	r3, [r4, #16]
   23050:	str	r1, [r4, #8]
   23054:	str	r0, [r4, #24]
   23058:	ldr	r0, [sp, #68]	; 0x44
   2305c:	str	r0, [r4, #28]
   23060:	ble	2313c <__assert_fail@plt+0x11c44>
   23064:	add	r3, sp, #3232	; 0xca0
   23068:	lsl	r0, r2, #2
   2306c:	str	r2, [r3, ip, lsl #2]
   23070:	bl	2a790 <__assert_fail@plt+0x19298>
   23074:	cmp	r0, #0
   23078:	str	r0, [r7, #8]
   2307c:	beq	23158 <__assert_fail@plt+0x11c60>
   23080:	ldr	r3, [sp]
   23084:	ldr	r2, [r3, #4]
   23088:	ldr	r1, [r3, #8]
   2308c:	lsl	r2, r2, #2
   23090:	bl	11234 <memcpy@plt>
   23094:	ldr	r3, [sp, #20]
   23098:	add	r3, r3, #1
   2309c:	str	r3, [sp, #20]
   230a0:	ldr	r3, [sp, #72]	; 0x48
   230a4:	ldr	r2, [sp, #92]	; 0x5c
   230a8:	ldr	r0, [sp]
   230ac:	ldr	r3, [r3, #12]
   230b0:	ldr	r1, [r3, r2]
   230b4:	bl	19498 <__assert_fail@plt+0x7fa0>
   230b8:	cmp	r0, #0
   230bc:	beq	23164 <__assert_fail@plt+0x11c6c>
   230c0:	cmp	r5, #0
   230c4:	beq	2324c <__assert_fail@plt+0x11d54>
   230c8:	ldr	r3, [sp, #4]
   230cc:	ldr	r2, [sp, #20]
   230d0:	add	r3, r3, #1
   230d4:	str	r3, [sp, #4]
   230d8:	cmp	r3, r2
   230dc:	ldr	r3, [sp]
   230e0:	add	r4, r4, #32
   230e4:	add	r3, r3, #12
   230e8:	str	r3, [sp]
   230ec:	bge	2324c <__assert_fail@plt+0x11d54>
   230f0:	ldr	r3, [sp, #28]
   230f4:	cmp	r3, #1
   230f8:	bne	22e18 <__assert_fail@plt+0x11920>
   230fc:	ldr	r3, [sp, #100]	; 0x64
   23100:	ldrb	r1, [r3]
   23104:	ldr	r3, [sp, #4]
   23108:	and	r2, r1, #31
   2310c:	asr	r1, r1, #5
   23110:	lsl	r3, r3, #5
   23114:	add	r3, r3, r1, lsl #2
   23118:	add	r1, sp, #14464	; 0x3880
   2311c:	add	r1, r1, #32
   23120:	add	r3, r1, r3
   23124:	sub	r3, r3, #8192	; 0x2000
   23128:	ldr	r3, [r3]
   2312c:	lsr	r2, r3, r2
   23130:	tst	r2, #1
   23134:	beq	230c8 <__assert_fail@plt+0x11bd0>
   23138:	b	22e18 <__assert_fail@plt+0x11920>
   2313c:	add	r3, sp, #3232	; 0xca0
   23140:	mov	r2, #0
   23144:	str	r2, [r3, ip, lsl #2]
   23148:	str	r2, [r7, #4]
   2314c:	str	r2, [r7, #8]
   23150:	mov	r3, sl
   23154:	b	23098 <__assert_fail@plt+0x11ba0>
   23158:	mov	r2, r7
   2315c:	str	r0, [r2, #4]
   23160:	str	r0, [r2]
   23164:	ldr	r6, [sp, #20]
   23168:	add	r4, sp, #3232	; 0xca0
   2316c:	mov	r5, #0
   23170:	ldr	r0, [r4, #8]
   23174:	add	r5, r5, #1
   23178:	bl	14214 <__assert_fail@plt+0x2d1c>
   2317c:	cmp	r5, r6
   23180:	add	r4, r4, #12
   23184:	bne	23170 <__assert_fail@plt+0x11c78>
   23188:	mov	r0, #0
   2318c:	add	sp, sp, #14464	; 0x3880
   23190:	add	sp, sp, #36	; 0x24
   23194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23198:	ldr	r3, [r3, r2, lsl #3]
   2319c:	ldr	ip, [r9]
   231a0:	ldr	r0, [r9, #4]
   231a4:	ldr	r1, [r3, #4]
   231a8:	ldr	r2, [r3]
   231ac:	orr	r0, r0, r1
   231b0:	orr	r2, ip, r2
   231b4:	ldr	r1, [r3, #8]
   231b8:	ldr	ip, [r9, #8]
   231bc:	str	r2, [r9]
   231c0:	orr	r1, ip, r1
   231c4:	ldr	r2, [r3, #12]
   231c8:	ldr	ip, [r9, #12]
   231cc:	str	r0, [r9, #4]
   231d0:	orr	r2, ip, r2
   231d4:	ldr	r0, [r3, #16]
   231d8:	ldr	ip, [r9, #16]
   231dc:	str	r1, [r9, #8]
   231e0:	orr	r0, ip, r0
   231e4:	ldr	r1, [r3, #20]
   231e8:	ldr	ip, [r9, #20]
   231ec:	str	r2, [r9, #12]
   231f0:	orr	r1, ip, r1
   231f4:	ldr	r2, [r3, #24]
   231f8:	ldr	ip, [r3, #28]
   231fc:	ldr	r3, [r9, #24]
   23200:	str	r0, [r9, #16]
   23204:	orr	r2, r3, r2
   23208:	ldr	r3, [r9, #28]
   2320c:	str	r1, [r9, #20]
   23210:	orr	r3, r3, ip
   23214:	str	r2, [r9, #24]
   23218:	str	r3, [r9, #28]
   2321c:	b	22b88 <__assert_fail@plt+0x11690>
   23220:	ldr	r3, [sp, #100]	; 0x64
   23224:	ldrb	r3, [r3, #6]
   23228:	tst	r3, #64	; 0x40
   2322c:	beq	22ce4 <__assert_fail@plt+0x117ec>
   23230:	mov	r2, #32
   23234:	mov	r1, #0
   23238:	mov	r0, r9
   2323c:	bl	11414 <memset@plt>
   23240:	ldr	r3, [sp, #72]	; 0x48
   23244:	ldr	r1, [r3, #8]
   23248:	b	22a08 <__assert_fail@plt+0x11510>
   2324c:	ldr	r3, [sp, #20]
   23250:	ldr	r2, [sp, #4]
   23254:	cmp	r3, r2
   23258:	bne	23240 <__assert_fail@plt+0x11d48>
   2325c:	mov	lr, r9
   23260:	mov	r4, r3
   23264:	add	r5, sp, #14464	; 0x3880
   23268:	ldm	lr!, {r0, r1, r2, r3}
   2326c:	add	r5, r5, #32
   23270:	add	ip, r5, r4, lsl #5
   23274:	sub	ip, ip, #8192	; 0x2000
   23278:	add	r5, r4, r4, lsl #1
   2327c:	stmia	ip!, {r0, r1, r2, r3}
   23280:	add	r3, sp, #3232	; 0xca0
   23284:	add	r4, r3, r5, lsl #2
   23288:	ldm	lr, {r0, r1, r2, r3}
   2328c:	ldr	lr, [sp, #72]	; 0x48
   23290:	stm	ip, {r0, r1, r2, r3}
   23294:	mov	r2, #1
   23298:	ldr	r3, [sp, #92]	; 0x5c
   2329c:	ldr	lr, [lr, #12]
   232a0:	mov	r0, #4
   232a4:	ldr	r6, [lr, r3]
   232a8:	add	r3, sp, #3232	; 0xca0
   232ac:	str	r2, [r3, r5, lsl #2]
   232b0:	str	r2, [r4, #4]
   232b4:	bl	2a790 <__assert_fail@plt+0x19298>
   232b8:	cmp	r0, #0
   232bc:	str	r0, [r4, #8]
   232c0:	beq	2389c <__assert_fail@plt+0x123a4>
   232c4:	mov	r1, #0
   232c8:	str	r6, [r0]
   232cc:	mov	r2, #32
   232d0:	mov	r0, r9
   232d4:	bl	11414 <memset@plt>
   232d8:	ldr	r3, [sp, #72]	; 0x48
   232dc:	ldr	r1, [r3, #8]
   232e0:	ldr	r3, [sp, #20]
   232e4:	add	r3, r3, #1
   232e8:	str	r3, [sp, #20]
   232ec:	b	22a08 <__assert_fail@plt+0x11510>
   232f0:	ldr	r2, [sp, #104]	; 0x68
   232f4:	ldr	r3, [r2, #92]	; 0x5c
   232f8:	cmp	r3, #1
   232fc:	ble	23864 <__assert_fail@plt+0x1236c>
   23300:	ldr	r2, [r2, #60]	; 0x3c
   23304:	ldr	ip, [r9]
   23308:	ldr	r1, [r9, #4]
   2330c:	ldm	r2, {r0, r3}
   23310:	orr	r0, ip, r0
   23314:	orr	r3, r1, r3
   23318:	ldr	ip, [r9, #8]
   2331c:	ldr	r1, [r2, #8]
   23320:	str	r0, [r9]
   23324:	orr	r1, ip, r1
   23328:	ldr	r0, [r2, #12]
   2332c:	ldr	ip, [r9, #12]
   23330:	str	r3, [r9, #4]
   23334:	orr	r0, ip, r0
   23338:	ldr	r3, [r2, #16]
   2333c:	ldr	ip, [r9, #16]
   23340:	str	r1, [r9, #8]
   23344:	orr	r3, ip, r3
   23348:	ldr	r1, [r2, #20]
   2334c:	ldr	ip, [r9, #20]
   23350:	str	r0, [r9, #12]
   23354:	orr	r1, ip, r1
   23358:	ldr	r0, [r2, #28]
   2335c:	ldr	ip, [r2, #24]
   23360:	str	r3, [r9, #16]
   23364:	ldr	r2, [r9, #24]
   23368:	ldr	r3, [r9, #28]
   2336c:	orr	r2, r2, ip
   23370:	orr	r3, r3, r0
   23374:	str	r1, [r9, #20]
   23378:	str	r2, [r9, #24]
   2337c:	str	r3, [r9, #28]
   23380:	ldr	r3, [sp, #104]	; 0x68
   23384:	ldr	r3, [r3, #128]	; 0x80
   23388:	tst	r3, #64	; 0x40
   2338c:	ldreq	r2, [r9]
   23390:	biceq	r2, r2, #1024	; 0x400
   23394:	streq	r2, [r9]
   23398:	tst	r3, #128	; 0x80
   2339c:	beq	22b88 <__assert_fail@plt+0x11690>
   233a0:	ldr	r3, [r9]
   233a4:	bic	r3, r3, #1
   233a8:	str	r3, [r9]
   233ac:	b	22b88 <__assert_fail@plt+0x11690>
   233b0:	ldr	r5, [r9]
   233b4:	mov	r2, #32
   233b8:	and	r5, r5, #1024	; 0x400
   233bc:	mov	r1, #0
   233c0:	mov	r0, r9
   233c4:	bl	11414 <memset@plt>
   233c8:	cmp	r5, #0
   233cc:	beq	23240 <__assert_fail@plt+0x11d48>
   233d0:	mov	r3, #1024	; 0x400
   233d4:	str	r3, [r9]
   233d8:	b	22b98 <__assert_fail@plt+0x116a0>
   233dc:	ldr	r2, [r4, #96]	; 0x60
   233e0:	ldr	r3, [r9]
   233e4:	ldr	r1, [r4, #100]	; 0x64
   233e8:	ldr	r0, [r9, #4]
   233ec:	bic	r3, r3, r2
   233f0:	bic	r0, r0, r1
   233f4:	ldr	r2, [r4, #104]	; 0x68
   233f8:	ldr	r1, [r9, #8]
   233fc:	ldr	ip, [r9, #12]
   23400:	bic	r1, r1, r2
   23404:	ldr	r2, [r4, #108]	; 0x6c
   23408:	ldr	lr, [r9, #16]
   2340c:	bic	ip, ip, r2
   23410:	ldr	r2, [r4, #112]	; 0x70
   23414:	str	r3, [r9]
   23418:	bic	r2, lr, r2
   2341c:	orr	r3, r3, r0
   23420:	ldr	lr, [r9, #20]
   23424:	str	r0, [r9, #4]
   23428:	ldr	r0, [r4, #116]	; 0x74
   2342c:	orr	r3, r3, r1
   23430:	bic	r0, lr, r0
   23434:	orr	r3, r3, ip
   23438:	ldr	lr, [r9, #24]
   2343c:	str	r1, [r9, #8]
   23440:	ldr	r1, [r4, #120]	; 0x78
   23444:	orr	r3, r3, r2
   23448:	str	ip, [r9, #12]
   2344c:	str	r2, [r9, #16]
   23450:	ldr	ip, [r4, #124]	; 0x7c
   23454:	ldr	r2, [r9, #28]
   23458:	bic	r1, lr, r1
   2345c:	orr	r3, r3, r0
   23460:	bic	r2, r2, ip
   23464:	orr	r3, r3, r1
   23468:	str	r0, [r9, #20]
   2346c:	str	r1, [r9, #24]
   23470:	orr	r3, r3, r2
   23474:	str	r2, [r9, #28]
   23478:	b	22dd8 <__assert_fail@plt+0x118e0>
   2347c:	ldr	r7, [sp, #8]
   23480:	mov	r3, #0
   23484:	mov	r2, r8
   23488:	mov	r1, fp
   2348c:	ldr	r0, [sp, #16]
   23490:	bl	22508 <__assert_fail@plt+0x11010>
   23494:	ldr	r3, [sp, #4]
   23498:	cmp	r0, #0
   2349c:	str	r0, [r3, #4]!
   234a0:	mov	r4, r0
   234a4:	str	r3, [sp, #4]
   234a8:	beq	236a8 <__assert_fail@plt+0x121b0>
   234ac:	ldrsb	r3, [r4, #52]	; 0x34
   234b0:	cmp	r3, #0
   234b4:	blt	23750 <__assert_fail@plt+0x12258>
   234b8:	ldr	r3, [sp]
   234bc:	str	r4, [r9, sl, lsl #2]
   234c0:	str	r4, [r3]
   234c4:	ldr	r3, [r7, #4]
   234c8:	ldr	r0, [r9, #-2076]	; 0xfffff7e4
   234cc:	ldr	r1, [sp, #20]
   234d0:	add	sl, sl, #1
   234d4:	ldr	r2, [r7]
   234d8:	orr	r0, r0, r3
   234dc:	ldr	r4, [r9, #-2080]	; 0xfffff7e0
   234e0:	ldr	r3, [r7, #8]
   234e4:	cmp	sl, r1
   234e8:	ldr	r1, [r9, #-2072]	; 0xfffff7e8
   234ec:	orr	r4, r4, r2
   234f0:	orr	r1, r1, r3
   234f4:	ldr	r2, [r9, #-2068]	; 0xfffff7ec
   234f8:	ldr	r3, [r7, #12]
   234fc:	str	r0, [r9, #-2076]	; 0xfffff7e4
   23500:	orr	r2, r2, r3
   23504:	ldr	r3, [sp]
   23508:	ldr	r0, [r9, #-2060]	; 0xfffff7f4
   2350c:	add	r3, r3, #4
   23510:	str	r1, [r9, #-2072]	; 0xfffff7e8
   23514:	ldr	r1, [r7, #20]
   23518:	ldr	ip, [r9, #-2064]	; 0xfffff7f0
   2351c:	str	r3, [sp]
   23520:	ldr	r3, [r7, #16]
   23524:	orr	r1, r0, r1
   23528:	str	r2, [r9, #-2068]	; 0xfffff7ec
   2352c:	ldr	r0, [r7, #24]
   23530:	ldr	r2, [r9, #-2056]	; 0xfffff7f8
   23534:	orr	r3, ip, r3
   23538:	orr	r2, r2, r0
   2353c:	str	r3, [r9, #-2064]	; 0xfffff7f0
   23540:	ldr	r0, [r7, #28]
   23544:	ldr	r3, [r9, #-2052]	; 0xfffff7fc
   23548:	add	r6, r6, #12
   2354c:	orr	r3, r3, r0
   23550:	str	r4, [r9, #-2080]	; 0xfffff7e0
   23554:	str	r1, [r9, #-2060]	; 0xfffff7f4
   23558:	str	r2, [r9, #-2056]	; 0xfffff7f8
   2355c:	str	r3, [r9, #-2052]	; 0xfffff7fc
   23560:	add	r7, r7, #32
   23564:	bne	22ab0 <__assert_fail@plt+0x115b8>
   23568:	ldr	r3, [sp, #24]
   2356c:	ldr	r5, [sp, #32]
   23570:	cmp	r3, #0
   23574:	bne	238cc <__assert_fail@plt+0x123d4>
   23578:	mov	r1, #256	; 0x100
   2357c:	mov	r0, #4
   23580:	bl	2a748 <__assert_fail@plt+0x19250>
   23584:	ldr	r3, [sp, #72]	; 0x48
   23588:	cmp	r0, #0
   2358c:	str	r0, [r3, #44]	; 0x2c
   23590:	beq	236b4 <__assert_fail@plt+0x121bc>
   23594:	ldr	r3, [sp, #104]	; 0x68
   23598:	add	r8, sp, #128	; 0x80
   2359c:	add	r6, r3, #96	; 0x60
   235a0:	mov	r7, r0
   235a4:	add	fp, r0, #1024	; 0x400
   235a8:	ldr	r1, [r8], #4
   235ac:	cmp	r1, #0
   235b0:	movne	ip, r7
   235b4:	movne	r2, #1
   235b8:	bne	235d0 <__assert_fail@plt+0x120d8>
   235bc:	b	2361c <__assert_fail@plt+0x12124>
   235c0:	lsrs	r1, r1, #1
   235c4:	lsl	r2, r2, #1
   235c8:	add	ip, ip, #4
   235cc:	beq	2361c <__assert_fail@plt+0x12124>
   235d0:	tst	r1, #1
   235d4:	beq	235c0 <__assert_fail@plt+0x120c8>
   235d8:	ldr	r3, [r5]
   235dc:	ands	r3, r2, r3
   235e0:	bne	238c4 <__assert_fail@plt+0x123cc>
   235e4:	add	r3, r3, #1
   235e8:	ldr	lr, [r5, r3, lsl #5]
   235ec:	tst	r2, lr
   235f0:	beq	235e4 <__assert_fail@plt+0x120ec>
   235f4:	ldr	lr, [r6]
   235f8:	add	r3, r9, r3, lsl #2
   235fc:	tst	r2, lr
   23600:	add	ip, ip, #4
   23604:	ldrne	r3, [r3, #-1024]	; 0xfffffc00
   23608:	ldreq	r3, [r3, #-2048]	; 0xfffff800
   2360c:	lsrs	r1, r1, #1
   23610:	str	r3, [ip, #-4]
   23614:	lsl	r2, r2, #1
   23618:	bne	235d0 <__assert_fail@plt+0x120d8>
   2361c:	add	r7, r7, #128	; 0x80
   23620:	cmp	fp, r7
   23624:	add	r6, r6, #4
   23628:	add	r5, r5, #4
   2362c:	bne	235a8 <__assert_fail@plt+0x120b0>
   23630:	tst	r4, #1024	; 0x400
   23634:	beq	23670 <__assert_fail@plt+0x12178>
   23638:	mov	r3, #0
   2363c:	ldr	r1, [sp, #28]
   23640:	b	23650 <__assert_fail@plt+0x12158>
   23644:	add	r3, r3, #1
   23648:	cmp	sl, r3
   2364c:	beq	23670 <__assert_fail@plt+0x12178>
   23650:	ldr	r2, [r1, r3, lsl #5]
   23654:	tst	r2, #1024	; 0x400
   23658:	beq	23644 <__assert_fail@plt+0x1214c>
   2365c:	ldr	r2, [sp, #24]
   23660:	ldr	r3, [r9, r3, lsl #2]
   23664:	cmp	r2, #0
   23668:	str	r3, [r0, #40]	; 0x28
   2366c:	strne	r3, [r0, #1064]	; 0x428
   23670:	ldr	r0, [r9, #-2084]	; 0xfffff7dc
   23674:	add	r9, sl, sl, lsl #1
   23678:	bl	14214 <__assert_fail@plt+0x2d1c>
   2367c:	ldr	r5, [sp, #12]
   23680:	mov	r4, #0
   23684:	lsl	r9, r9, #2
   23688:	add	r3, r5, r4
   2368c:	add	r4, r4, #12
   23690:	ldr	r0, [r3, #8]
   23694:	bl	14214 <__assert_fail@plt+0x2d1c>
   23698:	cmp	r4, r9
   2369c:	bne	23688 <__assert_fail@plt+0x12190>
   236a0:	mov	r0, #1
   236a4:	b	2318c <__assert_fail@plt+0x11c94>
   236a8:	ldr	r3, [r9, #-2096]	; 0xfffff7d0
   236ac:	cmp	r3, #0
   236b0:	beq	234ac <__assert_fail@plt+0x11fb4>
   236b4:	ldr	r0, [r9, #-2084]	; 0xfffff7dc
   236b8:	bl	14214 <__assert_fail@plt+0x2d1c>
   236bc:	ldr	r5, [sp, #12]
   236c0:	ldr	r6, [sp, #20]
   236c4:	mov	r4, #0
   236c8:	ldr	r0, [r5, #8]
   236cc:	add	r4, r4, #1
   236d0:	bl	14214 <__assert_fail@plt+0x2d1c>
   236d4:	cmp	r4, r6
   236d8:	add	r5, r5, #12
   236dc:	bne	236c8 <__assert_fail@plt+0x121d0>
   236e0:	b	23188 <__assert_fail@plt+0x11c90>
   236e4:	ldr	r3, [sp, #104]	; 0x68
   236e8:	ldr	r2, [r3, #128]	; 0x80
   236ec:	mvn	r3, #0
   236f0:	tst	r2, #64	; 0x40
   236f4:	str	r3, [r9]
   236f8:	str	r3, [r9, #4]
   236fc:	str	r3, [r9, #8]
   23700:	str	r3, [r9, #12]
   23704:	mvneq	r3, #1024	; 0x400
   23708:	streq	r3, [r9]
   2370c:	tst	r2, #128	; 0x80
   23710:	beq	22b88 <__assert_fail@plt+0x11690>
   23714:	b	233a0 <__assert_fail@plt+0x11ea8>
   23718:	mov	r3, #12
   2371c:	str	r3, [r9, #-2096]	; 0xfffff7d0
   23720:	ldr	r0, [r9, #-2084]	; 0xfffff7dc
   23724:	b	236b8 <__assert_fail@plt+0x121c0>
   23728:	ldr	r3, [sp, #100]	; 0x64
   2372c:	ldrb	r3, [r3, #6]
   23730:	tst	r3, #64	; 0x40
   23734:	bne	22bb4 <__assert_fail@plt+0x116bc>
   23738:	b	23230 <__assert_fail@plt+0x11d38>
   2373c:	mov	r3, #12
   23740:	str	r3, [r9, #-2096]	; 0xfffff7d0
   23744:	add	r3, sp, #3232	; 0xca0
   23748:	str	r3, [sp, #12]
   2374c:	b	236b8 <__assert_fail@plt+0x121c0>
   23750:	mov	r3, #1
   23754:	mov	r2, r8
   23758:	mov	r1, fp
   2375c:	ldr	r0, [sp, #16]
   23760:	bl	22508 <__assert_fail@plt+0x11010>
   23764:	ldr	r3, [sp]
   23768:	cmp	r0, #0
   2376c:	str	r0, [r3]
   23770:	beq	238b4 <__assert_fail@plt+0x123bc>
   23774:	cmp	r4, r0
   23778:	beq	23790 <__assert_fail@plt+0x12298>
   2377c:	ldr	r3, [fp, #92]	; 0x5c
   23780:	ldr	r2, [sp, #24]
   23784:	cmp	r3, #1
   23788:	movgt	r2, #1
   2378c:	str	r2, [sp, #24]
   23790:	mov	r3, #2
   23794:	mov	r2, r8
   23798:	mov	r1, fp
   2379c:	ldr	r0, [sp, #16]
   237a0:	bl	22508 <__assert_fail@plt+0x11010>
   237a4:	cmp	r0, #0
   237a8:	str	r0, [r9, sl, lsl #2]
   237ac:	bne	234c4 <__assert_fail@plt+0x11fcc>
   237b0:	ldr	r3, [r9, #-2096]	; 0xfffff7d0
   237b4:	cmp	r3, #0
   237b8:	beq	234c4 <__assert_fail@plt+0x11fcc>
   237bc:	b	236b4 <__assert_fail@plt+0x121bc>
   237c0:	ldr	r5, [sp, #104]	; 0x68
   237c4:	ldr	ip, [r9, #4]
   237c8:	ldr	r1, [r9]
   237cc:	ldr	r2, [r5, #100]	; 0x64
   237d0:	ldr	r0, [r9, #8]
   237d4:	and	ip, ip, r2
   237d8:	ldr	r3, [r5, #96]	; 0x60
   237dc:	ldr	r2, [r5, #104]	; 0x68
   237e0:	and	r3, r3, r1
   237e4:	and	r0, r0, r2
   237e8:	ldr	r1, [r9, #12]
   237ec:	ldr	r2, [r5, #108]	; 0x6c
   237f0:	ldr	lr, [r9, #16]
   237f4:	and	r1, r1, r2
   237f8:	ldr	r2, [r5, #112]	; 0x70
   237fc:	str	r3, [r9]
   23800:	and	r2, r2, lr
   23804:	orr	r3, r3, ip
   23808:	ldr	lr, [r9, #20]
   2380c:	str	ip, [r9, #4]
   23810:	ldr	ip, [r5, #116]	; 0x74
   23814:	orr	r3, r3, r0
   23818:	and	ip, ip, lr
   2381c:	orr	r3, r3, r1
   23820:	ldr	lr, [r9, #24]
   23824:	str	r0, [r9, #8]
   23828:	ldr	r0, [r5, #120]	; 0x78
   2382c:	orr	r3, r3, r2
   23830:	str	r1, [r9, #12]
   23834:	str	r2, [r9, #16]
   23838:	ldr	r1, [r9, #28]
   2383c:	ldr	r2, [r5, #124]	; 0x7c
   23840:	and	r0, r0, lr
   23844:	orr	r3, r3, ip
   23848:	and	r1, r1, r2
   2384c:	orr	r3, r3, r0
   23850:	str	ip, [r9, #20]
   23854:	str	r0, [r9, #24]
   23858:	orr	r2, r3, r1
   2385c:	str	r1, [r9, #28]
   23860:	b	22cc8 <__assert_fail@plt+0x117d0>
   23864:	mov	r2, #32
   23868:	mvn	r1, #0
   2386c:	mov	r0, r9
   23870:	bl	11414 <memset@plt>
   23874:	b	23380 <__assert_fail@plt+0x11e88>
   23878:	bne	23188 <__assert_fail@plt+0x11c90>
   2387c:	mov	r1, #256	; 0x100
   23880:	mov	r0, #4
   23884:	bl	2a748 <__assert_fail@plt+0x19250>
   23888:	ldr	r3, [sp, #72]	; 0x48
   2388c:	str	r0, [r3, #44]	; 0x2c
   23890:	adds	r0, r0, #0
   23894:	movne	r0, #1
   23898:	b	2318c <__assert_fail@plt+0x11c94>
   2389c:	ldr	r3, [sp, #20]
   238a0:	str	r0, [r4, #4]
   238a4:	cmp	r3, #0
   238a8:	str	r0, [r4]
   238ac:	beq	23188 <__assert_fail@plt+0x11c90>
   238b0:	b	23164 <__assert_fail@plt+0x11c6c>
   238b4:	ldr	r3, [r9, #-2096]	; 0xfffff7d0
   238b8:	cmp	r3, #0
   238bc:	beq	2377c <__assert_fail@plt+0x12284>
   238c0:	b	236b4 <__assert_fail@plt+0x121bc>
   238c4:	mov	r3, #0
   238c8:	b	235f4 <__assert_fail@plt+0x120fc>
   238cc:	mov	r1, #512	; 0x200
   238d0:	mov	r0, #4
   238d4:	bl	2a748 <__assert_fail@plt+0x19250>
   238d8:	ldr	r3, [sp, #72]	; 0x48
   238dc:	cmp	r0, #0
   238e0:	str	r0, [r3, #48]	; 0x30
   238e4:	beq	236b4 <__assert_fail@plt+0x121bc>
   238e8:	add	r7, sp, #128	; 0x80
   238ec:	mov	lr, r0
   238f0:	add	r8, r0, #1024	; 0x400
   238f4:	ldr	r1, [r7], #4
   238f8:	cmp	r1, #0
   238fc:	movne	ip, lr
   23900:	movne	r2, #1
   23904:	bne	2391c <__assert_fail@plt+0x12424>
   23908:	b	23958 <__assert_fail@plt+0x12460>
   2390c:	lsrs	r1, r1, #1
   23910:	lsl	r2, r2, #1
   23914:	add	ip, ip, #4
   23918:	beq	23958 <__assert_fail@plt+0x12460>
   2391c:	tst	r1, #1
   23920:	beq	2390c <__assert_fail@plt+0x12414>
   23924:	ldr	r3, [r5]
   23928:	ands	r3, r2, r3
   2392c:	bne	2396c <__assert_fail@plt+0x12474>
   23930:	add	r3, r3, #1
   23934:	ldr	r6, [r5, r3, lsl #5]
   23938:	tst	r2, r6
   2393c:	beq	23930 <__assert_fail@plt+0x12438>
   23940:	add	r3, r9, r3, lsl #2
   23944:	ldr	r6, [r3, #-2048]	; 0xfffff800
   23948:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   2394c:	str	r6, [ip]
   23950:	str	r3, [ip, #1024]	; 0x400
   23954:	b	2390c <__assert_fail@plt+0x12414>
   23958:	add	lr, lr, #128	; 0x80
   2395c:	cmp	r8, lr
   23960:	add	r5, r5, #4
   23964:	bne	238f4 <__assert_fail@plt+0x123fc>
   23968:	b	23630 <__assert_fail@plt+0x12138>
   2396c:	mov	r3, #0
   23970:	b	23940 <__assert_fail@plt+0x12448>
   23974:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   23978:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2397c:	mov	r5, r0
   23980:	ldr	r0, [r0, #84]	; 0x54
   23984:	sub	sp, sp, #92	; 0x5c
   23988:	mov	ip, r1
   2398c:	str	r0, [sp, #28]
   23990:	ldr	r0, [r0]
   23994:	mov	r7, r2
   23998:	str	r1, [sp, #40]	; 0x28
   2399c:	ldr	r2, [sp, #132]	; 0x84
   239a0:	ldr	r1, [r5, #120]	; 0x78
   239a4:	ldr	r6, [ip, #4]
   239a8:	mov	r8, #0
   239ac:	add	r2, r2, r1
   239b0:	mov	r4, r3
   239b4:	str	r8, [sp, #56]	; 0x38
   239b8:	ldr	r3, [r0, r7, lsl #3]
   239bc:	cmp	r2, r6
   239c0:	str	r3, [sp, #32]
   239c4:	bge	24174 <__assert_fail@plt+0x12c7c>
   239c8:	ldr	r3, [sp, #40]	; 0x28
   239cc:	ldr	r6, [r3]
   239d0:	cmp	r6, #0
   239d4:	beq	23bac <__assert_fail@plt+0x126b4>
   239d8:	ldr	r9, [r3, #8]
   239dc:	ldr	r3, [r5, #100]	; 0x64
   239e0:	ldr	r2, [r5, #88]	; 0x58
   239e4:	str	r3, [sp, #44]	; 0x2c
   239e8:	ldr	r3, [r5, #40]	; 0x28
   239ec:	str	r9, [r5, #100]	; 0x64
   239f0:	str	r6, [r5, #40]	; 0x28
   239f4:	sub	r1, r6, #1
   239f8:	mov	r0, r5
   239fc:	str	r3, [sp, #48]	; 0x30
   23a00:	bl	19b60 <__assert_fail@plt+0x8668>
   23a04:	cmp	r6, r4
   23a08:	mov	r8, r0
   23a0c:	beq	23bdc <__assert_fail@plt+0x126e4>
   23a10:	ldr	r7, [r9, r6, lsl #2]
   23a14:	cmp	r7, #0
   23a18:	beq	241c8 <__assert_fail@plt+0x12cd0>
   23a1c:	ldrb	r3, [r7, #52]	; 0x34
   23a20:	ands	r2, r3, #64	; 0x40
   23a24:	bne	24124 <__assert_fail@plt+0x12c2c>
   23a28:	add	r1, sp, #64	; 0x40
   23a2c:	str	r1, [sp, #16]
   23a30:	str	r2, [sp, #64]	; 0x40
   23a34:	str	r2, [sp, #68]	; 0x44
   23a38:	str	r2, [sp, #72]	; 0x48
   23a3c:	tst	r3, #64	; 0x40
   23a40:	beq	23a9c <__assert_fail@plt+0x125a4>
   23a44:	ldr	r3, [sp, #68]	; 0x44
   23a48:	cmp	r3, #0
   23a4c:	beq	23a78 <__assert_fail@plt+0x12580>
   23a50:	ldr	r3, [sp, #136]	; 0x88
   23a54:	mov	r2, r6
   23a58:	str	r3, [sp]
   23a5c:	ldr	r1, [sp, #16]
   23a60:	ldr	r3, [sp, #32]
   23a64:	mov	r0, r5
   23a68:	bl	1e6a4 <__assert_fail@plt+0xd1ac>
   23a6c:	cmp	r0, #0
   23a70:	str	r0, [sp, #56]	; 0x38
   23a74:	bne	23fcc <__assert_fail@plt+0x12ad4>
   23a78:	mov	r3, r8
   23a7c:	ldr	r2, [sp, #16]
   23a80:	ldr	r1, [sp, #28]
   23a84:	add	r0, sp, #56	; 0x38
   23a88:	bl	22508 <__assert_fail@plt+0x11010>
   23a8c:	subs	r7, r0, #0
   23a90:	beq	241e0 <__assert_fail@plt+0x12ce8>
   23a94:	ldr	r3, [r5, #100]	; 0x64
   23a98:	str	r7, [r3, r6, lsl #2]
   23a9c:	ldr	r3, [sp, #132]	; 0x84
   23aa0:	cmp	r3, r6
   23aa4:	ble	23ed4 <__assert_fail@plt+0x129dc>
   23aa8:	ldr	r3, [r5, #120]	; 0x78
   23aac:	cmp	r3, #0
   23ab0:	blt	23ed4 <__assert_fail@plt+0x129dc>
   23ab4:	mov	r3, #0
   23ab8:	add	r2, r6, #1
   23abc:	str	r3, [sp, #24]
   23ac0:	ldr	r3, [r5, #100]	; 0x64
   23ac4:	mov	fp, r6
   23ac8:	lsl	r2, r2, #2
   23acc:	str	r2, [sp, #12]
   23ad0:	ldr	r2, [sp, #12]
   23ad4:	ldr	r6, [r3, r2]
   23ad8:	mov	r3, #0
   23adc:	cmp	r6, r3
   23ae0:	str	r3, [sp, #68]	; 0x44
   23ae4:	beq	23fa0 <__assert_fail@plt+0x12aa8>
   23ae8:	ldr	r4, [r6, #8]
   23aec:	cmp	r4, r3
   23af0:	streq	r4, [sp, #56]	; 0x38
   23af4:	beq	23fa0 <__assert_fail@plt+0x12aa8>
   23af8:	ldr	r3, [sp, #64]	; 0x40
   23afc:	cmp	r3, r4, lsl #1
   23b00:	blt	240d4 <__assert_fail@plt+0x12bdc>
   23b04:	add	r1, r6, #4
   23b08:	ldr	r0, [sp, #16]
   23b0c:	bl	19a1c <__assert_fail@plt+0x8524>
   23b10:	cmp	r0, #0
   23b14:	str	r0, [sp, #56]	; 0x38
   23b18:	bne	23fcc <__assert_fail@plt+0x12ad4>
   23b1c:	cmp	r7, #0
   23b20:	beq	23e0c <__assert_fail@plt+0x12914>
   23b24:	ldr	r3, [r7, #20]
   23b28:	mov	r2, #0
   23b2c:	cmp	r3, r2
   23b30:	str	r2, [sp, #60]	; 0x3c
   23b34:	str	r2, [sp, #76]	; 0x4c
   23b38:	str	r2, [sp, #80]	; 0x50
   23b3c:	str	r2, [sp, #84]	; 0x54
   23b40:	ldr	r8, [r5, #84]	; 0x54
   23b44:	ble	24204 <__assert_fail@plt+0x12d0c>
   23b48:	ldr	r3, [r7, #24]
   23b4c:	mov	r4, #0
   23b50:	ldr	r6, [r3]
   23b54:	mov	r3, r8
   23b58:	ldr	r0, [r3], #128	; 0x80
   23b5c:	lsl	sl, r6, #3
   23b60:	str	r3, [sp, #20]
   23b64:	add	r3, r0, sl
   23b68:	ldrb	r1, [r3, #6]
   23b6c:	ldrb	r2, [r3, #4]
   23b70:	tst	r1, #16
   23b74:	bne	23d2c <__assert_fail@plt+0x12834>
   23b78:	ldr	r1, [r5, #4]
   23b7c:	sub	r2, r2, #1
   23b80:	ldrb	r1, [r1, fp]
   23b84:	cmp	r2, #6
   23b88:	ldrls	pc, [pc, r2, lsl #2]
   23b8c:	b	23cf8 <__assert_fail@plt+0x12800>
   23b90:	andeq	r3, r2, r8, ror #30
   23b94:	strdeq	r3, [r2], -r8
   23b98:	andeq	r3, r2, r8, lsr #30
   23b9c:	strdeq	r3, [r2], -r8
   23ba0:	andeq	r3, r2, r0, asr #24
   23ba4:	strdeq	r3, [r2], -r8
   23ba8:	andeq	r3, r2, r8, lsr ip
   23bac:	ldr	r2, [r5, #100]	; 0x64
   23bb0:	ldr	r3, [r3, #8]
   23bb4:	str	r2, [sp, #44]	; 0x2c
   23bb8:	ldr	r2, [r5, #40]	; 0x28
   23bbc:	str	r3, [r5, #100]	; 0x64
   23bc0:	str	r2, [sp, #48]	; 0x30
   23bc4:	str	r4, [r5, #40]	; 0x28
   23bc8:	ldr	r2, [r5, #88]	; 0x58
   23bcc:	sub	r1, r4, #1
   23bd0:	mov	r0, r5
   23bd4:	bl	19b60 <__assert_fail@plt+0x8668>
   23bd8:	mov	r8, r0
   23bdc:	mov	r3, #1
   23be0:	mov	r0, #4
   23be4:	str	r3, [sp, #64]	; 0x40
   23be8:	str	r3, [sp, #68]	; 0x44
   23bec:	bl	2a790 <__assert_fail@plt+0x19298>
   23bf0:	cmp	r0, #0
   23bf4:	str	r0, [sp, #72]	; 0x48
   23bf8:	beq	241fc <__assert_fail@plt+0x12d04>
   23bfc:	add	r3, sp, #64	; 0x40
   23c00:	str	r3, [sp, #16]
   23c04:	mov	r1, r3
   23c08:	mov	ip, #0
   23c0c:	str	r7, [r0]
   23c10:	ldr	r3, [sp, #136]	; 0x88
   23c14:	ldr	r2, [sp, #32]
   23c18:	ldr	r0, [sp, #28]
   23c1c:	str	ip, [sp, #56]	; 0x38
   23c20:	bl	1ce58 <__assert_fail@plt+0xb960>
   23c24:	cmp	r0, #0
   23c28:	str	r0, [sp, #56]	; 0x38
   23c2c:	moveq	r6, r4
   23c30:	beq	23a44 <__assert_fail@plt+0x1254c>
   23c34:	b	23fcc <__assert_fail@plt+0x12ad4>
   23c38:	tst	r1, #128	; 0x80
   23c3c:	bne	23cf8 <__assert_fail@plt+0x12800>
   23c40:	cmp	r1, #10
   23c44:	beq	2400c <__assert_fail@plt+0x12b14>
   23c48:	cmp	r1, #0
   23c4c:	bne	23c60 <__assert_fail@plt+0x12768>
   23c50:	ldr	r2, [r5, #84]	; 0x54
   23c54:	ldr	r2, [r2, #128]	; 0x80
   23c58:	tst	r2, #128	; 0x80
   23c5c:	bne	23cf8 <__assert_fail@plt+0x12800>
   23c60:	ldr	r9, [r3, #4]
   23c64:	ldr	r3, [pc, #1472]	; 2422c <__assert_fail@plt+0x12d34>
   23c68:	tst	r9, r3
   23c6c:	beq	23cc0 <__assert_fail@plt+0x127c8>
   23c70:	ldr	r2, [r5, #88]	; 0x58
   23c74:	mov	r1, fp
   23c78:	mov	r0, r5
   23c7c:	bl	19b60 <__assert_fail@plt+0x8668>
   23c80:	ldr	r3, [pc, #1448]	; 24230 <__assert_fail@plt+0x12d38>
   23c84:	and	r9, r3, r9, lsr #8
   23c88:	tst	r9, #4
   23c8c:	beq	23ff8 <__assert_fail@plt+0x12b00>
   23c90:	tst	r0, #1
   23c94:	beq	23cf8 <__assert_fail@plt+0x12800>
   23c98:	tst	r9, #8
   23c9c:	bne	23cf8 <__assert_fail@plt+0x12800>
   23ca0:	tst	r9, #32
   23ca4:	beq	23cb0 <__assert_fail@plt+0x127b8>
   23ca8:	tst	r0, #2
   23cac:	beq	23cf8 <__assert_fail@plt+0x12800>
   23cb0:	tst	r9, #128	; 0x80
   23cb4:	beq	23cc0 <__assert_fail@plt+0x127c8>
   23cb8:	tst	r0, #8
   23cbc:	beq	23cf8 <__assert_fail@plt+0x12800>
   23cc0:	lsl	sl, r6, #2
   23cc4:	ldr	r2, [r8, #12]
   23cc8:	ldr	r3, [sp, #64]	; 0x40
   23ccc:	cmp	r3, #0
   23cd0:	ldr	r6, [r2, sl]
   23cd4:	beq	23f78 <__assert_fail@plt+0x12a80>
   23cd8:	ldr	r2, [sp, #68]	; 0x44
   23cdc:	cmp	r2, #0
   23ce0:	bne	24020 <__assert_fail@plt+0x12b28>
   23ce4:	ldr	r3, [sp, #72]	; 0x48
   23ce8:	str	r6, [r3]
   23cec:	ldr	r3, [sp, #68]	; 0x44
   23cf0:	add	r3, r3, #1
   23cf4:	str	r3, [sp, #68]	; 0x44
   23cf8:	ldr	r3, [r7, #20]
   23cfc:	add	r4, r4, #1
   23d00:	cmp	r4, r3
   23d04:	bge	23f54 <__assert_fail@plt+0x12a5c>
   23d08:	ldr	r3, [r7, #24]
   23d0c:	ldr	r0, [r8]
   23d10:	ldr	r6, [r3, r4, lsl #2]
   23d14:	lsl	sl, r6, #3
   23d18:	add	r3, r0, sl
   23d1c:	ldrb	r1, [r3, #6]
   23d20:	ldrb	r2, [r3, #4]
   23d24:	tst	r1, #16
   23d28:	beq	23b78 <__assert_fail@plt+0x12680>
   23d2c:	str	fp, [sp]
   23d30:	mov	r3, r5
   23d34:	mov	r2, r6
   23d38:	ldr	r1, [sp, #20]
   23d3c:	bl	1b63c <__assert_fail@plt+0xa144>
   23d40:	cmp	r0, #1
   23d44:	ble	23fe0 <__assert_fail@plt+0x12ae8>
   23d48:	ldr	r3, [r5, #100]	; 0x64
   23d4c:	add	r9, r0, fp
   23d50:	ldr	r2, [r8, #12]
   23d54:	ldr	r3, [r3, r9, lsl #2]
   23d58:	mov	r1, #0
   23d5c:	cmp	r3, #0
   23d60:	ldr	r2, [r2, r6, lsl #2]
   23d64:	lsl	sl, r6, #2
   23d68:	str	r1, [sp, #80]	; 0x50
   23d6c:	beq	23dac <__assert_fail@plt+0x128b4>
   23d70:	ldr	r6, [r3, #8]
   23d74:	cmp	r6, r1
   23d78:	streq	r6, [sp, #60]	; 0x3c
   23d7c:	beq	23dac <__assert_fail@plt+0x128b4>
   23d80:	ldr	r1, [sp, #76]	; 0x4c
   23d84:	cmp	r1, r6, lsl #1
   23d88:	blt	24068 <__assert_fail@plt+0x12b70>
   23d8c:	add	r1, r3, #4
   23d90:	add	r0, sp, #76	; 0x4c
   23d94:	str	r2, [sp, #36]	; 0x24
   23d98:	bl	19a1c <__assert_fail@plt+0x8524>
   23d9c:	ldr	r2, [sp, #36]	; 0x24
   23da0:	cmp	r0, #0
   23da4:	str	r0, [sp, #60]	; 0x3c
   23da8:	bne	23df4 <__assert_fail@plt+0x128fc>
   23dac:	mov	r1, r2
   23db0:	add	r0, sp, #76	; 0x4c
   23db4:	bl	19498 <__assert_fail@plt+0x7fa0>
   23db8:	cmp	r0, #0
   23dbc:	beq	23fbc <__assert_fail@plt+0x12ac4>
   23dc0:	add	r2, sp, #76	; 0x4c
   23dc4:	mov	r1, r8
   23dc8:	add	r0, sp, #60	; 0x3c
   23dcc:	ldr	r6, [r5, #100]	; 0x64
   23dd0:	bl	1e3c8 <__assert_fail@plt+0xced0>
   23dd4:	ldr	r3, [r5, #100]	; 0x64
   23dd8:	str	r0, [r6, r9, lsl #2]
   23ddc:	ldr	r3, [r3, r9, lsl #2]
   23de0:	cmp	r3, #0
   23de4:	bne	23cc4 <__assert_fail@plt+0x127cc>
   23de8:	ldr	r3, [sp, #60]	; 0x3c
   23dec:	cmp	r3, #0
   23df0:	beq	23cc4 <__assert_fail@plt+0x127cc>
   23df4:	ldr	r0, [sp, #84]	; 0x54
   23df8:	bl	14214 <__assert_fail@plt+0x2d1c>
   23dfc:	ldr	r3, [sp, #60]	; 0x3c
   23e00:	cmp	r3, #0
   23e04:	str	r3, [sp, #56]	; 0x38
   23e08:	bne	23fcc <__assert_fail@plt+0x12ad4>
   23e0c:	ldr	r3, [sp, #68]	; 0x44
   23e10:	add	r4, fp, #1
   23e14:	cmp	r3, #0
   23e18:	mov	r6, r4
   23e1c:	beq	23e68 <__assert_fail@plt+0x12970>
   23e20:	ldr	r3, [sp, #136]	; 0x88
   23e24:	ldr	r2, [sp, #32]
   23e28:	ldr	r1, [sp, #16]
   23e2c:	ldr	r0, [sp, #28]
   23e30:	bl	1ce58 <__assert_fail@plt+0xb960>
   23e34:	cmp	r0, #0
   23e38:	str	r0, [sp, #56]	; 0x38
   23e3c:	bne	23fcc <__assert_fail@plt+0x12ad4>
   23e40:	ldr	r3, [sp, #136]	; 0x88
   23e44:	mov	r2, r4
   23e48:	str	r3, [sp]
   23e4c:	ldr	r1, [sp, #16]
   23e50:	ldr	r3, [sp, #32]
   23e54:	mov	r0, r5
   23e58:	bl	1e6a4 <__assert_fail@plt+0xd1ac>
   23e5c:	cmp	r0, #0
   23e60:	str	r0, [sp, #56]	; 0x38
   23e64:	bne	23fcc <__assert_fail@plt+0x12ad4>
   23e68:	ldr	r2, [r5, #88]	; 0x58
   23e6c:	mov	r1, fp
   23e70:	mov	r0, r5
   23e74:	bl	19b60 <__assert_fail@plt+0x8668>
   23e78:	ldr	r2, [sp, #16]
   23e7c:	ldr	r1, [sp, #28]
   23e80:	mov	r3, r0
   23e84:	add	r0, sp, #56	; 0x38
   23e88:	bl	22508 <__assert_fail@plt+0x11010>
   23e8c:	subs	r7, r0, #0
   23e90:	beq	240fc <__assert_fail@plt+0x12c04>
   23e94:	mov	r2, #0
   23e98:	str	r2, [sp, #24]
   23e9c:	ldr	r3, [r5, #100]	; 0x64
   23ea0:	ldr	r2, [sp, #12]
   23ea4:	str	r7, [r3, r2]
   23ea8:	ldr	r2, [sp, #132]	; 0x84
   23eac:	cmp	r2, r4
   23eb0:	ble	23ed4 <__assert_fail@plt+0x129dc>
   23eb4:	ldr	r1, [sp, #12]
   23eb8:	ldr	r2, [r5, #120]	; 0x78
   23ebc:	add	r1, r1, #4
   23ec0:	str	r1, [sp, #12]
   23ec4:	ldr	r1, [sp, #24]
   23ec8:	mov	fp, r4
   23ecc:	cmp	r1, r2
   23ed0:	ble	23ad0 <__assert_fail@plt+0x125d8>
   23ed4:	ldr	r0, [sp, #72]	; 0x48
   23ed8:	bl	14214 <__assert_fail@plt+0x2d1c>
   23edc:	ldr	r3, [r5, #100]	; 0x64
   23ee0:	ldr	r2, [sp, #132]	; 0x84
   23ee4:	ldr	r3, [r3, r2, lsl #2]
   23ee8:	cmp	r3, #0
   23eec:	beq	2420c <__assert_fail@plt+0x12d14>
   23ef0:	ldr	r2, [sp, #40]	; 0x28
   23ef4:	add	r1, r3, #12
   23ef8:	str	r6, [r2]
   23efc:	ldr	r2, [sp, #48]	; 0x30
   23f00:	str	r2, [r5, #40]	; 0x28
   23f04:	ldr	r2, [sp, #44]	; 0x2c
   23f08:	ldr	r0, [r3, #8]
   23f0c:	str	r2, [r5, #100]	; 0x64
   23f10:	ldr	r2, [sp, #128]	; 0x80
   23f14:	bl	195b4 <__assert_fail@plt+0x80bc>
   23f18:	clz	r0, r0
   23f1c:	lsr	r0, r0, #5
   23f20:	add	sp, sp, #92	; 0x5c
   23f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23f28:	ldr	r2, [r3]
   23f2c:	asr	r0, r1, #5
   23f30:	and	r1, r1, #31
   23f34:	ldr	r2, [r2, r0, lsl #2]
   23f38:	lsr	r1, r2, r1
   23f3c:	tst	r1, #1
   23f40:	bne	23c60 <__assert_fail@plt+0x12768>
   23f44:	ldr	r3, [r7, #20]
   23f48:	add	r4, r4, #1
   23f4c:	cmp	r4, r3
   23f50:	blt	23d08 <__assert_fail@plt+0x12810>
   23f54:	ldr	r0, [sp, #84]	; 0x54
   23f58:	bl	14214 <__assert_fail@plt+0x2d1c>
   23f5c:	mov	r3, #0
   23f60:	str	r3, [sp, #56]	; 0x38
   23f64:	b	23e0c <__assert_fail@plt+0x12914>
   23f68:	ldrb	r2, [r3]
   23f6c:	cmp	r2, r1
   23f70:	bne	23cf8 <__assert_fail@plt+0x12800>
   23f74:	b	23c60 <__assert_fail@plt+0x12768>
   23f78:	mov	r3, #1
   23f7c:	mov	r0, #4
   23f80:	str	r3, [sp, #64]	; 0x40
   23f84:	str	r3, [sp, #68]	; 0x44
   23f88:	bl	2a790 <__assert_fail@plt+0x19298>
   23f8c:	cmp	r0, #0
   23f90:	str	r0, [sp, #72]	; 0x48
   23f94:	beq	23fb4 <__assert_fail@plt+0x12abc>
   23f98:	str	r6, [r0]
   23f9c:	b	23cf8 <__assert_fail@plt+0x12800>
   23fa0:	cmp	r7, #0
   23fa4:	bne	23b24 <__assert_fail@plt+0x1262c>
   23fa8:	add	r4, fp, #1
   23fac:	mov	r6, r4
   23fb0:	b	23e68 <__assert_fail@plt+0x12970>
   23fb4:	str	r0, [sp, #68]	; 0x44
   23fb8:	str	r0, [sp, #64]	; 0x40
   23fbc:	ldr	r0, [sp, #84]	; 0x54
   23fc0:	bl	14214 <__assert_fail@plt+0x2d1c>
   23fc4:	mov	r3, #12
   23fc8:	str	r3, [sp, #56]	; 0x38
   23fcc:	ldr	r0, [sp, #72]	; 0x48
   23fd0:	bl	14214 <__assert_fail@plt+0x2d1c>
   23fd4:	ldr	r0, [sp, #56]	; 0x38
   23fd8:	add	sp, sp, #92	; 0x5c
   23fdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23fe0:	cmp	r0, #0
   23fe4:	bne	23cc0 <__assert_fail@plt+0x127c8>
   23fe8:	ldr	r3, [r8]
   23fec:	add	r3, r3, sl
   23ff0:	ldrb	r2, [r3, #4]
   23ff4:	b	23b78 <__assert_fail@plt+0x12680>
   23ff8:	tst	r9, #8
   23ffc:	beq	23ca0 <__assert_fail@plt+0x127a8>
   24000:	tst	r0, #1
   24004:	beq	23ca0 <__assert_fail@plt+0x127a8>
   24008:	b	23cf8 <__assert_fail@plt+0x12800>
   2400c:	ldr	r2, [r5, #84]	; 0x54
   24010:	ldr	r2, [r2, #128]	; 0x80
   24014:	tst	r2, #64	; 0x40
   24018:	bne	23c60 <__assert_fail@plt+0x12768>
   2401c:	b	23cf8 <__assert_fail@plt+0x12800>
   24020:	cmp	r3, r2
   24024:	beq	2414c <__assert_fail@plt+0x12c54>
   24028:	ldr	r9, [sp, #72]	; 0x48
   2402c:	ldr	r3, [r9]
   24030:	cmp	r6, r3
   24034:	bge	240a0 <__assert_fail@plt+0x12ba8>
   24038:	cmp	r2, #0
   2403c:	ble	24054 <__assert_fail@plt+0x12b5c>
   24040:	lsl	r2, r2, #2
   24044:	mov	r1, r9
   24048:	add	r0, r9, #4
   2404c:	bl	11204 <memmove@plt>
   24050:	mov	r2, #0
   24054:	str	r6, [r9, r2, lsl #2]
   24058:	ldr	r3, [sp, #68]	; 0x44
   2405c:	add	r3, r3, #1
   24060:	str	r3, [sp, #68]	; 0x44
   24064:	b	23cf8 <__assert_fail@plt+0x12800>
   24068:	add	r6, r6, r1
   2406c:	ldr	r0, [sp, #84]	; 0x54
   24070:	lsl	r1, r6, #3
   24074:	str	r3, [sp, #52]	; 0x34
   24078:	str	r2, [sp, #36]	; 0x24
   2407c:	bl	2a7bc <__assert_fail@plt+0x192c4>
   24080:	lsl	r6, r6, #1
   24084:	ldr	r2, [sp, #36]	; 0x24
   24088:	ldr	r3, [sp, #52]	; 0x34
   2408c:	cmp	r0, #0
   24090:	beq	241f0 <__assert_fail@plt+0x12cf8>
   24094:	str	r0, [sp, #84]	; 0x54
   24098:	str	r6, [sp, #76]	; 0x4c
   2409c:	b	23d8c <__assert_fail@plt+0x12894>
   240a0:	sub	r3, r2, #-1073741823	; 0xc0000001
   240a4:	ldr	r1, [r9, r3, lsl #2]
   240a8:	lsl	r3, r3, #2
   240ac:	cmp	r6, r1
   240b0:	bge	24054 <__assert_fail@plt+0x12b5c>
   240b4:	add	r3, r3, #4
   240b8:	add	r3, r9, r3
   240bc:	str	r1, [r3], #-4
   240c0:	ldr	r1, [r3, #-4]
   240c4:	sub	r2, r2, #1
   240c8:	cmp	r6, r1
   240cc:	blt	240bc <__assert_fail@plt+0x12bc4>
   240d0:	b	24054 <__assert_fail@plt+0x12b5c>
   240d4:	add	r4, r4, r3
   240d8:	ldr	r0, [sp, #72]	; 0x48
   240dc:	lsl	r1, r4, #3
   240e0:	bl	2a7bc <__assert_fail@plt+0x192c4>
   240e4:	lsl	r4, r4, #1
   240e8:	cmp	r0, #0
   240ec:	beq	23fc4 <__assert_fail@plt+0x12acc>
   240f0:	str	r0, [sp, #72]	; 0x48
   240f4:	str	r4, [sp, #64]	; 0x40
   240f8:	b	23b04 <__assert_fail@plt+0x1260c>
   240fc:	ldr	r3, [sp, #56]	; 0x38
   24100:	cmp	r3, #0
   24104:	bne	23fcc <__assert_fail@plt+0x12ad4>
   24108:	ldr	r2, [sp, #24]
   2410c:	ldr	r3, [r5, #100]	; 0x64
   24110:	add	r2, r2, #1
   24114:	str	r2, [sp, #24]
   24118:	ldr	r2, [sp, #12]
   2411c:	str	r7, [r3, r2]
   24120:	b	23ea8 <__assert_fail@plt+0x129b0>
   24124:	add	r3, sp, #64	; 0x40
   24128:	mov	r0, r3
   2412c:	add	r1, r7, #4
   24130:	str	r3, [sp, #16]
   24134:	bl	19858 <__assert_fail@plt+0x8360>
   24138:	cmp	r0, #0
   2413c:	str	r0, [sp, #56]	; 0x38
   24140:	bne	23fd8 <__assert_fail@plt+0x12ae0>
   24144:	ldrb	r3, [r7, #52]	; 0x34
   24148:	b	23a3c <__assert_fail@plt+0x12544>
   2414c:	lsl	r3, r2, #1
   24150:	lsl	r1, r2, #3
   24154:	ldr	r0, [sp, #72]	; 0x48
   24158:	str	r3, [sp, #64]	; 0x40
   2415c:	bl	2a7bc <__assert_fail@plt+0x192c4>
   24160:	subs	r9, r0, #0
   24164:	beq	23fbc <__assert_fail@plt+0x12ac4>
   24168:	ldr	r2, [sp, #68]	; 0x44
   2416c:	str	r9, [sp, #72]	; 0x48
   24170:	b	2402c <__assert_fail@plt+0x12b34>
   24174:	mvn	r3, #-2147483648	; 0x80000000
   24178:	add	r9, r2, #1
   2417c:	sub	r3, r3, r6
   24180:	cmp	r9, r3
   24184:	bgt	241fc <__assert_fail@plt+0x12d04>
   24188:	add	sl, r6, r9
   2418c:	cmn	sl, #-1073741823	; 0xc0000001
   24190:	bhi	241fc <__assert_fail@plt+0x12d04>
   24194:	lsl	r1, sl, #2
   24198:	ldr	r0, [ip, #8]
   2419c:	mov	fp, ip
   241a0:	bl	2a7bc <__assert_fail@plt+0x192c4>
   241a4:	cmp	r0, #0
   241a8:	beq	241fc <__assert_fail@plt+0x12d04>
   241ac:	str	r0, [fp, #8]
   241b0:	str	sl, [fp, #4]
   241b4:	lsl	r2, r9, #2
   241b8:	mov	r1, r8
   241bc:	add	r0, r0, r6, lsl #2
   241c0:	bl	11414 <memset@plt>
   241c4:	b	239c8 <__assert_fail@plt+0x124d0>
   241c8:	add	r3, sp, #64	; 0x40
   241cc:	str	r3, [sp, #16]
   241d0:	str	r7, [sp, #64]	; 0x40
   241d4:	str	r7, [sp, #68]	; 0x44
   241d8:	str	r7, [sp, #72]	; 0x48
   241dc:	b	23a9c <__assert_fail@plt+0x125a4>
   241e0:	ldr	r3, [sp, #56]	; 0x38
   241e4:	cmp	r3, #0
   241e8:	beq	23a94 <__assert_fail@plt+0x1259c>
   241ec:	b	23fcc <__assert_fail@plt+0x12ad4>
   241f0:	mov	r3, #12
   241f4:	str	r3, [sp, #60]	; 0x3c
   241f8:	b	23df4 <__assert_fail@plt+0x128fc>
   241fc:	mov	r0, #12
   24200:	b	23fd8 <__assert_fail@plt+0x12ae0>
   24204:	mov	r0, #0
   24208:	b	23f58 <__assert_fail@plt+0x12a60>
   2420c:	ldr	r3, [sp, #40]	; 0x28
   24210:	mov	r0, #1
   24214:	str	r6, [r3]
   24218:	ldr	r3, [sp, #44]	; 0x2c
   2421c:	str	r3, [r5, #100]	; 0x64
   24220:	ldr	r3, [sp, #48]	; 0x30
   24224:	str	r3, [r5, #40]	; 0x28
   24228:	b	23fd8 <__assert_fail@plt+0x12ae0>
   2422c:	andeq	pc, r3, r0, lsl #30
   24230:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   24234:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24238:	sub	sp, sp, #20
   2423c:	mov	ip, r2
   24240:	ldr	r5, [sp, #56]	; 0x38
   24244:	ldr	r4, [r2, #4]
   24248:	mov	lr, #8
   2424c:	mov	r6, r2
   24250:	ldr	r2, [ip], #8
   24254:	mov	r7, r3
   24258:	str	r3, [sp]
   2425c:	mov	r9, r1
   24260:	mov	r3, r4
   24264:	mov	r1, ip
   24268:	stmib	sp, {r5, lr}
   2426c:	mov	r4, r0
   24270:	bl	23978 <__assert_fail@plt+0x12480>
   24274:	subs	r8, r0, #0
   24278:	beq	24288 <__assert_fail@plt+0x12d90>
   2427c:	mov	r0, r8
   24280:	add	sp, sp, #20
   24284:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24288:	ldr	r3, [r4, #108]	; 0x6c
   2428c:	ldr	r1, [r4, #112]	; 0x70
   24290:	ldr	sl, [r6, #4]
   24294:	cmp	r3, r1
   24298:	ldr	fp, [r9]
   2429c:	movlt	ip, sl
   242a0:	bge	2439c <__assert_fail@plt+0x12ea4>
   242a4:	add	r2, r3, r3, lsl #1
   242a8:	cmp	r3, #0
   242ac:	ldr	r0, [r4, #116]	; 0x74
   242b0:	lsl	r2, r2, #3
   242b4:	ble	242d0 <__assert_fail@plt+0x12dd8>
   242b8:	sub	r1, r2, #24
   242bc:	add	r1, r0, r1
   242c0:	ldr	lr, [r1, #4]
   242c4:	cmp	r5, lr
   242c8:	moveq	lr, #1
   242cc:	strbeq	lr, [r1, #20]
   242d0:	add	r1, r0, r2
   242d4:	cmp	fp, sl
   242d8:	str	r7, [r0, r2]
   242dc:	add	r3, r3, #1
   242e0:	movne	r0, #0
   242e4:	mvneq	r0, #0
   242e8:	mov	r2, #0
   242ec:	stmib	r1, {r5, fp}
   242f0:	str	sl, [r1, #12]
   242f4:	str	r0, [r1, #16]
   242f8:	str	r3, [r4, #108]	; 0x6c
   242fc:	strb	r2, [r1, #20]
   24300:	ldr	r3, [r4, #120]	; 0x78
   24304:	sub	sl, sl, fp
   24308:	cmp	r3, sl
   2430c:	strlt	sl, [r4, #120]	; 0x78
   24310:	ldr	r2, [r9]
   24314:	add	r5, r5, ip
   24318:	ldr	r3, [r4, #36]	; 0x24
   2431c:	sub	r5, r5, r2
   24320:	cmp	r5, r3
   24324:	ldr	r6, [r4, #104]	; 0x68
   24328:	blt	24380 <__assert_fail@plt+0x12e88>
   2432c:	ldr	r2, [r4, #48]	; 0x30
   24330:	cmp	r3, r2
   24334:	bge	24380 <__assert_fail@plt+0x12e88>
   24338:	add	r1, r5, #1
   2433c:	mov	r0, r4
   24340:	bl	1e1b4 <__assert_fail@plt+0xccbc>
   24344:	cmp	r0, #0
   24348:	bne	243f0 <__assert_fail@plt+0x12ef8>
   2434c:	cmp	r5, r6
   24350:	ble	2427c <__assert_fail@plt+0x12d84>
   24354:	sub	r2, r5, r6
   24358:	ldr	r0, [r4, #100]	; 0x64
   2435c:	add	r6, r6, #1
   24360:	lsl	r2, r2, #2
   24364:	add	r0, r0, r6, lsl #2
   24368:	mov	r1, #0
   2436c:	bl	11414 <memset@plt>
   24370:	mov	r0, r8
   24374:	str	r5, [r4, #104]	; 0x68
   24378:	add	sp, sp, #20
   2437c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24380:	ldr	r3, [r4, #28]
   24384:	cmp	r5, r3
   24388:	blt	2434c <__assert_fail@plt+0x12e54>
   2438c:	ldr	r2, [r4, #48]	; 0x30
   24390:	cmp	r3, r2
   24394:	bge	2434c <__assert_fail@plt+0x12e54>
   24398:	b	24338 <__assert_fail@plt+0x12e40>
   2439c:	add	r1, r1, r1, lsl #1
   243a0:	ldr	r0, [r4, #116]	; 0x74
   243a4:	lsl	r1, r1, #4
   243a8:	bl	2a7bc <__assert_fail@plt+0x192c4>
   243ac:	cmp	r0, #0
   243b0:	beq	243f8 <__assert_fail@plt+0x12f00>
   243b4:	ldr	r2, [r4, #112]	; 0x70
   243b8:	ldr	r3, [r4, #108]	; 0x6c
   243bc:	str	r0, [r4, #116]	; 0x74
   243c0:	add	r2, r2, r2, lsl #1
   243c4:	add	r3, r3, r3, lsl #1
   243c8:	lsl	r2, r2, #3
   243cc:	add	r0, r0, r3, lsl #3
   243d0:	mov	r1, r8
   243d4:	bl	11414 <memset@plt>
   243d8:	ldr	r2, [r4, #112]	; 0x70
   243dc:	ldr	ip, [r6, #4]
   243e0:	ldr	r3, [r4, #108]	; 0x6c
   243e4:	lsl	r2, r2, #1
   243e8:	str	r2, [r4, #112]	; 0x70
   243ec:	b	242a4 <__assert_fail@plt+0x12dac>
   243f0:	mov	r8, r0
   243f4:	b	2427c <__assert_fail@plt+0x12d84>
   243f8:	ldr	r0, [r4, #116]	; 0x74
   243fc:	bl	14214 <__assert_fail@plt+0x2d1c>
   24400:	mov	r8, #12
   24404:	b	2427c <__assert_fail@plt+0x12d84>
   24408:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2440c:	sub	sp, sp, #92	; 0x5c
   24410:	ldr	r6, [r1]
   24414:	ldr	r3, [r0, #84]	; 0x54
   24418:	cmp	r6, #0
   2441c:	str	r3, [sp, #36]	; 0x24
   24420:	ldr	fp, [r0, #40]	; 0x28
   24424:	ble	249b0 <__assert_fail@plt+0x134b8>
   24428:	mov	r3, #0
   2442c:	str	r3, [sp, #20]
   24430:	lsl	r3, fp, #2
   24434:	str	r2, [sp, #40]	; 0x28
   24438:	mov	sl, r0
   2443c:	str	r1, [sp, #64]	; 0x40
   24440:	str	r3, [sp, #52]	; 0x34
   24444:	mov	r9, fp
   24448:	b	24460 <__assert_fail@plt+0x12f68>
   2444c:	ldr	r3, [sp, #20]
   24450:	add	r3, r3, #1
   24454:	cmp	r3, r6
   24458:	str	r3, [sp, #20]
   2445c:	bge	249b0 <__assert_fail@plt+0x134b8>
   24460:	ldr	r3, [sp, #40]	; 0x28
   24464:	ldr	r1, [sp, #20]
   24468:	ldr	r2, [r3]
   2446c:	ldr	r3, [sp, #36]	; 0x24
   24470:	ldr	fp, [r2, r1, lsl #2]
   24474:	ldr	r3, [r3]
   24478:	add	r3, r3, fp, lsl #3
   2447c:	ldrb	r2, [r3, #4]
   24480:	cmp	r2, #4
   24484:	bne	2444c <__assert_fail@plt+0x12f54>
   24488:	ldr	r4, [r3, #4]
   2448c:	ldr	r3, [pc, #1928]	; 24c1c <__assert_fail@plt+0x13724>
   24490:	tst	r4, r3
   24494:	beq	244e8 <__assert_fail@plt+0x12ff0>
   24498:	ldr	r2, [sl, #88]	; 0x58
   2449c:	mov	r1, r9
   244a0:	mov	r0, sl
   244a4:	bl	19b60 <__assert_fail@plt+0x8668>
   244a8:	ldr	r3, [pc, #1904]	; 24c20 <__assert_fail@plt+0x13728>
   244ac:	and	r4, r3, r4, lsr #8
   244b0:	tst	r4, #4
   244b4:	beq	24748 <__assert_fail@plt+0x13250>
   244b8:	tst	r0, #1
   244bc:	beq	2444c <__assert_fail@plt+0x12f54>
   244c0:	tst	r4, #8
   244c4:	bne	2444c <__assert_fail@plt+0x12f54>
   244c8:	tst	r4, #32
   244cc:	beq	244d8 <__assert_fail@plt+0x12fe0>
   244d0:	tst	r0, #2
   244d4:	beq	2444c <__assert_fail@plt+0x12f54>
   244d8:	tst	r4, #128	; 0x80
   244dc:	beq	244e8 <__assert_fail@plt+0x12ff0>
   244e0:	tst	r0, #8
   244e4:	beq	2444c <__assert_fail@plt+0x12f54>
   244e8:	ldr	ip, [sl, #108]	; 0x6c
   244ec:	mov	r0, #0
   244f0:	mov	r8, ip
   244f4:	mov	r3, ip
   244f8:	cmp	r0, r3
   244fc:	bge	24558 <__assert_fail@plt+0x13060>
   24500:	add	r2, r0, r3
   24504:	ldr	lr, [sl, #116]	; 0x74
   24508:	add	r2, r2, r2, lsr #31
   2450c:	asr	r2, r2, #1
   24510:	add	r1, r2, r2, lsl #1
   24514:	add	r1, lr, r1, lsl #3
   24518:	ldr	r1, [r1, #4]
   2451c:	cmp	r9, r1
   24520:	ble	24548 <__assert_fail@plt+0x13050>
   24524:	b	24734 <__assert_fail@plt+0x1323c>
   24528:	asr	r3, r3, #1
   2452c:	mov	r4, r3
   24530:	add	r1, r3, r3, lsl #1
   24534:	add	r1, lr, r1, lsl #3
   24538:	ldr	r1, [r1, #4]
   2453c:	cmp	r9, r1
   24540:	bgt	2473c <__assert_fail@plt+0x13244>
   24544:	mov	r2, r3
   24548:	add	r3, r0, r2
   2454c:	cmp	r0, r2
   24550:	add	r3, r3, r3, lsr #31
   24554:	blt	24528 <__assert_fail@plt+0x13030>
   24558:	cmp	ip, r0
   2455c:	ble	2475c <__assert_fail@plt+0x13264>
   24560:	add	r2, r0, r0, lsl #1
   24564:	ldr	r3, [sl, #116]	; 0x74
   24568:	cmn	r0, #1
   2456c:	add	r3, r3, r2, lsl #3
   24570:	ldr	r2, [r3, #4]
   24574:	sub	r2, r2, r9
   24578:	clz	r2, r2
   2457c:	lsr	r2, r2, #5
   24580:	moveq	r2, #0
   24584:	cmp	r2, #0
   24588:	beq	2475c <__assert_fail@plt+0x13264>
   2458c:	add	r3, r3, #24
   24590:	b	245a0 <__assert_fail@plt+0x130a8>
   24594:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   24598:	cmp	r2, #0
   2459c:	beq	2475c <__assert_fail@plt+0x13264>
   245a0:	ldr	r2, [r3, #-24]	; 0xffffffe8
   245a4:	add	r3, r3, #24
   245a8:	cmp	fp, r2
   245ac:	bne	24594 <__assert_fail@plt+0x1309c>
   245b0:	mov	r3, #0
   245b4:	str	r3, [sp, #72]	; 0x48
   245b8:	cmp	r8, ip
   245bc:	lsl	r3, fp, #2
   245c0:	str	r3, [sp, #48]	; 0x30
   245c4:	bge	24728 <__assert_fail@plt+0x13230>
   245c8:	add	r3, fp, fp, lsl #1
   245cc:	add	r4, r8, r8, lsl #1
   245d0:	lsl	r3, r3, #2
   245d4:	str	r3, [sp, #56]	; 0x38
   245d8:	lsl	r4, r4, #3
   245dc:	ldr	r6, [sp, #36]	; 0x24
   245e0:	b	245f4 <__assert_fail@plt+0x130fc>
   245e4:	add	r8, r8, #1
   245e8:	cmp	r8, ip
   245ec:	add	r4, r4, #24
   245f0:	bge	24728 <__assert_fail@plt+0x13230>
   245f4:	ldr	r3, [sl, #116]	; 0x74
   245f8:	add	r2, r3, r4
   245fc:	ldr	r3, [r3, r4]
   24600:	cmp	fp, r3
   24604:	bne	245e4 <__assert_fail@plt+0x130ec>
   24608:	ldr	r3, [r2, #4]
   2460c:	cmp	r9, r3
   24610:	bne	245e4 <__assert_fail@plt+0x130ec>
   24614:	ldr	r3, [r2, #12]
   24618:	ldr	r5, [r2, #8]
   2461c:	subs	r2, r3, r5
   24620:	str	r2, [sp, #28]
   24624:	ldreq	r0, [sp, #56]	; 0x38
   24628:	ldreq	r2, [r6, #20]
   2462c:	ldrne	r2, [r6, #12]
   24630:	addeq	r2, r2, r0
   24634:	ldrne	r0, [sp, #48]	; 0x30
   24638:	ldreq	r2, [r2, #8]
   2463c:	ldreq	r1, [r6, #24]
   24640:	ldrne	r2, [r2, r0]
   24644:	ldreq	r2, [r2]
   24648:	ldrne	r1, [r6, #24]
   2464c:	add	r3, r9, r3
   24650:	add	r2, r2, r2, lsl #1
   24654:	sub	r5, r3, r5
   24658:	add	r2, r1, r2, lsl #2
   2465c:	str	r2, [sp, #24]
   24660:	sub	r1, r5, #1
   24664:	ldr	r2, [sl, #88]	; 0x58
   24668:	mov	r0, sl
   2466c:	bl	19b60 <__assert_fail@plt+0x8668>
   24670:	ldr	r7, [sl, #100]	; 0x64
   24674:	ldr	r2, [sp, #52]	; 0x34
   24678:	ldr	r1, [r7, r2]
   2467c:	ldr	r2, [r7, r5, lsl #2]
   24680:	cmp	r1, #0
   24684:	moveq	r1, #0
   24688:	ldrne	r1, [r1, #8]
   2468c:	cmp	r2, #0
   24690:	str	r1, [sp, #44]	; 0x2c
   24694:	mov	r3, r0
   24698:	beq	248fc <__assert_fail@plt+0x13404>
   2469c:	str	r0, [sp, #32]
   246a0:	ldr	r1, [r2, #40]	; 0x28
   246a4:	add	r0, sp, #76	; 0x4c
   246a8:	ldr	r2, [sp, #24]
   246ac:	bl	198d0 <__assert_fail@plt+0x83d8>
   246b0:	ldr	r3, [sp, #32]
   246b4:	cmp	r0, #0
   246b8:	str	r0, [sp, #72]	; 0x48
   246bc:	bne	2499c <__assert_fail@plt+0x134a4>
   246c0:	add	r2, sp, #76	; 0x4c
   246c4:	mov	r1, r6
   246c8:	add	r0, sp, #72	; 0x48
   246cc:	ldr	r7, [sl, #100]	; 0x64
   246d0:	bl	22508 <__assert_fail@plt+0x11010>
   246d4:	str	r0, [r7, r5, lsl #2]
   246d8:	ldr	r0, [sp, #84]	; 0x54
   246dc:	bl	14214 <__assert_fail@plt+0x2d1c>
   246e0:	ldr	r3, [sl, #100]	; 0x64
   246e4:	ldr	r2, [r3, r5, lsl #2]
   246e8:	cmp	r2, #0
   246ec:	beq	24920 <__assert_fail@plt+0x13428>
   246f0:	ldr	r2, [sp, #28]
   246f4:	cmp	r2, #0
   246f8:	bne	24714 <__assert_fail@plt+0x1321c>
   246fc:	ldr	r2, [sp, #52]	; 0x34
   24700:	ldr	r3, [r3, r2]
   24704:	ldr	r2, [sp, #44]	; 0x2c
   24708:	ldr	r3, [r3, #8]
   2470c:	cmp	r3, r2
   24710:	bgt	24930 <__assert_fail@plt+0x13438>
   24714:	ldr	ip, [sl, #108]	; 0x6c
   24718:	add	r8, r8, #1
   2471c:	cmp	r8, ip
   24720:	add	r4, r4, #24
   24724:	blt	245f4 <__assert_fail@plt+0x130fc>
   24728:	ldr	r3, [sp, #64]	; 0x40
   2472c:	ldr	r6, [r3]
   24730:	b	2444c <__assert_fail@plt+0x12f54>
   24734:	mov	r4, r2
   24738:	mov	r2, r3
   2473c:	add	r0, r4, #1
   24740:	mov	r3, r2
   24744:	b	244f8 <__assert_fail@plt+0x13000>
   24748:	tst	r4, #8
   2474c:	beq	244c8 <__assert_fail@plt+0x12fd0>
   24750:	tst	r0, #1
   24754:	beq	244c8 <__assert_fail@plt+0x12fd0>
   24758:	b	2444c <__assert_fail@plt+0x12f54>
   2475c:	ldr	r3, [sl, #84]	; 0x54
   24760:	ldr	r1, [sl, #124]	; 0x7c
   24764:	str	r3, [sp, #60]	; 0x3c
   24768:	ldr	r3, [r3]
   2476c:	cmp	r1, #0
   24770:	ldr	r2, [r3, fp, lsl #3]
   24774:	str	r2, [sp, #56]	; 0x38
   24778:	ble	245b0 <__assert_fail@plt+0x130b8>
   2477c:	ldr	r2, [sl, #4]
   24780:	str	r9, [sp, #32]
   24784:	mov	ip, r2
   24788:	mov	r2, #0
   2478c:	mov	r0, r2
   24790:	str	r2, [sp, #44]	; 0x2c
   24794:	str	fp, [sp, #48]	; 0x30
   24798:	str	r8, [sp, #68]	; 0x44
   2479c:	ldr	r2, [sl, #132]	; 0x84
   247a0:	ldr	r4, [r2, r0, lsl #2]
   247a4:	ldr	r2, [r4, #4]
   247a8:	ldr	r3, [r3, r2, lsl #3]
   247ac:	ldr	r2, [sp, #56]	; 0x38
   247b0:	cmp	r2, r3
   247b4:	beq	247dc <__assert_fail@plt+0x132e4>
   247b8:	ldr	r3, [sp, #44]	; 0x2c
   247bc:	add	r3, r3, #1
   247c0:	cmp	r3, r1
   247c4:	str	r3, [sp, #44]	; 0x2c
   247c8:	bge	24bc0 <__assert_fail@plt+0x136c8>
   247cc:	ldr	r3, [sp, #60]	; 0x3c
   247d0:	ldr	r0, [sp, #44]	; 0x2c
   247d4:	ldr	r3, [r3]
   247d8:	b	2479c <__assert_fail@plt+0x132a4>
   247dc:	ldr	r2, [r4, #16]
   247e0:	ldr	r7, [r4]
   247e4:	cmp	r2, #0
   247e8:	ble	24c04 <__assert_fail@plt+0x1370c>
   247ec:	ldr	r3, [sp, #32]
   247f0:	mov	r6, #0
   247f4:	str	r7, [sp, #24]
   247f8:	mov	fp, ip
   247fc:	b	24818 <__assert_fail@plt+0x13320>
   24800:	ldr	r2, [r4, #16]
   24804:	add	r6, r6, #1
   24808:	cmp	r6, r2
   2480c:	str	r7, [sp, #24]
   24810:	mov	r3, r8
   24814:	bge	249bc <__assert_fail@plt+0x134c4>
   24818:	ldr	r1, [r4, #20]
   2481c:	ldr	r9, [r1, r6, lsl #2]
   24820:	ldr	r1, [sp, #24]
   24824:	ldr	r7, [r9, #4]
   24828:	sub	r5, r7, r1
   2482c:	cmp	r5, #0
   24830:	addle	r8, r5, r3
   24834:	ble	2486c <__assert_fail@plt+0x13374>
   24838:	ldr	r1, [sl, #28]
   2483c:	add	r8, r5, r3
   24840:	cmp	r8, r1
   24844:	bgt	2489c <__assert_fail@plt+0x133a4>
   24848:	ldr	r1, [sp, #24]
   2484c:	add	r0, fp, r3
   24850:	mov	r2, r5
   24854:	add	r1, fp, r1
   24858:	str	r3, [sp, #28]
   2485c:	bl	11270 <memcmp@plt>
   24860:	ldr	r3, [sp, #28]
   24864:	cmp	r0, #0
   24868:	bne	24b3c <__assert_fail@plt+0x13644>
   2486c:	ldr	r3, [sp, #32]
   24870:	mov	r2, r9
   24874:	str	r3, [sp]
   24878:	mov	r1, r4
   2487c:	ldr	r3, [sp, #48]	; 0x30
   24880:	mov	r0, sl
   24884:	bl	24234 <__assert_fail@plt+0x12d3c>
   24888:	ldr	fp, [sl, #4]
   2488c:	cmp	r0, #1
   24890:	bls	24800 <__assert_fail@plt+0x13308>
   24894:	add	sp, sp, #92	; 0x5c
   24898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2489c:	ldr	r0, [sl, #48]	; 0x30
   248a0:	cmp	r8, r0
   248a4:	bgt	24c10 <__assert_fail@plt+0x13718>
   248a8:	ldr	r2, [sl, #36]	; 0x24
   248ac:	ldr	fp, [sl, #104]	; 0x68
   248b0:	cmp	r8, r2
   248b4:	cmpge	r0, r2
   248b8:	bgt	2497c <__assert_fail@plt+0x13484>
   248bc:	cmp	r1, r0
   248c0:	blt	2497c <__assert_fail@plt+0x13484>
   248c4:	cmp	r8, fp
   248c8:	ble	248f4 <__assert_fail@plt+0x133fc>
   248cc:	sub	r2, r8, fp
   248d0:	ldr	r0, [sl, #100]	; 0x64
   248d4:	add	fp, fp, #1
   248d8:	lsl	r2, r2, #2
   248dc:	add	r0, r0, fp, lsl #2
   248e0:	mov	r1, #0
   248e4:	str	r3, [sp, #28]
   248e8:	bl	11414 <memset@plt>
   248ec:	ldr	r3, [sp, #28]
   248f0:	str	r8, [sl, #104]	; 0x68
   248f4:	ldr	fp, [sl, #4]
   248f8:	b	24848 <__assert_fail@plt+0x13350>
   248fc:	ldr	r2, [sp, #24]
   24900:	mov	r1, r6
   24904:	add	r0, sp, #72	; 0x48
   24908:	bl	22508 <__assert_fail@plt+0x11010>
   2490c:	ldr	r3, [sl, #100]	; 0x64
   24910:	str	r0, [r7, r5, lsl #2]
   24914:	ldr	r2, [r3, r5, lsl #2]
   24918:	cmp	r2, #0
   2491c:	bne	246f0 <__assert_fail@plt+0x131f8>
   24920:	ldr	r0, [sp, #72]	; 0x48
   24924:	cmp	r0, #0
   24928:	beq	246f0 <__assert_fail@plt+0x131f8>
   2492c:	b	24894 <__assert_fail@plt+0x1339c>
   24930:	ldr	r3, [sp, #24]
   24934:	mov	r0, sl
   24938:	add	r5, r3, #4
   2493c:	add	r7, r3, #8
   24940:	mov	r2, r7
   24944:	mov	r1, r5
   24948:	mov	r3, r9
   2494c:	bl	1a7f8 <__assert_fail@plt+0x9300>
   24950:	cmp	r0, #0
   24954:	str	r0, [sp, #72]	; 0x48
   24958:	bne	24894 <__assert_fail@plt+0x1339c>
   2495c:	mov	r2, r7
   24960:	mov	r1, r5
   24964:	mov	r0, sl
   24968:	bl	24408 <__assert_fail@plt+0x12f10>
   2496c:	cmp	r0, #0
   24970:	str	r0, [sp, #72]	; 0x48
   24974:	beq	24714 <__assert_fail@plt+0x1321c>
   24978:	b	24894 <__assert_fail@plt+0x1339c>
   2497c:	add	r1, r8, #1
   24980:	mov	r0, sl
   24984:	str	r3, [sp, #28]
   24988:	bl	1e1b4 <__assert_fail@plt+0xccbc>
   2498c:	ldr	r3, [sp, #28]
   24990:	cmp	r0, #0
   24994:	beq	248c4 <__assert_fail@plt+0x133cc>
   24998:	b	24894 <__assert_fail@plt+0x1339c>
   2499c:	ldr	r0, [sp, #84]	; 0x54
   249a0:	bl	14214 <__assert_fail@plt+0x2d1c>
   249a4:	ldr	r0, [sp, #72]	; 0x48
   249a8:	add	sp, sp, #92	; 0x5c
   249ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   249b0:	mov	r0, #0
   249b4:	add	sp, sp, #92	; 0x5c
   249b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   249bc:	mov	ip, fp
   249c0:	mov	fp, r7
   249c4:	ldr	r3, [sp, #32]
   249c8:	add	r7, fp, #1
   249cc:	cmp	r3, r7
   249d0:	blt	24b34 <__assert_fail@plt+0x1363c>
   249d4:	ldr	r9, [sp, #56]	; 0x38
   249d8:	lsl	r6, r7, #2
   249dc:	mov	fp, ip
   249e0:	ldr	r3, [r4]
   249e4:	sub	r3, r7, r3
   249e8:	cmp	r3, #0
   249ec:	ble	24a18 <__assert_fail@plt+0x13520>
   249f0:	ldr	r3, [sl, #28]
   249f4:	cmp	r3, r8
   249f8:	ble	24b94 <__assert_fail@plt+0x1369c>
   249fc:	add	r5, r8, #1
   24a00:	add	r3, fp, r7
   24a04:	ldrb	r2, [fp, r8]
   24a08:	ldrb	r3, [r3, #-1]
   24a0c:	cmp	r2, r3
   24a10:	bne	24b30 <__assert_fail@plt+0x13638>
   24a14:	mov	r8, r5
   24a18:	ldr	r3, [sl, #100]	; 0x64
   24a1c:	ldr	r3, [r3, r6]
   24a20:	cmp	r3, #0
   24a24:	beq	24b1c <__assert_fail@plt+0x13624>
   24a28:	ldr	ip, [r3, #8]
   24a2c:	cmp	ip, #0
   24a30:	ble	24b1c <__assert_fail@plt+0x13624>
   24a34:	ldr	r2, [r3, #12]
   24a38:	ldr	r3, [sp, #60]	; 0x3c
   24a3c:	sub	r2, r2, #4
   24a40:	ldr	r0, [r3]
   24a44:	mov	r3, #0
   24a48:	b	24a54 <__assert_fail@plt+0x1355c>
   24a4c:	cmp	ip, r3
   24a50:	beq	24b1c <__assert_fail@plt+0x13624>
   24a54:	ldr	r5, [r2, #4]!
   24a58:	add	r3, r3, #1
   24a5c:	add	r1, r0, r5, lsl #3
   24a60:	ldrb	r1, [r1, #4]
   24a64:	cmp	r1, #9
   24a68:	bne	24a4c <__assert_fail@plt+0x13554>
   24a6c:	ldr	r1, [r0, r5, lsl #3]
   24a70:	cmp	r9, r1
   24a74:	bne	24a4c <__assert_fail@plt+0x13554>
   24a78:	cmn	r5, #1
   24a7c:	beq	24b1c <__assert_fail@plt+0x13624>
   24a80:	ldr	r1, [r4, #8]
   24a84:	cmp	r1, #0
   24a88:	beq	24b6c <__assert_fail@plt+0x13674>
   24a8c:	mov	r0, #9
   24a90:	ldr	r3, [r4]
   24a94:	ldr	r2, [r4, #4]
   24a98:	str	r0, [sp, #8]
   24a9c:	stm	sp, {r5, r7}
   24aa0:	mov	r0, sl
   24aa4:	bl	23978 <__assert_fail@plt+0x12480>
   24aa8:	cmp	r0, #1
   24aac:	beq	24b1c <__assert_fail@plt+0x13624>
   24ab0:	cmp	r0, #0
   24ab4:	bne	24894 <__assert_fail@plt+0x1339c>
   24ab8:	ldr	r3, [r4, #16]
   24abc:	ldr	r2, [r4, #12]
   24ac0:	cmp	r3, r2
   24ac4:	beq	24bdc <__assert_fail@plt+0x136e4>
   24ac8:	mov	r1, #20
   24acc:	mov	r0, #1
   24ad0:	bl	2a748 <__assert_fail@plt+0x19250>
   24ad4:	cmp	r0, #0
   24ad8:	beq	24bd4 <__assert_fail@plt+0x136dc>
   24adc:	ldr	r3, [r4, #16]
   24ae0:	ldr	r2, [r4, #20]
   24ae4:	add	r1, r3, #1
   24ae8:	str	r0, [r2, r3, lsl #2]
   24aec:	stm	r0, {r5, r7}
   24af0:	mov	r2, r0
   24af4:	ldr	r0, [sp, #32]
   24af8:	str	r1, [r4, #16]
   24afc:	ldr	r3, [sp, #48]	; 0x30
   24b00:	str	r0, [sp]
   24b04:	mov	r1, r4
   24b08:	mov	r0, sl
   24b0c:	bl	24234 <__assert_fail@plt+0x12d3c>
   24b10:	ldr	fp, [sl, #4]
   24b14:	cmp	r0, #1
   24b18:	bhi	24894 <__assert_fail@plt+0x1339c>
   24b1c:	ldr	r3, [sp, #32]
   24b20:	add	r7, r7, #1
   24b24:	cmp	r3, r7
   24b28:	add	r6, r6, #4
   24b2c:	bge	249e0 <__assert_fail@plt+0x134e8>
   24b30:	mov	ip, fp
   24b34:	ldr	r1, [sl, #124]	; 0x7c
   24b38:	b	247b8 <__assert_fail@plt+0x132c0>
   24b3c:	ldr	r7, [sp, #24]
   24b40:	ldr	r2, [r4, #16]
   24b44:	mov	ip, fp
   24b48:	cmp	r6, r2
   24b4c:	blt	24b34 <__assert_fail@plt+0x1363c>
   24b50:	cmp	r6, #0
   24b54:	movle	r8, r3
   24b58:	ldrle	r3, [sp, #32]
   24b5c:	ble	249cc <__assert_fail@plt+0x134d4>
   24b60:	mov	fp, r7
   24b64:	mov	r8, r3
   24b68:	b	249c4 <__assert_fail@plt+0x134cc>
   24b6c:	ldr	r1, [r4]
   24b70:	mov	r0, #12
   24b74:	sub	r1, r7, r1
   24b78:	add	r1, r1, #1
   24b7c:	bl	2a748 <__assert_fail@plt+0x19250>
   24b80:	cmp	r0, #0
   24b84:	str	r0, [r4, #8]
   24b88:	beq	24bd4 <__assert_fail@plt+0x136dc>
   24b8c:	mov	r1, r0
   24b90:	b	24a8c <__assert_fail@plt+0x13594>
   24b94:	ldr	r3, [sl, #48]	; 0x30
   24b98:	cmp	r3, r8
   24b9c:	ble	24b30 <__assert_fail@plt+0x13638>
   24ba0:	add	r5, r8, #1
   24ba4:	mov	r1, r5
   24ba8:	mov	r0, sl
   24bac:	bl	1e1b4 <__assert_fail@plt+0xccbc>
   24bb0:	cmp	r0, #0
   24bb4:	bne	24894 <__assert_fail@plt+0x1339c>
   24bb8:	ldr	fp, [sl, #4]
   24bbc:	b	24a00 <__assert_fail@plt+0x13508>
   24bc0:	ldr	r9, [sp, #32]
   24bc4:	ldr	fp, [sp, #48]	; 0x30
   24bc8:	ldr	r8, [sp, #68]	; 0x44
   24bcc:	ldr	ip, [sl, #108]	; 0x6c
   24bd0:	b	245b0 <__assert_fail@plt+0x130b8>
   24bd4:	mov	r0, #12
   24bd8:	b	24894 <__assert_fail@plt+0x1339c>
   24bdc:	lsl	r3, r3, #1
   24be0:	add	fp, r3, #1
   24be4:	ldr	r0, [r4, #20]
   24be8:	lsl	r1, fp, #2
   24bec:	bl	2a7bc <__assert_fail@plt+0x192c4>
   24bf0:	cmp	r0, #0
   24bf4:	beq	24bd4 <__assert_fail@plt+0x136dc>
   24bf8:	str	r0, [r4, #20]
   24bfc:	str	fp, [r4, #12]
   24c00:	b	24ac8 <__assert_fail@plt+0x135d0>
   24c04:	ldr	r8, [sp, #32]
   24c08:	mov	r3, r8
   24c0c:	b	249cc <__assert_fail@plt+0x134d4>
   24c10:	ldr	r7, [sp, #24]
   24c14:	mov	ip, fp
   24c18:	b	24b48 <__assert_fail@plt+0x13650>
   24c1c:	andeq	pc, r3, r0, lsl #30
   24c20:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   24c24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24c28:	mov	r4, r1
   24c2c:	ldr	r3, [r1, #104]	; 0x68
   24c30:	ldr	r5, [r1, #40]	; 0x28
   24c34:	sub	sp, sp, #20
   24c38:	cmp	r5, r3
   24c3c:	mov	r8, r0
   24c40:	ldr	r7, [r1, #84]	; 0x54
   24c44:	ldr	r3, [r1, #100]	; 0x64
   24c48:	ble	24c74 <__assert_fail@plt+0x1377c>
   24c4c:	mov	r6, r2
   24c50:	lsl	r9, r5, #2
   24c54:	str	r2, [r3, r5, lsl #2]
   24c58:	str	r5, [r1, #104]	; 0x68
   24c5c:	ldr	r3, [r7, #76]	; 0x4c
   24c60:	cmp	r3, #0
   24c64:	bne	24d40 <__assert_fail@plt+0x13848>
   24c68:	mov	r0, r6
   24c6c:	add	sp, sp, #20
   24c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24c74:	ldr	r1, [r3, r5, lsl #2]
   24c78:	lsl	r9, r5, #2
   24c7c:	cmp	r1, #0
   24c80:	add	sl, r3, r9
   24c84:	streq	r2, [r3, r5, lsl #2]
   24c88:	moveq	r6, r2
   24c8c:	beq	24c5c <__assert_fail@plt+0x13764>
   24c90:	cmp	r2, #0
   24c94:	ldr	r3, [r1, #40]	; 0x28
   24c98:	beq	24d04 <__assert_fail@plt+0x1380c>
   24c9c:	ldr	sl, [r2, #40]	; 0x28
   24ca0:	add	r0, sp, #4
   24ca4:	mov	r2, r3
   24ca8:	mov	r1, sl
   24cac:	bl	198d0 <__assert_fail@plt+0x83d8>
   24cb0:	cmp	r0, #0
   24cb4:	str	r0, [r8]
   24cb8:	bne	24da0 <__assert_fail@plt+0x138a8>
   24cbc:	ldr	r1, [r4, #40]	; 0x28
   24cc0:	ldr	r2, [r4, #88]	; 0x58
   24cc4:	sub	r1, r1, #1
   24cc8:	mov	r0, r4
   24ccc:	bl	19b60 <__assert_fail@plt+0x8668>
   24cd0:	add	r2, sp, #4
   24cd4:	mov	r1, r7
   24cd8:	ldr	fp, [r4, #100]	; 0x64
   24cdc:	mov	r3, r0
   24ce0:	mov	r0, r8
   24ce4:	bl	22508 <__assert_fail@plt+0x11010>
   24ce8:	cmp	sl, #0
   24cec:	mov	r6, r0
   24cf0:	str	r0, [fp, r5, lsl #2]
   24cf4:	beq	24c5c <__assert_fail@plt+0x13764>
   24cf8:	ldr	r0, [sp, #12]
   24cfc:	bl	14214 <__assert_fail@plt+0x2d1c>
   24d00:	b	24c5c <__assert_fail@plt+0x13764>
   24d04:	ldm	r3, {r0, r1, r2}
   24d08:	add	r6, sp, #4
   24d0c:	stm	r6, {r0, r1, r2}
   24d10:	sub	r1, r5, #1
   24d14:	ldr	r2, [r4, #88]	; 0x58
   24d18:	mov	r0, r4
   24d1c:	bl	19b60 <__assert_fail@plt+0x8668>
   24d20:	mov	r2, r6
   24d24:	mov	r1, r7
   24d28:	mov	r3, r0
   24d2c:	mov	r0, r8
   24d30:	bl	22508 <__assert_fail@plt+0x11010>
   24d34:	mov	r6, r0
   24d38:	str	r0, [sl]
   24d3c:	b	24c5c <__assert_fail@plt+0x13764>
   24d40:	cmp	r6, #0
   24d44:	beq	24da0 <__assert_fail@plt+0x138a8>
   24d48:	add	r7, r6, #8
   24d4c:	add	sl, r6, #12
   24d50:	mov	r3, r5
   24d54:	mov	r1, r7
   24d58:	mov	r2, sl
   24d5c:	mov	r0, r4
   24d60:	bl	1a7f8 <__assert_fail@plt+0x9300>
   24d64:	cmp	r0, #0
   24d68:	str	r0, [r8]
   24d6c:	bne	24da0 <__assert_fail@plt+0x138a8>
   24d70:	ldrb	r3, [r6, #52]	; 0x34
   24d74:	tst	r3, #64	; 0x40
   24d78:	beq	24c68 <__assert_fail@plt+0x13770>
   24d7c:	mov	r2, sl
   24d80:	mov	r1, r7
   24d84:	mov	r0, r4
   24d88:	bl	24408 <__assert_fail@plt+0x12f10>
   24d8c:	cmp	r0, #0
   24d90:	str	r0, [r8]
   24d94:	ldreq	r3, [r4, #100]	; 0x64
   24d98:	ldreq	r6, [r3, r9]
   24d9c:	beq	24c68 <__assert_fail@plt+0x13770>
   24da0:	mov	r6, #0
   24da4:	b	24c68 <__assert_fail@plt+0x13770>
   24da8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24dac:	mov	r7, r0
   24db0:	sub	sp, sp, #420	; 0x1a4
   24db4:	mov	r5, r3
   24db8:	ldr	r3, [r7]
   24dbc:	str	r0, [sp, #44]	; 0x2c
   24dc0:	str	r1, [sp, #60]	; 0x3c
   24dc4:	str	r2, [sp, #72]	; 0x48
   24dc8:	mov	r1, #0
   24dcc:	add	r0, sp, #140	; 0x8c
   24dd0:	mov	r2, #136	; 0x88
   24dd4:	mov	r8, r3
   24dd8:	str	r3, [sp, #28]
   24ddc:	ldr	r4, [sp, #456]	; 0x1c8
   24de0:	ldr	r6, [sp, #464]	; 0x1d0
   24de4:	bl	11414 <memset@plt>
   24de8:	ldr	r1, [r7, #16]
   24dec:	str	r8, [sp, #224]	; 0xe0
   24df0:	cmp	r1, #0
   24df4:	streq	r1, [sp, #64]	; 0x40
   24df8:	beq	24e24 <__assert_fail@plt+0x1392c>
   24dfc:	ldrb	r2, [r7, #28]
   24e00:	subs	r3, r5, r4
   24e04:	movne	r3, #1
   24e08:	ands	r3, r3, r2, lsr #3
   24e0c:	streq	r3, [sp, #64]	; 0x40
   24e10:	beq	24e24 <__assert_fail@plt+0x1392c>
   24e14:	tst	r2, #1
   24e18:	moveq	r3, r1
   24e1c:	movne	r3, #0
   24e20:	str	r3, [sp, #64]	; 0x40
   24e24:	ldr	r3, [sp, #44]	; 0x2c
   24e28:	ldr	r3, [r3, #24]
   24e2c:	cmp	r3, r6
   24e30:	subcc	r2, r6, #1
   24e34:	subcc	r3, r2, r3
   24e38:	ldr	r2, [sp, #44]	; 0x2c
   24e3c:	movcs	r3, #0
   24e40:	str	r3, [sp, #96]	; 0x60
   24e44:	ldr	r2, [r2, #8]
   24e48:	cmp	r2, #0
   24e4c:	beq	2553c <__assert_fail@plt+0x14044>
   24e50:	ldr	r2, [sp, #28]
   24e54:	ldr	r2, [r2, #36]	; 0x24
   24e58:	cmp	r2, #0
   24e5c:	beq	2553c <__assert_fail@plt+0x14044>
   24e60:	ldr	r1, [sp, #28]
   24e64:	ldr	r1, [r1, #40]	; 0x28
   24e68:	cmp	r1, #0
   24e6c:	beq	2553c <__assert_fail@plt+0x14044>
   24e70:	ldr	r0, [sp, #28]
   24e74:	ldr	ip, [r0, #44]	; 0x2c
   24e78:	cmp	ip, #0
   24e7c:	beq	2553c <__assert_fail@plt+0x14044>
   24e80:	ldr	r0, [r0, #48]	; 0x30
   24e84:	cmp	r0, #0
   24e88:	beq	2553c <__assert_fail@plt+0x14044>
   24e8c:	ldr	r2, [r2, #8]
   24e90:	cmp	r2, #0
   24e94:	bne	24ed8 <__assert_fail@plt+0x139e0>
   24e98:	ldr	r2, [r1, #8]
   24e9c:	cmp	r2, #0
   24ea0:	bne	24ed8 <__assert_fail@plt+0x139e0>
   24ea4:	ldr	r2, [ip, #8]
   24ea8:	cmp	r2, #0
   24eac:	beq	24ec0 <__assert_fail@plt+0x139c8>
   24eb0:	ldr	r2, [sp, #44]	; 0x2c
   24eb4:	ldrsb	r2, [r2, #28]
   24eb8:	cmp	r2, #0
   24ebc:	blt	24ed8 <__assert_fail@plt+0x139e0>
   24ec0:	cmp	r5, #0
   24ec4:	cmpne	r4, #0
   24ec8:	movne	r4, #1
   24ecc:	moveq	r4, #0
   24ed0:	bne	2553c <__assert_fail@plt+0x14044>
   24ed4:	mov	r5, r4
   24ed8:	subs	r3, r6, r3
   24edc:	str	r3, [sp, #56]	; 0x38
   24ee0:	movne	r3, #1
   24ee4:	strne	r3, [sp, #36]	; 0x24
   24ee8:	beq	251e4 <__assert_fail@plt+0x13cec>
   24eec:	ldr	r2, [sp, #28]
   24ef0:	ldr	lr, [sp, #44]	; 0x2c
   24ef4:	ldr	ip, [sp, #72]	; 0x48
   24ef8:	ldr	r3, [r2, #8]
   24efc:	ldr	r0, [r2, #92]	; 0x5c
   24f00:	add	r3, r3, #1
   24f04:	cmp	r3, r0
   24f08:	ldr	r1, [lr, #12]
   24f0c:	ldrb	r2, [r2, #88]	; 0x58
   24f10:	movlt	r3, r0
   24f14:	add	r6, ip, #1
   24f18:	ldr	lr, [lr, #20]
   24f1c:	cmp	r3, r6
   24f20:	movlt	r6, r3
   24f24:	lsr	r1, r1, #22
   24f28:	adds	r8, lr, #0
   24f2c:	and	r1, r1, #1
   24f30:	movne	r8, #1
   24f34:	lsr	r3, r2, #2
   24f38:	ldr	r7, [sp, #60]	; 0x3c
   24f3c:	lsr	r2, r2, #3
   24f40:	and	r3, r3, #1
   24f44:	and	r2, r2, #1
   24f48:	str	ip, [sp, #188]	; 0xbc
   24f4c:	str	ip, [sp, #184]	; 0xb8
   24f50:	str	ip, [sp, #196]	; 0xc4
   24f54:	str	ip, [sp, #192]	; 0xc0
   24f58:	cmp	r0, #1
   24f5c:	orr	ip, r1, r8
   24f60:	str	lr, [sp, #80]	; 0x50
   24f64:	str	r7, [sp, #140]	; 0x8c
   24f68:	str	r0, [sp, #220]	; 0xdc
   24f6c:	str	lr, [sp, #204]	; 0xcc
   24f70:	strb	r1, [sp, #212]	; 0xd4
   24f74:	strb	ip, [sp, #215]	; 0xd7
   24f78:	strb	r3, [sp, #213]	; 0xd5
   24f7c:	strb	r2, [sp, #214]	; 0xd6
   24f80:	ble	24fd0 <__assert_fail@plt+0x13ad8>
   24f84:	cmn	r6, #-1073741823	; 0xc0000001
   24f88:	bhi	262ec <__assert_fail@plt+0x14df4>
   24f8c:	lsl	r7, r6, #2
   24f90:	mov	r1, r7
   24f94:	mov	r0, #0
   24f98:	bl	2a7bc <__assert_fail@plt+0x192c4>
   24f9c:	subs	r3, r0, #0
   24fa0:	beq	25574 <__assert_fail@plt+0x1407c>
   24fa4:	ldr	r0, [sp, #152]	; 0x98
   24fa8:	str	r3, [sp, #148]	; 0x94
   24fac:	cmp	r0, #0
   24fb0:	ldrbeq	ip, [sp, #215]	; 0xd7
   24fb4:	beq	24fd0 <__assert_fail@plt+0x13ad8>
   24fb8:	mov	r1, r7
   24fbc:	bl	2a7bc <__assert_fail@plt+0x192c4>
   24fc0:	cmp	r0, #0
   24fc4:	beq	25574 <__assert_fail@plt+0x1407c>
   24fc8:	ldrb	ip, [sp, #215]	; 0xd7
   24fcc:	str	r0, [sp, #152]	; 0x98
   24fd0:	cmp	ip, #0
   24fd4:	bne	260dc <__assert_fail@plt+0x14be4>
   24fd8:	ldr	r2, [sp, #28]
   24fdc:	str	r6, [sp, #176]	; 0xb0
   24fe0:	add	r2, r2, #96	; 0x60
   24fe4:	ldrb	r3, [r2, #-8]
   24fe8:	str	r2, [sp, #208]	; 0xd0
   24fec:	lsr	r3, r3, #4
   24ff0:	and	r3, r3, #1
   24ff4:	strb	r3, [sp, #218]	; 0xda
   24ff8:	ldr	r3, [sp, #28]
   24ffc:	ldr	r2, [sp, #60]	; 0x3c
   25000:	ldr	r3, [r3, #92]	; 0x5c
   25004:	str	r2, [sp, #144]	; 0x90
   25008:	cmp	r3, #1
   2500c:	ble	25f38 <__assert_fail@plt+0x14a40>
   25010:	mov	r1, #0
   25014:	ldr	r3, [sp, #44]	; 0x2c
   25018:	mvn	r2, #0
   2501c:	str	r1, [sp, #168]	; 0xa8
   25020:	ldrb	r3, [r3, #28]
   25024:	str	r1, [sp, #172]	; 0xac
   25028:	lsr	r3, r3, #7
   2502c:	strb	r3, [sp, #217]	; 0xd9
   25030:	ldr	r3, [sp, #28]
   25034:	ldr	r7, [r3, #76]	; 0x4c
   25038:	ldr	r3, [sp, #460]	; 0x1cc
   2503c:	str	r2, [sp, #232]	; 0xe8
   25040:	str	r3, [sp, #196]	; 0xc4
   25044:	str	r3, [sp, #192]	; 0xc0
   25048:	lsl	r6, r7, #1
   2504c:	ldr	r3, [sp, #472]	; 0x1d8
   25050:	cmp	r6, #0
   25054:	str	r3, [sp, #228]	; 0xe4
   25058:	ble	25094 <__assert_fail@plt+0x13b9c>
   2505c:	ldr	r3, [pc, #4032]	; 26024 <__assert_fail@plt+0x14b2c>
   25060:	cmp	r6, r3
   25064:	bgt	25574 <__assert_fail@plt+0x1407c>
   25068:	add	r0, r6, r7, lsl #2
   2506c:	lsl	r0, r0, #3
   25070:	bl	2a790 <__assert_fail@plt+0x19298>
   25074:	str	r0, [sp, #256]	; 0x100
   25078:	lsl	r0, r7, #3
   2507c:	bl	2a790 <__assert_fail@plt+0x19298>
   25080:	ldr	r3, [sp, #256]	; 0x100
   25084:	cmp	r0, #0
   25088:	cmpne	r3, #0
   2508c:	str	r0, [sp, #272]	; 0x110
   25090:	beq	25574 <__assert_fail@plt+0x1407c>
   25094:	ldr	r3, [sp, #56]	; 0x38
   25098:	str	r6, [sp, #252]	; 0xfc
   2509c:	cmp	r3, #1
   250a0:	mov	r3, #1
   250a4:	str	r6, [sp, #268]	; 0x10c
   250a8:	str	r3, [sp, #260]	; 0x104
   250ac:	bls	26124 <__assert_fail@plt+0x14c2c>
   250b0:	ldr	r3, [sp, #176]	; 0xb0
   250b4:	cmn	r3, #-1073741822	; 0xc0000002
   250b8:	bhi	25574 <__assert_fail@plt+0x1407c>
   250bc:	add	r3, r3, #1
   250c0:	lsl	r0, r3, #2
   250c4:	bl	2a790 <__assert_fail@plt+0x19298>
   250c8:	cmp	r0, #0
   250cc:	str	r0, [sp, #240]	; 0xf0
   250d0:	beq	25b3c <__assert_fail@plt+0x14644>
   250d4:	ldr	r3, [sp, #472]	; 0x1d8
   250d8:	str	r5, [sp, #112]	; 0x70
   250dc:	tst	r3, #1
   250e0:	moveq	r3, #6
   250e4:	movne	r3, #4
   250e8:	cmp	r5, r4
   250ec:	movle	r2, #1
   250f0:	mvngt	r2, #0
   250f4:	str	r2, [sp, #92]	; 0x5c
   250f8:	str	r3, [sp, #200]	; 0xc8
   250fc:	movlt	r2, r5
   25100:	movge	r2, r4
   25104:	ldr	r3, [sp, #28]
   25108:	str	r2, [sp, #68]	; 0x44
   2510c:	movge	r2, r5
   25110:	movlt	r2, r4
   25114:	str	r2, [sp, #52]	; 0x34
   25118:	ldr	r2, [sp, #64]	; 0x40
   2511c:	ldr	r3, [r3, #92]	; 0x5c
   25120:	cmp	r2, #0
   25124:	str	r3, [sp, #84]	; 0x54
   25128:	beq	2626c <__assert_fail@plt+0x14d74>
   2512c:	cmp	r3, #1
   25130:	moveq	r3, #4
   25134:	beq	2515c <__assert_fail@plt+0x13c64>
   25138:	ldr	r3, [sp, #44]	; 0x2c
   2513c:	ldr	r2, [sp, #80]	; 0x50
   25140:	ldr	r3, [r3, #12]
   25144:	lsr	r3, r3, #22
   25148:	eor	r3, r3, #1
   2514c:	cmp	r2, #0
   25150:	movne	r3, #0
   25154:	andeq	r3, r3, #1
   25158:	lsl	r3, r3, #2
   2515c:	cmp	r5, r4
   25160:	orr	r3, r8, r3
   25164:	movle	r2, #2
   25168:	movgt	r2, #0
   2516c:	orr	r3, r3, r2
   25170:	ldr	r2, [sp, #68]	; 0x44
   25174:	ldr	r1, [sp, #52]	; 0x34
   25178:	cmp	r5, r2
   2517c:	movge	r2, #0
   25180:	movlt	r2, #1
   25184:	cmp	r5, r1
   25188:	orrgt	r2, r2, #1
   2518c:	cmp	r2, #0
   25190:	str	r2, [sp, #108]	; 0x6c
   25194:	bne	2552c <__assert_fail@plt+0x14034>
   25198:	sub	r3, r3, #4
   2519c:	cmp	r5, r4
   251a0:	str	r3, [sp, #88]	; 0x58
   251a4:	add	r3, sp, #416	; 0x1a0
   251a8:	suble	r3, r3, #304	; 0x130
   251ac:	movgt	r3, #0
   251b0:	str	r3, [sp, #100]	; 0x64
   251b4:	movle	r3, #1
   251b8:	movgt	r3, #0
   251bc:	str	r3, [sp, #104]	; 0x68
   251c0:	ldr	r3, [sp, #88]	; 0x58
   251c4:	cmp	r3, #4
   251c8:	ldrls	pc, [pc, r3, lsl #2]
   251cc:	b	25f68 <__assert_fail@plt+0x14a70>
   251d0:			; <UNDEFINED> instruction: 0x00025eb0
   251d4:			; <UNDEFINED> instruction: 0x00025eb0
   251d8:	strdeq	r5, [r2], -ip
   251dc:	andeq	r5, r2, r4, asr #28
   251e0:	andeq	r5, r2, r0, lsr #5
   251e4:	ldr	r3, [sp, #28]
   251e8:	ldr	r3, [r3, #76]	; 0x4c
   251ec:	adds	r3, r3, #0
   251f0:	movne	r3, #1
   251f4:	str	r3, [sp, #36]	; 0x24
   251f8:	b	24eec <__assert_fail@plt+0x139f4>
   251fc:	ldr	r3, [sp, #52]	; 0x34
   25200:	cmp	r3, r5
   25204:	ble	2525c <__assert_fail@plt+0x13d64>
   25208:	ldr	r3, [sp, #60]	; 0x3c
   2520c:	ldr	r1, [sp, #64]	; 0x40
   25210:	ldrb	r2, [r3, r5]
   25214:	add	r3, r3, r5
   25218:	ldrb	r2, [r1, r2]
   2521c:	cmp	r2, #0
   25220:	bne	252a0 <__assert_fail@plt+0x13da8>
   25224:	mov	ip, r1
   25228:	add	r2, r5, #1
   2522c:	ldr	r0, [sp, #52]	; 0x34
   25230:	b	25248 <__assert_fail@plt+0x13d50>
   25234:	ldrb	r1, [r3, #1]!
   25238:	add	r2, r2, #1
   2523c:	ldrb	r1, [ip, r1]
   25240:	cmp	r1, #0
   25244:	bne	26138 <__assert_fail@plt+0x14c40>
   25248:	cmp	r0, r2
   2524c:	mov	r5, r2
   25250:	bne	25234 <__assert_fail@plt+0x13d3c>
   25254:	ldr	r3, [sp, #52]	; 0x34
   25258:	str	r3, [sp, #112]	; 0x70
   2525c:	cmp	r3, r5
   25260:	bne	252a0 <__assert_fail@plt+0x13da8>
   25264:	ldr	r2, [sp, #72]	; 0x48
   25268:	ldr	r1, [sp, #80]	; 0x50
   2526c:	cmp	r2, r3
   25270:	movle	r3, #0
   25274:	ldrgt	r2, [sp, #60]	; 0x3c
   25278:	ldrbgt	r3, [r2, r3]
   2527c:	cmp	r1, #0
   25280:	mov	r2, r3
   25284:	movne	r2, r1
   25288:	ldrbne	r2, [r2, r3]
   2528c:	ldr	r3, [sp, #64]	; 0x40
   25290:	ldrb	r3, [r3, r2]
   25294:	cmp	r3, #0
   25298:	beq	2552c <__assert_fail@plt+0x14034>
   2529c:	ldr	r5, [sp, #52]	; 0x34
   252a0:	ldr	r2, [sp, #472]	; 0x1d8
   252a4:	mov	r1, r5
   252a8:	add	r0, sp, #140	; 0x8c
   252ac:	bl	19c4c <__assert_fail@plt+0x8754>
   252b0:	subs	r3, r0, #0
   252b4:	str	r3, [sp, #48]	; 0x30
   252b8:	bne	261c8 <__assert_fail@plt+0x14cd0>
   252bc:	ldr	r3, [sp, #84]	; 0x54
   252c0:	cmp	r3, #1
   252c4:	beq	252e4 <__assert_fail@plt+0x13dec>
   252c8:	ldr	r3, [sp, #168]	; 0xa8
   252cc:	cmp	r3, #0
   252d0:	beq	252e4 <__assert_fail@plt+0x13dec>
   252d4:	ldr	r3, [sp, #148]	; 0x94
   252d8:	ldr	r3, [r3]
   252dc:	cmn	r3, #1
   252e0:	beq	254fc <__assert_fail@plt+0x14004>
   252e4:	ldr	r4, [sp, #224]	; 0xe0
   252e8:	mov	r3, #0
   252ec:	str	r3, [sp, #260]	; 0x104
   252f0:	ldr	fp, [r4, #36]	; 0x24
   252f4:	str	r3, [sp, #248]	; 0xf8
   252f8:	str	r3, [sp, #244]	; 0xf4
   252fc:	str	r3, [sp, #116]	; 0x74
   25300:	ldrsb	r3, [fp, #52]	; 0x34
   25304:	ldr	r2, [sp, #180]	; 0xb4
   25308:	cmp	r3, #0
   2530c:	str	r2, [sp, #12]
   25310:	blt	25ff8 <__assert_fail@plt+0x14b00>
   25314:	ldr	r3, [sp, #240]	; 0xf0
   25318:	cmp	r3, #0
   2531c:	beq	2616c <__assert_fail@plt+0x14c74>
   25320:	ldr	r2, [r4, #76]	; 0x4c
   25324:	ldr	r1, [sp, #12]
   25328:	cmp	r2, #0
   2532c:	str	fp, [r3, r1, lsl #2]
   25330:	bne	2620c <__assert_fail@plt+0x14d14>
   25334:	ldrb	r3, [fp, #52]	; 0x34
   25338:	ldr	r2, [sp, #104]	; 0x68
   2533c:	str	r2, [sp, #16]
   25340:	tst	r3, #16
   25344:	bne	261d8 <__assert_fail@plt+0x14ce0>
   25348:	mvn	r3, #0
   2534c:	str	r3, [sp, #20]
   25350:	mov	r3, #0
   25354:	str	r3, [sp, #40]	; 0x28
   25358:	ldr	r3, [sp, #100]	; 0x64
   2535c:	ldr	r5, [sp, #180]	; 0xb4
   25360:	str	r3, [sp, #32]
   25364:	b	25370 <__assert_fail@plt+0x13e78>
   25368:	ldr	r5, [sp, #180]	; 0xb4
   2536c:	mov	fp, r4
   25370:	ldr	r3, [sp, #196]	; 0xc4
   25374:	cmp	r3, r5
   25378:	ble	25634 <__assert_fail@plt+0x1413c>
   2537c:	ldr	r3, [sp, #176]	; 0xb0
   25380:	add	r9, r5, #1
   25384:	cmp	r9, r3
   25388:	bge	25a4c <__assert_fail@plt+0x14554>
   2538c:	ldr	r3, [sp, #168]	; 0xa8
   25390:	cmp	r9, r3
   25394:	bge	25aa8 <__assert_fail@plt+0x145b0>
   25398:	ldrb	r3, [fp, #52]	; 0x34
   2539c:	tst	r3, #32
   253a0:	bne	25820 <__assert_fail@plt+0x14328>
   253a4:	ldr	r3, [sp, #144]	; 0x90
   253a8:	add	r2, r5, #1
   253ac:	str	r2, [sp, #180]	; 0xb4
   253b0:	ldrb	r4, [r3, r5]
   253b4:	ldr	r3, [fp, #44]	; 0x2c
   253b8:	cmp	r3, #0
   253bc:	beq	25a78 <__assert_fail@plt+0x14580>
   253c0:	ldr	r4, [r3, r4, lsl #2]
   253c4:	ldr	r3, [sp, #240]	; 0xf0
   253c8:	cmp	r3, #0
   253cc:	beq	253e4 <__assert_fail@plt+0x13eec>
   253d0:	mov	r2, r4
   253d4:	add	r1, sp, #140	; 0x8c
   253d8:	add	r0, sp, #116	; 0x74
   253dc:	bl	24c24 <__assert_fail@plt+0x1372c>
   253e0:	mov	r4, r0
   253e4:	cmp	r4, #0
   253e8:	beq	255c8 <__assert_fail@plt+0x140d0>
   253ec:	ldr	r2, [sp, #16]
   253f0:	ldrb	r3, [r4, #52]	; 0x34
   253f4:	cmp	fp, r4
   253f8:	movne	r2, #0
   253fc:	andeq	r2, r2, #1
   25400:	ldr	r1, [sp, #12]
   25404:	cmp	r2, #0
   25408:	movne	r1, r9
   2540c:	tst	r3, #16
   25410:	str	r2, [sp, #16]
   25414:	str	r1, [sp, #12]
   25418:	beq	25368 <__assert_fail@plt+0x13e70>
   2541c:	tst	r3, #128	; 0x80
   25420:	bne	257cc <__assert_fail@plt+0x142d4>
   25424:	ldr	r3, [sp, #180]	; 0xb4
   25428:	str	r3, [sp, #20]
   2542c:	ldr	r3, [sp, #36]	; 0x24
   25430:	cmp	r3, #0
   25434:	beq	25654 <__assert_fail@plt+0x1415c>
   25438:	mov	r3, #1
   2543c:	str	r3, [sp, #40]	; 0x28
   25440:	mov	r3, #0
   25444:	ldr	r5, [sp, #20]
   25448:	str	r3, [sp, #32]
   2544c:	b	2536c <__assert_fail@plt+0x13e74>
   25450:	ldr	r0, [sp, #12]
   25454:	bl	14214 <__assert_fail@plt+0x2d1c>
   25458:	mov	r0, #0
   2545c:	bl	14214 <__assert_fail@plt+0x2d1c>
   25460:	ldr	r3, [sp, #264]	; 0x108
   25464:	cmp	r3, #0
   25468:	movgt	r4, #0
   2546c:	ble	254ec <__assert_fail@plt+0x13ff4>
   25470:	ldr	r3, [sp, #272]	; 0x110
   25474:	ldr	r7, [r3, r4, lsl #2]
   25478:	ldr	r3, [r7, #16]
   2547c:	cmp	r3, #0
   25480:	movgt	r5, #0
   25484:	ble	254b0 <__assert_fail@plt+0x13fb8>
   25488:	ldr	r3, [r7, #20]
   2548c:	ldr	r6, [r3, r5, lsl #2]
   25490:	add	r5, r5, #1
   25494:	ldr	r0, [r6, #16]
   25498:	bl	14214 <__assert_fail@plt+0x2d1c>
   2549c:	mov	r0, r6
   254a0:	bl	14214 <__assert_fail@plt+0x2d1c>
   254a4:	ldr	r3, [r7, #16]
   254a8:	cmp	r5, r3
   254ac:	blt	25488 <__assert_fail@plt+0x13f90>
   254b0:	ldr	r0, [r7, #20]
   254b4:	bl	14214 <__assert_fail@plt+0x2d1c>
   254b8:	ldr	r3, [r7, #8]
   254bc:	cmp	r3, #0
   254c0:	beq	254d4 <__assert_fail@plt+0x13fdc>
   254c4:	ldr	r0, [r3, #8]
   254c8:	bl	14214 <__assert_fail@plt+0x2d1c>
   254cc:	ldr	r0, [r7, #8]
   254d0:	bl	14214 <__assert_fail@plt+0x2d1c>
   254d4:	mov	r0, r7
   254d8:	bl	14214 <__assert_fail@plt+0x2d1c>
   254dc:	ldr	r3, [sp, #264]	; 0x108
   254e0:	add	r4, r4, #1
   254e4:	cmp	r4, r3
   254e8:	blt	25470 <__assert_fail@plt+0x13f78>
   254ec:	ldr	r5, [sp, #112]	; 0x70
   254f0:	mov	r3, #0
   254f4:	str	r3, [sp, #264]	; 0x108
   254f8:	str	r3, [sp, #248]	; 0xf8
   254fc:	ldr	r3, [sp, #92]	; 0x5c
   25500:	ldr	r2, [sp, #68]	; 0x44
   25504:	add	r5, r5, r3
   25508:	ldr	r3, [sp, #52]	; 0x34
   2550c:	str	r5, [sp, #112]	; 0x70
   25510:	cmp	r3, r5
   25514:	movge	r3, #0
   25518:	movlt	r3, #1
   2551c:	cmp	r2, r5
   25520:	orrgt	r3, r3, #1
   25524:	cmp	r3, #0
   25528:	beq	251c0 <__assert_fail@plt+0x13cc8>
   2552c:	mov	r3, #1
   25530:	ldr	r7, [sp, #240]	; 0xf0
   25534:	str	r3, [sp, #48]	; 0x30
   25538:	b	25580 <__assert_fail@plt+0x14088>
   2553c:	mov	r3, #1
   25540:	str	r3, [sp, #48]	; 0x30
   25544:	ldr	r0, [sp, #48]	; 0x30
   25548:	add	sp, sp, #420	; 0x1a4
   2554c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25550:	tst	r0, #4
   25554:	beq	25314 <__assert_fail@plt+0x13e1c>
   25558:	mov	r3, r0
   2555c:	ldr	r2, [fp, #40]	; 0x28
   25560:	mov	r1, r4
   25564:	add	r0, sp, #116	; 0x74
   25568:	bl	22508 <__assert_fail@plt+0x11010>
   2556c:	subs	fp, r0, #0
   25570:	bne	25314 <__assert_fail@plt+0x13e1c>
   25574:	ldr	r7, [sp, #240]	; 0xf0
   25578:	mov	r3, #12
   2557c:	str	r3, [sp, #48]	; 0x30
   25580:	mov	r0, r7
   25584:	bl	14214 <__assert_fail@plt+0x2d1c>
   25588:	ldr	r3, [sp, #28]
   2558c:	ldr	r3, [r3, #76]	; 0x4c
   25590:	cmp	r3, #0
   25594:	bne	26030 <__assert_fail@plt+0x14b38>
   25598:	ldr	r0, [sp, #148]	; 0x94
   2559c:	bl	14214 <__assert_fail@plt+0x2d1c>
   255a0:	ldr	r0, [sp, #152]	; 0x98
   255a4:	bl	14214 <__assert_fail@plt+0x2d1c>
   255a8:	ldrb	r3, [sp, #215]	; 0xd7
   255ac:	cmp	r3, #0
   255b0:	beq	25544 <__assert_fail@plt+0x1404c>
   255b4:	ldr	r0, [sp, #144]	; 0x90
   255b8:	bl	14214 <__assert_fail@plt+0x2d1c>
   255bc:	ldr	r0, [sp, #48]	; 0x30
   255c0:	add	sp, sp, #420	; 0x1a4
   255c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   255c8:	ldr	r3, [sp, #116]	; 0x74
   255cc:	cmp	r3, #0
   255d0:	bne	26204 <__assert_fail@plt+0x14d0c>
   255d4:	ldr	r2, [sp, #240]	; 0xf0
   255d8:	cmp	r2, #0
   255dc:	beq	25634 <__assert_fail@plt+0x1413c>
   255e0:	ldr	r3, [sp, #36]	; 0x24
   255e4:	eor	r5, r3, #1
   255e8:	ldr	r3, [sp, #40]	; 0x28
   255ec:	ands	r5, r5, r3
   255f0:	bne	25634 <__assert_fail@plt+0x1413c>
   255f4:	ldr	r3, [sp, #180]	; 0xb4
   255f8:	ldr	lr, [sp, #244]	; 0xf4
   255fc:	mov	r0, r3
   25600:	add	r2, r2, r3, lsl #2
   25604:	mov	ip, r5
   25608:	b	25620 <__assert_fail@plt+0x14128>
   2560c:	ldr	r1, [r2, #4]!
   25610:	mov	r0, r3
   25614:	cmp	r1, #0
   25618:	mov	ip, #1
   2561c:	bne	257f0 <__assert_fail@plt+0x142f8>
   25620:	add	r3, r3, #1
   25624:	cmp	lr, r3
   25628:	bge	2560c <__assert_fail@plt+0x14114>
   2562c:	cmp	ip, #0
   25630:	strne	r0, [sp, #180]	; 0xb4
   25634:	ldr	r3, [sp, #32]
   25638:	cmp	r3, #0
   2563c:	beq	25654 <__assert_fail@plt+0x1415c>
   25640:	mov	r2, r3
   25644:	ldr	r1, [sp, #12]
   25648:	ldr	r3, [r3]
   2564c:	add	r3, r3, r1
   25650:	str	r3, [r2]
   25654:	ldr	r3, [sp, #20]
   25658:	cmn	r3, #1
   2565c:	beq	25460 <__assert_fail@plt+0x13f68>
   25660:	cmn	r3, #2
   25664:	beq	25574 <__assert_fail@plt+0x1407c>
   25668:	mov	r2, r3
   2566c:	ldr	r3, [sp, #44]	; 0x2c
   25670:	str	r2, [sp, #232]	; 0xe8
   25674:	ldr	r2, [sp, #56]	; 0x38
   25678:	ldrb	r3, [r3, #28]
   2567c:	lsr	r3, r3, #4
   25680:	eor	r3, r3, #1
   25684:	cmp	r2, #1
   25688:	movls	r3, #0
   2568c:	andhi	r3, r3, #1
   25690:	cmp	r3, #0
   25694:	beq	25af0 <__assert_fail@plt+0x145f8>
   25698:	ldr	r3, [sp, #20]
   2569c:	ldr	r7, [sp, #240]	; 0xf0
   256a0:	mov	r2, r3
   256a4:	add	r0, sp, #140	; 0x8c
   256a8:	ldr	r1, [r7, r3, lsl #2]
   256ac:	bl	1a4ec <__assert_fail@plt+0x8ff4>
   256b0:	ldr	r3, [sp, #28]
   256b4:	ldrb	r3, [r3, #88]	; 0x58
   256b8:	tst	r3, #1
   256bc:	str	r0, [sp, #236]	; 0xec
   256c0:	beq	25f24 <__assert_fail@plt+0x14a2c>
   256c4:	ldr	r3, [sp, #20]
   256c8:	ldr	r8, [sp, #224]	; 0xe0
   256cc:	cmn	r3, #-1073741822	; 0xc0000002
   256d0:	ldr	r9, [sp, #236]	; 0xec
   256d4:	bhi	25b40 <__assert_fail@plt+0x14648>
   256d8:	add	r4, r3, #1
   256dc:	lsl	r5, r4, #2
   256e0:	mov	r0, r5
   256e4:	bl	2a790 <__assert_fail@plt+0x19298>
   256e8:	subs	r3, r0, #0
   256ec:	str	r3, [sp, #12]
   256f0:	beq	2624c <__assert_fail@plt+0x14d54>
   256f4:	ldr	r3, [r8, #76]	; 0x4c
   256f8:	cmp	r3, #0
   256fc:	beq	25b4c <__assert_fail@plt+0x14654>
   25700:	mov	r0, r5
   25704:	bl	2a790 <__assert_fail@plt+0x19298>
   25708:	subs	sl, r0, #0
   2570c:	beq	26274 <__assert_fail@plt+0x14d7c>
   25710:	ldr	r6, [sp, #20]
   25714:	ldr	fp, [sp, #12]
   25718:	add	r5, sp, #292	; 0x124
   2571c:	lsl	r4, r4, #2
   25720:	mov	r2, r4
   25724:	mov	r1, #0
   25728:	mov	r0, sl
   2572c:	bl	11414 <memset@plt>
   25730:	mov	r3, #0
   25734:	str	fp, [sp, #276]	; 0x114
   25738:	str	sl, [sp, #280]	; 0x118
   2573c:	str	r9, [sp, #284]	; 0x11c
   25740:	str	r6, [sp, #288]	; 0x120
   25744:	add	r1, sp, #276	; 0x114
   25748:	str	r3, [r5]
   2574c:	str	r3, [r5, #4]
   25750:	str	r3, [r5, #8]
   25754:	add	r0, sp, #140	; 0x8c
   25758:	bl	1f5e4 <__assert_fail@plt+0xe0ec>
   2575c:	mov	r7, r0
   25760:	ldr	r0, [sp, #300]	; 0x12c
   25764:	bl	14214 <__assert_fail@plt+0x2d1c>
   25768:	cmp	r7, #0
   2576c:	bne	25f44 <__assert_fail@plt+0x14a4c>
   25770:	ldr	r3, [fp]
   25774:	cmp	r3, #0
   25778:	bne	26358 <__assert_fail@plt+0x14e60>
   2577c:	ldr	r3, [sl]
   25780:	cmp	r3, #0
   25784:	bne	26358 <__assert_fail@plt+0x14e60>
   25788:	ldr	r3, [sp, #240]	; 0xf0
   2578c:	sub	r4, r4, #4
   25790:	add	r3, r3, r4
   25794:	subs	r6, r6, #1
   25798:	bcc	2601c <__assert_fail@plt+0x14b24>
   2579c:	ldr	r1, [r3, #-4]!
   257a0:	cmp	r1, #0
   257a4:	beq	25794 <__assert_fail@plt+0x1429c>
   257a8:	ldrb	r2, [r1, #52]	; 0x34
   257ac:	tst	r2, #16
   257b0:	beq	25794 <__assert_fail@plt+0x1429c>
   257b4:	mov	r2, r6
   257b8:	add	r0, sp, #140	; 0x8c
   257bc:	bl	1a4ec <__assert_fail@plt+0x8ff4>
   257c0:	add	r4, r6, #1
   257c4:	mov	r9, r0
   257c8:	b	2571c <__assert_fail@plt+0x14224>
   257cc:	ldr	r5, [sp, #180]	; 0xb4
   257d0:	mov	r1, r4
   257d4:	mov	r2, r5
   257d8:	add	r0, sp, #140	; 0x8c
   257dc:	bl	1a4ec <__assert_fail@plt+0x8ff4>
   257e0:	cmp	r0, #0
   257e4:	beq	2536c <__assert_fail@plt+0x13e74>
   257e8:	str	r5, [sp, #20]
   257ec:	b	2542c <__assert_fail@plt+0x13f34>
   257f0:	mov	r2, #0
   257f4:	add	r1, sp, #140	; 0x8c
   257f8:	add	r0, sp, #116	; 0x74
   257fc:	str	r3, [sp, #180]	; 0xb4
   25800:	bl	24c24 <__assert_fail@plt+0x1372c>
   25804:	ldr	r3, [sp, #116]	; 0x74
   25808:	cmp	r3, #0
   2580c:	bne	262dc <__assert_fail@plt+0x14de4>
   25810:	cmp	r0, #0
   25814:	bne	26344 <__assert_fail@plt+0x14e4c>
   25818:	ldr	r2, [sp, #240]	; 0xf0
   2581c:	b	255f4 <__assert_fail@plt+0x140fc>
   25820:	ldr	r3, [fp, #8]
   25824:	ldr	sl, [sp, #224]	; 0xe0
   25828:	cmp	r3, #0
   2582c:	ble	25918 <__assert_fail@plt+0x14420>
   25830:	add	r2, sl, #128	; 0x80
   25834:	str	r9, [sp, #76]	; 0x4c
   25838:	mov	r4, #0
   2583c:	str	r2, [sp, #24]
   25840:	mov	r9, r3
   25844:	b	258ac <__assert_fail@plt+0x143b4>
   25848:	tst	r0, #1
   2584c:	beq	258a0 <__assert_fail@plt+0x143a8>
   25850:	tst	r6, #8
   25854:	bne	258a0 <__assert_fail@plt+0x143a8>
   25858:	tst	r6, #32
   2585c:	beq	25868 <__assert_fail@plt+0x14370>
   25860:	tst	r0, #2
   25864:	beq	258a0 <__assert_fail@plt+0x143a8>
   25868:	tst	r6, #128	; 0x80
   2586c:	beq	25878 <__assert_fail@plt+0x14380>
   25870:	tst	r0, #8
   25874:	beq	258a0 <__assert_fail@plt+0x143a8>
   25878:	str	r5, [sp]
   2587c:	mov	r0, r8
   25880:	add	r3, sp, #140	; 0x8c
   25884:	mov	r2, r7
   25888:	ldr	r1, [sp, #24]
   2588c:	bl	1b63c <__assert_fail@plt+0xa144>
   25890:	cmp	r0, #0
   25894:	bne	25924 <__assert_fail@plt+0x1442c>
   25898:	ldr	r5, [sp, #180]	; 0xb4
   2589c:	ldr	r9, [fp, #8]
   258a0:	add	r4, r4, #1
   258a4:	cmp	r4, r9
   258a8:	bge	25914 <__assert_fail@plt+0x1441c>
   258ac:	ldr	r2, [fp, #12]
   258b0:	ldr	r8, [sl]
   258b4:	ldr	r7, [r2, r4, lsl #2]
   258b8:	add	r2, r8, r7, lsl #3
   258bc:	ldrb	r1, [r2, #6]
   258c0:	tst	r1, #16
   258c4:	beq	258a0 <__assert_fail@plt+0x143a8>
   258c8:	ldr	r6, [r2, #4]
   258cc:	ldr	r3, [pc, #1876]	; 26028 <__assert_fail@plt+0x14b30>
   258d0:	tst	r6, r3
   258d4:	beq	25878 <__assert_fail@plt+0x14380>
   258d8:	ldr	r2, [sp, #228]	; 0xe4
   258dc:	mov	r1, r5
   258e0:	add	r0, sp, #140	; 0x8c
   258e4:	bl	19b60 <__assert_fail@plt+0x8668>
   258e8:	ldr	r3, [pc, #1852]	; 2602c <__assert_fail@plt+0x14b34>
   258ec:	and	r6, r3, r6, lsr #8
   258f0:	tst	r6, #4
   258f4:	bne	25848 <__assert_fail@plt+0x14350>
   258f8:	tst	r6, #8
   258fc:	beq	25858 <__assert_fail@plt+0x14360>
   25900:	tst	r0, #1
   25904:	beq	25858 <__assert_fail@plt+0x14360>
   25908:	add	r4, r4, #1
   2590c:	cmp	r4, r9
   25910:	blt	258ac <__assert_fail@plt+0x143b4>
   25914:	ldr	r9, [sp, #76]	; 0x4c
   25918:	mov	r3, #0
   2591c:	str	r3, [sp, #116]	; 0x74
   25920:	b	253a4 <__assert_fail@plt+0x13eac>
   25924:	ldr	r3, [sp, #260]	; 0x104
   25928:	ldr	r6, [sp, #180]	; 0xb4
   2592c:	ldr	r2, [sp, #176]	; 0xb0
   25930:	cmp	r3, r0
   25934:	add	r6, r0, r6
   25938:	movge	r0, r3
   2593c:	cmp	r6, r2
   25940:	str	r0, [sp, #260]	; 0x104
   25944:	ldr	r8, [sp, #244]	; 0xf4
   25948:	blt	25a30 <__assert_fail@plt+0x14538>
   2594c:	ldr	r3, [sp, #188]	; 0xbc
   25950:	cmp	r2, r3
   25954:	bge	25a30 <__assert_fail@plt+0x14538>
   25958:	add	r1, r6, #1
   2595c:	add	r0, sp, #140	; 0x8c
   25960:	bl	1e1b4 <__assert_fail@plt+0xccbc>
   25964:	cmp	r0, #0
   25968:	bne	25b20 <__assert_fail@plt+0x14628>
   2596c:	cmp	r6, r8
   25970:	ble	25994 <__assert_fail@plt+0x1449c>
   25974:	sub	r2, r6, r8
   25978:	ldr	r0, [sp, #240]	; 0xf0
   2597c:	add	r8, r8, #1
   25980:	lsl	r2, r2, #2
   25984:	add	r0, r0, r8, lsl #2
   25988:	mov	r1, #0
   2598c:	bl	11414 <memset@plt>
   25990:	str	r6, [sp, #244]	; 0xf4
   25994:	ldr	r3, [sl, #12]
   25998:	ldr	r8, [sp, #240]	; 0xf0
   2599c:	mov	r2, #0
   259a0:	ldr	r3, [r3, r7, lsl #2]
   259a4:	ldr	r1, [r8, r6, lsl #2]
   259a8:	str	r2, [sp, #128]	; 0x80
   259ac:	add	r3, r3, r3, lsl #1
   259b0:	ldr	r2, [sl, #24]
   259b4:	cmp	r1, #0
   259b8:	add	r2, r2, r3, lsl #2
   259bc:	beq	25ab8 <__assert_fail@plt+0x145c0>
   259c0:	ldr	r1, [r1, #40]	; 0x28
   259c4:	add	r0, sp, #276	; 0x114
   259c8:	bl	198d0 <__assert_fail@plt+0x83d8>
   259cc:	cmp	r0, #0
   259d0:	str	r0, [sp, #128]	; 0x80
   259d4:	bne	25b20 <__assert_fail@plt+0x14628>
   259d8:	ldr	r2, [sp, #228]	; 0xe4
   259dc:	sub	r1, r6, #1
   259e0:	add	r0, sp, #140	; 0x8c
   259e4:	bl	19b60 <__assert_fail@plt+0x8668>
   259e8:	add	r2, sp, #276	; 0x114
   259ec:	mov	r1, sl
   259f0:	ldr	r7, [sp, #240]	; 0xf0
   259f4:	mov	r3, r0
   259f8:	add	r0, sp, #128	; 0x80
   259fc:	bl	22508 <__assert_fail@plt+0x11010>
   25a00:	str	r0, [r7, r6, lsl #2]
   25a04:	ldr	r0, [sp, #284]	; 0x11c
   25a08:	bl	14214 <__assert_fail@plt+0x2d1c>
   25a0c:	ldr	r7, [sp, #240]	; 0xf0
   25a10:	ldr	r3, [r7, r6, lsl #2]
   25a14:	cmp	r3, #0
   25a18:	bne	25898 <__assert_fail@plt+0x143a0>
   25a1c:	ldr	r0, [sp, #128]	; 0x80
   25a20:	cmp	r0, #0
   25a24:	beq	25898 <__assert_fail@plt+0x143a0>
   25a28:	ldr	r9, [sp, #76]	; 0x4c
   25a2c:	b	25b28 <__assert_fail@plt+0x14630>
   25a30:	ldr	r3, [sp, #168]	; 0xa8
   25a34:	cmp	r6, r3
   25a38:	blt	2596c <__assert_fail@plt+0x14474>
   25a3c:	ldr	r2, [sp, #188]	; 0xbc
   25a40:	cmp	r3, r2
   25a44:	bge	2596c <__assert_fail@plt+0x14474>
   25a48:	b	25958 <__assert_fail@plt+0x14460>
   25a4c:	ldr	r2, [sp, #188]	; 0xbc
   25a50:	cmp	r3, r2
   25a54:	bge	2538c <__assert_fail@plt+0x13e94>
   25a58:	add	r1, r5, #2
   25a5c:	add	r0, sp, #140	; 0x8c
   25a60:	bl	1e1b4 <__assert_fail@plt+0xccbc>
   25a64:	cmp	r0, #0
   25a68:	str	r0, [sp, #116]	; 0x74
   25a6c:	bne	25574 <__assert_fail@plt+0x1407c>
   25a70:	ldr	r5, [sp, #180]	; 0xb4
   25a74:	b	25398 <__assert_fail@plt+0x13ea0>
   25a78:	ldr	r5, [fp, #48]	; 0x30
   25a7c:	cmp	r5, #0
   25a80:	beq	26140 <__assert_fail@plt+0x14c48>
   25a84:	ldr	r1, [sp, #180]	; 0xb4
   25a88:	ldr	r2, [sp, #228]	; 0xe4
   25a8c:	sub	r1, r1, #1
   25a90:	add	r0, sp, #140	; 0x8c
   25a94:	bl	19b60 <__assert_fail@plt+0x8668>
   25a98:	tst	r0, #1
   25a9c:	addne	r4, r4, #256	; 0x100
   25aa0:	ldr	r4, [r5, r4, lsl #2]
   25aa4:	b	253c4 <__assert_fail@plt+0x13ecc>
   25aa8:	ldr	r2, [sp, #188]	; 0xbc
   25aac:	cmp	r3, r2
   25ab0:	bge	25398 <__assert_fail@plt+0x13ea0>
   25ab4:	b	25a58 <__assert_fail@plt+0x14560>
   25ab8:	ldm	r2, {r0, r1, r2}
   25abc:	add	r3, sp, #276	; 0x114
   25ac0:	stm	r3, {r0, r1, r2}
   25ac4:	sub	r1, r6, #1
   25ac8:	ldr	r2, [sp, #228]	; 0xe4
   25acc:	add	r0, sp, #140	; 0x8c
   25ad0:	bl	19b60 <__assert_fail@plt+0x8668>
   25ad4:	add	r2, sp, #276	; 0x114
   25ad8:	mov	r1, sl
   25adc:	mov	r3, r0
   25ae0:	add	r0, sp, #128	; 0x80
   25ae4:	bl	22508 <__assert_fail@plt+0x11010>
   25ae8:	str	r0, [r8, r6, lsl #2]
   25aec:	b	25a0c <__assert_fail@plt+0x14514>
   25af0:	ldr	r3, [sp, #28]
   25af4:	ldr	r7, [sp, #240]	; 0xf0
   25af8:	ldr	r4, [r3, #76]	; 0x4c
   25afc:	cmp	r4, #0
   25b00:	beq	25bcc <__assert_fail@plt+0x146d4>
   25b04:	ldr	r3, [sp, #20]
   25b08:	add	r0, sp, #140	; 0x8c
   25b0c:	mov	r2, r3
   25b10:	ldr	r1, [r7, r3, lsl #2]
   25b14:	bl	1a4ec <__assert_fail@plt+0x8ff4>
   25b18:	str	r0, [sp, #236]	; 0xec
   25b1c:	b	25f2c <__assert_fail@plt+0x14a34>
   25b20:	ldr	r9, [sp, #76]	; 0x4c
   25b24:	ldr	r7, [sp, #240]	; 0xf0
   25b28:	cmp	r7, #0
   25b2c:	str	r0, [sp, #116]	; 0x74
   25b30:	beq	25b40 <__assert_fail@plt+0x14648>
   25b34:	mov	r4, #0
   25b38:	b	253d0 <__assert_fail@plt+0x13ed8>
   25b3c:	mov	r7, r0
   25b40:	mov	r3, #12
   25b44:	str	r3, [sp, #48]	; 0x30
   25b48:	b	25580 <__assert_fail@plt+0x14088>
   25b4c:	ldr	r2, [sp, #20]
   25b50:	ldr	r4, [sp, #12]
   25b54:	add	r1, sp, #276	; 0x114
   25b58:	add	r0, sp, #140	; 0x8c
   25b5c:	str	r3, [sp, #280]	; 0x118
   25b60:	str	r2, [sp, #288]	; 0x120
   25b64:	str	r3, [sp, #292]	; 0x124
   25b68:	str	r3, [sp, #296]	; 0x128
   25b6c:	str	r3, [sp, #300]	; 0x12c
   25b70:	str	r4, [sp, #276]	; 0x114
   25b74:	str	r9, [sp, #284]	; 0x11c
   25b78:	bl	1f5e4 <__assert_fail@plt+0xe0ec>
   25b7c:	mov	r7, r0
   25b80:	ldr	r0, [sp, #300]	; 0x12c
   25b84:	bl	14214 <__assert_fail@plt+0x2d1c>
   25b88:	cmp	r7, #0
   25b8c:	bne	25f40 <__assert_fail@plt+0x14a48>
   25b90:	ldr	r3, [r4]
   25b94:	cmp	r3, #0
   25b98:	beq	25450 <__assert_fail@plt+0x13f58>
   25b9c:	ldr	fp, [sp, #12]
   25ba0:	ldr	r0, [sp, #240]	; 0xf0
   25ba4:	bl	14214 <__assert_fail@plt+0x2d1c>
   25ba8:	ldr	r3, [sp, #20]
   25bac:	mov	r0, #0
   25bb0:	str	r3, [sp, #232]	; 0xe8
   25bb4:	str	fp, [sp, #240]	; 0xf0
   25bb8:	str	r9, [sp, #236]	; 0xec
   25bbc:	bl	14214 <__assert_fail@plt+0x2d1c>
   25bc0:	mov	r0, #0
   25bc4:	bl	14214 <__assert_fail@plt+0x2d1c>
   25bc8:	ldr	r7, [sp, #240]	; 0xf0
   25bcc:	ldr	r3, [sp, #56]	; 0x38
   25bd0:	cmp	r3, #0
   25bd4:	beq	25580 <__assert_fail@plt+0x14088>
   25bd8:	cmp	r3, #1
   25bdc:	bls	25c00 <__assert_fail@plt+0x14708>
   25be0:	sub	r3, r3, #-536870911	; 0xe0000001
   25be4:	ldr	r2, [sp, #468]	; 0x1d4
   25be8:	mvn	r1, #0
   25bec:	add	r3, r2, r3, lsl #3
   25bf0:	str	r1, [r2, #12]
   25bf4:	str	r1, [r2, #8]!
   25bf8:	cmp	r3, r2
   25bfc:	bne	25bf0 <__assert_fail@plt+0x146f8>
   25c00:	ldr	r3, [sp, #44]	; 0x2c
   25c04:	ldr	r1, [sp, #468]	; 0x1d4
   25c08:	ldr	r2, [sp, #232]	; 0xe8
   25c0c:	ldrb	r3, [r3, #28]
   25c10:	str	r2, [r1, #4]
   25c14:	ldr	r2, [sp, #56]	; 0x38
   25c18:	mov	r4, #0
   25c1c:	lsr	r3, r3, #4
   25c20:	eor	r3, r3, #1
   25c24:	cmp	r2, #1
   25c28:	moveq	r3, #0
   25c2c:	andne	r3, r3, #1
   25c30:	cmp	r3, #0
   25c34:	mov	r3, r1
   25c38:	moveq	r3, r2
   25c3c:	str	r4, [r1]
   25c40:	lsleq	r9, r3, #3
   25c44:	beq	2678c <__assert_fail@plt+0x15294>
   25c48:	ldr	r2, [sp, #28]
   25c4c:	ldrb	r3, [r2, #88]	; 0x58
   25c50:	tst	r3, #1
   25c54:	beq	26e74 <__assert_fail@plt+0x1597c>
   25c58:	ldr	r3, [r2, #76]	; 0x4c
   25c5c:	cmp	r3, #0
   25c60:	ble	26e74 <__assert_fail@plt+0x1597c>
   25c64:	ldr	r1, [sp, #44]	; 0x2c
   25c68:	mov	r2, #2
   25c6c:	mov	r3, #16
   25c70:	ldr	r1, [r1]
   25c74:	add	r8, sp, #288	; 0x120
   25c78:	mov	r0, #48	; 0x30
   25c7c:	str	r1, [sp, #20]
   25c80:	str	r4, [sp, #128]	; 0x80
   25c84:	str	r4, [sp, #276]	; 0x114
   25c88:	str	r2, [sp, #132]	; 0x84
   25c8c:	str	r3, [sp, #280]	; 0x118
   25c90:	str	r8, [sp, #284]	; 0x11c
   25c94:	bl	2a790 <__assert_fail@plt+0x19298>
   25c98:	cmp	r0, #0
   25c9c:	str	r0, [sp, #136]	; 0x88
   25ca0:	beq	26e68 <__assert_fail@plt+0x15970>
   25ca4:	ldr	r3, [sp, #276]	; 0x114
   25ca8:	ldr	r1, [sp, #56]	; 0x38
   25cac:	add	r2, sp, #116	; 0x74
   25cb0:	cmp	r1, r3
   25cb4:	ldr	r3, [sp, #20]
   25cb8:	str	r2, [sp, #16]
   25cbc:	addls	sl, sp, #128	; 0x80
   25cc0:	ldr	fp, [r3, #72]	; 0x48
   25cc4:	movls	r3, r1
   25cc8:	str	r4, [sp, #116]	; 0x74
   25ccc:	str	r4, [sp, #120]	; 0x78
   25cd0:	str	r4, [sp, #124]	; 0x7c
   25cd4:	strls	r3, [sp, #276]	; 0x114
   25cd8:	bhi	27060 <__assert_fail@plt+0x15b68>
   25cdc:	ldr	r5, [sp, #56]	; 0x38
   25ce0:	ldr	r3, [sp, #284]	; 0x11c
   25ce4:	ldr	r1, [sp, #468]	; 0x1d4
   25ce8:	lsl	r9, r5, #3
   25cec:	mov	r0, r3
   25cf0:	mov	r2, r9
   25cf4:	mov	r4, r3
   25cf8:	bl	11234 <memcpy@plt>
   25cfc:	lsl	r3, r5, #4
   25d00:	str	r3, [sp, #32]
   25d04:	ldr	r3, [sp, #468]	; 0x1d4
   25d08:	str	r8, [sp, #12]
   25d0c:	mov	r5, r3
   25d10:	ldr	r7, [r3]
   25d14:	mov	r8, r4
   25d18:	ldr	r2, [r5, #4]
   25d1c:	cmp	r2, r7
   25d20:	blt	26ff0 <__assert_fail@plt+0x15af8>
   25d24:	ldr	r3, [sp, #20]
   25d28:	lsl	r6, fp, #3
   25d2c:	str	fp, [sp, #24]
   25d30:	ldr	r0, [r3]
   25d34:	add	r1, r0, r6
   25d38:	ldrb	r3, [r1, #4]
   25d3c:	cmp	r3, #8
   25d40:	beq	27068 <__assert_fail@plt+0x15b70>
   25d44:	cmp	r3, #9
   25d48:	beq	26db4 <__assert_fail@plt+0x158bc>
   25d4c:	cmp	r7, r2
   25d50:	beq	26700 <__assert_fail@plt+0x15208>
   25d54:	cmp	sl, #0
   25d58:	beq	25dc0 <__assert_fail@plt+0x148c8>
   25d5c:	ldr	r3, [sp, #120]	; 0x78
   25d60:	cmp	r3, #0
   25d64:	ble	25dc0 <__assert_fail@plt+0x148c8>
   25d68:	ldr	r0, [sp, #124]	; 0x7c
   25d6c:	sub	ip, r3, #1
   25d70:	mov	r1, #0
   25d74:	cmp	r1, ip
   25d78:	bcs	25db4 <__assert_fail@plt+0x148bc>
   25d7c:	add	r3, r1, ip
   25d80:	lsr	r3, r3, #1
   25d84:	ldr	r2, [r0, r3, lsl #2]
   25d88:	cmp	fp, r2
   25d8c:	ble	25da4 <__assert_fail@plt+0x148ac>
   25d90:	b	2652c <__assert_fail@plt+0x15034>
   25d94:	ldr	ip, [r0, r2, lsl #2]
   25d98:	cmp	fp, ip
   25d9c:	bgt	26534 <__assert_fail@plt+0x1503c>
   25da0:	mov	r3, r2
   25da4:	add	r2, r1, r3
   25da8:	cmp	r1, r3
   25dac:	lsr	r2, r2, #1
   25db0:	bcc	25d94 <__assert_fail@plt+0x1489c>
   25db4:	ldr	r3, [r0, r1, lsl #2]
   25db8:	cmp	fp, r3
   25dbc:	beq	268e4 <__assert_fail@plt+0x153ec>
   25dc0:	ldr	r4, [sp, #224]	; 0xe0
   25dc4:	ldr	r0, [r4]
   25dc8:	add	r3, r0, r6
   25dcc:	ldrb	r2, [r3, #4]
   25dd0:	tst	r2, #8
   25dd4:	beq	26994 <__assert_fail@plt+0x1549c>
   25dd8:	ldr	r1, [sp, #240]	; 0xf0
   25ddc:	add	r3, fp, fp, lsl #1
   25de0:	ldr	r4, [r4, #20]
   25de4:	ldr	r2, [sp, #120]	; 0x78
   25de8:	add	r4, r4, r3, lsl #2
   25dec:	ldr	r3, [r1, r7, lsl #2]
   25df0:	cmp	r2, #0
   25df4:	str	r3, [sp, #24]
   25df8:	ble	26594 <__assert_fail@plt+0x1509c>
   25dfc:	ldr	r0, [sp, #124]	; 0x7c
   25e00:	sub	r2, r2, #1
   25e04:	mov	r1, #0
   25e08:	cmp	r1, r2
   25e0c:	bcs	26588 <__assert_fail@plt+0x15090>
   25e10:	add	r3, r1, r2
   25e14:	lsr	r3, r3, #1
   25e18:	b	25e30 <__assert_fail@plt+0x14938>
   25e1c:	add	ip, r1, r3
   25e20:	cmp	r1, r3
   25e24:	mov	r2, r3
   25e28:	lsr	r3, ip, #1
   25e2c:	bcs	26588 <__assert_fail@plt+0x15090>
   25e30:	ldr	ip, [r0, r3, lsl #2]
   25e34:	cmp	fp, ip
   25e38:	ble	25e1c <__assert_fail@plt+0x14924>
   25e3c:	add	r1, r3, #1
   25e40:	b	25e08 <__assert_fail@plt+0x14910>
   25e44:	ldr	r3, [sp, #52]	; 0x34
   25e48:	cmp	r3, r5
   25e4c:	ble	2525c <__assert_fail@plt+0x13d64>
   25e50:	ldr	r3, [sp, #60]	; 0x3c
   25e54:	ldr	r1, [sp, #80]	; 0x50
   25e58:	ldrb	r2, [r3, r5]
   25e5c:	add	r3, r3, r5
   25e60:	ldrb	r2, [r1, r2]
   25e64:	ldr	r1, [sp, #64]	; 0x40
   25e68:	ldrb	r2, [r1, r2]
   25e6c:	cmp	r2, #0
   25e70:	bne	252a0 <__assert_fail@plt+0x13da8>
   25e74:	mov	ip, r1
   25e78:	add	r2, r5, #1
   25e7c:	ldr	lr, [sp, #80]	; 0x50
   25e80:	ldr	r0, [sp, #52]	; 0x34
   25e84:	b	25ea0 <__assert_fail@plt+0x149a8>
   25e88:	ldrb	r1, [r3, #1]!
   25e8c:	add	r2, r2, #1
   25e90:	ldrb	r1, [lr, r1]
   25e94:	ldrb	r1, [ip, r1]
   25e98:	cmp	r1, #0
   25e9c:	bne	26138 <__assert_fail@plt+0x14c40>
   25ea0:	cmp	r0, r2
   25ea4:	mov	r5, r2
   25ea8:	bne	25e88 <__assert_fail@plt+0x14990>
   25eac:	b	25254 <__assert_fail@plt+0x13d5c>
   25eb0:	ldr	r3, [sp, #68]	; 0x44
   25eb4:	cmp	r3, r5
   25eb8:	bgt	2552c <__assert_fail@plt+0x14034>
   25ebc:	ldr	r3, [sp, #80]	; 0x50
   25ec0:	ldr	r2, [sp, #112]	; 0x70
   25ec4:	cmp	r3, #0
   25ec8:	beq	262fc <__assert_fail@plt+0x14e04>
   25ecc:	mov	ip, r3
   25ed0:	ldr	r1, [sp, #108]	; 0x6c
   25ed4:	ldr	r0, [sp, #64]	; 0x40
   25ed8:	ldr	r4, [sp, #68]	; 0x44
   25edc:	ldr	r6, [sp, #60]	; 0x3c
   25ee0:	ldr	lr, [sp, #72]	; 0x48
   25ee4:	b	25efc <__assert_fail@plt+0x14a04>
   25ee8:	sub	r5, r5, #1
   25eec:	cmp	r4, r5
   25ef0:	mov	r2, r5
   25ef4:	mov	r1, #1
   25ef8:	bgt	261d0 <__assert_fail@plt+0x14cd8>
   25efc:	cmp	lr, r5
   25f00:	mov	r3, #0
   25f04:	ldrbgt	r3, [r6, r5]
   25f08:	ldrb	r3, [ip, r3]
   25f0c:	ldrb	r3, [r0, r3]
   25f10:	cmp	r3, #0
   25f14:	beq	25ee8 <__assert_fail@plt+0x149f0>
   25f18:	cmp	r1, #0
   25f1c:	strne	r2, [sp, #112]	; 0x70
   25f20:	b	252a0 <__assert_fail@plt+0x13da8>
   25f24:	ldr	r3, [sp, #28]
   25f28:	ldr	r4, [r3, #76]	; 0x4c
   25f2c:	cmp	r4, #0
   25f30:	bne	256c4 <__assert_fail@plt+0x141cc>
   25f34:	b	25bcc <__assert_fail@plt+0x146d4>
   25f38:	ldr	r1, [sp, #72]	; 0x48
   25f3c:	b	25014 <__assert_fail@plt+0x13b1c>
   25f40:	mov	sl, #0
   25f44:	ldr	r0, [sp, #12]
   25f48:	bl	14214 <__assert_fail@plt+0x2d1c>
   25f4c:	mov	r0, sl
   25f50:	bl	14214 <__assert_fail@plt+0x2d1c>
   25f54:	cmp	r7, #1
   25f58:	beq	25460 <__assert_fail@plt+0x13f68>
   25f5c:	str	r7, [sp, #48]	; 0x30
   25f60:	ldr	r7, [sp, #240]	; 0xf0
   25f64:	b	25580 <__assert_fail@plt+0x14088>
   25f68:	ldr	r1, [sp, #164]	; 0xa4
   25f6c:	ldr	r4, [sp, #64]	; 0x40
   25f70:	ldr	r6, [sp, #92]	; 0x5c
   25f74:	ldr	r7, [sp, #68]	; 0x44
   25f78:	ldr	r8, [sp, #52]	; 0x34
   25f7c:	b	25fc4 <__assert_fail@plt+0x14acc>
   25f80:	ldr	r0, [sp, #168]	; 0xa8
   25f84:	mov	r2, #0
   25f88:	cmp	r3, r0
   25f8c:	ldrcc	r2, [sp, #144]	; 0x90
   25f90:	ldrbcc	r2, [r2, r3]
   25f94:	ldrb	r3, [r4, r2]
   25f98:	cmp	r3, #0
   25f9c:	bne	252a0 <__assert_fail@plt+0x13da8>
   25fa0:	add	r5, r5, r6
   25fa4:	cmp	r8, r5
   25fa8:	movge	r3, #0
   25fac:	movlt	r3, #1
   25fb0:	cmp	r7, r5
   25fb4:	orrgt	r3, r3, #1
   25fb8:	cmp	r3, #0
   25fbc:	str	r5, [sp, #112]	; 0x70
   25fc0:	bne	2552c <__assert_fail@plt+0x14034>
   25fc4:	ldr	r2, [sp, #172]	; 0xac
   25fc8:	sub	r3, r5, r1
   25fcc:	cmp	r3, r2
   25fd0:	bcc	25f80 <__assert_fail@plt+0x14a88>
   25fd4:	ldr	r2, [sp, #472]	; 0x1d8
   25fd8:	mov	r1, r5
   25fdc:	add	r0, sp, #140	; 0x8c
   25fe0:	bl	19c4c <__assert_fail@plt+0x8754>
   25fe4:	cmp	r0, #0
   25fe8:	bne	2634c <__assert_fail@plt+0x14e54>
   25fec:	ldr	r1, [sp, #164]	; 0xa4
   25ff0:	sub	r3, r5, r1
   25ff4:	b	25f80 <__assert_fail@plt+0x14a88>
   25ff8:	mov	r3, r2
   25ffc:	sub	r1, r3, #1
   26000:	ldr	r2, [sp, #228]	; 0xe4
   26004:	add	r0, sp, #140	; 0x8c
   26008:	bl	19b60 <__assert_fail@plt+0x8668>
   2600c:	tst	r0, #1
   26010:	beq	2617c <__assert_fail@plt+0x14c84>
   26014:	ldr	fp, [r4, #40]	; 0x28
   26018:	b	25314 <__assert_fail@plt+0x13e1c>
   2601c:	mov	r7, #1
   26020:	b	25f44 <__assert_fail@plt+0x14a4c>
   26024:	beq	fead0ad4 <opterr@@GLIBC_2.4+0xfea9392c>
   26028:	andeq	pc, r3, r0, lsl #30
   2602c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   26030:	ldr	r3, [sp, #264]	; 0x108
   26034:	cmp	r3, #0
   26038:	movgt	r7, #0
   2603c:	ble	260bc <__assert_fail@plt+0x14bc4>
   26040:	ldr	r3, [sp, #272]	; 0x110
   26044:	ldr	r6, [r3, r7, lsl #2]
   26048:	ldr	r3, [r6, #16]
   2604c:	cmp	r3, #0
   26050:	movgt	r4, #0
   26054:	ble	26080 <__assert_fail@plt+0x14b88>
   26058:	ldr	r3, [r6, #20]
   2605c:	ldr	r5, [r3, r4, lsl #2]
   26060:	add	r4, r4, #1
   26064:	ldr	r0, [r5, #16]
   26068:	bl	14214 <__assert_fail@plt+0x2d1c>
   2606c:	mov	r0, r5
   26070:	bl	14214 <__assert_fail@plt+0x2d1c>
   26074:	ldr	r3, [r6, #16]
   26078:	cmp	r4, r3
   2607c:	blt	26058 <__assert_fail@plt+0x14b60>
   26080:	ldr	r0, [r6, #20]
   26084:	bl	14214 <__assert_fail@plt+0x2d1c>
   26088:	ldr	r3, [r6, #8]
   2608c:	cmp	r3, #0
   26090:	beq	260a4 <__assert_fail@plt+0x14bac>
   26094:	ldr	r0, [r3, #8]
   26098:	bl	14214 <__assert_fail@plt+0x2d1c>
   2609c:	ldr	r0, [r6, #8]
   260a0:	bl	14214 <__assert_fail@plt+0x2d1c>
   260a4:	mov	r0, r6
   260a8:	bl	14214 <__assert_fail@plt+0x2d1c>
   260ac:	ldr	r3, [sp, #264]	; 0x108
   260b0:	add	r7, r7, #1
   260b4:	cmp	r7, r3
   260b8:	blt	26040 <__assert_fail@plt+0x14b48>
   260bc:	mov	r3, #0
   260c0:	ldr	r0, [sp, #272]	; 0x110
   260c4:	str	r3, [sp, #264]	; 0x108
   260c8:	str	r3, [sp, #248]	; 0xf8
   260cc:	bl	14214 <__assert_fail@plt+0x2d1c>
   260d0:	ldr	r0, [sp, #256]	; 0x100
   260d4:	bl	14214 <__assert_fail@plt+0x2d1c>
   260d8:	b	25598 <__assert_fail@plt+0x140a0>
   260dc:	mov	r1, r6
   260e0:	ldr	r0, [sp, #144]	; 0x90
   260e4:	bl	2a7bc <__assert_fail@plt+0x192c4>
   260e8:	cmp	r0, #0
   260ec:	beq	25574 <__assert_fail@plt+0x1407c>
   260f0:	ldr	r1, [sp, #28]
   260f4:	ldrb	r2, [sp, #215]	; 0xd7
   260f8:	str	r0, [sp, #144]	; 0x90
   260fc:	ldrb	r3, [r1, #88]	; 0x58
   26100:	cmp	r2, #0
   26104:	add	r2, r1, #96	; 0x60
   26108:	str	r6, [sp, #176]	; 0xb0
   2610c:	lsr	r3, r3, #4
   26110:	and	r3, r3, #1
   26114:	strb	r3, [sp, #218]	; 0xda
   26118:	str	r2, [sp, #208]	; 0xd0
   2611c:	bne	25010 <__assert_fail@plt+0x13b18>
   26120:	b	24ff8 <__assert_fail@plt+0x13b00>
   26124:	ldr	r3, [sp, #28]
   26128:	ldrb	r3, [r3, #88]	; 0x58
   2612c:	tst	r3, #2
   26130:	bne	250b0 <__assert_fail@plt+0x13bb8>
   26134:	b	250d4 <__assert_fail@plt+0x13bdc>
   26138:	str	r5, [sp, #112]	; 0x70
   2613c:	b	252a0 <__assert_fail@plt+0x13da8>
   26140:	mov	r1, fp
   26144:	ldr	r0, [sp, #224]	; 0xe0
   26148:	bl	22960 <__assert_fail@plt+0x11468>
   2614c:	cmp	r0, #0
   26150:	bne	253b4 <__assert_fail@plt+0x13ebc>
   26154:	ldr	r7, [sp, #240]	; 0xf0
   26158:	mov	r3, #12
   2615c:	cmp	r7, #0
   26160:	str	r3, [sp, #116]	; 0x74
   26164:	bne	25b34 <__assert_fail@plt+0x1463c>
   26168:	b	25b40 <__assert_fail@plt+0x14648>
   2616c:	ldr	r3, [sp, #104]	; 0x68
   26170:	str	r3, [sp, #16]
   26174:	ldrb	r3, [fp, #52]	; 0x34
   26178:	b	25340 <__assert_fail@plt+0x13e48>
   2617c:	cmp	r0, #0
   26180:	beq	25314 <__assert_fail@plt+0x13e1c>
   26184:	and	r3, r0, #6
   26188:	cmp	r3, #6
   2618c:	ldreq	fp, [r4, #48]	; 0x30
   26190:	beq	25314 <__assert_fail@plt+0x13e1c>
   26194:	tst	r0, #2
   26198:	beq	25550 <__assert_fail@plt+0x14058>
   2619c:	ldr	fp, [r4, #44]	; 0x2c
   261a0:	b	25314 <__assert_fail@plt+0x13e1c>
   261a4:	ldr	r0, [sp, #124]	; 0x7c
   261a8:	ldr	r8, [sp, #12]
   261ac:	bl	14214 <__assert_fail@plt+0x2d1c>
   261b0:	ldr	r0, [sp, #284]	; 0x11c
   261b4:	cmp	r0, r8
   261b8:	beq	261c0 <__assert_fail@plt+0x14cc8>
   261bc:	bl	14214 <__assert_fail@plt+0x2d1c>
   261c0:	mov	r3, #1
   261c4:	str	r3, [sp, #48]	; 0x30
   261c8:	ldr	r7, [sp, #240]	; 0xf0
   261cc:	b	25580 <__assert_fail@plt+0x14088>
   261d0:	str	r5, [sp, #112]	; 0x70
   261d4:	b	2552c <__assert_fail@plt+0x14034>
   261d8:	ldrsb	r3, [fp, #52]	; 0x34
   261dc:	cmp	r3, #0
   261e0:	blt	26298 <__assert_fail@plt+0x14da0>
   261e4:	ldr	r3, [sp, #36]	; 0x24
   261e8:	cmp	r3, #0
   261ec:	ldr	r3, [sp, #12]
   261f0:	str	r3, [sp, #20]
   261f4:	movne	r3, #1
   261f8:	strne	r3, [sp, #40]	; 0x28
   261fc:	bne	25358 <__assert_fail@plt+0x13e60>
   26200:	b	25654 <__assert_fail@plt+0x1415c>
   26204:	ldr	r7, [sp, #240]	; 0xf0
   26208:	b	25b40 <__assert_fail@plt+0x14648>
   2620c:	add	r4, fp, #8
   26210:	add	r5, fp, #12
   26214:	mov	r1, r4
   26218:	mov	r2, r5
   2621c:	mov	r3, #0
   26220:	add	r0, sp, #140	; 0x8c
   26224:	bl	1a7f8 <__assert_fail@plt+0x9300>
   26228:	cmp	r0, #0
   2622c:	str	r0, [sp, #116]	; 0x74
   26230:	bne	262d4 <__assert_fail@plt+0x14ddc>
   26234:	ldrb	r3, [fp, #52]	; 0x34
   26238:	tst	r3, #64	; 0x40
   2623c:	bne	262b4 <__assert_fail@plt+0x14dbc>
   26240:	ldr	r2, [sp, #108]	; 0x6c
   26244:	str	r2, [sp, #16]
   26248:	b	25340 <__assert_fail@plt+0x13e48>
   2624c:	mov	fp, r3
   26250:	bl	14214 <__assert_fail@plt+0x2d1c>
   26254:	mov	r0, fp
   26258:	bl	14214 <__assert_fail@plt+0x2d1c>
   2625c:	mov	r3, #12
   26260:	str	r3, [sp, #48]	; 0x30
   26264:	ldr	r7, [sp, #240]	; 0xf0
   26268:	b	25580 <__assert_fail@plt+0x14088>
   2626c:	mov	r3, #8
   26270:	b	25170 <__assert_fail@plt+0x13c78>
   26274:	ldr	fp, [sp, #12]
   26278:	mov	r0, fp
   2627c:	bl	14214 <__assert_fail@plt+0x2d1c>
   26280:	mov	r0, sl
   26284:	bl	14214 <__assert_fail@plt+0x2d1c>
   26288:	mov	r3, #12
   2628c:	str	r3, [sp, #48]	; 0x30
   26290:	ldr	r7, [sp, #240]	; 0xf0
   26294:	b	25580 <__assert_fail@plt+0x14088>
   26298:	ldr	r2, [sp, #12]
   2629c:	mov	r1, fp
   262a0:	add	r0, sp, #140	; 0x8c
   262a4:	bl	1a4ec <__assert_fail@plt+0x8ff4>
   262a8:	cmp	r0, #0
   262ac:	beq	25348 <__assert_fail@plt+0x13e50>
   262b0:	b	261e4 <__assert_fail@plt+0x14cec>
   262b4:	mov	r2, r5
   262b8:	mov	r1, r4
   262bc:	add	r0, sp, #140	; 0x8c
   262c0:	bl	24408 <__assert_fail@plt+0x12f10>
   262c4:	cmp	r0, #0
   262c8:	str	r0, [sp, #116]	; 0x74
   262cc:	ldrbeq	r3, [fp, #52]	; 0x34
   262d0:	beq	26240 <__assert_fail@plt+0x14d48>
   262d4:	str	r0, [sp, #20]
   262d8:	b	25654 <__assert_fail@plt+0x1415c>
   262dc:	cmp	r0, #0
   262e0:	mov	r4, r0
   262e4:	bne	253ec <__assert_fail@plt+0x13ef4>
   262e8:	b	25634 <__assert_fail@plt+0x1413c>
   262ec:	mov	r3, #12
   262f0:	mov	r7, #0
   262f4:	str	r3, [sp, #48]	; 0x30
   262f8:	b	25580 <__assert_fail@plt+0x14088>
   262fc:	ldr	r1, [sp, #108]	; 0x6c
   26300:	ldr	r0, [sp, #64]	; 0x40
   26304:	ldr	lr, [sp, #68]	; 0x44
   26308:	ldr	r4, [sp, #60]	; 0x3c
   2630c:	ldr	ip, [sp, #72]	; 0x48
   26310:	b	26328 <__assert_fail@plt+0x14e30>
   26314:	sub	r5, r5, #1
   26318:	cmp	lr, r5
   2631c:	mov	r2, r5
   26320:	mov	r1, #1
   26324:	bgt	261d0 <__assert_fail@plt+0x14cd8>
   26328:	cmp	ip, r5
   2632c:	mov	r3, #0
   26330:	ldrbgt	r3, [r4, r5]
   26334:	ldrb	r3, [r0, r3]
   26338:	cmp	r3, #0
   2633c:	beq	26314 <__assert_fail@plt+0x14e1c>
   26340:	b	25f18 <__assert_fail@plt+0x14a20>
   26344:	mov	r4, r0
   26348:	b	253ec <__assert_fail@plt+0x13ef4>
   2634c:	str	r0, [sp, #48]	; 0x30
   26350:	ldr	r7, [sp, #240]	; 0xf0
   26354:	b	25580 <__assert_fail@plt+0x14088>
   26358:	ldr	r3, [sp, #12]
   2635c:	str	r9, [sp, #32]
   26360:	mov	fp, r3
   26364:	mov	r9, sl
   26368:	add	r2, r3, r4
   2636c:	str	r6, [sp, #20]
   26370:	str	r2, [sp, #24]
   26374:	str	sl, [sp, #16]
   26378:	ldr	r6, [fp]
   2637c:	cmp	r6, #0
   26380:	beq	26520 <__assert_fail@plt+0x15028>
   26384:	ldr	r5, [r9]
   26388:	cmp	r5, #0
   2638c:	beq	26468 <__assert_fail@plt+0x14f70>
   26390:	ldr	r3, [r6, #8]
   26394:	cmp	r3, #0
   26398:	ble	26494 <__assert_fail@plt+0x14f9c>
   2639c:	ldr	r2, [r5, #8]
   263a0:	cmp	r2, #0
   263a4:	ble	264d4 <__assert_fail@plt+0x14fdc>
   263a8:	add	r3, r3, r2
   263ac:	str	r3, [sp, #128]	; 0x80
   263b0:	lsl	r0, r3, #2
   263b4:	bl	2a790 <__assert_fail@plt+0x19298>
   263b8:	cmp	r0, #0
   263bc:	str	r0, [sp, #136]	; 0x88
   263c0:	beq	26e18 <__assert_fail@plt+0x15920>
   263c4:	mov	r4, #0
   263c8:	mov	r7, r4
   263cc:	mov	ip, r0
   263d0:	mov	r1, #1
   263d4:	b	26418 <__assert_fail@plt+0x14f20>
   263d8:	ldr	r3, [r5, #8]
   263dc:	cmp	r4, r3
   263e0:	bge	26540 <__assert_fail@plt+0x15048>
   263e4:	ldr	r3, [r6, #12]
   263e8:	ldr	r2, [r5, #12]
   263ec:	ldr	r3, [r3, r7, lsl #2]
   263f0:	ldr	r2, [r2, r4, lsl #2]
   263f4:	cmp	r3, r2
   263f8:	addgt	r4, r4, #1
   263fc:	strgt	r2, [ip]
   26400:	bgt	26410 <__assert_fail@plt+0x14f18>
   26404:	add	r7, r7, #1
   26408:	addeq	r4, r4, #1
   2640c:	str	r3, [ip]
   26410:	add	r1, r1, #1
   26414:	add	ip, ip, #4
   26418:	ldr	r2, [r6, #8]
   2641c:	sub	sl, r1, #1
   26420:	cmp	r7, r2
   26424:	blt	263d8 <__assert_fail@plt+0x14ee0>
   26428:	ldr	r2, [r5, #8]
   2642c:	cmp	r4, r2
   26430:	blt	26e40 <__assert_fail@plt+0x15948>
   26434:	add	r2, sp, #128	; 0x80
   26438:	str	sl, [sp, #132]	; 0x84
   2643c:	mov	r3, #0
   26440:	mov	r1, r8
   26444:	add	r0, sp, #116	; 0x74
   26448:	str	r3, [sp, #116]	; 0x74
   2644c:	bl	1e3c8 <__assert_fail@plt+0xced0>
   26450:	str	r0, [fp]
   26454:	ldr	r0, [sp, #136]	; 0x88
   26458:	bl	14214 <__assert_fail@plt+0x2d1c>
   2645c:	ldr	r7, [sp, #116]	; 0x74
   26460:	cmp	r7, #0
   26464:	bne	26568 <__assert_fail@plt+0x15070>
   26468:	ldr	r3, [sp, #24]
   2646c:	add	fp, fp, #4
   26470:	cmp	r3, fp
   26474:	add	r9, r9, #4
   26478:	bne	26378 <__assert_fail@plt+0x14e80>
   2647c:	ldr	sl, [sp, #16]
   26480:	ldr	r9, [sp, #32]
   26484:	mov	r0, sl
   26488:	ldr	fp, [sp, #12]
   2648c:	bl	14214 <__assert_fail@plt+0x2d1c>
   26490:	b	25ba0 <__assert_fail@plt+0x146a8>
   26494:	ldr	r3, [r5, #8]
   26498:	cmp	r3, #0
   2649c:	ble	26508 <__assert_fail@plt+0x15010>
   264a0:	lsl	r0, r3, #2
   264a4:	str	r3, [sp, #132]	; 0x84
   264a8:	str	r3, [sp, #128]	; 0x80
   264ac:	bl	2a790 <__assert_fail@plt+0x19298>
   264b0:	cmp	r0, #0
   264b4:	str	r0, [sp, #136]	; 0x88
   264b8:	beq	26e18 <__assert_fail@plt+0x15920>
   264bc:	ldr	r2, [r5, #8]
   264c0:	ldr	r1, [r5, #12]
   264c4:	lsl	r2, r2, #2
   264c8:	bl	11234 <memcpy@plt>
   264cc:	add	r2, sp, #128	; 0x80
   264d0:	b	2643c <__assert_fail@plt+0x14f44>
   264d4:	lsl	r0, r3, #2
   264d8:	str	r3, [sp, #132]	; 0x84
   264dc:	str	r3, [sp, #128]	; 0x80
   264e0:	bl	2a790 <__assert_fail@plt+0x19298>
   264e4:	cmp	r0, #0
   264e8:	str	r0, [sp, #136]	; 0x88
   264ec:	beq	26e18 <__assert_fail@plt+0x15920>
   264f0:	ldr	r2, [r6, #8]
   264f4:	ldr	r1, [r6, #12]
   264f8:	lsl	r2, r2, #2
   264fc:	bl	11234 <memcpy@plt>
   26500:	add	r2, sp, #128	; 0x80
   26504:	b	2643c <__assert_fail@plt+0x14f44>
   26508:	add	r2, sp, #128	; 0x80
   2650c:	mov	r3, #0
   26510:	str	r3, [sp, #128]	; 0x80
   26514:	str	r3, [r2, #4]
   26518:	str	r3, [r2, #8]
   2651c:	b	2643c <__assert_fail@plt+0x14f44>
   26520:	ldr	r3, [r9]
   26524:	str	r3, [fp]
   26528:	b	26468 <__assert_fail@plt+0x14f70>
   2652c:	mov	r2, r3
   26530:	mov	r3, ip
   26534:	add	r1, r2, #1
   26538:	mov	ip, r3
   2653c:	b	25d74 <__assert_fail@plt+0x1487c>
   26540:	sub	r2, r2, r7
   26544:	ldr	r1, [r6, #12]
   26548:	lsl	r2, r2, #2
   2654c:	add	r0, r0, sl, lsl #2
   26550:	add	r1, r1, r7, lsl #2
   26554:	bl	11234 <memcpy@plt>
   26558:	ldr	r2, [r6, #8]
   2655c:	sub	r7, r2, r7
   26560:	add	sl, sl, r7
   26564:	b	26434 <__assert_fail@plt+0x14f3c>
   26568:	ldr	sl, [sp, #16]
   2656c:	mov	r0, sl
   26570:	bl	14214 <__assert_fail@plt+0x2d1c>
   26574:	ldr	r0, [sp, #12]
   26578:	bl	14214 <__assert_fail@plt+0x2d1c>
   2657c:	mov	r0, #0
   26580:	bl	14214 <__assert_fail@plt+0x2d1c>
   26584:	b	25f54 <__assert_fail@plt+0x14a5c>
   26588:	ldr	r3, [r0, r1, lsl #2]
   2658c:	cmp	fp, r3
   26590:	beq	265a8 <__assert_fail@plt+0x150b0>
   26594:	mov	r1, fp
   26598:	ldr	r0, [sp, #16]
   2659c:	bl	19498 <__assert_fail@plt+0x7fa0>
   265a0:	cmp	r0, #0
   265a4:	beq	26d04 <__assert_fail@plt+0x1580c>
   265a8:	ldr	r6, [r4, #4]
   265ac:	cmp	r6, #0
   265b0:	ble	26664 <__assert_fail@plt+0x1516c>
   265b4:	ldr	r3, [sp, #24]
   265b8:	ldr	r2, [r4, #8]
   265bc:	mvn	fp, #0
   265c0:	ldr	r3, [r3, #8]
   265c4:	mov	lr, #0
   265c8:	str	r3, [sp, #40]	; 0x28
   265cc:	sub	r3, r3, #1
   265d0:	str	r2, [sp, #36]	; 0x24
   265d4:	str	r3, [sp, #44]	; 0x2c
   265d8:	ldr	r3, [sp, #40]	; 0x28
   265dc:	cmp	r3, #0
   265e0:	ble	26648 <__assert_fail@plt+0x15150>
   265e4:	ldr	r3, [sp, #36]	; 0x24
   265e8:	ldr	ip, [sp, #44]	; 0x2c
   265ec:	mov	r1, #0
   265f0:	ldr	r4, [r3, lr, lsl #2]
   265f4:	ldr	r3, [sp, #24]
   265f8:	ldr	r0, [r3, #12]
   265fc:	cmp	r1, ip
   26600:	bcs	2663c <__assert_fail@plt+0x15144>
   26604:	add	r2, r1, ip
   26608:	lsr	r2, r2, #1
   2660c:	ldr	r3, [r0, r2, lsl #2]
   26610:	cmp	r4, r3
   26614:	ble	2662c <__assert_fail@plt+0x15134>
   26618:	b	266dc <__assert_fail@plt+0x151e4>
   2661c:	ldr	ip, [r0, r3, lsl #2]
   26620:	cmp	r4, ip
   26624:	bgt	266e4 <__assert_fail@plt+0x151ec>
   26628:	mov	r2, r3
   2662c:	add	r3, r1, r2
   26630:	cmp	r1, r2
   26634:	lsr	r3, r3, #1
   26638:	bcc	2661c <__assert_fail@plt+0x15124>
   2663c:	ldr	r3, [r0, r1, lsl #2]
   26640:	cmp	r4, r3
   26644:	beq	266f0 <__assert_fail@plt+0x151f8>
   26648:	add	lr, lr, #1
   2664c:	cmp	r6, lr
   26650:	bne	265d8 <__assert_fail@plt+0x150e0>
   26654:	cmp	fp, #0
   26658:	bge	25d18 <__assert_fail@plt+0x14820>
   2665c:	cmn	fp, #2
   26660:	beq	26d04 <__assert_fail@plt+0x1580c>
   26664:	cmp	sl, #0
   26668:	beq	261a4 <__assert_fail@plt+0x14cac>
   2666c:	ldr	r4, [sl]
   26670:	cmp	r4, #0
   26674:	beq	26f54 <__assert_fail@plt+0x15a5c>
   26678:	sub	r3, r4, #1
   2667c:	ldr	ip, [sl, #8]
   26680:	add	lr, r3, r3, lsl #1
   26684:	str	r3, [sl]
   26688:	add	r4, ip, lr, lsl #3
   2668c:	mov	r2, r9
   26690:	ldr	r1, [r4, #8]
   26694:	mov	r0, r5
   26698:	ldr	r7, [ip, lr, lsl #3]
   2669c:	bl	11234 <memcpy@plt>
   266a0:	ldr	r1, [r4, #8]
   266a4:	mov	r2, r9
   266a8:	add	r1, r1, r9
   266ac:	mov	r0, r8
   266b0:	bl	11234 <memcpy@plt>
   266b4:	ldr	r0, [sp, #124]	; 0x7c
   266b8:	bl	14214 <__assert_fail@plt+0x2d1c>
   266bc:	ldr	r0, [r4, #8]
   266c0:	bl	14214 <__assert_fail@plt+0x2d1c>
   266c4:	add	r3, r4, #12
   266c8:	ldr	fp, [r4, #4]
   266cc:	ldm	r3, {r0, r1, r2}
   266d0:	ldr	r3, [sp, #16]
   266d4:	stm	r3, {r0, r1, r2}
   266d8:	b	25d18 <__assert_fail@plt+0x14820>
   266dc:	mov	r3, r2
   266e0:	mov	r2, ip
   266e4:	add	r1, r3, #1
   266e8:	mov	ip, r2
   266ec:	b	265fc <__assert_fail@plt+0x15104>
   266f0:	cmn	fp, #1
   266f4:	bne	26c70 <__assert_fail@plt+0x15778>
   266f8:	mov	fp, r4
   266fc:	b	26648 <__assert_fail@plt+0x15150>
   26700:	ldr	r3, [sp, #236]	; 0xec
   26704:	cmp	fp, r3
   26708:	bne	25d54 <__assert_fail@plt+0x1485c>
   2670c:	cmp	sl, #0
   26710:	bne	268e4 <__assert_fail@plt+0x153ec>
   26714:	ldr	r0, [sp, #124]	; 0x7c
   26718:	ldr	r8, [sp, #12]
   2671c:	bl	14214 <__assert_fail@plt+0x2d1c>
   26720:	ldr	r0, [sp, #284]	; 0x11c
   26724:	cmp	r0, r8
   26728:	beq	26788 <__assert_fail@plt+0x15290>
   2672c:	bl	14214 <__assert_fail@plt+0x2d1c>
   26730:	mov	r4, #0
   26734:	mov	r3, #16
   26738:	cmp	sl, #0
   2673c:	str	r8, [sp, #284]	; 0x11c
   26740:	str	r4, [sp, #276]	; 0x114
   26744:	str	r3, [sp, #280]	; 0x118
   26748:	beq	26788 <__assert_fail@plt+0x15290>
   2674c:	ldr	r6, [sl]
   26750:	ldr	r7, [sl, #8]
   26754:	cmp	r6, r4
   26758:	ble	26780 <__assert_fail@plt+0x15288>
   2675c:	mov	r5, r7
   26760:	ldr	r0, [r5, #20]
   26764:	bl	14214 <__assert_fail@plt+0x2d1c>
   26768:	add	r4, r4, #1
   2676c:	ldr	r0, [r5, #8]
   26770:	bl	14214 <__assert_fail@plt+0x2d1c>
   26774:	cmp	r6, r4
   26778:	add	r5, r5, #24
   2677c:	bne	26760 <__assert_fail@plt+0x15268>
   26780:	mov	r0, r7
   26784:	bl	14214 <__assert_fail@plt+0x2d1c>
   26788:	ldr	r7, [sp, #240]	; 0xf0
   2678c:	ldrb	r3, [sp, #216]	; 0xd8
   26790:	ldr	r2, [sp, #468]	; 0x1d4
   26794:	ldr	r5, [sp, #168]	; 0xa8
   26798:	cmp	r3, #0
   2679c:	movne	r1, r2
   267a0:	mov	r3, r2
   267a4:	ldr	r4, [sp, #152]	; 0x98
   267a8:	ldr	lr, [sp, #172]	; 0xac
   267ac:	ldr	r0, [sp, #112]	; 0x70
   267b0:	addne	r3, r2, #4
   267b4:	addne	r6, r1, r9
   267b8:	bne	26894 <__assert_fail@plt+0x1539c>
   267bc:	add	r1, r3, #4
   267c0:	add	ip, r3, r9
   267c4:	ldr	r3, [r1, #-4]
   267c8:	add	r2, r2, #8
   267cc:	cmn	r3, #1
   267d0:	add	r3, r0, r3
   267d4:	ldrne	lr, [r2, #-4]
   267d8:	strne	r3, [r1, #-4]
   267dc:	addne	r3, r0, lr
   267e0:	strne	r3, [r2, #-4]
   267e4:	cmp	ip, r2
   267e8:	add	r1, r1, #8
   267ec:	bne	267c4 <__assert_fail@plt+0x152cc>
   267f0:	ldr	r3, [sp, #96]	; 0x60
   267f4:	cmp	r3, #0
   267f8:	ble	2682c <__assert_fail@plt+0x15334>
   267fc:	ldr	r2, [sp, #56]	; 0x38
   26800:	ldr	r1, [sp, #468]	; 0x1d4
   26804:	add	r2, r3, r2
   26808:	ldr	r3, [sp, #468]	; 0x1d4
   2680c:	add	r2, r1, r2, lsl #3
   26810:	add	r3, r3, r9
   26814:	mvn	r1, #0
   26818:	str	r1, [r3]
   2681c:	str	r1, [r3, #4]
   26820:	add	r3, r3, #8
   26824:	cmp	r3, r2
   26828:	bne	26818 <__assert_fail@plt+0x15320>
   2682c:	ldr	r3, [sp, #28]
   26830:	ldr	r3, [r3, #132]	; 0x84
   26834:	cmp	r3, #0
   26838:	beq	25580 <__assert_fail@plt+0x14088>
   2683c:	ldr	r0, [sp, #468]	; 0x1d4
   26840:	mov	ip, #0
   26844:	mov	lr, r0
   26848:	b	26880 <__assert_fail@plt+0x15388>
   2684c:	ldr	r1, [r3]
   26850:	cmp	ip, r1
   26854:	add	r4, r1, #1
   26858:	mov	ip, r2
   2685c:	beq	26878 <__assert_fail@plt+0x15380>
   26860:	ldr	r2, [lr, r4, lsl #3]
   26864:	str	r2, [r0, #8]
   26868:	ldr	r2, [r3]
   2686c:	add	r2, lr, r2, lsl #3
   26870:	ldr	r2, [r2, #12]
   26874:	str	r2, [r0, #12]
   26878:	add	r3, r3, #4
   2687c:	add	r0, r0, #8
   26880:	ldr	r1, [sp, #56]	; 0x38
   26884:	add	r2, ip, #1
   26888:	cmp	r2, r1
   2688c:	bne	2684c <__assert_fail@plt+0x15354>
   26890:	b	25580 <__assert_fail@plt+0x14088>
   26894:	ldr	r1, [r3, #-4]
   26898:	cmn	r1, #1
   2689c:	beq	268d0 <__assert_fail@plt+0x153d8>
   268a0:	cmp	r1, r5
   268a4:	moveq	r1, lr
   268a8:	ldrne	r1, [r4, r1, lsl #2]
   268ac:	str	r1, [r3, #-4]
   268b0:	ldr	ip, [r2, #4]
   268b4:	add	r1, r1, r0
   268b8:	cmp	r5, ip
   268bc:	moveq	ip, lr
   268c0:	ldrne	ip, [r4, ip, lsl #2]
   268c4:	str	r1, [r3, #-4]
   268c8:	add	ip, ip, r0
   268cc:	str	ip, [r2, #4]
   268d0:	add	r2, r2, #8
   268d4:	cmp	r2, r6
   268d8:	add	r3, r3, #8
   268dc:	bne	26894 <__assert_fail@plt+0x1539c>
   268e0:	b	267f0 <__assert_fail@plt+0x152f8>
   268e4:	mov	r2, r5
   268e8:	mov	r3, #0
   268ec:	b	26900 <__assert_fail@plt+0x15408>
   268f0:	ldr	r1, [sp, #56]	; 0x38
   268f4:	add	r2, r2, #8
   268f8:	cmp	r1, r3
   268fc:	beq	26fd4 <__assert_fail@plt+0x15adc>
   26900:	ldr	r1, [r5, r3, lsl #3]
   26904:	add	r3, r3, #1
   26908:	cmp	r1, #0
   2690c:	blt	268f0 <__assert_fail@plt+0x153f8>
   26910:	ldr	r1, [r2, #4]
   26914:	cmn	r1, #1
   26918:	bne	268f0 <__assert_fail@plt+0x153f8>
   2691c:	ldr	r3, [sl]
   26920:	cmp	r3, #0
   26924:	beq	26fd4 <__assert_fail@plt+0x15adc>
   26928:	sub	r3, r3, #1
   2692c:	ldr	ip, [sl, #8]
   26930:	add	lr, r3, r3, lsl #1
   26934:	str	r3, [sl]
   26938:	add	r4, ip, lr, lsl #3
   2693c:	mov	r2, r9
   26940:	ldr	r1, [r4, #8]
   26944:	mov	r0, r5
   26948:	ldr	r7, [ip, lr, lsl #3]
   2694c:	bl	11234 <memcpy@plt>
   26950:	ldr	r1, [r4, #8]
   26954:	mov	r2, r9
   26958:	add	r1, r1, r9
   2695c:	mov	r0, r8
   26960:	bl	11234 <memcpy@plt>
   26964:	ldr	r0, [sp, #124]	; 0x7c
   26968:	bl	14214 <__assert_fail@plt+0x2d1c>
   2696c:	ldr	r0, [r4, #8]
   26970:	bl	14214 <__assert_fail@plt+0x2d1c>
   26974:	add	r3, r4, #12
   26978:	ldr	fp, [r4, #4]
   2697c:	ldm	r3, {r0, r1, r2}
   26980:	ldr	r3, [sp, #16]
   26984:	str	fp, [sp, #24]
   26988:	lsl	r6, fp, #3
   2698c:	stm	r3, {r0, r1, r2}
   26990:	b	25dc0 <__assert_fail@plt+0x148c8>
   26994:	ldrb	r1, [r3, #6]
   26998:	tst	r1, #16
   2699c:	bne	26bbc <__assert_fail@plt+0x156c4>
   269a0:	cmp	r2, #4
   269a4:	beq	26b34 <__assert_fail@plt+0x1563c>
   269a8:	ldr	r0, [sp, #144]	; 0x90
   269ac:	sub	r1, r2, #1
   269b0:	ldrb	r2, [r0, r7]
   269b4:	cmp	r1, #6
   269b8:	ldrls	pc, [pc, r1, lsl #2]
   269bc:	b	26664 <__assert_fail@plt+0x1516c>
   269c0:	andeq	r6, r2, r4, lsr #22
   269c4:	andeq	r6, r2, r4, ror #12
   269c8:	andeq	r6, r2, r4, lsl #22
   269cc:	andeq	r6, r2, r4, ror #12
   269d0:	andeq	r6, r2, r4, ror #19
   269d4:	andeq	r6, r2, r4, ror #12
   269d8:	ldrdeq	r6, [r2], -ip
   269dc:	tst	r2, #128	; 0x80
   269e0:	bne	26664 <__assert_fail@plt+0x1516c>
   269e4:	cmp	r2, #10
   269e8:	beq	26c5c <__assert_fail@plt+0x15764>
   269ec:	cmp	r2, #0
   269f0:	bne	26a04 <__assert_fail@plt+0x1550c>
   269f4:	ldr	r2, [sp, #224]	; 0xe0
   269f8:	ldr	r2, [r2, #128]	; 0x80
   269fc:	tst	r2, #128	; 0x80
   26a00:	bne	26664 <__assert_fail@plt+0x1516c>
   26a04:	ldr	r6, [r3, #4]
   26a08:	ldr	r3, [pc, #-2536]	; 26028 <__assert_fail@plt+0x14b30>
   26a0c:	tst	r6, r3
   26a10:	beq	26a64 <__assert_fail@plt+0x1556c>
   26a14:	ldr	r2, [sp, #228]	; 0xe4
   26a18:	mov	r1, r7
   26a1c:	add	r0, sp, #140	; 0x8c
   26a20:	bl	19b60 <__assert_fail@plt+0x8668>
   26a24:	ldr	r3, [pc, #-2560]	; 2602c <__assert_fail@plt+0x14b34>
   26a28:	and	r3, r3, r6, lsr #8
   26a2c:	tst	r3, #4
   26a30:	beq	26c48 <__assert_fail@plt+0x15750>
   26a34:	tst	r0, #1
   26a38:	beq	26664 <__assert_fail@plt+0x1516c>
   26a3c:	tst	r3, #8
   26a40:	bne	26664 <__assert_fail@plt+0x1516c>
   26a44:	tst	r3, #32
   26a48:	beq	26a54 <__assert_fail@plt+0x1555c>
   26a4c:	tst	r0, #2
   26a50:	beq	26664 <__assert_fail@plt+0x1516c>
   26a54:	tst	r3, #128	; 0x80
   26a58:	beq	26a64 <__assert_fail@plt+0x1556c>
   26a5c:	tst	r0, #8
   26a60:	beq	26664 <__assert_fail@plt+0x1516c>
   26a64:	ldr	r3, [r4, #12]
   26a68:	ldr	r2, [sp, #24]
   26a6c:	add	r7, r7, #1
   26a70:	ldr	fp, [r3, r2, lsl #2]
   26a74:	cmp	sl, #0
   26a78:	beq	26af8 <__assert_fail@plt+0x15600>
   26a7c:	ldr	r3, [sp, #232]	; 0xe8
   26a80:	cmp	r7, r3
   26a84:	bgt	2666c <__assert_fail@plt+0x15174>
   26a88:	ldr	r3, [sp, #240]	; 0xf0
   26a8c:	ldr	r3, [r3, r7, lsl #2]
   26a90:	cmp	r3, #0
   26a94:	beq	2666c <__assert_fail@plt+0x15174>
   26a98:	ldr	r2, [r3, #8]
   26a9c:	cmp	r2, #0
   26aa0:	ble	2666c <__assert_fail@plt+0x15174>
   26aa4:	ldr	ip, [r3, #12]
   26aa8:	sub	r2, r2, #1
   26aac:	mov	r0, #0
   26ab0:	cmp	r0, r2
   26ab4:	bcs	26aec <__assert_fail@plt+0x155f4>
   26ab8:	add	r3, r0, r2
   26abc:	lsr	r3, r3, #1
   26ac0:	b	26ad8 <__assert_fail@plt+0x155e0>
   26ac4:	add	r1, r3, r0
   26ac8:	cmp	r3, r0
   26acc:	mov	r2, r3
   26ad0:	lsr	r3, r1, #1
   26ad4:	bls	26aec <__assert_fail@plt+0x155f4>
   26ad8:	ldr	r1, [ip, r3, lsl #2]
   26adc:	cmp	r1, fp
   26ae0:	bge	26ac4 <__assert_fail@plt+0x155cc>
   26ae4:	add	r0, r3, #1
   26ae8:	b	26ab0 <__assert_fail@plt+0x155b8>
   26aec:	ldr	r3, [ip, r0, lsl #2]
   26af0:	cmp	r3, fp
   26af4:	bne	2666c <__assert_fail@plt+0x15174>
   26af8:	mov	r3, #0
   26afc:	str	r3, [sp, #120]	; 0x78
   26b00:	b	26654 <__assert_fail@plt+0x1515c>
   26b04:	ldr	r1, [r3]
   26b08:	asr	r0, r2, #5
   26b0c:	and	r2, r2, #31
   26b10:	ldr	r1, [r1, r0, lsl #2]
   26b14:	lsr	r2, r1, r2
   26b18:	tst	r2, #1
   26b1c:	bne	26a04 <__assert_fail@plt+0x1550c>
   26b20:	b	26664 <__assert_fail@plt+0x1516c>
   26b24:	ldrb	r1, [r3]
   26b28:	cmp	r1, r2
   26b2c:	bne	26664 <__assert_fail@plt+0x1516c>
   26b30:	b	26a04 <__assert_fail@plt+0x1550c>
   26b34:	ldr	r3, [r3]
   26b38:	ldr	r2, [sp, #56]	; 0x38
   26b3c:	add	r3, r3, #1
   26b40:	cmp	r2, r3
   26b44:	ble	26c3c <__assert_fail@plt+0x15744>
   26b48:	add	r2, r5, r3, lsl #3
   26b4c:	ldr	r0, [r5, r3, lsl #3]
   26b50:	ldr	r2, [r2, #4]
   26b54:	cmp	sl, #0
   26b58:	sub	r3, r2, r0
   26b5c:	beq	26be8 <__assert_fail@plt+0x156f0>
   26b60:	cmn	r0, #1
   26b64:	beq	2666c <__assert_fail@plt+0x15174>
   26b68:	cmn	r2, #1
   26b6c:	beq	2666c <__assert_fail@plt+0x15174>
   26b70:	cmp	r3, #0
   26b74:	beq	26bf0 <__assert_fail@plt+0x156f8>
   26b78:	ldr	r2, [sp, #168]	; 0xa8
   26b7c:	ldr	r1, [sp, #144]	; 0x90
   26b80:	sub	r2, r2, r7
   26b84:	cmp	r3, r2
   26b88:	bgt	2666c <__assert_fail@plt+0x15174>
   26b8c:	add	r0, r1, r0
   26b90:	mov	r2, r3
   26b94:	add	r1, r1, r7
   26b98:	str	r3, [sp, #24]
   26b9c:	bl	11270 <memcmp@plt>
   26ba0:	ldr	r3, [sp, #24]
   26ba4:	cmp	r0, #0
   26ba8:	bne	2666c <__assert_fail@plt+0x15174>
   26bac:	ldr	r2, [r4, #12]
   26bb0:	add	r7, r7, r3
   26bb4:	ldr	fp, [r2, fp, lsl #2]
   26bb8:	b	26a74 <__assert_fail@plt+0x1557c>
   26bbc:	add	r3, sp, #140	; 0x8c
   26bc0:	str	r7, [sp]
   26bc4:	mov	r2, fp
   26bc8:	add	r1, r4, #128	; 0x80
   26bcc:	bl	1b63c <__assert_fail@plt+0xa144>
   26bd0:	subs	r3, r0, #0
   26bd4:	bne	26bac <__assert_fail@plt+0x156b4>
   26bd8:	ldr	r3, [r4]
   26bdc:	add	r3, r3, r6
   26be0:	ldrb	r2, [r3, #4]
   26be4:	b	269a8 <__assert_fail@plt+0x154b0>
   26be8:	cmp	r3, #0
   26bec:	bne	26bac <__assert_fail@plt+0x156b4>
   26bf0:	mov	r1, fp
   26bf4:	ldr	r0, [sp, #16]
   26bf8:	bl	19498 <__assert_fail@plt+0x7fa0>
   26bfc:	cmp	r0, #0
   26c00:	beq	26d04 <__assert_fail@plt+0x1580c>
   26c04:	add	fp, fp, fp, lsl #1
   26c08:	ldr	r3, [r4, #20]
   26c0c:	ldr	r1, [sp, #240]	; 0xf0
   26c10:	add	r3, r3, fp, lsl #2
   26c14:	ldr	r2, [r3, #8]
   26c18:	ldr	r3, [r1, r7, lsl #2]
   26c1c:	ldr	fp, [r2]
   26c20:	add	r1, r3, #12
   26c24:	mov	r2, fp
   26c28:	ldr	r0, [r3, #8]
   26c2c:	bl	195b4 <__assert_fail@plt+0x80bc>
   26c30:	cmp	r0, #0
   26c34:	beq	26bd8 <__assert_fail@plt+0x156e0>
   26c38:	b	26654 <__assert_fail@plt+0x1515c>
   26c3c:	cmp	sl, #0
   26c40:	bne	2666c <__assert_fail@plt+0x15174>
   26c44:	b	26bf0 <__assert_fail@plt+0x156f8>
   26c48:	tst	r3, #8
   26c4c:	beq	26a44 <__assert_fail@plt+0x1554c>
   26c50:	tst	r0, #1
   26c54:	beq	26a44 <__assert_fail@plt+0x1554c>
   26c58:	b	26664 <__assert_fail@plt+0x1516c>
   26c5c:	ldr	r2, [sp, #224]	; 0xe0
   26c60:	ldr	r2, [r2, #128]	; 0x80
   26c64:	tst	r2, #64	; 0x40
   26c68:	bne	26a04 <__assert_fail@plt+0x1550c>
   26c6c:	b	26664 <__assert_fail@plt+0x1516c>
   26c70:	mov	r2, fp
   26c74:	add	r1, sp, #124	; 0x7c
   26c78:	ldr	r0, [sp, #120]	; 0x78
   26c7c:	bl	195b4 <__assert_fail@plt+0x80bc>
   26c80:	cmp	r0, #0
   26c84:	bne	26f4c <__assert_fail@plt+0x15a54>
   26c88:	cmp	sl, #0
   26c8c:	beq	26654 <__assert_fail@plt+0x1515c>
   26c90:	ldr	r6, [sl]
   26c94:	ldr	r3, [sl, #4]
   26c98:	add	r2, r6, #1
   26c9c:	cmp	r2, r3
   26ca0:	str	r2, [sl]
   26ca4:	ldrne	r2, [sl, #8]
   26ca8:	beq	26d84 <__assert_fail@plt+0x1588c>
   26cac:	add	r3, r6, r6, lsl #1
   26cb0:	ldr	r0, [sp, #32]
   26cb4:	add	r6, r2, r3, lsl #3
   26cb8:	str	r7, [r2, r3, lsl #3]
   26cbc:	str	r4, [r6, #4]
   26cc0:	bl	2a790 <__assert_fail@plt+0x19298>
   26cc4:	cmp	r0, #0
   26cc8:	str	r0, [r6, #8]
   26ccc:	beq	26d04 <__assert_fail@plt+0x1580c>
   26cd0:	mov	r2, r9
   26cd4:	mov	r1, r5
   26cd8:	bl	11234 <memcpy@plt>
   26cdc:	ldr	r0, [r6, #8]
   26ce0:	mov	r2, r9
   26ce4:	mov	r1, r8
   26ce8:	add	r0, r0, r9
   26cec:	bl	11234 <memcpy@plt>
   26cf0:	ldr	r1, [sp, #16]
   26cf4:	add	r0, r6, #12
   26cf8:	bl	19858 <__assert_fail@plt+0x8360>
   26cfc:	cmp	r0, #0
   26d00:	beq	26654 <__assert_fail@plt+0x1515c>
   26d04:	ldr	r0, [sp, #124]	; 0x7c
   26d08:	ldr	r8, [sp, #12]
   26d0c:	bl	14214 <__assert_fail@plt+0x2d1c>
   26d10:	ldr	r0, [sp, #284]	; 0x11c
   26d14:	cmp	r0, r8
   26d18:	beq	26d20 <__assert_fail@plt+0x15828>
   26d1c:	bl	14214 <__assert_fail@plt+0x2d1c>
   26d20:	mov	r4, #0
   26d24:	mov	r3, #16
   26d28:	cmp	sl, #0
   26d2c:	str	r8, [sp, #284]	; 0x11c
   26d30:	str	r4, [sp, #276]	; 0x114
   26d34:	str	r3, [sp, #280]	; 0x118
   26d38:	beq	26e68 <__assert_fail@plt+0x15970>
   26d3c:	ldr	r7, [sl]
   26d40:	ldr	r6, [sl, #8]
   26d44:	cmp	r7, r4
   26d48:	ble	26d70 <__assert_fail@plt+0x15878>
   26d4c:	mov	r5, r6
   26d50:	ldr	r0, [r5, #20]
   26d54:	bl	14214 <__assert_fail@plt+0x2d1c>
   26d58:	add	r4, r4, #1
   26d5c:	ldr	r0, [r5, #8]
   26d60:	bl	14214 <__assert_fail@plt+0x2d1c>
   26d64:	cmp	r7, r4
   26d68:	add	r5, r5, #24
   26d6c:	bne	26d50 <__assert_fail@plt+0x15858>
   26d70:	mov	r0, r6
   26d74:	bl	14214 <__assert_fail@plt+0x2d1c>
   26d78:	mov	r3, #12
   26d7c:	str	r3, [sp, #48]	; 0x30
   26d80:	b	261c8 <__assert_fail@plt+0x14cd0>
   26d84:	lsl	r3, r2, #1
   26d88:	add	r2, r3, r2
   26d8c:	ldr	r0, [sl, #8]
   26d90:	lsl	r1, r2, #4
   26d94:	str	r3, [sp, #24]
   26d98:	bl	2a7bc <__assert_fail@plt+0x192c4>
   26d9c:	subs	r2, r0, #0
   26da0:	beq	26d04 <__assert_fail@plt+0x1580c>
   26da4:	ldr	r3, [sp, #24]
   26da8:	str	r2, [sl, #8]
   26dac:	str	r3, [sl, #4]
   26db0:	b	26cac <__assert_fail@plt+0x157b4>
   26db4:	ldr	r3, [r1]
   26db8:	ldr	r0, [sp, #56]	; 0x38
   26dbc:	add	r3, r3, #1
   26dc0:	cmp	r0, r3
   26dc4:	ble	25d4c <__assert_fail@plt+0x14854>
   26dc8:	ldr	r0, [r5, r3, lsl #3]
   26dcc:	add	r2, r5, r3, lsl #3
   26dd0:	cmp	r0, r7
   26dd4:	blt	26dfc <__assert_fail@plt+0x15904>
   26dd8:	ldrb	r1, [r1, #6]
   26ddc:	tst	r1, #8
   26de0:	beq	26df0 <__assert_fail@plt+0x158f8>
   26de4:	ldr	r3, [r8, r3, lsl #3]
   26de8:	cmn	r3, #1
   26dec:	bne	27094 <__assert_fail@plt+0x15b9c>
   26df0:	str	r7, [r2, #4]
   26df4:	ldr	r2, [r5, #4]
   26df8:	b	25d4c <__assert_fail@plt+0x14854>
   26dfc:	str	r7, [r2, #4]
   26e00:	mov	r1, r5
   26e04:	mov	r2, r9
   26e08:	mov	r0, r8
   26e0c:	bl	11234 <memcpy@plt>
   26e10:	ldr	r2, [r5, #4]
   26e14:	b	25d4c <__assert_fail@plt+0x14854>
   26e18:	ldr	sl, [sp, #16]
   26e1c:	ldr	fp, [sp, #12]
   26e20:	mov	r0, sl
   26e24:	bl	14214 <__assert_fail@plt+0x2d1c>
   26e28:	mov	r0, fp
   26e2c:	bl	14214 <__assert_fail@plt+0x2d1c>
   26e30:	mov	r0, #0
   26e34:	bl	14214 <__assert_fail@plt+0x2d1c>
   26e38:	mov	r7, #12
   26e3c:	b	25f5c <__assert_fail@plt+0x14a64>
   26e40:	sub	r2, r2, r4
   26e44:	ldr	r1, [r5, #12]
   26e48:	lsl	r2, r2, #2
   26e4c:	add	r0, r0, sl, lsl #2
   26e50:	add	r1, r1, r4, lsl #2
   26e54:	bl	11234 <memcpy@plt>
   26e58:	ldr	r2, [r5, #8]
   26e5c:	sub	r4, r2, r4
   26e60:	add	sl, sl, r4
   26e64:	b	26434 <__assert_fail@plt+0x14f3c>
   26e68:	mov	r3, #12
   26e6c:	str	r3, [sp, #48]	; 0x30
   26e70:	b	261c8 <__assert_fail@plt+0x14cd0>
   26e74:	ldr	r3, [sp, #44]	; 0x2c
   26e78:	mov	r1, #16
   26e7c:	str	r1, [sp, #280]	; 0x118
   26e80:	ldr	r3, [r3]
   26e84:	ldr	r1, [sp, #56]	; 0x38
   26e88:	mov	ip, r3
   26e8c:	str	r3, [sp, #20]
   26e90:	add	r3, sp, #116	; 0x74
   26e94:	mov	r0, r3
   26e98:	str	r3, [sp, #16]
   26e9c:	mov	r3, #0
   26ea0:	mov	sl, r3
   26ea4:	add	r8, sp, #288	; 0x120
   26ea8:	mov	r2, #2
   26eac:	str	r3, [sp, #276]	; 0x114
   26eb0:	str	r8, [sp, #284]	; 0x11c
   26eb4:	str	r3, [sp, #128]	; 0x80
   26eb8:	ldr	fp, [ip, #72]	; 0x48
   26ebc:	str	r3, [sp, #136]	; 0x88
   26ec0:	str	r3, [sp, #116]	; 0x74
   26ec4:	str	r2, [sp, #132]	; 0x84
   26ec8:	str	r3, [r0, #4]
   26ecc:	str	r3, [r0, #8]
   26ed0:	mov	r3, #8
   26ed4:	mov	r2, r8
   26ed8:	add	r0, sp, #276	; 0x114
   26edc:	bl	2a894 <__assert_fail@plt+0x1939c>
   26ee0:	cmp	r0, #0
   26ee4:	bne	25cdc <__assert_fail@plt+0x147e4>
   26ee8:	ldr	r0, [sp, #284]	; 0x11c
   26eec:	cmp	r0, r8
   26ef0:	beq	26ef8 <__assert_fail@plt+0x15a00>
   26ef4:	bl	14214 <__assert_fail@plt+0x2d1c>
   26ef8:	mov	r4, #0
   26efc:	mov	r3, #16
   26f00:	cmp	sl, #0
   26f04:	str	r8, [sp, #284]	; 0x11c
   26f08:	str	r4, [sp, #276]	; 0x114
   26f0c:	str	r3, [sp, #280]	; 0x118
   26f10:	beq	26e68 <__assert_fail@plt+0x15970>
   26f14:	ldr	r7, [sl]
   26f18:	ldr	r6, [sl, #8]
   26f1c:	cmp	r7, #0
   26f20:	ble	26d70 <__assert_fail@plt+0x15878>
   26f24:	mov	r5, r6
   26f28:	ldr	r0, [r5, #20]
   26f2c:	bl	14214 <__assert_fail@plt+0x2d1c>
   26f30:	add	r4, r4, #1
   26f34:	ldr	r0, [r5, #8]
   26f38:	bl	14214 <__assert_fail@plt+0x2d1c>
   26f3c:	cmp	r7, r4
   26f40:	add	r5, r5, #24
   26f44:	bne	26f28 <__assert_fail@plt+0x15a30>
   26f48:	b	26d70 <__assert_fail@plt+0x15878>
   26f4c:	mov	fp, r4
   26f50:	b	26654 <__assert_fail@plt+0x1515c>
   26f54:	ldr	r0, [sp, #124]	; 0x7c
   26f58:	ldr	r8, [sp, #12]
   26f5c:	bl	14214 <__assert_fail@plt+0x2d1c>
   26f60:	ldr	r0, [sp, #284]	; 0x11c
   26f64:	cmp	r0, r8
   26f68:	beq	26fbc <__assert_fail@plt+0x15ac4>
   26f6c:	bl	14214 <__assert_fail@plt+0x2d1c>
   26f70:	ldr	r7, [sl]
   26f74:	mov	r3, #16
   26f78:	cmp	r7, #0
   26f7c:	str	r4, [sp, #276]	; 0x114
   26f80:	ldrgt	r6, [sl, #8]
   26f84:	str	r8, [sp, #284]	; 0x11c
   26f88:	str	r3, [sp, #280]	; 0x118
   26f8c:	movgt	r5, r6
   26f90:	ble	26fcc <__assert_fail@plt+0x15ad4>
   26f94:	ldr	r0, [r5, #20]
   26f98:	bl	14214 <__assert_fail@plt+0x2d1c>
   26f9c:	add	r4, r4, #1
   26fa0:	ldr	r0, [r5, #8]
   26fa4:	bl	14214 <__assert_fail@plt+0x2d1c>
   26fa8:	cmp	r4, r7
   26fac:	add	r5, r5, #24
   26fb0:	bne	26f94 <__assert_fail@plt+0x15a9c>
   26fb4:	mov	r0, r6
   26fb8:	b	261bc <__assert_fail@plt+0x14cc4>
   26fbc:	mov	r3, #16
   26fc0:	str	r4, [sp, #276]	; 0x114
   26fc4:	str	r8, [sp, #284]	; 0x11c
   26fc8:	str	r3, [sp, #280]	; 0x118
   26fcc:	ldr	r6, [sl, #8]
   26fd0:	b	26fb4 <__assert_fail@plt+0x15abc>
   26fd4:	ldr	r0, [sp, #124]	; 0x7c
   26fd8:	ldr	r8, [sp, #12]
   26fdc:	bl	14214 <__assert_fail@plt+0x2d1c>
   26fe0:	ldr	r0, [sp, #284]	; 0x11c
   26fe4:	cmp	r0, r8
   26fe8:	bne	2672c <__assert_fail@plt+0x15234>
   26fec:	b	26730 <__assert_fail@plt+0x15238>
   26ff0:	ldr	r0, [sp, #124]	; 0x7c
   26ff4:	ldr	r8, [sp, #12]
   26ff8:	bl	14214 <__assert_fail@plt+0x2d1c>
   26ffc:	ldr	r0, [sp, #284]	; 0x11c
   27000:	cmp	r0, r8
   27004:	beq	2700c <__assert_fail@plt+0x15b14>
   27008:	bl	14214 <__assert_fail@plt+0x2d1c>
   2700c:	mov	r4, #0
   27010:	mov	r3, #16
   27014:	cmp	sl, #0
   27018:	str	r8, [sp, #284]	; 0x11c
   2701c:	str	r4, [sp, #276]	; 0x114
   27020:	str	r3, [sp, #280]	; 0x118
   27024:	beq	26788 <__assert_fail@plt+0x15290>
   27028:	ldr	r6, [sl]
   2702c:	ldr	r7, [sl, #8]
   27030:	cmp	r6, r4
   27034:	ble	26780 <__assert_fail@plt+0x15288>
   27038:	mov	r5, r7
   2703c:	ldr	r0, [r5, #20]
   27040:	bl	14214 <__assert_fail@plt+0x2d1c>
   27044:	add	r4, r4, #1
   27048:	ldr	r0, [r5, #8]
   2704c:	bl	14214 <__assert_fail@plt+0x2d1c>
   27050:	cmp	r4, r6
   27054:	add	r5, r5, #24
   27058:	bne	2703c <__assert_fail@plt+0x15b44>
   2705c:	b	26780 <__assert_fail@plt+0x15288>
   27060:	add	sl, sp, #128	; 0x80
   27064:	b	26ed0 <__assert_fail@plt+0x159d8>
   27068:	ldr	r3, [r0, fp, lsl #3]
   2706c:	ldr	r1, [sp, #56]	; 0x38
   27070:	add	r3, r3, #1
   27074:	cmp	r1, r3
   27078:	ble	25d4c <__assert_fail@plt+0x14854>
   2707c:	add	r2, r5, r3, lsl #3
   27080:	str	r7, [r5, r3, lsl #3]
   27084:	mvn	r3, #0
   27088:	str	r3, [r2, #4]
   2708c:	ldr	r2, [r5, #4]
   27090:	b	25d4c <__assert_fail@plt+0x14854>
   27094:	mov	r2, r9
   27098:	mov	r1, r8
   2709c:	mov	r0, r5
   270a0:	bl	11234 <memcpy@plt>
   270a4:	ldr	r2, [r5, #4]
   270a8:	b	25d4c <__assert_fail@plt+0x14854>
   270ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   270b0:	sub	sp, sp, #12
   270b4:	ldrb	ip, [r1, #28]
   270b8:	ldr	r4, [r2, #4]
   270bc:	ldr	r5, [r1]
   270c0:	adds	r3, r4, #0
   270c4:	movne	r3, #1
   270c8:	ands	r3, r3, ip, lsr #4
   270cc:	beq	270ec <__assert_fail@plt+0x15bf4>
   270d0:	ldr	r3, [r2, #20]
   270d4:	cmp	r3, #31
   270d8:	bgt	27334 <__assert_fail@plt+0x15e3c>
   270dc:	ldr	r1, [r5, #80]	; 0x50
   270e0:	lsr	r3, r1, r3
   270e4:	tst	r3, #1
   270e8:	beq	27334 <__assert_fail@plt+0x15e3c>
   270ec:	mov	r8, r2
   270f0:	ldr	r2, [r5, #64]	; 0x40
   270f4:	mov	sl, #0
   270f8:	cmp	r2, #31
   270fc:	mov	r9, r0
   27100:	mov	r6, sp
   27104:	str	sl, [sp, #4]
   27108:	str	sl, [sp]
   2710c:	beq	27358 <__assert_fail@plt+0x15e60>
   27110:	lsl	r3, r2, #5
   27114:	ldr	r7, [r5, #56]	; 0x38
   27118:	add	r2, r2, #1
   2711c:	add	ip, r3, #4
   27120:	mov	r1, #8
   27124:	add	r3, r7, r3
   27128:	strb	r1, [sp, #4]
   2712c:	ldm	r6, {r0, r1}
   27130:	add	lr, r3, #24
   27134:	str	r2, [r5, #64]	; 0x40
   27138:	mov	r2, #0
   2713c:	str	r2, [r3, #4]
   27140:	str	r2, [r3, #8]
   27144:	str	r2, [r3, #12]
   27148:	stm	lr, {r0, r1}
   2714c:	ldrb	r1, [r3, #30]
   27150:	add	r7, r7, ip
   27154:	mvn	r0, #0
   27158:	and	r1, r1, #243	; 0xf3
   2715c:	str	r2, [r3, #16]
   27160:	str	r2, [r3, #20]
   27164:	strb	r1, [r3, #30]
   27168:	str	r0, [r3, #32]
   2716c:	ldr	r2, [r5, #64]	; 0x40
   27170:	mov	fp, #0
   27174:	cmp	r2, #31
   27178:	str	fp, [sp]
   2717c:	str	fp, [r6, #4]
   27180:	beq	27384 <__assert_fail@plt+0x15e8c>
   27184:	lsl	r3, r2, #5
   27188:	ldr	sl, [r5, #56]	; 0x38
   2718c:	add	r2, r2, #1
   27190:	add	ip, r3, #4
   27194:	mov	r1, #9
   27198:	add	r3, sl, r3
   2719c:	strb	r1, [sp, #4]
   271a0:	ldm	r6, {r0, r1}
   271a4:	add	lr, r3, #24
   271a8:	str	r2, [r5, #64]	; 0x40
   271ac:	mov	r2, #0
   271b0:	str	r2, [r3, #4]
   271b4:	str	r2, [r3, #8]
   271b8:	str	r2, [r3, #12]
   271bc:	stm	lr, {r0, r1}
   271c0:	ldrb	r1, [r3, #30]
   271c4:	add	sl, sl, ip
   271c8:	mvn	r0, #0
   271cc:	and	r1, r1, #243	; 0xf3
   271d0:	str	r2, [r3, #16]
   271d4:	str	r2, [r3, #20]
   271d8:	strb	r1, [r3, #30]
   271dc:	str	r0, [r3, #32]
   271e0:	cmp	r4, #0
   271e4:	moveq	fp, sl
   271e8:	beq	27264 <__assert_fail@plt+0x15d6c>
   271ec:	ldr	r2, [r5, #64]	; 0x40
   271f0:	mov	fp, #0
   271f4:	cmp	r2, #31
   271f8:	str	fp, [sp]
   271fc:	str	fp, [r6, #4]
   27200:	beq	273dc <__assert_fail@plt+0x15ee4>
   27204:	lsl	r3, r2, #5
   27208:	ldr	ip, [r5, #56]	; 0x38
   2720c:	add	r2, r2, #1
   27210:	add	fp, r3, #4
   27214:	mov	r1, #16
   27218:	add	r3, ip, r3
   2721c:	strb	r1, [sp, #4]
   27220:	ldm	r6, {r0, r1}
   27224:	str	r2, [r5, #64]	; 0x40
   27228:	add	lr, r3, #24
   2722c:	mov	r2, #0
   27230:	add	fp, ip, fp
   27234:	stmib	r3, {r2, r4, sl}
   27238:	cmp	sl, r2
   2723c:	stm	lr, {r0, r1}
   27240:	ldrb	r1, [r3, #30]
   27244:	mvn	r0, #0
   27248:	str	r2, [r3, #16]
   2724c:	and	r1, r1, #243	; 0xf3
   27250:	str	r2, [r3, #20]
   27254:	strb	r1, [r3, #30]
   27258:	str	r0, [r3, #32]
   2725c:	str	fp, [r4]
   27260:	strne	fp, [sl]
   27264:	ldr	r2, [r5, #64]	; 0x40
   27268:	mov	r4, #0
   2726c:	cmp	r2, #31
   27270:	str	r4, [sp]
   27274:	str	r4, [r6, #4]
   27278:	beq	273b0 <__assert_fail@plt+0x15eb8>
   2727c:	lsl	r3, r2, #5
   27280:	ldr	ip, [r5, #56]	; 0x38
   27284:	add	r2, r2, #1
   27288:	add	r4, r3, #4
   2728c:	mov	r1, #16
   27290:	add	r3, ip, r3
   27294:	strb	r1, [sp, #4]
   27298:	ldm	r6, {r0, r1}
   2729c:	str	r2, [r5, #64]	; 0x40
   272a0:	add	r2, r3, #24
   272a4:	mov	lr, #0
   272a8:	str	r7, [r3, #8]
   272ac:	str	fp, [r3, #12]
   272b0:	str	lr, [r3, #4]
   272b4:	stm	r2, {r0, r1}
   272b8:	ldrb	r2, [r3, #30]
   272bc:	cmp	r7, lr
   272c0:	mvn	r1, #0
   272c4:	and	r2, r2, #243	; 0xf3
   272c8:	add	r4, ip, r4
   272cc:	str	lr, [r3, #16]
   272d0:	str	lr, [r3, #20]
   272d4:	strb	r2, [r3, #30]
   272d8:	str	r1, [r3, #32]
   272dc:	strne	r4, [r7]
   272e0:	cmp	fp, #0
   272e4:	beq	27340 <__assert_fail@plt+0x15e48>
   272e8:	cmp	r4, #0
   272ec:	str	r4, [fp]
   272f0:	beq	27340 <__assert_fail@plt+0x15e48>
   272f4:	cmp	sl, #0
   272f8:	cmpne	r7, #0
   272fc:	beq	27340 <__assert_fail@plt+0x15e48>
   27300:	ldr	r3, [r8, #20]
   27304:	str	r3, [sl, #20]
   27308:	str	r3, [r7, #20]
   2730c:	ldrb	r3, [r8, #26]
   27310:	ldrb	r2, [sl, #26]
   27314:	and	r3, r3, #8
   27318:	bic	r2, r2, #8
   2731c:	orr	r2, r3, r2
   27320:	strb	r2, [sl, #26]
   27324:	ldrb	r2, [r7, #26]
   27328:	bic	r2, r2, #8
   2732c:	orr	r3, r3, r2
   27330:	strb	r3, [r7, #26]
   27334:	mov	r0, r4
   27338:	add	sp, sp, #12
   2733c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27340:	mov	r3, #12
   27344:	mov	r4, #0
   27348:	mov	r0, r4
   2734c:	str	r3, [r9]
   27350:	add	sp, sp, #12
   27354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27358:	mov	r0, #996	; 0x3e4
   2735c:	bl	2a790 <__assert_fail@plt+0x19298>
   27360:	subs	r7, r0, #0
   27364:	beq	2716c <__assert_fail@plt+0x15c74>
   27368:	ldr	r1, [r5, #56]	; 0x38
   2736c:	mov	r3, sl
   27370:	str	r1, [r7]
   27374:	mov	r2, #1
   27378:	mov	ip, #4
   2737c:	str	r7, [r5, #56]	; 0x38
   27380:	b	27120 <__assert_fail@plt+0x15c28>
   27384:	mov	r0, #996	; 0x3e4
   27388:	bl	2a790 <__assert_fail@plt+0x19298>
   2738c:	subs	sl, r0, #0
   27390:	beq	271e0 <__assert_fail@plt+0x15ce8>
   27394:	ldr	r1, [r5, #56]	; 0x38
   27398:	mov	r3, fp
   2739c:	str	r1, [sl]
   273a0:	mov	ip, #4
   273a4:	mov	r2, #1
   273a8:	str	sl, [r5, #56]	; 0x38
   273ac:	b	27194 <__assert_fail@plt+0x15c9c>
   273b0:	mov	r0, #996	; 0x3e4
   273b4:	bl	2a790 <__assert_fail@plt+0x19298>
   273b8:	subs	ip, r0, #0
   273bc:	beq	27340 <__assert_fail@plt+0x15e48>
   273c0:	ldr	r1, [r5, #56]	; 0x38
   273c4:	mov	r3, r4
   273c8:	str	r1, [ip]
   273cc:	mov	r4, #4
   273d0:	mov	r2, #1
   273d4:	str	ip, [r5, #56]	; 0x38
   273d8:	b	2728c <__assert_fail@plt+0x15d94>
   273dc:	mov	r0, #996	; 0x3e4
   273e0:	bl	2a790 <__assert_fail@plt+0x19298>
   273e4:	subs	ip, r0, #0
   273e8:	beq	27408 <__assert_fail@plt+0x15f10>
   273ec:	ldr	r1, [r5, #56]	; 0x38
   273f0:	mov	r3, fp
   273f4:	str	r1, [ip]
   273f8:	mov	r2, #1
   273fc:	mov	fp, #4
   27400:	str	ip, [r5, #56]	; 0x38
   27404:	b	27214 <__assert_fail@plt+0x15d1c>
   27408:	mov	fp, ip
   2740c:	b	27264 <__assert_fail@plt+0x15d6c>
   27410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27414:	mov	r8, r0
   27418:	ldrb	r0, [r0, #28]
   2741c:	ldr	ip, [r8, #4]
   27420:	sub	sp, sp, #148	; 0x94
   27424:	mov	r7, r3
   27428:	and	r0, r0, #144	; 0x90
   2742c:	mov	r3, #0
   27430:	cmp	ip, #159	; 0x9f
   27434:	str	r7, [r8, #12]
   27438:	str	r1, [sp, #12]
   2743c:	mov	r5, r2
   27440:	strb	r0, [r8, #28]
   27444:	str	r3, [r8, #8]
   27448:	str	r3, [sp, #36]	; 0x24
   2744c:	str	r3, [r8, #24]
   27450:	ldr	r4, [r8]
   27454:	bls	27ef4 <__assert_fail@plt+0x169fc>
   27458:	mov	r2, #160	; 0xa0
   2745c:	str	r2, [r8, #8]
   27460:	mov	r1, #0
   27464:	mov	r0, r4
   27468:	bl	11414 <memset@plt>
   2746c:	ldr	r2, [pc, #4084]	; 28468 <__assert_fail@plt+0x16f70>
   27470:	mov	r3, #31
   27474:	cmp	r5, r2
   27478:	str	r3, [r4, #64]	; 0x40
   2747c:	bhi	27818 <__assert_fail@plt+0x16320>
   27480:	add	r3, r5, #1
   27484:	str	r3, [r4, #4]
   27488:	lsl	r0, r3, #3
   2748c:	str	r3, [sp, #16]
   27490:	bl	2a790 <__assert_fail@plt+0x19298>
   27494:	cmp	r5, #0
   27498:	str	r0, [r4]
   2749c:	beq	27f70 <__assert_fail@plt+0x16a78>
   274a0:	mov	r1, #1
   274a4:	lsl	r1, r1, #1
   274a8:	cmp	r5, r1
   274ac:	bcs	274a4 <__assert_fail@plt+0x15fac>
   274b0:	sub	sl, r1, #1
   274b4:	mov	r0, #12
   274b8:	bl	2a748 <__assert_fail@plt+0x19250>
   274bc:	str	sl, [r4, #68]	; 0x44
   274c0:	str	r0, [r4, #32]
   274c4:	bl	11300 <__ctype_get_mb_cur_max@plt>
   274c8:	str	r0, [r4, #92]	; 0x5c
   274cc:	mov	r0, #14
   274d0:	bl	114a4 <nl_langinfo@plt>
   274d4:	ldrb	r3, [r0]
   274d8:	and	r3, r3, #223	; 0xdf
   274dc:	cmp	r3, #85	; 0x55
   274e0:	bne	27504 <__assert_fail@plt+0x1600c>
   274e4:	ldrb	r3, [r0, #1]
   274e8:	and	r3, r3, #223	; 0xdf
   274ec:	cmp	r3, #84	; 0x54
   274f0:	bne	27504 <__assert_fail@plt+0x1600c>
   274f4:	ldrb	r3, [r0, #2]
   274f8:	and	r3, r3, #223	; 0xdf
   274fc:	cmp	r3, #70	; 0x46
   27500:	beq	27c84 <__assert_fail@plt+0x1678c>
   27504:	ldrb	r3, [r4, #88]	; 0x58
   27508:	ldr	r2, [r4, #92]	; 0x5c
   2750c:	bic	r3, r3, #8
   27510:	cmp	r2, #1
   27514:	strb	r3, [r4, #88]	; 0x58
   27518:	ble	27530 <__assert_fail@plt+0x16038>
   2751c:	uxtb	r3, r3
   27520:	ands	r6, r3, #4
   27524:	beq	27c0c <__assert_fail@plt+0x16714>
   27528:	ldr	r3, [pc, #3900]	; 2846c <__assert_fail@plt+0x16f74>
   2752c:	str	r3, [r4, #60]	; 0x3c
   27530:	ldr	r3, [r4]
   27534:	cmp	r3, #0
   27538:	beq	27818 <__assert_fail@plt+0x16320>
   2753c:	ldr	r3, [r4, #32]
   27540:	cmp	r3, #0
   27544:	beq	27818 <__assert_fail@plt+0x16320>
   27548:	ldr	r2, [pc, #3872]	; 28470 <__assert_fail@plt+0x16f78>
   2754c:	mov	r3, #0
   27550:	ldr	r1, [pc, #3868]	; 28474 <__assert_fail@plt+0x16f7c>
   27554:	cmp	r2, r3
   27558:	str	r3, [sp, #36]	; 0x24
   2755c:	mov	r3, #1
   27560:	moveq	r3, r2
   27564:	cmp	r1, #0
   27568:	mov	r2, #1
   2756c:	moveq	r2, r1
   27570:	orr	r3, r3, r2
   27574:	ands	r3, r3, #255	; 0xff
   27578:	str	r3, [sp, #24]
   2757c:	beq	275a0 <__assert_fail@plt+0x160a8>
   27580:	mov	r1, #0
   27584:	add	r0, r4, #136	; 0x88
   27588:	bl	1124c <pthread_mutex_init@plt>
   2758c:	cmp	r0, #0
   27590:	bne	27818 <__assert_fail@plt+0x16320>
   27594:	ldr	r3, [sp, #36]	; 0x24
   27598:	cmp	r3, #0
   2759c:	bne	27724 <__assert_fail@plt+0x1622c>
   275a0:	ands	r3, r7, #4194304	; 0x400000
   275a4:	mov	r1, #0
   275a8:	mov	r2, #84	; 0x54
   275ac:	add	r0, sp, #60	; 0x3c
   275b0:	moveq	fp, r1
   275b4:	movne	fp, #1
   275b8:	ldr	sl, [r8, #20]
   275bc:	str	r3, [sp, #20]
   275c0:	bl	11414 <memset@plt>
   275c4:	ldrb	r2, [r4, #88]	; 0x58
   275c8:	ldr	ip, [sp, #12]
   275cc:	ldr	r1, [r4, #92]	; 0x5c
   275d0:	cmp	sl, #0
   275d4:	moveq	r3, fp
   275d8:	orrne	r3, fp, #1
   275dc:	lsr	r0, r2, #2
   275e0:	lsr	r2, r2, #3
   275e4:	and	r0, r0, #1
   275e8:	and	r2, r2, #1
   275ec:	cmp	r5, #0
   275f0:	str	ip, [sp, #60]	; 0x3c
   275f4:	strb	fp, [sp, #132]	; 0x84
   275f8:	strb	r3, [sp, #135]	; 0x87
   275fc:	str	sl, [sp, #124]	; 0x7c
   27600:	str	r5, [sp, #108]	; 0x6c
   27604:	str	r5, [sp, #104]	; 0x68
   27608:	str	r5, [sp, #116]	; 0x74
   2760c:	str	r5, [sp, #112]	; 0x70
   27610:	mov	ip, r3
   27614:	strb	r0, [sp, #133]	; 0x85
   27618:	strb	r2, [sp, #134]	; 0x86
   2761c:	str	r1, [sp, #140]	; 0x8c
   27620:	beq	27744 <__assert_fail@plt+0x1624c>
   27624:	ldr	r2, [sp, #16]
   27628:	cmp	r1, #1
   2762c:	mov	sl, r2
   27630:	ble	27688 <__assert_fail@plt+0x16190>
   27634:	lsl	fp, r2, #2
   27638:	mov	r1, fp
   2763c:	mov	r0, #0
   27640:	str	r3, [sp, #28]
   27644:	bl	2a7bc <__assert_fail@plt+0x192c4>
   27648:	subs	r2, r0, #0
   2764c:	beq	276a4 <__assert_fail@plt+0x161ac>
   27650:	ldr	r0, [sp, #72]	; 0x48
   27654:	str	r2, [sp, #68]	; 0x44
   27658:	cmp	r0, #0
   2765c:	ldr	r3, [sp, #28]
   27660:	ldrbeq	ip, [sp, #135]	; 0x87
   27664:	beq	27688 <__assert_fail@plt+0x16190>
   27668:	mov	r1, fp
   2766c:	str	r3, [sp, #28]
   27670:	bl	2a7bc <__assert_fail@plt+0x192c4>
   27674:	cmp	r0, #0
   27678:	beq	276a4 <__assert_fail@plt+0x161ac>
   2767c:	ldrb	ip, [sp, #135]	; 0x87
   27680:	ldr	r3, [sp, #28]
   27684:	str	r0, [sp, #72]	; 0x48
   27688:	cmp	ip, #0
   2768c:	bne	27ecc <__assert_fail@plt+0x169d4>
   27690:	ldr	r2, [sp, #16]
   27694:	ldr	r1, [r4, #92]	; 0x5c
   27698:	str	r2, [sp, #96]	; 0x60
   2769c:	b	27748 <__assert_fail@plt+0x16250>
   276a0:	ldr	r4, [sp, #16]
   276a4:	mov	r0, #12
   276a8:	str	r0, [sp, #36]	; 0x24
   276ac:	ldr	r6, [r8]
   276b0:	ldr	r0, [r6, #56]	; 0x38
   276b4:	cmp	r0, #0
   276b8:	beq	276cc <__assert_fail@plt+0x161d4>
   276bc:	ldr	r5, [r0]
   276c0:	bl	14214 <__assert_fail@plt+0x2d1c>
   276c4:	subs	r0, r5, #0
   276c8:	bne	276bc <__assert_fail@plt+0x161c4>
   276cc:	mov	r3, #31
   276d0:	mov	r5, #0
   276d4:	str	r3, [r6, #64]	; 0x40
   276d8:	ldr	r0, [r6, #16]
   276dc:	str	r5, [r6, #56]	; 0x38
   276e0:	str	r5, [r6, #52]	; 0x34
   276e4:	bl	14214 <__assert_fail@plt+0x2d1c>
   276e8:	ldr	r0, [sp, #68]	; 0x44
   276ec:	str	r5, [r6, #16]
   276f0:	bl	14214 <__assert_fail@plt+0x2d1c>
   276f4:	ldr	r0, [sp, #72]	; 0x48
   276f8:	bl	14214 <__assert_fail@plt+0x2d1c>
   276fc:	ldrb	r3, [sp, #135]	; 0x87
   27700:	cmp	r3, r5
   27704:	beq	27710 <__assert_fail@plt+0x16218>
   27708:	ldr	r0, [sp, #64]	; 0x40
   2770c:	bl	14214 <__assert_fail@plt+0x2d1c>
   27710:	ldr	r3, [sp, #24]
   27714:	cmp	r3, #0
   27718:	beq	27724 <__assert_fail@plt+0x1622c>
   2771c:	add	r0, r4, #136	; 0x88
   27720:	bl	111e0 <pthread_mutex_destroy@plt>
   27724:	mov	r0, r4
   27728:	bl	1c420 <__assert_fail@plt+0xaf28>
   2772c:	ldr	r0, [sp, #36]	; 0x24
   27730:	mov	r3, #0
   27734:	str	r3, [r8]
   27738:	str	r3, [r8, #4]
   2773c:	add	sp, sp, #148	; 0x94
   27740:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27744:	mov	sl, r5
   27748:	cmp	ip, #0
   2774c:	ldrne	r6, [sp, #64]	; 0x40
   27750:	ldreq	r6, [sp, #12]
   27754:	ands	r2, r7, #4194304	; 0x400000
   27758:	cmp	r2, #0
   2775c:	str	r6, [sp, #64]	; 0x40
   27760:	beq	27b84 <__assert_fail@plt+0x1668c>
   27764:	cmp	r1, #1
   27768:	ble	286d0 <__assert_fail@plt+0x171d8>
   2776c:	add	r0, sp, #60	; 0x3c
   27770:	bl	18d68 <__assert_fail@plt+0x7870>
   27774:	cmp	r0, #0
   27778:	bne	276a8 <__assert_fail@plt+0x161b0>
   2777c:	ldr	r3, [sp, #92]	; 0x5c
   27780:	cmp	r5, r3
   27784:	ble	2782c <__assert_fail@plt+0x16334>
   27788:	ldr	r2, [sp, #88]	; 0x58
   2778c:	ldr	r1, [r4, #92]	; 0x5c
   27790:	ldr	r3, [sp, #96]	; 0x60
   27794:	add	r2, r2, r1
   27798:	cmp	r3, r2
   2779c:	bgt	2782c <__assert_fail@plt+0x16334>
   277a0:	ldr	r2, [sp, #140]	; 0x8c
   277a4:	lsl	r9, r3, #1
   277a8:	cmp	r2, #1
   277ac:	ble	277f4 <__assert_fail@plt+0x162fc>
   277b0:	cmn	r9, #-1073741823	; 0xc0000001
   277b4:	bhi	276a4 <__assert_fail@plt+0x161ac>
   277b8:	lsl	r6, r3, #3
   277bc:	mov	r1, r6
   277c0:	ldr	r0, [sp, #68]	; 0x44
   277c4:	bl	2a7bc <__assert_fail@plt+0x192c4>
   277c8:	subs	r3, r0, #0
   277cc:	beq	276a4 <__assert_fail@plt+0x161ac>
   277d0:	ldr	r0, [sp, #72]	; 0x48
   277d4:	str	r3, [sp, #68]	; 0x44
   277d8:	cmp	r0, #0
   277dc:	beq	277f4 <__assert_fail@plt+0x162fc>
   277e0:	mov	r1, r6
   277e4:	bl	2a7bc <__assert_fail@plt+0x192c4>
   277e8:	cmp	r0, #0
   277ec:	beq	276a4 <__assert_fail@plt+0x161ac>
   277f0:	str	r0, [sp, #72]	; 0x48
   277f4:	ldrb	r3, [sp, #135]	; 0x87
   277f8:	cmp	r3, #0
   277fc:	bne	27bf0 <__assert_fail@plt+0x166f8>
   27800:	add	r0, sp, #60	; 0x3c
   27804:	str	r9, [sp, #96]	; 0x60
   27808:	bl	18d68 <__assert_fail@plt+0x7870>
   2780c:	cmp	r0, #0
   27810:	beq	2777c <__assert_fail@plt+0x16284>
   27814:	b	276a8 <__assert_fail@plt+0x161b0>
   27818:	mov	r3, #12
   2781c:	str	r3, [sp, #36]	; 0x24
   27820:	b	27724 <__assert_fail@plt+0x1622c>
   27824:	add	r0, sp, #60	; 0x3c
   27828:	bl	18bc8 <__assert_fail@plt+0x76d0>
   2782c:	ldr	r5, [r8]
   27830:	mov	r6, #0
   27834:	str	r6, [r8, #24]
   27838:	orr	r2, r7, #8388608	; 0x800000
   2783c:	add	r1, sp, #60	; 0x3c
   27840:	add	r0, sp, #40	; 0x28
   27844:	str	r7, [r5, #128]	; 0x80
   27848:	str	r6, [sp, #36]	; 0x24
   2784c:	bl	1b950 <__assert_fail@plt+0xa458>
   27850:	ldr	ip, [sp, #100]	; 0x64
   27854:	add	r1, sp, #36	; 0x24
   27858:	str	r6, [sp]
   2785c:	add	r2, sp, #40	; 0x28
   27860:	str	r1, [sp, #4]
   27864:	mov	r3, r7
   27868:	mov	r1, r8
   2786c:	add	ip, ip, r0
   27870:	add	r0, sp, #60	; 0x3c
   27874:	str	ip, [sp, #100]	; 0x64
   27878:	bl	222fc <__assert_fail@plt+0x10e04>
   2787c:	ldr	r6, [sp, #36]	; 0x24
   27880:	adds	r6, r6, #0
   27884:	movne	r6, #1
   27888:	cmp	r0, #0
   2788c:	movne	r6, #0
   27890:	cmp	r6, #0
   27894:	mov	r2, r0
   27898:	bne	27f30 <__assert_fail@plt+0x16a38>
   2789c:	add	fp, sp, #48	; 0x30
   278a0:	str	r6, [sp, #48]	; 0x30
   278a4:	str	r6, [fp, #4]
   278a8:	ldr	r3, [r5, #64]	; 0x40
   278ac:	cmp	r3, #31
   278b0:	beq	27f3c <__assert_fail@plt+0x16a44>
   278b4:	lsl	ip, r3, #5
   278b8:	ldr	lr, [r5, #56]	; 0x38
   278bc:	add	r1, r3, #1
   278c0:	add	r3, ip, #4
   278c4:	add	ip, lr, ip
   278c8:	mov	r6, #0
   278cc:	mov	r0, #2
   278d0:	str	r1, [r5, #64]	; 0x40
   278d4:	str	r6, [ip, #4]
   278d8:	str	r6, [ip, #8]
   278dc:	str	r6, [ip, #12]
   278e0:	strb	r0, [sp, #52]	; 0x34
   278e4:	ldm	fp, {r0, r1}
   278e8:	add	r7, ip, #24
   278ec:	cmp	r2, r6
   278f0:	stm	r7, {r0, r1}
   278f4:	ldrb	r1, [ip, #30]
   278f8:	mvn	r0, #0
   278fc:	add	r3, lr, r3
   27900:	and	r1, r1, #243	; 0xf3
   27904:	str	r6, [ip, #16]
   27908:	str	r6, [ip, #20]
   2790c:	clz	r6, r3
   27910:	lsr	r6, r6, #5
   27914:	strb	r1, [ip, #30]
   27918:	str	r0, [ip, #32]
   2791c:	moveq	r2, r6
   27920:	beq	27954 <__assert_fail@plt+0x1645c>
   27924:	mov	r1, #0
   27928:	str	fp, [sp]
   2792c:	mov	ip, #16
   27930:	str	r1, [fp, #4]
   27934:	str	r1, [sp, #48]	; 0x30
   27938:	add	r0, r5, #56	; 0x38
   2793c:	add	r1, r5, #64	; 0x40
   27940:	strb	ip, [sp, #52]	; 0x34
   27944:	bl	19794 <__assert_fail@plt+0x829c>
   27948:	clz	r2, r0
   2794c:	mov	r3, r0
   27950:	lsr	r2, r2, #5
   27954:	orrs	r2, r6, r2
   27958:	str	r2, [sp, #12]
   2795c:	bne	27f28 <__assert_fail@plt+0x16a30>
   27960:	ldr	r6, [r8]
   27964:	str	r3, [r4, #52]	; 0x34
   27968:	ldr	r0, [r6, #4]
   2796c:	lsl	r0, r0, #2
   27970:	bl	2a790 <__assert_fail@plt+0x19298>
   27974:	ldr	r3, [r6, #4]
   27978:	str	r0, [r6, #12]
   2797c:	lsl	r0, r3, #2
   27980:	bl	2a790 <__assert_fail@plt+0x19298>
   27984:	ldr	r3, [r6, #4]
   27988:	add	r3, r3, r3, lsl #1
   2798c:	str	r0, [r6, #16]
   27990:	lsl	r0, r3, #2
   27994:	bl	2a790 <__assert_fail@plt+0x19298>
   27998:	ldr	r3, [r6, #4]
   2799c:	add	r3, r3, r3, lsl #1
   279a0:	str	r0, [r6, #20]
   279a4:	lsl	r0, r3, #2
   279a8:	bl	2a790 <__assert_fail@plt+0x19298>
   279ac:	ldr	r3, [r6, #12]
   279b0:	cmp	r3, #0
   279b4:	str	r0, [r6, #24]
   279b8:	beq	276a4 <__assert_fail@plt+0x161ac>
   279bc:	ldr	r3, [r6, #16]
   279c0:	cmp	r3, #0
   279c4:	beq	276a4 <__assert_fail@plt+0x161ac>
   279c8:	ldr	r3, [r6, #20]
   279cc:	cmp	r3, #0
   279d0:	beq	27e04 <__assert_fail@plt+0x1690c>
   279d4:	cmp	r0, #0
   279d8:	beq	276a4 <__assert_fail@plt+0x161ac>
   279dc:	ldr	r0, [r8, #24]
   279e0:	lsl	r0, r0, #2
   279e4:	bl	2a790 <__assert_fail@plt+0x19298>
   279e8:	cmp	r0, #0
   279ec:	str	r0, [r6, #132]	; 0x84
   279f0:	ldreq	r5, [r6, #52]	; 0x34
   279f4:	beq	27ae0 <__assert_fail@plt+0x165e8>
   279f8:	ldr	r2, [r8, #24]
   279fc:	cmp	r2, #0
   27a00:	subne	r1, r0, #4
   27a04:	ldrne	r3, [sp, #12]
   27a08:	beq	27a1c <__assert_fail@plt+0x16524>
   27a0c:	str	r3, [r1, #4]!
   27a10:	add	r3, r3, #1
   27a14:	cmp	r3, r2
   27a18:	bne	27a0c <__assert_fail@plt+0x16514>
   27a1c:	ldr	r5, [r6, #52]	; 0x34
   27a20:	mov	r9, #0
   27a24:	mov	r3, r5
   27a28:	ldrb	ip, [r5, #24]
   27a2c:	mov	lr, #1
   27a30:	cmp	ip, #4
   27a34:	beq	27a5c <__assert_fail@plt+0x16564>
   27a38:	cmp	ip, #17
   27a3c:	beq	27cb4 <__assert_fail@plt+0x167bc>
   27a40:	ldr	r1, [r3, #4]
   27a44:	cmp	r1, #0
   27a48:	beq	27a80 <__assert_fail@plt+0x16588>
   27a4c:	ldrb	ip, [r1, #24]
   27a50:	mov	r3, r1
   27a54:	cmp	ip, #4
   27a58:	bne	27a38 <__assert_fail@plt+0x16540>
   27a5c:	ldr	ip, [r3, #20]
   27a60:	ldr	r1, [r3, #4]
   27a64:	ldr	r7, [r0, ip, lsl #2]
   27a68:	cmp	r1, #0
   27a6c:	str	r7, [r3, #20]
   27a70:	ldr	ip, [r6, #80]	; 0x50
   27a74:	orr	ip, ip, lr, lsl r7
   27a78:	str	ip, [r6, #80]	; 0x50
   27a7c:	bne	27a4c <__assert_fail@plt+0x16554>
   27a80:	mov	ip, r9
   27a84:	b	27a8c <__assert_fail@plt+0x16594>
   27a88:	mov	r3, r1
   27a8c:	ldr	r1, [r3, #8]
   27a90:	cmp	r1, #0
   27a94:	cmpne	r1, ip
   27a98:	bne	27a4c <__assert_fail@plt+0x16554>
   27a9c:	ldr	r1, [r3]
   27aa0:	mov	ip, r3
   27aa4:	cmp	r1, #0
   27aa8:	bne	27a88 <__assert_fail@plt+0x16590>
   27aac:	cmp	r2, #0
   27ab0:	beq	286a8 <__assert_fail@plt+0x171b0>
   27ab4:	ldr	r3, [r0]
   27ab8:	cmp	r3, #0
   27abc:	beq	27ad0 <__assert_fail@plt+0x165d8>
   27ac0:	b	27ae0 <__assert_fail@plt+0x165e8>
   27ac4:	ldr	r1, [r0, r3, lsl #2]
   27ac8:	cmp	r1, r3
   27acc:	bne	27ae0 <__assert_fail@plt+0x165e8>
   27ad0:	add	r3, r3, #1
   27ad4:	cmp	r3, r2
   27ad8:	bcc	27ac4 <__assert_fail@plt+0x165cc>
   27adc:	beq	286a8 <__assert_fail@plt+0x171b0>
   27ae0:	mov	r7, #0
   27ae4:	b	27aec <__assert_fail@plt+0x165f4>
   27ae8:	mov	r5, r3
   27aec:	ldr	r3, [r5, #4]
   27af0:	cmp	r3, #0
   27af4:	bne	27ae8 <__assert_fail@plt+0x165f0>
   27af8:	ldr	r3, [r5, #8]
   27afc:	cmp	r3, #0
   27b00:	bne	27ae8 <__assert_fail@plt+0x165f0>
   27b04:	mov	r2, r7
   27b08:	b	27b3c <__assert_fail@plt+0x16644>
   27b0c:	ldr	r0, [sp, #48]	; 0x30
   27b10:	cmp	r0, #0
   27b14:	bne	276a8 <__assert_fail@plt+0x161b0>
   27b18:	ldr	r1, [r5]
   27b1c:	cmp	r1, #0
   27b20:	beq	27d30 <__assert_fail@plt+0x16838>
   27b24:	ldr	r2, [r1, #8]
   27b28:	cmp	r5, r2
   27b2c:	cmpne	r2, #0
   27b30:	bne	286bc <__assert_fail@plt+0x171c4>
   27b34:	ldr	r3, [r1, #4]
   27b38:	mov	r5, r1
   27b3c:	cmp	r3, #0
   27b40:	str	r7, [sp, #48]	; 0x30
   27b44:	beq	27b54 <__assert_fail@plt+0x1665c>
   27b48:	ldrb	r1, [r3, #24]
   27b4c:	cmp	r1, #17
   27b50:	beq	27d04 <__assert_fail@plt+0x1680c>
   27b54:	cmp	r2, #0
   27b58:	beq	27b18 <__assert_fail@plt+0x16620>
   27b5c:	ldrb	r3, [r2, #24]
   27b60:	cmp	r3, #17
   27b64:	bne	27b0c <__assert_fail@plt+0x16614>
   27b68:	mov	r1, r8
   27b6c:	mov	r0, fp
   27b70:	bl	270ac <__assert_fail@plt+0x15bb4>
   27b74:	cmp	r0, #0
   27b78:	str	r0, [r5, #8]
   27b7c:	strne	r5, [r0]
   27b80:	b	27b0c <__assert_fail@plt+0x16614>
   27b84:	cmp	r1, #1
   27b88:	bgt	27824 <__assert_fail@plt+0x1632c>
   27b8c:	cmp	r3, #0
   27b90:	beq	286c4 <__assert_fail@plt+0x171cc>
   27b94:	ldr	r2, [sp, #108]	; 0x6c
   27b98:	ldr	r3, [sp, #88]	; 0x58
   27b9c:	cmp	sl, r2
   27ba0:	movge	sl, r2
   27ba4:	cmp	sl, r3
   27ba8:	bgt	27bbc <__assert_fail@plt+0x166c4>
   27bac:	str	r3, [sp, #88]	; 0x58
   27bb0:	str	r3, [sp, #92]	; 0x5c
   27bb4:	b	2782c <__assert_fail@plt+0x16334>
   27bb8:	ldr	r6, [sp, #64]	; 0x40
   27bbc:	ldr	r2, [sp, #60]	; 0x3c
   27bc0:	ldr	r0, [sp, #84]	; 0x54
   27bc4:	add	r2, r2, r3
   27bc8:	ldr	r1, [sp, #124]	; 0x7c
   27bcc:	ldrb	r2, [r2, r0]
   27bd0:	ldrb	r2, [r1, r2]
   27bd4:	strb	r2, [r6, r3]
   27bd8:	add	r3, r3, #1
   27bdc:	cmp	sl, r3
   27be0:	bne	27bb8 <__assert_fail@plt+0x166c0>
   27be4:	str	r3, [sp, #88]	; 0x58
   27be8:	str	r3, [sp, #92]	; 0x5c
   27bec:	b	2782c <__assert_fail@plt+0x16334>
   27bf0:	mov	r1, r9
   27bf4:	ldr	r0, [sp, #64]	; 0x40
   27bf8:	bl	2a7bc <__assert_fail@plt+0x192c4>
   27bfc:	cmp	r0, #0
   27c00:	beq	276a4 <__assert_fail@plt+0x161ac>
   27c04:	str	r0, [sp, #64]	; 0x40
   27c08:	b	27800 <__assert_fail@plt+0x16308>
   27c0c:	mov	r1, #1
   27c10:	mov	r0, #32
   27c14:	bl	2a748 <__assert_fail@plt+0x19250>
   27c18:	cmp	r0, #0
   27c1c:	str	r0, [r4, #60]	; 0x3c
   27c20:	beq	27818 <__assert_fail@plt+0x16320>
   27c24:	mov	fp, #1
   27c28:	lsl	r9, r6, #3
   27c2c:	mov	sl, #0
   27c30:	mov	r0, r9
   27c34:	bl	11420 <btowc@plt>
   27c38:	cmn	r0, #1
   27c3c:	ldrne	r2, [r4, #60]	; 0x3c
   27c40:	ldrne	r3, [r2, r6]
   27c44:	orrne	r3, r3, fp, lsl sl
   27c48:	strne	r3, [r2, r6]
   27c4c:	bics	r3, r9, #127	; 0x7f
   27c50:	bne	27c64 <__assert_fail@plt+0x1676c>
   27c54:	cmp	r0, r9
   27c58:	ldrbne	r3, [r4, #88]	; 0x58
   27c5c:	orrne	r3, r3, #8
   27c60:	strbne	r3, [r4, #88]	; 0x58
   27c64:	add	sl, sl, #1
   27c68:	cmp	sl, #32
   27c6c:	add	r9, r9, #1
   27c70:	bne	27c30 <__assert_fail@plt+0x16738>
   27c74:	add	r6, r6, #4
   27c78:	cmp	r6, #32
   27c7c:	bne	27c28 <__assert_fail@plt+0x16730>
   27c80:	b	27530 <__assert_fail@plt+0x16038>
   27c84:	ldrb	r3, [r0, #3]
   27c88:	ldr	r1, [pc, #2024]	; 28478 <__assert_fail@plt+0x16f80>
   27c8c:	cmp	r3, #45	; 0x2d
   27c90:	moveq	r3, #4
   27c94:	movne	r3, #3
   27c98:	add	r0, r0, r3
   27c9c:	bl	111bc <strcmp@plt>
   27ca0:	cmp	r0, #0
   27ca4:	ldrbeq	r3, [r4, #88]	; 0x58
   27ca8:	orreq	r3, r3, #4
   27cac:	strbeq	r3, [r4, #88]	; 0x58
   27cb0:	b	27504 <__assert_fail@plt+0x1600c>
   27cb4:	ldr	r7, [r3, #4]
   27cb8:	cmp	r7, #0
   27cbc:	beq	27a80 <__assert_fail@plt+0x16588>
   27cc0:	ldrb	ip, [r7, #24]
   27cc4:	cmp	ip, #17
   27cc8:	movne	r3, r7
   27ccc:	bne	27a30 <__assert_fail@plt+0x16538>
   27cd0:	ldr	r1, [r7, #4]
   27cd4:	ldr	ip, [r7, #20]
   27cd8:	cmp	r1, #0
   27cdc:	str	r1, [r3, #4]
   27ce0:	strne	r3, [r1]
   27ce4:	ldr	r7, [r3, #20]
   27ce8:	cmp	ip, #31
   27cec:	ldr	r7, [r0, r7, lsl #2]
   27cf0:	str	r7, [r0, ip, lsl #2]
   27cf4:	ldrle	r7, [r6, #80]	; 0x50
   27cf8:	bicle	ip, r7, lr, lsl ip
   27cfc:	strle	ip, [r6, #80]	; 0x50
   27d00:	b	27a44 <__assert_fail@plt+0x1654c>
   27d04:	mov	r2, r3
   27d08:	mov	r1, r8
   27d0c:	mov	r0, fp
   27d10:	bl	270ac <__assert_fail@plt+0x15bb4>
   27d14:	ldr	r2, [r5, #8]
   27d18:	cmp	r0, #0
   27d1c:	str	r0, [r5, #4]
   27d20:	strne	r5, [r0]
   27d24:	cmp	r2, #0
   27d28:	bne	27b5c <__assert_fail@plt+0x16664>
   27d2c:	b	27b0c <__assert_fail@plt+0x16614>
   27d30:	ldr	r9, [r6, #52]	; 0x34
   27d34:	ldr	r7, [pc, #1856]	; 2847c <__assert_fail@plt+0x16f84>
   27d38:	ldr	r5, [pc, #1856]	; 28480 <__assert_fail@plt+0x16f88>
   27d3c:	b	27d44 <__assert_fail@plt+0x1684c>
   27d40:	mov	r9, r3
   27d44:	ldr	r3, [r9, #4]
   27d48:	cmp	r3, #0
   27d4c:	bne	27d40 <__assert_fail@plt+0x16848>
   27d50:	ldr	r3, [r9, #8]
   27d54:	cmp	r3, #0
   27d58:	bne	27d40 <__assert_fail@plt+0x16848>
   27d5c:	b	27dd8 <__assert_fail@plt+0x168e0>
   27d60:	add	r3, r9, #20
   27d64:	str	r9, [r9, #12]
   27d68:	ldm	r3, {r1, r2}
   27d6c:	mov	r0, r6
   27d70:	bl	192e4 <__assert_fail@plt+0x7dec>
   27d74:	cmn	r0, #1
   27d78:	str	r0, [r9, #28]
   27d7c:	beq	276a4 <__assert_fail@plt+0x161ac>
   27d80:	ldrb	r3, [r9, #24]
   27d84:	cmp	r3, #12
   27d88:	bne	27dac <__assert_fail@plt+0x168b4>
   27d8c:	ldr	r3, [r6]
   27d90:	ldr	r2, [r9, #20]
   27d94:	add	r0, r3, r0, lsl #3
   27d98:	and	r2, r2, r7
   27d9c:	ldr	r3, [r0, #4]
   27da0:	bic	r3, r3, r5
   27da4:	orr	r3, r3, r2, lsl #8
   27da8:	str	r3, [r0, #4]
   27dac:	ldr	r2, [r9]
   27db0:	cmp	r2, #0
   27db4:	beq	27e10 <__assert_fail@plt+0x16918>
   27db8:	ldr	r3, [r2, #8]
   27dbc:	cmp	r3, #0
   27dc0:	cmpne	r9, r3
   27dc4:	moveq	r9, #1
   27dc8:	movne	r9, #0
   27dcc:	cmp	r9, #0
   27dd0:	mov	r9, r2
   27dd4:	beq	27d40 <__assert_fail@plt+0x16848>
   27dd8:	ldrb	r3, [r9, #24]
   27ddc:	cmp	r3, #16
   27de0:	bne	27d60 <__assert_fail@plt+0x16868>
   27de4:	ldr	r3, [r9, #4]
   27de8:	ldr	r2, [r3, #12]
   27dec:	ldr	r3, [r3, #28]
   27df0:	str	r2, [r9, #12]
   27df4:	str	r3, [r9, #28]
   27df8:	b	27dac <__assert_fail@plt+0x168b4>
   27dfc:	ldr	r4, [sp, #12]
   27e00:	ldr	r8, [sp, #16]
   27e04:	mov	r3, #12
   27e08:	str	r3, [sp, #36]	; 0x24
   27e0c:	b	276ac <__assert_fail@plt+0x161b4>
   27e10:	ldr	r7, [r6, #52]	; 0x34
   27e14:	mov	r3, r7
   27e18:	ldrb	r1, [r3, #24]
   27e1c:	cmp	r1, #11
   27e20:	beq	27e50 <__assert_fail@plt+0x16958>
   27e24:	cmp	r1, #16
   27e28:	bne	27e60 <__assert_fail@plt+0x16968>
   27e2c:	ldmib	r3, {r0, r1}
   27e30:	ldr	ip, [r1, #12]
   27e34:	str	ip, [r0, #16]
   27e38:	ldr	ip, [r3, #16]
   27e3c:	mov	r3, r0
   27e40:	str	ip, [r1, #16]
   27e44:	ldrb	r1, [r3, #24]
   27e48:	cmp	r1, #11
   27e4c:	bne	27e24 <__assert_fail@plt+0x1692c>
   27e50:	ldr	r1, [r3, #4]
   27e54:	str	r3, [r1, #16]
   27e58:	mov	r3, r1
   27e5c:	b	27e18 <__assert_fail@plt+0x16920>
   27e60:	ldmib	r3, {r0, ip}
   27e64:	cmp	r0, #0
   27e68:	beq	28688 <__assert_fail@plt+0x17190>
   27e6c:	ldr	r1, [r3, #16]
   27e70:	cmp	ip, #0
   27e74:	str	r1, [r0, #16]
   27e78:	beq	27e8c <__assert_fail@plt+0x16994>
   27e7c:	ldr	r1, [r3, #16]
   27e80:	cmp	r0, #0
   27e84:	str	r1, [ip, #16]
   27e88:	beq	27e94 <__assert_fail@plt+0x1699c>
   27e8c:	mov	r3, r0
   27e90:	b	27e18 <__assert_fail@plt+0x16920>
   27e94:	mov	r1, ip
   27e98:	mov	r0, r2
   27e9c:	b	27eb8 <__assert_fail@plt+0x169c0>
   27ea0:	ldr	r9, [r3]
   27ea4:	cmp	r9, #0
   27ea8:	beq	27f7c <__assert_fail@plt+0x16a84>
   27eac:	ldr	r1, [r9, #8]
   27eb0:	mov	r0, r3
   27eb4:	mov	r3, r9
   27eb8:	cmp	r0, r1
   27ebc:	cmpne	r1, #0
   27ec0:	beq	27ea0 <__assert_fail@plt+0x169a8>
   27ec4:	mov	r3, r1
   27ec8:	b	27e18 <__assert_fail@plt+0x16920>
   27ecc:	ldr	r1, [sp, #16]
   27ed0:	ldr	r0, [sp, #64]	; 0x40
   27ed4:	str	r3, [sp, #28]
   27ed8:	bl	2a7bc <__assert_fail@plt+0x192c4>
   27edc:	cmp	r0, #0
   27ee0:	beq	276a4 <__assert_fail@plt+0x161ac>
   27ee4:	ldrb	ip, [sp, #135]	; 0x87
   27ee8:	str	r0, [sp, #64]	; 0x40
   27eec:	ldr	r3, [sp, #28]
   27ef0:	b	27690 <__assert_fail@plt+0x16198>
   27ef4:	mov	r0, r4
   27ef8:	mov	r1, #160	; 0xa0
   27efc:	bl	2a7bc <__assert_fail@plt+0x192c4>
   27f00:	subs	r4, r0, #0
   27f04:	beq	28734 <__assert_fail@plt+0x1723c>
   27f08:	mov	r3, #160	; 0xa0
   27f0c:	str	r4, [r8]
   27f10:	str	r3, [r8, #4]
   27f14:	b	27458 <__assert_fail@plt+0x15f60>
   27f18:	cmp	r2, #0
   27f1c:	movne	r3, lr
   27f20:	movne	r6, #1
   27f24:	bne	27924 <__assert_fail@plt+0x1642c>
   27f28:	mov	r3, #12
   27f2c:	str	r3, [sp, #36]	; 0x24
   27f30:	mov	r3, #0
   27f34:	str	r3, [r4, #52]	; 0x34
   27f38:	b	276ac <__assert_fail@plt+0x161b4>
   27f3c:	mov	r0, #996	; 0x3e4
   27f40:	str	r2, [sp, #12]
   27f44:	bl	2a790 <__assert_fail@plt+0x19298>
   27f48:	ldr	r2, [sp, #12]
   27f4c:	subs	lr, r0, #0
   27f50:	beq	27f18 <__assert_fail@plt+0x16a20>
   27f54:	ldr	r0, [r5, #56]	; 0x38
   27f58:	mov	ip, r6
   27f5c:	str	r0, [lr]
   27f60:	mov	r1, #1
   27f64:	mov	r3, #4
   27f68:	str	lr, [r5, #56]	; 0x38
   27f6c:	b	278c4 <__assert_fail@plt+0x163cc>
   27f70:	mov	sl, r5
   27f74:	mov	r1, #1
   27f78:	b	274b4 <__assert_fail@plt+0x15fbc>
   27f7c:	str	r4, [sp, #16]
   27f80:	ldrb	r3, [r7, #24]
   27f84:	ldr	r2, [r7, #28]
   27f88:	sub	r3, r3, #2
   27f8c:	cmp	r3, #14
   27f90:	ldrls	pc, [pc, r3, lsl #2]
   27f94:	b	28150 <__assert_fail@plt+0x16c58>
   27f98:	andeq	r8, r2, r8, asr r0
   27f9c:	andeq	r8, r2, r0, asr r1
   27fa0:	andeq	r8, r2, r0, lsr #2
   27fa4:	andeq	r8, r2, r0, asr r1
   27fa8:	andeq	r8, r2, r0, asr r1
   27fac:	andeq	r8, r2, r0, asr r1
   27fb0:	andeq	r8, r2, r4, ror #1
   27fb4:	andeq	r8, r2, r4, ror #1
   27fb8:	ldrdeq	r7, [r2], -r4
   27fbc:	ldrdeq	r7, [r2], -r4
   27fc0:	andeq	r8, r2, r4, ror #1
   27fc4:	andeq	r8, r2, r0, asr r1
   27fc8:	andeq	r8, r2, r0, asr r1
   27fcc:	andeq	r8, r2, r0, asr r1
   27fd0:	andeq	r8, r2, r8, asr r0
   27fd4:	ldrb	r3, [r6, #88]	; 0x58
   27fd8:	ldr	r5, [r6, #20]
   27fdc:	add	r2, r2, r2, lsl #1
   27fe0:	orr	r3, r3, #1
   27fe4:	strb	r3, [r6, #88]	; 0x58
   27fe8:	ldr	r3, [r7, #4]
   27fec:	mov	r0, #8
   27ff0:	cmp	r3, #0
   27ff4:	ldrne	r3, [r3, #12]
   27ff8:	ldreq	r3, [r7, #16]
   27ffc:	ldr	sl, [r3, #28]
   28000:	ldr	r3, [r7, #8]
   28004:	cmp	r3, #0
   28008:	ldrne	r3, [r3, #12]
   2800c:	ldreq	r3, [r7, #16]
   28010:	ldr	r4, [r3, #28]
   28014:	mov	r3, #2
   28018:	str	r3, [r5, r2, lsl #2]
   2801c:	add	r5, r5, r2, lsl r3
   28020:	bl	2a790 <__assert_fail@plt+0x19298>
   28024:	cmp	r0, #0
   28028:	str	r0, [r5, #8]
   2802c:	beq	276a0 <__assert_fail@plt+0x161a8>
   28030:	cmp	sl, r4
   28034:	moveq	r3, #1
   28038:	streq	r3, [r5, #4]
   2803c:	streq	sl, [r0]
   28040:	beq	28058 <__assert_fail@plt+0x16b60>
   28044:	mov	r3, #2
   28048:	str	r3, [r5, #4]
   2804c:	strlt	sl, [r0]
   28050:	strlt	r4, [r0, #4]
   28054:	stmge	r0, {r4, sl}
   28058:	ldr	r3, [r7, #4]
   2805c:	cmp	r3, #0
   28060:	moveq	r2, r9
   28064:	beq	28074 <__assert_fail@plt+0x16b7c>
   28068:	mov	r7, r3
   2806c:	b	27f80 <__assert_fail@plt+0x16a88>
   28070:	mov	r7, r5
   28074:	ldr	r3, [r7, #8]
   28078:	cmp	r3, #0
   2807c:	cmpne	r3, r2
   28080:	moveq	sl, #1
   28084:	movne	sl, #0
   28088:	bne	28068 <__assert_fail@plt+0x16b70>
   2808c:	ldr	r5, [r7]
   28090:	mov	r2, r7
   28094:	cmp	r5, #0
   28098:	bne	28070 <__assert_fail@plt+0x16b78>
   2809c:	ldr	r4, [sp, #16]
   280a0:	ldr	r2, [r6, #24]
   280a4:	ldr	r9, [sp, #12]
   280a8:	add	r7, r5, r5, lsl #1
   280ac:	lsl	r7, r7, #2
   280b0:	add	r3, r2, r7
   280b4:	ldr	r3, [r3, #4]
   280b8:	cmp	r3, #0
   280bc:	beq	28164 <__assert_fail@plt+0x16c6c>
   280c0:	ldr	r0, [r6, #8]
   280c4:	add	r5, r5, #1
   280c8:	cmp	r0, r5
   280cc:	bne	280a8 <__assert_fail@plt+0x16bb0>
   280d0:	cmp	r9, #0
   280d4:	beq	281c4 <__assert_fail@plt+0x16ccc>
   280d8:	ldr	r9, [sp, #12]
   280dc:	mov	r5, #0
   280e0:	b	280a8 <__assert_fail@plt+0x16bb0>
   280e4:	ldr	r1, [r7, #16]
   280e8:	add	r2, r2, r2, lsl #1
   280ec:	ldr	r3, [r6, #20]
   280f0:	ldr	sl, [r1, #28]
   280f4:	add	r5, r3, r2, lsl #2
   280f8:	mov	r0, #4
   280fc:	mov	r1, #1
   28100:	str	r1, [r3, r2, lsl #2]
   28104:	str	r1, [r5, #4]
   28108:	bl	2a790 <__assert_fail@plt+0x19298>
   2810c:	cmp	r0, #0
   28110:	str	r0, [r5, #8]
   28114:	beq	2873c <__assert_fail@plt+0x17244>
   28118:	str	sl, [r0]
   2811c:	b	28058 <__assert_fail@plt+0x16b60>
   28120:	ldr	r1, [r7, #16]
   28124:	ldr	r3, [r6, #12]
   28128:	ldr	sl, [r1, #28]
   2812c:	str	sl, [r3, r2, lsl #2]
   28130:	ldrb	r3, [r7, #24]
   28134:	cmp	r3, #4
   28138:	bne	28058 <__assert_fail@plt+0x16b60>
   2813c:	add	r2, r2, r2, lsl #1
   28140:	ldr	r3, [r6, #20]
   28144:	mov	r0, #4
   28148:	add	r5, r3, r2, lsl #2
   2814c:	b	280fc <__assert_fail@plt+0x16c04>
   28150:	ldr	r1, [r7, #16]
   28154:	ldr	r3, [r6, #12]
   28158:	ldr	r1, [r1, #28]
   2815c:	str	r1, [r3, r2, lsl #2]
   28160:	b	28058 <__assert_fail@plt+0x16b60>
   28164:	mov	r3, #1
   28168:	mov	r2, r5
   2816c:	mov	r1, r6
   28170:	mov	r0, fp
   28174:	bl	1cbd4 <__assert_fail@plt+0xb6dc>
   28178:	cmp	r0, #0
   2817c:	bne	276a8 <__assert_fail@plt+0x161b0>
   28180:	ldr	r2, [r6, #24]
   28184:	add	r7, r2, r7
   28188:	ldr	r7, [r7, #4]
   2818c:	cmp	r7, #0
   28190:	bne	280c0 <__assert_fail@plt+0x16bc8>
   28194:	ldr	r0, [sp, #56]	; 0x38
   28198:	bl	14214 <__assert_fail@plt+0x2d1c>
   2819c:	ldr	r3, [r6, #8]
   281a0:	add	r5, r5, #1
   281a4:	cmp	r3, r5
   281a8:	movne	r9, sl
   281ac:	beq	281b8 <__assert_fail@plt+0x16cc0>
   281b0:	ldr	r2, [r6, #24]
   281b4:	b	280a8 <__assert_fail@plt+0x16bb0>
   281b8:	mov	r5, r7
   281bc:	ldr	r9, [sp, #12]
   281c0:	b	281b0 <__assert_fail@plt+0x16cb8>
   281c4:	ldrb	r3, [r8, #28]
   281c8:	tst	r3, #16
   281cc:	bne	281dc <__assert_fail@plt+0x16ce4>
   281d0:	ldr	r3, [r8, #24]
   281d4:	cmp	r3, #0
   281d8:	bne	28698 <__assert_fail@plt+0x171a0>
   281dc:	ldr	r3, [r6, #76]	; 0x4c
   281e0:	cmp	r3, #0
   281e4:	beq	28314 <__assert_fail@plt+0x16e1c>
   281e8:	add	r0, r0, r0, lsl #1
   281ec:	lsl	r0, r0, #2
   281f0:	bl	2a790 <__assert_fail@plt+0x19298>
   281f4:	cmp	r0, #0
   281f8:	str	r0, [r6, #28]
   281fc:	beq	276a4 <__assert_fail@plt+0x161ac>
   28200:	ldr	r3, [r6, #8]
   28204:	cmp	r3, #0
   28208:	beq	28314 <__assert_fail@plt+0x16e1c>
   2820c:	mov	r3, #0
   28210:	mov	r2, r0
   28214:	mov	r1, r3
   28218:	mov	r0, r3
   2821c:	b	28224 <__assert_fail@plt+0x16d2c>
   28220:	ldr	r2, [r6, #28]
   28224:	add	ip, r2, r3
   28228:	str	r1, [r2, r3]
   2822c:	str	r1, [ip, #4]
   28230:	str	r1, [ip, #8]
   28234:	ldr	r2, [r6, #8]
   28238:	add	r0, r0, #1
   2823c:	cmp	r0, r2
   28240:	add	r3, r3, #12
   28244:	bcc	28220 <__assert_fail@plt+0x16d28>
   28248:	cmp	r2, #0
   2824c:	beq	28314 <__assert_fail@plt+0x16e1c>
   28250:	mov	r3, #0
   28254:	ldr	lr, [r6, #24]
   28258:	str	r8, [sp, #16]
   2825c:	mov	sl, r3
   28260:	mov	r8, r3
   28264:	str	r4, [sp, #12]
   28268:	add	r0, lr, r8
   2826c:	ldmib	r0, {r3, r7}
   28270:	cmp	r3, #0
   28274:	ble	282fc <__assert_fail@plt+0x16e04>
   28278:	sub	r7, r7, #4
   2827c:	mov	r5, #0
   28280:	b	282a4 <__assert_fail@plt+0x16dac>
   28284:	ldr	r3, [r4, #8]
   28288:	add	r1, r2, #1
   2828c:	str	r1, [r4, #4]
   28290:	str	sl, [r3, r2, lsl #2]
   28294:	ldr	r3, [r0, #4]
   28298:	add	r5, r5, #1
   2829c:	cmp	r5, r3
   282a0:	bge	282f8 <__assert_fail@plt+0x16e00>
   282a4:	ldr	r3, [r7, #4]!
   282a8:	ldr	ip, [r6, #28]
   282ac:	add	r3, r3, r3, lsl #1
   282b0:	add	r4, ip, r3, lsl #2
   282b4:	ldr	r1, [ip, r3, lsl #2]
   282b8:	ldr	r2, [r4, #4]
   282bc:	cmp	r1, r2
   282c0:	bne	28284 <__assert_fail@plt+0x16d8c>
   282c4:	add	r2, r2, #1
   282c8:	ldr	r0, [r4, #8]
   282cc:	lsl	r1, r2, #1
   282d0:	str	r1, [ip, r3, lsl #2]
   282d4:	lsl	r1, r2, #3
   282d8:	bl	2a7bc <__assert_fail@plt+0x192c4>
   282dc:	subs	r3, r0, #0
   282e0:	beq	27dfc <__assert_fail@plt+0x16904>
   282e4:	ldr	lr, [r6, #24]
   282e8:	ldr	r2, [r4, #4]
   282ec:	add	r0, lr, r8
   282f0:	str	r3, [r4, #8]
   282f4:	b	28288 <__assert_fail@plt+0x16d90>
   282f8:	ldr	r2, [r6, #8]
   282fc:	add	sl, sl, #1
   28300:	cmp	sl, r2
   28304:	add	r8, r8, #12
   28308:	bcc	28268 <__assert_fail@plt+0x16d70>
   2830c:	ldr	r4, [sp, #12]
   28310:	ldr	r8, [sp, #16]
   28314:	ldrb	r2, [r4, #88]	; 0x58
   28318:	ldr	r3, [sp, #20]
   2831c:	clz	r3, r3
   28320:	lsr	r3, r3, #5
   28324:	mov	r1, #0
   28328:	ands	r3, r3, r2, lsr #2
   2832c:	str	r1, [sp, #36]	; 0x24
   28330:	beq	28340 <__assert_fail@plt+0x16e48>
   28334:	ldr	r1, [r8, #20]
   28338:	cmp	r1, #0
   2833c:	beq	28750 <__assert_fail@plt+0x17258>
   28340:	ldr	r3, [r4, #52]	; 0x34
   28344:	ldr	r5, [r4, #24]
   28348:	ldr	r3, [r3, #12]
   2834c:	ldr	r3, [r3, #28]
   28350:	str	r3, [r4, #72]	; 0x48
   28354:	add	r3, r3, r3, lsl #1
   28358:	add	r5, r5, r3, lsl #2
   2835c:	ldr	r3, [r5, #4]
   28360:	str	r3, [sp, #52]	; 0x34
   28364:	ldr	r2, [r5, #4]
   28368:	cmp	r2, #0
   2836c:	ble	285dc <__assert_fail@plt+0x170e4>
   28370:	lsl	r0, r3, #2
   28374:	str	r3, [sp, #48]	; 0x30
   28378:	bl	2a790 <__assert_fail@plt+0x19298>
   2837c:	cmp	r0, #0
   28380:	mov	r6, r0
   28384:	str	r0, [sp, #56]	; 0x38
   28388:	beq	28680 <__assert_fail@plt+0x17188>
   2838c:	ldr	r2, [r5, #4]
   28390:	ldr	r1, [r5, #8]
   28394:	lsl	r2, r2, #2
   28398:	bl	11234 <memcpy@plt>
   2839c:	mov	r0, r6
   283a0:	ldr	r3, [r4, #76]	; 0x4c
   283a4:	mov	r7, #0
   283a8:	cmp	r3, r7
   283ac:	str	r7, [sp, #40]	; 0x28
   283b0:	ble	28500 <__assert_fail@plt+0x17008>
   283b4:	ldr	r6, [sp, #52]	; 0x34
   283b8:	cmp	r6, r7
   283bc:	ble	28500 <__assert_fail@plt+0x17008>
   283c0:	mov	r5, r7
   283c4:	b	283d8 <__assert_fail@plt+0x16ee0>
   283c8:	add	r7, r7, #1
   283cc:	cmp	r6, r7
   283d0:	ble	28500 <__assert_fail@plt+0x17008>
   283d4:	ldr	r0, [sp, #56]	; 0x38
   283d8:	ldr	sl, [r0, r7, lsl #2]
   283dc:	ldr	lr, [r4]
   283e0:	add	r9, lr, sl, lsl #3
   283e4:	ldrb	r3, [r9, #4]
   283e8:	cmp	r3, #4
   283ec:	bne	283c8 <__assert_fail@plt+0x16ed0>
   283f0:	sub	r1, r0, #4
   283f4:	mov	r3, #0
   283f8:	b	28408 <__assert_fail@plt+0x16f10>
   283fc:	add	r3, r3, #1
   28400:	cmp	r6, r3
   28404:	beq	283c8 <__assert_fail@plt+0x16ed0>
   28408:	ldr	r2, [r1, #4]!
   2840c:	add	ip, lr, r2, lsl #3
   28410:	ldrb	ip, [ip, #4]
   28414:	cmp	ip, #9
   28418:	bne	283fc <__assert_fail@plt+0x16f04>
   2841c:	ldr	ip, [lr, r2, lsl #3]
   28420:	ldr	r2, [r9]
   28424:	cmp	ip, r2
   28428:	bne	283fc <__assert_fail@plt+0x16f04>
   2842c:	ldr	r3, [r4, #20]
   28430:	add	sl, sl, sl, lsl #1
   28434:	sub	ip, r6, #1
   28438:	add	sl, r3, sl, lsl #2
   2843c:	mov	r1, r5
   28440:	ldr	r3, [sl, #8]
   28444:	ldr	lr, [r3]
   28448:	cmp	r1, ip
   2844c:	bcs	284a4 <__assert_fail@plt+0x16fac>
   28450:	add	r2, r1, ip
   28454:	lsr	r2, r2, #1
   28458:	ldr	r3, [r0, r2, lsl #2]
   2845c:	cmp	lr, r3
   28460:	ble	2849c <__assert_fail@plt+0x16fa4>
   28464:	b	285c0 <__assert_fail@plt+0x170c8>
   28468:	beq	fead2f14 <opterr@@GLIBC_2.4+0xfea95d6c>
   2846c:	ldrdeq	fp, [r2], -ip
	...
   28478:	andeq	ip, r2, r4, lsr #2
   2847c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   28480:	andeq	pc, r3, r0, lsl #30
   28484:	add	r3, r2, r1
   28488:	lsr	r3, r3, #1
   2848c:	ldr	ip, [r0, r3, lsl #2]
   28490:	cmp	lr, ip
   28494:	bgt	285c8 <__assert_fail@plt+0x170d0>
   28498:	mov	r2, r3
   2849c:	cmp	r2, r1
   284a0:	bhi	28484 <__assert_fail@plt+0x16f8c>
   284a4:	ldr	r3, [r0, r1, lsl #2]
   284a8:	cmp	lr, r3
   284ac:	beq	283c8 <__assert_fail@plt+0x16ed0>
   284b0:	add	lr, lr, lr, lsl #1
   284b4:	ldr	r3, [r4, #24]
   284b8:	adds	r7, r3, lr, lsl #2
   284bc:	beq	285d4 <__assert_fail@plt+0x170dc>
   284c0:	ldr	r3, [r7, #4]
   284c4:	cmp	r3, #0
   284c8:	beq	285d4 <__assert_fail@plt+0x170dc>
   284cc:	ldr	r2, [sp, #48]	; 0x30
   284d0:	add	r6, r6, r3, lsl #1
   284d4:	cmp	r2, r6
   284d8:	blt	285f0 <__assert_fail@plt+0x170f8>
   284dc:	mov	r1, r7
   284e0:	mov	r0, fp
   284e4:	bl	19a1c <__assert_fail@plt+0x8524>
   284e8:	cmp	r0, #0
   284ec:	bne	28544 <__assert_fail@plt+0x1704c>
   284f0:	ldr	r6, [sp, #52]	; 0x34
   284f4:	mov	r7, #1
   284f8:	cmp	r6, r7
   284fc:	bgt	283d4 <__assert_fail@plt+0x16edc>
   28500:	mov	r3, #0
   28504:	mov	r2, fp
   28508:	mov	r1, r4
   2850c:	add	r0, sp, #40	; 0x28
   28510:	bl	22508 <__assert_fail@plt+0x11010>
   28514:	cmp	r0, #0
   28518:	str	r0, [r4, #36]	; 0x24
   2851c:	beq	28678 <__assert_fail@plt+0x17180>
   28520:	ldrsb	r3, [r0, #52]	; 0x34
   28524:	cmp	r3, #0
   28528:	strge	r0, [r4, #48]	; 0x30
   2852c:	strge	r0, [r4, #44]	; 0x2c
   28530:	strge	r0, [r4, #40]	; 0x28
   28534:	blt	28614 <__assert_fail@plt+0x1711c>
   28538:	ldr	r0, [sp, #56]	; 0x38
   2853c:	bl	14214 <__assert_fail@plt+0x2d1c>
   28540:	mov	r0, #0
   28544:	ldr	r6, [r8]
   28548:	str	r0, [sp, #36]	; 0x24
   2854c:	ldr	r0, [r6, #56]	; 0x38
   28550:	cmp	r0, #0
   28554:	beq	28568 <__assert_fail@plt+0x17070>
   28558:	ldr	r5, [r0]
   2855c:	bl	14214 <__assert_fail@plt+0x2d1c>
   28560:	subs	r0, r5, #0
   28564:	bne	28558 <__assert_fail@plt+0x17060>
   28568:	mov	r3, #31
   2856c:	mov	r5, #0
   28570:	str	r3, [r6, #64]	; 0x40
   28574:	ldr	r0, [r6, #16]
   28578:	str	r5, [r6, #56]	; 0x38
   2857c:	str	r5, [r6, #52]	; 0x34
   28580:	bl	14214 <__assert_fail@plt+0x2d1c>
   28584:	ldr	r0, [sp, #68]	; 0x44
   28588:	str	r5, [r6, #16]
   2858c:	bl	14214 <__assert_fail@plt+0x2d1c>
   28590:	ldr	r0, [sp, #72]	; 0x48
   28594:	bl	14214 <__assert_fail@plt+0x2d1c>
   28598:	ldrb	r3, [sp, #135]	; 0x87
   2859c:	cmp	r3, r5
   285a0:	beq	285ac <__assert_fail@plt+0x170b4>
   285a4:	ldr	r0, [sp, #64]	; 0x40
   285a8:	bl	14214 <__assert_fail@plt+0x2d1c>
   285ac:	ldr	r0, [sp, #36]	; 0x24
   285b0:	cmp	r0, #0
   285b4:	bne	27710 <__assert_fail@plt+0x16218>
   285b8:	add	sp, sp, #148	; 0x94
   285bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   285c0:	mov	r3, r2
   285c4:	mov	r2, ip
   285c8:	add	r1, r3, #1
   285cc:	mov	ip, r2
   285d0:	b	28448 <__assert_fail@plt+0x16f50>
   285d4:	mov	r7, #1
   285d8:	b	283cc <__assert_fail@plt+0x16ed4>
   285dc:	mov	r0, #0
   285e0:	str	r0, [sp, #48]	; 0x30
   285e4:	str	r0, [fp, #4]
   285e8:	str	r0, [fp, #8]
   285ec:	b	283a0 <__assert_fail@plt+0x16ea8>
   285f0:	add	r3, r3, r2
   285f4:	lsl	r1, r3, #3
   285f8:	lsl	r6, r3, #1
   285fc:	bl	2a7bc <__assert_fail@plt+0x192c4>
   28600:	cmp	r0, #0
   28604:	beq	28680 <__assert_fail@plt+0x17188>
   28608:	str	r0, [sp, #56]	; 0x38
   2860c:	str	r6, [sp, #48]	; 0x30
   28610:	b	284dc <__assert_fail@plt+0x16fe4>
   28614:	mov	r3, #1
   28618:	mov	r2, fp
   2861c:	mov	r1, r4
   28620:	add	r0, sp, #40	; 0x28
   28624:	bl	22508 <__assert_fail@plt+0x11010>
   28628:	mov	r3, #2
   2862c:	mov	r2, fp
   28630:	mov	r1, r4
   28634:	str	r0, [r4, #40]	; 0x28
   28638:	add	r0, sp, #40	; 0x28
   2863c:	bl	22508 <__assert_fail@plt+0x11010>
   28640:	mov	r3, #6
   28644:	mov	r2, fp
   28648:	mov	r1, r4
   2864c:	str	r0, [r4, #44]	; 0x2c
   28650:	add	r0, sp, #40	; 0x28
   28654:	bl	22508 <__assert_fail@plt+0x11010>
   28658:	ldr	r3, [r4, #40]	; 0x28
   2865c:	cmp	r3, #0
   28660:	str	r0, [r4, #48]	; 0x30
   28664:	beq	28678 <__assert_fail@plt+0x17180>
   28668:	ldr	r3, [r4, #44]	; 0x2c
   2866c:	cmp	r0, #0
   28670:	cmpne	r3, #0
   28674:	bne	28538 <__assert_fail@plt+0x17040>
   28678:	ldr	r0, [sp, #40]	; 0x28
   2867c:	b	28544 <__assert_fail@plt+0x1704c>
   28680:	mov	r0, #12
   28684:	b	28544 <__assert_fail@plt+0x1704c>
   28688:	cmp	ip, #0
   2868c:	mov	r1, ip
   28690:	beq	27e98 <__assert_fail@plt+0x169a0>
   28694:	b	27e7c <__assert_fail@plt+0x16984>
   28698:	ldrb	r3, [r6, #88]	; 0x58
   2869c:	tst	r3, #1
   286a0:	bne	281e8 <__assert_fail@plt+0x16cf0>
   286a4:	b	281dc <__assert_fail@plt+0x16ce4>
   286a8:	bl	14214 <__assert_fail@plt+0x2d1c>
   286ac:	mov	r3, #0
   286b0:	ldr	r5, [r6, #52]	; 0x34
   286b4:	str	r3, [r6, #132]	; 0x84
   286b8:	b	27ae0 <__assert_fail@plt+0x165e8>
   286bc:	mov	r3, r2
   286c0:	b	27ae8 <__assert_fail@plt+0x165f0>
   286c4:	str	sl, [sp, #88]	; 0x58
   286c8:	str	sl, [sp, #92]	; 0x5c
   286cc:	b	2782c <__assert_fail@plt+0x16334>
   286d0:	ldr	r3, [sp, #108]	; 0x6c
   286d4:	ldr	r5, [sp, #88]	; 0x58
   286d8:	cmp	sl, r3
   286dc:	movge	sl, r3
   286e0:	cmp	sl, r5
   286e4:	ble	28728 <__assert_fail@plt+0x17230>
   286e8:	bl	11378 <__ctype_toupper_loc@plt>
   286ec:	b	286f4 <__assert_fail@plt+0x171fc>
   286f0:	ldr	r6, [sp, #64]	; 0x40
   286f4:	ldr	r3, [sp, #60]	; 0x3c
   286f8:	ldr	r1, [sp, #84]	; 0x54
   286fc:	add	r3, r3, r5
   28700:	ldr	r2, [sp, #124]	; 0x7c
   28704:	ldrb	r3, [r3, r1]
   28708:	cmp	r2, #0
   2870c:	ldrbne	r3, [r2, r3]
   28710:	ldr	r2, [r0]
   28714:	ldr	r3, [r2, r3, lsl #2]
   28718:	strb	r3, [r6, r5]
   2871c:	add	r5, r5, #1
   28720:	cmp	sl, r5
   28724:	bne	286f0 <__assert_fail@plt+0x171f8>
   28728:	str	r5, [sp, #88]	; 0x58
   2872c:	str	r5, [sp, #92]	; 0x5c
   28730:	b	2782c <__assert_fail@plt+0x16334>
   28734:	mov	r0, #12
   28738:	b	2773c <__assert_fail@plt+0x16244>
   2873c:	ldr	r4, [sp, #16]
   28740:	str	r0, [r5, #4]
   28744:	str	r0, [r5]
   28748:	mov	r0, #12
   2874c:	b	276a8 <__assert_fail@plt+0x161b0>
   28750:	ldr	r5, [r4, #8]
   28754:	cmp	r5, #0
   28758:	beq	2888c <__assert_fail@plt+0x17394>
   2875c:	ldr	r0, [r4]
   28760:	mov	r2, r1
   28764:	mov	r6, r0
   28768:	mov	r1, r0
   2876c:	mov	lr, r9
   28770:	ldrb	ip, [r6, #4]
   28774:	sub	ip, ip, #1
   28778:	cmp	ip, #11
   2877c:	ldrls	pc, [pc, ip, lsl #2]
   28780:	b	28828 <__assert_fail@plt+0x17330>
   28784:	andeq	r8, r2, r8, lsl r8
   28788:			; <UNDEFINED> instruction: 0x000287b8
   2878c:	andeq	r8, r2, ip, lsr #16
   28790:			; <UNDEFINED> instruction: 0x000287b8
   28794:			; <UNDEFINED> instruction: 0x000287b4
   28798:	andeq	r8, r2, r0, asr #6
   2879c:	andeq	r8, r2, r8, lsr #16
   287a0:			; <UNDEFINED> instruction: 0x000287b8
   287a4:			; <UNDEFINED> instruction: 0x000287b8
   287a8:			; <UNDEFINED> instruction: 0x000287b8
   287ac:			; <UNDEFINED> instruction: 0x000287b8
   287b0:	andeq	r8, r2, r4, ror #16
   287b4:	mov	lr, r3
   287b8:	add	r2, r2, #1
   287bc:	cmp	r2, r5
   287c0:	add	r6, r6, #8
   287c4:	bne	28770 <__assert_fail@plt+0x17278>
   287c8:	orr	r9, r9, lr
   287cc:	ands	r9, r9, #255	; 0xff
   287d0:	beq	2888c <__assert_fail@plt+0x17394>
   287d4:	add	r2, r0, r2, lsl #3
   287d8:	mov	r0, #7
   287dc:	b	287f4 <__assert_fail@plt+0x172fc>
   287e0:	cmp	r3, #5
   287e4:	strbeq	r0, [r1, #4]
   287e8:	add	r1, r1, #8
   287ec:	cmp	r1, r2
   287f0:	beq	28888 <__assert_fail@plt+0x17390>
   287f4:	ldrb	r3, [r1, #4]
   287f8:	cmp	r3, #1
   287fc:	bne	287e0 <__assert_fail@plt+0x172e8>
   28800:	ldrsb	r3, [r1]
   28804:	cmp	r3, #0
   28808:	ldrblt	r3, [r1, #6]
   2880c:	biclt	r3, r3, #32
   28810:	strblt	r3, [r1, #6]
   28814:	b	287e8 <__assert_fail@plt+0x172f0>
   28818:	ldrb	ip, [r0, r2, lsl #3]
   2881c:	lsrs	ip, ip, #7
   28820:	movne	r9, r3
   28824:	b	287b8 <__assert_fail@plt+0x172c0>
   28828:	bl	114ec <abort@plt>
   2882c:	ldr	ip, [r0, r2, lsl #3]
   28830:	ldr	r7, [ip, #16]
   28834:	cmp	r7, #0
   28838:	bne	28340 <__assert_fail@plt+0x16e48>
   2883c:	ldr	r7, [ip, #20]
   28840:	cmp	r7, #0
   28844:	bne	28340 <__assert_fail@plt+0x16e48>
   28848:	ldr	r7, [ip, #24]
   2884c:	cmp	r7, #0
   28850:	bne	28340 <__assert_fail@plt+0x16e48>
   28854:	ldr	ip, [ip, #28]
   28858:	cmp	ip, #0
   2885c:	beq	287b8 <__assert_fail@plt+0x172c0>
   28860:	b	28340 <__assert_fail@plt+0x16e48>
   28864:	ldr	ip, [r0, r2, lsl #3]
   28868:	cmp	ip, #32
   2886c:	beq	287b8 <__assert_fail@plt+0x172c0>
   28870:	bls	288bc <__assert_fail@plt+0x173c4>
   28874:	cmp	ip, #64	; 0x40
   28878:	beq	287b8 <__assert_fail@plt+0x172c0>
   2887c:	cmp	ip, #128	; 0x80
   28880:	beq	287b8 <__assert_fail@plt+0x172c0>
   28884:	b	28340 <__assert_fail@plt+0x16e48>
   28888:	mov	r9, lr
   2888c:	ldr	r2, [r4, #76]	; 0x4c
   28890:	ldrb	r3, [r4, #88]	; 0x58
   28894:	cmp	r2, #0
   28898:	movle	r2, r9
   2889c:	orrgt	r2, r9, #1
   288a0:	and	r2, r2, #1
   288a4:	and	r3, r3, #249	; 0xf9
   288a8:	orr	r3, r3, r2, lsl #1
   288ac:	mov	r2, #1
   288b0:	strb	r3, [r4, #88]	; 0x58
   288b4:	str	r2, [r4, #92]	; 0x5c
   288b8:	b	28340 <__assert_fail@plt+0x16e48>
   288bc:	cmp	ip, #16
   288c0:	beq	287b8 <__assert_fail@plt+0x172c0>
   288c4:	b	28340 <__assert_fail@plt+0x16e48>
   288c8:	ldr	r3, [pc, #96]	; 28930 <__assert_fail@plt+0x17438>
   288cc:	push	{r4, lr}
   288d0:	mov	lr, r2
   288d4:	ldr	r3, [r3]
   288d8:	ldrb	ip, [lr, #28]
   288dc:	mov	r2, r1
   288e0:	mov	r1, r0
   288e4:	lsr	r0, r3, #21
   288e8:	and	r4, r0, #16
   288ec:	and	r0, ip, #239	; 0xef
   288f0:	orr	r0, r0, r4
   288f4:	orr	r0, r0, #128	; 0x80
   288f8:	strb	r0, [lr, #28]
   288fc:	mov	r0, lr
   28900:	bl	27410 <__assert_fail@plt+0x15f18>
   28904:	subs	r3, r0, #0
   28908:	popeq	{r4, pc}
   2890c:	ldr	r1, [pc, #32]	; 28934 <__assert_fail@plt+0x1743c>
   28910:	mov	r2, #5
   28914:	add	r3, r1, r3, lsl #2
   28918:	add	r1, r1, #32
   2891c:	ldr	r3, [r3, #416]	; 0x1a0
   28920:	mov	r0, #0
   28924:	add	r1, r1, r3
   28928:	pop	{r4, lr}
   2892c:	b	11288 <dcgettext@plt>
   28930:	strdeq	sp, [r3], -r0
   28934:	ldrdeq	fp, [r2], -ip
   28938:	ldr	r3, [pc, #12]	; 2894c <__assert_fail@plt+0x17454>
   2893c:	ldr	r2, [r3]
   28940:	str	r0, [r3]
   28944:	mov	r0, r2
   28948:	bx	lr
   2894c:	strdeq	sp, [r3], -r0
   28950:	push	{r4, r5, r6, lr}
   28954:	mov	r2, #256	; 0x100
   28958:	ldr	r5, [r0]
   2895c:	ldr	r6, [r0, #16]
   28960:	mov	r4, r0
   28964:	mov	r1, #0
   28968:	mov	r0, r6
   2896c:	bl	11414 <memset@plt>
   28970:	ldr	r1, [r5, #36]	; 0x24
   28974:	mov	r3, r6
   28978:	add	r2, r1, #12
   2897c:	mov	r0, r4
   28980:	add	r1, r1, #8
   28984:	bl	1b20c <__assert_fail@plt+0x9d14>
   28988:	ldr	r0, [r5, #40]	; 0x28
   2898c:	ldr	r3, [r5, #36]	; 0x24
   28990:	cmp	r3, r0
   28994:	beq	289b0 <__assert_fail@plt+0x174b8>
   28998:	add	r2, r0, #12
   2899c:	add	r1, r0, #8
   289a0:	mov	r3, r6
   289a4:	mov	r0, r4
   289a8:	bl	1b20c <__assert_fail@plt+0x9d14>
   289ac:	ldr	r0, [r5, #36]	; 0x24
   289b0:	ldr	r1, [r5, #44]	; 0x2c
   289b4:	cmp	r1, r0
   289b8:	beq	289d4 <__assert_fail@plt+0x174dc>
   289bc:	add	r2, r1, #12
   289c0:	mov	r0, r4
   289c4:	mov	r3, r6
   289c8:	add	r1, r1, #8
   289cc:	bl	1b20c <__assert_fail@plt+0x9d14>
   289d0:	ldr	r0, [r5, #36]	; 0x24
   289d4:	ldr	r1, [r5, #48]	; 0x30
   289d8:	cmp	r1, r0
   289dc:	beq	289f4 <__assert_fail@plt+0x174fc>
   289e0:	add	r2, r1, #12
   289e4:	mov	r3, r6
   289e8:	add	r1, r1, #8
   289ec:	mov	r0, r4
   289f0:	bl	1b20c <__assert_fail@plt+0x9d14>
   289f4:	ldrb	r3, [r4, #28]
   289f8:	mov	r0, #0
   289fc:	orr	r3, r3, #8
   28a00:	strb	r3, [r4, #28]
   28a04:	pop	{r4, r5, r6, pc}
   28a08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28a0c:	cmp	r3, r2
   28a10:	mov	r5, r3
   28a14:	sub	sp, sp, #52	; 0x34
   28a18:	movle	r3, #0
   28a1c:	movgt	r3, #1
   28a20:	orrs	r3, r3, r5, lsr #31
   28a24:	ldrb	r3, [sp, #100]	; 0x64
   28a28:	ldr	ip, [sp, #88]	; 0x58
   28a2c:	ldr	sl, [r0]
   28a30:	add	r8, r5, ip
   28a34:	ldr	r7, [sp, #96]	; 0x60
   28a38:	str	r3, [sp, #32]
   28a3c:	bne	28ce8 <__assert_fail@plt+0x177f0>
   28a40:	cmp	r8, r2
   28a44:	bgt	28ce0 <__assert_fail@plt+0x177e8>
   28a48:	cmp	ip, #0
   28a4c:	cmpge	r5, r8
   28a50:	movgt	lr, #1
   28a54:	movle	lr, #0
   28a58:	bgt	28ce0 <__assert_fail@plt+0x177e8>
   28a5c:	cmp	r8, #0
   28a60:	blt	28d7c <__assert_fail@plt+0x17884>
   28a64:	cmp	r5, r8
   28a68:	movgt	lr, #0
   28a6c:	movle	lr, #1
   28a70:	ands	r3, lr, ip, lsr #31
   28a74:	movne	r8, #0
   28a78:	ldr	lr, [pc, #812]	; 28dac <__assert_fail@plt+0x178b4>
   28a7c:	ldr	r4, [pc, #812]	; 28db0 <__assert_fail@plt+0x178b8>
   28a80:	cmp	lr, #0
   28a84:	mov	ip, #1
   28a88:	moveq	ip, lr
   28a8c:	cmp	r4, #0
   28a90:	mov	lr, #1
   28a94:	moveq	lr, r4
   28a98:	str	r2, [sp, #40]	; 0x28
   28a9c:	orr	r2, ip, lr
   28aa0:	ands	r3, r2, #255	; 0xff
   28aa4:	str	r1, [sp, #44]	; 0x2c
   28aa8:	mov	r6, r0
   28aac:	str	r3, [sp, #28]
   28ab0:	beq	28abc <__assert_fail@plt+0x175c4>
   28ab4:	add	r0, sl, #136	; 0x88
   28ab8:	bl	1121c <pthread_mutex_lock@plt>
   28abc:	ldrb	r2, [r6, #28]
   28ac0:	cmp	r8, r5
   28ac4:	lsr	fp, r2, #5
   28ac8:	and	r3, fp, #3
   28acc:	str	r3, [sp, #36]	; 0x24
   28ad0:	bgt	28b84 <__assert_fail@plt+0x1768c>
   28ad4:	lsr	r1, r2, #4
   28ad8:	and	r1, r1, #1
   28adc:	cmp	r7, #0
   28ae0:	orreq	r1, r1, #1
   28ae4:	cmp	r1, #0
   28ae8:	bne	28d84 <__assert_fail@plt+0x1788c>
   28aec:	and	r2, r2, #6
   28af0:	cmp	r2, #4
   28af4:	ldrne	r0, [r6, #24]
   28af8:	beq	28d4c <__assert_fail@plt+0x17854>
   28afc:	add	fp, r0, #1
   28b00:	mov	r4, fp
   28b04:	lsl	r0, fp, #3
   28b08:	bl	2a790 <__assert_fail@plt+0x19298>
   28b0c:	subs	r9, r0, #0
   28b10:	beq	28cf8 <__assert_fail@plt+0x17800>
   28b14:	ldr	r3, [sp, #36]	; 0x24
   28b18:	str	r9, [sp, #12]
   28b1c:	str	r3, [sp, #16]
   28b20:	ldr	r3, [sp, #92]	; 0x5c
   28b24:	str	fp, [sp, #8]
   28b28:	str	r3, [sp, #4]
   28b2c:	str	r8, [sp]
   28b30:	ldr	r2, [sp, #40]	; 0x28
   28b34:	ldr	r1, [sp, #44]	; 0x2c
   28b38:	mov	r3, r5
   28b3c:	mov	r0, r6
   28b40:	bl	24da8 <__assert_fail@plt+0x138b0>
   28b44:	cmp	r0, #0
   28b48:	beq	28ba8 <__assert_fail@plt+0x176b0>
   28b4c:	cmp	r0, #1
   28b50:	mvneq	r5, #0
   28b54:	beq	28b5c <__assert_fail@plt+0x17664>
   28b58:	mvn	r5, #1
   28b5c:	mov	r0, r9
   28b60:	bl	14214 <__assert_fail@plt+0x2d1c>
   28b64:	ldr	r3, [sp, #28]
   28b68:	cmp	r3, #0
   28b6c:	beq	28b78 <__assert_fail@plt+0x17680>
   28b70:	add	r0, sl, #136	; 0x88
   28b74:	bl	11168 <pthread_mutex_unlock@plt>
   28b78:	mov	r0, r5
   28b7c:	add	sp, sp, #52	; 0x34
   28b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28b84:	ldr	r1, [r6, #16]
   28b88:	cmp	r1, #0
   28b8c:	beq	28ad4 <__assert_fail@plt+0x175dc>
   28b90:	tst	r2, #8
   28b94:	bne	28ad4 <__assert_fail@plt+0x175dc>
   28b98:	mov	r0, r6
   28b9c:	bl	28950 <__assert_fail@plt+0x17458>
   28ba0:	ldrb	r2, [r6, #28]
   28ba4:	b	28ad4 <__assert_fail@plt+0x175dc>
   28ba8:	cmp	r7, #0
   28bac:	beq	28c58 <__assert_fail@plt+0x17760>
   28bb0:	ldrb	r8, [r6, #28]
   28bb4:	add	fp, r4, #1
   28bb8:	lsr	r8, r8, #1
   28bbc:	ands	r8, r8, #3
   28bc0:	beq	28d00 <__assert_fail@plt+0x17808>
   28bc4:	cmp	r8, #1
   28bc8:	ldr	r2, [r7]
   28bcc:	movne	r8, #2
   28bd0:	beq	28c74 <__assert_fail@plt+0x1777c>
   28bd4:	cmp	r4, #0
   28bd8:	ble	28d98 <__assert_fail@plt+0x178a0>
   28bdc:	ldmib	r7, {r1, r2}
   28be0:	mov	r3, r9
   28be4:	add	ip, r9, r4, lsl #3
   28be8:	sub	r1, r1, #4
   28bec:	sub	r2, r2, #4
   28bf0:	ldr	r0, [r3]
   28bf4:	add	r3, r3, #8
   28bf8:	str	r0, [r1, #4]!
   28bfc:	ldr	r0, [r3, #-4]
   28c00:	cmp	ip, r3
   28c04:	str	r0, [r2, #4]!
   28c08:	bne	28bf0 <__assert_fail@plt+0x176f8>
   28c0c:	ldr	r2, [r7]
   28c10:	mov	r3, r4
   28c14:	cmp	r3, r2
   28c18:	bcs	28c40 <__assert_fail@plt+0x17748>
   28c1c:	ldmib	r7, {r0, r1}
   28c20:	mvn	r2, #0
   28c24:	str	r2, [r1, r3, lsl #2]
   28c28:	str	r2, [r0, r3, lsl #2]
   28c2c:	ldr	r3, [r7]
   28c30:	add	r4, r4, #1
   28c34:	cmp	r4, r3
   28c38:	mov	r3, r4
   28c3c:	bcc	28c24 <__assert_fail@plt+0x1772c>
   28c40:	ldrb	r3, [r6, #28]
   28c44:	bic	r3, r3, #6
   28c48:	orr	r8, r3, r8, lsl #1
   28c4c:	tst	r8, #6
   28c50:	strb	r8, [r6, #28]
   28c54:	beq	28b58 <__assert_fail@plt+0x17660>
   28c58:	ldr	r3, [sp, #32]
   28c5c:	cmp	r3, #0
   28c60:	ldrne	r3, [r9, #4]
   28c64:	subne	r5, r3, r5
   28c68:	bne	28b5c <__assert_fail@plt+0x17664>
   28c6c:	ldr	r5, [r9]
   28c70:	b	28b5c <__assert_fail@plt+0x17664>
   28c74:	cmp	r2, fp
   28c78:	bcs	28bd4 <__assert_fail@plt+0x176dc>
   28c7c:	lsl	r2, fp, #2
   28c80:	mov	r1, r2
   28c84:	ldr	r0, [r7, #4]
   28c88:	str	r2, [sp, #40]	; 0x28
   28c8c:	bl	2a7bc <__assert_fail@plt+0x192c4>
   28c90:	subs	r3, r0, #0
   28c94:	str	r3, [sp, #36]	; 0x24
   28c98:	beq	28da4 <__assert_fail@plt+0x178ac>
   28c9c:	ldr	r2, [sp, #40]	; 0x28
   28ca0:	ldr	r0, [r7, #8]
   28ca4:	mov	r1, r2
   28ca8:	bl	2a7bc <__assert_fail@plt+0x192c4>
   28cac:	ldr	r3, [sp, #36]	; 0x24
   28cb0:	subs	r2, r0, #0
   28cb4:	strne	r2, [r7, #8]
   28cb8:	strne	r3, [r7, #4]
   28cbc:	strne	fp, [r7]
   28cc0:	movne	r2, fp
   28cc4:	bne	28bd4 <__assert_fail@plt+0x176dc>
   28cc8:	mov	r0, r3
   28ccc:	str	r2, [sp, #36]	; 0x24
   28cd0:	bl	14214 <__assert_fail@plt+0x2d1c>
   28cd4:	ldr	r2, [sp, #36]	; 0x24
   28cd8:	mov	r8, r2
   28cdc:	b	28c40 <__assert_fail@plt+0x17748>
   28ce0:	mov	r8, r2
   28ce4:	b	28a78 <__assert_fail@plt+0x17580>
   28ce8:	mvn	r5, #0
   28cec:	mov	r0, r5
   28cf0:	add	sp, sp, #52	; 0x34
   28cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28cf8:	mvn	r5, #1
   28cfc:	b	28b64 <__assert_fail@plt+0x1766c>
   28d00:	lsl	r8, fp, #2
   28d04:	mov	r0, r8
   28d08:	bl	2a790 <__assert_fail@plt+0x19298>
   28d0c:	cmp	r0, #0
   28d10:	str	r0, [r7, #4]
   28d14:	beq	28da4 <__assert_fail@plt+0x178ac>
   28d18:	mov	r0, r8
   28d1c:	str	fp, [sp, #36]	; 0x24
   28d20:	bl	2a790 <__assert_fail@plt+0x19298>
   28d24:	ldr	r2, [sp, #36]	; 0x24
   28d28:	cmp	r0, #0
   28d2c:	mov	r8, r0
   28d30:	str	r0, [r7, #8]
   28d34:	strne	r2, [r7]
   28d38:	movne	r8, #1
   28d3c:	bne	28bd4 <__assert_fail@plt+0x176dc>
   28d40:	ldr	r0, [r7, #4]
   28d44:	bl	14214 <__assert_fail@plt+0x2d1c>
   28d48:	b	28c40 <__assert_fail@plt+0x17748>
   28d4c:	ldr	fp, [r7]
   28d50:	ldr	r0, [r6, #24]
   28d54:	cmp	fp, r0
   28d58:	bhi	28afc <__assert_fail@plt+0x17604>
   28d5c:	cmp	fp, #0
   28d60:	mov	r4, fp
   28d64:	bgt	28b04 <__assert_fail@plt+0x1760c>
   28d68:	mov	fp, #1
   28d6c:	mov	r7, r1
   28d70:	mov	r4, fp
   28d74:	mov	r0, #8
   28d78:	b	28b08 <__assert_fail@plt+0x17610>
   28d7c:	mov	r8, lr
   28d80:	b	28a78 <__assert_fail@plt+0x17580>
   28d84:	mov	fp, #1
   28d88:	mov	r4, fp
   28d8c:	mov	r0, #8
   28d90:	mov	r7, #0
   28d94:	b	28b08 <__assert_fail@plt+0x17610>
   28d98:	mov	r4, #0
   28d9c:	mov	r3, r4
   28da0:	b	28c14 <__assert_fail@plt+0x1771c>
   28da4:	mov	r8, #0
   28da8:	b	28c40 <__assert_fail@plt+0x17748>
	...
   28db4:	push	{r4, r5, r6, r7, r8, lr}
   28db8:	mov	r5, r2
   28dbc:	and	r2, r2, #1
   28dc0:	cmp	r2, #0
   28dc4:	ldr	ip, [pc, #404]	; 28f60 <__assert_fail@plt+0x17a68>
   28dc8:	mov	r2, #0
   28dcc:	ldr	r3, [pc, #400]	; 28f64 <__assert_fail@plt+0x17a6c>
   28dd0:	mov	r4, r0
   28dd4:	str	r2, [r0]
   28dd8:	str	r2, [r0, #4]
   28ddc:	str	r2, [r0, #8]
   28de0:	sub	sp, sp, #8
   28de4:	mov	r0, #256	; 0x100
   28de8:	ldr	r8, [pc, #376]	; 28f68 <__assert_fail@plt+0x17a70>
   28dec:	ldr	r6, [pc, #376]	; 28f6c <__assert_fail@plt+0x17a74>
   28df0:	moveq	r8, ip
   28df4:	movne	r6, r3
   28df8:	mov	r7, r1
   28dfc:	bl	2a790 <__assert_fail@plt+0x19298>
   28e00:	cmp	r0, #0
   28e04:	str	r0, [r4, #16]
   28e08:	beq	28f54 <__assert_fail@plt+0x17a5c>
   28e0c:	tst	r5, #2
   28e10:	movne	r6, r8
   28e14:	ands	r2, r5, #4
   28e18:	moveq	r3, r2
   28e1c:	ldrb	r2, [r4, #28]
   28e20:	movne	r3, #1
   28e24:	lsl	r5, r5, #1
   28e28:	bic	r2, r2, #128	; 0x80
   28e2c:	orr	r2, r2, r3, lsl #7
   28e30:	bic	r2, r2, #16
   28e34:	and	r5, r5, #16
   28e38:	orr	r5, r5, r2
   28e3c:	mov	r3, #0
   28e40:	bicne	r6, r6, #64	; 0x40
   28e44:	str	r3, [r4, #20]
   28e48:	strb	r5, [r4, #28]
   28e4c:	mov	r0, r7
   28e50:	orrne	r6, r6, #256	; 0x100
   28e54:	bl	113c0 <strlen@plt>
   28e58:	mov	r1, r7
   28e5c:	mov	r3, r6
   28e60:	mov	r2, r0
   28e64:	mov	r0, r4
   28e68:	bl	27410 <__assert_fail@plt+0x15f18>
   28e6c:	cmp	r0, #16
   28e70:	mov	r1, r0
   28e74:	beq	28f30 <__assert_fail@plt+0x17a38>
   28e78:	cmp	r0, #0
   28e7c:	bne	28f34 <__assert_fail@plt+0x17a3c>
   28e80:	ldr	r5, [r4]
   28e84:	ldr	r6, [r4, #16]
   28e88:	mov	r2, #256	; 0x100
   28e8c:	mov	r0, r6
   28e90:	bl	11414 <memset@plt>
   28e94:	ldr	r1, [r5, #36]	; 0x24
   28e98:	mov	r3, r6
   28e9c:	add	r2, r1, #12
   28ea0:	mov	r0, r4
   28ea4:	add	r1, r1, #8
   28ea8:	bl	1b20c <__assert_fail@plt+0x9d14>
   28eac:	ldr	r1, [r5, #40]	; 0x28
   28eb0:	ldr	r3, [r5, #36]	; 0x24
   28eb4:	cmp	r3, r1
   28eb8:	beq	28ed4 <__assert_fail@plt+0x179dc>
   28ebc:	add	r2, r1, #12
   28ec0:	mov	r3, r6
   28ec4:	add	r1, r1, #8
   28ec8:	mov	r0, r4
   28ecc:	bl	1b20c <__assert_fail@plt+0x9d14>
   28ed0:	ldr	r1, [r5, #36]	; 0x24
   28ed4:	ldr	r0, [r5, #44]	; 0x2c
   28ed8:	cmp	r1, r0
   28edc:	beq	28ef8 <__assert_fail@plt+0x17a00>
   28ee0:	add	r2, r0, #12
   28ee4:	add	r1, r0, #8
   28ee8:	mov	r3, r6
   28eec:	mov	r0, r4
   28ef0:	bl	1b20c <__assert_fail@plt+0x9d14>
   28ef4:	ldr	r0, [r5, #36]	; 0x24
   28ef8:	ldr	r1, [r5, #48]	; 0x30
   28efc:	cmp	r0, r1
   28f00:	beq	28f18 <__assert_fail@plt+0x17a20>
   28f04:	add	r2, r1, #12
   28f08:	mov	r3, r6
   28f0c:	add	r1, r1, #8
   28f10:	mov	r0, r4
   28f14:	bl	1b20c <__assert_fail@plt+0x9d14>
   28f18:	ldrb	r3, [r4, #28]
   28f1c:	mov	r0, #0
   28f20:	orr	r3, r3, #8
   28f24:	strb	r3, [r4, #28]
   28f28:	add	sp, sp, #8
   28f2c:	pop	{r4, r5, r6, r7, r8, pc}
   28f30:	mov	r1, #8
   28f34:	ldr	r0, [r4, #16]
   28f38:	str	r1, [sp, #4]
   28f3c:	bl	14214 <__assert_fail@plt+0x2d1c>
   28f40:	ldr	r1, [sp, #4]
   28f44:	mov	r3, #0
   28f48:	mov	r0, r1
   28f4c:	str	r3, [r4, #16]
   28f50:	b	28f28 <__assert_fail@plt+0x17a30>
   28f54:	mov	r0, #12
   28f58:	add	sp, sp, #8
   28f5c:	pop	{r4, r5, r6, r7, r8, pc}
   28f60:	smlalbteq	r0, r1, r6, r2
   28f64:	strdeq	fp, [r3], -ip
   28f68:	strdeq	fp, [r3], #-44	; 0xffffffd4
   28f6c:	smlabteq	r1, r6, r2, r0
   28f70:	cmp	r0, #16
   28f74:	push	{r4, r5, r6, r7, r8, lr}
   28f78:	bhi	28fe0 <__assert_fail@plt+0x17ae8>
   28f7c:	ldr	r1, [pc, #96]	; 28fe4 <__assert_fail@plt+0x17aec>
   28f80:	mov	r4, r3
   28f84:	add	r0, r1, r0, lsl #2
   28f88:	add	r1, r1, #32
   28f8c:	ldr	r3, [r0, #416]	; 0x1a0
   28f90:	mov	r6, r2
   28f94:	add	r1, r1, r3
   28f98:	mov	r2, #5
   28f9c:	mov	r0, #0
   28fa0:	bl	11288 <dcgettext@plt>
   28fa4:	mov	r7, r0
   28fa8:	bl	113c0 <strlen@plt>
   28fac:	cmp	r4, #0
   28fb0:	add	r5, r0, #1
   28fb4:	beq	28fd8 <__assert_fail@plt+0x17ae0>
   28fb8:	cmp	r5, r4
   28fbc:	subhi	r2, r4, #1
   28fc0:	movhi	r3, #0
   28fc4:	strbhi	r3, [r6, r2]
   28fc8:	movls	r2, r5
   28fcc:	mov	r1, r7
   28fd0:	mov	r0, r6
   28fd4:	bl	11234 <memcpy@plt>
   28fd8:	mov	r0, r5
   28fdc:	pop	{r4, r5, r6, r7, r8, pc}
   28fe0:	bl	114ec <abort@plt>
   28fe4:	ldrdeq	fp, [r2], -ip
   28fe8:	push	{r4, r5, r6, lr}
   28fec:	mov	r4, r0
   28ff0:	ldr	r5, [r0]
   28ff4:	cmp	r5, #0
   28ff8:	beq	29038 <__assert_fail@plt+0x17b40>
   28ffc:	ldr	r2, [pc, #92]	; 29060 <__assert_fail@plt+0x17b68>
   29000:	ldr	r1, [pc, #92]	; 29064 <__assert_fail@plt+0x17b6c>
   29004:	cmp	r2, #0
   29008:	mov	r3, #1
   2900c:	moveq	r3, r2
   29010:	cmp	r1, #0
   29014:	mov	r2, #1
   29018:	moveq	r2, r1
   2901c:	orr	r3, r3, r2
   29020:	tst	r3, #1
   29024:	beq	29030 <__assert_fail@plt+0x17b38>
   29028:	add	r0, r5, #136	; 0x88
   2902c:	bl	111e0 <pthread_mutex_destroy@plt>
   29030:	mov	r0, r5
   29034:	bl	1c420 <__assert_fail@plt+0xaf28>
   29038:	mov	r5, #0
   2903c:	ldr	r0, [r4, #16]
   29040:	str	r5, [r4]
   29044:	str	r5, [r4, #4]
   29048:	bl	14214 <__assert_fail@plt+0x2d1c>
   2904c:	str	r5, [r4, #16]
   29050:	ldr	r0, [r4, #20]
   29054:	bl	14214 <__assert_fail@plt+0x2d1c>
   29058:	str	r5, [r4, #20]
   2905c:	pop	{r4, r5, r6, pc}
	...
   29068:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2906c:	sub	sp, sp, #36	; 0x24
   29070:	ldr	r4, [sp, #72]	; 0x48
   29074:	bics	ip, r4, #7
   29078:	movne	r0, #2
   2907c:	beq	29088 <__assert_fail@plt+0x17b90>
   29080:	add	sp, sp, #36	; 0x24
   29084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29088:	ands	fp, r4, #4
   2908c:	mov	r8, r3
   29090:	str	r2, [sp, #28]
   29094:	mov	r7, r1
   29098:	mov	r5, r0
   2909c:	bne	29140 <__assert_fail@plt+0x17c48>
   290a0:	mov	r0, r1
   290a4:	bl	113c0 <strlen@plt>
   290a8:	mov	r9, r0
   290ac:	ldr	r3, [pc, #204]	; 29180 <__assert_fail@plt+0x17c88>
   290b0:	ldr	r1, [pc, #204]	; 29184 <__assert_fail@plt+0x17c8c>
   290b4:	cmp	r3, #0
   290b8:	mov	r6, #1
   290bc:	moveq	r6, r3
   290c0:	cmp	r1, #0
   290c4:	mov	r3, #1
   290c8:	moveq	r3, r1
   290cc:	orr	r6, r6, r3
   290d0:	ands	r6, r6, #255	; 0xff
   290d4:	ldr	sl, [r5]
   290d8:	beq	290e4 <__assert_fail@plt+0x17bec>
   290dc:	add	r0, sl, #136	; 0x88
   290e0:	bl	1121c <pthread_mutex_lock@plt>
   290e4:	ldrb	r3, [r5, #28]
   290e8:	tst	r3, #16
   290ec:	beq	2914c <__assert_fail@plt+0x17c54>
   290f0:	mov	ip, #0
   290f4:	str	r4, [sp, #16]
   290f8:	str	r9, [sp, #4]
   290fc:	str	r9, [sp]
   29100:	mov	r3, fp
   29104:	mov	r2, r9
   29108:	mov	r1, r7
   2910c:	mov	r0, r5
   29110:	str	ip, [sp, #12]
   29114:	str	ip, [sp, #8]
   29118:	bl	24da8 <__assert_fail@plt+0x138b0>
   2911c:	mov	r4, r0
   29120:	cmp	r6, #0
   29124:	beq	29130 <__assert_fail@plt+0x17c38>
   29128:	add	r0, sl, #136	; 0x88
   2912c:	bl	11168 <pthread_mutex_unlock@plt>
   29130:	adds	r0, r4, #0
   29134:	movne	r0, #1
   29138:	add	sp, sp, #36	; 0x24
   2913c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29140:	ldr	fp, [r3]
   29144:	ldr	r9, [r3, #4]
   29148:	b	290ac <__assert_fail@plt+0x17bb4>
   2914c:	ldr	r3, [sp, #28]
   29150:	str	r4, [sp, #16]
   29154:	str	r3, [sp, #8]
   29158:	str	r8, [sp, #12]
   2915c:	str	r9, [sp, #4]
   29160:	str	r9, [sp]
   29164:	mov	r3, fp
   29168:	mov	r2, r9
   2916c:	mov	r1, r7
   29170:	mov	r0, r5
   29174:	bl	24da8 <__assert_fail@plt+0x138b0>
   29178:	mov	r4, r0
   2917c:	b	29120 <__assert_fail@plt+0x17c28>
	...
   29188:	push	{r4, lr}
   2918c:	sub	sp, sp, #16
   29190:	mov	lr, #1
   29194:	ldr	r4, [sp, #24]
   29198:	mov	ip, #0
   2919c:	str	ip, [sp]
   291a0:	stmib	sp, {r2, r4, lr}
   291a4:	bl	28a08 <__assert_fail@plt+0x17510>
   291a8:	add	sp, sp, #16
   291ac:	pop	{r4, pc}
   291b0:	push	{r4, lr}
   291b4:	sub	sp, sp, #16
   291b8:	mov	ip, #0
   291bc:	ldr	r4, [sp, #24]
   291c0:	ldr	lr, [sp, #28]
   291c4:	str	r2, [sp, #4]
   291c8:	str	r4, [sp]
   291cc:	str	lr, [sp, #8]
   291d0:	str	ip, [sp, #12]
   291d4:	bl	28a08 <__assert_fail@plt+0x17510>
   291d8:	add	sp, sp, #16
   291dc:	pop	{r4, pc}
   291e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   291e4:	sub	sp, sp, #20
   291e8:	mov	r5, r2
   291ec:	ldr	r6, [sp, #68]	; 0x44
   291f0:	ldr	r4, [sp, #56]	; 0x38
   291f4:	orr	r2, r2, r6
   291f8:	orrs	r2, r2, r4
   291fc:	bmi	29224 <__assert_fail@plt+0x17d2c>
   29200:	cmp	r4, #0
   29204:	mov	sl, r0
   29208:	mov	fp, r1
   2920c:	mov	r7, r3
   29210:	blt	29234 <__assert_fail@plt+0x17d3c>
   29214:	mvn	r3, #-2147483648	; 0x80000000
   29218:	sub	r3, r3, r4
   2921c:	cmp	r5, r3
   29220:	ble	29234 <__assert_fail@plt+0x17d3c>
   29224:	mvn	r4, #1
   29228:	mov	r0, r4
   2922c:	add	sp, sp, #20
   29230:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29234:	cmp	r4, #0
   29238:	add	r9, r5, r4
   2923c:	ble	292c8 <__assert_fail@plt+0x17dd0>
   29240:	cmp	r5, #0
   29244:	beq	292c0 <__assert_fail@plt+0x17dc8>
   29248:	mov	r0, r9
   2924c:	bl	2a790 <__assert_fail@plt+0x19298>
   29250:	subs	r8, r0, #0
   29254:	beq	29224 <__assert_fail@plt+0x17d2c>
   29258:	mov	r1, fp
   2925c:	mov	r2, r5
   29260:	bl	11234 <memcpy@plt>
   29264:	mov	r1, r7
   29268:	mov	r2, r4
   2926c:	add	r0, r8, r5
   29270:	bl	11234 <memcpy@plt>
   29274:	mov	r7, r8
   29278:	ldr	r2, [sp, #64]	; 0x40
   2927c:	mov	ip, #1
   29280:	mov	r3, #0
   29284:	str	r2, [sp, #8]
   29288:	mov	r1, r7
   2928c:	mov	r2, r9
   29290:	str	ip, [sp, #12]
   29294:	str	r3, [sp]
   29298:	str	r6, [sp, #4]
   2929c:	ldr	r3, [sp, #60]	; 0x3c
   292a0:	mov	r0, sl
   292a4:	bl	28a08 <__assert_fail@plt+0x17510>
   292a8:	mov	r4, r0
   292ac:	mov	r0, r8
   292b0:	bl	14214 <__assert_fail@plt+0x2d1c>
   292b4:	mov	r0, r4
   292b8:	add	sp, sp, #20
   292bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   292c0:	mov	r8, r5
   292c4:	b	29278 <__assert_fail@plt+0x17d80>
   292c8:	mov	r7, fp
   292cc:	mov	r8, #0
   292d0:	b	29278 <__assert_fail@plt+0x17d80>
   292d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   292d8:	sub	sp, sp, #20
   292dc:	mov	r5, r2
   292e0:	ldr	r6, [sp, #72]	; 0x48
   292e4:	ldr	r4, [sp, #56]	; 0x38
   292e8:	orr	r2, r2, r6
   292ec:	orrs	r2, r2, r4
   292f0:	bmi	29318 <__assert_fail@plt+0x17e20>
   292f4:	cmp	r4, #0
   292f8:	mov	sl, r0
   292fc:	mov	fp, r1
   29300:	mov	r7, r3
   29304:	blt	29328 <__assert_fail@plt+0x17e30>
   29308:	mvn	r3, #-2147483648	; 0x80000000
   2930c:	sub	r3, r3, r4
   29310:	cmp	r5, r3
   29314:	ble	29328 <__assert_fail@plt+0x17e30>
   29318:	mvn	r4, #1
   2931c:	mov	r0, r4
   29320:	add	sp, sp, #20
   29324:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29328:	cmp	r4, #0
   2932c:	add	r9, r5, r4
   29330:	ble	293bc <__assert_fail@plt+0x17ec4>
   29334:	cmp	r5, #0
   29338:	beq	293b4 <__assert_fail@plt+0x17ebc>
   2933c:	mov	r0, r9
   29340:	bl	2a790 <__assert_fail@plt+0x19298>
   29344:	subs	r8, r0, #0
   29348:	beq	29318 <__assert_fail@plt+0x17e20>
   2934c:	mov	r1, fp
   29350:	mov	r2, r5
   29354:	bl	11234 <memcpy@plt>
   29358:	mov	r1, r7
   2935c:	mov	r2, r4
   29360:	add	r0, r8, r5
   29364:	bl	11234 <memcpy@plt>
   29368:	mov	r7, r8
   2936c:	ldr	r2, [sp, #68]	; 0x44
   29370:	mov	r3, #0
   29374:	str	r2, [sp, #8]
   29378:	ldr	r2, [sp, #64]	; 0x40
   2937c:	mov	r1, r7
   29380:	str	r2, [sp]
   29384:	str	r3, [sp, #12]
   29388:	mov	r2, r9
   2938c:	ldr	r3, [sp, #60]	; 0x3c
   29390:	str	r6, [sp, #4]
   29394:	mov	r0, sl
   29398:	bl	28a08 <__assert_fail@plt+0x17510>
   2939c:	mov	r4, r0
   293a0:	mov	r0, r8
   293a4:	bl	14214 <__assert_fail@plt+0x2d1c>
   293a8:	mov	r0, r4
   293ac:	add	sp, sp, #20
   293b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   293b4:	mov	r8, r5
   293b8:	b	2936c <__assert_fail@plt+0x17e74>
   293bc:	mov	r7, fp
   293c0:	mov	r8, #0
   293c4:	b	2936c <__assert_fail@plt+0x17e74>
   293c8:	cmp	r2, #0
   293cc:	bne	293ec <__assert_fail@plt+0x17ef4>
   293d0:	ldrb	r3, [r0, #28]
   293d4:	bic	r3, r3, #6
   293d8:	strb	r3, [r0, #28]
   293dc:	str	r2, [r1]
   293e0:	str	r2, [r1, #8]
   293e4:	str	r2, [r1, #4]
   293e8:	bx	lr
   293ec:	ldrb	ip, [r0, #28]
   293f0:	bic	ip, ip, #4
   293f4:	orr	ip, ip, #2
   293f8:	strb	ip, [r0, #28]
   293fc:	stm	r1, {r2, r3}
   29400:	ldr	r3, [sp]
   29404:	str	r3, [r1, #8]
   29408:	bx	lr
   2940c:	push	{r4, r5, r6, lr}
   29410:	mov	r2, r1
   29414:	mov	r4, r1
   29418:	mov	r1, #0
   2941c:	mov	r5, r0
   29420:	bl	11450 <memchr@plt>
   29424:	cmp	r0, #0
   29428:	subne	r0, r0, r5
   2942c:	addne	r0, r0, #1
   29430:	moveq	r0, r4
   29434:	pop	{r4, r5, r6, pc}
   29438:	push	{r4, r5, lr}
   2943c:	mov	r2, r0
   29440:	ldrb	r3, [r0]
   29444:	ldrb	r0, [r1]
   29448:	cmp	r3, #45	; 0x2d
   2944c:	beq	294ac <__assert_fail@plt+0x17fb4>
   29450:	cmp	r0, #45	; 0x2d
   29454:	beq	294e8 <__assert_fail@plt+0x17ff0>
   29458:	cmp	r3, #48	; 0x30
   2945c:	beq	295b0 <__assert_fail@plt+0x180b8>
   29460:	cmp	r0, #48	; 0x30
   29464:	beq	295a8 <__assert_fail@plt+0x180b0>
   29468:	cmp	r3, r0
   2946c:	subne	r5, r0, #48	; 0x30
   29470:	subne	r0, r3, r0
   29474:	subne	r3, r3, #48	; 0x30
   29478:	bne	295cc <__assert_fail@plt+0x180d4>
   2947c:	sub	r3, r3, #48	; 0x30
   29480:	cmp	r3, #9
   29484:	bhi	294a4 <__assert_fail@plt+0x17fac>
   29488:	ldrb	r3, [r2, #1]!
   2948c:	ldrb	r0, [r1, #1]!
   29490:	sub	ip, r3, #48	; 0x30
   29494:	cmp	r3, r0
   29498:	bne	295c0 <__assert_fail@plt+0x180c8>
   2949c:	cmp	ip, #9
   294a0:	bls	29488 <__assert_fail@plt+0x17f90>
   294a4:	mov	r0, #0
   294a8:	pop	{r4, r5, pc}
   294ac:	ldrb	ip, [r2, #1]!
   294b0:	cmp	ip, #48	; 0x30
   294b4:	beq	294ac <__assert_fail@plt+0x17fb4>
   294b8:	cmp	r0, #45	; 0x2d
   294bc:	beq	2951c <__assert_fail@plt+0x18024>
   294c0:	sub	ip, ip, #48	; 0x30
   294c4:	cmp	ip, #9
   294c8:	bls	295a0 <__assert_fail@plt+0x180a8>
   294cc:	cmp	r0, #48	; 0x30
   294d0:	beq	295b8 <__assert_fail@plt+0x180c0>
   294d4:	sub	r0, r0, #48	; 0x30
   294d8:	cmp	r0, #9
   294dc:	movhi	r0, #0
   294e0:	mvnls	r0, #0
   294e4:	pop	{r4, r5, pc}
   294e8:	ldrb	r0, [r1, #1]!
   294ec:	cmp	r0, #48	; 0x30
   294f0:	beq	294e8 <__assert_fail@plt+0x17ff0>
   294f4:	sub	r0, r0, #48	; 0x30
   294f8:	cmp	r0, #9
   294fc:	bls	29620 <__assert_fail@plt+0x18128>
   29500:	cmp	r3, #48	; 0x30
   29504:	beq	29628 <__assert_fail@plt+0x18130>
   29508:	sub	r3, r3, #48	; 0x30
   2950c:	cmp	r3, #9
   29510:	movhi	r0, #0
   29514:	movls	r0, #1
   29518:	pop	{r4, r5, pc}
   2951c:	ldrb	r5, [r1, #1]!
   29520:	cmp	r5, #48	; 0x30
   29524:	bne	2953c <__assert_fail@plt+0x18044>
   29528:	b	2951c <__assert_fail@plt+0x18024>
   2952c:	cmp	r3, #9
   29530:	bhi	2963c <__assert_fail@plt+0x18144>
   29534:	ldrb	ip, [r2, #1]!
   29538:	ldrb	r5, [r1, #1]!
   2953c:	cmp	ip, r5
   29540:	sub	r3, ip, #48	; 0x30
   29544:	beq	2952c <__assert_fail@plt+0x18034>
   29548:	cmp	r3, #9
   2954c:	bhi	2963c <__assert_fail@plt+0x18144>
   29550:	mov	lr, r2
   29554:	add	lr, lr, #1
   29558:	ldrb	r4, [lr]
   2955c:	sub	r0, lr, r2
   29560:	sub	r4, r4, #48	; 0x30
   29564:	cmp	r4, #9
   29568:	bls	29554 <__assert_fail@plt+0x1805c>
   2956c:	sub	r3, r5, #48	; 0x30
   29570:	cmp	r3, #9
   29574:	bhi	2965c <__assert_fail@plt+0x18164>
   29578:	mov	r2, r1
   2957c:	add	r2, r2, #1
   29580:	ldrb	lr, [r2]
   29584:	sub	r3, r2, r1
   29588:	sub	lr, lr, #48	; 0x30
   2958c:	cmp	lr, #9
   29590:	bls	2957c <__assert_fail@plt+0x18084>
   29594:	cmp	r3, r0
   29598:	beq	29650 <__assert_fail@plt+0x18158>
   2959c:	bhi	29620 <__assert_fail@plt+0x18128>
   295a0:	mvn	r0, #0
   295a4:	pop	{r4, r5, pc}
   295a8:	ldrb	r0, [r1, #1]!
   295ac:	b	29460 <__assert_fail@plt+0x17f68>
   295b0:	ldrb	r3, [r2, #1]!
   295b4:	b	29458 <__assert_fail@plt+0x17f60>
   295b8:	ldrb	r0, [r1, #1]!
   295bc:	b	294cc <__assert_fail@plt+0x17fd4>
   295c0:	sub	r5, r0, #48	; 0x30
   295c4:	sub	r0, r3, r0
   295c8:	mov	r3, ip
   295cc:	cmp	r3, #9
   295d0:	bhi	29674 <__assert_fail@plt+0x1817c>
   295d4:	mov	ip, r2
   295d8:	add	ip, ip, #1
   295dc:	ldrb	lr, [ip]
   295e0:	sub	r4, ip, r2
   295e4:	sub	lr, lr, #48	; 0x30
   295e8:	cmp	lr, #9
   295ec:	bls	295d8 <__assert_fail@plt+0x180e0>
   295f0:	cmp	r5, #9
   295f4:	bhi	29668 <__assert_fail@plt+0x18170>
   295f8:	mov	r2, r1
   295fc:	add	r2, r2, #1
   29600:	ldrb	ip, [r2]
   29604:	sub	lr, r2, r1
   29608:	sub	ip, ip, #48	; 0x30
   2960c:	cmp	ip, #9
   29610:	bls	295fc <__assert_fail@plt+0x18104>
   29614:	cmp	lr, r4
   29618:	beq	29630 <__assert_fail@plt+0x18138>
   2961c:	bhi	295a0 <__assert_fail@plt+0x180a8>
   29620:	mov	r0, #1
   29624:	pop	{r4, r5, pc}
   29628:	ldrb	r3, [r2, #1]!
   2962c:	b	29500 <__assert_fail@plt+0x18008>
   29630:	cmp	r4, #0
   29634:	moveq	r0, #0
   29638:	pop	{r4, r5, pc}
   2963c:	sub	r3, r5, #48	; 0x30
   29640:	cmp	r3, #9
   29644:	mov	r0, #0
   29648:	bls	29578 <__assert_fail@plt+0x18080>
   2964c:	pop	{r4, r5, pc}
   29650:	cmp	r0, #0
   29654:	subne	r0, r5, ip
   29658:	pop	{r4, r5, pc}
   2965c:	adds	r0, r0, #0
   29660:	mvnne	r0, #0
   29664:	pop	{r4, r5, pc}
   29668:	adds	r0, r4, #0
   2966c:	movne	r0, #1
   29670:	pop	{r4, r5, pc}
   29674:	cmp	r5, #9
   29678:	movls	r4, #0
   2967c:	bls	295f8 <__assert_fail@plt+0x18100>
   29680:	b	294a4 <__assert_fail@plt+0x17fac>
   29684:	push	{r4, r5, r6, lr}
   29688:	sub	sp, sp, #32
   2968c:	cmp	r1, #0
   29690:	mov	r4, r0
   29694:	ldr	r5, [sp, #48]	; 0x30
   29698:	ldr	r6, [sp, #52]	; 0x34
   2969c:	beq	299b4 <__assert_fail@plt+0x184bc>
   296a0:	stm	sp, {r2, r3}
   296a4:	mov	r3, r1
   296a8:	ldr	r2, [pc, #808]	; 299d8 <__assert_fail@plt+0x184e0>
   296ac:	mov	r1, #1
   296b0:	bl	11444 <__fprintf_chk@plt>
   296b4:	mov	r2, #5
   296b8:	ldr	r1, [pc, #796]	; 299dc <__assert_fail@plt+0x184e4>
   296bc:	mov	r0, #0
   296c0:	bl	11288 <dcgettext@plt>
   296c4:	ldr	r3, [pc, #788]	; 299e0 <__assert_fail@plt+0x184e8>
   296c8:	ldr	r2, [pc, #788]	; 299e4 <__assert_fail@plt+0x184ec>
   296cc:	str	r3, [sp]
   296d0:	mov	r1, #1
   296d4:	mov	r3, r0
   296d8:	mov	r0, r4
   296dc:	bl	11444 <__fprintf_chk@plt>
   296e0:	mov	r1, r4
   296e4:	mov	r0, #10
   296e8:	bl	1127c <fputc_unlocked@plt>
   296ec:	mov	r2, #5
   296f0:	ldr	r1, [pc, #752]	; 299e8 <__assert_fail@plt+0x184f0>
   296f4:	mov	r0, #0
   296f8:	bl	11288 <dcgettext@plt>
   296fc:	mov	r1, #1
   29700:	ldr	r3, [pc, #740]	; 299ec <__assert_fail@plt+0x184f4>
   29704:	mov	r2, r0
   29708:	mov	r0, r4
   2970c:	bl	11444 <__fprintf_chk@plt>
   29710:	mov	r1, r4
   29714:	mov	r0, #10
   29718:	bl	1127c <fputc_unlocked@plt>
   2971c:	cmp	r6, #9
   29720:	ldrls	pc, [pc, r6, lsl #2]
   29724:	b	299cc <__assert_fail@plt+0x184d4>
   29728:	andeq	r9, r2, ip, lsr #15
   2972c:			; <UNDEFINED> instruction: 0x000297b4
   29730:	andeq	r9, r2, r0, ror #15
   29734:	andeq	r9, r2, r4, lsl r8
   29738:	andeq	r9, r2, r0, asr r8
   2973c:	andeq	r9, r2, ip, lsl #17
   29740:	andeq	r9, r2, r8, asr #17
   29744:	andeq	r9, r2, ip, lsl #18
   29748:	andeq	r9, r2, ip, asr r9
   2974c:	andeq	r9, r2, r0, asr r7
   29750:	ldr	r1, [pc, #664]	; 299f0 <__assert_fail@plt+0x184f8>
   29754:	mov	r2, #5
   29758:	mov	r0, #0
   2975c:	bl	11288 <dcgettext@plt>
   29760:	ldr	ip, [r5, #32]
   29764:	ldr	r1, [r5, #28]
   29768:	ldr	r2, [r5, #24]
   2976c:	ldr	r3, [r5]
   29770:	ldr	r6, [r5, #20]
   29774:	str	ip, [sp, #28]
   29778:	ldr	lr, [r5, #16]
   2977c:	str	r1, [sp, #24]
   29780:	ldr	ip, [r5, #12]
   29784:	str	r2, [sp, #20]
   29788:	ldr	r1, [r5, #8]
   2978c:	ldr	r2, [r5, #4]
   29790:	str	r6, [sp, #16]
   29794:	stmib	sp, {r1, ip, lr}
   29798:	mov	r1, #1
   2979c:	str	r2, [sp]
   297a0:	mov	r2, r0
   297a4:	mov	r0, r4
   297a8:	bl	11444 <__fprintf_chk@plt>
   297ac:	add	sp, sp, #32
   297b0:	pop	{r4, r5, r6, pc}
   297b4:	mov	r2, #5
   297b8:	ldr	r1, [pc, #564]	; 299f4 <__assert_fail@plt+0x184fc>
   297bc:	mov	r0, #0
   297c0:	bl	11288 <dcgettext@plt>
   297c4:	ldr	r3, [r5]
   297c8:	mov	r1, #1
   297cc:	mov	r2, r0
   297d0:	mov	r0, r4
   297d4:	add	sp, sp, #32
   297d8:	pop	{r4, r5, r6, lr}
   297dc:	b	11444 <__fprintf_chk@plt>
   297e0:	mov	r2, #5
   297e4:	ldr	r1, [pc, #524]	; 299f8 <__assert_fail@plt+0x18500>
   297e8:	mov	r0, #0
   297ec:	bl	11288 <dcgettext@plt>
   297f0:	ldr	r2, [r5, #4]
   297f4:	ldr	r3, [r5]
   297f8:	mov	r1, #1
   297fc:	str	r2, [sp, #48]	; 0x30
   29800:	mov	r2, r0
   29804:	mov	r0, r4
   29808:	add	sp, sp, #32
   2980c:	pop	{r4, r5, r6, lr}
   29810:	b	11444 <__fprintf_chk@plt>
   29814:	mov	r2, #5
   29818:	ldr	r1, [pc, #476]	; 299fc <__assert_fail@plt+0x18504>
   2981c:	mov	r0, #0
   29820:	bl	11288 <dcgettext@plt>
   29824:	ldr	r1, [r5, #8]
   29828:	ldr	r2, [r5, #4]
   2982c:	ldr	r3, [r5]
   29830:	str	r1, [sp, #52]	; 0x34
   29834:	str	r2, [sp, #48]	; 0x30
   29838:	mov	r1, #1
   2983c:	mov	r2, r0
   29840:	mov	r0, r4
   29844:	add	sp, sp, #32
   29848:	pop	{r4, r5, r6, lr}
   2984c:	b	11444 <__fprintf_chk@plt>
   29850:	mov	r2, #5
   29854:	ldr	r1, [pc, #420]	; 29a00 <__assert_fail@plt+0x18508>
   29858:	mov	r0, #0
   2985c:	bl	11288 <dcgettext@plt>
   29860:	ldr	r1, [r5, #8]
   29864:	ldr	ip, [r5, #12]
   29868:	ldr	r2, [r5, #4]
   2986c:	ldr	r3, [r5]
   29870:	stmib	sp, {r1, ip}
   29874:	str	r2, [sp]
   29878:	mov	r1, #1
   2987c:	mov	r2, r0
   29880:	mov	r0, r4
   29884:	bl	11444 <__fprintf_chk@plt>
   29888:	b	297ac <__assert_fail@plt+0x182b4>
   2988c:	mov	r2, #5
   29890:	ldr	r1, [pc, #364]	; 29a04 <__assert_fail@plt+0x1850c>
   29894:	mov	r0, #0
   29898:	bl	11288 <dcgettext@plt>
   2989c:	add	r1, r5, #8
   298a0:	ldr	r2, [r5, #4]
   298a4:	ldm	r1, {r1, ip, lr}
   298a8:	ldr	r3, [r5]
   298ac:	str	r2, [sp]
   298b0:	stmib	sp, {r1, ip, lr}
   298b4:	mov	r1, #1
   298b8:	mov	r2, r0
   298bc:	mov	r0, r4
   298c0:	bl	11444 <__fprintf_chk@plt>
   298c4:	b	297ac <__assert_fail@plt+0x182b4>
   298c8:	mov	r2, #5
   298cc:	ldr	r1, [pc, #308]	; 29a08 <__assert_fail@plt+0x18510>
   298d0:	mov	r0, #0
   298d4:	bl	11288 <dcgettext@plt>
   298d8:	add	r1, r5, #8
   298dc:	ldr	r2, [r5, #4]
   298e0:	ldm	r1, {r1, ip, lr}
   298e4:	ldr	r6, [r5, #20]
   298e8:	ldr	r3, [r5]
   298ec:	stmib	sp, {r1, ip, lr}
   298f0:	mov	r1, #1
   298f4:	str	r2, [sp]
   298f8:	str	r6, [sp, #16]
   298fc:	mov	r2, r0
   29900:	mov	r0, r4
   29904:	bl	11444 <__fprintf_chk@plt>
   29908:	b	297ac <__assert_fail@plt+0x182b4>
   2990c:	mov	r2, #5
   29910:	ldr	r1, [pc, #244]	; 29a0c <__assert_fail@plt+0x18514>
   29914:	mov	r0, #0
   29918:	bl	11288 <dcgettext@plt>
   2991c:	ldr	r2, [r5, #24]
   29920:	ldr	r3, [r5]
   29924:	ldr	r6, [r5, #20]
   29928:	ldr	lr, [r5, #16]
   2992c:	ldr	ip, [r5, #12]
   29930:	str	r2, [sp, #20]
   29934:	ldr	r1, [r5, #8]
   29938:	ldr	r2, [r5, #4]
   2993c:	str	r6, [sp, #16]
   29940:	stmib	sp, {r1, ip, lr}
   29944:	mov	r1, #1
   29948:	str	r2, [sp]
   2994c:	mov	r2, r0
   29950:	mov	r0, r4
   29954:	bl	11444 <__fprintf_chk@plt>
   29958:	b	297ac <__assert_fail@plt+0x182b4>
   2995c:	mov	r2, #5
   29960:	ldr	r1, [pc, #168]	; 29a10 <__assert_fail@plt+0x18518>
   29964:	mov	r0, #0
   29968:	bl	11288 <dcgettext@plt>
   2996c:	ldr	r1, [r5, #28]
   29970:	ldr	r2, [r5, #24]
   29974:	ldr	r3, [r5]
   29978:	ldr	r6, [r5, #20]
   2997c:	ldr	lr, [r5, #16]
   29980:	str	r1, [sp, #24]
   29984:	ldr	ip, [r5, #12]
   29988:	str	r2, [sp, #20]
   2998c:	ldr	r1, [r5, #8]
   29990:	ldr	r2, [r5, #4]
   29994:	str	r6, [sp, #16]
   29998:	stmib	sp, {r1, ip, lr}
   2999c:	mov	r1, #1
   299a0:	str	r2, [sp]
   299a4:	mov	r2, r0
   299a8:	mov	r0, r4
   299ac:	bl	11444 <__fprintf_chk@plt>
   299b0:	b	297ac <__assert_fail@plt+0x182b4>
   299b4:	str	r3, [sp]
   299b8:	mov	r1, #1
   299bc:	mov	r3, r2
   299c0:	ldr	r2, [pc, #76]	; 29a14 <__assert_fail@plt+0x1851c>
   299c4:	bl	11444 <__fprintf_chk@plt>
   299c8:	b	296b4 <__assert_fail@plt+0x181bc>
   299cc:	mov	r2, #5
   299d0:	ldr	r1, [pc, #64]	; 29a18 <__assert_fail@plt+0x18520>
   299d4:	b	29758 <__assert_fail@plt+0x18260>
   299d8:	andeq	ip, r2, r8, lsr #2
   299dc:	andeq	ip, r2, ip, lsr r1
   299e0:	andeq	r0, r0, r6, ror #15
   299e4:	andeq	ip, r2, r4, lsl r4
   299e8:	andeq	ip, r2, r0, asr #2
   299ec:	andeq	ip, r2, ip, ror #3
   299f0:	andeq	ip, r2, ip, lsl r3
   299f4:	andeq	ip, r2, r0, lsl r2
   299f8:	andeq	ip, r2, r0, lsr #4
   299fc:	andeq	ip, r2, r8, lsr r2
   29a00:	andeq	ip, r2, r4, asr r2
   29a04:	andeq	ip, r2, r4, ror r2
   29a08:	muleq	r2, r8, r2
   29a0c:	andeq	ip, r2, r0, asr #5
   29a10:	andeq	ip, r2, ip, ror #5
   29a14:	andeq	ip, r2, r4, lsr r1
   29a18:	andeq	ip, r2, r0, asr r3
   29a1c:	push	{r4, r5, lr}
   29a20:	sub	sp, sp, #12
   29a24:	ldr	r5, [sp, #24]
   29a28:	ldr	ip, [r5]
   29a2c:	cmp	ip, #0
   29a30:	beq	29a4c <__assert_fail@plt+0x18554>
   29a34:	mov	lr, r5
   29a38:	mov	ip, #0
   29a3c:	ldr	r4, [lr, #4]!
   29a40:	add	ip, ip, #1
   29a44:	cmp	r4, #0
   29a48:	bne	29a3c <__assert_fail@plt+0x18544>
   29a4c:	stm	sp, {r5, ip}
   29a50:	bl	29684 <__assert_fail@plt+0x1818c>
   29a54:	add	sp, sp, #12
   29a58:	pop	{r4, r5, pc}
   29a5c:	push	{r4, r5, lr}
   29a60:	sub	sp, sp, #76	; 0x4c
   29a64:	mov	r5, r0
   29a68:	ldr	ip, [sp, #88]	; 0x58
   29a6c:	ldr	r0, [ip]
   29a70:	cmp	r0, #0
   29a74:	str	r0, [sp, #32]
   29a78:	beq	29e4c <__assert_fail@plt+0x18954>
   29a7c:	ldr	r0, [ip, #4]
   29a80:	cmp	r0, #0
   29a84:	str	r0, [sp, #36]	; 0x24
   29a88:	beq	29e54 <__assert_fail@plt+0x1895c>
   29a8c:	ldr	r0, [ip, #8]
   29a90:	cmp	r0, #0
   29a94:	str	r0, [sp, #40]	; 0x28
   29a98:	beq	29e5c <__assert_fail@plt+0x18964>
   29a9c:	ldr	r0, [ip, #12]
   29aa0:	cmp	r0, #0
   29aa4:	str	r0, [sp, #44]	; 0x2c
   29aa8:	beq	29e64 <__assert_fail@plt+0x1896c>
   29aac:	ldr	r0, [ip, #16]
   29ab0:	cmp	r0, #0
   29ab4:	str	r0, [sp, #48]	; 0x30
   29ab8:	beq	29e6c <__assert_fail@plt+0x18974>
   29abc:	ldr	r0, [ip, #20]
   29ac0:	cmp	r0, #0
   29ac4:	str	r0, [sp, #52]	; 0x34
   29ac8:	beq	29e74 <__assert_fail@plt+0x1897c>
   29acc:	ldr	r0, [ip, #24]
   29ad0:	cmp	r0, #0
   29ad4:	str	r0, [sp, #56]	; 0x38
   29ad8:	beq	29e7c <__assert_fail@plt+0x18984>
   29adc:	ldr	r0, [ip, #28]
   29ae0:	cmp	r0, #0
   29ae4:	str	r0, [sp, #60]	; 0x3c
   29ae8:	beq	29e84 <__assert_fail@plt+0x1898c>
   29aec:	ldr	r0, [ip, #32]
   29af0:	cmp	r0, #0
   29af4:	str	r0, [sp, #64]	; 0x40
   29af8:	beq	29e8c <__assert_fail@plt+0x18994>
   29afc:	ldr	r0, [ip, #36]	; 0x24
   29b00:	cmp	r0, #0
   29b04:	movne	r4, #10
   29b08:	moveq	r4, #9
   29b0c:	cmp	r1, #0
   29b10:	beq	29e24 <__assert_fail@plt+0x1892c>
   29b14:	stm	sp, {r2, r3}
   29b18:	mov	r0, r5
   29b1c:	mov	r3, r1
   29b20:	ldr	r2, [pc, #876]	; 29e94 <__assert_fail@plt+0x1899c>
   29b24:	mov	r1, #1
   29b28:	bl	11444 <__fprintf_chk@plt>
   29b2c:	mov	r2, #5
   29b30:	ldr	r1, [pc, #864]	; 29e98 <__assert_fail@plt+0x189a0>
   29b34:	mov	r0, #0
   29b38:	bl	11288 <dcgettext@plt>
   29b3c:	ldr	r3, [pc, #856]	; 29e9c <__assert_fail@plt+0x189a4>
   29b40:	ldr	r2, [pc, #856]	; 29ea0 <__assert_fail@plt+0x189a8>
   29b44:	str	r3, [sp]
   29b48:	mov	r1, #1
   29b4c:	mov	r3, r0
   29b50:	mov	r0, r5
   29b54:	bl	11444 <__fprintf_chk@plt>
   29b58:	mov	r1, r5
   29b5c:	mov	r0, #10
   29b60:	bl	1127c <fputc_unlocked@plt>
   29b64:	mov	r2, #5
   29b68:	ldr	r1, [pc, #820]	; 29ea4 <__assert_fail@plt+0x189ac>
   29b6c:	mov	r0, #0
   29b70:	bl	11288 <dcgettext@plt>
   29b74:	mov	r1, #1
   29b78:	ldr	r3, [pc, #808]	; 29ea8 <__assert_fail@plt+0x189b0>
   29b7c:	mov	r2, r0
   29b80:	mov	r0, r5
   29b84:	bl	11444 <__fprintf_chk@plt>
   29b88:	mov	r1, r5
   29b8c:	mov	r0, #10
   29b90:	bl	1127c <fputc_unlocked@plt>
   29b94:	cmp	r4, #9
   29b98:	ldrls	pc, [pc, r4, lsl #2]
   29b9c:	b	29e40 <__assert_fail@plt+0x18948>
   29ba0:	andeq	r9, r2, r4, lsr #24
   29ba4:	andeq	r9, r2, ip, lsr #24
   29ba8:	andeq	r9, r2, r8, asr ip
   29bac:	andeq	r9, r2, ip, lsl #25
   29bb0:	andeq	r9, r2, r4, asr #25
   29bb4:	andeq	r9, r2, r0, lsl #26
   29bb8:	andeq	r9, r2, ip, lsr sp
   29bbc:	andeq	r9, r2, r0, lsl #27
   29bc0:	andeq	r9, r2, ip, asr #27
   29bc4:	andeq	r9, r2, r8, asr #23
   29bc8:	ldr	r1, [pc, #732]	; 29eac <__assert_fail@plt+0x189b4>
   29bcc:	mov	r2, #5
   29bd0:	mov	r0, #0
   29bd4:	bl	11288 <dcgettext@plt>
   29bd8:	ldr	ip, [sp, #64]	; 0x40
   29bdc:	ldr	r1, [sp, #60]	; 0x3c
   29be0:	ldr	r2, [sp, #56]	; 0x38
   29be4:	ldr	lr, [sp, #48]	; 0x30
   29be8:	str	ip, [sp, #28]
   29bec:	str	r1, [sp, #24]
   29bf0:	ldr	ip, [sp, #44]	; 0x2c
   29bf4:	ldr	r1, [sp, #40]	; 0x28
   29bf8:	ldr	r4, [sp, #52]	; 0x34
   29bfc:	str	r2, [sp, #20]
   29c00:	ldr	r2, [sp, #36]	; 0x24
   29c04:	stmib	sp, {r1, ip, lr}
   29c08:	mov	r1, #1
   29c0c:	str	r2, [sp]
   29c10:	ldr	r3, [sp, #32]
   29c14:	str	r4, [sp, #16]
   29c18:	mov	r2, r0
   29c1c:	mov	r0, r5
   29c20:	bl	11444 <__fprintf_chk@plt>
   29c24:	add	sp, sp, #76	; 0x4c
   29c28:	pop	{r4, r5, pc}
   29c2c:	mov	r2, #5
   29c30:	ldr	r1, [pc, #632]	; 29eb0 <__assert_fail@plt+0x189b8>
   29c34:	mov	r0, #0
   29c38:	bl	11288 <dcgettext@plt>
   29c3c:	ldr	r3, [sp, #32]
   29c40:	mov	r1, #1
   29c44:	mov	r2, r0
   29c48:	mov	r0, r5
   29c4c:	add	sp, sp, #76	; 0x4c
   29c50:	pop	{r4, r5, lr}
   29c54:	b	11444 <__fprintf_chk@plt>
   29c58:	mov	r2, #5
   29c5c:	ldr	r1, [pc, #592]	; 29eb4 <__assert_fail@plt+0x189bc>
   29c60:	mov	r0, #0
   29c64:	bl	11288 <dcgettext@plt>
   29c68:	ldr	r2, [sp, #36]	; 0x24
   29c6c:	ldr	r3, [sp, #32]
   29c70:	str	r2, [sp, #88]	; 0x58
   29c74:	mov	r1, #1
   29c78:	mov	r2, r0
   29c7c:	mov	r0, r5
   29c80:	add	sp, sp, #76	; 0x4c
   29c84:	pop	{r4, r5, lr}
   29c88:	b	11444 <__fprintf_chk@plt>
   29c8c:	mov	r2, #5
   29c90:	ldr	r1, [pc, #544]	; 29eb8 <__assert_fail@plt+0x189c0>
   29c94:	mov	r0, #0
   29c98:	bl	11288 <dcgettext@plt>
   29c9c:	ldr	r1, [sp, #40]	; 0x28
   29ca0:	ldr	r2, [sp, #36]	; 0x24
   29ca4:	str	r1, [sp, #4]
   29ca8:	str	r2, [sp]
   29cac:	ldr	r3, [sp, #32]
   29cb0:	mov	r1, #1
   29cb4:	mov	r2, r0
   29cb8:	mov	r0, r5
   29cbc:	bl	11444 <__fprintf_chk@plt>
   29cc0:	b	29c24 <__assert_fail@plt+0x1872c>
   29cc4:	mov	r2, #5
   29cc8:	ldr	r1, [pc, #492]	; 29ebc <__assert_fail@plt+0x189c4>
   29ccc:	mov	r0, #0
   29cd0:	bl	11288 <dcgettext@plt>
   29cd4:	ldr	r1, [sp, #40]	; 0x28
   29cd8:	ldr	ip, [sp, #44]	; 0x2c
   29cdc:	ldr	r2, [sp, #36]	; 0x24
   29ce0:	ldr	r3, [sp, #32]
   29ce4:	stmib	sp, {r1, ip}
   29ce8:	str	r2, [sp]
   29cec:	mov	r1, #1
   29cf0:	mov	r2, r0
   29cf4:	mov	r0, r5
   29cf8:	bl	11444 <__fprintf_chk@plt>
   29cfc:	b	29c24 <__assert_fail@plt+0x1872c>
   29d00:	mov	r2, #5
   29d04:	ldr	r1, [pc, #436]	; 29ec0 <__assert_fail@plt+0x189c8>
   29d08:	mov	r0, #0
   29d0c:	bl	11288 <dcgettext@plt>
   29d10:	add	r1, sp, #40	; 0x28
   29d14:	ldr	r2, [sp, #36]	; 0x24
   29d18:	ldm	r1, {r1, ip, lr}
   29d1c:	ldr	r3, [sp, #32]
   29d20:	str	r2, [sp]
   29d24:	stmib	sp, {r1, ip, lr}
   29d28:	mov	r1, #1
   29d2c:	mov	r2, r0
   29d30:	mov	r0, r5
   29d34:	bl	11444 <__fprintf_chk@plt>
   29d38:	b	29c24 <__assert_fail@plt+0x1872c>
   29d3c:	mov	r2, #5
   29d40:	ldr	r1, [pc, #380]	; 29ec4 <__assert_fail@plt+0x189cc>
   29d44:	mov	r0, #0
   29d48:	bl	11288 <dcgettext@plt>
   29d4c:	add	r1, sp, #40	; 0x28
   29d50:	ldr	r2, [sp, #36]	; 0x24
   29d54:	ldm	r1, {r1, ip, lr}
   29d58:	ldr	r4, [sp, #52]	; 0x34
   29d5c:	str	r2, [sp]
   29d60:	stmib	sp, {r1, ip, lr}
   29d64:	mov	r1, #1
   29d68:	ldr	r3, [sp, #32]
   29d6c:	str	r4, [sp, #16]
   29d70:	mov	r2, r0
   29d74:	mov	r0, r5
   29d78:	bl	11444 <__fprintf_chk@plt>
   29d7c:	b	29c24 <__assert_fail@plt+0x1872c>
   29d80:	mov	r2, #5
   29d84:	ldr	r1, [pc, #316]	; 29ec8 <__assert_fail@plt+0x189d0>
   29d88:	mov	r0, #0
   29d8c:	bl	11288 <dcgettext@plt>
   29d90:	add	r1, sp, #40	; 0x28
   29d94:	ldr	r2, [sp, #56]	; 0x38
   29d98:	ldm	r1, {r1, ip, lr}
   29d9c:	ldr	r4, [sp, #52]	; 0x34
   29da0:	str	r2, [sp, #20]
   29da4:	ldr	r2, [sp, #36]	; 0x24
   29da8:	stmib	sp, {r1, ip, lr}
   29dac:	mov	r1, #1
   29db0:	str	r2, [sp]
   29db4:	ldr	r3, [sp, #32]
   29db8:	str	r4, [sp, #16]
   29dbc:	mov	r2, r0
   29dc0:	mov	r0, r5
   29dc4:	bl	11444 <__fprintf_chk@plt>
   29dc8:	b	29c24 <__assert_fail@plt+0x1872c>
   29dcc:	mov	r2, #5
   29dd0:	ldr	r1, [pc, #244]	; 29ecc <__assert_fail@plt+0x189d4>
   29dd4:	mov	r0, #0
   29dd8:	bl	11288 <dcgettext@plt>
   29ddc:	ldr	r1, [sp, #60]	; 0x3c
   29de0:	ldr	r2, [sp, #56]	; 0x38
   29de4:	ldr	lr, [sp, #48]	; 0x30
   29de8:	ldr	ip, [sp, #44]	; 0x2c
   29dec:	str	r1, [sp, #24]
   29df0:	ldr	r1, [sp, #40]	; 0x28
   29df4:	ldr	r4, [sp, #52]	; 0x34
   29df8:	str	r2, [sp, #20]
   29dfc:	ldr	r2, [sp, #36]	; 0x24
   29e00:	stmib	sp, {r1, ip, lr}
   29e04:	mov	r1, #1
   29e08:	str	r2, [sp]
   29e0c:	ldr	r3, [sp, #32]
   29e10:	str	r4, [sp, #16]
   29e14:	mov	r2, r0
   29e18:	mov	r0, r5
   29e1c:	bl	11444 <__fprintf_chk@plt>
   29e20:	b	29c24 <__assert_fail@plt+0x1872c>
   29e24:	str	r3, [sp]
   29e28:	mov	r1, #1
   29e2c:	mov	r3, r2
   29e30:	mov	r0, r5
   29e34:	ldr	r2, [pc, #148]	; 29ed0 <__assert_fail@plt+0x189d8>
   29e38:	bl	11444 <__fprintf_chk@plt>
   29e3c:	b	29b2c <__assert_fail@plt+0x18634>
   29e40:	mov	r2, #5
   29e44:	ldr	r1, [pc, #136]	; 29ed4 <__assert_fail@plt+0x189dc>
   29e48:	b	29bd0 <__assert_fail@plt+0x186d8>
   29e4c:	mov	r4, r0
   29e50:	b	29b0c <__assert_fail@plt+0x18614>
   29e54:	mov	r4, #1
   29e58:	b	29b0c <__assert_fail@plt+0x18614>
   29e5c:	mov	r4, #2
   29e60:	b	29b0c <__assert_fail@plt+0x18614>
   29e64:	mov	r4, #3
   29e68:	b	29b0c <__assert_fail@plt+0x18614>
   29e6c:	mov	r4, #4
   29e70:	b	29b0c <__assert_fail@plt+0x18614>
   29e74:	mov	r4, #5
   29e78:	b	29b0c <__assert_fail@plt+0x18614>
   29e7c:	mov	r4, #6
   29e80:	b	29b0c <__assert_fail@plt+0x18614>
   29e84:	mov	r4, #7
   29e88:	b	29b0c <__assert_fail@plt+0x18614>
   29e8c:	mov	r4, #8
   29e90:	b	29b0c <__assert_fail@plt+0x18614>
   29e94:	andeq	ip, r2, r8, lsr #2
   29e98:	andeq	ip, r2, ip, lsr r1
   29e9c:	andeq	r0, r0, r6, ror #15
   29ea0:	andeq	ip, r2, r4, lsl r4
   29ea4:	andeq	ip, r2, r0, asr #2
   29ea8:	andeq	ip, r2, ip, ror #3
   29eac:	andeq	ip, r2, ip, lsl r3
   29eb0:	andeq	ip, r2, r0, lsl r2
   29eb4:	andeq	ip, r2, r0, lsr #4
   29eb8:	andeq	ip, r2, r8, lsr r2
   29ebc:	andeq	ip, r2, r4, asr r2
   29ec0:	andeq	ip, r2, r4, ror r2
   29ec4:	muleq	r2, r8, r2
   29ec8:	andeq	ip, r2, r0, asr #5
   29ecc:	andeq	ip, r2, ip, ror #5
   29ed0:	andeq	ip, r2, r4, lsr r1
   29ed4:	andeq	ip, r2, r0, asr r3
   29ed8:	push	{r3}		; (str r3, [sp, #-4]!)
   29edc:	push	{lr}		; (str lr, [sp, #-4]!)
   29ee0:	sub	sp, sp, #56	; 0x38
   29ee4:	add	r3, sp, #64	; 0x40
   29ee8:	ldr	ip, [sp, #64]	; 0x40
   29eec:	str	r3, [sp, #12]
   29ef0:	cmp	ip, #0
   29ef4:	str	ip, [sp, #16]
   29ef8:	beq	29f90 <__assert_fail@plt+0x18a98>
   29efc:	ldr	ip, [sp, #68]	; 0x44
   29f00:	cmp	ip, #0
   29f04:	str	ip, [sp, #20]
   29f08:	beq	29fb0 <__assert_fail@plt+0x18ab8>
   29f0c:	ldr	ip, [sp, #72]	; 0x48
   29f10:	cmp	ip, #0
   29f14:	str	ip, [sp, #24]
   29f18:	beq	29fb8 <__assert_fail@plt+0x18ac0>
   29f1c:	ldr	ip, [sp, #76]	; 0x4c
   29f20:	cmp	ip, #0
   29f24:	str	ip, [sp, #28]
   29f28:	beq	29fc0 <__assert_fail@plt+0x18ac8>
   29f2c:	ldr	ip, [sp, #80]	; 0x50
   29f30:	cmp	ip, #0
   29f34:	str	ip, [sp, #32]
   29f38:	beq	29fc8 <__assert_fail@plt+0x18ad0>
   29f3c:	ldr	ip, [sp, #84]	; 0x54
   29f40:	cmp	ip, #0
   29f44:	str	ip, [sp, #36]	; 0x24
   29f48:	beq	29fd0 <__assert_fail@plt+0x18ad8>
   29f4c:	ldr	ip, [sp, #88]	; 0x58
   29f50:	cmp	ip, #0
   29f54:	str	ip, [sp, #40]	; 0x28
   29f58:	beq	29fd8 <__assert_fail@plt+0x18ae0>
   29f5c:	ldr	ip, [sp, #92]	; 0x5c
   29f60:	cmp	ip, #0
   29f64:	str	ip, [sp, #44]	; 0x2c
   29f68:	beq	29fe0 <__assert_fail@plt+0x18ae8>
   29f6c:	ldr	ip, [sp, #96]	; 0x60
   29f70:	cmp	ip, #0
   29f74:	str	ip, [sp, #48]	; 0x30
   29f78:	beq	29fe8 <__assert_fail@plt+0x18af0>
   29f7c:	ldr	ip, [sp, #100]	; 0x64
   29f80:	cmp	ip, #0
   29f84:	str	ip, [sp, #52]	; 0x34
   29f88:	movne	ip, #10
   29f8c:	moveq	ip, #9
   29f90:	add	r3, sp, #16
   29f94:	stm	sp, {r3, ip}
   29f98:	ldr	r3, [sp, #60]	; 0x3c
   29f9c:	bl	29684 <__assert_fail@plt+0x1818c>
   29fa0:	add	sp, sp, #56	; 0x38
   29fa4:	pop	{lr}		; (ldr lr, [sp], #4)
   29fa8:	add	sp, sp, #4
   29fac:	bx	lr
   29fb0:	mov	ip, #1
   29fb4:	b	29f90 <__assert_fail@plt+0x18a98>
   29fb8:	mov	ip, #2
   29fbc:	b	29f90 <__assert_fail@plt+0x18a98>
   29fc0:	mov	ip, #3
   29fc4:	b	29f90 <__assert_fail@plt+0x18a98>
   29fc8:	mov	ip, #4
   29fcc:	b	29f90 <__assert_fail@plt+0x18a98>
   29fd0:	mov	ip, #5
   29fd4:	b	29f90 <__assert_fail@plt+0x18a98>
   29fd8:	mov	ip, #6
   29fdc:	b	29f90 <__assert_fail@plt+0x18a98>
   29fe0:	mov	ip, #7
   29fe4:	b	29f90 <__assert_fail@plt+0x18a98>
   29fe8:	mov	ip, #8
   29fec:	b	29f90 <__assert_fail@plt+0x18a98>
   29ff0:	ldr	r3, [pc, #116]	; 2a06c <__assert_fail@plt+0x18b74>
   29ff4:	push	{r4, lr}
   29ff8:	mov	r0, #10
   29ffc:	ldr	r1, [r3]
   2a000:	bl	1127c <fputc_unlocked@plt>
   2a004:	mov	r2, #5
   2a008:	ldr	r1, [pc, #96]	; 2a070 <__assert_fail@plt+0x18b78>
   2a00c:	mov	r0, #0
   2a010:	bl	11288 <dcgettext@plt>
   2a014:	ldr	r2, [pc, #88]	; 2a074 <__assert_fail@plt+0x18b7c>
   2a018:	mov	r1, r0
   2a01c:	mov	r0, #1
   2a020:	bl	1142c <__printf_chk@plt>
   2a024:	mov	r2, #5
   2a028:	ldr	r1, [pc, #72]	; 2a078 <__assert_fail@plt+0x18b80>
   2a02c:	mov	r0, #0
   2a030:	bl	11288 <dcgettext@plt>
   2a034:	ldr	r3, [pc, #64]	; 2a07c <__assert_fail@plt+0x18b84>
   2a038:	ldr	r2, [pc, #64]	; 2a080 <__assert_fail@plt+0x18b88>
   2a03c:	mov	r1, r0
   2a040:	mov	r0, #1
   2a044:	bl	1142c <__printf_chk@plt>
   2a048:	mov	r2, #5
   2a04c:	ldr	r1, [pc, #48]	; 2a084 <__assert_fail@plt+0x18b8c>
   2a050:	mov	r0, #0
   2a054:	bl	11288 <dcgettext@plt>
   2a058:	ldr	r2, [pc, #40]	; 2a088 <__assert_fail@plt+0x18b90>
   2a05c:	pop	{r4, lr}
   2a060:	mov	r1, r0
   2a064:	mov	r0, #1
   2a068:	b	1142c <__printf_chk@plt>
   2a06c:	andeq	sp, r3, r4, lsr #3
   2a070:	andeq	ip, r2, ip, lsl #7
   2a074:	andeq	ip, r2, r0, lsr #7
   2a078:			; <UNDEFINED> instruction: 0x0002c3b8
   2a07c:	andeq	fp, r2, ip, asr #19
   2a080:	strdeq	fp, [r2], -r4
   2a084:	andeq	ip, r2, ip, asr #7
   2a088:	strdeq	ip, [r2], -r4
   2a08c:	push	{r4, r5, r6, lr}
   2a090:	mov	r6, r0
   2a094:	mov	r5, r1
   2a098:	mov	r4, r2
   2a09c:	bl	2ab8c <__assert_fail@plt+0x19694>
   2a0a0:	cmp	r0, #0
   2a0a4:	popne	{r4, r5, r6, pc}
   2a0a8:	cmp	r6, #0
   2a0ac:	beq	2a0bc <__assert_fail@plt+0x18bc4>
   2a0b0:	cmp	r5, #0
   2a0b4:	cmpne	r4, #0
   2a0b8:	popeq	{r4, r5, r6, pc}
   2a0bc:	bl	2a708 <__assert_fail@plt+0x19210>
   2a0c0:	push	{r4, lr}
   2a0c4:	bl	2a790 <__assert_fail@plt+0x19298>
   2a0c8:	cmp	r0, #0
   2a0cc:	popne	{r4, pc}
   2a0d0:	bl	2a708 <__assert_fail@plt+0x19210>
   2a0d4:	push	{r4, lr}
   2a0d8:	bl	2a790 <__assert_fail@plt+0x19298>
   2a0dc:	cmp	r0, #0
   2a0e0:	popne	{r4, pc}
   2a0e4:	bl	2a708 <__assert_fail@plt+0x19210>
   2a0e8:	push	{r4, lr}
   2a0ec:	bl	2a790 <__assert_fail@plt+0x19298>
   2a0f0:	cmp	r0, #0
   2a0f4:	popne	{r4, pc}
   2a0f8:	bl	2a708 <__assert_fail@plt+0x19210>
   2a0fc:	push	{r4, r5, r6, lr}
   2a100:	mov	r5, r0
   2a104:	mov	r4, r1
   2a108:	bl	2a7bc <__assert_fail@plt+0x192c4>
   2a10c:	cmp	r0, #0
   2a110:	popne	{r4, r5, r6, pc}
   2a114:	adds	r4, r4, #0
   2a118:	movne	r4, #1
   2a11c:	cmp	r5, #0
   2a120:	orreq	r4, r4, #1
   2a124:	cmp	r4, #0
   2a128:	popeq	{r4, r5, r6, pc}
   2a12c:	bl	2a708 <__assert_fail@plt+0x19210>
   2a130:	push	{r4, lr}
   2a134:	cmp	r1, #0
   2a138:	orreq	r1, r1, #1
   2a13c:	bl	2a7bc <__assert_fail@plt+0x192c4>
   2a140:	cmp	r0, #0
   2a144:	popne	{r4, pc}
   2a148:	bl	2a708 <__assert_fail@plt+0x19210>
   2a14c:	push	{r4, r5, r6, lr}
   2a150:	mov	r6, r0
   2a154:	mov	r5, r1
   2a158:	mov	r4, r2
   2a15c:	bl	2ab8c <__assert_fail@plt+0x19694>
   2a160:	cmp	r0, #0
   2a164:	popne	{r4, r5, r6, pc}
   2a168:	cmp	r6, #0
   2a16c:	beq	2a17c <__assert_fail@plt+0x18c84>
   2a170:	cmp	r5, #0
   2a174:	cmpne	r4, #0
   2a178:	popeq	{r4, r5, r6, pc}
   2a17c:	bl	2a708 <__assert_fail@plt+0x19210>
   2a180:	cmp	r2, #0
   2a184:	cmpne	r1, #0
   2a188:	moveq	r2, #1
   2a18c:	moveq	r1, r2
   2a190:	push	{r4, lr}
   2a194:	bl	2ab8c <__assert_fail@plt+0x19694>
   2a198:	cmp	r0, #0
   2a19c:	popne	{r4, pc}
   2a1a0:	bl	2a708 <__assert_fail@plt+0x19210>
   2a1a4:	push	{r4, lr}
   2a1a8:	mov	r2, r1
   2a1ac:	mov	r1, r0
   2a1b0:	mov	r0, #0
   2a1b4:	bl	2ab8c <__assert_fail@plt+0x19694>
   2a1b8:	cmp	r0, #0
   2a1bc:	popne	{r4, pc}
   2a1c0:	bl	2a708 <__assert_fail@plt+0x19210>
   2a1c4:	cmp	r1, #0
   2a1c8:	cmpne	r0, #0
   2a1cc:	moveq	r2, #1
   2a1d0:	movne	r2, r1
   2a1d4:	moveq	r1, r2
   2a1d8:	movne	r1, r0
   2a1dc:	push	{r4, lr}
   2a1e0:	mov	r0, #0
   2a1e4:	bl	2ab8c <__assert_fail@plt+0x19694>
   2a1e8:	cmp	r0, #0
   2a1ec:	popne	{r4, pc}
   2a1f0:	bl	2a708 <__assert_fail@plt+0x19210>
   2a1f4:	cmp	r0, #0
   2a1f8:	push	{r4, r5, r6, lr}
   2a1fc:	mov	r5, r1
   2a200:	ldr	r4, [r1]
   2a204:	beq	2a240 <__assert_fail@plt+0x18d48>
   2a208:	lsr	r2, r4, #1
   2a20c:	add	r3, r2, #1
   2a210:	mvn	r3, r3
   2a214:	cmp	r4, r3
   2a218:	bhi	2a25c <__assert_fail@plt+0x18d64>
   2a21c:	add	r4, r4, #1
   2a220:	add	r4, r4, r2
   2a224:	mov	r1, r4
   2a228:	mov	r2, #1
   2a22c:	bl	2ab8c <__assert_fail@plt+0x19694>
   2a230:	cmp	r0, #0
   2a234:	beq	2a260 <__assert_fail@plt+0x18d68>
   2a238:	str	r4, [r5]
   2a23c:	pop	{r4, r5, r6, pc}
   2a240:	cmp	r4, #0
   2a244:	moveq	r4, #64	; 0x40
   2a248:	mov	r1, r4
   2a24c:	mov	r2, #1
   2a250:	bl	2ab8c <__assert_fail@plt+0x19694>
   2a254:	cmp	r0, #0
   2a258:	bne	2a238 <__assert_fail@plt+0x18d40>
   2a25c:	bl	2a708 <__assert_fail@plt+0x19210>
   2a260:	cmp	r4, #0
   2a264:	bne	2a25c <__assert_fail@plt+0x18d64>
   2a268:	str	r4, [r5]
   2a26c:	pop	{r4, r5, r6, pc}
   2a270:	cmp	r0, #0
   2a274:	push	{r4, r5, r6, lr}
   2a278:	mov	r5, r1
   2a27c:	ldr	r4, [r1]
   2a280:	mov	r6, r2
   2a284:	beq	2a2c8 <__assert_fail@plt+0x18dd0>
   2a288:	lsr	r1, r4, #1
   2a28c:	add	r3, r1, #1
   2a290:	mvn	r3, r3
   2a294:	cmp	r4, r3
   2a298:	bhi	2a300 <__assert_fail@plt+0x18e08>
   2a29c:	add	r4, r4, #1
   2a2a0:	add	r4, r4, r1
   2a2a4:	mov	r1, r4
   2a2a8:	bl	2ab8c <__assert_fail@plt+0x19694>
   2a2ac:	cmp	r0, #0
   2a2b0:	bne	2a2c0 <__assert_fail@plt+0x18dc8>
   2a2b4:	cmp	r4, #0
   2a2b8:	cmpne	r6, #0
   2a2bc:	bne	2a300 <__assert_fail@plt+0x18e08>
   2a2c0:	str	r4, [r5]
   2a2c4:	pop	{r4, r5, r6, pc}
   2a2c8:	cmp	r4, #0
   2a2cc:	bne	2a2e8 <__assert_fail@plt+0x18df0>
   2a2d0:	mov	r1, r2
   2a2d4:	mov	r0, #64	; 0x40
   2a2d8:	bl	2ac70 <__assert_fail@plt+0x19778>
   2a2dc:	cmp	r0, #0
   2a2e0:	movne	r4, r0
   2a2e4:	addeq	r4, r0, #1
   2a2e8:	mov	r2, r6
   2a2ec:	mov	r1, r4
   2a2f0:	mov	r0, #0
   2a2f4:	bl	2ab8c <__assert_fail@plt+0x19694>
   2a2f8:	cmp	r0, #0
   2a2fc:	bne	2a2c0 <__assert_fail@plt+0x18dc8>
   2a300:	bl	2a708 <__assert_fail@plt+0x19210>
   2a304:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a308:	sub	sp, sp, #12
   2a30c:	ldr	r6, [r1]
   2a310:	mov	r8, r1
   2a314:	mov	r9, r0
   2a318:	asrs	r4, r6, #1
   2a31c:	mov	sl, r2
   2a320:	mov	fp, r3
   2a324:	ldr	r7, [sp, #48]	; 0x30
   2a328:	bmi	2a4a4 <__assert_fail@plt+0x18fac>
   2a32c:	mvn	r1, #-2147483648	; 0x80000000
   2a330:	sub	r1, r1, r4
   2a334:	cmp	r6, r1
   2a338:	movle	r1, #0
   2a33c:	movgt	r1, #1
   2a340:	mvn	r3, fp
   2a344:	cmp	r1, #0
   2a348:	addeq	r4, r4, r6
   2a34c:	mvnne	r4, #-2147483648	; 0x80000000
   2a350:	lsr	r3, r3, #31
   2a354:	cmp	fp, r4
   2a358:	movge	r2, #0
   2a35c:	andlt	r2, r3, #1
   2a360:	cmp	r2, #0
   2a364:	beq	2a454 <__assert_fail@plt+0x18f5c>
   2a368:	cmp	r7, #0
   2a36c:	blt	2a53c <__assert_fail@plt+0x19044>
   2a370:	bne	2a534 <__assert_fail@plt+0x1903c>
   2a374:	mov	r5, #64	; 0x40
   2a378:	mov	r1, r7
   2a37c:	mov	r0, r5
   2a380:	str	r3, [sp, #4]
   2a384:	bl	2ae7c <__assert_fail@plt+0x19984>
   2a388:	mov	r1, r7
   2a38c:	mov	r4, r0
   2a390:	mov	r0, r5
   2a394:	bl	2b09c <__assert_fail@plt+0x19ba4>
   2a398:	ldr	r3, [sp, #4]
   2a39c:	sub	r5, r5, r1
   2a3a0:	cmp	r9, #0
   2a3a4:	sub	r2, r4, r6
   2a3a8:	streq	r9, [r8]
   2a3ac:	cmp	r2, sl
   2a3b0:	bge	2a434 <__assert_fail@plt+0x18f3c>
   2a3b4:	cmp	sl, #0
   2a3b8:	blt	2a4d4 <__assert_fail@plt+0x18fdc>
   2a3bc:	cmp	r6, #0
   2a3c0:	blt	2a3e0 <__assert_fail@plt+0x18ee8>
   2a3c4:	mvn	r2, #-2147483648	; 0x80000000
   2a3c8:	sub	r2, r2, sl
   2a3cc:	cmp	r6, r2
   2a3d0:	movle	r2, #0
   2a3d4:	movgt	r2, #1
   2a3d8:	cmp	r2, #0
   2a3dc:	bne	2a4d0 <__assert_fail@plt+0x18fd8>
   2a3e0:	add	r6, r6, sl
   2a3e4:	cmp	fp, r6
   2a3e8:	movge	r3, #0
   2a3ec:	andlt	r3, r3, #1
   2a3f0:	cmp	r3, #0
   2a3f4:	mov	r4, r6
   2a3f8:	bne	2a4d0 <__assert_fail@plt+0x18fd8>
   2a3fc:	cmp	r7, #0
   2a400:	blt	2a4e8 <__assert_fail@plt+0x18ff0>
   2a404:	beq	2a430 <__assert_fail@plt+0x18f38>
   2a408:	cmp	r6, #0
   2a40c:	blt	2a58c <__assert_fail@plt+0x19094>
   2a410:	mov	r1, r7
   2a414:	mvn	r0, #-2147483648	; 0x80000000
   2a418:	bl	2ae7c <__assert_fail@plt+0x19984>
   2a41c:	cmp	r6, r0
   2a420:	movle	r0, #0
   2a424:	movgt	r0, #1
   2a428:	cmp	r0, #0
   2a42c:	bne	2a4d0 <__assert_fail@plt+0x18fd8>
   2a430:	mul	r5, r6, r7
   2a434:	mov	r1, r5
   2a438:	mov	r0, r9
   2a43c:	bl	2a7bc <__assert_fail@plt+0x192c4>
   2a440:	cmp	r0, #0
   2a444:	beq	2a4b8 <__assert_fail@plt+0x18fc0>
   2a448:	str	r4, [r8]
   2a44c:	add	sp, sp, #12
   2a450:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a454:	cmp	r7, #0
   2a458:	blt	2a514 <__assert_fail@plt+0x1901c>
   2a45c:	beq	2a374 <__assert_fail@plt+0x18e7c>
   2a460:	cmp	r4, #0
   2a464:	blt	2a544 <__assert_fail@plt+0x1904c>
   2a468:	mov	r1, r7
   2a46c:	mvn	r0, #-2147483648	; 0x80000000
   2a470:	str	r3, [sp, #4]
   2a474:	bl	2ae7c <__assert_fail@plt+0x19984>
   2a478:	ldr	r3, [sp, #4]
   2a47c:	cmp	r0, r4
   2a480:	movge	r0, #0
   2a484:	movlt	r0, #1
   2a488:	cmp	r0, #0
   2a48c:	mvnne	r5, #-2147483648	; 0x80000000
   2a490:	bne	2a378 <__assert_fail@plt+0x18e80>
   2a494:	mul	r5, r7, r4
   2a498:	cmp	r5, #63	; 0x3f
   2a49c:	bgt	2a3a0 <__assert_fail@plt+0x18ea8>
   2a4a0:	b	2a374 <__assert_fail@plt+0x18e7c>
   2a4a4:	rsb	r1, r4, #-2147483648	; 0x80000000
   2a4a8:	cmp	r6, r1
   2a4ac:	movge	r1, #0
   2a4b0:	movlt	r1, #1
   2a4b4:	b	2a340 <__assert_fail@plt+0x18e48>
   2a4b8:	adds	r5, r5, #0
   2a4bc:	movne	r5, #1
   2a4c0:	cmp	r9, #0
   2a4c4:	orreq	r5, r5, #1
   2a4c8:	cmp	r5, #0
   2a4cc:	beq	2a448 <__assert_fail@plt+0x18f50>
   2a4d0:	bl	2a708 <__assert_fail@plt+0x19210>
   2a4d4:	rsb	r2, sl, #-2147483648	; 0x80000000
   2a4d8:	cmp	r6, r2
   2a4dc:	movge	r2, #0
   2a4e0:	movlt	r2, #1
   2a4e4:	b	2a3d8 <__assert_fail@plt+0x18ee0>
   2a4e8:	cmp	r6, #0
   2a4ec:	blt	2a570 <__assert_fail@plt+0x19078>
   2a4f0:	cmn	r7, #1
   2a4f4:	beq	2a430 <__assert_fail@plt+0x18f38>
   2a4f8:	mov	r1, r7
   2a4fc:	mov	r0, #-2147483648	; 0x80000000
   2a500:	bl	2ae7c <__assert_fail@plt+0x19984>
   2a504:	cmp	r6, r0
   2a508:	movle	r0, #0
   2a50c:	movgt	r0, #1
   2a510:	b	2a428 <__assert_fail@plt+0x18f30>
   2a514:	cmp	r4, #0
   2a518:	blt	2a5b0 <__assert_fail@plt+0x190b8>
   2a51c:	cmn	r7, #1
   2a520:	beq	2a494 <__assert_fail@plt+0x18f9c>
   2a524:	str	r3, [sp, #4]
   2a528:	mov	r1, r7
   2a52c:	mov	r0, #-2147483648	; 0x80000000
   2a530:	b	2a474 <__assert_fail@plt+0x18f7c>
   2a534:	mov	r4, fp
   2a538:	b	2a468 <__assert_fail@plt+0x18f70>
   2a53c:	mov	r4, fp
   2a540:	b	2a51c <__assert_fail@plt+0x19024>
   2a544:	cmn	r4, #1
   2a548:	beq	2a494 <__assert_fail@plt+0x18f9c>
   2a54c:	mov	r1, r4
   2a550:	mov	r0, #-2147483648	; 0x80000000
   2a554:	str	r3, [sp, #4]
   2a558:	bl	2ae7c <__assert_fail@plt+0x19984>
   2a55c:	ldr	r3, [sp, #4]
   2a560:	cmp	r7, r0
   2a564:	movle	r0, #0
   2a568:	movgt	r0, #1
   2a56c:	b	2a488 <__assert_fail@plt+0x18f90>
   2a570:	mov	r1, r7
   2a574:	mvn	r0, #-2147483648	; 0x80000000
   2a578:	bl	2ae7c <__assert_fail@plt+0x19984>
   2a57c:	cmp	r6, r0
   2a580:	movge	r0, #0
   2a584:	movlt	r0, #1
   2a588:	b	2a428 <__assert_fail@plt+0x18f30>
   2a58c:	cmn	r6, #1
   2a590:	beq	2a430 <__assert_fail@plt+0x18f38>
   2a594:	mov	r1, r6
   2a598:	mov	r0, #-2147483648	; 0x80000000
   2a59c:	bl	2ae7c <__assert_fail@plt+0x19984>
   2a5a0:	cmp	r7, r0
   2a5a4:	movle	r0, #0
   2a5a8:	movgt	r0, #1
   2a5ac:	b	2a428 <__assert_fail@plt+0x18f30>
   2a5b0:	mov	r1, r7
   2a5b4:	mvn	r0, #-2147483648	; 0x80000000
   2a5b8:	str	r3, [sp, #4]
   2a5bc:	bl	2ae7c <__assert_fail@plt+0x19984>
   2a5c0:	ldr	r3, [sp, #4]
   2a5c4:	cmp	r0, r4
   2a5c8:	movle	r0, #0
   2a5cc:	movgt	r0, #1
   2a5d0:	b	2a488 <__assert_fail@plt+0x18f90>
   2a5d4:	push	{r4, lr}
   2a5d8:	mov	r1, #1
   2a5dc:	bl	2a748 <__assert_fail@plt+0x19250>
   2a5e0:	cmp	r0, #0
   2a5e4:	popne	{r4, pc}
   2a5e8:	bl	2a708 <__assert_fail@plt+0x19210>
   2a5ec:	push	{r4, lr}
   2a5f0:	mov	r1, #1
   2a5f4:	bl	2a748 <__assert_fail@plt+0x19250>
   2a5f8:	cmp	r0, #0
   2a5fc:	popne	{r4, pc}
   2a600:	bl	2a708 <__assert_fail@plt+0x19210>
   2a604:	push	{r4, lr}
   2a608:	bl	2a748 <__assert_fail@plt+0x19250>
   2a60c:	cmp	r0, #0
   2a610:	popne	{r4, pc}
   2a614:	bl	2a708 <__assert_fail@plt+0x19210>
   2a618:	push	{r4, lr}
   2a61c:	bl	2a748 <__assert_fail@plt+0x19250>
   2a620:	cmp	r0, #0
   2a624:	popne	{r4, pc}
   2a628:	bl	2a708 <__assert_fail@plt+0x19210>
   2a62c:	push	{r4, r5, r6, lr}
   2a630:	mov	r6, r0
   2a634:	mov	r0, r1
   2a638:	mov	r4, r1
   2a63c:	bl	2a790 <__assert_fail@plt+0x19298>
   2a640:	subs	r5, r0, #0
   2a644:	beq	2a65c <__assert_fail@plt+0x19164>
   2a648:	mov	r2, r4
   2a64c:	mov	r1, r6
   2a650:	bl	11234 <memcpy@plt>
   2a654:	mov	r0, r5
   2a658:	pop	{r4, r5, r6, pc}
   2a65c:	bl	2a708 <__assert_fail@plt+0x19210>
   2a660:	push	{r4, r5, r6, lr}
   2a664:	mov	r6, r0
   2a668:	mov	r0, r1
   2a66c:	mov	r4, r1
   2a670:	bl	2a790 <__assert_fail@plt+0x19298>
   2a674:	subs	r5, r0, #0
   2a678:	beq	2a690 <__assert_fail@plt+0x19198>
   2a67c:	mov	r2, r4
   2a680:	mov	r1, r6
   2a684:	bl	11234 <memcpy@plt>
   2a688:	mov	r0, r5
   2a68c:	pop	{r4, r5, r6, pc}
   2a690:	bl	2a708 <__assert_fail@plt+0x19210>
   2a694:	push	{r4, r5, r6, lr}
   2a698:	mov	r6, r0
   2a69c:	add	r0, r1, #1
   2a6a0:	mov	r4, r1
   2a6a4:	bl	2a790 <__assert_fail@plt+0x19298>
   2a6a8:	subs	r5, r0, #0
   2a6ac:	beq	2a6cc <__assert_fail@plt+0x191d4>
   2a6b0:	mov	r3, #0
   2a6b4:	mov	r1, r6
   2a6b8:	strb	r3, [r5, r4]
   2a6bc:	mov	r2, r4
   2a6c0:	bl	11234 <memcpy@plt>
   2a6c4:	mov	r0, r5
   2a6c8:	pop	{r4, r5, r6, pc}
   2a6cc:	bl	2a708 <__assert_fail@plt+0x19210>
   2a6d0:	push	{r4, r5, r6, lr}
   2a6d4:	mov	r6, r0
   2a6d8:	bl	113c0 <strlen@plt>
   2a6dc:	add	r4, r0, #1
   2a6e0:	mov	r0, r4
   2a6e4:	bl	2a790 <__assert_fail@plt+0x19298>
   2a6e8:	subs	r5, r0, #0
   2a6ec:	beq	2a704 <__assert_fail@plt+0x1920c>
   2a6f0:	mov	r2, r4
   2a6f4:	mov	r1, r6
   2a6f8:	bl	11234 <memcpy@plt>
   2a6fc:	mov	r0, r5
   2a700:	pop	{r4, r5, r6, pc}
   2a704:	bl	2a708 <__assert_fail@plt+0x19210>
   2a708:	ldr	r3, [pc, #44]	; 2a73c <__assert_fail@plt+0x19244>
   2a70c:	push	{r4, lr}
   2a710:	mov	r2, #5
   2a714:	ldr	r1, [pc, #36]	; 2a740 <__assert_fail@plt+0x19248>
   2a718:	mov	r0, #0
   2a71c:	ldr	r4, [r3]
   2a720:	bl	11288 <dcgettext@plt>
   2a724:	ldr	r2, [pc, #24]	; 2a744 <__assert_fail@plt+0x1924c>
   2a728:	mov	r1, #0
   2a72c:	mov	r3, r0
   2a730:	mov	r0, r4
   2a734:	bl	11324 <error@plt>
   2a738:	bl	114ec <abort@plt>
   2a73c:	andeq	sp, r3, ip, asr #2
   2a740:	andeq	ip, r2, r4, asr #8
   2a744:	andeq	fp, r2, r4, lsr #26
   2a748:	cmp	r1, #0
   2a74c:	cmpne	r0, #0
   2a750:	moveq	r1, #1
   2a754:	moveq	r0, r1
   2a758:	umull	r2, r3, r0, r1
   2a75c:	adds	r3, r3, #0
   2a760:	movne	r3, #1
   2a764:	cmp	r2, #0
   2a768:	blt	2a778 <__assert_fail@plt+0x19280>
   2a76c:	cmp	r3, #0
   2a770:	bne	2a778 <__assert_fail@plt+0x19280>
   2a774:	b	11174 <calloc@plt>
   2a778:	push	{r4, lr}
   2a77c:	bl	113f0 <__errno_location@plt>
   2a780:	mov	r3, #12
   2a784:	str	r3, [r0]
   2a788:	mov	r0, #0
   2a78c:	pop	{r4, pc}
   2a790:	cmp	r0, #0
   2a794:	moveq	r0, #1
   2a798:	cmp	r0, #0
   2a79c:	blt	2a7a4 <__assert_fail@plt+0x192ac>
   2a7a0:	b	11348 <malloc@plt>
   2a7a4:	push	{r4, lr}
   2a7a8:	bl	113f0 <__errno_location@plt>
   2a7ac:	mov	r3, #12
   2a7b0:	str	r3, [r0]
   2a7b4:	mov	r0, #0
   2a7b8:	pop	{r4, pc}
   2a7bc:	cmp	r0, #0
   2a7c0:	beq	2a7e4 <__assert_fail@plt+0x192ec>
   2a7c4:	cmp	r1, #0
   2a7c8:	push	{lr}		; (str lr, [sp, #-4]!)
   2a7cc:	sub	sp, sp, #12
   2a7d0:	beq	2a7ec <__assert_fail@plt+0x192f4>
   2a7d4:	blt	2a804 <__assert_fail@plt+0x1930c>
   2a7d8:	add	sp, sp, #12
   2a7dc:	pop	{lr}		; (ldr lr, [sp], #4)
   2a7e0:	b	112a0 <realloc@plt>
   2a7e4:	mov	r0, r1
   2a7e8:	b	2a790 <__assert_fail@plt+0x19298>
   2a7ec:	str	r1, [sp, #4]
   2a7f0:	bl	14214 <__assert_fail@plt+0x2d1c>
   2a7f4:	ldr	r3, [sp, #4]
   2a7f8:	mov	r0, r3
   2a7fc:	add	sp, sp, #12
   2a800:	pop	{pc}		; (ldr pc, [sp], #4)
   2a804:	bl	113f0 <__errno_location@plt>
   2a808:	mov	r2, #12
   2a80c:	mov	r3, #0
   2a810:	str	r2, [r0]
   2a814:	b	2a7f8 <__assert_fail@plt+0x19300>
   2a818:	push	{r4, r5, r6, lr}
   2a81c:	mov	r4, r0
   2a820:	bl	1130c <__fpending@plt>
   2a824:	ldr	r5, [r4]
   2a828:	and	r5, r5, #32
   2a82c:	mov	r6, r0
   2a830:	mov	r0, r4
   2a834:	bl	2a95c <__assert_fail@plt+0x19464>
   2a838:	cmp	r5, #0
   2a83c:	mov	r4, r0
   2a840:	bne	2a860 <__assert_fail@plt+0x19368>
   2a844:	cmp	r0, #0
   2a848:	beq	2a858 <__assert_fail@plt+0x19360>
   2a84c:	cmp	r6, #0
   2a850:	beq	2a87c <__assert_fail@plt+0x19384>
   2a854:	mvn	r4, #0
   2a858:	mov	r0, r4
   2a85c:	pop	{r4, r5, r6, pc}
   2a860:	cmp	r0, #0
   2a864:	bne	2a854 <__assert_fail@plt+0x1935c>
   2a868:	bl	113f0 <__errno_location@plt>
   2a86c:	str	r4, [r0]
   2a870:	mvn	r4, #0
   2a874:	mov	r0, r4
   2a878:	pop	{r4, r5, r6, pc}
   2a87c:	bl	113f0 <__errno_location@plt>
   2a880:	ldr	r4, [r0]
   2a884:	subs	r4, r4, #9
   2a888:	mvnne	r4, #0
   2a88c:	mov	r0, r4
   2a890:	pop	{r4, r5, r6, pc}
   2a894:	ldr	ip, [r0, #4]
   2a898:	cmp	ip, r1
   2a89c:	bcs	2a918 <__assert_fail@plt+0x19420>
   2a8a0:	cmp	r3, #0
   2a8a4:	push	{r4, r5, r6, r7, r8, lr}
   2a8a8:	mov	r6, r3
   2a8ac:	mov	r7, r2
   2a8b0:	mov	r5, r1
   2a8b4:	mov	r4, r0
   2a8b8:	bne	2a8ec <__assert_fail@plt+0x193f4>
   2a8bc:	ldr	r0, [r4, #8]
   2a8c0:	mul	r1, r6, r5
   2a8c4:	cmp	r0, r7
   2a8c8:	beq	2a928 <__assert_fail@plt+0x19430>
   2a8cc:	bl	2a7bc <__assert_fail@plt+0x192c4>
   2a8d0:	subs	r7, r0, #0
   2a8d4:	beq	2a954 <__assert_fail@plt+0x1945c>
   2a8d8:	mov	r3, #1
   2a8dc:	stmib	r4, {r5, r7}
   2a8e0:	str	r5, [r4]
   2a8e4:	mov	r0, r3
   2a8e8:	pop	{r4, r5, r6, r7, r8, pc}
   2a8ec:	mov	r1, r3
   2a8f0:	mvn	r0, #0
   2a8f4:	bl	2ac70 <__assert_fail@plt+0x19778>
   2a8f8:	cmp	r5, r0
   2a8fc:	bls	2a8bc <__assert_fail@plt+0x193c4>
   2a900:	bl	113f0 <__errno_location@plt>
   2a904:	mov	r3, #0
   2a908:	mov	r2, #12
   2a90c:	str	r2, [r0]
   2a910:	mov	r0, r3
   2a914:	pop	{r4, r5, r6, r7, r8, pc}
   2a918:	mov	r3, #1
   2a91c:	str	r1, [r0]
   2a920:	mov	r0, r3
   2a924:	bx	lr
   2a928:	mov	r0, r1
   2a92c:	bl	2a790 <__assert_fail@plt+0x19298>
   2a930:	subs	r7, r0, #0
   2a934:	beq	2a954 <__assert_fail@plt+0x1945c>
   2a938:	ldr	r1, [r4, #8]
   2a93c:	cmp	r1, #0
   2a940:	beq	2a8d8 <__assert_fail@plt+0x193e0>
   2a944:	ldr	r2, [r4]
   2a948:	mul	r2, r2, r6
   2a94c:	bl	11234 <memcpy@plt>
   2a950:	b	2a8d8 <__assert_fail@plt+0x193e0>
   2a954:	mov	r3, #0
   2a958:	b	2a8e4 <__assert_fail@plt+0x193ec>
   2a95c:	push	{r4, r5, lr}
   2a960:	sub	sp, sp, #12
   2a964:	mov	r4, r0
   2a968:	bl	11438 <fileno@plt>
   2a96c:	cmp	r0, #0
   2a970:	mov	r0, r4
   2a974:	blt	2a9f0 <__assert_fail@plt+0x194f8>
   2a978:	bl	11360 <__freading@plt>
   2a97c:	cmp	r0, #0
   2a980:	bne	2a9bc <__assert_fail@plt+0x194c4>
   2a984:	mov	r0, r4
   2a988:	bl	2a9fc <__assert_fail@plt+0x19504>
   2a98c:	cmp	r0, #0
   2a990:	beq	2a9ec <__assert_fail@plt+0x194f4>
   2a994:	bl	113f0 <__errno_location@plt>
   2a998:	mov	r5, r0
   2a99c:	mov	r0, r4
   2a9a0:	ldr	r4, [r5]
   2a9a4:	bl	1145c <fclose@plt>
   2a9a8:	cmp	r4, #0
   2a9ac:	mvnne	r0, #0
   2a9b0:	strne	r4, [r5]
   2a9b4:	add	sp, sp, #12
   2a9b8:	pop	{r4, r5, pc}
   2a9bc:	mov	r0, r4
   2a9c0:	bl	11438 <fileno@plt>
   2a9c4:	mov	r3, #1
   2a9c8:	str	r3, [sp]
   2a9cc:	mov	r2, #0
   2a9d0:	mov	r3, #0
   2a9d4:	bl	112f4 <lseek64@plt>
   2a9d8:	mvn	r3, #0
   2a9dc:	mvn	r2, #0
   2a9e0:	cmp	r1, r3
   2a9e4:	cmpeq	r0, r2
   2a9e8:	bne	2a984 <__assert_fail@plt+0x1948c>
   2a9ec:	mov	r0, r4
   2a9f0:	add	sp, sp, #12
   2a9f4:	pop	{r4, r5, lr}
   2a9f8:	b	1145c <fclose@plt>
   2a9fc:	push	{r4, lr}
   2aa00:	subs	r4, r0, #0
   2aa04:	sub	sp, sp, #8
   2aa08:	beq	2aa24 <__assert_fail@plt+0x1952c>
   2aa0c:	bl	11360 <__freading@plt>
   2aa10:	cmp	r0, #0
   2aa14:	beq	2aa24 <__assert_fail@plt+0x1952c>
   2aa18:	ldr	r3, [r4]
   2aa1c:	tst	r3, #256	; 0x100
   2aa20:	bne	2aa34 <__assert_fail@plt+0x1953c>
   2aa24:	mov	r0, r4
   2aa28:	add	sp, sp, #8
   2aa2c:	pop	{r4, lr}
   2aa30:	b	111ec <fflush@plt>
   2aa34:	mov	r3, #1
   2aa38:	str	r3, [sp]
   2aa3c:	mov	r2, #0
   2aa40:	mov	r3, #0
   2aa44:	mov	r0, r4
   2aa48:	bl	2aa5c <__assert_fail@plt+0x19564>
   2aa4c:	mov	r0, r4
   2aa50:	add	sp, sp, #8
   2aa54:	pop	{r4, lr}
   2aa58:	b	111ec <fflush@plt>
   2aa5c:	push	{r4, r5, r6, r7, r8, lr}
   2aa60:	sub	sp, sp, #8
   2aa64:	ldmib	r0, {ip, lr}
   2aa68:	mov	r4, r0
   2aa6c:	ldr	r5, [sp, #32]
   2aa70:	cmp	lr, ip
   2aa74:	beq	2aa8c <__assert_fail@plt+0x19594>
   2aa78:	str	r5, [sp, #32]
   2aa7c:	mov	r0, r4
   2aa80:	add	sp, sp, #8
   2aa84:	pop	{r4, r5, r6, r7, r8, lr}
   2aa88:	b	11468 <fseeko64@plt>
   2aa8c:	ldr	lr, [r0, #20]
   2aa90:	ldr	ip, [r0, #16]
   2aa94:	cmp	lr, ip
   2aa98:	bne	2aa78 <__assert_fail@plt+0x19580>
   2aa9c:	ldr	r8, [r0, #36]	; 0x24
   2aaa0:	cmp	r8, #0
   2aaa4:	bne	2aa78 <__assert_fail@plt+0x19580>
   2aaa8:	mov	r6, r2
   2aaac:	mov	r7, r3
   2aab0:	bl	11438 <fileno@plt>
   2aab4:	mov	r2, r6
   2aab8:	mov	r3, r7
   2aabc:	str	r5, [sp]
   2aac0:	bl	112f4 <lseek64@plt>
   2aac4:	mvn	r3, #0
   2aac8:	mvn	r2, #0
   2aacc:	cmp	r1, r3
   2aad0:	cmpeq	r0, r2
   2aad4:	beq	2aaf4 <__assert_fail@plt+0x195fc>
   2aad8:	ldr	r3, [r4]
   2aadc:	strd	r0, [r4, #80]	; 0x50
   2aae0:	mov	r0, r8
   2aae4:	bic	r3, r3, #16
   2aae8:	str	r3, [r4]
   2aaec:	add	sp, sp, #8
   2aaf0:	pop	{r4, r5, r6, r7, r8, pc}
   2aaf4:	mvn	r0, #0
   2aaf8:	b	2aaec <__assert_fail@plt+0x195f4>
   2aafc:	push	{lr}		; (str lr, [sp, #-4]!)
   2ab00:	sub	sp, sp, #268	; 0x10c
   2ab04:	add	r1, sp, #4
   2ab08:	ldr	r2, [pc, #60]	; 2ab4c <__assert_fail@plt+0x19654>
   2ab0c:	bl	2abd8 <__assert_fail@plt+0x196e0>
   2ab10:	cmp	r0, #0
   2ab14:	movne	r0, #0
   2ab18:	bne	2ab44 <__assert_fail@plt+0x1964c>
   2ab1c:	ldr	r1, [pc, #44]	; 2ab50 <__assert_fail@plt+0x19658>
   2ab20:	add	r0, sp, #4
   2ab24:	bl	111bc <strcmp@plt>
   2ab28:	cmp	r0, #0
   2ab2c:	beq	2ab44 <__assert_fail@plt+0x1964c>
   2ab30:	add	r0, sp, #4
   2ab34:	ldr	r1, [pc, #24]	; 2ab54 <__assert_fail@plt+0x1965c>
   2ab38:	bl	111bc <strcmp@plt>
   2ab3c:	adds	r0, r0, #0
   2ab40:	movne	r0, #1
   2ab44:	add	sp, sp, #268	; 0x10c
   2ab48:	pop	{pc}		; (ldr pc, [sp], #4)
   2ab4c:	andeq	r0, r0, r1, lsl #2
   2ab50:	andeq	ip, r2, r8, asr r4
   2ab54:	andeq	ip, r2, ip, asr r4
   2ab58:	push	{r4, lr}
   2ab5c:	mov	r0, #14
   2ab60:	bl	114a4 <nl_langinfo@plt>
   2ab64:	cmp	r0, #0
   2ab68:	beq	2ab80 <__assert_fail@plt+0x19688>
   2ab6c:	ldrb	r2, [r0]
   2ab70:	ldr	r3, [pc, #16]	; 2ab88 <__assert_fail@plt+0x19690>
   2ab74:	cmp	r2, #0
   2ab78:	moveq	r0, r3
   2ab7c:	pop	{r4, pc}
   2ab80:	ldr	r0, [pc]	; 2ab88 <__assert_fail@plt+0x19690>
   2ab84:	pop	{r4, pc}
   2ab88:	andeq	ip, r2, r4, ror #8
   2ab8c:	push	{r4, r5, r6, lr}
   2ab90:	subs	r4, r2, #0
   2ab94:	mov	r6, r0
   2ab98:	mov	r5, r1
   2ab9c:	beq	2abc8 <__assert_fail@plt+0x196d0>
   2aba0:	mov	r1, r4
   2aba4:	mvn	r0, #0
   2aba8:	bl	2ac70 <__assert_fail@plt+0x19778>
   2abac:	cmp	r0, r5
   2abb0:	bcs	2abc8 <__assert_fail@plt+0x196d0>
   2abb4:	bl	113f0 <__errno_location@plt>
   2abb8:	mov	r3, #12
   2abbc:	str	r3, [r0]
   2abc0:	mov	r0, #0
   2abc4:	pop	{r4, r5, r6, pc}
   2abc8:	mul	r1, r5, r4
   2abcc:	mov	r0, r6
   2abd0:	pop	{r4, r5, r6, lr}
   2abd4:	b	2a7bc <__assert_fail@plt+0x192c4>
   2abd8:	push	{r4, r5, r6, lr}
   2abdc:	mov	r5, r1
   2abe0:	mov	r1, #0
   2abe4:	mov	r4, r2
   2abe8:	bl	1148c <setlocale@plt>
   2abec:	subs	r6, r0, #0
   2abf0:	beq	2ac4c <__assert_fail@plt+0x19754>
   2abf4:	bl	113c0 <strlen@plt>
   2abf8:	cmp	r4, r0
   2abfc:	bhi	2ac34 <__assert_fail@plt+0x1973c>
   2ac00:	cmp	r4, #0
   2ac04:	bne	2ac10 <__assert_fail@plt+0x19718>
   2ac08:	mov	r0, #34	; 0x22
   2ac0c:	pop	{r4, r5, r6, pc}
   2ac10:	sub	r4, r4, #1
   2ac14:	mov	r1, r6
   2ac18:	mov	r2, r4
   2ac1c:	mov	r0, r5
   2ac20:	bl	11234 <memcpy@plt>
   2ac24:	mov	r3, #0
   2ac28:	strb	r3, [r5, r4]
   2ac2c:	mov	r0, #34	; 0x22
   2ac30:	pop	{r4, r5, r6, pc}
   2ac34:	add	r2, r0, #1
   2ac38:	mov	r1, r6
   2ac3c:	mov	r0, r5
   2ac40:	bl	11234 <memcpy@plt>
   2ac44:	mov	r0, #0
   2ac48:	pop	{r4, r5, r6, pc}
   2ac4c:	cmp	r4, #0
   2ac50:	beq	2ac60 <__assert_fail@plt+0x19768>
   2ac54:	strb	r6, [r5]
   2ac58:	mov	r0, #22
   2ac5c:	pop	{r4, r5, r6, pc}
   2ac60:	mov	r0, #22
   2ac64:	pop	{r4, r5, r6, pc}
   2ac68:	mov	r1, #0
   2ac6c:	b	1148c <setlocale@plt>
   2ac70:	subs	r2, r1, #1
   2ac74:	bxeq	lr
   2ac78:	bcc	2ae50 <__assert_fail@plt+0x19958>
   2ac7c:	cmp	r0, r1
   2ac80:	bls	2ae34 <__assert_fail@plt+0x1993c>
   2ac84:	tst	r1, r2
   2ac88:	beq	2ae40 <__assert_fail@plt+0x19948>
   2ac8c:	clz	r3, r0
   2ac90:	clz	r2, r1
   2ac94:	sub	r3, r2, r3
   2ac98:	rsbs	r3, r3, #31
   2ac9c:	addne	r3, r3, r3, lsl #1
   2aca0:	mov	r2, #0
   2aca4:	addne	pc, pc, r3, lsl #2
   2aca8:	nop			; (mov r0, r0)
   2acac:	cmp	r0, r1, lsl #31
   2acb0:	adc	r2, r2, r2
   2acb4:	subcs	r0, r0, r1, lsl #31
   2acb8:	cmp	r0, r1, lsl #30
   2acbc:	adc	r2, r2, r2
   2acc0:	subcs	r0, r0, r1, lsl #30
   2acc4:	cmp	r0, r1, lsl #29
   2acc8:	adc	r2, r2, r2
   2accc:	subcs	r0, r0, r1, lsl #29
   2acd0:	cmp	r0, r1, lsl #28
   2acd4:	adc	r2, r2, r2
   2acd8:	subcs	r0, r0, r1, lsl #28
   2acdc:	cmp	r0, r1, lsl #27
   2ace0:	adc	r2, r2, r2
   2ace4:	subcs	r0, r0, r1, lsl #27
   2ace8:	cmp	r0, r1, lsl #26
   2acec:	adc	r2, r2, r2
   2acf0:	subcs	r0, r0, r1, lsl #26
   2acf4:	cmp	r0, r1, lsl #25
   2acf8:	adc	r2, r2, r2
   2acfc:	subcs	r0, r0, r1, lsl #25
   2ad00:	cmp	r0, r1, lsl #24
   2ad04:	adc	r2, r2, r2
   2ad08:	subcs	r0, r0, r1, lsl #24
   2ad0c:	cmp	r0, r1, lsl #23
   2ad10:	adc	r2, r2, r2
   2ad14:	subcs	r0, r0, r1, lsl #23
   2ad18:	cmp	r0, r1, lsl #22
   2ad1c:	adc	r2, r2, r2
   2ad20:	subcs	r0, r0, r1, lsl #22
   2ad24:	cmp	r0, r1, lsl #21
   2ad28:	adc	r2, r2, r2
   2ad2c:	subcs	r0, r0, r1, lsl #21
   2ad30:	cmp	r0, r1, lsl #20
   2ad34:	adc	r2, r2, r2
   2ad38:	subcs	r0, r0, r1, lsl #20
   2ad3c:	cmp	r0, r1, lsl #19
   2ad40:	adc	r2, r2, r2
   2ad44:	subcs	r0, r0, r1, lsl #19
   2ad48:	cmp	r0, r1, lsl #18
   2ad4c:	adc	r2, r2, r2
   2ad50:	subcs	r0, r0, r1, lsl #18
   2ad54:	cmp	r0, r1, lsl #17
   2ad58:	adc	r2, r2, r2
   2ad5c:	subcs	r0, r0, r1, lsl #17
   2ad60:	cmp	r0, r1, lsl #16
   2ad64:	adc	r2, r2, r2
   2ad68:	subcs	r0, r0, r1, lsl #16
   2ad6c:	cmp	r0, r1, lsl #15
   2ad70:	adc	r2, r2, r2
   2ad74:	subcs	r0, r0, r1, lsl #15
   2ad78:	cmp	r0, r1, lsl #14
   2ad7c:	adc	r2, r2, r2
   2ad80:	subcs	r0, r0, r1, lsl #14
   2ad84:	cmp	r0, r1, lsl #13
   2ad88:	adc	r2, r2, r2
   2ad8c:	subcs	r0, r0, r1, lsl #13
   2ad90:	cmp	r0, r1, lsl #12
   2ad94:	adc	r2, r2, r2
   2ad98:	subcs	r0, r0, r1, lsl #12
   2ad9c:	cmp	r0, r1, lsl #11
   2ada0:	adc	r2, r2, r2
   2ada4:	subcs	r0, r0, r1, lsl #11
   2ada8:	cmp	r0, r1, lsl #10
   2adac:	adc	r2, r2, r2
   2adb0:	subcs	r0, r0, r1, lsl #10
   2adb4:	cmp	r0, r1, lsl #9
   2adb8:	adc	r2, r2, r2
   2adbc:	subcs	r0, r0, r1, lsl #9
   2adc0:	cmp	r0, r1, lsl #8
   2adc4:	adc	r2, r2, r2
   2adc8:	subcs	r0, r0, r1, lsl #8
   2adcc:	cmp	r0, r1, lsl #7
   2add0:	adc	r2, r2, r2
   2add4:	subcs	r0, r0, r1, lsl #7
   2add8:	cmp	r0, r1, lsl #6
   2addc:	adc	r2, r2, r2
   2ade0:	subcs	r0, r0, r1, lsl #6
   2ade4:	cmp	r0, r1, lsl #5
   2ade8:	adc	r2, r2, r2
   2adec:	subcs	r0, r0, r1, lsl #5
   2adf0:	cmp	r0, r1, lsl #4
   2adf4:	adc	r2, r2, r2
   2adf8:	subcs	r0, r0, r1, lsl #4
   2adfc:	cmp	r0, r1, lsl #3
   2ae00:	adc	r2, r2, r2
   2ae04:	subcs	r0, r0, r1, lsl #3
   2ae08:	cmp	r0, r1, lsl #2
   2ae0c:	adc	r2, r2, r2
   2ae10:	subcs	r0, r0, r1, lsl #2
   2ae14:	cmp	r0, r1, lsl #1
   2ae18:	adc	r2, r2, r2
   2ae1c:	subcs	r0, r0, r1, lsl #1
   2ae20:	cmp	r0, r1
   2ae24:	adc	r2, r2, r2
   2ae28:	subcs	r0, r0, r1
   2ae2c:	mov	r0, r2
   2ae30:	bx	lr
   2ae34:	moveq	r0, #1
   2ae38:	movne	r0, #0
   2ae3c:	bx	lr
   2ae40:	clz	r2, r1
   2ae44:	rsb	r2, r2, #31
   2ae48:	lsr	r0, r0, r2
   2ae4c:	bx	lr
   2ae50:	cmp	r0, #0
   2ae54:	mvnne	r0, #0
   2ae58:	b	2b0bc <__assert_fail@plt+0x19bc4>
   2ae5c:	cmp	r1, #0
   2ae60:	beq	2ae50 <__assert_fail@plt+0x19958>
   2ae64:	push	{r0, r1, lr}
   2ae68:	bl	2ac70 <__assert_fail@plt+0x19778>
   2ae6c:	pop	{r1, r2, lr}
   2ae70:	mul	r3, r2, r0
   2ae74:	sub	r1, r1, r3
   2ae78:	bx	lr
   2ae7c:	cmp	r1, #0
   2ae80:	beq	2b08c <__assert_fail@plt+0x19b94>
   2ae84:	eor	ip, r0, r1
   2ae88:	rsbmi	r1, r1, #0
   2ae8c:	subs	r2, r1, #1
   2ae90:	beq	2b058 <__assert_fail@plt+0x19b60>
   2ae94:	movs	r3, r0
   2ae98:	rsbmi	r3, r0, #0
   2ae9c:	cmp	r3, r1
   2aea0:	bls	2b064 <__assert_fail@plt+0x19b6c>
   2aea4:	tst	r1, r2
   2aea8:	beq	2b074 <__assert_fail@plt+0x19b7c>
   2aeac:	clz	r2, r3
   2aeb0:	clz	r0, r1
   2aeb4:	sub	r2, r0, r2
   2aeb8:	rsbs	r2, r2, #31
   2aebc:	addne	r2, r2, r2, lsl #1
   2aec0:	mov	r0, #0
   2aec4:	addne	pc, pc, r2, lsl #2
   2aec8:	nop			; (mov r0, r0)
   2aecc:	cmp	r3, r1, lsl #31
   2aed0:	adc	r0, r0, r0
   2aed4:	subcs	r3, r3, r1, lsl #31
   2aed8:	cmp	r3, r1, lsl #30
   2aedc:	adc	r0, r0, r0
   2aee0:	subcs	r3, r3, r1, lsl #30
   2aee4:	cmp	r3, r1, lsl #29
   2aee8:	adc	r0, r0, r0
   2aeec:	subcs	r3, r3, r1, lsl #29
   2aef0:	cmp	r3, r1, lsl #28
   2aef4:	adc	r0, r0, r0
   2aef8:	subcs	r3, r3, r1, lsl #28
   2aefc:	cmp	r3, r1, lsl #27
   2af00:	adc	r0, r0, r0
   2af04:	subcs	r3, r3, r1, lsl #27
   2af08:	cmp	r3, r1, lsl #26
   2af0c:	adc	r0, r0, r0
   2af10:	subcs	r3, r3, r1, lsl #26
   2af14:	cmp	r3, r1, lsl #25
   2af18:	adc	r0, r0, r0
   2af1c:	subcs	r3, r3, r1, lsl #25
   2af20:	cmp	r3, r1, lsl #24
   2af24:	adc	r0, r0, r0
   2af28:	subcs	r3, r3, r1, lsl #24
   2af2c:	cmp	r3, r1, lsl #23
   2af30:	adc	r0, r0, r0
   2af34:	subcs	r3, r3, r1, lsl #23
   2af38:	cmp	r3, r1, lsl #22
   2af3c:	adc	r0, r0, r0
   2af40:	subcs	r3, r3, r1, lsl #22
   2af44:	cmp	r3, r1, lsl #21
   2af48:	adc	r0, r0, r0
   2af4c:	subcs	r3, r3, r1, lsl #21
   2af50:	cmp	r3, r1, lsl #20
   2af54:	adc	r0, r0, r0
   2af58:	subcs	r3, r3, r1, lsl #20
   2af5c:	cmp	r3, r1, lsl #19
   2af60:	adc	r0, r0, r0
   2af64:	subcs	r3, r3, r1, lsl #19
   2af68:	cmp	r3, r1, lsl #18
   2af6c:	adc	r0, r0, r0
   2af70:	subcs	r3, r3, r1, lsl #18
   2af74:	cmp	r3, r1, lsl #17
   2af78:	adc	r0, r0, r0
   2af7c:	subcs	r3, r3, r1, lsl #17
   2af80:	cmp	r3, r1, lsl #16
   2af84:	adc	r0, r0, r0
   2af88:	subcs	r3, r3, r1, lsl #16
   2af8c:	cmp	r3, r1, lsl #15
   2af90:	adc	r0, r0, r0
   2af94:	subcs	r3, r3, r1, lsl #15
   2af98:	cmp	r3, r1, lsl #14
   2af9c:	adc	r0, r0, r0
   2afa0:	subcs	r3, r3, r1, lsl #14
   2afa4:	cmp	r3, r1, lsl #13
   2afa8:	adc	r0, r0, r0
   2afac:	subcs	r3, r3, r1, lsl #13
   2afb0:	cmp	r3, r1, lsl #12
   2afb4:	adc	r0, r0, r0
   2afb8:	subcs	r3, r3, r1, lsl #12
   2afbc:	cmp	r3, r1, lsl #11
   2afc0:	adc	r0, r0, r0
   2afc4:	subcs	r3, r3, r1, lsl #11
   2afc8:	cmp	r3, r1, lsl #10
   2afcc:	adc	r0, r0, r0
   2afd0:	subcs	r3, r3, r1, lsl #10
   2afd4:	cmp	r3, r1, lsl #9
   2afd8:	adc	r0, r0, r0
   2afdc:	subcs	r3, r3, r1, lsl #9
   2afe0:	cmp	r3, r1, lsl #8
   2afe4:	adc	r0, r0, r0
   2afe8:	subcs	r3, r3, r1, lsl #8
   2afec:	cmp	r3, r1, lsl #7
   2aff0:	adc	r0, r0, r0
   2aff4:	subcs	r3, r3, r1, lsl #7
   2aff8:	cmp	r3, r1, lsl #6
   2affc:	adc	r0, r0, r0
   2b000:	subcs	r3, r3, r1, lsl #6
   2b004:	cmp	r3, r1, lsl #5
   2b008:	adc	r0, r0, r0
   2b00c:	subcs	r3, r3, r1, lsl #5
   2b010:	cmp	r3, r1, lsl #4
   2b014:	adc	r0, r0, r0
   2b018:	subcs	r3, r3, r1, lsl #4
   2b01c:	cmp	r3, r1, lsl #3
   2b020:	adc	r0, r0, r0
   2b024:	subcs	r3, r3, r1, lsl #3
   2b028:	cmp	r3, r1, lsl #2
   2b02c:	adc	r0, r0, r0
   2b030:	subcs	r3, r3, r1, lsl #2
   2b034:	cmp	r3, r1, lsl #1
   2b038:	adc	r0, r0, r0
   2b03c:	subcs	r3, r3, r1, lsl #1
   2b040:	cmp	r3, r1
   2b044:	adc	r0, r0, r0
   2b048:	subcs	r3, r3, r1
   2b04c:	cmp	ip, #0
   2b050:	rsbmi	r0, r0, #0
   2b054:	bx	lr
   2b058:	teq	ip, r0
   2b05c:	rsbmi	r0, r0, #0
   2b060:	bx	lr
   2b064:	movcc	r0, #0
   2b068:	asreq	r0, ip, #31
   2b06c:	orreq	r0, r0, #1
   2b070:	bx	lr
   2b074:	clz	r2, r1
   2b078:	rsb	r2, r2, #31
   2b07c:	cmp	ip, #0
   2b080:	lsr	r0, r3, r2
   2b084:	rsbmi	r0, r0, #0
   2b088:	bx	lr
   2b08c:	cmp	r0, #0
   2b090:	mvngt	r0, #-2147483648	; 0x80000000
   2b094:	movlt	r0, #-2147483648	; 0x80000000
   2b098:	b	2b0bc <__assert_fail@plt+0x19bc4>
   2b09c:	cmp	r1, #0
   2b0a0:	beq	2b08c <__assert_fail@plt+0x19b94>
   2b0a4:	push	{r0, r1, lr}
   2b0a8:	bl	2ae84 <__assert_fail@plt+0x1998c>
   2b0ac:	pop	{r1, r2, lr}
   2b0b0:	mul	r3, r2, r0
   2b0b4:	sub	r1, r1, r3
   2b0b8:	bx	lr
   2b0bc:	push	{r1, lr}
   2b0c0:	mov	r0, #8
   2b0c4:	bl	11198 <raise@plt>
   2b0c8:	pop	{r1, pc}
   2b0cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2b0d0:	mov	r7, r0
   2b0d4:	ldr	r6, [pc, #72]	; 2b124 <__assert_fail@plt+0x19c2c>
   2b0d8:	ldr	r5, [pc, #72]	; 2b128 <__assert_fail@plt+0x19c30>
   2b0dc:	add	r6, pc, r6
   2b0e0:	add	r5, pc, r5
   2b0e4:	sub	r6, r6, r5
   2b0e8:	mov	r8, r1
   2b0ec:	mov	r9, r2
   2b0f0:	bl	11148 <pthread_mutex_unlock@plt-0x20>
   2b0f4:	asrs	r6, r6, #2
   2b0f8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b0fc:	mov	r4, #0
   2b100:	add	r4, r4, #1
   2b104:	ldr	r3, [r5], #4
   2b108:	mov	r2, r9
   2b10c:	mov	r1, r8
   2b110:	mov	r0, r7
   2b114:	blx	r3
   2b118:	cmp	r6, r4
   2b11c:	bne	2b100 <__assert_fail@plt+0x19c08>
   2b120:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b124:	andeq	r1, r1, r4, lsr #28
   2b128:	andeq	r1, r1, ip, lsl lr
   2b12c:	bx	lr
   2b130:	ldr	r3, [pc, #12]	; 2b144 <__assert_fail@plt+0x19c4c>
   2b134:	mov	r1, #0
   2b138:	add	r3, pc, r3
   2b13c:	ldr	r2, [r3]
   2b140:	b	11408 <__cxa_atexit@plt>
   2b144:	andeq	r2, r1, r8

Disassembly of section .fini:

0002b148 <.fini>:
   2b148:	push	{r3, lr}
   2b14c:	pop	{r3, pc}
