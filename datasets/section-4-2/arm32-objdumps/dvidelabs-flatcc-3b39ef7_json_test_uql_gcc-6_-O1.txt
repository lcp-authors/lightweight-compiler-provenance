
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/json_test_uql:     file format elf32-littlearm


Disassembly of section .init:

000144fc <.init>:
   144fc:	push	{r3, lr}
   14500:	bl	14664 <_start@@Base+0x3c>
   14504:	pop	{r3, pc}

Disassembly of section .plt:

00014508 <raise@plt-0x14>:
   14508:	push	{lr}		; (str lr, [sp, #-4]!)
   1450c:	ldr	lr, [pc, #4]	; 14518 <raise@plt-0x4>
   14510:	add	lr, pc, lr
   14514:	ldr	pc, [lr, #8]!
   14518:	andeq	pc, r3, r8, ror #21

0001451c <raise@plt>:
   1451c:	add	ip, pc, #0, 12
   14520:	add	ip, ip, #258048	; 0x3f000
   14524:	ldr	pc, [ip, #2792]!	; 0xae8

00014528 <strcmp@plt>:
   14528:	add	ip, pc, #0, 12
   1452c:	add	ip, ip, #258048	; 0x3f000
   14530:	ldr	pc, [ip, #2784]!	; 0xae0

00014534 <memmove@plt>:
   14534:	add	ip, pc, #0, 12
   14538:	add	ip, ip, #258048	; 0x3f000
   1453c:	ldr	pc, [ip, #2776]!	; 0xad8

00014540 <free@plt>:
   14540:	add	ip, pc, #0, 12
   14544:	add	ip, ip, #258048	; 0x3f000
   14548:	ldr	pc, [ip, #2768]!	; 0xad0

0001454c <memcpy@plt>:
   1454c:	add	ip, pc, #0, 12
   14550:	add	ip, ip, #258048	; 0x3f000
   14554:	ldr	pc, [ip, #2760]!	; 0xac8

00014558 <memcmp@plt>:
   14558:	add	ip, pc, #0, 12
   1455c:	add	ip, ip, #258048	; 0x3f000
   14560:	ldr	pc, [ip, #2752]!	; 0xac0

00014564 <realloc@plt>:
   14564:	add	ip, pc, #0, 12
   14568:	add	ip, ip, #258048	; 0x3f000
   1456c:	ldr	pc, [ip, #2744]!	; 0xab8

00014570 <fwrite@plt>:
   14570:	add	ip, pc, #0, 12
   14574:	add	ip, ip, #258048	; 0x3f000
   14578:	ldr	pc, [ip, #2736]!	; 0xab0

0001457c <malloc@plt>:
   1457c:	add	ip, pc, #0, 12
   14580:	add	ip, ip, #258048	; 0x3f000
   14584:	ldr	pc, [ip, #2728]!	; 0xaa8

00014588 <__libc_start_main@plt>:
   14588:	add	ip, pc, #0, 12
   1458c:	add	ip, ip, #258048	; 0x3f000
   14590:	ldr	pc, [ip, #2720]!	; 0xaa0

00014594 <__gmon_start__@plt>:
   14594:	add	ip, pc, #0, 12
   14598:	add	ip, ip, #258048	; 0x3f000
   1459c:	ldr	pc, [ip, #2712]!	; 0xa98

000145a0 <strlen@plt>:
   145a0:	add	ip, pc, #0, 12
   145a4:	add	ip, ip, #258048	; 0x3f000
   145a8:	ldr	pc, [ip, #2704]!	; 0xa90

000145ac <fprintf@plt>:
   145ac:	add	ip, pc, #0, 12
   145b0:	add	ip, ip, #258048	; 0x3f000
   145b4:	ldr	pc, [ip, #2696]!	; 0xa88

000145b8 <posix_memalign@plt>:
   145b8:	add	ip, pc, #0, 12
   145bc:	add	ip, ip, #258048	; 0x3f000
   145c0:	ldr	pc, [ip, #2688]!	; 0xa80

000145c4 <memset@plt>:
   145c4:	add	ip, pc, #0, 12
   145c8:	add	ip, ip, #258048	; 0x3f000
   145cc:	ldr	pc, [ip, #2680]!	; 0xa78

000145d0 <strncpy@plt>:
   145d0:	add	ip, pc, #0, 12
   145d4:	add	ip, ip, #258048	; 0x3f000
   145d8:	ldr	pc, [ip, #2672]!	; 0xa70

000145dc <strtod@plt>:
   145dc:	add	ip, pc, #0, 12
   145e0:	add	ip, ip, #258048	; 0x3f000
   145e4:	ldr	pc, [ip, #2664]!	; 0xa68

000145e8 <memchr@plt>:
   145e8:	add	ip, pc, #0, 12
   145ec:	add	ip, ip, #258048	; 0x3f000
   145f0:	ldr	pc, [ip, #2656]!	; 0xa60

000145f4 <fputc@plt>:
   145f4:	add	ip, pc, #0, 12
   145f8:	add	ip, ip, #258048	; 0x3f000
   145fc:	ldr	pc, [ip, #2648]!	; 0xa58

00014600 <sprintf@plt>:
   14600:	add	ip, pc, #0, 12
   14604:	add	ip, ip, #258048	; 0x3f000
   14608:	ldr	pc, [ip, #2640]!	; 0xa50

0001460c <abort@plt>:
   1460c:	add	ip, pc, #0, 12
   14610:	add	ip, ip, #258048	; 0x3f000
   14614:	ldr	pc, [ip, #2632]!	; 0xa48

00014618 <__assert_fail@plt>:
   14618:	add	ip, pc, #0, 12
   1461c:	add	ip, ip, #258048	; 0x3f000
   14620:	ldr	pc, [ip, #2624]!	; 0xa40

Disassembly of section .text:

00014628 <_start@@Base>:
   14628:	mov	fp, #0
   1462c:	mov	lr, #0
   14630:	pop	{r1}		; (ldr r1, [sp], #4)
   14634:	mov	r2, sp
   14638:	push	{r2}		; (str r2, [sp, #-4]!)
   1463c:	push	{r0}		; (str r0, [sp, #-4]!)
   14640:	ldr	ip, [pc, #16]	; 14658 <_start@@Base+0x30>
   14644:	push	{ip}		; (str ip, [sp, #-4]!)
   14648:	ldr	r0, [pc, #12]	; 1465c <_start@@Base+0x34>
   1464c:	ldr	r3, [pc, #12]	; 14660 <_start@@Base+0x38>
   14650:	bl	14588 <__libc_start_main@plt>
   14654:	bl	1460c <abort@plt>
   14658:	andeq	sp, r3, ip, ror #16
   1465c:	andeq	r5, r2, r8, lsl #2
   14660:	andeq	sp, r3, ip, lsl #16
   14664:	ldr	r3, [pc, #20]	; 14680 <_start@@Base+0x58>
   14668:	ldr	r2, [pc, #20]	; 14684 <_start@@Base+0x5c>
   1466c:	add	r3, pc, r3
   14670:	ldr	r2, [r3, r2]
   14674:	cmp	r2, #0
   14678:	bxeq	lr
   1467c:	b	14594 <__gmon_start__@plt>
   14680:	andeq	pc, r3, ip, lsl #19
   14684:	andeq	r0, r0, r4, rrx
   14688:	ldr	r3, [pc, #28]	; 146ac <_start@@Base+0x84>
   1468c:	ldr	r0, [pc, #28]	; 146b0 <_start@@Base+0x88>
   14690:	sub	r3, r3, r0
   14694:	cmp	r3, #6
   14698:	bxls	lr
   1469c:	ldr	r3, [pc, #16]	; 146b4 <_start@@Base+0x8c>
   146a0:	cmp	r3, #0
   146a4:	bxeq	lr
   146a8:	bx	r3
   146ac:	andeq	r4, r5, pc, lsr r3
   146b0:	andeq	r4, r5, ip, lsr r3
   146b4:	andeq	r0, r0, r0
   146b8:	ldr	r1, [pc, #36]	; 146e4 <_start@@Base+0xbc>
   146bc:	ldr	r0, [pc, #36]	; 146e8 <_start@@Base+0xc0>
   146c0:	sub	r1, r1, r0
   146c4:	asr	r1, r1, #2
   146c8:	add	r1, r1, r1, lsr #31
   146cc:	asrs	r1, r1, #1
   146d0:	bxeq	lr
   146d4:	ldr	r3, [pc, #16]	; 146ec <_start@@Base+0xc4>
   146d8:	cmp	r3, #0
   146dc:	bxeq	lr
   146e0:	bx	r3
   146e4:	andeq	r4, r5, ip, lsr r3
   146e8:	andeq	r4, r5, ip, lsr r3
   146ec:	andeq	r0, r0, r0
   146f0:	push	{r4, lr}
   146f4:	ldr	r4, [pc, #24]	; 14714 <_start@@Base+0xec>
   146f8:	ldrb	r3, [r4]
   146fc:	cmp	r3, #0
   14700:	popne	{r4, pc}
   14704:	bl	14688 <_start@@Base+0x60>
   14708:	mov	r3, #1
   1470c:	strb	r3, [r4]
   14710:	pop	{r4, pc}
   14714:	andeq	r4, r5, r8, asr #6
   14718:	ldr	r0, [pc, #40]	; 14748 <_start@@Base+0x120>
   1471c:	ldr	r3, [r0]
   14720:	cmp	r3, #0
   14724:	bne	1472c <_start@@Base+0x104>
   14728:	b	146b8 <_start@@Base+0x90>
   1472c:	ldr	r3, [pc, #24]	; 1474c <_start@@Base+0x124>
   14730:	cmp	r3, #0
   14734:	beq	14728 <_start@@Base+0x100>
   14738:	push	{r4, lr}
   1473c:	blx	r3
   14740:	pop	{r4, lr}
   14744:	b	146b8 <_start@@Base+0x90>
   14748:	andeq	r3, r5, r4, lsl pc
   1474c:	andeq	r0, r0, r0
   14750:	push	{r4, r5, r6, r7}
   14754:	sub	r1, r1, r0
   14758:	cmp	r1, #8
   1475c:	movcs	r1, #8
   14760:	sub	r1, r1, #1
   14764:	cmp	r1, #7
   14768:	ldrls	pc, [pc, r1, lsl #2]
   1476c:	b	1487c <_start@@Base+0x254>
   14770:	andeq	r4, r1, r0, ror r8
   14774:	andeq	r4, r1, r4, ror #16
   14778:	andeq	r4, r1, r8, asr r8
   1477c:	andeq	r4, r1, ip, asr #16
   14780:	andeq	r4, r1, r0, asr #16
   14784:	andeq	r4, r1, r4, lsr r8
   14788:	muleq	r1, ip, r7
   1478c:	muleq	r1, r0, r7
   14790:	ldrb	r2, [r0, #7]
   14794:	mov	r3, #0
   14798:	b	147a4 <_start@@Base+0x17c>
   1479c:	mov	r2, #0
   147a0:	mov	r3, #0
   147a4:	ldrb	r6, [r0, #6]
   147a8:	mov	r5, #0
   147ac:	lsl	r4, r6, #8
   147b0:	orr	r4, r4, r2
   147b4:	orr	r5, r5, r3
   147b8:	ldrb	r6, [r0, #5]
   147bc:	mov	r3, #0
   147c0:	lsl	r2, r6, #16
   147c4:	orr	r4, r4, r2
   147c8:	orr	r5, r5, r3
   147cc:	ldrb	r6, [r0, #4]
   147d0:	mov	r3, #0
   147d4:	lsl	r2, r6, #24
   147d8:	orr	r4, r4, r2
   147dc:	orr	r5, r5, r3
   147e0:	mov	r2, #0
   147e4:	ldrb	r3, [r0, #3]
   147e8:	orr	r4, r4, r2
   147ec:	orr	r5, r5, r3
   147f0:	ldrb	r6, [r0, #2]
   147f4:	mov	r2, #0
   147f8:	lsl	r3, r6, #8
   147fc:	orr	r4, r4, r2
   14800:	orr	r5, r5, r3
   14804:	ldrb	r6, [r0, #1]
   14808:	mov	r2, #0
   1480c:	lsl	r3, r6, #16
   14810:	orr	r2, r2, r4
   14814:	orr	r3, r3, r5
   14818:	ldrb	r4, [r0]
   1481c:	mov	r0, #0
   14820:	lsl	r1, r4, #24
   14824:	orr	r0, r0, r2
   14828:	orr	r1, r1, r3
   1482c:	pop	{r4, r5, r6, r7}
   14830:	bx	lr
   14834:	mov	r4, #0
   14838:	mov	r5, #0
   1483c:	b	147b8 <_start@@Base+0x190>
   14840:	mov	r4, #0
   14844:	mov	r5, #0
   14848:	b	147cc <_start@@Base+0x1a4>
   1484c:	mov	r4, #0
   14850:	mov	r5, #0
   14854:	b	147e0 <_start@@Base+0x1b8>
   14858:	mov	r4, #0
   1485c:	mov	r5, #0
   14860:	b	147f0 <_start@@Base+0x1c8>
   14864:	mov	r4, #0
   14868:	mov	r5, #0
   1486c:	b	14804 <_start@@Base+0x1dc>
   14870:	mov	r2, #0
   14874:	mov	r3, #0
   14878:	b	14818 <_start@@Base+0x1f0>
   1487c:	mov	r0, #0
   14880:	mov	r1, #0
   14884:	b	1482c <_start@@Base+0x204>
   14888:	cmp	r0, #4
   1488c:	movhi	r0, #0
   14890:	movls	r0, #1
   14894:	bx	lr
   14898:	cmp	r0, #11
   1489c:	bhi	148c0 <_start@@Base+0x298>
   148a0:	cmp	r0, #8
   148a4:	bcs	148c8 <_start@@Base+0x2a0>
   148a8:	cmp	r0, #0
   148ac:	beq	148c8 <_start@@Base+0x2a0>
   148b0:	cmp	r0, #2
   148b4:	beq	148c8 <_start@@Base+0x2a0>
   148b8:	mov	r0, #0
   148bc:	bx	lr
   148c0:	cmp	r0, #255	; 0xff
   148c4:	bne	148b8 <_start@@Base+0x290>
   148c8:	mov	r0, #1
   148cc:	bx	lr
   148d0:	bx	lr
   148d4:	bx	lr
   148d8:	mov	r0, #0
   148dc:	bx	lr
   148e0:	mov	r0, #0
   148e4:	bx	lr
   148e8:	push	{r4, lr}
   148ec:	mov	r3, #4
   148f0:	mov	r2, r3
   148f4:	mov	r1, #0
   148f8:	bl	2a7d4 <flatcc_verify_field@@Base>
   148fc:	pop	{r4, pc}
   14900:	push	{r4, lr}
   14904:	mov	r4, r0
   14908:	mov	r3, #8
   1490c:	mov	r2, r3
   14910:	mov	r1, #0
   14914:	bl	2a7d4 <flatcc_verify_field@@Base>
   14918:	cmp	r0, #0
   1491c:	popne	{r4, pc}
   14920:	mov	r3, #4
   14924:	mov	r2, r3
   14928:	mov	r1, #1
   1492c:	mov	r0, r4
   14930:	bl	2a7d4 <flatcc_verify_field@@Base>
   14934:	pop	{r4, pc}
   14938:	push	{r4, lr}
   1493c:	mov	r4, r0
   14940:	mov	r3, #8
   14944:	mov	r2, r3
   14948:	mov	r1, #0
   1494c:	bl	2a7d4 <flatcc_verify_field@@Base>
   14950:	cmp	r0, #0
   14954:	popne	{r4, pc}
   14958:	mov	r3, #4
   1495c:	mov	r2, r3
   14960:	mov	r1, #1
   14964:	mov	r0, r4
   14968:	bl	2a7d4 <flatcc_verify_field@@Base>
   1496c:	pop	{r4, pc}
   14970:	push	{r4, lr}
   14974:	mov	r4, r0
   14978:	mov	r3, #1
   1497c:	mov	r2, r3
   14980:	mov	r1, #0
   14984:	bl	2a7d4 <flatcc_verify_field@@Base>
   14988:	cmp	r0, #0
   1498c:	popne	{r4, pc}
   14990:	mov	r3, #1
   14994:	mov	r2, r3
   14998:	mov	r1, r3
   1499c:	mov	r0, r4
   149a0:	bl	2a7d4 <flatcc_verify_field@@Base>
   149a4:	cmp	r0, #0
   149a8:	popne	{r4, pc}
   149ac:	mov	r3, #1
   149b0:	mov	r2, r3
   149b4:	mov	r1, #2
   149b8:	mov	r0, r4
   149bc:	bl	2a7d4 <flatcc_verify_field@@Base>
   149c0:	cmp	r0, #0
   149c4:	popne	{r4, pc}
   149c8:	mov	r3, #1
   149cc:	mov	r2, r3
   149d0:	mov	r1, #3
   149d4:	mov	r0, r4
   149d8:	bl	2a7d4 <flatcc_verify_field@@Base>
   149dc:	pop	{r4, pc}
   149e0:	push	{r4, lr}
   149e4:	mov	r4, r0
   149e8:	mov	r2, #0
   149ec:	mov	r1, r2
   149f0:	bl	2a84c <flatcc_verify_string_field@@Base>
   149f4:	cmp	r0, #0
   149f8:	popne	{r4, pc}
   149fc:	mov	r3, #8
   14a00:	mov	r2, r3
   14a04:	mov	r1, #1
   14a08:	mov	r0, r4
   14a0c:	bl	2a7d4 <flatcc_verify_field@@Base>
   14a10:	cmp	r0, #0
   14a14:	popne	{r4, pc}
   14a18:	mov	r3, #2
   14a1c:	mov	r2, r3
   14a20:	mov	r1, r3
   14a24:	mov	r0, r4
   14a28:	bl	2a7d4 <flatcc_verify_field@@Base>
   14a2c:	pop	{r4, pc}
   14a30:	push	{r4, lr}
   14a34:	mov	r4, r0
   14a38:	mov	r2, #0
   14a3c:	mov	r1, r2
   14a40:	bl	2a84c <flatcc_verify_string_field@@Base>
   14a44:	cmp	r0, #0
   14a48:	popne	{r4, pc}
   14a4c:	mov	r3, #4
   14a50:	mov	r2, r3
   14a54:	mov	r1, #1
   14a58:	mov	r0, r4
   14a5c:	bl	2a7d4 <flatcc_verify_field@@Base>
   14a60:	cmp	r0, #0
   14a64:	popne	{r4, pc}
   14a68:	mov	r2, #0
   14a6c:	mov	r1, #2
   14a70:	mov	r0, r4
   14a74:	bl	2a84c <flatcc_verify_string_field@@Base>
   14a78:	cmp	r0, #0
   14a7c:	popne	{r4, pc}
   14a80:	mov	r3, #8
   14a84:	mov	r2, r3
   14a88:	mov	r1, #3
   14a8c:	mov	r0, r4
   14a90:	bl	2a7d4 <flatcc_verify_field@@Base>
   14a94:	cmp	r0, #0
   14a98:	popne	{r4, pc}
   14a9c:	mov	r2, #0
   14aa0:	mov	r1, #4
   14aa4:	mov	r0, r4
   14aa8:	bl	2a84c <flatcc_verify_string_field@@Base>
   14aac:	cmp	r0, #0
   14ab0:	popne	{r4, pc}
   14ab4:	mov	r3, #8
   14ab8:	mov	r2, r3
   14abc:	mov	r1, #5
   14ac0:	mov	r0, r4
   14ac4:	bl	2a7d4 <flatcc_verify_field@@Base>
   14ac8:	cmp	r0, #0
   14acc:	popne	{r4, pc}
   14ad0:	mov	r3, #4
   14ad4:	mov	r2, r3
   14ad8:	mov	r1, #6
   14adc:	mov	r0, r4
   14ae0:	bl	2a7d4 <flatcc_verify_field@@Base>
   14ae4:	cmp	r0, #0
   14ae8:	popne	{r4, pc}
   14aec:	mov	r3, #8
   14af0:	mov	r2, r3
   14af4:	mov	r1, #7
   14af8:	mov	r0, r4
   14afc:	bl	2a7d4 <flatcc_verify_field@@Base>
   14b00:	cmp	r0, #0
   14b04:	popne	{r4, pc}
   14b08:	mov	r3, #4
   14b0c:	mov	r2, r3
   14b10:	mov	r1, #8
   14b14:	mov	r0, r4
   14b18:	bl	2a7d4 <flatcc_verify_field@@Base>
   14b1c:	pop	{r4, pc}
   14b20:	push	{r4, lr}
   14b24:	mov	r4, r0
   14b28:	ldr	r3, [pc, #68]	; 14b74 <_start@@Base+0x54c>
   14b2c:	mov	r2, #0
   14b30:	mov	r1, r2
   14b34:	bl	2aad8 <flatcc_verify_table_field@@Base>
   14b38:	cmp	r0, #0
   14b3c:	popne	{r4, pc}
   14b40:	ldr	r3, [pc, #48]	; 14b78 <_start@@Base+0x550>
   14b44:	mov	r2, #0
   14b48:	mov	r1, #1
   14b4c:	mov	r0, r4
   14b50:	bl	2aad8 <flatcc_verify_table_field@@Base>
   14b54:	cmp	r0, #0
   14b58:	popne	{r4, pc}
   14b5c:	ldr	r3, [pc, #24]	; 14b7c <_start@@Base+0x554>
   14b60:	mov	r2, #0
   14b64:	mov	r1, #2
   14b68:	mov	r0, r4
   14b6c:	bl	2aad8 <flatcc_verify_table_field@@Base>
   14b70:	pop	{r4, pc}
   14b74:	andeq	r4, r1, r0, lsr sl
   14b78:	andeq	r4, r1, r8, lsr r9
   14b7c:	andeq	r4, r1, r0, lsl #18
   14b80:	push	{r4, lr}
   14b84:	sub	sp, sp, #8
   14b88:	mov	r4, r0
   14b8c:	mov	r3, #16
   14b90:	mov	r2, #32
   14b94:	mov	r1, #0
   14b98:	bl	2a7d4 <flatcc_verify_field@@Base>
   14b9c:	cmp	r0, #0
   14ba0:	beq	14bac <_start@@Base+0x584>
   14ba4:	add	sp, sp, #8
   14ba8:	pop	{r4, pc}
   14bac:	mov	r3, #2
   14bb0:	mov	r2, r3
   14bb4:	mov	r1, r3
   14bb8:	mov	r0, r4
   14bbc:	bl	2a7d4 <flatcc_verify_field@@Base>
   14bc0:	cmp	r0, #0
   14bc4:	bne	14ba4 <_start@@Base+0x57c>
   14bc8:	mov	r3, #2
   14bcc:	mov	r2, r3
   14bd0:	mov	r1, #1
   14bd4:	mov	r0, r4
   14bd8:	bl	2a7d4 <flatcc_verify_field@@Base>
   14bdc:	cmp	r0, #0
   14be0:	bne	14ba4 <_start@@Base+0x57c>
   14be4:	mov	r2, #1
   14be8:	mov	r1, #3
   14bec:	mov	r0, r4
   14bf0:	bl	2a84c <flatcc_verify_string_field@@Base>
   14bf4:	cmp	r0, #0
   14bf8:	bne	14ba4 <_start@@Base+0x57c>
   14bfc:	mov	r3, #1
   14c00:	mov	r2, r3
   14c04:	mov	r1, #6
   14c08:	mov	r0, r4
   14c0c:	bl	2a7d4 <flatcc_verify_field@@Base>
   14c10:	cmp	r0, #0
   14c14:	bne	14ba4 <_start@@Base+0x57c>
   14c18:	mvn	r3, #0
   14c1c:	str	r3, [sp, #4]
   14c20:	mov	r3, #1
   14c24:	str	r3, [sp]
   14c28:	mov	r2, #0
   14c2c:	mov	r1, #5
   14c30:	mov	r0, r4
   14c34:	bl	2a8e0 <flatcc_verify_vector_field@@Base>
   14c38:	cmp	r0, #0
   14c3c:	bne	14ba4 <_start@@Base+0x57c>
   14c40:	ldr	r3, [pc, #876]	; 14fb4 <_start@@Base+0x98c>
   14c44:	mov	r2, #0
   14c48:	mov	r1, #11
   14c4c:	mov	r0, r4
   14c50:	bl	2abf0 <flatcc_verify_table_vector_field@@Base>
   14c54:	cmp	r0, #0
   14c58:	bne	14ba4 <_start@@Base+0x57c>
   14c5c:	mov	r2, #0
   14c60:	mov	r1, #10
   14c64:	mov	r0, r4
   14c68:	bl	2a990 <flatcc_verify_string_vector_field@@Base>
   14c6c:	cmp	r0, #0
   14c70:	bne	14ba4 <_start@@Base+0x57c>
   14c74:	mov	r2, #0
   14c78:	mov	r1, #28
   14c7c:	mov	r0, r4
   14c80:	bl	2a990 <flatcc_verify_string_vector_field@@Base>
   14c84:	cmp	r0, #0
   14c88:	bne	14ba4 <_start@@Base+0x57c>
   14c8c:	mvn	r3, #0
   14c90:	str	r3, [sp, #4]
   14c94:	mov	r3, #1
   14c98:	str	r3, [sp]
   14c9c:	mov	r2, #0
   14ca0:	mov	r1, #24
   14ca4:	mov	r0, r4
   14ca8:	bl	2a8e0 <flatcc_verify_vector_field@@Base>
   14cac:	cmp	r0, #0
   14cb0:	bne	14ba4 <_start@@Base+0x57c>
   14cb4:	mvn	r3, #-536870912	; 0xe0000000
   14cb8:	str	r3, [sp, #4]
   14cbc:	mov	r3, #4
   14cc0:	str	r3, [sp]
   14cc4:	mov	r3, #8
   14cc8:	mov	r2, #0
   14ccc:	mov	r1, #29
   14cd0:	mov	r0, r4
   14cd4:	bl	2a8e0 <flatcc_verify_vector_field@@Base>
   14cd8:	cmp	r0, #0
   14cdc:	bne	14ba4 <_start@@Base+0x57c>
   14ce0:	ldr	r3, [pc, #716]	; 14fb4 <_start@@Base+0x98c>
   14ce4:	mov	r2, #0
   14ce8:	mov	r1, #12
   14cec:	mov	r0, r4
   14cf0:	bl	2aad8 <flatcc_verify_table_field@@Base>
   14cf4:	cmp	r0, #0
   14cf8:	bne	14ba4 <_start@@Base+0x57c>
   14cfc:	ldr	r3, [pc, #692]	; 14fb8 <_start@@Base+0x990>
   14d00:	mov	r2, #0
   14d04:	mov	r1, #8
   14d08:	mov	r0, r4
   14d0c:	bl	2b6c8 <flatcc_verify_union_field@@Base>
   14d10:	cmp	r0, #0
   14d14:	bne	14ba4 <_start@@Base+0x57c>
   14d18:	mvn	r3, #-1073741824	; 0xc0000000
   14d1c:	str	r3, [sp, #4]
   14d20:	mov	r3, #2
   14d24:	str	r3, [sp]
   14d28:	mov	r3, #4
   14d2c:	mov	r2, #0
   14d30:	mov	r1, #9
   14d34:	mov	r0, r4
   14d38:	bl	2a8e0 <flatcc_verify_vector_field@@Base>
   14d3c:	cmp	r0, #0
   14d40:	bne	14ba4 <_start@@Base+0x57c>
   14d44:	mvn	r3, #-1073741824	; 0xc0000000
   14d48:	str	r3, [sp, #4]
   14d4c:	mov	r3, #2
   14d50:	str	r3, [sp]
   14d54:	mov	r3, #4
   14d58:	mov	r2, #0
   14d5c:	mov	r1, #31
   14d60:	mov	r0, r4
   14d64:	bl	2a8e0 <flatcc_verify_vector_field@@Base>
   14d68:	cmp	r0, #0
   14d6c:	bne	14ba4 <_start@@Base+0x57c>
   14d70:	ldr	r3, [pc, #572]	; 14fb4 <_start@@Base+0x98c>
   14d74:	str	r3, [sp, #4]
   14d78:	mov	r3, #1
   14d7c:	str	r3, [sp]
   14d80:	mov	r3, #0
   14d84:	mov	r2, r3
   14d88:	mov	r1, #13
   14d8c:	mov	r0, r4
   14d90:	bl	2b508 <flatcc_verify_table_as_nested_root@@Base>
   14d94:	cmp	r0, #0
   14d98:	bne	14ba4 <_start@@Base+0x57c>
   14d9c:	ldr	r3, [pc, #536]	; 14fbc <_start@@Base+0x994>
   14da0:	mov	r2, #0
   14da4:	mov	r1, #14
   14da8:	mov	r0, r4
   14dac:	bl	2aad8 <flatcc_verify_table_field@@Base>
   14db0:	cmp	r0, #0
   14db4:	bne	14ba4 <_start@@Base+0x57c>
   14db8:	mov	r3, #1
   14dbc:	mov	r2, r3
   14dc0:	mov	r1, #15
   14dc4:	mov	r0, r4
   14dc8:	bl	2a7d4 <flatcc_verify_field@@Base>
   14dcc:	cmp	r0, #0
   14dd0:	bne	14ba4 <_start@@Base+0x57c>
   14dd4:	mov	r3, #4
   14dd8:	mov	r2, r3
   14ddc:	mov	r1, #16
   14de0:	mov	r0, r4
   14de4:	bl	2a7d4 <flatcc_verify_field@@Base>
   14de8:	cmp	r0, #0
   14dec:	bne	14ba4 <_start@@Base+0x57c>
   14df0:	mov	r3, #4
   14df4:	mov	r2, r3
   14df8:	mov	r1, #17
   14dfc:	mov	r0, r4
   14e00:	bl	2a7d4 <flatcc_verify_field@@Base>
   14e04:	cmp	r0, #0
   14e08:	bne	14ba4 <_start@@Base+0x57c>
   14e0c:	mov	r3, #8
   14e10:	mov	r2, r3
   14e14:	mov	r1, #18
   14e18:	mov	r0, r4
   14e1c:	bl	2a7d4 <flatcc_verify_field@@Base>
   14e20:	cmp	r0, #0
   14e24:	bne	14ba4 <_start@@Base+0x57c>
   14e28:	mov	r3, #8
   14e2c:	mov	r2, r3
   14e30:	mov	r1, #19
   14e34:	mov	r0, r4
   14e38:	bl	2a7d4 <flatcc_verify_field@@Base>
   14e3c:	cmp	r0, #0
   14e40:	bne	14ba4 <_start@@Base+0x57c>
   14e44:	mov	r3, #4
   14e48:	mov	r2, r3
   14e4c:	mov	r1, #20
   14e50:	mov	r0, r4
   14e54:	bl	2a7d4 <flatcc_verify_field@@Base>
   14e58:	cmp	r0, #0
   14e5c:	bne	14ba4 <_start@@Base+0x57c>
   14e60:	mov	r3, #4
   14e64:	mov	r2, r3
   14e68:	mov	r1, #21
   14e6c:	mov	r0, r4
   14e70:	bl	2a7d4 <flatcc_verify_field@@Base>
   14e74:	cmp	r0, #0
   14e78:	bne	14ba4 <_start@@Base+0x57c>
   14e7c:	mov	r3, #8
   14e80:	mov	r2, r3
   14e84:	mov	r1, #22
   14e88:	mov	r0, r4
   14e8c:	bl	2a7d4 <flatcc_verify_field@@Base>
   14e90:	cmp	r0, #0
   14e94:	bne	14ba4 <_start@@Base+0x57c>
   14e98:	mov	r3, #8
   14e9c:	mov	r2, r3
   14ea0:	mov	r1, #23
   14ea4:	mov	r0, r4
   14ea8:	bl	2a7d4 <flatcc_verify_field@@Base>
   14eac:	cmp	r0, #0
   14eb0:	bne	14ba4 <_start@@Base+0x57c>
   14eb4:	mov	r3, #4
   14eb8:	mov	r2, r3
   14ebc:	mov	r1, #25
   14ec0:	mov	r0, r4
   14ec4:	bl	2a7d4 <flatcc_verify_field@@Base>
   14ec8:	cmp	r0, #0
   14ecc:	bne	14ba4 <_start@@Base+0x57c>
   14ed0:	mov	r3, #4
   14ed4:	mov	r2, r3
   14ed8:	mov	r1, #26
   14edc:	mov	r0, r4
   14ee0:	bl	2a7d4 <flatcc_verify_field@@Base>
   14ee4:	cmp	r0, #0
   14ee8:	bne	14ba4 <_start@@Base+0x57c>
   14eec:	mov	r3, #4
   14ef0:	mov	r2, r3
   14ef4:	mov	r1, #27
   14ef8:	mov	r0, r4
   14efc:	bl	2a7d4 <flatcc_verify_field@@Base>
   14f00:	cmp	r0, #0
   14f04:	bne	14ba4 <_start@@Base+0x57c>
   14f08:	mvn	r3, #0
   14f0c:	str	r3, [sp, #4]
   14f10:	mov	r3, #1
   14f14:	str	r3, [sp]
   14f18:	mov	r2, #0
   14f1c:	mov	r1, #30
   14f20:	mov	r0, r4
   14f24:	bl	2a8e0 <flatcc_verify_vector_field@@Base>
   14f28:	cmp	r0, #0
   14f2c:	bne	14ba4 <_start@@Base+0x57c>
   14f30:	mvn	r3, #-536870912	; 0xe0000000
   14f34:	str	r3, [sp, #4]
   14f38:	mov	r3, #8
   14f3c:	str	r3, [sp]
   14f40:	mov	r2, #0
   14f44:	mov	r1, #32
   14f48:	mov	r0, r4
   14f4c:	bl	2a8e0 <flatcc_verify_vector_field@@Base>
   14f50:	cmp	r0, #0
   14f54:	bne	14ba4 <_start@@Base+0x57c>
   14f58:	mvn	r3, #-536870912	; 0xe0000000
   14f5c:	str	r3, [sp, #4]
   14f60:	mov	r3, #8
   14f64:	str	r3, [sp]
   14f68:	mov	r2, #0
   14f6c:	mov	r1, #33	; 0x21
   14f70:	mov	r0, r4
   14f74:	bl	2a8e0 <flatcc_verify_vector_field@@Base>
   14f78:	cmp	r0, #0
   14f7c:	bne	14ba4 <_start@@Base+0x57c>
   14f80:	ldr	r3, [pc, #56]	; 14fc0 <_start@@Base+0x998>
   14f84:	mov	r2, #0
   14f88:	mov	r1, #34	; 0x22
   14f8c:	mov	r0, r4
   14f90:	bl	2aad8 <flatcc_verify_table_field@@Base>
   14f94:	cmp	r0, #0
   14f98:	bne	14ba4 <_start@@Base+0x57c>
   14f9c:	ldr	r3, [pc, #32]	; 14fc4 <_start@@Base+0x99c>
   14fa0:	mov	r2, #0
   14fa4:	mov	r1, #35	; 0x23
   14fa8:	mov	r0, r4
   14fac:	bl	2aad8 <flatcc_verify_table_field@@Base>
   14fb0:	b	14ba4 <_start@@Base+0x57c>
   14fb4:	andeq	r4, r1, r0, lsl #23
   14fb8:	andeq	r5, r1, r4, asr r0
   14fbc:	andeq	r4, r1, r0, ror #19
   14fc0:	ldrdeq	r4, [r1], -r8
   14fc4:	andeq	r4, r1, r8, asr #31
   14fc8:	push	{r4, lr}
   14fcc:	sub	sp, sp, #8
   14fd0:	mov	r4, r0
   14fd4:	mvn	r3, #0
   14fd8:	str	r3, [sp, #4]
   14fdc:	mov	r3, #1
   14fe0:	str	r3, [sp]
   14fe4:	mov	r2, #0
   14fe8:	mov	r1, r2
   14fec:	bl	2a8e0 <flatcc_verify_vector_field@@Base>
   14ff0:	cmp	r0, #0
   14ff4:	beq	15000 <_start@@Base+0x9d8>
   14ff8:	add	sp, sp, #8
   14ffc:	pop	{r4, pc}
   15000:	mvn	r3, #0
   15004:	str	r3, [sp, #4]
   15008:	mov	r1, #1
   1500c:	str	r1, [sp]
   15010:	mov	r3, r1
   15014:	mov	r2, #0
   15018:	mov	r0, r4
   1501c:	bl	2a8e0 <flatcc_verify_vector_field@@Base>
   15020:	cmp	r0, #0
   15024:	bne	14ff8 <_start@@Base+0x9d0>
   15028:	ldr	r3, [pc, #32]	; 15050 <_start@@Base+0xa28>
   1502c:	str	r3, [sp, #4]
   15030:	mov	r3, #1
   15034:	str	r3, [sp]
   15038:	mov	r3, #0
   1503c:	mov	r2, r3
   15040:	mov	r1, #2
   15044:	mov	r0, r4
   15048:	bl	2b508 <flatcc_verify_table_as_nested_root@@Base>
   1504c:	b	14ff8 <_start@@Base+0x9d0>
   15050:	andeq	r4, r1, r0, lsl #23
   15054:	push	{r4, lr}
   15058:	ldrb	r3, [r0, #12]
   1505c:	sub	r3, r3, #1
   15060:	cmp	r3, #3
   15064:	ldrls	pc, [pc, r3, lsl #2]
   15068:	b	150ac <_start@@Base+0xa84>
   1506c:	andeq	r5, r1, ip, ror r0
   15070:	andeq	r5, r1, r8, lsl #1
   15074:	muleq	r1, r4, r0
   15078:	andeq	r5, r1, r0, lsr #1
   1507c:	ldr	r1, [pc, #48]	; 150b4 <_start@@Base+0xa8c>
   15080:	bl	2ae80 <flatcc_verify_union_table@@Base>
   15084:	pop	{r4, pc}
   15088:	ldr	r1, [pc, #40]	; 150b8 <_start@@Base+0xa90>
   1508c:	bl	2ae80 <flatcc_verify_union_table@@Base>
   15090:	pop	{r4, pc}
   15094:	ldr	r1, [pc, #32]	; 150bc <_start@@Base+0xa94>
   15098:	bl	2ae80 <flatcc_verify_union_table@@Base>
   1509c:	pop	{r4, pc}
   150a0:	ldr	r1, [pc, #24]	; 150c0 <_start@@Base+0xa98>
   150a4:	bl	2ae80 <flatcc_verify_union_table@@Base>
   150a8:	pop	{r4, pc}
   150ac:	mov	r0, #0
   150b0:	pop	{r4, pc}
   150b4:	andeq	r4, r1, r0, lsl #23
   150b8:	andeq	r4, r1, r0, ror r9
   150bc:	andeq	r4, r1, r0, ror #17
   150c0:	andeq	r5, r1, r4, asr #1
   150c4:	push	{r4, lr}
   150c8:	mov	r4, r0
   150cc:	ldr	r3, [pc, #68]	; 15118 <_start@@Base+0xaf0>
   150d0:	mov	r2, #0
   150d4:	mov	r1, r2
   150d8:	bl	2aad8 <flatcc_verify_table_field@@Base>
   150dc:	cmp	r0, #0
   150e0:	popne	{r4, pc}
   150e4:	ldr	r3, [pc, #48]	; 1511c <_start@@Base+0xaf4>
   150e8:	mov	r2, #0
   150ec:	mov	r1, #1
   150f0:	mov	r0, r4
   150f4:	bl	2aad8 <flatcc_verify_table_field@@Base>
   150f8:	cmp	r0, #0
   150fc:	popne	{r4, pc}
   15100:	ldr	r3, [pc, #24]	; 15120 <_start@@Base+0xaf8>
   15104:	mov	r2, #0
   15108:	mov	r1, #3
   1510c:	mov	r0, r4
   15110:	bl	2b818 <flatcc_verify_union_vector_field@@Base>
   15114:	pop	{r4, pc}
   15118:	andeq	r4, r1, r0, lsr #22
   1511c:	andeq	r5, r1, r4, lsr #2
   15120:	andeq	r5, r1, r4, asr r0
   15124:	push	{r4, lr}
   15128:	mov	r4, r0
   1512c:	ldr	r3, [pc, #124]	; 151b0 <_start@@Base+0xb88>
   15130:	mov	r2, #0
   15134:	mov	r1, #1
   15138:	bl	2b6c8 <flatcc_verify_union_field@@Base>
   1513c:	cmp	r0, #0
   15140:	popne	{r4, pc}
   15144:	ldr	r3, [pc, #100]	; 151b0 <_start@@Base+0xb88>
   15148:	mov	r2, #0
   1514c:	mov	r1, #3
   15150:	mov	r0, r4
   15154:	bl	2b6c8 <flatcc_verify_union_field@@Base>
   15158:	cmp	r0, #0
   1515c:	popne	{r4, pc}
   15160:	ldr	r3, [pc, #72]	; 151b0 <_start@@Base+0xb88>
   15164:	mov	r2, #0
   15168:	mov	r1, #5
   1516c:	mov	r0, r4
   15170:	bl	2b6c8 <flatcc_verify_union_field@@Base>
   15174:	cmp	r0, #0
   15178:	popne	{r4, pc}
   1517c:	ldr	r3, [pc, #44]	; 151b0 <_start@@Base+0xb88>
   15180:	mov	r2, #0
   15184:	mov	r1, #7
   15188:	mov	r0, r4
   1518c:	bl	2b6c8 <flatcc_verify_union_field@@Base>
   15190:	cmp	r0, #0
   15194:	popne	{r4, pc}
   15198:	ldr	r3, [pc, #16]	; 151b0 <_start@@Base+0xb88>
   1519c:	mov	r2, #0
   151a0:	mov	r1, #9
   151a4:	mov	r0, r4
   151a8:	bl	2b818 <flatcc_verify_union_vector_field@@Base>
   151ac:	pop	{r4, pc}
   151b0:			; <UNDEFINED> instruction: 0x000151b4
   151b4:	push	{r4, lr}
   151b8:	ldrb	r3, [r0, #12]
   151bc:	cmp	r3, #9
   151c0:	beq	15210 <_start@@Base+0xbe8>
   151c4:	bls	151e4 <_start@@Base+0xbbc>
   151c8:	cmp	r3, #11
   151cc:	beq	15230 <_start@@Base+0xc08>
   151d0:	bcc	15220 <_start@@Base+0xbf8>
   151d4:	cmp	r3, #255	; 0xff
   151d8:	bne	15238 <_start@@Base+0xc10>
   151dc:	bl	2afe4 <flatcc_verify_union_string@@Base>
   151e0:	pop	{r4, pc}
   151e4:	cmp	r3, #2
   151e8:	beq	15204 <_start@@Base+0xbdc>
   151ec:	cmp	r3, #8
   151f0:	bne	15238 <_start@@Base+0xc10>
   151f4:	mov	r2, #2
   151f8:	mov	r1, r2
   151fc:	bl	2af78 <flatcc_verify_union_struct@@Base>
   15200:	pop	{r4, pc}
   15204:	ldr	r1, [pc, #52]	; 15240 <_start@@Base+0xc18>
   15208:	bl	2ae80 <flatcc_verify_union_table@@Base>
   1520c:	pop	{r4, pc}
   15210:	mov	r2, #4
   15214:	mov	r1, r2
   15218:	bl	2af78 <flatcc_verify_union_struct@@Base>
   1521c:	pop	{r4, pc}
   15220:	mov	r2, #4
   15224:	mov	r1, r2
   15228:	bl	2af78 <flatcc_verify_union_struct@@Base>
   1522c:	pop	{r4, pc}
   15230:	bl	2afe4 <flatcc_verify_union_string@@Base>
   15234:	pop	{r4, pc}
   15238:	mov	r0, #0
   1523c:	pop	{r4, pc}
   15240:	andeq	r4, r1, r8, ror #17
   15244:	push	{r4, r5, r6, lr}
   15248:	sub	sp, sp, #8
   1524c:	mov	r4, r0
   15250:	mov	r5, r1
   15254:	ldr	r3, [pc, #96]	; 152bc <_start@@Base+0xc94>
   15258:	str	r3, [sp, #4]
   1525c:	mov	r3, #21
   15260:	str	r3, [sp]
   15264:	ldr	r3, [pc, #84]	; 152c0 <_start@@Base+0xc98>
   15268:	mov	r2, #0
   1526c:	bl	3bb10 <flatcc_json_printer_table_field@@Base>
   15270:	ldr	r3, [pc, #76]	; 152c4 <_start@@Base+0xc9c>
   15274:	str	r3, [sp, #4]
   15278:	mov	r6, #22
   1527c:	str	r6, [sp]
   15280:	ldr	r3, [pc, #64]	; 152c8 <_start@@Base+0xca0>
   15284:	mov	r2, #1
   15288:	mov	r1, r5
   1528c:	mov	r0, r4
   15290:	bl	3bb10 <flatcc_json_printer_table_field@@Base>
   15294:	ldr	r3, [pc, #48]	; 152cc <_start@@Base+0xca4>
   15298:	str	r3, [sp, #4]
   1529c:	str	r6, [sp]
   152a0:	ldr	r3, [pc, #40]	; 152d0 <_start@@Base+0xca8>
   152a4:	mov	r2, #2
   152a8:	mov	r1, r5
   152ac:	mov	r0, r4
   152b0:	bl	3bb10 <flatcc_json_printer_table_field@@Base>
   152b4:	add	sp, sp, #8
   152b8:	pop	{r4, r5, r6, pc}
   152bc:	andeq	r5, r1, r0, asr #7
   152c0:	andeq	sp, r3, ip, lsr #17
   152c4:	andeq	r5, r1, r0, ror #6
   152c8:	andeq	sp, r3, r4, asr #17
   152cc:	andeq	r5, r1, r0, lsl #6
   152d0:	ldrdeq	sp, [r3], -ip
   152d4:	push	{lr}		; (str lr, [sp, #-4]!)
   152d8:	sub	sp, sp, #12
   152dc:	mov	r2, #0
   152e0:	str	r2, [sp, #4]
   152e4:	mov	r3, #19
   152e8:	str	r3, [sp]
   152ec:	ldr	r3, [pc, #8]	; 152fc <_start@@Base+0xcd4>
   152f0:	bl	339e0 <flatcc_json_printer_int32_field@@Base>
   152f4:	add	sp, sp, #12
   152f8:	pop	{pc}		; (ldr pc, [sp], #4)
   152fc:	strdeq	sp, [r3], -r4
   15300:	push	{r4, r5, lr}
   15304:	sub	sp, sp, #20
   15308:	mov	r4, r0
   1530c:	mov	r5, r1
   15310:	mov	r2, #0
   15314:	mov	r3, #0
   15318:	strd	r2, [sp, #8]
   1531c:	mov	r3, #15
   15320:	str	r3, [sp]
   15324:	ldr	r3, [pc, #44]	; 15358 <_start@@Base+0xd30>
   15328:	bl	33bc8 <flatcc_json_printer_int64_field@@Base>
   1532c:	mov	r3, #0
   15330:	str	r3, [sp, #4]
   15334:	mov	r3, #21
   15338:	str	r3, [sp]
   1533c:	ldr	r3, [pc, #24]	; 1535c <_start@@Base+0xd34>
   15340:	mov	r2, #1
   15344:	mov	r1, r5
   15348:	mov	r0, r4
   1534c:	bl	33238 <flatcc_json_printer_uint32_field@@Base>
   15350:	add	sp, sp, #20
   15354:	pop	{r4, r5, pc}
   15358:	andeq	sp, r3, r8, lsl #18
   1535c:	andeq	sp, r3, r8, lsl r9
   15360:	push	{r4, r5, lr}
   15364:	sub	sp, sp, #20
   15368:	mov	r4, r0
   1536c:	mov	r5, r1
   15370:	mov	r2, #0
   15374:	mov	r3, #0
   15378:	strd	r2, [sp, #8]
   1537c:	mov	r3, #15
   15380:	str	r3, [sp]
   15384:	ldr	r3, [pc, #44]	; 153b8 <_start@@Base+0xd90>
   15388:	bl	33bc8 <flatcc_json_printer_int64_field@@Base>
   1538c:	mov	r3, #0
   15390:	str	r3, [sp, #4]
   15394:	mov	r3, #16
   15398:	str	r3, [sp]
   1539c:	ldr	r3, [pc, #24]	; 153bc <_start@@Base+0xd94>
   153a0:	mov	r2, #1
   153a4:	mov	r1, r5
   153a8:	mov	r0, r4
   153ac:	bl	33238 <flatcc_json_printer_uint32_field@@Base>
   153b0:	add	sp, sp, #20
   153b4:	pop	{r4, r5, pc}
   153b8:	andeq	sp, r3, r8, lsl #18
   153bc:	andeq	sp, r3, r0, lsr r9
   153c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153c4:	sub	sp, sp, #20
   153c8:	mov	r4, r0
   153cc:	mov	r5, r1
   153d0:	mov	r7, #4
   153d4:	str	r7, [sp]
   153d8:	ldr	r3, [pc, #248]	; 154d8 <_start@@Base+0xeb0>
   153dc:	mov	r2, #0
   153e0:	bl	329a0 <flatcc_json_printer_string_field@@Base>
   153e4:	mov	fp, #0
   153e8:	str	fp, [sp, #4]
   153ec:	mov	sl, #9
   153f0:	str	sl, [sp]
   153f4:	ldr	r3, [pc, #224]	; 154dc <_start@@Base+0xeb4>
   153f8:	mov	r2, #1
   153fc:	mov	r1, r5
   15400:	mov	r0, r4
   15404:	bl	33238 <flatcc_json_printer_uint32_field@@Base>
   15408:	str	r7, [sp]
   1540c:	ldr	r3, [pc, #204]	; 154e0 <_start@@Base+0xeb8>
   15410:	mov	r2, #2
   15414:	mov	r1, r5
   15418:	mov	r0, r4
   1541c:	bl	329a0 <flatcc_json_printer_string_field@@Base>
   15420:	mov	r8, #0
   15424:	mov	r9, #0
   15428:	strd	r8, [sp, #8]
   1542c:	mov	r6, #8
   15430:	str	r6, [sp]
   15434:	ldr	r3, [pc, #168]	; 154e4 <_start@@Base+0xebc>
   15438:	mov	r2, #3
   1543c:	mov	r1, r5
   15440:	mov	r0, r4
   15444:	bl	33bc8 <flatcc_json_printer_int64_field@@Base>
   15448:	str	r7, [sp]
   1544c:	ldr	r3, [pc, #148]	; 154e8 <_start@@Base+0xec0>
   15450:	mov	r2, r7
   15454:	mov	r1, r5
   15458:	mov	r0, r4
   1545c:	bl	329a0 <flatcc_json_printer_string_field@@Base>
   15460:	strd	r8, [sp, #8]
   15464:	str	r6, [sp]
   15468:	ldr	r3, [pc, #124]	; 154ec <_start@@Base+0xec4>
   1546c:	mov	r2, #5
   15470:	mov	r1, r5
   15474:	mov	r0, r4
   15478:	bl	33bc8 <flatcc_json_printer_int64_field@@Base>
   1547c:	str	fp, [sp, #4]
   15480:	str	sl, [sp]
   15484:	ldr	r3, [pc, #100]	; 154f0 <_start@@Base+0xec8>
   15488:	mov	r2, #6
   1548c:	mov	r1, r5
   15490:	mov	r0, r4
   15494:	bl	33238 <flatcc_json_printer_uint32_field@@Base>
   15498:	strd	r8, [sp, #8]
   1549c:	str	r6, [sp]
   154a0:	ldr	r3, [pc, #76]	; 154f4 <_start@@Base+0xecc>
   154a4:	mov	r2, #7
   154a8:	mov	r1, r5
   154ac:	mov	r0, r4
   154b0:	bl	33bc8 <flatcc_json_printer_int64_field@@Base>
   154b4:	str	fp, [sp, #4]
   154b8:	str	sl, [sp]
   154bc:	ldr	r3, [pc, #52]	; 154f8 <_start@@Base+0xed0>
   154c0:	mov	r2, r6
   154c4:	mov	r1, r5
   154c8:	mov	r0, r4
   154cc:	bl	33238 <flatcc_json_printer_uint32_field@@Base>
   154d0:	add	sp, sp, #20
   154d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154d8:	andeq	sp, r3, r4, asr #18
   154dc:	andeq	sp, r3, ip, asr #18
   154e0:	andeq	sp, r3, r8, asr r9
   154e4:	andeq	sp, r3, r0, ror #18
   154e8:	andeq	sp, r3, ip, ror #18
   154ec:	andeq	sp, r3, r4, ror r9
   154f0:	andeq	sp, r3, r0, lsl #19
   154f4:	andeq	sp, r3, ip, lsl #19
   154f8:	muleq	r3, r8, r9
   154fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15500:	sub	sp, sp, #20
   15504:	mov	r4, r0
   15508:	mov	r5, r1
   1550c:	ldr	r3, [pc, #1096]	; 1595c <_start@@Base+0x1334>
   15510:	str	r3, [sp, #4]
   15514:	mov	r6, #3
   15518:	str	r6, [sp]
   1551c:	ldr	r3, [pc, #1084]	; 15960 <_start@@Base+0x1338>
   15520:	mov	r2, #0
   15524:	bl	3c498 <flatcc_json_printer_struct_field@@Base>
   15528:	mov	r3, #150	; 0x96
   1552c:	str	r3, [sp, #4]
   15530:	mov	r7, #4
   15534:	str	r7, [sp]
   15538:	ldr	r3, [pc, #1060]	; 15964 <_start@@Base+0x133c>
   1553c:	mov	r2, #1
   15540:	mov	r1, r5
   15544:	mov	r0, r4
   15548:	bl	337f8 <flatcc_json_printer_int16_field@@Base>
   1554c:	mov	r3, #100	; 0x64
   15550:	str	r3, [sp, #4]
   15554:	mov	r2, #2
   15558:	str	r2, [sp]
   1555c:	ldr	r3, [pc, #1028]	; 15968 <_start@@Base+0x1340>
   15560:	mov	r1, r5
   15564:	mov	r0, r4
   15568:	bl	337f8 <flatcc_json_printer_int16_field@@Base>
   1556c:	str	r7, [sp]
   15570:	ldr	r3, [pc, #1012]	; 1596c <_start@@Base+0x1344>
   15574:	mov	r2, r6
   15578:	mov	r1, r5
   1557c:	mov	r0, r4
   15580:	bl	329a0 <flatcc_json_printer_string_field@@Base>
   15584:	mov	r8, #9
   15588:	str	r8, [sp]
   1558c:	ldr	r3, [pc, #988]	; 15970 <_start@@Base+0x1348>
   15590:	mov	r2, #5
   15594:	mov	r1, r5
   15598:	mov	r0, r4
   1559c:	bl	376f4 <flatcc_json_printer_uint8_vector_field@@Base>
   155a0:	ldr	r3, [pc, #972]	; 15974 <_start@@Base+0x134c>
   155a4:	str	r3, [sp, #8]
   155a8:	mov	fp, #8
   155ac:	str	fp, [sp, #4]
   155b0:	mov	r9, #5
   155b4:	str	r9, [sp]
   155b8:	ldr	r3, [pc, #952]	; 15978 <_start@@Base+0x1350>
   155bc:	mov	r2, #6
   155c0:	mov	r1, r5
   155c4:	mov	r0, r4
   155c8:	bl	34ba4 <flatcc_json_printer_int8_enum_field@@Base>
   155cc:	ldr	r3, [pc, #936]	; 1597c <_start@@Base+0x1354>
   155d0:	str	r3, [sp, #8]
   155d4:	ldr	r3, [pc, #932]	; 15980 <_start@@Base+0x1358>
   155d8:	str	r3, [sp, #4]
   155dc:	str	r7, [sp]
   155e0:	ldr	r3, [pc, #924]	; 15984 <_start@@Base+0x135c>
   155e4:	mov	r2, fp
   155e8:	mov	r1, r5
   155ec:	mov	r0, r4
   155f0:	bl	3bdc0 <flatcc_json_printer_union_field@@Base>
   155f4:	ldr	r3, [pc, #908]	; 15988 <_start@@Base+0x1360>
   155f8:	str	r3, [sp, #8]
   155fc:	str	r7, [sp, #4]
   15600:	str	r9, [sp]
   15604:	ldr	r3, [pc, #896]	; 1598c <_start@@Base+0x1364>
   15608:	mov	r2, r8
   1560c:	mov	r1, r5
   15610:	mov	r0, r4
   15614:	bl	3ac40 <flatcc_json_printer_struct_vector_field@@Base>
   15618:	mov	r6, #17
   1561c:	str	r6, [sp]
   15620:	ldr	r3, [pc, #872]	; 15990 <_start@@Base+0x1368>
   15624:	mov	r2, #10
   15628:	mov	r1, r5
   1562c:	mov	r0, r4
   15630:	bl	3afb4 <flatcc_json_printer_string_vector_field@@Base>
   15634:	ldr	sl, [pc, #856]	; 15994 <_start@@Base+0x136c>
   15638:	str	sl, [sp, #4]
   1563c:	str	r6, [sp]
   15640:	ldr	r3, [pc, #848]	; 15998 <_start@@Base+0x1370>
   15644:	mov	r2, #11
   15648:	mov	r1, r5
   1564c:	mov	r0, r4
   15650:	bl	3b3a0 <flatcc_json_printer_table_vector_field@@Base>
   15654:	str	sl, [sp, #4]
   15658:	str	r9, [sp]
   1565c:	ldr	r3, [pc, #824]	; 1599c <_start@@Base+0x1374>
   15660:	mov	r2, #12
   15664:	mov	r1, r5
   15668:	mov	r0, r4
   1566c:	bl	3bb10 <flatcc_json_printer_table_field@@Base>
   15670:	str	sl, [sp, #8]
   15674:	mov	sl, #0
   15678:	str	sl, [sp, #4]
   1567c:	mov	r3, #20
   15680:	str	r3, [sp]
   15684:	ldr	r3, [pc, #788]	; 159a0 <_start@@Base+0x1378>
   15688:	mov	r2, #13
   1568c:	mov	r1, r5
   15690:	mov	r0, r4
   15694:	bl	3caf4 <flatcc_json_printer_table_as_nested_root@@Base>
   15698:	ldr	r3, [pc, #772]	; 159a4 <_start@@Base+0x137c>
   1569c:	str	r3, [sp, #4]
   156a0:	str	r8, [sp]
   156a4:	ldr	r3, [pc, #764]	; 159a8 <_start@@Base+0x1380>
   156a8:	mov	r2, #14
   156ac:	mov	r1, r5
   156b0:	mov	r0, r4
   156b4:	bl	3bb10 <flatcc_json_printer_table_field@@Base>
   156b8:	mov	r3, #1
   156bc:	str	r3, [sp, #4]
   156c0:	str	fp, [sp]
   156c4:	ldr	r3, [pc, #736]	; 159ac <_start@@Base+0x1384>
   156c8:	mov	r2, #15
   156cc:	mov	r1, r5
   156d0:	mov	r0, r4
   156d4:	bl	33db8 <flatcc_json_printer_bool_field@@Base>
   156d8:	str	sl, [sp, #4]
   156dc:	mov	r8, #16
   156e0:	str	r8, [sp]
   156e4:	ldr	r3, [pc, #708]	; 159b0 <_start@@Base+0x1388>
   156e8:	mov	r2, r8
   156ec:	mov	r1, r5
   156f0:	mov	r0, r4
   156f4:	bl	339e0 <flatcc_json_printer_int32_field@@Base>
   156f8:	str	sl, [sp, #4]
   156fc:	str	r8, [sp]
   15700:	ldr	r3, [pc, #684]	; 159b4 <_start@@Base+0x138c>
   15704:	mov	r2, r6
   15708:	mov	r1, r5
   1570c:	mov	r0, r4
   15710:	bl	33238 <flatcc_json_printer_uint32_field@@Base>
   15714:	mov	r2, #0
   15718:	mov	r3, #0
   1571c:	strd	r2, [sp, #8]
   15720:	str	r8, [sp]
   15724:	ldr	r3, [pc, #652]	; 159b8 <_start@@Base+0x1390>
   15728:	mov	r2, #18
   1572c:	mov	r1, r5
   15730:	mov	r0, r4
   15734:	bl	33bc8 <flatcc_json_printer_int64_field@@Base>
   15738:	mov	r2, #0
   1573c:	mov	r3, #0
   15740:	strd	r2, [sp, #8]
   15744:	str	r8, [sp]
   15748:	ldr	r3, [pc, #620]	; 159bc <_start@@Base+0x1394>
   1574c:	mov	r2, #19
   15750:	mov	r1, r5
   15754:	mov	r0, r4
   15758:	bl	33420 <flatcc_json_printer_uint64_field@@Base>
   1575c:	str	sl, [sp, #4]
   15760:	str	r6, [sp]
   15764:	ldr	r3, [pc, #596]	; 159c0 <_start@@Base+0x1398>
   15768:	mov	r2, #20
   1576c:	mov	r1, r5
   15770:	mov	r0, r4
   15774:	bl	339e0 <flatcc_json_printer_int32_field@@Base>
   15778:	str	sl, [sp, #4]
   1577c:	str	r6, [sp]
   15780:	ldr	r3, [pc, #572]	; 159c4 <_start@@Base+0x139c>
   15784:	mov	r2, #21
   15788:	mov	r1, r5
   1578c:	mov	r0, r4
   15790:	bl	33238 <flatcc_json_printer_uint32_field@@Base>
   15794:	mov	r2, #0
   15798:	mov	r3, #0
   1579c:	strd	r2, [sp, #8]
   157a0:	str	r6, [sp]
   157a4:	ldr	r3, [pc, #540]	; 159c8 <_start@@Base+0x13a0>
   157a8:	mov	r2, #22
   157ac:	mov	r1, r5
   157b0:	mov	r0, r4
   157b4:	bl	33bc8 <flatcc_json_printer_int64_field@@Base>
   157b8:	mov	r2, #0
   157bc:	mov	r3, #0
   157c0:	strd	r2, [sp, #8]
   157c4:	str	r6, [sp]
   157c8:	ldr	r3, [pc, #508]	; 159cc <_start@@Base+0x13a4>
   157cc:	mov	r2, #23
   157d0:	mov	r1, r5
   157d4:	mov	r0, r4
   157d8:	bl	33420 <flatcc_json_printer_uint64_field@@Base>
   157dc:	str	r8, [sp]
   157e0:	ldr	r3, [pc, #488]	; 159d0 <_start@@Base+0x13a8>
   157e4:	mov	r2, #24
   157e8:	mov	r1, r5
   157ec:	mov	r0, r4
   157f0:	bl	38bb4 <flatcc_json_printer_bool_vector_field@@Base>
   157f4:	str	r9, [sp]
   157f8:	vldr	s0, [pc, #336]	; 15950 <_start@@Base+0x1328>
   157fc:	ldr	r3, [pc, #464]	; 159d4 <_start@@Base+0x13ac>
   15800:	mov	r2, #25
   15804:	mov	r1, r5
   15808:	mov	r0, r4
   1580c:	bl	33fa0 <flatcc_json_printer_float_field@@Base>
   15810:	mov	r8, #6
   15814:	str	r8, [sp]
   15818:	vldr	s0, [pc, #308]	; 15954 <_start@@Base+0x132c>
   1581c:	ldr	r3, [pc, #436]	; 159d8 <_start@@Base+0x13b0>
   15820:	mov	r2, #26
   15824:	mov	r1, r5
   15828:	mov	r0, r4
   1582c:	bl	33fa0 <flatcc_json_printer_float_field@@Base>
   15830:	str	r8, [sp]
   15834:	vldr	s0, [pc, #284]	; 15958 <_start@@Base+0x1330>
   15838:	ldr	r3, [pc, #412]	; 159dc <_start@@Base+0x13b4>
   1583c:	mov	r2, #27
   15840:	mov	r1, r5
   15844:	mov	r0, r4
   15848:	bl	33fa0 <flatcc_json_printer_float_field@@Base>
   1584c:	mov	r3, #18
   15850:	str	r3, [sp]
   15854:	ldr	r3, [pc, #388]	; 159e0 <_start@@Base+0x13b8>
   15858:	mov	r2, #28
   1585c:	mov	r1, r5
   15860:	mov	r0, r4
   15864:	bl	3afb4 <flatcc_json_printer_string_vector_field@@Base>
   15868:	ldr	r3, [pc, #372]	; 159e4 <_start@@Base+0x13bc>
   1586c:	str	r3, [sp, #8]
   15870:	str	fp, [sp, #4]
   15874:	mov	r3, #23
   15878:	str	r3, [sp]
   1587c:	ldr	r3, [pc, #356]	; 159e8 <_start@@Base+0x13c0>
   15880:	mov	r2, #29
   15884:	mov	r1, r5
   15888:	mov	r0, r4
   1588c:	bl	3ac40 <flatcc_json_printer_struct_vector_field@@Base>
   15890:	str	r7, [sp]
   15894:	ldr	r3, [pc, #336]	; 159ec <_start@@Base+0x13c4>
   15898:	mov	r2, #30
   1589c:	mov	r1, r5
   158a0:	mov	r0, r4
   158a4:	bl	376f4 <flatcc_json_printer_uint8_vector_field@@Base>
   158a8:	ldr	r3, [pc, #216]	; 15988 <_start@@Base+0x1360>
   158ac:	str	r3, [sp, #8]
   158b0:	str	r7, [sp, #4]
   158b4:	str	r9, [sp]
   158b8:	ldr	r3, [pc, #304]	; 159f0 <_start@@Base+0x13c8>
   158bc:	mov	r2, #31
   158c0:	mov	r1, r5
   158c4:	mov	r0, r4
   158c8:	bl	3ac40 <flatcc_json_printer_struct_vector_field@@Base>
   158cc:	mov	r3, #15
   158d0:	str	r3, [sp]
   158d4:	ldr	r3, [pc, #280]	; 159f4 <_start@@Base+0x13cc>
   158d8:	mov	r2, #32
   158dc:	mov	r1, r5
   158e0:	mov	r0, r4
   158e4:	bl	38940 <flatcc_json_printer_int64_vector_field@@Base>
   158e8:	str	r6, [sp]
   158ec:	ldr	r3, [pc, #260]	; 159f8 <_start@@Base+0x13d0>
   158f0:	mov	r2, #33	; 0x21
   158f4:	mov	r1, r5
   158f8:	mov	r0, r4
   158fc:	bl	3909c <flatcc_json_printer_double_vector_field@@Base>
   15900:	ldr	r3, [pc, #244]	; 159fc <_start@@Base+0x13d4>
   15904:	str	r3, [sp, #4]
   15908:	mov	r3, #21
   1590c:	str	r3, [sp]
   15910:	ldr	r3, [pc, #232]	; 15a00 <_start@@Base+0x13d8>
   15914:	mov	r2, #34	; 0x22
   15918:	mov	r1, r5
   1591c:	mov	r0, r4
   15920:	bl	3bb10 <flatcc_json_printer_table_field@@Base>
   15924:	ldr	r3, [pc, #216]	; 15a04 <_start@@Base+0x13dc>
   15928:	str	r3, [sp, #4]
   1592c:	mov	r3, #10
   15930:	str	r3, [sp]
   15934:	ldr	r3, [pc, #204]	; 15a08 <_start@@Base+0x13e0>
   15938:	mov	r2, #35	; 0x23
   1593c:	mov	r1, r5
   15940:	mov	r0, r4
   15944:	bl	3bb10 <flatcc_json_printer_table_field@@Base>
   15948:	add	sp, sp, #20
   1594c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15950:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   15954:	submi	r0, r0, r0
   15958:	andeq	r0, r0, r0
   1595c:	andeq	r6, r1, r4, ror r1
   15960:	andeq	sp, r3, r4, lsr #19
   15964:	andeq	sp, r3, r8, lsr #19
   15968:			; <UNDEFINED> instruction: 0x0003d9b0
   1596c:			; <UNDEFINED> instruction: 0x0003d9b4
   15970:			; <UNDEFINED> instruction: 0x0003d9bc
   15974:	andeq	r6, r1, r8, lsr #1
   15978:	andeq	sp, r3, r8, asr #19
   1597c:	ldrdeq	r5, [r1], -r4
   15980:	andeq	r5, r1, r4, ror pc
   15984:	ldrdeq	sp, [r3], -r0
   15988:	andeq	r5, r1, r4, ror fp
   1598c:	ldrdeq	sp, [r3], -r8
   15990:	andeq	sp, r3, r0, ror #19
   15994:	strdeq	r5, [r1], -ip
   15998:	strdeq	sp, [r3], -r4
   1599c:	andeq	sp, r3, r8, lsl #20
   159a0:	andeq	sp, r3, r0, lsl sl
   159a4:	strdeq	r5, [r1], -r0
   159a8:	andeq	sp, r3, r8, lsr #20
   159ac:	andeq	sp, r3, r4, lsr sl
   159b0:	andeq	sp, r3, r0, asr #20
   159b4:	andeq	sp, r3, r4, asr sl
   159b8:	andeq	sp, r3, r8, ror #20
   159bc:	andeq	sp, r3, ip, ror sl
   159c0:	muleq	r3, r0, sl
   159c4:	andeq	sp, r3, r4, lsr #21
   159c8:			; <UNDEFINED> instruction: 0x0003dab8
   159cc:	andeq	sp, r3, ip, asr #21
   159d0:	andeq	sp, r3, r0, ror #21
   159d4:	strdeq	sp, [r3], -r4
   159d8:	strdeq	sp, [r3], -ip
   159dc:	andeq	sp, r3, r4, lsl #22
   159e0:	andeq	sp, r3, ip, lsl #22
   159e4:	andeq	r5, r1, ip, lsl #21
   159e8:	andeq	sp, r3, r0, lsr #22
   159ec:	andeq	sp, r3, r8, lsr fp
   159f0:	andeq	sp, r3, r0, asr #22
   159f4:	andeq	sp, r3, r8, asr #22
   159f8:	andeq	sp, r3, r8, asr fp
   159fc:	ldrdeq	r4, [r1], -r0
   15a00:	andeq	sp, r3, ip, ror #22
   15a04:	andeq	r5, r1, ip, lsl #20
   15a08:	andeq	sp, r3, r4, lsl #23
   15a0c:	push	{r4, r5, r6, lr}
   15a10:	sub	sp, sp, #8
   15a14:	mov	r5, r0
   15a18:	mov	r6, r1
   15a1c:	mov	r4, #0
   15a20:	str	r4, [sp, #4]
   15a24:	mov	r3, #4
   15a28:	str	r3, [sp]
   15a2c:	ldr	r3, [pc, #76]	; 15a80 <_start@@Base+0x1458>
   15a30:	mov	r2, r4
   15a34:	bl	32b58 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15a38:	mov	r2, #1
   15a3c:	str	r2, [sp, #4]
   15a40:	mov	r3, #7
   15a44:	str	r3, [sp]
   15a48:	ldr	r3, [pc, #52]	; 15a84 <_start@@Base+0x145c>
   15a4c:	mov	r1, r6
   15a50:	mov	r0, r5
   15a54:	bl	32b58 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15a58:	str	r4, [sp, #4]
   15a5c:	mov	r3, #6
   15a60:	str	r3, [sp]
   15a64:	ldr	r3, [pc, #28]	; 15a88 <_start@@Base+0x1460>
   15a68:	mov	r2, #2
   15a6c:	mov	r1, r6
   15a70:	mov	r0, r5
   15a74:	bl	32b58 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15a78:	add	sp, sp, #8
   15a7c:	pop	{r4, r5, r6, pc}
   15a80:	muleq	r3, r0, fp
   15a84:	muleq	r3, r8, fp
   15a88:	andeq	sp, r3, r0, lsr #23
   15a8c:	push	{r4, r5, lr}
   15a90:	sub	sp, sp, #12
   15a94:	mov	r5, r0
   15a98:	mov	r4, r1
   15a9c:	mov	r3, #2
   15aa0:	str	r3, [sp, #4]
   15aa4:	ldr	r3, [pc, #60]	; 15ae8 <_start@@Base+0x14c0>
   15aa8:	str	r3, [sp]
   15aac:	mov	r3, #0
   15ab0:	mov	r2, r1
   15ab4:	mov	r1, r3
   15ab8:	bl	358c8 <flatcc_json_printer_uint32_struct_field@@Base>
   15abc:	mov	r3, #8
   15ac0:	str	r3, [sp, #4]
   15ac4:	ldr	r3, [pc, #32]	; 15aec <_start@@Base+0x14c4>
   15ac8:	str	r3, [sp]
   15acc:	mov	r3, #4
   15ad0:	mov	r2, r4
   15ad4:	mov	r1, #1
   15ad8:	mov	r0, r5
   15adc:	bl	358c8 <flatcc_json_printer_uint32_struct_field@@Base>
   15ae0:	add	sp, sp, #12
   15ae4:	pop	{r4, r5, pc}
   15ae8:	andeq	sp, r3, r8, lsr #23
   15aec:	andeq	sp, r3, ip, lsr #23
   15af0:	push	{r4, r5, r6, lr}
   15af4:	sub	sp, sp, #16
   15af8:	mov	r4, r0
   15afc:	mov	r5, r1
   15b00:	mov	r6, #2
   15b04:	str	r6, [sp]
   15b08:	ldr	r3, [pc, #88]	; 15b68 <_start@@Base+0x1540>
   15b0c:	mov	r2, #0
   15b10:	bl	329a0 <flatcc_json_printer_string_field@@Base>
   15b14:	mov	r2, #0
   15b18:	mov	r3, #0
   15b1c:	strd	r2, [sp, #8]
   15b20:	mov	r3, #3
   15b24:	str	r3, [sp]
   15b28:	ldr	r3, [pc, #60]	; 15b6c <_start@@Base+0x1544>
   15b2c:	mov	r2, #1
   15b30:	mov	r1, r5
   15b34:	mov	r0, r4
   15b38:	bl	33bc8 <flatcc_json_printer_int64_field@@Base>
   15b3c:	mov	r3, #0
   15b40:	str	r3, [sp, #4]
   15b44:	mov	r3, #5
   15b48:	str	r3, [sp]
   15b4c:	ldr	r3, [pc, #28]	; 15b70 <_start@@Base+0x1548>
   15b50:	mov	r2, r6
   15b54:	mov	r1, r5
   15b58:	mov	r0, r4
   15b5c:	bl	33050 <flatcc_json_printer_uint16_field@@Base>
   15b60:	add	sp, sp, #16
   15b64:	pop	{r4, r5, r6, pc}
   15b68:	andeq	sp, r3, r8, lsr #23
   15b6c:			; <UNDEFINED> instruction: 0x0003dbb8
   15b70:			; <UNDEFINED> instruction: 0x0003dbbc
   15b74:	push	{r4, r5, r6, lr}
   15b78:	sub	sp, sp, #8
   15b7c:	mov	r6, r0
   15b80:	mov	r5, r1
   15b84:	mov	r4, #1
   15b88:	str	r4, [sp, #4]
   15b8c:	ldr	r3, [pc, #56]	; 15bcc <_start@@Base+0x15a4>
   15b90:	str	r3, [sp]
   15b94:	mov	r3, #0
   15b98:	mov	r2, r1
   15b9c:	mov	r1, r3
   15ba0:	bl	35d34 <flatcc_json_printer_int16_struct_field@@Base>
   15ba4:	str	r4, [sp, #4]
   15ba8:	ldr	r3, [pc, #32]	; 15bd0 <_start@@Base+0x15a8>
   15bac:	str	r3, [sp]
   15bb0:	mov	r3, #2
   15bb4:	mov	r2, r5
   15bb8:	mov	r1, r4
   15bbc:	mov	r0, r6
   15bc0:	bl	35bbc <flatcc_json_printer_int8_struct_field@@Base>
   15bc4:	add	sp, sp, #8
   15bc8:	pop	{r4, r5, r6, pc}
   15bcc:	andeq	sp, r3, r0, lsr #21
   15bd0:	andeq	sp, r3, r4, asr #23
   15bd4:	push	{r4, lr}
   15bd8:	ldrb	r3, [r1, #8]
   15bdc:	sub	r3, r3, #1
   15be0:	cmp	r3, #3
   15be4:	ldrls	pc, [pc, r3, lsl #2]
   15be8:	b	15c28 <_start@@Base+0x1600>
   15bec:	strdeq	r5, [r1], -ip
   15bf0:	andeq	r5, r1, r8, lsl #24
   15bf4:	andeq	r5, r1, r4, lsl ip
   15bf8:	andeq	r5, r1, r0, lsr #24
   15bfc:	ldr	r2, [pc, #40]	; 15c2c <_start@@Base+0x1604>
   15c00:	bl	3c080 <flatcc_json_printer_union_table@@Base>
   15c04:	pop	{r4, pc}
   15c08:	ldr	r2, [pc, #32]	; 15c30 <_start@@Base+0x1608>
   15c0c:	bl	3c080 <flatcc_json_printer_union_table@@Base>
   15c10:	pop	{r4, pc}
   15c14:	ldr	r2, [pc, #24]	; 15c34 <_start@@Base+0x160c>
   15c18:	bl	3c080 <flatcc_json_printer_union_table@@Base>
   15c1c:	pop	{r4, pc}
   15c20:	ldr	r2, [pc, #16]	; 15c38 <_start@@Base+0x1610>
   15c24:	bl	3c080 <flatcc_json_printer_union_table@@Base>
   15c28:	pop	{r4, pc}
   15c2c:	strdeq	r5, [r1], -ip
   15c30:	strdeq	r5, [r1], -ip
   15c34:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15c38:	andeq	r5, r1, ip, lsr ip
   15c3c:	push	{r4, r5, lr}
   15c40:	sub	sp, sp, #20
   15c44:	mov	r4, r0
   15c48:	mov	r5, r1
   15c4c:	ldr	r3, [pc, #108]	; 15cc0 <_start@@Base+0x1698>
   15c50:	str	r3, [sp, #4]
   15c54:	mov	r3, #6
   15c58:	str	r3, [sp]
   15c5c:	ldr	r3, [pc, #96]	; 15cc4 <_start@@Base+0x169c>
   15c60:	mov	r2, #0
   15c64:	bl	3bb10 <flatcc_json_printer_table_field@@Base>
   15c68:	ldr	r3, [pc, #88]	; 15cc8 <_start@@Base+0x16a0>
   15c6c:	str	r3, [sp, #4]
   15c70:	mov	r3, #5
   15c74:	str	r3, [sp]
   15c78:	ldr	r3, [pc, #76]	; 15ccc <_start@@Base+0x16a4>
   15c7c:	mov	r2, #1
   15c80:	mov	r1, r5
   15c84:	mov	r0, r4
   15c88:	bl	3bb10 <flatcc_json_printer_table_field@@Base>
   15c8c:	ldr	r3, [pc, #60]	; 15cd0 <_start@@Base+0x16a8>
   15c90:	str	r3, [sp, #8]
   15c94:	ldr	r3, [pc, #56]	; 15cd4 <_start@@Base+0x16ac>
   15c98:	str	r3, [sp, #4]
   15c9c:	mov	r3, #7
   15ca0:	str	r3, [sp]
   15ca4:	ldr	r3, [pc, #44]	; 15cd8 <_start@@Base+0x16b0>
   15ca8:	mov	r2, #3
   15cac:	mov	r1, r5
   15cb0:	mov	r0, r4
   15cb4:	bl	3b800 <flatcc_json_printer_union_vector_field@@Base>
   15cb8:	add	sp, sp, #20
   15cbc:	pop	{r4, r5, pc}
   15cc0:	andeq	r5, r1, r4, asr #4
   15cc4:	andeq	sp, r3, r8, asr #23
   15cc8:	ldrdeq	r5, [r1], -ip
   15ccc:	ldrdeq	sp, [r3], -r0
   15cd0:	ldrdeq	r5, [r1], -r4
   15cd4:	andeq	r5, r1, r4, ror pc
   15cd8:	ldrdeq	sp, [r3], -r8
   15cdc:	push	{r4, r5, r6, r7, r8, r9, lr}
   15ce0:	sub	sp, sp, #20
   15ce4:	mov	r6, r0
   15ce8:	mov	r7, r1
   15cec:	ldr	r5, [pc, #176]	; 15da4 <_start@@Base+0x177c>
   15cf0:	str	r5, [sp, #8]
   15cf4:	ldr	r4, [pc, #172]	; 15da8 <_start@@Base+0x1780>
   15cf8:	str	r4, [sp, #4]
   15cfc:	mov	r3, #14
   15d00:	str	r3, [sp]
   15d04:	ldr	r3, [pc, #160]	; 15dac <_start@@Base+0x1784>
   15d08:	mov	r2, #1
   15d0c:	bl	3bdc0 <flatcc_json_printer_union_field@@Base>
   15d10:	str	r5, [sp, #8]
   15d14:	str	r4, [sp, #4]
   15d18:	mov	r9, #10
   15d1c:	str	r9, [sp]
   15d20:	ldr	r3, [pc, #136]	; 15db0 <_start@@Base+0x1788>
   15d24:	mov	r2, #3
   15d28:	mov	r1, r7
   15d2c:	mov	r0, r6
   15d30:	bl	3bdc0 <flatcc_json_printer_union_field@@Base>
   15d34:	str	r5, [sp, #8]
   15d38:	str	r4, [sp, #4]
   15d3c:	mov	r8, #9
   15d40:	str	r8, [sp]
   15d44:	ldr	r3, [pc, #104]	; 15db4 <_start@@Base+0x178c>
   15d48:	mov	r2, #5
   15d4c:	mov	r1, r7
   15d50:	mov	r0, r6
   15d54:	bl	3bdc0 <flatcc_json_printer_union_field@@Base>
   15d58:	str	r5, [sp, #8]
   15d5c:	str	r4, [sp, #4]
   15d60:	mov	r3, #5
   15d64:	str	r3, [sp]
   15d68:	ldr	r3, [pc, #72]	; 15db8 <_start@@Base+0x1790>
   15d6c:	mov	r2, #7
   15d70:	mov	r1, r7
   15d74:	mov	r0, r6
   15d78:	bl	3bdc0 <flatcc_json_printer_union_field@@Base>
   15d7c:	str	r5, [sp, #8]
   15d80:	str	r4, [sp, #4]
   15d84:	str	r9, [sp]
   15d88:	ldr	r3, [pc, #44]	; 15dbc <_start@@Base+0x1794>
   15d8c:	mov	r2, r8
   15d90:	mov	r1, r7
   15d94:	mov	r0, r6
   15d98:	bl	3b800 <flatcc_json_printer_union_vector_field@@Base>
   15d9c:	add	sp, sp, #20
   15da0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15da4:	andeq	r5, r1, r0, asr #27
   15da8:			; <UNDEFINED> instruction: 0x00015eb4
   15dac:	andeq	sp, r3, r0, ror #23
   15db0:	strdeq	sp, [r3], -r0
   15db4:	strdeq	sp, [r3], -ip
   15db8:	andeq	sp, r3, r8, lsl #24
   15dbc:	andeq	sp, r3, r0, lsl ip
   15dc0:	push	{r4, lr}
   15dc4:	ldrb	r3, [r1, #8]
   15dc8:	cmp	r3, #9
   15dcc:	beq	15e20 <_start@@Base+0x17f8>
   15dd0:	bls	15df0 <_start@@Base+0x17c8>
   15dd4:	cmp	r3, #11
   15dd8:	beq	15e38 <_start@@Base+0x1810>
   15ddc:	bcc	15e2c <_start@@Base+0x1804>
   15de0:	cmp	r3, #255	; 0xff
   15de4:	bne	15e10 <_start@@Base+0x17e8>
   15de8:	bl	3c25c <flatcc_json_printer_union_string@@Base>
   15dec:	pop	{r4, pc}
   15df0:	cmp	r3, #2
   15df4:	beq	15e14 <_start@@Base+0x17ec>
   15df8:	cmp	r3, #8
   15dfc:	bne	15e0c <_start@@Base+0x17e4>
   15e00:	ldr	r2, [pc, #56]	; 15e40 <_start@@Base+0x1818>
   15e04:	bl	3c198 <flatcc_json_printer_union_struct@@Base>
   15e08:	pop	{r4, pc}
   15e0c:	pop	{r4, pc}
   15e10:	pop	{r4, pc}
   15e14:	ldr	r2, [pc, #40]	; 15e44 <_start@@Base+0x181c>
   15e18:	bl	3c080 <flatcc_json_printer_union_table@@Base>
   15e1c:	pop	{r4, pc}
   15e20:	ldr	r2, [pc, #32]	; 15e48 <_start@@Base+0x1820>
   15e24:	bl	3c198 <flatcc_json_printer_union_struct@@Base>
   15e28:	pop	{r4, pc}
   15e2c:	ldr	r2, [pc, #20]	; 15e48 <_start@@Base+0x1820>
   15e30:	bl	3c198 <flatcc_json_printer_union_struct@@Base>
   15e34:	pop	{r4, pc}
   15e38:	bl	3c25c <flatcc_json_printer_union_string@@Base>
   15e3c:	pop	{r4, pc}
   15e40:	andeq	r5, r1, r0, lsl #29
   15e44:	ldrdeq	r5, [r1], -r4
   15e48:	andeq	r5, r1, ip, asr #28
   15e4c:	push	{lr}		; (str lr, [sp, #-4]!)
   15e50:	sub	sp, sp, #12
   15e54:	mov	r3, #10
   15e58:	str	r3, [sp, #4]
   15e5c:	ldr	r3, [pc, #24]	; 15e7c <_start@@Base+0x1854>
   15e60:	str	r3, [sp]
   15e64:	mov	r3, #0
   15e68:	mov	r2, r1
   15e6c:	mov	r1, r3
   15e70:	bl	35eac <flatcc_json_printer_int32_struct_field@@Base>
   15e74:	add	sp, sp, #12
   15e78:	pop	{pc}		; (ldr pc, [sp], #4)
   15e7c:	andeq	sp, r3, ip, lsl ip
   15e80:	push	{lr}		; (str lr, [sp, #-4]!)
   15e84:	sub	sp, sp, #12
   15e88:	mov	r3, #11
   15e8c:	str	r3, [sp, #4]
   15e90:	ldr	r3, [pc, #24]	; 15eb0 <_start@@Base+0x1888>
   15e94:	str	r3, [sp]
   15e98:	mov	r3, #0
   15e9c:	mov	r2, r1
   15ea0:	mov	r1, r3
   15ea4:	bl	35750 <flatcc_json_printer_uint16_struct_field@@Base>
   15ea8:	add	sp, sp, #12
   15eac:	pop	{pc}		; (ldr pc, [sp], #4)
   15eb0:	andeq	sp, r3, r8, lsr #24
   15eb4:	push	{r4, lr}
   15eb8:	cmp	r1, #9
   15ebc:	beq	15f18 <_start@@Base+0x18f0>
   15ec0:	bls	15ee8 <_start@@Base+0x18c0>
   15ec4:	cmp	r1, #11
   15ec8:	beq	15f38 <_start@@Base+0x1910>
   15ecc:	bcc	15f28 <_start@@Base+0x1900>
   15ed0:	cmp	r1, #255	; 0xff
   15ed4:	bne	15f48 <_start@@Base+0x1920>
   15ed8:	mov	r2, #6
   15edc:	ldr	r1, [pc, #116]	; 15f58 <_start@@Base+0x1930>
   15ee0:	bl	3287c <flatcc_json_printer_enum@@Base>
   15ee4:	pop	{r4, pc}
   15ee8:	cmp	r1, #2
   15eec:	beq	15f08 <_start@@Base+0x18e0>
   15ef0:	cmp	r1, #8
   15ef4:	bne	15f48 <_start@@Base+0x1920>
   15ef8:	mov	r2, #8
   15efc:	ldr	r1, [pc, #88]	; 15f5c <_start@@Base+0x1934>
   15f00:	bl	3287c <flatcc_json_printer_enum@@Base>
   15f04:	pop	{r4, pc}
   15f08:	mov	r2, #5
   15f0c:	ldr	r1, [pc, #76]	; 15f60 <_start@@Base+0x1938>
   15f10:	bl	3287c <flatcc_json_printer_enum@@Base>
   15f14:	pop	{r4, pc}
   15f18:	mov	r2, #5
   15f1c:	ldr	r1, [pc, #64]	; 15f64 <_start@@Base+0x193c>
   15f20:	bl	3287c <flatcc_json_printer_enum@@Base>
   15f24:	pop	{r4, pc}
   15f28:	mov	r2, #7
   15f2c:	ldr	r1, [pc, #52]	; 15f68 <_start@@Base+0x1940>
   15f30:	bl	3287c <flatcc_json_printer_enum@@Base>
   15f34:	pop	{r4, pc}
   15f38:	mov	r2, #5
   15f3c:	ldr	r1, [pc, #40]	; 15f6c <_start@@Base+0x1944>
   15f40:	bl	3287c <flatcc_json_printer_enum@@Base>
   15f44:	pop	{r4, pc}
   15f48:	mov	r2, #4
   15f4c:	ldr	r1, [pc, #28]	; 15f70 <_start@@Base+0x1948>
   15f50:	bl	3287c <flatcc_json_printer_enum@@Base>
   15f54:	pop	{r4, pc}
   15f58:	andeq	sp, r3, r0, ror #24
   15f5c:	andeq	sp, r3, ip, lsr ip
   15f60:	andeq	sp, r3, r4, lsr ip
   15f64:	andeq	sp, r3, r8, asr #24
   15f68:	andeq	sp, r3, r0, asr ip
   15f6c:	andeq	sp, r3, r8, asr ip
   15f70:	andeq	r2, r4, ip, lsl #9
   15f74:	push	{r4, lr}
   15f78:	sub	r1, r1, #1
   15f7c:	cmp	r1, #3
   15f80:	ldrls	pc, [pc, r1, lsl #2]
   15f84:	b	15fd8 <_start@@Base+0x19b0>
   15f88:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f8c:	andeq	r5, r1, r8, lsr #31
   15f90:			; <UNDEFINED> instruction: 0x00015fb8
   15f94:	andeq	r5, r1, r8, asr #31
   15f98:	mov	r2, #7
   15f9c:	ldr	r1, [pc, #68]	; 15fe8 <_start@@Base+0x19c0>
   15fa0:	bl	3287c <flatcc_json_printer_enum@@Base>
   15fa4:	pop	{r4, pc}
   15fa8:	mov	r2, #23
   15fac:	ldr	r1, [pc, #56]	; 15fec <_start@@Base+0x19c4>
   15fb0:	bl	3287c <flatcc_json_printer_enum@@Base>
   15fb4:	pop	{r4, pc}
   15fb8:	mov	r2, #8
   15fbc:	ldr	r1, [pc, #44]	; 15ff0 <_start@@Base+0x19c8>
   15fc0:	bl	3287c <flatcc_json_printer_enum@@Base>
   15fc4:	pop	{r4, pc}
   15fc8:	mov	r2, #3
   15fcc:	ldr	r1, [pc, #32]	; 15ff4 <_start@@Base+0x19cc>
   15fd0:	bl	3287c <flatcc_json_printer_enum@@Base>
   15fd4:	pop	{r4, pc}
   15fd8:	mov	r2, #4
   15fdc:	ldr	r1, [pc, #20]	; 15ff8 <_start@@Base+0x19d0>
   15fe0:	bl	3287c <flatcc_json_printer_enum@@Base>
   15fe4:	pop	{r4, pc}
   15fe8:	andeq	sp, r3, r8, ror #24
   15fec:	andeq	sp, r3, r0, ror ip
   15ff0:	andeq	sp, r3, r8, lsl #25
   15ff4:	muleq	r3, r4, ip
   15ff8:	andeq	r2, r4, ip, lsl #9
   15ffc:	push	{r4, r5, r6, r7, lr}
   16000:	sub	sp, sp, #20
   16004:	mov	r5, r0
   16008:	mov	r6, r1
   1600c:	ldr	r7, [pc, #128]	; 16094 <_start@@Base+0x1a6c>
   16010:	str	r7, [sp, #8]
   16014:	mov	r4, #2
   16018:	str	r4, [sp, #4]
   1601c:	mov	r3, #5
   16020:	str	r3, [sp]
   16024:	ldr	r3, [pc, #108]	; 16098 <_start@@Base+0x1a70>
   16028:	mov	r2, #0
   1602c:	bl	34ba4 <flatcc_json_printer_int8_enum_field@@Base>
   16030:	str	r7, [sp, #8]
   16034:	str	r4, [sp, #4]
   16038:	mov	r3, #6
   1603c:	str	r3, [sp]
   16040:	ldr	r3, [pc, #84]	; 1609c <_start@@Base+0x1a74>
   16044:	mov	r2, #1
   16048:	mov	r1, r6
   1604c:	mov	r0, r5
   16050:	bl	34ba4 <flatcc_json_printer_int8_enum_field@@Base>
   16054:	str	r4, [sp, #4]
   16058:	str	r4, [sp]
   1605c:	ldr	r3, [pc, #60]	; 160a0 <_start@@Base+0x1a78>
   16060:	mov	r2, r4
   16064:	mov	r1, r6
   16068:	mov	r0, r5
   1606c:	bl	32e68 <flatcc_json_printer_uint8_field@@Base>
   16070:	str	r4, [sp, #4]
   16074:	mov	r2, #3
   16078:	str	r2, [sp]
   1607c:	ldr	r3, [pc, #32]	; 160a4 <_start@@Base+0x1a7c>
   16080:	mov	r1, r6
   16084:	mov	r0, r5
   16088:	bl	32e68 <flatcc_json_printer_uint8_field@@Base>
   1608c:	add	sp, sp, #20
   16090:	pop	{r4, r5, r6, r7, pc}
   16094:	andeq	r6, r1, r8, lsr #1
   16098:	andeq	sp, r3, r8, asr #19
   1609c:	muleq	r3, r8, ip
   160a0:	andeq	sp, r3, r0, lsr #25
   160a4:	andeq	sp, r3, r4, lsr #25
   160a8:	push	{r4, r5, r6, r7, r8, lr}
   160ac:	mov	r5, r0
   160b0:	uxtb	r4, r1
   160b4:	tst	r4, #244	; 0xf4
   160b8:	movne	r3, #1
   160bc:	moveq	r3, #0
   160c0:	cmp	r4, #0
   160c4:	orreq	r3, r3, #1
   160c8:	cmp	r3, #0
   160cc:	beq	160d8 <_start@@Base+0x1ab0>
   160d0:	bl	327a4 <flatcc_json_printer_int8@@Base>
   160d4:	pop	{r4, r5, r6, r7, r8, pc}
   160d8:	sub	r3, r4, #1
   160dc:	tst	r3, r4
   160e0:	movne	r6, #1
   160e4:	moveq	r6, #0
   160e8:	mov	r1, r6
   160ec:	bl	32900 <flatcc_json_printer_delimit_enum_flags@@Base>
   160f0:	tst	r4, #1
   160f4:	moveq	r1, #0
   160f8:	bne	1611c <_start@@Base+0x1af4>
   160fc:	tst	r4, #2
   16100:	bne	16138 <_start@@Base+0x1b10>
   16104:	tst	r4, #8
   16108:	bne	16154 <_start@@Base+0x1b2c>
   1610c:	mov	r1, r6
   16110:	mov	r0, r5
   16114:	bl	32900 <flatcc_json_printer_delimit_enum_flags@@Base>
   16118:	pop	{r4, r5, r6, r7, r8, pc}
   1611c:	mov	r3, #3
   16120:	ldr	r2, [pc, #64]	; 16168 <_start@@Base+0x1b40>
   16124:	mov	r1, #0
   16128:	mov	r0, r5
   1612c:	bl	32934 <flatcc_json_printer_enum_flag@@Base>
   16130:	mov	r1, #1
   16134:	b	160fc <_start@@Base+0x1ad4>
   16138:	add	r7, r1, #1
   1613c:	mov	r3, #5
   16140:	ldr	r2, [pc, #36]	; 1616c <_start@@Base+0x1b44>
   16144:	mov	r0, r5
   16148:	bl	32934 <flatcc_json_printer_enum_flag@@Base>
   1614c:	mov	r1, r7
   16150:	b	16104 <_start@@Base+0x1adc>
   16154:	mov	r3, #4
   16158:	ldr	r2, [pc, #16]	; 16170 <_start@@Base+0x1b48>
   1615c:	mov	r0, r5
   16160:	bl	32934 <flatcc_json_printer_enum_flag@@Base>
   16164:	b	1610c <_start@@Base+0x1ae4>
   16168:	andeq	sp, r3, r8, lsr #25
   1616c:	andeq	sp, r3, ip, lsr #25
   16170:			; <UNDEFINED> instruction: 0x0003dcb4
   16174:	push	{r4, r5, r6, lr}
   16178:	sub	sp, sp, #16
   1617c:	mov	r5, r0
   16180:	mov	r4, r1
   16184:	mov	r6, #1
   16188:	str	r6, [sp, #4]
   1618c:	ldr	r3, [pc, #204]	; 16260 <_start@@Base+0x1c38>
   16190:	str	r3, [sp]
   16194:	mov	r3, #0
   16198:	mov	r2, r1
   1619c:	mov	r1, r3
   161a0:	bl	36318 <flatcc_json_printer_float_struct_field@@Base>
   161a4:	str	r6, [sp, #4]
   161a8:	ldr	r3, [pc, #180]	; 16264 <_start@@Base+0x1c3c>
   161ac:	str	r3, [sp]
   161b0:	mov	r3, #4
   161b4:	mov	r2, r4
   161b8:	mov	r1, r6
   161bc:	mov	r0, r5
   161c0:	bl	36318 <flatcc_json_printer_float_struct_field@@Base>
   161c4:	str	r6, [sp, #4]
   161c8:	ldr	r3, [pc, #152]	; 16268 <_start@@Base+0x1c40>
   161cc:	str	r3, [sp]
   161d0:	mov	r3, #8
   161d4:	mov	r2, r4
   161d8:	mov	r1, #2
   161dc:	mov	r0, r5
   161e0:	bl	36318 <flatcc_json_printer_float_struct_field@@Base>
   161e4:	mov	r6, #5
   161e8:	str	r6, [sp, #4]
   161ec:	ldr	r3, [pc, #120]	; 1626c <_start@@Base+0x1c44>
   161f0:	str	r3, [sp]
   161f4:	mov	r3, #16
   161f8:	mov	r2, r4
   161fc:	mov	r1, #3
   16200:	mov	r0, r5
   16204:	bl	3649c <flatcc_json_printer_double_struct_field@@Base>
   16208:	ldr	r3, [pc, #96]	; 16270 <_start@@Base+0x1c48>
   1620c:	str	r3, [sp, #8]
   16210:	str	r6, [sp, #4]
   16214:	ldr	r3, [pc, #88]	; 16274 <_start@@Base+0x1c4c>
   16218:	str	r3, [sp]
   1621c:	mov	r3, #24
   16220:	mov	r2, r4
   16224:	mov	r1, #4
   16228:	mov	r0, r5
   1622c:	bl	36c88 <flatcc_json_printer_int8_enum_struct_field@@Base>
   16230:	ldr	r3, [pc, #64]	; 16278 <_start@@Base+0x1c50>
   16234:	str	r3, [sp, #8]
   16238:	str	r6, [sp, #4]
   1623c:	ldr	r3, [pc, #56]	; 1627c <_start@@Base+0x1c54>
   16240:	str	r3, [sp]
   16244:	mov	r3, #26
   16248:	mov	r2, r4
   1624c:	mov	r1, r6
   16250:	mov	r0, r5
   16254:	bl	3c27c <flatcc_json_printer_embedded_struct_field@@Base>
   16258:	add	sp, sp, #16
   1625c:	pop	{r4, r5, r6, pc}
   16260:	andeq	sp, r3, r4, lsl #29
   16264:	andeq	sp, r3, ip, lsl #20
   16268:			; <UNDEFINED> instruction: 0x0003dcbc
   1626c:	andeq	sp, r3, r0, asr #25
   16270:	andeq	r6, r1, r8, lsr #1
   16274:	andeq	sp, r3, r8, asr #25
   16278:	andeq	r5, r1, r4, ror fp
   1627c:	ldrdeq	sp, [r3], -r0
   16280:	push	{r4, r5, r6, r7, r8, r9, lr}
   16284:	sub	sp, sp, #12
   16288:	mov	r8, r0
   1628c:	mov	r4, r1
   16290:	mov	r9, r2
   16294:	mov	r5, r3
   16298:	mov	r1, r2
   1629c:	mov	r0, r4
   162a0:	bl	14750 <_start@@Base+0x128>
   162a4:	add	r3, pc, #772	; 0x304
   162a8:	ldrd	r2, [r3]
   162ac:	cmp	r1, r3
   162b0:	cmpeq	r0, r2
   162b4:	bhi	163f8 <_start@@Base+0x1dd0>
   162b8:	add	r3, pc, #760	; 0x2f8
   162bc:	ldrd	r2, [r3]
   162c0:	cmp	r1, r3
   162c4:	cmpeq	r0, r2
   162c8:	bhi	16338 <_start@@Base+0x1d10>
   162cc:	and	r0, r0, #-16777216	; 0xff000000
   162d0:	add	r3, pc, #744	; 0x2e8
   162d4:	ldrd	r2, [r3]
   162d8:	cmp	r1, r3
   162dc:	cmpeq	r0, r2
   162e0:	beq	162f0 <_start@@Base+0x1cc8>
   162e4:	mov	r0, r4
   162e8:	add	sp, sp, #12
   162ec:	pop	{r4, r5, r6, r7, r8, r9, pc}
   162f0:	ldr	r3, [sp, #44]	; 0x2c
   162f4:	str	r3, [sp]
   162f8:	mov	r3, #5
   162fc:	mov	r2, r9
   16300:	mov	r1, r4
   16304:	mov	r0, r8
   16308:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   1630c:	cmp	r4, r0
   16310:	moveq	r4, r0
   16314:	beq	162e4 <_start@@Base+0x1cbc>
   16318:	mov	r2, #9
   1631c:	mov	r3, #0
   16320:	ldr	r1, [sp, #40]	; 0x28
   16324:	strd	r2, [r1]
   16328:	mov	r3, #0
   1632c:	str	r3, [r5]
   16330:	mov	r4, r0
   16334:	b	162e4 <_start@@Base+0x1cbc>
   16338:	and	r6, r0, #-16777216	; 0xff000000
   1633c:	add	r3, pc, #644	; 0x284
   16340:	ldrd	r2, [r3]
   16344:	cmp	r1, r3
   16348:	cmpeq	r6, r2
   1634c:	beq	163b0 <_start@@Base+0x1d88>
   16350:	bic	r0, r0, #255	; 0xff
   16354:	add	r3, pc, #628	; 0x274
   16358:	ldrd	r2, [r3]
   1635c:	cmp	r1, r3
   16360:	cmpeq	r0, r2
   16364:	bne	162e4 <_start@@Base+0x1cbc>
   16368:	ldr	r3, [sp, #44]	; 0x2c
   1636c:	str	r3, [sp]
   16370:	mov	r3, #7
   16374:	mov	r2, r9
   16378:	mov	r1, r4
   1637c:	mov	r0, r8
   16380:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   16384:	cmp	r4, r0
   16388:	moveq	r4, r0
   1638c:	beq	162e4 <_start@@Base+0x1cbc>
   16390:	mov	r2, #10
   16394:	mov	r3, #0
   16398:	ldr	r1, [sp, #40]	; 0x28
   1639c:	strd	r2, [r1]
   163a0:	mov	r3, #0
   163a4:	str	r3, [r5]
   163a8:	mov	r4, r0
   163ac:	b	162e4 <_start@@Base+0x1cbc>
   163b0:	ldr	r3, [sp, #44]	; 0x2c
   163b4:	str	r3, [sp]
   163b8:	mov	r3, #5
   163bc:	mov	r2, r9
   163c0:	mov	r1, r4
   163c4:	mov	r0, r8
   163c8:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   163cc:	cmp	r4, r0
   163d0:	moveq	r4, r0
   163d4:	beq	162e4 <_start@@Base+0x1cbc>
   163d8:	mov	r2, #2
   163dc:	mov	r3, #0
   163e0:	ldr	r1, [sp, #40]	; 0x28
   163e4:	strd	r2, [r1]
   163e8:	mov	r3, #0
   163ec:	str	r3, [r5]
   163f0:	mov	r4, r0
   163f4:	b	162e4 <_start@@Base+0x1cbc>
   163f8:	add	r3, pc, #472	; 0x1d8
   163fc:	ldrd	r2, [r3]
   16400:	cmp	r1, r3
   16404:	cmpeq	r0, r2
   16408:	bhi	1646c <_start@@Base+0x1e44>
   1640c:	mov	r0, #0
   16410:	add	r3, pc, #456	; 0x1c8
   16414:	ldrd	r2, [r3]
   16418:	cmp	r1, r3
   1641c:	cmpeq	r0, r2
   16420:	bne	162e4 <_start@@Base+0x1cbc>
   16424:	ldr	r3, [sp, #44]	; 0x2c
   16428:	str	r3, [sp]
   1642c:	mov	r3, #4
   16430:	mov	r2, r9
   16434:	mov	r1, r4
   16438:	mov	r0, r8
   1643c:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   16440:	cmp	r4, r0
   16444:	moveq	r4, r0
   16448:	beq	162e4 <_start@@Base+0x1cbc>
   1644c:	mov	r2, #0
   16450:	mov	r3, #0
   16454:	ldr	r1, [sp, #40]	; 0x28
   16458:	strd	r2, [r1]
   1645c:	mov	r3, #0
   16460:	str	r3, [r5]
   16464:	mov	r4, r0
   16468:	b	162e4 <_start@@Base+0x1cbc>
   1646c:	add	r3, pc, #372	; 0x174
   16470:	ldrd	r2, [r3]
   16474:	cmp	r1, r3
   16478:	cmpeq	r0, r2
   1647c:	bhi	164e0 <_start@@Base+0x1eb8>
   16480:	and	r0, r0, #-16777216	; 0xff000000
   16484:	add	r3, pc, #356	; 0x164
   16488:	ldrd	r2, [r3]
   1648c:	cmp	r1, r3
   16490:	cmpeq	r0, r2
   16494:	bne	162e4 <_start@@Base+0x1cbc>
   16498:	ldr	r3, [sp, #44]	; 0x2c
   1649c:	str	r3, [sp]
   164a0:	mov	r3, #5
   164a4:	mov	r2, r9
   164a8:	mov	r1, r4
   164ac:	mov	r0, r8
   164b0:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   164b4:	cmp	r4, r0
   164b8:	moveq	r4, r0
   164bc:	beq	162e4 <_start@@Base+0x1cbc>
   164c0:	mov	r2, #11
   164c4:	mov	r3, #0
   164c8:	ldr	r1, [sp, #40]	; 0x28
   164cc:	strd	r2, [r1]
   164d0:	mov	r3, #0
   164d4:	str	r3, [r5]
   164d8:	mov	r4, r0
   164dc:	b	162e4 <_start@@Base+0x1cbc>
   164e0:	ldr	r2, [pc, #288]	; 16608 <_start@@Base+0x1fe0>
   164e4:	mvn	r3, #0
   164e8:	and	r2, r2, r0
   164ec:	and	r3, r3, r1
   164f0:	add	r7, pc, #256	; 0x100
   164f4:	ldrd	r6, [r7]
   164f8:	cmp	r3, r7
   164fc:	cmpeq	r2, r6
   16500:	beq	1655c <_start@@Base+0x1f34>
   16504:	add	r3, pc, #244	; 0xf4
   16508:	ldrd	r2, [r3]
   1650c:	cmp	r1, r3
   16510:	cmpeq	r0, r2
   16514:	bne	162e4 <_start@@Base+0x1cbc>
   16518:	ldr	r3, [sp, #44]	; 0x2c
   1651c:	str	r3, [sp]
   16520:	mov	r3, #8
   16524:	mov	r2, r9
   16528:	mov	r1, r4
   1652c:	mov	r0, r8
   16530:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   16534:	cmp	r4, r0
   16538:	beq	165a4 <_start@@Base+0x1f7c>
   1653c:	mov	r2, #8
   16540:	mov	r3, #0
   16544:	ldr	r1, [sp, #40]	; 0x28
   16548:	strd	r2, [r1]
   1654c:	mov	r3, #0
   16550:	str	r3, [r5]
   16554:	mov	r4, r0
   16558:	b	162e4 <_start@@Base+0x1cbc>
   1655c:	ldr	r3, [sp, #44]	; 0x2c
   16560:	str	r3, [sp]
   16564:	mov	r3, #6
   16568:	mov	r2, r9
   1656c:	mov	r1, r4
   16570:	mov	r0, r8
   16574:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   16578:	cmp	r4, r0
   1657c:	moveq	r4, r0
   16580:	beq	162e4 <_start@@Base+0x1cbc>
   16584:	mov	r2, #255	; 0xff
   16588:	mov	r3, #0
   1658c:	ldr	r1, [sp, #40]	; 0x28
   16590:	strd	r2, [r1]
   16594:	mov	r3, #0
   16598:	str	r3, [r5]
   1659c:	mov	r4, r0
   165a0:	b	162e4 <_start@@Base+0x1cbc>
   165a4:	mov	r4, r0
   165a8:	b	162e4 <_start@@Base+0x1cbc>
   165ac:	nop			; (mov r0, r0)
   165b0:			; <UNDEFINED> instruction: 0xffffffff
   165b4:	cdpmi	14, 4, cr4, cr15, cr4, {2}
   165b8:			; <UNDEFINED> instruction: 0x46616dff
   165bc:	rsbmi	r6, pc, #428	; 0x1ac
   165c0:	strvs	r0, [r0, #-0]
   165c4:	rsbmi	r6, r5, #108, 24	; 0x6c00
   165c8:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   165cc:	ldclmi	12, cr4, [r5, #-388]!	; 0xfffffe7c
   165d0:	strbtmi	r6, [r1], -r0, lsl #28
   165d4:	rsbmi	r6, pc, #428	; 0x1ac
   165d8:	ldrshvc	pc, [pc, #255]	; 166df <_start@@Base+0x20b7>	; <UNPREDICTABLE>
   165dc:	svcmi	0x00746865
   165e0:	andeq	r0, r0, r0
   165e4:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   165e8:	cdpvs	5, 7, cr6, cr10, cr11, {3}
   165ec:	rsbpl	r7, r1, #117	; 0x75
   165f0:	andvc	r0, r0, #0
   165f4:	svcmi	0x00746865
   165f8:	strbvs	r0, [r4, #-0]!
   165fc:	strbpl	r7, [lr, #-1395]!	; 0xfffffa8d
   16600:	cdpvs	5, 7, cr6, cr10, cr12, {3}
   16604:	rsbpl	r7, r1, #117	; 0x75
   16608:			; <UNDEFINED> instruction: 0xffff0000
   1660c:	push	{r4, r5, r6, r7, r8, lr}
   16610:	sub	sp, sp, #8
   16614:	mov	r6, r0
   16618:	mov	r4, r1
   1661c:	mov	r5, r2
   16620:	mov	r7, r3
   16624:	mov	r1, r2
   16628:	mov	r0, r4
   1662c:	bl	14750 <_start@@Base+0x128>
   16630:	add	r3, pc, #136	; 0x88
   16634:	ldrd	r2, [r3]
   16638:	cmp	r1, r3
   1663c:	cmpeq	r0, r2
   16640:	beq	16650 <_start@@Base+0x2028>
   16644:	mov	r0, r4
   16648:	add	sp, sp, #8
   1664c:	pop	{r4, r5, r6, r7, r8, pc}
   16650:	add	r8, r4, #8
   16654:	mov	r1, r5
   16658:	mov	r0, r8
   1665c:	bl	14750 <_start@@Base+0x128>
   16660:	mov	r0, #0
   16664:	and	r1, r1, #-16777216	; 0xff000000
   16668:	cmp	r1, #1912602624	; 0x72000000
   1666c:	cmpeq	r0, #0
   16670:	bne	16644 <_start@@Base+0x201c>
   16674:	sub	r3, r5, r8
   16678:	cmp	r3, #1
   1667c:	ble	16644 <_start@@Base+0x201c>
   16680:	ldrb	r3, [r4, #9]
   16684:	cmp	r3, #46	; 0x2e
   16688:	bne	16644 <_start@@Base+0x201c>
   1668c:	add	r1, r4, #10
   16690:	cmp	r8, r1
   16694:	beq	16644 <_start@@Base+0x201c>
   16698:	ldr	r3, [sp, #36]	; 0x24
   1669c:	str	r3, [sp, #4]
   166a0:	ldr	r3, [sp, #32]
   166a4:	str	r3, [sp]
   166a8:	mov	r3, r7
   166ac:	mov	r2, r5
   166b0:	mov	r0, r6
   166b4:	bl	16280 <_start@@Base+0x1c58>
   166b8:	mov	r4, r0
   166bc:	b	16644 <_start@@Base+0x201c>
   166c0:	cmnvs	r3, r5, ror #8
   166c4:	cmnmi	r8, #-2147483620	; 0x8000001c
   166c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   166cc:	sub	sp, sp, #8
   166d0:	mov	r8, r0
   166d4:	mov	r6, r1
   166d8:	mov	r7, r2
   166dc:	mov	r9, r3
   166e0:	mov	r1, r2
   166e4:	mov	r0, r6
   166e8:	bl	14750 <_start@@Base+0x128>
   166ec:	mov	r5, r1
   166f0:	add	r3, pc, #584	; 0x248
   166f4:	ldrd	r2, [r3]
   166f8:	cmp	r1, r3
   166fc:	cmpeq	r0, r2
   16700:	bhi	16774 <_start@@Base+0x214c>
   16704:	mov	r4, #0
   16708:	bic	r5, r1, #255	; 0xff
   1670c:	add	r3, pc, #564	; 0x234
   16710:	ldrd	r2, [r3]
   16714:	cmp	r5, r3
   16718:	cmpeq	r4, r2
   1671c:	beq	1672c <_start@@Base+0x2104>
   16720:	mov	r0, r6
   16724:	add	sp, sp, #8
   16728:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1672c:	ldr	r3, [sp, #44]	; 0x2c
   16730:	str	r3, [sp]
   16734:	mov	r3, #3
   16738:	mov	r2, r7
   1673c:	mov	r1, r6
   16740:	mov	r0, r8
   16744:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   16748:	cmp	r6, r0
   1674c:	moveq	r6, r0
   16750:	beq	16720 <_start@@Base+0x20f8>
   16754:	mov	r2, #4
   16758:	mov	r3, #0
   1675c:	ldr	r1, [sp, #40]	; 0x28
   16760:	strd	r2, [r1]
   16764:	mov	r3, #0
   16768:	str	r3, [r9]
   1676c:	mov	r6, r0
   16770:	b	16720 <_start@@Base+0x20f8>
   16774:	mov	r4, r0
   16778:	add	r3, pc, #464	; 0x1d0
   1677c:	ldrd	r2, [r3]
   16780:	cmp	r1, r3
   16784:	cmpeq	r0, r2
   16788:	beq	16860 <_start@@Base+0x2238>
   1678c:	bic	r0, r0, #255	; 0xff
   16790:	add	r3, pc, #448	; 0x1c0
   16794:	ldrd	r2, [r3]
   16798:	cmp	r1, r3
   1679c:	cmpeq	r0, r2
   167a0:	movne	sl, r6
   167a4:	beq	168a8 <_start@@Base+0x2280>
   167a8:	mov	r0, #0
   167ac:	add	r3, pc, #428	; 0x1ac
   167b0:	ldrd	r2, [r3]
   167b4:	cmp	r5, r3
   167b8:	cmpeq	r0, r2
   167bc:	beq	168f0 <_start@@Base+0x22c8>
   167c0:	add	r3, pc, #416	; 0x1a0
   167c4:	ldrd	r2, [r3]
   167c8:	cmp	r5, r3
   167cc:	cmpeq	r4, r2
   167d0:	bne	16720 <_start@@Base+0x20f8>
   167d4:	mov	r1, r7
   167d8:	add	r0, sl, #8
   167dc:	bl	14750 <_start@@Base+0x128>
   167e0:	add	r3, pc, #392	; 0x188
   167e4:	ldrd	r2, [r3]
   167e8:	cmp	r1, r3
   167ec:	cmpeq	r0, r2
   167f0:	bne	16720 <_start@@Base+0x20f8>
   167f4:	add	sl, sl, #16
   167f8:	mov	r1, r7
   167fc:	mov	r0, sl
   16800:	bl	14750 <_start@@Base+0x128>
   16804:	bic	r0, r0, #255	; 0xff
   16808:	add	r3, pc, #360	; 0x168
   1680c:	ldrd	r2, [r3]
   16810:	cmp	r1, r3
   16814:	cmpeq	r0, r2
   16818:	bne	16720 <_start@@Base+0x20f8>
   1681c:	ldr	r3, [sp, #44]	; 0x2c
   16820:	str	r3, [sp]
   16824:	mov	r3, #7
   16828:	mov	r2, r7
   1682c:	mov	r1, sl
   16830:	mov	r0, r8
   16834:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   16838:	cmp	sl, r0
   1683c:	beq	16720 <_start@@Base+0x20f8>
   16840:	mov	r2, #2
   16844:	mov	r3, #0
   16848:	ldr	r1, [sp, #40]	; 0x28
   1684c:	strd	r2, [r1]
   16850:	mov	r3, #0
   16854:	str	r3, [r9]
   16858:	mov	r6, r0
   1685c:	b	16720 <_start@@Base+0x20f8>
   16860:	ldr	r3, [sp, #44]	; 0x2c
   16864:	str	r3, [sp]
   16868:	mov	r3, #8
   1686c:	mov	r2, r7
   16870:	mov	r1, r6
   16874:	mov	r0, r8
   16878:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   1687c:	cmp	r6, r0
   16880:	moveq	r6, r0
   16884:	beq	16720 <_start@@Base+0x20f8>
   16888:	mov	r2, #3
   1688c:	mov	r3, #0
   16890:	ldr	r1, [sp, #40]	; 0x28
   16894:	strd	r2, [r1]
   16898:	mov	r3, #0
   1689c:	str	r3, [r9]
   168a0:	mov	r6, r0
   168a4:	b	16720 <_start@@Base+0x20f8>
   168a8:	ldr	r3, [sp, #44]	; 0x2c
   168ac:	str	r3, [sp]
   168b0:	mov	r3, #7
   168b4:	mov	r2, r7
   168b8:	mov	r1, r6
   168bc:	mov	r0, r8
   168c0:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   168c4:	mov	sl, r0
   168c8:	cmp	r6, r0
   168cc:	beq	167a8 <_start@@Base+0x2180>
   168d0:	mov	r2, #1
   168d4:	mov	r3, #0
   168d8:	ldr	r1, [sp, #40]	; 0x28
   168dc:	strd	r2, [r1]
   168e0:	mov	r3, #0
   168e4:	str	r3, [r9]
   168e8:	mov	r6, r0
   168ec:	b	16720 <_start@@Base+0x20f8>
   168f0:	ldr	r3, [sp, #44]	; 0x2c
   168f4:	str	r3, [sp]
   168f8:	mov	r3, #4
   168fc:	mov	r2, r7
   16900:	mov	r1, sl
   16904:	mov	r0, r8
   16908:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   1690c:	cmp	sl, r0
   16910:	beq	16934 <_start@@Base+0x230c>
   16914:	mov	r2, #0
   16918:	mov	r3, #0
   1691c:	ldr	r1, [sp, #40]	; 0x28
   16920:	strd	r2, [r1]
   16924:	mov	r3, #0
   16928:	str	r3, [r9]
   1692c:	mov	r6, r0
   16930:	b	16720 <_start@@Base+0x20f8>
   16934:	mov	sl, r0
   16938:	b	167c0 <_start@@Base+0x2198>
   1693c:	nop			; (mov r0, r0)
   16940:	strbtvc	r7, [r5], #-511	; 0xfffffe01
   16944:	stclmi	14, cr6, [pc, #-460]!	; 16780 <_start@@Base+0x2158>
   16948:	andeq	r0, r0, r0
   1694c:	cmnmi	ip, r0, lsl #8
   16950:	strbtvc	r7, [r5], #-562	; 0xfffffdce
   16954:	stclmi	14, cr6, [pc, #-460]!	; 16790 <_start@@Base+0x2168>
   16958:	strbtvc	r7, [r5], #-512	; 0xfffffe00
   1695c:	stclmi	14, cr6, [pc, #-460]!	; 16798 <_start@@Base+0x2170>
   16960:	andeq	r0, r0, r0
   16964:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16968:	cmnpl	r9, #112, 26	; 0x1c00
   1696c:	strbtpl	r7, [r5], #-884	; 0xfffffc8c
   16970:	rsbvs	r6, ip, #364904448	; 0x15c00000
   16974:	cfstrdvs	mvd5, [r5], #-388	; 0xfffffe7c
   16978:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   1697c:	ldmdbvs	r4!, {r0, r2, r6, fp, sp, lr}^
   16980:	push	{r4, r5, r6, r7, r8, lr}
   16984:	sub	sp, sp, #8
   16988:	mov	r6, r0
   1698c:	mov	r4, r1
   16990:	mov	r5, r2
   16994:	mov	r7, r3
   16998:	mov	r1, r2
   1699c:	mov	r0, r4
   169a0:	bl	14750 <_start@@Base+0x128>
   169a4:	add	r3, pc, #260	; 0x104
   169a8:	ldrd	r2, [r3]
   169ac:	cmp	r1, r3
   169b0:	cmpeq	r0, r2
   169b4:	beq	169dc <_start@@Base+0x23b4>
   169b8:	mov	r0, #0
   169bc:	add	r3, pc, #244	; 0xf4
   169c0:	ldrd	r2, [r3]
   169c4:	cmp	r1, r3
   169c8:	cmpeq	r0, r2
   169cc:	beq	16a64 <_start@@Base+0x243c>
   169d0:	mov	r0, r4
   169d4:	add	sp, sp, #8
   169d8:	pop	{r4, r5, r6, r7, r8, pc}
   169dc:	mov	r1, r5
   169e0:	add	r0, r4, #8
   169e4:	bl	14750 <_start@@Base+0x128>
   169e8:	add	r3, pc, #208	; 0xd0
   169ec:	ldrd	r2, [r3]
   169f0:	cmp	r1, r3
   169f4:	cmpeq	r0, r2
   169f8:	bne	169d0 <_start@@Base+0x23a8>
   169fc:	add	r8, r4, #16
   16a00:	mov	r1, r5
   16a04:	mov	r0, r8
   16a08:	bl	14750 <_start@@Base+0x128>
   16a0c:	mov	r0, #0
   16a10:	and	r1, r1, #-16777216	; 0xff000000
   16a14:	cmp	r1, #1694498816	; 0x65000000
   16a18:	cmpeq	r0, #0
   16a1c:	bne	169d0 <_start@@Base+0x23a8>
   16a20:	ldr	r3, [sp, #36]	; 0x24
   16a24:	str	r3, [sp]
   16a28:	mov	r3, #1
   16a2c:	mov	r2, r5
   16a30:	mov	r1, r8
   16a34:	mov	r0, r6
   16a38:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   16a3c:	cmp	r8, r0
   16a40:	beq	169d0 <_start@@Base+0x23a8>
   16a44:	mov	r2, #1
   16a48:	mov	r3, #0
   16a4c:	ldr	r1, [sp, #32]
   16a50:	strd	r2, [r1]
   16a54:	mov	r3, #0
   16a58:	str	r3, [r7]
   16a5c:	mov	r4, r0
   16a60:	b	169d0 <_start@@Base+0x23a8>
   16a64:	ldr	r3, [sp, #36]	; 0x24
   16a68:	str	r3, [sp]
   16a6c:	mov	r3, #4
   16a70:	mov	r2, r5
   16a74:	mov	r1, r4
   16a78:	mov	r0, r6
   16a7c:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   16a80:	cmp	r4, r0
   16a84:	beq	16aa8 <_start@@Base+0x2480>
   16a88:	mov	r2, #0
   16a8c:	mov	r3, #0
   16a90:	ldr	r1, [sp, #32]
   16a94:	strd	r2, [r1]
   16a98:	mov	r3, #0
   16a9c:	str	r3, [r7]
   16aa0:	mov	r4, r0
   16aa4:	b	169d0 <_start@@Base+0x23a8>
   16aa8:	mov	r4, r0
   16aac:	b	169d0 <_start@@Base+0x23a8>
   16ab0:	rsbvc	r6, r5, #116, 28	; 0x740
   16ab4:	stmdbmi	lr!, {r0, r5, r6, ip, lr}^
   16ab8:	andeq	r0, r0, r0
   16abc:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16ac0:	cmnvc	r0, #-1073741800	; 0xc0000018
   16ac4:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   16ac8:	push	{r4, r5, r6, r7, r8, r9, lr}
   16acc:	sub	sp, sp, #12
   16ad0:	mov	r8, r0
   16ad4:	mov	r4, r1
   16ad8:	mov	r9, r2
   16adc:	mov	r5, r3
   16ae0:	mov	r1, r2
   16ae4:	mov	r0, r4
   16ae8:	bl	14750 <_start@@Base+0x128>
   16aec:	add	r3, pc, #332	; 0x14c
   16af0:	ldrd	r2, [r3]
   16af4:	cmp	r1, r3
   16af8:	cmpeq	r0, r2
   16afc:	bhi	16b6c <_start@@Base+0x2544>
   16b00:	mov	r0, #0
   16b04:	add	r3, pc, #316	; 0x13c
   16b08:	ldrd	r2, [r3]
   16b0c:	cmp	r1, r3
   16b10:	cmpeq	r0, r2
   16b14:	beq	16b24 <_start@@Base+0x24fc>
   16b18:	mov	r0, r4
   16b1c:	add	sp, sp, #12
   16b20:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16b24:	ldr	r3, [sp, #44]	; 0x2c
   16b28:	str	r3, [sp]
   16b2c:	mov	r3, #4
   16b30:	mov	r2, r9
   16b34:	mov	r1, r4
   16b38:	mov	r0, r8
   16b3c:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   16b40:	cmp	r4, r0
   16b44:	moveq	r4, r0
   16b48:	beq	16b18 <_start@@Base+0x24f0>
   16b4c:	mov	r2, #3
   16b50:	mov	r3, #0
   16b54:	ldr	r1, [sp, #40]	; 0x28
   16b58:	strd	r2, [r1]
   16b5c:	mov	r3, #0
   16b60:	str	r3, [r5]
   16b64:	mov	r4, r0
   16b68:	b	16b18 <_start@@Base+0x24f0>
   16b6c:	ldr	r2, [pc, #244]	; 16c68 <_start@@Base+0x2640>
   16b70:	mvn	r3, #0
   16b74:	and	r2, r2, r0
   16b78:	and	r3, r3, r1
   16b7c:	add	r7, pc, #204	; 0xcc
   16b80:	ldrd	r6, [r7]
   16b84:	cmp	r3, r7
   16b88:	cmpeq	r2, r6
   16b8c:	beq	16bec <_start@@Base+0x25c4>
   16b90:	mov	r0, #0
   16b94:	add	r3, pc, #188	; 0xbc
   16b98:	ldrd	r2, [r3]
   16b9c:	cmp	r1, r3
   16ba0:	cmpeq	r0, r2
   16ba4:	bne	16b18 <_start@@Base+0x24f0>
   16ba8:	ldr	r3, [sp, #44]	; 0x2c
   16bac:	str	r3, [sp]
   16bb0:	mov	r3, #4
   16bb4:	mov	r2, r9
   16bb8:	mov	r1, r4
   16bbc:	mov	r0, r8
   16bc0:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   16bc4:	cmp	r4, r0
   16bc8:	beq	16c34 <_start@@Base+0x260c>
   16bcc:	add	r3, pc, #140	; 0x8c
   16bd0:	ldrd	r2, [r3]
   16bd4:	ldr	r1, [sp, #40]	; 0x28
   16bd8:	strd	r2, [r1]
   16bdc:	mov	r3, #0
   16be0:	str	r3, [r5]
   16be4:	mov	r4, r0
   16be8:	b	16b18 <_start@@Base+0x24f0>
   16bec:	ldr	r3, [sp, #44]	; 0x2c
   16bf0:	str	r3, [sp]
   16bf4:	mov	r3, #6
   16bf8:	mov	r2, r9
   16bfc:	mov	r1, r4
   16c00:	mov	r0, r8
   16c04:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   16c08:	cmp	r4, r0
   16c0c:	moveq	r4, r0
   16c10:	beq	16b18 <_start@@Base+0x24f0>
   16c14:	mvn	r2, #1
   16c18:	mvn	r3, #0
   16c1c:	ldr	r1, [sp, #40]	; 0x28
   16c20:	strd	r2, [r1]
   16c24:	mov	r3, #1
   16c28:	str	r3, [r5]
   16c2c:	mov	r4, r0
   16c30:	b	16b18 <_start@@Base+0x24f0>
   16c34:	mov	r4, r0
   16c38:	b	16b18 <_start@@Base+0x24f0>
   16c3c:	nop			; (mov r0, r0)
   16c40:			; <UNDEFINED> instruction: 0xffffffff
   16c44:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   16c48:	andeq	r0, r0, r0
   16c4c:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   16c50:	strbvs	r0, [r7, #-0]!
   16c54:	stmdavs	r5!, {r1, r2, r3, r5, r6, fp, ip, sp, lr}^
   16c58:	andeq	r0, r0, r0
   16c5c:	stmdavs	r5!, {r1, r4, r5, fp, ip, sp, lr}^
   16c60:	cdpvc	14, 10, cr11, cr15, cr15, {5}
   16c64:	andeq	r0, r0, r0
   16c68:			; <UNDEFINED> instruction: 0xffff0000
   16c6c:	push	{r4, r5, r6, r7, r8, r9, lr}
   16c70:	sub	sp, sp, #12
   16c74:	mov	r8, r0
   16c78:	mov	r4, r1
   16c7c:	mov	r9, r2
   16c80:	mov	r5, r3
   16c84:	mov	r1, r2
   16c88:	mov	r0, r4
   16c8c:	bl	14750 <_start@@Base+0x128>
   16c90:	add	r3, pc, #448	; 0x1c0
   16c94:	ldrd	r2, [r3]
   16c98:	cmp	r1, r3
   16c9c:	cmpeq	r0, r2
   16ca0:	bhi	16d10 <_start@@Base+0x26e8>
   16ca4:	mov	r0, #0
   16ca8:	add	r3, pc, #432	; 0x1b0
   16cac:	ldrd	r2, [r3]
   16cb0:	cmp	r1, r3
   16cb4:	cmpeq	r0, r2
   16cb8:	beq	16cc8 <_start@@Base+0x26a0>
   16cbc:	mov	r0, r4
   16cc0:	add	sp, sp, #12
   16cc4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16cc8:	ldr	r3, [sp, #44]	; 0x2c
   16ccc:	str	r3, [sp]
   16cd0:	mov	r3, #4
   16cd4:	mov	r2, r9
   16cd8:	mov	r1, r4
   16cdc:	mov	r0, r8
   16ce0:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   16ce4:	cmp	r4, r0
   16ce8:	moveq	r4, r0
   16cec:	beq	16cbc <_start@@Base+0x2694>
   16cf0:	mov	r2, #2
   16cf4:	mov	r3, #0
   16cf8:	ldr	r1, [sp, #40]	; 0x28
   16cfc:	strd	r2, [r1]
   16d00:	mov	r3, #0
   16d04:	str	r3, [r5]
   16d08:	mov	r4, r0
   16d0c:	b	16cbc <_start@@Base+0x2694>
   16d10:	add	r3, pc, #336	; 0x150
   16d14:	ldrd	r2, [r3]
   16d18:	cmp	r1, r3
   16d1c:	cmpeq	r0, r2
   16d20:	bhi	16d84 <_start@@Base+0x275c>
   16d24:	mov	r0, #0
   16d28:	add	r3, pc, #320	; 0x140
   16d2c:	ldrd	r2, [r3]
   16d30:	cmp	r1, r3
   16d34:	cmpeq	r0, r2
   16d38:	bne	16cbc <_start@@Base+0x2694>
   16d3c:	ldr	r3, [sp, #44]	; 0x2c
   16d40:	str	r3, [sp]
   16d44:	mov	r3, #4
   16d48:	mov	r2, r9
   16d4c:	mov	r1, r4
   16d50:	mov	r0, r8
   16d54:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   16d58:	cmp	r4, r0
   16d5c:	moveq	r4, r0
   16d60:	beq	16cbc <_start@@Base+0x2694>
   16d64:	mov	r2, #42	; 0x2a
   16d68:	mov	r3, #0
   16d6c:	ldr	r1, [sp, #40]	; 0x28
   16d70:	strd	r2, [r1]
   16d74:	mov	r3, #0
   16d78:	str	r3, [r5]
   16d7c:	mov	r4, r0
   16d80:	b	16cbc <_start@@Base+0x2694>
   16d84:	bic	r6, r0, #255	; 0xff
   16d88:	add	r3, pc, #232	; 0xe8
   16d8c:	ldrd	r2, [r3]
   16d90:	cmp	r1, r3
   16d94:	cmpeq	r6, r2
   16d98:	beq	16e04 <_start@@Base+0x27dc>
   16d9c:	ldr	r2, [pc, #228]	; 16e88 <_start@@Base+0x2860>
   16da0:	mvn	r3, #0
   16da4:	and	r0, r0, r2
   16da8:	and	r1, r1, r3
   16dac:	add	r3, pc, #204	; 0xcc
   16db0:	ldrd	r2, [r3]
   16db4:	cmp	r1, r3
   16db8:	cmpeq	r0, r2
   16dbc:	bne	16cbc <_start@@Base+0x2694>
   16dc0:	ldr	r3, [sp, #44]	; 0x2c
   16dc4:	str	r3, [sp]
   16dc8:	mov	r3, #6
   16dcc:	mov	r2, r9
   16dd0:	mov	r1, r4
   16dd4:	mov	r0, r8
   16dd8:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   16ddc:	cmp	r4, r0
   16de0:	beq	16e4c <_start@@Base+0x2824>
   16de4:	mvn	r2, #1
   16de8:	mvn	r3, #0
   16dec:	ldr	r1, [sp, #40]	; 0x28
   16df0:	strd	r2, [r1]
   16df4:	mov	r3, #1
   16df8:	str	r3, [r5]
   16dfc:	mov	r4, r0
   16e00:	b	16cbc <_start@@Base+0x2694>
   16e04:	ldr	r3, [sp, #44]	; 0x2c
   16e08:	str	r3, [sp]
   16e0c:	mov	r3, #7
   16e10:	mov	r2, r9
   16e14:	mov	r1, r4
   16e18:	mov	r0, r8
   16e1c:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   16e20:	cmp	r4, r0
   16e24:	moveq	r4, r0
   16e28:	beq	16cbc <_start@@Base+0x2694>
   16e2c:	mvn	r2, #0
   16e30:	mvn	r3, #0
   16e34:	ldr	r1, [sp, #40]	; 0x28
   16e38:	strd	r2, [r1]
   16e3c:	mov	r3, #1
   16e40:	str	r3, [r5]
   16e44:	mov	r4, r0
   16e48:	b	16cbc <_start@@Base+0x2694>
   16e4c:	mov	r4, r0
   16e50:	b	16cbc <_start@@Base+0x2694>
   16e54:	nop			; (mov r0, r0)
   16e58:			; <UNDEFINED> instruction: 0xffffffff
   16e5c:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   16e60:	andeq	r0, r0, r0
   16e64:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   16e68:	strbvs	pc, [r6, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   16e6c:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16e70:	andeq	r0, r0, r0
   16e74:	stmdbvs	lr!, {r1, r4, r5, sl, ip, sp, lr}^
   16e78:	strbvs	r3, [r7, #-512]!	; 0xfffffe00
   16e7c:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16e80:	strbvs	r0, [r7, #-0]!
   16e84:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16e88:			; <UNDEFINED> instruction: 0xffff0000
   16e8c:	push	{r4, r5, r6, r7, lr}
   16e90:	sub	sp, sp, #12
   16e94:	mov	r6, r0
   16e98:	mov	r4, r1
   16e9c:	mov	r5, r2
   16ea0:	mov	r7, r3
   16ea4:	mov	r1, r2
   16ea8:	mov	r0, r4
   16eac:	bl	14750 <_start@@Base+0x128>
   16eb0:	add	r3, pc, #312	; 0x138
   16eb4:	ldrd	r2, [r3]
   16eb8:	cmp	r1, r3
   16ebc:	cmpeq	r0, r2
   16ec0:	bhi	16f30 <_start@@Base+0x2908>
   16ec4:	mov	r0, #0
   16ec8:	add	r3, pc, #296	; 0x128
   16ecc:	ldrd	r2, [r3]
   16ed0:	cmp	r1, r3
   16ed4:	cmpeq	r0, r2
   16ed8:	beq	16ee8 <_start@@Base+0x28c0>
   16edc:	mov	r0, r4
   16ee0:	add	sp, sp, #12
   16ee4:	pop	{r4, r5, r6, r7, pc}
   16ee8:	ldr	r3, [sp, #36]	; 0x24
   16eec:	str	r3, [sp]
   16ef0:	mov	r3, #4
   16ef4:	mov	r2, r5
   16ef8:	mov	r1, r4
   16efc:	mov	r0, r6
   16f00:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   16f04:	cmp	r4, r0
   16f08:	moveq	r4, r0
   16f0c:	beq	16edc <_start@@Base+0x28b4>
   16f10:	mvn	r2, #11
   16f14:	mvn	r3, #0
   16f18:	ldr	r1, [sp, #32]
   16f1c:	strd	r2, [r1]
   16f20:	mov	r3, #1
   16f24:	str	r3, [r7]
   16f28:	mov	r4, r0
   16f2c:	b	16edc <_start@@Base+0x28b4>
   16f30:	mov	r0, #0
   16f34:	add	r3, pc, #196	; 0xc4
   16f38:	ldrd	r2, [r3]
   16f3c:	cmp	r1, r3
   16f40:	cmpeq	r0, r2
   16f44:	beq	16fa0 <_start@@Base+0x2978>
   16f48:	add	r3, pc, #184	; 0xb8
   16f4c:	ldrd	r2, [r3]
   16f50:	cmp	r1, r3
   16f54:	cmpeq	r0, r2
   16f58:	bne	16edc <_start@@Base+0x28b4>
   16f5c:	ldr	r3, [sp, #36]	; 0x24
   16f60:	str	r3, [sp]
   16f64:	mov	r3, #4
   16f68:	mov	r2, r5
   16f6c:	mov	r1, r4
   16f70:	mov	r0, r6
   16f74:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   16f78:	cmp	r4, r0
   16f7c:	beq	16fe8 <_start@@Base+0x29c0>
   16f80:	mvn	r2, #10
   16f84:	mvn	r3, #0
   16f88:	ldr	r1, [sp, #32]
   16f8c:	strd	r2, [r1]
   16f90:	mov	r3, #1
   16f94:	str	r3, [r7]
   16f98:	mov	r4, r0
   16f9c:	b	16edc <_start@@Base+0x28b4>
   16fa0:	ldr	r3, [sp, #36]	; 0x24
   16fa4:	str	r3, [sp]
   16fa8:	mov	r3, #4
   16fac:	mov	r2, r5
   16fb0:	mov	r1, r4
   16fb4:	mov	r0, r6
   16fb8:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   16fbc:	cmp	r4, r0
   16fc0:	moveq	r4, r0
   16fc4:	beq	16edc <_start@@Base+0x28b4>
   16fc8:	mvn	r2, #9
   16fcc:	mvn	r3, #0
   16fd0:	ldr	r1, [sp, #32]
   16fd4:	strd	r2, [r1]
   16fd8:	mov	r3, #1
   16fdc:	str	r3, [r7]
   16fe0:	mov	r4, r0
   16fe4:	b	16edc <_start@@Base+0x28b4>
   16fe8:	mov	r4, r0
   16fec:	b	16edc <_start@@Base+0x28b4>
   16ff0:			; <UNDEFINED> instruction: 0xffffffff
   16ff4:	mcrvs	7, 3, r6, cr5, cr1, {1}
   16ff8:	andeq	r0, r0, r0
   16ffc:	mcrvs	7, 3, r6, cr5, cr1, {1}
   17000:	andeq	r0, r0, r0
   17004:	mcrvs	7, 3, r6, cr5, cr3, {1}
   17008:	andeq	r0, r0, r0
   1700c:	mcrvs	7, 3, r6, cr5, cr2, {1}
   17010:	push	{r4, r5, r6, r7, r8, r9, lr}
   17014:	sub	sp, sp, #12
   17018:	mov	r8, r0
   1701c:	mov	r4, r1
   17020:	mov	r9, r2
   17024:	mov	r5, r3
   17028:	mov	r1, r2
   1702c:	mov	r0, r4
   17030:	bl	14750 <_start@@Base+0x128>
   17034:	add	r3, pc, #324	; 0x144
   17038:	ldrd	r2, [r3]
   1703c:	cmp	r1, r3
   17040:	cmpeq	r0, r2
   17044:	bhi	170b4 <_start@@Base+0x2a8c>
   17048:	mov	r0, #0
   1704c:	add	r3, pc, #308	; 0x134
   17050:	ldrd	r2, [r3]
   17054:	cmp	r1, r3
   17058:	cmpeq	r0, r2
   1705c:	beq	1706c <_start@@Base+0x2a44>
   17060:	mov	r0, r4
   17064:	add	sp, sp, #12
   17068:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1706c:	ldr	r3, [sp, #44]	; 0x2c
   17070:	str	r3, [sp]
   17074:	mov	r3, #4
   17078:	mov	r2, r9
   1707c:	mov	r1, r4
   17080:	mov	r0, r8
   17084:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   17088:	cmp	r4, r0
   1708c:	moveq	r4, r0
   17090:	beq	17060 <_start@@Base+0x2a38>
   17094:	mov	r2, #8
   17098:	mov	r3, #0
   1709c:	ldr	r1, [sp, #40]	; 0x28
   170a0:	strd	r2, [r1]
   170a4:	mov	r3, #0
   170a8:	str	r3, [r5]
   170ac:	mov	r4, r0
   170b0:	b	17060 <_start@@Base+0x2a38>
   170b4:	mov	r6, #0
   170b8:	bic	r7, r1, #255	; 0xff
   170bc:	add	r3, pc, #204	; 0xcc
   170c0:	ldrd	r2, [r3]
   170c4:	cmp	r7, r3
   170c8:	cmpeq	r6, r2
   170cc:	beq	1712c <_start@@Base+0x2b04>
   170d0:	and	r0, r0, #-16777216	; 0xff000000
   170d4:	add	r3, pc, #188	; 0xbc
   170d8:	ldrd	r2, [r3]
   170dc:	cmp	r1, r3
   170e0:	cmpeq	r0, r2
   170e4:	bne	17060 <_start@@Base+0x2a38>
   170e8:	ldr	r3, [sp, #44]	; 0x2c
   170ec:	str	r3, [sp]
   170f0:	mov	r3, #5
   170f4:	mov	r2, r9
   170f8:	mov	r1, r4
   170fc:	mov	r0, r8
   17100:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   17104:	cmp	r4, r0
   17108:	beq	17174 <_start@@Base+0x2b4c>
   1710c:	mov	r2, #2
   17110:	mov	r3, #0
   17114:	ldr	r1, [sp, #40]	; 0x28
   17118:	strd	r2, [r1]
   1711c:	mov	r3, #0
   17120:	str	r3, [r5]
   17124:	mov	r4, r0
   17128:	b	17060 <_start@@Base+0x2a38>
   1712c:	ldr	r3, [sp, #44]	; 0x2c
   17130:	str	r3, [sp]
   17134:	mov	r3, #3
   17138:	mov	r2, r9
   1713c:	mov	r1, r4
   17140:	mov	r0, r8
   17144:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   17148:	cmp	r4, r0
   1714c:	moveq	r4, r0
   17150:	beq	17060 <_start@@Base+0x2a38>
   17154:	mov	r2, #1
   17158:	mov	r3, #0
   1715c:	ldr	r1, [sp, #40]	; 0x28
   17160:	strd	r2, [r1]
   17164:	mov	r3, #0
   17168:	str	r3, [r5]
   1716c:	mov	r4, r0
   17170:	b	17060 <_start@@Base+0x2a38>
   17174:	mov	r4, r0
   17178:	b	17060 <_start@@Base+0x2a38>
   1717c:	nop			; (mov r0, r0)
   17180:	ldclvs	15, cr15, [pc, #1020]!	; 17584 <_start@@Base+0x2f5c>
   17184:	ldrbmi	r6, [r2, -r5, ror #10]!
   17188:	andeq	r0, r0, r0
   1718c:	rsbmi	r7, ip, #423624704	; 0x19400000
   17190:	andeq	r0, r0, r0
   17194:	rsbpl	r6, r5, #0, 8
   17198:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   1719c:	ldrbmi	r6, [r2, -r5, ror #10]!
   171a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171a4:	sub	sp, sp, #12
   171a8:	mov	r7, r0
   171ac:	mov	r4, r1
   171b0:	mov	r5, r2
   171b4:	mov	r6, r3
   171b8:	mov	r1, r2
   171bc:	mov	r0, r4
   171c0:	bl	14750 <_start@@Base+0x128>
   171c4:	add	r3, pc, #924	; 0x39c
   171c8:	ldrd	r2, [r3]
   171cc:	cmp	r1, r3
   171d0:	cmpeq	r0, r2
   171d4:	bhi	17280 <_start@@Base+0x2c58>
   171d8:	add	r3, pc, #912	; 0x390
   171dc:	ldrd	r2, [r3]
   171e0:	cmp	r1, r3
   171e4:	cmpeq	r0, r2
   171e8:	beq	171f8 <_start@@Base+0x2bd0>
   171ec:	mov	r0, r4
   171f0:	add	sp, sp, #12
   171f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171f8:	mov	r1, r5
   171fc:	add	r0, r4, #8
   17200:	bl	14750 <_start@@Base+0x128>
   17204:	add	r3, pc, #876	; 0x36c
   17208:	ldrd	r2, [r3]
   1720c:	cmp	r1, r3
   17210:	cmpeq	r0, r2
   17214:	bne	171ec <_start@@Base+0x2bc4>
   17218:	add	r8, r4, #16
   1721c:	mov	r1, r5
   17220:	mov	r0, r8
   17224:	bl	14750 <_start@@Base+0x128>
   17228:	mov	r0, #0
   1722c:	and	r1, r1, #-16777216	; 0xff000000
   17230:	cmp	r1, #1912602624	; 0x72000000
   17234:	cmpeq	r0, #0
   17238:	bne	171ec <_start@@Base+0x2bc4>
   1723c:	sub	r8, r5, r8
   17240:	cmp	r8, #1
   17244:	ble	171ec <_start@@Base+0x2bc4>
   17248:	ldrb	r3, [r4, #17]
   1724c:	cmp	r3, #46	; 0x2e
   17250:	bne	171ec <_start@@Base+0x2bc4>
   17254:	ldr	r3, [sp, #52]	; 0x34
   17258:	str	r3, [sp, #4]
   1725c:	ldr	r3, [sp, #48]	; 0x30
   17260:	str	r3, [sp]
   17264:	mov	r3, r6
   17268:	mov	r2, r5
   1726c:	add	r1, r4, #18
   17270:	mov	r0, r7
   17274:	bl	16280 <_start@@Base+0x1c58>
   17278:	mov	r4, r0
   1727c:	b	171ec <_start@@Base+0x2bc4>
   17280:	add	r3, pc, #760	; 0x2f8
   17284:	ldrd	r2, [r3]
   17288:	cmp	r1, r3
   1728c:	cmpeq	r0, r2
   17290:	beq	17408 <_start@@Base+0x2de0>
   17294:	add	r3, pc, #748	; 0x2ec
   17298:	ldrd	r2, [r3]
   1729c:	cmp	r1, r3
   172a0:	cmpeq	r0, r2
   172a4:	bne	171ec <_start@@Base+0x2bc4>
   172a8:	mov	r1, r5
   172ac:	add	r0, r4, #8
   172b0:	bl	14750 <_start@@Base+0x128>
   172b4:	add	r3, pc, #724	; 0x2d4
   172b8:	ldrd	r2, [r3]
   172bc:	cmp	r1, r3
   172c0:	cmpeq	r0, r2
   172c4:	bne	171ec <_start@@Base+0x2bc4>
   172c8:	mov	r1, r5
   172cc:	add	r0, r4, #16
   172d0:	bl	14750 <_start@@Base+0x128>
   172d4:	add	r3, pc, #700	; 0x2bc
   172d8:	ldrd	r2, [r3]
   172dc:	cmp	r1, r3
   172e0:	cmpeq	r0, r2
   172e4:	bne	171ec <_start@@Base+0x2bc4>
   172e8:	mov	r1, r5
   172ec:	add	r0, r4, #24
   172f0:	bl	14750 <_start@@Base+0x128>
   172f4:	add	r3, pc, #676	; 0x2a4
   172f8:	ldrd	r2, [r3]
   172fc:	cmp	r1, r3
   17300:	cmpeq	r0, r2
   17304:	bne	171ec <_start@@Base+0x2bc4>
   17308:	add	r8, r4, #32
   1730c:	mov	r1, r5
   17310:	mov	r0, r8
   17314:	bl	14750 <_start@@Base+0x128>
   17318:	mov	r0, #0
   1731c:	and	r1, r1, #-16777216	; 0xff000000
   17320:	cmp	r1, #1694498816	; 0x65000000
   17324:	cmpeq	r0, #0
   17328:	bne	171ec <_start@@Base+0x2bc4>
   1732c:	sub	r8, r5, r8
   17330:	cmp	r8, #1
   17334:	ble	171ec <_start@@Base+0x2bc4>
   17338:	ldrb	r3, [r4, #33]	; 0x21
   1733c:	cmp	r3, #46	; 0x2e
   17340:	bne	171ec <_start@@Base+0x2bc4>
   17344:	add	r4, r4, #34	; 0x22
   17348:	mov	r1, r5
   1734c:	mov	r0, r4
   17350:	bl	14750 <_start@@Base+0x128>
   17354:	mov	r8, r0
   17358:	mov	r9, r1
   1735c:	mov	r0, #0
   17360:	bic	r1, r1, #255	; 0xff
   17364:	add	r3, pc, #572	; 0x23c
   17368:	ldrd	r2, [r3]
   1736c:	cmp	r1, r3
   17370:	cmpeq	r0, r2
   17374:	movne	r0, r4
   17378:	beq	178c0 <_start@@Base+0x3298>
   1737c:	add	r3, pc, #556	; 0x22c
   17380:	ldrd	r2, [r3]
   17384:	cmp	r9, r3
   17388:	cmpeq	r8, r2
   1738c:	bne	171ec <_start@@Base+0x2bc4>
   17390:	add	r8, r0, #8
   17394:	mov	r1, r5
   17398:	mov	r0, r8
   1739c:	bl	14750 <_start@@Base+0x128>
   173a0:	mov	r2, #0
   173a4:	ldr	r3, [pc, #564]	; 175e0 <_start@@Base+0x2fb8>
   173a8:	and	r2, r2, r0
   173ac:	and	r3, r3, r1
   173b0:	mov	r0, #0
   173b4:	ldr	r1, [pc, #552]	; 175e4 <_start@@Base+0x2fbc>
   173b8:	cmp	r3, r1
   173bc:	cmpeq	r2, r0
   173c0:	bne	171ec <_start@@Base+0x2bc4>
   173c4:	ldr	r3, [sp, #52]	; 0x34
   173c8:	str	r3, [sp]
   173cc:	mov	r3, #2
   173d0:	mov	r2, r5
   173d4:	mov	r1, r8
   173d8:	mov	r0, r7
   173dc:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   173e0:	cmp	r8, r0
   173e4:	beq	171ec <_start@@Base+0x2bc4>
   173e8:	mov	r2, #0
   173ec:	mov	r3, #0
   173f0:	ldr	r1, [sp, #48]	; 0x30
   173f4:	strd	r2, [r1]
   173f8:	mov	r3, #0
   173fc:	str	r3, [r6]
   17400:	mov	r4, r0
   17404:	b	171ec <_start@@Base+0x2bc4>
   17408:	mov	r1, r5
   1740c:	add	r0, r4, #8
   17410:	bl	14750 <_start@@Base+0x128>
   17414:	add	r3, pc, #412	; 0x19c
   17418:	ldrd	r2, [r3]
   1741c:	cmp	r1, r3
   17420:	cmpeq	r0, r2
   17424:	bhi	1765c <_start@@Base+0x3034>
   17428:	add	r3, pc, #400	; 0x190
   1742c:	ldrd	r2, [r3]
   17430:	cmp	r1, r3
   17434:	cmpeq	r0, r2
   17438:	bhi	174c8 <_start@@Base+0x2ea0>
   1743c:	add	r3, pc, #388	; 0x184
   17440:	ldrd	r2, [r3]
   17444:	cmp	r1, r3
   17448:	cmpeq	r0, r2
   1744c:	bne	171ec <_start@@Base+0x2bc4>
   17450:	add	r8, r4, #16
   17454:	mov	r1, r5
   17458:	mov	r0, r8
   1745c:	bl	14750 <_start@@Base+0x128>
   17460:	mov	r2, #0
   17464:	ldr	r3, [pc, #372]	; 175e0 <_start@@Base+0x2fb8>
   17468:	and	r2, r2, r0
   1746c:	and	r3, r3, r1
   17470:	mov	r0, #0
   17474:	ldr	r1, [pc, #364]	; 175e8 <_start@@Base+0x2fc0>
   17478:	cmp	r3, r1
   1747c:	cmpeq	r2, r0
   17480:	bne	171ec <_start@@Base+0x2bc4>
   17484:	sub	r8, r5, r8
   17488:	cmp	r8, #2
   1748c:	ble	171ec <_start@@Base+0x2bc4>
   17490:	ldrb	r3, [r4, #18]
   17494:	cmp	r3, #46	; 0x2e
   17498:	bne	171ec <_start@@Base+0x2bc4>
   1749c:	ldr	r3, [sp, #52]	; 0x34
   174a0:	str	r3, [sp, #4]
   174a4:	ldr	r3, [sp, #48]	; 0x30
   174a8:	str	r3, [sp]
   174ac:	mov	r3, r6
   174b0:	mov	r2, r5
   174b4:	add	r1, r4, #19
   174b8:	mov	r0, r7
   174bc:	bl	166c8 <_start@@Base+0x20a0>
   174c0:	mov	r4, r0
   174c4:	b	171ec <_start@@Base+0x2bc4>
   174c8:	add	r3, pc, #256	; 0x100
   174cc:	ldrd	r2, [r3]
   174d0:	cmp	r1, r3
   174d4:	cmpeq	r0, r2
   174d8:	beq	175f0 <_start@@Base+0x2fc8>
   174dc:	add	r3, pc, #244	; 0xf4
   174e0:	ldrd	r2, [r3]
   174e4:	cmp	r1, r3
   174e8:	cmpeq	r0, r2
   174ec:	bne	171ec <_start@@Base+0x2bc4>
   174f0:	add	r8, r4, #16
   174f4:	mov	r1, r5
   174f8:	mov	r0, r8
   174fc:	bl	14750 <_start@@Base+0x128>
   17500:	mov	r2, #0
   17504:	ldr	r3, [pc, #212]	; 175e0 <_start@@Base+0x2fb8>
   17508:	and	r2, r2, r0
   1750c:	and	r3, r3, r1
   17510:	mov	r0, #0
   17514:	ldr	r1, [pc, #208]	; 175ec <_start@@Base+0x2fc4>
   17518:	cmp	r3, r1
   1751c:	cmpeq	r2, r0
   17520:	bne	171ec <_start@@Base+0x2bc4>
   17524:	sub	r8, r5, r8
   17528:	cmp	r8, #2
   1752c:	ble	171ec <_start@@Base+0x2bc4>
   17530:	ldrb	r3, [r4, #18]
   17534:	cmp	r3, #46	; 0x2e
   17538:	bne	171ec <_start@@Base+0x2bc4>
   1753c:	ldr	r3, [sp, #52]	; 0x34
   17540:	str	r3, [sp, #4]
   17544:	ldr	r3, [sp, #48]	; 0x30
   17548:	str	r3, [sp]
   1754c:	mov	r3, r6
   17550:	mov	r2, r5
   17554:	add	r1, r4, #19
   17558:	mov	r0, r7
   1755c:	bl	16980 <_start@@Base+0x2358>
   17560:	mov	r4, r0
   17564:	b	171ec <_start@@Base+0x2bc4>
   17568:	stclvs	14, cr2, [r5, #-272]!	; 0xfffffef0
   1756c:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   17570:	cmnvs	r3, lr, lsr #18
   17574:			; <UNDEFINED> instruction: 0x46616e74
   17578:	cmnvs	r3, r5, ror #8
   1757c:	cmnmi	r8, #-2147483620	; 0x8000001c
   17580:	stclvs	14, cr2, [r5, #-276]!	; 0xfffffeec
   17584:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   17588:	stclvs	14, cr2, [r5, #-316]!	; 0xfffffec4
   1758c:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   17590:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   17594:	strbtvc	r6, [r8], #-1394	; 0xfffffa8e
   17598:	strvs	r4, [lr, #-1650]!	; 0xfffff98e
   1759c:	cmnpl	r0, #-1073741800	; 0xc0000018
   175a0:	cmnvs	ip, #100, 10	; 0x19000000
   175a4:	svcvs	0x006d496e
   175a8:	andeq	r0, r0, r0
   175ac:	strbtmi	r6, [pc], -r0, lsl #30
   175b0:	strbvc	r6, [r4, #-1366]!	; 0xfffffaaa
   175b4:	stmdbmi	lr!, {r2, r3, r5, r6, r8, r9, sp, lr}^
   175b8:	stclvs	14, cr2, [r5], #-412	; 0xfffffe64
   175bc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   175c0:	stclvs	14, cr2, [r5], #-264	; 0xfffffef8
   175c4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   175c8:	stclvs	14, cr2, [r5], #-260	; 0xfffffefc
   175cc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   175d0:	stclvs	14, cr2, [r5], #-268	; 0xfffffef4
   175d4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   175d8:	stclvs	14, cr2, [r5], #-280	; 0xfffffee8
   175dc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   175e0:			; <UNDEFINED> instruction: 0xffff0000
   175e4:	cmnvs	ip, r0
   175e8:	cdpvs	0, 7, cr0, cr9, cr0, {0}
   175ec:	svcvs	0x006f0000
   175f0:	add	r8, r4, #16
   175f4:	mov	r1, r5
   175f8:	mov	r0, r8
   175fc:	bl	14750 <_start@@Base+0x128>
   17600:	mov	r0, #0
   17604:	add	r3, pc, #764	; 0x2fc
   17608:	ldrd	r2, [r3]
   1760c:	cmp	r1, r3
   17610:	cmpeq	r0, r2
   17614:	bne	171ec <_start@@Base+0x2bc4>
   17618:	sub	r8, r5, r8
   1761c:	cmp	r8, #4
   17620:	ble	171ec <_start@@Base+0x2bc4>
   17624:	ldrb	r3, [r4, #20]
   17628:	cmp	r3, #46	; 0x2e
   1762c:	bne	171ec <_start@@Base+0x2bc4>
   17630:	ldr	r3, [sp, #52]	; 0x34
   17634:	str	r3, [sp, #4]
   17638:	ldr	r3, [sp, #48]	; 0x30
   1763c:	str	r3, [sp]
   17640:	mov	r3, r6
   17644:	mov	r2, r5
   17648:	add	r1, r4, #21
   1764c:	mov	r0, r7
   17650:	bl	17010 <_start@@Base+0x29e8>
   17654:	mov	r4, r0
   17658:	b	171ec <_start@@Base+0x2bc4>
   1765c:	add	r3, pc, #684	; 0x2ac
   17660:	ldrd	r2, [r3]
   17664:	cmp	r1, r3
   17668:	cmpeq	r0, r2
   1766c:	bhi	176e0 <_start@@Base+0x30b8>
   17670:	bne	171ec <_start@@Base+0x2bc4>
   17674:	add	r8, r4, #16
   17678:	mov	r1, r5
   1767c:	mov	r0, r8
   17680:	bl	14750 <_start@@Base+0x128>
   17684:	bic	r0, r0, #255	; 0xff
   17688:	add	r3, pc, #648	; 0x288
   1768c:	ldrd	r2, [r3]
   17690:	cmp	r1, r3
   17694:	cmpeq	r0, r2
   17698:	bne	171ec <_start@@Base+0x2bc4>
   1769c:	sub	r8, r5, r8
   176a0:	cmp	r8, #7
   176a4:	ble	171ec <_start@@Base+0x2bc4>
   176a8:	ldrb	r3, [r4, #23]
   176ac:	cmp	r3, #46	; 0x2e
   176b0:	bne	171ec <_start@@Base+0x2bc4>
   176b4:	ldr	r3, [sp, #52]	; 0x34
   176b8:	str	r3, [sp, #4]
   176bc:	ldr	r3, [sp, #48]	; 0x30
   176c0:	str	r3, [sp]
   176c4:	mov	r3, r6
   176c8:	mov	r2, r5
   176cc:	add	r1, r4, #24
   176d0:	mov	r0, r7
   176d4:	bl	16ac8 <_start@@Base+0x24a0>
   176d8:	mov	r4, r0
   176dc:	b	171ec <_start@@Base+0x2bc4>
   176e0:	add	r3, pc, #568	; 0x238
   176e4:	ldrd	r2, [r3]
   176e8:	cmp	r1, r3
   176ec:	cmpeq	r0, r2
   176f0:	bhi	17774 <_start@@Base+0x314c>
   176f4:	add	r3, pc, #556	; 0x22c
   176f8:	ldrd	r2, [r3]
   176fc:	cmp	r1, r3
   17700:	cmpeq	r0, r2
   17704:	bne	171ec <_start@@Base+0x2bc4>
   17708:	add	r8, r4, #16
   1770c:	mov	r1, r5
   17710:	mov	r0, r8
   17714:	bl	14750 <_start@@Base+0x128>
   17718:	bic	r0, r0, #255	; 0xff
   1771c:	add	r3, pc, #524	; 0x20c
   17720:	ldrd	r2, [r3]
   17724:	cmp	r1, r3
   17728:	cmpeq	r0, r2
   1772c:	bne	171ec <_start@@Base+0x2bc4>
   17730:	sub	r8, r5, r8
   17734:	cmp	r8, #7
   17738:	ble	171ec <_start@@Base+0x2bc4>
   1773c:	ldrb	r3, [r4, #23]
   17740:	cmp	r3, #46	; 0x2e
   17744:	bne	171ec <_start@@Base+0x2bc4>
   17748:	ldr	r3, [sp, #52]	; 0x34
   1774c:	str	r3, [sp, #4]
   17750:	ldr	r3, [sp, #48]	; 0x30
   17754:	str	r3, [sp]
   17758:	mov	r3, r6
   1775c:	mov	r2, r5
   17760:	add	r1, r4, #24
   17764:	mov	r0, r7
   17768:	bl	16c6c <_start@@Base+0x2644>
   1776c:	mov	r4, r0
   17770:	b	171ec <_start@@Base+0x2bc4>
   17774:	add	r3, pc, #444	; 0x1bc
   17778:	ldrd	r2, [r3]
   1777c:	cmp	r1, r3
   17780:	cmpeq	r0, r2
   17784:	bne	171ec <_start@@Base+0x2bc4>
   17788:	add	r8, r4, #16
   1778c:	mov	r1, r5
   17790:	mov	r0, r8
   17794:	bl	14750 <_start@@Base+0x128>
   17798:	mov	sl, r0
   1779c:	mov	fp, r1
   177a0:	bic	r0, r0, #255	; 0xff
   177a4:	add	r3, pc, #404	; 0x194
   177a8:	ldrd	r2, [r3]
   177ac:	cmp	r1, r3
   177b0:	cmpeq	r0, r2
   177b4:	beq	1787c <_start@@Base+0x3254>
   177b8:	add	r3, pc, #392	; 0x188
   177bc:	ldrd	r2, [r3]
   177c0:	cmp	fp, r3
   177c4:	cmpeq	sl, r2
   177c8:	bne	171ec <_start@@Base+0x2bc4>
   177cc:	add	r8, r4, #24
   177d0:	mov	r1, r5
   177d4:	mov	r0, r8
   177d8:	bl	14750 <_start@@Base+0x128>
   177dc:	mov	r0, #0
   177e0:	bic	r1, r1, #255	; 0xff
   177e4:	add	r3, pc, #356	; 0x164
   177e8:	ldrd	r2, [r3]
   177ec:	cmp	r1, r3
   177f0:	cmpeq	r0, r2
   177f4:	bne	171ec <_start@@Base+0x2bc4>
   177f8:	sub	r8, r5, r8
   177fc:	cmp	r8, #3
   17800:	ble	171ec <_start@@Base+0x2bc4>
   17804:	ldrb	r3, [r4, #27]
   17808:	cmp	r3, #46	; 0x2e
   1780c:	bne	171ec <_start@@Base+0x2bc4>
   17810:	add	r8, r4, #28
   17814:	mov	r1, r5
   17818:	mov	r0, r8
   1781c:	bl	14750 <_start@@Base+0x128>
   17820:	mov	r0, #0
   17824:	and	r1, r1, #-16777216	; 0xff000000
   17828:	cmp	r1, #2013265920	; 0x78000000
   1782c:	cmpeq	r0, #0
   17830:	movne	r4, r8
   17834:	bne	171ec <_start@@Base+0x2bc4>
   17838:	ldr	r3, [sp, #52]	; 0x34
   1783c:	str	r3, [sp]
   17840:	mov	r3, #1
   17844:	mov	r2, r5
   17848:	mov	r1, r8
   1784c:	mov	r0, r7
   17850:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   17854:	mov	r4, r0
   17858:	cmp	r8, r0
   1785c:	beq	171ec <_start@@Base+0x2bc4>
   17860:	mov	r2, #0
   17864:	mov	r3, #0
   17868:	ldr	r1, [sp, #48]	; 0x30
   1786c:	strd	r2, [r1]
   17870:	mov	r3, #0
   17874:	str	r3, [r6]
   17878:	b	171ec <_start@@Base+0x2bc4>
   1787c:	sub	r8, r5, r8
   17880:	cmp	r8, #7
   17884:	ble	177b8 <_start@@Base+0x3190>
   17888:	ldrb	r3, [r4, #23]
   1788c:	cmp	r3, #46	; 0x2e
   17890:	bne	177b8 <_start@@Base+0x3190>
   17894:	ldr	r3, [sp, #52]	; 0x34
   17898:	str	r3, [sp, #4]
   1789c:	ldr	r3, [sp, #48]	; 0x30
   178a0:	str	r3, [sp]
   178a4:	mov	r3, r6
   178a8:	mov	r2, r5
   178ac:	add	r1, r4, #24
   178b0:	mov	r0, r7
   178b4:	bl	16e8c <_start@@Base+0x2864>
   178b8:	mov	r4, r0
   178bc:	b	171ec <_start@@Base+0x2bc4>
   178c0:	ldr	r3, [sp, #52]	; 0x34
   178c4:	str	r3, [sp]
   178c8:	mov	r3, #3
   178cc:	mov	r2, r5
   178d0:	mov	r1, r4
   178d4:	mov	r0, r7
   178d8:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   178dc:	cmp	r4, r0
   178e0:	beq	1737c <_start@@Base+0x2d54>
   178e4:	mov	r2, #17
   178e8:	mov	r3, #0
   178ec:	ldr	r1, [sp, #48]	; 0x30
   178f0:	strd	r2, [r1]
   178f4:	mov	r3, #0
   178f8:	str	r3, [r6]
   178fc:	mov	r4, r0
   17900:	b	171ec <_start@@Base+0x2bc4>
   17904:	nop			; (mov r0, r0)
   17908:	andeq	r0, r0, r0
   1790c:	svcvs	0x006c6f72
   17910:	stclvs	14, cr2, [r5], #-416	; 0xfffffe60
   17914:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17918:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   1791c:	ldrbvs	r5, [r8, #-3941]!	; 0xfffff09b
   17920:	stclvs	14, cr2, [r5], #-436	; 0xfffffe4c
   17924:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17928:	stclvs	14, cr2, [r5], #-420	; 0xfffffe5c
   1792c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17930:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   17934:	cdpvs	15, 7, cr5, cr4, cr5, {3}
   17938:	stclvs	14, cr2, [r5], #-440	; 0xfffffe48
   1793c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17940:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   17944:	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
   17948:	rsbsvc	r7, r4, r5, ror #18
   1794c:	svcvs	0x0074656d
   17950:	andeq	r0, r0, r0
   17954:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   17958:	push	{r4, r5, r6, r7, r8, r9, lr}
   1795c:	sub	sp, sp, #28
   17960:	mov	r4, #0
   17964:	mov	r5, #0
   17968:	strd	r4, [sp, #16]
   1796c:	mov	ip, #0
   17970:	str	ip, [sp, #12]
   17974:	strh	ip, [r3]
   17978:	cmp	r1, r2
   1797c:	moveq	r0, r2
   17980:	beq	17a00 <_start@@Base+0x33d8>
   17984:	mov	r6, r3
   17988:	mov	r5, r2
   1798c:	mov	r4, r1
   17990:	mov	r7, r0
   17994:	add	r3, sp, #16
   17998:	str	r3, [sp]
   1799c:	add	r3, sp, #12
   179a0:	bl	2ed84 <flatcc_json_parser_integer@@Base>
   179a4:	cmp	r4, r0
   179a8:	beq	17a00 <_start@@Base+0x33d8>
   179ac:	ldrd	r2, [sp, #16]
   179b0:	ldr	r1, [sp, #12]
   179b4:	cmp	r1, #0
   179b8:	beq	179e8 <_start@@Base+0x33c0>
   179bc:	cmp	r3, #0
   179c0:	cmpeq	r2, #32768	; 0x8000
   179c4:	rsbls	r2, r2, #0
   179c8:	strhls	r2, [r6]
   179cc:	bls	17a00 <_start@@Base+0x33d8>
   179d0:	mov	r3, #8
   179d4:	mov	r2, r5
   179d8:	mov	r1, r0
   179dc:	mov	r0, r7
   179e0:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   179e4:	b	17a00 <_start@@Base+0x33d8>
   179e8:	ldr	r8, [pc, #48]	; 17a20 <_start@@Base+0x33f8>
   179ec:	mov	r9, #0
   179f0:	cmp	r3, r9
   179f4:	cmpeq	r2, r8
   179f8:	strhls	r2, [r6]
   179fc:	bhi	17a08 <_start@@Base+0x33e0>
   17a00:	add	sp, sp, #28
   17a04:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17a08:	mov	r3, #7
   17a0c:	mov	r2, r5
   17a10:	mov	r1, r0
   17a14:	mov	r0, r7
   17a18:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   17a1c:	b	17a00 <_start@@Base+0x33d8>
   17a20:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   17a24:	push	{r4, r5, r6, r7, r8, r9, lr}
   17a28:	sub	sp, sp, #28
   17a2c:	mov	r4, #0
   17a30:	mov	r5, #0
   17a34:	strd	r4, [sp, #16]
   17a38:	mov	ip, #0
   17a3c:	str	ip, [sp, #12]
   17a40:	str	ip, [r3]
   17a44:	cmp	r1, r2
   17a48:	moveq	r0, r2
   17a4c:	beq	17acc <_start@@Base+0x34a4>
   17a50:	mov	r6, r3
   17a54:	mov	r5, r2
   17a58:	mov	r4, r1
   17a5c:	mov	r7, r0
   17a60:	add	r3, sp, #16
   17a64:	str	r3, [sp]
   17a68:	add	r3, sp, #12
   17a6c:	bl	2ed84 <flatcc_json_parser_integer@@Base>
   17a70:	cmp	r4, r0
   17a74:	beq	17acc <_start@@Base+0x34a4>
   17a78:	ldrd	r2, [sp, #16]
   17a7c:	ldr	r1, [sp, #12]
   17a80:	cmp	r1, #0
   17a84:	beq	17ab4 <_start@@Base+0x348c>
   17a88:	cmp	r3, #0
   17a8c:	cmpeq	r2, #-2147483648	; 0x80000000
   17a90:	rsbls	r2, r2, #0
   17a94:	strls	r2, [r6]
   17a98:	bls	17acc <_start@@Base+0x34a4>
   17a9c:	mov	r3, #8
   17aa0:	mov	r2, r5
   17aa4:	mov	r1, r0
   17aa8:	mov	r0, r7
   17aac:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   17ab0:	b	17acc <_start@@Base+0x34a4>
   17ab4:	mvn	r8, #-2147483648	; 0x80000000
   17ab8:	mov	r9, #0
   17abc:	cmp	r3, r9
   17ac0:	cmpeq	r2, r8
   17ac4:	strls	r2, [r6]
   17ac8:	bhi	17ad4 <_start@@Base+0x34ac>
   17acc:	add	sp, sp, #28
   17ad0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17ad4:	mov	r3, #7
   17ad8:	mov	r2, r5
   17adc:	mov	r1, r0
   17ae0:	mov	r0, r7
   17ae4:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   17ae8:	b	17acc <_start@@Base+0x34a4>
   17aec:	push	{r4, r5, r6, r7, r8, r9, lr}
   17af0:	sub	sp, sp, #28
   17af4:	mov	r4, #0
   17af8:	mov	r5, #0
   17afc:	strd	r4, [sp, #16]
   17b00:	mov	ip, #0
   17b04:	str	ip, [sp, #12]
   17b08:	str	ip, [r3]
   17b0c:	cmp	r1, r2
   17b10:	moveq	r0, r2
   17b14:	beq	17b68 <_start@@Base+0x3540>
   17b18:	mov	r7, r3
   17b1c:	mov	r5, r2
   17b20:	mov	r4, r1
   17b24:	mov	r6, r0
   17b28:	add	r3, sp, #16
   17b2c:	str	r3, [sp]
   17b30:	add	r3, sp, #12
   17b34:	bl	2ed84 <flatcc_json_parser_integer@@Base>
   17b38:	cmp	r4, r0
   17b3c:	beq	17b68 <_start@@Base+0x3540>
   17b40:	ldr	r3, [sp, #12]
   17b44:	cmp	r3, #0
   17b48:	bne	17b70 <_start@@Base+0x3548>
   17b4c:	ldrd	r2, [sp, #16]
   17b50:	mvn	r8, #0
   17b54:	mov	r9, #0
   17b58:	cmp	r3, r9
   17b5c:	cmpeq	r2, r8
   17b60:	strls	r2, [r7]
   17b64:	bhi	17b88 <_start@@Base+0x3560>
   17b68:	add	sp, sp, #28
   17b6c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17b70:	mov	r3, #8
   17b74:	mov	r2, r5
   17b78:	mov	r1, r0
   17b7c:	mov	r0, r6
   17b80:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   17b84:	b	17b68 <_start@@Base+0x3540>
   17b88:	mov	r3, #7
   17b8c:	mov	r2, r5
   17b90:	mov	r1, r0
   17b94:	mov	r0, r6
   17b98:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   17b9c:	b	17b68 <_start@@Base+0x3540>
   17ba0:	push	{r4, r5, r6, r7, lr}
   17ba4:	sub	sp, sp, #28
   17ba8:	mov	r4, #0
   17bac:	mov	r5, #0
   17bb0:	strd	r4, [sp, #16]
   17bb4:	mov	ip, #0
   17bb8:	str	ip, [sp, #12]
   17bbc:	strd	r4, [r3]
   17bc0:	cmp	r1, r2
   17bc4:	moveq	r0, r2
   17bc8:	beq	17c08 <_start@@Base+0x35e0>
   17bcc:	mov	r7, r3
   17bd0:	mov	r5, r2
   17bd4:	mov	r4, r1
   17bd8:	mov	r6, r0
   17bdc:	add	r3, sp, #16
   17be0:	str	r3, [sp]
   17be4:	add	r3, sp, #12
   17be8:	bl	2ed84 <flatcc_json_parser_integer@@Base>
   17bec:	cmp	r4, r0
   17bf0:	beq	17c08 <_start@@Base+0x35e0>
   17bf4:	ldr	r3, [sp, #12]
   17bf8:	cmp	r3, #0
   17bfc:	bne	17c10 <_start@@Base+0x35e8>
   17c00:	ldrd	r2, [sp, #16]
   17c04:	strd	r2, [r7]
   17c08:	add	sp, sp, #28
   17c0c:	pop	{r4, r5, r6, r7, pc}
   17c10:	mov	r3, #8
   17c14:	mov	r2, r5
   17c18:	mov	r1, r0
   17c1c:	mov	r0, r6
   17c20:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   17c24:	b	17c08 <_start@@Base+0x35e0>
   17c28:	push	{r4, r5, r6, r7, lr}
   17c2c:	sub	sp, sp, #28
   17c30:	mov	r4, #0
   17c34:	mov	r5, #0
   17c38:	strd	r4, [sp, #16]
   17c3c:	mov	ip, #0
   17c40:	str	ip, [sp, #12]
   17c44:	strb	ip, [r3]
   17c48:	cmp	r1, r2
   17c4c:	moveq	r0, r2
   17c50:	beq	17c9c <_start@@Base+0x3674>
   17c54:	mov	r7, r3
   17c58:	mov	r5, r2
   17c5c:	mov	r4, r1
   17c60:	mov	r6, r0
   17c64:	add	r3, sp, #16
   17c68:	str	r3, [sp]
   17c6c:	add	r3, sp, #12
   17c70:	bl	2ed84 <flatcc_json_parser_integer@@Base>
   17c74:	cmp	r4, r0
   17c78:	beq	17c9c <_start@@Base+0x3674>
   17c7c:	ldr	r3, [sp, #12]
   17c80:	cmp	r3, #0
   17c84:	bne	17ca4 <_start@@Base+0x367c>
   17c88:	ldrd	r2, [sp, #16]
   17c8c:	cmp	r3, #0
   17c90:	cmpeq	r2, #255	; 0xff
   17c94:	strbls	r2, [r7]
   17c98:	bhi	17cbc <_start@@Base+0x3694>
   17c9c:	add	sp, sp, #28
   17ca0:	pop	{r4, r5, r6, r7, pc}
   17ca4:	mov	r3, #8
   17ca8:	mov	r2, r5
   17cac:	mov	r1, r0
   17cb0:	mov	r0, r6
   17cb4:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   17cb8:	b	17c9c <_start@@Base+0x3674>
   17cbc:	mov	r3, #7
   17cc0:	mov	r2, r5
   17cc4:	mov	r1, r0
   17cc8:	mov	r0, r6
   17ccc:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   17cd0:	b	17c9c <_start@@Base+0x3674>
   17cd4:	push	{r4, r5, r6, r7, lr}
   17cd8:	sub	sp, sp, #28
   17cdc:	mov	r4, #0
   17ce0:	mov	r5, #0
   17ce4:	strd	r4, [sp, #16]
   17ce8:	mov	ip, #0
   17cec:	str	ip, [sp, #12]
   17cf0:	strd	r4, [r3]
   17cf4:	cmp	r1, r2
   17cf8:	moveq	r0, r2
   17cfc:	beq	17d7c <_start@@Base+0x3754>
   17d00:	mov	r6, r3
   17d04:	mov	r5, r2
   17d08:	mov	r4, r1
   17d0c:	mov	r7, r0
   17d10:	add	r3, sp, #16
   17d14:	str	r3, [sp]
   17d18:	add	r3, sp, #12
   17d1c:	bl	2ed84 <flatcc_json_parser_integer@@Base>
   17d20:	cmp	r4, r0
   17d24:	beq	17d7c <_start@@Base+0x3754>
   17d28:	ldrd	r2, [sp, #16]
   17d2c:	ldr	r1, [sp, #12]
   17d30:	cmp	r1, #0
   17d34:	beq	17d6c <_start@@Base+0x3744>
   17d38:	cmp	r3, #-2147483648	; 0x80000000
   17d3c:	cmpeq	r2, #0
   17d40:	bhi	17d54 <_start@@Base+0x372c>
   17d44:	rsbs	r2, r2, #0
   17d48:	rsc	r3, r3, #0
   17d4c:	strd	r2, [r6]
   17d50:	b	17d7c <_start@@Base+0x3754>
   17d54:	mov	r3, #8
   17d58:	mov	r2, r5
   17d5c:	mov	r1, r0
   17d60:	mov	r0, r7
   17d64:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   17d68:	b	17d7c <_start@@Base+0x3754>
   17d6c:	cmp	r2, #0
   17d70:	sbcs	r1, r3, #0
   17d74:	blt	17d84 <_start@@Base+0x375c>
   17d78:	strd	r2, [r6]
   17d7c:	add	sp, sp, #28
   17d80:	pop	{r4, r5, r6, r7, pc}
   17d84:	mov	r3, #7
   17d88:	mov	r2, r5
   17d8c:	mov	r1, r0
   17d90:	mov	r0, r7
   17d94:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   17d98:	b	17d7c <_start@@Base+0x3754>
   17d9c:	sub	r3, r2, r1
   17da0:	cmp	r3, #1
   17da4:	ble	17db8 <_start@@Base+0x3790>
   17da8:	ldrb	r3, [r1]
   17dac:	cmp	r3, #32
   17db0:	bhi	17dd8 <_start@@Base+0x37b0>
   17db4:	beq	17dc4 <_start@@Base+0x379c>
   17db8:	push	{r4, lr}
   17dbc:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   17dc0:	pop	{r4, pc}
   17dc4:	ldrb	r3, [r1, #1]
   17dc8:	cmp	r3, #32
   17dcc:	bls	17db8 <_start@@Base+0x3790>
   17dd0:	add	r0, r1, #1
   17dd4:	bx	lr
   17dd8:	mov	r0, r1
   17ddc:	bx	lr
   17de0:	push	{r4, r5, r6, lr}
   17de4:	mov	r5, r0
   17de8:	mov	r4, r2
   17dec:	mov	r6, r3
   17df0:	cmp	r1, r2
   17df4:	beq	17e04 <_start@@Base+0x37dc>
   17df8:	ldrb	r3, [r1]
   17dfc:	cmp	r3, #123	; 0x7b
   17e00:	beq	17e20 <_start@@Base+0x37f8>
   17e04:	mov	r3, #0
   17e08:	str	r3, [r6]
   17e0c:	mov	r3, #21
   17e10:	mov	r2, r4
   17e14:	mov	r0, r5
   17e18:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   17e1c:	pop	{r4, r5, r6, pc}
   17e20:	add	r1, r1, #1
   17e24:	bl	17d9c <_start@@Base+0x3774>
   17e28:	cmp	r4, r0
   17e2c:	beq	17e3c <_start@@Base+0x3814>
   17e30:	ldrb	r3, [r0]
   17e34:	cmp	r3, #125	; 0x7d
   17e38:	beq	17e48 <_start@@Base+0x3820>
   17e3c:	mov	r3, #1
   17e40:	str	r3, [r6]
   17e44:	pop	{r4, r5, r6, pc}
   17e48:	mov	r3, #0
   17e4c:	str	r3, [r6]
   17e50:	mov	r2, r4
   17e54:	add	r1, r0, #1
   17e58:	mov	r0, r5
   17e5c:	bl	17d9c <_start@@Base+0x3774>
   17e60:	pop	{r4, r5, r6, pc}
   17e64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e68:	sub	sp, sp, #44	; 0x2c
   17e6c:	mov	r6, r0
   17e70:	mov	r5, r2
   17e74:	str	r3, [sp, #20]
   17e78:	ldr	r8, [sp, #80]	; 0x50
   17e7c:	mov	r2, #0
   17e80:	mov	r3, #0
   17e84:	strd	r2, [r8]
   17e88:	cmp	r1, r5
   17e8c:	moveq	r4, r5
   17e90:	beq	17ed4 <_start@@Base+0x38ac>
   17e94:	mov	r4, r1
   17e98:	ldrb	r3, [r1]
   17e9c:	cmp	r3, #34	; 0x22
   17ea0:	addeq	r4, r1, #1
   17ea4:	moveq	r3, #0
   17ea8:	streq	r3, [r0, #12]
   17eac:	beq	17ed4 <_start@@Base+0x38ac>
   17eb0:	cmp	r3, #46	; 0x2e
   17eb4:	movne	r3, #1
   17eb8:	strne	r3, [r0, #12]
   17ebc:	bne	17ed4 <_start@@Base+0x38ac>
   17ec0:	mov	r3, #5
   17ec4:	mov	r2, r5
   17ec8:	mov	r1, r4
   17ecc:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   17ed0:	mov	r4, r0
   17ed4:	ldr	r3, [r6, #12]
   17ed8:	cmp	r3, #0
   17edc:	bne	17ef4 <_start@@Base+0x38cc>
   17ee0:	mov	r2, r5
   17ee4:	mov	r1, r4
   17ee8:	mov	r0, r6
   17eec:	bl	17d9c <_start@@Base+0x3774>
   17ef0:	mov	r4, r0
   17ef4:	cmp	r5, r4
   17ef8:	moveq	r5, r4
   17efc:	beq	17f6c <_start@@Base+0x3944>
   17f00:	mov	r2, #0
   17f04:	mov	r3, #0
   17f08:	strd	r2, [sp, #8]
   17f0c:	add	fp, sp, #24
   17f10:	add	sl, sp, #32
   17f14:	ldr	r9, [sp, #20]
   17f18:	str	fp, [sp, #4]
   17f1c:	str	sl, [sp]
   17f20:	ldr	r7, [r9]
   17f24:	add	r3, sp, #28
   17f28:	mov	r2, r5
   17f2c:	mov	r1, r4
   17f30:	mov	r0, r6
   17f34:	blx	r7
   17f38:	cmp	r5, r0
   17f3c:	beq	17f6c <_start@@Base+0x3944>
   17f40:	cmp	r4, r0
   17f44:	bne	17f80 <_start@@Base+0x3958>
   17f48:	ldr	r3, [r9, #4]!
   17f4c:	cmp	r3, #0
   17f50:	bne	17f18 <_start@@Base+0x38f0>
   17f54:	mov	r3, #23
   17f58:	mov	r2, r5
   17f5c:	mov	r1, r4
   17f60:	mov	r0, r6
   17f64:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   17f68:	mov	r5, r0
   17f6c:	mov	r0, r5
   17f70:	add	sp, sp, #44	; 0x2c
   17f74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f78:	mov	r4, r7
   17f7c:	b	17f14 <_start@@Base+0x38ec>
   17f80:	mov	r7, r0
   17f84:	ldr	r3, [sp, #28]
   17f88:	cmp	r3, #0
   17f8c:	bne	17fc8 <_start@@Base+0x39a0>
   17f90:	ldrd	r2, [sp, #32]
   17f94:	strd	r2, [sp, #8]
   17f98:	ldrd	r2, [r8]
   17f9c:	ldrd	r0, [sp, #8]
   17fa0:	adds	r0, r0, r2
   17fa4:	adc	r1, r1, r3
   17fa8:	mov	r2, r0
   17fac:	mov	r3, r1
   17fb0:	strd	r2, [r8]
   17fb4:	ldr	r3, [sp, #24]
   17fb8:	cmp	r3, #0
   17fbc:	bne	17f78 <_start@@Base+0x3950>
   17fc0:	mov	r5, r7
   17fc4:	b	17f6c <_start@@Base+0x3944>
   17fc8:	mov	r3, #8
   17fcc:	mov	r2, r5
   17fd0:	mov	r1, r0
   17fd4:	mov	r0, r6
   17fd8:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   17fdc:	cmp	r5, r0
   17fe0:	bne	17f98 <_start@@Base+0x3970>
   17fe4:	b	17f6c <_start@@Base+0x3944>
   17fe8:	push	{r4, r5, r6, lr}
   17fec:	mov	r5, r0
   17ff0:	mov	r4, r2
   17ff4:	mov	r6, r3
   17ff8:	sub	r3, r2, r1
   17ffc:	cmp	r3, #1
   18000:	ble	18014 <_start@@Base+0x39ec>
   18004:	ldrb	r3, [r1]
   18008:	cmp	r3, #32
   1800c:	bhi	18024 <_start@@Base+0x39fc>
   18010:	beq	18060 <_start@@Base+0x3a38>
   18014:	mov	r2, r4
   18018:	mov	r0, r5
   1801c:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   18020:	mov	r1, r0
   18024:	cmp	r4, r1
   18028:	beq	18074 <_start@@Base+0x3a4c>
   1802c:	ldrb	r3, [r1]
   18030:	cmp	r3, #44	; 0x2c
   18034:	beq	18098 <_start@@Base+0x3a70>
   18038:	mov	r3, #0
   1803c:	str	r3, [r6]
   18040:	ldrb	r3, [r1]
   18044:	cmp	r3, #93	; 0x5d
   18048:	beq	18084 <_start@@Base+0x3a5c>
   1804c:	mov	r3, #9
   18050:	mov	r2, r4
   18054:	mov	r0, r5
   18058:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1805c:	pop	{r4, r5, r6, pc}
   18060:	ldrb	r3, [r1, #1]
   18064:	cmp	r3, #32
   18068:	addhi	r1, r1, #1
   1806c:	bls	18014 <_start@@Base+0x39ec>
   18070:	b	18024 <_start@@Base+0x39fc>
   18074:	mov	r3, #0
   18078:	str	r3, [r6]
   1807c:	mov	r0, r1
   18080:	pop	{r4, r5, r6, pc}
   18084:	mov	r2, r4
   18088:	add	r1, r1, #1
   1808c:	mov	r0, r5
   18090:	bl	17d9c <_start@@Base+0x3774>
   18094:	pop	{r4, r5, r6, pc}
   18098:	mov	r2, r4
   1809c:	add	r1, r1, #1
   180a0:	mov	r0, r5
   180a4:	bl	17d9c <_start@@Base+0x3774>
   180a8:	cmp	r4, r0
   180ac:	beq	180c8 <_start@@Base+0x3aa0>
   180b0:	ldrb	r3, [r0]
   180b4:	cmp	r3, #93	; 0x5d
   180b8:	beq	180e8 <_start@@Base+0x3ac0>
   180bc:	mov	r3, #1
   180c0:	str	r3, [r6]
   180c4:	pop	{r4, r5, r6, pc}
   180c8:	mov	r3, #0
   180cc:	str	r3, [r6]
   180d0:	mov	r3, #9
   180d4:	mov	r2, r4
   180d8:	mov	r1, r0
   180dc:	mov	r0, r5
   180e0:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   180e4:	pop	{r4, r5, r6, pc}
   180e8:	mov	r3, #0
   180ec:	str	r3, [r6]
   180f0:	mov	r2, r4
   180f4:	add	r1, r0, #1
   180f8:	mov	r0, r5
   180fc:	bl	17d9c <_start@@Base+0x3774>
   18100:	pop	{r4, r5, r6, pc}
   18104:	push	{r4, r5, r6, lr}
   18108:	mov	r5, r0
   1810c:	mov	r4, r2
   18110:	mov	r6, r3
   18114:	sub	r3, r2, r1
   18118:	cmp	r3, #1
   1811c:	ble	18130 <_start@@Base+0x3b08>
   18120:	ldrb	r3, [r1]
   18124:	cmp	r3, #32
   18128:	bhi	18140 <_start@@Base+0x3b18>
   1812c:	beq	1817c <_start@@Base+0x3b54>
   18130:	mov	r2, r4
   18134:	mov	r0, r5
   18138:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1813c:	mov	r1, r0
   18140:	cmp	r4, r1
   18144:	beq	18190 <_start@@Base+0x3b68>
   18148:	ldrb	r3, [r1]
   1814c:	cmp	r3, #44	; 0x2c
   18150:	beq	181b4 <_start@@Base+0x3b8c>
   18154:	mov	r3, #0
   18158:	str	r3, [r6]
   1815c:	ldrb	r3, [r1]
   18160:	cmp	r3, #125	; 0x7d
   18164:	beq	181a0 <_start@@Base+0x3b78>
   18168:	mov	r3, #10
   1816c:	mov	r2, r4
   18170:	mov	r0, r5
   18174:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   18178:	pop	{r4, r5, r6, pc}
   1817c:	ldrb	r3, [r1, #1]
   18180:	cmp	r3, #32
   18184:	addhi	r1, r1, #1
   18188:	bls	18130 <_start@@Base+0x3b08>
   1818c:	b	18140 <_start@@Base+0x3b18>
   18190:	mov	r3, #0
   18194:	str	r3, [r6]
   18198:	mov	r0, r1
   1819c:	pop	{r4, r5, r6, pc}
   181a0:	mov	r2, r4
   181a4:	add	r1, r1, #1
   181a8:	mov	r0, r5
   181ac:	bl	17d9c <_start@@Base+0x3774>
   181b0:	pop	{r4, r5, r6, pc}
   181b4:	mov	r2, r4
   181b8:	add	r1, r1, #1
   181bc:	mov	r0, r5
   181c0:	bl	17d9c <_start@@Base+0x3774>
   181c4:	cmp	r4, r0
   181c8:	beq	181e4 <_start@@Base+0x3bbc>
   181cc:	ldrb	r3, [r0]
   181d0:	cmp	r3, #125	; 0x7d
   181d4:	beq	18204 <_start@@Base+0x3bdc>
   181d8:	mov	r3, #1
   181dc:	str	r3, [r6]
   181e0:	pop	{r4, r5, r6, pc}
   181e4:	mov	r3, #0
   181e8:	str	r3, [r6]
   181ec:	mov	r3, #10
   181f0:	mov	r2, r4
   181f4:	mov	r1, r0
   181f8:	mov	r0, r5
   181fc:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   18200:	pop	{r4, r5, r6, pc}
   18204:	mov	r3, #0
   18208:	str	r3, [r6]
   1820c:	mov	r2, r4
   18210:	add	r1, r0, #1
   18214:	mov	r0, r5
   18218:	bl	17d9c <_start@@Base+0x3774>
   1821c:	pop	{r4, r5, r6, pc}
   18220:	push	{r4, r5, r6, r7, r8, lr}
   18224:	sub	sp, sp, #24
   18228:	mov	r8, r0
   1822c:	mov	r4, r1
   18230:	mov	r5, r2
   18234:	mov	r7, r3
   18238:	sub	r6, r2, r1
   1823c:	cmp	r6, #3
   18240:	ble	1825c <_start@@Base+0x3c34>
   18244:	mov	r2, #4
   18248:	ldr	r1, [pc, #264]	; 18358 <_start@@Base+0x3d30>
   1824c:	mov	r0, r4
   18250:	bl	14558 <memcmp@plt>
   18254:	cmp	r0, #0
   18258:	beq	182f4 <_start@@Base+0x3ccc>
   1825c:	cmp	r6, #4
   18260:	ble	1827c <_start@@Base+0x3c54>
   18264:	mov	r2, #5
   18268:	ldr	r1, [pc, #236]	; 1835c <_start@@Base+0x3d34>
   1826c:	mov	r0, r4
   18270:	bl	14558 <memcmp@plt>
   18274:	cmp	r0, #0
   18278:	beq	18304 <_start@@Base+0x3cdc>
   1827c:	mov	r2, #0
   18280:	mov	r3, #0
   18284:	strd	r2, [sp, #16]
   18288:	mov	r3, #0
   1828c:	str	r3, [sp, #12]
   18290:	cmp	r4, r5
   18294:	beq	1834c <_start@@Base+0x3d24>
   18298:	add	r3, sp, #16
   1829c:	str	r3, [sp]
   182a0:	add	r3, sp, #12
   182a4:	mov	r2, r5
   182a8:	mov	r1, r4
   182ac:	mov	r0, r8
   182b0:	bl	2ed84 <flatcc_json_parser_integer@@Base>
   182b4:	cmp	r4, r0
   182b8:	moveq	r2, #0
   182bc:	beq	182e0 <_start@@Base+0x3cb8>
   182c0:	ldr	r3, [sp, #12]
   182c4:	cmp	r3, #0
   182c8:	bne	18314 <_start@@Base+0x3cec>
   182cc:	ldrd	r2, [sp, #16]
   182d0:	cmp	r3, #0
   182d4:	cmpeq	r2, #255	; 0xff
   182d8:	uxtbls	r2, r2
   182dc:	bhi	18330 <_start@@Base+0x3d08>
   182e0:	adds	r2, r2, #0
   182e4:	movne	r2, #1
   182e8:	strb	r2, [r7]
   182ec:	add	sp, sp, #24
   182f0:	pop	{r4, r5, r6, r7, r8, pc}
   182f4:	mov	r3, #1
   182f8:	strb	r3, [r7]
   182fc:	add	r0, r4, #4
   18300:	b	182ec <_start@@Base+0x3cc4>
   18304:	mov	r3, #0
   18308:	strb	r3, [r7]
   1830c:	add	r0, r4, #5
   18310:	b	182ec <_start@@Base+0x3cc4>
   18314:	mov	r3, #8
   18318:	mov	r2, r5
   1831c:	mov	r1, r0
   18320:	mov	r0, r8
   18324:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   18328:	mov	r2, #0
   1832c:	b	182e0 <_start@@Base+0x3cb8>
   18330:	mov	r3, #7
   18334:	mov	r2, r5
   18338:	mov	r1, r0
   1833c:	mov	r0, r8
   18340:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   18344:	mov	r2, #0
   18348:	b	182e0 <_start@@Base+0x3cb8>
   1834c:	mov	r0, r5
   18350:	mov	r2, #0
   18354:	b	182e0 <_start@@Base+0x3cb8>
   18358:	ldrdeq	sp, [r3], -r8
   1835c:	andeq	sp, r3, r0, ror #25
   18360:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18364:	sub	sp, sp, #36	; 0x24
   18368:	mov	r8, r0
   1836c:	mov	r6, r1
   18370:	mov	r7, r2
   18374:	str	r3, [sp, #12]
   18378:	ldr	fp, [sp, #72]	; 0x48
   1837c:	mov	r3, #0
   18380:	str	r3, [fp]
   18384:	cmp	r1, r2
   18388:	beq	184a0 <_start@@Base+0x3e78>
   1838c:	ldrb	r3, [r1]
   18390:	cmp	r3, #34	; 0x22
   18394:	addeq	r6, r1, #1
   18398:	moveq	r3, #0
   1839c:	streq	r3, [r0, #12]
   183a0:	beq	184ac <_start@@Base+0x3e84>
   183a4:	cmp	r3, #46	; 0x2e
   183a8:	movne	r3, #1
   183ac:	strne	r3, [r0, #12]
   183b0:	beq	183c0 <_start@@Base+0x3d98>
   183b4:	add	sl, sp, #16
   183b8:	add	r9, sp, #24
   183bc:	b	18430 <_start@@Base+0x3e08>
   183c0:	mov	r3, #5
   183c4:	mov	r1, r6
   183c8:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   183cc:	mov	r6, r0
   183d0:	ldr	r3, [r8, #12]
   183d4:	cmp	r3, #0
   183d8:	beq	184ac <_start@@Base+0x3e84>
   183dc:	b	184dc <_start@@Base+0x3eb4>
   183e0:	ldrb	r3, [r6, #1]
   183e4:	cmp	r3, #32
   183e8:	addhi	r6, r6, #1
   183ec:	bls	184c8 <_start@@Base+0x3ea0>
   183f0:	b	184dc <_start@@Base+0x3eb4>
   183f4:	mov	r4, r0
   183f8:	ldrd	r0, [sp, #24]
   183fc:	ldr	r3, [sp, #20]
   18400:	cmp	r3, #0
   18404:	beq	1848c <_start@@Base+0x3e64>
   18408:	bl	3d60c <flatcc_json_printer_clear@@Base+0x7c0>
   1840c:	vmov	s15, r0
   18410:	vneg.f32	s14, s15
   18414:	vldr	s15, [fp]
   18418:	vadd.f32	s15, s15, s14
   1841c:	vstr	s15, [fp]
   18420:	ldr	r3, [sp, #16]
   18424:	cmp	r3, #0
   18428:	beq	18498 <_start@@Base+0x3e70>
   1842c:	mov	r6, r4
   18430:	ldr	r5, [sp, #12]
   18434:	str	sl, [sp, #4]
   18438:	str	r9, [sp]
   1843c:	ldr	r4, [r5]
   18440:	add	r3, sp, #20
   18444:	mov	r2, r7
   18448:	mov	r1, r6
   1844c:	mov	r0, r8
   18450:	blx	r4
   18454:	cmp	r7, r0
   18458:	beq	184e8 <_start@@Base+0x3ec0>
   1845c:	cmp	r6, r0
   18460:	bne	183f4 <_start@@Base+0x3dcc>
   18464:	ldr	r3, [r5, #4]!
   18468:	cmp	r3, #0
   1846c:	bne	18434 <_start@@Base+0x3e0c>
   18470:	mov	r3, #23
   18474:	mov	r2, r7
   18478:	mov	r1, r6
   1847c:	mov	r0, r8
   18480:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   18484:	mov	r7, r0
   18488:	b	184e8 <_start@@Base+0x3ec0>
   1848c:	bl	3d60c <flatcc_json_printer_clear@@Base+0x7c0>
   18490:	vmov	s14, r0
   18494:	b	18414 <_start@@Base+0x3dec>
   18498:	mov	r7, r4
   1849c:	b	184e8 <_start@@Base+0x3ec0>
   184a0:	ldr	r3, [r0, #12]
   184a4:	cmp	r3, #0
   184a8:	bne	184f4 <_start@@Base+0x3ecc>
   184ac:	sub	r3, r7, r6
   184b0:	cmp	r3, #1
   184b4:	ble	184c8 <_start@@Base+0x3ea0>
   184b8:	ldrb	r3, [r6]
   184bc:	cmp	r3, #32
   184c0:	bhi	184dc <_start@@Base+0x3eb4>
   184c4:	beq	183e0 <_start@@Base+0x3db8>
   184c8:	mov	r2, r7
   184cc:	mov	r1, r6
   184d0:	mov	r0, r8
   184d4:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   184d8:	mov	r6, r0
   184dc:	cmp	r7, r6
   184e0:	moveq	r7, r6
   184e4:	bne	183b4 <_start@@Base+0x3d8c>
   184e8:	mov	r0, r7
   184ec:	add	sp, sp, #36	; 0x24
   184f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184f4:	mov	r7, r1
   184f8:	b	184e8 <_start@@Base+0x3ec0>
   184fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18500:	sub	sp, sp, #36	; 0x24
   18504:	mov	r8, r0
   18508:	mov	r6, r1
   1850c:	mov	r7, r2
   18510:	str	r3, [sp, #12]
   18514:	ldr	fp, [sp, #72]	; 0x48
   18518:	mov	r2, #0
   1851c:	mov	r3, #0
   18520:	strd	r2, [fp]
   18524:	cmp	r1, r7
   18528:	beq	18644 <_start@@Base+0x401c>
   1852c:	ldrb	r3, [r1]
   18530:	cmp	r3, #34	; 0x22
   18534:	addeq	r6, r1, #1
   18538:	moveq	r3, #0
   1853c:	streq	r3, [r0, #12]
   18540:	beq	18650 <_start@@Base+0x4028>
   18544:	cmp	r3, #46	; 0x2e
   18548:	movne	r3, #1
   1854c:	strne	r3, [r0, #12]
   18550:	beq	18560 <_start@@Base+0x3f38>
   18554:	add	sl, sp, #16
   18558:	add	r9, sp, #24
   1855c:	b	185d4 <_start@@Base+0x3fac>
   18560:	mov	r3, #5
   18564:	mov	r2, r7
   18568:	mov	r1, r6
   1856c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   18570:	mov	r6, r0
   18574:	ldr	r3, [r8, #12]
   18578:	cmp	r3, #0
   1857c:	beq	18650 <_start@@Base+0x4028>
   18580:	b	18680 <_start@@Base+0x4058>
   18584:	ldrb	r3, [r6, #1]
   18588:	cmp	r3, #32
   1858c:	addhi	r6, r6, #1
   18590:	bls	1866c <_start@@Base+0x4044>
   18594:	b	18680 <_start@@Base+0x4058>
   18598:	mov	r4, r0
   1859c:	ldrd	r0, [sp, #24]
   185a0:	ldr	r3, [sp, #20]
   185a4:	cmp	r3, #0
   185a8:	beq	18630 <_start@@Base+0x4008>
   185ac:	bl	3d3d4 <flatcc_json_printer_clear@@Base+0x588>
   185b0:	vmov	d7, r0, r1
   185b4:	vneg.f64	d6, d7
   185b8:	vldr	d7, [fp]
   185bc:	vadd.f64	d7, d7, d6
   185c0:	vstr	d7, [fp]
   185c4:	ldr	r3, [sp, #16]
   185c8:	cmp	r3, #0
   185cc:	beq	1863c <_start@@Base+0x4014>
   185d0:	mov	r6, r4
   185d4:	ldr	r5, [sp, #12]
   185d8:	str	sl, [sp, #4]
   185dc:	str	r9, [sp]
   185e0:	ldr	r4, [r5]
   185e4:	add	r3, sp, #20
   185e8:	mov	r2, r7
   185ec:	mov	r1, r6
   185f0:	mov	r0, r8
   185f4:	blx	r4
   185f8:	cmp	r7, r0
   185fc:	beq	1868c <_start@@Base+0x4064>
   18600:	cmp	r6, r0
   18604:	bne	18598 <_start@@Base+0x3f70>
   18608:	ldr	r3, [r5, #4]!
   1860c:	cmp	r3, #0
   18610:	bne	185d8 <_start@@Base+0x3fb0>
   18614:	mov	r3, #23
   18618:	mov	r2, r7
   1861c:	mov	r1, r6
   18620:	mov	r0, r8
   18624:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   18628:	mov	r7, r0
   1862c:	b	1868c <_start@@Base+0x4064>
   18630:	bl	3d3d4 <flatcc_json_printer_clear@@Base+0x588>
   18634:	vmov	d6, r0, r1
   18638:	b	185b8 <_start@@Base+0x3f90>
   1863c:	mov	r7, r4
   18640:	b	1868c <_start@@Base+0x4064>
   18644:	ldr	r3, [r0, #12]
   18648:	cmp	r3, #0
   1864c:	bne	18698 <_start@@Base+0x4070>
   18650:	sub	r3, r7, r6
   18654:	cmp	r3, #1
   18658:	ble	1866c <_start@@Base+0x4044>
   1865c:	ldrb	r3, [r6]
   18660:	cmp	r3, #32
   18664:	bhi	18680 <_start@@Base+0x4058>
   18668:	beq	18584 <_start@@Base+0x3f5c>
   1866c:	mov	r2, r7
   18670:	mov	r1, r6
   18674:	mov	r0, r8
   18678:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1867c:	mov	r6, r0
   18680:	cmp	r7, r6
   18684:	moveq	r7, r6
   18688:	bne	18554 <_start@@Base+0x3f2c>
   1868c:	mov	r0, r7
   18690:	add	sp, sp, #36	; 0x24
   18694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18698:	mov	r7, r1
   1869c:	b	1868c <_start@@Base+0x4064>
   186a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186a4:	sub	sp, sp, #36	; 0x24
   186a8:	mov	r8, r0
   186ac:	mov	r6, r1
   186b0:	mov	r7, r2
   186b4:	str	r3, [sp, #12]
   186b8:	mov	r3, #0
   186bc:	ldr	r2, [sp, #72]	; 0x48
   186c0:	strb	r3, [r2]
   186c4:	cmp	r1, r7
   186c8:	beq	18808 <_start@@Base+0x41e0>
   186cc:	ldrb	r3, [r1]
   186d0:	cmp	r3, #34	; 0x22
   186d4:	addeq	r6, r1, #1
   186d8:	moveq	r3, #0
   186dc:	streq	r3, [r0, #12]
   186e0:	beq	18814 <_start@@Base+0x41ec>
   186e4:	cmp	r3, #46	; 0x2e
   186e8:	movne	r3, #1
   186ec:	strne	r3, [r0, #12]
   186f0:	beq	18704 <_start@@Base+0x40dc>
   186f4:	mov	fp, #0
   186f8:	add	sl, sp, #16
   186fc:	add	r9, sp, #24
   18700:	b	18784 <_start@@Base+0x415c>
   18704:	mov	r3, #5
   18708:	mov	r2, r7
   1870c:	mov	r1, r6
   18710:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   18714:	mov	r6, r0
   18718:	ldr	r3, [r8, #12]
   1871c:	cmp	r3, #0
   18720:	beq	18814 <_start@@Base+0x41ec>
   18724:	b	18844 <_start@@Base+0x421c>
   18728:	ldrb	r3, [r6, #1]
   1872c:	cmp	r3, #32
   18730:	addhi	r6, r6, #1
   18734:	bls	18830 <_start@@Base+0x4208>
   18738:	b	18844 <_start@@Base+0x421c>
   1873c:	mov	r4, r0
   18740:	ldr	r3, [sp, #20]
   18744:	cmp	r3, #0
   18748:	bne	187e0 <_start@@Base+0x41b8>
   1874c:	ldr	r3, [sp, #28]
   18750:	ldr	r2, [sp, #24]
   18754:	orrs	r3, r2, r3
   18758:	movne	fp, #1
   1875c:	moveq	fp, #0
   18760:	ldr	r3, [sp, #72]	; 0x48
   18764:	ldrb	r3, [r3]
   18768:	add	r3, fp, r3
   1876c:	ldr	r2, [sp, #72]	; 0x48
   18770:	strb	r3, [r2]
   18774:	ldr	r3, [sp, #16]
   18778:	cmp	r3, #0
   1877c:	beq	18800 <_start@@Base+0x41d8>
   18780:	mov	r6, r4
   18784:	ldr	r5, [sp, #12]
   18788:	str	sl, [sp, #4]
   1878c:	str	r9, [sp]
   18790:	ldr	r4, [r5]
   18794:	add	r3, sp, #20
   18798:	mov	r2, r7
   1879c:	mov	r1, r6
   187a0:	mov	r0, r8
   187a4:	blx	r4
   187a8:	cmp	r7, r0
   187ac:	beq	18850 <_start@@Base+0x4228>
   187b0:	cmp	r6, r0
   187b4:	bne	1873c <_start@@Base+0x4114>
   187b8:	ldr	r3, [r5, #4]!
   187bc:	cmp	r3, #0
   187c0:	bne	18788 <_start@@Base+0x4160>
   187c4:	mov	r3, #23
   187c8:	mov	r2, r7
   187cc:	mov	r1, r6
   187d0:	mov	r0, r8
   187d4:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   187d8:	mov	r7, r0
   187dc:	b	18850 <_start@@Base+0x4228>
   187e0:	mov	r3, #8
   187e4:	mov	r2, r7
   187e8:	mov	r1, r0
   187ec:	mov	r0, r8
   187f0:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   187f4:	cmp	r7, r0
   187f8:	bne	18760 <_start@@Base+0x4138>
   187fc:	b	18850 <_start@@Base+0x4228>
   18800:	mov	r7, r4
   18804:	b	18850 <_start@@Base+0x4228>
   18808:	ldr	r3, [r0, #12]
   1880c:	cmp	r3, #0
   18810:	bne	1885c <_start@@Base+0x4234>
   18814:	sub	r3, r7, r6
   18818:	cmp	r3, #1
   1881c:	ble	18830 <_start@@Base+0x4208>
   18820:	ldrb	r3, [r6]
   18824:	cmp	r3, #32
   18828:	bhi	18844 <_start@@Base+0x421c>
   1882c:	beq	18728 <_start@@Base+0x4100>
   18830:	mov	r2, r7
   18834:	mov	r1, r6
   18838:	mov	r0, r8
   1883c:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   18840:	mov	r6, r0
   18844:	cmp	r7, r6
   18848:	moveq	r7, r6
   1884c:	bne	186f4 <_start@@Base+0x40cc>
   18850:	mov	r0, r7
   18854:	add	sp, sp, #36	; 0x24
   18858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1885c:	mov	r7, r1
   18860:	b	18850 <_start@@Base+0x4228>
   18864:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18868:	sub	sp, sp, #36	; 0x24
   1886c:	mov	r8, r0
   18870:	mov	r6, r1
   18874:	mov	r7, r2
   18878:	str	r3, [sp, #8]
   1887c:	ldr	fp, [sp, #72]	; 0x48
   18880:	mov	r3, #0
   18884:	str	r3, [fp]
   18888:	cmp	r1, r2
   1888c:	beq	189e8 <_start@@Base+0x43c0>
   18890:	ldrb	r3, [r1]
   18894:	cmp	r3, #34	; 0x22
   18898:	addeq	r6, r1, #1
   1889c:	moveq	r3, #0
   188a0:	streq	r3, [r0, #12]
   188a4:	beq	189f4 <_start@@Base+0x43cc>
   188a8:	cmp	r3, #46	; 0x2e
   188ac:	movne	r3, #1
   188b0:	strne	r3, [r0, #12]
   188b4:	beq	188cc <_start@@Base+0x42a4>
   188b8:	mov	r3, #0
   188bc:	str	r3, [sp, #12]
   188c0:	add	sl, sp, #16
   188c4:	add	r9, sp, #24
   188c8:	b	1894c <_start@@Base+0x4324>
   188cc:	mov	r3, #5
   188d0:	mov	r1, r6
   188d4:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   188d8:	mov	r6, r0
   188dc:	ldr	r3, [r8, #12]
   188e0:	cmp	r3, #0
   188e4:	beq	189f4 <_start@@Base+0x43cc>
   188e8:	b	18a24 <_start@@Base+0x43fc>
   188ec:	ldrb	r3, [r6, #1]
   188f0:	cmp	r3, #32
   188f4:	addhi	r6, r6, #1
   188f8:	bls	18a10 <_start@@Base+0x43e8>
   188fc:	b	18a24 <_start@@Base+0x43fc>
   18900:	mov	r4, r0
   18904:	ldr	r3, [sp, #20]
   18908:	cmp	r3, #0
   1890c:	bne	189a8 <_start@@Base+0x4380>
   18910:	ldrd	r2, [sp, #24]
   18914:	mvn	r0, #0
   18918:	mov	r1, #0
   1891c:	cmp	r3, r1
   18920:	cmpeq	r2, r0
   18924:	strls	r2, [sp, #12]
   18928:	bhi	189c8 <_start@@Base+0x43a0>
   1892c:	ldr	r3, [fp]
   18930:	ldr	r2, [sp, #12]
   18934:	add	r3, r3, r2
   18938:	str	r3, [fp]
   1893c:	ldr	r3, [sp, #16]
   18940:	cmp	r3, #0
   18944:	beq	189e0 <_start@@Base+0x43b8>
   18948:	mov	r6, r4
   1894c:	ldr	r5, [sp, #8]
   18950:	str	sl, [sp, #4]
   18954:	str	r9, [sp]
   18958:	ldr	r4, [r5]
   1895c:	add	r3, sp, #20
   18960:	mov	r2, r7
   18964:	mov	r1, r6
   18968:	mov	r0, r8
   1896c:	blx	r4
   18970:	cmp	r7, r0
   18974:	beq	18a30 <_start@@Base+0x4408>
   18978:	cmp	r6, r0
   1897c:	bne	18900 <_start@@Base+0x42d8>
   18980:	ldr	r3, [r5, #4]!
   18984:	cmp	r3, #0
   18988:	bne	18950 <_start@@Base+0x4328>
   1898c:	mov	r3, #23
   18990:	mov	r2, r7
   18994:	mov	r1, r6
   18998:	mov	r0, r8
   1899c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   189a0:	mov	r7, r0
   189a4:	b	18a30 <_start@@Base+0x4408>
   189a8:	mov	r3, #8
   189ac:	mov	r2, r7
   189b0:	mov	r1, r0
   189b4:	mov	r0, r8
   189b8:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   189bc:	cmp	r7, r0
   189c0:	bne	1892c <_start@@Base+0x4304>
   189c4:	b	18a30 <_start@@Base+0x4408>
   189c8:	mov	r3, #7
   189cc:	mov	r2, r7
   189d0:	mov	r1, r4
   189d4:	mov	r0, r8
   189d8:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   189dc:	b	189bc <_start@@Base+0x4394>
   189e0:	mov	r7, r4
   189e4:	b	18a30 <_start@@Base+0x4408>
   189e8:	ldr	r3, [r0, #12]
   189ec:	cmp	r3, #0
   189f0:	bne	18a3c <_start@@Base+0x4414>
   189f4:	sub	r3, r7, r6
   189f8:	cmp	r3, #1
   189fc:	ble	18a10 <_start@@Base+0x43e8>
   18a00:	ldrb	r3, [r6]
   18a04:	cmp	r3, #32
   18a08:	bhi	18a24 <_start@@Base+0x43fc>
   18a0c:	beq	188ec <_start@@Base+0x42c4>
   18a10:	mov	r2, r7
   18a14:	mov	r1, r6
   18a18:	mov	r0, r8
   18a1c:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   18a20:	mov	r6, r0
   18a24:	cmp	r7, r6
   18a28:	moveq	r7, r6
   18a2c:	bne	188b8 <_start@@Base+0x4290>
   18a30:	mov	r0, r7
   18a34:	add	sp, sp, #36	; 0x24
   18a38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a3c:	mov	r7, r1
   18a40:	b	18a30 <_start@@Base+0x4408>
   18a44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a48:	sub	sp, sp, #36	; 0x24
   18a4c:	mov	r8, r0
   18a50:	mov	r6, r1
   18a54:	mov	r7, r2
   18a58:	str	r3, [sp, #12]
   18a5c:	mov	r3, #0
   18a60:	ldr	r2, [sp, #72]	; 0x48
   18a64:	strb	r3, [r2]
   18a68:	cmp	r1, r7
   18a6c:	beq	18bd8 <_start@@Base+0x45b0>
   18a70:	ldrb	r3, [r1]
   18a74:	cmp	r3, #34	; 0x22
   18a78:	addeq	r6, r1, #1
   18a7c:	moveq	r3, #0
   18a80:	streq	r3, [r0, #12]
   18a84:	beq	18be4 <_start@@Base+0x45bc>
   18a88:	cmp	r3, #46	; 0x2e
   18a8c:	movne	r3, #1
   18a90:	strne	r3, [r0, #12]
   18a94:	beq	18aa8 <_start@@Base+0x4480>
   18a98:	mov	fp, #0
   18a9c:	add	sl, sp, #16
   18aa0:	add	r9, sp, #24
   18aa4:	b	18b5c <_start@@Base+0x4534>
   18aa8:	mov	r3, #5
   18aac:	mov	r2, r7
   18ab0:	mov	r1, r6
   18ab4:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   18ab8:	mov	r6, r0
   18abc:	ldr	r3, [r8, #12]
   18ac0:	cmp	r3, #0
   18ac4:	beq	18be4 <_start@@Base+0x45bc>
   18ac8:	b	18c14 <_start@@Base+0x45ec>
   18acc:	ldrb	r3, [r6, #1]
   18ad0:	cmp	r3, #32
   18ad4:	addhi	r6, r6, #1
   18ad8:	bls	18c00 <_start@@Base+0x45d8>
   18adc:	b	18c14 <_start@@Base+0x45ec>
   18ae0:	mov	r4, r0
   18ae4:	ldrd	r2, [sp, #24]
   18ae8:	ldr	r1, [sp, #20]
   18aec:	cmp	r1, #0
   18af0:	beq	18b28 <_start@@Base+0x4500>
   18af4:	cmp	r3, #0
   18af8:	cmpeq	r2, #128	; 0x80
   18afc:	rsbls	fp, r2, #0
   18b00:	sxtbls	fp, fp
   18b04:	bls	18b38 <_start@@Base+0x4510>
   18b08:	mov	r3, #8
   18b0c:	mov	r2, r7
   18b10:	mov	r1, r0
   18b14:	mov	r0, r8
   18b18:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   18b1c:	cmp	r7, r0
   18b20:	bne	18b38 <_start@@Base+0x4510>
   18b24:	b	18c20 <_start@@Base+0x45f8>
   18b28:	cmp	r3, #0
   18b2c:	cmpeq	r2, #127	; 0x7f
   18b30:	sxtbls	fp, r2
   18b34:	bhi	18bb8 <_start@@Base+0x4590>
   18b38:	ldr	r3, [sp, #72]	; 0x48
   18b3c:	ldrb	r3, [r3]
   18b40:	add	r3, r3, fp
   18b44:	ldr	r2, [sp, #72]	; 0x48
   18b48:	strb	r3, [r2]
   18b4c:	ldr	r3, [sp, #16]
   18b50:	cmp	r3, #0
   18b54:	beq	18bd0 <_start@@Base+0x45a8>
   18b58:	mov	r6, r4
   18b5c:	ldr	r5, [sp, #12]
   18b60:	str	sl, [sp, #4]
   18b64:	str	r9, [sp]
   18b68:	ldr	r4, [r5]
   18b6c:	add	r3, sp, #20
   18b70:	mov	r2, r7
   18b74:	mov	r1, r6
   18b78:	mov	r0, r8
   18b7c:	blx	r4
   18b80:	cmp	r7, r0
   18b84:	beq	18c20 <_start@@Base+0x45f8>
   18b88:	cmp	r6, r0
   18b8c:	bne	18ae0 <_start@@Base+0x44b8>
   18b90:	ldr	r3, [r5, #4]!
   18b94:	cmp	r3, #0
   18b98:	bne	18b60 <_start@@Base+0x4538>
   18b9c:	mov	r3, #23
   18ba0:	mov	r2, r7
   18ba4:	mov	r1, r6
   18ba8:	mov	r0, r8
   18bac:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   18bb0:	mov	r7, r0
   18bb4:	b	18c20 <_start@@Base+0x45f8>
   18bb8:	mov	r3, #7
   18bbc:	mov	r2, r7
   18bc0:	mov	r1, r0
   18bc4:	mov	r0, r8
   18bc8:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   18bcc:	b	18b1c <_start@@Base+0x44f4>
   18bd0:	mov	r7, r4
   18bd4:	b	18c20 <_start@@Base+0x45f8>
   18bd8:	ldr	r3, [r0, #12]
   18bdc:	cmp	r3, #0
   18be0:	bne	18c2c <_start@@Base+0x4604>
   18be4:	sub	r3, r7, r6
   18be8:	cmp	r3, #1
   18bec:	ble	18c00 <_start@@Base+0x45d8>
   18bf0:	ldrb	r3, [r6]
   18bf4:	cmp	r3, #32
   18bf8:	bhi	18c14 <_start@@Base+0x45ec>
   18bfc:	beq	18acc <_start@@Base+0x44a4>
   18c00:	mov	r2, r7
   18c04:	mov	r1, r6
   18c08:	mov	r0, r8
   18c0c:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   18c10:	mov	r6, r0
   18c14:	cmp	r7, r6
   18c18:	moveq	r7, r6
   18c1c:	bne	18a98 <_start@@Base+0x4470>
   18c20:	mov	r0, r7
   18c24:	add	sp, sp, #36	; 0x24
   18c28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c2c:	mov	r7, r1
   18c30:	b	18c20 <_start@@Base+0x45f8>
   18c34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c38:	sub	sp, sp, #36	; 0x24
   18c3c:	mov	r8, r0
   18c40:	mov	r6, r1
   18c44:	mov	r7, r2
   18c48:	str	r3, [sp, #12]
   18c4c:	ldr	fp, [sp, #72]	; 0x48
   18c50:	mov	r3, #0
   18c54:	str	r3, [fp]
   18c58:	cmp	r1, r2
   18c5c:	beq	18dcc <_start@@Base+0x47a4>
   18c60:	ldrb	r3, [r1]
   18c64:	cmp	r3, #34	; 0x22
   18c68:	addeq	r6, r1, #1
   18c6c:	moveq	r3, #0
   18c70:	streq	r3, [r0, #12]
   18c74:	beq	18dd8 <_start@@Base+0x47b0>
   18c78:	cmp	r3, #46	; 0x2e
   18c7c:	movne	r3, #1
   18c80:	strne	r3, [r0, #12]
   18c84:	beq	18c9c <_start@@Base+0x4674>
   18c88:	mov	r3, #0
   18c8c:	str	r3, [sp, #8]
   18c90:	add	sl, sp, #16
   18c94:	add	r9, sp, #24
   18c98:	b	18d50 <_start@@Base+0x4728>
   18c9c:	mov	r3, #5
   18ca0:	mov	r1, r6
   18ca4:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   18ca8:	mov	r6, r0
   18cac:	ldr	r3, [r8, #12]
   18cb0:	cmp	r3, #0
   18cb4:	beq	18dd8 <_start@@Base+0x47b0>
   18cb8:	b	18e08 <_start@@Base+0x47e0>
   18cbc:	ldrb	r3, [r6, #1]
   18cc0:	cmp	r3, #32
   18cc4:	addhi	r6, r6, #1
   18cc8:	bls	18df4 <_start@@Base+0x47cc>
   18ccc:	b	18e08 <_start@@Base+0x47e0>
   18cd0:	mov	r4, r0
   18cd4:	ldrd	r2, [sp, #24]
   18cd8:	ldr	r1, [sp, #20]
   18cdc:	cmp	r1, #0
   18ce0:	beq	18d18 <_start@@Base+0x46f0>
   18ce4:	cmp	r3, #0
   18ce8:	cmpeq	r2, #-2147483648	; 0x80000000
   18cec:	rsbls	r3, r2, #0
   18cf0:	strls	r3, [sp, #8]
   18cf4:	bls	18d30 <_start@@Base+0x4708>
   18cf8:	mov	r3, #8
   18cfc:	mov	r2, r7
   18d00:	mov	r1, r0
   18d04:	mov	r0, r8
   18d08:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   18d0c:	cmp	r7, r0
   18d10:	bne	18d30 <_start@@Base+0x4708>
   18d14:	b	18e14 <_start@@Base+0x47ec>
   18d18:	mvn	r0, #-2147483648	; 0x80000000
   18d1c:	mov	r1, #0
   18d20:	cmp	r3, r1
   18d24:	cmpeq	r2, r0
   18d28:	strls	r2, [sp, #8]
   18d2c:	bhi	18dac <_start@@Base+0x4784>
   18d30:	ldr	r3, [fp]
   18d34:	ldr	r2, [sp, #8]
   18d38:	add	r3, r3, r2
   18d3c:	str	r3, [fp]
   18d40:	ldr	r3, [sp, #16]
   18d44:	cmp	r3, #0
   18d48:	beq	18dc4 <_start@@Base+0x479c>
   18d4c:	mov	r6, r4
   18d50:	ldr	r5, [sp, #12]
   18d54:	str	sl, [sp, #4]
   18d58:	str	r9, [sp]
   18d5c:	ldr	r4, [r5]
   18d60:	add	r3, sp, #20
   18d64:	mov	r2, r7
   18d68:	mov	r1, r6
   18d6c:	mov	r0, r8
   18d70:	blx	r4
   18d74:	cmp	r7, r0
   18d78:	beq	18e14 <_start@@Base+0x47ec>
   18d7c:	cmp	r6, r0
   18d80:	bne	18cd0 <_start@@Base+0x46a8>
   18d84:	ldr	r3, [r5, #4]!
   18d88:	cmp	r3, #0
   18d8c:	bne	18d54 <_start@@Base+0x472c>
   18d90:	mov	r3, #23
   18d94:	mov	r2, r7
   18d98:	mov	r1, r6
   18d9c:	mov	r0, r8
   18da0:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   18da4:	mov	r7, r0
   18da8:	b	18e14 <_start@@Base+0x47ec>
   18dac:	mov	r3, #7
   18db0:	mov	r2, r7
   18db4:	mov	r1, r4
   18db8:	mov	r0, r8
   18dbc:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   18dc0:	b	18d0c <_start@@Base+0x46e4>
   18dc4:	mov	r7, r4
   18dc8:	b	18e14 <_start@@Base+0x47ec>
   18dcc:	ldr	r3, [r0, #12]
   18dd0:	cmp	r3, #0
   18dd4:	bne	18e20 <_start@@Base+0x47f8>
   18dd8:	sub	r3, r7, r6
   18ddc:	cmp	r3, #1
   18de0:	ble	18df4 <_start@@Base+0x47cc>
   18de4:	ldrb	r3, [r6]
   18de8:	cmp	r3, #32
   18dec:	bhi	18e08 <_start@@Base+0x47e0>
   18df0:	beq	18cbc <_start@@Base+0x4694>
   18df4:	mov	r2, r7
   18df8:	mov	r1, r6
   18dfc:	mov	r0, r8
   18e00:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   18e04:	mov	r6, r0
   18e08:	cmp	r7, r6
   18e0c:	moveq	r7, r6
   18e10:	bne	18c88 <_start@@Base+0x4660>
   18e14:	mov	r0, r7
   18e18:	add	sp, sp, #36	; 0x24
   18e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e20:	mov	r7, r1
   18e24:	b	18e14 <_start@@Base+0x47ec>
   18e28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e2c:	sub	sp, sp, #36	; 0x24
   18e30:	mov	r8, r0
   18e34:	mov	r6, r1
   18e38:	mov	r7, r2
   18e3c:	str	r3, [sp, #8]
   18e40:	ldr	fp, [sp, #72]	; 0x48
   18e44:	mov	r3, #0
   18e48:	strb	r3, [fp]
   18e4c:	cmp	r1, r2
   18e50:	beq	18fa8 <_start@@Base+0x4980>
   18e54:	ldrb	r3, [r1]
   18e58:	cmp	r3, #34	; 0x22
   18e5c:	addeq	r6, r1, #1
   18e60:	moveq	r3, #0
   18e64:	streq	r3, [r0, #12]
   18e68:	beq	18fb4 <_start@@Base+0x498c>
   18e6c:	cmp	r3, #46	; 0x2e
   18e70:	movne	r3, #1
   18e74:	strne	r3, [r0, #12]
   18e78:	beq	18e90 <_start@@Base+0x4868>
   18e7c:	mov	r3, #0
   18e80:	str	r3, [sp, #12]
   18e84:	add	sl, sp, #16
   18e88:	add	r9, sp, #24
   18e8c:	b	18f0c <_start@@Base+0x48e4>
   18e90:	mov	r3, #5
   18e94:	mov	r1, r6
   18e98:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   18e9c:	mov	r6, r0
   18ea0:	ldr	r3, [r8, #12]
   18ea4:	cmp	r3, #0
   18ea8:	beq	18fb4 <_start@@Base+0x498c>
   18eac:	b	18fe4 <_start@@Base+0x49bc>
   18eb0:	ldrb	r3, [r6, #1]
   18eb4:	cmp	r3, #32
   18eb8:	addhi	r6, r6, #1
   18ebc:	bls	18fd0 <_start@@Base+0x49a8>
   18ec0:	b	18fe4 <_start@@Base+0x49bc>
   18ec4:	mov	r4, r0
   18ec8:	ldr	r3, [sp, #20]
   18ecc:	cmp	r3, #0
   18ed0:	bne	18f68 <_start@@Base+0x4940>
   18ed4:	ldrd	r2, [sp, #24]
   18ed8:	cmp	r3, #0
   18edc:	cmpeq	r2, #255	; 0xff
   18ee0:	uxtbls	r3, r2
   18ee4:	strls	r3, [sp, #12]
   18ee8:	bhi	18f88 <_start@@Base+0x4960>
   18eec:	ldrb	r3, [fp]
   18ef0:	ldr	r2, [sp, #12]
   18ef4:	add	r3, r2, r3
   18ef8:	strb	r3, [fp]
   18efc:	ldr	r3, [sp, #16]
   18f00:	cmp	r3, #0
   18f04:	beq	18fa0 <_start@@Base+0x4978>
   18f08:	mov	r6, r4
   18f0c:	ldr	r5, [sp, #8]
   18f10:	str	sl, [sp, #4]
   18f14:	str	r9, [sp]
   18f18:	ldr	r4, [r5]
   18f1c:	add	r3, sp, #20
   18f20:	mov	r2, r7
   18f24:	mov	r1, r6
   18f28:	mov	r0, r8
   18f2c:	blx	r4
   18f30:	cmp	r7, r0
   18f34:	beq	18ff0 <_start@@Base+0x49c8>
   18f38:	cmp	r6, r0
   18f3c:	bne	18ec4 <_start@@Base+0x489c>
   18f40:	ldr	r3, [r5, #4]!
   18f44:	cmp	r3, #0
   18f48:	bne	18f10 <_start@@Base+0x48e8>
   18f4c:	mov	r3, #23
   18f50:	mov	r2, r7
   18f54:	mov	r1, r6
   18f58:	mov	r0, r8
   18f5c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   18f60:	mov	r7, r0
   18f64:	b	18ff0 <_start@@Base+0x49c8>
   18f68:	mov	r3, #8
   18f6c:	mov	r2, r7
   18f70:	mov	r1, r0
   18f74:	mov	r0, r8
   18f78:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   18f7c:	cmp	r7, r0
   18f80:	bne	18eec <_start@@Base+0x48c4>
   18f84:	b	18ff0 <_start@@Base+0x49c8>
   18f88:	mov	r3, #7
   18f8c:	mov	r2, r7
   18f90:	mov	r1, r0
   18f94:	mov	r0, r8
   18f98:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   18f9c:	b	18f7c <_start@@Base+0x4954>
   18fa0:	mov	r7, r4
   18fa4:	b	18ff0 <_start@@Base+0x49c8>
   18fa8:	ldr	r3, [r0, #12]
   18fac:	cmp	r3, #0
   18fb0:	bne	18ffc <_start@@Base+0x49d4>
   18fb4:	sub	r3, r7, r6
   18fb8:	cmp	r3, #1
   18fbc:	ble	18fd0 <_start@@Base+0x49a8>
   18fc0:	ldrb	r3, [r6]
   18fc4:	cmp	r3, #32
   18fc8:	bhi	18fe4 <_start@@Base+0x49bc>
   18fcc:	beq	18eb0 <_start@@Base+0x4888>
   18fd0:	mov	r2, r7
   18fd4:	mov	r1, r6
   18fd8:	mov	r0, r8
   18fdc:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   18fe0:	mov	r6, r0
   18fe4:	cmp	r7, r6
   18fe8:	moveq	r7, r6
   18fec:	bne	18e7c <_start@@Base+0x4854>
   18ff0:	mov	r0, r7
   18ff4:	add	sp, sp, #36	; 0x24
   18ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ffc:	mov	r7, r1
   19000:	b	18ff0 <_start@@Base+0x49c8>
   19004:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19008:	sub	sp, sp, #36	; 0x24
   1900c:	mov	r8, r0
   19010:	mov	r6, r1
   19014:	mov	r7, r2
   19018:	str	r3, [sp, #12]
   1901c:	mov	r3, #0
   19020:	ldr	r2, [sp, #72]	; 0x48
   19024:	strh	r3, [r2]
   19028:	cmp	r1, r7
   1902c:	beq	191a0 <_start@@Base+0x4b78>
   19030:	ldrb	r3, [r1]
   19034:	cmp	r3, #34	; 0x22
   19038:	addeq	r6, r1, #1
   1903c:	moveq	r3, #0
   19040:	streq	r3, [r0, #12]
   19044:	beq	191ac <_start@@Base+0x4b84>
   19048:	cmp	r3, #46	; 0x2e
   1904c:	movne	r3, #1
   19050:	strne	r3, [r0, #12]
   19054:	beq	19068 <_start@@Base+0x4a40>
   19058:	mov	fp, #0
   1905c:	add	sl, sp, #16
   19060:	add	r9, sp, #24
   19064:	b	19124 <_start@@Base+0x4afc>
   19068:	mov	r3, #5
   1906c:	mov	r2, r7
   19070:	mov	r1, r6
   19074:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   19078:	mov	r6, r0
   1907c:	ldr	r3, [r8, #12]
   19080:	cmp	r3, #0
   19084:	beq	191ac <_start@@Base+0x4b84>
   19088:	b	191dc <_start@@Base+0x4bb4>
   1908c:	ldrb	r3, [r6, #1]
   19090:	cmp	r3, #32
   19094:	addhi	r6, r6, #1
   19098:	bls	191c8 <_start@@Base+0x4ba0>
   1909c:	b	191dc <_start@@Base+0x4bb4>
   190a0:	mov	r4, r0
   190a4:	ldrd	r2, [sp, #24]
   190a8:	ldr	r1, [sp, #20]
   190ac:	cmp	r1, #0
   190b0:	beq	190e8 <_start@@Base+0x4ac0>
   190b4:	cmp	r3, #0
   190b8:	cmpeq	r2, #32768	; 0x8000
   190bc:	rsbls	fp, r2, #0
   190c0:	sxthls	fp, fp
   190c4:	bls	19100 <_start@@Base+0x4ad8>
   190c8:	mov	r3, #8
   190cc:	mov	r2, r7
   190d0:	mov	r1, r0
   190d4:	mov	r0, r8
   190d8:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   190dc:	cmp	r7, r0
   190e0:	bne	19100 <_start@@Base+0x4ad8>
   190e4:	b	191e8 <_start@@Base+0x4bc0>
   190e8:	ldr	r0, [pc, #268]	; 191fc <_start@@Base+0x4bd4>
   190ec:	mov	r1, #0
   190f0:	cmp	r3, r1
   190f4:	cmpeq	r2, r0
   190f8:	sxthls	fp, r2
   190fc:	bhi	19180 <_start@@Base+0x4b58>
   19100:	ldr	r3, [sp, #72]	; 0x48
   19104:	ldrh	r3, [r3]
   19108:	add	r3, r3, fp
   1910c:	ldr	r2, [sp, #72]	; 0x48
   19110:	strh	r3, [r2]
   19114:	ldr	r3, [sp, #16]
   19118:	cmp	r3, #0
   1911c:	beq	19198 <_start@@Base+0x4b70>
   19120:	mov	r6, r4
   19124:	ldr	r5, [sp, #12]
   19128:	str	sl, [sp, #4]
   1912c:	str	r9, [sp]
   19130:	ldr	r4, [r5]
   19134:	add	r3, sp, #20
   19138:	mov	r2, r7
   1913c:	mov	r1, r6
   19140:	mov	r0, r8
   19144:	blx	r4
   19148:	cmp	r7, r0
   1914c:	beq	191e8 <_start@@Base+0x4bc0>
   19150:	cmp	r6, r0
   19154:	bne	190a0 <_start@@Base+0x4a78>
   19158:	ldr	r3, [r5, #4]!
   1915c:	cmp	r3, #0
   19160:	bne	19128 <_start@@Base+0x4b00>
   19164:	mov	r3, #23
   19168:	mov	r2, r7
   1916c:	mov	r1, r6
   19170:	mov	r0, r8
   19174:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   19178:	mov	r7, r0
   1917c:	b	191e8 <_start@@Base+0x4bc0>
   19180:	mov	r3, #7
   19184:	mov	r2, r7
   19188:	mov	r1, r4
   1918c:	mov	r0, r8
   19190:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   19194:	b	190dc <_start@@Base+0x4ab4>
   19198:	mov	r7, r4
   1919c:	b	191e8 <_start@@Base+0x4bc0>
   191a0:	ldr	r3, [r0, #12]
   191a4:	cmp	r3, #0
   191a8:	bne	191f4 <_start@@Base+0x4bcc>
   191ac:	sub	r3, r7, r6
   191b0:	cmp	r3, #1
   191b4:	ble	191c8 <_start@@Base+0x4ba0>
   191b8:	ldrb	r3, [r6]
   191bc:	cmp	r3, #32
   191c0:	bhi	191dc <_start@@Base+0x4bb4>
   191c4:	beq	1908c <_start@@Base+0x4a64>
   191c8:	mov	r2, r7
   191cc:	mov	r1, r6
   191d0:	mov	r0, r8
   191d4:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   191d8:	mov	r6, r0
   191dc:	cmp	r7, r6
   191e0:	moveq	r7, r6
   191e4:	bne	19058 <_start@@Base+0x4a30>
   191e8:	mov	r0, r7
   191ec:	add	sp, sp, #36	; 0x24
   191f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191f4:	mov	r7, r1
   191f8:	b	191e8 <_start@@Base+0x4bc0>
   191fc:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   19200:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19204:	sub	sp, sp, #36	; 0x24
   19208:	mov	r8, r0
   1920c:	mov	r6, r1
   19210:	mov	r7, r2
   19214:	str	r3, [sp, #8]
   19218:	ldr	fp, [sp, #72]	; 0x48
   1921c:	mov	r3, #0
   19220:	strh	r3, [fp]
   19224:	cmp	r1, r2
   19228:	beq	19388 <_start@@Base+0x4d60>
   1922c:	ldrb	r3, [r1]
   19230:	cmp	r3, #34	; 0x22
   19234:	addeq	r6, r1, #1
   19238:	moveq	r3, #0
   1923c:	streq	r3, [r0, #12]
   19240:	beq	19394 <_start@@Base+0x4d6c>
   19244:	cmp	r3, #46	; 0x2e
   19248:	movne	r3, #1
   1924c:	strne	r3, [r0, #12]
   19250:	beq	19268 <_start@@Base+0x4c40>
   19254:	mov	r3, #0
   19258:	str	r3, [sp, #12]
   1925c:	add	sl, sp, #16
   19260:	add	r9, sp, #24
   19264:	b	192ec <_start@@Base+0x4cc4>
   19268:	mov	r3, #5
   1926c:	mov	r1, r6
   19270:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   19274:	mov	r6, r0
   19278:	ldr	r3, [r8, #12]
   1927c:	cmp	r3, #0
   19280:	beq	19394 <_start@@Base+0x4d6c>
   19284:	b	193c4 <_start@@Base+0x4d9c>
   19288:	ldrb	r3, [r6, #1]
   1928c:	cmp	r3, #32
   19290:	addhi	r6, r6, #1
   19294:	bls	193b0 <_start@@Base+0x4d88>
   19298:	b	193c4 <_start@@Base+0x4d9c>
   1929c:	mov	r4, r0
   192a0:	ldr	r3, [sp, #20]
   192a4:	cmp	r3, #0
   192a8:	bne	19348 <_start@@Base+0x4d20>
   192ac:	ldrd	r2, [sp, #24]
   192b0:	ldr	r0, [pc, #300]	; 193e4 <_start@@Base+0x4dbc>
   192b4:	mov	r1, #0
   192b8:	cmp	r3, r1
   192bc:	cmpeq	r2, r0
   192c0:	uxthls	r3, r2
   192c4:	strls	r3, [sp, #12]
   192c8:	bhi	19368 <_start@@Base+0x4d40>
   192cc:	ldrh	r3, [fp]
   192d0:	ldr	r2, [sp, #12]
   192d4:	add	r3, r2, r3
   192d8:	strh	r3, [fp]
   192dc:	ldr	r3, [sp, #16]
   192e0:	cmp	r3, #0
   192e4:	beq	19380 <_start@@Base+0x4d58>
   192e8:	mov	r6, r4
   192ec:	ldr	r5, [sp, #8]
   192f0:	str	sl, [sp, #4]
   192f4:	str	r9, [sp]
   192f8:	ldr	r4, [r5]
   192fc:	add	r3, sp, #20
   19300:	mov	r2, r7
   19304:	mov	r1, r6
   19308:	mov	r0, r8
   1930c:	blx	r4
   19310:	cmp	r7, r0
   19314:	beq	193d0 <_start@@Base+0x4da8>
   19318:	cmp	r6, r0
   1931c:	bne	1929c <_start@@Base+0x4c74>
   19320:	ldr	r3, [r5, #4]!
   19324:	cmp	r3, #0
   19328:	bne	192f0 <_start@@Base+0x4cc8>
   1932c:	mov	r3, #23
   19330:	mov	r2, r7
   19334:	mov	r1, r6
   19338:	mov	r0, r8
   1933c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   19340:	mov	r7, r0
   19344:	b	193d0 <_start@@Base+0x4da8>
   19348:	mov	r3, #8
   1934c:	mov	r2, r7
   19350:	mov	r1, r0
   19354:	mov	r0, r8
   19358:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1935c:	cmp	r7, r0
   19360:	bne	192cc <_start@@Base+0x4ca4>
   19364:	b	193d0 <_start@@Base+0x4da8>
   19368:	mov	r3, #7
   1936c:	mov	r2, r7
   19370:	mov	r1, r4
   19374:	mov	r0, r8
   19378:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1937c:	b	1935c <_start@@Base+0x4d34>
   19380:	mov	r7, r4
   19384:	b	193d0 <_start@@Base+0x4da8>
   19388:	ldr	r3, [r0, #12]
   1938c:	cmp	r3, #0
   19390:	bne	193dc <_start@@Base+0x4db4>
   19394:	sub	r3, r7, r6
   19398:	cmp	r3, #1
   1939c:	ble	193b0 <_start@@Base+0x4d88>
   193a0:	ldrb	r3, [r6]
   193a4:	cmp	r3, #32
   193a8:	bhi	193c4 <_start@@Base+0x4d9c>
   193ac:	beq	19288 <_start@@Base+0x4c60>
   193b0:	mov	r2, r7
   193b4:	mov	r1, r6
   193b8:	mov	r0, r8
   193bc:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   193c0:	mov	r6, r0
   193c4:	cmp	r7, r6
   193c8:	moveq	r7, r6
   193cc:	bne	19254 <_start@@Base+0x4c2c>
   193d0:	mov	r0, r7
   193d4:	add	sp, sp, #36	; 0x24
   193d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193dc:	mov	r7, r1
   193e0:	b	193d0 <_start@@Base+0x4da8>
   193e4:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   193e8:	push	{r4, r5, r6, lr}
   193ec:	mov	r5, r0
   193f0:	mov	r0, r1
   193f4:	mov	r4, r2
   193f8:	sub	r2, r2, r1
   193fc:	cmp	r2, r3
   19400:	pople	{r4, r5, r6, pc}
   19404:	ldr	r2, [r5, #12]
   19408:	cmp	r2, #0
   1940c:	beq	19484 <_start@@Base+0x4e5c>
   19410:	add	r1, r1, r3
   19414:	ldrb	r3, [r0, r3]
   19418:	cmp	r3, #58	; 0x3a
   1941c:	cmpne	r3, #32
   19420:	movls	r3, #0
   19424:	strls	r3, [r5, #12]
   19428:	bhi	19480 <_start@@Base+0x4e58>
   1942c:	sub	r3, r4, r1
   19430:	cmp	r3, #1
   19434:	ble	19448 <_start@@Base+0x4e20>
   19438:	ldrb	r3, [r1]
   1943c:	cmp	r3, #32
   19440:	bhi	19458 <_start@@Base+0x4e30>
   19444:	beq	1949c <_start@@Base+0x4e74>
   19448:	mov	r2, r4
   1944c:	mov	r0, r5
   19450:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   19454:	mov	r1, r0
   19458:	cmp	r4, r1
   1945c:	beq	1946c <_start@@Base+0x4e44>
   19460:	ldrb	r3, [r1]
   19464:	cmp	r3, #58	; 0x3a
   19468:	beq	194b0 <_start@@Base+0x4e88>
   1946c:	mov	r3, #4
   19470:	mov	r2, r4
   19474:	mov	r0, r5
   19478:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1947c:	pop	{r4, r5, r6, pc}
   19480:	pop	{r4, r5, r6, pc}
   19484:	ldrb	r2, [r1, r3]
   19488:	cmp	r2, #34	; 0x22
   1948c:	popne	{r4, r5, r6, pc}
   19490:	add	r3, r3, #1
   19494:	add	r1, r1, r3
   19498:	b	1942c <_start@@Base+0x4e04>
   1949c:	ldrb	r3, [r1, #1]
   194a0:	cmp	r3, #32
   194a4:	addhi	r1, r1, #1
   194a8:	bls	19448 <_start@@Base+0x4e20>
   194ac:	b	19458 <_start@@Base+0x4e30>
   194b0:	mov	r2, r4
   194b4:	add	r1, r1, #1
   194b8:	mov	r0, r5
   194bc:	bl	17d9c <_start@@Base+0x3774>
   194c0:	pop	{r4, r5, r6, pc}
   194c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194c8:	sub	sp, sp, #44	; 0x2c
   194cc:	mov	r5, r0
   194d0:	mov	r4, r1
   194d4:	mov	r8, r2
   194d8:	mov	r9, r3
   194dc:	mov	r3, #0
   194e0:	str	r3, [r9]
   194e4:	mov	r1, #10
   194e8:	ldr	r0, [r0]
   194ec:	bl	27c7c <flatcc_builder_start_table@@Base>
   194f0:	cmp	r0, #0
   194f4:	bne	19dcc <_start@@Base+0x57a4>
   194f8:	add	r3, sp, #32
   194fc:	str	r3, [sp]
   19500:	mov	r3, #5
   19504:	mov	r2, r8
   19508:	mov	r1, r4
   1950c:	mov	r0, r5
   19510:	bl	2f44c <flatcc_json_parser_prepare_unions@@Base>
   19514:	cmp	r8, r0
   19518:	beq	19dcc <_start@@Base+0x57a4>
   1951c:	add	r3, sp, #36	; 0x24
   19520:	mov	r2, r8
   19524:	mov	r1, r4
   19528:	mov	r0, r5
   1952c:	bl	17de0 <_start@@Base+0x37b8>
   19530:	mov	r4, r0
   19534:	ldr	r3, [sp, #36]	; 0x24
   19538:	cmp	r3, #0
   1953c:	beq	19dc0 <_start@@Base+0x5798>
   19540:	add	fp, pc, #920	; 0x398
   19544:	ldrd	sl, [fp]
   19548:	ldr	r3, [pc, #968]	; 19918 <_start@@Base+0x52f0>
   1954c:	add	r3, r3, #64	; 0x40
   19550:	str	r3, [sp, #28]
   19554:	mov	r3, r9
   19558:	mov	r9, r5
   1955c:	mov	r5, r3
   19560:	b	1983c <_start@@Base+0x5214>
   19564:	mov	r3, #5
   19568:	mov	r2, r8
   1956c:	mov	r1, r4
   19570:	mov	r0, r9
   19574:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   19578:	mov	r4, r0
   1957c:	b	1986c <_start@@Base+0x5244>
   19580:	add	r4, r4, #8
   19584:	mov	r1, r8
   19588:	mov	r0, r4
   1958c:	bl	14750 <_start@@Base+0x128>
   19590:	bic	r6, r0, #255	; 0xff
   19594:	add	r3, pc, #844	; 0x34c
   19598:	ldrd	r2, [r3]
   1959c:	cmp	r1, r3
   195a0:	cmpeq	r6, r2
   195a4:	beq	195e4 <_start@@Base+0x4fbc>
   195a8:	mov	r2, #0
   195ac:	ldr	r3, [pc, #872]	; 1991c <_start@@Base+0x52f4>
   195b0:	and	r0, r0, r2
   195b4:	and	r1, r1, r3
   195b8:	mov	r2, #0
   195bc:	ldr	r3, [pc, #860]	; 19920 <_start@@Base+0x52f8>
   195c0:	cmp	r1, r3
   195c4:	cmpeq	r0, r2
   195c8:	beq	19654 <_start@@Base+0x502c>
   195cc:	mov	r2, r8
   195d0:	mov	r1, r4
   195d4:	mov	r0, r9
   195d8:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   195dc:	mov	r1, r0
   195e0:	b	1981c <_start@@Base+0x51f4>
   195e4:	mov	r3, #7
   195e8:	mov	r2, r8
   195ec:	mov	r1, r4
   195f0:	mov	r0, r9
   195f4:	bl	193e8 <_start@@Base+0x4dc0>
   195f8:	cmp	r4, r0
   195fc:	beq	1963c <_start@@Base+0x5014>
   19600:	ldr	r3, [pc, #796]	; 19924 <_start@@Base+0x52fc>
   19604:	str	r3, [sp, #12]
   19608:	ldr	r3, [pc, #776]	; 19918 <_start@@Base+0x52f0>
   1960c:	str	r3, [sp, #8]
   19610:	ldr	r3, [sp, #32]
   19614:	str	r3, [sp, #4]
   19618:	mov	r3, #3
   1961c:	str	r3, [sp]
   19620:	mov	r3, #1
   19624:	mov	r2, r8
   19628:	mov	r1, r0
   1962c:	mov	r0, r9
   19630:	bl	2f664 <flatcc_json_parser_union_type@@Base>
   19634:	mov	r1, r0
   19638:	b	1981c <_start@@Base+0x51f4>
   1963c:	mov	r2, r8
   19640:	mov	r1, r0
   19644:	mov	r0, r9
   19648:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1964c:	mov	r1, r0
   19650:	b	1981c <_start@@Base+0x51f4>
   19654:	mov	r3, #2
   19658:	mov	r2, r8
   1965c:	mov	r1, r4
   19660:	mov	r0, r9
   19664:	bl	193e8 <_start@@Base+0x4dc0>
   19668:	mov	r1, r0
   1966c:	cmp	r4, r0
   19670:	beq	196a4 <_start@@Base+0x507c>
   19674:	ldr	r3, [pc, #680]	; 19924 <_start@@Base+0x52fc>
   19678:	str	r3, [sp, #8]
   1967c:	ldr	r3, [sp, #32]
   19680:	str	r3, [sp, #4]
   19684:	mov	r3, #3
   19688:	str	r3, [sp]
   1968c:	mov	r3, #1
   19690:	mov	r2, r8
   19694:	mov	r0, r9
   19698:	bl	2f510 <flatcc_json_parser_union@@Base>
   1969c:	mov	r1, r0
   196a0:	b	1981c <_start@@Base+0x51f4>
   196a4:	mov	r2, r8
   196a8:	mov	r0, r9
   196ac:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   196b0:	mov	r1, r0
   196b4:	b	1981c <_start@@Base+0x51f4>
   196b8:	add	r4, r4, #8
   196bc:	mov	r1, r8
   196c0:	mov	r0, r4
   196c4:	bl	14750 <_start@@Base+0x128>
   196c8:	mov	r2, #0
   196cc:	ldr	r3, [pc, #584]	; 1991c <_start@@Base+0x52f4>
   196d0:	and	r0, r0, r2
   196d4:	and	r1, r1, r3
   196d8:	mov	r2, #0
   196dc:	ldr	r3, [pc, #580]	; 19928 <_start@@Base+0x5300>
   196e0:	cmp	r1, r3
   196e4:	cmpeq	r0, r2
   196e8:	beq	19704 <_start@@Base+0x50dc>
   196ec:	mov	r2, r8
   196f0:	mov	r1, r4
   196f4:	mov	r0, r9
   196f8:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   196fc:	mov	r1, r0
   19700:	b	1981c <_start@@Base+0x51f4>
   19704:	mov	r3, #2
   19708:	mov	r2, r8
   1970c:	mov	r1, r4
   19710:	mov	r0, r9
   19714:	bl	193e8 <_start@@Base+0x4dc0>
   19718:	cmp	r4, r0
   1971c:	beq	19760 <_start@@Base+0x5138>
   19720:	ldr	r3, [pc, #508]	; 19924 <_start@@Base+0x52fc>
   19724:	str	r3, [sp, #12]
   19728:	ldr	r3, [pc, #488]	; 19918 <_start@@Base+0x52f0>
   1972c:	add	r3, r3, #16
   19730:	str	r3, [sp, #8]
   19734:	ldr	r3, [sp, #32]
   19738:	str	r3, [sp, #4]
   1973c:	mov	r3, #7
   19740:	str	r3, [sp]
   19744:	mov	r3, #3
   19748:	mov	r2, r8
   1974c:	mov	r1, r0
   19750:	mov	r0, r9
   19754:	bl	2f664 <flatcc_json_parser_union_type@@Base>
   19758:	mov	r1, r0
   1975c:	b	1981c <_start@@Base+0x51f4>
   19760:	mov	r2, r8
   19764:	mov	r1, r0
   19768:	mov	r0, r9
   1976c:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   19770:	mov	r1, r0
   19774:	b	1981c <_start@@Base+0x51f4>
   19778:	mov	r3, #5
   1977c:	mov	r2, r8
   19780:	mov	r1, r4
   19784:	mov	r0, r9
   19788:	bl	193e8 <_start@@Base+0x4dc0>
   1978c:	cmp	r0, r4
   19790:	beq	197c8 <_start@@Base+0x51a0>
   19794:	ldr	r3, [pc, #392]	; 19924 <_start@@Base+0x52fc>
   19798:	str	r3, [sp, #8]
   1979c:	ldr	r3, [sp, #32]
   197a0:	str	r3, [sp, #4]
   197a4:	mov	r3, #7
   197a8:	str	r3, [sp]
   197ac:	mov	r3, #3
   197b0:	mov	r2, r8
   197b4:	mov	r1, r0
   197b8:	mov	r0, r9
   197bc:	bl	2f510 <flatcc_json_parser_union@@Base>
   197c0:	mov	r1, r0
   197c4:	b	1981c <_start@@Base+0x51f4>
   197c8:	mov	r2, r8
   197cc:	mov	r1, r0
   197d0:	mov	r0, r9
   197d4:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   197d8:	mov	r1, r0
   197dc:	b	1981c <_start@@Base+0x51f4>
   197e0:	add	r3, pc, #264	; 0x108
   197e4:	ldrd	r2, [r3]
   197e8:	cmp	r1, r3
   197ec:	cmpeq	r0, r2
   197f0:	bhi	19a70 <_start@@Base+0x5448>
   197f4:	add	r3, pc, #252	; 0xfc
   197f8:	ldrd	r2, [r3]
   197fc:	cmp	r1, r3
   19800:	cmpeq	r0, r2
   19804:	beq	1992c <_start@@Base+0x5304>
   19808:	mov	r2, r8
   1980c:	mov	r1, r4
   19810:	mov	r0, r9
   19814:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   19818:	mov	r1, r0
   1981c:	add	r3, sp, #36	; 0x24
   19820:	mov	r2, r8
   19824:	mov	r0, r9
   19828:	bl	18104 <_start@@Base+0x3adc>
   1982c:	mov	r4, r0
   19830:	ldr	r3, [sp, #36]	; 0x24
   19834:	cmp	r3, #0
   19838:	beq	19db4 <_start@@Base+0x578c>
   1983c:	cmp	r8, r4
   19840:	beq	1986c <_start@@Base+0x5244>
   19844:	ldrb	r3, [r4]
   19848:	cmp	r3, #34	; 0x22
   1984c:	addeq	r4, r4, #1
   19850:	moveq	r3, #0
   19854:	streq	r3, [r9, #12]
   19858:	beq	1986c <_start@@Base+0x5244>
   1985c:	cmp	r3, #46	; 0x2e
   19860:	movne	r3, #1
   19864:	strne	r3, [r9, #12]
   19868:	beq	19564 <_start@@Base+0x4f3c>
   1986c:	mov	r1, r8
   19870:	mov	r0, r4
   19874:	bl	14750 <_start@@Base+0x128>
   19878:	cmp	r1, fp
   1987c:	cmpeq	r0, sl
   19880:	bhi	197e0 <_start@@Base+0x51b8>
   19884:	add	r3, pc, #116	; 0x74
   19888:	ldrd	r2, [r3]
   1988c:	cmp	r1, r3
   19890:	cmpeq	r0, r2
   19894:	beq	19580 <_start@@Base+0x4f58>
   19898:	add	r3, pc, #104	; 0x68
   1989c:	ldrd	r2, [r3]
   198a0:	cmp	r1, r3
   198a4:	cmpeq	r0, r2
   198a8:	beq	196b8 <_start@@Base+0x5090>
   198ac:	and	r0, r0, #-16777216	; 0xff000000
   198b0:	add	r3, pc, #88	; 0x58
   198b4:	ldrd	r2, [r3]
   198b8:	cmp	r1, r3
   198bc:	cmpeq	r0, r2
   198c0:	beq	19778 <_start@@Base+0x5150>
   198c4:	mov	r2, r8
   198c8:	mov	r1, r4
   198cc:	mov	r0, r9
   198d0:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   198d4:	mov	r1, r0
   198d8:	b	1981c <_start@@Base+0x51f4>
   198dc:	nop			; (mov r0, r0)
   198e0:	cmnvs	r3, r4, ror #8
   198e4:	cmnvs	r8, #-2147483620	; 0x8000001c
   198e8:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   198ec:	cmnvc	r4, #116, 30	; 0x1d0
   198f0:	svcpl	0x00636860
   198f4:			; <UNDEFINED> instruction: 0x6d61696e
   198f8:	cmnvs	r3, r5, ror #8
   198fc:	cmnvs	r8, #-2147483620	; 0x8000001c
   19900:	strbvs	r6, [pc, -r9, ror #28]!
   19904:	cmnvs	lr, r1, ror #8
   19908:	svcvs	0x005f7479
   1990c:	cmnvs	r1, #6464	; 0x1940
   19910:	svcvs	0x00000000
   19914:	cmnvs	r1, #6464	; 0x1940
   19918:	andeq	r4, r5, r0, ror r0
   1991c:			; <UNDEFINED> instruction: 0xffff0000
   19920:	cmnvc	r4, #0
   19924:	andeq	sp, r1, r0, asr #11
   19928:	rsbvc	r0, r5, r0
   1992c:	add	r4, r4, #8
   19930:	mov	r1, r8
   19934:	mov	r0, r4
   19938:	bl	14750 <_start@@Base+0x128>
   1993c:	bic	r6, r0, #255	; 0xff
   19940:	add	r3, pc, #952	; 0x3b8
   19944:	ldrd	r2, [r3]
   19948:	cmp	r1, r3
   1994c:	cmpeq	r6, r2
   19950:	beq	19990 <_start@@Base+0x5368>
   19954:	mov	r2, #0
   19958:	ldr	r3, [pc, #984]	; 19d38 <_start@@Base+0x5710>
   1995c:	and	r0, r0, r2
   19960:	and	r1, r1, r3
   19964:	mov	r2, #0
   19968:	ldr	r3, [pc, #972]	; 19d3c <_start@@Base+0x5714>
   1996c:	cmp	r1, r3
   19970:	cmpeq	r0, r2
   19974:	beq	19a0c <_start@@Base+0x53e4>
   19978:	mov	r2, r8
   1997c:	mov	r1, r4
   19980:	mov	r0, r9
   19984:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   19988:	mov	r1, r0
   1998c:	b	1981c <_start@@Base+0x51f4>
   19990:	mov	r3, #7
   19994:	mov	r2, r8
   19998:	mov	r1, r4
   1999c:	mov	r0, r9
   199a0:	bl	193e8 <_start@@Base+0x4dc0>
   199a4:	cmp	r4, r0
   199a8:	beq	199f4 <_start@@Base+0x53cc>
   199ac:	ldr	r3, [pc, #908]	; 19d40 <_start@@Base+0x5718>
   199b0:	str	r3, [sp, #16]
   199b4:	ldr	r3, [pc, #908]	; 19d48 <_start@@Base+0x5720>
   199b8:	str	r3, [sp, #12]
   199bc:	ldr	r3, [pc, #896]	; 19d44 <_start@@Base+0x571c>
   199c0:	add	r3, r3, #32
   199c4:	str	r3, [sp, #8]
   199c8:	ldr	r3, [sp, #32]
   199cc:	str	r3, [sp, #4]
   199d0:	mov	r3, #9
   199d4:	str	r3, [sp]
   199d8:	mov	r3, #4
   199dc:	mov	r2, r8
   199e0:	mov	r1, r0
   199e4:	mov	r0, r9
   199e8:	bl	2f958 <flatcc_json_parser_union_type_vector@@Base>
   199ec:	mov	r1, r0
   199f0:	b	1981c <_start@@Base+0x51f4>
   199f4:	mov	r2, r8
   199f8:	mov	r1, r0
   199fc:	mov	r0, r9
   19a00:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   19a04:	mov	r1, r0
   19a08:	b	1981c <_start@@Base+0x51f4>
   19a0c:	mov	r3, #2
   19a10:	mov	r2, r8
   19a14:	mov	r1, r4
   19a18:	mov	r0, r9
   19a1c:	bl	193e8 <_start@@Base+0x4dc0>
   19a20:	mov	r1, r0
   19a24:	cmp	r4, r0
   19a28:	beq	19a5c <_start@@Base+0x5434>
   19a2c:	ldr	r3, [pc, #788]	; 19d48 <_start@@Base+0x5720>
   19a30:	str	r3, [sp, #8]
   19a34:	ldr	r3, [sp, #32]
   19a38:	str	r3, [sp, #4]
   19a3c:	mov	r3, #9
   19a40:	str	r3, [sp]
   19a44:	mov	r3, #4
   19a48:	mov	r2, r8
   19a4c:	mov	r0, r9
   19a50:	bl	2f880 <flatcc_json_parser_union_vector@@Base>
   19a54:	mov	r1, r0
   19a58:	b	1981c <_start@@Base+0x51f4>
   19a5c:	mov	r2, r8
   19a60:	mov	r0, r9
   19a64:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   19a68:	mov	r1, r0
   19a6c:	b	1981c <_start@@Base+0x51f4>
   19a70:	add	r3, pc, #656	; 0x290
   19a74:	ldrd	r2, [r3]
   19a78:	cmp	r1, r3
   19a7c:	cmpeq	r0, r2
   19a80:	beq	19ab0 <_start@@Base+0x5488>
   19a84:	add	r3, pc, #644	; 0x284
   19a88:	ldrd	r2, [r3]
   19a8c:	cmp	r1, r3
   19a90:	cmpeq	r0, r2
   19a94:	beq	19c2c <_start@@Base+0x5604>
   19a98:	mov	r2, r8
   19a9c:	mov	r1, r4
   19aa0:	mov	r0, r9
   19aa4:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   19aa8:	mov	r1, r0
   19aac:	b	1981c <_start@@Base+0x51f4>
   19ab0:	add	r6, r4, #8
   19ab4:	mov	r1, r8
   19ab8:	mov	r0, r6
   19abc:	bl	14750 <_start@@Base+0x128>
   19ac0:	add	r3, pc, #592	; 0x250
   19ac4:	ldrd	r2, [r3]
   19ac8:	cmp	r1, r3
   19acc:	cmpeq	r0, r2
   19ad0:	beq	19b10 <_start@@Base+0x54e8>
   19ad4:	ldr	r2, [pc, #604]	; 19d38 <_start@@Base+0x5710>
   19ad8:	mvn	r3, #0
   19adc:	and	r0, r0, r2
   19ae0:	and	r1, r1, r3
   19ae4:	add	r3, pc, #564	; 0x234
   19ae8:	ldrd	r2, [r3]
   19aec:	cmp	r1, r3
   19af0:	cmpeq	r0, r2
   19af4:	beq	19bc4 <_start@@Base+0x559c>
   19af8:	mov	r2, r8
   19afc:	mov	r1, r6
   19b00:	mov	r0, r9
   19b04:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   19b08:	mov	r1, r0
   19b0c:	b	1981c <_start@@Base+0x51f4>
   19b10:	add	r4, r4, #16
   19b14:	mov	r1, r8
   19b18:	mov	r0, r4
   19b1c:	bl	14750 <_start@@Base+0x128>
   19b20:	mov	r0, #0
   19b24:	bic	r1, r1, #255	; 0xff
   19b28:	add	r3, pc, #504	; 0x1f8
   19b2c:	ldrd	r2, [r3]
   19b30:	cmp	r1, r3
   19b34:	cmpeq	r0, r2
   19b38:	beq	19b54 <_start@@Base+0x552c>
   19b3c:	mov	r2, r8
   19b40:	mov	r1, r4
   19b44:	mov	r0, r9
   19b48:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   19b4c:	mov	r1, r0
   19b50:	b	1981c <_start@@Base+0x51f4>
   19b54:	mov	r3, #3
   19b58:	mov	r2, r8
   19b5c:	mov	r1, r4
   19b60:	mov	r0, r9
   19b64:	bl	193e8 <_start@@Base+0x4dc0>
   19b68:	mov	r1, r0
   19b6c:	cmp	r4, r0
   19b70:	beq	19bb0 <_start@@Base+0x5588>
   19b74:	ldr	r3, [pc, #460]	; 19d48 <_start@@Base+0x5720>
   19b78:	str	r3, [sp, #12]
   19b7c:	ldr	r3, [pc, #448]	; 19d44 <_start@@Base+0x571c>
   19b80:	add	r3, r3, #48	; 0x30
   19b84:	str	r3, [sp, #8]
   19b88:	ldr	r3, [sp, #32]
   19b8c:	str	r3, [sp, #4]
   19b90:	mov	r3, #1
   19b94:	str	r3, [sp]
   19b98:	mov	r3, #0
   19b9c:	mov	r2, r8
   19ba0:	mov	r0, r9
   19ba4:	bl	2f664 <flatcc_json_parser_union_type@@Base>
   19ba8:	mov	r1, r0
   19bac:	b	1981c <_start@@Base+0x51f4>
   19bb0:	mov	r2, r8
   19bb4:	mov	r0, r9
   19bb8:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   19bbc:	mov	r1, r0
   19bc0:	b	1981c <_start@@Base+0x51f4>
   19bc4:	mov	r3, #6
   19bc8:	mov	r2, r8
   19bcc:	mov	r1, r6
   19bd0:	mov	r0, r9
   19bd4:	bl	193e8 <_start@@Base+0x4dc0>
   19bd8:	cmp	r6, r0
   19bdc:	beq	19c14 <_start@@Base+0x55ec>
   19be0:	ldr	r3, [pc, #352]	; 19d48 <_start@@Base+0x5720>
   19be4:	str	r3, [sp, #8]
   19be8:	ldr	r3, [sp, #32]
   19bec:	str	r3, [sp, #4]
   19bf0:	mov	r3, #1
   19bf4:	str	r3, [sp]
   19bf8:	mov	r3, #0
   19bfc:	mov	r2, r8
   19c00:	mov	r1, r0
   19c04:	mov	r0, r9
   19c08:	bl	2f510 <flatcc_json_parser_union@@Base>
   19c0c:	mov	r1, r0
   19c10:	b	1981c <_start@@Base+0x51f4>
   19c14:	mov	r2, r8
   19c18:	mov	r1, r0
   19c1c:	mov	r0, r9
   19c20:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   19c24:	mov	r1, r0
   19c28:	b	1981c <_start@@Base+0x51f4>
   19c2c:	add	r4, r4, #8
   19c30:	mov	r1, r8
   19c34:	mov	r0, r4
   19c38:	bl	14750 <_start@@Base+0x128>
   19c3c:	ldr	r2, [pc, #244]	; 19d38 <_start@@Base+0x5710>
   19c40:	mvn	r3, #0
   19c44:	and	r2, r2, r0
   19c48:	and	r3, r3, r1
   19c4c:	add	r7, pc, #220	; 0xdc
   19c50:	ldrd	r6, [r7]
   19c54:	cmp	r3, r7
   19c58:	cmpeq	r2, r6
   19c5c:	beq	19c8c <_start@@Base+0x5664>
   19c60:	mov	r0, #0
   19c64:	and	r1, r1, #-16777216	; 0xff000000
   19c68:	cmp	r1, #1795162112	; 0x6b000000
   19c6c:	cmpeq	r0, #0
   19c70:	beq	19d4c <_start@@Base+0x5724>
   19c74:	mov	r2, r8
   19c78:	mov	r1, r4
   19c7c:	mov	r0, r9
   19c80:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   19c84:	mov	r1, r0
   19c88:	b	1981c <_start@@Base+0x51f4>
   19c8c:	mov	r3, #6
   19c90:	mov	r2, r8
   19c94:	mov	r1, r4
   19c98:	mov	r0, r9
   19c9c:	bl	193e8 <_start@@Base+0x4dc0>
   19ca0:	cmp	r4, r0
   19ca4:	beq	19ce4 <_start@@Base+0x56bc>
   19ca8:	ldr	r3, [pc, #152]	; 19d48 <_start@@Base+0x5720>
   19cac:	str	r3, [sp, #12]
   19cb0:	ldr	r3, [sp, #28]
   19cb4:	str	r3, [sp, #8]
   19cb8:	ldr	r3, [sp, #32]
   19cbc:	str	r3, [sp, #4]
   19cc0:	mov	r3, #5
   19cc4:	str	r3, [sp]
   19cc8:	mov	r3, #2
   19ccc:	mov	r2, r8
   19cd0:	mov	r1, r0
   19cd4:	mov	r0, r9
   19cd8:	bl	2f664 <flatcc_json_parser_union_type@@Base>
   19cdc:	mov	r1, r0
   19ce0:	b	1981c <_start@@Base+0x51f4>
   19ce4:	mov	r2, r8
   19ce8:	mov	r1, r0
   19cec:	mov	r0, r9
   19cf0:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   19cf4:	mov	r1, r0
   19cf8:	b	1981c <_start@@Base+0x51f4>
   19cfc:	nop			; (mov r0, r0)
   19d00:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   19d04:	rsbsvc	r5, r3, #116, 30	; 0x1d0
   19d08:	svcpl	0x00636861
   19d0c:			; <UNDEFINED> instruction: 0x6d61696e
   19d10:	svcpl	0x006b6963
   19d14:	cmnvc	r9, #1694498816	; 0x65000000
   19d18:	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
   19d1c:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   19d20:	ldrbvs	r0, [r2, #-0]!
   19d24:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   19d28:	andeq	r0, r0, r0
   19d2c:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   19d30:	rsbvc	r0, r5, r0
   19d34:	blvs	17f6f20 <__bss_end__@@Base+0x17a2bd4>
   19d38:			; <UNDEFINED> instruction: 0xffff0000
   19d3c:	rsbsvc	r0, r3, #0
   19d40:	muleq	r1, r8, r8
   19d44:	andeq	r4, r5, r0, ror r0
   19d48:	andeq	sp, r1, r0, asr #11
   19d4c:	mov	r3, #1
   19d50:	mov	r2, r8
   19d54:	mov	r1, r4
   19d58:	mov	r0, r9
   19d5c:	bl	193e8 <_start@@Base+0x4dc0>
   19d60:	cmp	r4, r0
   19d64:	beq	19d9c <_start@@Base+0x5774>
   19d68:	ldr	r3, [pc, #-40]	; 19d48 <_start@@Base+0x5720>
   19d6c:	str	r3, [sp, #8]
   19d70:	ldr	r3, [sp, #32]
   19d74:	str	r3, [sp, #4]
   19d78:	mov	r3, #5
   19d7c:	str	r3, [sp]
   19d80:	mov	r3, #2
   19d84:	mov	r2, r8
   19d88:	mov	r1, r0
   19d8c:	mov	r0, r9
   19d90:	bl	2f510 <flatcc_json_parser_union@@Base>
   19d94:	mov	r1, r0
   19d98:	b	1981c <_start@@Base+0x51f4>
   19d9c:	mov	r2, r8
   19da0:	mov	r1, r0
   19da4:	mov	r0, r9
   19da8:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   19dac:	mov	r1, r0
   19db0:	b	1981c <_start@@Base+0x51f4>
   19db4:	mov	r3, r5
   19db8:	mov	r5, r9
   19dbc:	mov	r9, r3
   19dc0:	ldr	r3, [r5, #24]
   19dc4:	cmp	r3, #0
   19dc8:	beq	19de8 <_start@@Base+0x57c0>
   19dcc:	mov	r3, #33	; 0x21
   19dd0:	mov	r2, r8
   19dd4:	mov	r1, r4
   19dd8:	mov	r0, r5
   19ddc:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   19de0:	add	sp, sp, #44	; 0x2c
   19de4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19de8:	ldr	r3, [sp, #32]
   19dec:	mov	r2, r8
   19df0:	mov	r1, r4
   19df4:	mov	r0, r5
   19df8:	bl	2f4b4 <flatcc_json_parser_finalize_unions@@Base>
   19dfc:	mov	r4, r0
   19e00:	ldr	r0, [r5]
   19e04:	bl	286cc <flatcc_builder_end_table@@Base>
   19e08:	str	r0, [r9]
   19e0c:	cmp	r0, #0
   19e10:	movne	r0, r4
   19e14:	beq	19dcc <_start@@Base+0x57a4>
   19e18:	b	19de0 <_start@@Base+0x57b8>
   19e1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e20:	sub	sp, sp, #148	; 0x94
   19e24:	mov	r6, r0
   19e28:	mov	r4, r1
   19e2c:	mov	r5, r2
   19e30:	mov	r2, r3
   19e34:	str	r3, [sp, #116]	; 0x74
   19e38:	mov	r3, #0
   19e3c:	str	r3, [r2]
   19e40:	mov	r2, #4
   19e44:	mov	r1, r2
   19e48:	ldr	r0, [r0]
   19e4c:	bl	27044 <flatcc_builder_start_struct@@Base>
   19e50:	subs	r3, r0, #0
   19e54:	str	r3, [sp, #112]	; 0x70
   19e58:	beq	1a570 <_start@@Base+0x5f48>
   19e5c:	add	r3, sp, #124	; 0x7c
   19e60:	mov	r2, r5
   19e64:	mov	r1, r4
   19e68:	mov	r0, r6
   19e6c:	bl	17de0 <_start@@Base+0x37b8>
   19e70:	mov	r4, r0
   19e74:	mov	r7, r6
   19e78:	b	1a3cc <_start@@Base+0x5da4>
   19e7c:	mov	r3, #5
   19e80:	mov	r2, r5
   19e84:	mov	r1, r4
   19e88:	mov	r0, r7
   19e8c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   19e90:	mov	r4, r0
   19e94:	b	1a408 <_start@@Base+0x5de0>
   19e98:	ldrb	r2, [r4, #7]
   19e9c:	mov	r3, #0
   19ea0:	b	19eac <_start@@Base+0x5884>
   19ea4:	mov	r2, #0
   19ea8:	mov	r3, #0
   19eac:	ldrb	r0, [r4, #6]
   19eb0:	mov	ip, #0
   19eb4:	str	ip, [sp, #84]	; 0x54
   19eb8:	lsl	r1, r0, #8
   19ebc:	str	r1, [sp, #80]	; 0x50
   19ec0:	ldrd	r0, [sp, #80]	; 0x50
   19ec4:	orr	r0, r0, r2
   19ec8:	orr	r1, r1, r3
   19ecc:	mov	r2, r0
   19ed0:	mov	r3, r1
   19ed4:	ldrb	r0, [r4, #5]
   19ed8:	mov	ip, #0
   19edc:	str	ip, [sp, #60]	; 0x3c
   19ee0:	lsl	r1, r0, #16
   19ee4:	str	r1, [sp, #56]	; 0x38
   19ee8:	ldrd	r0, [sp, #56]	; 0x38
   19eec:	orr	r0, r0, r2
   19ef0:	orr	r1, r1, r3
   19ef4:	mov	r2, r0
   19ef8:	mov	r3, r1
   19efc:	ldrb	r0, [r4, #4]
   19f00:	mov	ip, #0
   19f04:	str	ip, [sp, #36]	; 0x24
   19f08:	lsl	r1, r0, #24
   19f0c:	str	r1, [sp, #32]
   19f10:	ldrd	r0, [sp, #32]
   19f14:	orr	r0, r0, r2
   19f18:	orr	r1, r1, r3
   19f1c:	mov	r2, r0
   19f20:	mov	r3, r1
   19f24:	ldrb	r1, [r4, #3]
   19f28:	str	r1, [sp, #28]
   19f2c:	mov	r1, #0
   19f30:	str	r1, [sp, #24]
   19f34:	ldrd	r0, [sp, #24]
   19f38:	orr	r0, r0, r2
   19f3c:	orr	r1, r1, r3
   19f40:	mov	r2, r0
   19f44:	mov	r3, r1
   19f48:	ldrb	r0, [r4, #2]
   19f4c:	lsl	r1, r0, #8
   19f50:	str	r1, [sp, #20]
   19f54:	mov	r1, #0
   19f58:	str	r1, [sp, #16]
   19f5c:	ldrd	r0, [sp, #16]
   19f60:	orr	r0, r0, r2
   19f64:	orr	r1, r1, r3
   19f68:	mov	r2, r0
   19f6c:	mov	r3, r1
   19f70:	ldrb	r0, [r4, #1]
   19f74:	lsl	r1, r0, #16
   19f78:	str	r1, [sp, #12]
   19f7c:	mov	r1, #0
   19f80:	str	r1, [sp, #8]
   19f84:	ldrd	r0, [sp, #8]
   19f88:	orr	r0, r0, r2
   19f8c:	orr	r1, r1, r3
   19f90:	mov	r2, r0
   19f94:	mov	r3, r1
   19f98:	ldrb	r0, [r4]
   19f9c:	lsl	r9, r0, #24
   19fa0:	mov	r8, #0
   19fa4:	orr	r2, r2, r8
   19fa8:	orr	r3, r3, r9
   19fac:	add	r1, pc, #892	; 0x37c
   19fb0:	ldrd	r0, [r1]
   19fb4:	cmp	r3, r1
   19fb8:	cmpeq	r2, r0
   19fbc:	bne	1a344 <_start@@Base+0x5d1c>
   19fc0:	add	r6, r4, #8
   19fc4:	sub	r3, r5, r6
   19fc8:	cmp	r3, #8
   19fcc:	movcs	r3, #8
   19fd0:	sub	r3, r3, #1
   19fd4:	cmp	r3, #7
   19fd8:	ldrls	pc, [pc, r3, lsl #2]
   19fdc:	b	1a1e0 <_start@@Base+0x5bb8>
   19fe0:	ldrdeq	sl, [r1], -r4
   19fe4:	andeq	sl, r1, r8, asr #3
   19fe8:			; <UNDEFINED> instruction: 0x0001a1bc
   19fec:			; <UNDEFINED> instruction: 0x0001a1b0
   19ff0:	andeq	sl, r1, r4, lsr #3
   19ff4:	muleq	r1, r8, r1
   19ff8:	andeq	sl, r1, r4, asr r0
   19ffc:	andeq	sl, r1, r8, asr #32
   1a000:	mov	r2, #0
   1a004:	mov	r3, #0
   1a008:	b	19ed4 <_start@@Base+0x58ac>
   1a00c:	mov	r2, #0
   1a010:	mov	r3, #0
   1a014:	b	19efc <_start@@Base+0x58d4>
   1a018:	mov	r2, #0
   1a01c:	mov	r3, #0
   1a020:	b	19f24 <_start@@Base+0x58fc>
   1a024:	mov	r2, #0
   1a028:	mov	r3, #0
   1a02c:	b	19f48 <_start@@Base+0x5920>
   1a030:	mov	r2, #0
   1a034:	mov	r3, #0
   1a038:	b	19f70 <_start@@Base+0x5948>
   1a03c:	mov	r2, #0
   1a040:	mov	r3, #0
   1a044:	b	19f98 <_start@@Base+0x5970>
   1a048:	ldrb	r0, [r4, #15]
   1a04c:	mov	r1, #0
   1a050:	b	1a05c <_start@@Base+0x5a34>
   1a054:	mov	r0, #0
   1a058:	mov	r1, #0
   1a05c:	ldrb	r2, [r4, #14]
   1a060:	mov	ip, #0
   1a064:	str	ip, [sp, #108]	; 0x6c
   1a068:	lsl	r3, r2, #8
   1a06c:	str	r3, [sp, #104]	; 0x68
   1a070:	ldrd	r2, [sp, #104]	; 0x68
   1a074:	orr	r2, r2, r0
   1a078:	orr	r3, r3, r1
   1a07c:	mov	r0, r2
   1a080:	mov	r1, r3
   1a084:	ldrb	r2, [r4, #13]
   1a088:	mov	ip, #0
   1a08c:	str	ip, [sp, #100]	; 0x64
   1a090:	lsl	r3, r2, #16
   1a094:	str	r3, [sp, #96]	; 0x60
   1a098:	ldrd	r2, [sp, #96]	; 0x60
   1a09c:	orr	r2, r2, r0
   1a0a0:	orr	r3, r3, r1
   1a0a4:	mov	r0, r2
   1a0a8:	mov	r1, r3
   1a0ac:	ldrb	r2, [r4, #12]
   1a0b0:	mov	ip, #0
   1a0b4:	str	ip, [sp, #92]	; 0x5c
   1a0b8:	lsl	r3, r2, #24
   1a0bc:	str	r3, [sp, #88]	; 0x58
   1a0c0:	ldrd	r2, [sp, #88]	; 0x58
   1a0c4:	orr	r2, r2, r0
   1a0c8:	orr	r3, r3, r1
   1a0cc:	ldrb	r1, [r4, #11]
   1a0d0:	str	r1, [sp, #76]	; 0x4c
   1a0d4:	mov	r1, #0
   1a0d8:	str	r1, [sp, #72]	; 0x48
   1a0dc:	ldrd	r0, [sp, #72]	; 0x48
   1a0e0:	orr	r0, r0, r2
   1a0e4:	orr	r1, r1, r3
   1a0e8:	mov	r2, r0
   1a0ec:	mov	r3, r1
   1a0f0:	ldrb	r0, [r4, #10]
   1a0f4:	lsl	r1, r0, #8
   1a0f8:	str	r1, [sp, #68]	; 0x44
   1a0fc:	mov	r1, #0
   1a100:	str	r1, [sp, #64]	; 0x40
   1a104:	ldrd	r0, [sp, #64]	; 0x40
   1a108:	orr	r0, r0, r2
   1a10c:	orr	r1, r1, r3
   1a110:	mov	r2, r0
   1a114:	mov	r3, r1
   1a118:	ldrb	r0, [r4, #9]
   1a11c:	lsl	r1, r0, #16
   1a120:	str	r1, [sp, #52]	; 0x34
   1a124:	mov	r1, #0
   1a128:	str	r1, [sp, #48]	; 0x30
   1a12c:	ldrd	r0, [sp, #48]	; 0x30
   1a130:	orr	r0, r0, r2
   1a134:	orr	r1, r1, r3
   1a138:	mov	r2, r0
   1a13c:	mov	r3, r1
   1a140:	ldrb	r0, [r4, #8]
   1a144:	lsl	r1, r0, #24
   1a148:	str	r1, [sp, #44]	; 0x2c
   1a14c:	mov	r1, #0
   1a150:	str	r1, [sp, #40]	; 0x28
   1a154:	ldrd	r0, [sp, #40]	; 0x28
   1a158:	orr	r0, r0, r2
   1a15c:	orr	r1, r1, r3
   1a160:	mov	r2, #0
   1a164:	ldr	r3, [pc, #460]	; 1a338 <_start@@Base+0x5d10>
   1a168:	and	r2, r2, r0
   1a16c:	and	r3, r3, r1
   1a170:	mov	r0, #0
   1a174:	ldr	r1, [pc, #448]	; 1a33c <_start@@Base+0x5d14>
   1a178:	cmp	r3, r1
   1a17c:	cmpeq	r2, r0
   1a180:	beq	1a1ec <_start@@Base+0x5bc4>
   1a184:	mov	r2, r5
   1a188:	mov	r1, r6
   1a18c:	mov	r0, r7
   1a190:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1a194:	b	1a354 <_start@@Base+0x5d2c>
   1a198:	mov	r0, #0
   1a19c:	mov	r1, #0
   1a1a0:	b	1a084 <_start@@Base+0x5a5c>
   1a1a4:	mov	r0, #0
   1a1a8:	mov	r1, #0
   1a1ac:	b	1a0ac <_start@@Base+0x5a84>
   1a1b0:	mov	r2, #0
   1a1b4:	mov	r3, #0
   1a1b8:	b	1a0cc <_start@@Base+0x5aa4>
   1a1bc:	mov	r2, #0
   1a1c0:	mov	r3, #0
   1a1c4:	b	1a0f0 <_start@@Base+0x5ac8>
   1a1c8:	mov	r2, #0
   1a1cc:	mov	r3, #0
   1a1d0:	b	1a118 <_start@@Base+0x5af0>
   1a1d4:	mov	r2, #0
   1a1d8:	mov	r3, #0
   1a1dc:	b	1a140 <_start@@Base+0x5b18>
   1a1e0:	mov	r0, #0
   1a1e4:	mov	r1, #0
   1a1e8:	b	1a160 <_start@@Base+0x5b38>
   1a1ec:	mov	r3, #2
   1a1f0:	mov	r2, r5
   1a1f4:	mov	r1, r6
   1a1f8:	mov	r0, r7
   1a1fc:	bl	193e8 <_start@@Base+0x4dc0>
   1a200:	mov	r4, r0
   1a204:	cmp	r6, r0
   1a208:	beq	1a31c <_start@@Base+0x5cf4>
   1a20c:	mov	r3, #0
   1a210:	str	r3, [sp, #128]	; 0x80
   1a214:	mov	r2, #0
   1a218:	mov	r3, #0
   1a21c:	strd	r2, [sp, #136]	; 0x88
   1a220:	mov	r3, #0
   1a224:	str	r3, [sp, #132]	; 0x84
   1a228:	cmp	r5, r0
   1a22c:	beq	1a294 <_start@@Base+0x5c6c>
   1a230:	add	r3, sp, #136	; 0x88
   1a234:	str	r3, [sp]
   1a238:	add	r3, sp, #132	; 0x84
   1a23c:	mov	r2, r5
   1a240:	mov	r1, r0
   1a244:	mov	r0, r7
   1a248:	bl	2ed84 <flatcc_json_parser_integer@@Base>
   1a24c:	cmp	r4, r0
   1a250:	beq	1a294 <_start@@Base+0x5c6c>
   1a254:	ldrd	r2, [sp, #136]	; 0x88
   1a258:	ldr	r1, [sp, #132]	; 0x84
   1a25c:	cmp	r1, #0
   1a260:	beq	1a2dc <_start@@Base+0x5cb4>
   1a264:	cmp	r3, #0
   1a268:	cmpeq	r2, #-2147483648	; 0x80000000
   1a26c:	rsbls	r3, r2, #0
   1a270:	strls	r3, [sp, #128]	; 0x80
   1a274:	bls	1a2f4 <_start@@Base+0x5ccc>
   1a278:	mov	r3, #8
   1a27c:	mov	r2, r5
   1a280:	mov	r1, r0
   1a284:	mov	r0, r7
   1a288:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1a28c:	cmp	r4, r0
   1a290:	bne	1a2f4 <_start@@Base+0x5ccc>
   1a294:	add	r3, sp, #128	; 0x80
   1a298:	str	r3, [sp]
   1a29c:	ldr	r3, [pc, #156]	; 1a340 <_start@@Base+0x5d18>
   1a2a0:	mov	r2, r5
   1a2a4:	mov	r1, r4
   1a2a8:	mov	r0, r7
   1a2ac:	bl	18c34 <_start@@Base+0x460c>
   1a2b0:	cmp	r5, r0
   1a2b4:	cmpne	r4, r0
   1a2b8:	bne	1a2f4 <_start@@Base+0x5ccc>
   1a2bc:	mov	r6, r7
   1a2c0:	mov	r3, #33	; 0x21
   1a2c4:	mov	r2, r5
   1a2c8:	mov	r1, r0
   1a2cc:	mov	r0, r7
   1a2d0:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1a2d4:	mov	r4, r0
   1a2d8:	b	1a550 <_start@@Base+0x5f28>
   1a2dc:	mvn	sl, #-2147483648	; 0x80000000
   1a2e0:	mov	fp, #0
   1a2e4:	cmp	r3, fp
   1a2e8:	cmpeq	r2, sl
   1a2ec:	strls	r2, [sp, #128]	; 0x80
   1a2f0:	bhi	1a304 <_start@@Base+0x5cdc>
   1a2f4:	ldr	r3, [sp, #128]	; 0x80
   1a2f8:	ldr	r2, [sp, #112]	; 0x70
   1a2fc:	str	r3, [r2]
   1a300:	b	1a354 <_start@@Base+0x5d2c>
   1a304:	mov	r3, #7
   1a308:	mov	r2, r5
   1a30c:	mov	r1, r0
   1a310:	mov	r0, r7
   1a314:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1a318:	b	1a28c <_start@@Base+0x5c64>
   1a31c:	mov	r2, r5
   1a320:	mov	r1, r0
   1a324:	mov	r0, r7
   1a328:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1a32c:	b	1a354 <_start@@Base+0x5d2c>
   1a330:	cmpvc	pc, #1342177286	; 0x50000006
   1a334:	rsbvs	r6, pc, #428	; 0x1ac
   1a338:			; <UNDEFINED> instruction: 0xffff0000
   1a33c:	cmnvs	r4, r0
   1a340:	andeq	r4, r5, r0, asr #1
   1a344:	mov	r2, r5
   1a348:	mov	r1, r4
   1a34c:	mov	r0, r7
   1a350:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1a354:	sub	r3, r5, r0
   1a358:	cmp	r3, #1
   1a35c:	ble	1a370 <_start@@Base+0x5d48>
   1a360:	ldrb	r3, [r0]
   1a364:	cmp	r3, #32
   1a368:	bhi	1a380 <_start@@Base+0x5d58>
   1a36c:	beq	1a444 <_start@@Base+0x5e1c>
   1a370:	mov	r2, r5
   1a374:	mov	r1, r0
   1a378:	mov	r0, r7
   1a37c:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1a380:	cmp	r5, r0
   1a384:	moveq	r3, #0
   1a388:	streq	r3, [sp, #124]	; 0x7c
   1a38c:	moveq	r4, r0
   1a390:	beq	1a3cc <_start@@Base+0x5da4>
   1a394:	ldrb	r3, [r0]
   1a398:	cmp	r3, #44	; 0x2c
   1a39c:	beq	1a4a4 <_start@@Base+0x5e7c>
   1a3a0:	mov	r3, #0
   1a3a4:	str	r3, [sp, #124]	; 0x7c
   1a3a8:	ldrb	r3, [r0]
   1a3ac:	cmp	r3, #125	; 0x7d
   1a3b0:	beq	1a458 <_start@@Base+0x5e30>
   1a3b4:	mov	r3, #10
   1a3b8:	mov	r2, r5
   1a3bc:	mov	r1, r0
   1a3c0:	mov	r0, r7
   1a3c4:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1a3c8:	mov	r4, r0
   1a3cc:	ldr	r3, [sp, #124]	; 0x7c
   1a3d0:	cmp	r3, #0
   1a3d4:	beq	1a54c <_start@@Base+0x5f24>
   1a3d8:	cmp	r5, r4
   1a3dc:	beq	1a408 <_start@@Base+0x5de0>
   1a3e0:	ldrb	r3, [r4]
   1a3e4:	cmp	r3, #34	; 0x22
   1a3e8:	addeq	r4, r4, #1
   1a3ec:	moveq	r3, #0
   1a3f0:	streq	r3, [r7, #12]
   1a3f4:	beq	1a408 <_start@@Base+0x5de0>
   1a3f8:	cmp	r3, #46	; 0x2e
   1a3fc:	movne	r3, #1
   1a400:	strne	r3, [r7, #12]
   1a404:	beq	19e7c <_start@@Base+0x5854>
   1a408:	sub	r3, r5, r4
   1a40c:	cmp	r3, #8
   1a410:	movcs	r3, #8
   1a414:	sub	r3, r3, #1
   1a418:	cmp	r3, #7
   1a41c:	ldrls	pc, [pc, r3, lsl #2]
   1a420:	b	1a344 <_start@@Base+0x5d1c>
   1a424:	andeq	sl, r1, ip, lsr r0
   1a428:	andeq	sl, r1, r0, lsr r0
   1a42c:	andeq	sl, r1, r4, lsr #32
   1a430:	andeq	sl, r1, r8, lsl r0
   1a434:	andeq	sl, r1, ip
   1a438:	andeq	sl, r1, r0
   1a43c:	andeq	r9, r1, r4, lsr #29
   1a440:	muleq	r1, r8, lr
   1a444:	ldrb	r3, [r0, #1]
   1a448:	cmp	r3, #32
   1a44c:	addhi	r0, r0, #1
   1a450:	bls	1a370 <_start@@Base+0x5d48>
   1a454:	b	1a380 <_start@@Base+0x5d58>
   1a458:	add	r4, r0, #1
   1a45c:	sub	r3, r5, r4
   1a460:	cmp	r3, #1
   1a464:	ble	1a478 <_start@@Base+0x5e50>
   1a468:	ldrb	r3, [r0, #1]
   1a46c:	cmp	r3, #32
   1a470:	bhi	1a3cc <_start@@Base+0x5da4>
   1a474:	beq	1a490 <_start@@Base+0x5e68>
   1a478:	mov	r2, r5
   1a47c:	mov	r1, r4
   1a480:	mov	r0, r7
   1a484:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1a488:	mov	r4, r0
   1a48c:	b	1a3cc <_start@@Base+0x5da4>
   1a490:	ldrb	r3, [r0, #2]
   1a494:	cmp	r3, #32
   1a498:	addhi	r4, r0, #2
   1a49c:	bls	1a478 <_start@@Base+0x5e50>
   1a4a0:	b	1a3cc <_start@@Base+0x5da4>
   1a4a4:	add	r4, r0, #1
   1a4a8:	sub	r3, r5, r4
   1a4ac:	cmp	r3, #1
   1a4b0:	ble	1a4c4 <_start@@Base+0x5e9c>
   1a4b4:	ldrb	r3, [r0, #1]
   1a4b8:	cmp	r3, #32
   1a4bc:	bhi	1a4d8 <_start@@Base+0x5eb0>
   1a4c0:	beq	1a514 <_start@@Base+0x5eec>
   1a4c4:	mov	r2, r5
   1a4c8:	mov	r1, r4
   1a4cc:	mov	r0, r7
   1a4d0:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1a4d4:	mov	r4, r0
   1a4d8:	cmp	r5, r4
   1a4dc:	beq	1a528 <_start@@Base+0x5f00>
   1a4e0:	ldrb	r3, [r4]
   1a4e4:	cmp	r3, #125	; 0x7d
   1a4e8:	movne	r3, #1
   1a4ec:	strne	r3, [sp, #124]	; 0x7c
   1a4f0:	bne	1a3cc <_start@@Base+0x5da4>
   1a4f4:	mov	r3, #0
   1a4f8:	str	r3, [sp, #124]	; 0x7c
   1a4fc:	mov	r2, r5
   1a500:	add	r1, r4, #1
   1a504:	mov	r0, r7
   1a508:	bl	17d9c <_start@@Base+0x3774>
   1a50c:	mov	r4, r0
   1a510:	b	1a3cc <_start@@Base+0x5da4>
   1a514:	ldrb	r3, [r0, #2]
   1a518:	cmp	r3, #32
   1a51c:	addhi	r4, r0, #2
   1a520:	bls	1a4c4 <_start@@Base+0x5e9c>
   1a524:	b	1a4d8 <_start@@Base+0x5eb0>
   1a528:	mov	r3, #0
   1a52c:	str	r3, [sp, #124]	; 0x7c
   1a530:	mov	r3, #10
   1a534:	mov	r2, r5
   1a538:	mov	r1, r4
   1a53c:	mov	r0, r7
   1a540:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1a544:	mov	r4, r0
   1a548:	b	1a3cc <_start@@Base+0x5da4>
   1a54c:	mov	r6, r7
   1a550:	cmp	r5, r4
   1a554:	beq	1a570 <_start@@Base+0x5f48>
   1a558:	ldr	r0, [r6]
   1a55c:	bl	270ec <flatcc_builder_end_struct@@Base>
   1a560:	ldr	r3, [sp, #116]	; 0x74
   1a564:	str	r0, [r3]
   1a568:	cmp	r0, #0
   1a56c:	bne	1a588 <_start@@Base+0x5f60>
   1a570:	mov	r3, #33	; 0x21
   1a574:	mov	r2, r5
   1a578:	mov	r1, r4
   1a57c:	mov	r0, r6
   1a580:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1a584:	mov	r4, r0
   1a588:	mov	r0, r4
   1a58c:	add	sp, sp, #148	; 0x94
   1a590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a594:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a598:	sub	sp, sp, #100	; 0x64
   1a59c:	mov	r6, r0
   1a5a0:	mov	r5, r2
   1a5a4:	str	r3, [sp, #60]	; 0x3c
   1a5a8:	add	r3, sp, #92	; 0x5c
   1a5ac:	bl	17de0 <_start@@Base+0x37b8>
   1a5b0:	mov	r4, r0
   1a5b4:	mov	r7, #0
   1a5b8:	ldr	r3, [pc, #1644]	; 1ac2c <_start@@Base+0x6604>
   1a5bc:	add	r3, r3, #104	; 0x68
   1a5c0:	str	r3, [sp, #68]	; 0x44
   1a5c4:	strd	sl, [sp, #8]
   1a5c8:	b	1a764 <_start@@Base+0x613c>
   1a5cc:	mov	r3, #5
   1a5d0:	mov	r2, r5
   1a5d4:	mov	r1, r4
   1a5d8:	mov	r0, r6
   1a5dc:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1a5e0:	mov	r4, r0
   1a5e4:	b	1a79c <_start@@Base+0x6174>
   1a5e8:	mov	r3, #0
   1a5ec:	b	1a5f4 <_start@@Base+0x5fcc>
   1a5f0:	mov	r3, #0
   1a5f4:	ldrb	r0, [r4, #6]
   1a5f8:	mov	lr, #0
   1a5fc:	str	lr, [sp, #52]	; 0x34
   1a600:	lsl	r1, r0, #8
   1a604:	str	r1, [sp, #48]	; 0x30
   1a608:	ldrd	r0, [sp, #48]	; 0x30
   1a60c:	orr	r1, r1, r3
   1a610:	mov	r3, r1
   1a614:	ldrb	r0, [r4, #5]
   1a618:	mov	lr, #0
   1a61c:	str	lr, [sp, #44]	; 0x2c
   1a620:	lsl	r1, r0, #16
   1a624:	str	r1, [sp, #40]	; 0x28
   1a628:	ldrd	r0, [sp, #40]	; 0x28
   1a62c:	orr	r1, r1, r3
   1a630:	mov	r3, r1
   1a634:	ldrb	r0, [r4, #4]
   1a638:	mov	lr, #0
   1a63c:	str	lr, [sp, #36]	; 0x24
   1a640:	lsl	r1, r0, #24
   1a644:	str	r1, [sp, #32]
   1a648:	ldrd	r0, [sp, #32]
   1a64c:	orr	r1, r1, r3
   1a650:	mov	r3, r1
   1a654:	ldrb	r1, [r4, #3]
   1a658:	str	r1, [sp, #28]
   1a65c:	mov	r1, #0
   1a660:	str	r1, [sp, #24]
   1a664:	ldrd	r0, [sp, #24]
   1a668:	orr	r1, r1, r3
   1a66c:	mov	r3, r1
   1a670:	ldrb	r0, [r4, #2]
   1a674:	lsl	r1, r0, #8
   1a678:	str	r1, [sp, #20]
   1a67c:	mov	r1, #0
   1a680:	str	r1, [sp, #16]
   1a684:	ldrd	r0, [sp, #16]
   1a688:	orr	r1, r1, r3
   1a68c:	mov	r3, r1
   1a690:	ldrb	r0, [r4, #1]
   1a694:	lsl	r1, r0, #16
   1a698:	str	r1, [sp, #12]
   1a69c:	mov	r1, #0
   1a6a0:	str	r1, [sp, #8]
   1a6a4:	ldrd	r0, [sp, #8]
   1a6a8:	orr	r1, r1, r3
   1a6ac:	mov	r3, r1
   1a6b0:	ldrb	r0, [r4]
   1a6b4:	mov	r1, #0
   1a6b8:	lsl	r9, r0, #24
   1a6bc:	mov	r8, #0
   1a6c0:	orr	r3, r3, r9
   1a6c4:	mov	r2, #0
   1a6c8:	and	r3, r3, #-16777216	; 0xff000000
   1a6cc:	cmp	r3, #1644167168	; 0x62000000
   1a6d0:	cmpeq	r2, #0
   1a6d4:	beq	1a80c <_start@@Base+0x61e4>
   1a6d8:	cmp	r3, #1627389952	; 0x61000000
   1a6dc:	cmpeq	r2, #0
   1a6e0:	beq	1a930 <_start@@Base+0x6308>
   1a6e4:	mov	r2, r5
   1a6e8:	mov	r1, r4
   1a6ec:	mov	r0, r6
   1a6f0:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1a6f4:	sub	r3, r5, r0
   1a6f8:	cmp	r3, #1
   1a6fc:	ble	1a710 <_start@@Base+0x60e8>
   1a700:	ldrb	r3, [r0]
   1a704:	cmp	r3, #32
   1a708:	bhi	1a720 <_start@@Base+0x60f8>
   1a70c:	beq	1ab24 <_start@@Base+0x64fc>
   1a710:	mov	r2, r5
   1a714:	mov	r1, r0
   1a718:	mov	r0, r6
   1a71c:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1a720:	cmp	r5, r0
   1a724:	streq	r7, [sp, #92]	; 0x5c
   1a728:	moveq	r4, r0
   1a72c:	beq	1a764 <_start@@Base+0x613c>
   1a730:	ldrb	r3, [r0]
   1a734:	cmp	r3, #44	; 0x2c
   1a738:	beq	1ab84 <_start@@Base+0x655c>
   1a73c:	str	r7, [sp, #92]	; 0x5c
   1a740:	ldrb	r3, [r0]
   1a744:	cmp	r3, #125	; 0x7d
   1a748:	beq	1ab38 <_start@@Base+0x6510>
   1a74c:	mov	r3, #10
   1a750:	mov	r2, r5
   1a754:	mov	r1, r0
   1a758:	mov	r0, r6
   1a75c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1a760:	mov	r4, r0
   1a764:	ldr	r3, [sp, #92]	; 0x5c
   1a768:	cmp	r3, #0
   1a76c:	beq	1aa84 <_start@@Base+0x645c>
   1a770:	cmp	r4, r5
   1a774:	beq	1ac24 <_start@@Base+0x65fc>
   1a778:	ldrb	r3, [r4]
   1a77c:	cmp	r3, #34	; 0x22
   1a780:	addeq	r4, r4, #1
   1a784:	streq	r7, [r6, #12]
   1a788:	beq	1a79c <_start@@Base+0x6174>
   1a78c:	cmp	r3, #46	; 0x2e
   1a790:	movne	r3, #1
   1a794:	strne	r3, [r6, #12]
   1a798:	beq	1a5cc <_start@@Base+0x5fa4>
   1a79c:	sub	ip, r5, r4
   1a7a0:	cmp	ip, #8
   1a7a4:	movcc	r3, ip
   1a7a8:	movcs	r3, #8
   1a7ac:	sub	r3, r3, #1
   1a7b0:	cmp	r3, #7
   1a7b4:	ldrls	pc, [pc, r3, lsl #2]
   1a7b8:	b	1a6e4 <_start@@Base+0x60bc>
   1a7bc:	andeq	sl, r1, r4, lsl #16
   1a7c0:	strdeq	sl, [r1], -ip
   1a7c4:	strdeq	sl, [r1], -r4
   1a7c8:	andeq	sl, r1, ip, ror #15
   1a7cc:	andeq	sl, r1, r4, ror #15
   1a7d0:	ldrdeq	sl, [r1], -ip
   1a7d4:	strdeq	sl, [r1], -r0
   1a7d8:	andeq	sl, r1, r8, ror #11
   1a7dc:	mov	r3, #0
   1a7e0:	b	1a614 <_start@@Base+0x5fec>
   1a7e4:	mov	r3, #0
   1a7e8:	b	1a634 <_start@@Base+0x600c>
   1a7ec:	mov	r3, #0
   1a7f0:	b	1a654 <_start@@Base+0x602c>
   1a7f4:	mov	r3, #0
   1a7f8:	b	1a670 <_start@@Base+0x6048>
   1a7fc:	mov	r3, #0
   1a800:	b	1a690 <_start@@Base+0x6068>
   1a804:	mov	r3, #0
   1a808:	b	1a6b0 <_start@@Base+0x6088>
   1a80c:	mov	r3, #1
   1a810:	mov	r2, r5
   1a814:	mov	r1, r4
   1a818:	mov	r0, r6
   1a81c:	bl	193e8 <_start@@Base+0x4dc0>
   1a820:	mov	r1, r0
   1a824:	mov	sl, r0
   1a828:	cmp	r0, r4
   1a82c:	beq	1a91c <_start@@Base+0x62f4>
   1a830:	strb	r7, [sp, #74]	; 0x4a
   1a834:	mov	r2, #0
   1a838:	mov	r3, #0
   1a83c:	strd	r2, [sp, #80]	; 0x50
   1a840:	str	r7, [sp, #76]	; 0x4c
   1a844:	mov	r4, r0
   1a848:	cmp	r5, r0
   1a84c:	beq	1a8b0 <_start@@Base+0x6288>
   1a850:	add	r3, sp, #80	; 0x50
   1a854:	str	r3, [sp]
   1a858:	add	r3, sp, #76	; 0x4c
   1a85c:	mov	r2, r5
   1a860:	mov	r0, r6
   1a864:	bl	2ed84 <flatcc_json_parser_integer@@Base>
   1a868:	cmp	sl, r0
   1a86c:	beq	1a8b0 <_start@@Base+0x6288>
   1a870:	ldrd	r2, [sp, #80]	; 0x50
   1a874:	ldr	r1, [sp, #76]	; 0x4c
   1a878:	cmp	r1, r8
   1a87c:	beq	1a8e4 <_start@@Base+0x62bc>
   1a880:	cmp	r3, #0
   1a884:	cmpeq	r2, #128	; 0x80
   1a888:	rsbls	r2, r2, #0
   1a88c:	strbls	r2, [sp, #74]	; 0x4a
   1a890:	bls	1a8f4 <_start@@Base+0x62cc>
   1a894:	mov	r3, #8
   1a898:	mov	r2, r5
   1a89c:	mov	r1, r0
   1a8a0:	mov	r0, r6
   1a8a4:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1a8a8:	cmp	sl, r0
   1a8ac:	bne	1a8f4 <_start@@Base+0x62cc>
   1a8b0:	add	r3, sp, #74	; 0x4a
   1a8b4:	str	r3, [sp]
   1a8b8:	ldr	r3, [pc, #876]	; 1ac2c <_start@@Base+0x6604>
   1a8bc:	add	r3, r3, #92	; 0x5c
   1a8c0:	mov	r2, r5
   1a8c4:	mov	r4, sl
   1a8c8:	mov	r1, sl
   1a8cc:	mov	r0, r6
   1a8d0:	bl	18a44 <_start@@Base+0x441c>
   1a8d4:	cmp	r5, r0
   1a8d8:	cmpne	sl, r0
   1a8dc:	bne	1a8f4 <_start@@Base+0x62cc>
   1a8e0:	b	1aa6c <_start@@Base+0x6444>
   1a8e4:	cmp	r3, #0
   1a8e8:	cmpeq	r2, #127	; 0x7f
   1a8ec:	strbls	r2, [sp, #74]	; 0x4a
   1a8f0:	bhi	1a904 <_start@@Base+0x62dc>
   1a8f4:	ldrb	r3, [sp, #74]	; 0x4a
   1a8f8:	ldr	r2, [sp, #60]	; 0x3c
   1a8fc:	strb	r3, [r2, #2]
   1a900:	b	1a6f4 <_start@@Base+0x60cc>
   1a904:	mov	r3, #7
   1a908:	mov	r2, r5
   1a90c:	mov	r1, r0
   1a910:	mov	r0, r6
   1a914:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1a918:	b	1a8a8 <_start@@Base+0x6280>
   1a91c:	mov	r2, r5
   1a920:	mov	r1, r0
   1a924:	mov	r0, r6
   1a928:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1a92c:	b	1a6f4 <_start@@Base+0x60cc>
   1a930:	cmp	ip, #1
   1a934:	ble	1aa9c <_start@@Base+0x6474>
   1a938:	ldr	r3, [r6, #12]
   1a93c:	cmp	r3, #0
   1a940:	beq	1aa90 <_start@@Base+0x6468>
   1a944:	ldrb	r3, [r4, #1]
   1a948:	cmp	r3, #58	; 0x3a
   1a94c:	cmpne	r3, #32
   1a950:	addls	r1, r4, #1
   1a954:	strls	r7, [r6, #12]
   1a958:	bhi	1aa9c <_start@@Base+0x6474>
   1a95c:	sub	r3, r5, r1
   1a960:	cmp	r3, #1
   1a964:	ble	1a978 <_start@@Base+0x6350>
   1a968:	ldrb	r3, [r1]
   1a96c:	cmp	r3, #32
   1a970:	bhi	1a988 <_start@@Base+0x6360>
   1a974:	beq	1aab8 <_start@@Base+0x6490>
   1a978:	mov	r2, r5
   1a97c:	mov	r0, r6
   1a980:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1a984:	mov	r1, r0
   1a988:	cmp	r5, r1
   1a98c:	beq	1a99c <_start@@Base+0x6374>
   1a990:	ldrb	r3, [r1]
   1a994:	cmp	r3, #58	; 0x3a
   1a998:	beq	1aacc <_start@@Base+0x64a4>
   1a99c:	mov	r3, #4
   1a9a0:	mov	r2, r5
   1a9a4:	mov	r0, r6
   1a9a8:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1a9ac:	str	r0, [sp, #64]	; 0x40
   1a9b0:	ldr	r1, [sp, #64]	; 0x40
   1a9b4:	cmp	r1, r4
   1a9b8:	beq	1aa9c <_start@@Base+0x6474>
   1a9bc:	strh	r7, [sp, #74]	; 0x4a
   1a9c0:	mov	r2, #0
   1a9c4:	mov	r3, #0
   1a9c8:	strd	r2, [sp, #80]	; 0x50
   1a9cc:	str	r7, [sp, #76]	; 0x4c
   1a9d0:	mov	r4, r1
   1a9d4:	cmp	r5, r1
   1a9d8:	beq	1aa40 <_start@@Base+0x6418>
   1a9dc:	add	r3, sp, #80	; 0x50
   1a9e0:	str	r3, [sp]
   1a9e4:	add	r3, sp, #76	; 0x4c
   1a9e8:	mov	r2, r5
   1a9ec:	mov	r0, r6
   1a9f0:	bl	2ed84 <flatcc_json_parser_integer@@Base>
   1a9f4:	cmp	r4, r0
   1a9f8:	beq	1aa40 <_start@@Base+0x6418>
   1a9fc:	ldrd	r2, [sp, #80]	; 0x50
   1aa00:	ldr	r1, [sp, #76]	; 0x4c
   1aa04:	cmp	r1, #0
   1aa08:	beq	1aae4 <_start@@Base+0x64bc>
   1aa0c:	cmp	r3, #0
   1aa10:	cmpeq	r2, #32768	; 0x8000
   1aa14:	rsbls	r2, r2, #0
   1aa18:	strhls	r2, [sp, #74]	; 0x4a
   1aa1c:	bls	1aafc <_start@@Base+0x64d4>
   1aa20:	mov	r3, #8
   1aa24:	mov	r2, r5
   1aa28:	mov	r1, r0
   1aa2c:	mov	r0, r6
   1aa30:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1aa34:	ldr	r3, [sp, #64]	; 0x40
   1aa38:	cmp	r3, r0
   1aa3c:	bne	1aafc <_start@@Base+0x64d4>
   1aa40:	add	r3, sp, #74	; 0x4a
   1aa44:	str	r3, [sp]
   1aa48:	ldr	r3, [sp, #68]	; 0x44
   1aa4c:	mov	r2, r5
   1aa50:	ldr	r4, [sp, #64]	; 0x40
   1aa54:	mov	r1, r4
   1aa58:	mov	r0, r6
   1aa5c:	bl	19004 <_start@@Base+0x49dc>
   1aa60:	cmp	r5, r0
   1aa64:	cmpne	r0, r4
   1aa68:	bne	1aafc <_start@@Base+0x64d4>
   1aa6c:	mov	r3, #33	; 0x21
   1aa70:	mov	r2, r5
   1aa74:	mov	r1, r0
   1aa78:	mov	r0, r6
   1aa7c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1aa80:	mov	r4, r0
   1aa84:	mov	r0, r4
   1aa88:	add	sp, sp, #100	; 0x64
   1aa8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa90:	ldrb	r3, [r4, #1]
   1aa94:	cmp	r3, #34	; 0x22
   1aa98:	beq	1aab0 <_start@@Base+0x6488>
   1aa9c:	mov	r2, r5
   1aaa0:	mov	r1, r4
   1aaa4:	mov	r0, r6
   1aaa8:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1aaac:	b	1a6f4 <_start@@Base+0x60cc>
   1aab0:	add	r1, r4, #2
   1aab4:	b	1a95c <_start@@Base+0x6334>
   1aab8:	ldrb	r3, [r1, #1]
   1aabc:	cmp	r3, #32
   1aac0:	addhi	r1, r1, #1
   1aac4:	bls	1a978 <_start@@Base+0x6350>
   1aac8:	b	1a988 <_start@@Base+0x6360>
   1aacc:	mov	r2, r5
   1aad0:	add	r1, r1, #1
   1aad4:	mov	r0, r6
   1aad8:	bl	17d9c <_start@@Base+0x3774>
   1aadc:	str	r0, [sp, #64]	; 0x40
   1aae0:	b	1a9b0 <_start@@Base+0x6388>
   1aae4:	ldr	sl, [pc, #324]	; 1ac30 <_start@@Base+0x6608>
   1aae8:	mov	fp, #0
   1aaec:	cmp	r3, fp
   1aaf0:	cmpeq	r2, sl
   1aaf4:	strhls	r2, [sp, #74]	; 0x4a
   1aaf8:	bhi	1ab0c <_start@@Base+0x64e4>
   1aafc:	ldrh	r3, [sp, #74]	; 0x4a
   1ab00:	ldr	r2, [sp, #60]	; 0x3c
   1ab04:	strh	r3, [r2]
   1ab08:	b	1a6f4 <_start@@Base+0x60cc>
   1ab0c:	mov	r3, #7
   1ab10:	mov	r2, r5
   1ab14:	mov	r1, r0
   1ab18:	mov	r0, r6
   1ab1c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1ab20:	b	1aa34 <_start@@Base+0x640c>
   1ab24:	ldrb	r3, [r0, #1]
   1ab28:	cmp	r3, #32
   1ab2c:	addhi	r0, r0, #1
   1ab30:	bls	1a710 <_start@@Base+0x60e8>
   1ab34:	b	1a720 <_start@@Base+0x60f8>
   1ab38:	add	r4, r0, #1
   1ab3c:	sub	r3, r5, r4
   1ab40:	cmp	r3, #1
   1ab44:	ble	1ab58 <_start@@Base+0x6530>
   1ab48:	ldrb	r3, [r0, #1]
   1ab4c:	cmp	r3, #32
   1ab50:	bhi	1a764 <_start@@Base+0x613c>
   1ab54:	beq	1ab70 <_start@@Base+0x6548>
   1ab58:	mov	r2, r5
   1ab5c:	mov	r1, r4
   1ab60:	mov	r0, r6
   1ab64:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1ab68:	mov	r4, r0
   1ab6c:	b	1a764 <_start@@Base+0x613c>
   1ab70:	ldrb	r3, [r0, #2]
   1ab74:	cmp	r3, #32
   1ab78:	addhi	r4, r0, #2
   1ab7c:	bls	1ab58 <_start@@Base+0x6530>
   1ab80:	b	1a764 <_start@@Base+0x613c>
   1ab84:	add	r4, r0, #1
   1ab88:	sub	r3, r5, r4
   1ab8c:	cmp	r3, #1
   1ab90:	ble	1aba4 <_start@@Base+0x657c>
   1ab94:	ldrb	r3, [r0, #1]
   1ab98:	cmp	r3, #32
   1ab9c:	bhi	1abb8 <_start@@Base+0x6590>
   1aba0:	beq	1abf0 <_start@@Base+0x65c8>
   1aba4:	mov	r2, r5
   1aba8:	mov	r1, r4
   1abac:	mov	r0, r6
   1abb0:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1abb4:	mov	r4, r0
   1abb8:	cmp	r5, r4
   1abbc:	beq	1ac04 <_start@@Base+0x65dc>
   1abc0:	ldrb	r3, [r4]
   1abc4:	cmp	r3, #125	; 0x7d
   1abc8:	movne	r3, #1
   1abcc:	strne	r3, [sp, #92]	; 0x5c
   1abd0:	bne	1a764 <_start@@Base+0x613c>
   1abd4:	str	r7, [sp, #92]	; 0x5c
   1abd8:	mov	r2, r5
   1abdc:	add	r1, r4, #1
   1abe0:	mov	r0, r6
   1abe4:	bl	17d9c <_start@@Base+0x3774>
   1abe8:	mov	r4, r0
   1abec:	b	1a764 <_start@@Base+0x613c>
   1abf0:	ldrb	r3, [r0, #2]
   1abf4:	cmp	r3, #32
   1abf8:	addhi	r4, r0, #2
   1abfc:	bls	1aba4 <_start@@Base+0x657c>
   1ac00:	b	1abb8 <_start@@Base+0x6590>
   1ac04:	str	r7, [sp, #92]	; 0x5c
   1ac08:	mov	r3, #10
   1ac0c:	mov	r2, r5
   1ac10:	mov	r1, r4
   1ac14:	mov	r0, r6
   1ac18:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1ac1c:	mov	r4, r0
   1ac20:	b	1a764 <_start@@Base+0x613c>
   1ac24:	mov	r4, r5
   1ac28:	b	1a79c <_start@@Base+0x6174>
   1ac2c:	andeq	r4, r5, r0, ror r0
   1ac30:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   1ac34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac38:	sub	sp, sp, #44	; 0x2c
   1ac3c:	mov	r8, r0
   1ac40:	mov	r6, r1
   1ac44:	mov	r7, r2
   1ac48:	str	r3, [sp, #20]
   1ac4c:	ldr	fp, [sp, #80]	; 0x50
   1ac50:	mov	r2, #0
   1ac54:	mov	r3, #0
   1ac58:	strd	r2, [fp]
   1ac5c:	cmp	r1, r7
   1ac60:	beq	1ade4 <_start@@Base+0x67bc>
   1ac64:	ldrb	r3, [r1]
   1ac68:	cmp	r3, #34	; 0x22
   1ac6c:	addeq	r6, r1, #1
   1ac70:	moveq	r3, #0
   1ac74:	streq	r3, [r0, #12]
   1ac78:	beq	1adf4 <_start@@Base+0x67cc>
   1ac7c:	cmp	r3, #46	; 0x2e
   1ac80:	movne	r3, #1
   1ac84:	strne	r3, [r0, #12]
   1ac88:	beq	1aca4 <_start@@Base+0x667c>
   1ac8c:	mov	r2, #0
   1ac90:	mov	r3, #0
   1ac94:	strd	r2, [sp, #8]
   1ac98:	add	sl, sp, #24
   1ac9c:	add	r9, sp, #32
   1aca0:	b	1ad68 <_start@@Base+0x6740>
   1aca4:	mov	r3, #5
   1aca8:	mov	r2, r7
   1acac:	mov	r1, r6
   1acb0:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1acb4:	mov	r6, r0
   1acb8:	ldr	r3, [r8, #12]
   1acbc:	cmp	r3, #0
   1acc0:	beq	1adf4 <_start@@Base+0x67cc>
   1acc4:	b	1ae24 <_start@@Base+0x67fc>
   1acc8:	ldrb	r3, [r6, #1]
   1accc:	cmp	r3, #32
   1acd0:	addhi	r6, r6, #1
   1acd4:	bls	1ae10 <_start@@Base+0x67e8>
   1acd8:	b	1ae24 <_start@@Base+0x67fc>
   1acdc:	mov	r4, r0
   1ace0:	ldrd	r2, [sp, #32]
   1ace4:	ldr	r1, [sp, #28]
   1ace8:	cmp	r1, #0
   1acec:	beq	1ad2c <_start@@Base+0x6704>
   1acf0:	cmp	r3, #-2147483648	; 0x80000000
   1acf4:	cmpeq	r2, #0
   1acf8:	bhi	1ad0c <_start@@Base+0x66e4>
   1acfc:	rsbs	r2, r2, #0
   1ad00:	rsc	r3, r3, #0
   1ad04:	strd	r2, [sp, #8]
   1ad08:	b	1ad3c <_start@@Base+0x6714>
   1ad0c:	mov	r3, #8
   1ad10:	mov	r2, r7
   1ad14:	mov	r1, r0
   1ad18:	mov	r0, r8
   1ad1c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1ad20:	cmp	r7, r0
   1ad24:	bne	1ad3c <_start@@Base+0x6714>
   1ad28:	b	1ae30 <_start@@Base+0x6808>
   1ad2c:	cmp	r2, #0
   1ad30:	sbcs	r1, r3, #0
   1ad34:	blt	1adc4 <_start@@Base+0x679c>
   1ad38:	strd	r2, [sp, #8]
   1ad3c:	ldrd	r2, [fp]
   1ad40:	ldrd	r0, [sp, #8]
   1ad44:	adds	r0, r0, r2
   1ad48:	adc	r1, r1, r3
   1ad4c:	mov	r2, r0
   1ad50:	mov	r3, r1
   1ad54:	strd	r2, [fp]
   1ad58:	ldr	r3, [sp, #24]
   1ad5c:	cmp	r3, #0
   1ad60:	beq	1addc <_start@@Base+0x67b4>
   1ad64:	mov	r6, r4
   1ad68:	ldr	r5, [sp, #20]
   1ad6c:	str	sl, [sp, #4]
   1ad70:	str	r9, [sp]
   1ad74:	ldr	r4, [r5]
   1ad78:	add	r3, sp, #28
   1ad7c:	mov	r2, r7
   1ad80:	mov	r1, r6
   1ad84:	mov	r0, r8
   1ad88:	blx	r4
   1ad8c:	cmp	r7, r0
   1ad90:	beq	1ae30 <_start@@Base+0x6808>
   1ad94:	cmp	r6, r0
   1ad98:	bne	1acdc <_start@@Base+0x66b4>
   1ad9c:	ldr	r3, [r5, #4]!
   1ada0:	cmp	r3, #0
   1ada4:	bne	1ad6c <_start@@Base+0x6744>
   1ada8:	mov	r3, #23
   1adac:	mov	r2, r7
   1adb0:	mov	r1, r6
   1adb4:	mov	r0, r8
   1adb8:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1adbc:	mov	r7, r0
   1adc0:	b	1ae30 <_start@@Base+0x6808>
   1adc4:	mov	r3, #7
   1adc8:	mov	r2, r7
   1adcc:	mov	r1, r0
   1add0:	mov	r0, r8
   1add4:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1add8:	b	1ad20 <_start@@Base+0x66f8>
   1addc:	mov	r7, r4
   1ade0:	b	1ae30 <_start@@Base+0x6808>
   1ade4:	ldr	r3, [r0, #12]
   1ade8:	cmp	r3, #0
   1adec:	movne	r7, r1
   1adf0:	bne	1ae30 <_start@@Base+0x6808>
   1adf4:	sub	r3, r7, r6
   1adf8:	cmp	r3, #1
   1adfc:	ble	1ae10 <_start@@Base+0x67e8>
   1ae00:	ldrb	r3, [r6]
   1ae04:	cmp	r3, #32
   1ae08:	bhi	1ae24 <_start@@Base+0x67fc>
   1ae0c:	beq	1acc8 <_start@@Base+0x66a0>
   1ae10:	mov	r2, r7
   1ae14:	mov	r1, r6
   1ae18:	mov	r0, r8
   1ae1c:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1ae20:	mov	r6, r0
   1ae24:	cmp	r7, r6
   1ae28:	moveq	r7, r6
   1ae2c:	bne	1ac8c <_start@@Base+0x6664>
   1ae30:	mov	r0, r7
   1ae34:	add	sp, sp, #44	; 0x2c
   1ae38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae40:	sub	sp, sp, #476	; 0x1dc
   1ae44:	mov	r9, r0
   1ae48:	mov	r7, r1
   1ae4c:	mov	r8, r2
   1ae50:	mov	r2, r3
   1ae54:	str	r3, [sp, #420]	; 0x1a4
   1ae58:	mov	r3, #0
   1ae5c:	str	r3, [r2]
   1ae60:	mov	r1, #4
   1ae64:	ldr	r0, [r0]
   1ae68:	bl	27c7c <flatcc_builder_start_table@@Base>
   1ae6c:	cmp	r0, #0
   1ae70:	bne	1d48c <_start@@Base+0x8e64>
   1ae74:	add	r3, sp, #460	; 0x1cc
   1ae78:	str	r3, [sp]
   1ae7c:	mov	r3, #1
   1ae80:	mov	r2, r8
   1ae84:	mov	r1, r7
   1ae88:	mov	r0, r9
   1ae8c:	bl	2f44c <flatcc_json_parser_prepare_unions@@Base>
   1ae90:	cmp	r8, r0
   1ae94:	beq	1d48c <_start@@Base+0x8e64>
   1ae98:	add	r3, sp, #468	; 0x1d4
   1ae9c:	mov	r2, r8
   1aea0:	mov	r1, r7
   1aea4:	mov	r0, r9
   1aea8:	bl	17de0 <_start@@Base+0x37b8>
   1aeac:	mov	r7, r0
   1aeb0:	ldr	r3, [sp, #468]	; 0x1d4
   1aeb4:	cmp	r3, #0
   1aeb8:	beq	1d480 <_start@@Base+0x8e58>
   1aebc:	ldr	r3, [pc, #1132]	; 1b330 <_start@@Base+0x6d08>
   1aec0:	add	r3, r3, #240	; 0xf0
   1aec4:	str	r3, [sp, #424]	; 0x1a8
   1aec8:	mov	sl, r9
   1aecc:	mov	fp, r8
   1aed0:	b	1b0c0 <_start@@Base+0x6a98>
   1aed4:	mov	r3, #5
   1aed8:	mov	r2, fp
   1aedc:	mov	r1, r7
   1aee0:	mov	r0, sl
   1aee4:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1aee8:	mov	r7, r0
   1aeec:	b	1b0f0 <_start@@Base+0x6ac8>
   1aef0:	ldrb	r4, [r7, #7]
   1aef4:	mov	r5, #0
   1aef8:	b	1af04 <_start@@Base+0x68dc>
   1aefc:	mov	r4, #0
   1af00:	mov	r5, #0
   1af04:	ldrb	r2, [r7, #6]
   1af08:	mov	r1, #0
   1af0c:	str	r1, [sp, #356]	; 0x164
   1af10:	lsl	r3, r2, #8
   1af14:	str	r3, [sp, #352]	; 0x160
   1af18:	add	r3, sp, #352	; 0x160
   1af1c:	ldrd	r2, [r3]
   1af20:	orr	r2, r2, r4
   1af24:	orr	r3, r3, r5
   1af28:	mov	r4, r2
   1af2c:	mov	r5, r3
   1af30:	ldrb	r2, [r7, #5]
   1af34:	mov	r1, #0
   1af38:	str	r1, [sp, #308]	; 0x134
   1af3c:	lsl	r3, r2, #16
   1af40:	str	r3, [sp, #304]	; 0x130
   1af44:	add	r3, sp, #304	; 0x130
   1af48:	ldrd	r2, [r3]
   1af4c:	orr	r2, r2, r4
   1af50:	orr	r3, r3, r5
   1af54:	mov	r4, r2
   1af58:	mov	r5, r3
   1af5c:	ldrb	r2, [r7, #4]
   1af60:	mov	r1, #0
   1af64:	str	r1, [sp, #228]	; 0xe4
   1af68:	lsl	r3, r2, #24
   1af6c:	str	r3, [sp, #224]	; 0xe0
   1af70:	ldrd	r2, [sp, #224]	; 0xe0
   1af74:	orr	r2, r2, r4
   1af78:	orr	r3, r3, r5
   1af7c:	mov	r4, r2
   1af80:	mov	r5, r3
   1af84:	ldrb	r3, [r7, #3]
   1af88:	str	r3, [sp, #180]	; 0xb4
   1af8c:	mov	r3, #0
   1af90:	str	r3, [sp, #176]	; 0xb0
   1af94:	ldrd	r2, [sp, #176]	; 0xb0
   1af98:	orr	r2, r2, r4
   1af9c:	orr	r3, r3, r5
   1afa0:	mov	r4, r2
   1afa4:	mov	r5, r3
   1afa8:	ldrb	r2, [r7, #2]
   1afac:	lsl	r3, r2, #8
   1afb0:	str	r3, [sp, #148]	; 0x94
   1afb4:	mov	r3, #0
   1afb8:	str	r3, [sp, #144]	; 0x90
   1afbc:	ldrd	r2, [sp, #144]	; 0x90
   1afc0:	orr	r2, r2, r4
   1afc4:	orr	r3, r3, r5
   1afc8:	mov	r4, r2
   1afcc:	mov	r5, r3
   1afd0:	ldrb	r2, [r7, #1]
   1afd4:	lsl	r3, r2, #16
   1afd8:	str	r3, [sp, #100]	; 0x64
   1afdc:	mov	r3, #0
   1afe0:	str	r3, [sp, #96]	; 0x60
   1afe4:	ldrd	r2, [sp, #96]	; 0x60
   1afe8:	orr	r2, r2, r4
   1afec:	orr	r3, r3, r5
   1aff0:	mov	r4, r2
   1aff4:	mov	r5, r3
   1aff8:	ldrb	r2, [r7]
   1affc:	lsl	r3, r2, #24
   1b000:	str	r3, [sp, #84]	; 0x54
   1b004:	mov	r3, #0
   1b008:	str	r3, [sp, #80]	; 0x50
   1b00c:	ldrd	r2, [sp, #80]	; 0x50
   1b010:	orr	r2, r2, r4
   1b014:	orr	r3, r3, r5
   1b018:	mov	r4, r2
   1b01c:	mov	r5, r3
   1b020:	add	r3, pc, #736	; 0x2e0
   1b024:	ldrd	r2, [r3]
   1b028:	cmp	r5, r3
   1b02c:	cmpeq	r4, r2
   1b030:	beq	1b178 <_start@@Base+0x6b50>
   1b034:	bic	r0, r4, #255	; 0xff
   1b038:	add	r3, pc, #720	; 0x2d0
   1b03c:	ldrd	r2, [r3]
   1b040:	cmp	r5, r3
   1b044:	cmpeq	r0, r2
   1b048:	beq	1b234 <_start@@Base+0x6c0c>
   1b04c:	ldr	r2, [pc, #736]	; 1b334 <_start@@Base+0x6d0c>
   1b050:	mvn	r3, #0
   1b054:	and	r2, r2, r4
   1b058:	and	r3, r3, r5
   1b05c:	add	r1, pc, #692	; 0x2b4
   1b060:	ldrd	r0, [r1]
   1b064:	cmp	r3, r1
   1b068:	cmpeq	r2, r0
   1b06c:	beq	1b290 <_start@@Base+0x6c68>
   1b070:	and	r4, r4, #-16777216	; 0xff000000
   1b074:	add	r3, pc, #676	; 0x2a4
   1b078:	ldrd	r2, [r3]
   1b07c:	cmp	r5, r3
   1b080:	cmpeq	r4, r2
   1b084:	beq	1d404 <_start@@Base+0x8ddc>
   1b088:	mov	r2, fp
   1b08c:	mov	r1, r7
   1b090:	mov	r0, sl
   1b094:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1b098:	mov	r7, r0
   1b09c:	add	r3, sp, #468	; 0x1d4
   1b0a0:	mov	r2, fp
   1b0a4:	mov	r1, r7
   1b0a8:	mov	r0, sl
   1b0ac:	bl	18104 <_start@@Base+0x3adc>
   1b0b0:	mov	r7, r0
   1b0b4:	ldr	r3, [sp, #468]	; 0x1d4
   1b0b8:	cmp	r3, #0
   1b0bc:	beq	1d478 <_start@@Base+0x8e50>
   1b0c0:	cmp	fp, r7
   1b0c4:	beq	1b0f0 <_start@@Base+0x6ac8>
   1b0c8:	ldrb	r3, [r7]
   1b0cc:	cmp	r3, #34	; 0x22
   1b0d0:	addeq	r7, r7, #1
   1b0d4:	moveq	r3, #0
   1b0d8:	streq	r3, [sl, #12]
   1b0dc:	beq	1b0f0 <_start@@Base+0x6ac8>
   1b0e0:	cmp	r3, #46	; 0x2e
   1b0e4:	movne	r3, #1
   1b0e8:	strne	r3, [sl, #12]
   1b0ec:	beq	1aed4 <_start@@Base+0x68ac>
   1b0f0:	mov	r8, fp
   1b0f4:	sub	r3, fp, r7
   1b0f8:	cmp	r3, #8
   1b0fc:	movcs	r3, #8
   1b100:	sub	r3, r3, #1
   1b104:	cmp	r3, #7
   1b108:	ldrls	pc, [pc, r3, lsl #2]
   1b10c:	b	1b284 <_start@@Base+0x6c5c>
   1b110:	andeq	fp, r1, ip, ror #2
   1b114:	andeq	fp, r1, r0, ror #2
   1b118:	andeq	fp, r1, r4, asr r1
   1b11c:	andeq	fp, r1, r8, asr #2
   1b120:	andeq	fp, r1, ip, lsr r1
   1b124:	andeq	fp, r1, r0, lsr r1
   1b128:	strdeq	sl, [r1], -ip
   1b12c:	strdeq	sl, [r1], -r0
   1b130:	mov	r4, #0
   1b134:	mov	r5, #0
   1b138:	b	1af30 <_start@@Base+0x6908>
   1b13c:	mov	r4, #0
   1b140:	mov	r5, #0
   1b144:	b	1af5c <_start@@Base+0x6934>
   1b148:	mov	r4, #0
   1b14c:	mov	r5, #0
   1b150:	b	1af84 <_start@@Base+0x695c>
   1b154:	mov	r4, #0
   1b158:	mov	r5, #0
   1b15c:	b	1afa8 <_start@@Base+0x6980>
   1b160:	mov	r4, #0
   1b164:	mov	r5, #0
   1b168:	b	1afd0 <_start@@Base+0x69a8>
   1b16c:	mov	r4, #0
   1b170:	mov	r5, #0
   1b174:	b	1aff8 <_start@@Base+0x69d0>
   1b178:	add	r7, r7, #8
   1b17c:	mov	r1, fp
   1b180:	mov	r0, r7
   1b184:	bl	14750 <_start@@Base+0x128>
   1b188:	mov	r0, #0
   1b18c:	add	r3, pc, #404	; 0x194
   1b190:	ldrd	r2, [r3]
   1b194:	cmp	r1, r3
   1b198:	cmpeq	r0, r2
   1b19c:	beq	1b1b8 <_start@@Base+0x6b90>
   1b1a0:	mov	r2, fp
   1b1a4:	mov	r1, r7
   1b1a8:	mov	r0, sl
   1b1ac:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1b1b0:	mov	r7, r0
   1b1b4:	b	1b09c <_start@@Base+0x6a74>
   1b1b8:	mov	r3, #4
   1b1bc:	mov	r2, fp
   1b1c0:	mov	r1, r7
   1b1c4:	mov	r0, sl
   1b1c8:	bl	193e8 <_start@@Base+0x4dc0>
   1b1cc:	cmp	r7, r0
   1b1d0:	beq	1b21c <_start@@Base+0x6bf4>
   1b1d4:	ldr	r3, [pc, #348]	; 1b338 <_start@@Base+0x6d10>
   1b1d8:	str	r3, [sp, #16]
   1b1dc:	ldr	r3, [pc, #344]	; 1b33c <_start@@Base+0x6d14>
   1b1e0:	str	r3, [sp, #12]
   1b1e4:	ldr	r3, [pc, #324]	; 1b330 <_start@@Base+0x6d08>
   1b1e8:	add	r3, r3, #116	; 0x74
   1b1ec:	str	r3, [sp, #8]
   1b1f0:	ldr	r3, [sp, #460]	; 0x1cc
   1b1f4:	str	r3, [sp, #4]
   1b1f8:	mov	r3, #3
   1b1fc:	str	r3, [sp]
   1b200:	mov	r3, #0
   1b204:	mov	r2, fp
   1b208:	mov	r1, r0
   1b20c:	mov	r0, sl
   1b210:	bl	2f958 <flatcc_json_parser_union_type_vector@@Base>
   1b214:	mov	r7, r0
   1b218:	b	1b09c <_start@@Base+0x6a74>
   1b21c:	mov	r2, fp
   1b220:	mov	r1, r0
   1b224:	mov	r0, sl
   1b228:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1b22c:	mov	r7, r0
   1b230:	b	1b09c <_start@@Base+0x6a74>
   1b234:	mov	r3, #7
   1b238:	mov	r2, fp
   1b23c:	mov	r1, r7
   1b240:	mov	r0, sl
   1b244:	bl	193e8 <_start@@Base+0x4dc0>
   1b248:	cmp	r0, r7
   1b24c:	beq	1b04c <_start@@Base+0x6a24>
   1b250:	ldr	r3, [pc, #228]	; 1b33c <_start@@Base+0x6d14>
   1b254:	str	r3, [sp, #8]
   1b258:	ldr	r3, [sp, #460]	; 0x1cc
   1b25c:	str	r3, [sp, #4]
   1b260:	mov	r3, #3
   1b264:	str	r3, [sp]
   1b268:	mov	r3, #0
   1b26c:	mov	r2, fp
   1b270:	mov	r1, r0
   1b274:	mov	r0, sl
   1b278:	bl	2f880 <flatcc_json_parser_union_vector@@Base>
   1b27c:	mov	r7, r0
   1b280:	b	1b09c <_start@@Base+0x6a74>
   1b284:	mov	r4, #0
   1b288:	mov	r5, #0
   1b28c:	b	1b04c <_start@@Base+0x6a24>
   1b290:	mov	r3, #6
   1b294:	mov	r2, fp
   1b298:	mov	r1, r7
   1b29c:	mov	r0, sl
   1b2a0:	bl	193e8 <_start@@Base+0x4dc0>
   1b2a4:	mov	r6, r0
   1b2a8:	cmp	r0, r7
   1b2ac:	beq	1d3ec <_start@@Base+0x8dc4>
   1b2b0:	mov	r3, #0
   1b2b4:	str	r3, [sp, #464]	; 0x1d0
   1b2b8:	mov	r1, #3
   1b2bc:	ldr	r0, [sl]
   1b2c0:	bl	27c7c <flatcc_builder_start_table@@Base>
   1b2c4:	cmp	r0, #0
   1b2c8:	bne	1d11c <_start@@Base+0x8af4>
   1b2cc:	add	r3, sp, #436	; 0x1b4
   1b2d0:	mov	r2, fp
   1b2d4:	mov	r1, r6
   1b2d8:	mov	r0, sl
   1b2dc:	bl	17de0 <_start@@Base+0x37b8>
   1b2e0:	b	1d238 <_start@@Base+0x8c10>
   1b2e4:	mov	r3, #5
   1b2e8:	mov	r2, fp
   1b2ec:	mov	r1, r0
   1b2f0:	mov	r0, sl
   1b2f4:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1b2f8:	b	1d274 <_start@@Base+0x8c4c>
   1b2fc:	ldrb	r2, [r0, #7]
   1b300:	mov	r3, #0
   1b304:	b	1b348 <_start@@Base+0x6d20>
   1b308:	cmnvs	lr, pc, asr r9
   1b30c:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   1b310:	cmnvs	lr, r0, lsl #18
   1b314:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   1b318:	ldmdbvs	r8!, {}^	; <UNPREDICTABLE>
   1b31c:	rsbsvc	r6, r2, r6, ror #10
   1b320:	strvs	r0, [r0, #-0]
   1b324:	stclvs	6, cr7, [pc, #-420]!	; 1b188 <_start@@Base+0x6b60>
   1b328:	andeq	r0, r0, r0
   1b32c:	ldrbtvc	r7, [r9], #-101	; 0xffffff9b
   1b330:	andeq	r4, r5, r0, ror r0
   1b334:			; <UNDEFINED> instruction: 0xffff0000
   1b338:	andeq	r4, r1, r8, lsl #17
   1b33c:	muleq	r2, r0, r2
   1b340:	mov	r2, #0
   1b344:	mov	r3, #0
   1b348:	ldrb	r4, [r0, #6]
   1b34c:	mov	r1, #0
   1b350:	str	r1, [sp, #276]	; 0x114
   1b354:	lsl	r1, r4, #8
   1b358:	str	r1, [sp, #272]	; 0x110
   1b35c:	add	r1, sp, #272	; 0x110
   1b360:	ldrd	r4, [r1]
   1b364:	orr	r4, r4, r2
   1b368:	orr	r5, r5, r3
   1b36c:	mov	r2, r4
   1b370:	mov	r3, r5
   1b374:	ldrb	r4, [r0, #5]
   1b378:	mov	r1, #0
   1b37c:	str	r1, [sp, #204]	; 0xcc
   1b380:	lsl	r1, r4, #16
   1b384:	str	r1, [sp, #200]	; 0xc8
   1b388:	ldrd	r4, [sp, #200]	; 0xc8
   1b38c:	orr	r4, r4, r2
   1b390:	orr	r5, r5, r3
   1b394:	mov	r2, r4
   1b398:	mov	r3, r5
   1b39c:	ldrb	r4, [r0, #4]
   1b3a0:	mov	r1, #0
   1b3a4:	str	r1, [sp, #124]	; 0x7c
   1b3a8:	lsl	r1, r4, #24
   1b3ac:	str	r1, [sp, #120]	; 0x78
   1b3b0:	ldrd	r4, [sp, #120]	; 0x78
   1b3b4:	orr	r4, r4, r2
   1b3b8:	orr	r5, r5, r3
   1b3bc:	mov	r2, r4
   1b3c0:	mov	r3, r5
   1b3c4:	ldrb	r1, [r0, #3]
   1b3c8:	str	r1, [sp, #92]	; 0x5c
   1b3cc:	mov	r1, #0
   1b3d0:	str	r1, [sp, #88]	; 0x58
   1b3d4:	ldrd	r4, [sp, #88]	; 0x58
   1b3d8:	orr	r4, r4, r2
   1b3dc:	orr	r5, r5, r3
   1b3e0:	mov	r2, r4
   1b3e4:	mov	r3, r5
   1b3e8:	ldrb	r4, [r0, #2]
   1b3ec:	lsl	r1, r4, #8
   1b3f0:	str	r1, [sp, #68]	; 0x44
   1b3f4:	mov	r1, #0
   1b3f8:	str	r1, [sp, #64]	; 0x40
   1b3fc:	ldrd	r4, [sp, #64]	; 0x40
   1b400:	orr	r4, r4, r2
   1b404:	orr	r5, r5, r3
   1b408:	mov	r2, r4
   1b40c:	mov	r3, r5
   1b410:	ldrb	r4, [r0, #1]
   1b414:	lsl	r1, r4, #16
   1b418:	str	r1, [sp, #52]	; 0x34
   1b41c:	mov	r1, #0
   1b420:	str	r1, [sp, #48]	; 0x30
   1b424:	ldrd	r4, [sp, #48]	; 0x30
   1b428:	orr	r4, r4, r2
   1b42c:	orr	r5, r5, r3
   1b430:	mov	r2, r4
   1b434:	mov	r3, r5
   1b438:	ldrb	r4, [r0]
   1b43c:	lsl	r1, r4, #24
   1b440:	str	r1, [sp, #36]	; 0x24
   1b444:	mov	r1, #0
   1b448:	str	r1, [sp, #32]
   1b44c:	ldrd	r4, [sp, #32]
   1b450:	orr	r4, r4, r2
   1b454:	orr	r5, r5, r3
   1b458:	mov	r2, r4
   1b45c:	mov	r3, r5
   1b460:	add	r5, pc, #840	; 0x348
   1b464:	ldrd	r4, [r5]
   1b468:	cmp	r3, r5
   1b46c:	cmpeq	r2, r4
   1b470:	bne	1d1ac <_start@@Base+0x8b84>
   1b474:	add	r1, r0, #8
   1b478:	sub	r3, r8, r1
   1b47c:	cmp	r3, #8
   1b480:	movcs	r3, #8
   1b484:	sub	r3, r3, #1
   1b488:	cmp	r3, #7
   1b48c:	ldrls	pc, [pc, r3, lsl #2]
   1b490:	b	1b6a0 <_start@@Base+0x7078>
   1b494:	muleq	r1, r4, r6
   1b498:	andeq	fp, r1, r8, lsl #13
   1b49c:	andeq	fp, r1, ip, ror r6
   1b4a0:	andeq	fp, r1, r0, ror r6
   1b4a4:	andeq	fp, r1, r4, ror #12
   1b4a8:	andeq	fp, r1, r8, asr r6
   1b4ac:	andeq	fp, r1, r8, lsl #10
   1b4b0:	strdeq	fp, [r1], -ip
   1b4b4:	mov	r2, #0
   1b4b8:	mov	r3, #0
   1b4bc:	b	1b374 <_start@@Base+0x6d4c>
   1b4c0:	mov	r2, #0
   1b4c4:	mov	r3, #0
   1b4c8:	b	1b39c <_start@@Base+0x6d74>
   1b4cc:	mov	r2, #0
   1b4d0:	mov	r3, #0
   1b4d4:	b	1b3c4 <_start@@Base+0x6d9c>
   1b4d8:	mov	r2, #0
   1b4dc:	mov	r3, #0
   1b4e0:	b	1b3e8 <_start@@Base+0x6dc0>
   1b4e4:	mov	r2, #0
   1b4e8:	mov	r3, #0
   1b4ec:	b	1b410 <_start@@Base+0x6de8>
   1b4f0:	mov	r2, #0
   1b4f4:	mov	r3, #0
   1b4f8:	b	1b438 <_start@@Base+0x6e10>
   1b4fc:	ldrb	r2, [r0, #15]
   1b500:	mov	r3, #0
   1b504:	b	1b510 <_start@@Base+0x6ee8>
   1b508:	mov	r2, #0
   1b50c:	mov	r3, #0
   1b510:	ldrb	r4, [r0, #14]
   1b514:	mov	ip, #0
   1b518:	str	ip, [sp, #388]	; 0x184
   1b51c:	lsl	ip, r4, #8
   1b520:	str	ip, [sp, #384]	; 0x180
   1b524:	add	ip, sp, #384	; 0x180
   1b528:	ldrd	r4, [ip]
   1b52c:	orr	r4, r4, r2
   1b530:	orr	r5, r5, r3
   1b534:	mov	r2, r4
   1b538:	mov	r3, r5
   1b53c:	ldrb	r4, [r0, #13]
   1b540:	mov	ip, #0
   1b544:	str	ip, [sp, #340]	; 0x154
   1b548:	lsl	ip, r4, #16
   1b54c:	str	ip, [sp, #336]	; 0x150
   1b550:	add	ip, sp, #336	; 0x150
   1b554:	ldrd	r4, [ip]
   1b558:	orr	r4, r4, r2
   1b55c:	orr	r5, r5, r3
   1b560:	mov	r2, r4
   1b564:	mov	r3, r5
   1b568:	ldrb	r4, [r0, #12]
   1b56c:	mov	ip, #0
   1b570:	str	ip, [sp, #292]	; 0x124
   1b574:	lsl	ip, r4, #24
   1b578:	str	ip, [sp, #288]	; 0x120
   1b57c:	add	ip, sp, #288	; 0x120
   1b580:	ldrd	r4, [ip]
   1b584:	orr	r4, r4, r2
   1b588:	orr	r5, r5, r3
   1b58c:	mov	r2, r4
   1b590:	mov	r3, r5
   1b594:	ldrb	ip, [r0, #11]
   1b598:	str	ip, [sp, #252]	; 0xfc
   1b59c:	mov	ip, #0
   1b5a0:	str	ip, [sp, #248]	; 0xf8
   1b5a4:	ldrd	r4, [sp, #248]	; 0xf8
   1b5a8:	orr	r4, r4, r2
   1b5ac:	orr	r5, r5, r3
   1b5b0:	mov	r2, r4
   1b5b4:	mov	r3, r5
   1b5b8:	ldrb	r4, [r0, #10]
   1b5bc:	lsl	ip, r4, #8
   1b5c0:	str	ip, [sp, #220]	; 0xdc
   1b5c4:	mov	ip, #0
   1b5c8:	str	ip, [sp, #216]	; 0xd8
   1b5cc:	ldrd	r4, [sp, #216]	; 0xd8
   1b5d0:	orr	r4, r4, r2
   1b5d4:	orr	r5, r5, r3
   1b5d8:	mov	r2, r4
   1b5dc:	mov	r3, r5
   1b5e0:	ldrb	r4, [r0, #9]
   1b5e4:	lsl	ip, r4, #16
   1b5e8:	str	ip, [sp, #172]	; 0xac
   1b5ec:	mov	ip, #0
   1b5f0:	str	ip, [sp, #168]	; 0xa8
   1b5f4:	ldrd	r4, [sp, #168]	; 0xa8
   1b5f8:	orr	r4, r4, r2
   1b5fc:	orr	r5, r5, r3
   1b600:	mov	r2, r4
   1b604:	mov	r3, r5
   1b608:	ldrb	r4, [r0, #8]
   1b60c:	lsl	ip, r4, #24
   1b610:	str	ip, [sp, #140]	; 0x8c
   1b614:	mov	ip, #0
   1b618:	str	ip, [sp, #136]	; 0x88
   1b61c:	ldrd	r4, [sp, #136]	; 0x88
   1b620:	orr	r4, r4, r2
   1b624:	orr	r5, r5, r3
   1b628:	mov	r2, r4
   1b62c:	mov	r3, r5
   1b630:	add	r5, pc, #384	; 0x180
   1b634:	ldrd	r4, [r5]
   1b638:	cmp	r3, r5
   1b63c:	cmpeq	r2, r4
   1b640:	beq	1b6ac <_start@@Base+0x7084>
   1b644:	mov	r2, fp
   1b648:	mov	r0, sl
   1b64c:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1b650:	mov	r9, r0
   1b654:	b	1d1c0 <_start@@Base+0x8b98>
   1b658:	mov	r2, #0
   1b65c:	mov	r3, #0
   1b660:	b	1b53c <_start@@Base+0x6f14>
   1b664:	mov	r2, #0
   1b668:	mov	r3, #0
   1b66c:	b	1b568 <_start@@Base+0x6f40>
   1b670:	mov	r2, #0
   1b674:	mov	r3, #0
   1b678:	b	1b594 <_start@@Base+0x6f6c>
   1b67c:	mov	r2, #0
   1b680:	mov	r3, #0
   1b684:	b	1b5b8 <_start@@Base+0x6f90>
   1b688:	mov	r2, #0
   1b68c:	mov	r3, #0
   1b690:	b	1b5e0 <_start@@Base+0x6fb8>
   1b694:	mov	r2, #0
   1b698:	mov	r3, #0
   1b69c:	b	1b608 <_start@@Base+0x6fe0>
   1b6a0:	mov	r2, #0
   1b6a4:	mov	r3, #0
   1b6a8:	b	1b630 <_start@@Base+0x7008>
   1b6ac:	add	r6, r0, #16
   1b6b0:	mov	r1, fp
   1b6b4:	mov	r0, r6
   1b6b8:	bl	14750 <_start@@Base+0x128>
   1b6bc:	ldr	r4, [pc, #284]	; 1b7e0 <_start@@Base+0x71b8>
   1b6c0:	mvn	r5, #0
   1b6c4:	and	r4, r4, r0
   1b6c8:	and	r5, r5, r1
   1b6cc:	add	r3, pc, #236	; 0xec
   1b6d0:	ldrd	r2, [r3]
   1b6d4:	cmp	r5, r3
   1b6d8:	cmpeq	r4, r2
   1b6dc:	beq	1b724 <_start@@Base+0x70fc>
   1b6e0:	and	r0, r0, #-16777216	; 0xff000000
   1b6e4:	add	r3, pc, #220	; 0xdc
   1b6e8:	ldrd	r2, [r3]
   1b6ec:	cmp	r1, r3
   1b6f0:	cmpeq	r0, r2
   1b6f4:	beq	1bfd4 <_start@@Base+0x79ac>
   1b6f8:	add	r3, pc, #208	; 0xd0
   1b6fc:	ldrd	r2, [r3]
   1b700:	cmp	r5, r3
   1b704:	cmpeq	r4, r2
   1b708:	beq	1c8a4 <_start@@Base+0x827c>
   1b70c:	mov	r2, fp
   1b710:	mov	r1, r6
   1b714:	mov	r0, sl
   1b718:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1b71c:	mov	r9, r0
   1b720:	b	1d1c0 <_start@@Base+0x8b98>
   1b724:	mov	r3, #6
   1b728:	mov	r2, fp
   1b72c:	mov	r1, r6
   1b730:	mov	r0, sl
   1b734:	bl	193e8 <_start@@Base+0x4dc0>
   1b738:	mov	r9, r0
   1b73c:	cmp	r6, r0
   1b740:	beq	1d1a4 <_start@@Base+0x8b7c>
   1b744:	mov	r1, #2
   1b748:	ldr	r0, [sl]
   1b74c:	bl	27c7c <flatcc_builder_start_table@@Base>
   1b750:	cmp	r0, #0
   1b754:	bne	1bf8c <_start@@Base+0x7964>
   1b758:	add	r3, sp, #444	; 0x1bc
   1b75c:	mov	r2, fp
   1b760:	mov	r1, r9
   1b764:	mov	r0, sl
   1b768:	bl	17de0 <_start@@Base+0x37b8>
   1b76c:	add	r5, pc, #100	; 0x64
   1b770:	ldrd	r4, [r5]
   1b774:	ldr	r3, [pc, #104]	; 1b7e4 <_start@@Base+0x71bc>
   1b778:	add	r3, r3, #144	; 0x90
   1b77c:	str	r3, [sp, #428]	; 0x1ac
   1b780:	mov	r9, sl
   1b784:	mov	r7, fp
   1b788:	b	1be04 <_start@@Base+0x77dc>
   1b78c:	mov	r3, #5
   1b790:	mov	r2, r7
   1b794:	mov	r1, r0
   1b798:	mov	r0, r9
   1b79c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1b7a0:	b	1be40 <_start@@Base+0x7818>
   1b7a4:	ldrb	r2, [r0, #7]
   1b7a8:	mov	r3, #0
   1b7ac:	b	1b7f0 <_start@@Base+0x71c8>
   1b7b0:	bvs	1cf7570 <__bss_end__@@Base+0x1ca3224>
   1b7b4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1b7b8:	ldmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
   1b7bc:	rsbsvc	r6, r2, r6, ror #10
   1b7c0:	ldrvs	r0, [r2, -r0]!
   1b7c4:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1b7c8:	strvs	r0, [r0, -r0]
   1b7cc:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1b7d0:	ldrvs	r0, [r3, -r0]!
   1b7d4:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1b7d8:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1b7dc:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1b7e0:			; <UNDEFINED> instruction: 0xffff0000
   1b7e4:	andeq	r4, r5, r0, ror r0
   1b7e8:	mov	r2, #0
   1b7ec:	mov	r3, #0
   1b7f0:	ldrb	sl, [r0, #6]
   1b7f4:	mov	r1, #0
   1b7f8:	str	r1, [sp, #380]	; 0x17c
   1b7fc:	lsl	r1, sl, #8
   1b800:	str	r1, [sp, #376]	; 0x178
   1b804:	add	r1, sp, #376	; 0x178
   1b808:	ldrd	sl, [r1]
   1b80c:	orr	sl, sl, r2
   1b810:	orr	fp, fp, r3
   1b814:	mov	r2, sl
   1b818:	mov	r3, fp
   1b81c:	ldrb	sl, [r0, #5]
   1b820:	mov	r1, #0
   1b824:	str	r1, [sp, #332]	; 0x14c
   1b828:	lsl	r1, sl, #16
   1b82c:	str	r1, [sp, #328]	; 0x148
   1b830:	add	r1, sp, #328	; 0x148
   1b834:	ldrd	sl, [r1]
   1b838:	orr	sl, sl, r2
   1b83c:	orr	fp, fp, r3
   1b840:	mov	r2, sl
   1b844:	mov	r3, fp
   1b848:	ldrb	sl, [r0, #4]
   1b84c:	mov	r1, #0
   1b850:	str	r1, [sp, #284]	; 0x11c
   1b854:	lsl	r1, sl, #24
   1b858:	str	r1, [sp, #280]	; 0x118
   1b85c:	add	r1, sp, #280	; 0x118
   1b860:	ldrd	sl, [r1]
   1b864:	orr	sl, sl, r2
   1b868:	orr	fp, fp, r3
   1b86c:	mov	r2, sl
   1b870:	mov	r3, fp
   1b874:	ldrb	r1, [r0, #3]
   1b878:	str	r1, [sp, #244]	; 0xf4
   1b87c:	mov	r1, #0
   1b880:	str	r1, [sp, #240]	; 0xf0
   1b884:	ldrd	sl, [sp, #240]	; 0xf0
   1b888:	orr	sl, sl, r2
   1b88c:	orr	fp, fp, r3
   1b890:	mov	r2, sl
   1b894:	mov	r3, fp
   1b898:	ldrb	sl, [r0, #2]
   1b89c:	lsl	r1, sl, #8
   1b8a0:	str	r1, [sp, #212]	; 0xd4
   1b8a4:	mov	r1, #0
   1b8a8:	str	r1, [sp, #208]	; 0xd0
   1b8ac:	ldrd	sl, [sp, #208]	; 0xd0
   1b8b0:	orr	sl, sl, r2
   1b8b4:	orr	fp, fp, r3
   1b8b8:	mov	r2, sl
   1b8bc:	mov	r3, fp
   1b8c0:	ldrb	sl, [r0, #1]
   1b8c4:	lsl	r1, sl, #16
   1b8c8:	str	r1, [sp, #164]	; 0xa4
   1b8cc:	mov	r1, #0
   1b8d0:	str	r1, [sp, #160]	; 0xa0
   1b8d4:	ldrd	sl, [sp, #160]	; 0xa0
   1b8d8:	orr	sl, sl, r2
   1b8dc:	orr	fp, fp, r3
   1b8e0:	mov	r2, sl
   1b8e4:	mov	r3, fp
   1b8e8:	ldrb	sl, [r0]
   1b8ec:	lsl	r1, sl, #24
   1b8f0:	str	r1, [sp, #132]	; 0x84
   1b8f4:	mov	r1, #0
   1b8f8:	str	r1, [sp, #128]	; 0x80
   1b8fc:	ldrd	sl, [sp, #128]	; 0x80
   1b900:	orr	sl, sl, r2
   1b904:	orr	fp, fp, r3
   1b908:	mov	r2, sl
   1b90c:	mov	r3, fp
   1b910:	add	fp, pc, #864	; 0x360
   1b914:	ldrd	sl, [fp]
   1b918:	cmp	r3, fp
   1b91c:	cmpeq	r2, sl
   1b920:	bne	1bd78 <_start@@Base+0x7750>
   1b924:	add	r6, r0, #8
   1b928:	sub	r3, r8, r6
   1b92c:	cmp	r3, #8
   1b930:	movcs	r3, #8
   1b934:	sub	r3, r3, #1
   1b938:	cmp	r3, #7
   1b93c:	ldrls	pc, [pc, r3, lsl #2]
   1b940:	b	1bb6c <_start@@Base+0x7544>
   1b944:	andeq	fp, r1, r0, ror #22
   1b948:	andeq	fp, r1, r4, asr fp
   1b94c:	andeq	fp, r1, r8, asr #22
   1b950:	andeq	fp, r1, ip, lsr fp
   1b954:	andeq	fp, r1, r0, lsr fp
   1b958:	andeq	fp, r1, r4, lsr #22
   1b95c:			; <UNDEFINED> instruction: 0x0001b9b8
   1b960:	andeq	fp, r1, ip, lsr #19
   1b964:	mov	r2, #0
   1b968:	mov	r3, #0
   1b96c:	b	1b81c <_start@@Base+0x71f4>
   1b970:	mov	r2, #0
   1b974:	mov	r3, #0
   1b978:	b	1b848 <_start@@Base+0x7220>
   1b97c:	mov	r2, #0
   1b980:	mov	r3, #0
   1b984:	b	1b874 <_start@@Base+0x724c>
   1b988:	mov	r2, #0
   1b98c:	mov	r3, #0
   1b990:	b	1b898 <_start@@Base+0x7270>
   1b994:	mov	r2, #0
   1b998:	mov	r3, #0
   1b99c:	b	1b8c0 <_start@@Base+0x7298>
   1b9a0:	mov	r2, #0
   1b9a4:	mov	r3, #0
   1b9a8:	b	1b8e8 <_start@@Base+0x72c0>
   1b9ac:	ldrb	sl, [r0, #15]
   1b9b0:	mov	fp, #0
   1b9b4:	b	1b9c0 <_start@@Base+0x7398>
   1b9b8:	mov	sl, #0
   1b9bc:	mov	fp, #0
   1b9c0:	ldrb	r2, [r0, #14]
   1b9c4:	mov	r1, #0
   1b9c8:	str	r1, [sp, #412]	; 0x19c
   1b9cc:	lsl	r3, r2, #8
   1b9d0:	str	r3, [sp, #408]	; 0x198
   1b9d4:	add	r3, sp, #408	; 0x198
   1b9d8:	ldrd	r2, [r3]
   1b9dc:	orr	r2, r2, sl
   1b9e0:	orr	r3, r3, fp
   1b9e4:	mov	sl, r2
   1b9e8:	mov	fp, r3
   1b9ec:	ldrb	r2, [r0, #13]
   1b9f0:	mov	r1, #0
   1b9f4:	str	r1, [sp, #404]	; 0x194
   1b9f8:	lsl	r3, r2, #16
   1b9fc:	str	r3, [sp, #400]	; 0x190
   1ba00:	add	r3, sp, #400	; 0x190
   1ba04:	ldrd	r2, [r3]
   1ba08:	orr	r2, r2, sl
   1ba0c:	orr	r3, r3, fp
   1ba10:	ldrb	sl, [r0, #12]
   1ba14:	mov	r1, #0
   1ba18:	str	r1, [sp, #396]	; 0x18c
   1ba1c:	lsl	r1, sl, #24
   1ba20:	str	r1, [sp, #392]	; 0x188
   1ba24:	add	r1, sp, #392	; 0x188
   1ba28:	ldrd	sl, [r1]
   1ba2c:	orr	sl, sl, r2
   1ba30:	orr	fp, fp, r3
   1ba34:	mov	r2, sl
   1ba38:	mov	r3, fp
   1ba3c:	ldrb	r1, [r0, #11]
   1ba40:	str	r1, [sp, #364]	; 0x16c
   1ba44:	mov	r1, #0
   1ba48:	str	r1, [sp, #360]	; 0x168
   1ba4c:	add	r1, sp, #360	; 0x168
   1ba50:	ldrd	sl, [r1]
   1ba54:	orr	sl, sl, r2
   1ba58:	orr	fp, fp, r3
   1ba5c:	mov	r2, sl
   1ba60:	mov	r3, fp
   1ba64:	ldrb	sl, [r0, #10]
   1ba68:	lsl	r1, sl, #8
   1ba6c:	str	r1, [sp, #348]	; 0x15c
   1ba70:	mov	r1, #0
   1ba74:	str	r1, [sp, #344]	; 0x158
   1ba78:	add	r1, sp, #344	; 0x158
   1ba7c:	ldrd	sl, [r1]
   1ba80:	orr	sl, sl, r2
   1ba84:	orr	fp, fp, r3
   1ba88:	mov	r2, sl
   1ba8c:	mov	r3, fp
   1ba90:	ldrb	sl, [r0, #9]
   1ba94:	lsl	r1, sl, #16
   1ba98:	str	r1, [sp, #316]	; 0x13c
   1ba9c:	mov	r1, #0
   1baa0:	str	r1, [sp, #312]	; 0x138
   1baa4:	add	r1, sp, #312	; 0x138
   1baa8:	ldrd	sl, [r1]
   1baac:	orr	sl, sl, r2
   1bab0:	orr	fp, fp, r3
   1bab4:	mov	r2, sl
   1bab8:	mov	r3, fp
   1babc:	ldrb	r0, [r0, #8]
   1bac0:	lsl	r1, r0, #24
   1bac4:	str	r1, [sp, #300]	; 0x12c
   1bac8:	mov	r1, #0
   1bacc:	str	r1, [sp, #296]	; 0x128
   1bad0:	add	r1, sp, #296	; 0x128
   1bad4:	ldrd	r0, [r1]
   1bad8:	orr	r0, r0, r2
   1badc:	orr	r1, r1, r3
   1bae0:	mov	r2, r0
   1bae4:	mov	r3, r1
   1bae8:	bic	r0, r2, #255	; 0xff
   1baec:	cmp	r3, r5
   1baf0:	cmpeq	r0, r4
   1baf4:	beq	1bb78 <_start@@Base+0x7550>
   1baf8:	add	r1, pc, #384	; 0x180
   1bafc:	ldrd	r0, [r1]
   1bb00:	cmp	r3, r1
   1bb04:	cmpeq	r2, r0
   1bb08:	beq	1bc8c <_start@@Base+0x7664>
   1bb0c:	mov	r2, r7
   1bb10:	mov	r1, r6
   1bb14:	mov	r0, r9
   1bb18:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1bb1c:	mov	r6, r0
   1bb20:	b	1bd8c <_start@@Base+0x7764>
   1bb24:	mov	sl, #0
   1bb28:	mov	fp, #0
   1bb2c:	b	1b9ec <_start@@Base+0x73c4>
   1bb30:	mov	r2, #0
   1bb34:	mov	r3, #0
   1bb38:	b	1ba10 <_start@@Base+0x73e8>
   1bb3c:	mov	r2, #0
   1bb40:	mov	r3, #0
   1bb44:	b	1ba3c <_start@@Base+0x7414>
   1bb48:	mov	r2, #0
   1bb4c:	mov	r3, #0
   1bb50:	b	1ba64 <_start@@Base+0x743c>
   1bb54:	mov	r2, #0
   1bb58:	mov	r3, #0
   1bb5c:	b	1ba90 <_start@@Base+0x7468>
   1bb60:	mov	r2, #0
   1bb64:	mov	r3, #0
   1bb68:	b	1babc <_start@@Base+0x7494>
   1bb6c:	mov	r2, #0
   1bb70:	mov	r3, #0
   1bb74:	b	1bae8 <_start@@Base+0x74c0>
   1bb78:	mov	r3, #7
   1bb7c:	mov	r2, r7
   1bb80:	mov	r1, r6
   1bb84:	mov	r0, r9
   1bb88:	bl	193e8 <_start@@Base+0x4dc0>
   1bb8c:	mov	sl, r0
   1bb90:	cmp	r6, r0
   1bb94:	beq	1bc60 <_start@@Base+0x7638>
   1bb98:	add	r1, sp, #472	; 0x1d8
   1bb9c:	mov	r2, #0
   1bba0:	mov	r3, #0
   1bba4:	strd	r2, [r1, #-24]!	; 0xffffffe8
   1bba8:	mov	r3, r1
   1bbac:	mov	r2, r7
   1bbb0:	mov	r1, r0
   1bbb4:	mov	r0, r9
   1bbb8:	bl	17cd4 <_start@@Base+0x36ac>
   1bbbc:	mov	r6, r0
   1bbc0:	cmp	sl, r0
   1bbc4:	beq	1bc10 <_start@@Base+0x75e8>
   1bbc8:	add	r3, sp, #448	; 0x1c0
   1bbcc:	ldrd	r2, [r3]
   1bbd0:	orrs	r3, r2, r3
   1bbd4:	bne	1bbe4 <_start@@Base+0x75bc>
   1bbd8:	ldr	r3, [r9, #8]
   1bbdc:	tst	r3, #2
   1bbe0:	beq	1bd8c <_start@@Base+0x7764>
   1bbe4:	mov	r3, #8
   1bbe8:	mov	r2, r3
   1bbec:	mov	r1, #0
   1bbf0:	ldr	r0, [r9]
   1bbf4:	bl	29678 <flatcc_builder_table_add@@Base>
   1bbf8:	cmp	r0, #0
   1bbfc:	beq	1bc50 <_start@@Base+0x7628>
   1bc00:	add	r3, sp, #448	; 0x1c0
   1bc04:	ldrd	r2, [r3]
   1bc08:	strd	r2, [r0]
   1bc0c:	b	1bd8c <_start@@Base+0x7764>
   1bc10:	add	r3, sp, #448	; 0x1c0
   1bc14:	str	r3, [sp]
   1bc18:	ldr	r3, [pc, #104]	; 1bc88 <_start@@Base+0x7660>
   1bc1c:	add	r3, r3, #132	; 0x84
   1bc20:	mov	r2, r7
   1bc24:	mov	r1, r0
   1bc28:	mov	r0, r9
   1bc2c:	bl	1ac34 <_start@@Base+0x660c>
   1bc30:	cmp	r7, r0
   1bc34:	cmpne	r6, r0
   1bc38:	movne	r6, r0
   1bc3c:	bne	1bbc8 <_start@@Base+0x75a0>
   1bc40:	mov	sl, r9
   1bc44:	mov	fp, r7
   1bc48:	mov	r6, r0
   1bc4c:	b	1bc58 <_start@@Base+0x7630>
   1bc50:	mov	sl, r9
   1bc54:	mov	fp, r7
   1bc58:	mov	r9, r6
   1bc5c:	b	1bf8c <_start@@Base+0x7964>
   1bc60:	mov	r2, r7
   1bc64:	mov	r1, r0
   1bc68:	mov	r0, r9
   1bc6c:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1bc70:	mov	r6, r0
   1bc74:	b	1bd8c <_start@@Base+0x7764>
   1bc78:	svcpl	0x00626262
   1bc7c:	cmnvs	r1, r1, ror #2
   1bc80:	cmnvs	r2, pc, asr r4
   1bc84:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1bc88:	andeq	r4, r5, r0, ror r0
   1bc8c:	mov	r3, #8
   1bc90:	mov	r2, r7
   1bc94:	mov	r1, r6
   1bc98:	mov	r0, r9
   1bc9c:	bl	193e8 <_start@@Base+0x4dc0>
   1bca0:	mov	sl, r0
   1bca4:	cmp	r6, r0
   1bca8:	beq	1bd60 <_start@@Base+0x7738>
   1bcac:	add	r3, sp, #472	; 0x1d8
   1bcb0:	mov	r2, #0
   1bcb4:	str	r2, [r3, #-24]!	; 0xffffffe8
   1bcb8:	mov	r2, r7
   1bcbc:	mov	r1, r0
   1bcc0:	mov	r0, r9
   1bcc4:	bl	17aec <_start@@Base+0x34c4>
   1bcc8:	mov	r6, r0
   1bccc:	cmp	sl, r0
   1bcd0:	beq	1bd14 <_start@@Base+0x76ec>
   1bcd4:	ldr	r3, [sp, #448]	; 0x1c0
   1bcd8:	cmp	r3, #0
   1bcdc:	bne	1bcec <_start@@Base+0x76c4>
   1bce0:	ldr	r3, [r9, #8]
   1bce4:	tst	r3, #2
   1bce8:	beq	1bd8c <_start@@Base+0x7764>
   1bcec:	mov	r3, #4
   1bcf0:	mov	r2, r3
   1bcf4:	mov	r1, #1
   1bcf8:	ldr	r0, [r9]
   1bcfc:	bl	29678 <flatcc_builder_table_add@@Base>
   1bd00:	cmp	r0, #0
   1bd04:	beq	1bd50 <_start@@Base+0x7728>
   1bd08:	ldr	r3, [sp, #448]	; 0x1c0
   1bd0c:	str	r3, [r0]
   1bd10:	b	1bd8c <_start@@Base+0x7764>
   1bd14:	add	r3, sp, #448	; 0x1c0
   1bd18:	str	r3, [sp]
   1bd1c:	ldr	r3, [sp, #428]	; 0x1ac
   1bd20:	mov	r2, r7
   1bd24:	mov	r1, r0
   1bd28:	mov	r0, r9
   1bd2c:	bl	18864 <_start@@Base+0x423c>
   1bd30:	cmp	r7, r0
   1bd34:	cmpne	r6, r0
   1bd38:	movne	r6, r0
   1bd3c:	bne	1bcd4 <_start@@Base+0x76ac>
   1bd40:	mov	sl, r9
   1bd44:	mov	fp, r7
   1bd48:	mov	r6, r0
   1bd4c:	b	1bd58 <_start@@Base+0x7730>
   1bd50:	mov	sl, r9
   1bd54:	mov	fp, r7
   1bd58:	mov	r9, r6
   1bd5c:	b	1bf8c <_start@@Base+0x7964>
   1bd60:	mov	r2, r7
   1bd64:	mov	r1, r0
   1bd68:	mov	r0, r9
   1bd6c:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1bd70:	mov	r6, r0
   1bd74:	b	1bd8c <_start@@Base+0x7764>
   1bd78:	mov	r2, r7
   1bd7c:	mov	r1, r0
   1bd80:	mov	r0, r9
   1bd84:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1bd88:	mov	r6, r0
   1bd8c:	sub	r3, r8, r6
   1bd90:	cmp	r3, #1
   1bd94:	ble	1bda8 <_start@@Base+0x7780>
   1bd98:	ldrb	r3, [r6]
   1bd9c:	cmp	r3, #32
   1bda0:	bhi	1bdbc <_start@@Base+0x7794>
   1bda4:	beq	1be7c <_start@@Base+0x7854>
   1bda8:	mov	r2, r7
   1bdac:	mov	r1, r6
   1bdb0:	mov	r0, r9
   1bdb4:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1bdb8:	mov	r6, r0
   1bdbc:	cmp	r7, r6
   1bdc0:	moveq	r3, #0
   1bdc4:	streq	r3, [sp, #444]	; 0x1bc
   1bdc8:	moveq	r0, r6
   1bdcc:	beq	1be04 <_start@@Base+0x77dc>
   1bdd0:	ldrb	r3, [r6]
   1bdd4:	cmp	r3, #44	; 0x2c
   1bdd8:	beq	1bed8 <_start@@Base+0x78b0>
   1bddc:	mov	r3, #0
   1bde0:	str	r3, [sp, #444]	; 0x1bc
   1bde4:	ldrb	r3, [r6]
   1bde8:	cmp	r3, #125	; 0x7d
   1bdec:	beq	1be90 <_start@@Base+0x7868>
   1bdf0:	mov	r3, #10
   1bdf4:	mov	r2, r7
   1bdf8:	mov	r1, r6
   1bdfc:	mov	r0, r9
   1be00:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1be04:	ldr	r3, [sp, #444]	; 0x1bc
   1be08:	cmp	r3, #0
   1be0c:	beq	1bf74 <_start@@Base+0x794c>
   1be10:	cmp	r7, r0
   1be14:	beq	1bd78 <_start@@Base+0x7750>
   1be18:	ldrb	r3, [r0]
   1be1c:	cmp	r3, #34	; 0x22
   1be20:	addeq	r0, r0, #1
   1be24:	moveq	r3, #0
   1be28:	streq	r3, [r9, #12]
   1be2c:	beq	1be40 <_start@@Base+0x7818>
   1be30:	cmp	r3, #46	; 0x2e
   1be34:	movne	r3, #1
   1be38:	strne	r3, [r9, #12]
   1be3c:	beq	1b78c <_start@@Base+0x7164>
   1be40:	sub	r3, r8, r0
   1be44:	cmp	r3, #8
   1be48:	movcs	r3, #8
   1be4c:	sub	r3, r3, #1
   1be50:	cmp	r3, #7
   1be54:	ldrls	pc, [pc, r3, lsl #2]
   1be58:	b	1bd78 <_start@@Base+0x7750>
   1be5c:	andeq	fp, r1, r0, lsr #19
   1be60:	muleq	r1, r4, r9
   1be64:	andeq	fp, r1, r8, lsl #19
   1be68:	andeq	fp, r1, ip, ror r9
   1be6c:	andeq	fp, r1, r0, ror r9
   1be70:	andeq	fp, r1, r4, ror #18
   1be74:	andeq	fp, r1, r8, ror #15
   1be78:	andeq	fp, r1, r4, lsr #15
   1be7c:	ldrb	r3, [r6, #1]
   1be80:	cmp	r3, #32
   1be84:	addhi	r6, r6, #1
   1be88:	bls	1bda8 <_start@@Base+0x7780>
   1be8c:	b	1bdbc <_start@@Base+0x7794>
   1be90:	add	r0, r6, #1
   1be94:	sub	r3, r8, r0
   1be98:	cmp	r3, #1
   1be9c:	ble	1beb0 <_start@@Base+0x7888>
   1bea0:	ldrb	r3, [r6, #1]
   1bea4:	cmp	r3, #32
   1bea8:	bhi	1be04 <_start@@Base+0x77dc>
   1beac:	beq	1bec4 <_start@@Base+0x789c>
   1beb0:	mov	r2, r7
   1beb4:	mov	r1, r0
   1beb8:	mov	r0, r9
   1bebc:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1bec0:	b	1be04 <_start@@Base+0x77dc>
   1bec4:	ldrb	r3, [r6, #2]
   1bec8:	cmp	r3, #32
   1becc:	addhi	r0, r6, #2
   1bed0:	bls	1beb0 <_start@@Base+0x7888>
   1bed4:	b	1be04 <_start@@Base+0x77dc>
   1bed8:	add	r0, r6, #1
   1bedc:	sub	r3, r8, r0
   1bee0:	cmp	r3, #1
   1bee4:	ble	1bef8 <_start@@Base+0x78d0>
   1bee8:	ldrb	r3, [r6, #1]
   1beec:	cmp	r3, #32
   1bef0:	bhi	1bf08 <_start@@Base+0x78e0>
   1bef4:	beq	1bf40 <_start@@Base+0x7918>
   1bef8:	mov	r2, r7
   1befc:	mov	r1, r0
   1bf00:	mov	r0, r9
   1bf04:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1bf08:	cmp	r7, r0
   1bf0c:	beq	1bf54 <_start@@Base+0x792c>
   1bf10:	ldrb	r3, [r0]
   1bf14:	cmp	r3, #125	; 0x7d
   1bf18:	movne	r3, #1
   1bf1c:	strne	r3, [sp, #444]	; 0x1bc
   1bf20:	bne	1be04 <_start@@Base+0x77dc>
   1bf24:	mov	r3, #0
   1bf28:	str	r3, [sp, #444]	; 0x1bc
   1bf2c:	mov	r2, r7
   1bf30:	add	r1, r0, #1
   1bf34:	mov	r0, r9
   1bf38:	bl	17d9c <_start@@Base+0x3774>
   1bf3c:	b	1be04 <_start@@Base+0x77dc>
   1bf40:	ldrb	r3, [r6, #2]
   1bf44:	cmp	r3, #32
   1bf48:	addhi	r0, r6, #2
   1bf4c:	bls	1bef8 <_start@@Base+0x78d0>
   1bf50:	b	1bf08 <_start@@Base+0x78e0>
   1bf54:	mov	r3, #0
   1bf58:	str	r3, [sp, #444]	; 0x1bc
   1bf5c:	mov	r3, #10
   1bf60:	mov	r2, r7
   1bf64:	mov	r1, r0
   1bf68:	mov	r0, r9
   1bf6c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1bf70:	b	1be04 <_start@@Base+0x77dc>
   1bf74:	mov	sl, r9
   1bf78:	mov	r9, r0
   1bf7c:	mov	fp, r7
   1bf80:	ldr	r3, [sl, #24]
   1bf84:	cmp	r3, #0
   1bf88:	beq	1bfa8 <_start@@Base+0x7980>
   1bf8c:	mov	r3, #33	; 0x21
   1bf90:	mov	r2, fp
   1bf94:	mov	r1, r9
   1bf98:	mov	r0, sl
   1bf9c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1bfa0:	mov	r6, r0
   1bfa4:	b	1d11c <_start@@Base+0x8af4>
   1bfa8:	ldr	r0, [sl]
   1bfac:	bl	286cc <flatcc_builder_end_table@@Base>
   1bfb0:	subs	r4, r0, #0
   1bfb4:	beq	1bf8c <_start@@Base+0x7964>
   1bfb8:	mov	r1, #1
   1bfbc:	ldr	r0, [sl]
   1bfc0:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   1bfc4:	cmp	r0, #0
   1bfc8:	beq	1d3d4 <_start@@Base+0x8dac>
   1bfcc:	str	r4, [r0]
   1bfd0:	b	1d1c0 <_start@@Base+0x8b98>
   1bfd4:	mov	r3, #5
   1bfd8:	mov	r2, fp
   1bfdc:	mov	r1, r6
   1bfe0:	mov	r0, sl
   1bfe4:	bl	193e8 <_start@@Base+0x4dc0>
   1bfe8:	mov	r9, r0
   1bfec:	cmp	r6, r0
   1bff0:	beq	1c89c <_start@@Base+0x8274>
   1bff4:	mov	r1, #9
   1bff8:	ldr	r0, [sl]
   1bffc:	bl	27c7c <flatcc_builder_start_table@@Base>
   1c000:	cmp	r0, #0
   1c004:	bne	1c854 <_start@@Base+0x822c>
   1c008:	add	r3, sp, #440	; 0x1b8
   1c00c:	mov	r2, fp
   1c010:	mov	r1, r9
   1c014:	mov	r0, sl
   1c018:	bl	17de0 <_start@@Base+0x37b8>
   1c01c:	mov	r9, r0
   1c020:	ldr	r3, [sp, #440]	; 0x1b8
   1c024:	cmp	r3, #0
   1c028:	beq	1c848 <_start@@Base+0x8220>
   1c02c:	add	r7, pc, #932	; 0x3a4
   1c030:	ldrd	r6, [r7]
   1c034:	ldr	r3, [pc, #988]	; 1c418 <_start@@Base+0x7df0>
   1c038:	add	r3, r3, #216	; 0xd8
   1c03c:	str	r3, [sp, #428]	; 0x1ac
   1c040:	b	1c310 <_start@@Base+0x7ce8>
   1c044:	mov	r3, #5
   1c048:	mov	r2, fp
   1c04c:	mov	r1, r9
   1c050:	mov	r0, sl
   1c054:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1c058:	mov	r9, r0
   1c05c:	b	1c340 <_start@@Base+0x7d18>
   1c060:	add	r9, r9, #8
   1c064:	mov	r1, fp
   1c068:	mov	r0, r9
   1c06c:	bl	14750 <_start@@Base+0x128>
   1c070:	mov	r0, #0
   1c074:	and	r1, r1, #-16777216	; 0xff000000
   1c078:	cmp	r1, #889192448	; 0x35000000
   1c07c:	cmpeq	r0, #0
   1c080:	beq	1c09c <_start@@Base+0x7a74>
   1c084:	mov	r2, fp
   1c088:	mov	r1, r9
   1c08c:	mov	r0, sl
   1c090:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1c094:	mov	r9, r0
   1c098:	b	1c2ec <_start@@Base+0x7cc4>
   1c09c:	mov	r3, #1
   1c0a0:	mov	r2, fp
   1c0a4:	mov	r1, r9
   1c0a8:	mov	r0, sl
   1c0ac:	bl	193e8 <_start@@Base+0x4dc0>
   1c0b0:	mov	r4, r0
   1c0b4:	cmp	r9, r0
   1c0b8:	beq	1c164 <_start@@Base+0x7b3c>
   1c0bc:	add	r3, sp, #472	; 0x1d8
   1c0c0:	mov	r2, #0
   1c0c4:	str	r2, [r3, #-24]!	; 0xffffffe8
   1c0c8:	mov	r2, fp
   1c0cc:	mov	r1, r0
   1c0d0:	mov	r0, sl
   1c0d4:	bl	17aec <_start@@Base+0x34c4>
   1c0d8:	mov	r9, r0
   1c0dc:	cmp	r4, r0
   1c0e0:	beq	1c124 <_start@@Base+0x7afc>
   1c0e4:	ldr	r3, [sp, #448]	; 0x1c0
   1c0e8:	cmp	r3, #0
   1c0ec:	bne	1c0fc <_start@@Base+0x7ad4>
   1c0f0:	ldr	r3, [sl, #8]
   1c0f4:	tst	r3, #2
   1c0f8:	beq	1c2ec <_start@@Base+0x7cc4>
   1c0fc:	mov	r3, #4
   1c100:	mov	r2, r3
   1c104:	mov	r1, #1
   1c108:	ldr	r0, [sl]
   1c10c:	bl	29678 <flatcc_builder_table_add@@Base>
   1c110:	cmp	r0, #0
   1c114:	beq	1c158 <_start@@Base+0x7b30>
   1c118:	ldr	r3, [sp, #448]	; 0x1c0
   1c11c:	str	r3, [r0]
   1c120:	b	1c2ec <_start@@Base+0x7cc4>
   1c124:	add	r3, sp, #448	; 0x1c0
   1c128:	str	r3, [sp]
   1c12c:	ldr	r3, [pc, #740]	; 1c418 <_start@@Base+0x7df0>
   1c130:	add	r3, r3, #156	; 0x9c
   1c134:	mov	r2, fp
   1c138:	mov	r1, r0
   1c13c:	mov	r0, sl
   1c140:	bl	18864 <_start@@Base+0x423c>
   1c144:	cmp	fp, r0
   1c148:	cmpne	r9, r0
   1c14c:	beq	1c15c <_start@@Base+0x7b34>
   1c150:	mov	r9, r0
   1c154:	b	1c0e4 <_start@@Base+0x7abc>
   1c158:	mov	r0, r9
   1c15c:	mov	r9, r0
   1c160:	b	1c854 <_start@@Base+0x822c>
   1c164:	mov	r2, fp
   1c168:	mov	r1, r0
   1c16c:	mov	r0, sl
   1c170:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1c174:	mov	r9, r0
   1c178:	b	1c2ec <_start@@Base+0x7cc4>
   1c17c:	mov	r3, #4
   1c180:	mov	r2, fp
   1c184:	mov	r1, r9
   1c188:	mov	r0, sl
   1c18c:	bl	193e8 <_start@@Base+0x4dc0>
   1c190:	cmp	r0, r9
   1c194:	beq	1d510 <_start@@Base+0x8ee8>
   1c198:	add	r3, sp, #444	; 0x1bc
   1c19c:	mov	r2, fp
   1c1a0:	mov	r1, r0
   1c1a4:	mov	r0, sl
   1c1a8:	bl	2f2b4 <flatcc_json_parser_build_string@@Base>
   1c1ac:	mov	r9, r0
   1c1b0:	ldr	r3, [sp, #444]	; 0x1bc
   1c1b4:	cmp	r3, #0
   1c1b8:	beq	1c854 <_start@@Base+0x822c>
   1c1bc:	mov	r1, #0
   1c1c0:	ldr	r0, [sl]
   1c1c4:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   1c1c8:	cmp	r0, #0
   1c1cc:	beq	1c854 <_start@@Base+0x822c>
   1c1d0:	ldr	r3, [sp, #444]	; 0x1bc
   1c1d4:	str	r3, [r0]
   1c1d8:	b	1c2ec <_start@@Base+0x7cc4>
   1c1dc:	add	r3, sp, #448	; 0x1c0
   1c1e0:	str	r3, [sp]
   1c1e4:	ldr	r3, [pc, #556]	; 1c418 <_start@@Base+0x7df0>
   1c1e8:	add	r3, r3, #168	; 0xa8
   1c1ec:	mov	r2, fp
   1c1f0:	mov	r1, r0
   1c1f4:	mov	r0, sl
   1c1f8:	bl	1ac34 <_start@@Base+0x660c>
   1c1fc:	cmp	fp, r0
   1c200:	cmpne	r9, r0
   1c204:	movne	r9, r0
   1c208:	bne	1d570 <_start@@Base+0x8f48>
   1c20c:	mov	r9, r0
   1c210:	b	1c854 <_start@@Base+0x822c>
   1c214:	mov	r2, fp
   1c218:	mov	r1, r0
   1c21c:	mov	r0, sl
   1c220:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1c224:	mov	r9, r0
   1c228:	b	1c2ec <_start@@Base+0x7cc4>
   1c22c:	mov	r3, #4
   1c230:	mov	r2, fp
   1c234:	mov	r1, r9
   1c238:	mov	r0, sl
   1c23c:	bl	193e8 <_start@@Base+0x4dc0>
   1c240:	mov	r1, r0
   1c244:	cmp	r0, r9
   1c248:	beq	1c28c <_start@@Base+0x7c64>
   1c24c:	add	r3, sp, #444	; 0x1bc
   1c250:	mov	r2, fp
   1c254:	mov	r0, sl
   1c258:	bl	2f2b4 <flatcc_json_parser_build_string@@Base>
   1c25c:	mov	r9, r0
   1c260:	ldr	r3, [sp, #444]	; 0x1bc
   1c264:	cmp	r3, #0
   1c268:	beq	1c854 <_start@@Base+0x822c>
   1c26c:	mov	r1, #2
   1c270:	ldr	r0, [sl]
   1c274:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   1c278:	cmp	r0, #0
   1c27c:	beq	1c854 <_start@@Base+0x822c>
   1c280:	ldr	r3, [sp, #444]	; 0x1bc
   1c284:	str	r3, [r0]
   1c288:	b	1c2ec <_start@@Base+0x7cc4>
   1c28c:	mov	r2, fp
   1c290:	mov	r0, sl
   1c294:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1c298:	mov	r9, r0
   1c29c:	b	1c2ec <_start@@Base+0x7cc4>
   1c2a0:	cmp	r1, r7
   1c2a4:	cmpeq	r0, r6
   1c2a8:	beq	1c41c <_start@@Base+0x7df4>
   1c2ac:	mov	r0, #0
   1c2b0:	add	r3, pc, #296	; 0x128
   1c2b4:	ldrd	r2, [r3]
   1c2b8:	cmp	r1, r3
   1c2bc:	cmpeq	r0, r2
   1c2c0:	beq	1c604 <_start@@Base+0x7fdc>
   1c2c4:	add	r3, pc, #284	; 0x11c
   1c2c8:	ldrd	r2, [r3]
   1c2cc:	cmp	r5, r3
   1c2d0:	cmpeq	r4, r2
   1c2d4:	beq	1c664 <_start@@Base+0x803c>
   1c2d8:	mov	r2, fp
   1c2dc:	mov	r1, r9
   1c2e0:	mov	r0, sl
   1c2e4:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1c2e8:	mov	r9, r0
   1c2ec:	add	r3, sp, #440	; 0x1b8
   1c2f0:	mov	r2, fp
   1c2f4:	mov	r1, r9
   1c2f8:	mov	r0, sl
   1c2fc:	bl	18104 <_start@@Base+0x3adc>
   1c300:	mov	r9, r0
   1c304:	ldr	r3, [sp, #440]	; 0x1b8
   1c308:	cmp	r3, #0
   1c30c:	beq	1c848 <_start@@Base+0x8220>
   1c310:	cmp	fp, r9
   1c314:	beq	1c340 <_start@@Base+0x7d18>
   1c318:	ldrb	r3, [r9]
   1c31c:	cmp	r3, #34	; 0x22
   1c320:	addeq	r9, r9, #1
   1c324:	moveq	r3, #0
   1c328:	streq	r3, [sl, #12]
   1c32c:	beq	1c340 <_start@@Base+0x7d18>
   1c330:	cmp	r3, #46	; 0x2e
   1c334:	movne	r3, #1
   1c338:	strne	r3, [sl, #12]
   1c33c:	beq	1c044 <_start@@Base+0x7a1c>
   1c340:	mov	r1, fp
   1c344:	mov	r0, r9
   1c348:	bl	14750 <_start@@Base+0x128>
   1c34c:	mov	r4, r0
   1c350:	mov	r5, r1
   1c354:	add	r3, pc, #148	; 0x94
   1c358:	ldrd	r2, [r3]
   1c35c:	cmp	r1, r3
   1c360:	cmpeq	r0, r2
   1c364:	bhi	1c2a0 <_start@@Base+0x7c78>
   1c368:	add	r3, pc, #136	; 0x88
   1c36c:	ldrd	r2, [r3]
   1c370:	cmp	r1, r3
   1c374:	cmpeq	r0, r2
   1c378:	beq	1c060 <_start@@Base+0x7a38>
   1c37c:	mov	r2, #0
   1c380:	add	r1, pc, #120	; 0x78
   1c384:	ldrd	r0, [r1]
   1c388:	cmp	r5, r1
   1c38c:	cmpeq	r2, r0
   1c390:	beq	1c17c <_start@@Base+0x7b54>
   1c394:	add	r1, pc, #108	; 0x6c
   1c398:	ldrd	r0, [r1]
   1c39c:	cmp	r5, r1
   1c3a0:	cmpeq	r4, r0
   1c3a4:	beq	1d524 <_start@@Base+0x8efc>
   1c3a8:	add	r1, pc, #96	; 0x60
   1c3ac:	ldrd	r0, [r1]
   1c3b0:	cmp	r5, r1
   1c3b4:	cmpeq	r2, r0
   1c3b8:	beq	1c22c <_start@@Base+0x7c04>
   1c3bc:	mov	r2, fp
   1c3c0:	mov	r1, r9
   1c3c4:	mov	r0, sl
   1c3c8:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1c3cc:	mov	r9, r0
   1c3d0:	b	1c2ec <_start@@Base+0x7cc4>
   1c3d4:	nop			; (mov r0, r0)
   1c3d8:	teqcc	r2, r4, lsr r3
   1c3dc:	cmnvs	r3, #-1946157055	; 0x8c000001
   1c3e0:	andeq	r0, r0, r0
   1c3e4:	cmnvs	r3, #-1946157055	; 0x8c000001
   1c3e8:	teqcc	r2, r4, lsr r3
   1c3ec:	strbtvs	r6, [r4], #-1124	; 0xfffffb9c
   1c3f0:			; <UNDEFINED> instruction: 0xffffffff
   1c3f4:	cmnvs	r3, #-2013265919	; 0x88000001
   1c3f8:	teqcc	r2, r4, lsr r3
   1c3fc:	cmnvs	r1, r1, ror #2
   1c400:	andeq	r0, r0, r0
   1c404:	cmnvs	r1, r1, ror #2
   1c408:	teqcc	r2, r4, lsr r3
   1c40c:	rsbvs	r6, r2, #536870918	; 0x20000006
   1c410:	andeq	r0, r0, r0
   1c414:	rsbvs	r6, r2, #536870918	; 0x20000006
   1c418:	andeq	r4, r5, r0, ror r0
   1c41c:	mov	r3, #8
   1c420:	mov	r2, fp
   1c424:	mov	r1, r9
   1c428:	mov	r0, sl
   1c42c:	bl	193e8 <_start@@Base+0x4dc0>
   1c430:	mov	r4, r0
   1c434:	cmp	r0, r9
   1c438:	beq	1c4e8 <_start@@Base+0x7ec0>
   1c43c:	add	r3, sp, #472	; 0x1d8
   1c440:	mov	r0, #0
   1c444:	mov	r1, #0
   1c448:	strd	r0, [r3, #-24]!	; 0xffffffe8
   1c44c:	mov	r2, fp
   1c450:	mov	r1, r4
   1c454:	mov	r0, sl
   1c458:	bl	17cd4 <_start@@Base+0x36ac>
   1c45c:	mov	r9, r0
   1c460:	cmp	r4, r0
   1c464:	beq	1c4b0 <_start@@Base+0x7e88>
   1c468:	add	r3, sp, #448	; 0x1c0
   1c46c:	ldrd	r2, [r3]
   1c470:	orrs	r3, r2, r3
   1c474:	bne	1c484 <_start@@Base+0x7e5c>
   1c478:	ldr	r3, [sl, #8]
   1c47c:	tst	r3, #2
   1c480:	beq	1c2ec <_start@@Base+0x7cc4>
   1c484:	mov	r3, #8
   1c488:	mov	r2, r3
   1c48c:	mov	r1, #5
   1c490:	ldr	r0, [sl]
   1c494:	bl	29678 <flatcc_builder_table_add@@Base>
   1c498:	cmp	r0, #0
   1c49c:	beq	1c854 <_start@@Base+0x822c>
   1c4a0:	add	r3, sp, #448	; 0x1c0
   1c4a4:	ldrd	r2, [r3]
   1c4a8:	strd	r2, [r0]
   1c4ac:	b	1c2ec <_start@@Base+0x7cc4>
   1c4b0:	add	r3, sp, #448	; 0x1c0
   1c4b4:	str	r3, [sp]
   1c4b8:	ldr	r3, [pc, #-168]	; 1c418 <_start@@Base+0x7df0>
   1c4bc:	add	r3, r3, #180	; 0xb4
   1c4c0:	mov	r2, fp
   1c4c4:	mov	r1, r0
   1c4c8:	mov	r0, sl
   1c4cc:	bl	1ac34 <_start@@Base+0x660c>
   1c4d0:	cmp	fp, r0
   1c4d4:	cmpne	r9, r0
   1c4d8:	movne	r9, r0
   1c4dc:	bne	1c468 <_start@@Base+0x7e40>
   1c4e0:	mov	r9, r0
   1c4e4:	b	1c854 <_start@@Base+0x822c>
   1c4e8:	add	r4, r0, #8
   1c4ec:	mov	r1, fp
   1c4f0:	mov	r0, r4
   1c4f4:	bl	14750 <_start@@Base+0x128>
   1c4f8:	mov	r0, #0
   1c4fc:	and	r1, r1, #-16777216	; 0xff000000
   1c500:	cmp	r1, #889192448	; 0x35000000
   1c504:	cmpeq	r0, #0
   1c508:	beq	1c524 <_start@@Base+0x7efc>
   1c50c:	mov	r2, fp
   1c510:	mov	r1, r4
   1c514:	mov	r0, sl
   1c518:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1c51c:	mov	r9, r0
   1c520:	b	1c2ec <_start@@Base+0x7cc4>
   1c524:	mov	r3, #1
   1c528:	mov	r2, fp
   1c52c:	mov	r1, r4
   1c530:	mov	r0, sl
   1c534:	bl	193e8 <_start@@Base+0x4dc0>
   1c538:	mov	r5, r0
   1c53c:	cmp	r4, r0
   1c540:	beq	1c5ec <_start@@Base+0x7fc4>
   1c544:	add	r3, sp, #472	; 0x1d8
   1c548:	mov	r2, #0
   1c54c:	str	r2, [r3, #-24]!	; 0xffffffe8
   1c550:	mov	r2, fp
   1c554:	mov	r1, r0
   1c558:	mov	r0, sl
   1c55c:	bl	17aec <_start@@Base+0x34c4>
   1c560:	mov	r9, r0
   1c564:	cmp	r5, r0
   1c568:	beq	1c5ac <_start@@Base+0x7f84>
   1c56c:	ldr	r3, [sp, #448]	; 0x1c0
   1c570:	cmp	r3, #0
   1c574:	bne	1c584 <_start@@Base+0x7f5c>
   1c578:	ldr	r3, [sl, #8]
   1c57c:	tst	r3, #2
   1c580:	beq	1c2ec <_start@@Base+0x7cc4>
   1c584:	mov	r3, #4
   1c588:	mov	r2, r3
   1c58c:	mov	r1, #6
   1c590:	ldr	r0, [sl]
   1c594:	bl	29678 <flatcc_builder_table_add@@Base>
   1c598:	cmp	r0, #0
   1c59c:	beq	1c5e0 <_start@@Base+0x7fb8>
   1c5a0:	ldr	r3, [sp, #448]	; 0x1c0
   1c5a4:	str	r3, [r0]
   1c5a8:	b	1c2ec <_start@@Base+0x7cc4>
   1c5ac:	add	r3, sp, #448	; 0x1c0
   1c5b0:	str	r3, [sp]
   1c5b4:	ldr	r3, [pc, #-420]	; 1c418 <_start@@Base+0x7df0>
   1c5b8:	add	r3, r3, #192	; 0xc0
   1c5bc:	mov	r2, fp
   1c5c0:	mov	r1, r0
   1c5c4:	mov	r0, sl
   1c5c8:	bl	18864 <_start@@Base+0x423c>
   1c5cc:	cmp	fp, r0
   1c5d0:	cmpne	r9, r0
   1c5d4:	beq	1c5e4 <_start@@Base+0x7fbc>
   1c5d8:	mov	r9, r0
   1c5dc:	b	1c56c <_start@@Base+0x7f44>
   1c5e0:	mov	r0, r9
   1c5e4:	mov	r9, r0
   1c5e8:	b	1c854 <_start@@Base+0x822c>
   1c5ec:	mov	r2, fp
   1c5f0:	mov	r1, r0
   1c5f4:	mov	r0, sl
   1c5f8:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1c5fc:	mov	r9, r0
   1c600:	b	1c2ec <_start@@Base+0x7cc4>
   1c604:	mov	r3, #4
   1c608:	mov	r2, fp
   1c60c:	mov	r1, r9
   1c610:	mov	r0, sl
   1c614:	bl	193e8 <_start@@Base+0x4dc0>
   1c618:	cmp	r0, r9
   1c61c:	beq	1c2c4 <_start@@Base+0x7c9c>
   1c620:	add	r3, sp, #444	; 0x1bc
   1c624:	mov	r2, fp
   1c628:	mov	r1, r0
   1c62c:	mov	r0, sl
   1c630:	bl	2f2b4 <flatcc_json_parser_build_string@@Base>
   1c634:	mov	r9, r0
   1c638:	ldr	r3, [sp, #444]	; 0x1bc
   1c63c:	cmp	r3, #0
   1c640:	beq	1c854 <_start@@Base+0x822c>
   1c644:	mov	r1, #4
   1c648:	ldr	r0, [sl]
   1c64c:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   1c650:	cmp	r0, #0
   1c654:	beq	1c854 <_start@@Base+0x822c>
   1c658:	ldr	r3, [sp, #444]	; 0x1bc
   1c65c:	str	r3, [r0]
   1c660:	b	1c2ec <_start@@Base+0x7cc4>
   1c664:	mov	r3, #8
   1c668:	mov	r2, fp
   1c66c:	mov	r1, r9
   1c670:	mov	r0, sl
   1c674:	bl	193e8 <_start@@Base+0x4dc0>
   1c678:	mov	r4, r0
   1c67c:	cmp	r0, r9
   1c680:	beq	1c730 <_start@@Base+0x8108>
   1c684:	add	r3, sp, #472	; 0x1d8
   1c688:	mov	r0, #0
   1c68c:	mov	r1, #0
   1c690:	strd	r0, [r3, #-24]!	; 0xffffffe8
   1c694:	mov	r2, fp
   1c698:	mov	r1, r4
   1c69c:	mov	r0, sl
   1c6a0:	bl	17cd4 <_start@@Base+0x36ac>
   1c6a4:	mov	r9, r0
   1c6a8:	cmp	r4, r0
   1c6ac:	beq	1c6f8 <_start@@Base+0x80d0>
   1c6b0:	add	r3, sp, #448	; 0x1c0
   1c6b4:	ldrd	r2, [r3]
   1c6b8:	orrs	r3, r2, r3
   1c6bc:	bne	1c6cc <_start@@Base+0x80a4>
   1c6c0:	ldr	r3, [sl, #8]
   1c6c4:	tst	r3, #2
   1c6c8:	beq	1c2ec <_start@@Base+0x7cc4>
   1c6cc:	mov	r3, #8
   1c6d0:	mov	r2, r3
   1c6d4:	mov	r1, #7
   1c6d8:	ldr	r0, [sl]
   1c6dc:	bl	29678 <flatcc_builder_table_add@@Base>
   1c6e0:	cmp	r0, #0
   1c6e4:	beq	1c854 <_start@@Base+0x822c>
   1c6e8:	add	r3, sp, #448	; 0x1c0
   1c6ec:	ldrd	r2, [r3]
   1c6f0:	strd	r2, [r0]
   1c6f4:	b	1c2ec <_start@@Base+0x7cc4>
   1c6f8:	add	r3, sp, #448	; 0x1c0
   1c6fc:	str	r3, [sp]
   1c700:	ldr	r3, [pc, #-752]	; 1c418 <_start@@Base+0x7df0>
   1c704:	add	r3, r3, #204	; 0xcc
   1c708:	mov	r2, fp
   1c70c:	mov	r1, r0
   1c710:	mov	r0, sl
   1c714:	bl	1ac34 <_start@@Base+0x660c>
   1c718:	cmp	fp, r0
   1c71c:	cmpne	r9, r0
   1c720:	movne	r9, r0
   1c724:	bne	1c6b0 <_start@@Base+0x8088>
   1c728:	mov	r9, r0
   1c72c:	b	1c854 <_start@@Base+0x822c>
   1c730:	add	r4, r0, #8
   1c734:	mov	r1, fp
   1c738:	mov	r0, r4
   1c73c:	bl	14750 <_start@@Base+0x128>
   1c740:	mov	r0, #0
   1c744:	and	r1, r1, #-16777216	; 0xff000000
   1c748:	cmp	r1, #889192448	; 0x35000000
   1c74c:	cmpeq	r0, #0
   1c750:	beq	1c76c <_start@@Base+0x8144>
   1c754:	mov	r2, fp
   1c758:	mov	r1, r4
   1c75c:	mov	r0, sl
   1c760:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1c764:	mov	r9, r0
   1c768:	b	1c2ec <_start@@Base+0x7cc4>
   1c76c:	mov	r3, #1
   1c770:	mov	r2, fp
   1c774:	mov	r1, r4
   1c778:	mov	r0, sl
   1c77c:	bl	193e8 <_start@@Base+0x4dc0>
   1c780:	mov	r5, r0
   1c784:	cmp	r4, r0
   1c788:	beq	1c830 <_start@@Base+0x8208>
   1c78c:	add	r3, sp, #472	; 0x1d8
   1c790:	mov	r2, #0
   1c794:	str	r2, [r3, #-24]!	; 0xffffffe8
   1c798:	mov	r2, fp
   1c79c:	mov	r1, r0
   1c7a0:	mov	r0, sl
   1c7a4:	bl	17aec <_start@@Base+0x34c4>
   1c7a8:	mov	r9, r0
   1c7ac:	cmp	r5, r0
   1c7b0:	beq	1c7f4 <_start@@Base+0x81cc>
   1c7b4:	ldr	r3, [sp, #448]	; 0x1c0
   1c7b8:	cmp	r3, #0
   1c7bc:	bne	1c7cc <_start@@Base+0x81a4>
   1c7c0:	ldr	r3, [sl, #8]
   1c7c4:	tst	r3, #2
   1c7c8:	beq	1c2ec <_start@@Base+0x7cc4>
   1c7cc:	mov	r3, #4
   1c7d0:	mov	r2, r3
   1c7d4:	mov	r1, #8
   1c7d8:	ldr	r0, [sl]
   1c7dc:	bl	29678 <flatcc_builder_table_add@@Base>
   1c7e0:	cmp	r0, #0
   1c7e4:	beq	1c824 <_start@@Base+0x81fc>
   1c7e8:	ldr	r3, [sp, #448]	; 0x1c0
   1c7ec:	str	r3, [r0]
   1c7f0:	b	1c2ec <_start@@Base+0x7cc4>
   1c7f4:	add	r3, sp, #448	; 0x1c0
   1c7f8:	str	r3, [sp]
   1c7fc:	ldr	r3, [sp, #428]	; 0x1ac
   1c800:	mov	r2, fp
   1c804:	mov	r1, r0
   1c808:	mov	r0, sl
   1c80c:	bl	18864 <_start@@Base+0x423c>
   1c810:	cmp	fp, r0
   1c814:	cmpne	r9, r0
   1c818:	beq	1c828 <_start@@Base+0x8200>
   1c81c:	mov	r9, r0
   1c820:	b	1c7b4 <_start@@Base+0x818c>
   1c824:	mov	r0, r9
   1c828:	mov	r9, r0
   1c82c:	b	1c854 <_start@@Base+0x822c>
   1c830:	mov	r2, fp
   1c834:	mov	r1, r0
   1c838:	mov	r0, sl
   1c83c:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1c840:	mov	r9, r0
   1c844:	b	1c2ec <_start@@Base+0x7cc4>
   1c848:	ldr	r3, [sl, #24]
   1c84c:	cmp	r3, #0
   1c850:	beq	1c870 <_start@@Base+0x8248>
   1c854:	mov	r3, #33	; 0x21
   1c858:	mov	r2, fp
   1c85c:	mov	r1, r9
   1c860:	mov	r0, sl
   1c864:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1c868:	mov	r6, r0
   1c86c:	b	1d11c <_start@@Base+0x8af4>
   1c870:	ldr	r0, [sl]
   1c874:	bl	286cc <flatcc_builder_end_table@@Base>
   1c878:	subs	r4, r0, #0
   1c87c:	beq	1c854 <_start@@Base+0x822c>
   1c880:	mov	r1, #0
   1c884:	ldr	r0, [sl]
   1c888:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   1c88c:	cmp	r0, #0
   1c890:	beq	1d3dc <_start@@Base+0x8db4>
   1c894:	str	r4, [r0]
   1c898:	b	1d1c0 <_start@@Base+0x8b98>
   1c89c:	mov	r6, r0
   1c8a0:	b	1b6f8 <_start@@Base+0x70d0>
   1c8a4:	mov	r3, #6
   1c8a8:	mov	r2, fp
   1c8ac:	mov	r1, r6
   1c8b0:	mov	r0, sl
   1c8b4:	bl	193e8 <_start@@Base+0x4dc0>
   1c8b8:	mov	r9, r0
   1c8bc:	cmp	r6, r0
   1c8c0:	beq	1d18c <_start@@Base+0x8b64>
   1c8c4:	mov	r1, #2
   1c8c8:	ldr	r0, [sl]
   1c8cc:	bl	27c7c <flatcc_builder_start_table@@Base>
   1c8d0:	cmp	r0, #0
   1c8d4:	bne	1d104 <_start@@Base+0x8adc>
   1c8d8:	add	r3, sp, #444	; 0x1bc
   1c8dc:	mov	r2, fp
   1c8e0:	mov	r1, r9
   1c8e4:	mov	r0, sl
   1c8e8:	bl	17de0 <_start@@Base+0x37b8>
   1c8ec:	add	r5, pc, #940	; 0x3ac
   1c8f0:	ldrd	r4, [r5]
   1c8f4:	mov	r9, sl
   1c8f8:	mov	r7, fp
   1c8fc:	b	1cf7c <_start@@Base+0x8954>
   1c900:	mov	r3, #5
   1c904:	mov	r2, r7
   1c908:	mov	r1, r0
   1c90c:	mov	r0, r9
   1c910:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1c914:	b	1cfb8 <_start@@Base+0x8990>
   1c918:	ldrb	r2, [r0, #7]
   1c91c:	mov	r3, #0
   1c920:	b	1c92c <_start@@Base+0x8304>
   1c924:	mov	r2, #0
   1c928:	mov	r3, #0
   1c92c:	ldrb	sl, [r0, #6]
   1c930:	mov	r1, #0
   1c934:	str	r1, [sp, #260]	; 0x104
   1c938:	lsl	r1, sl, #8
   1c93c:	str	r1, [sp, #256]	; 0x100
   1c940:	add	r1, sp, #256	; 0x100
   1c944:	ldrd	sl, [r1]
   1c948:	orr	sl, sl, r2
   1c94c:	orr	fp, fp, r3
   1c950:	mov	r2, sl
   1c954:	mov	r3, fp
   1c958:	ldrb	sl, [r0, #5]
   1c95c:	mov	r1, #0
   1c960:	str	r1, [sp, #188]	; 0xbc
   1c964:	lsl	r1, sl, #16
   1c968:	str	r1, [sp, #184]	; 0xb8
   1c96c:	ldrd	sl, [sp, #184]	; 0xb8
   1c970:	orr	sl, sl, r2
   1c974:	orr	fp, fp, r3
   1c978:	mov	r2, sl
   1c97c:	mov	r3, fp
   1c980:	ldrb	sl, [r0, #4]
   1c984:	mov	r1, #0
   1c988:	str	r1, [sp, #108]	; 0x6c
   1c98c:	lsl	r1, sl, #24
   1c990:	str	r1, [sp, #104]	; 0x68
   1c994:	ldrd	sl, [sp, #104]	; 0x68
   1c998:	orr	sl, sl, r2
   1c99c:	orr	fp, fp, r3
   1c9a0:	mov	r2, sl
   1c9a4:	mov	r3, fp
   1c9a8:	ldrb	r1, [r0, #3]
   1c9ac:	str	r1, [sp, #76]	; 0x4c
   1c9b0:	mov	r1, #0
   1c9b4:	str	r1, [sp, #72]	; 0x48
   1c9b8:	ldrd	sl, [sp, #72]	; 0x48
   1c9bc:	orr	sl, sl, r2
   1c9c0:	orr	fp, fp, r3
   1c9c4:	mov	r2, sl
   1c9c8:	mov	r3, fp
   1c9cc:	ldrb	sl, [r0, #2]
   1c9d0:	lsl	r1, sl, #8
   1c9d4:	str	r1, [sp, #60]	; 0x3c
   1c9d8:	mov	r1, #0
   1c9dc:	str	r1, [sp, #56]	; 0x38
   1c9e0:	ldrd	sl, [sp, #56]	; 0x38
   1c9e4:	orr	sl, sl, r2
   1c9e8:	orr	fp, fp, r3
   1c9ec:	mov	r2, sl
   1c9f0:	mov	r3, fp
   1c9f4:	ldrb	sl, [r0, #1]
   1c9f8:	lsl	r1, sl, #16
   1c9fc:	str	r1, [sp, #44]	; 0x2c
   1ca00:	mov	r1, #0
   1ca04:	str	r1, [sp, #40]	; 0x28
   1ca08:	ldrd	sl, [sp, #40]	; 0x28
   1ca0c:	orr	sl, sl, r2
   1ca10:	orr	fp, fp, r3
   1ca14:	mov	r2, sl
   1ca18:	mov	r3, fp
   1ca1c:	ldrb	sl, [r0]
   1ca20:	lsl	r1, sl, #24
   1ca24:	str	r1, [sp, #28]
   1ca28:	mov	r1, #0
   1ca2c:	str	r1, [sp, #24]
   1ca30:	ldrd	sl, [sp, #24]
   1ca34:	orr	sl, sl, r2
   1ca38:	orr	fp, fp, r3
   1ca3c:	mov	r2, sl
   1ca40:	mov	r3, fp
   1ca44:	add	fp, pc, #604	; 0x25c
   1ca48:	ldrd	sl, [fp]
   1ca4c:	cmp	r3, fp
   1ca50:	cmpeq	r2, sl
   1ca54:	bne	1cef0 <_start@@Base+0x88c8>
   1ca58:	add	r6, r0, #8
   1ca5c:	sub	r3, r8, r6
   1ca60:	cmp	r3, #8
   1ca64:	movcs	r3, #8
   1ca68:	sub	r3, r3, #1
   1ca6c:	cmp	r3, #7
   1ca70:	ldrls	pc, [pc, r3, lsl #2]
   1ca74:	b	1cc90 <_start@@Base+0x8668>
   1ca78:	andeq	ip, r1, r4, lsl #25
   1ca7c:	andeq	ip, r1, r8, ror ip
   1ca80:	andeq	ip, r1, ip, ror #24
   1ca84:	andeq	ip, r1, r0, ror #24
   1ca88:	andeq	ip, r1, r4, asr ip
   1ca8c:	andeq	ip, r1, r8, asr #24
   1ca90:	andeq	ip, r1, ip, ror #21
   1ca94:	andeq	ip, r1, r0, ror #21
   1ca98:	mov	r2, #0
   1ca9c:	mov	r3, #0
   1caa0:	b	1c958 <_start@@Base+0x8330>
   1caa4:	mov	r2, #0
   1caa8:	mov	r3, #0
   1caac:	b	1c980 <_start@@Base+0x8358>
   1cab0:	mov	r2, #0
   1cab4:	mov	r3, #0
   1cab8:	b	1c9a8 <_start@@Base+0x8380>
   1cabc:	mov	r2, #0
   1cac0:	mov	r3, #0
   1cac4:	b	1c9cc <_start@@Base+0x83a4>
   1cac8:	mov	r2, #0
   1cacc:	mov	r3, #0
   1cad0:	b	1c9f4 <_start@@Base+0x83cc>
   1cad4:	mov	r2, #0
   1cad8:	mov	r3, #0
   1cadc:	b	1ca1c <_start@@Base+0x83f4>
   1cae0:	ldrb	sl, [r0, #15]
   1cae4:	mov	fp, #0
   1cae8:	b	1caf4 <_start@@Base+0x84cc>
   1caec:	mov	sl, #0
   1caf0:	mov	fp, #0
   1caf4:	ldrb	r2, [r0, #14]
   1caf8:	mov	r1, #0
   1cafc:	str	r1, [sp, #372]	; 0x174
   1cb00:	lsl	r3, r2, #8
   1cb04:	str	r3, [sp, #368]	; 0x170
   1cb08:	add	r3, sp, #368	; 0x170
   1cb0c:	ldrd	r2, [r3]
   1cb10:	orr	r2, r2, sl
   1cb14:	orr	r3, r3, fp
   1cb18:	mov	sl, r2
   1cb1c:	mov	fp, r3
   1cb20:	ldrb	r2, [r0, #13]
   1cb24:	mov	r1, #0
   1cb28:	str	r1, [sp, #324]	; 0x144
   1cb2c:	lsl	r3, r2, #16
   1cb30:	str	r3, [sp, #320]	; 0x140
   1cb34:	add	r3, sp, #320	; 0x140
   1cb38:	ldrd	r2, [r3]
   1cb3c:	orr	r2, r2, sl
   1cb40:	orr	r3, r3, fp
   1cb44:	ldrb	sl, [r0, #12]
   1cb48:	mov	r1, #0
   1cb4c:	str	r1, [sp, #268]	; 0x10c
   1cb50:	lsl	r1, sl, #24
   1cb54:	str	r1, [sp, #264]	; 0x108
   1cb58:	add	r1, sp, #264	; 0x108
   1cb5c:	ldrd	sl, [r1]
   1cb60:	orr	sl, sl, r2
   1cb64:	orr	fp, fp, r3
   1cb68:	mov	r2, sl
   1cb6c:	mov	r3, fp
   1cb70:	ldrb	r1, [r0, #11]
   1cb74:	str	r1, [sp, #236]	; 0xec
   1cb78:	mov	r1, #0
   1cb7c:	str	r1, [sp, #232]	; 0xe8
   1cb80:	ldrd	sl, [sp, #232]	; 0xe8
   1cb84:	orr	sl, sl, r2
   1cb88:	orr	fp, fp, r3
   1cb8c:	mov	r2, sl
   1cb90:	mov	r3, fp
   1cb94:	ldrb	sl, [r0, #10]
   1cb98:	lsl	r1, sl, #8
   1cb9c:	str	r1, [sp, #196]	; 0xc4
   1cba0:	mov	r1, #0
   1cba4:	str	r1, [sp, #192]	; 0xc0
   1cba8:	ldrd	sl, [sp, #192]	; 0xc0
   1cbac:	orr	sl, sl, r2
   1cbb0:	orr	fp, fp, r3
   1cbb4:	mov	r2, sl
   1cbb8:	mov	r3, fp
   1cbbc:	ldrb	sl, [r0, #9]
   1cbc0:	lsl	r1, sl, #16
   1cbc4:	str	r1, [sp, #156]	; 0x9c
   1cbc8:	mov	r1, #0
   1cbcc:	str	r1, [sp, #152]	; 0x98
   1cbd0:	ldrd	sl, [sp, #152]	; 0x98
   1cbd4:	orr	sl, sl, r2
   1cbd8:	orr	fp, fp, r3
   1cbdc:	mov	r2, sl
   1cbe0:	mov	r3, fp
   1cbe4:	ldrb	sl, [r0, #8]
   1cbe8:	lsl	r1, sl, #24
   1cbec:	str	r1, [sp, #116]	; 0x74
   1cbf0:	mov	r1, #0
   1cbf4:	str	r1, [sp, #112]	; 0x70
   1cbf8:	ldrd	sl, [sp, #112]	; 0x70
   1cbfc:	orr	sl, sl, r2
   1cc00:	orr	fp, fp, r3
   1cc04:	mov	r2, sl
   1cc08:	mov	r3, fp
   1cc0c:	add	fp, pc, #156	; 0x9c
   1cc10:	ldrd	sl, [fp]
   1cc14:	cmp	r3, fp
   1cc18:	cmpeq	r2, sl
   1cc1c:	beq	1ccc4 <_start@@Base+0x869c>
   1cc20:	bic	r2, r2, #255	; 0xff
   1cc24:	cmp	r3, r5
   1cc28:	cmpeq	r2, r4
   1cc2c:	beq	1cdf4 <_start@@Base+0x87cc>
   1cc30:	mov	r2, r7
   1cc34:	mov	r1, r6
   1cc38:	mov	r0, r9
   1cc3c:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1cc40:	mov	r6, r0
   1cc44:	b	1cf04 <_start@@Base+0x88dc>
   1cc48:	mov	sl, #0
   1cc4c:	mov	fp, #0
   1cc50:	b	1cb20 <_start@@Base+0x84f8>
   1cc54:	mov	r2, #0
   1cc58:	mov	r3, #0
   1cc5c:	b	1cb44 <_start@@Base+0x851c>
   1cc60:	mov	r2, #0
   1cc64:	mov	r3, #0
   1cc68:	b	1cb70 <_start@@Base+0x8548>
   1cc6c:	mov	r2, #0
   1cc70:	mov	r3, #0
   1cc74:	b	1cb94 <_start@@Base+0x856c>
   1cc78:	mov	r2, #0
   1cc7c:	mov	r3, #0
   1cc80:	b	1cbbc <_start@@Base+0x8594>
   1cc84:	mov	r2, #0
   1cc88:	mov	r3, #0
   1cc8c:	b	1cbe4 <_start@@Base+0x85bc>
   1cc90:	mov	r2, #0
   1cc94:	mov	r3, #0
   1cc98:	b	1cc0c <_start@@Base+0x85e4>
   1cc9c:	nop			; (mov r0, r0)
   1cca0:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1cca4:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1cca8:	svcpl	0x00626262
   1ccac:	cmnvs	r1, r1, ror #2
   1ccb0:	cmnvs	r2, pc, asr r4
   1ccb4:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1ccb8:	movwvc	r0, #0
   1ccbc:	cmnvc	r4, #112, 10	; 0x1c000000
   1ccc0:	andeq	r4, r5, r0, ror r0
   1ccc4:	add	r6, r0, #16
   1ccc8:	mov	r1, r7
   1cccc:	mov	r0, r6
   1ccd0:	bl	14750 <_start@@Base+0x128>
   1ccd4:	and	r0, r0, #-16777216	; 0xff000000
   1ccd8:	sub	r3, pc, #40	; 0x28
   1ccdc:	ldrd	r2, [r3]
   1cce0:	cmp	r1, r3
   1cce4:	cmpeq	r0, r2
   1cce8:	beq	1cd04 <_start@@Base+0x86dc>
   1ccec:	mov	r2, r7
   1ccf0:	mov	r1, r6
   1ccf4:	mov	r0, r9
   1ccf8:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1ccfc:	mov	r6, r0
   1cd00:	b	1cf04 <_start@@Base+0x88dc>
   1cd04:	mov	r3, #5
   1cd08:	mov	r2, r7
   1cd0c:	mov	r1, r6
   1cd10:	mov	r0, r9
   1cd14:	bl	193e8 <_start@@Base+0x4dc0>
   1cd18:	mov	sl, r0
   1cd1c:	cmp	r6, r0
   1cd20:	beq	1cddc <_start@@Base+0x87b4>
   1cd24:	add	r3, sp, #472	; 0x1d8
   1cd28:	mov	r2, #0
   1cd2c:	str	r2, [r3, #-24]!	; 0xffffffe8
   1cd30:	mov	r2, r7
   1cd34:	mov	r1, r0
   1cd38:	mov	r0, r9
   1cd3c:	bl	17aec <_start@@Base+0x34c4>
   1cd40:	mov	r6, r0
   1cd44:	cmp	sl, r0
   1cd48:	beq	1cd8c <_start@@Base+0x8764>
   1cd4c:	ldr	r3, [sp, #448]	; 0x1c0
   1cd50:	cmp	r3, #0
   1cd54:	bne	1cd64 <_start@@Base+0x873c>
   1cd58:	ldr	r3, [r9, #8]
   1cd5c:	tst	r3, #2
   1cd60:	beq	1cf04 <_start@@Base+0x88dc>
   1cd64:	mov	r3, #4
   1cd68:	mov	r2, r3
   1cd6c:	mov	r1, #1
   1cd70:	ldr	r0, [r9]
   1cd74:	bl	29678 <flatcc_builder_table_add@@Base>
   1cd78:	cmp	r0, #0
   1cd7c:	beq	1cdcc <_start@@Base+0x87a4>
   1cd80:	ldr	r3, [sp, #448]	; 0x1c0
   1cd84:	str	r3, [r0]
   1cd88:	b	1cf04 <_start@@Base+0x88dc>
   1cd8c:	add	r3, sp, #448	; 0x1c0
   1cd90:	str	r3, [sp]
   1cd94:	ldr	r3, [pc, #-220]	; 1ccc0 <_start@@Base+0x8698>
   1cd98:	add	r3, r3, #228	; 0xe4
   1cd9c:	mov	r2, r7
   1cda0:	mov	r1, r0
   1cda4:	mov	r0, r9
   1cda8:	bl	18864 <_start@@Base+0x423c>
   1cdac:	cmp	r7, r0
   1cdb0:	cmpne	r6, r0
   1cdb4:	movne	r6, r0
   1cdb8:	bne	1cd4c <_start@@Base+0x8724>
   1cdbc:	mov	sl, r9
   1cdc0:	mov	fp, r7
   1cdc4:	mov	r6, r0
   1cdc8:	b	1cdd4 <_start@@Base+0x87ac>
   1cdcc:	mov	sl, r9
   1cdd0:	mov	fp, r7
   1cdd4:	mov	r9, r6
   1cdd8:	b	1d104 <_start@@Base+0x8adc>
   1cddc:	mov	r2, r7
   1cde0:	mov	r1, r0
   1cde4:	mov	r0, r9
   1cde8:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1cdec:	mov	r6, r0
   1cdf0:	b	1cf04 <_start@@Base+0x88dc>
   1cdf4:	mov	r3, #7
   1cdf8:	mov	r2, r7
   1cdfc:	mov	r1, r6
   1ce00:	mov	r0, r9
   1ce04:	bl	193e8 <_start@@Base+0x4dc0>
   1ce08:	mov	sl, r0
   1ce0c:	cmp	r6, r0
   1ce10:	beq	1ced8 <_start@@Base+0x88b0>
   1ce14:	add	r1, sp, #472	; 0x1d8
   1ce18:	mov	r2, #0
   1ce1c:	mov	r3, #0
   1ce20:	strd	r2, [r1, #-24]!	; 0xffffffe8
   1ce24:	mov	r3, r1
   1ce28:	mov	r2, r7
   1ce2c:	mov	r1, r0
   1ce30:	mov	r0, r9
   1ce34:	bl	17cd4 <_start@@Base+0x36ac>
   1ce38:	mov	r6, r0
   1ce3c:	cmp	sl, r0
   1ce40:	beq	1ce8c <_start@@Base+0x8864>
   1ce44:	add	r3, sp, #448	; 0x1c0
   1ce48:	ldrd	r2, [r3]
   1ce4c:	orrs	r3, r2, r3
   1ce50:	bne	1ce60 <_start@@Base+0x8838>
   1ce54:	ldr	r3, [r9, #8]
   1ce58:	tst	r3, #2
   1ce5c:	beq	1cf04 <_start@@Base+0x88dc>
   1ce60:	mov	r3, #8
   1ce64:	mov	r2, r3
   1ce68:	mov	r1, #0
   1ce6c:	ldr	r0, [r9]
   1ce70:	bl	29678 <flatcc_builder_table_add@@Base>
   1ce74:	cmp	r0, #0
   1ce78:	beq	1cec8 <_start@@Base+0x88a0>
   1ce7c:	add	r3, sp, #448	; 0x1c0
   1ce80:	ldrd	r2, [r3]
   1ce84:	strd	r2, [r0]
   1ce88:	b	1cf04 <_start@@Base+0x88dc>
   1ce8c:	add	r3, sp, #448	; 0x1c0
   1ce90:	str	r3, [sp]
   1ce94:	ldr	r3, [sp, #424]	; 0x1a8
   1ce98:	mov	r2, r7
   1ce9c:	mov	r1, r0
   1cea0:	mov	r0, r9
   1cea4:	bl	1ac34 <_start@@Base+0x660c>
   1cea8:	cmp	r7, r0
   1ceac:	cmpne	r6, r0
   1ceb0:	movne	r6, r0
   1ceb4:	bne	1ce44 <_start@@Base+0x881c>
   1ceb8:	mov	sl, r9
   1cebc:	mov	fp, r7
   1cec0:	mov	r6, r0
   1cec4:	b	1ced0 <_start@@Base+0x88a8>
   1cec8:	mov	sl, r9
   1cecc:	mov	fp, r7
   1ced0:	mov	r9, r6
   1ced4:	b	1d104 <_start@@Base+0x8adc>
   1ced8:	mov	r2, r7
   1cedc:	mov	r1, r0
   1cee0:	mov	r0, r9
   1cee4:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1cee8:	mov	r6, r0
   1ceec:	b	1cf04 <_start@@Base+0x88dc>
   1cef0:	mov	r2, r7
   1cef4:	mov	r1, r0
   1cef8:	mov	r0, r9
   1cefc:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1cf00:	mov	r6, r0
   1cf04:	sub	r3, r8, r6
   1cf08:	cmp	r3, #1
   1cf0c:	ble	1cf20 <_start@@Base+0x88f8>
   1cf10:	ldrb	r3, [r6]
   1cf14:	cmp	r3, #32
   1cf18:	bhi	1cf34 <_start@@Base+0x890c>
   1cf1c:	beq	1cff4 <_start@@Base+0x89cc>
   1cf20:	mov	r2, r7
   1cf24:	mov	r1, r6
   1cf28:	mov	r0, r9
   1cf2c:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1cf30:	mov	r6, r0
   1cf34:	cmp	r7, r6
   1cf38:	moveq	r3, #0
   1cf3c:	streq	r3, [sp, #444]	; 0x1bc
   1cf40:	moveq	r0, r6
   1cf44:	beq	1cf7c <_start@@Base+0x8954>
   1cf48:	ldrb	r3, [r6]
   1cf4c:	cmp	r3, #44	; 0x2c
   1cf50:	beq	1d050 <_start@@Base+0x8a28>
   1cf54:	mov	r3, #0
   1cf58:	str	r3, [sp, #444]	; 0x1bc
   1cf5c:	ldrb	r3, [r6]
   1cf60:	cmp	r3, #125	; 0x7d
   1cf64:	beq	1d008 <_start@@Base+0x89e0>
   1cf68:	mov	r3, #10
   1cf6c:	mov	r2, r7
   1cf70:	mov	r1, r6
   1cf74:	mov	r0, r9
   1cf78:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1cf7c:	ldr	r3, [sp, #444]	; 0x1bc
   1cf80:	cmp	r3, #0
   1cf84:	beq	1d0ec <_start@@Base+0x8ac4>
   1cf88:	cmp	r7, r0
   1cf8c:	beq	1cef0 <_start@@Base+0x88c8>
   1cf90:	ldrb	r3, [r0]
   1cf94:	cmp	r3, #34	; 0x22
   1cf98:	addeq	r0, r0, #1
   1cf9c:	moveq	r3, #0
   1cfa0:	streq	r3, [r9, #12]
   1cfa4:	beq	1cfb8 <_start@@Base+0x8990>
   1cfa8:	cmp	r3, #46	; 0x2e
   1cfac:	movne	r3, #1
   1cfb0:	strne	r3, [r9, #12]
   1cfb4:	beq	1c900 <_start@@Base+0x82d8>
   1cfb8:	sub	r3, r8, r0
   1cfbc:	cmp	r3, #8
   1cfc0:	movcs	r3, #8
   1cfc4:	sub	r3, r3, #1
   1cfc8:	cmp	r3, #7
   1cfcc:	ldrls	pc, [pc, r3, lsl #2]
   1cfd0:	b	1cef0 <_start@@Base+0x88c8>
   1cfd4:	ldrdeq	ip, [r1], -r4
   1cfd8:	andeq	ip, r1, r8, asr #21
   1cfdc:			; <UNDEFINED> instruction: 0x0001cabc
   1cfe0:			; <UNDEFINED> instruction: 0x0001cab0
   1cfe4:	andeq	ip, r1, r4, lsr #21
   1cfe8:	muleq	r1, r8, sl
   1cfec:	andeq	ip, r1, r4, lsr #18
   1cff0:	andeq	ip, r1, r8, lsl r9
   1cff4:	ldrb	r3, [r6, #1]
   1cff8:	cmp	r3, #32
   1cffc:	addhi	r6, r6, #1
   1d000:	bls	1cf20 <_start@@Base+0x88f8>
   1d004:	b	1cf34 <_start@@Base+0x890c>
   1d008:	add	r0, r6, #1
   1d00c:	sub	r3, r8, r0
   1d010:	cmp	r3, #1
   1d014:	ble	1d028 <_start@@Base+0x8a00>
   1d018:	ldrb	r3, [r6, #1]
   1d01c:	cmp	r3, #32
   1d020:	bhi	1cf7c <_start@@Base+0x8954>
   1d024:	beq	1d03c <_start@@Base+0x8a14>
   1d028:	mov	r2, r7
   1d02c:	mov	r1, r0
   1d030:	mov	r0, r9
   1d034:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1d038:	b	1cf7c <_start@@Base+0x8954>
   1d03c:	ldrb	r3, [r6, #2]
   1d040:	cmp	r3, #32
   1d044:	addhi	r0, r6, #2
   1d048:	bls	1d028 <_start@@Base+0x8a00>
   1d04c:	b	1cf7c <_start@@Base+0x8954>
   1d050:	add	r0, r6, #1
   1d054:	sub	r3, r8, r0
   1d058:	cmp	r3, #1
   1d05c:	ble	1d070 <_start@@Base+0x8a48>
   1d060:	ldrb	r3, [r6, #1]
   1d064:	cmp	r3, #32
   1d068:	bhi	1d080 <_start@@Base+0x8a58>
   1d06c:	beq	1d0b8 <_start@@Base+0x8a90>
   1d070:	mov	r2, r7
   1d074:	mov	r1, r0
   1d078:	mov	r0, r9
   1d07c:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1d080:	cmp	r7, r0
   1d084:	beq	1d0cc <_start@@Base+0x8aa4>
   1d088:	ldrb	r3, [r0]
   1d08c:	cmp	r3, #125	; 0x7d
   1d090:	movne	r3, #1
   1d094:	strne	r3, [sp, #444]	; 0x1bc
   1d098:	bne	1cf7c <_start@@Base+0x8954>
   1d09c:	mov	r3, #0
   1d0a0:	str	r3, [sp, #444]	; 0x1bc
   1d0a4:	mov	r2, r7
   1d0a8:	add	r1, r0, #1
   1d0ac:	mov	r0, r9
   1d0b0:	bl	17d9c <_start@@Base+0x3774>
   1d0b4:	b	1cf7c <_start@@Base+0x8954>
   1d0b8:	ldrb	r3, [r6, #2]
   1d0bc:	cmp	r3, #32
   1d0c0:	addhi	r0, r6, #2
   1d0c4:	bls	1d070 <_start@@Base+0x8a48>
   1d0c8:	b	1d080 <_start@@Base+0x8a58>
   1d0cc:	mov	r3, #0
   1d0d0:	str	r3, [sp, #444]	; 0x1bc
   1d0d4:	mov	r3, #10
   1d0d8:	mov	r2, r7
   1d0dc:	mov	r1, r0
   1d0e0:	mov	r0, r9
   1d0e4:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1d0e8:	b	1cf7c <_start@@Base+0x8954>
   1d0ec:	mov	sl, r9
   1d0f0:	mov	r9, r0
   1d0f4:	mov	fp, r7
   1d0f8:	ldr	r3, [sl, #24]
   1d0fc:	cmp	r3, #0
   1d100:	beq	1d160 <_start@@Base+0x8b38>
   1d104:	mov	r3, #33	; 0x21
   1d108:	mov	r2, fp
   1d10c:	mov	r1, r9
   1d110:	mov	r0, sl
   1d114:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1d118:	mov	r6, r0
   1d11c:	mov	r3, #33	; 0x21
   1d120:	mov	r2, fp
   1d124:	mov	r1, r6
   1d128:	mov	r0, sl
   1d12c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1d130:	mov	r7, r0
   1d134:	ldr	r3, [sp, #464]	; 0x1d0
   1d138:	cmp	r3, #0
   1d13c:	beq	1d4e0 <_start@@Base+0x8eb8>
   1d140:	mov	r1, #0
   1d144:	ldr	r0, [sl]
   1d148:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   1d14c:	cmp	r0, #0
   1d150:	beq	1d4ec <_start@@Base+0x8ec4>
   1d154:	ldr	r3, [sp, #464]	; 0x1d0
   1d158:	str	r3, [r0]
   1d15c:	b	1b09c <_start@@Base+0x6a74>
   1d160:	ldr	r0, [sl]
   1d164:	bl	286cc <flatcc_builder_end_table@@Base>
   1d168:	subs	r4, r0, #0
   1d16c:	beq	1d104 <_start@@Base+0x8adc>
   1d170:	mov	r1, #2
   1d174:	ldr	r0, [sl]
   1d178:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   1d17c:	cmp	r0, #0
   1d180:	beq	1d3e4 <_start@@Base+0x8dbc>
   1d184:	str	r4, [r0]
   1d188:	b	1d1c0 <_start@@Base+0x8b98>
   1d18c:	mov	r2, fp
   1d190:	mov	r1, r0
   1d194:	mov	r0, sl
   1d198:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1d19c:	mov	r9, r0
   1d1a0:	b	1d1c0 <_start@@Base+0x8b98>
   1d1a4:	mov	r6, r0
   1d1a8:	b	1b70c <_start@@Base+0x70e4>
   1d1ac:	mov	r2, fp
   1d1b0:	mov	r1, r0
   1d1b4:	mov	r0, sl
   1d1b8:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1d1bc:	mov	r9, r0
   1d1c0:	sub	r3, r8, r9
   1d1c4:	cmp	r3, #1
   1d1c8:	ble	1d1dc <_start@@Base+0x8bb4>
   1d1cc:	ldrb	r3, [r9]
   1d1d0:	cmp	r3, #32
   1d1d4:	bhi	1d1f0 <_start@@Base+0x8bc8>
   1d1d8:	beq	1d2b0 <_start@@Base+0x8c88>
   1d1dc:	mov	r2, fp
   1d1e0:	mov	r1, r9
   1d1e4:	mov	r0, sl
   1d1e8:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1d1ec:	mov	r9, r0
   1d1f0:	cmp	fp, r9
   1d1f4:	moveq	r3, #0
   1d1f8:	streq	r3, [sp, #436]	; 0x1b4
   1d1fc:	moveq	r0, r9
   1d200:	beq	1d238 <_start@@Base+0x8c10>
   1d204:	ldrb	r3, [r9]
   1d208:	cmp	r3, #44	; 0x2c
   1d20c:	beq	1d30c <_start@@Base+0x8ce4>
   1d210:	mov	r3, #0
   1d214:	str	r3, [sp, #436]	; 0x1b4
   1d218:	ldrb	r3, [r9]
   1d21c:	cmp	r3, #125	; 0x7d
   1d220:	beq	1d2c4 <_start@@Base+0x8c9c>
   1d224:	mov	r3, #10
   1d228:	mov	r2, fp
   1d22c:	mov	r1, r9
   1d230:	mov	r0, sl
   1d234:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1d238:	ldr	r3, [sp, #436]	; 0x1b4
   1d23c:	cmp	r3, #0
   1d240:	beq	1d3a8 <_start@@Base+0x8d80>
   1d244:	cmp	fp, r0
   1d248:	beq	1d1ac <_start@@Base+0x8b84>
   1d24c:	ldrb	r3, [r0]
   1d250:	cmp	r3, #34	; 0x22
   1d254:	addeq	r0, r0, #1
   1d258:	moveq	r3, #0
   1d25c:	streq	r3, [sl, #12]
   1d260:	beq	1d274 <_start@@Base+0x8c4c>
   1d264:	cmp	r3, #46	; 0x2e
   1d268:	movne	r3, #1
   1d26c:	strne	r3, [sl, #12]
   1d270:	beq	1b2e4 <_start@@Base+0x6cbc>
   1d274:	sub	r3, r8, r0
   1d278:	cmp	r3, #8
   1d27c:	movcs	r3, #8
   1d280:	sub	r3, r3, #1
   1d284:	cmp	r3, #7
   1d288:	ldrls	pc, [pc, r3, lsl #2]
   1d28c:	b	1d1ac <_start@@Base+0x8b84>
   1d290:	strdeq	fp, [r1], -r0
   1d294:	andeq	fp, r1, r4, ror #9
   1d298:	ldrdeq	fp, [r1], -r8
   1d29c:	andeq	fp, r1, ip, asr #9
   1d2a0:	andeq	fp, r1, r0, asr #9
   1d2a4:			; <UNDEFINED> instruction: 0x0001b4b4
   1d2a8:	andeq	fp, r1, r0, asr #6
   1d2ac:	strdeq	fp, [r1], -ip
   1d2b0:	ldrb	r3, [r9, #1]
   1d2b4:	cmp	r3, #32
   1d2b8:	addhi	r9, r9, #1
   1d2bc:	bls	1d1dc <_start@@Base+0x8bb4>
   1d2c0:	b	1d1f0 <_start@@Base+0x8bc8>
   1d2c4:	add	r0, r9, #1
   1d2c8:	sub	r3, r8, r0
   1d2cc:	cmp	r3, #1
   1d2d0:	ble	1d2e4 <_start@@Base+0x8cbc>
   1d2d4:	ldrb	r3, [r9, #1]
   1d2d8:	cmp	r3, #32
   1d2dc:	bhi	1d238 <_start@@Base+0x8c10>
   1d2e0:	beq	1d2f8 <_start@@Base+0x8cd0>
   1d2e4:	mov	r2, fp
   1d2e8:	mov	r1, r0
   1d2ec:	mov	r0, sl
   1d2f0:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1d2f4:	b	1d238 <_start@@Base+0x8c10>
   1d2f8:	ldrb	r3, [r9, #2]
   1d2fc:	cmp	r3, #32
   1d300:	addhi	r0, r9, #2
   1d304:	bls	1d2e4 <_start@@Base+0x8cbc>
   1d308:	b	1d238 <_start@@Base+0x8c10>
   1d30c:	add	r0, r9, #1
   1d310:	sub	r3, r8, r0
   1d314:	cmp	r3, #1
   1d318:	ble	1d32c <_start@@Base+0x8d04>
   1d31c:	ldrb	r3, [r9, #1]
   1d320:	cmp	r3, #32
   1d324:	bhi	1d33c <_start@@Base+0x8d14>
   1d328:	beq	1d374 <_start@@Base+0x8d4c>
   1d32c:	mov	r2, fp
   1d330:	mov	r1, r0
   1d334:	mov	r0, sl
   1d338:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1d33c:	cmp	fp, r0
   1d340:	beq	1d388 <_start@@Base+0x8d60>
   1d344:	ldrb	r3, [r0]
   1d348:	cmp	r3, #125	; 0x7d
   1d34c:	movne	r3, #1
   1d350:	strne	r3, [sp, #436]	; 0x1b4
   1d354:	bne	1d238 <_start@@Base+0x8c10>
   1d358:	mov	r3, #0
   1d35c:	str	r3, [sp, #436]	; 0x1b4
   1d360:	mov	r2, fp
   1d364:	add	r1, r0, #1
   1d368:	mov	r0, sl
   1d36c:	bl	17d9c <_start@@Base+0x3774>
   1d370:	b	1d238 <_start@@Base+0x8c10>
   1d374:	ldrb	r3, [r9, #2]
   1d378:	cmp	r3, #32
   1d37c:	addhi	r0, r9, #2
   1d380:	bls	1d32c <_start@@Base+0x8d04>
   1d384:	b	1d33c <_start@@Base+0x8d14>
   1d388:	mov	r3, #0
   1d38c:	str	r3, [sp, #436]	; 0x1b4
   1d390:	mov	r3, #10
   1d394:	mov	r2, fp
   1d398:	mov	r1, r0
   1d39c:	mov	r0, sl
   1d3a0:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1d3a4:	b	1d238 <_start@@Base+0x8c10>
   1d3a8:	mov	r6, r0
   1d3ac:	ldr	r3, [sl, #24]
   1d3b0:	cmp	r3, #0
   1d3b4:	bne	1d11c <_start@@Base+0x8af4>
   1d3b8:	ldr	r0, [sl]
   1d3bc:	bl	286cc <flatcc_builder_end_table@@Base>
   1d3c0:	str	r0, [sp, #464]	; 0x1d0
   1d3c4:	cmp	r0, #0
   1d3c8:	beq	1d11c <_start@@Base+0x8af4>
   1d3cc:	mov	r7, r6
   1d3d0:	b	1d134 <_start@@Base+0x8b0c>
   1d3d4:	mov	r6, r9
   1d3d8:	b	1d11c <_start@@Base+0x8af4>
   1d3dc:	mov	r6, r9
   1d3e0:	b	1d11c <_start@@Base+0x8af4>
   1d3e4:	mov	r6, r9
   1d3e8:	b	1d11c <_start@@Base+0x8af4>
   1d3ec:	mov	r2, fp
   1d3f0:	mov	r1, r0
   1d3f4:	mov	r0, sl
   1d3f8:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1d3fc:	mov	r7, r0
   1d400:	b	1b09c <_start@@Base+0x6a74>
   1d404:	mov	r3, #5
   1d408:	mov	r2, fp
   1d40c:	mov	r1, r7
   1d410:	mov	r0, sl
   1d414:	bl	193e8 <_start@@Base+0x4dc0>
   1d418:	mov	r1, r0
   1d41c:	cmp	r0, r7
   1d420:	beq	1d464 <_start@@Base+0x8e3c>
   1d424:	add	r3, sp, #464	; 0x1d0
   1d428:	mov	r2, fp
   1d42c:	mov	r0, sl
   1d430:	bl	194c4 <_start@@Base+0x4e9c>
   1d434:	mov	r7, r0
   1d438:	ldr	r3, [sp, #464]	; 0x1d0
   1d43c:	cmp	r3, #0
   1d440:	beq	1d4f8 <_start@@Base+0x8ed0>
   1d444:	mov	r1, #1
   1d448:	ldr	r0, [sl]
   1d44c:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   1d450:	cmp	r0, #0
   1d454:	beq	1d504 <_start@@Base+0x8edc>
   1d458:	ldr	r3, [sp, #464]	; 0x1d0
   1d45c:	str	r3, [r0]
   1d460:	b	1b09c <_start@@Base+0x6a74>
   1d464:	mov	r2, fp
   1d468:	mov	r0, sl
   1d46c:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1d470:	mov	r7, r0
   1d474:	b	1b09c <_start@@Base+0x6a74>
   1d478:	mov	r9, sl
   1d47c:	mov	r8, fp
   1d480:	ldr	r3, [r9, #24]
   1d484:	cmp	r3, #0
   1d488:	beq	1d4a8 <_start@@Base+0x8e80>
   1d48c:	mov	r3, #33	; 0x21
   1d490:	mov	r2, r8
   1d494:	mov	r1, r7
   1d498:	mov	r0, r9
   1d49c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1d4a0:	add	sp, sp, #476	; 0x1dc
   1d4a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d4a8:	ldr	r3, [sp, #460]	; 0x1cc
   1d4ac:	mov	r2, r8
   1d4b0:	mov	r1, r7
   1d4b4:	mov	r0, r9
   1d4b8:	bl	2f4b4 <flatcc_json_parser_finalize_unions@@Base>
   1d4bc:	mov	r7, r0
   1d4c0:	ldr	r0, [r9]
   1d4c4:	bl	286cc <flatcc_builder_end_table@@Base>
   1d4c8:	ldr	r3, [sp, #420]	; 0x1a4
   1d4cc:	str	r0, [r3]
   1d4d0:	cmp	r0, #0
   1d4d4:	movne	r0, r7
   1d4d8:	beq	1d48c <_start@@Base+0x8e64>
   1d4dc:	b	1d4a0 <_start@@Base+0x8e78>
   1d4e0:	mov	r9, sl
   1d4e4:	mov	r8, fp
   1d4e8:	b	1d48c <_start@@Base+0x8e64>
   1d4ec:	mov	r9, sl
   1d4f0:	mov	r8, fp
   1d4f4:	b	1d48c <_start@@Base+0x8e64>
   1d4f8:	mov	r9, sl
   1d4fc:	mov	r8, fp
   1d500:	b	1d48c <_start@@Base+0x8e64>
   1d504:	mov	r9, sl
   1d508:	mov	r8, fp
   1d50c:	b	1d48c <_start@@Base+0x8e64>
   1d510:	add	r3, pc, #160	; 0xa0
   1d514:	ldrd	r2, [r3]
   1d518:	cmp	r5, r3
   1d51c:	cmpeq	r4, r2
   1d520:	bne	1c3bc <_start@@Base+0x7d94>
   1d524:	mov	r3, #8
   1d528:	mov	r2, fp
   1d52c:	mov	r1, r9
   1d530:	mov	r0, sl
   1d534:	bl	193e8 <_start@@Base+0x4dc0>
   1d538:	mov	r4, r0
   1d53c:	cmp	r0, r9
   1d540:	beq	1c214 <_start@@Base+0x7bec>
   1d544:	add	r3, sp, #472	; 0x1d8
   1d548:	mov	r0, #0
   1d54c:	mov	r1, #0
   1d550:	strd	r0, [r3, #-24]!	; 0xffffffe8
   1d554:	mov	r2, fp
   1d558:	mov	r1, r4
   1d55c:	mov	r0, sl
   1d560:	bl	17cd4 <_start@@Base+0x36ac>
   1d564:	mov	r9, r0
   1d568:	cmp	r4, r0
   1d56c:	beq	1c1dc <_start@@Base+0x7bb4>
   1d570:	add	r3, sp, #448	; 0x1c0
   1d574:	ldrd	r2, [r3]
   1d578:	orrs	r3, r2, r3
   1d57c:	bne	1d58c <_start@@Base+0x8f64>
   1d580:	ldr	r3, [sl, #8]
   1d584:	tst	r3, #2
   1d588:	beq	1c2ec <_start@@Base+0x7cc4>
   1d58c:	mov	r3, #8
   1d590:	mov	r2, r3
   1d594:	mov	r1, #3
   1d598:	ldr	r0, [sl]
   1d59c:	bl	29678 <flatcc_builder_table_add@@Base>
   1d5a0:	cmp	r0, #0
   1d5a4:	beq	1c854 <_start@@Base+0x822c>
   1d5a8:	add	r3, sp, #448	; 0x1c0
   1d5ac:	ldrd	r2, [r3]
   1d5b0:	strd	r2, [r0]
   1d5b4:	b	1c2ec <_start@@Base+0x7cc4>
   1d5b8:	teqcc	r2, r4, lsr r3
   1d5bc:	rsbvs	r6, r2, #536870918	; 0x20000006
   1d5c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d5c4:	sub	sp, sp, #244	; 0xf4
   1d5c8:	mov	r6, r0
   1d5cc:	mov	r4, r1
   1d5d0:	mov	r5, r2
   1d5d4:	mov	r2, #0
   1d5d8:	ldr	r1, [sp, #280]	; 0x118
   1d5dc:	str	r2, [r1]
   1d5e0:	cmp	r3, #9
   1d5e4:	beq	1e530 <_start@@Base+0x9f08>
   1d5e8:	bhi	1d62c <_start@@Base+0x9004>
   1d5ec:	cmp	r3, #2
   1d5f0:	beq	1d69c <_start@@Base+0x9074>
   1d5f4:	cmp	r3, #8
   1d5f8:	beq	1de4c <_start@@Base+0x9824>
   1d5fc:	cmp	r3, r2
   1d600:	beq	1d658 <_start@@Base+0x9030>
   1d604:	ldr	r3, [r6, #8]
   1d608:	tst	r3, #1
   1d60c:	bne	1e59c <_start@@Base+0x9f74>
   1d610:	mov	r3, #15
   1d614:	mov	r2, r5
   1d618:	mov	r1, r4
   1d61c:	mov	r0, r6
   1d620:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1d624:	mov	r4, r0
   1d628:	b	1e560 <_start@@Base+0x9f38>
   1d62c:	cmp	r3, #11
   1d630:	beq	1e584 <_start@@Base+0x9f5c>
   1d634:	bcc	1e56c <_start@@Base+0x9f44>
   1d638:	cmp	r3, #255	; 0xff
   1d63c:	bne	1d604 <_start@@Base+0x8fdc>
   1d640:	ldr	r3, [sp, #280]	; 0x118
   1d644:	mov	r2, r5
   1d648:	mov	r1, r4
   1d64c:	bl	2f2b4 <flatcc_json_parser_build_string@@Base>
   1d650:	mov	r4, r0
   1d654:	b	1e544 <_start@@Base+0x9f1c>
   1d658:	sub	r3, r5, r4
   1d65c:	cmp	r3, #3
   1d660:	ble	1d680 <_start@@Base+0x9058>
   1d664:	mov	r2, #4
   1d668:	ldr	r1, [pc, #1376]	; 1dbd0 <_start@@Base+0x95a8>
   1d66c:	mov	r0, r4
   1d670:	bl	14558 <memcmp@plt>
   1d674:	cmp	r0, #0
   1d678:	addeq	r4, r4, #4
   1d67c:	beq	1e560 <_start@@Base+0x9f38>
   1d680:	mov	r3, #26
   1d684:	mov	r2, r5
   1d688:	mov	r1, r4
   1d68c:	mov	r0, r6
   1d690:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1d694:	mov	r4, r0
   1d698:	b	1e560 <_start@@Base+0x9f38>
   1d69c:	mov	r1, #1
   1d6a0:	ldr	r0, [r0]
   1d6a4:	bl	27c7c <flatcc_builder_start_table@@Base>
   1d6a8:	cmp	r0, #0
   1d6ac:	bne	1de14 <_start@@Base+0x97ec>
   1d6b0:	add	r3, sp, #220	; 0xdc
   1d6b4:	mov	r2, r5
   1d6b8:	mov	r1, r4
   1d6bc:	mov	r0, r6
   1d6c0:	bl	17de0 <_start@@Base+0x37b8>
   1d6c4:	mov	r8, #1
   1d6c8:	mov	r9, r6
   1d6cc:	b	1dc98 <_start@@Base+0x9670>
   1d6d0:	mov	r3, #5
   1d6d4:	mov	r2, r5
   1d6d8:	mov	r1, r0
   1d6dc:	mov	r0, r9
   1d6e0:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1d6e4:	b	1dcd0 <_start@@Base+0x96a8>
   1d6e8:	ldrb	r2, [r0, #7]
   1d6ec:	mov	r3, #0
   1d6f0:	b	1d6fc <_start@@Base+0x90d4>
   1d6f4:	mov	r2, #0
   1d6f8:	mov	r3, #0
   1d6fc:	ldrb	r6, [r0, #6]
   1d700:	mov	r1, #0
   1d704:	str	r1, [sp, #172]	; 0xac
   1d708:	lsl	r1, r6, #8
   1d70c:	str	r1, [sp, #168]	; 0xa8
   1d710:	ldrd	r6, [sp, #168]	; 0xa8
   1d714:	orr	r6, r6, r2
   1d718:	orr	r7, r7, r3
   1d71c:	mov	r2, r6
   1d720:	mov	r3, r7
   1d724:	ldrb	r6, [r0, #5]
   1d728:	mov	r1, #0
   1d72c:	str	r1, [sp, #124]	; 0x7c
   1d730:	lsl	r1, r6, #16
   1d734:	str	r1, [sp, #120]	; 0x78
   1d738:	ldrd	r6, [sp, #120]	; 0x78
   1d73c:	orr	r6, r6, r2
   1d740:	orr	r7, r7, r3
   1d744:	mov	r2, r6
   1d748:	mov	r3, r7
   1d74c:	ldrb	r6, [r0, #4]
   1d750:	mov	r1, #0
   1d754:	str	r1, [sp, #76]	; 0x4c
   1d758:	lsl	r1, r6, #24
   1d75c:	str	r1, [sp, #72]	; 0x48
   1d760:	ldrd	r6, [sp, #72]	; 0x48
   1d764:	orr	r6, r6, r2
   1d768:	orr	r7, r7, r3
   1d76c:	mov	r2, r6
   1d770:	mov	r3, r7
   1d774:	ldrb	r1, [r0, #3]
   1d778:	str	r1, [sp, #52]	; 0x34
   1d77c:	mov	r1, #0
   1d780:	str	r1, [sp, #48]	; 0x30
   1d784:	ldrd	r6, [sp, #48]	; 0x30
   1d788:	orr	r6, r6, r2
   1d78c:	orr	r7, r7, r3
   1d790:	mov	r2, r6
   1d794:	mov	r3, r7
   1d798:	ldrb	r6, [r0, #2]
   1d79c:	lsl	r1, r6, #8
   1d7a0:	str	r1, [sp, #36]	; 0x24
   1d7a4:	mov	r1, #0
   1d7a8:	str	r1, [sp, #32]
   1d7ac:	ldrd	r6, [sp, #32]
   1d7b0:	orr	r6, r6, r2
   1d7b4:	orr	r7, r7, r3
   1d7b8:	mov	r2, r6
   1d7bc:	mov	r3, r7
   1d7c0:	ldrb	r6, [r0, #1]
   1d7c4:	lsl	r1, r6, #16
   1d7c8:	str	r1, [sp, #20]
   1d7cc:	mov	r1, #0
   1d7d0:	str	r1, [sp, #16]
   1d7d4:	ldrd	r6, [sp, #16]
   1d7d8:	orr	r6, r6, r2
   1d7dc:	orr	r7, r7, r3
   1d7e0:	mov	r2, r6
   1d7e4:	mov	r3, r7
   1d7e8:	ldrb	r6, [r0]
   1d7ec:	lsl	fp, r6, #24
   1d7f0:	mov	sl, #0
   1d7f4:	orr	r2, r2, sl
   1d7f8:	orr	r3, r3, fp
   1d7fc:	add	r7, pc, #948	; 0x3b4
   1d800:	ldrd	r6, [r7]
   1d804:	cmp	r3, r7
   1d808:	cmpeq	r2, r6
   1d80c:	bne	1dc0c <_start@@Base+0x95e4>
   1d810:	add	r1, r0, #8
   1d814:	sub	r3, r5, r1
   1d818:	cmp	r3, #8
   1d81c:	movcs	r3, #8
   1d820:	sub	r3, r3, #1
   1d824:	cmp	r3, #7
   1d828:	ldrls	pc, [pc, r3, lsl #2]
   1d82c:	b	1da28 <_start@@Base+0x9400>
   1d830:	andeq	sp, r1, ip, lsl sl
   1d834:	andeq	sp, r1, r0, lsl sl
   1d838:	andeq	sp, r1, r4, lsl #20
   1d83c:	strdeq	sp, [r1], -r8
   1d840:	andeq	sp, r1, ip, ror #19
   1d844:	andeq	sp, r1, r0, ror #19
   1d848:	andeq	sp, r1, r4, lsr #17
   1d84c:	muleq	r1, r8, r8
   1d850:	mov	r2, #0
   1d854:	mov	r3, #0
   1d858:	b	1d724 <_start@@Base+0x90fc>
   1d85c:	mov	r2, #0
   1d860:	mov	r3, #0
   1d864:	b	1d74c <_start@@Base+0x9124>
   1d868:	mov	r2, #0
   1d86c:	mov	r3, #0
   1d870:	b	1d774 <_start@@Base+0x914c>
   1d874:	mov	r2, #0
   1d878:	mov	r3, #0
   1d87c:	b	1d798 <_start@@Base+0x9170>
   1d880:	mov	r2, #0
   1d884:	mov	r3, #0
   1d888:	b	1d7c0 <_start@@Base+0x9198>
   1d88c:	mov	r2, #0
   1d890:	mov	r3, #0
   1d894:	b	1d7e8 <_start@@Base+0x91c0>
   1d898:	ldrb	r6, [r0, #15]
   1d89c:	mov	r7, #0
   1d8a0:	b	1d8ac <_start@@Base+0x9284>
   1d8a4:	mov	r6, #0
   1d8a8:	mov	r7, #0
   1d8ac:	ldrb	r2, [r0, #14]
   1d8b0:	mov	ip, #0
   1d8b4:	str	ip, [sp, #212]	; 0xd4
   1d8b8:	lsl	r3, r2, #8
   1d8bc:	str	r3, [sp, #208]	; 0xd0
   1d8c0:	ldrd	r2, [sp, #208]	; 0xd0
   1d8c4:	orr	r2, r2, r6
   1d8c8:	orr	r3, r3, r7
   1d8cc:	mov	r6, r2
   1d8d0:	mov	r7, r3
   1d8d4:	ldrb	r2, [r0, #13]
   1d8d8:	mov	ip, #0
   1d8dc:	str	ip, [sp, #196]	; 0xc4
   1d8e0:	lsl	r3, r2, #16
   1d8e4:	str	r3, [sp, #192]	; 0xc0
   1d8e8:	ldrd	r2, [sp, #192]	; 0xc0
   1d8ec:	orr	r2, r2, r6
   1d8f0:	orr	r3, r3, r7
   1d8f4:	mov	r6, r2
   1d8f8:	mov	r7, r3
   1d8fc:	ldrb	r2, [r0, #12]
   1d900:	mov	ip, #0
   1d904:	str	ip, [sp, #180]	; 0xb4
   1d908:	lsl	r3, r2, #24
   1d90c:	str	r3, [sp, #176]	; 0xb0
   1d910:	ldrd	r2, [sp, #176]	; 0xb0
   1d914:	orr	r2, r2, r6
   1d918:	orr	r3, r3, r7
   1d91c:	ldrb	ip, [r0, #11]
   1d920:	str	ip, [sp, #148]	; 0x94
   1d924:	mov	ip, #0
   1d928:	str	ip, [sp, #144]	; 0x90
   1d92c:	ldrd	r6, [sp, #144]	; 0x90
   1d930:	orr	r6, r6, r2
   1d934:	orr	r7, r7, r3
   1d938:	mov	r2, r6
   1d93c:	mov	r3, r7
   1d940:	ldrb	r6, [r0, #10]
   1d944:	lsl	ip, r6, #8
   1d948:	str	ip, [sp, #132]	; 0x84
   1d94c:	mov	ip, #0
   1d950:	str	ip, [sp, #128]	; 0x80
   1d954:	ldrd	r6, [sp, #128]	; 0x80
   1d958:	orr	r6, r6, r2
   1d95c:	orr	r7, r7, r3
   1d960:	mov	r2, r6
   1d964:	mov	r3, r7
   1d968:	ldrb	r6, [r0, #9]
   1d96c:	lsl	ip, r6, #16
   1d970:	str	ip, [sp, #108]	; 0x6c
   1d974:	mov	ip, #0
   1d978:	str	ip, [sp, #104]	; 0x68
   1d97c:	ldrd	r6, [sp, #104]	; 0x68
   1d980:	orr	r6, r6, r2
   1d984:	orr	r7, r7, r3
   1d988:	mov	r2, r6
   1d98c:	mov	r3, r7
   1d990:	ldrb	r6, [r0, #8]
   1d994:	lsl	ip, r6, #24
   1d998:	str	ip, [sp, #92]	; 0x5c
   1d99c:	mov	ip, #0
   1d9a0:	str	ip, [sp, #88]	; 0x58
   1d9a4:	ldrd	r6, [sp, #88]	; 0x58
   1d9a8:	orr	r6, r6, r2
   1d9ac:	orr	r7, r7, r3
   1d9b0:	mov	r2, r6
   1d9b4:	mov	r3, r7
   1d9b8:	add	r7, pc, #512	; 0x200
   1d9bc:	ldrd	r6, [r7]
   1d9c0:	cmp	r3, r7
   1d9c4:	cmpeq	r2, r6
   1d9c8:	beq	1da34 <_start@@Base+0x940c>
   1d9cc:	mov	r2, r5
   1d9d0:	mov	r0, r9
   1d9d4:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1d9d8:	mov	r7, r0
   1d9dc:	b	1dc20 <_start@@Base+0x95f8>
   1d9e0:	mov	r6, #0
   1d9e4:	mov	r7, #0
   1d9e8:	b	1d8d4 <_start@@Base+0x92ac>
   1d9ec:	mov	r6, #0
   1d9f0:	mov	r7, #0
   1d9f4:	b	1d8fc <_start@@Base+0x92d4>
   1d9f8:	mov	r2, #0
   1d9fc:	mov	r3, #0
   1da00:	b	1d91c <_start@@Base+0x92f4>
   1da04:	mov	r2, #0
   1da08:	mov	r3, #0
   1da0c:	b	1d940 <_start@@Base+0x9318>
   1da10:	mov	r2, #0
   1da14:	mov	r3, #0
   1da18:	b	1d968 <_start@@Base+0x9340>
   1da1c:	mov	r2, #0
   1da20:	mov	r3, #0
   1da24:	b	1d990 <_start@@Base+0x9368>
   1da28:	mov	r2, #0
   1da2c:	mov	r3, #0
   1da30:	b	1d9b8 <_start@@Base+0x9390>
   1da34:	add	r4, r0, #16
   1da38:	mov	r1, r5
   1da3c:	mov	r0, r4
   1da40:	bl	14750 <_start@@Base+0x128>
   1da44:	mov	r0, #0
   1da48:	bic	r1, r1, #255	; 0xff
   1da4c:	add	r3, pc, #372	; 0x174
   1da50:	ldrd	r2, [r3]
   1da54:	cmp	r1, r3
   1da58:	cmpeq	r0, r2
   1da5c:	beq	1da78 <_start@@Base+0x9450>
   1da60:	mov	r2, r5
   1da64:	mov	r1, r4
   1da68:	mov	r0, r9
   1da6c:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1da70:	mov	r7, r0
   1da74:	b	1dc20 <_start@@Base+0x95f8>
   1da78:	mov	r3, #3
   1da7c:	mov	r2, r5
   1da80:	mov	r1, r4
   1da84:	mov	r0, r9
   1da88:	bl	193e8 <_start@@Base+0x4dc0>
   1da8c:	mov	r6, r0
   1da90:	cmp	r4, r0
   1da94:	beq	1dbf4 <_start@@Base+0x95cc>
   1da98:	mov	r1, #0
   1da9c:	str	r1, [sp, #224]	; 0xe0
   1daa0:	mov	r2, #0
   1daa4:	mov	r3, #0
   1daa8:	strd	r2, [sp, #232]	; 0xe8
   1daac:	str	r1, [sp, #228]	; 0xe4
   1dab0:	cmp	r5, r0
   1dab4:	beq	1db24 <_start@@Base+0x94fc>
   1dab8:	add	r3, sp, #232	; 0xe8
   1dabc:	str	r3, [sp]
   1dac0:	add	r3, sp, #228	; 0xe4
   1dac4:	mov	r2, r5
   1dac8:	mov	r1, r0
   1dacc:	mov	r0, r9
   1dad0:	bl	2ed84 <flatcc_json_parser_integer@@Base>
   1dad4:	mov	r7, r0
   1dad8:	cmp	r6, r0
   1dadc:	beq	1db24 <_start@@Base+0x94fc>
   1dae0:	ldrd	r0, [sp, #232]	; 0xe8
   1dae4:	ldr	r3, [sp, #228]	; 0xe4
   1dae8:	cmp	r3, #0
   1daec:	beq	1db5c <_start@@Base+0x9534>
   1daf0:	cmp	r1, #0
   1daf4:	cmpeq	r0, #-2147483648	; 0x80000000
   1daf8:	rsbls	r0, r0, #0
   1dafc:	strls	r0, [sp, #224]	; 0xe0
   1db00:	bls	1db74 <_start@@Base+0x954c>
   1db04:	mov	r3, #8
   1db08:	mov	r2, r5
   1db0c:	mov	r1, r7
   1db10:	mov	r0, r9
   1db14:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1db18:	mov	r7, r0
   1db1c:	cmp	r6, r7
   1db20:	bne	1db74 <_start@@Base+0x954c>
   1db24:	add	r3, sp, #224	; 0xe0
   1db28:	str	r3, [sp]
   1db2c:	ldr	r3, [pc, #160]	; 1dbd4 <_start@@Base+0x95ac>
   1db30:	mov	r2, r5
   1db34:	mov	r1, r6
   1db38:	mov	r0, r9
   1db3c:	bl	18c34 <_start@@Base+0x460c>
   1db40:	mov	r7, r0
   1db44:	cmp	r5, r0
   1db48:	cmpne	r6, r0
   1db4c:	bne	1db74 <_start@@Base+0x954c>
   1db50:	mov	r6, r9
   1db54:	mov	r4, r7
   1db58:	b	1de14 <_start@@Base+0x97ec>
   1db5c:	mvn	r2, #-2147483648	; 0x80000000
   1db60:	mov	r3, #0
   1db64:	cmp	r1, r3
   1db68:	cmpeq	r0, r2
   1db6c:	strls	r0, [sp, #224]	; 0xe0
   1db70:	bhi	1dbd8 <_start@@Base+0x95b0>
   1db74:	ldr	r3, [sp, #224]	; 0xe0
   1db78:	cmp	r3, #0
   1db7c:	bne	1db8c <_start@@Base+0x9564>
   1db80:	ldr	r3, [r9, #8]
   1db84:	tst	r3, #2
   1db88:	beq	1dc20 <_start@@Base+0x95f8>
   1db8c:	mov	r3, #4
   1db90:	mov	r2, r3
   1db94:	mov	r1, #0
   1db98:	ldr	r0, [r9]
   1db9c:	bl	29678 <flatcc_builder_table_add@@Base>
   1dba0:	cmp	r0, #0
   1dba4:	beq	1db50 <_start@@Base+0x9528>
   1dba8:	ldr	r3, [sp, #224]	; 0xe0
   1dbac:	str	r3, [r0]
   1dbb0:	b	1dc20 <_start@@Base+0x95f8>
   1dbb4:	nop			; (mov r0, r0)
   1dbb8:	ldrbvs	r6, [pc], #-372	; 1dbc0 <_start@@Base+0x9598>
   1dbbc:	cmnvc	r7, #456	; 0x1c8
   1dbc0:	svcpl	0x0064616d
   1dbc4:	strbtvc	r6, [r1], #-875	; 0xfffffc95
   1dbc8:	andeq	r0, r0, r0
   1dbcc:	cmnvs	r7, r0, lsl #10
   1dbd0:	andeq	sp, r3, r8, ror #25
   1dbd4:	andeq	r4, r5, ip, ror #2
   1dbd8:	mov	r3, #7
   1dbdc:	mov	r2, r5
   1dbe0:	mov	r1, r7
   1dbe4:	mov	r0, r9
   1dbe8:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1dbec:	mov	r7, r0
   1dbf0:	b	1db1c <_start@@Base+0x94f4>
   1dbf4:	mov	r2, r5
   1dbf8:	mov	r1, r0
   1dbfc:	mov	r0, r9
   1dc00:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1dc04:	mov	r7, r0
   1dc08:	b	1dc20 <_start@@Base+0x95f8>
   1dc0c:	mov	r2, r5
   1dc10:	mov	r1, r0
   1dc14:	mov	r0, r9
   1dc18:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1dc1c:	mov	r7, r0
   1dc20:	sub	r3, r5, r7
   1dc24:	cmp	r3, #1
   1dc28:	ble	1dc3c <_start@@Base+0x9614>
   1dc2c:	ldrb	r3, [r7]
   1dc30:	cmp	r3, #32
   1dc34:	bhi	1dc50 <_start@@Base+0x9628>
   1dc38:	beq	1dd0c <_start@@Base+0x96e4>
   1dc3c:	mov	r2, r5
   1dc40:	mov	r1, r7
   1dc44:	mov	r0, r9
   1dc48:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1dc4c:	mov	r7, r0
   1dc50:	cmp	r5, r7
   1dc54:	moveq	r3, #0
   1dc58:	streq	r3, [sp, #220]	; 0xdc
   1dc5c:	moveq	r0, r7
   1dc60:	beq	1dc98 <_start@@Base+0x9670>
   1dc64:	ldrb	r3, [r7]
   1dc68:	cmp	r3, #44	; 0x2c
   1dc6c:	beq	1dd68 <_start@@Base+0x9740>
   1dc70:	mov	r3, #0
   1dc74:	str	r3, [sp, #220]	; 0xdc
   1dc78:	ldrb	r3, [r7]
   1dc7c:	cmp	r3, #125	; 0x7d
   1dc80:	beq	1dd20 <_start@@Base+0x96f8>
   1dc84:	mov	r3, #10
   1dc88:	mov	r2, r5
   1dc8c:	mov	r1, r7
   1dc90:	mov	r0, r9
   1dc94:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1dc98:	ldr	r3, [sp, #220]	; 0xdc
   1dc9c:	cmp	r3, #0
   1dca0:	beq	1de00 <_start@@Base+0x97d8>
   1dca4:	cmp	r5, r0
   1dca8:	beq	1dcd0 <_start@@Base+0x96a8>
   1dcac:	ldrb	r3, [r0]
   1dcb0:	cmp	r3, #34	; 0x22
   1dcb4:	addeq	r0, r0, #1
   1dcb8:	moveq	r3, #0
   1dcbc:	streq	r3, [r9, #12]
   1dcc0:	beq	1dcd0 <_start@@Base+0x96a8>
   1dcc4:	cmp	r3, #46	; 0x2e
   1dcc8:	strne	r8, [r9, #12]
   1dccc:	beq	1d6d0 <_start@@Base+0x90a8>
   1dcd0:	sub	r3, r5, r0
   1dcd4:	cmp	r3, #8
   1dcd8:	movcs	r3, #8
   1dcdc:	sub	r3, r3, #1
   1dce0:	cmp	r3, #7
   1dce4:	ldrls	pc, [pc, r3, lsl #2]
   1dce8:	b	1dc0c <_start@@Base+0x95e4>
   1dcec:	andeq	sp, r1, ip, lsl #17
   1dcf0:	andeq	sp, r1, r0, lsl #17
   1dcf4:	andeq	sp, r1, r4, ror r8
   1dcf8:	andeq	sp, r1, r8, ror #16
   1dcfc:	andeq	sp, r1, ip, asr r8
   1dd00:	andeq	sp, r1, r0, asr r8
   1dd04:	strdeq	sp, [r1], -r4
   1dd08:	andeq	sp, r1, r8, ror #13
   1dd0c:	ldrb	r3, [r7, #1]
   1dd10:	cmp	r3, #32
   1dd14:	addhi	r7, r7, #1
   1dd18:	bls	1dc3c <_start@@Base+0x9614>
   1dd1c:	b	1dc50 <_start@@Base+0x9628>
   1dd20:	add	r0, r7, #1
   1dd24:	sub	r3, r5, r0
   1dd28:	cmp	r3, #1
   1dd2c:	ble	1dd40 <_start@@Base+0x9718>
   1dd30:	ldrb	r3, [r7, #1]
   1dd34:	cmp	r3, #32
   1dd38:	bhi	1dc98 <_start@@Base+0x9670>
   1dd3c:	beq	1dd54 <_start@@Base+0x972c>
   1dd40:	mov	r2, r5
   1dd44:	mov	r1, r0
   1dd48:	mov	r0, r9
   1dd4c:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1dd50:	b	1dc98 <_start@@Base+0x9670>
   1dd54:	ldrb	r3, [r7, #2]
   1dd58:	cmp	r3, #32
   1dd5c:	addhi	r0, r7, #2
   1dd60:	bls	1dd40 <_start@@Base+0x9718>
   1dd64:	b	1dc98 <_start@@Base+0x9670>
   1dd68:	add	r0, r7, #1
   1dd6c:	sub	r3, r5, r0
   1dd70:	cmp	r3, #1
   1dd74:	ble	1dd88 <_start@@Base+0x9760>
   1dd78:	ldrb	r3, [r7, #1]
   1dd7c:	cmp	r3, #32
   1dd80:	bhi	1dd98 <_start@@Base+0x9770>
   1dd84:	beq	1ddcc <_start@@Base+0x97a4>
   1dd88:	mov	r2, r5
   1dd8c:	mov	r1, r0
   1dd90:	mov	r0, r9
   1dd94:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1dd98:	cmp	r5, r0
   1dd9c:	beq	1dde0 <_start@@Base+0x97b8>
   1dda0:	ldrb	r3, [r0]
   1dda4:	cmp	r3, #125	; 0x7d
   1dda8:	strne	r8, [sp, #220]	; 0xdc
   1ddac:	bne	1dc98 <_start@@Base+0x9670>
   1ddb0:	mov	r3, #0
   1ddb4:	str	r3, [sp, #220]	; 0xdc
   1ddb8:	mov	r2, r5
   1ddbc:	add	r1, r0, #1
   1ddc0:	mov	r0, r9
   1ddc4:	bl	17d9c <_start@@Base+0x3774>
   1ddc8:	b	1dc98 <_start@@Base+0x9670>
   1ddcc:	ldrb	r3, [r7, #2]
   1ddd0:	cmp	r3, #32
   1ddd4:	addhi	r0, r7, #2
   1ddd8:	bls	1dd88 <_start@@Base+0x9760>
   1dddc:	b	1dd98 <_start@@Base+0x9770>
   1dde0:	mov	r3, #0
   1dde4:	str	r3, [sp, #220]	; 0xdc
   1dde8:	mov	r3, #10
   1ddec:	mov	r2, r5
   1ddf0:	mov	r1, r0
   1ddf4:	mov	r0, r9
   1ddf8:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1ddfc:	b	1dc98 <_start@@Base+0x9670>
   1de00:	mov	r6, r9
   1de04:	mov	r4, r0
   1de08:	ldr	r3, [r9, #24]
   1de0c:	cmp	r3, #0
   1de10:	beq	1de30 <_start@@Base+0x9808>
   1de14:	mov	r3, #33	; 0x21
   1de18:	mov	r2, r5
   1de1c:	mov	r1, r4
   1de20:	mov	r0, r6
   1de24:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1de28:	mov	r4, r0
   1de2c:	b	1e544 <_start@@Base+0x9f1c>
   1de30:	ldr	r0, [r9]
   1de34:	bl	286cc <flatcc_builder_end_table@@Base>
   1de38:	ldr	r3, [sp, #280]	; 0x118
   1de3c:	str	r0, [r3]
   1de40:	cmp	r0, #0
   1de44:	beq	1de14 <_start@@Base+0x97ec>
   1de48:	b	1e544 <_start@@Base+0x9f1c>
   1de4c:	mov	r2, #2
   1de50:	mov	r1, r2
   1de54:	ldr	r0, [r0]
   1de58:	bl	27044 <flatcc_builder_start_struct@@Base>
   1de5c:	subs	fp, r0, #0
   1de60:	beq	1e514 <_start@@Base+0x9eec>
   1de64:	add	r3, sp, #224	; 0xe0
   1de68:	mov	r2, r5
   1de6c:	mov	r1, r4
   1de70:	mov	r0, r6
   1de74:	bl	17de0 <_start@@Base+0x37b8>
   1de78:	mov	r4, r0
   1de7c:	str	fp, [sp, #16]
   1de80:	mov	r7, r6
   1de84:	b	1e370 <_start@@Base+0x9d48>
   1de88:	mov	r3, #5
   1de8c:	mov	r2, r5
   1de90:	mov	r1, r4
   1de94:	mov	r0, r7
   1de98:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1de9c:	mov	r4, r0
   1dea0:	b	1e3ac <_start@@Base+0x9d84>
   1dea4:	ldrb	r2, [r4, #7]
   1dea8:	mov	r3, #0
   1deac:	b	1deb8 <_start@@Base+0x9890>
   1deb0:	mov	r2, #0
   1deb4:	mov	r3, #0
   1deb8:	ldrb	r0, [r4, #6]
   1debc:	mov	ip, #0
   1dec0:	str	ip, [sp, #156]	; 0x9c
   1dec4:	lsl	r1, r0, #8
   1dec8:	str	r1, [sp, #152]	; 0x98
   1decc:	ldrd	r0, [sp, #152]	; 0x98
   1ded0:	orr	r0, r0, r2
   1ded4:	orr	r1, r1, r3
   1ded8:	mov	r2, r0
   1dedc:	mov	r3, r1
   1dee0:	ldrb	r0, [r4, #5]
   1dee4:	mov	ip, #0
   1dee8:	str	ip, [sp, #100]	; 0x64
   1deec:	lsl	r1, r0, #16
   1def0:	str	r1, [sp, #96]	; 0x60
   1def4:	ldrd	r0, [sp, #96]	; 0x60
   1def8:	orr	r0, r0, r2
   1defc:	orr	r1, r1, r3
   1df00:	mov	r2, r0
   1df04:	mov	r3, r1
   1df08:	ldrb	r0, [r4, #4]
   1df0c:	mov	ip, #0
   1df10:	str	ip, [sp, #60]	; 0x3c
   1df14:	lsl	r1, r0, #24
   1df18:	str	r1, [sp, #56]	; 0x38
   1df1c:	ldrd	r0, [sp, #56]	; 0x38
   1df20:	orr	r0, r0, r2
   1df24:	orr	r1, r1, r3
   1df28:	mov	r2, r0
   1df2c:	mov	r3, r1
   1df30:	ldrb	r1, [r4, #3]
   1df34:	str	r1, [sp, #44]	; 0x2c
   1df38:	mov	r1, #0
   1df3c:	str	r1, [sp, #40]	; 0x28
   1df40:	ldrd	r0, [sp, #40]	; 0x28
   1df44:	orr	r0, r0, r2
   1df48:	orr	r1, r1, r3
   1df4c:	mov	r2, r0
   1df50:	mov	r3, r1
   1df54:	ldrb	r0, [r4, #2]
   1df58:	lsl	r1, r0, #8
   1df5c:	str	r1, [sp, #28]
   1df60:	mov	r1, #0
   1df64:	str	r1, [sp, #24]
   1df68:	ldrd	r0, [sp, #24]
   1df6c:	orr	r0, r0, r2
   1df70:	orr	r1, r1, r3
   1df74:	mov	r2, r0
   1df78:	mov	r3, r1
   1df7c:	ldrb	r0, [r4, #1]
   1df80:	lsl	r1, r0, #16
   1df84:	str	r1, [sp, #12]
   1df88:	mov	r1, #0
   1df8c:	str	r1, [sp, #8]
   1df90:	ldrd	r0, [sp, #8]
   1df94:	orr	r0, r0, r2
   1df98:	orr	r1, r1, r3
   1df9c:	mov	r2, r0
   1dfa0:	mov	r3, r1
   1dfa4:	ldrb	r0, [r4]
   1dfa8:	lsl	r9, r0, #24
   1dfac:	mov	r8, #0
   1dfb0:	orr	r2, r2, r8
   1dfb4:	orr	r3, r3, r9
   1dfb8:	add	r1, pc, #784	; 0x310
   1dfbc:	ldrd	r0, [r1]
   1dfc0:	cmp	r3, r1
   1dfc4:	cmpeq	r2, r0
   1dfc8:	bne	1e2e8 <_start@@Base+0x9cc0>
   1dfcc:	add	r6, r4, #8
   1dfd0:	sub	r3, r5, r6
   1dfd4:	cmp	r3, #8
   1dfd8:	movcs	r3, #8
   1dfdc:	sub	r3, r3, #1
   1dfe0:	cmp	r3, #7
   1dfe4:	ldrls	pc, [pc, r3, lsl #2]
   1dfe8:	b	1e198 <_start@@Base+0x9b70>
   1dfec:	muleq	r1, r0, r1
   1dff0:	andeq	lr, r1, r8, lsl #3
   1dff4:	andeq	lr, r1, r0, lsl #3
   1dff8:	andeq	lr, r1, r8, ror r1
   1dffc:	andeq	lr, r1, r0, ror r1
   1e000:	andeq	lr, r1, r8, ror #2
   1e004:	andeq	lr, r1, ip, asr r0
   1e008:	andeq	lr, r1, r4, asr r0
   1e00c:	mov	r2, #0
   1e010:	mov	r3, #0
   1e014:	b	1dee0 <_start@@Base+0x98b8>
   1e018:	mov	r2, #0
   1e01c:	mov	r3, #0
   1e020:	b	1df08 <_start@@Base+0x98e0>
   1e024:	mov	r2, #0
   1e028:	mov	r3, #0
   1e02c:	b	1df30 <_start@@Base+0x9908>
   1e030:	mov	r2, #0
   1e034:	mov	r3, #0
   1e038:	b	1df54 <_start@@Base+0x992c>
   1e03c:	mov	r2, #0
   1e040:	mov	r3, #0
   1e044:	b	1df7c <_start@@Base+0x9954>
   1e048:	mov	r2, #0
   1e04c:	mov	r3, #0
   1e050:	b	1dfa4 <_start@@Base+0x997c>
   1e054:	mov	r1, #0
   1e058:	b	1e060 <_start@@Base+0x9a38>
   1e05c:	mov	r1, #0
   1e060:	ldrb	r2, [r4, #14]
   1e064:	mov	ip, #0
   1e068:	str	ip, [sp, #204]	; 0xcc
   1e06c:	lsl	r3, r2, #8
   1e070:	str	r3, [sp, #200]	; 0xc8
   1e074:	ldrd	r2, [sp, #200]	; 0xc8
   1e078:	orr	r3, r3, r1
   1e07c:	mov	r1, r3
   1e080:	ldrb	r2, [r4, #13]
   1e084:	mov	ip, #0
   1e088:	str	ip, [sp, #188]	; 0xbc
   1e08c:	lsl	r3, r2, #16
   1e090:	str	r3, [sp, #184]	; 0xb8
   1e094:	ldrd	r2, [sp, #184]	; 0xb8
   1e098:	orr	r3, r3, r1
   1e09c:	mov	r1, r3
   1e0a0:	ldrb	r2, [r4, #12]
   1e0a4:	mov	ip, #0
   1e0a8:	str	ip, [sp, #164]	; 0xa4
   1e0ac:	lsl	r3, r2, #24
   1e0b0:	str	r3, [sp, #160]	; 0xa0
   1e0b4:	ldrd	r2, [sp, #160]	; 0xa0
   1e0b8:	orr	r3, r3, r1
   1e0bc:	ldrb	r1, [r4, #11]
   1e0c0:	str	r1, [sp, #140]	; 0x8c
   1e0c4:	mov	r1, #0
   1e0c8:	str	r1, [sp, #136]	; 0x88
   1e0cc:	ldrd	r0, [sp, #136]	; 0x88
   1e0d0:	orr	r1, r1, r3
   1e0d4:	mov	r3, r1
   1e0d8:	ldrb	r0, [r4, #10]
   1e0dc:	lsl	r1, r0, #8
   1e0e0:	str	r1, [sp, #116]	; 0x74
   1e0e4:	mov	r1, #0
   1e0e8:	str	r1, [sp, #112]	; 0x70
   1e0ec:	ldrd	r0, [sp, #112]	; 0x70
   1e0f0:	orr	r1, r1, r3
   1e0f4:	mov	r3, r1
   1e0f8:	ldrb	r0, [r4, #9]
   1e0fc:	lsl	r1, r0, #16
   1e100:	str	r1, [sp, #84]	; 0x54
   1e104:	mov	r1, #0
   1e108:	str	r1, [sp, #80]	; 0x50
   1e10c:	ldrd	r0, [sp, #80]	; 0x50
   1e110:	orr	r1, r1, r3
   1e114:	mov	r3, r1
   1e118:	ldrb	r0, [r4, #8]
   1e11c:	lsl	r1, r0, #24
   1e120:	str	r1, [sp, #68]	; 0x44
   1e124:	mov	r1, #0
   1e128:	str	r1, [sp, #64]	; 0x40
   1e12c:	ldrd	r0, [sp, #64]	; 0x40
   1e130:	orr	r1, r1, r3
   1e134:	mov	r3, r1
   1e138:	mov	r2, #0
   1e13c:	bic	r3, r3, #255	; 0xff
   1e140:	add	r1, pc, #400	; 0x190
   1e144:	ldrd	r0, [r1]
   1e148:	cmp	r3, r1
   1e14c:	cmpeq	r2, r0
   1e150:	beq	1e1a0 <_start@@Base+0x9b78>
   1e154:	mov	r2, r5
   1e158:	mov	r1, r6
   1e15c:	mov	r0, r7
   1e160:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1e164:	b	1e2f8 <_start@@Base+0x9cd0>
   1e168:	mov	r1, #0
   1e16c:	b	1e080 <_start@@Base+0x9a58>
   1e170:	mov	r1, #0
   1e174:	b	1e0a0 <_start@@Base+0x9a78>
   1e178:	mov	r3, #0
   1e17c:	b	1e0bc <_start@@Base+0x9a94>
   1e180:	mov	r3, #0
   1e184:	b	1e0d8 <_start@@Base+0x9ab0>
   1e188:	mov	r3, #0
   1e18c:	b	1e0f8 <_start@@Base+0x9ad0>
   1e190:	mov	r3, #0
   1e194:	b	1e118 <_start@@Base+0x9af0>
   1e198:	mov	r3, #0
   1e19c:	b	1e138 <_start@@Base+0x9b10>
   1e1a0:	mov	r3, #3
   1e1a4:	mov	r2, r5
   1e1a8:	mov	r1, r6
   1e1ac:	mov	r0, r7
   1e1b0:	bl	193e8 <_start@@Base+0x4dc0>
   1e1b4:	mov	r4, r0
   1e1b8:	cmp	r6, r0
   1e1bc:	beq	1e2b8 <_start@@Base+0x9c90>
   1e1c0:	mov	r1, #0
   1e1c4:	strh	r1, [sp, #220]	; 0xdc
   1e1c8:	mov	r2, #0
   1e1cc:	mov	r3, #0
   1e1d0:	strd	r2, [sp, #232]	; 0xe8
   1e1d4:	str	r1, [sp, #228]	; 0xe4
   1e1d8:	cmp	r5, r0
   1e1dc:	beq	1e258 <_start@@Base+0x9c30>
   1e1e0:	add	r3, sp, #232	; 0xe8
   1e1e4:	str	r3, [sp]
   1e1e8:	add	r3, sp, #228	; 0xe4
   1e1ec:	mov	r2, r5
   1e1f0:	mov	r1, r0
   1e1f4:	mov	r0, r7
   1e1f8:	bl	2ed84 <flatcc_json_parser_integer@@Base>
   1e1fc:	cmp	r4, r0
   1e200:	beq	1e258 <_start@@Base+0x9c30>
   1e204:	ldr	r3, [sp, #228]	; 0xe4
   1e208:	cmp	r3, #0
   1e20c:	bne	1e23c <_start@@Base+0x9c14>
   1e210:	ldrd	r2, [sp, #232]	; 0xe8
   1e214:	ldr	sl, [pc, #196]	; 1e2e0 <_start@@Base+0x9cb8>
   1e218:	mov	fp, #0
   1e21c:	cmp	r3, fp
   1e220:	cmpeq	r2, sl
   1e224:	strhls	r2, [sp, #220]	; 0xdc
   1e228:	bhi	1e2a0 <_start@@Base+0x9c78>
   1e22c:	ldrh	r3, [sp, #220]	; 0xdc
   1e230:	ldr	r2, [sp, #16]
   1e234:	strh	r3, [r2]
   1e238:	b	1e2f8 <_start@@Base+0x9cd0>
   1e23c:	mov	r3, #8
   1e240:	mov	r2, r5
   1e244:	mov	r1, r0
   1e248:	mov	r0, r7
   1e24c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1e250:	cmp	r4, r0
   1e254:	bne	1e22c <_start@@Base+0x9c04>
   1e258:	add	r3, sp, #220	; 0xdc
   1e25c:	str	r3, [sp]
   1e260:	ldr	r3, [pc, #124]	; 1e2e4 <_start@@Base+0x9cbc>
   1e264:	mov	r2, r5
   1e268:	mov	r1, r4
   1e26c:	mov	r0, r7
   1e270:	bl	19200 <_start@@Base+0x4bd8>
   1e274:	cmp	r5, r0
   1e278:	cmpne	r4, r0
   1e27c:	bne	1e22c <_start@@Base+0x9c04>
   1e280:	mov	r6, r7
   1e284:	mov	r3, #33	; 0x21
   1e288:	mov	r2, r5
   1e28c:	mov	r1, r0
   1e290:	mov	r0, r7
   1e294:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1e298:	mov	r4, r0
   1e29c:	b	1e4f4 <_start@@Base+0x9ecc>
   1e2a0:	mov	r3, #7
   1e2a4:	mov	r2, r5
   1e2a8:	mov	r1, r0
   1e2ac:	mov	r0, r7
   1e2b0:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1e2b4:	b	1e250 <_start@@Base+0x9c28>
   1e2b8:	mov	r2, r5
   1e2bc:	mov	r1, r0
   1e2c0:	mov	r0, r7
   1e2c4:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1e2c8:	b	1e2f8 <_start@@Base+0x9cd0>
   1e2cc:	nop			; (mov r0, r0)
   1e2d0:	svcpl	0x006c656e
   1e2d4:	stmdavs	r1!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   1e2d8:	andeq	r0, r0, r0
   1e2dc:	ldrbvs	r6, [r4, -r0, lsl #16]!
   1e2e0:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1e2e4:	andeq	r4, r5, r8, ror r1
   1e2e8:	mov	r2, r5
   1e2ec:	mov	r1, r4
   1e2f0:	mov	r0, r7
   1e2f4:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1e2f8:	sub	r3, r5, r0
   1e2fc:	cmp	r3, #1
   1e300:	ble	1e314 <_start@@Base+0x9cec>
   1e304:	ldrb	r3, [r0]
   1e308:	cmp	r3, #32
   1e30c:	bhi	1e324 <_start@@Base+0x9cfc>
   1e310:	beq	1e3e8 <_start@@Base+0x9dc0>
   1e314:	mov	r2, r5
   1e318:	mov	r1, r0
   1e31c:	mov	r0, r7
   1e320:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1e324:	cmp	r5, r0
   1e328:	moveq	r3, #0
   1e32c:	streq	r3, [sp, #224]	; 0xe0
   1e330:	moveq	r4, r0
   1e334:	beq	1e370 <_start@@Base+0x9d48>
   1e338:	ldrb	r3, [r0]
   1e33c:	cmp	r3, #44	; 0x2c
   1e340:	beq	1e448 <_start@@Base+0x9e20>
   1e344:	mov	r3, #0
   1e348:	str	r3, [sp, #224]	; 0xe0
   1e34c:	ldrb	r3, [r0]
   1e350:	cmp	r3, #125	; 0x7d
   1e354:	beq	1e3fc <_start@@Base+0x9dd4>
   1e358:	mov	r3, #10
   1e35c:	mov	r2, r5
   1e360:	mov	r1, r0
   1e364:	mov	r0, r7
   1e368:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1e36c:	mov	r4, r0
   1e370:	ldr	r3, [sp, #224]	; 0xe0
   1e374:	cmp	r3, #0
   1e378:	beq	1e4f0 <_start@@Base+0x9ec8>
   1e37c:	cmp	r5, r4
   1e380:	beq	1e3ac <_start@@Base+0x9d84>
   1e384:	ldrb	r3, [r4]
   1e388:	cmp	r3, #34	; 0x22
   1e38c:	addeq	r4, r4, #1
   1e390:	moveq	r3, #0
   1e394:	streq	r3, [r7, #12]
   1e398:	beq	1e3ac <_start@@Base+0x9d84>
   1e39c:	cmp	r3, #46	; 0x2e
   1e3a0:	movne	r3, #1
   1e3a4:	strne	r3, [r7, #12]
   1e3a8:	beq	1de88 <_start@@Base+0x9860>
   1e3ac:	sub	r3, r5, r4
   1e3b0:	cmp	r3, #8
   1e3b4:	movcs	r3, #8
   1e3b8:	sub	r3, r3, #1
   1e3bc:	cmp	r3, #7
   1e3c0:	ldrls	pc, [pc, r3, lsl #2]
   1e3c4:	b	1e2e8 <_start@@Base+0x9cc0>
   1e3c8:	andeq	lr, r1, r8, asr #32
   1e3cc:	andeq	lr, r1, ip, lsr r0
   1e3d0:	andeq	lr, r1, r0, lsr r0
   1e3d4:	andeq	lr, r1, r4, lsr #32
   1e3d8:	andeq	lr, r1, r8, lsl r0
   1e3dc:	andeq	lr, r1, ip
   1e3e0:			; <UNDEFINED> instruction: 0x0001deb0
   1e3e4:	andeq	sp, r1, r4, lsr #29
   1e3e8:	ldrb	r3, [r0, #1]
   1e3ec:	cmp	r3, #32
   1e3f0:	addhi	r0, r0, #1
   1e3f4:	bls	1e314 <_start@@Base+0x9cec>
   1e3f8:	b	1e324 <_start@@Base+0x9cfc>
   1e3fc:	add	r4, r0, #1
   1e400:	sub	r3, r5, r4
   1e404:	cmp	r3, #1
   1e408:	ble	1e41c <_start@@Base+0x9df4>
   1e40c:	ldrb	r3, [r0, #1]
   1e410:	cmp	r3, #32
   1e414:	bhi	1e370 <_start@@Base+0x9d48>
   1e418:	beq	1e434 <_start@@Base+0x9e0c>
   1e41c:	mov	r2, r5
   1e420:	mov	r1, r4
   1e424:	mov	r0, r7
   1e428:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1e42c:	mov	r4, r0
   1e430:	b	1e370 <_start@@Base+0x9d48>
   1e434:	ldrb	r3, [r0, #2]
   1e438:	cmp	r3, #32
   1e43c:	addhi	r4, r0, #2
   1e440:	bls	1e41c <_start@@Base+0x9df4>
   1e444:	b	1e370 <_start@@Base+0x9d48>
   1e448:	add	r4, r0, #1
   1e44c:	sub	r3, r5, r4
   1e450:	cmp	r3, #1
   1e454:	ble	1e468 <_start@@Base+0x9e40>
   1e458:	ldrb	r3, [r0, #1]
   1e45c:	cmp	r3, #32
   1e460:	bhi	1e47c <_start@@Base+0x9e54>
   1e464:	beq	1e4b8 <_start@@Base+0x9e90>
   1e468:	mov	r2, r5
   1e46c:	mov	r1, r4
   1e470:	mov	r0, r7
   1e474:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1e478:	mov	r4, r0
   1e47c:	cmp	r5, r4
   1e480:	beq	1e4cc <_start@@Base+0x9ea4>
   1e484:	ldrb	r3, [r4]
   1e488:	cmp	r3, #125	; 0x7d
   1e48c:	movne	r3, #1
   1e490:	strne	r3, [sp, #224]	; 0xe0
   1e494:	bne	1e370 <_start@@Base+0x9d48>
   1e498:	mov	r3, #0
   1e49c:	str	r3, [sp, #224]	; 0xe0
   1e4a0:	mov	r2, r5
   1e4a4:	add	r1, r4, #1
   1e4a8:	mov	r0, r7
   1e4ac:	bl	17d9c <_start@@Base+0x3774>
   1e4b0:	mov	r4, r0
   1e4b4:	b	1e370 <_start@@Base+0x9d48>
   1e4b8:	ldrb	r3, [r0, #2]
   1e4bc:	cmp	r3, #32
   1e4c0:	addhi	r4, r0, #2
   1e4c4:	bls	1e468 <_start@@Base+0x9e40>
   1e4c8:	b	1e47c <_start@@Base+0x9e54>
   1e4cc:	mov	r3, #0
   1e4d0:	str	r3, [sp, #224]	; 0xe0
   1e4d4:	mov	r3, #10
   1e4d8:	mov	r2, r5
   1e4dc:	mov	r1, r4
   1e4e0:	mov	r0, r7
   1e4e4:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1e4e8:	mov	r4, r0
   1e4ec:	b	1e370 <_start@@Base+0x9d48>
   1e4f0:	mov	r6, r7
   1e4f4:	cmp	r5, r4
   1e4f8:	beq	1e514 <_start@@Base+0x9eec>
   1e4fc:	ldr	r0, [r6]
   1e500:	bl	270ec <flatcc_builder_end_struct@@Base>
   1e504:	ldr	r3, [sp, #280]	; 0x118
   1e508:	str	r0, [r3]
   1e50c:	cmp	r0, #0
   1e510:	bne	1e560 <_start@@Base+0x9f38>
   1e514:	mov	r3, #33	; 0x21
   1e518:	mov	r2, r5
   1e51c:	mov	r1, r4
   1e520:	mov	r0, r6
   1e524:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1e528:	mov	r4, r0
   1e52c:	b	1e544 <_start@@Base+0x9f1c>
   1e530:	ldr	r3, [sp, #280]	; 0x118
   1e534:	mov	r2, r5
   1e538:	mov	r1, r4
   1e53c:	bl	19e1c <_start@@Base+0x57f4>
   1e540:	mov	r4, r0
   1e544:	ldr	r3, [r6, #24]
   1e548:	cmp	r3, #0
   1e54c:	bne	1e560 <_start@@Base+0x9f38>
   1e550:	ldr	r3, [sp, #280]	; 0x118
   1e554:	ldr	r3, [r3]
   1e558:	cmp	r3, #0
   1e55c:	beq	1e5b4 <_start@@Base+0x9f8c>
   1e560:	mov	r0, r4
   1e564:	add	sp, sp, #244	; 0xf4
   1e568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e56c:	ldr	r3, [sp, #280]	; 0x118
   1e570:	mov	r2, r5
   1e574:	mov	r1, r4
   1e578:	bl	19e1c <_start@@Base+0x57f4>
   1e57c:	mov	r4, r0
   1e580:	b	1e544 <_start@@Base+0x9f1c>
   1e584:	ldr	r3, [sp, #280]	; 0x118
   1e588:	mov	r2, r5
   1e58c:	mov	r1, r4
   1e590:	bl	2f2b4 <flatcc_json_parser_build_string@@Base>
   1e594:	mov	r4, r0
   1e598:	b	1e544 <_start@@Base+0x9f1c>
   1e59c:	mov	r2, r5
   1e5a0:	mov	r1, r4
   1e5a4:	mov	r0, r6
   1e5a8:	bl	2e008 <flatcc_json_parser_generic_json@@Base>
   1e5ac:	mov	r4, r0
   1e5b0:	b	1e560 <_start@@Base+0x9f38>
   1e5b4:	mov	r3, #33	; 0x21
   1e5b8:	mov	r2, r5
   1e5bc:	mov	r1, r4
   1e5c0:	mov	r0, r6
   1e5c4:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1e5c8:	mov	r4, r0
   1e5cc:	b	1e560 <_start@@Base+0x9f38>
   1e5d0:	push	{r4, r5, r6, lr}
   1e5d4:	mov	r6, r0
   1e5d8:	mov	r4, r2
   1e5dc:	mov	r5, r3
   1e5e0:	cmp	r1, r2
   1e5e4:	beq	1e5f4 <_start@@Base+0x9fcc>
   1e5e8:	ldrb	r3, [r1]
   1e5ec:	cmp	r3, #91	; 0x5b
   1e5f0:	beq	1e610 <_start@@Base+0x9fe8>
   1e5f4:	mov	r3, #0
   1e5f8:	str	r3, [r5]
   1e5fc:	mov	r3, #22
   1e600:	mov	r2, r4
   1e604:	mov	r0, r6
   1e608:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1e60c:	pop	{r4, r5, r6, pc}
   1e610:	add	r0, r1, #1
   1e614:	sub	r3, r2, r0
   1e618:	cmp	r3, #1
   1e61c:	ble	1e630 <_start@@Base+0xa008>
   1e620:	ldrb	r3, [r1, #1]
   1e624:	cmp	r3, #32
   1e628:	bhi	1e640 <_start@@Base+0xa018>
   1e62c:	beq	1e660 <_start@@Base+0xa038>
   1e630:	mov	r2, r4
   1e634:	mov	r1, r0
   1e638:	mov	r0, r6
   1e63c:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1e640:	cmp	r4, r0
   1e644:	beq	1e654 <_start@@Base+0xa02c>
   1e648:	ldrb	r3, [r0]
   1e64c:	cmp	r3, #93	; 0x5d
   1e650:	beq	1e674 <_start@@Base+0xa04c>
   1e654:	mov	r3, #1
   1e658:	str	r3, [r5]
   1e65c:	pop	{r4, r5, r6, pc}
   1e660:	ldrb	r3, [r1, #2]
   1e664:	cmp	r3, #32
   1e668:	addhi	r0, r1, #2
   1e66c:	bls	1e630 <_start@@Base+0xa008>
   1e670:	b	1e640 <_start@@Base+0xa018>
   1e674:	mov	r3, #0
   1e678:	str	r3, [r5]
   1e67c:	mov	r2, r4
   1e680:	add	r1, r0, #1
   1e684:	mov	r0, r6
   1e688:	bl	17d9c <_start@@Base+0x3774>
   1e68c:	pop	{r4, r5, r6, pc}
   1e690:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e694:	vpush	{d8-d9}
   1e698:	sub	sp, sp, #308	; 0x134
   1e69c:	mov	fp, r0
   1e6a0:	mov	r9, r1
   1e6a4:	mov	sl, r2
   1e6a8:	mov	r2, r3
   1e6ac:	str	r3, [sp, #180]	; 0xb4
   1e6b0:	mov	r3, #0
   1e6b4:	str	r3, [r2]
   1e6b8:	mov	r1, #36	; 0x24
   1e6bc:	ldr	r0, [r0]
   1e6c0:	bl	27c7c <flatcc_builder_start_table@@Base>
   1e6c4:	cmp	r0, #0
   1e6c8:	bne	22fdc <_start@@Base+0xe9b4>
   1e6cc:	add	r3, sp, #292	; 0x124
   1e6d0:	str	r3, [sp]
   1e6d4:	mov	r3, #1
   1e6d8:	mov	r2, sl
   1e6dc:	mov	r1, r9
   1e6e0:	mov	r0, fp
   1e6e4:	bl	2f44c <flatcc_json_parser_prepare_unions@@Base>
   1e6e8:	cmp	sl, r0
   1e6ec:	beq	22fdc <_start@@Base+0xe9b4>
   1e6f0:	add	r3, sp, #300	; 0x12c
   1e6f4:	mov	r2, sl
   1e6f8:	mov	r1, r9
   1e6fc:	mov	r0, fp
   1e700:	bl	17de0 <_start@@Base+0x37b8>
   1e704:	mov	r9, r0
   1e708:	ldr	r3, [sp, #300]	; 0x12c
   1e70c:	cmp	r3, #0
   1e710:	beq	22fd0 <_start@@Base+0xe9a8>
   1e714:	ldr	r3, [pc, #1560]	; 1ed34 <_start@@Base+0xa70c>
   1e718:	add	r3, r3, #612	; 0x264
   1e71c:	str	r3, [sp, #248]	; 0xf8
   1e720:	mov	r8, fp
   1e724:	b	21e54 <_start@@Base+0xd82c>
   1e728:	mov	r3, #5
   1e72c:	mov	r2, sl
   1e730:	mov	r1, r9
   1e734:	mov	r0, r8
   1e738:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1e73c:	mov	r9, r0
   1e740:	b	21e84 <_start@@Base+0xd85c>
   1e744:	mov	r3, #5
   1e748:	mov	r2, sl
   1e74c:	mov	r1, r9
   1e750:	mov	r0, r8
   1e754:	bl	193e8 <_start@@Base+0x4dc0>
   1e758:	mov	r1, r0
   1e75c:	cmp	r0, r9
   1e760:	beq	1e7a4 <_start@@Base+0xa17c>
   1e764:	add	r3, sp, #296	; 0x128
   1e768:	mov	r2, sl
   1e76c:	mov	r0, r8
   1e770:	bl	1e690 <_start@@Base+0xa068>
   1e774:	mov	r9, r0
   1e778:	ldr	r3, [sp, #296]	; 0x128
   1e77c:	cmp	r3, #0
   1e780:	beq	23094 <_start@@Base+0xea6c>
   1e784:	mov	r1, #12
   1e788:	ldr	r0, [r8]
   1e78c:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   1e790:	cmp	r0, #0
   1e794:	beq	2309c <_start@@Base+0xea74>
   1e798:	ldr	r3, [sp, #296]	; 0x128
   1e79c:	str	r3, [r0]
   1e7a0:	b	21e30 <_start@@Base+0xd808>
   1e7a4:	mov	r2, sl
   1e7a8:	mov	r0, r8
   1e7ac:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1e7b0:	mov	r9, r0
   1e7b4:	b	21e30 <_start@@Base+0xd808>
   1e7b8:	mov	r3, #5
   1e7bc:	mov	r2, sl
   1e7c0:	mov	r1, r9
   1e7c4:	mov	r0, r8
   1e7c8:	bl	193e8 <_start@@Base+0x4dc0>
   1e7cc:	mov	r4, r0
   1e7d0:	cmp	r0, r9
   1e7d4:	beq	1e918 <_start@@Base+0xa2f0>
   1e7d8:	mov	r3, #0
   1e7dc:	strb	r3, [sp, #272]	; 0x110
   1e7e0:	mov	r0, #0
   1e7e4:	mov	r1, #0
   1e7e8:	add	r2, sp, #280	; 0x118
   1e7ec:	strd	r0, [r2]
   1e7f0:	str	r3, [sp, #276]	; 0x114
   1e7f4:	cmp	sl, r4
   1e7f8:	beq	1e868 <_start@@Base+0xa240>
   1e7fc:	str	r2, [sp]
   1e800:	add	r3, sp, #276	; 0x114
   1e804:	mov	r2, sl
   1e808:	mov	r1, r4
   1e80c:	mov	r0, r8
   1e810:	bl	2ed84 <flatcc_json_parser_integer@@Base>
   1e814:	mov	r9, r0
   1e818:	cmp	r4, r0
   1e81c:	beq	1e868 <_start@@Base+0xa240>
   1e820:	add	r3, sp, #280	; 0x118
   1e824:	ldrd	r2, [r3]
   1e828:	ldr	r1, [sp, #276]	; 0x114
   1e82c:	cmp	r1, #0
   1e830:	beq	1e8a0 <_start@@Base+0xa278>
   1e834:	cmp	r3, #0
   1e838:	cmpeq	r2, #128	; 0x80
   1e83c:	rsbls	r2, r2, #0
   1e840:	strbls	r2, [sp, #272]	; 0x110
   1e844:	bls	1e8b0 <_start@@Base+0xa288>
   1e848:	mov	r3, #8
   1e84c:	mov	r2, sl
   1e850:	mov	r1, r0
   1e854:	mov	r0, r8
   1e858:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1e85c:	mov	r9, r0
   1e860:	cmp	r4, r9
   1e864:	bne	1e8b0 <_start@@Base+0xa288>
   1e868:	add	r3, sp, #272	; 0x110
   1e86c:	str	r3, [sp]
   1e870:	ldr	r3, [pc, #1212]	; 1ed34 <_start@@Base+0xa70c>
   1e874:	add	r3, r3, #276	; 0x114
   1e878:	mov	r2, sl
   1e87c:	mov	r1, r4
   1e880:	mov	r0, r8
   1e884:	bl	18a44 <_start@@Base+0x441c>
   1e888:	mov	r9, r0
   1e88c:	cmp	sl, r0
   1e890:	cmpne	r4, r0
   1e894:	bne	1e8b0 <_start@@Base+0xa288>
   1e898:	mov	fp, r8
   1e89c:	b	22fdc <_start@@Base+0xe9b4>
   1e8a0:	cmp	r3, #0
   1e8a4:	cmpeq	r2, #127	; 0x7f
   1e8a8:	strbls	r2, [sp, #272]	; 0x110
   1e8ac:	bhi	1e8ec <_start@@Base+0xa2c4>
   1e8b0:	add	r3, sp, #272	; 0x110
   1e8b4:	ldrsb	r3, [r3]
   1e8b8:	cmp	r3, #8
   1e8bc:	beq	1e908 <_start@@Base+0xa2e0>
   1e8c0:	mov	r3, #1
   1e8c4:	mov	r2, r3
   1e8c8:	mov	r1, #6
   1e8cc:	ldr	r0, [r8]
   1e8d0:	bl	29678 <flatcc_builder_table_add@@Base>
   1e8d4:	cmp	r0, #0
   1e8d8:	beq	230a4 <_start@@Base+0xea7c>
   1e8dc:	add	r3, sp, #272	; 0x110
   1e8e0:	ldrsb	r3, [r3]
   1e8e4:	strb	r3, [r0]
   1e8e8:	b	21e30 <_start@@Base+0xd808>
   1e8ec:	mov	r3, #7
   1e8f0:	mov	r2, sl
   1e8f4:	mov	r1, r0
   1e8f8:	mov	r0, r8
   1e8fc:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1e900:	mov	r9, r0
   1e904:	b	1e860 <_start@@Base+0xa238>
   1e908:	ldr	r3, [r8, #8]
   1e90c:	tst	r3, #2
   1e910:	beq	21e30 <_start@@Base+0xd808>
   1e914:	b	1e8c0 <_start@@Base+0xa298>
   1e918:	mov	r2, sl
   1e91c:	mov	r1, r0
   1e920:	mov	r0, r8
   1e924:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1e928:	mov	r9, r0
   1e92c:	b	21e30 <_start@@Base+0xd808>
   1e930:	mvn	r2, #0
   1e934:	ldr	r3, [pc, #1004]	; 1ed28 <_start@@Base+0xa700>
   1e938:	cmp	r1, r3
   1e93c:	cmpeq	r0, r2
   1e940:	bhi	1eac8 <_start@@Base+0xa4a0>
   1e944:	mov	r4, #0
   1e948:	add	r3, pc, #952	; 0x3b8
   1e94c:	ldrd	r2, [r3]
   1e950:	cmp	r1, r3
   1e954:	cmpeq	r4, r2
   1e958:	beq	1e974 <_start@@Base+0xa34c>
   1e95c:	mov	r2, sl
   1e960:	mov	r1, r9
   1e964:	mov	r0, r8
   1e968:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1e96c:	mov	r9, r0
   1e970:	b	21e30 <_start@@Base+0xd808>
   1e974:	mov	r3, #4
   1e978:	mov	r2, sl
   1e97c:	mov	r1, r9
   1e980:	mov	r0, r8
   1e984:	bl	193e8 <_start@@Base+0x4dc0>
   1e988:	mov	r4, r0
   1e98c:	cmp	r0, r9
   1e990:	beq	1eab0 <_start@@Base+0xa488>
   1e994:	mvn	r3, #0
   1e998:	mov	r2, #1
   1e99c:	mov	r1, r2
   1e9a0:	ldr	r0, [r8]
   1e9a4:	bl	279cc <flatcc_builder_start_vector@@Base>
   1e9a8:	cmp	r0, #0
   1e9ac:	bne	23064 <_start@@Base+0xea3c>
   1e9b0:	add	r3, sp, #300	; 0x12c
   1e9b4:	mov	r2, sl
   1e9b8:	mov	r1, r4
   1e9bc:	mov	r0, r8
   1e9c0:	bl	1e5d0 <_start@@Base+0x9fa8>
   1e9c4:	mov	r9, r0
   1e9c8:	ldr	r3, [sp, #300]	; 0x12c
   1e9cc:	cmp	r3, #0
   1e9d0:	beq	1ea7c <_start@@Base+0xa454>
   1e9d4:	mov	r7, #0
   1e9d8:	mov	r6, #1
   1e9dc:	add	r5, sp, #280	; 0x118
   1e9e0:	ldr	r3, [pc, #844]	; 1ed34 <_start@@Base+0xa70c>
   1e9e4:	add	fp, r3, #292	; 0x124
   1e9e8:	b	1ea18 <_start@@Base+0xa3f0>
   1e9ec:	ldrb	r3, [sp, #280]	; 0x118
   1e9f0:	strb	r3, [r4]
   1e9f4:	add	r3, sp, #300	; 0x12c
   1e9f8:	mov	r2, sl
   1e9fc:	mov	r1, r0
   1ea00:	mov	r0, r8
   1ea04:	bl	17fe8 <_start@@Base+0x39c0>
   1ea08:	mov	r9, r0
   1ea0c:	ldr	r3, [sp, #300]	; 0x12c
   1ea10:	cmp	r3, #0
   1ea14:	beq	1ea7c <_start@@Base+0xa454>
   1ea18:	strb	r7, [sp, #280]	; 0x118
   1ea1c:	mov	r1, r6
   1ea20:	ldr	r0, [r8]
   1ea24:	bl	271c4 <flatcc_builder_extend_vector@@Base>
   1ea28:	subs	r4, r0, #0
   1ea2c:	beq	230ac <_start@@Base+0xea84>
   1ea30:	mov	r3, r5
   1ea34:	mov	r2, sl
   1ea38:	mov	r1, r9
   1ea3c:	mov	r0, r8
   1ea40:	bl	17c28 <_start@@Base+0x3600>
   1ea44:	cmp	r0, r9
   1ea48:	bne	1e9ec <_start@@Base+0xa3c4>
   1ea4c:	str	r5, [sp]
   1ea50:	mov	r3, fp
   1ea54:	mov	r2, sl
   1ea58:	mov	r1, r9
   1ea5c:	mov	r0, r8
   1ea60:	bl	18e28 <_start@@Base+0x4800>
   1ea64:	cmp	sl, r0
   1ea68:	cmpne	r0, r9
   1ea6c:	bne	1e9ec <_start@@Base+0xa3c4>
   1ea70:	mov	fp, r8
   1ea74:	mov	r9, r0
   1ea78:	b	22fdc <_start@@Base+0xe9b4>
   1ea7c:	ldr	r0, [r8]
   1ea80:	bl	289dc <flatcc_builder_end_vector@@Base>
   1ea84:	str	r0, [sp, #296]	; 0x128
   1ea88:	cmp	r0, #0
   1ea8c:	beq	230b4 <_start@@Base+0xea8c>
   1ea90:	mov	r1, #30
   1ea94:	ldr	r0, [r8]
   1ea98:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   1ea9c:	cmp	r0, #0
   1eaa0:	beq	230bc <_start@@Base+0xea94>
   1eaa4:	ldr	r3, [sp, #296]	; 0x128
   1eaa8:	str	r3, [r0]
   1eaac:	b	21e30 <_start@@Base+0xd808>
   1eab0:	mov	r2, sl
   1eab4:	mov	r1, r0
   1eab8:	mov	r0, r8
   1eabc:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1eac0:	mov	r9, r0
   1eac4:	b	21e30 <_start@@Base+0xd808>
   1eac8:	add	r3, pc, #576	; 0x240
   1eacc:	ldrd	r2, [r3]
   1ead0:	cmp	r1, r3
   1ead4:	cmpeq	r0, r2
   1ead8:	bhi	1ec10 <_start@@Base+0xa5e8>
   1eadc:	mov	r2, #0
   1eae0:	ldr	r3, [pc, #580]	; 1ed2c <_start@@Base+0xa704>
   1eae4:	and	r4, r4, r2
   1eae8:	and	r5, r5, r3
   1eaec:	mov	r2, #0
   1eaf0:	ldr	r3, [pc, #568]	; 1ed30 <_start@@Base+0xa708>
   1eaf4:	cmp	r5, r3
   1eaf8:	cmpeq	r4, r2
   1eafc:	beq	1eb18 <_start@@Base+0xa4f0>
   1eb00:	mov	r2, sl
   1eb04:	mov	r1, r9
   1eb08:	mov	r0, r8
   1eb0c:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1eb10:	mov	r9, r0
   1eb14:	b	21e30 <_start@@Base+0xd808>
   1eb18:	mov	r3, #2
   1eb1c:	mov	r2, sl
   1eb20:	mov	r1, r9
   1eb24:	mov	r0, r8
   1eb28:	bl	193e8 <_start@@Base+0x4dc0>
   1eb2c:	mov	r4, r0
   1eb30:	cmp	r0, r9
   1eb34:	beq	1ebf8 <_start@@Base+0xa5d0>
   1eb38:	add	r3, sp, #304	; 0x130
   1eb3c:	mov	r2, #0
   1eb40:	strh	r2, [r3, #-24]!	; 0xffffffe8
   1eb44:	mov	r2, sl
   1eb48:	mov	r1, r0
   1eb4c:	mov	r0, r8
   1eb50:	bl	17958 <_start@@Base+0x3330>
   1eb54:	mov	r9, r0
   1eb58:	cmp	r4, r0
   1eb5c:	beq	1eb9c <_start@@Base+0xa574>
   1eb60:	add	r3, sp, #280	; 0x118
   1eb64:	ldrsh	r3, [r3]
   1eb68:	cmp	r3, #100	; 0x64
   1eb6c:	beq	1ebd0 <_start@@Base+0xa5a8>
   1eb70:	mov	r3, #2
   1eb74:	mov	r2, r3
   1eb78:	mov	r1, r3
   1eb7c:	ldr	r0, [r8]
   1eb80:	bl	29678 <flatcc_builder_table_add@@Base>
   1eb84:	cmp	r0, #0
   1eb88:	beq	1ebe0 <_start@@Base+0xa5b8>
   1eb8c:	add	r3, sp, #280	; 0x118
   1eb90:	ldrsh	r3, [r3]
   1eb94:	strh	r3, [r0]
   1eb98:	b	21e30 <_start@@Base+0xd808>
   1eb9c:	add	r3, sp, #280	; 0x118
   1eba0:	str	r3, [sp]
   1eba4:	ldr	r3, [pc, #392]	; 1ed34 <_start@@Base+0xa70c>
   1eba8:	add	r3, r3, #304	; 0x130
   1ebac:	mov	r2, sl
   1ebb0:	mov	r1, r0
   1ebb4:	mov	r0, r8
   1ebb8:	bl	19004 <_start@@Base+0x49dc>
   1ebbc:	cmp	sl, r0
   1ebc0:	cmpne	r9, r0
   1ebc4:	beq	1ebf0 <_start@@Base+0xa5c8>
   1ebc8:	mov	r9, r0
   1ebcc:	b	1eb60 <_start@@Base+0xa538>
   1ebd0:	ldr	r3, [r8, #8]
   1ebd4:	tst	r3, #2
   1ebd8:	beq	21e30 <_start@@Base+0xd808>
   1ebdc:	b	1eb70 <_start@@Base+0xa548>
   1ebe0:	mov	fp, r8
   1ebe4:	mov	r0, r9
   1ebe8:	mov	r9, r0
   1ebec:	b	22fdc <_start@@Base+0xe9b4>
   1ebf0:	mov	fp, r8
   1ebf4:	b	1ebe8 <_start@@Base+0xa5c0>
   1ebf8:	mov	r2, sl
   1ebfc:	mov	r1, r0
   1ec00:	mov	r0, r8
   1ec04:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1ec08:	mov	r9, r0
   1ec0c:	b	21e30 <_start@@Base+0xd808>
   1ec10:	add	r3, pc, #256	; 0x100
   1ec14:	ldrd	r2, [r3]
   1ec18:	cmp	r1, r3
   1ec1c:	cmpeq	r0, r2
   1ec20:	beq	1ec54 <_start@@Base+0xa62c>
   1ec24:	mov	r4, #0
   1ec28:	add	r3, pc, #240	; 0xf0
   1ec2c:	ldrd	r2, [r3]
   1ec30:	cmp	r1, r3
   1ec34:	cmpeq	r4, r2
   1ec38:	beq	1ee14 <_start@@Base+0xa7ec>
   1ec3c:	mov	r2, sl
   1ec40:	mov	r1, r9
   1ec44:	mov	r0, r8
   1ec48:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1ec4c:	mov	r9, r0
   1ec50:	b	21e30 <_start@@Base+0xd808>
   1ec54:	add	r4, r9, #8
   1ec58:	mov	r1, sl
   1ec5c:	mov	r0, r4
   1ec60:	bl	14750 <_start@@Base+0x128>
   1ec64:	mov	r0, #0
   1ec68:	and	r1, r1, #-16777216	; 0xff000000
   1ec6c:	cmp	r1, #2030043136	; 0x79000000
   1ec70:	cmpeq	r0, #0
   1ec74:	beq	1ec90 <_start@@Base+0xa668>
   1ec78:	mov	r2, sl
   1ec7c:	mov	r1, r4
   1ec80:	mov	r0, r8
   1ec84:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1ec88:	mov	r9, r0
   1ec8c:	b	21e30 <_start@@Base+0xd808>
   1ec90:	mov	r3, #1
   1ec94:	mov	r2, sl
   1ec98:	mov	r1, r4
   1ec9c:	mov	r0, r8
   1eca0:	bl	193e8 <_start@@Base+0x4dc0>
   1eca4:	mov	r9, r0
   1eca8:	cmp	r4, r0
   1ecac:	beq	1edfc <_start@@Base+0xa7d4>
   1ecb0:	mvn	r3, #0
   1ecb4:	mov	r2, #1
   1ecb8:	mov	r1, r2
   1ecbc:	ldr	r0, [r8]
   1ecc0:	bl	279cc <flatcc_builder_start_vector@@Base>
   1ecc4:	cmp	r0, #0
   1ecc8:	bne	230c4 <_start@@Base+0xea9c>
   1eccc:	add	r3, sp, #300	; 0x12c
   1ecd0:	mov	r2, sl
   1ecd4:	mov	r1, r9
   1ecd8:	mov	r0, r8
   1ecdc:	bl	1e5d0 <_start@@Base+0x9fa8>
   1ece0:	mov	r9, r0
   1ece4:	ldr	r3, [sp, #300]	; 0x12c
   1ece8:	cmp	r3, #0
   1ecec:	beq	1edc8 <_start@@Base+0xa7a0>
   1ecf0:	mov	r5, #0
   1ecf4:	mov	r7, #1
   1ecf8:	add	r6, sp, #280	; 0x118
   1ecfc:	ldr	r3, [pc, #48]	; 1ed34 <_start@@Base+0xa70c>
   1ed00:	add	fp, r3, #316	; 0x13c
   1ed04:	b	1ed64 <_start@@Base+0xa73c>
   1ed08:	andeq	r0, r0, r0
   1ed0c:			; <UNDEFINED> instruction: 0x666c6578
   1ed10:	mrcvs	15, 3, r6, cr4, cr1, {3}
   1ed14:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1ed18:	mrcvs	15, 3, r6, cr4, cr2, {3}
   1ed1c:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1ed20:	andeq	r0, r0, r0
   1ed24:	stclvs	14, cr6, [r1, #-388]!	; 0xfffffe7c
   1ed28:	stmdavs	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
   1ed2c:			; <UNDEFINED> instruction: 0xffff0000
   1ed30:	ldmdavs	r0!, {}^	; <UNPREDICTABLE>
   1ed34:	andeq	r4, r5, r0, ror r0
   1ed38:	ldrb	r3, [sp, #280]	; 0x118
   1ed3c:	strb	r3, [r4]
   1ed40:	add	r3, sp, #300	; 0x12c
   1ed44:	mov	r2, sl
   1ed48:	mov	r1, r0
   1ed4c:	mov	r0, r8
   1ed50:	bl	17fe8 <_start@@Base+0x39c0>
   1ed54:	mov	r9, r0
   1ed58:	ldr	r3, [sp, #300]	; 0x12c
   1ed5c:	cmp	r3, #0
   1ed60:	beq	1edc8 <_start@@Base+0xa7a0>
   1ed64:	strb	r5, [sp, #280]	; 0x118
   1ed68:	mov	r1, r7
   1ed6c:	ldr	r0, [r8]
   1ed70:	bl	271c4 <flatcc_builder_extend_vector@@Base>
   1ed74:	subs	r4, r0, #0
   1ed78:	beq	230cc <_start@@Base+0xeaa4>
   1ed7c:	mov	r3, r6
   1ed80:	mov	r2, sl
   1ed84:	mov	r1, r9
   1ed88:	mov	r0, r8
   1ed8c:	bl	17c28 <_start@@Base+0x3600>
   1ed90:	cmp	r0, r9
   1ed94:	bne	1ed38 <_start@@Base+0xa710>
   1ed98:	str	r6, [sp]
   1ed9c:	mov	r3, fp
   1eda0:	mov	r2, sl
   1eda4:	mov	r1, r9
   1eda8:	mov	r0, r8
   1edac:	bl	18e28 <_start@@Base+0x4800>
   1edb0:	cmp	sl, r0
   1edb4:	cmpne	r0, r9
   1edb8:	bne	1ed38 <_start@@Base+0xa710>
   1edbc:	mov	fp, r8
   1edc0:	mov	r9, r0
   1edc4:	b	22fdc <_start@@Base+0xe9b4>
   1edc8:	ldr	r0, [r8]
   1edcc:	bl	289dc <flatcc_builder_end_vector@@Base>
   1edd0:	str	r0, [sp, #296]	; 0x128
   1edd4:	cmp	r0, #0
   1edd8:	beq	230d4 <_start@@Base+0xeaac>
   1eddc:	mov	r1, #5
   1ede0:	ldr	r0, [r8]
   1ede4:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   1ede8:	cmp	r0, #0
   1edec:	beq	230dc <_start@@Base+0xeab4>
   1edf0:	ldr	r3, [sp, #296]	; 0x128
   1edf4:	str	r3, [r0]
   1edf8:	b	21e30 <_start@@Base+0xd808>
   1edfc:	mov	r2, sl
   1ee00:	mov	r1, r0
   1ee04:	mov	r0, r8
   1ee08:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1ee0c:	mov	r9, r0
   1ee10:	b	21e30 <_start@@Base+0xd808>
   1ee14:	mov	r3, #4
   1ee18:	mov	r2, sl
   1ee1c:	mov	r1, r9
   1ee20:	mov	r0, r8
   1ee24:	bl	193e8 <_start@@Base+0x4dc0>
   1ee28:	mov	r4, r0
   1ee2c:	cmp	r0, r9
   1ee30:	beq	1eef4 <_start@@Base+0xa8cc>
   1ee34:	add	r3, sp, #304	; 0x130
   1ee38:	mov	r2, #0
   1ee3c:	strh	r2, [r3, #-24]!	; 0xffffffe8
   1ee40:	mov	r2, sl
   1ee44:	mov	r1, r0
   1ee48:	mov	r0, r8
   1ee4c:	bl	17958 <_start@@Base+0x3330>
   1ee50:	mov	r9, r0
   1ee54:	cmp	r4, r0
   1ee58:	beq	1ee98 <_start@@Base+0xa870>
   1ee5c:	add	r3, sp, #280	; 0x118
   1ee60:	ldrsh	r3, [r3]
   1ee64:	cmp	r3, #150	; 0x96
   1ee68:	beq	1eecc <_start@@Base+0xa8a4>
   1ee6c:	mov	r3, #2
   1ee70:	mov	r2, r3
   1ee74:	mov	r1, #1
   1ee78:	ldr	r0, [r8]
   1ee7c:	bl	29678 <flatcc_builder_table_add@@Base>
   1ee80:	cmp	r0, #0
   1ee84:	beq	1eedc <_start@@Base+0xa8b4>
   1ee88:	add	r3, sp, #280	; 0x118
   1ee8c:	ldrsh	r3, [r3]
   1ee90:	strh	r3, [r0]
   1ee94:	b	21e30 <_start@@Base+0xd808>
   1ee98:	add	r3, sp, #280	; 0x118
   1ee9c:	str	r3, [sp]
   1eea0:	ldr	r3, [pc, #-372]	; 1ed34 <_start@@Base+0xa70c>
   1eea4:	add	r3, r3, #328	; 0x148
   1eea8:	mov	r2, sl
   1eeac:	mov	r1, r0
   1eeb0:	mov	r0, r8
   1eeb4:	bl	19004 <_start@@Base+0x49dc>
   1eeb8:	cmp	sl, r0
   1eebc:	cmpne	r9, r0
   1eec0:	beq	1eeec <_start@@Base+0xa8c4>
   1eec4:	mov	r9, r0
   1eec8:	b	1ee5c <_start@@Base+0xa834>
   1eecc:	ldr	r3, [r8, #8]
   1eed0:	tst	r3, #2
   1eed4:	beq	21e30 <_start@@Base+0xd808>
   1eed8:	b	1ee6c <_start@@Base+0xa844>
   1eedc:	mov	fp, r8
   1eee0:	mov	r0, r9
   1eee4:	mov	r9, r0
   1eee8:	b	22fdc <_start@@Base+0xe9b4>
   1eeec:	mov	fp, r8
   1eef0:	b	1eee4 <_start@@Base+0xa8bc>
   1eef4:	mov	r2, sl
   1eef8:	mov	r1, r0
   1eefc:	mov	r0, r8
   1ef00:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1ef04:	mov	r9, r0
   1ef08:	b	21e30 <_start@@Base+0xd808>
   1ef0c:	add	r3, pc, #908	; 0x38c
   1ef10:	ldrd	r2, [r3]
   1ef14:	cmp	r1, r3
   1ef18:	cmpeq	r0, r2
   1ef1c:	bhi	1fbc0 <_start@@Base+0xb598>
   1ef20:	add	r3, pc, #896	; 0x380
   1ef24:	ldrd	r2, [r3]
   1ef28:	cmp	r1, r3
   1ef2c:	cmpeq	r0, r2
   1ef30:	bhi	1efd8 <_start@@Base+0xa9b0>
   1ef34:	mov	r4, #0
   1ef38:	add	r3, pc, #880	; 0x370
   1ef3c:	ldrd	r2, [r3]
   1ef40:	cmp	r1, r3
   1ef44:	cmpeq	r4, r2
   1ef48:	beq	1ef64 <_start@@Base+0xa93c>
   1ef4c:	mov	r2, sl
   1ef50:	mov	r1, r9
   1ef54:	mov	r0, r8
   1ef58:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1ef5c:	mov	r9, r0
   1ef60:	b	21e30 <_start@@Base+0xd808>
   1ef64:	mov	r3, #4
   1ef68:	mov	r2, sl
   1ef6c:	mov	r1, r9
   1ef70:	mov	r0, r8
   1ef74:	bl	193e8 <_start@@Base+0x4dc0>
   1ef78:	mov	r1, r0
   1ef7c:	cmp	r0, r9
   1ef80:	beq	1efc4 <_start@@Base+0xa99c>
   1ef84:	add	r3, sp, #296	; 0x128
   1ef88:	mov	r2, sl
   1ef8c:	mov	r0, r8
   1ef90:	bl	2f2b4 <flatcc_json_parser_build_string@@Base>
   1ef94:	mov	r9, r0
   1ef98:	ldr	r3, [sp, #296]	; 0x128
   1ef9c:	cmp	r3, #0
   1efa0:	beq	230e4 <_start@@Base+0xeabc>
   1efa4:	mov	r1, #3
   1efa8:	ldr	r0, [r8]
   1efac:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   1efb0:	cmp	r0, #0
   1efb4:	beq	230ec <_start@@Base+0xeac4>
   1efb8:	ldr	r3, [sp, #296]	; 0x128
   1efbc:	str	r3, [r0]
   1efc0:	b	21e30 <_start@@Base+0xd808>
   1efc4:	mov	r2, sl
   1efc8:	mov	r0, r8
   1efcc:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1efd0:	mov	r9, r0
   1efd4:	b	21e30 <_start@@Base+0xd808>
   1efd8:	add	r3, pc, #728	; 0x2d8
   1efdc:	ldrd	r2, [r3]
   1efe0:	cmp	r1, r3
   1efe4:	cmpeq	r0, r2
   1efe8:	beq	1f020 <_start@@Base+0xa9f8>
   1efec:	mov	r4, #0
   1eff0:	bic	r5, r1, #255	; 0xff
   1eff4:	add	r3, pc, #708	; 0x2c4
   1eff8:	ldrd	r2, [r3]
   1effc:	cmp	r5, r3
   1f000:	cmpeq	r4, r2
   1f004:	beq	1f200 <_start@@Base+0xabd8>
   1f008:	mov	r2, sl
   1f00c:	mov	r1, r9
   1f010:	mov	r0, r8
   1f014:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1f018:	mov	r9, r0
   1f01c:	b	21e30 <_start@@Base+0xd808>
   1f020:	add	r4, r9, #8
   1f024:	mov	r1, sl
   1f028:	mov	r0, r4
   1f02c:	bl	14750 <_start@@Base+0x128>
   1f030:	add	r3, pc, #656	; 0x290
   1f034:	ldrd	r2, [r3]
   1f038:	cmp	r1, r3
   1f03c:	cmpeq	r0, r2
   1f040:	beq	1f05c <_start@@Base+0xaa34>
   1f044:	mov	r2, sl
   1f048:	mov	r1, r4
   1f04c:	mov	r0, r8
   1f050:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1f054:	mov	r9, r0
   1f058:	b	21e30 <_start@@Base+0xd808>
   1f05c:	add	r4, r9, #16
   1f060:	mov	r1, sl
   1f064:	mov	r0, r4
   1f068:	bl	14750 <_start@@Base+0x128>
   1f06c:	and	r0, r0, #-16777216	; 0xff000000
   1f070:	add	r3, pc, #600	; 0x258
   1f074:	ldrd	r2, [r3]
   1f078:	cmp	r1, r3
   1f07c:	cmpeq	r0, r2
   1f080:	beq	1f09c <_start@@Base+0xaa74>
   1f084:	mov	r2, sl
   1f088:	mov	r1, r4
   1f08c:	mov	r0, r8
   1f090:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1f094:	mov	r9, r0
   1f098:	b	21e30 <_start@@Base+0xd808>
   1f09c:	mov	r3, #5
   1f0a0:	mov	r2, sl
   1f0a4:	mov	r1, r4
   1f0a8:	mov	r0, r8
   1f0ac:	bl	193e8 <_start@@Base+0x4dc0>
   1f0b0:	mov	r9, r0
   1f0b4:	cmp	r4, r0
   1f0b8:	beq	1f1e8 <_start@@Base+0xabc0>
   1f0bc:	mov	r1, #0
   1f0c0:	str	r1, [sp, #296]	; 0x128
   1f0c4:	ldr	r0, [r8]
   1f0c8:	bl	27c7c <flatcc_builder_start_table@@Base>
   1f0cc:	cmp	r0, #0
   1f0d0:	bne	1f18c <_start@@Base+0xab64>
   1f0d4:	add	r3, sp, #280	; 0x118
   1f0d8:	mov	r2, sl
   1f0dc:	mov	r1, r9
   1f0e0:	mov	r0, r8
   1f0e4:	bl	17de0 <_start@@Base+0x37b8>
   1f0e8:	mov	r9, r0
   1f0ec:	ldr	r3, [sp, #280]	; 0x118
   1f0f0:	cmp	r3, #0
   1f0f4:	beq	1f180 <_start@@Base+0xab58>
   1f0f8:	mov	r4, #1
   1f0fc:	mov	r6, #5
   1f100:	mov	r5, #0
   1f104:	mov	r1, r0
   1f108:	b	1f13c <_start@@Base+0xab14>
   1f10c:	mov	r2, sl
   1f110:	mov	r0, r8
   1f114:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1f118:	add	r3, sp, #280	; 0x118
   1f11c:	mov	r2, sl
   1f120:	mov	r1, r0
   1f124:	mov	r0, r8
   1f128:	bl	18104 <_start@@Base+0x3adc>
   1f12c:	mov	r1, r0
   1f130:	ldr	r3, [sp, #280]	; 0x118
   1f134:	cmp	r3, #0
   1f138:	beq	1f17c <_start@@Base+0xab54>
   1f13c:	cmp	sl, r1
   1f140:	beq	1f10c <_start@@Base+0xaae4>
   1f144:	ldrb	r3, [r1]
   1f148:	cmp	r3, #34	; 0x22
   1f14c:	addeq	r1, r1, #1
   1f150:	streq	r5, [r8, #12]
   1f154:	beq	1f10c <_start@@Base+0xaae4>
   1f158:	cmp	r3, #46	; 0x2e
   1f15c:	strne	r4, [r8, #12]
   1f160:	bne	1f10c <_start@@Base+0xaae4>
   1f164:	mov	r3, r6
   1f168:	mov	r2, sl
   1f16c:	mov	r0, r8
   1f170:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1f174:	mov	r1, r0
   1f178:	b	1f10c <_start@@Base+0xaae4>
   1f17c:	mov	r9, r0
   1f180:	ldr	r3, [r8, #24]
   1f184:	cmp	r3, #0
   1f188:	beq	1f1d0 <_start@@Base+0xaba8>
   1f18c:	mov	r3, #33	; 0x21
   1f190:	mov	r2, sl
   1f194:	mov	r1, r9
   1f198:	mov	r0, r8
   1f19c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1f1a0:	mov	r9, r0
   1f1a4:	ldr	r3, [sp, #296]	; 0x128
   1f1a8:	cmp	r3, #0
   1f1ac:	beq	230f4 <_start@@Base+0xeacc>
   1f1b0:	mov	r1, #34	; 0x22
   1f1b4:	ldr	r0, [r8]
   1f1b8:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   1f1bc:	cmp	r0, #0
   1f1c0:	beq	230fc <_start@@Base+0xead4>
   1f1c4:	ldr	r3, [sp, #296]	; 0x128
   1f1c8:	str	r3, [r0]
   1f1cc:	b	21e30 <_start@@Base+0xd808>
   1f1d0:	ldr	r0, [r8]
   1f1d4:	bl	286cc <flatcc_builder_end_table@@Base>
   1f1d8:	str	r0, [sp, #296]	; 0x128
   1f1dc:	cmp	r0, #0
   1f1e0:	beq	1f18c <_start@@Base+0xab64>
   1f1e4:	b	1f1a4 <_start@@Base+0xab7c>
   1f1e8:	mov	r2, sl
   1f1ec:	mov	r1, r0
   1f1f0:	mov	r0, r8
   1f1f4:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1f1f8:	mov	r9, r0
   1f1fc:	b	21e30 <_start@@Base+0xd808>
   1f200:	mov	r3, #3
   1f204:	mov	r2, sl
   1f208:	mov	r1, r9
   1f20c:	mov	r0, r8
   1f210:	bl	193e8 <_start@@Base+0x4dc0>
   1f214:	mov	r4, r0
   1f218:	cmp	r0, r9
   1f21c:	beq	1fba8 <_start@@Base+0xb580>
   1f220:	mov	r3, #16
   1f224:	mov	r2, #32
   1f228:	mov	r1, #0
   1f22c:	ldr	r0, [r8]
   1f230:	bl	29678 <flatcc_builder_table_add@@Base>
   1f234:	subs	r7, r0, #0
   1f238:	beq	23070 <_start@@Base+0xea48>
   1f23c:	add	r3, sp, #272	; 0x110
   1f240:	mov	r2, sl
   1f244:	mov	r1, r4
   1f248:	mov	r0, r8
   1f24c:	bl	17de0 <_start@@Base+0x37b8>
   1f250:	mov	r9, r0
   1f254:	mov	r5, #1
   1f258:	mov	fp, #5
   1f25c:	vldr	s18, [pc, #124]	; 1f2e0 <_start@@Base+0xacb8>
   1f260:	ldr	r3, [pc, #124]	; 1f2e4 <_start@@Base+0xacbc>
   1f264:	add	r3, r3, #392	; 0x188
   1f268:	str	r3, [sp, #20]
   1f26c:	vldr	d8, [pc, #100]	; 1f2d8 <_start@@Base+0xacb0>
   1f270:	b	1f560 <_start@@Base+0xaf38>
   1f274:	mov	r3, fp
   1f278:	mov	r2, sl
   1f27c:	mov	r1, r9
   1f280:	mov	r0, r8
   1f284:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1f288:	mov	r9, r0
   1f28c:	b	1f598 <_start@@Base+0xaf70>
   1f290:	ldrb	r2, [r9, #7]
   1f294:	mov	r3, #0
   1f298:	b	1f2f0 <_start@@Base+0xacc8>
   1f29c:	nop			; (mov r0, r0)
   1f2a0:			; <UNDEFINED> instruction: 0xffffffff
   1f2a4:	strbtvc	r7, [r5], #-883	; 0xfffffc8d
   1f2a8:	cdpvs	15, 7, cr5, cr4, cr13, {3}
   1f2ac:	rsbvc	r7, r1, r5, ror #4
   1f2b0:	andeq	r0, r0, r0
   1f2b4:	cdpvs	13, 6, cr6, cr1, cr5, {3}
   1f2b8:	cdpvs	15, 7, cr5, cr4, cr14, {3}
   1f2bc:	rsbvc	r7, r1, r5, ror #4
   1f2c0:	andeq	r0, r0, r0
   1f2c4:	rsbvc	r7, pc, r0, lsl #6
   1f2c8:	rsbvc	r6, r1, r5, ror #6
   1f2cc:	smcvs	54867	; 0xd653
   1f2d0:	strvc	r0, [r0], #-0
   1f2d4:	svcpl	0x00746573
	...
   1f2e4:	andeq	r4, r5, r0, ror r0
   1f2e8:	mov	r2, #0
   1f2ec:	mov	r3, #0
   1f2f0:	ldrb	r0, [r9, #6]
   1f2f4:	mov	ip, #0
   1f2f8:	str	ip, [sp, #132]	; 0x84
   1f2fc:	lsl	r1, r0, #8
   1f300:	str	r1, [sp, #128]	; 0x80
   1f304:	ldrd	r0, [sp, #128]	; 0x80
   1f308:	orr	r0, r0, r2
   1f30c:	orr	r1, r1, r3
   1f310:	mov	r2, r0
   1f314:	mov	r3, r1
   1f318:	ldrb	r0, [r9, #5]
   1f31c:	mov	ip, #0
   1f320:	str	ip, [sp, #116]	; 0x74
   1f324:	lsl	r1, r0, #16
   1f328:	str	r1, [sp, #112]	; 0x70
   1f32c:	ldrd	r0, [sp, #112]	; 0x70
   1f330:	orr	r0, r0, r2
   1f334:	orr	r1, r1, r3
   1f338:	mov	r2, r0
   1f33c:	mov	r3, r1
   1f340:	ldrb	r0, [r9, #4]
   1f344:	mov	ip, #0
   1f348:	str	ip, [sp, #108]	; 0x6c
   1f34c:	lsl	r1, r0, #24
   1f350:	str	r1, [sp, #104]	; 0x68
   1f354:	ldrd	r0, [sp, #104]	; 0x68
   1f358:	orr	r0, r0, r2
   1f35c:	orr	r1, r1, r3
   1f360:	mov	r2, r0
   1f364:	mov	r3, r1
   1f368:	ldrb	r1, [r9, #3]
   1f36c:	str	r1, [sp, #92]	; 0x5c
   1f370:	mov	r1, #0
   1f374:	str	r1, [sp, #88]	; 0x58
   1f378:	ldrd	r0, [sp, #88]	; 0x58
   1f37c:	orr	r0, r0, r2
   1f380:	orr	r1, r1, r3
   1f384:	mov	r2, r0
   1f388:	mov	r3, r1
   1f38c:	ldrb	r0, [r9, #2]
   1f390:	lsl	r1, r0, #8
   1f394:	str	r1, [sp, #84]	; 0x54
   1f398:	mov	r1, #0
   1f39c:	str	r1, [sp, #80]	; 0x50
   1f3a0:	ldrd	r0, [sp, #80]	; 0x50
   1f3a4:	orr	r0, r0, r2
   1f3a8:	orr	r1, r1, r3
   1f3ac:	mov	r2, r0
   1f3b0:	mov	r3, r1
   1f3b4:	ldrb	r0, [r9, #1]
   1f3b8:	lsl	r1, r0, #16
   1f3bc:	str	r1, [sp, #68]	; 0x44
   1f3c0:	mov	r1, #0
   1f3c4:	str	r1, [sp, #64]	; 0x40
   1f3c8:	ldrd	r0, [sp, #64]	; 0x40
   1f3cc:	orr	r0, r0, r2
   1f3d0:	orr	r1, r1, r3
   1f3d4:	mov	r2, r0
   1f3d8:	mov	r3, r1
   1f3dc:	ldrb	r0, [r9]
   1f3e0:	lsl	r1, r0, #24
   1f3e4:	str	r1, [sp, #60]	; 0x3c
   1f3e8:	mov	r1, #0
   1f3ec:	str	r1, [sp, #56]	; 0x38
   1f3f0:	ldrd	r0, [sp, #56]	; 0x38
   1f3f4:	orr	r0, r0, r2
   1f3f8:	orr	r1, r1, r3
   1f3fc:	mov	r2, r0
   1f400:	mov	r3, r1
   1f404:	add	r1, pc, #964	; 0x3c4
   1f408:	ldrd	r0, [r1]
   1f40c:	cmp	r3, r1
   1f410:	cmpeq	r2, r0
   1f414:	bls	1f4a4 <_start@@Base+0xae7c>
   1f418:	mvn	r0, #0
   1f41c:	mvn	r1, #-2013265920	; 0x88000000
   1f420:	cmp	r3, r1
   1f424:	cmpeq	r2, r0
   1f428:	bhi	1f844 <_start@@Base+0xb21c>
   1f42c:	and	r2, r2, #-16777216	; 0xff000000
   1f430:	add	r1, pc, #928	; 0x3a0
   1f434:	ldrd	r0, [r1]
   1f438:	cmp	r3, r1
   1f43c:	cmpeq	r2, r0
   1f440:	beq	1f7f4 <_start@@Base+0xb1cc>
   1f444:	mov	r2, sl
   1f448:	mov	r1, r9
   1f44c:	mov	r0, r8
   1f450:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1f454:	mov	r4, r0
   1f458:	b	1f4e4 <_start@@Base+0xaebc>
   1f45c:	mov	r2, #0
   1f460:	mov	r3, #0
   1f464:	b	1f318 <_start@@Base+0xacf0>
   1f468:	mov	r2, #0
   1f46c:	mov	r3, #0
   1f470:	b	1f340 <_start@@Base+0xad18>
   1f474:	mov	r2, #0
   1f478:	mov	r3, #0
   1f47c:	b	1f368 <_start@@Base+0xad40>
   1f480:	mov	r2, #0
   1f484:	mov	r3, #0
   1f488:	b	1f38c <_start@@Base+0xad64>
   1f48c:	mov	r2, #0
   1f490:	mov	r3, #0
   1f494:	b	1f3b4 <_start@@Base+0xad8c>
   1f498:	mov	r2, #0
   1f49c:	mov	r3, #0
   1f4a0:	b	1f3dc <_start@@Base+0xadb4>
   1f4a4:	and	r2, r2, #-16777216	; 0xff000000
   1f4a8:	add	r1, pc, #816	; 0x330
   1f4ac:	ldrd	r0, [r1]
   1f4b0:	cmp	r3, r1
   1f4b4:	cmpeq	r2, r0
   1f4b8:	beq	1f5d4 <_start@@Base+0xafac>
   1f4bc:	add	r1, pc, #804	; 0x324
   1f4c0:	ldrd	r0, [r1]
   1f4c4:	cmp	r3, r1
   1f4c8:	cmpeq	r2, r0
   1f4cc:	beq	1f70c <_start@@Base+0xb0e4>
   1f4d0:	mov	r2, sl
   1f4d4:	mov	r1, r9
   1f4d8:	mov	r0, r8
   1f4dc:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1f4e0:	mov	r4, r0
   1f4e4:	sub	r3, sl, r4
   1f4e8:	cmp	r3, #1
   1f4ec:	ble	1f500 <_start@@Base+0xaed8>
   1f4f0:	ldrb	r3, [r4]
   1f4f4:	cmp	r3, #32
   1f4f8:	bhi	1f514 <_start@@Base+0xaeec>
   1f4fc:	beq	1faa4 <_start@@Base+0xb47c>
   1f500:	mov	r2, sl
   1f504:	mov	r1, r4
   1f508:	mov	r0, r8
   1f50c:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1f510:	mov	r4, r0
   1f514:	cmp	sl, r4
   1f518:	moveq	r3, #0
   1f51c:	streq	r3, [sp, #272]	; 0x110
   1f520:	moveq	r9, r4
   1f524:	beq	1f560 <_start@@Base+0xaf38>
   1f528:	ldrb	r3, [r4]
   1f52c:	cmp	r3, #44	; 0x2c
   1f530:	beq	1fb04 <_start@@Base+0xb4dc>
   1f534:	mov	r3, #0
   1f538:	str	r3, [sp, #272]	; 0x110
   1f53c:	ldrb	r3, [r4]
   1f540:	cmp	r3, #125	; 0x7d
   1f544:	beq	1fab8 <_start@@Base+0xb490>
   1f548:	mov	r3, #10
   1f54c:	mov	r2, sl
   1f550:	mov	r1, r4
   1f554:	mov	r0, r8
   1f558:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1f55c:	mov	r9, r0
   1f560:	ldr	r3, [sp, #272]	; 0x110
   1f564:	cmp	r3, #0
   1f568:	beq	21e30 <_start@@Base+0xd808>
   1f56c:	cmp	sl, r9
   1f570:	beq	1f598 <_start@@Base+0xaf70>
   1f574:	ldrb	r3, [r9]
   1f578:	cmp	r3, #34	; 0x22
   1f57c:	addeq	r9, r9, #1
   1f580:	moveq	r3, #0
   1f584:	streq	r3, [r8, #12]
   1f588:	beq	1f598 <_start@@Base+0xaf70>
   1f58c:	cmp	r3, #46	; 0x2e
   1f590:	strne	r5, [r8, #12]
   1f594:	beq	1f274 <_start@@Base+0xac4c>
   1f598:	sub	r3, sl, r9
   1f59c:	cmp	r3, #8
   1f5a0:	movcs	r3, #8
   1f5a4:	sub	r3, r3, #1
   1f5a8:	cmp	r3, #7
   1f5ac:	ldrls	pc, [pc, r3, lsl #2]
   1f5b0:	b	1f4d0 <_start@@Base+0xaea8>
   1f5b4:	muleq	r1, r8, r4
   1f5b8:	andeq	pc, r1, ip, lsl #9
   1f5bc:	andeq	pc, r1, r0, lsl #9
   1f5c0:	andeq	pc, r1, r4, ror r4	; <UNPREDICTABLE>
   1f5c4:	andeq	pc, r1, r8, ror #8
   1f5c8:	andeq	pc, r1, ip, asr r4	; <UNPREDICTABLE>
   1f5cc:	andeq	pc, r1, r8, ror #5
   1f5d0:	muleq	r1, r0, r2
   1f5d4:	mov	r3, fp
   1f5d8:	mov	r2, sl
   1f5dc:	mov	r1, r9
   1f5e0:	mov	r0, r8
   1f5e4:	bl	193e8 <_start@@Base+0x4dc0>
   1f5e8:	mov	r6, r0
   1f5ec:	cmp	r0, r9
   1f5f0:	beq	1f6f4 <_start@@Base+0xb0cc>
   1f5f4:	mov	r3, #0
   1f5f8:	strb	r3, [sp, #268]	; 0x10c
   1f5fc:	mov	r0, #0
   1f600:	mov	r1, #0
   1f604:	add	r2, sp, #280	; 0x118
   1f608:	strd	r0, [r2]
   1f60c:	str	r3, [sp, #276]	; 0x114
   1f610:	cmp	sl, r6
   1f614:	beq	1f684 <_start@@Base+0xb05c>
   1f618:	str	r2, [sp]
   1f61c:	add	r3, sp, #276	; 0x114
   1f620:	mov	r2, sl
   1f624:	mov	r1, r6
   1f628:	mov	r0, r8
   1f62c:	bl	2ed84 <flatcc_json_parser_integer@@Base>
   1f630:	mov	r4, r0
   1f634:	cmp	r6, r0
   1f638:	beq	1f684 <_start@@Base+0xb05c>
   1f63c:	add	r3, sp, #280	; 0x118
   1f640:	ldrd	r2, [r3]
   1f644:	ldr	r1, [sp, #276]	; 0x114
   1f648:	cmp	r1, #0
   1f64c:	beq	1f6b8 <_start@@Base+0xb090>
   1f650:	cmp	r3, #0
   1f654:	cmpeq	r2, #128	; 0x80
   1f658:	rsbls	r2, r2, #0
   1f65c:	strbls	r2, [sp, #268]	; 0x10c
   1f660:	bls	1f6c8 <_start@@Base+0xb0a0>
   1f664:	mov	r3, #8
   1f668:	mov	r2, sl
   1f66c:	mov	r1, r0
   1f670:	mov	r0, r8
   1f674:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1f678:	mov	r4, r0
   1f67c:	cmp	r6, r4
   1f680:	bne	1f6c8 <_start@@Base+0xb0a0>
   1f684:	add	r3, sp, #268	; 0x10c
   1f688:	str	r3, [sp]
   1f68c:	ldr	r3, [pc, #348]	; 1f7f0 <_start@@Base+0xb1c8>
   1f690:	add	r3, r3, #340	; 0x154
   1f694:	mov	r2, sl
   1f698:	mov	r1, r6
   1f69c:	mov	r0, r8
   1f6a0:	bl	18a44 <_start@@Base+0x441c>
   1f6a4:	mov	r4, r0
   1f6a8:	cmp	sl, r0
   1f6ac:	cmpne	r6, r0
   1f6b0:	bne	1f6c8 <_start@@Base+0xb0a0>
   1f6b4:	b	1f798 <_start@@Base+0xb170>
   1f6b8:	cmp	r3, #0
   1f6bc:	cmpeq	r2, #127	; 0x7f
   1f6c0:	strbls	r2, [sp, #268]	; 0x10c
   1f6c4:	bhi	1f6d8 <_start@@Base+0xb0b0>
   1f6c8:	add	r3, sp, #268	; 0x10c
   1f6cc:	ldrsb	r3, [r3]
   1f6d0:	strb	r3, [r7, #24]
   1f6d4:	b	1f4e4 <_start@@Base+0xaebc>
   1f6d8:	mov	r3, #7
   1f6dc:	mov	r2, sl
   1f6e0:	mov	r1, r0
   1f6e4:	mov	r0, r8
   1f6e8:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1f6ec:	mov	r4, r0
   1f6f0:	b	1f67c <_start@@Base+0xb054>
   1f6f4:	mov	r2, sl
   1f6f8:	mov	r1, r0
   1f6fc:	mov	r0, r8
   1f700:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1f704:	mov	r4, r0
   1f708:	b	1f4e4 <_start@@Base+0xaebc>
   1f70c:	mov	r3, fp
   1f710:	mov	r2, sl
   1f714:	mov	r1, r9
   1f718:	mov	r0, r8
   1f71c:	bl	193e8 <_start@@Base+0x4dc0>
   1f720:	mov	r6, r0
   1f724:	cmp	r0, r9
   1f728:	beq	1f7b4 <_start@@Base+0xb18c>
   1f72c:	add	r3, sp, #304	; 0x130
   1f730:	vmov	r0, r1, d8
   1f734:	strd	r0, [r3, #-24]!	; 0xffffffe8
   1f738:	mov	r2, sl
   1f73c:	mov	r1, r6
   1f740:	mov	r0, r8
   1f744:	bl	2ddf4 <flatcc_json_parser_double@@Base>
   1f748:	mov	r4, r0
   1f74c:	cmp	r6, r0
   1f750:	beq	1f764 <_start@@Base+0xb13c>
   1f754:	add	r3, sp, #280	; 0x118
   1f758:	ldrd	r2, [r3]
   1f75c:	strd	r2, [r7, #16]
   1f760:	b	1f4e4 <_start@@Base+0xaebc>
   1f764:	add	r3, sp, #280	; 0x118
   1f768:	str	r3, [sp]
   1f76c:	ldr	r3, [pc, #124]	; 1f7f0 <_start@@Base+0xb1c8>
   1f770:	add	r3, r3, #356	; 0x164
   1f774:	mov	r2, sl
   1f778:	mov	r1, r0
   1f77c:	mov	r0, r8
   1f780:	bl	184fc <_start@@Base+0x3ed4>
   1f784:	cmp	sl, r0
   1f788:	cmpne	r4, r0
   1f78c:	movne	r4, r0
   1f790:	bne	1f754 <_start@@Base+0xb12c>
   1f794:	mov	r4, r0
   1f798:	mov	r3, #33	; 0x21
   1f79c:	mov	r2, sl
   1f7a0:	mov	r1, r4
   1f7a4:	mov	r0, r8
   1f7a8:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1f7ac:	mov	r9, r0
   1f7b0:	b	21e30 <_start@@Base+0xd808>
   1f7b4:	mov	r2, sl
   1f7b8:	mov	r1, r0
   1f7bc:	mov	r0, r8
   1f7c0:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1f7c4:	mov	r4, r0
   1f7c8:	b	1f4e4 <_start@@Base+0xaebc>
   1f7cc:	nop			; (mov r0, r0)
   1f7d0:	rscscc	pc, pc, #1020	; 0x3fc
   1f7d4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f7d8:	movwcc	r0, #0
   1f7dc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f7e0:	andcc	r0, r0, #0
   1f7e4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f7e8:	mrscc	r0, (UNDEF: 0)
   1f7ec:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f7f0:	andeq	r4, r5, r0, ror r0
   1f7f4:	mov	r3, fp
   1f7f8:	mov	r2, sl
   1f7fc:	mov	r1, r9
   1f800:	mov	r0, r8
   1f804:	bl	193e8 <_start@@Base+0x4dc0>
   1f808:	cmp	r0, r9
   1f80c:	beq	1f82c <_start@@Base+0xb204>
   1f810:	add	r3, r7, #26
   1f814:	mov	r2, sl
   1f818:	mov	r1, r0
   1f81c:	mov	r0, r8
   1f820:	bl	1a594 <_start@@Base+0x5f6c>
   1f824:	mov	r4, r0
   1f828:	b	1f4e4 <_start@@Base+0xaebc>
   1f82c:	mov	r2, sl
   1f830:	mov	r1, r0
   1f834:	mov	r0, r8
   1f838:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1f83c:	mov	r4, r0
   1f840:	b	1f4e4 <_start@@Base+0xaebc>
   1f844:	mvn	r0, #0
   1f848:	mvn	r1, #-2030043136	; 0x87000000
   1f84c:	cmp	r3, r1
   1f850:	cmpeq	r2, r0
   1f854:	bhi	1f928 <_start@@Base+0xb300>
   1f858:	mov	r2, #0
   1f85c:	and	r3, r3, #-16777216	; 0xff000000
   1f860:	cmp	r3, #2013265920	; 0x78000000
   1f864:	cmpeq	r2, #0
   1f868:	beq	1f884 <_start@@Base+0xb25c>
   1f86c:	mov	r2, sl
   1f870:	mov	r1, r9
   1f874:	mov	r0, r8
   1f878:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1f87c:	mov	r4, r0
   1f880:	b	1f4e4 <_start@@Base+0xaebc>
   1f884:	mov	r3, r5
   1f888:	mov	r2, sl
   1f88c:	mov	r1, r9
   1f890:	mov	r0, r8
   1f894:	bl	193e8 <_start@@Base+0x4dc0>
   1f898:	mov	r6, r0
   1f89c:	cmp	r0, r9
   1f8a0:	beq	1f910 <_start@@Base+0xb2e8>
   1f8a4:	add	r3, sp, #304	; 0x130
   1f8a8:	vmov	r2, s18
   1f8ac:	str	r2, [r3, #-24]!	; 0xffffffe8
   1f8b0:	mov	r2, sl
   1f8b4:	mov	r1, r0
   1f8b8:	mov	r0, r8
   1f8bc:	bl	2ded8 <flatcc_json_parser_float@@Base>
   1f8c0:	mov	r4, r0
   1f8c4:	cmp	r6, r0
   1f8c8:	beq	1f8d8 <_start@@Base+0xb2b0>
   1f8cc:	ldr	r3, [sp, #280]	; 0x118
   1f8d0:	str	r3, [r7]
   1f8d4:	b	1f4e4 <_start@@Base+0xaebc>
   1f8d8:	add	r3, sp, #280	; 0x118
   1f8dc:	str	r3, [sp]
   1f8e0:	ldr	r3, [pc, #-248]	; 1f7f0 <_start@@Base+0xb1c8>
   1f8e4:	add	r3, r3, #368	; 0x170
   1f8e8:	mov	r2, sl
   1f8ec:	mov	r1, r0
   1f8f0:	mov	r0, r8
   1f8f4:	bl	18360 <_start@@Base+0x3d38>
   1f8f8:	cmp	sl, r0
   1f8fc:	cmpne	r4, r0
   1f900:	movne	r4, r0
   1f904:	bne	1f8cc <_start@@Base+0xb2a4>
   1f908:	mov	r4, r0
   1f90c:	b	1f798 <_start@@Base+0xb170>
   1f910:	mov	r2, sl
   1f914:	mov	r1, r0
   1f918:	mov	r0, r8
   1f91c:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1f920:	mov	r4, r0
   1f924:	b	1f4e4 <_start@@Base+0xaebc>
   1f928:	mov	r2, #0
   1f92c:	and	r3, r3, #-16777216	; 0xff000000
   1f930:	cmp	r3, #2046820352	; 0x7a000000
   1f934:	cmpeq	r2, #0
   1f938:	beq	1f960 <_start@@Base+0xb338>
   1f93c:	cmp	r3, #2030043136	; 0x79000000
   1f940:	cmpeq	r2, #0
   1f944:	beq	1fa04 <_start@@Base+0xb3dc>
   1f948:	mov	r2, sl
   1f94c:	mov	r1, r9
   1f950:	mov	r0, r8
   1f954:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1f958:	mov	r4, r0
   1f95c:	b	1f4e4 <_start@@Base+0xaebc>
   1f960:	mov	r3, r5
   1f964:	mov	r2, sl
   1f968:	mov	r1, r9
   1f96c:	mov	r0, r8
   1f970:	bl	193e8 <_start@@Base+0x4dc0>
   1f974:	mov	r6, r0
   1f978:	cmp	r0, r9
   1f97c:	beq	1f9ec <_start@@Base+0xb3c4>
   1f980:	add	r3, sp, #304	; 0x130
   1f984:	vmov	r2, s18
   1f988:	str	r2, [r3, #-24]!	; 0xffffffe8
   1f98c:	mov	r2, sl
   1f990:	mov	r1, r0
   1f994:	mov	r0, r8
   1f998:	bl	2ded8 <flatcc_json_parser_float@@Base>
   1f99c:	mov	r4, r0
   1f9a0:	cmp	r6, r0
   1f9a4:	beq	1f9b4 <_start@@Base+0xb38c>
   1f9a8:	ldr	r3, [sp, #280]	; 0x118
   1f9ac:	str	r3, [r7, #8]
   1f9b0:	b	1f4e4 <_start@@Base+0xaebc>
   1f9b4:	add	r3, sp, #280	; 0x118
   1f9b8:	str	r3, [sp]
   1f9bc:	ldr	r3, [pc, #-468]	; 1f7f0 <_start@@Base+0xb1c8>
   1f9c0:	add	r3, r3, #380	; 0x17c
   1f9c4:	mov	r2, sl
   1f9c8:	mov	r1, r0
   1f9cc:	mov	r0, r8
   1f9d0:	bl	18360 <_start@@Base+0x3d38>
   1f9d4:	cmp	sl, r0
   1f9d8:	cmpne	r4, r0
   1f9dc:	movne	r4, r0
   1f9e0:	bne	1f9a8 <_start@@Base+0xb380>
   1f9e4:	mov	r4, r0
   1f9e8:	b	1f798 <_start@@Base+0xb170>
   1f9ec:	mov	r2, sl
   1f9f0:	mov	r1, r0
   1f9f4:	mov	r0, r8
   1f9f8:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1f9fc:	mov	r4, r0
   1fa00:	b	1f4e4 <_start@@Base+0xaebc>
   1fa04:	mov	r3, r5
   1fa08:	mov	r2, sl
   1fa0c:	mov	r1, r9
   1fa10:	mov	r0, r8
   1fa14:	bl	193e8 <_start@@Base+0x4dc0>
   1fa18:	mov	r6, r0
   1fa1c:	cmp	r0, r9
   1fa20:	beq	1fa8c <_start@@Base+0xb464>
   1fa24:	add	r3, sp, #304	; 0x130
   1fa28:	vmov	r2, s18
   1fa2c:	str	r2, [r3, #-24]!	; 0xffffffe8
   1fa30:	mov	r2, sl
   1fa34:	mov	r1, r0
   1fa38:	mov	r0, r8
   1fa3c:	bl	2ded8 <flatcc_json_parser_float@@Base>
   1fa40:	mov	r4, r0
   1fa44:	cmp	r6, r0
   1fa48:	beq	1fa58 <_start@@Base+0xb430>
   1fa4c:	ldr	r3, [sp, #280]	; 0x118
   1fa50:	str	r3, [r7, #4]
   1fa54:	b	1f4e4 <_start@@Base+0xaebc>
   1fa58:	add	r3, sp, #280	; 0x118
   1fa5c:	str	r3, [sp]
   1fa60:	ldr	r3, [sp, #20]
   1fa64:	mov	r2, sl
   1fa68:	mov	r1, r0
   1fa6c:	mov	r0, r8
   1fa70:	bl	18360 <_start@@Base+0x3d38>
   1fa74:	cmp	sl, r0
   1fa78:	cmpne	r4, r0
   1fa7c:	movne	r4, r0
   1fa80:	bne	1fa4c <_start@@Base+0xb424>
   1fa84:	mov	r4, r0
   1fa88:	b	1f798 <_start@@Base+0xb170>
   1fa8c:	mov	r2, sl
   1fa90:	mov	r1, r0
   1fa94:	mov	r0, r8
   1fa98:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1fa9c:	mov	r4, r0
   1faa0:	b	1f4e4 <_start@@Base+0xaebc>
   1faa4:	ldrb	r3, [r4, #1]
   1faa8:	cmp	r3, #32
   1faac:	addhi	r4, r4, #1
   1fab0:	bls	1f500 <_start@@Base+0xaed8>
   1fab4:	b	1f514 <_start@@Base+0xaeec>
   1fab8:	add	r9, r4, #1
   1fabc:	sub	r3, sl, r9
   1fac0:	cmp	r3, #1
   1fac4:	ble	1fad8 <_start@@Base+0xb4b0>
   1fac8:	ldrb	r3, [r4, #1]
   1facc:	cmp	r3, #32
   1fad0:	bhi	1f560 <_start@@Base+0xaf38>
   1fad4:	beq	1faf0 <_start@@Base+0xb4c8>
   1fad8:	mov	r2, sl
   1fadc:	mov	r1, r9
   1fae0:	mov	r0, r8
   1fae4:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1fae8:	mov	r9, r0
   1faec:	b	1f560 <_start@@Base+0xaf38>
   1faf0:	ldrb	r3, [r4, #2]
   1faf4:	cmp	r3, #32
   1faf8:	addhi	r9, r4, #2
   1fafc:	bls	1fad8 <_start@@Base+0xb4b0>
   1fb00:	b	1f560 <_start@@Base+0xaf38>
   1fb04:	add	r9, r4, #1
   1fb08:	sub	r3, sl, r9
   1fb0c:	cmp	r3, #1
   1fb10:	ble	1fb24 <_start@@Base+0xb4fc>
   1fb14:	ldrb	r3, [r4, #1]
   1fb18:	cmp	r3, #32
   1fb1c:	bhi	1fb38 <_start@@Base+0xb510>
   1fb20:	beq	1fb70 <_start@@Base+0xb548>
   1fb24:	mov	r2, sl
   1fb28:	mov	r1, r9
   1fb2c:	mov	r0, r8
   1fb30:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   1fb34:	mov	r9, r0
   1fb38:	cmp	sl, r9
   1fb3c:	beq	1fb84 <_start@@Base+0xb55c>
   1fb40:	ldrb	r3, [r9]
   1fb44:	cmp	r3, #125	; 0x7d
   1fb48:	strne	r5, [sp, #272]	; 0x110
   1fb4c:	bne	1f560 <_start@@Base+0xaf38>
   1fb50:	mov	r3, #0
   1fb54:	str	r3, [sp, #272]	; 0x110
   1fb58:	mov	r2, sl
   1fb5c:	add	r1, r9, #1
   1fb60:	mov	r0, r8
   1fb64:	bl	17d9c <_start@@Base+0x3774>
   1fb68:	mov	r9, r0
   1fb6c:	b	1f560 <_start@@Base+0xaf38>
   1fb70:	ldrb	r3, [r4, #2]
   1fb74:	cmp	r3, #32
   1fb78:	addhi	r9, r4, #2
   1fb7c:	bls	1fb24 <_start@@Base+0xb4fc>
   1fb80:	b	1fb38 <_start@@Base+0xb510>
   1fb84:	mov	r3, #0
   1fb88:	str	r3, [sp, #272]	; 0x110
   1fb8c:	mov	r3, #10
   1fb90:	mov	r2, sl
   1fb94:	mov	r1, r9
   1fb98:	mov	r0, r8
   1fb9c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   1fba0:	mov	r9, r0
   1fba4:	b	1f560 <_start@@Base+0xaf38>
   1fba8:	mov	r2, sl
   1fbac:	mov	r1, r0
   1fbb0:	mov	r0, r8
   1fbb4:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1fbb8:	mov	r9, r0
   1fbbc:	b	21e30 <_start@@Base+0xd808>
   1fbc0:	and	r6, r0, #-16777216	; 0xff000000
   1fbc4:	mov	r7, r1
   1fbc8:	add	r3, pc, #928	; 0x3a0
   1fbcc:	ldrd	r2, [r3]
   1fbd0:	cmp	r1, r3
   1fbd4:	cmpeq	r6, r2
   1fbd8:	beq	1fc34 <_start@@Base+0xb60c>
   1fbdc:	mov	r0, #0
   1fbe0:	add	r3, pc, #912	; 0x390
   1fbe4:	ldrd	r2, [r3]
   1fbe8:	cmp	r1, r3
   1fbec:	cmpeq	r0, r2
   1fbf0:	beq	1fd14 <_start@@Base+0xb6ec>
   1fbf4:	add	r3, pc, #900	; 0x384
   1fbf8:	ldrd	r2, [r3]
   1fbfc:	cmp	r7, r3
   1fc00:	cmpeq	r6, r2
   1fc04:	beq	1fd64 <_start@@Base+0xb73c>
   1fc08:	add	r3, pc, #888	; 0x378
   1fc0c:	ldrd	r2, [r3]
   1fc10:	cmp	r5, r3
   1fc14:	cmpeq	r4, r2
   1fc18:	beq	1fe44 <_start@@Base+0xb81c>
   1fc1c:	mov	r2, sl
   1fc20:	mov	r1, r9
   1fc24:	mov	r0, r8
   1fc28:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1fc2c:	mov	r9, r0
   1fc30:	b	21e30 <_start@@Base+0xd808>
   1fc34:	mov	r3, #5
   1fc38:	mov	r2, sl
   1fc3c:	mov	r1, r9
   1fc40:	mov	r0, r8
   1fc44:	bl	193e8 <_start@@Base+0x4dc0>
   1fc48:	mov	r6, r0
   1fc4c:	cmp	r0, r9
   1fc50:	beq	1fc08 <_start@@Base+0xb5e0>
   1fc54:	mvn	r3, #-1073741824	; 0xc0000000
   1fc58:	mov	r2, #2
   1fc5c:	mov	r1, #4
   1fc60:	ldr	r0, [r8]
   1fc64:	bl	279cc <flatcc_builder_start_vector@@Base>
   1fc68:	cmp	r0, #0
   1fc6c:	bne	2307c <_start@@Base+0xea54>
   1fc70:	add	r3, sp, #300	; 0x12c
   1fc74:	mov	r2, sl
   1fc78:	mov	r1, r6
   1fc7c:	mov	r0, r8
   1fc80:	bl	1e5d0 <_start@@Base+0x9fa8>
   1fc84:	mov	r9, r0
   1fc88:	ldr	r3, [sp, #300]	; 0x12c
   1fc8c:	cmp	r3, #0
   1fc90:	beq	1fce0 <_start@@Base+0xb6b8>
   1fc94:	mov	r4, #1
   1fc98:	mov	r1, r4
   1fc9c:	ldr	r0, [r8]
   1fca0:	bl	271c4 <flatcc_builder_extend_vector@@Base>
   1fca4:	subs	r3, r0, #0
   1fca8:	beq	23104 <_start@@Base+0xeadc>
   1fcac:	mov	r2, sl
   1fcb0:	mov	r1, r9
   1fcb4:	mov	r0, r8
   1fcb8:	bl	1a594 <_start@@Base+0x5f6c>
   1fcbc:	add	r3, sp, #300	; 0x12c
   1fcc0:	mov	r2, sl
   1fcc4:	mov	r1, r0
   1fcc8:	mov	r0, r8
   1fccc:	bl	17fe8 <_start@@Base+0x39c0>
   1fcd0:	mov	r9, r0
   1fcd4:	ldr	r3, [sp, #300]	; 0x12c
   1fcd8:	cmp	r3, #0
   1fcdc:	bne	1fc98 <_start@@Base+0xb670>
   1fce0:	ldr	r0, [r8]
   1fce4:	bl	289dc <flatcc_builder_end_vector@@Base>
   1fce8:	str	r0, [sp, #296]	; 0x128
   1fcec:	cmp	r0, #0
   1fcf0:	beq	2310c <_start@@Base+0xeae4>
   1fcf4:	mov	r1, #9
   1fcf8:	ldr	r0, [r8]
   1fcfc:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   1fd00:	cmp	r0, #0
   1fd04:	beq	23114 <_start@@Base+0xeaec>
   1fd08:	ldr	r3, [sp, #296]	; 0x128
   1fd0c:	str	r3, [r0]
   1fd10:	b	21e30 <_start@@Base+0xd808>
   1fd14:	mov	r3, #4
   1fd18:	mov	r2, sl
   1fd1c:	mov	r1, r9
   1fd20:	mov	r0, r8
   1fd24:	bl	193e8 <_start@@Base+0x4dc0>
   1fd28:	cmp	r0, r9
   1fd2c:	beq	1fbf4 <_start@@Base+0xb5cc>
   1fd30:	ldr	r3, [pc, #640]	; 1ffb8 <_start@@Base+0xb990>
   1fd34:	str	r3, [sp, #8]
   1fd38:	ldr	r3, [sp, #292]	; 0x124
   1fd3c:	str	r3, [sp, #4]
   1fd40:	mov	r3, #8
   1fd44:	str	r3, [sp]
   1fd48:	mov	r3, #0
   1fd4c:	mov	r2, sl
   1fd50:	mov	r1, r0
   1fd54:	mov	r0, r8
   1fd58:	bl	2f510 <flatcc_json_parser_union@@Base>
   1fd5c:	mov	r9, r0
   1fd60:	b	21e30 <_start@@Base+0xd808>
   1fd64:	mov	r3, #5
   1fd68:	mov	r2, sl
   1fd6c:	mov	r1, r9
   1fd70:	mov	r0, r8
   1fd74:	bl	193e8 <_start@@Base+0x4dc0>
   1fd78:	mov	r6, r0
   1fd7c:	cmp	r0, r9
   1fd80:	beq	1fc08 <_start@@Base+0xb5e0>
   1fd84:	mvn	r3, #-1073741824	; 0xc0000000
   1fd88:	mov	r2, #2
   1fd8c:	mov	r1, #4
   1fd90:	ldr	r0, [r8]
   1fd94:	bl	279cc <flatcc_builder_start_vector@@Base>
   1fd98:	cmp	r0, #0
   1fd9c:	bne	23088 <_start@@Base+0xea60>
   1fda0:	add	r3, sp, #300	; 0x12c
   1fda4:	mov	r2, sl
   1fda8:	mov	r1, r6
   1fdac:	mov	r0, r8
   1fdb0:	bl	1e5d0 <_start@@Base+0x9fa8>
   1fdb4:	mov	r9, r0
   1fdb8:	ldr	r3, [sp, #300]	; 0x12c
   1fdbc:	cmp	r3, #0
   1fdc0:	beq	1fe10 <_start@@Base+0xb7e8>
   1fdc4:	mov	r4, #1
   1fdc8:	mov	r1, r4
   1fdcc:	ldr	r0, [r8]
   1fdd0:	bl	271c4 <flatcc_builder_extend_vector@@Base>
   1fdd4:	subs	r3, r0, #0
   1fdd8:	beq	2311c <_start@@Base+0xeaf4>
   1fddc:	mov	r2, sl
   1fde0:	mov	r1, r9
   1fde4:	mov	r0, r8
   1fde8:	bl	1a594 <_start@@Base+0x5f6c>
   1fdec:	add	r3, sp, #300	; 0x12c
   1fdf0:	mov	r2, sl
   1fdf4:	mov	r1, r0
   1fdf8:	mov	r0, r8
   1fdfc:	bl	17fe8 <_start@@Base+0x39c0>
   1fe00:	mov	r9, r0
   1fe04:	ldr	r3, [sp, #300]	; 0x12c
   1fe08:	cmp	r3, #0
   1fe0c:	bne	1fdc8 <_start@@Base+0xb7a0>
   1fe10:	ldr	r0, [r8]
   1fe14:	bl	289dc <flatcc_builder_end_vector@@Base>
   1fe18:	str	r0, [sp, #296]	; 0x128
   1fe1c:	cmp	r0, #0
   1fe20:	beq	23124 <_start@@Base+0xeafc>
   1fe24:	mov	r1, #31
   1fe28:	ldr	r0, [r8]
   1fe2c:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   1fe30:	cmp	r0, #0
   1fe34:	beq	2312c <_start@@Base+0xeb04>
   1fe38:	ldr	r3, [sp, #296]	; 0x128
   1fe3c:	str	r3, [r0]
   1fe40:	b	21e30 <_start@@Base+0xd808>
   1fe44:	add	r9, r9, #8
   1fe48:	mov	r1, sl
   1fe4c:	mov	r0, r9
   1fe50:	bl	14750 <_start@@Base+0x128>
   1fe54:	mov	r0, #0
   1fe58:	and	r1, r1, #-16777216	; 0xff000000
   1fe5c:	cmp	r1, #1694498816	; 0x65000000
   1fe60:	cmpeq	r0, #0
   1fe64:	beq	1fe80 <_start@@Base+0xb858>
   1fe68:	mov	r2, sl
   1fe6c:	mov	r1, r9
   1fe70:	mov	r0, r8
   1fe74:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1fe78:	mov	r9, r0
   1fe7c:	b	21e30 <_start@@Base+0xd808>
   1fe80:	mov	r3, #1
   1fe84:	mov	r2, sl
   1fe88:	mov	r1, r9
   1fe8c:	mov	r0, r8
   1fe90:	bl	193e8 <_start@@Base+0x4dc0>
   1fe94:	mov	r1, r0
   1fe98:	cmp	r9, r0
   1fe9c:	beq	1fedc <_start@@Base+0xb8b4>
   1fea0:	ldr	r3, [pc, #272]	; 1ffb8 <_start@@Base+0xb990>
   1fea4:	str	r3, [sp, #12]
   1fea8:	ldr	r3, [pc, #268]	; 1ffbc <_start@@Base+0xb994>
   1feac:	add	r3, r3, #404	; 0x194
   1feb0:	str	r3, [sp, #8]
   1feb4:	ldr	r3, [sp, #292]	; 0x124
   1feb8:	str	r3, [sp, #4]
   1febc:	mov	r3, #8
   1fec0:	str	r3, [sp]
   1fec4:	mov	r3, #0
   1fec8:	mov	r2, sl
   1fecc:	mov	r0, r8
   1fed0:	bl	2f664 <flatcc_json_parser_union_type@@Base>
   1fed4:	mov	r9, r0
   1fed8:	b	21e30 <_start@@Base+0xd808>
   1fedc:	mov	r2, sl
   1fee0:	mov	r0, r8
   1fee4:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1fee8:	mov	r9, r0
   1feec:	b	21e30 <_start@@Base+0xd808>
   1fef0:	add	r3, pc, #152	; 0x98
   1fef4:	ldrd	r2, [r3]
   1fef8:	cmp	r1, r3
   1fefc:	cmpeq	r0, r2
   1ff00:	bhi	21de4 <_start@@Base+0xd7bc>
   1ff04:	add	r3, pc, #140	; 0x8c
   1ff08:	ldrd	r2, [r3]
   1ff0c:	cmp	r1, r3
   1ff10:	cmpeq	r0, r2
   1ff14:	beq	1ffc0 <_start@@Base+0xb998>
   1ff18:	add	r3, pc, #128	; 0x80
   1ff1c:	ldrd	r2, [r3]
   1ff20:	cmp	r1, r3
   1ff24:	cmpeq	r0, r2
   1ff28:	bhi	21438 <_start@@Base+0xce10>
   1ff2c:	add	r3, pc, #116	; 0x74
   1ff30:	ldrd	r2, [r3]
   1ff34:	cmp	r1, r3
   1ff38:	cmpeq	r0, r2
   1ff3c:	beq	20dcc <_start@@Base+0xc7a4>
   1ff40:	add	r3, pc, #104	; 0x68
   1ff44:	ldrd	r2, [r3]
   1ff48:	cmp	r1, r3
   1ff4c:	cmpeq	r0, r2
   1ff50:	beq	21354 <_start@@Base+0xcd2c>
   1ff54:	mov	r2, sl
   1ff58:	mov	r1, r9
   1ff5c:	mov	r0, r8
   1ff60:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   1ff64:	mov	r9, r0
   1ff68:	b	21e30 <_start@@Base+0xd808>
   1ff6c:	nop			; (mov r0, r0)
   1ff70:	strcc	r0, [r0], #-0
   1ff74:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1ff78:	andeq	r0, r0, r0
   1ff7c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1ff80:	strcc	r0, [r0, #-0]
   1ff84:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1ff88:	svcpl	0x00747970
   1ff8c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1ff90:	shsub8vs	pc, r2, pc	; <UNPREDICTABLE>
   1ff94:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1ff98:	cmnvs	r2, r1, ror #4
   1ff9c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1ffa0:	strbvs	r7, [sp, #-115]!	; 0xffffff8d
   1ffa4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1ffa8:	rsbvs	r7, r1, #-1811939327	; 0x94000001
   1ffac:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1ffb0:	rsbvs	r6, pc, #108, 30	; 0x1b0
   1ffb4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1ffb8:	muleq	r2, r0, r2
   1ffbc:	andeq	r4, r5, r0, ror r0
   1ffc0:	add	r4, r9, #8
   1ffc4:	mov	r1, sl
   1ffc8:	mov	r0, r4
   1ffcc:	bl	14750 <_start@@Base+0x128>
   1ffd0:	add	r3, pc, #616	; 0x268
   1ffd4:	ldrd	r2, [r3]
   1ffd8:	cmp	r1, r3
   1ffdc:	cmpeq	r0, r2
   1ffe0:	bhi	209b8 <_start@@Base+0xc390>
   1ffe4:	add	r3, pc, #604	; 0x25c
   1ffe8:	ldrd	r2, [r3]
   1ffec:	cmp	r1, r3
   1fff0:	cmpeq	r0, r2
   1fff4:	beq	2004c <_start@@Base+0xba24>
   1fff8:	add	r3, pc, #592	; 0x250
   1fffc:	ldrd	r2, [r3]
   20000:	cmp	r1, r3
   20004:	cmpeq	r0, r2
   20008:	bne	209a0 <_start@@Base+0xc378>
   2000c:	add	r4, r9, #16
   20010:	mov	r1, sl
   20014:	mov	r0, r4
   20018:	bl	14750 <_start@@Base+0x128>
   2001c:	bic	r0, r0, #255	; 0xff
   20020:	add	r3, pc, #560	; 0x230
   20024:	ldrd	r2, [r3]
   20028:	cmp	r1, r3
   2002c:	cmpeq	r0, r2
   20030:	beq	20188 <_start@@Base+0xbb60>
   20034:	mov	r2, sl
   20038:	mov	r1, r4
   2003c:	mov	r0, r8
   20040:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   20044:	mov	r9, r0
   20048:	b	21e30 <_start@@Base+0xd808>
   2004c:	mov	r3, #8
   20050:	mov	r2, sl
   20054:	mov	r1, r4
   20058:	mov	r0, r8
   2005c:	bl	193e8 <_start@@Base+0x4dc0>
   20060:	mov	r9, r0
   20064:	cmp	r4, r0
   20068:	beq	2099c <_start@@Base+0xc374>
   2006c:	mvn	r3, #0
   20070:	mov	r2, #1
   20074:	mov	r1, r2
   20078:	ldr	r0, [r8]
   2007c:	bl	279cc <flatcc_builder_start_vector@@Base>
   20080:	cmp	r0, #0
   20084:	bne	23134 <_start@@Base+0xeb0c>
   20088:	add	r3, sp, #300	; 0x12c
   2008c:	mov	r2, sl
   20090:	mov	r1, r9
   20094:	mov	r0, r8
   20098:	bl	1e5d0 <_start@@Base+0x9fa8>
   2009c:	mov	r9, r0
   200a0:	ldr	r3, [sp, #300]	; 0x12c
   200a4:	cmp	r3, #0
   200a8:	beq	20154 <_start@@Base+0xbb2c>
   200ac:	mov	r6, #0
   200b0:	mov	r7, #1
   200b4:	add	r5, sp, #280	; 0x118
   200b8:	ldr	r3, [pc, #416]	; 20260 <_start@@Base+0xbc38>
   200bc:	add	fp, r3, #420	; 0x1a4
   200c0:	b	200f0 <_start@@Base+0xbac8>
   200c4:	ldrb	r3, [sp, #280]	; 0x118
   200c8:	strb	r3, [r4]
   200cc:	add	r3, sp, #300	; 0x12c
   200d0:	mov	r2, sl
   200d4:	mov	r1, r0
   200d8:	mov	r0, r8
   200dc:	bl	17fe8 <_start@@Base+0x39c0>
   200e0:	mov	r9, r0
   200e4:	ldr	r3, [sp, #300]	; 0x12c
   200e8:	cmp	r3, #0
   200ec:	beq	20154 <_start@@Base+0xbb2c>
   200f0:	strb	r6, [sp, #280]	; 0x118
   200f4:	mov	r1, r7
   200f8:	ldr	r0, [r8]
   200fc:	bl	271c4 <flatcc_builder_extend_vector@@Base>
   20100:	subs	r4, r0, #0
   20104:	beq	2313c <_start@@Base+0xeb14>
   20108:	mov	r3, r5
   2010c:	mov	r2, sl
   20110:	mov	r1, r9
   20114:	mov	r0, r8
   20118:	bl	18220 <_start@@Base+0x3bf8>
   2011c:	cmp	r0, r9
   20120:	bne	200c4 <_start@@Base+0xba9c>
   20124:	str	r5, [sp]
   20128:	mov	r3, fp
   2012c:	mov	r2, sl
   20130:	mov	r1, r9
   20134:	mov	r0, r8
   20138:	bl	186a0 <_start@@Base+0x4078>
   2013c:	cmp	sl, r0
   20140:	cmpne	r0, r9
   20144:	bne	200c4 <_start@@Base+0xba9c>
   20148:	mov	fp, r8
   2014c:	mov	r9, r0
   20150:	b	22fdc <_start@@Base+0xe9b4>
   20154:	ldr	r0, [r8]
   20158:	bl	289dc <flatcc_builder_end_vector@@Base>
   2015c:	str	r0, [sp, #296]	; 0x128
   20160:	cmp	r0, #0
   20164:	beq	23144 <_start@@Base+0xeb1c>
   20168:	mov	r1, #24
   2016c:	ldr	r0, [r8]
   20170:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   20174:	cmp	r0, #0
   20178:	beq	2314c <_start@@Base+0xeb24>
   2017c:	ldr	r3, [sp, #296]	; 0x128
   20180:	str	r3, [r0]
   20184:	b	21e30 <_start@@Base+0xd808>
   20188:	mov	r3, #7
   2018c:	mov	r2, sl
   20190:	mov	r1, r4
   20194:	mov	r0, r8
   20198:	bl	193e8 <_start@@Base+0x4dc0>
   2019c:	mov	r9, r0
   201a0:	cmp	r4, r0
   201a4:	beq	20984 <_start@@Base+0xc35c>
   201a8:	mvn	r3, #-536870912	; 0xe0000000
   201ac:	mov	r2, #4
   201b0:	mov	r1, #8
   201b4:	ldr	r0, [r8]
   201b8:	bl	279cc <flatcc_builder_start_vector@@Base>
   201bc:	cmp	r0, #0
   201c0:	bne	23154 <_start@@Base+0xeb2c>
   201c4:	add	r3, sp, #300	; 0x12c
   201c8:	mov	r2, sl
   201cc:	mov	r1, r9
   201d0:	mov	r0, r8
   201d4:	bl	1e5d0 <_start@@Base+0x9fa8>
   201d8:	mov	r9, r0
   201dc:	ldr	r3, [sp, #300]	; 0x12c
   201e0:	cmp	r3, #0
   201e4:	beq	20950 <_start@@Base+0xc328>
   201e8:	mov	fp, #1
   201ec:	ldr	r3, [pc, #108]	; 20260 <_start@@Base+0xbc38>
   201f0:	add	r3, r3, #444	; 0x1bc
   201f4:	str	r3, [sp, #252]	; 0xfc
   201f8:	str	r8, [sp, #20]
   201fc:	mov	r4, r0
   20200:	ldrd	r8, [sp, #120]	; 0x78
   20204:	b	207f4 <_start@@Base+0xc1cc>
   20208:	add	r4, r4, #1
   2020c:	ldr	r3, [sp, #20]
   20210:	str	r5, [r3, #12]
   20214:	b	20454 <_start@@Base+0xbe2c>
   20218:	mov	r3, #5
   2021c:	mov	r2, sl
   20220:	mov	r1, r4
   20224:	ldr	r0, [sp, #20]
   20228:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2022c:	mov	r4, r0
   20230:	b	20454 <_start@@Base+0xbe2c>
   20234:	ldrb	r0, [r4, #7]
   20238:	mov	r1, #0
   2023c:	b	20274 <_start@@Base+0xbc4c>
   20240:	ldrbtvc	r6, [r2], #-2413	; 0xfffff693
   20244:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   20248:	svcvs	0x006f6c73
   2024c:	stmdbvc	pc!, {r1, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   20250:	svcvs	0x00727465
   20254:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   20258:	strbvc	r7, [r3, #-1024]!	; 0xfffffc00
   2025c:	ldrbtvs	r7, [r3], #-1138	; 0xfffffb8e
   20260:	andeq	r4, r5, r0, ror r0
   20264:			; <UNDEFINED> instruction: 0xffff0000
   20268:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   2026c:	mov	r0, #0
   20270:	mov	r1, #0
   20274:	ldrb	r2, [r4, #6]
   20278:	mov	lr, #0
   2027c:	str	lr, [sp, #100]	; 0x64
   20280:	lsl	r3, r2, #8
   20284:	str	r3, [sp, #96]	; 0x60
   20288:	ldrd	r2, [sp, #96]	; 0x60
   2028c:	orr	r2, r2, r0
   20290:	orr	r3, r3, r1
   20294:	ldrb	r0, [r4, #5]
   20298:	mov	lr, #0
   2029c:	str	lr, [sp, #76]	; 0x4c
   202a0:	lsl	r1, r0, #16
   202a4:	str	r1, [sp, #72]	; 0x48
   202a8:	ldrd	r0, [sp, #72]	; 0x48
   202ac:	orr	r0, r0, r2
   202b0:	orr	r1, r1, r3
   202b4:	mov	r2, r0
   202b8:	mov	r3, r1
   202bc:	ldrb	r0, [r4, #4]
   202c0:	mov	lr, #0
   202c4:	str	lr, [sp, #52]	; 0x34
   202c8:	lsl	r1, r0, #24
   202cc:	str	r1, [sp, #48]	; 0x30
   202d0:	ldrd	r0, [sp, #48]	; 0x30
   202d4:	orr	r0, r0, r2
   202d8:	orr	r1, r1, r3
   202dc:	mov	r2, r0
   202e0:	mov	r3, r1
   202e4:	ldrb	r1, [r4, #3]
   202e8:	str	r1, [sp, #44]	; 0x2c
   202ec:	mov	r1, #0
   202f0:	str	r1, [sp, #40]	; 0x28
   202f4:	ldrd	r0, [sp, #40]	; 0x28
   202f8:	orr	r0, r0, r2
   202fc:	orr	r1, r1, r3
   20300:	mov	r2, r0
   20304:	mov	r3, r1
   20308:	ldrb	r0, [r4, #2]
   2030c:	lsl	r1, r0, #8
   20310:	str	r1, [sp, #36]	; 0x24
   20314:	mov	r1, #0
   20318:	str	r1, [sp, #32]
   2031c:	ldrd	r0, [sp, #32]
   20320:	orr	r0, r0, r2
   20324:	orr	r1, r1, r3
   20328:	mov	r2, r0
   2032c:	mov	r3, r1
   20330:	ldrb	r0, [r4, #1]
   20334:	lsl	r1, r0, #16
   20338:	str	r1, [sp, #28]
   2033c:	mov	r1, #0
   20340:	str	r1, [sp, #24]
   20344:	ldrd	r0, [sp, #24]
   20348:	orr	r0, r0, r2
   2034c:	orr	r1, r1, r3
   20350:	mov	r2, r0
   20354:	mov	r3, r1
   20358:	ldrb	r0, [r4]
   2035c:	lsl	r9, r0, #24
   20360:	mov	r8, #0
   20364:	orr	r2, r2, r8
   20368:	orr	r3, r3, r9
   2036c:	mov	r0, #0
   20370:	ldr	r1, [pc, #-276]	; 20264 <_start@@Base+0xbc3c>
   20374:	and	r0, r0, r2
   20378:	and	r1, r1, r3
   2037c:	mov	r6, #0
   20380:	ldr	r7, [pc, #-288]	; 20268 <_start@@Base+0xbc40>
   20384:	cmp	r1, r7
   20388:	cmpeq	r0, r6
   2038c:	beq	204dc <_start@@Base+0xbeb4>
   20390:	add	r1, pc, #968	; 0x3c8
   20394:	ldrd	r0, [r1]
   20398:	cmp	r3, r1
   2039c:	cmpeq	r2, r0
   203a0:	beq	20600 <_start@@Base+0xbfd8>
   203a4:	mov	r2, sl
   203a8:	mov	r1, r4
   203ac:	ldr	r0, [sp, #20]
   203b0:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   203b4:	sub	r3, sl, r0
   203b8:	cmp	r3, #1
   203bc:	ble	203d0 <_start@@Base+0xbda8>
   203c0:	ldrb	r3, [r0]
   203c4:	cmp	r3, #32
   203c8:	bhi	203e0 <_start@@Base+0xbdb8>
   203cc:	beq	20848 <_start@@Base+0xc220>
   203d0:	mov	r2, sl
   203d4:	mov	r1, r0
   203d8:	ldr	r0, [sp, #20]
   203dc:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   203e0:	cmp	sl, r0
   203e4:	streq	r5, [sp, #268]	; 0x10c
   203e8:	moveq	r4, r0
   203ec:	beq	20424 <_start@@Base+0xbdfc>
   203f0:	ldrb	r3, [r0]
   203f4:	cmp	r3, #44	; 0x2c
   203f8:	beq	208a8 <_start@@Base+0xc280>
   203fc:	str	r5, [sp, #268]	; 0x10c
   20400:	ldrb	r3, [r0]
   20404:	cmp	r3, #125	; 0x7d
   20408:	beq	2085c <_start@@Base+0xc234>
   2040c:	mov	r3, #10
   20410:	mov	r2, sl
   20414:	mov	r1, r0
   20418:	ldr	r0, [sp, #20]
   2041c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   20420:	mov	r4, r0
   20424:	ldr	r3, [sp, #268]	; 0x10c
   20428:	cmp	r3, #0
   2042c:	beq	207d0 <_start@@Base+0xc1a8>
   20430:	cmp	sl, r4
   20434:	beq	20454 <_start@@Base+0xbe2c>
   20438:	ldrb	r3, [r4]
   2043c:	cmp	r3, #34	; 0x22
   20440:	beq	20208 <_start@@Base+0xbbe0>
   20444:	cmp	r3, #46	; 0x2e
   20448:	ldrne	r3, [sp, #20]
   2044c:	strne	fp, [r3, #12]
   20450:	beq	20218 <_start@@Base+0xbbf0>
   20454:	sub	ip, sl, r4
   20458:	cmp	ip, #8
   2045c:	movcc	r3, ip
   20460:	movcs	r3, #8
   20464:	sub	r3, r3, #1
   20468:	cmp	r3, #7
   2046c:	ldrls	pc, [pc, r3, lsl #2]
   20470:	b	203a4 <_start@@Base+0xbd7c>
   20474:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20478:	andeq	r0, r2, r4, asr #9
   2047c:			; <UNDEFINED> instruction: 0x000204b8
   20480:	andeq	r0, r2, ip, lsr #9
   20484:	andeq	r0, r2, r0, lsr #9
   20488:	muleq	r2, r4, r4
   2048c:	andeq	r0, r2, ip, ror #4
   20490:	andeq	r0, r2, r4, lsr r2
   20494:	mov	r2, #0
   20498:	mov	r3, #0
   2049c:	b	20294 <_start@@Base+0xbc6c>
   204a0:	mov	r2, #0
   204a4:	mov	r3, #0
   204a8:	b	202bc <_start@@Base+0xbc94>
   204ac:	mov	r2, #0
   204b0:	mov	r3, #0
   204b4:	b	202e4 <_start@@Base+0xbcbc>
   204b8:	mov	r2, #0
   204bc:	mov	r3, #0
   204c0:	b	20308 <_start@@Base+0xbce0>
   204c4:	mov	r2, #0
   204c8:	mov	r3, #0
   204cc:	b	20330 <_start@@Base+0xbd08>
   204d0:	mov	r2, #0
   204d4:	mov	r3, #0
   204d8:	b	20358 <_start@@Base+0xbd30>
   204dc:	mov	r3, #2
   204e0:	mov	r2, sl
   204e4:	mov	r1, r4
   204e8:	ldr	r7, [sp, #20]
   204ec:	mov	r0, r7
   204f0:	bl	193e8 <_start@@Base+0x4dc0>
   204f4:	mov	r1, r0
   204f8:	str	r0, [sp, #176]	; 0xb0
   204fc:	cmp	r4, r0
   20500:	beq	205ec <_start@@Base+0xbfc4>
   20504:	str	r5, [sp, #272]	; 0x110
   20508:	mov	r2, #0
   2050c:	mov	r3, #0
   20510:	add	r0, sp, #280	; 0x118
   20514:	strd	r2, [r0]
   20518:	str	r5, [sp, #276]	; 0x114
   2051c:	mov	r4, r1
   20520:	cmp	sl, r1
   20524:	beq	205a0 <_start@@Base+0xbf78>
   20528:	str	r0, [sp]
   2052c:	add	r3, sp, #276	; 0x114
   20530:	mov	r2, sl
   20534:	mov	r0, r7
   20538:	bl	2ed84 <flatcc_json_parser_integer@@Base>
   2053c:	cmp	r4, r0
   20540:	beq	205a0 <_start@@Base+0xbf78>
   20544:	ldr	r3, [sp, #276]	; 0x114
   20548:	cmp	r3, r8
   2054c:	bne	20580 <_start@@Base+0xbf58>
   20550:	add	r3, sp, #280	; 0x118
   20554:	ldrd	r2, [r3]
   20558:	mvn	r6, #0
   2055c:	mov	r7, #0
   20560:	cmp	r3, r7
   20564:	cmpeq	r2, r6
   20568:	strls	r2, [sp, #272]	; 0x110
   2056c:	bhi	205d4 <_start@@Base+0xbfac>
   20570:	ldr	r3, [sp, #272]	; 0x110
   20574:	ldr	r2, [sp, #120]	; 0x78
   20578:	str	r3, [r2]
   2057c:	b	203b4 <_start@@Base+0xbd8c>
   20580:	mov	r3, #8
   20584:	mov	r2, sl
   20588:	mov	r1, r0
   2058c:	ldr	r0, [sp, #20]
   20590:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   20594:	ldr	r3, [sp, #176]	; 0xb0
   20598:	cmp	r3, r0
   2059c:	bne	20570 <_start@@Base+0xbf48>
   205a0:	add	r3, sp, #272	; 0x110
   205a4:	str	r3, [sp]
   205a8:	ldr	r3, [pc, #440]	; 20768 <_start@@Base+0xc140>
   205ac:	add	r3, r3, #432	; 0x1b0
   205b0:	mov	r2, sl
   205b4:	ldr	r4, [sp, #176]	; 0xb0
   205b8:	mov	r1, r4
   205bc:	ldr	r0, [sp, #20]
   205c0:	bl	18864 <_start@@Base+0x423c>
   205c4:	cmp	sl, r0
   205c8:	cmpne	r4, r0
   205cc:	bne	20570 <_start@@Base+0xbf48>
   205d0:	b	207b8 <_start@@Base+0xc190>
   205d4:	mov	r3, #7
   205d8:	mov	r2, sl
   205dc:	mov	r1, r0
   205e0:	ldr	r0, [sp, #20]
   205e4:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   205e8:	b	20594 <_start@@Base+0xbf6c>
   205ec:	mov	r2, sl
   205f0:	ldr	r1, [sp, #176]	; 0xb0
   205f4:	ldr	r0, [sp, #20]
   205f8:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   205fc:	b	203b4 <_start@@Base+0xbd8c>
   20600:	cmp	ip, #8
   20604:	ble	20718 <_start@@Base+0xc0f0>
   20608:	ldr	r2, [sp, #20]
   2060c:	ldr	r3, [r2, #12]
   20610:	cmp	r3, #0
   20614:	beq	2070c <_start@@Base+0xc0e4>
   20618:	ldrb	r3, [r4, #8]
   2061c:	cmp	r3, #58	; 0x3a
   20620:	cmpne	r3, #32
   20624:	addls	r1, r4, #8
   20628:	strls	r5, [r2, #12]
   2062c:	bhi	20718 <_start@@Base+0xc0f0>
   20630:	sub	r3, sl, r1
   20634:	cmp	r3, #1
   20638:	ble	2064c <_start@@Base+0xc024>
   2063c:	ldrb	r3, [r1]
   20640:	cmp	r3, #32
   20644:	bhi	2065c <_start@@Base+0xc034>
   20648:	beq	20734 <_start@@Base+0xc10c>
   2064c:	mov	r2, sl
   20650:	ldr	r0, [sp, #20]
   20654:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   20658:	mov	r1, r0
   2065c:	cmp	sl, r1
   20660:	beq	20670 <_start@@Base+0xc048>
   20664:	ldrb	r3, [r1]
   20668:	cmp	r3, #58	; 0x3a
   2066c:	beq	20748 <_start@@Base+0xc120>
   20670:	mov	r3, #4
   20674:	mov	r2, sl
   20678:	ldr	r0, [sp, #20]
   2067c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   20680:	str	r0, [sp, #176]	; 0xb0
   20684:	ldr	r1, [sp, #176]	; 0xb0
   20688:	cmp	r4, r1
   2068c:	beq	20718 <_start@@Base+0xc0f0>
   20690:	str	r5, [sp, #272]	; 0x110
   20694:	mov	r2, #0
   20698:	mov	r3, #0
   2069c:	add	r0, sp, #280	; 0x118
   206a0:	strd	r2, [r0]
   206a4:	str	r5, [sp, #276]	; 0x114
   206a8:	cmp	sl, r1
   206ac:	beq	2078c <_start@@Base+0xc164>
   206b0:	str	r0, [sp]
   206b4:	add	r3, sp, #276	; 0x114
   206b8:	mov	r2, sl
   206bc:	mov	r4, r1
   206c0:	ldr	r0, [sp, #20]
   206c4:	bl	2ed84 <flatcc_json_parser_integer@@Base>
   206c8:	cmp	r4, r0
   206cc:	beq	2078c <_start@@Base+0xc164>
   206d0:	ldr	r3, [sp, #276]	; 0x114
   206d4:	cmp	r3, #0
   206d8:	bne	2076c <_start@@Base+0xc144>
   206dc:	add	r3, sp, #280	; 0x118
   206e0:	ldrd	r2, [r3]
   206e4:	mvn	r6, #0
   206e8:	mov	r7, #0
   206ec:	cmp	r3, r7
   206f0:	cmpeq	r2, r6
   206f4:	strls	r2, [sp, #272]	; 0x110
   206f8:	bhi	20830 <_start@@Base+0xc208>
   206fc:	ldr	r3, [sp, #272]	; 0x110
   20700:	ldr	r2, [sp, #120]	; 0x78
   20704:	str	r3, [r2, #4]
   20708:	b	203b4 <_start@@Base+0xbd8c>
   2070c:	ldrb	r3, [r4, #8]
   20710:	cmp	r3, #34	; 0x22
   20714:	beq	2072c <_start@@Base+0xc104>
   20718:	mov	r2, sl
   2071c:	mov	r1, r4
   20720:	ldr	r0, [sp, #20]
   20724:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   20728:	b	203b4 <_start@@Base+0xbd8c>
   2072c:	add	r1, r4, #9
   20730:	b	20630 <_start@@Base+0xc008>
   20734:	ldrb	r3, [r1, #1]
   20738:	cmp	r3, #32
   2073c:	addhi	r1, r1, #1
   20740:	bls	2064c <_start@@Base+0xc024>
   20744:	b	2065c <_start@@Base+0xc034>
   20748:	mov	r2, sl
   2074c:	add	r1, r1, #1
   20750:	ldr	r0, [sp, #20]
   20754:	bl	17d9c <_start@@Base+0x3774>
   20758:	str	r0, [sp, #176]	; 0xb0
   2075c:	b	20684 <_start@@Base+0xc05c>
   20760:	cmnvs	lr, r5, ror #6
   20764:	strbtvs	r7, [r9], #-884	; 0xfffffc8c
   20768:	andeq	r4, r5, r0, ror r0
   2076c:	mov	r3, #8
   20770:	mov	r2, sl
   20774:	mov	r1, r0
   20778:	ldr	r0, [sp, #20]
   2077c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   20780:	ldr	r3, [sp, #176]	; 0xb0
   20784:	cmp	r3, r0
   20788:	bne	206fc <_start@@Base+0xc0d4>
   2078c:	add	r3, sp, #272	; 0x110
   20790:	str	r3, [sp]
   20794:	ldr	r3, [sp, #252]	; 0xfc
   20798:	mov	r2, sl
   2079c:	ldr	r4, [sp, #176]	; 0xb0
   207a0:	mov	r1, r4
   207a4:	ldr	r0, [sp, #20]
   207a8:	bl	18864 <_start@@Base+0x423c>
   207ac:	cmp	sl, r0
   207b0:	cmpne	r0, r4
   207b4:	bne	206fc <_start@@Base+0xc0d4>
   207b8:	mov	r3, #33	; 0x21
   207bc:	mov	r2, sl
   207c0:	mov	r1, r0
   207c4:	ldr	r0, [sp, #20]
   207c8:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   207cc:	mov	r4, r0
   207d0:	add	r3, sp, #300	; 0x12c
   207d4:	mov	r2, sl
   207d8:	mov	r1, r4
   207dc:	ldr	r0, [sp, #20]
   207e0:	bl	17fe8 <_start@@Base+0x39c0>
   207e4:	mov	r4, r0
   207e8:	ldr	r3, [sp, #300]	; 0x12c
   207ec:	cmp	r3, #0
   207f0:	beq	20944 <_start@@Base+0xc31c>
   207f4:	mov	r1, fp
   207f8:	ldr	r5, [sp, #20]
   207fc:	ldr	r0, [r5]
   20800:	bl	271c4 <flatcc_builder_extend_vector@@Base>
   20804:	subs	r3, r0, #0
   20808:	str	r3, [sp, #120]	; 0x78
   2080c:	beq	2315c <_start@@Base+0xeb34>
   20810:	add	r3, sp, #268	; 0x10c
   20814:	mov	r2, sl
   20818:	mov	r1, r4
   2081c:	mov	r0, r5
   20820:	bl	17de0 <_start@@Base+0x37b8>
   20824:	mov	r4, r0
   20828:	mov	r5, #0
   2082c:	b	20424 <_start@@Base+0xbdfc>
   20830:	mov	r3, #7
   20834:	mov	r2, sl
   20838:	mov	r1, r0
   2083c:	ldr	r0, [sp, #20]
   20840:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   20844:	b	20780 <_start@@Base+0xc158>
   20848:	ldrb	r3, [r0, #1]
   2084c:	cmp	r3, #32
   20850:	addhi	r0, r0, #1
   20854:	bls	203d0 <_start@@Base+0xbda8>
   20858:	b	203e0 <_start@@Base+0xbdb8>
   2085c:	add	r4, r0, #1
   20860:	sub	r3, sl, r4
   20864:	cmp	r3, #1
   20868:	ble	2087c <_start@@Base+0xc254>
   2086c:	ldrb	r3, [r0, #1]
   20870:	cmp	r3, #32
   20874:	bhi	20424 <_start@@Base+0xbdfc>
   20878:	beq	20894 <_start@@Base+0xc26c>
   2087c:	mov	r2, sl
   20880:	mov	r1, r4
   20884:	ldr	r0, [sp, #20]
   20888:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2088c:	mov	r4, r0
   20890:	b	20424 <_start@@Base+0xbdfc>
   20894:	ldrb	r3, [r0, #2]
   20898:	cmp	r3, #32
   2089c:	addhi	r4, r0, #2
   208a0:	bls	2087c <_start@@Base+0xc254>
   208a4:	b	20424 <_start@@Base+0xbdfc>
   208a8:	add	r4, r0, #1
   208ac:	sub	r3, sl, r4
   208b0:	cmp	r3, #1
   208b4:	ble	208c8 <_start@@Base+0xc2a0>
   208b8:	ldrb	r3, [r0, #1]
   208bc:	cmp	r3, #32
   208c0:	bhi	208dc <_start@@Base+0xc2b4>
   208c4:	beq	20910 <_start@@Base+0xc2e8>
   208c8:	mov	r2, sl
   208cc:	mov	r1, r4
   208d0:	ldr	r0, [sp, #20]
   208d4:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   208d8:	mov	r4, r0
   208dc:	cmp	sl, r4
   208e0:	beq	20924 <_start@@Base+0xc2fc>
   208e4:	ldrb	r3, [r4]
   208e8:	cmp	r3, #125	; 0x7d
   208ec:	strne	fp, [sp, #268]	; 0x10c
   208f0:	bne	20424 <_start@@Base+0xbdfc>
   208f4:	str	r5, [sp, #268]	; 0x10c
   208f8:	mov	r2, sl
   208fc:	add	r1, r4, #1
   20900:	ldr	r0, [sp, #20]
   20904:	bl	17d9c <_start@@Base+0x3774>
   20908:	mov	r4, r0
   2090c:	b	20424 <_start@@Base+0xbdfc>
   20910:	ldrb	r3, [r0, #2]
   20914:	cmp	r3, #32
   20918:	addhi	r4, r0, #2
   2091c:	bls	208c8 <_start@@Base+0xc2a0>
   20920:	b	208dc <_start@@Base+0xc2b4>
   20924:	str	r5, [sp, #268]	; 0x10c
   20928:	mov	r3, #10
   2092c:	mov	r2, sl
   20930:	mov	r1, r4
   20934:	ldr	r0, [sp, #20]
   20938:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2093c:	mov	r4, r0
   20940:	b	20424 <_start@@Base+0xbdfc>
   20944:	strd	r8, [sp, #120]	; 0x78
   20948:	ldr	r8, [sp, #20]
   2094c:	mov	r9, r0
   20950:	ldr	r0, [r8]
   20954:	bl	289dc <flatcc_builder_end_vector@@Base>
   20958:	str	r0, [sp, #296]	; 0x128
   2095c:	cmp	r0, #0
   20960:	beq	23168 <_start@@Base+0xeb40>
   20964:	mov	r1, #29
   20968:	ldr	r0, [r8]
   2096c:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   20970:	cmp	r0, #0
   20974:	beq	23170 <_start@@Base+0xeb48>
   20978:	ldr	r3, [sp, #296]	; 0x128
   2097c:	str	r3, [r0]
   20980:	b	21e30 <_start@@Base+0xd808>
   20984:	mov	r2, sl
   20988:	mov	r1, r0
   2098c:	mov	r0, r8
   20990:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   20994:	mov	r9, r0
   20998:	b	21e30 <_start@@Base+0xd808>
   2099c:	mov	r4, r0
   209a0:	mov	r2, sl
   209a4:	mov	r1, r4
   209a8:	mov	r0, r8
   209ac:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   209b0:	mov	r9, r0
   209b4:	b	21e30 <_start@@Base+0xd808>
   209b8:	add	r3, pc, #984	; 0x3d8
   209bc:	ldrd	r2, [r3]
   209c0:	cmp	r1, r3
   209c4:	cmpeq	r0, r2
   209c8:	beq	209f8 <_start@@Base+0xc3d0>
   209cc:	add	r3, pc, #972	; 0x3cc
   209d0:	ldrd	r2, [r3]
   209d4:	cmp	r1, r3
   209d8:	cmpeq	r0, r2
   209dc:	beq	20c6c <_start@@Base+0xc644>
   209e0:	mov	r2, sl
   209e4:	mov	r1, r4
   209e8:	mov	r0, r8
   209ec:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   209f0:	mov	r9, r0
   209f4:	b	21e30 <_start@@Base+0xd808>
   209f8:	add	r4, r9, #16
   209fc:	mov	r1, sl
   20a00:	mov	r0, r4
   20a04:	bl	14750 <_start@@Base+0x128>
   20a08:	mov	r7, r1
   20a0c:	mov	r2, #0
   20a10:	ldr	r3, [pc, #916]	; 20dac <_start@@Base+0xc784>
   20a14:	and	r2, r2, r0
   20a18:	and	r3, r3, r1
   20a1c:	mov	r0, #0
   20a20:	ldr	r1, [pc, #896]	; 20da8 <_start@@Base+0xc780>
   20a24:	cmp	r3, r1
   20a28:	cmpeq	r2, r0
   20a2c:	beq	20a5c <_start@@Base+0xc434>
   20a30:	mov	r6, #0
   20a34:	and	r7, r7, #-16777216	; 0xff000000
   20a38:	cmp	r7, #1728053248	; 0x67000000
   20a3c:	cmpeq	r6, #0
   20a40:	beq	20b64 <_start@@Base+0xc53c>
   20a44:	mov	r2, sl
   20a48:	mov	r1, r4
   20a4c:	mov	r0, r8
   20a50:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   20a54:	mov	r9, r0
   20a58:	b	21e30 <_start@@Base+0xd808>
   20a5c:	mov	r3, #2
   20a60:	mov	r2, sl
   20a64:	mov	r1, r4
   20a68:	mov	r0, r8
   20a6c:	bl	193e8 <_start@@Base+0x4dc0>
   20a70:	mov	r9, r0
   20a74:	cmp	r4, r0
   20a78:	beq	20b4c <_start@@Base+0xc524>
   20a7c:	ldr	r0, [r8]
   20a80:	bl	27a58 <flatcc_builder_start_offset_vector@@Base>
   20a84:	cmp	r0, #0
   20a88:	bne	23178 <_start@@Base+0xeb50>
   20a8c:	add	r3, sp, #300	; 0x12c
   20a90:	mov	r2, sl
   20a94:	mov	r1, r9
   20a98:	mov	r0, r8
   20a9c:	bl	1e5d0 <_start@@Base+0x9fa8>
   20aa0:	mov	r9, r0
   20aa4:	ldr	r3, [sp, #300]	; 0x12c
   20aa8:	cmp	r3, #0
   20aac:	beq	20b18 <_start@@Base+0xc4f0>
   20ab0:	mov	r4, #1
   20ab4:	add	r3, sp, #296	; 0x128
   20ab8:	mov	r2, sl
   20abc:	mov	r1, r9
   20ac0:	mov	r0, r8
   20ac4:	bl	2f2b4 <flatcc_json_parser_build_string@@Base>
   20ac8:	mov	r9, r0
   20acc:	ldr	r3, [sp, #296]	; 0x128
   20ad0:	cmp	r3, #0
   20ad4:	beq	23180 <_start@@Base+0xeb58>
   20ad8:	mov	r1, r4
   20adc:	ldr	r0, [r8]
   20ae0:	bl	27428 <flatcc_builder_extend_offset_vector@@Base>
   20ae4:	cmp	r0, #0
   20ae8:	beq	23188 <_start@@Base+0xeb60>
   20aec:	ldr	r3, [sp, #296]	; 0x128
   20af0:	str	r3, [r0]
   20af4:	add	r3, sp, #300	; 0x12c
   20af8:	mov	r2, sl
   20afc:	mov	r1, r9
   20b00:	mov	r0, r8
   20b04:	bl	17fe8 <_start@@Base+0x39c0>
   20b08:	mov	r9, r0
   20b0c:	ldr	r3, [sp, #300]	; 0x12c
   20b10:	cmp	r3, #0
   20b14:	bne	20ab4 <_start@@Base+0xc48c>
   20b18:	ldr	r0, [r8]
   20b1c:	bl	28af4 <flatcc_builder_end_offset_vector@@Base>
   20b20:	str	r0, [sp, #296]	; 0x128
   20b24:	cmp	r0, #0
   20b28:	beq	23190 <_start@@Base+0xeb68>
   20b2c:	mov	r1, #28
   20b30:	ldr	r0, [r8]
   20b34:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   20b38:	cmp	r0, #0
   20b3c:	beq	23198 <_start@@Base+0xeb70>
   20b40:	ldr	r3, [sp, #296]	; 0x128
   20b44:	str	r3, [r0]
   20b48:	b	21e30 <_start@@Base+0xd808>
   20b4c:	mov	r2, sl
   20b50:	mov	r1, r0
   20b54:	mov	r0, r8
   20b58:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   20b5c:	mov	r9, r0
   20b60:	b	21e30 <_start@@Base+0xd808>
   20b64:	mov	r3, #1
   20b68:	mov	r2, sl
   20b6c:	mov	r1, r4
   20b70:	mov	r0, r8
   20b74:	bl	193e8 <_start@@Base+0x4dc0>
   20b78:	mov	r9, r0
   20b7c:	cmp	r4, r0
   20b80:	beq	20c54 <_start@@Base+0xc62c>
   20b84:	ldr	r0, [r8]
   20b88:	bl	27a58 <flatcc_builder_start_offset_vector@@Base>
   20b8c:	cmp	r0, #0
   20b90:	bne	231a0 <_start@@Base+0xeb78>
   20b94:	add	r3, sp, #300	; 0x12c
   20b98:	mov	r2, sl
   20b9c:	mov	r1, r9
   20ba0:	mov	r0, r8
   20ba4:	bl	1e5d0 <_start@@Base+0x9fa8>
   20ba8:	mov	r9, r0
   20bac:	ldr	r3, [sp, #300]	; 0x12c
   20bb0:	cmp	r3, #0
   20bb4:	beq	20c20 <_start@@Base+0xc5f8>
   20bb8:	mov	r4, #1
   20bbc:	add	r3, sp, #296	; 0x128
   20bc0:	mov	r2, sl
   20bc4:	mov	r1, r9
   20bc8:	mov	r0, r8
   20bcc:	bl	2f2b4 <flatcc_json_parser_build_string@@Base>
   20bd0:	mov	r9, r0
   20bd4:	ldr	r3, [sp, #296]	; 0x128
   20bd8:	cmp	r3, #0
   20bdc:	beq	231a8 <_start@@Base+0xeb80>
   20be0:	mov	r1, r4
   20be4:	ldr	r0, [r8]
   20be8:	bl	27428 <flatcc_builder_extend_offset_vector@@Base>
   20bec:	cmp	r0, #0
   20bf0:	beq	231b0 <_start@@Base+0xeb88>
   20bf4:	ldr	r3, [sp, #296]	; 0x128
   20bf8:	str	r3, [r0]
   20bfc:	add	r3, sp, #300	; 0x12c
   20c00:	mov	r2, sl
   20c04:	mov	r1, r9
   20c08:	mov	r0, r8
   20c0c:	bl	17fe8 <_start@@Base+0x39c0>
   20c10:	mov	r9, r0
   20c14:	ldr	r3, [sp, #300]	; 0x12c
   20c18:	cmp	r3, #0
   20c1c:	bne	20bbc <_start@@Base+0xc594>
   20c20:	ldr	r0, [r8]
   20c24:	bl	28af4 <flatcc_builder_end_offset_vector@@Base>
   20c28:	str	r0, [sp, #296]	; 0x128
   20c2c:	cmp	r0, #0
   20c30:	beq	231b8 <_start@@Base+0xeb90>
   20c34:	mov	r1, #10
   20c38:	ldr	r0, [r8]
   20c3c:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   20c40:	cmp	r0, #0
   20c44:	beq	231c0 <_start@@Base+0xeb98>
   20c48:	ldr	r3, [sp, #296]	; 0x128
   20c4c:	str	r3, [r0]
   20c50:	b	21e30 <_start@@Base+0xd808>
   20c54:	mov	r2, sl
   20c58:	mov	r1, r0
   20c5c:	mov	r0, r8
   20c60:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   20c64:	mov	r9, r0
   20c68:	b	21e30 <_start@@Base+0xd808>
   20c6c:	add	r4, r9, #16
   20c70:	mov	r1, sl
   20c74:	mov	r0, r4
   20c78:	bl	14750 <_start@@Base+0x128>
   20c7c:	mov	r0, #0
   20c80:	and	r1, r1, #-16777216	; 0xff000000
   20c84:	cmp	r1, #1929379840	; 0x73000000
   20c88:	cmpeq	r0, #0
   20c8c:	beq	20ca8 <_start@@Base+0xc680>
   20c90:	mov	r2, sl
   20c94:	mov	r1, r4
   20c98:	mov	r0, r8
   20c9c:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   20ca0:	mov	r9, r0
   20ca4:	b	21e30 <_start@@Base+0xd808>
   20ca8:	mov	r3, #1
   20cac:	mov	r2, sl
   20cb0:	mov	r1, r4
   20cb4:	mov	r0, r8
   20cb8:	bl	193e8 <_start@@Base+0x4dc0>
   20cbc:	mov	r9, r0
   20cc0:	cmp	r4, r0
   20cc4:	beq	20db4 <_start@@Base+0xc78c>
   20cc8:	ldr	r0, [r8]
   20ccc:	bl	27a58 <flatcc_builder_start_offset_vector@@Base>
   20cd0:	cmp	r0, #0
   20cd4:	bne	231c8 <_start@@Base+0xeba0>
   20cd8:	add	r3, sp, #300	; 0x12c
   20cdc:	mov	r2, sl
   20ce0:	mov	r1, r9
   20ce4:	mov	r0, r8
   20ce8:	bl	1e5d0 <_start@@Base+0x9fa8>
   20cec:	mov	r9, r0
   20cf0:	ldr	r3, [sp, #300]	; 0x12c
   20cf4:	cmp	r3, #0
   20cf8:	beq	20d64 <_start@@Base+0xc73c>
   20cfc:	mov	r4, #1
   20d00:	add	r3, sp, #296	; 0x128
   20d04:	mov	r2, sl
   20d08:	mov	r1, r9
   20d0c:	mov	r0, r8
   20d10:	bl	1e690 <_start@@Base+0xa068>
   20d14:	mov	r9, r0
   20d18:	ldr	r3, [sp, #296]	; 0x128
   20d1c:	cmp	r3, #0
   20d20:	beq	231d0 <_start@@Base+0xeba8>
   20d24:	mov	r1, r4
   20d28:	ldr	r0, [r8]
   20d2c:	bl	27428 <flatcc_builder_extend_offset_vector@@Base>
   20d30:	cmp	r0, #0
   20d34:	beq	231d8 <_start@@Base+0xebb0>
   20d38:	ldr	r3, [sp, #296]	; 0x128
   20d3c:	str	r3, [r0]
   20d40:	add	r3, sp, #300	; 0x12c
   20d44:	mov	r2, sl
   20d48:	mov	r1, r9
   20d4c:	mov	r0, r8
   20d50:	bl	17fe8 <_start@@Base+0x39c0>
   20d54:	mov	r9, r0
   20d58:	ldr	r3, [sp, #300]	; 0x12c
   20d5c:	cmp	r3, #0
   20d60:	bne	20d00 <_start@@Base+0xc6d8>
   20d64:	ldr	r0, [r8]
   20d68:	bl	28af4 <flatcc_builder_end_offset_vector@@Base>
   20d6c:	str	r0, [sp, #296]	; 0x128
   20d70:	cmp	r0, #0
   20d74:	beq	231e0 <_start@@Base+0xebb8>
   20d78:	mov	r1, #11
   20d7c:	ldr	r0, [r8]
   20d80:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   20d84:	cmp	r0, #0
   20d88:	beq	231e8 <_start@@Base+0xebc0>
   20d8c:	ldr	r3, [sp, #296]	; 0x128
   20d90:	str	r3, [r0]
   20d94:	b	21e30 <_start@@Base+0xd808>
   20d98:	ldrbtvc	r6, [r2], #-2414	; 0xfffff692
   20d9c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   20da0:	cmnvs	r2, r5, ror #24
   20da4:	stmdbvc	pc!, {r2, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   20da8:	ldrvs	r0, [r2, -r0]!
   20dac:			; <UNDEFINED> instruction: 0xffff0000
   20db0:	ldrtcc	r0, [r4], -r0
   20db4:	mov	r2, sl
   20db8:	mov	r1, r0
   20dbc:	mov	r0, r8
   20dc0:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   20dc4:	mov	r9, r0
   20dc8:	b	21e30 <_start@@Base+0xd808>
   20dcc:	add	r4, r9, #8
   20dd0:	mov	r1, sl
   20dd4:	mov	r0, r4
   20dd8:	bl	14750 <_start@@Base+0x128>
   20ddc:	mov	r2, #0
   20de0:	ldr	r3, [pc, #-60]	; 20dac <_start@@Base+0xc784>
   20de4:	and	r0, r0, r2
   20de8:	and	r1, r1, r3
   20dec:	mov	r2, #0
   20df0:	ldr	r3, [pc, #-72]	; 20db0 <_start@@Base+0xc788>
   20df4:	cmp	r1, r3
   20df8:	cmpeq	r0, r2
   20dfc:	beq	20e18 <_start@@Base+0xc7f0>
   20e00:	mov	r2, sl
   20e04:	mov	r1, r4
   20e08:	mov	r0, r8
   20e0c:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   20e10:	mov	r9, r0
   20e14:	b	21e30 <_start@@Base+0xd808>
   20e18:	mov	r3, #2
   20e1c:	mov	r2, sl
   20e20:	mov	r1, r4
   20e24:	mov	r0, r8
   20e28:	bl	193e8 <_start@@Base+0x4dc0>
   20e2c:	mov	r9, r0
   20e30:	cmp	r4, r0
   20e34:	beq	2133c <_start@@Base+0xcd14>
   20e38:	mov	r3, #0
   20e3c:	str	r3, [sp, #296]	; 0x128
   20e40:	mov	r1, #3
   20e44:	ldr	r0, [r8]
   20e48:	bl	27c7c <flatcc_builder_start_table@@Base>
   20e4c:	cmp	r0, #0
   20e50:	bne	212e0 <_start@@Base+0xccb8>
   20e54:	add	r3, sp, #276	; 0x114
   20e58:	mov	r2, sl
   20e5c:	mov	r1, r9
   20e60:	mov	r0, r8
   20e64:	bl	17de0 <_start@@Base+0x37b8>
   20e68:	mov	r9, r0
   20e6c:	ldr	r3, [sp, #276]	; 0x114
   20e70:	cmp	r3, #0
   20e74:	beq	212d4 <_start@@Base+0xccac>
   20e78:	mov	fp, #1
   20e7c:	add	r7, pc, #940	; 0x3ac
   20e80:	ldrd	r6, [r7]
   20e84:	b	210d0 <_start@@Base+0xcaa8>
   20e88:	mov	r3, #5
   20e8c:	mov	r2, sl
   20e90:	mov	r1, r9
   20e94:	mov	r0, r8
   20e98:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   20e9c:	mov	r9, r0
   20ea0:	b	210fc <_start@@Base+0xcad4>
   20ea4:	ldrb	r2, [r9, #7]
   20ea8:	mov	r3, #0
   20eac:	b	20eb8 <_start@@Base+0xc890>
   20eb0:	mov	r2, #0
   20eb4:	mov	r3, #0
   20eb8:	ldrb	r0, [r9, #6]
   20ebc:	mov	ip, #0
   20ec0:	str	ip, [sp, #244]	; 0xf4
   20ec4:	lsl	r1, r0, #8
   20ec8:	str	r1, [sp, #240]	; 0xf0
   20ecc:	ldrd	r0, [sp, #240]	; 0xf0
   20ed0:	orr	r0, r0, r2
   20ed4:	orr	r1, r1, r3
   20ed8:	mov	r2, r0
   20edc:	mov	r3, r1
   20ee0:	ldrb	r0, [r9, #5]
   20ee4:	mov	ip, #0
   20ee8:	str	ip, [sp, #228]	; 0xe4
   20eec:	lsl	r1, r0, #16
   20ef0:	str	r1, [sp, #224]	; 0xe0
   20ef4:	ldrd	r0, [sp, #224]	; 0xe0
   20ef8:	orr	r0, r0, r2
   20efc:	orr	r1, r1, r3
   20f00:	mov	r2, r0
   20f04:	mov	r3, r1
   20f08:	ldrb	r0, [r9, #4]
   20f0c:	mov	ip, #0
   20f10:	str	ip, [sp, #212]	; 0xd4
   20f14:	lsl	r1, r0, #24
   20f18:	str	r1, [sp, #208]	; 0xd0
   20f1c:	ldrd	r0, [sp, #208]	; 0xd0
   20f20:	orr	r0, r0, r2
   20f24:	orr	r1, r1, r3
   20f28:	mov	r2, r0
   20f2c:	mov	r3, r1
   20f30:	ldrb	r1, [r9, #3]
   20f34:	str	r1, [sp, #196]	; 0xc4
   20f38:	mov	r1, #0
   20f3c:	str	r1, [sp, #192]	; 0xc0
   20f40:	ldrd	r0, [sp, #192]	; 0xc0
   20f44:	orr	r0, r0, r2
   20f48:	orr	r1, r1, r3
   20f4c:	mov	r2, r0
   20f50:	mov	r3, r1
   20f54:	ldrb	r0, [r9, #2]
   20f58:	lsl	r1, r0, #8
   20f5c:	str	r1, [sp, #172]	; 0xac
   20f60:	mov	r1, #0
   20f64:	str	r1, [sp, #168]	; 0xa8
   20f68:	ldrd	r0, [sp, #168]	; 0xa8
   20f6c:	orr	r0, r0, r2
   20f70:	orr	r1, r1, r3
   20f74:	mov	r2, r0
   20f78:	mov	r3, r1
   20f7c:	ldrb	r0, [r9, #1]
   20f80:	lsl	r1, r0, #16
   20f84:	str	r1, [sp, #156]	; 0x9c
   20f88:	mov	r1, #0
   20f8c:	str	r1, [sp, #152]	; 0x98
   20f90:	ldrd	r0, [sp, #152]	; 0x98
   20f94:	orr	r0, r0, r2
   20f98:	orr	r1, r1, r3
   20f9c:	mov	r2, r0
   20fa0:	mov	r3, r1
   20fa4:	ldrb	r0, [r9]
   20fa8:	lsl	r1, r0, #24
   20fac:	str	r1, [sp, #140]	; 0x8c
   20fb0:	mov	r1, #0
   20fb4:	str	r1, [sp, #136]	; 0x88
   20fb8:	ldrd	r0, [sp, #136]	; 0x88
   20fbc:	orr	r0, r0, r2
   20fc0:	orr	r1, r1, r3
   20fc4:	mov	r2, r0
   20fc8:	mov	r3, r1
   20fcc:	cmp	r1, r7
   20fd0:	cmpeq	r0, r6
   20fd4:	bls	2107c <_start@@Base+0xca54>
   20fd8:	bic	r0, r0, #255	; 0xff
   20fdc:	add	r5, pc, #596	; 0x254
   20fe0:	ldrd	r4, [r5]
   20fe4:	cmp	r1, r5
   20fe8:	cmpeq	r0, r4
   20fec:	beq	211b8 <_start@@Base+0xcb90>
   20ff0:	ldr	r0, [pc, #600]	; 21250 <_start@@Base+0xcc28>
   20ff4:	mvn	r1, #0
   20ff8:	and	r0, r0, r2
   20ffc:	and	r1, r1, r3
   21000:	mov	r2, r0
   21004:	mov	r3, r1
   21008:	add	r1, pc, #560	; 0x230
   2100c:	ldrd	r0, [r1]
   21010:	cmp	r3, r1
   21014:	cmpeq	r2, r0
   21018:	beq	21258 <_start@@Base+0xcc30>
   2101c:	mov	r2, sl
   21020:	mov	r1, r9
   21024:	mov	r0, r8
   21028:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   2102c:	mov	r9, r0
   21030:	b	210ac <_start@@Base+0xca84>
   21034:	mov	r2, #0
   21038:	mov	r3, #0
   2103c:	b	20ee0 <_start@@Base+0xc8b8>
   21040:	mov	r2, #0
   21044:	mov	r3, #0
   21048:	b	20f08 <_start@@Base+0xc8e0>
   2104c:	mov	r2, #0
   21050:	mov	r3, #0
   21054:	b	20f30 <_start@@Base+0xc908>
   21058:	mov	r2, #0
   2105c:	mov	r3, #0
   21060:	b	20f54 <_start@@Base+0xc92c>
   21064:	mov	r2, #0
   21068:	mov	r3, #0
   2106c:	b	20f7c <_start@@Base+0xc954>
   21070:	mov	r2, #0
   21074:	mov	r3, #0
   21078:	b	20fa4 <_start@@Base+0xc97c>
   2107c:	mov	r2, #0
   21080:	mov	r3, r1
   21084:	add	r1, pc, #444	; 0x1bc
   21088:	ldrd	r0, [r1]
   2108c:	cmp	r3, r1
   21090:	cmpeq	r2, r0
   21094:	beq	21138 <_start@@Base+0xcb10>
   21098:	mov	r2, sl
   2109c:	mov	r1, r9
   210a0:	mov	r0, r8
   210a4:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   210a8:	mov	r9, r0
   210ac:	add	r3, sp, #276	; 0x114
   210b0:	mov	r2, sl
   210b4:	mov	r1, r9
   210b8:	mov	r0, r8
   210bc:	bl	18104 <_start@@Base+0x3adc>
   210c0:	mov	r9, r0
   210c4:	ldr	r3, [sp, #276]	; 0x114
   210c8:	cmp	r3, #0
   210cc:	beq	212d4 <_start@@Base+0xccac>
   210d0:	cmp	sl, r9
   210d4:	beq	210fc <_start@@Base+0xcad4>
   210d8:	ldrb	r3, [r9]
   210dc:	cmp	r3, #34	; 0x22
   210e0:	addeq	r9, r9, #1
   210e4:	moveq	r3, #0
   210e8:	streq	r3, [r8, #12]
   210ec:	beq	210fc <_start@@Base+0xcad4>
   210f0:	cmp	r3, #46	; 0x2e
   210f4:	strne	fp, [r8, #12]
   210f8:	beq	20e88 <_start@@Base+0xc860>
   210fc:	sub	r3, sl, r9
   21100:	cmp	r3, #8
   21104:	movcs	r3, #8
   21108:	sub	r3, r3, #1
   2110c:	cmp	r3, #7
   21110:	ldrls	pc, [pc, r3, lsl #2]
   21114:	b	21098 <_start@@Base+0xca70>
   21118:	andeq	r1, r2, r0, ror r0
   2111c:	andeq	r1, r2, r4, rrx
   21120:	andeq	r1, r2, r8, asr r0
   21124:	andeq	r1, r2, ip, asr #32
   21128:	andeq	r1, r2, r0, asr #32
   2112c:	andeq	r1, r2, r4, lsr r0
   21130:			; <UNDEFINED> instruction: 0x00020eb0
   21134:	andeq	r0, r2, r4, lsr #29
   21138:	mov	r3, #4
   2113c:	mov	r2, sl
   21140:	mov	r1, r9
   21144:	mov	r0, r8
   21148:	bl	193e8 <_start@@Base+0x4dc0>
   2114c:	cmp	r0, r9
   21150:	beq	211a0 <_start@@Base+0xcb78>
   21154:	mov	r3, #0
   21158:	str	r3, [sp]
   2115c:	add	r3, sp, #280	; 0x118
   21160:	mov	r2, sl
   21164:	mov	r1, r0
   21168:	mov	r0, r8
   2116c:	bl	2eee0 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   21170:	mov	r9, r0
   21174:	ldr	r3, [sp, #280]	; 0x118
   21178:	cmp	r3, #0
   2117c:	beq	212e0 <_start@@Base+0xccb8>
   21180:	mov	r1, #0
   21184:	ldr	r0, [r8]
   21188:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   2118c:	cmp	r0, #0
   21190:	beq	212e0 <_start@@Base+0xccb8>
   21194:	ldr	r3, [sp, #280]	; 0x118
   21198:	str	r3, [r0]
   2119c:	b	210ac <_start@@Base+0xca84>
   211a0:	mov	r2, sl
   211a4:	mov	r1, r0
   211a8:	mov	r0, r8
   211ac:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   211b0:	mov	r9, r0
   211b4:	b	210ac <_start@@Base+0xca84>
   211b8:	mov	r3, #7
   211bc:	mov	r2, sl
   211c0:	mov	r1, r9
   211c4:	mov	r0, r8
   211c8:	bl	193e8 <_start@@Base+0x4dc0>
   211cc:	mov	r1, r0
   211d0:	cmp	r0, r9
   211d4:	beq	2121c <_start@@Base+0xcbf4>
   211d8:	str	fp, [sp]
   211dc:	add	r3, sp, #280	; 0x118
   211e0:	mov	r2, sl
   211e4:	mov	r0, r8
   211e8:	bl	2eee0 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   211ec:	mov	r9, r0
   211f0:	ldr	r3, [sp, #280]	; 0x118
   211f4:	cmp	r3, #0
   211f8:	beq	212e0 <_start@@Base+0xccb8>
   211fc:	mov	r1, fp
   21200:	ldr	r0, [r8]
   21204:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   21208:	cmp	r0, #0
   2120c:	beq	212e0 <_start@@Base+0xccb8>
   21210:	ldr	r3, [sp, #280]	; 0x118
   21214:	str	r3, [r0]
   21218:	b	210ac <_start@@Base+0xca84>
   2121c:	mov	r2, sl
   21220:	mov	r0, r8
   21224:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   21228:	mov	r9, r0
   2122c:	b	210ac <_start@@Base+0xca84>
   21230:	strbvs	pc, [r3, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   21234:	mcrvs	3, 3, r7, cr5, cr4, {3}
   21238:	cmnvs	r4, r0, lsl #2
   2123c:	ldrbvc	r6, [r2, #-3172]!	; 0xfffff39c
   21240:	strbvs	r0, [r4, #-0]!
   21244:	mcrvs	3, 3, r7, cr5, cr4, {3}
   21248:	andeq	r0, r0, r0
   2124c:	strbtvs	r7, [r1], #-1121	; 0xfffffb9f
   21250:			; <UNDEFINED> instruction: 0xffff0000
   21254:	andeq	r4, r5, r0, ror r0
   21258:	mov	r3, #6
   2125c:	mov	r2, sl
   21260:	mov	r1, r9
   21264:	mov	r0, r8
   21268:	bl	193e8 <_start@@Base+0x4dc0>
   2126c:	mov	r1, r0
   21270:	cmp	r0, r9
   21274:	beq	212c0 <_start@@Base+0xcc98>
   21278:	mov	r3, #0
   2127c:	str	r3, [sp]
   21280:	add	r3, sp, #280	; 0x118
   21284:	mov	r2, sl
   21288:	mov	r0, r8
   2128c:	bl	2eee0 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   21290:	mov	r9, r0
   21294:	ldr	r3, [sp, #280]	; 0x118
   21298:	cmp	r3, #0
   2129c:	beq	212e0 <_start@@Base+0xccb8>
   212a0:	mov	r1, #2
   212a4:	ldr	r0, [r8]
   212a8:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   212ac:	cmp	r0, #0
   212b0:	beq	212e0 <_start@@Base+0xccb8>
   212b4:	ldr	r3, [sp, #280]	; 0x118
   212b8:	str	r3, [r0]
   212bc:	b	210ac <_start@@Base+0xca84>
   212c0:	mov	r2, sl
   212c4:	mov	r0, r8
   212c8:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   212cc:	mov	r9, r0
   212d0:	b	210ac <_start@@Base+0xca84>
   212d4:	ldr	r3, [r8, #24]
   212d8:	cmp	r3, #0
   212dc:	beq	21324 <_start@@Base+0xccfc>
   212e0:	mov	r3, #33	; 0x21
   212e4:	mov	r2, sl
   212e8:	mov	r1, r9
   212ec:	mov	r0, r8
   212f0:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   212f4:	mov	r9, r0
   212f8:	ldr	r3, [sp, #296]	; 0x128
   212fc:	cmp	r3, #0
   21300:	beq	231f0 <_start@@Base+0xebc8>
   21304:	mov	r1, #35	; 0x23
   21308:	ldr	r0, [r8]
   2130c:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   21310:	cmp	r0, #0
   21314:	beq	231f8 <_start@@Base+0xebd0>
   21318:	ldr	r3, [sp, #296]	; 0x128
   2131c:	str	r3, [r0]
   21320:	b	21e30 <_start@@Base+0xd808>
   21324:	ldr	r0, [r8]
   21328:	bl	286cc <flatcc_builder_end_table@@Base>
   2132c:	str	r0, [sp, #296]	; 0x128
   21330:	cmp	r0, #0
   21334:	beq	212e0 <_start@@Base+0xccb8>
   21338:	b	212f8 <_start@@Base+0xccd0>
   2133c:	mov	r2, sl
   21340:	mov	r1, r0
   21344:	mov	r0, r8
   21348:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   2134c:	mov	r9, r0
   21350:	b	21e30 <_start@@Base+0xd808>
   21354:	mov	r3, #8
   21358:	mov	r2, sl
   2135c:	mov	r1, r9
   21360:	mov	r0, r8
   21364:	bl	193e8 <_start@@Base+0x4dc0>
   21368:	mov	r4, r0
   2136c:	cmp	r0, r9
   21370:	beq	21420 <_start@@Base+0xcdf8>
   21374:	add	r3, sp, #304	; 0x130
   21378:	mov	r2, #0
   2137c:	strb	r2, [r3, #-24]!	; 0xffffffe8
   21380:	mov	r2, sl
   21384:	mov	r1, r0
   21388:	mov	r0, r8
   2138c:	bl	18220 <_start@@Base+0x3bf8>
   21390:	mov	r9, r0
   21394:	cmp	r4, r0
   21398:	beq	213d0 <_start@@Base+0xcda8>
   2139c:	ldrb	r3, [sp, #280]	; 0x118
   213a0:	cmp	r3, #1
   213a4:	beq	21404 <_start@@Base+0xcddc>
   213a8:	mov	r3, #1
   213ac:	mov	r2, r3
   213b0:	mov	r1, #15
   213b4:	ldr	r0, [r8]
   213b8:	bl	29678 <flatcc_builder_table_add@@Base>
   213bc:	cmp	r0, #0
   213c0:	beq	23200 <_start@@Base+0xebd8>
   213c4:	ldrb	r3, [sp, #280]	; 0x118
   213c8:	strb	r3, [r0]
   213cc:	b	21e30 <_start@@Base+0xd808>
   213d0:	add	r3, sp, #280	; 0x118
   213d4:	str	r3, [sp]
   213d8:	ldr	r3, [pc, #-396]	; 21254 <_start@@Base+0xcc2c>
   213dc:	add	r3, r3, #456	; 0x1c8
   213e0:	mov	r2, sl
   213e4:	mov	r1, r0
   213e8:	mov	r0, r8
   213ec:	bl	186a0 <_start@@Base+0x4078>
   213f0:	cmp	sl, r0
   213f4:	cmpne	r9, r0
   213f8:	beq	21414 <_start@@Base+0xcdec>
   213fc:	mov	r9, r0
   21400:	b	2139c <_start@@Base+0xcd74>
   21404:	ldr	r3, [r8, #8]
   21408:	tst	r3, #2
   2140c:	beq	21e30 <_start@@Base+0xd808>
   21410:	b	213a8 <_start@@Base+0xcd80>
   21414:	mov	fp, r8
   21418:	mov	r9, r0
   2141c:	b	22fdc <_start@@Base+0xe9b4>
   21420:	mov	r2, sl
   21424:	mov	r1, r0
   21428:	mov	r0, r8
   2142c:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   21430:	mov	r9, r0
   21434:	b	21e30 <_start@@Base+0xd808>
   21438:	add	r3, pc, #912	; 0x390
   2143c:	ldrd	r2, [r3]
   21440:	cmp	r1, r3
   21444:	cmpeq	r0, r2
   21448:	bhi	21ba8 <_start@@Base+0xd580>
   2144c:	add	r3, pc, #900	; 0x384
   21450:	ldrd	r2, [r3]
   21454:	cmp	r1, r3
   21458:	cmpeq	r0, r2
   2145c:	beq	21478 <_start@@Base+0xce50>
   21460:	mov	r2, sl
   21464:	mov	r1, r9
   21468:	mov	r0, r8
   2146c:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   21470:	mov	r9, r0
   21474:	b	21e30 <_start@@Base+0xd808>
   21478:	add	r4, r9, #8
   2147c:	mov	r1, sl
   21480:	mov	r0, r4
   21484:	bl	14750 <_start@@Base+0x128>
   21488:	mov	r0, #0
   2148c:	and	r1, r1, #-16777216	; 0xff000000
   21490:	cmp	r1, #2030043136	; 0x79000000
   21494:	cmpeq	r0, #0
   21498:	beq	214b4 <_start@@Base+0xce8c>
   2149c:	mov	r2, sl
   214a0:	mov	r1, r4
   214a4:	mov	r0, r8
   214a8:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   214ac:	mov	r9, r0
   214b0:	b	21e30 <_start@@Base+0xd808>
   214b4:	mov	r3, #1
   214b8:	mov	r2, sl
   214bc:	mov	r1, r4
   214c0:	mov	r0, r8
   214c4:	bl	193e8 <_start@@Base+0x4dc0>
   214c8:	mov	r9, r0
   214cc:	cmp	r4, r0
   214d0:	beq	21b90 <_start@@Base+0xd568>
   214d4:	mov	r3, #0
   214d8:	str	r3, [sp, #296]	; 0x128
   214dc:	mov	r1, #3
   214e0:	ldr	r0, [r8]
   214e4:	bl	27c7c <flatcc_builder_start_table@@Base>
   214e8:	cmp	r0, #0
   214ec:	bne	21b10 <_start@@Base+0xd4e8>
   214f0:	add	r3, sp, #268	; 0x10c
   214f4:	mov	r2, sl
   214f8:	mov	r1, r9
   214fc:	mov	r0, r8
   21500:	bl	17de0 <_start@@Base+0x37b8>
   21504:	mov	r9, r0
   21508:	ldr	r3, [sp, #268]	; 0x10c
   2150c:	cmp	r3, #0
   21510:	beq	21b04 <_start@@Base+0xd4dc>
   21514:	mov	fp, #5
   21518:	ldr	r3, [pc, #732]	; 217fc <_start@@Base+0xd1d4>
   2151c:	add	r3, r3, #480	; 0x1e0
   21520:	str	r3, [sp, #20]
   21524:	add	r3, sp, #256	; 0x100
   21528:	ldrd	r4, [r3]
   2152c:	b	21764 <_start@@Base+0xd13c>
   21530:	mov	r3, fp
   21534:	mov	r2, sl
   21538:	mov	r1, r9
   2153c:	mov	r0, r8
   21540:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   21544:	mov	r9, r0
   21548:	b	21794 <_start@@Base+0xd16c>
   2154c:	ldrb	r2, [r9, #7]
   21550:	mov	r3, #0
   21554:	b	21560 <_start@@Base+0xcf38>
   21558:	mov	r2, #0
   2155c:	mov	r3, #0
   21560:	ldrb	r0, [r9, #6]
   21564:	mov	ip, #0
   21568:	str	ip, [sp, #236]	; 0xec
   2156c:	lsl	r1, r0, #8
   21570:	str	r1, [sp, #232]	; 0xe8
   21574:	ldrd	r0, [sp, #232]	; 0xe8
   21578:	orr	r0, r0, r2
   2157c:	orr	r1, r1, r3
   21580:	mov	r2, r0
   21584:	mov	r3, r1
   21588:	ldrb	r0, [r9, #5]
   2158c:	mov	ip, #0
   21590:	str	ip, [sp, #220]	; 0xdc
   21594:	lsl	r1, r0, #16
   21598:	str	r1, [sp, #216]	; 0xd8
   2159c:	ldrd	r0, [sp, #216]	; 0xd8
   215a0:	orr	r0, r0, r2
   215a4:	orr	r1, r1, r3
   215a8:	mov	r2, r0
   215ac:	mov	r3, r1
   215b0:	ldrb	r0, [r9, #4]
   215b4:	mov	ip, #0
   215b8:	str	ip, [sp, #204]	; 0xcc
   215bc:	lsl	r1, r0, #24
   215c0:	str	r1, [sp, #200]	; 0xc8
   215c4:	ldrd	r0, [sp, #200]	; 0xc8
   215c8:	orr	r0, r0, r2
   215cc:	orr	r1, r1, r3
   215d0:	mov	r2, r0
   215d4:	mov	r3, r1
   215d8:	ldrb	r1, [r9, #3]
   215dc:	str	r1, [sp, #188]	; 0xbc
   215e0:	mov	r1, #0
   215e4:	str	r1, [sp, #184]	; 0xb8
   215e8:	ldrd	r0, [sp, #184]	; 0xb8
   215ec:	orr	r0, r0, r2
   215f0:	orr	r1, r1, r3
   215f4:	mov	r2, r0
   215f8:	mov	r3, r1
   215fc:	ldrb	r0, [r9, #2]
   21600:	lsl	r1, r0, #8
   21604:	str	r1, [sp, #164]	; 0xa4
   21608:	mov	r1, #0
   2160c:	str	r1, [sp, #160]	; 0xa0
   21610:	ldrd	r0, [sp, #160]	; 0xa0
   21614:	orr	r0, r0, r2
   21618:	orr	r1, r1, r3
   2161c:	mov	r2, r0
   21620:	mov	r3, r1
   21624:	ldrb	r0, [r9, #1]
   21628:	lsl	r1, r0, #16
   2162c:	str	r1, [sp, #148]	; 0x94
   21630:	mov	r1, #0
   21634:	str	r1, [sp, #144]	; 0x90
   21638:	ldrd	r0, [sp, #144]	; 0x90
   2163c:	orr	r0, r0, r2
   21640:	orr	r1, r1, r3
   21644:	mov	r2, r0
   21648:	mov	r3, r1
   2164c:	ldrb	r0, [r9]
   21650:	lsl	r5, r0, #24
   21654:	mov	r4, #0
   21658:	orr	r2, r2, r4
   2165c:	orr	r3, r3, r5
   21660:	mvn	r0, #0
   21664:	ldr	r1, [pc, #388]	; 217f0 <_start@@Base+0xd1c8>
   21668:	cmp	r3, r1
   2166c:	cmpeq	r2, r0
   21670:	bls	21714 <_start@@Base+0xd0ec>
   21674:	mov	r0, #0
   21678:	bic	r1, r3, #255	; 0xff
   2167c:	add	r7, pc, #348	; 0x15c
   21680:	ldrd	r6, [r7]
   21684:	cmp	r1, r7
   21688:	cmpeq	r0, r6
   2168c:	beq	2198c <_start@@Base+0xd364>
   21690:	mov	r0, #0
   21694:	ldr	r1, [pc, #356]	; 21800 <_start@@Base+0xd1d8>
   21698:	and	r2, r2, r0
   2169c:	and	r3, r3, r1
   216a0:	mov	r0, #0
   216a4:	ldr	r1, [pc, #328]	; 217f4 <_start@@Base+0xd1cc>
   216a8:	cmp	r3, r1
   216ac:	cmpeq	r2, r0
   216b0:	beq	21a88 <_start@@Base+0xd460>
   216b4:	mov	r2, sl
   216b8:	mov	r1, r9
   216bc:	mov	r0, r8
   216c0:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   216c4:	mov	r9, r0
   216c8:	b	21740 <_start@@Base+0xd118>
   216cc:	mov	r2, #0
   216d0:	mov	r3, #0
   216d4:	b	21588 <_start@@Base+0xcf60>
   216d8:	mov	r2, #0
   216dc:	mov	r3, #0
   216e0:	b	215b0 <_start@@Base+0xcf88>
   216e4:	mov	r2, #0
   216e8:	mov	r3, #0
   216ec:	b	215d8 <_start@@Base+0xcfb0>
   216f0:	mov	r2, #0
   216f4:	mov	r3, #0
   216f8:	b	215fc <_start@@Base+0xcfd4>
   216fc:	mov	r2, #0
   21700:	mov	r3, #0
   21704:	b	21624 <_start@@Base+0xcffc>
   21708:	mov	r2, #0
   2170c:	mov	r3, #0
   21710:	b	2164c <_start@@Base+0xd024>
   21714:	and	r2, r2, #-16777216	; 0xff000000
   21718:	add	r1, pc, #200	; 0xc8
   2171c:	ldrd	r0, [r1]
   21720:	cmp	r3, r1
   21724:	cmpeq	r2, r0
   21728:	beq	21804 <_start@@Base+0xd1dc>
   2172c:	mov	r2, sl
   21730:	mov	r1, r9
   21734:	mov	r0, r8
   21738:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   2173c:	mov	r9, r0
   21740:	add	r3, sp, #268	; 0x10c
   21744:	mov	r2, sl
   21748:	mov	r1, r9
   2174c:	mov	r0, r8
   21750:	bl	18104 <_start@@Base+0x3adc>
   21754:	mov	r9, r0
   21758:	ldr	r3, [sp, #268]	; 0x10c
   2175c:	cmp	r3, #0
   21760:	beq	21afc <_start@@Base+0xd4d4>
   21764:	cmp	sl, r9
   21768:	beq	21794 <_start@@Base+0xd16c>
   2176c:	ldrb	r3, [r9]
   21770:	cmp	r3, #34	; 0x22
   21774:	addeq	r9, r9, #1
   21778:	moveq	r3, #0
   2177c:	streq	r3, [r8, #12]
   21780:	beq	21794 <_start@@Base+0xd16c>
   21784:	cmp	r3, #46	; 0x2e
   21788:	movne	r3, #1
   2178c:	strne	r3, [r8, #12]
   21790:	beq	21530 <_start@@Base+0xcf08>
   21794:	sub	r3, sl, r9
   21798:	cmp	r3, #8
   2179c:	movcs	r3, #8
   217a0:	sub	r3, r3, #1
   217a4:	cmp	r3, #7
   217a8:	ldrls	pc, [pc, r3, lsl #2]
   217ac:	b	2172c <_start@@Base+0xd104>
   217b0:	andeq	r1, r2, r8, lsl #14
   217b4:	strdeq	r1, [r2], -ip
   217b8:	strdeq	r1, [r2], -r0
   217bc:	andeq	r1, r2, r4, ror #13
   217c0:	ldrdeq	r1, [r2], -r8
   217c4:	andeq	r1, r2, ip, asr #13
   217c8:	andeq	r1, r2, r8, asr r5
   217cc:	andeq	r1, r2, ip, asr #10
   217d0:	ldrbvs	pc, [pc, #4095]!	; 227d7 <_start@@Base+0xe1af>	; <UNPREDICTABLE>
   217d4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   217d8:	strbvs	r7, [sp, #-116]!	; 0xffffff8c
   217dc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   217e0:	andeq	r0, r0, r0
   217e4:	strbtvc	r6, [r1], -r0, lsl #24
   217e8:	strvc	r0, [r0], #-0
   217ec:	cmnvs	pc, #461373440	; 0x1b800000
   217f0:	stmdbvs	r3!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   217f4:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   217f8:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   217fc:	andeq	r4, r5, r0, ror r0
   21800:			; <UNDEFINED> instruction: 0xffff0000
   21804:	mov	r3, fp
   21808:	mov	r2, sl
   2180c:	mov	r1, r9
   21810:	mov	r0, r8
   21814:	bl	193e8 <_start@@Base+0x4dc0>
   21818:	mov	r6, r0
   2181c:	cmp	r0, r9
   21820:	beq	21974 <_start@@Base+0xd34c>
   21824:	mov	r3, #0
   21828:	add	r2, sp, #264	; 0x108
   2182c:	add	r2, r2, #2
   21830:	strh	r3, [r2]
   21834:	mov	r2, #0
   21838:	mov	r3, #0
   2183c:	add	r1, sp, #280	; 0x118
   21840:	strd	r2, [r1]
   21844:	str	r4, [sp, #276]	; 0x114
   21848:	cmp	sl, r0
   2184c:	beq	21918 <_start@@Base+0xd2f0>
   21850:	str	r1, [sp]
   21854:	add	r3, sp, #276	; 0x114
   21858:	mov	r2, sl
   2185c:	mov	r1, r0
   21860:	mov	r0, r8
   21864:	bl	2ed84 <flatcc_json_parser_integer@@Base>
   21868:	mov	r9, r0
   2186c:	cmp	r6, r0
   21870:	beq	21918 <_start@@Base+0xd2f0>
   21874:	ldr	r3, [sp, #276]	; 0x114
   21878:	cmp	r3, r4
   2187c:	bne	218f8 <_start@@Base+0xd2d0>
   21880:	add	r3, sp, #280	; 0x118
   21884:	ldrd	r2, [r3]
   21888:	ldr	r0, [pc, #-152]	; 217f8 <_start@@Base+0xd1d0>
   2188c:	mov	r1, #0
   21890:	cmp	r3, r1
   21894:	cmpeq	r2, r0
   21898:	addls	r1, sp, #264	; 0x108
   2189c:	addls	r1, r1, #2
   218a0:	strhls	r2, [r1]
   218a4:	bhi	21958 <_start@@Base+0xd330>
   218a8:	add	r3, sp, #264	; 0x108
   218ac:	add	r3, r3, #2
   218b0:	ldrh	r3, [r3]
   218b4:	cmp	r3, #0
   218b8:	bne	218c8 <_start@@Base+0xd2a0>
   218bc:	ldr	r3, [r8, #8]
   218c0:	tst	r3, #2
   218c4:	beq	21740 <_start@@Base+0xd118>
   218c8:	mov	r3, #2
   218cc:	mov	r2, r3
   218d0:	mov	r1, r3
   218d4:	ldr	r0, [r8]
   218d8:	bl	29678 <flatcc_builder_table_add@@Base>
   218dc:	cmp	r0, #0
   218e0:	beq	21b6c <_start@@Base+0xd544>
   218e4:	add	r3, sp, #264	; 0x108
   218e8:	add	r3, r3, #2
   218ec:	ldrh	r3, [r3]
   218f0:	strh	r3, [r0]
   218f4:	b	21740 <_start@@Base+0xd118>
   218f8:	mov	r3, #8
   218fc:	mov	r2, sl
   21900:	mov	r1, r0
   21904:	mov	r0, r8
   21908:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2190c:	mov	r9, r0
   21910:	cmp	r6, r9
   21914:	bne	218a8 <_start@@Base+0xd280>
   21918:	add	r3, sp, #264	; 0x108
   2191c:	add	r3, r3, #2
   21920:	str	r3, [sp]
   21924:	ldr	r3, [pc, #-304]	; 217fc <_start@@Base+0xd1d4>
   21928:	add	r3, r3, #468	; 0x1d4
   2192c:	mov	r2, sl
   21930:	mov	r1, r6
   21934:	mov	r0, r8
   21938:	bl	19200 <_start@@Base+0x4bd8>
   2193c:	mov	r9, r0
   21940:	cmp	sl, r0
   21944:	cmpne	r6, r0
   21948:	bne	218a8 <_start@@Base+0xd280>
   2194c:	add	r3, sp, #256	; 0x100
   21950:	strd	r4, [r3]
   21954:	b	21b10 <_start@@Base+0xd4e8>
   21958:	mov	r3, #7
   2195c:	mov	r2, sl
   21960:	mov	r1, r9
   21964:	mov	r0, r8
   21968:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2196c:	mov	r9, r0
   21970:	b	21910 <_start@@Base+0xd2e8>
   21974:	mov	r2, sl
   21978:	mov	r1, r0
   2197c:	mov	r0, r8
   21980:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   21984:	mov	r9, r0
   21988:	b	21740 <_start@@Base+0xd118>
   2198c:	mov	r3, #3
   21990:	mov	r2, sl
   21994:	mov	r1, r9
   21998:	mov	r0, r8
   2199c:	bl	193e8 <_start@@Base+0x4dc0>
   219a0:	mov	r6, r0
   219a4:	cmp	r0, r9
   219a8:	beq	21a70 <_start@@Base+0xd448>
   219ac:	add	r3, sp, #304	; 0x130
   219b0:	mov	r0, #0
   219b4:	mov	r1, #0
   219b8:	strd	r0, [r3, #-24]!	; 0xffffffe8
   219bc:	mov	r2, sl
   219c0:	mov	r1, r6
   219c4:	mov	r0, r8
   219c8:	bl	17cd4 <_start@@Base+0x36ac>
   219cc:	mov	r9, r0
   219d0:	cmp	r6, r0
   219d4:	beq	21a20 <_start@@Base+0xd3f8>
   219d8:	add	r3, sp, #280	; 0x118
   219dc:	ldrd	r2, [r3]
   219e0:	orrs	r3, r2, r3
   219e4:	bne	219f4 <_start@@Base+0xd3cc>
   219e8:	ldr	r3, [r8, #8]
   219ec:	tst	r3, #2
   219f0:	beq	21740 <_start@@Base+0xd118>
   219f4:	mov	r3, #8
   219f8:	mov	r2, r3
   219fc:	mov	r1, #1
   21a00:	ldr	r0, [r8]
   21a04:	bl	29678 <flatcc_builder_table_add@@Base>
   21a08:	cmp	r0, #0
   21a0c:	beq	21a50 <_start@@Base+0xd428>
   21a10:	add	r3, sp, #280	; 0x118
   21a14:	ldrd	r2, [r3]
   21a18:	strd	r2, [r0]
   21a1c:	b	21740 <_start@@Base+0xd118>
   21a20:	add	r3, sp, #280	; 0x118
   21a24:	str	r3, [sp]
   21a28:	ldr	r3, [sp, #20]
   21a2c:	mov	r2, sl
   21a30:	mov	r1, r0
   21a34:	mov	r0, r8
   21a38:	bl	1ac34 <_start@@Base+0x660c>
   21a3c:	cmp	sl, r0
   21a40:	cmpne	r9, r0
   21a44:	beq	21a64 <_start@@Base+0xd43c>
   21a48:	mov	r9, r0
   21a4c:	b	219d8 <_start@@Base+0xd3b0>
   21a50:	add	r3, sp, #256	; 0x100
   21a54:	strd	r4, [r3]
   21a58:	mov	r0, r9
   21a5c:	mov	r9, r0
   21a60:	b	21b10 <_start@@Base+0xd4e8>
   21a64:	add	r3, sp, #256	; 0x100
   21a68:	strd	r4, [r3]
   21a6c:	b	21a5c <_start@@Base+0xd434>
   21a70:	mov	r2, sl
   21a74:	mov	r1, r0
   21a78:	mov	r0, r8
   21a7c:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   21a80:	mov	r9, r0
   21a84:	b	21740 <_start@@Base+0xd118>
   21a88:	mov	r3, #2
   21a8c:	mov	r2, sl
   21a90:	mov	r1, r9
   21a94:	mov	r0, r8
   21a98:	bl	193e8 <_start@@Base+0x4dc0>
   21a9c:	mov	r1, r0
   21aa0:	cmp	r0, r9
   21aa4:	beq	21ae8 <_start@@Base+0xd4c0>
   21aa8:	add	r3, sp, #272	; 0x110
   21aac:	mov	r2, sl
   21ab0:	mov	r0, r8
   21ab4:	bl	2f2b4 <flatcc_json_parser_build_string@@Base>
   21ab8:	mov	r9, r0
   21abc:	ldr	r3, [sp, #272]	; 0x110
   21ac0:	cmp	r3, #0
   21ac4:	beq	21b78 <_start@@Base+0xd550>
   21ac8:	mov	r1, #0
   21acc:	ldr	r0, [r8]
   21ad0:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   21ad4:	cmp	r0, #0
   21ad8:	beq	21b84 <_start@@Base+0xd55c>
   21adc:	ldr	r3, [sp, #272]	; 0x110
   21ae0:	str	r3, [r0]
   21ae4:	b	21740 <_start@@Base+0xd118>
   21ae8:	mov	r2, sl
   21aec:	mov	r0, r8
   21af0:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   21af4:	mov	r9, r0
   21af8:	b	21740 <_start@@Base+0xd118>
   21afc:	add	r3, sp, #256	; 0x100
   21b00:	strd	r4, [r3]
   21b04:	ldr	r3, [r8, #24]
   21b08:	cmp	r3, #0
   21b0c:	beq	21b54 <_start@@Base+0xd52c>
   21b10:	mov	r3, #33	; 0x21
   21b14:	mov	r2, sl
   21b18:	mov	r1, r9
   21b1c:	mov	r0, r8
   21b20:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   21b24:	mov	r9, r0
   21b28:	ldr	r3, [sp, #296]	; 0x128
   21b2c:	cmp	r3, #0
   21b30:	beq	23208 <_start@@Base+0xebe0>
   21b34:	mov	r1, #14
   21b38:	ldr	r0, [r8]
   21b3c:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   21b40:	cmp	r0, #0
   21b44:	beq	23210 <_start@@Base+0xebe8>
   21b48:	ldr	r3, [sp, #296]	; 0x128
   21b4c:	str	r3, [r0]
   21b50:	b	21e30 <_start@@Base+0xd808>
   21b54:	ldr	r0, [r8]
   21b58:	bl	286cc <flatcc_builder_end_table@@Base>
   21b5c:	str	r0, [sp, #296]	; 0x128
   21b60:	cmp	r0, #0
   21b64:	beq	21b10 <_start@@Base+0xd4e8>
   21b68:	b	21b28 <_start@@Base+0xd500>
   21b6c:	add	r3, sp, #256	; 0x100
   21b70:	strd	r4, [r3]
   21b74:	b	21b10 <_start@@Base+0xd4e8>
   21b78:	add	r3, sp, #256	; 0x100
   21b7c:	strd	r4, [r3]
   21b80:	b	21b10 <_start@@Base+0xd4e8>
   21b84:	add	r3, sp, #256	; 0x100
   21b88:	strd	r4, [r3]
   21b8c:	b	21b10 <_start@@Base+0xd4e8>
   21b90:	mov	r2, sl
   21b94:	mov	r1, r0
   21b98:	mov	r0, r8
   21b9c:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   21ba0:	mov	r9, r0
   21ba4:	b	21e30 <_start@@Base+0xd808>
   21ba8:	ldr	r2, [pc, #-944]	; 21800 <_start@@Base+0xd1d8>
   21bac:	mvn	r3, #0
   21bb0:	and	r2, r2, r0
   21bb4:	and	r3, r3, r1
   21bb8:	add	r1, pc, #1000	; 0x3e8
   21bbc:	ldrd	r0, [r1]
   21bc0:	cmp	r3, r1
   21bc4:	cmpeq	r2, r0
   21bc8:	beq	21bfc <_start@@Base+0xd5d4>
   21bcc:	and	r4, r4, #-16777216	; 0xff000000
   21bd0:	add	r3, pc, #984	; 0x3d8
   21bd4:	ldrd	r2, [r3]
   21bd8:	cmp	r5, r3
   21bdc:	cmpeq	r4, r2
   21be0:	beq	21cf0 <_start@@Base+0xd6c8>
   21be4:	mov	r2, sl
   21be8:	mov	r1, r9
   21bec:	mov	r0, r8
   21bf0:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   21bf4:	mov	r9, r0
   21bf8:	b	21e30 <_start@@Base+0xd808>
   21bfc:	mov	r3, #6
   21c00:	mov	r2, sl
   21c04:	mov	r1, r9
   21c08:	mov	r0, r8
   21c0c:	bl	193e8 <_start@@Base+0x4dc0>
   21c10:	mov	r4, r0
   21c14:	cmp	r0, r9
   21c18:	beq	21cd8 <_start@@Base+0xd6b0>
   21c1c:	add	r3, sp, #304	; 0x130
   21c20:	mov	r2, #0
   21c24:	str	r2, [r3, #-24]!	; 0xffffffe8
   21c28:	mov	r2, sl
   21c2c:	mov	r1, r0
   21c30:	mov	r0, r8
   21c34:	bl	2ded8 <flatcc_json_parser_float@@Base>
   21c38:	mov	r9, r0
   21c3c:	cmp	r4, r0
   21c40:	beq	21c8c <_start@@Base+0xd664>
   21c44:	vldr	s14, [sp, #280]	; 0x118
   21c48:	vldr	s15, [pc, #928]	; 21ff0 <_start@@Base+0xd9c8>
   21c4c:	vcmp.f32	s14, s15
   21c50:	vmrs	APSR_nzcv, fpscr
   21c54:	bne	21c64 <_start@@Base+0xd63c>
   21c58:	ldr	r3, [r8, #8]
   21c5c:	tst	r3, #2
   21c60:	beq	21e30 <_start@@Base+0xd808>
   21c64:	mov	r3, #4
   21c68:	mov	r2, r3
   21c6c:	mov	r1, #26
   21c70:	ldr	r0, [r8]
   21c74:	bl	29678 <flatcc_builder_table_add@@Base>
   21c78:	cmp	r0, #0
   21c7c:	beq	21cc0 <_start@@Base+0xd698>
   21c80:	ldr	r3, [sp, #280]	; 0x118
   21c84:	str	r3, [r0]
   21c88:	b	21e30 <_start@@Base+0xd808>
   21c8c:	add	r3, sp, #280	; 0x118
   21c90:	str	r3, [sp]
   21c94:	ldr	r3, [pc, #864]	; 21ffc <_start@@Base+0xd9d4>
   21c98:	add	r3, r3, #492	; 0x1ec
   21c9c:	mov	r2, sl
   21ca0:	mov	r1, r0
   21ca4:	mov	r0, r8
   21ca8:	bl	18360 <_start@@Base+0x3d38>
   21cac:	cmp	sl, r0
   21cb0:	cmpne	r9, r0
   21cb4:	beq	21cd0 <_start@@Base+0xd6a8>
   21cb8:	mov	r9, r0
   21cbc:	b	21c44 <_start@@Base+0xd61c>
   21cc0:	mov	fp, r8
   21cc4:	mov	r0, r9
   21cc8:	mov	r9, r0
   21ccc:	b	22fdc <_start@@Base+0xe9b4>
   21cd0:	mov	fp, r8
   21cd4:	b	21cc8 <_start@@Base+0xd6a0>
   21cd8:	mov	r2, sl
   21cdc:	mov	r1, r0
   21ce0:	mov	r0, r8
   21ce4:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   21ce8:	mov	r9, r0
   21cec:	b	21e30 <_start@@Base+0xd808>
   21cf0:	mov	r3, #5
   21cf4:	mov	r2, sl
   21cf8:	mov	r1, r9
   21cfc:	mov	r0, r8
   21d00:	bl	193e8 <_start@@Base+0x4dc0>
   21d04:	mov	r4, r0
   21d08:	cmp	r0, r9
   21d0c:	beq	21dcc <_start@@Base+0xd7a4>
   21d10:	add	r3, sp, #304	; 0x130
   21d14:	mov	r2, #0
   21d18:	str	r2, [r3, #-24]!	; 0xffffffe8
   21d1c:	mov	r2, sl
   21d20:	mov	r1, r0
   21d24:	mov	r0, r8
   21d28:	bl	2ded8 <flatcc_json_parser_float@@Base>
   21d2c:	mov	r9, r0
   21d30:	cmp	r4, r0
   21d34:	beq	21d80 <_start@@Base+0xd758>
   21d38:	vldr	s14, [sp, #280]	; 0x118
   21d3c:	vldr	s15, [pc, #688]	; 21ff4 <_start@@Base+0xd9cc>
   21d40:	vcmp.f32	s14, s15
   21d44:	vmrs	APSR_nzcv, fpscr
   21d48:	bne	21d58 <_start@@Base+0xd730>
   21d4c:	ldr	r3, [r8, #8]
   21d50:	tst	r3, #2
   21d54:	beq	21e30 <_start@@Base+0xd808>
   21d58:	mov	r3, #4
   21d5c:	mov	r2, r3
   21d60:	mov	r1, #25
   21d64:	ldr	r0, [r8]
   21d68:	bl	29678 <flatcc_builder_table_add@@Base>
   21d6c:	cmp	r0, #0
   21d70:	beq	21db4 <_start@@Base+0xd78c>
   21d74:	ldr	r3, [sp, #280]	; 0x118
   21d78:	str	r3, [r0]
   21d7c:	b	21e30 <_start@@Base+0xd808>
   21d80:	add	r3, sp, #280	; 0x118
   21d84:	str	r3, [sp]
   21d88:	ldr	r3, [pc, #620]	; 21ffc <_start@@Base+0xd9d4>
   21d8c:	add	r3, r3, #504	; 0x1f8
   21d90:	mov	r2, sl
   21d94:	mov	r1, r0
   21d98:	mov	r0, r8
   21d9c:	bl	18360 <_start@@Base+0x3d38>
   21da0:	cmp	sl, r0
   21da4:	cmpne	r9, r0
   21da8:	beq	21dc4 <_start@@Base+0xd79c>
   21dac:	mov	r9, r0
   21db0:	b	21d38 <_start@@Base+0xd710>
   21db4:	mov	fp, r8
   21db8:	mov	r0, r9
   21dbc:	mov	r9, r0
   21dc0:	b	22fdc <_start@@Base+0xe9b4>
   21dc4:	mov	fp, r8
   21dc8:	b	21dbc <_start@@Base+0xd794>
   21dcc:	mov	r2, sl
   21dd0:	mov	r1, r0
   21dd4:	mov	r0, r8
   21dd8:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   21ddc:	mov	r9, r0
   21de0:	b	21e30 <_start@@Base+0xd808>
   21de4:	add	r3, pc, #460	; 0x1cc
   21de8:	ldrd	r2, [r3]
   21dec:	cmp	r1, r3
   21df0:	cmpeq	r0, r2
   21df4:	bhi	22054 <_start@@Base+0xda2c>
   21df8:	ldr	r2, [pc, #504]	; 21ff8 <_start@@Base+0xd9d0>
   21dfc:	mvn	r3, #0
   21e00:	and	r4, r4, r2
   21e04:	and	r5, r5, r3
   21e08:	add	r3, pc, #432	; 0x1b0
   21e0c:	ldrd	r2, [r3]
   21e10:	cmp	r5, r3
   21e14:	cmpeq	r4, r2
   21e18:	beq	21f18 <_start@@Base+0xd8f0>
   21e1c:	mov	r2, sl
   21e20:	mov	r1, r9
   21e24:	mov	r0, r8
   21e28:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   21e2c:	mov	r9, r0
   21e30:	add	r3, sp, #300	; 0x12c
   21e34:	mov	r2, sl
   21e38:	mov	r1, r9
   21e3c:	mov	r0, r8
   21e40:	bl	18104 <_start@@Base+0x3adc>
   21e44:	mov	r9, r0
   21e48:	ldr	r3, [sp, #300]	; 0x12c
   21e4c:	cmp	r3, #0
   21e50:	beq	22fcc <_start@@Base+0xe9a4>
   21e54:	cmp	sl, r9
   21e58:	beq	21e84 <_start@@Base+0xd85c>
   21e5c:	ldrb	r3, [r9]
   21e60:	cmp	r3, #34	; 0x22
   21e64:	addeq	r9, r9, #1
   21e68:	moveq	r3, #0
   21e6c:	streq	r3, [r8, #12]
   21e70:	beq	21e84 <_start@@Base+0xd85c>
   21e74:	cmp	r3, #46	; 0x2e
   21e78:	movne	r3, #1
   21e7c:	strne	r3, [r8, #12]
   21e80:	beq	1e728 <_start@@Base+0xa100>
   21e84:	mov	r1, sl
   21e88:	mov	r0, r9
   21e8c:	bl	14750 <_start@@Base+0x128>
   21e90:	mov	r4, r0
   21e94:	mov	r5, r1
   21e98:	add	r3, pc, #296	; 0x128
   21e9c:	ldrd	r2, [r3]
   21ea0:	cmp	r1, r3
   21ea4:	cmpeq	r0, r2
   21ea8:	bhi	1fef0 <_start@@Base+0xb8c8>
   21eac:	add	r3, pc, #284	; 0x11c
   21eb0:	ldrd	r2, [r3]
   21eb4:	cmp	r1, r3
   21eb8:	cmpeq	r0, r2
   21ebc:	bhi	1ef0c <_start@@Base+0xa8e4>
   21ec0:	add	r3, pc, #272	; 0x110
   21ec4:	ldrd	r2, [r3]
   21ec8:	cmp	r1, r3
   21ecc:	cmpeq	r0, r2
   21ed0:	bhi	1e930 <_start@@Base+0xa308>
   21ed4:	and	r4, r0, #-16777216	; 0xff000000
   21ed8:	add	r3, pc, #256	; 0x100
   21edc:	ldrd	r2, [r3]
   21ee0:	cmp	r1, r3
   21ee4:	cmpeq	r4, r2
   21ee8:	beq	1e744 <_start@@Base+0xa11c>
   21eec:	add	r3, pc, #244	; 0xf4
   21ef0:	ldrd	r2, [r3]
   21ef4:	cmp	r1, r3
   21ef8:	cmpeq	r4, r2
   21efc:	beq	1e7b8 <_start@@Base+0xa190>
   21f00:	mov	r2, sl
   21f04:	mov	r1, r9
   21f08:	mov	r0, r8
   21f0c:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   21f10:	mov	r9, r0
   21f14:	b	21e30 <_start@@Base+0xd808>
   21f18:	mov	r3, #6
   21f1c:	mov	r2, sl
   21f20:	mov	r1, r9
   21f24:	mov	r0, r8
   21f28:	bl	193e8 <_start@@Base+0x4dc0>
   21f2c:	mov	r4, r0
   21f30:	cmp	r0, r9
   21f34:	beq	2203c <_start@@Base+0xda14>
   21f38:	add	r3, sp, #304	; 0x130
   21f3c:	mov	r2, #0
   21f40:	str	r2, [r3, #-24]!	; 0xffffffe8
   21f44:	mov	r2, sl
   21f48:	mov	r1, r0
   21f4c:	mov	r0, r8
   21f50:	bl	2ded8 <flatcc_json_parser_float@@Base>
   21f54:	mov	r9, r0
   21f58:	cmp	r4, r0
   21f5c:	beq	22000 <_start@@Base+0xd9d8>
   21f60:	vldr	s15, [sp, #280]	; 0x118
   21f64:	vcmp.f32	s15, #0.0
   21f68:	vmrs	APSR_nzcv, fpscr
   21f6c:	bne	21f7c <_start@@Base+0xd954>
   21f70:	ldr	r3, [r8, #8]
   21f74:	tst	r3, #2
   21f78:	beq	21e30 <_start@@Base+0xd808>
   21f7c:	mov	r3, #4
   21f80:	mov	r2, r3
   21f84:	mov	r1, #27
   21f88:	ldr	r0, [r8]
   21f8c:	bl	29678 <flatcc_builder_table_add@@Base>
   21f90:	cmp	r0, #0
   21f94:	beq	23218 <_start@@Base+0xebf0>
   21f98:	ldr	r3, [sp, #280]	; 0x118
   21f9c:	str	r3, [r0]
   21fa0:	b	21e30 <_start@@Base+0xd808>
   21fa4:	nop			; (mov r0, r0)
   21fa8:	ldrtvs	r0, [r2], -r0
   21fac:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   21fb0:	strvs	r0, [r0], -r0
   21fb4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   21fb8:	stmdavs	r1!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^
   21fbc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   21fc0:	ldrtvs	r0, [r3], -r0
   21fc4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   21fc8:	cmnvs	r2, r0, ror #4
   21fcc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   21fd0:			; <UNDEFINED> instruction: 0xffffffff
   21fd4:	cdpvs	13, 6, cr6, cr1, cr4, {3}
   21fd8:			; <UNDEFINED> instruction: 0xffffffff
   21fdc:			; <UNDEFINED> instruction: 0x666c6577
   21fe0:	stmdbvc	r0, {}	; <UNPREDICTABLE>
   21fe4:	strbvs	r6, [lr, #-1389]!	; 0xfffffa93
   21fe8:	andvc	r0, r0, #0
   21fec:	cmnvs	pc, #28416	; 0x6f00
   21ff0:	submi	r0, r0, r0
   21ff4:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   21ff8:			; <UNDEFINED> instruction: 0xffff0000
   21ffc:	andeq	r4, r5, r0, ror r0
   22000:	add	r3, sp, #280	; 0x118
   22004:	str	r3, [sp]
   22008:	ldr	r3, [pc, #-20]	; 21ffc <_start@@Base+0xd9d4>
   2200c:	add	r3, r3, #516	; 0x204
   22010:	mov	r2, sl
   22014:	mov	r1, r0
   22018:	mov	r0, r8
   2201c:	bl	18360 <_start@@Base+0x3d38>
   22020:	cmp	sl, r0
   22024:	cmpne	r9, r0
   22028:	movne	r9, r0
   2202c:	bne	21f60 <_start@@Base+0xd938>
   22030:	mov	fp, r8
   22034:	mov	r9, r0
   22038:	b	22fdc <_start@@Base+0xe9b4>
   2203c:	mov	r2, sl
   22040:	mov	r1, r0
   22044:	mov	r0, r8
   22048:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   2204c:	mov	r9, r0
   22050:	b	21e30 <_start@@Base+0xd808>
   22054:	add	r3, pc, #956	; 0x3bc
   22058:	ldrd	r2, [r3]
   2205c:	cmp	r1, r3
   22060:	cmpeq	r0, r2
   22064:	beq	220a8 <_start@@Base+0xda80>
   22068:	add	r3, pc, #944	; 0x3b0
   2206c:	ldrd	r2, [r3]
   22070:	cmp	r1, r3
   22074:	cmpeq	r0, r2
   22078:	bhi	22c20 <_start@@Base+0xe5f8>
   2207c:	add	r3, pc, #932	; 0x3a4
   22080:	ldrd	r2, [r3]
   22084:	cmp	r1, r3
   22088:	cmpeq	r0, r2
   2208c:	beq	229e8 <_start@@Base+0xe3c0>
   22090:	mov	r2, sl
   22094:	mov	r1, r9
   22098:	mov	r0, r8
   2209c:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   220a0:	mov	r9, r0
   220a4:	b	21e30 <_start@@Base+0xd808>
   220a8:	add	r4, r9, #8
   220ac:	mov	r1, sl
   220b0:	mov	r0, r4
   220b4:	bl	14750 <_start@@Base+0x128>
   220b8:	add	r3, pc, #880	; 0x370
   220bc:	ldrd	r2, [r3]
   220c0:	cmp	r1, r3
   220c4:	cmpeq	r0, r2
   220c8:	bhi	222f4 <_start@@Base+0xdccc>
   220cc:	add	r3, pc, #868	; 0x364
   220d0:	ldrd	r2, [r3]
   220d4:	cmp	r1, r3
   220d8:	cmpeq	r0, r2
   220dc:	beq	220f8 <_start@@Base+0xdad0>
   220e0:	mov	r2, sl
   220e4:	mov	r1, r4
   220e8:	mov	r0, r8
   220ec:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   220f0:	mov	r9, r0
   220f4:	b	21e30 <_start@@Base+0xd808>
   220f8:	mov	r3, #8
   220fc:	mov	r2, sl
   22100:	mov	r1, r4
   22104:	mov	r0, r8
   22108:	bl	193e8 <_start@@Base+0x4dc0>
   2210c:	mov	r5, r0
   22110:	cmp	r4, r0
   22114:	beq	221cc <_start@@Base+0xdba4>
   22118:	add	r3, sp, #304	; 0x130
   2211c:	mov	r2, #0
   22120:	str	r2, [r3, #-24]!	; 0xffffffe8
   22124:	mov	r2, sl
   22128:	mov	r1, r0
   2212c:	mov	r0, r8
   22130:	bl	17a24 <_start@@Base+0x33fc>
   22134:	mov	r9, r0
   22138:	cmp	r5, r0
   2213c:	beq	22180 <_start@@Base+0xdb58>
   22140:	ldr	r3, [sp, #280]	; 0x118
   22144:	cmp	r3, #0
   22148:	bne	22158 <_start@@Base+0xdb30>
   2214c:	ldr	r3, [r8, #8]
   22150:	tst	r3, #2
   22154:	beq	21e30 <_start@@Base+0xd808>
   22158:	mov	r3, #4
   2215c:	mov	r2, r3
   22160:	mov	r1, #16
   22164:	ldr	r0, [r8]
   22168:	bl	29678 <flatcc_builder_table_add@@Base>
   2216c:	cmp	r0, #0
   22170:	beq	221b4 <_start@@Base+0xdb8c>
   22174:	ldr	r3, [sp, #280]	; 0x118
   22178:	str	r3, [r0]
   2217c:	b	21e30 <_start@@Base+0xd808>
   22180:	add	r3, sp, #280	; 0x118
   22184:	str	r3, [sp]
   22188:	ldr	r3, [pc, #704]	; 22450 <_start@@Base+0xde28>
   2218c:	add	r3, r3, #528	; 0x210
   22190:	mov	r2, sl
   22194:	mov	r1, r0
   22198:	mov	r0, r8
   2219c:	bl	18c34 <_start@@Base+0x460c>
   221a0:	cmp	sl, r0
   221a4:	cmpne	r9, r0
   221a8:	beq	221c4 <_start@@Base+0xdb9c>
   221ac:	mov	r9, r0
   221b0:	b	22140 <_start@@Base+0xdb18>
   221b4:	mov	fp, r8
   221b8:	mov	r0, r9
   221bc:	mov	r9, r0
   221c0:	b	22fdc <_start@@Base+0xe9b4>
   221c4:	mov	fp, r8
   221c8:	b	221bc <_start@@Base+0xdb94>
   221cc:	add	r9, r9, #16
   221d0:	mov	r1, sl
   221d4:	mov	r0, r9
   221d8:	bl	14750 <_start@@Base+0x128>
   221dc:	mov	r0, #0
   221e0:	and	r1, r1, #-16777216	; 0xff000000
   221e4:	cmp	r1, #1627389952	; 0x61000000
   221e8:	cmpeq	r0, #0
   221ec:	beq	22208 <_start@@Base+0xdbe0>
   221f0:	mov	r2, sl
   221f4:	mov	r1, r9
   221f8:	mov	r0, r8
   221fc:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   22200:	mov	r9, r0
   22204:	b	21e30 <_start@@Base+0xd808>
   22208:	mov	r3, #1
   2220c:	mov	r2, sl
   22210:	mov	r1, r9
   22214:	mov	r0, r8
   22218:	bl	193e8 <_start@@Base+0x4dc0>
   2221c:	mov	r4, r0
   22220:	cmp	r9, r0
   22224:	beq	222dc <_start@@Base+0xdcb4>
   22228:	add	r3, sp, #304	; 0x130
   2222c:	mov	r2, #0
   22230:	str	r2, [r3, #-24]!	; 0xffffffe8
   22234:	mov	r2, sl
   22238:	mov	r1, r0
   2223c:	mov	r0, r8
   22240:	bl	17a24 <_start@@Base+0x33fc>
   22244:	mov	r9, r0
   22248:	cmp	r4, r0
   2224c:	beq	22290 <_start@@Base+0xdc68>
   22250:	ldr	r3, [sp, #280]	; 0x118
   22254:	cmp	r3, #0
   22258:	bne	22268 <_start@@Base+0xdc40>
   2225c:	ldr	r3, [r8, #8]
   22260:	tst	r3, #2
   22264:	beq	21e30 <_start@@Base+0xd808>
   22268:	mov	r3, #4
   2226c:	mov	r2, r3
   22270:	mov	r1, #20
   22274:	ldr	r0, [r8]
   22278:	bl	29678 <flatcc_builder_table_add@@Base>
   2227c:	cmp	r0, #0
   22280:	beq	222c4 <_start@@Base+0xdc9c>
   22284:	ldr	r3, [sp, #280]	; 0x118
   22288:	str	r3, [r0]
   2228c:	b	21e30 <_start@@Base+0xd808>
   22290:	add	r3, sp, #280	; 0x118
   22294:	str	r3, [sp]
   22298:	ldr	r3, [pc, #432]	; 22450 <_start@@Base+0xde28>
   2229c:	add	r3, r3, #540	; 0x21c
   222a0:	mov	r2, sl
   222a4:	mov	r1, r0
   222a8:	mov	r0, r8
   222ac:	bl	18c34 <_start@@Base+0x460c>
   222b0:	cmp	sl, r0
   222b4:	cmpne	r9, r0
   222b8:	beq	222d4 <_start@@Base+0xdcac>
   222bc:	mov	r9, r0
   222c0:	b	22250 <_start@@Base+0xdc28>
   222c4:	mov	fp, r8
   222c8:	mov	r0, r9
   222cc:	mov	r9, r0
   222d0:	b	22fdc <_start@@Base+0xe9b4>
   222d4:	mov	fp, r8
   222d8:	b	222cc <_start@@Base+0xdca4>
   222dc:	mov	r2, sl
   222e0:	mov	r1, r0
   222e4:	mov	r0, r8
   222e8:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   222ec:	mov	r9, r0
   222f0:	b	21e30 <_start@@Base+0xd808>
   222f4:	add	r3, pc, #324	; 0x144
   222f8:	ldrd	r2, [r3]
   222fc:	cmp	r1, r3
   22300:	cmpeq	r0, r2
   22304:	bhi	22588 <_start@@Base+0xdf60>
   22308:	add	r3, pc, #312	; 0x138
   2230c:	ldrd	r2, [r3]
   22310:	cmp	r1, r3
   22314:	cmpeq	r0, r2
   22318:	beq	22334 <_start@@Base+0xdd0c>
   2231c:	mov	r2, sl
   22320:	mov	r1, r4
   22324:	mov	r0, r8
   22328:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   2232c:	mov	r9, r0
   22330:	b	21e30 <_start@@Base+0xd808>
   22334:	mov	r3, #8
   22338:	mov	r2, sl
   2233c:	mov	r1, r4
   22340:	mov	r0, r8
   22344:	bl	193e8 <_start@@Base+0x4dc0>
   22348:	mov	r5, r0
   2234c:	cmp	r4, r0
   22350:	beq	22454 <_start@@Base+0xde2c>
   22354:	add	r3, sp, #304	; 0x130
   22358:	mov	r0, #0
   2235c:	mov	r1, #0
   22360:	strd	r0, [r3, #-24]!	; 0xffffffe8
   22364:	mov	r2, sl
   22368:	mov	r1, r5
   2236c:	mov	r0, r8
   22370:	bl	17cd4 <_start@@Base+0x36ac>
   22374:	mov	r9, r0
   22378:	cmp	r5, r0
   2237c:	beq	223c8 <_start@@Base+0xdda0>
   22380:	add	r3, sp, #280	; 0x118
   22384:	ldrd	r2, [r3]
   22388:	orrs	r3, r2, r3
   2238c:	bne	2239c <_start@@Base+0xdd74>
   22390:	ldr	r3, [r8, #8]
   22394:	tst	r3, #2
   22398:	beq	21e30 <_start@@Base+0xd808>
   2239c:	mov	r3, #8
   223a0:	mov	r2, r3
   223a4:	mov	r1, #18
   223a8:	ldr	r0, [r8]
   223ac:	bl	29678 <flatcc_builder_table_add@@Base>
   223b0:	cmp	r0, #0
   223b4:	beq	223fc <_start@@Base+0xddd4>
   223b8:	add	r3, sp, #280	; 0x118
   223bc:	ldrd	r2, [r3]
   223c0:	strd	r2, [r0]
   223c4:	b	21e30 <_start@@Base+0xd808>
   223c8:	add	r3, sp, #280	; 0x118
   223cc:	str	r3, [sp]
   223d0:	ldr	r3, [pc, #120]	; 22450 <_start@@Base+0xde28>
   223d4:	add	r3, r3, #552	; 0x228
   223d8:	mov	r2, sl
   223dc:	mov	r1, r0
   223e0:	mov	r0, r8
   223e4:	bl	1ac34 <_start@@Base+0x660c>
   223e8:	cmp	sl, r0
   223ec:	cmpne	r9, r0
   223f0:	beq	2240c <_start@@Base+0xdde4>
   223f4:	mov	r9, r0
   223f8:	b	22380 <_start@@Base+0xdd58>
   223fc:	mov	fp, r8
   22400:	mov	r0, r9
   22404:	mov	r9, r0
   22408:	b	22fdc <_start@@Base+0xe9b4>
   2240c:	mov	fp, r8
   22410:	b	22404 <_start@@Base+0xdddc>
   22414:	nop			; (mov r0, r0)
   22418:	stmdavs	r1!, {r3, r5, r6, r8, r9, ip, sp, lr}^
   2241c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   22420:	svcvs	0x00725f6e
   22424:			; <UNDEFINED> instruction: 0x76656374
   22428:	mcrvs	3, 3, r7, cr5, cr4, {3}
   2242c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   22430:			; <UNDEFINED> instruction: 0x666e7630
   22434:	teqvc	r6, #1593835520	; 0x5f000000
   22438:			; <UNDEFINED> instruction: 0x666e7631
   2243c:	teqvc	r3, #-268435451	; 0xf0000005
   22440:			; <UNDEFINED> instruction: 0x666e7630
   22444:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   22448:			; <UNDEFINED> instruction: 0x666e7631
   2244c:	teqvc	r6, #1593835520	; 0x5f000000
   22450:	andeq	r4, r5, r0, ror r0
   22454:	add	r9, r9, #16
   22458:	mov	r1, sl
   2245c:	mov	r0, r9
   22460:	bl	14750 <_start@@Base+0x128>
   22464:	mov	r0, #0
   22468:	and	r1, r1, #-16777216	; 0xff000000
   2246c:	cmp	r1, #1627389952	; 0x61000000
   22470:	cmpeq	r0, #0
   22474:	beq	22490 <_start@@Base+0xde68>
   22478:	mov	r2, sl
   2247c:	mov	r1, r9
   22480:	mov	r0, r8
   22484:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   22488:	mov	r9, r0
   2248c:	b	21e30 <_start@@Base+0xd808>
   22490:	mov	r3, #1
   22494:	mov	r2, sl
   22498:	mov	r1, r9
   2249c:	mov	r0, r8
   224a0:	bl	193e8 <_start@@Base+0x4dc0>
   224a4:	mov	r4, r0
   224a8:	cmp	r9, r0
   224ac:	beq	22570 <_start@@Base+0xdf48>
   224b0:	add	r3, sp, #304	; 0x130
   224b4:	mov	r0, #0
   224b8:	mov	r1, #0
   224bc:	strd	r0, [r3, #-24]!	; 0xffffffe8
   224c0:	mov	r2, sl
   224c4:	mov	r1, r4
   224c8:	mov	r0, r8
   224cc:	bl	17cd4 <_start@@Base+0x36ac>
   224d0:	mov	r9, r0
   224d4:	cmp	r4, r0
   224d8:	beq	22524 <_start@@Base+0xdefc>
   224dc:	add	r3, sp, #280	; 0x118
   224e0:	ldrd	r2, [r3]
   224e4:	orrs	r3, r2, r3
   224e8:	bne	224f8 <_start@@Base+0xded0>
   224ec:	ldr	r3, [r8, #8]
   224f0:	tst	r3, #2
   224f4:	beq	21e30 <_start@@Base+0xd808>
   224f8:	mov	r3, #8
   224fc:	mov	r2, r3
   22500:	mov	r1, #22
   22504:	ldr	r0, [r8]
   22508:	bl	29678 <flatcc_builder_table_add@@Base>
   2250c:	cmp	r0, #0
   22510:	beq	22558 <_start@@Base+0xdf30>
   22514:	add	r3, sp, #280	; 0x118
   22518:	ldrd	r2, [r3]
   2251c:	strd	r2, [r0]
   22520:	b	21e30 <_start@@Base+0xd808>
   22524:	add	r3, sp, #280	; 0x118
   22528:	str	r3, [sp]
   2252c:	ldr	r3, [pc, #-228]	; 22450 <_start@@Base+0xde28>
   22530:	add	r3, r3, #564	; 0x234
   22534:	mov	r2, sl
   22538:	mov	r1, r0
   2253c:	mov	r0, r8
   22540:	bl	1ac34 <_start@@Base+0x660c>
   22544:	cmp	sl, r0
   22548:	cmpne	r9, r0
   2254c:	beq	22568 <_start@@Base+0xdf40>
   22550:	mov	r9, r0
   22554:	b	224dc <_start@@Base+0xdeb4>
   22558:	mov	fp, r8
   2255c:	mov	r0, r9
   22560:	mov	r9, r0
   22564:	b	22fdc <_start@@Base+0xe9b4>
   22568:	mov	fp, r8
   2256c:	b	22560 <_start@@Base+0xdf38>
   22570:	mov	r2, sl
   22574:	mov	r1, r0
   22578:	mov	r0, r8
   2257c:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   22580:	mov	r9, r0
   22584:	b	21e30 <_start@@Base+0xd808>
   22588:	add	r3, pc, #848	; 0x350
   2258c:	ldrd	r2, [r3]
   22590:	cmp	r1, r3
   22594:	cmpeq	r0, r2
   22598:	beq	225c8 <_start@@Base+0xdfa0>
   2259c:	add	r3, pc, #836	; 0x344
   225a0:	ldrd	r2, [r3]
   225a4:	cmp	r1, r3
   225a8:	cmpeq	r0, r2
   225ac:	beq	227c4 <_start@@Base+0xe19c>
   225b0:	mov	r2, sl
   225b4:	mov	r1, r4
   225b8:	mov	r0, r8
   225bc:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   225c0:	mov	r9, r0
   225c4:	b	21e30 <_start@@Base+0xd808>
   225c8:	mov	r3, #8
   225cc:	mov	r2, sl
   225d0:	mov	r1, r4
   225d4:	mov	r0, r8
   225d8:	bl	193e8 <_start@@Base+0x4dc0>
   225dc:	mov	r5, r0
   225e0:	cmp	r4, r0
   225e4:	beq	2269c <_start@@Base+0xe074>
   225e8:	add	r3, sp, #304	; 0x130
   225ec:	mov	r2, #0
   225f0:	str	r2, [r3, #-24]!	; 0xffffffe8
   225f4:	mov	r2, sl
   225f8:	mov	r1, r0
   225fc:	mov	r0, r8
   22600:	bl	17aec <_start@@Base+0x34c4>
   22604:	mov	r9, r0
   22608:	cmp	r5, r0
   2260c:	beq	22650 <_start@@Base+0xe028>
   22610:	ldr	r3, [sp, #280]	; 0x118
   22614:	cmp	r3, #0
   22618:	bne	22628 <_start@@Base+0xe000>
   2261c:	ldr	r3, [r8, #8]
   22620:	tst	r3, #2
   22624:	beq	21e30 <_start@@Base+0xd808>
   22628:	mov	r3, #4
   2262c:	mov	r2, r3
   22630:	mov	r1, #17
   22634:	ldr	r0, [r8]
   22638:	bl	29678 <flatcc_builder_table_add@@Base>
   2263c:	cmp	r0, #0
   22640:	beq	22684 <_start@@Base+0xe05c>
   22644:	ldr	r3, [sp, #280]	; 0x118
   22648:	str	r3, [r0]
   2264c:	b	21e30 <_start@@Base+0xd808>
   22650:	add	r3, sp, #280	; 0x118
   22654:	str	r3, [sp]
   22658:	ldr	r3, [pc, #656]	; 228f0 <_start@@Base+0xe2c8>
   2265c:	add	r3, r3, #576	; 0x240
   22660:	mov	r2, sl
   22664:	mov	r1, r0
   22668:	mov	r0, r8
   2266c:	bl	18864 <_start@@Base+0x423c>
   22670:	cmp	sl, r0
   22674:	cmpne	r9, r0
   22678:	beq	22694 <_start@@Base+0xe06c>
   2267c:	mov	r9, r0
   22680:	b	22610 <_start@@Base+0xdfe8>
   22684:	mov	fp, r8
   22688:	mov	r0, r9
   2268c:	mov	r9, r0
   22690:	b	22fdc <_start@@Base+0xe9b4>
   22694:	mov	fp, r8
   22698:	b	2268c <_start@@Base+0xe064>
   2269c:	add	r9, r9, #16
   226a0:	mov	r1, sl
   226a4:	mov	r0, r9
   226a8:	bl	14750 <_start@@Base+0x128>
   226ac:	mov	r0, #0
   226b0:	and	r1, r1, #-16777216	; 0xff000000
   226b4:	cmp	r1, #1627389952	; 0x61000000
   226b8:	cmpeq	r0, #0
   226bc:	beq	226d8 <_start@@Base+0xe0b0>
   226c0:	mov	r2, sl
   226c4:	mov	r1, r9
   226c8:	mov	r0, r8
   226cc:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   226d0:	mov	r9, r0
   226d4:	b	21e30 <_start@@Base+0xd808>
   226d8:	mov	r3, #1
   226dc:	mov	r2, sl
   226e0:	mov	r1, r9
   226e4:	mov	r0, r8
   226e8:	bl	193e8 <_start@@Base+0x4dc0>
   226ec:	mov	r4, r0
   226f0:	cmp	r9, r0
   226f4:	beq	227ac <_start@@Base+0xe184>
   226f8:	add	r3, sp, #304	; 0x130
   226fc:	mov	r2, #0
   22700:	str	r2, [r3, #-24]!	; 0xffffffe8
   22704:	mov	r2, sl
   22708:	mov	r1, r0
   2270c:	mov	r0, r8
   22710:	bl	17aec <_start@@Base+0x34c4>
   22714:	mov	r9, r0
   22718:	cmp	r4, r0
   2271c:	beq	22760 <_start@@Base+0xe138>
   22720:	ldr	r3, [sp, #280]	; 0x118
   22724:	cmp	r3, #0
   22728:	bne	22738 <_start@@Base+0xe110>
   2272c:	ldr	r3, [r8, #8]
   22730:	tst	r3, #2
   22734:	beq	21e30 <_start@@Base+0xd808>
   22738:	mov	r3, #4
   2273c:	mov	r2, r3
   22740:	mov	r1, #21
   22744:	ldr	r0, [r8]
   22748:	bl	29678 <flatcc_builder_table_add@@Base>
   2274c:	cmp	r0, #0
   22750:	beq	22794 <_start@@Base+0xe16c>
   22754:	ldr	r3, [sp, #280]	; 0x118
   22758:	str	r3, [r0]
   2275c:	b	21e30 <_start@@Base+0xd808>
   22760:	add	r3, sp, #280	; 0x118
   22764:	str	r3, [sp]
   22768:	ldr	r3, [pc, #384]	; 228f0 <_start@@Base+0xe2c8>
   2276c:	add	r3, r3, #588	; 0x24c
   22770:	mov	r2, sl
   22774:	mov	r1, r0
   22778:	mov	r0, r8
   2277c:	bl	18864 <_start@@Base+0x423c>
   22780:	cmp	sl, r0
   22784:	cmpne	r9, r0
   22788:	beq	227a4 <_start@@Base+0xe17c>
   2278c:	mov	r9, r0
   22790:	b	22720 <_start@@Base+0xe0f8>
   22794:	mov	fp, r8
   22798:	mov	r0, r9
   2279c:	mov	r9, r0
   227a0:	b	22fdc <_start@@Base+0xe9b4>
   227a4:	mov	fp, r8
   227a8:	b	2279c <_start@@Base+0xe174>
   227ac:	mov	r2, sl
   227b0:	mov	r1, r0
   227b4:	mov	r0, r8
   227b8:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   227bc:	mov	r9, r0
   227c0:	b	21e30 <_start@@Base+0xd808>
   227c4:	mov	r3, #8
   227c8:	mov	r2, sl
   227cc:	mov	r1, r4
   227d0:	mov	r0, r8
   227d4:	bl	193e8 <_start@@Base+0x4dc0>
   227d8:	mov	r5, r0
   227dc:	cmp	r4, r0
   227e0:	beq	228a4 <_start@@Base+0xe27c>
   227e4:	add	r3, sp, #304	; 0x130
   227e8:	mov	r0, #0
   227ec:	mov	r1, #0
   227f0:	strd	r0, [r3, #-24]!	; 0xffffffe8
   227f4:	mov	r2, sl
   227f8:	mov	r1, r5
   227fc:	mov	r0, r8
   22800:	bl	17ba0 <_start@@Base+0x3578>
   22804:	mov	r9, r0
   22808:	cmp	r5, r0
   2280c:	beq	22858 <_start@@Base+0xe230>
   22810:	add	r3, sp, #280	; 0x118
   22814:	ldrd	r2, [r3]
   22818:	orrs	r3, r2, r3
   2281c:	bne	2282c <_start@@Base+0xe204>
   22820:	ldr	r3, [r8, #8]
   22824:	tst	r3, #2
   22828:	beq	21e30 <_start@@Base+0xd808>
   2282c:	mov	r3, #8
   22830:	mov	r2, r3
   22834:	mov	r1, #19
   22838:	ldr	r0, [r8]
   2283c:	bl	29678 <flatcc_builder_table_add@@Base>
   22840:	cmp	r0, #0
   22844:	beq	2288c <_start@@Base+0xe264>
   22848:	add	r3, sp, #280	; 0x118
   2284c:	ldrd	r2, [r3]
   22850:	strd	r2, [r0]
   22854:	b	21e30 <_start@@Base+0xd808>
   22858:	add	r3, sp, #280	; 0x118
   2285c:	str	r3, [sp]
   22860:	ldr	r3, [pc, #136]	; 228f0 <_start@@Base+0xe2c8>
   22864:	add	r3, r3, #600	; 0x258
   22868:	mov	r2, sl
   2286c:	mov	r1, r0
   22870:	mov	r0, r8
   22874:	bl	17e64 <_start@@Base+0x383c>
   22878:	cmp	sl, r0
   2287c:	cmpne	r9, r0
   22880:	beq	2289c <_start@@Base+0xe274>
   22884:	mov	r9, r0
   22888:	b	22810 <_start@@Base+0xe1e8>
   2288c:	mov	fp, r8
   22890:	mov	r0, r9
   22894:	mov	r9, r0
   22898:	b	22fdc <_start@@Base+0xe9b4>
   2289c:	mov	fp, r8
   228a0:	b	22894 <_start@@Base+0xe26c>
   228a4:	add	r9, r9, #16
   228a8:	mov	r1, sl
   228ac:	mov	r0, r9
   228b0:	bl	14750 <_start@@Base+0x128>
   228b4:	mov	r0, #0
   228b8:	and	r1, r1, #-16777216	; 0xff000000
   228bc:	cmp	r1, #1627389952	; 0x61000000
   228c0:	cmpeq	r0, #0
   228c4:	beq	228f4 <_start@@Base+0xe2cc>
   228c8:	mov	r2, sl
   228cc:	mov	r1, r9
   228d0:	mov	r0, r8
   228d4:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   228d8:	mov	r9, r0
   228dc:	b	21e30 <_start@@Base+0xd808>
   228e0:			; <UNDEFINED> instruction: 0x666e7631
   228e4:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   228e8:			; <UNDEFINED> instruction: 0x666e7631
   228ec:	ldrvc	r3, [r6, #-1119]!	; 0xfffffba1
   228f0:	andeq	r4, r5, r0, ror r0
   228f4:	mov	r3, #1
   228f8:	mov	r2, sl
   228fc:	mov	r1, r9
   22900:	mov	r0, r8
   22904:	bl	193e8 <_start@@Base+0x4dc0>
   22908:	mov	r4, r0
   2290c:	cmp	r9, r0
   22910:	beq	229d0 <_start@@Base+0xe3a8>
   22914:	add	r3, sp, #304	; 0x130
   22918:	mov	r0, #0
   2291c:	mov	r1, #0
   22920:	strd	r0, [r3, #-24]!	; 0xffffffe8
   22924:	mov	r2, sl
   22928:	mov	r1, r4
   2292c:	mov	r0, r8
   22930:	bl	17ba0 <_start@@Base+0x3578>
   22934:	mov	r9, r0
   22938:	cmp	r4, r0
   2293c:	beq	22988 <_start@@Base+0xe360>
   22940:	add	r3, sp, #280	; 0x118
   22944:	ldrd	r2, [r3]
   22948:	orrs	r3, r2, r3
   2294c:	bne	2295c <_start@@Base+0xe334>
   22950:	ldr	r3, [r8, #8]
   22954:	tst	r3, #2
   22958:	beq	21e30 <_start@@Base+0xd808>
   2295c:	mov	r3, #8
   22960:	mov	r2, r3
   22964:	mov	r1, #23
   22968:	ldr	r0, [r8]
   2296c:	bl	29678 <flatcc_builder_table_add@@Base>
   22970:	cmp	r0, #0
   22974:	beq	229b8 <_start@@Base+0xe390>
   22978:	add	r3, sp, #280	; 0x118
   2297c:	ldrd	r2, [r3]
   22980:	strd	r2, [r0]
   22984:	b	21e30 <_start@@Base+0xd808>
   22988:	add	r3, sp, #280	; 0x118
   2298c:	str	r3, [sp]
   22990:	ldr	r3, [sp, #248]	; 0xf8
   22994:	mov	r2, sl
   22998:	mov	r1, r0
   2299c:	mov	r0, r8
   229a0:	bl	17e64 <_start@@Base+0x383c>
   229a4:	cmp	sl, r0
   229a8:	cmpne	r9, r0
   229ac:	beq	229c8 <_start@@Base+0xe3a0>
   229b0:	mov	r9, r0
   229b4:	b	22940 <_start@@Base+0xe318>
   229b8:	mov	fp, r8
   229bc:	mov	r0, r9
   229c0:	mov	r9, r0
   229c4:	b	22fdc <_start@@Base+0xe9b4>
   229c8:	mov	fp, r8
   229cc:	b	229c0 <_start@@Base+0xe398>
   229d0:	mov	r2, sl
   229d4:	mov	r1, r0
   229d8:	mov	r0, r8
   229dc:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   229e0:	mov	r9, r0
   229e4:	b	21e30 <_start@@Base+0xd808>
   229e8:	add	r4, r9, #8
   229ec:	mov	r1, sl
   229f0:	mov	r0, r4
   229f4:	bl	14750 <_start@@Base+0x128>
   229f8:	add	r3, pc, #1000	; 0x3e8
   229fc:	ldrd	r2, [r3]
   22a00:	cmp	r1, r3
   22a04:	cmpeq	r0, r2
   22a08:	beq	22a24 <_start@@Base+0xe3fc>
   22a0c:	mov	r2, sl
   22a10:	mov	r1, r4
   22a14:	mov	r0, r8
   22a18:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   22a1c:	mov	r9, r0
   22a20:	b	21e30 <_start@@Base+0xd808>
   22a24:	add	r4, r9, #16
   22a28:	mov	r1, sl
   22a2c:	mov	r0, r4
   22a30:	bl	14750 <_start@@Base+0x128>
   22a34:	mov	r0, #0
   22a38:	add	r3, pc, #944	; 0x3b0
   22a3c:	ldrd	r2, [r3]
   22a40:	cmp	r1, r3
   22a44:	cmpeq	r0, r2
   22a48:	beq	22a64 <_start@@Base+0xe43c>
   22a4c:	mov	r2, sl
   22a50:	mov	r1, r4
   22a54:	mov	r0, r8
   22a58:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   22a5c:	mov	r9, r0
   22a60:	b	21e30 <_start@@Base+0xd808>
   22a64:	mov	r3, #4
   22a68:	mov	r2, sl
   22a6c:	mov	r1, r4
   22a70:	mov	r0, r8
   22a74:	bl	193e8 <_start@@Base+0x4dc0>
   22a78:	mov	r9, r0
   22a7c:	cmp	r4, r0
   22a80:	beq	22c08 <_start@@Base+0xe5e0>
   22a84:	cmp	sl, r0
   22a88:	beq	22a98 <_start@@Base+0xe470>
   22a8c:	ldrb	r3, [r0]
   22a90:	cmp	r3, #91	; 0x5b
   22a94:	beq	22b10 <_start@@Base+0xe4e8>
   22a98:	mov	r3, #0
   22a9c:	mov	r2, r3
   22aa0:	mov	r1, r3
   22aa4:	ldr	r0, [r8]
   22aa8:	bl	26e50 <flatcc_builder_start_buffer@@Base>
   22aac:	cmp	r0, #0
   22ab0:	bne	23230 <_start@@Base+0xec08>
   22ab4:	add	r3, sp, #296	; 0x128
   22ab8:	mov	r2, sl
   22abc:	mov	r1, r9
   22ac0:	mov	r0, r8
   22ac4:	bl	1e690 <_start@@Base+0xa068>
   22ac8:	mov	r9, r0
   22acc:	ldr	r1, [sp, #296]	; 0x128
   22ad0:	cmp	r1, #0
   22ad4:	beq	23238 <_start@@Base+0xec10>
   22ad8:	ldr	r0, [r8]
   22adc:	bl	26f08 <flatcc_builder_end_buffer@@Base>
   22ae0:	str	r0, [sp, #296]	; 0x128
   22ae4:	ldr	r3, [sp, #296]	; 0x128
   22ae8:	cmp	r3, #0
   22aec:	beq	23240 <_start@@Base+0xec18>
   22af0:	mov	r1, #13
   22af4:	ldr	r0, [r8]
   22af8:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   22afc:	cmp	r0, #0
   22b00:	beq	23248 <_start@@Base+0xec20>
   22b04:	ldr	r3, [sp, #296]	; 0x128
   22b08:	str	r3, [r0]
   22b0c:	b	21e30 <_start@@Base+0xd808>
   22b10:	mvn	r3, #0
   22b14:	mov	r2, #1
   22b18:	mov	r1, r2
   22b1c:	ldr	r0, [r8]
   22b20:	bl	279cc <flatcc_builder_start_vector@@Base>
   22b24:	cmp	r0, #0
   22b28:	bne	23220 <_start@@Base+0xebf8>
   22b2c:	add	r3, sp, #300	; 0x12c
   22b30:	mov	r2, sl
   22b34:	mov	r1, r9
   22b38:	mov	r0, r8
   22b3c:	bl	1e5d0 <_start@@Base+0x9fa8>
   22b40:	mov	r9, r0
   22b44:	ldr	r3, [sp, #300]	; 0x12c
   22b48:	cmp	r3, #0
   22b4c:	beq	22bf8 <_start@@Base+0xe5d0>
   22b50:	mov	r5, #0
   22b54:	mov	fp, #1
   22b58:	add	r6, sp, #280	; 0x118
   22b5c:	ldr	r3, [pc, #692]	; 22e18 <_start@@Base+0xe7f0>
   22b60:	add	r7, r3, #624	; 0x270
   22b64:	b	22b94 <_start@@Base+0xe56c>
   22b68:	ldrb	r3, [sp, #280]	; 0x118
   22b6c:	strb	r3, [r4]
   22b70:	add	r3, sp, #300	; 0x12c
   22b74:	mov	r2, sl
   22b78:	mov	r1, r0
   22b7c:	mov	r0, r8
   22b80:	bl	17fe8 <_start@@Base+0x39c0>
   22b84:	mov	r9, r0
   22b88:	ldr	r3, [sp, #300]	; 0x12c
   22b8c:	cmp	r3, #0
   22b90:	beq	22bf8 <_start@@Base+0xe5d0>
   22b94:	strb	r5, [sp, #280]	; 0x118
   22b98:	mov	r1, fp
   22b9c:	ldr	r0, [r8]
   22ba0:	bl	271c4 <flatcc_builder_extend_vector@@Base>
   22ba4:	subs	r4, r0, #0
   22ba8:	beq	23228 <_start@@Base+0xec00>
   22bac:	mov	r3, r6
   22bb0:	mov	r2, sl
   22bb4:	mov	r1, r9
   22bb8:	mov	r0, r8
   22bbc:	bl	17c28 <_start@@Base+0x3600>
   22bc0:	cmp	r0, r9
   22bc4:	bne	22b68 <_start@@Base+0xe540>
   22bc8:	str	r6, [sp]
   22bcc:	mov	r3, r7
   22bd0:	mov	r2, sl
   22bd4:	mov	r1, r9
   22bd8:	mov	r0, r8
   22bdc:	bl	18e28 <_start@@Base+0x4800>
   22be0:	cmp	sl, r0
   22be4:	cmpne	r0, r9
   22be8:	bne	22b68 <_start@@Base+0xe540>
   22bec:	mov	fp, r8
   22bf0:	mov	r9, r0
   22bf4:	b	22fdc <_start@@Base+0xe9b4>
   22bf8:	ldr	r0, [r8]
   22bfc:	bl	289dc <flatcc_builder_end_vector@@Base>
   22c00:	str	r0, [sp, #296]	; 0x128
   22c04:	b	22ae4 <_start@@Base+0xe4bc>
   22c08:	mov	r2, sl
   22c0c:	mov	r1, r0
   22c10:	mov	r0, r8
   22c14:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   22c18:	mov	r9, r0
   22c1c:	b	21e30 <_start@@Base+0xd808>
   22c20:	add	r3, pc, #464	; 0x1d0
   22c24:	ldrd	r2, [r3]
   22c28:	cmp	r1, r3
   22c2c:	cmpeq	r0, r2
   22c30:	beq	22c4c <_start@@Base+0xe624>
   22c34:	mov	r2, sl
   22c38:	mov	r1, r9
   22c3c:	mov	r0, r8
   22c40:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   22c44:	mov	r9, r0
   22c48:	b	21e30 <_start@@Base+0xd808>
   22c4c:	add	r4, r9, #8
   22c50:	mov	r1, sl
   22c54:	mov	r0, r4
   22c58:	bl	14750 <_start@@Base+0x128>
   22c5c:	add	r3, pc, #412	; 0x19c
   22c60:	ldrd	r2, [r3]
   22c64:	cmp	r1, r3
   22c68:	cmpeq	r0, r2
   22c6c:	beq	22ca0 <_start@@Base+0xe678>
   22c70:	bic	r0, r0, #255	; 0xff
   22c74:	add	r3, pc, #396	; 0x18c
   22c78:	ldrd	r2, [r3]
   22c7c:	cmp	r1, r3
   22c80:	cmpeq	r0, r2
   22c84:	beq	22e68 <_start@@Base+0xe840>
   22c88:	mov	r2, sl
   22c8c:	mov	r1, r4
   22c90:	mov	r0, r8
   22c94:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   22c98:	mov	r9, r0
   22c9c:	b	21e30 <_start@@Base+0xd808>
   22ca0:	add	r4, r9, #16
   22ca4:	mov	r1, sl
   22ca8:	mov	r0, r4
   22cac:	bl	14750 <_start@@Base+0x128>
   22cb0:	mov	r0, #0
   22cb4:	and	r1, r1, #-16777216	; 0xff000000
   22cb8:	cmp	r1, #1929379840	; 0x73000000
   22cbc:	cmpeq	r0, #0
   22cc0:	beq	22cdc <_start@@Base+0xe6b4>
   22cc4:	mov	r2, sl
   22cc8:	mov	r1, r4
   22ccc:	mov	r0, r8
   22cd0:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   22cd4:	mov	r9, r0
   22cd8:	b	21e30 <_start@@Base+0xd808>
   22cdc:	mov	r3, #1
   22ce0:	mov	r2, sl
   22ce4:	mov	r1, r4
   22ce8:	mov	r0, r8
   22cec:	bl	193e8 <_start@@Base+0x4dc0>
   22cf0:	mov	r9, r0
   22cf4:	cmp	r4, r0
   22cf8:	beq	22e50 <_start@@Base+0xe828>
   22cfc:	mvn	r3, #-536870912	; 0xe0000000
   22d00:	mov	r2, #8
   22d04:	mov	r1, r2
   22d08:	ldr	r0, [r8]
   22d0c:	bl	279cc <flatcc_builder_start_vector@@Base>
   22d10:	cmp	r0, #0
   22d14:	bne	23250 <_start@@Base+0xec28>
   22d18:	add	r3, sp, #300	; 0x12c
   22d1c:	mov	r2, sl
   22d20:	mov	r1, r9
   22d24:	mov	r0, r8
   22d28:	bl	1e5d0 <_start@@Base+0x9fa8>
   22d2c:	mov	r9, r0
   22d30:	ldr	r3, [sp, #300]	; 0x12c
   22d34:	cmp	r3, #0
   22d38:	beq	22e1c <_start@@Base+0xe7f4>
   22d3c:	vldr	d8, [pc, #204]	; 22e10 <_start@@Base+0xe7e8>
   22d40:	mov	r6, #1
   22d44:	add	r5, sp, #280	; 0x118
   22d48:	ldr	r3, [pc, #200]	; 22e18 <_start@@Base+0xe7f0>
   22d4c:	add	r7, r3, #636	; 0x27c
   22d50:	b	22d84 <_start@@Base+0xe75c>
   22d54:	add	r3, sp, #280	; 0x118
   22d58:	ldrd	r2, [r3]
   22d5c:	strd	r2, [r4]
   22d60:	add	r3, sp, #300	; 0x12c
   22d64:	mov	r2, sl
   22d68:	mov	r1, r0
   22d6c:	mov	r0, r8
   22d70:	bl	17fe8 <_start@@Base+0x39c0>
   22d74:	mov	r9, r0
   22d78:	ldr	r3, [sp, #300]	; 0x12c
   22d7c:	cmp	r3, #0
   22d80:	beq	22e1c <_start@@Base+0xe7f4>
   22d84:	vstr	d8, [sp, #280]	; 0x118
   22d88:	mov	r1, r6
   22d8c:	ldr	r0, [r8]
   22d90:	bl	271c4 <flatcc_builder_extend_vector@@Base>
   22d94:	subs	r4, r0, #0
   22d98:	beq	23258 <_start@@Base+0xec30>
   22d9c:	mov	r3, r5
   22da0:	mov	r2, sl
   22da4:	mov	r1, r9
   22da8:	mov	r0, r8
   22dac:	bl	2ddf4 <flatcc_json_parser_double@@Base>
   22db0:	cmp	r0, r9
   22db4:	bne	22d54 <_start@@Base+0xe72c>
   22db8:	str	r5, [sp]
   22dbc:	mov	r3, r7
   22dc0:	mov	r2, sl
   22dc4:	mov	r1, r9
   22dc8:	mov	r0, r8
   22dcc:	bl	184fc <_start@@Base+0x3ed4>
   22dd0:	cmp	sl, r0
   22dd4:	cmpne	r0, r9
   22dd8:	bne	22d54 <_start@@Base+0xe72c>
   22ddc:	mov	fp, r8
   22de0:	mov	r9, r0
   22de4:	b	22fdc <_start@@Base+0xe9b4>
   22de8:	cmnvs	r4, r5, ror r2
   22dec:	strbvs	r6, [r4, #-1644]!	; 0xfffff994
   22df0:	andeq	r0, r0, r0
   22df4:			; <UNDEFINED> instruction: 0x66666572
   22df8:	svcvs	0x00725f6f
   22dfc:			; <UNDEFINED> instruction: 0x76656374
   22e00:	strbvc	r6, [r2, #-3173]!	; 0xfffff39b
   22e04:	ldrbvs	r6, [pc], -pc, ror #8
   22e08:	cdpvs	3, 6, cr7, cr7, cr0, {0}
   22e0c:	ldrbvs	r6, [pc], -pc, ror #24
	...
   22e18:	andeq	r4, r5, r0, ror r0
   22e1c:	ldr	r0, [r8]
   22e20:	bl	289dc <flatcc_builder_end_vector@@Base>
   22e24:	str	r0, [sp, #296]	; 0x128
   22e28:	cmp	r0, #0
   22e2c:	beq	23260 <_start@@Base+0xec38>
   22e30:	mov	r1, #33	; 0x21
   22e34:	ldr	r0, [r8]
   22e38:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   22e3c:	cmp	r0, #0
   22e40:	beq	23268 <_start@@Base+0xec40>
   22e44:	ldr	r3, [sp, #296]	; 0x128
   22e48:	str	r3, [r0]
   22e4c:	b	21e30 <_start@@Base+0xd808>
   22e50:	mov	r2, sl
   22e54:	mov	r1, r0
   22e58:	mov	r0, r8
   22e5c:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   22e60:	mov	r9, r0
   22e64:	b	21e30 <_start@@Base+0xd808>
   22e68:	mov	r3, #7
   22e6c:	mov	r2, sl
   22e70:	mov	r1, r4
   22e74:	mov	r0, r8
   22e78:	bl	193e8 <_start@@Base+0x4dc0>
   22e7c:	mov	r9, r0
   22e80:	cmp	r4, r0
   22e84:	beq	22fb4 <_start@@Base+0xe98c>
   22e88:	mvn	r3, #-536870912	; 0xe0000000
   22e8c:	mov	r2, #8
   22e90:	mov	r1, r2
   22e94:	ldr	r0, [r8]
   22e98:	bl	279cc <flatcc_builder_start_vector@@Base>
   22e9c:	cmp	r0, #0
   22ea0:	bne	23270 <_start@@Base+0xec48>
   22ea4:	add	r3, sp, #300	; 0x12c
   22ea8:	mov	r2, sl
   22eac:	mov	r1, r9
   22eb0:	mov	r0, r8
   22eb4:	bl	1e5d0 <_start@@Base+0x9fa8>
   22eb8:	mov	r9, r0
   22ebc:	ldr	r3, [sp, #300]	; 0x12c
   22ec0:	cmp	r3, #0
   22ec4:	beq	22f80 <_start@@Base+0xe958>
   22ec8:	mov	r4, #0
   22ecc:	mov	r5, #0
   22ed0:	mov	fp, #1
   22ed4:	add	r7, sp, #280	; 0x118
   22ed8:	ldr	r3, [pc, #-200]	; 22e18 <_start@@Base+0xe7f0>
   22edc:	add	r3, r3, #648	; 0x288
   22ee0:	str	r3, [sp, #20]
   22ee4:	b	22f18 <_start@@Base+0xe8f0>
   22ee8:	add	r3, sp, #280	; 0x118
   22eec:	ldrd	r2, [r3]
   22ef0:	strd	r2, [r6]
   22ef4:	add	r3, sp, #300	; 0x12c
   22ef8:	mov	r2, sl
   22efc:	mov	r1, r0
   22f00:	mov	r0, r8
   22f04:	bl	17fe8 <_start@@Base+0x39c0>
   22f08:	mov	r9, r0
   22f0c:	ldr	r3, [sp, #300]	; 0x12c
   22f10:	cmp	r3, #0
   22f14:	beq	22f80 <_start@@Base+0xe958>
   22f18:	add	r3, sp, #280	; 0x118
   22f1c:	strd	r4, [r3]
   22f20:	mov	r1, fp
   22f24:	ldr	r0, [r8]
   22f28:	bl	271c4 <flatcc_builder_extend_vector@@Base>
   22f2c:	subs	r6, r0, #0
   22f30:	beq	23278 <_start@@Base+0xec50>
   22f34:	mov	r3, r7
   22f38:	mov	r2, sl
   22f3c:	mov	r1, r9
   22f40:	mov	r0, r8
   22f44:	bl	17cd4 <_start@@Base+0x36ac>
   22f48:	cmp	r0, r9
   22f4c:	bne	22ee8 <_start@@Base+0xe8c0>
   22f50:	str	r7, [sp]
   22f54:	ldr	r3, [sp, #20]
   22f58:	mov	r2, sl
   22f5c:	mov	r1, r9
   22f60:	mov	r0, r8
   22f64:	bl	1ac34 <_start@@Base+0x660c>
   22f68:	cmp	sl, r0
   22f6c:	cmpne	r0, r9
   22f70:	bne	22ee8 <_start@@Base+0xe8c0>
   22f74:	mov	fp, r8
   22f78:	mov	r9, r0
   22f7c:	b	22fdc <_start@@Base+0xe9b4>
   22f80:	ldr	r0, [r8]
   22f84:	bl	289dc <flatcc_builder_end_vector@@Base>
   22f88:	str	r0, [sp, #296]	; 0x128
   22f8c:	cmp	r0, #0
   22f90:	beq	23280 <_start@@Base+0xec58>
   22f94:	mov	r1, #32
   22f98:	ldr	r0, [r8]
   22f9c:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   22fa0:	cmp	r0, #0
   22fa4:	beq	23288 <_start@@Base+0xec60>
   22fa8:	ldr	r3, [sp, #296]	; 0x128
   22fac:	str	r3, [r0]
   22fb0:	b	21e30 <_start@@Base+0xd808>
   22fb4:	mov	r2, sl
   22fb8:	mov	r1, r0
   22fbc:	mov	r0, r8
   22fc0:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   22fc4:	mov	r9, r0
   22fc8:	b	21e30 <_start@@Base+0xd808>
   22fcc:	mov	fp, r8
   22fd0:	ldr	r3, [fp, #24]
   22fd4:	cmp	r3, #0
   22fd8:	beq	22ffc <_start@@Base+0xe9d4>
   22fdc:	mov	r3, #33	; 0x21
   22fe0:	mov	r2, sl
   22fe4:	mov	r1, r9
   22fe8:	mov	r0, fp
   22fec:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   22ff0:	add	sp, sp, #308	; 0x134
   22ff4:	vpop	{d8-d9}
   22ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22ffc:	mov	r1, #3
   23000:	ldr	r0, [fp]
   23004:	bl	28508 <flatcc_builder_check_required_field@@Base>
   23008:	cmp	r0, #0
   2300c:	bne	2302c <_start@@Base+0xea04>
   23010:	mov	r3, #29
   23014:	mov	r2, sl
   23018:	mov	r1, r9
   2301c:	mov	r0, fp
   23020:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   23024:	mov	r9, r0
   23028:	b	22fdc <_start@@Base+0xe9b4>
   2302c:	ldr	r3, [sp, #292]	; 0x124
   23030:	mov	r2, sl
   23034:	mov	r1, r9
   23038:	mov	r0, fp
   2303c:	bl	2f4b4 <flatcc_json_parser_finalize_unions@@Base>
   23040:	mov	r9, r0
   23044:	ldr	r0, [fp]
   23048:	bl	286cc <flatcc_builder_end_table@@Base>
   2304c:	ldr	r3, [sp, #180]	; 0xb4
   23050:	str	r0, [r3]
   23054:	cmp	r0, #0
   23058:	beq	22fdc <_start@@Base+0xe9b4>
   2305c:	mov	r0, r9
   23060:	b	22ff0 <_start@@Base+0xe9c8>
   23064:	mov	fp, r8
   23068:	mov	r9, r4
   2306c:	b	22fdc <_start@@Base+0xe9b4>
   23070:	mov	fp, r8
   23074:	mov	r9, r4
   23078:	b	22fdc <_start@@Base+0xe9b4>
   2307c:	mov	fp, r8
   23080:	mov	r9, r6
   23084:	b	22fdc <_start@@Base+0xe9b4>
   23088:	mov	fp, r8
   2308c:	mov	r9, r6
   23090:	b	22fdc <_start@@Base+0xe9b4>
   23094:	mov	fp, r8
   23098:	b	22fdc <_start@@Base+0xe9b4>
   2309c:	mov	fp, r8
   230a0:	b	22fdc <_start@@Base+0xe9b4>
   230a4:	mov	fp, r8
   230a8:	b	22fdc <_start@@Base+0xe9b4>
   230ac:	mov	fp, r8
   230b0:	b	22fdc <_start@@Base+0xe9b4>
   230b4:	mov	fp, r8
   230b8:	b	22fdc <_start@@Base+0xe9b4>
   230bc:	mov	fp, r8
   230c0:	b	22fdc <_start@@Base+0xe9b4>
   230c4:	mov	fp, r8
   230c8:	b	22fdc <_start@@Base+0xe9b4>
   230cc:	mov	fp, r8
   230d0:	b	22fdc <_start@@Base+0xe9b4>
   230d4:	mov	fp, r8
   230d8:	b	22fdc <_start@@Base+0xe9b4>
   230dc:	mov	fp, r8
   230e0:	b	22fdc <_start@@Base+0xe9b4>
   230e4:	mov	fp, r8
   230e8:	b	22fdc <_start@@Base+0xe9b4>
   230ec:	mov	fp, r8
   230f0:	b	22fdc <_start@@Base+0xe9b4>
   230f4:	mov	fp, r8
   230f8:	b	22fdc <_start@@Base+0xe9b4>
   230fc:	mov	fp, r8
   23100:	b	22fdc <_start@@Base+0xe9b4>
   23104:	mov	fp, r8
   23108:	b	22fdc <_start@@Base+0xe9b4>
   2310c:	mov	fp, r8
   23110:	b	22fdc <_start@@Base+0xe9b4>
   23114:	mov	fp, r8
   23118:	b	22fdc <_start@@Base+0xe9b4>
   2311c:	mov	fp, r8
   23120:	b	22fdc <_start@@Base+0xe9b4>
   23124:	mov	fp, r8
   23128:	b	22fdc <_start@@Base+0xe9b4>
   2312c:	mov	fp, r8
   23130:	b	22fdc <_start@@Base+0xe9b4>
   23134:	mov	fp, r8
   23138:	b	22fdc <_start@@Base+0xe9b4>
   2313c:	mov	fp, r8
   23140:	b	22fdc <_start@@Base+0xe9b4>
   23144:	mov	fp, r8
   23148:	b	22fdc <_start@@Base+0xe9b4>
   2314c:	mov	fp, r8
   23150:	b	22fdc <_start@@Base+0xe9b4>
   23154:	mov	fp, r8
   23158:	b	22fdc <_start@@Base+0xe9b4>
   2315c:	ldr	fp, [sp, #20]
   23160:	mov	r9, r4
   23164:	b	22fdc <_start@@Base+0xe9b4>
   23168:	mov	fp, r8
   2316c:	b	22fdc <_start@@Base+0xe9b4>
   23170:	mov	fp, r8
   23174:	b	22fdc <_start@@Base+0xe9b4>
   23178:	mov	fp, r8
   2317c:	b	22fdc <_start@@Base+0xe9b4>
   23180:	mov	fp, r8
   23184:	b	22fdc <_start@@Base+0xe9b4>
   23188:	mov	fp, r8
   2318c:	b	22fdc <_start@@Base+0xe9b4>
   23190:	mov	fp, r8
   23194:	b	22fdc <_start@@Base+0xe9b4>
   23198:	mov	fp, r8
   2319c:	b	22fdc <_start@@Base+0xe9b4>
   231a0:	mov	fp, r8
   231a4:	b	22fdc <_start@@Base+0xe9b4>
   231a8:	mov	fp, r8
   231ac:	b	22fdc <_start@@Base+0xe9b4>
   231b0:	mov	fp, r8
   231b4:	b	22fdc <_start@@Base+0xe9b4>
   231b8:	mov	fp, r8
   231bc:	b	22fdc <_start@@Base+0xe9b4>
   231c0:	mov	fp, r8
   231c4:	b	22fdc <_start@@Base+0xe9b4>
   231c8:	mov	fp, r8
   231cc:	b	22fdc <_start@@Base+0xe9b4>
   231d0:	mov	fp, r8
   231d4:	b	22fdc <_start@@Base+0xe9b4>
   231d8:	mov	fp, r8
   231dc:	b	22fdc <_start@@Base+0xe9b4>
   231e0:	mov	fp, r8
   231e4:	b	22fdc <_start@@Base+0xe9b4>
   231e8:	mov	fp, r8
   231ec:	b	22fdc <_start@@Base+0xe9b4>
   231f0:	mov	fp, r8
   231f4:	b	22fdc <_start@@Base+0xe9b4>
   231f8:	mov	fp, r8
   231fc:	b	22fdc <_start@@Base+0xe9b4>
   23200:	mov	fp, r8
   23204:	b	22fdc <_start@@Base+0xe9b4>
   23208:	mov	fp, r8
   2320c:	b	22fdc <_start@@Base+0xe9b4>
   23210:	mov	fp, r8
   23214:	b	22fdc <_start@@Base+0xe9b4>
   23218:	mov	fp, r8
   2321c:	b	22fdc <_start@@Base+0xe9b4>
   23220:	mov	fp, r8
   23224:	b	22fdc <_start@@Base+0xe9b4>
   23228:	mov	fp, r8
   2322c:	b	22fdc <_start@@Base+0xe9b4>
   23230:	mov	fp, r8
   23234:	b	22fdc <_start@@Base+0xe9b4>
   23238:	mov	fp, r8
   2323c:	b	22fdc <_start@@Base+0xe9b4>
   23240:	mov	fp, r8
   23244:	b	22fdc <_start@@Base+0xe9b4>
   23248:	mov	fp, r8
   2324c:	b	22fdc <_start@@Base+0xe9b4>
   23250:	mov	fp, r8
   23254:	b	22fdc <_start@@Base+0xe9b4>
   23258:	mov	fp, r8
   2325c:	b	22fdc <_start@@Base+0xe9b4>
   23260:	mov	fp, r8
   23264:	b	22fdc <_start@@Base+0xe9b4>
   23268:	mov	fp, r8
   2326c:	b	22fdc <_start@@Base+0xe9b4>
   23270:	mov	fp, r8
   23274:	b	22fdc <_start@@Base+0xe9b4>
   23278:	mov	fp, r8
   2327c:	b	22fdc <_start@@Base+0xe9b4>
   23280:	mov	fp, r8
   23284:	b	22fdc <_start@@Base+0xe9b4>
   23288:	mov	fp, r8
   2328c:	b	22fdc <_start@@Base+0xe9b4>
   23290:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23294:	sub	sp, sp, #92	; 0x5c
   23298:	mov	r8, r0
   2329c:	mov	r4, r1
   232a0:	mov	r5, r2
   232a4:	mov	r2, #0
   232a8:	ldr	r1, [sp, #128]	; 0x80
   232ac:	str	r2, [r1]
   232b0:	cmp	r3, #4
   232b4:	ldrls	pc, [pc, r3, lsl #2]
   232b8:	b	23d10 <_start@@Base+0xf6e8>
   232bc:	ldrdeq	r3, [r2], -r0
   232c0:	andeq	r3, r2, r0, lsl r3
   232c4:	andeq	r3, r2, r4, asr #6
   232c8:	strdeq	r3, [r2], -r8
   232cc:	strdeq	r3, [r2], -ip
   232d0:	sub	r3, r5, r4
   232d4:	cmp	r3, #3
   232d8:	ble	232f8 <_start@@Base+0xecd0>
   232dc:	mov	r2, #4
   232e0:	ldr	r1, [pc, #1504]	; 238c8 <_start@@Base+0xf2a0>
   232e4:	mov	r0, r4
   232e8:	bl	14558 <memcmp@plt>
   232ec:	cmp	r0, #0
   232f0:	addeq	r0, r4, #4
   232f4:	beq	2333c <_start@@Base+0xed14>
   232f8:	mov	r3, #26
   232fc:	mov	r2, r5
   23300:	mov	r1, r4
   23304:	mov	r0, r8
   23308:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2330c:	b	2333c <_start@@Base+0xed14>
   23310:	ldr	r3, [sp, #128]	; 0x80
   23314:	mov	r2, r5
   23318:	mov	r1, r4
   2331c:	bl	1e690 <_start@@Base+0xa068>
   23320:	ldr	r3, [r8, #24]
   23324:	cmp	r3, #0
   23328:	bne	2333c <_start@@Base+0xed14>
   2332c:	ldr	r3, [sp, #128]	; 0x80
   23330:	ldr	r3, [r3]
   23334:	cmp	r3, #0
   23338:	beq	23d40 <_start@@Base+0xf718>
   2333c:	add	sp, sp, #92	; 0x5c
   23340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23344:	mov	r1, #4
   23348:	ldr	r0, [r0]
   2334c:	bl	27c7c <flatcc_builder_start_table@@Base>
   23350:	cmp	r0, #0
   23354:	bne	23bc0 <_start@@Base+0xf598>
   23358:	add	r3, sp, #72	; 0x48
   2335c:	mov	r2, r5
   23360:	mov	r1, r4
   23364:	mov	r0, r8
   23368:	bl	17de0 <_start@@Base+0x37b8>
   2336c:	mov	r4, r0
   23370:	ldr	r3, [sp, #72]	; 0x48
   23374:	cmp	r3, #0
   23378:	beq	23bb4 <_start@@Base+0xf58c>
   2337c:	mov	r9, #1
   23380:	ldr	r3, [pc, #1356]	; 238d4 <_start@@Base+0xf2ac>
   23384:	add	r3, r3, #704	; 0x2c0
   23388:	str	r3, [sp, #60]	; 0x3c
   2338c:	b	23574 <_start@@Base+0xef4c>
   23390:	mov	r3, #5
   23394:	mov	r2, r5
   23398:	mov	r1, r4
   2339c:	mov	r0, r8
   233a0:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   233a4:	mov	r4, r0
   233a8:	b	235a0 <_start@@Base+0xef78>
   233ac:	ldrb	r6, [r4, #7]
   233b0:	mov	r7, #0
   233b4:	b	233c0 <_start@@Base+0xed98>
   233b8:	mov	r6, #0
   233bc:	mov	r7, #0
   233c0:	ldrb	r2, [r4, #6]
   233c4:	mov	r1, #0
   233c8:	str	r1, [sp, #52]	; 0x34
   233cc:	lsl	r3, r2, #8
   233d0:	str	r3, [sp, #48]	; 0x30
   233d4:	ldrd	r2, [sp, #48]	; 0x30
   233d8:	orr	r2, r2, r6
   233dc:	orr	r3, r3, r7
   233e0:	mov	r6, r2
   233e4:	mov	r7, r3
   233e8:	ldrb	r2, [r4, #5]
   233ec:	mov	r1, #0
   233f0:	str	r1, [sp, #44]	; 0x2c
   233f4:	lsl	r3, r2, #16
   233f8:	str	r3, [sp, #40]	; 0x28
   233fc:	ldrd	r2, [sp, #40]	; 0x28
   23400:	orr	r2, r2, r6
   23404:	orr	r3, r3, r7
   23408:	mov	r6, r2
   2340c:	mov	r7, r3
   23410:	ldrb	r2, [r4, #4]
   23414:	mov	r1, #0
   23418:	str	r1, [sp, #36]	; 0x24
   2341c:	lsl	r3, r2, #24
   23420:	str	r3, [sp, #32]
   23424:	ldrd	r2, [sp, #32]
   23428:	orr	r2, r2, r6
   2342c:	orr	r3, r3, r7
   23430:	mov	r6, r2
   23434:	mov	r7, r3
   23438:	ldrb	r3, [r4, #3]
   2343c:	str	r3, [sp, #28]
   23440:	mov	r3, #0
   23444:	str	r3, [sp, #24]
   23448:	ldrd	r2, [sp, #24]
   2344c:	orr	r2, r2, r6
   23450:	orr	r3, r3, r7
   23454:	mov	r6, r2
   23458:	mov	r7, r3
   2345c:	ldrb	r2, [r4, #2]
   23460:	lsl	r3, r2, #8
   23464:	str	r3, [sp, #20]
   23468:	mov	r3, #0
   2346c:	str	r3, [sp, #16]
   23470:	ldrd	r2, [sp, #16]
   23474:	orr	r2, r2, r6
   23478:	orr	r3, r3, r7
   2347c:	mov	r6, r2
   23480:	mov	r7, r3
   23484:	ldrb	r2, [r4, #1]
   23488:	lsl	r3, r2, #16
   2348c:	str	r3, [sp, #12]
   23490:	mov	r3, #0
   23494:	str	r3, [sp, #8]
   23498:	ldrd	r2, [sp, #8]
   2349c:	orr	r2, r2, r6
   234a0:	orr	r3, r3, r7
   234a4:	mov	r6, r2
   234a8:	mov	r7, r3
   234ac:	ldrb	r2, [r4]
   234b0:	lsl	fp, r2, #24
   234b4:	mov	sl, #0
   234b8:	orr	r6, r6, sl
   234bc:	orr	r7, r7, fp
   234c0:	ldr	r2, [pc, #1028]	; 238cc <_start@@Base+0xf2a4>
   234c4:	mvn	r3, #0
   234c8:	and	r2, r2, r6
   234cc:	and	r3, r3, r7
   234d0:	add	r1, pc, #984	; 0x3d8
   234d4:	ldrd	r0, [r1]
   234d8:	cmp	r3, r1
   234dc:	cmpeq	r2, r0
   234e0:	beq	23624 <_start@@Base+0xeffc>
   234e4:	and	r0, r6, #-16777216	; 0xff000000
   234e8:	add	r3, pc, #968	; 0x3c8
   234ec:	ldrd	r2, [r3]
   234f0:	cmp	r7, r3
   234f4:	cmpeq	r0, r2
   234f8:	beq	2377c <_start@@Base+0xf154>
   234fc:	mov	r0, #0
   23500:	bic	r1, r7, #255	; 0xff
   23504:	add	r3, pc, #948	; 0x3b4
   23508:	ldrd	r2, [r3]
   2350c:	cmp	r1, r3
   23510:	cmpeq	r0, r2
   23514:	beq	23910 <_start@@Base+0xf2e8>
   23518:	mov	r2, #0
   2351c:	ldr	r3, [pc, #936]	; 238cc <_start@@Base+0xf2a4>
   23520:	and	r6, r6, r2
   23524:	and	r7, r7, r3
   23528:	mov	r2, #0
   2352c:	ldr	r3, [pc, #924]	; 238d0 <_start@@Base+0xf2a8>
   23530:	cmp	r7, r3
   23534:	cmpeq	r6, r2
   23538:	beq	23a64 <_start@@Base+0xf43c>
   2353c:	mov	r2, r5
   23540:	mov	r1, r4
   23544:	mov	r0, r8
   23548:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   2354c:	mov	r4, r0
   23550:	add	r3, sp, #72	; 0x48
   23554:	mov	r2, r5
   23558:	mov	r1, r4
   2355c:	mov	r0, r8
   23560:	bl	18104 <_start@@Base+0x3adc>
   23564:	mov	r4, r0
   23568:	ldr	r3, [sp, #72]	; 0x48
   2356c:	cmp	r3, #0
   23570:	beq	23bb4 <_start@@Base+0xf58c>
   23574:	cmp	r5, r4
   23578:	beq	235a0 <_start@@Base+0xef78>
   2357c:	ldrb	r3, [r4]
   23580:	cmp	r3, #34	; 0x22
   23584:	addeq	r4, r4, #1
   23588:	moveq	r3, #0
   2358c:	streq	r3, [r8, #12]
   23590:	beq	235a0 <_start@@Base+0xef78>
   23594:	cmp	r3, #46	; 0x2e
   23598:	strne	r9, [r8, #12]
   2359c:	beq	23390 <_start@@Base+0xed68>
   235a0:	sub	r3, r5, r4
   235a4:	cmp	r3, #8
   235a8:	movcs	r3, #8
   235ac:	sub	r3, r3, #1
   235b0:	cmp	r3, #7
   235b4:	ldrls	pc, [pc, r3, lsl #2]
   235b8:	b	23904 <_start@@Base+0xf2dc>
   235bc:	andeq	r3, r2, r8, lsl r6
   235c0:	andeq	r3, r2, ip, lsl #12
   235c4:	andeq	r3, r2, r0, lsl #12
   235c8:	strdeq	r3, [r2], -r4
   235cc:	andeq	r3, r2, r8, ror #11
   235d0:	ldrdeq	r3, [r2], -ip
   235d4:			; <UNDEFINED> instruction: 0x000233b8
   235d8:	andeq	r3, r2, ip, lsr #7
   235dc:	mov	r6, #0
   235e0:	mov	r7, #0
   235e4:	b	233e8 <_start@@Base+0xedc0>
   235e8:	mov	r6, #0
   235ec:	mov	r7, #0
   235f0:	b	23410 <_start@@Base+0xede8>
   235f4:	mov	r6, #0
   235f8:	mov	r7, #0
   235fc:	b	23438 <_start@@Base+0xee10>
   23600:	mov	r6, #0
   23604:	mov	r7, #0
   23608:	b	2345c <_start@@Base+0xee34>
   2360c:	mov	r6, #0
   23610:	mov	r7, #0
   23614:	b	23484 <_start@@Base+0xee5c>
   23618:	mov	r6, #0
   2361c:	mov	r7, #0
   23620:	b	234ac <_start@@Base+0xee84>
   23624:	mov	r3, #6
   23628:	mov	r2, r5
   2362c:	mov	r1, r4
   23630:	mov	r0, r8
   23634:	bl	193e8 <_start@@Base+0x4dc0>
   23638:	str	r0, [sp, #56]	; 0x38
   2363c:	cmp	r0, r4
   23640:	beq	234fc <_start@@Base+0xeed4>
   23644:	strb	sl, [sp, #71]	; 0x47
   23648:	mov	r2, #0
   2364c:	mov	r3, #0
   23650:	strd	r2, [sp, #80]	; 0x50
   23654:	str	sl, [sp, #76]	; 0x4c
   23658:	mov	r6, r0
   2365c:	cmp	r5, r0
   23660:	beq	236d4 <_start@@Base+0xf0ac>
   23664:	add	r3, sp, #80	; 0x50
   23668:	str	r3, [sp]
   2366c:	add	r3, sp, #76	; 0x4c
   23670:	mov	r2, r5
   23674:	mov	r1, r0
   23678:	mov	r0, r8
   2367c:	bl	2ed84 <flatcc_json_parser_integer@@Base>
   23680:	mov	r4, r0
   23684:	cmp	r6, r0
   23688:	beq	236d4 <_start@@Base+0xf0ac>
   2368c:	ldrd	r2, [sp, #80]	; 0x50
   23690:	ldr	r1, [sp, #76]	; 0x4c
   23694:	cmp	r1, sl
   23698:	beq	2370c <_start@@Base+0xf0e4>
   2369c:	cmp	r3, #0
   236a0:	cmpeq	r2, #128	; 0x80
   236a4:	rsbls	r2, r2, #0
   236a8:	strbls	r2, [sp, #71]	; 0x47
   236ac:	bls	2371c <_start@@Base+0xf0f4>
   236b0:	mov	r3, #8
   236b4:	mov	r2, r5
   236b8:	mov	r1, r0
   236bc:	mov	r0, r8
   236c0:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   236c4:	mov	r4, r0
   236c8:	ldr	r3, [sp, #56]	; 0x38
   236cc:	cmp	r3, r4
   236d0:	bne	2371c <_start@@Base+0xf0f4>
   236d4:	add	r3, sp, #71	; 0x47
   236d8:	str	r3, [sp]
   236dc:	ldr	r3, [pc, #496]	; 238d4 <_start@@Base+0xf2ac>
   236e0:	add	r3, r3, #660	; 0x294
   236e4:	mov	r2, r5
   236e8:	ldr	r6, [sp, #56]	; 0x38
   236ec:	mov	r1, r6
   236f0:	mov	r0, r8
   236f4:	bl	18a44 <_start@@Base+0x441c>
   236f8:	mov	r4, r0
   236fc:	cmp	r5, r0
   23700:	cmpne	r6, r0
   23704:	bne	2371c <_start@@Base+0xf0f4>
   23708:	b	23bc0 <_start@@Base+0xf598>
   2370c:	cmp	r3, #0
   23710:	cmpeq	r2, #127	; 0x7f
   23714:	strbls	r2, [sp, #71]	; 0x47
   23718:	bhi	23750 <_start@@Base+0xf128>
   2371c:	ldrsb	r3, [sp, #71]	; 0x47
   23720:	cmp	r3, #2
   23724:	beq	2376c <_start@@Base+0xf144>
   23728:	mov	r3, r9
   2372c:	mov	r2, r9
   23730:	mov	r1, r9
   23734:	ldr	r0, [r8]
   23738:	bl	29678 <flatcc_builder_table_add@@Base>
   2373c:	cmp	r0, #0
   23740:	beq	23bc0 <_start@@Base+0xf598>
   23744:	ldrsb	r3, [sp, #71]	; 0x47
   23748:	strb	r3, [r0]
   2374c:	b	23550 <_start@@Base+0xef28>
   23750:	mov	r3, #7
   23754:	mov	r2, r5
   23758:	mov	r1, r0
   2375c:	mov	r0, r8
   23760:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   23764:	mov	r4, r0
   23768:	b	236c8 <_start@@Base+0xf0a0>
   2376c:	ldr	r3, [r8, #8]
   23770:	tst	r3, #2
   23774:	beq	23550 <_start@@Base+0xef28>
   23778:	b	23728 <_start@@Base+0xf100>
   2377c:	mov	r3, #5
   23780:	mov	r2, r5
   23784:	mov	r1, r4
   23788:	mov	r0, r8
   2378c:	bl	193e8 <_start@@Base+0x4dc0>
   23790:	str	r0, [sp, #56]	; 0x38
   23794:	cmp	r0, r4
   23798:	beq	234fc <_start@@Base+0xeed4>
   2379c:	mov	r1, #0
   237a0:	strb	r1, [sp, #71]	; 0x47
   237a4:	mov	r2, #0
   237a8:	mov	r3, #0
   237ac:	strd	r2, [sp, #80]	; 0x50
   237b0:	str	r1, [sp, #76]	; 0x4c
   237b4:	mov	r6, r0
   237b8:	cmp	r5, r0
   237bc:	beq	23830 <_start@@Base+0xf208>
   237c0:	add	r3, sp, #80	; 0x50
   237c4:	str	r3, [sp]
   237c8:	add	r3, sp, #76	; 0x4c
   237cc:	mov	r2, r5
   237d0:	mov	r1, r0
   237d4:	mov	r0, r8
   237d8:	bl	2ed84 <flatcc_json_parser_integer@@Base>
   237dc:	mov	r4, r0
   237e0:	cmp	r6, r0
   237e4:	beq	23830 <_start@@Base+0xf208>
   237e8:	ldrd	r2, [sp, #80]	; 0x50
   237ec:	ldr	r1, [sp, #76]	; 0x4c
   237f0:	cmp	r1, #0
   237f4:	beq	23868 <_start@@Base+0xf240>
   237f8:	cmp	r3, #0
   237fc:	cmpeq	r2, #128	; 0x80
   23800:	rsbls	r2, r2, #0
   23804:	strbls	r2, [sp, #71]	; 0x47
   23808:	bls	23878 <_start@@Base+0xf250>
   2380c:	mov	r3, #8
   23810:	mov	r2, r5
   23814:	mov	r1, r0
   23818:	mov	r0, r8
   2381c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   23820:	mov	r4, r0
   23824:	ldr	r3, [sp, #56]	; 0x38
   23828:	cmp	r3, r4
   2382c:	bne	23878 <_start@@Base+0xf250>
   23830:	add	r3, sp, #71	; 0x47
   23834:	str	r3, [sp]
   23838:	ldr	r3, [pc, #148]	; 238d4 <_start@@Base+0xf2ac>
   2383c:	add	r3, r3, #676	; 0x2a4
   23840:	mov	r2, r5
   23844:	ldr	r6, [sp, #56]	; 0x38
   23848:	mov	r1, r6
   2384c:	mov	r0, r8
   23850:	bl	18a44 <_start@@Base+0x441c>
   23854:	mov	r4, r0
   23858:	cmp	r5, r0
   2385c:	cmpne	r6, r0
   23860:	bne	23878 <_start@@Base+0xf250>
   23864:	b	23bc0 <_start@@Base+0xf598>
   23868:	cmp	r3, #0
   2386c:	cmpeq	r2, #127	; 0x7f
   23870:	strbls	r2, [sp, #71]	; 0x47
   23874:	bhi	238d8 <_start@@Base+0xf2b0>
   23878:	ldrsb	r3, [sp, #71]	; 0x47
   2387c:	cmp	r3, #2
   23880:	beq	238f4 <_start@@Base+0xf2cc>
   23884:	mov	r3, r9
   23888:	mov	r2, r9
   2388c:	mov	r1, #0
   23890:	ldr	r0, [r8]
   23894:	bl	29678 <flatcc_builder_table_add@@Base>
   23898:	cmp	r0, #0
   2389c:	beq	23bc0 <_start@@Base+0xf598>
   238a0:	ldrsb	r3, [sp, #71]	; 0x47
   238a4:	strb	r3, [r0]
   238a8:	b	23550 <_start@@Base+0xef28>
   238ac:	nop			; (mov r0, r0)
   238b0:	eorsvc	r0, r2, #0
   238b4:	cmnvs	pc, #28416	; 0x6f00
   238b8:	andvc	r0, r0, #0
   238bc:	cmnvs	pc, #28416	; 0x6f00
   238c0:	andeq	r0, r0, r0
   238c4:	strbvc	r3, [r3, #-512]!	; 0xfffffe00
   238c8:	andeq	sp, r3, r8, ror #25
   238cc:			; <UNDEFINED> instruction: 0xffff0000
   238d0:	strbvc	r0, [r3, #-0]!
   238d4:	andeq	r4, r5, r0, ror r0
   238d8:	mov	r3, #7
   238dc:	mov	r2, r5
   238e0:	mov	r1, r0
   238e4:	mov	r0, r8
   238e8:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   238ec:	mov	r4, r0
   238f0:	b	23824 <_start@@Base+0xf1fc>
   238f4:	ldr	r3, [r8, #8]
   238f8:	tst	r3, #2
   238fc:	beq	23550 <_start@@Base+0xef28>
   23900:	b	23884 <_start@@Base+0xf25c>
   23904:	mov	r6, #0
   23908:	mov	r7, #0
   2390c:	b	234fc <_start@@Base+0xeed4>
   23910:	mov	r3, #3
   23914:	mov	r2, r5
   23918:	mov	r1, r4
   2391c:	mov	r0, r8
   23920:	bl	193e8 <_start@@Base+0x4dc0>
   23924:	mov	r6, r0
   23928:	cmp	r0, r4
   2392c:	beq	23a4c <_start@@Base+0xf424>
   23930:	mov	r1, #0
   23934:	strb	r1, [sp, #71]	; 0x47
   23938:	mov	r2, #0
   2393c:	mov	r3, #0
   23940:	strd	r2, [sp, #80]	; 0x50
   23944:	str	r1, [sp, #76]	; 0x4c
   23948:	cmp	r5, r0
   2394c:	beq	239ec <_start@@Base+0xf3c4>
   23950:	add	r3, sp, #80	; 0x50
   23954:	str	r3, [sp]
   23958:	add	r3, sp, #76	; 0x4c
   2395c:	mov	r2, r5
   23960:	mov	r1, r0
   23964:	mov	r0, r8
   23968:	bl	2ed84 <flatcc_json_parser_integer@@Base>
   2396c:	mov	r4, r0
   23970:	cmp	r6, r0
   23974:	beq	239ec <_start@@Base+0xf3c4>
   23978:	ldr	r3, [sp, #76]	; 0x4c
   2397c:	cmp	r3, #0
   23980:	bne	239cc <_start@@Base+0xf3a4>
   23984:	ldrd	r2, [sp, #80]	; 0x50
   23988:	cmp	r3, #0
   2398c:	cmpeq	r2, #255	; 0xff
   23990:	strbls	r2, [sp, #71]	; 0x47
   23994:	bhi	23a20 <_start@@Base+0xf3f8>
   23998:	ldrb	r3, [sp, #71]	; 0x47
   2399c:	cmp	r3, #2
   239a0:	beq	23a3c <_start@@Base+0xf414>
   239a4:	mov	r3, r9
   239a8:	mov	r2, r9
   239ac:	mov	r1, #3
   239b0:	ldr	r0, [r8]
   239b4:	bl	29678 <flatcc_builder_table_add@@Base>
   239b8:	cmp	r0, #0
   239bc:	beq	23bc0 <_start@@Base+0xf598>
   239c0:	ldrb	r3, [sp, #71]	; 0x47
   239c4:	strb	r3, [r0]
   239c8:	b	23550 <_start@@Base+0xef28>
   239cc:	mov	r3, #8
   239d0:	mov	r2, r5
   239d4:	mov	r1, r0
   239d8:	mov	r0, r8
   239dc:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   239e0:	mov	r4, r0
   239e4:	cmp	r6, r4
   239e8:	bne	23998 <_start@@Base+0xf370>
   239ec:	add	r3, sp, #71	; 0x47
   239f0:	str	r3, [sp]
   239f4:	ldr	r3, [pc, #-296]	; 238d4 <_start@@Base+0xf2ac>
   239f8:	add	r3, r3, #692	; 0x2b4
   239fc:	mov	r2, r5
   23a00:	mov	r1, r6
   23a04:	mov	r0, r8
   23a08:	bl	18e28 <_start@@Base+0x4800>
   23a0c:	mov	r4, r0
   23a10:	cmp	r5, r0
   23a14:	cmpne	r6, r0
   23a18:	bne	23998 <_start@@Base+0xf370>
   23a1c:	b	23bc0 <_start@@Base+0xf598>
   23a20:	mov	r3, #7
   23a24:	mov	r2, r5
   23a28:	mov	r1, r0
   23a2c:	mov	r0, r8
   23a30:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   23a34:	mov	r4, r0
   23a38:	b	239e4 <_start@@Base+0xf3bc>
   23a3c:	ldr	r3, [r8, #8]
   23a40:	tst	r3, #2
   23a44:	beq	23550 <_start@@Base+0xef28>
   23a48:	b	239a4 <_start@@Base+0xf37c>
   23a4c:	mov	r2, r5
   23a50:	mov	r1, r0
   23a54:	mov	r0, r8
   23a58:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   23a5c:	mov	r4, r0
   23a60:	b	23550 <_start@@Base+0xef28>
   23a64:	mov	r3, #2
   23a68:	mov	r2, r5
   23a6c:	mov	r1, r4
   23a70:	mov	r0, r8
   23a74:	bl	193e8 <_start@@Base+0x4dc0>
   23a78:	mov	r6, r0
   23a7c:	cmp	r0, r4
   23a80:	beq	23b9c <_start@@Base+0xf574>
   23a84:	mov	r1, #0
   23a88:	strb	r1, [sp, #71]	; 0x47
   23a8c:	mov	r2, #0
   23a90:	mov	r3, #0
   23a94:	strd	r2, [sp, #80]	; 0x50
   23a98:	str	r1, [sp, #76]	; 0x4c
   23a9c:	cmp	r5, r0
   23aa0:	beq	23b40 <_start@@Base+0xf518>
   23aa4:	add	r3, sp, #80	; 0x50
   23aa8:	str	r3, [sp]
   23aac:	add	r3, sp, #76	; 0x4c
   23ab0:	mov	r2, r5
   23ab4:	mov	r1, r0
   23ab8:	mov	r0, r8
   23abc:	bl	2ed84 <flatcc_json_parser_integer@@Base>
   23ac0:	mov	r4, r0
   23ac4:	cmp	r6, r0
   23ac8:	beq	23b40 <_start@@Base+0xf518>
   23acc:	ldr	r3, [sp, #76]	; 0x4c
   23ad0:	cmp	r3, #0
   23ad4:	bne	23b20 <_start@@Base+0xf4f8>
   23ad8:	ldrd	r2, [sp, #80]	; 0x50
   23adc:	cmp	r3, #0
   23ae0:	cmpeq	r2, #255	; 0xff
   23ae4:	strbls	r2, [sp, #71]	; 0x47
   23ae8:	bhi	23b70 <_start@@Base+0xf548>
   23aec:	ldrb	r3, [sp, #71]	; 0x47
   23af0:	cmp	r3, #2
   23af4:	beq	23b8c <_start@@Base+0xf564>
   23af8:	mov	r3, r9
   23afc:	mov	r2, r9
   23b00:	mov	r1, #2
   23b04:	ldr	r0, [r8]
   23b08:	bl	29678 <flatcc_builder_table_add@@Base>
   23b0c:	cmp	r0, #0
   23b10:	beq	23bc0 <_start@@Base+0xf598>
   23b14:	ldrb	r3, [sp, #71]	; 0x47
   23b18:	strb	r3, [r0]
   23b1c:	b	23550 <_start@@Base+0xef28>
   23b20:	mov	r3, #8
   23b24:	mov	r2, r5
   23b28:	mov	r1, r0
   23b2c:	mov	r0, r8
   23b30:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   23b34:	mov	r4, r0
   23b38:	cmp	r6, r4
   23b3c:	bne	23aec <_start@@Base+0xf4c4>
   23b40:	add	r3, sp, #71	; 0x47
   23b44:	str	r3, [sp]
   23b48:	ldr	r3, [sp, #60]	; 0x3c
   23b4c:	mov	r2, r5
   23b50:	mov	r1, r6
   23b54:	mov	r0, r8
   23b58:	bl	18e28 <_start@@Base+0x4800>
   23b5c:	mov	r4, r0
   23b60:	cmp	r5, r0
   23b64:	cmpne	r6, r0
   23b68:	bne	23aec <_start@@Base+0xf4c4>
   23b6c:	b	23bc0 <_start@@Base+0xf598>
   23b70:	mov	r3, #7
   23b74:	mov	r2, r5
   23b78:	mov	r1, r0
   23b7c:	mov	r0, r8
   23b80:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   23b84:	mov	r4, r0
   23b88:	b	23b38 <_start@@Base+0xf510>
   23b8c:	ldr	r3, [r8, #8]
   23b90:	tst	r3, #2
   23b94:	beq	23550 <_start@@Base+0xef28>
   23b98:	b	23af8 <_start@@Base+0xf4d0>
   23b9c:	mov	r2, r5
   23ba0:	mov	r1, r0
   23ba4:	mov	r0, r8
   23ba8:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   23bac:	mov	r4, r0
   23bb0:	b	23550 <_start@@Base+0xef28>
   23bb4:	ldr	r3, [r8, #24]
   23bb8:	cmp	r3, #0
   23bbc:	beq	23bd8 <_start@@Base+0xf5b0>
   23bc0:	mov	r3, #33	; 0x21
   23bc4:	mov	r2, r5
   23bc8:	mov	r1, r4
   23bcc:	mov	r0, r8
   23bd0:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   23bd4:	b	23320 <_start@@Base+0xecf8>
   23bd8:	ldr	r0, [r8]
   23bdc:	bl	286cc <flatcc_builder_end_table@@Base>
   23be0:	ldr	r3, [sp, #128]	; 0x80
   23be4:	str	r0, [r3]
   23be8:	cmp	r0, #0
   23bec:	movne	r0, r4
   23bf0:	beq	23bc0 <_start@@Base+0xf598>
   23bf4:	b	23320 <_start@@Base+0xecf8>
   23bf8:	mov	r1, #0
   23bfc:	ldr	r0, [r0]
   23c00:	bl	27c7c <flatcc_builder_start_table@@Base>
   23c04:	cmp	r0, #0
   23c08:	bne	23cc4 <_start@@Base+0xf69c>
   23c0c:	add	r3, sp, #80	; 0x50
   23c10:	mov	r2, r5
   23c14:	mov	r1, r4
   23c18:	mov	r0, r8
   23c1c:	bl	17de0 <_start@@Base+0x37b8>
   23c20:	mov	r4, r0
   23c24:	ldr	r3, [sp, #80]	; 0x50
   23c28:	cmp	r3, #0
   23c2c:	beq	23cb8 <_start@@Base+0xf690>
   23c30:	mov	r6, #1
   23c34:	mov	r9, #5
   23c38:	mov	r7, #0
   23c3c:	mov	r1, r0
   23c40:	b	23c74 <_start@@Base+0xf64c>
   23c44:	mov	r2, r5
   23c48:	mov	r0, r8
   23c4c:	bl	2eb3c <flatcc_json_parser_unmatched_symbol@@Base>
   23c50:	add	r3, sp, #80	; 0x50
   23c54:	mov	r2, r5
   23c58:	mov	r1, r0
   23c5c:	mov	r0, r8
   23c60:	bl	18104 <_start@@Base+0x3adc>
   23c64:	mov	r1, r0
   23c68:	ldr	r3, [sp, #80]	; 0x50
   23c6c:	cmp	r3, #0
   23c70:	beq	23cb4 <_start@@Base+0xf68c>
   23c74:	cmp	r5, r1
   23c78:	beq	23c44 <_start@@Base+0xf61c>
   23c7c:	ldrb	r3, [r1]
   23c80:	cmp	r3, #34	; 0x22
   23c84:	addeq	r1, r1, #1
   23c88:	streq	r7, [r8, #12]
   23c8c:	beq	23c44 <_start@@Base+0xf61c>
   23c90:	cmp	r3, #46	; 0x2e
   23c94:	strne	r6, [r8, #12]
   23c98:	bne	23c44 <_start@@Base+0xf61c>
   23c9c:	mov	r3, r9
   23ca0:	mov	r2, r5
   23ca4:	mov	r0, r8
   23ca8:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   23cac:	mov	r1, r0
   23cb0:	b	23c44 <_start@@Base+0xf61c>
   23cb4:	mov	r4, r0
   23cb8:	ldr	r3, [r8, #24]
   23cbc:	cmp	r3, #0
   23cc0:	beq	23cdc <_start@@Base+0xf6b4>
   23cc4:	mov	r3, #33	; 0x21
   23cc8:	mov	r2, r5
   23ccc:	mov	r1, r4
   23cd0:	mov	r0, r8
   23cd4:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   23cd8:	b	23320 <_start@@Base+0xecf8>
   23cdc:	ldr	r0, [r8]
   23ce0:	bl	286cc <flatcc_builder_end_table@@Base>
   23ce4:	ldr	r3, [sp, #128]	; 0x80
   23ce8:	str	r0, [r3]
   23cec:	cmp	r0, #0
   23cf0:	movne	r0, r4
   23cf4:	beq	23cc4 <_start@@Base+0xf69c>
   23cf8:	b	23320 <_start@@Base+0xecf8>
   23cfc:	ldr	r3, [sp, #128]	; 0x80
   23d00:	mov	r2, r5
   23d04:	mov	r1, r4
   23d08:	bl	1ae3c <_start@@Base+0x6814>
   23d0c:	b	23320 <_start@@Base+0xecf8>
   23d10:	ldr	r3, [r0, #8]
   23d14:	tst	r3, #1
   23d18:	bne	23d30 <_start@@Base+0xf708>
   23d1c:	mov	r3, #15
   23d20:	mov	r2, r5
   23d24:	mov	r1, r4
   23d28:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   23d2c:	b	2333c <_start@@Base+0xed14>
   23d30:	mov	r2, r5
   23d34:	mov	r1, r4
   23d38:	bl	2e008 <flatcc_json_parser_generic_json@@Base>
   23d3c:	b	2333c <_start@@Base+0xed14>
   23d40:	mov	r3, #33	; 0x21
   23d44:	mov	r2, r5
   23d48:	mov	r1, r0
   23d4c:	mov	r0, r8
   23d50:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   23d54:	b	2333c <_start@@Base+0xed14>
   23d58:	push	{r4, r5, r6, r7, r8, r9, lr}
   23d5c:	sub	sp, sp, #12
   23d60:	mov	r9, r0
   23d64:	mov	r4, r1
   23d68:	mov	r5, r2
   23d6c:	mov	r8, r3
   23d70:	mov	r1, r2
   23d74:	mov	r0, r4
   23d78:	bl	14750 <_start@@Base+0x128>
   23d7c:	add	r3, pc, #836	; 0x344
   23d80:	ldrd	r2, [r3]
   23d84:	cmp	r1, r3
   23d88:	cmpeq	r0, r2
   23d8c:	bhi	23ecc <_start@@Base+0xf8a4>
   23d90:	add	r3, pc, #824	; 0x338
   23d94:	ldrd	r2, [r3]
   23d98:	cmp	r1, r3
   23d9c:	cmpeq	r0, r2
   23da0:	bhi	23e10 <_start@@Base+0xf7e8>
   23da4:	mov	r0, #0
   23da8:	bic	r1, r1, #255	; 0xff
   23dac:	add	r3, pc, #804	; 0x324
   23db0:	ldrd	r2, [r3]
   23db4:	cmp	r1, r3
   23db8:	cmpeq	r0, r2
   23dbc:	beq	23dcc <_start@@Base+0xf7a4>
   23dc0:	mov	r0, r4
   23dc4:	add	sp, sp, #12
   23dc8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   23dcc:	sub	r3, r5, r4
   23dd0:	cmp	r3, #3
   23dd4:	ble	23dc0 <_start@@Base+0xf798>
   23dd8:	ldrb	r3, [r4, #3]
   23ddc:	cmp	r3, #46	; 0x2e
   23de0:	bne	23dc0 <_start@@Base+0xf798>
   23de4:	ldr	r3, [sp, #44]	; 0x2c
   23de8:	str	r3, [sp, #4]
   23dec:	ldr	r3, [sp, #40]	; 0x28
   23df0:	str	r3, [sp]
   23df4:	mov	r3, r8
   23df8:	mov	r2, r5
   23dfc:	add	r1, r4, #4
   23e00:	mov	r0, r9
   23e04:	bl	166c8 <_start@@Base+0x20a0>
   23e08:	mov	r4, r0
   23e0c:	b	23dc0 <_start@@Base+0xf798>
   23e10:	mov	r6, #0
   23e14:	bic	r7, r1, #255	; 0xff
   23e18:	add	r3, pc, #704	; 0x2c0
   23e1c:	ldrd	r2, [r3]
   23e20:	cmp	r7, r3
   23e24:	cmpeq	r6, r2
   23e28:	beq	23e88 <_start@@Base+0xf860>
   23e2c:	and	r0, r0, #-16777216	; 0xff000000
   23e30:	add	r3, pc, #688	; 0x2b0
   23e34:	ldrd	r2, [r3]
   23e38:	cmp	r1, r3
   23e3c:	cmpeq	r0, r2
   23e40:	bne	23dc0 <_start@@Base+0xf798>
   23e44:	sub	r3, r5, r4
   23e48:	cmp	r3, #5
   23e4c:	ble	23dc0 <_start@@Base+0xf798>
   23e50:	ldrb	r3, [r4, #5]
   23e54:	cmp	r3, #46	; 0x2e
   23e58:	bne	23dc0 <_start@@Base+0xf798>
   23e5c:	ldr	r3, [sp, #44]	; 0x2c
   23e60:	str	r3, [sp, #4]
   23e64:	ldr	r3, [sp, #40]	; 0x28
   23e68:	str	r3, [sp]
   23e6c:	mov	r3, r8
   23e70:	mov	r2, r5
   23e74:	add	r1, r4, #6
   23e78:	mov	r0, r9
   23e7c:	bl	17010 <_start@@Base+0x29e8>
   23e80:	mov	r4, r0
   23e84:	b	23dc0 <_start@@Base+0xf798>
   23e88:	sub	r3, r5, r4
   23e8c:	cmp	r3, #3
   23e90:	ble	23dc0 <_start@@Base+0xf798>
   23e94:	ldrb	r3, [r4, #3]
   23e98:	cmp	r3, #46	; 0x2e
   23e9c:	bne	23dc0 <_start@@Base+0xf798>
   23ea0:	ldr	r3, [sp, #44]	; 0x2c
   23ea4:	str	r3, [sp, #4]
   23ea8:	ldr	r3, [sp, #40]	; 0x28
   23eac:	str	r3, [sp]
   23eb0:	mov	r3, r8
   23eb4:	mov	r2, r5
   23eb8:	add	r1, r4, #4
   23ebc:	mov	r0, r9
   23ec0:	bl	16980 <_start@@Base+0x2358>
   23ec4:	mov	r4, r0
   23ec8:	b	23dc0 <_start@@Base+0xf798>
   23ecc:	add	r3, pc, #540	; 0x21c
   23ed0:	ldrd	r2, [r3]
   23ed4:	cmp	r1, r3
   23ed8:	cmpeq	r0, r2
   23edc:	bhi	23f38 <_start@@Base+0xf910>
   23ee0:	add	r3, pc, #528	; 0x210
   23ee4:	ldrd	r2, [r3]
   23ee8:	cmp	r1, r3
   23eec:	cmpeq	r0, r2
   23ef0:	bne	23dc0 <_start@@Base+0xf798>
   23ef4:	sub	r3, r5, r4
   23ef8:	cmp	r3, #8
   23efc:	ble	23dc0 <_start@@Base+0xf798>
   23f00:	ldrb	r3, [r4, #8]
   23f04:	cmp	r3, #46	; 0x2e
   23f08:	bne	23dc0 <_start@@Base+0xf798>
   23f0c:	ldr	r3, [sp, #44]	; 0x2c
   23f10:	str	r3, [sp, #4]
   23f14:	ldr	r3, [sp, #40]	; 0x28
   23f18:	str	r3, [sp]
   23f1c:	mov	r3, r8
   23f20:	mov	r2, r5
   23f24:	add	r1, r4, #9
   23f28:	mov	r0, r9
   23f2c:	bl	16ac8 <_start@@Base+0x24a0>
   23f30:	mov	r4, r0
   23f34:	b	23dc0 <_start@@Base+0xf798>
   23f38:	add	r3, pc, #448	; 0x1c0
   23f3c:	ldrd	r2, [r3]
   23f40:	cmp	r1, r3
   23f44:	cmpeq	r0, r2
   23f48:	bhi	23fa4 <_start@@Base+0xf97c>
   23f4c:	add	r3, pc, #436	; 0x1b4
   23f50:	ldrd	r2, [r3]
   23f54:	cmp	r1, r3
   23f58:	cmpeq	r0, r2
   23f5c:	bne	23dc0 <_start@@Base+0xf798>
   23f60:	sub	r3, r5, r4
   23f64:	cmp	r3, #8
   23f68:	ble	23dc0 <_start@@Base+0xf798>
   23f6c:	ldrb	r3, [r4, #8]
   23f70:	cmp	r3, #46	; 0x2e
   23f74:	bne	23dc0 <_start@@Base+0xf798>
   23f78:	ldr	r3, [sp, #44]	; 0x2c
   23f7c:	str	r3, [sp, #4]
   23f80:	ldr	r3, [sp, #40]	; 0x28
   23f84:	str	r3, [sp]
   23f88:	mov	r3, r8
   23f8c:	mov	r2, r5
   23f90:	add	r1, r4, #9
   23f94:	mov	r0, r9
   23f98:	bl	16c6c <_start@@Base+0x2644>
   23f9c:	mov	r4, r0
   23fa0:	b	23dc0 <_start@@Base+0xf798>
   23fa4:	add	r3, pc, #356	; 0x164
   23fa8:	ldrd	r2, [r3]
   23fac:	cmp	r1, r3
   23fb0:	cmpeq	r0, r2
   23fb4:	beq	24080 <_start@@Base+0xfa58>
   23fb8:	add	r3, pc, #344	; 0x158
   23fbc:	ldrd	r2, [r3]
   23fc0:	cmp	r1, r3
   23fc4:	cmpeq	r0, r2
   23fc8:	bne	23dc0 <_start@@Base+0xf798>
   23fcc:	add	r6, r4, #8
   23fd0:	mov	r1, r5
   23fd4:	mov	r0, r6
   23fd8:	bl	14750 <_start@@Base+0x128>
   23fdc:	mov	r0, #0
   23fe0:	add	r3, pc, #312	; 0x138
   23fe4:	ldrd	r2, [r3]
   23fe8:	cmp	r1, r3
   23fec:	cmpeq	r0, r2
   23ff0:	bne	23dc0 <_start@@Base+0xf798>
   23ff4:	sub	r3, r5, r6
   23ff8:	cmp	r3, #4
   23ffc:	ble	23dc0 <_start@@Base+0xf798>
   24000:	ldrb	r3, [r4, #12]
   24004:	cmp	r3, #46	; 0x2e
   24008:	bne	23dc0 <_start@@Base+0xf798>
   2400c:	add	r7, r4, #13
   24010:	cmp	r6, r7
   24014:	beq	23dc0 <_start@@Base+0xf798>
   24018:	mov	r1, r5
   2401c:	mov	r0, r7
   24020:	bl	14750 <_start@@Base+0x128>
   24024:	mov	r0, #0
   24028:	and	r1, r1, #-16777216	; 0xff000000
   2402c:	cmp	r1, #2013265920	; 0x78000000
   24030:	cmpeq	r0, #0
   24034:	movne	r4, r7
   24038:	bne	23dc0 <_start@@Base+0xf798>
   2403c:	ldr	r3, [sp, #44]	; 0x2c
   24040:	str	r3, [sp]
   24044:	mov	r3, #1
   24048:	mov	r2, r5
   2404c:	mov	r1, r7
   24050:	mov	r0, r9
   24054:	bl	2dbcc <flatcc_json_parser_match_constant@@Base>
   24058:	mov	r4, r0
   2405c:	cmp	r7, r0
   24060:	beq	23dc0 <_start@@Base+0xf798>
   24064:	mov	r2, #0
   24068:	mov	r3, #0
   2406c:	ldr	r1, [sp, #40]	; 0x28
   24070:	strd	r2, [r1]
   24074:	mov	r3, #0
   24078:	str	r3, [r8]
   2407c:	b	23dc0 <_start@@Base+0xf798>
   24080:	sub	r3, r5, r4
   24084:	cmp	r3, #8
   24088:	ble	23dc0 <_start@@Base+0xf798>
   2408c:	ldrb	r3, [r4, #8]
   24090:	cmp	r3, #46	; 0x2e
   24094:	bne	23dc0 <_start@@Base+0xf798>
   24098:	ldr	r3, [sp, #44]	; 0x2c
   2409c:	str	r3, [sp, #4]
   240a0:	ldr	r3, [sp, #40]	; 0x28
   240a4:	str	r3, [sp]
   240a8:	mov	r3, r8
   240ac:	mov	r2, r5
   240b0:	add	r1, r4, #9
   240b4:	mov	r0, r9
   240b8:	bl	16e8c <_start@@Base+0x2864>
   240bc:	mov	r4, r0
   240c0:	b	23dc0 <_start@@Base+0xf798>
   240c4:	nop			; (mov r0, r0)
   240c8:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   240cc:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   240d0:	ldrshvc	pc, [pc, #255]	; 241d7 <test_json@@Base+0xaf>	; <UNPREDICTABLE>
   240d4:	cmnmi	pc, #28416	; 0x6f00
   240d8:	andeq	r0, r0, r0
   240dc:	cmnmi	lr, r0, lsl #18
   240e0:	andeq	r0, r0, r0
   240e4:	strbtmi	r6, [pc], -r0, lsl #30
   240e8:	andvc	r0, r0, #0
   240ec:	cmnmi	pc, #28416	; 0x6f00
   240f0:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   240f4:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   240f8:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   240fc:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   24100:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   24104:	mcrvs	7, 3, r6, cr5, cr15, {2}
   24108:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   2410c:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   24110:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   24114:	mcrvs	7, 3, r6, cr5, cr15, {2}
   24118:	cfldrdvs	mvd7, [r0, #-484]!	; 0xfffffe1c
   2411c:	cdpvs	4, 6, cr7, cr15, cr5, {3}
   24120:	andeq	r0, r0, r0
   24124:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93

00024128 <test_json@@Base>:
   24128:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2412c:	sub	sp, sp, #372	; 0x174
   24130:	mov	r6, r0
   24134:	mov	r5, r1
   24138:	mov	r7, r2
   2413c:	mov	r8, r3
   24140:	ldr	r4, [sp, #412]	; 0x19c
   24144:	add	r0, sp, #128	; 0x80
   24148:	bl	2651c <flatcc_builder_init@@Base>
   2414c:	mov	r1, #0
   24150:	add	r0, sp, #36	; 0x24
   24154:	bl	3cd5c <flatcc_json_printer_init_dynamic_buffer@@Base>
   24158:	and	r3, r4, #1
   2415c:	strb	r3, [sp, #62]	; 0x3e
   24160:	lsr	r3, r4, #1
   24164:	and	r3, r3, #1
   24168:	strb	r3, [sp, #63]	; 0x3f
   2416c:	lsr	r3, r4, #2
   24170:	and	r3, r3, #1
   24174:	strb	r3, [sp, #64]	; 0x40
   24178:	lsr	r3, r4, #3
   2417c:	and	r3, r3, #1
   24180:	strb	r3, [sp, #65]	; 0x41
   24184:	tst	r4, #16
   24188:	movne	r3, #2
   2418c:	strbne	r3, [sp, #61]	; 0x3d
   24190:	tst	r4, #32
   24194:	beq	241b0 <test_json@@Base+0x88>
   24198:	mov	r3, #2
   2419c:	strb	r3, [sp, #61]	; 0x3d
   241a0:	mov	r3, #1
   241a4:	strb	r3, [sp, #62]	; 0x3e
   241a8:	mov	r3, #0
   241ac:	strb	r3, [sp, #63]	; 0x3f
   241b0:	mov	r0, r5
   241b4:	bl	145a0 <strlen@plt>
   241b8:	ldr	r3, [r6, #4]
   241bc:	str	r3, [sp, #8]
   241c0:	ldr	r3, [r6]
   241c4:	str	r3, [sp, #4]
   241c8:	ldr	r3, [sp, #408]	; 0x198
   241cc:	str	r3, [sp]
   241d0:	mov	r3, r0
   241d4:	mov	r2, r5
   241d8:	add	r1, sp, #84	; 0x54
   241dc:	add	r0, sp, #128	; 0x80
   241e0:	bl	2fee4 <flatcc_json_parser_table_as_root@@Base>
   241e4:	cmp	r0, r8
   241e8:	beq	24334 <test_json@@Base+0x20c>
   241ec:	cmp	r8, #0
   241f0:	beq	24300 <test_json@@Base+0x1d8>
   241f4:	cmp	r0, #0
   241f8:	beq	242c8 <test_json@@Base+0x1a0>
   241fc:	ldr	r4, [pc, #840]	; 2454c <test_json@@Base+0x424>
   24200:	ldr	r6, [r4]
   24204:	bl	2cb88 <flatcc_json_parser_error_string@@Base>
   24208:	mov	r3, r0
   2420c:	ldr	r2, [sp, #416]	; 0x1a0
   24210:	ldr	r1, [pc, #824]	; 24550 <test_json@@Base+0x428>
   24214:	mov	r0, r6
   24218:	bl	145ac <fprintf@plt>
   2421c:	ldr	r6, [r4]
   24220:	mov	r0, r8
   24224:	bl	2cb88 <flatcc_json_parser_error_string@@Base>
   24228:	mov	r2, r0
   2422c:	ldr	r1, [pc, #800]	; 24554 <test_json@@Base+0x42c>
   24230:	mov	r0, r6
   24234:	bl	145ac <fprintf@plt>
   24238:	mov	r2, r5
   2423c:	ldr	r1, [pc, #788]	; 24558 <test_json@@Base+0x430>
   24240:	ldr	r0, [r4]
   24244:	bl	145ac <fprintf@plt>
   24248:	ldr	r3, [sp, #104]	; 0x68
   2424c:	sub	r3, r3, #1
   24250:	cmp	r3, #0
   24254:	ble	24284 <test_json@@Base+0x15c>
   24258:	mov	r4, #0
   2425c:	ldr	r6, [pc, #744]	; 2454c <test_json@@Base+0x424>
   24260:	mov	r5, #32
   24264:	ldr	r1, [r6]
   24268:	mov	r0, r5
   2426c:	bl	145f4 <fputc@plt>
   24270:	add	r4, r4, #1
   24274:	ldr	r3, [sp, #104]	; 0x68
   24278:	sub	r3, r3, #1
   2427c:	cmp	r3, r4
   24280:	bgt	24264 <test_json@@Base+0x13c>
   24284:	ldr	r3, [pc, #704]	; 2454c <test_json@@Base+0x424>
   24288:	ldr	r3, [r3]
   2428c:	mov	r2, #2
   24290:	mov	r1, #1
   24294:	ldr	r0, [pc, #704]	; 2455c <test_json@@Base+0x434>
   24298:	bl	14570 <fwrite@plt>
   2429c:	mov	fp, #0
   242a0:	mvn	r4, #0
   242a4:	mov	r0, fp
   242a8:	bl	29edc <flatcc_builder_aligned_free@@Base>
   242ac:	add	r0, sp, #128	; 0x80
   242b0:	bl	266c4 <flatcc_builder_clear@@Base>
   242b4:	add	r0, sp, #36	; 0x24
   242b8:	bl	3ce4c <flatcc_json_printer_clear@@Base>
   242bc:	mov	r0, r4
   242c0:	add	sp, sp, #372	; 0x174
   242c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   242c8:	ldr	r4, [pc, #636]	; 2454c <test_json@@Base+0x424>
   242cc:	ldr	r6, [r4]
   242d0:	mov	r0, r8
   242d4:	bl	2cb88 <flatcc_json_parser_error_string@@Base>
   242d8:	mov	r3, r0
   242dc:	ldr	r2, [sp, #416]	; 0x1a0
   242e0:	ldr	r1, [pc, #632]	; 24560 <test_json@@Base+0x438>
   242e4:	mov	r0, r6
   242e8:	bl	145ac <fprintf@plt>
   242ec:	mov	r2, r5
   242f0:	ldr	r1, [pc, #608]	; 24558 <test_json@@Base+0x430>
   242f4:	ldr	r0, [r4]
   242f8:	bl	145ac <fprintf@plt>
   242fc:	b	24248 <test_json@@Base+0x120>
   24300:	ldr	r4, [pc, #580]	; 2454c <test_json@@Base+0x424>
   24304:	ldr	r6, [r4]
   24308:	bl	2cb88 <flatcc_json_parser_error_string@@Base>
   2430c:	mov	r3, r0
   24310:	ldr	r2, [sp, #416]	; 0x1a0
   24314:	ldr	r1, [pc, #584]	; 24564 <test_json@@Base+0x43c>
   24318:	mov	r0, r6
   2431c:	bl	145ac <fprintf@plt>
   24320:	mov	r2, r5
   24324:	ldr	r1, [pc, #556]	; 24558 <test_json@@Base+0x430>
   24328:	ldr	r0, [r4]
   2432c:	bl	145ac <fprintf@plt>
   24330:	b	24248 <test_json@@Base+0x120>
   24334:	cmp	r8, #0
   24338:	movne	fp, #0
   2433c:	movne	r4, fp
   24340:	bne	242a4 <test_json@@Base+0x17c>
   24344:	add	r1, sp, #364	; 0x16c
   24348:	add	r0, sp, #128	; 0x80
   2434c:	bl	29dd0 <flatcc_builder_finalize_aligned_buffer@@Base>
   24350:	mov	fp, r0
   24354:	ldr	r3, [r6, #12]
   24358:	ldr	r2, [r6]
   2435c:	ldr	r1, [sp, #364]	; 0x16c
   24360:	bl	2b24c <flatcc_verify_table_as_root@@Base>
   24364:	cmp	r0, #0
   24368:	beq	243d4 <test_json@@Base+0x2ac>
   2436c:	ldr	r3, [pc, #472]	; 2454c <test_json@@Base+0x424>
   24370:	ldr	r4, [r3]
   24374:	bl	2a56c <flatcc_verify_error_string@@Base>
   24378:	str	r0, [sp]
   2437c:	ldr	r3, [sp, #416]	; 0x1a0
   24380:	ldr	r2, [pc, #480]	; 24568 <test_json@@Base+0x440>
   24384:	ldr	r1, [pc, #480]	; 2456c <test_json@@Base+0x444>
   24388:	mov	r0, r4
   2438c:	bl	145ac <fprintf@plt>
   24390:	cmp	fp, #0
   24394:	mvneq	r4, #0
   24398:	beq	242a4 <test_json@@Base+0x17c>
   2439c:	ldr	r8, [sp, #364]	; 0x16c
   243a0:	ldr	r3, [pc, #420]	; 2454c <test_json@@Base+0x424>
   243a4:	ldr	r6, [r3]
   243a8:	ldr	r2, [pc, #448]	; 24570 <test_json@@Base+0x448>
   243ac:	ldr	r1, [pc, #448]	; 24574 <test_json@@Base+0x44c>
   243b0:	mov	r0, r6
   243b4:	bl	145ac <fprintf@plt>
   243b8:	cmp	r8, #0
   243bc:	beq	24534 <test_json@@Base+0x40c>
   243c0:	sub	r7, fp, #1
   243c4:	mov	r4, #0
   243c8:	ldr	r9, [pc, #424]	; 24578 <test_json@@Base+0x450>
   243cc:	mov	sl, #46	; 0x2e
   243d0:	b	244d4 <test_json@@Base+0x3ac>
   243d4:	ldr	r3, [r6]
   243d8:	ldr	r2, [r6, #8]
   243dc:	str	r2, [sp]
   243e0:	ldr	r2, [sp, #364]	; 0x16c
   243e4:	mov	r1, fp
   243e8:	add	r0, sp, #36	; 0x24
   243ec:	bl	3c82c <flatcc_json_printer_table_as_root@@Base>
   243f0:	add	r1, sp, #360	; 0x168
   243f4:	add	r0, sp, #36	; 0x24
   243f8:	bl	3cdf0 <flatcc_json_printer_get_buffer@@Base>
   243fc:	subs	r5, r0, #0
   24400:	beq	24418 <test_json@@Base+0x2f0>
   24404:	mov	r1, r5
   24408:	mov	r0, r7
   2440c:	bl	14528 <strcmp@plt>
   24410:	subs	r4, r0, #0
   24414:	beq	242a4 <test_json@@Base+0x17c>
   24418:	ldr	r4, [pc, #300]	; 2454c <test_json@@Base+0x424>
   2441c:	ldr	r2, [sp, #416]	; 0x1a0
   24420:	ldr	r1, [pc, #340]	; 2457c <test_json@@Base+0x454>
   24424:	ldr	r0, [r4]
   24428:	bl	145ac <fprintf@plt>
   2442c:	ldr	r6, [pc, #292]	; 24558 <test_json@@Base+0x430>
   24430:	mov	r2, r5
   24434:	mov	r1, r6
   24438:	ldr	r0, [r4]
   2443c:	bl	145ac <fprintf@plt>
   24440:	ldr	r3, [r4]
   24444:	mov	r2, #10
   24448:	mov	r1, #1
   2444c:	ldr	r0, [pc, #300]	; 24580 <test_json@@Base+0x458>
   24450:	bl	14570 <fwrite@plt>
   24454:	mov	r2, r7
   24458:	mov	r1, r6
   2445c:	ldr	r0, [r4]
   24460:	bl	145ac <fprintf@plt>
   24464:	b	24390 <test_json@@Base+0x268>
   24468:	add	r2, sp, #16
   2446c:	ldr	r1, [pc, #272]	; 24584 <test_json@@Base+0x45c>
   24470:	mov	r0, r6
   24474:	bl	145ac <fprintf@plt>
   24478:	mov	r2, r4
   2447c:	ldr	r1, [pc, #260]	; 24588 <test_json@@Base+0x460>
   24480:	mov	r0, r6
   24484:	bl	145ac <fprintf@plt>
   24488:	ldrb	r2, [r7, #1]
   2448c:	mov	r1, r9
   24490:	mov	r0, r6
   24494:	bl	145ac <fprintf@plt>
   24498:	ldrb	r2, [r7, #1]!
   2449c:	sub	r3, r2, #32
   244a0:	uxtb	r3, r3
   244a4:	cmp	r3, #94	; 0x5e
   244a8:	add	r3, sp, #368	; 0x170
   244ac:	add	r3, r3, r5
   244b0:	strbhi	sl, [r3, #-352]	; 0xfffffea0
   244b4:	strbls	r2, [r3, #-352]	; 0xfffffea0
   244b8:	add	r3, sp, #368	; 0x170
   244bc:	add	r5, r3, r5
   244c0:	mov	r3, #0
   244c4:	strb	r3, [r5, #-351]	; 0xfffffea1
   244c8:	add	r4, r4, #1
   244cc:	cmp	r8, r4
   244d0:	beq	24500 <test_json@@Base+0x3d8>
   244d4:	ands	r5, r4, #15
   244d8:	bne	244e8 <test_json@@Base+0x3c0>
   244dc:	cmp	r4, #0
   244e0:	bne	24468 <test_json@@Base+0x340>
   244e4:	b	24478 <test_json@@Base+0x350>
   244e8:	tst	r4, #7
   244ec:	bne	24488 <test_json@@Base+0x360>
   244f0:	mov	r1, r6
   244f4:	mov	r0, #32
   244f8:	bl	145f4 <fputc@plt>
   244fc:	b	24488 <test_json@@Base+0x360>
   24500:	tst	r4, #15
   24504:	beq	24534 <test_json@@Base+0x40c>
   24508:	ldr	r8, [pc, #124]	; 2458c <test_json@@Base+0x464>
   2450c:	mov	r7, #3
   24510:	mov	r5, #1
   24514:	mov	r3, r6
   24518:	mov	r2, r7
   2451c:	mov	r1, r5
   24520:	mov	r0, r8
   24524:	bl	14570 <fwrite@plt>
   24528:	add	r4, r4, #1
   2452c:	tst	r4, #15
   24530:	bne	24514 <test_json@@Base+0x3ec>
   24534:	add	r2, sp, #16
   24538:	ldr	r1, [pc, #68]	; 24584 <test_json@@Base+0x45c>
   2453c:	mov	r0, r6
   24540:	bl	145ac <fprintf@plt>
   24544:	mvn	r4, #0
   24548:	b	242a4 <test_json@@Base+0x17c>
   2454c:	andeq	r4, r5, r0, asr #6
   24550:	strdeq	sp, [r3], -r0
   24554:	andeq	sp, r3, r8, lsl sp
   24558:	andeq	sp, r3, r4, ror sp
   2455c:	muleq	r3, ip, sp
   24560:	andeq	sp, r3, r8, lsr sp
   24564:	andeq	sp, r3, r8, ror sp
   24568:	andeq	sp, r3, r0, lsr #27
   2456c:	andeq	sp, r3, ip, ror #27
   24570:	andeq	sp, r3, r8, asr lr
   24574:	andeq	sp, r3, r8, ror #28
   24578:	andeq	sp, r3, r0, lsl #29
   2457c:	andeq	sp, r3, r4, lsl lr
   24580:	andeq	sp, r3, ip, asr #28
   24584:	andeq	sp, r3, r0, ror lr
   24588:	andeq	sp, r3, r8, ror lr
   2458c:	andeq	sp, r3, r8, lsl #29

00024590 <edge_case_tests@@Base>:
   24590:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24594:	sub	sp, sp, #20
   24598:	ldr	r6, [pc, #720]	; 24870 <edge_case_tests@@Base+0x2e0>
   2459c:	mov	r3, #155	; 0x9b
   245a0:	str	r3, [sp, #8]
   245a4:	mov	r5, #0
   245a8:	str	r5, [sp, #4]
   245ac:	str	r5, [sp]
   245b0:	mov	r3, r5
   245b4:	ldr	r2, [pc, #696]	; 24874 <edge_case_tests@@Base+0x2e4>
   245b8:	ldr	r1, [pc, #696]	; 24878 <edge_case_tests@@Base+0x2e8>
   245bc:	mov	r0, r6
   245c0:	bl	24128 <test_json@@Base>
   245c4:	mov	r4, r0
   245c8:	ldr	r7, [pc, #684]	; 2487c <edge_case_tests@@Base+0x2ec>
   245cc:	mov	r3, #168	; 0xa8
   245d0:	str	r3, [sp, #8]
   245d4:	str	r5, [sp, #4]
   245d8:	mov	r8, #2
   245dc:	str	r8, [sp]
   245e0:	mov	r3, r5
   245e4:	ldr	r2, [pc, #660]	; 24880 <edge_case_tests@@Base+0x2f0>
   245e8:	mov	r1, r7
   245ec:	mov	r0, r6
   245f0:	bl	24128 <test_json@@Base>
   245f4:	orr	r4, r4, r0
   245f8:	mov	r3, #172	; 0xac
   245fc:	str	r3, [sp, #8]
   24600:	str	r8, [sp, #4]
   24604:	str	r5, [sp]
   24608:	mov	r3, r5
   2460c:	ldr	r2, [pc, #624]	; 24884 <edge_case_tests@@Base+0x2f4>
   24610:	ldr	r1, [pc, #624]	; 24888 <edge_case_tests@@Base+0x2f8>
   24614:	mov	r0, r6
   24618:	bl	24128 <test_json@@Base>
   2461c:	orr	r4, r4, r0
   24620:	mov	r3, #176	; 0xb0
   24624:	str	r3, [sp, #8]
   24628:	mov	fp, #4
   2462c:	str	fp, [sp, #4]
   24630:	str	r8, [sp]
   24634:	mov	r3, r5
   24638:	ldr	r2, [pc, #588]	; 2488c <edge_case_tests@@Base+0x2fc>
   2463c:	mov	r1, r7
   24640:	mov	r0, r6
   24644:	bl	24128 <test_json@@Base>
   24648:	orr	r4, r4, r0
   2464c:	mov	r3, #180	; 0xb4
   24650:	str	r3, [sp, #8]
   24654:	mov	r9, #8
   24658:	str	r9, [sp, #4]
   2465c:	str	r5, [sp]
   24660:	mov	r3, r5
   24664:	ldr	r2, [pc, #548]	; 24890 <edge_case_tests@@Base+0x300>
   24668:	ldr	r1, [pc, #548]	; 24894 <edge_case_tests@@Base+0x304>
   2466c:	mov	r0, r6
   24670:	bl	24128 <test_json@@Base>
   24674:	orr	r4, r4, r0
   24678:	mov	r3, #195	; 0xc3
   2467c:	str	r3, [sp, #8]
   24680:	str	r5, [sp, #4]
   24684:	str	r8, [sp]
   24688:	mov	r3, r5
   2468c:	ldr	r2, [pc, #492]	; 24880 <edge_case_tests@@Base+0x2f0>
   24690:	ldr	r1, [pc, #512]	; 24898 <edge_case_tests@@Base+0x308>
   24694:	mov	r0, r6
   24698:	bl	24128 <test_json@@Base>
   2469c:	orr	r4, r4, r0
   246a0:	ldr	sl, [pc, #500]	; 2489c <edge_case_tests@@Base+0x30c>
   246a4:	mov	r3, #199	; 0xc7
   246a8:	str	r3, [sp, #8]
   246ac:	str	r5, [sp, #4]
   246b0:	mov	r7, #1
   246b4:	str	r7, [sp]
   246b8:	mov	r3, r5
   246bc:	ldr	r2, [pc, #476]	; 248a0 <edge_case_tests@@Base+0x310>
   246c0:	mov	r1, sl
   246c4:	mov	r0, r6
   246c8:	bl	24128 <test_json@@Base>
   246cc:	orr	r4, r4, r0
   246d0:	mov	r3, #203	; 0xcb
   246d4:	str	r3, [sp, #8]
   246d8:	str	r7, [sp, #4]
   246dc:	str	r7, [sp]
   246e0:	mov	r3, r5
   246e4:	ldr	r2, [pc, #440]	; 248a4 <edge_case_tests@@Base+0x314>
   246e8:	mov	r1, sl
   246ec:	mov	r0, r6
   246f0:	bl	24128 <test_json@@Base>
   246f4:	orr	r4, r4, r0
   246f8:	mov	r3, #209	; 0xd1
   246fc:	str	r3, [sp, #8]
   24700:	str	r5, [sp, #4]
   24704:	str	r7, [sp]
   24708:	mov	r3, r5
   2470c:	ldr	r2, [pc, #396]	; 248a0 <edge_case_tests@@Base+0x310>
   24710:	ldr	r1, [pc, #400]	; 248a8 <edge_case_tests@@Base+0x318>
   24714:	mov	r0, r6
   24718:	bl	24128 <test_json@@Base>
   2471c:	orr	r4, r4, r0
   24720:	ldr	sl, [pc, #388]	; 248ac <edge_case_tests@@Base+0x31c>
   24724:	mov	r3, #217	; 0xd9
   24728:	str	r3, [sp, #8]
   2472c:	str	r5, [sp, #4]
   24730:	str	r8, [sp]
   24734:	mov	r3, r5
   24738:	ldr	r2, [pc, #320]	; 24880 <edge_case_tests@@Base+0x2f0>
   2473c:	mov	r1, sl
   24740:	mov	r0, r6
   24744:	bl	24128 <test_json@@Base>
   24748:	orr	r4, r4, r0
   2474c:	mov	r3, #221	; 0xdd
   24750:	str	r3, [sp, #8]
   24754:	str	r8, [sp, #4]
   24758:	str	r5, [sp]
   2475c:	mov	r3, r5
   24760:	ldr	r2, [pc, #284]	; 24884 <edge_case_tests@@Base+0x2f4>
   24764:	ldr	r1, [pc, #324]	; 248b0 <edge_case_tests@@Base+0x320>
   24768:	mov	r0, r6
   2476c:	bl	24128 <test_json@@Base>
   24770:	orr	r4, r4, r0
   24774:	mov	r3, #225	; 0xe1
   24778:	str	r3, [sp, #8]
   2477c:	str	fp, [sp, #4]
   24780:	str	r8, [sp]
   24784:	mov	r3, r5
   24788:	ldr	r2, [pc, #252]	; 2488c <edge_case_tests@@Base+0x2fc>
   2478c:	mov	r1, sl
   24790:	mov	r0, r6
   24794:	bl	24128 <test_json@@Base>
   24798:	orr	r4, r4, r0
   2479c:	mov	r3, #229	; 0xe5
   247a0:	str	r3, [sp, #8]
   247a4:	str	r9, [sp, #4]
   247a8:	str	r5, [sp]
   247ac:	mov	r3, r5
   247b0:	ldr	r2, [pc, #252]	; 248b4 <edge_case_tests@@Base+0x324>
   247b4:	ldr	r1, [pc, #252]	; 248b8 <edge_case_tests@@Base+0x328>
   247b8:	mov	r0, r6
   247bc:	bl	24128 <test_json@@Base>
   247c0:	orr	r4, r4, r0
   247c4:	mov	r3, #233	; 0xe9
   247c8:	str	r3, [sp, #8]
   247cc:	str	r5, [sp, #4]
   247d0:	str	r8, [sp]
   247d4:	mov	r3, r5
   247d8:	ldr	r2, [pc, #160]	; 24880 <edge_case_tests@@Base+0x2f0>
   247dc:	ldr	r1, [pc, #216]	; 248bc <edge_case_tests@@Base+0x32c>
   247e0:	mov	r0, r6
   247e4:	bl	24128 <test_json@@Base>
   247e8:	orr	r4, r4, r0
   247ec:	ldr	r8, [pc, #204]	; 248c0 <edge_case_tests@@Base+0x330>
   247f0:	mov	r3, #237	; 0xed
   247f4:	str	r3, [sp, #8]
   247f8:	str	r5, [sp, #4]
   247fc:	str	r7, [sp]
   24800:	mov	r3, r5
   24804:	ldr	r2, [pc, #148]	; 248a0 <edge_case_tests@@Base+0x310>
   24808:	mov	r1, r8
   2480c:	mov	r0, r6
   24810:	bl	24128 <test_json@@Base>
   24814:	orr	r4, r4, r0
   24818:	mov	r3, #241	; 0xf1
   2481c:	str	r3, [sp, #8]
   24820:	str	r7, [sp, #4]
   24824:	str	r7, [sp]
   24828:	mov	r3, r5
   2482c:	ldr	r2, [pc, #112]	; 248a4 <edge_case_tests@@Base+0x314>
   24830:	mov	r1, r8
   24834:	mov	r0, r6
   24838:	bl	24128 <test_json@@Base>
   2483c:	orr	r4, r4, r0
   24840:	mov	r3, #247	; 0xf7
   24844:	str	r3, [sp, #8]
   24848:	str	r5, [sp, #4]
   2484c:	str	r7, [sp]
   24850:	mov	r3, r5
   24854:	ldr	r2, [pc, #68]	; 248a0 <edge_case_tests@@Base+0x310>
   24858:	ldr	r1, [pc, #100]	; 248c4 <edge_case_tests@@Base+0x334>
   2485c:	mov	r0, r6
   24860:	bl	24128 <test_json@@Base>
   24864:	orr	r0, r4, r0
   24868:	add	sp, sp, #20
   2486c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24870:	andeq	sp, r3, ip, ror r8
   24874:	andeq	sp, r3, ip, lsl #29
   24878:	andeq	sp, r3, ip, lsr #29
   2487c:	andeq	sp, r3, r4, lsl #30
   24880:	andeq	sp, r3, r0, ror #29
   24884:	andeq	sp, r3, r8, lsr #30
   24888:	andeq	sp, r3, r8, asr #30
   2488c:	andeq	sp, r3, r0, ror pc
   24890:	andeq	sp, r3, r4, lsl #31
   24894:	muleq	r3, r8, r0
   24898:	strheq	lr, [r3], -ip
   2489c:	andeq	lr, r3, r0, lsl #2
   248a0:	andeq	lr, r3, r4, ror #1
   248a4:	andeq	lr, r3, r4, lsr r1
   248a8:	andeq	lr, r3, ip, asr #2
   248ac:	andeq	lr, r3, r0, asr #3
   248b0:	andeq	lr, r3, r0, ror #3
   248b4:	andeq	lr, r3, r4, lsl #4
   248b8:	andeq	lr, r3, ip, lsl r3
   248bc:	andeq	lr, r3, r0, lsr r3
   248c0:	andeq	lr, r3, r0, asr r3
   248c4:	andeq	lr, r3, ip, ror r3

000248c8 <error_case_tests@@Base>:
   248c8:	push	{r4, r5, r6, lr}
   248cc:	sub	sp, sp, #16
   248d0:	ldr	r6, [pc, #728]	; 24bb0 <error_case_tests@@Base+0x2e8>
   248d4:	ldr	r3, [pc, #728]	; 24bb4 <error_case_tests@@Base+0x2ec>
   248d8:	str	r3, [sp, #8]
   248dc:	mov	r4, #0
   248e0:	str	r4, [sp, #4]
   248e4:	str	r4, [sp]
   248e8:	mov	r3, #13
   248ec:	mov	r2, r4
   248f0:	ldr	r1, [pc, #704]	; 24bb8 <error_case_tests@@Base+0x2f0>
   248f4:	mov	r0, r6
   248f8:	bl	24128 <test_json@@Base>
   248fc:	mov	r5, r0
   24900:	ldr	r3, [pc, #692]	; 24bbc <error_case_tests@@Base+0x2f4>
   24904:	str	r3, [sp, #8]
   24908:	str	r4, [sp, #4]
   2490c:	str	r4, [sp]
   24910:	mov	r3, #13
   24914:	mov	r2, r4
   24918:	ldr	r1, [pc, #672]	; 24bc0 <error_case_tests@@Base+0x2f8>
   2491c:	mov	r0, r6
   24920:	bl	24128 <test_json@@Base>
   24924:	orr	r5, r5, r0
   24928:	ldr	r3, [pc, #660]	; 24bc4 <error_case_tests@@Base+0x2fc>
   2492c:	str	r3, [sp, #8]
   24930:	str	r4, [sp, #4]
   24934:	str	r4, [sp]
   24938:	mov	r3, #13
   2493c:	mov	r2, r4
   24940:	ldr	r1, [pc, #640]	; 24bc8 <error_case_tests@@Base+0x300>
   24944:	mov	r0, r6
   24948:	bl	24128 <test_json@@Base>
   2494c:	orr	r5, r5, r0
   24950:	ldr	r3, [pc, #628]	; 24bcc <error_case_tests@@Base+0x304>
   24954:	str	r3, [sp, #8]
   24958:	str	r4, [sp, #4]
   2495c:	str	r4, [sp]
   24960:	mov	r3, #13
   24964:	mov	r2, r4
   24968:	ldr	r1, [pc, #608]	; 24bd0 <error_case_tests@@Base+0x308>
   2496c:	mov	r0, r6
   24970:	bl	24128 <test_json@@Base>
   24974:	orr	r5, r5, r0
   24978:	ldr	r3, [pc, #596]	; 24bd4 <error_case_tests@@Base+0x30c>
   2497c:	str	r3, [sp, #8]
   24980:	str	r4, [sp, #4]
   24984:	str	r4, [sp]
   24988:	mov	r3, #13
   2498c:	mov	r2, r4
   24990:	ldr	r1, [pc, #576]	; 24bd8 <error_case_tests@@Base+0x310>
   24994:	mov	r0, r6
   24998:	bl	24128 <test_json@@Base>
   2499c:	orr	r5, r5, r0
   249a0:	mov	r3, #296	; 0x128
   249a4:	str	r3, [sp, #8]
   249a8:	str	r4, [sp, #4]
   249ac:	str	r4, [sp]
   249b0:	mov	r3, #13
   249b4:	mov	r2, r4
   249b8:	ldr	r1, [pc, #540]	; 24bdc <error_case_tests@@Base+0x314>
   249bc:	mov	r0, r6
   249c0:	bl	24128 <test_json@@Base>
   249c4:	orr	r5, r5, r0
   249c8:	ldr	r3, [pc, #528]	; 24be0 <error_case_tests@@Base+0x318>
   249cc:	str	r3, [sp, #8]
   249d0:	str	r4, [sp, #4]
   249d4:	str	r4, [sp]
   249d8:	mov	r3, #13
   249dc:	mov	r2, r4
   249e0:	ldr	r1, [pc, #508]	; 24be4 <error_case_tests@@Base+0x31c>
   249e4:	mov	r0, r6
   249e8:	bl	24128 <test_json@@Base>
   249ec:	orr	r5, r5, r0
   249f0:	ldr	r3, [pc, #496]	; 24be8 <error_case_tests@@Base+0x320>
   249f4:	str	r3, [sp, #8]
   249f8:	str	r4, [sp, #4]
   249fc:	str	r4, [sp]
   24a00:	mov	r3, #13
   24a04:	mov	r2, r4
   24a08:	ldr	r1, [pc, #476]	; 24bec <error_case_tests@@Base+0x324>
   24a0c:	mov	r0, r6
   24a10:	bl	24128 <test_json@@Base>
   24a14:	orr	r5, r5, r0
   24a18:	ldr	r3, [pc, #464]	; 24bf0 <error_case_tests@@Base+0x328>
   24a1c:	str	r3, [sp, #8]
   24a20:	str	r4, [sp, #4]
   24a24:	str	r4, [sp]
   24a28:	mov	r3, #13
   24a2c:	mov	r2, r4
   24a30:	ldr	r1, [pc, #444]	; 24bf4 <error_case_tests@@Base+0x32c>
   24a34:	mov	r0, r6
   24a38:	bl	24128 <test_json@@Base>
   24a3c:	orr	r5, r5, r0
   24a40:	ldr	r3, [pc, #432]	; 24bf8 <error_case_tests@@Base+0x330>
   24a44:	str	r3, [sp, #8]
   24a48:	str	r4, [sp, #4]
   24a4c:	str	r4, [sp]
   24a50:	mov	r3, #13
   24a54:	mov	r2, r4
   24a58:	ldr	r1, [pc, #412]	; 24bfc <error_case_tests@@Base+0x334>
   24a5c:	mov	r0, r6
   24a60:	bl	24128 <test_json@@Base>
   24a64:	orr	r5, r5, r0
   24a68:	mov	r3, #324	; 0x144
   24a6c:	str	r3, [sp, #8]
   24a70:	str	r4, [sp, #4]
   24a74:	str	r4, [sp]
   24a78:	mov	r3, #13
   24a7c:	mov	r2, r4
   24a80:	ldr	r1, [pc, #376]	; 24c00 <error_case_tests@@Base+0x338>
   24a84:	mov	r0, r6
   24a88:	bl	24128 <test_json@@Base>
   24a8c:	orr	r5, r5, r0
   24a90:	ldr	r3, [pc, #364]	; 24c04 <error_case_tests@@Base+0x33c>
   24a94:	str	r3, [sp, #8]
   24a98:	str	r4, [sp, #4]
   24a9c:	str	r4, [sp]
   24aa0:	mov	r3, #13
   24aa4:	mov	r2, r4
   24aa8:	ldr	r1, [pc, #344]	; 24c08 <error_case_tests@@Base+0x340>
   24aac:	mov	r0, r6
   24ab0:	bl	24128 <test_json@@Base>
   24ab4:	orr	r5, r5, r0
   24ab8:	mov	r3, #328	; 0x148
   24abc:	str	r3, [sp, #8]
   24ac0:	str	r4, [sp, #4]
   24ac4:	str	r4, [sp]
   24ac8:	mov	r3, #13
   24acc:	mov	r2, r4
   24ad0:	ldr	r1, [pc, #308]	; 24c0c <error_case_tests@@Base+0x344>
   24ad4:	mov	r0, r6
   24ad8:	bl	24128 <test_json@@Base>
   24adc:	orr	r5, r5, r0
   24ae0:	ldr	r3, [pc, #296]	; 24c10 <error_case_tests@@Base+0x348>
   24ae4:	str	r3, [sp, #8]
   24ae8:	str	r4, [sp, #4]
   24aec:	str	r4, [sp]
   24af0:	mov	r3, #13
   24af4:	mov	r2, r4
   24af8:	ldr	r1, [pc, #276]	; 24c14 <error_case_tests@@Base+0x34c>
   24afc:	mov	r0, r6
   24b00:	bl	24128 <test_json@@Base>
   24b04:	orr	r5, r5, r0
   24b08:	ldr	r3, [pc, #264]	; 24c18 <error_case_tests@@Base+0x350>
   24b0c:	str	r3, [sp, #8]
   24b10:	str	r4, [sp, #4]
   24b14:	str	r4, [sp]
   24b18:	mov	r3, #13
   24b1c:	mov	r2, r4
   24b20:	ldr	r1, [pc, #244]	; 24c1c <error_case_tests@@Base+0x354>
   24b24:	mov	r0, r6
   24b28:	bl	24128 <test_json@@Base>
   24b2c:	orr	r5, r5, r0
   24b30:	mov	r3, #336	; 0x150
   24b34:	str	r3, [sp, #8]
   24b38:	str	r4, [sp, #4]
   24b3c:	str	r4, [sp]
   24b40:	mov	r3, #13
   24b44:	mov	r2, r4
   24b48:	ldr	r1, [pc, #208]	; 24c20 <error_case_tests@@Base+0x358>
   24b4c:	mov	r0, r6
   24b50:	bl	24128 <test_json@@Base>
   24b54:	orr	r5, r5, r0
   24b58:	mov	r3, #340	; 0x154
   24b5c:	str	r3, [sp, #8]
   24b60:	str	r4, [sp, #4]
   24b64:	str	r4, [sp]
   24b68:	mov	r3, #13
   24b6c:	mov	r2, r4
   24b70:	ldr	r1, [pc, #172]	; 24c24 <error_case_tests@@Base+0x35c>
   24b74:	mov	r0, r6
   24b78:	bl	24128 <test_json@@Base>
   24b7c:	orr	r5, r5, r0
   24b80:	mov	r3, #344	; 0x158
   24b84:	str	r3, [sp, #8]
   24b88:	str	r4, [sp, #4]
   24b8c:	str	r4, [sp]
   24b90:	mov	r3, #13
   24b94:	mov	r2, r4
   24b98:	ldr	r1, [pc, #136]	; 24c28 <error_case_tests@@Base+0x360>
   24b9c:	mov	r0, r6
   24ba0:	bl	24128 <test_json@@Base>
   24ba4:	orr	r0, r5, r0
   24ba8:	add	sp, sp, #16
   24bac:	pop	{r4, r5, r6, pc}
   24bb0:	andeq	sp, r3, ip, ror r8
   24bb4:	andeq	r0, r0, sp, lsl r1
   24bb8:	ldrdeq	lr, [r3], -ip
   24bbc:	andeq	r0, r0, pc, lsl r1
   24bc0:	strdeq	lr, [r3], -r8
   24bc4:	andeq	r0, r0, r1, lsr #2
   24bc8:	andeq	lr, r3, ip, asr r4
   24bcc:	andeq	r0, r0, r3, lsr #2
   24bd0:			; <UNDEFINED> instruction: 0x0003e4bc
   24bd4:	andeq	r0, r0, r5, lsr #2
   24bd8:	andeq	lr, r3, r4, lsl r5
   24bdc:	andeq	lr, r3, ip, ror #10
   24be0:	andeq	r0, r0, fp, lsr #2
   24be4:	andeq	lr, r3, ip, lsl #12
   24be8:	andeq	r0, r0, pc, lsr #2
   24bec:	andeq	lr, r3, r8, lsr #13
   24bf0:	andeq	r0, r0, r3, lsr r1
   24bf4:	andeq	lr, r3, r0, ror r7
   24bf8:	andeq	r0, r0, r2, asr #2
   24bfc:	andeq	lr, r3, r8, lsr r8
   24c00:	andeq	lr, r3, r0, asr r8
   24c04:	andeq	r0, r0, r6, asr #2
   24c08:	andeq	lr, r3, r8, lsr #17
   24c0c:	strdeq	lr, [r3], -ip
   24c10:	andeq	r0, r0, sl, asr #2
   24c14:	andeq	lr, r3, ip, asr #18
   24c18:	andeq	r0, r0, sp, asr #2
   24c1c:	muleq	r3, ip, r9
   24c20:	andeq	lr, r3, r8, lsr #20
   24c24:			; <UNDEFINED> instruction: 0x0003eab4
   24c28:	andeq	lr, r3, r4, ror #22

00024c2c <base64_tests@@Base>:
   24c2c:	push	{r4, r5, r6, r7, r8, lr}
   24c30:	sub	sp, sp, #16
   24c34:	ldr	r6, [pc, #420]	; 24de0 <base64_tests@@Base+0x1b4>
   24c38:	ldr	r3, [pc, #420]	; 24de4 <base64_tests@@Base+0x1b8>
   24c3c:	str	r3, [sp, #8]
   24c40:	mov	r4, #0
   24c44:	str	r4, [sp, #4]
   24c48:	str	r4, [sp]
   24c4c:	mov	r3, r4
   24c50:	ldr	r2, [pc, #400]	; 24de8 <base64_tests@@Base+0x1bc>
   24c54:	ldr	r1, [pc, #400]	; 24dec <base64_tests@@Base+0x1c0>
   24c58:	mov	r0, r6
   24c5c:	bl	24128 <test_json@@Base>
   24c60:	mov	r5, r0
   24c64:	mov	r3, #372	; 0x174
   24c68:	str	r3, [sp, #8]
   24c6c:	str	r4, [sp, #4]
   24c70:	str	r4, [sp]
   24c74:	mov	r3, r4
   24c78:	ldr	r2, [pc, #368]	; 24df0 <base64_tests@@Base+0x1c4>
   24c7c:	ldr	r1, [pc, #368]	; 24df4 <base64_tests@@Base+0x1c8>
   24c80:	mov	r0, r6
   24c84:	bl	24128 <test_json@@Base>
   24c88:	orr	r5, r5, r0
   24c8c:	ldr	r8, [pc, #356]	; 24df8 <base64_tests@@Base+0x1cc>
   24c90:	mov	r3, #376	; 0x178
   24c94:	str	r3, [sp, #8]
   24c98:	str	r4, [sp, #4]
   24c9c:	str	r4, [sp]
   24ca0:	mov	r3, r4
   24ca4:	mov	r2, r8
   24ca8:	ldr	r1, [pc, #332]	; 24dfc <base64_tests@@Base+0x1d0>
   24cac:	mov	r0, r6
   24cb0:	bl	24128 <test_json@@Base>
   24cb4:	orr	r5, r5, r0
   24cb8:	ldr	r7, [pc, #320]	; 24e00 <base64_tests@@Base+0x1d4>
   24cbc:	ldr	r3, [pc, #320]	; 24e04 <base64_tests@@Base+0x1d8>
   24cc0:	str	r3, [sp, #8]
   24cc4:	str	r4, [sp, #4]
   24cc8:	str	r4, [sp]
   24ccc:	mov	r3, r4
   24cd0:	mov	r2, r7
   24cd4:	ldr	r1, [pc, #300]	; 24e08 <base64_tests@@Base+0x1dc>
   24cd8:	mov	r0, r6
   24cdc:	bl	24128 <test_json@@Base>
   24ce0:	orr	r5, r5, r0
   24ce4:	ldr	r3, [pc, #288]	; 24e0c <base64_tests@@Base+0x1e0>
   24ce8:	str	r3, [sp, #8]
   24cec:	str	r4, [sp, #4]
   24cf0:	str	r4, [sp]
   24cf4:	mov	r3, r4
   24cf8:	mov	r2, r8
   24cfc:	ldr	r1, [pc, #268]	; 24e10 <base64_tests@@Base+0x1e4>
   24d00:	mov	r0, r6
   24d04:	bl	24128 <test_json@@Base>
   24d08:	orr	r5, r5, r0
   24d0c:	ldr	r3, [pc, #256]	; 24e14 <base64_tests@@Base+0x1e8>
   24d10:	str	r3, [sp, #8]
   24d14:	str	r4, [sp, #4]
   24d18:	str	r4, [sp]
   24d1c:	mov	r3, r4
   24d20:	mov	r2, r7
   24d24:	ldr	r1, [pc, #236]	; 24e18 <base64_tests@@Base+0x1ec>
   24d28:	mov	r0, r6
   24d2c:	bl	24128 <test_json@@Base>
   24d30:	orr	r5, r5, r0
   24d34:	mov	r3, #388	; 0x184
   24d38:	str	r3, [sp, #8]
   24d3c:	str	r4, [sp, #4]
   24d40:	str	r4, [sp]
   24d44:	mov	r3, #31
   24d48:	mov	r2, r4
   24d4c:	ldr	r1, [pc, #200]	; 24e1c <base64_tests@@Base+0x1f0>
   24d50:	mov	r0, r6
   24d54:	bl	24128 <test_json@@Base>
   24d58:	orr	r5, r5, r0
   24d5c:	ldr	r3, [pc, #188]	; 24e20 <base64_tests@@Base+0x1f4>
   24d60:	str	r3, [sp, #8]
   24d64:	str	r4, [sp, #4]
   24d68:	str	r4, [sp]
   24d6c:	mov	r3, #32
   24d70:	mov	r2, r4
   24d74:	ldr	r1, [pc, #168]	; 24e24 <base64_tests@@Base+0x1f8>
   24d78:	mov	r0, r6
   24d7c:	bl	24128 <test_json@@Base>
   24d80:	orr	r5, r5, r0
   24d84:	ldr	r7, [pc, #156]	; 24e28 <base64_tests@@Base+0x1fc>
   24d88:	ldr	r3, [pc, #156]	; 24e2c <base64_tests@@Base+0x200>
   24d8c:	str	r3, [sp, #8]
   24d90:	str	r4, [sp, #4]
   24d94:	str	r4, [sp]
   24d98:	mov	r3, r4
   24d9c:	mov	r2, r7
   24da0:	ldr	r1, [pc, #136]	; 24e30 <base64_tests@@Base+0x204>
   24da4:	mov	r0, r6
   24da8:	bl	24128 <test_json@@Base>
   24dac:	orr	r5, r5, r0
   24db0:	ldr	r3, [pc, #124]	; 24e34 <base64_tests@@Base+0x208>
   24db4:	str	r3, [sp, #8]
   24db8:	str	r4, [sp, #4]
   24dbc:	str	r4, [sp]
   24dc0:	mov	r3, r4
   24dc4:	mov	r2, r7
   24dc8:	ldr	r1, [pc, #104]	; 24e38 <base64_tests@@Base+0x20c>
   24dcc:	mov	r0, r6
   24dd0:	bl	24128 <test_json@@Base>
   24dd4:	orr	r0, r5, r0
   24dd8:	add	sp, sp, #16
   24ddc:	pop	{r4, r5, r6, r7, r8, pc}
   24de0:	andeq	sp, r3, ip, ror r8
   24de4:	andeq	r0, r0, r1, ror r1
   24de8:	andeq	sp, r3, r0, ror pc
   24dec:	andeq	lr, r3, r4, lsl ip
   24df0:	andeq	lr, r3, ip, lsr #24
   24df4:	andeq	lr, r3, r0, asr ip
   24df8:	andeq	lr, r3, r8, ror ip
   24dfc:	andeq	lr, r3, ip, lsr #26
   24e00:	andeq	lr, r3, r8, ror #27
   24e04:	andeq	r0, r0, fp, ror r1
   24e08:	andeq	lr, r3, r0, lsr #29
   24e0c:	andeq	r0, r0, lr, ror r1
   24e10:	andeq	lr, r3, ip, asr pc
   24e14:	andeq	r0, r0, r1, lsl #3
   24e18:	andeq	pc, r3, r4, lsl r0	; <UNPREDICTABLE>
   24e1c:	ldrdeq	pc, [r3], -r0
   24e20:	andeq	r0, r0, r7, lsl #3
   24e24:	andeq	pc, r3, ip, lsl #3
   24e28:	andeq	pc, r3, r8, asr #4
   24e2c:	muleq	r0, r6, r1
   24e30:	andeq	pc, r3, r0, lsr #6
   24e34:	andeq	r0, r0, r3, lsr #3
   24e38:	strdeq	pc, [r3], -r0

00024e3c <mixed_type_union_tests@@Base>:
   24e3c:	push	{r4, r5, r6, r7, lr}
   24e40:	sub	sp, sp, #20
   24e44:	ldr	r6, [pc, #292]	; 24f70 <mixed_type_union_tests@@Base+0x134>
   24e48:	mov	r3, #432	; 0x1b0
   24e4c:	str	r3, [sp, #8]
   24e50:	mov	r4, #0
   24e54:	str	r4, [sp, #4]
   24e58:	str	r4, [sp]
   24e5c:	mov	r3, r4
   24e60:	ldr	r2, [pc, #268]	; 24f74 <mixed_type_union_tests@@Base+0x138>
   24e64:	ldr	r1, [pc, #268]	; 24f78 <mixed_type_union_tests@@Base+0x13c>
   24e68:	mov	r0, r6
   24e6c:	bl	24128 <test_json@@Base>
   24e70:	mov	r5, r0
   24e74:	ldr	r7, [pc, #256]	; 24f7c <mixed_type_union_tests@@Base+0x140>
   24e78:	ldr	r3, [pc, #256]	; 24f80 <mixed_type_union_tests@@Base+0x144>
   24e7c:	str	r3, [sp, #8]
   24e80:	str	r4, [sp, #4]
   24e84:	str	r4, [sp]
   24e88:	mov	r3, r4
   24e8c:	mov	r2, r7
   24e90:	ldr	r1, [pc, #236]	; 24f84 <mixed_type_union_tests@@Base+0x148>
   24e94:	mov	r0, r6
   24e98:	bl	24128 <test_json@@Base>
   24e9c:	orr	r5, r5, r0
   24ea0:	ldr	r3, [pc, #224]	; 24f88 <mixed_type_union_tests@@Base+0x14c>
   24ea4:	str	r3, [sp, #8]
   24ea8:	str	r4, [sp, #4]
   24eac:	str	r4, [sp]
   24eb0:	mov	r3, r4
   24eb4:	mov	r2, r7
   24eb8:	ldr	r1, [pc, #204]	; 24f8c <mixed_type_union_tests@@Base+0x150>
   24ebc:	mov	r0, r6
   24ec0:	bl	24128 <test_json@@Base>
   24ec4:	orr	r5, r5, r0
   24ec8:	ldr	r3, [pc, #192]	; 24f90 <mixed_type_union_tests@@Base+0x154>
   24ecc:	str	r3, [sp, #8]
   24ed0:	str	r4, [sp, #4]
   24ed4:	str	r4, [sp]
   24ed8:	mov	r3, r4
   24edc:	ldr	r2, [pc, #176]	; 24f94 <mixed_type_union_tests@@Base+0x158>
   24ee0:	ldr	r1, [pc, #176]	; 24f98 <mixed_type_union_tests@@Base+0x15c>
   24ee4:	mov	r0, r6
   24ee8:	bl	24128 <test_json@@Base>
   24eec:	orr	r5, r5, r0
   24ef0:	ldr	r3, [pc, #164]	; 24f9c <mixed_type_union_tests@@Base+0x160>
   24ef4:	str	r3, [sp, #8]
   24ef8:	str	r4, [sp, #4]
   24efc:	str	r4, [sp]
   24f00:	mov	r3, r4
   24f04:	ldr	r2, [pc, #148]	; 24fa0 <mixed_type_union_tests@@Base+0x164>
   24f08:	ldr	r1, [pc, #148]	; 24fa4 <mixed_type_union_tests@@Base+0x168>
   24f0c:	mov	r0, r6
   24f10:	bl	24128 <test_json@@Base>
   24f14:	orr	r5, r5, r0
   24f18:	ldr	r3, [pc, #136]	; 24fa8 <mixed_type_union_tests@@Base+0x16c>
   24f1c:	str	r3, [sp, #8]
   24f20:	str	r4, [sp, #4]
   24f24:	str	r4, [sp]
   24f28:	mov	r3, r4
   24f2c:	ldr	r2, [pc, #120]	; 24fac <mixed_type_union_tests@@Base+0x170>
   24f30:	ldr	r1, [pc, #120]	; 24fb0 <mixed_type_union_tests@@Base+0x174>
   24f34:	mov	r0, r6
   24f38:	bl	24128 <test_json@@Base>
   24f3c:	orr	r5, r5, r0
   24f40:	ldr	r3, [pc, #108]	; 24fb4 <mixed_type_union_tests@@Base+0x178>
   24f44:	str	r3, [sp, #8]
   24f48:	str	r4, [sp, #4]
   24f4c:	str	r4, [sp]
   24f50:	mov	r3, r4
   24f54:	mov	r2, r7
   24f58:	ldr	r1, [pc, #88]	; 24fb8 <mixed_type_union_tests@@Base+0x17c>
   24f5c:	mov	r0, r6
   24f60:	bl	24128 <test_json@@Base>
   24f64:	orr	r0, r5, r0
   24f68:	add	sp, sp, #20
   24f6c:	pop	{r4, r5, r6, r7, pc}
   24f70:	andeq	sp, r3, ip, lsl #17
   24f74:			; <UNDEFINED> instruction: 0x0003f4bc
   24f78:	andeq	pc, r3, r4, lsl #10
   24f7c:	andeq	pc, r3, r4, asr r5	; <UNPREDICTABLE>
   24f80:			; <UNDEFINED> instruction: 0x000001b5
   24f84:	andeq	pc, r3, ip, asr #11
   24f88:			; <UNDEFINED> instruction: 0x000001ba
   24f8c:	andeq	pc, r3, r0, asr r6	; <UNPREDICTABLE>
   24f90:	andeq	r0, r0, r1, asr #3
   24f94:	andeq	pc, r3, r8, ror #13
   24f98:	andeq	pc, r3, r4, lsr #15
   24f9c:	andeq	r0, r0, sl, asr #3
   24fa0:	andeq	pc, r3, r4, lsl #17
   24fa4:	andeq	pc, r3, r4, ror #18
   24fa8:	ldrdeq	r0, [r0], -r5
   24fac:	andeq	pc, r3, ip, ror #20
   24fb0:			; <UNDEFINED> instruction: 0x0003fbb4
   24fb4:	ldrdeq	r0, [r0], -sl
   24fb8:	andeq	pc, r3, r8, lsr sp	; <UNPREDICTABLE>

00024fbc <union_vector_tests@@Base>:
   24fbc:	push	{r4, r5, r6, r7, lr}
   24fc0:	sub	sp, sp, #20
   24fc4:	ldr	r7, [pc, #252]	; 250c8 <union_vector_tests@@Base+0x10c>
   24fc8:	ldr	r6, [pc, #252]	; 250cc <union_vector_tests@@Base+0x110>
   24fcc:	ldr	r3, [pc, #252]	; 250d0 <union_vector_tests@@Base+0x114>
   24fd0:	str	r3, [sp, #8]
   24fd4:	mov	r4, #0
   24fd8:	str	r4, [sp, #4]
   24fdc:	str	r4, [sp]
   24fe0:	mov	r3, r4
   24fe4:	mov	r2, r7
   24fe8:	ldr	r1, [pc, #228]	; 250d4 <union_vector_tests@@Base+0x118>
   24fec:	mov	r0, r6
   24ff0:	bl	24128 <test_json@@Base>
   24ff4:	mov	r5, r0
   24ff8:	mov	r3, #488	; 0x1e8
   24ffc:	str	r3, [sp, #8]
   25000:	str	r4, [sp, #4]
   25004:	str	r4, [sp]
   25008:	mov	r3, r4
   2500c:	ldr	r2, [pc, #196]	; 250d8 <union_vector_tests@@Base+0x11c>
   25010:	ldr	r1, [pc, #196]	; 250dc <union_vector_tests@@Base+0x120>
   25014:	mov	r0, r6
   25018:	bl	24128 <test_json@@Base>
   2501c:	orr	r5, r5, r0
   25020:	ldr	r3, [pc, #184]	; 250e0 <union_vector_tests@@Base+0x124>
   25024:	str	r3, [sp, #8]
   25028:	str	r4, [sp, #4]
   2502c:	str	r4, [sp]
   25030:	mov	r3, r4
   25034:	ldr	r2, [pc, #168]	; 250e4 <union_vector_tests@@Base+0x128>
   25038:	ldr	r1, [pc, #168]	; 250e8 <union_vector_tests@@Base+0x12c>
   2503c:	mov	r0, r6
   25040:	bl	24128 <test_json@@Base>
   25044:	orr	r5, r5, r0
   25048:	ldr	r3, [pc, #156]	; 250ec <union_vector_tests@@Base+0x130>
   2504c:	str	r3, [sp, #8]
   25050:	str	r4, [sp, #4]
   25054:	str	r4, [sp]
   25058:	mov	r3, r4
   2505c:	ldr	r2, [pc, #140]	; 250f0 <union_vector_tests@@Base+0x134>
   25060:	ldr	r1, [pc, #140]	; 250f4 <union_vector_tests@@Base+0x138>
   25064:	mov	r0, r6
   25068:	bl	24128 <test_json@@Base>
   2506c:	orr	r5, r5, r0
   25070:	ldr	r3, [pc, #128]	; 250f8 <union_vector_tests@@Base+0x13c>
   25074:	str	r3, [sp, #8]
   25078:	str	r4, [sp, #4]
   2507c:	str	r4, [sp]
   25080:	mov	r3, r4
   25084:	mov	r2, r7
   25088:	ldr	r1, [pc, #108]	; 250fc <union_vector_tests@@Base+0x140>
   2508c:	mov	r0, r6
   25090:	bl	24128 <test_json@@Base>
   25094:	orr	r5, r5, r0
   25098:	mov	r3, #500	; 0x1f4
   2509c:	str	r3, [sp, #8]
   250a0:	str	r4, [sp, #4]
   250a4:	str	r4, [sp]
   250a8:	mov	r3, r4
   250ac:	ldr	r2, [pc, #76]	; 25100 <union_vector_tests@@Base+0x144>
   250b0:	ldr	r1, [pc, #76]	; 25104 <union_vector_tests@@Base+0x148>
   250b4:	mov	r0, r6
   250b8:	bl	24128 <test_json@@Base>
   250bc:	orr	r0, r5, r0
   250c0:	add	sp, sp, #20
   250c4:	pop	{r4, r5, r6, r7, pc}
   250c8:	andeq	pc, r3, r8, asr #27
   250cc:	muleq	r3, ip, r8
   250d0:	andeq	r0, r0, r5, ror #3
   250d4:	andeq	pc, r3, r0, lsl #28
   250d8:	andeq	pc, r3, r0, asr #28
   250dc:	andeq	pc, r3, ip, ror #28
   250e0:	andeq	r0, r0, fp, ror #3
   250e4:	andeq	pc, r3, r0, lsr #29
   250e8:	andeq	pc, r3, r4, ror #29
   250ec:	andeq	r0, r0, lr, ror #3
   250f0:	andeq	pc, r3, r4, lsr pc	; <UNPREDICTABLE>
   250f4:	andeq	pc, r3, r0, lsr #31
   250f8:	strdeq	r0, [r0], -r1
   250fc:	andeq	r0, r4, r0, lsr #32
   25100:	andeq	r0, r4, r0, rrx
   25104:	strheq	r0, [r4], -ip

00025108 <main@@Base>:
   25108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2510c:	sub	sp, sp, #20
   25110:	bl	24590 <edge_case_tests@@Base>
   25114:	mov	r5, r0
   25118:	bl	248c8 <error_case_tests@@Base>
   2511c:	orr	r5, r5, r0
   25120:	bl	24fbc <union_vector_tests@@Base>
   25124:	orr	r5, r5, r0
   25128:	bl	24c2c <base64_tests@@Base>
   2512c:	orr	r5, r5, r0
   25130:	bl	24e3c <mixed_type_union_tests@@Base>
   25134:	orr	r5, r5, r0
   25138:	ldr	r7, [pc, #2820]	; 25c44 <main@@Base+0xb3c>
   2513c:	ldr	r6, [pc, #2820]	; 25c48 <main@@Base+0xb40>
   25140:	ldr	r3, [pc, #2820]	; 25c4c <main@@Base+0xb44>
   25144:	str	r3, [sp, #8]
   25148:	mov	r4, #0
   2514c:	str	r4, [sp, #4]
   25150:	str	r4, [sp]
   25154:	mov	r3, r4
   25158:	mov	r2, r7
   2515c:	ldr	r1, [pc, #2796]	; 25c50 <main@@Base+0xb48>
   25160:	mov	r0, r6
   25164:	bl	24128 <test_json@@Base>
   25168:	orr	r5, r5, r0
   2516c:	ldr	r8, [pc, #2784]	; 25c54 <main@@Base+0xb4c>
   25170:	mov	r3, #528	; 0x210
   25174:	str	r3, [sp, #8]
   25178:	str	r4, [sp, #4]
   2517c:	str	r4, [sp]
   25180:	mov	r3, r4
   25184:	mov	r2, r8
   25188:	ldr	r1, [pc, #2760]	; 25c58 <main@@Base+0xb50>
   2518c:	mov	r0, r6
   25190:	bl	24128 <test_json@@Base>
   25194:	orr	r5, r5, r0
   25198:	ldr	sl, [pc, #2748]	; 25c5c <main@@Base+0xb54>
   2519c:	ldr	r3, [pc, #2748]	; 25c60 <main@@Base+0xb58>
   251a0:	str	r3, [sp, #8]
   251a4:	str	r4, [sp, #4]
   251a8:	str	r4, [sp]
   251ac:	mov	r3, r4
   251b0:	mov	r2, sl
   251b4:	ldr	r1, [pc, #2728]	; 25c64 <main@@Base+0xb5c>
   251b8:	mov	r0, r6
   251bc:	bl	24128 <test_json@@Base>
   251c0:	orr	r5, r5, r0
   251c4:	ldr	r9, [pc, #2716]	; 25c68 <main@@Base+0xb60>
   251c8:	ldr	r3, [pc, #2716]	; 25c6c <main@@Base+0xb64>
   251cc:	str	r3, [sp, #8]
   251d0:	str	r4, [sp, #4]
   251d4:	str	r4, [sp]
   251d8:	mov	r3, r4
   251dc:	mov	r2, r9
   251e0:	ldr	r1, [pc, #2696]	; 25c70 <main@@Base+0xb68>
   251e4:	mov	r0, r6
   251e8:	bl	24128 <test_json@@Base>
   251ec:	orr	r5, r5, r0
   251f0:	ldr	r3, [pc, #2684]	; 25c74 <main@@Base+0xb6c>
   251f4:	str	r3, [sp, #8]
   251f8:	str	r4, [sp, #4]
   251fc:	str	r4, [sp]
   25200:	mov	r3, r4
   25204:	mov	r2, r9
   25208:	ldr	r1, [pc, #2664]	; 25c78 <main@@Base+0xb70>
   2520c:	mov	r0, r6
   25210:	bl	24128 <test_json@@Base>
   25214:	orr	r5, r5, r0
   25218:	mov	r3, #540	; 0x21c
   2521c:	str	r3, [sp, #8]
   25220:	str	r4, [sp, #4]
   25224:	str	r4, [sp]
   25228:	mov	r3, r4
   2522c:	mov	r2, r8
   25230:	ldr	r1, [pc, #2628]	; 25c7c <main@@Base+0xb74>
   25234:	mov	r0, r6
   25238:	bl	24128 <test_json@@Base>
   2523c:	orr	r5, r5, r0
   25240:	ldr	r3, [pc, #2616]	; 25c80 <main@@Base+0xb78>
   25244:	str	r3, [sp, #8]
   25248:	str	r4, [sp, #4]
   2524c:	str	r4, [sp]
   25250:	mov	r3, r4
   25254:	mov	r2, sl
   25258:	ldr	r1, [pc, #2596]	; 25c84 <main@@Base+0xb7c>
   2525c:	mov	r0, r6
   25260:	bl	24128 <test_json@@Base>
   25264:	orr	r5, r5, r0
   25268:	ldr	r3, [pc, #2584]	; 25c88 <main@@Base+0xb80>
   2526c:	str	r3, [sp, #8]
   25270:	str	r4, [sp, #4]
   25274:	str	r4, [sp]
   25278:	mov	r3, r4
   2527c:	mov	r2, r7
   25280:	ldr	r1, [pc, #2564]	; 25c8c <main@@Base+0xb84>
   25284:	mov	r0, r6
   25288:	bl	24128 <test_json@@Base>
   2528c:	orr	r5, r5, r0
   25290:	ldr	r3, [pc, #2552]	; 25c90 <main@@Base+0xb88>
   25294:	str	r3, [sp, #8]
   25298:	str	r4, [sp, #4]
   2529c:	str	r4, [sp]
   252a0:	mov	r3, r4
   252a4:	mov	r2, r7
   252a8:	ldr	r1, [pc, #2532]	; 25c94 <main@@Base+0xb8c>
   252ac:	mov	r0, r6
   252b0:	bl	24128 <test_json@@Base>
   252b4:	orr	r5, r5, r0
   252b8:	ldr	r3, [pc, #2520]	; 25c98 <main@@Base+0xb90>
   252bc:	str	r3, [sp, #8]
   252c0:	str	r4, [sp, #4]
   252c4:	str	r4, [sp]
   252c8:	mov	r3, r4
   252cc:	mov	r2, r7
   252d0:	ldr	r1, [pc, #2500]	; 25c9c <main@@Base+0xb94>
   252d4:	mov	r0, r6
   252d8:	bl	24128 <test_json@@Base>
   252dc:	orr	r5, r5, r0
   252e0:	ldr	r3, [pc, #2488]	; 25ca0 <main@@Base+0xb98>
   252e4:	str	r3, [sp, #8]
   252e8:	str	r4, [sp, #4]
   252ec:	str	r4, [sp]
   252f0:	mov	r3, r4
   252f4:	mov	r2, r8
   252f8:	ldr	r1, [pc, #2468]	; 25ca4 <main@@Base+0xb9c>
   252fc:	mov	r0, r6
   25300:	bl	24128 <test_json@@Base>
   25304:	orr	r5, r5, r0
   25308:	ldr	r3, [pc, #2456]	; 25ca8 <main@@Base+0xba0>
   2530c:	str	r3, [sp, #8]
   25310:	str	r4, [sp, #4]
   25314:	str	r4, [sp]
   25318:	mov	r3, r4
   2531c:	mov	r2, sl
   25320:	ldr	r1, [pc, #2436]	; 25cac <main@@Base+0xba4>
   25324:	mov	r0, r6
   25328:	bl	24128 <test_json@@Base>
   2532c:	orr	r5, r5, r0
   25330:	mov	r3, #564	; 0x234
   25334:	str	r3, [sp, #8]
   25338:	str	r4, [sp, #4]
   2533c:	str	r4, [sp]
   25340:	mov	r3, r4
   25344:	mov	r2, r9
   25348:	ldr	r1, [pc, #2400]	; 25cb0 <main@@Base+0xba8>
   2534c:	mov	r0, r6
   25350:	bl	24128 <test_json@@Base>
   25354:	orr	r5, r5, r0
   25358:	ldr	r3, [pc, #2388]	; 25cb4 <main@@Base+0xbac>
   2535c:	str	r3, [sp, #8]
   25360:	str	r4, [sp, #4]
   25364:	str	r4, [sp]
   25368:	mov	r3, r4
   2536c:	mov	r2, r9
   25370:	ldr	r1, [pc, #2368]	; 25cb8 <main@@Base+0xbb0>
   25374:	mov	r0, r6
   25378:	bl	24128 <test_json@@Base>
   2537c:	orr	r5, r5, r0
   25380:	ldr	r3, [pc, #2356]	; 25cbc <main@@Base+0xbb4>
   25384:	str	r3, [sp, #8]
   25388:	str	r4, [sp, #4]
   2538c:	str	r4, [sp]
   25390:	mov	r3, r4
   25394:	mov	r2, r8
   25398:	ldr	r1, [pc, #2336]	; 25cc0 <main@@Base+0xbb8>
   2539c:	mov	r0, r6
   253a0:	bl	24128 <test_json@@Base>
   253a4:	orr	r5, r5, r0
   253a8:	ldr	r3, [pc, #2324]	; 25cc4 <main@@Base+0xbbc>
   253ac:	str	r3, [sp, #8]
   253b0:	str	r4, [sp, #4]
   253b4:	str	r4, [sp]
   253b8:	mov	r3, r4
   253bc:	mov	r2, sl
   253c0:	ldr	r1, [pc, #2304]	; 25cc8 <main@@Base+0xbc0>
   253c4:	mov	r0, r6
   253c8:	bl	24128 <test_json@@Base>
   253cc:	orr	r5, r5, r0
   253d0:	ldr	r3, [pc, #2292]	; 25ccc <main@@Base+0xbc4>
   253d4:	str	r3, [sp, #8]
   253d8:	str	r4, [sp, #4]
   253dc:	str	r4, [sp]
   253e0:	mov	r3, r4
   253e4:	mov	r2, r7
   253e8:	ldr	r1, [pc, #2272]	; 25cd0 <main@@Base+0xbc8>
   253ec:	mov	r0, r6
   253f0:	bl	24128 <test_json@@Base>
   253f4:	orr	r5, r5, r0
   253f8:	ldr	r3, [pc, #2260]	; 25cd4 <main@@Base+0xbcc>
   253fc:	str	r3, [sp, #8]
   25400:	str	r4, [sp, #4]
   25404:	str	r4, [sp]
   25408:	mov	r3, r4
   2540c:	mov	r2, r7
   25410:	ldr	r1, [pc, #2240]	; 25cd8 <main@@Base+0xbd0>
   25414:	mov	r0, r6
   25418:	bl	24128 <test_json@@Base>
   2541c:	orr	r5, r5, r0
   25420:	ldr	fp, [pc, #2228]	; 25cdc <main@@Base+0xbd4>
   25424:	ldr	r3, [pc, #2228]	; 25ce0 <main@@Base+0xbd8>
   25428:	str	r3, [sp, #8]
   2542c:	str	r4, [sp, #4]
   25430:	str	r4, [sp]
   25434:	mov	r3, r4
   25438:	mov	r2, fp
   2543c:	ldr	r1, [pc, #2208]	; 25ce4 <main@@Base+0xbdc>
   25440:	mov	r0, r6
   25444:	bl	24128 <test_json@@Base>
   25448:	orr	r5, r5, r0
   2544c:	ldr	r3, [pc, #2196]	; 25ce8 <main@@Base+0xbe0>
   25450:	str	r3, [sp, #8]
   25454:	str	r4, [sp, #4]
   25458:	str	r4, [sp]
   2545c:	mov	r3, r4
   25460:	mov	r2, fp
   25464:	ldr	r1, [pc, #2176]	; 25cec <main@@Base+0xbe4>
   25468:	mov	r0, r6
   2546c:	bl	24128 <test_json@@Base>
   25470:	orr	r5, r5, r0
   25474:	ldr	r3, [pc, #2164]	; 25cf0 <main@@Base+0xbe8>
   25478:	str	r3, [sp, #8]
   2547c:	str	r4, [sp, #4]
   25480:	str	r4, [sp]
   25484:	mov	r3, r4
   25488:	mov	r2, fp
   2548c:	ldr	r1, [pc, #2144]	; 25cf4 <main@@Base+0xbec>
   25490:	mov	r0, r6
   25494:	bl	24128 <test_json@@Base>
   25498:	orr	r5, r5, r0
   2549c:	ldr	r3, [pc, #2132]	; 25cf8 <main@@Base+0xbf0>
   254a0:	str	r3, [sp, #8]
   254a4:	str	r4, [sp, #4]
   254a8:	str	r4, [sp]
   254ac:	mov	r3, r4
   254b0:	mov	r2, r9
   254b4:	ldr	r1, [pc, #2112]	; 25cfc <main@@Base+0xbf4>
   254b8:	mov	r0, r6
   254bc:	bl	24128 <test_json@@Base>
   254c0:	orr	r5, r5, r0
   254c4:	ldr	r3, [pc, #2100]	; 25d00 <main@@Base+0xbf8>
   254c8:	str	r3, [sp, #8]
   254cc:	str	r4, [sp, #4]
   254d0:	str	r4, [sp]
   254d4:	mov	r3, r4
   254d8:	mov	r2, r8
   254dc:	ldr	r1, [pc, #2080]	; 25d04 <main@@Base+0xbfc>
   254e0:	mov	r0, r6
   254e4:	bl	24128 <test_json@@Base>
   254e8:	orr	r5, r5, r0
   254ec:	mov	r3, #604	; 0x25c
   254f0:	str	r3, [sp, #8]
   254f4:	str	r4, [sp, #4]
   254f8:	str	r4, [sp]
   254fc:	mov	r3, r4
   25500:	mov	r2, sl
   25504:	ldr	r1, [pc, #2044]	; 25d08 <main@@Base+0xc00>
   25508:	mov	r0, r6
   2550c:	bl	24128 <test_json@@Base>
   25510:	orr	r5, r5, r0
   25514:	ldr	r3, [pc, #2032]	; 25d0c <main@@Base+0xc04>
   25518:	str	r3, [sp, #8]
   2551c:	str	r4, [sp, #4]
   25520:	str	r4, [sp]
   25524:	mov	r3, r4
   25528:	ldr	r2, [pc, #2016]	; 25d10 <main@@Base+0xc08>
   2552c:	ldr	r1, [pc, #2016]	; 25d14 <main@@Base+0xc0c>
   25530:	mov	r0, r6
   25534:	bl	24128 <test_json@@Base>
   25538:	orr	r5, r5, r0
   2553c:	ldr	r3, [pc, #2004]	; 25d18 <main@@Base+0xc10>
   25540:	str	r3, [sp, #8]
   25544:	str	r4, [sp, #4]
   25548:	str	r4, [sp]
   2554c:	mov	r3, r4
   25550:	mov	r2, r9
   25554:	ldr	r1, [pc, #1984]	; 25d1c <main@@Base+0xc14>
   25558:	mov	r0, r6
   2555c:	bl	24128 <test_json@@Base>
   25560:	orr	r5, r5, r0
   25564:	ldr	r3, [pc, #1972]	; 25d20 <main@@Base+0xc18>
   25568:	str	r3, [sp, #8]
   2556c:	str	r4, [sp, #4]
   25570:	str	r4, [sp]
   25574:	mov	r3, r4
   25578:	ldr	r2, [pc, #1956]	; 25d24 <main@@Base+0xc1c>
   2557c:	ldr	r1, [pc, #1956]	; 25d28 <main@@Base+0xc20>
   25580:	mov	r0, r6
   25584:	bl	24128 <test_json@@Base>
   25588:	orr	r5, r5, r0
   2558c:	mov	r3, #616	; 0x268
   25590:	str	r3, [sp, #8]
   25594:	str	r4, [sp, #4]
   25598:	str	r4, [sp]
   2559c:	mov	r3, r4
   255a0:	ldr	r2, [pc, #1924]	; 25d2c <main@@Base+0xc24>
   255a4:	ldr	r1, [pc, #1924]	; 25d30 <main@@Base+0xc28>
   255a8:	mov	r0, r6
   255ac:	bl	24128 <test_json@@Base>
   255b0:	orr	r5, r5, r0
   255b4:	ldr	r3, [pc, #1912]	; 25d34 <main@@Base+0xc2c>
   255b8:	str	r3, [sp, #8]
   255bc:	str	r4, [sp, #4]
   255c0:	str	r4, [sp]
   255c4:	mov	r3, r4
   255c8:	ldr	r2, [pc, #1896]	; 25d38 <main@@Base+0xc30>
   255cc:	ldr	r1, [pc, #1896]	; 25d3c <main@@Base+0xc34>
   255d0:	mov	r0, r6
   255d4:	bl	24128 <test_json@@Base>
   255d8:	orr	r5, r5, r0
   255dc:	ldr	r3, [pc, #1884]	; 25d40 <main@@Base+0xc38>
   255e0:	str	r3, [sp, #8]
   255e4:	str	r4, [sp, #4]
   255e8:	str	r4, [sp]
   255ec:	mov	r3, r4
   255f0:	mov	r2, r8
   255f4:	ldr	r1, [pc, #1864]	; 25d44 <main@@Base+0xc3c>
   255f8:	mov	r0, r6
   255fc:	bl	24128 <test_json@@Base>
   25600:	orr	r5, r5, r0
   25604:	ldr	r3, [pc, #1852]	; 25d48 <main@@Base+0xc40>
   25608:	str	r3, [sp, #8]
   2560c:	str	r4, [sp, #4]
   25610:	str	r4, [sp]
   25614:	mov	r3, r4
   25618:	mov	r2, r8
   2561c:	ldr	r1, [pc, #1832]	; 25d4c <main@@Base+0xc44>
   25620:	mov	r0, r6
   25624:	bl	24128 <test_json@@Base>
   25628:	orr	r5, r5, r0
   2562c:	ldr	fp, [pc, #1820]	; 25d50 <main@@Base+0xc48>
   25630:	mov	r3, #628	; 0x274
   25634:	str	r3, [sp, #8]
   25638:	str	r4, [sp, #4]
   2563c:	str	r4, [sp]
   25640:	mov	r3, r4
   25644:	ldr	r2, [pc, #1800]	; 25d54 <main@@Base+0xc4c>
   25648:	mov	r1, fp
   2564c:	mov	r0, r6
   25650:	bl	24128 <test_json@@Base>
   25654:	orr	r5, r5, r0
   25658:	ldr	r3, [pc, #1784]	; 25d58 <main@@Base+0xc50>
   2565c:	str	r3, [sp, #8]
   25660:	str	r4, [sp, #4]
   25664:	str	r4, [sp]
   25668:	mov	r3, r4
   2566c:	ldr	r2, [pc, #1760]	; 25d54 <main@@Base+0xc4c>
   25670:	mov	r1, fp
   25674:	mov	r0, r6
   25678:	bl	24128 <test_json@@Base>
   2567c:	orr	r5, r5, r0
   25680:	ldr	r3, [pc, #1748]	; 25d5c <main@@Base+0xc54>
   25684:	str	r3, [sp, #8]
   25688:	str	r4, [sp, #4]
   2568c:	str	r4, [sp]
   25690:	mov	r3, r4
   25694:	ldr	r2, [pc, #1732]	; 25d60 <main@@Base+0xc58>
   25698:	ldr	r1, [pc, #1732]	; 25d64 <main@@Base+0xc5c>
   2569c:	mov	r0, r6
   256a0:	bl	24128 <test_json@@Base>
   256a4:	orr	r5, r5, r0
   256a8:	ldr	r3, [pc, #1720]	; 25d68 <main@@Base+0xc60>
   256ac:	str	r3, [sp, #8]
   256b0:	str	r4, [sp, #4]
   256b4:	str	r4, [sp]
   256b8:	mov	r3, r4
   256bc:	ldr	r2, [pc, #1704]	; 25d6c <main@@Base+0xc64>
   256c0:	ldr	r1, [pc, #1704]	; 25d70 <main@@Base+0xc68>
   256c4:	mov	r0, r6
   256c8:	bl	24128 <test_json@@Base>
   256cc:	orr	r5, r5, r0
   256d0:	ldr	fp, [pc, #1692]	; 25d74 <main@@Base+0xc6c>
   256d4:	ldr	r3, [pc, #1692]	; 25d78 <main@@Base+0xc70>
   256d8:	str	r3, [sp, #8]
   256dc:	str	r4, [sp, #4]
   256e0:	str	r4, [sp]
   256e4:	mov	r3, r4
   256e8:	mov	r2, fp
   256ec:	ldr	r1, [pc, #1672]	; 25d7c <main@@Base+0xc74>
   256f0:	mov	r0, r6
   256f4:	bl	24128 <test_json@@Base>
   256f8:	orr	r5, r5, r0
   256fc:	ldr	r3, [pc, #1660]	; 25d80 <main@@Base+0xc78>
   25700:	str	r3, [sp, #8]
   25704:	str	r4, [sp, #4]
   25708:	str	r4, [sp]
   2570c:	mov	r3, r4
   25710:	mov	r2, r7
   25714:	ldr	r1, [pc, #1640]	; 25d84 <main@@Base+0xc7c>
   25718:	mov	r0, r6
   2571c:	bl	24128 <test_json@@Base>
   25720:	orr	r5, r5, r0
   25724:	ldr	r3, [pc, #1628]	; 25d88 <main@@Base+0xc80>
   25728:	str	r3, [sp, #8]
   2572c:	str	r4, [sp, #4]
   25730:	str	r4, [sp]
   25734:	mov	r3, r4
   25738:	mov	r2, r7
   2573c:	ldr	r1, [pc, #1608]	; 25d8c <main@@Base+0xc84>
   25740:	mov	r0, r6
   25744:	bl	24128 <test_json@@Base>
   25748:	orr	r5, r5, r0
   2574c:	ldr	r3, [pc, #1596]	; 25d90 <main@@Base+0xc88>
   25750:	str	r3, [sp, #8]
   25754:	str	r4, [sp, #4]
   25758:	str	r4, [sp]
   2575c:	mov	r3, r4
   25760:	mov	r2, r8
   25764:	ldr	r1, [pc, #1576]	; 25d94 <main@@Base+0xc8c>
   25768:	mov	r0, r6
   2576c:	bl	24128 <test_json@@Base>
   25770:	orr	r5, r5, r0
   25774:	mov	r3, #656	; 0x290
   25778:	str	r3, [sp, #8]
   2577c:	str	r4, [sp, #4]
   25780:	str	r4, [sp]
   25784:	mov	r3, r4
   25788:	mov	r2, sl
   2578c:	ldr	r1, [pc, #1540]	; 25d98 <main@@Base+0xc90>
   25790:	mov	r0, r6
   25794:	bl	24128 <test_json@@Base>
   25798:	orr	r5, r5, r0
   2579c:	ldr	r3, [pc, #1528]	; 25d9c <main@@Base+0xc94>
   257a0:	str	r3, [sp, #8]
   257a4:	str	r4, [sp, #4]
   257a8:	str	r4, [sp]
   257ac:	mov	r3, r4
   257b0:	ldr	r2, [pc, #1368]	; 25d10 <main@@Base+0xc08>
   257b4:	ldr	r1, [pc, #1508]	; 25da0 <main@@Base+0xc98>
   257b8:	mov	r0, r6
   257bc:	bl	24128 <test_json@@Base>
   257c0:	orr	r5, r5, r0
   257c4:	ldr	r3, [pc, #1496]	; 25da4 <main@@Base+0xc9c>
   257c8:	str	r3, [sp, #8]
   257cc:	str	r4, [sp, #4]
   257d0:	str	r4, [sp]
   257d4:	mov	r3, r4
   257d8:	mov	r2, r9
   257dc:	ldr	r1, [pc, #1476]	; 25da8 <main@@Base+0xca0>
   257e0:	mov	r0, r6
   257e4:	bl	24128 <test_json@@Base>
   257e8:	orr	r5, r5, r0
   257ec:	ldr	r3, [pc, #1464]	; 25dac <main@@Base+0xca4>
   257f0:	str	r3, [sp, #8]
   257f4:	str	r4, [sp, #4]
   257f8:	str	r4, [sp]
   257fc:	mov	r3, r4
   25800:	ldr	r2, [pc, #1308]	; 25d24 <main@@Base+0xc1c>
   25804:	ldr	r1, [pc, #1444]	; 25db0 <main@@Base+0xca8>
   25808:	mov	r0, r6
   2580c:	bl	24128 <test_json@@Base>
   25810:	orr	r5, r5, r0
   25814:	mov	r3, #668	; 0x29c
   25818:	str	r3, [sp, #8]
   2581c:	str	r4, [sp, #4]
   25820:	str	r4, [sp]
   25824:	mov	r3, r4
   25828:	ldr	r2, [pc, #1276]	; 25d2c <main@@Base+0xc24>
   2582c:	ldr	r1, [pc, #1408]	; 25db4 <main@@Base+0xcac>
   25830:	mov	r0, r6
   25834:	bl	24128 <test_json@@Base>
   25838:	orr	r5, r5, r0
   2583c:	ldr	r3, [pc, #1396]	; 25db8 <main@@Base+0xcb0>
   25840:	str	r3, [sp, #8]
   25844:	str	r4, [sp, #4]
   25848:	str	r4, [sp]
   2584c:	mov	r3, r4
   25850:	ldr	r2, [pc, #1248]	; 25d38 <main@@Base+0xc30>
   25854:	ldr	r1, [pc, #1376]	; 25dbc <main@@Base+0xcb4>
   25858:	mov	r0, r6
   2585c:	bl	24128 <test_json@@Base>
   25860:	orr	r5, r5, r0
   25864:	ldr	r3, [pc, #1364]	; 25dc0 <main@@Base+0xcb8>
   25868:	str	r3, [sp, #8]
   2586c:	str	r4, [sp, #4]
   25870:	str	r4, [sp]
   25874:	mov	r3, r4
   25878:	mov	r2, r8
   2587c:	ldr	r1, [pc, #1344]	; 25dc4 <main@@Base+0xcbc>
   25880:	mov	r0, r6
   25884:	bl	24128 <test_json@@Base>
   25888:	orr	r5, r5, r0
   2588c:	ldr	r3, [pc, #1332]	; 25dc8 <main@@Base+0xcc0>
   25890:	str	r3, [sp, #8]
   25894:	str	r4, [sp, #4]
   25898:	str	r4, [sp]
   2589c:	mov	r3, r4
   258a0:	mov	r2, r8
   258a4:	ldr	r1, [pc, #1312]	; 25dcc <main@@Base+0xcc4>
   258a8:	mov	r0, r6
   258ac:	bl	24128 <test_json@@Base>
   258b0:	orr	r5, r5, r0
   258b4:	ldr	r8, [pc, #1300]	; 25dd0 <main@@Base+0xcc8>
   258b8:	mov	r3, #680	; 0x2a8
   258bc:	str	r3, [sp, #8]
   258c0:	str	r4, [sp, #4]
   258c4:	str	r4, [sp]
   258c8:	mov	r3, r4
   258cc:	ldr	r2, [pc, #1152]	; 25d54 <main@@Base+0xc4c>
   258d0:	mov	r1, r8
   258d4:	mov	r0, r6
   258d8:	bl	24128 <test_json@@Base>
   258dc:	orr	r5, r5, r0
   258e0:	ldr	r3, [pc, #1260]	; 25dd4 <main@@Base+0xccc>
   258e4:	str	r3, [sp, #8]
   258e8:	str	r4, [sp, #4]
   258ec:	str	r4, [sp]
   258f0:	mov	r3, r4
   258f4:	ldr	r2, [pc, #1112]	; 25d54 <main@@Base+0xc4c>
   258f8:	mov	r1, r8
   258fc:	mov	r0, r6
   25900:	bl	24128 <test_json@@Base>
   25904:	orr	r5, r5, r0
   25908:	ldr	r3, [pc, #1224]	; 25dd8 <main@@Base+0xcd0>
   2590c:	str	r3, [sp, #8]
   25910:	str	r4, [sp, #4]
   25914:	str	r4, [sp]
   25918:	mov	r3, r4
   2591c:	ldr	r2, [pc, #1084]	; 25d60 <main@@Base+0xc58>
   25920:	ldr	r1, [pc, #1204]	; 25ddc <main@@Base+0xcd4>
   25924:	mov	r0, r6
   25928:	bl	24128 <test_json@@Base>
   2592c:	orr	r5, r5, r0
   25930:	ldr	r3, [pc, #1192]	; 25de0 <main@@Base+0xcd8>
   25934:	str	r3, [sp, #8]
   25938:	str	r4, [sp, #4]
   2593c:	str	r4, [sp]
   25940:	mov	r3, r4
   25944:	ldr	r2, [pc, #1056]	; 25d6c <main@@Base+0xc64>
   25948:	ldr	r1, [pc, #1172]	; 25de4 <main@@Base+0xcdc>
   2594c:	mov	r0, r6
   25950:	bl	24128 <test_json@@Base>
   25954:	orr	r5, r5, r0
   25958:	ldr	r3, [pc, #1160]	; 25de8 <main@@Base+0xce0>
   2595c:	str	r3, [sp, #8]
   25960:	str	r4, [sp, #4]
   25964:	str	r4, [sp]
   25968:	mov	r3, r4
   2596c:	mov	r2, fp
   25970:	ldr	r1, [pc, #1140]	; 25dec <main@@Base+0xce4>
   25974:	mov	r0, r6
   25978:	bl	24128 <test_json@@Base>
   2597c:	orr	r5, r5, r0
   25980:	ldr	r3, [pc, #1128]	; 25df0 <main@@Base+0xce8>
   25984:	str	r3, [sp, #8]
   25988:	str	r4, [sp, #4]
   2598c:	str	r4, [sp]
   25990:	mov	r3, r4
   25994:	mov	r2, r7
   25998:	ldr	r1, [pc, #1108]	; 25df4 <main@@Base+0xcec>
   2599c:	mov	r0, r6
   259a0:	bl	24128 <test_json@@Base>
   259a4:	orr	r5, r5, r0
   259a8:	ldr	r3, [pc, #1096]	; 25df8 <main@@Base+0xcf0>
   259ac:	str	r3, [sp, #8]
   259b0:	str	r4, [sp, #4]
   259b4:	str	r4, [sp]
   259b8:	mov	r3, r4
   259bc:	mov	r2, r7
   259c0:	ldr	r1, [pc, #1076]	; 25dfc <main@@Base+0xcf4>
   259c4:	mov	r0, r6
   259c8:	bl	24128 <test_json@@Base>
   259cc:	orr	r5, r5, r0
   259d0:	ldr	r7, [pc, #1064]	; 25e00 <main@@Base+0xcf8>
   259d4:	ldr	r3, [pc, #1064]	; 25e04 <main@@Base+0xcfc>
   259d8:	str	r3, [sp, #8]
   259dc:	str	r4, [sp, #4]
   259e0:	str	r4, [sp]
   259e4:	mov	r3, r4
   259e8:	mov	r2, r7
   259ec:	ldr	r1, [pc, #1044]	; 25e08 <main@@Base+0xd00>
   259f0:	mov	r0, r6
   259f4:	bl	24128 <test_json@@Base>
   259f8:	orr	r5, r5, r0
   259fc:	mov	r3, #716	; 0x2cc
   25a00:	str	r3, [sp, #8]
   25a04:	str	r4, [sp, #4]
   25a08:	str	r4, [sp]
   25a0c:	mov	r3, r4
   25a10:	mov	r2, r7
   25a14:	ldr	r1, [pc, #1008]	; 25e0c <main@@Base+0xd04>
   25a18:	mov	r0, r6
   25a1c:	bl	24128 <test_json@@Base>
   25a20:	orr	r5, r5, r0
   25a24:	ldr	r3, [pc, #996]	; 25e10 <main@@Base+0xd08>
   25a28:	str	r3, [sp, #8]
   25a2c:	str	r4, [sp, #4]
   25a30:	str	r4, [sp]
   25a34:	mov	r3, r4
   25a38:	ldr	r2, [pc, #980]	; 25e14 <main@@Base+0xd0c>
   25a3c:	ldr	r1, [pc, #980]	; 25e18 <main@@Base+0xd10>
   25a40:	mov	r0, r6
   25a44:	bl	24128 <test_json@@Base>
   25a48:	orr	r5, r5, r0
   25a4c:	ldr	r3, [pc, #968]	; 25e1c <main@@Base+0xd14>
   25a50:	str	r3, [sp, #8]
   25a54:	str	r4, [sp, #4]
   25a58:	str	r4, [sp]
   25a5c:	mov	r3, r4
   25a60:	ldr	r2, [pc, #952]	; 25e20 <main@@Base+0xd18>
   25a64:	ldr	r1, [pc, #952]	; 25e24 <main@@Base+0xd1c>
   25a68:	mov	r0, r6
   25a6c:	bl	24128 <test_json@@Base>
   25a70:	orr	r5, r5, r0
   25a74:	ldr	r7, [pc, #940]	; 25e28 <main@@Base+0xd20>
   25a78:	ldr	r3, [pc, #940]	; 25e2c <main@@Base+0xd24>
   25a7c:	str	r3, [sp, #8]
   25a80:	str	r4, [sp, #4]
   25a84:	str	r4, [sp]
   25a88:	mov	r3, r4
   25a8c:	mov	r2, r7
   25a90:	ldr	r1, [pc, #920]	; 25e30 <main@@Base+0xd28>
   25a94:	mov	r0, r6
   25a98:	bl	24128 <test_json@@Base>
   25a9c:	orr	r5, r5, r0
   25aa0:	ldr	r3, [pc, #908]	; 25e34 <main@@Base+0xd2c>
   25aa4:	str	r3, [sp, #8]
   25aa8:	str	r4, [sp, #4]
   25aac:	str	r4, [sp]
   25ab0:	mov	r3, r4
   25ab4:	mov	r2, r7
   25ab8:	ldr	r1, [pc, #888]	; 25e38 <main@@Base+0xd30>
   25abc:	mov	r0, r6
   25ac0:	bl	24128 <test_json@@Base>
   25ac4:	orr	r5, r5, r0
   25ac8:	ldr	r3, [pc, #876]	; 25e3c <main@@Base+0xd34>
   25acc:	str	r3, [sp, #8]
   25ad0:	str	r4, [sp, #4]
   25ad4:	str	r4, [sp]
   25ad8:	mov	r3, r4
   25adc:	ldr	r2, [pc, #860]	; 25e40 <main@@Base+0xd38>
   25ae0:	ldr	r1, [pc, #860]	; 25e44 <main@@Base+0xd3c>
   25ae4:	mov	r0, r6
   25ae8:	bl	24128 <test_json@@Base>
   25aec:	orr	r5, r5, r0
   25af0:	ldr	r3, [pc, #848]	; 25e48 <main@@Base+0xd40>
   25af4:	str	r3, [sp, #8]
   25af8:	str	r4, [sp, #4]
   25afc:	str	r4, [sp]
   25b00:	mov	r3, r4
   25b04:	ldr	r2, [pc, #832]	; 25e4c <main@@Base+0xd44>
   25b08:	ldr	r1, [pc, #832]	; 25e50 <main@@Base+0xd48>
   25b0c:	mov	r0, r6
   25b10:	bl	24128 <test_json@@Base>
   25b14:	orr	r4, r5, r0
   25b18:	mov	r3, #776	; 0x308
   25b1c:	str	r3, [sp, #8]
   25b20:	mov	r5, #0
   25b24:	str	r5, [sp, #4]
   25b28:	str	r5, [sp]
   25b2c:	mov	r3, r5
   25b30:	ldr	r2, [pc, #796]	; 25e54 <main@@Base+0xd4c>
   25b34:	ldr	r1, [pc, #796]	; 25e58 <main@@Base+0xd50>
   25b38:	mov	r0, r6
   25b3c:	bl	24128 <test_json@@Base>
   25b40:	orr	r4, r4, r0
   25b44:	ldr	r3, [pc, #784]	; 25e5c <main@@Base+0xd54>
   25b48:	str	r3, [sp, #8]
   25b4c:	str	r5, [sp, #4]
   25b50:	str	r5, [sp]
   25b54:	mov	r3, r5
   25b58:	ldr	r2, [pc, #228]	; 25c44 <main@@Base+0xb3c>
   25b5c:	ldr	r1, [pc, #764]	; 25e60 <main@@Base+0xd58>
   25b60:	mov	r0, r6
   25b64:	bl	24128 <test_json@@Base>
   25b68:	orr	r4, r4, r0
   25b6c:	ldr	r3, [pc, #752]	; 25e64 <main@@Base+0xd5c>
   25b70:	str	r3, [sp, #8]
   25b74:	str	r5, [sp, #4]
   25b78:	str	r5, [sp]
   25b7c:	mov	r3, r5
   25b80:	ldr	r2, [pc, #736]	; 25e68 <main@@Base+0xd60>
   25b84:	ldr	r1, [pc, #736]	; 25e6c <main@@Base+0xd64>
   25b88:	mov	r0, r6
   25b8c:	bl	24128 <test_json@@Base>
   25b90:	orr	r4, r4, r0
   25b94:	ldr	r3, [pc, #724]	; 25e70 <main@@Base+0xd68>
   25b98:	str	r3, [sp, #8]
   25b9c:	str	r5, [sp, #4]
   25ba0:	str	r5, [sp]
   25ba4:	mov	r3, r5
   25ba8:	ldr	r2, [pc, #708]	; 25e74 <main@@Base+0xd6c>
   25bac:	ldr	r1, [pc, #708]	; 25e78 <main@@Base+0xd70>
   25bb0:	mov	r0, r6
   25bb4:	bl	24128 <test_json@@Base>
   25bb8:	orr	r4, r4, r0
   25bbc:	mov	r3, #796	; 0x31c
   25bc0:	str	r3, [sp, #8]
   25bc4:	str	r5, [sp, #4]
   25bc8:	str	r5, [sp]
   25bcc:	mov	r3, r5
   25bd0:	ldr	r2, [pc, #676]	; 25e7c <main@@Base+0xd74>
   25bd4:	ldr	r1, [pc, #676]	; 25e80 <main@@Base+0xd78>
   25bd8:	mov	r0, r6
   25bdc:	bl	24128 <test_json@@Base>
   25be0:	orr	r4, r4, r0
   25be4:	ldr	r3, [pc, #664]	; 25e84 <main@@Base+0xd7c>
   25be8:	str	r3, [sp, #8]
   25bec:	str	r5, [sp, #4]
   25bf0:	str	r5, [sp]
   25bf4:	mov	r3, r5
   25bf8:	ldr	r2, [pc, #648]	; 25e88 <main@@Base+0xd80>
   25bfc:	ldr	r1, [pc, #648]	; 25e8c <main@@Base+0xd84>
   25c00:	mov	r0, r6
   25c04:	bl	24128 <test_json@@Base>
   25c08:	orr	r4, r4, r0
   25c0c:	ldr	r3, [pc, #636]	; 25e90 <main@@Base+0xd88>
   25c10:	str	r3, [sp, #8]
   25c14:	str	r5, [sp, #4]
   25c18:	str	r5, [sp]
   25c1c:	mov	r3, r5
   25c20:	ldr	r2, [pc, #620]	; 25e94 <main@@Base+0xd8c>
   25c24:	ldr	r1, [pc, #620]	; 25e98 <main@@Base+0xd90>
   25c28:	mov	r0, r6
   25c2c:	bl	24128 <test_json@@Base>
   25c30:	orrs	r3, r4, r0
   25c34:	mvnne	r0, #0
   25c38:	moveq	r0, r5
   25c3c:	add	sp, sp, #20
   25c40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c44:	andeq	sp, r3, r0, ror pc
   25c48:	andeq	sp, r3, ip, ror r8
   25c4c:	andeq	r0, r0, sp, lsl #4
   25c50:	andeq	r0, r4, r4, lsr #2
   25c54:	andeq	r0, r4, ip, lsr r1
   25c58:	andeq	r0, r4, r0, ror #2
   25c5c:	andeq	r0, r4, r8, lsl #3
   25c60:	andeq	r0, r0, r3, lsl r2
   25c64:	andeq	r0, r4, ip, lsr #3
   25c68:	ldrdeq	r0, [r4], -r4
   25c6c:	andeq	r0, r0, r6, lsl r2
   25c70:	andeq	r0, r4, r0, lsl #4
   25c74:	andeq	r0, r0, r9, lsl r2
   25c78:	andeq	r0, r4, r4, lsr r2
   25c7c:	andeq	r0, r4, r0, ror r2
   25c80:	andeq	r0, r0, pc, lsl r2
   25c84:	muleq	r4, r8, r2
   25c88:	andeq	r0, r0, r3, lsr #4
   25c8c:	andeq	r0, r4, r4, asr #5
   25c90:	andeq	r0, r0, r7, lsr #4
   25c94:	andeq	sp, r3, r4, lsl #30
   25c98:	andeq	r0, r0, fp, lsr #4
   25c9c:	andeq	r0, r4, ip, ror #5
   25ca0:	andeq	r0, r0, lr, lsr #4
   25ca4:	andeq	r0, r4, r4, lsl #6
   25ca8:	andeq	r0, r0, r1, lsr r2
   25cac:	andeq	r0, r4, r8, lsr #6
   25cb0:	andeq	r0, r4, ip, asr #6
   25cb4:	andeq	r0, r0, r7, lsr r2
   25cb8:	andeq	r0, r4, ip, ror r3
   25cbc:	andeq	r0, r0, sl, lsr r2
   25cc0:			; <UNDEFINED> instruction: 0x000403b4
   25cc4:	andeq	r0, r0, sp, lsr r2
   25cc8:	ldrdeq	r0, [r4], -r4
   25ccc:	andeq	r0, r0, r1, asr #4
   25cd0:	strdeq	r0, [r4], -r8
   25cd4:	andeq	r0, r0, r5, asr #4
   25cd8:	andeq	lr, r3, r0, asr #3
   25cdc:	andeq	r0, r4, ip, lsl r4
   25ce0:	andeq	r0, r0, r9, asr #4
   25ce4:	andeq	r0, r4, r4, asr #8
   25ce8:	andeq	r0, r0, pc, asr #4
   25cec:	andeq	r0, r4, ip, ror #8
   25cf0:	andeq	r0, r0, r2, asr r2
   25cf4:	muleq	r4, r4, r4
   25cf8:	andeq	r0, r0, r5, asr r2
   25cfc:			; <UNDEFINED> instruction: 0x000404bc
   25d00:	andeq	r0, r0, r9, asr r2
   25d04:	andeq	r0, r4, ip, ror #9
   25d08:	andeq	r0, r4, r0, lsl r5
   25d0c:	andeq	r0, r0, pc, asr r2
   25d10:	andeq	r0, r4, r4, lsr r5
   25d14:	andeq	r0, r4, ip, asr r5
   25d18:	andeq	r0, r0, r2, ror #4
   25d1c:	andeq	r0, r4, r0, lsl #11
   25d20:	andeq	r0, r0, r5, ror #4
   25d24:	andeq	r0, r4, r4, lsr #11
   25d28:	andeq	r0, r4, r4, asr #11
   25d2c:	andeq	r0, r4, r8, ror #11
   25d30:	andeq	r0, r4, r8, lsl #12
   25d34:	andeq	r0, r0, fp, ror #4
   25d38:	andeq	r0, r4, ip, lsr #12
   25d3c:	andeq	r0, r4, ip, asr #12
   25d40:	andeq	r0, r0, lr, ror #4
   25d44:	andeq	r0, r4, r0, ror r6
   25d48:	andeq	r0, r0, r1, ror r2
   25d4c:	muleq	r4, ip, r6
   25d50:	strdeq	r0, [r4], -r4
   25d54:	ldrdeq	r0, [r4], -r8
   25d58:	andeq	r0, r0, r7, ror r2
   25d5c:	andeq	r0, r0, sl, ror r2
   25d60:	andeq	r0, r4, r0, lsr #14
   25d64:	andeq	r0, r4, r8, ror #14
   25d68:	andeq	r0, r0, lr, ror r2
   25d6c:			; <UNDEFINED> instruction: 0x000407bc
   25d70:	andeq	r0, r4, r8, lsl #16
   25d74:	andeq	r0, r4, r0, ror #16
   25d78:	andeq	r0, r0, r2, lsl #5
   25d7c:	andeq	r0, r4, r4, asr #17
   25d80:	andeq	r0, r0, r6, lsl #5
   25d84:	andeq	r0, r4, r4, lsr r9
   25d88:	andeq	r0, r0, r9, lsl #5
   25d8c:	andeq	r0, r4, r0, ror #18
   25d90:	andeq	r0, r0, sp, lsl #5
   25d94:	andeq	r0, r4, r8, lsl #19
   25d98:	andeq	r0, r4, r8, lsr #19
   25d9c:	muleq	r0, r3, r2
   25da0:	andeq	r0, r4, r8, asr #19
   25da4:	muleq	r0, r6, r2
   25da8:	andeq	r0, r4, r8, ror #19
   25dac:	muleq	r0, r9, r2
   25db0:	andeq	r0, r4, r8, lsl #20
   25db4:	andeq	r0, r4, r8, lsr #20
   25db8:	muleq	r0, pc, r2	; <UNPREDICTABLE>
   25dbc:	andeq	r0, r4, r8, asr #20
   25dc0:	andeq	r0, r0, r2, lsr #5
   25dc4:	andeq	r0, r4, r8, ror #20
   25dc8:	andeq	r0, r0, r5, lsr #5
   25dcc:	muleq	r4, r0, sl
   25dd0:	andeq	r0, r4, r4, asr #21
   25dd4:	andeq	r0, r0, fp, lsr #5
   25dd8:	andeq	r0, r0, lr, lsr #5
   25ddc:	andeq	r0, r4, r8, ror #21
   25de0:			; <UNDEFINED> instruction: 0x000002b2
   25de4:	andeq	r0, r4, r0, lsr fp
   25de8:			; <UNDEFINED> instruction: 0x000002b6
   25dec:	andeq	r0, r4, ip, ror fp
   25df0:			; <UNDEFINED> instruction: 0x000002ba
   25df4:	ldrdeq	r0, [r4], -ip
   25df8:			; <UNDEFINED> instruction: 0x000002bd
   25dfc:	andeq	r0, r4, r4, lsl #24
   25e00:	andeq	r0, r4, r8, lsr #24
   25e04:	andeq	r0, r0, r7, asr #5
   25e08:	andeq	r0, r4, r8, lsl #25
   25e0c:	andeq	r0, r4, r8, ror #25
   25e10:	ldrdeq	r0, [r0], -fp
   25e14:	andeq	r0, r4, r8, asr sp
   25e18:	andeq	r0, r4, r8, lsl #27
   25e1c:	ldrdeq	r0, [r0], -lr
   25e20:	andeq	r0, r4, r8, asr #27
   25e24:	ldrdeq	r0, [r4], -ip
   25e28:	strdeq	r0, [r4], -r8
   25e2c:	andeq	r0, r0, r2, ror #5
   25e30:	andeq	r0, r4, ip, lsr lr
   25e34:	andeq	r0, r0, lr, ror #5
   25e38:	andeq	r0, r4, r4, lsl #29
   25e3c:	strdeq	r0, [r0], -lr
   25e40:	andeq	r0, r4, r4, lsr #30
   25e44:	andeq	r0, r4, r8, asr #30
   25e48:	andeq	r0, r0, r2, lsl #6
   25e4c:	andeq	r0, r4, r0, ror pc
   25e50:	muleq	r4, ip, pc	; <UNPREDICTABLE>
   25e54:	andeq	r0, r4, ip, asr #31
   25e58:	andeq	r1, r4, ip, lsr r0
   25e5c:	andeq	r0, r0, sp, lsl #6
   25e60:	strheq	r1, [r4], -r8
   25e64:	andeq	r0, r0, r2, lsl r3
   25e68:	andeq	r1, r4, r0, lsr r1
   25e6c:	andeq	r1, r4, r0, lsr #3
   25e70:	andeq	r0, r0, r7, lsl r3
   25e74:	andeq	r1, r4, ip, lsl r2
   25e78:	muleq	r4, ip, r2
   25e7c:	andeq	r1, r4, r8, lsr #6
   25e80:	muleq	r4, r8, r3
   25e84:	andeq	r0, r0, r1, lsr #6
   25e88:	andeq	r1, r4, r4, lsl r4
   25e8c:	muleq	r4, r4, r4
   25e90:	andeq	r0, r0, r6, lsr #6
   25e94:	andeq	r1, r4, r0, lsr #10
   25e98:	andeq	r1, r4, r4, lsr #11
   25e9c:	push	{r4, r5, r6, lr}
   25ea0:	sub	sp, sp, #8
   25ea4:	mov	r4, r0
   25ea8:	mov	r5, r2
   25eac:	ldr	r2, [r0, #28]
   25eb0:	mov	r3, #1
   25eb4:	str	r3, [sp]
   25eb8:	ldr	r6, [r0, #48]	; 0x30
   25ebc:	add	r2, r1, r2
   25ec0:	add	r1, r0, #60	; 0x3c
   25ec4:	ldr	r0, [r0, #40]	; 0x28
   25ec8:	blx	r6
   25ecc:	cmp	r0, #0
   25ed0:	bne	25f08 <main@@Base+0xe00>
   25ed4:	ldr	r1, [r4, #28]
   25ed8:	ldr	r2, [r4, #60]	; 0x3c
   25edc:	add	r2, r2, r1
   25ee0:	str	r2, [r4, #16]
   25ee4:	ldr	r3, [r4, #64]	; 0x40
   25ee8:	sub	r3, r3, r1
   25eec:	cmp	r3, r5
   25ef0:	movcs	r3, r5
   25ef4:	str	r3, [r4, #24]
   25ef8:	ldr	r3, [r4, #32]
   25efc:	str	r5, [r3, #4]
   25f00:	add	sp, sp, #8
   25f04:	pop	{r4, r5, r6, pc}
   25f08:	mvn	r0, #0
   25f0c:	b	25f00 <main@@Base+0xdf8>

00025f10 <flatcc_builder_default_alloc@@Base>:
   25f10:	push	{r4, r5, r6, r7, r8, lr}
   25f14:	mov	r5, r1
   25f18:	cmp	r2, #0
   25f1c:	bne	25f40 <flatcc_builder_default_alloc@@Base+0x30>
   25f20:	ldr	r0, [r1]
   25f24:	cmp	r0, #0
   25f28:	beq	2600c <flatcc_builder_default_alloc@@Base+0xfc>
   25f2c:	bl	14540 <free@plt>
   25f30:	mov	r0, #0
   25f34:	str	r0, [r5]
   25f38:	str	r0, [r5, #4]
   25f3c:	pop	{r4, r5, r6, r7, r8, pc}
   25f40:	mov	r6, r3
   25f44:	ldr	r3, [sp, #24]
   25f48:	sub	r3, r3, #1
   25f4c:	cmp	r3, #6
   25f50:	ldrls	pc, [pc, r3, lsl #2]
   25f54:	b	25fe8 <flatcc_builder_default_alloc@@Base+0xd8>
   25f58:	andeq	r5, r2, ip, ror pc
   25f5c:	andeq	r5, r2, r8, ror #31
   25f60:	andeq	r5, r2, r8, ror #31
   25f64:	andeq	r5, r2, r4, ror pc
   25f68:	strdeq	r5, [r2], -r0
   25f6c:	andeq	r5, r2, r8, ror #31
   25f70:	andeq	r5, r2, r0, ror #31
   25f74:	mov	r4, #288	; 0x120
   25f78:	b	25f80 <flatcc_builder_default_alloc@@Base+0x70>
   25f7c:	mov	r4, #256	; 0x100
   25f80:	cmp	r4, r2
   25f84:	bcs	25f94 <flatcc_builder_default_alloc@@Base+0x84>
   25f88:	lsl	r4, r4, #1
   25f8c:	cmp	r2, r4
   25f90:	bhi	25f88 <flatcc_builder_default_alloc@@Base+0x78>
   25f94:	ldr	r3, [r5, #4]
   25f98:	cmp	r2, r3
   25f9c:	bhi	25fa8 <flatcc_builder_default_alloc@@Base+0x98>
   25fa0:	cmp	r4, r3, lsr #1
   25fa4:	bls	26014 <flatcc_builder_default_alloc@@Base+0x104>
   25fa8:	mov	r1, r4
   25fac:	ldr	r0, [r5]
   25fb0:	bl	14564 <realloc@plt>
   25fb4:	subs	r7, r0, #0
   25fb8:	beq	2601c <flatcc_builder_default_alloc@@Base+0x10c>
   25fbc:	cmp	r6, #0
   25fc0:	beq	25fd0 <flatcc_builder_default_alloc@@Base+0xc0>
   25fc4:	ldr	r0, [r5, #4]
   25fc8:	cmp	r0, r4
   25fcc:	bcc	25ff8 <flatcc_builder_default_alloc@@Base+0xe8>
   25fd0:	str	r7, [r5]
   25fd4:	str	r4, [r5, #4]
   25fd8:	mov	r0, #0
   25fdc:	pop	{r4, r5, r6, r7, r8, pc}
   25fe0:	mov	r4, #64	; 0x40
   25fe4:	b	25f80 <flatcc_builder_default_alloc@@Base+0x70>
   25fe8:	mov	r4, #32
   25fec:	b	25f80 <flatcc_builder_default_alloc@@Base+0x70>
   25ff0:	mov	r4, r2
   25ff4:	b	25f94 <flatcc_builder_default_alloc@@Base+0x84>
   25ff8:	sub	r2, r4, r0
   25ffc:	mov	r1, #0
   26000:	add	r0, r7, r0
   26004:	bl	145c4 <memset@plt>
   26008:	b	25fd0 <flatcc_builder_default_alloc@@Base+0xc0>
   2600c:	mov	r0, #0
   26010:	pop	{r4, r5, r6, r7, r8, pc}
   26014:	mov	r0, #0
   26018:	pop	{r4, r5, r6, r7, r8, pc}
   2601c:	mvn	r0, #0
   26020:	pop	{r4, r5, r6, r7, r8, pc}
   26024:	cmp	r2, #0
   26028:	bne	26038 <flatcc_builder_default_alloc@@Base+0x128>
   2602c:	ldrh	r2, [r0, #132]	; 0x84
   26030:	cmp	r2, #0
   26034:	moveq	r2, #1
   26038:	ldrh	ip, [r1]
   2603c:	cmp	ip, #3
   26040:	movls	ip, #4
   26044:	strhls	ip, [r1]
   26048:	ldrh	ip, [r1]
   2604c:	cmp	ip, r2
   26050:	strhcc	r2, [r1]
   26054:	cmp	r3, #0
   26058:	bne	26114 <flatcc_builder_default_alloc@@Base+0x204>
   2605c:	push	{r4, r5, lr}
   26060:	sub	sp, sp, #84	; 0x54
   26064:	ldr	r4, [r0, #140]	; 0x8c
   26068:	sub	r2, r2, #1
   2606c:	ands	r2, r2, r4
   26070:	bne	26080 <flatcc_builder_default_alloc@@Base+0x170>
   26074:	mov	r0, #0
   26078:	add	sp, sp, #84	; 0x54
   2607c:	pop	{r4, r5, pc}
   26080:	str	r2, [sp, #8]
   26084:	ldr	r3, [pc, #144]	; 2611c <flatcc_builder_default_alloc@@Base+0x20c>
   26088:	str	r3, [sp, #16]
   2608c:	str	r2, [sp, #20]
   26090:	mov	r3, #1
   26094:	str	r3, [sp, #12]
   26098:	add	r3, r4, r2
   2609c:	str	r3, [r0, #140]	; 0x8c
   260a0:	cmp	r4, r3
   260a4:	bgt	260ec <flatcc_builder_default_alloc@@Base+0x1dc>
   260a8:	ldr	ip, [r0, #36]	; 0x24
   260ac:	str	r2, [sp]
   260b0:	ldr	r5, [r0, #44]	; 0x2c
   260b4:	mov	r3, r4
   260b8:	mov	r2, #1
   260bc:	add	r1, sp, #16
   260c0:	mov	r0, ip
   260c4:	blx	r5
   260c8:	cmp	r0, #0
   260cc:	bne	26100 <flatcc_builder_default_alloc@@Base+0x1f0>
   260d0:	cmn	r4, #1
   260d4:	bne	26074 <flatcc_builder_default_alloc@@Base+0x164>
   260d8:	ldr	r3, [pc, #64]	; 26120 <flatcc_builder_default_alloc@@Base+0x210>
   260dc:	ldr	r2, [pc, #64]	; 26124 <flatcc_builder_default_alloc@@Base+0x214>
   260e0:	ldr	r1, [pc, #64]	; 26128 <flatcc_builder_default_alloc@@Base+0x218>
   260e4:	ldr	r0, [pc, #64]	; 2612c <flatcc_builder_default_alloc@@Base+0x21c>
   260e8:	bl	14618 <__assert_fail@plt>
   260ec:	ldr	r3, [pc, #60]	; 26130 <flatcc_builder_default_alloc@@Base+0x220>
   260f0:	ldr	r2, [pc, #60]	; 26134 <flatcc_builder_default_alloc@@Base+0x224>
   260f4:	ldr	r1, [pc, #44]	; 26128 <flatcc_builder_default_alloc@@Base+0x218>
   260f8:	ldr	r0, [pc, #44]	; 2612c <flatcc_builder_default_alloc@@Base+0x21c>
   260fc:	bl	14618 <__assert_fail@plt>
   26100:	ldr	r3, [pc, #40]	; 26130 <flatcc_builder_default_alloc@@Base+0x220>
   26104:	ldr	r2, [pc, #44]	; 26138 <flatcc_builder_default_alloc@@Base+0x228>
   26108:	ldr	r1, [pc, #24]	; 26128 <flatcc_builder_default_alloc@@Base+0x218>
   2610c:	ldr	r0, [pc, #24]	; 2612c <flatcc_builder_default_alloc@@Base+0x21c>
   26110:	bl	14618 <__assert_fail@plt>
   26114:	mov	r0, #0
   26118:	bx	lr
   2611c:	andeq	r1, r4, ip, asr #12
   26120:	andeq	r1, r4, r8, asr r8
   26124:			; <UNDEFINED> instruction: 0x000002be
   26128:	muleq	r4, ip, sp
   2612c:	strdeq	r1, [r4], -r0
   26130:	andeq	r1, r4, ip, asr #16
   26134:	andeq	r0, r0, r1, lsr #5
   26138:	andeq	r0, r0, r5, lsr #5
   2613c:	push	{r4, r5, r6, r7, lr}
   26140:	sub	sp, sp, #12
   26144:	mov	r4, r0
   26148:	mov	r6, r1
   2614c:	ldr	r3, [r0, #156]	; 0x9c
   26150:	add	r2, r3, #1
   26154:	str	r2, [r0, #156]	; 0x9c
   26158:	ldr	r1, [r0, #160]	; 0xa0
   2615c:	cmp	r2, r1
   26160:	ble	26200 <flatcc_builder_default_alloc@@Base+0x2f0>
   26164:	ldr	r1, [r0, #176]	; 0xb0
   26168:	cmp	r2, r1
   2616c:	cmpgt	r1, #0
   26170:	bgt	26268 <flatcc_builder_default_alloc@@Base+0x358>
   26174:	add	r3, r3, r3, lsl #3
   26178:	lsl	r5, r3, #2
   2617c:	add	r2, r5, #36	; 0x24
   26180:	ldr	r3, [r0, #88]	; 0x58
   26184:	cmp	r2, r3
   26188:	bhi	261c8 <flatcc_builder_default_alloc@@Base+0x2b8>
   2618c:	ldr	r3, [r4, #84]	; 0x54
   26190:	add	r5, r3, r5
   26194:	str	r5, [r4, #32]
   26198:	cmp	r5, #0
   2619c:	beq	26270 <flatcc_builder_default_alloc@@Base+0x360>
   261a0:	ldr	r3, [r4, #88]	; 0x58
   261a4:	ldr	r2, [pc, #204]	; 26278 <flatcc_builder_default_alloc@@Base+0x368>
   261a8:	umull	r2, r3, r2, r3
   261ac:	lsr	r3, r3, #3
   261b0:	str	r3, [r4, #160]	; 0xa0
   261b4:	ldr	r2, [r4, #176]	; 0xb0
   261b8:	cmp	r2, #0
   261bc:	cmpgt	r3, r2
   261c0:	strgt	r2, [r4, #160]	; 0xa0
   261c4:	b	2620c <flatcc_builder_default_alloc@@Base+0x2fc>
   261c8:	mov	r3, #4
   261cc:	str	r3, [sp]
   261d0:	ldr	r7, [r0, #48]	; 0x30
   261d4:	mov	r3, #0
   261d8:	add	r1, r0, #84	; 0x54
   261dc:	ldr	r0, [r0, #40]	; 0x28
   261e0:	blx	r7
   261e4:	cmp	r0, #0
   261e8:	beq	2618c <flatcc_builder_default_alloc@@Base+0x27c>
   261ec:	ldr	r3, [pc, #136]	; 2627c <flatcc_builder_default_alloc@@Base+0x36c>
   261f0:	mov	r2, #308	; 0x134
   261f4:	ldr	r1, [pc, #132]	; 26280 <flatcc_builder_default_alloc@@Base+0x370>
   261f8:	ldr	r0, [pc, #132]	; 26284 <flatcc_builder_default_alloc@@Base+0x374>
   261fc:	bl	14618 <__assert_fail@plt>
   26200:	ldr	r3, [r0, #32]
   26204:	add	r3, r3, #36	; 0x24
   26208:	str	r3, [r0, #32]
   2620c:	ldr	r3, [r4, #32]
   26210:	ldr	r2, [r4, #20]
   26214:	str	r2, [r3, #8]
   26218:	ldr	r3, [r4, #32]
   2621c:	ldrh	r2, [r4, #130]	; 0x82
   26220:	strh	r2, [r3, #12]
   26224:	strh	r6, [r4, #130]	; 0x82
   26228:	ldr	r3, [r4, #32]
   2622c:	ldr	r2, [r4, #28]
   26230:	str	r2, [r3]
   26234:	ldr	r3, [r4, #32]
   26238:	mvn	r2, #3
   2623c:	str	r2, [r3, #4]
   26240:	ldr	r3, [r4, #28]
   26244:	ldr	r2, [r4, #20]
   26248:	add	r3, r3, r2
   2624c:	add	r3, r3, #7
   26250:	bic	r3, r3, #7
   26254:	str	r3, [r4, #28]
   26258:	mov	r0, #0
   2625c:	str	r0, [r4, #20]
   26260:	add	sp, sp, #12
   26264:	pop	{r4, r5, r6, r7, pc}
   26268:	mvn	r0, #0
   2626c:	b	26260 <flatcc_builder_default_alloc@@Base+0x350>
   26270:	mvn	r0, #0
   26274:	b	26260 <flatcc_builder_default_alloc@@Base+0x350>
   26278:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   2627c:	andeq	r1, r4, r8, ror #16
   26280:	muleq	r4, ip, sp
   26284:	strdeq	r1, [r4], -r0
   26288:	push	{r4, r5, r6, r7, r8, lr}
   2628c:	sub	sp, sp, #88	; 0x58
   26290:	cmn	r2, #-1073741823	; 0xc0000001
   26294:	bhi	26448 <flatcc_builder_default_alloc@@Base+0x538>
   26298:	ldrh	ip, [r0, #128]	; 0x80
   2629c:	cmp	ip, #3
   262a0:	movls	ip, #4
   262a4:	strhls	ip, [r0, #128]	; 0x80
   262a8:	str	r2, [sp, #84]	; 0x54
   262ac:	ldr	r7, [r0, #136]	; 0x88
   262b0:	and	lr, r7, #3
   262b4:	mov	ip, #4
   262b8:	str	ip, [sp, #12]
   262bc:	add	r4, sp, #84	; 0x54
   262c0:	str	r4, [sp, #20]
   262c4:	str	ip, [sp, #24]
   262c8:	mov	ip, #1
   262cc:	str	ip, [sp, #16]
   262d0:	lsls	r5, r2, #2
   262d4:	beq	262f0 <flatcc_builder_default_alloc@@Base+0x3e0>
   262d8:	add	ip, r5, #4
   262dc:	str	ip, [sp, #12]
   262e0:	str	r1, [sp, #28]
   262e4:	str	r5, [sp, #32]
   262e8:	mov	ip, #2
   262ec:	str	ip, [sp, #16]
   262f0:	cmp	lr, #0
   262f4:	beq	26324 <flatcc_builder_default_alloc@@Base+0x414>
   262f8:	ldr	ip, [sp, #12]
   262fc:	add	ip, ip, lr
   26300:	str	ip, [sp, #12]
   26304:	ldr	ip, [sp, #16]
   26308:	add	ip, ip, #1
   2630c:	add	r4, sp, #88	; 0x58
   26310:	add	r4, r4, ip, lsl #3
   26314:	ldr	r6, [pc, #308]	; 26450 <flatcc_builder_default_alloc@@Base+0x540>
   26318:	str	r6, [r4, #-76]	; 0xffffffb4
   2631c:	str	lr, [r4, #-72]	; 0xffffffb8
   26320:	str	ip, [sp, #16]
   26324:	mov	r6, r0
   26328:	ldr	r8, [sp, #12]
   2632c:	sub	r7, r7, r8
   26330:	cmp	r2, #0
   26334:	beq	263dc <flatcc_builder_default_alloc@@Base+0x4cc>
   26338:	mov	r2, r1
   2633c:	mov	ip, r3
   26340:	add	r5, r1, r5
   26344:	mvn	r1, #3
   26348:	b	26374 <flatcc_builder_default_alloc@@Base+0x464>
   2634c:	cmp	r3, #0
   26350:	beq	263c8 <flatcc_builder_default_alloc@@Base+0x4b8>
   26354:	ldrb	r0, [ip]
   26358:	cmp	r0, #0
   2635c:	bne	263b4 <flatcc_builder_default_alloc@@Base+0x4a4>
   26360:	add	r2, r2, #4
   26364:	add	ip, ip, #1
   26368:	sub	r1, r1, #4
   2636c:	cmp	r2, r5
   26370:	beq	263dc <flatcc_builder_default_alloc@@Base+0x4cc>
   26374:	ldr	lr, [r2]
   26378:	cmp	lr, #0
   2637c:	beq	2634c <flatcc_builder_default_alloc@@Base+0x43c>
   26380:	sub	r4, r1, r7
   26384:	add	lr, r4, lr
   26388:	str	lr, [r2]
   2638c:	cmp	r3, #0
   26390:	beq	26360 <flatcc_builder_default_alloc@@Base+0x450>
   26394:	ldrb	r0, [ip]
   26398:	cmp	r0, #0
   2639c:	bne	26360 <flatcc_builder_default_alloc@@Base+0x450>
   263a0:	ldr	r3, [pc, #172]	; 26454 <flatcc_builder_default_alloc@@Base+0x544>
   263a4:	ldr	r2, [pc, #172]	; 26458 <flatcc_builder_default_alloc@@Base+0x548>
   263a8:	ldr	r1, [pc, #172]	; 2645c <flatcc_builder_default_alloc@@Base+0x54c>
   263ac:	ldr	r0, [pc, #172]	; 26460 <flatcc_builder_default_alloc@@Base+0x550>
   263b0:	bl	14618 <__assert_fail@plt>
   263b4:	ldr	r3, [pc, #152]	; 26454 <flatcc_builder_default_alloc@@Base+0x544>
   263b8:	ldr	r2, [pc, #164]	; 26464 <flatcc_builder_default_alloc@@Base+0x554>
   263bc:	ldr	r1, [pc, #152]	; 2645c <flatcc_builder_default_alloc@@Base+0x54c>
   263c0:	ldr	r0, [pc, #160]	; 26468 <flatcc_builder_default_alloc@@Base+0x558>
   263c4:	bl	14618 <__assert_fail@plt>
   263c8:	ldr	r3, [pc, #132]	; 26454 <flatcc_builder_default_alloc@@Base+0x544>
   263cc:	ldr	r2, [pc, #152]	; 2646c <flatcc_builder_default_alloc@@Base+0x55c>
   263d0:	ldr	r1, [pc, #132]	; 2645c <flatcc_builder_default_alloc@@Base+0x54c>
   263d4:	ldr	r0, [pc, #148]	; 26470 <flatcc_builder_default_alloc@@Base+0x560>
   263d8:	bl	14618 <__assert_fail@plt>
   263dc:	ldr	r3, [r6, #136]	; 0x88
   263e0:	sub	r4, r3, r8
   263e4:	cmp	r3, r4
   263e8:	ble	26420 <flatcc_builder_default_alloc@@Base+0x510>
   263ec:	str	r8, [sp]
   263f0:	ldr	r5, [r6, #44]	; 0x2c
   263f4:	mov	r3, r4
   263f8:	ldr	r2, [sp, #16]
   263fc:	add	r1, sp, #20
   26400:	ldr	r0, [r6, #36]	; 0x24
   26404:	blx	r5
   26408:	cmp	r0, #0
   2640c:	streq	r4, [r6, #136]	; 0x88
   26410:	bne	26434 <flatcc_builder_default_alloc@@Base+0x524>
   26414:	mov	r0, r4
   26418:	add	sp, sp, #88	; 0x58
   2641c:	pop	{r4, r5, r6, r7, r8, pc}
   26420:	ldr	r3, [pc, #76]	; 26474 <flatcc_builder_default_alloc@@Base+0x564>
   26424:	ldr	r2, [pc, #76]	; 26478 <flatcc_builder_default_alloc@@Base+0x568>
   26428:	ldr	r1, [pc, #44]	; 2645c <flatcc_builder_default_alloc@@Base+0x54c>
   2642c:	ldr	r0, [pc, #60]	; 26470 <flatcc_builder_default_alloc@@Base+0x560>
   26430:	bl	14618 <__assert_fail@plt>
   26434:	ldr	r3, [pc, #56]	; 26474 <flatcc_builder_default_alloc@@Base+0x564>
   26438:	ldr	r2, [pc, #60]	; 2647c <flatcc_builder_default_alloc@@Base+0x56c>
   2643c:	ldr	r1, [pc, #24]	; 2645c <flatcc_builder_default_alloc@@Base+0x54c>
   26440:	ldr	r0, [pc, #40]	; 26470 <flatcc_builder_default_alloc@@Base+0x560>
   26444:	bl	14618 <__assert_fail@plt>
   26448:	mov	r4, #0
   2644c:	b	26414 <flatcc_builder_default_alloc@@Base+0x504>
   26450:	andeq	r1, r4, ip, asr #12
   26454:	andeq	r1, r4, r8, ror r8
   26458:			; <UNDEFINED> instruction: 0x000005b1
   2645c:	muleq	r4, ip, sp
   26460:	andeq	r1, r4, r4, ror #27
   26464:			; <UNDEFINED> instruction: 0x000005b5
   26468:	strdeq	r1, [r4], -r4
   2646c:			; <UNDEFINED> instruction: 0x000005b7
   26470:	strdeq	r1, [r4], -r0
   26474:	muleq	r4, r8, r8
   26478:	andeq	r0, r0, r7, lsl #5
   2647c:	andeq	r0, r0, fp, lsl #5

00026480 <flatcc_builder_flush_vtable_cache@@Base>:
   26480:	ldr	r3, [r0, #116]	; 0x74
   26484:	cmp	r3, #0
   26488:	bxeq	lr
   2648c:	push	{r4, lr}
   26490:	mov	r4, r0
   26494:	ldr	r2, [r0, #96]	; 0x60
   26498:	mov	r1, #0
   2649c:	ldr	r0, [r0, #92]	; 0x5c
   264a0:	bl	145c4 <memset@plt>
   264a4:	mov	r3, #16
   264a8:	str	r3, [r4, #124]	; 0x7c
   264ac:	mov	r3, #0
   264b0:	str	r3, [r4, #120]	; 0x78
   264b4:	pop	{r4, pc}

000264b8 <flatcc_builder_custom_init@@Base>:
   264b8:	push	{r4, r5, r6, r7, r8, lr}
   264bc:	mov	r4, r0
   264c0:	mov	r6, r1
   264c4:	mov	r7, r2
   264c8:	mov	r5, r3
   264cc:	mov	r2, #232	; 0xe8
   264d0:	mov	r1, #0
   264d4:	bl	145c4 <memset@plt>
   264d8:	cmp	r6, #0
   264dc:	moveq	r3, #1
   264e0:	streq	r3, [r4, #184]	; 0xb8
   264e4:	addeq	r7, r4, #188	; 0xbc
   264e8:	ldreq	r6, [pc, #36]	; 26514 <flatcc_builder_custom_init@@Base+0x5c>
   264ec:	ldr	r3, [pc, #36]	; 26518 <flatcc_builder_custom_init@@Base+0x60>
   264f0:	cmp	r5, #0
   264f4:	moveq	r5, r3
   264f8:	ldr	r3, [sp, #24]
   264fc:	str	r3, [r4, #40]	; 0x28
   26500:	str	r5, [r4, #48]	; 0x30
   26504:	str	r7, [r4, #36]	; 0x24
   26508:	str	r6, [r4, #44]	; 0x2c
   2650c:	mov	r0, #0
   26510:	pop	{r4, r5, r6, r7, r8, pc}
   26514:	muleq	r2, r0, r0
   26518:	andeq	r5, r2, r0, lsl pc

0002651c <flatcc_builder_init@@Base>:
   2651c:	push	{r4, lr}
   26520:	mov	r4, r0
   26524:	mov	r2, #232	; 0xe8
   26528:	mov	r1, #0
   2652c:	bl	145c4 <memset@plt>
   26530:	mov	r3, #1
   26534:	str	r3, [r4, #184]	; 0xb8
   26538:	ldr	r3, [pc, #24]	; 26558 <flatcc_builder_init@@Base+0x3c>
   2653c:	str	r3, [r4, #48]	; 0x30
   26540:	add	r3, r4, #188	; 0xbc
   26544:	str	r3, [r4, #36]	; 0x24
   26548:	ldr	r3, [pc, #12]	; 2655c <flatcc_builder_init@@Base+0x40>
   2654c:	str	r3, [r4, #44]	; 0x2c
   26550:	mov	r0, #0
   26554:	pop	{r4, pc}
   26558:	andeq	r5, r2, r0, lsl pc
   2655c:	muleq	r2, r0, r0

00026560 <flatcc_builder_custom_reset@@Base>:
   26560:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26564:	sub	sp, sp, #12
   26568:	mov	r6, r0
   2656c:	mov	fp, r1
   26570:	mov	r8, r2
   26574:	mov	r4, r0
   26578:	mov	r5, #0
   2657c:	mov	r9, r5
   26580:	mov	sl, #1
   26584:	b	265a8 <flatcc_builder_custom_reset@@Base+0x48>
   26588:	ldr	r2, [r7, #56]	; 0x38
   2658c:	mov	r1, r9
   26590:	ldr	r0, [r7, #52]	; 0x34
   26594:	bl	145c4 <memset@plt>
   26598:	add	r5, r5, #1
   2659c:	add	r4, r4, #8
   265a0:	cmp	r5, #8
   265a4:	beq	26610 <flatcc_builder_custom_reset@@Base+0xb0>
   265a8:	add	r1, r4, #52	; 0x34
   265ac:	mov	r7, r4
   265b0:	ldr	r3, [r4, #52]	; 0x34
   265b4:	cmp	r3, #0
   265b8:	beq	265f0 <flatcc_builder_custom_reset@@Base+0x90>
   265bc:	cmp	r5, #5
   265c0:	cmpne	r8, #0
   265c4:	beq	26588 <flatcc_builder_custom_reset@@Base+0x28>
   265c8:	str	r5, [sp]
   265cc:	mov	r3, sl
   265d0:	mov	r2, sl
   265d4:	ldr	r0, [r6, #40]	; 0x28
   265d8:	ldr	ip, [r6, #48]	; 0x30
   265dc:	blx	ip
   265e0:	cmp	r0, #0
   265e4:	beq	26588 <flatcc_builder_custom_reset@@Base+0x28>
   265e8:	mvn	r0, #0
   265ec:	b	26688 <flatcc_builder_custom_reset@@Base+0x128>
   265f0:	ldr	r3, [r4, #56]	; 0x38
   265f4:	cmp	r3, #0
   265f8:	beq	26598 <flatcc_builder_custom_reset@@Base+0x38>
   265fc:	ldr	r3, [pc, #156]	; 266a0 <flatcc_builder_custom_reset@@Base+0x140>
   26600:	ldr	r2, [pc, #156]	; 266a4 <flatcc_builder_custom_reset@@Base+0x144>
   26604:	ldr	r1, [pc, #156]	; 266a8 <flatcc_builder_custom_reset@@Base+0x148>
   26608:	ldr	r0, [pc, #156]	; 266ac <flatcc_builder_custom_reset@@Base+0x14c>
   2660c:	bl	14618 <__assert_fail@plt>
   26610:	mov	r3, #0
   26614:	str	r3, [r6, #120]	; 0x78
   26618:	ldr	r3, [r6, #124]	; 0x7c
   2661c:	cmp	r3, #0
   26620:	movne	r3, #16
   26624:	strne	r3, [r6, #124]	; 0x7c
   26628:	mov	r3, #0
   2662c:	strh	r3, [r6, #128]	; 0x80
   26630:	str	r3, [r6, #136]	; 0x88
   26634:	str	r3, [r6, #140]	; 0x8c
   26638:	str	r3, [r6, #156]	; 0x9c
   2663c:	str	r3, [r6, #160]	; 0xa0
   26640:	str	r3, [r6, #20]
   26644:	str	r3, [r6, #24]
   26648:	str	r3, [r6, #148]	; 0x94
   2664c:	str	r3, [r6, #152]	; 0x98
   26650:	ldr	r2, [r6, #60]	; 0x3c
   26654:	str	r2, [r6, #16]
   26658:	ldr	r2, [r6, #76]	; 0x4c
   2665c:	str	r2, [r6]
   26660:	ldr	r2, [r6, #52]	; 0x34
   26664:	str	r2, [r6, #4]
   26668:	str	r3, [r6, #32]
   2666c:	cmp	fp, r3
   26670:	strne	r3, [r6, #172]	; 0xac
   26674:	strne	r3, [r6, #176]	; 0xb0
   26678:	strne	r3, [r6, #180]	; 0xb4
   2667c:	ldr	r0, [r6, #184]	; 0xb8
   26680:	cmp	r0, #0
   26684:	bne	26690 <flatcc_builder_custom_reset@@Base+0x130>
   26688:	add	sp, sp, #12
   2668c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26690:	add	r0, r6, #188	; 0xbc
   26694:	bl	29f58 <flatcc_emitter_reset@@Base>
   26698:	mov	r0, #0
   2669c:	b	26688 <flatcc_builder_custom_reset@@Base+0x128>
   266a0:	andeq	r1, r4, r4, lsr #17
   266a4:			; <UNDEFINED> instruction: 0x000001b2
   266a8:	muleq	r4, ip, sp
   266ac:	andeq	r1, r4, r4, lsl #28

000266b0 <flatcc_builder_reset@@Base>:
   266b0:	push	{r4, lr}
   266b4:	mov	r2, #0
   266b8:	mov	r1, r2
   266bc:	bl	26560 <flatcc_builder_custom_reset@@Base>
   266c0:	pop	{r4, pc}

000266c4 <flatcc_builder_clear@@Base>:
   266c4:	push	{r4, r5, r6, r7, r8, lr}
   266c8:	sub	sp, sp, #8
   266cc:	mov	r6, r0
   266d0:	add	r5, r0, #52	; 0x34
   266d4:	mov	r4, #0
   266d8:	mov	r8, r4
   266dc:	str	r4, [sp]
   266e0:	ldr	r7, [r6, #48]	; 0x30
   266e4:	mov	r3, r8
   266e8:	mov	r2, r8
   266ec:	mov	r1, r5
   266f0:	ldr	r0, [r6, #40]	; 0x28
   266f4:	blx	r7
   266f8:	add	r4, r4, #1
   266fc:	add	r5, r5, #8
   26700:	cmp	r4, #8
   26704:	bne	266dc <flatcc_builder_clear@@Base+0x18>
   26708:	ldr	r3, [r6, #184]	; 0xb8
   2670c:	cmp	r3, #0
   26710:	bne	2672c <flatcc_builder_clear@@Base+0x68>
   26714:	mov	r2, #232	; 0xe8
   26718:	mov	r1, #0
   2671c:	mov	r0, r6
   26720:	bl	145c4 <memset@plt>
   26724:	add	sp, sp, #8
   26728:	pop	{r4, r5, r6, r7, r8, pc}
   2672c:	add	r0, r6, #188	; 0xbc
   26730:	bl	2a028 <flatcc_emitter_clear@@Base>
   26734:	b	26714 <flatcc_builder_clear@@Base+0x50>

00026738 <flatcc_builder_enter_user_frame_ptr@@Base>:
   26738:	push	{r4, r5, r6, r7, r8, lr}
   2673c:	sub	sp, sp, #8
   26740:	mov	r7, r0
   26744:	add	r4, r1, #3
   26748:	bic	r4, r4, #3
   2674c:	add	r4, r4, #4
   26750:	ldr	r5, [r0, #228]	; 0xe4
   26754:	add	r2, r4, r5
   26758:	ldr	r3, [r0, #112]	; 0x70
   2675c:	cmp	r2, r3
   26760:	bhi	267a8 <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   26764:	ldr	r8, [r7, #108]	; 0x6c
   26768:	adds	r6, r8, r5
   2676c:	beq	267e0 <flatcc_builder_enter_user_frame_ptr@@Base+0xa8>
   26770:	mov	r2, r4
   26774:	mov	r1, #0
   26778:	mov	r0, r6
   2677c:	bl	145c4 <memset@plt>
   26780:	ldr	r3, [r7, #224]	; 0xe0
   26784:	str	r3, [r8, r5]
   26788:	ldr	r1, [r7, #228]	; 0xe4
   2678c:	add	r3, r1, #4
   26790:	str	r3, [r7, #224]	; 0xe0
   26794:	add	r4, r4, r1
   26798:	str	r4, [r7, #228]	; 0xe4
   2679c:	add	r0, r6, #4
   267a0:	add	sp, sp, #8
   267a4:	pop	{r4, r5, r6, r7, r8, pc}
   267a8:	mov	r3, #7
   267ac:	str	r3, [sp]
   267b0:	ldr	r6, [r0, #48]	; 0x30
   267b4:	mov	r3, #0
   267b8:	add	r1, r0, #108	; 0x6c
   267bc:	ldr	r0, [r0, #40]	; 0x28
   267c0:	blx	r6
   267c4:	cmp	r0, #0
   267c8:	beq	26764 <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   267cc:	ldr	r3, [pc, #20]	; 267e8 <flatcc_builder_enter_user_frame_ptr@@Base+0xb0>
   267d0:	mov	r2, #308	; 0x134
   267d4:	ldr	r1, [pc, #16]	; 267ec <flatcc_builder_enter_user_frame_ptr@@Base+0xb4>
   267d8:	ldr	r0, [pc, #16]	; 267f0 <flatcc_builder_enter_user_frame_ptr@@Base+0xb8>
   267dc:	bl	14618 <__assert_fail@plt>
   267e0:	mov	r0, #0
   267e4:	b	267a0 <flatcc_builder_enter_user_frame_ptr@@Base+0x68>
   267e8:	andeq	r1, r4, r8, ror #16
   267ec:	muleq	r4, ip, sp
   267f0:	strdeq	r1, [r4], -r0

000267f4 <flatcc_builder_enter_user_frame@@Base>:
   267f4:	push	{r4, r5, r6, r7, lr}
   267f8:	sub	sp, sp, #12
   267fc:	mov	r6, r0
   26800:	add	r4, r1, #3
   26804:	bic	r4, r4, #3
   26808:	add	r4, r4, #4
   2680c:	ldr	r5, [r0, #228]	; 0xe4
   26810:	add	r2, r4, r5
   26814:	ldr	r3, [r0, #112]	; 0x70
   26818:	cmp	r2, r3
   2681c:	bhi	26860 <flatcc_builder_enter_user_frame@@Base+0x6c>
   26820:	ldr	r7, [r6, #108]	; 0x6c
   26824:	adds	r0, r7, r5
   26828:	moveq	r0, #0
   2682c:	beq	26858 <flatcc_builder_enter_user_frame@@Base+0x64>
   26830:	mov	r2, r4
   26834:	mov	r1, #0
   26838:	bl	145c4 <memset@plt>
   2683c:	ldr	r3, [r6, #224]	; 0xe0
   26840:	str	r3, [r7, r5]
   26844:	ldr	r1, [r6, #228]	; 0xe4
   26848:	add	r0, r1, #4
   2684c:	str	r0, [r6, #224]	; 0xe0
   26850:	add	r4, r4, r1
   26854:	str	r4, [r6, #228]	; 0xe4
   26858:	add	sp, sp, #12
   2685c:	pop	{r4, r5, r6, r7, pc}
   26860:	mov	r3, #7
   26864:	str	r3, [sp]
   26868:	ldr	r7, [r0, #48]	; 0x30
   2686c:	mov	r3, #0
   26870:	add	r1, r0, #108	; 0x6c
   26874:	ldr	r0, [r0, #40]	; 0x28
   26878:	blx	r7
   2687c:	cmp	r0, #0
   26880:	beq	26820 <flatcc_builder_enter_user_frame@@Base+0x2c>
   26884:	ldr	r3, [pc, #12]	; 26898 <flatcc_builder_enter_user_frame@@Base+0xa4>
   26888:	mov	r2, #308	; 0x134
   2688c:	ldr	r1, [pc, #8]	; 2689c <flatcc_builder_enter_user_frame@@Base+0xa8>
   26890:	ldr	r0, [pc, #8]	; 268a0 <flatcc_builder_enter_user_frame@@Base+0xac>
   26894:	bl	14618 <__assert_fail@plt>
   26898:	andeq	r1, r4, r8, ror #16
   2689c:	muleq	r4, ip, sp
   268a0:	strdeq	r1, [r4], -r0

000268a4 <flatcc_builder_exit_user_frame@@Base>:
   268a4:	ldr	r3, [r0, #224]	; 0xe0
   268a8:	cmp	r3, #0
   268ac:	beq	268d0 <flatcc_builder_exit_user_frame@@Base+0x2c>
   268b0:	ldr	r2, [r0, #108]	; 0x6c
   268b4:	add	r2, r2, r3
   268b8:	sub	r3, r3, #4
   268bc:	str	r3, [r0, #228]	; 0xe4
   268c0:	ldr	r3, [r2, #-4]
   268c4:	str	r3, [r0, #224]	; 0xe0
   268c8:	mov	r0, r3
   268cc:	bx	lr
   268d0:	push	{r4, lr}
   268d4:	ldr	r3, [pc, #12]	; 268e8 <flatcc_builder_exit_user_frame@@Base+0x44>
   268d8:	ldr	r2, [pc, #12]	; 268ec <flatcc_builder_exit_user_frame@@Base+0x48>
   268dc:	ldr	r1, [pc, #12]	; 268f0 <flatcc_builder_exit_user_frame@@Base+0x4c>
   268e0:	ldr	r0, [pc, #12]	; 268f4 <flatcc_builder_exit_user_frame@@Base+0x50>
   268e4:	bl	14618 <__assert_fail@plt>
   268e8:	andeq	r1, r4, r0, asr #17
   268ec:	andeq	r0, r0, lr, lsl r2
   268f0:	muleq	r4, ip, sp
   268f4:	andeq	r1, r4, r8, lsl lr

000268f8 <flatcc_builder_exit_user_frame_at@@Base>:
   268f8:	push	{r4, lr}
   268fc:	ldr	r3, [r0, #224]	; 0xe0
   26900:	cmp	r3, r1
   26904:	bcc	26914 <flatcc_builder_exit_user_frame_at@@Base+0x1c>
   26908:	str	r1, [r0, #224]	; 0xe0
   2690c:	bl	268a4 <flatcc_builder_exit_user_frame@@Base>
   26910:	pop	{r4, pc}
   26914:	ldr	r3, [pc, #12]	; 26928 <flatcc_builder_exit_user_frame_at@@Base+0x30>
   26918:	ldr	r2, [pc, #12]	; 2692c <flatcc_builder_exit_user_frame_at@@Base+0x34>
   2691c:	ldr	r1, [pc, #12]	; 26930 <flatcc_builder_exit_user_frame_at@@Base+0x38>
   26920:	ldr	r0, [pc, #12]	; 26934 <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   26924:	bl	14618 <__assert_fail@plt>
   26928:	andeq	r1, r4, r0, ror #17
   2692c:	andeq	r0, r0, r7, lsr #4
   26930:	muleq	r4, ip, sp
   26934:	andeq	r1, r4, r4, lsr lr

00026938 <flatcc_builder_get_current_user_frame@@Base>:
   26938:	ldr	r0, [r0, #224]	; 0xe0
   2693c:	bx	lr

00026940 <flatcc_builder_get_user_frame_ptr@@Base>:
   26940:	ldr	r0, [r0, #108]	; 0x6c
   26944:	add	r0, r0, r1
   26948:	bx	lr

0002694c <flatcc_builder_embed_buffer@@Base>:
   2694c:	push	{r4, r5, r6, lr}
   26950:	sub	sp, sp, #88	; 0x58
   26954:	mov	r4, r0
   26958:	mov	r6, r2
   2695c:	mov	r5, r3
   26960:	ldr	r3, [r0, #152]	; 0x98
   26964:	adds	r3, r3, #0
   26968:	movne	r3, #1
   2696c:	mov	r2, r1
   26970:	add	r1, sp, #104	; 0x68
   26974:	bl	26024 <flatcc_builder_default_alloc@@Base+0x114>
   26978:	cmp	r0, #0
   2697c:	bne	26ab8 <flatcc_builder_embed_buffer@@Base+0x16c>
   26980:	ldr	r3, [sp, #108]	; 0x6c
   26984:	and	r3, r3, #2
   26988:	cmp	r3, #0
   2698c:	movne	r3, #4
   26990:	moveq	r3, #0
   26994:	ldr	r1, [r4, #136]	; 0x88
   26998:	sub	r2, r1, r5
   2699c:	sub	r3, r2, r3
   269a0:	ldrh	r2, [sp, #104]	; 0x68
   269a4:	sub	r2, r2, #1
   269a8:	and	r3, r3, r2
   269ac:	add	r2, r5, r3
   269b0:	str	r2, [sp, #84]	; 0x54
   269b4:	mov	r2, #0
   269b8:	str	r2, [sp, #12]
   269bc:	str	r2, [sp, #16]
   269c0:	ldr	r2, [r4, #152]	; 0x98
   269c4:	cmp	r2, #0
   269c8:	beq	269e8 <flatcc_builder_embed_buffer@@Base+0x9c>
   269cc:	mov	r2, #4
   269d0:	str	r2, [sp, #12]
   269d4:	add	r0, sp, #84	; 0x54
   269d8:	str	r0, [sp, #20]
   269dc:	str	r2, [sp, #24]
   269e0:	mov	r2, #1
   269e4:	str	r2, [sp, #16]
   269e8:	cmp	r5, #0
   269ec:	beq	26a18 <flatcc_builder_embed_buffer@@Base+0xcc>
   269f0:	ldr	r2, [sp, #12]
   269f4:	add	r2, r2, r5
   269f8:	str	r2, [sp, #12]
   269fc:	ldr	r2, [sp, #16]
   26a00:	add	r2, r2, #1
   26a04:	add	r0, sp, #88	; 0x58
   26a08:	add	r0, r0, r2, lsl #3
   26a0c:	str	r6, [r0, #-76]	; 0xffffffb4
   26a10:	str	r5, [r0, #-72]	; 0xffffffb8
   26a14:	str	r2, [sp, #16]
   26a18:	cmp	r3, #0
   26a1c:	beq	26a4c <flatcc_builder_embed_buffer@@Base+0x100>
   26a20:	ldr	r2, [sp, #12]
   26a24:	add	r2, r2, r3
   26a28:	str	r2, [sp, #12]
   26a2c:	ldr	r2, [sp, #16]
   26a30:	add	r2, r2, #1
   26a34:	add	r0, sp, #88	; 0x58
   26a38:	add	r0, r0, r2, lsl #3
   26a3c:	ldr	ip, [pc, #124]	; 26ac0 <flatcc_builder_embed_buffer@@Base+0x174>
   26a40:	str	ip, [r0, #-76]	; 0xffffffb4
   26a44:	str	r3, [r0, #-72]	; 0xffffffb8
   26a48:	str	r2, [sp, #16]
   26a4c:	ldr	r3, [sp, #12]
   26a50:	sub	r5, r1, r3
   26a54:	cmp	r1, r5
   26a58:	ble	26a90 <flatcc_builder_embed_buffer@@Base+0x144>
   26a5c:	str	r3, [sp]
   26a60:	ldr	r6, [r4, #44]	; 0x2c
   26a64:	mov	r3, r5
   26a68:	ldr	r2, [sp, #16]
   26a6c:	add	r1, sp, #20
   26a70:	ldr	r0, [r4, #36]	; 0x24
   26a74:	blx	r6
   26a78:	cmp	r0, #0
   26a7c:	streq	r5, [r4, #136]	; 0x88
   26a80:	bne	26aa4 <flatcc_builder_embed_buffer@@Base+0x158>
   26a84:	mov	r0, r5
   26a88:	add	sp, sp, #88	; 0x58
   26a8c:	pop	{r4, r5, r6, pc}
   26a90:	ldr	r3, [pc, #44]	; 26ac4 <flatcc_builder_embed_buffer@@Base+0x178>
   26a94:	ldr	r2, [pc, #44]	; 26ac8 <flatcc_builder_embed_buffer@@Base+0x17c>
   26a98:	ldr	r1, [pc, #44]	; 26acc <flatcc_builder_embed_buffer@@Base+0x180>
   26a9c:	ldr	r0, [pc, #44]	; 26ad0 <flatcc_builder_embed_buffer@@Base+0x184>
   26aa0:	bl	14618 <__assert_fail@plt>
   26aa4:	ldr	r3, [pc, #24]	; 26ac4 <flatcc_builder_embed_buffer@@Base+0x178>
   26aa8:	ldr	r2, [pc, #36]	; 26ad4 <flatcc_builder_embed_buffer@@Base+0x188>
   26aac:	ldr	r1, [pc, #24]	; 26acc <flatcc_builder_embed_buffer@@Base+0x180>
   26ab0:	ldr	r0, [pc, #24]	; 26ad0 <flatcc_builder_embed_buffer@@Base+0x184>
   26ab4:	bl	14618 <__assert_fail@plt>
   26ab8:	mov	r5, #0
   26abc:	b	26a84 <flatcc_builder_embed_buffer@@Base+0x138>
   26ac0:	andeq	r1, r4, ip, asr #12
   26ac4:	muleq	r4, r8, r8
   26ac8:	andeq	r0, r0, r7, lsl #5
   26acc:	muleq	r4, ip, sp
   26ad0:	strdeq	r1, [r4], -r0
   26ad4:	andeq	r0, r0, fp, lsl #5

00026ad8 <flatcc_builder_create_buffer@@Base>:
   26ad8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   26adc:	sub	sp, sp, #96	; 0x60
   26ae0:	mov	r5, r0
   26ae4:	mov	r9, r1
   26ae8:	mov	r6, r3
   26aec:	ldr	r8, [sp, #132]	; 0x84
   26af0:	mov	r3, #0
   26af4:	str	r3, [sp, #12]
   26af8:	and	r4, r8, #1
   26afc:	uxtb	r7, r4
   26b00:	mov	r3, r7
   26b04:	add	r1, sp, #128	; 0x80
   26b08:	bl	26024 <flatcc_builder_default_alloc@@Base+0x114>
   26b0c:	cmp	r0, #0
   26b10:	bne	26cb4 <flatcc_builder_create_buffer@@Base+0x1dc>
   26b14:	ldrh	r0, [sp, #128]	; 0x80
   26b18:	ldrh	r3, [r5, #128]	; 0x80
   26b1c:	cmp	r3, r0
   26b20:	strhcc	r0, [r5, #128]	; 0x80
   26b24:	cmp	r9, #0
   26b28:	ldrne	r3, [r9]
   26b2c:	strne	r3, [sp, #12]
   26b30:	ldr	r1, [sp, #12]
   26b34:	cmp	r1, #0
   26b38:	movne	r1, #4
   26b3c:	moveq	r1, #0
   26b40:	tst	r8, #2
   26b44:	bne	26cbc <flatcc_builder_create_buffer@@Base+0x1e4>
   26b48:	ldr	ip, [r5, #136]	; 0x88
   26b4c:	mov	r2, ip
   26b50:	sub	r3, ip, #4
   26b54:	sub	r3, r3, r1
   26b58:	sub	r0, r0, #1
   26b5c:	and	r3, r3, r0
   26b60:	mov	r0, #0
   26b64:	str	r0, [sp, #16]
   26b68:	str	r0, [sp, #20]
   26b6c:	cmp	r4, r0
   26b70:	bne	26cd8 <flatcc_builder_create_buffer@@Base+0x200>
   26b74:	ldr	lr, [sp, #16]
   26b78:	add	lr, lr, #4
   26b7c:	str	lr, [sp, #16]
   26b80:	ldr	r8, [sp, #20]
   26b84:	add	r0, r8, #1
   26b88:	add	r9, sp, #96	; 0x60
   26b8c:	add	r9, r9, r0, lsl #3
   26b90:	add	sl, sp, #92	; 0x5c
   26b94:	str	sl, [r9, #-80]	; 0xffffffb0
   26b98:	mov	sl, #4
   26b9c:	str	sl, [r9, #-76]	; 0xffffffb4
   26ba0:	str	r0, [sp, #20]
   26ba4:	cmp	r1, #0
   26ba8:	beq	26bd4 <flatcc_builder_create_buffer@@Base+0xfc>
   26bac:	add	lr, r1, lr
   26bb0:	str	lr, [sp, #16]
   26bb4:	add	r0, r8, #2
   26bb8:	add	lr, sp, #96	; 0x60
   26bbc:	add	r0, lr, r0, lsl #3
   26bc0:	add	lr, sp, #12
   26bc4:	str	lr, [r0, #-80]	; 0xffffffb0
   26bc8:	str	r1, [r0, #-76]	; 0xffffffb4
   26bcc:	add	r8, r8, #2
   26bd0:	str	r8, [sp, #20]
   26bd4:	cmp	r3, #0
   26bd8:	beq	26c08 <flatcc_builder_create_buffer@@Base+0x130>
   26bdc:	ldr	r1, [sp, #16]
   26be0:	add	r1, r1, r3
   26be4:	str	r1, [sp, #16]
   26be8:	ldr	r1, [sp, #20]
   26bec:	add	r1, r1, #1
   26bf0:	add	r0, sp, #96	; 0x60
   26bf4:	add	r0, r0, r1, lsl #3
   26bf8:	ldr	lr, [pc, #248]	; 26cf8 <flatcc_builder_create_buffer@@Base+0x220>
   26bfc:	str	lr, [r0, #-80]	; 0xffffffb0
   26c00:	str	r3, [r0, #-76]	; 0xffffffb4
   26c04:	str	r1, [sp, #20]
   26c08:	ldr	r1, [sp, #16]
   26c0c:	sub	r3, r2, r1
   26c10:	add	r3, r3, r7, lsl #2
   26c14:	cmp	r4, #0
   26c18:	ldrne	r2, [r5, #144]	; 0x90
   26c1c:	ldreq	r2, [r5, #140]	; 0x8c
   26c20:	sub	r2, r2, r3
   26c24:	str	r2, [sp, #88]	; 0x58
   26c28:	sub	r3, r6, r3
   26c2c:	str	r3, [sp, #92]	; 0x5c
   26c30:	sub	r4, ip, r1
   26c34:	cmp	r4, ip
   26c38:	bge	26c78 <flatcc_builder_create_buffer@@Base+0x1a0>
   26c3c:	str	r1, [sp]
   26c40:	ldr	r6, [r5, #44]	; 0x2c
   26c44:	mov	r3, r4
   26c48:	ldr	r2, [sp, #20]
   26c4c:	add	r1, sp, #24
   26c50:	ldr	r0, [r5, #36]	; 0x24
   26c54:	blx	r6
   26c58:	cmp	r0, #0
   26c5c:	bne	26c8c <flatcc_builder_create_buffer@@Base+0x1b4>
   26c60:	str	r4, [r5, #136]	; 0x88
   26c64:	cmp	r4, #0
   26c68:	beq	26ca0 <flatcc_builder_create_buffer@@Base+0x1c8>
   26c6c:	mov	r0, r4
   26c70:	add	sp, sp, #96	; 0x60
   26c74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26c78:	ldr	r3, [pc, #124]	; 26cfc <flatcc_builder_create_buffer@@Base+0x224>
   26c7c:	ldr	r2, [pc, #124]	; 26d00 <flatcc_builder_create_buffer@@Base+0x228>
   26c80:	ldr	r1, [pc, #124]	; 26d04 <flatcc_builder_create_buffer@@Base+0x22c>
   26c84:	ldr	r0, [pc, #124]	; 26d08 <flatcc_builder_create_buffer@@Base+0x230>
   26c88:	bl	14618 <__assert_fail@plt>
   26c8c:	ldr	r3, [pc, #104]	; 26cfc <flatcc_builder_create_buffer@@Base+0x224>
   26c90:	ldr	r2, [pc, #116]	; 26d0c <flatcc_builder_create_buffer@@Base+0x234>
   26c94:	ldr	r1, [pc, #104]	; 26d04 <flatcc_builder_create_buffer@@Base+0x22c>
   26c98:	ldr	r0, [pc, #104]	; 26d08 <flatcc_builder_create_buffer@@Base+0x230>
   26c9c:	bl	14618 <__assert_fail@plt>
   26ca0:	ldr	r3, [pc, #104]	; 26d10 <flatcc_builder_create_buffer@@Base+0x238>
   26ca4:	mov	r2, #772	; 0x304
   26ca8:	ldr	r1, [pc, #84]	; 26d04 <flatcc_builder_create_buffer@@Base+0x22c>
   26cac:	ldr	r0, [pc, #84]	; 26d08 <flatcc_builder_create_buffer@@Base+0x230>
   26cb0:	bl	14618 <__assert_fail@plt>
   26cb4:	mov	r4, #0
   26cb8:	b	26c6c <flatcc_builder_create_buffer@@Base+0x194>
   26cbc:	ldr	ip, [r5, #136]	; 0x88
   26cc0:	mov	r2, ip
   26cc4:	sub	r3, ip, #8
   26cc8:	sub	r3, r3, r1
   26ccc:	sub	r0, r0, #1
   26cd0:	and	r3, r3, r0
   26cd4:	mov	r7, #1
   26cd8:	mov	r0, #4
   26cdc:	str	r0, [sp, #16]
   26ce0:	add	lr, sp, #88	; 0x58
   26ce4:	str	lr, [sp, #24]
   26ce8:	str	r0, [sp, #28]
   26cec:	mov	r0, #1
   26cf0:	str	r0, [sp, #20]
   26cf4:	b	26b74 <flatcc_builder_create_buffer@@Base+0x9c>
   26cf8:	andeq	r1, r4, ip, asr #12
   26cfc:	muleq	r4, r8, r8
   26d00:	andeq	r0, r0, r7, lsl #5
   26d04:	muleq	r4, ip, sp
   26d08:	strdeq	r1, [r4], -r0
   26d0c:	andeq	r0, r0, fp, lsl #5
   26d10:	andeq	r1, r4, r4, lsl #18

00026d14 <flatcc_builder_create_struct@@Base>:
   26d14:	push	{r4, r5, r6, lr}
   26d18:	sub	sp, sp, #80	; 0x50
   26d1c:	cmp	r3, #0
   26d20:	beq	26d78 <flatcc_builder_create_struct@@Base+0x64>
   26d24:	mov	r4, r0
   26d28:	ldrh	r0, [r0, #128]	; 0x80
   26d2c:	cmp	r0, r3
   26d30:	strhcc	r3, [r4, #128]	; 0x80
   26d34:	ldr	ip, [r4, #136]	; 0x88
   26d38:	sub	r0, ip, r2
   26d3c:	sub	r3, r3, #1
   26d40:	and	r3, r3, r0
   26d44:	mov	r0, #0
   26d48:	str	r0, [sp, #8]
   26d4c:	str	r0, [sp, #12]
   26d50:	cmp	r2, r0
   26d54:	beq	26db4 <flatcc_builder_create_struct@@Base+0xa0>
   26d58:	str	r2, [sp, #8]
   26d5c:	str	r1, [sp, #16]
   26d60:	str	r2, [sp, #20]
   26d64:	mov	r2, #1
   26d68:	str	r2, [sp, #12]
   26d6c:	cmp	r3, r0
   26d70:	beq	26de8 <flatcc_builder_create_struct@@Base+0xd4>
   26d74:	b	26dbc <flatcc_builder_create_struct@@Base+0xa8>
   26d78:	ldr	r3, [pc, #172]	; 26e2c <flatcc_builder_create_struct@@Base+0x118>
   26d7c:	ldr	r2, [pc, #172]	; 26e30 <flatcc_builder_create_struct@@Base+0x11c>
   26d80:	ldr	r1, [pc, #172]	; 26e34 <flatcc_builder_create_struct@@Base+0x120>
   26d84:	ldr	r0, [pc, #172]	; 26e38 <flatcc_builder_create_struct@@Base+0x124>
   26d88:	bl	14618 <__assert_fail@plt>
   26d8c:	ldr	r3, [pc, #168]	; 26e3c <flatcc_builder_create_struct@@Base+0x128>
   26d90:	ldr	r2, [pc, #168]	; 26e40 <flatcc_builder_create_struct@@Base+0x12c>
   26d94:	ldr	r1, [pc, #152]	; 26e34 <flatcc_builder_create_struct@@Base+0x120>
   26d98:	ldr	r0, [pc, #164]	; 26e44 <flatcc_builder_create_struct@@Base+0x130>
   26d9c:	bl	14618 <__assert_fail@plt>
   26da0:	ldr	r3, [pc, #148]	; 26e3c <flatcc_builder_create_struct@@Base+0x128>
   26da4:	ldr	r2, [pc, #156]	; 26e48 <flatcc_builder_create_struct@@Base+0x134>
   26da8:	ldr	r1, [pc, #132]	; 26e34 <flatcc_builder_create_struct@@Base+0x120>
   26dac:	ldr	r0, [pc, #144]	; 26e44 <flatcc_builder_create_struct@@Base+0x130>
   26db0:	bl	14618 <__assert_fail@plt>
   26db4:	cmp	r3, #0
   26db8:	beq	26d8c <flatcc_builder_create_struct@@Base+0x78>
   26dbc:	ldr	r2, [sp, #8]
   26dc0:	add	r2, r2, r3
   26dc4:	str	r2, [sp, #8]
   26dc8:	ldr	r2, [sp, #12]
   26dcc:	add	r2, r2, #1
   26dd0:	add	r1, sp, #80	; 0x50
   26dd4:	add	r1, r1, r2, lsl #3
   26dd8:	ldr	r0, [pc, #108]	; 26e4c <flatcc_builder_create_struct@@Base+0x138>
   26ddc:	str	r0, [r1, #-72]	; 0xffffffb8
   26de0:	str	r3, [r1, #-68]	; 0xffffffbc
   26de4:	str	r2, [sp, #12]
   26de8:	ldr	r3, [sp, #8]
   26dec:	sub	r5, ip, r3
   26df0:	cmp	ip, r5
   26df4:	ble	26d8c <flatcc_builder_create_struct@@Base+0x78>
   26df8:	str	r3, [sp]
   26dfc:	ldr	r6, [r4, #44]	; 0x2c
   26e00:	mov	r3, r5
   26e04:	ldr	r2, [sp, #12]
   26e08:	add	r1, sp, #16
   26e0c:	ldr	r0, [r4, #36]	; 0x24
   26e10:	blx	r6
   26e14:	cmp	r0, #0
   26e18:	bne	26da0 <flatcc_builder_create_struct@@Base+0x8c>
   26e1c:	str	r5, [r4, #136]	; 0x88
   26e20:	mov	r0, r5
   26e24:	add	sp, sp, #80	; 0x50
   26e28:	pop	{r4, r5, r6, pc}
   26e2c:	andeq	r1, r4, r4, lsr #18
   26e30:	andeq	r0, r0, pc, lsl #6
   26e34:	muleq	r4, ip, sp
   26e38:	andeq	r1, r4, r4, asr lr
   26e3c:	muleq	r4, r8, r8
   26e40:	andeq	r0, r0, r7, lsl #5
   26e44:	strdeq	r1, [r4], -r0
   26e48:	andeq	r0, r0, fp, lsl #5
   26e4c:	andeq	r1, r4, ip, asr #12

00026e50 <flatcc_builder_start_buffer@@Base>:
   26e50:	push	{r4, r5, r6, r7, r8, lr}
   26e54:	mov	r4, r0
   26e58:	mov	r5, r1
   26e5c:	mov	r7, r2
   26e60:	mov	r6, r3
   26e64:	ldrh	r1, [r0, #128]	; 0x80
   26e68:	bl	2613c <flatcc_builder_default_alloc@@Base+0x22c>
   26e6c:	cmp	r0, #0
   26e70:	bne	26efc <flatcc_builder_start_buffer@@Base+0xac>
   26e74:	mov	r3, #1
   26e78:	strh	r3, [r4, #128]	; 0x80
   26e7c:	ldr	r3, [r4, #32]
   26e80:	ldrh	r2, [r4, #132]	; 0x84
   26e84:	strh	r2, [r3, #34]	; 0x22
   26e88:	strh	r7, [r4, #132]	; 0x84
   26e8c:	ldr	r3, [r4, #32]
   26e90:	ldrh	r2, [r4, #164]	; 0xa4
   26e94:	strh	r2, [r3, #32]
   26e98:	strh	r6, [r4, #164]	; 0xa4
   26e9c:	ldr	r3, [r4, #32]
   26ea0:	ldr	r2, [r4, #144]	; 0x90
   26ea4:	str	r2, [r3, #20]
   26ea8:	ldr	r3, [r4, #32]
   26eac:	ldr	r2, [r4, #152]	; 0x98
   26eb0:	str	r2, [r3, #28]
   26eb4:	ldr	r3, [r4, #136]	; 0x88
   26eb8:	str	r3, [r4, #144]	; 0x90
   26ebc:	ldr	r3, [r4, #148]	; 0x94
   26ec0:	add	r2, r3, #1
   26ec4:	str	r2, [r4, #148]	; 0x94
   26ec8:	str	r3, [r4, #152]	; 0x98
   26ecc:	ldr	r3, [r4, #32]
   26ed0:	ldr	r2, [r4, #168]	; 0xa8
   26ed4:	str	r2, [r3, #16]
   26ed8:	ldr	r3, [pc, #36]	; 26f04 <flatcc_builder_start_buffer@@Base+0xb4>
   26edc:	cmp	r5, #0
   26ee0:	moveq	r5, r3
   26ee4:	ldr	r3, [r5]
   26ee8:	str	r3, [r4, #168]	; 0xa8
   26eec:	ldr	r3, [r4, #32]
   26ef0:	mov	r2, #1
   26ef4:	strh	r2, [r3, #14]
   26ef8:	pop	{r4, r5, r6, r7, r8, pc}
   26efc:	mvn	r0, #0
   26f00:	pop	{r4, r5, r6, r7, r8, pc}
   26f04:	andeq	r1, r4, ip, asr #12

00026f08 <flatcc_builder_end_buffer@@Base>:
   26f08:	push	{r4, r5, lr}
   26f0c:	sub	sp, sp, #12
   26f10:	mov	r4, r0
   26f14:	ldrh	r2, [r0, #164]	; 0xa4
   26f18:	and	r2, r2, #2
   26f1c:	ldr	r0, [r0, #152]	; 0x98
   26f20:	cmp	r0, #0
   26f24:	moveq	r0, r2
   26f28:	orrne	r0, r2, #1
   26f2c:	ldr	r2, [r4, #32]
   26f30:	ldrh	r2, [r2, #14]
   26f34:	cmp	r2, #1
   26f38:	bne	26f7c <flatcc_builder_end_buffer@@Base+0x74>
   26f3c:	ldrh	r2, [r4, #132]	; 0x84
   26f40:	ldrh	r3, [r4, #128]	; 0x80
   26f44:	cmp	r3, r2
   26f48:	strhcc	r2, [r4, #128]	; 0x80
   26f4c:	str	r0, [sp, #4]
   26f50:	ldrh	r3, [r4, #128]	; 0x80
   26f54:	str	r3, [sp]
   26f58:	mov	r3, r1
   26f5c:	add	r1, r4, #168	; 0xa8
   26f60:	mov	r0, r4
   26f64:	bl	26ad8 <flatcc_builder_create_buffer@@Base>
   26f68:	subs	r5, r0, #0
   26f6c:	bne	26f90 <flatcc_builder_end_buffer@@Base+0x88>
   26f70:	mov	r0, r5
   26f74:	add	sp, sp, #12
   26f78:	pop	{r4, r5, pc}
   26f7c:	ldr	r3, [pc, #176]	; 27034 <flatcc_builder_end_buffer@@Base+0x12c>
   26f80:	ldr	r2, [pc, #176]	; 27038 <flatcc_builder_end_buffer@@Base+0x130>
   26f84:	ldr	r1, [pc, #176]	; 2703c <flatcc_builder_end_buffer@@Base+0x134>
   26f88:	ldr	r0, [pc, #176]	; 27040 <flatcc_builder_end_buffer@@Base+0x138>
   26f8c:	bl	14618 <__assert_fail@plt>
   26f90:	ldr	r3, [r4, #32]
   26f94:	ldr	r2, [r3, #20]
   26f98:	str	r2, [r4, #144]	; 0x90
   26f9c:	ldr	r2, [r3, #28]
   26fa0:	str	r2, [r4, #152]	; 0x98
   26fa4:	ldr	r2, [r3, #16]
   26fa8:	str	r2, [r4, #168]	; 0xa8
   26fac:	ldrh	r3, [r3, #32]
   26fb0:	strh	r3, [r4, #164]	; 0xa4
   26fb4:	ldr	r2, [r4, #20]
   26fb8:	mov	r1, #0
   26fbc:	ldr	r0, [r4, #16]
   26fc0:	bl	145c4 <memset@plt>
   26fc4:	ldr	r2, [r4, #32]
   26fc8:	ldr	r3, [r2, #8]
   26fcc:	str	r3, [r4, #20]
   26fd0:	ldr	r0, [r2]
   26fd4:	str	r0, [r4, #28]
   26fd8:	ldr	r1, [r2, #4]
   26fdc:	ldr	r3, [r4, #60]	; 0x3c
   26fe0:	add	r3, r3, r0
   26fe4:	str	r3, [r4, #16]
   26fe8:	ldr	r3, [r4, #64]	; 0x40
   26fec:	sub	r3, r3, r0
   26ff0:	cmp	r3, r1
   26ff4:	movcs	r3, r1
   26ff8:	str	r3, [r4, #24]
   26ffc:	str	r1, [r2, #4]
   27000:	ldrh	r3, [r4, #130]	; 0x82
   27004:	ldrh	r2, [r4, #128]	; 0x80
   27008:	cmp	r2, r3
   2700c:	strhcc	r3, [r4, #128]	; 0x80
   27010:	ldr	r3, [r4, #32]
   27014:	ldrh	r2, [r3, #12]
   27018:	strh	r2, [r4, #130]	; 0x82
   2701c:	sub	r3, r3, #36	; 0x24
   27020:	str	r3, [r4, #32]
   27024:	ldr	r3, [r4, #156]	; 0x9c
   27028:	sub	r3, r3, #1
   2702c:	str	r3, [r4, #156]	; 0x9c
   27030:	b	26f70 <flatcc_builder_end_buffer@@Base+0x68>
   27034:	andeq	r1, r4, r4, asr #18
   27038:	andeq	r0, r0, r6, asr #6
   2703c:	muleq	r4, ip, sp
   27040:	andeq	r1, r4, r0, ror #28

00027044 <flatcc_builder_start_struct@@Base>:
   27044:	push	{r4, r5, r6, lr}
   27048:	mov	r4, r0
   2704c:	mov	r5, r1
   27050:	mov	r1, r2
   27054:	bl	2613c <flatcc_builder_default_alloc@@Base+0x22c>
   27058:	cmp	r0, #0
   2705c:	bne	270dc <flatcc_builder_start_struct@@Base+0x98>
   27060:	ldr	r3, [r4, #32]
   27064:	mov	r2, #2
   27068:	strh	r2, [r3, #14]
   2706c:	ldr	r1, [r4, #28]
   27070:	ldr	r2, [r4, #60]	; 0x3c
   27074:	add	r2, r2, r1
   27078:	str	r2, [r4, #16]
   2707c:	ldr	r3, [r4, #64]	; 0x40
   27080:	sub	r3, r3, r1
   27084:	cmn	r3, #4
   27088:	mvnhi	r3, #3
   2708c:	str	r3, [r4, #24]
   27090:	ldr	r3, [r4, #32]
   27094:	mvn	r2, #3
   27098:	str	r2, [r3, #4]
   2709c:	ldr	r6, [r4, #20]
   270a0:	add	r5, r5, r6
   270a4:	str	r5, [r4, #20]
   270a8:	ldr	r3, [r4, #24]
   270ac:	cmp	r5, r3
   270b0:	bcs	270c0 <flatcc_builder_start_struct@@Base+0x7c>
   270b4:	ldr	r0, [r4, #16]
   270b8:	add	r0, r0, r6
   270bc:	pop	{r4, r5, r6, pc}
   270c0:	add	r1, r5, #1
   270c4:	mov	r0, r4
   270c8:	bl	25e9c <main@@Base+0xd94>
   270cc:	cmp	r0, #0
   270d0:	beq	270b4 <flatcc_builder_start_struct@@Base+0x70>
   270d4:	mov	r0, #0
   270d8:	pop	{r4, r5, r6, pc}
   270dc:	mov	r0, #0
   270e0:	pop	{r4, r5, r6, pc}

000270e4 <flatcc_builder_struct_edit@@Base>:
   270e4:	ldr	r0, [r0, #16]
   270e8:	bx	lr

000270ec <flatcc_builder_end_struct@@Base>:
   270ec:	push	{r4, r5, r6, lr}
   270f0:	ldr	r3, [r0, #32]
   270f4:	ldrh	r3, [r3, #14]
   270f8:	cmp	r3, #2
   270fc:	bne	27124 <flatcc_builder_end_struct@@Base+0x38>
   27100:	mov	r4, r0
   27104:	ldrh	r3, [r0, #130]	; 0x82
   27108:	ldr	r2, [r0, #20]
   2710c:	ldr	r1, [r0, #16]
   27110:	bl	26d14 <flatcc_builder_create_struct@@Base>
   27114:	subs	r5, r0, #0
   27118:	bne	27138 <flatcc_builder_end_struct@@Base+0x4c>
   2711c:	mov	r0, r5
   27120:	pop	{r4, r5, r6, pc}
   27124:	ldr	r3, [pc, #140]	; 271b8 <flatcc_builder_end_struct@@Base+0xcc>
   27128:	mov	r2, #872	; 0x368
   2712c:	ldr	r1, [pc, #136]	; 271bc <flatcc_builder_end_struct@@Base+0xd0>
   27130:	ldr	r0, [pc, #136]	; 271c0 <flatcc_builder_end_struct@@Base+0xd4>
   27134:	bl	14618 <__assert_fail@plt>
   27138:	ldr	r2, [r4, #20]
   2713c:	mov	r1, #0
   27140:	ldr	r0, [r4, #16]
   27144:	bl	145c4 <memset@plt>
   27148:	ldr	r2, [r4, #32]
   2714c:	ldr	r3, [r2, #8]
   27150:	str	r3, [r4, #20]
   27154:	ldr	r0, [r2]
   27158:	str	r0, [r4, #28]
   2715c:	ldr	r1, [r2, #4]
   27160:	ldr	r3, [r4, #60]	; 0x3c
   27164:	add	r3, r3, r0
   27168:	str	r3, [r4, #16]
   2716c:	ldr	r3, [r4, #64]	; 0x40
   27170:	sub	r3, r3, r0
   27174:	cmp	r3, r1
   27178:	movcs	r3, r1
   2717c:	str	r3, [r4, #24]
   27180:	str	r1, [r2, #4]
   27184:	ldrh	r3, [r4, #130]	; 0x82
   27188:	ldrh	r2, [r4, #128]	; 0x80
   2718c:	cmp	r2, r3
   27190:	strhcc	r3, [r4, #128]	; 0x80
   27194:	ldr	r3, [r4, #32]
   27198:	ldrh	r2, [r3, #12]
   2719c:	strh	r2, [r4, #130]	; 0x82
   271a0:	sub	r3, r3, #36	; 0x24
   271a4:	str	r3, [r4, #32]
   271a8:	ldr	r3, [r4, #156]	; 0x9c
   271ac:	sub	r3, r3, #1
   271b0:	str	r3, [r4, #156]	; 0x9c
   271b4:	b	2711c <flatcc_builder_end_struct@@Base+0x30>
   271b8:	andeq	r1, r4, r0, ror #18
   271bc:	muleq	r4, ip, sp
   271c0:	andeq	r1, r4, ip, lsl #29

000271c4 <flatcc_builder_extend_vector@@Base>:
   271c4:	push	{r4, r5, r6, lr}
   271c8:	mov	r4, r0
   271cc:	ldr	r2, [r0, #32]
   271d0:	ldr	r3, [r2, #20]
   271d4:	add	r0, r1, r3
   271d8:	ldr	ip, [r2, #24]
   271dc:	cmp	r3, r0
   271e0:	movls	r3, #0
   271e4:	movhi	r3, #1
   271e8:	cmp	ip, r0
   271ec:	orrcc	r3, r3, #1
   271f0:	cmp	r3, #0
   271f4:	bne	27228 <flatcc_builder_extend_vector@@Base+0x64>
   271f8:	str	r0, [r2, #20]
   271fc:	ldr	r5, [r4, #20]
   27200:	ldr	r3, [r4, #32]
   27204:	ldr	r3, [r3, #16]
   27208:	mla	r1, r3, r1, r5
   2720c:	str	r1, [r4, #20]
   27210:	ldr	r3, [r4, #24]
   27214:	cmp	r1, r3
   27218:	bcs	2723c <flatcc_builder_extend_vector@@Base+0x78>
   2721c:	ldr	r0, [r4, #16]
   27220:	add	r0, r0, r5
   27224:	pop	{r4, r5, r6, pc}
   27228:	ldr	r3, [pc, #44]	; 2725c <flatcc_builder_extend_vector@@Base+0x98>
   2722c:	mov	r2, #892	; 0x37c
   27230:	ldr	r1, [pc, #40]	; 27260 <flatcc_builder_extend_vector@@Base+0x9c>
   27234:	ldr	r0, [pc, #40]	; 27264 <flatcc_builder_extend_vector@@Base+0xa0>
   27238:	bl	14618 <__assert_fail@plt>
   2723c:	mvn	r2, #3
   27240:	add	r1, r1, #1
   27244:	mov	r0, r4
   27248:	bl	25e9c <main@@Base+0xd94>
   2724c:	cmp	r0, #0
   27250:	beq	2721c <flatcc_builder_extend_vector@@Base+0x58>
   27254:	mov	r0, #0
   27258:	pop	{r4, r5, r6, pc}
   2725c:	andeq	r1, r4, ip, ror r9
   27260:	muleq	r4, ip, sp
   27264:			; <UNDEFINED> instruction: 0x00041eb8

00027268 <flatcc_builder_vector_push@@Base>:
   27268:	push	{r4, r5, r6, r7, r8, lr}
   2726c:	ldr	r3, [r0, #32]
   27270:	ldrh	r2, [r3, #14]
   27274:	cmp	r2, #4
   27278:	bne	272e0 <flatcc_builder_vector_push@@Base+0x78>
   2727c:	mov	r4, r0
   27280:	mov	r6, r1
   27284:	ldr	r2, [r3, #20]
   27288:	ldr	r1, [r3, #24]
   2728c:	cmp	r2, r1
   27290:	bhi	272f4 <flatcc_builder_vector_push@@Base+0x8c>
   27294:	add	r2, r2, #1
   27298:	str	r2, [r3, #20]
   2729c:	ldr	r3, [r0, #32]
   272a0:	ldr	r7, [r3, #16]
   272a4:	ldr	r5, [r0, #20]
   272a8:	add	r1, r7, r5
   272ac:	str	r1, [r0, #20]
   272b0:	ldr	r3, [r0, #24]
   272b4:	cmp	r1, r3
   272b8:	bcs	27308 <flatcc_builder_vector_push@@Base+0xa0>
   272bc:	ldr	r4, [r4, #16]
   272c0:	adds	r4, r4, r5
   272c4:	beq	272d8 <flatcc_builder_vector_push@@Base+0x70>
   272c8:	mov	r2, r7
   272cc:	mov	r1, r6
   272d0:	mov	r0, r4
   272d4:	bl	1454c <memcpy@plt>
   272d8:	mov	r0, r4
   272dc:	pop	{r4, r5, r6, r7, r8, pc}
   272e0:	ldr	r3, [pc, #60]	; 27324 <flatcc_builder_vector_push@@Base+0xbc>
   272e4:	ldr	r2, [pc, #60]	; 27328 <flatcc_builder_vector_push@@Base+0xc0>
   272e8:	ldr	r1, [pc, #60]	; 2732c <flatcc_builder_vector_push@@Base+0xc4>
   272ec:	ldr	r0, [pc, #60]	; 27330 <flatcc_builder_vector_push@@Base+0xc8>
   272f0:	bl	14618 <__assert_fail@plt>
   272f4:	ldr	r3, [pc, #40]	; 27324 <flatcc_builder_vector_push@@Base+0xbc>
   272f8:	mov	r2, #908	; 0x38c
   272fc:	ldr	r1, [pc, #40]	; 2732c <flatcc_builder_vector_push@@Base+0xc4>
   27300:	ldr	r0, [pc, #44]	; 27334 <flatcc_builder_vector_push@@Base+0xcc>
   27304:	bl	14618 <__assert_fail@plt>
   27308:	mvn	r2, #3
   2730c:	add	r1, r1, #1
   27310:	bl	25e9c <main@@Base+0xd94>
   27314:	cmp	r0, #0
   27318:	beq	272bc <flatcc_builder_vector_push@@Base+0x54>
   2731c:	mov	r4, #0
   27320:	b	272d8 <flatcc_builder_vector_push@@Base+0x70>
   27324:	muleq	r4, r0, r9
   27328:	andeq	r0, r0, fp, lsl #7
   2732c:	muleq	r4, ip, sp
   27330:	ldrdeq	r1, [r4], -r4
   27334:	andeq	r1, r4, r0, lsl #30

00027338 <flatcc_builder_append_vector@@Base>:
   27338:	push	{r4, r5, r6, r7, r8, lr}
   2733c:	mov	r5, r1
   27340:	ldr	r1, [r0, #32]
   27344:	ldrh	r3, [r1, #14]
   27348:	cmp	r3, #4
   2734c:	bne	273c8 <flatcc_builder_append_vector@@Base+0x90>
   27350:	mov	r4, r0
   27354:	ldr	r3, [r1, #20]
   27358:	add	r0, r2, r3
   2735c:	ldr	ip, [r1, #24]
   27360:	cmp	r3, r0
   27364:	movls	r3, #0
   27368:	movhi	r3, #1
   2736c:	cmp	ip, r0
   27370:	orrcc	r3, r3, #1
   27374:	cmp	r3, #0
   27378:	bne	273dc <flatcc_builder_append_vector@@Base+0xa4>
   2737c:	str	r0, [r1, #20]
   27380:	ldr	r3, [r4, #32]
   27384:	ldr	r6, [r3, #16]
   27388:	mul	r6, r6, r2
   2738c:	ldr	r7, [r4, #20]
   27390:	add	r1, r6, r7
   27394:	str	r1, [r4, #20]
   27398:	ldr	r3, [r4, #24]
   2739c:	cmp	r1, r3
   273a0:	bcs	273f0 <flatcc_builder_append_vector@@Base+0xb8>
   273a4:	ldr	r4, [r4, #16]
   273a8:	adds	r4, r4, r7
   273ac:	beq	273c0 <flatcc_builder_append_vector@@Base+0x88>
   273b0:	mov	r2, r6
   273b4:	mov	r1, r5
   273b8:	mov	r0, r4
   273bc:	bl	1454c <memcpy@plt>
   273c0:	mov	r0, r4
   273c4:	pop	{r4, r5, r6, r7, r8, pc}
   273c8:	ldr	r3, [pc, #64]	; 27410 <flatcc_builder_append_vector@@Base+0xd8>
   273cc:	ldr	r2, [pc, #64]	; 27414 <flatcc_builder_append_vector@@Base+0xdc>
   273d0:	ldr	r1, [pc, #64]	; 27418 <flatcc_builder_append_vector@@Base+0xe0>
   273d4:	ldr	r0, [pc, #64]	; 2741c <flatcc_builder_append_vector@@Base+0xe4>
   273d8:	bl	14618 <__assert_fail@plt>
   273dc:	ldr	r3, [pc, #60]	; 27420 <flatcc_builder_append_vector@@Base+0xe8>
   273e0:	mov	r2, #892	; 0x37c
   273e4:	ldr	r1, [pc, #44]	; 27418 <flatcc_builder_append_vector@@Base+0xe0>
   273e8:	ldr	r0, [pc, #52]	; 27424 <flatcc_builder_append_vector@@Base+0xec>
   273ec:	bl	14618 <__assert_fail@plt>
   273f0:	mvn	r2, #3
   273f4:	add	r1, r1, #1
   273f8:	mov	r0, r4
   273fc:	bl	25e9c <main@@Base+0xd94>
   27400:	cmp	r0, #0
   27404:	beq	273a4 <flatcc_builder_append_vector@@Base+0x6c>
   27408:	mov	r4, #0
   2740c:	b	273c0 <flatcc_builder_append_vector@@Base+0x88>
   27410:	andeq	r1, r4, ip, lsr #19
   27414:	muleq	r0, r3, r3
   27418:	muleq	r4, ip, sp
   2741c:	ldrdeq	r1, [r4], -r4
   27420:	andeq	r1, r4, ip, ror r9
   27424:			; <UNDEFINED> instruction: 0x00041eb8

00027428 <flatcc_builder_extend_offset_vector@@Base>:
   27428:	push	{r4, r5, r6, lr}
   2742c:	mov	r4, r0
   27430:	ldr	r2, [r0, #32]
   27434:	ldr	r3, [r2, #20]
   27438:	adds	r3, r1, r3
   2743c:	movcs	ip, #1
   27440:	movcc	ip, #0
   27444:	cmn	r3, #-1073741823	; 0xc0000001
   27448:	movls	r0, #0
   2744c:	movhi	r0, #1
   27450:	orrs	r0, ip, r0
   27454:	bne	27480 <flatcc_builder_extend_offset_vector@@Base+0x58>
   27458:	str	r3, [r2, #20]
   2745c:	ldr	r5, [r4, #20]
   27460:	add	r1, r5, r1, lsl #2
   27464:	str	r1, [r4, #20]
   27468:	ldr	r3, [r4, #24]
   2746c:	cmp	r1, r3
   27470:	bcs	27494 <flatcc_builder_extend_offset_vector@@Base+0x6c>
   27474:	ldr	r0, [r4, #16]
   27478:	add	r0, r0, r5
   2747c:	pop	{r4, r5, r6, pc}
   27480:	ldr	r3, [pc, #44]	; 274b4 <flatcc_builder_extend_offset_vector@@Base+0x8c>
   27484:	mov	r2, #892	; 0x37c
   27488:	ldr	r1, [pc, #40]	; 274b8 <flatcc_builder_extend_offset_vector@@Base+0x90>
   2748c:	ldr	r0, [pc, #40]	; 274bc <flatcc_builder_extend_offset_vector@@Base+0x94>
   27490:	bl	14618 <__assert_fail@plt>
   27494:	mvn	r2, #3
   27498:	add	r1, r1, #1
   2749c:	mov	r0, r4
   274a0:	bl	25e9c <main@@Base+0xd94>
   274a4:	cmp	r0, #0
   274a8:	beq	27474 <flatcc_builder_extend_offset_vector@@Base+0x4c>
   274ac:	mov	r0, #0
   274b0:	pop	{r4, r5, r6, pc}
   274b4:	andeq	r1, r4, ip, ror r9
   274b8:	muleq	r4, ip, sp
   274bc:			; <UNDEFINED> instruction: 0x00041eb8

000274c0 <flatcc_builder_offset_vector_push@@Base>:
   274c0:	push	{r4, r5, r6, lr}
   274c4:	ldr	r2, [r0, #32]
   274c8:	ldrh	r3, [r2, #14]
   274cc:	cmp	r3, #5
   274d0:	bne	27518 <flatcc_builder_offset_vector_push@@Base+0x58>
   274d4:	mov	r4, r0
   274d8:	mov	r6, r1
   274dc:	ldr	r3, [r2, #20]
   274e0:	cmn	r3, #-1073741823	; 0xc0000001
   274e4:	beq	27548 <flatcc_builder_offset_vector_push@@Base+0x88>
   274e8:	add	r3, r3, #1
   274ec:	str	r3, [r2, #20]
   274f0:	ldr	r5, [r0, #20]
   274f4:	add	r3, r5, #4
   274f8:	str	r3, [r0, #20]
   274fc:	ldr	r2, [r0, #24]
   27500:	cmp	r3, r2
   27504:	bcs	2752c <flatcc_builder_offset_vector_push@@Base+0x6c>
   27508:	ldr	r3, [r4, #16]
   2750c:	adds	r0, r3, r5
   27510:	strne	r6, [r3, r5]
   27514:	pop	{r4, r5, r6, pc}
   27518:	ldr	r3, [pc, #48]	; 27550 <flatcc_builder_offset_vector_push@@Base+0x90>
   2751c:	ldr	r2, [pc, #48]	; 27554 <flatcc_builder_offset_vector_push@@Base+0x94>
   27520:	ldr	r1, [pc, #48]	; 27558 <flatcc_builder_offset_vector_push@@Base+0x98>
   27524:	ldr	r0, [pc, #48]	; 2755c <flatcc_builder_offset_vector_push@@Base+0x9c>
   27528:	bl	14618 <__assert_fail@plt>
   2752c:	mvn	r2, #3
   27530:	add	r1, r5, #5
   27534:	bl	25e9c <main@@Base+0xd94>
   27538:	cmp	r0, #0
   2753c:	beq	27508 <flatcc_builder_offset_vector_push@@Base+0x48>
   27540:	mov	r0, #0
   27544:	pop	{r4, r5, r6, pc}
   27548:	mov	r0, #0
   2754c:	pop	{r4, r5, r6, pc}
   27550:	andeq	r1, r4, ip, asr #19
   27554:	andeq	r0, r0, r6, lsr #7
   27558:	muleq	r4, ip, sp
   2755c:	andeq	r1, r4, r0, asr #30

00027560 <flatcc_builder_append_offset_vector@@Base>:
   27560:	push	{r4, r5, r6, r7, r8, lr}
   27564:	mov	r6, r1
   27568:	ldr	r1, [r0, #32]
   2756c:	ldrh	r3, [r1, #14]
   27570:	cmp	r3, #5
   27574:	bne	275e4 <flatcc_builder_append_offset_vector@@Base+0x84>
   27578:	mov	r5, r0
   2757c:	ldr	r3, [r1, #20]
   27580:	adds	r3, r2, r3
   27584:	movcs	ip, #1
   27588:	movcc	ip, #0
   2758c:	cmn	r3, #-1073741823	; 0xc0000001
   27590:	movls	r0, #0
   27594:	movhi	r0, #1
   27598:	orrs	r0, ip, r0
   2759c:	bne	275f8 <flatcc_builder_append_offset_vector@@Base+0x98>
   275a0:	str	r3, [r1, #20]
   275a4:	lsl	r4, r2, #2
   275a8:	ldr	r7, [r5, #20]
   275ac:	add	r1, r4, r7
   275b0:	str	r1, [r5, #20]
   275b4:	ldr	r3, [r5, #24]
   275b8:	cmp	r1, r3
   275bc:	bcs	2760c <flatcc_builder_append_offset_vector@@Base+0xac>
   275c0:	ldr	r5, [r5, #16]
   275c4:	adds	r5, r5, r7
   275c8:	beq	275dc <flatcc_builder_append_offset_vector@@Base+0x7c>
   275cc:	mov	r2, r4
   275d0:	mov	r1, r6
   275d4:	mov	r0, r5
   275d8:	bl	1454c <memcpy@plt>
   275dc:	mov	r0, r5
   275e0:	pop	{r4, r5, r6, r7, r8, pc}
   275e4:	ldr	r3, [pc, #64]	; 2762c <flatcc_builder_append_offset_vector@@Base+0xcc>
   275e8:	mov	r2, #948	; 0x3b4
   275ec:	ldr	r1, [pc, #60]	; 27630 <flatcc_builder_append_offset_vector@@Base+0xd0>
   275f0:	ldr	r0, [pc, #60]	; 27634 <flatcc_builder_append_offset_vector@@Base+0xd4>
   275f4:	bl	14618 <__assert_fail@plt>
   275f8:	ldr	r3, [pc, #56]	; 27638 <flatcc_builder_append_offset_vector@@Base+0xd8>
   275fc:	mov	r2, #892	; 0x37c
   27600:	ldr	r1, [pc, #40]	; 27630 <flatcc_builder_append_offset_vector@@Base+0xd0>
   27604:	ldr	r0, [pc, #48]	; 2763c <flatcc_builder_append_offset_vector@@Base+0xdc>
   27608:	bl	14618 <__assert_fail@plt>
   2760c:	mvn	r2, #3
   27610:	add	r1, r1, #1
   27614:	mov	r0, r5
   27618:	bl	25e9c <main@@Base+0xd94>
   2761c:	cmp	r0, #0
   27620:	beq	275c0 <flatcc_builder_append_offset_vector@@Base+0x60>
   27624:	mov	r5, #0
   27628:	b	275dc <flatcc_builder_append_offset_vector@@Base+0x7c>
   2762c:	strdeq	r1, [r4], -r0
   27630:	muleq	r4, ip, sp
   27634:	andeq	r1, r4, r0, asr #30
   27638:	andeq	r1, r4, ip, ror r9
   2763c:			; <UNDEFINED> instruction: 0x00041eb8

00027640 <flatcc_builder_extend_string@@Base>:
   27640:	push	{r4, r5, r6, lr}
   27644:	ldr	r2, [r0, #32]
   27648:	ldrh	r3, [r2, #14]
   2764c:	cmp	r3, #6
   27650:	bne	2768c <flatcc_builder_extend_string@@Base+0x4c>
   27654:	mov	r4, r0
   27658:	ldr	r3, [r2, #20]
   2765c:	adds	r3, r1, r3
   27660:	bcs	276a0 <flatcc_builder_extend_string@@Base+0x60>
   27664:	str	r3, [r2, #20]
   27668:	ldr	r5, [r0, #20]
   2766c:	add	r1, r1, r5
   27670:	str	r1, [r0, #20]
   27674:	ldr	r3, [r0, #24]
   27678:	cmp	r1, r3
   2767c:	bcs	276b4 <flatcc_builder_extend_string@@Base+0x74>
   27680:	ldr	r0, [r4, #16]
   27684:	add	r0, r0, r5
   27688:	pop	{r4, r5, r6, pc}
   2768c:	ldr	r3, [pc, #60]	; 276d0 <flatcc_builder_extend_string@@Base+0x90>
   27690:	ldr	r2, [pc, #60]	; 276d4 <flatcc_builder_extend_string@@Base+0x94>
   27694:	ldr	r1, [pc, #60]	; 276d8 <flatcc_builder_extend_string@@Base+0x98>
   27698:	ldr	r0, [pc, #60]	; 276dc <flatcc_builder_extend_string@@Base+0x9c>
   2769c:	bl	14618 <__assert_fail@plt>
   276a0:	ldr	r3, [pc, #56]	; 276e0 <flatcc_builder_extend_string@@Base+0xa0>
   276a4:	mov	r2, #892	; 0x37c
   276a8:	ldr	r1, [pc, #40]	; 276d8 <flatcc_builder_extend_string@@Base+0x98>
   276ac:	ldr	r0, [pc, #48]	; 276e4 <flatcc_builder_extend_string@@Base+0xa4>
   276b0:	bl	14618 <__assert_fail@plt>
   276b4:	mvn	r2, #3
   276b8:	add	r1, r1, #1
   276bc:	bl	25e9c <main@@Base+0xd94>
   276c0:	cmp	r0, #0
   276c4:	beq	27680 <flatcc_builder_extend_string@@Base+0x40>
   276c8:	mov	r0, #0
   276cc:	pop	{r4, r5, r6, pc}
   276d0:	andeq	r1, r4, r4, lsl sl
   276d4:			; <UNDEFINED> instruction: 0x000003bd
   276d8:	muleq	r4, ip, sp
   276dc:	andeq	r1, r4, r4, ror pc
   276e0:	andeq	r1, r4, ip, ror r9
   276e4:			; <UNDEFINED> instruction: 0x00041eb8

000276e8 <flatcc_builder_append_string@@Base>:
   276e8:	push	{r4, r5, r6, r7, r8, lr}
   276ec:	mov	r5, r2
   276f0:	ldr	r2, [r0, #32]
   276f4:	ldrh	r3, [r2, #14]
   276f8:	cmp	r3, #6
   276fc:	bne	27754 <flatcc_builder_append_string@@Base+0x6c>
   27700:	mov	r4, r0
   27704:	mov	r6, r1
   27708:	ldr	r3, [r2, #20]
   2770c:	adds	r3, r5, r3
   27710:	bcs	27768 <flatcc_builder_append_string@@Base+0x80>
   27714:	str	r3, [r2, #20]
   27718:	ldr	r7, [r0, #20]
   2771c:	add	r1, r5, r7
   27720:	str	r1, [r0, #20]
   27724:	ldr	r3, [r0, #24]
   27728:	cmp	r1, r3
   2772c:	bcs	2777c <flatcc_builder_append_string@@Base+0x94>
   27730:	ldr	r4, [r4, #16]
   27734:	adds	r4, r4, r7
   27738:	beq	2774c <flatcc_builder_append_string@@Base+0x64>
   2773c:	mov	r2, r5
   27740:	mov	r1, r6
   27744:	mov	r0, r4
   27748:	bl	1454c <memcpy@plt>
   2774c:	mov	r0, r4
   27750:	pop	{r4, r5, r6, r7, r8, pc}
   27754:	ldr	r3, [pc, #60]	; 27798 <flatcc_builder_append_string@@Base+0xb0>
   27758:	ldr	r2, [pc, #60]	; 2779c <flatcc_builder_append_string@@Base+0xb4>
   2775c:	ldr	r1, [pc, #60]	; 277a0 <flatcc_builder_append_string@@Base+0xb8>
   27760:	ldr	r0, [pc, #60]	; 277a4 <flatcc_builder_append_string@@Base+0xbc>
   27764:	bl	14618 <__assert_fail@plt>
   27768:	ldr	r3, [pc, #56]	; 277a8 <flatcc_builder_append_string@@Base+0xc0>
   2776c:	mov	r2, #892	; 0x37c
   27770:	ldr	r1, [pc, #40]	; 277a0 <flatcc_builder_append_string@@Base+0xb8>
   27774:	ldr	r0, [pc, #48]	; 277ac <flatcc_builder_append_string@@Base+0xc4>
   27778:	bl	14618 <__assert_fail@plt>
   2777c:	mvn	r2, #3
   27780:	add	r1, r1, #1
   27784:	bl	25e9c <main@@Base+0xd94>
   27788:	cmp	r0, #0
   2778c:	beq	27730 <flatcc_builder_append_string@@Base+0x48>
   27790:	mov	r4, #0
   27794:	b	2774c <flatcc_builder_append_string@@Base+0x64>
   27798:	andeq	r1, r4, r4, lsr sl
   2779c:	andeq	r0, r0, r6, asr #7
   277a0:	muleq	r4, ip, sp
   277a4:	andeq	r1, r4, r4, ror pc
   277a8:	andeq	r1, r4, ip, ror r9
   277ac:			; <UNDEFINED> instruction: 0x00041eb8

000277b0 <flatcc_builder_append_string_str@@Base>:
   277b0:	push	{r4, r5, r6, lr}
   277b4:	mov	r5, r0
   277b8:	mov	r4, r1
   277bc:	mov	r0, r1
   277c0:	bl	145a0 <strlen@plt>
   277c4:	mov	r2, r0
   277c8:	mov	r1, r4
   277cc:	mov	r0, r5
   277d0:	bl	276e8 <flatcc_builder_append_string@@Base>
   277d4:	pop	{r4, r5, r6, pc}

000277d8 <flatcc_builder_append_string_strn@@Base>:
   277d8:	push	{r4, r5, r6, lr}
   277dc:	mov	r6, r0
   277e0:	mov	r4, r1
   277e4:	mov	r5, r2
   277e8:	mov	r1, #0
   277ec:	mov	r0, r4
   277f0:	bl	145e8 <memchr@plt>
   277f4:	cmp	r0, #0
   277f8:	subne	r5, r0, r4
   277fc:	mov	r2, r5
   27800:	mov	r1, r4
   27804:	mov	r0, r6
   27808:	bl	276e8 <flatcc_builder_append_string@@Base>
   2780c:	pop	{r4, r5, r6, pc}

00027810 <flatcc_builder_truncate_vector@@Base>:
   27810:	push	{r4, lr}
   27814:	ldr	ip, [r0, #32]
   27818:	ldrh	r3, [ip, #14]
   2781c:	cmp	r3, #4
   27820:	bne	27868 <flatcc_builder_truncate_vector@@Base+0x58>
   27824:	ldr	r3, [ip, #20]
   27828:	cmp	r3, r1
   2782c:	bcc	2787c <flatcc_builder_truncate_vector@@Base+0x6c>
   27830:	sub	r3, r3, r1
   27834:	str	r3, [ip, #20]
   27838:	ldr	r3, [r0, #32]
   2783c:	ldr	r2, [r3, #16]
   27840:	mul	r2, r2, r1
   27844:	ldr	r3, [r0, #20]
   27848:	sub	r3, r3, r2
   2784c:	str	r3, [r0, #20]
   27850:	ldr	r0, [r0, #16]
   27854:	mov	r1, #0
   27858:	add	r0, r0, r3
   2785c:	bl	145c4 <memset@plt>
   27860:	mov	r0, #0
   27864:	pop	{r4, pc}
   27868:	ldr	r3, [pc, #32]	; 27890 <flatcc_builder_truncate_vector@@Base+0x80>
   2786c:	ldr	r2, [pc, #32]	; 27894 <flatcc_builder_truncate_vector@@Base+0x84>
   27870:	ldr	r1, [pc, #32]	; 27898 <flatcc_builder_truncate_vector@@Base+0x88>
   27874:	ldr	r0, [pc, #32]	; 2789c <flatcc_builder_truncate_vector@@Base+0x8c>
   27878:	bl	14618 <__assert_fail@plt>
   2787c:	ldr	r3, [pc, #12]	; 27890 <flatcc_builder_truncate_vector@@Base+0x80>
   27880:	ldr	r2, [pc, #24]	; 278a0 <flatcc_builder_truncate_vector@@Base+0x90>
   27884:	ldr	r1, [pc, #12]	; 27898 <flatcc_builder_truncate_vector@@Base+0x88>
   27888:	ldr	r0, [pc, #20]	; 278a4 <flatcc_builder_truncate_vector@@Base+0x94>
   2788c:	bl	14618 <__assert_fail@plt>
   27890:	andeq	r1, r4, r4, asr sl
   27894:	ldrdeq	r0, [r0], -r9
   27898:	muleq	r4, ip, sp
   2789c:	ldrdeq	r1, [r4], -r4
   278a0:	ldrdeq	r0, [r0], -sl
   278a4:	andeq	r1, r4, r0, lsr #31

000278a8 <flatcc_builder_truncate_offset_vector@@Base>:
   278a8:	push	{r4, lr}
   278ac:	ldr	ip, [r0, #32]
   278b0:	ldrh	r3, [ip, #14]
   278b4:	cmp	r3, #5
   278b8:	bne	27900 <flatcc_builder_truncate_offset_vector@@Base+0x58>
   278bc:	ldr	r3, [ip, #20]
   278c0:	cmp	r3, r1
   278c4:	bcc	27914 <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   278c8:	sub	r3, r3, r1
   278cc:	str	r3, [ip, #20]
   278d0:	ldr	r3, [r0, #32]
   278d4:	ldr	r2, [r3, #16]
   278d8:	mul	r2, r2, r1
   278dc:	ldr	r3, [r0, #20]
   278e0:	sub	r3, r3, r2
   278e4:	str	r3, [r0, #20]
   278e8:	ldr	r0, [r0, #16]
   278ec:	mov	r1, #0
   278f0:	add	r0, r0, r3
   278f4:	bl	145c4 <memset@plt>
   278f8:	mov	r0, #0
   278fc:	pop	{r4, pc}
   27900:	ldr	r3, [pc, #32]	; 27928 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   27904:	ldr	r2, [pc, #32]	; 2792c <flatcc_builder_truncate_offset_vector@@Base+0x84>
   27908:	ldr	r1, [pc, #32]	; 27930 <flatcc_builder_truncate_offset_vector@@Base+0x88>
   2790c:	ldr	r0, [pc, #32]	; 27934 <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   27910:	bl	14618 <__assert_fail@plt>
   27914:	ldr	r3, [pc, #12]	; 27928 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   27918:	ldr	r2, [pc, #24]	; 27938 <flatcc_builder_truncate_offset_vector@@Base+0x90>
   2791c:	ldr	r1, [pc, #12]	; 27930 <flatcc_builder_truncate_offset_vector@@Base+0x88>
   27920:	ldr	r0, [pc, #20]	; 2793c <flatcc_builder_truncate_offset_vector@@Base+0x94>
   27924:	bl	14618 <__assert_fail@plt>
   27928:	andeq	r1, r4, r4, ror sl
   2792c:	andeq	r0, r0, r2, ror #7
   27930:	muleq	r4, ip, sp
   27934:	andeq	r1, r4, r0, asr #30
   27938:	andeq	r0, r0, r3, ror #7
   2793c:	andeq	r1, r4, r4, asr #31

00027940 <flatcc_builder_truncate_string@@Base>:
   27940:	push	{r4, lr}
   27944:	ldr	r2, [r0, #32]
   27948:	ldrh	r3, [r2, #14]
   2794c:	cmp	r3, #6
   27950:	bne	27990 <flatcc_builder_truncate_string@@Base+0x50>
   27954:	ldr	r3, [r2, #20]
   27958:	cmp	r3, r1
   2795c:	bcc	279a4 <flatcc_builder_truncate_string@@Base+0x64>
   27960:	sub	r3, r3, r1
   27964:	str	r3, [r2, #20]
   27968:	ldr	r3, [r0, #20]
   2796c:	sub	r3, r3, r1
   27970:	str	r3, [r0, #20]
   27974:	ldr	r0, [r0, #16]
   27978:	mov	r2, r1
   2797c:	mov	r1, #0
   27980:	add	r0, r0, r3
   27984:	bl	145c4 <memset@plt>
   27988:	mov	r0, #0
   2798c:	pop	{r4, pc}
   27990:	ldr	r3, [pc, #32]	; 279b8 <flatcc_builder_truncate_string@@Base+0x78>
   27994:	ldr	r2, [pc, #32]	; 279bc <flatcc_builder_truncate_string@@Base+0x7c>
   27998:	ldr	r1, [pc, #32]	; 279c0 <flatcc_builder_truncate_string@@Base+0x80>
   2799c:	ldr	r0, [pc, #32]	; 279c4 <flatcc_builder_truncate_string@@Base+0x84>
   279a0:	bl	14618 <__assert_fail@plt>
   279a4:	ldr	r3, [pc, #12]	; 279b8 <flatcc_builder_truncate_string@@Base+0x78>
   279a8:	mov	r2, #1004	; 0x3ec
   279ac:	ldr	r1, [pc, #12]	; 279c0 <flatcc_builder_truncate_string@@Base+0x80>
   279b0:	ldr	r0, [pc, #16]	; 279c8 <flatcc_builder_truncate_string@@Base+0x88>
   279b4:	bl	14618 <__assert_fail@plt>
   279b8:	muleq	r4, ip, sl
   279bc:	andeq	r0, r0, fp, ror #7
   279c0:	muleq	r4, ip, sp
   279c4:	andeq	r1, r4, r4, ror pc
   279c8:	andeq	r2, r4, r0

000279cc <flatcc_builder_start_vector@@Base>:
   279cc:	push	{r4, r5, r6, lr}
   279d0:	mov	r4, r0
   279d4:	mov	r6, r1
   279d8:	mov	r5, r3
   279dc:	cmp	r2, #4
   279e0:	movcs	r1, r2
   279e4:	movcc	r1, #4
   279e8:	bl	2613c <flatcc_builder_default_alloc@@Base+0x22c>
   279ec:	cmp	r0, #0
   279f0:	bne	27a50 <flatcc_builder_start_vector@@Base+0x84>
   279f4:	ldr	r3, [r4, #32]
   279f8:	str	r6, [r3, #16]
   279fc:	ldr	r3, [r4, #32]
   27a00:	mov	r2, #0
   27a04:	str	r2, [r3, #20]
   27a08:	ldr	r3, [r4, #32]
   27a0c:	str	r5, [r3, #24]
   27a10:	ldr	r3, [r4, #32]
   27a14:	mov	r2, #4
   27a18:	strh	r2, [r3, #14]
   27a1c:	ldr	r1, [r4, #28]
   27a20:	ldr	r2, [r4, #60]	; 0x3c
   27a24:	add	r2, r2, r1
   27a28:	str	r2, [r4, #16]
   27a2c:	ldr	r3, [r4, #64]	; 0x40
   27a30:	sub	r3, r3, r1
   27a34:	cmn	r3, #4
   27a38:	mvnhi	r3, #3
   27a3c:	str	r3, [r4, #24]
   27a40:	ldr	r3, [r4, #32]
   27a44:	mvn	r2, #3
   27a48:	str	r2, [r3, #4]
   27a4c:	pop	{r4, r5, r6, pc}
   27a50:	mvn	r0, #0
   27a54:	pop	{r4, r5, r6, pc}

00027a58 <flatcc_builder_start_offset_vector@@Base>:
   27a58:	push	{r4, lr}
   27a5c:	mov	r4, r0
   27a60:	mov	r1, #4
   27a64:	bl	2613c <flatcc_builder_default_alloc@@Base+0x22c>
   27a68:	cmp	r0, #0
   27a6c:	bne	27ac8 <flatcc_builder_start_offset_vector@@Base+0x70>
   27a70:	ldr	r3, [r4, #32]
   27a74:	mov	r2, #4
   27a78:	str	r2, [r3, #16]
   27a7c:	ldr	r3, [r4, #32]
   27a80:	mov	r2, #0
   27a84:	str	r2, [r3, #20]
   27a88:	ldr	r3, [r4, #32]
   27a8c:	mov	r2, #5
   27a90:	strh	r2, [r3, #14]
   27a94:	ldr	r1, [r4, #28]
   27a98:	ldr	r2, [r4, #60]	; 0x3c
   27a9c:	add	r2, r2, r1
   27aa0:	str	r2, [r4, #16]
   27aa4:	ldr	r3, [r4, #64]	; 0x40
   27aa8:	sub	r3, r3, r1
   27aac:	cmn	r3, #4
   27ab0:	mvnhi	r3, #3
   27ab4:	str	r3, [r4, #24]
   27ab8:	ldr	r3, [r4, #32]
   27abc:	mvn	r2, #3
   27ac0:	str	r2, [r3, #4]
   27ac4:	pop	{r4, pc}
   27ac8:	mvn	r0, #0
   27acc:	pop	{r4, pc}

00027ad0 <flatcc_builder_start_string@@Base>:
   27ad0:	push	{r4, lr}
   27ad4:	mov	r4, r0
   27ad8:	mov	r1, #1
   27adc:	bl	2613c <flatcc_builder_default_alloc@@Base+0x22c>
   27ae0:	cmp	r0, #0
   27ae4:	bne	27b40 <flatcc_builder_start_string@@Base+0x70>
   27ae8:	ldr	r3, [r4, #32]
   27aec:	mov	r2, #1
   27af0:	str	r2, [r3, #16]
   27af4:	ldr	r3, [r4, #32]
   27af8:	mov	r2, #0
   27afc:	str	r2, [r3, #20]
   27b00:	ldr	r3, [r4, #32]
   27b04:	mov	r2, #6
   27b08:	strh	r2, [r3, #14]
   27b0c:	ldr	r1, [r4, #28]
   27b10:	ldr	r2, [r4, #60]	; 0x3c
   27b14:	add	r2, r2, r1
   27b18:	str	r2, [r4, #16]
   27b1c:	ldr	r3, [r4, #64]	; 0x40
   27b20:	sub	r3, r3, r1
   27b24:	cmn	r3, #4
   27b28:	mvnhi	r3, #3
   27b2c:	str	r3, [r4, #24]
   27b30:	ldr	r3, [r4, #32]
   27b34:	mvn	r2, #3
   27b38:	str	r2, [r3, #4]
   27b3c:	pop	{r4, pc}
   27b40:	mvn	r0, #0
   27b44:	pop	{r4, pc}

00027b48 <flatcc_builder_reserve_table@@Base>:
   27b48:	push	{r4, r5, r6, r7, lr}
   27b4c:	sub	sp, sp, #12
   27b50:	cmp	r1, #0
   27b54:	blt	27be0 <flatcc_builder_reserve_table@@Base+0x98>
   27b58:	mov	r5, r0
   27b5c:	ldr	r2, [r0, #32]
   27b60:	ldrh	r6, [r2, #28]
   27b64:	ldr	r3, [r2, #16]
   27b68:	add	r6, r3, r6, lsl #1
   27b6c:	add	r1, r1, #2
   27b70:	lsl	r4, r1, #1
   27b74:	add	r2, r6, r4
   27b78:	ldr	r3, [r0, #56]	; 0x38
   27b7c:	cmp	r2, r3
   27b80:	bhi	27bf4 <flatcc_builder_reserve_table@@Base+0xac>
   27b84:	ldr	r3, [r5, #52]	; 0x34
   27b88:	adds	r3, r3, r6
   27b8c:	moveq	r3, #0
   27b90:	streq	r3, [r5, #4]
   27b94:	mvneq	r0, #0
   27b98:	beq	27bd8 <flatcc_builder_reserve_table@@Base+0x90>
   27b9c:	add	r3, r3, #4
   27ba0:	str	r3, [r5, #4]
   27ba4:	ldr	r3, [r5, #32]
   27ba8:	ldr	r6, [r3, #20]
   27bac:	add	r2, r4, r6
   27bb0:	sub	r2, r2, #3
   27bb4:	ldr	r3, [r5, #80]	; 0x50
   27bb8:	cmp	r2, r3
   27bbc:	bhi	27c2c <flatcc_builder_reserve_table@@Base+0xe4>
   27bc0:	ldr	r0, [r5, #76]	; 0x4c
   27bc4:	add	r0, r0, r6
   27bc8:	str	r0, [r5]
   27bcc:	cmp	r0, #0
   27bd0:	movne	r0, #0
   27bd4:	mvneq	r0, #0
   27bd8:	add	sp, sp, #12
   27bdc:	pop	{r4, r5, r6, r7, pc}
   27be0:	ldr	r3, [pc, #124]	; 27c64 <flatcc_builder_reserve_table@@Base+0x11c>
   27be4:	ldr	r2, [pc, #124]	; 27c68 <flatcc_builder_reserve_table@@Base+0x120>
   27be8:	ldr	r1, [pc, #124]	; 27c6c <flatcc_builder_reserve_table@@Base+0x124>
   27bec:	ldr	r0, [pc, #124]	; 27c70 <flatcc_builder_reserve_table@@Base+0x128>
   27bf0:	bl	14618 <__assert_fail@plt>
   27bf4:	mov	r3, #0
   27bf8:	str	r3, [sp]
   27bfc:	ldr	r7, [r0, #48]	; 0x30
   27c00:	mov	r3, #1
   27c04:	add	r1, r0, #52	; 0x34
   27c08:	ldr	r0, [r0, #40]	; 0x28
   27c0c:	blx	r7
   27c10:	cmp	r0, #0
   27c14:	beq	27b84 <flatcc_builder_reserve_table@@Base+0x3c>
   27c18:	ldr	r3, [pc, #84]	; 27c74 <flatcc_builder_reserve_table@@Base+0x12c>
   27c1c:	mov	r2, #308	; 0x134
   27c20:	ldr	r1, [pc, #68]	; 27c6c <flatcc_builder_reserve_table@@Base+0x124>
   27c24:	ldr	r0, [pc, #76]	; 27c78 <flatcc_builder_reserve_table@@Base+0x130>
   27c28:	bl	14618 <__assert_fail@plt>
   27c2c:	mov	r3, #3
   27c30:	str	r3, [sp]
   27c34:	ldr	r4, [r5, #48]	; 0x30
   27c38:	mov	r3, #0
   27c3c:	add	r1, r5, #76	; 0x4c
   27c40:	ldr	r0, [r5, #40]	; 0x28
   27c44:	blx	r4
   27c48:	cmp	r0, #0
   27c4c:	beq	27bc0 <flatcc_builder_reserve_table@@Base+0x78>
   27c50:	ldr	r3, [pc, #28]	; 27c74 <flatcc_builder_reserve_table@@Base+0x12c>
   27c54:	mov	r2, #308	; 0x134
   27c58:	ldr	r1, [pc, #12]	; 27c6c <flatcc_builder_reserve_table@@Base+0x124>
   27c5c:	ldr	r0, [pc, #20]	; 27c78 <flatcc_builder_reserve_table@@Base+0x130>
   27c60:	bl	14618 <__assert_fail@plt>
   27c64:			; <UNDEFINED> instruction: 0x00041abc
   27c68:	andeq	r0, r0, r9, lsr #8
   27c6c:	muleq	r4, ip, sp
   27c70:	andeq	r2, r4, r4, lsr #32
   27c74:	andeq	r1, r4, r8, ror #16
   27c78:	strdeq	r1, [r4], -r0

00027c7c <flatcc_builder_start_table@@Base>:
   27c7c:	push	{r4, r5, r6, r7, lr}
   27c80:	sub	sp, sp, #12
   27c84:	mov	r4, r0
   27c88:	mov	r5, r1
   27c8c:	mov	r1, #4
   27c90:	bl	2613c <flatcc_builder_default_alloc@@Base+0x22c>
   27c94:	cmp	r0, #0
   27c98:	bne	27e28 <flatcc_builder_start_table@@Base+0x1ac>
   27c9c:	ldr	r2, [r4, #32]
   27ca0:	ldr	r3, [r4, #4]
   27ca4:	ldr	r1, [r4, #52]	; 0x34
   27ca8:	sub	r3, r3, r1
   27cac:	str	r3, [r2, #16]
   27cb0:	ldr	r2, [r4, #32]
   27cb4:	ldr	r3, [r4]
   27cb8:	ldr	r1, [r4, #76]	; 0x4c
   27cbc:	sub	r3, r3, r1
   27cc0:	str	r3, [r2, #20]
   27cc4:	ldr	r3, [r4, #32]
   27cc8:	ldr	r2, [r4, #12]
   27ccc:	str	r2, [r3, #24]
   27cd0:	ldr	r3, [r4, #32]
   27cd4:	ldrh	r2, [r4, #8]
   27cd8:	strh	r2, [r3, #28]
   27cdc:	ldr	r3, [pc, #340]	; 27e38 <flatcc_builder_start_table@@Base+0x1bc>
   27ce0:	str	r3, [r4, #12]
   27ce4:	mov	r3, #0
   27ce8:	strh	r3, [r4, #8]
   27cec:	ldr	r3, [r4, #32]
   27cf0:	mov	r2, #3
   27cf4:	strh	r2, [r3, #14]
   27cf8:	ldr	r2, [r4, #32]
   27cfc:	ldrh	r6, [r2, #28]
   27d00:	ldr	r3, [r2, #16]
   27d04:	add	r6, r3, r6, lsl #1
   27d08:	add	r5, r5, #2
   27d0c:	lsl	r5, r5, #1
   27d10:	add	r2, r6, r5
   27d14:	ldr	r3, [r4, #56]	; 0x38
   27d18:	cmp	r2, r3
   27d1c:	bhi	27db8 <flatcc_builder_start_table@@Base+0x13c>
   27d20:	ldr	r3, [r4, #52]	; 0x34
   27d24:	adds	r3, r3, r6
   27d28:	moveq	r3, #0
   27d2c:	streq	r3, [r4, #4]
   27d30:	mvneq	r0, #0
   27d34:	beq	27db0 <flatcc_builder_start_table@@Base+0x134>
   27d38:	add	r3, r3, #4
   27d3c:	str	r3, [r4, #4]
   27d40:	ldr	r3, [r4, #32]
   27d44:	ldr	r6, [r3, #20]
   27d48:	sub	r2, r5, #3
   27d4c:	add	r2, r2, r6
   27d50:	ldr	r3, [r4, #80]	; 0x50
   27d54:	cmp	r2, r3
   27d58:	bhi	27df0 <flatcc_builder_start_table@@Base+0x174>
   27d5c:	ldr	r0, [r4, #76]	; 0x4c
   27d60:	add	r0, r0, r6
   27d64:	str	r0, [r4]
   27d68:	cmp	r0, #0
   27d6c:	movne	r0, #0
   27d70:	mvneq	r0, #0
   27d74:	cmp	r0, #0
   27d78:	bne	27e30 <flatcc_builder_start_table@@Base+0x1b4>
   27d7c:	ldr	r1, [r4, #28]
   27d80:	ldr	r2, [r4, #60]	; 0x3c
   27d84:	add	r2, r2, r1
   27d88:	str	r2, [r4, #16]
   27d8c:	ldr	r3, [r4, #64]	; 0x40
   27d90:	sub	r3, r3, r1
   27d94:	ldr	r2, [pc, #160]	; 27e3c <flatcc_builder_start_table@@Base+0x1c0>
   27d98:	cmp	r3, r2
   27d9c:	ldrhi	r3, [pc, #152]	; 27e3c <flatcc_builder_start_table@@Base+0x1c0>
   27da0:	str	r3, [r4, #24]
   27da4:	ldr	r3, [r4, #32]
   27da8:	ldr	r2, [pc, #140]	; 27e3c <flatcc_builder_start_table@@Base+0x1c0>
   27dac:	str	r2, [r3, #4]
   27db0:	add	sp, sp, #12
   27db4:	pop	{r4, r5, r6, r7, pc}
   27db8:	mov	r3, #0
   27dbc:	str	r3, [sp]
   27dc0:	ldr	r7, [r4, #48]	; 0x30
   27dc4:	mov	r3, #1
   27dc8:	add	r1, r4, #52	; 0x34
   27dcc:	ldr	r0, [r4, #40]	; 0x28
   27dd0:	blx	r7
   27dd4:	cmp	r0, #0
   27dd8:	beq	27d20 <flatcc_builder_start_table@@Base+0xa4>
   27ddc:	ldr	r3, [pc, #92]	; 27e40 <flatcc_builder_start_table@@Base+0x1c4>
   27de0:	mov	r2, #308	; 0x134
   27de4:	ldr	r1, [pc, #88]	; 27e44 <flatcc_builder_start_table@@Base+0x1c8>
   27de8:	ldr	r0, [pc, #88]	; 27e48 <flatcc_builder_start_table@@Base+0x1cc>
   27dec:	bl	14618 <__assert_fail@plt>
   27df0:	mov	r3, #3
   27df4:	str	r3, [sp]
   27df8:	ldr	r5, [r4, #48]	; 0x30
   27dfc:	mov	r3, #0
   27e00:	add	r1, r4, #76	; 0x4c
   27e04:	ldr	r0, [r4, #40]	; 0x28
   27e08:	blx	r5
   27e0c:	cmp	r0, #0
   27e10:	beq	27d5c <flatcc_builder_start_table@@Base+0xe0>
   27e14:	ldr	r3, [pc, #36]	; 27e40 <flatcc_builder_start_table@@Base+0x1c4>
   27e18:	mov	r2, #308	; 0x134
   27e1c:	ldr	r1, [pc, #32]	; 27e44 <flatcc_builder_start_table@@Base+0x1c8>
   27e20:	ldr	r0, [pc, #32]	; 27e48 <flatcc_builder_start_table@@Base+0x1cc>
   27e24:	bl	14618 <__assert_fail@plt>
   27e28:	mvn	r0, #0
   27e2c:	b	27db0 <flatcc_builder_start_table@@Base+0x134>
   27e30:	mvn	r0, #0
   27e34:	b	27db0 <flatcc_builder_start_table@@Base+0x134>
   27e38:	svccs	0x00693b52
   27e3c:	strdeq	pc, [r0], -ip
   27e40:	andeq	r1, r4, r8, ror #16
   27e44:	muleq	r4, ip, sp
   27e48:	strdeq	r1, [r4], -r0

00027e4c <flatcc_builder_create_vtable@@Base>:
   27e4c:	push	{r4, r5, r6, lr}
   27e50:	sub	sp, sp, #80	; 0x50
   27e54:	mov	r5, r0
   27e58:	mov	r3, #0
   27e5c:	str	r3, [sp, #8]
   27e60:	str	r3, [sp, #12]
   27e64:	cmp	r2, #0
   27e68:	beq	27eec <flatcc_builder_create_vtable@@Base+0xa0>
   27e6c:	str	r2, [sp, #8]
   27e70:	str	r1, [sp, #16]
   27e74:	str	r2, [sp, #20]
   27e78:	mov	r3, #1
   27e7c:	str	r3, [sp, #12]
   27e80:	ldr	r3, [r0, #152]	; 0x98
   27e84:	cmp	r3, #0
   27e88:	bne	27f04 <flatcc_builder_create_vtable@@Base+0xb8>
   27e8c:	ldr	r3, [r0, #180]	; 0xb4
   27e90:	cmp	r3, #0
   27e94:	bne	27f04 <flatcc_builder_create_vtable@@Base+0xb8>
   27e98:	ldr	r4, [r0, #140]	; 0x8c
   27e9c:	mov	r3, r2
   27ea0:	add	r2, r2, r4
   27ea4:	str	r2, [r0, #140]	; 0x8c
   27ea8:	cmp	r4, r2
   27eac:	ble	27f64 <flatcc_builder_create_vtable@@Base+0x118>
   27eb0:	ldr	r3, [pc, #232]	; 27fa0 <flatcc_builder_create_vtable@@Base+0x154>
   27eb4:	ldr	r2, [pc, #232]	; 27fa4 <flatcc_builder_create_vtable@@Base+0x158>
   27eb8:	ldr	r1, [pc, #232]	; 27fa8 <flatcc_builder_create_vtable@@Base+0x15c>
   27ebc:	ldr	r0, [pc, #232]	; 27fac <flatcc_builder_create_vtable@@Base+0x160>
   27ec0:	bl	14618 <__assert_fail@plt>
   27ec4:	ldr	r3, [pc, #228]	; 27fb0 <flatcc_builder_create_vtable@@Base+0x164>
   27ec8:	ldr	r2, [pc, #228]	; 27fb4 <flatcc_builder_create_vtable@@Base+0x168>
   27ecc:	ldr	r1, [pc, #212]	; 27fa8 <flatcc_builder_create_vtable@@Base+0x15c>
   27ed0:	ldr	r0, [pc, #212]	; 27fac <flatcc_builder_create_vtable@@Base+0x160>
   27ed4:	bl	14618 <__assert_fail@plt>
   27ed8:	ldr	r3, [pc, #208]	; 27fb0 <flatcc_builder_create_vtable@@Base+0x164>
   27edc:	ldr	r2, [pc, #212]	; 27fb8 <flatcc_builder_create_vtable@@Base+0x16c>
   27ee0:	ldr	r1, [pc, #192]	; 27fa8 <flatcc_builder_create_vtable@@Base+0x15c>
   27ee4:	ldr	r0, [pc, #192]	; 27fac <flatcc_builder_create_vtable@@Base+0x160>
   27ee8:	bl	14618 <__assert_fail@plt>
   27eec:	ldr	r3, [r0, #152]	; 0x98
   27ef0:	cmp	r3, #0
   27ef4:	bne	27ec4 <flatcc_builder_create_vtable@@Base+0x78>
   27ef8:	ldr	r3, [r0, #180]	; 0xb4
   27efc:	cmp	r3, #0
   27f00:	beq	27f54 <flatcc_builder_create_vtable@@Base+0x108>
   27f04:	ldr	r2, [r5, #136]	; 0x88
   27f08:	ldr	r3, [sp, #8]
   27f0c:	sub	r4, r2, r3
   27f10:	cmp	r2, r4
   27f14:	ble	27ec4 <flatcc_builder_create_vtable@@Base+0x78>
   27f18:	str	r3, [sp]
   27f1c:	ldr	r6, [r5, #44]	; 0x2c
   27f20:	mov	r3, r4
   27f24:	ldr	r2, [sp, #12]
   27f28:	add	r1, sp, #16
   27f2c:	ldr	r0, [r5, #36]	; 0x24
   27f30:	blx	r6
   27f34:	cmp	r0, #0
   27f38:	bne	27ed8 <flatcc_builder_create_vtable@@Base+0x8c>
   27f3c:	str	r4, [r5, #136]	; 0x88
   27f40:	cmp	r4, #0
   27f44:	addne	r4, r4, #1
   27f48:	mov	r0, r4
   27f4c:	add	sp, sp, #80	; 0x50
   27f50:	pop	{r4, r5, r6, pc}
   27f54:	ldr	r4, [r5, #140]	; 0x8c
   27f58:	ldr	r3, [sp, #8]
   27f5c:	add	r2, r3, r4
   27f60:	str	r2, [r5, #140]	; 0x8c
   27f64:	ldr	r0, [r5, #36]	; 0x24
   27f68:	str	r3, [sp]
   27f6c:	ldr	r5, [r5, #44]	; 0x2c
   27f70:	mov	r3, r4
   27f74:	ldr	r2, [sp, #12]
   27f78:	add	r1, sp, #16
   27f7c:	blx	r5
   27f80:	cmp	r0, #0
   27f84:	addeq	r4, r4, #1
   27f88:	beq	27f48 <flatcc_builder_create_vtable@@Base+0xfc>
   27f8c:	ldr	r3, [pc, #12]	; 27fa0 <flatcc_builder_create_vtable@@Base+0x154>
   27f90:	ldr	r2, [pc, #36]	; 27fbc <flatcc_builder_create_vtable@@Base+0x170>
   27f94:	ldr	r1, [pc, #12]	; 27fa8 <flatcc_builder_create_vtable@@Base+0x15c>
   27f98:	ldr	r0, [pc, #12]	; 27fac <flatcc_builder_create_vtable@@Base+0x160>
   27f9c:	bl	14618 <__assert_fail@plt>
   27fa0:	andeq	r1, r4, ip, asr #16
   27fa4:	andeq	r0, r0, r1, lsr #5
   27fa8:	muleq	r4, ip, sp
   27fac:	strdeq	r1, [r4], -r0
   27fb0:	muleq	r4, r8, r8
   27fb4:	andeq	r0, r0, r7, lsl #5
   27fb8:	andeq	r0, r0, fp, lsl #5
   27fbc:	andeq	r0, r0, r5, lsr #5

00027fc0 <flatcc_builder_create_cached_vtable@@Base>:
   27fc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27fc4:	sub	sp, sp, #28
   27fc8:	mov	r8, r0
   27fcc:	str	r1, [sp, #8]
   27fd0:	mov	r7, r2
   27fd4:	mov	fp, r3
   27fd8:	ldr	r4, [r0, #116]	; 0x74
   27fdc:	cmp	r4, #0
   27fe0:	beq	28028 <flatcc_builder_create_cached_vtable@@Base+0x68>
   27fe4:	ldr	r3, [r8, #116]	; 0x74
   27fe8:	rsb	r3, r3, #32
   27fec:	lsr	fp, fp, r3
   27ff0:	ldr	r3, [r8, #92]	; 0x5c
   27ff4:	str	r3, [sp, #16]
   27ff8:	adds	r2, r3, fp, lsl #2
   27ffc:	str	r2, [sp, #20]
   28000:	beq	282f8 <flatcc_builder_create_cached_vtable@@Base+0x338>
   28004:	ldr	r5, [r3, fp, lsl #2]
   28008:	cmp	r5, #0
   2800c:	beq	28198 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   28010:	ldr	sl, [r8, #100]	; 0x64
   28014:	ldr	r6, [r8, #68]	; 0x44
   28018:	mov	r9, r2
   2801c:	mov	r3, #0
   28020:	str	r3, [sp, #12]
   28024:	b	28120 <flatcc_builder_create_cached_vtable@@Base+0x160>
   28028:	add	r6, r0, #92	; 0x5c
   2802c:	ldr	r3, [r0, #124]	; 0x7c
   28030:	cmp	r3, #0
   28034:	bne	2808c <flatcc_builder_create_cached_vtable@@Base+0xcc>
   28038:	ldr	r3, [r0, #104]	; 0x68
   2803c:	cmp	r3, #15
   28040:	bls	280a0 <flatcc_builder_create_cached_vtable@@Base+0xe0>
   28044:	ldr	r3, [r8, #100]	; 0x64
   28048:	cmp	r3, #0
   2804c:	beq	28318 <flatcc_builder_create_cached_vtable@@Base+0x358>
   28050:	mov	r3, #16
   28054:	str	r3, [r8, #124]	; 0x7c
   28058:	mov	r3, #5
   2805c:	str	r3, [sp]
   28060:	ldr	r5, [r8, #48]	; 0x30
   28064:	mov	r3, #1
   28068:	mov	r2, #256	; 0x100
   2806c:	mov	r1, r6
   28070:	ldr	r0, [r8, #40]	; 0x28
   28074:	blx	r5
   28078:	cmp	r0, #0
   2807c:	bne	28318 <flatcc_builder_create_cached_vtable@@Base+0x358>
   28080:	ldr	r1, [r8, #96]	; 0x60
   28084:	mov	r3, #256	; 0x100
   28088:	b	280e0 <flatcc_builder_create_cached_vtable@@Base+0x120>
   2808c:	ldr	r3, [pc, #652]	; 28320 <flatcc_builder_create_cached_vtable@@Base+0x360>
   28090:	ldr	r2, [pc, #652]	; 28324 <flatcc_builder_create_cached_vtable@@Base+0x364>
   28094:	ldr	r1, [pc, #652]	; 28328 <flatcc_builder_create_cached_vtable@@Base+0x368>
   28098:	ldr	r0, [pc, #652]	; 2832c <flatcc_builder_create_cached_vtable@@Base+0x36c>
   2809c:	bl	14618 <__assert_fail@plt>
   280a0:	mov	r3, #6
   280a4:	str	r3, [sp]
   280a8:	ldr	r5, [r0, #48]	; 0x30
   280ac:	mov	r3, #0
   280b0:	mov	r2, #16
   280b4:	add	r1, r0, #100	; 0x64
   280b8:	ldr	r0, [r0, #40]	; 0x28
   280bc:	blx	r5
   280c0:	cmp	r0, #0
   280c4:	beq	28044 <flatcc_builder_create_cached_vtable@@Base+0x84>
   280c8:	ldr	r3, [pc, #608]	; 28330 <flatcc_builder_create_cached_vtable@@Base+0x370>
   280cc:	mov	r2, #308	; 0x134
   280d0:	ldr	r1, [pc, #592]	; 28328 <flatcc_builder_create_cached_vtable@@Base+0x368>
   280d4:	ldr	r0, [pc, #600]	; 28334 <flatcc_builder_create_cached_vtable@@Base+0x374>
   280d8:	bl	14618 <__assert_fail@plt>
   280dc:	mov	r3, r2
   280e0:	lsl	r2, r3, #1
   280e4:	cmp	r2, r1
   280e8:	bls	280dc <flatcc_builder_create_cached_vtable@@Base+0x11c>
   280ec:	lsr	r3, r3, #2
   280f0:	cmp	r3, #1
   280f4:	bls	28108 <flatcc_builder_create_cached_vtable@@Base+0x148>
   280f8:	mov	r2, #1
   280fc:	add	r4, r4, #1
   28100:	cmp	r3, r2, lsl r4
   28104:	bhi	280fc <flatcc_builder_create_cached_vtable@@Base+0x13c>
   28108:	str	r4, [r8, #116]	; 0x74
   2810c:	b	27fe4 <flatcc_builder_create_cached_vtable@@Base+0x24>
   28110:	add	r9, r4, #12
   28114:	ldr	r5, [r4, #12]
   28118:	cmp	r5, #0
   2811c:	beq	281a0 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   28120:	add	r4, sl, r5
   28124:	ldr	r3, [r4, #8]
   28128:	add	r1, r6, r3
   2812c:	ldrh	r3, [r6, r3]
   28130:	cmp	r3, r7
   28134:	bne	28110 <flatcc_builder_create_cached_vtable@@Base+0x150>
   28138:	mov	r2, r7
   2813c:	ldr	r0, [sp, #8]
   28140:	bl	14558 <memcmp@plt>
   28144:	cmp	r0, #0
   28148:	bne	28110 <flatcc_builder_create_cached_vtable@@Base+0x150>
   2814c:	ldr	r2, [r4, #4]
   28150:	ldr	r3, [r8, #152]	; 0x98
   28154:	cmp	r2, r3
   28158:	addne	r9, r4, #12
   2815c:	ldrne	r5, [r4, #12]
   28160:	strne	r4, [sp, #12]
   28164:	bne	28118 <flatcc_builder_create_cached_vtable@@Base+0x158>
   28168:	ldr	r3, [sp, #20]
   2816c:	cmp	r3, r9
   28170:	beq	2818c <flatcc_builder_create_cached_vtable@@Base+0x1cc>
   28174:	ldr	r3, [r4, #12]
   28178:	str	r3, [r9]
   2817c:	ldr	r2, [sp, #16]
   28180:	ldr	r3, [r2, fp, lsl #2]
   28184:	str	r3, [r4, #12]
   28188:	str	r5, [r2, fp, lsl #2]
   2818c:	ldr	r0, [r4]
   28190:	add	sp, sp, #28
   28194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28198:	mov	r3, #0
   2819c:	str	r3, [sp, #12]
   281a0:	ldr	r4, [r8, #124]	; 0x7c
   281a4:	add	r2, r4, #16
   281a8:	ldr	r3, [r8, #104]	; 0x68
   281ac:	cmp	r2, r3
   281b0:	bhi	2821c <flatcc_builder_create_cached_vtable@@Base+0x25c>
   281b4:	ldr	r5, [r8, #100]	; 0x64
   281b8:	adds	r6, r5, r4
   281bc:	beq	28300 <flatcc_builder_create_cached_vtable@@Base+0x340>
   281c0:	ldr	r3, [r8, #124]	; 0x7c
   281c4:	add	r2, r3, #16
   281c8:	str	r2, [r8, #124]	; 0x7c
   281cc:	ldr	r2, [r8, #152]	; 0x98
   281d0:	str	r2, [r6, #4]
   281d4:	ldr	r1, [sp, #16]
   281d8:	ldr	r2, [r1, fp, lsl #2]
   281dc:	str	r2, [r6, #12]
   281e0:	str	r3, [r1, fp, lsl #2]
   281e4:	mov	r2, r7
   281e8:	ldr	r1, [sp, #8]
   281ec:	mov	r0, r8
   281f0:	bl	27e4c <flatcc_builder_create_vtable@@Base>
   281f4:	str	r0, [r5, r4]
   281f8:	cmp	r0, #0
   281fc:	beq	28308 <flatcc_builder_create_cached_vtable@@Base+0x348>
   28200:	ldr	r3, [sp, #12]
   28204:	cmp	r3, #0
   28208:	beq	28254 <flatcc_builder_create_cached_vtable@@Base+0x294>
   2820c:	ldr	r3, [r3, #8]
   28210:	str	r3, [r6, #8]
   28214:	ldr	r0, [r5, r4]
   28218:	b	28190 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   2821c:	mov	r3, #6
   28220:	str	r3, [sp]
   28224:	ldr	r5, [r8, #48]	; 0x30
   28228:	mov	r3, #0
   2822c:	add	r1, r8, #100	; 0x64
   28230:	ldr	r0, [r8, #40]	; 0x28
   28234:	blx	r5
   28238:	cmp	r0, #0
   2823c:	beq	281b4 <flatcc_builder_create_cached_vtable@@Base+0x1f4>
   28240:	ldr	r3, [pc, #232]	; 28330 <flatcc_builder_create_cached_vtable@@Base+0x370>
   28244:	mov	r2, #308	; 0x134
   28248:	ldr	r1, [pc, #216]	; 28328 <flatcc_builder_create_cached_vtable@@Base+0x368>
   2824c:	ldr	r0, [pc, #224]	; 28334 <flatcc_builder_create_cached_vtable@@Base+0x374>
   28250:	bl	14618 <__assert_fail@plt>
   28254:	ldr	r2, [r8, #172]	; 0xac
   28258:	cmp	r2, #0
   2825c:	beq	28270 <flatcc_builder_create_cached_vtable@@Base+0x2b0>
   28260:	ldr	r3, [r8, #120]	; 0x78
   28264:	add	r3, r7, r3
   28268:	cmp	r2, r3
   2826c:	bcc	282b4 <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   28270:	ldr	r9, [r8, #120]	; 0x78
   28274:	add	r2, r9, r7
   28278:	ldr	r3, [r8, #72]	; 0x48
   2827c:	cmp	r2, r3
   28280:	bhi	282c0 <flatcc_builder_create_cached_vtable@@Base+0x300>
   28284:	ldr	r3, [r8, #68]	; 0x44
   28288:	adds	r0, r3, r9
   2828c:	beq	28310 <flatcc_builder_create_cached_vtable@@Base+0x350>
   28290:	ldr	r3, [r8, #120]	; 0x78
   28294:	str	r3, [r6, #8]
   28298:	ldr	r3, [r8, #120]	; 0x78
   2829c:	add	r3, r3, r7
   282a0:	str	r3, [r8, #120]	; 0x78
   282a4:	mov	r2, r7
   282a8:	ldr	r1, [sp, #8]
   282ac:	bl	1454c <memcpy@plt>
   282b0:	b	28214 <flatcc_builder_create_cached_vtable@@Base+0x254>
   282b4:	mov	r0, r8
   282b8:	bl	26480 <flatcc_builder_flush_vtable_cache@@Base>
   282bc:	b	28214 <flatcc_builder_create_cached_vtable@@Base+0x254>
   282c0:	mov	r3, #2
   282c4:	str	r3, [sp]
   282c8:	ldr	sl, [r8, #48]	; 0x30
   282cc:	mov	r3, #0
   282d0:	add	r1, r8, #68	; 0x44
   282d4:	ldr	r0, [r8, #40]	; 0x28
   282d8:	blx	sl
   282dc:	cmp	r0, #0
   282e0:	beq	28284 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   282e4:	ldr	r3, [pc, #68]	; 28330 <flatcc_builder_create_cached_vtable@@Base+0x370>
   282e8:	mov	r2, #308	; 0x134
   282ec:	ldr	r1, [pc, #52]	; 28328 <flatcc_builder_create_cached_vtable@@Base+0x368>
   282f0:	ldr	r0, [pc, #60]	; 28334 <flatcc_builder_create_cached_vtable@@Base+0x374>
   282f4:	bl	14618 <__assert_fail@plt>
   282f8:	mov	r0, #0
   282fc:	b	28190 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   28300:	mov	r0, #0
   28304:	b	28190 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   28308:	mov	r0, #0
   2830c:	b	28190 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   28310:	mvn	r0, #0
   28314:	b	28190 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   28318:	mov	r0, #0
   2831c:	b	28190 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   28320:	ldrdeq	r1, [r4], -ip
   28324:	andeq	r0, r0, r6, asr r1
   28328:	muleq	r4, ip, sp
   2832c:	andeq	r2, r4, r0, lsr r0
   28330:	andeq	r1, r4, r8, ror #16
   28334:	strdeq	r1, [r4], -r0

00028338 <flatcc_builder_create_table@@Base>:
   28338:	push	{r4, r5, r6, r7, lr}
   2833c:	sub	sp, sp, #92	; 0x5c
   28340:	ldr	r4, [sp, #116]	; 0x74
   28344:	ldr	ip, [sp, #120]	; 0x78
   28348:	cmp	r4, #0
   2834c:	blt	2848c <flatcc_builder_create_table@@Base+0x154>
   28350:	mov	r5, r0
   28354:	tst	ip, #1
   28358:	beq	284a0 <flatcc_builder_create_table@@Base+0x168>
   2835c:	cmp	r3, #4
   28360:	movcs	r0, r3
   28364:	movcc	r0, #4
   28368:	ldrh	r3, [r5, #128]	; 0x80
   2836c:	cmp	r3, r0
   28370:	strhcc	r0, [r5, #128]	; 0x80
   28374:	ldr	lr, [r5, #136]	; 0x88
   28378:	sub	r7, lr, r2
   2837c:	sub	r0, r0, #1
   28380:	and	r7, r7, r0
   28384:	mvn	r3, #3
   28388:	sub	r3, r3, r2
   2838c:	add	r3, r3, lr
   28390:	sub	r3, r3, r7
   28394:	sub	ip, ip, #1
   28398:	sub	ip, r3, ip
   2839c:	str	ip, [sp, #84]	; 0x54
   283a0:	cmp	r4, #0
   283a4:	ble	283d4 <flatcc_builder_create_table@@Base+0x9c>
   283a8:	ldr	ip, [sp, #112]	; 0x70
   283ac:	add	r4, ip, r4, lsl #1
   283b0:	mvn	r6, #3
   283b4:	sub	r6, r6, r3
   283b8:	ldrh	r3, [ip], #2
   283bc:	sub	lr, r6, r3
   283c0:	ldr	r0, [r1, r3]
   283c4:	add	r0, r0, lr
   283c8:	str	r0, [r1, r3]
   283cc:	cmp	ip, r4
   283d0:	bne	283b8 <flatcc_builder_create_table@@Base+0x80>
   283d4:	mov	r3, #4
   283d8:	str	r3, [sp, #12]
   283dc:	add	r0, sp, #84	; 0x54
   283e0:	str	r0, [sp, #20]
   283e4:	str	r3, [sp, #24]
   283e8:	mov	r3, #1
   283ec:	str	r3, [sp, #16]
   283f0:	cmp	r2, #0
   283f4:	beq	28410 <flatcc_builder_create_table@@Base+0xd8>
   283f8:	add	r3, r2, #4
   283fc:	str	r3, [sp, #12]
   28400:	str	r1, [sp, #28]
   28404:	str	r2, [sp, #32]
   28408:	mov	r3, #2
   2840c:	str	r3, [sp, #16]
   28410:	cmp	r7, #0
   28414:	beq	28444 <flatcc_builder_create_table@@Base+0x10c>
   28418:	ldr	r3, [sp, #12]
   2841c:	add	r3, r3, r7
   28420:	str	r3, [sp, #12]
   28424:	ldr	r3, [sp, #16]
   28428:	add	r3, r3, #1
   2842c:	add	r2, sp, #88	; 0x58
   28430:	add	r2, r2, r3, lsl #3
   28434:	ldr	r1, [pc, #160]	; 284dc <flatcc_builder_create_table@@Base+0x1a4>
   28438:	str	r1, [r2, #-76]	; 0xffffffb4
   2843c:	str	r7, [r2, #-72]	; 0xffffffb8
   28440:	str	r3, [sp, #16]
   28444:	ldr	r2, [r5, #136]	; 0x88
   28448:	ldr	r3, [sp, #12]
   2844c:	sub	r4, r2, r3
   28450:	cmp	r2, r4
   28454:	ble	284b4 <flatcc_builder_create_table@@Base+0x17c>
   28458:	str	r3, [sp]
   2845c:	ldr	r6, [r5, #44]	; 0x2c
   28460:	mov	r3, r4
   28464:	ldr	r2, [sp, #16]
   28468:	add	r1, sp, #20
   2846c:	ldr	r0, [r5, #36]	; 0x24
   28470:	blx	r6
   28474:	cmp	r0, #0
   28478:	bne	284c8 <flatcc_builder_create_table@@Base+0x190>
   2847c:	str	r4, [r5, #136]	; 0x88
   28480:	mov	r0, r4
   28484:	add	sp, sp, #92	; 0x5c
   28488:	pop	{r4, r5, r6, r7, pc}
   2848c:	ldr	r3, [pc, #76]	; 284e0 <flatcc_builder_create_table@@Base+0x1a8>
   28490:	ldr	r2, [pc, #76]	; 284e4 <flatcc_builder_create_table@@Base+0x1ac>
   28494:	ldr	r1, [pc, #76]	; 284e8 <flatcc_builder_create_table@@Base+0x1b0>
   28498:	ldr	r0, [pc, #76]	; 284ec <flatcc_builder_create_table@@Base+0x1b4>
   2849c:	bl	14618 <__assert_fail@plt>
   284a0:	ldr	r3, [pc, #56]	; 284e0 <flatcc_builder_create_table@@Base+0x1a8>
   284a4:	ldr	r2, [pc, #68]	; 284f0 <flatcc_builder_create_table@@Base+0x1b8>
   284a8:	ldr	r1, [pc, #56]	; 284e8 <flatcc_builder_create_table@@Base+0x1b0>
   284ac:	ldr	r0, [pc, #64]	; 284f4 <flatcc_builder_create_table@@Base+0x1bc>
   284b0:	bl	14618 <__assert_fail@plt>
   284b4:	ldr	r3, [pc, #60]	; 284f8 <flatcc_builder_create_table@@Base+0x1c0>
   284b8:	ldr	r2, [pc, #60]	; 284fc <flatcc_builder_create_table@@Base+0x1c4>
   284bc:	ldr	r1, [pc, #36]	; 284e8 <flatcc_builder_create_table@@Base+0x1b0>
   284c0:	ldr	r0, [pc, #56]	; 28500 <flatcc_builder_create_table@@Base+0x1c8>
   284c4:	bl	14618 <__assert_fail@plt>
   284c8:	ldr	r3, [pc, #40]	; 284f8 <flatcc_builder_create_table@@Base+0x1c0>
   284cc:	ldr	r2, [pc, #48]	; 28504 <flatcc_builder_create_table@@Base+0x1cc>
   284d0:	ldr	r1, [pc, #16]	; 284e8 <flatcc_builder_create_table@@Base+0x1b0>
   284d4:	ldr	r0, [pc, #36]	; 28500 <flatcc_builder_create_table@@Base+0x1c8>
   284d8:	bl	14618 <__assert_fail@plt>
   284dc:	andeq	r1, r4, ip, asr #12
   284e0:	andeq	r1, r4, r8, ror #21
   284e4:	ldrdeq	r0, [r0], -r5
   284e8:	muleq	r4, ip, sp
   284ec:	andeq	r2, r4, r0, asr #32
   284f0:	ldrdeq	r0, [r0], -fp
   284f4:	andeq	r2, r4, r4, asr r0
   284f8:	muleq	r4, r8, r8
   284fc:	andeq	r0, r0, r7, lsl #5
   28500:	strdeq	r1, [r4], -r0
   28504:	andeq	r0, r0, fp, lsl #5

00028508 <flatcc_builder_check_required_field@@Base>:
   28508:	ldr	r3, [r0, #32]
   2850c:	ldrh	r3, [r3, #14]
   28510:	cmp	r3, #3
   28514:	bne	28540 <flatcc_builder_check_required_field@@Base+0x38>
   28518:	ldrh	r3, [r0, #8]
   2851c:	cmp	r3, r1
   28520:	movls	r0, #0
   28524:	bls	2853c <flatcc_builder_check_required_field@@Base+0x34>
   28528:	ldr	r3, [r0, #4]
   2852c:	lsl	r1, r1, #1
   28530:	ldrh	r0, [r3, r1]
   28534:	adds	r0, r0, #0
   28538:	movne	r0, #1
   2853c:	bx	lr
   28540:	push	{r4, lr}
   28544:	ldr	r3, [pc, #12]	; 28558 <flatcc_builder_check_required_field@@Base+0x50>
   28548:	ldr	r2, [pc, #12]	; 2855c <flatcc_builder_check_required_field@@Base+0x54>
   2854c:	ldr	r1, [pc, #12]	; 28560 <flatcc_builder_check_required_field@@Base+0x58>
   28550:	ldr	r0, [pc, #12]	; 28564 <flatcc_builder_check_required_field@@Base+0x5c>
   28554:	bl	14618 <__assert_fail@plt>
   28558:	andeq	r1, r4, r4, lsl #22
   2855c:	strdeq	r0, [r0], -r8
   28560:	muleq	r4, ip, sp
   28564:	andeq	r2, r4, r0, rrx

00028568 <flatcc_builder_check_union_field@@Base>:
   28568:	ldr	r3, [r0, #32]
   2856c:	ldrh	r3, [r3, #14]
   28570:	cmp	r3, #3
   28574:	bne	285d0 <flatcc_builder_check_union_field@@Base+0x68>
   28578:	cmp	r1, #0
   2857c:	moveq	r0, #0
   28580:	beq	285f8 <flatcc_builder_check_union_field@@Base+0x90>
   28584:	ldrh	r3, [r0, #8]
   28588:	cmp	r3, r1
   2858c:	movls	r0, #0
   28590:	bls	285f8 <flatcc_builder_check_union_field@@Base+0x90>
   28594:	ldr	r3, [r0, #4]
   28598:	sub	r1, r1, #-2147483647	; 0x80000001
   2859c:	lsl	r1, r1, #1
   285a0:	ldrh	r2, [r3, r1]
   285a4:	cmp	r2, #0
   285a8:	beq	285e8 <flatcc_builder_check_union_field@@Base+0x80>
   285ac:	ldr	r0, [r0, #16]
   285b0:	ldrb	r2, [r0, r2]
   285b4:	cmp	r2, #0
   285b8:	bne	285fc <flatcc_builder_check_union_field@@Base+0x94>
   285bc:	add	r1, r3, r1
   285c0:	ldrh	r0, [r1, #2]
   285c4:	clz	r0, r0
   285c8:	lsr	r0, r0, #5
   285cc:	b	285f8 <flatcc_builder_check_union_field@@Base+0x90>
   285d0:	push	{r4, lr}
   285d4:	ldr	r3, [pc, #52]	; 28610 <flatcc_builder_check_union_field@@Base+0xa8>
   285d8:	ldr	r2, [pc, #52]	; 28614 <flatcc_builder_check_union_field@@Base+0xac>
   285dc:	ldr	r1, [pc, #52]	; 28618 <flatcc_builder_check_union_field@@Base+0xb0>
   285e0:	ldr	r0, [pc, #52]	; 2861c <flatcc_builder_check_union_field@@Base+0xb4>
   285e4:	bl	14618 <__assert_fail@plt>
   285e8:	add	r1, r3, r1
   285ec:	ldrh	r0, [r1, #2]
   285f0:	clz	r0, r0
   285f4:	lsr	r0, r0, #5
   285f8:	bx	lr
   285fc:	add	r1, r3, r1
   28600:	ldrh	r0, [r1, #2]
   28604:	adds	r0, r0, #0
   28608:	movne	r0, #1
   2860c:	b	285f8 <flatcc_builder_check_union_field@@Base+0x90>
   28610:	andeq	r1, r4, r8, lsr #22
   28614:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   28618:	muleq	r4, ip, sp
   2861c:	andeq	r2, r4, r0, rrx

00028620 <flatcc_builder_check_required@@Base>:
   28620:	ldr	r3, [r0, #32]
   28624:	ldrh	r3, [r3, #14]
   28628:	cmp	r3, #3
   2862c:	bne	2868c <flatcc_builder_check_required@@Base+0x6c>
   28630:	ldrh	r3, [r0, #8]
   28634:	cmp	r3, r2
   28638:	movlt	r0, #0
   2863c:	blt	286a8 <flatcc_builder_check_required@@Base+0x88>
   28640:	cmp	r2, #0
   28644:	ble	286ac <flatcc_builder_check_required@@Base+0x8c>
   28648:	ldr	ip, [r0, #4]
   2864c:	ldrh	r3, [r1]
   28650:	lsl	r3, r3, #1
   28654:	ldrh	r3, [ip, r3]
   28658:	cmp	r3, #0
   2865c:	beq	286b4 <flatcc_builder_check_required@@Base+0x94>
   28660:	add	r0, r1, #2
   28664:	add	r2, r1, r2, lsl #1
   28668:	cmp	r0, r2
   2866c:	beq	286a4 <flatcc_builder_check_required@@Base+0x84>
   28670:	ldrh	r3, [r0], #2
   28674:	lsl	r3, r3, #1
   28678:	ldrh	r3, [ip, r3]
   2867c:	cmp	r3, #0
   28680:	bne	28668 <flatcc_builder_check_required@@Base+0x48>
   28684:	mov	r0, #0
   28688:	b	286a8 <flatcc_builder_check_required@@Base+0x88>
   2868c:	push	{r4, lr}
   28690:	ldr	r3, [pc, #36]	; 286bc <flatcc_builder_check_required@@Base+0x9c>
   28694:	ldr	r2, [pc, #36]	; 286c0 <flatcc_builder_check_required@@Base+0xa0>
   28698:	ldr	r1, [pc, #36]	; 286c4 <flatcc_builder_check_required@@Base+0xa4>
   2869c:	ldr	r0, [pc, #36]	; 286c8 <flatcc_builder_check_required@@Base+0xa8>
   286a0:	bl	14618 <__assert_fail@plt>
   286a4:	mov	r0, #1
   286a8:	bx	lr
   286ac:	mov	r0, #1
   286b0:	b	286a8 <flatcc_builder_check_required@@Base+0x88>
   286b4:	mov	r0, #0
   286b8:	b	286a8 <flatcc_builder_check_required@@Base+0x88>
   286bc:	andeq	r1, r4, ip, asr #22
   286c0:	andeq	r0, r0, r1, lsl r5
   286c4:	muleq	r4, ip, sp
   286c8:	andeq	r2, r4, r0, rrx

000286cc <flatcc_builder_end_table@@Base>:
   286cc:	push	{r4, r5, r6, r7, lr}
   286d0:	sub	sp, sp, #20
   286d4:	ldr	r3, [r0, #32]
   286d8:	ldrh	r3, [r3, #14]
   286dc:	cmp	r3, #3
   286e0:	bne	28750 <flatcc_builder_end_table@@Base+0x84>
   286e4:	mov	r4, r0
   286e8:	ldr	r1, [r0, #4]
   286ec:	sub	r6, r1, #4
   286f0:	ldrh	r5, [r0, #8]
   286f4:	add	r5, r5, #2
   286f8:	lsl	r5, r5, #1
   286fc:	uxth	r5, r5
   28700:	strh	r5, [r1, #-4]
   28704:	ldr	r3, [r0, #20]
   28708:	add	r3, r3, #4
   2870c:	uxth	r2, r3
   28710:	strh	r2, [r1, #-2]
   28714:	ldr	r3, [r0, #12]
   28718:	eor	r3, r3, r5
   2871c:	ldr	r1, [pc, #328]	; 2886c <flatcc_builder_end_table@@Base+0x1a0>
   28720:	mul	r3, r1, r3
   28724:	eor	r3, r3, r2
   28728:	mul	r3, r1, r3
   2872c:	str	r3, [r0, #12]
   28730:	mov	r2, r5
   28734:	mov	r1, r6
   28738:	bl	27fc0 <flatcc_builder_create_cached_vtable@@Base>
   2873c:	subs	r7, r0, #0
   28740:	bne	28764 <flatcc_builder_end_table@@Base+0x98>
   28744:	mov	r0, r7
   28748:	add	sp, sp, #20
   2874c:	pop	{r4, r5, r6, r7, pc}
   28750:	ldr	r3, [pc, #280]	; 28870 <flatcc_builder_end_table@@Base+0x1a4>
   28754:	ldr	r2, [pc, #280]	; 28874 <flatcc_builder_end_table@@Base+0x1a8>
   28758:	ldr	r1, [pc, #280]	; 28878 <flatcc_builder_end_table@@Base+0x1ac>
   2875c:	ldr	r0, [pc, #280]	; 2887c <flatcc_builder_end_table@@Base+0x1b0>
   28760:	bl	14618 <__assert_fail@plt>
   28764:	mov	r2, r5
   28768:	mov	r1, #0
   2876c:	mov	r0, r6
   28770:	bl	145c4 <memset@plt>
   28774:	ldr	r3, [r4, #32]
   28778:	ldr	r1, [r4, #76]	; 0x4c
   2877c:	ldr	r3, [r3, #20]
   28780:	add	r1, r1, r3
   28784:	ldrh	r3, [r4, #130]	; 0x82
   28788:	str	r7, [sp, #8]
   2878c:	ldr	r2, [r4]
   28790:	sub	r2, r2, r1
   28794:	asr	r2, r2, #1
   28798:	str	r2, [sp, #4]
   2879c:	str	r1, [sp]
   287a0:	ldr	r2, [r4, #20]
   287a4:	ldr	r1, [r4, #16]
   287a8:	mov	r0, r4
   287ac:	bl	28338 <flatcc_builder_create_table@@Base>
   287b0:	subs	r7, r0, #0
   287b4:	beq	28744 <flatcc_builder_end_table@@Base+0x78>
   287b8:	ldr	r3, [r4, #32]
   287bc:	ldr	r2, [r3, #24]
   287c0:	str	r2, [r4, #12]
   287c4:	ldrh	r2, [r3, #28]
   287c8:	strh	r2, [r4, #8]
   287cc:	ldr	r2, [r4, #52]	; 0x34
   287d0:	ldr	r1, [r3, #16]
   287d4:	add	r2, r2, r1
   287d8:	str	r2, [r4, #4]
   287dc:	ldr	r2, [r4, #76]	; 0x4c
   287e0:	ldr	r3, [r3, #20]
   287e4:	add	r3, r2, r3
   287e8:	str	r3, [r4]
   287ec:	ldr	r2, [r4, #20]
   287f0:	mov	r1, #0
   287f4:	ldr	r0, [r4, #16]
   287f8:	bl	145c4 <memset@plt>
   287fc:	ldr	r2, [r4, #32]
   28800:	ldr	r3, [r2, #8]
   28804:	str	r3, [r4, #20]
   28808:	ldr	r0, [r2]
   2880c:	str	r0, [r4, #28]
   28810:	ldr	r1, [r2, #4]
   28814:	ldr	r3, [r4, #60]	; 0x3c
   28818:	add	r3, r3, r0
   2881c:	str	r3, [r4, #16]
   28820:	ldr	r3, [r4, #64]	; 0x40
   28824:	sub	r3, r3, r0
   28828:	cmp	r3, r1
   2882c:	movcs	r3, r1
   28830:	str	r3, [r4, #24]
   28834:	str	r1, [r2, #4]
   28838:	ldrh	r3, [r4, #130]	; 0x82
   2883c:	ldrh	r2, [r4, #128]	; 0x80
   28840:	cmp	r2, r3
   28844:	strhcc	r3, [r4, #128]	; 0x80
   28848:	ldr	r3, [r4, #32]
   2884c:	ldrh	r2, [r3, #12]
   28850:	strh	r2, [r4, #130]	; 0x82
   28854:	sub	r3, r3, #36	; 0x24
   28858:	str	r3, [r4, #32]
   2885c:	ldr	r3, [r4, #156]	; 0x9c
   28860:	sub	r3, r3, #1
   28864:	str	r3, [r4, #156]	; 0x9c
   28868:	b	28744 <flatcc_builder_end_table@@Base+0x78>
   2886c:			; <UNDEFINED> instruction: 0x9e3779b1
   28870:	andeq	r1, r4, ip, ror #22
   28874:	andeq	r0, r0, r5, lsr #10
   28878:	muleq	r4, ip, sp
   2887c:	andeq	r2, r4, r0, rrx

00028880 <flatcc_builder_create_vector@@Base>:
   28880:	push	{r4, r5, r6, lr}
   28884:	sub	sp, sp, #88	; 0x58
   28888:	mov	r4, r0
   2888c:	ldrh	r0, [sp, #104]	; 0x68
   28890:	ldr	ip, [sp, #108]	; 0x6c
   28894:	cmp	r2, ip
   28898:	bhi	2897c <flatcc_builder_create_vector@@Base+0xfc>
   2889c:	cmp	r0, #4
   288a0:	movcc	r0, #4
   288a4:	ldrh	ip, [r4, #128]	; 0x80
   288a8:	cmp	ip, r0
   288ac:	strhcc	r0, [r4, #128]	; 0x80
   288b0:	mul	r3, r3, r2
   288b4:	str	r2, [sp, #84]	; 0x54
   288b8:	ldr	r2, [r4, #136]	; 0x88
   288bc:	sub	ip, r2, r3
   288c0:	sub	r0, r0, #1
   288c4:	and	r0, r0, ip
   288c8:	mov	ip, #4
   288cc:	str	ip, [sp, #12]
   288d0:	add	lr, sp, #84	; 0x54
   288d4:	str	lr, [sp, #20]
   288d8:	str	ip, [sp, #24]
   288dc:	mov	ip, #1
   288e0:	str	ip, [sp, #16]
   288e4:	cmp	r3, #0
   288e8:	beq	28904 <flatcc_builder_create_vector@@Base+0x84>
   288ec:	add	ip, r3, #4
   288f0:	str	ip, [sp, #12]
   288f4:	str	r1, [sp, #28]
   288f8:	str	r3, [sp, #32]
   288fc:	mov	r3, #2
   28900:	str	r3, [sp, #16]
   28904:	cmp	r0, #0
   28908:	beq	28938 <flatcc_builder_create_vector@@Base+0xb8>
   2890c:	ldr	r3, [sp, #12]
   28910:	add	r3, r3, r0
   28914:	str	r3, [sp, #12]
   28918:	ldr	r3, [sp, #16]
   2891c:	add	r3, r3, #1
   28920:	add	r1, sp, #88	; 0x58
   28924:	add	r1, r1, r3, lsl #3
   28928:	ldr	ip, [pc, #136]	; 289b8 <flatcc_builder_create_vector@@Base+0x138>
   2892c:	str	ip, [r1, #-76]	; 0xffffffb4
   28930:	str	r0, [r1, #-72]	; 0xffffffb8
   28934:	str	r3, [sp, #16]
   28938:	ldr	r3, [sp, #12]
   2893c:	sub	r5, r2, r3
   28940:	cmp	r2, r5
   28944:	ble	28990 <flatcc_builder_create_vector@@Base+0x110>
   28948:	str	r3, [sp]
   2894c:	ldr	r6, [r4, #44]	; 0x2c
   28950:	mov	r3, r5
   28954:	ldr	r2, [sp, #16]
   28958:	add	r1, sp, #20
   2895c:	ldr	r0, [r4, #36]	; 0x24
   28960:	blx	r6
   28964:	cmp	r0, #0
   28968:	bne	289a4 <flatcc_builder_create_vector@@Base+0x124>
   2896c:	str	r5, [r4, #136]	; 0x88
   28970:	mov	r0, r5
   28974:	add	sp, sp, #88	; 0x58
   28978:	pop	{r4, r5, r6, pc}
   2897c:	ldr	r3, [pc, #56]	; 289bc <flatcc_builder_create_vector@@Base+0x13c>
   28980:	ldr	r2, [pc, #56]	; 289c0 <flatcc_builder_create_vector@@Base+0x140>
   28984:	ldr	r1, [pc, #56]	; 289c4 <flatcc_builder_create_vector@@Base+0x144>
   28988:	ldr	r0, [pc, #56]	; 289c8 <flatcc_builder_create_vector@@Base+0x148>
   2898c:	bl	14618 <__assert_fail@plt>
   28990:	ldr	r3, [pc, #52]	; 289cc <flatcc_builder_create_vector@@Base+0x14c>
   28994:	ldr	r2, [pc, #52]	; 289d0 <flatcc_builder_create_vector@@Base+0x150>
   28998:	ldr	r1, [pc, #36]	; 289c4 <flatcc_builder_create_vector@@Base+0x144>
   2899c:	ldr	r0, [pc, #48]	; 289d4 <flatcc_builder_create_vector@@Base+0x154>
   289a0:	bl	14618 <__assert_fail@plt>
   289a4:	ldr	r3, [pc, #32]	; 289cc <flatcc_builder_create_vector@@Base+0x14c>
   289a8:	ldr	r2, [pc, #40]	; 289d8 <flatcc_builder_create_vector@@Base+0x158>
   289ac:	ldr	r1, [pc, #16]	; 289c4 <flatcc_builder_create_vector@@Base+0x144>
   289b0:	ldr	r0, [pc, #28]	; 289d4 <flatcc_builder_create_vector@@Base+0x154>
   289b4:	bl	14618 <__assert_fail@plt>
   289b8:	andeq	r1, r4, ip, asr #12
   289bc:	andeq	r1, r4, r8, lsl #23
   289c0:	andeq	r0, r0, r5, asr r5
   289c4:	muleq	r4, ip, sp
   289c8:	andeq	r2, r4, ip, lsl #1
   289cc:	muleq	r4, r8, r8
   289d0:	andeq	r0, r0, r7, lsl #5
   289d4:	strdeq	r1, [r4], -r0
   289d8:	andeq	r0, r0, fp, lsl #5

000289dc <flatcc_builder_end_vector@@Base>:
   289dc:	push	{r4, r5, lr}
   289e0:	sub	sp, sp, #12
   289e4:	ldr	r1, [r0, #32]
   289e8:	ldrh	r3, [r1, #14]
   289ec:	cmp	r3, #4
   289f0:	bne	28a2c <flatcc_builder_end_vector@@Base+0x50>
   289f4:	mov	r4, r0
   289f8:	ldr	r3, [r1, #16]
   289fc:	ldr	r2, [r1, #20]
   28a00:	ldr	r1, [r1, #24]
   28a04:	str	r1, [sp, #4]
   28a08:	ldrh	r1, [r0, #130]	; 0x82
   28a0c:	str	r1, [sp]
   28a10:	ldr	r1, [r0, #16]
   28a14:	bl	28880 <flatcc_builder_create_vector@@Base>
   28a18:	subs	r5, r0, #0
   28a1c:	bne	28a40 <flatcc_builder_end_vector@@Base+0x64>
   28a20:	mov	r0, r5
   28a24:	add	sp, sp, #12
   28a28:	pop	{r4, r5, pc}
   28a2c:	ldr	r3, [pc, #140]	; 28ac0 <flatcc_builder_end_vector@@Base+0xe4>
   28a30:	ldr	r2, [pc, #140]	; 28ac4 <flatcc_builder_end_vector@@Base+0xe8>
   28a34:	ldr	r1, [pc, #140]	; 28ac8 <flatcc_builder_end_vector@@Base+0xec>
   28a38:	ldr	r0, [pc, #140]	; 28acc <flatcc_builder_end_vector@@Base+0xf0>
   28a3c:	bl	14618 <__assert_fail@plt>
   28a40:	ldr	r2, [r4, #20]
   28a44:	mov	r1, #0
   28a48:	ldr	r0, [r4, #16]
   28a4c:	bl	145c4 <memset@plt>
   28a50:	ldr	r2, [r4, #32]
   28a54:	ldr	r3, [r2, #8]
   28a58:	str	r3, [r4, #20]
   28a5c:	ldr	r0, [r2]
   28a60:	str	r0, [r4, #28]
   28a64:	ldr	r1, [r2, #4]
   28a68:	ldr	r3, [r4, #60]	; 0x3c
   28a6c:	add	r3, r3, r0
   28a70:	str	r3, [r4, #16]
   28a74:	ldr	r3, [r4, #64]	; 0x40
   28a78:	sub	r3, r3, r0
   28a7c:	cmp	r3, r1
   28a80:	movcs	r3, r1
   28a84:	str	r3, [r4, #24]
   28a88:	str	r1, [r2, #4]
   28a8c:	ldrh	r3, [r4, #130]	; 0x82
   28a90:	ldrh	r2, [r4, #128]	; 0x80
   28a94:	cmp	r2, r3
   28a98:	strhcc	r3, [r4, #128]	; 0x80
   28a9c:	ldr	r3, [r4, #32]
   28aa0:	ldrh	r2, [r3, #12]
   28aa4:	strh	r2, [r4, #130]	; 0x82
   28aa8:	sub	r3, r3, #36	; 0x24
   28aac:	str	r3, [r4, #32]
   28ab0:	ldr	r3, [r4, #156]	; 0x9c
   28ab4:	sub	r3, r3, #1
   28ab8:	str	r3, [r4, #156]	; 0x9c
   28abc:	b	28a20 <flatcc_builder_end_vector@@Base+0x44>
   28ac0:	andeq	r1, r4, r8, lsr #23
   28ac4:	andeq	r0, r0, r8, ror r5
   28ac8:	muleq	r4, ip, sp
   28acc:	ldrdeq	r1, [r4], -r4

00028ad0 <flatcc_builder_vector_count@@Base>:
   28ad0:	ldr	r3, [r0, #32]
   28ad4:	ldr	r0, [r3, #20]
   28ad8:	bx	lr

00028adc <flatcc_builder_vector_edit@@Base>:
   28adc:	ldr	r0, [r0, #16]
   28ae0:	bx	lr

00028ae4 <flatcc_builder_create_offset_vector_direct@@Base>:
   28ae4:	push	{r4, lr}
   28ae8:	mov	r3, #0
   28aec:	bl	26288 <flatcc_builder_default_alloc@@Base+0x378>
   28af0:	pop	{r4, pc}

00028af4 <flatcc_builder_end_offset_vector@@Base>:
   28af4:	push	{r4, r5, r6, lr}
   28af8:	ldr	r3, [r0, #32]
   28afc:	ldrh	r2, [r3, #14]
   28b00:	cmp	r2, #5
   28b04:	bne	28b28 <flatcc_builder_end_offset_vector@@Base+0x34>
   28b08:	mov	r4, r0
   28b0c:	ldr	r2, [r3, #20]
   28b10:	ldr	r1, [r0, #16]
   28b14:	bl	28ae4 <flatcc_builder_create_offset_vector_direct@@Base>
   28b18:	subs	r5, r0, #0
   28b1c:	bne	28b3c <flatcc_builder_end_offset_vector@@Base+0x48>
   28b20:	mov	r0, r5
   28b24:	pop	{r4, r5, r6, pc}
   28b28:	ldr	r3, [pc, #140]	; 28bbc <flatcc_builder_end_offset_vector@@Base+0xc8>
   28b2c:	ldr	r2, [pc, #140]	; 28bc0 <flatcc_builder_end_offset_vector@@Base+0xcc>
   28b30:	ldr	r1, [pc, #140]	; 28bc4 <flatcc_builder_end_offset_vector@@Base+0xd0>
   28b34:	ldr	r0, [pc, #140]	; 28bc8 <flatcc_builder_end_offset_vector@@Base+0xd4>
   28b38:	bl	14618 <__assert_fail@plt>
   28b3c:	ldr	r2, [r4, #20]
   28b40:	mov	r1, #0
   28b44:	ldr	r0, [r4, #16]
   28b48:	bl	145c4 <memset@plt>
   28b4c:	ldr	r2, [r4, #32]
   28b50:	ldr	r3, [r2, #8]
   28b54:	str	r3, [r4, #20]
   28b58:	ldr	r0, [r2]
   28b5c:	str	r0, [r4, #28]
   28b60:	ldr	r1, [r2, #4]
   28b64:	ldr	r3, [r4, #60]	; 0x3c
   28b68:	add	r3, r3, r0
   28b6c:	str	r3, [r4, #16]
   28b70:	ldr	r3, [r4, #64]	; 0x40
   28b74:	sub	r3, r3, r0
   28b78:	cmp	r3, r1
   28b7c:	movcs	r3, r1
   28b80:	str	r3, [r4, #24]
   28b84:	str	r1, [r2, #4]
   28b88:	ldrh	r3, [r4, #130]	; 0x82
   28b8c:	ldrh	r2, [r4, #128]	; 0x80
   28b90:	cmp	r2, r3
   28b94:	strhcc	r3, [r4, #128]	; 0x80
   28b98:	ldr	r3, [r4, #32]
   28b9c:	ldrh	r2, [r3, #12]
   28ba0:	strh	r2, [r4, #130]	; 0x82
   28ba4:	sub	r3, r3, #36	; 0x24
   28ba8:	str	r3, [r4, #32]
   28bac:	ldr	r3, [r4, #156]	; 0x9c
   28bb0:	sub	r3, r3, #1
   28bb4:	str	r3, [r4, #156]	; 0x9c
   28bb8:	b	28b20 <flatcc_builder_end_offset_vector@@Base+0x2c>
   28bbc:	andeq	r1, r4, r4, asr #23
   28bc0:	andeq	r0, r0, r8, asr #11
   28bc4:	muleq	r4, ip, sp
   28bc8:	andeq	r1, r4, r0, asr #30

00028bcc <flatcc_builder_create_offset_vector@@Base>:
   28bcc:	push	{r4, r5, r6, lr}
   28bd0:	mov	r4, r0
   28bd4:	mov	r6, r1
   28bd8:	mov	r5, r2
   28bdc:	bl	27a58 <flatcc_builder_start_offset_vector@@Base>
   28be0:	cmp	r0, #0
   28be4:	beq	28bf0 <flatcc_builder_create_offset_vector@@Base+0x24>
   28be8:	mov	r0, #0
   28bec:	pop	{r4, r5, r6, pc}
   28bf0:	mov	r1, r5
   28bf4:	mov	r0, r4
   28bf8:	bl	27428 <flatcc_builder_extend_offset_vector@@Base>
   28bfc:	cmp	r0, #0
   28c00:	beq	28c1c <flatcc_builder_create_offset_vector@@Base+0x50>
   28c04:	lsl	r2, r5, #2
   28c08:	mov	r1, r6
   28c0c:	bl	1454c <memcpy@plt>
   28c10:	mov	r0, r4
   28c14:	bl	28af4 <flatcc_builder_end_offset_vector@@Base>
   28c18:	pop	{r4, r5, r6, pc}
   28c1c:	mov	r0, #0
   28c20:	pop	{r4, r5, r6, pc}

00028c24 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   28c24:	push	{r4, r5, r6, lr}
   28c28:	mov	r4, r0
   28c2c:	ldr	r2, [r0, #32]
   28c30:	ldrh	r0, [r2, #14]
   28c34:	cmp	r0, #5
   28c38:	bne	28c60 <flatcc_builder_end_offset_vector_for_unions@@Base+0x3c>
   28c3c:	mov	r3, r1
   28c40:	ldr	r2, [r2, #20]
   28c44:	ldr	r1, [r4, #16]
   28c48:	mov	r0, r4
   28c4c:	bl	26288 <flatcc_builder_default_alloc@@Base+0x378>
   28c50:	subs	r5, r0, #0
   28c54:	bne	28c74 <flatcc_builder_end_offset_vector_for_unions@@Base+0x50>
   28c58:	mov	r0, r5
   28c5c:	pop	{r4, r5, r6, pc}
   28c60:	ldr	r3, [pc, #140]	; 28cf4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   28c64:	ldr	r2, [pc, #140]	; 28cf8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd4>
   28c68:	ldr	r1, [pc, #140]	; 28cfc <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   28c6c:	ldr	r0, [pc, #140]	; 28d00 <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   28c70:	bl	14618 <__assert_fail@plt>
   28c74:	ldr	r2, [r4, #20]
   28c78:	mov	r1, #0
   28c7c:	ldr	r0, [r4, #16]
   28c80:	bl	145c4 <memset@plt>
   28c84:	ldr	r2, [r4, #32]
   28c88:	ldr	r3, [r2, #8]
   28c8c:	str	r3, [r4, #20]
   28c90:	ldr	r0, [r2]
   28c94:	str	r0, [r4, #28]
   28c98:	ldr	r1, [r2, #4]
   28c9c:	ldr	r3, [r4, #60]	; 0x3c
   28ca0:	add	r3, r3, r0
   28ca4:	str	r3, [r4, #16]
   28ca8:	ldr	r3, [r4, #64]	; 0x40
   28cac:	sub	r3, r3, r0
   28cb0:	cmp	r3, r1
   28cb4:	movcs	r3, r1
   28cb8:	str	r3, [r4, #24]
   28cbc:	str	r1, [r2, #4]
   28cc0:	ldrh	r3, [r4, #130]	; 0x82
   28cc4:	ldrh	r2, [r4, #128]	; 0x80
   28cc8:	cmp	r2, r3
   28ccc:	strhcc	r3, [r4, #128]	; 0x80
   28cd0:	ldr	r3, [r4, #32]
   28cd4:	ldrh	r2, [r3, #12]
   28cd8:	strh	r2, [r4, #130]	; 0x82
   28cdc:	sub	r3, r3, #36	; 0x24
   28ce0:	str	r3, [r4, #32]
   28ce4:	ldr	r3, [r4, #156]	; 0x9c
   28ce8:	sub	r3, r3, #1
   28cec:	str	r3, [r4, #156]	; 0x9c
   28cf0:	b	28c58 <flatcc_builder_end_offset_vector_for_unions@@Base+0x34>
   28cf4:	andeq	r1, r4, r8, ror #23
   28cf8:	ldrdeq	r0, [r0], -r5
   28cfc:	muleq	r4, ip, sp
   28d00:	andeq	r1, r4, r0, asr #30

00028d04 <flatcc_builder_offset_vector_edit@@Base>:
   28d04:	ldr	r0, [r0, #16]
   28d08:	bx	lr

00028d0c <flatcc_builder_offset_vector_count@@Base>:
   28d0c:	ldr	r3, [r0, #32]
   28d10:	ldr	r0, [r3, #20]
   28d14:	bx	lr

00028d18 <flatcc_builder_create_union_vector_direct@@Base>:
   28d18:	push	{r4, r5, r6, r7, lr}
   28d1c:	sub	sp, sp, #12
   28d20:	mov	r4, r0
   28d24:	mov	r5, r1
   28d28:	mov	r6, r2
   28d2c:	mov	r1, r3
   28d30:	mov	r3, r2
   28d34:	ldr	r2, [sp, #32]
   28d38:	mov	r0, r5
   28d3c:	bl	26288 <flatcc_builder_default_alloc@@Base+0x378>
   28d40:	subs	r7, r0, #0
   28d44:	bne	28d60 <flatcc_builder_create_union_vector_direct@@Base+0x48>
   28d48:	mov	r3, #0
   28d4c:	str	r3, [r4]
   28d50:	str	r3, [r4, #4]
   28d54:	mov	r0, r4
   28d58:	add	sp, sp, #12
   28d5c:	pop	{r4, r5, r6, r7, pc}
   28d60:	mvn	r3, #0
   28d64:	str	r3, [sp, #4]
   28d68:	mov	r3, #1
   28d6c:	str	r3, [sp]
   28d70:	ldr	r2, [sp, #32]
   28d74:	mov	r1, r6
   28d78:	mov	r0, r5
   28d7c:	bl	28880 <flatcc_builder_create_vector@@Base>
   28d80:	cmp	r0, #0
   28d84:	moveq	r3, #0
   28d88:	streq	r3, [r4]
   28d8c:	strne	r0, [r4]
   28d90:	str	r7, [r4, #4]
   28d94:	b	28d54 <flatcc_builder_create_union_vector_direct@@Base+0x3c>

00028d98 <flatcc_builder_create_union_vector@@Base>:
   28d98:	push	{r4, r5, r6, r7, r8, lr}
   28d9c:	sub	sp, sp, #16
   28da0:	mov	r5, r0
   28da4:	mov	r4, r1
   28da8:	mov	r7, r2
   28dac:	mov	r6, r3
   28db0:	mov	r0, r1
   28db4:	bl	27a58 <flatcc_builder_start_offset_vector@@Base>
   28db8:	cmp	r0, #0
   28dbc:	beq	28dd8 <flatcc_builder_create_union_vector@@Base+0x40>
   28dc0:	mov	r3, #0
   28dc4:	str	r3, [r5]
   28dc8:	str	r3, [r5, #4]
   28dcc:	mov	r0, r5
   28dd0:	add	sp, sp, #16
   28dd4:	pop	{r4, r5, r6, r7, r8, pc}
   28dd8:	mov	r1, r6
   28ddc:	mov	r0, r4
   28de0:	bl	27428 <flatcc_builder_extend_offset_vector@@Base>
   28de4:	cmp	r0, #0
   28de8:	moveq	r3, #0
   28dec:	streq	r3, [r5]
   28df0:	streq	r3, [r5, #4]
   28df4:	beq	28dcc <flatcc_builder_create_union_vector@@Base+0x34>
   28df8:	ldr	r8, [r4, #20]
   28dfc:	add	r1, r6, r8
   28e00:	str	r1, [r4, #20]
   28e04:	ldr	r3, [r4, #24]
   28e08:	cmp	r1, r3
   28e0c:	bcs	28ef0 <flatcc_builder_create_union_vector@@Base+0x158>
   28e10:	ldr	r3, [r4, #16]
   28e14:	adds	r2, r3, r8
   28e18:	beq	28f08 <flatcc_builder_create_union_vector@@Base+0x170>
   28e1c:	cmp	r6, #0
   28e20:	beq	28e50 <flatcc_builder_create_union_vector@@Base+0xb8>
   28e24:	mov	r1, r7
   28e28:	sub	ip, r2, #1
   28e2c:	sub	r0, r3, #4
   28e30:	add	r7, r7, r6, lsl #3
   28e34:	ldrb	lr, [r1]
   28e38:	strb	lr, [ip, #1]!
   28e3c:	ldr	lr, [r1, #4]
   28e40:	str	lr, [r0, #4]!
   28e44:	add	r1, r1, #8
   28e48:	cmp	r1, r7
   28e4c:	bne	28e34 <flatcc_builder_create_union_vector@@Base+0x9c>
   28e50:	str	r6, [sp]
   28e54:	mov	r1, r4
   28e58:	add	r0, sp, #8
   28e5c:	bl	28d18 <flatcc_builder_create_union_vector_direct@@Base>
   28e60:	ldr	r7, [sp, #8]
   28e64:	ldr	r6, [sp, #12]
   28e68:	ldr	r2, [r4, #20]
   28e6c:	mov	r1, #0
   28e70:	ldr	r0, [r4, #16]
   28e74:	bl	145c4 <memset@plt>
   28e78:	ldr	r2, [r4, #32]
   28e7c:	ldr	r3, [r2, #8]
   28e80:	str	r3, [r4, #20]
   28e84:	ldr	r0, [r2]
   28e88:	str	r0, [r4, #28]
   28e8c:	ldr	r1, [r2, #4]
   28e90:	ldr	r3, [r4, #60]	; 0x3c
   28e94:	add	r3, r3, r0
   28e98:	str	r3, [r4, #16]
   28e9c:	ldr	r3, [r4, #64]	; 0x40
   28ea0:	sub	r3, r3, r0
   28ea4:	cmp	r3, r1
   28ea8:	movcs	r3, r1
   28eac:	str	r3, [r4, #24]
   28eb0:	str	r1, [r2, #4]
   28eb4:	ldrh	r3, [r4, #130]	; 0x82
   28eb8:	ldrh	r2, [r4, #128]	; 0x80
   28ebc:	cmp	r2, r3
   28ec0:	strhcc	r3, [r4, #128]	; 0x80
   28ec4:	ldr	r3, [r4, #32]
   28ec8:	ldrh	r2, [r3, #12]
   28ecc:	strh	r2, [r4, #130]	; 0x82
   28ed0:	sub	r3, r3, #36	; 0x24
   28ed4:	str	r3, [r4, #32]
   28ed8:	ldr	r3, [r4, #156]	; 0x9c
   28edc:	sub	r3, r3, #1
   28ee0:	str	r3, [r4, #156]	; 0x9c
   28ee4:	str	r7, [r5]
   28ee8:	str	r6, [r5, #4]
   28eec:	b	28dcc <flatcc_builder_create_union_vector@@Base+0x34>
   28ef0:	mvn	r2, #3
   28ef4:	add	r1, r1, #1
   28ef8:	mov	r0, r4
   28efc:	bl	25e9c <main@@Base+0xd94>
   28f00:	cmp	r0, #0
   28f04:	beq	28e10 <flatcc_builder_create_union_vector@@Base+0x78>
   28f08:	mov	r3, #0
   28f0c:	str	r3, [r5]
   28f10:	str	r3, [r5, #4]
   28f14:	b	28dcc <flatcc_builder_create_union_vector@@Base+0x34>

00028f18 <flatcc_builder_start_union_vector@@Base>:
   28f18:	push	{r4, lr}
   28f1c:	mov	r4, r0
   28f20:	mov	r1, #4
   28f24:	bl	2613c <flatcc_builder_default_alloc@@Base+0x22c>
   28f28:	cmp	r0, #0
   28f2c:	bne	28f88 <flatcc_builder_start_union_vector@@Base+0x70>
   28f30:	ldr	r3, [r4, #32]
   28f34:	mov	r2, #8
   28f38:	str	r2, [r3, #16]
   28f3c:	ldr	r3, [r4, #32]
   28f40:	mov	r2, #0
   28f44:	str	r2, [r3, #20]
   28f48:	ldr	r3, [r4, #32]
   28f4c:	mov	r2, #7
   28f50:	strh	r2, [r3, #14]
   28f54:	ldr	r1, [r4, #28]
   28f58:	ldr	r2, [r4, #60]	; 0x3c
   28f5c:	add	r2, r2, r1
   28f60:	str	r2, [r4, #16]
   28f64:	ldr	r3, [r4, #64]	; 0x40
   28f68:	sub	r3, r3, r1
   28f6c:	cmn	r3, #4
   28f70:	mvnhi	r3, #3
   28f74:	str	r3, [r4, #24]
   28f78:	ldr	r3, [r4, #32]
   28f7c:	mvn	r2, #3
   28f80:	str	r2, [r3, #4]
   28f84:	pop	{r4, pc}
   28f88:	mvn	r0, #0
   28f8c:	pop	{r4, pc}

00028f90 <flatcc_builder_end_union_vector@@Base>:
   28f90:	push	{r4, r5, r6, r7, r8, lr}
   28f94:	sub	sp, sp, #16
   28f98:	ldr	r3, [r1, #32]
   28f9c:	ldrh	r2, [r3, #14]
   28fa0:	cmp	r2, #7
   28fa4:	bne	290bc <flatcc_builder_end_union_vector@@Base+0x12c>
   28fa8:	mov	r6, r0
   28fac:	mov	r4, r1
   28fb0:	ldr	r5, [r3, #20]
   28fb4:	ldr	r8, [r1, #20]
   28fb8:	add	r1, r5, r5, lsl #2
   28fbc:	add	r1, r1, r8
   28fc0:	str	r1, [r4, #20]
   28fc4:	ldr	r3, [r4, #24]
   28fc8:	cmp	r1, r3
   28fcc:	bcs	290d0 <flatcc_builder_end_union_vector@@Base+0x140>
   28fd0:	ldr	r7, [r4, #16]
   28fd4:	adds	r3, r7, r8
   28fd8:	beq	290e8 <flatcc_builder_end_union_vector@@Base+0x158>
   28fdc:	add	r2, r3, r5, lsl #2
   28fe0:	cmp	r5, #0
   28fe4:	beq	29014 <flatcc_builder_end_union_vector@@Base+0x84>
   28fe8:	mov	r1, r7
   28fec:	sub	ip, r2, #1
   28ff0:	sub	r0, r3, #4
   28ff4:	add	r7, r7, r5, lsl #3
   28ff8:	ldrb	lr, [r1]
   28ffc:	strb	lr, [ip, #1]!
   29000:	ldr	lr, [r1, #4]
   29004:	str	lr, [r0, #4]!
   29008:	add	r1, r1, #8
   2900c:	cmp	r1, r7
   29010:	bne	28ff8 <flatcc_builder_end_union_vector@@Base+0x68>
   29014:	str	r5, [sp]
   29018:	mov	r1, r4
   2901c:	add	r0, sp, #8
   29020:	bl	28d18 <flatcc_builder_create_union_vector_direct@@Base>
   29024:	ldr	r7, [sp, #8]
   29028:	ldr	r5, [sp, #12]
   2902c:	ldr	r2, [r4, #20]
   29030:	mov	r1, #0
   29034:	ldr	r0, [r4, #16]
   29038:	bl	145c4 <memset@plt>
   2903c:	ldr	r2, [r4, #32]
   29040:	ldr	r3, [r2, #8]
   29044:	str	r3, [r4, #20]
   29048:	ldr	r0, [r2]
   2904c:	str	r0, [r4, #28]
   29050:	ldr	r1, [r2, #4]
   29054:	ldr	r3, [r4, #60]	; 0x3c
   29058:	add	r3, r3, r0
   2905c:	str	r3, [r4, #16]
   29060:	ldr	r3, [r4, #64]	; 0x40
   29064:	sub	r3, r3, r0
   29068:	cmp	r3, r1
   2906c:	movcs	r3, r1
   29070:	str	r3, [r4, #24]
   29074:	str	r1, [r2, #4]
   29078:	ldrh	r3, [r4, #130]	; 0x82
   2907c:	ldrh	r2, [r4, #128]	; 0x80
   29080:	cmp	r2, r3
   29084:	strhcc	r3, [r4, #128]	; 0x80
   29088:	ldr	r3, [r4, #32]
   2908c:	ldrh	r2, [r3, #12]
   29090:	strh	r2, [r4, #130]	; 0x82
   29094:	sub	r3, r3, #36	; 0x24
   29098:	str	r3, [r4, #32]
   2909c:	ldr	r3, [r4, #156]	; 0x9c
   290a0:	sub	r3, r3, #1
   290a4:	str	r3, [r4, #156]	; 0x9c
   290a8:	str	r7, [r6]
   290ac:	str	r5, [r6, #4]
   290b0:	mov	r0, r6
   290b4:	add	sp, sp, #16
   290b8:	pop	{r4, r5, r6, r7, r8, pc}
   290bc:	ldr	r3, [pc, #52]	; 290f8 <flatcc_builder_end_union_vector@@Base+0x168>
   290c0:	ldr	r2, [pc, #52]	; 290fc <flatcc_builder_end_union_vector@@Base+0x16c>
   290c4:	ldr	r1, [pc, #52]	; 29100 <flatcc_builder_end_union_vector@@Base+0x170>
   290c8:	ldr	r0, [pc, #52]	; 29104 <flatcc_builder_end_union_vector@@Base+0x174>
   290cc:	bl	14618 <__assert_fail@plt>
   290d0:	mvn	r2, #3
   290d4:	add	r1, r1, #1
   290d8:	mov	r0, r4
   290dc:	bl	25e9c <main@@Base+0xd94>
   290e0:	cmp	r0, #0
   290e4:	beq	28fd0 <flatcc_builder_end_union_vector@@Base+0x40>
   290e8:	mov	r3, #0
   290ec:	str	r3, [r6]
   290f0:	str	r3, [r6, #4]
   290f4:	b	290b0 <flatcc_builder_end_union_vector@@Base+0x120>
   290f8:	andeq	r1, r4, r4, lsl ip
   290fc:	andeq	r0, r0, r1, asr r6
   29100:	muleq	r4, ip, sp
   29104:	andeq	r2, r4, r0, lsr #1

00029108 <flatcc_builder_union_vector_edit@@Base>:
   29108:	ldr	r0, [r0, #16]
   2910c:	bx	lr

00029110 <flatcc_builder_union_vector_count@@Base>:
   29110:	ldr	r3, [r0, #32]
   29114:	ldr	r0, [r3, #20]
   29118:	bx	lr

0002911c <flatcc_builder_extend_union_vector@@Base>:
   2911c:	push	{r4, r5, r6, lr}
   29120:	mov	r4, r0
   29124:	ldr	r2, [r0, #32]
   29128:	ldr	r3, [r2, #20]
   2912c:	adds	r3, r1, r3
   29130:	movcs	ip, #1
   29134:	movcc	ip, #0
   29138:	cmn	r3, #-536870911	; 0xe0000001
   2913c:	movls	r0, #0
   29140:	movhi	r0, #1
   29144:	orrs	r0, ip, r0
   29148:	bne	29174 <flatcc_builder_extend_union_vector@@Base+0x58>
   2914c:	str	r3, [r2, #20]
   29150:	ldr	r5, [r4, #20]
   29154:	add	r1, r5, r1, lsl #3
   29158:	str	r1, [r4, #20]
   2915c:	ldr	r3, [r4, #24]
   29160:	cmp	r1, r3
   29164:	bcs	29188 <flatcc_builder_extend_union_vector@@Base+0x6c>
   29168:	ldr	r0, [r4, #16]
   2916c:	add	r0, r0, r5
   29170:	pop	{r4, r5, r6, pc}
   29174:	ldr	r3, [pc, #44]	; 291a8 <flatcc_builder_extend_union_vector@@Base+0x8c>
   29178:	mov	r2, #892	; 0x37c
   2917c:	ldr	r1, [pc, #40]	; 291ac <flatcc_builder_extend_union_vector@@Base+0x90>
   29180:	ldr	r0, [pc, #40]	; 291b0 <flatcc_builder_extend_union_vector@@Base+0x94>
   29184:	bl	14618 <__assert_fail@plt>
   29188:	mvn	r2, #3
   2918c:	add	r1, r1, #1
   29190:	mov	r0, r4
   29194:	bl	25e9c <main@@Base+0xd94>
   29198:	cmp	r0, #0
   2919c:	beq	29168 <flatcc_builder_extend_union_vector@@Base+0x4c>
   291a0:	mov	r0, #0
   291a4:	pop	{r4, r5, r6, pc}
   291a8:	andeq	r1, r4, ip, ror r9
   291ac:	muleq	r4, ip, sp
   291b0:			; <UNDEFINED> instruction: 0x00041eb8

000291b4 <flatcc_builder_truncate_union_vector@@Base>:
   291b4:	push	{r4, lr}
   291b8:	ldr	ip, [r0, #32]
   291bc:	ldrh	r3, [ip, #14]
   291c0:	cmp	r3, #7
   291c4:	bne	2920c <flatcc_builder_truncate_union_vector@@Base+0x58>
   291c8:	ldr	r3, [ip, #20]
   291cc:	cmp	r3, r1
   291d0:	bcc	29220 <flatcc_builder_truncate_union_vector@@Base+0x6c>
   291d4:	sub	r3, r3, r1
   291d8:	str	r3, [ip, #20]
   291dc:	ldr	r3, [r0, #32]
   291e0:	ldr	r2, [r3, #16]
   291e4:	mul	r2, r2, r1
   291e8:	ldr	r3, [r0, #20]
   291ec:	sub	r3, r3, r2
   291f0:	str	r3, [r0, #20]
   291f4:	ldr	r0, [r0, #16]
   291f8:	mov	r1, #0
   291fc:	add	r0, r0, r3
   29200:	bl	145c4 <memset@plt>
   29204:	mov	r0, #0
   29208:	pop	{r4, pc}
   2920c:	ldr	r3, [pc, #32]	; 29234 <flatcc_builder_truncate_union_vector@@Base+0x80>
   29210:	ldr	r2, [pc, #32]	; 29238 <flatcc_builder_truncate_union_vector@@Base+0x84>
   29214:	ldr	r1, [pc, #32]	; 2923c <flatcc_builder_truncate_union_vector@@Base+0x88>
   29218:	ldr	r0, [pc, #32]	; 29240 <flatcc_builder_truncate_union_vector@@Base+0x8c>
   2921c:	bl	14618 <__assert_fail@plt>
   29220:	ldr	r3, [pc, #12]	; 29234 <flatcc_builder_truncate_union_vector@@Base+0x80>
   29224:	ldr	r2, [pc, #24]	; 29244 <flatcc_builder_truncate_union_vector@@Base+0x90>
   29228:	ldr	r1, [pc, #12]	; 2923c <flatcc_builder_truncate_union_vector@@Base+0x88>
   2922c:	ldr	r0, [pc, #20]	; 29248 <flatcc_builder_truncate_union_vector@@Base+0x94>
   29230:	bl	14618 <__assert_fail@plt>
   29234:	andeq	r1, r4, r4, lsr ip
   29238:	andeq	r0, r0, r1, lsl #13
   2923c:	muleq	r4, ip, sp
   29240:	andeq	r2, r4, r0, lsr #1
   29244:	andeq	r0, r0, r2, lsl #13
   29248:	andeq	r1, r4, r4, asr #31

0002924c <flatcc_builder_union_vector_push@@Base>:
   2924c:	push	{r4, r5, lr}
   29250:	sub	sp, sp, #12
   29254:	add	r3, sp, #8
   29258:	stmdb	r3, {r1, r2}
   2925c:	ldr	r2, [r0, #32]
   29260:	ldrh	r3, [r2, #14]
   29264:	cmp	r3, #7
   29268:	bne	292c0 <flatcc_builder_union_vector_push@@Base+0x74>
   2926c:	mov	r4, r0
   29270:	ldr	r3, [r2, #20]
   29274:	cmn	r3, #-536870911	; 0xe0000001
   29278:	beq	292f0 <flatcc_builder_union_vector_push@@Base+0xa4>
   2927c:	add	r3, r3, #1
   29280:	str	r3, [r2, #20]
   29284:	ldr	r5, [r0, #20]
   29288:	add	r3, r5, #8
   2928c:	str	r3, [r0, #20]
   29290:	ldr	r2, [r0, #24]
   29294:	cmp	r3, r2
   29298:	bcs	292d4 <flatcc_builder_union_vector_push@@Base+0x88>
   2929c:	ldr	r3, [r4, #16]
   292a0:	adds	r3, r3, r5
   292a4:	moveq	r0, r3
   292a8:	addne	r2, sp, #8
   292ac:	ldmdbne	r2, {r0, r1}
   292b0:	stmne	r3, {r0, r1}
   292b4:	movne	r0, r3
   292b8:	add	sp, sp, #12
   292bc:	pop	{r4, r5, pc}
   292c0:	ldr	r3, [pc, #48]	; 292f8 <flatcc_builder_union_vector_push@@Base+0xac>
   292c4:	ldr	r2, [pc, #48]	; 292fc <flatcc_builder_union_vector_push@@Base+0xb0>
   292c8:	ldr	r1, [pc, #48]	; 29300 <flatcc_builder_union_vector_push@@Base+0xb4>
   292cc:	ldr	r0, [pc, #48]	; 29304 <flatcc_builder_union_vector_push@@Base+0xb8>
   292d0:	bl	14618 <__assert_fail@plt>
   292d4:	mvn	r2, #3
   292d8:	add	r1, r5, #9
   292dc:	bl	25e9c <main@@Base+0xd94>
   292e0:	cmp	r0, #0
   292e4:	beq	2929c <flatcc_builder_union_vector_push@@Base+0x50>
   292e8:	mov	r0, #0
   292ec:	b	292b8 <flatcc_builder_union_vector_push@@Base+0x6c>
   292f0:	mov	r0, #0
   292f4:	b	292b8 <flatcc_builder_union_vector_push@@Base+0x6c>
   292f8:	andeq	r1, r4, ip, asr ip
   292fc:	andeq	r0, r0, sp, lsl #13
   29300:	muleq	r4, ip, sp
   29304:	andeq	r2, r4, r0, lsr #1

00029308 <flatcc_builder_append_union_vector@@Base>:
   29308:	push	{r4, r5, r6, r7, r8, lr}
   2930c:	mov	r6, r1
   29310:	ldr	r1, [r0, #32]
   29314:	ldrh	r3, [r1, #14]
   29318:	cmp	r3, #7
   2931c:	bne	2938c <flatcc_builder_append_union_vector@@Base+0x84>
   29320:	mov	r5, r0
   29324:	ldr	r3, [r1, #20]
   29328:	adds	r3, r2, r3
   2932c:	movcs	ip, #1
   29330:	movcc	ip, #0
   29334:	cmn	r3, #-536870911	; 0xe0000001
   29338:	movls	r0, #0
   2933c:	movhi	r0, #1
   29340:	orrs	r0, ip, r0
   29344:	bne	293a0 <flatcc_builder_append_union_vector@@Base+0x98>
   29348:	str	r3, [r1, #20]
   2934c:	lsl	r4, r2, #3
   29350:	ldr	r7, [r5, #20]
   29354:	add	r1, r4, r7
   29358:	str	r1, [r5, #20]
   2935c:	ldr	r3, [r5, #24]
   29360:	cmp	r1, r3
   29364:	bcs	293b4 <flatcc_builder_append_union_vector@@Base+0xac>
   29368:	ldr	r5, [r5, #16]
   2936c:	adds	r5, r5, r7
   29370:	beq	29384 <flatcc_builder_append_union_vector@@Base+0x7c>
   29374:	mov	r2, r4
   29378:	mov	r1, r6
   2937c:	mov	r0, r5
   29380:	bl	1454c <memcpy@plt>
   29384:	mov	r0, r5
   29388:	pop	{r4, r5, r6, r7, r8, pc}
   2938c:	ldr	r3, [pc, #64]	; 293d4 <flatcc_builder_append_union_vector@@Base+0xcc>
   29390:	ldr	r2, [pc, #64]	; 293d8 <flatcc_builder_append_union_vector@@Base+0xd0>
   29394:	ldr	r1, [pc, #64]	; 293dc <flatcc_builder_append_union_vector@@Base+0xd4>
   29398:	ldr	r0, [pc, #64]	; 293e0 <flatcc_builder_append_union_vector@@Base+0xd8>
   2939c:	bl	14618 <__assert_fail@plt>
   293a0:	ldr	r3, [pc, #60]	; 293e4 <flatcc_builder_append_union_vector@@Base+0xdc>
   293a4:	mov	r2, #892	; 0x37c
   293a8:	ldr	r1, [pc, #44]	; 293dc <flatcc_builder_append_union_vector@@Base+0xd4>
   293ac:	ldr	r0, [pc, #52]	; 293e8 <flatcc_builder_append_union_vector@@Base+0xe0>
   293b0:	bl	14618 <__assert_fail@plt>
   293b4:	mvn	r2, #3
   293b8:	add	r1, r1, #1
   293bc:	mov	r0, r5
   293c0:	bl	25e9c <main@@Base+0xd94>
   293c4:	cmp	r0, #0
   293c8:	beq	29368 <flatcc_builder_append_union_vector@@Base+0x60>
   293cc:	mov	r5, #0
   293d0:	b	29384 <flatcc_builder_append_union_vector@@Base+0x7c>
   293d4:	andeq	r1, r4, r0, lsl #25
   293d8:	muleq	r0, ip, r6
   293dc:	muleq	r4, ip, sp
   293e0:	andeq	r2, r4, r0, lsr #1
   293e4:	andeq	r1, r4, ip, ror r9
   293e8:			; <UNDEFINED> instruction: 0x00041eb8

000293ec <flatcc_builder_create_string@@Base>:
   293ec:	push	{r4, r5, r6, lr}
   293f0:	sub	sp, sp, #88	; 0x58
   293f4:	mov	r5, r0
   293f8:	str	r2, [sp, #84]	; 0x54
   293fc:	ldr	r0, [r0, #136]	; 0x88
   29400:	sub	r3, r0, r2
   29404:	sub	r3, r3, #1
   29408:	and	r3, r3, #3
   2940c:	add	r3, r3, #1
   29410:	mov	ip, #4
   29414:	str	ip, [sp, #12]
   29418:	add	lr, sp, #84	; 0x54
   2941c:	str	lr, [sp, #20]
   29420:	str	ip, [sp, #24]
   29424:	mov	ip, #1
   29428:	str	ip, [sp, #16]
   2942c:	cmp	r2, #0
   29430:	beq	2944c <flatcc_builder_create_string@@Base+0x60>
   29434:	add	ip, r2, #4
   29438:	str	ip, [sp, #12]
   2943c:	str	r1, [sp, #28]
   29440:	str	r2, [sp, #32]
   29444:	mov	r2, #2
   29448:	str	r2, [sp, #16]
   2944c:	cmp	r3, #0
   29450:	beq	29480 <flatcc_builder_create_string@@Base+0x94>
   29454:	ldr	r2, [sp, #12]
   29458:	add	r2, r2, r3
   2945c:	str	r2, [sp, #12]
   29460:	ldr	r2, [sp, #16]
   29464:	add	r2, r2, #1
   29468:	add	r1, sp, #88	; 0x58
   2946c:	add	r1, r1, r2, lsl #3
   29470:	ldr	ip, [pc, #116]	; 294ec <flatcc_builder_create_string@@Base+0x100>
   29474:	str	ip, [r1, #-76]	; 0xffffffb4
   29478:	str	r3, [r1, #-72]	; 0xffffffb8
   2947c:	str	r2, [sp, #16]
   29480:	ldr	r3, [sp, #12]
   29484:	sub	r4, r0, r3
   29488:	cmp	r0, r4
   2948c:	ble	294c4 <flatcc_builder_create_string@@Base+0xd8>
   29490:	str	r3, [sp]
   29494:	ldr	r6, [r5, #44]	; 0x2c
   29498:	mov	r3, r4
   2949c:	ldr	r2, [sp, #16]
   294a0:	add	r1, sp, #20
   294a4:	ldr	r0, [r5, #36]	; 0x24
   294a8:	blx	r6
   294ac:	cmp	r0, #0
   294b0:	bne	294d8 <flatcc_builder_create_string@@Base+0xec>
   294b4:	str	r4, [r5, #136]	; 0x88
   294b8:	mov	r0, r4
   294bc:	add	sp, sp, #88	; 0x58
   294c0:	pop	{r4, r5, r6, pc}
   294c4:	ldr	r3, [pc, #36]	; 294f0 <flatcc_builder_create_string@@Base+0x104>
   294c8:	ldr	r2, [pc, #36]	; 294f4 <flatcc_builder_create_string@@Base+0x108>
   294cc:	ldr	r1, [pc, #36]	; 294f8 <flatcc_builder_create_string@@Base+0x10c>
   294d0:	ldr	r0, [pc, #36]	; 294fc <flatcc_builder_create_string@@Base+0x110>
   294d4:	bl	14618 <__assert_fail@plt>
   294d8:	ldr	r3, [pc, #16]	; 294f0 <flatcc_builder_create_string@@Base+0x104>
   294dc:	ldr	r2, [pc, #28]	; 29500 <flatcc_builder_create_string@@Base+0x114>
   294e0:	ldr	r1, [pc, #16]	; 294f8 <flatcc_builder_create_string@@Base+0x10c>
   294e4:	ldr	r0, [pc, #16]	; 294fc <flatcc_builder_create_string@@Base+0x110>
   294e8:	bl	14618 <__assert_fail@plt>
   294ec:	andeq	r1, r4, ip, asr #12
   294f0:	muleq	r4, r8, r8
   294f4:	andeq	r0, r0, r7, lsl #5
   294f8:	muleq	r4, ip, sp
   294fc:	strdeq	r1, [r4], -r0
   29500:	andeq	r0, r0, fp, lsl #5

00029504 <flatcc_builder_create_string_str@@Base>:
   29504:	push	{r4, r5, r6, lr}
   29508:	mov	r5, r0
   2950c:	mov	r4, r1
   29510:	mov	r0, r1
   29514:	bl	145a0 <strlen@plt>
   29518:	mov	r2, r0
   2951c:	mov	r1, r4
   29520:	mov	r0, r5
   29524:	bl	293ec <flatcc_builder_create_string@@Base>
   29528:	pop	{r4, r5, r6, pc}

0002952c <flatcc_builder_create_string_strn@@Base>:
   2952c:	push	{r4, r5, r6, lr}
   29530:	mov	r6, r0
   29534:	mov	r4, r1
   29538:	mov	r5, r2
   2953c:	mov	r1, #0
   29540:	mov	r0, r4
   29544:	bl	145e8 <memchr@plt>
   29548:	cmp	r0, #0
   2954c:	subne	r5, r0, r4
   29550:	mov	r2, r5
   29554:	mov	r1, r4
   29558:	mov	r0, r6
   2955c:	bl	293ec <flatcc_builder_create_string@@Base>
   29560:	pop	{r4, r5, r6, pc}

00029564 <flatcc_builder_end_string@@Base>:
   29564:	push	{r4, r5, r6, lr}
   29568:	ldr	r3, [r0, #32]
   2956c:	ldrh	r2, [r3, #14]
   29570:	cmp	r2, #6
   29574:	bne	295a4 <flatcc_builder_end_string@@Base+0x40>
   29578:	mov	r4, r0
   2957c:	ldr	r2, [r3, #20]
   29580:	ldr	r3, [r0, #20]
   29584:	cmp	r2, r3
   29588:	bne	295b8 <flatcc_builder_end_string@@Base+0x54>
   2958c:	ldr	r1, [r0, #16]
   29590:	bl	293ec <flatcc_builder_create_string@@Base>
   29594:	subs	r5, r0, #0
   29598:	bne	295cc <flatcc_builder_end_string@@Base+0x68>
   2959c:	mov	r0, r5
   295a0:	pop	{r4, r5, r6, pc}
   295a4:	ldr	r3, [pc, #160]	; 2964c <flatcc_builder_end_string@@Base+0xe8>
   295a8:	ldr	r2, [pc, #160]	; 29650 <flatcc_builder_end_string@@Base+0xec>
   295ac:	ldr	r1, [pc, #160]	; 29654 <flatcc_builder_end_string@@Base+0xf0>
   295b0:	ldr	r0, [pc, #160]	; 29658 <flatcc_builder_end_string@@Base+0xf4>
   295b4:	bl	14618 <__assert_fail@plt>
   295b8:	ldr	r3, [pc, #140]	; 2964c <flatcc_builder_end_string@@Base+0xe8>
   295bc:	ldr	r2, [pc, #152]	; 2965c <flatcc_builder_end_string@@Base+0xf8>
   295c0:	ldr	r1, [pc, #140]	; 29654 <flatcc_builder_end_string@@Base+0xf0>
   295c4:	ldr	r0, [pc, #148]	; 29660 <flatcc_builder_end_string@@Base+0xfc>
   295c8:	bl	14618 <__assert_fail@plt>
   295cc:	ldr	r2, [r4, #20]
   295d0:	mov	r1, #0
   295d4:	ldr	r0, [r4, #16]
   295d8:	bl	145c4 <memset@plt>
   295dc:	ldr	r2, [r4, #32]
   295e0:	ldr	r3, [r2, #8]
   295e4:	str	r3, [r4, #20]
   295e8:	ldr	r0, [r2]
   295ec:	str	r0, [r4, #28]
   295f0:	ldr	r1, [r2, #4]
   295f4:	ldr	r3, [r4, #60]	; 0x3c
   295f8:	add	r3, r3, r0
   295fc:	str	r3, [r4, #16]
   29600:	ldr	r3, [r4, #64]	; 0x40
   29604:	sub	r3, r3, r0
   29608:	cmp	r3, r1
   2960c:	movcs	r3, r1
   29610:	str	r3, [r4, #24]
   29614:	str	r1, [r2, #4]
   29618:	ldrh	r3, [r4, #130]	; 0x82
   2961c:	ldrh	r2, [r4, #128]	; 0x80
   29620:	cmp	r2, r3
   29624:	strhcc	r3, [r4, #128]	; 0x80
   29628:	ldr	r3, [r4, #32]
   2962c:	ldrh	r2, [r3, #12]
   29630:	strh	r2, [r4, #130]	; 0x82
   29634:	sub	r3, r3, #36	; 0x24
   29638:	str	r3, [r4, #32]
   2963c:	ldr	r3, [r4, #156]	; 0x9c
   29640:	sub	r3, r3, #1
   29644:	str	r3, [r4, #156]	; 0x9c
   29648:	b	2959c <flatcc_builder_end_string@@Base+0x38>
   2964c:	andeq	r1, r4, r4, lsr #25
   29650:	andeq	r0, r0, r4, asr #13
   29654:	muleq	r4, ip, sp
   29658:	andeq	r1, r4, r4, ror pc
   2965c:	andeq	r0, r0, r5, asr #13
   29660:	ldrdeq	r2, [r4], -r4

00029664 <flatcc_builder_string_edit@@Base>:
   29664:	ldr	r0, [r0, #16]
   29668:	bx	lr

0002966c <flatcc_builder_string_len@@Base>:
   2966c:	ldr	r3, [r0, #32]
   29670:	ldr	r0, [r3, #20]
   29674:	bx	lr

00029678 <flatcc_builder_table_add@@Base>:
   29678:	push	{r4, r5, r6, r7, r8, lr}
   2967c:	mov	r5, r1
   29680:	ldr	r1, [r0, #32]
   29684:	ldrh	r1, [r1, #14]
   29688:	cmp	r1, #3
   2968c:	bne	29738 <flatcc_builder_table_add@@Base+0xc0>
   29690:	mov	r4, r0
   29694:	ldr	r1, [pc, #248]	; 29794 <flatcc_builder_table_add@@Base+0x11c>
   29698:	cmp	r5, r1
   2969c:	bhi	2974c <flatcc_builder_table_add@@Base+0xd4>
   296a0:	ldrh	r1, [r0, #130]	; 0x82
   296a4:	cmp	r1, r3
   296a8:	strhcc	r3, [r0, #130]	; 0x82
   296ac:	ldr	r0, [r0, #4]
   296b0:	lsl	r1, r5, #1
   296b4:	ldrh	r1, [r0, r1]
   296b8:	cmp	r1, #0
   296bc:	bne	29760 <flatcc_builder_table_add@@Base+0xe8>
   296c0:	ldr	r0, [r4, #12]
   296c4:	eor	r0, r0, r5
   296c8:	ldr	r1, [pc, #200]	; 29798 <flatcc_builder_table_add@@Base+0x120>
   296cc:	mul	r0, r1, r0
   296d0:	eor	r0, r0, r2
   296d4:	mul	r0, r1, r0
   296d8:	str	r0, [r4, #12]
   296dc:	uxth	r7, r5
   296e0:	sub	r6, r3, #1
   296e4:	ldr	r0, [r4, #20]
   296e8:	add	r6, r6, r0
   296ec:	rsb	r3, r3, #0
   296f0:	and	r6, r6, r3
   296f4:	add	r1, r2, r6
   296f8:	str	r1, [r4, #20]
   296fc:	ldr	r3, [r4, #24]
   29700:	cmp	r1, r3
   29704:	bcs	29774 <flatcc_builder_table_add@@Base+0xfc>
   29708:	uxth	r5, r5
   2970c:	ldr	r3, [r4, #4]
   29710:	lsl	r5, r5, #1
   29714:	add	r2, r6, #4
   29718:	strh	r2, [r3, r5]
   2971c:	ldrh	r3, [r4, #8]
   29720:	cmp	r3, r7
   29724:	addls	r7, r7, #1
   29728:	strhls	r7, [r4, #8]
   2972c:	ldr	r0, [r4, #16]
   29730:	add	r0, r0, r6
   29734:	pop	{r4, r5, r6, r7, r8, pc}
   29738:	ldr	r3, [pc, #92]	; 2979c <flatcc_builder_table_add@@Base+0x124>
   2973c:	ldr	r2, [pc, #92]	; 297a0 <flatcc_builder_table_add@@Base+0x128>
   29740:	ldr	r1, [pc, #92]	; 297a4 <flatcc_builder_table_add@@Base+0x12c>
   29744:	ldr	r0, [pc, #92]	; 297a8 <flatcc_builder_table_add@@Base+0x130>
   29748:	bl	14618 <__assert_fail@plt>
   2974c:	ldr	r3, [pc, #72]	; 2979c <flatcc_builder_table_add@@Base+0x124>
   29750:	ldr	r2, [pc, #84]	; 297ac <flatcc_builder_table_add@@Base+0x134>
   29754:	ldr	r1, [pc, #72]	; 297a4 <flatcc_builder_table_add@@Base+0x12c>
   29758:	ldr	r0, [pc, #80]	; 297b0 <flatcc_builder_table_add@@Base+0x138>
   2975c:	bl	14618 <__assert_fail@plt>
   29760:	ldr	r3, [pc, #52]	; 2979c <flatcc_builder_table_add@@Base+0x124>
   29764:	ldr	r2, [pc, #72]	; 297b4 <flatcc_builder_table_add@@Base+0x13c>
   29768:	ldr	r1, [pc, #52]	; 297a4 <flatcc_builder_table_add@@Base+0x12c>
   2976c:	ldr	r0, [pc, #68]	; 297b8 <flatcc_builder_table_add@@Base+0x140>
   29770:	bl	14618 <__assert_fail@plt>
   29774:	ldr	r2, [pc, #64]	; 297bc <flatcc_builder_table_add@@Base+0x144>
   29778:	add	r1, r1, #1
   2977c:	mov	r0, r4
   29780:	bl	25e9c <main@@Base+0xd94>
   29784:	cmp	r0, #0
   29788:	beq	29708 <flatcc_builder_table_add@@Base+0x90>
   2978c:	mov	r0, #0
   29790:	pop	{r4, r5, r6, r7, r8, pc}
   29794:	strdeq	r7, [r0], -ip
   29798:			; <UNDEFINED> instruction: 0x9e3779b1
   2979c:	andeq	r1, r4, r0, asr #25
   297a0:	andeq	r0, r0, sp, ror #13
   297a4:	muleq	r4, ip, sp
   297a8:	andeq	r2, r4, r0, rrx
   297ac:	andeq	r0, r0, lr, ror #13
   297b0:	strdeq	r2, [r4], -r8
   297b4:	strdeq	r0, [r0], -r8
   297b8:	strdeq	r1, [r4], -r0
   297bc:	strdeq	pc, [r0], -ip

000297c0 <flatcc_builder_table_edit@@Base>:
   297c0:	ldr	r3, [r0, #32]
   297c4:	ldrh	r3, [r3, #14]
   297c8:	cmp	r3, #3
   297cc:	bne	297e4 <flatcc_builder_table_edit@@Base+0x24>
   297d0:	ldr	r3, [r0, #20]
   297d4:	sub	r1, r3, r1
   297d8:	ldr	r0, [r0, #16]
   297dc:	add	r0, r0, r1
   297e0:	bx	lr
   297e4:	push	{r4, lr}
   297e8:	ldr	r3, [pc, #12]	; 297fc <flatcc_builder_table_edit@@Base+0x3c>
   297ec:	ldr	r2, [pc, #12]	; 29800 <flatcc_builder_table_edit@@Base+0x40>
   297f0:	ldr	r1, [pc, #12]	; 29804 <flatcc_builder_table_edit@@Base+0x44>
   297f4:	ldr	r0, [pc, #12]	; 29808 <flatcc_builder_table_edit@@Base+0x48>
   297f8:	bl	14618 <__assert_fail@plt>
   297fc:	ldrdeq	r1, [r4], -ip
   29800:	andeq	r0, r0, r2, lsl #14
   29804:	muleq	r4, ip, sp
   29808:	andeq	r2, r4, r0, rrx

0002980c <flatcc_builder_table_add_copy@@Base>:
   2980c:	push	{r4, r5, r6, lr}
   29810:	mov	r6, r2
   29814:	mov	r5, r3
   29818:	ldrh	r3, [sp, #16]
   2981c:	mov	r2, r5
   29820:	bl	29678 <flatcc_builder_table_add@@Base>
   29824:	subs	r4, r0, #0
   29828:	beq	2983c <flatcc_builder_table_add_copy@@Base+0x30>
   2982c:	mov	r2, r5
   29830:	mov	r1, r6
   29834:	mov	r0, r4
   29838:	bl	1454c <memcpy@plt>
   2983c:	mov	r0, r4
   29840:	pop	{r4, r5, r6, pc}

00029844 <flatcc_builder_table_add_offset@@Base>:
   29844:	push	{r4, r5, r6, r7, r8, lr}
   29848:	ldr	r3, [r0, #32]
   2984c:	ldrh	r3, [r3, #14]
   29850:	cmp	r3, #3
   29854:	bne	29904 <flatcc_builder_table_add_offset@@Base+0xc0>
   29858:	mov	r4, r0
   2985c:	mov	r5, r1
   29860:	ldr	r3, [pc, #240]	; 29958 <flatcc_builder_table_add_offset@@Base+0x114>
   29864:	cmp	r1, r3
   29868:	bhi	29918 <flatcc_builder_table_add_offset@@Base+0xd4>
   2986c:	ldr	r2, [r0, #4]
   29870:	lsl	r3, r1, #1
   29874:	ldrh	r3, [r2, r3]
   29878:	cmp	r3, #0
   2987c:	bne	2992c <flatcc_builder_table_add_offset@@Base+0xe8>
   29880:	ldr	r3, [r0, #12]
   29884:	eor	r3, r3, r1
   29888:	ldr	r2, [pc, #204]	; 2995c <flatcc_builder_table_add_offset@@Base+0x118>
   2988c:	mul	r3, r2, r3
   29890:	eor	r3, r3, #4
   29894:	mul	r3, r2, r3
   29898:	str	r3, [r0, #12]
   2989c:	uxth	r7, r1
   298a0:	ldr	r6, [r0, #20]
   298a4:	add	r6, r6, #3
   298a8:	bic	r6, r6, #3
   298ac:	add	r1, r6, #4
   298b0:	str	r1, [r0, #20]
   298b4:	ldr	r3, [r0, #24]
   298b8:	cmp	r1, r3
   298bc:	bhi	29940 <flatcc_builder_table_add_offset@@Base+0xfc>
   298c0:	uxth	r2, r6
   298c4:	uxth	r5, r5
   298c8:	ldr	r3, [r4, #4]
   298cc:	lsl	r5, r5, #1
   298d0:	add	r1, r2, #4
   298d4:	strh	r1, [r3, r5]
   298d8:	ldrh	r3, [r4, #8]
   298dc:	cmp	r3, r7
   298e0:	addls	r7, r7, #1
   298e4:	strhls	r7, [r4, #8]
   298e8:	ldr	r3, [r4]
   298ec:	add	r1, r3, #2
   298f0:	str	r1, [r4]
   298f4:	strh	r2, [r3]
   298f8:	ldr	r0, [r4, #16]
   298fc:	add	r0, r0, r6
   29900:	pop	{r4, r5, r6, r7, r8, pc}
   29904:	ldr	r3, [pc, #84]	; 29960 <flatcc_builder_table_add_offset@@Base+0x11c>
   29908:	ldr	r2, [pc, #84]	; 29964 <flatcc_builder_table_add_offset@@Base+0x120>
   2990c:	ldr	r1, [pc, #84]	; 29968 <flatcc_builder_table_add_offset@@Base+0x124>
   29910:	ldr	r0, [pc, #84]	; 2996c <flatcc_builder_table_add_offset@@Base+0x128>
   29914:	bl	14618 <__assert_fail@plt>
   29918:	ldr	r3, [pc, #64]	; 29960 <flatcc_builder_table_add_offset@@Base+0x11c>
   2991c:	ldr	r2, [pc, #76]	; 29970 <flatcc_builder_table_add_offset@@Base+0x12c>
   29920:	ldr	r1, [pc, #64]	; 29968 <flatcc_builder_table_add_offset@@Base+0x124>
   29924:	ldr	r0, [pc, #72]	; 29974 <flatcc_builder_table_add_offset@@Base+0x130>
   29928:	bl	14618 <__assert_fail@plt>
   2992c:	ldr	r3, [pc, #44]	; 29960 <flatcc_builder_table_add_offset@@Base+0x11c>
   29930:	ldr	r2, [pc, #64]	; 29978 <flatcc_builder_table_add_offset@@Base+0x134>
   29934:	ldr	r1, [pc, #44]	; 29968 <flatcc_builder_table_add_offset@@Base+0x124>
   29938:	ldr	r0, [pc, #60]	; 2997c <flatcc_builder_table_add_offset@@Base+0x138>
   2993c:	bl	14618 <__assert_fail@plt>
   29940:	ldr	r2, [pc, #56]	; 29980 <flatcc_builder_table_add_offset@@Base+0x13c>
   29944:	bl	25e9c <main@@Base+0xd94>
   29948:	cmp	r0, #0
   2994c:	beq	298c0 <flatcc_builder_table_add_offset@@Base+0x7c>
   29950:	mov	r0, #0
   29954:	pop	{r4, r5, r6, r7, r8, pc}
   29958:	strdeq	r7, [r0], -ip
   2995c:			; <UNDEFINED> instruction: 0x9e3779b1
   29960:	strdeq	r1, [r4], -r8
   29964:	andeq	r0, r0, r3, lsl r7
   29968:	muleq	r4, ip, sp
   2996c:	andeq	r2, r4, r0, rrx
   29970:	andeq	r0, r0, r4, lsl r7
   29974:	strdeq	r2, [r4], -r8
   29978:	andeq	r0, r0, fp, lsl r7
   2997c:	strdeq	r1, [r4], -r0
   29980:	strdeq	pc, [r0], -ip

00029984 <flatcc_builder_table_add_union@@Base>:
   29984:	push	{r4, r5, r6, r7, lr}
   29988:	sub	sp, sp, #12
   2998c:	mov	r5, r1
   29990:	add	r1, sp, #8
   29994:	stmdb	r1, {r2, r3}
   29998:	ldr	r3, [r0, #32]
   2999c:	ldrh	r3, [r3, #14]
   299a0:	cmp	r3, #3
   299a4:	bne	29a14 <flatcc_builder_table_add_union@@Base+0x90>
   299a8:	mov	r4, r0
   299ac:	ldrb	r7, [sp]
   299b0:	ldr	r6, [sp, #4]
   299b4:	adds	r3, r6, #0
   299b8:	movne	r3, #1
   299bc:	cmp	r7, #0
   299c0:	movne	r3, #0
   299c4:	cmp	r3, #0
   299c8:	bne	29a28 <flatcc_builder_table_add_union@@Base+0xa4>
   299cc:	cmp	r6, #0
   299d0:	beq	299e8 <flatcc_builder_table_add_union@@Base+0x64>
   299d4:	mov	r1, r5
   299d8:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   299dc:	cmp	r0, #0
   299e0:	strne	r6, [r0]
   299e4:	beq	29a3c <flatcc_builder_table_add_union@@Base+0xb8>
   299e8:	mov	r3, #1
   299ec:	mov	r2, r3
   299f0:	sub	r1, r5, #1
   299f4:	mov	r0, r4
   299f8:	bl	29678 <flatcc_builder_table_add@@Base>
   299fc:	cmp	r0, #0
   29a00:	beq	29a50 <flatcc_builder_table_add_union@@Base+0xcc>
   29a04:	strb	r7, [r0]
   29a08:	mov	r0, #0
   29a0c:	add	sp, sp, #12
   29a10:	pop	{r4, r5, r6, r7, pc}
   29a14:	ldr	r3, [pc, #72]	; 29a64 <flatcc_builder_table_add_union@@Base+0xe0>
   29a18:	ldr	r2, [pc, #72]	; 29a68 <flatcc_builder_table_add_union@@Base+0xe4>
   29a1c:	ldr	r1, [pc, #72]	; 29a6c <flatcc_builder_table_add_union@@Base+0xe8>
   29a20:	ldr	r0, [pc, #72]	; 29a70 <flatcc_builder_table_add_union@@Base+0xec>
   29a24:	bl	14618 <__assert_fail@plt>
   29a28:	ldr	r3, [pc, #52]	; 29a64 <flatcc_builder_table_add_union@@Base+0xe0>
   29a2c:	ldr	r2, [pc, #64]	; 29a74 <flatcc_builder_table_add_union@@Base+0xf0>
   29a30:	ldr	r1, [pc, #52]	; 29a6c <flatcc_builder_table_add_union@@Base+0xe8>
   29a34:	ldr	r0, [pc, #60]	; 29a78 <flatcc_builder_table_add_union@@Base+0xf4>
   29a38:	bl	14618 <__assert_fail@plt>
   29a3c:	ldr	r3, [pc, #32]	; 29a64 <flatcc_builder_table_add_union@@Base+0xe0>
   29a40:	ldr	r2, [pc, #52]	; 29a7c <flatcc_builder_table_add_union@@Base+0xf8>
   29a44:	ldr	r1, [pc, #32]	; 29a6c <flatcc_builder_table_add_union@@Base+0xe8>
   29a48:	ldr	r0, [pc, #48]	; 29a80 <flatcc_builder_table_add_union@@Base+0xfc>
   29a4c:	bl	14618 <__assert_fail@plt>
   29a50:	ldr	r3, [pc, #12]	; 29a64 <flatcc_builder_table_add_union@@Base+0xe0>
   29a54:	ldr	r2, [pc, #40]	; 29a84 <flatcc_builder_table_add_union@@Base+0x100>
   29a58:	ldr	r1, [pc, #12]	; 29a6c <flatcc_builder_table_add_union@@Base+0xe8>
   29a5c:	ldr	r0, [pc, #36]	; 29a88 <flatcc_builder_table_add_union@@Base+0x104>
   29a60:	bl	14618 <__assert_fail@plt>
   29a64:	andeq	r1, r4, r8, lsl sp
   29a68:	andeq	r0, r0, lr, ror #11
   29a6c:	muleq	r4, ip, sp
   29a70:	andeq	r2, r4, r0, rrx
   29a74:	andeq	r0, r0, pc, ror #11
   29a78:	andeq	r2, r4, ip, lsr r1
   29a7c:	strdeq	r0, [r0], -r2
   29a80:	andeq	r2, r4, r0, ror #2
   29a84:	strdeq	r0, [r0], -r6
   29a88:	andeq	r2, r4, ip, ror #2

00029a8c <flatcc_builder_table_add_union_vector@@Base>:
   29a8c:	push	{r4, r5, r6, r7, lr}
   29a90:	sub	sp, sp, #12
   29a94:	mov	r7, r1
   29a98:	add	r1, sp, #8
   29a9c:	stmdb	r1, {r2, r3}
   29aa0:	ldr	r4, [sp]
   29aa4:	ldr	r6, [sp, #4]
   29aa8:	ldr	r3, [r0, #32]
   29aac:	ldrh	r3, [r3, #14]
   29ab0:	cmp	r3, #3
   29ab4:	bne	29af0 <flatcc_builder_table_add_union_vector@@Base+0x64>
   29ab8:	mov	r5, r0
   29abc:	clz	r3, r6
   29ac0:	lsr	r3, r3, #5
   29ac4:	clz	r2, r4
   29ac8:	lsr	r2, r2, #5
   29acc:	cmp	r2, r3
   29ad0:	beq	29b18 <flatcc_builder_table_add_union_vector@@Base+0x8c>
   29ad4:	adds	r4, r4, #0
   29ad8:	movne	r4, #1
   29adc:	cmp	r4, r3
   29ae0:	mvnne	r0, #0
   29ae4:	beq	29b04 <flatcc_builder_table_add_union_vector@@Base+0x78>
   29ae8:	add	sp, sp, #12
   29aec:	pop	{r4, r5, r6, r7, pc}
   29af0:	ldr	r3, [pc, #136]	; 29b80 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   29af4:	mov	r2, #1536	; 0x600
   29af8:	ldr	r1, [pc, #132]	; 29b84 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   29afc:	ldr	r0, [pc, #132]	; 29b88 <flatcc_builder_table_add_union_vector@@Base+0xfc>
   29b00:	bl	14618 <__assert_fail@plt>
   29b04:	ldr	r3, [pc, #116]	; 29b80 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   29b08:	ldr	r2, [pc, #124]	; 29b8c <flatcc_builder_table_add_union_vector@@Base+0x100>
   29b0c:	ldr	r1, [pc, #112]	; 29b84 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   29b10:	ldr	r0, [pc, #120]	; 29b90 <flatcc_builder_table_add_union_vector@@Base+0x104>
   29b14:	bl	14618 <__assert_fail@plt>
   29b18:	cmp	r4, #0
   29b1c:	moveq	r0, #0
   29b20:	beq	29ae8 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   29b24:	sub	r1, r7, #1
   29b28:	mov	r0, r5
   29b2c:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   29b30:	cmp	r0, #0
   29b34:	beq	29b6c <flatcc_builder_table_add_union_vector@@Base+0xe0>
   29b38:	str	r4, [r0]
   29b3c:	mov	r1, r7
   29b40:	mov	r0, r5
   29b44:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   29b48:	cmp	r0, #0
   29b4c:	strne	r6, [r0]
   29b50:	movne	r0, #0
   29b54:	bne	29ae8 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   29b58:	ldr	r3, [pc, #32]	; 29b80 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   29b5c:	ldr	r2, [pc, #48]	; 29b94 <flatcc_builder_table_add_union_vector@@Base+0x108>
   29b60:	ldr	r1, [pc, #28]	; 29b84 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   29b64:	ldr	r0, [pc, #44]	; 29b98 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   29b68:	bl	14618 <__assert_fail@plt>
   29b6c:	ldr	r3, [pc, #12]	; 29b80 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   29b70:	ldr	r2, [pc, #36]	; 29b9c <flatcc_builder_table_add_union_vector@@Base+0x110>
   29b74:	ldr	r1, [pc, #8]	; 29b84 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   29b78:	ldr	r0, [pc, #24]	; 29b98 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   29b7c:	bl	14618 <__assert_fail@plt>
   29b80:	andeq	r1, r4, r8, lsr sp
   29b84:	muleq	r4, ip, sp
   29b88:	andeq	r2, r4, r0, rrx
   29b8c:	andeq	r0, r0, r1, lsl #12
   29b90:	andeq	r2, r4, r8, ror r1
   29b94:	andeq	r0, r0, r8, lsl #12
   29b98:	andeq	r2, r4, r0, ror #2
   29b9c:	andeq	r0, r0, r4, lsl #12

00029ba0 <flatcc_builder_push_buffer_alignment@@Base>:
   29ba0:	mov	r3, r0
   29ba4:	ldrh	r0, [r0, #128]	; 0x80
   29ba8:	mov	r2, #4
   29bac:	strh	r2, [r3, #128]	; 0x80
   29bb0:	bx	lr

00029bb4 <flatcc_builder_pop_buffer_alignment@@Base>:
   29bb4:	ldrh	r3, [r0, #128]	; 0x80
   29bb8:	cmp	r3, r1
   29bbc:	strhcc	r1, [r0, #128]	; 0x80
   29bc0:	bx	lr

00029bc4 <flatcc_builder_get_buffer_alignment@@Base>:
   29bc4:	ldrh	r0, [r0, #128]	; 0x80
   29bc8:	bx	lr

00029bcc <flatcc_builder_set_vtable_clustering@@Base>:
   29bcc:	clz	r1, r1
   29bd0:	lsr	r1, r1, #5
   29bd4:	str	r1, [r0, #180]	; 0xb4
   29bd8:	bx	lr

00029bdc <flatcc_builder_set_block_align@@Base>:
   29bdc:	strh	r1, [r0, #132]	; 0x84
   29be0:	bx	lr

00029be4 <flatcc_builder_get_level@@Base>:
   29be4:	ldr	r0, [r0, #156]	; 0x9c
   29be8:	bx	lr

00029bec <flatcc_builder_set_max_level@@Base>:
   29bec:	str	r1, [r0, #176]	; 0xb0
   29bf0:	ldr	r3, [r0, #160]	; 0xa0
   29bf4:	cmp	r1, r3
   29bf8:	strgt	r1, [r0, #160]	; 0xa0
   29bfc:	bx	lr

00029c00 <flatcc_builder_get_buffer_size@@Base>:
   29c00:	ldr	r2, [r0, #140]	; 0x8c
   29c04:	ldr	r0, [r0, #136]	; 0x88
   29c08:	sub	r0, r2, r0
   29c0c:	bx	lr

00029c10 <flatcc_builder_get_buffer_start@@Base>:
   29c10:	ldr	r0, [r0, #136]	; 0x88
   29c14:	bx	lr

00029c18 <flatcc_builder_get_buffer_end@@Base>:
   29c18:	ldr	r0, [r0, #140]	; 0x8c
   29c1c:	bx	lr

00029c20 <flatcc_builder_set_vtable_cache_limit@@Base>:
   29c20:	str	r1, [r0, #172]	; 0xac
   29c24:	bx	lr

00029c28 <flatcc_builder_set_identifier@@Base>:
   29c28:	ldr	r3, [pc, #16]	; 29c40 <flatcc_builder_set_identifier@@Base+0x18>
   29c2c:	cmp	r1, #0
   29c30:	moveq	r1, r3
   29c34:	ldr	r3, [r1]
   29c38:	str	r3, [r0, #168]	; 0xa8
   29c3c:	bx	lr
   29c40:	andeq	r1, r4, ip, asr #12

00029c44 <flatcc_builder_get_type@@Base>:
   29c44:	ldr	r3, [r0, #32]
   29c48:	cmp	r3, #0
   29c4c:	ldrhne	r0, [r3, #14]
   29c50:	moveq	r0, #0
   29c54:	bx	lr

00029c58 <flatcc_builder_get_type_at@@Base>:
   29c58:	cmp	r1, #0
   29c5c:	ble	29c84 <flatcc_builder_get_type_at@@Base+0x2c>
   29c60:	ldr	r3, [r0, #156]	; 0x9c
   29c64:	cmp	r1, r3
   29c68:	bgt	29c8c <flatcc_builder_get_type_at@@Base+0x34>
   29c6c:	sub	r1, r1, r3
   29c70:	ldr	r3, [r0, #32]
   29c74:	add	r1, r1, r1, lsl #3
   29c78:	add	r1, r3, r1, lsl #2
   29c7c:	ldrh	r0, [r1, #14]
   29c80:	bx	lr
   29c84:	mov	r0, #0
   29c88:	bx	lr
   29c8c:	mov	r0, #0
   29c90:	bx	lr

00029c94 <flatcc_builder_get_direct_buffer@@Base>:
   29c94:	ldr	r3, [r0, #184]	; 0xb8
   29c98:	cmp	r3, #0
   29c9c:	beq	29cd8 <flatcc_builder_get_direct_buffer@@Base+0x44>
   29ca0:	ldr	r2, [r0, #188]	; 0xbc
   29ca4:	ldr	r3, [r0, #192]	; 0xc0
   29ca8:	cmp	r2, r3
   29cac:	beq	29cc4 <flatcc_builder_get_direct_buffer@@Base+0x30>
   29cb0:	cmp	r1, #0
   29cb4:	beq	29cec <flatcc_builder_get_direct_buffer@@Base+0x58>
   29cb8:	mov	r0, #0
   29cbc:	str	r0, [r1]
   29cc0:	bx	lr
   29cc4:	cmp	r1, #0
   29cc8:	ldrne	r3, [r0, #212]	; 0xd4
   29ccc:	strne	r3, [r1]
   29cd0:	ldr	r0, [r0, #196]	; 0xc4
   29cd4:	bx	lr
   29cd8:	cmp	r1, #0
   29cdc:	beq	29cf4 <flatcc_builder_get_direct_buffer@@Base+0x60>
   29ce0:	mov	r0, #0
   29ce4:	str	r0, [r1]
   29ce8:	bx	lr
   29cec:	mov	r0, #0
   29cf0:	bx	lr
   29cf4:	mov	r0, #0
   29cf8:	bx	lr

00029cfc <flatcc_builder_copy_buffer@@Base>:
   29cfc:	ldr	r3, [r0, #184]	; 0xb8
   29d00:	cmp	r3, #0
   29d04:	beq	29d30 <flatcc_builder_copy_buffer@@Base+0x34>
   29d08:	push	{r4, lr}
   29d0c:	add	r0, r0, #188	; 0xbc
   29d10:	bl	2a42c <flatcc_emitter_copy_buffer@@Base>
   29d14:	cmp	r0, #0
   29d18:	popne	{r4, pc}
   29d1c:	ldr	r3, [pc, #20]	; 29d38 <flatcc_builder_copy_buffer@@Base+0x3c>
   29d20:	ldr	r2, [pc, #20]	; 29d3c <flatcc_builder_copy_buffer@@Base+0x40>
   29d24:	ldr	r1, [pc, #20]	; 29d40 <flatcc_builder_copy_buffer@@Base+0x44>
   29d28:	ldr	r0, [pc, #20]	; 29d44 <flatcc_builder_copy_buffer@@Base+0x48>
   29d2c:	bl	14618 <__assert_fail@plt>
   29d30:	mov	r0, #0
   29d34:	bx	lr
   29d38:	andeq	r1, r4, r0, ror #26
   29d3c:	andeq	r0, r0, r6, lsl #15
   29d40:	muleq	r4, ip, sp
   29d44:	andeq	r2, r4, r0, lsr #3

00029d48 <flatcc_builder_finalize_buffer@@Base>:
   29d48:	push	{r4, r5, r6, lr}
   29d4c:	mov	r5, r0
   29d50:	ldr	r4, [r0, #140]	; 0x8c
   29d54:	ldr	r3, [r0, #136]	; 0x88
   29d58:	sub	r4, r4, r3
   29d5c:	cmp	r1, #0
   29d60:	strne	r4, [r1]
   29d64:	mov	r0, r4
   29d68:	bl	1457c <malloc@plt>
   29d6c:	subs	r6, r0, #0
   29d70:	beq	29d94 <flatcc_builder_finalize_buffer@@Base+0x4c>
   29d74:	mov	r2, r4
   29d78:	mov	r1, r6
   29d7c:	mov	r0, r5
   29d80:	bl	29cfc <flatcc_builder_copy_buffer@@Base>
   29d84:	cmp	r0, #0
   29d88:	beq	29da8 <flatcc_builder_finalize_buffer@@Base+0x60>
   29d8c:	mov	r0, r6
   29d90:	pop	{r4, r5, r6, pc}
   29d94:	ldr	r3, [pc, #32]	; 29dbc <flatcc_builder_finalize_buffer@@Base+0x74>
   29d98:	ldr	r2, [pc, #32]	; 29dc0 <flatcc_builder_finalize_buffer@@Base+0x78>
   29d9c:	ldr	r1, [pc, #32]	; 29dc4 <flatcc_builder_finalize_buffer@@Base+0x7c>
   29da0:	ldr	r0, [pc, #32]	; 29dc8 <flatcc_builder_finalize_buffer@@Base+0x80>
   29da4:	bl	14618 <__assert_fail@plt>
   29da8:	ldr	r3, [pc, #12]	; 29dbc <flatcc_builder_finalize_buffer@@Base+0x74>
   29dac:	ldr	r2, [pc, #24]	; 29dcc <flatcc_builder_finalize_buffer@@Base+0x84>
   29db0:	ldr	r1, [pc, #12]	; 29dc4 <flatcc_builder_finalize_buffer@@Base+0x7c>
   29db4:	ldr	r0, [pc, #12]	; 29dc8 <flatcc_builder_finalize_buffer@@Base+0x80>
   29db8:	bl	14618 <__assert_fail@plt>
   29dbc:	andeq	r1, r4, ip, ror sp
   29dc0:	muleq	r0, r8, r7
   29dc4:	muleq	r4, ip, sp
   29dc8:	strdeq	r1, [r4], -r0
   29dcc:	muleq	r0, ip, r7

00029dd0 <flatcc_builder_finalize_aligned_buffer@@Base>:
   29dd0:	push	{r4, r5, r6, r7, lr}
   29dd4:	sub	sp, sp, #12
   29dd8:	mov	r7, r0
   29ddc:	ldr	r4, [r0, #140]	; 0x8c
   29de0:	ldr	r3, [r0, #136]	; 0x88
   29de4:	sub	r3, r4, r3
   29de8:	subs	r6, r1, #0
   29dec:	strne	r3, [r6]
   29df0:	ldrh	r1, [r0, #128]	; 0x80
   29df4:	sub	r4, r1, #1
   29df8:	add	r4, r4, r3
   29dfc:	rsb	r3, r1, #0
   29e00:	and	r4, r4, r3
   29e04:	add	r0, sp, #8
   29e08:	mov	r3, #0
   29e0c:	str	r3, [r0, #-4]!
   29e10:	mov	r2, r4
   29e14:	cmp	r1, #4
   29e18:	movcc	r1, #4
   29e1c:	bl	145b8 <posix_memalign@plt>
   29e20:	cmp	r0, #0
   29e24:	beq	29e48 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   29e28:	ldr	r0, [sp, #4]
   29e2c:	cmp	r0, #0
   29e30:	beq	29e38 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   29e34:	bl	14540 <free@plt>
   29e38:	cmp	r6, #0
   29e3c:	mov	r5, #0
   29e40:	strne	r5, [r6]
   29e44:	b	29e6c <flatcc_builder_finalize_aligned_buffer@@Base+0x9c>
   29e48:	ldr	r5, [sp, #4]
   29e4c:	cmp	r5, #0
   29e50:	beq	29e38 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   29e54:	mov	r2, r4
   29e58:	mov	r1, r5
   29e5c:	mov	r0, r7
   29e60:	bl	29cfc <flatcc_builder_copy_buffer@@Base>
   29e64:	cmp	r0, #0
   29e68:	beq	29e78 <flatcc_builder_finalize_aligned_buffer@@Base+0xa8>
   29e6c:	mov	r0, r5
   29e70:	add	sp, sp, #12
   29e74:	pop	{r4, r5, r6, r7, pc}
   29e78:	mov	r0, r5
   29e7c:	bl	14540 <free@plt>
   29e80:	b	29e38 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>

00029e84 <flatcc_builder_aligned_alloc@@Base>:
   29e84:	push	{lr}		; (str lr, [sp, #-4]!)
   29e88:	sub	sp, sp, #12
   29e8c:	add	r3, sp, #8
   29e90:	mov	r2, #0
   29e94:	str	r2, [r3, #-4]!
   29e98:	mov	r2, r1
   29e9c:	cmp	r0, #4
   29ea0:	movcs	r1, r0
   29ea4:	movcc	r1, #4
   29ea8:	mov	r0, r3
   29eac:	bl	145b8 <posix_memalign@plt>
   29eb0:	cmp	r0, #0
   29eb4:	beq	29ed0 <flatcc_builder_aligned_alloc@@Base+0x4c>
   29eb8:	ldr	r0, [sp, #4]
   29ebc:	cmp	r0, #0
   29ec0:	beq	29ed0 <flatcc_builder_aligned_alloc@@Base+0x4c>
   29ec4:	bl	14540 <free@plt>
   29ec8:	mov	r3, #0
   29ecc:	str	r3, [sp, #4]
   29ed0:	ldr	r0, [sp, #4]
   29ed4:	add	sp, sp, #12
   29ed8:	pop	{pc}		; (ldr pc, [sp], #4)

00029edc <flatcc_builder_aligned_free@@Base>:
   29edc:	push	{r4, lr}
   29ee0:	bl	14540 <free@plt>
   29ee4:	pop	{r4, pc}

00029ee8 <flatcc_builder_get_emit_context@@Base>:
   29ee8:	ldr	r0, [r0, #36]	; 0x24
   29eec:	bx	lr

00029ef0 <flatcc_emitter_recycle_page@@Base>:
   29ef0:	ldr	r3, [r0]
   29ef4:	cmp	r3, r1
   29ef8:	beq	29f48 <flatcc_emitter_recycle_page@@Base+0x58>
   29efc:	ldr	r3, [r0, #4]
   29f00:	cmp	r1, r3
   29f04:	beq	29f50 <flatcc_emitter_recycle_page@@Base+0x60>
   29f08:	ldr	r3, [r1, #2944]	; 0xb80
   29f0c:	ldr	r2, [r1, #2948]	; 0xb84
   29f10:	str	r2, [r3, #2948]	; 0xb84
   29f14:	ldr	r3, [r1, #2948]	; 0xb84
   29f18:	ldr	r2, [r1, #2944]	; 0xb80
   29f1c:	str	r2, [r3, #2944]	; 0xb80
   29f20:	ldr	r3, [r0]
   29f24:	ldr	r3, [r3, #2948]	; 0xb84
   29f28:	str	r3, [r1, #2948]	; 0xb84
   29f2c:	ldr	r2, [r0]
   29f30:	str	r2, [r1, #2944]	; 0xb80
   29f34:	str	r1, [r3, #2944]	; 0xb80
   29f38:	ldr	r3, [r1, #2944]	; 0xb80
   29f3c:	str	r1, [r3, #2948]	; 0xb84
   29f40:	mov	r0, #0
   29f44:	bx	lr
   29f48:	mvn	r0, #0
   29f4c:	bx	lr
   29f50:	mvn	r0, #0
   29f54:	bx	lr

00029f58 <flatcc_emitter_reset@@Base>:
   29f58:	ldr	r3, [r0]
   29f5c:	cmp	r3, #0
   29f60:	bxeq	lr
   29f64:	str	r3, [r0, #4]
   29f68:	add	r2, r3, #1472	; 0x5c0
   29f6c:	str	r2, [r0, #8]
   29f70:	str	r2, [r0, #16]
   29f74:	mov	r2, #1472	; 0x5c0
   29f78:	str	r2, [r0, #12]
   29f7c:	str	r2, [r0, #20]
   29f80:	sub	r2, r2, #2944	; 0xb80
   29f84:	str	r2, [r3, #2952]	; 0xb88
   29f88:	ldr	r3, [r0, #32]
   29f8c:	cmp	r3, #0
   29f90:	ldreq	r3, [r0, #24]
   29f94:	streq	r3, [r0, #32]
   29f98:	ldr	r3, [r0, #32]
   29f9c:	add	r2, r3, r3, lsl #1
   29fa0:	ldr	r3, [r0, #24]
   29fa4:	lsr	r3, r3, #2
   29fa8:	add	r3, r3, r2, lsr #2
   29fac:	str	r3, [r0, #32]
   29fb0:	mov	r2, #0
   29fb4:	str	r2, [r0, #24]
   29fb8:	ldr	r2, [r0, #28]
   29fbc:	cmp	r2, r3, lsl #1
   29fc0:	bxls	lr
   29fc4:	push	{r4, lr}
   29fc8:	mov	r4, r0
   29fcc:	ldr	r3, [r0, #4]
   29fd0:	ldr	r0, [r3, #2944]	; 0xb80
   29fd4:	ldr	r2, [r4]
   29fd8:	cmp	r0, r2
   29fdc:	popeq	{r4, pc}
   29fe0:	ldr	r2, [r0, #2944]	; 0xb80
   29fe4:	str	r2, [r3, #2944]	; 0xb80
   29fe8:	ldr	r3, [r0, #2944]	; 0xb80
   29fec:	ldr	r2, [r4, #4]
   29ff0:	str	r2, [r3, #2948]	; 0xb84
   29ff4:	bl	14540 <free@plt>
   29ff8:	ldr	r3, [r4, #28]
   29ffc:	sub	r3, r3, #2944	; 0xb80
   2a000:	str	r3, [r4, #28]
   2a004:	ldr	r2, [r4, #32]
   2a008:	cmp	r3, r2, lsl #1
   2a00c:	popls	{r4, pc}
   2a010:	ldr	r3, [r4, #4]
   2a014:	ldr	r0, [r3, #2944]	; 0xb80
   2a018:	ldr	r2, [r4]
   2a01c:	cmp	r0, r2
   2a020:	bne	29fe0 <flatcc_emitter_reset@@Base+0x88>
   2a024:	pop	{r4, pc}

0002a028 <flatcc_emitter_clear@@Base>:
   2a028:	ldr	r3, [r0]
   2a02c:	cmp	r3, #0
   2a030:	bxeq	lr
   2a034:	push	{r4, r5, r6, lr}
   2a038:	mov	r5, r0
   2a03c:	ldr	r2, [r3, #2948]	; 0xb84
   2a040:	mov	r1, #0
   2a044:	str	r1, [r2, #2944]	; 0xb80
   2a048:	ldr	r4, [r3, #2944]	; 0xb80
   2a04c:	cmp	r4, r1
   2a050:	bne	2a060 <flatcc_emitter_clear@@Base+0x38>
   2a054:	mov	r4, r3
   2a058:	b	2a074 <flatcc_emitter_clear@@Base+0x4c>
   2a05c:	mov	r4, r3
   2a060:	ldr	r0, [r4, #2948]	; 0xb84
   2a064:	bl	14540 <free@plt>
   2a068:	ldr	r3, [r4, #2944]	; 0xb80
   2a06c:	cmp	r3, #0
   2a070:	bne	2a05c <flatcc_emitter_clear@@Base+0x34>
   2a074:	mov	r0, r4
   2a078:	bl	14540 <free@plt>
   2a07c:	mov	r2, #36	; 0x24
   2a080:	mov	r1, #0
   2a084:	mov	r0, r5
   2a088:	bl	145c4 <memset@plt>
   2a08c:	pop	{r4, r5, r6, pc}

0002a090 <flatcc_emitter@@Base>:
   2a090:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a094:	mov	r4, r0
   2a098:	ldr	ip, [sp, #40]	; 0x28
   2a09c:	ldr	r0, [r0, #24]
   2a0a0:	add	r0, r0, ip
   2a0a4:	str	r0, [r4, #24]
   2a0a8:	cmp	r3, #0
   2a0ac:	blt	2a0d8 <flatcc_emitter@@Base+0x48>
   2a0b0:	ldr	r3, [r4, #20]
   2a0b4:	cmp	ip, r3
   2a0b8:	bls	2a1c4 <flatcc_emitter@@Base+0x134>
   2a0bc:	cmp	r2, #0
   2a0c0:	addne	r7, r1, #8
   2a0c4:	movne	sl, r2
   2a0c8:	movne	fp, #2944	; 0xb80
   2a0cc:	bne	2a378 <flatcc_emitter@@Base+0x2e8>
   2a0d0:	mov	r0, r2
   2a0d4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a0d8:	ldr	r3, [r4, #12]
   2a0dc:	cmp	ip, r3
   2a0e0:	bhi	2a104 <flatcc_emitter@@Base+0x74>
   2a0e4:	ldr	r5, [r4, #8]
   2a0e8:	sub	r5, r5, ip
   2a0ec:	str	r5, [r4, #8]
   2a0f0:	sub	r3, r3, ip
   2a0f4:	str	r3, [r4, #12]
   2a0f8:	b	2a1d8 <flatcc_emitter@@Base+0x148>
   2a0fc:	mov	r0, r2
   2a100:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a104:	add	r7, r1, r2, lsl #3
   2a108:	mov	r8, r2
   2a10c:	mov	fp, #1472	; 0x5c0
   2a110:	mov	sl, #2944	; 0xb80
   2a114:	b	2a2f4 <flatcc_emitter@@Base+0x264>
   2a118:	mov	r2, r5
   2a11c:	rsb	r1, r2, #0
   2a120:	ldr	r0, [r4, #8]
   2a124:	add	r0, r0, r1
   2a128:	str	r0, [r4, #8]
   2a12c:	sub	r3, r3, r2
   2a130:	str	r3, [r4, #12]
   2a134:	add	r6, r6, r1
   2a138:	sub	r5, r5, r2
   2a13c:	mov	r1, r6
   2a140:	bl	1454c <memcpy@plt>
   2a144:	cmp	r5, #0
   2a148:	beq	2a2ec <flatcc_emitter@@Base+0x25c>
   2a14c:	ldr	r3, [r4, #12]
   2a150:	cmp	r3, r5
   2a154:	bcs	2a118 <flatcc_emitter@@Base+0x88>
   2a158:	cmp	r3, #0
   2a15c:	movne	r2, r3
   2a160:	bne	2a11c <flatcc_emitter@@Base+0x8c>
   2a164:	ldr	r9, [r4]
   2a168:	cmp	r9, #0
   2a16c:	beq	2a40c <flatcc_emitter@@Base+0x37c>
   2a170:	ldr	r2, [r9, #2948]	; 0xb84
   2a174:	ldr	r3, [r4, #4]
   2a178:	cmp	r2, r3
   2a17c:	beq	2a394 <flatcc_emitter@@Base+0x304>
   2a180:	ldr	r3, [r9, #2952]	; 0xb88
   2a184:	sub	r3, r3, #2944	; 0xb80
   2a188:	str	r3, [r2, #2952]	; 0xb88
   2a18c:	ldr	r3, [r4]
   2a190:	ldr	r3, [r3, #2948]	; 0xb84
   2a194:	str	r3, [r4]
   2a198:	ldr	r3, [r4]
   2a19c:	add	r2, r3, #2944	; 0xb80
   2a1a0:	str	r2, [r4, #8]
   2a1a4:	str	sl, [r4, #12]
   2a1a8:	ldr	r2, [r3, #2944]	; 0xb80
   2a1ac:	ldr	r2, [r2, #2952]	; 0xb88
   2a1b0:	sub	r2, r2, #2944	; 0xb80
   2a1b4:	str	r2, [r3, #2952]	; 0xb88
   2a1b8:	b	2a144 <flatcc_emitter@@Base+0xb4>
   2a1bc:	mov	r0, #0
   2a1c0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a1c4:	ldr	r5, [r4, #16]
   2a1c8:	add	r0, r5, ip
   2a1cc:	str	r0, [r4, #16]
   2a1d0:	sub	r3, r3, ip
   2a1d4:	str	r3, [r4, #20]
   2a1d8:	cmp	r2, #0
   2a1dc:	addne	r4, r1, #8
   2a1e0:	movne	r8, r2
   2a1e4:	beq	2a0fc <flatcc_emitter@@Base+0x6c>
   2a1e8:	ldr	r2, [r4, #-4]
   2a1ec:	ldr	r1, [r4, #-8]
   2a1f0:	mov	r0, r5
   2a1f4:	bl	1454c <memcpy@plt>
   2a1f8:	ldr	r3, [r4, #-4]
   2a1fc:	add	r5, r5, r3
   2a200:	add	r4, r4, #8
   2a204:	subs	r8, r8, #1
   2a208:	bne	2a1e8 <flatcc_emitter@@Base+0x158>
   2a20c:	mov	r0, #0
   2a210:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a214:	ldr	r0, [pc, #520]	; 2a424 <flatcc_emitter@@Base+0x394>
   2a218:	bl	1457c <malloc@plt>
   2a21c:	cmp	r0, #0
   2a220:	beq	2a2dc <flatcc_emitter@@Base+0x24c>
   2a224:	ldr	r3, [r4, #28]
   2a228:	add	r3, r3, #2944	; 0xb80
   2a22c:	str	r3, [r4, #28]
   2a230:	str	r5, [r0, #2948]	; 0xb84
   2a234:	str	r9, [r0, #2944]	; 0xb80
   2a238:	str	r0, [r9, #2948]	; 0xb84
   2a23c:	ldr	r3, [r4, #4]
   2a240:	str	r0, [r3, #2944]	; 0xb80
   2a244:	str	r0, [r4, #4]
   2a248:	b	2a2bc <flatcc_emitter@@Base+0x22c>
   2a24c:	mov	r5, r6
   2a250:	mov	r2, r5
   2a254:	mov	r1, r8
   2a258:	ldr	r0, [r4, #16]
   2a25c:	bl	1454c <memcpy@plt>
   2a260:	sub	r6, r6, r5
   2a264:	add	r8, r8, r5
   2a268:	ldr	r3, [r4, #16]
   2a26c:	add	r3, r3, r5
   2a270:	str	r3, [r4, #16]
   2a274:	ldr	r3, [r4, #20]
   2a278:	sub	r5, r3, r5
   2a27c:	str	r5, [r4, #20]
   2a280:	cmp	r6, #0
   2a284:	beq	2a36c <flatcc_emitter@@Base+0x2dc>
   2a288:	ldr	r5, [r4, #20]
   2a28c:	cmp	r5, r6
   2a290:	bcs	2a24c <flatcc_emitter@@Base+0x1bc>
   2a294:	cmp	r5, #0
   2a298:	bne	2a250 <flatcc_emitter@@Base+0x1c0>
   2a29c:	ldr	r5, [r4, #4]
   2a2a0:	cmp	r5, #0
   2a2a4:	beq	2a354 <flatcc_emitter@@Base+0x2c4>
   2a2a8:	ldr	r9, [r5, #2944]	; 0xb80
   2a2ac:	ldr	r3, [r4]
   2a2b0:	cmp	r9, r3
   2a2b4:	strne	r9, [r4, #4]
   2a2b8:	beq	2a214 <flatcc_emitter@@Base+0x184>
   2a2bc:	ldr	r3, [r4, #4]
   2a2c0:	str	r3, [r4, #16]
   2a2c4:	str	fp, [r4, #20]
   2a2c8:	ldr	r2, [r3, #2948]	; 0xb84
   2a2cc:	ldr	r2, [r2, #2952]	; 0xb88
   2a2d0:	add	r2, r2, #2944	; 0xb80
   2a2d4:	str	r2, [r3, #2952]	; 0xb88
   2a2d8:	b	2a280 <flatcc_emitter@@Base+0x1f0>
   2a2dc:	mvn	r0, #0
   2a2e0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a2e4:	mvn	r0, #0
   2a2e8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a2ec:	sub	r7, r7, #8
   2a2f0:	sub	r8, r8, #1
   2a2f4:	cmp	r8, #0
   2a2f8:	beq	2a1bc <flatcc_emitter@@Base+0x12c>
   2a2fc:	ldr	r5, [r7, #-4]
   2a300:	ldr	r6, [r7, #-8]
   2a304:	add	r6, r6, r5
   2a308:	cmp	r5, #0
   2a30c:	bne	2a14c <flatcc_emitter@@Base+0xbc>
   2a310:	b	2a2ec <flatcc_emitter@@Base+0x25c>
   2a314:	ldr	r3, [r4, #28]
   2a318:	add	r3, r3, #2944	; 0xb80
   2a31c:	str	r3, [r4, #28]
   2a320:	str	r0, [r4]
   2a324:	str	r0, [r4, #4]
   2a328:	str	r0, [r0, #2944]	; 0xb80
   2a32c:	str	r0, [r0, #2948]	; 0xb84
   2a330:	add	r3, r0, #1472	; 0x5c0
   2a334:	str	r3, [r4, #8]
   2a338:	str	r3, [r4, #16]
   2a33c:	mov	r3, #1472	; 0x5c0
   2a340:	str	r3, [r4, #12]
   2a344:	str	r3, [r4, #20]
   2a348:	sub	r3, r3, #2944	; 0xb80
   2a34c:	str	r3, [r0, #2952]	; 0xb88
   2a350:	b	2a280 <flatcc_emitter@@Base+0x1f0>
   2a354:	ldr	r0, [pc, #200]	; 2a424 <flatcc_emitter@@Base+0x394>
   2a358:	bl	1457c <malloc@plt>
   2a35c:	cmp	r0, #0
   2a360:	bne	2a314 <flatcc_emitter@@Base+0x284>
   2a364:	mvn	r0, #0
   2a368:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a36c:	add	r7, r7, #8
   2a370:	subs	sl, sl, #1
   2a374:	beq	2a38c <flatcc_emitter@@Base+0x2fc>
   2a378:	ldr	r8, [r7, #-8]
   2a37c:	ldr	r6, [r7, #-4]
   2a380:	cmp	r6, #0
   2a384:	bne	2a288 <flatcc_emitter@@Base+0x1f8>
   2a388:	b	2a36c <flatcc_emitter@@Base+0x2dc>
   2a38c:	mov	r0, #0
   2a390:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a394:	ldr	r0, [pc, #136]	; 2a424 <flatcc_emitter@@Base+0x394>
   2a398:	bl	1457c <malloc@plt>
   2a39c:	cmp	r0, #0
   2a3a0:	beq	2a2e4 <flatcc_emitter@@Base+0x254>
   2a3a4:	ldr	r3, [r4, #28]
   2a3a8:	add	r3, r3, #2944	; 0xb80
   2a3ac:	str	r3, [r4, #28]
   2a3b0:	ldr	r3, [r4, #4]
   2a3b4:	str	r3, [r0, #2948]	; 0xb84
   2a3b8:	str	r9, [r0, #2944]	; 0xb80
   2a3bc:	str	r0, [r9, #2948]	; 0xb84
   2a3c0:	ldr	r3, [r4, #4]
   2a3c4:	str	r0, [r3, #2944]	; 0xb80
   2a3c8:	str	r0, [r4]
   2a3cc:	b	2a198 <flatcc_emitter@@Base+0x108>
   2a3d0:	ldr	r3, [r4, #28]
   2a3d4:	add	r3, r3, #2944	; 0xb80
   2a3d8:	str	r3, [r4, #28]
   2a3dc:	str	r0, [r4]
   2a3e0:	str	r0, [r4, #4]
   2a3e4:	str	r0, [r0, #2944]	; 0xb80
   2a3e8:	str	r0, [r0, #2948]	; 0xb84
   2a3ec:	add	r3, r0, #1472	; 0x5c0
   2a3f0:	str	r3, [r4, #8]
   2a3f4:	str	r3, [r4, #16]
   2a3f8:	str	fp, [r4, #12]
   2a3fc:	str	fp, [r4, #20]
   2a400:	ldr	r3, [pc, #32]	; 2a428 <flatcc_emitter@@Base+0x398>
   2a404:	str	r3, [r0, #2952]	; 0xb88
   2a408:	b	2a144 <flatcc_emitter@@Base+0xb4>
   2a40c:	ldr	r0, [pc, #16]	; 2a424 <flatcc_emitter@@Base+0x394>
   2a410:	bl	1457c <malloc@plt>
   2a414:	cmp	r0, #0
   2a418:	bne	2a3d0 <flatcc_emitter@@Base+0x340>
   2a41c:	mvn	r0, #0
   2a420:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a424:	andeq	r0, r0, ip, lsl #23
   2a428:			; <UNDEFINED> instruction: 0xfffffa40

0002a42c <flatcc_emitter_copy_buffer@@Base>:
   2a42c:	push	{r4, r5, r6, r7, r8, lr}
   2a430:	mov	r5, r1
   2a434:	ldr	r1, [r0, #24]
   2a438:	cmp	r1, r2
   2a43c:	bhi	2a4e0 <flatcc_emitter_copy_buffer@@Base+0xb4>
   2a440:	ldr	r3, [r0]
   2a444:	cmp	r3, #0
   2a448:	beq	2a4e8 <flatcc_emitter_copy_buffer@@Base+0xbc>
   2a44c:	mov	r6, r0
   2a450:	ldr	r2, [r0, #4]
   2a454:	cmp	r3, r2
   2a458:	beq	2a4cc <flatcc_emitter_copy_buffer@@Base+0xa0>
   2a45c:	ldr	r4, [r0, #12]
   2a460:	rsb	r4, r4, #2944	; 0xb80
   2a464:	mov	r2, r4
   2a468:	ldr	r1, [r0, #8]
   2a46c:	mov	r0, r5
   2a470:	bl	1454c <memcpy@plt>
   2a474:	add	r5, r5, r4
   2a478:	ldr	r3, [r6]
   2a47c:	ldr	r4, [r3, #2944]	; 0xb80
   2a480:	ldr	r1, [r6, #4]
   2a484:	cmp	r4, r1
   2a488:	beq	2a4b4 <flatcc_emitter_copy_buffer@@Base+0x88>
   2a48c:	mov	r7, #2944	; 0xb80
   2a490:	mov	r2, r7
   2a494:	mov	r1, r4
   2a498:	mov	r0, r5
   2a49c:	bl	1454c <memcpy@plt>
   2a4a0:	add	r5, r5, #2944	; 0xb80
   2a4a4:	ldr	r4, [r4, #2944]	; 0xb80
   2a4a8:	ldr	r1, [r6, #4]
   2a4ac:	cmp	r1, r4
   2a4b0:	bne	2a490 <flatcc_emitter_copy_buffer@@Base+0x64>
   2a4b4:	ldr	r2, [r6, #20]
   2a4b8:	rsb	r2, r2, #2944	; 0xb80
   2a4bc:	mov	r0, r5
   2a4c0:	bl	1454c <memcpy@plt>
   2a4c4:	mov	r0, r5
   2a4c8:	pop	{r4, r5, r6, r7, r8, pc}
   2a4cc:	mov	r2, r1
   2a4d0:	ldr	r1, [r0, #8]
   2a4d4:	mov	r0, r5
   2a4d8:	bl	1454c <memcpy@plt>
   2a4dc:	b	2a4c4 <flatcc_emitter_copy_buffer@@Base+0x98>
   2a4e0:	mov	r5, #0
   2a4e4:	b	2a4c4 <flatcc_emitter_copy_buffer@@Base+0x98>
   2a4e8:	mov	r5, #0
   2a4ec:	b	2a4c4 <flatcc_emitter_copy_buffer@@Base+0x98>
   2a4f0:	add	r1, r1, #2
   2a4f4:	lsl	r1, r1, #1
   2a4f8:	uxth	r1, r1
   2a4fc:	ldrh	ip, [r0, #22]
   2a500:	cmp	ip, r1
   2a504:	bls	2a530 <flatcc_emitter_copy_buffer@@Base+0x104>
   2a508:	ldr	ip, [r0, #12]
   2a50c:	ldrh	r1, [ip, r1]
   2a510:	cmp	r1, #0
   2a514:	beq	2a530 <flatcc_emitter_copy_buffer@@Base+0x104>
   2a518:	add	r2, r1, #4
   2a51c:	ldrh	ip, [r0, #20]
   2a520:	cmp	r2, ip
   2a524:	bls	2a548 <flatcc_emitter_copy_buffer@@Base+0x11c>
   2a528:	mov	r0, #13
   2a52c:	bx	lr
   2a530:	mov	r1, #0
   2a534:	str	r1, [r3]
   2a538:	cmp	r2, r1
   2a53c:	moveq	r0, r2
   2a540:	movne	r0, #4
   2a544:	bx	lr
   2a548:	ldr	r2, [r0, #16]
   2a54c:	add	r1, r1, r2
   2a550:	tst	r1, #3
   2a554:	beq	2a560 <flatcc_emitter_copy_buffer@@Base+0x134>
   2a558:	mov	r0, #12
   2a55c:	bx	lr
   2a560:	str	r1, [r3]
   2a564:	mov	r0, #0
   2a568:	bx	lr

0002a56c <flatcc_verify_error_string@@Base>:
   2a56c:	cmp	r0, #36	; 0x24
   2a570:	ldrls	pc, [pc, r0, lsl #2]
   2a574:	b	2a72c <flatcc_verify_error_string@@Base+0x1c0>
   2a578:	andeq	sl, r2, r4, lsr r7
   2a57c:	andeq	sl, r2, ip, lsl #12
   2a580:	andeq	sl, r2, r4, lsl r6
   2a584:	andeq	sl, r2, ip, lsl r6
   2a588:	andeq	sl, r2, r4, lsr #12
   2a58c:	andeq	sl, r2, ip, lsr #12
   2a590:	andeq	sl, r2, r4, lsr r6
   2a594:	andeq	sl, r2, ip, lsr r6
   2a598:	andeq	sl, r2, r4, asr #12
   2a59c:	andeq	sl, r2, ip, asr #12
   2a5a0:	andeq	sl, r2, r4, asr r6
   2a5a4:	andeq	sl, r2, ip, asr r6
   2a5a8:	andeq	sl, r2, r4, ror #12
   2a5ac:	andeq	sl, r2, ip, ror #12
   2a5b0:	andeq	sl, r2, r4, ror r6
   2a5b4:	andeq	sl, r2, ip, ror r6
   2a5b8:	andeq	sl, r2, r4, lsl #13
   2a5bc:	andeq	sl, r2, ip, lsl #13
   2a5c0:	muleq	r2, r4, r6
   2a5c4:	muleq	r2, ip, r6
   2a5c8:	andeq	sl, r2, r4, lsr #13
   2a5cc:	andeq	sl, r2, ip, lsr #13
   2a5d0:			; <UNDEFINED> instruction: 0x0002a6b4
   2a5d4:			; <UNDEFINED> instruction: 0x0002a6bc
   2a5d8:	andeq	sl, r2, r4, asr #13
   2a5dc:	andeq	sl, r2, ip, asr #13
   2a5e0:	ldrdeq	sl, [r2], -r4
   2a5e4:	ldrdeq	sl, [r2], -ip
   2a5e8:	andeq	sl, r2, r4, ror #13
   2a5ec:	andeq	sl, r2, ip, ror #13
   2a5f0:	strdeq	sl, [r2], -r4
   2a5f4:	strdeq	sl, [r2], -ip
   2a5f8:	andeq	sl, r2, r4, lsl #14
   2a5fc:	andeq	sl, r2, ip, lsl #14
   2a600:	andeq	sl, r2, r4, lsl r7
   2a604:	andeq	sl, r2, ip, lsl r7
   2a608:	andeq	sl, r2, r4, lsr #14
   2a60c:	ldr	r0, [pc, #296]	; 2a73c <flatcc_verify_error_string@@Base+0x1d0>
   2a610:	bx	lr
   2a614:	ldr	r0, [pc, #292]	; 2a740 <flatcc_verify_error_string@@Base+0x1d4>
   2a618:	bx	lr
   2a61c:	ldr	r0, [pc, #288]	; 2a744 <flatcc_verify_error_string@@Base+0x1d8>
   2a620:	bx	lr
   2a624:	ldr	r0, [pc, #284]	; 2a748 <flatcc_verify_error_string@@Base+0x1dc>
   2a628:	bx	lr
   2a62c:	ldr	r0, [pc, #280]	; 2a74c <flatcc_verify_error_string@@Base+0x1e0>
   2a630:	bx	lr
   2a634:	ldr	r0, [pc, #276]	; 2a750 <flatcc_verify_error_string@@Base+0x1e4>
   2a638:	bx	lr
   2a63c:	ldr	r0, [pc, #272]	; 2a754 <flatcc_verify_error_string@@Base+0x1e8>
   2a640:	bx	lr
   2a644:	ldr	r0, [pc, #268]	; 2a758 <flatcc_verify_error_string@@Base+0x1ec>
   2a648:	bx	lr
   2a64c:	ldr	r0, [pc, #264]	; 2a75c <flatcc_verify_error_string@@Base+0x1f0>
   2a650:	bx	lr
   2a654:	ldr	r0, [pc, #260]	; 2a760 <flatcc_verify_error_string@@Base+0x1f4>
   2a658:	bx	lr
   2a65c:	ldr	r0, [pc, #256]	; 2a764 <flatcc_verify_error_string@@Base+0x1f8>
   2a660:	bx	lr
   2a664:	ldr	r0, [pc, #252]	; 2a768 <flatcc_verify_error_string@@Base+0x1fc>
   2a668:	bx	lr
   2a66c:	ldr	r0, [pc, #248]	; 2a76c <flatcc_verify_error_string@@Base+0x200>
   2a670:	bx	lr
   2a674:	ldr	r0, [pc, #244]	; 2a770 <flatcc_verify_error_string@@Base+0x204>
   2a678:	bx	lr
   2a67c:	ldr	r0, [pc, #240]	; 2a774 <flatcc_verify_error_string@@Base+0x208>
   2a680:	bx	lr
   2a684:	ldr	r0, [pc, #236]	; 2a778 <flatcc_verify_error_string@@Base+0x20c>
   2a688:	bx	lr
   2a68c:	ldr	r0, [pc, #232]	; 2a77c <flatcc_verify_error_string@@Base+0x210>
   2a690:	bx	lr
   2a694:	ldr	r0, [pc, #228]	; 2a780 <flatcc_verify_error_string@@Base+0x214>
   2a698:	bx	lr
   2a69c:	ldr	r0, [pc, #224]	; 2a784 <flatcc_verify_error_string@@Base+0x218>
   2a6a0:	bx	lr
   2a6a4:	ldr	r0, [pc, #220]	; 2a788 <flatcc_verify_error_string@@Base+0x21c>
   2a6a8:	bx	lr
   2a6ac:	ldr	r0, [pc, #216]	; 2a78c <flatcc_verify_error_string@@Base+0x220>
   2a6b0:	bx	lr
   2a6b4:	ldr	r0, [pc, #212]	; 2a790 <flatcc_verify_error_string@@Base+0x224>
   2a6b8:	bx	lr
   2a6bc:	ldr	r0, [pc, #208]	; 2a794 <flatcc_verify_error_string@@Base+0x228>
   2a6c0:	bx	lr
   2a6c4:	ldr	r0, [pc, #204]	; 2a798 <flatcc_verify_error_string@@Base+0x22c>
   2a6c8:	bx	lr
   2a6cc:	ldr	r0, [pc, #200]	; 2a79c <flatcc_verify_error_string@@Base+0x230>
   2a6d0:	bx	lr
   2a6d4:	ldr	r0, [pc, #196]	; 2a7a0 <flatcc_verify_error_string@@Base+0x234>
   2a6d8:	bx	lr
   2a6dc:	ldr	r0, [pc, #192]	; 2a7a4 <flatcc_verify_error_string@@Base+0x238>
   2a6e0:	bx	lr
   2a6e4:	ldr	r0, [pc, #188]	; 2a7a8 <flatcc_verify_error_string@@Base+0x23c>
   2a6e8:	bx	lr
   2a6ec:	ldr	r0, [pc, #184]	; 2a7ac <flatcc_verify_error_string@@Base+0x240>
   2a6f0:	bx	lr
   2a6f4:	ldr	r0, [pc, #180]	; 2a7b0 <flatcc_verify_error_string@@Base+0x244>
   2a6f8:	bx	lr
   2a6fc:	ldr	r0, [pc, #176]	; 2a7b4 <flatcc_verify_error_string@@Base+0x248>
   2a700:	bx	lr
   2a704:	ldr	r0, [pc, #172]	; 2a7b8 <flatcc_verify_error_string@@Base+0x24c>
   2a708:	bx	lr
   2a70c:	ldr	r0, [pc, #168]	; 2a7bc <flatcc_verify_error_string@@Base+0x250>
   2a710:	bx	lr
   2a714:	ldr	r0, [pc, #164]	; 2a7c0 <flatcc_verify_error_string@@Base+0x254>
   2a718:	bx	lr
   2a71c:	ldr	r0, [pc, #160]	; 2a7c4 <flatcc_verify_error_string@@Base+0x258>
   2a720:	bx	lr
   2a724:	ldr	r0, [pc, #156]	; 2a7c8 <flatcc_verify_error_string@@Base+0x25c>
   2a728:	bx	lr
   2a72c:	ldr	r0, [pc, #152]	; 2a7cc <flatcc_verify_error_string@@Base+0x260>
   2a730:	bx	lr
   2a734:	ldr	r0, [pc, #148]	; 2a7d0 <flatcc_verify_error_string@@Base+0x264>
   2a738:	bx	lr
   2a73c:	andeq	r2, r4, ip, lsr #3
   2a740:	andeq	r2, r4, r4, asr #3
   2a744:	ldrdeq	r2, [r4], -r8
   2a748:	strdeq	r2, [r4], -r4
   2a74c:	andeq	r2, r4, ip, lsl #4
   2a750:	andeq	r2, r4, r0, lsr r2
   2a754:	andeq	r2, r4, r0, asr r2
   2a758:	andeq	r2, r4, ip, ror #4
   2a75c:	andeq	r2, r4, r0, lsl #5
   2a760:	muleq	r4, r4, r2
   2a764:	andeq	r2, r4, ip, lsr #5
   2a768:	andeq	r2, r4, r0, asr #5
   2a76c:	ldrdeq	r2, [r4], -r8
   2a770:	strdeq	r2, [r4], -r4
   2a774:	andeq	r2, r4, r0, lsl r3
   2a778:	andeq	r2, r4, r8, lsr r3
   2a77c:	andeq	r2, r4, r0, ror #6
   2a780:	andeq	r2, r4, r8, lsl #7
   2a784:	muleq	r4, ip, r3
   2a788:	andeq	r2, r4, r4, asr #7
   2a78c:	ldrdeq	r2, [r4], -ip
   2a790:	andeq	r2, r4, r8, lsl #8
   2a794:	andeq	r2, r4, ip, lsr r4
   2a798:	andeq	r2, r4, r8, ror #8
   2a79c:	muleq	r4, r4, r4
   2a7a0:	andeq	r2, r4, r4, asr #9
   2a7a4:	ldrdeq	r2, [r4], -r8
   2a7a8:	strdeq	r2, [r4], -r4
   2a7ac:	andeq	r2, r4, ip, lsl #10
   2a7b0:	andeq	r2, r4, r4, lsr r5
   2a7b4:	andeq	r2, r4, ip, asr r5
   2a7b8:	andeq	r2, r4, r4, ror r5
   2a7bc:	muleq	r4, ip, r5
   2a7c0:	andeq	r2, r4, r4, asr #11
   2a7c4:	strdeq	r2, [r4], -r8
   2a7c8:	andeq	r2, r4, r0, lsr #12
   2a7cc:	andeq	r2, r4, r0, lsr r6
   2a7d0:	andeq	r2, r4, r8, lsr #3

0002a7d4 <flatcc_verify_field@@Base>:
   2a7d4:	add	r1, r1, #2
   2a7d8:	lsl	r1, r1, #1
   2a7dc:	uxth	r1, r1
   2a7e0:	ldrh	ip, [r0, #22]
   2a7e4:	cmp	ip, r1
   2a7e8:	bls	2a83c <flatcc_verify_field@@Base+0x68>
   2a7ec:	ldr	ip, [r0, #12]
   2a7f0:	ldrh	r1, [ip, r1]
   2a7f4:	cmp	r1, #0
   2a7f8:	beq	2a844 <flatcc_verify_field@@Base+0x70>
   2a7fc:	add	r2, r2, r1
   2a800:	ldrh	ip, [r0, #20]
   2a804:	cmp	r2, ip
   2a808:	bls	2a814 <flatcc_verify_field@@Base+0x40>
   2a80c:	mov	r0, #13
   2a810:	bx	lr
   2a814:	ldr	r2, [r0]
   2a818:	ldr	r0, [r0, #16]
   2a81c:	add	r0, r2, r0
   2a820:	add	r0, r0, r1
   2a824:	sub	r3, r3, #1
   2a828:	and	r0, r0, r3
   2a82c:	cmp	r0, #0
   2a830:	movne	r0, #12
   2a834:	moveq	r0, #0
   2a838:	bx	lr
   2a83c:	mov	r0, #0
   2a840:	bx	lr
   2a844:	mov	r0, #0
   2a848:	bx	lr

0002a84c <flatcc_verify_string_field@@Base>:
   2a84c:	push	{r4, lr}
   2a850:	sub	sp, sp, #8
   2a854:	mov	r4, r0
   2a858:	add	r3, sp, #4
   2a85c:	bl	2a4f0 <flatcc_emitter_copy_buffer@@Base+0xc4>
   2a860:	cmp	r0, #0
   2a864:	bne	2a8c4 <flatcc_verify_string_field@@Base+0x78>
   2a868:	ldr	r3, [sp, #4]
   2a86c:	cmp	r3, #0
   2a870:	beq	2a8c4 <flatcc_verify_string_field@@Base+0x78>
   2a874:	ldr	r1, [r4]
   2a878:	ldr	r2, [r1, r3]
   2a87c:	add	r2, r3, r2
   2a880:	cmp	r3, r2
   2a884:	movcs	r0, #17
   2a888:	bcs	2a8c4 <flatcc_verify_string_field@@Base+0x78>
   2a88c:	ldr	r3, [r4, #4]
   2a890:	add	ip, r2, #4
   2a894:	cmp	r3, ip
   2a898:	movcc	r0, #17
   2a89c:	bcc	2a8c4 <flatcc_verify_string_field@@Base+0x78>
   2a8a0:	tst	r2, #3
   2a8a4:	movne	r0, #17
   2a8a8:	bne	2a8c4 <flatcc_verify_string_field@@Base+0x78>
   2a8ac:	ldr	r2, [r1, r2]
   2a8b0:	sub	r3, r3, ip
   2a8b4:	add	lr, r2, #1
   2a8b8:	cmp	r3, lr
   2a8bc:	movcc	r0, #8
   2a8c0:	bcs	2a8cc <flatcc_verify_string_field@@Base+0x80>
   2a8c4:	add	sp, sp, #8
   2a8c8:	pop	{r4, pc}
   2a8cc:	add	r1, r1, ip
   2a8d0:	ldrb	r3, [r1, r2]
   2a8d4:	cmp	r3, #0
   2a8d8:	movne	r0, #7
   2a8dc:	b	2a8c4 <flatcc_verify_string_field@@Base+0x78>

0002a8e0 <flatcc_verify_vector_field@@Base>:
   2a8e0:	push	{r4, r5, r6, lr}
   2a8e4:	sub	sp, sp, #8
   2a8e8:	mov	r4, r0
   2a8ec:	mov	r5, r3
   2a8f0:	ldrh	r6, [sp, #24]
   2a8f4:	add	r3, sp, #4
   2a8f8:	bl	2a4f0 <flatcc_emitter_copy_buffer@@Base+0xc4>
   2a8fc:	cmp	r0, #0
   2a900:	bne	2a970 <flatcc_verify_vector_field@@Base+0x90>
   2a904:	ldr	r3, [sp, #4]
   2a908:	cmp	r3, #0
   2a90c:	beq	2a970 <flatcc_verify_vector_field@@Base+0x90>
   2a910:	ldr	r1, [r4]
   2a914:	ldr	r2, [r1, r3]
   2a918:	add	r2, r3, r2
   2a91c:	cmp	r3, r2
   2a920:	movcs	r0, #16
   2a924:	bcs	2a970 <flatcc_verify_vector_field@@Base+0x90>
   2a928:	ldr	ip, [r4, #4]
   2a92c:	add	lr, r2, #4
   2a930:	cmp	ip, lr
   2a934:	movcc	r0, #16
   2a938:	bcc	2a970 <flatcc_verify_vector_field@@Base+0x90>
   2a93c:	cmp	r6, #4
   2a940:	movcs	r3, r6
   2a944:	movcc	r3, #4
   2a948:	sub	r3, r3, #1
   2a94c:	orr	r3, r3, #3
   2a950:	tst	r3, lr
   2a954:	movne	r0, #16
   2a958:	bne	2a970 <flatcc_verify_vector_field@@Base+0x90>
   2a95c:	ldr	r3, [r1, r2]
   2a960:	ldr	r1, [sp, #28]
   2a964:	cmp	r1, r3
   2a968:	movcc	r0, #25
   2a96c:	bcs	2a978 <flatcc_verify_vector_field@@Base+0x98>
   2a970:	add	sp, sp, #8
   2a974:	pop	{r4, r5, r6, pc}
   2a978:	mul	r5, r3, r5
   2a97c:	sub	ip, ip, #4
   2a980:	sub	r2, ip, r2
   2a984:	cmp	r5, r2
   2a988:	movhi	r0, #26
   2a98c:	b	2a970 <flatcc_verify_vector_field@@Base+0x90>

0002a990 <flatcc_verify_string_vector_field@@Base>:
   2a990:	push	{r4, r5, r6, r7, r8, lr}
   2a994:	sub	sp, sp, #8
   2a998:	mov	r4, r0
   2a99c:	add	r3, sp, #4
   2a9a0:	bl	2a4f0 <flatcc_emitter_copy_buffer@@Base+0xc4>
   2a9a4:	cmp	r0, #0
   2a9a8:	bne	2aa80 <flatcc_verify_string_vector_field@@Base+0xf0>
   2a9ac:	ldr	r3, [sp, #4]
   2a9b0:	cmp	r3, #0
   2a9b4:	beq	2aa80 <flatcc_verify_string_vector_field@@Base+0xf0>
   2a9b8:	ldr	r6, [r4]
   2a9bc:	ldr	r5, [r4, #4]
   2a9c0:	ldr	lr, [r6, r3]
   2a9c4:	add	lr, r3, lr
   2a9c8:	cmp	r3, lr
   2a9cc:	movcs	r0, #16
   2a9d0:	bcs	2aa80 <flatcc_verify_string_vector_field@@Base+0xf0>
   2a9d4:	add	r2, lr, #4
   2a9d8:	cmp	r5, r2
   2a9dc:	bcc	2a9e8 <flatcc_verify_string_vector_field@@Base+0x58>
   2a9e0:	ands	r1, r2, #3
   2a9e4:	beq	2aa90 <flatcc_verify_string_vector_field@@Base+0x100>
   2a9e8:	add	r3, lr, #4
   2a9ec:	cmp	r5, r3
   2a9f0:	movcc	r0, #16
   2a9f4:	bcc	2aa80 <flatcc_verify_string_vector_field@@Base+0xf0>
   2a9f8:	tst	r3, #3
   2a9fc:	movne	r0, #16
   2aa00:	bne	2aa80 <flatcc_verify_string_vector_field@@Base+0xf0>
   2aa04:	ldr	r3, [r6, lr]
   2aa08:	cmn	r3, #-1073741823	; 0xc0000001
   2aa0c:	movhi	r0, #25
   2aa10:	bhi	2aa80 <flatcc_verify_string_vector_field@@Base+0xf0>
   2aa14:	sub	r5, r5, #4
   2aa18:	sub	lr, r5, lr
   2aa1c:	lsl	r3, r3, #2
   2aa20:	cmp	lr, r3
   2aa24:	movcc	r0, #26
   2aa28:	b	2aa80 <flatcc_verify_string_vector_field@@Base+0xf0>
   2aa2c:	add	lr, r6, lr
   2aa30:	ldrb	r3, [lr, r7]
   2aa34:	cmp	r3, #0
   2aa38:	movne	r0, #7
   2aa3c:	bne	2aa80 <flatcc_verify_string_vector_field@@Base+0xf0>
   2aa40:	add	r1, r1, #1
   2aa44:	add	r2, r2, #4
   2aa48:	cmp	r4, r1
   2aa4c:	beq	2aa80 <flatcc_verify_string_vector_field@@Base+0xf0>
   2aa50:	ldr	r3, [ip, #4]!
   2aa54:	add	r3, r2, r3
   2aa58:	cmp	r2, r3
   2aa5c:	bcs	2aa7c <flatcc_verify_string_vector_field@@Base+0xec>
   2aa60:	add	lr, r3, #4
   2aa64:	cmp	r5, lr
   2aa68:	bcc	2aa88 <flatcc_verify_string_vector_field@@Base+0xf8>
   2aa6c:	tst	r3, #3
   2aa70:	beq	2aabc <flatcc_verify_string_vector_field@@Base+0x12c>
   2aa74:	mov	r0, #17
   2aa78:	b	2aa80 <flatcc_verify_string_vector_field@@Base+0xf0>
   2aa7c:	mov	r0, #17
   2aa80:	add	sp, sp, #8
   2aa84:	pop	{r4, r5, r6, r7, r8, pc}
   2aa88:	mov	r0, #17
   2aa8c:	b	2aa80 <flatcc_verify_string_vector_field@@Base+0xf0>
   2aa90:	add	ip, r6, lr
   2aa94:	ldr	r4, [r6, lr]
   2aa98:	cmn	r4, #-1073741823	; 0xc0000001
   2aa9c:	bhi	2a9e8 <flatcc_verify_string_vector_field@@Base+0x58>
   2aaa0:	sub	r3, r5, #4
   2aaa4:	sub	r3, r3, lr
   2aaa8:	cmp	r3, r4, lsl #2
   2aaac:	bcc	2a9e8 <flatcc_verify_string_vector_field@@Base+0x58>
   2aab0:	cmp	r4, #0
   2aab4:	bne	2aa50 <flatcc_verify_string_vector_field@@Base+0xc0>
   2aab8:	b	2aa80 <flatcc_verify_string_vector_field@@Base+0xf0>
   2aabc:	ldr	r7, [r6, r3]
   2aac0:	sub	r3, r5, lr
   2aac4:	add	r8, r7, #1
   2aac8:	cmp	r3, r8
   2aacc:	bcs	2aa2c <flatcc_verify_string_vector_field@@Base+0x9c>
   2aad0:	mov	r0, #8
   2aad4:	b	2aa80 <flatcc_verify_string_vector_field@@Base+0xf0>

0002aad8 <flatcc_verify_table_field@@Base>:
   2aad8:	push	{r4, r5, lr}
   2aadc:	sub	sp, sp, #36	; 0x24
   2aae0:	mov	r4, r0
   2aae4:	mov	r5, r3
   2aae8:	add	r3, sp, #28
   2aaec:	bl	2a4f0 <flatcc_emitter_copy_buffer@@Base+0xc4>
   2aaf0:	cmp	r0, #0
   2aaf4:	bne	2ab04 <flatcc_verify_table_field@@Base+0x2c>
   2aaf8:	ldr	r3, [sp, #28]
   2aafc:	cmp	r3, #0
   2ab00:	bne	2ab0c <flatcc_verify_table_field@@Base+0x34>
   2ab04:	add	sp, sp, #36	; 0x24
   2ab08:	pop	{r4, r5, pc}
   2ab0c:	ldr	r0, [r4]
   2ab10:	ldr	ip, [r4, #4]
   2ab14:	ldr	r1, [r0, r3]
   2ab18:	ldr	r2, [r4, #8]
   2ab1c:	sub	r2, r2, #1
   2ab20:	str	r2, [sp, #12]
   2ab24:	cmp	r2, #0
   2ab28:	moveq	r0, #3
   2ab2c:	beq	2ab04 <flatcc_verify_table_field@@Base+0x2c>
   2ab30:	add	r2, r3, r1
   2ab34:	cmp	r3, r2
   2ab38:	movcs	r0, #15
   2ab3c:	bcs	2ab04 <flatcc_verify_table_field@@Base+0x2c>
   2ab40:	add	r3, r2, #4
   2ab44:	cmp	ip, r3
   2ab48:	movcc	r0, #15
   2ab4c:	bcc	2ab04 <flatcc_verify_table_field@@Base+0x2c>
   2ab50:	tst	r2, #3
   2ab54:	movne	r0, #15
   2ab58:	bne	2ab04 <flatcc_verify_table_field@@Base+0x2c>
   2ab5c:	str	r2, [sp, #20]
   2ab60:	ldr	r3, [r0, r2]
   2ab64:	subs	r3, r2, r3
   2ab68:	movmi	r0, #29
   2ab6c:	bmi	2ab04 <flatcc_verify_table_field@@Base+0x2c>
   2ab70:	tst	r3, #1
   2ab74:	movne	r0, #29
   2ab78:	bne	2ab04 <flatcc_verify_table_field@@Base+0x2c>
   2ab7c:	add	r1, r3, #2
   2ab80:	cmp	ip, r1
   2ab84:	movcc	r0, #27
   2ab88:	bcc	2ab04 <flatcc_verify_table_field@@Base+0x2c>
   2ab8c:	add	r4, r0, r3
   2ab90:	ldrh	lr, [r0, r3]
   2ab94:	strh	lr, [sp, #26]
   2ab98:	add	r3, lr, r3
   2ab9c:	cmp	ip, r3
   2aba0:	movcc	r0, #30
   2aba4:	bcc	2ab04 <flatcc_verify_table_field@@Base+0x2c>
   2aba8:	tst	lr, #1
   2abac:	movne	r0, #30
   2abb0:	bne	2ab04 <flatcc_verify_table_field@@Base+0x2c>
   2abb4:	cmp	lr, #3
   2abb8:	movls	r0, #28
   2abbc:	bls	2ab04 <flatcc_verify_table_field@@Base+0x2c>
   2abc0:	ldrh	r3, [r0, r1]
   2abc4:	strh	r3, [sp, #24]
   2abc8:	sub	r2, ip, r2
   2abcc:	cmp	r2, r3
   2abd0:	movcc	r0, #20
   2abd4:	bcc	2ab04 <flatcc_verify_table_field@@Base+0x2c>
   2abd8:	str	r4, [sp, #16]
   2abdc:	str	r0, [sp, #4]
   2abe0:	str	ip, [sp, #8]
   2abe4:	add	r0, sp, #4
   2abe8:	blx	r5
   2abec:	b	2ab04 <flatcc_verify_table_field@@Base+0x2c>

0002abf0 <flatcc_verify_table_vector_field@@Base>:
   2abf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2abf4:	sub	sp, sp, #44	; 0x2c
   2abf8:	mov	r5, r0
   2abfc:	str	r3, [sp, #4]
   2ac00:	add	r3, sp, #36	; 0x24
   2ac04:	bl	2a4f0 <flatcc_emitter_copy_buffer@@Base+0xc4>
   2ac08:	cmp	r0, #0
   2ac0c:	bne	2ac1c <flatcc_verify_table_vector_field@@Base+0x2c>
   2ac10:	ldr	r3, [sp, #36]	; 0x24
   2ac14:	cmp	r3, #0
   2ac18:	bne	2ac24 <flatcc_verify_table_vector_field@@Base+0x34>
   2ac1c:	add	sp, sp, #44	; 0x2c
   2ac20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ac24:	ldr	r4, [r5, #8]
   2ac28:	cmp	r4, #0
   2ac2c:	movle	r0, #3
   2ac30:	ble	2ac1c <flatcc_verify_table_vector_field@@Base+0x2c>
   2ac34:	ldr	fp, [r5]
   2ac38:	ldr	r9, [r5, #4]
   2ac3c:	ldr	r2, [fp, r3]
   2ac40:	add	r2, r3, r2
   2ac44:	cmp	r3, r2
   2ac48:	movcs	r0, #16
   2ac4c:	bcs	2ac1c <flatcc_verify_table_vector_field@@Base+0x2c>
   2ac50:	add	r6, r2, #4
   2ac54:	cmp	r9, r6
   2ac58:	bcc	2ac64 <flatcc_verify_table_vector_field@@Base+0x74>
   2ac5c:	ands	r7, r6, #3
   2ac60:	beq	2acd4 <flatcc_verify_table_vector_field@@Base+0xe4>
   2ac64:	add	r3, r2, #4
   2ac68:	cmp	r9, r3
   2ac6c:	movcc	r0, #16
   2ac70:	bcc	2ac1c <flatcc_verify_table_vector_field@@Base+0x2c>
   2ac74:	tst	r3, #3
   2ac78:	movne	r0, #16
   2ac7c:	bne	2ac1c <flatcc_verify_table_vector_field@@Base+0x2c>
   2ac80:	ldr	r3, [fp, r2]
   2ac84:	cmn	r3, #-1073741823	; 0xc0000001
   2ac88:	movhi	r0, #25
   2ac8c:	bhi	2ac1c <flatcc_verify_table_vector_field@@Base+0x2c>
   2ac90:	lsl	r3, r3, #2
   2ac94:	sub	r1, r9, #4
   2ac98:	sub	r2, r1, r2
   2ac9c:	cmp	r3, r2
   2aca0:	movhi	r0, #26
   2aca4:	b	2ac1c <flatcc_verify_table_vector_field@@Base+0x2c>
   2aca8:	add	r3, r3, r6
   2acac:	cmp	r3, r6
   2acb0:	bls	2acc8 <flatcc_verify_table_vector_field@@Base+0xd8>
   2acb4:	add	r2, r3, #4
   2acb8:	cmp	r9, r2
   2acbc:	bcc	2acc8 <flatcc_verify_table_vector_field@@Base+0xd8>
   2acc0:	tst	r3, #3
   2acc4:	beq	2ad04 <flatcc_verify_table_vector_field@@Base+0x114>
   2acc8:	ldr	r3, [r8]
   2accc:	str	r4, [sp, #20]
   2acd0:	b	2adbc <flatcc_verify_table_vector_field@@Base+0x1cc>
   2acd4:	ldr	sl, [fp, r2]
   2acd8:	cmn	sl, #-1073741823	; 0xc0000001
   2acdc:	bhi	2ac64 <flatcc_verify_table_vector_field@@Base+0x74>
   2ace0:	sub	r3, r9, #4
   2ace4:	sub	r3, r3, r2
   2ace8:	cmp	r3, sl, lsl #2
   2acec:	bcc	2ac64 <flatcc_verify_table_vector_field@@Base+0x74>
   2acf0:	cmp	sl, #0
   2acf4:	beq	2ac1c <flatcc_verify_table_vector_field@@Base+0x2c>
   2acf8:	add	r5, fp, r6
   2acfc:	sub	r4, r4, #2
   2ad00:	b	2ad94 <flatcc_verify_table_vector_field@@Base+0x1a4>
   2ad04:	str	r3, [sp, #28]
   2ad08:	ldr	r2, [fp, r3]
   2ad0c:	subs	r2, r3, r2
   2ad10:	bmi	2acc8 <flatcc_verify_table_vector_field@@Base+0xd8>
   2ad14:	tst	r2, #1
   2ad18:	bne	2acc8 <flatcc_verify_table_vector_field@@Base+0xd8>
   2ad1c:	add	r1, r2, #2
   2ad20:	cmp	r9, r1
   2ad24:	bcc	2ada8 <flatcc_verify_table_vector_field@@Base+0x1b8>
   2ad28:	add	ip, fp, r2
   2ad2c:	ldrh	r0, [fp, r2]
   2ad30:	strh	r0, [sp, #34]	; 0x22
   2ad34:	add	r2, r0, r2
   2ad38:	cmp	r9, r2
   2ad3c:	bcc	2acc8 <flatcc_verify_table_vector_field@@Base+0xd8>
   2ad40:	tst	r0, #1
   2ad44:	bne	2acc8 <flatcc_verify_table_vector_field@@Base+0xd8>
   2ad48:	cmp	r0, #3
   2ad4c:	bls	2ada8 <flatcc_verify_table_vector_field@@Base+0x1b8>
   2ad50:	ldrh	r2, [fp, r1]
   2ad54:	strh	r2, [sp, #32]
   2ad58:	sub	r3, r9, r3
   2ad5c:	cmp	r3, r2
   2ad60:	bcc	2ada8 <flatcc_verify_table_vector_field@@Base+0x1b8>
   2ad64:	str	ip, [sp, #24]
   2ad68:	str	fp, [sp, #12]
   2ad6c:	str	r9, [sp, #16]
   2ad70:	add	r0, sp, #12
   2ad74:	ldr	r3, [sp, #4]
   2ad78:	blx	r3
   2ad7c:	cmp	r0, #0
   2ad80:	bne	2acc8 <flatcc_verify_table_vector_field@@Base+0xd8>
   2ad84:	add	r7, r7, #1
   2ad88:	add	r6, r6, #4
   2ad8c:	cmp	sl, r7
   2ad90:	beq	2ac1c <flatcc_verify_table_vector_field@@Base+0x2c>
   2ad94:	mov	r8, r5
   2ad98:	ldr	r3, [r5], #4
   2ad9c:	str	r4, [sp, #20]
   2ada0:	cmp	r4, #0
   2ada4:	bne	2aca8 <flatcc_verify_table_vector_field@@Base+0xb8>
   2ada8:	ldr	r3, [r8]
   2adac:	str	r4, [sp, #20]
   2adb0:	cmp	r4, #0
   2adb4:	moveq	r0, #3
   2adb8:	beq	2ac1c <flatcc_verify_table_vector_field@@Base+0x2c>
   2adbc:	add	r3, r6, r3
   2adc0:	cmp	r6, r3
   2adc4:	movcs	r0, #15
   2adc8:	bcs	2ac1c <flatcc_verify_table_vector_field@@Base+0x2c>
   2adcc:	add	r2, r3, #4
   2add0:	cmp	r9, r2
   2add4:	movcc	r0, #15
   2add8:	bcc	2ac1c <flatcc_verify_table_vector_field@@Base+0x2c>
   2addc:	tst	r3, #3
   2ade0:	movne	r0, #15
   2ade4:	bne	2ac1c <flatcc_verify_table_vector_field@@Base+0x2c>
   2ade8:	str	r3, [sp, #28]
   2adec:	ldr	r2, [fp, r3]
   2adf0:	subs	r2, r3, r2
   2adf4:	movmi	r0, #29
   2adf8:	bmi	2ac1c <flatcc_verify_table_vector_field@@Base+0x2c>
   2adfc:	tst	r2, #1
   2ae00:	movne	r0, #29
   2ae04:	bne	2ac1c <flatcc_verify_table_vector_field@@Base+0x2c>
   2ae08:	add	r0, r2, #2
   2ae0c:	cmp	r9, r0
   2ae10:	movcc	r0, #27
   2ae14:	bcc	2ac1c <flatcc_verify_table_vector_field@@Base+0x2c>
   2ae18:	add	ip, fp, r2
   2ae1c:	ldrh	r1, [fp, r2]
   2ae20:	strh	r1, [sp, #34]	; 0x22
   2ae24:	add	r2, r1, r2
   2ae28:	cmp	r9, r2
   2ae2c:	movcc	r0, #30
   2ae30:	bcc	2ac1c <flatcc_verify_table_vector_field@@Base+0x2c>
   2ae34:	tst	r1, #1
   2ae38:	movne	r0, #30
   2ae3c:	bne	2ac1c <flatcc_verify_table_vector_field@@Base+0x2c>
   2ae40:	cmp	r1, #3
   2ae44:	movls	r0, #28
   2ae48:	bls	2ac1c <flatcc_verify_table_vector_field@@Base+0x2c>
   2ae4c:	ldrh	r2, [fp, r0]
   2ae50:	strh	r2, [sp, #32]
   2ae54:	sub	r3, r9, r3
   2ae58:	cmp	r3, r2
   2ae5c:	movcc	r0, #20
   2ae60:	bcc	2ac1c <flatcc_verify_table_vector_field@@Base+0x2c>
   2ae64:	str	ip, [sp, #24]
   2ae68:	str	fp, [sp, #12]
   2ae6c:	str	r9, [sp, #16]
   2ae70:	add	r0, sp, #12
   2ae74:	ldr	r3, [sp, #4]
   2ae78:	blx	r3
   2ae7c:	b	2ac1c <flatcc_verify_table_vector_field@@Base+0x2c>

0002ae80 <flatcc_verify_union_table@@Base>:
   2ae80:	push	{r4, r5, lr}
   2ae84:	sub	sp, sp, #28
   2ae88:	ldr	r4, [r0]
   2ae8c:	ldr	lr, [r0, #4]
   2ae90:	ldr	ip, [r0, #16]
   2ae94:	ldr	r2, [r0, #20]
   2ae98:	ldr	r3, [r0, #8]
   2ae9c:	sub	r3, r3, #1
   2aea0:	str	r3, [sp, #8]
   2aea4:	cmp	r3, #0
   2aea8:	moveq	r0, #3
   2aeac:	bne	2aeb8 <flatcc_verify_union_table@@Base+0x38>
   2aeb0:	add	sp, sp, #28
   2aeb4:	pop	{r4, r5, pc}
   2aeb8:	add	r3, ip, r2
   2aebc:	cmp	ip, r3
   2aec0:	movcs	r0, #15
   2aec4:	bcs	2aeb0 <flatcc_verify_union_table@@Base+0x30>
   2aec8:	add	r2, r3, #4
   2aecc:	cmp	lr, r2
   2aed0:	movcc	r0, #15
   2aed4:	bcc	2aeb0 <flatcc_verify_union_table@@Base+0x30>
   2aed8:	tst	r3, #3
   2aedc:	movne	r0, #15
   2aee0:	bne	2aeb0 <flatcc_verify_union_table@@Base+0x30>
   2aee4:	str	r3, [sp, #16]
   2aee8:	ldr	r2, [r4, r3]
   2aeec:	subs	r2, r3, r2
   2aef0:	movmi	r0, #29
   2aef4:	bmi	2aeb0 <flatcc_verify_union_table@@Base+0x30>
   2aef8:	tst	r2, #1
   2aefc:	movne	r0, #29
   2af00:	bne	2aeb0 <flatcc_verify_union_table@@Base+0x30>
   2af04:	add	r0, r2, #2
   2af08:	cmp	lr, r0
   2af0c:	movcc	r0, #27
   2af10:	bcc	2aeb0 <flatcc_verify_union_table@@Base+0x30>
   2af14:	add	r5, r4, r2
   2af18:	ldrh	ip, [r4, r2]
   2af1c:	strh	ip, [sp, #22]
   2af20:	add	r2, ip, r2
   2af24:	cmp	lr, r2
   2af28:	movcc	r0, #30
   2af2c:	bcc	2aeb0 <flatcc_verify_union_table@@Base+0x30>
   2af30:	tst	ip, #1
   2af34:	movne	r0, #30
   2af38:	bne	2aeb0 <flatcc_verify_union_table@@Base+0x30>
   2af3c:	cmp	ip, #3
   2af40:	movls	r0, #28
   2af44:	bls	2aeb0 <flatcc_verify_union_table@@Base+0x30>
   2af48:	ldrh	r2, [r4, r0]
   2af4c:	strh	r2, [sp, #20]
   2af50:	sub	r3, lr, r3
   2af54:	cmp	r3, r2
   2af58:	movcc	r0, #20
   2af5c:	bcc	2aeb0 <flatcc_verify_union_table@@Base+0x30>
   2af60:	str	r5, [sp, #12]
   2af64:	str	r4, [sp]
   2af68:	str	lr, [sp, #4]
   2af6c:	mov	r0, sp
   2af70:	blx	r1
   2af74:	b	2aeb0 <flatcc_verify_union_table@@Base+0x30>

0002af78 <flatcc_verify_union_struct@@Base>:
   2af78:	push	{lr}		; (str lr, [sp, #-4]!)
   2af7c:	ldr	lr, [r0, #4]
   2af80:	ldr	ip, [r0, #16]
   2af84:	ldr	r3, [r0, #20]
   2af88:	cmp	r3, #0
   2af8c:	bne	2af98 <flatcc_verify_union_struct@@Base+0x20>
   2af90:	mov	r0, #18
   2af94:	pop	{pc}		; (ldr pc, [sp], #4)
   2af98:	add	r3, ip, r3
   2af9c:	cmp	lr, r3
   2afa0:	bcs	2afac <flatcc_verify_union_struct@@Base+0x34>
   2afa4:	mov	r0, #18
   2afa8:	pop	{pc}		; (ldr pc, [sp], #4)
   2afac:	adds	r1, r1, r3
   2afb0:	bcc	2afbc <flatcc_verify_union_struct@@Base+0x44>
   2afb4:	mov	r0, #10
   2afb8:	pop	{pc}		; (ldr pc, [sp], #4)
   2afbc:	cmp	lr, r1
   2afc0:	bcs	2afcc <flatcc_verify_union_struct@@Base+0x54>
   2afc4:	mov	r0, #9
   2afc8:	pop	{pc}		; (ldr pc, [sp], #4)
   2afcc:	sub	r0, r2, #1
   2afd0:	and	r0, r0, r3
   2afd4:	cmp	r0, #0
   2afd8:	movne	r0, #11
   2afdc:	moveq	r0, #0
   2afe0:	pop	{pc}		; (ldr pc, [sp], #4)

0002afe4 <flatcc_verify_union_string@@Base>:
   2afe4:	ldr	r2, [r0, #16]
   2afe8:	ldr	r3, [r0, #20]
   2afec:	add	r3, r2, r3
   2aff0:	cmp	r2, r3
   2aff4:	bcs	2b030 <flatcc_verify_union_string@@Base+0x4c>
   2aff8:	ldr	r2, [r0, #4]
   2affc:	add	r1, r3, #4
   2b000:	cmp	r2, r1
   2b004:	bcc	2b038 <flatcc_verify_union_string@@Base+0x54>
   2b008:	tst	r3, #3
   2b00c:	beq	2b040 <flatcc_verify_union_string@@Base+0x5c>
   2b010:	mov	r0, #17
   2b014:	bx	lr
   2b018:	add	r1, r0, r1
   2b01c:	ldrb	r0, [r1, r3]
   2b020:	cmp	r0, #0
   2b024:	movne	r0, #7
   2b028:	moveq	r0, #0
   2b02c:	bx	lr
   2b030:	mov	r0, #17
   2b034:	bx	lr
   2b038:	mov	r0, #17
   2b03c:	bx	lr
   2b040:	ldr	r0, [r0]
   2b044:	ldr	r3, [r0, r3]
   2b048:	sub	r2, r2, r1
   2b04c:	add	ip, r3, #1
   2b050:	cmp	r2, ip
   2b054:	bcs	2b018 <flatcc_verify_union_string@@Base+0x34>
   2b058:	mov	r0, #8
   2b05c:	bx	lr

0002b060 <flatcc_verify_buffer_header@@Base>:
   2b060:	tst	r0, #3
   2b064:	beq	2b070 <flatcc_verify_buffer_header@@Base+0x10>
   2b068:	mov	r0, #5
   2b06c:	bx	lr
   2b070:	cmn	r1, #9
   2b074:	bls	2b080 <flatcc_verify_buffer_header@@Base+0x20>
   2b078:	mov	r0, #6
   2b07c:	bx	lr
   2b080:	cmp	r1, #7
   2b084:	bls	2b0e0 <flatcc_verify_buffer_header@@Base+0x80>
   2b088:	cmp	r2, #0
   2b08c:	beq	2b0e8 <flatcc_verify_buffer_header@@Base+0x88>
   2b090:	push	{r4, lr}
   2b094:	sub	sp, sp, #8
   2b098:	mov	r1, r2
   2b09c:	mov	r4, r0
   2b0a0:	add	r0, sp, #8
   2b0a4:	mov	r3, #0
   2b0a8:	str	r3, [r0, #-4]!
   2b0ac:	mov	r2, #4
   2b0b0:	bl	145d0 <strncpy@plt>
   2b0b4:	ldr	r3, [sp, #4]
   2b0b8:	ldr	r0, [r4, #4]
   2b0bc:	cmp	r3, #0
   2b0c0:	cmpne	r0, r3
   2b0c4:	moveq	r3, #1
   2b0c8:	movne	r3, #0
   2b0cc:	cmp	r3, #0
   2b0d0:	moveq	r0, #2
   2b0d4:	movne	r0, #0
   2b0d8:	add	sp, sp, #8
   2b0dc:	pop	{r4, pc}
   2b0e0:	mov	r0, #1
   2b0e4:	bx	lr
   2b0e8:	mov	r0, #0
   2b0ec:	bx	lr

0002b0f0 <flatcc_verify_typed_buffer_header@@Base>:
   2b0f0:	tst	r0, #3
   2b0f4:	beq	2b100 <flatcc_verify_typed_buffer_header@@Base+0x10>
   2b0f8:	mov	r0, #5
   2b0fc:	bx	lr
   2b100:	cmn	r1, #9
   2b104:	bls	2b110 <flatcc_verify_typed_buffer_header@@Base+0x20>
   2b108:	mov	r0, #6
   2b10c:	bx	lr
   2b110:	cmp	r1, #7
   2b114:	bls	2b134 <flatcc_verify_typed_buffer_header@@Base+0x44>
   2b118:	cmp	r2, #0
   2b11c:	beq	2b13c <flatcc_verify_typed_buffer_header@@Base+0x4c>
   2b120:	ldr	r0, [r0, #4]
   2b124:	cmp	r2, r0
   2b128:	movne	r0, #2
   2b12c:	moveq	r0, #0
   2b130:	bx	lr
   2b134:	mov	r0, #1
   2b138:	bx	lr
   2b13c:	mov	r0, #0
   2b140:	bx	lr

0002b144 <flatcc_verify_struct_as_root@@Base>:
   2b144:	push	{r4, r5, r6, r7, r8, lr}
   2b148:	mov	r5, r0
   2b14c:	mov	r4, r1
   2b150:	mov	r7, r2
   2b154:	mov	r6, r3
   2b158:	bl	2b060 <flatcc_verify_buffer_header@@Base>
   2b15c:	cmp	r0, #0
   2b160:	bne	2b188 <flatcc_verify_struct_as_root@@Base+0x44>
   2b164:	ldr	r2, [r5]
   2b168:	clz	r3, r2
   2b16c:	lsr	r3, r3, #5
   2b170:	cmp	r4, r2
   2b174:	orrcc	r3, r3, #1
   2b178:	cmp	r3, #0
   2b17c:	beq	2b19c <flatcc_verify_struct_as_root@@Base+0x58>
   2b180:	mov	r0, #18
   2b184:	pop	{r4, r5, r6, r7, r8, pc}
   2b188:	mov	r2, r7
   2b18c:	mov	r1, r4
   2b190:	mov	r0, r5
   2b194:	bl	2b060 <flatcc_verify_buffer_header@@Base>
   2b198:	pop	{r4, r5, r6, r7, r8, pc}
   2b19c:	adds	r6, r6, r2
   2b1a0:	bcc	2b1ac <flatcc_verify_struct_as_root@@Base+0x68>
   2b1a4:	mov	r0, #10
   2b1a8:	pop	{r4, r5, r6, r7, r8, pc}
   2b1ac:	cmp	r4, r6
   2b1b0:	bcs	2b1bc <flatcc_verify_struct_as_root@@Base+0x78>
   2b1b4:	mov	r0, #9
   2b1b8:	pop	{r4, r5, r6, r7, r8, pc}
   2b1bc:	ldrh	r3, [sp, #24]
   2b1c0:	sub	r3, r3, #1
   2b1c4:	and	r2, r2, r3
   2b1c8:	cmp	r2, #0
   2b1cc:	movne	r0, #11
   2b1d0:	pop	{r4, r5, r6, r7, r8, pc}

0002b1d4 <flatcc_verify_struct_as_typed_root@@Base>:
   2b1d4:	push	{r4, r5, r6, lr}
   2b1d8:	mov	r5, r0
   2b1dc:	mov	r4, r1
   2b1e0:	mov	r6, r3
   2b1e4:	bl	2b0f0 <flatcc_verify_typed_buffer_header@@Base>
   2b1e8:	cmp	r0, #0
   2b1ec:	popne	{r4, r5, r6, pc}
   2b1f0:	ldr	r2, [r5]
   2b1f4:	clz	r3, r2
   2b1f8:	lsr	r3, r3, #5
   2b1fc:	cmp	r4, r2
   2b200:	orrcc	r3, r3, #1
   2b204:	cmp	r3, #0
   2b208:	beq	2b214 <flatcc_verify_struct_as_typed_root@@Base+0x40>
   2b20c:	mov	r0, #18
   2b210:	pop	{r4, r5, r6, pc}
   2b214:	adds	r6, r6, r2
   2b218:	bcc	2b224 <flatcc_verify_struct_as_typed_root@@Base+0x50>
   2b21c:	mov	r0, #10
   2b220:	pop	{r4, r5, r6, pc}
   2b224:	cmp	r4, r6
   2b228:	bcs	2b234 <flatcc_verify_struct_as_typed_root@@Base+0x60>
   2b22c:	mov	r0, #9
   2b230:	pop	{r4, r5, r6, pc}
   2b234:	ldrh	r3, [sp, #16]
   2b238:	sub	r3, r3, #1
   2b23c:	and	r2, r2, r3
   2b240:	cmp	r2, #0
   2b244:	movne	r0, #11
   2b248:	pop	{r4, r5, r6, pc}

0002b24c <flatcc_verify_table_as_root@@Base>:
   2b24c:	push	{r4, r5, r6, r7, lr}
   2b250:	sub	sp, sp, #28
   2b254:	mov	r4, r0
   2b258:	mov	r5, r1
   2b25c:	mov	r6, r2
   2b260:	mov	r7, r3
   2b264:	bl	2b060 <flatcc_verify_buffer_header@@Base>
   2b268:	cmp	r0, #0
   2b26c:	bne	2b338 <flatcc_verify_table_as_root@@Base+0xec>
   2b270:	ldr	r3, [r4]
   2b274:	mov	r2, #99	; 0x63
   2b278:	str	r2, [sp, #8]
   2b27c:	cmp	r3, #0
   2b280:	moveq	r0, #15
   2b284:	beq	2b348 <flatcc_verify_table_as_root@@Base+0xfc>
   2b288:	add	r2, r3, #4
   2b28c:	cmp	r5, r2
   2b290:	movcc	r0, #15
   2b294:	bcc	2b348 <flatcc_verify_table_as_root@@Base+0xfc>
   2b298:	tst	r3, #3
   2b29c:	movne	r0, #15
   2b2a0:	bne	2b348 <flatcc_verify_table_as_root@@Base+0xfc>
   2b2a4:	str	r3, [sp, #16]
   2b2a8:	ldr	r2, [r4, r3]
   2b2ac:	subs	r2, r3, r2
   2b2b0:	movmi	r0, #29
   2b2b4:	bmi	2b348 <flatcc_verify_table_as_root@@Base+0xfc>
   2b2b8:	tst	r2, #1
   2b2bc:	movne	r0, #29
   2b2c0:	bne	2b348 <flatcc_verify_table_as_root@@Base+0xfc>
   2b2c4:	add	r1, r2, #2
   2b2c8:	cmp	r5, r1
   2b2cc:	movcc	r0, #27
   2b2d0:	bcc	2b348 <flatcc_verify_table_as_root@@Base+0xfc>
   2b2d4:	add	ip, r4, r2
   2b2d8:	ldrh	r0, [r4, r2]
   2b2dc:	strh	r0, [sp, #22]
   2b2e0:	add	r2, r0, r2
   2b2e4:	cmp	r5, r2
   2b2e8:	movcc	r0, #30
   2b2ec:	bcc	2b348 <flatcc_verify_table_as_root@@Base+0xfc>
   2b2f0:	tst	r0, #1
   2b2f4:	movne	r0, #30
   2b2f8:	bne	2b348 <flatcc_verify_table_as_root@@Base+0xfc>
   2b2fc:	cmp	r0, #3
   2b300:	movls	r0, #28
   2b304:	bls	2b348 <flatcc_verify_table_as_root@@Base+0xfc>
   2b308:	ldrh	r2, [r4, r1]
   2b30c:	strh	r2, [sp, #20]
   2b310:	sub	r3, r5, r3
   2b314:	cmp	r3, r2
   2b318:	movcc	r0, #20
   2b31c:	bcc	2b348 <flatcc_verify_table_as_root@@Base+0xfc>
   2b320:	str	ip, [sp, #12]
   2b324:	str	r4, [sp]
   2b328:	str	r5, [sp, #4]
   2b32c:	mov	r0, sp
   2b330:	blx	r7
   2b334:	b	2b348 <flatcc_verify_table_as_root@@Base+0xfc>
   2b338:	mov	r2, r6
   2b33c:	mov	r1, r5
   2b340:	mov	r0, r4
   2b344:	bl	2b060 <flatcc_verify_buffer_header@@Base>
   2b348:	add	sp, sp, #28
   2b34c:	pop	{r4, r5, r6, r7, pc}

0002b350 <flatcc_verify_table_as_typed_root@@Base>:
   2b350:	push	{r4, r5, r6, lr}
   2b354:	sub	sp, sp, #24
   2b358:	mov	r4, r0
   2b35c:	mov	r5, r1
   2b360:	mov	r6, r3
   2b364:	bl	2b0f0 <flatcc_verify_typed_buffer_header@@Base>
   2b368:	cmp	r0, #0
   2b36c:	beq	2b378 <flatcc_verify_table_as_typed_root@@Base+0x28>
   2b370:	add	sp, sp, #24
   2b374:	pop	{r4, r5, r6, pc}
   2b378:	ldr	r3, [r4]
   2b37c:	mov	r2, #99	; 0x63
   2b380:	str	r2, [sp, #8]
   2b384:	cmp	r3, #0
   2b388:	moveq	r0, #15
   2b38c:	beq	2b370 <flatcc_verify_table_as_typed_root@@Base+0x20>
   2b390:	add	r2, r3, #4
   2b394:	cmp	r5, r2
   2b398:	movcc	r0, #15
   2b39c:	bcc	2b370 <flatcc_verify_table_as_typed_root@@Base+0x20>
   2b3a0:	tst	r3, #3
   2b3a4:	movne	r0, #15
   2b3a8:	bne	2b370 <flatcc_verify_table_as_typed_root@@Base+0x20>
   2b3ac:	str	r3, [sp, #16]
   2b3b0:	ldr	r2, [r4, r3]
   2b3b4:	subs	r2, r3, r2
   2b3b8:	movmi	r0, #29
   2b3bc:	bmi	2b370 <flatcc_verify_table_as_typed_root@@Base+0x20>
   2b3c0:	tst	r2, #1
   2b3c4:	movne	r0, #29
   2b3c8:	bne	2b370 <flatcc_verify_table_as_typed_root@@Base+0x20>
   2b3cc:	add	r1, r2, #2
   2b3d0:	cmp	r5, r1
   2b3d4:	movcc	r0, #27
   2b3d8:	bcc	2b370 <flatcc_verify_table_as_typed_root@@Base+0x20>
   2b3dc:	add	ip, r4, r2
   2b3e0:	ldrh	r0, [r4, r2]
   2b3e4:	strh	r0, [sp, #22]
   2b3e8:	add	r2, r0, r2
   2b3ec:	cmp	r5, r2
   2b3f0:	movcc	r0, #30
   2b3f4:	bcc	2b370 <flatcc_verify_table_as_typed_root@@Base+0x20>
   2b3f8:	tst	r0, #1
   2b3fc:	movne	r0, #30
   2b400:	bne	2b370 <flatcc_verify_table_as_typed_root@@Base+0x20>
   2b404:	cmp	r0, #3
   2b408:	movls	r0, #28
   2b40c:	bls	2b370 <flatcc_verify_table_as_typed_root@@Base+0x20>
   2b410:	ldrh	r2, [r4, r1]
   2b414:	strh	r2, [sp, #20]
   2b418:	sub	r3, r5, r3
   2b41c:	cmp	r3, r2
   2b420:	movcc	r0, #20
   2b424:	bcc	2b370 <flatcc_verify_table_as_typed_root@@Base+0x20>
   2b428:	str	ip, [sp, #12]
   2b42c:	str	r4, [sp]
   2b430:	str	r5, [sp, #4]
   2b434:	mov	r0, sp
   2b438:	blx	r6
   2b43c:	b	2b370 <flatcc_verify_table_as_typed_root@@Base+0x20>

0002b440 <flatcc_verify_struct_as_nested_root@@Base>:
   2b440:	push	{r4, r5, r6, r7, r8, lr}
   2b444:	sub	sp, sp, #8
   2b448:	mov	r5, r0
   2b44c:	mov	r4, r1
   2b450:	mov	r8, r2
   2b454:	mov	r7, r3
   2b458:	ldrh	r6, [sp, #36]	; 0x24
   2b45c:	mvn	r3, #0
   2b460:	str	r3, [sp, #4]
   2b464:	mov	r3, #1
   2b468:	str	r3, [sp]
   2b46c:	mov	r3, r6
   2b470:	bl	2a8e0 <flatcc_verify_vector_field@@Base>
   2b474:	cmp	r0, #0
   2b478:	bne	2b4e0 <flatcc_verify_struct_as_nested_root@@Base+0xa0>
   2b47c:	add	r4, r4, #2
   2b480:	lsl	r4, r4, #1
   2b484:	uxth	r4, r4
   2b488:	ldrh	r3, [r5, #22]
   2b48c:	cmp	r3, r4
   2b490:	bls	2b4d8 <flatcc_verify_struct_as_nested_root@@Base+0x98>
   2b494:	ldr	r3, [r5, #12]
   2b498:	ldrh	r3, [r3, r4]
   2b49c:	cmp	r3, #0
   2b4a0:	beq	2b4d8 <flatcc_verify_struct_as_nested_root@@Base+0x98>
   2b4a4:	ldr	r2, [r5, #16]
   2b4a8:	add	r3, r3, r2
   2b4ac:	ldr	r2, [r5]
   2b4b0:	adds	r1, r2, r3
   2b4b4:	beq	2b4d8 <flatcc_verify_struct_as_nested_root@@Base+0x98>
   2b4b8:	ldr	r3, [r2, r3]
   2b4bc:	add	r0, r1, r3
   2b4c0:	ldr	r1, [r1, r3]
   2b4c4:	str	r6, [sp]
   2b4c8:	ldr	r3, [sp, #32]
   2b4cc:	mov	r2, r7
   2b4d0:	add	r0, r0, #4
   2b4d4:	bl	2b144 <flatcc_verify_struct_as_root@@Base>
   2b4d8:	add	sp, sp, #8
   2b4dc:	pop	{r4, r5, r6, r7, r8, pc}
   2b4e0:	mvn	r3, #0
   2b4e4:	str	r3, [sp, #4]
   2b4e8:	mov	r3, #1
   2b4ec:	str	r3, [sp]
   2b4f0:	mov	r3, r6
   2b4f4:	mov	r2, r8
   2b4f8:	mov	r1, r4
   2b4fc:	mov	r0, r5
   2b500:	bl	2a8e0 <flatcc_verify_vector_field@@Base>
   2b504:	b	2b4d8 <flatcc_verify_struct_as_nested_root@@Base+0x98>

0002b508 <flatcc_verify_table_as_nested_root@@Base>:
   2b508:	push	{r4, r5, r6, r7, r8, lr}
   2b50c:	sub	sp, sp, #32
   2b510:	mov	r5, r0
   2b514:	mov	r4, r1
   2b518:	mov	r8, r2
   2b51c:	mov	r6, r3
   2b520:	ldrh	r7, [sp, #56]	; 0x38
   2b524:	mvn	r3, #0
   2b528:	str	r3, [sp, #4]
   2b52c:	mov	r3, #1
   2b530:	str	r3, [sp]
   2b534:	mov	r3, r7
   2b538:	bl	2a8e0 <flatcc_verify_vector_field@@Base>
   2b53c:	cmp	r0, #0
   2b540:	bne	2b5cc <flatcc_verify_table_as_nested_root@@Base+0xc4>
   2b544:	add	r4, r4, #2
   2b548:	lsl	r4, r4, #1
   2b54c:	uxth	r4, r4
   2b550:	ldrh	r3, [r5, #22]
   2b554:	cmp	r3, r4
   2b558:	bls	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2b55c:	ldr	r3, [r5, #12]
   2b560:	ldrh	r3, [r3, r4]
   2b564:	cmp	r3, #0
   2b568:	beq	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2b56c:	ldr	r2, [r5, #16]
   2b570:	add	r3, r3, r2
   2b574:	ldr	r2, [r5]
   2b578:	adds	r1, r2, r3
   2b57c:	beq	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2b580:	ldr	r3, [r2, r3]
   2b584:	add	r4, r1, r3
   2b588:	ldr	r7, [r1, r3]
   2b58c:	add	r8, r4, #4
   2b590:	mov	r2, r6
   2b594:	mov	r1, r7
   2b598:	mov	r0, r8
   2b59c:	bl	2b060 <flatcc_verify_buffer_header@@Base>
   2b5a0:	cmp	r0, #0
   2b5a4:	bne	2b5f4 <flatcc_verify_table_as_nested_root@@Base+0xec>
   2b5a8:	ldr	r2, [r4, #4]
   2b5ac:	ldr	r3, [r5, #8]
   2b5b0:	sub	r3, r3, #1
   2b5b4:	str	r3, [sp, #16]
   2b5b8:	cmp	r3, #0
   2b5bc:	moveq	r0, #3
   2b5c0:	bne	2b608 <flatcc_verify_table_as_nested_root@@Base+0x100>
   2b5c4:	add	sp, sp, #32
   2b5c8:	pop	{r4, r5, r6, r7, r8, pc}
   2b5cc:	mvn	r3, #0
   2b5d0:	str	r3, [sp, #4]
   2b5d4:	mov	r3, #1
   2b5d8:	str	r3, [sp]
   2b5dc:	mov	r3, r7
   2b5e0:	mov	r2, r8
   2b5e4:	mov	r1, r4
   2b5e8:	mov	r0, r5
   2b5ec:	bl	2a8e0 <flatcc_verify_vector_field@@Base>
   2b5f0:	b	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2b5f4:	mov	r2, r6
   2b5f8:	mov	r1, r7
   2b5fc:	mov	r0, r8
   2b600:	bl	2b060 <flatcc_verify_buffer_header@@Base>
   2b604:	b	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2b608:	cmp	r2, #0
   2b60c:	moveq	r0, #15
   2b610:	beq	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2b614:	add	r3, r2, #4
   2b618:	cmp	r7, r3
   2b61c:	movcc	r0, #15
   2b620:	bcc	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2b624:	tst	r2, #3
   2b628:	movne	r0, #15
   2b62c:	bne	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2b630:	str	r2, [sp, #24]
   2b634:	ldr	r3, [r8, r2]
   2b638:	subs	r3, r2, r3
   2b63c:	movmi	r0, #29
   2b640:	bmi	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2b644:	tst	r3, #1
   2b648:	movne	r0, #29
   2b64c:	bne	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2b650:	add	r1, r3, #2
   2b654:	cmp	r7, r1
   2b658:	movcc	r0, #27
   2b65c:	bcc	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2b660:	add	ip, r8, r3
   2b664:	ldrh	r0, [r8, r3]
   2b668:	strh	r0, [sp, #30]
   2b66c:	add	r3, r0, r3
   2b670:	cmp	r7, r3
   2b674:	movcc	r0, #30
   2b678:	bcc	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2b67c:	tst	r0, #1
   2b680:	movne	r0, #30
   2b684:	bne	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2b688:	cmp	r0, #3
   2b68c:	movls	r0, #28
   2b690:	bls	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2b694:	ldrh	r3, [r8, r1]
   2b698:	strh	r3, [sp, #28]
   2b69c:	sub	r2, r7, r2
   2b6a0:	cmp	r2, r3
   2b6a4:	movcc	r0, #20
   2b6a8:	bcc	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2b6ac:	str	ip, [sp, #20]
   2b6b0:	str	r8, [sp, #8]
   2b6b4:	str	r7, [sp, #12]
   2b6b8:	add	r0, sp, #8
   2b6bc:	ldr	r3, [sp, #60]	; 0x3c
   2b6c0:	blx	r3
   2b6c4:	b	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>

0002b6c8 <flatcc_verify_union_field@@Base>:
   2b6c8:	push	{r4, r5, r6, r7, lr}
   2b6cc:	sub	sp, sp, #36	; 0x24
   2b6d0:	sub	ip, r1, #1
   2b6d4:	uxth	ip, ip
   2b6d8:	add	ip, ip, #2
   2b6dc:	lsl	ip, ip, #1
   2b6e0:	uxth	ip, ip
   2b6e4:	ldrh	lr, [r0, #22]
   2b6e8:	cmp	lr, ip
   2b6ec:	bls	2b71c <flatcc_verify_union_field@@Base+0x54>
   2b6f0:	ldr	r6, [r0, #12]
   2b6f4:	ldrh	ip, [r6, ip]
   2b6f8:	cmp	ip, #0
   2b6fc:	beq	2b71c <flatcc_verify_union_field@@Base+0x54>
   2b700:	add	r4, ip, #1
   2b704:	ldrh	r5, [r0, #20]
   2b708:	cmp	r4, r5
   2b70c:	movhi	r0, #13
   2b710:	bls	2b788 <flatcc_verify_union_field@@Base+0xc0>
   2b714:	add	sp, sp, #36	; 0x24
   2b718:	pop	{r4, r5, r6, r7, pc}
   2b71c:	add	r1, r1, #2
   2b720:	lsl	r1, r1, #1
   2b724:	uxth	r1, r1
   2b728:	cmp	lr, r1
   2b72c:	bls	2b744 <flatcc_verify_union_field@@Base+0x7c>
   2b730:	ldr	r3, [r0, #12]
   2b734:	ldrh	r3, [r3, r1]
   2b738:	cmp	r3, #0
   2b73c:	movne	r0, #23
   2b740:	bne	2b714 <flatcc_verify_union_field@@Base+0x4c>
   2b744:	cmp	r2, #0
   2b748:	moveq	r0, r2
   2b74c:	movne	r0, #21
   2b750:	b	2b714 <flatcc_verify_union_field@@Base+0x4c>
   2b754:	ldr	lr, [r0, #16]
   2b758:	add	ip, ip, lr
   2b75c:	add	r5, r7, ip
   2b760:	ldrb	lr, [r7, ip]
   2b764:	ldrh	r4, [r6, r4]
   2b768:	adds	ip, lr, #0
   2b76c:	movne	ip, #1
   2b770:	cmp	r4, #0
   2b774:	orreq	ip, ip, #1
   2b778:	cmp	ip, #0
   2b77c:	moveq	r0, #24
   2b780:	beq	2b714 <flatcc_verify_union_field@@Base+0x4c>
   2b784:	b	2b7b0 <flatcc_verify_union_field@@Base+0xe8>
   2b788:	ldr	r7, [r0]
   2b78c:	add	r4, r1, #2
   2b790:	lsl	r4, r4, #1
   2b794:	uxth	r4, r4
   2b798:	cmp	lr, r4
   2b79c:	bhi	2b754 <flatcc_verify_union_field@@Base+0x8c>
   2b7a0:	ldr	lr, [r0, #16]
   2b7a4:	add	ip, ip, lr
   2b7a8:	add	r5, r7, ip
   2b7ac:	ldrb	lr, [r7, ip]
   2b7b0:	cmp	lr, #0
   2b7b4:	moveq	r0, #0
   2b7b8:	beq	2b714 <flatcc_verify_union_field@@Base+0x4c>
   2b7bc:	mov	r6, r3
   2b7c0:	mov	r4, r0
   2b7c4:	add	r3, sp, #28
   2b7c8:	bl	2a4f0 <flatcc_emitter_copy_buffer@@Base+0xc4>
   2b7cc:	cmp	r0, #0
   2b7d0:	bne	2b714 <flatcc_verify_union_field@@Base+0x4c>
   2b7d4:	ldr	r3, [sp, #28]
   2b7d8:	cmp	r3, #0
   2b7dc:	beq	2b714 <flatcc_verify_union_field@@Base+0x4c>
   2b7e0:	ldr	r2, [r4]
   2b7e4:	str	r2, [sp, #4]
   2b7e8:	ldr	r1, [r4, #4]
   2b7ec:	str	r1, [sp, #8]
   2b7f0:	ldr	r1, [r4, #8]
   2b7f4:	str	r1, [sp, #12]
   2b7f8:	str	r3, [sp, #20]
   2b7fc:	ldr	r3, [r2, r3]
   2b800:	str	r3, [sp, #24]
   2b804:	ldrb	r3, [r5]
   2b808:	strb	r3, [sp, #16]
   2b80c:	add	r0, sp, #4
   2b810:	blx	r6
   2b814:	b	2b714 <flatcc_verify_union_field@@Base+0x4c>

0002b818 <flatcc_verify_union_vector_field@@Base>:
   2b818:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2b81c:	sub	sp, sp, #40	; 0x28
   2b820:	sub	r4, r1, #1
   2b824:	uxth	r4, r4
   2b828:	add	ip, r4, #2
   2b82c:	lsl	ip, ip, #1
   2b830:	uxth	r6, ip
   2b834:	ldrh	lr, [r0, #22]
   2b838:	cmp	lr, r6
   2b83c:	bls	2b968 <flatcc_verify_union_vector_field@@Base+0x150>
   2b840:	ldr	ip, [r0, #12]
   2b844:	ldrh	ip, [ip, r6]
   2b848:	cmp	ip, #0
   2b84c:	beq	2b968 <flatcc_verify_union_vector_field@@Base+0x150>
   2b850:	mov	r8, r3
   2b854:	mov	r9, r2
   2b858:	mov	sl, r1
   2b85c:	mov	r5, r0
   2b860:	mvn	r3, #0
   2b864:	str	r3, [sp, #4]
   2b868:	mov	r3, #1
   2b86c:	str	r3, [sp]
   2b870:	mov	r1, r4
   2b874:	bl	2a8e0 <flatcc_verify_vector_field@@Base>
   2b878:	subs	r7, r0, #0
   2b87c:	bne	2b9ac <flatcc_verify_union_vector_field@@Base+0x194>
   2b880:	ldrh	r3, [r5, #22]
   2b884:	cmp	r3, r6
   2b888:	bls	2b9a0 <flatcc_verify_union_vector_field@@Base+0x188>
   2b88c:	ldr	r3, [r5, #12]
   2b890:	ldrh	r3, [r3, r6]
   2b894:	cmp	r3, #0
   2b898:	beq	2b9a0 <flatcc_verify_union_vector_field@@Base+0x188>
   2b89c:	ldr	r2, [r5, #16]
   2b8a0:	add	r3, r3, r2
   2b8a4:	ldr	r2, [r5]
   2b8a8:	adds	r1, r2, r3
   2b8ac:	beq	2b9a0 <flatcc_verify_union_vector_field@@Base+0x188>
   2b8b0:	ldr	r3, [r2, r3]
   2b8b4:	add	r4, r1, r3
   2b8b8:	ldr	r6, [r1, r3]
   2b8bc:	add	r3, sp, #36	; 0x24
   2b8c0:	mov	r2, r9
   2b8c4:	mov	r1, sl
   2b8c8:	mov	r0, r5
   2b8cc:	bl	2a4f0 <flatcc_emitter_copy_buffer@@Base+0xc4>
   2b8d0:	subs	r7, r0, #0
   2b8d4:	bne	2b9a0 <flatcc_verify_union_vector_field@@Base+0x188>
   2b8d8:	ldr	r3, [sp, #36]	; 0x24
   2b8dc:	cmp	r3, #0
   2b8e0:	beq	2b9a0 <flatcc_verify_union_vector_field@@Base+0x188>
   2b8e4:	ldr	r1, [r5, #8]
   2b8e8:	cmp	r1, #0
   2b8ec:	movle	r7, #3
   2b8f0:	ble	2b9a0 <flatcc_verify_union_vector_field@@Base+0x188>
   2b8f4:	ldr	r0, [r5]
   2b8f8:	ldr	ip, [r5, #4]
   2b8fc:	ldr	r2, [r0, r3]
   2b900:	add	r2, r3, r2
   2b904:	cmp	r3, r2
   2b908:	movcs	r7, #16
   2b90c:	bcs	2b9a0 <flatcc_verify_union_vector_field@@Base+0x188>
   2b910:	add	r5, r2, #4
   2b914:	cmp	ip, r5
   2b918:	bcc	2b924 <flatcc_verify_union_vector_field@@Base+0x10c>
   2b91c:	tst	r5, #3
   2b920:	beq	2ba44 <flatcc_verify_union_vector_field@@Base+0x22c>
   2b924:	add	r3, r2, #4
   2b928:	cmp	ip, r3
   2b92c:	movcc	r7, #16
   2b930:	bcc	2b9a0 <flatcc_verify_union_vector_field@@Base+0x188>
   2b934:	tst	r3, #3
   2b938:	movne	r7, #16
   2b93c:	bne	2b9a0 <flatcc_verify_union_vector_field@@Base+0x188>
   2b940:	ldr	r3, [r0, r2]
   2b944:	cmn	r3, #-1073741823	; 0xc0000001
   2b948:	movhi	r7, #25
   2b94c:	bhi	2b9a0 <flatcc_verify_union_vector_field@@Base+0x188>
   2b950:	sub	ip, ip, #4
   2b954:	sub	r2, ip, r2
   2b958:	lsl	r3, r3, #2
   2b95c:	cmp	r2, r3
   2b960:	movcc	r7, #26
   2b964:	b	2b9a0 <flatcc_verify_union_vector_field@@Base+0x188>
   2b968:	add	ip, r1, #2
   2b96c:	lsl	ip, ip, #1
   2b970:	uxth	ip, ip
   2b974:	cmp	lr, ip
   2b978:	ldrhi	lr, [r0, #12]
   2b97c:	ldrhhi	ip, [lr, ip]
   2b980:	movls	ip, #0
   2b984:	clz	ip, ip
   2b988:	lsr	ip, ip, #5
   2b98c:	cmp	r2, #0
   2b990:	moveq	ip, #0
   2b994:	cmp	ip, #0
   2b998:	movne	r7, #22
   2b99c:	beq	2b850 <flatcc_verify_union_vector_field@@Base+0x38>
   2b9a0:	mov	r0, r7
   2b9a4:	add	sp, sp, #40	; 0x28
   2b9a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b9ac:	mvn	r3, #0
   2b9b0:	str	r3, [sp, #4]
   2b9b4:	mov	r3, #1
   2b9b8:	str	r3, [sp]
   2b9bc:	mov	r2, r9
   2b9c0:	mov	r1, r4
   2b9c4:	mov	r0, r5
   2b9c8:	bl	2a8e0 <flatcc_verify_vector_field@@Base>
   2b9cc:	mov	r7, r0
   2b9d0:	b	2b9a0 <flatcc_verify_union_vector_field@@Base+0x188>
   2b9d4:	ldrb	r2, [r4]
   2b9d8:	cmp	r2, #0
   2b9dc:	beq	2ba3c <flatcc_verify_union_vector_field@@Base+0x224>
   2b9e0:	strb	r2, [sp, #24]
   2b9e4:	str	r5, [sp, #28]
   2b9e8:	str	r3, [sp, #32]
   2b9ec:	add	r0, sp, #12
   2b9f0:	blx	r8
   2b9f4:	cmp	r0, #0
   2b9f8:	bne	2ba2c <flatcc_verify_union_vector_field@@Base+0x214>
   2b9fc:	add	r5, r5, #4
   2ba00:	add	r4, r4, #1
   2ba04:	cmp	r4, r9
   2ba08:	beq	2b9a0 <flatcc_verify_union_vector_field@@Base+0x188>
   2ba0c:	ldr	r3, [r6, #4]!
   2ba10:	cmp	r3, #0
   2ba14:	bne	2b9d4 <flatcc_verify_union_vector_field@@Base+0x1bc>
   2ba18:	ldrb	r3, [r4]
   2ba1c:	cmp	r3, #0
   2ba20:	beq	2b9fc <flatcc_verify_union_vector_field@@Base+0x1e4>
   2ba24:	mov	r7, #32
   2ba28:	b	2b9a0 <flatcc_verify_union_vector_field@@Base+0x188>
   2ba2c:	add	r0, sp, #12
   2ba30:	blx	r8
   2ba34:	mov	r7, r0
   2ba38:	b	2b9a0 <flatcc_verify_union_vector_field@@Base+0x188>
   2ba3c:	mov	r7, #33	; 0x21
   2ba40:	b	2b9a0 <flatcc_verify_union_vector_field@@Base+0x188>
   2ba44:	add	r3, r0, r2
   2ba48:	ldr	lr, [r0, r2]
   2ba4c:	cmn	lr, #-1073741823	; 0xc0000001
   2ba50:	bhi	2b924 <flatcc_verify_union_vector_field@@Base+0x10c>
   2ba54:	sub	r9, ip, #4
   2ba58:	sub	r9, r9, r2
   2ba5c:	cmp	r9, lr, lsl #2
   2ba60:	bcc	2b924 <flatcc_verify_union_vector_field@@Base+0x10c>
   2ba64:	cmp	r6, lr
   2ba68:	movne	r7, #34	; 0x22
   2ba6c:	bne	2b9a0 <flatcc_verify_union_vector_field@@Base+0x188>
   2ba70:	str	r0, [sp, #12]
   2ba74:	str	ip, [sp, #16]
   2ba78:	sub	r1, r1, #1
   2ba7c:	str	r1, [sp, #20]
   2ba80:	cmp	lr, #0
   2ba84:	beq	2b9a0 <flatcc_verify_union_vector_field@@Base+0x188>
   2ba88:	mov	r6, r3
   2ba8c:	add	r4, r4, #4
   2ba90:	add	r9, r4, lr
   2ba94:	b	2ba0c <flatcc_verify_union_vector_field@@Base+0x1f4>
   2ba98:	sub	sp, sp, #8
   2ba9c:	push	{r4, r5, r6, lr}
   2baa0:	add	r1, sp, #12
   2baa4:	stmib	r1, {r2, r3}
   2baa8:	ldrd	r2, [sp, #16]
   2baac:	ldr	r6, [sp, #24]
   2bab0:	orrs	r1, r2, r3
   2bab4:	beq	2bb64 <flatcc_verify_union_vector_field@@Base+0x34c>
   2bab8:	mov	lr, r0
   2babc:	mov	r0, #0
   2bac0:	ldr	r1, [pc, #176]	; 2bb78 <flatcc_verify_union_vector_field@@Base+0x360>
   2bac4:	and	r0, r0, r2
   2bac8:	and	r1, r1, r3
   2bacc:	orrs	r1, r0, r1
   2bad0:	subeq	ip, r6, #10
   2bad4:	bne	2bb0c <flatcc_verify_union_vector_field@@Base+0x2f4>
   2bad8:	lsl	r1, r3, #10
   2badc:	orr	r1, r1, r2, lsr #22
   2bae0:	lsl	r0, r2, #10
   2bae4:	mov	r2, r0
   2bae8:	mov	r3, r1
   2baec:	mov	r6, ip
   2baf0:	mov	r0, #0
   2baf4:	ldr	r1, [pc, #124]	; 2bb78 <flatcc_verify_union_vector_field@@Base+0x360>
   2baf8:	and	r0, r0, r2
   2bafc:	and	r1, r1, r3
   2bb00:	sub	ip, ip, #10
   2bb04:	orrs	r1, r0, r1
   2bb08:	beq	2bad8 <flatcc_verify_union_vector_field@@Base+0x2c0>
   2bb0c:	cmp	r2, #0
   2bb10:	sbcs	r1, r3, #0
   2bb14:	blt	2bb40 <flatcc_verify_union_vector_field@@Base+0x328>
   2bb18:	sub	r1, r6, #1
   2bb1c:	adds	r4, r2, r2
   2bb20:	adc	r5, r3, r3
   2bb24:	mov	r2, r4
   2bb28:	mov	r3, r5
   2bb2c:	mov	r6, r1
   2bb30:	sub	r1, r1, #1
   2bb34:	cmp	r4, #0
   2bb38:	sbcs	r0, r5, #0
   2bb3c:	bge	2bb1c <flatcc_verify_union_vector_field@@Base+0x304>
   2bb40:	strd	r2, [sp, #16]
   2bb44:	str	r6, [sp, #24]
   2bb48:	add	r3, sp, #12
   2bb4c:	ldmib	r3, {r0, r1, r2, r3}
   2bb50:	stm	lr, {r0, r1, r2, r3}
   2bb54:	mov	r0, lr
   2bb58:	pop	{r4, r5, r6, lr}
   2bb5c:	add	sp, sp, #8
   2bb60:	bx	lr
   2bb64:	ldr	r3, [pc, #16]	; 2bb7c <flatcc_verify_union_vector_field@@Base+0x364>
   2bb68:	mov	r2, #260	; 0x104
   2bb6c:	ldr	r1, [pc, #12]	; 2bb80 <flatcc_verify_union_vector_field@@Base+0x368>
   2bb70:	ldr	r0, [pc, #12]	; 2bb84 <flatcc_verify_union_vector_field@@Base+0x36c>
   2bb74:	bl	14618 <__assert_fail@plt>
   2bb78:			; <UNDEFINED> instruction: 0xffc00000
   2bb7c:	andeq	r2, r4, r8, lsr r6
   2bb80:			; <UNDEFINED> instruction: 0x00042eb8
   2bb84:	andeq	r2, r4, r0, lsl pc

0002bb88 <grisu3_diy_fp_encode_double@@Base>:
   2bb88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bb8c:	sub	sp, sp, #76	; 0x4c
   2bb90:	mov	r4, r3
   2bb94:	ldr	sl, [sp, #112]	; 0x70
   2bb98:	cmp	sl, #0
   2bb9c:	movne	sl, #4
   2bba0:	sub	r5, r2, r3
   2bba4:	strd	r0, [sp, #56]	; 0x38
   2bba8:	mov	r3, #0
   2bbac:	str	r3, [sp, #64]	; 0x40
   2bbb0:	add	ip, sp, #56	; 0x38
   2bbb4:	add	r3, sp, #72	; 0x48
   2bbb8:	ldmdb	r3, {r0, r1}
   2bbbc:	stm	sp, {r0, r1}
   2bbc0:	ldm	ip, {r2, r3}
   2bbc4:	mov	r0, ip
   2bbc8:	bl	2ba98 <flatcc_verify_union_vector_field@@Base+0x280>
   2bbcc:	ldrd	r6, [sp, #56]	; 0x38
   2bbd0:	ldr	lr, [sp, #64]	; 0x40
   2bbd4:	rsb	r0, lr, #0
   2bbd8:	lsl	r3, sl, r0
   2bbdc:	str	r3, [sp, #32]
   2bbe0:	cmn	r5, #348	; 0x15c
   2bbe4:	blt	2bfa4 <grisu3_diy_fp_encode_double@@Base+0x41c>
   2bbe8:	cmp	r5, #348	; 0x15c
   2bbec:	bge	2bfb8 <grisu3_diy_fp_encode_double@@Base+0x430>
   2bbf0:	add	r3, r5, #348	; 0x15c
   2bbf4:	add	r2, r3, #7
   2bbf8:	cmp	r3, #0
   2bbfc:	movlt	r3, r2
   2bc00:	asr	r3, r3, #3
   2bc04:	ldr	r2, [pc, #1068]	; 2c038 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   2bc08:	add	r3, r2, r3, lsl #4
   2bc0c:	ldrsh	ip, [r3, #66]	; 0x42
   2bc10:	ldrd	r0, [r3, #56]	; 0x38
   2bc14:	strd	r0, [sp, #24]
   2bc18:	ldrsh	r3, [r3, #64]	; 0x40
   2bc1c:	str	r3, [sp, #36]	; 0x24
   2bc20:	cmp	r5, ip
   2bc24:	blt	2bfcc <grisu3_diy_fp_encode_double@@Base+0x444>
   2bc28:	add	r3, ip, #8
   2bc2c:	cmp	r5, r3
   2bc30:	bge	2bfe0 <grisu3_diy_fp_encode_double@@Base+0x458>
   2bc34:	cmp	r5, ip
   2bc38:	beq	2bd1c <grisu3_diy_fp_encode_double@@Base+0x194>
   2bc3c:	sub	ip, r5, ip
   2bc40:	sub	ip, ip, #1
   2bc44:	cmp	ip, #6
   2bc48:	bhi	2bff4 <grisu3_diy_fp_encode_double@@Base+0x46c>
   2bc4c:	ldr	r2, [pc, #1000]	; 2c03c <grisu3_diy_fp_encode_double@@Base+0x4b4>
   2bc50:	lsl	r3, ip, #4
   2bc54:	add	r5, r2, r3
   2bc58:	ldrd	r8, [r2, r3]
   2bc5c:	mov	r3, #0
   2bc60:	mov	r0, r8
   2bc64:	mov	r1, #0
   2bc68:	umull	sl, fp, r6, r9
   2bc6c:	strd	sl, [sp, #16]
   2bc70:	mla	sl, r9, r3, fp
   2bc74:	str	sl, [sp, #20]
   2bc78:	umull	sl, fp, r7, r8
   2bc7c:	strd	sl, [sp, #8]
   2bc80:	mla	sl, r7, r1, fp
   2bc84:	str	sl, [sp, #12]
   2bc88:	mul	r1, r6, r1
   2bc8c:	mla	r3, r8, r3, r1
   2bc90:	umull	r0, r1, r6, r0
   2bc94:	add	r1, r3, r1
   2bc98:	mov	r2, r1
   2bc9c:	mov	r3, #0
   2bca0:	ldr	r1, [sp, #8]
   2bca4:	adds	r2, r2, r1
   2bca8:	adc	r3, r3, #0
   2bcac:	adds	r2, r2, #-2147483648	; 0x80000000
   2bcb0:	adc	r3, r3, #0
   2bcb4:	ldrd	sl, [sp, #16]
   2bcb8:	adds	r2, r2, sl
   2bcbc:	adc	r3, r3, #0
   2bcc0:	mov	r0, r3
   2bcc4:	mov	r1, #0
   2bcc8:	ldr	r3, [sp, #12]
   2bccc:	str	r3, [sp, #16]
   2bcd0:	str	r1, [sp, #20]
   2bcd4:	mov	r2, fp
   2bcd8:	ldrd	sl, [sp, #16]
   2bcdc:	adds	sl, sl, r2
   2bce0:	adc	fp, fp, r1
   2bce4:	mov	r2, sl
   2bce8:	mov	r3, fp
   2bcec:	umlal	r2, r3, r9, r7
   2bcf0:	adds	r6, r0, r2
   2bcf4:	adc	r7, r1, r3
   2bcf8:	ldr	r3, [r5, #8]
   2bcfc:	add	lr, lr, r3
   2bd00:	add	lr, lr, #64	; 0x40
   2bd04:	add	r4, r4, #1
   2bd08:	add	ip, r4, ip
   2bd0c:	cmp	ip, #19
   2bd10:	ldrgt	r3, [sp, #32]
   2bd14:	addgt	r3, r3, #4
   2bd18:	strgt	r3, [sp, #32]
   2bd1c:	mov	ip, #0
   2bd20:	mov	r2, r6
   2bd24:	mov	r3, #0
   2bd28:	ldrd	sl, [sp, #24]
   2bd2c:	mov	r8, sl
   2bd30:	mov	r9, #0
   2bd34:	umull	r0, r1, r6, fp
   2bd38:	mla	r1, fp, r3, r1
   2bd3c:	umull	r4, r5, r7, sl
   2bd40:	mla	r5, r7, r9, r5
   2bd44:	mul	r6, r6, r9
   2bd48:	mla	r3, sl, r3, r6
   2bd4c:	umull	r8, r9, r2, r8
   2bd50:	add	r9, r3, r9
   2bd54:	adds	r2, r9, r4
   2bd58:	adc	r3, ip, #0
   2bd5c:	adds	r2, r2, #-2147483648	; 0x80000000
   2bd60:	adc	r3, r3, #0
   2bd64:	adds	r2, r2, r0
   2bd68:	adc	r3, r3, #0
   2bd6c:	mov	r8, r3
   2bd70:	mov	r2, r5
   2bd74:	adds	r2, r2, r1
   2bd78:	adc	r3, ip, ip
   2bd7c:	umlal	r2, r3, fp, r7
   2bd80:	adds	r8, r8, r2
   2bd84:	adc	r9, ip, r3
   2bd88:	ldr	r3, [sp, #36]	; 0x24
   2bd8c:	add	fp, lr, r3
   2bd90:	add	fp, fp, #64	; 0x40
   2bd94:	ldr	r3, [sp, #32]
   2bd98:	cmp	r3, ip
   2bd9c:	movne	r0, #9
   2bda0:	moveq	r0, #8
   2bda4:	add	sl, r3, r0
   2bda8:	strd	r8, [sp, #56]	; 0x38
   2bdac:	str	fp, [sp, #64]	; 0x40
   2bdb0:	add	r5, sp, #40	; 0x28
   2bdb4:	add	r3, sp, #72	; 0x48
   2bdb8:	ldmdb	r3, {r0, r1}
   2bdbc:	stm	sp, {r0, r1}
   2bdc0:	add	r4, sp, #56	; 0x38
   2bdc4:	ldm	r4, {r2, r3}
   2bdc8:	mov	r0, r5
   2bdcc:	bl	2ba98 <flatcc_verify_union_vector_field@@Base+0x280>
   2bdd0:	ldm	r5, {r0, r1, r2, r3}
   2bdd4:	stm	r4, {r0, r1, r2, r3}
   2bdd8:	ldrd	r4, [sp, #56]	; 0x38
   2bddc:	ldr	r1, [sp, #64]	; 0x40
   2bde0:	sub	r0, fp, r1
   2bde4:	lsl	r0, sl, r0
   2bde8:	add	r3, r1, #64	; 0x40
   2bdec:	ldr	r2, [pc, #588]	; 2c040 <grisu3_diy_fp_encode_double@@Base+0x4b8>
   2bdf0:	cmp	r3, r2
   2bdf4:	movge	r8, #0
   2bdf8:	bge	2be54 <grisu3_diy_fp_encode_double@@Base+0x2cc>
   2bdfc:	mvn	r2, #1072	; 0x430
   2be00:	cmp	r3, r2
   2be04:	blt	2c008 <grisu3_diy_fp_encode_double@@Base+0x480>
   2be08:	add	r8, r1, #1136	; 0x470
   2be0c:	add	r8, r8, #2
   2be10:	rsb	r3, r8, #67	; 0x43
   2be14:	cmp	r3, #63	; 0x3f
   2be18:	rsble	r8, r8, #64	; 0x40
   2be1c:	ble	2be54 <grisu3_diy_fp_encode_double@@Base+0x2cc>
   2be20:	rsb	r3, r8, #2
   2be24:	rsb	lr, r3, #32
   2be28:	sub	ip, r3, #32
   2be2c:	lsr	r2, r4, r3
   2be30:	orr	r2, r2, r5, lsl lr
   2be34:	orr	r2, r2, r5, lsr ip
   2be38:	lsr	ip, r5, r3
   2be3c:	mov	r4, r2
   2be40:	mov	r5, ip
   2be44:	add	r1, r1, r3
   2be48:	asr	r0, r0, r3
   2be4c:	add	r0, r0, #9
   2be50:	mov	r8, #62	; 0x3e
   2be54:	rsb	lr, r8, #32
   2be58:	sub	ip, r8, #32
   2be5c:	lsr	r2, r4, r8
   2be60:	orr	r2, r2, r5, lsl lr
   2be64:	orr	r2, r2, r5, lsr ip
   2be68:	lsr	r3, r5, r8
   2be6c:	add	r1, r8, r1
   2be70:	sub	lr, r8, #1
   2be74:	mov	ip, #1
   2be78:	lsl	r6, ip, lr
   2be7c:	and	r4, r4, r6
   2be80:	lsl	ip, r4, #3
   2be84:	mov	r4, #8
   2be88:	lsl	lr, r4, lr
   2be8c:	add	r6, r0, lr
   2be90:	cmp	r8, r6
   2be94:	blt	2bebc <grisu3_diy_fp_encode_double@@Base+0x334>
   2be98:	adds	r2, r2, #1
   2be9c:	adc	r3, r3, #0
   2bea0:	mov	r4, #0
   2bea4:	and	r5, r3, #2097152	; 0x200000
   2bea8:	orrs	r4, r4, r5
   2beac:	beq	2bebc <grisu3_diy_fp_encode_double@@Base+0x334>
   2beb0:	lsrs	r3, r3, #1
   2beb4:	rrx	r2, r2
   2beb8:	add	r1, r1, #1
   2bebc:	mvn	r4, #0
   2bec0:	ldr	r5, [pc, #380]	; 2c044 <grisu3_diy_fp_encode_double@@Base+0x4bc>
   2bec4:	cmp	r3, r5
   2bec8:	cmpeq	r2, r4
   2becc:	bls	2bee8 <grisu3_diy_fp_encode_double@@Base+0x360>
   2bed0:	lsrs	r3, r3, #1
   2bed4:	rrx	r2, r2
   2bed8:	add	r1, r1, #1
   2bedc:	cmp	r3, r5
   2bee0:	cmpeq	r2, r4
   2bee4:	bhi	2bed0 <grisu3_diy_fp_encode_double@@Base+0x348>
   2bee8:	ldr	r4, [pc, #344]	; 2c048 <grisu3_diy_fp_encode_double@@Base+0x4c0>
   2beec:	cmp	r1, r4
   2bef0:	movlt	r2, #0
   2bef4:	movlt	r3, #0
   2bef8:	blt	2bf78 <grisu3_diy_fp_encode_double@@Base+0x3f0>
   2befc:	mvn	r4, #1072	; 0x430
   2bf00:	cmp	r1, r4
   2bf04:	blt	2c010 <grisu3_diy_fp_encode_double@@Base+0x488>
   2bf08:	mov	r4, #0
   2bf0c:	and	r5, r3, #1048576	; 0x100000
   2bf10:	orrs	r4, r4, r5
   2bf14:	bne	2bf50 <grisu3_diy_fp_encode_double@@Base+0x3c8>
   2bf18:	sub	r7, r1, #1
   2bf1c:	ldr	r8, [pc, #292]	; 2c048 <grisu3_diy_fp_encode_double@@Base+0x4c0>
   2bf20:	adds	r4, r2, r2
   2bf24:	adc	r5, r3, r3
   2bf28:	mov	r2, r4
   2bf2c:	mov	r3, r5
   2bf30:	mov	r1, r7
   2bf34:	cmp	r7, r8
   2bf38:	beq	2c01c <grisu3_diy_fp_encode_double@@Base+0x494>
   2bf3c:	mov	r4, #0
   2bf40:	and	r5, r5, #1048576	; 0x100000
   2bf44:	sub	r7, r7, #1
   2bf48:	orrs	r4, r4, r5
   2bf4c:	beq	2bf20 <grisu3_diy_fp_encode_double@@Base+0x398>
   2bf50:	add	r8, r1, #1072	; 0x430
   2bf54:	add	r8, r8, #3
   2bf58:	mvn	r4, #0
   2bf5c:	ldr	r5, [pc, #232]	; 2c04c <grisu3_diy_fp_encode_double@@Base+0x4c4>
   2bf60:	and	r2, r2, r4
   2bf64:	and	r3, r3, r5
   2bf68:	mov	r4, #0
   2bf6c:	lsl	r5, r8, #20
   2bf70:	orr	r2, r2, r4
   2bf74:	orr	r3, r3, r5
   2bf78:	ldr	r1, [sp, #116]	; 0x74
   2bf7c:	strd	r2, [r1]
   2bf80:	sub	r0, lr, r0
   2bf84:	cmp	ip, r6
   2bf88:	movlt	r6, #0
   2bf8c:	movge	r6, #1
   2bf90:	cmp	ip, r0
   2bf94:	movgt	r0, r6
   2bf98:	orrle	r0, r6, #1
   2bf9c:	add	sp, sp, #76	; 0x4c
   2bfa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bfa4:	ldr	r3, [pc, #164]	; 2c050 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   2bfa8:	mov	r2, #80	; 0x50
   2bfac:	ldr	r1, [pc, #160]	; 2c054 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   2bfb0:	ldr	r0, [pc, #160]	; 2c058 <grisu3_diy_fp_encode_double@@Base+0x4d0>
   2bfb4:	bl	14618 <__assert_fail@plt>
   2bfb8:	ldr	r3, [pc, #144]	; 2c050 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   2bfbc:	mov	r2, #81	; 0x51
   2bfc0:	ldr	r1, [pc, #140]	; 2c054 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   2bfc4:	ldr	r0, [pc, #144]	; 2c05c <grisu3_diy_fp_encode_double@@Base+0x4d4>
   2bfc8:	bl	14618 <__assert_fail@plt>
   2bfcc:	add	r3, r2, #24
   2bfd0:	mov	r2, #88	; 0x58
   2bfd4:	ldr	r1, [pc, #120]	; 2c054 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   2bfd8:	ldr	r0, [pc, #128]	; 2c060 <grisu3_diy_fp_encode_double@@Base+0x4d8>
   2bfdc:	bl	14618 <__assert_fail@plt>
   2bfe0:	ldr	r3, [pc, #104]	; 2c050 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   2bfe4:	mov	r2, #89	; 0x59
   2bfe8:	ldr	r1, [pc, #100]	; 2c054 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   2bfec:	ldr	r0, [pc, #112]	; 2c064 <grisu3_diy_fp_encode_double@@Base+0x4dc>
   2bff0:	bl	14618 <__assert_fail@plt>
   2bff4:	ldr	r3, [pc, #108]	; 2c068 <grisu3_diy_fp_encode_double@@Base+0x4e0>
   2bff8:	mov	r2, #185	; 0xb9
   2bffc:	ldr	r1, [pc, #80]	; 2c054 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   2c000:	ldr	r0, [pc, #100]	; 2c06c <grisu3_diy_fp_encode_double@@Base+0x4e4>
   2c004:	bl	14618 <__assert_fail@plt>
   2c008:	mov	r8, #0
   2c00c:	b	2be20 <grisu3_diy_fp_encode_double@@Base+0x298>
   2c010:	ldr	r4, [pc, #48]	; 2c048 <grisu3_diy_fp_encode_double@@Base+0x4c0>
   2c014:	cmp	r1, r4
   2c018:	bne	2bf50 <grisu3_diy_fp_encode_double@@Base+0x3c8>
   2c01c:	mov	r4, #0
   2c020:	and	r5, r3, #1048576	; 0x100000
   2c024:	orrs	r1, r4, r5
   2c028:	moveq	r8, #0
   2c02c:	beq	2bf58 <grisu3_diy_fp_encode_double@@Base+0x3d0>
   2c030:	ldr	r1, [pc, #16]	; 2c048 <grisu3_diy_fp_encode_double@@Base+0x4c0>
   2c034:	b	2bf50 <grisu3_diy_fp_encode_double@@Base+0x3c8>
   2c038:	andeq	r2, r4, r8, lsr r6
   2c03c:	andeq	r2, r4, r0, lsl #24
   2c040:			; <UNDEFINED> instruction: 0xfffffc0e
   2c044:			; <UNDEFINED> instruction: 0x001fffff
   2c048:			; <UNDEFINED> instruction: 0xfffffbce
   2c04c:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   2c050:	andeq	r2, r4, r0, asr r6
   2c054:	andeq	r2, r4, ip, lsl pc
   2c058:	andeq	r2, r4, r4, ror pc
   2c05c:	muleq	r4, r4, pc	; <UNPREDICTABLE>
   2c060:	andeq	r2, r4, r0, asr #31
   2c064:	ldrdeq	r2, [r4], -r0
   2c068:	andeq	r2, r4, r0, ror #23
   2c06c:	andeq	r2, r4, ip, ror #31
   2c070:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c074:	sub	sp, sp, #44	; 0x2c
   2c078:	str	r0, [sp, #12]
   2c07c:	mov	ip, r2
   2c080:	str	r2, [sp, #20]
   2c084:	mov	r2, #0
   2c088:	mov	r3, #0
   2c08c:	strd	r2, [ip]
   2c090:	cmp	r1, #1000	; 0x3e8
   2c094:	addle	r1, r1, #1
   2c098:	movle	r3, r0
   2c09c:	addle	r9, r3, r1
   2c0a0:	ldrgt	r3, [sp, #12]
   2c0a4:	addgt	r9, r3, #1000	; 0x3e8
   2c0a8:	addgt	r9, r9, #1
   2c0ac:	ldr	r3, [sp, #12]
   2c0b0:	cmp	r9, r3
   2c0b4:	beq	2c99c <grisu3_diy_fp_encode_double@@Base+0xe14>
   2c0b8:	ldrb	r3, [r3]
   2c0bc:	cmp	r3, #45	; 0x2d
   2c0c0:	beq	2c108 <grisu3_diy_fp_encode_double@@Base+0x580>
   2c0c4:	ldr	r3, [sp, #12]
   2c0c8:	mov	r2, #0
   2c0cc:	str	r2, [sp, #16]
   2c0d0:	ldrb	r0, [r3]
   2c0d4:	cmp	r0, #48	; 0x30
   2c0d8:	beq	2c124 <grisu3_diy_fp_encode_double@@Base+0x59c>
   2c0dc:	sub	r2, r0, #49	; 0x31
   2c0e0:	uxtb	r2, r2
   2c0e4:	cmp	r2, #8
   2c0e8:	bls	2c198 <grisu3_diy_fp_encode_double@@Base+0x610>
   2c0ec:	ldr	r4, [sp, #12]
   2c0f0:	ldr	r3, [sp, #16]
   2c0f4:	cmp	r3, #0
   2c0f8:	movne	r4, #0
   2c0fc:	mov	r0, r4
   2c100:	add	sp, sp, #44	; 0x2c
   2c104:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c108:	ldr	r3, [sp, #12]
   2c10c:	add	r3, r3, #1
   2c110:	cmp	r9, r3
   2c114:	beq	2c9a4 <grisu3_diy_fp_encode_double@@Base+0xe1c>
   2c118:	mov	r2, #1
   2c11c:	str	r2, [sp, #16]
   2c120:	b	2c0d0 <grisu3_diy_fp_encode_double@@Base+0x548>
   2c124:	add	r5, r3, #1
   2c128:	cmp	r9, r5
   2c12c:	beq	2ca1c <grisu3_diy_fp_encode_double@@Base+0xe94>
   2c130:	ldrb	r2, [r3, #1]
   2c134:	orr	r1, r2, #32
   2c138:	cmp	r1, #120	; 0x78
   2c13c:	beq	2c9ac <grisu3_diy_fp_encode_double@@Base+0xe24>
   2c140:	cmp	r2, #48	; 0x30
   2c144:	bne	2c16c <grisu3_diy_fp_encode_double@@Base+0x5e4>
   2c148:	add	r3, r3, #2
   2c14c:	mov	r1, r9
   2c150:	mov	r5, r3
   2c154:	cmp	r3, r1
   2c158:	beq	2c9b4 <grisu3_diy_fp_encode_double@@Base+0xe2c>
   2c15c:	add	r3, r3, #1
   2c160:	ldrb	r2, [r5]
   2c164:	cmp	r2, #48	; 0x30
   2c168:	beq	2c150 <grisu3_diy_fp_encode_double@@Base+0x5c8>
   2c16c:	ldrb	r2, [r5]
   2c170:	sub	r3, r2, #48	; 0x30
   2c174:	uxtb	r3, r3
   2c178:	cmp	r3, #9
   2c17c:	movhi	r4, r5
   2c180:	movhi	sl, #0
   2c184:	movhi	fp, #0
   2c188:	bhi	2ca4c <grisu3_diy_fp_encode_double@@Base+0xec4>
   2c18c:	mov	sl, #0
   2c190:	mov	fp, #0
   2c194:	b	2c1dc <grisu3_diy_fp_encode_double@@Base+0x654>
   2c198:	add	r5, r3, #1
   2c19c:	sub	r0, r0, #48	; 0x30
   2c1a0:	mov	sl, r0
   2c1a4:	asr	fp, r0, #31
   2c1a8:	cmp	r9, r5
   2c1ac:	moveq	r4, #0
   2c1b0:	beq	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2c1b4:	ldrb	r2, [r3, #1]
   2c1b8:	sub	r3, r2, #48	; 0x30
   2c1bc:	uxtb	r3, r3
   2c1c0:	cmp	r3, #9
   2c1c4:	bhi	2ca48 <grisu3_diy_fp_encode_double@@Base+0xec0>
   2c1c8:	add	r1, pc, #896	; 0x380
   2c1cc:	ldrd	r0, [r1]
   2c1d0:	cmp	fp, r1
   2c1d4:	cmpeq	sl, r0
   2c1d8:	bhi	2c3a4 <grisu3_diy_fp_encode_double@@Base+0x81c>
   2c1dc:	add	ip, r5, #1
   2c1e0:	mov	r8, r9
   2c1e4:	mov	lr, #10
   2c1e8:	add	r7, pc, #864	; 0x360
   2c1ec:	ldrd	r6, [r7]
   2c1f0:	mov	r4, ip
   2c1f4:	umull	r0, r1, sl, lr
   2c1f8:	mla	r1, lr, fp, r1
   2c1fc:	uxtb	sl, r2
   2c200:	mov	fp, #0
   2c204:	adds	sl, sl, r0
   2c208:	adc	fp, fp, r1
   2c20c:	subs	sl, sl, #48	; 0x30
   2c210:	sbc	fp, fp, #0
   2c214:	cmp	ip, r8
   2c218:	beq	2ca2c <grisu3_diy_fp_encode_double@@Base+0xea4>
   2c21c:	ldrb	r2, [ip], #1
   2c220:	sub	r3, r2, #48	; 0x30
   2c224:	uxtb	r3, r3
   2c228:	cmp	r3, #9
   2c22c:	bhi	2ca4c <grisu3_diy_fp_encode_double@@Base+0xec4>
   2c230:	cmp	fp, r7
   2c234:	cmpeq	sl, r6
   2c238:	bls	2c1f0 <grisu3_diy_fp_encode_double@@Base+0x668>
   2c23c:	mov	r1, r4
   2c240:	cmp	r2, #52	; 0x34
   2c244:	movls	r2, #0
   2c248:	movhi	r2, #1
   2c24c:	adds	sl, sl, r2
   2c250:	adc	fp, fp, #0
   2c254:	sub	r8, r1, r5
   2c258:	cmp	r9, r1
   2c25c:	moveq	r4, #0
   2c260:	beq	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2c264:	mov	r3, #1
   2c268:	str	r3, [sp, #24]
   2c26c:	ldrb	r3, [r1]
   2c270:	cmp	r3, #48	; 0x30
   2c274:	bne	2ca60 <grisu3_diy_fp_encode_double@@Base+0xed8>
   2c278:	add	r2, r1, #1
   2c27c:	mov	ip, r9
   2c280:	sub	r3, r2, r1
   2c284:	mov	r4, r2
   2c288:	cmp	r2, ip
   2c28c:	beq	2c9bc <grisu3_diy_fp_encode_double@@Base+0xe34>
   2c290:	add	r2, r2, #1
   2c294:	ldrb	r0, [r4]
   2c298:	cmp	r0, #48	; 0x30
   2c29c:	beq	2c280 <grisu3_diy_fp_encode_double@@Base+0x6f8>
   2c2a0:	ldrb	r2, [r4]
   2c2a4:	sub	r2, r2, #49	; 0x31
   2c2a8:	uxtb	r2, r2
   2c2ac:	cmp	r2, #8
   2c2b0:	bhi	2c314 <grisu3_diy_fp_encode_double@@Base+0x78c>
   2c2b4:	add	r0, r3, #1
   2c2b8:	add	r1, r4, #1
   2c2bc:	cmp	r9, r1
   2c2c0:	beq	2c9c4 <grisu3_diy_fp_encode_double@@Base+0xe3c>
   2c2c4:	ldrb	r2, [r4, #1]
   2c2c8:	sub	r2, r2, #48	; 0x30
   2c2cc:	uxtb	r2, r2
   2c2d0:	cmp	r2, #9
   2c2d4:	bhi	2ca6c <grisu3_diy_fp_encode_double@@Base+0xee4>
   2c2d8:	add	r1, r4, #2
   2c2dc:	mov	r0, r9
   2c2e0:	sub	ip, r3, r4
   2c2e4:	add	r3, ip, r1
   2c2e8:	mov	r4, r1
   2c2ec:	cmp	r1, r0
   2c2f0:	beq	2c9cc <grisu3_diy_fp_encode_double@@Base+0xe44>
   2c2f4:	add	r1, r1, #1
   2c2f8:	ldrb	r2, [r4]
   2c2fc:	sub	r2, r2, #48	; 0x30
   2c300:	uxtb	r2, r2
   2c304:	cmp	r2, #9
   2c308:	bls	2c2e4 <grisu3_diy_fp_encode_double@@Base+0x75c>
   2c30c:	mov	r2, #1
   2c310:	str	r2, [sp, #24]
   2c314:	ldrb	r2, [r4]
   2c318:	cmp	r2, #46	; 0x2e
   2c31c:	beq	2c3ac <grisu3_diy_fp_encode_double@@Base+0x824>
   2c320:	add	r3, r3, r8
   2c324:	ldrb	r2, [r4]
   2c328:	orr	r2, r2, #32
   2c32c:	cmp	r2, #101	; 0x65
   2c330:	movne	r2, #0
   2c334:	beq	2c568 <grisu3_diy_fp_encode_double@@Base+0x9e0>
   2c338:	add	r5, r2, r3
   2c33c:	cmp	r9, r4
   2c340:	moveq	r4, #0
   2c344:	beq	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2c348:	ldr	r6, [sp, #20]
   2c34c:	ldr	r7, [sp, #12]
   2c350:	orrs	r3, sl, fp
   2c354:	moveq	r2, #1
   2c358:	movne	r2, #0
   2c35c:	cmn	r5, #324	; 0x144
   2c360:	movge	r3, #0
   2c364:	movlt	r3, #1
   2c368:	orrs	r3, r2, r3
   2c36c:	bne	2c38c <grisu3_diy_fp_encode_double@@Base+0x804>
   2c370:	sub	r2, r5, #1
   2c374:	ldr	r3, [pc, #476]	; 2c558 <grisu3_diy_fp_encode_double@@Base+0x9d0>
   2c378:	cmp	r2, r3
   2c37c:	ble	2c63c <grisu3_diy_fp_encode_double@@Base+0xab4>
   2c380:	mov	r2, #0
   2c384:	ldr	r3, [pc, #464]	; 2c55c <grisu3_diy_fp_encode_double@@Base+0x9d4>
   2c388:	strd	r2, [r6]
   2c38c:	ldr	r3, [sp, #16]
   2c390:	cmp	r3, #0
   2c394:	vldrne	d7, [r6]
   2c398:	vnegne.f64	d7, d7
   2c39c:	vstrne	d7, [r6]
   2c3a0:	b	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2c3a4:	mov	r1, r5
   2c3a8:	b	2c240 <grisu3_diy_fp_encode_double@@Base+0x6b8>
   2c3ac:	add	r2, r4, #1
   2c3b0:	mov	r1, r2
   2c3b4:	str	r2, [sp, #28]
   2c3b8:	ldrb	r5, [r4, #1]
   2c3bc:	sub	r2, r5, #48	; 0x30
   2c3c0:	uxtb	r2, r2
   2c3c4:	cmp	r2, #9
   2c3c8:	bhi	2c9d4 <grisu3_diy_fp_encode_double@@Base+0xe4c>
   2c3cc:	cmp	r9, r1
   2c3d0:	beq	2c9dc <grisu3_diy_fp_encode_double@@Base+0xe54>
   2c3d4:	add	r7, pc, #372	; 0x174
   2c3d8:	ldrd	r6, [r7]
   2c3dc:	cmp	fp, r7
   2c3e0:	cmpeq	sl, r6
   2c3e4:	bhi	2cac0 <grisu3_diy_fp_encode_double@@Base+0xf38>
   2c3e8:	add	ip, r4, #2
   2c3ec:	mov	lr, r9
   2c3f0:	mov	r2, #10
   2c3f4:	add	r7, pc, #340	; 0x154
   2c3f8:	ldrd	r6, [r7]
   2c3fc:	mov	r4, ip
   2c400:	umull	r0, r1, sl, r2
   2c404:	mla	r1, r2, fp, r1
   2c408:	uxtb	sl, r5
   2c40c:	mov	fp, #0
   2c410:	adds	sl, sl, r0
   2c414:	adc	fp, fp, r1
   2c418:	subs	sl, sl, #48	; 0x30
   2c41c:	sbc	fp, fp, #0
   2c420:	sub	r3, r3, #1
   2c424:	cmp	lr, ip
   2c428:	beq	2ca80 <grisu3_diy_fp_encode_double@@Base+0xef8>
   2c42c:	mov	r0, ip
   2c430:	ldrb	r5, [r0], #1
   2c434:	sub	r1, r5, #48	; 0x30
   2c438:	uxtb	r1, r1
   2c43c:	cmp	r1, #9
   2c440:	bhi	2c540 <grisu3_diy_fp_encode_double@@Base+0x9b8>
   2c444:	cmp	fp, r7
   2c448:	cmpeq	sl, r6
   2c44c:	movls	ip, r0
   2c450:	bls	2c3fc <grisu3_diy_fp_encode_double@@Base+0x874>
   2c454:	ldr	r2, [sp, #24]
   2c458:	cmp	r2, #0
   2c45c:	bne	2c474 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c460:	cmp	r5, #52	; 0x34
   2c464:	movls	r5, #0
   2c468:	movhi	r5, #1
   2c46c:	adds	sl, sl, r5
   2c470:	adc	fp, fp, #0
   2c474:	ldr	r2, [sp, #28]
   2c478:	sub	r2, r4, r2
   2c47c:	add	r8, r8, r2
   2c480:	cmp	r9, r4
   2c484:	moveq	r4, #0
   2c488:	beq	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2c48c:	mov	r2, #1
   2c490:	str	r2, [sp, #24]
   2c494:	ldrb	r2, [r4]
   2c498:	cmp	r2, #48	; 0x30
   2c49c:	bne	2c4cc <grisu3_diy_fp_encode_double@@Base+0x944>
   2c4a0:	add	r2, r4, #1
   2c4a4:	mov	ip, r9
   2c4a8:	sub	r0, r3, r4
   2c4ac:	add	r3, r0, r2
   2c4b0:	mov	r4, r2
   2c4b4:	cmp	r2, ip
   2c4b8:	beq	2c9e4 <grisu3_diy_fp_encode_double@@Base+0xe5c>
   2c4bc:	add	r2, r2, #1
   2c4c0:	ldrb	r1, [r4]
   2c4c4:	cmp	r1, #48	; 0x30
   2c4c8:	beq	2c4ac <grisu3_diy_fp_encode_double@@Base+0x924>
   2c4cc:	ldrb	r2, [r4]
   2c4d0:	sub	r2, r2, #49	; 0x31
   2c4d4:	uxtb	r2, r2
   2c4d8:	cmp	r2, #8
   2c4dc:	bhi	2c320 <grisu3_diy_fp_encode_double@@Base+0x798>
   2c4e0:	add	r1, r4, #1
   2c4e4:	cmp	r9, r1
   2c4e8:	beq	2c9ec <grisu3_diy_fp_encode_double@@Base+0xe64>
   2c4ec:	ldrb	r2, [r4, #1]
   2c4f0:	sub	r2, r2, #48	; 0x30
   2c4f4:	uxtb	r2, r2
   2c4f8:	cmp	r2, #9
   2c4fc:	bhi	2ca9c <grisu3_diy_fp_encode_double@@Base+0xf14>
   2c500:	add	r1, r4, #2
   2c504:	mov	r0, r9
   2c508:	mov	r4, r1
   2c50c:	cmp	r0, r1
   2c510:	beq	2c9f4 <grisu3_diy_fp_encode_double@@Base+0xe6c>
   2c514:	add	r1, r1, #1
   2c518:	ldrb	r2, [r4]
   2c51c:	sub	r2, r2, #48	; 0x30
   2c520:	uxtb	r2, r2
   2c524:	cmp	r2, #9
   2c528:	bls	2c508 <grisu3_diy_fp_encode_double@@Base+0x980>
   2c52c:	mov	r2, #1
   2c530:	str	r2, [sp, #24]
   2c534:	b	2c320 <grisu3_diy_fp_encode_double@@Base+0x798>
   2c538:	ldr	r4, [sp, #28]
   2c53c:	b	2c460 <grisu3_diy_fp_encode_double@@Base+0x8d8>
   2c540:	ldr	r2, [sp, #28]
   2c544:	sub	ip, ip, r2
   2c548:	add	r8, r8, ip
   2c54c:	b	2c494 <grisu3_diy_fp_encode_double@@Base+0x90c>
   2c550:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   2c554:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   2c558:	andeq	r0, r0, r5, lsr r1
   2c55c:	svcvc	0x00f00000	; IMB
   2c560:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   2c564:			; <UNDEFINED> instruction: 0x001fffff
   2c568:	sub	r2, r9, r4
   2c56c:	cmp	r2, #1
   2c570:	ble	2c9fc <grisu3_diy_fp_encode_double@@Base+0xe74>
   2c574:	ldrb	r2, [r4, #1]
   2c578:	cmp	r2, #43	; 0x2b
   2c57c:	beq	2c614 <grisu3_diy_fp_encode_double@@Base+0xa8c>
   2c580:	cmp	r2, #45	; 0x2d
   2c584:	beq	2c628 <grisu3_diy_fp_encode_double@@Base+0xaa0>
   2c588:	add	r1, r4, #1
   2c58c:	mov	r6, #0
   2c590:	ldrb	r2, [r1]
   2c594:	sub	r0, r2, #48	; 0x30
   2c598:	uxtb	r0, r0
   2c59c:	cmp	r0, #9
   2c5a0:	bhi	2ca14 <grisu3_diy_fp_encode_double@@Base+0xe8c>
   2c5a4:	add	r4, r1, #1
   2c5a8:	sub	r2, r2, #48	; 0x30
   2c5ac:	cmp	r9, r4
   2c5b0:	beq	2caac <grisu3_diy_fp_encode_double@@Base+0xf24>
   2c5b4:	ldrb	ip, [r1, #1]
   2c5b8:	sub	r0, ip, #48	; 0x30
   2c5bc:	uxtb	r0, r0
   2c5c0:	cmp	r0, #9
   2c5c4:	bhi	2c604 <grisu3_diy_fp_encode_double@@Base+0xa7c>
   2c5c8:	add	r1, r1, #2
   2c5cc:	mov	lr, r9
   2c5d0:	ldr	r5, [pc, #-120]	; 2c560 <grisu3_diy_fp_encode_double@@Base+0x9d8>
   2c5d4:	cmp	r2, r5
   2c5d8:	addle	r2, r2, r2, lsl #2
   2c5dc:	addle	r2, ip, r2, lsl #1
   2c5e0:	suble	r2, r2, #48	; 0x30
   2c5e4:	mov	r4, r1
   2c5e8:	cmp	lr, r1
   2c5ec:	beq	2caac <grisu3_diy_fp_encode_double@@Base+0xf24>
   2c5f0:	ldrb	ip, [r1], #1
   2c5f4:	sub	r0, ip, #48	; 0x30
   2c5f8:	uxtb	r0, r0
   2c5fc:	cmp	r0, #9
   2c600:	bls	2c5d4 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   2c604:	cmp	r6, #0
   2c608:	bne	2cab8 <grisu3_diy_fp_encode_double@@Base+0xf30>
   2c60c:	add	r5, r3, r2
   2c610:	b	2c348 <grisu3_diy_fp_encode_double@@Base+0x7c0>
   2c614:	add	r1, r4, #2
   2c618:	cmp	r9, r1
   2c61c:	beq	2ca04 <grisu3_diy_fp_encode_double@@Base+0xe7c>
   2c620:	mov	r6, #0
   2c624:	b	2c590 <grisu3_diy_fp_encode_double@@Base+0xa08>
   2c628:	add	r1, r4, #2
   2c62c:	cmp	r9, r1
   2c630:	beq	2ca0c <grisu3_diy_fp_encode_double@@Base+0xe84>
   2c634:	mov	r6, #1
   2c638:	b	2c590 <grisu3_diy_fp_encode_double@@Base+0xa08>
   2c63c:	mvn	r2, #0
   2c640:	ldr	r3, [pc, #-228]	; 2c564 <grisu3_diy_fp_encode_double@@Base+0x9dc>
   2c644:	cmp	fp, r3
   2c648:	cmpeq	sl, r2
   2c64c:	movls	r3, #1
   2c650:	movhi	r3, #0
   2c654:	cmp	r5, #22
   2c658:	movhi	r3, #0
   2c65c:	andls	r3, r3, #1
   2c660:	cmp	r3, #0
   2c664:	beq	2c954 <grisu3_diy_fp_encode_double@@Base+0xdcc>
   2c668:	mov	r0, sl
   2c66c:	mov	r1, fp
   2c670:	bl	3d3d4 <flatcc_json_printer_clear@@Base+0x588>
   2c674:	vmov	d7, r0, r1
   2c678:	sub	r3, r5, r8
   2c67c:	add	r3, r3, #22
   2c680:	cmp	r3, #44	; 0x2c
   2c684:	ldrls	pc, [pc, r3, lsl #2]
   2c688:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c68c:	andeq	ip, r2, r0, asr #14
   2c690:	andeq	ip, r2, r0, asr r7
   2c694:	andeq	ip, r2, ip, asr r7
   2c698:	andeq	ip, r2, r8, ror #14
   2c69c:	andeq	ip, r2, r4, ror r7
   2c6a0:	andeq	ip, r2, r0, lsl #15
   2c6a4:	andeq	ip, r2, ip, lsl #15
   2c6a8:	muleq	r2, r8, r7
   2c6ac:	andeq	ip, r2, r4, lsr #15
   2c6b0:			; <UNDEFINED> instruction: 0x0002c7b0
   2c6b4:			; <UNDEFINED> instruction: 0x0002c7bc
   2c6b8:	andeq	ip, r2, r8, asr #15
   2c6bc:	ldrdeq	ip, [r2], -r4
   2c6c0:	andeq	ip, r2, r0, ror #15
   2c6c4:	andeq	ip, r2, ip, ror #15
   2c6c8:	strdeq	ip, [r2], -r8
   2c6cc:	andeq	ip, r2, r4, lsl #16
   2c6d0:	andeq	ip, r2, r0, lsl r8
   2c6d4:	andeq	ip, r2, ip, lsl r8
   2c6d8:	andeq	ip, r2, r8, lsr #16
   2c6dc:	andeq	ip, r2, r4, lsr r8
   2c6e0:	andeq	ip, r2, r0, asr #16
   2c6e4:	andeq	ip, r2, r8, asr #14
   2c6e8:	andeq	ip, r2, ip, asr #16
   2c6ec:	andeq	ip, r2, r8, asr r8
   2c6f0:	andeq	ip, r2, r4, ror #16
   2c6f4:	andeq	ip, r2, r0, ror r8
   2c6f8:	andeq	ip, r2, ip, ror r8
   2c6fc:	andeq	ip, r2, r8, lsl #17
   2c700:	muleq	r2, r4, r8
   2c704:	andeq	ip, r2, r0, lsr #17
   2c708:	andeq	ip, r2, ip, lsr #17
   2c70c:			; <UNDEFINED> instruction: 0x0002c8b8
   2c710:	andeq	ip, r2, r4, asr #17
   2c714:	ldrdeq	ip, [r2], -r0
   2c718:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c71c:	andeq	ip, r2, r8, ror #17
   2c720:	strdeq	ip, [r2], -r4
   2c724:	andeq	ip, r2, r0, lsl #18
   2c728:	andeq	ip, r2, ip, lsl #18
   2c72c:	andeq	ip, r2, r8, lsl r9
   2c730:	andeq	ip, r2, r4, lsr #18
   2c734:	andeq	ip, r2, r0, lsr r9
   2c738:	andeq	ip, r2, ip, lsr r9
   2c73c:	andeq	ip, r2, r8, asr #18
   2c740:	vldr	d6, [pc, #912]	; 2cad8 <grisu3_diy_fp_encode_double@@Base+0xf50>
   2c744:	vdiv.f64	d7, d7, d6
   2c748:	vstr	d7, [r6]
   2c74c:	b	2c38c <grisu3_diy_fp_encode_double@@Base+0x804>
   2c750:	vldr	d6, [pc, #904]	; 2cae0 <grisu3_diy_fp_encode_double@@Base+0xf58>
   2c754:	vdiv.f64	d7, d7, d6
   2c758:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c75c:	vldr	d6, [pc, #900]	; 2cae8 <grisu3_diy_fp_encode_double@@Base+0xf60>
   2c760:	vdiv.f64	d7, d7, d6
   2c764:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c768:	vldr	d6, [pc, #896]	; 2caf0 <grisu3_diy_fp_encode_double@@Base+0xf68>
   2c76c:	vdiv.f64	d7, d7, d6
   2c770:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c774:	vldr	d6, [pc, #892]	; 2caf8 <grisu3_diy_fp_encode_double@@Base+0xf70>
   2c778:	vdiv.f64	d7, d7, d6
   2c77c:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c780:	vldr	d6, [pc, #888]	; 2cb00 <grisu3_diy_fp_encode_double@@Base+0xf78>
   2c784:	vdiv.f64	d7, d7, d6
   2c788:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c78c:	vldr	d6, [pc, #884]	; 2cb08 <grisu3_diy_fp_encode_double@@Base+0xf80>
   2c790:	vdiv.f64	d7, d7, d6
   2c794:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c798:	vldr	d6, [pc, #880]	; 2cb10 <grisu3_diy_fp_encode_double@@Base+0xf88>
   2c79c:	vdiv.f64	d7, d7, d6
   2c7a0:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c7a4:	vldr	d6, [pc, #876]	; 2cb18 <grisu3_diy_fp_encode_double@@Base+0xf90>
   2c7a8:	vdiv.f64	d7, d7, d6
   2c7ac:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c7b0:	vldr	d6, [pc, #872]	; 2cb20 <grisu3_diy_fp_encode_double@@Base+0xf98>
   2c7b4:	vdiv.f64	d7, d7, d6
   2c7b8:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c7bc:	vldr	d6, [pc, #868]	; 2cb28 <grisu3_diy_fp_encode_double@@Base+0xfa0>
   2c7c0:	vdiv.f64	d7, d7, d6
   2c7c4:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c7c8:	vldr	d6, [pc, #864]	; 2cb30 <grisu3_diy_fp_encode_double@@Base+0xfa8>
   2c7cc:	vdiv.f64	d7, d7, d6
   2c7d0:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c7d4:	vldr	d6, [pc, #860]	; 2cb38 <grisu3_diy_fp_encode_double@@Base+0xfb0>
   2c7d8:	vdiv.f64	d7, d7, d6
   2c7dc:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c7e0:	vldr	d6, [pc, #856]	; 2cb40 <grisu3_diy_fp_encode_double@@Base+0xfb8>
   2c7e4:	vdiv.f64	d7, d7, d6
   2c7e8:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c7ec:	vldr	d6, [pc, #852]	; 2cb48 <grisu3_diy_fp_encode_double@@Base+0xfc0>
   2c7f0:	vdiv.f64	d7, d7, d6
   2c7f4:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c7f8:	vldr	d6, [pc, #848]	; 2cb50 <grisu3_diy_fp_encode_double@@Base+0xfc8>
   2c7fc:	vdiv.f64	d7, d7, d6
   2c800:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c804:	vldr	d6, [pc, #844]	; 2cb58 <grisu3_diy_fp_encode_double@@Base+0xfd0>
   2c808:	vdiv.f64	d7, d7, d6
   2c80c:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c810:	vldr	d6, [pc, #840]	; 2cb60 <grisu3_diy_fp_encode_double@@Base+0xfd8>
   2c814:	vdiv.f64	d7, d7, d6
   2c818:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c81c:	vldr	d6, [pc, #836]	; 2cb68 <grisu3_diy_fp_encode_double@@Base+0xfe0>
   2c820:	vdiv.f64	d7, d7, d6
   2c824:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c828:	vldr	d6, [pc, #832]	; 2cb70 <grisu3_diy_fp_encode_double@@Base+0xfe8>
   2c82c:	vdiv.f64	d7, d7, d6
   2c830:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c834:	vldr	d6, [pc, #828]	; 2cb78 <grisu3_diy_fp_encode_double@@Base+0xff0>
   2c838:	vdiv.f64	d7, d7, d6
   2c83c:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c840:	vldr	d6, [pc, #824]	; 2cb80 <grisu3_diy_fp_encode_double@@Base+0xff8>
   2c844:	vdiv.f64	d7, d7, d6
   2c848:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c84c:	vldr	d6, [pc, #812]	; 2cb80 <grisu3_diy_fp_encode_double@@Base+0xff8>
   2c850:	vmul.f64	d7, d7, d6
   2c854:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c858:	vldr	d6, [pc, #792]	; 2cb78 <grisu3_diy_fp_encode_double@@Base+0xff0>
   2c85c:	vmul.f64	d7, d7, d6
   2c860:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c864:	vldr	d6, [pc, #772]	; 2cb70 <grisu3_diy_fp_encode_double@@Base+0xfe8>
   2c868:	vmul.f64	d7, d7, d6
   2c86c:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c870:	vldr	d6, [pc, #752]	; 2cb68 <grisu3_diy_fp_encode_double@@Base+0xfe0>
   2c874:	vmul.f64	d7, d7, d6
   2c878:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c87c:	vldr	d6, [pc, #732]	; 2cb60 <grisu3_diy_fp_encode_double@@Base+0xfd8>
   2c880:	vmul.f64	d7, d7, d6
   2c884:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c888:	vldr	d6, [pc, #712]	; 2cb58 <grisu3_diy_fp_encode_double@@Base+0xfd0>
   2c88c:	vmul.f64	d7, d7, d6
   2c890:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c894:	vldr	d6, [pc, #692]	; 2cb50 <grisu3_diy_fp_encode_double@@Base+0xfc8>
   2c898:	vmul.f64	d7, d7, d6
   2c89c:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c8a0:	vldr	d6, [pc, #672]	; 2cb48 <grisu3_diy_fp_encode_double@@Base+0xfc0>
   2c8a4:	vmul.f64	d7, d7, d6
   2c8a8:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c8ac:	vldr	d6, [pc, #652]	; 2cb40 <grisu3_diy_fp_encode_double@@Base+0xfb8>
   2c8b0:	vmul.f64	d7, d7, d6
   2c8b4:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c8b8:	vldr	d6, [pc, #632]	; 2cb38 <grisu3_diy_fp_encode_double@@Base+0xfb0>
   2c8bc:	vmul.f64	d7, d7, d6
   2c8c0:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c8c4:	vldr	d6, [pc, #612]	; 2cb30 <grisu3_diy_fp_encode_double@@Base+0xfa8>
   2c8c8:	vmul.f64	d7, d7, d6
   2c8cc:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c8d0:	vldr	d6, [pc, #592]	; 2cb28 <grisu3_diy_fp_encode_double@@Base+0xfa0>
   2c8d4:	vmul.f64	d7, d7, d6
   2c8d8:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c8dc:	vldr	d6, [pc, #572]	; 2cb20 <grisu3_diy_fp_encode_double@@Base+0xf98>
   2c8e0:	vmul.f64	d7, d7, d6
   2c8e4:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c8e8:	vldr	d6, [pc, #552]	; 2cb18 <grisu3_diy_fp_encode_double@@Base+0xf90>
   2c8ec:	vmul.f64	d7, d7, d6
   2c8f0:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c8f4:	vldr	d6, [pc, #532]	; 2cb10 <grisu3_diy_fp_encode_double@@Base+0xf88>
   2c8f8:	vmul.f64	d7, d7, d6
   2c8fc:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c900:	vldr	d6, [pc, #512]	; 2cb08 <grisu3_diy_fp_encode_double@@Base+0xf80>
   2c904:	vmul.f64	d7, d7, d6
   2c908:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c90c:	vldr	d6, [pc, #492]	; 2cb00 <grisu3_diy_fp_encode_double@@Base+0xf78>
   2c910:	vmul.f64	d7, d7, d6
   2c914:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c918:	vldr	d6, [pc, #472]	; 2caf8 <grisu3_diy_fp_encode_double@@Base+0xf70>
   2c91c:	vmul.f64	d7, d7, d6
   2c920:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c924:	vldr	d6, [pc, #452]	; 2caf0 <grisu3_diy_fp_encode_double@@Base+0xf68>
   2c928:	vmul.f64	d7, d7, d6
   2c92c:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c930:	vldr	d6, [pc, #432]	; 2cae8 <grisu3_diy_fp_encode_double@@Base+0xf60>
   2c934:	vmul.f64	d7, d7, d6
   2c938:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c93c:	vldr	d6, [pc, #412]	; 2cae0 <grisu3_diy_fp_encode_double@@Base+0xf58>
   2c940:	vmul.f64	d7, d7, d6
   2c944:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c948:	vldr	d6, [pc, #392]	; 2cad8 <grisu3_diy_fp_encode_double@@Base+0xf50>
   2c94c:	vmul.f64	d7, d7, d6
   2c950:	b	2c748 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c954:	str	r6, [sp, #4]
   2c958:	ldr	r3, [sp, #24]
   2c95c:	str	r3, [sp]
   2c960:	mov	r3, r8
   2c964:	mov	r2, r5
   2c968:	mov	r0, sl
   2c96c:	mov	r1, fp
   2c970:	bl	2bb88 <grisu3_diy_fp_encode_double@@Base>
   2c974:	cmp	r0, #0
   2c978:	bne	2c38c <grisu3_diy_fp_encode_double@@Base+0x804>
   2c97c:	add	r1, sp, #36	; 0x24
   2c980:	mov	r0, r7
   2c984:	bl	145dc <strtod@plt>
   2c988:	vstr	d0, [r6]
   2c98c:	ldr	r3, [sp, #36]	; 0x24
   2c990:	cmp	r4, r3
   2c994:	movcs	r4, r3
   2c998:	b	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2c99c:	ldr	r4, [sp, #12]
   2c9a0:	b	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2c9a4:	mov	r4, #0
   2c9a8:	b	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2c9ac:	ldr	r4, [sp, #12]
   2c9b0:	b	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2c9b4:	mov	r4, #0
   2c9b8:	b	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2c9bc:	mov	r4, #0
   2c9c0:	b	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2c9c4:	mov	r4, #0
   2c9c8:	b	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2c9cc:	mov	r4, #0
   2c9d0:	b	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2c9d4:	mov	r4, #0
   2c9d8:	b	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2c9dc:	mov	r4, #0
   2c9e0:	b	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2c9e4:	mov	r4, #0
   2c9e8:	b	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2c9ec:	mov	r4, #0
   2c9f0:	b	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2c9f4:	mov	r4, #0
   2c9f8:	b	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2c9fc:	mov	r4, #0
   2ca00:	b	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2ca04:	mov	r4, #0
   2ca08:	b	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2ca0c:	mov	r4, #0
   2ca10:	b	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2ca14:	mov	r4, #0
   2ca18:	b	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2ca1c:	mov	r5, r9
   2ca20:	mov	r4, r9
   2ca24:	mov	sl, #0
   2ca28:	mov	fp, #0
   2ca2c:	sub	r8, r4, r5
   2ca30:	cmp	r9, r4
   2ca34:	moveq	r4, #0
   2ca38:	beq	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2ca3c:	mov	r3, #0
   2ca40:	str	r3, [sp, #24]
   2ca44:	b	2c2a0 <grisu3_diy_fp_encode_double@@Base+0x718>
   2ca48:	mov	r4, r5
   2ca4c:	sub	r8, r4, r5
   2ca50:	mov	r1, r4
   2ca54:	mov	r3, #0
   2ca58:	str	r3, [sp, #24]
   2ca5c:	b	2c26c <grisu3_diy_fp_encode_double@@Base+0x6e4>
   2ca60:	mov	r4, r1
   2ca64:	mov	r3, #0
   2ca68:	b	2c2a0 <grisu3_diy_fp_encode_double@@Base+0x718>
   2ca6c:	mov	r3, r0
   2ca70:	mov	r4, r1
   2ca74:	mov	r2, #1
   2ca78:	str	r2, [sp, #24]
   2ca7c:	b	2c314 <grisu3_diy_fp_encode_double@@Base+0x78c>
   2ca80:	ldr	r2, [sp, #28]
   2ca84:	sub	ip, ip, r2
   2ca88:	add	r8, r8, ip
   2ca8c:	cmp	r9, r4
   2ca90:	moveq	r4, #0
   2ca94:	bne	2c4cc <grisu3_diy_fp_encode_double@@Base+0x944>
   2ca98:	b	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2ca9c:	mov	r4, r1
   2caa0:	mov	r2, #1
   2caa4:	str	r2, [sp, #24]
   2caa8:	b	2c320 <grisu3_diy_fp_encode_double@@Base+0x798>
   2caac:	cmp	r6, #0
   2cab0:	moveq	r4, #0
   2cab4:	beq	2c0fc <grisu3_diy_fp_encode_double@@Base+0x574>
   2cab8:	rsb	r2, r2, #0
   2cabc:	b	2c338 <grisu3_diy_fp_encode_double@@Base+0x7b0>
   2cac0:	ldr	r2, [sp, #24]
   2cac4:	cmp	r2, #0
   2cac8:	beq	2c538 <grisu3_diy_fp_encode_double@@Base+0x9b0>
   2cacc:	ldr	r4, [sp, #28]
   2cad0:	b	2c494 <grisu3_diy_fp_encode_double@@Base+0x90c>
   2cad4:	nop			; (mov r0, r0)
   2cad8:			; <UNDEFINED> instruction: 0x064dd592
   2cadc:	strmi	pc, [r0], #207	; 0xcf
   2cae0:	usatle	lr, #2, r0, asr #30
   2cae4:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   2cae8:	ldmvc	r5!, {r6, sl, fp, pc}
   2caec:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   2caf0:	addsvs	r3, r1, r0, lsl #26
   2caf4:	mvnmi	r5, #228, 16	; 0xe40000
   2caf8:	strbvs	ip, [lr, -r0, lsl #16]
   2cafc:			; <UNDEFINED> instruction: 0x43abc16d
   2cb00:	ldrbhi	sl, [r8]
   2cb04:	cmnmi	r6, #1459617792	; 0x57000000
   2cb08:	strbcc	r8, [r0, r0]!
   2cb0c:	movtmi	ip, #4985	; 0x1379
   2cb10:	ldrtcs	r0, [r4], -r0
   2cb14:	movwmi	r6, #52213	; 0xcbf5
   2cb18:	cdpne	0, 9, cr0, cr0, cr0, {0}
   2cb1c:	sbcsmi	fp, r6, #196, 24	; 0xc400
   2cb20:	strb	r0, [r0, #-0]
   2cb24:	adcmi	r3, r2, #156	; 0x9c
   2cb28:	andge	r0, r0, #0
   2cb2c:	rsbmi	r1, sp, #148, 20	; 0x94000
   2cb30:	stmda	r0, {}	; <UNPREDICTABLE>
   2cb34:	eorsmi	r4, r7, #7733248	; 0x760000
   2cb38:	andcs	r0, r0, r0
   2cb3c:	andmi	sl, r2, #95	; 0x5f
   2cb40:	andeq	r0, r0, r0
   2cb44:	bicmi	ip, sp, r5, ror #26
   2cb48:	andeq	r0, r0, r0
   2cb4c:	orrsmi	sp, r7, r4, lsl #15
   2cb50:	andeq	r0, r0, r0
   2cb54:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   2cb58:	andeq	r0, r0, r0
   2cb5c:	smlawbmi	lr, r0, r4, r8
   2cb60:	andeq	r0, r0, r0
   2cb64:	rscsmi	r6, r8, r0, lsl #20
   2cb68:	andeq	r0, r0, r0
   2cb6c:	sbcmi	r8, r3, r0, lsl #16
   2cb70:	andeq	r0, r0, r0
   2cb74:	addmi	r4, pc, r0
   2cb78:	andeq	r0, r0, r0
   2cb7c:	subsmi	r0, r9, r0
   2cb80:	andeq	r0, r0, r0
   2cb84:	eormi	r0, r4, r0

0002cb88 <flatcc_json_parser_error_string@@Base>:
   2cb88:	cmp	r0, #34	; 0x22
   2cb8c:	ldrls	pc, [pc, r0, lsl #2]
   2cb90:	b	2cd30 <flatcc_json_parser_error_string@@Base+0x1a8>
   2cb94:	andeq	ip, r2, r8, lsr sp
   2cb98:	andeq	ip, r2, r0, lsr #24
   2cb9c:	andeq	ip, r2, r8, lsr #24
   2cba0:	andeq	ip, r2, r0, lsr ip
   2cba4:	andeq	ip, r2, r8, lsr ip
   2cba8:	andeq	ip, r2, r0, asr #24
   2cbac:	andeq	ip, r2, r8, asr #24
   2cbb0:	andeq	ip, r2, r0, asr ip
   2cbb4:	andeq	ip, r2, r8, asr ip
   2cbb8:	andeq	ip, r2, r0, ror #24
   2cbbc:	andeq	ip, r2, r8, ror #24
   2cbc0:	andeq	ip, r2, r0, ror ip
   2cbc4:	andeq	ip, r2, r8, ror ip
   2cbc8:	andeq	ip, r2, r0, lsl #25
   2cbcc:	andeq	ip, r2, r8, lsl #25
   2cbd0:	muleq	r2, r0, ip
   2cbd4:	muleq	r2, r8, ip
   2cbd8:	andeq	ip, r2, r0, lsr #25
   2cbdc:	andeq	ip, r2, r8, lsr #25
   2cbe0:			; <UNDEFINED> instruction: 0x0002ccb0
   2cbe4:			; <UNDEFINED> instruction: 0x0002ccb8
   2cbe8:	andeq	ip, r2, r0, asr #25
   2cbec:	andeq	ip, r2, r8, asr #25
   2cbf0:	ldrdeq	ip, [r2], -r0
   2cbf4:	ldrdeq	ip, [r2], -r8
   2cbf8:	andeq	ip, r2, r0, ror #25
   2cbfc:	andeq	ip, r2, r8, ror #25
   2cc00:	strdeq	ip, [r2], -r0
   2cc04:	strdeq	ip, [r2], -r8
   2cc08:	andeq	ip, r2, r0, lsl #26
   2cc0c:	andeq	ip, r2, r8, lsl #26
   2cc10:	andeq	ip, r2, r0, lsl sp
   2cc14:	andeq	ip, r2, r8, lsl sp
   2cc18:	andeq	ip, r2, r0, lsr #26
   2cc1c:	andeq	ip, r2, r8, lsr #26
   2cc20:	ldr	r0, [pc, #280]	; 2cd40 <flatcc_json_parser_error_string@@Base+0x1b8>
   2cc24:	bx	lr
   2cc28:	ldr	r0, [pc, #276]	; 2cd44 <flatcc_json_parser_error_string@@Base+0x1bc>
   2cc2c:	bx	lr
   2cc30:	ldr	r0, [pc, #272]	; 2cd48 <flatcc_json_parser_error_string@@Base+0x1c0>
   2cc34:	bx	lr
   2cc38:	ldr	r0, [pc, #268]	; 2cd4c <flatcc_json_parser_error_string@@Base+0x1c4>
   2cc3c:	bx	lr
   2cc40:	ldr	r0, [pc, #264]	; 2cd50 <flatcc_json_parser_error_string@@Base+0x1c8>
   2cc44:	bx	lr
   2cc48:	ldr	r0, [pc, #260]	; 2cd54 <flatcc_json_parser_error_string@@Base+0x1cc>
   2cc4c:	bx	lr
   2cc50:	ldr	r0, [pc, #256]	; 2cd58 <flatcc_json_parser_error_string@@Base+0x1d0>
   2cc54:	bx	lr
   2cc58:	ldr	r0, [pc, #252]	; 2cd5c <flatcc_json_parser_error_string@@Base+0x1d4>
   2cc5c:	bx	lr
   2cc60:	ldr	r0, [pc, #248]	; 2cd60 <flatcc_json_parser_error_string@@Base+0x1d8>
   2cc64:	bx	lr
   2cc68:	ldr	r0, [pc, #244]	; 2cd64 <flatcc_json_parser_error_string@@Base+0x1dc>
   2cc6c:	bx	lr
   2cc70:	ldr	r0, [pc, #240]	; 2cd68 <flatcc_json_parser_error_string@@Base+0x1e0>
   2cc74:	bx	lr
   2cc78:	ldr	r0, [pc, #236]	; 2cd6c <flatcc_json_parser_error_string@@Base+0x1e4>
   2cc7c:	bx	lr
   2cc80:	ldr	r0, [pc, #232]	; 2cd70 <flatcc_json_parser_error_string@@Base+0x1e8>
   2cc84:	bx	lr
   2cc88:	ldr	r0, [pc, #228]	; 2cd74 <flatcc_json_parser_error_string@@Base+0x1ec>
   2cc8c:	bx	lr
   2cc90:	ldr	r0, [pc, #224]	; 2cd78 <flatcc_json_parser_error_string@@Base+0x1f0>
   2cc94:	bx	lr
   2cc98:	ldr	r0, [pc, #220]	; 2cd7c <flatcc_json_parser_error_string@@Base+0x1f4>
   2cc9c:	bx	lr
   2cca0:	ldr	r0, [pc, #216]	; 2cd80 <flatcc_json_parser_error_string@@Base+0x1f8>
   2cca4:	bx	lr
   2cca8:	ldr	r0, [pc, #212]	; 2cd84 <flatcc_json_parser_error_string@@Base+0x1fc>
   2ccac:	bx	lr
   2ccb0:	ldr	r0, [pc, #208]	; 2cd88 <flatcc_json_parser_error_string@@Base+0x200>
   2ccb4:	bx	lr
   2ccb8:	ldr	r0, [pc, #204]	; 2cd8c <flatcc_json_parser_error_string@@Base+0x204>
   2ccbc:	bx	lr
   2ccc0:	ldr	r0, [pc, #200]	; 2cd90 <flatcc_json_parser_error_string@@Base+0x208>
   2ccc4:	bx	lr
   2ccc8:	ldr	r0, [pc, #196]	; 2cd94 <flatcc_json_parser_error_string@@Base+0x20c>
   2cccc:	bx	lr
   2ccd0:	ldr	r0, [pc, #192]	; 2cd98 <flatcc_json_parser_error_string@@Base+0x210>
   2ccd4:	bx	lr
   2ccd8:	ldr	r0, [pc, #188]	; 2cd9c <flatcc_json_parser_error_string@@Base+0x214>
   2ccdc:	bx	lr
   2cce0:	ldr	r0, [pc, #184]	; 2cda0 <flatcc_json_parser_error_string@@Base+0x218>
   2cce4:	bx	lr
   2cce8:	ldr	r0, [pc, #180]	; 2cda4 <flatcc_json_parser_error_string@@Base+0x21c>
   2ccec:	bx	lr
   2ccf0:	ldr	r0, [pc, #176]	; 2cda8 <flatcc_json_parser_error_string@@Base+0x220>
   2ccf4:	bx	lr
   2ccf8:	ldr	r0, [pc, #172]	; 2cdac <flatcc_json_parser_error_string@@Base+0x224>
   2ccfc:	bx	lr
   2cd00:	ldr	r0, [pc, #168]	; 2cdb0 <flatcc_json_parser_error_string@@Base+0x228>
   2cd04:	bx	lr
   2cd08:	ldr	r0, [pc, #164]	; 2cdb4 <flatcc_json_parser_error_string@@Base+0x22c>
   2cd0c:	bx	lr
   2cd10:	ldr	r0, [pc, #160]	; 2cdb8 <flatcc_json_parser_error_string@@Base+0x230>
   2cd14:	bx	lr
   2cd18:	ldr	r0, [pc, #156]	; 2cdbc <flatcc_json_parser_error_string@@Base+0x234>
   2cd1c:	bx	lr
   2cd20:	ldr	r0, [pc, #152]	; 2cdc0 <flatcc_json_parser_error_string@@Base+0x238>
   2cd24:	bx	lr
   2cd28:	ldr	r0, [pc, #148]	; 2cdc4 <flatcc_json_parser_error_string@@Base+0x23c>
   2cd2c:	bx	lr
   2cd30:	ldr	r0, [pc, #144]	; 2cdc8 <flatcc_json_parser_error_string@@Base+0x240>
   2cd34:	bx	lr
   2cd38:	ldr	r0, [pc, #140]	; 2cdcc <flatcc_json_parser_error_string@@Base+0x244>
   2cd3c:	bx	lr
   2cd40:	andeq	r3, r4, r8
   2cd44:	andeq	r3, r4, ip
   2cd48:	andeq	r3, r4, ip, lsl r0
   2cd4c:	andeq	r3, r4, ip, lsr #32
   2cd50:	andeq	r3, r4, ip, lsr r0
   2cd54:	andeq	r3, r4, r4, asr r0
   2cd58:	andeq	r2, r4, r8, ror #10
   2cd5c:	andeq	r3, r4, r4, rrx
   2cd60:	andeq	r3, r4, r0, ror r0
   2cd64:	andeq	r3, r4, r4, lsl #1
   2cd68:	muleq	r4, r8, r0
   2cd6c:	andeq	r3, r4, r8, lsr #1
   2cd70:	strheq	r3, [r4], -ip
   2cd74:	andeq	r3, r4, ip, asr #1
   2cd78:	andeq	r3, r4, r8, ror #1
   2cd7c:	strdeq	r3, [r4], -ip
   2cd80:	andeq	r3, r4, ip, lsl #2
   2cd84:	andeq	r3, r4, r0, lsr #2
   2cd88:	andeq	r3, r4, r0, lsr r1
   2cd8c:	andeq	r3, r4, r0, asr #2
   2cd90:	andeq	r3, r4, r4, asr r1
   2cd94:	andeq	r3, r4, r4, ror #2
   2cd98:	andeq	r3, r4, r4, ror r1
   2cd9c:	muleq	r4, r8, r1
   2cda0:	andeq	r3, r4, ip, lsr #3
   2cda4:	andeq	r3, r4, ip, asr #3
   2cda8:	andeq	r3, r4, ip, ror #3
   2cdac:	andeq	r3, r4, r8, lsl #4
   2cdb0:	strdeq	r2, [r4], -r4
   2cdb4:	andeq	r3, r4, r4, lsr #4
   2cdb8:	andeq	r3, r4, r4, asr #4
   2cdbc:	andeq	r3, r4, ip, asr r2
   2cdc0:	andeq	r3, r4, r8, ror r2
   2cdc4:	andeq	r2, r4, r0, lsr #12
   2cdc8:	andeq	r2, r4, r0, lsr r6
   2cdcc:	andeq	r2, r4, r8, lsr #3

0002cdd0 <flatcc_json_parser_set_error@@Base>:
   2cdd0:	ldr	ip, [r0, #24]
   2cdd4:	cmp	ip, #0
   2cdd8:	bne	2cdf4 <flatcc_json_parser_set_error@@Base+0x24>
   2cddc:	str	r3, [r0, #24]
   2cde0:	ldr	r3, [r0, #4]
   2cde4:	sub	r3, r1, r3
   2cde8:	add	r3, r3, #1
   2cdec:	str	r3, [r0, #20]
   2cdf0:	str	r1, [r0, #36]	; 0x24
   2cdf4:	mov	r0, r2
   2cdf8:	bx	lr

0002cdfc <flatcc_json_parser_string_part@@Base>:
   2cdfc:	push	{r4, lr}
   2ce00:	cmp	r1, r2
   2ce04:	beq	2ce90 <flatcc_json_parser_string_part@@Base+0x94>
   2ce08:	ldrb	ip, [r1]
   2ce0c:	cmp	ip, #34	; 0x22
   2ce10:	cmpne	ip, #31
   2ce14:	movhi	r3, #1
   2ce18:	movls	r3, #0
   2ce1c:	cmp	ip, #92	; 0x5c
   2ce20:	moveq	r3, #0
   2ce24:	andne	r3, r3, #1
   2ce28:	cmp	r3, #0
   2ce2c:	beq	2ce6c <flatcc_json_parser_string_part@@Base+0x70>
   2ce30:	add	r3, r1, #1
   2ce34:	mov	r4, r2
   2ce38:	mov	r1, r3
   2ce3c:	cmp	r3, r4
   2ce40:	beq	2ce94 <flatcc_json_parser_string_part@@Base+0x98>
   2ce44:	ldrb	lr, [r3], #1
   2ce48:	cmp	lr, #34	; 0x22
   2ce4c:	cmpne	lr, #31
   2ce50:	movhi	ip, #1
   2ce54:	movls	ip, #0
   2ce58:	cmp	lr, #92	; 0x5c
   2ce5c:	moveq	ip, #0
   2ce60:	andne	ip, ip, #1
   2ce64:	cmp	ip, #0
   2ce68:	bne	2ce38 <flatcc_json_parser_string_part@@Base+0x3c>
   2ce6c:	ldrb	r3, [r1]
   2ce70:	cmp	r3, #31
   2ce74:	bls	2ce80 <flatcc_json_parser_string_part@@Base+0x84>
   2ce78:	mov	r0, r1
   2ce7c:	pop	{r4, pc}
   2ce80:	mov	r3, #17
   2ce84:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2ce88:	mov	r1, r0
   2ce8c:	b	2ce78 <flatcc_json_parser_string_part@@Base+0x7c>
   2ce90:	mov	r1, r2
   2ce94:	mov	r3, #20
   2ce98:	mov	r2, r1
   2ce9c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2cea0:	mov	r1, r0
   2cea4:	b	2ce78 <flatcc_json_parser_string_part@@Base+0x7c>

0002cea8 <flatcc_json_parser_space_ext@@Base>:
   2cea8:	push	{r4, lr}
   2ceac:	mov	r4, #0
   2ceb0:	cmp	r1, r2
   2ceb4:	beq	2cfdc <flatcc_json_parser_space_ext@@Base+0x134>
   2ceb8:	ldrb	r3, [r1]
   2cebc:	cmp	r3, #32
   2cec0:	bne	2cee8 <flatcc_json_parser_space_ext@@Base+0x40>
   2cec4:	add	r3, r1, #1
   2cec8:	mov	lr, r2
   2cecc:	mov	r1, r3
   2ced0:	cmp	r3, lr
   2ced4:	beq	2cfe0 <flatcc_json_parser_space_ext@@Base+0x138>
   2ced8:	add	r3, r3, #1
   2cedc:	ldrb	ip, [r1]
   2cee0:	cmp	ip, #32
   2cee4:	beq	2cecc <flatcc_json_parser_space_ext@@Base+0x24>
   2cee8:	ldrb	r3, [r1]
   2ceec:	cmp	r3, #32
   2cef0:	bls	2cf48 <flatcc_json_parser_space_ext@@Base+0xa0>
   2cef4:	mov	r0, r1
   2cef8:	pop	{r4, pc}
   2cefc:	sub	r3, r2, r1
   2cf00:	cmp	r3, #1
   2cf04:	movle	r3, r4
   2cf08:	ble	2cf1c <flatcc_json_parser_space_ext@@Base+0x74>
   2cf0c:	ldrb	r3, [r1, #1]
   2cf10:	cmp	r3, #10
   2cf14:	movne	r3, #0
   2cf18:	moveq	r3, #1
   2cf1c:	add	r1, r1, r3
   2cf20:	ldr	r3, [r0, #16]
   2cf24:	add	r3, r3, #1
   2cf28:	str	r3, [r0, #16]
   2cf2c:	add	r1, r1, #1
   2cf30:	str	r1, [r0, #4]
   2cf34:	cmp	r2, r1
   2cf38:	beq	2cfd4 <flatcc_json_parser_space_ext@@Base+0x12c>
   2cf3c:	ldrb	r3, [r1]
   2cf40:	cmp	r3, #32
   2cf44:	bhi	2cfcc <flatcc_json_parser_space_ext@@Base+0x124>
   2cf48:	sub	r3, r3, #9
   2cf4c:	cmp	r3, #23
   2cf50:	ldrls	pc, [pc, r3, lsl #2]
   2cf54:	b	2cfc0 <flatcc_json_parser_space_ext@@Base+0x118>
   2cf58:			; <UNDEFINED> instruction: 0x0002cfb8
   2cf5c:	andeq	ip, r2, r0, lsr #30
   2cf60:	andeq	ip, r2, r0, asr #31
   2cf64:	andeq	ip, r2, r0, asr #31
   2cf68:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2cf6c:	andeq	ip, r2, r0, asr #31
   2cf70:	andeq	ip, r2, r0, asr #31
   2cf74:	andeq	ip, r2, r0, asr #31
   2cf78:	andeq	ip, r2, r0, asr #31
   2cf7c:	andeq	ip, r2, r0, asr #31
   2cf80:	andeq	ip, r2, r0, asr #31
   2cf84:	andeq	ip, r2, r0, asr #31
   2cf88:	andeq	ip, r2, r0, asr #31
   2cf8c:	andeq	ip, r2, r0, asr #31
   2cf90:	andeq	ip, r2, r0, asr #31
   2cf94:	andeq	ip, r2, r0, asr #31
   2cf98:	andeq	ip, r2, r0, asr #31
   2cf9c:	andeq	ip, r2, r0, asr #31
   2cfa0:	andeq	ip, r2, r0, asr #31
   2cfa4:	andeq	ip, r2, r0, asr #31
   2cfa8:	andeq	ip, r2, r0, asr #31
   2cfac:	andeq	ip, r2, r0, asr #31
   2cfb0:	andeq	ip, r2, r0, asr #31
   2cfb4:			; <UNDEFINED> instruction: 0x0002ceb0
   2cfb8:	add	r1, r1, #1
   2cfbc:	b	2cf34 <flatcc_json_parser_space_ext@@Base+0x8c>
   2cfc0:	mov	r3, #5
   2cfc4:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2cfc8:	pop	{r4, pc}
   2cfcc:	mov	r0, r1
   2cfd0:	pop	{r4, pc}
   2cfd4:	mov	r0, r2
   2cfd8:	pop	{r4, pc}
   2cfdc:	mov	r1, r2
   2cfe0:	mov	r0, r1
   2cfe4:	pop	{r4, pc}
   2cfe8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cfec:	sub	sp, sp, #36	; 0x24
   2cff0:	mov	r8, r0
   2cff4:	mov	r6, r1
   2cff8:	mov	r7, r2
   2cffc:	str	r3, [sp, #8]
   2d000:	ldr	fp, [sp, #72]	; 0x48
   2d004:	mov	r3, #0
   2d008:	strb	r3, [fp]
   2d00c:	cmp	r1, r2
   2d010:	beq	2d168 <flatcc_json_parser_space_ext@@Base+0x2c0>
   2d014:	ldrb	r3, [r1]
   2d018:	cmp	r3, #34	; 0x22
   2d01c:	addeq	r6, r1, #1
   2d020:	moveq	r3, #0
   2d024:	streq	r3, [r0, #12]
   2d028:	beq	2d174 <flatcc_json_parser_space_ext@@Base+0x2cc>
   2d02c:	cmp	r3, #46	; 0x2e
   2d030:	movne	r3, #1
   2d034:	strne	r3, [r0, #12]
   2d038:	beq	2d050 <flatcc_json_parser_space_ext@@Base+0x1a8>
   2d03c:	mov	r3, #0
   2d040:	str	r3, [sp, #12]
   2d044:	add	sl, sp, #16
   2d048:	add	r9, sp, #24
   2d04c:	b	2d0cc <flatcc_json_parser_space_ext@@Base+0x224>
   2d050:	mov	r3, #5
   2d054:	mov	r1, r6
   2d058:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2d05c:	mov	r6, r0
   2d060:	ldr	r3, [r8, #12]
   2d064:	cmp	r3, #0
   2d068:	beq	2d174 <flatcc_json_parser_space_ext@@Base+0x2cc>
   2d06c:	b	2d1a4 <flatcc_json_parser_space_ext@@Base+0x2fc>
   2d070:	ldrb	r3, [r6, #1]
   2d074:	cmp	r3, #32
   2d078:	addhi	r6, r6, #1
   2d07c:	bls	2d190 <flatcc_json_parser_space_ext@@Base+0x2e8>
   2d080:	b	2d1a4 <flatcc_json_parser_space_ext@@Base+0x2fc>
   2d084:	mov	r4, r0
   2d088:	ldr	r3, [sp, #20]
   2d08c:	cmp	r3, #0
   2d090:	bne	2d128 <flatcc_json_parser_space_ext@@Base+0x280>
   2d094:	ldrd	r2, [sp, #24]
   2d098:	cmp	r3, #0
   2d09c:	cmpeq	r2, #255	; 0xff
   2d0a0:	uxtbls	r3, r2
   2d0a4:	strls	r3, [sp, #12]
   2d0a8:	bhi	2d148 <flatcc_json_parser_space_ext@@Base+0x2a0>
   2d0ac:	ldrb	r3, [fp]
   2d0b0:	ldr	r2, [sp, #12]
   2d0b4:	add	r3, r2, r3
   2d0b8:	strb	r3, [fp]
   2d0bc:	ldr	r3, [sp, #16]
   2d0c0:	cmp	r3, #0
   2d0c4:	beq	2d160 <flatcc_json_parser_space_ext@@Base+0x2b8>
   2d0c8:	mov	r6, r4
   2d0cc:	ldr	r5, [sp, #8]
   2d0d0:	str	sl, [sp, #4]
   2d0d4:	str	r9, [sp]
   2d0d8:	ldr	r4, [r5]
   2d0dc:	add	r3, sp, #20
   2d0e0:	mov	r2, r7
   2d0e4:	mov	r1, r6
   2d0e8:	mov	r0, r8
   2d0ec:	blx	r4
   2d0f0:	cmp	r7, r0
   2d0f4:	beq	2d1b0 <flatcc_json_parser_space_ext@@Base+0x308>
   2d0f8:	cmp	r6, r0
   2d0fc:	bne	2d084 <flatcc_json_parser_space_ext@@Base+0x1dc>
   2d100:	ldr	r3, [r5, #4]!
   2d104:	cmp	r3, #0
   2d108:	bne	2d0d0 <flatcc_json_parser_space_ext@@Base+0x228>
   2d10c:	mov	r3, #23
   2d110:	mov	r2, r7
   2d114:	mov	r1, r6
   2d118:	mov	r0, r8
   2d11c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2d120:	mov	r7, r0
   2d124:	b	2d1b0 <flatcc_json_parser_space_ext@@Base+0x308>
   2d128:	mov	r3, #8
   2d12c:	mov	r2, r7
   2d130:	mov	r1, r0
   2d134:	mov	r0, r8
   2d138:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2d13c:	cmp	r7, r0
   2d140:	bne	2d0ac <flatcc_json_parser_space_ext@@Base+0x204>
   2d144:	b	2d1b0 <flatcc_json_parser_space_ext@@Base+0x308>
   2d148:	mov	r3, #7
   2d14c:	mov	r2, r7
   2d150:	mov	r1, r0
   2d154:	mov	r0, r8
   2d158:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2d15c:	b	2d13c <flatcc_json_parser_space_ext@@Base+0x294>
   2d160:	mov	r7, r4
   2d164:	b	2d1b0 <flatcc_json_parser_space_ext@@Base+0x308>
   2d168:	ldr	r3, [r0, #12]
   2d16c:	cmp	r3, #0
   2d170:	bne	2d1bc <flatcc_json_parser_space_ext@@Base+0x314>
   2d174:	sub	r3, r7, r6
   2d178:	cmp	r3, #1
   2d17c:	ble	2d190 <flatcc_json_parser_space_ext@@Base+0x2e8>
   2d180:	ldrb	r3, [r6]
   2d184:	cmp	r3, #32
   2d188:	bhi	2d1a4 <flatcc_json_parser_space_ext@@Base+0x2fc>
   2d18c:	beq	2d070 <flatcc_json_parser_space_ext@@Base+0x1c8>
   2d190:	mov	r2, r7
   2d194:	mov	r1, r6
   2d198:	mov	r0, r8
   2d19c:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2d1a0:	mov	r6, r0
   2d1a4:	cmp	r7, r6
   2d1a8:	moveq	r7, r6
   2d1ac:	bne	2d03c <flatcc_json_parser_space_ext@@Base+0x194>
   2d1b0:	mov	r0, r7
   2d1b4:	add	sp, sp, #36	; 0x24
   2d1b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d1bc:	mov	r7, r1
   2d1c0:	b	2d1b0 <flatcc_json_parser_space_ext@@Base+0x308>
   2d1c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d1c8:	sub	sp, sp, #28
   2d1cc:	mov	r7, r0
   2d1d0:	mov	r4, r1
   2d1d4:	mov	r6, r2
   2d1d8:	str	r3, [sp, #12]
   2d1dc:	ldr	r9, [sp, #64]	; 0x40
   2d1e0:	ldr	r8, [sp, #72]	; 0x48
   2d1e4:	mov	r3, #0
   2d1e8:	str	r3, [sp, #20]
   2d1ec:	ldr	r0, [r0]
   2d1f0:	bl	27a58 <flatcc_builder_start_offset_vector@@Base>
   2d1f4:	cmp	r0, #0
   2d1f8:	bne	2d568 <flatcc_json_parser_space_ext@@Base+0x6c0>
   2d1fc:	cmp	r4, r6
   2d200:	beq	2d210 <flatcc_json_parser_space_ext@@Base+0x368>
   2d204:	ldrb	r3, [r4]
   2d208:	cmp	r3, #91	; 0x5b
   2d20c:	beq	2d230 <flatcc_json_parser_space_ext@@Base+0x388>
   2d210:	mov	r3, #22
   2d214:	mov	r2, r6
   2d218:	mov	r1, r4
   2d21c:	mov	r0, r7
   2d220:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2d224:	mov	sl, r0
   2d228:	mov	r5, #0
   2d22c:	b	2d494 <flatcc_json_parser_space_ext@@Base+0x5ec>
   2d230:	add	r3, r4, #1
   2d234:	str	r3, [sp, #8]
   2d238:	mov	sl, r6
   2d23c:	sub	r3, r6, r3
   2d240:	cmp	r3, #1
   2d244:	ble	2d258 <flatcc_json_parser_space_ext@@Base+0x3b0>
   2d248:	ldrb	r3, [r4, #1]
   2d24c:	cmp	r3, #32
   2d250:	bhi	2d26c <flatcc_json_parser_space_ext@@Base+0x3c4>
   2d254:	beq	2d298 <flatcc_json_parser_space_ext@@Base+0x3f0>
   2d258:	mov	r2, r6
   2d25c:	ldr	r1, [sp, #8]
   2d260:	mov	r0, r7
   2d264:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2d268:	str	r0, [sp, #8]
   2d26c:	ldr	r3, [sp, #8]
   2d270:	cmp	r6, r3
   2d274:	beq	2d284 <flatcc_json_parser_space_ext@@Base+0x3dc>
   2d278:	ldrb	r3, [r3]
   2d27c:	cmp	r3, #93	; 0x5d
   2d280:	beq	2d2b0 <flatcc_json_parser_space_ext@@Base+0x408>
   2d284:	cmp	r9, #0
   2d288:	beq	2d304 <flatcc_json_parser_space_ext@@Base+0x45c>
   2d28c:	mov	r5, #0
   2d290:	add	fp, sp, #20
   2d294:	b	2d3e0 <flatcc_json_parser_space_ext@@Base+0x538>
   2d298:	ldrb	r3, [r4, #2]
   2d29c:	cmp	r3, #32
   2d2a0:	addhi	r3, r4, #2
   2d2a4:	strhi	r3, [sp, #8]
   2d2a8:	bls	2d258 <flatcc_json_parser_space_ext@@Base+0x3b0>
   2d2ac:	b	2d26c <flatcc_json_parser_space_ext@@Base+0x3c4>
   2d2b0:	ldr	r2, [sp, #8]
   2d2b4:	add	sl, r2, #1
   2d2b8:	sub	r3, r6, sl
   2d2bc:	cmp	r3, #1
   2d2c0:	ble	2d2d4 <flatcc_json_parser_space_ext@@Base+0x42c>
   2d2c4:	ldrb	r3, [r2, #1]
   2d2c8:	cmp	r3, #32
   2d2cc:	bhi	2d228 <flatcc_json_parser_space_ext@@Base+0x380>
   2d2d0:	beq	2d2ec <flatcc_json_parser_space_ext@@Base+0x444>
   2d2d4:	mov	r2, r6
   2d2d8:	mov	r1, sl
   2d2dc:	mov	r0, r7
   2d2e0:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2d2e4:	mov	sl, r0
   2d2e8:	b	2d228 <flatcc_json_parser_space_ext@@Base+0x380>
   2d2ec:	ldrb	r3, [r2, #2]
   2d2f0:	cmp	r3, #32
   2d2f4:	movhi	r3, r2
   2d2f8:	addhi	sl, r3, #2
   2d2fc:	bls	2d2d4 <flatcc_json_parser_space_ext@@Base+0x42c>
   2d300:	b	2d228 <flatcc_json_parser_space_ext@@Base+0x380>
   2d304:	mov	r3, #30
   2d308:	mov	r2, r6
   2d30c:	ldr	r1, [sp, #8]
   2d310:	mov	r0, r7
   2d314:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2d318:	mov	sl, r0
   2d31c:	b	2d580 <flatcc_json_parser_space_ext@@Base+0x6d8>
   2d320:	ldrb	r3, [r4, #1]
   2d324:	cmp	r3, #32
   2d328:	addhi	r4, r4, #1
   2d32c:	bls	2d448 <flatcc_json_parser_space_ext@@Base+0x5a0>
   2d330:	b	2d45c <flatcc_json_parser_space_ext@@Base+0x5b4>
   2d334:	add	sl, r4, #1
   2d338:	sub	r3, r6, sl
   2d33c:	cmp	r3, #1
   2d340:	ble	2d354 <flatcc_json_parser_space_ext@@Base+0x4ac>
   2d344:	ldrb	r3, [r4, #1]
   2d348:	cmp	r3, #32
   2d34c:	bhi	2d490 <flatcc_json_parser_space_ext@@Base+0x5e8>
   2d350:	beq	2d36c <flatcc_json_parser_space_ext@@Base+0x4c4>
   2d354:	mov	r2, r6
   2d358:	mov	r1, sl
   2d35c:	mov	r0, r7
   2d360:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2d364:	mov	sl, r0
   2d368:	b	2d490 <flatcc_json_parser_space_ext@@Base+0x5e8>
   2d36c:	ldrb	r3, [r4, #2]
   2d370:	cmp	r3, #32
   2d374:	addhi	sl, r4, #2
   2d378:	bls	2d354 <flatcc_json_parser_space_ext@@Base+0x4ac>
   2d37c:	b	2d490 <flatcc_json_parser_space_ext@@Base+0x5e8>
   2d380:	add	r3, r4, #1
   2d384:	str	r3, [sp, #8]
   2d388:	sub	r3, sl, r3
   2d38c:	cmp	r3, #1
   2d390:	ble	2d3a4 <flatcc_json_parser_space_ext@@Base+0x4fc>
   2d394:	ldrb	r3, [r4, #1]
   2d398:	cmp	r3, #32
   2d39c:	bhi	2d3b8 <flatcc_json_parser_space_ext@@Base+0x510>
   2d3a0:	beq	2d4b8 <flatcc_json_parser_space_ext@@Base+0x610>
   2d3a4:	mov	r2, r6
   2d3a8:	ldr	r1, [sp, #8]
   2d3ac:	mov	r0, r7
   2d3b0:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2d3b4:	str	r0, [sp, #8]
   2d3b8:	ldr	r3, [sp, #8]
   2d3bc:	cmp	r6, r3
   2d3c0:	beq	2d4d0 <flatcc_json_parser_space_ext@@Base+0x628>
   2d3c4:	ldr	r3, [sp, #8]
   2d3c8:	ldrb	r3, [r3]
   2d3cc:	cmp	r3, #93	; 0x5d
   2d3d0:	beq	2d4ec <flatcc_json_parser_space_ext@@Base+0x644>
   2d3d4:	add	r5, r5, #1
   2d3d8:	cmp	r9, r5
   2d3dc:	beq	2d304 <flatcc_json_parser_space_ext@@Base+0x45c>
   2d3e0:	ldr	r1, [sp, #12]
   2d3e4:	ldr	r0, [r7]
   2d3e8:	bl	26940 <flatcc_builder_get_user_frame_ptr@@Base>
   2d3ec:	ldrb	r3, [r0, r5]
   2d3f0:	str	fp, [sp]
   2d3f4:	mov	r2, r6
   2d3f8:	ldr	r1, [sp, #8]
   2d3fc:	mov	r0, r7
   2d400:	blx	r8
   2d404:	mov	r4, r0
   2d408:	cmp	r6, r0
   2d40c:	beq	2d5b0 <flatcc_json_parser_space_ext@@Base+0x708>
   2d410:	mov	r1, #1
   2d414:	ldr	r0, [r7]
   2d418:	bl	27428 <flatcc_builder_extend_offset_vector@@Base>
   2d41c:	cmp	r0, #0
   2d420:	beq	2d568 <flatcc_json_parser_space_ext@@Base+0x6c0>
   2d424:	ldr	r3, [sp, #20]
   2d428:	str	r3, [r0]
   2d42c:	sub	r3, sl, r4
   2d430:	cmp	r3, #1
   2d434:	ble	2d448 <flatcc_json_parser_space_ext@@Base+0x5a0>
   2d438:	ldrb	r3, [r4]
   2d43c:	cmp	r3, #32
   2d440:	bhi	2d464 <flatcc_json_parser_space_ext@@Base+0x5bc>
   2d444:	beq	2d320 <flatcc_json_parser_space_ext@@Base+0x478>
   2d448:	mov	r2, r6
   2d44c:	mov	r1, r4
   2d450:	mov	r0, r7
   2d454:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2d458:	mov	r4, r0
   2d45c:	cmp	r6, r4
   2d460:	beq	2d5b8 <flatcc_json_parser_space_ext@@Base+0x710>
   2d464:	ldrb	r3, [r4]
   2d468:	cmp	r3, #44	; 0x2c
   2d46c:	beq	2d380 <flatcc_json_parser_space_ext@@Base+0x4d8>
   2d470:	cmp	r3, #93	; 0x5d
   2d474:	beq	2d334 <flatcc_json_parser_space_ext@@Base+0x48c>
   2d478:	mov	r3, #9
   2d47c:	mov	r2, r6
   2d480:	mov	r1, r4
   2d484:	mov	r0, r7
   2d488:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2d48c:	mov	sl, r0
   2d490:	add	r5, r5, #1
   2d494:	cmp	r9, r5
   2d498:	beq	2d540 <flatcc_json_parser_space_ext@@Base+0x698>
   2d49c:	mov	r3, #30
   2d4a0:	mov	r2, r6
   2d4a4:	mov	r1, sl
   2d4a8:	mov	r0, r7
   2d4ac:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2d4b0:	mov	sl, r0
   2d4b4:	b	2d580 <flatcc_json_parser_space_ext@@Base+0x6d8>
   2d4b8:	ldrb	r3, [r4, #2]
   2d4bc:	cmp	r3, #32
   2d4c0:	addhi	r3, r4, #2
   2d4c4:	strhi	r3, [sp, #8]
   2d4c8:	bls	2d3a4 <flatcc_json_parser_space_ext@@Base+0x4fc>
   2d4cc:	b	2d3b8 <flatcc_json_parser_space_ext@@Base+0x510>
   2d4d0:	mov	r3, #9
   2d4d4:	mov	r2, r6
   2d4d8:	ldr	r1, [sp, #8]
   2d4dc:	mov	r0, r7
   2d4e0:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2d4e4:	mov	sl, r0
   2d4e8:	b	2d490 <flatcc_json_parser_space_ext@@Base+0x5e8>
   2d4ec:	ldr	r2, [sp, #8]
   2d4f0:	add	sl, r2, #1
   2d4f4:	sub	r3, r6, sl
   2d4f8:	cmp	r3, #1
   2d4fc:	ble	2d510 <flatcc_json_parser_space_ext@@Base+0x668>
   2d500:	ldrb	r3, [r2, #1]
   2d504:	cmp	r3, #32
   2d508:	bhi	2d490 <flatcc_json_parser_space_ext@@Base+0x5e8>
   2d50c:	beq	2d528 <flatcc_json_parser_space_ext@@Base+0x680>
   2d510:	mov	r2, r6
   2d514:	mov	r1, sl
   2d518:	mov	r0, r7
   2d51c:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2d520:	mov	sl, r0
   2d524:	b	2d490 <flatcc_json_parser_space_ext@@Base+0x5e8>
   2d528:	ldrb	r3, [r2, #2]
   2d52c:	cmp	r3, #32
   2d530:	movhi	r3, r2
   2d534:	addhi	sl, r3, #2
   2d538:	bls	2d510 <flatcc_json_parser_space_ext@@Base+0x668>
   2d53c:	b	2d490 <flatcc_json_parser_space_ext@@Base+0x5e8>
   2d540:	ldr	r1, [sp, #12]
   2d544:	ldr	r0, [r7]
   2d548:	bl	26940 <flatcc_builder_get_user_frame_ptr@@Base>
   2d54c:	mov	r1, r0
   2d550:	ldr	r0, [r7]
   2d554:	bl	28c24 <flatcc_builder_end_offset_vector_for_unions@@Base>
   2d558:	str	r0, [sp, #20]
   2d55c:	cmp	r0, #0
   2d560:	moveq	r4, sl
   2d564:	bne	2d58c <flatcc_json_parser_space_ext@@Base+0x6e4>
   2d568:	mov	r3, #33	; 0x21
   2d56c:	mov	r2, r6
   2d570:	mov	r1, r4
   2d574:	mov	r0, r7
   2d578:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2d57c:	mov	sl, r0
   2d580:	mov	r0, sl
   2d584:	add	sp, sp, #28
   2d588:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d58c:	ldrh	r1, [sp, #68]	; 0x44
   2d590:	ldr	r0, [r7]
   2d594:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   2d598:	cmp	r0, #0
   2d59c:	ldrne	r3, [sp, #20]
   2d5a0:	strne	r3, [r0]
   2d5a4:	bne	2d580 <flatcc_json_parser_space_ext@@Base+0x6d8>
   2d5a8:	mov	r4, sl
   2d5ac:	b	2d568 <flatcc_json_parser_space_ext@@Base+0x6c0>
   2d5b0:	mov	sl, r6
   2d5b4:	b	2d580 <flatcc_json_parser_space_ext@@Base+0x6d8>
   2d5b8:	mov	sl, r6
   2d5bc:	b	2d490 <flatcc_json_parser_space_ext@@Base+0x5e8>

0002d5c0 <flatcc_json_parser_string_escape@@Base>:
   2d5c0:	push	{r4, lr}
   2d5c4:	sub	ip, r2, r1
   2d5c8:	cmp	ip, #1
   2d5cc:	ble	2d5dc <flatcc_json_parser_string_escape@@Base+0x1c>
   2d5d0:	ldrb	lr, [r1]
   2d5d4:	cmp	lr, #92	; 0x5c
   2d5d8:	beq	2d5f0 <flatcc_json_parser_string_escape@@Base+0x30>
   2d5dc:	mov	ip, #0
   2d5e0:	strb	ip, [r3]
   2d5e4:	mov	r3, #18
   2d5e8:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2d5ec:	pop	{r4, pc}
   2d5f0:	ldrb	lr, [r1, #1]
   2d5f4:	sub	lr, lr, #34	; 0x22
   2d5f8:	cmp	lr, #86	; 0x56
   2d5fc:	ldrls	pc, [pc, lr, lsl #2]
   2d600:	b	2daec <flatcc_json_parser_string_escape@@Base+0x52c>
   2d604:	andeq	sp, r2, r4, lsr #21
   2d608:	andeq	sp, r2, ip, ror #21
   2d60c:	andeq	sp, r2, ip, ror #21
   2d610:	andeq	sp, r2, ip, ror #21
   2d614:	andeq	sp, r2, ip, ror #21
   2d618:	andeq	sp, r2, ip, ror #21
   2d61c:	andeq	sp, r2, ip, ror #21
   2d620:	andeq	sp, r2, ip, ror #21
   2d624:	andeq	sp, r2, ip, ror #21
   2d628:	andeq	sp, r2, ip, ror #21
   2d62c:	andeq	sp, r2, ip, ror #21
   2d630:	andeq	sp, r2, ip, ror #21
   2d634:	andeq	sp, r2, ip, ror #21
   2d638:	ldrdeq	sp, [r2], -r4
   2d63c:	andeq	sp, r2, ip, ror #21
   2d640:	andeq	sp, r2, ip, ror #21
   2d644:	andeq	sp, r2, ip, ror #21
   2d648:	andeq	sp, r2, ip, ror #21
   2d64c:	andeq	sp, r2, ip, ror #21
   2d650:	andeq	sp, r2, ip, ror #21
   2d654:	andeq	sp, r2, ip, ror #21
   2d658:	andeq	sp, r2, ip, ror #21
   2d65c:	andeq	sp, r2, ip, ror #21
   2d660:	andeq	sp, r2, ip, ror #21
   2d664:	andeq	sp, r2, ip, ror #21
   2d668:	andeq	sp, r2, ip, ror #21
   2d66c:	andeq	sp, r2, ip, ror #21
   2d670:	andeq	sp, r2, ip, ror #21
   2d674:	andeq	sp, r2, ip, ror #21
   2d678:	andeq	sp, r2, ip, ror #21
   2d67c:	andeq	sp, r2, ip, ror #21
   2d680:	andeq	sp, r2, ip, ror #21
   2d684:	andeq	sp, r2, ip, ror #21
   2d688:	andeq	sp, r2, ip, ror #21
   2d68c:	andeq	sp, r2, ip, ror #21
   2d690:	andeq	sp, r2, ip, ror #21
   2d694:	andeq	sp, r2, ip, ror #21
   2d698:	andeq	sp, r2, ip, ror #21
   2d69c:	andeq	sp, r2, ip, ror #21
   2d6a0:	andeq	sp, r2, ip, ror #21
   2d6a4:	andeq	sp, r2, ip, ror #21
   2d6a8:	andeq	sp, r2, ip, ror #21
   2d6ac:	andeq	sp, r2, ip, ror #21
   2d6b0:	andeq	sp, r2, ip, ror #21
   2d6b4:	andeq	sp, r2, ip, ror #21
   2d6b8:	andeq	sp, r2, ip, ror #21
   2d6bc:	andeq	sp, r2, ip, ror #21
   2d6c0:	andeq	sp, r2, ip, ror #21
   2d6c4:	andeq	sp, r2, ip, ror #21
   2d6c8:	andeq	sp, r2, ip, ror #21
   2d6cc:	andeq	sp, r2, ip, ror #21
   2d6d0:	andeq	sp, r2, ip, ror #21
   2d6d4:	andeq	sp, r2, ip, ror #21
   2d6d8:	andeq	sp, r2, ip, ror #21
   2d6dc:	andeq	sp, r2, ip, ror #21
   2d6e0:	andeq	sp, r2, ip, ror #21
   2d6e4:	andeq	sp, r2, ip, ror #21
   2d6e8:	andeq	sp, r2, ip, ror #21
   2d6ec:			; <UNDEFINED> instruction: 0x0002dabc
   2d6f0:	andeq	sp, r2, ip, ror #21
   2d6f4:	andeq	sp, r2, ip, ror #21
   2d6f8:	andeq	sp, r2, ip, ror #21
   2d6fc:	andeq	sp, r2, ip, ror #21
   2d700:	andeq	sp, r2, ip, ror #21
   2d704:	andeq	sp, r2, r4, ror sl
   2d708:	andeq	sp, r2, ip, ror #21
   2d70c:	andeq	sp, r2, ip, ror #21
   2d710:	andeq	sp, r2, ip, ror #21
   2d714:	andeq	sp, r2, ip, lsl #21
   2d718:	andeq	sp, r2, ip, ror #21
   2d71c:	andeq	sp, r2, ip, ror #21
   2d720:	andeq	sp, r2, ip, ror #21
   2d724:	andeq	sp, r2, ip, ror #21
   2d728:	andeq	sp, r2, ip, ror #21
   2d72c:	andeq	sp, r2, ip, ror #21
   2d730:	andeq	sp, r2, ip, ror #21
   2d734:	andeq	sp, r2, r4, asr #20
   2d738:	andeq	sp, r2, ip, ror #21
   2d73c:	andeq	sp, r2, ip, ror #21
   2d740:	andeq	sp, r2, ip, ror #21
   2d744:	andeq	sp, r2, ip, asr sl
   2d748:	andeq	sp, r2, ip, ror #21
   2d74c:	andeq	sp, r2, ip, lsr #20
   2d750:	andeq	sp, r2, ip, lsr #16
   2d754:	andeq	sp, r2, ip, ror #21
   2d758:	andeq	sp, r2, ip, ror #21
   2d75c:	andeq	sp, r2, r0, ror #14
   2d760:	mov	lr, #1
   2d764:	strb	lr, [r3]
   2d768:	cmp	ip, #3
   2d76c:	ble	2d7f0 <flatcc_json_parser_string_escape@@Base+0x230>
   2d770:	ldrb	ip, [r1, #2]
   2d774:	sub	lr, ip, #48	; 0x30
   2d778:	uxtb	lr, lr
   2d77c:	cmp	lr, #9
   2d780:	lslls	ip, ip, #4
   2d784:	andls	ip, ip, #240	; 0xf0
   2d788:	bls	2d7ac <flatcc_json_parser_string_escape@@Base+0x1ec>
   2d78c:	orr	ip, ip, #32
   2d790:	sub	lr, ip, #97	; 0x61
   2d794:	uxtb	lr, lr
   2d798:	cmp	lr, #5
   2d79c:	bhi	2d804 <flatcc_json_parser_string_escape@@Base+0x244>
   2d7a0:	sub	ip, ip, #87	; 0x57
   2d7a4:	lsl	ip, ip, #4
   2d7a8:	uxtb	ip, ip
   2d7ac:	ldrb	lr, [r1, #3]
   2d7b0:	sub	r4, lr, #48	; 0x30
   2d7b4:	uxtb	r4, r4
   2d7b8:	cmp	r4, #9
   2d7bc:	orrls	ip, r4, ip
   2d7c0:	bls	2d7e4 <flatcc_json_parser_string_escape@@Base+0x224>
   2d7c4:	orr	lr, lr, #32
   2d7c8:	sub	r4, lr, #97	; 0x61
   2d7cc:	uxtb	r4, r4
   2d7d0:	cmp	r4, #5
   2d7d4:	bhi	2d818 <flatcc_json_parser_string_escape@@Base+0x258>
   2d7d8:	sub	lr, lr, #87	; 0x57
   2d7dc:	orr	ip, lr, ip
   2d7e0:	uxtb	ip, ip
   2d7e4:	strb	ip, [r3, #1]
   2d7e8:	add	r0, r1, #4
   2d7ec:	pop	{r4, pc}
   2d7f0:	mov	ip, #0
   2d7f4:	strb	ip, [r3]
   2d7f8:	mov	r3, #18
   2d7fc:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2d800:	pop	{r4, pc}
   2d804:	mov	ip, #0
   2d808:	strb	ip, [r3]
   2d80c:	mov	r3, #18
   2d810:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2d814:	pop	{r4, pc}
   2d818:	mov	ip, #0
   2d81c:	strb	ip, [r3]
   2d820:	mov	r3, #18
   2d824:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2d828:	pop	{r4, pc}
   2d82c:	cmp	ip, #5
   2d830:	ble	2d8f4 <flatcc_json_parser_string_escape@@Base+0x334>
   2d834:	ldrb	ip, [r1, #2]
   2d838:	sub	lr, ip, #48	; 0x30
   2d83c:	uxtb	lr, lr
   2d840:	cmp	lr, #9
   2d844:	lslls	ip, ip, #12
   2d848:	andls	lr, ip, #61440	; 0xf000
   2d84c:	bls	2d870 <flatcc_json_parser_string_escape@@Base+0x2b0>
   2d850:	orr	ip, ip, #32
   2d854:	sub	lr, ip, #97	; 0x61
   2d858:	uxtb	lr, lr
   2d85c:	cmp	lr, #5
   2d860:	bhi	2d908 <flatcc_json_parser_string_escape@@Base+0x348>
   2d864:	sub	ip, ip, #87	; 0x57
   2d868:	lsl	ip, ip, #12
   2d86c:	and	lr, ip, #61440	; 0xf000
   2d870:	ldrb	ip, [r1, #3]
   2d874:	sub	r4, ip, #48	; 0x30
   2d878:	uxtb	r4, r4
   2d87c:	cmp	r4, #9
   2d880:	bhi	2d91c <flatcc_json_parser_string_escape@@Base+0x35c>
   2d884:	sub	ip, ip, #48	; 0x30
   2d888:	uxth	ip, ip
   2d88c:	orr	ip, lr, ip, lsl #8
   2d890:	and	ip, ip, #65280	; 0xff00
   2d894:	ldrb	lr, [r1, #4]
   2d898:	sub	r4, lr, #48	; 0x30
   2d89c:	uxtb	r4, r4
   2d8a0:	cmp	r4, #9
   2d8a4:	bhi	2d958 <flatcc_json_parser_string_escape@@Base+0x398>
   2d8a8:	sub	lr, lr, #48	; 0x30
   2d8ac:	uxth	lr, lr
   2d8b0:	orr	ip, ip, lr, lsl #4
   2d8b4:	uxth	ip, ip
   2d8b8:	ldrb	lr, [r1, #5]
   2d8bc:	sub	r4, lr, #48	; 0x30
   2d8c0:	uxtb	r4, r4
   2d8c4:	cmp	r4, #9
   2d8c8:	bhi	2d994 <flatcc_json_parser_string_escape@@Base+0x3d4>
   2d8cc:	sub	r2, lr, #48	; 0x30
   2d8d0:	orr	r2, ip, r2
   2d8d4:	uxth	r2, r2
   2d8d8:	cmp	r2, #127	; 0x7f
   2d8dc:	bhi	2d9c8 <flatcc_json_parser_string_escape@@Base+0x408>
   2d8e0:	mov	r0, #1
   2d8e4:	strb	r0, [r3]
   2d8e8:	strb	r2, [r3, #1]
   2d8ec:	add	r0, r1, #6
   2d8f0:	pop	{r4, pc}
   2d8f4:	mov	ip, #0
   2d8f8:	strb	ip, [r3]
   2d8fc:	mov	r3, #18
   2d900:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2d904:	pop	{r4, pc}
   2d908:	mov	ip, #0
   2d90c:	strb	ip, [r3]
   2d910:	mov	r3, #18
   2d914:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2d918:	pop	{r4, pc}
   2d91c:	orr	ip, ip, #32
   2d920:	sub	r4, ip, #97	; 0x61
   2d924:	uxtb	r4, r4
   2d928:	cmp	r4, #5
   2d92c:	bhi	2d944 <flatcc_json_parser_string_escape@@Base+0x384>
   2d930:	sub	ip, ip, #87	; 0x57
   2d934:	uxth	ip, ip
   2d938:	orr	ip, lr, ip, lsl #8
   2d93c:	and	ip, ip, #65280	; 0xff00
   2d940:	b	2d894 <flatcc_json_parser_string_escape@@Base+0x2d4>
   2d944:	mov	ip, #0
   2d948:	strb	ip, [r3]
   2d94c:	mov	r3, #18
   2d950:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2d954:	pop	{r4, pc}
   2d958:	orr	lr, lr, #32
   2d95c:	sub	r4, lr, #97	; 0x61
   2d960:	uxtb	r4, r4
   2d964:	cmp	r4, #5
   2d968:	bhi	2d980 <flatcc_json_parser_string_escape@@Base+0x3c0>
   2d96c:	sub	lr, lr, #87	; 0x57
   2d970:	uxth	lr, lr
   2d974:	orr	ip, ip, lr, lsl #4
   2d978:	uxth	ip, ip
   2d97c:	b	2d8b8 <flatcc_json_parser_string_escape@@Base+0x2f8>
   2d980:	mov	ip, #0
   2d984:	strb	ip, [r3]
   2d988:	mov	r3, #18
   2d98c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2d990:	pop	{r4, pc}
   2d994:	orr	lr, lr, #32
   2d998:	sub	r4, lr, #97	; 0x61
   2d99c:	uxtb	r4, r4
   2d9a0:	cmp	r4, #5
   2d9a4:	subls	r2, lr, #87	; 0x57
   2d9a8:	orrls	r2, ip, r2
   2d9ac:	uxthls	r2, r2
   2d9b0:	bls	2d8d8 <flatcc_json_parser_string_escape@@Base+0x318>
   2d9b4:	mov	ip, #0
   2d9b8:	strb	ip, [r3]
   2d9bc:	mov	r3, #18
   2d9c0:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2d9c4:	pop	{r4, pc}
   2d9c8:	cmp	r2, #2048	; 0x800
   2d9cc:	bcs	2d9f8 <flatcc_json_parser_string_escape@@Base+0x438>
   2d9d0:	mov	r0, #2
   2d9d4:	strb	r0, [r3]
   2d9d8:	mvn	r0, #63	; 0x3f
   2d9dc:	orr	r0, r0, r2, lsr #6
   2d9e0:	strb	r0, [r3, #1]
   2d9e4:	and	r2, r2, #63	; 0x3f
   2d9e8:	mvn	r2, r2, lsl #25
   2d9ec:	mvn	r2, r2, lsr #25
   2d9f0:	strb	r2, [r3, #2]
   2d9f4:	b	2d8ec <flatcc_json_parser_string_escape@@Base+0x32c>
   2d9f8:	mov	r0, #3
   2d9fc:	strb	r0, [r3]
   2da00:	mvn	r0, #31
   2da04:	orr	r0, r0, r2, lsr #12
   2da08:	strb	r0, [r3, #1]
   2da0c:	lsl	r0, r2, #20
   2da10:	mvn	ip, #127	; 0x7f
   2da14:	orr	r0, ip, r0, lsr #26
   2da18:	strb	r0, [r3, #2]
   2da1c:	and	r2, r2, #63	; 0x3f
   2da20:	orr	r2, r2, ip
   2da24:	strb	r2, [r3, #3]
   2da28:	b	2d8ec <flatcc_json_parser_string_escape@@Base+0x32c>
   2da2c:	mov	r2, #1
   2da30:	strb	r2, [r3]
   2da34:	mov	r2, #9
   2da38:	strb	r2, [r3, #1]
   2da3c:	add	r0, r1, #2
   2da40:	pop	{r4, pc}
   2da44:	mov	r2, #1
   2da48:	strb	r2, [r3]
   2da4c:	mov	r2, #10
   2da50:	strb	r2, [r3, #1]
   2da54:	add	r0, r1, #2
   2da58:	pop	{r4, pc}
   2da5c:	mov	r2, #1
   2da60:	strb	r2, [r3]
   2da64:	mov	r2, #13
   2da68:	strb	r2, [r3, #1]
   2da6c:	add	r0, r1, #2
   2da70:	pop	{r4, pc}
   2da74:	mov	r2, #1
   2da78:	strb	r2, [r3]
   2da7c:	mov	r2, #8
   2da80:	strb	r2, [r3, #1]
   2da84:	add	r0, r1, #2
   2da88:	pop	{r4, pc}
   2da8c:	mov	r2, #1
   2da90:	strb	r2, [r3]
   2da94:	mov	r2, #12
   2da98:	strb	r2, [r3, #1]
   2da9c:	add	r0, r1, #2
   2daa0:	pop	{r4, pc}
   2daa4:	mov	r2, #1
   2daa8:	strb	r2, [r3]
   2daac:	mov	r2, #34	; 0x22
   2dab0:	strb	r2, [r3, #1]
   2dab4:	add	r0, r1, #2
   2dab8:	pop	{r4, pc}
   2dabc:	mov	r2, #1
   2dac0:	strb	r2, [r3]
   2dac4:	mov	r2, #92	; 0x5c
   2dac8:	strb	r2, [r3, #1]
   2dacc:	add	r0, r1, #2
   2dad0:	pop	{r4, pc}
   2dad4:	mov	r2, #1
   2dad8:	strb	r2, [r3]
   2dadc:	mov	r2, #47	; 0x2f
   2dae0:	strb	r2, [r3, #1]
   2dae4:	add	r0, r1, #2
   2dae8:	pop	{r4, pc}
   2daec:	mov	ip, #0
   2daf0:	strb	ip, [r3]
   2daf4:	mov	r3, #18
   2daf8:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2dafc:	pop	{r4, pc}

0002db00 <flatcc_json_parser_skip_constant@@Base>:
   2db00:	push	{r4, r5, r6, lr}
   2db04:	mov	r6, r0
   2db08:	mov	r4, r1
   2db0c:	mov	r5, r2
   2db10:	cmp	r1, r2
   2db14:	bne	2db28 <flatcc_json_parser_skip_constant@@Base+0x28>
   2db18:	b	2dbbc <flatcc_json_parser_skip_constant@@Base+0xbc>
   2db1c:	add	r4, r4, #1
   2db20:	cmp	r5, r4
   2db24:	beq	2dbbc <flatcc_json_parser_skip_constant@@Base+0xbc>
   2db28:	ldrb	r3, [r4]
   2db2c:	cmp	r3, #95	; 0x5f
   2db30:	movne	r2, #0
   2db34:	moveq	r2, #1
   2db38:	orrs	r2, r2, r3, lsr #7
   2db3c:	bne	2db1c <flatcc_json_parser_skip_constant@@Base+0x1c>
   2db40:	sub	r2, r3, #48	; 0x30
   2db44:	uxtb	r2, r2
   2db48:	cmp	r3, #46	; 0x2e
   2db4c:	cmpne	r2, #9
   2db50:	bls	2db1c <flatcc_json_parser_skip_constant@@Base+0x1c>
   2db54:	orr	r2, r3, #32
   2db58:	sub	r2, r2, #97	; 0x61
   2db5c:	uxtb	r2, r2
   2db60:	cmp	r2, #25
   2db64:	addls	r4, r4, #1
   2db68:	bls	2db20 <flatcc_json_parser_skip_constant@@Base+0x20>
   2db6c:	sub	r2, r5, r4
   2db70:	cmp	r2, #1
   2db74:	ble	2db84 <flatcc_json_parser_skip_constant@@Base+0x84>
   2db78:	cmp	r3, #32
   2db7c:	bhi	2dbb8 <flatcc_json_parser_skip_constant@@Base+0xb8>
   2db80:	beq	2dba4 <flatcc_json_parser_skip_constant@@Base+0xa4>
   2db84:	mov	r2, r5
   2db88:	mov	r1, r4
   2db8c:	mov	r0, r6
   2db90:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2db94:	cmp	r0, r4
   2db98:	beq	2dbc4 <flatcc_json_parser_skip_constant@@Base+0xc4>
   2db9c:	mov	r4, r0
   2dba0:	b	2db20 <flatcc_json_parser_skip_constant@@Base+0x20>
   2dba4:	ldrb	r3, [r4, #1]
   2dba8:	cmp	r3, #32
   2dbac:	addhi	r0, r4, #1
   2dbb0:	bls	2db84 <flatcc_json_parser_skip_constant@@Base+0x84>
   2dbb4:	b	2db94 <flatcc_json_parser_skip_constant@@Base+0x94>
   2dbb8:	mov	r5, r4
   2dbbc:	mov	r0, r5
   2dbc0:	pop	{r4, r5, r6, pc}
   2dbc4:	mov	r5, r0
   2dbc8:	b	2dbbc <flatcc_json_parser_skip_constant@@Base+0xbc>

0002dbcc <flatcc_json_parser_match_constant@@Base>:
   2dbcc:	push	{r4, r5, r6, r7, r8, lr}
   2dbd0:	ldr	r5, [sp, #24]
   2dbd4:	sub	ip, r2, r1
   2dbd8:	cmp	r3, ip
   2dbdc:	bge	2dc34 <flatcc_json_parser_match_constant@@Base+0x68>
   2dbe0:	mov	r6, r2
   2dbe4:	mov	r7, r1
   2dbe8:	mov	ip, r0
   2dbec:	add	r4, r1, r3
   2dbf0:	ldr	r2, [r0, #12]
   2dbf4:	cmp	r2, #0
   2dbf8:	bne	2dc44 <flatcc_json_parser_match_constant@@Base+0x78>
   2dbfc:	ldrb	r3, [r1, r3]
   2dc00:	cmp	r3, #32
   2dc04:	beq	2dd04 <flatcc_json_parser_match_constant@@Base+0x138>
   2dc08:	cmp	r3, #34	; 0x22
   2dc0c:	beq	2dd5c <flatcc_json_parser_match_constant@@Base+0x190>
   2dc10:	cmp	r3, #92	; 0x5c
   2dc14:	bne	2ddac <flatcc_json_parser_match_constant@@Base+0x1e0>
   2dc18:	mov	r3, #0
   2dc1c:	str	r3, [r5]
   2dc20:	mov	r3, #18
   2dc24:	mov	r2, r6
   2dc28:	mov	r1, r4
   2dc2c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2dc30:	pop	{r4, r5, r6, r7, r8, pc}
   2dc34:	mov	r3, #0
   2dc38:	str	r3, [r5]
   2dc3c:	mov	r0, r1
   2dc40:	pop	{r4, r5, r6, r7, r8, pc}
   2dc44:	sub	r2, r6, r4
   2dc48:	cmp	r2, #1
   2dc4c:	ble	2dc60 <flatcc_json_parser_match_constant@@Base+0x94>
   2dc50:	ldrb	r3, [r1, r3]
   2dc54:	cmp	r3, #32
   2dc58:	bhi	2ddbc <flatcc_json_parser_match_constant@@Base+0x1f0>
   2dc5c:	beq	2dcd8 <flatcc_json_parser_match_constant@@Base+0x10c>
   2dc60:	mov	r2, r6
   2dc64:	mov	r1, r4
   2dc68:	mov	r0, ip
   2dc6c:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2dc70:	cmp	r6, r0
   2dc74:	beq	2ddc8 <flatcc_json_parser_match_constant@@Base+0x1fc>
   2dc78:	cmp	r4, r0
   2dc7c:	beq	2dcac <flatcc_json_parser_match_constant@@Base+0xe0>
   2dc80:	ldrb	r3, [r0]
   2dc84:	cmp	r3, #95	; 0x5f
   2dc88:	movne	r2, #0
   2dc8c:	moveq	r2, #1
   2dc90:	orrs	r2, r2, r3, lsr #7
   2dc94:	bne	2dcec <flatcc_json_parser_match_constant@@Base+0x120>
   2dc98:	orr	r3, r3, #32
   2dc9c:	sub	r3, r3, #97	; 0x61
   2dca0:	uxtb	r3, r3
   2dca4:	cmp	r3, #25
   2dca8:	bls	2dcf8 <flatcc_json_parser_match_constant@@Base+0x12c>
   2dcac:	mov	r3, #0
   2dcb0:	str	r3, [r5]
   2dcb4:	ldrb	r2, [r0]
   2dcb8:	and	r3, r2, #223	; 0xdf
   2dcbc:	cmp	r2, #44	; 0x2c
   2dcc0:	cmpne	r3, #93	; 0x5d
   2dcc4:	moveq	r3, #1
   2dcc8:	movne	r3, #0
   2dccc:	cmp	r3, #0
   2dcd0:	moveq	r0, r7
   2dcd4:	pop	{r4, r5, r6, r7, r8, pc}
   2dcd8:	ldrb	r3, [r4, #1]
   2dcdc:	cmp	r3, #32
   2dce0:	addhi	r0, r4, #1
   2dce4:	bls	2dc60 <flatcc_json_parser_match_constant@@Base+0x94>
   2dce8:	b	2dc70 <flatcc_json_parser_match_constant@@Base+0xa4>
   2dcec:	mov	r3, #1
   2dcf0:	str	r3, [r5]
   2dcf4:	pop	{r4, r5, r6, r7, r8, pc}
   2dcf8:	mov	r3, #1
   2dcfc:	str	r3, [r5]
   2dd00:	pop	{r4, r5, r6, r7, r8, pc}
   2dd04:	add	r3, r4, #1
   2dd08:	cmp	r6, r3
   2dd0c:	beq	2ddd8 <flatcc_json_parser_match_constant@@Base+0x20c>
   2dd10:	ldrb	r2, [r4, #1]
   2dd14:	cmp	r2, #32
   2dd18:	bne	2ddec <flatcc_json_parser_match_constant@@Base+0x220>
   2dd1c:	add	r3, r4, #2
   2dd20:	mov	r2, r6
   2dd24:	mov	r4, r3
   2dd28:	cmp	r2, r3
   2dd2c:	beq	2dddc <flatcc_json_parser_match_constant@@Base+0x210>
   2dd30:	add	r3, r3, #1
   2dd34:	ldrb	r1, [r4]
   2dd38:	cmp	r1, #32
   2dd3c:	beq	2dd24 <flatcc_json_parser_match_constant@@Base+0x158>
   2dd40:	ldrb	r3, [r4]
   2dd44:	cmp	r3, #34	; 0x22
   2dd48:	beq	2dd5c <flatcc_json_parser_match_constant@@Base+0x190>
   2dd4c:	mov	r3, #1
   2dd50:	str	r3, [r5]
   2dd54:	mov	r0, r4
   2dd58:	pop	{r4, r5, r6, r7, r8, pc}
   2dd5c:	add	r0, r4, #1
   2dd60:	rsb	r3, r0, #0
   2dd64:	cmp	r3, #1
   2dd68:	ble	2dd7c <flatcc_json_parser_match_constant@@Base+0x1b0>
   2dd6c:	ldrb	r3, [r4, #1]
   2dd70:	cmp	r3, #32
   2dd74:	bhi	2dd8c <flatcc_json_parser_match_constant@@Base+0x1c0>
   2dd78:	beq	2dd98 <flatcc_json_parser_match_constant@@Base+0x1cc>
   2dd7c:	mov	r2, #0
   2dd80:	mov	r1, r0
   2dd84:	mov	r0, ip
   2dd88:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2dd8c:	mov	r3, #0
   2dd90:	str	r3, [r5]
   2dd94:	pop	{r4, r5, r6, r7, r8, pc}
   2dd98:	ldrb	r3, [r4, #2]
   2dd9c:	cmp	r3, #32
   2dda0:	addhi	r0, r4, #2
   2dda4:	bls	2dd7c <flatcc_json_parser_match_constant@@Base+0x1b0>
   2dda8:	b	2dd8c <flatcc_json_parser_match_constant@@Base+0x1c0>
   2ddac:	mov	r3, #0
   2ddb0:	str	r3, [r5]
   2ddb4:	mov	r0, r1
   2ddb8:	pop	{r4, r5, r6, r7, r8, pc}
   2ddbc:	cmp	r4, r6
   2ddc0:	movne	r0, r4
   2ddc4:	bne	2dcac <flatcc_json_parser_match_constant@@Base+0xe0>
   2ddc8:	mov	r3, #0
   2ddcc:	str	r3, [r5]
   2ddd0:	mov	r0, r6
   2ddd4:	pop	{r4, r5, r6, r7, r8, pc}
   2ddd8:	mov	r4, r3
   2dddc:	mov	r3, #0
   2dde0:	str	r3, [r5]
   2dde4:	mov	r0, r4
   2dde8:	pop	{r4, r5, r6, r7, r8, pc}
   2ddec:	mov	r4, r3
   2ddf0:	b	2dd40 <flatcc_json_parser_match_constant@@Base+0x174>

0002ddf4 <flatcc_json_parser_double@@Base>:
   2ddf4:	push	{r4, r5, r6, r7, r8, lr}
   2ddf8:	mov	r4, #0
   2ddfc:	mov	r5, #0
   2de00:	strd	r4, [r3]
   2de04:	cmp	r1, r2
   2de08:	beq	2de9c <flatcc_json_parser_double@@Base+0xa8>
   2de0c:	ldrb	ip, [r1]
   2de10:	cmp	ip, #45	; 0x2d
   2de14:	addeq	ip, r1, #1
   2de18:	movne	ip, r1
   2de1c:	mov	r6, r3
   2de20:	mov	r5, r2
   2de24:	mov	r4, r1
   2de28:	mov	r7, r0
   2de2c:	sub	r3, r2, ip
   2de30:	cmp	r3, #1
   2de34:	ble	2de4c <flatcc_json_parser_double@@Base+0x58>
   2de38:	ldrb	r3, [ip]
   2de3c:	cmp	r3, #46	; 0x2e
   2de40:	beq	2deb0 <flatcc_json_parser_double@@Base+0xbc>
   2de44:	cmp	r3, #48	; 0x30
   2de48:	beq	2dea4 <flatcc_json_parser_double@@Base+0xb0>
   2de4c:	mov	r2, r6
   2de50:	sub	r1, r5, r4
   2de54:	mov	r0, r4
   2de58:	bl	2c070 <grisu3_diy_fp_encode_double@@Base+0x4e8>
   2de5c:	mov	r2, r0
   2de60:	cmp	r4, r0
   2de64:	cmpne	r0, #0
   2de68:	bne	2de9c <flatcc_json_parser_double@@Base+0xa8>
   2de6c:	vldr	d7, [r6]
   2de70:	vabs.f64	d7, d7
   2de74:	vldr	d6, [pc, #84]	; 2ded0 <flatcc_json_parser_double@@Base+0xdc>
   2de78:	vcmp.f64	d7, d6
   2de7c:	vmrs	APSR_nzcv, fpscr
   2de80:	movgt	r3, #7
   2de84:	movle	r3, #6
   2de88:	mov	r2, r5
   2de8c:	mov	r1, r4
   2de90:	mov	r0, r7
   2de94:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2de98:	mov	r2, r0
   2de9c:	mov	r0, r2
   2dea0:	pop	{r4, r5, r6, r7, r8, pc}
   2dea4:	ldrb	r3, [ip, #1]
   2dea8:	cmp	r3, #48	; 0x30
   2deac:	bne	2de4c <flatcc_json_parser_double@@Base+0x58>
   2deb0:	mov	r3, #6
   2deb4:	mov	r2, r5
   2deb8:	mov	r1, r4
   2debc:	mov	r0, r7
   2dec0:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2dec4:	mov	r2, r0
   2dec8:	b	2de9c <flatcc_json_parser_double@@Base+0xa8>
   2decc:	nop			; (mov r0, r0)
   2ded0:			; <UNDEFINED> instruction: 0xffffffff
   2ded4:	svcvc	0x00efffff

0002ded8 <flatcc_json_parser_float@@Base>:
   2ded8:	mov	ip, #0
   2dedc:	str	ip, [r3]
   2dee0:	cmp	r1, r2
   2dee4:	beq	2dff4 <flatcc_json_parser_float@@Base+0x11c>
   2dee8:	push	{r4, r5, r6, r7, lr}
   2deec:	sub	sp, sp, #12
   2def0:	ldrb	ip, [r1]
   2def4:	cmp	ip, #45	; 0x2d
   2def8:	addeq	ip, r1, #1
   2defc:	movne	ip, r1
   2df00:	mov	r6, r3
   2df04:	mov	r5, r2
   2df08:	mov	r4, r1
   2df0c:	mov	r7, r0
   2df10:	sub	r3, r2, ip
   2df14:	cmp	r3, #1
   2df18:	ble	2df30 <flatcc_json_parser_float@@Base+0x58>
   2df1c:	ldrb	r3, [ip]
   2df20:	cmp	r3, #46	; 0x2e
   2df24:	beq	2dfb0 <flatcc_json_parser_float@@Base+0xd8>
   2df28:	cmp	r3, #48	; 0x30
   2df2c:	beq	2dfa4 <flatcc_json_parser_float@@Base+0xcc>
   2df30:	mov	r2, sp
   2df34:	sub	r1, r5, r4
   2df38:	mov	r0, r4
   2df3c:	bl	2c070 <grisu3_diy_fp_encode_double@@Base+0x4e8>
   2df40:	vldr	d6, [sp]
   2df44:	vcvt.f32.f64	s15, d6
   2df48:	vstr	s15, [r6]
   2df4c:	vabs.f32	s15, s15
   2df50:	vldr	s14, [pc, #164]	; 2dffc <flatcc_json_parser_float@@Base+0x124>
   2df54:	vcmp.f32	s15, s14
   2df58:	vmrs	APSR_nzcv, fpscr
   2df5c:	ble	2dfc8 <flatcc_json_parser_float@@Base+0xf0>
   2df60:	vcmpe.f64	d6, #0.0
   2df64:	vmrs	APSR_nzcv, fpscr
   2df68:	vldr	s14, [pc, #144]	; 2e000 <flatcc_json_parser_float@@Base+0x128>
   2df6c:	vldr	s15, [pc, #144]	; 2e004 <flatcc_json_parser_float@@Base+0x12c>
   2df70:	vmovpl.f32	s15, s14
   2df74:	vstr	s15, [r6]
   2df78:	vabs.f32	s15, s15
   2df7c:	vldr	s14, [pc, #120]	; 2dffc <flatcc_json_parser_float@@Base+0x124>
   2df80:	vcmp.f32	s15, s14
   2df84:	vmrs	APSR_nzcv, fpscr
   2df88:	bgt	2dfdc <flatcc_json_parser_float@@Base+0x104>
   2df8c:	mov	r3, #6
   2df90:	mov	r2, r5
   2df94:	mov	r1, r4
   2df98:	mov	r0, r7
   2df9c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2dfa0:	b	2dfd4 <flatcc_json_parser_float@@Base+0xfc>
   2dfa4:	ldrb	r3, [ip, #1]
   2dfa8:	cmp	r3, #48	; 0x30
   2dfac:	bne	2df30 <flatcc_json_parser_float@@Base+0x58>
   2dfb0:	mov	r3, #6
   2dfb4:	mov	r2, r5
   2dfb8:	mov	r1, r4
   2dfbc:	mov	r0, r7
   2dfc0:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2dfc4:	b	2dfd4 <flatcc_json_parser_float@@Base+0xfc>
   2dfc8:	cmp	r4, r0
   2dfcc:	cmpne	r0, #0
   2dfd0:	beq	2df8c <flatcc_json_parser_float@@Base+0xb4>
   2dfd4:	add	sp, sp, #12
   2dfd8:	pop	{r4, r5, r6, r7, pc}
   2dfdc:	mov	r3, #7
   2dfe0:	mov	r2, r5
   2dfe4:	mov	r1, r4
   2dfe8:	mov	r0, r7
   2dfec:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2dff0:	b	2dfd4 <flatcc_json_parser_float@@Base+0xfc>
   2dff4:	mov	r0, r2
   2dff8:	bx	lr
   2dffc:	svcvc	0x007fffff
   2e000:	svcvc	0x00800000
   2e004:			; <UNDEFINED> instruction: 0xff800000

0002e008 <flatcc_json_parser_generic_json@@Base>:
   2e008:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e00c:	sub	sp, sp, #524	; 0x20c
   2e010:	mov	r5, r2
   2e014:	cmp	r1, r2
   2e018:	beq	2e9e0 <flatcc_json_parser_generic_json@@Base+0x9d8>
   2e01c:	mov	r8, r0
   2e020:	mov	r4, r1
   2e024:	add	r6, sp, #8
   2e028:	mov	r7, r6
   2e02c:	mov	sl, #10
   2e030:	mov	fp, #125	; 0x7d
   2e034:	b	2e8c4 <flatcc_json_parser_generic_json@@Base+0x8bc>
   2e038:	ldrb	r3, [r4]
   2e03c:	cmp	r3, #34	; 0x22
   2e040:	addeq	r4, r4, #1
   2e044:	moveq	r3, #0
   2e048:	streq	r3, [r8, #12]
   2e04c:	beq	2e0a0 <flatcc_json_parser_generic_json@@Base+0x98>
   2e050:	cmp	r3, #46	; 0x2e
   2e054:	movne	r3, #1
   2e058:	strne	r3, [r8, #12]
   2e05c:	beq	2e07c <flatcc_json_parser_generic_json@@Base+0x74>
   2e060:	cmp	r5, r4
   2e064:	beq	2e224 <flatcc_json_parser_generic_json@@Base+0x21c>
   2e068:	ldrb	r3, [r4]
   2e06c:	cmp	r3, #32
   2e070:	bls	2eb14 <flatcc_json_parser_generic_json@@Base+0xb0c>
   2e074:	add	r4, r4, #1
   2e078:	b	2e0dc <flatcc_json_parser_generic_json@@Base+0xd4>
   2e07c:	mov	r3, #5
   2e080:	mov	r2, r5
   2e084:	mov	r1, r4
   2e088:	mov	r0, r8
   2e08c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2e090:	mov	r4, r0
   2e094:	ldr	r3, [r8, #12]
   2e098:	cmp	r3, #0
   2e09c:	bne	2e060 <flatcc_json_parser_generic_json@@Base+0x58>
   2e0a0:	cmp	r5, r4
   2e0a4:	beq	2e20c <flatcc_json_parser_generic_json@@Base+0x204>
   2e0a8:	ldrb	r3, [r4]
   2e0ac:	cmp	r3, #34	; 0x22
   2e0b0:	bne	2e1dc <flatcc_json_parser_generic_json@@Base+0x1d4>
   2e0b4:	add	r0, r4, #1
   2e0b8:	b	2e12c <flatcc_json_parser_generic_json@@Base+0x124>
   2e0bc:	mov	r0, r4
   2e0c0:	cmp	r5, r0
   2e0c4:	beq	2e120 <flatcc_json_parser_generic_json@@Base+0x118>
   2e0c8:	ldrb	r2, [r0]
   2e0cc:	add	r4, r4, #1
   2e0d0:	cmp	r2, #32
   2e0d4:	bls	2e124 <flatcc_json_parser_generic_json@@Base+0x11c>
   2e0d8:	mov	r3, r2
   2e0dc:	sub	r0, r4, #1
   2e0e0:	cmp	r3, #46	; 0x2e
   2e0e4:	cmpne	r3, #95	; 0x5f
   2e0e8:	beq	2e0bc <flatcc_json_parser_generic_json@@Base+0xb4>
   2e0ec:	tst	r3, #128	; 0x80
   2e0f0:	bne	2e0bc <flatcc_json_parser_generic_json@@Base+0xb4>
   2e0f4:	sub	r2, r3, #48	; 0x30
   2e0f8:	uxtb	r2, r2
   2e0fc:	cmp	r2, #9
   2e100:	bls	2e0bc <flatcc_json_parser_generic_json@@Base+0xb4>
   2e104:	orr	r2, r3, #32
   2e108:	sub	r2, r2, #97	; 0x61
   2e10c:	uxtb	r2, r2
   2e110:	cmp	r2, #25
   2e114:	bhi	2e124 <flatcc_json_parser_generic_json@@Base+0x11c>
   2e118:	mov	r0, r4
   2e11c:	b	2e0c0 <flatcc_json_parser_generic_json@@Base+0xb8>
   2e120:	mov	r0, r5
   2e124:	cmp	r3, #46	; 0x2e
   2e128:	beq	2e1ac <flatcc_json_parser_generic_json@@Base+0x1a4>
   2e12c:	mov	r9, r5
   2e130:	sub	r3, r5, r0
   2e134:	cmp	r3, #1
   2e138:	ble	2e150 <flatcc_json_parser_generic_json@@Base+0x148>
   2e13c:	ldrb	r3, [r0]
   2e140:	cmp	r3, #32
   2e144:	bhi	2e160 <flatcc_json_parser_generic_json@@Base+0x158>
   2e148:	cmp	r3, #32
   2e14c:	beq	2e22c <flatcc_json_parser_generic_json@@Base+0x224>
   2e150:	mov	r2, r5
   2e154:	mov	r1, r0
   2e158:	mov	r0, r8
   2e15c:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2e160:	cmp	r5, r0
   2e164:	beq	2e240 <flatcc_json_parser_generic_json@@Base+0x238>
   2e168:	ldrb	r3, [r0]
   2e16c:	cmp	r3, #58	; 0x3a
   2e170:	bne	2e258 <flatcc_json_parser_generic_json@@Base+0x250>
   2e174:	add	r4, r0, #1
   2e178:	sub	r9, r9, r4
   2e17c:	cmp	r9, #1
   2e180:	ble	2e194 <flatcc_json_parser_generic_json@@Base+0x18c>
   2e184:	ldrb	r3, [r0, #1]
   2e188:	cmp	r3, #32
   2e18c:	bhi	2e8d8 <flatcc_json_parser_generic_json@@Base+0x8d0>
   2e190:	beq	2e270 <flatcc_json_parser_generic_json@@Base+0x268>
   2e194:	mov	r2, r5
   2e198:	mov	r1, r4
   2e19c:	mov	r0, r8
   2e1a0:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2e1a4:	mov	r4, r0
   2e1a8:	b	2e8d8 <flatcc_json_parser_generic_json@@Base+0x8d0>
   2e1ac:	mov	r3, #5
   2e1b0:	mov	r2, r5
   2e1b4:	mov	r1, r0
   2e1b8:	mov	r0, r8
   2e1bc:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2e1c0:	b	2e12c <flatcc_json_parser_generic_json@@Base+0x124>
   2e1c4:	add	r4, r3, #1
   2e1c8:	cmp	r5, r4
   2e1cc:	beq	2e9f0 <flatcc_json_parser_generic_json@@Base+0x9e8>
   2e1d0:	ldrb	r3, [r3, #1]
   2e1d4:	cmp	r3, #34	; 0x22
   2e1d8:	beq	2e200 <flatcc_json_parser_generic_json@@Base+0x1f8>
   2e1dc:	cmp	r3, #92	; 0x5c
   2e1e0:	movne	r3, r4
   2e1e4:	bne	2e1c4 <flatcc_json_parser_generic_json@@Base+0x1bc>
   2e1e8:	sub	r3, r5, r4
   2e1ec:	cmp	r3, #1
   2e1f0:	addgt	r3, r4, #1
   2e1f4:	bgt	2e1c4 <flatcc_json_parser_generic_json@@Base+0x1bc>
   2e1f8:	cmp	r5, r4
   2e1fc:	beq	2e20c <flatcc_json_parser_generic_json@@Base+0x204>
   2e200:	ldrb	r3, [r4]
   2e204:	cmp	r3, #34	; 0x22
   2e208:	beq	2e0b4 <flatcc_json_parser_generic_json@@Base+0xac>
   2e20c:	mov	r3, #20
   2e210:	mov	r2, r5
   2e214:	mov	r1, r4
   2e218:	mov	r0, r8
   2e21c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2e220:	b	2e12c <flatcc_json_parser_generic_json@@Base+0x124>
   2e224:	mov	r0, r4
   2e228:	b	2e12c <flatcc_json_parser_generic_json@@Base+0x124>
   2e22c:	ldrb	r3, [r0, #1]
   2e230:	cmp	r3, #32
   2e234:	addhi	r0, r0, #1
   2e238:	bls	2e150 <flatcc_json_parser_generic_json@@Base+0x148>
   2e23c:	b	2e160 <flatcc_json_parser_generic_json@@Base+0x158>
   2e240:	mov	r3, #10
   2e244:	mov	r2, r5
   2e248:	mov	r1, r0
   2e24c:	mov	r0, r8
   2e250:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2e254:	b	2e9d8 <flatcc_json_parser_generic_json@@Base+0x9d0>
   2e258:	mov	r3, #4
   2e25c:	mov	r2, r5
   2e260:	mov	r1, r0
   2e264:	mov	r0, r8
   2e268:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2e26c:	b	2e9d8 <flatcc_json_parser_generic_json@@Base+0x9d0>
   2e270:	ldrb	r3, [r0, #2]
   2e274:	cmp	r3, #32
   2e278:	addhi	r4, r0, #2
   2e27c:	bls	2e194 <flatcc_json_parser_generic_json@@Base+0x18c>
   2e280:	b	2e8d8 <flatcc_json_parser_generic_json@@Base+0x8d0>
   2e284:	cmp	r3, #91	; 0x5b
   2e288:	beq	2e55c <flatcc_json_parser_generic_json@@Base+0x554>
   2e28c:	cmp	r3, #123	; 0x7b
   2e290:	bne	2e8fc <flatcc_json_parser_generic_json@@Base+0x8f4>
   2e294:	add	r3, sp, #520	; 0x208
   2e298:	cmp	r6, r3
   2e29c:	beq	2e5f8 <flatcc_json_parser_generic_json@@Base+0x5f0>
   2e2a0:	add	r9, r6, #1
   2e2a4:	strb	fp, [r6]
   2e2a8:	add	r1, r4, #1
   2e2ac:	sub	r3, r5, r1
   2e2b0:	cmp	r3, #1
   2e2b4:	ble	2e2cc <flatcc_json_parser_generic_json@@Base+0x2c4>
   2e2b8:	ldrb	r3, [r4, #1]
   2e2bc:	cmp	r3, #32
   2e2c0:	movhi	r4, r1
   2e2c4:	bhi	2e2dc <flatcc_json_parser_generic_json@@Base+0x2d4>
   2e2c8:	beq	2e610 <flatcc_json_parser_generic_json@@Base+0x608>
   2e2cc:	mov	r2, r5
   2e2d0:	mov	r0, r8
   2e2d4:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2e2d8:	mov	r4, r0
   2e2dc:	cmp	r5, r4
   2e2e0:	beq	2e9e8 <flatcc_json_parser_generic_json@@Base+0x9e0>
   2e2e4:	ldrb	r3, [r4]
   2e2e8:	cmp	r3, #125	; 0x7d
   2e2ec:	movne	r6, r9
   2e2f0:	bne	2e8c4 <flatcc_json_parser_generic_json@@Base+0x8bc>
   2e2f4:	mov	r6, r9
   2e2f8:	mov	r0, r4
   2e2fc:	b	2e7e0 <flatcc_json_parser_generic_json@@Base+0x7d8>
   2e300:	cmp	r5, r4
   2e304:	addne	r0, r4, #1
   2e308:	bne	2e320 <flatcc_json_parser_generic_json@@Base+0x318>
   2e30c:	mov	r3, #16
   2e310:	mov	r2, r4
   2e314:	mov	r1, r5
   2e318:	mov	r0, r8
   2e31c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2e320:	cmp	r5, r0
   2e324:	beq	2eab0 <flatcc_json_parser_generic_json@@Base+0xaa8>
   2e328:	ldrb	r3, [r0]
   2e32c:	cmp	r3, #34	; 0x22
   2e330:	bne	2e360 <flatcc_json_parser_generic_json@@Base+0x358>
   2e334:	b	2e384 <flatcc_json_parser_generic_json@@Base+0x37c>
   2e338:	add	r3, sp, #4
   2e33c:	mov	r2, r5
   2e340:	mov	r1, r0
   2e344:	mov	r0, r8
   2e348:	bl	2d5c0 <flatcc_json_parser_string_escape@@Base>
   2e34c:	cmp	r5, r0
   2e350:	beq	2eaac <flatcc_json_parser_generic_json@@Base+0xaa4>
   2e354:	ldrb	r3, [r0]
   2e358:	cmp	r3, #34	; 0x22
   2e35c:	beq	2e384 <flatcc_json_parser_generic_json@@Base+0x37c>
   2e360:	mov	r2, r5
   2e364:	mov	r1, r0
   2e368:	mov	r0, r8
   2e36c:	bl	2cdfc <flatcc_json_parser_string_part@@Base>
   2e370:	cmp	r5, r0
   2e374:	beq	2e338 <flatcc_json_parser_generic_json@@Base+0x330>
   2e378:	ldrb	r3, [r0]
   2e37c:	cmp	r3, #34	; 0x22
   2e380:	bne	2e338 <flatcc_json_parser_generic_json@@Base+0x330>
   2e384:	add	r0, r0, #1
   2e388:	b	2e7e0 <flatcc_json_parser_generic_json@@Base+0x7d8>
   2e38c:	add	r4, r4, #1
   2e390:	cmp	r5, r4
   2e394:	bne	2ea2c <flatcc_json_parser_generic_json@@Base+0xa24>
   2e398:	mov	r3, #6
   2e39c:	mov	r2, r5
   2e3a0:	mov	r1, r4
   2e3a4:	mov	r0, r8
   2e3a8:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2e3ac:	b	2e7e0 <flatcc_json_parser_generic_json@@Base+0x7d8>
   2e3b0:	add	r0, r4, #1
   2e3b4:	cmp	r5, r0
   2e3b8:	beq	2e538 <flatcc_json_parser_generic_json@@Base+0x530>
   2e3bc:	ldrb	r3, [r0]
   2e3c0:	cmp	r3, #46	; 0x2e
   2e3c4:	beq	2e47c <flatcc_json_parser_generic_json@@Base+0x474>
   2e3c8:	ldrb	r3, [r0]
   2e3cc:	and	r3, r3, #223	; 0xdf
   2e3d0:	cmp	r3, #69	; 0x45
   2e3d4:	bne	2eadc <flatcc_json_parser_generic_json@@Base+0xad4>
   2e3d8:	add	r1, r0, #1
   2e3dc:	cmp	r5, r1
   2e3e0:	beq	2e4f8 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e3e4:	ldrb	r3, [r0, #1]
   2e3e8:	sub	r3, r3, #43	; 0x2b
   2e3ec:	tst	r3, #253	; 0xfd
   2e3f0:	bne	2e400 <flatcc_json_parser_generic_json@@Base+0x3f8>
   2e3f4:	add	r1, r0, #2
   2e3f8:	cmp	r5, r1
   2e3fc:	beq	2e50c <flatcc_json_parser_generic_json@@Base+0x504>
   2e400:	ldrb	r3, [r1]
   2e404:	sub	r3, r3, #48	; 0x30
   2e408:	uxtb	r3, r3
   2e40c:	cmp	r3, #9
   2e410:	bhi	2e50c <flatcc_json_parser_generic_json@@Base+0x504>
   2e414:	add	r0, r1, #1
   2e418:	cmp	r5, r0
   2e41c:	beq	2e538 <flatcc_json_parser_generic_json@@Base+0x530>
   2e420:	ldrb	r3, [r1, #1]
   2e424:	sub	r3, r3, #48	; 0x30
   2e428:	uxtb	r3, r3
   2e42c:	cmp	r3, #9
   2e430:	bhi	2eadc <flatcc_json_parser_generic_json@@Base+0xad4>
   2e434:	add	r2, r1, #2
   2e438:	mov	r1, r5
   2e43c:	mov	r0, r2
   2e440:	cmp	r1, r2
   2e444:	beq	2e538 <flatcc_json_parser_generic_json@@Base+0x530>
   2e448:	add	r2, r2, #1
   2e44c:	ldrb	r3, [r0]
   2e450:	sub	r3, r3, #48	; 0x30
   2e454:	uxtb	r3, r3
   2e458:	cmp	r3, #9
   2e45c:	bls	2e43c <flatcc_json_parser_generic_json@@Base+0x434>
   2e460:	b	2eadc <flatcc_json_parser_generic_json@@Base+0xad4>
   2e464:	mov	r3, #6
   2e468:	mov	r2, r5
   2e46c:	mov	r1, r4
   2e470:	mov	r0, r8
   2e474:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2e478:	b	2e7e0 <flatcc_json_parser_generic_json@@Base+0x7d8>
   2e47c:	ldrb	r3, [r0, #1]
   2e480:	sub	r3, r3, #48	; 0x30
   2e484:	uxtb	r3, r3
   2e488:	cmp	r3, #9
   2e48c:	bhi	2e4e0 <flatcc_json_parser_generic_json@@Base+0x4d8>
   2e490:	add	r2, r0, #2
   2e494:	cmp	r5, r2
   2e498:	beq	2eb34 <flatcc_json_parser_generic_json@@Base+0xb2c>
   2e49c:	ldrb	r3, [r0, #2]
   2e4a0:	sub	r3, r3, #48	; 0x30
   2e4a4:	uxtb	r3, r3
   2e4a8:	cmp	r3, #9
   2e4ac:	bhi	2eb0c <flatcc_json_parser_generic_json@@Base+0xb04>
   2e4b0:	add	r2, r0, #3
   2e4b4:	mov	r1, r5
   2e4b8:	mov	r0, r2
   2e4bc:	cmp	r1, r2
   2e4c0:	beq	2ead4 <flatcc_json_parser_generic_json@@Base+0xacc>
   2e4c4:	add	r2, r2, #1
   2e4c8:	ldrb	r3, [r0]
   2e4cc:	sub	r3, r3, #48	; 0x30
   2e4d0:	uxtb	r3, r3
   2e4d4:	cmp	r3, #9
   2e4d8:	bls	2e4b8 <flatcc_json_parser_generic_json@@Base+0x4b0>
   2e4dc:	b	2e3c8 <flatcc_json_parser_generic_json@@Base+0x3c0>
   2e4e0:	mov	r3, #6
   2e4e4:	mov	r2, r5
   2e4e8:	add	r1, r0, #1
   2e4ec:	mov	r0, r8
   2e4f0:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2e4f4:	b	2e7e0 <flatcc_json_parser_generic_json@@Base+0x7d8>
   2e4f8:	mov	r3, #6
   2e4fc:	mov	r2, r5
   2e500:	mov	r0, r8
   2e504:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2e508:	b	2e7e0 <flatcc_json_parser_generic_json@@Base+0x7d8>
   2e50c:	mov	r3, #6
   2e510:	mov	r2, r5
   2e514:	mov	r0, r8
   2e518:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2e51c:	b	2e7e0 <flatcc_json_parser_generic_json@@Base+0x7d8>
   2e520:	cmp	r3, #9
   2e524:	bcc	2e538 <flatcc_json_parser_generic_json@@Base+0x530>
   2e528:	cmp	r3, #11
   2e52c:	bls	2e7e0 <flatcc_json_parser_generic_json@@Base+0x7d8>
   2e530:	cmp	r3, #13
   2e534:	beq	2e7e0 <flatcc_json_parser_generic_json@@Base+0x7d8>
   2e538:	mov	r3, #6
   2e53c:	mov	r2, r5
   2e540:	mov	r1, r0
   2e544:	mov	r0, r8
   2e548:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2e54c:	b	2e7e0 <flatcc_json_parser_generic_json@@Base+0x7d8>
   2e550:	cmp	r3, #44	; 0x2c
   2e554:	bne	2e538 <flatcc_json_parser_generic_json@@Base+0x530>
   2e558:	b	2e7e0 <flatcc_json_parser_generic_json@@Base+0x7d8>
   2e55c:	add	r3, sp, #520	; 0x208
   2e560:	cmp	r6, r3
   2e564:	beq	2e5cc <flatcc_json_parser_generic_json@@Base+0x5c4>
   2e568:	add	r9, r6, #1
   2e56c:	mov	r3, #93	; 0x5d
   2e570:	strb	r3, [r6]
   2e574:	add	r1, r4, #1
   2e578:	sub	r3, r5, r1
   2e57c:	cmp	r3, #1
   2e580:	ble	2e598 <flatcc_json_parser_generic_json@@Base+0x590>
   2e584:	ldrb	r3, [r4, #1]
   2e588:	cmp	r3, #32
   2e58c:	movhi	r4, r1
   2e590:	bhi	2e5a8 <flatcc_json_parser_generic_json@@Base+0x5a0>
   2e594:	beq	2e5e4 <flatcc_json_parser_generic_json@@Base+0x5dc>
   2e598:	mov	r2, r5
   2e59c:	mov	r0, r8
   2e5a0:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2e5a4:	mov	r4, r0
   2e5a8:	cmp	r5, r4
   2e5ac:	beq	2e9e8 <flatcc_json_parser_generic_json@@Base+0x9e0>
   2e5b0:	ldrb	r3, [r4]
   2e5b4:	cmp	r3, #93	; 0x5d
   2e5b8:	movne	r6, r9
   2e5bc:	bne	2e8c4 <flatcc_json_parser_generic_json@@Base+0x8bc>
   2e5c0:	mov	r6, r9
   2e5c4:	mov	r0, r4
   2e5c8:	b	2e7e0 <flatcc_json_parser_generic_json@@Base+0x7d8>
   2e5cc:	mov	r3, #2
   2e5d0:	mov	r2, r5
   2e5d4:	mov	r1, r4
   2e5d8:	mov	r0, r8
   2e5dc:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2e5e0:	b	2e9d8 <flatcc_json_parser_generic_json@@Base+0x9d0>
   2e5e4:	ldrb	r3, [r4, #2]
   2e5e8:	cmp	r3, #32
   2e5ec:	addhi	r4, r4, #2
   2e5f0:	bls	2e598 <flatcc_json_parser_generic_json@@Base+0x590>
   2e5f4:	b	2e5a8 <flatcc_json_parser_generic_json@@Base+0x5a0>
   2e5f8:	mov	r3, #2
   2e5fc:	mov	r2, r5
   2e600:	mov	r1, r4
   2e604:	mov	r0, r8
   2e608:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2e60c:	b	2e9d8 <flatcc_json_parser_generic_json@@Base+0x9d0>
   2e610:	ldrb	r3, [r4, #2]
   2e614:	cmp	r3, #32
   2e618:	addhi	r4, r4, #2
   2e61c:	bls	2e2cc <flatcc_json_parser_generic_json@@Base+0x2c4>
   2e620:	b	2e2dc <flatcc_json_parser_generic_json@@Base+0x2d4>
   2e624:	sub	r3, r5, r0
   2e628:	cmp	r3, #1
   2e62c:	ble	2e640 <flatcc_json_parser_generic_json@@Base+0x638>
   2e630:	ldrb	r3, [r0]
   2e634:	cmp	r3, #32
   2e638:	bhi	2e650 <flatcc_json_parser_generic_json@@Base+0x648>
   2e63c:	beq	2e684 <flatcc_json_parser_generic_json@@Base+0x67c>
   2e640:	mov	r2, r5
   2e644:	mov	r1, r0
   2e648:	mov	r0, r8
   2e64c:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2e650:	cmp	r5, r0
   2e654:	beq	2e7dc <flatcc_json_parser_generic_json@@Base+0x7d4>
   2e658:	ldrb	r3, [r0]
   2e65c:	cmp	r3, #44	; 0x2c
   2e660:	beq	2e6e0 <flatcc_json_parser_generic_json@@Base+0x6d8>
   2e664:	cmp	r3, #93	; 0x5d
   2e668:	beq	2e698 <flatcc_json_parser_generic_json@@Base+0x690>
   2e66c:	mov	r3, #9
   2e670:	mov	r2, r5
   2e674:	mov	r1, r0
   2e678:	mov	r0, r8
   2e67c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2e680:	b	2e7dc <flatcc_json_parser_generic_json@@Base+0x7d4>
   2e684:	ldrb	r3, [r0, #1]
   2e688:	cmp	r3, #32
   2e68c:	addhi	r0, r0, #1
   2e690:	bls	2e640 <flatcc_json_parser_generic_json@@Base+0x638>
   2e694:	b	2e650 <flatcc_json_parser_generic_json@@Base+0x648>
   2e698:	add	r1, r0, #1
   2e69c:	sub	r3, r5, r1
   2e6a0:	cmp	r3, #1
   2e6a4:	ble	2e6bc <flatcc_json_parser_generic_json@@Base+0x6b4>
   2e6a8:	ldrb	r3, [r0, #1]
   2e6ac:	cmp	r3, #32
   2e6b0:	movhi	r0, r1
   2e6b4:	bhi	2e7dc <flatcc_json_parser_generic_json@@Base+0x7d4>
   2e6b8:	beq	2e6cc <flatcc_json_parser_generic_json@@Base+0x6c4>
   2e6bc:	mov	r2, r5
   2e6c0:	mov	r0, r8
   2e6c4:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2e6c8:	b	2e7dc <flatcc_json_parser_generic_json@@Base+0x7d4>
   2e6cc:	ldrb	r3, [r0, #2]
   2e6d0:	cmp	r3, #32
   2e6d4:	addhi	r0, r0, #2
   2e6d8:	bls	2e6bc <flatcc_json_parser_generic_json@@Base+0x6b4>
   2e6dc:	b	2e7dc <flatcc_json_parser_generic_json@@Base+0x7d4>
   2e6e0:	add	r1, r0, #1
   2e6e4:	sub	r3, r5, r1
   2e6e8:	cmp	r3, #1
   2e6ec:	ble	2e700 <flatcc_json_parser_generic_json@@Base+0x6f8>
   2e6f0:	ldrb	r3, [r0, #1]
   2e6f4:	cmp	r3, #32
   2e6f8:	bhi	2e710 <flatcc_json_parser_generic_json@@Base+0x708>
   2e6fc:	beq	2e72c <flatcc_json_parser_generic_json@@Base+0x724>
   2e700:	mov	r2, r5
   2e704:	mov	r0, r8
   2e708:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2e70c:	mov	r1, r0
   2e710:	cmp	r5, r1
   2e714:	beq	2e740 <flatcc_json_parser_generic_json@@Base+0x738>
   2e718:	ldrb	r3, [r1]
   2e71c:	cmp	r3, #93	; 0x5d
   2e720:	beq	2e754 <flatcc_json_parser_generic_json@@Base+0x74c>
   2e724:	mov	r4, r1
   2e728:	b	2e8c4 <flatcc_json_parser_generic_json@@Base+0x8bc>
   2e72c:	ldrb	r3, [r0, #2]
   2e730:	cmp	r3, #32
   2e734:	addhi	r1, r0, #2
   2e738:	bls	2e700 <flatcc_json_parser_generic_json@@Base+0x6f8>
   2e73c:	b	2e710 <flatcc_json_parser_generic_json@@Base+0x708>
   2e740:	mov	r3, #9
   2e744:	mov	r2, r5
   2e748:	mov	r0, r8
   2e74c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2e750:	b	2e7dc <flatcc_json_parser_generic_json@@Base+0x7d4>
   2e754:	add	r0, r1, #1
   2e758:	sub	r3, r5, r0
   2e75c:	cmp	r3, #1
   2e760:	ble	2e774 <flatcc_json_parser_generic_json@@Base+0x76c>
   2e764:	ldrb	r3, [r1, #1]
   2e768:	cmp	r3, #32
   2e76c:	bhi	2e7dc <flatcc_json_parser_generic_json@@Base+0x7d4>
   2e770:	beq	2e788 <flatcc_json_parser_generic_json@@Base+0x780>
   2e774:	mov	r2, r5
   2e778:	mov	r1, r0
   2e77c:	mov	r0, r8
   2e780:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2e784:	b	2e7dc <flatcc_json_parser_generic_json@@Base+0x7d4>
   2e788:	ldrb	r3, [r1, #2]
   2e78c:	cmp	r3, #32
   2e790:	addhi	r0, r1, #2
   2e794:	bls	2e774 <flatcc_json_parser_generic_json@@Base+0x76c>
   2e798:	b	2e7dc <flatcc_json_parser_generic_json@@Base+0x7d4>
   2e79c:	mov	r2, r5
   2e7a0:	mov	r1, r0
   2e7a4:	mov	r0, r8
   2e7a8:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2e7ac:	cmp	r5, r0
   2e7b0:	beq	2e7dc <flatcc_json_parser_generic_json@@Base+0x7d4>
   2e7b4:	ldrb	r3, [r0]
   2e7b8:	cmp	r3, #44	; 0x2c
   2e7bc:	beq	2e87c <flatcc_json_parser_generic_json@@Base+0x874>
   2e7c0:	cmp	r3, #125	; 0x7d
   2e7c4:	beq	2e834 <flatcc_json_parser_generic_json@@Base+0x82c>
   2e7c8:	mov	r3, sl
   2e7cc:	mov	r2, r5
   2e7d0:	mov	r1, r0
   2e7d4:	mov	r0, r8
   2e7d8:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2e7dc:	mov	r6, r9
   2e7e0:	subs	r3, r6, r7
   2e7e4:	movne	r3, #1
   2e7e8:	cmp	r0, r5
   2e7ec:	cmpne	r6, r7
   2e7f0:	beq	2e9a4 <flatcc_json_parser_generic_json@@Base+0x99c>
   2e7f4:	sub	r9, r6, #1
   2e7f8:	ldrb	r3, [r6, #-1]
   2e7fc:	cmp	r3, #93	; 0x5d
   2e800:	beq	2e624 <flatcc_json_parser_generic_json@@Base+0x61c>
   2e804:	sub	r3, r5, r0
   2e808:	cmp	r3, #1
   2e80c:	ble	2e79c <flatcc_json_parser_generic_json@@Base+0x794>
   2e810:	ldrb	r3, [r0]
   2e814:	cmp	r3, #32
   2e818:	bhi	2e7ac <flatcc_json_parser_generic_json@@Base+0x7a4>
   2e81c:	bne	2e79c <flatcc_json_parser_generic_json@@Base+0x794>
   2e820:	ldrb	r3, [r0, #1]
   2e824:	cmp	r3, #32
   2e828:	addhi	r0, r0, #1
   2e82c:	bls	2e79c <flatcc_json_parser_generic_json@@Base+0x794>
   2e830:	b	2e7ac <flatcc_json_parser_generic_json@@Base+0x7a4>
   2e834:	add	r1, r0, #1
   2e838:	sub	r3, r5, r1
   2e83c:	cmp	r3, #1
   2e840:	ble	2e858 <flatcc_json_parser_generic_json@@Base+0x850>
   2e844:	ldrb	r3, [r0, #1]
   2e848:	cmp	r3, #32
   2e84c:	movhi	r0, r1
   2e850:	bhi	2e7dc <flatcc_json_parser_generic_json@@Base+0x7d4>
   2e854:	beq	2e868 <flatcc_json_parser_generic_json@@Base+0x860>
   2e858:	mov	r2, r5
   2e85c:	mov	r0, r8
   2e860:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2e864:	b	2e7dc <flatcc_json_parser_generic_json@@Base+0x7d4>
   2e868:	ldrb	r3, [r0, #2]
   2e86c:	cmp	r3, #32
   2e870:	addhi	r0, r0, #2
   2e874:	bls	2e858 <flatcc_json_parser_generic_json@@Base+0x850>
   2e878:	b	2e7dc <flatcc_json_parser_generic_json@@Base+0x7d4>
   2e87c:	add	r1, r0, #1
   2e880:	sub	r3, r5, r1
   2e884:	cmp	r3, #1
   2e888:	ble	2e89c <flatcc_json_parser_generic_json@@Base+0x894>
   2e88c:	ldrb	r3, [r0, #1]
   2e890:	cmp	r3, #32
   2e894:	bhi	2e8ac <flatcc_json_parser_generic_json@@Base+0x8a4>
   2e898:	beq	2e92c <flatcc_json_parser_generic_json@@Base+0x924>
   2e89c:	mov	r2, r5
   2e8a0:	mov	r0, r8
   2e8a4:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2e8a8:	mov	r1, r0
   2e8ac:	cmp	r5, r1
   2e8b0:	beq	2e940 <flatcc_json_parser_generic_json@@Base+0x938>
   2e8b4:	ldrb	r3, [r1]
   2e8b8:	cmp	r3, #125	; 0x7d
   2e8bc:	beq	2e954 <flatcc_json_parser_generic_json@@Base+0x94c>
   2e8c0:	mov	r4, r1
   2e8c4:	cmp	r6, r7
   2e8c8:	beq	2e9f8 <flatcc_json_parser_generic_json@@Base+0x9f0>
   2e8cc:	ldrb	r3, [r6, #-1]
   2e8d0:	cmp	r3, #125	; 0x7d
   2e8d4:	beq	2e038 <flatcc_json_parser_generic_json@@Base+0x30>
   2e8d8:	ldrb	r3, [r4]
   2e8dc:	cmp	r3, #57	; 0x39
   2e8e0:	bhi	2e284 <flatcc_json_parser_generic_json@@Base+0x27c>
   2e8e4:	cmp	r3, #48	; 0x30
   2e8e8:	bcs	2ea1c <flatcc_json_parser_generic_json@@Base+0xa14>
   2e8ec:	cmp	r3, #34	; 0x22
   2e8f0:	beq	2e300 <flatcc_json_parser_generic_json@@Base+0x2f8>
   2e8f4:	cmp	r3, #45	; 0x2d
   2e8f8:	beq	2ea1c <flatcc_json_parser_generic_json@@Base+0xa14>
   2e8fc:	mov	r2, r5
   2e900:	mov	r1, r4
   2e904:	mov	r0, r8
   2e908:	bl	2db00 <flatcc_json_parser_skip_constant@@Base>
   2e90c:	cmp	r0, r4
   2e910:	bne	2e7e0 <flatcc_json_parser_generic_json@@Base+0x7d8>
   2e914:	mov	r3, #5
   2e918:	mov	r2, r5
   2e91c:	mov	r1, r0
   2e920:	mov	r0, r8
   2e924:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2e928:	b	2e9d8 <flatcc_json_parser_generic_json@@Base+0x9d0>
   2e92c:	ldrb	r3, [r0, #2]
   2e930:	cmp	r3, #32
   2e934:	addhi	r1, r0, #2
   2e938:	bls	2e89c <flatcc_json_parser_generic_json@@Base+0x894>
   2e93c:	b	2e8ac <flatcc_json_parser_generic_json@@Base+0x8a4>
   2e940:	mov	r3, sl
   2e944:	mov	r2, r5
   2e948:	mov	r0, r8
   2e94c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2e950:	b	2e7dc <flatcc_json_parser_generic_json@@Base+0x7d4>
   2e954:	add	r0, r1, #1
   2e958:	sub	r3, r5, r0
   2e95c:	cmp	r3, #1
   2e960:	ble	2e974 <flatcc_json_parser_generic_json@@Base+0x96c>
   2e964:	ldrb	r3, [r1, #1]
   2e968:	cmp	r3, #32
   2e96c:	bhi	2e7dc <flatcc_json_parser_generic_json@@Base+0x7d4>
   2e970:	beq	2e988 <flatcc_json_parser_generic_json@@Base+0x980>
   2e974:	mov	r2, r5
   2e978:	mov	r1, r0
   2e97c:	mov	r0, r8
   2e980:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2e984:	b	2e7dc <flatcc_json_parser_generic_json@@Base+0x7d4>
   2e988:	ldrb	r3, [r1, #2]
   2e98c:	cmp	r3, #32
   2e990:	addhi	r0, r1, #2
   2e994:	bls	2e974 <flatcc_json_parser_generic_json@@Base+0x96c>
   2e998:	b	2e7dc <flatcc_json_parser_generic_json@@Base+0x7d4>
   2e99c:	mov	r0, r4
   2e9a0:	b	2e7e0 <flatcc_json_parser_generic_json@@Base+0x7d8>
   2e9a4:	cmp	r0, r5
   2e9a8:	movne	r3, #0
   2e9ac:	andeq	r3, r3, #1
   2e9b0:	cmp	r3, #0
   2e9b4:	beq	2e9d8 <flatcc_json_parser_generic_json@@Base+0x9d0>
   2e9b8:	ldrb	r3, [r6, #-1]
   2e9bc:	cmp	r3, #93	; 0x5d
   2e9c0:	moveq	r3, #9
   2e9c4:	movne	r3, #10
   2e9c8:	mov	r2, r5
   2e9cc:	mov	r1, r0
   2e9d0:	mov	r0, r8
   2e9d4:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2e9d8:	add	sp, sp, #524	; 0x20c
   2e9dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e9e0:	mov	r0, r2
   2e9e4:	b	2e9d8 <flatcc_json_parser_generic_json@@Base+0x9d0>
   2e9e8:	mov	r0, r5
   2e9ec:	b	2e9d8 <flatcc_json_parser_generic_json@@Base+0x9d0>
   2e9f0:	mov	r4, r5
   2e9f4:	b	2e20c <flatcc_json_parser_generic_json@@Base+0x204>
   2e9f8:	ldrb	r3, [r4]
   2e9fc:	cmp	r3, #57	; 0x39
   2ea00:	bhi	2ea98 <flatcc_json_parser_generic_json@@Base+0xa90>
   2ea04:	cmp	r3, #48	; 0x30
   2ea08:	bcs	2ea1c <flatcc_json_parser_generic_json@@Base+0xa14>
   2ea0c:	cmp	r3, #34	; 0x22
   2ea10:	beq	2e300 <flatcc_json_parser_generic_json@@Base+0x2f8>
   2ea14:	cmp	r3, #45	; 0x2d
   2ea18:	bne	2e8fc <flatcc_json_parser_generic_json@@Base+0x8f4>
   2ea1c:	cmp	r5, r4
   2ea20:	beq	2e99c <flatcc_json_parser_generic_json@@Base+0x994>
   2ea24:	cmp	r3, #45	; 0x2d
   2ea28:	beq	2e38c <flatcc_json_parser_generic_json@@Base+0x384>
   2ea2c:	ldrb	r3, [r4]
   2ea30:	cmp	r3, #48	; 0x30
   2ea34:	beq	2e3b0 <flatcc_json_parser_generic_json@@Base+0x3a8>
   2ea38:	sub	r3, r3, #49	; 0x31
   2ea3c:	uxtb	r3, r3
   2ea40:	cmp	r3, #8
   2ea44:	bhi	2e464 <flatcc_json_parser_generic_json@@Base+0x45c>
   2ea48:	add	r0, r4, #1
   2ea4c:	cmp	r5, r0
   2ea50:	beq	2e538 <flatcc_json_parser_generic_json@@Base+0x530>
   2ea54:	ldrb	r3, [r4, #1]
   2ea58:	sub	r3, r3, #48	; 0x30
   2ea5c:	uxtb	r3, r3
   2ea60:	cmp	r3, #9
   2ea64:	bhi	2e3bc <flatcc_json_parser_generic_json@@Base+0x3b4>
   2ea68:	add	r4, r4, #2
   2ea6c:	mov	r2, r5
   2ea70:	mov	r0, r4
   2ea74:	cmp	r4, r2
   2ea78:	beq	2eac8 <flatcc_json_parser_generic_json@@Base+0xac0>
   2ea7c:	add	r4, r4, #1
   2ea80:	ldrb	r3, [r0]
   2ea84:	sub	r3, r3, #48	; 0x30
   2ea88:	uxtb	r3, r3
   2ea8c:	cmp	r3, #9
   2ea90:	bls	2ea70 <flatcc_json_parser_generic_json@@Base+0xa68>
   2ea94:	b	2e3bc <flatcc_json_parser_generic_json@@Base+0x3b4>
   2ea98:	cmp	r3, #91	; 0x5b
   2ea9c:	beq	2e568 <flatcc_json_parser_generic_json@@Base+0x560>
   2eaa0:	cmp	r3, #123	; 0x7b
   2eaa4:	beq	2e294 <flatcc_json_parser_generic_json@@Base+0x28c>
   2eaa8:	b	2e8fc <flatcc_json_parser_generic_json@@Base+0x8f4>
   2eaac:	mov	r0, r5
   2eab0:	mov	r3, #20
   2eab4:	mov	r2, r5
   2eab8:	mov	r1, r0
   2eabc:	mov	r0, r8
   2eac0:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2eac4:	b	2e7e0 <flatcc_json_parser_generic_json@@Base+0x7d8>
   2eac8:	cmp	r5, r4
   2eacc:	bne	2e3c8 <flatcc_json_parser_generic_json@@Base+0x3c0>
   2ead0:	b	2e538 <flatcc_json_parser_generic_json@@Base+0x530>
   2ead4:	cmp	r5, r2
   2ead8:	beq	2e538 <flatcc_json_parser_generic_json@@Base+0x530>
   2eadc:	ldrb	r3, [r0]
   2eae0:	cmp	r3, #32
   2eae4:	beq	2e7e0 <flatcc_json_parser_generic_json@@Base+0x7d8>
   2eae8:	bls	2e520 <flatcc_json_parser_generic_json@@Base+0x518>
   2eaec:	cmp	r3, #58	; 0x3a
   2eaf0:	beq	2e7e0 <flatcc_json_parser_generic_json@@Base+0x7d8>
   2eaf4:	bls	2e550 <flatcc_json_parser_generic_json@@Base+0x548>
   2eaf8:	cmp	r3, #93	; 0x5d
   2eafc:	beq	2e7e0 <flatcc_json_parser_generic_json@@Base+0x7d8>
   2eb00:	cmp	r3, #125	; 0x7d
   2eb04:	bne	2e538 <flatcc_json_parser_generic_json@@Base+0x530>
   2eb08:	b	2e7e0 <flatcc_json_parser_generic_json@@Base+0x7d8>
   2eb0c:	mov	r0, r2
   2eb10:	b	2e3c8 <flatcc_json_parser_generic_json@@Base+0x3c0>
   2eb14:	mov	r9, r5
   2eb18:	sub	r3, r5, r4
   2eb1c:	cmp	r3, #1
   2eb20:	movle	r0, r4
   2eb24:	ble	2e150 <flatcc_json_parser_generic_json@@Base+0x148>
   2eb28:	ldrb	r3, [r4]
   2eb2c:	mov	r0, r4
   2eb30:	b	2e148 <flatcc_json_parser_generic_json@@Base+0x140>
   2eb34:	mov	r0, r2
   2eb38:	b	2e538 <flatcc_json_parser_generic_json@@Base+0x530>

0002eb3c <flatcc_json_parser_unmatched_symbol@@Base>:
   2eb3c:	push	{r4, r5, r6, lr}
   2eb40:	mov	r5, r0
   2eb44:	mov	r4, r2
   2eb48:	ldr	r3, [r0, #8]
   2eb4c:	tst	r3, #1
   2eb50:	beq	2ed60 <flatcc_json_parser_unmatched_symbol@@Base+0x224>
   2eb54:	ldr	r3, [r0, #12]
   2eb58:	cmp	r3, #0
   2eb5c:	bne	2eb7c <flatcc_json_parser_unmatched_symbol@@Base+0x40>
   2eb60:	cmp	r1, r2
   2eb64:	beq	2ecdc <flatcc_json_parser_unmatched_symbol@@Base+0x1a0>
   2eb68:	ldrb	r3, [r1]
   2eb6c:	cmp	r3, #34	; 0x22
   2eb70:	bne	2ec94 <flatcc_json_parser_unmatched_symbol@@Base+0x158>
   2eb74:	add	r1, r1, #1
   2eb78:	b	2ec08 <flatcc_json_parser_unmatched_symbol@@Base+0xcc>
   2eb7c:	cmp	r1, r2
   2eb80:	beq	2ecec <flatcc_json_parser_unmatched_symbol@@Base+0x1b0>
   2eb84:	ldrb	r3, [r1]
   2eb88:	cmp	r3, #32
   2eb8c:	bls	2ed6c <flatcc_json_parser_unmatched_symbol@@Base+0x230>
   2eb90:	add	r2, r1, #1
   2eb94:	b	2ebb8 <flatcc_json_parser_unmatched_symbol@@Base+0x7c>
   2eb98:	mov	r1, r2
   2eb9c:	cmp	r4, r1
   2eba0:	beq	2ebfc <flatcc_json_parser_unmatched_symbol@@Base+0xc0>
   2eba4:	ldrb	r0, [r1]
   2eba8:	add	r2, r2, #1
   2ebac:	cmp	r0, #32
   2ebb0:	bls	2ec00 <flatcc_json_parser_unmatched_symbol@@Base+0xc4>
   2ebb4:	mov	r3, r0
   2ebb8:	sub	r1, r2, #1
   2ebbc:	cmp	r3, #46	; 0x2e
   2ebc0:	cmpne	r3, #95	; 0x5f
   2ebc4:	beq	2eb98 <flatcc_json_parser_unmatched_symbol@@Base+0x5c>
   2ebc8:	tst	r3, #128	; 0x80
   2ebcc:	bne	2eb98 <flatcc_json_parser_unmatched_symbol@@Base+0x5c>
   2ebd0:	sub	r0, r3, #48	; 0x30
   2ebd4:	uxtb	r0, r0
   2ebd8:	cmp	r0, #9
   2ebdc:	bls	2eb98 <flatcc_json_parser_unmatched_symbol@@Base+0x5c>
   2ebe0:	orr	r0, r3, #32
   2ebe4:	sub	r0, r0, #97	; 0x61
   2ebe8:	uxtb	r0, r0
   2ebec:	cmp	r0, #25
   2ebf0:	bhi	2ec00 <flatcc_json_parser_unmatched_symbol@@Base+0xc4>
   2ebf4:	mov	r1, r2
   2ebf8:	b	2eb9c <flatcc_json_parser_unmatched_symbol@@Base+0x60>
   2ebfc:	mov	r1, r4
   2ec00:	cmp	r3, #46	; 0x2e
   2ec04:	beq	2ec64 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   2ec08:	mov	r6, r4
   2ec0c:	sub	r3, r4, r1
   2ec10:	cmp	r3, #1
   2ec14:	ble	2ec2c <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
   2ec18:	ldrb	r3, [r1]
   2ec1c:	cmp	r3, #32
   2ec20:	bhi	2ec3c <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   2ec24:	cmp	r3, #32
   2ec28:	beq	2ecf4 <flatcc_json_parser_unmatched_symbol@@Base+0x1b8>
   2ec2c:	mov	r2, r4
   2ec30:	mov	r0, r5
   2ec34:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2ec38:	mov	r1, r0
   2ec3c:	cmp	r4, r1
   2ec40:	beq	2ec50 <flatcc_json_parser_unmatched_symbol@@Base+0x114>
   2ec44:	ldrb	r3, [r1]
   2ec48:	cmp	r3, #58	; 0x3a
   2ec4c:	beq	2ed08 <flatcc_json_parser_unmatched_symbol@@Base+0x1cc>
   2ec50:	mov	r3, #4
   2ec54:	mov	r2, r4
   2ec58:	mov	r0, r5
   2ec5c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2ec60:	pop	{r4, r5, r6, pc}
   2ec64:	mov	r3, #5
   2ec68:	mov	r2, r4
   2ec6c:	mov	r0, r5
   2ec70:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2ec74:	mov	r1, r0
   2ec78:	b	2ec08 <flatcc_json_parser_unmatched_symbol@@Base+0xcc>
   2ec7c:	add	r1, r3, #1
   2ec80:	cmp	r4, r1
   2ec84:	beq	2ece4 <flatcc_json_parser_unmatched_symbol@@Base+0x1a8>
   2ec88:	ldrb	r3, [r3, #1]
   2ec8c:	cmp	r3, #34	; 0x22
   2ec90:	beq	2ecb8 <flatcc_json_parser_unmatched_symbol@@Base+0x17c>
   2ec94:	cmp	r3, #92	; 0x5c
   2ec98:	movne	r3, r1
   2ec9c:	bne	2ec7c <flatcc_json_parser_unmatched_symbol@@Base+0x140>
   2eca0:	sub	r3, r4, r1
   2eca4:	cmp	r3, #1
   2eca8:	addgt	r3, r1, #1
   2ecac:	bgt	2ec7c <flatcc_json_parser_unmatched_symbol@@Base+0x140>
   2ecb0:	cmp	r4, r1
   2ecb4:	beq	2ecc4 <flatcc_json_parser_unmatched_symbol@@Base+0x188>
   2ecb8:	ldrb	r3, [r1]
   2ecbc:	cmp	r3, #34	; 0x22
   2ecc0:	beq	2eb74 <flatcc_json_parser_unmatched_symbol@@Base+0x38>
   2ecc4:	mov	r3, #20
   2ecc8:	mov	r2, r4
   2eccc:	mov	r0, r5
   2ecd0:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2ecd4:	mov	r1, r0
   2ecd8:	b	2ec08 <flatcc_json_parser_unmatched_symbol@@Base+0xcc>
   2ecdc:	mov	r1, r2
   2ece0:	b	2ecc4 <flatcc_json_parser_unmatched_symbol@@Base+0x188>
   2ece4:	mov	r1, r4
   2ece8:	b	2ecc4 <flatcc_json_parser_unmatched_symbol@@Base+0x188>
   2ecec:	mov	r1, r2
   2ecf0:	b	2ec08 <flatcc_json_parser_unmatched_symbol@@Base+0xcc>
   2ecf4:	ldrb	r3, [r1, #1]
   2ecf8:	cmp	r3, #32
   2ecfc:	addhi	r1, r1, #1
   2ed00:	bls	2ec2c <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
   2ed04:	b	2ec3c <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   2ed08:	add	r0, r1, #1
   2ed0c:	sub	r6, r6, r0
   2ed10:	cmp	r6, #1
   2ed14:	ble	2ed28 <flatcc_json_parser_unmatched_symbol@@Base+0x1ec>
   2ed18:	ldrb	r3, [r1, #1]
   2ed1c:	cmp	r3, #32
   2ed20:	bhi	2ed38 <flatcc_json_parser_unmatched_symbol@@Base+0x1fc>
   2ed24:	beq	2ed4c <flatcc_json_parser_unmatched_symbol@@Base+0x210>
   2ed28:	mov	r2, r4
   2ed2c:	mov	r1, r0
   2ed30:	mov	r0, r5
   2ed34:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2ed38:	mov	r2, r4
   2ed3c:	mov	r1, r0
   2ed40:	mov	r0, r5
   2ed44:	bl	2e008 <flatcc_json_parser_generic_json@@Base>
   2ed48:	pop	{r4, r5, r6, pc}
   2ed4c:	ldrb	r3, [r1, #2]
   2ed50:	cmp	r3, #32
   2ed54:	addhi	r0, r1, #2
   2ed58:	bls	2ed28 <flatcc_json_parser_unmatched_symbol@@Base+0x1ec>
   2ed5c:	b	2ed38 <flatcc_json_parser_unmatched_symbol@@Base+0x1fc>
   2ed60:	mov	r3, #13
   2ed64:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2ed68:	pop	{r4, r5, r6, pc}
   2ed6c:	mov	r6, r2
   2ed70:	sub	r3, r2, r1
   2ed74:	cmp	r3, #1
   2ed78:	ldrbgt	r3, [r1]
   2ed7c:	bgt	2ec24 <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
   2ed80:	b	2ec2c <flatcc_json_parser_unmatched_symbol@@Base+0xf0>

0002ed84 <flatcc_json_parser_integer@@Base>:
   2ed84:	cmp	r1, r2
   2ed88:	beq	2eed8 <flatcc_json_parser_integer@@Base+0x154>
   2ed8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ed90:	sub	sp, sp, #12
   2ed94:	mov	r8, r1
   2ed98:	ldrb	ip, [r1]
   2ed9c:	cmp	ip, #45	; 0x2d
   2eda0:	movne	ip, #0
   2eda4:	moveq	ip, #1
   2eda8:	str	ip, [r3]
   2edac:	add	r1, r1, ip
   2edb0:	cmp	r2, r1
   2edb4:	beq	2eec4 <flatcc_json_parser_integer@@Base+0x140>
   2edb8:	mov	fp, r3
   2edbc:	mov	sl, r2
   2edc0:	mov	r9, r8
   2edc4:	str	r0, [sp, #4]
   2edc8:	ldrb	r6, [r8, ip]
   2edcc:	sub	r3, r6, #48	; 0x30
   2edd0:	uxtb	r3, r3
   2edd4:	cmp	r3, #9
   2edd8:	bhi	2ee8c <flatcc_json_parser_integer@@Base+0x108>
   2eddc:	uxtb	r6, r6
   2ede0:	mov	r7, #0
   2ede4:	subs	r6, r6, #48	; 0x30
   2ede8:	sbc	r7, r7, #0
   2edec:	add	ip, r1, #1
   2edf0:	mov	lr, r2
   2edf4:	mov	r0, #10
   2edf8:	mov	r1, ip
   2edfc:	cmp	ip, lr
   2ee00:	beq	2eecc <flatcc_json_parser_integer@@Base+0x148>
   2ee04:	ldrb	r2, [ip], #1
   2ee08:	sub	r3, r2, #48	; 0x30
   2ee0c:	uxtb	r3, r3
   2ee10:	cmp	r3, #9
   2ee14:	bhi	2ee94 <flatcc_json_parser_integer@@Base+0x110>
   2ee18:	umull	r4, r5, r6, r0
   2ee1c:	mla	r5, r0, r7, r5
   2ee20:	subs	r4, r4, #48	; 0x30
   2ee24:	sbc	r5, r5, #0
   2ee28:	uxtb	r2, r2
   2ee2c:	mov	r3, #0
   2ee30:	adds	r2, r2, r4
   2ee34:	adc	r3, r3, r5
   2ee38:	cmp	r3, r7
   2ee3c:	cmpeq	r2, r6
   2ee40:	movcs	r6, r2
   2ee44:	movcs	r7, r3
   2ee48:	bcs	2edf8 <flatcc_json_parser_integer@@Base+0x74>
   2ee4c:	cmp	fp, #0
   2ee50:	movne	r3, #8
   2ee54:	moveq	r3, #7
   2ee58:	mov	r2, sl
   2ee5c:	ldr	r0, [sp, #4]
   2ee60:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2ee64:	mov	r1, r0
   2ee68:	b	2eeb8 <flatcc_json_parser_integer@@Base+0x134>
   2ee6c:	mov	r3, #12
   2ee70:	mov	r2, sl
   2ee74:	ldr	r0, [sp, #4]
   2ee78:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2ee7c:	mov	r1, r0
   2ee80:	b	2eeb8 <flatcc_json_parser_integer@@Base+0x134>
   2ee84:	mov	r1, r9
   2ee88:	b	2eeb8 <flatcc_json_parser_integer@@Base+0x134>
   2ee8c:	mov	r6, #0
   2ee90:	mov	r7, #0
   2ee94:	cmp	r1, r9
   2ee98:	beq	2ee84 <flatcc_json_parser_integer@@Base+0x100>
   2ee9c:	ldrb	r3, [r1]
   2eea0:	and	r2, r3, #223	; 0xdf
   2eea4:	cmp	r3, #46	; 0x2e
   2eea8:	cmpne	r2, #69	; 0x45
   2eeac:	beq	2ee6c <flatcc_json_parser_integer@@Base+0xe8>
   2eeb0:	ldr	r3, [sp, #48]	; 0x30
   2eeb4:	strd	r6, [r3]
   2eeb8:	mov	r0, r1
   2eebc:	add	sp, sp, #12
   2eec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eec4:	mov	r6, #0
   2eec8:	mov	r7, #0
   2eecc:	cmp	r8, r1
   2eed0:	beq	2eeb8 <flatcc_json_parser_integer@@Base+0x134>
   2eed4:	b	2eeb0 <flatcc_json_parser_integer@@Base+0x12c>
   2eed8:	mov	r0, r2
   2eedc:	bx	lr

0002eee0 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   2eee0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2eee4:	sub	sp, sp, #28
   2eee8:	mov	r7, r0
   2eeec:	mov	r6, r2
   2eef0:	mov	r8, r3
   2eef4:	cmp	r1, r2
   2eef8:	beq	2ef0c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c>
   2eefc:	ldrb	r3, [r1]
   2ef00:	cmp	r3, #34	; 0x22
   2ef04:	addeq	r4, r1, #1
   2ef08:	beq	2ef20 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   2ef0c:	mov	r3, #16
   2ef10:	mov	r2, r6
   2ef14:	mov	r0, r7
   2ef18:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2ef1c:	mov	r4, r0
   2ef20:	mov	r2, r6
   2ef24:	mov	r1, r4
   2ef28:	mov	r0, r7
   2ef2c:	bl	2cdfc <flatcc_json_parser_string_part@@Base>
   2ef30:	mov	r5, r0
   2ef34:	cmp	r6, r0
   2ef38:	beq	2ef48 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   2ef3c:	ldrb	r3, [r0]
   2ef40:	cmp	r3, #34	; 0x22
   2ef44:	beq	2ef78 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x98>
   2ef48:	mov	r3, #0
   2ef4c:	str	r3, [r8]
   2ef50:	ldr	r3, [sp, #64]	; 0x40
   2ef54:	cmp	r3, #0
   2ef58:	movne	r3, #32
   2ef5c:	moveq	r3, #31
   2ef60:	mov	r2, r6
   2ef64:	mov	r1, r5
   2ef68:	mov	r0, r7
   2ef6c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2ef70:	add	sp, sp, #28
   2ef74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ef78:	sub	sl, r0, r4
   2ef7c:	lsr	r9, sl, #2
   2ef80:	add	r9, r9, r9, lsl #1
   2ef84:	and	r3, sl, #3
   2ef88:	cmp	r3, #2
   2ef8c:	addeq	r9, r9, #1
   2ef90:	beq	2ef9c <flatcc_json_parser_build_uint8_vector_base64@@Base+0xbc>
   2ef94:	cmp	r3, #3
   2ef98:	addeq	r9, r9, #2
   2ef9c:	mvn	r3, #0
   2efa0:	mov	r2, #1
   2efa4:	mov	r1, r2
   2efa8:	ldr	r0, [r7]
   2efac:	bl	279cc <flatcc_builder_start_vector@@Base>
   2efb0:	cmp	r0, #0
   2efb4:	bne	2f28c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3ac>
   2efb8:	mov	r1, r9
   2efbc:	ldr	r0, [r7]
   2efc0:	bl	271c4 <flatcc_builder_extend_vector@@Base>
   2efc4:	cmp	r0, #0
   2efc8:	beq	2f28c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3ac>
   2efcc:	ldr	r3, [sp, #64]	; 0x40
   2efd0:	adds	r3, r3, #0
   2efd4:	movne	r3, #1
   2efd8:	cmp	r3, #0
   2efdc:	beq	2f020 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x140>
   2efe0:	cmp	r3, #1
   2efe4:	bne	2f188 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2a8>
   2efe8:	ldr	lr, [pc, #700]	; 2f2ac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3cc>
   2efec:	cmp	r9, #0
   2eff0:	movne	r3, r9
   2eff4:	mvneq	r3, #0
   2eff8:	str	r3, [sp, #12]
   2effc:	str	r0, [sp, #8]
   2f000:	str	sl, [sp, #4]
   2f004:	mov	r1, r4
   2f008:	ldr	r3, [sp, #4]
   2f00c:	cmp	r3, #0
   2f010:	beq	2f028 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x148>
   2f014:	mov	ip, r3
   2f018:	mov	r2, #0
   2f01c:	b	2f068 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x188>
   2f020:	ldr	lr, [pc, #648]	; 2f2b0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3d0>
   2f024:	b	2efec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x10c>
   2f028:	ldr	r2, [sp, #4]
   2f02c:	cmp	r2, #2
   2f030:	beq	2f194 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2b4>
   2f034:	cmp	r2, #3
   2f038:	beq	2f23c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x35c>
   2f03c:	cmp	r2, #0
   2f040:	bne	2f0b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d4>
   2f044:	b	2f1dc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   2f048:	add	r1, r1, #1
   2f04c:	sub	ip, ip, #1
   2f050:	sub	r2, r2, #1
   2f054:	add	r2, r2, #1
   2f058:	cmp	r2, #3
   2f05c:	bhi	2f118 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x238>
   2f060:	cmp	r2, ip
   2f064:	beq	2f02c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   2f068:	ldrb	r3, [r1, r2]
   2f06c:	ldrb	r3, [lr, r3]
   2f070:	add	fp, sp, #24
   2f074:	add	fp, fp, r2
   2f078:	strb	r3, [fp, #-4]
   2f07c:	cmp	r3, #63	; 0x3f
   2f080:	bls	2f054 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x174>
   2f084:	cmp	r3, #65	; 0x41
   2f088:	beq	2f048 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
   2f08c:	cmp	r3, #66	; 0x42
   2f090:	movne	r3, r2
   2f094:	beq	2f0c0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e0>
   2f098:	sub	r3, ip, r3
   2f09c:	cmp	r2, #2
   2f0a0:	beq	2f198 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2b8>
   2f0a4:	cmp	r2, #3
   2f0a8:	beq	2f240 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x360>
   2f0ac:	cmp	r2, #0
   2f0b0:	beq	2f1cc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ec>
   2f0b4:	ldr	r3, [sp, #4]
   2f0b8:	sub	r5, sl, r3
   2f0bc:	b	2f18c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ac>
   2f0c0:	add	r3, r2, #1
   2f0c4:	cmp	r3, #7
   2f0c8:	cmpls	r3, ip
   2f0cc:	bcs	2f098 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   2f0d0:	add	fp, r1, r3
   2f0d4:	ldrb	r1, [r1, r3]
   2f0d8:	ldrb	r1, [lr, r1]
   2f0dc:	sub	r1, r1, #65	; 0x41
   2f0e0:	uxtb	r1, r1
   2f0e4:	cmp	r1, #1
   2f0e8:	bhi	2f098 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   2f0ec:	add	r3, r3, #1
   2f0f0:	cmp	r3, #7
   2f0f4:	cmpls	r3, ip
   2f0f8:	bcs	2f098 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   2f0fc:	ldrb	r1, [fp, #1]!
   2f100:	ldrb	r1, [lr, r1]
   2f104:	sub	r1, r1, #65	; 0x41
   2f108:	uxtb	r1, r1
   2f10c:	cmp	r1, #1
   2f110:	bls	2f0ec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x20c>
   2f114:	b	2f098 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   2f118:	ldr	r3, [sp, #12]
   2f11c:	cmp	r3, #2
   2f120:	bls	2f1a8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c8>
   2f124:	ldrb	fp, [sp, #21]
   2f128:	ldrb	r2, [sp, #20]
   2f12c:	lsr	r3, fp, #4
   2f130:	orr	r3, r3, r2, lsl #2
   2f134:	ldr	r2, [sp, #8]
   2f138:	strb	r3, [r2]
   2f13c:	ldrb	r2, [sp, #22]
   2f140:	lsr	r3, r2, #2
   2f144:	orr	r3, r3, fp, lsl #4
   2f148:	ldr	fp, [sp, #8]
   2f14c:	strb	r3, [fp, #1]
   2f150:	ldrb	r3, [sp, #23]
   2f154:	orr	r3, r3, r2, lsl #6
   2f158:	strb	r3, [fp, #2]
   2f15c:	add	r2, fp, #3
   2f160:	str	r2, [sp, #8]
   2f164:	add	r1, r1, #4
   2f168:	sub	r2, ip, #4
   2f16c:	str	r2, [sp, #4]
   2f170:	ldr	r3, [sp, #12]
   2f174:	subs	r3, r3, #3
   2f178:	str	r3, [sp, #12]
   2f17c:	bne	2f008 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x128>
   2f180:	ldr	r3, [sp, #4]
   2f184:	b	2f1cc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ec>
   2f188:	mov	r5, #0
   2f18c:	add	r5, r4, r5
   2f190:	b	2ef48 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   2f194:	mov	r3, #0
   2f198:	ldrb	r2, [sp, #21]
   2f19c:	lsl	r1, r2, #4
   2f1a0:	tst	r1, #255	; 0xff
   2f1a4:	beq	2f1b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d4>
   2f1a8:	ldr	r3, [sp, #4]
   2f1ac:	sub	r5, sl, r3
   2f1b0:	b	2f18c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ac>
   2f1b4:	ldrb	r1, [sp, #20]
   2f1b8:	lsr	r2, r2, #4
   2f1bc:	orr	r2, r2, r1, lsl #2
   2f1c0:	ldr	r1, [sp, #8]
   2f1c4:	strb	r2, [r1], #1
   2f1c8:	str	r1, [sp, #8]
   2f1cc:	sub	r3, sl, r3
   2f1d0:	cmp	sl, r3
   2f1d4:	addne	r5, r4, r3
   2f1d8:	bne	2ef48 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   2f1dc:	ldr	r3, [sp, #8]
   2f1e0:	sub	r1, r3, r0
   2f1e4:	cmp	r9, r1
   2f1e8:	bls	2f200 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x320>
   2f1ec:	sub	r1, r9, r1
   2f1f0:	ldr	r0, [r7]
   2f1f4:	bl	27810 <flatcc_builder_truncate_vector@@Base>
   2f1f8:	cmp	r0, #0
   2f1fc:	bne	2f28c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3ac>
   2f200:	ldr	r0, [r7]
   2f204:	bl	289dc <flatcc_builder_end_vector@@Base>
   2f208:	str	r0, [r8]
   2f20c:	cmp	r0, #0
   2f210:	beq	2f28c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3ac>
   2f214:	ldrb	r3, [r5]
   2f218:	cmp	r3, #34	; 0x22
   2f21c:	addeq	r0, r5, #1
   2f220:	beq	2ef70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x90>
   2f224:	mov	r3, #20
   2f228:	mov	r2, r6
   2f22c:	mov	r1, r5
   2f230:	mov	r0, r7
   2f234:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2f238:	b	2ef70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x90>
   2f23c:	mov	r3, #0
   2f240:	ldrb	r2, [sp, #22]
   2f244:	lsl	r1, r2, #6
   2f248:	tst	r1, #255	; 0xff
   2f24c:	bne	2f1a8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c8>
   2f250:	ldr	r1, [sp, #12]
   2f254:	cmp	r1, #1
   2f258:	bls	2f1a8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c8>
   2f25c:	ldrb	ip, [sp, #21]
   2f260:	ldrb	lr, [sp, #20]
   2f264:	lsr	r1, ip, #4
   2f268:	orr	r1, r1, lr, lsl #2
   2f26c:	ldr	lr, [sp, #8]
   2f270:	strb	r1, [lr]
   2f274:	lsr	r2, r2, #2
   2f278:	orr	r2, r2, ip, lsl #4
   2f27c:	strb	r2, [lr, #1]
   2f280:	add	r2, lr, #2
   2f284:	str	r2, [sp, #8]
   2f288:	b	2f1cc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ec>
   2f28c:	mov	r3, #0
   2f290:	str	r3, [r8]
   2f294:	mov	r3, #33	; 0x21
   2f298:	mov	r2, r6
   2f29c:	mov	r1, r5
   2f2a0:	mov	r0, r7
   2f2a4:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2f2a8:	b	2ef70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x90>
   2f2ac:	andeq	r2, r4, r0, ror ip
   2f2b0:	andeq	r2, r4, r0, ror sp

0002f2b4 <flatcc_json_parser_build_string@@Base>:
   2f2b4:	push	{r4, r5, r6, r7, r8, lr}
   2f2b8:	sub	sp, sp, #8
   2f2bc:	mov	r5, r0
   2f2c0:	mov	r6, r2
   2f2c4:	mov	r8, r3
   2f2c8:	cmp	r1, r2
   2f2cc:	beq	2f2e0 <flatcc_json_parser_build_string@@Base+0x2c>
   2f2d0:	ldrb	r3, [r1]
   2f2d4:	cmp	r3, #34	; 0x22
   2f2d8:	addeq	r7, r1, #1
   2f2dc:	beq	2f2f4 <flatcc_json_parser_build_string@@Base+0x40>
   2f2e0:	mov	r3, #16
   2f2e4:	mov	r2, r6
   2f2e8:	mov	r0, r5
   2f2ec:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2f2f0:	mov	r7, r0
   2f2f4:	mov	r2, r6
   2f2f8:	mov	r1, r7
   2f2fc:	mov	r0, r5
   2f300:	bl	2cdfc <flatcc_json_parser_string_part@@Base>
   2f304:	mov	r4, r0
   2f308:	cmp	r6, r0
   2f30c:	beq	2f31c <flatcc_json_parser_build_string@@Base+0x68>
   2f310:	ldrb	r3, [r0]
   2f314:	cmp	r3, #34	; 0x22
   2f318:	beq	2f340 <flatcc_json_parser_build_string@@Base+0x8c>
   2f31c:	ldr	r0, [r5]
   2f320:	bl	27ad0 <flatcc_builder_start_string@@Base>
   2f324:	cmp	r0, #0
   2f328:	beq	2f368 <flatcc_json_parser_build_string@@Base+0xb4>
   2f32c:	mov	r3, #0
   2f330:	str	r3, [r8]
   2f334:	mov	r0, r4
   2f338:	add	sp, sp, #8
   2f33c:	pop	{r4, r5, r6, r7, r8, pc}
   2f340:	sub	r2, r0, r7
   2f344:	mov	r1, r7
   2f348:	ldr	r0, [r5]
   2f34c:	bl	293ec <flatcc_builder_create_string@@Base>
   2f350:	str	r0, [r8]
   2f354:	ldrb	r3, [r4]
   2f358:	cmp	r3, #34	; 0x22
   2f35c:	addeq	r4, r4, #1
   2f360:	bne	2f430 <flatcc_json_parser_build_string@@Base+0x17c>
   2f364:	b	2f334 <flatcc_json_parser_build_string@@Base+0x80>
   2f368:	sub	r2, r4, r7
   2f36c:	mov	r1, r7
   2f370:	ldr	r0, [r5]
   2f374:	bl	276e8 <flatcc_builder_append_string@@Base>
   2f378:	cmp	r0, #0
   2f37c:	beq	2f32c <flatcc_json_parser_build_string@@Base+0x78>
   2f380:	cmp	r6, r4
   2f384:	beq	2f424 <flatcc_json_parser_build_string@@Base+0x170>
   2f388:	ldrb	r3, [r4]
   2f38c:	cmp	r3, #34	; 0x22
   2f390:	bne	2f3b8 <flatcc_json_parser_build_string@@Base+0x104>
   2f394:	ldr	r0, [r5]
   2f398:	bl	29564 <flatcc_builder_end_string@@Base>
   2f39c:	str	r0, [r8]
   2f3a0:	b	2f354 <flatcc_json_parser_build_string@@Base+0xa0>
   2f3a4:	mov	r4, r7
   2f3a8:	b	2f32c <flatcc_json_parser_build_string@@Base+0x78>
   2f3ac:	ldrb	r3, [r4]
   2f3b0:	cmp	r3, #34	; 0x22
   2f3b4:	beq	2f394 <flatcc_json_parser_build_string@@Base+0xe0>
   2f3b8:	add	r3, sp, #4
   2f3bc:	mov	r2, r6
   2f3c0:	mov	r1, r4
   2f3c4:	mov	r0, r5
   2f3c8:	bl	2d5c0 <flatcc_json_parser_string_escape@@Base>
   2f3cc:	mov	r7, r0
   2f3d0:	ldrb	r2, [sp, #4]
   2f3d4:	add	r1, sp, #5
   2f3d8:	ldr	r0, [r5]
   2f3dc:	bl	276e8 <flatcc_builder_append_string@@Base>
   2f3e0:	cmp	r0, #0
   2f3e4:	beq	2f3a4 <flatcc_json_parser_build_string@@Base+0xf0>
   2f3e8:	mov	r2, r6
   2f3ec:	mov	r1, r7
   2f3f0:	mov	r0, r5
   2f3f4:	bl	2cdfc <flatcc_json_parser_string_part@@Base>
   2f3f8:	mov	r4, r0
   2f3fc:	cmp	r6, r0
   2f400:	beq	2f420 <flatcc_json_parser_build_string@@Base+0x16c>
   2f404:	sub	r2, r0, r7
   2f408:	mov	r1, r7
   2f40c:	ldr	r0, [r5]
   2f410:	bl	276e8 <flatcc_builder_append_string@@Base>
   2f414:	cmp	r0, #0
   2f418:	bne	2f3ac <flatcc_json_parser_build_string@@Base+0xf8>
   2f41c:	b	2f32c <flatcc_json_parser_build_string@@Base+0x78>
   2f420:	mov	r4, r6
   2f424:	ldr	r0, [r5]
   2f428:	bl	29564 <flatcc_builder_end_string@@Base>
   2f42c:	str	r0, [r8]
   2f430:	mov	r3, #20
   2f434:	mov	r2, r6
   2f438:	mov	r1, r4
   2f43c:	mov	r0, r5
   2f440:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2f444:	mov	r4, r0
   2f448:	b	2f334 <flatcc_json_parser_build_string@@Base+0x80>

0002f44c <flatcc_json_parser_prepare_unions@@Base>:
   2f44c:	push	{r4, r5, r6, r7, r8, lr}
   2f450:	mov	r6, r0
   2f454:	mov	r4, r1
   2f458:	mov	r7, r2
   2f45c:	mov	r5, r3
   2f460:	add	r1, r3, r3, lsl #1
   2f464:	lsl	r1, r1, #3
   2f468:	add	r1, r1, #8
   2f46c:	ldr	r0, [r0]
   2f470:	bl	267f4 <flatcc_builder_enter_user_frame@@Base>
   2f474:	ldr	r3, [sp, #24]
   2f478:	str	r0, [r3]
   2f47c:	cmp	r0, #0
   2f480:	beq	2f49c <flatcc_json_parser_prepare_unions@@Base+0x50>
   2f484:	mov	r1, r0
   2f488:	ldr	r0, [r6]
   2f48c:	bl	26940 <flatcc_builder_get_user_frame_ptr@@Base>
   2f490:	str	r5, [r0]
   2f494:	mov	r0, r4
   2f498:	pop	{r4, r5, r6, r7, r8, pc}
   2f49c:	mov	r3, #33	; 0x21
   2f4a0:	mov	r2, r7
   2f4a4:	mov	r1, r4
   2f4a8:	mov	r0, r6
   2f4ac:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2f4b0:	pop	{r4, r5, r6, r7, r8, pc}

0002f4b4 <flatcc_json_parser_finalize_unions@@Base>:
   2f4b4:	push	{r4, r5, r6, r7, r8, lr}
   2f4b8:	mov	r4, r0
   2f4bc:	mov	r6, r1
   2f4c0:	mov	r7, r2
   2f4c4:	mov	r5, r3
   2f4c8:	mov	r1, r3
   2f4cc:	ldr	r0, [r0]
   2f4d0:	bl	26940 <flatcc_builder_get_user_frame_ptr@@Base>
   2f4d4:	ldr	r3, [r0, #4]
   2f4d8:	cmp	r3, #0
   2f4dc:	bne	2f4f4 <flatcc_json_parser_finalize_unions@@Base+0x40>
   2f4e0:	mov	r1, r5
   2f4e4:	ldr	r0, [r4]
   2f4e8:	bl	268f8 <flatcc_builder_exit_user_frame_at@@Base>
   2f4ec:	mov	r0, r6
   2f4f0:	pop	{r4, r5, r6, r7, r8, pc}
   2f4f4:	mov	r3, #27
   2f4f8:	mov	r2, r7
   2f4fc:	mov	r1, r6
   2f500:	mov	r0, r4
   2f504:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2f508:	mov	r6, r0
   2f50c:	b	2f4e0 <flatcc_json_parser_finalize_unions@@Base+0x2c>

0002f510 <flatcc_json_parser_union@@Base>:
   2f510:	push	{r4, r5, r6, r7, lr}
   2f514:	sub	sp, sp, #20
   2f518:	mov	r5, r0
   2f51c:	mov	r7, r1
   2f520:	mov	r6, r2
   2f524:	mov	r4, r3
   2f528:	ldr	r1, [sp, #44]	; 0x2c
   2f52c:	ldr	r0, [r0]
   2f530:	bl	26940 <flatcc_builder_get_user_frame_ptr@@Base>
   2f534:	add	r3, r4, r4, lsl #1
   2f538:	add	r3, r0, r3, lsl #3
   2f53c:	ldr	r3, [r3, #8]
   2f540:	cmp	r3, #0
   2f544:	beq	2f56c <flatcc_json_parser_union@@Base+0x5c>
   2f548:	mov	r3, #28
   2f54c:	mov	r2, r6
   2f550:	mov	r1, r7
   2f554:	mov	r0, r5
   2f558:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2f55c:	mov	r4, r0
   2f560:	mov	r0, r4
   2f564:	add	sp, sp, #20
   2f568:	pop	{r4, r5, r6, r7, pc}
   2f56c:	add	r3, r4, r4, lsl #1
   2f570:	add	r3, r0, r3, lsl #3
   2f574:	ldrb	r3, [r3, #20]
   2f578:	cmp	r3, #0
   2f57c:	beq	2f604 <flatcc_json_parser_union@@Base+0xf4>
   2f580:	add	r4, r4, r4, lsl #1
   2f584:	add	r4, r0, r4, lsl #3
   2f588:	ldrb	r3, [r4, #21]
   2f58c:	strb	r3, [sp, #8]
   2f590:	cmp	r3, #0
   2f594:	beq	2f648 <flatcc_json_parser_union@@Base+0x138>
   2f598:	ldr	r2, [r0, #4]
   2f59c:	sub	r2, r2, #1
   2f5a0:	str	r2, [r0, #4]
   2f5a4:	add	r2, sp, #12
   2f5a8:	str	r2, [sp]
   2f5ac:	mov	r2, r6
   2f5b0:	mov	r1, r7
   2f5b4:	mov	r0, r5
   2f5b8:	ldr	r4, [sp, #48]	; 0x30
   2f5bc:	blx	r4
   2f5c0:	mov	r4, r0
   2f5c4:	cmp	r6, r0
   2f5c8:	beq	2f560 <flatcc_json_parser_union@@Base+0x50>
   2f5cc:	add	r3, sp, #16
   2f5d0:	ldmdb	r3, {r2, r3}
   2f5d4:	ldrh	r1, [sp, #40]	; 0x28
   2f5d8:	ldr	r0, [r5]
   2f5dc:	bl	29984 <flatcc_builder_table_add_union@@Base>
   2f5e0:	cmp	r0, #0
   2f5e4:	beq	2f560 <flatcc_json_parser_union@@Base+0x50>
   2f5e8:	mov	r3, #28
   2f5ec:	mov	r2, r6
   2f5f0:	mov	r1, r4
   2f5f4:	mov	r0, r5
   2f5f8:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2f5fc:	mov	r4, r0
   2f600:	b	2f560 <flatcc_json_parser_union@@Base+0x50>
   2f604:	ldr	r3, [r0, #4]
   2f608:	add	r3, r3, #1
   2f60c:	str	r3, [r0, #4]
   2f610:	ldr	r1, [r5, #16]
   2f614:	lsl	r3, r4, #1
   2f618:	add	r2, r3, r4
   2f61c:	add	r2, r0, r2, lsl #3
   2f620:	str	r1, [r2, #16]
   2f624:	ldr	r1, [r5, #4]
   2f628:	str	r1, [r2, #12]
   2f62c:	str	r7, [r2, #8]
   2f630:	mov	r2, r6
   2f634:	mov	r1, r7
   2f638:	mov	r0, r5
   2f63c:	bl	2e008 <flatcc_json_parser_generic_json@@Base>
   2f640:	mov	r4, r0
   2f644:	b	2f560 <flatcc_json_parser_union@@Base+0x50>
   2f648:	mov	r3, #25
   2f64c:	mov	r2, r6
   2f650:	mov	r1, r7
   2f654:	mov	r0, r5
   2f658:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2f65c:	mov	r4, r0
   2f660:	b	2f560 <flatcc_json_parser_union@@Base+0x50>

0002f664 <flatcc_json_parser_union_type@@Base>:
   2f664:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f668:	sub	sp, sp, #36	; 0x24
   2f66c:	mov	r5, r0
   2f670:	mov	r9, r1
   2f674:	mov	r6, r2
   2f678:	mov	r4, r3
   2f67c:	ldr	r1, [sp, #76]	; 0x4c
   2f680:	ldr	r0, [r0]
   2f684:	bl	26940 <flatcc_builder_get_user_frame_ptr@@Base>
   2f688:	add	r8, r0, #8
   2f68c:	add	r4, r4, r4, lsl #1
   2f690:	lsl	r4, r4, #3
   2f694:	add	sl, r8, r4
   2f698:	ldrb	r3, [sl, #12]
   2f69c:	cmp	r3, #0
   2f6a0:	bne	2f7c0 <flatcc_json_parser_union_type@@Base+0x15c>
   2f6a4:	mov	r7, r0
   2f6a8:	mov	r3, #1
   2f6ac:	strb	r3, [sl, #12]
   2f6b0:	mov	r2, #0
   2f6b4:	mov	r3, #0
   2f6b8:	strd	r2, [sp, #16]
   2f6bc:	mov	r3, #0
   2f6c0:	str	r3, [sp, #12]
   2f6c4:	strb	r3, [sl, #13]
   2f6c8:	cmp	r9, r6
   2f6cc:	beq	2f804 <flatcc_json_parser_union_type@@Base+0x1a0>
   2f6d0:	add	r3, sp, #16
   2f6d4:	str	r3, [sp]
   2f6d8:	add	r3, sp, #12
   2f6dc:	mov	r2, r6
   2f6e0:	mov	r1, r9
   2f6e4:	mov	r0, r5
   2f6e8:	bl	2ed84 <flatcc_json_parser_integer@@Base>
   2f6ec:	mov	fp, r0
   2f6f0:	cmp	r9, r0
   2f6f4:	beq	2f804 <flatcc_json_parser_union_type@@Base+0x1a0>
   2f6f8:	ldr	r3, [sp, #12]
   2f6fc:	cmp	r3, #0
   2f700:	bne	2f7e4 <flatcc_json_parser_union_type@@Base+0x180>
   2f704:	ldrd	r2, [sp, #16]
   2f708:	cmp	r3, #0
   2f70c:	cmpeq	r2, #255	; 0xff
   2f710:	strbls	r2, [sl, #13]
   2f714:	bhi	2f828 <flatcc_json_parser_union_type@@Base+0x1c4>
   2f718:	ldr	r3, [r8, r4]
   2f71c:	cmp	r3, #0
   2f720:	beq	2f844 <flatcc_json_parser_union_type@@Base+0x1e0>
   2f724:	ldr	r3, [r7, #4]
   2f728:	cmp	r3, #0
   2f72c:	beq	2f85c <flatcc_json_parser_union_type@@Base+0x1f8>
   2f730:	sub	r3, r3, #1
   2f734:	str	r3, [r7, #4]
   2f738:	ldr	r9, [r5, #16]
   2f73c:	ldr	r7, [r5, #4]
   2f740:	ldr	r3, [sl, #8]
   2f744:	str	r3, [r5, #16]
   2f748:	ldr	r3, [sl, #4]
   2f74c:	str	r3, [r5, #4]
   2f750:	ldrb	r3, [sl, #13]
   2f754:	strb	r3, [sp, #24]
   2f758:	ldr	r1, [r8, r4]
   2f75c:	add	r2, sp, #28
   2f760:	str	r2, [sp]
   2f764:	mov	r2, r6
   2f768:	mov	r0, r5
   2f76c:	ldr	r4, [sp, #84]	; 0x54
   2f770:	blx	r4
   2f774:	cmp	r6, r0
   2f778:	moveq	fp, r0
   2f77c:	beq	2f7d8 <flatcc_json_parser_union_type@@Base+0x174>
   2f780:	add	r3, sp, #32
   2f784:	ldmdb	r3, {r2, r3}
   2f788:	ldrh	r1, [sp, #72]	; 0x48
   2f78c:	ldr	r0, [r5]
   2f790:	bl	29984 <flatcc_builder_table_add_union@@Base>
   2f794:	cmp	r0, #0
   2f798:	streq	r9, [r5, #16]
   2f79c:	streq	r7, [r5, #4]
   2f7a0:	beq	2f7d8 <flatcc_json_parser_union_type@@Base+0x174>
   2f7a4:	mov	r3, #28
   2f7a8:	mov	r2, r6
   2f7ac:	mov	r1, fp
   2f7b0:	mov	r0, r5
   2f7b4:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2f7b8:	mov	fp, r0
   2f7bc:	b	2f7d8 <flatcc_json_parser_union_type@@Base+0x174>
   2f7c0:	mov	r3, #28
   2f7c4:	mov	r2, r6
   2f7c8:	mov	r1, r9
   2f7cc:	mov	r0, r5
   2f7d0:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2f7d4:	mov	fp, r0
   2f7d8:	mov	r0, fp
   2f7dc:	add	sp, sp, #36	; 0x24
   2f7e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f7e4:	mov	r3, #8
   2f7e8:	mov	r2, r6
   2f7ec:	mov	r1, r0
   2f7f0:	mov	r0, r5
   2f7f4:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2f7f8:	mov	fp, r0
   2f7fc:	cmp	r9, fp
   2f800:	bne	2f718 <flatcc_json_parser_union_type@@Base+0xb4>
   2f804:	add	r3, sl, #13
   2f808:	str	r3, [sp]
   2f80c:	ldr	r3, [sp, #80]	; 0x50
   2f810:	mov	r2, r6
   2f814:	mov	r1, r9
   2f818:	mov	r0, r5
   2f81c:	bl	2cfe8 <flatcc_json_parser_space_ext@@Base+0x140>
   2f820:	mov	fp, r0
   2f824:	b	2f718 <flatcc_json_parser_union_type@@Base+0xb4>
   2f828:	mov	r3, #7
   2f82c:	mov	r2, r6
   2f830:	mov	r1, r0
   2f834:	mov	r0, r5
   2f838:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2f83c:	mov	fp, r0
   2f840:	b	2f7fc <flatcc_json_parser_union_type@@Base+0x198>
   2f844:	ldrb	r2, [sl, #13]
   2f848:	ldr	r3, [r7, #4]
   2f84c:	cmp	r2, #0
   2f850:	addne	r3, r3, #1
   2f854:	str	r3, [r7, #4]
   2f858:	b	2f7d8 <flatcc_json_parser_union_type@@Base+0x174>
   2f85c:	ldr	r3, [pc, #12]	; 2f870 <flatcc_json_parser_union_type@@Base+0x20c>
   2f860:	ldr	r2, [pc, #12]	; 2f874 <flatcc_json_parser_union_type@@Base+0x210>
   2f864:	ldr	r1, [pc, #12]	; 2f878 <flatcc_json_parser_union_type@@Base+0x214>
   2f868:	ldr	r0, [pc, #12]	; 2f87c <flatcc_json_parser_union_type@@Base+0x218>
   2f86c:	bl	14618 <__assert_fail@plt>
   2f870:	andeq	r2, r4, r0, ror lr
   2f874:	andeq	r0, r0, r5, asr #7
   2f878:	andeq	r3, r4, r8, lsl #5
   2f87c:	ldrdeq	r3, [r4], -r4

0002f880 <flatcc_json_parser_union_vector@@Base>:
   2f880:	push	{r4, r5, r6, r7, lr}
   2f884:	sub	sp, sp, #20
   2f888:	mov	r5, r0
   2f88c:	mov	r6, r1
   2f890:	mov	r7, r2
   2f894:	mov	r4, r3
   2f898:	ldr	r1, [sp, #44]	; 0x2c
   2f89c:	ldr	r0, [r0]
   2f8a0:	bl	26940 <flatcc_builder_get_user_frame_ptr@@Base>
   2f8a4:	add	r2, r0, #8
   2f8a8:	add	r4, r4, r4, lsl #1
   2f8ac:	lsl	r3, r4, #3
   2f8b0:	add	r1, r2, r3
   2f8b4:	ldr	ip, [r2, r3]
   2f8b8:	cmp	ip, #0
   2f8bc:	beq	2f8dc <flatcc_json_parser_union_vector@@Base+0x5c>
   2f8c0:	mov	r3, #28
   2f8c4:	mov	r2, r7
   2f8c8:	mov	r1, r6
   2f8cc:	mov	r0, r5
   2f8d0:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2f8d4:	add	sp, sp, #20
   2f8d8:	pop	{r4, r5, r6, r7, pc}
   2f8dc:	ldrb	ip, [r1, #12]
   2f8e0:	cmp	ip, #0
   2f8e4:	beq	2f924 <flatcc_json_parser_union_vector@@Base+0xa4>
   2f8e8:	ldr	r3, [r0, #4]
   2f8ec:	sub	r3, r3, #1
   2f8f0:	str	r3, [r0, #4]
   2f8f4:	ldr	r3, [r1, #20]
   2f8f8:	ldr	r2, [sp, #48]	; 0x30
   2f8fc:	str	r2, [sp, #8]
   2f900:	ldrh	r2, [sp, #40]	; 0x28
   2f904:	str	r2, [sp, #4]
   2f908:	ldr	r2, [r1, #16]
   2f90c:	str	r2, [sp]
   2f910:	mov	r2, r7
   2f914:	mov	r1, r6
   2f918:	mov	r0, r5
   2f91c:	bl	2d1c4 <flatcc_json_parser_space_ext@@Base+0x31c>
   2f920:	b	2f8d4 <flatcc_json_parser_union_vector@@Base+0x54>
   2f924:	ldr	ip, [r0, #4]
   2f928:	add	ip, ip, #1
   2f92c:	str	ip, [r0, #4]
   2f930:	ldr	r0, [r5, #16]
   2f934:	str	r0, [r1, #8]
   2f938:	ldr	r0, [r5, #4]
   2f93c:	str	r0, [r1, #4]
   2f940:	str	r6, [r2, r3]
   2f944:	mov	r2, r7
   2f948:	mov	r1, r6
   2f94c:	mov	r0, r5
   2f950:	bl	2e008 <flatcc_json_parser_generic_json@@Base>
   2f954:	b	2f8d4 <flatcc_json_parser_union_vector@@Base+0x54>

0002f958 <flatcc_json_parser_union_type_vector@@Base>:
   2f958:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f95c:	sub	sp, sp, #60	; 0x3c
   2f960:	mov	r7, r0
   2f964:	mov	r5, r1
   2f968:	mov	r6, r2
   2f96c:	mov	r4, r3
   2f970:	ldrh	r3, [sp, #96]	; 0x60
   2f974:	str	r3, [sp, #24]
   2f978:	ldr	r1, [sp, #100]	; 0x64
   2f97c:	ldr	r0, [r0]
   2f980:	bl	26940 <flatcc_builder_get_user_frame_ptr@@Base>
   2f984:	add	r4, r4, r4, lsl #1
   2f988:	lsl	r3, r4, #3
   2f98c:	str	r3, [sp, #28]
   2f990:	add	r0, r0, #8
   2f994:	add	r3, r0, r3
   2f998:	str	r3, [sp, #20]
   2f99c:	ldrb	r3, [r3, #12]
   2f9a0:	cmp	r3, #0
   2f9a4:	bne	2f9fc <flatcc_json_parser_union_type_vector@@Base+0xa4>
   2f9a8:	mov	r1, #1
   2f9ac:	ldr	r3, [sp, #20]
   2f9b0:	strb	r1, [r3, #12]
   2f9b4:	mvn	r3, #0
   2f9b8:	mov	r2, r1
   2f9bc:	ldr	r0, [r7]
   2f9c0:	bl	279cc <flatcc_builder_start_vector@@Base>
   2f9c4:	cmp	r0, #0
   2f9c8:	bne	2fd5c <flatcc_json_parser_union_type_vector@@Base+0x404>
   2f9cc:	cmp	r5, r6
   2f9d0:	beq	2f9e0 <flatcc_json_parser_union_type_vector@@Base+0x88>
   2f9d4:	ldrb	r3, [r5]
   2f9d8:	cmp	r3, #91	; 0x5b
   2f9dc:	beq	2fa14 <flatcc_json_parser_union_type_vector@@Base+0xbc>
   2f9e0:	mov	r3, #22
   2f9e4:	mov	r2, r6
   2f9e8:	mov	r1, r5
   2f9ec:	mov	r0, r7
   2f9f0:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2f9f4:	mov	r5, r0
   2f9f8:	b	2fd00 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2f9fc:	mov	r3, #28
   2fa00:	mov	r2, r6
   2fa04:	mov	r1, r5
   2fa08:	mov	r0, r7
   2fa0c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2fa10:	b	2fd70 <flatcc_json_parser_union_type_vector@@Base+0x418>
   2fa14:	add	r1, r5, #1
   2fa18:	mov	sl, r6
   2fa1c:	sub	r3, r6, r1
   2fa20:	cmp	r3, #1
   2fa24:	ble	2fa3c <flatcc_json_parser_union_type_vector@@Base+0xe4>
   2fa28:	ldrb	r3, [r5, #1]
   2fa2c:	cmp	r3, #32
   2fa30:	movhi	r5, r1
   2fa34:	bhi	2fa4c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2fa38:	beq	2fa6c <flatcc_json_parser_union_type_vector@@Base+0x114>
   2fa3c:	mov	r2, r6
   2fa40:	mov	r0, r7
   2fa44:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2fa48:	mov	r5, r0
   2fa4c:	cmp	r6, r5
   2fa50:	beq	2fa60 <flatcc_json_parser_union_type_vector@@Base+0x108>
   2fa54:	ldrb	r3, [r5]
   2fa58:	cmp	r3, #93	; 0x5d
   2fa5c:	beq	2fa80 <flatcc_json_parser_union_type_vector@@Base+0x128>
   2fa60:	mov	r8, #0
   2fa64:	add	fp, sp, #40	; 0x28
   2fa68:	b	2fbfc <flatcc_json_parser_union_type_vector@@Base+0x2a4>
   2fa6c:	ldrb	r3, [r5, #2]
   2fa70:	cmp	r3, #32
   2fa74:	addhi	r5, r5, #2
   2fa78:	bls	2fa3c <flatcc_json_parser_union_type_vector@@Base+0xe4>
   2fa7c:	b	2fa4c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2fa80:	add	r1, r5, #1
   2fa84:	sub	r3, r6, r1
   2fa88:	cmp	r3, #1
   2fa8c:	ble	2faa4 <flatcc_json_parser_union_type_vector@@Base+0x14c>
   2fa90:	ldrb	r3, [r5, #1]
   2fa94:	cmp	r3, #32
   2fa98:	movhi	r5, r1
   2fa9c:	bhi	2fd00 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2faa0:	beq	2fab8 <flatcc_json_parser_union_type_vector@@Base+0x160>
   2faa4:	mov	r2, r6
   2faa8:	mov	r0, r7
   2faac:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2fab0:	mov	r5, r0
   2fab4:	b	2fd00 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2fab8:	ldrb	r3, [r5, #2]
   2fabc:	cmp	r3, #32
   2fac0:	addhi	r5, r5, #2
   2fac4:	bls	2faa4 <flatcc_json_parser_union_type_vector@@Base+0x14c>
   2fac8:	b	2fd00 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2facc:	mov	r3, #8
   2fad0:	mov	r2, r6
   2fad4:	mov	r1, r0
   2fad8:	mov	r0, r7
   2fadc:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2fae0:	mov	r4, r0
   2fae4:	cmp	r4, r5
   2fae8:	bne	2fc70 <flatcc_json_parser_union_type_vector@@Base+0x318>
   2faec:	add	r3, sp, #55	; 0x37
   2faf0:	str	r3, [sp]
   2faf4:	ldr	r3, [sp, #104]	; 0x68
   2faf8:	mov	r2, r6
   2fafc:	mov	r1, r5
   2fb00:	mov	r0, r7
   2fb04:	bl	2cfe8 <flatcc_json_parser_space_ext@@Base+0x140>
   2fb08:	mov	r4, r0
   2fb0c:	cmp	r6, r0
   2fb10:	cmpne	r0, r5
   2fb14:	bne	2fc70 <flatcc_json_parser_union_type_vector@@Base+0x318>
   2fb18:	mov	r5, r0
   2fb1c:	b	2fd5c <flatcc_json_parser_union_type_vector@@Base+0x404>
   2fb20:	mov	r3, #7
   2fb24:	mov	r2, r6
   2fb28:	mov	r1, r0
   2fb2c:	mov	r0, r7
   2fb30:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2fb34:	mov	r4, r0
   2fb38:	b	2fae4 <flatcc_json_parser_union_type_vector@@Base+0x18c>
   2fb3c:	mov	r3, #15
   2fb40:	mov	r2, r6
   2fb44:	mov	r1, r4
   2fb48:	mov	r0, r7
   2fb4c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2fb50:	b	2fd70 <flatcc_json_parser_union_type_vector@@Base+0x418>
   2fb54:	ldrb	r3, [r4, #1]
   2fb58:	cmp	r3, #32
   2fb5c:	addhi	r4, r4, #1
   2fb60:	bls	2fcb8 <flatcc_json_parser_union_type_vector@@Base+0x360>
   2fb64:	b	2fccc <flatcc_json_parser_union_type_vector@@Base+0x374>
   2fb68:	add	r5, r4, #1
   2fb6c:	sub	r3, r6, r5
   2fb70:	cmp	r3, #1
   2fb74:	ble	2fb88 <flatcc_json_parser_union_type_vector@@Base+0x230>
   2fb78:	ldrb	r3, [r4, #1]
   2fb7c:	cmp	r3, #32
   2fb80:	bhi	2fd00 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2fb84:	beq	2fba0 <flatcc_json_parser_union_type_vector@@Base+0x248>
   2fb88:	mov	r2, r6
   2fb8c:	mov	r1, r5
   2fb90:	mov	r0, r7
   2fb94:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2fb98:	mov	r5, r0
   2fb9c:	b	2fd00 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2fba0:	ldrb	r3, [r4, #2]
   2fba4:	cmp	r3, #32
   2fba8:	addhi	r5, r4, #2
   2fbac:	bls	2fb88 <flatcc_json_parser_union_type_vector@@Base+0x230>
   2fbb0:	b	2fd00 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2fbb4:	add	r5, r4, #1
   2fbb8:	sub	r3, sl, r5
   2fbbc:	cmp	r3, #1
   2fbc0:	ble	2fbd4 <flatcc_json_parser_union_type_vector@@Base+0x27c>
   2fbc4:	ldrb	r3, [r4, #1]
   2fbc8:	cmp	r3, #32
   2fbcc:	bhi	2fbe8 <flatcc_json_parser_union_type_vector@@Base+0x290>
   2fbd0:	beq	2fd78 <flatcc_json_parser_union_type_vector@@Base+0x420>
   2fbd4:	mov	r2, r6
   2fbd8:	mov	r1, r5
   2fbdc:	mov	r0, r7
   2fbe0:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2fbe4:	mov	r5, r0
   2fbe8:	cmp	r6, r5
   2fbec:	beq	2fd8c <flatcc_json_parser_union_type_vector@@Base+0x434>
   2fbf0:	ldrb	r3, [r5]
   2fbf4:	cmp	r3, #93	; 0x5d
   2fbf8:	beq	2fda8 <flatcc_json_parser_union_type_vector@@Base+0x450>
   2fbfc:	mov	r1, #1
   2fc00:	ldr	r0, [r7]
   2fc04:	bl	271c4 <flatcc_builder_extend_vector@@Base>
   2fc08:	subs	r9, r0, #0
   2fc0c:	beq	2fd5c <flatcc_json_parser_union_type_vector@@Base+0x404>
   2fc10:	mov	r2, #0
   2fc14:	mov	r3, #0
   2fc18:	strd	r2, [sp, #40]	; 0x28
   2fc1c:	str	r8, [sp, #36]	; 0x24
   2fc20:	strb	r8, [sp, #55]	; 0x37
   2fc24:	cmp	r6, r5
   2fc28:	beq	2faec <flatcc_json_parser_union_type_vector@@Base+0x194>
   2fc2c:	str	fp, [sp]
   2fc30:	add	r3, sp, #36	; 0x24
   2fc34:	mov	r2, r6
   2fc38:	mov	r1, r5
   2fc3c:	mov	r0, r7
   2fc40:	bl	2ed84 <flatcc_json_parser_integer@@Base>
   2fc44:	mov	r4, r0
   2fc48:	cmp	r0, r5
   2fc4c:	beq	2faec <flatcc_json_parser_union_type_vector@@Base+0x194>
   2fc50:	ldr	r3, [sp, #36]	; 0x24
   2fc54:	cmp	r3, #0
   2fc58:	bne	2facc <flatcc_json_parser_union_type_vector@@Base+0x174>
   2fc5c:	ldrd	r2, [sp, #40]	; 0x28
   2fc60:	cmp	r3, #0
   2fc64:	cmpeq	r2, #255	; 0xff
   2fc68:	strbls	r2, [sp, #55]	; 0x37
   2fc6c:	bhi	2fb20 <flatcc_json_parser_union_type_vector@@Base+0x1c8>
   2fc70:	ldrb	r0, [sp, #55]	; 0x37
   2fc74:	ldr	r3, [sp, #112]	; 0x70
   2fc78:	blx	r3
   2fc7c:	cmp	r0, #0
   2fc80:	bne	2fc94 <flatcc_json_parser_union_type_vector@@Base+0x33c>
   2fc84:	ldr	r3, [r7, #8]
   2fc88:	tst	r3, #1
   2fc8c:	beq	2fb3c <flatcc_json_parser_union_type_vector@@Base+0x1e4>
   2fc90:	strb	r8, [sp, #55]	; 0x37
   2fc94:	ldrb	r3, [sp, #55]	; 0x37
   2fc98:	strb	r3, [r9]
   2fc9c:	sub	r3, sl, r4
   2fca0:	cmp	r3, #1
   2fca4:	ble	2fcb8 <flatcc_json_parser_union_type_vector@@Base+0x360>
   2fca8:	ldrb	r3, [r4]
   2fcac:	cmp	r3, #32
   2fcb0:	bhi	2fccc <flatcc_json_parser_union_type_vector@@Base+0x374>
   2fcb4:	beq	2fb54 <flatcc_json_parser_union_type_vector@@Base+0x1fc>
   2fcb8:	mov	r2, r6
   2fcbc:	mov	r1, r4
   2fcc0:	mov	r0, r7
   2fcc4:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2fcc8:	mov	r4, r0
   2fccc:	cmp	r6, r4
   2fcd0:	beq	2fecc <flatcc_json_parser_union_type_vector@@Base+0x574>
   2fcd4:	ldrb	r3, [r4]
   2fcd8:	cmp	r3, #44	; 0x2c
   2fcdc:	beq	2fbb4 <flatcc_json_parser_union_type_vector@@Base+0x25c>
   2fce0:	cmp	r3, #93	; 0x5d
   2fce4:	beq	2fb68 <flatcc_json_parser_union_type_vector@@Base+0x210>
   2fce8:	mov	r3, #9
   2fcec:	mov	r2, r6
   2fcf0:	mov	r1, r4
   2fcf4:	mov	r0, r7
   2fcf8:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2fcfc:	mov	r5, r0
   2fd00:	ldr	r0, [r7]
   2fd04:	bl	28ad0 <flatcc_builder_vector_count@@Base>
   2fd08:	mov	r4, r0
   2fd0c:	ldr	r3, [sp, #20]
   2fd10:	str	r0, [r3, #16]
   2fd14:	mov	r1, r0
   2fd18:	ldr	r0, [r7]
   2fd1c:	bl	267f4 <flatcc_builder_enter_user_frame@@Base>
   2fd20:	mov	r8, r0
   2fd24:	mov	r1, r0
   2fd28:	ldr	r0, [r7]
   2fd2c:	bl	26940 <flatcc_builder_get_user_frame_ptr@@Base>
   2fd30:	mov	r9, r0
   2fd34:	ldr	r0, [r7]
   2fd38:	bl	28adc <flatcc_builder_vector_edit@@Base>
   2fd3c:	mov	r2, r4
   2fd40:	mov	r1, r0
   2fd44:	mov	r0, r9
   2fd48:	bl	1454c <memcpy@plt>
   2fd4c:	ldr	r0, [r7]
   2fd50:	bl	289dc <flatcc_builder_end_vector@@Base>
   2fd54:	subs	r9, r0, #0
   2fd58:	bne	2fdf4 <flatcc_json_parser_union_type_vector@@Base+0x49c>
   2fd5c:	mov	r3, #33	; 0x21
   2fd60:	mov	r2, r6
   2fd64:	mov	r1, r5
   2fd68:	mov	r0, r7
   2fd6c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2fd70:	add	sp, sp, #60	; 0x3c
   2fd74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fd78:	ldrb	r3, [r4, #2]
   2fd7c:	cmp	r3, #32
   2fd80:	addhi	r5, r4, #2
   2fd84:	bls	2fbd4 <flatcc_json_parser_union_type_vector@@Base+0x27c>
   2fd88:	b	2fbe8 <flatcc_json_parser_union_type_vector@@Base+0x290>
   2fd8c:	mov	r3, #9
   2fd90:	mov	r2, r6
   2fd94:	mov	r1, r5
   2fd98:	mov	r0, r7
   2fd9c:	bl	2cdd0 <flatcc_json_parser_set_error@@Base>
   2fda0:	mov	r5, r0
   2fda4:	b	2fd00 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2fda8:	add	r1, r5, #1
   2fdac:	sub	r3, r6, r1
   2fdb0:	cmp	r3, #1
   2fdb4:	ble	2fdcc <flatcc_json_parser_union_type_vector@@Base+0x474>
   2fdb8:	ldrb	r3, [r5, #1]
   2fdbc:	cmp	r3, #32
   2fdc0:	movhi	r5, r1
   2fdc4:	bhi	2fd00 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2fdc8:	beq	2fde0 <flatcc_json_parser_union_type_vector@@Base+0x488>
   2fdcc:	mov	r2, r6
   2fdd0:	mov	r0, r7
   2fdd4:	bl	2cea8 <flatcc_json_parser_space_ext@@Base>
   2fdd8:	mov	r5, r0
   2fddc:	b	2fd00 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2fde0:	ldrb	r3, [r5, #2]
   2fde4:	cmp	r3, #32
   2fde8:	addhi	r5, r5, #2
   2fdec:	bls	2fdcc <flatcc_json_parser_union_type_vector@@Base+0x474>
   2fdf0:	b	2fd00 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2fdf4:	ldr	r3, [sp, #24]
   2fdf8:	sub	r1, r3, #1
   2fdfc:	ldr	r0, [r7]
   2fe00:	bl	29844 <flatcc_builder_table_add_offset@@Base>
   2fe04:	cmp	r0, #0
   2fe08:	beq	2fd5c <flatcc_json_parser_union_type_vector@@Base+0x404>
   2fe0c:	str	r9, [r0]
   2fe10:	ldr	r1, [sp, #100]	; 0x64
   2fe14:	ldr	r0, [r7]
   2fe18:	bl	26940 <flatcc_builder_get_user_frame_ptr@@Base>
   2fe1c:	add	r2, r0, #8
   2fe20:	ldr	r3, [sp, #28]
   2fe24:	add	r1, r2, r3
   2fe28:	str	r8, [r1, #20]
   2fe2c:	ldr	r3, [r2, r3]
   2fe30:	cmp	r3, #0
   2fe34:	beq	2fea4 <flatcc_json_parser_union_type_vector@@Base+0x54c>
   2fe38:	ldr	r3, [r0, #4]
   2fe3c:	cmp	r3, #0
   2fe40:	beq	2feb8 <flatcc_json_parser_union_type_vector@@Base+0x560>
   2fe44:	sub	r3, r3, #1
   2fe48:	str	r3, [r0, #4]
   2fe4c:	ldr	sl, [r7, #16]
   2fe50:	ldr	r9, [r7, #4]
   2fe54:	ldr	r3, [r1, #8]
   2fe58:	str	r3, [r7, #16]
   2fe5c:	ldr	r3, [r1, #4]
   2fe60:	str	r3, [r7, #4]
   2fe64:	ldr	r3, [sp, #28]
   2fe68:	ldr	r1, [r2, r3]
   2fe6c:	ldr	r3, [sp, #108]	; 0x6c
   2fe70:	str	r3, [sp, #8]
   2fe74:	ldr	r3, [sp, #24]
   2fe78:	str	r3, [sp, #4]
   2fe7c:	str	r4, [sp]
   2fe80:	mov	r3, r8
   2fe84:	mov	r2, r6
   2fe88:	mov	r0, r7
   2fe8c:	bl	2d1c4 <flatcc_json_parser_space_ext@@Base+0x31c>
   2fe90:	cmp	r6, r0
   2fe94:	strne	sl, [r7, #16]
   2fe98:	strne	r9, [r7, #4]
   2fe9c:	movne	r0, r5
   2fea0:	b	2fd70 <flatcc_json_parser_union_type_vector@@Base+0x418>
   2fea4:	ldr	r3, [r0, #4]
   2fea8:	add	r3, r3, #1
   2feac:	str	r3, [r0, #4]
   2feb0:	mov	r0, r5
   2feb4:	b	2fd70 <flatcc_json_parser_union_type_vector@@Base+0x418>
   2feb8:	ldr	r3, [pc, #20]	; 2fed4 <flatcc_json_parser_union_type_vector@@Base+0x57c>
   2febc:	ldr	r2, [pc, #20]	; 2fed8 <flatcc_json_parser_union_type_vector@@Base+0x580>
   2fec0:	ldr	r1, [pc, #20]	; 2fedc <flatcc_json_parser_union_type_vector@@Base+0x584>
   2fec4:	ldr	r0, [pc, #20]	; 2fee0 <flatcc_json_parser_union_type_vector@@Base+0x588>
   2fec8:	bl	14618 <__assert_fail@plt>
   2fecc:	mov	r5, r6
   2fed0:	b	2fd00 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2fed4:	muleq	r4, r0, lr
   2fed8:	andeq	r0, r0, r2, ror #8
   2fedc:	andeq	r3, r4, r8, lsl #5
   2fee0:	ldrdeq	r3, [r4], -r4

0002fee4 <flatcc_json_parser_table_as_root@@Base>:
   2fee4:	push	{r4, r5, r6, r7, r8, r9, lr}
   2fee8:	sub	sp, sp, #52	; 0x34
   2feec:	mov	r8, r0
   2fef0:	mov	r5, r2
   2fef4:	ldr	r9, [sp, #80]	; 0x50
   2fef8:	and	r6, r9, #4
   2fefc:	cmp	r6, #0
   2ff00:	movne	r6, #2
   2ff04:	subs	r4, r1, #0
   2ff08:	addeq	r4, sp, #4
   2ff0c:	add	r7, r2, r3
   2ff10:	mov	r2, #44	; 0x2c
   2ff14:	mov	r1, #0
   2ff18:	mov	r0, r4
   2ff1c:	bl	145c4 <memset@plt>
   2ff20:	str	r8, [r4]
   2ff24:	str	r5, [r4, #4]
   2ff28:	mov	r3, #1
   2ff2c:	str	r3, [r4, #16]
   2ff30:	str	r9, [r4, #8]
   2ff34:	str	r5, [r4, #28]
   2ff38:	str	r7, [r4, #32]
   2ff3c:	str	r5, [r4, #36]	; 0x24
   2ff40:	mov	r3, r6
   2ff44:	mov	r2, #0
   2ff48:	ldr	r1, [sp, #84]	; 0x54
   2ff4c:	mov	r0, r8
   2ff50:	bl	26e50 <flatcc_builder_start_buffer@@Base>
   2ff54:	cmp	r0, #0
   2ff58:	bne	2ffa8 <flatcc_json_parser_table_as_root@@Base+0xc4>
   2ff5c:	mov	r3, sp
   2ff60:	mov	r2, r7
   2ff64:	mov	r1, r5
   2ff68:	mov	r0, r4
   2ff6c:	ldr	r6, [sp, #88]	; 0x58
   2ff70:	blx	r6
   2ff74:	ldr	r6, [r4, #24]
   2ff78:	cmp	r6, #0
   2ff7c:	beq	2ff8c <flatcc_json_parser_table_as_root@@Base+0xa8>
   2ff80:	mov	r0, r6
   2ff84:	add	sp, sp, #52	; 0x34
   2ff88:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2ff8c:	ldr	r1, [sp]
   2ff90:	mov	r0, r8
   2ff94:	bl	26f08 <flatcc_builder_end_buffer@@Base>
   2ff98:	cmp	r0, #0
   2ff9c:	beq	2ffb0 <flatcc_json_parser_table_as_root@@Base+0xcc>
   2ffa0:	str	r5, [r4, #40]	; 0x28
   2ffa4:	b	2ff80 <flatcc_json_parser_table_as_root@@Base+0x9c>
   2ffa8:	mvn	r6, #0
   2ffac:	b	2ff80 <flatcc_json_parser_table_as_root@@Base+0x9c>
   2ffb0:	mvn	r6, #0
   2ffb4:	b	2ff80 <flatcc_json_parser_table_as_root@@Base+0x9c>

0002ffb8 <flatcc_json_parser_struct_as_root@@Base>:
   2ffb8:	push	{r4, r5, r6, r7, r8, r9, lr}
   2ffbc:	sub	sp, sp, #52	; 0x34
   2ffc0:	mov	r8, r0
   2ffc4:	mov	r5, r2
   2ffc8:	ldr	r9, [sp, #80]	; 0x50
   2ffcc:	and	r6, r9, #4
   2ffd0:	cmp	r6, #0
   2ffd4:	movne	r6, #2
   2ffd8:	subs	r4, r1, #0
   2ffdc:	addeq	r4, sp, #4
   2ffe0:	add	r7, r2, r3
   2ffe4:	mov	r2, #44	; 0x2c
   2ffe8:	mov	r1, #0
   2ffec:	mov	r0, r4
   2fff0:	bl	145c4 <memset@plt>
   2fff4:	str	r8, [r4]
   2fff8:	str	r5, [r4, #4]
   2fffc:	mov	r3, #1
   30000:	str	r3, [r4, #16]
   30004:	str	r9, [r4, #8]
   30008:	str	r5, [r4, #28]
   3000c:	str	r7, [r4, #32]
   30010:	str	r5, [r4, #36]	; 0x24
   30014:	mov	r3, r6
   30018:	mov	r2, #0
   3001c:	ldr	r1, [sp, #84]	; 0x54
   30020:	mov	r0, r8
   30024:	bl	26e50 <flatcc_builder_start_buffer@@Base>
   30028:	cmp	r0, #0
   3002c:	bne	3007c <flatcc_json_parser_struct_as_root@@Base+0xc4>
   30030:	mov	r3, sp
   30034:	mov	r2, r7
   30038:	mov	r1, r5
   3003c:	mov	r0, r4
   30040:	ldr	r6, [sp, #88]	; 0x58
   30044:	blx	r6
   30048:	ldr	r6, [r4, #24]
   3004c:	cmp	r6, #0
   30050:	beq	30060 <flatcc_json_parser_struct_as_root@@Base+0xa8>
   30054:	mov	r0, r6
   30058:	add	sp, sp, #52	; 0x34
   3005c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   30060:	ldr	r1, [sp]
   30064:	mov	r0, r8
   30068:	bl	26f08 <flatcc_builder_end_buffer@@Base>
   3006c:	cmp	r0, #0
   30070:	beq	30084 <flatcc_json_parser_struct_as_root@@Base+0xcc>
   30074:	str	r5, [r4, #40]	; 0x28
   30078:	b	30054 <flatcc_json_parser_struct_as_root@@Base+0x9c>
   3007c:	mvn	r6, #0
   30080:	b	30054 <flatcc_json_parser_struct_as_root@@Base+0x9c>
   30084:	mvn	r6, #0
   30088:	b	30054 <flatcc_json_parser_struct_as_root@@Base+0x9c>
   3008c:	andeq	r0, r0, r0
   30090:	cmp	r0, #99	; 0x63
   30094:	bls	300e4 <flatcc_json_parser_struct_as_root@@Base+0x12c>
   30098:	mov	r3, #0
   3009c:	strb	r3, [r1, #3]
   300a0:	ldr	ip, [pc, #160]	; 30148 <flatcc_json_parser_struct_as_root@@Base+0x190>
   300a4:	ldr	r3, [pc, #160]	; 3014c <flatcc_json_parser_struct_as_root@@Base+0x194>
   300a8:	umull	r2, r3, r3, r0
   300ac:	lsr	r3, r3, #5
   300b0:	mov	r2, #100	; 0x64
   300b4:	mul	r2, r2, r3
   300b8:	sub	r0, r0, r2
   300bc:	uxtb	r0, r0
   300c0:	add	r2, ip, r0, lsl #1
   300c4:	ldrb	r0, [ip, r0, lsl #1]
   300c8:	strb	r0, [r1, #1]
   300cc:	ldrb	r2, [r2, #1]
   300d0:	strb	r2, [r1, #2]
   300d4:	add	r3, r3, #48	; 0x30
   300d8:	strb	r3, [r1]
   300dc:	mov	r0, #3
   300e0:	bx	lr
   300e4:	cmp	r0, #9
   300e8:	bls	30130 <flatcc_json_parser_struct_as_root@@Base+0x178>
   300ec:	mov	r3, #0
   300f0:	strb	r3, [r1, #2]
   300f4:	ldr	ip, [pc, #76]	; 30148 <flatcc_json_parser_struct_as_root@@Base+0x190>
   300f8:	ldr	r3, [pc, #76]	; 3014c <flatcc_json_parser_struct_as_root@@Base+0x194>
   300fc:	umull	r2, r3, r3, r0
   30100:	lsr	r2, r3, #5
   30104:	mov	r3, #100	; 0x64
   30108:	mul	r3, r3, r2
   3010c:	sub	r0, r0, r3
   30110:	uxtb	r0, r0
   30114:	add	r3, ip, r0, lsl #1
   30118:	ldrb	r2, [ip, r0, lsl #1]
   3011c:	strb	r2, [r1]
   30120:	ldrb	r3, [r3, #1]
   30124:	strb	r3, [r1, #1]
   30128:	mov	r0, #2
   3012c:	bx	lr
   30130:	mov	r3, #0
   30134:	strb	r3, [r1, #1]
   30138:	add	r0, r0, #48	; 0x30
   3013c:	strb	r0, [r1]
   30140:	mov	r0, #1
   30144:	bx	lr
   30148:	andeq	r3, r4, r8, ror #5
   3014c:	mvnpl	r8, pc, lsl r5
   30150:	push	{r4, r5, lr}
   30154:	mov	r3, r0
   30158:	cmp	r0, #1000	; 0x3e8
   3015c:	bcc	301ec <flatcc_json_parser_struct_as_root@@Base+0x234>
   30160:	ldr	r2, [pc, #352]	; 302c8 <flatcc_json_parser_struct_as_root@@Base+0x310>
   30164:	cmp	r0, r2
   30168:	bhi	30268 <flatcc_json_parser_struct_as_root@@Base+0x2b0>
   3016c:	mov	r2, #0
   30170:	strb	r2, [r1, #4]
   30174:	add	ip, r1, #2
   30178:	ldr	lr, [pc, #332]	; 302cc <flatcc_json_parser_struct_as_root@@Base+0x314>
   3017c:	ldr	r2, [pc, #332]	; 302d0 <flatcc_json_parser_struct_as_root@@Base+0x318>
   30180:	umull	r0, r2, r2, r3
   30184:	lsr	r2, r2, #5
   30188:	mov	r0, #100	; 0x64
   3018c:	mul	r0, r0, r2
   30190:	sub	r0, r3, r0
   30194:	uxth	r0, r0
   30198:	add	r4, lr, r0, lsl #1
   3019c:	uxth	r3, r2
   301a0:	ldrb	r2, [lr, r0, lsl #1]
   301a4:	strb	r2, [r1, #2]
   301a8:	ldrb	r2, [r4, #1]
   301ac:	strb	r2, [r1, #3]
   301b0:	mov	r0, #4
   301b4:	ldr	lr, [pc, #272]	; 302cc <flatcc_json_parser_struct_as_root@@Base+0x314>
   301b8:	ldr	r2, [pc, #272]	; 302d0 <flatcc_json_parser_struct_as_root@@Base+0x318>
   301bc:	umull	r1, r2, r2, r3
   301c0:	lsr	r1, r2, #5
   301c4:	mov	r2, #100	; 0x64
   301c8:	mul	r2, r2, r1
   301cc:	sub	r3, r3, r2
   301d0:	uxth	r3, r3
   301d4:	add	r2, lr, r3, lsl #1
   301d8:	ldrb	r3, [lr, r3, lsl #1]
   301dc:	strb	r3, [ip, #-2]
   301e0:	ldrb	r3, [r2, #1]
   301e4:	strb	r3, [ip, #-1]
   301e8:	pop	{r4, r5, pc}
   301ec:	cmp	r0, #99	; 0x63
   301f0:	bls	3024c <flatcc_json_parser_struct_as_root@@Base+0x294>
   301f4:	add	ip, r1, #3
   301f8:	mov	r2, #0
   301fc:	strb	r2, [r1, #3]
   30200:	mov	r0, #3
   30204:	sub	r4, ip, #2
   30208:	ldr	lr, [pc, #188]	; 302cc <flatcc_json_parser_struct_as_root@@Base+0x314>
   3020c:	ldr	r1, [pc, #188]	; 302d0 <flatcc_json_parser_struct_as_root@@Base+0x318>
   30210:	umull	r2, r1, r1, r3
   30214:	lsr	r1, r1, #5
   30218:	mov	r2, #100	; 0x64
   3021c:	mul	r2, r2, r1
   30220:	sub	r3, r3, r2
   30224:	uxth	r2, r3
   30228:	add	r5, lr, r2, lsl #1
   3022c:	uxth	r3, r1
   30230:	ldrb	r2, [lr, r2, lsl #1]
   30234:	strb	r2, [ip, #-2]
   30238:	ldrb	r2, [r5, #1]
   3023c:	strb	r2, [ip, #-1]
   30240:	add	r3, r3, #48	; 0x30
   30244:	strb	r3, [r4, #-1]
   30248:	pop	{r4, r5, pc}
   3024c:	cmp	r0, #9
   30250:	bls	302b4 <flatcc_json_parser_struct_as_root@@Base+0x2fc>
   30254:	add	ip, r1, #2
   30258:	mov	r2, #0
   3025c:	strb	r2, [r1, #2]
   30260:	mov	r0, #2
   30264:	b	301b4 <flatcc_json_parser_struct_as_root@@Base+0x1fc>
   30268:	mov	r2, #0
   3026c:	strb	r2, [r1, #5]
   30270:	add	ip, r1, #3
   30274:	ldr	lr, [pc, #80]	; 302cc <flatcc_json_parser_struct_as_root@@Base+0x314>
   30278:	ldr	r2, [pc, #80]	; 302d0 <flatcc_json_parser_struct_as_root@@Base+0x318>
   3027c:	umull	r0, r2, r2, r3
   30280:	lsr	r2, r2, #5
   30284:	mov	r0, #100	; 0x64
   30288:	mul	r0, r0, r2
   3028c:	sub	r0, r3, r0
   30290:	uxth	r0, r0
   30294:	add	r4, lr, r0, lsl #1
   30298:	uxth	r3, r2
   3029c:	ldrb	r2, [lr, r0, lsl #1]
   302a0:	strb	r2, [r1, #3]
   302a4:	ldrb	r2, [r4, #1]
   302a8:	strb	r2, [r1, #4]
   302ac:	mov	r0, #5
   302b0:	b	30204 <flatcc_json_parser_struct_as_root@@Base+0x24c>
   302b4:	add	r4, r1, #1
   302b8:	mov	r2, #0
   302bc:	strb	r2, [r1, #1]
   302c0:	mov	r0, #1
   302c4:	b	30240 <flatcc_json_parser_struct_as_root@@Base+0x288>
   302c8:	andeq	r2, r0, pc, lsl #14
   302cc:	andeq	r3, r4, r8, ror #5
   302d0:	mvnpl	r8, pc, lsl r5
   302d4:	push	{r4, r5, lr}
   302d8:	mov	r3, r0
   302dc:	ldr	r2, [pc, #784]	; 305f4 <flatcc_json_parser_struct_as_root@@Base+0x63c>
   302e0:	cmp	r0, r2
   302e4:	bls	30530 <flatcc_json_parser_struct_as_root@@Base+0x578>
   302e8:	ldr	r2, [pc, #776]	; 305f8 <flatcc_json_parser_struct_as_root@@Base+0x640>
   302ec:	cmp	r0, r2
   302f0:	bls	30440 <flatcc_json_parser_struct_as_root@@Base+0x488>
   302f4:	ldr	r2, [pc, #768]	; 305fc <flatcc_json_parser_struct_as_root@@Base+0x644>
   302f8:	cmp	r0, r2
   302fc:	bls	30420 <flatcc_json_parser_struct_as_root@@Base+0x468>
   30300:	mov	r2, #0
   30304:	strb	r2, [r1, #10]
   30308:	add	lr, r1, #8
   3030c:	ldr	ip, [pc, #748]	; 30600 <flatcc_json_parser_struct_as_root@@Base+0x648>
   30310:	ldr	r0, [pc, #748]	; 30604 <flatcc_json_parser_struct_as_root@@Base+0x64c>
   30314:	umull	r2, r0, r0, r3
   30318:	lsr	r0, r0, #5
   3031c:	mov	r2, #100	; 0x64
   30320:	mul	r2, r2, r0
   30324:	sub	r2, r3, r2
   30328:	add	r4, ip, r2, lsl #1
   3032c:	mov	r3, r0
   30330:	ldrb	r2, [ip, r2, lsl #1]
   30334:	strb	r2, [r1, #8]
   30338:	ldrb	r2, [r4, #1]
   3033c:	strb	r2, [r1, #9]
   30340:	mov	r0, #10
   30344:	sub	ip, lr, #2
   30348:	ldr	r4, [pc, #688]	; 30600 <flatcc_json_parser_struct_as_root@@Base+0x648>
   3034c:	ldr	r1, [pc, #688]	; 30604 <flatcc_json_parser_struct_as_root@@Base+0x64c>
   30350:	umull	r2, r1, r1, r3
   30354:	lsr	r1, r1, #5
   30358:	mov	r2, #100	; 0x64
   3035c:	mul	r2, r2, r1
   30360:	sub	r2, r3, r2
   30364:	add	r5, r4, r2, lsl #1
   30368:	mov	r3, r1
   3036c:	ldrb	r2, [r4, r2, lsl #1]
   30370:	strb	r2, [lr, #-2]
   30374:	ldrb	r2, [r5, #1]
   30378:	strb	r2, [lr, #-1]
   3037c:	sub	lr, ip, #2
   30380:	ldr	r4, [pc, #632]	; 30600 <flatcc_json_parser_struct_as_root@@Base+0x648>
   30384:	ldr	r1, [pc, #632]	; 30604 <flatcc_json_parser_struct_as_root@@Base+0x64c>
   30388:	umull	r2, r1, r1, r3
   3038c:	lsr	r1, r1, #5
   30390:	mov	r2, #100	; 0x64
   30394:	mul	r2, r2, r1
   30398:	sub	r2, r3, r2
   3039c:	add	r5, r4, r2, lsl #1
   303a0:	mov	r3, r1
   303a4:	ldrb	r2, [r4, r2, lsl #1]
   303a8:	strb	r2, [ip, #-2]
   303ac:	ldrb	r2, [r5, #1]
   303b0:	strb	r2, [ip, #-1]
   303b4:	sub	ip, lr, #2
   303b8:	ldr	r4, [pc, #576]	; 30600 <flatcc_json_parser_struct_as_root@@Base+0x648>
   303bc:	ldr	r1, [pc, #576]	; 30604 <flatcc_json_parser_struct_as_root@@Base+0x64c>
   303c0:	umull	r2, r1, r1, r3
   303c4:	lsr	r1, r1, #5
   303c8:	mov	r2, #100	; 0x64
   303cc:	mul	r2, r2, r1
   303d0:	sub	r2, r3, r2
   303d4:	add	r5, r4, r2, lsl #1
   303d8:	mov	r3, r1
   303dc:	ldrb	r2, [r4, r2, lsl #1]
   303e0:	strb	r2, [lr, #-2]
   303e4:	ldrb	r2, [r5, #1]
   303e8:	strb	r2, [lr, #-1]
   303ec:	ldr	lr, [pc, #524]	; 30600 <flatcc_json_parser_struct_as_root@@Base+0x648>
   303f0:	ldr	r2, [pc, #524]	; 30604 <flatcc_json_parser_struct_as_root@@Base+0x64c>
   303f4:	umull	r1, r2, r2, r3
   303f8:	lsr	r1, r2, #5
   303fc:	mov	r2, #100	; 0x64
   30400:	mul	r2, r2, r1
   30404:	sub	r3, r3, r2
   30408:	add	r2, lr, r3, lsl #1
   3040c:	ldrb	r3, [lr, r3, lsl #1]
   30410:	strb	r3, [ip, #-2]
   30414:	ldrb	r3, [r2, #1]
   30418:	strb	r3, [ip, #-1]
   3041c:	pop	{r4, r5, pc}
   30420:	ldr	r2, [pc, #480]	; 30608 <flatcc_json_parser_struct_as_root@@Base+0x650>
   30424:	cmp	r0, r2
   30428:	bhi	30584 <flatcc_json_parser_struct_as_root@@Base+0x5cc>
   3042c:	add	lr, r1, #8
   30430:	mov	r2, #0
   30434:	strb	r2, [r1, #8]
   30438:	mov	r0, #8
   3043c:	b	30344 <flatcc_json_parser_struct_as_root@@Base+0x38c>
   30440:	ldr	r2, [pc, #452]	; 3060c <flatcc_json_parser_struct_as_root@@Base+0x654>
   30444:	cmp	r0, r2
   30448:	bls	30510 <flatcc_json_parser_struct_as_root@@Base+0x558>
   3044c:	add	ip, r1, #7
   30450:	mov	r2, #0
   30454:	strb	r2, [r1, #7]
   30458:	mov	r0, #7
   3045c:	sub	lr, ip, #2
   30460:	ldr	r4, [pc, #408]	; 30600 <flatcc_json_parser_struct_as_root@@Base+0x648>
   30464:	ldr	r1, [pc, #408]	; 30604 <flatcc_json_parser_struct_as_root@@Base+0x64c>
   30468:	umull	r2, r1, r1, r3
   3046c:	lsr	r1, r1, #5
   30470:	mov	r2, #100	; 0x64
   30474:	mul	r2, r2, r1
   30478:	sub	r2, r3, r2
   3047c:	add	r5, r4, r2, lsl #1
   30480:	mov	r3, r1
   30484:	ldrb	r2, [r4, r2, lsl #1]
   30488:	strb	r2, [ip, #-2]
   3048c:	ldrb	r2, [r5, #1]
   30490:	strb	r2, [ip, #-1]
   30494:	sub	ip, lr, #2
   30498:	ldr	r4, [pc, #352]	; 30600 <flatcc_json_parser_struct_as_root@@Base+0x648>
   3049c:	ldr	r1, [pc, #352]	; 30604 <flatcc_json_parser_struct_as_root@@Base+0x64c>
   304a0:	umull	r2, r1, r1, r3
   304a4:	lsr	r1, r1, #5
   304a8:	mov	r2, #100	; 0x64
   304ac:	mul	r2, r2, r1
   304b0:	sub	r2, r3, r2
   304b4:	add	r5, r4, r2, lsl #1
   304b8:	mov	r3, r1
   304bc:	ldrb	r2, [r4, r2, lsl #1]
   304c0:	strb	r2, [lr, #-2]
   304c4:	ldrb	r2, [r5, #1]
   304c8:	strb	r2, [lr, #-1]
   304cc:	sub	r4, ip, #2
   304d0:	ldr	lr, [pc, #296]	; 30600 <flatcc_json_parser_struct_as_root@@Base+0x648>
   304d4:	ldr	r1, [pc, #296]	; 30604 <flatcc_json_parser_struct_as_root@@Base+0x64c>
   304d8:	umull	r2, r1, r1, r3
   304dc:	lsr	r1, r1, #5
   304e0:	mov	r2, #100	; 0x64
   304e4:	mul	r2, r2, r1
   304e8:	sub	r2, r3, r2
   304ec:	add	r5, lr, r2, lsl #1
   304f0:	mov	r3, r1
   304f4:	ldrb	r2, [lr, r2, lsl #1]
   304f8:	strb	r2, [ip, #-2]
   304fc:	ldrb	r2, [r5, #1]
   30500:	strb	r2, [ip, #-1]
   30504:	add	r3, r3, #48	; 0x30
   30508:	strb	r3, [r4, #-1]
   3050c:	pop	{r4, r5, pc}
   30510:	ldr	r2, [pc, #248]	; 30610 <flatcc_json_parser_struct_as_root@@Base+0x658>
   30514:	cmp	r0, r2
   30518:	bhi	305e0 <flatcc_json_parser_struct_as_root@@Base+0x628>
   3051c:	add	lr, r1, #5
   30520:	mov	r2, #0
   30524:	strb	r2, [r1, #5]
   30528:	mov	r0, #5
   3052c:	b	30494 <flatcc_json_parser_struct_as_root@@Base+0x4dc>
   30530:	cmp	r0, #99	; 0x63
   30534:	bls	30554 <flatcc_json_parser_struct_as_root@@Base+0x59c>
   30538:	cmp	r0, #1000	; 0x3e8
   3053c:	bcs	30570 <flatcc_json_parser_struct_as_root@@Base+0x5b8>
   30540:	add	ip, r1, #3
   30544:	mov	r2, #0
   30548:	strb	r2, [r1, #3]
   3054c:	mov	r0, #3
   30550:	b	304cc <flatcc_json_parser_struct_as_root@@Base+0x514>
   30554:	cmp	r0, #9
   30558:	bls	305cc <flatcc_json_parser_struct_as_root@@Base+0x614>
   3055c:	add	ip, r1, #2
   30560:	mov	r2, #0
   30564:	strb	r2, [r1, #2]
   30568:	mov	r0, #2
   3056c:	b	303ec <flatcc_json_parser_struct_as_root@@Base+0x434>
   30570:	add	lr, r1, #4
   30574:	mov	r2, #0
   30578:	strb	r2, [r1, #4]
   3057c:	mov	r0, #4
   30580:	b	303b4 <flatcc_json_parser_struct_as_root@@Base+0x3fc>
   30584:	mov	r2, #0
   30588:	strb	r2, [r1, #9]
   3058c:	add	ip, r1, #7
   30590:	ldr	lr, [pc, #104]	; 30600 <flatcc_json_parser_struct_as_root@@Base+0x648>
   30594:	ldr	r0, [pc, #104]	; 30604 <flatcc_json_parser_struct_as_root@@Base+0x64c>
   30598:	umull	r2, r0, r0, r3
   3059c:	lsr	r0, r0, #5
   305a0:	mov	r2, #100	; 0x64
   305a4:	mul	r2, r2, r0
   305a8:	sub	r2, r3, r2
   305ac:	add	r4, lr, r2, lsl #1
   305b0:	mov	r3, r0
   305b4:	ldrb	r2, [lr, r2, lsl #1]
   305b8:	strb	r2, [r1, #7]
   305bc:	ldrb	r2, [r4, #1]
   305c0:	strb	r2, [r1, #8]
   305c4:	mov	r0, #9
   305c8:	b	3045c <flatcc_json_parser_struct_as_root@@Base+0x4a4>
   305cc:	add	r4, r1, #1
   305d0:	mov	r2, #0
   305d4:	strb	r2, [r1, #1]
   305d8:	mov	r0, #1
   305dc:	b	30504 <flatcc_json_parser_struct_as_root@@Base+0x54c>
   305e0:	add	ip, r1, #6
   305e4:	mov	r2, #0
   305e8:	strb	r2, [r1, #6]
   305ec:	mov	r0, #6
   305f0:	b	3037c <flatcc_json_parser_struct_as_root@@Base+0x3c4>
   305f4:	andeq	r2, r0, pc, lsl #14
   305f8:	addseq	r9, r8, pc, ror r6
   305fc:	blcc	fe6e2e00 <__bss_end__@@Base+0xfe68eab4>
   30600:	andeq	r3, r4, r8, ror #5
   30604:	mvnpl	r8, pc, lsl r5
   30608:	ldrbeq	lr, [r5, #255]!	; 0xff
   3060c:	andeq	r4, pc, pc, lsr r2	; <UNPREDICTABLE>
   30610:	muleq	r1, pc, r6	; <UNPREDICTABLE>
   30614:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30618:	mov	r4, r0
   3061c:	mov	r6, r2
   30620:	add	r3, pc, #816	; 0x330
   30624:	ldrd	r2, [r3]
   30628:	cmp	r1, r3
   3062c:	cmpeq	r0, r2
   30630:	bls	30844 <flatcc_json_parser_struct_as_root@@Base+0x88c>
   30634:	mov	r5, r1
   30638:	add	r3, pc, #800	; 0x320
   3063c:	ldrd	r2, [r3]
   30640:	cmp	r1, r3
   30644:	cmpeq	r0, r2
   30648:	bls	308b8 <flatcc_json_parser_struct_as_root@@Base+0x900>
   3064c:	add	r3, pc, #788	; 0x314
   30650:	ldrd	r2, [r3]
   30654:	cmp	r1, r3
   30658:	cmpeq	r0, r2
   3065c:	bls	3087c <flatcc_json_parser_struct_as_root@@Base+0x8c4>
   30660:	add	r3, pc, #776	; 0x308
   30664:	ldrd	r2, [r3]
   30668:	cmp	r1, r3
   3066c:	cmpeq	r0, r2
   30670:	bls	30854 <flatcc_json_parser_struct_as_root@@Base+0x89c>
   30674:	add	r3, pc, #764	; 0x2fc
   30678:	ldrd	r2, [r3]
   3067c:	cmp	r1, r3
   30680:	cmpeq	r0, r2
   30684:	bhi	309bc <flatcc_json_parser_struct_as_root@@Base+0xa04>
   30688:	mov	r3, #0
   3068c:	strb	r3, [r6, #19]
   30690:	add	r9, r6, #17
   30694:	ldr	r7, [pc, #788]	; 309b0 <flatcc_json_parser_struct_as_root@@Base+0x9f8>
   30698:	mov	r2, #100	; 0x64
   3069c:	mov	r3, #0
   306a0:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   306a4:	mov	r8, r2
   306a8:	add	sl, r7, r2, lsl #1
   306ac:	mov	r2, #100	; 0x64
   306b0:	mov	r3, #0
   306b4:	mov	r0, r4
   306b8:	mov	r1, r5
   306bc:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   306c0:	mov	r4, r0
   306c4:	mov	r5, r1
   306c8:	ldrb	r3, [r7, r8, lsl #1]
   306cc:	strb	r3, [r6, #17]
   306d0:	ldrb	r3, [sl, #1]
   306d4:	strb	r3, [r6, #18]
   306d8:	mov	r7, #19
   306dc:	sub	r8, r9, #2
   306e0:	ldr	r6, [pc, #712]	; 309b0 <flatcc_json_parser_struct_as_root@@Base+0x9f8>
   306e4:	mov	r2, #100	; 0x64
   306e8:	mov	r3, #0
   306ec:	mov	r0, r4
   306f0:	mov	r1, r5
   306f4:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   306f8:	mov	sl, r2
   306fc:	add	fp, r6, r2, lsl #1
   30700:	mov	r2, #100	; 0x64
   30704:	mov	r3, #0
   30708:	mov	r0, r4
   3070c:	mov	r1, r5
   30710:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   30714:	mov	r4, r0
   30718:	mov	r5, r1
   3071c:	ldrb	r3, [r6, sl, lsl #1]
   30720:	strb	r3, [r9, #-2]
   30724:	ldrb	r3, [fp, #1]
   30728:	strb	r3, [r9, #-1]
   3072c:	sub	r9, r8, #2
   30730:	ldr	r6, [pc, #632]	; 309b0 <flatcc_json_parser_struct_as_root@@Base+0x9f8>
   30734:	mov	r2, #100	; 0x64
   30738:	mov	r3, #0
   3073c:	mov	r0, r4
   30740:	mov	r1, r5
   30744:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   30748:	mov	sl, r2
   3074c:	add	fp, r6, r2, lsl #1
   30750:	mov	r2, #100	; 0x64
   30754:	mov	r3, #0
   30758:	mov	r0, r4
   3075c:	mov	r1, r5
   30760:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   30764:	mov	r4, r0
   30768:	mov	r5, r1
   3076c:	ldrb	r3, [r6, sl, lsl #1]
   30770:	strb	r3, [r8, #-2]
   30774:	ldrb	r3, [fp, #1]
   30778:	strb	r3, [r8, #-1]
   3077c:	sub	r8, r9, #2
   30780:	ldr	r6, [pc, #552]	; 309b0 <flatcc_json_parser_struct_as_root@@Base+0x9f8>
   30784:	mov	r2, #100	; 0x64
   30788:	mov	r3, #0
   3078c:	mov	r0, r4
   30790:	mov	r1, r5
   30794:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   30798:	mov	sl, r2
   3079c:	add	fp, r6, r2, lsl #1
   307a0:	mov	r2, #100	; 0x64
   307a4:	mov	r3, #0
   307a8:	mov	r0, r4
   307ac:	mov	r1, r5
   307b0:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   307b4:	mov	r4, r0
   307b8:	mov	r5, r1
   307bc:	ldrb	r3, [r6, sl, lsl #1]
   307c0:	strb	r3, [r9, #-2]
   307c4:	ldrb	r3, [fp, #1]
   307c8:	strb	r3, [r9, #-1]
   307cc:	ldr	r6, [pc, #476]	; 309b0 <flatcc_json_parser_struct_as_root@@Base+0x9f8>
   307d0:	mov	r2, #100	; 0x64
   307d4:	mov	r3, #0
   307d8:	mov	r0, r4
   307dc:	mov	r1, r5
   307e0:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   307e4:	add	r3, r6, r2, lsl #1
   307e8:	ldrb	r2, [r6, r2, lsl #1]
   307ec:	strb	r2, [r8, #-2]
   307f0:	ldrb	r3, [r3, #1]
   307f4:	strb	r3, [r8, #-1]
   307f8:	sub	r6, r8, #3
   307fc:	mov	r2, #100	; 0x64
   30800:	mov	r3, #0
   30804:	mov	r0, r4
   30808:	mov	r1, r5
   3080c:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   30810:	mov	r2, #10
   30814:	mov	r3, #0
   30818:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   3081c:	add	r2, r2, #48	; 0x30
   30820:	strb	r2, [r8, #-3]
   30824:	mov	r2, #1000	; 0x3e8
   30828:	mov	r3, #0
   3082c:	mov	r0, r4
   30830:	mov	r1, r5
   30834:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   30838:	mov	r4, r0
   3083c:	mov	r5, r1
   30840:	b	30ba0 <flatcc_json_parser_struct_as_root@@Base+0xbe8>
   30844:	mov	r1, r6
   30848:	bl	302d4 <flatcc_json_parser_struct_as_root@@Base+0x31c>
   3084c:	mov	r7, r0
   30850:	b	30c68 <flatcc_json_parser_struct_as_root@@Base+0xcb0>
   30854:	add	r3, pc, #292	; 0x124
   30858:	ldrd	r2, [r3]
   3085c:	cmp	r1, r3
   30860:	cmpeq	r0, r2
   30864:	bhi	30c70 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   30868:	add	r9, r6, #17
   3086c:	mov	r3, #0
   30870:	strb	r3, [r6, #17]
   30874:	mov	r7, #17
   30878:	b	306dc <flatcc_json_parser_struct_as_root@@Base+0x724>
   3087c:	add	r3, pc, #260	; 0x104
   30880:	ldrd	r2, [r3]
   30884:	cmp	r1, r3
   30888:	cmpeq	r0, r2
   3088c:	bhi	30c84 <flatcc_json_parser_struct_as_root@@Base+0xccc>
   30890:	add	r3, pc, #248	; 0xf8
   30894:	ldrd	r2, [r3]
   30898:	cmp	r1, r3
   3089c:	cmpeq	r0, r2
   308a0:	bhi	3091c <flatcc_json_parser_struct_as_root@@Base+0x964>
   308a4:	add	r8, r6, #14
   308a8:	mov	r3, #0
   308ac:	strb	r3, [r6, #14]
   308b0:	mov	r7, #14
   308b4:	b	30ab0 <flatcc_json_parser_struct_as_root@@Base+0xaf8>
   308b8:	add	r3, pc, #216	; 0xd8
   308bc:	ldrd	r2, [r3]
   308c0:	cmp	r1, r3
   308c4:	cmpeq	r0, r2
   308c8:	bls	308f4 <flatcc_json_parser_struct_as_root@@Base+0x93c>
   308cc:	add	r3, pc, #204	; 0xcc
   308d0:	ldrd	r2, [r3]
   308d4:	cmp	r1, r3
   308d8:	cmpeq	r0, r2
   308dc:	bhi	30930 <flatcc_json_parser_struct_as_root@@Base+0x978>
   308e0:	add	r9, r6, #12
   308e4:	mov	r3, #0
   308e8:	strb	r3, [r6, #12]
   308ec:	mov	r7, #12
   308f0:	b	30b00 <flatcc_json_parser_struct_as_root@@Base+0xb48>
   308f4:	add	r3, pc, #172	; 0xac
   308f8:	ldrd	r2, [r3]
   308fc:	cmp	r1, r3
   30900:	cmpeq	r0, r2
   30904:	bhi	30944 <flatcc_json_parser_struct_as_root@@Base+0x98c>
   30908:	add	r8, r6, #10
   3090c:	mov	r3, #0
   30910:	strb	r3, [r6, #10]
   30914:	mov	r7, #10
   30918:	b	30b50 <flatcc_json_parser_struct_as_root@@Base+0xb98>
   3091c:	add	r8, r6, #15
   30920:	mov	r3, #0
   30924:	strb	r3, [r6, #15]
   30928:	mov	r7, #15
   3092c:	b	3072c <flatcc_json_parser_struct_as_root@@Base+0x774>
   30930:	add	r9, r6, #13
   30934:	mov	r3, #0
   30938:	strb	r3, [r6, #13]
   3093c:	mov	r7, #13
   30940:	b	3077c <flatcc_json_parser_struct_as_root@@Base+0x7c4>
   30944:	add	r8, r6, #11
   30948:	mov	r3, #0
   3094c:	strb	r3, [r6, #11]
   30950:	mov	r7, #11
   30954:	b	307cc <flatcc_json_parser_struct_as_root@@Base+0x814>
   30958:	blcc	fe6e315c <__bss_end__@@Base+0xfe68ee10>
   3095c:	andeq	r0, r0, r0
   30960:	mrcmi	15, 3, r9, cr2, cr15, {7}
   30964:	andeq	r0, r0, r8, lsl r9
   30968:	svcvs	0x00c0ffff
   3096c:	strdeq	r8, [r3], -r2	; <UNPREDICTABLE>
   30970:			; <UNDEFINED> instruction: 0xa763ffff
   30974:	stcleq	6, cr11, [r0, #716]!	; 0x2cc
   30978:	stmibhi	r7!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   3097c:	bhi	ff1f9594 <__bss_end__@@Base+0xff1a5248>
   30980:	stcpl	15, cr15, [r9, #1020]	; 0x3fc
   30984:	smceq	13400	; 0x3458
   30988:	strbge	r7, [r6], #4095	; 0xfff
   3098c:	andeq	r8, r3, lr, ror sp
   30990:	ldrshtne	r3, [sl], #-255	; 0xffffff01
   30994:	strdeq	r5, [r0], -r3
   30998:	ldmdami	r6!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr, pc}^
   3099c:	andeq	r0, r0, r7, lsl r0
   309a0:	strtle	r0, [r5], #4095	; 0xfff
   309a4:	andeq	r0, r0, r8, ror #1
   309a8:	strpl	lr, [fp], #-1023	; 0xfffffc01
   309ac:	andeq	r0, r0, r2
   309b0:	andeq	r3, r4, r8, ror #5
   309b4:	andeq	r2, r0, r0, lsl r7
   309b8:	andeq	r4, pc, r0, asr #4
   309bc:	mov	r3, #0
   309c0:	strb	r3, [r6, #20]
   309c4:	add	r8, r6, #18
   309c8:	ldr	r7, [pc, #-32]	; 309b0 <flatcc_json_parser_struct_as_root@@Base+0x9f8>
   309cc:	mov	r2, #100	; 0x64
   309d0:	mov	r3, #0
   309d4:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   309d8:	mov	r9, r2
   309dc:	add	sl, r7, r2, lsl #1
   309e0:	mov	r2, #100	; 0x64
   309e4:	mov	r3, #0
   309e8:	mov	r0, r4
   309ec:	mov	r1, r5
   309f0:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   309f4:	mov	r4, r0
   309f8:	mov	r5, r1
   309fc:	ldrb	r3, [r7, r9, lsl #1]
   30a00:	strb	r3, [r6, #18]
   30a04:	ldrb	r3, [sl, #1]
   30a08:	strb	r3, [r6, #19]
   30a0c:	mov	r7, #20
   30a10:	sub	r9, r8, #2
   30a14:	ldr	r6, [pc, #-108]	; 309b0 <flatcc_json_parser_struct_as_root@@Base+0x9f8>
   30a18:	mov	r2, #100	; 0x64
   30a1c:	mov	r3, #0
   30a20:	mov	r0, r4
   30a24:	mov	r1, r5
   30a28:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   30a2c:	mov	sl, r2
   30a30:	add	fp, r6, r2, lsl #1
   30a34:	mov	r2, #100	; 0x64
   30a38:	mov	r3, #0
   30a3c:	mov	r0, r4
   30a40:	mov	r1, r5
   30a44:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   30a48:	mov	r4, r0
   30a4c:	mov	r5, r1
   30a50:	ldrb	r3, [r6, sl, lsl #1]
   30a54:	strb	r3, [r8, #-2]
   30a58:	ldrb	r3, [fp, #1]
   30a5c:	strb	r3, [r8, #-1]
   30a60:	sub	r8, r9, #2
   30a64:	ldr	r6, [pc, #-188]	; 309b0 <flatcc_json_parser_struct_as_root@@Base+0x9f8>
   30a68:	mov	r2, #100	; 0x64
   30a6c:	mov	r3, #0
   30a70:	mov	r0, r4
   30a74:	mov	r1, r5
   30a78:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   30a7c:	mov	sl, r2
   30a80:	add	fp, r6, r2, lsl #1
   30a84:	mov	r2, #100	; 0x64
   30a88:	mov	r3, #0
   30a8c:	mov	r0, r4
   30a90:	mov	r1, r5
   30a94:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   30a98:	mov	r4, r0
   30a9c:	mov	r5, r1
   30aa0:	ldrb	r3, [r6, sl, lsl #1]
   30aa4:	strb	r3, [r9, #-2]
   30aa8:	ldrb	r3, [fp, #1]
   30aac:	strb	r3, [r9, #-1]
   30ab0:	sub	r9, r8, #2
   30ab4:	ldr	r6, [pc, #-268]	; 309b0 <flatcc_json_parser_struct_as_root@@Base+0x9f8>
   30ab8:	mov	r2, #100	; 0x64
   30abc:	mov	r3, #0
   30ac0:	mov	r0, r4
   30ac4:	mov	r1, r5
   30ac8:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   30acc:	mov	sl, r2
   30ad0:	add	fp, r6, r2, lsl #1
   30ad4:	mov	r2, #100	; 0x64
   30ad8:	mov	r3, #0
   30adc:	mov	r0, r4
   30ae0:	mov	r1, r5
   30ae4:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   30ae8:	mov	r4, r0
   30aec:	mov	r5, r1
   30af0:	ldrb	r3, [r6, sl, lsl #1]
   30af4:	strb	r3, [r8, #-2]
   30af8:	ldrb	r3, [fp, #1]
   30afc:	strb	r3, [r8, #-1]
   30b00:	sub	r8, r9, #2
   30b04:	ldr	r6, [pc, #-348]	; 309b0 <flatcc_json_parser_struct_as_root@@Base+0x9f8>
   30b08:	mov	r2, #100	; 0x64
   30b0c:	mov	r3, #0
   30b10:	mov	r0, r4
   30b14:	mov	r1, r5
   30b18:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   30b1c:	mov	sl, r2
   30b20:	add	fp, r6, r2, lsl #1
   30b24:	mov	r2, #100	; 0x64
   30b28:	mov	r3, #0
   30b2c:	mov	r0, r4
   30b30:	mov	r1, r5
   30b34:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   30b38:	mov	r4, r0
   30b3c:	mov	r5, r1
   30b40:	ldrb	r3, [r6, sl, lsl #1]
   30b44:	strb	r3, [r9, #-2]
   30b48:	ldrb	r3, [fp, #1]
   30b4c:	strb	r3, [r9, #-1]
   30b50:	sub	r6, r8, #2
   30b54:	ldr	sl, [pc, #-428]	; 309b0 <flatcc_json_parser_struct_as_root@@Base+0x9f8>
   30b58:	mov	r2, #100	; 0x64
   30b5c:	mov	r3, #0
   30b60:	mov	r0, r4
   30b64:	mov	r1, r5
   30b68:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   30b6c:	mov	r9, r2
   30b70:	add	fp, sl, r2, lsl #1
   30b74:	mov	r2, #100	; 0x64
   30b78:	mov	r3, #0
   30b7c:	mov	r0, r4
   30b80:	mov	r1, r5
   30b84:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   30b88:	mov	r4, r0
   30b8c:	mov	r5, r1
   30b90:	ldrb	r3, [sl, r9, lsl #1]
   30b94:	strb	r3, [r8, #-2]
   30b98:	ldrb	r3, [fp, #1]
   30b9c:	strb	r3, [r8, #-1]
   30ba0:	ldr	r8, [pc, #-504]	; 309b0 <flatcc_json_parser_struct_as_root@@Base+0x9f8>
   30ba4:	mov	r2, #100	; 0x64
   30ba8:	mov	r3, #0
   30bac:	mov	r0, r4
   30bb0:	mov	r1, r5
   30bb4:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   30bb8:	add	r3, r8, r2, lsl #1
   30bbc:	ldrb	r2, [r8, r2, lsl #1]
   30bc0:	strb	r2, [r6, #-2]
   30bc4:	ldrb	r3, [r3, #1]
   30bc8:	strb	r3, [r6, #-1]
   30bcc:	mov	r2, #100	; 0x64
   30bd0:	mov	r3, #0
   30bd4:	mov	r0, r4
   30bd8:	mov	r1, r5
   30bdc:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   30be0:	mov	r2, #100	; 0x64
   30be4:	mov	r3, #0
   30be8:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   30bec:	add	r3, r8, r2, lsl #1
   30bf0:	ldrb	r2, [r8, r2, lsl #1]
   30bf4:	strb	r2, [r6, #-4]
   30bf8:	ldrb	r3, [r3, #1]
   30bfc:	strb	r3, [r6, #-3]
   30c00:	ldr	r2, [pc, #-596]	; 309b4 <flatcc_json_parser_struct_as_root@@Base+0x9fc>
   30c04:	mov	r3, #0
   30c08:	mov	r0, r4
   30c0c:	mov	r1, r5
   30c10:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   30c14:	mov	r2, #100	; 0x64
   30c18:	mov	r3, #0
   30c1c:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   30c20:	add	r3, r8, r2, lsl #1
   30c24:	ldrb	r2, [r8, r2, lsl #1]
   30c28:	strb	r2, [r6, #-6]
   30c2c:	ldrb	r3, [r3, #1]
   30c30:	strb	r3, [r6, #-5]
   30c34:	ldr	r2, [pc, #-644]	; 309b8 <flatcc_json_parser_struct_as_root@@Base+0xa00>
   30c38:	mov	r3, #0
   30c3c:	mov	r0, r4
   30c40:	mov	r1, r5
   30c44:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   30c48:	mov	r2, #100	; 0x64
   30c4c:	mov	r3, #0
   30c50:	bl	3d698 <flatcc_json_printer_clear@@Base+0x84c>
   30c54:	add	r3, r8, r2, lsl #1
   30c58:	ldrb	r2, [r8, r2, lsl #1]
   30c5c:	strb	r2, [r6, #-8]
   30c60:	ldrb	r3, [r3, #1]
   30c64:	strb	r3, [r6, #-7]
   30c68:	mov	r0, r7
   30c6c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30c70:	add	r8, r6, #18
   30c74:	mov	r3, #0
   30c78:	strb	r3, [r6, #18]
   30c7c:	mov	r7, #18
   30c80:	b	30a10 <flatcc_json_parser_struct_as_root@@Base+0xa58>
   30c84:	add	r9, r6, #16
   30c88:	mov	r3, #0
   30c8c:	strb	r3, [r6, #16]
   30c90:	mov	r7, #16
   30c94:	b	30a60 <flatcc_json_parser_struct_as_root@@Base+0xaa8>
   30c98:	push	{r4, lr}
   30c9c:	lsr	r4, r0, #31
   30ca0:	cmp	r0, #0
   30ca4:	movlt	r3, #45	; 0x2d
   30ca8:	strblt	r3, [r1]
   30cac:	rsblt	r0, r0, #0
   30cb0:	sxtblt	r0, r0
   30cb4:	addlt	r1, r1, #1
   30cb8:	uxtb	r0, r0
   30cbc:	bl	30090 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   30cc0:	add	r0, r4, r0
   30cc4:	pop	{r4, pc}
   30cc8:	push	{r4, lr}
   30ccc:	lsr	r4, r0, #31
   30cd0:	cmp	r0, #0
   30cd4:	movlt	r3, #45	; 0x2d
   30cd8:	strblt	r3, [r1]
   30cdc:	rsblt	r0, r0, #0
   30ce0:	sxthlt	r0, r0
   30ce4:	addlt	r1, r1, #1
   30ce8:	uxth	r0, r0
   30cec:	bl	30150 <flatcc_json_parser_struct_as_root@@Base+0x198>
   30cf0:	add	r0, r4, r0
   30cf4:	pop	{r4, pc}
   30cf8:	push	{r4, lr}
   30cfc:	lsr	r4, r0, #31
   30d00:	cmp	r0, #0
   30d04:	movlt	r3, #45	; 0x2d
   30d08:	strblt	r3, [r1]
   30d0c:	rsblt	r0, r0, #0
   30d10:	addlt	r1, r1, #1
   30d14:	bl	302d4 <flatcc_json_parser_struct_as_root@@Base+0x31c>
   30d18:	add	r0, r4, r0
   30d1c:	pop	{r4, pc}
   30d20:	push	{r4, lr}
   30d24:	lsr	r4, r1, #31
   30d28:	cmp	r0, #0
   30d2c:	sbcs	r3, r1, #0
   30d30:	blt	30d40 <flatcc_json_parser_struct_as_root@@Base+0xd88>
   30d34:	bl	30614 <flatcc_json_parser_struct_as_root@@Base+0x65c>
   30d38:	add	r0, r4, r0
   30d3c:	pop	{r4, pc}
   30d40:	mov	r3, #45	; 0x2d
   30d44:	strb	r3, [r2]
   30d48:	rsbs	r0, r0, #0
   30d4c:	rsc	r1, r1, #0
   30d50:	add	r2, r2, #1
   30d54:	b	30d34 <flatcc_json_parser_struct_as_root@@Base+0xd7c>
   30d58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30d5c:	sub	sp, sp, #20
   30d60:	str	r0, [sp]
   30d64:	str	r1, [sp, #4]
   30d68:	strd	r2, [sp, #8]
   30d6c:	ldrd	sl, [sp, #64]	; 0x40
   30d70:	ldrd	r4, [sp, #72]	; 0x48
   30d74:	ldrd	r6, [sp, #80]	; 0x50
   30d78:	subs	r2, r2, r6
   30d7c:	sbc	r3, r3, r7
   30d80:	cmp	r3, fp
   30d84:	cmpeq	r2, sl
   30d88:	bls	30dd4 <flatcc_json_parser_struct_as_root@@Base+0xe1c>
   30d8c:	mov	lr, r0
   30d90:	mov	ip, r1
   30d94:	mov	r0, r2
   30d98:	mov	r1, r3
   30d9c:	ldrd	r2, [sp, #56]	; 0x38
   30da0:	subs	r2, r2, sl
   30da4:	sbc	r3, r3, fp
   30da8:	cmp	r5, r3
   30dac:	cmpeq	r4, r2
   30db0:	bhi	30f24 <flatcc_json_parser_struct_as_root@@Base+0xf6c>
   30db4:	ldrd	r6, [sp, #56]	; 0x38
   30db8:	subs	r6, r6, r4
   30dbc:	sbc	r7, r7, r5
   30dc0:	subs	r6, r6, sl
   30dc4:	sbc	r7, r7, fp
   30dc8:	sub	ip, ip, #1
   30dcc:	add	ip, lr, ip
   30dd0:	b	30e10 <flatcc_json_parser_struct_as_root@@Base+0xe58>
   30dd4:	mov	r2, sl
   30dd8:	mov	r3, fp
   30ddc:	b	30e60 <flatcc_json_parser_struct_as_root@@Base+0xea8>
   30de0:	ldrb	lr, [ip]
   30de4:	sub	lr, lr, #1
   30de8:	strb	lr, [ip]
   30dec:	subs	r8, r6, r4
   30df0:	sbc	r9, r7, r5
   30df4:	mov	sl, r2
   30df8:	mov	fp, r3
   30dfc:	cmp	r5, r7
   30e00:	cmpeq	r4, r6
   30e04:	bhi	30ecc <flatcc_json_parser_struct_as_root@@Base+0xf14>
   30e08:	mov	r6, r8
   30e0c:	mov	r7, r9
   30e10:	adds	r2, r4, sl
   30e14:	adc	r3, r5, fp
   30e18:	cmp	r1, r3
   30e1c:	cmpeq	r0, r2
   30e20:	bhi	30de0 <flatcc_json_parser_struct_as_root@@Base+0xe28>
   30e24:	subs	r8, r0, sl
   30e28:	sbc	r9, r1, fp
   30e2c:	subs	r6, r2, r0
   30e30:	sbc	r7, r3, r1
   30e34:	cmp	r9, r7
   30e38:	cmpeq	r8, r6
   30e3c:	movcc	r2, sl
   30e40:	movcc	r3, fp
   30e44:	bcc	30e60 <flatcc_json_parser_struct_as_root@@Base+0xea8>
   30e48:	ldr	r1, [sp, #4]
   30e4c:	sub	r1, r1, #1
   30e50:	ldr	r0, [sp]
   30e54:	ldrb	ip, [r0, r1]
   30e58:	sub	ip, ip, #1
   30e5c:	strb	ip, [r0, r1]
   30e60:	ldrd	r0, [sp, #8]
   30e64:	ldrd	r6, [sp, #80]	; 0x50
   30e68:	adds	r0, r0, r6
   30e6c:	adc	r1, r1, r7
   30e70:	cmp	r1, r3
   30e74:	cmpeq	r0, r2
   30e78:	bls	30ecc <flatcc_json_parser_struct_as_root@@Base+0xf14>
   30e7c:	ldrd	r6, [sp, #56]	; 0x38
   30e80:	subs	r6, r6, r2
   30e84:	sbc	r7, r7, r3
   30e88:	cmp	r5, r7
   30e8c:	cmpeq	r4, r6
   30e90:	bhi	30ecc <flatcc_json_parser_struct_as_root@@Base+0xf14>
   30e94:	adds	r4, r4, r2
   30e98:	adc	r5, r5, r3
   30e9c:	cmp	r1, r5
   30ea0:	cmpeq	r0, r4
   30ea4:	movhi	r0, #0
   30ea8:	bhi	30f1c <flatcc_json_parser_struct_as_root@@Base+0xf64>
   30eac:	subs	r6, r0, r2
   30eb0:	sbc	r7, r1, r3
   30eb4:	subs	r4, r4, r0
   30eb8:	sbc	r5, r5, r1
   30ebc:	cmp	r7, r5
   30ec0:	cmpeq	r6, r4
   30ec4:	movhi	r0, #0
   30ec8:	bhi	30f1c <flatcc_json_parser_struct_as_root@@Base+0xf64>
   30ecc:	ldrd	r0, [sp, #80]	; 0x50
   30ed0:	adds	r0, r0, r0
   30ed4:	adc	r1, r1, r1
   30ed8:	cmp	r1, r3
   30edc:	cmpeq	r0, r2
   30ee0:	movhi	r0, #0
   30ee4:	bhi	30f1c <flatcc_json_parser_struct_as_root@@Base+0xf64>
   30ee8:	ldr	ip, [sp, #84]	; 0x54
   30eec:	lsl	r1, ip, #2
   30ef0:	ldr	ip, [sp, #80]	; 0x50
   30ef4:	orr	r1, r1, ip, lsr #30
   30ef8:	lsl	r0, ip, #2
   30efc:	ldrd	r4, [sp, #56]	; 0x38
   30f00:	subs	r4, r4, r0
   30f04:	sbc	r5, r5, r1
   30f08:	mov	r0, r4
   30f0c:	cmp	r5, r3
   30f10:	cmpeq	r4, r2
   30f14:	movcs	r0, #1
   30f18:	movcc	r0, #0
   30f1c:	add	sp, sp, #20
   30f20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30f24:	mov	r2, sl
   30f28:	mov	r3, fp
   30f2c:	b	30ecc <flatcc_json_parser_struct_as_root@@Base+0xf14>
   30f30:	push	{r4, r5, lr}
   30f34:	cmp	r0, #0
   30f38:	addlt	r4, r1, #1
   30f3c:	movlt	r3, #45	; 0x2d
   30f40:	strblt	r3, [r1]
   30f44:	rsblt	r0, r0, #0
   30f48:	movge	r4, r1
   30f4c:	mov	r2, r4
   30f50:	ldr	r5, [pc, #108]	; 30fc4 <flatcc_json_parser_struct_as_root@@Base+0x100c>
   30f54:	mvn	lr, #9
   30f58:	smull	r3, ip, r5, r0
   30f5c:	asr	r3, r0, #31
   30f60:	rsb	r3, r3, ip, asr #2
   30f64:	mla	r0, lr, r3, r0
   30f68:	add	r0, r0, #48	; 0x30
   30f6c:	strb	r0, [r2], #1
   30f70:	mov	r0, r3
   30f74:	cmp	r3, #0
   30f78:	bne	30f58 <flatcc_json_parser_struct_as_root@@Base+0xfa0>
   30f7c:	strb	r3, [r2]
   30f80:	mov	r0, r2
   30f84:	sub	r3, r2, r4
   30f88:	add	r3, r3, r3, lsr #31
   30f8c:	asr	lr, r3, #1
   30f90:	cmp	lr, #0
   30f94:	ble	30fbc <flatcc_json_parser_struct_as_root@@Base+0x1004>
   30f98:	mov	ip, r4
   30f9c:	mov	r3, r2
   30fa0:	add	r4, r4, lr
   30fa4:	ldrb	r2, [ip]
   30fa8:	ldrb	lr, [r3, #-1]
   30fac:	strb	lr, [ip], #1
   30fb0:	strb	r2, [r3, #-1]!
   30fb4:	cmp	ip, r4
   30fb8:	bne	30fa4 <flatcc_json_parser_struct_as_root@@Base+0xfec>
   30fbc:	sub	r0, r0, r1
   30fc0:	pop	{r4, r5, pc}
   30fc4:	strbtvs	r6, [r6], -r7, ror #12
   30fc8:	lsl	r3, r0, #2
   30fcc:	ldr	r2, [pc, #68]	; 31018 <flatcc_json_parser_struct_as_root@@Base+0x1060>
   30fd0:	umull	r2, r3, r2, r3
   30fd4:	lsr	r3, r3, #1
   30fd8:	add	r3, r3, #3
   30fdc:	bic	r3, r3, #3
   30fe0:	tst	r1, #128	; 0x80
   30fe4:	bne	31010 <flatcc_json_parser_struct_as_root@@Base+0x1058>
   30fe8:	ldr	r2, [pc, #40]	; 31018 <flatcc_json_parser_struct_as_root@@Base+0x1060>
   30fec:	umull	r1, r2, r2, r0
   30ff0:	lsr	r2, r2, #1
   30ff4:	add	r2, r2, r2, lsl #1
   30ff8:	sub	r2, r0, r2
   30ffc:	cmp	r2, #1
   31000:	subeq	r3, r3, #2
   31004:	beq	31010 <flatcc_json_parser_struct_as_root@@Base+0x1058>
   31008:	cmp	r2, #2
   3100c:	subeq	r3, r3, #1
   31010:	mov	r0, r3
   31014:	bx	lr
   31018:	bge	feadbacc <__bss_end__@@Base+0xfea87780>
   3101c:	push	{r4, r5, r6, r7, r8, r9, lr}
   31020:	mov	r8, r0
   31024:	ldr	r9, [sp, #28]
   31028:	cmp	r3, #0
   3102c:	beq	311d0 <flatcc_json_parser_struct_as_root@@Base+0x1218>
   31030:	ldr	r6, [r3]
   31034:	bics	r0, r9, #224	; 0xe0
   31038:	beq	31130 <flatcc_json_parser_struct_as_root@@Base+0x1178>
   3103c:	cmp	r0, #1
   31040:	bne	31194 <flatcc_json_parser_struct_as_root@@Base+0x11dc>
   31044:	ldr	r5, [pc, #416]	; 311ec <flatcc_json_parser_struct_as_root@@Base+0x1234>
   31048:	cmp	r6, #2
   3104c:	bls	31138 <flatcc_json_parser_struct_as_root@@Base+0x1180>
   31050:	add	r4, r8, #4
   31054:	add	ip, r1, #3
   31058:	mov	r1, ip
   3105c:	mov	r7, r4
   31060:	ldrb	r0, [ip, #-3]
   31064:	ldrb	r0, [r5, r0, lsr #2]
   31068:	strb	r0, [r4, #-4]
   3106c:	ldrb	r0, [ip, #-3]
   31070:	lsl	r0, r0, #4
   31074:	and	r0, r0, #48	; 0x30
   31078:	ldrb	lr, [ip, #-2]
   3107c:	orr	r0, r0, lr, lsr #4
   31080:	ldrb	r0, [r5, r0]
   31084:	strb	r0, [r4, #-3]
   31088:	ldrb	lr, [ip, #-2]
   3108c:	lsl	lr, lr, #2
   31090:	and	lr, lr, #60	; 0x3c
   31094:	ldrb	r0, [ip, #-1]
   31098:	orr	lr, lr, r0, lsr #6
   3109c:	ldrb	r0, [r5, lr]
   310a0:	strb	r0, [r4, #-2]
   310a4:	ldrb	r0, [ip, #-1]
   310a8:	and	r0, r0, #63	; 0x3f
   310ac:	ldrb	r0, [r5, r0]
   310b0:	strb	r0, [r4, #-1]
   310b4:	sub	r6, r6, #3
   310b8:	add	r4, r4, #4
   310bc:	add	ip, ip, #3
   310c0:	cmp	r6, #2
   310c4:	bhi	31058 <flatcc_json_parser_struct_as_root@@Base+0x10a0>
   310c8:	and	r9, r9, #128	; 0x80
   310cc:	cmp	r6, #1
   310d0:	beq	31140 <flatcc_json_parser_struct_as_root@@Base+0x1188>
   310d4:	cmp	r6, #2
   310d8:	bne	311c4 <flatcc_json_parser_struct_as_root@@Base+0x120c>
   310dc:	ldrb	r0, [r1]
   310e0:	ldrb	r0, [r5, r0, lsr #2]
   310e4:	strb	r0, [r7]
   310e8:	ldrb	r0, [r1]
   310ec:	lsl	r0, r0, #4
   310f0:	and	r0, r0, #48	; 0x30
   310f4:	ldrb	ip, [r1, #1]
   310f8:	orr	r0, r0, ip, lsr #4
   310fc:	ldrb	r0, [r5, r0]
   31100:	strb	r0, [r7, #1]
   31104:	ldrb	r1, [r1, #1]
   31108:	lsl	r1, r1, #2
   3110c:	and	r1, r1, #60	; 0x3c
   31110:	ldrb	r1, [r5, r1]
   31114:	strb	r1, [r7, #2]
   31118:	cmp	r9, #0
   3111c:	addeq	r7, r7, #3
   31120:	movne	r1, #61	; 0x3d
   31124:	strbne	r1, [r7, #3]
   31128:	addne	r7, r7, #4
   3112c:	b	31178 <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   31130:	ldr	r5, [pc, #184]	; 311f0 <flatcc_json_parser_struct_as_root@@Base+0x1238>
   31134:	b	31048 <flatcc_json_parser_struct_as_root@@Base+0x1090>
   31138:	mov	r7, r8
   3113c:	b	310c8 <flatcc_json_parser_struct_as_root@@Base+0x1110>
   31140:	ldrb	r0, [r1]
   31144:	ldrb	r0, [r5, r0, lsr #2]
   31148:	strb	r0, [r7]
   3114c:	ldrb	r1, [r1]
   31150:	lsl	r1, r1, #4
   31154:	and	r1, r1, #48	; 0x30
   31158:	ldrb	r1, [r5, r1]
   3115c:	strb	r1, [r7, #1]
   31160:	cmp	r9, #0
   31164:	addeq	r7, r7, #2
   31168:	movne	r1, #61	; 0x3d
   3116c:	strbne	r1, [r7, #2]
   31170:	strbne	r1, [r7, #3]
   31174:	addne	r7, r7, #4
   31178:	cmp	r2, #0
   3117c:	moveq	r0, #0
   31180:	moveq	r6, r0
   31184:	beq	311b4 <flatcc_json_parser_struct_as_root@@Base+0x11fc>
   31188:	mov	r0, #0
   3118c:	mov	r6, r0
   31190:	b	311a4 <flatcc_json_parser_struct_as_root@@Base+0x11ec>
   31194:	mov	r7, r8
   31198:	mov	r0, #3
   3119c:	cmp	r2, #0
   311a0:	beq	311b4 <flatcc_json_parser_struct_as_root@@Base+0x11fc>
   311a4:	sub	r7, r7, r8
   311a8:	str	r7, [r2]
   311ac:	cmp	r3, #0
   311b0:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   311b4:	ldr	r2, [r3]
   311b8:	sub	r6, r2, r6
   311bc:	str	r6, [r3]
   311c0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   311c4:	mov	r0, #0
   311c8:	mov	r6, r0
   311cc:	b	3119c <flatcc_json_parser_struct_as_root@@Base+0x11e4>
   311d0:	cmp	r2, #0
   311d4:	movne	r7, r0
   311d8:	movne	r0, #2
   311dc:	movne	r6, #0
   311e0:	bne	311a4 <flatcc_json_parser_struct_as_root@@Base+0x11ec>
   311e4:	mov	r0, #2
   311e8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   311ec:	andeq	r3, r4, r8, ror #20
   311f0:	andeq	r3, r4, r4, lsr #20
   311f4:	ldr	r3, [r0, #20]
   311f8:	ldr	r2, [r0, #16]
   311fc:	cmp	r3, r2
   31200:	bcc	3122c <flatcc_json_parser_struct_as_root@@Base+0x1274>
   31204:	ldr	r2, [r0, #36]	; 0x24
   31208:	cmp	r2, #0
   3120c:	moveq	r2, #3
   31210:	streq	r2, [r0, #36]	; 0x24
   31214:	ldr	r1, [r0]
   31218:	sub	r3, r3, r1
   3121c:	ldr	r2, [r0, #12]
   31220:	add	r3, r2, r3
   31224:	str	r3, [r0, #12]
   31228:	str	r1, [r0, #20]
   3122c:	ldr	r3, [r0, #20]
   31230:	mov	r2, #0
   31234:	strb	r2, [r3]
   31238:	bx	lr
   3123c:	sub	sp, sp, #8
   31240:	push	{r4, r5, r6, lr}
   31244:	add	r1, sp, #12
   31248:	stmib	r1, {r2, r3}
   3124c:	ldrd	r2, [sp, #16]
   31250:	ldr	r6, [sp, #24]
   31254:	orrs	r1, r2, r3
   31258:	beq	31308 <flatcc_json_parser_struct_as_root@@Base+0x1350>
   3125c:	mov	lr, r0
   31260:	mov	r0, #0
   31264:	ldr	r1, [pc, #176]	; 3131c <flatcc_json_parser_struct_as_root@@Base+0x1364>
   31268:	and	r0, r0, r2
   3126c:	and	r1, r1, r3
   31270:	orrs	r1, r0, r1
   31274:	subeq	ip, r6, #10
   31278:	bne	312b0 <flatcc_json_parser_struct_as_root@@Base+0x12f8>
   3127c:	lsl	r1, r3, #10
   31280:	orr	r1, r1, r2, lsr #22
   31284:	lsl	r0, r2, #10
   31288:	mov	r2, r0
   3128c:	mov	r3, r1
   31290:	mov	r6, ip
   31294:	mov	r0, #0
   31298:	ldr	r1, [pc, #124]	; 3131c <flatcc_json_parser_struct_as_root@@Base+0x1364>
   3129c:	and	r0, r0, r2
   312a0:	and	r1, r1, r3
   312a4:	sub	ip, ip, #10
   312a8:	orrs	r1, r0, r1
   312ac:	beq	3127c <flatcc_json_parser_struct_as_root@@Base+0x12c4>
   312b0:	cmp	r2, #0
   312b4:	sbcs	r1, r3, #0
   312b8:	blt	312e4 <flatcc_json_parser_struct_as_root@@Base+0x132c>
   312bc:	sub	r1, r6, #1
   312c0:	adds	r4, r2, r2
   312c4:	adc	r5, r3, r3
   312c8:	mov	r2, r4
   312cc:	mov	r3, r5
   312d0:	mov	r6, r1
   312d4:	sub	r1, r1, #1
   312d8:	cmp	r4, #0
   312dc:	sbcs	r0, r5, #0
   312e0:	bge	312c0 <flatcc_json_parser_struct_as_root@@Base+0x1308>
   312e4:	strd	r2, [sp, #16]
   312e8:	str	r6, [sp, #24]
   312ec:	add	r3, sp, #12
   312f0:	ldmib	r3, {r0, r1, r2, r3}
   312f4:	stm	lr, {r0, r1, r2, r3}
   312f8:	mov	r0, lr
   312fc:	pop	{r4, r5, r6, lr}
   31300:	add	sp, sp, #8
   31304:	bx	lr
   31308:	ldr	r3, [pc, #16]	; 31320 <flatcc_json_parser_struct_as_root@@Base+0x1368>
   3130c:	mov	r2, #260	; 0x104
   31310:	ldr	r1, [pc, #12]	; 31324 <flatcc_json_parser_struct_as_root@@Base+0x136c>
   31314:	ldr	r0, [pc, #12]	; 31328 <flatcc_json_parser_struct_as_root@@Base+0x1370>
   31318:	bl	14618 <__assert_fail@plt>
   3131c:			; <UNDEFINED> instruction: 0xffc00000
   31320:			; <UNDEFINED> instruction: 0x000433b4
   31324:			; <UNDEFINED> instruction: 0x00042eb8
   31328:	andeq	r2, r4, r0, lsl pc
   3132c:	push	{r4, r5, r6, r7, r8, lr}
   31330:	mov	r5, r0
   31334:	mov	r7, r1
   31338:	mov	r6, r2
   3133c:	ldr	r2, [r0, #20]
   31340:	ldr	r3, [r0, #16]
   31344:	cmp	r2, r3
   31348:	bcs	313cc <flatcc_json_parser_struct_as_root@@Base+0x1414>
   3134c:	ldr	r4, [r5, #16]
   31350:	ldr	r3, [r5, #20]
   31354:	sub	r4, r4, r3
   31358:	cmp	r4, r6
   3135c:	bcs	313ac <flatcc_json_parser_struct_as_root@@Base+0x13f4>
   31360:	mov	r8, #0
   31364:	mov	r2, r4
   31368:	mov	r1, r7
   3136c:	ldr	r0, [r5, #20]
   31370:	bl	1454c <memcpy@plt>
   31374:	ldr	r3, [r5, #20]
   31378:	add	r3, r3, r4
   3137c:	str	r3, [r5, #20]
   31380:	add	r7, r7, r4
   31384:	sub	r6, r6, r4
   31388:	ldr	r3, [r5, #44]	; 0x2c
   3138c:	mov	r1, r8
   31390:	mov	r0, r5
   31394:	blx	r3
   31398:	ldr	r4, [r5, #16]
   3139c:	ldr	r3, [r5, #20]
   313a0:	sub	r4, r4, r3
   313a4:	cmp	r6, r4
   313a8:	bhi	31364 <flatcc_json_parser_struct_as_root@@Base+0x13ac>
   313ac:	mov	r2, r6
   313b0:	mov	r1, r7
   313b4:	ldr	r0, [r5, #20]
   313b8:	bl	1454c <memcpy@plt>
   313bc:	ldr	r3, [r5, #20]
   313c0:	add	r6, r3, r6
   313c4:	str	r6, [r5, #20]
   313c8:	pop	{r4, r5, r6, r7, r8, pc}
   313cc:	ldr	r3, [r0, #44]	; 0x2c
   313d0:	mov	r1, #0
   313d4:	blx	r3
   313d8:	b	3134c <flatcc_json_parser_struct_as_root@@Base+0x1394>
   313dc:	cmp	r0, #0
   313e0:	ldr	r3, [pc, #40]	; 31410 <flatcc_json_parser_struct_as_root@@Base+0x1458>
   313e4:	ldrne	r0, [r3, #228]	; 0xe4
   313e8:	strne	r0, [r1]
   313ec:	ldrbne	r3, [r3, #232]	; 0xe8
   313f0:	strbne	r3, [r1, #4]
   313f4:	movne	r0, #4
   313f8:	ldreq	r0, [r3, #236]	; 0xec
   313fc:	streq	r0, [r1]
   31400:	ldrheq	r3, [r3, #240]	; 0xf0
   31404:	strheq	r3, [r1, #4]
   31408:	moveq	r0, #5
   3140c:	bx	lr
   31410:	andeq	r3, r4, r8, ror #5
   31414:	push	{r4, r5, r6, r7, r8, lr}
   31418:	mov	r4, r0
   3141c:	mov	r6, r1
   31420:	ldr	r2, [r0, #20]
   31424:	ldr	r3, [r0, #16]
   31428:	cmp	r2, r3
   3142c:	bcs	314b0 <flatcc_json_parser_struct_as_root@@Base+0x14f8>
   31430:	ldr	r5, [r4, #16]
   31434:	ldr	r3, [r4, #20]
   31438:	sub	r5, r5, r3
   3143c:	cmp	r5, r6
   31440:	bcs	31490 <flatcc_json_parser_struct_as_root@@Base+0x14d8>
   31444:	mov	r8, #32
   31448:	mov	r7, #0
   3144c:	mov	r2, r5
   31450:	mov	r1, r8
   31454:	ldr	r0, [r4, #20]
   31458:	bl	145c4 <memset@plt>
   3145c:	ldr	r3, [r4, #20]
   31460:	add	r3, r3, r5
   31464:	str	r3, [r4, #20]
   31468:	sub	r6, r6, r5
   3146c:	ldr	r3, [r4, #44]	; 0x2c
   31470:	mov	r1, r7
   31474:	mov	r0, r4
   31478:	blx	r3
   3147c:	ldr	r5, [r4, #16]
   31480:	ldr	r3, [r4, #20]
   31484:	sub	r5, r5, r3
   31488:	cmp	r6, r5
   3148c:	bhi	3144c <flatcc_json_parser_struct_as_root@@Base+0x1494>
   31490:	mov	r2, r6
   31494:	mov	r1, #32
   31498:	ldr	r0, [r4, #20]
   3149c:	bl	145c4 <memset@plt>
   314a0:	ldr	r3, [r4, #20]
   314a4:	add	r6, r3, r6
   314a8:	str	r6, [r4, #20]
   314ac:	pop	{r4, r5, r6, r7, r8, pc}
   314b0:	ldr	r3, [r0, #44]	; 0x2c
   314b4:	mov	r1, #0
   314b8:	blx	r3
   314bc:	b	31430 <flatcc_json_parser_struct_as_root@@Base+0x1478>
   314c0:	push	{r4, r5, r6, lr}
   314c4:	mov	r4, r0
   314c8:	ldrb	r3, [r0, #25]
   314cc:	ldr	r5, [r0, #32]
   314d0:	mul	r5, r5, r3
   314d4:	ldr	r0, [r0, #20]
   314d8:	add	r3, r0, r5
   314dc:	ldr	r2, [r4, #16]
   314e0:	cmp	r2, r3
   314e4:	bcc	31504 <flatcc_json_parser_struct_as_root@@Base+0x154c>
   314e8:	mov	r2, r5
   314ec:	mov	r1, #32
   314f0:	bl	145c4 <memset@plt>
   314f4:	ldr	r3, [r4, #20]
   314f8:	add	r5, r3, r5
   314fc:	str	r5, [r4, #20]
   31500:	pop	{r4, r5, r6, pc}
   31504:	mov	r1, r5
   31508:	mov	r0, r4
   3150c:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   31510:	pop	{r4, r5, r6, pc}
   31514:	push	{r4, r5, lr}
   31518:	sub	sp, sp, #12
   3151c:	mov	r5, r0
   31520:	mov	r0, #0
   31524:	str	r0, [sp, #4]
   31528:	cmp	r1, r0
   3152c:	cmpne	r2, #7
   31530:	bls	31570 <flatcc_json_parser_struct_as_root@@Base+0x15b8>
   31534:	mov	r4, r1
   31538:	cmp	r3, #0
   3153c:	beq	31564 <flatcc_json_parser_struct_as_root@@Base+0x15ac>
   31540:	mov	r2, #4
   31544:	mov	r1, r3
   31548:	add	r0, sp, r2
   3154c:	bl	145d0 <strncpy@plt>
   31550:	ldr	r3, [sp, #4]
   31554:	ldr	r2, [r4, #4]
   31558:	cmp	r2, r3
   3155c:	cmpne	r3, #0
   31560:	bne	31594 <flatcc_json_parser_struct_as_root@@Base+0x15dc>
   31564:	mov	r0, #1
   31568:	add	sp, sp, #12
   3156c:	pop	{r4, r5, pc}
   31570:	ldr	r3, [r5, #36]	; 0x24
   31574:	cmp	r3, r0
   31578:	moveq	r3, #1
   3157c:	streq	r3, [r5, #36]	; 0x24
   31580:	ldr	r3, [pc, #48]	; 315b8 <flatcc_json_parser_struct_as_root@@Base+0x1600>
   31584:	ldr	r2, [pc, #48]	; 315bc <flatcc_json_parser_struct_as_root@@Base+0x1604>
   31588:	ldr	r1, [pc, #48]	; 315c0 <flatcc_json_parser_struct_as_root@@Base+0x1608>
   3158c:	ldr	r0, [pc, #48]	; 315c4 <flatcc_json_parser_struct_as_root@@Base+0x160c>
   31590:	bl	14618 <__assert_fail@plt>
   31594:	ldr	r3, [r5, #36]	; 0x24
   31598:	cmp	r3, #0
   3159c:	moveq	r3, #1
   315a0:	streq	r3, [r5, #36]	; 0x24
   315a4:	ldr	r3, [pc, #12]	; 315b8 <flatcc_json_parser_struct_as_root@@Base+0x1600>
   315a8:	ldr	r2, [pc, #24]	; 315c8 <flatcc_json_parser_struct_as_root@@Base+0x1610>
   315ac:	ldr	r1, [pc, #12]	; 315c0 <flatcc_json_parser_struct_as_root@@Base+0x1608>
   315b0:	ldr	r0, [pc, #20]	; 315cc <flatcc_json_parser_struct_as_root@@Base+0x1614>
   315b4:	bl	14618 <__assert_fail@plt>
   315b8:	ldrdeq	r3, [r4], -ip
   315bc:	strdeq	r0, [r0], -fp
   315c0:	andeq	r3, r4, ip, lsr #21
   315c4:	strdeq	r3, [r4], -r8
   315c8:	andeq	r0, r0, r4, lsl #8
   315cc:	andeq	r3, r4, r8, lsl fp
   315d0:	push	{r4, r5, r6, lr}
   315d4:	mov	r4, r0
   315d8:	cmp	r1, #0
   315dc:	bne	315f0 <flatcc_json_parser_struct_as_root@@Base+0x1638>
   315e0:	ldr	r3, [r0, #20]
   315e4:	ldr	r5, [r0, #16]
   315e8:	cmp	r3, r5
   315ec:	bcs	31630 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   315f0:	ldr	r0, [r4]
   315f4:	ldr	r5, [r4, #20]
   315f8:	sub	r5, r5, r0
   315fc:	ldr	r3, [r4, #40]	; 0x28
   31600:	mov	r2, #1
   31604:	mov	r1, r5
   31608:	bl	14570 <fwrite@plt>
   3160c:	ldr	r3, [r4]
   31610:	str	r3, [r4, #20]
   31614:	ldr	r3, [r4, #12]
   31618:	add	r5, r3, r5
   3161c:	str	r5, [r4, #12]
   31620:	ldr	r3, [r4, #20]
   31624:	mov	r2, #0
   31628:	strb	r2, [r3]
   3162c:	pop	{r4, r5, r6, pc}
   31630:	sub	r5, r3, r5
   31634:	ldr	r3, [r0, #40]	; 0x28
   31638:	mov	r2, #1
   3163c:	ldr	r1, [r0, #8]
   31640:	ldr	r0, [r0]
   31644:	bl	14570 <fwrite@plt>
   31648:	ldr	r0, [r4]
   3164c:	ldr	r1, [r4, #8]
   31650:	mov	r2, r5
   31654:	add	r1, r0, r1
   31658:	bl	1454c <memcpy@plt>
   3165c:	ldr	r3, [r4]
   31660:	add	r3, r3, r5
   31664:	str	r3, [r4, #20]
   31668:	ldr	r3, [r4, #12]
   3166c:	ldr	r2, [r4, #8]
   31670:	add	r3, r3, r2
   31674:	str	r3, [r4, #12]
   31678:	b	31620 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3167c:	push	{r4, r5, r6, lr}
   31680:	ldr	r3, [r0, #20]
   31684:	ldr	r5, [r0]
   31688:	mov	r2, #0
   3168c:	strb	r2, [r3]
   31690:	ldr	r1, [r0, #20]
   31694:	ldr	r2, [r0, #16]
   31698:	cmp	r1, r2
   3169c:	popcc	{r4, r5, r6, pc}
   316a0:	mov	r4, r0
   316a4:	sub	r5, r3, r5
   316a8:	ldr	r1, [r0, #4]
   316ac:	lsl	r1, r1, #1
   316b0:	ldr	r0, [r0]
   316b4:	bl	14564 <realloc@plt>
   316b8:	cmp	r0, #0
   316bc:	beq	316f8 <flatcc_json_parser_struct_as_root@@Base+0x1740>
   316c0:	ldr	r3, [r4, #4]
   316c4:	lsl	r3, r3, #1
   316c8:	str	r3, [r4, #4]
   316cc:	sub	r3, r3, #64	; 0x40
   316d0:	str	r3, [r4, #8]
   316d4:	str	r0, [r4]
   316d8:	add	r5, r0, r5
   316dc:	str	r5, [r4, #20]
   316e0:	add	r0, r0, r3
   316e4:	str	r0, [r4, #16]
   316e8:	ldr	r3, [r4, #20]
   316ec:	mov	r2, #0
   316f0:	strb	r2, [r3]
   316f4:	pop	{r4, r5, r6, pc}
   316f8:	ldr	r3, [r4, #36]	; 0x24
   316fc:	cmp	r3, #0
   31700:	moveq	r3, #3
   31704:	streq	r3, [r4, #36]	; 0x24
   31708:	ldr	r3, [r4, #12]
   3170c:	add	r3, r3, r5
   31710:	str	r3, [r4, #12]
   31714:	ldr	r3, [r4]
   31718:	str	r3, [r4, #20]
   3171c:	b	316e8 <flatcc_json_parser_struct_as_root@@Base+0x1730>
   31720:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31724:	mov	r8, r0
   31728:	mov	r7, r2
   3172c:	ldr	r3, [r0, #20]
   31730:	add	r2, r3, #1
   31734:	str	r2, [r0, #20]
   31738:	mov	r2, #34	; 0x22
   3173c:	strb	r2, [r3]
   31740:	mov	r9, #92	; 0x5c
   31744:	mov	fp, #102	; 0x66
   31748:	mov	sl, #48	; 0x30
   3174c:	b	317b4 <flatcc_json_parser_struct_as_root@@Base+0x17fc>
   31750:	mov	r5, r1
   31754:	b	31808 <flatcc_json_parser_struct_as_root@@Base+0x1850>
   31758:	mov	r2, r6
   3175c:	mov	r0, r8
   31760:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   31764:	b	31834 <flatcc_json_parser_struct_as_root@@Base+0x187c>
   31768:	cmp	r4, #34	; 0x22
   3176c:	beq	31798 <flatcc_json_parser_struct_as_root@@Base+0x17e0>
   31770:	cmp	r4, #92	; 0x5c
   31774:	beq	318f0 <flatcc_json_parser_struct_as_root@@Base+0x1938>
   31778:	cmp	r4, #13
   3177c:	bne	31870 <flatcc_json_parser_struct_as_root@@Base+0x18b8>
   31780:	ldr	r3, [r8, #20]
   31784:	add	r2, r3, #1
   31788:	str	r2, [r8, #20]
   3178c:	mov	r2, #114	; 0x72
   31790:	strb	r2, [r3]
   31794:	b	317ac <flatcc_json_parser_struct_as_root@@Base+0x17f4>
   31798:	ldr	r3, [r8, #20]
   3179c:	add	r2, r3, #1
   317a0:	str	r2, [r8, #20]
   317a4:	mov	r2, #34	; 0x22
   317a8:	strb	r2, [r3]
   317ac:	sub	r7, r7, #1
   317b0:	add	r1, r5, #1
   317b4:	ldrb	r4, [r1]
   317b8:	cmp	r4, #34	; 0x22
   317bc:	cmpne	r4, #31
   317c0:	movhi	r3, #1
   317c4:	movls	r3, #0
   317c8:	cmp	r4, #92	; 0x5c
   317cc:	moveq	r3, #0
   317d0:	andne	r3, r3, #1
   317d4:	cmp	r3, #0
   317d8:	beq	31750 <flatcc_json_parser_struct_as_root@@Base+0x1798>
   317dc:	mov	r5, r1
   317e0:	ldrb	r4, [r5, #1]!
   317e4:	cmp	r4, #34	; 0x22
   317e8:	cmpne	r4, #31
   317ec:	movhi	r3, #1
   317f0:	movls	r3, #0
   317f4:	cmp	r4, #92	; 0x5c
   317f8:	moveq	r3, #0
   317fc:	andne	r3, r3, #1
   31800:	cmp	r3, #0
   31804:	bne	317e0 <flatcc_json_parser_struct_as_root@@Base+0x1828>
   31808:	sub	r6, r5, r1
   3180c:	ldr	r0, [r8, #20]
   31810:	add	r3, r0, r6
   31814:	ldr	r2, [r8, #16]
   31818:	cmp	r2, r3
   3181c:	bls	31758 <flatcc_json_parser_struct_as_root@@Base+0x17a0>
   31820:	mov	r2, r6
   31824:	bl	1454c <memcpy@plt>
   31828:	ldr	r3, [r8, #20]
   3182c:	add	r3, r3, r6
   31830:	str	r3, [r8, #20]
   31834:	subs	r7, r7, r6
   31838:	beq	31960 <flatcc_json_parser_struct_as_root@@Base+0x19a8>
   3183c:	ldr	r3, [r8, #20]
   31840:	add	r2, r3, #1
   31844:	str	r2, [r8, #20]
   31848:	strb	r9, [r3]
   3184c:	cmp	r4, #12
   31850:	beq	3191c <flatcc_json_parser_struct_as_root@@Base+0x1964>
   31854:	bhi	31768 <flatcc_json_parser_struct_as_root@@Base+0x17b0>
   31858:	cmp	r4, #9
   3185c:	beq	31904 <flatcc_json_parser_struct_as_root@@Base+0x194c>
   31860:	cmp	r4, #10
   31864:	beq	31930 <flatcc_json_parser_struct_as_root@@Base+0x1978>
   31868:	cmp	r4, #8
   3186c:	beq	31948 <flatcc_json_parser_struct_as_root@@Base+0x1990>
   31870:	ldr	r3, [r8, #20]
   31874:	add	r2, r3, #1
   31878:	str	r2, [r8, #20]
   3187c:	mov	r2, #117	; 0x75
   31880:	strb	r2, [r3]
   31884:	ldr	r3, [r8, #20]
   31888:	add	r2, r3, #1
   3188c:	str	r2, [r8, #20]
   31890:	strb	sl, [r3]
   31894:	ldr	r3, [r8, #20]
   31898:	add	r2, r3, #1
   3189c:	str	r2, [r8, #20]
   318a0:	strb	sl, [r3]
   318a4:	lsr	r1, r4, #4
   318a8:	cmp	r1, #9
   318ac:	movls	r3, #48	; 0x30
   318b0:	movhi	r3, #87	; 0x57
   318b4:	ldr	r2, [r8, #20]
   318b8:	add	r0, r2, #1
   318bc:	str	r0, [r8, #20]
   318c0:	add	r3, r3, r1
   318c4:	strb	r3, [r2]
   318c8:	and	r4, r4, #15
   318cc:	cmp	r4, #9
   318d0:	movls	r3, #48	; 0x30
   318d4:	movhi	r3, #87	; 0x57
   318d8:	ldr	r2, [r8, #20]
   318dc:	add	r1, r2, #1
   318e0:	str	r1, [r8, #20]
   318e4:	add	r4, r3, r4
   318e8:	strb	r4, [r2]
   318ec:	b	317ac <flatcc_json_parser_struct_as_root@@Base+0x17f4>
   318f0:	ldr	r3, [r8, #20]
   318f4:	add	r2, r3, #1
   318f8:	str	r2, [r8, #20]
   318fc:	strb	r9, [r3]
   31900:	b	317ac <flatcc_json_parser_struct_as_root@@Base+0x17f4>
   31904:	ldr	r3, [r8, #20]
   31908:	add	r2, r3, #1
   3190c:	str	r2, [r8, #20]
   31910:	mov	r2, #116	; 0x74
   31914:	strb	r2, [r3]
   31918:	b	317ac <flatcc_json_parser_struct_as_root@@Base+0x17f4>
   3191c:	ldr	r3, [r8, #20]
   31920:	add	r2, r3, #1
   31924:	str	r2, [r8, #20]
   31928:	strb	fp, [r3]
   3192c:	b	317ac <flatcc_json_parser_struct_as_root@@Base+0x17f4>
   31930:	ldr	r3, [r8, #20]
   31934:	add	r2, r3, #1
   31938:	str	r2, [r8, #20]
   3193c:	mov	r2, #110	; 0x6e
   31940:	strb	r2, [r3]
   31944:	b	317ac <flatcc_json_parser_struct_as_root@@Base+0x17f4>
   31948:	ldr	r3, [r8, #20]
   3194c:	add	r2, r3, #1
   31950:	str	r2, [r8, #20]
   31954:	mov	r2, #98	; 0x62
   31958:	strb	r2, [r3]
   3195c:	b	317ac <flatcc_json_parser_struct_as_root@@Base+0x17f4>
   31960:	ldr	r3, [r8, #20]
   31964:	add	r2, r3, #1
   31968:	str	r2, [r8, #20]
   3196c:	mov	r2, #34	; 0x22
   31970:	strb	r2, [r3]
   31974:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31978:	push	{r4, r5, r6, r7, r8, lr}
   3197c:	mov	r4, r0
   31980:	mov	r6, r1
   31984:	mov	r5, r2
   31988:	ldrb	r3, [r0, #25]
   3198c:	cmp	r3, #0
   31990:	bne	319e8 <flatcc_json_parser_struct_as_root@@Base+0x1a30>
   31994:	ldr	r2, [r0, #20]
   31998:	ldr	r3, [r0, #16]
   3199c:	cmp	r2, r3
   319a0:	bcs	31a48 <flatcc_json_parser_struct_as_root@@Base+0x1a90>
   319a4:	ldr	r3, [r4, #20]
   319a8:	mov	r2, #34	; 0x22
   319ac:	strb	r2, [r3]
   319b0:	ldrb	r3, [r4, #26]
   319b4:	ldr	r0, [r4, #20]
   319b8:	cmp	r3, #0
   319bc:	addeq	r0, r0, #1
   319c0:	str	r0, [r4, #20]
   319c4:	add	r3, r0, r5
   319c8:	ldr	r2, [r4, #16]
   319cc:	cmp	r2, r3
   319d0:	bhi	31a58 <flatcc_json_parser_struct_as_root@@Base+0x1aa0>
   319d4:	mov	r2, r5
   319d8:	mov	r1, r6
   319dc:	mov	r0, r4
   319e0:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   319e4:	b	31a70 <flatcc_json_parser_struct_as_root@@Base+0x1ab8>
   319e8:	ldr	r3, [r0, #20]
   319ec:	add	r2, r3, #1
   319f0:	str	r2, [r0, #20]
   319f4:	mov	r2, #10
   319f8:	strb	r2, [r3]
   319fc:	ldrb	r3, [r0, #25]
   31a00:	ldr	r7, [r0, #32]
   31a04:	mul	r7, r7, r3
   31a08:	ldr	r0, [r0, #20]
   31a0c:	add	r3, r0, r7
   31a10:	ldr	r2, [r4, #16]
   31a14:	cmp	r2, r3
   31a18:	bcc	31a38 <flatcc_json_parser_struct_as_root@@Base+0x1a80>
   31a1c:	mov	r2, r7
   31a20:	mov	r1, #32
   31a24:	bl	145c4 <memset@plt>
   31a28:	ldr	r3, [r4, #20]
   31a2c:	add	r7, r3, r7
   31a30:	str	r7, [r4, #20]
   31a34:	b	319a4 <flatcc_json_parser_struct_as_root@@Base+0x19ec>
   31a38:	mov	r1, r7
   31a3c:	mov	r0, r4
   31a40:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   31a44:	b	319a4 <flatcc_json_parser_struct_as_root@@Base+0x19ec>
   31a48:	ldr	r3, [r0, #44]	; 0x2c
   31a4c:	mov	r1, #0
   31a50:	blx	r3
   31a54:	b	319a4 <flatcc_json_parser_struct_as_root@@Base+0x19ec>
   31a58:	mov	r2, r5
   31a5c:	mov	r1, r6
   31a60:	bl	1454c <memcpy@plt>
   31a64:	ldr	r3, [r4, #20]
   31a68:	add	r5, r3, r5
   31a6c:	str	r5, [r4, #20]
   31a70:	ldr	r3, [r4, #20]
   31a74:	mov	r2, #34	; 0x22
   31a78:	strb	r2, [r3]
   31a7c:	ldrb	r3, [r4, #26]
   31a80:	clz	r3, r3
   31a84:	lsr	r3, r3, #5
   31a88:	ldr	r1, [r4, #20]
   31a8c:	add	r2, r1, r3
   31a90:	add	r2, r2, #1
   31a94:	str	r2, [r4, #20]
   31a98:	mov	r2, #58	; 0x3a
   31a9c:	strb	r2, [r1, r3]
   31aa0:	ldr	r3, [r4, #20]
   31aa4:	mov	r2, #32
   31aa8:	strb	r2, [r3]
   31aac:	ldrb	r2, [r4, #25]
   31ab0:	ldr	r3, [r4, #20]
   31ab4:	cmp	r2, #0
   31ab8:	addne	r3, r3, #1
   31abc:	str	r3, [r4, #20]
   31ac0:	pop	{r4, r5, r6, r7, r8, pc}
   31ac4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31ac8:	sub	sp, sp, #212	; 0xd4
   31acc:	vmov	r2, r3, d0
   31ad0:	vstr	d0, [sp, #80]	; 0x50
   31ad4:	mov	r5, r3
   31ad8:	subs	r3, r0, #0
   31adc:	str	r3, [sp, #112]	; 0x70
   31ae0:	beq	32170 <flatcc_json_parser_struct_as_root@@Base+0x21b8>
   31ae4:	vmov	r4, s0
   31ae8:	adds	r0, r4, r4
   31aec:	adc	r1, r5, r5
   31af0:	mov	r2, #0
   31af4:	ldr	r3, [pc, #1188]	; 31fa0 <flatcc_json_parser_struct_as_root@@Base+0x1fe8>
   31af8:	cmp	r1, r3
   31afc:	cmpeq	r0, r2
   31b00:	bhi	32184 <flatcc_json_parser_struct_as_root@@Base+0x21cc>
   31b04:	cmp	r4, #0
   31b08:	sbcs	r3, r5, #0
   31b0c:	blt	3219c <flatcc_json_parser_struct_as_root@@Base+0x21e4>
   31b10:	ldr	r3, [sp, #112]	; 0x70
   31b14:	str	r3, [sp, #76]	; 0x4c
   31b18:	orrs	r3, r4, r5
   31b1c:	beq	321c4 <flatcc_json_parser_struct_as_root@@Base+0x220c>
   31b20:	mov	r2, #0
   31b24:	ldr	r3, [pc, #1144]	; 31fa4 <flatcc_json_parser_struct_as_root@@Base+0x1fec>
   31b28:	cmp	r5, r3
   31b2c:	cmpeq	r4, r2
   31b30:	beq	321e8 <flatcc_json_parser_struct_as_root@@Base+0x2230>
   31b34:	ldrd	r8, [sp, #80]	; 0x50
   31b38:	mov	sl, #0
   31b3c:	ldr	fp, [pc, #1120]	; 31fa4 <flatcc_json_parser_struct_as_root@@Base+0x1fec>
   31b40:	and	sl, sl, r8
   31b44:	and	fp, fp, r9
   31b48:	orrs	r3, sl, fp
   31b4c:	beq	32218 <flatcc_json_parser_struct_as_root@@Base+0x2260>
   31b50:	mvn	r6, #0
   31b54:	ldr	r7, [pc, #1124]	; 31fc0 <flatcc_json_parser_struct_as_root@@Base+0x2008>
   31b58:	and	r6, r6, r8
   31b5c:	and	r7, r7, r9
   31b60:	adds	r6, r6, #0
   31b64:	adc	r7, r7, #1048576	; 0x100000
   31b68:	lsl	r5, r9, #1
   31b6c:	lsr	r5, r5, #21
   31b70:	sub	r5, r5, #1072	; 0x430
   31b74:	sub	r5, r5, #3
   31b78:	strd	r6, [sp, #144]	; 0x90
   31b7c:	str	r5, [sp, #152]	; 0x98
   31b80:	add	r3, sp, #152	; 0x98
   31b84:	ldm	r3, {r0, r1}
   31b88:	stm	sp, {r0, r1}
   31b8c:	add	r3, sp, #144	; 0x90
   31b90:	ldm	r3, {r2, r3}
   31b94:	add	r0, sp, #160	; 0xa0
   31b98:	bl	3123c <flatcc_json_parser_struct_as_root@@Base+0x1284>
   31b9c:	ldrd	r2, [sp, #160]	; 0xa0
   31ba0:	strd	r2, [sp, #40]	; 0x28
   31ba4:	ldr	r3, [sp, #168]	; 0xa8
   31ba8:	str	r3, [sp, #56]	; 0x38
   31bac:	adds	r2, r6, r6
   31bb0:	adc	r3, r7, r7
   31bb4:	strd	r2, [sp, #32]
   31bb8:	adds	r2, r2, #1
   31bbc:	adc	r3, r3, #0
   31bc0:	strd	r2, [sp, #176]	; 0xb0
   31bc4:	sub	r4, r5, #1
   31bc8:	str	r4, [sp, #184]	; 0xb8
   31bcc:	add	r3, sp, #184	; 0xb8
   31bd0:	ldm	r3, {r0, r1}
   31bd4:	stm	sp, {r0, r1}
   31bd8:	add	r3, sp, #176	; 0xb0
   31bdc:	ldm	r3, {r2, r3}
   31be0:	add	r0, sp, #192	; 0xc0
   31be4:	bl	3123c <flatcc_json_parser_struct_as_root@@Base+0x1284>
   31be8:	ldr	ip, [sp, #200]	; 0xc8
   31bec:	vldr	d7, [sp, #80]	; 0x50
   31bf0:	vcmpe.f64	d7, #0.0
   31bf4:	vmrs	APSR_nzcv, fpscr
   31bf8:	ble	32230 <flatcc_json_parser_struct_as_root@@Base+0x2278>
   31bfc:	vldr	d7, [pc, #908]	; 31f90 <flatcc_json_parser_struct_as_root@@Base+0x1fd8>
   31c00:	vldr	d6, [sp, #80]	; 0x50
   31c04:	vcmpe.f64	d6, d7
   31c08:	vmrs	APSR_nzcv, fpscr
   31c0c:	bhi	32230 <flatcc_json_parser_struct_as_root@@Base+0x2278>
   31c10:	mvn	r2, #0
   31c14:	ldr	r3, [pc, #932]	; 31fc0 <flatcc_json_parser_struct_as_root@@Base+0x2008>
   31c18:	and	r2, r2, r8
   31c1c:	and	r3, r3, r9
   31c20:	orrs	r3, r2, r3
   31c24:	moveq	r3, #1
   31c28:	movne	r3, #0
   31c2c:	orrs	r2, sl, fp
   31c30:	moveq	r3, #0
   31c34:	andne	r3, r3, #1
   31c38:	cmp	r3, #0
   31c3c:	bne	32244 <flatcc_json_parser_struct_as_root@@Base+0x228c>
   31c40:	ldrd	r2, [sp, #32]
   31c44:	subs	r2, r2, #1
   31c48:	sbc	r3, r3, #0
   31c4c:	sub	r4, r4, ip
   31c50:	sub	r0, r4, #32
   31c54:	rsb	r1, r4, #32
   31c58:	lsl	fp, r3, r4
   31c5c:	orr	fp, fp, r2, lsl r0
   31c60:	orr	fp, fp, r2, lsr r1
   31c64:	lsl	sl, r2, r4
   31c68:	mvn	r3, #60	; 0x3c
   31c6c:	ldr	r2, [sp, #56]	; 0x38
   31c70:	sub	r3, r3, r2
   31c74:	vmov	s15, r3
   31c78:	vcvt.f64.s32	d7, s15
   31c7c:	vldr	d6, [pc, #788]	; 31f98 <flatcc_json_parser_struct_as_root@@Base+0x1fe0>
   31c80:	vmul.f64	d7, d7, d6
   31c84:	vcvt.s32.f64	s13, d7
   31c88:	vmov	r3, s13
   31c8c:	vcmpe.f64	d7, #0.0
   31c90:	vmrs	APSR_nzcv, fpscr
   31c94:	bmi	31cac <flatcc_json_parser_struct_as_root@@Base+0x1cf4>
   31c98:	vcvt.f64.s32	d6, s13
   31c9c:	vsub.f64	d7, d7, d6
   31ca0:	vcmp.f64	d7, #0.0
   31ca4:	vmrs	APSR_nzcv, fpscr
   31ca8:	addne	r3, r3, #1
   31cac:	add	r3, r3, #344	; 0x158
   31cb0:	adds	r2, r3, #3
   31cb4:	addmi	r2, r3, #10
   31cb8:	asr	r2, r2, #3
   31cbc:	add	r2, r2, #1
   31cc0:	ldr	r1, [pc, #736]	; 31fa8 <flatcc_json_parser_struct_as_root@@Base+0x1ff0>
   31cc4:	lsl	r2, r2, #4
   31cc8:	add	r3, r1, r2
   31ccc:	ldrd	r8, [r1, r2]
   31cd0:	ldrsh	lr, [r3, #8]
   31cd4:	ldrsh	r3, [r3, #10]
   31cd8:	str	r3, [sp, #132]	; 0x84
   31cdc:	ldrd	r0, [sp, #40]	; 0x28
   31ce0:	mov	r4, r0
   31ce4:	mov	r5, #0
   31ce8:	mov	r2, r8
   31cec:	mov	r3, #0
   31cf0:	umull	r6, r7, r0, r9
   31cf4:	strd	r6, [sp, #32]
   31cf8:	mla	r6, r9, r5, r7
   31cfc:	str	r6, [sp, #36]	; 0x24
   31d00:	umull	r6, r7, r1, r8
   31d04:	mla	r7, r1, r3, r7
   31d08:	mul	r1, r0, r3
   31d0c:	mla	r1, r8, r5, r1
   31d10:	umull	r4, r5, r4, r8
   31d14:	add	r5, r1, r5
   31d18:	mov	r1, #0
   31d1c:	adds	r0, r5, r6
   31d20:	adc	r1, r1, #0
   31d24:	adds	r0, r0, #-2147483648	; 0x80000000
   31d28:	adc	r1, r1, #0
   31d2c:	ldr	r5, [sp, #32]
   31d30:	adds	r0, r0, r5
   31d34:	adc	r1, r1, #0
   31d38:	str	r1, [sp, #48]	; 0x30
   31d3c:	mov	r1, #0
   31d40:	str	r1, [sp, #52]	; 0x34
   31d44:	ldr	r0, [sp, #36]	; 0x24
   31d48:	adds	r0, r0, r7
   31d4c:	adc	r1, r1, r1
   31d50:	ldr	r4, [sp, #44]	; 0x2c
   31d54:	umlal	r0, r1, r9, r4
   31d58:	ldrd	r4, [sp, #48]	; 0x30
   31d5c:	adds	r4, r4, r0
   31d60:	adc	r5, r5, r1
   31d64:	strd	r4, [sp, #120]	; 0x78
   31d68:	ldr	r1, [sp, #56]	; 0x38
   31d6c:	add	r8, r1, lr
   31d70:	add	r1, r8, #64	; 0x40
   31d74:	str	r1, [sp, #128]	; 0x80
   31d78:	mov	r0, sl
   31d7c:	mov	r1, #0
   31d80:	umull	r4, r5, sl, r9
   31d84:	strd	r4, [sp, #40]	; 0x28
   31d88:	mla	r4, r9, r1, r5
   31d8c:	str	r4, [sp, #44]	; 0x2c
   31d90:	umull	r4, r5, fp, r2
   31d94:	strd	r4, [sp, #48]	; 0x30
   31d98:	mla	r4, fp, r3, r5
   31d9c:	str	r4, [sp, #52]	; 0x34
   31da0:	add	ip, ip, lr
   31da4:	add	ip, ip, #64	; 0x40
   31da8:	str	ip, [sp, #116]	; 0x74
   31dac:	ldrd	r6, [sp, #192]	; 0xc0
   31db0:	mov	r7, #0
   31db4:	umull	r4, r5, r6, r9
   31db8:	strd	r4, [sp, #64]	; 0x40
   31dbc:	mla	ip, r9, r7, r5
   31dc0:	str	ip, [sp, #68]	; 0x44
   31dc4:	ldr	ip, [sp, #196]	; 0xc4
   31dc8:	umull	r4, r5, ip, r2
   31dcc:	strd	r4, [sp, #32]
   31dd0:	mla	ip, ip, r3, r5
   31dd4:	str	ip, [sp, #36]	; 0x24
   31dd8:	mul	ip, sl, r3
   31ddc:	mla	ip, r2, r1, ip
   31de0:	umull	r0, r1, r0, r2
   31de4:	add	r1, ip, r1
   31de8:	mov	r4, r1
   31dec:	mov	r5, #0
   31df0:	ldr	r1, [sp, #48]	; 0x30
   31df4:	adds	r4, r4, r1
   31df8:	adc	r5, r5, #0
   31dfc:	adds	r4, r4, #-2147483648	; 0x80000000
   31e00:	adc	r5, r5, #0
   31e04:	ldr	r1, [sp, #40]	; 0x28
   31e08:	adds	r4, r4, r1
   31e0c:	adc	r5, r5, #0
   31e10:	str	r5, [sp, #56]	; 0x38
   31e14:	mov	r1, #0
   31e18:	str	r1, [sp, #60]	; 0x3c
   31e1c:	umull	r4, r5, fp, r9
   31e20:	subs	r4, r4, #1
   31e24:	sbc	r5, r5, #0
   31e28:	ldr	r0, [sp, #52]	; 0x34
   31e2c:	mov	r1, #0
   31e30:	adds	r0, r0, r4
   31e34:	adc	r1, r1, r5
   31e38:	ldr	r4, [sp, #44]	; 0x2c
   31e3c:	mov	r5, #0
   31e40:	adds	r4, r4, r0
   31e44:	adc	r5, r5, r1
   31e48:	ldrd	r0, [sp, #56]	; 0x38
   31e4c:	adds	r0, r0, r4
   31e50:	adc	r1, r1, r5
   31e54:	mov	r4, r0
   31e58:	mov	r5, r1
   31e5c:	mul	r1, r6, r3
   31e60:	mla	r1, r2, r7, r1
   31e64:	umull	r2, r3, r6, r2
   31e68:	add	r3, r1, r3
   31e6c:	mov	r0, r3
   31e70:	mov	r1, #0
   31e74:	ldr	r3, [sp, #32]
   31e78:	adds	r0, r0, r3
   31e7c:	adc	r1, r1, #0
   31e80:	adds	r0, r0, #-2147483648	; 0x80000000
   31e84:	adc	r1, r1, #0
   31e88:	ldrd	sl, [sp, #64]	; 0x40
   31e8c:	adds	r0, r0, sl
   31e90:	adc	r1, r1, #0
   31e94:	mov	r6, r1
   31e98:	mov	r7, #0
   31e9c:	ldr	r3, [sp, #196]	; 0xc4
   31ea0:	umull	r0, r1, r3, r9
   31ea4:	adds	r0, r0, #1
   31ea8:	adc	r1, r1, #0
   31eac:	ldr	r2, [sp, #36]	; 0x24
   31eb0:	adds	r2, r2, r0
   31eb4:	adc	r3, r7, r1
   31eb8:	adds	r2, r2, fp
   31ebc:	adc	r3, r3, r7
   31ec0:	adds	r0, r6, r2
   31ec4:	adc	r1, r7, r3
   31ec8:	strd	r0, [sp, #104]	; 0x68
   31ecc:	subs	sl, r0, r4
   31ed0:	sbc	fp, r1, r5
   31ed4:	cmp	r5, r1
   31ed8:	cmpeq	r4, r0
   31edc:	bhi	32260 <flatcc_json_parser_struct_as_root@@Base+0x22a8>
   31ee0:	mvn	r9, #63	; 0x3f
   31ee4:	sub	r9, r9, r8
   31ee8:	mov	r3, #1
   31eec:	sub	r2, r9, #32
   31ef0:	rsb	r1, r9, #32
   31ef4:	lsl	r0, r3, r2
   31ef8:	orr	r0, r0, r3, lsr r1
   31efc:	str	r0, [sp, #100]	; 0x64
   31f00:	lsl	r3, r3, r9
   31f04:	str	r3, [sp, #96]	; 0x60
   31f08:	ldrd	r6, [sp, #104]	; 0x68
   31f0c:	lsr	r5, r6, r9
   31f10:	orr	r5, r5, r7, lsl r1
   31f14:	mov	r0, r6
   31f18:	mov	r1, r7
   31f1c:	orr	r5, r5, r7, lsr r2
   31f20:	ldrd	r2, [sp, #96]	; 0x60
   31f24:	subs	r2, r2, #1
   31f28:	sbc	r3, r3, #0
   31f2c:	mov	r6, r2
   31f30:	mov	r7, r3
   31f34:	strd	r6, [sp, #88]	; 0x58
   31f38:	mov	r2, r0
   31f3c:	mov	r3, r1
   31f40:	and	r2, r2, r6
   31f44:	and	r3, r3, r7
   31f48:	strd	r2, [sp, #40]	; 0x28
   31f4c:	add	r8, r8, #129	; 0x81
   31f50:	add	r3, r8, r8, lsl #4
   31f54:	add	r8, r8, r3, lsl #3
   31f58:	add	r8, r8, r8, lsl #3
   31f5c:	asr	r8, r8, #12
   31f60:	add	r6, r8, #1
   31f64:	ldr	r3, [pc, #64]	; 31fac <flatcc_json_parser_struct_as_root@@Base+0x1ff4>
   31f68:	add	r3, r3, r6, lsl #2
   31f6c:	ldr	r3, [r3, #1700]	; 0x6a4
   31f70:	cmp	r5, r3
   31f74:	movcc	r6, r8
   31f78:	ldr	r3, [pc, #44]	; 31fac <flatcc_json_parser_struct_as_root@@Base+0x1ff4>
   31f7c:	add	r3, r3, r6, lsl #2
   31f80:	ldr	r4, [r3, #1700]	; 0x6a4
   31f84:	cmp	r6, #0
   31f88:	ble	323f4 <flatcc_json_parser_struct_as_root@@Base+0x243c>
   31f8c:	b	31fe4 <flatcc_json_parser_struct_as_root@@Base+0x202c>
   31f90:			; <UNDEFINED> instruction: 0xffffffff
   31f94:	svcvc	0x00efffff
   31f98:			; <UNDEFINED> instruction: 0x509f79fe
   31f9c:	svccc	0x00d34413
   31fa0:			; <UNDEFINED> instruction: 0xffe00000
   31fa4:	svcvc	0x00f00000	; IMB
   31fa8:	andeq	r3, r4, r8, lsl #8
   31fac:	andeq	r3, r4, r8, ror #5
   31fb0:	stclgt	12, cr12, [ip], {205}	; 0xcd
   31fb4:	andeq	r3, r4, ip, ror #7
   31fb8:	andeq	r3, r4, ip, lsl #23
   31fbc:	muleq	r4, r0, fp
   31fc0:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   31fc4:			; <UNDEFINED> instruction: 0xfffffbce
   31fc8:	andeq	r3, r4, r0, lsl #8
   31fcc:	andeq	r3, r4, r4, lsr fp
   31fd0:	andeq	r3, r4, r0, lsr #23
   31fd4:	andeq	r3, r4, r8, ror r9
   31fd8:			; <UNDEFINED> instruction: 0x00042eb8
   31fdc:	andeq	r3, r4, r8, asr #23
   31fe0:	andeq	r3, r4, r4, ror #23
   31fe4:	mov	r1, r4
   31fe8:	mov	r0, r5
   31fec:	bl	3ce84 <flatcc_json_printer_clear@@Base+0x38>
   31ff0:	add	r0, r0, #48	; 0x30
   31ff4:	ldr	r3, [sp, #76]	; 0x4c
   31ff8:	strb	r0, [r3]
   31ffc:	mov	r1, r4
   32000:	mov	r0, r5
   32004:	bl	3d070 <flatcc_json_printer_clear@@Base+0x224>
   32008:	mov	r5, r1
   3200c:	sub	r6, r6, #1
   32010:	sub	r0, r9, #32
   32014:	rsb	r1, r9, #32
   32018:	lsl	r3, r5, r0
   3201c:	orr	r3, r3, r5, lsr r1
   32020:	lsl	r2, r5, r9
   32024:	ldrd	r0, [sp, #40]	; 0x28
   32028:	adds	r0, r0, r2
   3202c:	adc	r1, r1, r3
   32030:	mov	r2, r0
   32034:	mov	r3, r1
   32038:	strd	r2, [sp, #32]
   3203c:	cmp	r1, fp
   32040:	cmpeq	r0, sl
   32044:	bcc	32274 <flatcc_json_parser_struct_as_root@@Base+0x22bc>
   32048:	ldr	r8, [sp, #76]	; 0x4c
   3204c:	mov	r7, #1
   32050:	sub	r3, r9, #32
   32054:	str	r3, [sp, #56]	; 0x38
   32058:	rsb	r3, r9, #32
   3205c:	str	r3, [sp, #64]	; 0x40
   32060:	str	r8, [sp, #32]
   32064:	str	r9, [sp, #48]	; 0x30
   32068:	ldr	r3, [pc, #-192]	; 31fb0 <flatcc_json_parser_struct_as_root@@Base+0x1ff8>
   3206c:	umull	r3, r4, r3, r4
   32070:	lsr	r4, r4, #3
   32074:	cmp	r6, #0
   32078:	beq	32290 <flatcc_json_parser_struct_as_root@@Base+0x22d8>
   3207c:	mov	r1, r4
   32080:	mov	r0, r5
   32084:	bl	3ce84 <flatcc_json_printer_clear@@Base+0x38>
   32088:	add	r0, r0, #48	; 0x30
   3208c:	ldr	r3, [sp, #32]
   32090:	strb	r0, [r3, #1]!
   32094:	str	r3, [sp, #32]
   32098:	add	r7, r7, #1
   3209c:	mov	r1, r4
   320a0:	mov	r0, r5
   320a4:	bl	3d070 <flatcc_json_printer_clear@@Base+0x224>
   320a8:	mov	r5, r1
   320ac:	sub	r6, r6, #1
   320b0:	ldr	r3, [sp, #56]	; 0x38
   320b4:	lsl	r9, r1, r3
   320b8:	ldr	r3, [sp, #64]	; 0x40
   320bc:	orr	r9, r9, r1, lsr r3
   320c0:	ldr	r3, [sp, #48]	; 0x30
   320c4:	lsl	r8, r1, r3
   320c8:	ldrd	r2, [sp, #40]	; 0x28
   320cc:	adds	r2, r2, r8
   320d0:	adc	r3, r3, r9
   320d4:	cmp	r3, fp
   320d8:	cmpeq	r2, sl
   320dc:	bcs	32068 <flatcc_json_parser_struct_as_root@@Base+0x20b0>
   320e0:	ldr	r9, [sp, #48]	; 0x30
   320e4:	strd	r2, [sp, #32]
   320e8:	ldrd	r0, [sp, #104]	; 0x68
   320ec:	ldrd	r2, [sp, #120]	; 0x78
   320f0:	subs	r0, r0, r2
   320f4:	sbc	r1, r1, r3
   320f8:	strd	r0, [sp, #40]	; 0x28
   320fc:	ldrd	r0, [sp, #104]	; 0x68
   32100:	cmp	r1, r3
   32104:	cmpeq	r0, r2
   32108:	movcc	ip, #1
   3210c:	movcs	ip, #0
   32110:	ldr	r3, [sp, #116]	; 0x74
   32114:	ldr	r2, [sp, #128]	; 0x80
   32118:	cmp	r3, r2
   3211c:	orrne	ip, ip, #1
   32120:	cmp	ip, #0
   32124:	bne	3227c <flatcc_json_parser_struct_as_root@@Base+0x22c4>
   32128:	mov	r0, #1
   3212c:	mov	r1, #0
   32130:	strd	r0, [sp, #24]
   32134:	sub	r1, r9, #32
   32138:	rsb	r0, r9, #32
   3213c:	lsl	r1, r4, r1
   32140:	orr	r1, r1, r4, lsr r0
   32144:	lsl	r4, r4, r9
   32148:	str	r4, [sp, #16]
   3214c:	str	r1, [sp, #20]
   32150:	ldrd	r2, [sp, #32]
   32154:	strd	r2, [sp, #8]
   32158:	strd	sl, [sp]
   3215c:	ldrd	r2, [sp, #40]	; 0x28
   32160:	mov	r1, r7
   32164:	ldr	r0, [sp, #76]	; 0x4c
   32168:	bl	30d58 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   3216c:	b	32384 <flatcc_json_parser_struct_as_root@@Base+0x23cc>
   32170:	ldr	r3, [pc, #-452]	; 31fb4 <flatcc_json_parser_struct_as_root@@Base+0x1ffc>
   32174:	mov	r2, #189	; 0xbd
   32178:	ldr	r1, [pc, #-436]	; 31fcc <flatcc_json_parser_struct_as_root@@Base+0x2014>
   3217c:	ldr	r0, [pc, #-460]	; 31fb8 <flatcc_json_parser_struct_as_root@@Base+0x2000>
   32180:	bl	14618 <__assert_fail@plt>
   32184:	vmov	r3, s0
   32188:	mov	r2, r5
   3218c:	ldr	r1, [pc, #-472]	; 31fbc <flatcc_json_parser_struct_as_root@@Base+0x2004>
   32190:	ldr	r0, [sp, #112]	; 0x70
   32194:	bl	14600 <sprintf@plt>
   32198:	b	321e0 <flatcc_json_parser_struct_as_root@@Base+0x2228>
   3219c:	ldr	r2, [sp, #112]	; 0x70
   321a0:	add	r3, r2, #1
   321a4:	str	r3, [sp, #76]	; 0x4c
   321a8:	mov	r3, #45	; 0x2d
   321ac:	strb	r3, [r2]
   321b0:	vldr	d7, [sp, #80]	; 0x50
   321b4:	vneg.f64	d7, d7
   321b8:	vstr	d7, [sp, #80]	; 0x50
   321bc:	add	r5, r5, #-2147483648	; 0x80000000
   321c0:	b	31b18 <flatcc_json_parser_struct_as_root@@Base+0x1b60>
   321c4:	mov	r3, #48	; 0x30
   321c8:	ldr	r0, [sp, #76]	; 0x4c
   321cc:	strb	r3, [r0]
   321d0:	mov	r3, #0
   321d4:	strb	r3, [r0, #1]!
   321d8:	ldr	r3, [sp, #112]	; 0x70
   321dc:	sub	r0, r0, r3
   321e0:	add	sp, sp, #212	; 0xd4
   321e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   321e8:	mov	r3, #105	; 0x69
   321ec:	ldr	r0, [sp, #76]	; 0x4c
   321f0:	strb	r3, [r0]
   321f4:	mov	r3, #110	; 0x6e
   321f8:	strb	r3, [r0, #1]
   321fc:	mov	r3, #102	; 0x66
   32200:	strb	r3, [r0, #2]
   32204:	mov	r3, #0
   32208:	strb	r3, [r0, #3]!
   3220c:	ldr	r3, [sp, #112]	; 0x70
   32210:	sub	r0, r0, r3
   32214:	b	321e0 <flatcc_json_parser_struct_as_root@@Base+0x2228>
   32218:	mvn	r6, #0
   3221c:	ldr	r7, [pc, #-612]	; 31fc0 <flatcc_json_parser_struct_as_root@@Base+0x2008>
   32220:	and	r6, r6, r8
   32224:	and	r7, r7, r9
   32228:	ldr	r5, [pc, #-620]	; 31fc4 <flatcc_json_parser_struct_as_root@@Base+0x200c>
   3222c:	b	31b78 <flatcc_json_parser_struct_as_root@@Base+0x1bc0>
   32230:	ldr	r3, [pc, #-624]	; 31fc8 <flatcc_json_parser_struct_as_root@@Base+0x2010>
   32234:	mov	r2, #138	; 0x8a
   32238:	ldr	r1, [pc, #-628]	; 31fcc <flatcc_json_parser_struct_as_root@@Base+0x2014>
   3223c:	ldr	r0, [pc, #-628]	; 31fd0 <flatcc_json_parser_struct_as_root@@Base+0x2018>
   32240:	bl	14618 <__assert_fail@plt>
   32244:	lsl	r3, r7, #2
   32248:	orr	r3, r3, r6, lsr #30
   3224c:	lsl	r2, r6, #2
   32250:	subs	r2, r2, #1
   32254:	sbc	r3, r3, #0
   32258:	sub	r4, r5, #2
   3225c:	b	31c4c <flatcc_json_parser_struct_as_root@@Base+0x1c94>
   32260:	ldr	r3, [pc, #-660]	; 31fd4 <flatcc_json_parser_struct_as_root@@Base+0x201c>
   32264:	mov	r2, #239	; 0xef
   32268:	ldr	r1, [pc, #-664]	; 31fd8 <flatcc_json_parser_struct_as_root@@Base+0x2020>
   3226c:	ldr	r0, [pc, #-664]	; 31fdc <flatcc_json_parser_struct_as_root@@Base+0x2024>
   32270:	bl	14618 <__assert_fail@plt>
   32274:	mov	r7, #1
   32278:	b	320e8 <flatcc_json_parser_struct_as_root@@Base+0x2130>
   3227c:	ldr	r3, [pc, #-688]	; 31fd4 <flatcc_json_parser_struct_as_root@@Base+0x201c>
   32280:	mov	r2, #239	; 0xef
   32284:	ldr	r1, [pc, #-692]	; 31fd8 <flatcc_json_parser_struct_as_root@@Base+0x2020>
   32288:	ldr	r0, [pc, #-692]	; 31fdc <flatcc_json_parser_struct_as_root@@Base+0x2024>
   3228c:	bl	14618 <__assert_fail@plt>
   32290:	ldr	r9, [sp, #48]	; 0x30
   32294:	ldr	r3, [sp, #76]	; 0x4c
   32298:	add	lr, r3, r7
   3229c:	mov	r0, #1
   322a0:	mov	r1, #0
   322a4:	mov	ip, #10
   322a8:	rsb	r5, r9, #32
   322ac:	sub	r4, r9, #32
   322b0:	str	r4, [sp, #32]
   322b4:	mov	r4, r9
   322b8:	ldrd	r8, [sp, #40]	; 0x28
   322bc:	umull	r2, r3, r8, ip
   322c0:	mla	r3, ip, r9, r3
   322c4:	mul	r8, ip, r1
   322c8:	umull	r0, r1, r0, ip
   322cc:	add	r1, r8, r1
   322d0:	mul	r8, ip, fp
   322d4:	umull	sl, fp, sl, ip
   322d8:	add	fp, r8, fp
   322dc:	lsr	r8, r2, r4
   322e0:	orr	r8, r8, r3, lsl r5
   322e4:	ldr	r9, [sp, #32]
   322e8:	orr	r8, r8, r3, lsr r9
   322ec:	add	r8, r8, #48	; 0x30
   322f0:	strb	r8, [lr], #1
   322f4:	add	r7, r7, #1
   322f8:	ldrd	r8, [sp, #88]	; 0x58
   322fc:	and	r8, r8, r2
   32300:	and	r9, r9, r3
   32304:	sub	r6, r6, #1
   32308:	cmp	fp, r9
   3230c:	cmpeq	sl, r8
   32310:	bls	322bc <flatcc_json_parser_struct_as_root@@Base+0x2304>
   32314:	strd	r8, [sp, #40]	; 0x28
   32318:	ldrd	r4, [sp, #104]	; 0x68
   3231c:	ldrd	r8, [sp, #120]	; 0x78
   32320:	subs	r2, r4, r8
   32324:	sbc	r3, r5, r9
   32328:	cmp	r5, r9
   3232c:	cmpeq	r4, r8
   32330:	movcc	ip, #1
   32334:	movcs	ip, #0
   32338:	ldr	lr, [sp, #116]	; 0x74
   3233c:	ldr	r4, [sp, #128]	; 0x80
   32340:	cmp	lr, r4
   32344:	orrne	ip, ip, #1
   32348:	cmp	ip, #0
   3234c:	bne	323fc <flatcc_json_parser_struct_as_root@@Base+0x2444>
   32350:	mul	ip, r0, r3
   32354:	mla	ip, r2, r1, ip
   32358:	umull	r2, r3, r0, r2
   3235c:	add	r3, ip, r3
   32360:	strd	r0, [sp, #24]
   32364:	ldrd	r0, [sp, #96]	; 0x60
   32368:	strd	r0, [sp, #16]
   3236c:	ldrd	r0, [sp, #40]	; 0x28
   32370:	strd	r0, [sp, #8]
   32374:	strd	sl, [sp]
   32378:	mov	r1, r7
   3237c:	ldr	r0, [sp, #76]	; 0x4c
   32380:	bl	30d58 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   32384:	ldr	r3, [sp, #132]	; 0x84
   32388:	sub	r6, r6, r3
   3238c:	cmp	r0, #0
   32390:	beq	32410 <flatcc_json_parser_struct_as_root@@Base+0x2458>
   32394:	cmp	r6, #0
   32398:	blt	32434 <flatcc_json_parser_struct_as_root@@Base+0x247c>
   3239c:	cmp	r6, #2
   323a0:	bhi	32530 <flatcc_json_parser_struct_as_root@@Base+0x2578>
   323a4:	cmp	r6, #0
   323a8:	ble	323d8 <flatcc_json_parser_struct_as_root@@Base+0x2420>
   323ac:	sub	r1, r6, #1
   323b0:	ldr	r2, [sp, #76]	; 0x4c
   323b4:	add	r3, r2, r7
   323b8:	add	r6, r6, r7
   323bc:	add	r6, r2, r6
   323c0:	mov	r2, #48	; 0x30
   323c4:	strb	r2, [r3], #1
   323c8:	cmp	r6, r3
   323cc:	bne	323c4 <flatcc_json_parser_struct_as_root@@Base+0x240c>
   323d0:	add	r7, r7, #1
   323d4:	add	r7, r7, r1
   323d8:	ldr	r2, [sp, #76]	; 0x4c
   323dc:	add	r0, r2, r7
   323e0:	mov	r3, #0
   323e4:	strb	r3, [r2, r7]
   323e8:	ldr	r3, [sp, #112]	; 0x70
   323ec:	sub	r0, r0, r3
   323f0:	b	321e0 <flatcc_json_parser_struct_as_root@@Base+0x2228>
   323f4:	mov	r7, #0
   323f8:	b	32294 <flatcc_json_parser_struct_as_root@@Base+0x22dc>
   323fc:	ldr	r3, [pc, #-1072]	; 31fd4 <flatcc_json_parser_struct_as_root@@Base+0x201c>
   32400:	mov	r2, #239	; 0xef
   32404:	ldr	r1, [pc, #-1076]	; 31fd8 <flatcc_json_parser_struct_as_root@@Base+0x2020>
   32408:	ldr	r0, [pc, #-1076]	; 31fdc <flatcc_json_parser_struct_as_root@@Base+0x2024>
   3240c:	bl	14618 <__assert_fail@plt>
   32410:	ldrd	r2, [sp, #80]	; 0x50
   32414:	ldr	r1, [pc, #-1084]	; 31fe0 <flatcc_json_parser_struct_as_root@@Base+0x2028>
   32418:	ldr	r4, [sp, #76]	; 0x4c
   3241c:	mov	r0, r4
   32420:	bl	14600 <sprintf@plt>
   32424:	ldr	r2, [sp, #112]	; 0x70
   32428:	sub	r3, r4, r2
   3242c:	add	r0, r3, r0
   32430:	b	321e0 <flatcc_json_parser_struct_as_root@@Base+0x2228>
   32434:	rsb	r1, r6, #0
   32438:	add	r3, r6, r7
   3243c:	cmp	r1, r7
   32440:	cmnge	r3, #2
   32444:	bge	324cc <flatcc_json_parser_struct_as_root@@Base+0x2514>
   32448:	cmp	r7, #1
   3244c:	ble	3239c <flatcc_json_parser_struct_as_root@@Base+0x23e4>
   32450:	sub	r3, r7, #1
   32454:	cmp	r3, #1
   32458:	movlt	r3, #1
   3245c:	cmp	r3, r1
   32460:	movlt	r1, r3
   32464:	cmp	r1, #0
   32468:	ble	3248c <flatcc_json_parser_struct_as_root@@Base+0x24d4>
   3246c:	ldr	r2, [sp, #76]	; 0x4c
   32470:	add	r3, r2, r7
   32474:	sub	r0, r7, r1
   32478:	add	r0, r2, r0
   3247c:	ldrb	r2, [r3, #-1]
   32480:	strb	r2, [r3], #-1
   32484:	cmp	r0, r3
   32488:	bne	3247c <flatcc_json_parser_struct_as_root@@Base+0x24c4>
   3248c:	add	ip, r7, #1
   32490:	sub	r3, r7, r1
   32494:	mov	r2, #46	; 0x2e
   32498:	ldr	r0, [sp, #76]	; 0x4c
   3249c:	strb	r2, [r0, r3]
   324a0:	adds	r0, r1, r6
   324a4:	moveq	r7, ip
   324a8:	beq	323d8 <flatcc_json_parser_struct_as_root@@Base+0x2420>
   324ac:	add	r7, r7, #2
   324b0:	mov	r3, #101	; 0x65
   324b4:	ldr	r2, [sp, #76]	; 0x4c
   324b8:	strb	r3, [r2, ip]
   324bc:	add	r1, r2, r7
   324c0:	bl	30f30 <flatcc_json_parser_struct_as_root@@Base+0xf78>
   324c4:	add	r7, r7, r0
   324c8:	b	323d8 <flatcc_json_parser_struct_as_root@@Base+0x2420>
   324cc:	rsb	r0, r7, #2
   324d0:	sub	r0, r0, r6
   324d4:	mov	r2, r7
   324d8:	ldr	r4, [sp, #76]	; 0x4c
   324dc:	mov	r1, r4
   324e0:	add	r0, r4, r0
   324e4:	bl	14534 <memmove@plt>
   324e8:	mov	r3, #48	; 0x30
   324ec:	strb	r3, [r4]
   324f0:	mov	r3, #46	; 0x2e
   324f4:	strb	r3, [r4, #1]
   324f8:	rsb	r6, r6, #2
   324fc:	sub	r0, r6, r7
   32500:	cmp	r0, #2
   32504:	ble	32528 <flatcc_json_parser_struct_as_root@@Base+0x2570>
   32508:	add	r3, r4, #2
   3250c:	add	r1, r4, r0
   32510:	mov	r2, #48	; 0x30
   32514:	strb	r2, [r3], #1
   32518:	cmp	r3, r1
   3251c:	bne	32514 <flatcc_json_parser_struct_as_root@@Base+0x255c>
   32520:	add	r7, r7, r0
   32524:	b	323d8 <flatcc_json_parser_struct_as_root@@Base+0x2420>
   32528:	mov	r0, #2
   3252c:	b	32520 <flatcc_json_parser_struct_as_root@@Base+0x2568>
   32530:	add	r4, r7, #1
   32534:	mov	r3, #101	; 0x65
   32538:	ldr	r2, [sp, #76]	; 0x4c
   3253c:	strb	r3, [r2, r7]
   32540:	add	r1, r2, r4
   32544:	mov	r0, r6
   32548:	bl	30f30 <flatcc_json_parser_struct_as_root@@Base+0xf78>
   3254c:	add	r7, r4, r0
   32550:	b	323d8 <flatcc_json_parser_struct_as_root@@Base+0x2420>

00032554 <flatcc_json_printer_error_string@@Base>:
   32554:	cmp	r0, #3
   32558:	ldrls	pc, [pc, r0, lsl #2]
   3255c:	b	32588 <flatcc_json_printer_error_string@@Base+0x34>
   32560:	muleq	r3, r0, r5
   32564:	andeq	r2, r3, r0, ror r5
   32568:	andeq	r2, r3, r8, ror r5
   3256c:	andeq	r2, r3, r0, lsl #11
   32570:	ldr	r0, [pc, #32]	; 32598 <flatcc_json_printer_error_string@@Base+0x44>
   32574:	bx	lr
   32578:	ldr	r0, [pc, #28]	; 3259c <flatcc_json_printer_error_string@@Base+0x48>
   3257c:	bx	lr
   32580:	ldr	r0, [pc, #24]	; 325a0 <flatcc_json_printer_error_string@@Base+0x4c>
   32584:	bx	lr
   32588:	ldr	r0, [pc, #20]	; 325a4 <flatcc_json_printer_error_string@@Base+0x50>
   3258c:	bx	lr
   32590:	ldr	r0, [pc, #16]	; 325a8 <flatcc_json_printer_error_string@@Base+0x54>
   32594:	bx	lr
   32598:	andeq	r3, r4, ip, ror #23
   3259c:	strdeq	r3, [r4], -r8
   325a0:	andeq	r2, r4, r8, ror #10
   325a4:	andeq	r2, r4, r0, lsr r6
   325a8:	andeq	r2, r4, r8, lsr #3

000325ac <flatcc_json_printer_fmt_float@@Base>:
   325ac:	push	{r4, lr}
   325b0:	vcvt.f64.f32	d0, s0
   325b4:	bl	31ac4 <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   325b8:	pop	{r4, pc}

000325bc <flatcc_json_printer_fmt_double@@Base>:
   325bc:	push	{r4, lr}
   325c0:	bl	31ac4 <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   325c4:	pop	{r4, pc}

000325c8 <flatcc_json_printer_fmt_bool@@Base>:
   325c8:	mov	r3, r0
   325cc:	cmp	r1, #0
   325d0:	ldrne	r2, [pc, #36]	; 325fc <flatcc_json_printer_fmt_bool@@Base+0x34>
   325d4:	ldrne	r0, [r2]
   325d8:	strne	r0, [r3]
   325dc:	movne	r0, #4
   325e0:	ldreq	r2, [pc, #24]	; 32600 <flatcc_json_printer_fmt_bool@@Base+0x38>
   325e4:	ldreq	r0, [r2]
   325e8:	streq	r0, [r3]
   325ec:	ldrbeq	r2, [r2, #4]
   325f0:	strbeq	r2, [r3, #4]
   325f4:	moveq	r0, #5
   325f8:	bx	lr
   325fc:	ldrdeq	sp, [r3], -r8
   32600:	andeq	sp, r3, r0, ror #25

00032604 <flatcc_json_printer_string@@Base>:
   32604:	push	{r4, lr}
   32608:	bl	31720 <flatcc_json_parser_struct_as_root@@Base+0x1768>
   3260c:	pop	{r4, pc}

00032610 <flatcc_json_printer_write@@Base>:
   32610:	push	{r4, r5, r6, lr}
   32614:	mov	r4, r0
   32618:	mov	r5, r2
   3261c:	ldr	r0, [r0, #20]
   32620:	add	r3, r0, r2
   32624:	ldr	r2, [r4, #16]
   32628:	cmp	r2, r3
   3262c:	bls	32648 <flatcc_json_printer_write@@Base+0x38>
   32630:	mov	r2, r5
   32634:	bl	1454c <memcpy@plt>
   32638:	ldr	r3, [r4, #20]
   3263c:	add	r5, r3, r5
   32640:	str	r5, [r4, #20]
   32644:	pop	{r4, r5, r6, pc}
   32648:	mov	r2, r5
   3264c:	mov	r0, r4
   32650:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   32654:	pop	{r4, r5, r6, pc}

00032658 <flatcc_json_printer_nl@@Base>:
   32658:	ldr	r3, [r0, #20]
   3265c:	add	r2, r3, #1
   32660:	str	r2, [r0, #20]
   32664:	mov	r2, #10
   32668:	strb	r2, [r3]
   3266c:	ldr	r2, [r0, #20]
   32670:	ldr	r3, [r0, #16]
   32674:	cmp	r2, r3
   32678:	bxcc	lr
   3267c:	push	{r4, lr}
   32680:	ldr	r3, [r0, #44]	; 0x2c
   32684:	mov	r1, #0
   32688:	blx	r3
   3268c:	pop	{r4, pc}

00032690 <flatcc_json_printer_char@@Base>:
   32690:	ldr	r3, [r0, #20]
   32694:	add	r2, r3, #1
   32698:	str	r2, [r0, #20]
   3269c:	strb	r1, [r3]
   326a0:	bx	lr

000326a4 <flatcc_json_printer_indent@@Base>:
   326a4:	push	{r4, r5, r6, lr}
   326a8:	mov	r4, r0
   326ac:	ldrb	r3, [r0, #25]
   326b0:	ldr	r5, [r0, #32]
   326b4:	mul	r5, r5, r3
   326b8:	ldr	r0, [r0, #20]
   326bc:	add	r3, r0, r5
   326c0:	ldr	r2, [r4, #16]
   326c4:	cmp	r2, r3
   326c8:	bcc	326e8 <flatcc_json_printer_indent@@Base+0x44>
   326cc:	mov	r2, r5
   326d0:	mov	r1, #32
   326d4:	bl	145c4 <memset@plt>
   326d8:	ldr	r3, [r4, #20]
   326dc:	add	r5, r3, r5
   326e0:	str	r5, [r4, #20]
   326e4:	pop	{r4, r5, r6, pc}
   326e8:	mov	r1, r5
   326ec:	mov	r0, r4
   326f0:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   326f4:	pop	{r4, r5, r6, pc}

000326f8 <flatcc_json_printer_add_level@@Base>:
   326f8:	ldr	r3, [r0, #32]
   326fc:	add	r1, r3, r1
   32700:	str	r1, [r0, #32]
   32704:	bx	lr

00032708 <flatcc_json_printer_get_level@@Base>:
   32708:	ldr	r0, [r0, #32]
   3270c:	bx	lr

00032710 <flatcc_json_printer_uint8@@Base>:
   32710:	push	{r4, lr}
   32714:	mov	r4, r0
   32718:	mov	r0, r1
   3271c:	ldr	r1, [r4, #20]
   32720:	bl	30090 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   32724:	ldr	r3, [r4, #20]
   32728:	add	r0, r3, r0
   3272c:	str	r0, [r4, #20]
   32730:	pop	{r4, pc}

00032734 <flatcc_json_printer_uint16@@Base>:
   32734:	push	{r4, lr}
   32738:	mov	r4, r0
   3273c:	mov	r0, r1
   32740:	ldr	r1, [r4, #20]
   32744:	bl	30150 <flatcc_json_parser_struct_as_root@@Base+0x198>
   32748:	ldr	r3, [r4, #20]
   3274c:	add	r0, r3, r0
   32750:	str	r0, [r4, #20]
   32754:	pop	{r4, pc}

00032758 <flatcc_json_printer_uint32@@Base>:
   32758:	push	{r4, lr}
   3275c:	mov	r4, r0
   32760:	mov	r0, r1
   32764:	ldr	r1, [r4, #20]
   32768:	bl	302d4 <flatcc_json_parser_struct_as_root@@Base+0x31c>
   3276c:	ldr	r3, [r4, #20]
   32770:	add	r0, r3, r0
   32774:	str	r0, [r4, #20]
   32778:	pop	{r4, pc}

0003277c <flatcc_json_printer_uint64@@Base>:
   3277c:	push	{r4, lr}
   32780:	mov	r4, r0
   32784:	mov	r0, r2
   32788:	mov	r1, r3
   3278c:	ldr	r2, [r4, #20]
   32790:	bl	30614 <flatcc_json_parser_struct_as_root@@Base+0x65c>
   32794:	ldr	r3, [r4, #20]
   32798:	add	r0, r3, r0
   3279c:	str	r0, [r4, #20]
   327a0:	pop	{r4, pc}

000327a4 <flatcc_json_printer_int8@@Base>:
   327a4:	push	{r4, lr}
   327a8:	mov	r4, r0
   327ac:	mov	r0, r1
   327b0:	ldr	r1, [r4, #20]
   327b4:	bl	30c98 <flatcc_json_parser_struct_as_root@@Base+0xce0>
   327b8:	ldr	r3, [r4, #20]
   327bc:	add	r0, r3, r0
   327c0:	str	r0, [r4, #20]
   327c4:	pop	{r4, pc}

000327c8 <flatcc_json_printer_int16@@Base>:
   327c8:	push	{r4, lr}
   327cc:	mov	r4, r0
   327d0:	mov	r0, r1
   327d4:	ldr	r1, [r4, #20]
   327d8:	bl	30cc8 <flatcc_json_parser_struct_as_root@@Base+0xd10>
   327dc:	ldr	r3, [r4, #20]
   327e0:	add	r0, r3, r0
   327e4:	str	r0, [r4, #20]
   327e8:	pop	{r4, pc}

000327ec <flatcc_json_printer_int32@@Base>:
   327ec:	push	{r4, lr}
   327f0:	mov	r4, r0
   327f4:	mov	r0, r1
   327f8:	ldr	r1, [r4, #20]
   327fc:	bl	30cf8 <flatcc_json_parser_struct_as_root@@Base+0xd40>
   32800:	ldr	r3, [r4, #20]
   32804:	add	r0, r3, r0
   32808:	str	r0, [r4, #20]
   3280c:	pop	{r4, pc}

00032810 <flatcc_json_printer_int64@@Base>:
   32810:	push	{r4, lr}
   32814:	mov	r4, r0
   32818:	mov	r0, r2
   3281c:	mov	r1, r3
   32820:	ldr	r2, [r4, #20]
   32824:	bl	30d20 <flatcc_json_parser_struct_as_root@@Base+0xd68>
   32828:	ldr	r3, [r4, #20]
   3282c:	add	r0, r3, r0
   32830:	str	r0, [r4, #20]
   32834:	pop	{r4, pc}

00032838 <flatcc_json_printer_float@@Base>:
   32838:	push	{r4, lr}
   3283c:	mov	r4, r0
   32840:	ldr	r0, [r0, #20]
   32844:	vcvt.f64.f32	d0, s0
   32848:	bl	31ac4 <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   3284c:	ldr	r3, [r4, #20]
   32850:	add	r0, r3, r0
   32854:	str	r0, [r4, #20]
   32858:	pop	{r4, pc}

0003285c <flatcc_json_printer_double@@Base>:
   3285c:	push	{r4, lr}
   32860:	mov	r4, r0
   32864:	ldr	r0, [r0, #20]
   32868:	bl	31ac4 <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   3286c:	ldr	r3, [r4, #20]
   32870:	add	r0, r3, r0
   32874:	str	r0, [r4, #20]
   32878:	pop	{r4, pc}

0003287c <flatcc_json_printer_enum@@Base>:
   3287c:	push	{r4, r5, r6, lr}
   32880:	mov	r4, r0
   32884:	mov	r5, r2
   32888:	ldr	r3, [r0, #20]
   3288c:	mov	r2, #34	; 0x22
   32890:	strb	r2, [r3]
   32894:	ldrb	r3, [r0, #26]
   32898:	ldr	r0, [r0, #20]
   3289c:	cmp	r3, #0
   328a0:	addeq	r0, r0, #1
   328a4:	str	r0, [r4, #20]
   328a8:	add	r3, r0, r5
   328ac:	ldr	r2, [r4, #16]
   328b0:	cmp	r2, r3
   328b4:	bhi	328c8 <flatcc_json_printer_enum@@Base+0x4c>
   328b8:	mov	r2, r5
   328bc:	mov	r0, r4
   328c0:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   328c4:	b	328dc <flatcc_json_printer_enum@@Base+0x60>
   328c8:	mov	r2, r5
   328cc:	bl	1454c <memcpy@plt>
   328d0:	ldr	r3, [r4, #20]
   328d4:	add	r5, r3, r5
   328d8:	str	r5, [r4, #20]
   328dc:	ldr	r3, [r4, #20]
   328e0:	mov	r2, #34	; 0x22
   328e4:	strb	r2, [r3]
   328e8:	ldrb	r2, [r4, #26]
   328ec:	ldr	r3, [r4, #20]
   328f0:	cmp	r2, #0
   328f4:	addeq	r3, r3, #1
   328f8:	str	r3, [r4, #20]
   328fc:	pop	{r4, r5, r6, pc}

00032900 <flatcc_json_printer_delimit_enum_flags@@Base>:
   32900:	ldrb	r3, [r0, #26]
   32904:	adds	r1, r1, #0
   32908:	movne	r1, #1
   3290c:	cmp	r3, #0
   32910:	movne	r3, r1
   32914:	orreq	r3, r1, #1
   32918:	ldr	r2, [r0, #20]
   3291c:	mov	r1, #34	; 0x22
   32920:	strb	r1, [r2]
   32924:	ldr	r1, [r0, #20]
   32928:	add	r1, r1, r3
   3292c:	str	r1, [r0, #20]
   32930:	bx	lr

00032934 <flatcc_json_printer_enum_flag@@Base>:
   32934:	push	{r4, r5, r6, lr}
   32938:	mov	r4, r0
   3293c:	mov	ip, r2
   32940:	mov	r5, r3
   32944:	ldr	r3, [r0, #20]
   32948:	mov	r2, #32
   3294c:	strb	r2, [r3]
   32950:	ldr	r0, [r0, #20]
   32954:	cmp	r1, #0
   32958:	addgt	r0, r0, #1
   3295c:	str	r0, [r4, #20]
   32960:	add	r3, r0, r5
   32964:	ldr	r2, [r4, #16]
   32968:	cmp	r2, r3
   3296c:	bls	3298c <flatcc_json_printer_enum_flag@@Base+0x58>
   32970:	mov	r2, r5
   32974:	mov	r1, ip
   32978:	bl	1454c <memcpy@plt>
   3297c:	ldr	r3, [r4, #20]
   32980:	add	r5, r3, r5
   32984:	str	r5, [r4, #20]
   32988:	pop	{r4, r5, r6, pc}
   3298c:	mov	r2, r5
   32990:	mov	r1, ip
   32994:	mov	r0, r4
   32998:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3299c:	pop	{r4, r5, r6, pc}

000329a0 <flatcc_json_printer_string_field@@Base>:
   329a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   329a4:	ldr	r8, [sp, #32]
   329a8:	add	r2, r2, #2
   329ac:	lsl	r2, r2, #1
   329b0:	ldr	ip, [r1, #8]
   329b4:	cmp	r2, ip
   329b8:	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
   329bc:	ldr	ip, [r1, #4]
   329c0:	ldrh	r5, [ip, r2]
   329c4:	cmp	r5, #0
   329c8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   329cc:	ldr	r7, [r1]
   329d0:	adds	r6, r7, r5
   329d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   329d8:	ldr	r2, [r1, #16]
   329dc:	add	ip, r2, #1
   329e0:	str	ip, [r1, #16]
   329e4:	cmp	r2, #0
   329e8:	ldrne	r2, [r0, #20]
   329ec:	addne	r1, r2, #1
   329f0:	strne	r1, [r0, #20]
   329f4:	movne	r1, #44	; 0x2c
   329f8:	strbne	r1, [r2]
   329fc:	mov	r9, r3
   32a00:	mov	r4, r0
   32a04:	ldrb	r3, [r0, #25]
   32a08:	cmp	r3, #0
   32a0c:	bne	32a64 <flatcc_json_printer_string_field@@Base+0xc4>
   32a10:	ldr	r2, [r0, #20]
   32a14:	ldr	r3, [r0, #16]
   32a18:	cmp	r2, r3
   32a1c:	bcs	32ac4 <flatcc_json_printer_string_field@@Base+0x124>
   32a20:	ldr	r3, [r4, #20]
   32a24:	mov	r2, #34	; 0x22
   32a28:	strb	r2, [r3]
   32a2c:	ldrb	r3, [r4, #26]
   32a30:	ldr	r0, [r4, #20]
   32a34:	cmp	r3, #0
   32a38:	addeq	r0, r0, #1
   32a3c:	str	r0, [r4, #20]
   32a40:	add	r3, r0, r8
   32a44:	ldr	r2, [r4, #16]
   32a48:	cmp	r2, r3
   32a4c:	bhi	32ad4 <flatcc_json_printer_string_field@@Base+0x134>
   32a50:	mov	r2, r8
   32a54:	mov	r1, r9
   32a58:	mov	r0, r4
   32a5c:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   32a60:	b	32aec <flatcc_json_printer_string_field@@Base+0x14c>
   32a64:	ldr	r3, [r0, #20]
   32a68:	add	r2, r3, #1
   32a6c:	str	r2, [r0, #20]
   32a70:	mov	r2, #10
   32a74:	strb	r2, [r3]
   32a78:	ldrb	r3, [r0, #25]
   32a7c:	ldr	sl, [r0, #32]
   32a80:	mul	sl, sl, r3
   32a84:	ldr	r0, [r0, #20]
   32a88:	add	r3, r0, sl
   32a8c:	ldr	r2, [r4, #16]
   32a90:	cmp	r2, r3
   32a94:	bcc	32ab4 <flatcc_json_printer_string_field@@Base+0x114>
   32a98:	mov	r2, sl
   32a9c:	mov	r1, #32
   32aa0:	bl	145c4 <memset@plt>
   32aa4:	ldr	r3, [r4, #20]
   32aa8:	add	sl, r3, sl
   32aac:	str	sl, [r4, #20]
   32ab0:	b	32a20 <flatcc_json_printer_string_field@@Base+0x80>
   32ab4:	mov	r1, sl
   32ab8:	mov	r0, r4
   32abc:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   32ac0:	b	32a20 <flatcc_json_printer_string_field@@Base+0x80>
   32ac4:	ldr	r3, [r0, #44]	; 0x2c
   32ac8:	mov	r1, #0
   32acc:	blx	r3
   32ad0:	b	32a20 <flatcc_json_printer_string_field@@Base+0x80>
   32ad4:	mov	r2, r8
   32ad8:	mov	r1, r9
   32adc:	bl	1454c <memcpy@plt>
   32ae0:	ldr	r3, [r4, #20]
   32ae4:	add	r8, r3, r8
   32ae8:	str	r8, [r4, #20]
   32aec:	ldr	r3, [r4, #20]
   32af0:	mov	r2, #34	; 0x22
   32af4:	strb	r2, [r3]
   32af8:	ldrb	r3, [r4, #26]
   32afc:	clz	r3, r3
   32b00:	lsr	r3, r3, #5
   32b04:	ldr	r1, [r4, #20]
   32b08:	add	r2, r1, r3
   32b0c:	add	r2, r2, #1
   32b10:	str	r2, [r4, #20]
   32b14:	mov	r2, #58	; 0x3a
   32b18:	strb	r2, [r1, r3]
   32b1c:	ldr	r3, [r4, #20]
   32b20:	mov	r2, #32
   32b24:	strb	r2, [r3]
   32b28:	ldrb	r2, [r4, #25]
   32b2c:	ldr	r3, [r4, #20]
   32b30:	cmp	r2, #0
   32b34:	addne	r3, r3, #1
   32b38:	str	r3, [r4, #20]
   32b3c:	ldr	r3, [r7, r5]
   32b40:	add	r1, r6, r3
   32b44:	ldr	r2, [r6, r3]
   32b48:	add	r1, r1, #4
   32b4c:	mov	r0, r4
   32b50:	bl	31720 <flatcc_json_parser_struct_as_root@@Base+0x1768>
   32b54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00032b58 <flatcc_json_printer_uint8_vector_base64_field@@Base>:
   32b58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32b5c:	sub	sp, sp, #28
   32b60:	ldr	r7, [sp, #64]	; 0x40
   32b64:	add	r2, r2, #2
   32b68:	lsl	r2, r2, #1
   32b6c:	ldr	ip, [r1, #8]
   32b70:	cmp	r2, ip
   32b74:	bge	32e50 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2f8>
   32b78:	ldr	ip, [r1, #4]
   32b7c:	ldrh	r8, [ip, r2]
   32b80:	cmp	r8, #0
   32b84:	beq	32e50 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2f8>
   32b88:	ldr	sl, [r1]
   32b8c:	ldr	r5, [sp, #68]	; 0x44
   32b90:	adds	r5, r5, #0
   32b94:	movne	r5, #1
   32b98:	orr	r6, r5, #128	; 0x80
   32b9c:	adds	r9, sl, r8
   32ba0:	beq	32e50 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2f8>
   32ba4:	ldr	r2, [r1, #16]
   32ba8:	add	ip, r2, #1
   32bac:	str	ip, [r1, #16]
   32bb0:	cmp	r2, #0
   32bb4:	ldrne	r2, [r0, #20]
   32bb8:	addne	r1, r2, #1
   32bbc:	strne	r1, [r0, #20]
   32bc0:	movne	r1, #44	; 0x2c
   32bc4:	strbne	r1, [r2]
   32bc8:	str	r3, [sp, #12]
   32bcc:	mov	r4, r0
   32bd0:	ldrb	r3, [r0, #25]
   32bd4:	cmp	r3, #0
   32bd8:	bne	32c30 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xd8>
   32bdc:	ldr	r2, [r0, #20]
   32be0:	ldr	r3, [r0, #16]
   32be4:	cmp	r2, r3
   32be8:	bcs	32c90 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x138>
   32bec:	ldr	r3, [r4, #20]
   32bf0:	mov	r2, #34	; 0x22
   32bf4:	strb	r2, [r3]
   32bf8:	ldrb	r3, [r4, #26]
   32bfc:	ldr	r0, [r4, #20]
   32c00:	cmp	r3, #0
   32c04:	addeq	r0, r0, #1
   32c08:	str	r0, [r4, #20]
   32c0c:	add	r3, r0, r7
   32c10:	ldr	r2, [r4, #16]
   32c14:	cmp	r2, r3
   32c18:	bhi	32ca0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x148>
   32c1c:	mov	r2, r7
   32c20:	ldr	r1, [sp, #12]
   32c24:	mov	r0, r4
   32c28:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   32c2c:	b	32cb8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x160>
   32c30:	ldr	r3, [r0, #20]
   32c34:	add	r2, r3, #1
   32c38:	str	r2, [r0, #20]
   32c3c:	mov	r2, #10
   32c40:	strb	r2, [r3]
   32c44:	ldrb	r3, [r0, #25]
   32c48:	ldr	fp, [r0, #32]
   32c4c:	mul	fp, fp, r3
   32c50:	ldr	r0, [r0, #20]
   32c54:	add	r3, r0, fp
   32c58:	ldr	r2, [r4, #16]
   32c5c:	cmp	r2, r3
   32c60:	bcc	32c80 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x128>
   32c64:	mov	r2, fp
   32c68:	mov	r1, #32
   32c6c:	bl	145c4 <memset@plt>
   32c70:	ldr	r3, [r4, #20]
   32c74:	add	fp, r3, fp
   32c78:	str	fp, [r4, #20]
   32c7c:	b	32bec <flatcc_json_printer_uint8_vector_base64_field@@Base+0x94>
   32c80:	mov	r1, fp
   32c84:	mov	r0, r4
   32c88:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   32c8c:	b	32bec <flatcc_json_printer_uint8_vector_base64_field@@Base+0x94>
   32c90:	ldr	r3, [r0, #44]	; 0x2c
   32c94:	mov	r1, #0
   32c98:	blx	r3
   32c9c:	b	32bec <flatcc_json_printer_uint8_vector_base64_field@@Base+0x94>
   32ca0:	mov	r2, r7
   32ca4:	ldr	r1, [sp, #12]
   32ca8:	bl	1454c <memcpy@plt>
   32cac:	ldr	r3, [r4, #20]
   32cb0:	add	r7, r3, r7
   32cb4:	str	r7, [r4, #20]
   32cb8:	ldr	r3, [r4, #20]
   32cbc:	mov	r1, #34	; 0x22
   32cc0:	strb	r1, [r3]
   32cc4:	ldrb	r3, [r4, #26]
   32cc8:	clz	r3, r3
   32ccc:	lsr	r3, r3, #5
   32cd0:	ldr	r0, [r4, #20]
   32cd4:	add	r2, r0, r3
   32cd8:	add	r2, r2, #1
   32cdc:	str	r2, [r4, #20]
   32ce0:	mov	r2, #58	; 0x3a
   32ce4:	strb	r2, [r0, r3]
   32ce8:	ldr	r3, [r4, #20]
   32cec:	mov	r2, #32
   32cf0:	strb	r2, [r3]
   32cf4:	ldrb	r3, [r4, #25]
   32cf8:	adds	r3, r3, #0
   32cfc:	movne	r3, #1
   32d00:	ldr	r0, [r4, #20]
   32d04:	add	r2, r0, r3
   32d08:	str	r2, [r4, #20]
   32d0c:	ldr	ip, [sl, r8]
   32d10:	add	r8, r9, ip
   32d14:	bic	r5, r5, #128	; 0x80
   32d18:	ldr	ip, [r9, ip]
   32d1c:	str	ip, [sp, #16]
   32d20:	add	r8, r8, #4
   32d24:	add	r2, r2, #1
   32d28:	str	r2, [r4, #20]
   32d2c:	strb	r1, [r0, r3]
   32d30:	mov	r1, r6
   32d34:	ldr	r0, [sp, #16]
   32d38:	bl	30fc8 <flatcc_json_parser_struct_as_root@@Base+0x1010>
   32d3c:	mov	sl, r0
   32d40:	ldr	r3, [r4, #20]
   32d44:	add	r3, r3, r0
   32d48:	ldr	r2, [r4, #16]
   32d4c:	cmp	r2, r3
   32d50:	bls	32e10 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2b8>
   32d54:	ldr	r0, [r4, #20]
   32d58:	ldr	r7, [r4, #16]
   32d5c:	add	r3, r0, sl
   32d60:	cmp	r7, r3
   32d64:	bcs	32e24 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2cc>
   32d68:	sub	r7, r7, r0
   32d6c:	bic	r7, r7, #3
   32d70:	add	sl, r7, r7, lsl #1
   32d74:	lsrs	sl, sl, #2
   32d78:	beq	32dfc <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2a4>
   32d7c:	mov	r9, #0
   32d80:	str	sl, [sp, #20]
   32d84:	str	r5, [sp]
   32d88:	add	r3, sp, #20
   32d8c:	mov	r2, r9
   32d90:	mov	r1, r8
   32d94:	bl	3101c <flatcc_json_parser_struct_as_root@@Base+0x1064>
   32d98:	ldr	r3, [r4, #20]
   32d9c:	add	r7, r3, r7
   32da0:	str	r7, [r4, #20]
   32da4:	add	r8, r8, sl
   32da8:	ldr	r3, [sp, #16]
   32dac:	sub	sl, r3, sl
   32db0:	str	sl, [sp, #16]
   32db4:	ldr	r3, [r4, #44]	; 0x2c
   32db8:	mov	r1, r9
   32dbc:	mov	r0, r4
   32dc0:	blx	r3
   32dc4:	mov	r1, r6
   32dc8:	ldr	r0, [sp, #16]
   32dcc:	bl	30fc8 <flatcc_json_parser_struct_as_root@@Base+0x1010>
   32dd0:	mov	sl, r0
   32dd4:	ldr	r0, [r4, #20]
   32dd8:	ldr	r7, [r4, #16]
   32ddc:	add	r3, r0, sl
   32de0:	cmp	r7, r3
   32de4:	bcs	32e24 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2cc>
   32de8:	sub	r7, r7, r0
   32dec:	bic	r7, r7, #3
   32df0:	add	sl, r7, r7, lsl #1
   32df4:	lsrs	sl, sl, #2
   32df8:	bne	32d80 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x228>
   32dfc:	ldr	r3, [pc, #84]	; 32e58 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x300>
   32e00:	ldr	r2, [pc, #84]	; 32e5c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x304>
   32e04:	ldr	r1, [pc, #84]	; 32e60 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x308>
   32e08:	ldr	r0, [pc, #84]	; 32e64 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x30c>
   32e0c:	bl	14618 <__assert_fail@plt>
   32e10:	ldr	r3, [r4, #44]	; 0x2c
   32e14:	mov	r1, #0
   32e18:	mov	r0, r4
   32e1c:	blx	r3
   32e20:	b	32d54 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1fc>
   32e24:	str	r6, [sp]
   32e28:	add	r3, sp, #16
   32e2c:	mov	r2, #0
   32e30:	mov	r1, r8
   32e34:	bl	3101c <flatcc_json_parser_struct_as_root@@Base+0x1064>
   32e38:	ldr	r2, [r4, #20]
   32e3c:	add	r3, r2, sl
   32e40:	add	r3, r3, #1
   32e44:	str	r3, [r4, #20]
   32e48:	mov	r3, #34	; 0x22
   32e4c:	strb	r3, [r2, sl]
   32e50:	add	sp, sp, #28
   32e54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32e58:			; <UNDEFINED> instruction: 0x000439b8
   32e5c:	andeq	r0, r0, r5, lsl r1
   32e60:	andeq	r3, r4, ip, lsr #21
   32e64:	andeq	r3, r4, r8, lsl #24

00032e68 <flatcc_json_printer_uint8_field@@Base>:
   32e68:	push	{r4, r5, r6, r7, r8, lr}
   32e6c:	ldr	r6, [sp, #24]
   32e70:	ldrb	lr, [sp, #28]
   32e74:	add	r2, r2, #2
   32e78:	lsl	r2, r2, #1
   32e7c:	ldr	ip, [r1, #8]
   32e80:	cmp	r2, ip
   32e84:	bge	32f4c <flatcc_json_printer_uint8_field@@Base+0xe4>
   32e88:	ldr	ip, [r1, #4]
   32e8c:	ldrh	r2, [ip, r2]
   32e90:	cmp	r2, #0
   32e94:	beq	32f4c <flatcc_json_printer_uint8_field@@Base+0xe4>
   32e98:	ldr	ip, [r1]
   32e9c:	cmn	ip, r2
   32ea0:	beq	32f4c <flatcc_json_printer_uint8_field@@Base+0xe4>
   32ea4:	ldrb	r5, [ip, r2]
   32ea8:	cmp	lr, r5
   32eac:	beq	32f3c <flatcc_json_printer_uint8_field@@Base+0xd4>
   32eb0:	ldr	r2, [r1, #16]
   32eb4:	add	ip, r2, #1
   32eb8:	str	ip, [r1, #16]
   32ebc:	cmp	r2, #0
   32ec0:	ldrne	r2, [r0, #20]
   32ec4:	addne	r1, r2, #1
   32ec8:	strne	r1, [r0, #20]
   32ecc:	movne	r1, #44	; 0x2c
   32ed0:	strbne	r1, [r2]
   32ed4:	mov	r7, r3
   32ed8:	mov	r4, r0
   32edc:	ldrb	r3, [r0, #25]
   32ee0:	cmp	r3, #0
   32ee4:	bne	32f60 <flatcc_json_printer_uint8_field@@Base+0xf8>
   32ee8:	ldr	r2, [r0, #20]
   32eec:	ldr	r3, [r0, #16]
   32ef0:	cmp	r2, r3
   32ef4:	bcs	32fc0 <flatcc_json_printer_uint8_field@@Base+0x158>
   32ef8:	ldr	r3, [r4, #20]
   32efc:	mov	r2, #34	; 0x22
   32f00:	strb	r2, [r3]
   32f04:	ldrb	r3, [r4, #26]
   32f08:	ldr	r0, [r4, #20]
   32f0c:	cmp	r3, #0
   32f10:	addeq	r0, r0, #1
   32f14:	str	r0, [r4, #20]
   32f18:	add	r3, r0, r6
   32f1c:	ldr	r2, [r4, #16]
   32f20:	cmp	r2, r3
   32f24:	bhi	32fd0 <flatcc_json_printer_uint8_field@@Base+0x168>
   32f28:	mov	r2, r6
   32f2c:	mov	r1, r7
   32f30:	mov	r0, r4
   32f34:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   32f38:	b	32fe8 <flatcc_json_printer_uint8_field@@Base+0x180>
   32f3c:	ldrb	r2, [r0, #28]
   32f40:	cmp	r2, #0
   32f44:	beq	32eb0 <flatcc_json_printer_uint8_field@@Base+0x48>
   32f48:	pop	{r4, r5, r6, r7, r8, pc}
   32f4c:	ldrb	r2, [r0, #29]
   32f50:	cmp	r2, #0
   32f54:	popeq	{r4, r5, r6, r7, r8, pc}
   32f58:	mov	r5, lr
   32f5c:	b	32eb0 <flatcc_json_printer_uint8_field@@Base+0x48>
   32f60:	ldr	r3, [r0, #20]
   32f64:	add	r2, r3, #1
   32f68:	str	r2, [r0, #20]
   32f6c:	mov	r2, #10
   32f70:	strb	r2, [r3]
   32f74:	ldrb	r3, [r0, #25]
   32f78:	ldr	r8, [r0, #32]
   32f7c:	mul	r8, r8, r3
   32f80:	ldr	r0, [r0, #20]
   32f84:	add	r3, r0, r8
   32f88:	ldr	r2, [r4, #16]
   32f8c:	cmp	r2, r3
   32f90:	bcc	32fb0 <flatcc_json_printer_uint8_field@@Base+0x148>
   32f94:	mov	r2, r8
   32f98:	mov	r1, #32
   32f9c:	bl	145c4 <memset@plt>
   32fa0:	ldr	r3, [r4, #20]
   32fa4:	add	r8, r3, r8
   32fa8:	str	r8, [r4, #20]
   32fac:	b	32ef8 <flatcc_json_printer_uint8_field@@Base+0x90>
   32fb0:	mov	r1, r8
   32fb4:	mov	r0, r4
   32fb8:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   32fbc:	b	32ef8 <flatcc_json_printer_uint8_field@@Base+0x90>
   32fc0:	ldr	r3, [r0, #44]	; 0x2c
   32fc4:	mov	r1, #0
   32fc8:	blx	r3
   32fcc:	b	32ef8 <flatcc_json_printer_uint8_field@@Base+0x90>
   32fd0:	mov	r2, r6
   32fd4:	mov	r1, r7
   32fd8:	bl	1454c <memcpy@plt>
   32fdc:	ldr	r3, [r4, #20]
   32fe0:	add	r6, r3, r6
   32fe4:	str	r6, [r4, #20]
   32fe8:	ldr	r3, [r4, #20]
   32fec:	mov	r2, #34	; 0x22
   32ff0:	strb	r2, [r3]
   32ff4:	ldrb	r3, [r4, #26]
   32ff8:	clz	r3, r3
   32ffc:	lsr	r3, r3, #5
   33000:	ldr	r1, [r4, #20]
   33004:	add	r2, r1, r3
   33008:	add	r2, r2, #1
   3300c:	str	r2, [r4, #20]
   33010:	mov	r2, #58	; 0x3a
   33014:	strb	r2, [r1, r3]
   33018:	ldr	r3, [r4, #20]
   3301c:	mov	r2, #32
   33020:	strb	r2, [r3]
   33024:	ldrb	r3, [r4, #25]
   33028:	ldr	r1, [r4, #20]
   3302c:	cmp	r3, #0
   33030:	addne	r1, r1, #1
   33034:	str	r1, [r4, #20]
   33038:	mov	r0, r5
   3303c:	bl	30090 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   33040:	ldr	r3, [r4, #20]
   33044:	add	r0, r3, r0
   33048:	str	r0, [r4, #20]
   3304c:	pop	{r4, r5, r6, r7, r8, pc}

00033050 <flatcc_json_printer_uint16_field@@Base>:
   33050:	push	{r4, r5, r6, r7, r8, lr}
   33054:	ldr	r6, [sp, #24]
   33058:	ldrh	lr, [sp, #28]
   3305c:	add	r2, r2, #2
   33060:	lsl	r2, r2, #1
   33064:	ldr	ip, [r1, #8]
   33068:	cmp	r2, ip
   3306c:	bge	33134 <flatcc_json_printer_uint16_field@@Base+0xe4>
   33070:	ldr	ip, [r1, #4]
   33074:	ldrh	r2, [ip, r2]
   33078:	cmp	r2, #0
   3307c:	beq	33134 <flatcc_json_printer_uint16_field@@Base+0xe4>
   33080:	ldr	ip, [r1]
   33084:	cmn	ip, r2
   33088:	beq	33134 <flatcc_json_printer_uint16_field@@Base+0xe4>
   3308c:	ldrh	r5, [ip, r2]
   33090:	cmp	lr, r5
   33094:	beq	33124 <flatcc_json_printer_uint16_field@@Base+0xd4>
   33098:	ldr	r2, [r1, #16]
   3309c:	add	ip, r2, #1
   330a0:	str	ip, [r1, #16]
   330a4:	cmp	r2, #0
   330a8:	ldrne	r2, [r0, #20]
   330ac:	addne	r1, r2, #1
   330b0:	strne	r1, [r0, #20]
   330b4:	movne	r1, #44	; 0x2c
   330b8:	strbne	r1, [r2]
   330bc:	mov	r7, r3
   330c0:	mov	r4, r0
   330c4:	ldrb	r3, [r0, #25]
   330c8:	cmp	r3, #0
   330cc:	bne	33148 <flatcc_json_printer_uint16_field@@Base+0xf8>
   330d0:	ldr	r2, [r0, #20]
   330d4:	ldr	r3, [r0, #16]
   330d8:	cmp	r2, r3
   330dc:	bcs	331a8 <flatcc_json_printer_uint16_field@@Base+0x158>
   330e0:	ldr	r3, [r4, #20]
   330e4:	mov	r2, #34	; 0x22
   330e8:	strb	r2, [r3]
   330ec:	ldrb	r3, [r4, #26]
   330f0:	ldr	r0, [r4, #20]
   330f4:	cmp	r3, #0
   330f8:	addeq	r0, r0, #1
   330fc:	str	r0, [r4, #20]
   33100:	add	r3, r0, r6
   33104:	ldr	r2, [r4, #16]
   33108:	cmp	r2, r3
   3310c:	bhi	331b8 <flatcc_json_printer_uint16_field@@Base+0x168>
   33110:	mov	r2, r6
   33114:	mov	r1, r7
   33118:	mov	r0, r4
   3311c:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   33120:	b	331d0 <flatcc_json_printer_uint16_field@@Base+0x180>
   33124:	ldrb	r2, [r0, #28]
   33128:	cmp	r2, #0
   3312c:	beq	33098 <flatcc_json_printer_uint16_field@@Base+0x48>
   33130:	pop	{r4, r5, r6, r7, r8, pc}
   33134:	ldrb	r2, [r0, #29]
   33138:	cmp	r2, #0
   3313c:	popeq	{r4, r5, r6, r7, r8, pc}
   33140:	mov	r5, lr
   33144:	b	33098 <flatcc_json_printer_uint16_field@@Base+0x48>
   33148:	ldr	r3, [r0, #20]
   3314c:	add	r2, r3, #1
   33150:	str	r2, [r0, #20]
   33154:	mov	r2, #10
   33158:	strb	r2, [r3]
   3315c:	ldrb	r3, [r0, #25]
   33160:	ldr	r8, [r0, #32]
   33164:	mul	r8, r8, r3
   33168:	ldr	r0, [r0, #20]
   3316c:	add	r3, r0, r8
   33170:	ldr	r2, [r4, #16]
   33174:	cmp	r2, r3
   33178:	bcc	33198 <flatcc_json_printer_uint16_field@@Base+0x148>
   3317c:	mov	r2, r8
   33180:	mov	r1, #32
   33184:	bl	145c4 <memset@plt>
   33188:	ldr	r3, [r4, #20]
   3318c:	add	r8, r3, r8
   33190:	str	r8, [r4, #20]
   33194:	b	330e0 <flatcc_json_printer_uint16_field@@Base+0x90>
   33198:	mov	r1, r8
   3319c:	mov	r0, r4
   331a0:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   331a4:	b	330e0 <flatcc_json_printer_uint16_field@@Base+0x90>
   331a8:	ldr	r3, [r0, #44]	; 0x2c
   331ac:	mov	r1, #0
   331b0:	blx	r3
   331b4:	b	330e0 <flatcc_json_printer_uint16_field@@Base+0x90>
   331b8:	mov	r2, r6
   331bc:	mov	r1, r7
   331c0:	bl	1454c <memcpy@plt>
   331c4:	ldr	r3, [r4, #20]
   331c8:	add	r6, r3, r6
   331cc:	str	r6, [r4, #20]
   331d0:	ldr	r3, [r4, #20]
   331d4:	mov	r2, #34	; 0x22
   331d8:	strb	r2, [r3]
   331dc:	ldrb	r3, [r4, #26]
   331e0:	clz	r3, r3
   331e4:	lsr	r3, r3, #5
   331e8:	ldr	r1, [r4, #20]
   331ec:	add	r2, r1, r3
   331f0:	add	r2, r2, #1
   331f4:	str	r2, [r4, #20]
   331f8:	mov	r2, #58	; 0x3a
   331fc:	strb	r2, [r1, r3]
   33200:	ldr	r3, [r4, #20]
   33204:	mov	r2, #32
   33208:	strb	r2, [r3]
   3320c:	ldrb	r3, [r4, #25]
   33210:	ldr	r1, [r4, #20]
   33214:	cmp	r3, #0
   33218:	addne	r1, r1, #1
   3321c:	str	r1, [r4, #20]
   33220:	mov	r0, r5
   33224:	bl	30150 <flatcc_json_parser_struct_as_root@@Base+0x198>
   33228:	ldr	r3, [r4, #20]
   3322c:	add	r0, r3, r0
   33230:	str	r0, [r4, #20]
   33234:	pop	{r4, r5, r6, r7, r8, pc}

00033238 <flatcc_json_printer_uint32_field@@Base>:
   33238:	push	{r4, r5, r6, r7, r8, lr}
   3323c:	ldr	r6, [sp, #24]
   33240:	add	r2, r2, #2
   33244:	lsl	r2, r2, #1
   33248:	ldr	ip, [r1, #8]
   3324c:	cmp	r2, ip
   33250:	bge	3331c <flatcc_json_printer_uint32_field@@Base+0xe4>
   33254:	ldr	ip, [r1, #4]
   33258:	ldrh	r2, [ip, r2]
   3325c:	cmp	r2, #0
   33260:	beq	3331c <flatcc_json_printer_uint32_field@@Base+0xe4>
   33264:	ldr	ip, [r1]
   33268:	cmn	ip, r2
   3326c:	beq	3331c <flatcc_json_printer_uint32_field@@Base+0xe4>
   33270:	ldr	r5, [ip, r2]
   33274:	ldr	r2, [sp, #28]
   33278:	cmp	r2, r5
   3327c:	beq	3330c <flatcc_json_printer_uint32_field@@Base+0xd4>
   33280:	ldr	r2, [r1, #16]
   33284:	add	ip, r2, #1
   33288:	str	ip, [r1, #16]
   3328c:	cmp	r2, #0
   33290:	ldrne	r2, [r0, #20]
   33294:	addne	r1, r2, #1
   33298:	strne	r1, [r0, #20]
   3329c:	movne	r1, #44	; 0x2c
   332a0:	strbne	r1, [r2]
   332a4:	mov	r7, r3
   332a8:	mov	r4, r0
   332ac:	ldrb	r3, [r0, #25]
   332b0:	cmp	r3, #0
   332b4:	bne	33330 <flatcc_json_printer_uint32_field@@Base+0xf8>
   332b8:	ldr	r2, [r0, #20]
   332bc:	ldr	r3, [r0, #16]
   332c0:	cmp	r2, r3
   332c4:	bcs	33390 <flatcc_json_printer_uint32_field@@Base+0x158>
   332c8:	ldr	r3, [r4, #20]
   332cc:	mov	r2, #34	; 0x22
   332d0:	strb	r2, [r3]
   332d4:	ldrb	r3, [r4, #26]
   332d8:	ldr	r0, [r4, #20]
   332dc:	cmp	r3, #0
   332e0:	addeq	r0, r0, #1
   332e4:	str	r0, [r4, #20]
   332e8:	add	r3, r0, r6
   332ec:	ldr	r2, [r4, #16]
   332f0:	cmp	r2, r3
   332f4:	bhi	333a0 <flatcc_json_printer_uint32_field@@Base+0x168>
   332f8:	mov	r2, r6
   332fc:	mov	r1, r7
   33300:	mov	r0, r4
   33304:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   33308:	b	333b8 <flatcc_json_printer_uint32_field@@Base+0x180>
   3330c:	ldrb	r2, [r0, #28]
   33310:	cmp	r2, #0
   33314:	beq	33280 <flatcc_json_printer_uint32_field@@Base+0x48>
   33318:	pop	{r4, r5, r6, r7, r8, pc}
   3331c:	ldrb	r2, [r0, #29]
   33320:	cmp	r2, #0
   33324:	popeq	{r4, r5, r6, r7, r8, pc}
   33328:	ldr	r5, [sp, #28]
   3332c:	b	33280 <flatcc_json_printer_uint32_field@@Base+0x48>
   33330:	ldr	r3, [r0, #20]
   33334:	add	r2, r3, #1
   33338:	str	r2, [r0, #20]
   3333c:	mov	r2, #10
   33340:	strb	r2, [r3]
   33344:	ldrb	r3, [r0, #25]
   33348:	ldr	r8, [r0, #32]
   3334c:	mul	r8, r8, r3
   33350:	ldr	r0, [r0, #20]
   33354:	add	r3, r0, r8
   33358:	ldr	r2, [r4, #16]
   3335c:	cmp	r2, r3
   33360:	bcc	33380 <flatcc_json_printer_uint32_field@@Base+0x148>
   33364:	mov	r2, r8
   33368:	mov	r1, #32
   3336c:	bl	145c4 <memset@plt>
   33370:	ldr	r3, [r4, #20]
   33374:	add	r8, r3, r8
   33378:	str	r8, [r4, #20]
   3337c:	b	332c8 <flatcc_json_printer_uint32_field@@Base+0x90>
   33380:	mov	r1, r8
   33384:	mov	r0, r4
   33388:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3338c:	b	332c8 <flatcc_json_printer_uint32_field@@Base+0x90>
   33390:	ldr	r3, [r0, #44]	; 0x2c
   33394:	mov	r1, #0
   33398:	blx	r3
   3339c:	b	332c8 <flatcc_json_printer_uint32_field@@Base+0x90>
   333a0:	mov	r2, r6
   333a4:	mov	r1, r7
   333a8:	bl	1454c <memcpy@plt>
   333ac:	ldr	r3, [r4, #20]
   333b0:	add	r6, r3, r6
   333b4:	str	r6, [r4, #20]
   333b8:	ldr	r3, [r4, #20]
   333bc:	mov	r2, #34	; 0x22
   333c0:	strb	r2, [r3]
   333c4:	ldrb	r3, [r4, #26]
   333c8:	clz	r3, r3
   333cc:	lsr	r3, r3, #5
   333d0:	ldr	r1, [r4, #20]
   333d4:	add	r2, r1, r3
   333d8:	add	r2, r2, #1
   333dc:	str	r2, [r4, #20]
   333e0:	mov	r2, #58	; 0x3a
   333e4:	strb	r2, [r1, r3]
   333e8:	ldr	r3, [r4, #20]
   333ec:	mov	r2, #32
   333f0:	strb	r2, [r3]
   333f4:	ldrb	r3, [r4, #25]
   333f8:	ldr	r1, [r4, #20]
   333fc:	cmp	r3, #0
   33400:	addne	r1, r1, #1
   33404:	str	r1, [r4, #20]
   33408:	mov	r0, r5
   3340c:	bl	302d4 <flatcc_json_parser_struct_as_root@@Base+0x31c>
   33410:	ldr	r3, [r4, #20]
   33414:	add	r0, r3, r0
   33418:	str	r0, [r4, #20]
   3341c:	pop	{r4, r5, r6, r7, r8, pc}

00033420 <flatcc_json_printer_uint64_field@@Base>:
   33420:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   33424:	ldr	r5, [sp, #32]
   33428:	add	r2, r2, #2
   3342c:	lsl	r2, r2, #1
   33430:	ldr	ip, [r1, #8]
   33434:	cmp	r2, ip
   33438:	bge	33508 <flatcc_json_printer_uint64_field@@Base+0xe8>
   3343c:	ldr	ip, [r1, #4]
   33440:	ldrh	r2, [ip, r2]
   33444:	cmp	r2, #0
   33448:	beq	33508 <flatcc_json_printer_uint64_field@@Base+0xe8>
   3344c:	ldr	ip, [r1]
   33450:	cmn	ip, r2
   33454:	beq	33508 <flatcc_json_printer_uint64_field@@Base+0xe8>
   33458:	ldrd	r6, [ip, r2]
   3345c:	ldrd	r8, [sp, #40]	; 0x28
   33460:	cmp	r9, r7
   33464:	cmpeq	r8, r6
   33468:	beq	334f8 <flatcc_json_printer_uint64_field@@Base+0xd8>
   3346c:	ldr	r2, [r1, #16]
   33470:	add	ip, r2, #1
   33474:	str	ip, [r1, #16]
   33478:	cmp	r2, #0
   3347c:	ldrne	r2, [r0, #20]
   33480:	addne	r1, r2, #1
   33484:	strne	r1, [r0, #20]
   33488:	movne	r1, #44	; 0x2c
   3348c:	strbne	r1, [r2]
   33490:	mov	r8, r3
   33494:	mov	r4, r0
   33498:	ldrb	r3, [r0, #25]
   3349c:	cmp	r3, #0
   334a0:	bne	3351c <flatcc_json_printer_uint64_field@@Base+0xfc>
   334a4:	ldr	r2, [r0, #20]
   334a8:	ldr	r3, [r0, #16]
   334ac:	cmp	r2, r3
   334b0:	bcs	3357c <flatcc_json_printer_uint64_field@@Base+0x15c>
   334b4:	ldr	r3, [r4, #20]
   334b8:	mov	r2, #34	; 0x22
   334bc:	strb	r2, [r3]
   334c0:	ldrb	r3, [r4, #26]
   334c4:	ldr	r0, [r4, #20]
   334c8:	cmp	r3, #0
   334cc:	addeq	r0, r0, #1
   334d0:	str	r0, [r4, #20]
   334d4:	add	r3, r0, r5
   334d8:	ldr	r2, [r4, #16]
   334dc:	cmp	r2, r3
   334e0:	bhi	3358c <flatcc_json_printer_uint64_field@@Base+0x16c>
   334e4:	mov	r2, r5
   334e8:	mov	r1, r8
   334ec:	mov	r0, r4
   334f0:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   334f4:	b	335a4 <flatcc_json_printer_uint64_field@@Base+0x184>
   334f8:	ldrb	r2, [r0, #28]
   334fc:	cmp	r2, #0
   33500:	beq	3346c <flatcc_json_printer_uint64_field@@Base+0x4c>
   33504:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33508:	ldrb	r2, [r0, #29]
   3350c:	cmp	r2, #0
   33510:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   33514:	ldrd	r6, [sp, #40]	; 0x28
   33518:	b	3346c <flatcc_json_printer_uint64_field@@Base+0x4c>
   3351c:	ldr	r3, [r0, #20]
   33520:	add	r2, r3, #1
   33524:	str	r2, [r0, #20]
   33528:	mov	r2, #10
   3352c:	strb	r2, [r3]
   33530:	ldrb	r3, [r0, #25]
   33534:	ldr	r9, [r0, #32]
   33538:	mul	r9, r9, r3
   3353c:	ldr	r0, [r0, #20]
   33540:	add	r3, r0, r9
   33544:	ldr	r2, [r4, #16]
   33548:	cmp	r2, r3
   3354c:	bcc	3356c <flatcc_json_printer_uint64_field@@Base+0x14c>
   33550:	mov	r2, r9
   33554:	mov	r1, #32
   33558:	bl	145c4 <memset@plt>
   3355c:	ldr	r3, [r4, #20]
   33560:	add	r9, r3, r9
   33564:	str	r9, [r4, #20]
   33568:	b	334b4 <flatcc_json_printer_uint64_field@@Base+0x94>
   3356c:	mov	r1, r9
   33570:	mov	r0, r4
   33574:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   33578:	b	334b4 <flatcc_json_printer_uint64_field@@Base+0x94>
   3357c:	ldr	r3, [r0, #44]	; 0x2c
   33580:	mov	r1, #0
   33584:	blx	r3
   33588:	b	334b4 <flatcc_json_printer_uint64_field@@Base+0x94>
   3358c:	mov	r2, r5
   33590:	mov	r1, r8
   33594:	bl	1454c <memcpy@plt>
   33598:	ldr	r3, [r4, #20]
   3359c:	add	r5, r3, r5
   335a0:	str	r5, [r4, #20]
   335a4:	ldr	r3, [r4, #20]
   335a8:	mov	r2, #34	; 0x22
   335ac:	strb	r2, [r3]
   335b0:	ldrb	r3, [r4, #26]
   335b4:	clz	r3, r3
   335b8:	lsr	r3, r3, #5
   335bc:	ldr	r1, [r4, #20]
   335c0:	add	r2, r1, r3
   335c4:	add	r2, r2, #1
   335c8:	str	r2, [r4, #20]
   335cc:	mov	r2, #58	; 0x3a
   335d0:	strb	r2, [r1, r3]
   335d4:	ldr	r3, [r4, #20]
   335d8:	mov	r2, #32
   335dc:	strb	r2, [r3]
   335e0:	ldrb	r3, [r4, #25]
   335e4:	ldr	r2, [r4, #20]
   335e8:	cmp	r3, #0
   335ec:	addne	r2, r2, #1
   335f0:	str	r2, [r4, #20]
   335f4:	mov	r0, r6
   335f8:	mov	r1, r7
   335fc:	bl	30614 <flatcc_json_parser_struct_as_root@@Base+0x65c>
   33600:	ldr	r3, [r4, #20]
   33604:	add	r0, r3, r0
   33608:	str	r0, [r4, #20]
   3360c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00033610 <flatcc_json_printer_int8_field@@Base>:
   33610:	push	{r4, r5, r6, r7, r8, lr}
   33614:	ldr	r6, [sp, #24]
   33618:	ldrsb	lr, [sp, #28]
   3361c:	add	r2, r2, #2
   33620:	lsl	r2, r2, #1
   33624:	ldr	ip, [r1, #8]
   33628:	cmp	r2, ip
   3362c:	bge	336f4 <flatcc_json_printer_int8_field@@Base+0xe4>
   33630:	ldr	ip, [r1, #4]
   33634:	ldrh	r2, [ip, r2]
   33638:	cmp	r2, #0
   3363c:	beq	336f4 <flatcc_json_printer_int8_field@@Base+0xe4>
   33640:	ldr	ip, [r1]
   33644:	cmn	ip, r2
   33648:	beq	336f4 <flatcc_json_printer_int8_field@@Base+0xe4>
   3364c:	ldrsb	r5, [ip, r2]
   33650:	cmp	lr, r5
   33654:	beq	336e4 <flatcc_json_printer_int8_field@@Base+0xd4>
   33658:	ldr	r2, [r1, #16]
   3365c:	add	ip, r2, #1
   33660:	str	ip, [r1, #16]
   33664:	cmp	r2, #0
   33668:	ldrne	r2, [r0, #20]
   3366c:	addne	r1, r2, #1
   33670:	strne	r1, [r0, #20]
   33674:	movne	r1, #44	; 0x2c
   33678:	strbne	r1, [r2]
   3367c:	mov	r7, r3
   33680:	mov	r4, r0
   33684:	ldrb	r3, [r0, #25]
   33688:	cmp	r3, #0
   3368c:	bne	33708 <flatcc_json_printer_int8_field@@Base+0xf8>
   33690:	ldr	r2, [r0, #20]
   33694:	ldr	r3, [r0, #16]
   33698:	cmp	r2, r3
   3369c:	bcs	33768 <flatcc_json_printer_int8_field@@Base+0x158>
   336a0:	ldr	r3, [r4, #20]
   336a4:	mov	r2, #34	; 0x22
   336a8:	strb	r2, [r3]
   336ac:	ldrb	r3, [r4, #26]
   336b0:	ldr	r0, [r4, #20]
   336b4:	cmp	r3, #0
   336b8:	addeq	r0, r0, #1
   336bc:	str	r0, [r4, #20]
   336c0:	add	r3, r0, r6
   336c4:	ldr	r2, [r4, #16]
   336c8:	cmp	r2, r3
   336cc:	bhi	33778 <flatcc_json_printer_int8_field@@Base+0x168>
   336d0:	mov	r2, r6
   336d4:	mov	r1, r7
   336d8:	mov	r0, r4
   336dc:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   336e0:	b	33790 <flatcc_json_printer_int8_field@@Base+0x180>
   336e4:	ldrb	r2, [r0, #28]
   336e8:	cmp	r2, #0
   336ec:	beq	33658 <flatcc_json_printer_int8_field@@Base+0x48>
   336f0:	pop	{r4, r5, r6, r7, r8, pc}
   336f4:	ldrb	r2, [r0, #29]
   336f8:	cmp	r2, #0
   336fc:	popeq	{r4, r5, r6, r7, r8, pc}
   33700:	mov	r5, lr
   33704:	b	33658 <flatcc_json_printer_int8_field@@Base+0x48>
   33708:	ldr	r3, [r0, #20]
   3370c:	add	r2, r3, #1
   33710:	str	r2, [r0, #20]
   33714:	mov	r2, #10
   33718:	strb	r2, [r3]
   3371c:	ldrb	r3, [r0, #25]
   33720:	ldr	r8, [r0, #32]
   33724:	mul	r8, r8, r3
   33728:	ldr	r0, [r0, #20]
   3372c:	add	r3, r0, r8
   33730:	ldr	r2, [r4, #16]
   33734:	cmp	r2, r3
   33738:	bcc	33758 <flatcc_json_printer_int8_field@@Base+0x148>
   3373c:	mov	r2, r8
   33740:	mov	r1, #32
   33744:	bl	145c4 <memset@plt>
   33748:	ldr	r3, [r4, #20]
   3374c:	add	r8, r3, r8
   33750:	str	r8, [r4, #20]
   33754:	b	336a0 <flatcc_json_printer_int8_field@@Base+0x90>
   33758:	mov	r1, r8
   3375c:	mov	r0, r4
   33760:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   33764:	b	336a0 <flatcc_json_printer_int8_field@@Base+0x90>
   33768:	ldr	r3, [r0, #44]	; 0x2c
   3376c:	mov	r1, #0
   33770:	blx	r3
   33774:	b	336a0 <flatcc_json_printer_int8_field@@Base+0x90>
   33778:	mov	r2, r6
   3377c:	mov	r1, r7
   33780:	bl	1454c <memcpy@plt>
   33784:	ldr	r3, [r4, #20]
   33788:	add	r6, r3, r6
   3378c:	str	r6, [r4, #20]
   33790:	ldr	r3, [r4, #20]
   33794:	mov	r2, #34	; 0x22
   33798:	strb	r2, [r3]
   3379c:	ldrb	r3, [r4, #26]
   337a0:	clz	r3, r3
   337a4:	lsr	r3, r3, #5
   337a8:	ldr	r1, [r4, #20]
   337ac:	add	r2, r1, r3
   337b0:	add	r2, r2, #1
   337b4:	str	r2, [r4, #20]
   337b8:	mov	r2, #58	; 0x3a
   337bc:	strb	r2, [r1, r3]
   337c0:	ldr	r3, [r4, #20]
   337c4:	mov	r2, #32
   337c8:	strb	r2, [r3]
   337cc:	ldrb	r3, [r4, #25]
   337d0:	ldr	r1, [r4, #20]
   337d4:	cmp	r3, #0
   337d8:	addne	r1, r1, #1
   337dc:	str	r1, [r4, #20]
   337e0:	mov	r0, r5
   337e4:	bl	30c98 <flatcc_json_parser_struct_as_root@@Base+0xce0>
   337e8:	ldr	r3, [r4, #20]
   337ec:	add	r0, r3, r0
   337f0:	str	r0, [r4, #20]
   337f4:	pop	{r4, r5, r6, r7, r8, pc}

000337f8 <flatcc_json_printer_int16_field@@Base>:
   337f8:	push	{r4, r5, r6, r7, r8, lr}
   337fc:	ldr	r6, [sp, #24]
   33800:	ldrsh	lr, [sp, #28]
   33804:	add	r2, r2, #2
   33808:	lsl	r2, r2, #1
   3380c:	ldr	ip, [r1, #8]
   33810:	cmp	r2, ip
   33814:	bge	338dc <flatcc_json_printer_int16_field@@Base+0xe4>
   33818:	ldr	ip, [r1, #4]
   3381c:	ldrh	r2, [ip, r2]
   33820:	cmp	r2, #0
   33824:	beq	338dc <flatcc_json_printer_int16_field@@Base+0xe4>
   33828:	ldr	ip, [r1]
   3382c:	cmn	ip, r2
   33830:	beq	338dc <flatcc_json_printer_int16_field@@Base+0xe4>
   33834:	ldrsh	r5, [ip, r2]
   33838:	cmp	lr, r5
   3383c:	beq	338cc <flatcc_json_printer_int16_field@@Base+0xd4>
   33840:	ldr	r2, [r1, #16]
   33844:	add	ip, r2, #1
   33848:	str	ip, [r1, #16]
   3384c:	cmp	r2, #0
   33850:	ldrne	r2, [r0, #20]
   33854:	addne	r1, r2, #1
   33858:	strne	r1, [r0, #20]
   3385c:	movne	r1, #44	; 0x2c
   33860:	strbne	r1, [r2]
   33864:	mov	r7, r3
   33868:	mov	r4, r0
   3386c:	ldrb	r3, [r0, #25]
   33870:	cmp	r3, #0
   33874:	bne	338f0 <flatcc_json_printer_int16_field@@Base+0xf8>
   33878:	ldr	r2, [r0, #20]
   3387c:	ldr	r3, [r0, #16]
   33880:	cmp	r2, r3
   33884:	bcs	33950 <flatcc_json_printer_int16_field@@Base+0x158>
   33888:	ldr	r3, [r4, #20]
   3388c:	mov	r2, #34	; 0x22
   33890:	strb	r2, [r3]
   33894:	ldrb	r3, [r4, #26]
   33898:	ldr	r0, [r4, #20]
   3389c:	cmp	r3, #0
   338a0:	addeq	r0, r0, #1
   338a4:	str	r0, [r4, #20]
   338a8:	add	r3, r0, r6
   338ac:	ldr	r2, [r4, #16]
   338b0:	cmp	r2, r3
   338b4:	bhi	33960 <flatcc_json_printer_int16_field@@Base+0x168>
   338b8:	mov	r2, r6
   338bc:	mov	r1, r7
   338c0:	mov	r0, r4
   338c4:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   338c8:	b	33978 <flatcc_json_printer_int16_field@@Base+0x180>
   338cc:	ldrb	r2, [r0, #28]
   338d0:	cmp	r2, #0
   338d4:	beq	33840 <flatcc_json_printer_int16_field@@Base+0x48>
   338d8:	pop	{r4, r5, r6, r7, r8, pc}
   338dc:	ldrb	r2, [r0, #29]
   338e0:	cmp	r2, #0
   338e4:	popeq	{r4, r5, r6, r7, r8, pc}
   338e8:	mov	r5, lr
   338ec:	b	33840 <flatcc_json_printer_int16_field@@Base+0x48>
   338f0:	ldr	r3, [r0, #20]
   338f4:	add	r2, r3, #1
   338f8:	str	r2, [r0, #20]
   338fc:	mov	r2, #10
   33900:	strb	r2, [r3]
   33904:	ldrb	r3, [r0, #25]
   33908:	ldr	r8, [r0, #32]
   3390c:	mul	r8, r8, r3
   33910:	ldr	r0, [r0, #20]
   33914:	add	r3, r0, r8
   33918:	ldr	r2, [r4, #16]
   3391c:	cmp	r2, r3
   33920:	bcc	33940 <flatcc_json_printer_int16_field@@Base+0x148>
   33924:	mov	r2, r8
   33928:	mov	r1, #32
   3392c:	bl	145c4 <memset@plt>
   33930:	ldr	r3, [r4, #20]
   33934:	add	r8, r3, r8
   33938:	str	r8, [r4, #20]
   3393c:	b	33888 <flatcc_json_printer_int16_field@@Base+0x90>
   33940:	mov	r1, r8
   33944:	mov	r0, r4
   33948:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3394c:	b	33888 <flatcc_json_printer_int16_field@@Base+0x90>
   33950:	ldr	r3, [r0, #44]	; 0x2c
   33954:	mov	r1, #0
   33958:	blx	r3
   3395c:	b	33888 <flatcc_json_printer_int16_field@@Base+0x90>
   33960:	mov	r2, r6
   33964:	mov	r1, r7
   33968:	bl	1454c <memcpy@plt>
   3396c:	ldr	r3, [r4, #20]
   33970:	add	r6, r3, r6
   33974:	str	r6, [r4, #20]
   33978:	ldr	r3, [r4, #20]
   3397c:	mov	r2, #34	; 0x22
   33980:	strb	r2, [r3]
   33984:	ldrb	r3, [r4, #26]
   33988:	clz	r3, r3
   3398c:	lsr	r3, r3, #5
   33990:	ldr	r1, [r4, #20]
   33994:	add	r2, r1, r3
   33998:	add	r2, r2, #1
   3399c:	str	r2, [r4, #20]
   339a0:	mov	r2, #58	; 0x3a
   339a4:	strb	r2, [r1, r3]
   339a8:	ldr	r3, [r4, #20]
   339ac:	mov	r2, #32
   339b0:	strb	r2, [r3]
   339b4:	ldrb	r3, [r4, #25]
   339b8:	ldr	r1, [r4, #20]
   339bc:	cmp	r3, #0
   339c0:	addne	r1, r1, #1
   339c4:	str	r1, [r4, #20]
   339c8:	mov	r0, r5
   339cc:	bl	30cc8 <flatcc_json_parser_struct_as_root@@Base+0xd10>
   339d0:	ldr	r3, [r4, #20]
   339d4:	add	r0, r3, r0
   339d8:	str	r0, [r4, #20]
   339dc:	pop	{r4, r5, r6, r7, r8, pc}

000339e0 <flatcc_json_printer_int32_field@@Base>:
   339e0:	push	{r4, r5, r6, r7, r8, lr}
   339e4:	ldr	r6, [sp, #24]
   339e8:	add	r2, r2, #2
   339ec:	lsl	r2, r2, #1
   339f0:	ldr	ip, [r1, #8]
   339f4:	cmp	r2, ip
   339f8:	bge	33ac4 <flatcc_json_printer_int32_field@@Base+0xe4>
   339fc:	ldr	ip, [r1, #4]
   33a00:	ldrh	r2, [ip, r2]
   33a04:	cmp	r2, #0
   33a08:	beq	33ac4 <flatcc_json_printer_int32_field@@Base+0xe4>
   33a0c:	ldr	ip, [r1]
   33a10:	cmn	ip, r2
   33a14:	beq	33ac4 <flatcc_json_printer_int32_field@@Base+0xe4>
   33a18:	ldr	r5, [ip, r2]
   33a1c:	ldr	r2, [sp, #28]
   33a20:	cmp	r2, r5
   33a24:	beq	33ab4 <flatcc_json_printer_int32_field@@Base+0xd4>
   33a28:	ldr	r2, [r1, #16]
   33a2c:	add	ip, r2, #1
   33a30:	str	ip, [r1, #16]
   33a34:	cmp	r2, #0
   33a38:	ldrne	r2, [r0, #20]
   33a3c:	addne	r1, r2, #1
   33a40:	strne	r1, [r0, #20]
   33a44:	movne	r1, #44	; 0x2c
   33a48:	strbne	r1, [r2]
   33a4c:	mov	r7, r3
   33a50:	mov	r4, r0
   33a54:	ldrb	r3, [r0, #25]
   33a58:	cmp	r3, #0
   33a5c:	bne	33ad8 <flatcc_json_printer_int32_field@@Base+0xf8>
   33a60:	ldr	r2, [r0, #20]
   33a64:	ldr	r3, [r0, #16]
   33a68:	cmp	r2, r3
   33a6c:	bcs	33b38 <flatcc_json_printer_int32_field@@Base+0x158>
   33a70:	ldr	r3, [r4, #20]
   33a74:	mov	r2, #34	; 0x22
   33a78:	strb	r2, [r3]
   33a7c:	ldrb	r3, [r4, #26]
   33a80:	ldr	r0, [r4, #20]
   33a84:	cmp	r3, #0
   33a88:	addeq	r0, r0, #1
   33a8c:	str	r0, [r4, #20]
   33a90:	add	r3, r0, r6
   33a94:	ldr	r2, [r4, #16]
   33a98:	cmp	r2, r3
   33a9c:	bhi	33b48 <flatcc_json_printer_int32_field@@Base+0x168>
   33aa0:	mov	r2, r6
   33aa4:	mov	r1, r7
   33aa8:	mov	r0, r4
   33aac:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   33ab0:	b	33b60 <flatcc_json_printer_int32_field@@Base+0x180>
   33ab4:	ldrb	r2, [r0, #28]
   33ab8:	cmp	r2, #0
   33abc:	beq	33a28 <flatcc_json_printer_int32_field@@Base+0x48>
   33ac0:	pop	{r4, r5, r6, r7, r8, pc}
   33ac4:	ldrb	r2, [r0, #29]
   33ac8:	cmp	r2, #0
   33acc:	popeq	{r4, r5, r6, r7, r8, pc}
   33ad0:	ldr	r5, [sp, #28]
   33ad4:	b	33a28 <flatcc_json_printer_int32_field@@Base+0x48>
   33ad8:	ldr	r3, [r0, #20]
   33adc:	add	r2, r3, #1
   33ae0:	str	r2, [r0, #20]
   33ae4:	mov	r2, #10
   33ae8:	strb	r2, [r3]
   33aec:	ldrb	r3, [r0, #25]
   33af0:	ldr	r8, [r0, #32]
   33af4:	mul	r8, r8, r3
   33af8:	ldr	r0, [r0, #20]
   33afc:	add	r3, r0, r8
   33b00:	ldr	r2, [r4, #16]
   33b04:	cmp	r2, r3
   33b08:	bcc	33b28 <flatcc_json_printer_int32_field@@Base+0x148>
   33b0c:	mov	r2, r8
   33b10:	mov	r1, #32
   33b14:	bl	145c4 <memset@plt>
   33b18:	ldr	r3, [r4, #20]
   33b1c:	add	r8, r3, r8
   33b20:	str	r8, [r4, #20]
   33b24:	b	33a70 <flatcc_json_printer_int32_field@@Base+0x90>
   33b28:	mov	r1, r8
   33b2c:	mov	r0, r4
   33b30:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   33b34:	b	33a70 <flatcc_json_printer_int32_field@@Base+0x90>
   33b38:	ldr	r3, [r0, #44]	; 0x2c
   33b3c:	mov	r1, #0
   33b40:	blx	r3
   33b44:	b	33a70 <flatcc_json_printer_int32_field@@Base+0x90>
   33b48:	mov	r2, r6
   33b4c:	mov	r1, r7
   33b50:	bl	1454c <memcpy@plt>
   33b54:	ldr	r3, [r4, #20]
   33b58:	add	r6, r3, r6
   33b5c:	str	r6, [r4, #20]
   33b60:	ldr	r3, [r4, #20]
   33b64:	mov	r2, #34	; 0x22
   33b68:	strb	r2, [r3]
   33b6c:	ldrb	r3, [r4, #26]
   33b70:	clz	r3, r3
   33b74:	lsr	r3, r3, #5
   33b78:	ldr	r1, [r4, #20]
   33b7c:	add	r2, r1, r3
   33b80:	add	r2, r2, #1
   33b84:	str	r2, [r4, #20]
   33b88:	mov	r2, #58	; 0x3a
   33b8c:	strb	r2, [r1, r3]
   33b90:	ldr	r3, [r4, #20]
   33b94:	mov	r2, #32
   33b98:	strb	r2, [r3]
   33b9c:	ldrb	r3, [r4, #25]
   33ba0:	ldr	r1, [r4, #20]
   33ba4:	cmp	r3, #0
   33ba8:	addne	r1, r1, #1
   33bac:	str	r1, [r4, #20]
   33bb0:	mov	r0, r5
   33bb4:	bl	30cf8 <flatcc_json_parser_struct_as_root@@Base+0xd40>
   33bb8:	ldr	r3, [r4, #20]
   33bbc:	add	r0, r3, r0
   33bc0:	str	r0, [r4, #20]
   33bc4:	pop	{r4, r5, r6, r7, r8, pc}

00033bc8 <flatcc_json_printer_int64_field@@Base>:
   33bc8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   33bcc:	ldr	r5, [sp, #32]
   33bd0:	add	r2, r2, #2
   33bd4:	lsl	r2, r2, #1
   33bd8:	ldr	ip, [r1, #8]
   33bdc:	cmp	r2, ip
   33be0:	bge	33cb0 <flatcc_json_printer_int64_field@@Base+0xe8>
   33be4:	ldr	ip, [r1, #4]
   33be8:	ldrh	r2, [ip, r2]
   33bec:	cmp	r2, #0
   33bf0:	beq	33cb0 <flatcc_json_printer_int64_field@@Base+0xe8>
   33bf4:	ldr	ip, [r1]
   33bf8:	cmn	ip, r2
   33bfc:	beq	33cb0 <flatcc_json_printer_int64_field@@Base+0xe8>
   33c00:	ldrd	r6, [ip, r2]
   33c04:	ldrd	r8, [sp, #40]	; 0x28
   33c08:	cmp	r9, r7
   33c0c:	cmpeq	r8, r6
   33c10:	beq	33ca0 <flatcc_json_printer_int64_field@@Base+0xd8>
   33c14:	ldr	r2, [r1, #16]
   33c18:	add	ip, r2, #1
   33c1c:	str	ip, [r1, #16]
   33c20:	cmp	r2, #0
   33c24:	ldrne	r2, [r0, #20]
   33c28:	addne	r1, r2, #1
   33c2c:	strne	r1, [r0, #20]
   33c30:	movne	r1, #44	; 0x2c
   33c34:	strbne	r1, [r2]
   33c38:	mov	r8, r3
   33c3c:	mov	r4, r0
   33c40:	ldrb	r3, [r0, #25]
   33c44:	cmp	r3, #0
   33c48:	bne	33cc4 <flatcc_json_printer_int64_field@@Base+0xfc>
   33c4c:	ldr	r2, [r0, #20]
   33c50:	ldr	r3, [r0, #16]
   33c54:	cmp	r2, r3
   33c58:	bcs	33d24 <flatcc_json_printer_int64_field@@Base+0x15c>
   33c5c:	ldr	r3, [r4, #20]
   33c60:	mov	r2, #34	; 0x22
   33c64:	strb	r2, [r3]
   33c68:	ldrb	r3, [r4, #26]
   33c6c:	ldr	r0, [r4, #20]
   33c70:	cmp	r3, #0
   33c74:	addeq	r0, r0, #1
   33c78:	str	r0, [r4, #20]
   33c7c:	add	r3, r0, r5
   33c80:	ldr	r2, [r4, #16]
   33c84:	cmp	r2, r3
   33c88:	bhi	33d34 <flatcc_json_printer_int64_field@@Base+0x16c>
   33c8c:	mov	r2, r5
   33c90:	mov	r1, r8
   33c94:	mov	r0, r4
   33c98:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   33c9c:	b	33d4c <flatcc_json_printer_int64_field@@Base+0x184>
   33ca0:	ldrb	r2, [r0, #28]
   33ca4:	cmp	r2, #0
   33ca8:	beq	33c14 <flatcc_json_printer_int64_field@@Base+0x4c>
   33cac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33cb0:	ldrb	r2, [r0, #29]
   33cb4:	cmp	r2, #0
   33cb8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   33cbc:	ldrd	r6, [sp, #40]	; 0x28
   33cc0:	b	33c14 <flatcc_json_printer_int64_field@@Base+0x4c>
   33cc4:	ldr	r3, [r0, #20]
   33cc8:	add	r2, r3, #1
   33ccc:	str	r2, [r0, #20]
   33cd0:	mov	r2, #10
   33cd4:	strb	r2, [r3]
   33cd8:	ldrb	r3, [r0, #25]
   33cdc:	ldr	r9, [r0, #32]
   33ce0:	mul	r9, r9, r3
   33ce4:	ldr	r0, [r0, #20]
   33ce8:	add	r3, r0, r9
   33cec:	ldr	r2, [r4, #16]
   33cf0:	cmp	r2, r3
   33cf4:	bcc	33d14 <flatcc_json_printer_int64_field@@Base+0x14c>
   33cf8:	mov	r2, r9
   33cfc:	mov	r1, #32
   33d00:	bl	145c4 <memset@plt>
   33d04:	ldr	r3, [r4, #20]
   33d08:	add	r9, r3, r9
   33d0c:	str	r9, [r4, #20]
   33d10:	b	33c5c <flatcc_json_printer_int64_field@@Base+0x94>
   33d14:	mov	r1, r9
   33d18:	mov	r0, r4
   33d1c:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   33d20:	b	33c5c <flatcc_json_printer_int64_field@@Base+0x94>
   33d24:	ldr	r3, [r0, #44]	; 0x2c
   33d28:	mov	r1, #0
   33d2c:	blx	r3
   33d30:	b	33c5c <flatcc_json_printer_int64_field@@Base+0x94>
   33d34:	mov	r2, r5
   33d38:	mov	r1, r8
   33d3c:	bl	1454c <memcpy@plt>
   33d40:	ldr	r3, [r4, #20]
   33d44:	add	r5, r3, r5
   33d48:	str	r5, [r4, #20]
   33d4c:	ldr	r3, [r4, #20]
   33d50:	mov	r2, #34	; 0x22
   33d54:	strb	r2, [r3]
   33d58:	ldrb	r3, [r4, #26]
   33d5c:	clz	r3, r3
   33d60:	lsr	r3, r3, #5
   33d64:	ldr	r1, [r4, #20]
   33d68:	add	r2, r1, r3
   33d6c:	add	r2, r2, #1
   33d70:	str	r2, [r4, #20]
   33d74:	mov	r2, #58	; 0x3a
   33d78:	strb	r2, [r1, r3]
   33d7c:	ldr	r3, [r4, #20]
   33d80:	mov	r2, #32
   33d84:	strb	r2, [r3]
   33d88:	ldrb	r3, [r4, #25]
   33d8c:	ldr	r2, [r4, #20]
   33d90:	cmp	r3, #0
   33d94:	addne	r2, r2, #1
   33d98:	str	r2, [r4, #20]
   33d9c:	mov	r0, r6
   33da0:	mov	r1, r7
   33da4:	bl	30d20 <flatcc_json_parser_struct_as_root@@Base+0xd68>
   33da8:	ldr	r3, [r4, #20]
   33dac:	add	r0, r3, r0
   33db0:	str	r0, [r4, #20]
   33db4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00033db8 <flatcc_json_printer_bool_field@@Base>:
   33db8:	push	{r4, r5, r6, r7, r8, lr}
   33dbc:	ldr	r6, [sp, #24]
   33dc0:	ldrb	lr, [sp, #28]
   33dc4:	add	r2, r2, #2
   33dc8:	lsl	r2, r2, #1
   33dcc:	ldr	ip, [r1, #8]
   33dd0:	cmp	r2, ip
   33dd4:	bge	33e9c <flatcc_json_printer_bool_field@@Base+0xe4>
   33dd8:	ldr	ip, [r1, #4]
   33ddc:	ldrh	r2, [ip, r2]
   33de0:	cmp	r2, #0
   33de4:	beq	33e9c <flatcc_json_printer_bool_field@@Base+0xe4>
   33de8:	ldr	ip, [r1]
   33dec:	cmn	ip, r2
   33df0:	beq	33e9c <flatcc_json_printer_bool_field@@Base+0xe4>
   33df4:	ldrb	r5, [ip, r2]
   33df8:	cmp	lr, r5
   33dfc:	beq	33e8c <flatcc_json_printer_bool_field@@Base+0xd4>
   33e00:	ldr	r2, [r1, #16]
   33e04:	add	ip, r2, #1
   33e08:	str	ip, [r1, #16]
   33e0c:	cmp	r2, #0
   33e10:	ldrne	r2, [r0, #20]
   33e14:	addne	r1, r2, #1
   33e18:	strne	r1, [r0, #20]
   33e1c:	movne	r1, #44	; 0x2c
   33e20:	strbne	r1, [r2]
   33e24:	mov	r7, r3
   33e28:	mov	r4, r0
   33e2c:	ldrb	r3, [r0, #25]
   33e30:	cmp	r3, #0
   33e34:	bne	33eb0 <flatcc_json_printer_bool_field@@Base+0xf8>
   33e38:	ldr	r2, [r0, #20]
   33e3c:	ldr	r3, [r0, #16]
   33e40:	cmp	r2, r3
   33e44:	bcs	33f10 <flatcc_json_printer_bool_field@@Base+0x158>
   33e48:	ldr	r3, [r4, #20]
   33e4c:	mov	r2, #34	; 0x22
   33e50:	strb	r2, [r3]
   33e54:	ldrb	r3, [r4, #26]
   33e58:	ldr	r0, [r4, #20]
   33e5c:	cmp	r3, #0
   33e60:	addeq	r0, r0, #1
   33e64:	str	r0, [r4, #20]
   33e68:	add	r3, r0, r6
   33e6c:	ldr	r2, [r4, #16]
   33e70:	cmp	r2, r3
   33e74:	bhi	33f20 <flatcc_json_printer_bool_field@@Base+0x168>
   33e78:	mov	r2, r6
   33e7c:	mov	r1, r7
   33e80:	mov	r0, r4
   33e84:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   33e88:	b	33f38 <flatcc_json_printer_bool_field@@Base+0x180>
   33e8c:	ldrb	r2, [r0, #28]
   33e90:	cmp	r2, #0
   33e94:	beq	33e00 <flatcc_json_printer_bool_field@@Base+0x48>
   33e98:	pop	{r4, r5, r6, r7, r8, pc}
   33e9c:	ldrb	r2, [r0, #29]
   33ea0:	cmp	r2, #0
   33ea4:	popeq	{r4, r5, r6, r7, r8, pc}
   33ea8:	mov	r5, lr
   33eac:	b	33e00 <flatcc_json_printer_bool_field@@Base+0x48>
   33eb0:	ldr	r3, [r0, #20]
   33eb4:	add	r2, r3, #1
   33eb8:	str	r2, [r0, #20]
   33ebc:	mov	r2, #10
   33ec0:	strb	r2, [r3]
   33ec4:	ldrb	r3, [r0, #25]
   33ec8:	ldr	r8, [r0, #32]
   33ecc:	mul	r8, r8, r3
   33ed0:	ldr	r0, [r0, #20]
   33ed4:	add	r3, r0, r8
   33ed8:	ldr	r2, [r4, #16]
   33edc:	cmp	r2, r3
   33ee0:	bcc	33f00 <flatcc_json_printer_bool_field@@Base+0x148>
   33ee4:	mov	r2, r8
   33ee8:	mov	r1, #32
   33eec:	bl	145c4 <memset@plt>
   33ef0:	ldr	r3, [r4, #20]
   33ef4:	add	r8, r3, r8
   33ef8:	str	r8, [r4, #20]
   33efc:	b	33e48 <flatcc_json_printer_bool_field@@Base+0x90>
   33f00:	mov	r1, r8
   33f04:	mov	r0, r4
   33f08:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   33f0c:	b	33e48 <flatcc_json_printer_bool_field@@Base+0x90>
   33f10:	ldr	r3, [r0, #44]	; 0x2c
   33f14:	mov	r1, #0
   33f18:	blx	r3
   33f1c:	b	33e48 <flatcc_json_printer_bool_field@@Base+0x90>
   33f20:	mov	r2, r6
   33f24:	mov	r1, r7
   33f28:	bl	1454c <memcpy@plt>
   33f2c:	ldr	r3, [r4, #20]
   33f30:	add	r6, r3, r6
   33f34:	str	r6, [r4, #20]
   33f38:	ldr	r3, [r4, #20]
   33f3c:	mov	r2, #34	; 0x22
   33f40:	strb	r2, [r3]
   33f44:	ldrb	r3, [r4, #26]
   33f48:	clz	r3, r3
   33f4c:	lsr	r3, r3, #5
   33f50:	ldr	r1, [r4, #20]
   33f54:	add	r2, r1, r3
   33f58:	add	r2, r2, #1
   33f5c:	str	r2, [r4, #20]
   33f60:	mov	r2, #58	; 0x3a
   33f64:	strb	r2, [r1, r3]
   33f68:	ldr	r3, [r4, #20]
   33f6c:	mov	r2, #32
   33f70:	strb	r2, [r3]
   33f74:	ldrb	r3, [r4, #25]
   33f78:	ldr	r1, [r4, #20]
   33f7c:	cmp	r3, #0
   33f80:	addne	r1, r1, #1
   33f84:	str	r1, [r4, #20]
   33f88:	mov	r0, r5
   33f8c:	bl	313dc <flatcc_json_parser_struct_as_root@@Base+0x1424>
   33f90:	ldr	r3, [r4, #20]
   33f94:	add	r0, r3, r0
   33f98:	str	r0, [r4, #20]
   33f9c:	pop	{r4, r5, r6, r7, r8, pc}

00033fa0 <flatcc_json_printer_float_field@@Base>:
   33fa0:	push	{r4, r5, r6, r7, r8, lr}
   33fa4:	vpush	{d8}
   33fa8:	ldr	r5, [sp, #32]
   33fac:	add	r2, r2, #2
   33fb0:	lsl	r2, r2, #1
   33fb4:	ldr	ip, [r1, #8]
   33fb8:	cmp	r2, ip
   33fbc:	bge	34084 <flatcc_json_printer_float_field@@Base+0xe4>
   33fc0:	ldr	ip, [r1, #4]
   33fc4:	ldrh	ip, [ip, r2]
   33fc8:	cmp	ip, #0
   33fcc:	beq	34084 <flatcc_json_printer_float_field@@Base+0xe4>
   33fd0:	ldr	r2, [r1]
   33fd4:	adds	r2, r2, ip
   33fd8:	beq	34084 <flatcc_json_printer_float_field@@Base+0xe4>
   33fdc:	vldr	s16, [r2]
   33fe0:	vcmp.f32	s0, s16
   33fe4:	vmrs	APSR_nzcv, fpscr
   33fe8:	bne	33ff8 <flatcc_json_printer_float_field@@Base+0x58>
   33fec:	ldrb	r2, [r0, #28]
   33ff0:	cmp	r2, #0
   33ff4:	bne	34184 <flatcc_json_printer_float_field@@Base+0x1e4>
   33ff8:	ldr	r2, [r1, #16]
   33ffc:	add	ip, r2, #1
   34000:	str	ip, [r1, #16]
   34004:	cmp	r2, #0
   34008:	ldrne	r2, [r0, #20]
   3400c:	addne	r1, r2, #1
   34010:	strne	r1, [r0, #20]
   34014:	movne	r1, #44	; 0x2c
   34018:	strbne	r1, [r2]
   3401c:	mov	r6, r3
   34020:	mov	r4, r0
   34024:	ldrb	r3, [r0, #25]
   34028:	cmp	r3, #0
   3402c:	bne	34098 <flatcc_json_printer_float_field@@Base+0xf8>
   34030:	ldr	r2, [r0, #20]
   34034:	ldr	r3, [r0, #16]
   34038:	cmp	r2, r3
   3403c:	bcs	340f8 <flatcc_json_printer_float_field@@Base+0x158>
   34040:	ldr	r3, [r4, #20]
   34044:	mov	r2, #34	; 0x22
   34048:	strb	r2, [r3]
   3404c:	ldrb	r3, [r4, #26]
   34050:	ldr	r0, [r4, #20]
   34054:	cmp	r3, #0
   34058:	addeq	r0, r0, #1
   3405c:	str	r0, [r4, #20]
   34060:	add	r3, r0, r5
   34064:	ldr	r2, [r4, #16]
   34068:	cmp	r2, r3
   3406c:	bhi	34108 <flatcc_json_printer_float_field@@Base+0x168>
   34070:	mov	r2, r5
   34074:	mov	r1, r6
   34078:	mov	r0, r4
   3407c:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   34080:	b	34120 <flatcc_json_printer_float_field@@Base+0x180>
   34084:	ldrb	r2, [r0, #29]
   34088:	cmp	r2, #0
   3408c:	beq	34184 <flatcc_json_printer_float_field@@Base+0x1e4>
   34090:	vmov.f32	s16, s0
   34094:	b	33ff8 <flatcc_json_printer_float_field@@Base+0x58>
   34098:	ldr	r3, [r0, #20]
   3409c:	add	r2, r3, #1
   340a0:	str	r2, [r0, #20]
   340a4:	mov	r2, #10
   340a8:	strb	r2, [r3]
   340ac:	ldrb	r3, [r0, #25]
   340b0:	ldr	r7, [r0, #32]
   340b4:	mul	r7, r7, r3
   340b8:	ldr	r0, [r0, #20]
   340bc:	add	r3, r0, r7
   340c0:	ldr	r2, [r4, #16]
   340c4:	cmp	r2, r3
   340c8:	bcc	340e8 <flatcc_json_printer_float_field@@Base+0x148>
   340cc:	mov	r2, r7
   340d0:	mov	r1, #32
   340d4:	bl	145c4 <memset@plt>
   340d8:	ldr	r3, [r4, #20]
   340dc:	add	r7, r3, r7
   340e0:	str	r7, [r4, #20]
   340e4:	b	34040 <flatcc_json_printer_float_field@@Base+0xa0>
   340e8:	mov	r1, r7
   340ec:	mov	r0, r4
   340f0:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   340f4:	b	34040 <flatcc_json_printer_float_field@@Base+0xa0>
   340f8:	ldr	r3, [r0, #44]	; 0x2c
   340fc:	mov	r1, #0
   34100:	blx	r3
   34104:	b	34040 <flatcc_json_printer_float_field@@Base+0xa0>
   34108:	mov	r2, r5
   3410c:	mov	r1, r6
   34110:	bl	1454c <memcpy@plt>
   34114:	ldr	r3, [r4, #20]
   34118:	add	r5, r3, r5
   3411c:	str	r5, [r4, #20]
   34120:	ldr	r3, [r4, #20]
   34124:	mov	r2, #34	; 0x22
   34128:	strb	r2, [r3]
   3412c:	ldrb	r3, [r4, #26]
   34130:	clz	r3, r3
   34134:	lsr	r3, r3, #5
   34138:	ldr	r1, [r4, #20]
   3413c:	add	r2, r1, r3
   34140:	add	r2, r2, #1
   34144:	str	r2, [r4, #20]
   34148:	mov	r2, #58	; 0x3a
   3414c:	strb	r2, [r1, r3]
   34150:	ldr	r3, [r4, #20]
   34154:	mov	r2, #32
   34158:	strb	r2, [r3]
   3415c:	ldrb	r3, [r4, #25]
   34160:	ldr	r0, [r4, #20]
   34164:	cmp	r3, #0
   34168:	addne	r0, r0, #1
   3416c:	str	r0, [r4, #20]
   34170:	vcvt.f64.f32	d0, s16
   34174:	bl	31ac4 <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   34178:	ldr	r3, [r4, #20]
   3417c:	add	r0, r3, r0
   34180:	str	r0, [r4, #20]
   34184:	vpop	{d8}
   34188:	pop	{r4, r5, r6, r7, r8, pc}

0003418c <flatcc_json_printer_double_field@@Base>:
   3418c:	push	{r4, r5, r6, r7, r8, lr}
   34190:	vpush	{d8}
   34194:	ldr	r5, [sp, #32]
   34198:	add	r2, r2, #2
   3419c:	lsl	r2, r2, #1
   341a0:	ldr	ip, [r1, #8]
   341a4:	cmp	r2, ip
   341a8:	bge	34270 <flatcc_json_printer_double_field@@Base+0xe4>
   341ac:	ldr	ip, [r1, #4]
   341b0:	ldrh	ip, [ip, r2]
   341b4:	cmp	ip, #0
   341b8:	beq	34270 <flatcc_json_printer_double_field@@Base+0xe4>
   341bc:	ldr	r2, [r1]
   341c0:	adds	r2, r2, ip
   341c4:	beq	34270 <flatcc_json_printer_double_field@@Base+0xe4>
   341c8:	vldr	d8, [r2]
   341cc:	vcmp.f64	d0, d8
   341d0:	vmrs	APSR_nzcv, fpscr
   341d4:	bne	341e4 <flatcc_json_printer_double_field@@Base+0x58>
   341d8:	ldrb	r2, [r0, #28]
   341dc:	cmp	r2, #0
   341e0:	bne	34370 <flatcc_json_printer_double_field@@Base+0x1e4>
   341e4:	ldr	r2, [r1, #16]
   341e8:	add	ip, r2, #1
   341ec:	str	ip, [r1, #16]
   341f0:	cmp	r2, #0
   341f4:	ldrne	r2, [r0, #20]
   341f8:	addne	r1, r2, #1
   341fc:	strne	r1, [r0, #20]
   34200:	movne	r1, #44	; 0x2c
   34204:	strbne	r1, [r2]
   34208:	mov	r6, r3
   3420c:	mov	r4, r0
   34210:	ldrb	r3, [r0, #25]
   34214:	cmp	r3, #0
   34218:	bne	34284 <flatcc_json_printer_double_field@@Base+0xf8>
   3421c:	ldr	r2, [r0, #20]
   34220:	ldr	r3, [r0, #16]
   34224:	cmp	r2, r3
   34228:	bcs	342e4 <flatcc_json_printer_double_field@@Base+0x158>
   3422c:	ldr	r3, [r4, #20]
   34230:	mov	r2, #34	; 0x22
   34234:	strb	r2, [r3]
   34238:	ldrb	r3, [r4, #26]
   3423c:	ldr	r0, [r4, #20]
   34240:	cmp	r3, #0
   34244:	addeq	r0, r0, #1
   34248:	str	r0, [r4, #20]
   3424c:	add	r3, r0, r5
   34250:	ldr	r2, [r4, #16]
   34254:	cmp	r2, r3
   34258:	bhi	342f4 <flatcc_json_printer_double_field@@Base+0x168>
   3425c:	mov	r2, r5
   34260:	mov	r1, r6
   34264:	mov	r0, r4
   34268:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3426c:	b	3430c <flatcc_json_printer_double_field@@Base+0x180>
   34270:	ldrb	r2, [r0, #29]
   34274:	cmp	r2, #0
   34278:	beq	34370 <flatcc_json_printer_double_field@@Base+0x1e4>
   3427c:	vmov.f64	d8, d0
   34280:	b	341e4 <flatcc_json_printer_double_field@@Base+0x58>
   34284:	ldr	r3, [r0, #20]
   34288:	add	r2, r3, #1
   3428c:	str	r2, [r0, #20]
   34290:	mov	r2, #10
   34294:	strb	r2, [r3]
   34298:	ldrb	r3, [r0, #25]
   3429c:	ldr	r7, [r0, #32]
   342a0:	mul	r7, r7, r3
   342a4:	ldr	r0, [r0, #20]
   342a8:	add	r3, r0, r7
   342ac:	ldr	r2, [r4, #16]
   342b0:	cmp	r2, r3
   342b4:	bcc	342d4 <flatcc_json_printer_double_field@@Base+0x148>
   342b8:	mov	r2, r7
   342bc:	mov	r1, #32
   342c0:	bl	145c4 <memset@plt>
   342c4:	ldr	r3, [r4, #20]
   342c8:	add	r7, r3, r7
   342cc:	str	r7, [r4, #20]
   342d0:	b	3422c <flatcc_json_printer_double_field@@Base+0xa0>
   342d4:	mov	r1, r7
   342d8:	mov	r0, r4
   342dc:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   342e0:	b	3422c <flatcc_json_printer_double_field@@Base+0xa0>
   342e4:	ldr	r3, [r0, #44]	; 0x2c
   342e8:	mov	r1, #0
   342ec:	blx	r3
   342f0:	b	3422c <flatcc_json_printer_double_field@@Base+0xa0>
   342f4:	mov	r2, r5
   342f8:	mov	r1, r6
   342fc:	bl	1454c <memcpy@plt>
   34300:	ldr	r3, [r4, #20]
   34304:	add	r5, r3, r5
   34308:	str	r5, [r4, #20]
   3430c:	ldr	r3, [r4, #20]
   34310:	mov	r2, #34	; 0x22
   34314:	strb	r2, [r3]
   34318:	ldrb	r3, [r4, #26]
   3431c:	clz	r3, r3
   34320:	lsr	r3, r3, #5
   34324:	ldr	r1, [r4, #20]
   34328:	add	r2, r1, r3
   3432c:	add	r2, r2, #1
   34330:	str	r2, [r4, #20]
   34334:	mov	r2, #58	; 0x3a
   34338:	strb	r2, [r1, r3]
   3433c:	ldr	r3, [r4, #20]
   34340:	mov	r2, #32
   34344:	strb	r2, [r3]
   34348:	ldrb	r3, [r4, #25]
   3434c:	ldr	r0, [r4, #20]
   34350:	cmp	r3, #0
   34354:	addne	r0, r0, #1
   34358:	str	r0, [r4, #20]
   3435c:	vmov.f64	d0, d8
   34360:	bl	31ac4 <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   34364:	ldr	r3, [r4, #20]
   34368:	add	r0, r3, r0
   3436c:	str	r0, [r4, #20]
   34370:	vpop	{d8}
   34374:	pop	{r4, r5, r6, r7, r8, pc}

00034378 <flatcc_json_printer_uint8_enum_field@@Base>:
   34378:	push	{r4, r5, r6, r7, r8, lr}
   3437c:	ldr	r6, [sp, #24]
   34380:	ldrb	lr, [sp, #28]
   34384:	add	r2, r2, #2
   34388:	lsl	r2, r2, #1
   3438c:	ldr	ip, [r1, #8]
   34390:	cmp	r2, ip
   34394:	bge	3445c <flatcc_json_printer_uint8_enum_field@@Base+0xe4>
   34398:	ldr	ip, [r1, #4]
   3439c:	ldrh	r2, [ip, r2]
   343a0:	cmp	r2, #0
   343a4:	beq	3445c <flatcc_json_printer_uint8_enum_field@@Base+0xe4>
   343a8:	ldr	ip, [r1]
   343ac:	cmn	ip, r2
   343b0:	beq	3445c <flatcc_json_printer_uint8_enum_field@@Base+0xe4>
   343b4:	ldrb	r5, [ip, r2]
   343b8:	cmp	lr, r5
   343bc:	beq	3444c <flatcc_json_printer_uint8_enum_field@@Base+0xd4>
   343c0:	ldr	r2, [r1, #16]
   343c4:	add	ip, r2, #1
   343c8:	str	ip, [r1, #16]
   343cc:	cmp	r2, #0
   343d0:	ldrne	r2, [r0, #20]
   343d4:	addne	r1, r2, #1
   343d8:	strne	r1, [r0, #20]
   343dc:	movne	r1, #44	; 0x2c
   343e0:	strbne	r1, [r2]
   343e4:	mov	r7, r3
   343e8:	mov	r4, r0
   343ec:	ldrb	r3, [r0, #25]
   343f0:	cmp	r3, #0
   343f4:	bne	34470 <flatcc_json_printer_uint8_enum_field@@Base+0xf8>
   343f8:	ldr	r2, [r0, #20]
   343fc:	ldr	r3, [r0, #16]
   34400:	cmp	r2, r3
   34404:	bcs	344d0 <flatcc_json_printer_uint8_enum_field@@Base+0x158>
   34408:	ldr	r3, [r4, #20]
   3440c:	mov	r2, #34	; 0x22
   34410:	strb	r2, [r3]
   34414:	ldrb	r3, [r4, #26]
   34418:	ldr	r0, [r4, #20]
   3441c:	cmp	r3, #0
   34420:	addeq	r0, r0, #1
   34424:	str	r0, [r4, #20]
   34428:	add	r3, r0, r6
   3442c:	ldr	r2, [r4, #16]
   34430:	cmp	r2, r3
   34434:	bhi	344e0 <flatcc_json_printer_uint8_enum_field@@Base+0x168>
   34438:	mov	r2, r6
   3443c:	mov	r1, r7
   34440:	mov	r0, r4
   34444:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   34448:	b	344f8 <flatcc_json_printer_uint8_enum_field@@Base+0x180>
   3444c:	ldrb	r2, [r0, #28]
   34450:	cmp	r2, #0
   34454:	beq	343c0 <flatcc_json_printer_uint8_enum_field@@Base+0x48>
   34458:	pop	{r4, r5, r6, r7, r8, pc}
   3445c:	ldrb	r2, [r0, #29]
   34460:	cmp	r2, #0
   34464:	popeq	{r4, r5, r6, r7, r8, pc}
   34468:	mov	r5, lr
   3446c:	b	343c0 <flatcc_json_printer_uint8_enum_field@@Base+0x48>
   34470:	ldr	r3, [r0, #20]
   34474:	add	r2, r3, #1
   34478:	str	r2, [r0, #20]
   3447c:	mov	r2, #10
   34480:	strb	r2, [r3]
   34484:	ldrb	r3, [r0, #25]
   34488:	ldr	r8, [r0, #32]
   3448c:	mul	r8, r8, r3
   34490:	ldr	r0, [r0, #20]
   34494:	add	r3, r0, r8
   34498:	ldr	r2, [r4, #16]
   3449c:	cmp	r2, r3
   344a0:	bcc	344c0 <flatcc_json_printer_uint8_enum_field@@Base+0x148>
   344a4:	mov	r2, r8
   344a8:	mov	r1, #32
   344ac:	bl	145c4 <memset@plt>
   344b0:	ldr	r3, [r4, #20]
   344b4:	add	r8, r3, r8
   344b8:	str	r8, [r4, #20]
   344bc:	b	34408 <flatcc_json_printer_uint8_enum_field@@Base+0x90>
   344c0:	mov	r1, r8
   344c4:	mov	r0, r4
   344c8:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   344cc:	b	34408 <flatcc_json_printer_uint8_enum_field@@Base+0x90>
   344d0:	ldr	r3, [r0, #44]	; 0x2c
   344d4:	mov	r1, #0
   344d8:	blx	r3
   344dc:	b	34408 <flatcc_json_printer_uint8_enum_field@@Base+0x90>
   344e0:	mov	r2, r6
   344e4:	mov	r1, r7
   344e8:	bl	1454c <memcpy@plt>
   344ec:	ldr	r3, [r4, #20]
   344f0:	add	r6, r3, r6
   344f4:	str	r6, [r4, #20]
   344f8:	ldr	r3, [r4, #20]
   344fc:	mov	r2, #34	; 0x22
   34500:	strb	r2, [r3]
   34504:	ldrb	r3, [r4, #26]
   34508:	clz	r3, r3
   3450c:	lsr	r3, r3, #5
   34510:	ldr	r1, [r4, #20]
   34514:	add	r2, r1, r3
   34518:	add	r2, r2, #1
   3451c:	str	r2, [r4, #20]
   34520:	mov	r2, #58	; 0x3a
   34524:	strb	r2, [r1, r3]
   34528:	ldr	r3, [r4, #20]
   3452c:	mov	r2, #32
   34530:	strb	r2, [r3]
   34534:	ldrb	r3, [r4, #25]
   34538:	ldr	r1, [r4, #20]
   3453c:	cmp	r3, #0
   34540:	addne	r1, r1, #1
   34544:	str	r1, [r4, #20]
   34548:	ldrb	r3, [r4, #27]
   3454c:	cmp	r3, #0
   34550:	bne	34568 <flatcc_json_printer_uint8_enum_field@@Base+0x1f0>
   34554:	mov	r1, r5
   34558:	mov	r0, r4
   3455c:	ldr	r3, [sp, #32]
   34560:	blx	r3
   34564:	pop	{r4, r5, r6, r7, r8, pc}
   34568:	mov	r0, r5
   3456c:	bl	30090 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   34570:	ldr	r3, [r4, #20]
   34574:	add	r0, r3, r0
   34578:	str	r0, [r4, #20]
   3457c:	pop	{r4, r5, r6, r7, r8, pc}

00034580 <flatcc_json_printer_uint16_enum_field@@Base>:
   34580:	push	{r4, r5, r6, r7, r8, lr}
   34584:	ldr	r6, [sp, #24]
   34588:	ldrh	lr, [sp, #28]
   3458c:	add	r2, r2, #2
   34590:	lsl	r2, r2, #1
   34594:	ldr	ip, [r1, #8]
   34598:	cmp	r2, ip
   3459c:	bge	34664 <flatcc_json_printer_uint16_enum_field@@Base+0xe4>
   345a0:	ldr	ip, [r1, #4]
   345a4:	ldrh	r2, [ip, r2]
   345a8:	cmp	r2, #0
   345ac:	beq	34664 <flatcc_json_printer_uint16_enum_field@@Base+0xe4>
   345b0:	ldr	ip, [r1]
   345b4:	cmn	ip, r2
   345b8:	beq	34664 <flatcc_json_printer_uint16_enum_field@@Base+0xe4>
   345bc:	ldrh	r5, [ip, r2]
   345c0:	cmp	lr, r5
   345c4:	beq	34654 <flatcc_json_printer_uint16_enum_field@@Base+0xd4>
   345c8:	ldr	r2, [r1, #16]
   345cc:	add	ip, r2, #1
   345d0:	str	ip, [r1, #16]
   345d4:	cmp	r2, #0
   345d8:	ldrne	r2, [r0, #20]
   345dc:	addne	r1, r2, #1
   345e0:	strne	r1, [r0, #20]
   345e4:	movne	r1, #44	; 0x2c
   345e8:	strbne	r1, [r2]
   345ec:	mov	r7, r3
   345f0:	mov	r4, r0
   345f4:	ldrb	r3, [r0, #25]
   345f8:	cmp	r3, #0
   345fc:	bne	34678 <flatcc_json_printer_uint16_enum_field@@Base+0xf8>
   34600:	ldr	r2, [r0, #20]
   34604:	ldr	r3, [r0, #16]
   34608:	cmp	r2, r3
   3460c:	bcs	346d8 <flatcc_json_printer_uint16_enum_field@@Base+0x158>
   34610:	ldr	r3, [r4, #20]
   34614:	mov	r2, #34	; 0x22
   34618:	strb	r2, [r3]
   3461c:	ldrb	r3, [r4, #26]
   34620:	ldr	r0, [r4, #20]
   34624:	cmp	r3, #0
   34628:	addeq	r0, r0, #1
   3462c:	str	r0, [r4, #20]
   34630:	add	r3, r0, r6
   34634:	ldr	r2, [r4, #16]
   34638:	cmp	r2, r3
   3463c:	bhi	346e8 <flatcc_json_printer_uint16_enum_field@@Base+0x168>
   34640:	mov	r2, r6
   34644:	mov	r1, r7
   34648:	mov	r0, r4
   3464c:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   34650:	b	34700 <flatcc_json_printer_uint16_enum_field@@Base+0x180>
   34654:	ldrb	r2, [r0, #28]
   34658:	cmp	r2, #0
   3465c:	beq	345c8 <flatcc_json_printer_uint16_enum_field@@Base+0x48>
   34660:	pop	{r4, r5, r6, r7, r8, pc}
   34664:	ldrb	r2, [r0, #29]
   34668:	cmp	r2, #0
   3466c:	popeq	{r4, r5, r6, r7, r8, pc}
   34670:	mov	r5, lr
   34674:	b	345c8 <flatcc_json_printer_uint16_enum_field@@Base+0x48>
   34678:	ldr	r3, [r0, #20]
   3467c:	add	r2, r3, #1
   34680:	str	r2, [r0, #20]
   34684:	mov	r2, #10
   34688:	strb	r2, [r3]
   3468c:	ldrb	r3, [r0, #25]
   34690:	ldr	r8, [r0, #32]
   34694:	mul	r8, r8, r3
   34698:	ldr	r0, [r0, #20]
   3469c:	add	r3, r0, r8
   346a0:	ldr	r2, [r4, #16]
   346a4:	cmp	r2, r3
   346a8:	bcc	346c8 <flatcc_json_printer_uint16_enum_field@@Base+0x148>
   346ac:	mov	r2, r8
   346b0:	mov	r1, #32
   346b4:	bl	145c4 <memset@plt>
   346b8:	ldr	r3, [r4, #20]
   346bc:	add	r8, r3, r8
   346c0:	str	r8, [r4, #20]
   346c4:	b	34610 <flatcc_json_printer_uint16_enum_field@@Base+0x90>
   346c8:	mov	r1, r8
   346cc:	mov	r0, r4
   346d0:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   346d4:	b	34610 <flatcc_json_printer_uint16_enum_field@@Base+0x90>
   346d8:	ldr	r3, [r0, #44]	; 0x2c
   346dc:	mov	r1, #0
   346e0:	blx	r3
   346e4:	b	34610 <flatcc_json_printer_uint16_enum_field@@Base+0x90>
   346e8:	mov	r2, r6
   346ec:	mov	r1, r7
   346f0:	bl	1454c <memcpy@plt>
   346f4:	ldr	r3, [r4, #20]
   346f8:	add	r6, r3, r6
   346fc:	str	r6, [r4, #20]
   34700:	ldr	r3, [r4, #20]
   34704:	mov	r2, #34	; 0x22
   34708:	strb	r2, [r3]
   3470c:	ldrb	r3, [r4, #26]
   34710:	clz	r3, r3
   34714:	lsr	r3, r3, #5
   34718:	ldr	r1, [r4, #20]
   3471c:	add	r2, r1, r3
   34720:	add	r2, r2, #1
   34724:	str	r2, [r4, #20]
   34728:	mov	r2, #58	; 0x3a
   3472c:	strb	r2, [r1, r3]
   34730:	ldr	r3, [r4, #20]
   34734:	mov	r2, #32
   34738:	strb	r2, [r3]
   3473c:	ldrb	r3, [r4, #25]
   34740:	ldr	r1, [r4, #20]
   34744:	cmp	r3, #0
   34748:	addne	r1, r1, #1
   3474c:	str	r1, [r4, #20]
   34750:	ldrb	r3, [r4, #27]
   34754:	cmp	r3, #0
   34758:	bne	34770 <flatcc_json_printer_uint16_enum_field@@Base+0x1f0>
   3475c:	mov	r1, r5
   34760:	mov	r0, r4
   34764:	ldr	r3, [sp, #32]
   34768:	blx	r3
   3476c:	pop	{r4, r5, r6, r7, r8, pc}
   34770:	mov	r0, r5
   34774:	bl	30150 <flatcc_json_parser_struct_as_root@@Base+0x198>
   34778:	ldr	r3, [r4, #20]
   3477c:	add	r0, r3, r0
   34780:	str	r0, [r4, #20]
   34784:	pop	{r4, r5, r6, r7, r8, pc}

00034788 <flatcc_json_printer_uint32_enum_field@@Base>:
   34788:	push	{r4, r5, r6, r7, r8, lr}
   3478c:	ldr	r6, [sp, #24]
   34790:	add	r2, r2, #2
   34794:	lsl	r2, r2, #1
   34798:	ldr	ip, [r1, #8]
   3479c:	cmp	r2, ip
   347a0:	bge	3486c <flatcc_json_printer_uint32_enum_field@@Base+0xe4>
   347a4:	ldr	ip, [r1, #4]
   347a8:	ldrh	r2, [ip, r2]
   347ac:	cmp	r2, #0
   347b0:	beq	3486c <flatcc_json_printer_uint32_enum_field@@Base+0xe4>
   347b4:	ldr	ip, [r1]
   347b8:	cmn	ip, r2
   347bc:	beq	3486c <flatcc_json_printer_uint32_enum_field@@Base+0xe4>
   347c0:	ldr	r5, [ip, r2]
   347c4:	ldr	r2, [sp, #28]
   347c8:	cmp	r2, r5
   347cc:	beq	3485c <flatcc_json_printer_uint32_enum_field@@Base+0xd4>
   347d0:	ldr	r2, [r1, #16]
   347d4:	add	ip, r2, #1
   347d8:	str	ip, [r1, #16]
   347dc:	cmp	r2, #0
   347e0:	ldrne	r2, [r0, #20]
   347e4:	addne	r1, r2, #1
   347e8:	strne	r1, [r0, #20]
   347ec:	movne	r1, #44	; 0x2c
   347f0:	strbne	r1, [r2]
   347f4:	mov	r7, r3
   347f8:	mov	r4, r0
   347fc:	ldrb	r3, [r0, #25]
   34800:	cmp	r3, #0
   34804:	bne	34880 <flatcc_json_printer_uint32_enum_field@@Base+0xf8>
   34808:	ldr	r2, [r0, #20]
   3480c:	ldr	r3, [r0, #16]
   34810:	cmp	r2, r3
   34814:	bcs	348e0 <flatcc_json_printer_uint32_enum_field@@Base+0x158>
   34818:	ldr	r3, [r4, #20]
   3481c:	mov	r2, #34	; 0x22
   34820:	strb	r2, [r3]
   34824:	ldrb	r3, [r4, #26]
   34828:	ldr	r0, [r4, #20]
   3482c:	cmp	r3, #0
   34830:	addeq	r0, r0, #1
   34834:	str	r0, [r4, #20]
   34838:	add	r3, r0, r6
   3483c:	ldr	r2, [r4, #16]
   34840:	cmp	r2, r3
   34844:	bhi	348f0 <flatcc_json_printer_uint32_enum_field@@Base+0x168>
   34848:	mov	r2, r6
   3484c:	mov	r1, r7
   34850:	mov	r0, r4
   34854:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   34858:	b	34908 <flatcc_json_printer_uint32_enum_field@@Base+0x180>
   3485c:	ldrb	r2, [r0, #28]
   34860:	cmp	r2, #0
   34864:	beq	347d0 <flatcc_json_printer_uint32_enum_field@@Base+0x48>
   34868:	pop	{r4, r5, r6, r7, r8, pc}
   3486c:	ldrb	r2, [r0, #29]
   34870:	cmp	r2, #0
   34874:	popeq	{r4, r5, r6, r7, r8, pc}
   34878:	ldr	r5, [sp, #28]
   3487c:	b	347d0 <flatcc_json_printer_uint32_enum_field@@Base+0x48>
   34880:	ldr	r3, [r0, #20]
   34884:	add	r2, r3, #1
   34888:	str	r2, [r0, #20]
   3488c:	mov	r2, #10
   34890:	strb	r2, [r3]
   34894:	ldrb	r3, [r0, #25]
   34898:	ldr	r8, [r0, #32]
   3489c:	mul	r8, r8, r3
   348a0:	ldr	r0, [r0, #20]
   348a4:	add	r3, r0, r8
   348a8:	ldr	r2, [r4, #16]
   348ac:	cmp	r2, r3
   348b0:	bcc	348d0 <flatcc_json_printer_uint32_enum_field@@Base+0x148>
   348b4:	mov	r2, r8
   348b8:	mov	r1, #32
   348bc:	bl	145c4 <memset@plt>
   348c0:	ldr	r3, [r4, #20]
   348c4:	add	r8, r3, r8
   348c8:	str	r8, [r4, #20]
   348cc:	b	34818 <flatcc_json_printer_uint32_enum_field@@Base+0x90>
   348d0:	mov	r1, r8
   348d4:	mov	r0, r4
   348d8:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   348dc:	b	34818 <flatcc_json_printer_uint32_enum_field@@Base+0x90>
   348e0:	ldr	r3, [r0, #44]	; 0x2c
   348e4:	mov	r1, #0
   348e8:	blx	r3
   348ec:	b	34818 <flatcc_json_printer_uint32_enum_field@@Base+0x90>
   348f0:	mov	r2, r6
   348f4:	mov	r1, r7
   348f8:	bl	1454c <memcpy@plt>
   348fc:	ldr	r3, [r4, #20]
   34900:	add	r6, r3, r6
   34904:	str	r6, [r4, #20]
   34908:	ldr	r3, [r4, #20]
   3490c:	mov	r2, #34	; 0x22
   34910:	strb	r2, [r3]
   34914:	ldrb	r3, [r4, #26]
   34918:	clz	r3, r3
   3491c:	lsr	r3, r3, #5
   34920:	ldr	r1, [r4, #20]
   34924:	add	r2, r1, r3
   34928:	add	r2, r2, #1
   3492c:	str	r2, [r4, #20]
   34930:	mov	r2, #58	; 0x3a
   34934:	strb	r2, [r1, r3]
   34938:	ldr	r3, [r4, #20]
   3493c:	mov	r2, #32
   34940:	strb	r2, [r3]
   34944:	ldrb	r3, [r4, #25]
   34948:	ldr	r1, [r4, #20]
   3494c:	cmp	r3, #0
   34950:	addne	r1, r1, #1
   34954:	str	r1, [r4, #20]
   34958:	ldrb	r3, [r4, #27]
   3495c:	cmp	r3, #0
   34960:	bne	34978 <flatcc_json_printer_uint32_enum_field@@Base+0x1f0>
   34964:	mov	r1, r5
   34968:	mov	r0, r4
   3496c:	ldr	r3, [sp, #32]
   34970:	blx	r3
   34974:	pop	{r4, r5, r6, r7, r8, pc}
   34978:	mov	r0, r5
   3497c:	bl	302d4 <flatcc_json_parser_struct_as_root@@Base+0x31c>
   34980:	ldr	r3, [r4, #20]
   34984:	add	r0, r3, r0
   34988:	str	r0, [r4, #20]
   3498c:	pop	{r4, r5, r6, r7, r8, pc}

00034990 <flatcc_json_printer_uint64_enum_field@@Base>:
   34990:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   34994:	ldr	r5, [sp, #32]
   34998:	add	r2, r2, #2
   3499c:	lsl	r2, r2, #1
   349a0:	ldr	ip, [r1, #8]
   349a4:	cmp	r2, ip
   349a8:	bge	34a78 <flatcc_json_printer_uint64_enum_field@@Base+0xe8>
   349ac:	ldr	ip, [r1, #4]
   349b0:	ldrh	r2, [ip, r2]
   349b4:	cmp	r2, #0
   349b8:	beq	34a78 <flatcc_json_printer_uint64_enum_field@@Base+0xe8>
   349bc:	ldr	ip, [r1]
   349c0:	cmn	ip, r2
   349c4:	beq	34a78 <flatcc_json_printer_uint64_enum_field@@Base+0xe8>
   349c8:	ldrd	r6, [ip, r2]
   349cc:	ldrd	r8, [sp, #40]	; 0x28
   349d0:	cmp	r9, r7
   349d4:	cmpeq	r8, r6
   349d8:	beq	34a68 <flatcc_json_printer_uint64_enum_field@@Base+0xd8>
   349dc:	ldr	r2, [r1, #16]
   349e0:	add	ip, r2, #1
   349e4:	str	ip, [r1, #16]
   349e8:	cmp	r2, #0
   349ec:	ldrne	r2, [r0, #20]
   349f0:	addne	r1, r2, #1
   349f4:	strne	r1, [r0, #20]
   349f8:	movne	r1, #44	; 0x2c
   349fc:	strbne	r1, [r2]
   34a00:	mov	r8, r3
   34a04:	mov	r4, r0
   34a08:	ldrb	r3, [r0, #25]
   34a0c:	cmp	r3, #0
   34a10:	bne	34a8c <flatcc_json_printer_uint64_enum_field@@Base+0xfc>
   34a14:	ldr	r2, [r0, #20]
   34a18:	ldr	r3, [r0, #16]
   34a1c:	cmp	r2, r3
   34a20:	bcs	34aec <flatcc_json_printer_uint64_enum_field@@Base+0x15c>
   34a24:	ldr	r3, [r4, #20]
   34a28:	mov	r2, #34	; 0x22
   34a2c:	strb	r2, [r3]
   34a30:	ldrb	r3, [r4, #26]
   34a34:	ldr	r0, [r4, #20]
   34a38:	cmp	r3, #0
   34a3c:	addeq	r0, r0, #1
   34a40:	str	r0, [r4, #20]
   34a44:	add	r3, r0, r5
   34a48:	ldr	r2, [r4, #16]
   34a4c:	cmp	r2, r3
   34a50:	bhi	34afc <flatcc_json_printer_uint64_enum_field@@Base+0x16c>
   34a54:	mov	r2, r5
   34a58:	mov	r1, r8
   34a5c:	mov	r0, r4
   34a60:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   34a64:	b	34b14 <flatcc_json_printer_uint64_enum_field@@Base+0x184>
   34a68:	ldrb	r2, [r0, #28]
   34a6c:	cmp	r2, #0
   34a70:	beq	349dc <flatcc_json_printer_uint64_enum_field@@Base+0x4c>
   34a74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34a78:	ldrb	r2, [r0, #29]
   34a7c:	cmp	r2, #0
   34a80:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   34a84:	ldrd	r6, [sp, #40]	; 0x28
   34a88:	b	349dc <flatcc_json_printer_uint64_enum_field@@Base+0x4c>
   34a8c:	ldr	r3, [r0, #20]
   34a90:	add	r2, r3, #1
   34a94:	str	r2, [r0, #20]
   34a98:	mov	r2, #10
   34a9c:	strb	r2, [r3]
   34aa0:	ldrb	r3, [r0, #25]
   34aa4:	ldr	r9, [r0, #32]
   34aa8:	mul	r9, r9, r3
   34aac:	ldr	r0, [r0, #20]
   34ab0:	add	r3, r0, r9
   34ab4:	ldr	r2, [r4, #16]
   34ab8:	cmp	r2, r3
   34abc:	bcc	34adc <flatcc_json_printer_uint64_enum_field@@Base+0x14c>
   34ac0:	mov	r2, r9
   34ac4:	mov	r1, #32
   34ac8:	bl	145c4 <memset@plt>
   34acc:	ldr	r3, [r4, #20]
   34ad0:	add	r9, r3, r9
   34ad4:	str	r9, [r4, #20]
   34ad8:	b	34a24 <flatcc_json_printer_uint64_enum_field@@Base+0x94>
   34adc:	mov	r1, r9
   34ae0:	mov	r0, r4
   34ae4:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   34ae8:	b	34a24 <flatcc_json_printer_uint64_enum_field@@Base+0x94>
   34aec:	ldr	r3, [r0, #44]	; 0x2c
   34af0:	mov	r1, #0
   34af4:	blx	r3
   34af8:	b	34a24 <flatcc_json_printer_uint64_enum_field@@Base+0x94>
   34afc:	mov	r2, r5
   34b00:	mov	r1, r8
   34b04:	bl	1454c <memcpy@plt>
   34b08:	ldr	r3, [r4, #20]
   34b0c:	add	r5, r3, r5
   34b10:	str	r5, [r4, #20]
   34b14:	ldr	r3, [r4, #20]
   34b18:	mov	r2, #34	; 0x22
   34b1c:	strb	r2, [r3]
   34b20:	ldrb	r3, [r4, #26]
   34b24:	clz	r3, r3
   34b28:	lsr	r3, r3, #5
   34b2c:	ldr	r1, [r4, #20]
   34b30:	add	r2, r1, r3
   34b34:	add	r2, r2, #1
   34b38:	str	r2, [r4, #20]
   34b3c:	mov	r2, #58	; 0x3a
   34b40:	strb	r2, [r1, r3]
   34b44:	ldr	r3, [r4, #20]
   34b48:	mov	r2, #32
   34b4c:	strb	r2, [r3]
   34b50:	ldrb	r3, [r4, #25]
   34b54:	ldr	r2, [r4, #20]
   34b58:	cmp	r3, #0
   34b5c:	addne	r2, r2, #1
   34b60:	str	r2, [r4, #20]
   34b64:	ldrb	r3, [r4, #27]
   34b68:	cmp	r3, #0
   34b6c:	bne	34b88 <flatcc_json_printer_uint64_enum_field@@Base+0x1f8>
   34b70:	mov	r2, r6
   34b74:	mov	r3, r7
   34b78:	mov	r0, r4
   34b7c:	ldr	r1, [sp, #48]	; 0x30
   34b80:	blx	r1
   34b84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34b88:	mov	r0, r6
   34b8c:	mov	r1, r7
   34b90:	bl	30614 <flatcc_json_parser_struct_as_root@@Base+0x65c>
   34b94:	ldr	r3, [r4, #20]
   34b98:	add	r0, r3, r0
   34b9c:	str	r0, [r4, #20]
   34ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00034ba4 <flatcc_json_printer_int8_enum_field@@Base>:
   34ba4:	push	{r4, r5, r6, r7, r8, lr}
   34ba8:	ldr	r6, [sp, #24]
   34bac:	ldrsb	lr, [sp, #28]
   34bb0:	add	r2, r2, #2
   34bb4:	lsl	r2, r2, #1
   34bb8:	ldr	ip, [r1, #8]
   34bbc:	cmp	r2, ip
   34bc0:	bge	34c88 <flatcc_json_printer_int8_enum_field@@Base+0xe4>
   34bc4:	ldr	ip, [r1, #4]
   34bc8:	ldrh	r2, [ip, r2]
   34bcc:	cmp	r2, #0
   34bd0:	beq	34c88 <flatcc_json_printer_int8_enum_field@@Base+0xe4>
   34bd4:	ldr	ip, [r1]
   34bd8:	cmn	ip, r2
   34bdc:	beq	34c88 <flatcc_json_printer_int8_enum_field@@Base+0xe4>
   34be0:	ldrsb	r5, [ip, r2]
   34be4:	cmp	lr, r5
   34be8:	beq	34c78 <flatcc_json_printer_int8_enum_field@@Base+0xd4>
   34bec:	ldr	r2, [r1, #16]
   34bf0:	add	ip, r2, #1
   34bf4:	str	ip, [r1, #16]
   34bf8:	cmp	r2, #0
   34bfc:	ldrne	r2, [r0, #20]
   34c00:	addne	r1, r2, #1
   34c04:	strne	r1, [r0, #20]
   34c08:	movne	r1, #44	; 0x2c
   34c0c:	strbne	r1, [r2]
   34c10:	mov	r7, r3
   34c14:	mov	r4, r0
   34c18:	ldrb	r3, [r0, #25]
   34c1c:	cmp	r3, #0
   34c20:	bne	34c9c <flatcc_json_printer_int8_enum_field@@Base+0xf8>
   34c24:	ldr	r2, [r0, #20]
   34c28:	ldr	r3, [r0, #16]
   34c2c:	cmp	r2, r3
   34c30:	bcs	34cfc <flatcc_json_printer_int8_enum_field@@Base+0x158>
   34c34:	ldr	r3, [r4, #20]
   34c38:	mov	r2, #34	; 0x22
   34c3c:	strb	r2, [r3]
   34c40:	ldrb	r3, [r4, #26]
   34c44:	ldr	r0, [r4, #20]
   34c48:	cmp	r3, #0
   34c4c:	addeq	r0, r0, #1
   34c50:	str	r0, [r4, #20]
   34c54:	add	r3, r0, r6
   34c58:	ldr	r2, [r4, #16]
   34c5c:	cmp	r2, r3
   34c60:	bhi	34d0c <flatcc_json_printer_int8_enum_field@@Base+0x168>
   34c64:	mov	r2, r6
   34c68:	mov	r1, r7
   34c6c:	mov	r0, r4
   34c70:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   34c74:	b	34d24 <flatcc_json_printer_int8_enum_field@@Base+0x180>
   34c78:	ldrb	r2, [r0, #28]
   34c7c:	cmp	r2, #0
   34c80:	beq	34bec <flatcc_json_printer_int8_enum_field@@Base+0x48>
   34c84:	pop	{r4, r5, r6, r7, r8, pc}
   34c88:	ldrb	r2, [r0, #29]
   34c8c:	cmp	r2, #0
   34c90:	popeq	{r4, r5, r6, r7, r8, pc}
   34c94:	mov	r5, lr
   34c98:	b	34bec <flatcc_json_printer_int8_enum_field@@Base+0x48>
   34c9c:	ldr	r3, [r0, #20]
   34ca0:	add	r2, r3, #1
   34ca4:	str	r2, [r0, #20]
   34ca8:	mov	r2, #10
   34cac:	strb	r2, [r3]
   34cb0:	ldrb	r3, [r0, #25]
   34cb4:	ldr	r8, [r0, #32]
   34cb8:	mul	r8, r8, r3
   34cbc:	ldr	r0, [r0, #20]
   34cc0:	add	r3, r0, r8
   34cc4:	ldr	r2, [r4, #16]
   34cc8:	cmp	r2, r3
   34ccc:	bcc	34cec <flatcc_json_printer_int8_enum_field@@Base+0x148>
   34cd0:	mov	r2, r8
   34cd4:	mov	r1, #32
   34cd8:	bl	145c4 <memset@plt>
   34cdc:	ldr	r3, [r4, #20]
   34ce0:	add	r8, r3, r8
   34ce4:	str	r8, [r4, #20]
   34ce8:	b	34c34 <flatcc_json_printer_int8_enum_field@@Base+0x90>
   34cec:	mov	r1, r8
   34cf0:	mov	r0, r4
   34cf4:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   34cf8:	b	34c34 <flatcc_json_printer_int8_enum_field@@Base+0x90>
   34cfc:	ldr	r3, [r0, #44]	; 0x2c
   34d00:	mov	r1, #0
   34d04:	blx	r3
   34d08:	b	34c34 <flatcc_json_printer_int8_enum_field@@Base+0x90>
   34d0c:	mov	r2, r6
   34d10:	mov	r1, r7
   34d14:	bl	1454c <memcpy@plt>
   34d18:	ldr	r3, [r4, #20]
   34d1c:	add	r6, r3, r6
   34d20:	str	r6, [r4, #20]
   34d24:	ldr	r3, [r4, #20]
   34d28:	mov	r2, #34	; 0x22
   34d2c:	strb	r2, [r3]
   34d30:	ldrb	r3, [r4, #26]
   34d34:	clz	r3, r3
   34d38:	lsr	r3, r3, #5
   34d3c:	ldr	r1, [r4, #20]
   34d40:	add	r2, r1, r3
   34d44:	add	r2, r2, #1
   34d48:	str	r2, [r4, #20]
   34d4c:	mov	r2, #58	; 0x3a
   34d50:	strb	r2, [r1, r3]
   34d54:	ldr	r3, [r4, #20]
   34d58:	mov	r2, #32
   34d5c:	strb	r2, [r3]
   34d60:	ldrb	r3, [r4, #25]
   34d64:	ldr	r1, [r4, #20]
   34d68:	cmp	r3, #0
   34d6c:	addne	r1, r1, #1
   34d70:	str	r1, [r4, #20]
   34d74:	ldrb	r3, [r4, #27]
   34d78:	cmp	r3, #0
   34d7c:	bne	34d94 <flatcc_json_printer_int8_enum_field@@Base+0x1f0>
   34d80:	mov	r1, r5
   34d84:	mov	r0, r4
   34d88:	ldr	r3, [sp, #32]
   34d8c:	blx	r3
   34d90:	pop	{r4, r5, r6, r7, r8, pc}
   34d94:	mov	r0, r5
   34d98:	bl	30c98 <flatcc_json_parser_struct_as_root@@Base+0xce0>
   34d9c:	ldr	r3, [r4, #20]
   34da0:	add	r0, r3, r0
   34da4:	str	r0, [r4, #20]
   34da8:	pop	{r4, r5, r6, r7, r8, pc}

00034dac <flatcc_json_printer_int16_enum_field@@Base>:
   34dac:	push	{r4, r5, r6, r7, r8, lr}
   34db0:	ldr	r6, [sp, #24]
   34db4:	ldrsh	lr, [sp, #28]
   34db8:	add	r2, r2, #2
   34dbc:	lsl	r2, r2, #1
   34dc0:	ldr	ip, [r1, #8]
   34dc4:	cmp	r2, ip
   34dc8:	bge	34e90 <flatcc_json_printer_int16_enum_field@@Base+0xe4>
   34dcc:	ldr	ip, [r1, #4]
   34dd0:	ldrh	r2, [ip, r2]
   34dd4:	cmp	r2, #0
   34dd8:	beq	34e90 <flatcc_json_printer_int16_enum_field@@Base+0xe4>
   34ddc:	ldr	ip, [r1]
   34de0:	cmn	ip, r2
   34de4:	beq	34e90 <flatcc_json_printer_int16_enum_field@@Base+0xe4>
   34de8:	ldrsh	r5, [ip, r2]
   34dec:	cmp	lr, r5
   34df0:	beq	34e80 <flatcc_json_printer_int16_enum_field@@Base+0xd4>
   34df4:	ldr	r2, [r1, #16]
   34df8:	add	ip, r2, #1
   34dfc:	str	ip, [r1, #16]
   34e00:	cmp	r2, #0
   34e04:	ldrne	r2, [r0, #20]
   34e08:	addne	r1, r2, #1
   34e0c:	strne	r1, [r0, #20]
   34e10:	movne	r1, #44	; 0x2c
   34e14:	strbne	r1, [r2]
   34e18:	mov	r7, r3
   34e1c:	mov	r4, r0
   34e20:	ldrb	r3, [r0, #25]
   34e24:	cmp	r3, #0
   34e28:	bne	34ea4 <flatcc_json_printer_int16_enum_field@@Base+0xf8>
   34e2c:	ldr	r2, [r0, #20]
   34e30:	ldr	r3, [r0, #16]
   34e34:	cmp	r2, r3
   34e38:	bcs	34f04 <flatcc_json_printer_int16_enum_field@@Base+0x158>
   34e3c:	ldr	r3, [r4, #20]
   34e40:	mov	r2, #34	; 0x22
   34e44:	strb	r2, [r3]
   34e48:	ldrb	r3, [r4, #26]
   34e4c:	ldr	r0, [r4, #20]
   34e50:	cmp	r3, #0
   34e54:	addeq	r0, r0, #1
   34e58:	str	r0, [r4, #20]
   34e5c:	add	r3, r0, r6
   34e60:	ldr	r2, [r4, #16]
   34e64:	cmp	r2, r3
   34e68:	bhi	34f14 <flatcc_json_printer_int16_enum_field@@Base+0x168>
   34e6c:	mov	r2, r6
   34e70:	mov	r1, r7
   34e74:	mov	r0, r4
   34e78:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   34e7c:	b	34f2c <flatcc_json_printer_int16_enum_field@@Base+0x180>
   34e80:	ldrb	r2, [r0, #28]
   34e84:	cmp	r2, #0
   34e88:	beq	34df4 <flatcc_json_printer_int16_enum_field@@Base+0x48>
   34e8c:	pop	{r4, r5, r6, r7, r8, pc}
   34e90:	ldrb	r2, [r0, #29]
   34e94:	cmp	r2, #0
   34e98:	popeq	{r4, r5, r6, r7, r8, pc}
   34e9c:	mov	r5, lr
   34ea0:	b	34df4 <flatcc_json_printer_int16_enum_field@@Base+0x48>
   34ea4:	ldr	r3, [r0, #20]
   34ea8:	add	r2, r3, #1
   34eac:	str	r2, [r0, #20]
   34eb0:	mov	r2, #10
   34eb4:	strb	r2, [r3]
   34eb8:	ldrb	r3, [r0, #25]
   34ebc:	ldr	r8, [r0, #32]
   34ec0:	mul	r8, r8, r3
   34ec4:	ldr	r0, [r0, #20]
   34ec8:	add	r3, r0, r8
   34ecc:	ldr	r2, [r4, #16]
   34ed0:	cmp	r2, r3
   34ed4:	bcc	34ef4 <flatcc_json_printer_int16_enum_field@@Base+0x148>
   34ed8:	mov	r2, r8
   34edc:	mov	r1, #32
   34ee0:	bl	145c4 <memset@plt>
   34ee4:	ldr	r3, [r4, #20]
   34ee8:	add	r8, r3, r8
   34eec:	str	r8, [r4, #20]
   34ef0:	b	34e3c <flatcc_json_printer_int16_enum_field@@Base+0x90>
   34ef4:	mov	r1, r8
   34ef8:	mov	r0, r4
   34efc:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   34f00:	b	34e3c <flatcc_json_printer_int16_enum_field@@Base+0x90>
   34f04:	ldr	r3, [r0, #44]	; 0x2c
   34f08:	mov	r1, #0
   34f0c:	blx	r3
   34f10:	b	34e3c <flatcc_json_printer_int16_enum_field@@Base+0x90>
   34f14:	mov	r2, r6
   34f18:	mov	r1, r7
   34f1c:	bl	1454c <memcpy@plt>
   34f20:	ldr	r3, [r4, #20]
   34f24:	add	r6, r3, r6
   34f28:	str	r6, [r4, #20]
   34f2c:	ldr	r3, [r4, #20]
   34f30:	mov	r2, #34	; 0x22
   34f34:	strb	r2, [r3]
   34f38:	ldrb	r3, [r4, #26]
   34f3c:	clz	r3, r3
   34f40:	lsr	r3, r3, #5
   34f44:	ldr	r1, [r4, #20]
   34f48:	add	r2, r1, r3
   34f4c:	add	r2, r2, #1
   34f50:	str	r2, [r4, #20]
   34f54:	mov	r2, #58	; 0x3a
   34f58:	strb	r2, [r1, r3]
   34f5c:	ldr	r3, [r4, #20]
   34f60:	mov	r2, #32
   34f64:	strb	r2, [r3]
   34f68:	ldrb	r3, [r4, #25]
   34f6c:	ldr	r1, [r4, #20]
   34f70:	cmp	r3, #0
   34f74:	addne	r1, r1, #1
   34f78:	str	r1, [r4, #20]
   34f7c:	ldrb	r3, [r4, #27]
   34f80:	cmp	r3, #0
   34f84:	bne	34f9c <flatcc_json_printer_int16_enum_field@@Base+0x1f0>
   34f88:	mov	r1, r5
   34f8c:	mov	r0, r4
   34f90:	ldr	r3, [sp, #32]
   34f94:	blx	r3
   34f98:	pop	{r4, r5, r6, r7, r8, pc}
   34f9c:	mov	r0, r5
   34fa0:	bl	30cc8 <flatcc_json_parser_struct_as_root@@Base+0xd10>
   34fa4:	ldr	r3, [r4, #20]
   34fa8:	add	r0, r3, r0
   34fac:	str	r0, [r4, #20]
   34fb0:	pop	{r4, r5, r6, r7, r8, pc}

00034fb4 <flatcc_json_printer_int32_enum_field@@Base>:
   34fb4:	push	{r4, r5, r6, r7, r8, lr}
   34fb8:	ldr	r6, [sp, #24]
   34fbc:	add	r2, r2, #2
   34fc0:	lsl	r2, r2, #1
   34fc4:	ldr	ip, [r1, #8]
   34fc8:	cmp	r2, ip
   34fcc:	bge	35098 <flatcc_json_printer_int32_enum_field@@Base+0xe4>
   34fd0:	ldr	ip, [r1, #4]
   34fd4:	ldrh	r2, [ip, r2]
   34fd8:	cmp	r2, #0
   34fdc:	beq	35098 <flatcc_json_printer_int32_enum_field@@Base+0xe4>
   34fe0:	ldr	ip, [r1]
   34fe4:	cmn	ip, r2
   34fe8:	beq	35098 <flatcc_json_printer_int32_enum_field@@Base+0xe4>
   34fec:	ldr	r5, [ip, r2]
   34ff0:	ldr	r2, [sp, #28]
   34ff4:	cmp	r2, r5
   34ff8:	beq	35088 <flatcc_json_printer_int32_enum_field@@Base+0xd4>
   34ffc:	ldr	r2, [r1, #16]
   35000:	add	ip, r2, #1
   35004:	str	ip, [r1, #16]
   35008:	cmp	r2, #0
   3500c:	ldrne	r2, [r0, #20]
   35010:	addne	r1, r2, #1
   35014:	strne	r1, [r0, #20]
   35018:	movne	r1, #44	; 0x2c
   3501c:	strbne	r1, [r2]
   35020:	mov	r7, r3
   35024:	mov	r4, r0
   35028:	ldrb	r3, [r0, #25]
   3502c:	cmp	r3, #0
   35030:	bne	350ac <flatcc_json_printer_int32_enum_field@@Base+0xf8>
   35034:	ldr	r2, [r0, #20]
   35038:	ldr	r3, [r0, #16]
   3503c:	cmp	r2, r3
   35040:	bcs	3510c <flatcc_json_printer_int32_enum_field@@Base+0x158>
   35044:	ldr	r3, [r4, #20]
   35048:	mov	r2, #34	; 0x22
   3504c:	strb	r2, [r3]
   35050:	ldrb	r3, [r4, #26]
   35054:	ldr	r0, [r4, #20]
   35058:	cmp	r3, #0
   3505c:	addeq	r0, r0, #1
   35060:	str	r0, [r4, #20]
   35064:	add	r3, r0, r6
   35068:	ldr	r2, [r4, #16]
   3506c:	cmp	r2, r3
   35070:	bhi	3511c <flatcc_json_printer_int32_enum_field@@Base+0x168>
   35074:	mov	r2, r6
   35078:	mov	r1, r7
   3507c:	mov	r0, r4
   35080:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   35084:	b	35134 <flatcc_json_printer_int32_enum_field@@Base+0x180>
   35088:	ldrb	r2, [r0, #28]
   3508c:	cmp	r2, #0
   35090:	beq	34ffc <flatcc_json_printer_int32_enum_field@@Base+0x48>
   35094:	pop	{r4, r5, r6, r7, r8, pc}
   35098:	ldrb	r2, [r0, #29]
   3509c:	cmp	r2, #0
   350a0:	popeq	{r4, r5, r6, r7, r8, pc}
   350a4:	ldr	r5, [sp, #28]
   350a8:	b	34ffc <flatcc_json_printer_int32_enum_field@@Base+0x48>
   350ac:	ldr	r3, [r0, #20]
   350b0:	add	r2, r3, #1
   350b4:	str	r2, [r0, #20]
   350b8:	mov	r2, #10
   350bc:	strb	r2, [r3]
   350c0:	ldrb	r3, [r0, #25]
   350c4:	ldr	r8, [r0, #32]
   350c8:	mul	r8, r8, r3
   350cc:	ldr	r0, [r0, #20]
   350d0:	add	r3, r0, r8
   350d4:	ldr	r2, [r4, #16]
   350d8:	cmp	r2, r3
   350dc:	bcc	350fc <flatcc_json_printer_int32_enum_field@@Base+0x148>
   350e0:	mov	r2, r8
   350e4:	mov	r1, #32
   350e8:	bl	145c4 <memset@plt>
   350ec:	ldr	r3, [r4, #20]
   350f0:	add	r8, r3, r8
   350f4:	str	r8, [r4, #20]
   350f8:	b	35044 <flatcc_json_printer_int32_enum_field@@Base+0x90>
   350fc:	mov	r1, r8
   35100:	mov	r0, r4
   35104:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   35108:	b	35044 <flatcc_json_printer_int32_enum_field@@Base+0x90>
   3510c:	ldr	r3, [r0, #44]	; 0x2c
   35110:	mov	r1, #0
   35114:	blx	r3
   35118:	b	35044 <flatcc_json_printer_int32_enum_field@@Base+0x90>
   3511c:	mov	r2, r6
   35120:	mov	r1, r7
   35124:	bl	1454c <memcpy@plt>
   35128:	ldr	r3, [r4, #20]
   3512c:	add	r6, r3, r6
   35130:	str	r6, [r4, #20]
   35134:	ldr	r3, [r4, #20]
   35138:	mov	r2, #34	; 0x22
   3513c:	strb	r2, [r3]
   35140:	ldrb	r3, [r4, #26]
   35144:	clz	r3, r3
   35148:	lsr	r3, r3, #5
   3514c:	ldr	r1, [r4, #20]
   35150:	add	r2, r1, r3
   35154:	add	r2, r2, #1
   35158:	str	r2, [r4, #20]
   3515c:	mov	r2, #58	; 0x3a
   35160:	strb	r2, [r1, r3]
   35164:	ldr	r3, [r4, #20]
   35168:	mov	r2, #32
   3516c:	strb	r2, [r3]
   35170:	ldrb	r3, [r4, #25]
   35174:	ldr	r1, [r4, #20]
   35178:	cmp	r3, #0
   3517c:	addne	r1, r1, #1
   35180:	str	r1, [r4, #20]
   35184:	ldrb	r3, [r4, #27]
   35188:	cmp	r3, #0
   3518c:	bne	351a4 <flatcc_json_printer_int32_enum_field@@Base+0x1f0>
   35190:	mov	r1, r5
   35194:	mov	r0, r4
   35198:	ldr	r3, [sp, #32]
   3519c:	blx	r3
   351a0:	pop	{r4, r5, r6, r7, r8, pc}
   351a4:	mov	r0, r5
   351a8:	bl	30cf8 <flatcc_json_parser_struct_as_root@@Base+0xd40>
   351ac:	ldr	r3, [r4, #20]
   351b0:	add	r0, r3, r0
   351b4:	str	r0, [r4, #20]
   351b8:	pop	{r4, r5, r6, r7, r8, pc}

000351bc <flatcc_json_printer_int64_enum_field@@Base>:
   351bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   351c0:	ldr	r5, [sp, #32]
   351c4:	add	r2, r2, #2
   351c8:	lsl	r2, r2, #1
   351cc:	ldr	ip, [r1, #8]
   351d0:	cmp	r2, ip
   351d4:	bge	352a4 <flatcc_json_printer_int64_enum_field@@Base+0xe8>
   351d8:	ldr	ip, [r1, #4]
   351dc:	ldrh	r2, [ip, r2]
   351e0:	cmp	r2, #0
   351e4:	beq	352a4 <flatcc_json_printer_int64_enum_field@@Base+0xe8>
   351e8:	ldr	ip, [r1]
   351ec:	cmn	ip, r2
   351f0:	beq	352a4 <flatcc_json_printer_int64_enum_field@@Base+0xe8>
   351f4:	ldrd	r6, [ip, r2]
   351f8:	ldrd	r8, [sp, #40]	; 0x28
   351fc:	cmp	r9, r7
   35200:	cmpeq	r8, r6
   35204:	beq	35294 <flatcc_json_printer_int64_enum_field@@Base+0xd8>
   35208:	ldr	r2, [r1, #16]
   3520c:	add	ip, r2, #1
   35210:	str	ip, [r1, #16]
   35214:	cmp	r2, #0
   35218:	ldrne	r2, [r0, #20]
   3521c:	addne	r1, r2, #1
   35220:	strne	r1, [r0, #20]
   35224:	movne	r1, #44	; 0x2c
   35228:	strbne	r1, [r2]
   3522c:	mov	r8, r3
   35230:	mov	r4, r0
   35234:	ldrb	r3, [r0, #25]
   35238:	cmp	r3, #0
   3523c:	bne	352b8 <flatcc_json_printer_int64_enum_field@@Base+0xfc>
   35240:	ldr	r2, [r0, #20]
   35244:	ldr	r3, [r0, #16]
   35248:	cmp	r2, r3
   3524c:	bcs	35318 <flatcc_json_printer_int64_enum_field@@Base+0x15c>
   35250:	ldr	r3, [r4, #20]
   35254:	mov	r2, #34	; 0x22
   35258:	strb	r2, [r3]
   3525c:	ldrb	r3, [r4, #26]
   35260:	ldr	r0, [r4, #20]
   35264:	cmp	r3, #0
   35268:	addeq	r0, r0, #1
   3526c:	str	r0, [r4, #20]
   35270:	add	r3, r0, r5
   35274:	ldr	r2, [r4, #16]
   35278:	cmp	r2, r3
   3527c:	bhi	35328 <flatcc_json_printer_int64_enum_field@@Base+0x16c>
   35280:	mov	r2, r5
   35284:	mov	r1, r8
   35288:	mov	r0, r4
   3528c:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   35290:	b	35340 <flatcc_json_printer_int64_enum_field@@Base+0x184>
   35294:	ldrb	r2, [r0, #28]
   35298:	cmp	r2, #0
   3529c:	beq	35208 <flatcc_json_printer_int64_enum_field@@Base+0x4c>
   352a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   352a4:	ldrb	r2, [r0, #29]
   352a8:	cmp	r2, #0
   352ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   352b0:	ldrd	r6, [sp, #40]	; 0x28
   352b4:	b	35208 <flatcc_json_printer_int64_enum_field@@Base+0x4c>
   352b8:	ldr	r3, [r0, #20]
   352bc:	add	r2, r3, #1
   352c0:	str	r2, [r0, #20]
   352c4:	mov	r2, #10
   352c8:	strb	r2, [r3]
   352cc:	ldrb	r3, [r0, #25]
   352d0:	ldr	r9, [r0, #32]
   352d4:	mul	r9, r9, r3
   352d8:	ldr	r0, [r0, #20]
   352dc:	add	r3, r0, r9
   352e0:	ldr	r2, [r4, #16]
   352e4:	cmp	r2, r3
   352e8:	bcc	35308 <flatcc_json_printer_int64_enum_field@@Base+0x14c>
   352ec:	mov	r2, r9
   352f0:	mov	r1, #32
   352f4:	bl	145c4 <memset@plt>
   352f8:	ldr	r3, [r4, #20]
   352fc:	add	r9, r3, r9
   35300:	str	r9, [r4, #20]
   35304:	b	35250 <flatcc_json_printer_int64_enum_field@@Base+0x94>
   35308:	mov	r1, r9
   3530c:	mov	r0, r4
   35310:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   35314:	b	35250 <flatcc_json_printer_int64_enum_field@@Base+0x94>
   35318:	ldr	r3, [r0, #44]	; 0x2c
   3531c:	mov	r1, #0
   35320:	blx	r3
   35324:	b	35250 <flatcc_json_printer_int64_enum_field@@Base+0x94>
   35328:	mov	r2, r5
   3532c:	mov	r1, r8
   35330:	bl	1454c <memcpy@plt>
   35334:	ldr	r3, [r4, #20]
   35338:	add	r5, r3, r5
   3533c:	str	r5, [r4, #20]
   35340:	ldr	r3, [r4, #20]
   35344:	mov	r2, #34	; 0x22
   35348:	strb	r2, [r3]
   3534c:	ldrb	r3, [r4, #26]
   35350:	clz	r3, r3
   35354:	lsr	r3, r3, #5
   35358:	ldr	r1, [r4, #20]
   3535c:	add	r2, r1, r3
   35360:	add	r2, r2, #1
   35364:	str	r2, [r4, #20]
   35368:	mov	r2, #58	; 0x3a
   3536c:	strb	r2, [r1, r3]
   35370:	ldr	r3, [r4, #20]
   35374:	mov	r2, #32
   35378:	strb	r2, [r3]
   3537c:	ldrb	r3, [r4, #25]
   35380:	ldr	r2, [r4, #20]
   35384:	cmp	r3, #0
   35388:	addne	r2, r2, #1
   3538c:	str	r2, [r4, #20]
   35390:	ldrb	r3, [r4, #27]
   35394:	cmp	r3, #0
   35398:	bne	353b4 <flatcc_json_printer_int64_enum_field@@Base+0x1f8>
   3539c:	mov	r2, r6
   353a0:	mov	r3, r7
   353a4:	mov	r0, r4
   353a8:	ldr	r1, [sp, #48]	; 0x30
   353ac:	blx	r1
   353b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   353b4:	mov	r0, r6
   353b8:	mov	r1, r7
   353bc:	bl	30d20 <flatcc_json_parser_struct_as_root@@Base+0xd68>
   353c0:	ldr	r3, [r4, #20]
   353c4:	add	r0, r3, r0
   353c8:	str	r0, [r4, #20]
   353cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

000353d0 <flatcc_json_printer_bool_enum_field@@Base>:
   353d0:	push	{r4, r5, r6, r7, r8, lr}
   353d4:	ldr	r6, [sp, #24]
   353d8:	ldrb	lr, [sp, #28]
   353dc:	add	r2, r2, #2
   353e0:	lsl	r2, r2, #1
   353e4:	ldr	ip, [r1, #8]
   353e8:	cmp	r2, ip
   353ec:	bge	354b4 <flatcc_json_printer_bool_enum_field@@Base+0xe4>
   353f0:	ldr	ip, [r1, #4]
   353f4:	ldrh	r2, [ip, r2]
   353f8:	cmp	r2, #0
   353fc:	beq	354b4 <flatcc_json_printer_bool_enum_field@@Base+0xe4>
   35400:	ldr	ip, [r1]
   35404:	cmn	ip, r2
   35408:	beq	354b4 <flatcc_json_printer_bool_enum_field@@Base+0xe4>
   3540c:	ldrb	r5, [ip, r2]
   35410:	cmp	lr, r5
   35414:	beq	354a4 <flatcc_json_printer_bool_enum_field@@Base+0xd4>
   35418:	ldr	r2, [r1, #16]
   3541c:	add	ip, r2, #1
   35420:	str	ip, [r1, #16]
   35424:	cmp	r2, #0
   35428:	ldrne	r2, [r0, #20]
   3542c:	addne	r1, r2, #1
   35430:	strne	r1, [r0, #20]
   35434:	movne	r1, #44	; 0x2c
   35438:	strbne	r1, [r2]
   3543c:	mov	r7, r3
   35440:	mov	r4, r0
   35444:	ldrb	r3, [r0, #25]
   35448:	cmp	r3, #0
   3544c:	bne	354c8 <flatcc_json_printer_bool_enum_field@@Base+0xf8>
   35450:	ldr	r2, [r0, #20]
   35454:	ldr	r3, [r0, #16]
   35458:	cmp	r2, r3
   3545c:	bcs	35528 <flatcc_json_printer_bool_enum_field@@Base+0x158>
   35460:	ldr	r3, [r4, #20]
   35464:	mov	r2, #34	; 0x22
   35468:	strb	r2, [r3]
   3546c:	ldrb	r3, [r4, #26]
   35470:	ldr	r0, [r4, #20]
   35474:	cmp	r3, #0
   35478:	addeq	r0, r0, #1
   3547c:	str	r0, [r4, #20]
   35480:	add	r3, r0, r6
   35484:	ldr	r2, [r4, #16]
   35488:	cmp	r2, r3
   3548c:	bhi	35538 <flatcc_json_printer_bool_enum_field@@Base+0x168>
   35490:	mov	r2, r6
   35494:	mov	r1, r7
   35498:	mov	r0, r4
   3549c:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   354a0:	b	35550 <flatcc_json_printer_bool_enum_field@@Base+0x180>
   354a4:	ldrb	r2, [r0, #28]
   354a8:	cmp	r2, #0
   354ac:	beq	35418 <flatcc_json_printer_bool_enum_field@@Base+0x48>
   354b0:	pop	{r4, r5, r6, r7, r8, pc}
   354b4:	ldrb	r2, [r0, #29]
   354b8:	cmp	r2, #0
   354bc:	popeq	{r4, r5, r6, r7, r8, pc}
   354c0:	mov	r5, lr
   354c4:	b	35418 <flatcc_json_printer_bool_enum_field@@Base+0x48>
   354c8:	ldr	r3, [r0, #20]
   354cc:	add	r2, r3, #1
   354d0:	str	r2, [r0, #20]
   354d4:	mov	r2, #10
   354d8:	strb	r2, [r3]
   354dc:	ldrb	r3, [r0, #25]
   354e0:	ldr	r8, [r0, #32]
   354e4:	mul	r8, r8, r3
   354e8:	ldr	r0, [r0, #20]
   354ec:	add	r3, r0, r8
   354f0:	ldr	r2, [r4, #16]
   354f4:	cmp	r2, r3
   354f8:	bcc	35518 <flatcc_json_printer_bool_enum_field@@Base+0x148>
   354fc:	mov	r2, r8
   35500:	mov	r1, #32
   35504:	bl	145c4 <memset@plt>
   35508:	ldr	r3, [r4, #20]
   3550c:	add	r8, r3, r8
   35510:	str	r8, [r4, #20]
   35514:	b	35460 <flatcc_json_printer_bool_enum_field@@Base+0x90>
   35518:	mov	r1, r8
   3551c:	mov	r0, r4
   35520:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   35524:	b	35460 <flatcc_json_printer_bool_enum_field@@Base+0x90>
   35528:	ldr	r3, [r0, #44]	; 0x2c
   3552c:	mov	r1, #0
   35530:	blx	r3
   35534:	b	35460 <flatcc_json_printer_bool_enum_field@@Base+0x90>
   35538:	mov	r2, r6
   3553c:	mov	r1, r7
   35540:	bl	1454c <memcpy@plt>
   35544:	ldr	r3, [r4, #20]
   35548:	add	r6, r3, r6
   3554c:	str	r6, [r4, #20]
   35550:	ldr	r3, [r4, #20]
   35554:	mov	r2, #34	; 0x22
   35558:	strb	r2, [r3]
   3555c:	ldrb	r3, [r4, #26]
   35560:	clz	r3, r3
   35564:	lsr	r3, r3, #5
   35568:	ldr	r1, [r4, #20]
   3556c:	add	r2, r1, r3
   35570:	add	r2, r2, #1
   35574:	str	r2, [r4, #20]
   35578:	mov	r2, #58	; 0x3a
   3557c:	strb	r2, [r1, r3]
   35580:	ldr	r3, [r4, #20]
   35584:	mov	r2, #32
   35588:	strb	r2, [r3]
   3558c:	ldrb	r3, [r4, #25]
   35590:	ldr	r1, [r4, #20]
   35594:	cmp	r3, #0
   35598:	addne	r1, r1, #1
   3559c:	str	r1, [r4, #20]
   355a0:	ldrb	r3, [r4, #27]
   355a4:	cmp	r3, #0
   355a8:	bne	355c0 <flatcc_json_printer_bool_enum_field@@Base+0x1f0>
   355ac:	mov	r1, r5
   355b0:	mov	r0, r4
   355b4:	ldr	r3, [sp, #32]
   355b8:	blx	r3
   355bc:	pop	{r4, r5, r6, r7, r8, pc}
   355c0:	mov	r0, r5
   355c4:	bl	313dc <flatcc_json_parser_struct_as_root@@Base+0x1424>
   355c8:	ldr	r3, [r4, #20]
   355cc:	add	r0, r3, r0
   355d0:	str	r0, [r4, #20]
   355d4:	pop	{r4, r5, r6, r7, r8, pc}

000355d8 <flatcc_json_printer_uint8_struct_field@@Base>:
   355d8:	push	{r4, r5, r6, r7, r8, lr}
   355dc:	mov	r4, r0
   355e0:	ldr	r6, [sp, #28]
   355e4:	ldrb	r5, [r2, r3]
   355e8:	cmp	r1, #0
   355ec:	ldrne	r3, [r0, #20]
   355f0:	addne	r2, r3, #1
   355f4:	strne	r2, [r0, #20]
   355f8:	movne	r2, #44	; 0x2c
   355fc:	strbne	r2, [r3]
   35600:	ldrb	r3, [r0, #25]
   35604:	cmp	r3, #0
   35608:	bne	35660 <flatcc_json_printer_uint8_struct_field@@Base+0x88>
   3560c:	ldr	r2, [r0, #20]
   35610:	ldr	r3, [r0, #16]
   35614:	cmp	r2, r3
   35618:	bcs	356c0 <flatcc_json_printer_uint8_struct_field@@Base+0xe8>
   3561c:	ldr	r3, [r4, #20]
   35620:	mov	r2, #34	; 0x22
   35624:	strb	r2, [r3]
   35628:	ldrb	r3, [r4, #26]
   3562c:	ldr	r0, [r4, #20]
   35630:	cmp	r3, #0
   35634:	addeq	r0, r0, #1
   35638:	str	r0, [r4, #20]
   3563c:	add	r3, r0, r6
   35640:	ldr	r2, [r4, #16]
   35644:	cmp	r2, r3
   35648:	bhi	356d0 <flatcc_json_printer_uint8_struct_field@@Base+0xf8>
   3564c:	mov	r2, r6
   35650:	ldr	r1, [sp, #24]
   35654:	mov	r0, r4
   35658:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3565c:	b	356e8 <flatcc_json_printer_uint8_struct_field@@Base+0x110>
   35660:	ldr	r3, [r0, #20]
   35664:	add	r2, r3, #1
   35668:	str	r2, [r0, #20]
   3566c:	mov	r2, #10
   35670:	strb	r2, [r3]
   35674:	ldrb	r3, [r0, #25]
   35678:	ldr	r7, [r0, #32]
   3567c:	mul	r7, r7, r3
   35680:	ldr	r0, [r0, #20]
   35684:	add	r3, r0, r7
   35688:	ldr	r2, [r4, #16]
   3568c:	cmp	r2, r3
   35690:	bcc	356b0 <flatcc_json_printer_uint8_struct_field@@Base+0xd8>
   35694:	mov	r2, r7
   35698:	mov	r1, #32
   3569c:	bl	145c4 <memset@plt>
   356a0:	ldr	r3, [r4, #20]
   356a4:	add	r7, r3, r7
   356a8:	str	r7, [r4, #20]
   356ac:	b	3561c <flatcc_json_printer_uint8_struct_field@@Base+0x44>
   356b0:	mov	r1, r7
   356b4:	mov	r0, r4
   356b8:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   356bc:	b	3561c <flatcc_json_printer_uint8_struct_field@@Base+0x44>
   356c0:	ldr	r3, [r0, #44]	; 0x2c
   356c4:	mov	r1, #0
   356c8:	blx	r3
   356cc:	b	3561c <flatcc_json_printer_uint8_struct_field@@Base+0x44>
   356d0:	mov	r2, r6
   356d4:	ldr	r1, [sp, #24]
   356d8:	bl	1454c <memcpy@plt>
   356dc:	ldr	r3, [r4, #20]
   356e0:	add	r6, r3, r6
   356e4:	str	r6, [r4, #20]
   356e8:	ldr	r3, [r4, #20]
   356ec:	mov	r2, #34	; 0x22
   356f0:	strb	r2, [r3]
   356f4:	ldrb	r3, [r4, #26]
   356f8:	clz	r3, r3
   356fc:	lsr	r3, r3, #5
   35700:	ldr	r1, [r4, #20]
   35704:	add	r2, r1, r3
   35708:	add	r2, r2, #1
   3570c:	str	r2, [r4, #20]
   35710:	mov	r2, #58	; 0x3a
   35714:	strb	r2, [r1, r3]
   35718:	ldr	r3, [r4, #20]
   3571c:	mov	r2, #32
   35720:	strb	r2, [r3]
   35724:	ldrb	r3, [r4, #25]
   35728:	ldr	r1, [r4, #20]
   3572c:	cmp	r3, #0
   35730:	addne	r1, r1, #1
   35734:	str	r1, [r4, #20]
   35738:	mov	r0, r5
   3573c:	bl	30090 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   35740:	ldr	r3, [r4, #20]
   35744:	add	r0, r3, r0
   35748:	str	r0, [r4, #20]
   3574c:	pop	{r4, r5, r6, r7, r8, pc}

00035750 <flatcc_json_printer_uint16_struct_field@@Base>:
   35750:	push	{r4, r5, r6, r7, r8, lr}
   35754:	mov	r4, r0
   35758:	ldr	r6, [sp, #28]
   3575c:	ldrh	r5, [r2, r3]
   35760:	cmp	r1, #0
   35764:	ldrne	r3, [r0, #20]
   35768:	addne	r2, r3, #1
   3576c:	strne	r2, [r0, #20]
   35770:	movne	r2, #44	; 0x2c
   35774:	strbne	r2, [r3]
   35778:	ldrb	r3, [r0, #25]
   3577c:	cmp	r3, #0
   35780:	bne	357d8 <flatcc_json_printer_uint16_struct_field@@Base+0x88>
   35784:	ldr	r2, [r0, #20]
   35788:	ldr	r3, [r0, #16]
   3578c:	cmp	r2, r3
   35790:	bcs	35838 <flatcc_json_printer_uint16_struct_field@@Base+0xe8>
   35794:	ldr	r3, [r4, #20]
   35798:	mov	r2, #34	; 0x22
   3579c:	strb	r2, [r3]
   357a0:	ldrb	r3, [r4, #26]
   357a4:	ldr	r0, [r4, #20]
   357a8:	cmp	r3, #0
   357ac:	addeq	r0, r0, #1
   357b0:	str	r0, [r4, #20]
   357b4:	add	r3, r0, r6
   357b8:	ldr	r2, [r4, #16]
   357bc:	cmp	r2, r3
   357c0:	bhi	35848 <flatcc_json_printer_uint16_struct_field@@Base+0xf8>
   357c4:	mov	r2, r6
   357c8:	ldr	r1, [sp, #24]
   357cc:	mov	r0, r4
   357d0:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   357d4:	b	35860 <flatcc_json_printer_uint16_struct_field@@Base+0x110>
   357d8:	ldr	r3, [r0, #20]
   357dc:	add	r2, r3, #1
   357e0:	str	r2, [r0, #20]
   357e4:	mov	r2, #10
   357e8:	strb	r2, [r3]
   357ec:	ldrb	r3, [r0, #25]
   357f0:	ldr	r7, [r0, #32]
   357f4:	mul	r7, r7, r3
   357f8:	ldr	r0, [r0, #20]
   357fc:	add	r3, r0, r7
   35800:	ldr	r2, [r4, #16]
   35804:	cmp	r2, r3
   35808:	bcc	35828 <flatcc_json_printer_uint16_struct_field@@Base+0xd8>
   3580c:	mov	r2, r7
   35810:	mov	r1, #32
   35814:	bl	145c4 <memset@plt>
   35818:	ldr	r3, [r4, #20]
   3581c:	add	r7, r3, r7
   35820:	str	r7, [r4, #20]
   35824:	b	35794 <flatcc_json_printer_uint16_struct_field@@Base+0x44>
   35828:	mov	r1, r7
   3582c:	mov	r0, r4
   35830:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   35834:	b	35794 <flatcc_json_printer_uint16_struct_field@@Base+0x44>
   35838:	ldr	r3, [r0, #44]	; 0x2c
   3583c:	mov	r1, #0
   35840:	blx	r3
   35844:	b	35794 <flatcc_json_printer_uint16_struct_field@@Base+0x44>
   35848:	mov	r2, r6
   3584c:	ldr	r1, [sp, #24]
   35850:	bl	1454c <memcpy@plt>
   35854:	ldr	r3, [r4, #20]
   35858:	add	r6, r3, r6
   3585c:	str	r6, [r4, #20]
   35860:	ldr	r3, [r4, #20]
   35864:	mov	r2, #34	; 0x22
   35868:	strb	r2, [r3]
   3586c:	ldrb	r3, [r4, #26]
   35870:	clz	r3, r3
   35874:	lsr	r3, r3, #5
   35878:	ldr	r1, [r4, #20]
   3587c:	add	r2, r1, r3
   35880:	add	r2, r2, #1
   35884:	str	r2, [r4, #20]
   35888:	mov	r2, #58	; 0x3a
   3588c:	strb	r2, [r1, r3]
   35890:	ldr	r3, [r4, #20]
   35894:	mov	r2, #32
   35898:	strb	r2, [r3]
   3589c:	ldrb	r3, [r4, #25]
   358a0:	ldr	r1, [r4, #20]
   358a4:	cmp	r3, #0
   358a8:	addne	r1, r1, #1
   358ac:	str	r1, [r4, #20]
   358b0:	mov	r0, r5
   358b4:	bl	30150 <flatcc_json_parser_struct_as_root@@Base+0x198>
   358b8:	ldr	r3, [r4, #20]
   358bc:	add	r0, r3, r0
   358c0:	str	r0, [r4, #20]
   358c4:	pop	{r4, r5, r6, r7, r8, pc}

000358c8 <flatcc_json_printer_uint32_struct_field@@Base>:
   358c8:	push	{r4, r5, r6, r7, r8, lr}
   358cc:	mov	r4, r0
   358d0:	ldr	r6, [sp, #28]
   358d4:	ldr	r5, [r2, r3]
   358d8:	cmp	r1, #0
   358dc:	ldrne	r3, [r0, #20]
   358e0:	addne	r2, r3, #1
   358e4:	strne	r2, [r0, #20]
   358e8:	movne	r2, #44	; 0x2c
   358ec:	strbne	r2, [r3]
   358f0:	ldrb	r3, [r0, #25]
   358f4:	cmp	r3, #0
   358f8:	bne	35950 <flatcc_json_printer_uint32_struct_field@@Base+0x88>
   358fc:	ldr	r2, [r0, #20]
   35900:	ldr	r3, [r0, #16]
   35904:	cmp	r2, r3
   35908:	bcs	359b0 <flatcc_json_printer_uint32_struct_field@@Base+0xe8>
   3590c:	ldr	r3, [r4, #20]
   35910:	mov	r2, #34	; 0x22
   35914:	strb	r2, [r3]
   35918:	ldrb	r3, [r4, #26]
   3591c:	ldr	r0, [r4, #20]
   35920:	cmp	r3, #0
   35924:	addeq	r0, r0, #1
   35928:	str	r0, [r4, #20]
   3592c:	add	r3, r0, r6
   35930:	ldr	r2, [r4, #16]
   35934:	cmp	r2, r3
   35938:	bhi	359c0 <flatcc_json_printer_uint32_struct_field@@Base+0xf8>
   3593c:	mov	r2, r6
   35940:	ldr	r1, [sp, #24]
   35944:	mov	r0, r4
   35948:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3594c:	b	359d8 <flatcc_json_printer_uint32_struct_field@@Base+0x110>
   35950:	ldr	r3, [r0, #20]
   35954:	add	r2, r3, #1
   35958:	str	r2, [r0, #20]
   3595c:	mov	r2, #10
   35960:	strb	r2, [r3]
   35964:	ldrb	r3, [r0, #25]
   35968:	ldr	r7, [r0, #32]
   3596c:	mul	r7, r7, r3
   35970:	ldr	r0, [r0, #20]
   35974:	add	r3, r0, r7
   35978:	ldr	r2, [r4, #16]
   3597c:	cmp	r2, r3
   35980:	bcc	359a0 <flatcc_json_printer_uint32_struct_field@@Base+0xd8>
   35984:	mov	r2, r7
   35988:	mov	r1, #32
   3598c:	bl	145c4 <memset@plt>
   35990:	ldr	r3, [r4, #20]
   35994:	add	r7, r3, r7
   35998:	str	r7, [r4, #20]
   3599c:	b	3590c <flatcc_json_printer_uint32_struct_field@@Base+0x44>
   359a0:	mov	r1, r7
   359a4:	mov	r0, r4
   359a8:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   359ac:	b	3590c <flatcc_json_printer_uint32_struct_field@@Base+0x44>
   359b0:	ldr	r3, [r0, #44]	; 0x2c
   359b4:	mov	r1, #0
   359b8:	blx	r3
   359bc:	b	3590c <flatcc_json_printer_uint32_struct_field@@Base+0x44>
   359c0:	mov	r2, r6
   359c4:	ldr	r1, [sp, #24]
   359c8:	bl	1454c <memcpy@plt>
   359cc:	ldr	r3, [r4, #20]
   359d0:	add	r6, r3, r6
   359d4:	str	r6, [r4, #20]
   359d8:	ldr	r3, [r4, #20]
   359dc:	mov	r2, #34	; 0x22
   359e0:	strb	r2, [r3]
   359e4:	ldrb	r3, [r4, #26]
   359e8:	clz	r3, r3
   359ec:	lsr	r3, r3, #5
   359f0:	ldr	r1, [r4, #20]
   359f4:	add	r2, r1, r3
   359f8:	add	r2, r2, #1
   359fc:	str	r2, [r4, #20]
   35a00:	mov	r2, #58	; 0x3a
   35a04:	strb	r2, [r1, r3]
   35a08:	ldr	r3, [r4, #20]
   35a0c:	mov	r2, #32
   35a10:	strb	r2, [r3]
   35a14:	ldrb	r3, [r4, #25]
   35a18:	ldr	r1, [r4, #20]
   35a1c:	cmp	r3, #0
   35a20:	addne	r1, r1, #1
   35a24:	str	r1, [r4, #20]
   35a28:	mov	r0, r5
   35a2c:	bl	302d4 <flatcc_json_parser_struct_as_root@@Base+0x31c>
   35a30:	ldr	r3, [r4, #20]
   35a34:	add	r0, r3, r0
   35a38:	str	r0, [r4, #20]
   35a3c:	pop	{r4, r5, r6, r7, r8, pc}

00035a40 <flatcc_json_printer_uint64_struct_field@@Base>:
   35a40:	push	{r4, r5, r6, r7, r8, lr}
   35a44:	mov	r4, r0
   35a48:	ldr	r5, [sp, #28]
   35a4c:	ldrd	r6, [r2, r3]
   35a50:	cmp	r1, #0
   35a54:	ldrne	r3, [r0, #20]
   35a58:	addne	r2, r3, #1
   35a5c:	strne	r2, [r0, #20]
   35a60:	movne	r2, #44	; 0x2c
   35a64:	strbne	r2, [r3]
   35a68:	ldrb	r3, [r0, #25]
   35a6c:	cmp	r3, #0
   35a70:	bne	35ac8 <flatcc_json_printer_uint64_struct_field@@Base+0x88>
   35a74:	ldr	r2, [r0, #20]
   35a78:	ldr	r3, [r0, #16]
   35a7c:	cmp	r2, r3
   35a80:	bcs	35b28 <flatcc_json_printer_uint64_struct_field@@Base+0xe8>
   35a84:	ldr	r3, [r4, #20]
   35a88:	mov	r2, #34	; 0x22
   35a8c:	strb	r2, [r3]
   35a90:	ldrb	r3, [r4, #26]
   35a94:	ldr	r0, [r4, #20]
   35a98:	cmp	r3, #0
   35a9c:	addeq	r0, r0, #1
   35aa0:	str	r0, [r4, #20]
   35aa4:	add	r3, r0, r5
   35aa8:	ldr	r2, [r4, #16]
   35aac:	cmp	r2, r3
   35ab0:	bhi	35b38 <flatcc_json_printer_uint64_struct_field@@Base+0xf8>
   35ab4:	mov	r2, r5
   35ab8:	ldr	r1, [sp, #24]
   35abc:	mov	r0, r4
   35ac0:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   35ac4:	b	35b50 <flatcc_json_printer_uint64_struct_field@@Base+0x110>
   35ac8:	ldr	r3, [r0, #20]
   35acc:	add	r2, r3, #1
   35ad0:	str	r2, [r0, #20]
   35ad4:	mov	r2, #10
   35ad8:	strb	r2, [r3]
   35adc:	ldrb	r3, [r0, #25]
   35ae0:	ldr	r8, [r0, #32]
   35ae4:	mul	r8, r8, r3
   35ae8:	ldr	r0, [r0, #20]
   35aec:	add	r3, r0, r8
   35af0:	ldr	r2, [r4, #16]
   35af4:	cmp	r2, r3
   35af8:	bcc	35b18 <flatcc_json_printer_uint64_struct_field@@Base+0xd8>
   35afc:	mov	r2, r8
   35b00:	mov	r1, #32
   35b04:	bl	145c4 <memset@plt>
   35b08:	ldr	r3, [r4, #20]
   35b0c:	add	r8, r3, r8
   35b10:	str	r8, [r4, #20]
   35b14:	b	35a84 <flatcc_json_printer_uint64_struct_field@@Base+0x44>
   35b18:	mov	r1, r8
   35b1c:	mov	r0, r4
   35b20:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   35b24:	b	35a84 <flatcc_json_printer_uint64_struct_field@@Base+0x44>
   35b28:	ldr	r3, [r0, #44]	; 0x2c
   35b2c:	mov	r1, #0
   35b30:	blx	r3
   35b34:	b	35a84 <flatcc_json_printer_uint64_struct_field@@Base+0x44>
   35b38:	mov	r2, r5
   35b3c:	ldr	r1, [sp, #24]
   35b40:	bl	1454c <memcpy@plt>
   35b44:	ldr	r3, [r4, #20]
   35b48:	add	r5, r3, r5
   35b4c:	str	r5, [r4, #20]
   35b50:	ldr	r3, [r4, #20]
   35b54:	mov	r2, #34	; 0x22
   35b58:	strb	r2, [r3]
   35b5c:	ldrb	r3, [r4, #26]
   35b60:	clz	r3, r3
   35b64:	lsr	r3, r3, #5
   35b68:	ldr	r1, [r4, #20]
   35b6c:	add	r2, r1, r3
   35b70:	add	r2, r2, #1
   35b74:	str	r2, [r4, #20]
   35b78:	mov	r2, #58	; 0x3a
   35b7c:	strb	r2, [r1, r3]
   35b80:	ldr	r3, [r4, #20]
   35b84:	mov	r2, #32
   35b88:	strb	r2, [r3]
   35b8c:	ldrb	r3, [r4, #25]
   35b90:	ldr	r2, [r4, #20]
   35b94:	cmp	r3, #0
   35b98:	addne	r2, r2, #1
   35b9c:	str	r2, [r4, #20]
   35ba0:	mov	r0, r6
   35ba4:	mov	r1, r7
   35ba8:	bl	30614 <flatcc_json_parser_struct_as_root@@Base+0x65c>
   35bac:	ldr	r3, [r4, #20]
   35bb0:	add	r0, r3, r0
   35bb4:	str	r0, [r4, #20]
   35bb8:	pop	{r4, r5, r6, r7, r8, pc}

00035bbc <flatcc_json_printer_int8_struct_field@@Base>:
   35bbc:	push	{r4, r5, r6, r7, r8, lr}
   35bc0:	mov	r4, r0
   35bc4:	ldr	r6, [sp, #28]
   35bc8:	ldrsb	r5, [r2, r3]
   35bcc:	cmp	r1, #0
   35bd0:	ldrne	r3, [r0, #20]
   35bd4:	addne	r2, r3, #1
   35bd8:	strne	r2, [r0, #20]
   35bdc:	movne	r2, #44	; 0x2c
   35be0:	strbne	r2, [r3]
   35be4:	ldrb	r3, [r0, #25]
   35be8:	cmp	r3, #0
   35bec:	bne	35c44 <flatcc_json_printer_int8_struct_field@@Base+0x88>
   35bf0:	ldr	r2, [r0, #20]
   35bf4:	ldr	r3, [r0, #16]
   35bf8:	cmp	r2, r3
   35bfc:	bcs	35ca4 <flatcc_json_printer_int8_struct_field@@Base+0xe8>
   35c00:	ldr	r3, [r4, #20]
   35c04:	mov	r2, #34	; 0x22
   35c08:	strb	r2, [r3]
   35c0c:	ldrb	r3, [r4, #26]
   35c10:	ldr	r0, [r4, #20]
   35c14:	cmp	r3, #0
   35c18:	addeq	r0, r0, #1
   35c1c:	str	r0, [r4, #20]
   35c20:	add	r3, r0, r6
   35c24:	ldr	r2, [r4, #16]
   35c28:	cmp	r2, r3
   35c2c:	bhi	35cb4 <flatcc_json_printer_int8_struct_field@@Base+0xf8>
   35c30:	mov	r2, r6
   35c34:	ldr	r1, [sp, #24]
   35c38:	mov	r0, r4
   35c3c:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   35c40:	b	35ccc <flatcc_json_printer_int8_struct_field@@Base+0x110>
   35c44:	ldr	r3, [r0, #20]
   35c48:	add	r2, r3, #1
   35c4c:	str	r2, [r0, #20]
   35c50:	mov	r2, #10
   35c54:	strb	r2, [r3]
   35c58:	ldrb	r3, [r0, #25]
   35c5c:	ldr	r7, [r0, #32]
   35c60:	mul	r7, r7, r3
   35c64:	ldr	r0, [r0, #20]
   35c68:	add	r3, r0, r7
   35c6c:	ldr	r2, [r4, #16]
   35c70:	cmp	r2, r3
   35c74:	bcc	35c94 <flatcc_json_printer_int8_struct_field@@Base+0xd8>
   35c78:	mov	r2, r7
   35c7c:	mov	r1, #32
   35c80:	bl	145c4 <memset@plt>
   35c84:	ldr	r3, [r4, #20]
   35c88:	add	r7, r3, r7
   35c8c:	str	r7, [r4, #20]
   35c90:	b	35c00 <flatcc_json_printer_int8_struct_field@@Base+0x44>
   35c94:	mov	r1, r7
   35c98:	mov	r0, r4
   35c9c:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   35ca0:	b	35c00 <flatcc_json_printer_int8_struct_field@@Base+0x44>
   35ca4:	ldr	r3, [r0, #44]	; 0x2c
   35ca8:	mov	r1, #0
   35cac:	blx	r3
   35cb0:	b	35c00 <flatcc_json_printer_int8_struct_field@@Base+0x44>
   35cb4:	mov	r2, r6
   35cb8:	ldr	r1, [sp, #24]
   35cbc:	bl	1454c <memcpy@plt>
   35cc0:	ldr	r3, [r4, #20]
   35cc4:	add	r6, r3, r6
   35cc8:	str	r6, [r4, #20]
   35ccc:	ldr	r3, [r4, #20]
   35cd0:	mov	r2, #34	; 0x22
   35cd4:	strb	r2, [r3]
   35cd8:	ldrb	r3, [r4, #26]
   35cdc:	clz	r3, r3
   35ce0:	lsr	r3, r3, #5
   35ce4:	ldr	r1, [r4, #20]
   35ce8:	add	r2, r1, r3
   35cec:	add	r2, r2, #1
   35cf0:	str	r2, [r4, #20]
   35cf4:	mov	r2, #58	; 0x3a
   35cf8:	strb	r2, [r1, r3]
   35cfc:	ldr	r3, [r4, #20]
   35d00:	mov	r2, #32
   35d04:	strb	r2, [r3]
   35d08:	ldrb	r3, [r4, #25]
   35d0c:	ldr	r1, [r4, #20]
   35d10:	cmp	r3, #0
   35d14:	addne	r1, r1, #1
   35d18:	str	r1, [r4, #20]
   35d1c:	mov	r0, r5
   35d20:	bl	30c98 <flatcc_json_parser_struct_as_root@@Base+0xce0>
   35d24:	ldr	r3, [r4, #20]
   35d28:	add	r0, r3, r0
   35d2c:	str	r0, [r4, #20]
   35d30:	pop	{r4, r5, r6, r7, r8, pc}

00035d34 <flatcc_json_printer_int16_struct_field@@Base>:
   35d34:	push	{r4, r5, r6, r7, r8, lr}
   35d38:	mov	r4, r0
   35d3c:	ldr	r6, [sp, #28]
   35d40:	ldrsh	r5, [r2, r3]
   35d44:	cmp	r1, #0
   35d48:	ldrne	r3, [r0, #20]
   35d4c:	addne	r2, r3, #1
   35d50:	strne	r2, [r0, #20]
   35d54:	movne	r2, #44	; 0x2c
   35d58:	strbne	r2, [r3]
   35d5c:	ldrb	r3, [r0, #25]
   35d60:	cmp	r3, #0
   35d64:	bne	35dbc <flatcc_json_printer_int16_struct_field@@Base+0x88>
   35d68:	ldr	r2, [r0, #20]
   35d6c:	ldr	r3, [r0, #16]
   35d70:	cmp	r2, r3
   35d74:	bcs	35e1c <flatcc_json_printer_int16_struct_field@@Base+0xe8>
   35d78:	ldr	r3, [r4, #20]
   35d7c:	mov	r2, #34	; 0x22
   35d80:	strb	r2, [r3]
   35d84:	ldrb	r3, [r4, #26]
   35d88:	ldr	r0, [r4, #20]
   35d8c:	cmp	r3, #0
   35d90:	addeq	r0, r0, #1
   35d94:	str	r0, [r4, #20]
   35d98:	add	r3, r0, r6
   35d9c:	ldr	r2, [r4, #16]
   35da0:	cmp	r2, r3
   35da4:	bhi	35e2c <flatcc_json_printer_int16_struct_field@@Base+0xf8>
   35da8:	mov	r2, r6
   35dac:	ldr	r1, [sp, #24]
   35db0:	mov	r0, r4
   35db4:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   35db8:	b	35e44 <flatcc_json_printer_int16_struct_field@@Base+0x110>
   35dbc:	ldr	r3, [r0, #20]
   35dc0:	add	r2, r3, #1
   35dc4:	str	r2, [r0, #20]
   35dc8:	mov	r2, #10
   35dcc:	strb	r2, [r3]
   35dd0:	ldrb	r3, [r0, #25]
   35dd4:	ldr	r7, [r0, #32]
   35dd8:	mul	r7, r7, r3
   35ddc:	ldr	r0, [r0, #20]
   35de0:	add	r3, r0, r7
   35de4:	ldr	r2, [r4, #16]
   35de8:	cmp	r2, r3
   35dec:	bcc	35e0c <flatcc_json_printer_int16_struct_field@@Base+0xd8>
   35df0:	mov	r2, r7
   35df4:	mov	r1, #32
   35df8:	bl	145c4 <memset@plt>
   35dfc:	ldr	r3, [r4, #20]
   35e00:	add	r7, r3, r7
   35e04:	str	r7, [r4, #20]
   35e08:	b	35d78 <flatcc_json_printer_int16_struct_field@@Base+0x44>
   35e0c:	mov	r1, r7
   35e10:	mov	r0, r4
   35e14:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   35e18:	b	35d78 <flatcc_json_printer_int16_struct_field@@Base+0x44>
   35e1c:	ldr	r3, [r0, #44]	; 0x2c
   35e20:	mov	r1, #0
   35e24:	blx	r3
   35e28:	b	35d78 <flatcc_json_printer_int16_struct_field@@Base+0x44>
   35e2c:	mov	r2, r6
   35e30:	ldr	r1, [sp, #24]
   35e34:	bl	1454c <memcpy@plt>
   35e38:	ldr	r3, [r4, #20]
   35e3c:	add	r6, r3, r6
   35e40:	str	r6, [r4, #20]
   35e44:	ldr	r3, [r4, #20]
   35e48:	mov	r2, #34	; 0x22
   35e4c:	strb	r2, [r3]
   35e50:	ldrb	r3, [r4, #26]
   35e54:	clz	r3, r3
   35e58:	lsr	r3, r3, #5
   35e5c:	ldr	r1, [r4, #20]
   35e60:	add	r2, r1, r3
   35e64:	add	r2, r2, #1
   35e68:	str	r2, [r4, #20]
   35e6c:	mov	r2, #58	; 0x3a
   35e70:	strb	r2, [r1, r3]
   35e74:	ldr	r3, [r4, #20]
   35e78:	mov	r2, #32
   35e7c:	strb	r2, [r3]
   35e80:	ldrb	r3, [r4, #25]
   35e84:	ldr	r1, [r4, #20]
   35e88:	cmp	r3, #0
   35e8c:	addne	r1, r1, #1
   35e90:	str	r1, [r4, #20]
   35e94:	mov	r0, r5
   35e98:	bl	30cc8 <flatcc_json_parser_struct_as_root@@Base+0xd10>
   35e9c:	ldr	r3, [r4, #20]
   35ea0:	add	r0, r3, r0
   35ea4:	str	r0, [r4, #20]
   35ea8:	pop	{r4, r5, r6, r7, r8, pc}

00035eac <flatcc_json_printer_int32_struct_field@@Base>:
   35eac:	push	{r4, r5, r6, r7, r8, lr}
   35eb0:	mov	r4, r0
   35eb4:	ldr	r6, [sp, #28]
   35eb8:	ldr	r5, [r2, r3]
   35ebc:	cmp	r1, #0
   35ec0:	ldrne	r3, [r0, #20]
   35ec4:	addne	r2, r3, #1
   35ec8:	strne	r2, [r0, #20]
   35ecc:	movne	r2, #44	; 0x2c
   35ed0:	strbne	r2, [r3]
   35ed4:	ldrb	r3, [r0, #25]
   35ed8:	cmp	r3, #0
   35edc:	bne	35f34 <flatcc_json_printer_int32_struct_field@@Base+0x88>
   35ee0:	ldr	r2, [r0, #20]
   35ee4:	ldr	r3, [r0, #16]
   35ee8:	cmp	r2, r3
   35eec:	bcs	35f94 <flatcc_json_printer_int32_struct_field@@Base+0xe8>
   35ef0:	ldr	r3, [r4, #20]
   35ef4:	mov	r2, #34	; 0x22
   35ef8:	strb	r2, [r3]
   35efc:	ldrb	r3, [r4, #26]
   35f00:	ldr	r0, [r4, #20]
   35f04:	cmp	r3, #0
   35f08:	addeq	r0, r0, #1
   35f0c:	str	r0, [r4, #20]
   35f10:	add	r3, r0, r6
   35f14:	ldr	r2, [r4, #16]
   35f18:	cmp	r2, r3
   35f1c:	bhi	35fa4 <flatcc_json_printer_int32_struct_field@@Base+0xf8>
   35f20:	mov	r2, r6
   35f24:	ldr	r1, [sp, #24]
   35f28:	mov	r0, r4
   35f2c:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   35f30:	b	35fbc <flatcc_json_printer_int32_struct_field@@Base+0x110>
   35f34:	ldr	r3, [r0, #20]
   35f38:	add	r2, r3, #1
   35f3c:	str	r2, [r0, #20]
   35f40:	mov	r2, #10
   35f44:	strb	r2, [r3]
   35f48:	ldrb	r3, [r0, #25]
   35f4c:	ldr	r7, [r0, #32]
   35f50:	mul	r7, r7, r3
   35f54:	ldr	r0, [r0, #20]
   35f58:	add	r3, r0, r7
   35f5c:	ldr	r2, [r4, #16]
   35f60:	cmp	r2, r3
   35f64:	bcc	35f84 <flatcc_json_printer_int32_struct_field@@Base+0xd8>
   35f68:	mov	r2, r7
   35f6c:	mov	r1, #32
   35f70:	bl	145c4 <memset@plt>
   35f74:	ldr	r3, [r4, #20]
   35f78:	add	r7, r3, r7
   35f7c:	str	r7, [r4, #20]
   35f80:	b	35ef0 <flatcc_json_printer_int32_struct_field@@Base+0x44>
   35f84:	mov	r1, r7
   35f88:	mov	r0, r4
   35f8c:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   35f90:	b	35ef0 <flatcc_json_printer_int32_struct_field@@Base+0x44>
   35f94:	ldr	r3, [r0, #44]	; 0x2c
   35f98:	mov	r1, #0
   35f9c:	blx	r3
   35fa0:	b	35ef0 <flatcc_json_printer_int32_struct_field@@Base+0x44>
   35fa4:	mov	r2, r6
   35fa8:	ldr	r1, [sp, #24]
   35fac:	bl	1454c <memcpy@plt>
   35fb0:	ldr	r3, [r4, #20]
   35fb4:	add	r6, r3, r6
   35fb8:	str	r6, [r4, #20]
   35fbc:	ldr	r3, [r4, #20]
   35fc0:	mov	r2, #34	; 0x22
   35fc4:	strb	r2, [r3]
   35fc8:	ldrb	r3, [r4, #26]
   35fcc:	clz	r3, r3
   35fd0:	lsr	r3, r3, #5
   35fd4:	ldr	r1, [r4, #20]
   35fd8:	add	r2, r1, r3
   35fdc:	add	r2, r2, #1
   35fe0:	str	r2, [r4, #20]
   35fe4:	mov	r2, #58	; 0x3a
   35fe8:	strb	r2, [r1, r3]
   35fec:	ldr	r3, [r4, #20]
   35ff0:	mov	r2, #32
   35ff4:	strb	r2, [r3]
   35ff8:	ldrb	r3, [r4, #25]
   35ffc:	ldr	r1, [r4, #20]
   36000:	cmp	r3, #0
   36004:	addne	r1, r1, #1
   36008:	str	r1, [r4, #20]
   3600c:	mov	r0, r5
   36010:	bl	30cf8 <flatcc_json_parser_struct_as_root@@Base+0xd40>
   36014:	ldr	r3, [r4, #20]
   36018:	add	r0, r3, r0
   3601c:	str	r0, [r4, #20]
   36020:	pop	{r4, r5, r6, r7, r8, pc}

00036024 <flatcc_json_printer_int64_struct_field@@Base>:
   36024:	push	{r4, r5, r6, r7, r8, lr}
   36028:	mov	r4, r0
   3602c:	ldr	r5, [sp, #28]
   36030:	ldrd	r6, [r2, r3]
   36034:	cmp	r1, #0
   36038:	ldrne	r3, [r0, #20]
   3603c:	addne	r2, r3, #1
   36040:	strne	r2, [r0, #20]
   36044:	movne	r2, #44	; 0x2c
   36048:	strbne	r2, [r3]
   3604c:	ldrb	r3, [r0, #25]
   36050:	cmp	r3, #0
   36054:	bne	360ac <flatcc_json_printer_int64_struct_field@@Base+0x88>
   36058:	ldr	r2, [r0, #20]
   3605c:	ldr	r3, [r0, #16]
   36060:	cmp	r2, r3
   36064:	bcs	3610c <flatcc_json_printer_int64_struct_field@@Base+0xe8>
   36068:	ldr	r3, [r4, #20]
   3606c:	mov	r2, #34	; 0x22
   36070:	strb	r2, [r3]
   36074:	ldrb	r3, [r4, #26]
   36078:	ldr	r0, [r4, #20]
   3607c:	cmp	r3, #0
   36080:	addeq	r0, r0, #1
   36084:	str	r0, [r4, #20]
   36088:	add	r3, r0, r5
   3608c:	ldr	r2, [r4, #16]
   36090:	cmp	r2, r3
   36094:	bhi	3611c <flatcc_json_printer_int64_struct_field@@Base+0xf8>
   36098:	mov	r2, r5
   3609c:	ldr	r1, [sp, #24]
   360a0:	mov	r0, r4
   360a4:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   360a8:	b	36134 <flatcc_json_printer_int64_struct_field@@Base+0x110>
   360ac:	ldr	r3, [r0, #20]
   360b0:	add	r2, r3, #1
   360b4:	str	r2, [r0, #20]
   360b8:	mov	r2, #10
   360bc:	strb	r2, [r3]
   360c0:	ldrb	r3, [r0, #25]
   360c4:	ldr	r8, [r0, #32]
   360c8:	mul	r8, r8, r3
   360cc:	ldr	r0, [r0, #20]
   360d0:	add	r3, r0, r8
   360d4:	ldr	r2, [r4, #16]
   360d8:	cmp	r2, r3
   360dc:	bcc	360fc <flatcc_json_printer_int64_struct_field@@Base+0xd8>
   360e0:	mov	r2, r8
   360e4:	mov	r1, #32
   360e8:	bl	145c4 <memset@plt>
   360ec:	ldr	r3, [r4, #20]
   360f0:	add	r8, r3, r8
   360f4:	str	r8, [r4, #20]
   360f8:	b	36068 <flatcc_json_printer_int64_struct_field@@Base+0x44>
   360fc:	mov	r1, r8
   36100:	mov	r0, r4
   36104:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   36108:	b	36068 <flatcc_json_printer_int64_struct_field@@Base+0x44>
   3610c:	ldr	r3, [r0, #44]	; 0x2c
   36110:	mov	r1, #0
   36114:	blx	r3
   36118:	b	36068 <flatcc_json_printer_int64_struct_field@@Base+0x44>
   3611c:	mov	r2, r5
   36120:	ldr	r1, [sp, #24]
   36124:	bl	1454c <memcpy@plt>
   36128:	ldr	r3, [r4, #20]
   3612c:	add	r5, r3, r5
   36130:	str	r5, [r4, #20]
   36134:	ldr	r3, [r4, #20]
   36138:	mov	r2, #34	; 0x22
   3613c:	strb	r2, [r3]
   36140:	ldrb	r3, [r4, #26]
   36144:	clz	r3, r3
   36148:	lsr	r3, r3, #5
   3614c:	ldr	r1, [r4, #20]
   36150:	add	r2, r1, r3
   36154:	add	r2, r2, #1
   36158:	str	r2, [r4, #20]
   3615c:	mov	r2, #58	; 0x3a
   36160:	strb	r2, [r1, r3]
   36164:	ldr	r3, [r4, #20]
   36168:	mov	r2, #32
   3616c:	strb	r2, [r3]
   36170:	ldrb	r3, [r4, #25]
   36174:	ldr	r2, [r4, #20]
   36178:	cmp	r3, #0
   3617c:	addne	r2, r2, #1
   36180:	str	r2, [r4, #20]
   36184:	mov	r0, r6
   36188:	mov	r1, r7
   3618c:	bl	30d20 <flatcc_json_parser_struct_as_root@@Base+0xd68>
   36190:	ldr	r3, [r4, #20]
   36194:	add	r0, r3, r0
   36198:	str	r0, [r4, #20]
   3619c:	pop	{r4, r5, r6, r7, r8, pc}

000361a0 <flatcc_json_printer_bool_struct_field@@Base>:
   361a0:	push	{r4, r5, r6, r7, r8, lr}
   361a4:	mov	r4, r0
   361a8:	ldr	r6, [sp, #28]
   361ac:	ldrb	r5, [r2, r3]
   361b0:	cmp	r1, #0
   361b4:	ldrne	r3, [r0, #20]
   361b8:	addne	r2, r3, #1
   361bc:	strne	r2, [r0, #20]
   361c0:	movne	r2, #44	; 0x2c
   361c4:	strbne	r2, [r3]
   361c8:	ldrb	r3, [r0, #25]
   361cc:	cmp	r3, #0
   361d0:	bne	36228 <flatcc_json_printer_bool_struct_field@@Base+0x88>
   361d4:	ldr	r2, [r0, #20]
   361d8:	ldr	r3, [r0, #16]
   361dc:	cmp	r2, r3
   361e0:	bcs	36288 <flatcc_json_printer_bool_struct_field@@Base+0xe8>
   361e4:	ldr	r3, [r4, #20]
   361e8:	mov	r2, #34	; 0x22
   361ec:	strb	r2, [r3]
   361f0:	ldrb	r3, [r4, #26]
   361f4:	ldr	r0, [r4, #20]
   361f8:	cmp	r3, #0
   361fc:	addeq	r0, r0, #1
   36200:	str	r0, [r4, #20]
   36204:	add	r3, r0, r6
   36208:	ldr	r2, [r4, #16]
   3620c:	cmp	r2, r3
   36210:	bhi	36298 <flatcc_json_printer_bool_struct_field@@Base+0xf8>
   36214:	mov	r2, r6
   36218:	ldr	r1, [sp, #24]
   3621c:	mov	r0, r4
   36220:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   36224:	b	362b0 <flatcc_json_printer_bool_struct_field@@Base+0x110>
   36228:	ldr	r3, [r0, #20]
   3622c:	add	r2, r3, #1
   36230:	str	r2, [r0, #20]
   36234:	mov	r2, #10
   36238:	strb	r2, [r3]
   3623c:	ldrb	r3, [r0, #25]
   36240:	ldr	r7, [r0, #32]
   36244:	mul	r7, r7, r3
   36248:	ldr	r0, [r0, #20]
   3624c:	add	r3, r0, r7
   36250:	ldr	r2, [r4, #16]
   36254:	cmp	r2, r3
   36258:	bcc	36278 <flatcc_json_printer_bool_struct_field@@Base+0xd8>
   3625c:	mov	r2, r7
   36260:	mov	r1, #32
   36264:	bl	145c4 <memset@plt>
   36268:	ldr	r3, [r4, #20]
   3626c:	add	r7, r3, r7
   36270:	str	r7, [r4, #20]
   36274:	b	361e4 <flatcc_json_printer_bool_struct_field@@Base+0x44>
   36278:	mov	r1, r7
   3627c:	mov	r0, r4
   36280:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   36284:	b	361e4 <flatcc_json_printer_bool_struct_field@@Base+0x44>
   36288:	ldr	r3, [r0, #44]	; 0x2c
   3628c:	mov	r1, #0
   36290:	blx	r3
   36294:	b	361e4 <flatcc_json_printer_bool_struct_field@@Base+0x44>
   36298:	mov	r2, r6
   3629c:	ldr	r1, [sp, #24]
   362a0:	bl	1454c <memcpy@plt>
   362a4:	ldr	r3, [r4, #20]
   362a8:	add	r6, r3, r6
   362ac:	str	r6, [r4, #20]
   362b0:	ldr	r3, [r4, #20]
   362b4:	mov	r2, #34	; 0x22
   362b8:	strb	r2, [r3]
   362bc:	ldrb	r3, [r4, #26]
   362c0:	clz	r3, r3
   362c4:	lsr	r3, r3, #5
   362c8:	ldr	r1, [r4, #20]
   362cc:	add	r2, r1, r3
   362d0:	add	r2, r2, #1
   362d4:	str	r2, [r4, #20]
   362d8:	mov	r2, #58	; 0x3a
   362dc:	strb	r2, [r1, r3]
   362e0:	ldr	r3, [r4, #20]
   362e4:	mov	r2, #32
   362e8:	strb	r2, [r3]
   362ec:	ldrb	r3, [r4, #25]
   362f0:	ldr	r1, [r4, #20]
   362f4:	cmp	r3, #0
   362f8:	addne	r1, r1, #1
   362fc:	str	r1, [r4, #20]
   36300:	mov	r0, r5
   36304:	bl	313dc <flatcc_json_parser_struct_as_root@@Base+0x1424>
   36308:	ldr	r3, [r4, #20]
   3630c:	add	r0, r3, r0
   36310:	str	r0, [r4, #20]
   36314:	pop	{r4, r5, r6, r7, r8, pc}

00036318 <flatcc_json_printer_float_struct_field@@Base>:
   36318:	push	{r4, r5, r6, lr}
   3631c:	vpush	{d8}
   36320:	mov	r4, r0
   36324:	ldr	r5, [sp, #28]
   36328:	add	r3, r2, r3
   3632c:	vldr	s16, [r3]
   36330:	cmp	r1, #0
   36334:	ldrne	r3, [r0, #20]
   36338:	addne	r2, r3, #1
   3633c:	strne	r2, [r0, #20]
   36340:	movne	r2, #44	; 0x2c
   36344:	strbne	r2, [r3]
   36348:	ldrb	r3, [r0, #25]
   3634c:	cmp	r3, #0
   36350:	bne	363a8 <flatcc_json_printer_float_struct_field@@Base+0x90>
   36354:	ldr	r2, [r0, #20]
   36358:	ldr	r3, [r0, #16]
   3635c:	cmp	r2, r3
   36360:	bcs	36408 <flatcc_json_printer_float_struct_field@@Base+0xf0>
   36364:	ldr	r3, [r4, #20]
   36368:	mov	r2, #34	; 0x22
   3636c:	strb	r2, [r3]
   36370:	ldrb	r3, [r4, #26]
   36374:	ldr	r0, [r4, #20]
   36378:	cmp	r3, #0
   3637c:	addeq	r0, r0, #1
   36380:	str	r0, [r4, #20]
   36384:	add	r3, r0, r5
   36388:	ldr	r2, [r4, #16]
   3638c:	cmp	r2, r3
   36390:	bhi	36418 <flatcc_json_printer_float_struct_field@@Base+0x100>
   36394:	mov	r2, r5
   36398:	ldr	r1, [sp, #24]
   3639c:	mov	r0, r4
   363a0:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   363a4:	b	36430 <flatcc_json_printer_float_struct_field@@Base+0x118>
   363a8:	ldr	r3, [r0, #20]
   363ac:	add	r2, r3, #1
   363b0:	str	r2, [r0, #20]
   363b4:	mov	r2, #10
   363b8:	strb	r2, [r3]
   363bc:	ldrb	r3, [r0, #25]
   363c0:	ldr	r6, [r0, #32]
   363c4:	mul	r6, r6, r3
   363c8:	ldr	r0, [r0, #20]
   363cc:	add	r3, r0, r6
   363d0:	ldr	r2, [r4, #16]
   363d4:	cmp	r2, r3
   363d8:	bcc	363f8 <flatcc_json_printer_float_struct_field@@Base+0xe0>
   363dc:	mov	r2, r6
   363e0:	mov	r1, #32
   363e4:	bl	145c4 <memset@plt>
   363e8:	ldr	r3, [r4, #20]
   363ec:	add	r6, r3, r6
   363f0:	str	r6, [r4, #20]
   363f4:	b	36364 <flatcc_json_printer_float_struct_field@@Base+0x4c>
   363f8:	mov	r1, r6
   363fc:	mov	r0, r4
   36400:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   36404:	b	36364 <flatcc_json_printer_float_struct_field@@Base+0x4c>
   36408:	ldr	r3, [r0, #44]	; 0x2c
   3640c:	mov	r1, #0
   36410:	blx	r3
   36414:	b	36364 <flatcc_json_printer_float_struct_field@@Base+0x4c>
   36418:	mov	r2, r5
   3641c:	ldr	r1, [sp, #24]
   36420:	bl	1454c <memcpy@plt>
   36424:	ldr	r3, [r4, #20]
   36428:	add	r5, r3, r5
   3642c:	str	r5, [r4, #20]
   36430:	ldr	r3, [r4, #20]
   36434:	mov	r2, #34	; 0x22
   36438:	strb	r2, [r3]
   3643c:	ldrb	r3, [r4, #26]
   36440:	clz	r3, r3
   36444:	lsr	r3, r3, #5
   36448:	ldr	r1, [r4, #20]
   3644c:	add	r2, r1, r3
   36450:	add	r2, r2, #1
   36454:	str	r2, [r4, #20]
   36458:	mov	r2, #58	; 0x3a
   3645c:	strb	r2, [r1, r3]
   36460:	ldr	r3, [r4, #20]
   36464:	mov	r2, #32
   36468:	strb	r2, [r3]
   3646c:	ldrb	r3, [r4, #25]
   36470:	ldr	r0, [r4, #20]
   36474:	cmp	r3, #0
   36478:	addne	r0, r0, #1
   3647c:	str	r0, [r4, #20]
   36480:	vcvt.f64.f32	d0, s16
   36484:	bl	31ac4 <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   36488:	ldr	r3, [r4, #20]
   3648c:	add	r0, r3, r0
   36490:	str	r0, [r4, #20]
   36494:	vpop	{d8}
   36498:	pop	{r4, r5, r6, pc}

0003649c <flatcc_json_printer_double_struct_field@@Base>:
   3649c:	push	{r4, r5, r6, lr}
   364a0:	vpush	{d8}
   364a4:	mov	r4, r0
   364a8:	ldr	r5, [sp, #28]
   364ac:	add	r3, r2, r3
   364b0:	vldr	d8, [r3]
   364b4:	cmp	r1, #0
   364b8:	ldrne	r3, [r0, #20]
   364bc:	addne	r2, r3, #1
   364c0:	strne	r2, [r0, #20]
   364c4:	movne	r2, #44	; 0x2c
   364c8:	strbne	r2, [r3]
   364cc:	ldrb	r3, [r0, #25]
   364d0:	cmp	r3, #0
   364d4:	bne	3652c <flatcc_json_printer_double_struct_field@@Base+0x90>
   364d8:	ldr	r2, [r0, #20]
   364dc:	ldr	r3, [r0, #16]
   364e0:	cmp	r2, r3
   364e4:	bcs	3658c <flatcc_json_printer_double_struct_field@@Base+0xf0>
   364e8:	ldr	r3, [r4, #20]
   364ec:	mov	r2, #34	; 0x22
   364f0:	strb	r2, [r3]
   364f4:	ldrb	r3, [r4, #26]
   364f8:	ldr	r0, [r4, #20]
   364fc:	cmp	r3, #0
   36500:	addeq	r0, r0, #1
   36504:	str	r0, [r4, #20]
   36508:	add	r3, r0, r5
   3650c:	ldr	r2, [r4, #16]
   36510:	cmp	r2, r3
   36514:	bhi	3659c <flatcc_json_printer_double_struct_field@@Base+0x100>
   36518:	mov	r2, r5
   3651c:	ldr	r1, [sp, #24]
   36520:	mov	r0, r4
   36524:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   36528:	b	365b4 <flatcc_json_printer_double_struct_field@@Base+0x118>
   3652c:	ldr	r3, [r0, #20]
   36530:	add	r2, r3, #1
   36534:	str	r2, [r0, #20]
   36538:	mov	r2, #10
   3653c:	strb	r2, [r3]
   36540:	ldrb	r3, [r0, #25]
   36544:	ldr	r6, [r0, #32]
   36548:	mul	r6, r6, r3
   3654c:	ldr	r0, [r0, #20]
   36550:	add	r3, r0, r6
   36554:	ldr	r2, [r4, #16]
   36558:	cmp	r2, r3
   3655c:	bcc	3657c <flatcc_json_printer_double_struct_field@@Base+0xe0>
   36560:	mov	r2, r6
   36564:	mov	r1, #32
   36568:	bl	145c4 <memset@plt>
   3656c:	ldr	r3, [r4, #20]
   36570:	add	r6, r3, r6
   36574:	str	r6, [r4, #20]
   36578:	b	364e8 <flatcc_json_printer_double_struct_field@@Base+0x4c>
   3657c:	mov	r1, r6
   36580:	mov	r0, r4
   36584:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   36588:	b	364e8 <flatcc_json_printer_double_struct_field@@Base+0x4c>
   3658c:	ldr	r3, [r0, #44]	; 0x2c
   36590:	mov	r1, #0
   36594:	blx	r3
   36598:	b	364e8 <flatcc_json_printer_double_struct_field@@Base+0x4c>
   3659c:	mov	r2, r5
   365a0:	ldr	r1, [sp, #24]
   365a4:	bl	1454c <memcpy@plt>
   365a8:	ldr	r3, [r4, #20]
   365ac:	add	r5, r3, r5
   365b0:	str	r5, [r4, #20]
   365b4:	ldr	r3, [r4, #20]
   365b8:	mov	r2, #34	; 0x22
   365bc:	strb	r2, [r3]
   365c0:	ldrb	r3, [r4, #26]
   365c4:	clz	r3, r3
   365c8:	lsr	r3, r3, #5
   365cc:	ldr	r1, [r4, #20]
   365d0:	add	r2, r1, r3
   365d4:	add	r2, r2, #1
   365d8:	str	r2, [r4, #20]
   365dc:	mov	r2, #58	; 0x3a
   365e0:	strb	r2, [r1, r3]
   365e4:	ldr	r3, [r4, #20]
   365e8:	mov	r2, #32
   365ec:	strb	r2, [r3]
   365f0:	ldrb	r3, [r4, #25]
   365f4:	ldr	r0, [r4, #20]
   365f8:	cmp	r3, #0
   365fc:	addne	r0, r0, #1
   36600:	str	r0, [r4, #20]
   36604:	vmov.f64	d0, d8
   36608:	bl	31ac4 <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   3660c:	ldr	r3, [r4, #20]
   36610:	add	r0, r3, r0
   36614:	str	r0, [r4, #20]
   36618:	vpop	{d8}
   3661c:	pop	{r4, r5, r6, pc}

00036620 <flatcc_json_printer_uint8_enum_struct_field@@Base>:
   36620:	push	{r4, r5, r6, r7, r8, lr}
   36624:	mov	r4, r0
   36628:	ldr	r6, [sp, #28]
   3662c:	ldrb	r5, [r2, r3]
   36630:	cmp	r1, #0
   36634:	ldrne	r3, [r0, #20]
   36638:	addne	r2, r3, #1
   3663c:	strne	r2, [r0, #20]
   36640:	movne	r2, #44	; 0x2c
   36644:	strbne	r2, [r3]
   36648:	ldrb	r3, [r0, #25]
   3664c:	cmp	r3, #0
   36650:	bne	366a8 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x88>
   36654:	ldr	r2, [r0, #20]
   36658:	ldr	r3, [r0, #16]
   3665c:	cmp	r2, r3
   36660:	bcs	36708 <flatcc_json_printer_uint8_enum_struct_field@@Base+0xe8>
   36664:	ldr	r3, [r4, #20]
   36668:	mov	r2, #34	; 0x22
   3666c:	strb	r2, [r3]
   36670:	ldrb	r3, [r4, #26]
   36674:	ldr	r0, [r4, #20]
   36678:	cmp	r3, #0
   3667c:	addeq	r0, r0, #1
   36680:	str	r0, [r4, #20]
   36684:	add	r3, r0, r6
   36688:	ldr	r2, [r4, #16]
   3668c:	cmp	r2, r3
   36690:	bhi	36718 <flatcc_json_printer_uint8_enum_struct_field@@Base+0xf8>
   36694:	mov	r2, r6
   36698:	ldr	r1, [sp, #24]
   3669c:	mov	r0, r4
   366a0:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   366a4:	b	36730 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x110>
   366a8:	ldr	r3, [r0, #20]
   366ac:	add	r2, r3, #1
   366b0:	str	r2, [r0, #20]
   366b4:	mov	r2, #10
   366b8:	strb	r2, [r3]
   366bc:	ldrb	r3, [r0, #25]
   366c0:	ldr	r7, [r0, #32]
   366c4:	mul	r7, r7, r3
   366c8:	ldr	r0, [r0, #20]
   366cc:	add	r3, r0, r7
   366d0:	ldr	r2, [r4, #16]
   366d4:	cmp	r2, r3
   366d8:	bcc	366f8 <flatcc_json_printer_uint8_enum_struct_field@@Base+0xd8>
   366dc:	mov	r2, r7
   366e0:	mov	r1, #32
   366e4:	bl	145c4 <memset@plt>
   366e8:	ldr	r3, [r4, #20]
   366ec:	add	r7, r3, r7
   366f0:	str	r7, [r4, #20]
   366f4:	b	36664 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x44>
   366f8:	mov	r1, r7
   366fc:	mov	r0, r4
   36700:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   36704:	b	36664 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x44>
   36708:	ldr	r3, [r0, #44]	; 0x2c
   3670c:	mov	r1, #0
   36710:	blx	r3
   36714:	b	36664 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x44>
   36718:	mov	r2, r6
   3671c:	ldr	r1, [sp, #24]
   36720:	bl	1454c <memcpy@plt>
   36724:	ldr	r3, [r4, #20]
   36728:	add	r6, r3, r6
   3672c:	str	r6, [r4, #20]
   36730:	ldr	r3, [r4, #20]
   36734:	mov	r2, #34	; 0x22
   36738:	strb	r2, [r3]
   3673c:	ldrb	r3, [r4, #26]
   36740:	clz	r3, r3
   36744:	lsr	r3, r3, #5
   36748:	ldr	r1, [r4, #20]
   3674c:	add	r2, r1, r3
   36750:	add	r2, r2, #1
   36754:	str	r2, [r4, #20]
   36758:	mov	r2, #58	; 0x3a
   3675c:	strb	r2, [r1, r3]
   36760:	ldr	r3, [r4, #20]
   36764:	mov	r2, #32
   36768:	strb	r2, [r3]
   3676c:	ldrb	r3, [r4, #25]
   36770:	ldr	r1, [r4, #20]
   36774:	cmp	r3, #0
   36778:	addne	r1, r1, #1
   3677c:	str	r1, [r4, #20]
   36780:	ldrb	r3, [r4, #27]
   36784:	cmp	r3, #0
   36788:	bne	367a0 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x180>
   3678c:	mov	r1, r5
   36790:	mov	r0, r4
   36794:	ldr	r3, [sp, #32]
   36798:	blx	r3
   3679c:	pop	{r4, r5, r6, r7, r8, pc}
   367a0:	mov	r0, r5
   367a4:	bl	30090 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   367a8:	ldr	r3, [r4, #20]
   367ac:	add	r0, r3, r0
   367b0:	str	r0, [r4, #20]
   367b4:	pop	{r4, r5, r6, r7, r8, pc}

000367b8 <flatcc_json_printer_uint16_enum_struct_field@@Base>:
   367b8:	push	{r4, r5, r6, r7, r8, lr}
   367bc:	mov	r4, r0
   367c0:	ldr	r6, [sp, #28]
   367c4:	ldrh	r5, [r2, r3]
   367c8:	cmp	r1, #0
   367cc:	ldrne	r3, [r0, #20]
   367d0:	addne	r2, r3, #1
   367d4:	strne	r2, [r0, #20]
   367d8:	movne	r2, #44	; 0x2c
   367dc:	strbne	r2, [r3]
   367e0:	ldrb	r3, [r0, #25]
   367e4:	cmp	r3, #0
   367e8:	bne	36840 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x88>
   367ec:	ldr	r2, [r0, #20]
   367f0:	ldr	r3, [r0, #16]
   367f4:	cmp	r2, r3
   367f8:	bcs	368a0 <flatcc_json_printer_uint16_enum_struct_field@@Base+0xe8>
   367fc:	ldr	r3, [r4, #20]
   36800:	mov	r2, #34	; 0x22
   36804:	strb	r2, [r3]
   36808:	ldrb	r3, [r4, #26]
   3680c:	ldr	r0, [r4, #20]
   36810:	cmp	r3, #0
   36814:	addeq	r0, r0, #1
   36818:	str	r0, [r4, #20]
   3681c:	add	r3, r0, r6
   36820:	ldr	r2, [r4, #16]
   36824:	cmp	r2, r3
   36828:	bhi	368b0 <flatcc_json_printer_uint16_enum_struct_field@@Base+0xf8>
   3682c:	mov	r2, r6
   36830:	ldr	r1, [sp, #24]
   36834:	mov	r0, r4
   36838:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3683c:	b	368c8 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x110>
   36840:	ldr	r3, [r0, #20]
   36844:	add	r2, r3, #1
   36848:	str	r2, [r0, #20]
   3684c:	mov	r2, #10
   36850:	strb	r2, [r3]
   36854:	ldrb	r3, [r0, #25]
   36858:	ldr	r7, [r0, #32]
   3685c:	mul	r7, r7, r3
   36860:	ldr	r0, [r0, #20]
   36864:	add	r3, r0, r7
   36868:	ldr	r2, [r4, #16]
   3686c:	cmp	r2, r3
   36870:	bcc	36890 <flatcc_json_printer_uint16_enum_struct_field@@Base+0xd8>
   36874:	mov	r2, r7
   36878:	mov	r1, #32
   3687c:	bl	145c4 <memset@plt>
   36880:	ldr	r3, [r4, #20]
   36884:	add	r7, r3, r7
   36888:	str	r7, [r4, #20]
   3688c:	b	367fc <flatcc_json_printer_uint16_enum_struct_field@@Base+0x44>
   36890:	mov	r1, r7
   36894:	mov	r0, r4
   36898:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3689c:	b	367fc <flatcc_json_printer_uint16_enum_struct_field@@Base+0x44>
   368a0:	ldr	r3, [r0, #44]	; 0x2c
   368a4:	mov	r1, #0
   368a8:	blx	r3
   368ac:	b	367fc <flatcc_json_printer_uint16_enum_struct_field@@Base+0x44>
   368b0:	mov	r2, r6
   368b4:	ldr	r1, [sp, #24]
   368b8:	bl	1454c <memcpy@plt>
   368bc:	ldr	r3, [r4, #20]
   368c0:	add	r6, r3, r6
   368c4:	str	r6, [r4, #20]
   368c8:	ldr	r3, [r4, #20]
   368cc:	mov	r2, #34	; 0x22
   368d0:	strb	r2, [r3]
   368d4:	ldrb	r3, [r4, #26]
   368d8:	clz	r3, r3
   368dc:	lsr	r3, r3, #5
   368e0:	ldr	r1, [r4, #20]
   368e4:	add	r2, r1, r3
   368e8:	add	r2, r2, #1
   368ec:	str	r2, [r4, #20]
   368f0:	mov	r2, #58	; 0x3a
   368f4:	strb	r2, [r1, r3]
   368f8:	ldr	r3, [r4, #20]
   368fc:	mov	r2, #32
   36900:	strb	r2, [r3]
   36904:	ldrb	r3, [r4, #25]
   36908:	ldr	r1, [r4, #20]
   3690c:	cmp	r3, #0
   36910:	addne	r1, r1, #1
   36914:	str	r1, [r4, #20]
   36918:	ldrb	r3, [r4, #27]
   3691c:	cmp	r3, #0
   36920:	bne	36938 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x180>
   36924:	mov	r1, r5
   36928:	mov	r0, r4
   3692c:	ldr	r3, [sp, #32]
   36930:	blx	r3
   36934:	pop	{r4, r5, r6, r7, r8, pc}
   36938:	mov	r0, r5
   3693c:	bl	30150 <flatcc_json_parser_struct_as_root@@Base+0x198>
   36940:	ldr	r3, [r4, #20]
   36944:	add	r0, r3, r0
   36948:	str	r0, [r4, #20]
   3694c:	pop	{r4, r5, r6, r7, r8, pc}

00036950 <flatcc_json_printer_uint32_enum_struct_field@@Base>:
   36950:	push	{r4, r5, r6, r7, r8, lr}
   36954:	mov	r4, r0
   36958:	ldr	r6, [sp, #28]
   3695c:	ldr	r5, [r2, r3]
   36960:	cmp	r1, #0
   36964:	ldrne	r3, [r0, #20]
   36968:	addne	r2, r3, #1
   3696c:	strne	r2, [r0, #20]
   36970:	movne	r2, #44	; 0x2c
   36974:	strbne	r2, [r3]
   36978:	ldrb	r3, [r0, #25]
   3697c:	cmp	r3, #0
   36980:	bne	369d8 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x88>
   36984:	ldr	r2, [r0, #20]
   36988:	ldr	r3, [r0, #16]
   3698c:	cmp	r2, r3
   36990:	bcs	36a38 <flatcc_json_printer_uint32_enum_struct_field@@Base+0xe8>
   36994:	ldr	r3, [r4, #20]
   36998:	mov	r2, #34	; 0x22
   3699c:	strb	r2, [r3]
   369a0:	ldrb	r3, [r4, #26]
   369a4:	ldr	r0, [r4, #20]
   369a8:	cmp	r3, #0
   369ac:	addeq	r0, r0, #1
   369b0:	str	r0, [r4, #20]
   369b4:	add	r3, r0, r6
   369b8:	ldr	r2, [r4, #16]
   369bc:	cmp	r2, r3
   369c0:	bhi	36a48 <flatcc_json_printer_uint32_enum_struct_field@@Base+0xf8>
   369c4:	mov	r2, r6
   369c8:	ldr	r1, [sp, #24]
   369cc:	mov	r0, r4
   369d0:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   369d4:	b	36a60 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x110>
   369d8:	ldr	r3, [r0, #20]
   369dc:	add	r2, r3, #1
   369e0:	str	r2, [r0, #20]
   369e4:	mov	r2, #10
   369e8:	strb	r2, [r3]
   369ec:	ldrb	r3, [r0, #25]
   369f0:	ldr	r7, [r0, #32]
   369f4:	mul	r7, r7, r3
   369f8:	ldr	r0, [r0, #20]
   369fc:	add	r3, r0, r7
   36a00:	ldr	r2, [r4, #16]
   36a04:	cmp	r2, r3
   36a08:	bcc	36a28 <flatcc_json_printer_uint32_enum_struct_field@@Base+0xd8>
   36a0c:	mov	r2, r7
   36a10:	mov	r1, #32
   36a14:	bl	145c4 <memset@plt>
   36a18:	ldr	r3, [r4, #20]
   36a1c:	add	r7, r3, r7
   36a20:	str	r7, [r4, #20]
   36a24:	b	36994 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x44>
   36a28:	mov	r1, r7
   36a2c:	mov	r0, r4
   36a30:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   36a34:	b	36994 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x44>
   36a38:	ldr	r3, [r0, #44]	; 0x2c
   36a3c:	mov	r1, #0
   36a40:	blx	r3
   36a44:	b	36994 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x44>
   36a48:	mov	r2, r6
   36a4c:	ldr	r1, [sp, #24]
   36a50:	bl	1454c <memcpy@plt>
   36a54:	ldr	r3, [r4, #20]
   36a58:	add	r6, r3, r6
   36a5c:	str	r6, [r4, #20]
   36a60:	ldr	r3, [r4, #20]
   36a64:	mov	r2, #34	; 0x22
   36a68:	strb	r2, [r3]
   36a6c:	ldrb	r3, [r4, #26]
   36a70:	clz	r3, r3
   36a74:	lsr	r3, r3, #5
   36a78:	ldr	r1, [r4, #20]
   36a7c:	add	r2, r1, r3
   36a80:	add	r2, r2, #1
   36a84:	str	r2, [r4, #20]
   36a88:	mov	r2, #58	; 0x3a
   36a8c:	strb	r2, [r1, r3]
   36a90:	ldr	r3, [r4, #20]
   36a94:	mov	r2, #32
   36a98:	strb	r2, [r3]
   36a9c:	ldrb	r3, [r4, #25]
   36aa0:	ldr	r1, [r4, #20]
   36aa4:	cmp	r3, #0
   36aa8:	addne	r1, r1, #1
   36aac:	str	r1, [r4, #20]
   36ab0:	ldrb	r3, [r4, #27]
   36ab4:	cmp	r3, #0
   36ab8:	bne	36ad0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x180>
   36abc:	mov	r1, r5
   36ac0:	mov	r0, r4
   36ac4:	ldr	r3, [sp, #32]
   36ac8:	blx	r3
   36acc:	pop	{r4, r5, r6, r7, r8, pc}
   36ad0:	mov	r0, r5
   36ad4:	bl	302d4 <flatcc_json_parser_struct_as_root@@Base+0x31c>
   36ad8:	ldr	r3, [r4, #20]
   36adc:	add	r0, r3, r0
   36ae0:	str	r0, [r4, #20]
   36ae4:	pop	{r4, r5, r6, r7, r8, pc}

00036ae8 <flatcc_json_printer_uint64_enum_struct_field@@Base>:
   36ae8:	push	{r4, r5, r6, r7, r8, lr}
   36aec:	mov	r4, r0
   36af0:	ldr	r5, [sp, #28]
   36af4:	ldrd	r6, [r2, r3]
   36af8:	cmp	r1, #0
   36afc:	ldrne	r3, [r0, #20]
   36b00:	addne	r2, r3, #1
   36b04:	strne	r2, [r0, #20]
   36b08:	movne	r2, #44	; 0x2c
   36b0c:	strbne	r2, [r3]
   36b10:	ldrb	r3, [r0, #25]
   36b14:	cmp	r3, #0
   36b18:	bne	36b70 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x88>
   36b1c:	ldr	r2, [r0, #20]
   36b20:	ldr	r3, [r0, #16]
   36b24:	cmp	r2, r3
   36b28:	bcs	36bd0 <flatcc_json_printer_uint64_enum_struct_field@@Base+0xe8>
   36b2c:	ldr	r3, [r4, #20]
   36b30:	mov	r2, #34	; 0x22
   36b34:	strb	r2, [r3]
   36b38:	ldrb	r3, [r4, #26]
   36b3c:	ldr	r0, [r4, #20]
   36b40:	cmp	r3, #0
   36b44:	addeq	r0, r0, #1
   36b48:	str	r0, [r4, #20]
   36b4c:	add	r3, r0, r5
   36b50:	ldr	r2, [r4, #16]
   36b54:	cmp	r2, r3
   36b58:	bhi	36be0 <flatcc_json_printer_uint64_enum_struct_field@@Base+0xf8>
   36b5c:	mov	r2, r5
   36b60:	ldr	r1, [sp, #24]
   36b64:	mov	r0, r4
   36b68:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   36b6c:	b	36bf8 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x110>
   36b70:	ldr	r3, [r0, #20]
   36b74:	add	r2, r3, #1
   36b78:	str	r2, [r0, #20]
   36b7c:	mov	r2, #10
   36b80:	strb	r2, [r3]
   36b84:	ldrb	r3, [r0, #25]
   36b88:	ldr	r8, [r0, #32]
   36b8c:	mul	r8, r8, r3
   36b90:	ldr	r0, [r0, #20]
   36b94:	add	r3, r0, r8
   36b98:	ldr	r2, [r4, #16]
   36b9c:	cmp	r2, r3
   36ba0:	bcc	36bc0 <flatcc_json_printer_uint64_enum_struct_field@@Base+0xd8>
   36ba4:	mov	r2, r8
   36ba8:	mov	r1, #32
   36bac:	bl	145c4 <memset@plt>
   36bb0:	ldr	r3, [r4, #20]
   36bb4:	add	r8, r3, r8
   36bb8:	str	r8, [r4, #20]
   36bbc:	b	36b2c <flatcc_json_printer_uint64_enum_struct_field@@Base+0x44>
   36bc0:	mov	r1, r8
   36bc4:	mov	r0, r4
   36bc8:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   36bcc:	b	36b2c <flatcc_json_printer_uint64_enum_struct_field@@Base+0x44>
   36bd0:	ldr	r3, [r0, #44]	; 0x2c
   36bd4:	mov	r1, #0
   36bd8:	blx	r3
   36bdc:	b	36b2c <flatcc_json_printer_uint64_enum_struct_field@@Base+0x44>
   36be0:	mov	r2, r5
   36be4:	ldr	r1, [sp, #24]
   36be8:	bl	1454c <memcpy@plt>
   36bec:	ldr	r3, [r4, #20]
   36bf0:	add	r5, r3, r5
   36bf4:	str	r5, [r4, #20]
   36bf8:	ldr	r3, [r4, #20]
   36bfc:	mov	r2, #34	; 0x22
   36c00:	strb	r2, [r3]
   36c04:	ldrb	r3, [r4, #26]
   36c08:	clz	r3, r3
   36c0c:	lsr	r3, r3, #5
   36c10:	ldr	r1, [r4, #20]
   36c14:	add	r2, r1, r3
   36c18:	add	r2, r2, #1
   36c1c:	str	r2, [r4, #20]
   36c20:	mov	r2, #58	; 0x3a
   36c24:	strb	r2, [r1, r3]
   36c28:	ldr	r3, [r4, #20]
   36c2c:	mov	r2, #32
   36c30:	strb	r2, [r3]
   36c34:	ldrb	r3, [r4, #25]
   36c38:	ldr	r2, [r4, #20]
   36c3c:	cmp	r3, #0
   36c40:	addne	r2, r2, #1
   36c44:	str	r2, [r4, #20]
   36c48:	ldrb	r3, [r4, #27]
   36c4c:	cmp	r3, #0
   36c50:	bne	36c6c <flatcc_json_printer_uint64_enum_struct_field@@Base+0x184>
   36c54:	mov	r2, r6
   36c58:	mov	r3, r7
   36c5c:	mov	r0, r4
   36c60:	ldr	r1, [sp, #32]
   36c64:	blx	r1
   36c68:	pop	{r4, r5, r6, r7, r8, pc}
   36c6c:	mov	r0, r6
   36c70:	mov	r1, r7
   36c74:	bl	30614 <flatcc_json_parser_struct_as_root@@Base+0x65c>
   36c78:	ldr	r3, [r4, #20]
   36c7c:	add	r0, r3, r0
   36c80:	str	r0, [r4, #20]
   36c84:	pop	{r4, r5, r6, r7, r8, pc}

00036c88 <flatcc_json_printer_int8_enum_struct_field@@Base>:
   36c88:	push	{r4, r5, r6, r7, r8, lr}
   36c8c:	mov	r4, r0
   36c90:	ldr	r6, [sp, #28]
   36c94:	ldrsb	r5, [r2, r3]
   36c98:	cmp	r1, #0
   36c9c:	ldrne	r3, [r0, #20]
   36ca0:	addne	r2, r3, #1
   36ca4:	strne	r2, [r0, #20]
   36ca8:	movne	r2, #44	; 0x2c
   36cac:	strbne	r2, [r3]
   36cb0:	ldrb	r3, [r0, #25]
   36cb4:	cmp	r3, #0
   36cb8:	bne	36d10 <flatcc_json_printer_int8_enum_struct_field@@Base+0x88>
   36cbc:	ldr	r2, [r0, #20]
   36cc0:	ldr	r3, [r0, #16]
   36cc4:	cmp	r2, r3
   36cc8:	bcs	36d70 <flatcc_json_printer_int8_enum_struct_field@@Base+0xe8>
   36ccc:	ldr	r3, [r4, #20]
   36cd0:	mov	r2, #34	; 0x22
   36cd4:	strb	r2, [r3]
   36cd8:	ldrb	r3, [r4, #26]
   36cdc:	ldr	r0, [r4, #20]
   36ce0:	cmp	r3, #0
   36ce4:	addeq	r0, r0, #1
   36ce8:	str	r0, [r4, #20]
   36cec:	add	r3, r0, r6
   36cf0:	ldr	r2, [r4, #16]
   36cf4:	cmp	r2, r3
   36cf8:	bhi	36d80 <flatcc_json_printer_int8_enum_struct_field@@Base+0xf8>
   36cfc:	mov	r2, r6
   36d00:	ldr	r1, [sp, #24]
   36d04:	mov	r0, r4
   36d08:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   36d0c:	b	36d98 <flatcc_json_printer_int8_enum_struct_field@@Base+0x110>
   36d10:	ldr	r3, [r0, #20]
   36d14:	add	r2, r3, #1
   36d18:	str	r2, [r0, #20]
   36d1c:	mov	r2, #10
   36d20:	strb	r2, [r3]
   36d24:	ldrb	r3, [r0, #25]
   36d28:	ldr	r7, [r0, #32]
   36d2c:	mul	r7, r7, r3
   36d30:	ldr	r0, [r0, #20]
   36d34:	add	r3, r0, r7
   36d38:	ldr	r2, [r4, #16]
   36d3c:	cmp	r2, r3
   36d40:	bcc	36d60 <flatcc_json_printer_int8_enum_struct_field@@Base+0xd8>
   36d44:	mov	r2, r7
   36d48:	mov	r1, #32
   36d4c:	bl	145c4 <memset@plt>
   36d50:	ldr	r3, [r4, #20]
   36d54:	add	r7, r3, r7
   36d58:	str	r7, [r4, #20]
   36d5c:	b	36ccc <flatcc_json_printer_int8_enum_struct_field@@Base+0x44>
   36d60:	mov	r1, r7
   36d64:	mov	r0, r4
   36d68:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   36d6c:	b	36ccc <flatcc_json_printer_int8_enum_struct_field@@Base+0x44>
   36d70:	ldr	r3, [r0, #44]	; 0x2c
   36d74:	mov	r1, #0
   36d78:	blx	r3
   36d7c:	b	36ccc <flatcc_json_printer_int8_enum_struct_field@@Base+0x44>
   36d80:	mov	r2, r6
   36d84:	ldr	r1, [sp, #24]
   36d88:	bl	1454c <memcpy@plt>
   36d8c:	ldr	r3, [r4, #20]
   36d90:	add	r6, r3, r6
   36d94:	str	r6, [r4, #20]
   36d98:	ldr	r3, [r4, #20]
   36d9c:	mov	r2, #34	; 0x22
   36da0:	strb	r2, [r3]
   36da4:	ldrb	r3, [r4, #26]
   36da8:	clz	r3, r3
   36dac:	lsr	r3, r3, #5
   36db0:	ldr	r1, [r4, #20]
   36db4:	add	r2, r1, r3
   36db8:	add	r2, r2, #1
   36dbc:	str	r2, [r4, #20]
   36dc0:	mov	r2, #58	; 0x3a
   36dc4:	strb	r2, [r1, r3]
   36dc8:	ldr	r3, [r4, #20]
   36dcc:	mov	r2, #32
   36dd0:	strb	r2, [r3]
   36dd4:	ldrb	r3, [r4, #25]
   36dd8:	ldr	r1, [r4, #20]
   36ddc:	cmp	r3, #0
   36de0:	addne	r1, r1, #1
   36de4:	str	r1, [r4, #20]
   36de8:	ldrb	r3, [r4, #27]
   36dec:	cmp	r3, #0
   36df0:	bne	36e08 <flatcc_json_printer_int8_enum_struct_field@@Base+0x180>
   36df4:	mov	r1, r5
   36df8:	mov	r0, r4
   36dfc:	ldr	r3, [sp, #32]
   36e00:	blx	r3
   36e04:	pop	{r4, r5, r6, r7, r8, pc}
   36e08:	mov	r0, r5
   36e0c:	bl	30c98 <flatcc_json_parser_struct_as_root@@Base+0xce0>
   36e10:	ldr	r3, [r4, #20]
   36e14:	add	r0, r3, r0
   36e18:	str	r0, [r4, #20]
   36e1c:	pop	{r4, r5, r6, r7, r8, pc}

00036e20 <flatcc_json_printer_int16_enum_struct_field@@Base>:
   36e20:	push	{r4, r5, r6, r7, r8, lr}
   36e24:	mov	r4, r0
   36e28:	ldr	r6, [sp, #28]
   36e2c:	ldrsh	r5, [r2, r3]
   36e30:	cmp	r1, #0
   36e34:	ldrne	r3, [r0, #20]
   36e38:	addne	r2, r3, #1
   36e3c:	strne	r2, [r0, #20]
   36e40:	movne	r2, #44	; 0x2c
   36e44:	strbne	r2, [r3]
   36e48:	ldrb	r3, [r0, #25]
   36e4c:	cmp	r3, #0
   36e50:	bne	36ea8 <flatcc_json_printer_int16_enum_struct_field@@Base+0x88>
   36e54:	ldr	r2, [r0, #20]
   36e58:	ldr	r3, [r0, #16]
   36e5c:	cmp	r2, r3
   36e60:	bcs	36f08 <flatcc_json_printer_int16_enum_struct_field@@Base+0xe8>
   36e64:	ldr	r3, [r4, #20]
   36e68:	mov	r2, #34	; 0x22
   36e6c:	strb	r2, [r3]
   36e70:	ldrb	r3, [r4, #26]
   36e74:	ldr	r0, [r4, #20]
   36e78:	cmp	r3, #0
   36e7c:	addeq	r0, r0, #1
   36e80:	str	r0, [r4, #20]
   36e84:	add	r3, r0, r6
   36e88:	ldr	r2, [r4, #16]
   36e8c:	cmp	r2, r3
   36e90:	bhi	36f18 <flatcc_json_printer_int16_enum_struct_field@@Base+0xf8>
   36e94:	mov	r2, r6
   36e98:	ldr	r1, [sp, #24]
   36e9c:	mov	r0, r4
   36ea0:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   36ea4:	b	36f30 <flatcc_json_printer_int16_enum_struct_field@@Base+0x110>
   36ea8:	ldr	r3, [r0, #20]
   36eac:	add	r2, r3, #1
   36eb0:	str	r2, [r0, #20]
   36eb4:	mov	r2, #10
   36eb8:	strb	r2, [r3]
   36ebc:	ldrb	r3, [r0, #25]
   36ec0:	ldr	r7, [r0, #32]
   36ec4:	mul	r7, r7, r3
   36ec8:	ldr	r0, [r0, #20]
   36ecc:	add	r3, r0, r7
   36ed0:	ldr	r2, [r4, #16]
   36ed4:	cmp	r2, r3
   36ed8:	bcc	36ef8 <flatcc_json_printer_int16_enum_struct_field@@Base+0xd8>
   36edc:	mov	r2, r7
   36ee0:	mov	r1, #32
   36ee4:	bl	145c4 <memset@plt>
   36ee8:	ldr	r3, [r4, #20]
   36eec:	add	r7, r3, r7
   36ef0:	str	r7, [r4, #20]
   36ef4:	b	36e64 <flatcc_json_printer_int16_enum_struct_field@@Base+0x44>
   36ef8:	mov	r1, r7
   36efc:	mov	r0, r4
   36f00:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   36f04:	b	36e64 <flatcc_json_printer_int16_enum_struct_field@@Base+0x44>
   36f08:	ldr	r3, [r0, #44]	; 0x2c
   36f0c:	mov	r1, #0
   36f10:	blx	r3
   36f14:	b	36e64 <flatcc_json_printer_int16_enum_struct_field@@Base+0x44>
   36f18:	mov	r2, r6
   36f1c:	ldr	r1, [sp, #24]
   36f20:	bl	1454c <memcpy@plt>
   36f24:	ldr	r3, [r4, #20]
   36f28:	add	r6, r3, r6
   36f2c:	str	r6, [r4, #20]
   36f30:	ldr	r3, [r4, #20]
   36f34:	mov	r2, #34	; 0x22
   36f38:	strb	r2, [r3]
   36f3c:	ldrb	r3, [r4, #26]
   36f40:	clz	r3, r3
   36f44:	lsr	r3, r3, #5
   36f48:	ldr	r1, [r4, #20]
   36f4c:	add	r2, r1, r3
   36f50:	add	r2, r2, #1
   36f54:	str	r2, [r4, #20]
   36f58:	mov	r2, #58	; 0x3a
   36f5c:	strb	r2, [r1, r3]
   36f60:	ldr	r3, [r4, #20]
   36f64:	mov	r2, #32
   36f68:	strb	r2, [r3]
   36f6c:	ldrb	r3, [r4, #25]
   36f70:	ldr	r1, [r4, #20]
   36f74:	cmp	r3, #0
   36f78:	addne	r1, r1, #1
   36f7c:	str	r1, [r4, #20]
   36f80:	ldrb	r3, [r4, #27]
   36f84:	cmp	r3, #0
   36f88:	bne	36fa0 <flatcc_json_printer_int16_enum_struct_field@@Base+0x180>
   36f8c:	mov	r1, r5
   36f90:	mov	r0, r4
   36f94:	ldr	r3, [sp, #32]
   36f98:	blx	r3
   36f9c:	pop	{r4, r5, r6, r7, r8, pc}
   36fa0:	mov	r0, r5
   36fa4:	bl	30cc8 <flatcc_json_parser_struct_as_root@@Base+0xd10>
   36fa8:	ldr	r3, [r4, #20]
   36fac:	add	r0, r3, r0
   36fb0:	str	r0, [r4, #20]
   36fb4:	pop	{r4, r5, r6, r7, r8, pc}

00036fb8 <flatcc_json_printer_int32_enum_struct_field@@Base>:
   36fb8:	push	{r4, r5, r6, r7, r8, lr}
   36fbc:	mov	r4, r0
   36fc0:	ldr	r6, [sp, #28]
   36fc4:	ldr	r5, [r2, r3]
   36fc8:	cmp	r1, #0
   36fcc:	ldrne	r3, [r0, #20]
   36fd0:	addne	r2, r3, #1
   36fd4:	strne	r2, [r0, #20]
   36fd8:	movne	r2, #44	; 0x2c
   36fdc:	strbne	r2, [r3]
   36fe0:	ldrb	r3, [r0, #25]
   36fe4:	cmp	r3, #0
   36fe8:	bne	37040 <flatcc_json_printer_int32_enum_struct_field@@Base+0x88>
   36fec:	ldr	r2, [r0, #20]
   36ff0:	ldr	r3, [r0, #16]
   36ff4:	cmp	r2, r3
   36ff8:	bcs	370a0 <flatcc_json_printer_int32_enum_struct_field@@Base+0xe8>
   36ffc:	ldr	r3, [r4, #20]
   37000:	mov	r2, #34	; 0x22
   37004:	strb	r2, [r3]
   37008:	ldrb	r3, [r4, #26]
   3700c:	ldr	r0, [r4, #20]
   37010:	cmp	r3, #0
   37014:	addeq	r0, r0, #1
   37018:	str	r0, [r4, #20]
   3701c:	add	r3, r0, r6
   37020:	ldr	r2, [r4, #16]
   37024:	cmp	r2, r3
   37028:	bhi	370b0 <flatcc_json_printer_int32_enum_struct_field@@Base+0xf8>
   3702c:	mov	r2, r6
   37030:	ldr	r1, [sp, #24]
   37034:	mov	r0, r4
   37038:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3703c:	b	370c8 <flatcc_json_printer_int32_enum_struct_field@@Base+0x110>
   37040:	ldr	r3, [r0, #20]
   37044:	add	r2, r3, #1
   37048:	str	r2, [r0, #20]
   3704c:	mov	r2, #10
   37050:	strb	r2, [r3]
   37054:	ldrb	r3, [r0, #25]
   37058:	ldr	r7, [r0, #32]
   3705c:	mul	r7, r7, r3
   37060:	ldr	r0, [r0, #20]
   37064:	add	r3, r0, r7
   37068:	ldr	r2, [r4, #16]
   3706c:	cmp	r2, r3
   37070:	bcc	37090 <flatcc_json_printer_int32_enum_struct_field@@Base+0xd8>
   37074:	mov	r2, r7
   37078:	mov	r1, #32
   3707c:	bl	145c4 <memset@plt>
   37080:	ldr	r3, [r4, #20]
   37084:	add	r7, r3, r7
   37088:	str	r7, [r4, #20]
   3708c:	b	36ffc <flatcc_json_printer_int32_enum_struct_field@@Base+0x44>
   37090:	mov	r1, r7
   37094:	mov	r0, r4
   37098:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3709c:	b	36ffc <flatcc_json_printer_int32_enum_struct_field@@Base+0x44>
   370a0:	ldr	r3, [r0, #44]	; 0x2c
   370a4:	mov	r1, #0
   370a8:	blx	r3
   370ac:	b	36ffc <flatcc_json_printer_int32_enum_struct_field@@Base+0x44>
   370b0:	mov	r2, r6
   370b4:	ldr	r1, [sp, #24]
   370b8:	bl	1454c <memcpy@plt>
   370bc:	ldr	r3, [r4, #20]
   370c0:	add	r6, r3, r6
   370c4:	str	r6, [r4, #20]
   370c8:	ldr	r3, [r4, #20]
   370cc:	mov	r2, #34	; 0x22
   370d0:	strb	r2, [r3]
   370d4:	ldrb	r3, [r4, #26]
   370d8:	clz	r3, r3
   370dc:	lsr	r3, r3, #5
   370e0:	ldr	r1, [r4, #20]
   370e4:	add	r2, r1, r3
   370e8:	add	r2, r2, #1
   370ec:	str	r2, [r4, #20]
   370f0:	mov	r2, #58	; 0x3a
   370f4:	strb	r2, [r1, r3]
   370f8:	ldr	r3, [r4, #20]
   370fc:	mov	r2, #32
   37100:	strb	r2, [r3]
   37104:	ldrb	r3, [r4, #25]
   37108:	ldr	r1, [r4, #20]
   3710c:	cmp	r3, #0
   37110:	addne	r1, r1, #1
   37114:	str	r1, [r4, #20]
   37118:	ldrb	r3, [r4, #27]
   3711c:	cmp	r3, #0
   37120:	bne	37138 <flatcc_json_printer_int32_enum_struct_field@@Base+0x180>
   37124:	mov	r1, r5
   37128:	mov	r0, r4
   3712c:	ldr	r3, [sp, #32]
   37130:	blx	r3
   37134:	pop	{r4, r5, r6, r7, r8, pc}
   37138:	mov	r0, r5
   3713c:	bl	30cf8 <flatcc_json_parser_struct_as_root@@Base+0xd40>
   37140:	ldr	r3, [r4, #20]
   37144:	add	r0, r3, r0
   37148:	str	r0, [r4, #20]
   3714c:	pop	{r4, r5, r6, r7, r8, pc}

00037150 <flatcc_json_printer_int64_enum_struct_field@@Base>:
   37150:	push	{r4, r5, r6, r7, r8, lr}
   37154:	mov	r4, r0
   37158:	ldr	r5, [sp, #28]
   3715c:	ldrd	r6, [r2, r3]
   37160:	cmp	r1, #0
   37164:	ldrne	r3, [r0, #20]
   37168:	addne	r2, r3, #1
   3716c:	strne	r2, [r0, #20]
   37170:	movne	r2, #44	; 0x2c
   37174:	strbne	r2, [r3]
   37178:	ldrb	r3, [r0, #25]
   3717c:	cmp	r3, #0
   37180:	bne	371d8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x88>
   37184:	ldr	r2, [r0, #20]
   37188:	ldr	r3, [r0, #16]
   3718c:	cmp	r2, r3
   37190:	bcs	37238 <flatcc_json_printer_int64_enum_struct_field@@Base+0xe8>
   37194:	ldr	r3, [r4, #20]
   37198:	mov	r2, #34	; 0x22
   3719c:	strb	r2, [r3]
   371a0:	ldrb	r3, [r4, #26]
   371a4:	ldr	r0, [r4, #20]
   371a8:	cmp	r3, #0
   371ac:	addeq	r0, r0, #1
   371b0:	str	r0, [r4, #20]
   371b4:	add	r3, r0, r5
   371b8:	ldr	r2, [r4, #16]
   371bc:	cmp	r2, r3
   371c0:	bhi	37248 <flatcc_json_printer_int64_enum_struct_field@@Base+0xf8>
   371c4:	mov	r2, r5
   371c8:	ldr	r1, [sp, #24]
   371cc:	mov	r0, r4
   371d0:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   371d4:	b	37260 <flatcc_json_printer_int64_enum_struct_field@@Base+0x110>
   371d8:	ldr	r3, [r0, #20]
   371dc:	add	r2, r3, #1
   371e0:	str	r2, [r0, #20]
   371e4:	mov	r2, #10
   371e8:	strb	r2, [r3]
   371ec:	ldrb	r3, [r0, #25]
   371f0:	ldr	r8, [r0, #32]
   371f4:	mul	r8, r8, r3
   371f8:	ldr	r0, [r0, #20]
   371fc:	add	r3, r0, r8
   37200:	ldr	r2, [r4, #16]
   37204:	cmp	r2, r3
   37208:	bcc	37228 <flatcc_json_printer_int64_enum_struct_field@@Base+0xd8>
   3720c:	mov	r2, r8
   37210:	mov	r1, #32
   37214:	bl	145c4 <memset@plt>
   37218:	ldr	r3, [r4, #20]
   3721c:	add	r8, r3, r8
   37220:	str	r8, [r4, #20]
   37224:	b	37194 <flatcc_json_printer_int64_enum_struct_field@@Base+0x44>
   37228:	mov	r1, r8
   3722c:	mov	r0, r4
   37230:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   37234:	b	37194 <flatcc_json_printer_int64_enum_struct_field@@Base+0x44>
   37238:	ldr	r3, [r0, #44]	; 0x2c
   3723c:	mov	r1, #0
   37240:	blx	r3
   37244:	b	37194 <flatcc_json_printer_int64_enum_struct_field@@Base+0x44>
   37248:	mov	r2, r5
   3724c:	ldr	r1, [sp, #24]
   37250:	bl	1454c <memcpy@plt>
   37254:	ldr	r3, [r4, #20]
   37258:	add	r5, r3, r5
   3725c:	str	r5, [r4, #20]
   37260:	ldr	r3, [r4, #20]
   37264:	mov	r2, #34	; 0x22
   37268:	strb	r2, [r3]
   3726c:	ldrb	r3, [r4, #26]
   37270:	clz	r3, r3
   37274:	lsr	r3, r3, #5
   37278:	ldr	r1, [r4, #20]
   3727c:	add	r2, r1, r3
   37280:	add	r2, r2, #1
   37284:	str	r2, [r4, #20]
   37288:	mov	r2, #58	; 0x3a
   3728c:	strb	r2, [r1, r3]
   37290:	ldr	r3, [r4, #20]
   37294:	mov	r2, #32
   37298:	strb	r2, [r3]
   3729c:	ldrb	r3, [r4, #25]
   372a0:	ldr	r2, [r4, #20]
   372a4:	cmp	r3, #0
   372a8:	addne	r2, r2, #1
   372ac:	str	r2, [r4, #20]
   372b0:	ldrb	r3, [r4, #27]
   372b4:	cmp	r3, #0
   372b8:	bne	372d4 <flatcc_json_printer_int64_enum_struct_field@@Base+0x184>
   372bc:	mov	r2, r6
   372c0:	mov	r3, r7
   372c4:	mov	r0, r4
   372c8:	ldr	r1, [sp, #32]
   372cc:	blx	r1
   372d0:	pop	{r4, r5, r6, r7, r8, pc}
   372d4:	mov	r0, r6
   372d8:	mov	r1, r7
   372dc:	bl	30d20 <flatcc_json_parser_struct_as_root@@Base+0xd68>
   372e0:	ldr	r3, [r4, #20]
   372e4:	add	r0, r3, r0
   372e8:	str	r0, [r4, #20]
   372ec:	pop	{r4, r5, r6, r7, r8, pc}

000372f0 <flatcc_json_printer_bool_enum_struct_field@@Base>:
   372f0:	push	{r4, r5, r6, r7, r8, lr}
   372f4:	mov	r4, r0
   372f8:	ldr	r6, [sp, #28]
   372fc:	ldrb	r5, [r2, r3]
   37300:	cmp	r1, #0
   37304:	ldrne	r3, [r0, #20]
   37308:	addne	r2, r3, #1
   3730c:	strne	r2, [r0, #20]
   37310:	movne	r2, #44	; 0x2c
   37314:	strbne	r2, [r3]
   37318:	ldrb	r3, [r0, #25]
   3731c:	cmp	r3, #0
   37320:	bne	37378 <flatcc_json_printer_bool_enum_struct_field@@Base+0x88>
   37324:	ldr	r2, [r0, #20]
   37328:	ldr	r3, [r0, #16]
   3732c:	cmp	r2, r3
   37330:	bcs	373d8 <flatcc_json_printer_bool_enum_struct_field@@Base+0xe8>
   37334:	ldr	r3, [r4, #20]
   37338:	mov	r2, #34	; 0x22
   3733c:	strb	r2, [r3]
   37340:	ldrb	r3, [r4, #26]
   37344:	ldr	r0, [r4, #20]
   37348:	cmp	r3, #0
   3734c:	addeq	r0, r0, #1
   37350:	str	r0, [r4, #20]
   37354:	add	r3, r0, r6
   37358:	ldr	r2, [r4, #16]
   3735c:	cmp	r2, r3
   37360:	bhi	373e8 <flatcc_json_printer_bool_enum_struct_field@@Base+0xf8>
   37364:	mov	r2, r6
   37368:	ldr	r1, [sp, #24]
   3736c:	mov	r0, r4
   37370:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   37374:	b	37400 <flatcc_json_printer_bool_enum_struct_field@@Base+0x110>
   37378:	ldr	r3, [r0, #20]
   3737c:	add	r2, r3, #1
   37380:	str	r2, [r0, #20]
   37384:	mov	r2, #10
   37388:	strb	r2, [r3]
   3738c:	ldrb	r3, [r0, #25]
   37390:	ldr	r7, [r0, #32]
   37394:	mul	r7, r7, r3
   37398:	ldr	r0, [r0, #20]
   3739c:	add	r3, r0, r7
   373a0:	ldr	r2, [r4, #16]
   373a4:	cmp	r2, r3
   373a8:	bcc	373c8 <flatcc_json_printer_bool_enum_struct_field@@Base+0xd8>
   373ac:	mov	r2, r7
   373b0:	mov	r1, #32
   373b4:	bl	145c4 <memset@plt>
   373b8:	ldr	r3, [r4, #20]
   373bc:	add	r7, r3, r7
   373c0:	str	r7, [r4, #20]
   373c4:	b	37334 <flatcc_json_printer_bool_enum_struct_field@@Base+0x44>
   373c8:	mov	r1, r7
   373cc:	mov	r0, r4
   373d0:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   373d4:	b	37334 <flatcc_json_printer_bool_enum_struct_field@@Base+0x44>
   373d8:	ldr	r3, [r0, #44]	; 0x2c
   373dc:	mov	r1, #0
   373e0:	blx	r3
   373e4:	b	37334 <flatcc_json_printer_bool_enum_struct_field@@Base+0x44>
   373e8:	mov	r2, r6
   373ec:	ldr	r1, [sp, #24]
   373f0:	bl	1454c <memcpy@plt>
   373f4:	ldr	r3, [r4, #20]
   373f8:	add	r6, r3, r6
   373fc:	str	r6, [r4, #20]
   37400:	ldr	r3, [r4, #20]
   37404:	mov	r2, #34	; 0x22
   37408:	strb	r2, [r3]
   3740c:	ldrb	r3, [r4, #26]
   37410:	clz	r3, r3
   37414:	lsr	r3, r3, #5
   37418:	ldr	r1, [r4, #20]
   3741c:	add	r2, r1, r3
   37420:	add	r2, r2, #1
   37424:	str	r2, [r4, #20]
   37428:	mov	r2, #58	; 0x3a
   3742c:	strb	r2, [r1, r3]
   37430:	ldr	r3, [r4, #20]
   37434:	mov	r2, #32
   37438:	strb	r2, [r3]
   3743c:	ldrb	r3, [r4, #25]
   37440:	ldr	r1, [r4, #20]
   37444:	cmp	r3, #0
   37448:	addne	r1, r1, #1
   3744c:	str	r1, [r4, #20]
   37450:	ldrb	r3, [r4, #27]
   37454:	cmp	r3, #0
   37458:	bne	37470 <flatcc_json_printer_bool_enum_struct_field@@Base+0x180>
   3745c:	mov	r1, r5
   37460:	mov	r0, r4
   37464:	ldr	r3, [sp, #32]
   37468:	blx	r3
   3746c:	pop	{r4, r5, r6, r7, r8, pc}
   37470:	mov	r0, r5
   37474:	bl	313dc <flatcc_json_parser_struct_as_root@@Base+0x1424>
   37478:	ldr	r3, [r4, #20]
   3747c:	add	r0, r3, r0
   37480:	str	r0, [r4, #20]
   37484:	pop	{r4, r5, r6, r7, r8, pc}

00037488 <flatcc_json_printer_utype_vector_field@@Base>:
   37488:	add	r2, r2, #2
   3748c:	lsl	r2, r2, #1
   37490:	ldr	ip, [r1, #8]
   37494:	cmp	ip, r2
   37498:	bxle	lr
   3749c:	ldr	ip, [r1, #4]
   374a0:	ldrh	ip, [ip, r2]
   374a4:	cmp	ip, #0
   374a8:	bxeq	lr
   374ac:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   374b0:	ldr	r5, [r1]
   374b4:	adds	lr, r5, ip
   374b8:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   374bc:	ldr	r2, [r1, #16]
   374c0:	add	r4, r2, #1
   374c4:	str	r4, [r1, #16]
   374c8:	cmp	r2, #0
   374cc:	ldrne	r2, [r0, #20]
   374d0:	addne	r1, r2, #1
   374d4:	strne	r1, [r0, #20]
   374d8:	movne	r1, #44	; 0x2c
   374dc:	strbne	r1, [r2]
   374e0:	mov	r1, r3
   374e4:	mov	r4, r0
   374e8:	ldr	r3, [r5, ip]
   374ec:	add	r8, lr, r3
   374f0:	ldr	r7, [lr, r3]
   374f4:	ldr	r2, [sp, #40]	; 0x28
   374f8:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   374fc:	ldr	r3, [r4, #32]
   37500:	add	r3, r3, #1
   37504:	str	r3, [r4, #32]
   37508:	ldr	r3, [r4, #20]
   3750c:	add	r2, r3, #1
   37510:	str	r2, [r4, #20]
   37514:	mov	r2, #91	; 0x5b
   37518:	strb	r2, [r3]
   3751c:	cmp	r7, #0
   37520:	beq	37668 <flatcc_json_printer_utype_vector_field@@Base+0x1e0>
   37524:	ldrb	r3, [r4, #25]
   37528:	cmp	r3, #0
   3752c:	bne	37578 <flatcc_json_printer_utype_vector_field@@Base+0xf0>
   37530:	ldr	r2, [r4, #20]
   37534:	ldr	r3, [r4, #16]
   37538:	cmp	r2, r3
   3753c:	bcs	37598 <flatcc_json_printer_utype_vector_field@@Base+0x110>
   37540:	ldr	r1, [r4, #20]
   37544:	ldrb	r0, [r8, #4]
   37548:	bl	30090 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   3754c:	ldr	r3, [r4, #20]
   37550:	add	r0, r3, r0
   37554:	str	r0, [r4, #20]
   37558:	add	r5, r8, #5
   3755c:	cmp	r7, #1
   37560:	beq	37668 <flatcc_json_printer_utype_vector_field@@Base+0x1e0>
   37564:	mov	r9, #44	; 0x2c
   37568:	mov	sl, #10
   3756c:	mov	fp, #0
   37570:	add	r7, r7, #4
   37574:	b	37618 <flatcc_json_printer_utype_vector_field@@Base+0x190>
   37578:	ldr	r3, [r4, #20]
   3757c:	add	r2, r3, #1
   37580:	str	r2, [r4, #20]
   37584:	mov	r2, #10
   37588:	strb	r2, [r3]
   3758c:	mov	r0, r4
   37590:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   37594:	b	37540 <flatcc_json_printer_utype_vector_field@@Base+0xb8>
   37598:	ldr	r3, [r4, #44]	; 0x2c
   3759c:	mov	r1, #0
   375a0:	mov	r0, r4
   375a4:	blx	r3
   375a8:	b	37540 <flatcc_json_printer_utype_vector_field@@Base+0xb8>
   375ac:	ldr	r3, [r4, #20]
   375b0:	add	r2, r3, #1
   375b4:	str	r2, [r4, #20]
   375b8:	strb	sl, [r3]
   375bc:	ldrb	r3, [r4, #25]
   375c0:	ldr	r6, [r4, #32]
   375c4:	mul	r6, r6, r3
   375c8:	ldr	r0, [r4, #20]
   375cc:	add	r3, r0, r6
   375d0:	ldr	r2, [r4, #16]
   375d4:	cmp	r2, r3
   375d8:	bcc	37658 <flatcc_json_printer_utype_vector_field@@Base+0x1d0>
   375dc:	mov	r2, r6
   375e0:	mov	r1, #32
   375e4:	bl	145c4 <memset@plt>
   375e8:	ldr	r3, [r4, #20]
   375ec:	add	r6, r3, r6
   375f0:	str	r6, [r4, #20]
   375f4:	ldr	r1, [r4, #20]
   375f8:	ldrb	r0, [r5], #1
   375fc:	bl	30090 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   37600:	ldr	r3, [r4, #20]
   37604:	add	r0, r3, r0
   37608:	str	r0, [r4, #20]
   3760c:	sub	r3, r7, r5
   37610:	cmn	r8, r3
   37614:	beq	37668 <flatcc_json_printer_utype_vector_field@@Base+0x1e0>
   37618:	ldr	r3, [r4, #20]
   3761c:	add	r2, r3, #1
   37620:	str	r2, [r4, #20]
   37624:	strb	r9, [r3]
   37628:	ldrb	r3, [r4, #25]
   3762c:	cmp	r3, #0
   37630:	bne	375ac <flatcc_json_printer_utype_vector_field@@Base+0x124>
   37634:	ldr	r2, [r4, #20]
   37638:	ldr	r3, [r4, #16]
   3763c:	cmp	r2, r3
   37640:	bcc	375f4 <flatcc_json_printer_utype_vector_field@@Base+0x16c>
   37644:	ldr	r3, [r4, #44]	; 0x2c
   37648:	mov	r1, fp
   3764c:	mov	r0, r4
   37650:	blx	r3
   37654:	b	375f4 <flatcc_json_printer_utype_vector_field@@Base+0x16c>
   37658:	mov	r1, r6
   3765c:	mov	r0, r4
   37660:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   37664:	b	375f4 <flatcc_json_printer_utype_vector_field@@Base+0x16c>
   37668:	ldrb	r3, [r4, #25]
   3766c:	cmp	r3, #0
   37670:	bne	3768c <flatcc_json_printer_utype_vector_field@@Base+0x204>
   37674:	ldr	r3, [r4, #20]
   37678:	add	r2, r3, #1
   3767c:	str	r2, [r4, #20]
   37680:	mov	r2, #93	; 0x5d
   37684:	strb	r2, [r3]
   37688:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3768c:	ldr	r3, [r4, #20]
   37690:	add	r2, r3, #1
   37694:	str	r2, [r4, #20]
   37698:	mov	r2, #10
   3769c:	strb	r2, [r3]
   376a0:	ldr	r5, [r4, #32]
   376a4:	sub	r5, r5, #1
   376a8:	str	r5, [r4, #32]
   376ac:	ldrb	r3, [r4, #25]
   376b0:	mul	r5, r5, r3
   376b4:	ldr	r0, [r4, #20]
   376b8:	add	r3, r0, r5
   376bc:	ldr	r2, [r4, #16]
   376c0:	cmp	r2, r3
   376c4:	bcc	376e4 <flatcc_json_printer_utype_vector_field@@Base+0x25c>
   376c8:	mov	r2, r5
   376cc:	mov	r1, #32
   376d0:	bl	145c4 <memset@plt>
   376d4:	ldr	r3, [r4, #20]
   376d8:	add	r5, r3, r5
   376dc:	str	r5, [r4, #20]
   376e0:	b	37674 <flatcc_json_printer_utype_vector_field@@Base+0x1ec>
   376e4:	mov	r1, r5
   376e8:	mov	r0, r4
   376ec:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   376f0:	b	37674 <flatcc_json_printer_utype_vector_field@@Base+0x1ec>

000376f4 <flatcc_json_printer_uint8_vector_field@@Base>:
   376f4:	add	r2, r2, #2
   376f8:	lsl	r2, r2, #1
   376fc:	ldr	ip, [r1, #8]
   37700:	cmp	ip, r2
   37704:	bxle	lr
   37708:	ldr	ip, [r1, #4]
   3770c:	ldrh	ip, [ip, r2]
   37710:	cmp	ip, #0
   37714:	bxeq	lr
   37718:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3771c:	ldr	r5, [r1]
   37720:	adds	lr, r5, ip
   37724:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37728:	ldr	r2, [r1, #16]
   3772c:	add	r4, r2, #1
   37730:	str	r4, [r1, #16]
   37734:	cmp	r2, #0
   37738:	ldrne	r2, [r0, #20]
   3773c:	addne	r1, r2, #1
   37740:	strne	r1, [r0, #20]
   37744:	movne	r1, #44	; 0x2c
   37748:	strbne	r1, [r2]
   3774c:	mov	r1, r3
   37750:	mov	r4, r0
   37754:	ldr	r3, [r5, ip]
   37758:	add	r8, lr, r3
   3775c:	ldr	r7, [lr, r3]
   37760:	ldr	r2, [sp, #40]	; 0x28
   37764:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   37768:	ldr	r3, [r4, #32]
   3776c:	add	r3, r3, #1
   37770:	str	r3, [r4, #32]
   37774:	ldr	r3, [r4, #20]
   37778:	add	r2, r3, #1
   3777c:	str	r2, [r4, #20]
   37780:	mov	r2, #91	; 0x5b
   37784:	strb	r2, [r3]
   37788:	cmp	r7, #0
   3778c:	beq	378d4 <flatcc_json_printer_uint8_vector_field@@Base+0x1e0>
   37790:	ldrb	r3, [r4, #25]
   37794:	cmp	r3, #0
   37798:	bne	377e4 <flatcc_json_printer_uint8_vector_field@@Base+0xf0>
   3779c:	ldr	r2, [r4, #20]
   377a0:	ldr	r3, [r4, #16]
   377a4:	cmp	r2, r3
   377a8:	bcs	37804 <flatcc_json_printer_uint8_vector_field@@Base+0x110>
   377ac:	ldr	r1, [r4, #20]
   377b0:	ldrb	r0, [r8, #4]
   377b4:	bl	30090 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   377b8:	ldr	r3, [r4, #20]
   377bc:	add	r0, r3, r0
   377c0:	str	r0, [r4, #20]
   377c4:	add	r5, r8, #5
   377c8:	cmp	r7, #1
   377cc:	beq	378d4 <flatcc_json_printer_uint8_vector_field@@Base+0x1e0>
   377d0:	mov	r9, #44	; 0x2c
   377d4:	mov	sl, #10
   377d8:	mov	fp, #0
   377dc:	add	r7, r7, #4
   377e0:	b	37884 <flatcc_json_printer_uint8_vector_field@@Base+0x190>
   377e4:	ldr	r3, [r4, #20]
   377e8:	add	r2, r3, #1
   377ec:	str	r2, [r4, #20]
   377f0:	mov	r2, #10
   377f4:	strb	r2, [r3]
   377f8:	mov	r0, r4
   377fc:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   37800:	b	377ac <flatcc_json_printer_uint8_vector_field@@Base+0xb8>
   37804:	ldr	r3, [r4, #44]	; 0x2c
   37808:	mov	r1, #0
   3780c:	mov	r0, r4
   37810:	blx	r3
   37814:	b	377ac <flatcc_json_printer_uint8_vector_field@@Base+0xb8>
   37818:	ldr	r3, [r4, #20]
   3781c:	add	r2, r3, #1
   37820:	str	r2, [r4, #20]
   37824:	strb	sl, [r3]
   37828:	ldrb	r3, [r4, #25]
   3782c:	ldr	r6, [r4, #32]
   37830:	mul	r6, r6, r3
   37834:	ldr	r0, [r4, #20]
   37838:	add	r3, r0, r6
   3783c:	ldr	r2, [r4, #16]
   37840:	cmp	r2, r3
   37844:	bcc	378c4 <flatcc_json_printer_uint8_vector_field@@Base+0x1d0>
   37848:	mov	r2, r6
   3784c:	mov	r1, #32
   37850:	bl	145c4 <memset@plt>
   37854:	ldr	r3, [r4, #20]
   37858:	add	r6, r3, r6
   3785c:	str	r6, [r4, #20]
   37860:	ldr	r1, [r4, #20]
   37864:	ldrb	r0, [r5], #1
   37868:	bl	30090 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   3786c:	ldr	r3, [r4, #20]
   37870:	add	r0, r3, r0
   37874:	str	r0, [r4, #20]
   37878:	sub	r3, r7, r5
   3787c:	cmn	r8, r3
   37880:	beq	378d4 <flatcc_json_printer_uint8_vector_field@@Base+0x1e0>
   37884:	ldr	r3, [r4, #20]
   37888:	add	r2, r3, #1
   3788c:	str	r2, [r4, #20]
   37890:	strb	r9, [r3]
   37894:	ldrb	r3, [r4, #25]
   37898:	cmp	r3, #0
   3789c:	bne	37818 <flatcc_json_printer_uint8_vector_field@@Base+0x124>
   378a0:	ldr	r2, [r4, #20]
   378a4:	ldr	r3, [r4, #16]
   378a8:	cmp	r2, r3
   378ac:	bcc	37860 <flatcc_json_printer_uint8_vector_field@@Base+0x16c>
   378b0:	ldr	r3, [r4, #44]	; 0x2c
   378b4:	mov	r1, fp
   378b8:	mov	r0, r4
   378bc:	blx	r3
   378c0:	b	37860 <flatcc_json_printer_uint8_vector_field@@Base+0x16c>
   378c4:	mov	r1, r6
   378c8:	mov	r0, r4
   378cc:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   378d0:	b	37860 <flatcc_json_printer_uint8_vector_field@@Base+0x16c>
   378d4:	ldrb	r3, [r4, #25]
   378d8:	cmp	r3, #0
   378dc:	bne	378f8 <flatcc_json_printer_uint8_vector_field@@Base+0x204>
   378e0:	ldr	r3, [r4, #20]
   378e4:	add	r2, r3, #1
   378e8:	str	r2, [r4, #20]
   378ec:	mov	r2, #93	; 0x5d
   378f0:	strb	r2, [r3]
   378f4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   378f8:	ldr	r3, [r4, #20]
   378fc:	add	r2, r3, #1
   37900:	str	r2, [r4, #20]
   37904:	mov	r2, #10
   37908:	strb	r2, [r3]
   3790c:	ldr	r5, [r4, #32]
   37910:	sub	r5, r5, #1
   37914:	str	r5, [r4, #32]
   37918:	ldrb	r3, [r4, #25]
   3791c:	mul	r5, r5, r3
   37920:	ldr	r0, [r4, #20]
   37924:	add	r3, r0, r5
   37928:	ldr	r2, [r4, #16]
   3792c:	cmp	r2, r3
   37930:	bcc	37950 <flatcc_json_printer_uint8_vector_field@@Base+0x25c>
   37934:	mov	r2, r5
   37938:	mov	r1, #32
   3793c:	bl	145c4 <memset@plt>
   37940:	ldr	r3, [r4, #20]
   37944:	add	r5, r3, r5
   37948:	str	r5, [r4, #20]
   3794c:	b	378e0 <flatcc_json_printer_uint8_vector_field@@Base+0x1ec>
   37950:	mov	r1, r5
   37954:	mov	r0, r4
   37958:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3795c:	b	378e0 <flatcc_json_printer_uint8_vector_field@@Base+0x1ec>

00037960 <flatcc_json_printer_uint16_vector_field@@Base>:
   37960:	add	r2, r2, #2
   37964:	lsl	r2, r2, #1
   37968:	ldr	ip, [r1, #8]
   3796c:	cmp	ip, r2
   37970:	bxle	lr
   37974:	ldr	ip, [r1, #4]
   37978:	ldrh	ip, [ip, r2]
   3797c:	cmp	ip, #0
   37980:	bxeq	lr
   37984:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37988:	ldr	r5, [r1]
   3798c:	adds	lr, r5, ip
   37990:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37994:	ldr	r2, [r1, #16]
   37998:	add	r4, r2, #1
   3799c:	str	r4, [r1, #16]
   379a0:	cmp	r2, #0
   379a4:	ldrne	r2, [r0, #20]
   379a8:	addne	r1, r2, #1
   379ac:	strne	r1, [r0, #20]
   379b0:	movne	r1, #44	; 0x2c
   379b4:	strbne	r1, [r2]
   379b8:	mov	r1, r3
   379bc:	mov	r4, r0
   379c0:	ldr	r3, [r5, ip]
   379c4:	add	r6, lr, r3
   379c8:	ldr	r7, [lr, r3]
   379cc:	ldr	r2, [sp, #40]	; 0x28
   379d0:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   379d4:	ldr	r3, [r4, #32]
   379d8:	add	r3, r3, #1
   379dc:	str	r3, [r4, #32]
   379e0:	ldr	r3, [r4, #20]
   379e4:	add	r2, r3, #1
   379e8:	str	r2, [r4, #20]
   379ec:	mov	r2, #91	; 0x5b
   379f0:	strb	r2, [r3]
   379f4:	cmp	r7, #0
   379f8:	beq	37b48 <flatcc_json_printer_uint16_vector_field@@Base+0x1e8>
   379fc:	ldrb	r3, [r4, #25]
   37a00:	cmp	r3, #0
   37a04:	bne	37a54 <flatcc_json_printer_uint16_vector_field@@Base+0xf4>
   37a08:	ldr	r2, [r4, #20]
   37a0c:	ldr	r3, [r4, #16]
   37a10:	cmp	r2, r3
   37a14:	bcs	37a74 <flatcc_json_printer_uint16_vector_field@@Base+0x114>
   37a18:	ldr	r1, [r4, #20]
   37a1c:	ldrh	r0, [r6, #4]
   37a20:	bl	30150 <flatcc_json_parser_struct_as_root@@Base+0x198>
   37a24:	ldr	r3, [r4, #20]
   37a28:	add	r0, r3, r0
   37a2c:	str	r0, [r4, #20]
   37a30:	add	r6, r6, #6
   37a34:	sub	r5, r7, #2
   37a38:	cmp	r7, #1
   37a3c:	beq	37b48 <flatcc_json_printer_uint16_vector_field@@Base+0x1e8>
   37a40:	mov	r7, #44	; 0x2c
   37a44:	mov	r9, #0
   37a48:	mov	r8, #10
   37a4c:	mov	sl, #32
   37a50:	b	37af8 <flatcc_json_printer_uint16_vector_field@@Base+0x198>
   37a54:	ldr	r3, [r4, #20]
   37a58:	add	r2, r3, #1
   37a5c:	str	r2, [r4, #20]
   37a60:	mov	r2, #10
   37a64:	strb	r2, [r3]
   37a68:	mov	r0, r4
   37a6c:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   37a70:	b	37a18 <flatcc_json_printer_uint16_vector_field@@Base+0xb8>
   37a74:	ldr	r3, [r4, #44]	; 0x2c
   37a78:	mov	r1, #0
   37a7c:	mov	r0, r4
   37a80:	blx	r3
   37a84:	b	37a18 <flatcc_json_printer_uint16_vector_field@@Base+0xb8>
   37a88:	ldr	r3, [r4, #20]
   37a8c:	add	r2, r3, #1
   37a90:	str	r2, [r4, #20]
   37a94:	strb	r8, [r3]
   37a98:	ldrb	r3, [r4, #25]
   37a9c:	ldr	fp, [r4, #32]
   37aa0:	mul	fp, fp, r3
   37aa4:	ldr	r0, [r4, #20]
   37aa8:	add	r3, r0, fp
   37aac:	ldr	r2, [r4, #16]
   37ab0:	cmp	r2, r3
   37ab4:	bcc	37b38 <flatcc_json_printer_uint16_vector_field@@Base+0x1d8>
   37ab8:	mov	r2, fp
   37abc:	mov	r1, sl
   37ac0:	bl	145c4 <memset@plt>
   37ac4:	ldr	r3, [r4, #20]
   37ac8:	add	fp, r3, fp
   37acc:	str	fp, [r4, #20]
   37ad0:	ldr	r1, [r4, #20]
   37ad4:	ldrh	r0, [r6], #2
   37ad8:	bl	30150 <flatcc_json_parser_struct_as_root@@Base+0x198>
   37adc:	ldr	r3, [r4, #20]
   37ae0:	add	r0, r3, r0
   37ae4:	str	r0, [r4, #20]
   37ae8:	sub	r3, r5, #1
   37aec:	cmp	r5, #0
   37af0:	beq	37b48 <flatcc_json_printer_uint16_vector_field@@Base+0x1e8>
   37af4:	mov	r5, r3
   37af8:	ldr	r3, [r4, #20]
   37afc:	add	r2, r3, #1
   37b00:	str	r2, [r4, #20]
   37b04:	strb	r7, [r3]
   37b08:	ldrb	r3, [r4, #25]
   37b0c:	cmp	r3, #0
   37b10:	bne	37a88 <flatcc_json_printer_uint16_vector_field@@Base+0x128>
   37b14:	ldr	r2, [r4, #20]
   37b18:	ldr	r3, [r4, #16]
   37b1c:	cmp	r2, r3
   37b20:	bcc	37ad0 <flatcc_json_printer_uint16_vector_field@@Base+0x170>
   37b24:	ldr	r3, [r4, #44]	; 0x2c
   37b28:	mov	r1, r9
   37b2c:	mov	r0, r4
   37b30:	blx	r3
   37b34:	b	37ad0 <flatcc_json_printer_uint16_vector_field@@Base+0x170>
   37b38:	mov	r1, fp
   37b3c:	mov	r0, r4
   37b40:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   37b44:	b	37ad0 <flatcc_json_printer_uint16_vector_field@@Base+0x170>
   37b48:	ldrb	r3, [r4, #25]
   37b4c:	cmp	r3, #0
   37b50:	bne	37b6c <flatcc_json_printer_uint16_vector_field@@Base+0x20c>
   37b54:	ldr	r3, [r4, #20]
   37b58:	add	r2, r3, #1
   37b5c:	str	r2, [r4, #20]
   37b60:	mov	r2, #93	; 0x5d
   37b64:	strb	r2, [r3]
   37b68:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37b6c:	ldr	r3, [r4, #20]
   37b70:	add	r2, r3, #1
   37b74:	str	r2, [r4, #20]
   37b78:	mov	r2, #10
   37b7c:	strb	r2, [r3]
   37b80:	ldr	r5, [r4, #32]
   37b84:	sub	r5, r5, #1
   37b88:	str	r5, [r4, #32]
   37b8c:	ldrb	r3, [r4, #25]
   37b90:	mul	r5, r5, r3
   37b94:	ldr	r0, [r4, #20]
   37b98:	add	r3, r0, r5
   37b9c:	ldr	r2, [r4, #16]
   37ba0:	cmp	r2, r3
   37ba4:	bcc	37bc4 <flatcc_json_printer_uint16_vector_field@@Base+0x264>
   37ba8:	mov	r2, r5
   37bac:	mov	r1, #32
   37bb0:	bl	145c4 <memset@plt>
   37bb4:	ldr	r3, [r4, #20]
   37bb8:	add	r5, r3, r5
   37bbc:	str	r5, [r4, #20]
   37bc0:	b	37b54 <flatcc_json_printer_uint16_vector_field@@Base+0x1f4>
   37bc4:	mov	r1, r5
   37bc8:	mov	r0, r4
   37bcc:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   37bd0:	b	37b54 <flatcc_json_printer_uint16_vector_field@@Base+0x1f4>

00037bd4 <flatcc_json_printer_uint32_vector_field@@Base>:
   37bd4:	add	r2, r2, #2
   37bd8:	lsl	r2, r2, #1
   37bdc:	ldr	ip, [r1, #8]
   37be0:	cmp	ip, r2
   37be4:	bxle	lr
   37be8:	ldr	ip, [r1, #4]
   37bec:	ldrh	ip, [ip, r2]
   37bf0:	cmp	ip, #0
   37bf4:	bxeq	lr
   37bf8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37bfc:	ldr	r5, [r1]
   37c00:	adds	lr, r5, ip
   37c04:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37c08:	ldr	r2, [r1, #16]
   37c0c:	add	r4, r2, #1
   37c10:	str	r4, [r1, #16]
   37c14:	cmp	r2, #0
   37c18:	ldrne	r2, [r0, #20]
   37c1c:	addne	r1, r2, #1
   37c20:	strne	r1, [r0, #20]
   37c24:	movne	r1, #44	; 0x2c
   37c28:	strbne	r1, [r2]
   37c2c:	mov	r1, r3
   37c30:	mov	r4, r0
   37c34:	ldr	r3, [r5, ip]
   37c38:	add	r6, lr, r3
   37c3c:	ldr	r7, [lr, r3]
   37c40:	ldr	r2, [sp, #40]	; 0x28
   37c44:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   37c48:	ldr	r3, [r4, #32]
   37c4c:	add	r3, r3, #1
   37c50:	str	r3, [r4, #32]
   37c54:	ldr	r3, [r4, #20]
   37c58:	add	r2, r3, #1
   37c5c:	str	r2, [r4, #20]
   37c60:	mov	r2, #91	; 0x5b
   37c64:	strb	r2, [r3]
   37c68:	cmp	r7, #0
   37c6c:	beq	37dbc <flatcc_json_printer_uint32_vector_field@@Base+0x1e8>
   37c70:	ldrb	r3, [r4, #25]
   37c74:	cmp	r3, #0
   37c78:	bne	37cc8 <flatcc_json_printer_uint32_vector_field@@Base+0xf4>
   37c7c:	ldr	r2, [r4, #20]
   37c80:	ldr	r3, [r4, #16]
   37c84:	cmp	r2, r3
   37c88:	bcs	37ce8 <flatcc_json_printer_uint32_vector_field@@Base+0x114>
   37c8c:	ldr	r1, [r4, #20]
   37c90:	ldr	r0, [r6, #4]
   37c94:	bl	302d4 <flatcc_json_parser_struct_as_root@@Base+0x31c>
   37c98:	ldr	r3, [r4, #20]
   37c9c:	add	r0, r3, r0
   37ca0:	str	r0, [r4, #20]
   37ca4:	add	r6, r6, #8
   37ca8:	sub	r5, r7, #2
   37cac:	cmp	r7, #1
   37cb0:	beq	37dbc <flatcc_json_printer_uint32_vector_field@@Base+0x1e8>
   37cb4:	mov	r7, #44	; 0x2c
   37cb8:	mov	r9, #0
   37cbc:	mov	r8, #10
   37cc0:	mov	sl, #32
   37cc4:	b	37d6c <flatcc_json_printer_uint32_vector_field@@Base+0x198>
   37cc8:	ldr	r3, [r4, #20]
   37ccc:	add	r2, r3, #1
   37cd0:	str	r2, [r4, #20]
   37cd4:	mov	r2, #10
   37cd8:	strb	r2, [r3]
   37cdc:	mov	r0, r4
   37ce0:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   37ce4:	b	37c8c <flatcc_json_printer_uint32_vector_field@@Base+0xb8>
   37ce8:	ldr	r3, [r4, #44]	; 0x2c
   37cec:	mov	r1, #0
   37cf0:	mov	r0, r4
   37cf4:	blx	r3
   37cf8:	b	37c8c <flatcc_json_printer_uint32_vector_field@@Base+0xb8>
   37cfc:	ldr	r3, [r4, #20]
   37d00:	add	r2, r3, #1
   37d04:	str	r2, [r4, #20]
   37d08:	strb	r8, [r3]
   37d0c:	ldrb	r3, [r4, #25]
   37d10:	ldr	fp, [r4, #32]
   37d14:	mul	fp, fp, r3
   37d18:	ldr	r0, [r4, #20]
   37d1c:	add	r3, r0, fp
   37d20:	ldr	r2, [r4, #16]
   37d24:	cmp	r2, r3
   37d28:	bcc	37dac <flatcc_json_printer_uint32_vector_field@@Base+0x1d8>
   37d2c:	mov	r2, fp
   37d30:	mov	r1, sl
   37d34:	bl	145c4 <memset@plt>
   37d38:	ldr	r3, [r4, #20]
   37d3c:	add	fp, r3, fp
   37d40:	str	fp, [r4, #20]
   37d44:	ldr	r1, [r4, #20]
   37d48:	ldr	r0, [r6], #4
   37d4c:	bl	302d4 <flatcc_json_parser_struct_as_root@@Base+0x31c>
   37d50:	ldr	r3, [r4, #20]
   37d54:	add	r0, r3, r0
   37d58:	str	r0, [r4, #20]
   37d5c:	sub	r3, r5, #1
   37d60:	cmp	r5, #0
   37d64:	beq	37dbc <flatcc_json_printer_uint32_vector_field@@Base+0x1e8>
   37d68:	mov	r5, r3
   37d6c:	ldr	r3, [r4, #20]
   37d70:	add	r2, r3, #1
   37d74:	str	r2, [r4, #20]
   37d78:	strb	r7, [r3]
   37d7c:	ldrb	r3, [r4, #25]
   37d80:	cmp	r3, #0
   37d84:	bne	37cfc <flatcc_json_printer_uint32_vector_field@@Base+0x128>
   37d88:	ldr	r2, [r4, #20]
   37d8c:	ldr	r3, [r4, #16]
   37d90:	cmp	r2, r3
   37d94:	bcc	37d44 <flatcc_json_printer_uint32_vector_field@@Base+0x170>
   37d98:	ldr	r3, [r4, #44]	; 0x2c
   37d9c:	mov	r1, r9
   37da0:	mov	r0, r4
   37da4:	blx	r3
   37da8:	b	37d44 <flatcc_json_printer_uint32_vector_field@@Base+0x170>
   37dac:	mov	r1, fp
   37db0:	mov	r0, r4
   37db4:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   37db8:	b	37d44 <flatcc_json_printer_uint32_vector_field@@Base+0x170>
   37dbc:	ldrb	r3, [r4, #25]
   37dc0:	cmp	r3, #0
   37dc4:	bne	37de0 <flatcc_json_printer_uint32_vector_field@@Base+0x20c>
   37dc8:	ldr	r3, [r4, #20]
   37dcc:	add	r2, r3, #1
   37dd0:	str	r2, [r4, #20]
   37dd4:	mov	r2, #93	; 0x5d
   37dd8:	strb	r2, [r3]
   37ddc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37de0:	ldr	r3, [r4, #20]
   37de4:	add	r2, r3, #1
   37de8:	str	r2, [r4, #20]
   37dec:	mov	r2, #10
   37df0:	strb	r2, [r3]
   37df4:	ldr	r5, [r4, #32]
   37df8:	sub	r5, r5, #1
   37dfc:	str	r5, [r4, #32]
   37e00:	ldrb	r3, [r4, #25]
   37e04:	mul	r5, r5, r3
   37e08:	ldr	r0, [r4, #20]
   37e0c:	add	r3, r0, r5
   37e10:	ldr	r2, [r4, #16]
   37e14:	cmp	r2, r3
   37e18:	bcc	37e38 <flatcc_json_printer_uint32_vector_field@@Base+0x264>
   37e1c:	mov	r2, r5
   37e20:	mov	r1, #32
   37e24:	bl	145c4 <memset@plt>
   37e28:	ldr	r3, [r4, #20]
   37e2c:	add	r5, r3, r5
   37e30:	str	r5, [r4, #20]
   37e34:	b	37dc8 <flatcc_json_printer_uint32_vector_field@@Base+0x1f4>
   37e38:	mov	r1, r5
   37e3c:	mov	r0, r4
   37e40:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   37e44:	b	37dc8 <flatcc_json_printer_uint32_vector_field@@Base+0x1f4>

00037e48 <flatcc_json_printer_uint64_vector_field@@Base>:
   37e48:	add	r2, r2, #2
   37e4c:	lsl	r2, r2, #1
   37e50:	ldr	ip, [r1, #8]
   37e54:	cmp	ip, r2
   37e58:	bxle	lr
   37e5c:	ldr	ip, [r1, #4]
   37e60:	ldrh	ip, [ip, r2]
   37e64:	cmp	ip, #0
   37e68:	bxeq	lr
   37e6c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37e70:	ldr	r5, [r1]
   37e74:	adds	lr, r5, ip
   37e78:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37e7c:	ldr	r2, [r1, #16]
   37e80:	add	r4, r2, #1
   37e84:	str	r4, [r1, #16]
   37e88:	cmp	r2, #0
   37e8c:	ldrne	r2, [r0, #20]
   37e90:	addne	r1, r2, #1
   37e94:	strne	r1, [r0, #20]
   37e98:	movne	r1, #44	; 0x2c
   37e9c:	strbne	r1, [r2]
   37ea0:	mov	r1, r3
   37ea4:	mov	r4, r0
   37ea8:	ldr	r3, [r5, ip]
   37eac:	add	r6, lr, r3
   37eb0:	ldr	r7, [lr, r3]
   37eb4:	ldr	r2, [sp, #40]	; 0x28
   37eb8:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   37ebc:	ldr	r3, [r4, #32]
   37ec0:	add	r3, r3, #1
   37ec4:	str	r3, [r4, #32]
   37ec8:	ldr	r3, [r4, #20]
   37ecc:	add	r2, r3, #1
   37ed0:	str	r2, [r4, #20]
   37ed4:	mov	r2, #91	; 0x5b
   37ed8:	strb	r2, [r3]
   37edc:	cmp	r7, #0
   37ee0:	beq	38030 <flatcc_json_printer_uint64_vector_field@@Base+0x1e8>
   37ee4:	ldrb	r3, [r4, #25]
   37ee8:	cmp	r3, #0
   37eec:	bne	37f3c <flatcc_json_printer_uint64_vector_field@@Base+0xf4>
   37ef0:	ldr	r2, [r4, #20]
   37ef4:	ldr	r3, [r4, #16]
   37ef8:	cmp	r2, r3
   37efc:	bcs	37f5c <flatcc_json_printer_uint64_vector_field@@Base+0x114>
   37f00:	ldr	r2, [r4, #20]
   37f04:	ldrd	r0, [r6, #4]
   37f08:	bl	30614 <flatcc_json_parser_struct_as_root@@Base+0x65c>
   37f0c:	ldr	r3, [r4, #20]
   37f10:	add	r0, r3, r0
   37f14:	str	r0, [r4, #20]
   37f18:	add	r6, r6, #12
   37f1c:	sub	r5, r7, #2
   37f20:	cmp	r7, #1
   37f24:	beq	38030 <flatcc_json_printer_uint64_vector_field@@Base+0x1e8>
   37f28:	mov	r7, #44	; 0x2c
   37f2c:	mov	r9, #0
   37f30:	mov	r8, #10
   37f34:	mov	sl, #32
   37f38:	b	37fe0 <flatcc_json_printer_uint64_vector_field@@Base+0x198>
   37f3c:	ldr	r3, [r4, #20]
   37f40:	add	r2, r3, #1
   37f44:	str	r2, [r4, #20]
   37f48:	mov	r2, #10
   37f4c:	strb	r2, [r3]
   37f50:	mov	r0, r4
   37f54:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   37f58:	b	37f00 <flatcc_json_printer_uint64_vector_field@@Base+0xb8>
   37f5c:	ldr	r3, [r4, #44]	; 0x2c
   37f60:	mov	r1, #0
   37f64:	mov	r0, r4
   37f68:	blx	r3
   37f6c:	b	37f00 <flatcc_json_printer_uint64_vector_field@@Base+0xb8>
   37f70:	ldr	r3, [r4, #20]
   37f74:	add	r2, r3, #1
   37f78:	str	r2, [r4, #20]
   37f7c:	strb	r8, [r3]
   37f80:	ldrb	r3, [r4, #25]
   37f84:	ldr	fp, [r4, #32]
   37f88:	mul	fp, fp, r3
   37f8c:	ldr	r0, [r4, #20]
   37f90:	add	r3, r0, fp
   37f94:	ldr	r2, [r4, #16]
   37f98:	cmp	r2, r3
   37f9c:	bcc	38020 <flatcc_json_printer_uint64_vector_field@@Base+0x1d8>
   37fa0:	mov	r2, fp
   37fa4:	mov	r1, sl
   37fa8:	bl	145c4 <memset@plt>
   37fac:	ldr	r3, [r4, #20]
   37fb0:	add	fp, r3, fp
   37fb4:	str	fp, [r4, #20]
   37fb8:	ldr	r2, [r4, #20]
   37fbc:	ldrd	r0, [r6], #8
   37fc0:	bl	30614 <flatcc_json_parser_struct_as_root@@Base+0x65c>
   37fc4:	ldr	r3, [r4, #20]
   37fc8:	add	r0, r3, r0
   37fcc:	str	r0, [r4, #20]
   37fd0:	sub	r3, r5, #1
   37fd4:	cmp	r5, #0
   37fd8:	beq	38030 <flatcc_json_printer_uint64_vector_field@@Base+0x1e8>
   37fdc:	mov	r5, r3
   37fe0:	ldr	r3, [r4, #20]
   37fe4:	add	r2, r3, #1
   37fe8:	str	r2, [r4, #20]
   37fec:	strb	r7, [r3]
   37ff0:	ldrb	r3, [r4, #25]
   37ff4:	cmp	r3, #0
   37ff8:	bne	37f70 <flatcc_json_printer_uint64_vector_field@@Base+0x128>
   37ffc:	ldr	r2, [r4, #20]
   38000:	ldr	r3, [r4, #16]
   38004:	cmp	r2, r3
   38008:	bcc	37fb8 <flatcc_json_printer_uint64_vector_field@@Base+0x170>
   3800c:	ldr	r3, [r4, #44]	; 0x2c
   38010:	mov	r1, r9
   38014:	mov	r0, r4
   38018:	blx	r3
   3801c:	b	37fb8 <flatcc_json_printer_uint64_vector_field@@Base+0x170>
   38020:	mov	r1, fp
   38024:	mov	r0, r4
   38028:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3802c:	b	37fb8 <flatcc_json_printer_uint64_vector_field@@Base+0x170>
   38030:	ldrb	r3, [r4, #25]
   38034:	cmp	r3, #0
   38038:	bne	38054 <flatcc_json_printer_uint64_vector_field@@Base+0x20c>
   3803c:	ldr	r3, [r4, #20]
   38040:	add	r2, r3, #1
   38044:	str	r2, [r4, #20]
   38048:	mov	r2, #93	; 0x5d
   3804c:	strb	r2, [r3]
   38050:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38054:	ldr	r3, [r4, #20]
   38058:	add	r2, r3, #1
   3805c:	str	r2, [r4, #20]
   38060:	mov	r2, #10
   38064:	strb	r2, [r3]
   38068:	ldr	r5, [r4, #32]
   3806c:	sub	r5, r5, #1
   38070:	str	r5, [r4, #32]
   38074:	ldrb	r3, [r4, #25]
   38078:	mul	r5, r5, r3
   3807c:	ldr	r0, [r4, #20]
   38080:	add	r3, r0, r5
   38084:	ldr	r2, [r4, #16]
   38088:	cmp	r2, r3
   3808c:	bcc	380ac <flatcc_json_printer_uint64_vector_field@@Base+0x264>
   38090:	mov	r2, r5
   38094:	mov	r1, #32
   38098:	bl	145c4 <memset@plt>
   3809c:	ldr	r3, [r4, #20]
   380a0:	add	r5, r3, r5
   380a4:	str	r5, [r4, #20]
   380a8:	b	3803c <flatcc_json_printer_uint64_vector_field@@Base+0x1f4>
   380ac:	mov	r1, r5
   380b0:	mov	r0, r4
   380b4:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   380b8:	b	3803c <flatcc_json_printer_uint64_vector_field@@Base+0x1f4>

000380bc <flatcc_json_printer_int8_vector_field@@Base>:
   380bc:	add	r2, r2, #2
   380c0:	lsl	r2, r2, #1
   380c4:	ldr	ip, [r1, #8]
   380c8:	cmp	ip, r2
   380cc:	bxle	lr
   380d0:	ldr	ip, [r1, #4]
   380d4:	ldrh	ip, [ip, r2]
   380d8:	cmp	ip, #0
   380dc:	bxeq	lr
   380e0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   380e4:	ldr	r5, [r1]
   380e8:	adds	lr, r5, ip
   380ec:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   380f0:	ldr	r2, [r1, #16]
   380f4:	add	r4, r2, #1
   380f8:	str	r4, [r1, #16]
   380fc:	cmp	r2, #0
   38100:	ldrne	r2, [r0, #20]
   38104:	addne	r1, r2, #1
   38108:	strne	r1, [r0, #20]
   3810c:	movne	r1, #44	; 0x2c
   38110:	strbne	r1, [r2]
   38114:	mov	r1, r3
   38118:	mov	r4, r0
   3811c:	ldr	r3, [r5, ip]
   38120:	add	r8, lr, r3
   38124:	ldr	r7, [lr, r3]
   38128:	ldr	r2, [sp, #40]	; 0x28
   3812c:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   38130:	ldr	r3, [r4, #32]
   38134:	add	r3, r3, #1
   38138:	str	r3, [r4, #32]
   3813c:	ldr	r3, [r4, #20]
   38140:	add	r2, r3, #1
   38144:	str	r2, [r4, #20]
   38148:	mov	r2, #91	; 0x5b
   3814c:	strb	r2, [r3]
   38150:	cmp	r7, #0
   38154:	beq	3829c <flatcc_json_printer_int8_vector_field@@Base+0x1e0>
   38158:	ldrb	r3, [r4, #25]
   3815c:	cmp	r3, #0
   38160:	bne	381ac <flatcc_json_printer_int8_vector_field@@Base+0xf0>
   38164:	ldr	r2, [r4, #20]
   38168:	ldr	r3, [r4, #16]
   3816c:	cmp	r2, r3
   38170:	bcs	381cc <flatcc_json_printer_int8_vector_field@@Base+0x110>
   38174:	ldr	r1, [r4, #20]
   38178:	ldrsb	r0, [r8, #4]
   3817c:	bl	30c98 <flatcc_json_parser_struct_as_root@@Base+0xce0>
   38180:	ldr	r3, [r4, #20]
   38184:	add	r0, r3, r0
   38188:	str	r0, [r4, #20]
   3818c:	add	r5, r8, #5
   38190:	cmp	r7, #1
   38194:	beq	3829c <flatcc_json_printer_int8_vector_field@@Base+0x1e0>
   38198:	mov	r9, #44	; 0x2c
   3819c:	mov	sl, #10
   381a0:	mov	fp, #0
   381a4:	add	r7, r7, #4
   381a8:	b	3824c <flatcc_json_printer_int8_vector_field@@Base+0x190>
   381ac:	ldr	r3, [r4, #20]
   381b0:	add	r2, r3, #1
   381b4:	str	r2, [r4, #20]
   381b8:	mov	r2, #10
   381bc:	strb	r2, [r3]
   381c0:	mov	r0, r4
   381c4:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   381c8:	b	38174 <flatcc_json_printer_int8_vector_field@@Base+0xb8>
   381cc:	ldr	r3, [r4, #44]	; 0x2c
   381d0:	mov	r1, #0
   381d4:	mov	r0, r4
   381d8:	blx	r3
   381dc:	b	38174 <flatcc_json_printer_int8_vector_field@@Base+0xb8>
   381e0:	ldr	r3, [r4, #20]
   381e4:	add	r2, r3, #1
   381e8:	str	r2, [r4, #20]
   381ec:	strb	sl, [r3]
   381f0:	ldrb	r3, [r4, #25]
   381f4:	ldr	r6, [r4, #32]
   381f8:	mul	r6, r6, r3
   381fc:	ldr	r0, [r4, #20]
   38200:	add	r3, r0, r6
   38204:	ldr	r2, [r4, #16]
   38208:	cmp	r2, r3
   3820c:	bcc	3828c <flatcc_json_printer_int8_vector_field@@Base+0x1d0>
   38210:	mov	r2, r6
   38214:	mov	r1, #32
   38218:	bl	145c4 <memset@plt>
   3821c:	ldr	r3, [r4, #20]
   38220:	add	r6, r3, r6
   38224:	str	r6, [r4, #20]
   38228:	ldr	r1, [r4, #20]
   3822c:	ldrsb	r0, [r5], #1
   38230:	bl	30c98 <flatcc_json_parser_struct_as_root@@Base+0xce0>
   38234:	ldr	r3, [r4, #20]
   38238:	add	r0, r3, r0
   3823c:	str	r0, [r4, #20]
   38240:	sub	r3, r7, r5
   38244:	cmn	r8, r3
   38248:	beq	3829c <flatcc_json_printer_int8_vector_field@@Base+0x1e0>
   3824c:	ldr	r3, [r4, #20]
   38250:	add	r2, r3, #1
   38254:	str	r2, [r4, #20]
   38258:	strb	r9, [r3]
   3825c:	ldrb	r3, [r4, #25]
   38260:	cmp	r3, #0
   38264:	bne	381e0 <flatcc_json_printer_int8_vector_field@@Base+0x124>
   38268:	ldr	r2, [r4, #20]
   3826c:	ldr	r3, [r4, #16]
   38270:	cmp	r2, r3
   38274:	bcc	38228 <flatcc_json_printer_int8_vector_field@@Base+0x16c>
   38278:	ldr	r3, [r4, #44]	; 0x2c
   3827c:	mov	r1, fp
   38280:	mov	r0, r4
   38284:	blx	r3
   38288:	b	38228 <flatcc_json_printer_int8_vector_field@@Base+0x16c>
   3828c:	mov	r1, r6
   38290:	mov	r0, r4
   38294:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   38298:	b	38228 <flatcc_json_printer_int8_vector_field@@Base+0x16c>
   3829c:	ldrb	r3, [r4, #25]
   382a0:	cmp	r3, #0
   382a4:	bne	382c0 <flatcc_json_printer_int8_vector_field@@Base+0x204>
   382a8:	ldr	r3, [r4, #20]
   382ac:	add	r2, r3, #1
   382b0:	str	r2, [r4, #20]
   382b4:	mov	r2, #93	; 0x5d
   382b8:	strb	r2, [r3]
   382bc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   382c0:	ldr	r3, [r4, #20]
   382c4:	add	r2, r3, #1
   382c8:	str	r2, [r4, #20]
   382cc:	mov	r2, #10
   382d0:	strb	r2, [r3]
   382d4:	ldr	r5, [r4, #32]
   382d8:	sub	r5, r5, #1
   382dc:	str	r5, [r4, #32]
   382e0:	ldrb	r3, [r4, #25]
   382e4:	mul	r5, r5, r3
   382e8:	ldr	r0, [r4, #20]
   382ec:	add	r3, r0, r5
   382f0:	ldr	r2, [r4, #16]
   382f4:	cmp	r2, r3
   382f8:	bcc	38318 <flatcc_json_printer_int8_vector_field@@Base+0x25c>
   382fc:	mov	r2, r5
   38300:	mov	r1, #32
   38304:	bl	145c4 <memset@plt>
   38308:	ldr	r3, [r4, #20]
   3830c:	add	r5, r3, r5
   38310:	str	r5, [r4, #20]
   38314:	b	382a8 <flatcc_json_printer_int8_vector_field@@Base+0x1ec>
   38318:	mov	r1, r5
   3831c:	mov	r0, r4
   38320:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   38324:	b	382a8 <flatcc_json_printer_int8_vector_field@@Base+0x1ec>

00038328 <flatcc_json_printer_int16_vector_field@@Base>:
   38328:	add	r2, r2, #2
   3832c:	lsl	r2, r2, #1
   38330:	ldr	ip, [r1, #8]
   38334:	cmp	ip, r2
   38338:	bxle	lr
   3833c:	ldr	ip, [r1, #4]
   38340:	ldrh	ip, [ip, r2]
   38344:	cmp	ip, #0
   38348:	bxeq	lr
   3834c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38350:	ldr	r5, [r1]
   38354:	adds	lr, r5, ip
   38358:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3835c:	ldr	r2, [r1, #16]
   38360:	add	r4, r2, #1
   38364:	str	r4, [r1, #16]
   38368:	cmp	r2, #0
   3836c:	ldrne	r2, [r0, #20]
   38370:	addne	r1, r2, #1
   38374:	strne	r1, [r0, #20]
   38378:	movne	r1, #44	; 0x2c
   3837c:	strbne	r1, [r2]
   38380:	mov	r1, r3
   38384:	mov	r4, r0
   38388:	ldr	r3, [r5, ip]
   3838c:	add	r6, lr, r3
   38390:	ldr	r7, [lr, r3]
   38394:	ldr	r2, [sp, #40]	; 0x28
   38398:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3839c:	ldr	r3, [r4, #32]
   383a0:	add	r3, r3, #1
   383a4:	str	r3, [r4, #32]
   383a8:	ldr	r3, [r4, #20]
   383ac:	add	r2, r3, #1
   383b0:	str	r2, [r4, #20]
   383b4:	mov	r2, #91	; 0x5b
   383b8:	strb	r2, [r3]
   383bc:	cmp	r7, #0
   383c0:	beq	38510 <flatcc_json_printer_int16_vector_field@@Base+0x1e8>
   383c4:	ldrb	r3, [r4, #25]
   383c8:	cmp	r3, #0
   383cc:	bne	3841c <flatcc_json_printer_int16_vector_field@@Base+0xf4>
   383d0:	ldr	r2, [r4, #20]
   383d4:	ldr	r3, [r4, #16]
   383d8:	cmp	r2, r3
   383dc:	bcs	3843c <flatcc_json_printer_int16_vector_field@@Base+0x114>
   383e0:	ldr	r1, [r4, #20]
   383e4:	ldrsh	r0, [r6, #4]
   383e8:	bl	30cc8 <flatcc_json_parser_struct_as_root@@Base+0xd10>
   383ec:	ldr	r3, [r4, #20]
   383f0:	add	r0, r3, r0
   383f4:	str	r0, [r4, #20]
   383f8:	add	r6, r6, #6
   383fc:	sub	r5, r7, #2
   38400:	cmp	r7, #1
   38404:	beq	38510 <flatcc_json_printer_int16_vector_field@@Base+0x1e8>
   38408:	mov	r7, #44	; 0x2c
   3840c:	mov	r9, #0
   38410:	mov	r8, #10
   38414:	mov	sl, #32
   38418:	b	384c0 <flatcc_json_printer_int16_vector_field@@Base+0x198>
   3841c:	ldr	r3, [r4, #20]
   38420:	add	r2, r3, #1
   38424:	str	r2, [r4, #20]
   38428:	mov	r2, #10
   3842c:	strb	r2, [r3]
   38430:	mov	r0, r4
   38434:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   38438:	b	383e0 <flatcc_json_printer_int16_vector_field@@Base+0xb8>
   3843c:	ldr	r3, [r4, #44]	; 0x2c
   38440:	mov	r1, #0
   38444:	mov	r0, r4
   38448:	blx	r3
   3844c:	b	383e0 <flatcc_json_printer_int16_vector_field@@Base+0xb8>
   38450:	ldr	r3, [r4, #20]
   38454:	add	r2, r3, #1
   38458:	str	r2, [r4, #20]
   3845c:	strb	r8, [r3]
   38460:	ldrb	r3, [r4, #25]
   38464:	ldr	fp, [r4, #32]
   38468:	mul	fp, fp, r3
   3846c:	ldr	r0, [r4, #20]
   38470:	add	r3, r0, fp
   38474:	ldr	r2, [r4, #16]
   38478:	cmp	r2, r3
   3847c:	bcc	38500 <flatcc_json_printer_int16_vector_field@@Base+0x1d8>
   38480:	mov	r2, fp
   38484:	mov	r1, sl
   38488:	bl	145c4 <memset@plt>
   3848c:	ldr	r3, [r4, #20]
   38490:	add	fp, r3, fp
   38494:	str	fp, [r4, #20]
   38498:	ldr	r1, [r4, #20]
   3849c:	ldrsh	r0, [r6], #2
   384a0:	bl	30cc8 <flatcc_json_parser_struct_as_root@@Base+0xd10>
   384a4:	ldr	r3, [r4, #20]
   384a8:	add	r0, r3, r0
   384ac:	str	r0, [r4, #20]
   384b0:	sub	r3, r5, #1
   384b4:	cmp	r5, #0
   384b8:	beq	38510 <flatcc_json_printer_int16_vector_field@@Base+0x1e8>
   384bc:	mov	r5, r3
   384c0:	ldr	r3, [r4, #20]
   384c4:	add	r2, r3, #1
   384c8:	str	r2, [r4, #20]
   384cc:	strb	r7, [r3]
   384d0:	ldrb	r3, [r4, #25]
   384d4:	cmp	r3, #0
   384d8:	bne	38450 <flatcc_json_printer_int16_vector_field@@Base+0x128>
   384dc:	ldr	r2, [r4, #20]
   384e0:	ldr	r3, [r4, #16]
   384e4:	cmp	r2, r3
   384e8:	bcc	38498 <flatcc_json_printer_int16_vector_field@@Base+0x170>
   384ec:	ldr	r3, [r4, #44]	; 0x2c
   384f0:	mov	r1, r9
   384f4:	mov	r0, r4
   384f8:	blx	r3
   384fc:	b	38498 <flatcc_json_printer_int16_vector_field@@Base+0x170>
   38500:	mov	r1, fp
   38504:	mov	r0, r4
   38508:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3850c:	b	38498 <flatcc_json_printer_int16_vector_field@@Base+0x170>
   38510:	ldrb	r3, [r4, #25]
   38514:	cmp	r3, #0
   38518:	bne	38534 <flatcc_json_printer_int16_vector_field@@Base+0x20c>
   3851c:	ldr	r3, [r4, #20]
   38520:	add	r2, r3, #1
   38524:	str	r2, [r4, #20]
   38528:	mov	r2, #93	; 0x5d
   3852c:	strb	r2, [r3]
   38530:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38534:	ldr	r3, [r4, #20]
   38538:	add	r2, r3, #1
   3853c:	str	r2, [r4, #20]
   38540:	mov	r2, #10
   38544:	strb	r2, [r3]
   38548:	ldr	r5, [r4, #32]
   3854c:	sub	r5, r5, #1
   38550:	str	r5, [r4, #32]
   38554:	ldrb	r3, [r4, #25]
   38558:	mul	r5, r5, r3
   3855c:	ldr	r0, [r4, #20]
   38560:	add	r3, r0, r5
   38564:	ldr	r2, [r4, #16]
   38568:	cmp	r2, r3
   3856c:	bcc	3858c <flatcc_json_printer_int16_vector_field@@Base+0x264>
   38570:	mov	r2, r5
   38574:	mov	r1, #32
   38578:	bl	145c4 <memset@plt>
   3857c:	ldr	r3, [r4, #20]
   38580:	add	r5, r3, r5
   38584:	str	r5, [r4, #20]
   38588:	b	3851c <flatcc_json_printer_int16_vector_field@@Base+0x1f4>
   3858c:	mov	r1, r5
   38590:	mov	r0, r4
   38594:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   38598:	b	3851c <flatcc_json_printer_int16_vector_field@@Base+0x1f4>

0003859c <flatcc_json_printer_int32_vector_field@@Base>:
   3859c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   385a0:	ldr	r5, [sp, #40]	; 0x28
   385a4:	add	r2, r2, #2
   385a8:	lsl	r2, r2, #1
   385ac:	ldr	ip, [r1, #8]
   385b0:	cmp	ip, r2
   385b4:	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   385b8:	ldr	ip, [r1, #4]
   385bc:	ldrh	ip, [ip, r2]
   385c0:	cmp	ip, #0
   385c4:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   385c8:	ldr	r6, [r1]
   385cc:	adds	lr, r6, ip
   385d0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   385d4:	ldr	r2, [r1, #16]
   385d8:	add	r4, r2, #1
   385dc:	str	r4, [r1, #16]
   385e0:	cmp	r2, #0
   385e4:	ldrne	r2, [r0, #20]
   385e8:	addne	r1, r2, #1
   385ec:	strne	r1, [r0, #20]
   385f0:	movne	r1, #44	; 0x2c
   385f4:	strbne	r1, [r2]
   385f8:	mov	r8, r3
   385fc:	mov	r4, r0
   38600:	ldr	r3, [r6, ip]
   38604:	add	r6, lr, r3
   38608:	ldr	r7, [lr, r3]
   3860c:	ldrb	r3, [r0, #25]
   38610:	cmp	r3, #0
   38614:	bne	3866c <flatcc_json_printer_int32_vector_field@@Base+0xd0>
   38618:	ldr	r2, [r0, #20]
   3861c:	ldr	r3, [r0, #16]
   38620:	cmp	r2, r3
   38624:	bcs	386cc <flatcc_json_printer_int32_vector_field@@Base+0x130>
   38628:	ldr	r3, [r4, #20]
   3862c:	mov	r2, #34	; 0x22
   38630:	strb	r2, [r3]
   38634:	ldrb	r3, [r4, #26]
   38638:	ldr	r0, [r4, #20]
   3863c:	cmp	r3, #0
   38640:	addeq	r0, r0, #1
   38644:	str	r0, [r4, #20]
   38648:	add	r3, r0, r5
   3864c:	ldr	r2, [r4, #16]
   38650:	cmp	r2, r3
   38654:	bhi	386dc <flatcc_json_printer_int32_vector_field@@Base+0x140>
   38658:	mov	r2, r5
   3865c:	mov	r1, r8
   38660:	mov	r0, r4
   38664:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   38668:	b	386f4 <flatcc_json_printer_int32_vector_field@@Base+0x158>
   3866c:	ldr	r3, [r0, #20]
   38670:	add	r2, r3, #1
   38674:	str	r2, [r0, #20]
   38678:	mov	r2, #10
   3867c:	strb	r2, [r3]
   38680:	ldrb	r3, [r0, #25]
   38684:	ldr	r9, [r0, #32]
   38688:	mul	r9, r9, r3
   3868c:	ldr	r0, [r0, #20]
   38690:	add	r3, r0, r9
   38694:	ldr	r2, [r4, #16]
   38698:	cmp	r2, r3
   3869c:	bcc	386bc <flatcc_json_printer_int32_vector_field@@Base+0x120>
   386a0:	mov	r2, r9
   386a4:	mov	r1, #32
   386a8:	bl	145c4 <memset@plt>
   386ac:	ldr	r3, [r4, #20]
   386b0:	add	r9, r3, r9
   386b4:	str	r9, [r4, #20]
   386b8:	b	38628 <flatcc_json_printer_int32_vector_field@@Base+0x8c>
   386bc:	mov	r1, r9
   386c0:	mov	r0, r4
   386c4:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   386c8:	b	38628 <flatcc_json_printer_int32_vector_field@@Base+0x8c>
   386cc:	ldr	r3, [r0, #44]	; 0x2c
   386d0:	mov	r1, #0
   386d4:	blx	r3
   386d8:	b	38628 <flatcc_json_printer_int32_vector_field@@Base+0x8c>
   386dc:	mov	r2, r5
   386e0:	mov	r1, r8
   386e4:	bl	1454c <memcpy@plt>
   386e8:	ldr	r3, [r4, #20]
   386ec:	add	r5, r3, r5
   386f0:	str	r5, [r4, #20]
   386f4:	ldr	r3, [r4, #20]
   386f8:	mov	r2, #34	; 0x22
   386fc:	strb	r2, [r3]
   38700:	ldrb	r3, [r4, #26]
   38704:	clz	r3, r3
   38708:	lsr	r3, r3, #5
   3870c:	ldr	r1, [r4, #20]
   38710:	add	r2, r1, r3
   38714:	add	r2, r2, #1
   38718:	str	r2, [r4, #20]
   3871c:	mov	r2, #58	; 0x3a
   38720:	strb	r2, [r1, r3]
   38724:	ldr	r3, [r4, #20]
   38728:	mov	r2, #32
   3872c:	strb	r2, [r3]
   38730:	ldrb	r3, [r4, #25]
   38734:	adds	r3, r3, #0
   38738:	movne	r3, #1
   3873c:	ldr	r0, [r4, #20]
   38740:	add	r2, r0, r3
   38744:	ldr	r1, [r4, #32]
   38748:	add	r1, r1, #1
   3874c:	str	r1, [r4, #32]
   38750:	add	r2, r2, #1
   38754:	str	r2, [r4, #20]
   38758:	mov	r2, #91	; 0x5b
   3875c:	strb	r2, [r0, r3]
   38760:	cmp	r7, #0
   38764:	beq	388b4 <flatcc_json_printer_int32_vector_field@@Base+0x318>
   38768:	ldrb	r3, [r4, #25]
   3876c:	cmp	r3, #0
   38770:	bne	387c0 <flatcc_json_printer_int32_vector_field@@Base+0x224>
   38774:	ldr	r2, [r4, #20]
   38778:	ldr	r3, [r4, #16]
   3877c:	cmp	r2, r3
   38780:	bcs	387e0 <flatcc_json_printer_int32_vector_field@@Base+0x244>
   38784:	ldr	r1, [r4, #20]
   38788:	ldr	r0, [r6, #4]
   3878c:	bl	30cf8 <flatcc_json_parser_struct_as_root@@Base+0xd40>
   38790:	ldr	r3, [r4, #20]
   38794:	add	r0, r3, r0
   38798:	str	r0, [r4, #20]
   3879c:	add	r6, r6, #8
   387a0:	sub	r5, r7, #2
   387a4:	cmp	r7, #1
   387a8:	beq	388b4 <flatcc_json_printer_int32_vector_field@@Base+0x318>
   387ac:	mov	r7, #44	; 0x2c
   387b0:	mov	r9, #0
   387b4:	mov	r8, #10
   387b8:	mov	sl, #32
   387bc:	b	38864 <flatcc_json_printer_int32_vector_field@@Base+0x2c8>
   387c0:	ldr	r3, [r4, #20]
   387c4:	add	r2, r3, #1
   387c8:	str	r2, [r4, #20]
   387cc:	mov	r2, #10
   387d0:	strb	r2, [r3]
   387d4:	mov	r0, r4
   387d8:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   387dc:	b	38784 <flatcc_json_printer_int32_vector_field@@Base+0x1e8>
   387e0:	ldr	r3, [r4, #44]	; 0x2c
   387e4:	mov	r1, #0
   387e8:	mov	r0, r4
   387ec:	blx	r3
   387f0:	b	38784 <flatcc_json_printer_int32_vector_field@@Base+0x1e8>
   387f4:	ldr	r3, [r4, #20]
   387f8:	add	r2, r3, #1
   387fc:	str	r2, [r4, #20]
   38800:	strb	r8, [r3]
   38804:	ldrb	r3, [r4, #25]
   38808:	ldr	fp, [r4, #32]
   3880c:	mul	fp, fp, r3
   38810:	ldr	r0, [r4, #20]
   38814:	add	r3, r0, fp
   38818:	ldr	r2, [r4, #16]
   3881c:	cmp	r2, r3
   38820:	bcc	388a4 <flatcc_json_printer_int32_vector_field@@Base+0x308>
   38824:	mov	r2, fp
   38828:	mov	r1, sl
   3882c:	bl	145c4 <memset@plt>
   38830:	ldr	r3, [r4, #20]
   38834:	add	fp, r3, fp
   38838:	str	fp, [r4, #20]
   3883c:	ldr	r1, [r4, #20]
   38840:	ldr	r0, [r6], #4
   38844:	bl	30cf8 <flatcc_json_parser_struct_as_root@@Base+0xd40>
   38848:	ldr	r3, [r4, #20]
   3884c:	add	r0, r3, r0
   38850:	str	r0, [r4, #20]
   38854:	sub	r3, r5, #1
   38858:	cmp	r5, #0
   3885c:	beq	388b4 <flatcc_json_printer_int32_vector_field@@Base+0x318>
   38860:	mov	r5, r3
   38864:	ldr	r3, [r4, #20]
   38868:	add	r2, r3, #1
   3886c:	str	r2, [r4, #20]
   38870:	strb	r7, [r3]
   38874:	ldrb	r3, [r4, #25]
   38878:	cmp	r3, #0
   3887c:	bne	387f4 <flatcc_json_printer_int32_vector_field@@Base+0x258>
   38880:	ldr	r2, [r4, #20]
   38884:	ldr	r3, [r4, #16]
   38888:	cmp	r2, r3
   3888c:	bcc	3883c <flatcc_json_printer_int32_vector_field@@Base+0x2a0>
   38890:	ldr	r3, [r4, #44]	; 0x2c
   38894:	mov	r1, r9
   38898:	mov	r0, r4
   3889c:	blx	r3
   388a0:	b	3883c <flatcc_json_printer_int32_vector_field@@Base+0x2a0>
   388a4:	mov	r1, fp
   388a8:	mov	r0, r4
   388ac:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   388b0:	b	3883c <flatcc_json_printer_int32_vector_field@@Base+0x2a0>
   388b4:	ldrb	r3, [r4, #25]
   388b8:	cmp	r3, #0
   388bc:	bne	388d8 <flatcc_json_printer_int32_vector_field@@Base+0x33c>
   388c0:	ldr	r3, [r4, #20]
   388c4:	add	r2, r3, #1
   388c8:	str	r2, [r4, #20]
   388cc:	mov	r2, #93	; 0x5d
   388d0:	strb	r2, [r3]
   388d4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   388d8:	ldr	r3, [r4, #20]
   388dc:	add	r2, r3, #1
   388e0:	str	r2, [r4, #20]
   388e4:	mov	r2, #10
   388e8:	strb	r2, [r3]
   388ec:	ldr	r5, [r4, #32]
   388f0:	sub	r5, r5, #1
   388f4:	str	r5, [r4, #32]
   388f8:	ldrb	r3, [r4, #25]
   388fc:	mul	r5, r5, r3
   38900:	ldr	r0, [r4, #20]
   38904:	add	r3, r0, r5
   38908:	ldr	r2, [r4, #16]
   3890c:	cmp	r2, r3
   38910:	bcc	38930 <flatcc_json_printer_int32_vector_field@@Base+0x394>
   38914:	mov	r2, r5
   38918:	mov	r1, #32
   3891c:	bl	145c4 <memset@plt>
   38920:	ldr	r3, [r4, #20]
   38924:	add	r5, r3, r5
   38928:	str	r5, [r4, #20]
   3892c:	b	388c0 <flatcc_json_printer_int32_vector_field@@Base+0x324>
   38930:	mov	r1, r5
   38934:	mov	r0, r4
   38938:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3893c:	b	388c0 <flatcc_json_printer_int32_vector_field@@Base+0x324>

00038940 <flatcc_json_printer_int64_vector_field@@Base>:
   38940:	add	r2, r2, #2
   38944:	lsl	r2, r2, #1
   38948:	ldr	ip, [r1, #8]
   3894c:	cmp	ip, r2
   38950:	bxle	lr
   38954:	ldr	ip, [r1, #4]
   38958:	ldrh	ip, [ip, r2]
   3895c:	cmp	ip, #0
   38960:	bxeq	lr
   38964:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38968:	ldr	r5, [r1]
   3896c:	adds	lr, r5, ip
   38970:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38974:	ldr	r2, [r1, #16]
   38978:	add	r4, r2, #1
   3897c:	str	r4, [r1, #16]
   38980:	cmp	r2, #0
   38984:	ldrne	r2, [r0, #20]
   38988:	addne	r1, r2, #1
   3898c:	strne	r1, [r0, #20]
   38990:	movne	r1, #44	; 0x2c
   38994:	strbne	r1, [r2]
   38998:	mov	r1, r3
   3899c:	mov	r4, r0
   389a0:	ldr	r3, [r5, ip]
   389a4:	add	r6, lr, r3
   389a8:	ldr	r7, [lr, r3]
   389ac:	ldr	r2, [sp, #40]	; 0x28
   389b0:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   389b4:	ldr	r3, [r4, #32]
   389b8:	add	r3, r3, #1
   389bc:	str	r3, [r4, #32]
   389c0:	ldr	r3, [r4, #20]
   389c4:	add	r2, r3, #1
   389c8:	str	r2, [r4, #20]
   389cc:	mov	r2, #91	; 0x5b
   389d0:	strb	r2, [r3]
   389d4:	cmp	r7, #0
   389d8:	beq	38b28 <flatcc_json_printer_int64_vector_field@@Base+0x1e8>
   389dc:	ldrb	r3, [r4, #25]
   389e0:	cmp	r3, #0
   389e4:	bne	38a34 <flatcc_json_printer_int64_vector_field@@Base+0xf4>
   389e8:	ldr	r2, [r4, #20]
   389ec:	ldr	r3, [r4, #16]
   389f0:	cmp	r2, r3
   389f4:	bcs	38a54 <flatcc_json_printer_int64_vector_field@@Base+0x114>
   389f8:	ldr	r2, [r4, #20]
   389fc:	ldrd	r0, [r6, #4]
   38a00:	bl	30d20 <flatcc_json_parser_struct_as_root@@Base+0xd68>
   38a04:	ldr	r3, [r4, #20]
   38a08:	add	r0, r3, r0
   38a0c:	str	r0, [r4, #20]
   38a10:	add	r6, r6, #12
   38a14:	sub	r5, r7, #2
   38a18:	cmp	r7, #1
   38a1c:	beq	38b28 <flatcc_json_printer_int64_vector_field@@Base+0x1e8>
   38a20:	mov	r7, #44	; 0x2c
   38a24:	mov	r9, #0
   38a28:	mov	r8, #10
   38a2c:	mov	sl, #32
   38a30:	b	38ad8 <flatcc_json_printer_int64_vector_field@@Base+0x198>
   38a34:	ldr	r3, [r4, #20]
   38a38:	add	r2, r3, #1
   38a3c:	str	r2, [r4, #20]
   38a40:	mov	r2, #10
   38a44:	strb	r2, [r3]
   38a48:	mov	r0, r4
   38a4c:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   38a50:	b	389f8 <flatcc_json_printer_int64_vector_field@@Base+0xb8>
   38a54:	ldr	r3, [r4, #44]	; 0x2c
   38a58:	mov	r1, #0
   38a5c:	mov	r0, r4
   38a60:	blx	r3
   38a64:	b	389f8 <flatcc_json_printer_int64_vector_field@@Base+0xb8>
   38a68:	ldr	r3, [r4, #20]
   38a6c:	add	r2, r3, #1
   38a70:	str	r2, [r4, #20]
   38a74:	strb	r8, [r3]
   38a78:	ldrb	r3, [r4, #25]
   38a7c:	ldr	fp, [r4, #32]
   38a80:	mul	fp, fp, r3
   38a84:	ldr	r0, [r4, #20]
   38a88:	add	r3, r0, fp
   38a8c:	ldr	r2, [r4, #16]
   38a90:	cmp	r2, r3
   38a94:	bcc	38b18 <flatcc_json_printer_int64_vector_field@@Base+0x1d8>
   38a98:	mov	r2, fp
   38a9c:	mov	r1, sl
   38aa0:	bl	145c4 <memset@plt>
   38aa4:	ldr	r3, [r4, #20]
   38aa8:	add	fp, r3, fp
   38aac:	str	fp, [r4, #20]
   38ab0:	ldr	r2, [r4, #20]
   38ab4:	ldrd	r0, [r6], #8
   38ab8:	bl	30d20 <flatcc_json_parser_struct_as_root@@Base+0xd68>
   38abc:	ldr	r3, [r4, #20]
   38ac0:	add	r0, r3, r0
   38ac4:	str	r0, [r4, #20]
   38ac8:	sub	r3, r5, #1
   38acc:	cmp	r5, #0
   38ad0:	beq	38b28 <flatcc_json_printer_int64_vector_field@@Base+0x1e8>
   38ad4:	mov	r5, r3
   38ad8:	ldr	r3, [r4, #20]
   38adc:	add	r2, r3, #1
   38ae0:	str	r2, [r4, #20]
   38ae4:	strb	r7, [r3]
   38ae8:	ldrb	r3, [r4, #25]
   38aec:	cmp	r3, #0
   38af0:	bne	38a68 <flatcc_json_printer_int64_vector_field@@Base+0x128>
   38af4:	ldr	r2, [r4, #20]
   38af8:	ldr	r3, [r4, #16]
   38afc:	cmp	r2, r3
   38b00:	bcc	38ab0 <flatcc_json_printer_int64_vector_field@@Base+0x170>
   38b04:	ldr	r3, [r4, #44]	; 0x2c
   38b08:	mov	r1, r9
   38b0c:	mov	r0, r4
   38b10:	blx	r3
   38b14:	b	38ab0 <flatcc_json_printer_int64_vector_field@@Base+0x170>
   38b18:	mov	r1, fp
   38b1c:	mov	r0, r4
   38b20:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   38b24:	b	38ab0 <flatcc_json_printer_int64_vector_field@@Base+0x170>
   38b28:	ldrb	r3, [r4, #25]
   38b2c:	cmp	r3, #0
   38b30:	bne	38b4c <flatcc_json_printer_int64_vector_field@@Base+0x20c>
   38b34:	ldr	r3, [r4, #20]
   38b38:	add	r2, r3, #1
   38b3c:	str	r2, [r4, #20]
   38b40:	mov	r2, #93	; 0x5d
   38b44:	strb	r2, [r3]
   38b48:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38b4c:	ldr	r3, [r4, #20]
   38b50:	add	r2, r3, #1
   38b54:	str	r2, [r4, #20]
   38b58:	mov	r2, #10
   38b5c:	strb	r2, [r3]
   38b60:	ldr	r5, [r4, #32]
   38b64:	sub	r5, r5, #1
   38b68:	str	r5, [r4, #32]
   38b6c:	ldrb	r3, [r4, #25]
   38b70:	mul	r5, r5, r3
   38b74:	ldr	r0, [r4, #20]
   38b78:	add	r3, r0, r5
   38b7c:	ldr	r2, [r4, #16]
   38b80:	cmp	r2, r3
   38b84:	bcc	38ba4 <flatcc_json_printer_int64_vector_field@@Base+0x264>
   38b88:	mov	r2, r5
   38b8c:	mov	r1, #32
   38b90:	bl	145c4 <memset@plt>
   38b94:	ldr	r3, [r4, #20]
   38b98:	add	r5, r3, r5
   38b9c:	str	r5, [r4, #20]
   38ba0:	b	38b34 <flatcc_json_printer_int64_vector_field@@Base+0x1f4>
   38ba4:	mov	r1, r5
   38ba8:	mov	r0, r4
   38bac:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   38bb0:	b	38b34 <flatcc_json_printer_int64_vector_field@@Base+0x1f4>

00038bb4 <flatcc_json_printer_bool_vector_field@@Base>:
   38bb4:	add	r2, r2, #2
   38bb8:	lsl	r2, r2, #1
   38bbc:	ldr	ip, [r1, #8]
   38bc0:	cmp	ip, r2
   38bc4:	bxle	lr
   38bc8:	ldr	ip, [r1, #4]
   38bcc:	ldrh	ip, [ip, r2]
   38bd0:	cmp	ip, #0
   38bd4:	bxeq	lr
   38bd8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38bdc:	ldr	r5, [r1]
   38be0:	adds	lr, r5, ip
   38be4:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38be8:	ldr	r2, [r1, #16]
   38bec:	add	r4, r2, #1
   38bf0:	str	r4, [r1, #16]
   38bf4:	cmp	r2, #0
   38bf8:	ldrne	r2, [r0, #20]
   38bfc:	addne	r1, r2, #1
   38c00:	strne	r1, [r0, #20]
   38c04:	movne	r1, #44	; 0x2c
   38c08:	strbne	r1, [r2]
   38c0c:	mov	r1, r3
   38c10:	mov	r4, r0
   38c14:	ldr	r3, [r5, ip]
   38c18:	add	r8, lr, r3
   38c1c:	ldr	r7, [lr, r3]
   38c20:	ldr	r2, [sp, #40]	; 0x28
   38c24:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   38c28:	ldr	r3, [r4, #32]
   38c2c:	add	r3, r3, #1
   38c30:	str	r3, [r4, #32]
   38c34:	ldr	r3, [r4, #20]
   38c38:	add	r2, r3, #1
   38c3c:	str	r2, [r4, #20]
   38c40:	mov	r2, #91	; 0x5b
   38c44:	strb	r2, [r3]
   38c48:	cmp	r7, #0
   38c4c:	beq	38d94 <flatcc_json_printer_bool_vector_field@@Base+0x1e0>
   38c50:	ldrb	r3, [r4, #25]
   38c54:	cmp	r3, #0
   38c58:	bne	38ca4 <flatcc_json_printer_bool_vector_field@@Base+0xf0>
   38c5c:	ldr	r2, [r4, #20]
   38c60:	ldr	r3, [r4, #16]
   38c64:	cmp	r2, r3
   38c68:	bcs	38cc4 <flatcc_json_printer_bool_vector_field@@Base+0x110>
   38c6c:	ldr	r1, [r4, #20]
   38c70:	ldrb	r0, [r8, #4]
   38c74:	bl	313dc <flatcc_json_parser_struct_as_root@@Base+0x1424>
   38c78:	ldr	r3, [r4, #20]
   38c7c:	add	r0, r3, r0
   38c80:	str	r0, [r4, #20]
   38c84:	add	r5, r8, #5
   38c88:	cmp	r7, #1
   38c8c:	beq	38d94 <flatcc_json_printer_bool_vector_field@@Base+0x1e0>
   38c90:	mov	r9, #44	; 0x2c
   38c94:	mov	sl, #10
   38c98:	mov	fp, #0
   38c9c:	add	r7, r7, #4
   38ca0:	b	38d44 <flatcc_json_printer_bool_vector_field@@Base+0x190>
   38ca4:	ldr	r3, [r4, #20]
   38ca8:	add	r2, r3, #1
   38cac:	str	r2, [r4, #20]
   38cb0:	mov	r2, #10
   38cb4:	strb	r2, [r3]
   38cb8:	mov	r0, r4
   38cbc:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   38cc0:	b	38c6c <flatcc_json_printer_bool_vector_field@@Base+0xb8>
   38cc4:	ldr	r3, [r4, #44]	; 0x2c
   38cc8:	mov	r1, #0
   38ccc:	mov	r0, r4
   38cd0:	blx	r3
   38cd4:	b	38c6c <flatcc_json_printer_bool_vector_field@@Base+0xb8>
   38cd8:	ldr	r3, [r4, #20]
   38cdc:	add	r2, r3, #1
   38ce0:	str	r2, [r4, #20]
   38ce4:	strb	sl, [r3]
   38ce8:	ldrb	r3, [r4, #25]
   38cec:	ldr	r6, [r4, #32]
   38cf0:	mul	r6, r6, r3
   38cf4:	ldr	r0, [r4, #20]
   38cf8:	add	r3, r0, r6
   38cfc:	ldr	r2, [r4, #16]
   38d00:	cmp	r2, r3
   38d04:	bcc	38d84 <flatcc_json_printer_bool_vector_field@@Base+0x1d0>
   38d08:	mov	r2, r6
   38d0c:	mov	r1, #32
   38d10:	bl	145c4 <memset@plt>
   38d14:	ldr	r3, [r4, #20]
   38d18:	add	r6, r3, r6
   38d1c:	str	r6, [r4, #20]
   38d20:	ldr	r1, [r4, #20]
   38d24:	ldrb	r0, [r5], #1
   38d28:	bl	313dc <flatcc_json_parser_struct_as_root@@Base+0x1424>
   38d2c:	ldr	r3, [r4, #20]
   38d30:	add	r0, r3, r0
   38d34:	str	r0, [r4, #20]
   38d38:	sub	r3, r7, r5
   38d3c:	cmn	r8, r3
   38d40:	beq	38d94 <flatcc_json_printer_bool_vector_field@@Base+0x1e0>
   38d44:	ldr	r3, [r4, #20]
   38d48:	add	r2, r3, #1
   38d4c:	str	r2, [r4, #20]
   38d50:	strb	r9, [r3]
   38d54:	ldrb	r3, [r4, #25]
   38d58:	cmp	r3, #0
   38d5c:	bne	38cd8 <flatcc_json_printer_bool_vector_field@@Base+0x124>
   38d60:	ldr	r2, [r4, #20]
   38d64:	ldr	r3, [r4, #16]
   38d68:	cmp	r2, r3
   38d6c:	bcc	38d20 <flatcc_json_printer_bool_vector_field@@Base+0x16c>
   38d70:	ldr	r3, [r4, #44]	; 0x2c
   38d74:	mov	r1, fp
   38d78:	mov	r0, r4
   38d7c:	blx	r3
   38d80:	b	38d20 <flatcc_json_printer_bool_vector_field@@Base+0x16c>
   38d84:	mov	r1, r6
   38d88:	mov	r0, r4
   38d8c:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   38d90:	b	38d20 <flatcc_json_printer_bool_vector_field@@Base+0x16c>
   38d94:	ldrb	r3, [r4, #25]
   38d98:	cmp	r3, #0
   38d9c:	bne	38db8 <flatcc_json_printer_bool_vector_field@@Base+0x204>
   38da0:	ldr	r3, [r4, #20]
   38da4:	add	r2, r3, #1
   38da8:	str	r2, [r4, #20]
   38dac:	mov	r2, #93	; 0x5d
   38db0:	strb	r2, [r3]
   38db4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38db8:	ldr	r3, [r4, #20]
   38dbc:	add	r2, r3, #1
   38dc0:	str	r2, [r4, #20]
   38dc4:	mov	r2, #10
   38dc8:	strb	r2, [r3]
   38dcc:	ldr	r5, [r4, #32]
   38dd0:	sub	r5, r5, #1
   38dd4:	str	r5, [r4, #32]
   38dd8:	ldrb	r3, [r4, #25]
   38ddc:	mul	r5, r5, r3
   38de0:	ldr	r0, [r4, #20]
   38de4:	add	r3, r0, r5
   38de8:	ldr	r2, [r4, #16]
   38dec:	cmp	r2, r3
   38df0:	bcc	38e10 <flatcc_json_printer_bool_vector_field@@Base+0x25c>
   38df4:	mov	r2, r5
   38df8:	mov	r1, #32
   38dfc:	bl	145c4 <memset@plt>
   38e00:	ldr	r3, [r4, #20]
   38e04:	add	r5, r3, r5
   38e08:	str	r5, [r4, #20]
   38e0c:	b	38da0 <flatcc_json_printer_bool_vector_field@@Base+0x1ec>
   38e10:	mov	r1, r5
   38e14:	mov	r0, r4
   38e18:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   38e1c:	b	38da0 <flatcc_json_printer_bool_vector_field@@Base+0x1ec>

00038e20 <flatcc_json_printer_float_vector_field@@Base>:
   38e20:	add	r2, r2, #2
   38e24:	lsl	r2, r2, #1
   38e28:	ldr	ip, [r1, #8]
   38e2c:	cmp	ip, r2
   38e30:	bxle	lr
   38e34:	ldr	ip, [r1, #4]
   38e38:	ldrh	ip, [ip, r2]
   38e3c:	cmp	ip, #0
   38e40:	bxeq	lr
   38e44:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38e48:	ldr	r5, [r1]
   38e4c:	adds	lr, r5, ip
   38e50:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38e54:	ldr	r2, [r1, #16]
   38e58:	add	r4, r2, #1
   38e5c:	str	r4, [r1, #16]
   38e60:	cmp	r2, #0
   38e64:	ldrne	r2, [r0, #20]
   38e68:	addne	r1, r2, #1
   38e6c:	strne	r1, [r0, #20]
   38e70:	movne	r1, #44	; 0x2c
   38e74:	strbne	r1, [r2]
   38e78:	mov	r1, r3
   38e7c:	mov	r4, r0
   38e80:	ldr	r3, [r5, ip]
   38e84:	add	r6, lr, r3
   38e88:	ldr	r7, [lr, r3]
   38e8c:	ldr	r2, [sp, #40]	; 0x28
   38e90:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   38e94:	ldr	r3, [r4, #32]
   38e98:	add	r3, r3, #1
   38e9c:	str	r3, [r4, #32]
   38ea0:	ldr	r3, [r4, #20]
   38ea4:	add	r2, r3, #1
   38ea8:	str	r2, [r4, #20]
   38eac:	mov	r2, #91	; 0x5b
   38eb0:	strb	r2, [r3]
   38eb4:	cmp	r7, #0
   38eb8:	beq	39010 <flatcc_json_printer_float_vector_field@@Base+0x1f0>
   38ebc:	ldrb	r3, [r4, #25]
   38ec0:	cmp	r3, #0
   38ec4:	bne	38f18 <flatcc_json_printer_float_vector_field@@Base+0xf8>
   38ec8:	ldr	r2, [r4, #20]
   38ecc:	ldr	r3, [r4, #16]
   38ed0:	cmp	r2, r3
   38ed4:	bcs	38f38 <flatcc_json_printer_float_vector_field@@Base+0x118>
   38ed8:	vldr	s0, [r6, #4]
   38edc:	ldr	r0, [r4, #20]
   38ee0:	vcvt.f64.f32	d0, s0
   38ee4:	bl	31ac4 <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   38ee8:	ldr	r3, [r4, #20]
   38eec:	add	r0, r3, r0
   38ef0:	str	r0, [r4, #20]
   38ef4:	add	r6, r6, #8
   38ef8:	sub	r5, r7, #2
   38efc:	cmp	r7, #1
   38f00:	beq	39010 <flatcc_json_printer_float_vector_field@@Base+0x1f0>
   38f04:	mov	r7, #44	; 0x2c
   38f08:	mov	r9, #0
   38f0c:	mov	r8, #10
   38f10:	mov	sl, #32
   38f14:	b	38fc0 <flatcc_json_printer_float_vector_field@@Base+0x1a0>
   38f18:	ldr	r3, [r4, #20]
   38f1c:	add	r2, r3, #1
   38f20:	str	r2, [r4, #20]
   38f24:	mov	r2, #10
   38f28:	strb	r2, [r3]
   38f2c:	mov	r0, r4
   38f30:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   38f34:	b	38ed8 <flatcc_json_printer_float_vector_field@@Base+0xb8>
   38f38:	ldr	r3, [r4, #44]	; 0x2c
   38f3c:	mov	r1, #0
   38f40:	mov	r0, r4
   38f44:	blx	r3
   38f48:	b	38ed8 <flatcc_json_printer_float_vector_field@@Base+0xb8>
   38f4c:	ldr	r3, [r4, #20]
   38f50:	add	r2, r3, #1
   38f54:	str	r2, [r4, #20]
   38f58:	strb	r8, [r3]
   38f5c:	ldrb	r3, [r4, #25]
   38f60:	ldr	fp, [r4, #32]
   38f64:	mul	fp, fp, r3
   38f68:	ldr	r0, [r4, #20]
   38f6c:	add	r3, r0, fp
   38f70:	ldr	r2, [r4, #16]
   38f74:	cmp	r2, r3
   38f78:	bcc	39000 <flatcc_json_printer_float_vector_field@@Base+0x1e0>
   38f7c:	mov	r2, fp
   38f80:	mov	r1, sl
   38f84:	bl	145c4 <memset@plt>
   38f88:	ldr	r3, [r4, #20]
   38f8c:	add	fp, r3, fp
   38f90:	str	fp, [r4, #20]
   38f94:	vldmia	r6!, {s0}
   38f98:	ldr	r0, [r4, #20]
   38f9c:	vcvt.f64.f32	d0, s0
   38fa0:	bl	31ac4 <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   38fa4:	ldr	r3, [r4, #20]
   38fa8:	add	r0, r3, r0
   38fac:	str	r0, [r4, #20]
   38fb0:	sub	r3, r5, #1
   38fb4:	cmp	r5, #0
   38fb8:	beq	39010 <flatcc_json_printer_float_vector_field@@Base+0x1f0>
   38fbc:	mov	r5, r3
   38fc0:	ldr	r3, [r4, #20]
   38fc4:	add	r2, r3, #1
   38fc8:	str	r2, [r4, #20]
   38fcc:	strb	r7, [r3]
   38fd0:	ldrb	r3, [r4, #25]
   38fd4:	cmp	r3, #0
   38fd8:	bne	38f4c <flatcc_json_printer_float_vector_field@@Base+0x12c>
   38fdc:	ldr	r2, [r4, #20]
   38fe0:	ldr	r3, [r4, #16]
   38fe4:	cmp	r2, r3
   38fe8:	bcc	38f94 <flatcc_json_printer_float_vector_field@@Base+0x174>
   38fec:	ldr	r3, [r4, #44]	; 0x2c
   38ff0:	mov	r1, r9
   38ff4:	mov	r0, r4
   38ff8:	blx	r3
   38ffc:	b	38f94 <flatcc_json_printer_float_vector_field@@Base+0x174>
   39000:	mov	r1, fp
   39004:	mov	r0, r4
   39008:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3900c:	b	38f94 <flatcc_json_printer_float_vector_field@@Base+0x174>
   39010:	ldrb	r3, [r4, #25]
   39014:	cmp	r3, #0
   39018:	bne	39034 <flatcc_json_printer_float_vector_field@@Base+0x214>
   3901c:	ldr	r3, [r4, #20]
   39020:	add	r2, r3, #1
   39024:	str	r2, [r4, #20]
   39028:	mov	r2, #93	; 0x5d
   3902c:	strb	r2, [r3]
   39030:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39034:	ldr	r3, [r4, #20]
   39038:	add	r2, r3, #1
   3903c:	str	r2, [r4, #20]
   39040:	mov	r2, #10
   39044:	strb	r2, [r3]
   39048:	ldr	r5, [r4, #32]
   3904c:	sub	r5, r5, #1
   39050:	str	r5, [r4, #32]
   39054:	ldrb	r3, [r4, #25]
   39058:	mul	r5, r5, r3
   3905c:	ldr	r0, [r4, #20]
   39060:	add	r3, r0, r5
   39064:	ldr	r2, [r4, #16]
   39068:	cmp	r2, r3
   3906c:	bcc	3908c <flatcc_json_printer_float_vector_field@@Base+0x26c>
   39070:	mov	r2, r5
   39074:	mov	r1, #32
   39078:	bl	145c4 <memset@plt>
   3907c:	ldr	r3, [r4, #20]
   39080:	add	r5, r3, r5
   39084:	str	r5, [r4, #20]
   39088:	b	3901c <flatcc_json_printer_float_vector_field@@Base+0x1fc>
   3908c:	mov	r1, r5
   39090:	mov	r0, r4
   39094:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   39098:	b	3901c <flatcc_json_printer_float_vector_field@@Base+0x1fc>

0003909c <flatcc_json_printer_double_vector_field@@Base>:
   3909c:	add	r2, r2, #2
   390a0:	lsl	r2, r2, #1
   390a4:	ldr	ip, [r1, #8]
   390a8:	cmp	ip, r2
   390ac:	bxle	lr
   390b0:	ldr	ip, [r1, #4]
   390b4:	ldrh	ip, [ip, r2]
   390b8:	cmp	ip, #0
   390bc:	bxeq	lr
   390c0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   390c4:	ldr	r5, [r1]
   390c8:	adds	lr, r5, ip
   390cc:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   390d0:	ldr	r2, [r1, #16]
   390d4:	add	r4, r2, #1
   390d8:	str	r4, [r1, #16]
   390dc:	cmp	r2, #0
   390e0:	ldrne	r2, [r0, #20]
   390e4:	addne	r1, r2, #1
   390e8:	strne	r1, [r0, #20]
   390ec:	movne	r1, #44	; 0x2c
   390f0:	strbne	r1, [r2]
   390f4:	mov	r1, r3
   390f8:	mov	r4, r0
   390fc:	ldr	r3, [r5, ip]
   39100:	add	r6, lr, r3
   39104:	ldr	r7, [lr, r3]
   39108:	ldr	r2, [sp, #40]	; 0x28
   3910c:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   39110:	ldr	r3, [r4, #32]
   39114:	add	r3, r3, #1
   39118:	str	r3, [r4, #32]
   3911c:	ldr	r3, [r4, #20]
   39120:	add	r2, r3, #1
   39124:	str	r2, [r4, #20]
   39128:	mov	r2, #91	; 0x5b
   3912c:	strb	r2, [r3]
   39130:	cmp	r7, #0
   39134:	beq	39284 <flatcc_json_printer_double_vector_field@@Base+0x1e8>
   39138:	ldrb	r3, [r4, #25]
   3913c:	cmp	r3, #0
   39140:	bne	39190 <flatcc_json_printer_double_vector_field@@Base+0xf4>
   39144:	ldr	r2, [r4, #20]
   39148:	ldr	r3, [r4, #16]
   3914c:	cmp	r2, r3
   39150:	bcs	391b0 <flatcc_json_printer_double_vector_field@@Base+0x114>
   39154:	ldr	r0, [r4, #20]
   39158:	vldr	d0, [r6, #4]
   3915c:	bl	31ac4 <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   39160:	ldr	r3, [r4, #20]
   39164:	add	r0, r3, r0
   39168:	str	r0, [r4, #20]
   3916c:	add	r6, r6, #12
   39170:	sub	r5, r7, #2
   39174:	cmp	r7, #1
   39178:	beq	39284 <flatcc_json_printer_double_vector_field@@Base+0x1e8>
   3917c:	mov	r7, #44	; 0x2c
   39180:	mov	r9, #0
   39184:	mov	r8, #10
   39188:	mov	sl, #32
   3918c:	b	39234 <flatcc_json_printer_double_vector_field@@Base+0x198>
   39190:	ldr	r3, [r4, #20]
   39194:	add	r2, r3, #1
   39198:	str	r2, [r4, #20]
   3919c:	mov	r2, #10
   391a0:	strb	r2, [r3]
   391a4:	mov	r0, r4
   391a8:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   391ac:	b	39154 <flatcc_json_printer_double_vector_field@@Base+0xb8>
   391b0:	ldr	r3, [r4, #44]	; 0x2c
   391b4:	mov	r1, #0
   391b8:	mov	r0, r4
   391bc:	blx	r3
   391c0:	b	39154 <flatcc_json_printer_double_vector_field@@Base+0xb8>
   391c4:	ldr	r3, [r4, #20]
   391c8:	add	r2, r3, #1
   391cc:	str	r2, [r4, #20]
   391d0:	strb	r8, [r3]
   391d4:	ldrb	r3, [r4, #25]
   391d8:	ldr	fp, [r4, #32]
   391dc:	mul	fp, fp, r3
   391e0:	ldr	r0, [r4, #20]
   391e4:	add	r3, r0, fp
   391e8:	ldr	r2, [r4, #16]
   391ec:	cmp	r2, r3
   391f0:	bcc	39274 <flatcc_json_printer_double_vector_field@@Base+0x1d8>
   391f4:	mov	r2, fp
   391f8:	mov	r1, sl
   391fc:	bl	145c4 <memset@plt>
   39200:	ldr	r3, [r4, #20]
   39204:	add	fp, r3, fp
   39208:	str	fp, [r4, #20]
   3920c:	ldr	r0, [r4, #20]
   39210:	vldmia	r6!, {d0}
   39214:	bl	31ac4 <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   39218:	ldr	r3, [r4, #20]
   3921c:	add	r0, r3, r0
   39220:	str	r0, [r4, #20]
   39224:	sub	r3, r5, #1
   39228:	cmp	r5, #0
   3922c:	beq	39284 <flatcc_json_printer_double_vector_field@@Base+0x1e8>
   39230:	mov	r5, r3
   39234:	ldr	r3, [r4, #20]
   39238:	add	r2, r3, #1
   3923c:	str	r2, [r4, #20]
   39240:	strb	r7, [r3]
   39244:	ldrb	r3, [r4, #25]
   39248:	cmp	r3, #0
   3924c:	bne	391c4 <flatcc_json_printer_double_vector_field@@Base+0x128>
   39250:	ldr	r2, [r4, #20]
   39254:	ldr	r3, [r4, #16]
   39258:	cmp	r2, r3
   3925c:	bcc	3920c <flatcc_json_printer_double_vector_field@@Base+0x170>
   39260:	ldr	r3, [r4, #44]	; 0x2c
   39264:	mov	r1, r9
   39268:	mov	r0, r4
   3926c:	blx	r3
   39270:	b	3920c <flatcc_json_printer_double_vector_field@@Base+0x170>
   39274:	mov	r1, fp
   39278:	mov	r0, r4
   3927c:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   39280:	b	3920c <flatcc_json_printer_double_vector_field@@Base+0x170>
   39284:	ldrb	r3, [r4, #25]
   39288:	cmp	r3, #0
   3928c:	bne	392a8 <flatcc_json_printer_double_vector_field@@Base+0x20c>
   39290:	ldr	r3, [r4, #20]
   39294:	add	r2, r3, #1
   39298:	str	r2, [r4, #20]
   3929c:	mov	r2, #93	; 0x5d
   392a0:	strb	r2, [r3]
   392a4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   392a8:	ldr	r3, [r4, #20]
   392ac:	add	r2, r3, #1
   392b0:	str	r2, [r4, #20]
   392b4:	mov	r2, #10
   392b8:	strb	r2, [r3]
   392bc:	ldr	r5, [r4, #32]
   392c0:	sub	r5, r5, #1
   392c4:	str	r5, [r4, #32]
   392c8:	ldrb	r3, [r4, #25]
   392cc:	mul	r5, r5, r3
   392d0:	ldr	r0, [r4, #20]
   392d4:	add	r3, r0, r5
   392d8:	ldr	r2, [r4, #16]
   392dc:	cmp	r2, r3
   392e0:	bcc	39300 <flatcc_json_printer_double_vector_field@@Base+0x264>
   392e4:	mov	r2, r5
   392e8:	mov	r1, #32
   392ec:	bl	145c4 <memset@plt>
   392f0:	ldr	r3, [r4, #20]
   392f4:	add	r5, r3, r5
   392f8:	str	r5, [r4, #20]
   392fc:	b	39290 <flatcc_json_printer_double_vector_field@@Base+0x1f4>
   39300:	mov	r1, r5
   39304:	mov	r0, r4
   39308:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3930c:	b	39290 <flatcc_json_printer_double_vector_field@@Base+0x1f4>

00039310 <flatcc_json_printer_utype_enum_vector_field@@Base>:
   39310:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39314:	sub	sp, sp, #12
   39318:	mov	r4, r0
   3931c:	ldr	r9, [sp, #52]	; 0x34
   39320:	ldrb	r0, [r0, #27]
   39324:	cmp	r0, #0
   39328:	bne	39408 <flatcc_json_printer_utype_enum_vector_field@@Base+0xf8>
   3932c:	add	r2, r2, #2
   39330:	lsl	r2, r2, #1
   39334:	ldr	r0, [r1, #8]
   39338:	cmp	r0, r2
   3933c:	ble	39520 <flatcc_json_printer_utype_enum_vector_field@@Base+0x210>
   39340:	ldr	r0, [r1, #4]
   39344:	ldrh	r0, [r0, r2]
   39348:	cmp	r0, #0
   3934c:	beq	39520 <flatcc_json_printer_utype_enum_vector_field@@Base+0x210>
   39350:	ldr	r5, [r1]
   39354:	adds	ip, r5, r0
   39358:	beq	39520 <flatcc_json_printer_utype_enum_vector_field@@Base+0x210>
   3935c:	ldr	r2, [r1, #16]
   39360:	add	lr, r2, #1
   39364:	str	lr, [r1, #16]
   39368:	cmp	r2, #0
   3936c:	ldrne	r2, [r4, #20]
   39370:	addne	r1, r2, #1
   39374:	strne	r1, [r4, #20]
   39378:	movne	r1, #44	; 0x2c
   3937c:	strbne	r1, [r2]
   39380:	ldr	r2, [r5, r0]
   39384:	add	r8, ip, r2
   39388:	ldr	r7, [ip, r2]
   3938c:	ldr	r2, [sp, #48]	; 0x30
   39390:	mov	r1, r3
   39394:	mov	r0, r4
   39398:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3939c:	ldr	r3, [r4, #32]
   393a0:	add	r3, r3, #1
   393a4:	str	r3, [r4, #32]
   393a8:	ldr	r3, [r4, #20]
   393ac:	add	r2, r3, #1
   393b0:	str	r2, [r4, #20]
   393b4:	mov	r2, #91	; 0x5b
   393b8:	strb	r2, [r3]
   393bc:	cmp	r7, #0
   393c0:	beq	39500 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1f0>
   393c4:	ldrb	r3, [r4, #25]
   393c8:	cmp	r3, #0
   393cc:	bne	3941c <flatcc_json_printer_utype_enum_vector_field@@Base+0x10c>
   393d0:	ldr	r2, [r4, #20]
   393d4:	ldr	r3, [r4, #16]
   393d8:	cmp	r2, r3
   393dc:	bcs	3943c <flatcc_json_printer_utype_enum_vector_field@@Base+0x12c>
   393e0:	ldrb	r1, [r8, #4]
   393e4:	mov	r0, r4
   393e8:	blx	r9
   393ec:	add	r5, r8, #5
   393f0:	cmp	r7, #1
   393f4:	beq	39500 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1f0>
   393f8:	mov	sl, #44	; 0x2c
   393fc:	mov	fp, #10
   39400:	add	r7, r7, #4
   39404:	b	394b0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1a0>
   39408:	ldr	r0, [sp, #48]	; 0x30
   3940c:	str	r0, [sp]
   39410:	mov	r0, r4
   39414:	bl	37488 <flatcc_json_printer_utype_vector_field@@Base>
   39418:	b	39520 <flatcc_json_printer_utype_enum_vector_field@@Base+0x210>
   3941c:	ldr	r3, [r4, #20]
   39420:	add	r2, r3, #1
   39424:	str	r2, [r4, #20]
   39428:	mov	r2, #10
   3942c:	strb	r2, [r3]
   39430:	mov	r0, r4
   39434:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   39438:	b	393e0 <flatcc_json_printer_utype_enum_vector_field@@Base+0xd0>
   3943c:	ldr	r3, [r4, #44]	; 0x2c
   39440:	mov	r1, #0
   39444:	mov	r0, r4
   39448:	blx	r3
   3944c:	b	393e0 <flatcc_json_printer_utype_enum_vector_field@@Base+0xd0>
   39450:	ldr	r3, [r4, #20]
   39454:	add	r2, r3, #1
   39458:	str	r2, [r4, #20]
   3945c:	strb	fp, [r3]
   39460:	ldrb	r3, [r4, #25]
   39464:	ldr	r6, [r4, #32]
   39468:	mul	r6, r6, r3
   3946c:	ldr	r0, [r4, #20]
   39470:	add	r3, r0, r6
   39474:	ldr	r2, [r4, #16]
   39478:	cmp	r2, r3
   3947c:	bcc	394f0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1e0>
   39480:	mov	r2, r6
   39484:	mov	r1, #32
   39488:	bl	145c4 <memset@plt>
   3948c:	ldr	r3, [r4, #20]
   39490:	add	r6, r3, r6
   39494:	str	r6, [r4, #20]
   39498:	ldrb	r1, [r5], #1
   3949c:	mov	r0, r4
   394a0:	blx	r9
   394a4:	sub	r3, r7, r5
   394a8:	cmn	r8, r3
   394ac:	beq	39500 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1f0>
   394b0:	ldr	r3, [r4, #20]
   394b4:	add	r2, r3, #1
   394b8:	str	r2, [r4, #20]
   394bc:	strb	sl, [r3]
   394c0:	ldrb	r3, [r4, #25]
   394c4:	cmp	r3, #0
   394c8:	bne	39450 <flatcc_json_printer_utype_enum_vector_field@@Base+0x140>
   394cc:	ldr	r2, [r4, #20]
   394d0:	ldr	r3, [r4, #16]
   394d4:	cmp	r2, r3
   394d8:	bcc	39498 <flatcc_json_printer_utype_enum_vector_field@@Base+0x188>
   394dc:	ldr	r3, [r4, #44]	; 0x2c
   394e0:	mov	r1, #0
   394e4:	mov	r0, r4
   394e8:	blx	r3
   394ec:	b	39498 <flatcc_json_printer_utype_enum_vector_field@@Base+0x188>
   394f0:	mov	r1, r6
   394f4:	mov	r0, r4
   394f8:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   394fc:	b	39498 <flatcc_json_printer_utype_enum_vector_field@@Base+0x188>
   39500:	ldrb	r3, [r4, #25]
   39504:	cmp	r3, #0
   39508:	bne	39528 <flatcc_json_printer_utype_enum_vector_field@@Base+0x218>
   3950c:	ldr	r3, [r4, #20]
   39510:	add	r2, r3, #1
   39514:	str	r2, [r4, #20]
   39518:	mov	r2, #93	; 0x5d
   3951c:	strb	r2, [r3]
   39520:	add	sp, sp, #12
   39524:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39528:	ldr	r3, [r4, #20]
   3952c:	add	r2, r3, #1
   39530:	str	r2, [r4, #20]
   39534:	mov	r2, #10
   39538:	strb	r2, [r3]
   3953c:	ldr	r5, [r4, #32]
   39540:	sub	r5, r5, #1
   39544:	str	r5, [r4, #32]
   39548:	ldrb	r3, [r4, #25]
   3954c:	mul	r5, r5, r3
   39550:	ldr	r0, [r4, #20]
   39554:	add	r3, r0, r5
   39558:	ldr	r2, [r4, #16]
   3955c:	cmp	r2, r3
   39560:	bcc	39580 <flatcc_json_printer_utype_enum_vector_field@@Base+0x270>
   39564:	mov	r2, r5
   39568:	mov	r1, #32
   3956c:	bl	145c4 <memset@plt>
   39570:	ldr	r3, [r4, #20]
   39574:	add	r5, r3, r5
   39578:	str	r5, [r4, #20]
   3957c:	b	3950c <flatcc_json_printer_utype_enum_vector_field@@Base+0x1fc>
   39580:	mov	r1, r5
   39584:	mov	r0, r4
   39588:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3958c:	b	3950c <flatcc_json_printer_utype_enum_vector_field@@Base+0x1fc>

00039590 <flatcc_json_printer_uint8_enum_vector_field@@Base>:
   39590:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39594:	sub	sp, sp, #12
   39598:	mov	r4, r0
   3959c:	ldr	r9, [sp, #52]	; 0x34
   395a0:	ldrb	r0, [r0, #27]
   395a4:	cmp	r0, #0
   395a8:	bne	39688 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf8>
   395ac:	add	r2, r2, #2
   395b0:	lsl	r2, r2, #1
   395b4:	ldr	r0, [r1, #8]
   395b8:	cmp	r0, r2
   395bc:	ble	397a0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x210>
   395c0:	ldr	r0, [r1, #4]
   395c4:	ldrh	r0, [r0, r2]
   395c8:	cmp	r0, #0
   395cc:	beq	397a0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x210>
   395d0:	ldr	r5, [r1]
   395d4:	adds	ip, r5, r0
   395d8:	beq	397a0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x210>
   395dc:	ldr	r2, [r1, #16]
   395e0:	add	lr, r2, #1
   395e4:	str	lr, [r1, #16]
   395e8:	cmp	r2, #0
   395ec:	ldrne	r2, [r4, #20]
   395f0:	addne	r1, r2, #1
   395f4:	strne	r1, [r4, #20]
   395f8:	movne	r1, #44	; 0x2c
   395fc:	strbne	r1, [r2]
   39600:	ldr	r2, [r5, r0]
   39604:	add	r8, ip, r2
   39608:	ldr	r7, [ip, r2]
   3960c:	ldr	r2, [sp, #48]	; 0x30
   39610:	mov	r1, r3
   39614:	mov	r0, r4
   39618:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3961c:	ldr	r3, [r4, #32]
   39620:	add	r3, r3, #1
   39624:	str	r3, [r4, #32]
   39628:	ldr	r3, [r4, #20]
   3962c:	add	r2, r3, #1
   39630:	str	r2, [r4, #20]
   39634:	mov	r2, #91	; 0x5b
   39638:	strb	r2, [r3]
   3963c:	cmp	r7, #0
   39640:	beq	39780 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1f0>
   39644:	ldrb	r3, [r4, #25]
   39648:	cmp	r3, #0
   3964c:	bne	3969c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x10c>
   39650:	ldr	r2, [r4, #20]
   39654:	ldr	r3, [r4, #16]
   39658:	cmp	r2, r3
   3965c:	bcs	396bc <flatcc_json_printer_uint8_enum_vector_field@@Base+0x12c>
   39660:	ldrb	r1, [r8, #4]
   39664:	mov	r0, r4
   39668:	blx	r9
   3966c:	add	r5, r8, #5
   39670:	cmp	r7, #1
   39674:	beq	39780 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1f0>
   39678:	mov	sl, #44	; 0x2c
   3967c:	mov	fp, #10
   39680:	add	r7, r7, #4
   39684:	b	39730 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1a0>
   39688:	ldr	r0, [sp, #48]	; 0x30
   3968c:	str	r0, [sp]
   39690:	mov	r0, r4
   39694:	bl	376f4 <flatcc_json_printer_uint8_vector_field@@Base>
   39698:	b	397a0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x210>
   3969c:	ldr	r3, [r4, #20]
   396a0:	add	r2, r3, #1
   396a4:	str	r2, [r4, #20]
   396a8:	mov	r2, #10
   396ac:	strb	r2, [r3]
   396b0:	mov	r0, r4
   396b4:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   396b8:	b	39660 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xd0>
   396bc:	ldr	r3, [r4, #44]	; 0x2c
   396c0:	mov	r1, #0
   396c4:	mov	r0, r4
   396c8:	blx	r3
   396cc:	b	39660 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xd0>
   396d0:	ldr	r3, [r4, #20]
   396d4:	add	r2, r3, #1
   396d8:	str	r2, [r4, #20]
   396dc:	strb	fp, [r3]
   396e0:	ldrb	r3, [r4, #25]
   396e4:	ldr	r6, [r4, #32]
   396e8:	mul	r6, r6, r3
   396ec:	ldr	r0, [r4, #20]
   396f0:	add	r3, r0, r6
   396f4:	ldr	r2, [r4, #16]
   396f8:	cmp	r2, r3
   396fc:	bcc	39770 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1e0>
   39700:	mov	r2, r6
   39704:	mov	r1, #32
   39708:	bl	145c4 <memset@plt>
   3970c:	ldr	r3, [r4, #20]
   39710:	add	r6, r3, r6
   39714:	str	r6, [r4, #20]
   39718:	ldrb	r1, [r5], #1
   3971c:	mov	r0, r4
   39720:	blx	r9
   39724:	sub	r3, r7, r5
   39728:	cmn	r8, r3
   3972c:	beq	39780 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1f0>
   39730:	ldr	r3, [r4, #20]
   39734:	add	r2, r3, #1
   39738:	str	r2, [r4, #20]
   3973c:	strb	sl, [r3]
   39740:	ldrb	r3, [r4, #25]
   39744:	cmp	r3, #0
   39748:	bne	396d0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x140>
   3974c:	ldr	r2, [r4, #20]
   39750:	ldr	r3, [r4, #16]
   39754:	cmp	r2, r3
   39758:	bcc	39718 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x188>
   3975c:	ldr	r3, [r4, #44]	; 0x2c
   39760:	mov	r1, #0
   39764:	mov	r0, r4
   39768:	blx	r3
   3976c:	b	39718 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x188>
   39770:	mov	r1, r6
   39774:	mov	r0, r4
   39778:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3977c:	b	39718 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x188>
   39780:	ldrb	r3, [r4, #25]
   39784:	cmp	r3, #0
   39788:	bne	397a8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x218>
   3978c:	ldr	r3, [r4, #20]
   39790:	add	r2, r3, #1
   39794:	str	r2, [r4, #20]
   39798:	mov	r2, #93	; 0x5d
   3979c:	strb	r2, [r3]
   397a0:	add	sp, sp, #12
   397a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   397a8:	ldr	r3, [r4, #20]
   397ac:	add	r2, r3, #1
   397b0:	str	r2, [r4, #20]
   397b4:	mov	r2, #10
   397b8:	strb	r2, [r3]
   397bc:	ldr	r5, [r4, #32]
   397c0:	sub	r5, r5, #1
   397c4:	str	r5, [r4, #32]
   397c8:	ldrb	r3, [r4, #25]
   397cc:	mul	r5, r5, r3
   397d0:	ldr	r0, [r4, #20]
   397d4:	add	r3, r0, r5
   397d8:	ldr	r2, [r4, #16]
   397dc:	cmp	r2, r3
   397e0:	bcc	39800 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x270>
   397e4:	mov	r2, r5
   397e8:	mov	r1, #32
   397ec:	bl	145c4 <memset@plt>
   397f0:	ldr	r3, [r4, #20]
   397f4:	add	r5, r3, r5
   397f8:	str	r5, [r4, #20]
   397fc:	b	3978c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1fc>
   39800:	mov	r1, r5
   39804:	mov	r0, r4
   39808:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3980c:	b	3978c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1fc>

00039810 <flatcc_json_printer_uint16_enum_vector_field@@Base>:
   39810:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39814:	sub	sp, sp, #12
   39818:	mov	r4, r0
   3981c:	ldr	r8, [sp, #52]	; 0x34
   39820:	ldrb	r0, [r0, #27]
   39824:	cmp	r0, #0
   39828:	bne	3990c <flatcc_json_printer_uint16_enum_vector_field@@Base+0xfc>
   3982c:	add	r2, r2, #2
   39830:	lsl	r2, r2, #1
   39834:	ldr	r0, [r1, #8]
   39838:	cmp	r0, r2
   3983c:	ble	39a28 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x218>
   39840:	ldr	r0, [r1, #4]
   39844:	ldrh	r0, [r0, r2]
   39848:	cmp	r0, #0
   3984c:	beq	39a28 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x218>
   39850:	ldr	r5, [r1]
   39854:	adds	ip, r5, r0
   39858:	beq	39a28 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x218>
   3985c:	ldr	r2, [r1, #16]
   39860:	add	lr, r2, #1
   39864:	str	lr, [r1, #16]
   39868:	cmp	r2, #0
   3986c:	ldrne	r2, [r4, #20]
   39870:	addne	r1, r2, #1
   39874:	strne	r1, [r4, #20]
   39878:	movne	r1, #44	; 0x2c
   3987c:	strbne	r1, [r2]
   39880:	ldr	r2, [r5, r0]
   39884:	add	r6, ip, r2
   39888:	ldr	r7, [ip, r2]
   3988c:	ldr	r2, [sp, #48]	; 0x30
   39890:	mov	r1, r3
   39894:	mov	r0, r4
   39898:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3989c:	ldr	r3, [r4, #32]
   398a0:	add	r3, r3, #1
   398a4:	str	r3, [r4, #32]
   398a8:	ldr	r3, [r4, #20]
   398ac:	add	r2, r3, #1
   398b0:	str	r2, [r4, #20]
   398b4:	mov	r2, #91	; 0x5b
   398b8:	strb	r2, [r3]
   398bc:	cmp	r7, #0
   398c0:	beq	39a08 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1f8>
   398c4:	ldrb	r3, [r4, #25]
   398c8:	cmp	r3, #0
   398cc:	bne	39920 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x110>
   398d0:	ldr	r2, [r4, #20]
   398d4:	ldr	r3, [r4, #16]
   398d8:	cmp	r2, r3
   398dc:	bcs	39940 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x130>
   398e0:	ldrh	r1, [r6, #4]
   398e4:	mov	r0, r4
   398e8:	blx	r8
   398ec:	add	r6, r6, #6
   398f0:	sub	r5, r7, #2
   398f4:	cmp	r7, #1
   398f8:	beq	39a08 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1f8>
   398fc:	mov	r9, #44	; 0x2c
   39900:	mov	fp, #0
   39904:	mov	sl, #10
   39908:	b	399b8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1a8>
   3990c:	ldr	r0, [sp, #48]	; 0x30
   39910:	str	r0, [sp]
   39914:	mov	r0, r4
   39918:	bl	37960 <flatcc_json_printer_uint16_vector_field@@Base>
   3991c:	b	39a28 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x218>
   39920:	ldr	r3, [r4, #20]
   39924:	add	r2, r3, #1
   39928:	str	r2, [r4, #20]
   3992c:	mov	r2, #10
   39930:	strb	r2, [r3]
   39934:	mov	r0, r4
   39938:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   3993c:	b	398e0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xd0>
   39940:	ldr	r3, [r4, #44]	; 0x2c
   39944:	mov	r1, #0
   39948:	mov	r0, r4
   3994c:	blx	r3
   39950:	b	398e0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xd0>
   39954:	ldr	r3, [r4, #20]
   39958:	add	r2, r3, #1
   3995c:	str	r2, [r4, #20]
   39960:	strb	sl, [r3]
   39964:	ldrb	r3, [r4, #25]
   39968:	ldr	r7, [r4, #32]
   3996c:	mul	r7, r7, r3
   39970:	ldr	r0, [r4, #20]
   39974:	add	r3, r0, r7
   39978:	ldr	r2, [r4, #16]
   3997c:	cmp	r2, r3
   39980:	bcc	399f8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1e8>
   39984:	mov	r2, r7
   39988:	mov	r1, #32
   3998c:	bl	145c4 <memset@plt>
   39990:	ldr	r3, [r4, #20]
   39994:	add	r7, r3, r7
   39998:	str	r7, [r4, #20]
   3999c:	ldrh	r1, [r6], #2
   399a0:	mov	r0, r4
   399a4:	blx	r8
   399a8:	sub	r3, r5, #1
   399ac:	cmp	r5, #0
   399b0:	beq	39a08 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1f8>
   399b4:	mov	r5, r3
   399b8:	ldr	r3, [r4, #20]
   399bc:	add	r2, r3, #1
   399c0:	str	r2, [r4, #20]
   399c4:	strb	r9, [r3]
   399c8:	ldrb	r3, [r4, #25]
   399cc:	cmp	r3, #0
   399d0:	bne	39954 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x144>
   399d4:	ldr	r2, [r4, #20]
   399d8:	ldr	r3, [r4, #16]
   399dc:	cmp	r2, r3
   399e0:	bcc	3999c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x18c>
   399e4:	ldr	r3, [r4, #44]	; 0x2c
   399e8:	mov	r1, fp
   399ec:	mov	r0, r4
   399f0:	blx	r3
   399f4:	b	3999c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x18c>
   399f8:	mov	r1, r7
   399fc:	mov	r0, r4
   39a00:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   39a04:	b	3999c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x18c>
   39a08:	ldrb	r3, [r4, #25]
   39a0c:	cmp	r3, #0
   39a10:	bne	39a30 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x220>
   39a14:	ldr	r3, [r4, #20]
   39a18:	add	r2, r3, #1
   39a1c:	str	r2, [r4, #20]
   39a20:	mov	r2, #93	; 0x5d
   39a24:	strb	r2, [r3]
   39a28:	add	sp, sp, #12
   39a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39a30:	ldr	r3, [r4, #20]
   39a34:	add	r2, r3, #1
   39a38:	str	r2, [r4, #20]
   39a3c:	mov	r2, #10
   39a40:	strb	r2, [r3]
   39a44:	ldr	r5, [r4, #32]
   39a48:	sub	r5, r5, #1
   39a4c:	str	r5, [r4, #32]
   39a50:	ldrb	r3, [r4, #25]
   39a54:	mul	r5, r5, r3
   39a58:	ldr	r0, [r4, #20]
   39a5c:	add	r3, r0, r5
   39a60:	ldr	r2, [r4, #16]
   39a64:	cmp	r2, r3
   39a68:	bcc	39a88 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x278>
   39a6c:	mov	r2, r5
   39a70:	mov	r1, #32
   39a74:	bl	145c4 <memset@plt>
   39a78:	ldr	r3, [r4, #20]
   39a7c:	add	r5, r3, r5
   39a80:	str	r5, [r4, #20]
   39a84:	b	39a14 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x204>
   39a88:	mov	r1, r5
   39a8c:	mov	r0, r4
   39a90:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   39a94:	b	39a14 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x204>

00039a98 <flatcc_json_printer_uint32_enum_vector_field@@Base>:
   39a98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39a9c:	sub	sp, sp, #12
   39aa0:	mov	r4, r0
   39aa4:	ldr	r8, [sp, #52]	; 0x34
   39aa8:	ldrb	r0, [r0, #27]
   39aac:	cmp	r0, #0
   39ab0:	bne	39b94 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xfc>
   39ab4:	add	r2, r2, #2
   39ab8:	lsl	r2, r2, #1
   39abc:	ldr	r0, [r1, #8]
   39ac0:	cmp	r0, r2
   39ac4:	ble	39cb0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x218>
   39ac8:	ldr	r0, [r1, #4]
   39acc:	ldrh	r0, [r0, r2]
   39ad0:	cmp	r0, #0
   39ad4:	beq	39cb0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x218>
   39ad8:	ldr	r5, [r1]
   39adc:	adds	ip, r5, r0
   39ae0:	beq	39cb0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x218>
   39ae4:	ldr	r2, [r1, #16]
   39ae8:	add	lr, r2, #1
   39aec:	str	lr, [r1, #16]
   39af0:	cmp	r2, #0
   39af4:	ldrne	r2, [r4, #20]
   39af8:	addne	r1, r2, #1
   39afc:	strne	r1, [r4, #20]
   39b00:	movne	r1, #44	; 0x2c
   39b04:	strbne	r1, [r2]
   39b08:	ldr	r2, [r5, r0]
   39b0c:	add	r6, ip, r2
   39b10:	ldr	r7, [ip, r2]
   39b14:	ldr	r2, [sp, #48]	; 0x30
   39b18:	mov	r1, r3
   39b1c:	mov	r0, r4
   39b20:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   39b24:	ldr	r3, [r4, #32]
   39b28:	add	r3, r3, #1
   39b2c:	str	r3, [r4, #32]
   39b30:	ldr	r3, [r4, #20]
   39b34:	add	r2, r3, #1
   39b38:	str	r2, [r4, #20]
   39b3c:	mov	r2, #91	; 0x5b
   39b40:	strb	r2, [r3]
   39b44:	cmp	r7, #0
   39b48:	beq	39c90 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1f8>
   39b4c:	ldrb	r3, [r4, #25]
   39b50:	cmp	r3, #0
   39b54:	bne	39ba8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x110>
   39b58:	ldr	r2, [r4, #20]
   39b5c:	ldr	r3, [r4, #16]
   39b60:	cmp	r2, r3
   39b64:	bcs	39bc8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x130>
   39b68:	ldr	r1, [r6, #4]
   39b6c:	mov	r0, r4
   39b70:	blx	r8
   39b74:	add	r6, r6, #8
   39b78:	sub	r5, r7, #2
   39b7c:	cmp	r7, #1
   39b80:	beq	39c90 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1f8>
   39b84:	mov	r9, #44	; 0x2c
   39b88:	mov	fp, #0
   39b8c:	mov	sl, #10
   39b90:	b	39c40 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1a8>
   39b94:	ldr	r0, [sp, #48]	; 0x30
   39b98:	str	r0, [sp]
   39b9c:	mov	r0, r4
   39ba0:	bl	37bd4 <flatcc_json_printer_uint32_vector_field@@Base>
   39ba4:	b	39cb0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x218>
   39ba8:	ldr	r3, [r4, #20]
   39bac:	add	r2, r3, #1
   39bb0:	str	r2, [r4, #20]
   39bb4:	mov	r2, #10
   39bb8:	strb	r2, [r3]
   39bbc:	mov	r0, r4
   39bc0:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   39bc4:	b	39b68 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xd0>
   39bc8:	ldr	r3, [r4, #44]	; 0x2c
   39bcc:	mov	r1, #0
   39bd0:	mov	r0, r4
   39bd4:	blx	r3
   39bd8:	b	39b68 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xd0>
   39bdc:	ldr	r3, [r4, #20]
   39be0:	add	r2, r3, #1
   39be4:	str	r2, [r4, #20]
   39be8:	strb	sl, [r3]
   39bec:	ldrb	r3, [r4, #25]
   39bf0:	ldr	r7, [r4, #32]
   39bf4:	mul	r7, r7, r3
   39bf8:	ldr	r0, [r4, #20]
   39bfc:	add	r3, r0, r7
   39c00:	ldr	r2, [r4, #16]
   39c04:	cmp	r2, r3
   39c08:	bcc	39c80 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1e8>
   39c0c:	mov	r2, r7
   39c10:	mov	r1, #32
   39c14:	bl	145c4 <memset@plt>
   39c18:	ldr	r3, [r4, #20]
   39c1c:	add	r7, r3, r7
   39c20:	str	r7, [r4, #20]
   39c24:	ldr	r1, [r6], #4
   39c28:	mov	r0, r4
   39c2c:	blx	r8
   39c30:	sub	r3, r5, #1
   39c34:	cmp	r5, #0
   39c38:	beq	39c90 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1f8>
   39c3c:	mov	r5, r3
   39c40:	ldr	r3, [r4, #20]
   39c44:	add	r2, r3, #1
   39c48:	str	r2, [r4, #20]
   39c4c:	strb	r9, [r3]
   39c50:	ldrb	r3, [r4, #25]
   39c54:	cmp	r3, #0
   39c58:	bne	39bdc <flatcc_json_printer_uint32_enum_vector_field@@Base+0x144>
   39c5c:	ldr	r2, [r4, #20]
   39c60:	ldr	r3, [r4, #16]
   39c64:	cmp	r2, r3
   39c68:	bcc	39c24 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x18c>
   39c6c:	ldr	r3, [r4, #44]	; 0x2c
   39c70:	mov	r1, fp
   39c74:	mov	r0, r4
   39c78:	blx	r3
   39c7c:	b	39c24 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x18c>
   39c80:	mov	r1, r7
   39c84:	mov	r0, r4
   39c88:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   39c8c:	b	39c24 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x18c>
   39c90:	ldrb	r3, [r4, #25]
   39c94:	cmp	r3, #0
   39c98:	bne	39cb8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x220>
   39c9c:	ldr	r3, [r4, #20]
   39ca0:	add	r2, r3, #1
   39ca4:	str	r2, [r4, #20]
   39ca8:	mov	r2, #93	; 0x5d
   39cac:	strb	r2, [r3]
   39cb0:	add	sp, sp, #12
   39cb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39cb8:	ldr	r3, [r4, #20]
   39cbc:	add	r2, r3, #1
   39cc0:	str	r2, [r4, #20]
   39cc4:	mov	r2, #10
   39cc8:	strb	r2, [r3]
   39ccc:	ldr	r5, [r4, #32]
   39cd0:	sub	r5, r5, #1
   39cd4:	str	r5, [r4, #32]
   39cd8:	ldrb	r3, [r4, #25]
   39cdc:	mul	r5, r5, r3
   39ce0:	ldr	r0, [r4, #20]
   39ce4:	add	r3, r0, r5
   39ce8:	ldr	r2, [r4, #16]
   39cec:	cmp	r2, r3
   39cf0:	bcc	39d10 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x278>
   39cf4:	mov	r2, r5
   39cf8:	mov	r1, #32
   39cfc:	bl	145c4 <memset@plt>
   39d00:	ldr	r3, [r4, #20]
   39d04:	add	r5, r3, r5
   39d08:	str	r5, [r4, #20]
   39d0c:	b	39c9c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x204>
   39d10:	mov	r1, r5
   39d14:	mov	r0, r4
   39d18:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   39d1c:	b	39c9c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x204>

00039d20 <flatcc_json_printer_uint64_enum_vector_field@@Base>:
   39d20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39d24:	sub	sp, sp, #12
   39d28:	mov	r4, r0
   39d2c:	ldr	r8, [sp, #52]	; 0x34
   39d30:	ldrb	r0, [r0, #27]
   39d34:	cmp	r0, #0
   39d38:	bne	39e1c <flatcc_json_printer_uint64_enum_vector_field@@Base+0xfc>
   39d3c:	add	r2, r2, #2
   39d40:	lsl	r2, r2, #1
   39d44:	ldr	r0, [r1, #8]
   39d48:	cmp	r0, r2
   39d4c:	ble	39f38 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x218>
   39d50:	ldr	r0, [r1, #4]
   39d54:	ldrh	r0, [r0, r2]
   39d58:	cmp	r0, #0
   39d5c:	beq	39f38 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x218>
   39d60:	ldr	r5, [r1]
   39d64:	adds	ip, r5, r0
   39d68:	beq	39f38 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x218>
   39d6c:	ldr	r2, [r1, #16]
   39d70:	add	lr, r2, #1
   39d74:	str	lr, [r1, #16]
   39d78:	cmp	r2, #0
   39d7c:	ldrne	r2, [r4, #20]
   39d80:	addne	r1, r2, #1
   39d84:	strne	r1, [r4, #20]
   39d88:	movne	r1, #44	; 0x2c
   39d8c:	strbne	r1, [r2]
   39d90:	ldr	r2, [r5, r0]
   39d94:	add	r6, ip, r2
   39d98:	ldr	r7, [ip, r2]
   39d9c:	ldr	r2, [sp, #48]	; 0x30
   39da0:	mov	r1, r3
   39da4:	mov	r0, r4
   39da8:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   39dac:	ldr	r3, [r4, #32]
   39db0:	add	r3, r3, #1
   39db4:	str	r3, [r4, #32]
   39db8:	ldr	r3, [r4, #20]
   39dbc:	add	r2, r3, #1
   39dc0:	str	r2, [r4, #20]
   39dc4:	mov	r2, #91	; 0x5b
   39dc8:	strb	r2, [r3]
   39dcc:	cmp	r7, #0
   39dd0:	beq	39f18 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1f8>
   39dd4:	ldrb	r3, [r4, #25]
   39dd8:	cmp	r3, #0
   39ddc:	bne	39e30 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x110>
   39de0:	ldr	r2, [r4, #20]
   39de4:	ldr	r3, [r4, #16]
   39de8:	cmp	r2, r3
   39dec:	bcs	39e50 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x130>
   39df0:	ldrd	r2, [r6, #4]
   39df4:	mov	r0, r4
   39df8:	blx	r8
   39dfc:	add	r6, r6, #12
   39e00:	sub	r5, r7, #2
   39e04:	cmp	r7, #1
   39e08:	beq	39f18 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1f8>
   39e0c:	mov	r9, #44	; 0x2c
   39e10:	mov	fp, #0
   39e14:	mov	sl, #10
   39e18:	b	39ec8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1a8>
   39e1c:	ldr	r0, [sp, #48]	; 0x30
   39e20:	str	r0, [sp]
   39e24:	mov	r0, r4
   39e28:	bl	37e48 <flatcc_json_printer_uint64_vector_field@@Base>
   39e2c:	b	39f38 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x218>
   39e30:	ldr	r3, [r4, #20]
   39e34:	add	r2, r3, #1
   39e38:	str	r2, [r4, #20]
   39e3c:	mov	r2, #10
   39e40:	strb	r2, [r3]
   39e44:	mov	r0, r4
   39e48:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   39e4c:	b	39df0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xd0>
   39e50:	ldr	r3, [r4, #44]	; 0x2c
   39e54:	mov	r1, #0
   39e58:	mov	r0, r4
   39e5c:	blx	r3
   39e60:	b	39df0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xd0>
   39e64:	ldr	r3, [r4, #20]
   39e68:	add	r2, r3, #1
   39e6c:	str	r2, [r4, #20]
   39e70:	strb	sl, [r3]
   39e74:	ldrb	r3, [r4, #25]
   39e78:	ldr	r7, [r4, #32]
   39e7c:	mul	r7, r7, r3
   39e80:	ldr	r0, [r4, #20]
   39e84:	add	r3, r0, r7
   39e88:	ldr	r2, [r4, #16]
   39e8c:	cmp	r2, r3
   39e90:	bcc	39f08 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1e8>
   39e94:	mov	r2, r7
   39e98:	mov	r1, #32
   39e9c:	bl	145c4 <memset@plt>
   39ea0:	ldr	r3, [r4, #20]
   39ea4:	add	r7, r3, r7
   39ea8:	str	r7, [r4, #20]
   39eac:	ldrd	r2, [r6], #8
   39eb0:	mov	r0, r4
   39eb4:	blx	r8
   39eb8:	sub	r3, r5, #1
   39ebc:	cmp	r5, #0
   39ec0:	beq	39f18 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1f8>
   39ec4:	mov	r5, r3
   39ec8:	ldr	r3, [r4, #20]
   39ecc:	add	r2, r3, #1
   39ed0:	str	r2, [r4, #20]
   39ed4:	strb	r9, [r3]
   39ed8:	ldrb	r3, [r4, #25]
   39edc:	cmp	r3, #0
   39ee0:	bne	39e64 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x144>
   39ee4:	ldr	r2, [r4, #20]
   39ee8:	ldr	r3, [r4, #16]
   39eec:	cmp	r2, r3
   39ef0:	bcc	39eac <flatcc_json_printer_uint64_enum_vector_field@@Base+0x18c>
   39ef4:	ldr	r3, [r4, #44]	; 0x2c
   39ef8:	mov	r1, fp
   39efc:	mov	r0, r4
   39f00:	blx	r3
   39f04:	b	39eac <flatcc_json_printer_uint64_enum_vector_field@@Base+0x18c>
   39f08:	mov	r1, r7
   39f0c:	mov	r0, r4
   39f10:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   39f14:	b	39eac <flatcc_json_printer_uint64_enum_vector_field@@Base+0x18c>
   39f18:	ldrb	r3, [r4, #25]
   39f1c:	cmp	r3, #0
   39f20:	bne	39f40 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x220>
   39f24:	ldr	r3, [r4, #20]
   39f28:	add	r2, r3, #1
   39f2c:	str	r2, [r4, #20]
   39f30:	mov	r2, #93	; 0x5d
   39f34:	strb	r2, [r3]
   39f38:	add	sp, sp, #12
   39f3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39f40:	ldr	r3, [r4, #20]
   39f44:	add	r2, r3, #1
   39f48:	str	r2, [r4, #20]
   39f4c:	mov	r2, #10
   39f50:	strb	r2, [r3]
   39f54:	ldr	r5, [r4, #32]
   39f58:	sub	r5, r5, #1
   39f5c:	str	r5, [r4, #32]
   39f60:	ldrb	r3, [r4, #25]
   39f64:	mul	r5, r5, r3
   39f68:	ldr	r0, [r4, #20]
   39f6c:	add	r3, r0, r5
   39f70:	ldr	r2, [r4, #16]
   39f74:	cmp	r2, r3
   39f78:	bcc	39f98 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x278>
   39f7c:	mov	r2, r5
   39f80:	mov	r1, #32
   39f84:	bl	145c4 <memset@plt>
   39f88:	ldr	r3, [r4, #20]
   39f8c:	add	r5, r3, r5
   39f90:	str	r5, [r4, #20]
   39f94:	b	39f24 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x204>
   39f98:	mov	r1, r5
   39f9c:	mov	r0, r4
   39fa0:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   39fa4:	b	39f24 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x204>

00039fa8 <flatcc_json_printer_int8_enum_vector_field@@Base>:
   39fa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39fac:	sub	sp, sp, #12
   39fb0:	mov	r4, r0
   39fb4:	ldr	r9, [sp, #52]	; 0x34
   39fb8:	ldrb	r0, [r0, #27]
   39fbc:	cmp	r0, #0
   39fc0:	bne	3a0a0 <flatcc_json_printer_int8_enum_vector_field@@Base+0xf8>
   39fc4:	add	r2, r2, #2
   39fc8:	lsl	r2, r2, #1
   39fcc:	ldr	r0, [r1, #8]
   39fd0:	cmp	r0, r2
   39fd4:	ble	3a1b8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x210>
   39fd8:	ldr	r0, [r1, #4]
   39fdc:	ldrh	r0, [r0, r2]
   39fe0:	cmp	r0, #0
   39fe4:	beq	3a1b8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x210>
   39fe8:	ldr	r5, [r1]
   39fec:	adds	ip, r5, r0
   39ff0:	beq	3a1b8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x210>
   39ff4:	ldr	r2, [r1, #16]
   39ff8:	add	lr, r2, #1
   39ffc:	str	lr, [r1, #16]
   3a000:	cmp	r2, #0
   3a004:	ldrne	r2, [r4, #20]
   3a008:	addne	r1, r2, #1
   3a00c:	strne	r1, [r4, #20]
   3a010:	movne	r1, #44	; 0x2c
   3a014:	strbne	r1, [r2]
   3a018:	ldr	r2, [r5, r0]
   3a01c:	add	r8, ip, r2
   3a020:	ldr	r7, [ip, r2]
   3a024:	ldr	r2, [sp, #48]	; 0x30
   3a028:	mov	r1, r3
   3a02c:	mov	r0, r4
   3a030:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3a034:	ldr	r3, [r4, #32]
   3a038:	add	r3, r3, #1
   3a03c:	str	r3, [r4, #32]
   3a040:	ldr	r3, [r4, #20]
   3a044:	add	r2, r3, #1
   3a048:	str	r2, [r4, #20]
   3a04c:	mov	r2, #91	; 0x5b
   3a050:	strb	r2, [r3]
   3a054:	cmp	r7, #0
   3a058:	beq	3a198 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1f0>
   3a05c:	ldrb	r3, [r4, #25]
   3a060:	cmp	r3, #0
   3a064:	bne	3a0b4 <flatcc_json_printer_int8_enum_vector_field@@Base+0x10c>
   3a068:	ldr	r2, [r4, #20]
   3a06c:	ldr	r3, [r4, #16]
   3a070:	cmp	r2, r3
   3a074:	bcs	3a0d4 <flatcc_json_printer_int8_enum_vector_field@@Base+0x12c>
   3a078:	ldrsb	r1, [r8, #4]
   3a07c:	mov	r0, r4
   3a080:	blx	r9
   3a084:	add	r5, r8, #5
   3a088:	cmp	r7, #1
   3a08c:	beq	3a198 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1f0>
   3a090:	mov	sl, #44	; 0x2c
   3a094:	mov	fp, #10
   3a098:	add	r7, r7, #4
   3a09c:	b	3a148 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1a0>
   3a0a0:	ldr	r0, [sp, #48]	; 0x30
   3a0a4:	str	r0, [sp]
   3a0a8:	mov	r0, r4
   3a0ac:	bl	380bc <flatcc_json_printer_int8_vector_field@@Base>
   3a0b0:	b	3a1b8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x210>
   3a0b4:	ldr	r3, [r4, #20]
   3a0b8:	add	r2, r3, #1
   3a0bc:	str	r2, [r4, #20]
   3a0c0:	mov	r2, #10
   3a0c4:	strb	r2, [r3]
   3a0c8:	mov	r0, r4
   3a0cc:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   3a0d0:	b	3a078 <flatcc_json_printer_int8_enum_vector_field@@Base+0xd0>
   3a0d4:	ldr	r3, [r4, #44]	; 0x2c
   3a0d8:	mov	r1, #0
   3a0dc:	mov	r0, r4
   3a0e0:	blx	r3
   3a0e4:	b	3a078 <flatcc_json_printer_int8_enum_vector_field@@Base+0xd0>
   3a0e8:	ldr	r3, [r4, #20]
   3a0ec:	add	r2, r3, #1
   3a0f0:	str	r2, [r4, #20]
   3a0f4:	strb	fp, [r3]
   3a0f8:	ldrb	r3, [r4, #25]
   3a0fc:	ldr	r6, [r4, #32]
   3a100:	mul	r6, r6, r3
   3a104:	ldr	r0, [r4, #20]
   3a108:	add	r3, r0, r6
   3a10c:	ldr	r2, [r4, #16]
   3a110:	cmp	r2, r3
   3a114:	bcc	3a188 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1e0>
   3a118:	mov	r2, r6
   3a11c:	mov	r1, #32
   3a120:	bl	145c4 <memset@plt>
   3a124:	ldr	r3, [r4, #20]
   3a128:	add	r6, r3, r6
   3a12c:	str	r6, [r4, #20]
   3a130:	ldrsb	r1, [r5], #1
   3a134:	mov	r0, r4
   3a138:	blx	r9
   3a13c:	sub	r3, r7, r5
   3a140:	cmn	r8, r3
   3a144:	beq	3a198 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1f0>
   3a148:	ldr	r3, [r4, #20]
   3a14c:	add	r2, r3, #1
   3a150:	str	r2, [r4, #20]
   3a154:	strb	sl, [r3]
   3a158:	ldrb	r3, [r4, #25]
   3a15c:	cmp	r3, #0
   3a160:	bne	3a0e8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x140>
   3a164:	ldr	r2, [r4, #20]
   3a168:	ldr	r3, [r4, #16]
   3a16c:	cmp	r2, r3
   3a170:	bcc	3a130 <flatcc_json_printer_int8_enum_vector_field@@Base+0x188>
   3a174:	ldr	r3, [r4, #44]	; 0x2c
   3a178:	mov	r1, #0
   3a17c:	mov	r0, r4
   3a180:	blx	r3
   3a184:	b	3a130 <flatcc_json_printer_int8_enum_vector_field@@Base+0x188>
   3a188:	mov	r1, r6
   3a18c:	mov	r0, r4
   3a190:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3a194:	b	3a130 <flatcc_json_printer_int8_enum_vector_field@@Base+0x188>
   3a198:	ldrb	r3, [r4, #25]
   3a19c:	cmp	r3, #0
   3a1a0:	bne	3a1c0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x218>
   3a1a4:	ldr	r3, [r4, #20]
   3a1a8:	add	r2, r3, #1
   3a1ac:	str	r2, [r4, #20]
   3a1b0:	mov	r2, #93	; 0x5d
   3a1b4:	strb	r2, [r3]
   3a1b8:	add	sp, sp, #12
   3a1bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a1c0:	ldr	r3, [r4, #20]
   3a1c4:	add	r2, r3, #1
   3a1c8:	str	r2, [r4, #20]
   3a1cc:	mov	r2, #10
   3a1d0:	strb	r2, [r3]
   3a1d4:	ldr	r5, [r4, #32]
   3a1d8:	sub	r5, r5, #1
   3a1dc:	str	r5, [r4, #32]
   3a1e0:	ldrb	r3, [r4, #25]
   3a1e4:	mul	r5, r5, r3
   3a1e8:	ldr	r0, [r4, #20]
   3a1ec:	add	r3, r0, r5
   3a1f0:	ldr	r2, [r4, #16]
   3a1f4:	cmp	r2, r3
   3a1f8:	bcc	3a218 <flatcc_json_printer_int8_enum_vector_field@@Base+0x270>
   3a1fc:	mov	r2, r5
   3a200:	mov	r1, #32
   3a204:	bl	145c4 <memset@plt>
   3a208:	ldr	r3, [r4, #20]
   3a20c:	add	r5, r3, r5
   3a210:	str	r5, [r4, #20]
   3a214:	b	3a1a4 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1fc>
   3a218:	mov	r1, r5
   3a21c:	mov	r0, r4
   3a220:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3a224:	b	3a1a4 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1fc>

0003a228 <flatcc_json_printer_int16_enum_vector_field@@Base>:
   3a228:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a22c:	sub	sp, sp, #12
   3a230:	mov	r4, r0
   3a234:	ldr	r8, [sp, #52]	; 0x34
   3a238:	ldrb	r0, [r0, #27]
   3a23c:	cmp	r0, #0
   3a240:	bne	3a324 <flatcc_json_printer_int16_enum_vector_field@@Base+0xfc>
   3a244:	add	r2, r2, #2
   3a248:	lsl	r2, r2, #1
   3a24c:	ldr	r0, [r1, #8]
   3a250:	cmp	r0, r2
   3a254:	ble	3a440 <flatcc_json_printer_int16_enum_vector_field@@Base+0x218>
   3a258:	ldr	r0, [r1, #4]
   3a25c:	ldrh	r0, [r0, r2]
   3a260:	cmp	r0, #0
   3a264:	beq	3a440 <flatcc_json_printer_int16_enum_vector_field@@Base+0x218>
   3a268:	ldr	r5, [r1]
   3a26c:	adds	ip, r5, r0
   3a270:	beq	3a440 <flatcc_json_printer_int16_enum_vector_field@@Base+0x218>
   3a274:	ldr	r2, [r1, #16]
   3a278:	add	lr, r2, #1
   3a27c:	str	lr, [r1, #16]
   3a280:	cmp	r2, #0
   3a284:	ldrne	r2, [r4, #20]
   3a288:	addne	r1, r2, #1
   3a28c:	strne	r1, [r4, #20]
   3a290:	movne	r1, #44	; 0x2c
   3a294:	strbne	r1, [r2]
   3a298:	ldr	r2, [r5, r0]
   3a29c:	add	r6, ip, r2
   3a2a0:	ldr	r7, [ip, r2]
   3a2a4:	ldr	r2, [sp, #48]	; 0x30
   3a2a8:	mov	r1, r3
   3a2ac:	mov	r0, r4
   3a2b0:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3a2b4:	ldr	r3, [r4, #32]
   3a2b8:	add	r3, r3, #1
   3a2bc:	str	r3, [r4, #32]
   3a2c0:	ldr	r3, [r4, #20]
   3a2c4:	add	r2, r3, #1
   3a2c8:	str	r2, [r4, #20]
   3a2cc:	mov	r2, #91	; 0x5b
   3a2d0:	strb	r2, [r3]
   3a2d4:	cmp	r7, #0
   3a2d8:	beq	3a420 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1f8>
   3a2dc:	ldrb	r3, [r4, #25]
   3a2e0:	cmp	r3, #0
   3a2e4:	bne	3a338 <flatcc_json_printer_int16_enum_vector_field@@Base+0x110>
   3a2e8:	ldr	r2, [r4, #20]
   3a2ec:	ldr	r3, [r4, #16]
   3a2f0:	cmp	r2, r3
   3a2f4:	bcs	3a358 <flatcc_json_printer_int16_enum_vector_field@@Base+0x130>
   3a2f8:	ldrsh	r1, [r6, #4]
   3a2fc:	mov	r0, r4
   3a300:	blx	r8
   3a304:	add	r6, r6, #6
   3a308:	sub	r5, r7, #2
   3a30c:	cmp	r7, #1
   3a310:	beq	3a420 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1f8>
   3a314:	mov	r9, #44	; 0x2c
   3a318:	mov	fp, #0
   3a31c:	mov	sl, #10
   3a320:	b	3a3d0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1a8>
   3a324:	ldr	r0, [sp, #48]	; 0x30
   3a328:	str	r0, [sp]
   3a32c:	mov	r0, r4
   3a330:	bl	38328 <flatcc_json_printer_int16_vector_field@@Base>
   3a334:	b	3a440 <flatcc_json_printer_int16_enum_vector_field@@Base+0x218>
   3a338:	ldr	r3, [r4, #20]
   3a33c:	add	r2, r3, #1
   3a340:	str	r2, [r4, #20]
   3a344:	mov	r2, #10
   3a348:	strb	r2, [r3]
   3a34c:	mov	r0, r4
   3a350:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   3a354:	b	3a2f8 <flatcc_json_printer_int16_enum_vector_field@@Base+0xd0>
   3a358:	ldr	r3, [r4, #44]	; 0x2c
   3a35c:	mov	r1, #0
   3a360:	mov	r0, r4
   3a364:	blx	r3
   3a368:	b	3a2f8 <flatcc_json_printer_int16_enum_vector_field@@Base+0xd0>
   3a36c:	ldr	r3, [r4, #20]
   3a370:	add	r2, r3, #1
   3a374:	str	r2, [r4, #20]
   3a378:	strb	sl, [r3]
   3a37c:	ldrb	r3, [r4, #25]
   3a380:	ldr	r7, [r4, #32]
   3a384:	mul	r7, r7, r3
   3a388:	ldr	r0, [r4, #20]
   3a38c:	add	r3, r0, r7
   3a390:	ldr	r2, [r4, #16]
   3a394:	cmp	r2, r3
   3a398:	bcc	3a410 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1e8>
   3a39c:	mov	r2, r7
   3a3a0:	mov	r1, #32
   3a3a4:	bl	145c4 <memset@plt>
   3a3a8:	ldr	r3, [r4, #20]
   3a3ac:	add	r7, r3, r7
   3a3b0:	str	r7, [r4, #20]
   3a3b4:	ldrsh	r1, [r6], #2
   3a3b8:	mov	r0, r4
   3a3bc:	blx	r8
   3a3c0:	sub	r3, r5, #1
   3a3c4:	cmp	r5, #0
   3a3c8:	beq	3a420 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1f8>
   3a3cc:	mov	r5, r3
   3a3d0:	ldr	r3, [r4, #20]
   3a3d4:	add	r2, r3, #1
   3a3d8:	str	r2, [r4, #20]
   3a3dc:	strb	r9, [r3]
   3a3e0:	ldrb	r3, [r4, #25]
   3a3e4:	cmp	r3, #0
   3a3e8:	bne	3a36c <flatcc_json_printer_int16_enum_vector_field@@Base+0x144>
   3a3ec:	ldr	r2, [r4, #20]
   3a3f0:	ldr	r3, [r4, #16]
   3a3f4:	cmp	r2, r3
   3a3f8:	bcc	3a3b4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x18c>
   3a3fc:	ldr	r3, [r4, #44]	; 0x2c
   3a400:	mov	r1, fp
   3a404:	mov	r0, r4
   3a408:	blx	r3
   3a40c:	b	3a3b4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x18c>
   3a410:	mov	r1, r7
   3a414:	mov	r0, r4
   3a418:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3a41c:	b	3a3b4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x18c>
   3a420:	ldrb	r3, [r4, #25]
   3a424:	cmp	r3, #0
   3a428:	bne	3a448 <flatcc_json_printer_int16_enum_vector_field@@Base+0x220>
   3a42c:	ldr	r3, [r4, #20]
   3a430:	add	r2, r3, #1
   3a434:	str	r2, [r4, #20]
   3a438:	mov	r2, #93	; 0x5d
   3a43c:	strb	r2, [r3]
   3a440:	add	sp, sp, #12
   3a444:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a448:	ldr	r3, [r4, #20]
   3a44c:	add	r2, r3, #1
   3a450:	str	r2, [r4, #20]
   3a454:	mov	r2, #10
   3a458:	strb	r2, [r3]
   3a45c:	ldr	r5, [r4, #32]
   3a460:	sub	r5, r5, #1
   3a464:	str	r5, [r4, #32]
   3a468:	ldrb	r3, [r4, #25]
   3a46c:	mul	r5, r5, r3
   3a470:	ldr	r0, [r4, #20]
   3a474:	add	r3, r0, r5
   3a478:	ldr	r2, [r4, #16]
   3a47c:	cmp	r2, r3
   3a480:	bcc	3a4a0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x278>
   3a484:	mov	r2, r5
   3a488:	mov	r1, #32
   3a48c:	bl	145c4 <memset@plt>
   3a490:	ldr	r3, [r4, #20]
   3a494:	add	r5, r3, r5
   3a498:	str	r5, [r4, #20]
   3a49c:	b	3a42c <flatcc_json_printer_int16_enum_vector_field@@Base+0x204>
   3a4a0:	mov	r1, r5
   3a4a4:	mov	r0, r4
   3a4a8:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3a4ac:	b	3a42c <flatcc_json_printer_int16_enum_vector_field@@Base+0x204>

0003a4b0 <flatcc_json_printer_int32_enum_vector_field@@Base>:
   3a4b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a4b4:	sub	sp, sp, #12
   3a4b8:	mov	r4, r0
   3a4bc:	ldr	r8, [sp, #52]	; 0x34
   3a4c0:	ldrb	r0, [r0, #27]
   3a4c4:	cmp	r0, #0
   3a4c8:	bne	3a5ac <flatcc_json_printer_int32_enum_vector_field@@Base+0xfc>
   3a4cc:	add	r2, r2, #2
   3a4d0:	lsl	r2, r2, #1
   3a4d4:	ldr	r0, [r1, #8]
   3a4d8:	cmp	r0, r2
   3a4dc:	ble	3a6c8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x218>
   3a4e0:	ldr	r0, [r1, #4]
   3a4e4:	ldrh	r0, [r0, r2]
   3a4e8:	cmp	r0, #0
   3a4ec:	beq	3a6c8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x218>
   3a4f0:	ldr	r5, [r1]
   3a4f4:	adds	ip, r5, r0
   3a4f8:	beq	3a6c8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x218>
   3a4fc:	ldr	r2, [r1, #16]
   3a500:	add	lr, r2, #1
   3a504:	str	lr, [r1, #16]
   3a508:	cmp	r2, #0
   3a50c:	ldrne	r2, [r4, #20]
   3a510:	addne	r1, r2, #1
   3a514:	strne	r1, [r4, #20]
   3a518:	movne	r1, #44	; 0x2c
   3a51c:	strbne	r1, [r2]
   3a520:	ldr	r2, [r5, r0]
   3a524:	add	r6, ip, r2
   3a528:	ldr	r7, [ip, r2]
   3a52c:	ldr	r2, [sp, #48]	; 0x30
   3a530:	mov	r1, r3
   3a534:	mov	r0, r4
   3a538:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3a53c:	ldr	r3, [r4, #32]
   3a540:	add	r3, r3, #1
   3a544:	str	r3, [r4, #32]
   3a548:	ldr	r3, [r4, #20]
   3a54c:	add	r2, r3, #1
   3a550:	str	r2, [r4, #20]
   3a554:	mov	r2, #91	; 0x5b
   3a558:	strb	r2, [r3]
   3a55c:	cmp	r7, #0
   3a560:	beq	3a6a8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1f8>
   3a564:	ldrb	r3, [r4, #25]
   3a568:	cmp	r3, #0
   3a56c:	bne	3a5c0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x110>
   3a570:	ldr	r2, [r4, #20]
   3a574:	ldr	r3, [r4, #16]
   3a578:	cmp	r2, r3
   3a57c:	bcs	3a5e0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x130>
   3a580:	ldr	r1, [r6, #4]
   3a584:	mov	r0, r4
   3a588:	blx	r8
   3a58c:	add	r6, r6, #8
   3a590:	sub	r5, r7, #2
   3a594:	cmp	r7, #1
   3a598:	beq	3a6a8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1f8>
   3a59c:	mov	r9, #44	; 0x2c
   3a5a0:	mov	fp, #0
   3a5a4:	mov	sl, #10
   3a5a8:	b	3a658 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1a8>
   3a5ac:	ldr	r0, [sp, #48]	; 0x30
   3a5b0:	str	r0, [sp]
   3a5b4:	mov	r0, r4
   3a5b8:	bl	3859c <flatcc_json_printer_int32_vector_field@@Base>
   3a5bc:	b	3a6c8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x218>
   3a5c0:	ldr	r3, [r4, #20]
   3a5c4:	add	r2, r3, #1
   3a5c8:	str	r2, [r4, #20]
   3a5cc:	mov	r2, #10
   3a5d0:	strb	r2, [r3]
   3a5d4:	mov	r0, r4
   3a5d8:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   3a5dc:	b	3a580 <flatcc_json_printer_int32_enum_vector_field@@Base+0xd0>
   3a5e0:	ldr	r3, [r4, #44]	; 0x2c
   3a5e4:	mov	r1, #0
   3a5e8:	mov	r0, r4
   3a5ec:	blx	r3
   3a5f0:	b	3a580 <flatcc_json_printer_int32_enum_vector_field@@Base+0xd0>
   3a5f4:	ldr	r3, [r4, #20]
   3a5f8:	add	r2, r3, #1
   3a5fc:	str	r2, [r4, #20]
   3a600:	strb	sl, [r3]
   3a604:	ldrb	r3, [r4, #25]
   3a608:	ldr	r7, [r4, #32]
   3a60c:	mul	r7, r7, r3
   3a610:	ldr	r0, [r4, #20]
   3a614:	add	r3, r0, r7
   3a618:	ldr	r2, [r4, #16]
   3a61c:	cmp	r2, r3
   3a620:	bcc	3a698 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1e8>
   3a624:	mov	r2, r7
   3a628:	mov	r1, #32
   3a62c:	bl	145c4 <memset@plt>
   3a630:	ldr	r3, [r4, #20]
   3a634:	add	r7, r3, r7
   3a638:	str	r7, [r4, #20]
   3a63c:	ldr	r1, [r6], #4
   3a640:	mov	r0, r4
   3a644:	blx	r8
   3a648:	sub	r3, r5, #1
   3a64c:	cmp	r5, #0
   3a650:	beq	3a6a8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1f8>
   3a654:	mov	r5, r3
   3a658:	ldr	r3, [r4, #20]
   3a65c:	add	r2, r3, #1
   3a660:	str	r2, [r4, #20]
   3a664:	strb	r9, [r3]
   3a668:	ldrb	r3, [r4, #25]
   3a66c:	cmp	r3, #0
   3a670:	bne	3a5f4 <flatcc_json_printer_int32_enum_vector_field@@Base+0x144>
   3a674:	ldr	r2, [r4, #20]
   3a678:	ldr	r3, [r4, #16]
   3a67c:	cmp	r2, r3
   3a680:	bcc	3a63c <flatcc_json_printer_int32_enum_vector_field@@Base+0x18c>
   3a684:	ldr	r3, [r4, #44]	; 0x2c
   3a688:	mov	r1, fp
   3a68c:	mov	r0, r4
   3a690:	blx	r3
   3a694:	b	3a63c <flatcc_json_printer_int32_enum_vector_field@@Base+0x18c>
   3a698:	mov	r1, r7
   3a69c:	mov	r0, r4
   3a6a0:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3a6a4:	b	3a63c <flatcc_json_printer_int32_enum_vector_field@@Base+0x18c>
   3a6a8:	ldrb	r3, [r4, #25]
   3a6ac:	cmp	r3, #0
   3a6b0:	bne	3a6d0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x220>
   3a6b4:	ldr	r3, [r4, #20]
   3a6b8:	add	r2, r3, #1
   3a6bc:	str	r2, [r4, #20]
   3a6c0:	mov	r2, #93	; 0x5d
   3a6c4:	strb	r2, [r3]
   3a6c8:	add	sp, sp, #12
   3a6cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a6d0:	ldr	r3, [r4, #20]
   3a6d4:	add	r2, r3, #1
   3a6d8:	str	r2, [r4, #20]
   3a6dc:	mov	r2, #10
   3a6e0:	strb	r2, [r3]
   3a6e4:	ldr	r5, [r4, #32]
   3a6e8:	sub	r5, r5, #1
   3a6ec:	str	r5, [r4, #32]
   3a6f0:	ldrb	r3, [r4, #25]
   3a6f4:	mul	r5, r5, r3
   3a6f8:	ldr	r0, [r4, #20]
   3a6fc:	add	r3, r0, r5
   3a700:	ldr	r2, [r4, #16]
   3a704:	cmp	r2, r3
   3a708:	bcc	3a728 <flatcc_json_printer_int32_enum_vector_field@@Base+0x278>
   3a70c:	mov	r2, r5
   3a710:	mov	r1, #32
   3a714:	bl	145c4 <memset@plt>
   3a718:	ldr	r3, [r4, #20]
   3a71c:	add	r5, r3, r5
   3a720:	str	r5, [r4, #20]
   3a724:	b	3a6b4 <flatcc_json_printer_int32_enum_vector_field@@Base+0x204>
   3a728:	mov	r1, r5
   3a72c:	mov	r0, r4
   3a730:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3a734:	b	3a6b4 <flatcc_json_printer_int32_enum_vector_field@@Base+0x204>

0003a738 <flatcc_json_printer_int64_enum_vector_field@@Base>:
   3a738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a73c:	sub	sp, sp, #12
   3a740:	mov	r4, r0
   3a744:	ldr	r8, [sp, #52]	; 0x34
   3a748:	ldrb	r0, [r0, #27]
   3a74c:	cmp	r0, #0
   3a750:	bne	3a834 <flatcc_json_printer_int64_enum_vector_field@@Base+0xfc>
   3a754:	add	r2, r2, #2
   3a758:	lsl	r2, r2, #1
   3a75c:	ldr	r0, [r1, #8]
   3a760:	cmp	r0, r2
   3a764:	ble	3a950 <flatcc_json_printer_int64_enum_vector_field@@Base+0x218>
   3a768:	ldr	r0, [r1, #4]
   3a76c:	ldrh	r0, [r0, r2]
   3a770:	cmp	r0, #0
   3a774:	beq	3a950 <flatcc_json_printer_int64_enum_vector_field@@Base+0x218>
   3a778:	ldr	r5, [r1]
   3a77c:	adds	ip, r5, r0
   3a780:	beq	3a950 <flatcc_json_printer_int64_enum_vector_field@@Base+0x218>
   3a784:	ldr	r2, [r1, #16]
   3a788:	add	lr, r2, #1
   3a78c:	str	lr, [r1, #16]
   3a790:	cmp	r2, #0
   3a794:	ldrne	r2, [r4, #20]
   3a798:	addne	r1, r2, #1
   3a79c:	strne	r1, [r4, #20]
   3a7a0:	movne	r1, #44	; 0x2c
   3a7a4:	strbne	r1, [r2]
   3a7a8:	ldr	r2, [r5, r0]
   3a7ac:	add	r6, ip, r2
   3a7b0:	ldr	r7, [ip, r2]
   3a7b4:	ldr	r2, [sp, #48]	; 0x30
   3a7b8:	mov	r1, r3
   3a7bc:	mov	r0, r4
   3a7c0:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3a7c4:	ldr	r3, [r4, #32]
   3a7c8:	add	r3, r3, #1
   3a7cc:	str	r3, [r4, #32]
   3a7d0:	ldr	r3, [r4, #20]
   3a7d4:	add	r2, r3, #1
   3a7d8:	str	r2, [r4, #20]
   3a7dc:	mov	r2, #91	; 0x5b
   3a7e0:	strb	r2, [r3]
   3a7e4:	cmp	r7, #0
   3a7e8:	beq	3a930 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1f8>
   3a7ec:	ldrb	r3, [r4, #25]
   3a7f0:	cmp	r3, #0
   3a7f4:	bne	3a848 <flatcc_json_printer_int64_enum_vector_field@@Base+0x110>
   3a7f8:	ldr	r2, [r4, #20]
   3a7fc:	ldr	r3, [r4, #16]
   3a800:	cmp	r2, r3
   3a804:	bcs	3a868 <flatcc_json_printer_int64_enum_vector_field@@Base+0x130>
   3a808:	ldrd	r2, [r6, #4]
   3a80c:	mov	r0, r4
   3a810:	blx	r8
   3a814:	add	r6, r6, #12
   3a818:	sub	r5, r7, #2
   3a81c:	cmp	r7, #1
   3a820:	beq	3a930 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1f8>
   3a824:	mov	r9, #44	; 0x2c
   3a828:	mov	fp, #0
   3a82c:	mov	sl, #10
   3a830:	b	3a8e0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1a8>
   3a834:	ldr	r0, [sp, #48]	; 0x30
   3a838:	str	r0, [sp]
   3a83c:	mov	r0, r4
   3a840:	bl	38940 <flatcc_json_printer_int64_vector_field@@Base>
   3a844:	b	3a950 <flatcc_json_printer_int64_enum_vector_field@@Base+0x218>
   3a848:	ldr	r3, [r4, #20]
   3a84c:	add	r2, r3, #1
   3a850:	str	r2, [r4, #20]
   3a854:	mov	r2, #10
   3a858:	strb	r2, [r3]
   3a85c:	mov	r0, r4
   3a860:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   3a864:	b	3a808 <flatcc_json_printer_int64_enum_vector_field@@Base+0xd0>
   3a868:	ldr	r3, [r4, #44]	; 0x2c
   3a86c:	mov	r1, #0
   3a870:	mov	r0, r4
   3a874:	blx	r3
   3a878:	b	3a808 <flatcc_json_printer_int64_enum_vector_field@@Base+0xd0>
   3a87c:	ldr	r3, [r4, #20]
   3a880:	add	r2, r3, #1
   3a884:	str	r2, [r4, #20]
   3a888:	strb	sl, [r3]
   3a88c:	ldrb	r3, [r4, #25]
   3a890:	ldr	r7, [r4, #32]
   3a894:	mul	r7, r7, r3
   3a898:	ldr	r0, [r4, #20]
   3a89c:	add	r3, r0, r7
   3a8a0:	ldr	r2, [r4, #16]
   3a8a4:	cmp	r2, r3
   3a8a8:	bcc	3a920 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1e8>
   3a8ac:	mov	r2, r7
   3a8b0:	mov	r1, #32
   3a8b4:	bl	145c4 <memset@plt>
   3a8b8:	ldr	r3, [r4, #20]
   3a8bc:	add	r7, r3, r7
   3a8c0:	str	r7, [r4, #20]
   3a8c4:	ldrd	r2, [r6], #8
   3a8c8:	mov	r0, r4
   3a8cc:	blx	r8
   3a8d0:	sub	r3, r5, #1
   3a8d4:	cmp	r5, #0
   3a8d8:	beq	3a930 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1f8>
   3a8dc:	mov	r5, r3
   3a8e0:	ldr	r3, [r4, #20]
   3a8e4:	add	r2, r3, #1
   3a8e8:	str	r2, [r4, #20]
   3a8ec:	strb	r9, [r3]
   3a8f0:	ldrb	r3, [r4, #25]
   3a8f4:	cmp	r3, #0
   3a8f8:	bne	3a87c <flatcc_json_printer_int64_enum_vector_field@@Base+0x144>
   3a8fc:	ldr	r2, [r4, #20]
   3a900:	ldr	r3, [r4, #16]
   3a904:	cmp	r2, r3
   3a908:	bcc	3a8c4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x18c>
   3a90c:	ldr	r3, [r4, #44]	; 0x2c
   3a910:	mov	r1, fp
   3a914:	mov	r0, r4
   3a918:	blx	r3
   3a91c:	b	3a8c4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x18c>
   3a920:	mov	r1, r7
   3a924:	mov	r0, r4
   3a928:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3a92c:	b	3a8c4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x18c>
   3a930:	ldrb	r3, [r4, #25]
   3a934:	cmp	r3, #0
   3a938:	bne	3a958 <flatcc_json_printer_int64_enum_vector_field@@Base+0x220>
   3a93c:	ldr	r3, [r4, #20]
   3a940:	add	r2, r3, #1
   3a944:	str	r2, [r4, #20]
   3a948:	mov	r2, #93	; 0x5d
   3a94c:	strb	r2, [r3]
   3a950:	add	sp, sp, #12
   3a954:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a958:	ldr	r3, [r4, #20]
   3a95c:	add	r2, r3, #1
   3a960:	str	r2, [r4, #20]
   3a964:	mov	r2, #10
   3a968:	strb	r2, [r3]
   3a96c:	ldr	r5, [r4, #32]
   3a970:	sub	r5, r5, #1
   3a974:	str	r5, [r4, #32]
   3a978:	ldrb	r3, [r4, #25]
   3a97c:	mul	r5, r5, r3
   3a980:	ldr	r0, [r4, #20]
   3a984:	add	r3, r0, r5
   3a988:	ldr	r2, [r4, #16]
   3a98c:	cmp	r2, r3
   3a990:	bcc	3a9b0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x278>
   3a994:	mov	r2, r5
   3a998:	mov	r1, #32
   3a99c:	bl	145c4 <memset@plt>
   3a9a0:	ldr	r3, [r4, #20]
   3a9a4:	add	r5, r3, r5
   3a9a8:	str	r5, [r4, #20]
   3a9ac:	b	3a93c <flatcc_json_printer_int64_enum_vector_field@@Base+0x204>
   3a9b0:	mov	r1, r5
   3a9b4:	mov	r0, r4
   3a9b8:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3a9bc:	b	3a93c <flatcc_json_printer_int64_enum_vector_field@@Base+0x204>

0003a9c0 <flatcc_json_printer_bool_enum_vector_field@@Base>:
   3a9c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a9c4:	sub	sp, sp, #12
   3a9c8:	mov	r4, r0
   3a9cc:	ldr	r9, [sp, #52]	; 0x34
   3a9d0:	ldrb	r0, [r0, #27]
   3a9d4:	cmp	r0, #0
   3a9d8:	bne	3aab8 <flatcc_json_printer_bool_enum_vector_field@@Base+0xf8>
   3a9dc:	add	r2, r2, #2
   3a9e0:	lsl	r2, r2, #1
   3a9e4:	ldr	r0, [r1, #8]
   3a9e8:	cmp	r0, r2
   3a9ec:	ble	3abd0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x210>
   3a9f0:	ldr	r0, [r1, #4]
   3a9f4:	ldrh	r0, [r0, r2]
   3a9f8:	cmp	r0, #0
   3a9fc:	beq	3abd0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x210>
   3aa00:	ldr	r5, [r1]
   3aa04:	adds	ip, r5, r0
   3aa08:	beq	3abd0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x210>
   3aa0c:	ldr	r2, [r1, #16]
   3aa10:	add	lr, r2, #1
   3aa14:	str	lr, [r1, #16]
   3aa18:	cmp	r2, #0
   3aa1c:	ldrne	r2, [r4, #20]
   3aa20:	addne	r1, r2, #1
   3aa24:	strne	r1, [r4, #20]
   3aa28:	movne	r1, #44	; 0x2c
   3aa2c:	strbne	r1, [r2]
   3aa30:	ldr	r2, [r5, r0]
   3aa34:	add	r8, ip, r2
   3aa38:	ldr	r7, [ip, r2]
   3aa3c:	ldr	r2, [sp, #48]	; 0x30
   3aa40:	mov	r1, r3
   3aa44:	mov	r0, r4
   3aa48:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3aa4c:	ldr	r3, [r4, #32]
   3aa50:	add	r3, r3, #1
   3aa54:	str	r3, [r4, #32]
   3aa58:	ldr	r3, [r4, #20]
   3aa5c:	add	r2, r3, #1
   3aa60:	str	r2, [r4, #20]
   3aa64:	mov	r2, #91	; 0x5b
   3aa68:	strb	r2, [r3]
   3aa6c:	cmp	r7, #0
   3aa70:	beq	3abb0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1f0>
   3aa74:	ldrb	r3, [r4, #25]
   3aa78:	cmp	r3, #0
   3aa7c:	bne	3aacc <flatcc_json_printer_bool_enum_vector_field@@Base+0x10c>
   3aa80:	ldr	r2, [r4, #20]
   3aa84:	ldr	r3, [r4, #16]
   3aa88:	cmp	r2, r3
   3aa8c:	bcs	3aaec <flatcc_json_printer_bool_enum_vector_field@@Base+0x12c>
   3aa90:	ldrb	r1, [r8, #4]
   3aa94:	mov	r0, r4
   3aa98:	blx	r9
   3aa9c:	add	r5, r8, #5
   3aaa0:	cmp	r7, #1
   3aaa4:	beq	3abb0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1f0>
   3aaa8:	mov	sl, #44	; 0x2c
   3aaac:	mov	fp, #10
   3aab0:	add	r7, r7, #4
   3aab4:	b	3ab60 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1a0>
   3aab8:	ldr	r0, [sp, #48]	; 0x30
   3aabc:	str	r0, [sp]
   3aac0:	mov	r0, r4
   3aac4:	bl	38bb4 <flatcc_json_printer_bool_vector_field@@Base>
   3aac8:	b	3abd0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x210>
   3aacc:	ldr	r3, [r4, #20]
   3aad0:	add	r2, r3, #1
   3aad4:	str	r2, [r4, #20]
   3aad8:	mov	r2, #10
   3aadc:	strb	r2, [r3]
   3aae0:	mov	r0, r4
   3aae4:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   3aae8:	b	3aa90 <flatcc_json_printer_bool_enum_vector_field@@Base+0xd0>
   3aaec:	ldr	r3, [r4, #44]	; 0x2c
   3aaf0:	mov	r1, #0
   3aaf4:	mov	r0, r4
   3aaf8:	blx	r3
   3aafc:	b	3aa90 <flatcc_json_printer_bool_enum_vector_field@@Base+0xd0>
   3ab00:	ldr	r3, [r4, #20]
   3ab04:	add	r2, r3, #1
   3ab08:	str	r2, [r4, #20]
   3ab0c:	strb	fp, [r3]
   3ab10:	ldrb	r3, [r4, #25]
   3ab14:	ldr	r6, [r4, #32]
   3ab18:	mul	r6, r6, r3
   3ab1c:	ldr	r0, [r4, #20]
   3ab20:	add	r3, r0, r6
   3ab24:	ldr	r2, [r4, #16]
   3ab28:	cmp	r2, r3
   3ab2c:	bcc	3aba0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1e0>
   3ab30:	mov	r2, r6
   3ab34:	mov	r1, #32
   3ab38:	bl	145c4 <memset@plt>
   3ab3c:	ldr	r3, [r4, #20]
   3ab40:	add	r6, r3, r6
   3ab44:	str	r6, [r4, #20]
   3ab48:	ldrb	r1, [r5], #1
   3ab4c:	mov	r0, r4
   3ab50:	blx	r9
   3ab54:	sub	r3, r7, r5
   3ab58:	cmn	r8, r3
   3ab5c:	beq	3abb0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1f0>
   3ab60:	ldr	r3, [r4, #20]
   3ab64:	add	r2, r3, #1
   3ab68:	str	r2, [r4, #20]
   3ab6c:	strb	sl, [r3]
   3ab70:	ldrb	r3, [r4, #25]
   3ab74:	cmp	r3, #0
   3ab78:	bne	3ab00 <flatcc_json_printer_bool_enum_vector_field@@Base+0x140>
   3ab7c:	ldr	r2, [r4, #20]
   3ab80:	ldr	r3, [r4, #16]
   3ab84:	cmp	r2, r3
   3ab88:	bcc	3ab48 <flatcc_json_printer_bool_enum_vector_field@@Base+0x188>
   3ab8c:	ldr	r3, [r4, #44]	; 0x2c
   3ab90:	mov	r1, #0
   3ab94:	mov	r0, r4
   3ab98:	blx	r3
   3ab9c:	b	3ab48 <flatcc_json_printer_bool_enum_vector_field@@Base+0x188>
   3aba0:	mov	r1, r6
   3aba4:	mov	r0, r4
   3aba8:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3abac:	b	3ab48 <flatcc_json_printer_bool_enum_vector_field@@Base+0x188>
   3abb0:	ldrb	r3, [r4, #25]
   3abb4:	cmp	r3, #0
   3abb8:	bne	3abd8 <flatcc_json_printer_bool_enum_vector_field@@Base+0x218>
   3abbc:	ldr	r3, [r4, #20]
   3abc0:	add	r2, r3, #1
   3abc4:	str	r2, [r4, #20]
   3abc8:	mov	r2, #93	; 0x5d
   3abcc:	strb	r2, [r3]
   3abd0:	add	sp, sp, #12
   3abd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3abd8:	ldr	r3, [r4, #20]
   3abdc:	add	r2, r3, #1
   3abe0:	str	r2, [r4, #20]
   3abe4:	mov	r2, #10
   3abe8:	strb	r2, [r3]
   3abec:	ldr	r5, [r4, #32]
   3abf0:	sub	r5, r5, #1
   3abf4:	str	r5, [r4, #32]
   3abf8:	ldrb	r3, [r4, #25]
   3abfc:	mul	r5, r5, r3
   3ac00:	ldr	r0, [r4, #20]
   3ac04:	add	r3, r0, r5
   3ac08:	ldr	r2, [r4, #16]
   3ac0c:	cmp	r2, r3
   3ac10:	bcc	3ac30 <flatcc_json_printer_bool_enum_vector_field@@Base+0x270>
   3ac14:	mov	r2, r5
   3ac18:	mov	r1, #32
   3ac1c:	bl	145c4 <memset@plt>
   3ac20:	ldr	r3, [r4, #20]
   3ac24:	add	r5, r3, r5
   3ac28:	str	r5, [r4, #20]
   3ac2c:	b	3abbc <flatcc_json_printer_bool_enum_vector_field@@Base+0x1fc>
   3ac30:	mov	r1, r5
   3ac34:	mov	r0, r4
   3ac38:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3ac3c:	b	3abbc <flatcc_json_printer_bool_enum_vector_field@@Base+0x1fc>

0003ac40 <flatcc_json_printer_struct_vector_field@@Base>:
   3ac40:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ac44:	ldr	r8, [sp, #48]	; 0x30
   3ac48:	add	r2, r2, #2
   3ac4c:	lsl	r2, r2, #1
   3ac50:	ldr	ip, [r1, #8]
   3ac54:	cmp	r2, ip
   3ac58:	popge	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ac5c:	ldr	ip, [r1, #4]
   3ac60:	ldrh	ip, [ip, r2]
   3ac64:	cmp	ip, #0
   3ac68:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ac6c:	ldr	r5, [r1]
   3ac70:	adds	lr, r5, ip
   3ac74:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ac78:	ldr	r2, [r1, #16]
   3ac7c:	add	r4, r2, #1
   3ac80:	str	r4, [r1, #16]
   3ac84:	cmp	r2, #0
   3ac88:	ldrne	r2, [r0, #20]
   3ac8c:	addne	r1, r2, #1
   3ac90:	strne	r1, [r0, #20]
   3ac94:	movne	r1, #44	; 0x2c
   3ac98:	strbne	r1, [r2]
   3ac9c:	mov	r1, r3
   3aca0:	mov	r4, r0
   3aca4:	ldr	r3, [r5, ip]
   3aca8:	add	r6, lr, r3
   3acac:	ldr	r5, [lr, r3]
   3acb0:	ldr	r2, [sp, #40]	; 0x28
   3acb4:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3acb8:	ldr	r3, [r4, #32]
   3acbc:	add	r3, r3, #1
   3acc0:	str	r3, [r4, #32]
   3acc4:	ldr	r3, [r4, #20]
   3acc8:	add	r2, r3, #1
   3accc:	str	r2, [r4, #20]
   3acd0:	mov	r2, #91	; 0x5b
   3acd4:	strb	r2, [r3]
   3acd8:	cmp	r5, #0
   3acdc:	beq	3af28 <flatcc_json_printer_struct_vector_field@@Base+0x2e8>
   3ace0:	ldrb	r3, [r4, #25]
   3ace4:	cmp	r3, #0
   3ace8:	bne	3ad68 <flatcc_json_printer_struct_vector_field@@Base+0x128>
   3acec:	ldr	r2, [r4, #20]
   3acf0:	ldr	r3, [r4, #16]
   3acf4:	cmp	r2, r3
   3acf8:	bcs	3ad88 <flatcc_json_printer_struct_vector_field@@Base+0x148>
   3acfc:	add	r6, r6, #4
   3ad00:	ldr	r3, [r4, #32]
   3ad04:	add	r3, r3, #1
   3ad08:	str	r3, [r4, #32]
   3ad0c:	ldr	r3, [r4, #20]
   3ad10:	add	r2, r3, #1
   3ad14:	str	r2, [r4, #20]
   3ad18:	mov	r2, #123	; 0x7b
   3ad1c:	strb	r2, [r3]
   3ad20:	mov	r1, r6
   3ad24:	mov	r0, r4
   3ad28:	blx	r8
   3ad2c:	ldrb	r3, [r4, #25]
   3ad30:	cmp	r3, #0
   3ad34:	bne	3ad9c <flatcc_json_printer_struct_vector_field@@Base+0x15c>
   3ad38:	ldr	r3, [r4, #20]
   3ad3c:	add	r2, r3, #1
   3ad40:	str	r2, [r4, #20]
   3ad44:	mov	r2, #125	; 0x7d
   3ad48:	strb	r2, [r3]
   3ad4c:	sub	r7, r5, #2
   3ad50:	cmp	r5, #1
   3ad54:	beq	3af28 <flatcc_json_printer_struct_vector_field@@Base+0x2e8>
   3ad58:	mov	fp, #44	; 0x2c
   3ad5c:	mov	sl, #123	; 0x7b
   3ad60:	mov	r9, r2
   3ad64:	b	3ae68 <flatcc_json_printer_struct_vector_field@@Base+0x228>
   3ad68:	ldr	r3, [r4, #20]
   3ad6c:	add	r2, r3, #1
   3ad70:	str	r2, [r4, #20]
   3ad74:	mov	r2, #10
   3ad78:	strb	r2, [r3]
   3ad7c:	mov	r0, r4
   3ad80:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   3ad84:	b	3acfc <flatcc_json_printer_struct_vector_field@@Base+0xbc>
   3ad88:	ldr	r3, [r4, #44]	; 0x2c
   3ad8c:	mov	r1, #0
   3ad90:	mov	r0, r4
   3ad94:	blx	r3
   3ad98:	b	3acfc <flatcc_json_printer_struct_vector_field@@Base+0xbc>
   3ad9c:	ldr	r3, [r4, #20]
   3ada0:	add	r2, r3, #1
   3ada4:	str	r2, [r4, #20]
   3ada8:	mov	r2, #10
   3adac:	strb	r2, [r3]
   3adb0:	ldr	r3, [r4, #32]
   3adb4:	sub	r3, r3, #1
   3adb8:	str	r3, [r4, #32]
   3adbc:	mov	r0, r4
   3adc0:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   3adc4:	b	3ad38 <flatcc_json_printer_struct_vector_field@@Base+0xf8>
   3adc8:	ldr	r3, [r4, #20]
   3adcc:	add	r2, r3, #1
   3add0:	str	r2, [r4, #20]
   3add4:	mov	r2, #10
   3add8:	strb	r2, [r3]
   3addc:	ldrb	r3, [r4, #25]
   3ade0:	ldr	r5, [r4, #32]
   3ade4:	mul	r5, r5, r3
   3ade8:	ldr	r0, [r4, #20]
   3adec:	add	r3, r0, r5
   3adf0:	ldr	r2, [r4, #16]
   3adf4:	cmp	r2, r3
   3adf8:	bcc	3aeb0 <flatcc_json_printer_struct_vector_field@@Base+0x270>
   3adfc:	mov	r2, r5
   3ae00:	mov	r1, #32
   3ae04:	bl	145c4 <memset@plt>
   3ae08:	ldr	r3, [r4, #20]
   3ae0c:	add	r5, r3, r5
   3ae10:	str	r5, [r4, #20]
   3ae14:	ldr	r3, [r4, #32]
   3ae18:	add	r3, r3, #1
   3ae1c:	str	r3, [r4, #32]
   3ae20:	ldr	r3, [r4, #20]
   3ae24:	add	r2, r3, #1
   3ae28:	str	r2, [r4, #20]
   3ae2c:	strb	sl, [r3]
   3ae30:	mov	r1, r6
   3ae34:	mov	r0, r4
   3ae38:	blx	r8
   3ae3c:	ldrb	r3, [r4, #25]
   3ae40:	cmp	r3, #0
   3ae44:	bne	3aec0 <flatcc_json_printer_struct_vector_field@@Base+0x280>
   3ae48:	ldr	r3, [r4, #20]
   3ae4c:	add	r2, r3, #1
   3ae50:	str	r2, [r4, #20]
   3ae54:	strb	r9, [r3]
   3ae58:	sub	r3, r7, #1
   3ae5c:	cmp	r7, #0
   3ae60:	beq	3af28 <flatcc_json_printer_struct_vector_field@@Base+0x2e8>
   3ae64:	mov	r7, r3
   3ae68:	ldr	r3, [sp, #44]	; 0x2c
   3ae6c:	add	r6, r6, r3
   3ae70:	ldr	r3, [r4, #20]
   3ae74:	add	r2, r3, #1
   3ae78:	str	r2, [r4, #20]
   3ae7c:	strb	fp, [r3]
   3ae80:	ldrb	r3, [r4, #25]
   3ae84:	cmp	r3, #0
   3ae88:	bne	3adc8 <flatcc_json_printer_struct_vector_field@@Base+0x188>
   3ae8c:	ldr	r2, [r4, #20]
   3ae90:	ldr	r3, [r4, #16]
   3ae94:	cmp	r2, r3
   3ae98:	bcc	3ae14 <flatcc_json_printer_struct_vector_field@@Base+0x1d4>
   3ae9c:	ldr	r3, [r4, #44]	; 0x2c
   3aea0:	mov	r1, #0
   3aea4:	mov	r0, r4
   3aea8:	blx	r3
   3aeac:	b	3ae14 <flatcc_json_printer_struct_vector_field@@Base+0x1d4>
   3aeb0:	mov	r1, r5
   3aeb4:	mov	r0, r4
   3aeb8:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3aebc:	b	3ae14 <flatcc_json_printer_struct_vector_field@@Base+0x1d4>
   3aec0:	ldr	r3, [r4, #20]
   3aec4:	add	r2, r3, #1
   3aec8:	str	r2, [r4, #20]
   3aecc:	mov	r2, #10
   3aed0:	strb	r2, [r3]
   3aed4:	ldr	r5, [r4, #32]
   3aed8:	sub	r5, r5, #1
   3aedc:	str	r5, [r4, #32]
   3aee0:	ldrb	r3, [r4, #25]
   3aee4:	mul	r5, r5, r3
   3aee8:	ldr	r0, [r4, #20]
   3aeec:	add	r3, r0, r5
   3aef0:	ldr	r2, [r4, #16]
   3aef4:	cmp	r2, r3
   3aef8:	bcc	3af18 <flatcc_json_printer_struct_vector_field@@Base+0x2d8>
   3aefc:	mov	r2, r5
   3af00:	mov	r1, #32
   3af04:	bl	145c4 <memset@plt>
   3af08:	ldr	r3, [r4, #20]
   3af0c:	add	r5, r3, r5
   3af10:	str	r5, [r4, #20]
   3af14:	b	3ae48 <flatcc_json_printer_struct_vector_field@@Base+0x208>
   3af18:	mov	r1, r5
   3af1c:	mov	r0, r4
   3af20:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3af24:	b	3ae48 <flatcc_json_printer_struct_vector_field@@Base+0x208>
   3af28:	ldrb	r3, [r4, #25]
   3af2c:	cmp	r3, #0
   3af30:	bne	3af4c <flatcc_json_printer_struct_vector_field@@Base+0x30c>
   3af34:	ldr	r3, [r4, #20]
   3af38:	add	r2, r3, #1
   3af3c:	str	r2, [r4, #20]
   3af40:	mov	r2, #93	; 0x5d
   3af44:	strb	r2, [r3]
   3af48:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3af4c:	ldr	r3, [r4, #20]
   3af50:	add	r2, r3, #1
   3af54:	str	r2, [r4, #20]
   3af58:	mov	r2, #10
   3af5c:	strb	r2, [r3]
   3af60:	ldr	r5, [r4, #32]
   3af64:	sub	r5, r5, #1
   3af68:	str	r5, [r4, #32]
   3af6c:	ldrb	r3, [r4, #25]
   3af70:	mul	r5, r5, r3
   3af74:	ldr	r0, [r4, #20]
   3af78:	add	r3, r0, r5
   3af7c:	ldr	r2, [r4, #16]
   3af80:	cmp	r2, r3
   3af84:	bcc	3afa4 <flatcc_json_printer_struct_vector_field@@Base+0x364>
   3af88:	mov	r2, r5
   3af8c:	mov	r1, #32
   3af90:	bl	145c4 <memset@plt>
   3af94:	ldr	r3, [r4, #20]
   3af98:	add	r5, r3, r5
   3af9c:	str	r5, [r4, #20]
   3afa0:	b	3af34 <flatcc_json_printer_struct_vector_field@@Base+0x2f4>
   3afa4:	mov	r1, r5
   3afa8:	mov	r0, r4
   3afac:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3afb0:	b	3af34 <flatcc_json_printer_struct_vector_field@@Base+0x2f4>

0003afb4 <flatcc_json_printer_string_vector_field@@Base>:
   3afb4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3afb8:	ldr	r7, [sp, #40]	; 0x28
   3afbc:	add	r2, r2, #2
   3afc0:	lsl	r2, r2, #1
   3afc4:	ldr	ip, [r1, #8]
   3afc8:	cmp	ip, r2
   3afcc:	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3afd0:	ldr	ip, [r1, #4]
   3afd4:	ldrh	ip, [ip, r2]
   3afd8:	cmp	ip, #0
   3afdc:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3afe0:	ldr	r5, [r1]
   3afe4:	adds	lr, r5, ip
   3afe8:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3afec:	ldr	r2, [r1, #16]
   3aff0:	add	r4, r2, #1
   3aff4:	str	r4, [r1, #16]
   3aff8:	cmp	r2, #0
   3affc:	ldrne	r2, [r0, #20]
   3b000:	addne	r1, r2, #1
   3b004:	strne	r1, [r0, #20]
   3b008:	movne	r1, #44	; 0x2c
   3b00c:	strbne	r1, [r2]
   3b010:	mov	r8, r3
   3b014:	mov	r4, r0
   3b018:	ldr	r3, [r5, ip]
   3b01c:	add	r6, lr, r3
   3b020:	ldr	r5, [lr, r3]
   3b024:	ldrb	r3, [r0, #25]
   3b028:	cmp	r3, #0
   3b02c:	bne	3b084 <flatcc_json_printer_string_vector_field@@Base+0xd0>
   3b030:	ldr	r2, [r0, #20]
   3b034:	ldr	r3, [r0, #16]
   3b038:	cmp	r2, r3
   3b03c:	bcs	3b0e4 <flatcc_json_printer_string_vector_field@@Base+0x130>
   3b040:	ldr	r3, [r4, #20]
   3b044:	mov	r2, #34	; 0x22
   3b048:	strb	r2, [r3]
   3b04c:	ldrb	r3, [r4, #26]
   3b050:	ldr	r0, [r4, #20]
   3b054:	cmp	r3, #0
   3b058:	addeq	r0, r0, #1
   3b05c:	str	r0, [r4, #20]
   3b060:	add	r3, r0, r7
   3b064:	ldr	r2, [r4, #16]
   3b068:	cmp	r2, r3
   3b06c:	bhi	3b0f4 <flatcc_json_printer_string_vector_field@@Base+0x140>
   3b070:	mov	r2, r7
   3b074:	mov	r1, r8
   3b078:	mov	r0, r4
   3b07c:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3b080:	b	3b10c <flatcc_json_printer_string_vector_field@@Base+0x158>
   3b084:	ldr	r3, [r0, #20]
   3b088:	add	r2, r3, #1
   3b08c:	str	r2, [r0, #20]
   3b090:	mov	r2, #10
   3b094:	strb	r2, [r3]
   3b098:	ldrb	r3, [r0, #25]
   3b09c:	ldr	r9, [r0, #32]
   3b0a0:	mul	r9, r9, r3
   3b0a4:	ldr	r0, [r0, #20]
   3b0a8:	add	r3, r0, r9
   3b0ac:	ldr	r2, [r4, #16]
   3b0b0:	cmp	r2, r3
   3b0b4:	bcc	3b0d4 <flatcc_json_printer_string_vector_field@@Base+0x120>
   3b0b8:	mov	r2, r9
   3b0bc:	mov	r1, #32
   3b0c0:	bl	145c4 <memset@plt>
   3b0c4:	ldr	r3, [r4, #20]
   3b0c8:	add	r9, r3, r9
   3b0cc:	str	r9, [r4, #20]
   3b0d0:	b	3b040 <flatcc_json_printer_string_vector_field@@Base+0x8c>
   3b0d4:	mov	r1, r9
   3b0d8:	mov	r0, r4
   3b0dc:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3b0e0:	b	3b040 <flatcc_json_printer_string_vector_field@@Base+0x8c>
   3b0e4:	ldr	r3, [r0, #44]	; 0x2c
   3b0e8:	mov	r1, #0
   3b0ec:	blx	r3
   3b0f0:	b	3b040 <flatcc_json_printer_string_vector_field@@Base+0x8c>
   3b0f4:	mov	r2, r7
   3b0f8:	mov	r1, r8
   3b0fc:	bl	1454c <memcpy@plt>
   3b100:	ldr	r3, [r4, #20]
   3b104:	add	r7, r3, r7
   3b108:	str	r7, [r4, #20]
   3b10c:	ldr	r3, [r4, #20]
   3b110:	mov	r2, #34	; 0x22
   3b114:	strb	r2, [r3]
   3b118:	ldrb	r3, [r4, #26]
   3b11c:	clz	r3, r3
   3b120:	lsr	r3, r3, #5
   3b124:	ldr	r1, [r4, #20]
   3b128:	add	r2, r1, r3
   3b12c:	add	r2, r2, #1
   3b130:	str	r2, [r4, #20]
   3b134:	mov	r2, #58	; 0x3a
   3b138:	strb	r2, [r1, r3]
   3b13c:	ldr	r3, [r4, #20]
   3b140:	mov	r2, #32
   3b144:	strb	r2, [r3]
   3b148:	ldrb	r3, [r4, #25]
   3b14c:	adds	r3, r3, #0
   3b150:	movne	r3, #1
   3b154:	ldr	r0, [r4, #20]
   3b158:	add	r2, r0, r3
   3b15c:	ldr	r1, [r4, #32]
   3b160:	add	r1, r1, #1
   3b164:	str	r1, [r4, #32]
   3b168:	add	r2, r2, #1
   3b16c:	str	r2, [r4, #20]
   3b170:	mov	r2, #91	; 0x5b
   3b174:	strb	r2, [r0, r3]
   3b178:	cmp	r5, #0
   3b17c:	beq	3b314 <flatcc_json_printer_string_vector_field@@Base+0x360>
   3b180:	ldrb	r3, [r4, #25]
   3b184:	cmp	r3, #0
   3b188:	bne	3b1d8 <flatcc_json_printer_string_vector_field@@Base+0x224>
   3b18c:	ldr	r2, [r4, #20]
   3b190:	ldr	r3, [r4, #16]
   3b194:	cmp	r2, r3
   3b198:	bcs	3b238 <flatcc_json_printer_string_vector_field@@Base+0x284>
   3b19c:	ldr	r3, [r6, #4]
   3b1a0:	add	r3, r3, #4
   3b1a4:	add	r1, r6, r3
   3b1a8:	ldr	r2, [r6, r3]
   3b1ac:	add	r1, r1, #4
   3b1b0:	mov	r0, r4
   3b1b4:	bl	31720 <flatcc_json_parser_struct_as_root@@Base+0x1768>
   3b1b8:	sub	r7, r5, #2
   3b1bc:	cmp	r5, #1
   3b1c0:	beq	3b314 <flatcc_json_printer_string_vector_field@@Base+0x360>
   3b1c4:	add	r6, r6, #8
   3b1c8:	mov	r9, #44	; 0x2c
   3b1cc:	mov	fp, #0
   3b1d0:	mov	sl, #10
   3b1d4:	b	3b2c0 <flatcc_json_printer_string_vector_field@@Base+0x30c>
   3b1d8:	ldr	r3, [r4, #20]
   3b1dc:	add	r2, r3, #1
   3b1e0:	str	r2, [r4, #20]
   3b1e4:	mov	r2, #10
   3b1e8:	strb	r2, [r3]
   3b1ec:	ldrb	r3, [r4, #25]
   3b1f0:	ldr	r7, [r4, #32]
   3b1f4:	mul	r7, r7, r3
   3b1f8:	ldr	r0, [r4, #20]
   3b1fc:	add	r3, r0, r7
   3b200:	ldr	r2, [r4, #16]
   3b204:	cmp	r2, r3
   3b208:	bcc	3b228 <flatcc_json_printer_string_vector_field@@Base+0x274>
   3b20c:	mov	r2, r7
   3b210:	mov	r1, #32
   3b214:	bl	145c4 <memset@plt>
   3b218:	ldr	r3, [r4, #20]
   3b21c:	add	r7, r3, r7
   3b220:	str	r7, [r4, #20]
   3b224:	b	3b19c <flatcc_json_printer_string_vector_field@@Base+0x1e8>
   3b228:	mov	r1, r7
   3b22c:	mov	r0, r4
   3b230:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3b234:	b	3b19c <flatcc_json_printer_string_vector_field@@Base+0x1e8>
   3b238:	ldr	r3, [r4, #44]	; 0x2c
   3b23c:	mov	r1, #0
   3b240:	mov	r0, r4
   3b244:	blx	r3
   3b248:	b	3b19c <flatcc_json_printer_string_vector_field@@Base+0x1e8>
   3b24c:	ldr	r3, [r4, #20]
   3b250:	add	r2, r3, #1
   3b254:	str	r2, [r4, #20]
   3b258:	strb	sl, [r3]
   3b25c:	ldrb	r3, [r4, #25]
   3b260:	ldr	r8, [r4, #32]
   3b264:	mul	r8, r8, r3
   3b268:	ldr	r0, [r4, #20]
   3b26c:	add	r3, r0, r8
   3b270:	ldr	r2, [r4, #16]
   3b274:	cmp	r2, r3
   3b278:	bcc	3b304 <flatcc_json_printer_string_vector_field@@Base+0x350>
   3b27c:	mov	r2, r8
   3b280:	mov	r1, #32
   3b284:	bl	145c4 <memset@plt>
   3b288:	ldr	r3, [r4, #20]
   3b28c:	add	r8, r3, r8
   3b290:	str	r8, [r4, #20]
   3b294:	add	r6, r6, #4
   3b298:	ldr	r3, [r5]
   3b29c:	add	r1, r5, r3
   3b2a0:	ldr	r2, [r5, r3]
   3b2a4:	add	r1, r1, #4
   3b2a8:	mov	r0, r4
   3b2ac:	bl	31720 <flatcc_json_parser_struct_as_root@@Base+0x1768>
   3b2b0:	sub	r3, r7, #1
   3b2b4:	cmp	r7, #0
   3b2b8:	beq	3b314 <flatcc_json_printer_string_vector_field@@Base+0x360>
   3b2bc:	mov	r7, r3
   3b2c0:	mov	r5, r6
   3b2c4:	ldr	r3, [r4, #20]
   3b2c8:	add	r2, r3, #1
   3b2cc:	str	r2, [r4, #20]
   3b2d0:	strb	r9, [r3]
   3b2d4:	ldrb	r3, [r4, #25]
   3b2d8:	cmp	r3, #0
   3b2dc:	bne	3b24c <flatcc_json_printer_string_vector_field@@Base+0x298>
   3b2e0:	ldr	r2, [r4, #20]
   3b2e4:	ldr	r3, [r4, #16]
   3b2e8:	cmp	r2, r3
   3b2ec:	bcc	3b294 <flatcc_json_printer_string_vector_field@@Base+0x2e0>
   3b2f0:	ldr	r3, [r4, #44]	; 0x2c
   3b2f4:	mov	r1, fp
   3b2f8:	mov	r0, r4
   3b2fc:	blx	r3
   3b300:	b	3b294 <flatcc_json_printer_string_vector_field@@Base+0x2e0>
   3b304:	mov	r1, r8
   3b308:	mov	r0, r4
   3b30c:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3b310:	b	3b294 <flatcc_json_printer_string_vector_field@@Base+0x2e0>
   3b314:	ldrb	r3, [r4, #25]
   3b318:	cmp	r3, #0
   3b31c:	bne	3b338 <flatcc_json_printer_string_vector_field@@Base+0x384>
   3b320:	ldr	r3, [r4, #20]
   3b324:	add	r2, r3, #1
   3b328:	str	r2, [r4, #20]
   3b32c:	mov	r2, #93	; 0x5d
   3b330:	strb	r2, [r3]
   3b334:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b338:	ldr	r3, [r4, #20]
   3b33c:	add	r2, r3, #1
   3b340:	str	r2, [r4, #20]
   3b344:	mov	r2, #10
   3b348:	strb	r2, [r3]
   3b34c:	ldr	r5, [r4, #32]
   3b350:	sub	r5, r5, #1
   3b354:	str	r5, [r4, #32]
   3b358:	ldrb	r3, [r4, #25]
   3b35c:	mul	r5, r5, r3
   3b360:	ldr	r0, [r4, #20]
   3b364:	add	r3, r0, r5
   3b368:	ldr	r2, [r4, #16]
   3b36c:	cmp	r2, r3
   3b370:	bcc	3b390 <flatcc_json_printer_string_vector_field@@Base+0x3dc>
   3b374:	mov	r2, r5
   3b378:	mov	r1, #32
   3b37c:	bl	145c4 <memset@plt>
   3b380:	ldr	r3, [r4, #20]
   3b384:	add	r5, r3, r5
   3b388:	str	r5, [r4, #20]
   3b38c:	b	3b320 <flatcc_json_printer_string_vector_field@@Base+0x36c>
   3b390:	mov	r1, r5
   3b394:	mov	r0, r4
   3b398:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3b39c:	b	3b320 <flatcc_json_printer_string_vector_field@@Base+0x36c>

0003b3a0 <flatcc_json_printer_table_vector_field@@Base>:
   3b3a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b3a4:	sub	sp, sp, #28
   3b3a8:	ldr	r9, [sp, #64]	; 0x40
   3b3ac:	add	r2, r2, #2
   3b3b0:	lsl	r2, r2, #1
   3b3b4:	ldr	ip, [r1, #8]
   3b3b8:	cmp	ip, r2
   3b3bc:	ble	3b594 <flatcc_json_printer_table_vector_field@@Base+0x1f4>
   3b3c0:	ldr	ip, [r1, #4]
   3b3c4:	ldrh	ip, [ip, r2]
   3b3c8:	cmp	ip, #0
   3b3cc:	beq	3b594 <flatcc_json_printer_table_vector_field@@Base+0x1f4>
   3b3d0:	ldr	r5, [r1]
   3b3d4:	adds	lr, r5, ip
   3b3d8:	beq	3b594 <flatcc_json_printer_table_vector_field@@Base+0x1f4>
   3b3dc:	ldr	r2, [r1, #16]
   3b3e0:	add	r4, r2, #1
   3b3e4:	str	r4, [r1, #16]
   3b3e8:	cmp	r2, #0
   3b3ec:	ldrne	r2, [r0, #20]
   3b3f0:	addne	r4, r2, #1
   3b3f4:	strne	r4, [r0, #20]
   3b3f8:	movne	r4, #44	; 0x2c
   3b3fc:	strbne	r4, [r2]
   3b400:	mov	r6, r3
   3b404:	mov	r7, r1
   3b408:	mov	r4, r0
   3b40c:	ldr	r3, [r5, ip]
   3b410:	add	r8, lr, r3
   3b414:	ldr	r5, [lr, r3]
   3b418:	ldrb	r3, [r0, #25]
   3b41c:	cmp	r3, #0
   3b420:	bne	3b478 <flatcc_json_printer_table_vector_field@@Base+0xd8>
   3b424:	ldr	r2, [r0, #20]
   3b428:	ldr	r3, [r0, #16]
   3b42c:	cmp	r2, r3
   3b430:	bcs	3b4d8 <flatcc_json_printer_table_vector_field@@Base+0x138>
   3b434:	ldr	r3, [r4, #20]
   3b438:	mov	r2, #34	; 0x22
   3b43c:	strb	r2, [r3]
   3b440:	ldrb	r3, [r4, #26]
   3b444:	ldr	r0, [r4, #20]
   3b448:	cmp	r3, #0
   3b44c:	addeq	r0, r0, #1
   3b450:	str	r0, [r4, #20]
   3b454:	add	r3, r0, r9
   3b458:	ldr	r2, [r4, #16]
   3b45c:	cmp	r2, r3
   3b460:	bhi	3b4e8 <flatcc_json_printer_table_vector_field@@Base+0x148>
   3b464:	mov	r2, r9
   3b468:	mov	r1, r6
   3b46c:	mov	r0, r4
   3b470:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3b474:	b	3b500 <flatcc_json_printer_table_vector_field@@Base+0x160>
   3b478:	ldr	r3, [r0, #20]
   3b47c:	add	r2, r3, #1
   3b480:	str	r2, [r0, #20]
   3b484:	mov	r2, #10
   3b488:	strb	r2, [r3]
   3b48c:	ldrb	r3, [r0, #25]
   3b490:	ldr	sl, [r0, #32]
   3b494:	mul	sl, sl, r3
   3b498:	ldr	r0, [r0, #20]
   3b49c:	add	r3, r0, sl
   3b4a0:	ldr	r2, [r4, #16]
   3b4a4:	cmp	r2, r3
   3b4a8:	bcc	3b4c8 <flatcc_json_printer_table_vector_field@@Base+0x128>
   3b4ac:	mov	r2, sl
   3b4b0:	mov	r1, #32
   3b4b4:	bl	145c4 <memset@plt>
   3b4b8:	ldr	r3, [r4, #20]
   3b4bc:	add	sl, r3, sl
   3b4c0:	str	sl, [r4, #20]
   3b4c4:	b	3b434 <flatcc_json_printer_table_vector_field@@Base+0x94>
   3b4c8:	mov	r1, sl
   3b4cc:	mov	r0, r4
   3b4d0:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3b4d4:	b	3b434 <flatcc_json_printer_table_vector_field@@Base+0x94>
   3b4d8:	ldr	r3, [r0, #44]	; 0x2c
   3b4dc:	mov	r1, #0
   3b4e0:	blx	r3
   3b4e4:	b	3b434 <flatcc_json_printer_table_vector_field@@Base+0x94>
   3b4e8:	mov	r2, r9
   3b4ec:	mov	r1, r6
   3b4f0:	bl	1454c <memcpy@plt>
   3b4f4:	ldr	r3, [r4, #20]
   3b4f8:	add	r9, r3, r9
   3b4fc:	str	r9, [r4, #20]
   3b500:	ldr	r3, [r4, #20]
   3b504:	mov	r2, #34	; 0x22
   3b508:	strb	r2, [r3]
   3b50c:	ldrb	r3, [r4, #26]
   3b510:	clz	r3, r3
   3b514:	lsr	r3, r3, #5
   3b518:	ldr	r1, [r4, #20]
   3b51c:	add	r2, r1, r3
   3b520:	add	r2, r2, #1
   3b524:	str	r2, [r4, #20]
   3b528:	mov	r2, #58	; 0x3a
   3b52c:	strb	r2, [r1, r3]
   3b530:	ldr	r3, [r4, #20]
   3b534:	mov	r2, #32
   3b538:	strb	r2, [r3]
   3b53c:	ldrb	r3, [r4, #25]
   3b540:	adds	r3, r3, #0
   3b544:	movne	r3, #1
   3b548:	ldr	r0, [r4, #20]
   3b54c:	add	r2, r0, r3
   3b550:	ldr	r1, [r4, #32]
   3b554:	add	r1, r1, #1
   3b558:	str	r1, [r4, #32]
   3b55c:	add	r2, r2, #1
   3b560:	str	r2, [r4, #20]
   3b564:	mov	r2, #91	; 0x5b
   3b568:	strb	r2, [r0, r3]
   3b56c:	cmp	r5, #0
   3b570:	bne	3b59c <flatcc_json_printer_table_vector_field@@Base+0x1fc>
   3b574:	ldrb	r3, [r4, #25]
   3b578:	cmp	r3, #0
   3b57c:	bne	3b798 <flatcc_json_printer_table_vector_field@@Base+0x3f8>
   3b580:	ldr	r3, [r4, #20]
   3b584:	add	r2, r3, #1
   3b588:	str	r2, [r4, #20]
   3b58c:	mov	r2, #93	; 0x5d
   3b590:	strb	r2, [r3]
   3b594:	add	sp, sp, #28
   3b598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b59c:	add	r6, r8, #4
   3b5a0:	ldr	r3, [r7, #12]
   3b5a4:	subs	r3, r3, #1
   3b5a8:	bne	3b5d0 <flatcc_json_printer_table_vector_field@@Base+0x230>
   3b5ac:	ldr	r3, [r4, #36]	; 0x24
   3b5b0:	cmp	r3, #0
   3b5b4:	moveq	r3, #2
   3b5b8:	streq	r3, [r4, #36]	; 0x24
   3b5bc:	sub	r5, r5, #1
   3b5c0:	mov	r9, #44	; 0x2c
   3b5c4:	mov	fp, #123	; 0x7b
   3b5c8:	mov	sl, #0
   3b5cc:	b	3b6f0 <flatcc_json_printer_table_vector_field@@Base+0x350>
   3b5d0:	ldr	r0, [r8, #4]
   3b5d4:	add	r2, r6, r0
   3b5d8:	ldr	r1, [r4, #32]
   3b5dc:	add	r1, r1, #1
   3b5e0:	str	r1, [r4, #32]
   3b5e4:	ldr	r1, [r4, #20]
   3b5e8:	add	ip, r1, #1
   3b5ec:	str	ip, [r4, #20]
   3b5f0:	mov	ip, #123	; 0x7b
   3b5f4:	strb	ip, [r1]
   3b5f8:	mov	r1, #0
   3b5fc:	str	r1, [sp, #20]
   3b600:	str	r3, [sp, #16]
   3b604:	str	r2, [sp, #4]
   3b608:	ldr	r3, [r6, r0]
   3b60c:	sub	r3, r2, r3
   3b610:	str	r3, [sp, #8]
   3b614:	ldrh	r3, [r3]
   3b618:	str	r3, [sp, #12]
   3b61c:	add	r1, sp, #4
   3b620:	mov	r0, r4
   3b624:	ldr	r3, [sp, #68]	; 0x44
   3b628:	blx	r3
   3b62c:	ldrb	r3, [r4, #25]
   3b630:	cmp	r3, #0
   3b634:	bne	3b650 <flatcc_json_printer_table_vector_field@@Base+0x2b0>
   3b638:	ldr	r3, [r4, #20]
   3b63c:	add	r2, r3, #1
   3b640:	str	r2, [r4, #20]
   3b644:	mov	r2, #125	; 0x7d
   3b648:	strb	r2, [r3]
   3b64c:	b	3b5bc <flatcc_json_printer_table_vector_field@@Base+0x21c>
   3b650:	ldr	r3, [r4, #20]
   3b654:	add	r2, r3, #1
   3b658:	str	r2, [r4, #20]
   3b65c:	mov	r2, #10
   3b660:	strb	r2, [r3]
   3b664:	ldr	r3, [r4, #32]
   3b668:	sub	r3, r3, #1
   3b66c:	str	r3, [r4, #32]
   3b670:	mov	r0, r4
   3b674:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   3b678:	b	3b638 <flatcc_json_printer_table_vector_field@@Base+0x298>
   3b67c:	ldr	r0, [r6]
   3b680:	add	r2, r6, r0
   3b684:	ldr	r1, [r4, #32]
   3b688:	add	r1, r1, #1
   3b68c:	str	r1, [r4, #32]
   3b690:	ldr	r1, [r4, #20]
   3b694:	add	ip, r1, #1
   3b698:	str	ip, [r4, #20]
   3b69c:	strb	fp, [r1]
   3b6a0:	str	sl, [sp, #20]
   3b6a4:	str	r3, [sp, #16]
   3b6a8:	str	r2, [sp, #4]
   3b6ac:	ldr	r3, [r6, r0]
   3b6b0:	sub	r3, r2, r3
   3b6b4:	str	r3, [sp, #8]
   3b6b8:	ldrh	r3, [r3]
   3b6bc:	str	r3, [sp, #12]
   3b6c0:	add	r1, sp, #4
   3b6c4:	mov	r0, r4
   3b6c8:	ldr	r3, [sp, #68]	; 0x44
   3b6cc:	blx	r3
   3b6d0:	ldrb	r3, [r4, #25]
   3b6d4:	cmp	r3, #0
   3b6d8:	bne	3b730 <flatcc_json_printer_table_vector_field@@Base+0x390>
   3b6dc:	ldr	r3, [r4, #20]
   3b6e0:	add	r2, r3, #1
   3b6e4:	str	r2, [r4, #20]
   3b6e8:	mov	r2, #125	; 0x7d
   3b6ec:	strb	r2, [r3]
   3b6f0:	sub	r5, r5, #1
   3b6f4:	cmn	r5, #1
   3b6f8:	beq	3b574 <flatcc_json_printer_table_vector_field@@Base+0x1d4>
   3b6fc:	add	r6, r6, #4
   3b700:	ldr	r3, [r4, #20]
   3b704:	add	r2, r3, #1
   3b708:	str	r2, [r4, #20]
   3b70c:	strb	r9, [r3]
   3b710:	ldr	r3, [r7, #12]
   3b714:	subs	r3, r3, #1
   3b718:	bne	3b67c <flatcc_json_printer_table_vector_field@@Base+0x2dc>
   3b71c:	ldr	r3, [r4, #36]	; 0x24
   3b720:	cmp	r3, #0
   3b724:	moveq	r3, #2
   3b728:	streq	r3, [r4, #36]	; 0x24
   3b72c:	b	3b6f0 <flatcc_json_printer_table_vector_field@@Base+0x350>
   3b730:	ldr	r3, [r4, #20]
   3b734:	add	r2, r3, #1
   3b738:	str	r2, [r4, #20]
   3b73c:	mov	r2, #10
   3b740:	strb	r2, [r3]
   3b744:	ldr	r8, [r4, #32]
   3b748:	sub	r8, r8, #1
   3b74c:	str	r8, [r4, #32]
   3b750:	ldrb	r3, [r4, #25]
   3b754:	mul	r8, r8, r3
   3b758:	ldr	r0, [r4, #20]
   3b75c:	add	r3, r0, r8
   3b760:	ldr	r2, [r4, #16]
   3b764:	cmp	r2, r3
   3b768:	bcc	3b788 <flatcc_json_printer_table_vector_field@@Base+0x3e8>
   3b76c:	mov	r2, r8
   3b770:	mov	r1, #32
   3b774:	bl	145c4 <memset@plt>
   3b778:	ldr	r3, [r4, #20]
   3b77c:	add	r8, r3, r8
   3b780:	str	r8, [r4, #20]
   3b784:	b	3b6dc <flatcc_json_printer_table_vector_field@@Base+0x33c>
   3b788:	mov	r1, r8
   3b78c:	mov	r0, r4
   3b790:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3b794:	b	3b6dc <flatcc_json_printer_table_vector_field@@Base+0x33c>
   3b798:	ldr	r3, [r4, #20]
   3b79c:	add	r2, r3, #1
   3b7a0:	str	r2, [r4, #20]
   3b7a4:	mov	r2, #10
   3b7a8:	strb	r2, [r3]
   3b7ac:	ldr	r5, [r4, #32]
   3b7b0:	sub	r5, r5, #1
   3b7b4:	str	r5, [r4, #32]
   3b7b8:	ldrb	r3, [r4, #25]
   3b7bc:	mul	r5, r5, r3
   3b7c0:	ldr	r0, [r4, #20]
   3b7c4:	add	r3, r0, r5
   3b7c8:	ldr	r2, [r4, #16]
   3b7cc:	cmp	r2, r3
   3b7d0:	bcc	3b7f0 <flatcc_json_printer_table_vector_field@@Base+0x450>
   3b7d4:	mov	r2, r5
   3b7d8:	mov	r1, #32
   3b7dc:	bl	145c4 <memset@plt>
   3b7e0:	ldr	r3, [r4, #20]
   3b7e4:	add	r5, r3, r5
   3b7e8:	str	r5, [r4, #20]
   3b7ec:	b	3b580 <flatcc_json_printer_table_vector_field@@Base+0x1e0>
   3b7f0:	mov	r1, r5
   3b7f4:	mov	r0, r4
   3b7f8:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3b7fc:	b	3b580 <flatcc_json_printer_table_vector_field@@Base+0x1e0>

0003b800 <flatcc_json_printer_union_vector_field@@Base>:
   3b800:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b804:	sub	sp, sp, #140	; 0x8c
   3b808:	mov	r4, r0
   3b80c:	mov	r5, r1
   3b810:	mov	r8, r2
   3b814:	str	r3, [sp, #8]
   3b818:	ldr	r6, [sp, #176]	; 0xb0
   3b81c:	add	r3, r2, #1
   3b820:	lsl	r3, r3, #1
   3b824:	ldr	r2, [r1, #8]
   3b828:	cmp	r3, r2
   3b82c:	movge	r7, #0
   3b830:	bge	3b84c <flatcc_json_printer_union_vector_field@@Base+0x4c>
   3b834:	ldr	r1, [r1, #4]
   3b838:	ldrh	r1, [r1, r3]
   3b83c:	cmp	r1, #0
   3b840:	ldrne	r7, [r5]
   3b844:	addne	r7, r7, r1
   3b848:	moveq	r7, #0
   3b84c:	add	r3, r3, #2
   3b850:	cmp	r3, r2
   3b854:	bge	3bae4 <flatcc_json_printer_union_vector_field@@Base+0x2e4>
   3b858:	ldr	r2, [r5, #4]
   3b85c:	ldrh	r9, [r2, r3]
   3b860:	cmp	r9, #0
   3b864:	beq	3bae4 <flatcc_json_printer_union_vector_field@@Base+0x2e4>
   3b868:	ldr	r3, [r5]
   3b86c:	str	r3, [sp, #12]
   3b870:	add	fp, r3, r9
   3b874:	ldr	r3, [r5, #12]
   3b878:	str	r3, [sp, #20]
   3b87c:	cmp	r6, #100	; 0x64
   3b880:	bgt	3b9d0 <flatcc_json_printer_union_vector_field@@Base+0x1d0>
   3b884:	add	sl, sp, #28
   3b888:	mov	r2, r6
   3b88c:	ldr	r1, [sp, #8]
   3b890:	mov	r0, sl
   3b894:	bl	1454c <memcpy@plt>
   3b898:	add	r2, sl, r6
   3b89c:	ldr	r3, [pc, #600]	; 3bafc <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   3b8a0:	ldr	r0, [r3]
   3b8a4:	str	r0, [sl, r6]
   3b8a8:	ldrb	r3, [r3, #4]
   3b8ac:	strb	r3, [r2, #4]
   3b8b0:	cmp	fp, #0
   3b8b4:	cmpne	r7, #0
   3b8b8:	beq	3baf4 <flatcc_json_printer_union_vector_field@@Base+0x2f4>
   3b8bc:	ldr	r3, [sp, #180]	; 0xb4
   3b8c0:	str	r3, [sp, #4]
   3b8c4:	add	r3, r6, #5
   3b8c8:	str	r3, [sp]
   3b8cc:	add	r3, sp, #28
   3b8d0:	sub	r2, r8, #1
   3b8d4:	mov	r1, r5
   3b8d8:	mov	r0, r4
   3b8dc:	bl	39310 <flatcc_json_printer_utype_enum_vector_field@@Base>
   3b8e0:	ldr	r3, [r5, #16]
   3b8e4:	add	r2, r3, #1
   3b8e8:	str	r2, [r5, #16]
   3b8ec:	cmp	r3, #0
   3b8f0:	ldrne	r3, [r4, #20]
   3b8f4:	addne	r2, r3, #1
   3b8f8:	strne	r2, [r4, #20]
   3b8fc:	movne	r2, #44	; 0x2c
   3b900:	strbne	r2, [r3]
   3b904:	ldr	r3, [sp, #12]
   3b908:	ldr	r3, [r3, r9]
   3b90c:	add	r9, fp, r3
   3b910:	ldr	r5, [r7]
   3b914:	ldr	r8, [fp, r3]
   3b918:	mov	r2, r6
   3b91c:	ldr	r1, [sp, #8]
   3b920:	mov	r0, r4
   3b924:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3b928:	ldr	r3, [r4, #32]
   3b92c:	add	r3, r3, #1
   3b930:	str	r3, [r4, #32]
   3b934:	ldr	r3, [r4, #20]
   3b938:	add	r2, r3, #1
   3b93c:	str	r2, [r4, #20]
   3b940:	mov	r2, #91	; 0x5b
   3b944:	strb	r2, [r3]
   3b948:	cmp	r8, #0
   3b94c:	beq	3ba94 <flatcc_json_printer_union_vector_field@@Base+0x294>
   3b950:	add	r7, r7, r5
   3b954:	add	r6, r9, #4
   3b958:	ldrb	r3, [r7, #4]
   3b95c:	cmp	r3, #0
   3b960:	bne	3b9f4 <flatcc_json_printer_union_vector_field@@Base+0x1f4>
   3b964:	ldr	r3, [r4, #20]
   3b968:	add	r2, r3, #1
   3b96c:	str	r2, [r4, #20]
   3b970:	mov	r2, #110	; 0x6e
   3b974:	strb	r2, [r3]
   3b978:	ldr	r3, [r4, #20]
   3b97c:	add	r2, r3, #1
   3b980:	str	r2, [r4, #20]
   3b984:	mov	r2, #117	; 0x75
   3b988:	strb	r2, [r3]
   3b98c:	ldr	r3, [r4, #20]
   3b990:	add	r2, r3, #1
   3b994:	str	r2, [r4, #20]
   3b998:	mov	r2, #108	; 0x6c
   3b99c:	strb	r2, [r3]
   3b9a0:	ldr	r3, [r4, #20]
   3b9a4:	add	r1, r3, #1
   3b9a8:	str	r1, [r4, #20]
   3b9ac:	strb	r2, [r3]
   3b9b0:	add	r8, r8, #3
   3b9b4:	add	r8, r7, r8
   3b9b8:	add	r7, r7, #4
   3b9bc:	mov	r9, #44	; 0x2c
   3b9c0:	mov	fp, #110	; 0x6e
   3b9c4:	mov	sl, #117	; 0x75
   3b9c8:	mov	r5, #108	; 0x6c
   3b9cc:	b	3ba28 <flatcc_json_printer_union_vector_field@@Base+0x228>
   3b9d0:	ldr	r3, [r4, #36]	; 0x24
   3b9d4:	cmp	r3, #0
   3b9d8:	moveq	r3, #1
   3b9dc:	streq	r3, [r4, #36]	; 0x24
   3b9e0:	ldr	r3, [pc, #280]	; 3bb00 <flatcc_json_printer_union_vector_field@@Base+0x300>
   3b9e4:	ldr	r2, [pc, #280]	; 3bb04 <flatcc_json_printer_union_vector_field@@Base+0x304>
   3b9e8:	ldr	r1, [pc, #280]	; 3bb08 <flatcc_json_printer_union_vector_field@@Base+0x308>
   3b9ec:	ldr	r0, [pc, #280]	; 3bb0c <flatcc_json_printer_union_vector_field@@Base+0x30c>
   3b9f0:	bl	14618 <__assert_fail@plt>
   3b9f4:	strb	r3, [sp, #24]
   3b9f8:	add	r1, sp, #136	; 0x88
   3b9fc:	str	r6, [r1, #-120]!	; 0xffffff88
   3ba00:	mov	r0, r4
   3ba04:	ldr	r3, [sp, #184]	; 0xb8
   3ba08:	blx	r3
   3ba0c:	b	3b9b0 <flatcc_json_printer_union_vector_field@@Base+0x1b0>
   3ba10:	strb	r2, [sp, #24]
   3ba14:	str	r6, [sp, #16]
   3ba18:	add	r1, sp, #16
   3ba1c:	mov	r0, r4
   3ba20:	ldr	r3, [sp, #184]	; 0xb8
   3ba24:	blx	r3
   3ba28:	cmp	r7, r8
   3ba2c:	beq	3ba94 <flatcc_json_printer_union_vector_field@@Base+0x294>
   3ba30:	add	r6, r6, #4
   3ba34:	ldrb	r2, [r7, #1]!
   3ba38:	ldr	r3, [r4, #20]
   3ba3c:	add	r1, r3, #1
   3ba40:	str	r1, [r4, #20]
   3ba44:	strb	r9, [r3]
   3ba48:	cmp	r2, #0
   3ba4c:	bne	3ba10 <flatcc_json_printer_union_vector_field@@Base+0x210>
   3ba50:	ldr	r3, [r4, #20]
   3ba54:	add	r2, r3, #1
   3ba58:	str	r2, [r4, #20]
   3ba5c:	strb	fp, [r3]
   3ba60:	ldr	r3, [r4, #20]
   3ba64:	add	r2, r3, #1
   3ba68:	str	r2, [r4, #20]
   3ba6c:	strb	sl, [r3]
   3ba70:	ldr	r3, [r4, #20]
   3ba74:	add	r2, r3, #1
   3ba78:	str	r2, [r4, #20]
   3ba7c:	strb	r5, [r3]
   3ba80:	ldr	r3, [r4, #20]
   3ba84:	add	r2, r3, #1
   3ba88:	str	r2, [r4, #20]
   3ba8c:	strb	r5, [r3]
   3ba90:	b	3ba28 <flatcc_json_printer_union_vector_field@@Base+0x228>
   3ba94:	ldrb	r3, [r4, #25]
   3ba98:	cmp	r3, #0
   3ba9c:	bne	3bab8 <flatcc_json_printer_union_vector_field@@Base+0x2b8>
   3baa0:	ldr	r3, [r4, #20]
   3baa4:	add	r2, r3, #1
   3baa8:	str	r2, [r4, #20]
   3baac:	mov	r2, #93	; 0x5d
   3bab0:	strb	r2, [r3]
   3bab4:	b	3baf4 <flatcc_json_printer_union_vector_field@@Base+0x2f4>
   3bab8:	ldr	r3, [r4, #20]
   3babc:	add	r2, r3, #1
   3bac0:	str	r2, [r4, #20]
   3bac4:	mov	r2, #10
   3bac8:	strb	r2, [r3]
   3bacc:	ldr	r3, [r4, #32]
   3bad0:	sub	r3, r3, #1
   3bad4:	str	r3, [r4, #32]
   3bad8:	mov	r0, r4
   3badc:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   3bae0:	b	3baa0 <flatcc_json_printer_union_vector_field@@Base+0x2a0>
   3bae4:	ldr	r3, [r5, #12]
   3bae8:	str	r3, [sp, #20]
   3baec:	cmp	r6, #100	; 0x64
   3baf0:	bgt	3b9d0 <flatcc_json_printer_union_vector_field@@Base+0x1d0>
   3baf4:	add	sp, sp, #140	; 0x8c
   3baf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bafc:	andeq	r3, r4, ip, lsr #24
   3bb00:	ldrdeq	r3, [r4], -ip
   3bb04:	andeq	r0, r0, fp, asr #6
   3bb08:	andeq	r3, r4, ip, lsr #21
   3bb0c:	andeq	r3, r4, r0, lsl ip

0003bb10 <flatcc_json_printer_table_field@@Base>:
   3bb10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bb14:	sub	sp, sp, #28
   3bb18:	ldr	sl, [sp, #64]	; 0x40
   3bb1c:	add	r2, r2, #2
   3bb20:	lsl	r2, r2, #1
   3bb24:	ldr	ip, [r1, #8]
   3bb28:	cmp	r2, ip
   3bb2c:	bge	3bcd4 <flatcc_json_printer_table_field@@Base+0x1c4>
   3bb30:	ldr	ip, [r1, #4]
   3bb34:	ldrh	r6, [ip, r2]
   3bb38:	cmp	r6, #0
   3bb3c:	beq	3bcd4 <flatcc_json_printer_table_field@@Base+0x1c4>
   3bb40:	ldr	r7, [r1]
   3bb44:	adds	r8, r7, r6
   3bb48:	beq	3bcd4 <flatcc_json_printer_table_field@@Base+0x1c4>
   3bb4c:	ldr	r2, [r1, #16]
   3bb50:	add	ip, r2, #1
   3bb54:	str	ip, [r1, #16]
   3bb58:	cmp	r2, #0
   3bb5c:	ldrne	r2, [r0, #20]
   3bb60:	addne	ip, r2, #1
   3bb64:	strne	ip, [r0, #20]
   3bb68:	movne	ip, #44	; 0x2c
   3bb6c:	strbne	ip, [r2]
   3bb70:	mov	r9, r3
   3bb74:	mov	r5, r1
   3bb78:	mov	r4, r0
   3bb7c:	ldrb	r3, [r0, #25]
   3bb80:	cmp	r3, #0
   3bb84:	bne	3bbdc <flatcc_json_printer_table_field@@Base+0xcc>
   3bb88:	ldr	r2, [r0, #20]
   3bb8c:	ldr	r3, [r0, #16]
   3bb90:	cmp	r2, r3
   3bb94:	bcs	3bc3c <flatcc_json_printer_table_field@@Base+0x12c>
   3bb98:	ldr	r3, [r4, #20]
   3bb9c:	mov	r2, #34	; 0x22
   3bba0:	strb	r2, [r3]
   3bba4:	ldrb	r3, [r4, #26]
   3bba8:	ldr	r0, [r4, #20]
   3bbac:	cmp	r3, #0
   3bbb0:	addeq	r0, r0, #1
   3bbb4:	str	r0, [r4, #20]
   3bbb8:	add	r3, r0, sl
   3bbbc:	ldr	r2, [r4, #16]
   3bbc0:	cmp	r2, r3
   3bbc4:	bhi	3bc4c <flatcc_json_printer_table_field@@Base+0x13c>
   3bbc8:	mov	r2, sl
   3bbcc:	mov	r1, r9
   3bbd0:	mov	r0, r4
   3bbd4:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3bbd8:	b	3bc64 <flatcc_json_printer_table_field@@Base+0x154>
   3bbdc:	ldr	r3, [r0, #20]
   3bbe0:	add	r2, r3, #1
   3bbe4:	str	r2, [r0, #20]
   3bbe8:	mov	r2, #10
   3bbec:	strb	r2, [r3]
   3bbf0:	ldrb	r3, [r0, #25]
   3bbf4:	ldr	fp, [r0, #32]
   3bbf8:	mul	fp, fp, r3
   3bbfc:	ldr	r0, [r0, #20]
   3bc00:	add	r3, r0, fp
   3bc04:	ldr	r2, [r4, #16]
   3bc08:	cmp	r2, r3
   3bc0c:	bcc	3bc2c <flatcc_json_printer_table_field@@Base+0x11c>
   3bc10:	mov	r2, fp
   3bc14:	mov	r1, #32
   3bc18:	bl	145c4 <memset@plt>
   3bc1c:	ldr	r3, [r4, #20]
   3bc20:	add	fp, r3, fp
   3bc24:	str	fp, [r4, #20]
   3bc28:	b	3bb98 <flatcc_json_printer_table_field@@Base+0x88>
   3bc2c:	mov	r1, fp
   3bc30:	mov	r0, r4
   3bc34:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3bc38:	b	3bb98 <flatcc_json_printer_table_field@@Base+0x88>
   3bc3c:	ldr	r3, [r0, #44]	; 0x2c
   3bc40:	mov	r1, #0
   3bc44:	blx	r3
   3bc48:	b	3bb98 <flatcc_json_printer_table_field@@Base+0x88>
   3bc4c:	mov	r2, sl
   3bc50:	mov	r1, r9
   3bc54:	bl	1454c <memcpy@plt>
   3bc58:	ldr	r3, [r4, #20]
   3bc5c:	add	sl, r3, sl
   3bc60:	str	sl, [r4, #20]
   3bc64:	ldr	r3, [r4, #20]
   3bc68:	mov	r2, #34	; 0x22
   3bc6c:	strb	r2, [r3]
   3bc70:	ldrb	r3, [r4, #26]
   3bc74:	clz	r3, r3
   3bc78:	lsr	r3, r3, #5
   3bc7c:	ldr	r1, [r4, #20]
   3bc80:	add	r2, r1, r3
   3bc84:	add	r2, r2, #1
   3bc88:	str	r2, [r4, #20]
   3bc8c:	mov	r2, #58	; 0x3a
   3bc90:	strb	r2, [r1, r3]
   3bc94:	ldr	r3, [r4, #20]
   3bc98:	mov	r2, #32
   3bc9c:	strb	r2, [r3]
   3bca0:	ldrb	r2, [r4, #25]
   3bca4:	adds	r2, r2, #0
   3bca8:	movne	r2, #1
   3bcac:	ldr	r0, [r4, #20]
   3bcb0:	add	r1, r0, r2
   3bcb4:	str	r1, [r4, #20]
   3bcb8:	ldr	r3, [r5, #12]
   3bcbc:	subs	r3, r3, #1
   3bcc0:	bne	3bcdc <flatcc_json_printer_table_field@@Base+0x1cc>
   3bcc4:	ldr	r3, [r4, #36]	; 0x24
   3bcc8:	cmp	r3, #0
   3bccc:	moveq	r3, #2
   3bcd0:	streq	r3, [r4, #36]	; 0x24
   3bcd4:	add	sp, sp, #28
   3bcd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bcdc:	ldr	r5, [r7, r6]
   3bce0:	add	ip, r8, r5
   3bce4:	ldr	lr, [r4, #32]
   3bce8:	add	lr, lr, #1
   3bcec:	str	lr, [r4, #32]
   3bcf0:	add	r1, r1, #1
   3bcf4:	str	r1, [r4, #20]
   3bcf8:	mov	r1, #123	; 0x7b
   3bcfc:	strb	r1, [r0, r2]
   3bd00:	mov	r2, #0
   3bd04:	str	r2, [sp, #20]
   3bd08:	str	r3, [sp, #16]
   3bd0c:	str	ip, [sp, #4]
   3bd10:	ldr	r3, [r8, r5]
   3bd14:	sub	r3, ip, r3
   3bd18:	str	r3, [sp, #8]
   3bd1c:	ldrh	r3, [r3]
   3bd20:	str	r3, [sp, #12]
   3bd24:	add	r1, sp, #4
   3bd28:	mov	r0, r4
   3bd2c:	ldr	r3, [sp, #68]	; 0x44
   3bd30:	blx	r3
   3bd34:	ldrb	r3, [r4, #25]
   3bd38:	cmp	r3, #0
   3bd3c:	bne	3bd58 <flatcc_json_printer_table_field@@Base+0x248>
   3bd40:	ldr	r3, [r4, #20]
   3bd44:	add	r2, r3, #1
   3bd48:	str	r2, [r4, #20]
   3bd4c:	mov	r2, #125	; 0x7d
   3bd50:	strb	r2, [r3]
   3bd54:	b	3bcd4 <flatcc_json_printer_table_field@@Base+0x1c4>
   3bd58:	ldr	r3, [r4, #20]
   3bd5c:	add	r2, r3, #1
   3bd60:	str	r2, [r4, #20]
   3bd64:	mov	r2, #10
   3bd68:	strb	r2, [r3]
   3bd6c:	ldr	r5, [r4, #32]
   3bd70:	sub	r5, r5, #1
   3bd74:	str	r5, [r4, #32]
   3bd78:	ldrb	r3, [r4, #25]
   3bd7c:	mul	r5, r5, r3
   3bd80:	ldr	r0, [r4, #20]
   3bd84:	add	r3, r0, r5
   3bd88:	ldr	r2, [r4, #16]
   3bd8c:	cmp	r2, r3
   3bd90:	bcc	3bdb0 <flatcc_json_printer_table_field@@Base+0x2a0>
   3bd94:	mov	r2, r5
   3bd98:	mov	r1, #32
   3bd9c:	bl	145c4 <memset@plt>
   3bda0:	ldr	r3, [r4, #20]
   3bda4:	add	r5, r3, r5
   3bda8:	str	r5, [r4, #20]
   3bdac:	b	3bd40 <flatcc_json_printer_table_field@@Base+0x230>
   3bdb0:	mov	r1, r5
   3bdb4:	mov	r0, r4
   3bdb8:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3bdbc:	b	3bd40 <flatcc_json_printer_table_field@@Base+0x230>

0003bdc0 <flatcc_json_printer_union_field@@Base>:
   3bdc0:	push	{r4, r5, r6, r7, r8, r9, lr}
   3bdc4:	sub	sp, sp, #20
   3bdc8:	add	r2, r2, #1
   3bdcc:	lsl	r2, r2, #1
   3bdd0:	ldr	ip, [r1, #8]
   3bdd4:	cmp	r2, ip
   3bdd8:	movge	lr, #0
   3bddc:	bge	3bdf8 <flatcc_json_printer_union_field@@Base+0x38>
   3bde0:	ldr	lr, [r1, #4]
   3bde4:	ldrh	r4, [lr, r2]
   3bde8:	cmp	r4, #0
   3bdec:	ldrne	lr, [r1]
   3bdf0:	addne	lr, lr, r4
   3bdf4:	moveq	lr, #0
   3bdf8:	add	r2, r2, #2
   3bdfc:	cmp	r2, ip
   3be00:	bge	3bf80 <flatcc_json_printer_union_field@@Base+0x1c0>
   3be04:	ldr	ip, [r1, #4]
   3be08:	ldrh	r2, [ip, r2]
   3be0c:	cmp	r2, #0
   3be10:	beq	3bf80 <flatcc_json_printer_union_field@@Base+0x1c0>
   3be14:	ldr	r8, [r1]
   3be18:	adds	r8, r8, r2
   3be1c:	moveq	r2, #1
   3be20:	movne	r2, #0
   3be24:	cmp	lr, #0
   3be28:	orreq	r2, r2, #1
   3be2c:	cmp	r2, #0
   3be30:	bne	3bf80 <flatcc_json_printer_union_field@@Base+0x1c0>
   3be34:	ldrb	r7, [lr]
   3be38:	ldr	r2, [r1, #16]
   3be3c:	add	ip, r2, #1
   3be40:	str	ip, [r1, #16]
   3be44:	cmp	r2, #0
   3be48:	ldrne	r2, [r0, #20]
   3be4c:	addne	ip, r2, #1
   3be50:	strne	ip, [r0, #20]
   3be54:	movne	ip, #44	; 0x2c
   3be58:	strbne	ip, [r2]
   3be5c:	mov	r6, r3
   3be60:	mov	r5, r1
   3be64:	mov	r4, r0
   3be68:	ldrb	r3, [r0, #25]
   3be6c:	cmp	r3, #0
   3be70:	bne	3bf88 <flatcc_json_printer_union_field@@Base+0x1c8>
   3be74:	ldr	r2, [r0, #20]
   3be78:	ldr	r3, [r0, #16]
   3be7c:	cmp	r2, r3
   3be80:	bcs	3bfe8 <flatcc_json_printer_union_field@@Base+0x228>
   3be84:	ldr	r3, [r4, #20]
   3be88:	mov	r2, #34	; 0x22
   3be8c:	strb	r2, [r3]
   3be90:	ldrb	r3, [r4, #26]
   3be94:	ldr	r0, [r4, #20]
   3be98:	cmp	r3, #0
   3be9c:	addeq	r0, r0, #1
   3bea0:	str	r0, [r4, #20]
   3bea4:	ldr	r3, [sp, #48]	; 0x30
   3bea8:	add	r3, r0, r3
   3beac:	ldr	r2, [r4, #16]
   3beb0:	cmp	r2, r3
   3beb4:	bls	3bff8 <flatcc_json_printer_union_field@@Base+0x238>
   3beb8:	ldr	r2, [sp, #48]	; 0x30
   3bebc:	mov	r1, r6
   3bec0:	bl	1454c <memcpy@plt>
   3bec4:	ldr	r3, [r4, #20]
   3bec8:	ldr	r2, [sp, #48]	; 0x30
   3becc:	add	r3, r3, r2
   3bed0:	str	r3, [r4, #20]
   3bed4:	ldr	r3, [r4, #20]
   3bed8:	add	r2, r3, #5
   3bedc:	ldr	r1, [r4, #16]
   3bee0:	cmp	r1, r2
   3bee4:	bls	3c00c <flatcc_json_printer_union_field@@Base+0x24c>
   3bee8:	ldr	r2, [pc, #396]	; 3c07c <flatcc_json_printer_union_field@@Base+0x2bc>
   3beec:	ldr	r0, [r2]
   3bef0:	str	r0, [r3]
   3bef4:	ldrb	r2, [r2, #4]
   3bef8:	strb	r2, [r3, #4]
   3befc:	ldr	r3, [r4, #20]
   3bf00:	add	r3, r3, #5
   3bf04:	str	r3, [r4, #20]
   3bf08:	ldr	r3, [r4, #20]
   3bf0c:	mov	r2, #34	; 0x22
   3bf10:	strb	r2, [r3]
   3bf14:	ldrb	r2, [r4, #26]
   3bf18:	clz	r2, r2
   3bf1c:	lsr	r2, r2, #5
   3bf20:	ldr	r1, [r4, #20]
   3bf24:	add	r3, r1, r2
   3bf28:	add	r3, r3, #1
   3bf2c:	str	r3, [r4, #20]
   3bf30:	mov	r3, #58	; 0x3a
   3bf34:	strb	r3, [r1, r2]
   3bf38:	ldr	r3, [r4, #20]
   3bf3c:	mov	r2, #32
   3bf40:	strb	r2, [r3]
   3bf44:	ldrb	r3, [r4, #25]
   3bf48:	ldr	r1, [r4, #20]
   3bf4c:	cmp	r3, #0
   3bf50:	addne	r1, r1, #1
   3bf54:	str	r1, [r4, #20]
   3bf58:	ldrb	r3, [r4, #27]
   3bf5c:	cmp	r3, #0
   3bf60:	beq	3c020 <flatcc_json_printer_union_field@@Base+0x260>
   3bf64:	mov	r0, r7
   3bf68:	bl	30090 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   3bf6c:	ldr	r3, [r4, #20]
   3bf70:	add	r0, r3, r0
   3bf74:	str	r0, [r4, #20]
   3bf78:	cmp	r7, #0
   3bf7c:	bne	3c034 <flatcc_json_printer_union_field@@Base+0x274>
   3bf80:	add	sp, sp, #20
   3bf84:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3bf88:	ldr	r3, [r0, #20]
   3bf8c:	add	r2, r3, #1
   3bf90:	str	r2, [r0, #20]
   3bf94:	mov	r2, #10
   3bf98:	strb	r2, [r3]
   3bf9c:	ldrb	r3, [r0, #25]
   3bfa0:	ldr	r9, [r0, #32]
   3bfa4:	mul	r9, r9, r3
   3bfa8:	ldr	r0, [r0, #20]
   3bfac:	add	r3, r0, r9
   3bfb0:	ldr	r2, [r4, #16]
   3bfb4:	cmp	r2, r3
   3bfb8:	bcc	3bfd8 <flatcc_json_printer_union_field@@Base+0x218>
   3bfbc:	mov	r2, r9
   3bfc0:	mov	r1, #32
   3bfc4:	bl	145c4 <memset@plt>
   3bfc8:	ldr	r3, [r4, #20]
   3bfcc:	add	r9, r3, r9
   3bfd0:	str	r9, [r4, #20]
   3bfd4:	b	3be84 <flatcc_json_printer_union_field@@Base+0xc4>
   3bfd8:	mov	r1, r9
   3bfdc:	mov	r0, r4
   3bfe0:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3bfe4:	b	3be84 <flatcc_json_printer_union_field@@Base+0xc4>
   3bfe8:	ldr	r3, [r0, #44]	; 0x2c
   3bfec:	mov	r1, #0
   3bff0:	blx	r3
   3bff4:	b	3be84 <flatcc_json_printer_union_field@@Base+0xc4>
   3bff8:	ldr	r2, [sp, #48]	; 0x30
   3bffc:	mov	r1, r6
   3c000:	mov	r0, r4
   3c004:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3c008:	b	3bed4 <flatcc_json_printer_union_field@@Base+0x114>
   3c00c:	mov	r2, #5
   3c010:	ldr	r1, [pc, #100]	; 3c07c <flatcc_json_printer_union_field@@Base+0x2bc>
   3c014:	mov	r0, r4
   3c018:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3c01c:	b	3bf08 <flatcc_json_printer_union_field@@Base+0x148>
   3c020:	mov	r1, r7
   3c024:	mov	r0, r4
   3c028:	ldr	r3, [sp, #52]	; 0x34
   3c02c:	blx	r3
   3c030:	b	3bf78 <flatcc_json_printer_union_field@@Base+0x1b8>
   3c034:	ldr	r3, [r4, #20]
   3c038:	add	r2, r3, #1
   3c03c:	str	r2, [r4, #20]
   3c040:	mov	r2, #44	; 0x2c
   3c044:	strb	r2, [r3]
   3c048:	ldr	r2, [sp, #48]	; 0x30
   3c04c:	mov	r1, r6
   3c050:	mov	r0, r4
   3c054:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3c058:	ldr	r3, [r5, #12]
   3c05c:	str	r3, [sp, #8]
   3c060:	strb	r7, [sp, #12]
   3c064:	add	r1, sp, #16
   3c068:	str	r8, [r1, #-12]!
   3c06c:	mov	r0, r4
   3c070:	ldr	r3, [sp, #56]	; 0x38
   3c074:	blx	r3
   3c078:	b	3bf80 <flatcc_json_printer_union_field@@Base+0x1c0>
   3c07c:	andeq	r3, r4, ip, lsr #24

0003c080 <flatcc_json_printer_union_table@@Base>:
   3c080:	ldr	r3, [r1, #4]
   3c084:	subs	r3, r3, #1
   3c088:	bne	3c0a0 <flatcc_json_printer_union_table@@Base+0x20>
   3c08c:	ldr	r3, [r0, #36]	; 0x24
   3c090:	cmp	r3, #0
   3c094:	moveq	r3, #2
   3c098:	streq	r3, [r0, #36]	; 0x24
   3c09c:	bx	lr
   3c0a0:	push	{r4, r5, lr}
   3c0a4:	sub	sp, sp, #28
   3c0a8:	mov	r4, r0
   3c0ac:	ldr	r0, [r1]
   3c0b0:	ldr	lr, [r0]
   3c0b4:	add	r1, r0, lr
   3c0b8:	ldr	ip, [r4, #32]
   3c0bc:	add	ip, ip, #1
   3c0c0:	str	ip, [r4, #32]
   3c0c4:	ldr	ip, [r4, #20]
   3c0c8:	add	r5, ip, #1
   3c0cc:	str	r5, [r4, #20]
   3c0d0:	mov	r5, #123	; 0x7b
   3c0d4:	strb	r5, [ip]
   3c0d8:	mov	ip, #0
   3c0dc:	str	ip, [sp, #20]
   3c0e0:	str	r3, [sp, #16]
   3c0e4:	str	r1, [sp, #4]
   3c0e8:	ldr	r3, [r0, lr]
   3c0ec:	sub	r3, r1, r3
   3c0f0:	str	r3, [sp, #8]
   3c0f4:	ldrh	r3, [r3]
   3c0f8:	str	r3, [sp, #12]
   3c0fc:	add	r1, sp, #4
   3c100:	mov	r0, r4
   3c104:	blx	r2
   3c108:	ldrb	r3, [r4, #25]
   3c10c:	cmp	r3, #0
   3c110:	bne	3c130 <flatcc_json_printer_union_table@@Base+0xb0>
   3c114:	ldr	r3, [r4, #20]
   3c118:	add	r2, r3, #1
   3c11c:	str	r2, [r4, #20]
   3c120:	mov	r2, #125	; 0x7d
   3c124:	strb	r2, [r3]
   3c128:	add	sp, sp, #28
   3c12c:	pop	{r4, r5, pc}
   3c130:	ldr	r3, [r4, #20]
   3c134:	add	r2, r3, #1
   3c138:	str	r2, [r4, #20]
   3c13c:	mov	r2, #10
   3c140:	strb	r2, [r3]
   3c144:	ldr	r5, [r4, #32]
   3c148:	sub	r5, r5, #1
   3c14c:	str	r5, [r4, #32]
   3c150:	ldrb	r3, [r4, #25]
   3c154:	mul	r5, r5, r3
   3c158:	ldr	r0, [r4, #20]
   3c15c:	add	r3, r0, r5
   3c160:	ldr	r2, [r4, #16]
   3c164:	cmp	r2, r3
   3c168:	bcc	3c188 <flatcc_json_printer_union_table@@Base+0x108>
   3c16c:	mov	r2, r5
   3c170:	mov	r1, #32
   3c174:	bl	145c4 <memset@plt>
   3c178:	ldr	r3, [r4, #20]
   3c17c:	add	r5, r3, r5
   3c180:	str	r5, [r4, #20]
   3c184:	b	3c114 <flatcc_json_printer_union_table@@Base+0x94>
   3c188:	mov	r1, r5
   3c18c:	mov	r0, r4
   3c190:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3c194:	b	3c114 <flatcc_json_printer_union_table@@Base+0x94>

0003c198 <flatcc_json_printer_union_struct@@Base>:
   3c198:	push	{r4, r5, r6, lr}
   3c19c:	mov	r4, r0
   3c1a0:	ldr	r3, [r0, #32]
   3c1a4:	add	r3, r3, #1
   3c1a8:	str	r3, [r0, #32]
   3c1ac:	ldr	r3, [r0, #20]
   3c1b0:	add	ip, r3, #1
   3c1b4:	str	ip, [r0, #20]
   3c1b8:	mov	ip, #123	; 0x7b
   3c1bc:	strb	ip, [r3]
   3c1c0:	ldr	r3, [r1]
   3c1c4:	ldr	r1, [r3]
   3c1c8:	add	r1, r3, r1
   3c1cc:	blx	r2
   3c1d0:	ldrb	r3, [r4, #25]
   3c1d4:	cmp	r3, #0
   3c1d8:	bne	3c1f4 <flatcc_json_printer_union_struct@@Base+0x5c>
   3c1dc:	ldr	r3, [r4, #20]
   3c1e0:	add	r2, r3, #1
   3c1e4:	str	r2, [r4, #20]
   3c1e8:	mov	r2, #125	; 0x7d
   3c1ec:	strb	r2, [r3]
   3c1f0:	pop	{r4, r5, r6, pc}
   3c1f4:	ldr	r3, [r4, #20]
   3c1f8:	add	r2, r3, #1
   3c1fc:	str	r2, [r4, #20]
   3c200:	mov	r2, #10
   3c204:	strb	r2, [r3]
   3c208:	ldr	r5, [r4, #32]
   3c20c:	sub	r5, r5, #1
   3c210:	str	r5, [r4, #32]
   3c214:	ldrb	r3, [r4, #25]
   3c218:	mul	r5, r5, r3
   3c21c:	ldr	r0, [r4, #20]
   3c220:	add	r3, r0, r5
   3c224:	ldr	r2, [r4, #16]
   3c228:	cmp	r2, r3
   3c22c:	bcc	3c24c <flatcc_json_printer_union_struct@@Base+0xb4>
   3c230:	mov	r2, r5
   3c234:	mov	r1, #32
   3c238:	bl	145c4 <memset@plt>
   3c23c:	ldr	r3, [r4, #20]
   3c240:	add	r5, r3, r5
   3c244:	str	r5, [r4, #20]
   3c248:	b	3c1dc <flatcc_json_printer_union_struct@@Base+0x44>
   3c24c:	mov	r1, r5
   3c250:	mov	r0, r4
   3c254:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3c258:	b	3c1dc <flatcc_json_printer_union_struct@@Base+0x44>

0003c25c <flatcc_json_printer_union_string@@Base>:
   3c25c:	push	{r4, lr}
   3c260:	ldr	r3, [r1]
   3c264:	ldr	r2, [r3]
   3c268:	add	r1, r3, r2
   3c26c:	ldr	r2, [r3, r2]
   3c270:	add	r1, r1, #4
   3c274:	bl	31720 <flatcc_json_parser_struct_as_root@@Base+0x1768>
   3c278:	pop	{r4, pc}

0003c27c <flatcc_json_printer_embedded_struct_field@@Base>:
   3c27c:	push	{r4, r5, r6, r7, r8, lr}
   3c280:	mov	r4, r0
   3c284:	mov	r6, r2
   3c288:	mov	r5, r3
   3c28c:	ldr	r7, [sp, #28]
   3c290:	cmp	r1, #0
   3c294:	ldrne	r3, [r0, #20]
   3c298:	addne	r2, r3, #1
   3c29c:	strne	r2, [r0, #20]
   3c2a0:	movne	r2, #44	; 0x2c
   3c2a4:	strbne	r2, [r3]
   3c2a8:	ldrb	r3, [r0, #25]
   3c2ac:	cmp	r3, #0
   3c2b0:	bne	3c308 <flatcc_json_printer_embedded_struct_field@@Base+0x8c>
   3c2b4:	ldr	r2, [r0, #20]
   3c2b8:	ldr	r3, [r0, #16]
   3c2bc:	cmp	r2, r3
   3c2c0:	bcs	3c368 <flatcc_json_printer_embedded_struct_field@@Base+0xec>
   3c2c4:	ldr	r3, [r4, #20]
   3c2c8:	mov	r2, #34	; 0x22
   3c2cc:	strb	r2, [r3]
   3c2d0:	ldrb	r3, [r4, #26]
   3c2d4:	ldr	r0, [r4, #20]
   3c2d8:	cmp	r3, #0
   3c2dc:	addeq	r0, r0, #1
   3c2e0:	str	r0, [r4, #20]
   3c2e4:	add	r3, r0, r7
   3c2e8:	ldr	r2, [r4, #16]
   3c2ec:	cmp	r2, r3
   3c2f0:	bhi	3c378 <flatcc_json_printer_embedded_struct_field@@Base+0xfc>
   3c2f4:	mov	r2, r7
   3c2f8:	ldr	r1, [sp, #24]
   3c2fc:	mov	r0, r4
   3c300:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3c304:	b	3c390 <flatcc_json_printer_embedded_struct_field@@Base+0x114>
   3c308:	ldr	r3, [r0, #20]
   3c30c:	add	r2, r3, #1
   3c310:	str	r2, [r0, #20]
   3c314:	mov	r2, #10
   3c318:	strb	r2, [r3]
   3c31c:	ldrb	r3, [r0, #25]
   3c320:	ldr	r8, [r0, #32]
   3c324:	mul	r8, r8, r3
   3c328:	ldr	r0, [r0, #20]
   3c32c:	add	r3, r0, r8
   3c330:	ldr	r2, [r4, #16]
   3c334:	cmp	r2, r3
   3c338:	bcc	3c358 <flatcc_json_printer_embedded_struct_field@@Base+0xdc>
   3c33c:	mov	r2, r8
   3c340:	mov	r1, #32
   3c344:	bl	145c4 <memset@plt>
   3c348:	ldr	r3, [r4, #20]
   3c34c:	add	r8, r3, r8
   3c350:	str	r8, [r4, #20]
   3c354:	b	3c2c4 <flatcc_json_printer_embedded_struct_field@@Base+0x48>
   3c358:	mov	r1, r8
   3c35c:	mov	r0, r4
   3c360:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3c364:	b	3c2c4 <flatcc_json_printer_embedded_struct_field@@Base+0x48>
   3c368:	ldr	r3, [r0, #44]	; 0x2c
   3c36c:	mov	r1, #0
   3c370:	blx	r3
   3c374:	b	3c2c4 <flatcc_json_printer_embedded_struct_field@@Base+0x48>
   3c378:	mov	r2, r7
   3c37c:	ldr	r1, [sp, #24]
   3c380:	bl	1454c <memcpy@plt>
   3c384:	ldr	r3, [r4, #20]
   3c388:	add	r7, r3, r7
   3c38c:	str	r7, [r4, #20]
   3c390:	ldr	r3, [r4, #20]
   3c394:	mov	r2, #34	; 0x22
   3c398:	strb	r2, [r3]
   3c39c:	ldrb	r3, [r4, #26]
   3c3a0:	clz	r3, r3
   3c3a4:	lsr	r3, r3, #5
   3c3a8:	ldr	r1, [r4, #20]
   3c3ac:	add	r2, r1, r3
   3c3b0:	add	r2, r2, #1
   3c3b4:	str	r2, [r4, #20]
   3c3b8:	mov	r2, #58	; 0x3a
   3c3bc:	strb	r2, [r1, r3]
   3c3c0:	ldr	r3, [r4, #20]
   3c3c4:	mov	r2, #32
   3c3c8:	strb	r2, [r3]
   3c3cc:	ldrb	r3, [r4, #25]
   3c3d0:	adds	r3, r3, #0
   3c3d4:	movne	r3, #1
   3c3d8:	ldr	r0, [r4, #20]
   3c3dc:	add	r2, r0, r3
   3c3e0:	ldr	r1, [r4, #32]
   3c3e4:	add	r1, r1, #1
   3c3e8:	str	r1, [r4, #32]
   3c3ec:	add	r2, r2, #1
   3c3f0:	str	r2, [r4, #20]
   3c3f4:	mov	r2, #123	; 0x7b
   3c3f8:	strb	r2, [r0, r3]
   3c3fc:	add	r1, r6, r5
   3c400:	mov	r0, r4
   3c404:	ldr	r3, [sp, #32]
   3c408:	blx	r3
   3c40c:	ldrb	r3, [r4, #25]
   3c410:	cmp	r3, #0
   3c414:	bne	3c430 <flatcc_json_printer_embedded_struct_field@@Base+0x1b4>
   3c418:	ldr	r3, [r4, #20]
   3c41c:	add	r2, r3, #1
   3c420:	str	r2, [r4, #20]
   3c424:	mov	r2, #125	; 0x7d
   3c428:	strb	r2, [r3]
   3c42c:	pop	{r4, r5, r6, r7, r8, pc}
   3c430:	ldr	r3, [r4, #20]
   3c434:	add	r2, r3, #1
   3c438:	str	r2, [r4, #20]
   3c43c:	mov	r2, #10
   3c440:	strb	r2, [r3]
   3c444:	ldr	r5, [r4, #32]
   3c448:	sub	r5, r5, #1
   3c44c:	str	r5, [r4, #32]
   3c450:	ldrb	r3, [r4, #25]
   3c454:	mul	r5, r5, r3
   3c458:	ldr	r0, [r4, #20]
   3c45c:	add	r3, r0, r5
   3c460:	ldr	r2, [r4, #16]
   3c464:	cmp	r2, r3
   3c468:	bcc	3c488 <flatcc_json_printer_embedded_struct_field@@Base+0x20c>
   3c46c:	mov	r2, r5
   3c470:	mov	r1, #32
   3c474:	bl	145c4 <memset@plt>
   3c478:	ldr	r3, [r4, #20]
   3c47c:	add	r5, r3, r5
   3c480:	str	r5, [r4, #20]
   3c484:	b	3c418 <flatcc_json_printer_embedded_struct_field@@Base+0x19c>
   3c488:	mov	r1, r5
   3c48c:	mov	r0, r4
   3c490:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3c494:	b	3c418 <flatcc_json_printer_embedded_struct_field@@Base+0x19c>

0003c498 <flatcc_json_printer_struct_field@@Base>:
   3c498:	push	{r4, r5, r6, r7, r8, lr}
   3c49c:	ldr	r6, [sp, #24]
   3c4a0:	add	r2, r2, #2
   3c4a4:	lsl	r2, r2, #1
   3c4a8:	ldr	ip, [r1, #8]
   3c4ac:	cmp	r2, ip
   3c4b0:	popge	{r4, r5, r6, r7, r8, pc}
   3c4b4:	ldr	ip, [r1, #4]
   3c4b8:	ldrh	r2, [ip, r2]
   3c4bc:	cmp	r2, #0
   3c4c0:	popeq	{r4, r5, r6, r7, r8, pc}
   3c4c4:	ldr	r5, [r1]
   3c4c8:	adds	r5, r5, r2
   3c4cc:	popeq	{r4, r5, r6, r7, r8, pc}
   3c4d0:	ldr	r2, [r1, #16]
   3c4d4:	add	ip, r2, #1
   3c4d8:	str	ip, [r1, #16]
   3c4dc:	cmp	r2, #0
   3c4e0:	ldrne	r2, [r0, #20]
   3c4e4:	addne	r1, r2, #1
   3c4e8:	strne	r1, [r0, #20]
   3c4ec:	movne	r1, #44	; 0x2c
   3c4f0:	strbne	r1, [r2]
   3c4f4:	mov	r7, r3
   3c4f8:	mov	r4, r0
   3c4fc:	ldrb	r3, [r0, #25]
   3c500:	cmp	r3, #0
   3c504:	bne	3c55c <flatcc_json_printer_struct_field@@Base+0xc4>
   3c508:	ldr	r2, [r0, #20]
   3c50c:	ldr	r3, [r0, #16]
   3c510:	cmp	r2, r3
   3c514:	bcs	3c5bc <flatcc_json_printer_struct_field@@Base+0x124>
   3c518:	ldr	r3, [r4, #20]
   3c51c:	mov	r2, #34	; 0x22
   3c520:	strb	r2, [r3]
   3c524:	ldrb	r3, [r4, #26]
   3c528:	ldr	r0, [r4, #20]
   3c52c:	cmp	r3, #0
   3c530:	addeq	r0, r0, #1
   3c534:	str	r0, [r4, #20]
   3c538:	add	r3, r0, r6
   3c53c:	ldr	r2, [r4, #16]
   3c540:	cmp	r2, r3
   3c544:	bhi	3c5cc <flatcc_json_printer_struct_field@@Base+0x134>
   3c548:	mov	r2, r6
   3c54c:	mov	r1, r7
   3c550:	mov	r0, r4
   3c554:	bl	3132c <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3c558:	b	3c5e4 <flatcc_json_printer_struct_field@@Base+0x14c>
   3c55c:	ldr	r3, [r0, #20]
   3c560:	add	r2, r3, #1
   3c564:	str	r2, [r0, #20]
   3c568:	mov	r2, #10
   3c56c:	strb	r2, [r3]
   3c570:	ldrb	r3, [r0, #25]
   3c574:	ldr	r8, [r0, #32]
   3c578:	mul	r8, r8, r3
   3c57c:	ldr	r0, [r0, #20]
   3c580:	add	r3, r0, r8
   3c584:	ldr	r2, [r4, #16]
   3c588:	cmp	r2, r3
   3c58c:	bcc	3c5ac <flatcc_json_printer_struct_field@@Base+0x114>
   3c590:	mov	r2, r8
   3c594:	mov	r1, #32
   3c598:	bl	145c4 <memset@plt>
   3c59c:	ldr	r3, [r4, #20]
   3c5a0:	add	r8, r3, r8
   3c5a4:	str	r8, [r4, #20]
   3c5a8:	b	3c518 <flatcc_json_printer_struct_field@@Base+0x80>
   3c5ac:	mov	r1, r8
   3c5b0:	mov	r0, r4
   3c5b4:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3c5b8:	b	3c518 <flatcc_json_printer_struct_field@@Base+0x80>
   3c5bc:	ldr	r3, [r0, #44]	; 0x2c
   3c5c0:	mov	r1, #0
   3c5c4:	blx	r3
   3c5c8:	b	3c518 <flatcc_json_printer_struct_field@@Base+0x80>
   3c5cc:	mov	r2, r6
   3c5d0:	mov	r1, r7
   3c5d4:	bl	1454c <memcpy@plt>
   3c5d8:	ldr	r3, [r4, #20]
   3c5dc:	add	r6, r3, r6
   3c5e0:	str	r6, [r4, #20]
   3c5e4:	ldr	r3, [r4, #20]
   3c5e8:	mov	r2, #34	; 0x22
   3c5ec:	strb	r2, [r3]
   3c5f0:	ldrb	r3, [r4, #26]
   3c5f4:	clz	r3, r3
   3c5f8:	lsr	r3, r3, #5
   3c5fc:	ldr	r1, [r4, #20]
   3c600:	add	r2, r1, r3
   3c604:	add	r2, r2, #1
   3c608:	str	r2, [r4, #20]
   3c60c:	mov	r2, #58	; 0x3a
   3c610:	strb	r2, [r1, r3]
   3c614:	ldr	r3, [r4, #20]
   3c618:	mov	r2, #32
   3c61c:	strb	r2, [r3]
   3c620:	ldrb	r3, [r4, #25]
   3c624:	adds	r3, r3, #0
   3c628:	movne	r3, #1
   3c62c:	ldr	r0, [r4, #20]
   3c630:	add	r2, r0, r3
   3c634:	ldr	r1, [r4, #32]
   3c638:	add	r1, r1, #1
   3c63c:	str	r1, [r4, #32]
   3c640:	add	r2, r2, #1
   3c644:	str	r2, [r4, #20]
   3c648:	mov	r2, #123	; 0x7b
   3c64c:	strb	r2, [r0, r3]
   3c650:	mov	r1, r5
   3c654:	mov	r0, r4
   3c658:	ldr	r3, [sp, #28]
   3c65c:	blx	r3
   3c660:	ldrb	r3, [r4, #25]
   3c664:	cmp	r3, #0
   3c668:	bne	3c684 <flatcc_json_printer_struct_field@@Base+0x1ec>
   3c66c:	ldr	r3, [r4, #20]
   3c670:	add	r2, r3, #1
   3c674:	str	r2, [r4, #20]
   3c678:	mov	r2, #125	; 0x7d
   3c67c:	strb	r2, [r3]
   3c680:	pop	{r4, r5, r6, r7, r8, pc}
   3c684:	ldr	r3, [r4, #20]
   3c688:	add	r2, r3, #1
   3c68c:	str	r2, [r4, #20]
   3c690:	mov	r2, #10
   3c694:	strb	r2, [r3]
   3c698:	ldr	r5, [r4, #32]
   3c69c:	sub	r5, r5, #1
   3c6a0:	str	r5, [r4, #32]
   3c6a4:	ldrb	r3, [r4, #25]
   3c6a8:	mul	r5, r5, r3
   3c6ac:	ldr	r0, [r4, #20]
   3c6b0:	add	r3, r0, r5
   3c6b4:	ldr	r2, [r4, #16]
   3c6b8:	cmp	r2, r3
   3c6bc:	bcc	3c6dc <flatcc_json_printer_struct_field@@Base+0x244>
   3c6c0:	mov	r2, r5
   3c6c4:	mov	r1, #32
   3c6c8:	bl	145c4 <memset@plt>
   3c6cc:	ldr	r3, [r4, #20]
   3c6d0:	add	r5, r3, r5
   3c6d4:	str	r5, [r4, #20]
   3c6d8:	b	3c66c <flatcc_json_printer_struct_field@@Base+0x1d4>
   3c6dc:	mov	r1, r5
   3c6e0:	mov	r0, r4
   3c6e4:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3c6e8:	b	3c66c <flatcc_json_printer_struct_field@@Base+0x1d4>

0003c6ec <flatcc_json_printer_struct_as_root@@Base>:
   3c6ec:	push	{r4, r5, r6, lr}
   3c6f0:	mov	r4, r0
   3c6f4:	mov	r5, r1
   3c6f8:	bl	31514 <flatcc_json_parser_struct_as_root@@Base+0x155c>
   3c6fc:	cmp	r0, #0
   3c700:	beq	3c81c <flatcc_json_printer_struct_as_root@@Base+0x130>
   3c704:	ldr	r3, [r4, #32]
   3c708:	add	r3, r3, #1
   3c70c:	str	r3, [r4, #32]
   3c710:	ldr	r3, [r4, #20]
   3c714:	add	r2, r3, #1
   3c718:	str	r2, [r4, #20]
   3c71c:	mov	r2, #123	; 0x7b
   3c720:	strb	r2, [r3]
   3c724:	ldr	r1, [r5]
   3c728:	add	r1, r5, r1
   3c72c:	mov	r0, r4
   3c730:	ldr	r3, [sp, #16]
   3c734:	blx	r3
   3c738:	ldrb	r3, [r4, #25]
   3c73c:	cmp	r3, #0
   3c740:	bne	3c7b4 <flatcc_json_printer_struct_as_root@@Base+0xc8>
   3c744:	ldr	r3, [r4, #20]
   3c748:	add	r2, r3, #1
   3c74c:	str	r2, [r4, #20]
   3c750:	mov	r2, #125	; 0x7d
   3c754:	strb	r2, [r3]
   3c758:	ldrb	r3, [r4, #25]
   3c75c:	cmp	r3, #0
   3c760:	beq	3c780 <flatcc_json_printer_struct_as_root@@Base+0x94>
   3c764:	ldr	r3, [r4, #32]
   3c768:	cmp	r3, #0
   3c76c:	ldreq	r3, [r4, #20]
   3c770:	addeq	r2, r3, #1
   3c774:	streq	r2, [r4, #20]
   3c778:	moveq	r2, #10
   3c77c:	strbeq	r2, [r3]
   3c780:	ldr	r3, [r4, #44]	; 0x2c
   3c784:	mov	r1, #1
   3c788:	mov	r0, r4
   3c78c:	blx	r3
   3c790:	ldr	r3, [r4, #36]	; 0x24
   3c794:	cmp	r3, #0
   3c798:	bne	3c824 <flatcc_json_printer_struct_as_root@@Base+0x138>
   3c79c:	ldr	r0, [r4, #20]
   3c7a0:	ldr	r3, [r4]
   3c7a4:	sub	r0, r0, r3
   3c7a8:	ldr	r3, [r4, #12]
   3c7ac:	add	r0, r0, r3
   3c7b0:	pop	{r4, r5, r6, pc}
   3c7b4:	ldr	r3, [r4, #20]
   3c7b8:	add	r2, r3, #1
   3c7bc:	str	r2, [r4, #20]
   3c7c0:	mov	r2, #10
   3c7c4:	strb	r2, [r3]
   3c7c8:	ldr	r5, [r4, #32]
   3c7cc:	sub	r5, r5, #1
   3c7d0:	str	r5, [r4, #32]
   3c7d4:	ldrb	r3, [r4, #25]
   3c7d8:	mul	r5, r5, r3
   3c7dc:	ldr	r0, [r4, #20]
   3c7e0:	add	r3, r0, r5
   3c7e4:	ldr	r2, [r4, #16]
   3c7e8:	cmp	r2, r3
   3c7ec:	bcc	3c80c <flatcc_json_printer_struct_as_root@@Base+0x120>
   3c7f0:	mov	r2, r5
   3c7f4:	mov	r1, #32
   3c7f8:	bl	145c4 <memset@plt>
   3c7fc:	ldr	r3, [r4, #20]
   3c800:	add	r5, r3, r5
   3c804:	str	r5, [r4, #20]
   3c808:	b	3c744 <flatcc_json_printer_struct_as_root@@Base+0x58>
   3c80c:	mov	r1, r5
   3c810:	mov	r0, r4
   3c814:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3c818:	b	3c744 <flatcc_json_printer_struct_as_root@@Base+0x58>
   3c81c:	mvn	r0, #0
   3c820:	pop	{r4, r5, r6, pc}
   3c824:	mvn	r0, #0
   3c828:	pop	{r4, r5, r6, pc}

0003c82c <flatcc_json_printer_table_as_root@@Base>:
   3c82c:	push	{r4, r5, lr}
   3c830:	sub	sp, sp, #28
   3c834:	mov	r4, r0
   3c838:	mov	r5, r1
   3c83c:	bl	31514 <flatcc_json_parser_struct_as_root@@Base+0x155c>
   3c840:	cmp	r0, #0
   3c844:	beq	3c990 <flatcc_json_printer_table_as_root@@Base+0x164>
   3c848:	ldr	r1, [r5]
   3c84c:	add	r3, r5, r1
   3c850:	ldr	r2, [r4, #32]
   3c854:	add	r2, r2, #1
   3c858:	str	r2, [r4, #32]
   3c85c:	ldr	r2, [r4, #20]
   3c860:	add	r0, r2, #1
   3c864:	str	r0, [r4, #20]
   3c868:	mov	r0, #123	; 0x7b
   3c86c:	strb	r0, [r2]
   3c870:	mov	r2, #0
   3c874:	str	r2, [sp, #20]
   3c878:	mov	r2, #99	; 0x63
   3c87c:	str	r2, [sp, #16]
   3c880:	str	r3, [sp, #4]
   3c884:	ldr	r2, [r5, r1]
   3c888:	sub	r3, r3, r2
   3c88c:	str	r3, [sp, #8]
   3c890:	ldrh	r3, [r3]
   3c894:	str	r3, [sp, #12]
   3c898:	add	r1, sp, #4
   3c89c:	mov	r0, r4
   3c8a0:	ldr	r3, [sp, #40]	; 0x28
   3c8a4:	blx	r3
   3c8a8:	ldrb	r3, [r4, #25]
   3c8ac:	cmp	r3, #0
   3c8b0:	bne	3c928 <flatcc_json_printer_table_as_root@@Base+0xfc>
   3c8b4:	ldr	r3, [r4, #20]
   3c8b8:	add	r2, r3, #1
   3c8bc:	str	r2, [r4, #20]
   3c8c0:	mov	r2, #125	; 0x7d
   3c8c4:	strb	r2, [r3]
   3c8c8:	ldrb	r3, [r4, #25]
   3c8cc:	cmp	r3, #0
   3c8d0:	beq	3c8f0 <flatcc_json_printer_table_as_root@@Base+0xc4>
   3c8d4:	ldr	r3, [r4, #32]
   3c8d8:	cmp	r3, #0
   3c8dc:	ldreq	r3, [r4, #20]
   3c8e0:	addeq	r2, r3, #1
   3c8e4:	streq	r2, [r4, #20]
   3c8e8:	moveq	r2, #10
   3c8ec:	strbeq	r2, [r3]
   3c8f0:	ldr	r3, [r4, #44]	; 0x2c
   3c8f4:	mov	r1, #1
   3c8f8:	mov	r0, r4
   3c8fc:	blx	r3
   3c900:	ldr	r3, [r4, #36]	; 0x24
   3c904:	cmp	r3, #0
   3c908:	bne	3c998 <flatcc_json_printer_table_as_root@@Base+0x16c>
   3c90c:	ldr	r0, [r4, #20]
   3c910:	ldr	r3, [r4]
   3c914:	sub	r0, r0, r3
   3c918:	ldr	r3, [r4, #12]
   3c91c:	add	r0, r0, r3
   3c920:	add	sp, sp, #28
   3c924:	pop	{r4, r5, pc}
   3c928:	ldr	r3, [r4, #20]
   3c92c:	add	r2, r3, #1
   3c930:	str	r2, [r4, #20]
   3c934:	mov	r2, #10
   3c938:	strb	r2, [r3]
   3c93c:	ldr	r5, [r4, #32]
   3c940:	sub	r5, r5, #1
   3c944:	str	r5, [r4, #32]
   3c948:	ldrb	r3, [r4, #25]
   3c94c:	mul	r5, r5, r3
   3c950:	ldr	r0, [r4, #20]
   3c954:	add	r3, r0, r5
   3c958:	ldr	r2, [r4, #16]
   3c95c:	cmp	r2, r3
   3c960:	bcc	3c980 <flatcc_json_printer_table_as_root@@Base+0x154>
   3c964:	mov	r2, r5
   3c968:	mov	r1, #32
   3c96c:	bl	145c4 <memset@plt>
   3c970:	ldr	r3, [r4, #20]
   3c974:	add	r5, r3, r5
   3c978:	str	r5, [r4, #20]
   3c97c:	b	3c8b4 <flatcc_json_printer_table_as_root@@Base+0x88>
   3c980:	mov	r1, r5
   3c984:	mov	r0, r4
   3c988:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3c98c:	b	3c8b4 <flatcc_json_printer_table_as_root@@Base+0x88>
   3c990:	mvn	r0, #0
   3c994:	b	3c920 <flatcc_json_printer_table_as_root@@Base+0xf4>
   3c998:	mvn	r0, #0
   3c99c:	b	3c920 <flatcc_json_printer_table_as_root@@Base+0xf4>

0003c9a0 <flatcc_json_printer_struct_as_nested_root@@Base>:
   3c9a0:	add	r2, r2, #2
   3c9a4:	lsl	r2, r2, #1
   3c9a8:	ldr	ip, [r1, #8]
   3c9ac:	cmp	r2, ip
   3c9b0:	bxge	lr
   3c9b4:	ldr	ip, [r1, #4]
   3c9b8:	ldrh	r2, [ip, r2]
   3c9bc:	cmp	r2, #0
   3c9c0:	bxeq	lr
   3c9c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3c9c8:	ldr	ip, [r1]
   3c9cc:	adds	r8, ip, r2
   3c9d0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3c9d4:	mov	r6, r3
   3c9d8:	mov	r5, r1
   3c9dc:	mov	r4, r0
   3c9e0:	ldr	r7, [ip, r2]
   3c9e4:	add	r9, r8, r7
   3c9e8:	ldr	r3, [sp, #36]	; 0x24
   3c9ec:	ldr	r2, [r8, r7]
   3c9f0:	mov	r1, r9
   3c9f4:	bl	31514 <flatcc_json_parser_struct_as_root@@Base+0x155c>
   3c9f8:	cmp	r0, #0
   3c9fc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3ca00:	ldr	r3, [r5, #16]
   3ca04:	add	r2, r3, #1
   3ca08:	str	r2, [r5, #16]
   3ca0c:	cmp	r3, #0
   3ca10:	ldrne	r3, [r4, #20]
   3ca14:	addne	r2, r3, #1
   3ca18:	strne	r2, [r4, #20]
   3ca1c:	movne	r2, #44	; 0x2c
   3ca20:	strbne	r2, [r3]
   3ca24:	ldr	r2, [sp, #32]
   3ca28:	mov	r1, r6
   3ca2c:	mov	r0, r4
   3ca30:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3ca34:	ldr	r3, [r4, #32]
   3ca38:	add	r3, r3, #1
   3ca3c:	str	r3, [r4, #32]
   3ca40:	ldr	r3, [r4, #20]
   3ca44:	add	r2, r3, #1
   3ca48:	str	r2, [r4, #20]
   3ca4c:	mov	r2, #123	; 0x7b
   3ca50:	strb	r2, [r3]
   3ca54:	ldr	r1, [r8, r7]
   3ca58:	add	r1, r9, r1
   3ca5c:	mov	r0, r4
   3ca60:	ldr	r3, [sp, #40]	; 0x28
   3ca64:	blx	r3
   3ca68:	ldrb	r3, [r4, #25]
   3ca6c:	cmp	r3, #0
   3ca70:	bne	3ca8c <flatcc_json_printer_struct_as_nested_root@@Base+0xec>
   3ca74:	ldr	r3, [r4, #20]
   3ca78:	add	r2, r3, #1
   3ca7c:	str	r2, [r4, #20]
   3ca80:	mov	r2, #125	; 0x7d
   3ca84:	strb	r2, [r3]
   3ca88:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3ca8c:	ldr	r3, [r4, #20]
   3ca90:	add	r2, r3, #1
   3ca94:	str	r2, [r4, #20]
   3ca98:	mov	r2, #10
   3ca9c:	strb	r2, [r3]
   3caa0:	ldr	r5, [r4, #32]
   3caa4:	sub	r5, r5, #1
   3caa8:	str	r5, [r4, #32]
   3caac:	ldrb	r3, [r4, #25]
   3cab0:	mul	r5, r5, r3
   3cab4:	ldr	r0, [r4, #20]
   3cab8:	add	r3, r0, r5
   3cabc:	ldr	r2, [r4, #16]
   3cac0:	cmp	r2, r3
   3cac4:	bcc	3cae4 <flatcc_json_printer_struct_as_nested_root@@Base+0x144>
   3cac8:	mov	r2, r5
   3cacc:	mov	r1, #32
   3cad0:	bl	145c4 <memset@plt>
   3cad4:	ldr	r3, [r4, #20]
   3cad8:	add	r5, r3, r5
   3cadc:	str	r5, [r4, #20]
   3cae0:	b	3ca74 <flatcc_json_printer_struct_as_nested_root@@Base+0xd4>
   3cae4:	mov	r1, r5
   3cae8:	mov	r0, r4
   3caec:	bl	31414 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3caf0:	b	3ca74 <flatcc_json_printer_struct_as_nested_root@@Base+0xd4>

0003caf4 <flatcc_json_printer_table_as_nested_root@@Base>:
   3caf4:	add	r2, r2, #2
   3caf8:	lsl	r2, r2, #1
   3cafc:	ldr	ip, [r1, #8]
   3cb00:	cmp	r2, ip
   3cb04:	bxge	lr
   3cb08:	ldr	ip, [r1, #4]
   3cb0c:	ldrh	r2, [ip, r2]
   3cb10:	cmp	r2, #0
   3cb14:	bxeq	lr
   3cb18:	push	{r4, r5, r6, r7, r8, lr}
   3cb1c:	sub	sp, sp, #24
   3cb20:	ldr	lr, [r1]
   3cb24:	adds	ip, lr, r2
   3cb28:	beq	3cbac <flatcc_json_printer_table_as_nested_root@@Base+0xb8>
   3cb2c:	mov	r6, r3
   3cb30:	mov	r5, r1
   3cb34:	mov	r4, r0
   3cb38:	ldr	r2, [lr, r2]
   3cb3c:	add	r8, ip, r2
   3cb40:	add	r7, r8, #4
   3cb44:	ldr	r3, [sp, #52]	; 0x34
   3cb48:	ldr	r2, [ip, r2]
   3cb4c:	mov	r1, r7
   3cb50:	bl	31514 <flatcc_json_parser_struct_as_root@@Base+0x155c>
   3cb54:	cmp	r0, #0
   3cb58:	beq	3cbac <flatcc_json_printer_table_as_nested_root@@Base+0xb8>
   3cb5c:	ldr	r3, [r5, #16]
   3cb60:	add	r2, r3, #1
   3cb64:	str	r2, [r5, #16]
   3cb68:	cmp	r3, #0
   3cb6c:	ldrne	r3, [r4, #20]
   3cb70:	addne	r2, r3, #1
   3cb74:	strne	r2, [r4, #20]
   3cb78:	movne	r2, #44	; 0x2c
   3cb7c:	strbne	r2, [r3]
   3cb80:	ldr	r2, [sp, #48]	; 0x30
   3cb84:	mov	r1, r6
   3cb88:	mov	r0, r4
   3cb8c:	bl	31978 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3cb90:	ldr	r3, [r5, #12]
   3cb94:	subs	r3, r3, #1
   3cb98:	bne	3cbb4 <flatcc_json_printer_table_as_nested_root@@Base+0xc0>
   3cb9c:	ldr	r3, [r4, #36]	; 0x24
   3cba0:	cmp	r3, #0
   3cba4:	moveq	r3, #2
   3cba8:	streq	r3, [r4, #36]	; 0x24
   3cbac:	add	sp, sp, #24
   3cbb0:	pop	{r4, r5, r6, r7, r8, pc}
   3cbb4:	ldr	r0, [r8, #4]
   3cbb8:	add	r2, r7, r0
   3cbbc:	ldr	r1, [r4, #32]
   3cbc0:	add	r1, r1, #1
   3cbc4:	str	r1, [r4, #32]
   3cbc8:	ldr	r1, [r4, #20]
   3cbcc:	add	ip, r1, #1
   3cbd0:	str	ip, [r4, #20]
   3cbd4:	mov	ip, #123	; 0x7b
   3cbd8:	strb	ip, [r1]
   3cbdc:	mov	r1, #0
   3cbe0:	str	r1, [sp, #20]
   3cbe4:	str	r3, [sp, #16]
   3cbe8:	str	r2, [sp, #4]
   3cbec:	ldr	r3, [r7, r0]
   3cbf0:	sub	r3, r2, r3
   3cbf4:	str	r3, [sp, #8]
   3cbf8:	ldrh	r3, [r3]
   3cbfc:	str	r3, [sp, #12]
   3cc00:	add	r1, sp, #4
   3cc04:	mov	r0, r4
   3cc08:	ldr	r3, [sp, #56]	; 0x38
   3cc0c:	blx	r3
   3cc10:	ldrb	r3, [r4, #25]
   3cc14:	cmp	r3, #0
   3cc18:	bne	3cc34 <flatcc_json_printer_table_as_nested_root@@Base+0x140>
   3cc1c:	ldr	r3, [r4, #20]
   3cc20:	add	r2, r3, #1
   3cc24:	str	r2, [r4, #20]
   3cc28:	mov	r2, #125	; 0x7d
   3cc2c:	strb	r2, [r3]
   3cc30:	b	3cbac <flatcc_json_printer_table_as_nested_root@@Base+0xb8>
   3cc34:	ldr	r3, [r4, #20]
   3cc38:	add	r2, r3, #1
   3cc3c:	str	r2, [r4, #20]
   3cc40:	mov	r2, #10
   3cc44:	strb	r2, [r3]
   3cc48:	ldr	r3, [r4, #32]
   3cc4c:	sub	r3, r3, #1
   3cc50:	str	r3, [r4, #32]
   3cc54:	mov	r0, r4
   3cc58:	bl	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   3cc5c:	b	3cc1c <flatcc_json_printer_table_as_nested_root@@Base+0x128>

0003cc60 <flatcc_json_printer_init@@Base>:
   3cc60:	push	{r4, r5, r6, lr}
   3cc64:	mov	r4, r0
   3cc68:	mov	r5, r1
   3cc6c:	mov	r2, #48	; 0x30
   3cc70:	mov	r1, #0
   3cc74:	bl	145c4 <memset@plt>
   3cc78:	cmp	r5, #0
   3cc7c:	ldreq	r3, [pc, #84]	; 3ccd8 <flatcc_json_printer_init@@Base+0x78>
   3cc80:	ldreq	r5, [r3]
   3cc84:	str	r5, [r4, #40]	; 0x28
   3cc88:	ldr	r3, [pc, #76]	; 3ccdc <flatcc_json_printer_init@@Base+0x7c>
   3cc8c:	str	r3, [r4, #44]	; 0x2c
   3cc90:	ldr	r0, [pc, #72]	; 3cce0 <flatcc_json_printer_init@@Base+0x80>
   3cc94:	bl	1457c <malloc@plt>
   3cc98:	str	r0, [r4]
   3cc9c:	cmp	r0, #0
   3cca0:	beq	3ccd0 <flatcc_json_printer_init@@Base+0x70>
   3cca4:	mov	r3, #1
   3cca8:	strb	r3, [r4, #24]
   3ccac:	ldr	r3, [pc, #44]	; 3cce0 <flatcc_json_printer_init@@Base+0x80>
   3ccb0:	str	r3, [r4, #4]
   3ccb4:	mov	r3, #16384	; 0x4000
   3ccb8:	str	r3, [r4, #8]
   3ccbc:	str	r0, [r4, #20]
   3ccc0:	add	r0, r0, r3
   3ccc4:	str	r0, [r4, #16]
   3ccc8:	mov	r0, #0
   3cccc:	pop	{r4, r5, r6, pc}
   3ccd0:	mvn	r0, #0
   3ccd4:	pop	{r4, r5, r6, pc}
   3ccd8:	andeq	r4, r5, r4, asr #6
   3ccdc:	ldrdeq	r1, [r3], -r0
   3cce0:	andeq	r4, r0, r0, asr #32

0003cce4 <flatcc_json_printer_init_buffer@@Base>:
   3cce4:	push	{r4, r5, r6, lr}
   3cce8:	cmp	r2, #63	; 0x3f
   3ccec:	bls	3cd34 <flatcc_json_printer_init_buffer@@Base+0x50>
   3ccf0:	mov	r4, r0
   3ccf4:	mov	r6, r1
   3ccf8:	mov	r5, r2
   3ccfc:	mov	r2, #48	; 0x30
   3cd00:	mov	r1, #0
   3cd04:	bl	145c4 <memset@plt>
   3cd08:	str	r6, [r4]
   3cd0c:	str	r5, [r4, #4]
   3cd10:	sub	r5, r5, #64	; 0x40
   3cd14:	str	r5, [r4, #8]
   3cd18:	str	r6, [r4, #20]
   3cd1c:	add	r5, r6, r5
   3cd20:	str	r5, [r4, #16]
   3cd24:	ldr	r3, [pc, #28]	; 3cd48 <flatcc_json_printer_init_buffer@@Base+0x64>
   3cd28:	str	r3, [r4, #44]	; 0x2c
   3cd2c:	mov	r0, #0
   3cd30:	pop	{r4, r5, r6, pc}
   3cd34:	ldr	r3, [pc, #16]	; 3cd4c <flatcc_json_printer_init_buffer@@Base+0x68>
   3cd38:	ldr	r2, [pc, #16]	; 3cd50 <flatcc_json_printer_init_buffer@@Base+0x6c>
   3cd3c:	ldr	r1, [pc, #16]	; 3cd54 <flatcc_json_printer_init_buffer@@Base+0x70>
   3cd40:	ldr	r0, [pc, #16]	; 3cd58 <flatcc_json_printer_init_buffer@@Base+0x74>
   3cd44:	bl	14618 <__assert_fail@plt>
   3cd48:	strdeq	r1, [r3], -r4
   3cd4c:	andeq	r3, r4, r4, lsl #20
   3cd50:	andeq	r0, r0, sp, lsl #9
   3cd54:	andeq	r3, r4, ip, lsr #21
   3cd58:	andeq	r3, r4, r4, lsr ip

0003cd5c <flatcc_json_printer_init_dynamic_buffer@@Base>:
   3cd5c:	push	{r4, r5, r6, lr}
   3cd60:	mov	r5, r0
   3cd64:	cmp	r1, #0
   3cd68:	moveq	r1, #4096	; 0x1000
   3cd6c:	cmp	r1, #64	; 0x40
   3cd70:	movcs	r4, r1
   3cd74:	movcc	r4, #64	; 0x40
   3cd78:	mov	r2, #48	; 0x30
   3cd7c:	mov	r1, #0
   3cd80:	bl	145c4 <memset@plt>
   3cd84:	mov	r0, r4
   3cd88:	bl	1457c <malloc@plt>
   3cd8c:	str	r0, [r5]
   3cd90:	mov	r3, #1
   3cd94:	strb	r3, [r5, #24]
   3cd98:	str	r4, [r5, #4]
   3cd9c:	sub	r1, r4, #64	; 0x40
   3cda0:	str	r1, [r5, #8]
   3cda4:	str	r0, [r5, #20]
   3cda8:	add	r1, r0, r1
   3cdac:	str	r1, [r5, #16]
   3cdb0:	ldr	r3, [pc, #52]	; 3cdec <flatcc_json_printer_init_dynamic_buffer@@Base+0x90>
   3cdb4:	str	r3, [r5, #44]	; 0x2c
   3cdb8:	cmp	r0, #0
   3cdbc:	beq	3cdc8 <flatcc_json_printer_init_dynamic_buffer@@Base+0x6c>
   3cdc0:	mov	r0, #0
   3cdc4:	pop	{r4, r5, r6, pc}
   3cdc8:	ldr	r3, [r5, #36]	; 0x24
   3cdcc:	cmp	r3, #0
   3cdd0:	bne	3cde4 <flatcc_json_printer_init_dynamic_buffer@@Base+0x88>
   3cdd4:	mov	r3, #3
   3cdd8:	str	r3, [r5, #36]	; 0x24
   3cddc:	mvn	r0, #0
   3cde0:	pop	{r4, r5, r6, pc}
   3cde4:	mvn	r0, #0
   3cde8:	pop	{r4, r5, r6, pc}
   3cdec:	andeq	r1, r3, ip, ror r6

0003cdf0 <flatcc_json_printer_get_buffer@@Base>:
   3cdf0:	push	{r4, r5, r6, lr}
   3cdf4:	mov	r4, r0
   3cdf8:	mov	r5, r1
   3cdfc:	ldr	r3, [r0, #44]	; 0x2c
   3ce00:	mov	r1, #0
   3ce04:	blx	r3
   3ce08:	cmp	r5, #0
   3ce0c:	ldrne	r3, [r4, #20]
   3ce10:	ldrne	r2, [r4]
   3ce14:	subne	r3, r3, r2
   3ce18:	strne	r3, [r5]
   3ce1c:	ldr	r0, [r4]
   3ce20:	pop	{r4, r5, r6, pc}

0003ce24 <flatcc_json_printer_finalize_dynamic_buffer@@Base>:
   3ce24:	push	{r4, r5, r6, lr}
   3ce28:	mov	r5, r0
   3ce2c:	bl	3cdf0 <flatcc_json_printer_get_buffer@@Base>
   3ce30:	mov	r4, r0
   3ce34:	mov	r2, #48	; 0x30
   3ce38:	mov	r1, #0
   3ce3c:	mov	r0, r5
   3ce40:	bl	145c4 <memset@plt>
   3ce44:	mov	r0, r4
   3ce48:	pop	{r4, r5, r6, pc}

0003ce4c <flatcc_json_printer_clear@@Base>:
   3ce4c:	push	{r4, lr}
   3ce50:	mov	r4, r0
   3ce54:	ldrb	r3, [r0, #24]
   3ce58:	cmp	r3, #0
   3ce5c:	beq	3ce70 <flatcc_json_printer_clear@@Base+0x24>
   3ce60:	ldr	r0, [r0]
   3ce64:	cmp	r0, #0
   3ce68:	beq	3ce70 <flatcc_json_printer_clear@@Base+0x24>
   3ce6c:	bl	14540 <free@plt>
   3ce70:	mov	r2, #48	; 0x30
   3ce74:	mov	r1, #0
   3ce78:	mov	r0, r4
   3ce7c:	bl	145c4 <memset@plt>
   3ce80:	pop	{r4, pc}
   3ce84:	subs	r2, r1, #1
   3ce88:	bxeq	lr
   3ce8c:	bcc	3d064 <flatcc_json_printer_clear@@Base+0x218>
   3ce90:	cmp	r0, r1
   3ce94:	bls	3d048 <flatcc_json_printer_clear@@Base+0x1fc>
   3ce98:	tst	r1, r2
   3ce9c:	beq	3d054 <flatcc_json_printer_clear@@Base+0x208>
   3cea0:	clz	r3, r0
   3cea4:	clz	r2, r1
   3cea8:	sub	r3, r2, r3
   3ceac:	rsbs	r3, r3, #31
   3ceb0:	addne	r3, r3, r3, lsl #1
   3ceb4:	mov	r2, #0
   3ceb8:	addne	pc, pc, r3, lsl #2
   3cebc:	nop			; (mov r0, r0)
   3cec0:	cmp	r0, r1, lsl #31
   3cec4:	adc	r2, r2, r2
   3cec8:	subcs	r0, r0, r1, lsl #31
   3cecc:	cmp	r0, r1, lsl #30
   3ced0:	adc	r2, r2, r2
   3ced4:	subcs	r0, r0, r1, lsl #30
   3ced8:	cmp	r0, r1, lsl #29
   3cedc:	adc	r2, r2, r2
   3cee0:	subcs	r0, r0, r1, lsl #29
   3cee4:	cmp	r0, r1, lsl #28
   3cee8:	adc	r2, r2, r2
   3ceec:	subcs	r0, r0, r1, lsl #28
   3cef0:	cmp	r0, r1, lsl #27
   3cef4:	adc	r2, r2, r2
   3cef8:	subcs	r0, r0, r1, lsl #27
   3cefc:	cmp	r0, r1, lsl #26
   3cf00:	adc	r2, r2, r2
   3cf04:	subcs	r0, r0, r1, lsl #26
   3cf08:	cmp	r0, r1, lsl #25
   3cf0c:	adc	r2, r2, r2
   3cf10:	subcs	r0, r0, r1, lsl #25
   3cf14:	cmp	r0, r1, lsl #24
   3cf18:	adc	r2, r2, r2
   3cf1c:	subcs	r0, r0, r1, lsl #24
   3cf20:	cmp	r0, r1, lsl #23
   3cf24:	adc	r2, r2, r2
   3cf28:	subcs	r0, r0, r1, lsl #23
   3cf2c:	cmp	r0, r1, lsl #22
   3cf30:	adc	r2, r2, r2
   3cf34:	subcs	r0, r0, r1, lsl #22
   3cf38:	cmp	r0, r1, lsl #21
   3cf3c:	adc	r2, r2, r2
   3cf40:	subcs	r0, r0, r1, lsl #21
   3cf44:	cmp	r0, r1, lsl #20
   3cf48:	adc	r2, r2, r2
   3cf4c:	subcs	r0, r0, r1, lsl #20
   3cf50:	cmp	r0, r1, lsl #19
   3cf54:	adc	r2, r2, r2
   3cf58:	subcs	r0, r0, r1, lsl #19
   3cf5c:	cmp	r0, r1, lsl #18
   3cf60:	adc	r2, r2, r2
   3cf64:	subcs	r0, r0, r1, lsl #18
   3cf68:	cmp	r0, r1, lsl #17
   3cf6c:	adc	r2, r2, r2
   3cf70:	subcs	r0, r0, r1, lsl #17
   3cf74:	cmp	r0, r1, lsl #16
   3cf78:	adc	r2, r2, r2
   3cf7c:	subcs	r0, r0, r1, lsl #16
   3cf80:	cmp	r0, r1, lsl #15
   3cf84:	adc	r2, r2, r2
   3cf88:	subcs	r0, r0, r1, lsl #15
   3cf8c:	cmp	r0, r1, lsl #14
   3cf90:	adc	r2, r2, r2
   3cf94:	subcs	r0, r0, r1, lsl #14
   3cf98:	cmp	r0, r1, lsl #13
   3cf9c:	adc	r2, r2, r2
   3cfa0:	subcs	r0, r0, r1, lsl #13
   3cfa4:	cmp	r0, r1, lsl #12
   3cfa8:	adc	r2, r2, r2
   3cfac:	subcs	r0, r0, r1, lsl #12
   3cfb0:	cmp	r0, r1, lsl #11
   3cfb4:	adc	r2, r2, r2
   3cfb8:	subcs	r0, r0, r1, lsl #11
   3cfbc:	cmp	r0, r1, lsl #10
   3cfc0:	adc	r2, r2, r2
   3cfc4:	subcs	r0, r0, r1, lsl #10
   3cfc8:	cmp	r0, r1, lsl #9
   3cfcc:	adc	r2, r2, r2
   3cfd0:	subcs	r0, r0, r1, lsl #9
   3cfd4:	cmp	r0, r1, lsl #8
   3cfd8:	adc	r2, r2, r2
   3cfdc:	subcs	r0, r0, r1, lsl #8
   3cfe0:	cmp	r0, r1, lsl #7
   3cfe4:	adc	r2, r2, r2
   3cfe8:	subcs	r0, r0, r1, lsl #7
   3cfec:	cmp	r0, r1, lsl #6
   3cff0:	adc	r2, r2, r2
   3cff4:	subcs	r0, r0, r1, lsl #6
   3cff8:	cmp	r0, r1, lsl #5
   3cffc:	adc	r2, r2, r2
   3d000:	subcs	r0, r0, r1, lsl #5
   3d004:	cmp	r0, r1, lsl #4
   3d008:	adc	r2, r2, r2
   3d00c:	subcs	r0, r0, r1, lsl #4
   3d010:	cmp	r0, r1, lsl #3
   3d014:	adc	r2, r2, r2
   3d018:	subcs	r0, r0, r1, lsl #3
   3d01c:	cmp	r0, r1, lsl #2
   3d020:	adc	r2, r2, r2
   3d024:	subcs	r0, r0, r1, lsl #2
   3d028:	cmp	r0, r1, lsl #1
   3d02c:	adc	r2, r2, r2
   3d030:	subcs	r0, r0, r1, lsl #1
   3d034:	cmp	r0, r1
   3d038:	adc	r2, r2, r2
   3d03c:	subcs	r0, r0, r1
   3d040:	mov	r0, r2
   3d044:	bx	lr
   3d048:	moveq	r0, #1
   3d04c:	movne	r0, #0
   3d050:	bx	lr
   3d054:	clz	r2, r1
   3d058:	rsb	r2, r2, #31
   3d05c:	lsr	r0, r0, r2
   3d060:	bx	lr
   3d064:	cmp	r0, #0
   3d068:	mvnne	r0, #0
   3d06c:	b	3d6d4 <flatcc_json_printer_clear@@Base+0x888>
   3d070:	cmp	r1, #0
   3d074:	beq	3d064 <flatcc_json_printer_clear@@Base+0x218>
   3d078:	push	{r0, r1, lr}
   3d07c:	bl	3ce84 <flatcc_json_printer_clear@@Base+0x38>
   3d080:	pop	{r1, r2, lr}
   3d084:	mul	r3, r2, r0
   3d088:	sub	r1, r1, r3
   3d08c:	bx	lr
   3d090:	eor	r1, r1, #-2147483648	; 0x80000000
   3d094:	b	3d09c <flatcc_json_printer_clear@@Base+0x250>
   3d098:	eor	r3, r3, #-2147483648	; 0x80000000
   3d09c:	push	{r4, r5, lr}
   3d0a0:	lsl	r4, r1, #1
   3d0a4:	lsl	r5, r3, #1
   3d0a8:	teq	r4, r5
   3d0ac:	teqeq	r0, r2
   3d0b0:	orrsne	ip, r4, r0
   3d0b4:	orrsne	ip, r5, r2
   3d0b8:	mvnsne	ip, r4, asr #21
   3d0bc:	mvnsne	ip, r5, asr #21
   3d0c0:	beq	3d2ac <flatcc_json_printer_clear@@Base+0x460>
   3d0c4:	lsr	r4, r4, #21
   3d0c8:	rsbs	r5, r4, r5, lsr #21
   3d0cc:	rsblt	r5, r5, #0
   3d0d0:	ble	3d0f0 <flatcc_json_printer_clear@@Base+0x2a4>
   3d0d4:	add	r4, r4, r5
   3d0d8:	eor	r2, r0, r2
   3d0dc:	eor	r3, r1, r3
   3d0e0:	eor	r0, r2, r0
   3d0e4:	eor	r1, r3, r1
   3d0e8:	eor	r2, r0, r2
   3d0ec:	eor	r3, r1, r3
   3d0f0:	cmp	r5, #54	; 0x36
   3d0f4:	pophi	{r4, r5, pc}
   3d0f8:	tst	r1, #-2147483648	; 0x80000000
   3d0fc:	lsl	r1, r1, #12
   3d100:	mov	ip, #1048576	; 0x100000
   3d104:	orr	r1, ip, r1, lsr #12
   3d108:	beq	3d114 <flatcc_json_printer_clear@@Base+0x2c8>
   3d10c:	rsbs	r0, r0, #0
   3d110:	rsc	r1, r1, #0
   3d114:	tst	r3, #-2147483648	; 0x80000000
   3d118:	lsl	r3, r3, #12
   3d11c:	orr	r3, ip, r3, lsr #12
   3d120:	beq	3d12c <flatcc_json_printer_clear@@Base+0x2e0>
   3d124:	rsbs	r2, r2, #0
   3d128:	rsc	r3, r3, #0
   3d12c:	teq	r4, r5
   3d130:	beq	3d294 <flatcc_json_printer_clear@@Base+0x448>
   3d134:	sub	r4, r4, #1
   3d138:	rsbs	lr, r5, #32
   3d13c:	blt	3d158 <flatcc_json_printer_clear@@Base+0x30c>
   3d140:	lsl	ip, r2, lr
   3d144:	adds	r0, r0, r2, lsr r5
   3d148:	adc	r1, r1, #0
   3d14c:	adds	r0, r0, r3, lsl lr
   3d150:	adcs	r1, r1, r3, asr r5
   3d154:	b	3d174 <flatcc_json_printer_clear@@Base+0x328>
   3d158:	sub	r5, r5, #32
   3d15c:	add	lr, lr, #32
   3d160:	cmp	r2, #1
   3d164:	lsl	ip, r3, lr
   3d168:	orrcs	ip, ip, #2
   3d16c:	adds	r0, r0, r3, asr r5
   3d170:	adcs	r1, r1, r3, asr #31
   3d174:	and	r5, r1, #-2147483648	; 0x80000000
   3d178:	bpl	3d188 <flatcc_json_printer_clear@@Base+0x33c>
   3d17c:	rsbs	ip, ip, #0
   3d180:	rscs	r0, r0, #0
   3d184:	rsc	r1, r1, #0
   3d188:	cmp	r1, #1048576	; 0x100000
   3d18c:	bcc	3d1cc <flatcc_json_printer_clear@@Base+0x380>
   3d190:	cmp	r1, #2097152	; 0x200000
   3d194:	bcc	3d1b4 <flatcc_json_printer_clear@@Base+0x368>
   3d198:	lsrs	r1, r1, #1
   3d19c:	rrxs	r0, r0
   3d1a0:	rrx	ip, ip
   3d1a4:	add	r4, r4, #1
   3d1a8:	lsl	r2, r4, #21
   3d1ac:	cmn	r2, #4194304	; 0x400000
   3d1b0:	bcs	3d30c <flatcc_json_printer_clear@@Base+0x4c0>
   3d1b4:	cmp	ip, #-2147483648	; 0x80000000
   3d1b8:	lsrseq	ip, r0, #1
   3d1bc:	adcs	r0, r0, #0
   3d1c0:	adc	r1, r1, r4, lsl #20
   3d1c4:	orr	r1, r1, r5
   3d1c8:	pop	{r4, r5, pc}
   3d1cc:	lsls	ip, ip, #1
   3d1d0:	adcs	r0, r0, r0
   3d1d4:	adc	r1, r1, r1
   3d1d8:	tst	r1, #1048576	; 0x100000
   3d1dc:	sub	r4, r4, #1
   3d1e0:	bne	3d1b4 <flatcc_json_printer_clear@@Base+0x368>
   3d1e4:	teq	r1, #0
   3d1e8:	moveq	r1, r0
   3d1ec:	moveq	r0, #0
   3d1f0:	clz	r3, r1
   3d1f4:	addeq	r3, r3, #32
   3d1f8:	sub	r3, r3, #11
   3d1fc:	subs	r2, r3, #32
   3d200:	bge	3d224 <flatcc_json_printer_clear@@Base+0x3d8>
   3d204:	adds	r2, r2, #12
   3d208:	ble	3d220 <flatcc_json_printer_clear@@Base+0x3d4>
   3d20c:	add	ip, r2, #20
   3d210:	rsb	r2, r2, #12
   3d214:	lsl	r0, r1, ip
   3d218:	lsr	r1, r1, r2
   3d21c:	b	3d234 <flatcc_json_printer_clear@@Base+0x3e8>
   3d220:	add	r2, r2, #20
   3d224:	rsble	ip, r2, #32
   3d228:	lsl	r1, r1, r2
   3d22c:	orrle	r1, r1, r0, lsr ip
   3d230:	lslle	r0, r0, r2
   3d234:	subs	r4, r4, r3
   3d238:	addge	r1, r1, r4, lsl #20
   3d23c:	orrge	r1, r1, r5
   3d240:	popge	{r4, r5, pc}
   3d244:	mvn	r4, r4
   3d248:	subs	r4, r4, #31
   3d24c:	bge	3d288 <flatcc_json_printer_clear@@Base+0x43c>
   3d250:	adds	r4, r4, #12
   3d254:	bgt	3d270 <flatcc_json_printer_clear@@Base+0x424>
   3d258:	add	r4, r4, #20
   3d25c:	rsb	r2, r4, #32
   3d260:	lsr	r0, r0, r4
   3d264:	orr	r0, r0, r1, lsl r2
   3d268:	orr	r1, r5, r1, lsr r4
   3d26c:	pop	{r4, r5, pc}
   3d270:	rsb	r4, r4, #12
   3d274:	rsb	r2, r4, #32
   3d278:	lsr	r0, r0, r2
   3d27c:	orr	r0, r0, r1, lsl r4
   3d280:	mov	r1, r5
   3d284:	pop	{r4, r5, pc}
   3d288:	lsr	r0, r1, r4
   3d28c:	mov	r1, r5
   3d290:	pop	{r4, r5, pc}
   3d294:	teq	r4, #0
   3d298:	eor	r3, r3, #1048576	; 0x100000
   3d29c:	eoreq	r1, r1, #1048576	; 0x100000
   3d2a0:	addeq	r4, r4, #1
   3d2a4:	subne	r5, r5, #1
   3d2a8:	b	3d134 <flatcc_json_printer_clear@@Base+0x2e8>
   3d2ac:	mvns	ip, r4, asr #21
   3d2b0:	mvnsne	ip, r5, asr #21
   3d2b4:	beq	3d31c <flatcc_json_printer_clear@@Base+0x4d0>
   3d2b8:	teq	r4, r5
   3d2bc:	teqeq	r0, r2
   3d2c0:	beq	3d2d4 <flatcc_json_printer_clear@@Base+0x488>
   3d2c4:	orrs	ip, r4, r0
   3d2c8:	moveq	r1, r3
   3d2cc:	moveq	r0, r2
   3d2d0:	pop	{r4, r5, pc}
   3d2d4:	teq	r1, r3
   3d2d8:	movne	r1, #0
   3d2dc:	movne	r0, #0
   3d2e0:	popne	{r4, r5, pc}
   3d2e4:	lsrs	ip, r4, #21
   3d2e8:	bne	3d2fc <flatcc_json_printer_clear@@Base+0x4b0>
   3d2ec:	lsls	r0, r0, #1
   3d2f0:	adcs	r1, r1, r1
   3d2f4:	orrcs	r1, r1, #-2147483648	; 0x80000000
   3d2f8:	pop	{r4, r5, pc}
   3d2fc:	adds	r4, r4, #4194304	; 0x400000
   3d300:	addcc	r1, r1, #1048576	; 0x100000
   3d304:	popcc	{r4, r5, pc}
   3d308:	and	r5, r1, #-2147483648	; 0x80000000
   3d30c:	orr	r1, r5, #2130706432	; 0x7f000000
   3d310:	orr	r1, r1, #15728640	; 0xf00000
   3d314:	mov	r0, #0
   3d318:	pop	{r4, r5, pc}
   3d31c:	mvns	ip, r4, asr #21
   3d320:	movne	r1, r3
   3d324:	movne	r0, r2
   3d328:	mvnseq	ip, r5, asr #21
   3d32c:	movne	r3, r1
   3d330:	movne	r2, r0
   3d334:	orrs	r4, r0, r1, lsl #12
   3d338:	orrseq	r5, r2, r3, lsl #12
   3d33c:	teqeq	r1, r3
   3d340:	orrne	r1, r1, #524288	; 0x80000
   3d344:	pop	{r4, r5, pc}
   3d348:	teq	r0, #0
   3d34c:	moveq	r1, #0
   3d350:	bxeq	lr
   3d354:	push	{r4, r5, lr}
   3d358:	mov	r4, #1024	; 0x400
   3d35c:	add	r4, r4, #50	; 0x32
   3d360:	mov	r5, #0
   3d364:	mov	r1, #0
   3d368:	b	3d1e4 <flatcc_json_printer_clear@@Base+0x398>
   3d36c:	teq	r0, #0
   3d370:	moveq	r1, #0
   3d374:	bxeq	lr
   3d378:	push	{r4, r5, lr}
   3d37c:	mov	r4, #1024	; 0x400
   3d380:	add	r4, r4, #50	; 0x32
   3d384:	ands	r5, r0, #-2147483648	; 0x80000000
   3d388:	rsbmi	r0, r0, #0
   3d38c:	mov	r1, #0
   3d390:	b	3d1e4 <flatcc_json_printer_clear@@Base+0x398>
   3d394:	lsls	r2, r0, #1
   3d398:	asr	r1, r2, #3
   3d39c:	rrx	r1, r1
   3d3a0:	lsl	r0, r2, #28
   3d3a4:	andsne	r3, r2, #-16777216	; 0xff000000
   3d3a8:	teqne	r3, #-16777216	; 0xff000000
   3d3ac:	eorne	r1, r1, #939524096	; 0x38000000
   3d3b0:	bxne	lr
   3d3b4:	teq	r2, #0
   3d3b8:	teqne	r3, #-16777216	; 0xff000000
   3d3bc:	bxeq	lr
   3d3c0:	push	{r4, r5, lr}
   3d3c4:	mov	r4, #896	; 0x380
   3d3c8:	and	r5, r1, #-2147483648	; 0x80000000
   3d3cc:	bic	r1, r1, #-2147483648	; 0x80000000
   3d3d0:	b	3d1e4 <flatcc_json_printer_clear@@Base+0x398>
   3d3d4:	orrs	r2, r0, r1
   3d3d8:	bxeq	lr
   3d3dc:	push	{r4, r5, lr}
   3d3e0:	mov	r5, #0
   3d3e4:	b	3d404 <flatcc_json_printer_clear@@Base+0x5b8>
   3d3e8:	orrs	r2, r0, r1
   3d3ec:	bxeq	lr
   3d3f0:	push	{r4, r5, lr}
   3d3f4:	ands	r5, r1, #-2147483648	; 0x80000000
   3d3f8:	bpl	3d404 <flatcc_json_printer_clear@@Base+0x5b8>
   3d3fc:	rsbs	r0, r0, #0
   3d400:	rsc	r1, r1, #0
   3d404:	mov	r4, #1024	; 0x400
   3d408:	add	r4, r4, #50	; 0x32
   3d40c:	lsrs	ip, r1, #22
   3d410:	beq	3d188 <flatcc_json_printer_clear@@Base+0x33c>
   3d414:	mov	r2, #3
   3d418:	lsrs	ip, ip, #3
   3d41c:	addne	r2, r2, #3
   3d420:	lsrs	ip, ip, #3
   3d424:	addne	r2, r2, #3
   3d428:	add	r2, r2, ip, lsr #3
   3d42c:	rsb	r3, r2, #32
   3d430:	lsl	ip, r0, r3
   3d434:	lsr	r0, r0, r2
   3d438:	orr	r0, r0, r1, lsl r3
   3d43c:	lsr	r1, r1, r2
   3d440:	add	r4, r4, r2
   3d444:	b	3d188 <flatcc_json_printer_clear@@Base+0x33c>
   3d448:	eor	r0, r0, #-2147483648	; 0x80000000
   3d44c:	b	3d454 <flatcc_json_printer_clear@@Base+0x608>
   3d450:	eor	r1, r1, #-2147483648	; 0x80000000
   3d454:	lsls	r2, r0, #1
   3d458:	lslsne	r3, r1, #1
   3d45c:	teqne	r2, r3
   3d460:	mvnsne	ip, r2, asr #24
   3d464:	mvnsne	ip, r3, asr #24
   3d468:	beq	3d560 <flatcc_json_printer_clear@@Base+0x714>
   3d46c:	lsr	r2, r2, #24
   3d470:	rsbs	r3, r2, r3, lsr #24
   3d474:	addgt	r2, r2, r3
   3d478:	eorgt	r1, r0, r1
   3d47c:	eorgt	r0, r1, r0
   3d480:	eorgt	r1, r0, r1
   3d484:	rsblt	r3, r3, #0
   3d488:	cmp	r3, #25
   3d48c:	bxhi	lr
   3d490:	tst	r0, #-2147483648	; 0x80000000
   3d494:	orr	r0, r0, #8388608	; 0x800000
   3d498:	bic	r0, r0, #-16777216	; 0xff000000
   3d49c:	rsbne	r0, r0, #0
   3d4a0:	tst	r1, #-2147483648	; 0x80000000
   3d4a4:	orr	r1, r1, #8388608	; 0x800000
   3d4a8:	bic	r1, r1, #-16777216	; 0xff000000
   3d4ac:	rsbne	r1, r1, #0
   3d4b0:	teq	r2, r3
   3d4b4:	beq	3d548 <flatcc_json_printer_clear@@Base+0x6fc>
   3d4b8:	sub	r2, r2, #1
   3d4bc:	adds	r0, r0, r1, asr r3
   3d4c0:	rsb	r3, r3, #32
   3d4c4:	lsl	r1, r1, r3
   3d4c8:	and	r3, r0, #-2147483648	; 0x80000000
   3d4cc:	bpl	3d4d8 <flatcc_json_printer_clear@@Base+0x68c>
   3d4d0:	rsbs	r1, r1, #0
   3d4d4:	rsc	r0, r0, #0
   3d4d8:	cmp	r0, #8388608	; 0x800000
   3d4dc:	bcc	3d510 <flatcc_json_printer_clear@@Base+0x6c4>
   3d4e0:	cmp	r0, #16777216	; 0x1000000
   3d4e4:	bcc	3d4fc <flatcc_json_printer_clear@@Base+0x6b0>
   3d4e8:	lsrs	r0, r0, #1
   3d4ec:	rrx	r1, r1
   3d4f0:	add	r2, r2, #1
   3d4f4:	cmp	r2, #254	; 0xfe
   3d4f8:	bcs	3d5b4 <flatcc_json_printer_clear@@Base+0x768>
   3d4fc:	cmp	r1, #-2147483648	; 0x80000000
   3d500:	adc	r0, r0, r2, lsl #23
   3d504:	biceq	r0, r0, #1
   3d508:	orr	r0, r0, r3
   3d50c:	bx	lr
   3d510:	lsls	r1, r1, #1
   3d514:	adc	r0, r0, r0
   3d518:	tst	r0, #8388608	; 0x800000
   3d51c:	sub	r2, r2, #1
   3d520:	bne	3d4fc <flatcc_json_printer_clear@@Base+0x6b0>
   3d524:	clz	ip, r0
   3d528:	sub	ip, ip, #8
   3d52c:	subs	r2, r2, ip
   3d530:	lsl	r0, r0, ip
   3d534:	addge	r0, r0, r2, lsl #23
   3d538:	rsblt	r2, r2, #0
   3d53c:	orrge	r0, r0, r3
   3d540:	orrlt	r0, r3, r0, lsr r2
   3d544:	bx	lr
   3d548:	teq	r2, #0
   3d54c:	eor	r1, r1, #8388608	; 0x800000
   3d550:	eoreq	r0, r0, #8388608	; 0x800000
   3d554:	addeq	r2, r2, #1
   3d558:	subne	r3, r3, #1
   3d55c:	b	3d4b8 <flatcc_json_printer_clear@@Base+0x66c>
   3d560:	lsl	r3, r1, #1
   3d564:	mvns	ip, r2, asr #24
   3d568:	mvnsne	ip, r3, asr #24
   3d56c:	beq	3d5c0 <flatcc_json_printer_clear@@Base+0x774>
   3d570:	teq	r2, r3
   3d574:	beq	3d584 <flatcc_json_printer_clear@@Base+0x738>
   3d578:	teq	r2, #0
   3d57c:	moveq	r0, r1
   3d580:	bx	lr
   3d584:	teq	r0, r1
   3d588:	movne	r0, #0
   3d58c:	bxne	lr
   3d590:	tst	r2, #-16777216	; 0xff000000
   3d594:	bne	3d5a4 <flatcc_json_printer_clear@@Base+0x758>
   3d598:	lsls	r0, r0, #1
   3d59c:	orrcs	r0, r0, #-2147483648	; 0x80000000
   3d5a0:	bx	lr
   3d5a4:	adds	r2, r2, #33554432	; 0x2000000
   3d5a8:	addcc	r0, r0, #8388608	; 0x800000
   3d5ac:	bxcc	lr
   3d5b0:	and	r3, r0, #-2147483648	; 0x80000000
   3d5b4:	orr	r0, r3, #2130706432	; 0x7f000000
   3d5b8:	orr	r0, r0, #8388608	; 0x800000
   3d5bc:	bx	lr
   3d5c0:	mvns	r2, r2, asr #24
   3d5c4:	movne	r0, r1
   3d5c8:	mvnseq	r3, r3, asr #24
   3d5cc:	movne	r1, r0
   3d5d0:	lsls	r2, r0, #9
   3d5d4:	lslseq	r3, r1, #9
   3d5d8:	teqeq	r0, r1
   3d5dc:	orrne	r0, r0, #4194304	; 0x400000
   3d5e0:	bx	lr
   3d5e4:	mov	r3, #0
   3d5e8:	b	3d5f4 <flatcc_json_printer_clear@@Base+0x7a8>
   3d5ec:	ands	r3, r0, #-2147483648	; 0x80000000
   3d5f0:	rsbmi	r0, r0, #0
   3d5f4:	movs	ip, r0
   3d5f8:	bxeq	lr
   3d5fc:	orr	r3, r3, #1258291200	; 0x4b000000
   3d600:	mov	r1, r0
   3d604:	mov	r0, #0
   3d608:	b	3d64c <flatcc_json_printer_clear@@Base+0x800>
   3d60c:	orrs	r2, r0, r1
   3d610:	bxeq	lr
   3d614:	mov	r3, #0
   3d618:	b	3d634 <flatcc_json_printer_clear@@Base+0x7e8>
   3d61c:	orrs	r2, r0, r1
   3d620:	bxeq	lr
   3d624:	ands	r3, r1, #-2147483648	; 0x80000000
   3d628:	bpl	3d634 <flatcc_json_printer_clear@@Base+0x7e8>
   3d62c:	rsbs	r0, r0, #0
   3d630:	rsc	r1, r1, #0
   3d634:	movs	ip, r1
   3d638:	moveq	ip, r0
   3d63c:	moveq	r1, r0
   3d640:	moveq	r0, #0
   3d644:	orr	r3, r3, #1526726656	; 0x5b000000
   3d648:	subeq	r3, r3, #268435456	; 0x10000000
   3d64c:	sub	r3, r3, #8388608	; 0x800000
   3d650:	clz	r2, ip
   3d654:	subs	r2, r2, #8
   3d658:	sub	r3, r3, r2, lsl #23
   3d65c:	blt	3d67c <flatcc_json_printer_clear@@Base+0x830>
   3d660:	add	r3, r3, r1, lsl r2
   3d664:	lsl	ip, r0, r2
   3d668:	rsb	r2, r2, #32
   3d66c:	cmp	ip, #-2147483648	; 0x80000000
   3d670:	adc	r0, r3, r0, lsr r2
   3d674:	biceq	r0, r0, #1
   3d678:	bx	lr
   3d67c:	add	r2, r2, #32
   3d680:	lsl	ip, r1, r2
   3d684:	rsb	r2, r2, #32
   3d688:	orrs	r0, r0, ip, lsl #1
   3d68c:	adc	r0, r3, r1, lsr r2
   3d690:	biceq	r0, r0, ip, lsr #31
   3d694:	bx	lr
   3d698:	cmp	r3, #0
   3d69c:	cmpeq	r2, #0
   3d6a0:	bne	3d6b8 <flatcc_json_printer_clear@@Base+0x86c>
   3d6a4:	cmp	r1, #0
   3d6a8:	cmpeq	r0, #0
   3d6ac:	mvnne	r1, #0
   3d6b0:	mvnne	r0, #0
   3d6b4:	b	3d6d4 <flatcc_json_printer_clear@@Base+0x888>
   3d6b8:	sub	sp, sp, #8
   3d6bc:	push	{sp, lr}
   3d6c0:	bl	3d6e4 <flatcc_json_printer_clear@@Base+0x898>
   3d6c4:	ldr	lr, [sp, #4]
   3d6c8:	add	sp, sp, #8
   3d6cc:	pop	{r2, r3}
   3d6d0:	bx	lr
   3d6d4:	push	{r1, lr}
   3d6d8:	mov	r0, #8
   3d6dc:	bl	1451c <raise@plt>
   3d6e0:	pop	{r1, pc}
   3d6e4:	cmp	r1, r3
   3d6e8:	push	{r4, r5, r6, r7, r8, r9, lr}
   3d6ec:	cmpeq	r0, r2
   3d6f0:	mov	r4, r0
   3d6f4:	mov	r5, r1
   3d6f8:	ldr	r9, [sp, #28]
   3d6fc:	movcc	r0, #0
   3d700:	movcc	r1, #0
   3d704:	bcc	3d7fc <flatcc_json_printer_clear@@Base+0x9b0>
   3d708:	cmp	r3, #0
   3d70c:	clzeq	ip, r2
   3d710:	clzne	ip, r3
   3d714:	addeq	ip, ip, #32
   3d718:	cmp	r5, #0
   3d71c:	clzeq	r1, r4
   3d720:	addeq	r1, r1, #32
   3d724:	clzne	r1, r5
   3d728:	sub	ip, ip, r1
   3d72c:	sub	lr, ip, #32
   3d730:	lsl	r7, r3, ip
   3d734:	rsb	r8, ip, #32
   3d738:	orr	r7, r7, r2, lsl lr
   3d73c:	orr	r7, r7, r2, lsr r8
   3d740:	lsl	r6, r2, ip
   3d744:	cmp	r5, r7
   3d748:	cmpeq	r4, r6
   3d74c:	movcc	r0, #0
   3d750:	movcc	r1, #0
   3d754:	bcc	3d770 <flatcc_json_printer_clear@@Base+0x924>
   3d758:	mov	r3, #1
   3d75c:	subs	r4, r4, r6
   3d760:	lsl	r1, r3, lr
   3d764:	lsl	r0, r3, ip
   3d768:	orr	r1, r1, r3, lsr r8
   3d76c:	sbc	r5, r5, r7
   3d770:	cmp	ip, #0
   3d774:	beq	3d7fc <flatcc_json_printer_clear@@Base+0x9b0>
   3d778:	lsrs	r3, r7, #1
   3d77c:	rrx	r2, r6
   3d780:	mov	r6, ip
   3d784:	b	3d7a8 <flatcc_json_printer_clear@@Base+0x95c>
   3d788:	subs	r4, r4, r2
   3d78c:	sbc	r5, r5, r3
   3d790:	adds	r4, r4, r4
   3d794:	adc	r5, r5, r5
   3d798:	adds	r4, r4, #1
   3d79c:	adc	r5, r5, #0
   3d7a0:	subs	r6, r6, #1
   3d7a4:	beq	3d7c4 <flatcc_json_printer_clear@@Base+0x978>
   3d7a8:	cmp	r5, r3
   3d7ac:	cmpeq	r4, r2
   3d7b0:	bcs	3d788 <flatcc_json_printer_clear@@Base+0x93c>
   3d7b4:	adds	r4, r4, r4
   3d7b8:	adc	r5, r5, r5
   3d7bc:	subs	r6, r6, #1
   3d7c0:	bne	3d7a8 <flatcc_json_printer_clear@@Base+0x95c>
   3d7c4:	lsr	r6, r4, ip
   3d7c8:	lsr	r7, r5, ip
   3d7cc:	orr	r6, r6, r5, lsl r8
   3d7d0:	adds	r2, r0, r4
   3d7d4:	orr	r6, r6, r5, lsr lr
   3d7d8:	adc	r3, r1, r5
   3d7dc:	lsl	r1, r7, ip
   3d7e0:	orr	r1, r1, r6, lsl lr
   3d7e4:	lsl	r0, r6, ip
   3d7e8:	orr	r1, r1, r6, lsr r8
   3d7ec:	subs	r0, r2, r0
   3d7f0:	mov	r4, r6
   3d7f4:	mov	r5, r7
   3d7f8:	sbc	r1, r3, r1
   3d7fc:	cmp	r9, #0
   3d800:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   3d804:	strd	r4, [r9]
   3d808:	pop	{r4, r5, r6, r7, r8, r9, pc}

0003d80c <__libc_csu_init@@Base>:
   3d80c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3d810:	mov	r7, r0
   3d814:	ldr	r6, [pc, #72]	; 3d864 <__libc_csu_init@@Base+0x58>
   3d818:	ldr	r5, [pc, #72]	; 3d868 <__libc_csu_init@@Base+0x5c>
   3d81c:	add	r6, pc, r6
   3d820:	add	r5, pc, r5
   3d824:	sub	r6, r6, r5
   3d828:	mov	r8, r1
   3d82c:	mov	r9, r2
   3d830:	bl	144fc <raise@plt-0x20>
   3d834:	asrs	r6, r6, #2
   3d838:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d83c:	mov	r4, #0
   3d840:	add	r4, r4, #1
   3d844:	ldr	r3, [r5], #4
   3d848:	mov	r2, r9
   3d84c:	mov	r1, r8
   3d850:	mov	r0, r7
   3d854:	blx	r3
   3d858:	cmp	r6, r4
   3d85c:	bne	3d840 <__libc_csu_init@@Base+0x34>
   3d860:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d864:	andeq	r6, r1, ip, ror #13
   3d868:	andeq	r6, r1, r4, ror #13

0003d86c <__libc_csu_fini@@Base>:
   3d86c:	bx	lr

Disassembly of section .fini:

0003d870 <.fini>:
   3d870:	push	{r3, lr}
   3d874:	pop	{r3, pc}
