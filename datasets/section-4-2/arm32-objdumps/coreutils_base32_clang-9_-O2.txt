
../repos/coreutils/src/base32:     file format elf32-littlearm


Disassembly of section .init:

00010e04 <.init>:
   10e04:	push	{r3, lr}
   10e08:	bl	110d0 <__assert_fail@plt+0x48>
   10e0c:	pop	{r3, pc}

Disassembly of section .plt:

00010e10 <calloc@plt-0x14>:
   10e10:	push	{lr}		; (str lr, [sp, #-4]!)
   10e14:	ldr	lr, [pc, #4]	; 10e20 <calloc@plt-0x4>
   10e18:	add	lr, pc, lr
   10e1c:	ldr	pc, [lr, #8]!
   10e20:	andeq	r7, r1, r0, ror #3

00010e24 <calloc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #94208	; 0x17000
   10e2c:	ldr	pc, [ip, #480]!	; 0x1e0

00010e30 <fputs_unlocked@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #94208	; 0x17000
   10e38:	ldr	pc, [ip, #472]!	; 0x1d8

00010e3c <raise@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #94208	; 0x17000
   10e44:	ldr	pc, [ip, #464]!	; 0x1d0

00010e48 <strcmp@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #94208	; 0x17000
   10e50:	ldr	pc, [ip, #456]!	; 0x1c8

00010e54 <posix_fadvise64@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #94208	; 0x17000
   10e5c:	ldr	pc, [ip, #448]!	; 0x1c0

00010e60 <fflush@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #94208	; 0x17000
   10e68:	ldr	pc, [ip, #440]!	; 0x1b8

00010e6c <memmove@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #94208	; 0x17000
   10e74:	ldr	pc, [ip, #432]!	; 0x1b0

00010e78 <free@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #94208	; 0x17000
   10e80:	ldr	pc, [ip, #424]!	; 0x1a8

00010e84 <_exit@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #94208	; 0x17000
   10e8c:	ldr	pc, [ip, #416]!	; 0x1a0

00010e90 <memcpy@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #94208	; 0x17000
   10e98:	ldr	pc, [ip, #408]!	; 0x198

00010e9c <mbsinit@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #94208	; 0x17000
   10ea4:	ldr	pc, [ip, #400]!	; 0x190

00010ea8 <fwrite_unlocked@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #94208	; 0x17000
   10eb0:	ldr	pc, [ip, #392]!	; 0x188

00010eb4 <dcgettext@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #384]!	; 0x180

00010ec0 <realloc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #376]!	; 0x178

00010ecc <textdomain@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #368]!	; 0x170

00010ed8 <iswprint@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #360]!	; 0x168

00010ee4 <fwrite@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #352]!	; 0x160

00010ef0 <lseek64@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #344]!	; 0x158

00010efc <__ctype_get_mb_cur_max@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #336]!	; 0x150

00010f08 <__fpending@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #328]!	; 0x148

00010f14 <mbrtowc@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #94208	; 0x17000
   10f1c:	ldr	pc, [ip, #320]!	; 0x140

00010f20 <error@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #94208	; 0x17000
   10f28:	ldr	pc, [ip, #312]!	; 0x138

00010f2c <malloc@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #304]!	; 0x130

00010f38 <__libc_start_main@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #94208	; 0x17000
   10f40:	ldr	pc, [ip, #296]!	; 0x128

00010f44 <__freading@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #94208	; 0x17000
   10f4c:	ldr	pc, [ip, #288]!	; 0x120

00010f50 <__gmon_start__@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #94208	; 0x17000
   10f58:	ldr	pc, [ip, #280]!	; 0x118

00010f5c <getopt_long@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #94208	; 0x17000
   10f64:	ldr	pc, [ip, #272]!	; 0x110

00010f68 <__ctype_b_loc@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #94208	; 0x17000
   10f70:	ldr	pc, [ip, #264]!	; 0x108

00010f74 <exit@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #94208	; 0x17000
   10f7c:	ldr	pc, [ip, #256]!	; 0x100

00010f80 <bcmp@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #94208	; 0x17000
   10f88:	ldr	pc, [ip, #248]!	; 0xf8

00010f8c <strlen@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #94208	; 0x17000
   10f94:	ldr	pc, [ip, #240]!	; 0xf0

00010f98 <strchr@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #94208	; 0x17000
   10fa0:	ldr	pc, [ip, #232]!	; 0xe8

00010fa4 <__errno_location@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #94208	; 0x17000
   10fac:	ldr	pc, [ip, #224]!	; 0xe0

00010fb0 <__cxa_atexit@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #94208	; 0x17000
   10fb8:	ldr	pc, [ip, #216]!	; 0xd8

00010fbc <memset@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #94208	; 0x17000
   10fc4:	ldr	pc, [ip, #208]!	; 0xd0

00010fc8 <__printf_chk@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #94208	; 0x17000
   10fd0:	ldr	pc, [ip, #200]!	; 0xc8

00010fd4 <fileno@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #94208	; 0x17000
   10fdc:	ldr	pc, [ip, #192]!	; 0xc0

00010fe0 <__fprintf_chk@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #94208	; 0x17000
   10fe8:	ldr	pc, [ip, #184]!	; 0xb8

00010fec <memchr@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #94208	; 0x17000
   10ff4:	ldr	pc, [ip, #176]!	; 0xb0

00010ff8 <fclose@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #94208	; 0x17000
   11000:	ldr	pc, [ip, #168]!	; 0xa8

00011004 <fseeko64@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #94208	; 0x17000
   1100c:	ldr	pc, [ip, #160]!	; 0xa0

00011010 <__overflow@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #94208	; 0x17000
   11018:	ldr	pc, [ip, #152]!	; 0x98

0001101c <setlocale@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #94208	; 0x17000
   11024:	ldr	pc, [ip, #144]!	; 0x90

00011028 <strrchr@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #94208	; 0x17000
   11030:	ldr	pc, [ip, #136]!	; 0x88

00011034 <nl_langinfo@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #94208	; 0x17000
   1103c:	ldr	pc, [ip, #128]!	; 0x80

00011040 <__strtoll_internal@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #94208	; 0x17000
   11048:	ldr	pc, [ip, #120]!	; 0x78

0001104c <fopen64@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #94208	; 0x17000
   11054:	ldr	pc, [ip, #112]!	; 0x70

00011058 <bindtextdomain@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #94208	; 0x17000
   11060:	ldr	pc, [ip, #104]!	; 0x68

00011064 <fread_unlocked@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #94208	; 0x17000
   1106c:	ldr	pc, [ip, #96]!	; 0x60

00011070 <strncmp@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #94208	; 0x17000
   11078:	ldr	pc, [ip, #88]!	; 0x58

0001107c <abort@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #94208	; 0x17000
   11084:	ldr	pc, [ip, #80]!	; 0x50

00011088 <__assert_fail@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #94208	; 0x17000
   11090:	ldr	pc, [ip, #72]!	; 0x48

Disassembly of section .text:

00011094 <.text>:
   11094:	mov	fp, #0
   11098:	mov	lr, #0
   1109c:	pop	{r1}		; (ldr r1, [sp], #4)
   110a0:	mov	r2, sp
   110a4:	push	{r2}		; (str r2, [sp, #-4]!)
   110a8:	push	{r0}		; (str r0, [sp, #-4]!)
   110ac:	ldr	ip, [pc, #16]	; 110c4 <__assert_fail@plt+0x3c>
   110b0:	push	{ip}		; (str ip, [sp, #-4]!)
   110b4:	ldr	r0, [pc, #12]	; 110c8 <__assert_fail@plt+0x40>
   110b8:	ldr	r3, [pc, #12]	; 110cc <__assert_fail@plt+0x44>
   110bc:	bl	10f38 <__libc_start_main@plt>
   110c0:	bl	1107c <abort@plt>
   110c4:	andeq	r7, r1, ip, lsr #32
   110c8:	andeq	r1, r1, ip, asr #8
   110cc:	andeq	r6, r1, ip, asr #31
   110d0:	ldr	r3, [pc, #20]	; 110ec <__assert_fail@plt+0x64>
   110d4:	ldr	r2, [pc, #20]	; 110f0 <__assert_fail@plt+0x68>
   110d8:	add	r3, pc, r3
   110dc:	ldr	r2, [r3, r2]
   110e0:	cmp	r2, #0
   110e4:	bxeq	lr
   110e8:	b	10f50 <__gmon_start__@plt>
   110ec:	andeq	r6, r1, r0, lsr #30
   110f0:	ldrdeq	r0, [r0], -ip
   110f4:	ldr	r0, [pc, #24]	; 11114 <__assert_fail@plt+0x8c>
   110f8:	ldr	r3, [pc, #24]	; 11118 <__assert_fail@plt+0x90>
   110fc:	cmp	r3, r0
   11100:	bxeq	lr
   11104:	ldr	r3, [pc, #16]	; 1111c <__assert_fail@plt+0x94>
   11108:	cmp	r3, #0
   1110c:	bxeq	lr
   11110:	bx	r3
   11114:	andeq	r8, r2, r0, lsr r1
   11118:	andeq	r8, r2, r0, lsr r1
   1111c:	andeq	r0, r0, r0
   11120:	ldr	r0, [pc, #36]	; 1114c <__assert_fail@plt+0xc4>
   11124:	ldr	r1, [pc, #36]	; 11150 <__assert_fail@plt+0xc8>
   11128:	sub	r1, r1, r0
   1112c:	asr	r1, r1, #2
   11130:	add	r1, r1, r1, lsr #31
   11134:	asrs	r1, r1, #1
   11138:	bxeq	lr
   1113c:	ldr	r3, [pc, #16]	; 11154 <__assert_fail@plt+0xcc>
   11140:	cmp	r3, #0
   11144:	bxeq	lr
   11148:	bx	r3
   1114c:	andeq	r8, r2, r0, lsr r1
   11150:	andeq	r8, r2, r0, lsr r1
   11154:	andeq	r0, r0, r0
   11158:	push	{r4, lr}
   1115c:	ldr	r4, [pc, #24]	; 1117c <__assert_fail@plt+0xf4>
   11160:	ldrb	r3, [r4]
   11164:	cmp	r3, #0
   11168:	popne	{r4, pc}
   1116c:	bl	110f4 <__assert_fail@plt+0x6c>
   11170:	mov	r3, #1
   11174:	strb	r3, [r4]
   11178:	pop	{r4, pc}
   1117c:	andeq	r8, r2, r4, asr r1
   11180:	b	11120 <__assert_fail@plt+0x98>
   11184:	push	{fp, lr}
   11188:	mov	fp, sp
   1118c:	sub	sp, sp, #56	; 0x38
   11190:	mov	r4, r0
   11194:	cmp	r0, #0
   11198:	bne	11408 <__assert_fail@plt+0x380>
   1119c:	movw	r1, #28795	; 0x707b
   111a0:	mov	r0, #0
   111a4:	mov	r2, #5
   111a8:	movt	r1, #1
   111ac:	bl	10eb4 <dcgettext@plt>
   111b0:	mov	r1, r0
   111b4:	movw	r0, #33120	; 0x8160
   111b8:	movt	r0, #2
   111bc:	ldr	r2, [r0]
   111c0:	mov	r0, #1
   111c4:	bl	10fc8 <__printf_chk@plt>
   111c8:	movw	r1, #28825	; 0x7099
   111cc:	mov	r0, #0
   111d0:	mov	r2, #5
   111d4:	movt	r1, #1
   111d8:	bl	10eb4 <dcgettext@plt>
   111dc:	mov	r1, r0
   111e0:	mov	r0, #1
   111e4:	mov	r2, #32
   111e8:	bl	10fc8 <__printf_chk@plt>
   111ec:	movw	r1, #29615	; 0x73af
   111f0:	mov	r0, #0
   111f4:	mov	r2, #5
   111f8:	movt	r1, #1
   111fc:	bl	10eb4 <dcgettext@plt>
   11200:	movw	r7, #33100	; 0x814c
   11204:	movt	r7, #2
   11208:	ldr	r1, [r7]
   1120c:	bl	10e30 <fputs_unlocked@plt>
   11210:	movw	r1, #29671	; 0x73e7
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	movt	r1, #1
   11220:	bl	10eb4 <dcgettext@plt>
   11224:	ldr	r1, [r7]
   11228:	bl	10e30 <fputs_unlocked@plt>
   1122c:	movw	r1, #28895	; 0x70df
   11230:	mov	r0, #0
   11234:	mov	r2, #5
   11238:	movt	r1, #1
   1123c:	bl	10eb4 <dcgettext@plt>
   11240:	ldr	r1, [r7]
   11244:	bl	10e30 <fputs_unlocked@plt>
   11248:	movw	r1, #29137	; 0x71d1
   1124c:	mov	r0, #0
   11250:	mov	r2, #5
   11254:	movt	r1, #1
   11258:	bl	10eb4 <dcgettext@plt>
   1125c:	ldr	r1, [r7]
   11260:	bl	10e30 <fputs_unlocked@plt>
   11264:	movw	r1, #29182	; 0x71fe
   11268:	mov	r0, #0
   1126c:	mov	r2, #5
   11270:	movt	r1, #1
   11274:	bl	10eb4 <dcgettext@plt>
   11278:	ldr	r1, [r7]
   1127c:	bl	10e30 <fputs_unlocked@plt>
   11280:	movw	r1, #29236	; 0x7234
   11284:	mov	r0, #0
   11288:	mov	r2, #5
   1128c:	movt	r1, #1
   11290:	bl	10eb4 <dcgettext@plt>
   11294:	movw	r5, #29504	; 0x7340
   11298:	mov	r1, r0
   1129c:	mov	r0, #1
   112a0:	movt	r5, #1
   112a4:	mov	r2, r5
   112a8:	mov	r3, r5
   112ac:	bl	10fc8 <__printf_chk@plt>
   112b0:	movw	r0, #30256	; 0x7630
   112b4:	mov	r2, #48	; 0x30
   112b8:	mov	r6, sp
   112bc:	movt	r0, #1
   112c0:	add	r1, r0, #32
   112c4:	add	r3, r0, #16
   112c8:	vld1.64	{d18-d19}, [r0], r2
   112cc:	vld1.64	{d16-d17}, [r1]
   112d0:	vld1.64	{d20-d21}, [r3]
   112d4:	vldr	d22, [r0]
   112d8:	add	r1, r6, #32
   112dc:	add	r0, r6, #16
   112e0:	vst1.64	{d16-d17}, [r1]
   112e4:	movw	r1, #29746	; 0x7432
   112e8:	vst1.64	{d20-d21}, [r0]
   112ec:	mov	r0, r6
   112f0:	movt	r1, #1
   112f4:	vst1.64	{d18-d19}, [r0], r2
   112f8:	vstr	d22, [r0]
   112fc:	mov	r0, r5
   11300:	bl	10e48 <strcmp@plt>
   11304:	cmp	r0, #0
   11308:	ldrne	r1, [r6, #8]!
   1130c:	cmpne	r1, #0
   11310:	bne	112fc <__assert_fail@plt+0x274>
   11314:	movw	r1, #29841	; 0x7491
   11318:	ldr	r6, [r6, #4]
   1131c:	mov	r0, #0
   11320:	mov	r2, #5
   11324:	movt	r1, #1
   11328:	bl	10eb4 <dcgettext@plt>
   1132c:	movw	r2, #29565	; 0x737d
   11330:	movw	r3, #29864	; 0x74a8
   11334:	mov	r1, r0
   11338:	mov	r0, #1
   1133c:	movt	r2, #1
   11340:	movt	r3, #1
   11344:	bl	10fc8 <__printf_chk@plt>
   11348:	cmp	r6, #0
   1134c:	mov	r0, #5
   11350:	mov	r1, #0
   11354:	moveq	r6, r5
   11358:	bl	1101c <setlocale@plt>
   1135c:	cmp	r0, #0
   11360:	beq	11398 <__assert_fail@plt+0x310>
   11364:	movw	r1, #29904	; 0x74d0
   11368:	mov	r2, #3
   1136c:	movt	r1, #1
   11370:	bl	11070 <strncmp@plt>
   11374:	cmp	r0, #0
   11378:	beq	11398 <__assert_fail@plt+0x310>
   1137c:	movw	r1, #29908	; 0x74d4
   11380:	mov	r0, #0
   11384:	mov	r2, #5
   11388:	movt	r1, #1
   1138c:	bl	10eb4 <dcgettext@plt>
   11390:	ldr	r1, [r7]
   11394:	bl	10e30 <fputs_unlocked@plt>
   11398:	movw	r1, #29979	; 0x751b
   1139c:	mov	r0, #0
   113a0:	mov	r2, #5
   113a4:	movt	r1, #1
   113a8:	bl	10eb4 <dcgettext@plt>
   113ac:	movw	r2, #29864	; 0x74a8
   113b0:	mov	r1, r0
   113b4:	mov	r0, #1
   113b8:	mov	r3, r5
   113bc:	movt	r2, #1
   113c0:	bl	10fc8 <__printf_chk@plt>
   113c4:	movw	r1, #30006	; 0x7536
   113c8:	mov	r0, #0
   113cc:	mov	r2, #5
   113d0:	movt	r1, #1
   113d4:	bl	10eb4 <dcgettext@plt>
   113d8:	mov	r1, r0
   113dc:	movw	r0, #29774	; 0x744e
   113e0:	movw	r3, #30056	; 0x7568
   113e4:	cmp	r6, r5
   113e8:	mov	r2, r6
   113ec:	movt	r0, #1
   113f0:	movt	r3, #1
   113f4:	moveq	r3, r0
   113f8:	mov	r0, #1
   113fc:	bl	10fc8 <__printf_chk@plt>
   11400:	mov	r0, r4
   11404:	bl	10f74 <exit@plt>
   11408:	movw	r0, #33088	; 0x8140
   1140c:	movw	r1, #28756	; 0x7054
   11410:	mov	r2, #5
   11414:	movt	r0, #2
   11418:	movt	r1, #1
   1141c:	ldr	r5, [r0]
   11420:	mov	r0, #0
   11424:	bl	10eb4 <dcgettext@plt>
   11428:	mov	r2, r0
   1142c:	movw	r0, #33120	; 0x8160
   11430:	mov	r1, #1
   11434:	movt	r0, #2
   11438:	ldr	r3, [r0]
   1143c:	mov	r0, r5
   11440:	bl	10fe0 <__fprintf_chk@plt>
   11444:	mov	r0, r4
   11448:	bl	10f74 <exit@plt>
   1144c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11450:	add	fp, sp, #28
   11454:	sub	sp, sp, #28
   11458:	mov	r5, r0
   1145c:	ldr	r0, [r1]
   11460:	mov	r4, r1
   11464:	bl	12754 <__assert_fail@plt+0x16cc>
   11468:	movw	r1, #30056	; 0x7568
   1146c:	mov	r0, #6
   11470:	movt	r1, #1
   11474:	bl	1101c <setlocale@plt>
   11478:	movw	r6, #29569	; 0x7381
   1147c:	movw	r1, #29511	; 0x7347
   11480:	movt	r6, #1
   11484:	movt	r1, #1
   11488:	mov	r0, r6
   1148c:	bl	11058 <bindtextdomain@plt>
   11490:	mov	r0, r6
   11494:	bl	10ecc <textdomain@plt>
   11498:	movw	r0, #9316	; 0x2464
   1149c:	movt	r0, #1
   114a0:	bl	17030 <__assert_fail@plt+0x5fa8>
   114a4:	movw	r9, #29535	; 0x735f
   114a8:	movw	r7, #30160	; 0x75d0
   114ac:	mov	r6, #76	; 0x4c
   114b0:	mov	r8, #0
   114b4:	mov	sl, #0
   114b8:	mov	r0, #0
   114bc:	movt	r9, #1
   114c0:	movt	r7, #1
   114c4:	str	r0, [sp, #12]
   114c8:	mov	r0, r5
   114cc:	mov	r1, r4
   114d0:	mov	r2, r9
   114d4:	mov	r3, r7
   114d8:	str	r8, [sp]
   114dc:	bl	10f5c <getopt_long@plt>
   114e0:	cmp	r0, #99	; 0x63
   114e4:	ble	1156c <__assert_fail@plt+0x4e4>
   114e8:	cmp	r0, #100	; 0x64
   114ec:	beq	1155c <__assert_fail@plt+0x4d4>
   114f0:	cmp	r0, #105	; 0x69
   114f4:	beq	11564 <__assert_fail@plt+0x4dc>
   114f8:	cmp	r0, #119	; 0x77
   114fc:	bne	11744 <__assert_fail@plt+0x6bc>
   11500:	movw	r0, #33104	; 0x8150
   11504:	movw	r1, #30056	; 0x7568
   11508:	mov	r2, #10
   1150c:	add	r3, sp, #16
   11510:	movt	r0, #2
   11514:	movt	r1, #1
   11518:	ldr	r0, [r0]
   1151c:	str	r1, [sp]
   11520:	mov	r1, #0
   11524:	bl	1512c <__assert_fail@plt+0x40a4>
   11528:	cmp	r0, #1
   1152c:	bhi	11700 <__assert_fail@plt+0x678>
   11530:	ldr	r1, [sp, #20]
   11534:	cmn	r1, #1
   11538:	ble	11700 <__assert_fail@plt+0x678>
   1153c:	ldr	r2, [sp, #16]
   11540:	mvn	r3, #-2147483648	; 0x80000000
   11544:	subs	r3, r3, r2
   11548:	rscs	r1, r1, #0
   1154c:	movwlt	r2, #0
   11550:	subs	r6, r0, #1
   11554:	movne	r6, r2
   11558:	b	114c8 <__assert_fail@plt+0x440>
   1155c:	mov	sl, #1
   11560:	b	114c8 <__assert_fail@plt+0x440>
   11564:	mov	r0, #1
   11568:	b	114c4 <__assert_fail@plt+0x43c>
   1156c:	cmn	r0, #3
   11570:	beq	11584 <__assert_fail@plt+0x4fc>
   11574:	cmn	r0, #2
   11578:	bne	115cc <__assert_fail@plt+0x544>
   1157c:	mov	r0, #0
   11580:	bl	11184 <__assert_fail@plt+0xfc>
   11584:	movw	r0, #33000	; 0x80e8
   11588:	movw	r2, #29579	; 0x738b
   1158c:	mov	r1, #0
   11590:	movt	r0, #2
   11594:	movt	r2, #1
   11598:	str	r1, [sp, #4]
   1159c:	movw	r1, #29504	; 0x7340
   115a0:	movt	r1, #1
   115a4:	ldr	r3, [r0]
   115a8:	movw	r0, #33100	; 0x814c
   115ac:	str	r2, [sp]
   115b0:	movw	r2, #29565	; 0x737d
   115b4:	movt	r0, #2
   115b8:	movt	r2, #1
   115bc:	ldr	r0, [r0]
   115c0:	bl	14978 <__assert_fail@plt+0x38f0>
   115c4:	mov	r0, #0
   115c8:	bl	10f74 <exit@plt>
   115cc:	cmn	r0, #1
   115d0:	bne	11744 <__assert_fail@plt+0x6bc>
   115d4:	movw	r7, #33080	; 0x8138
   115d8:	movt	r7, #2
   115dc:	ldr	r0, [r7]
   115e0:	sub	r1, r5, r0
   115e4:	cmp	r1, #2
   115e8:	blt	11630 <__assert_fail@plt+0x5a8>
   115ec:	movw	r1, #29595	; 0x739b
   115f0:	mov	r0, #0
   115f4:	mov	r2, #5
   115f8:	movt	r1, #1
   115fc:	bl	10eb4 <dcgettext@plt>
   11600:	mov	r5, r0
   11604:	ldr	r0, [r7]
   11608:	add	r0, r4, r0, lsl #2
   1160c:	ldr	r0, [r0, #4]
   11610:	bl	143a8 <__assert_fail@plt+0x3320>
   11614:	mov	r3, r0
   11618:	mov	r0, #0
   1161c:	mov	r1, #0
   11620:	mov	r2, r5
   11624:	bl	10f20 <error@plt>
   11628:	mov	r0, #1
   1162c:	bl	11184 <__assert_fail@plt+0xfc>
   11630:	cmp	r0, r5
   11634:	bge	11640 <__assert_fail@plt+0x5b8>
   11638:	ldr	r4, [r4, r0, lsl #2]
   1163c:	b	11648 <__assert_fail@plt+0x5c0>
   11640:	movw	r4, #30681	; 0x77d9
   11644:	movt	r4, #1
   11648:	movw	r1, #30681	; 0x77d9
   1164c:	mov	r0, r4
   11650:	movt	r1, #1
   11654:	bl	10e48 <strcmp@plt>
   11658:	cmp	r0, #0
   1165c:	bne	11670 <__assert_fail@plt+0x5e8>
   11660:	movw	r0, #33096	; 0x8148
   11664:	movt	r0, #2
   11668:	ldr	r5, [r0]
   1166c:	b	116bc <__assert_fail@plt+0x634>
   11670:	movw	r1, #29612	; 0x73ac
   11674:	mov	r0, r4
   11678:	movt	r1, #1
   1167c:	bl	1104c <fopen64@plt>
   11680:	mov	r5, r0
   11684:	cmp	r0, #0
   11688:	bne	116bc <__assert_fail@plt+0x634>
   1168c:	bl	10fa4 <__errno_location@plt>
   11690:	ldr	r5, [r0]
   11694:	mov	r0, #0
   11698:	mov	r1, #3
   1169c:	mov	r2, r4
   116a0:	bl	140fc <__assert_fail@plt+0x3074>
   116a4:	movw	r2, #29544	; 0x7368
   116a8:	mov	r3, r0
   116ac:	mov	r0, #1
   116b0:	mov	r1, r5
   116b4:	movt	r2, #1
   116b8:	bl	10f20 <error@plt>
   116bc:	mov	r0, r5
   116c0:	mov	r1, #2
   116c4:	bl	12550 <__assert_fail@plt+0x14c8>
   116c8:	movw	r0, #33100	; 0x814c
   116cc:	tst	sl, #1
   116d0:	movt	r0, #2
   116d4:	ldr	r2, [r0]
   116d8:	beq	116f0 <__assert_fail@plt+0x668>
   116dc:	ldr	r0, [sp, #12]
   116e0:	mov	r1, r4
   116e4:	and	r3, r0, #1
   116e8:	mov	r0, r5
   116ec:	bl	1174c <__assert_fail@plt+0x6c4>
   116f0:	mov	r0, r5
   116f4:	mov	r1, r4
   116f8:	mov	r3, r6
   116fc:	bl	1194c <__assert_fail@plt+0x8c4>
   11700:	movw	r1, #29547	; 0x736b
   11704:	mov	r0, #0
   11708:	mov	r2, #5
   1170c:	movt	r1, #1
   11710:	bl	10eb4 <dcgettext@plt>
   11714:	mov	r4, r0
   11718:	movw	r0, #33104	; 0x8150
   1171c:	movt	r0, #2
   11720:	ldr	r0, [r0]
   11724:	bl	143a8 <__assert_fail@plt+0x3320>
   11728:	movw	r2, #29540	; 0x7364
   1172c:	str	r0, [sp]
   11730:	mov	r0, #1
   11734:	mov	r1, #0
   11738:	mov	r3, r4
   1173c:	movt	r2, #1
   11740:	bl	10f20 <error@plt>
   11744:	mov	r0, #1
   11748:	bl	11184 <__assert_fail@plt+0xfc>
   1174c:	push	{fp, lr}
   11750:	mov	fp, sp
   11754:	sub	sp, sp, #40	; 0x28
   11758:	mov	r8, r0
   1175c:	mov	r0, #8192	; 0x2000
   11760:	stmib	sp, {r1, r2, r3}
   11764:	bl	14bac <__assert_fail@plt+0x3b24>
   11768:	mov	r4, r0
   1176c:	mov	r0, #5120	; 0x1400
   11770:	bl	14bac <__assert_fail@plt+0x3b24>
   11774:	str	r0, [sp, #20]
   11778:	sub	r0, fp, #12
   1177c:	bl	11f18 <__assert_fail@plt+0xe90>
   11780:	ldr	r5, [sp, #8]
   11784:	mov	sl, #0
   11788:	str	r8, [sp, #16]
   1178c:	b	1179c <__assert_fail@plt+0x714>
   11790:	mov	sl, #0
   11794:	cmp	r0, #0
   11798:	bne	11940 <__assert_fail@plt+0x8b8>
   1179c:	add	r9, r4, sl
   117a0:	rsb	r2, sl, #8192	; 0x2000
   117a4:	mov	r1, #1
   117a8:	mov	r3, r8
   117ac:	mov	r0, r9
   117b0:	bl	11064 <fread_unlocked@plt>
   117b4:	mov	r8, r0
   117b8:	cmp	r0, #1
   117bc:	blt	11824 <__assert_fail@plt+0x79c>
   117c0:	ldr	r0, [sp, #12]
   117c4:	cmp	r0, #0
   117c8:	beq	11824 <__assert_fail@plt+0x79c>
   117cc:	mov	r6, #0
   117d0:	add	r0, r6, sl
   117d4:	ldrb	r7, [r4, r0]
   117d8:	mov	r0, r7
   117dc:	bl	11ef8 <__assert_fail@plt+0xe70>
   117e0:	cmp	r0, #0
   117e4:	bne	11818 <__assert_fail@plt+0x790>
   117e8:	cmp	r7, #61	; 0x3d
   117ec:	beq	11818 <__assert_fail@plt+0x790>
   117f0:	sub	r8, r8, #1
   117f4:	add	r0, r9, r6
   117f8:	sub	r2, r8, r6
   117fc:	add	r1, r0, #1
   11800:	bl	10e6c <memmove@plt>
   11804:	cmp	r8, #1
   11808:	blt	11824 <__assert_fail@plt+0x79c>
   1180c:	cmp	r6, r8
   11810:	blt	117d0 <__assert_fail@plt+0x748>
   11814:	b	11824 <__assert_fail@plt+0x79c>
   11818:	add	r6, r6, #1
   1181c:	cmp	r8, #1
   11820:	bge	1180c <__assert_fail@plt+0x784>
   11824:	ldr	r0, [sp, #16]
   11828:	ldr	r0, [r0]
   1182c:	tst	r0, #32
   11830:	bne	1192c <__assert_fail@plt+0x8a4>
   11834:	add	sl, r8, sl
   11838:	ldr	r8, [sp, #16]
   1183c:	cmp	sl, #8192	; 0x2000
   11840:	bge	1184c <__assert_fail@plt+0x7c4>
   11844:	ands	r0, r0, #16
   11848:	beq	1179c <__assert_fail@plt+0x714>
   1184c:	mov	r1, #0
   11850:	ldr	r9, [sp, #20]
   11854:	mov	r0, #5120	; 0x1400
   11858:	cmp	r1, #0
   1185c:	mov	r2, #0
   11860:	mov	r6, r1
   11864:	mov	r1, r4
   11868:	str	r0, [fp, #-16]
   1186c:	sub	r0, fp, #16
   11870:	moveq	r2, sl
   11874:	str	r0, [sp]
   11878:	sub	r0, fp, #12
   1187c:	mov	r3, r9
   11880:	bl	11f24 <__assert_fail@plt+0xe9c>
   11884:	ldr	r2, [fp, #-16]
   11888:	mov	r7, r0
   1188c:	mov	r0, r9
   11890:	mov	r1, #1
   11894:	mov	r3, r5
   11898:	bl	10ea8 <fwrite_unlocked@plt>
   1189c:	ldr	r1, [fp, #-16]
   118a0:	cmp	r0, r1
   118a4:	bcc	11900 <__assert_fail@plt+0x878>
   118a8:	cmp	r7, #0
   118ac:	beq	118dc <__assert_fail@plt+0x854>
   118b0:	ldr	r0, [r8]
   118b4:	mov	r2, #2
   118b8:	add	r1, r6, #1
   118bc:	ands	r0, r0, #16
   118c0:	movweq	r2, #1
   118c4:	cmp	r1, r2
   118c8:	bcs	11790 <__assert_fail@plt+0x708>
   118cc:	ldr	r2, [fp, #-12]
   118d0:	orrs	r2, r6, r2
   118d4:	bne	11850 <__assert_fail@plt+0x7c8>
   118d8:	b	11790 <__assert_fail@plt+0x708>
   118dc:	movw	r1, #30120	; 0x75a8
   118e0:	mov	r0, #0
   118e4:	mov	r2, #5
   118e8:	movt	r1, #1
   118ec:	bl	10eb4 <dcgettext@plt>
   118f0:	mov	r2, r0
   118f4:	mov	r0, #1
   118f8:	mov	r1, #0
   118fc:	bl	10f20 <error@plt>
   11900:	bl	10fa4 <__errno_location@plt>
   11904:	ldr	r4, [r0]
   11908:	movw	r1, #30108	; 0x759c
   1190c:	movt	r1, #1
   11910:	mov	r0, #0
   11914:	mov	r2, #5
   11918:	bl	10eb4 <dcgettext@plt>
   1191c:	mov	r2, r0
   11920:	mov	r0, #1
   11924:	mov	r1, r4
   11928:	bl	10f20 <error@plt>
   1192c:	bl	10fa4 <__errno_location@plt>
   11930:	ldr	r4, [r0]
   11934:	movw	r1, #30097	; 0x7591
   11938:	movt	r1, #1
   1193c:	b	11910 <__assert_fail@plt+0x888>
   11940:	ldr	r1, [sp, #4]
   11944:	mov	r0, r8
   11948:	bl	11b94 <__assert_fail@plt+0xb0c>
   1194c:	push	{fp, lr}
   11950:	mov	fp, sp
   11954:	sub	sp, sp, #16
   11958:	mov	r5, r0
   1195c:	mov	r0, #30720	; 0x7800
   11960:	str	r3, [fp, #-4]
   11964:	stm	sp, {r1, r2}
   11968:	bl	14bac <__assert_fail@plt+0x3b24>
   1196c:	mov	r4, r0
   11970:	mov	r0, #49152	; 0xc000
   11974:	bl	14bac <__assert_fail@plt+0x3b24>
   11978:	mov	r7, r0
   1197c:	mov	sl, #0
   11980:	str	r0, [sp, #8]
   11984:	mov	r6, #0
   11988:	add	r0, r4, r6
   1198c:	rsb	r2, r6, #30720	; 0x7800
   11990:	mov	r1, #1
   11994:	mov	r3, r5
   11998:	bl	11064 <fread_unlocked@plt>
   1199c:	add	r6, r0, r6
   119a0:	ldr	r0, [r5]
   119a4:	tst	r0, #16
   119a8:	bne	119bc <__assert_fail@plt+0x934>
   119ac:	cmp	r6, #30720	; 0x7800
   119b0:	bge	119bc <__assert_fail@plt+0x934>
   119b4:	ands	r0, r0, #32
   119b8:	beq	11988 <__assert_fail@plt+0x900>
   119bc:	cmp	r6, #1
   119c0:	blt	11ad4 <__assert_fail@plt+0xa4c>
   119c4:	movw	r1, #26215	; 0x6667
   119c8:	add	r0, r6, #4
   119cc:	mov	r2, r7
   119d0:	movt	r1, #26214	; 0x6666
   119d4:	smmul	r0, r0, r1
   119d8:	lsr	r1, r0, #1
   119dc:	add	r0, r1, r0, lsr #31
   119e0:	mov	r1, r6
   119e4:	lsl	r8, r0, #3
   119e8:	mov	r0, r4
   119ec:	mov	r3, r8
   119f0:	bl	11c24 <__assert_fail@plt+0xb9c>
   119f4:	ldr	r0, [fp, #-4]
   119f8:	cmp	r0, #0
   119fc:	beq	11a08 <__assert_fail@plt+0x980>
   11a00:	mov	r7, #0
   11a04:	b	11a4c <__assert_fail@plt+0x9c4>
   11a08:	movw	r0, #33100	; 0x814c
   11a0c:	mov	r1, #1
   11a10:	mov	r2, r8
   11a14:	movt	r0, #2
   11a18:	ldr	r3, [r0]
   11a1c:	mov	r0, r7
   11a20:	bl	10ea8 <fwrite_unlocked@plt>
   11a24:	cmp	r0, r8
   11a28:	bcs	11ad4 <__assert_fail@plt+0xa4c>
   11a2c:	b	11b3c <__assert_fail@plt+0xab4>
   11a30:	mov	r1, #10
   11a34:	bl	11010 <__overflow@plt>
   11a38:	mov	sl, #0
   11a3c:	cmn	r0, #1
   11a40:	beq	11b3c <__assert_fail@plt+0xab4>
   11a44:	cmp	r7, r8
   11a48:	bge	11ad4 <__assert_fail@plt+0xa4c>
   11a4c:	ldr	r0, [fp, #-4]
   11a50:	sub	r9, r8, r7
   11a54:	sub	r0, r0, sl
   11a58:	cmp	r0, r9
   11a5c:	movlt	r9, r0
   11a60:	cmp	r9, #0
   11a64:	beq	11aa4 <__assert_fail@plt+0xa1c>
   11a68:	movw	r1, #33100	; 0x814c
   11a6c:	ldr	r0, [sp, #8]
   11a70:	mov	r2, r9
   11a74:	movt	r1, #2
   11a78:	ldr	r3, [r1]
   11a7c:	mov	r1, #1
   11a80:	add	r0, r0, r7
   11a84:	bl	10ea8 <fwrite_unlocked@plt>
   11a88:	cmp	r0, r9
   11a8c:	bcc	11b3c <__assert_fail@plt+0xab4>
   11a90:	add	r7, r9, r7
   11a94:	add	sl, r9, sl
   11a98:	cmp	r7, r8
   11a9c:	blt	11a4c <__assert_fail@plt+0x9c4>
   11aa0:	b	11ad4 <__assert_fail@plt+0xa4c>
   11aa4:	ldr	r0, [sp, #4]
   11aa8:	ldr	r2, [r0, #20]
   11aac:	ldr	r1, [r0, #24]
   11ab0:	cmp	r2, r1
   11ab4:	bcs	11a30 <__assert_fail@plt+0x9a8>
   11ab8:	add	r1, r2, #1
   11abc:	mov	sl, #0
   11ac0:	str	r1, [r0, #20]
   11ac4:	mov	r0, #10
   11ac8:	strb	r0, [r2]
   11acc:	cmp	r7, r8
   11ad0:	blt	11a4c <__assert_fail@plt+0x9c4>
   11ad4:	ldr	r0, [r5]
   11ad8:	ldr	r7, [sp, #8]
   11adc:	tst	r0, #16
   11ae0:	cmpeq	r6, #30720	; 0x7800
   11ae4:	bne	11af0 <__assert_fail@plt+0xa68>
   11ae8:	ands	r0, r0, #32
   11aec:	beq	11984 <__assert_fail@plt+0x8fc>
   11af0:	ldr	r0, [fp, #-4]
   11af4:	cmp	r0, #0
   11af8:	beq	11b50 <__assert_fail@plt+0xac8>
   11afc:	cmp	sl, #1
   11b00:	blt	11b50 <__assert_fail@plt+0xac8>
   11b04:	ldr	r0, [sp, #4]
   11b08:	ldr	r2, [r0, #20]
   11b0c:	ldr	r1, [r0, #24]
   11b10:	cmp	r2, r1
   11b14:	bcs	11b2c <__assert_fail@plt+0xaa4>
   11b18:	add	r1, r2, #1
   11b1c:	str	r1, [r0, #20]
   11b20:	mov	r1, #10
   11b24:	strb	r1, [r2]
   11b28:	b	11b50 <__assert_fail@plt+0xac8>
   11b2c:	mov	r1, #10
   11b30:	bl	11010 <__overflow@plt>
   11b34:	cmn	r0, #1
   11b38:	bne	11b50 <__assert_fail@plt+0xac8>
   11b3c:	bl	10fa4 <__errno_location@plt>
   11b40:	ldr	r4, [r0]
   11b44:	movw	r1, #30108	; 0x759c
   11b48:	movt	r1, #1
   11b4c:	b	11b78 <__assert_fail@plt+0xaf0>
   11b50:	ldrb	r0, [r5]
   11b54:	tst	r0, #32
   11b58:	bne	11b68 <__assert_fail@plt+0xae0>
   11b5c:	ldr	r1, [sp]
   11b60:	mov	r0, r5
   11b64:	bl	11b94 <__assert_fail@plt+0xb0c>
   11b68:	bl	10fa4 <__errno_location@plt>
   11b6c:	ldr	r4, [r0]
   11b70:	movw	r1, #30097	; 0x7591
   11b74:	movt	r1, #1
   11b78:	mov	r0, #0
   11b7c:	mov	r2, #5
   11b80:	bl	10eb4 <dcgettext@plt>
   11b84:	mov	r2, r0
   11b88:	mov	r0, #1
   11b8c:	mov	r1, r4
   11b90:	bl	10f20 <error@plt>
   11b94:	push	{fp, lr}
   11b98:	mov	fp, sp
   11b9c:	mov	r5, r1
   11ba0:	bl	1258c <__assert_fail@plt+0x1504>
   11ba4:	cmp	r0, #0
   11ba8:	bne	11bb4 <__assert_fail@plt+0xb2c>
   11bac:	mov	r0, #0
   11bb0:	bl	10f74 <exit@plt>
   11bb4:	movw	r1, #30681	; 0x77d9
   11bb8:	mov	r0, r5
   11bbc:	movt	r1, #1
   11bc0:	bl	10e48 <strcmp@plt>
   11bc4:	mov	r6, r0
   11bc8:	bl	10fa4 <__errno_location@plt>
   11bcc:	ldr	r4, [r0]
   11bd0:	cmp	r6, #0
   11bd4:	bne	11bfc <__assert_fail@plt+0xb74>
   11bd8:	movw	r1, #30134	; 0x75b6
   11bdc:	mov	r0, #0
   11be0:	mov	r2, #5
   11be4:	movt	r1, #1
   11be8:	bl	10eb4 <dcgettext@plt>
   11bec:	mov	r2, r0
   11bf0:	mov	r0, #1
   11bf4:	mov	r1, r4
   11bf8:	bl	10f20 <error@plt>
   11bfc:	mov	r0, #0
   11c00:	mov	r1, #3
   11c04:	mov	r2, r5
   11c08:	bl	140fc <__assert_fail@plt+0x3074>
   11c0c:	movw	r2, #29544	; 0x7368
   11c10:	mov	r3, r0
   11c14:	mov	r0, #1
   11c18:	mov	r1, r4
   11c1c:	movt	r2, #1
   11c20:	bl	10f20 <error@plt>
   11c24:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11c28:	add	fp, sp, #24
   11c2c:	cmp	r1, #0
   11c30:	cmpne	r3, #0
   11c34:	bne	11c4c <__assert_fail@plt+0xbc4>
   11c38:	cmp	r3, #0
   11c3c:	beq	11c48 <__assert_fail@plt+0xbc0>
   11c40:	mov	r0, #0
   11c44:	strb	r0, [r2]
   11c48:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11c4c:	movw	r8, #30327	; 0x7677
   11c50:	add	r0, r0, #2
   11c54:	rsb	lr, r3, #0
   11c58:	mov	ip, #0
   11c5c:	mov	r9, #0
   11c60:	movt	r8, #1
   11c64:	ldrb	r3, [r0, #-2]
   11c68:	mov	r5, r2
   11c6c:	add	r6, lr, r9
   11c70:	ldrb	r3, [r8, r3, lsr #3]
   11c74:	strb	r3, [r5, r9]!
   11c78:	adds	r3, r6, #1
   11c7c:	bcs	11c48 <__assert_fail@plt+0xbc0>
   11c80:	cmp	r1, #1
   11c84:	ldrb	r3, [r0, #-2]
   11c88:	mov	r4, #0
   11c8c:	add	r7, r6, #2
   11c90:	ldrbne	r4, [r0, #-1]
   11c94:	lsl	r3, r3, #2
   11c98:	lsrne	r4, r4, #6
   11c9c:	cmp	r7, #0
   11ca0:	add	r3, r4, r3
   11ca4:	and	r3, r3, #31
   11ca8:	ldrb	r3, [r8, r3]
   11cac:	strb	r3, [r5, #1]
   11cb0:	beq	11c48 <__assert_fail@plt+0xbc0>
   11cb4:	add	r7, r6, #3
   11cb8:	mov	r3, #61	; 0x3d
   11cbc:	cmp	r1, #1
   11cc0:	beq	11cd0 <__assert_fail@plt+0xc48>
   11cc4:	ldrb	r3, [r0, #-1]
   11cc8:	ubfx	r3, r3, #1, #5
   11ccc:	ldrb	r3, [r8, r3]
   11cd0:	cmp	r7, #0
   11cd4:	strb	r3, [r5, #2]
   11cd8:	beq	11c48 <__assert_fail@plt+0xbc0>
   11cdc:	add	r7, r6, #4
   11ce0:	cmp	r1, #1
   11ce4:	beq	11d04 <__assert_fail@plt+0xc7c>
   11ce8:	ldrb	r3, [r0, #-1]
   11cec:	subs	r1, r1, #2
   11cf0:	lsl	r3, r3, #4
   11cf4:	beq	11d10 <__assert_fail@plt+0xc88>
   11cf8:	ldrb	r4, [r0]
   11cfc:	lsr	r4, r4, #4
   11d00:	b	11d14 <__assert_fail@plt+0xc8c>
   11d04:	mov	r3, #61	; 0x3d
   11d08:	mov	r1, #0
   11d0c:	b	11d20 <__assert_fail@plt+0xc98>
   11d10:	mov	r4, #0
   11d14:	add	r3, r4, r3
   11d18:	and	r3, r3, #31
   11d1c:	ldrb	r3, [r8, r3]
   11d20:	cmp	r7, #0
   11d24:	strb	r3, [r5, #3]
   11d28:	beq	11c48 <__assert_fail@plt+0xbc0>
   11d2c:	add	r7, r6, #5
   11d30:	cmp	r1, #0
   11d34:	beq	11d54 <__assert_fail@plt+0xccc>
   11d38:	ldrb	r3, [r0]
   11d3c:	subs	r1, r1, #1
   11d40:	lsl	r3, r3, #1
   11d44:	beq	11d60 <__assert_fail@plt+0xcd8>
   11d48:	ldrb	r4, [r0, #1]
   11d4c:	lsr	r4, r4, #7
   11d50:	b	11d64 <__assert_fail@plt+0xcdc>
   11d54:	mov	r3, #61	; 0x3d
   11d58:	mov	r1, #0
   11d5c:	b	11d70 <__assert_fail@plt+0xce8>
   11d60:	mov	r4, #0
   11d64:	add	r3, r4, r3
   11d68:	and	r3, r3, #31
   11d6c:	ldrb	r3, [r8, r3]
   11d70:	cmp	r7, #0
   11d74:	strb	r3, [r5, #4]
   11d78:	beq	11c48 <__assert_fail@plt+0xbc0>
   11d7c:	add	r7, r6, #6
   11d80:	cmp	r1, #0
   11d84:	beq	11d98 <__assert_fail@plt+0xd10>
   11d88:	ldrb	r3, [r0, #1]
   11d8c:	ubfx	r3, r3, #2, #5
   11d90:	ldrb	r3, [r8, r3]
   11d94:	b	11d9c <__assert_fail@plt+0xd14>
   11d98:	mov	r3, #61	; 0x3d
   11d9c:	cmp	r7, #0
   11da0:	strb	r3, [r5, #5]
   11da4:	beq	11c48 <__assert_fail@plt+0xbc0>
   11da8:	add	r7, r6, #7
   11dac:	cmp	r1, #0
   11db0:	beq	11dd0 <__assert_fail@plt+0xd48>
   11db4:	ldrb	r3, [r0, #1]
   11db8:	subs	r1, r1, #1
   11dbc:	lsl	r3, r3, #3
   11dc0:	beq	11ddc <__assert_fail@plt+0xd54>
   11dc4:	ldrb	r4, [r0, #2]
   11dc8:	lsr	r4, r4, #5
   11dcc:	b	11de0 <__assert_fail@plt+0xd58>
   11dd0:	mov	r3, #61	; 0x3d
   11dd4:	mov	r1, #0
   11dd8:	b	11dec <__assert_fail@plt+0xd64>
   11ddc:	mov	r4, #0
   11de0:	add	r3, r4, r3
   11de4:	and	r3, r3, #31
   11de8:	ldrb	r3, [r8, r3]
   11dec:	cmp	r7, #0
   11df0:	strb	r3, [r5, #6]
   11df4:	beq	11c48 <__assert_fail@plt+0xbc0>
   11df8:	cmp	r1, #0
   11dfc:	beq	11e10 <__assert_fail@plt+0xd88>
   11e00:	ldrb	r3, [r0, #2]
   11e04:	and	r3, r3, #31
   11e08:	ldrb	r3, [r8, r3]
   11e0c:	b	11e14 <__assert_fail@plt+0xd8c>
   11e10:	mov	r3, #61	; 0x3d
   11e14:	cmn	r6, #8
   11e18:	strb	r3, [r5, #7]
   11e1c:	beq	11c48 <__assert_fail@plt+0xbc0>
   11e20:	subs	r1, r1, #1
   11e24:	add	r9, r9, #8
   11e28:	adc	r3, ip, #0
   11e2c:	cmp	r1, #0
   11e30:	addne	r0, r0, #5
   11e34:	cmpne	r3, #0
   11e38:	bne	11c64 <__assert_fail@plt+0xbdc>
   11e3c:	add	r2, r2, r9
   11e40:	b	11c40 <__assert_fail@plt+0xbb8>
   11e44:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11e48:	add	fp, sp, #24
   11e4c:	mov	r8, r0
   11e50:	movw	r0, #26215	; 0x6667
   11e54:	mov	r4, r1
   11e58:	mov	r6, r2
   11e5c:	movt	r0, #26214	; 0x6666
   11e60:	smmul	r0, r1, r0
   11e64:	asr	r1, r0, #1
   11e68:	add	r0, r1, r0, lsr #31
   11e6c:	add	r1, r0, r0, lsl #2
   11e70:	subs	r1, r4, r1
   11e74:	addne	r0, r0, #1
   11e78:	cmn	r0, #1
   11e7c:	ble	11e8c <__assert_fail@plt+0xe04>
   11e80:	cmn	r0, #-268435455	; 0xf0000001
   11e84:	ble	11ea0 <__assert_fail@plt+0xe18>
   11e88:	b	11ee0 <__assert_fail@plt+0xe58>
   11e8c:	beq	11ea0 <__assert_fail@plt+0xe18>
   11e90:	mov	r1, #-2147483648	; 0x80000000
   11e94:	sdiv	r1, r1, r0
   11e98:	cmp	r1, #8
   11e9c:	blt	11ee0 <__assert_fail@plt+0xe58>
   11ea0:	cmn	r4, #1
   11ea4:	ble	11ee0 <__assert_fail@plt+0xe58>
   11ea8:	lsl	r7, r0, #3
   11eac:	orr	r5, r7, #1
   11eb0:	mov	r0, r5
   11eb4:	bl	16a98 <__assert_fail@plt+0x5a10>
   11eb8:	cmp	r0, #0
   11ebc:	str	r0, [r6]
   11ec0:	beq	11ef0 <__assert_fail@plt+0xe68>
   11ec4:	mov	r2, r0
   11ec8:	mov	r0, r8
   11ecc:	mov	r1, r4
   11ed0:	mov	r3, r5
   11ed4:	bl	11c24 <__assert_fail@plt+0xb9c>
   11ed8:	mov	r0, r7
   11edc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11ee0:	mov	r7, #0
   11ee4:	mov	r0, r7
   11ee8:	str	r7, [r6]
   11eec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11ef0:	mov	r0, r5
   11ef4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11ef8:	movw	r1, #30359	; 0x7697
   11efc:	movt	r1, #1
   11f00:	add	r0, r1, r0
   11f04:	ldrsb	r1, [r0]
   11f08:	mov	r0, #0
   11f0c:	cmn	r1, #1
   11f10:	movwgt	r0, #1
   11f14:	bx	lr
   11f18:	mov	r1, #0
   11f1c:	str	r1, [r0]
   11f20:	bx	lr
   11f24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f28:	add	fp, sp, #28
   11f2c:	sub	sp, sp, #28
   11f30:	mov	r6, r2
   11f34:	mov	r2, r0
   11f38:	ldr	r0, [fp, #8]
   11f3c:	str	r3, [sp, #24]
   11f40:	mov	r5, r1
   11f44:	mov	r8, #0
   11f48:	cmp	r2, #0
   11f4c:	ldr	r7, [r0]
   11f50:	mov	r0, #0
   11f54:	str	r7, [sp, #20]
   11f58:	beq	11f70 <__assert_fail@plt+0xee8>
   11f5c:	clz	r0, r6
   11f60:	lsr	r8, r0, #5
   11f64:	ldr	r0, [r2]
   11f68:	cmp	r0, #0
   11f6c:	movwne	r0, #1
   11f70:	orr	r0, r0, r8
   11f74:	add	sl, sp, #24
   11f78:	add	r4, sp, #20
   11f7c:	str	r2, [sp, #16]
   11f80:	str	r0, [sp, #8]
   11f84:	add	r0, r2, #4
   11f88:	str	r0, [sp, #4]
   11f8c:	clz	r0, r2
   11f90:	lsr	r0, r0, #5
   11f94:	str	r0, [sp, #12]
   11f98:	b	11fa8 <__assert_fail@plt+0xf20>
   11f9c:	ldr	r7, [sp, #20]
   11fa0:	sub	r6, r6, #1
   11fa4:	add	r5, r5, #1
   11fa8:	ldr	r0, [sp, #8]
   11fac:	cmp	r0, #0
   11fb0:	bne	11fe4 <__assert_fail@plt+0xf5c>
   11fb4:	mov	r0, r5
   11fb8:	mov	r1, r6
   11fbc:	mov	r2, sl
   11fc0:	mov	r3, r4
   11fc4:	bl	12188 <__assert_fail@plt+0x1100>
   11fc8:	cmp	r0, #0
   11fcc:	beq	11fe0 <__assert_fail@plt+0xf58>
   11fd0:	ldr	r7, [sp, #20]
   11fd4:	add	r5, r5, #8
   11fd8:	sub	r6, r6, #8
   11fdc:	b	11fb4 <__assert_fail@plt+0xf2c>
   11fe0:	ldr	r2, [sp, #16]
   11fe4:	cmp	r6, #0
   11fe8:	mov	r0, r6
   11fec:	movwne	r0, #1
   11ff0:	orr	r0, r8, r0
   11ff4:	cmp	r0, #1
   11ff8:	bne	1215c <__assert_fail@plt+0x10d4>
   11ffc:	cmp	r6, #0
   12000:	beq	1201c <__assert_fail@plt+0xf94>
   12004:	ldrb	r0, [r5]
   12008:	ldr	r1, [sp, #12]
   1200c:	subs	r0, r0, #10
   12010:	movwne	r0, #1
   12014:	orrs	r0, r0, r1
   12018:	beq	11f9c <__assert_fail@plt+0xf14>
   1201c:	ldr	r0, [sp, #20]
   12020:	ldr	r1, [sp, #24]
   12024:	add	r9, r5, r6
   12028:	cmp	r2, #0
   1202c:	str	r7, [sp, #20]
   12030:	sub	r0, r0, r7
   12034:	add	r0, r1, r0
   12038:	str	r0, [sp, #24]
   1203c:	beq	120e0 <__assert_fail@plt+0x1058>
   12040:	ldr	r7, [r2]
   12044:	cmp	r7, #0
   12048:	beq	1205c <__assert_fail@plt+0xfd4>
   1204c:	cmp	r7, #8
   12050:	bne	12088 <__assert_fail@plt+0x1000>
   12054:	mov	r0, #0
   12058:	str	r0, [r2]
   1205c:	sub	r0, r9, r5
   12060:	mov	r7, #0
   12064:	cmp	r0, #8
   12068:	blt	12088 <__assert_fail@plt+0x1000>
   1206c:	mov	r0, r5
   12070:	mov	r1, #10
   12074:	mov	r2, #8
   12078:	bl	10fec <memchr@plt>
   1207c:	ldr	r2, [sp, #16]
   12080:	cmp	r0, #0
   12084:	beq	12148 <__assert_fail@plt+0x10c0>
   12088:	cmp	r6, #1
   1208c:	blt	120e8 <__assert_fail@plt+0x1060>
   12090:	mov	r6, r7
   12094:	mov	r0, r5
   12098:	ldrb	r1, [r5], #1
   1209c:	cmp	r1, #10
   120a0:	bne	120b0 <__assert_fail@plt+0x1028>
   120a4:	cmp	r5, r9
   120a8:	bcc	12094 <__assert_fail@plt+0x100c>
   120ac:	b	120d8 <__assert_fail@plt+0x1050>
   120b0:	add	r7, r6, #1
   120b4:	mov	r3, r2
   120b8:	add	r5, r0, #1
   120bc:	str	r7, [r3], r6
   120c0:	cmp	r5, r9
   120c4:	strb	r1, [r3, #4]
   120c8:	ldr	r6, [r2]
   120cc:	bcs	120d8 <__assert_fail@plt+0x1050>
   120d0:	cmp	r6, #8
   120d4:	bne	12094 <__assert_fail@plt+0x100c>
   120d8:	add	r5, r0, #1
   120dc:	b	120ec <__assert_fail@plt+0x1064>
   120e0:	mov	r0, r5
   120e4:	b	120f0 <__assert_fail@plt+0x1068>
   120e8:	mov	r6, r7
   120ec:	ldr	r0, [sp, #4]
   120f0:	mov	r1, #0
   120f4:	cmp	r6, #0
   120f8:	beq	12160 <__assert_fail@plt+0x10d8>
   120fc:	ldr	r3, [sp, #12]
   12100:	cmp	r6, #7
   12104:	mov	r2, #0
   12108:	movwgt	r2, #1
   1210c:	orr	r2, r8, r2
   12110:	orr	r2, r2, r3
   12114:	cmp	r2, #1
   12118:	bne	12160 <__assert_fail@plt+0x10d8>
   1211c:	mov	r1, r6
   12120:	mov	r2, sl
   12124:	mov	r3, r4
   12128:	bl	12188 <__assert_fail@plt+0x1100>
   1212c:	cmp	r0, #0
   12130:	mov	r1, r6
   12134:	beq	12160 <__assert_fail@plt+0x10d8>
   12138:	ldr	r7, [sp, #20]
   1213c:	ldr	r2, [sp, #16]
   12140:	sub	r6, r9, r5
   12144:	b	11fa8 <__assert_fail@plt+0xf20>
   12148:	add	r1, r5, #8
   1214c:	mov	r0, r5
   12150:	mov	r6, #8
   12154:	mov	r5, r1
   12158:	b	1211c <__assert_fail@plt+0x1094>
   1215c:	mov	r1, r6
   12160:	ldr	r0, [fp, #8]
   12164:	ldr	r2, [sp, #20]
   12168:	mov	r3, r0
   1216c:	ldr	r0, [r0]
   12170:	sub	r0, r0, r2
   12174:	str	r0, [r3]
   12178:	clz	r0, r1
   1217c:	lsr	r0, r0, #5
   12180:	sub	sp, fp, #28
   12184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12188:	push	{r4, r5, r6, sl, fp, lr}
   1218c:	add	fp, sp, #16
   12190:	mov	ip, #0
   12194:	cmp	r1, #8
   12198:	blt	12300 <__assert_fail@plt+0x1278>
   1219c:	ldrb	r1, [r0]
   121a0:	movw	lr, #30359	; 0x7697
   121a4:	movt	lr, #1
   121a8:	add	r1, lr, r1
   121ac:	ldrsb	r4, [r1]
   121b0:	cmp	r4, #0
   121b4:	bmi	12300 <__assert_fail@plt+0x1278>
   121b8:	ldrb	r1, [r0, #1]
   121bc:	add	r1, lr, r1
   121c0:	ldrsb	r1, [r1]
   121c4:	cmp	r1, #0
   121c8:	bmi	12300 <__assert_fail@plt+0x1278>
   121cc:	ldr	r5, [r3]
   121d0:	ldr	ip, [r2]
   121d4:	cmp	r5, #0
   121d8:	beq	121fc <__assert_fail@plt+0x1174>
   121dc:	uxtb	r5, r1
   121e0:	lsr	r5, r5, #2
   121e4:	orr	r4, r5, r4, lsl #3
   121e8:	strb	r4, [ip], #1
   121ec:	ldr	r4, [r3]
   121f0:	sub	r5, r4, #1
   121f4:	str	r5, [r3]
   121f8:	b	12200 <__assert_fail@plt+0x1178>
   121fc:	mov	r5, #0
   12200:	ldrb	r4, [r0, #2]
   12204:	cmp	r4, #61	; 0x3d
   12208:	bne	12228 <__assert_fail@plt+0x11a0>
   1220c:	ldrb	r1, [r0, #3]
   12210:	cmp	r1, #61	; 0x3d
   12214:	bne	123a0 <__assert_fail@plt+0x1318>
   12218:	ldrb	r1, [r0, #4]
   1221c:	cmp	r1, #61	; 0x3d
   12220:	beq	12288 <__assert_fail@plt+0x1200>
   12224:	b	123a0 <__assert_fail@plt+0x1318>
   12228:	add	r4, lr, r4
   1222c:	ldrsb	r6, [r4]
   12230:	cmp	r6, #0
   12234:	bmi	123a0 <__assert_fail@plt+0x1318>
   12238:	ldrb	r4, [r0, #3]
   1223c:	add	r4, lr, r4
   12240:	ldrsb	r4, [r4]
   12244:	cmn	r4, #1
   12248:	ble	123a0 <__assert_fail@plt+0x1318>
   1224c:	cmp	r5, #0
   12250:	beq	12278 <__assert_fail@plt+0x11f0>
   12254:	lsl	r5, r6, #1
   12258:	orr	r1, r5, r1, lsl #6
   1225c:	uxtb	r5, r4
   12260:	orr	r1, r1, r5, lsr #4
   12264:	strb	r1, [ip], #1
   12268:	ldr	r1, [r3]
   1226c:	sub	r5, r1, #1
   12270:	str	r5, [r3]
   12274:	b	1227c <__assert_fail@plt+0x11f4>
   12278:	mov	r5, #0
   1227c:	ldrb	r1, [r0, #4]
   12280:	cmp	r1, #61	; 0x3d
   12284:	bne	12298 <__assert_fail@plt+0x1210>
   12288:	ldrb	r1, [r0, #5]
   1228c:	cmp	r1, #61	; 0x3d
   12290:	beq	122e0 <__assert_fail@plt+0x1258>
   12294:	b	123a0 <__assert_fail@plt+0x1318>
   12298:	add	r1, lr, r1
   1229c:	ldrsb	r1, [r1]
   122a0:	cmn	r1, #1
   122a4:	ble	123a0 <__assert_fail@plt+0x1318>
   122a8:	cmp	r5, #0
   122ac:	beq	122d0 <__assert_fail@plt+0x1248>
   122b0:	uxtb	r5, r1
   122b4:	lsr	r5, r5, #1
   122b8:	orr	r4, r5, r4, lsl #4
   122bc:	strb	r4, [ip], #1
   122c0:	ldr	r4, [r3]
   122c4:	sub	r4, r4, #1
   122c8:	str	r4, [r3]
   122cc:	b	122d4 <__assert_fail@plt+0x124c>
   122d0:	mov	r4, #0
   122d4:	ldrb	r5, [r0, #5]
   122d8:	cmp	r5, #61	; 0x3d
   122dc:	bne	12308 <__assert_fail@plt+0x1280>
   122e0:	ldrb	r1, [r0, #6]
   122e4:	cmp	r1, #61	; 0x3d
   122e8:	bne	123a0 <__assert_fail@plt+0x1318>
   122ec:	ldrb	r0, [r0, #7]
   122f0:	cmp	r0, #61	; 0x3d
   122f4:	bne	123a0 <__assert_fail@plt+0x1318>
   122f8:	str	ip, [r2]
   122fc:	mov	ip, #1
   12300:	mov	r0, ip
   12304:	pop	{r4, r5, r6, sl, fp, pc}
   12308:	add	r5, lr, r5
   1230c:	ldrsb	r5, [r5]
   12310:	cmp	r5, #0
   12314:	bmi	123a0 <__assert_fail@plt+0x1318>
   12318:	ldrb	r6, [r0, #6]
   1231c:	add	r6, lr, r6
   12320:	ldrsb	r6, [r6]
   12324:	cmn	r6, #1
   12328:	ble	123a0 <__assert_fail@plt+0x1318>
   1232c:	cmp	r4, #0
   12330:	beq	12358 <__assert_fail@plt+0x12d0>
   12334:	uxtb	r4, r6
   12338:	lsr	r4, r4, #3
   1233c:	orr	r4, r4, r5, lsl #2
   12340:	orr	r1, r4, r1, lsl #7
   12344:	strb	r1, [ip], #1
   12348:	ldr	r1, [r3]
   1234c:	sub	r1, r1, #1
   12350:	str	r1, [r3]
   12354:	b	1235c <__assert_fail@plt+0x12d4>
   12358:	mov	r1, #0
   1235c:	ldrb	r4, [r0, #7]
   12360:	cmp	r4, #61	; 0x3d
   12364:	beq	122f8 <__assert_fail@plt+0x1270>
   12368:	add	r4, lr, r4
   1236c:	ldrsb	r4, [r4]
   12370:	cmn	r4, #1
   12374:	ble	123a0 <__assert_fail@plt+0x1318>
   12378:	cmp	r1, #0
   1237c:	beq	122f8 <__assert_fail@plt+0x1270>
   12380:	ldrb	r0, [r0, #6]
   12384:	ldrb	r0, [lr, r0]
   12388:	orr	r0, r4, r0, lsl #5
   1238c:	strb	r0, [ip], #1
   12390:	ldr	r0, [r3]
   12394:	sub	r0, r0, #1
   12398:	str	r0, [r3]
   1239c:	b	122f8 <__assert_fail@plt+0x1270>
   123a0:	str	ip, [r2]
   123a4:	mov	ip, #0
   123a8:	mov	r0, ip
   123ac:	pop	{r4, r5, r6, sl, fp, pc}
   123b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   123b4:	add	fp, sp, #24
   123b8:	sub	sp, sp, #8
   123bc:	mov	r7, r0
   123c0:	asr	r0, r2, #3
   123c4:	mov	r4, r3
   123c8:	mov	r6, r2
   123cc:	mov	r8, r1
   123d0:	add	r0, r0, r0, lsl #2
   123d4:	add	r0, r0, #5
   123d8:	str	r0, [sp, #4]
   123dc:	bl	16a98 <__assert_fail@plt+0x5a10>
   123e0:	mov	r5, #1
   123e4:	cmp	r0, #0
   123e8:	str	r0, [r4]
   123ec:	beq	12438 <__assert_fail@plt+0x13b0>
   123f0:	mov	r3, r0
   123f4:	add	r0, sp, #4
   123f8:	mov	r1, r8
   123fc:	mov	r2, r6
   12400:	str	r0, [sp]
   12404:	mov	r0, r7
   12408:	bl	11f24 <__assert_fail@plt+0xe9c>
   1240c:	cmp	r0, #0
   12410:	beq	12428 <__assert_fail@plt+0x13a0>
   12414:	ldr	r0, [fp, #8]
   12418:	cmp	r0, #0
   1241c:	ldrne	r1, [sp, #4]
   12420:	strne	r1, [r0]
   12424:	b	12438 <__assert_fail@plt+0x13b0>
   12428:	ldr	r0, [r4]
   1242c:	bl	12684 <__assert_fail@plt+0x15fc>
   12430:	mov	r5, #0
   12434:	str	r5, [r4]
   12438:	mov	r0, r5
   1243c:	sub	sp, fp, #24
   12440:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12444:	movw	r1, #33112	; 0x8158
   12448:	movt	r1, #2
   1244c:	str	r0, [r1]
   12450:	bx	lr
   12454:	movw	r1, #33116	; 0x815c
   12458:	movt	r1, #2
   1245c:	strb	r0, [r1]
   12460:	bx	lr
   12464:	push	{r4, r5, r6, sl, fp, lr}
   12468:	add	fp, sp, #16
   1246c:	sub	sp, sp, #8
   12470:	movw	r0, #33100	; 0x814c
   12474:	movt	r0, #2
   12478:	ldr	r0, [r0]
   1247c:	bl	16b1c <__assert_fail@plt+0x5a94>
   12480:	cmp	r0, #0
   12484:	beq	124ac <__assert_fail@plt+0x1424>
   12488:	movw	r0, #33116	; 0x815c
   1248c:	movt	r0, #2
   12490:	ldrb	r0, [r0]
   12494:	cmp	r0, #0
   12498:	beq	124cc <__assert_fail@plt+0x1444>
   1249c:	bl	10fa4 <__errno_location@plt>
   124a0:	ldr	r0, [r0]
   124a4:	cmp	r0, #32
   124a8:	bne	124cc <__assert_fail@plt+0x1444>
   124ac:	movw	r0, #33088	; 0x8140
   124b0:	movt	r0, #2
   124b4:	ldr	r0, [r0]
   124b8:	bl	16b1c <__assert_fail@plt+0x5a94>
   124bc:	cmp	r0, #0
   124c0:	subeq	sp, fp, #16
   124c4:	popeq	{r4, r5, r6, sl, fp, pc}
   124c8:	b	1253c <__assert_fail@plt+0x14b4>
   124cc:	movw	r1, #30108	; 0x759c
   124d0:	mov	r0, #0
   124d4:	mov	r2, #5
   124d8:	movt	r1, #1
   124dc:	bl	10eb4 <dcgettext@plt>
   124e0:	mov	r4, r0
   124e4:	movw	r0, #33112	; 0x8158
   124e8:	movt	r0, #2
   124ec:	ldr	r6, [r0]
   124f0:	bl	10fa4 <__errno_location@plt>
   124f4:	ldr	r5, [r0]
   124f8:	cmp	r6, #0
   124fc:	bne	12518 <__assert_fail@plt+0x1490>
   12500:	movw	r2, #29544	; 0x7368
   12504:	mov	r0, #0
   12508:	mov	r1, r5
   1250c:	mov	r3, r4
   12510:	movt	r2, #1
   12514:	b	12538 <__assert_fail@plt+0x14b0>
   12518:	mov	r0, r6
   1251c:	bl	14020 <__assert_fail@plt+0x2f98>
   12520:	movw	r2, #29540	; 0x7364
   12524:	mov	r3, r0
   12528:	str	r4, [sp]
   1252c:	mov	r0, #0
   12530:	mov	r1, r5
   12534:	movt	r2, #1
   12538:	bl	10f20 <error@plt>
   1253c:	movw	r0, #33004	; 0x80ec
   12540:	movt	r0, #2
   12544:	ldr	r0, [r0]
   12548:	bl	10e84 <_exit@plt>
   1254c:	b	10e54 <posix_fadvise64@plt>
   12550:	cmp	r0, #0
   12554:	bxeq	lr
   12558:	push	{r4, sl, fp, lr}
   1255c:	add	fp, sp, #8
   12560:	sub	sp, sp, #16
   12564:	mov	r4, r1
   12568:	bl	10fd4 <fileno@plt>
   1256c:	mov	r1, #0
   12570:	mov	r2, #0
   12574:	mov	r3, #0
   12578:	str	r1, [sp]
   1257c:	stmib	sp, {r1, r4}
   12580:	bl	10e54 <posix_fadvise64@plt>
   12584:	sub	sp, fp, #8
   12588:	pop	{r4, sl, fp, pc}
   1258c:	push	{r4, r5, r6, sl, fp, lr}
   12590:	add	fp, sp, #16
   12594:	sub	sp, sp, #8
   12598:	mov	r4, r0
   1259c:	bl	10fd4 <fileno@plt>
   125a0:	cmn	r0, #1
   125a4:	ble	12618 <__assert_fail@plt+0x1590>
   125a8:	mov	r0, r4
   125ac:	bl	10f44 <__freading@plt>
   125b0:	cmp	r0, #0
   125b4:	beq	125e0 <__assert_fail@plt+0x1558>
   125b8:	mov	r0, r4
   125bc:	bl	10fd4 <fileno@plt>
   125c0:	mov	r1, #1
   125c4:	mov	r2, #0
   125c8:	mov	r3, #0
   125cc:	str	r1, [sp]
   125d0:	bl	10ef0 <lseek64@plt>
   125d4:	and	r0, r0, r1
   125d8:	cmn	r0, #1
   125dc:	beq	12618 <__assert_fail@plt+0x1590>
   125e0:	mov	r0, r4
   125e4:	bl	12628 <__assert_fail@plt+0x15a0>
   125e8:	cmp	r0, #0
   125ec:	beq	12618 <__assert_fail@plt+0x1590>
   125f0:	bl	10fa4 <__errno_location@plt>
   125f4:	ldr	r6, [r0]
   125f8:	mov	r5, r0
   125fc:	mov	r0, r4
   12600:	bl	10ff8 <fclose@plt>
   12604:	cmp	r6, #0
   12608:	strne	r6, [r5]
   1260c:	mvnne	r0, #0
   12610:	sub	sp, fp, #16
   12614:	pop	{r4, r5, r6, sl, fp, pc}
   12618:	mov	r0, r4
   1261c:	sub	sp, fp, #16
   12620:	pop	{r4, r5, r6, sl, fp, lr}
   12624:	b	10ff8 <fclose@plt>
   12628:	push	{r4, sl, fp, lr}
   1262c:	add	fp, sp, #8
   12630:	sub	sp, sp, #8
   12634:	mov	r4, r0
   12638:	cmp	r0, #0
   1263c:	beq	12674 <__assert_fail@plt+0x15ec>
   12640:	mov	r0, r4
   12644:	bl	10f44 <__freading@plt>
   12648:	cmp	r0, #0
   1264c:	beq	12674 <__assert_fail@plt+0x15ec>
   12650:	ldrb	r0, [r4, #1]
   12654:	tst	r0, #1
   12658:	beq	12674 <__assert_fail@plt+0x15ec>
   1265c:	mov	r0, #1
   12660:	mov	r2, #0
   12664:	mov	r3, #0
   12668:	str	r0, [sp]
   1266c:	mov	r0, r4
   12670:	bl	126ac <__assert_fail@plt+0x1624>
   12674:	mov	r0, r4
   12678:	sub	sp, fp, #8
   1267c:	pop	{r4, sl, fp, lr}
   12680:	b	10e60 <fflush@plt>
   12684:	push	{r4, r5, r6, sl, fp, lr}
   12688:	add	fp, sp, #16
   1268c:	mov	r4, r0
   12690:	bl	10fa4 <__errno_location@plt>
   12694:	ldr	r6, [r0]
   12698:	mov	r5, r0
   1269c:	mov	r0, r4
   126a0:	bl	10e78 <free@plt>
   126a4:	str	r6, [r5]
   126a8:	pop	{r4, r5, r6, sl, fp, pc}
   126ac:	push	{r4, r5, r6, r7, fp, lr}
   126b0:	add	fp, sp, #16
   126b4:	sub	sp, sp, #8
   126b8:	mov	r4, r0
   126bc:	ldr	r0, [r0, #4]
   126c0:	mov	r5, r3
   126c4:	mov	r6, r2
   126c8:	ldr	r1, [r4, #8]
   126cc:	cmp	r1, r0
   126d0:	bne	126ec <__assert_fail@plt+0x1664>
   126d4:	ldrd	r0, [r4, #16]
   126d8:	cmp	r1, r0
   126dc:	bne	126ec <__assert_fail@plt+0x1664>
   126e0:	ldr	r0, [r4, #36]	; 0x24
   126e4:	cmp	r0, #0
   126e8:	beq	12704 <__assert_fail@plt+0x167c>
   126ec:	mov	r0, r4
   126f0:	mov	r2, r6
   126f4:	mov	r3, r5
   126f8:	sub	sp, fp, #16
   126fc:	pop	{r4, r5, r6, r7, fp, lr}
   12700:	b	11004 <fseeko64@plt>
   12704:	ldr	r7, [fp, #8]
   12708:	mov	r0, r4
   1270c:	bl	10fd4 <fileno@plt>
   12710:	mov	r2, r6
   12714:	mov	r3, r5
   12718:	str	r7, [sp]
   1271c:	bl	10ef0 <lseek64@plt>
   12720:	and	r2, r0, r1
   12724:	cmn	r2, #1
   12728:	beq	12748 <__assert_fail@plt+0x16c0>
   1272c:	strd	r0, [r4, #80]	; 0x50
   12730:	ldr	r0, [r4]
   12734:	bic	r0, r0, #16
   12738:	str	r0, [r4]
   1273c:	mov	r0, #0
   12740:	sub	sp, fp, #16
   12744:	pop	{r4, r5, r6, r7, fp, pc}
   12748:	mvn	r0, #0
   1274c:	sub	sp, fp, #16
   12750:	pop	{r4, r5, r6, r7, fp, pc}
   12754:	push	{r4, r5, fp, lr}
   12758:	add	fp, sp, #8
   1275c:	cmp	r0, #0
   12760:	beq	127f4 <__assert_fail@plt+0x176c>
   12764:	mov	r1, #47	; 0x2f
   12768:	mov	r4, r0
   1276c:	bl	11028 <strrchr@plt>
   12770:	cmp	r0, #0
   12774:	mov	r5, r4
   12778:	addne	r5, r0, #1
   1277c:	sub	r0, r5, r4
   12780:	cmp	r0, #7
   12784:	blt	127d8 <__assert_fail@plt+0x1750>
   12788:	movw	r1, #30671	; 0x77cf
   1278c:	sub	r0, r5, #7
   12790:	mov	r2, #7
   12794:	movt	r1, #1
   12798:	bl	11070 <strncmp@plt>
   1279c:	cmp	r0, #0
   127a0:	bne	127d8 <__assert_fail@plt+0x1750>
   127a4:	movw	r1, #30679	; 0x77d7
   127a8:	mov	r0, r5
   127ac:	mov	r2, #3
   127b0:	movt	r1, #1
   127b4:	bl	11070 <strncmp@plt>
   127b8:	cmp	r0, #0
   127bc:	beq	127c8 <__assert_fail@plt+0x1740>
   127c0:	mov	r4, r5
   127c4:	b	127d8 <__assert_fail@plt+0x1750>
   127c8:	movw	r0, #33072	; 0x8130
   127cc:	add	r4, r5, #3
   127d0:	movt	r0, #2
   127d4:	str	r4, [r0]
   127d8:	movw	r0, #33076	; 0x8134
   127dc:	movt	r0, #2
   127e0:	str	r4, [r0]
   127e4:	movw	r0, #33120	; 0x8160
   127e8:	movt	r0, #2
   127ec:	str	r4, [r0]
   127f0:	pop	{r4, r5, fp, pc}
   127f4:	movw	r0, #33088	; 0x8140
   127f8:	mov	r1, #55	; 0x37
   127fc:	mov	r2, #1
   12800:	movt	r0, #2
   12804:	ldr	r3, [r0]
   12808:	movw	r0, #30615	; 0x7797
   1280c:	movt	r0, #1
   12810:	bl	10ee4 <fwrite@plt>
   12814:	bl	1107c <abort@plt>
   12818:	push	{r4, r5, r6, sl, fp, lr}
   1281c:	add	fp, sp, #16
   12820:	mov	r4, r0
   12824:	movw	r0, #33128	; 0x8168
   12828:	movt	r0, #2
   1282c:	cmp	r4, #0
   12830:	moveq	r4, r0
   12834:	bl	10fa4 <__errno_location@plt>
   12838:	ldr	r6, [r0]
   1283c:	mov	r5, r0
   12840:	mov	r0, r4
   12844:	mov	r1, #48	; 0x30
   12848:	bl	1500c <__assert_fail@plt+0x3f84>
   1284c:	str	r6, [r5]
   12850:	pop	{r4, r5, r6, sl, fp, pc}
   12854:	movw	r1, #33128	; 0x8168
   12858:	cmp	r0, #0
   1285c:	movt	r1, #2
   12860:	movne	r1, r0
   12864:	ldr	r0, [r1]
   12868:	bx	lr
   1286c:	movw	r2, #33128	; 0x8168
   12870:	cmp	r0, #0
   12874:	movt	r2, #2
   12878:	movne	r2, r0
   1287c:	str	r1, [r2]
   12880:	bx	lr
   12884:	movw	r3, #33128	; 0x8168
   12888:	cmp	r0, #0
   1288c:	and	r2, r2, #1
   12890:	movt	r3, #2
   12894:	movne	r3, r0
   12898:	ubfx	r0, r1, #5, #3
   1289c:	and	r1, r1, #31
   128a0:	add	ip, r3, r0, lsl #2
   128a4:	mov	r0, #1
   128a8:	ldr	r3, [ip, #8]
   128ac:	and	r0, r0, r3, lsr r1
   128b0:	eor	r2, r0, r2
   128b4:	eor	r1, r3, r2, lsl r1
   128b8:	str	r1, [ip, #8]
   128bc:	bx	lr
   128c0:	movw	r2, #33128	; 0x8168
   128c4:	cmp	r0, #0
   128c8:	movt	r2, #2
   128cc:	movne	r2, r0
   128d0:	ldr	r0, [r2, #4]
   128d4:	str	r1, [r2, #4]
   128d8:	bx	lr
   128dc:	push	{fp, lr}
   128e0:	mov	fp, sp
   128e4:	movw	r3, #33128	; 0x8168
   128e8:	cmp	r0, #0
   128ec:	movt	r3, #2
   128f0:	movne	r3, r0
   128f4:	cmp	r1, #0
   128f8:	mov	r0, #10
   128fc:	cmpne	r2, #0
   12900:	str	r0, [r3]
   12904:	bne	1290c <__assert_fail@plt+0x1884>
   12908:	bl	1107c <abort@plt>
   1290c:	str	r1, [r3, #40]	; 0x28
   12910:	str	r2, [r3, #44]	; 0x2c
   12914:	pop	{fp, pc}
   12918:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1291c:	add	fp, sp, #28
   12920:	sub	sp, sp, #20
   12924:	mov	r7, r0
   12928:	ldr	r0, [fp, #8]
   1292c:	movw	r5, #33128	; 0x8168
   12930:	mov	r8, r3
   12934:	mov	r9, r2
   12938:	mov	sl, r1
   1293c:	movt	r5, #2
   12940:	cmp	r0, #0
   12944:	movne	r5, r0
   12948:	bl	10fa4 <__errno_location@plt>
   1294c:	ldr	r2, [r5, #40]	; 0x28
   12950:	ldr	r3, [r5, #44]	; 0x2c
   12954:	mov	r4, r0
   12958:	ldm	r5, {r0, r1}
   1295c:	add	r5, r5, #8
   12960:	ldr	r6, [r4]
   12964:	stm	sp, {r0, r1, r5}
   12968:	mov	r0, r7
   1296c:	mov	r1, sl
   12970:	str	r2, [sp, #12]
   12974:	str	r3, [sp, #16]
   12978:	mov	r2, r9
   1297c:	mov	r3, r8
   12980:	bl	12990 <__assert_fail@plt+0x1908>
   12984:	str	r6, [r4]
   12988:	sub	sp, fp, #28
   1298c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12994:	add	fp, sp, #28
   12998:	sub	sp, sp, #156	; 0x9c
   1299c:	mov	r5, r0
   129a0:	add	r0, r2, #1
   129a4:	mov	r6, r1
   129a8:	mov	sl, r3
   129ac:	str	r2, [fp, #-80]	; 0xffffffb0
   129b0:	str	r0, [sp, #72]	; 0x48
   129b4:	ldr	r0, [fp, #12]
   129b8:	and	r1, r0, #1
   129bc:	str	r1, [sp, #36]	; 0x24
   129c0:	and	r1, r0, #4
   129c4:	str	r1, [sp, #32]
   129c8:	ubfx	r9, r0, #1, #1
   129cc:	bl	10efc <__ctype_get_mb_cur_max@plt>
   129d0:	str	r0, [sp, #40]	; 0x28
   129d4:	ldr	r0, [fp, #24]
   129d8:	ldr	r7, [fp, #8]
   129dc:	mov	r1, #0
   129e0:	str	r5, [fp, #-84]	; 0xffffffac
   129e4:	str	r1, [fp, #-56]	; 0xffffffc8
   129e8:	mov	r1, #0
   129ec:	str	r1, [sp, #60]	; 0x3c
   129f0:	mov	r1, #1
   129f4:	str	r1, [fp, #-48]	; 0xffffffd0
   129f8:	str	r0, [sp, #80]	; 0x50
   129fc:	ldr	r0, [fp, #20]
   12a00:	str	r0, [sp, #76]	; 0x4c
   12a04:	mov	r0, #0
   12a08:	str	r0, [sp, #56]	; 0x38
   12a0c:	mov	r0, #0
   12a10:	str	r0, [fp, #-88]	; 0xffffffa8
   12a14:	mov	r0, #0
   12a18:	str	r0, [fp, #-72]	; 0xffffffb8
   12a1c:	mov	r0, #0
   12a20:	cmp	r7, #10
   12a24:	bhi	139b8 <__assert_fail@plt+0x2930>
   12a28:	add	r1, pc, #24
   12a2c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12a30:	mov	r4, r6
   12a34:	mov	r8, #0
   12a38:	mov	r2, #1
   12a3c:	mov	r3, #0
   12a40:	mov	lr, sl
   12a44:	ldr	pc, [r1, r7, lsl #2]
   12a48:	andeq	r2, r1, ip, lsl #22
   12a4c:	andeq	r2, r1, r0, ror #22
   12a50:	andeq	r2, r1, r0, lsr #22
   12a54:	andeq	r2, r1, r4, lsl #22
   12a58:	andeq	r2, r1, r4, asr fp
   12a5c:	andeq	r2, r1, r8, lsl #23
   12a60:	andeq	r2, r1, r0, lsr fp
   12a64:	andeq	r2, r1, ip, lsl #24
   12a68:	andeq	r2, r1, r4, ror sl
   12a6c:	andeq	r2, r1, r4, ror sl
   12a70:	muleq	r1, ip, sl
   12a74:	movw	r0, #30761	; 0x7829
   12a78:	mov	r1, r7
   12a7c:	movt	r0, #1
   12a80:	bl	143c0 <__assert_fail@plt+0x3338>
   12a84:	str	r0, [sp, #76]	; 0x4c
   12a88:	movw	r0, #30763	; 0x782b
   12a8c:	mov	r1, r7
   12a90:	movt	r0, #1
   12a94:	bl	143c0 <__assert_fail@plt+0x3338>
   12a98:	str	r0, [sp, #80]	; 0x50
   12a9c:	mov	r8, #0
   12aa0:	tst	r9, #1
   12aa4:	bne	12adc <__assert_fail@plt+0x1a54>
   12aa8:	ldr	r0, [sp, #76]	; 0x4c
   12aac:	ldrb	r0, [r0]
   12ab0:	cmp	r0, #0
   12ab4:	beq	12adc <__assert_fail@plt+0x1a54>
   12ab8:	ldr	r1, [sp, #76]	; 0x4c
   12abc:	mov	r8, #0
   12ac0:	add	r1, r1, #1
   12ac4:	cmp	r8, r4
   12ac8:	strbcc	r0, [r5, r8]
   12acc:	ldrb	r0, [r1, r8]
   12ad0:	add	r8, r8, #1
   12ad4:	cmp	r0, #0
   12ad8:	bne	12ac4 <__assert_fail@plt+0x1a3c>
   12adc:	ldr	r6, [sp, #80]	; 0x50
   12ae0:	mov	r0, r6
   12ae4:	bl	10f8c <strlen@plt>
   12ae8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12aec:	str	r0, [fp, #-72]	; 0xffffffb8
   12af0:	str	r6, [fp, #-88]	; 0xffffffa8
   12af4:	mov	r2, #1
   12af8:	mov	r3, r9
   12afc:	mov	lr, sl
   12b00:	b	12c0c <__assert_fail@plt+0x1b84>
   12b04:	mov	r0, #1
   12b08:	b	12b60 <__assert_fail@plt+0x1ad8>
   12b0c:	mov	r7, #0
   12b10:	mov	r8, #0
   12b14:	mov	r2, r0
   12b18:	mov	r3, #0
   12b1c:	b	12c0c <__assert_fail@plt+0x1b84>
   12b20:	tst	r9, #1
   12b24:	bne	12b60 <__assert_fail@plt+0x1ad8>
   12b28:	mov	r2, r0
   12b2c:	b	12bb8 <__assert_fail@plt+0x1b30>
   12b30:	mov	r0, #1
   12b34:	mov	r8, #0
   12b38:	mov	r7, #5
   12b3c:	mov	r2, #1
   12b40:	str	r0, [fp, #-72]	; 0xffffffb8
   12b44:	movw	r0, #30759	; 0x7827
   12b48:	movt	r0, #1
   12b4c:	str	r0, [fp, #-88]	; 0xffffffa8
   12b50:	b	12b80 <__assert_fail@plt+0x1af8>
   12b54:	mov	r2, #1
   12b58:	tst	r9, #1
   12b5c:	beq	12bb8 <__assert_fail@plt+0x1b30>
   12b60:	mov	r1, #1
   12b64:	mov	r8, #0
   12b68:	mov	r7, #2
   12b6c:	mov	r2, r0
   12b70:	str	r1, [fp, #-72]	; 0xffffffb8
   12b74:	movw	r1, #30763	; 0x782b
   12b78:	movt	r1, #1
   12b7c:	str	r1, [fp, #-88]	; 0xffffffa8
   12b80:	mov	r3, #1
   12b84:	b	12c0c <__assert_fail@plt+0x1b84>
   12b88:	tst	r9, #1
   12b8c:	beq	12bdc <__assert_fail@plt+0x1b54>
   12b90:	mov	r0, #1
   12b94:	mov	r8, #0
   12b98:	mov	r2, #1
   12b9c:	mov	r3, #1
   12ba0:	mov	r7, #5
   12ba4:	str	r0, [fp, #-72]	; 0xffffffb8
   12ba8:	movw	r0, #30759	; 0x7827
   12bac:	movt	r0, #1
   12bb0:	str	r0, [fp, #-88]	; 0xffffffa8
   12bb4:	b	12c0c <__assert_fail@plt+0x1b84>
   12bb8:	cmp	r4, #0
   12bbc:	mov	r8, #1
   12bc0:	mov	r3, #0
   12bc4:	mov	r7, #2
   12bc8:	movne	r0, #39	; 0x27
   12bcc:	strbne	r0, [r5]
   12bd0:	movw	r0, #30763	; 0x782b
   12bd4:	movt	r0, #1
   12bd8:	b	12c00 <__assert_fail@plt+0x1b78>
   12bdc:	cmp	r4, #0
   12be0:	mov	r8, #1
   12be4:	mov	r2, #1
   12be8:	mov	r7, #5
   12bec:	mov	r3, #0
   12bf0:	movne	r0, #34	; 0x22
   12bf4:	strbne	r0, [r5]
   12bf8:	movw	r0, #30759	; 0x7827
   12bfc:	movt	r0, #1
   12c00:	str	r0, [fp, #-88]	; 0xffffffa8
   12c04:	mov	r0, #1
   12c08:	str	r0, [fp, #-72]	; 0xffffffb8
   12c0c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12c10:	eor	r6, r3, #1
   12c14:	str	r7, [fp, #-68]	; 0xffffffbc
   12c18:	str	r3, [fp, #-76]	; 0xffffffb4
   12c1c:	str	r2, [sp, #84]	; 0x54
   12c20:	str	r6, [sp, #92]	; 0x5c
   12c24:	cmp	r0, #0
   12c28:	movwne	r0, #1
   12c2c:	and	r1, r0, r3
   12c30:	and	r1, r2, r1
   12c34:	str	r1, [sp, #48]	; 0x30
   12c38:	sub	r1, r7, #2
   12c3c:	clz	r1, r1
   12c40:	lsr	r1, r1, #5
   12c44:	and	r1, r1, r3
   12c48:	str	r1, [sp, #64]	; 0x40
   12c4c:	subs	r1, r7, #2
   12c50:	mov	r7, #0
   12c54:	movwne	r1, #1
   12c58:	orr	r6, r1, r6
   12c5c:	and	r1, r1, r2
   12c60:	and	r0, r0, r1
   12c64:	str	r6, [sp, #68]	; 0x44
   12c68:	str	r0, [fp, #-60]	; 0xffffffc4
   12c6c:	orr	r0, r1, r3
   12c70:	ldr	r1, [fp, #16]
   12c74:	eor	r0, r0, #1
   12c78:	clz	r1, r1
   12c7c:	lsr	r1, r1, #5
   12c80:	orr	r0, r1, r0
   12c84:	str	r0, [fp, #-64]	; 0xffffffc0
   12c88:	eor	r0, r2, #1
   12c8c:	str	r0, [sp, #52]	; 0x34
   12c90:	cmn	lr, #1
   12c94:	beq	12ca4 <__assert_fail@plt+0x1c1c>
   12c98:	cmp	r7, lr
   12c9c:	bne	12cb0 <__assert_fail@plt+0x1c28>
   12ca0:	b	137f8 <__assert_fail@plt+0x2770>
   12ca4:	ldrb	r0, [ip, r7]
   12ca8:	cmp	r0, #0
   12cac:	beq	13800 <__assert_fail@plt+0x2778>
   12cb0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12cb4:	mov	sl, #0
   12cb8:	cmp	r0, #0
   12cbc:	beq	12cf4 <__assert_fail@plt+0x1c6c>
   12cc0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12cc4:	add	r5, r7, r0
   12cc8:	cmp	r0, #2
   12ccc:	bcc	12ce8 <__assert_fail@plt+0x1c60>
   12cd0:	cmn	lr, #1
   12cd4:	bne	12ce8 <__assert_fail@plt+0x1c60>
   12cd8:	mov	r0, ip
   12cdc:	bl	10f8c <strlen@plt>
   12ce0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12ce4:	mov	lr, r0
   12ce8:	cmp	r5, lr
   12cec:	bls	12cfc <__assert_fail@plt+0x1c74>
   12cf0:	ldr	r5, [fp, #-84]	; 0xffffffac
   12cf4:	mov	r0, #0
   12cf8:	b	12d48 <__assert_fail@plt+0x1cc0>
   12cfc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12d00:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12d04:	add	r0, ip, r7
   12d08:	mov	r6, r4
   12d0c:	mov	r4, lr
   12d10:	bl	10f80 <bcmp@plt>
   12d14:	ldr	r2, [sp, #92]	; 0x5c
   12d18:	cmp	r0, #0
   12d1c:	ldr	r5, [fp, #-84]	; 0xffffffac
   12d20:	mov	r1, r0
   12d24:	movwne	r1, #1
   12d28:	orr	r1, r1, r2
   12d2c:	tst	r1, #1
   12d30:	beq	13888 <__assert_fail@plt+0x2800>
   12d34:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12d38:	clz	r0, r0
   12d3c:	mov	lr, r4
   12d40:	mov	r4, r6
   12d44:	lsr	r0, r0, #5
   12d48:	str	r0, [fp, #-52]	; 0xffffffcc
   12d4c:	ldrb	r6, [ip, r7]
   12d50:	cmp	r6, #126	; 0x7e
   12d54:	bhi	13284 <__assert_fail@plt+0x21fc>
   12d58:	add	r3, pc, #16
   12d5c:	mov	r9, #1
   12d60:	mov	r2, #110	; 0x6e
   12d64:	mov	r0, #97	; 0x61
   12d68:	mov	r1, #0
   12d6c:	ldr	pc, [r3, r6, lsl #2]
   12d70:	andeq	r3, r1, r4, ror #1
   12d74:	andeq	r3, r1, r4, lsl #5
   12d78:	andeq	r3, r1, r4, lsl #5
   12d7c:	andeq	r3, r1, r4, lsl #5
   12d80:	andeq	r3, r1, r4, lsl #5
   12d84:	andeq	r3, r1, r4, lsl #5
   12d88:	andeq	r3, r1, r4, lsl #5
   12d8c:	andeq	r3, r1, r0, ror #6
   12d90:	andeq	r3, r1, r4, asr #1
   12d94:	strheq	r3, [r1], -ip
   12d98:	ldrdeq	r3, [r1], -r0
   12d9c:	andeq	r3, r1, ip, ror #3
   12da0:	strheq	r3, [r1], -r4
   12da4:	andeq	r3, r1, ip, asr #1
   12da8:	andeq	r3, r1, r4, lsl #5
   12dac:	andeq	r3, r1, r4, lsl #5
   12db0:	andeq	r3, r1, r4, lsl #5
   12db4:	andeq	r3, r1, r4, lsl #5
   12db8:	andeq	r3, r1, r4, lsl #5
   12dbc:	andeq	r3, r1, r4, lsl #5
   12dc0:	andeq	r3, r1, r4, lsl #5
   12dc4:	andeq	r3, r1, r4, lsl #5
   12dc8:	andeq	r3, r1, r4, lsl #5
   12dcc:	andeq	r3, r1, r4, lsl #5
   12dd0:	andeq	r3, r1, r4, lsl #5
   12dd4:	andeq	r3, r1, r4, lsl #5
   12dd8:	andeq	r3, r1, r4, lsl #5
   12ddc:	andeq	r3, r1, r4, lsl #5
   12de0:	andeq	r3, r1, r4, lsl #5
   12de4:	andeq	r3, r1, r4, lsl #5
   12de8:	andeq	r3, r1, r4, lsl #5
   12dec:	andeq	r3, r1, r4, lsl #5
   12df0:	andeq	r3, r1, r8, rrx
   12df4:	andeq	r3, r1, ip, rrx
   12df8:	andeq	r3, r1, ip, rrx
   12dfc:	andeq	r3, r1, r4, asr r0
   12e00:	andeq	r3, r1, ip, rrx
   12e04:	andeq	r2, r1, ip, ror #30
   12e08:	andeq	r3, r1, ip, rrx
   12e0c:	strdeq	r3, [r1], -r4
   12e10:	andeq	r3, r1, ip, rrx
   12e14:	andeq	r3, r1, ip, rrx
   12e18:	andeq	r3, r1, ip, rrx
   12e1c:	andeq	r2, r1, ip, ror #30
   12e20:	andeq	r2, r1, ip, ror #30
   12e24:	andeq	r2, r1, ip, ror #30
   12e28:	andeq	r2, r1, ip, ror #30
   12e2c:	andeq	r2, r1, ip, ror #30
   12e30:	andeq	r2, r1, ip, ror #30
   12e34:	andeq	r2, r1, ip, ror #30
   12e38:	andeq	r2, r1, ip, ror #30
   12e3c:	andeq	r2, r1, ip, ror #30
   12e40:	andeq	r2, r1, ip, ror #30
   12e44:	andeq	r2, r1, ip, ror #30
   12e48:	andeq	r2, r1, ip, ror #30
   12e4c:	andeq	r2, r1, ip, ror #30
   12e50:	andeq	r2, r1, ip, ror #30
   12e54:	andeq	r2, r1, ip, ror #30
   12e58:	andeq	r2, r1, ip, ror #30
   12e5c:	andeq	r3, r1, ip, rrx
   12e60:	andeq	r3, r1, ip, rrx
   12e64:	andeq	r3, r1, ip, rrx
   12e68:	andeq	r3, r1, ip, rrx
   12e6c:			; <UNDEFINED> instruction: 0x000131bc
   12e70:	andeq	r3, r1, r4, lsl #5
   12e74:	andeq	r2, r1, ip, ror #30
   12e78:	andeq	r2, r1, ip, ror #30
   12e7c:	andeq	r2, r1, ip, ror #30
   12e80:	andeq	r2, r1, ip, ror #30
   12e84:	andeq	r2, r1, ip, ror #30
   12e88:	andeq	r2, r1, ip, ror #30
   12e8c:	andeq	r2, r1, ip, ror #30
   12e90:	andeq	r2, r1, ip, ror #30
   12e94:	andeq	r2, r1, ip, ror #30
   12e98:	andeq	r2, r1, ip, ror #30
   12e9c:	andeq	r2, r1, ip, ror #30
   12ea0:	andeq	r2, r1, ip, ror #30
   12ea4:	andeq	r2, r1, ip, ror #30
   12ea8:	andeq	r2, r1, ip, ror #30
   12eac:	andeq	r2, r1, ip, ror #30
   12eb0:	andeq	r2, r1, ip, ror #30
   12eb4:	andeq	r2, r1, ip, ror #30
   12eb8:	andeq	r2, r1, ip, ror #30
   12ebc:	andeq	r2, r1, ip, ror #30
   12ec0:	andeq	r2, r1, ip, ror #30
   12ec4:	andeq	r2, r1, ip, ror #30
   12ec8:	andeq	r2, r1, ip, ror #30
   12ecc:	andeq	r2, r1, ip, ror #30
   12ed0:	andeq	r2, r1, ip, ror #30
   12ed4:	andeq	r2, r1, ip, ror #30
   12ed8:	andeq	r2, r1, ip, ror #30
   12edc:	andeq	r3, r1, ip, rrx
   12ee0:	muleq	r1, r4, r0
   12ee4:	andeq	r2, r1, ip, ror #30
   12ee8:	andeq	r3, r1, ip, rrx
   12eec:	andeq	r2, r1, ip, ror #30
   12ef0:	andeq	r3, r1, ip, rrx
   12ef4:	andeq	r2, r1, ip, ror #30
   12ef8:	andeq	r2, r1, ip, ror #30
   12efc:	andeq	r2, r1, ip, ror #30
   12f00:	andeq	r2, r1, ip, ror #30
   12f04:	andeq	r2, r1, ip, ror #30
   12f08:	andeq	r2, r1, ip, ror #30
   12f0c:	andeq	r2, r1, ip, ror #30
   12f10:	andeq	r2, r1, ip, ror #30
   12f14:	andeq	r2, r1, ip, ror #30
   12f18:	andeq	r2, r1, ip, ror #30
   12f1c:	andeq	r2, r1, ip, ror #30
   12f20:	andeq	r2, r1, ip, ror #30
   12f24:	andeq	r2, r1, ip, ror #30
   12f28:	andeq	r2, r1, ip, ror #30
   12f2c:	andeq	r2, r1, ip, ror #30
   12f30:	andeq	r2, r1, ip, ror #30
   12f34:	andeq	r2, r1, ip, ror #30
   12f38:	andeq	r2, r1, ip, ror #30
   12f3c:	andeq	r2, r1, ip, ror #30
   12f40:	andeq	r2, r1, ip, ror #30
   12f44:	andeq	r2, r1, ip, ror #30
   12f48:	andeq	r2, r1, ip, ror #30
   12f4c:	andeq	r2, r1, ip, ror #30
   12f50:	andeq	r2, r1, ip, ror #30
   12f54:	andeq	r2, r1, ip, ror #30
   12f58:	andeq	r2, r1, ip, ror #30
   12f5c:	andeq	r3, r1, r8, lsr #32
   12f60:	andeq	r3, r1, ip, rrx
   12f64:	andeq	r3, r1, r8, lsr #32
   12f68:	andeq	r3, r1, r4, asr r0
   12f6c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12f70:	tst	r0, #1
   12f74:	bne	12fa0 <__assert_fail@plt+0x1f18>
   12f78:	ldr	r1, [fp, #16]
   12f7c:	ubfx	r0, r6, #5, #3
   12f80:	mov	r2, #1
   12f84:	ldr	r0, [r1, r0, lsl #2]
   12f88:	and	r1, r6, #31
   12f8c:	tst	r0, r2, lsl r1
   12f90:	beq	12fa0 <__assert_fail@plt+0x1f18>
   12f94:	mov	r0, r6
   12f98:	mov	r1, r9
   12f9c:	b	12fb4 <__assert_fail@plt+0x1f2c>
   12fa0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12fa4:	mov	r1, r9
   12fa8:	cmp	r0, #0
   12fac:	mov	r0, r6
   12fb0:	beq	132f4 <__assert_fail@plt+0x226c>
   12fb4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12fb8:	tst	r2, #1
   12fbc:	bne	138c4 <__assert_fail@plt+0x283c>
   12fc0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12fc4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12fc8:	subs	r2, r2, #2
   12fcc:	movwne	r2, #1
   12fd0:	orr	r2, r2, r3
   12fd4:	tst	r2, #1
   12fd8:	bne	13014 <__assert_fail@plt+0x1f8c>
   12fdc:	cmp	r8, r4
   12fe0:	movcc	r2, #39	; 0x27
   12fe4:	strbcc	r2, [r5, r8]
   12fe8:	add	r2, r8, #1
   12fec:	cmp	r2, r4
   12ff0:	movcc	r3, #36	; 0x24
   12ff4:	strbcc	r3, [r5, r2]
   12ff8:	add	r2, r8, #2
   12ffc:	add	r8, r8, #3
   13000:	cmp	r2, r4
   13004:	movcc	r3, #39	; 0x27
   13008:	strbcc	r3, [r5, r2]
   1300c:	mov	r2, #1
   13010:	str	r2, [fp, #-56]	; 0xffffffc8
   13014:	cmp	r8, r4
   13018:	movcc	r2, #92	; 0x5c
   1301c:	strbcc	r2, [r5, r8]
   13020:	add	r8, r8, #1
   13024:	b	13338 <__assert_fail@plt+0x22b0>
   13028:	cmp	lr, #1
   1302c:	beq	13054 <__assert_fail@plt+0x1fcc>
   13030:	mov	r9, #0
   13034:	cmn	lr, #1
   13038:	bne	13060 <__assert_fail@plt+0x1fd8>
   1303c:	ldrb	r0, [ip, #1]
   13040:	cmp	r0, #0
   13044:	beq	13054 <__assert_fail@plt+0x1fcc>
   13048:	mvn	lr, #0
   1304c:	mov	sl, #0
   13050:	b	12f6c <__assert_fail@plt+0x1ee4>
   13054:	mov	r9, #0
   13058:	cmp	r7, #0
   1305c:	beq	13068 <__assert_fail@plt+0x1fe0>
   13060:	mov	sl, #0
   13064:	b	12f6c <__assert_fail@plt+0x1ee4>
   13068:	mov	r1, #1
   1306c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13070:	cmp	r0, #2
   13074:	bne	1308c <__assert_fail@plt+0x2004>
   13078:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1307c:	mov	r9, r1
   13080:	tst	r0, #1
   13084:	beq	12f6c <__assert_fail@plt+0x1ee4>
   13088:	b	138c4 <__assert_fail@plt+0x283c>
   1308c:	mov	r9, r1
   13090:	b	12f6c <__assert_fail@plt+0x1ee4>
   13094:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13098:	cmp	r0, #2
   1309c:	bne	132d8 <__assert_fail@plt+0x2250>
   130a0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   130a4:	tst	r0, #1
   130a8:	bne	138c4 <__assert_fail@plt+0x283c>
   130ac:	mov	sl, #0
   130b0:	b	132ec <__assert_fail@plt+0x2264>
   130b4:	mov	r0, #102	; 0x66
   130b8:	b	13360 <__assert_fail@plt+0x22d8>
   130bc:	mov	r2, #116	; 0x74
   130c0:	b	130d0 <__assert_fail@plt+0x2048>
   130c4:	mov	r0, #98	; 0x62
   130c8:	b	13360 <__assert_fail@plt+0x22d8>
   130cc:	mov	r2, #114	; 0x72
   130d0:	ldr	r0, [sp, #68]	; 0x44
   130d4:	tst	r0, #1
   130d8:	mov	r0, r2
   130dc:	bne	13360 <__assert_fail@plt+0x22d8>
   130e0:	b	138c4 <__assert_fail@plt+0x283c>
   130e4:	ldr	r0, [sp, #84]	; 0x54
   130e8:	tst	r0, #1
   130ec:	beq	1337c <__assert_fail@plt+0x22f4>
   130f0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   130f4:	tst	r0, #1
   130f8:	bne	139b0 <__assert_fail@plt+0x2928>
   130fc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13100:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13104:	subs	r0, r0, #2
   13108:	movwne	r0, #1
   1310c:	orr	r0, r0, r1
   13110:	tst	r0, #1
   13114:	bne	13150 <__assert_fail@plt+0x20c8>
   13118:	cmp	r8, r4
   1311c:	movcc	r0, #39	; 0x27
   13120:	strbcc	r0, [r5, r8]
   13124:	add	r0, r8, #1
   13128:	cmp	r0, r4
   1312c:	movcc	r1, #36	; 0x24
   13130:	strbcc	r1, [r5, r0]
   13134:	add	r0, r8, #2
   13138:	add	r8, r8, #3
   1313c:	cmp	r0, r4
   13140:	movcc	r1, #39	; 0x27
   13144:	strbcc	r1, [r5, r0]
   13148:	mov	r0, #1
   1314c:	str	r0, [fp, #-56]	; 0xffffffc8
   13150:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13154:	cmp	r8, r4
   13158:	mov	r9, #0
   1315c:	mov	sl, #1
   13160:	mov	r6, #48	; 0x30
   13164:	movcc	r0, #92	; 0x5c
   13168:	strbcc	r0, [r5, r8]
   1316c:	add	r0, r8, #1
   13170:	cmp	r1, #2
   13174:	beq	13544 <__assert_fail@plt+0x24bc>
   13178:	add	r1, r7, #1
   1317c:	cmp	r1, lr
   13180:	bcs	13544 <__assert_fail@plt+0x24bc>
   13184:	ldrb	r1, [ip, r1]
   13188:	sub	r1, r1, #48	; 0x30
   1318c:	uxtb	r1, r1
   13190:	cmp	r1, #9
   13194:	bhi	13544 <__assert_fail@plt+0x24bc>
   13198:	cmp	r0, r4
   1319c:	movcc	r1, #48	; 0x30
   131a0:	strbcc	r1, [r5, r0]
   131a4:	add	r0, r8, #2
   131a8:	add	r8, r8, #3
   131ac:	cmp	r0, r4
   131b0:	movcc	r1, #48	; 0x30
   131b4:	strbcc	r1, [r5, r0]
   131b8:	b	12f6c <__assert_fail@plt+0x1ee4>
   131bc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   131c0:	mov	sl, #0
   131c4:	mov	r6, #63	; 0x3f
   131c8:	cmp	r0, #5
   131cc:	beq	1354c <__assert_fail@plt+0x24c4>
   131d0:	cmp	r0, #2
   131d4:	bne	135f4 <__assert_fail@plt+0x256c>
   131d8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   131dc:	mov	r9, #0
   131e0:	tst	r0, #1
   131e4:	beq	12f6c <__assert_fail@plt+0x1ee4>
   131e8:	b	138c4 <__assert_fail@plt+0x283c>
   131ec:	mov	r0, #118	; 0x76
   131f0:	b	13360 <__assert_fail@plt+0x22d8>
   131f4:	mov	r0, #1
   131f8:	mov	r6, #39	; 0x27
   131fc:	str	r0, [sp, #60]	; 0x3c
   13200:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13204:	cmp	r0, #2
   13208:	bne	13398 <__assert_fail@plt+0x2310>
   1320c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13210:	tst	r0, #1
   13214:	bne	138c4 <__assert_fail@plt+0x283c>
   13218:	ldr	r2, [sp, #56]	; 0x38
   1321c:	clz	r1, r4
   13220:	mov	sl, #0
   13224:	mov	r9, #1
   13228:	lsr	r1, r1, #5
   1322c:	cmp	r2, #0
   13230:	mov	r0, r2
   13234:	movwne	r0, #1
   13238:	orrs	r0, r0, r1
   1323c:	moveq	r2, r4
   13240:	moveq	r4, r0
   13244:	cmp	r8, r4
   13248:	str	r2, [sp, #56]	; 0x38
   1324c:	movcc	r0, #39	; 0x27
   13250:	strbcc	r0, [r5, r8]
   13254:	add	r0, r8, #1
   13258:	cmp	r0, r4
   1325c:	movcc	r1, #92	; 0x5c
   13260:	strbcc	r1, [r5, r0]
   13264:	add	r0, r8, #2
   13268:	add	r8, r8, #3
   1326c:	cmp	r0, r4
   13270:	movcc	r1, #39	; 0x27
   13274:	strbcc	r1, [r5, r0]
   13278:	mov	r0, #0
   1327c:	str	r0, [fp, #-56]	; 0xffffffc8
   13280:	b	12f6c <__assert_fail@plt+0x1ee4>
   13284:	ldr	r0, [sp, #40]	; 0x28
   13288:	str	r4, [sp, #88]	; 0x58
   1328c:	cmp	r0, #1
   13290:	bne	133a0 <__assert_fail@plt+0x2318>
   13294:	str	lr, [sp, #28]
   13298:	bl	10f68 <__ctype_b_loc@plt>
   1329c:	ldr	r0, [r0]
   132a0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   132a4:	mov	r2, #1
   132a8:	add	r0, r0, r6, lsl #1
   132ac:	ldrb	r0, [r0, #1]
   132b0:	ubfx	r9, r0, #6, #1
   132b4:	ldr	r0, [sp, #52]	; 0x34
   132b8:	cmp	r2, #1
   132bc:	orr	r0, r9, r0
   132c0:	bhi	135fc <__assert_fail@plt+0x2574>
   132c4:	tst	r0, #1
   132c8:	beq	135fc <__assert_fail@plt+0x2574>
   132cc:	ldr	lr, [sp, #28]
   132d0:	ldr	r4, [sp, #88]	; 0x58
   132d4:	b	12f6c <__assert_fail@plt+0x1ee4>
   132d8:	ldr	r1, [sp, #48]	; 0x30
   132dc:	mov	sl, #0
   132e0:	mov	r0, #92	; 0x5c
   132e4:	cmp	r1, #0
   132e8:	beq	13360 <__assert_fail@plt+0x22d8>
   132ec:	mov	r6, #92	; 0x5c
   132f0:	mov	r9, #0
   132f4:	cmp	sl, #0
   132f8:	bne	13330 <__assert_fail@plt+0x22a8>
   132fc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13300:	tst	r0, #1
   13304:	beq	13330 <__assert_fail@plt+0x22a8>
   13308:	cmp	r8, r4
   1330c:	movcc	r0, #39	; 0x27
   13310:	strbcc	r0, [r5, r8]
   13314:	add	r0, r8, #1
   13318:	add	r8, r8, #2
   1331c:	cmp	r0, r4
   13320:	movcc	r1, #39	; 0x27
   13324:	strbcc	r1, [r5, r0]
   13328:	mov	r0, #0
   1332c:	str	r0, [fp, #-56]	; 0xffffffc8
   13330:	mov	r1, r9
   13334:	mov	r0, r6
   13338:	cmp	r8, r4
   1333c:	strbcc	r0, [r5, r8]
   13340:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13344:	add	r8, r8, #1
   13348:	and	r0, r0, r1
   1334c:	str	r0, [fp, #-48]	; 0xffffffd0
   13350:	add	r7, r7, #1
   13354:	cmn	lr, #1
   13358:	bne	12c98 <__assert_fail@plt+0x1c10>
   1335c:	b	12ca4 <__assert_fail@plt+0x1c1c>
   13360:	ldr	r1, [sp, #84]	; 0x54
   13364:	mov	sl, #0
   13368:	mov	r9, #0
   1336c:	tst	r1, #1
   13370:	mov	r1, #0
   13374:	beq	12f6c <__assert_fail@plt+0x1ee4>
   13378:	b	12fb4 <__assert_fail@plt+0x1f2c>
   1337c:	ldr	r0, [sp, #36]	; 0x24
   13380:	mov	r6, #0
   13384:	mov	sl, #0
   13388:	mov	r9, #0
   1338c:	cmp	r0, #0
   13390:	beq	12f6c <__assert_fail@plt+0x1ee4>
   13394:	b	13350 <__assert_fail@plt+0x22c8>
   13398:	mov	r9, #1
   1339c:	b	12f6c <__assert_fail@plt+0x1ee4>
   133a0:	mov	r0, #0
   133a4:	cmn	lr, #1
   133a8:	sub	r4, fp, #40	; 0x28
   133ac:	str	r0, [fp, #-36]	; 0xffffffdc
   133b0:	str	r0, [fp, #-40]	; 0xffffffd8
   133b4:	bne	133c8 <__assert_fail@plt+0x2340>
   133b8:	mov	r0, ip
   133bc:	bl	10f8c <strlen@plt>
   133c0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   133c4:	mov	lr, r0
   133c8:	ldr	r0, [sp, #72]	; 0x48
   133cc:	mov	r9, #1
   133d0:	mov	r2, #0
   133d4:	str	lr, [sp, #28]
   133d8:	add	r0, r0, r7
   133dc:	str	r0, [sp, #20]
   133e0:	b	13424 <__assert_fail@plt+0x239c>
   133e4:	ldr	r5, [sp, #44]	; 0x2c
   133e8:	add	r5, r0, r5
   133ec:	ldr	r0, [fp, #-44]	; 0xffffffd4
   133f0:	bl	10ed8 <iswprint@plt>
   133f4:	cmp	r0, #0
   133f8:	sub	r4, fp, #40	; 0x28
   133fc:	movwne	r0, #1
   13400:	and	r9, r9, r0
   13404:	mov	r0, r4
   13408:	bl	10e9c <mbsinit@plt>
   1340c:	mov	r2, r5
   13410:	ldr	lr, [sp, #28]
   13414:	ldr	r5, [fp, #-84]	; 0xffffffac
   13418:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1341c:	cmp	r0, #0
   13420:	bne	132b4 <__assert_fail@plt+0x222c>
   13424:	add	r0, r2, r7
   13428:	str	r2, [sp, #44]	; 0x2c
   1342c:	mov	r3, r4
   13430:	add	r1, ip, r0
   13434:	str	r0, [sp, #24]
   13438:	sub	r2, lr, r0
   1343c:	sub	r0, fp, #44	; 0x2c
   13440:	bl	16bd8 <__assert_fail@plt+0x5b50>
   13444:	cmp	r0, #0
   13448:	beq	137ec <__assert_fail@plt+0x2764>
   1344c:	cmn	r0, #1
   13450:	beq	137a8 <__assert_fail@plt+0x2720>
   13454:	ldr	lr, [sp, #28]
   13458:	cmn	r0, #2
   1345c:	beq	137b0 <__assert_fail@plt+0x2728>
   13460:	ldr	r2, [sp, #64]	; 0x40
   13464:	ldr	r4, [sp, #88]	; 0x58
   13468:	ldr	ip, [sp, #84]	; 0x54
   1346c:	cmp	r0, #2
   13470:	mov	r1, #0
   13474:	movwcc	r1, #1
   13478:	eor	r2, r2, #1
   1347c:	orrs	r1, r2, r1
   13480:	bne	133e4 <__assert_fail@plt+0x235c>
   13484:	ldr	r1, [sp, #44]	; 0x2c
   13488:	ldr	r2, [sp, #20]
   1348c:	add	r1, r2, r1
   13490:	sub	r2, r0, #1
   13494:	b	134a4 <__assert_fail@plt+0x241c>
   13498:	add	r1, r1, #1
   1349c:	subs	r2, r2, #1
   134a0:	beq	133e4 <__assert_fail@plt+0x235c>
   134a4:	ldrb	r3, [r1]
   134a8:	sub	r3, r3, #91	; 0x5b
   134ac:	cmp	r3, #33	; 0x21
   134b0:	bhi	13498 <__assert_fail@plt+0x2410>
   134b4:	add	r5, pc, #0
   134b8:	ldr	pc, [r5, r3, lsl #2]
   134bc:	andeq	r3, r1, r0, lsr #17
   134c0:	andeq	r3, r1, r0, lsr #17
   134c4:	muleq	r1, r8, r4
   134c8:	andeq	r3, r1, r0, lsr #17
   134cc:	muleq	r1, r8, r4
   134d0:	andeq	r3, r1, r0, lsr #17
   134d4:	muleq	r1, r8, r4
   134d8:	muleq	r1, r8, r4
   134dc:	muleq	r1, r8, r4
   134e0:	muleq	r1, r8, r4
   134e4:	muleq	r1, r8, r4
   134e8:	muleq	r1, r8, r4
   134ec:	muleq	r1, r8, r4
   134f0:	muleq	r1, r8, r4
   134f4:	muleq	r1, r8, r4
   134f8:	muleq	r1, r8, r4
   134fc:	muleq	r1, r8, r4
   13500:	muleq	r1, r8, r4
   13504:	muleq	r1, r8, r4
   13508:	muleq	r1, r8, r4
   1350c:	muleq	r1, r8, r4
   13510:	muleq	r1, r8, r4
   13514:	muleq	r1, r8, r4
   13518:	muleq	r1, r8, r4
   1351c:	muleq	r1, r8, r4
   13520:	muleq	r1, r8, r4
   13524:	muleq	r1, r8, r4
   13528:	muleq	r1, r8, r4
   1352c:	muleq	r1, r8, r4
   13530:	muleq	r1, r8, r4
   13534:	muleq	r1, r8, r4
   13538:	muleq	r1, r8, r4
   1353c:	muleq	r1, r8, r4
   13540:	andeq	r3, r1, r0, lsr #17
   13544:	mov	r8, r0
   13548:	b	12f6c <__assert_fail@plt+0x1ee4>
   1354c:	ldr	r0, [sp, #32]
   13550:	cmp	r0, #0
   13554:	beq	135f4 <__assert_fail@plt+0x256c>
   13558:	add	r0, r7, #2
   1355c:	cmp	r0, lr
   13560:	bcs	135f4 <__assert_fail@plt+0x256c>
   13564:	add	r1, r7, ip
   13568:	ldrb	r1, [r1, #1]
   1356c:	cmp	r1, #63	; 0x3f
   13570:	bne	135f4 <__assert_fail@plt+0x256c>
   13574:	ldrb	r9, [ip, r0]
   13578:	sub	r2, r9, #33	; 0x21
   1357c:	cmp	r2, #29
   13580:	bhi	135f4 <__assert_fail@plt+0x256c>
   13584:	movw	r1, #20929	; 0x51c1
   13588:	mov	r3, #1
   1358c:	movt	r1, #14336	; 0x3800
   13590:	tst	r1, r3, lsl r2
   13594:	beq	135f4 <__assert_fail@plt+0x256c>
   13598:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1359c:	tst	r1, #1
   135a0:	bne	138c4 <__assert_fail@plt+0x283c>
   135a4:	cmp	r8, r4
   135a8:	add	r2, r8, #1
   135ac:	mov	r6, r9
   135b0:	mov	r7, r0
   135b4:	mov	r9, #0
   135b8:	movcc	r1, #63	; 0x3f
   135bc:	strbcc	r1, [r5, r8]
   135c0:	cmp	r2, r4
   135c4:	movcc	r1, #34	; 0x22
   135c8:	strbcc	r1, [r5, r2]
   135cc:	add	r2, r8, #2
   135d0:	cmp	r2, r4
   135d4:	movcc	r1, #34	; 0x22
   135d8:	strbcc	r1, [r5, r2]
   135dc:	add	r2, r8, #3
   135e0:	add	r8, r8, #4
   135e4:	cmp	r2, r4
   135e8:	movcc	r1, #63	; 0x3f
   135ec:	strbcc	r1, [r5, r2]
   135f0:	b	12f6c <__assert_fail@plt+0x1ee4>
   135f4:	mov	r9, #0
   135f8:	b	12f6c <__assert_fail@plt+0x1ee4>
   135fc:	ldr	lr, [sp, #28]
   13600:	ldr	r4, [fp, #-56]	; 0xffffffc8
   13604:	add	r1, r2, r7
   13608:	mov	r2, #0
   1360c:	str	r1, [sp, #44]	; 0x2c
   13610:	tst	r0, #1
   13614:	bne	13730 <__assert_fail@plt+0x26a8>
   13618:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1361c:	tst	r1, #1
   13620:	bne	138c0 <__assert_fail@plt+0x2838>
   13624:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13628:	subs	r2, r1, #2
   1362c:	movwne	r2, #1
   13630:	orr	r2, r2, r4
   13634:	tst	r2, #1
   13638:	bne	1367c <__assert_fail@plt+0x25f4>
   1363c:	ldr	r1, [sp, #88]	; 0x58
   13640:	add	r2, r8, #1
   13644:	mov	r4, #1
   13648:	cmp	r8, r1
   1364c:	movcc	r1, #39	; 0x27
   13650:	strbcc	r1, [r5, r8]
   13654:	ldr	r1, [sp, #88]	; 0x58
   13658:	cmp	r2, r1
   1365c:	movcc	r1, #36	; 0x24
   13660:	strbcc	r1, [r5, r2]
   13664:	ldr	r1, [sp, #88]	; 0x58
   13668:	add	r2, r8, #2
   1366c:	add	r8, r8, #3
   13670:	cmp	r2, r1
   13674:	movcc	r1, #39	; 0x27
   13678:	strbcc	r1, [r5, r2]
   1367c:	ldr	r1, [sp, #88]	; 0x58
   13680:	add	r2, r8, #1
   13684:	cmp	r8, r1
   13688:	movcc	r1, #92	; 0x5c
   1368c:	strbcc	r1, [r5, r8]
   13690:	ldr	r1, [sp, #88]	; 0x58
   13694:	cmp	r2, r1
   13698:	bcs	136ac <__assert_fail@plt+0x2624>
   1369c:	uxtb	r3, r6
   136a0:	mov	r1, #48	; 0x30
   136a4:	orr	r3, r1, r3, lsr #6
   136a8:	strb	r3, [r5, r2]
   136ac:	ldr	r1, [sp, #88]	; 0x58
   136b0:	add	r2, r8, #2
   136b4:	add	r8, r8, #3
   136b8:	cmp	r2, r1
   136bc:	lsrcc	r3, r6, #3
   136c0:	movcc	r1, #6
   136c4:	bficc	r3, r1, #3, #29
   136c8:	mov	r1, #6
   136cc:	bfi	r6, r1, #3, #29
   136d0:	strbcc	r3, [r5, r2]
   136d4:	mov	r2, #1
   136d8:	b	13758 <__assert_fail@plt+0x26d0>
   136dc:	ldr	r1, [sp, #88]	; 0x58
   136e0:	ldr	r5, [fp, #-84]	; 0xffffffac
   136e4:	ldr	r4, [sp, #88]	; 0x58
   136e8:	cmp	r8, r1
   136ec:	movcc	r1, #39	; 0x27
   136f0:	strbcc	r1, [r5, r8]
   136f4:	add	r1, r8, #1
   136f8:	add	r8, r8, #2
   136fc:	cmp	r1, r4
   13700:	movcc	r4, #39	; 0x27
   13704:	strbcc	r4, [r5, r1]
   13708:	mov	r4, #0
   1370c:	ldr	r1, [sp, #88]	; 0x58
   13710:	cmp	r8, r1
   13714:	ldr	r1, [sp, #72]	; 0x48
   13718:	strbcc	r6, [r5, r8]
   1371c:	add	r8, r8, #1
   13720:	ldrb	r6, [r1, r7]
   13724:	mov	r7, r3
   13728:	tst	r0, #1
   1372c:	beq	13618 <__assert_fail@plt+0x2590>
   13730:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13734:	tst	r1, #1
   13738:	beq	13750 <__assert_fail@plt+0x26c8>
   1373c:	ldr	r1, [sp, #88]	; 0x58
   13740:	cmp	r8, r1
   13744:	movcc	r1, #92	; 0x5c
   13748:	strbcc	r1, [r5, r8]
   1374c:	add	r8, r8, #1
   13750:	mov	r1, #0
   13754:	str	r1, [fp, #-52]	; 0xffffffcc
   13758:	ldr	r1, [sp, #44]	; 0x2c
   1375c:	add	r3, r7, #1
   13760:	and	sl, r2, #1
   13764:	cmp	r1, r3
   13768:	bls	1378c <__assert_fail@plt+0x2704>
   1376c:	cmp	sl, #0
   13770:	mvn	r5, r4
   13774:	movwne	sl, #1
   13778:	orr	r5, r5, sl
   1377c:	tst	r5, #1
   13780:	beq	136dc <__assert_fail@plt+0x2654>
   13784:	ldr	r5, [fp, #-84]	; 0xffffffac
   13788:	b	1370c <__assert_fail@plt+0x2684>
   1378c:	str	r4, [fp, #-56]	; 0xffffffc8
   13790:	ldr	r4, [sp, #88]	; 0x58
   13794:	cmp	sl, #0
   13798:	movwne	sl, #1
   1379c:	cmp	sl, #0
   137a0:	beq	132fc <__assert_fail@plt+0x2274>
   137a4:	b	13330 <__assert_fail@plt+0x22a8>
   137a8:	mov	r9, #0
   137ac:	b	137ec <__assert_fail@plt+0x2764>
   137b0:	ldr	r0, [sp, #24]
   137b4:	mov	r9, #0
   137b8:	cmp	lr, r0
   137bc:	bls	137ec <__assert_fail@plt+0x2764>
   137c0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   137c4:	ldr	r2, [sp, #44]	; 0x2c
   137c8:	add	r0, ip, r7
   137cc:	ldrb	r1, [r0, r2]
   137d0:	cmp	r1, #0
   137d4:	beq	132b4 <__assert_fail@plt+0x222c>
   137d8:	add	r2, r2, #1
   137dc:	add	r1, r7, r2
   137e0:	cmp	r1, lr
   137e4:	bcc	137cc <__assert_fail@plt+0x2744>
   137e8:	b	132b4 <__assert_fail@plt+0x222c>
   137ec:	ldr	ip, [fp, #-80]	; 0xffffffb0
   137f0:	ldr	r2, [sp, #44]	; 0x2c
   137f4:	b	132b4 <__assert_fail@plt+0x222c>
   137f8:	mov	lr, r7
   137fc:	b	13804 <__assert_fail@plt+0x277c>
   13800:	mvn	lr, #0
   13804:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13808:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1380c:	eor	r0, r1, #2
   13810:	orr	r0, r0, r8
   13814:	clz	r0, r0
   13818:	lsr	r0, r0, #5
   1381c:	tst	r2, r0
   13820:	bne	138c4 <__assert_fail@plt+0x283c>
   13824:	subs	r0, r1, #2
   13828:	movwne	r0, #1
   1382c:	orr	r0, r2, r0
   13830:	tst	r0, #1
   13834:	ldreq	r0, [sp, #60]	; 0x3c
   13838:	eoreq	r0, r0, #1
   1383c:	tsteq	r0, #1
   13840:	bne	13958 <__assert_fail@plt+0x28d0>
   13844:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13848:	mov	sl, lr
   1384c:	tst	r0, #1
   13850:	bne	13924 <__assert_fail@plt+0x289c>
   13854:	ldr	r6, [sp, #56]	; 0x38
   13858:	mov	r9, #0
   1385c:	cmp	r6, #0
   13860:	beq	13950 <__assert_fail@plt+0x28c8>
   13864:	ldr	r0, [sp, #84]	; 0x54
   13868:	mov	r1, #0
   1386c:	mov	r7, #2
   13870:	cmp	r4, #0
   13874:	str	r1, [fp, #-48]	; 0xffffffd0
   13878:	mov	r1, #0
   1387c:	str	r1, [fp, #-76]	; 0xffffffb4
   13880:	beq	12a20 <__assert_fail@plt+0x1998>
   13884:	b	13958 <__assert_fail@plt+0x28d0>
   13888:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1388c:	ldr	r1, [fp, #12]
   13890:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13894:	mov	lr, r4
   13898:	mov	r4, r6
   1389c:	b	138e4 <__assert_fail@plt+0x285c>
   138a0:	tst	ip, #1
   138a4:	ldr	r5, [fp, #-84]	; 0xffffffac
   138a8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   138ac:	ldr	r1, [fp, #12]
   138b0:	mov	r0, #2
   138b4:	movwne	r0, #4
   138b8:	mov	r2, r0
   138bc:	b	138e4 <__assert_fail@plt+0x285c>
   138c0:	ldr	r4, [sp, #88]	; 0x58
   138c4:	ldr	r1, [sp, #84]	; 0x54
   138c8:	mov	r0, #2
   138cc:	tst	r1, #1
   138d0:	movwne	r0, #4
   138d4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   138d8:	ldr	r1, [fp, #12]
   138dc:	cmp	r2, #2
   138e0:	moveq	r2, r0
   138e4:	mov	r0, #0
   138e8:	bic	r1, r1, #2
   138ec:	str	r2, [sp]
   138f0:	mov	r2, ip
   138f4:	mov	r3, lr
   138f8:	str	r0, [sp, #8]
   138fc:	ldr	r0, [sp, #76]	; 0x4c
   13900:	str	r1, [sp, #4]
   13904:	mov	r1, r4
   13908:	str	r0, [sp, #12]
   1390c:	ldr	r0, [sp, #80]	; 0x50
   13910:	str	r0, [sp, #16]
   13914:	mov	r0, r5
   13918:	bl	12990 <__assert_fail@plt+0x1908>
   1391c:	mov	r8, r0
   13920:	b	139a4 <__assert_fail@plt+0x291c>
   13924:	mov	r0, #5
   13928:	ldr	r1, [sp, #56]	; 0x38
   1392c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13930:	mov	r3, sl
   13934:	str	r0, [sp]
   13938:	ldr	r0, [fp, #12]
   1393c:	str	r0, [sp, #4]
   13940:	ldr	r0, [fp, #16]
   13944:	str	r0, [sp, #8]
   13948:	ldr	r0, [sp, #76]	; 0x4c
   1394c:	b	13908 <__assert_fail@plt+0x2880>
   13950:	mov	r0, #0
   13954:	str	r0, [fp, #-76]	; 0xffffffb4
   13958:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1395c:	cmp	r1, #0
   13960:	beq	13998 <__assert_fail@plt+0x2910>
   13964:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13968:	tst	r0, #1
   1396c:	bne	13998 <__assert_fail@plt+0x2910>
   13970:	ldrb	r0, [r1]
   13974:	cmp	r0, #0
   13978:	beq	13998 <__assert_fail@plt+0x2910>
   1397c:	add	r1, r1, #1
   13980:	cmp	r8, r4
   13984:	strbcc	r0, [r5, r8]
   13988:	add	r8, r8, #1
   1398c:	ldrb	r0, [r1], #1
   13990:	cmp	r0, #0
   13994:	bne	13980 <__assert_fail@plt+0x28f8>
   13998:	cmp	r8, r4
   1399c:	movcc	r0, #0
   139a0:	strbcc	r0, [r5, r8]
   139a4:	mov	r0, r8
   139a8:	sub	sp, fp, #28
   139ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139b0:	mov	r0, #4
   139b4:	b	138d4 <__assert_fail@plt+0x284c>
   139b8:	bl	1107c <abort@plt>
   139bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139c0:	add	fp, sp, #28
   139c4:	sub	sp, sp, #28
   139c8:	movw	r5, #33128	; 0x8168
   139cc:	cmp	r2, #0
   139d0:	mov	r4, r1
   139d4:	mov	r7, r0
   139d8:	str	r0, [sp, #20]
   139dc:	movt	r5, #2
   139e0:	movne	r5, r2
   139e4:	bl	10fa4 <__errno_location@plt>
   139e8:	mov	sl, r0
   139ec:	ldr	r2, [r5, #40]	; 0x28
   139f0:	ldr	r3, [r5, #44]	; 0x2c
   139f4:	ldm	r5, {r0, r1}
   139f8:	orr	r8, r1, #1
   139fc:	add	r9, r5, #8
   13a00:	mov	r1, #0
   13a04:	ldr	r6, [sl]
   13a08:	stm	sp, {r0, r8, r9}
   13a0c:	mov	r0, #0
   13a10:	str	r2, [sp, #12]
   13a14:	str	r3, [sp, #16]
   13a18:	mov	r2, r7
   13a1c:	mov	r3, r4
   13a20:	str	r6, [sp, #24]
   13a24:	mov	r6, r4
   13a28:	bl	12990 <__assert_fail@plt+0x1908>
   13a2c:	add	r7, r0, #1
   13a30:	mov	r0, r7
   13a34:	bl	14bdc <__assert_fail@plt+0x3b54>
   13a38:	mov	r4, r0
   13a3c:	ldr	r0, [r5]
   13a40:	ldr	r2, [r5, #44]	; 0x2c
   13a44:	ldr	r1, [r5, #40]	; 0x28
   13a48:	mov	r3, r6
   13a4c:	stm	sp, {r0, r8, r9}
   13a50:	str	r2, [sp, #16]
   13a54:	ldr	r2, [sp, #20]
   13a58:	str	r1, [sp, #12]
   13a5c:	mov	r0, r4
   13a60:	mov	r1, r7
   13a64:	bl	12990 <__assert_fail@plt+0x1908>
   13a68:	ldr	r0, [sp, #24]
   13a6c:	str	r0, [sl]
   13a70:	mov	r0, r4
   13a74:	sub	sp, fp, #28
   13a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a80:	add	fp, sp, #28
   13a84:	sub	sp, sp, #36	; 0x24
   13a88:	movw	r8, #33128	; 0x8168
   13a8c:	cmp	r3, #0
   13a90:	mov	r4, r2
   13a94:	str	r2, [sp, #24]
   13a98:	mov	r5, r1
   13a9c:	mov	r6, r0
   13aa0:	str	r0, [sp, #20]
   13aa4:	movt	r8, #2
   13aa8:	movne	r8, r3
   13aac:	bl	10fa4 <__errno_location@plt>
   13ab0:	str	r0, [sp, #28]
   13ab4:	ldr	r1, [r8, #40]	; 0x28
   13ab8:	ldr	r2, [r8, #44]	; 0x2c
   13abc:	ldr	r7, [r0]
   13ac0:	cmp	r4, #0
   13ac4:	add	sl, r8, #8
   13ac8:	mov	r0, #0
   13acc:	ldm	r8, {r3, r9}
   13ad0:	orreq	r9, r9, #1
   13ad4:	stm	sp, {r3, r9, sl}
   13ad8:	str	r1, [sp, #12]
   13adc:	str	r2, [sp, #16]
   13ae0:	mov	r1, #0
   13ae4:	mov	r2, r6
   13ae8:	mov	r3, r5
   13aec:	str	r7, [sp, #32]
   13af0:	mov	r7, r5
   13af4:	bl	12990 <__assert_fail@plt+0x1908>
   13af8:	add	r4, r0, #1
   13afc:	mov	r5, r0
   13b00:	mov	r0, r4
   13b04:	bl	14bdc <__assert_fail@plt+0x3b54>
   13b08:	mov	r6, r0
   13b0c:	ldr	r0, [r8]
   13b10:	ldr	r2, [r8, #44]	; 0x2c
   13b14:	ldr	r1, [r8, #40]	; 0x28
   13b18:	mov	r3, r7
   13b1c:	stm	sp, {r0, r9, sl}
   13b20:	str	r2, [sp, #16]
   13b24:	ldr	r2, [sp, #20]
   13b28:	str	r1, [sp, #12]
   13b2c:	mov	r0, r6
   13b30:	mov	r1, r4
   13b34:	bl	12990 <__assert_fail@plt+0x1908>
   13b38:	ldr	r0, [sp, #24]
   13b3c:	ldr	r1, [sp, #32]
   13b40:	ldr	r2, [sp, #28]
   13b44:	cmp	r0, #0
   13b48:	str	r1, [r2]
   13b4c:	strne	r5, [r0]
   13b50:	mov	r0, r6
   13b54:	sub	sp, fp, #28
   13b58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b5c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13b60:	add	fp, sp, #24
   13b64:	movw	r5, #33012	; 0x80f4
   13b68:	movw	r8, #33008	; 0x80f0
   13b6c:	movt	r5, #2
   13b70:	movt	r8, #2
   13b74:	ldr	r0, [r5]
   13b78:	ldr	r4, [r8]
   13b7c:	cmp	r0, #2
   13b80:	blt	13bac <__assert_fail@plt+0x2b24>
   13b84:	add	r7, r4, #12
   13b88:	mov	r6, #0
   13b8c:	ldr	r0, [r7, r6, lsl #3]
   13b90:	bl	12684 <__assert_fail@plt+0x15fc>
   13b94:	ldr	r1, [r5]
   13b98:	add	r2, r6, #2
   13b9c:	add	r0, r6, #1
   13ba0:	mov	r6, r0
   13ba4:	cmp	r2, r1
   13ba8:	blt	13b8c <__assert_fail@plt+0x2b04>
   13bac:	ldr	r0, [r4, #4]
   13bb0:	movw	r9, #33176	; 0x8198
   13bb4:	movw	r7, #33016	; 0x80f8
   13bb8:	movt	r9, #2
   13bbc:	movt	r7, #2
   13bc0:	cmp	r0, r9
   13bc4:	beq	13bd4 <__assert_fail@plt+0x2b4c>
   13bc8:	bl	12684 <__assert_fail@plt+0x15fc>
   13bcc:	mov	r0, #256	; 0x100
   13bd0:	stm	r7, {r0, r9}
   13bd4:	cmp	r4, r7
   13bd8:	beq	13be8 <__assert_fail@plt+0x2b60>
   13bdc:	mov	r0, r4
   13be0:	bl	12684 <__assert_fail@plt+0x15fc>
   13be4:	str	r7, [r8]
   13be8:	mov	r0, #1
   13bec:	str	r0, [r5]
   13bf0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13bf4:	movw	r3, #33128	; 0x8168
   13bf8:	mvn	r2, #0
   13bfc:	movt	r3, #2
   13c00:	b	13c04 <__assert_fail@plt+0x2b7c>
   13c04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c08:	add	fp, sp, #28
   13c0c:	sub	sp, sp, #44	; 0x2c
   13c10:	mov	r7, r3
   13c14:	str	r2, [sp, #36]	; 0x24
   13c18:	str	r1, [sp, #32]
   13c1c:	mov	r5, r0
   13c20:	bl	10fa4 <__errno_location@plt>
   13c24:	cmp	r5, #0
   13c28:	bmi	13d98 <__assert_fail@plt+0x2d10>
   13c2c:	cmn	r5, #-2147483647	; 0x80000001
   13c30:	beq	13d98 <__assert_fail@plt+0x2d10>
   13c34:	movw	r8, #33012	; 0x80f4
   13c38:	movw	r4, #33008	; 0x80f0
   13c3c:	str	r0, [sp, #28]
   13c40:	ldr	r0, [r0]
   13c44:	movt	r8, #2
   13c48:	movt	r4, #2
   13c4c:	ldr	r1, [r8]
   13c50:	ldr	r6, [r4]
   13c54:	str	r0, [sp, #24]
   13c58:	cmp	r1, r5
   13c5c:	ble	13c68 <__assert_fail@plt+0x2be0>
   13c60:	mov	sl, r6
   13c64:	b	13cd4 <__assert_fail@plt+0x2c4c>
   13c68:	movw	r9, #33016	; 0x80f8
   13c6c:	mov	r0, #8
   13c70:	str	r1, [fp, #-32]	; 0xffffffe0
   13c74:	sub	r1, r5, r1
   13c78:	mvn	r3, #-2147483648	; 0x80000000
   13c7c:	movt	r9, #2
   13c80:	str	r0, [sp]
   13c84:	add	r2, r1, #1
   13c88:	sub	r1, fp, #32
   13c8c:	subs	r0, r6, r9
   13c90:	movne	r0, r6
   13c94:	bl	14ddc <__assert_fail@plt+0x3d54>
   13c98:	mov	sl, r0
   13c9c:	cmp	r6, r9
   13ca0:	str	r0, [r4]
   13ca4:	bne	13cb0 <__assert_fail@plt+0x2c28>
   13ca8:	ldrd	r0, [r9]
   13cac:	stm	sl, {r0, r1}
   13cb0:	ldr	r1, [r8]
   13cb4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13cb8:	add	r0, sl, r1, lsl #3
   13cbc:	sub	r1, r2, r1
   13cc0:	lsl	r2, r1, #3
   13cc4:	mov	r1, #0
   13cc8:	bl	10fbc <memset@plt>
   13ccc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13cd0:	str	r0, [r8]
   13cd4:	mov	r9, sl
   13cd8:	ldm	r7, {r0, r1}
   13cdc:	orr	r8, r1, #1
   13ce0:	add	r1, r7, #8
   13ce4:	ldr	r2, [r7, #40]	; 0x28
   13ce8:	ldr	r3, [r7, #44]	; 0x2c
   13cec:	ldr	r6, [r9, r5, lsl #3]!
   13cf0:	str	r1, [sp, #20]
   13cf4:	ldr	r4, [r9, #4]!
   13cf8:	stm	sp, {r0, r8}
   13cfc:	add	r0, sp, #8
   13d00:	stm	r0, {r1, r2, r3}
   13d04:	ldr	r2, [sp, #32]
   13d08:	ldr	r3, [sp, #36]	; 0x24
   13d0c:	mov	r1, r6
   13d10:	mov	r0, r4
   13d14:	bl	12990 <__assert_fail@plt+0x1908>
   13d18:	cmp	r6, r0
   13d1c:	bhi	13d80 <__assert_fail@plt+0x2cf8>
   13d20:	add	r6, r0, #1
   13d24:	movw	r0, #33176	; 0x8198
   13d28:	movt	r0, #2
   13d2c:	str	r6, [sl, r5, lsl #3]
   13d30:	cmp	r4, r0
   13d34:	beq	13d40 <__assert_fail@plt+0x2cb8>
   13d38:	mov	r0, r4
   13d3c:	bl	12684 <__assert_fail@plt+0x15fc>
   13d40:	mov	r0, r6
   13d44:	bl	14bdc <__assert_fail@plt+0x3b54>
   13d48:	str	r0, [r9]
   13d4c:	mov	r4, r0
   13d50:	add	r3, sp, #8
   13d54:	ldr	r0, [r7]
   13d58:	ldr	r1, [r7, #40]	; 0x28
   13d5c:	ldr	r2, [r7, #44]	; 0x2c
   13d60:	stm	sp, {r0, r8}
   13d64:	ldr	r0, [sp, #20]
   13d68:	stm	r3, {r0, r1, r2}
   13d6c:	ldr	r2, [sp, #32]
   13d70:	ldr	r3, [sp, #36]	; 0x24
   13d74:	mov	r0, r4
   13d78:	mov	r1, r6
   13d7c:	bl	12990 <__assert_fail@plt+0x1908>
   13d80:	ldr	r0, [sp, #28]
   13d84:	ldr	r1, [sp, #24]
   13d88:	str	r1, [r0]
   13d8c:	mov	r0, r4
   13d90:	sub	sp, fp, #28
   13d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d98:	bl	1107c <abort@plt>
   13d9c:	movw	r3, #33128	; 0x8168
   13da0:	movt	r3, #2
   13da4:	b	13c04 <__assert_fail@plt+0x2b7c>
   13da8:	movw	r3, #33128	; 0x8168
   13dac:	mov	r1, r0
   13db0:	mov	r0, #0
   13db4:	mvn	r2, #0
   13db8:	movt	r3, #2
   13dbc:	b	13c04 <__assert_fail@plt+0x2b7c>
   13dc0:	movw	r3, #33128	; 0x8168
   13dc4:	mov	r2, r1
   13dc8:	mov	r1, r0
   13dcc:	mov	r0, #0
   13dd0:	movt	r3, #2
   13dd4:	b	13c04 <__assert_fail@plt+0x2b7c>
   13dd8:	push	{fp, lr}
   13ddc:	mov	fp, sp
   13de0:	sub	sp, sp, #48	; 0x30
   13de4:	vmov.i32	q8, #0	; 0x00000000
   13de8:	mov	ip, #32
   13dec:	mov	r3, sp
   13df0:	mov	lr, r2
   13df4:	cmp	r1, #10
   13df8:	add	r2, r3, #16
   13dfc:	vst1.64	{d16-d17}, [r3], ip
   13e00:	vst1.64	{d16-d17}, [r2]
   13e04:	vst1.64	{d16-d17}, [r3]
   13e08:	beq	13e28 <__assert_fail@plt+0x2da0>
   13e0c:	str	r1, [sp]
   13e10:	mov	r3, sp
   13e14:	mov	r1, lr
   13e18:	mvn	r2, #0
   13e1c:	bl	13c04 <__assert_fail@plt+0x2b7c>
   13e20:	mov	sp, fp
   13e24:	pop	{fp, pc}
   13e28:	bl	1107c <abort@plt>
   13e2c:	push	{r4, sl, fp, lr}
   13e30:	add	fp, sp, #8
   13e34:	sub	sp, sp, #48	; 0x30
   13e38:	vmov.i32	q8, #0	; 0x00000000
   13e3c:	mov	ip, r3
   13e40:	mov	r3, sp
   13e44:	mov	lr, #32
   13e48:	cmp	r1, #10
   13e4c:	add	r4, r3, #16
   13e50:	vst1.64	{d16-d17}, [r3], lr
   13e54:	vst1.64	{d16-d17}, [r4]
   13e58:	vst1.64	{d16-d17}, [r3]
   13e5c:	beq	13e7c <__assert_fail@plt+0x2df4>
   13e60:	str	r1, [sp]
   13e64:	mov	r1, r2
   13e68:	mov	r3, sp
   13e6c:	mov	r2, ip
   13e70:	bl	13c04 <__assert_fail@plt+0x2b7c>
   13e74:	sub	sp, fp, #8
   13e78:	pop	{r4, sl, fp, pc}
   13e7c:	bl	1107c <abort@plt>
   13e80:	push	{fp, lr}
   13e84:	mov	fp, sp
   13e88:	sub	sp, sp, #48	; 0x30
   13e8c:	vmov.i32	q8, #0	; 0x00000000
   13e90:	mov	r3, sp
   13e94:	mov	ip, #32
   13e98:	cmp	r0, #10
   13e9c:	add	r2, r3, #16
   13ea0:	vst1.64	{d16-d17}, [r3], ip
   13ea4:	vst1.64	{d16-d17}, [r2]
   13ea8:	vst1.64	{d16-d17}, [r3]
   13eac:	beq	13ecc <__assert_fail@plt+0x2e44>
   13eb0:	str	r0, [sp]
   13eb4:	mov	r3, sp
   13eb8:	mov	r0, #0
   13ebc:	mvn	r2, #0
   13ec0:	bl	13c04 <__assert_fail@plt+0x2b7c>
   13ec4:	mov	sp, fp
   13ec8:	pop	{fp, pc}
   13ecc:	bl	1107c <abort@plt>
   13ed0:	push	{fp, lr}
   13ed4:	mov	fp, sp
   13ed8:	sub	sp, sp, #48	; 0x30
   13edc:	vmov.i32	q8, #0	; 0x00000000
   13ee0:	mov	r3, sp
   13ee4:	mov	ip, #32
   13ee8:	cmp	r0, #10
   13eec:	add	lr, r3, #16
   13ef0:	vst1.64	{d16-d17}, [r3], ip
   13ef4:	vst1.64	{d16-d17}, [lr]
   13ef8:	vst1.64	{d16-d17}, [r3]
   13efc:	beq	13f18 <__assert_fail@plt+0x2e90>
   13f00:	str	r0, [sp]
   13f04:	mov	r3, sp
   13f08:	mov	r0, #0
   13f0c:	bl	13c04 <__assert_fail@plt+0x2b7c>
   13f10:	mov	sp, fp
   13f14:	pop	{fp, pc}
   13f18:	bl	1107c <abort@plt>
   13f1c:	push	{r4, sl, fp, lr}
   13f20:	add	fp, sp, #8
   13f24:	sub	sp, sp, #48	; 0x30
   13f28:	mov	lr, r0
   13f2c:	movw	r0, #33128	; 0x8168
   13f30:	mov	ip, r1
   13f34:	mov	r1, #32
   13f38:	mov	r4, #1
   13f3c:	movt	r0, #2
   13f40:	add	r3, r0, #16
   13f44:	vld1.64	{d16-d17}, [r0], r1
   13f48:	vld1.64	{d20-d21}, [r0]
   13f4c:	vld1.64	{d18-d19}, [r3]
   13f50:	mov	r3, sp
   13f54:	add	r0, r3, #32
   13f58:	add	r1, r3, #16
   13f5c:	vst1.64	{d20-d21}, [r0]
   13f60:	mov	r0, #28
   13f64:	vst1.64	{d18-d19}, [r1]
   13f68:	mov	r1, r3
   13f6c:	and	r0, r0, r2, lsr #3
   13f70:	and	r2, r2, #31
   13f74:	vst1.64	{d16-d17}, [r1], r0
   13f78:	ldr	r0, [r1, #8]
   13f7c:	bic	r4, r4, r0, lsr r2
   13f80:	eor	r0, r0, r4, lsl r2
   13f84:	mov	r2, ip
   13f88:	str	r0, [r1, #8]
   13f8c:	mov	r0, #0
   13f90:	mov	r1, lr
   13f94:	bl	13c04 <__assert_fail@plt+0x2b7c>
   13f98:	sub	sp, fp, #8
   13f9c:	pop	{r4, sl, fp, pc}
   13fa0:	push	{fp, lr}
   13fa4:	mov	fp, sp
   13fa8:	sub	sp, sp, #48	; 0x30
   13fac:	mov	ip, r0
   13fb0:	movw	r0, #33128	; 0x8168
   13fb4:	mov	r2, #32
   13fb8:	movt	r0, #2
   13fbc:	add	r3, r0, #16
   13fc0:	vld1.64	{d16-d17}, [r0], r2
   13fc4:	vld1.64	{d20-d21}, [r0]
   13fc8:	vld1.64	{d18-d19}, [r3]
   13fcc:	mov	r3, sp
   13fd0:	add	r0, r3, #32
   13fd4:	add	r2, r3, #16
   13fd8:	vst1.64	{d20-d21}, [r0]
   13fdc:	mov	r0, #28
   13fe0:	vst1.64	{d18-d19}, [r2]
   13fe4:	mov	r2, r3
   13fe8:	and	r0, r0, r1, lsr #3
   13fec:	and	r1, r1, #31
   13ff0:	vst1.64	{d16-d17}, [r2], r0
   13ff4:	mov	r0, #1
   13ff8:	ldr	lr, [r2, #8]
   13ffc:	bic	r0, r0, lr, lsr r1
   14000:	eor	r0, lr, r0, lsl r1
   14004:	mov	r1, ip
   14008:	str	r0, [r2, #8]
   1400c:	mov	r0, #0
   14010:	mvn	r2, #0
   14014:	bl	13c04 <__assert_fail@plt+0x2b7c>
   14018:	mov	sp, fp
   1401c:	pop	{fp, pc}
   14020:	push	{fp, lr}
   14024:	mov	fp, sp
   14028:	sub	sp, sp, #48	; 0x30
   1402c:	mov	r1, r0
   14030:	movw	r0, #33128	; 0x8168
   14034:	mov	r3, #32
   14038:	movt	r0, #2
   1403c:	add	r2, r0, #16
   14040:	vld1.64	{d16-d17}, [r0], r3
   14044:	mov	r3, sp
   14048:	vld1.64	{d18-d19}, [r2]
   1404c:	vld1.64	{d20-d21}, [r0]
   14050:	add	r2, r3, #16
   14054:	add	r0, r3, #32
   14058:	vst1.64	{d18-d19}, [r2]
   1405c:	vst1.64	{d20-d21}, [r0]
   14060:	mov	r0, #12
   14064:	mov	r2, r3
   14068:	vst1.64	{d16-d17}, [r2], r0
   1406c:	ldr	r0, [r2]
   14070:	orr	r0, r0, #67108864	; 0x4000000
   14074:	str	r0, [r2]
   14078:	mov	r0, #0
   1407c:	mvn	r2, #0
   14080:	bl	13c04 <__assert_fail@plt+0x2b7c>
   14084:	mov	sp, fp
   14088:	pop	{fp, pc}
   1408c:	push	{fp, lr}
   14090:	mov	fp, sp
   14094:	sub	sp, sp, #48	; 0x30
   14098:	mov	ip, r1
   1409c:	mov	r1, r0
   140a0:	movw	r0, #33128	; 0x8168
   140a4:	mov	r2, #32
   140a8:	movt	r0, #2
   140ac:	add	r3, r0, #16
   140b0:	vld1.64	{d16-d17}, [r0], r2
   140b4:	vld1.64	{d18-d19}, [r3]
   140b8:	vld1.64	{d20-d21}, [r0]
   140bc:	mov	r3, sp
   140c0:	add	r2, r3, #16
   140c4:	add	r0, r3, #32
   140c8:	vst1.64	{d18-d19}, [r2]
   140cc:	vst1.64	{d20-d21}, [r0]
   140d0:	mov	r0, #12
   140d4:	mov	r2, r3
   140d8:	vst1.64	{d16-d17}, [r2], r0
   140dc:	ldr	r0, [r2]
   140e0:	orr	r0, r0, #67108864	; 0x4000000
   140e4:	str	r0, [r2]
   140e8:	mov	r0, #0
   140ec:	mov	r2, ip
   140f0:	bl	13c04 <__assert_fail@plt+0x2b7c>
   140f4:	mov	sp, fp
   140f8:	pop	{fp, pc}
   140fc:	push	{r4, sl, fp, lr}
   14100:	add	fp, sp, #8
   14104:	sub	sp, sp, #96	; 0x60
   14108:	vmov.i32	q8, #0	; 0x00000000
   1410c:	mov	ip, r2
   14110:	mov	r2, sp
   14114:	mov	r4, #28
   14118:	cmp	r1, #10
   1411c:	mov	r3, r2
   14120:	add	lr, r2, #16
   14124:	vst1.64	{d16-d17}, [r3], r4
   14128:	vst1.64	{d16-d17}, [lr]
   1412c:	vst1.32	{d16-d17}, [r3]
   14130:	beq	14180 <__assert_fail@plt+0x30f8>
   14134:	vld1.64	{d16-d17}, [r2], r4
   14138:	vld1.64	{d18-d19}, [lr]
   1413c:	add	r3, sp, #48	; 0x30
   14140:	vld1.32	{d20-d21}, [r2]
   14144:	add	r2, r3, #20
   14148:	add	r4, r3, #4
   1414c:	vst1.32	{d18-d19}, [r2]
   14150:	add	r2, r3, #32
   14154:	vst1.32	{d16-d17}, [r4]
   14158:	vst1.32	{d20-d21}, [r2]
   1415c:	str	r1, [sp, #48]	; 0x30
   14160:	mvn	r2, #0
   14164:	ldr	r1, [sp, #60]	; 0x3c
   14168:	orr	r1, r1, #67108864	; 0x4000000
   1416c:	str	r1, [sp, #60]	; 0x3c
   14170:	mov	r1, ip
   14174:	bl	13c04 <__assert_fail@plt+0x2b7c>
   14178:	sub	sp, fp, #8
   1417c:	pop	{r4, sl, fp, pc}
   14180:	bl	1107c <abort@plt>
   14184:	push	{r4, r5, r6, sl, fp, lr}
   14188:	add	fp, sp, #16
   1418c:	sub	sp, sp, #48	; 0x30
   14190:	mov	ip, r3
   14194:	movw	r3, #33128	; 0x8168
   14198:	mov	r6, #32
   1419c:	cmp	r1, #0
   141a0:	mov	r4, sp
   141a4:	movt	r3, #2
   141a8:	cmpne	r2, #0
   141ac:	add	r5, r4, #16
   141b0:	add	lr, r3, #16
   141b4:	vld1.64	{d16-d17}, [r3], r6
   141b8:	vld1.64	{d18-d19}, [lr]
   141bc:	vld1.64	{d20-d21}, [r3]
   141c0:	mov	r3, #10
   141c4:	vst1.64	{d16-d17}, [r4], r6
   141c8:	vst1.64	{d18-d19}, [r5]
   141cc:	vst1.64	{d20-d21}, [r4]
   141d0:	str	r3, [sp]
   141d4:	bne	141dc <__assert_fail@plt+0x3154>
   141d8:	bl	1107c <abort@plt>
   141dc:	str	r2, [sp, #44]	; 0x2c
   141e0:	str	r1, [sp, #40]	; 0x28
   141e4:	mov	r3, sp
   141e8:	mov	r1, ip
   141ec:	mvn	r2, #0
   141f0:	bl	13c04 <__assert_fail@plt+0x2b7c>
   141f4:	sub	sp, fp, #16
   141f8:	pop	{r4, r5, r6, sl, fp, pc}
   141fc:	push	{r4, r5, r6, sl, fp, lr}
   14200:	add	fp, sp, #16
   14204:	sub	sp, sp, #48	; 0x30
   14208:	mov	lr, r3
   1420c:	movw	r3, #33128	; 0x8168
   14210:	mov	r6, #32
   14214:	cmp	r1, #0
   14218:	mov	r4, sp
   1421c:	movt	r3, #2
   14220:	cmpne	r2, #0
   14224:	add	r5, r4, #16
   14228:	add	ip, r3, #16
   1422c:	vld1.64	{d16-d17}, [r3], r6
   14230:	vld1.64	{d18-d19}, [ip]
   14234:	vld1.64	{d20-d21}, [r3]
   14238:	mov	r3, #10
   1423c:	vst1.64	{d16-d17}, [r4], r6
   14240:	vst1.64	{d18-d19}, [r5]
   14244:	vst1.64	{d20-d21}, [r4]
   14248:	str	r3, [sp]
   1424c:	bne	14254 <__assert_fail@plt+0x31cc>
   14250:	bl	1107c <abort@plt>
   14254:	ldr	ip, [fp, #8]
   14258:	str	r2, [sp, #44]	; 0x2c
   1425c:	str	r1, [sp, #40]	; 0x28
   14260:	mov	r3, sp
   14264:	mov	r1, lr
   14268:	mov	r2, ip
   1426c:	bl	13c04 <__assert_fail@plt+0x2b7c>
   14270:	sub	sp, fp, #16
   14274:	pop	{r4, r5, r6, sl, fp, pc}
   14278:	push	{r4, sl, fp, lr}
   1427c:	add	fp, sp, #8
   14280:	sub	sp, sp, #48	; 0x30
   14284:	movw	r3, #33128	; 0x8168
   14288:	mov	lr, #32
   1428c:	mov	ip, r2
   14290:	cmp	r0, #0
   14294:	movt	r3, #2
   14298:	cmpne	r1, #0
   1429c:	add	r2, r3, #16
   142a0:	vld1.64	{d16-d17}, [r3], lr
   142a4:	vld1.64	{d20-d21}, [r3]
   142a8:	vld1.64	{d18-d19}, [r2]
   142ac:	mov	r2, sp
   142b0:	add	r4, r2, #16
   142b4:	vst1.64	{d16-d17}, [r2], lr
   142b8:	vst1.64	{d20-d21}, [r2]
   142bc:	mov	r2, #10
   142c0:	vst1.64	{d18-d19}, [r4]
   142c4:	str	r2, [sp]
   142c8:	bne	142d0 <__assert_fail@plt+0x3248>
   142cc:	bl	1107c <abort@plt>
   142d0:	str	r1, [sp, #44]	; 0x2c
   142d4:	str	r0, [sp, #40]	; 0x28
   142d8:	mov	r3, sp
   142dc:	mov	r0, #0
   142e0:	mov	r1, ip
   142e4:	mvn	r2, #0
   142e8:	bl	13c04 <__assert_fail@plt+0x2b7c>
   142ec:	sub	sp, fp, #8
   142f0:	pop	{r4, sl, fp, pc}
   142f4:	push	{r4, r5, fp, lr}
   142f8:	add	fp, sp, #8
   142fc:	sub	sp, sp, #48	; 0x30
   14300:	mov	ip, r3
   14304:	movw	r3, #33128	; 0x8168
   14308:	mov	r4, #32
   1430c:	mov	lr, r2
   14310:	cmp	r0, #0
   14314:	movt	r3, #2
   14318:	cmpne	r1, #0
   1431c:	add	r2, r3, #16
   14320:	vld1.64	{d16-d17}, [r3], r4
   14324:	vld1.64	{d20-d21}, [r3]
   14328:	vld1.64	{d18-d19}, [r2]
   1432c:	mov	r2, sp
   14330:	add	r5, r2, #16
   14334:	vst1.64	{d16-d17}, [r2], r4
   14338:	vst1.64	{d20-d21}, [r2]
   1433c:	mov	r2, #10
   14340:	vst1.64	{d18-d19}, [r5]
   14344:	str	r2, [sp]
   14348:	bne	14350 <__assert_fail@plt+0x32c8>
   1434c:	bl	1107c <abort@plt>
   14350:	str	r1, [sp, #44]	; 0x2c
   14354:	str	r0, [sp, #40]	; 0x28
   14358:	mov	r3, sp
   1435c:	mov	r0, #0
   14360:	mov	r1, lr
   14364:	mov	r2, ip
   14368:	bl	13c04 <__assert_fail@plt+0x2b7c>
   1436c:	sub	sp, fp, #8
   14370:	pop	{r4, r5, fp, pc}
   14374:	movw	r3, #33024	; 0x8100
   14378:	movt	r3, #2
   1437c:	b	13c04 <__assert_fail@plt+0x2b7c>
   14380:	movw	r3, #33024	; 0x8100
   14384:	mov	r2, r1
   14388:	mov	r1, r0
   1438c:	mov	r0, #0
   14390:	movt	r3, #2
   14394:	b	13c04 <__assert_fail@plt+0x2b7c>
   14398:	movw	r3, #33024	; 0x8100
   1439c:	mvn	r2, #0
   143a0:	movt	r3, #2
   143a4:	b	13c04 <__assert_fail@plt+0x2b7c>
   143a8:	movw	r3, #33024	; 0x8100
   143ac:	mov	r1, r0
   143b0:	mov	r0, #0
   143b4:	mvn	r2, #0
   143b8:	movt	r3, #2
   143bc:	b	13c04 <__assert_fail@plt+0x2b7c>
   143c0:	push	{r4, r5, fp, lr}
   143c4:	add	fp, sp, #8
   143c8:	mov	r5, r0
   143cc:	mov	r4, r1
   143d0:	mov	r0, #0
   143d4:	mov	r2, #5
   143d8:	mov	r1, r5
   143dc:	bl	10eb4 <dcgettext@plt>
   143e0:	cmp	r0, r5
   143e4:	popne	{r4, r5, fp, pc}
   143e8:	bl	16ba0 <__assert_fail@plt+0x5b18>
   143ec:	ldrb	r1, [r0]
   143f0:	and	r1, r1, #223	; 0xdf
   143f4:	cmp	r1, #71	; 0x47
   143f8:	beq	14460 <__assert_fail@plt+0x33d8>
   143fc:	cmp	r1, #85	; 0x55
   14400:	bne	144b8 <__assert_fail@plt+0x3430>
   14404:	ldrb	r1, [r0, #1]
   14408:	and	r1, r1, #223	; 0xdf
   1440c:	cmp	r1, #84	; 0x54
   14410:	bne	144b8 <__assert_fail@plt+0x3430>
   14414:	ldrb	r1, [r0, #2]
   14418:	and	r1, r1, #223	; 0xdf
   1441c:	cmp	r1, #70	; 0x46
   14420:	bne	144b8 <__assert_fail@plt+0x3430>
   14424:	ldrb	r1, [r0, #3]
   14428:	cmp	r1, #45	; 0x2d
   1442c:	bne	144b8 <__assert_fail@plt+0x3430>
   14430:	ldrb	r1, [r0, #4]
   14434:	cmp	r1, #56	; 0x38
   14438:	bne	144b8 <__assert_fail@plt+0x3430>
   1443c:	ldrb	r0, [r0, #5]
   14440:	cmp	r0, #0
   14444:	bne	144b8 <__assert_fail@plt+0x3430>
   14448:	ldrb	r1, [r5]
   1444c:	movw	r2, #30765	; 0x782d
   14450:	movw	r0, #30769	; 0x7831
   14454:	movt	r2, #1
   14458:	movt	r0, #1
   1445c:	b	144e8 <__assert_fail@plt+0x3460>
   14460:	ldrb	r1, [r0, #1]
   14464:	and	r1, r1, #223	; 0xdf
   14468:	cmp	r1, #66	; 0x42
   1446c:	bne	144b8 <__assert_fail@plt+0x3430>
   14470:	ldrb	r1, [r0, #2]
   14474:	cmp	r1, #49	; 0x31
   14478:	bne	144b8 <__assert_fail@plt+0x3430>
   1447c:	ldrb	r1, [r0, #3]
   14480:	cmp	r1, #56	; 0x38
   14484:	bne	144b8 <__assert_fail@plt+0x3430>
   14488:	ldrb	r1, [r0, #4]
   1448c:	cmp	r1, #48	; 0x30
   14490:	bne	144b8 <__assert_fail@plt+0x3430>
   14494:	ldrb	r1, [r0, #5]
   14498:	cmp	r1, #51	; 0x33
   1449c:	bne	144b8 <__assert_fail@plt+0x3430>
   144a0:	ldrb	r1, [r0, #6]
   144a4:	cmp	r1, #48	; 0x30
   144a8:	bne	144b8 <__assert_fail@plt+0x3430>
   144ac:	ldrb	r0, [r0, #7]
   144b0:	cmp	r0, #0
   144b4:	beq	144d4 <__assert_fail@plt+0x344c>
   144b8:	movw	r1, #30759	; 0x7827
   144bc:	movw	r0, #30763	; 0x782b
   144c0:	cmp	r4, #9
   144c4:	movt	r1, #1
   144c8:	movt	r0, #1
   144cc:	moveq	r0, r1
   144d0:	pop	{r4, r5, fp, pc}
   144d4:	ldrb	r1, [r5]
   144d8:	movw	r2, #30773	; 0x7835
   144dc:	movw	r0, #30777	; 0x7839
   144e0:	movt	r2, #1
   144e4:	movt	r0, #1
   144e8:	cmp	r1, #96	; 0x60
   144ec:	moveq	r0, r2
   144f0:	pop	{r4, r5, fp, pc}
   144f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   144f8:	add	fp, sp, #24
   144fc:	sub	sp, sp, #32
   14500:	ldr	r6, [fp, #12]
   14504:	ldr	r7, [fp, #8]
   14508:	mov	r4, r2
   1450c:	mov	r8, r0
   14510:	cmp	r1, #0
   14514:	beq	1453c <__assert_fail@plt+0x34b4>
   14518:	movw	r2, #30864	; 0x7890
   1451c:	mov	r5, r1
   14520:	str	r3, [sp, #4]
   14524:	str	r4, [sp]
   14528:	mov	r0, r8
   1452c:	mov	r1, #1
   14530:	movt	r2, #1
   14534:	mov	r3, r5
   14538:	b	14554 <__assert_fail@plt+0x34cc>
   1453c:	movw	r2, #30876	; 0x789c
   14540:	str	r3, [sp]
   14544:	mov	r0, r8
   14548:	mov	r1, #1
   1454c:	mov	r3, r4
   14550:	movt	r2, #1
   14554:	bl	10fe0 <__fprintf_chk@plt>
   14558:	movw	r1, #30883	; 0x78a3
   1455c:	mov	r0, #0
   14560:	mov	r2, #5
   14564:	movt	r1, #1
   14568:	bl	10eb4 <dcgettext@plt>
   1456c:	movw	r2, #31601	; 0x7b71
   14570:	mov	r3, r0
   14574:	movw	r0, #2022	; 0x7e6
   14578:	mov	r1, #1
   1457c:	movt	r2, #1
   14580:	str	r0, [sp]
   14584:	mov	r0, r8
   14588:	bl	10fe0 <__fprintf_chk@plt>
   1458c:	movw	r4, #30055	; 0x7567
   14590:	mov	r1, r8
   14594:	movt	r4, #1
   14598:	mov	r0, r4
   1459c:	bl	10e30 <fputs_unlocked@plt>
   145a0:	movw	r1, #30887	; 0x78a7
   145a4:	mov	r0, #0
   145a8:	mov	r2, #5
   145ac:	movt	r1, #1
   145b0:	bl	10eb4 <dcgettext@plt>
   145b4:	movw	r3, #31058	; 0x7952
   145b8:	mov	r2, r0
   145bc:	mov	r0, r8
   145c0:	mov	r1, #1
   145c4:	movt	r3, #1
   145c8:	bl	10fe0 <__fprintf_chk@plt>
   145cc:	mov	r0, r4
   145d0:	mov	r1, r8
   145d4:	bl	10e30 <fputs_unlocked@plt>
   145d8:	cmp	r6, #9
   145dc:	bhi	14618 <__assert_fail@plt+0x3590>
   145e0:	add	r0, pc, #0
   145e4:	ldr	pc, [r0, r6, lsl #2]
   145e8:	andeq	r4, r1, r0, lsl r6
   145ec:	andeq	r4, r1, r4, lsr #12
   145f0:	andeq	r4, r1, r4, asr r6
   145f4:	andeq	r4, r1, ip, ror r6
   145f8:	andeq	r4, r1, r4, lsr #13
   145fc:	andeq	r4, r1, ip, asr #13
   14600:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14604:	andeq	r4, r1, ip, lsr #14
   14608:	andeq	r4, r1, ip, asr #15
   1460c:	andeq	r4, r1, r4, ror r7
   14610:	sub	sp, fp, #24
   14614:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14618:	movw	r1, #31411	; 0x7ab3
   1461c:	movt	r1, #1
   14620:	b	1477c <__assert_fail@plt+0x36f4>
   14624:	movw	r1, #31092	; 0x7974
   14628:	mov	r0, #0
   1462c:	mov	r2, #5
   14630:	movt	r1, #1
   14634:	bl	10eb4 <dcgettext@plt>
   14638:	ldr	r3, [r7]
   1463c:	mov	r2, r0
   14640:	mov	r0, r8
   14644:	mov	r1, #1
   14648:	sub	sp, fp, #24
   1464c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14650:	b	10fe0 <__fprintf_chk@plt>
   14654:	movw	r1, #31108	; 0x7984
   14658:	mov	r0, #0
   1465c:	mov	r2, #5
   14660:	movt	r1, #1
   14664:	bl	10eb4 <dcgettext@plt>
   14668:	mov	r2, r0
   1466c:	ldr	r3, [r7]
   14670:	ldr	r0, [r7, #4]
   14674:	str	r0, [sp]
   14678:	b	14768 <__assert_fail@plt+0x36e0>
   1467c:	movw	r1, #31131	; 0x799b
   14680:	mov	r0, #0
   14684:	mov	r2, #5
   14688:	movt	r1, #1
   1468c:	bl	10eb4 <dcgettext@plt>
   14690:	mov	r2, r0
   14694:	ldr	r3, [r7]
   14698:	ldmib	r7, {r0, r1}
   1469c:	stm	sp, {r0, r1}
   146a0:	b	14768 <__assert_fail@plt+0x36e0>
   146a4:	movw	r1, #31159	; 0x79b7
   146a8:	mov	r0, #0
   146ac:	mov	r2, #5
   146b0:	movt	r1, #1
   146b4:	bl	10eb4 <dcgettext@plt>
   146b8:	ldr	r3, [r7]
   146bc:	mov	r2, r0
   146c0:	ldmib	r7, {r0, r1, r7}
   146c4:	stm	sp, {r0, r1, r7}
   146c8:	b	14768 <__assert_fail@plt+0x36e0>
   146cc:	movw	r1, #31191	; 0x79d7
   146d0:	mov	r0, #0
   146d4:	mov	r2, #5
   146d8:	movt	r1, #1
   146dc:	bl	10eb4 <dcgettext@plt>
   146e0:	ldr	r3, [r7]
   146e4:	mov	r2, r0
   146e8:	ldmib	r7, {r0, r1, r6, r7}
   146ec:	stm	sp, {r0, r1, r6, r7}
   146f0:	b	14768 <__assert_fail@plt+0x36e0>
   146f4:	movw	r1, #31227	; 0x79fb
   146f8:	mov	r0, #0
   146fc:	mov	r2, #5
   14700:	movt	r1, #1
   14704:	bl	10eb4 <dcgettext@plt>
   14708:	mov	r2, r0
   1470c:	ldr	r3, [r7]
   14710:	ldmib	r7, {r0, r1, r6}
   14714:	ldr	r5, [r7, #16]
   14718:	ldr	r7, [r7, #20]
   1471c:	stm	sp, {r0, r1, r6}
   14720:	str	r5, [sp, #12]
   14724:	str	r7, [sp, #16]
   14728:	b	14768 <__assert_fail@plt+0x36e0>
   1472c:	movw	r1, #31267	; 0x7a23
   14730:	mov	r0, #0
   14734:	mov	r2, #5
   14738:	movt	r1, #1
   1473c:	bl	10eb4 <dcgettext@plt>
   14740:	mov	r2, r0
   14744:	ldr	r3, [r7]
   14748:	ldmib	r7, {r0, r1, r6}
   1474c:	ldr	r5, [r7, #16]
   14750:	ldr	r4, [r7, #20]
   14754:	ldr	r7, [r7, #24]
   14758:	stm	sp, {r0, r1, r6}
   1475c:	str	r5, [sp, #12]
   14760:	str	r4, [sp, #16]
   14764:	str	r7, [sp, #20]
   14768:	mov	r0, r8
   1476c:	mov	r1, #1
   14770:	b	1481c <__assert_fail@plt+0x3794>
   14774:	movw	r1, #31359	; 0x7a7f
   14778:	movt	r1, #1
   1477c:	mov	r0, #0
   14780:	mov	r2, #5
   14784:	bl	10eb4 <dcgettext@plt>
   14788:	mov	ip, r0
   1478c:	ldr	r3, [r7]
   14790:	ldr	r0, [r7, #4]
   14794:	ldr	r1, [r7, #8]
   14798:	ldr	r6, [r7, #12]
   1479c:	ldr	r5, [r7, #16]
   147a0:	ldr	r4, [r7, #20]
   147a4:	ldr	r2, [r7, #24]
   147a8:	ldr	lr, [r7, #28]
   147ac:	ldr	r7, [r7, #32]
   147b0:	stm	sp, {r0, r1, r6}
   147b4:	str	r5, [sp, #12]
   147b8:	str	r4, [sp, #16]
   147bc:	str	r2, [sp, #20]
   147c0:	str	lr, [sp, #24]
   147c4:	str	r7, [sp, #28]
   147c8:	b	14810 <__assert_fail@plt+0x3788>
   147cc:	movw	r1, #31311	; 0x7a4f
   147d0:	mov	r0, #0
   147d4:	mov	r2, #5
   147d8:	movt	r1, #1
   147dc:	bl	10eb4 <dcgettext@plt>
   147e0:	mov	ip, r0
   147e4:	ldr	r3, [r7]
   147e8:	ldmib	r7, {r0, r1, r6}
   147ec:	ldr	r5, [r7, #16]
   147f0:	ldr	r4, [r7, #20]
   147f4:	ldr	r2, [r7, #24]
   147f8:	ldr	r7, [r7, #28]
   147fc:	stm	sp, {r0, r1, r6}
   14800:	str	r5, [sp, #12]
   14804:	str	r4, [sp, #16]
   14808:	str	r2, [sp, #20]
   1480c:	str	r7, [sp, #24]
   14810:	mov	r0, r8
   14814:	mov	r1, #1
   14818:	mov	r2, ip
   1481c:	bl	10fe0 <__fprintf_chk@plt>
   14820:	sub	sp, fp, #24
   14824:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14828:	push	{r4, sl, fp, lr}
   1482c:	add	fp, sp, #8
   14830:	sub	sp, sp, #8
   14834:	ldr	ip, [fp, #8]
   14838:	mov	lr, #0
   1483c:	ldr	r4, [ip, lr, lsl #2]
   14840:	add	lr, lr, #1
   14844:	cmp	r4, #0
   14848:	bne	1483c <__assert_fail@plt+0x37b4>
   1484c:	sub	r4, lr, #1
   14850:	str	ip, [sp]
   14854:	str	r4, [sp, #4]
   14858:	bl	144f4 <__assert_fail@plt+0x346c>
   1485c:	sub	sp, fp, #8
   14860:	pop	{r4, sl, fp, pc}
   14864:	push	{fp, lr}
   14868:	mov	fp, sp
   1486c:	sub	sp, sp, #48	; 0x30
   14870:	ldr	ip, [fp, #8]
   14874:	ldr	lr, [ip]
   14878:	cmp	lr, #0
   1487c:	str	lr, [sp, #8]
   14880:	beq	1491c <__assert_fail@plt+0x3894>
   14884:	ldr	lr, [ip, #4]
   14888:	cmp	lr, #0
   1488c:	str	lr, [sp, #12]
   14890:	beq	14924 <__assert_fail@plt+0x389c>
   14894:	ldr	lr, [ip, #8]
   14898:	cmp	lr, #0
   1489c:	str	lr, [sp, #16]
   148a0:	beq	1492c <__assert_fail@plt+0x38a4>
   148a4:	ldr	lr, [ip, #12]
   148a8:	cmp	lr, #0
   148ac:	str	lr, [sp, #20]
   148b0:	beq	14934 <__assert_fail@plt+0x38ac>
   148b4:	ldr	lr, [ip, #16]
   148b8:	cmp	lr, #0
   148bc:	str	lr, [sp, #24]
   148c0:	beq	1493c <__assert_fail@plt+0x38b4>
   148c4:	ldr	lr, [ip, #20]
   148c8:	cmp	lr, #0
   148cc:	str	lr, [sp, #28]
   148d0:	beq	14944 <__assert_fail@plt+0x38bc>
   148d4:	ldr	lr, [ip, #24]
   148d8:	cmp	lr, #0
   148dc:	str	lr, [sp, #32]
   148e0:	beq	1494c <__assert_fail@plt+0x38c4>
   148e4:	ldr	lr, [ip, #28]
   148e8:	cmp	lr, #0
   148ec:	str	lr, [sp, #36]	; 0x24
   148f0:	beq	14954 <__assert_fail@plt+0x38cc>
   148f4:	ldr	lr, [ip, #32]
   148f8:	cmp	lr, #0
   148fc:	str	lr, [sp, #40]	; 0x28
   14900:	beq	1495c <__assert_fail@plt+0x38d4>
   14904:	ldr	lr, [ip, #36]	; 0x24
   14908:	mov	ip, #10
   1490c:	cmp	lr, #0
   14910:	str	lr, [sp, #44]	; 0x2c
   14914:	movweq	ip, #9
   14918:	b	14960 <__assert_fail@plt+0x38d8>
   1491c:	mov	ip, #0
   14920:	b	14960 <__assert_fail@plt+0x38d8>
   14924:	mov	ip, #1
   14928:	b	14960 <__assert_fail@plt+0x38d8>
   1492c:	mov	ip, #2
   14930:	b	14960 <__assert_fail@plt+0x38d8>
   14934:	mov	ip, #3
   14938:	b	14960 <__assert_fail@plt+0x38d8>
   1493c:	mov	ip, #4
   14940:	b	14960 <__assert_fail@plt+0x38d8>
   14944:	mov	ip, #5
   14948:	b	14960 <__assert_fail@plt+0x38d8>
   1494c:	mov	ip, #6
   14950:	b	14960 <__assert_fail@plt+0x38d8>
   14954:	mov	ip, #7
   14958:	b	14960 <__assert_fail@plt+0x38d8>
   1495c:	mov	ip, #8
   14960:	add	lr, sp, #8
   14964:	str	ip, [sp, #4]
   14968:	str	lr, [sp]
   1496c:	bl	144f4 <__assert_fail@plt+0x346c>
   14970:	mov	sp, fp
   14974:	pop	{fp, pc}
   14978:	push	{fp, lr}
   1497c:	mov	fp, sp
   14980:	sub	sp, sp, #56	; 0x38
   14984:	add	ip, fp, #8
   14988:	str	ip, [sp, #12]
   1498c:	ldr	lr, [fp, #8]
   14990:	cmp	lr, #0
   14994:	str	lr, [sp, #16]
   14998:	beq	14a34 <__assert_fail@plt+0x39ac>
   1499c:	ldr	lr, [ip, #4]
   149a0:	cmp	lr, #0
   149a4:	str	lr, [sp, #20]
   149a8:	beq	14a3c <__assert_fail@plt+0x39b4>
   149ac:	ldr	lr, [ip, #8]
   149b0:	cmp	lr, #0
   149b4:	str	lr, [sp, #24]
   149b8:	beq	14a44 <__assert_fail@plt+0x39bc>
   149bc:	ldr	lr, [ip, #12]
   149c0:	cmp	lr, #0
   149c4:	str	lr, [sp, #28]
   149c8:	beq	14a4c <__assert_fail@plt+0x39c4>
   149cc:	ldr	lr, [ip, #16]
   149d0:	cmp	lr, #0
   149d4:	str	lr, [sp, #32]
   149d8:	beq	14a54 <__assert_fail@plt+0x39cc>
   149dc:	ldr	lr, [ip, #20]
   149e0:	cmp	lr, #0
   149e4:	str	lr, [sp, #36]	; 0x24
   149e8:	beq	14a5c <__assert_fail@plt+0x39d4>
   149ec:	ldr	lr, [ip, #24]
   149f0:	cmp	lr, #0
   149f4:	str	lr, [sp, #40]	; 0x28
   149f8:	beq	14a64 <__assert_fail@plt+0x39dc>
   149fc:	ldr	lr, [ip, #28]
   14a00:	cmp	lr, #0
   14a04:	str	lr, [sp, #44]	; 0x2c
   14a08:	beq	14a6c <__assert_fail@plt+0x39e4>
   14a0c:	ldr	lr, [ip, #32]
   14a10:	cmp	lr, #0
   14a14:	str	lr, [sp, #48]	; 0x30
   14a18:	beq	14a74 <__assert_fail@plt+0x39ec>
   14a1c:	ldr	lr, [ip, #36]	; 0x24
   14a20:	mov	ip, #10
   14a24:	cmp	lr, #0
   14a28:	str	lr, [sp, #52]	; 0x34
   14a2c:	movweq	ip, #9
   14a30:	b	14a78 <__assert_fail@plt+0x39f0>
   14a34:	mov	ip, #0
   14a38:	b	14a78 <__assert_fail@plt+0x39f0>
   14a3c:	mov	ip, #1
   14a40:	b	14a78 <__assert_fail@plt+0x39f0>
   14a44:	mov	ip, #2
   14a48:	b	14a78 <__assert_fail@plt+0x39f0>
   14a4c:	mov	ip, #3
   14a50:	b	14a78 <__assert_fail@plt+0x39f0>
   14a54:	mov	ip, #4
   14a58:	b	14a78 <__assert_fail@plt+0x39f0>
   14a5c:	mov	ip, #5
   14a60:	b	14a78 <__assert_fail@plt+0x39f0>
   14a64:	mov	ip, #6
   14a68:	b	14a78 <__assert_fail@plt+0x39f0>
   14a6c:	mov	ip, #7
   14a70:	b	14a78 <__assert_fail@plt+0x39f0>
   14a74:	mov	ip, #8
   14a78:	add	lr, sp, #16
   14a7c:	str	ip, [sp, #4]
   14a80:	str	lr, [sp]
   14a84:	bl	144f4 <__assert_fail@plt+0x346c>
   14a88:	mov	sp, fp
   14a8c:	pop	{fp, pc}
   14a90:	push	{fp, lr}
   14a94:	mov	fp, sp
   14a98:	movw	r0, #33100	; 0x814c
   14a9c:	movt	r0, #2
   14aa0:	ldr	r1, [r0]
   14aa4:	movw	r0, #30055	; 0x7567
   14aa8:	movt	r0, #1
   14aac:	bl	10e30 <fputs_unlocked@plt>
   14ab0:	movw	r1, #31471	; 0x7aef
   14ab4:	mov	r0, #0
   14ab8:	mov	r2, #5
   14abc:	movt	r1, #1
   14ac0:	bl	10eb4 <dcgettext@plt>
   14ac4:	movw	r2, #31491	; 0x7b03
   14ac8:	mov	r1, r0
   14acc:	mov	r0, #1
   14ad0:	movt	r2, #1
   14ad4:	bl	10fc8 <__printf_chk@plt>
   14ad8:	movw	r1, #31513	; 0x7b19
   14adc:	mov	r0, #0
   14ae0:	mov	r2, #5
   14ae4:	movt	r1, #1
   14ae8:	bl	10eb4 <dcgettext@plt>
   14aec:	movw	r2, #29565	; 0x737d
   14af0:	movw	r3, #29864	; 0x74a8
   14af4:	mov	r1, r0
   14af8:	mov	r0, #1
   14afc:	movt	r2, #1
   14b00:	movt	r3, #1
   14b04:	bl	10fc8 <__printf_chk@plt>
   14b08:	movw	r1, #31533	; 0x7b2d
   14b0c:	mov	r0, #0
   14b10:	mov	r2, #5
   14b14:	movt	r1, #1
   14b18:	bl	10eb4 <dcgettext@plt>
   14b1c:	movw	r2, #31572	; 0x7b54
   14b20:	mov	r1, r0
   14b24:	mov	r0, #1
   14b28:	movt	r2, #1
   14b2c:	pop	{fp, lr}
   14b30:	b	10fc8 <__printf_chk@plt>
   14b34:	push	{r4, r5, r6, sl, fp, lr}
   14b38:	add	fp, sp, #16
   14b3c:	mov	r4, r2
   14b40:	mov	r5, r1
   14b44:	mov	r6, r0
   14b48:	bl	16c3c <__assert_fail@plt+0x5bb4>
   14b4c:	cmp	r0, #0
   14b50:	popne	{r4, r5, r6, sl, fp, pc}
   14b54:	cmp	r6, #0
   14b58:	beq	14b6c <__assert_fail@plt+0x3ae4>
   14b5c:	cmp	r5, #0
   14b60:	cmpne	r4, #0
   14b64:	bne	14b6c <__assert_fail@plt+0x3ae4>
   14b68:	pop	{r4, r5, r6, sl, fp, pc}
   14b6c:	bl	150e8 <__assert_fail@plt+0x4060>
   14b70:	push	{r4, r5, r6, sl, fp, lr}
   14b74:	add	fp, sp, #16
   14b78:	mov	r4, r2
   14b7c:	mov	r5, r1
   14b80:	mov	r6, r0
   14b84:	bl	16c3c <__assert_fail@plt+0x5bb4>
   14b88:	cmp	r0, #0
   14b8c:	popne	{r4, r5, r6, sl, fp, pc}
   14b90:	cmp	r6, #0
   14b94:	beq	14ba8 <__assert_fail@plt+0x3b20>
   14b98:	cmp	r5, #0
   14b9c:	cmpne	r4, #0
   14ba0:	bne	14ba8 <__assert_fail@plt+0x3b20>
   14ba4:	pop	{r4, r5, r6, sl, fp, pc}
   14ba8:	bl	150e8 <__assert_fail@plt+0x4060>
   14bac:	push	{fp, lr}
   14bb0:	mov	fp, sp
   14bb4:	bl	16a98 <__assert_fail@plt+0x5a10>
   14bb8:	cmp	r0, #0
   14bbc:	popne	{fp, pc}
   14bc0:	bl	150e8 <__assert_fail@plt+0x4060>
   14bc4:	push	{fp, lr}
   14bc8:	mov	fp, sp
   14bcc:	bl	16a98 <__assert_fail@plt+0x5a10>
   14bd0:	cmp	r0, #0
   14bd4:	popne	{fp, pc}
   14bd8:	bl	150e8 <__assert_fail@plt+0x4060>
   14bdc:	push	{fp, lr}
   14be0:	mov	fp, sp
   14be4:	bl	16a98 <__assert_fail@plt+0x5a10>
   14be8:	cmp	r0, #0
   14bec:	popne	{fp, pc}
   14bf0:	bl	150e8 <__assert_fail@plt+0x4060>
   14bf4:	push	{r4, r5, fp, lr}
   14bf8:	add	fp, sp, #8
   14bfc:	mov	r4, r1
   14c00:	mov	r5, r0
   14c04:	bl	16ac8 <__assert_fail@plt+0x5a40>
   14c08:	cmp	r0, #0
   14c0c:	popne	{r4, r5, fp, pc}
   14c10:	cmp	r5, #0
   14c14:	beq	14c24 <__assert_fail@plt+0x3b9c>
   14c18:	cmp	r4, #0
   14c1c:	bne	14c24 <__assert_fail@plt+0x3b9c>
   14c20:	pop	{r4, r5, fp, pc}
   14c24:	bl	150e8 <__assert_fail@plt+0x4060>
   14c28:	push	{fp, lr}
   14c2c:	mov	fp, sp
   14c30:	cmp	r1, #0
   14c34:	orreq	r1, r1, #1
   14c38:	bl	16ac8 <__assert_fail@plt+0x5a40>
   14c3c:	cmp	r0, #0
   14c40:	popne	{fp, pc}
   14c44:	bl	150e8 <__assert_fail@plt+0x4060>
   14c48:	push	{fp, lr}
   14c4c:	mov	fp, sp
   14c50:	clz	r3, r2
   14c54:	lsr	ip, r3, #5
   14c58:	clz	r3, r1
   14c5c:	lsr	r3, r3, #5
   14c60:	orrs	r3, r3, ip
   14c64:	movwne	r1, #1
   14c68:	movwne	r2, #1
   14c6c:	bl	16c3c <__assert_fail@plt+0x5bb4>
   14c70:	cmp	r0, #0
   14c74:	popne	{fp, pc}
   14c78:	bl	150e8 <__assert_fail@plt+0x4060>
   14c7c:	push	{fp, lr}
   14c80:	mov	fp, sp
   14c84:	mov	r2, r1
   14c88:	mov	r1, r0
   14c8c:	mov	r0, #0
   14c90:	bl	16c3c <__assert_fail@plt+0x5bb4>
   14c94:	cmp	r0, #0
   14c98:	popne	{fp, pc}
   14c9c:	bl	150e8 <__assert_fail@plt+0x4060>
   14ca0:	push	{fp, lr}
   14ca4:	mov	fp, sp
   14ca8:	mov	r2, r1
   14cac:	mov	r1, r0
   14cb0:	clz	r0, r2
   14cb4:	clz	r3, r1
   14cb8:	lsr	r0, r0, #5
   14cbc:	lsr	r3, r3, #5
   14cc0:	orrs	r0, r3, r0
   14cc4:	mov	r0, #0
   14cc8:	movwne	r1, #1
   14ccc:	movwne	r2, #1
   14cd0:	bl	16c3c <__assert_fail@plt+0x5bb4>
   14cd4:	cmp	r0, #0
   14cd8:	popne	{fp, pc}
   14cdc:	bl	150e8 <__assert_fail@plt+0x4060>
   14ce0:	push	{r4, r5, r6, sl, fp, lr}
   14ce4:	add	fp, sp, #16
   14ce8:	ldr	r5, [r1]
   14cec:	mov	r4, r1
   14cf0:	mov	r6, r0
   14cf4:	cmp	r0, #0
   14cf8:	beq	14d10 <__assert_fail@plt+0x3c88>
   14cfc:	mov	r0, #1
   14d00:	add	r0, r0, r5, lsr #1
   14d04:	adds	r5, r5, r0
   14d08:	bcc	14d18 <__assert_fail@plt+0x3c90>
   14d0c:	b	14d54 <__assert_fail@plt+0x3ccc>
   14d10:	cmp	r5, #0
   14d14:	movweq	r5, #64	; 0x40
   14d18:	mov	r0, r6
   14d1c:	mov	r1, r5
   14d20:	mov	r2, #1
   14d24:	bl	16c3c <__assert_fail@plt+0x5bb4>
   14d28:	cmp	r5, #0
   14d2c:	mov	r1, r5
   14d30:	movwne	r1, #1
   14d34:	cmp	r0, #0
   14d38:	bne	14d4c <__assert_fail@plt+0x3cc4>
   14d3c:	clz	r2, r6
   14d40:	lsr	r2, r2, #5
   14d44:	orrs	r1, r2, r1
   14d48:	bne	14d54 <__assert_fail@plt+0x3ccc>
   14d4c:	str	r5, [r4]
   14d50:	pop	{r4, r5, r6, sl, fp, pc}
   14d54:	bl	150e8 <__assert_fail@plt+0x4060>
   14d58:	push	{r4, r5, r6, r7, fp, lr}
   14d5c:	add	fp, sp, #16
   14d60:	ldr	r5, [r1]
   14d64:	mov	r6, r2
   14d68:	mov	r4, r1
   14d6c:	mov	r7, r0
   14d70:	cmp	r0, #0
   14d74:	beq	14d8c <__assert_fail@plt+0x3d04>
   14d78:	mov	r0, #1
   14d7c:	add	r0, r0, r5, lsr #1
   14d80:	adds	r5, r5, r0
   14d84:	bcc	14da4 <__assert_fail@plt+0x3d1c>
   14d88:	b	14dd8 <__assert_fail@plt+0x3d50>
   14d8c:	cmp	r5, #0
   14d90:	bne	14da4 <__assert_fail@plt+0x3d1c>
   14d94:	mov	r0, #64	; 0x40
   14d98:	cmp	r6, #64	; 0x40
   14d9c:	udiv	r5, r0, r6
   14da0:	addhi	r5, r5, #1
   14da4:	mov	r0, r7
   14da8:	mov	r1, r5
   14dac:	mov	r2, r6
   14db0:	bl	16c3c <__assert_fail@plt+0x5bb4>
   14db4:	cmp	r0, #0
   14db8:	bne	14dd0 <__assert_fail@plt+0x3d48>
   14dbc:	cmp	r7, #0
   14dc0:	beq	14dd8 <__assert_fail@plt+0x3d50>
   14dc4:	cmp	r6, #0
   14dc8:	cmpne	r5, #0
   14dcc:	bne	14dd8 <__assert_fail@plt+0x3d50>
   14dd0:	str	r5, [r4]
   14dd4:	pop	{r4, r5, r6, r7, fp, pc}
   14dd8:	bl	150e8 <__assert_fail@plt+0x4060>
   14ddc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14de0:	add	fp, sp, #24
   14de4:	mov	r8, r1
   14de8:	ldr	r1, [r1]
   14dec:	mov	r5, r0
   14df0:	add	r0, r1, r1, asr #1
   14df4:	cmp	r0, r1
   14df8:	mvnvs	r0, #-2147483648	; 0x80000000
   14dfc:	cmp	r0, r3
   14e00:	mov	r7, r0
   14e04:	movgt	r7, r3
   14e08:	cmn	r3, #1
   14e0c:	movle	r7, r0
   14e10:	ldr	r0, [fp, #8]
   14e14:	cmn	r0, #1
   14e18:	ble	14e40 <__assert_fail@plt+0x3db8>
   14e1c:	cmp	r0, #0
   14e20:	beq	14e94 <__assert_fail@plt+0x3e0c>
   14e24:	cmn	r7, #1
   14e28:	ble	14e68 <__assert_fail@plt+0x3de0>
   14e2c:	mvn	r4, #-2147483648	; 0x80000000
   14e30:	udiv	r6, r4, r0
   14e34:	cmp	r6, r7
   14e38:	bge	14e94 <__assert_fail@plt+0x3e0c>
   14e3c:	b	14ea4 <__assert_fail@plt+0x3e1c>
   14e40:	cmn	r7, #1
   14e44:	ble	14e84 <__assert_fail@plt+0x3dfc>
   14e48:	cmn	r0, #1
   14e4c:	beq	14e94 <__assert_fail@plt+0x3e0c>
   14e50:	mov	r6, #-2147483648	; 0x80000000
   14e54:	mvn	r4, #-2147483648	; 0x80000000
   14e58:	sdiv	r6, r6, r0
   14e5c:	cmp	r6, r7
   14e60:	bge	14e94 <__assert_fail@plt+0x3e0c>
   14e64:	b	14ea4 <__assert_fail@plt+0x3e1c>
   14e68:	beq	14e94 <__assert_fail@plt+0x3e0c>
   14e6c:	mov	r6, #-2147483648	; 0x80000000
   14e70:	mvn	r4, #-2147483648	; 0x80000000
   14e74:	sdiv	r6, r6, r7
   14e78:	cmp	r6, r0
   14e7c:	bge	14e94 <__assert_fail@plt+0x3e0c>
   14e80:	b	14ea4 <__assert_fail@plt+0x3e1c>
   14e84:	mvn	r4, #-2147483648	; 0x80000000
   14e88:	sdiv	r6, r4, r0
   14e8c:	cmp	r7, r6
   14e90:	blt	14ea4 <__assert_fail@plt+0x3e1c>
   14e94:	mul	r6, r7, r0
   14e98:	mov	r4, #64	; 0x40
   14e9c:	cmp	r6, #63	; 0x3f
   14ea0:	bgt	14eac <__assert_fail@plt+0x3e24>
   14ea4:	sdiv	r7, r4, r0
   14ea8:	mul	r6, r7, r0
   14eac:	cmp	r5, #0
   14eb0:	moveq	r4, #0
   14eb4:	streq	r4, [r8]
   14eb8:	sub	r4, r7, r1
   14ebc:	cmp	r4, r2
   14ec0:	bge	14f6c <__assert_fail@plt+0x3ee4>
   14ec4:	add	r7, r1, r2
   14ec8:	mov	r6, #0
   14ecc:	mov	r2, #0
   14ed0:	cmp	r7, r3
   14ed4:	movwgt	r6, #1
   14ed8:	cmn	r3, #1
   14edc:	movwgt	r2, #1
   14ee0:	cmp	r7, r1
   14ee4:	bvs	14fa0 <__assert_fail@plt+0x3f18>
   14ee8:	ands	r1, r2, r6
   14eec:	bne	14fa0 <__assert_fail@plt+0x3f18>
   14ef0:	cmn	r0, #1
   14ef4:	ble	14f1c <__assert_fail@plt+0x3e94>
   14ef8:	cmp	r0, #0
   14efc:	beq	14f68 <__assert_fail@plt+0x3ee0>
   14f00:	cmn	r7, #1
   14f04:	ble	14f40 <__assert_fail@plt+0x3eb8>
   14f08:	mvn	r1, #-2147483648	; 0x80000000
   14f0c:	udiv	r1, r1, r0
   14f10:	cmp	r1, r7
   14f14:	bge	14f68 <__assert_fail@plt+0x3ee0>
   14f18:	b	14fa0 <__assert_fail@plt+0x3f18>
   14f1c:	cmn	r7, #1
   14f20:	ble	14f58 <__assert_fail@plt+0x3ed0>
   14f24:	cmn	r0, #1
   14f28:	beq	14f68 <__assert_fail@plt+0x3ee0>
   14f2c:	mov	r1, #-2147483648	; 0x80000000
   14f30:	sdiv	r1, r1, r0
   14f34:	cmp	r1, r7
   14f38:	bge	14f68 <__assert_fail@plt+0x3ee0>
   14f3c:	b	14fa0 <__assert_fail@plt+0x3f18>
   14f40:	beq	14f68 <__assert_fail@plt+0x3ee0>
   14f44:	mov	r1, #-2147483648	; 0x80000000
   14f48:	sdiv	r1, r1, r7
   14f4c:	cmp	r1, r0
   14f50:	bge	14f68 <__assert_fail@plt+0x3ee0>
   14f54:	b	14fa0 <__assert_fail@plt+0x3f18>
   14f58:	mvn	r1, #-2147483648	; 0x80000000
   14f5c:	sdiv	r1, r1, r0
   14f60:	cmp	r7, r1
   14f64:	blt	14fa0 <__assert_fail@plt+0x3f18>
   14f68:	mul	r6, r7, r0
   14f6c:	mov	r0, r5
   14f70:	mov	r1, r6
   14f74:	bl	16ac8 <__assert_fail@plt+0x5a40>
   14f78:	cmp	r6, #0
   14f7c:	movwne	r6, #1
   14f80:	cmp	r0, #0
   14f84:	bne	14f98 <__assert_fail@plt+0x3f10>
   14f88:	clz	r1, r5
   14f8c:	lsr	r1, r1, #5
   14f90:	orrs	r1, r1, r6
   14f94:	bne	14fa0 <__assert_fail@plt+0x3f18>
   14f98:	str	r7, [r8]
   14f9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14fa0:	bl	150e8 <__assert_fail@plt+0x4060>
   14fa4:	push	{fp, lr}
   14fa8:	mov	fp, sp
   14fac:	mov	r1, #1
   14fb0:	bl	16a44 <__assert_fail@plt+0x59bc>
   14fb4:	cmp	r0, #0
   14fb8:	popne	{fp, pc}
   14fbc:	bl	150e8 <__assert_fail@plt+0x4060>
   14fc0:	push	{fp, lr}
   14fc4:	mov	fp, sp
   14fc8:	bl	16a44 <__assert_fail@plt+0x59bc>
   14fcc:	cmp	r0, #0
   14fd0:	popne	{fp, pc}
   14fd4:	bl	150e8 <__assert_fail@plt+0x4060>
   14fd8:	push	{fp, lr}
   14fdc:	mov	fp, sp
   14fe0:	mov	r1, #1
   14fe4:	bl	16a44 <__assert_fail@plt+0x59bc>
   14fe8:	cmp	r0, #0
   14fec:	popne	{fp, pc}
   14ff0:	bl	150e8 <__assert_fail@plt+0x4060>
   14ff4:	push	{fp, lr}
   14ff8:	mov	fp, sp
   14ffc:	bl	16a44 <__assert_fail@plt+0x59bc>
   15000:	cmp	r0, #0
   15004:	popne	{fp, pc}
   15008:	bl	150e8 <__assert_fail@plt+0x4060>
   1500c:	push	{r4, r5, fp, lr}
   15010:	add	fp, sp, #8
   15014:	mov	r5, r0
   15018:	mov	r0, r1
   1501c:	mov	r4, r1
   15020:	bl	16a98 <__assert_fail@plt+0x5a10>
   15024:	cmp	r0, #0
   15028:	beq	1503c <__assert_fail@plt+0x3fb4>
   1502c:	mov	r1, r5
   15030:	mov	r2, r4
   15034:	pop	{r4, r5, fp, lr}
   15038:	b	10e90 <memcpy@plt>
   1503c:	bl	150e8 <__assert_fail@plt+0x4060>
   15040:	push	{r4, r5, fp, lr}
   15044:	add	fp, sp, #8
   15048:	mov	r5, r0
   1504c:	mov	r0, r1
   15050:	mov	r4, r1
   15054:	bl	16a98 <__assert_fail@plt+0x5a10>
   15058:	cmp	r0, #0
   1505c:	beq	15070 <__assert_fail@plt+0x3fe8>
   15060:	mov	r1, r5
   15064:	mov	r2, r4
   15068:	pop	{r4, r5, fp, lr}
   1506c:	b	10e90 <memcpy@plt>
   15070:	bl	150e8 <__assert_fail@plt+0x4060>
   15074:	push	{r4, r5, fp, lr}
   15078:	add	fp, sp, #8
   1507c:	mov	r5, r0
   15080:	add	r0, r1, #1
   15084:	mov	r4, r1
   15088:	bl	16a98 <__assert_fail@plt+0x5a10>
   1508c:	cmp	r0, #0
   15090:	beq	150ac <__assert_fail@plt+0x4024>
   15094:	mov	r1, #0
   15098:	mov	r2, r4
   1509c:	strb	r1, [r0, r4]
   150a0:	mov	r1, r5
   150a4:	pop	{r4, r5, fp, lr}
   150a8:	b	10e90 <memcpy@plt>
   150ac:	bl	150e8 <__assert_fail@plt+0x4060>
   150b0:	push	{r4, r5, fp, lr}
   150b4:	add	fp, sp, #8
   150b8:	mov	r4, r0
   150bc:	bl	10f8c <strlen@plt>
   150c0:	add	r5, r0, #1
   150c4:	mov	r0, r5
   150c8:	bl	16a98 <__assert_fail@plt+0x5a10>
   150cc:	cmp	r0, #0
   150d0:	beq	150e4 <__assert_fail@plt+0x405c>
   150d4:	mov	r1, r4
   150d8:	mov	r2, r5
   150dc:	pop	{r4, r5, fp, lr}
   150e0:	b	10e90 <memcpy@plt>
   150e4:	bl	150e8 <__assert_fail@plt+0x4060>
   150e8:	push	{fp, lr}
   150ec:	mov	fp, sp
   150f0:	movw	r0, #33004	; 0x80ec
   150f4:	movw	r1, #31648	; 0x7ba0
   150f8:	mov	r2, #5
   150fc:	movt	r0, #2
   15100:	movt	r1, #1
   15104:	ldr	r4, [r0]
   15108:	mov	r0, #0
   1510c:	bl	10eb4 <dcgettext@plt>
   15110:	movw	r2, #29544	; 0x7368
   15114:	mov	r3, r0
   15118:	mov	r0, r4
   1511c:	mov	r1, #0
   15120:	movt	r2, #1
   15124:	bl	10f20 <error@plt>
   15128:	bl	1107c <abort@plt>
   1512c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15130:	add	fp, sp, #28
   15134:	sub	sp, sp, #36	; 0x24
   15138:	cmp	r2, #37	; 0x25
   1513c:	bcs	16a24 <__assert_fail@plt+0x599c>
   15140:	ldr	r8, [fp, #8]
   15144:	mov	r9, r3
   15148:	mov	r6, r2
   1514c:	mov	r7, r1
   15150:	mov	r4, r0
   15154:	bl	10fa4 <__errno_location@plt>
   15158:	cmp	r7, #0
   1515c:	add	sl, sp, #32
   15160:	mov	r5, r0
   15164:	mov	r0, #0
   15168:	mov	r2, r6
   1516c:	mov	r3, #0
   15170:	movne	sl, r7
   15174:	str	r0, [r5]
   15178:	mov	r0, r4
   1517c:	mov	r1, sl
   15180:	bl	11040 <__strtoll_internal@plt>
   15184:	mov	r7, r1
   15188:	ldr	r1, [sl]
   1518c:	cmp	r1, r4
   15190:	beq	151c0 <__assert_fail@plt+0x4138>
   15194:	mov	r6, r0
   15198:	ldr	r0, [r5]
   1519c:	cmp	r0, #0
   151a0:	beq	15200 <__assert_fail@plt+0x4178>
   151a4:	mov	r5, #4
   151a8:	cmp	r0, #34	; 0x22
   151ac:	bne	16634 <__assert_fail@plt+0x55ac>
   151b0:	mov	r5, #1
   151b4:	cmp	r8, #0
   151b8:	bne	1520c <__assert_fail@plt+0x4184>
   151bc:	b	16630 <__assert_fail@plt+0x55a8>
   151c0:	mov	r5, #4
   151c4:	cmp	r8, #0
   151c8:	beq	16634 <__assert_fail@plt+0x55ac>
   151cc:	mov	r6, r1
   151d0:	ldrb	r1, [r4]
   151d4:	cmp	r1, #0
   151d8:	beq	16634 <__assert_fail@plt+0x55ac>
   151dc:	mov	r0, r8
   151e0:	bl	10f98 <strchr@plt>
   151e4:	cmp	r0, #0
   151e8:	beq	16634 <__assert_fail@plt+0x55ac>
   151ec:	mov	r1, r6
   151f0:	mov	r5, #0
   151f4:	mov	r6, #1
   151f8:	mov	r7, #0
   151fc:	b	1520c <__assert_fail@plt+0x4184>
   15200:	mov	r5, r0
   15204:	cmp	r8, #0
   15208:	beq	16630 <__assert_fail@plt+0x55a8>
   1520c:	ldrb	r4, [r1]
   15210:	cmp	r4, #0
   15214:	beq	16630 <__assert_fail@plt+0x55a8>
   15218:	str	r1, [sp, #20]
   1521c:	mov	r0, r8
   15220:	mov	r1, r4
   15224:	bl	10f98 <strchr@plt>
   15228:	cmp	r0, #0
   1522c:	beq	154b8 <__assert_fail@plt+0x4430>
   15230:	sub	r0, r4, #69	; 0x45
   15234:	mov	r1, #1
   15238:	mov	r3, #0
   1523c:	mov	r2, #1024	; 0x400
   15240:	cmp	r0, #47	; 0x2f
   15244:	str	r1, [sp, #16]
   15248:	bhi	15384 <__assert_fail@plt+0x42fc>
   1524c:	add	r1, pc, #0
   15250:	ldr	pc, [r1, r0, lsl #2]
   15254:	andeq	r5, r1, r4, lsl r3
   15258:	andeq	r5, r1, r4, lsl #7
   1525c:	andeq	r5, r1, r4, lsl r3
   15260:	andeq	r5, r1, r4, lsl #7
   15264:	andeq	r5, r1, r4, lsl #7
   15268:	andeq	r5, r1, r4, lsl #7
   1526c:	andeq	r5, r1, r4, lsl r3
   15270:	andeq	r5, r1, r4, lsl #7
   15274:	andeq	r5, r1, r4, lsl r3
   15278:	andeq	r5, r1, r4, lsl #7
   1527c:	andeq	r5, r1, r4, lsl #7
   15280:	andeq	r5, r1, r4, lsl r3
   15284:	andeq	r5, r1, r4, lsl #7
   15288:	andeq	r5, r1, r4, lsl #7
   1528c:	andeq	r5, r1, r4, lsl #7
   15290:	andeq	r5, r1, r4, lsl r3
   15294:	andeq	r5, r1, r4, lsl #7
   15298:	andeq	r5, r1, r4, lsl #7
   1529c:	andeq	r5, r1, r4, lsl #7
   152a0:	andeq	r5, r1, r4, lsl #7
   152a4:	andeq	r5, r1, r4, lsl r3
   152a8:	andeq	r5, r1, r4, lsl r3
   152ac:	andeq	r5, r1, r4, lsl #7
   152b0:	andeq	r5, r1, r4, lsl #7
   152b4:	andeq	r5, r1, r4, lsl #7
   152b8:	andeq	r5, r1, r4, lsl #7
   152bc:	andeq	r5, r1, r4, lsl #7
   152c0:	andeq	r5, r1, r4, lsl #7
   152c4:	andeq	r5, r1, r4, lsl #7
   152c8:	andeq	r5, r1, r4, lsl #7
   152cc:	andeq	r5, r1, r4, lsl #7
   152d0:	andeq	r5, r1, r4, lsl #7
   152d4:	andeq	r5, r1, r4, lsl #7
   152d8:	andeq	r5, r1, r4, lsl #7
   152dc:	andeq	r5, r1, r4, lsl r3
   152e0:	andeq	r5, r1, r4, lsl #7
   152e4:	andeq	r5, r1, r4, lsl #7
   152e8:	andeq	r5, r1, r4, lsl #7
   152ec:	andeq	r5, r1, r4, lsl r3
   152f0:	andeq	r5, r1, r4, lsl #7
   152f4:	andeq	r5, r1, r4, lsl r3
   152f8:	andeq	r5, r1, r4, lsl #7
   152fc:	andeq	r5, r1, r4, lsl #7
   15300:	andeq	r5, r1, r4, lsl #7
   15304:	andeq	r5, r1, r4, lsl #7
   15308:	andeq	r5, r1, r4, lsl #7
   1530c:	andeq	r5, r1, r4, lsl #7
   15310:	andeq	r5, r1, r4, lsl r3
   15314:	mov	r0, r8
   15318:	mov	r1, #48	; 0x30
   1531c:	bl	10f98 <strchr@plt>
   15320:	cmp	r0, #0
   15324:	beq	15350 <__assert_fail@plt+0x42c8>
   15328:	ldr	r1, [sp, #20]
   1532c:	ldrb	r0, [r1, #1]
   15330:	cmp	r0, #66	; 0x42
   15334:	cmpne	r0, #68	; 0x44
   15338:	bne	15358 <__assert_fail@plt+0x42d0>
   1533c:	mov	r0, #2
   15340:	mov	r2, #1000	; 0x3e8
   15344:	mov	r3, #0
   15348:	str	r0, [sp, #16]
   1534c:	b	15384 <__assert_fail@plt+0x42fc>
   15350:	mov	r3, #0
   15354:	b	15380 <__assert_fail@plt+0x42f8>
   15358:	cmp	r0, #105	; 0x69
   1535c:	mov	r3, #0
   15360:	bne	15380 <__assert_fail@plt+0x42f8>
   15364:	ldrb	r0, [r1, #2]
   15368:	mov	r1, #1
   1536c:	mov	r2, #1024	; 0x400
   15370:	cmp	r0, #66	; 0x42
   15374:	movweq	r1, #3
   15378:	str	r1, [sp, #16]
   1537c:	b	15384 <__assert_fail@plt+0x42fc>
   15380:	mov	r2, #1024	; 0x400
   15384:	sub	r0, r4, #66	; 0x42
   15388:	cmp	r0, #53	; 0x35
   1538c:	bhi	154b8 <__assert_fail@plt+0x4430>
   15390:	add	r1, pc, #8
   15394:	str	r3, [sp, #28]
   15398:	str	r2, [sp, #24]
   1539c:	ldr	pc, [r1, r0, lsl #2]
   153a0:			; <UNDEFINED> instruction: 0x000155b8
   153a4:			; <UNDEFINED> instruction: 0x000154b8
   153a8:			; <UNDEFINED> instruction: 0x000154b8
   153ac:	andeq	r5, r1, ip, asr #11
   153b0:			; <UNDEFINED> instruction: 0x000154b8
   153b4:	andeq	r5, r1, r8, ror r4
   153b8:			; <UNDEFINED> instruction: 0x000154b8
   153bc:			; <UNDEFINED> instruction: 0x000154b8
   153c0:			; <UNDEFINED> instruction: 0x000154b8
   153c4:	andeq	r5, r1, r0, asr #9
   153c8:			; <UNDEFINED> instruction: 0x000154b8
   153cc:	strdeq	r5, [r1], -r0
   153d0:			; <UNDEFINED> instruction: 0x000154b8
   153d4:			; <UNDEFINED> instruction: 0x000154b8
   153d8:	andeq	r5, r1, r0, lsl r6
   153dc:			; <UNDEFINED> instruction: 0x000154b8
   153e0:			; <UNDEFINED> instruction: 0x000154b8
   153e4:			; <UNDEFINED> instruction: 0x000154b8
   153e8:	andeq	r5, r1, r0, lsr r5
   153ec:			; <UNDEFINED> instruction: 0x000154b8
   153f0:			; <UNDEFINED> instruction: 0x000154b8
   153f4:			; <UNDEFINED> instruction: 0x000154b8
   153f8:			; <UNDEFINED> instruction: 0x000154b8
   153fc:	andeq	r5, r1, r4, asr r6
   15400:	andeq	r5, r1, r4, ror r5
   15404:			; <UNDEFINED> instruction: 0x000154b8
   15408:			; <UNDEFINED> instruction: 0x000154b8
   1540c:			; <UNDEFINED> instruction: 0x000154b8
   15410:			; <UNDEFINED> instruction: 0x000154b8
   15414:			; <UNDEFINED> instruction: 0x000154b8
   15418:			; <UNDEFINED> instruction: 0x000154b8
   1541c:			; <UNDEFINED> instruction: 0x000154b8
   15420:	muleq	r1, r8, r6
   15424:	andeq	r6, r1, r0, lsl r6
   15428:			; <UNDEFINED> instruction: 0x000154b8
   1542c:			; <UNDEFINED> instruction: 0x000154b8
   15430:			; <UNDEFINED> instruction: 0x000154b8
   15434:	andeq	r5, r1, r8, ror r4
   15438:			; <UNDEFINED> instruction: 0x000154b8
   1543c:			; <UNDEFINED> instruction: 0x000154b8
   15440:			; <UNDEFINED> instruction: 0x000154b8
   15444:	andeq	r5, r1, r0, asr #9
   15448:			; <UNDEFINED> instruction: 0x000154b8
   1544c:	strdeq	r5, [r1], -r0
   15450:			; <UNDEFINED> instruction: 0x000154b8
   15454:			; <UNDEFINED> instruction: 0x000154b8
   15458:			; <UNDEFINED> instruction: 0x000154b8
   1545c:			; <UNDEFINED> instruction: 0x000154b8
   15460:			; <UNDEFINED> instruction: 0x000154b8
   15464:			; <UNDEFINED> instruction: 0x000154b8
   15468:	andeq	r5, r1, r0, lsr r5
   1546c:			; <UNDEFINED> instruction: 0x000154b8
   15470:			; <UNDEFINED> instruction: 0x000154b8
   15474:	andeq	r5, r1, ip, lsr #13
   15478:	cmn	r7, #1
   1547c:	str	r9, [sp, #12]
   15480:	ble	156c0 <__assert_fail@plt+0x4638>
   15484:	ldr	r3, [sp, #28]
   15488:	mvn	r0, #0
   1548c:	mvn	r1, #-2147483648	; 0x80000000
   15490:	mvn	r8, #0
   15494:	mvn	r9, #-2147483648	; 0x80000000
   15498:	bl	16e58 <__assert_fail@plt+0x5dd0>
   1549c:	ldr	r2, [sp, #24]
   154a0:	ldr	r3, [sp, #28]
   154a4:	subs	r0, r0, r6
   154a8:	mov	r4, #1
   154ac:	sbcs	r0, r1, r7
   154b0:	bge	15700 <__assert_fail@plt+0x4678>
   154b4:	b	15718 <__assert_fail@plt+0x4690>
   154b8:	orr	r5, r5, #2
   154bc:	b	16630 <__assert_fail@plt+0x55a8>
   154c0:	cmn	r7, #1
   154c4:	ble	15754 <__assert_fail@plt+0x46cc>
   154c8:	ldr	r3, [sp, #28]
   154cc:	mvn	r0, #0
   154d0:	mvn	r1, #-2147483648	; 0x80000000
   154d4:	bl	16e58 <__assert_fail@plt+0x5dd0>
   154d8:	ldr	r2, [sp, #24]
   154dc:	ldr	r3, [sp, #28]
   154e0:	subs	r0, r0, r6
   154e4:	sbcs	r0, r1, r7
   154e8:	bge	15788 <__assert_fail@plt+0x4700>
   154ec:	b	15e98 <__assert_fail@plt+0x4e10>
   154f0:	cmn	r7, #1
   154f4:	str	r9, [sp, #12]
   154f8:	ble	1579c <__assert_fail@plt+0x4714>
   154fc:	ldr	r3, [sp, #28]
   15500:	mvn	r0, #0
   15504:	mvn	r1, #-2147483648	; 0x80000000
   15508:	mvn	r8, #0
   1550c:	mvn	r9, #-2147483648	; 0x80000000
   15510:	bl	16e58 <__assert_fail@plt+0x5dd0>
   15514:	ldr	r2, [sp, #24]
   15518:	ldr	r3, [sp, #28]
   1551c:	subs	r0, r0, r6
   15520:	mov	r4, #1
   15524:	sbcs	r0, r1, r7
   15528:	bge	157dc <__assert_fail@plt+0x4754>
   1552c:	b	157f4 <__assert_fail@plt+0x476c>
   15530:	cmn	r7, #1
   15534:	str	r9, [sp, #12]
   15538:	ble	1582c <__assert_fail@plt+0x47a4>
   1553c:	ldr	r3, [sp, #28]
   15540:	mvn	r0, #0
   15544:	mvn	r1, #-2147483648	; 0x80000000
   15548:	mvn	r9, #-2147483648	; 0x80000000
   1554c:	str	r0, [sp, #8]
   15550:	mvn	r0, #0
   15554:	bl	16e58 <__assert_fail@plt+0x5dd0>
   15558:	ldr	r2, [sp, #24]
   1555c:	ldr	r3, [sp, #28]
   15560:	subs	r0, r0, r6
   15564:	mov	r4, #1
   15568:	sbcs	r0, r1, r7
   1556c:	bge	15870 <__assert_fail@plt+0x47e8>
   15570:	b	1588c <__assert_fail@plt+0x4804>
   15574:	cmp	r7, #0
   15578:	str	r9, [sp, #12]
   1557c:	bmi	15b74 <__assert_fail@plt+0x4aec>
   15580:	ldr	r3, [sp, #28]
   15584:	mvn	r0, #0
   15588:	mvn	r1, #-2147483648	; 0x80000000
   1558c:	mvn	r9, #-2147483648	; 0x80000000
   15590:	str	r0, [sp, #8]
   15594:	mvn	r0, #0
   15598:	bl	16e58 <__assert_fail@plt+0x5dd0>
   1559c:	ldr	r2, [sp, #24]
   155a0:	ldr	r3, [sp, #28]
   155a4:	subs	r0, r0, r6
   155a8:	mov	r4, #1
   155ac:	sbcs	r0, r1, r7
   155b0:	bge	15bb8 <__assert_fail@plt+0x4b30>
   155b4:	b	15bd4 <__assert_fail@plt+0x4b4c>
   155b8:	cmn	r7, #1
   155bc:	ble	15c10 <__assert_fail@plt+0x4b88>
   155c0:	cmp	r7, #2097152	; 0x200000
   155c4:	blt	15c40 <__assert_fail@plt+0x4bb8>
   155c8:	b	15e98 <__assert_fail@plt+0x4e10>
   155cc:	cmp	r7, #0
   155d0:	str	r9, [sp, #12]
   155d4:	bmi	15c50 <__assert_fail@plt+0x4bc8>
   155d8:	ldr	r3, [sp, #28]
   155dc:	mvn	r0, #0
   155e0:	mvn	r1, #-2147483648	; 0x80000000
   155e4:	mvn	r9, #-2147483648	; 0x80000000
   155e8:	str	r0, [sp, #8]
   155ec:	mvn	r0, #0
   155f0:	bl	16e58 <__assert_fail@plt+0x5dd0>
   155f4:	ldr	r2, [sp, #24]
   155f8:	ldr	r3, [sp, #28]
   155fc:	subs	r0, r0, r6
   15600:	mov	r4, #1
   15604:	sbcs	r0, r1, r7
   15608:	bge	15c94 <__assert_fail@plt+0x4c0c>
   1560c:	b	15cb0 <__assert_fail@plt+0x4c28>
   15610:	cmp	r7, #0
   15614:	str	r9, [sp, #12]
   15618:	bmi	15cec <__assert_fail@plt+0x4c64>
   1561c:	ldr	r3, [sp, #28]
   15620:	mvn	r0, #0
   15624:	mvn	r1, #-2147483648	; 0x80000000
   15628:	mvn	r8, #-2147483648	; 0x80000000
   1562c:	str	r0, [sp, #8]
   15630:	mvn	r0, #0
   15634:	bl	16e58 <__assert_fail@plt+0x5dd0>
   15638:	ldr	r2, [sp, #24]
   1563c:	ldr	r3, [sp, #28]
   15640:	subs	r0, r0, r6
   15644:	mov	r4, #1
   15648:	sbcs	r0, r1, r7
   1564c:	bge	15d30 <__assert_fail@plt+0x4ca8>
   15650:	b	15d4c <__assert_fail@plt+0x4cc4>
   15654:	cmp	r7, #0
   15658:	str	r9, [sp, #12]
   1565c:	bmi	15d88 <__assert_fail@plt+0x4d00>
   15660:	ldr	r3, [sp, #28]
   15664:	mvn	r0, #0
   15668:	mvn	r1, #-2147483648	; 0x80000000
   1566c:	mvn	r9, #-2147483648	; 0x80000000
   15670:	str	r0, [sp, #8]
   15674:	mvn	r0, #0
   15678:	bl	16e58 <__assert_fail@plt+0x5dd0>
   1567c:	ldr	r2, [sp, #24]
   15680:	ldr	r3, [sp, #28]
   15684:	subs	r0, r0, r6
   15688:	mov	r4, #1
   1568c:	sbcs	r0, r1, r7
   15690:	bge	15dcc <__assert_fail@plt+0x4d44>
   15694:	b	15de8 <__assert_fail@plt+0x4d60>
   15698:	cmn	r7, #1
   1569c:	ble	15e28 <__assert_fail@plt+0x4da0>
   156a0:	cmp	r7, #4194304	; 0x400000
   156a4:	blt	15e58 <__assert_fail@plt+0x4dd0>
   156a8:	b	15e98 <__assert_fail@plt+0x4e10>
   156ac:	cmn	r7, #1
   156b0:	ble	15e68 <__assert_fail@plt+0x4de0>
   156b4:	cmp	r7, #1073741824	; 0x40000000
   156b8:	bge	15e98 <__assert_fail@plt+0x4e10>
   156bc:	b	15eb8 <__assert_fail@plt+0x4e30>
   156c0:	and	r0, r6, r7
   156c4:	cmn	r0, #1
   156c8:	beq	15700 <__assert_fail@plt+0x4678>
   156cc:	mov	r0, #0
   156d0:	mov	r1, #-2147483648	; 0x80000000
   156d4:	mov	r2, r6
   156d8:	mov	r3, r7
   156dc:	mov	r8, #0
   156e0:	mov	r9, #-2147483648	; 0x80000000
   156e4:	bl	16d84 <__assert_fail@plt+0x5cfc>
   156e8:	ldr	r2, [sp, #24]
   156ec:	ldr	r3, [sp, #28]
   156f0:	mov	r4, #1
   156f4:	subs	r0, r0, r2
   156f8:	sbcs	r0, r1, r3
   156fc:	blt	158c8 <__assert_fail@plt+0x4840>
   15700:	umull	r8, r0, r6, r2
   15704:	mov	r4, #0
   15708:	mla	r0, r6, r3, r0
   1570c:	mla	r9, r7, r2, r0
   15710:	cmp	r9, #0
   15714:	bmi	158c8 <__assert_fail@plt+0x4840>
   15718:	ldr	r3, [sp, #28]
   1571c:	mvn	r0, #-2147483648	; 0x80000000
   15720:	mvn	r1, #-2147483648	; 0x80000000
   15724:	mov	r6, r4
   15728:	mvn	r4, #0
   1572c:	str	r0, [sp, #8]
   15730:	mvn	r0, #0
   15734:	bl	16e58 <__assert_fail@plt+0x5dd0>
   15738:	ldr	r2, [sp, #24]
   1573c:	ldr	r3, [sp, #28]
   15740:	subs	r0, r0, r8
   15744:	mov	r7, #1
   15748:	sbcs	r0, r1, r9
   1574c:	bge	15904 <__assert_fail@plt+0x487c>
   15750:	b	15920 <__assert_fail@plt+0x4898>
   15754:	and	r0, r6, r7
   15758:	cmn	r0, #1
   1575c:	beq	15788 <__assert_fail@plt+0x4700>
   15760:	mov	r0, #0
   15764:	mov	r1, #-2147483648	; 0x80000000
   15768:	mov	r2, r6
   1576c:	mov	r3, r7
   15770:	bl	16d84 <__assert_fail@plt+0x5cfc>
   15774:	ldr	r2, [sp, #24]
   15778:	ldr	r3, [sp, #28]
   1577c:	subs	r0, r0, r2
   15780:	sbcs	r0, r1, r3
   15784:	blt	15e98 <__assert_fail@plt+0x4e10>
   15788:	umull	r0, r1, r6, r2
   1578c:	mla	r1, r6, r3, r1
   15790:	mla	r7, r7, r2, r1
   15794:	mov	r6, r0
   15798:	b	16610 <__assert_fail@plt+0x5588>
   1579c:	and	r0, r6, r7
   157a0:	cmn	r0, #1
   157a4:	beq	157dc <__assert_fail@plt+0x4754>
   157a8:	mov	r0, #0
   157ac:	mov	r1, #-2147483648	; 0x80000000
   157b0:	mov	r2, r6
   157b4:	mov	r3, r7
   157b8:	mov	r8, #0
   157bc:	mov	r9, #-2147483648	; 0x80000000
   157c0:	bl	16d84 <__assert_fail@plt+0x5cfc>
   157c4:	ldr	r2, [sp, #24]
   157c8:	ldr	r3, [sp, #28]
   157cc:	mov	r4, #1
   157d0:	subs	r0, r0, r2
   157d4:	sbcs	r0, r1, r3
   157d8:	blt	159b4 <__assert_fail@plt+0x492c>
   157dc:	umull	r8, r0, r6, r2
   157e0:	mov	r4, #0
   157e4:	mla	r0, r6, r3, r0
   157e8:	mla	r9, r7, r2, r0
   157ec:	cmp	r9, #0
   157f0:	bmi	159b4 <__assert_fail@plt+0x492c>
   157f4:	ldr	r3, [sp, #28]
   157f8:	mvn	r0, #0
   157fc:	mvn	r1, #-2147483648	; 0x80000000
   15800:	str	r4, [sp, #8]
   15804:	mvn	r6, #0
   15808:	mvn	r7, #-2147483648	; 0x80000000
   1580c:	bl	16e58 <__assert_fail@plt+0x5dd0>
   15810:	ldr	r4, [sp, #24]
   15814:	ldr	r3, [sp, #28]
   15818:	subs	r0, r0, r8
   1581c:	mov	r2, #1
   15820:	sbcs	r0, r1, r9
   15824:	bge	159ec <__assert_fail@plt+0x4964>
   15828:	b	15b24 <__assert_fail@plt+0x4a9c>
   1582c:	and	r0, r6, r7
   15830:	cmn	r0, #1
   15834:	beq	15870 <__assert_fail@plt+0x47e8>
   15838:	mov	r0, #0
   1583c:	mov	r1, #-2147483648	; 0x80000000
   15840:	mov	r2, r6
   15844:	mov	r3, r7
   15848:	bl	16d84 <__assert_fail@plt+0x5cfc>
   1584c:	ldr	r2, [sp, #24]
   15850:	ldr	r3, [sp, #28]
   15854:	mov	r4, #1
   15858:	mov	r9, #-2147483648	; 0x80000000
   1585c:	subs	r0, r0, r2
   15860:	sbcs	r0, r1, r3
   15864:	mov	r0, #0
   15868:	str	r0, [sp, #8]
   1586c:	blt	15a00 <__assert_fail@plt+0x4978>
   15870:	umull	r1, r0, r6, r2
   15874:	mov	r4, #0
   15878:	mla	r0, r6, r3, r0
   1587c:	mla	r9, r7, r2, r0
   15880:	str	r1, [sp, #8]
   15884:	cmp	r9, #0
   15888:	bmi	15a00 <__assert_fail@plt+0x4978>
   1588c:	ldr	r3, [sp, #28]
   15890:	mvn	r0, #0
   15894:	mvn	r1, #-2147483648	; 0x80000000
   15898:	str	r4, [sp, #4]
   1589c:	mvn	r6, #0
   158a0:	mvn	r8, #-2147483648	; 0x80000000
   158a4:	bl	16e58 <__assert_fail@plt+0x5dd0>
   158a8:	ldr	r4, [sp, #8]
   158ac:	ldr	r2, [sp, #24]
   158b0:	ldr	r3, [sp, #28]
   158b4:	mov	r7, #1
   158b8:	subs	r0, r0, r4
   158bc:	sbcs	r0, r1, r9
   158c0:	bge	15a3c <__assert_fail@plt+0x49b4>
   158c4:	b	15a54 <__assert_fail@plt+0x49cc>
   158c8:	mov	r0, #-2147483648	; 0x80000000
   158cc:	mov	r1, #-2147483648	; 0x80000000
   158d0:	mov	r2, r8
   158d4:	mov	r3, r9
   158d8:	mov	r6, r4
   158dc:	mov	r4, #0
   158e0:	str	r0, [sp, #8]
   158e4:	mov	r0, #0
   158e8:	bl	16d84 <__assert_fail@plt+0x5cfc>
   158ec:	ldr	r2, [sp, #24]
   158f0:	ldr	r3, [sp, #28]
   158f4:	mov	r7, #1
   158f8:	subs	r0, r0, r2
   158fc:	sbcs	r0, r1, r3
   15900:	blt	15974 <__assert_fail@plt+0x48ec>
   15904:	umull	r4, r0, r8, r2
   15908:	mov	r7, r6
   1590c:	mla	r0, r8, r3, r0
   15910:	mla	r0, r9, r2, r0
   15914:	cmp	r0, #0
   15918:	str	r0, [sp, #8]
   1591c:	bmi	15974 <__assert_fail@plt+0x48ec>
   15920:	ldr	r3, [sp, #28]
   15924:	mvn	r0, #0
   15928:	mvn	r1, #-2147483648	; 0x80000000
   1592c:	mov	r9, r7
   15930:	mvn	r6, #0
   15934:	mvn	r7, #-2147483648	; 0x80000000
   15938:	bl	16e58 <__assert_fail@plt+0x5dd0>
   1593c:	ldr	r8, [sp, #8]
   15940:	ldr	r3, [sp, #24]
   15944:	ldr	ip, [sp, #28]
   15948:	subs	r0, r0, r4
   1594c:	mov	r2, #1
   15950:	sbcs	r0, r1, r8
   15954:	blt	15968 <__assert_fail@plt+0x48e0>
   15958:	umull	r6, r0, r4, r3
   1595c:	mov	r2, #0
   15960:	mla	r0, r4, ip, r0
   15964:	mla	r7, r8, r3, r0
   15968:	orr	r3, r2, r9
   1596c:	ldr	r9, [sp, #12]
   15970:	b	16610 <__assert_fail@plt+0x5588>
   15974:	ldr	r8, [sp, #8]
   15978:	mov	r0, #0
   1597c:	mov	r1, #-2147483648	; 0x80000000
   15980:	mov	r2, r4
   15984:	mov	r9, r7
   15988:	mov	r6, #0
   1598c:	mov	r7, #-2147483648	; 0x80000000
   15990:	mov	r3, r8
   15994:	bl	16d84 <__assert_fail@plt+0x5cfc>
   15998:	ldr	r3, [sp, #24]
   1599c:	ldr	ip, [sp, #28]
   159a0:	mov	r2, #1
   159a4:	subs	r0, r0, r3
   159a8:	sbcs	r0, r1, ip
   159ac:	bge	15958 <__assert_fail@plt+0x48d0>
   159b0:	b	15968 <__assert_fail@plt+0x48e0>
   159b4:	mov	r0, #0
   159b8:	mov	r1, #-2147483648	; 0x80000000
   159bc:	mov	r2, r8
   159c0:	mov	r3, r9
   159c4:	str	r4, [sp, #8]
   159c8:	mov	r6, #0
   159cc:	mov	r7, #-2147483648	; 0x80000000
   159d0:	bl	16d84 <__assert_fail@plt+0x5cfc>
   159d4:	ldr	r4, [sp, #24]
   159d8:	ldr	r3, [sp, #28]
   159dc:	mov	r2, #1
   159e0:	subs	r0, r0, r4
   159e4:	sbcs	r0, r1, r3
   159e8:	blt	15b24 <__assert_fail@plt+0x4a9c>
   159ec:	umull	r6, r0, r8, r4
   159f0:	mov	r2, #0
   159f4:	mla	r0, r8, r3, r0
   159f8:	mla	r7, r9, r4, r0
   159fc:	b	15b24 <__assert_fail@plt+0x4a9c>
   15a00:	str	r4, [sp, #4]
   15a04:	ldr	r4, [sp, #8]
   15a08:	mov	r0, #0
   15a0c:	mov	r1, #-2147483648	; 0x80000000
   15a10:	mov	r3, r9
   15a14:	mov	r2, r4
   15a18:	bl	16d84 <__assert_fail@plt+0x5cfc>
   15a1c:	ldr	r2, [sp, #24]
   15a20:	ldr	r3, [sp, #28]
   15a24:	mov	r7, #1
   15a28:	mov	r6, #0
   15a2c:	mov	r8, #-2147483648	; 0x80000000
   15a30:	subs	r0, r0, r2
   15a34:	sbcs	r0, r1, r3
   15a38:	blt	15a8c <__assert_fail@plt+0x4a04>
   15a3c:	umull	r6, r0, r4, r2
   15a40:	ldr	r7, [sp, #4]
   15a44:	mla	r0, r4, r3, r0
   15a48:	mla	r8, r9, r2, r0
   15a4c:	cmp	r8, #0
   15a50:	bmi	15a8c <__assert_fail@plt+0x4a04>
   15a54:	ldr	r3, [sp, #28]
   15a58:	mvn	r0, #0
   15a5c:	mvn	r1, #-2147483648	; 0x80000000
   15a60:	str	r7, [sp, #8]
   15a64:	mvn	r4, #0
   15a68:	mvn	r9, #-2147483648	; 0x80000000
   15a6c:	bl	16e58 <__assert_fail@plt+0x5dd0>
   15a70:	ldr	r2, [sp, #24]
   15a74:	ldr	r3, [sp, #28]
   15a78:	subs	r0, r0, r6
   15a7c:	mov	r7, #1
   15a80:	sbcs	r0, r1, r8
   15a84:	bge	15ac4 <__assert_fail@plt+0x4a3c>
   15a88:	b	15adc <__assert_fail@plt+0x4a54>
   15a8c:	mov	r0, #0
   15a90:	mov	r1, #-2147483648	; 0x80000000
   15a94:	mov	r2, r6
   15a98:	mov	r3, r8
   15a9c:	str	r7, [sp, #8]
   15aa0:	bl	16d84 <__assert_fail@plt+0x5cfc>
   15aa4:	ldr	r2, [sp, #24]
   15aa8:	ldr	r3, [sp, #28]
   15aac:	mov	r7, #1
   15ab0:	mov	r4, #0
   15ab4:	mov	r9, #-2147483648	; 0x80000000
   15ab8:	subs	r0, r0, r2
   15abc:	sbcs	r0, r1, r3
   15ac0:	blt	15b34 <__assert_fail@plt+0x4aac>
   15ac4:	umull	r4, r0, r6, r2
   15ac8:	ldr	r7, [sp, #8]
   15acc:	mla	r0, r6, r3, r0
   15ad0:	mla	r9, r8, r2, r0
   15ad4:	cmp	r9, #0
   15ad8:	bmi	15b34 <__assert_fail@plt+0x4aac>
   15adc:	ldr	r3, [sp, #28]
   15ae0:	mvn	r0, #0
   15ae4:	mvn	r1, #-2147483648	; 0x80000000
   15ae8:	str	r7, [sp, #8]
   15aec:	mvn	r6, #0
   15af0:	mvn	r7, #-2147483648	; 0x80000000
   15af4:	bl	16e58 <__assert_fail@plt+0x5dd0>
   15af8:	ldr	r3, [sp, #24]
   15afc:	ldr	ip, [sp, #28]
   15b00:	subs	r0, r0, r4
   15b04:	mov	r2, #1
   15b08:	mov	r8, r4
   15b0c:	sbcs	r0, r1, r9
   15b10:	blt	15b24 <__assert_fail@plt+0x4a9c>
   15b14:	umull	r6, r0, r8, r3
   15b18:	mov	r2, #0
   15b1c:	mla	r0, r8, ip, r0
   15b20:	mla	r7, r9, r3, r0
   15b24:	ldr	r0, [sp, #8]
   15b28:	ldr	r9, [sp, #12]
   15b2c:	orr	r3, r2, r0
   15b30:	b	16610 <__assert_fail@plt+0x5588>
   15b34:	mov	r0, #0
   15b38:	mov	r1, #-2147483648	; 0x80000000
   15b3c:	mov	r2, r4
   15b40:	mov	r3, r9
   15b44:	str	r7, [sp, #8]
   15b48:	mov	r8, r4
   15b4c:	bl	16d84 <__assert_fail@plt+0x5cfc>
   15b50:	ldr	r3, [sp, #24]
   15b54:	ldr	ip, [sp, #28]
   15b58:	mov	r2, #1
   15b5c:	mov	r6, #0
   15b60:	mov	r7, #-2147483648	; 0x80000000
   15b64:	subs	r0, r0, r3
   15b68:	sbcs	r0, r1, ip
   15b6c:	bge	15b14 <__assert_fail@plt+0x4a8c>
   15b70:	b	15b24 <__assert_fail@plt+0x4a9c>
   15b74:	and	r0, r6, r7
   15b78:	cmn	r0, #1
   15b7c:	beq	15bb8 <__assert_fail@plt+0x4b30>
   15b80:	mov	r0, #0
   15b84:	mov	r1, #-2147483648	; 0x80000000
   15b88:	mov	r2, r6
   15b8c:	mov	r3, r7
   15b90:	bl	16d84 <__assert_fail@plt+0x5cfc>
   15b94:	ldr	r2, [sp, #24]
   15b98:	ldr	r3, [sp, #28]
   15b9c:	mov	r4, #1
   15ba0:	mov	r9, #-2147483648	; 0x80000000
   15ba4:	subs	r0, r0, r2
   15ba8:	sbcs	r0, r1, r3
   15bac:	mov	r0, #0
   15bb0:	str	r0, [sp, #8]
   15bb4:	blt	15ec8 <__assert_fail@plt+0x4e40>
   15bb8:	umull	r1, r0, r6, r2
   15bbc:	mov	r4, #0
   15bc0:	mla	r0, r6, r3, r0
   15bc4:	mla	r9, r7, r2, r0
   15bc8:	str	r1, [sp, #8]
   15bcc:	cmp	r9, #0
   15bd0:	bmi	15ec8 <__assert_fail@plt+0x4e40>
   15bd4:	ldr	r3, [sp, #28]
   15bd8:	mvn	r0, #0
   15bdc:	mvn	r1, #-2147483648	; 0x80000000
   15be0:	str	r4, [sp, #4]
   15be4:	mvn	r8, #0
   15be8:	mvn	r4, #-2147483648	; 0x80000000
   15bec:	bl	16e58 <__assert_fail@plt+0x5dd0>
   15bf0:	ldr	r6, [sp, #8]
   15bf4:	ldr	r2, [sp, #24]
   15bf8:	ldr	r3, [sp, #28]
   15bfc:	mov	r7, #1
   15c00:	subs	r0, r0, r6
   15c04:	sbcs	r0, r1, r9
   15c08:	bge	15f04 <__assert_fail@plt+0x4e7c>
   15c0c:	b	15f1c <__assert_fail@plt+0x4e94>
   15c10:	and	r0, r6, r7
   15c14:	cmn	r0, #1
   15c18:	beq	15c40 <__assert_fail@plt+0x4bb8>
   15c1c:	mov	r0, #0
   15c20:	mov	r1, #-2147483648	; 0x80000000
   15c24:	mov	r2, r6
   15c28:	mov	r3, r7
   15c2c:	bl	16d84 <__assert_fail@plt+0x5cfc>
   15c30:	ldr	r3, [sp, #28]
   15c34:	subs	r0, r0, #1024	; 0x400
   15c38:	sbcs	r0, r1, #0
   15c3c:	blt	15e98 <__assert_fail@plt+0x4e10>
   15c40:	lsl	r0, r7, #10
   15c44:	orr	r7, r0, r6, lsr #22
   15c48:	lsl	r6, r6, #10
   15c4c:	b	16610 <__assert_fail@plt+0x5588>
   15c50:	and	r0, r6, r7
   15c54:	cmn	r0, #1
   15c58:	beq	15c94 <__assert_fail@plt+0x4c0c>
   15c5c:	mov	r0, #0
   15c60:	mov	r1, #-2147483648	; 0x80000000
   15c64:	mov	r2, r6
   15c68:	mov	r3, r7
   15c6c:	bl	16d84 <__assert_fail@plt+0x5cfc>
   15c70:	ldr	r2, [sp, #24]
   15c74:	ldr	r3, [sp, #28]
   15c78:	mov	r4, #1
   15c7c:	mov	r9, #-2147483648	; 0x80000000
   15c80:	subs	r0, r0, r2
   15c84:	sbcs	r0, r1, r3
   15c88:	mov	r0, #0
   15c8c:	str	r0, [sp, #8]
   15c90:	blt	161e0 <__assert_fail@plt+0x5158>
   15c94:	umull	r1, r0, r6, r2
   15c98:	mov	r4, #0
   15c9c:	mla	r0, r6, r3, r0
   15ca0:	mla	r9, r7, r2, r0
   15ca4:	str	r1, [sp, #8]
   15ca8:	cmp	r9, #0
   15cac:	bmi	161e0 <__assert_fail@plt+0x5158>
   15cb0:	ldr	r3, [sp, #28]
   15cb4:	mvn	r0, #0
   15cb8:	mvn	r1, #-2147483648	; 0x80000000
   15cbc:	str	r4, [sp, #4]
   15cc0:	mvn	r8, #0
   15cc4:	mvn	r4, #-2147483648	; 0x80000000
   15cc8:	bl	16e58 <__assert_fail@plt+0x5dd0>
   15ccc:	ldr	r6, [sp, #8]
   15cd0:	ldr	r2, [sp, #24]
   15cd4:	ldr	r3, [sp, #28]
   15cd8:	mov	r7, #1
   15cdc:	subs	r0, r0, r6
   15ce0:	sbcs	r0, r1, r9
   15ce4:	bge	1621c <__assert_fail@plt+0x5194>
   15ce8:	b	16234 <__assert_fail@plt+0x51ac>
   15cec:	and	r0, r6, r7
   15cf0:	cmn	r0, #1
   15cf4:	beq	15d30 <__assert_fail@plt+0x4ca8>
   15cf8:	mov	r0, #0
   15cfc:	mov	r1, #-2147483648	; 0x80000000
   15d00:	mov	r2, r6
   15d04:	mov	r3, r7
   15d08:	bl	16d84 <__assert_fail@plt+0x5cfc>
   15d0c:	ldr	r2, [sp, #24]
   15d10:	ldr	r3, [sp, #28]
   15d14:	mov	r4, #1
   15d18:	mov	r8, #-2147483648	; 0x80000000
   15d1c:	subs	r0, r0, r2
   15d20:	sbcs	r0, r1, r3
   15d24:	mov	r0, #0
   15d28:	str	r0, [sp, #8]
   15d2c:	blt	1645c <__assert_fail@plt+0x53d4>
   15d30:	umull	r1, r0, r6, r2
   15d34:	mov	r4, #0
   15d38:	mla	r0, r6, r3, r0
   15d3c:	mla	r8, r7, r2, r0
   15d40:	str	r1, [sp, #8]
   15d44:	cmp	r8, #0
   15d48:	bmi	1645c <__assert_fail@plt+0x53d4>
   15d4c:	ldr	r3, [sp, #28]
   15d50:	mvn	r0, #0
   15d54:	mvn	r1, #-2147483648	; 0x80000000
   15d58:	str	r4, [sp, #4]
   15d5c:	mvn	r9, #0
   15d60:	mvn	r4, #-2147483648	; 0x80000000
   15d64:	bl	16e58 <__assert_fail@plt+0x5dd0>
   15d68:	ldr	r6, [sp, #8]
   15d6c:	ldr	r2, [sp, #24]
   15d70:	ldr	r3, [sp, #28]
   15d74:	mov	r7, #1
   15d78:	subs	r0, r0, r6
   15d7c:	sbcs	r0, r1, r8
   15d80:	bge	16498 <__assert_fail@plt+0x5410>
   15d84:	b	164b0 <__assert_fail@plt+0x5428>
   15d88:	and	r0, r6, r7
   15d8c:	cmn	r0, #1
   15d90:	beq	15dcc <__assert_fail@plt+0x4d44>
   15d94:	mov	r0, #0
   15d98:	mov	r1, #-2147483648	; 0x80000000
   15d9c:	mov	r2, r6
   15da0:	mov	r3, r7
   15da4:	bl	16d84 <__assert_fail@plt+0x5cfc>
   15da8:	ldr	r2, [sp, #24]
   15dac:	ldr	r3, [sp, #28]
   15db0:	mov	r4, #1
   15db4:	mov	r9, #-2147483648	; 0x80000000
   15db8:	subs	r0, r0, r2
   15dbc:	sbcs	r0, r1, r3
   15dc0:	mov	r0, #0
   15dc4:	str	r0, [sp, #8]
   15dc8:	blt	16678 <__assert_fail@plt+0x55f0>
   15dcc:	umull	r1, r0, r6, r2
   15dd0:	mov	r4, #0
   15dd4:	mla	r0, r6, r3, r0
   15dd8:	mla	r9, r7, r2, r0
   15ddc:	str	r1, [sp, #8]
   15de0:	cmp	r9, #0
   15de4:	bmi	16678 <__assert_fail@plt+0x55f0>
   15de8:	ldr	r3, [sp, #28]
   15dec:	mvn	r0, #0
   15df0:	mvn	r1, #-2147483648	; 0x80000000
   15df4:	str	r4, [sp]
   15df8:	mvn	r8, #-2147483648	; 0x80000000
   15dfc:	str	r0, [sp, #4]
   15e00:	mvn	r0, #0
   15e04:	bl	16e58 <__assert_fail@plt+0x5dd0>
   15e08:	ldr	r6, [sp, #8]
   15e0c:	ldr	r2, [sp, #24]
   15e10:	ldr	r3, [sp, #28]
   15e14:	mov	r7, #1
   15e18:	subs	r0, r0, r6
   15e1c:	sbcs	r0, r1, r9
   15e20:	bge	166b8 <__assert_fail@plt+0x5630>
   15e24:	b	166d4 <__assert_fail@plt+0x564c>
   15e28:	and	r0, r6, r7
   15e2c:	cmn	r0, #1
   15e30:	beq	15e58 <__assert_fail@plt+0x4dd0>
   15e34:	mov	r0, #0
   15e38:	mov	r1, #-2147483648	; 0x80000000
   15e3c:	mov	r2, r6
   15e40:	mov	r3, r7
   15e44:	bl	16d84 <__assert_fail@plt+0x5cfc>
   15e48:	ldr	r3, [sp, #28]
   15e4c:	subs	r0, r0, #512	; 0x200
   15e50:	sbcs	r0, r1, #0
   15e54:	blt	15e98 <__assert_fail@plt+0x4e10>
   15e58:	lsl	r0, r7, #9
   15e5c:	orr	r7, r0, r6, lsr #23
   15e60:	lsl	r6, r6, #9
   15e64:	b	16610 <__assert_fail@plt+0x5588>
   15e68:	and	r0, r6, r7
   15e6c:	cmn	r0, #1
   15e70:	beq	15eb8 <__assert_fail@plt+0x4e30>
   15e74:	mov	r0, #0
   15e78:	mov	r1, #-2147483648	; 0x80000000
   15e7c:	mov	r2, r6
   15e80:	mov	r3, r7
   15e84:	bl	16d84 <__assert_fail@plt+0x5cfc>
   15e88:	ldr	r3, [sp, #28]
   15e8c:	subs	r0, r0, #2
   15e90:	sbcs	r0, r1, #0
   15e94:	bge	15eb8 <__assert_fail@plt+0x4e30>
   15e98:	cmp	r7, #0
   15e9c:	mvn	r0, #-2147483648	; 0x80000000
   15ea0:	mvn	r6, #0
   15ea4:	mov	r3, #1
   15ea8:	movmi	r0, #-2147483648	; 0x80000000
   15eac:	movwmi	r6, #0
   15eb0:	mov	r7, r0
   15eb4:	b	16610 <__assert_fail@plt+0x5588>
   15eb8:	lsl	r0, r7, #1
   15ebc:	orr	r7, r0, r6, lsr #31
   15ec0:	lsl	r6, r6, #1
   15ec4:	b	16610 <__assert_fail@plt+0x5588>
   15ec8:	ldr	r6, [sp, #8]
   15ecc:	mov	r0, #0
   15ed0:	mov	r1, #-2147483648	; 0x80000000
   15ed4:	mov	r3, r9
   15ed8:	str	r4, [sp, #4]
   15edc:	mov	r2, r6
   15ee0:	bl	16d84 <__assert_fail@plt+0x5cfc>
   15ee4:	ldr	r2, [sp, #24]
   15ee8:	ldr	r3, [sp, #28]
   15eec:	mov	r7, #1
   15ef0:	mov	r8, #0
   15ef4:	mov	r4, #-2147483648	; 0x80000000
   15ef8:	subs	r0, r0, r2
   15efc:	sbcs	r0, r1, r3
   15f00:	blt	15f54 <__assert_fail@plt+0x4ecc>
   15f04:	umull	r8, r0, r6, r2
   15f08:	ldr	r7, [sp, #4]
   15f0c:	mla	r0, r6, r3, r0
   15f10:	mla	r4, r9, r2, r0
   15f14:	cmp	r4, #0
   15f18:	bmi	15f54 <__assert_fail@plt+0x4ecc>
   15f1c:	ldr	r3, [sp, #28]
   15f20:	mvn	r0, #0
   15f24:	mvn	r1, #-2147483648	; 0x80000000
   15f28:	str	r7, [sp, #8]
   15f2c:	mvn	r7, #0
   15f30:	mvn	r9, #-2147483648	; 0x80000000
   15f34:	bl	16e58 <__assert_fail@plt+0x5dd0>
   15f38:	ldr	r2, [sp, #24]
   15f3c:	ldr	r3, [sp, #28]
   15f40:	subs	r0, r0, r8
   15f44:	mov	r6, #1
   15f48:	sbcs	r0, r1, r4
   15f4c:	bge	15f8c <__assert_fail@plt+0x4f04>
   15f50:	b	15fa4 <__assert_fail@plt+0x4f1c>
   15f54:	mov	r0, #0
   15f58:	mov	r1, #-2147483648	; 0x80000000
   15f5c:	mov	r2, r8
   15f60:	mov	r3, r4
   15f64:	str	r7, [sp, #8]
   15f68:	bl	16d84 <__assert_fail@plt+0x5cfc>
   15f6c:	ldr	r2, [sp, #24]
   15f70:	ldr	r3, [sp, #28]
   15f74:	mov	r6, #1
   15f78:	mov	r7, #0
   15f7c:	mov	r9, #-2147483648	; 0x80000000
   15f80:	subs	r0, r0, r2
   15f84:	sbcs	r0, r1, r3
   15f88:	blt	15fe4 <__assert_fail@plt+0x4f5c>
   15f8c:	umull	r7, r0, r8, r2
   15f90:	ldr	r6, [sp, #8]
   15f94:	mla	r0, r8, r3, r0
   15f98:	mla	r9, r4, r2, r0
   15f9c:	cmp	r9, #0
   15fa0:	bmi	15fe4 <__assert_fail@plt+0x4f5c>
   15fa4:	ldr	r3, [sp, #28]
   15fa8:	mvn	r0, #0
   15fac:	mvn	r1, #-2147483648	; 0x80000000
   15fb0:	str	r6, [sp, #8]
   15fb4:	mvn	r8, #0
   15fb8:	mvn	r4, #-2147483648	; 0x80000000
   15fbc:	bl	16e58 <__assert_fail@plt+0x5dd0>
   15fc0:	ldr	r2, [sp, #24]
   15fc4:	ldr	r3, [sp, #28]
   15fc8:	subs	r0, r0, r7
   15fcc:	sbcs	r0, r1, r9
   15fd0:	bge	16028 <__assert_fail@plt+0x4fa0>
   15fd4:	mov	r0, #1
   15fd8:	mov	r6, #0
   15fdc:	str	r0, [sp, #8]
   15fe0:	b	16040 <__assert_fail@plt+0x4fb8>
   15fe4:	mov	r0, #0
   15fe8:	mov	r1, #-2147483648	; 0x80000000
   15fec:	mov	r2, r7
   15ff0:	mov	r3, r9
   15ff4:	str	r6, [sp, #8]
   15ff8:	bl	16d84 <__assert_fail@plt+0x5cfc>
   15ffc:	ldr	r2, [sp, #24]
   16000:	ldr	r3, [sp, #28]
   16004:	subs	r0, r0, r2
   16008:	sbcs	r0, r1, r3
   1600c:	bge	16028 <__assert_fail@plt+0x4fa0>
   16010:	mov	r0, #1
   16014:	mov	r8, #0
   16018:	mov	r4, #-2147483648	; 0x80000000
   1601c:	mov	r6, #0
   16020:	str	r0, [sp, #8]
   16024:	b	16078 <__assert_fail@plt+0x4ff0>
   16028:	umull	r8, r0, r7, r2
   1602c:	mov	r6, #0
   16030:	mla	r0, r7, r3, r0
   16034:	mla	r4, r9, r2, r0
   16038:	cmp	r4, #0
   1603c:	bmi	16078 <__assert_fail@plt+0x4ff0>
   16040:	ldr	r3, [sp, #28]
   16044:	mvn	r0, #0
   16048:	mvn	r1, #-2147483648	; 0x80000000
   1604c:	mvn	r9, #0
   16050:	mvn	r7, #-2147483648	; 0x80000000
   16054:	bl	16e58 <__assert_fail@plt+0x5dd0>
   16058:	ldr	r2, [sp, #24]
   1605c:	ldr	r3, [sp, #28]
   16060:	subs	r0, r0, r8
   16064:	sbcs	r0, r1, r4
   16068:	bge	160b4 <__assert_fail@plt+0x502c>
   1606c:	mov	r0, #1
   16070:	str	r0, [sp, #8]
   16074:	b	160c8 <__assert_fail@plt+0x5040>
   16078:	mov	r0, #0
   1607c:	mov	r1, #-2147483648	; 0x80000000
   16080:	mov	r2, r8
   16084:	mov	r3, r4
   16088:	bl	16d84 <__assert_fail@plt+0x5cfc>
   1608c:	ldr	r2, [sp, #24]
   16090:	ldr	r3, [sp, #28]
   16094:	subs	r0, r0, r2
   16098:	sbcs	r0, r1, r3
   1609c:	bge	160b4 <__assert_fail@plt+0x502c>
   160a0:	mov	r0, #1
   160a4:	mov	r9, #0
   160a8:	mov	r7, #-2147483648	; 0x80000000
   160ac:	str	r0, [sp, #8]
   160b0:	b	16104 <__assert_fail@plt+0x507c>
   160b4:	umull	r9, r0, r8, r2
   160b8:	mla	r0, r8, r3, r0
   160bc:	mla	r7, r4, r2, r0
   160c0:	cmp	r7, #0
   160c4:	bmi	16104 <__assert_fail@plt+0x507c>
   160c8:	ldr	r3, [sp, #28]
   160cc:	mvn	r0, #0
   160d0:	mvn	r1, #-2147483648	; 0x80000000
   160d4:	mvn	r8, #0
   160d8:	mvn	r4, #-2147483648	; 0x80000000
   160dc:	bl	16e58 <__assert_fail@plt+0x5dd0>
   160e0:	ldr	r2, [sp, #24]
   160e4:	ldr	r3, [sp, #28]
   160e8:	subs	r0, r0, r9
   160ec:	sbcs	r0, r1, r7
   160f0:	bge	16144 <__assert_fail@plt+0x50bc>
   160f4:	ldr	r9, [sp, #12]
   160f8:	mov	r0, #1
   160fc:	str	r0, [sp, #8]
   16100:	b	1615c <__assert_fail@plt+0x50d4>
   16104:	mov	r0, #0
   16108:	mov	r1, #-2147483648	; 0x80000000
   1610c:	mov	r2, r9
   16110:	mov	r3, r7
   16114:	bl	16d84 <__assert_fail@plt+0x5cfc>
   16118:	ldr	r2, [sp, #24]
   1611c:	ldr	r3, [sp, #28]
   16120:	subs	r0, r0, r2
   16124:	sbcs	r0, r1, r3
   16128:	bge	16144 <__assert_fail@plt+0x50bc>
   1612c:	ldr	r9, [sp, #12]
   16130:	mov	r0, #1
   16134:	mov	r8, #0
   16138:	mov	r4, #-2147483648	; 0x80000000
   1613c:	str	r0, [sp, #8]
   16140:	b	161ac <__assert_fail@plt+0x5124>
   16144:	umull	r8, r0, r9, r2
   16148:	mla	r0, r9, r3, r0
   1614c:	ldr	r9, [sp, #12]
   16150:	mla	r4, r7, r2, r0
   16154:	cmp	r4, #0
   16158:	bmi	161ac <__assert_fail@plt+0x5124>
   1615c:	ldr	r3, [sp, #28]
   16160:	mvn	r0, #0
   16164:	mvn	r1, #-2147483648	; 0x80000000
   16168:	mvn	r6, #0
   1616c:	bl	16e58 <__assert_fail@plt+0x5dd0>
   16170:	ldr	r7, [sp, #24]
   16174:	ldr	r3, [sp, #28]
   16178:	subs	r0, r0, r8
   1617c:	mov	r2, #1
   16180:	sbcs	r0, r1, r4
   16184:	mvn	r0, #-2147483648	; 0x80000000
   16188:	blt	1619c <__assert_fail@plt+0x5114>
   1618c:	umull	r6, r0, r8, r7
   16190:	mov	r2, #0
   16194:	mla	r0, r8, r3, r0
   16198:	mla	r0, r4, r7, r0
   1619c:	ldr	r1, [sp, #8]
   161a0:	mov	r7, r0
   161a4:	orr	r3, r2, r1
   161a8:	b	16610 <__assert_fail@plt+0x5588>
   161ac:	mov	r0, #0
   161b0:	mov	r1, #-2147483648	; 0x80000000
   161b4:	mov	r2, r8
   161b8:	mov	r3, r4
   161bc:	bl	16d84 <__assert_fail@plt+0x5cfc>
   161c0:	ldr	r7, [sp, #24]
   161c4:	ldr	r3, [sp, #28]
   161c8:	mov	r2, #1
   161cc:	subs	r0, r0, r7
   161d0:	sbcs	r0, r1, r3
   161d4:	mov	r0, #-2147483648	; 0x80000000
   161d8:	bge	1618c <__assert_fail@plt+0x5104>
   161dc:	b	1619c <__assert_fail@plt+0x5114>
   161e0:	ldr	r6, [sp, #8]
   161e4:	mov	r0, #0
   161e8:	mov	r1, #-2147483648	; 0x80000000
   161ec:	mov	r3, r9
   161f0:	str	r4, [sp, #4]
   161f4:	mov	r2, r6
   161f8:	bl	16d84 <__assert_fail@plt+0x5cfc>
   161fc:	ldr	r2, [sp, #24]
   16200:	ldr	r3, [sp, #28]
   16204:	mov	r7, #1
   16208:	mov	r8, #0
   1620c:	mov	r4, #-2147483648	; 0x80000000
   16210:	subs	r0, r0, r2
   16214:	sbcs	r0, r1, r3
   16218:	blt	16270 <__assert_fail@plt+0x51e8>
   1621c:	umull	r8, r0, r6, r2
   16220:	ldr	r7, [sp, #4]
   16224:	mla	r0, r6, r3, r0
   16228:	mla	r4, r9, r2, r0
   1622c:	cmp	r4, #0
   16230:	bmi	16270 <__assert_fail@plt+0x51e8>
   16234:	ldr	r3, [sp, #28]
   16238:	mvn	r0, #0
   1623c:	mvn	r1, #-2147483648	; 0x80000000
   16240:	str	r7, [sp, #4]
   16244:	mvn	r7, #0
   16248:	mvn	r9, #-2147483648	; 0x80000000
   1624c:	bl	16e58 <__assert_fail@plt+0x5dd0>
   16250:	ldr	r2, [sp, #24]
   16254:	ldr	r3, [sp, #28]
   16258:	subs	r0, r0, r8
   1625c:	mov	r6, #1
   16260:	sbcs	r0, r1, r4
   16264:	str	r6, [sp, #8]
   16268:	bge	162ac <__assert_fail@plt+0x5224>
   1626c:	b	162c8 <__assert_fail@plt+0x5240>
   16270:	mov	r0, #0
   16274:	mov	r1, #-2147483648	; 0x80000000
   16278:	mov	r2, r8
   1627c:	mov	r3, r4
   16280:	str	r7, [sp, #4]
   16284:	bl	16d84 <__assert_fail@plt+0x5cfc>
   16288:	ldr	r2, [sp, #24]
   1628c:	ldr	r3, [sp, #28]
   16290:	mov	r7, #1
   16294:	mov	r9, #-2147483648	; 0x80000000
   16298:	str	r7, [sp, #8]
   1629c:	mov	r7, #0
   162a0:	subs	r0, r0, r2
   162a4:	sbcs	r0, r1, r3
   162a8:	blt	16300 <__assert_fail@plt+0x5278>
   162ac:	umull	r7, r0, r8, r2
   162b0:	mla	r0, r8, r3, r0
   162b4:	mla	r9, r4, r2, r0
   162b8:	ldr	r0, [sp, #4]
   162bc:	cmp	r9, #0
   162c0:	str	r0, [sp, #8]
   162c4:	bmi	16300 <__assert_fail@plt+0x5278>
   162c8:	ldr	r3, [sp, #28]
   162cc:	mvn	r0, #0
   162d0:	mvn	r1, #-2147483648	; 0x80000000
   162d4:	mvn	r4, #0
   162d8:	mvn	r8, #-2147483648	; 0x80000000
   162dc:	bl	16e58 <__assert_fail@plt+0x5dd0>
   162e0:	ldr	r2, [sp, #24]
   162e4:	ldr	r3, [sp, #28]
   162e8:	subs	r0, r0, r7
   162ec:	sbcs	r0, r1, r9
   162f0:	bge	1633c <__assert_fail@plt+0x52b4>
   162f4:	mov	r0, #1
   162f8:	str	r0, [sp, #8]
   162fc:	b	16350 <__assert_fail@plt+0x52c8>
   16300:	mov	r0, #0
   16304:	mov	r1, #-2147483648	; 0x80000000
   16308:	mov	r2, r7
   1630c:	mov	r3, r9
   16310:	bl	16d84 <__assert_fail@plt+0x5cfc>
   16314:	ldr	r2, [sp, #24]
   16318:	ldr	r3, [sp, #28]
   1631c:	subs	r0, r0, r2
   16320:	sbcs	r0, r1, r3
   16324:	bge	1633c <__assert_fail@plt+0x52b4>
   16328:	mov	r0, #1
   1632c:	mov	r4, #0
   16330:	mov	r8, #-2147483648	; 0x80000000
   16334:	str	r0, [sp, #8]
   16338:	b	16384 <__assert_fail@plt+0x52fc>
   1633c:	umull	r4, r0, r7, r2
   16340:	mla	r0, r7, r3, r0
   16344:	mla	r8, r9, r2, r0
   16348:	cmp	r8, #0
   1634c:	bmi	16384 <__assert_fail@plt+0x52fc>
   16350:	ldr	r3, [sp, #28]
   16354:	mvn	r0, #0
   16358:	mvn	r1, #-2147483648	; 0x80000000
   1635c:	mvn	r6, #0
   16360:	mvn	r9, #-2147483648	; 0x80000000
   16364:	bl	16e58 <__assert_fail@plt+0x5dd0>
   16368:	ldr	r2, [sp, #24]
   1636c:	ldr	r3, [sp, #28]
   16370:	subs	r0, r0, r4
   16374:	sbcs	r0, r1, r8
   16378:	bge	163bc <__assert_fail@plt+0x5334>
   1637c:	mov	r8, #1
   16380:	b	163d4 <__assert_fail@plt+0x534c>
   16384:	mov	r0, #0
   16388:	mov	r1, #-2147483648	; 0x80000000
   1638c:	mov	r2, r4
   16390:	mov	r3, r8
   16394:	bl	16d84 <__assert_fail@plt+0x5cfc>
   16398:	ldr	r2, [sp, #24]
   1639c:	ldr	r3, [sp, #28]
   163a0:	subs	r0, r0, r2
   163a4:	sbcs	r0, r1, r3
   163a8:	bge	163bc <__assert_fail@plt+0x5334>
   163ac:	mov	r8, #1
   163b0:	mov	r6, #0
   163b4:	mov	r9, #-2147483648	; 0x80000000
   163b8:	b	16424 <__assert_fail@plt+0x539c>
   163bc:	umull	r6, r0, r4, r2
   163c0:	mla	r0, r4, r3, r0
   163c4:	mla	r9, r8, r2, r0
   163c8:	ldr	r8, [sp, #8]
   163cc:	cmp	r9, #0
   163d0:	bmi	16424 <__assert_fail@plt+0x539c>
   163d4:	ldr	r3, [sp, #28]
   163d8:	mvn	r0, #0
   163dc:	mvn	r1, #-2147483648	; 0x80000000
   163e0:	mvn	r4, #0
   163e4:	mvn	r7, #-2147483648	; 0x80000000
   163e8:	bl	16e58 <__assert_fail@plt+0x5dd0>
   163ec:	ldr	r3, [sp, #24]
   163f0:	ldr	ip, [sp, #28]
   163f4:	subs	r0, r0, r6
   163f8:	mov	r2, #1
   163fc:	sbcs	r0, r1, r9
   16400:	blt	16414 <__assert_fail@plt+0x538c>
   16404:	umull	r4, r0, r6, r3
   16408:	mov	r2, #0
   1640c:	mla	r0, r6, ip, r0
   16410:	mla	r7, r9, r3, r0
   16414:	ldr	r9, [sp, #12]
   16418:	orr	r3, r2, r8
   1641c:	mov	r6, r4
   16420:	b	16610 <__assert_fail@plt+0x5588>
   16424:	mov	r0, #0
   16428:	mov	r1, #-2147483648	; 0x80000000
   1642c:	mov	r2, r6
   16430:	mov	r3, r9
   16434:	bl	16d84 <__assert_fail@plt+0x5cfc>
   16438:	ldr	r3, [sp, #24]
   1643c:	ldr	ip, [sp, #28]
   16440:	mov	r2, #1
   16444:	mov	r4, #0
   16448:	mov	r7, #-2147483648	; 0x80000000
   1644c:	subs	r0, r0, r3
   16450:	sbcs	r0, r1, ip
   16454:	bge	16404 <__assert_fail@plt+0x537c>
   16458:	b	16414 <__assert_fail@plt+0x538c>
   1645c:	ldr	r6, [sp, #8]
   16460:	mov	r0, #0
   16464:	mov	r1, #-2147483648	; 0x80000000
   16468:	mov	r3, r8
   1646c:	str	r4, [sp, #4]
   16470:	mov	r2, r6
   16474:	bl	16d84 <__assert_fail@plt+0x5cfc>
   16478:	ldr	r2, [sp, #24]
   1647c:	ldr	r3, [sp, #28]
   16480:	mov	r7, #1
   16484:	mov	r9, #0
   16488:	mov	r4, #-2147483648	; 0x80000000
   1648c:	subs	r0, r0, r2
   16490:	sbcs	r0, r1, r3
   16494:	blt	164ec <__assert_fail@plt+0x5464>
   16498:	umull	r9, r0, r6, r2
   1649c:	ldr	r7, [sp, #4]
   164a0:	mla	r0, r6, r3, r0
   164a4:	mla	r4, r8, r2, r0
   164a8:	cmp	r4, #0
   164ac:	bmi	164ec <__assert_fail@plt+0x5464>
   164b0:	ldr	r3, [sp, #28]
   164b4:	mvn	r0, #0
   164b8:	mvn	r1, #-2147483648	; 0x80000000
   164bc:	str	r7, [sp, #4]
   164c0:	mvn	r8, #0
   164c4:	mvn	r7, #-2147483648	; 0x80000000
   164c8:	bl	16e58 <__assert_fail@plt+0x5dd0>
   164cc:	ldr	r2, [sp, #24]
   164d0:	ldr	r3, [sp, #28]
   164d4:	subs	r0, r0, r9
   164d8:	mov	r6, #1
   164dc:	sbcs	r0, r1, r4
   164e0:	str	r6, [sp, #8]
   164e4:	bge	16528 <__assert_fail@plt+0x54a0>
   164e8:	b	16544 <__assert_fail@plt+0x54bc>
   164ec:	mov	r0, #0
   164f0:	mov	r1, #-2147483648	; 0x80000000
   164f4:	mov	r2, r9
   164f8:	mov	r3, r4
   164fc:	str	r7, [sp, #4]
   16500:	bl	16d84 <__assert_fail@plt+0x5cfc>
   16504:	ldr	r2, [sp, #24]
   16508:	ldr	r3, [sp, #28]
   1650c:	mov	r7, #1
   16510:	mov	r8, #0
   16514:	str	r7, [sp, #8]
   16518:	mov	r7, #-2147483648	; 0x80000000
   1651c:	subs	r0, r0, r2
   16520:	sbcs	r0, r1, r3
   16524:	blt	16578 <__assert_fail@plt+0x54f0>
   16528:	umull	r8, r0, r9, r2
   1652c:	mla	r0, r9, r3, r0
   16530:	mla	r7, r4, r2, r0
   16534:	ldr	r0, [sp, #4]
   16538:	cmp	r7, #0
   1653c:	str	r0, [sp, #8]
   16540:	bmi	16578 <__assert_fail@plt+0x54f0>
   16544:	ldr	r3, [sp, #28]
   16548:	mvn	r0, #0
   1654c:	mvn	r1, #-2147483648	; 0x80000000
   16550:	mvn	r4, #0
   16554:	mvn	r9, #-2147483648	; 0x80000000
   16558:	bl	16e58 <__assert_fail@plt+0x5dd0>
   1655c:	ldr	r2, [sp, #24]
   16560:	ldr	r3, [sp, #28]
   16564:	subs	r0, r0, r8
   16568:	sbcs	r0, r1, r7
   1656c:	bge	165b0 <__assert_fail@plt+0x5528>
   16570:	mov	r8, #1
   16574:	b	165c8 <__assert_fail@plt+0x5540>
   16578:	mov	r0, #0
   1657c:	mov	r1, #-2147483648	; 0x80000000
   16580:	mov	r2, r8
   16584:	mov	r3, r7
   16588:	bl	16d84 <__assert_fail@plt+0x5cfc>
   1658c:	ldr	r2, [sp, #24]
   16590:	ldr	r3, [sp, #28]
   16594:	subs	r0, r0, r2
   16598:	sbcs	r0, r1, r3
   1659c:	bge	165b0 <__assert_fail@plt+0x5528>
   165a0:	mov	r8, #1
   165a4:	mov	r4, #0
   165a8:	mov	r9, #-2147483648	; 0x80000000
   165ac:	b	16640 <__assert_fail@plt+0x55b8>
   165b0:	umull	r4, r0, r8, r2
   165b4:	mla	r0, r8, r3, r0
   165b8:	ldr	r8, [sp, #8]
   165bc:	mla	r9, r7, r2, r0
   165c0:	cmp	r9, #0
   165c4:	bmi	16640 <__assert_fail@plt+0x55b8>
   165c8:	ldr	r3, [sp, #28]
   165cc:	mvn	r0, #0
   165d0:	mvn	r1, #-2147483648	; 0x80000000
   165d4:	mvn	r6, #0
   165d8:	mvn	r7, #-2147483648	; 0x80000000
   165dc:	bl	16e58 <__assert_fail@plt+0x5dd0>
   165e0:	ldr	r3, [sp, #24]
   165e4:	ldr	ip, [sp, #28]
   165e8:	subs	r0, r0, r4
   165ec:	mov	r2, #1
   165f0:	sbcs	r0, r1, r9
   165f4:	blt	16608 <__assert_fail@plt+0x5580>
   165f8:	umull	r6, r0, r4, r3
   165fc:	mov	r2, #0
   16600:	mla	r0, r4, ip, r0
   16604:	mla	r7, r9, r3, r0
   16608:	ldr	r9, [sp, #12]
   1660c:	orr	r3, r2, r8
   16610:	ldr	r1, [sp, #20]
   16614:	ldr	r2, [sp, #16]
   16618:	orr	r5, r3, r5
   1661c:	add	r0, r1, r2
   16620:	str	r0, [sl]
   16624:	ldrb	r0, [r1, r2]
   16628:	cmp	r0, #0
   1662c:	orrne	r5, r5, #2
   16630:	strd	r6, [r9]
   16634:	mov	r0, r5
   16638:	sub	sp, fp, #28
   1663c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16640:	mov	r0, #0
   16644:	mov	r1, #-2147483648	; 0x80000000
   16648:	mov	r2, r4
   1664c:	mov	r3, r9
   16650:	bl	16d84 <__assert_fail@plt+0x5cfc>
   16654:	ldr	r3, [sp, #24]
   16658:	ldr	ip, [sp, #28]
   1665c:	mov	r2, #1
   16660:	mov	r6, #0
   16664:	mov	r7, #-2147483648	; 0x80000000
   16668:	subs	r0, r0, r3
   1666c:	sbcs	r0, r1, ip
   16670:	bge	165f8 <__assert_fail@plt+0x5570>
   16674:	b	16608 <__assert_fail@plt+0x5580>
   16678:	ldr	r6, [sp, #8]
   1667c:	mov	r0, #0
   16680:	mov	r1, #-2147483648	; 0x80000000
   16684:	mov	r3, r9
   16688:	str	r4, [sp]
   1668c:	mov	r2, r6
   16690:	bl	16d84 <__assert_fail@plt+0x5cfc>
   16694:	ldr	r2, [sp, #24]
   16698:	ldr	r3, [sp, #28]
   1669c:	mov	r7, #1
   166a0:	mov	r8, #-2147483648	; 0x80000000
   166a4:	subs	r0, r0, r2
   166a8:	sbcs	r0, r1, r3
   166ac:	mov	r0, #0
   166b0:	str	r0, [sp, #4]
   166b4:	blt	16714 <__assert_fail@plt+0x568c>
   166b8:	umull	r1, r0, r6, r2
   166bc:	ldr	r7, [sp]
   166c0:	mla	r0, r6, r3, r0
   166c4:	mla	r8, r9, r2, r0
   166c8:	str	r1, [sp, #4]
   166cc:	cmp	r8, #0
   166d0:	bmi	16714 <__assert_fail@plt+0x568c>
   166d4:	ldr	r3, [sp, #28]
   166d8:	mvn	r0, #0
   166dc:	mvn	r1, #-2147483648	; 0x80000000
   166e0:	str	r7, [sp]
   166e4:	mvn	r7, #0
   166e8:	mvn	r4, #-2147483648	; 0x80000000
   166ec:	bl	16e58 <__assert_fail@plt+0x5dd0>
   166f0:	mov	r6, #1
   166f4:	ldr	r2, [sp, #24]
   166f8:	ldr	r3, [sp, #28]
   166fc:	str	r6, [sp, #8]
   16700:	ldr	r6, [sp, #4]
   16704:	subs	r0, r0, r6
   16708:	sbcs	r0, r1, r8
   1670c:	bge	16754 <__assert_fail@plt+0x56cc>
   16710:	b	16770 <__assert_fail@plt+0x56e8>
   16714:	ldr	r6, [sp, #4]
   16718:	mov	r0, #0
   1671c:	mov	r1, #-2147483648	; 0x80000000
   16720:	mov	r3, r8
   16724:	str	r7, [sp]
   16728:	mov	r2, r6
   1672c:	bl	16d84 <__assert_fail@plt+0x5cfc>
   16730:	ldr	r2, [sp, #24]
   16734:	ldr	r3, [sp, #28]
   16738:	mov	r7, #1
   1673c:	mov	r4, #-2147483648	; 0x80000000
   16740:	str	r7, [sp, #8]
   16744:	mov	r7, #0
   16748:	subs	r0, r0, r2
   1674c:	sbcs	r0, r1, r3
   16750:	blt	167a8 <__assert_fail@plt+0x5720>
   16754:	umull	r7, r0, r6, r2
   16758:	mla	r0, r6, r3, r0
   1675c:	mla	r4, r8, r2, r0
   16760:	ldr	r0, [sp]
   16764:	cmp	r4, #0
   16768:	str	r0, [sp, #8]
   1676c:	bmi	167a8 <__assert_fail@plt+0x5720>
   16770:	ldr	r3, [sp, #28]
   16774:	mvn	r0, #0
   16778:	mvn	r1, #-2147483648	; 0x80000000
   1677c:	mvn	r9, #0
   16780:	mvn	r8, #-2147483648	; 0x80000000
   16784:	bl	16e58 <__assert_fail@plt+0x5dd0>
   16788:	ldr	r2, [sp, #24]
   1678c:	ldr	r3, [sp, #28]
   16790:	subs	r0, r0, r7
   16794:	sbcs	r0, r1, r4
   16798:	bge	167e4 <__assert_fail@plt+0x575c>
   1679c:	mov	r0, #1
   167a0:	str	r0, [sp, #8]
   167a4:	b	167f8 <__assert_fail@plt+0x5770>
   167a8:	mov	r0, #0
   167ac:	mov	r1, #-2147483648	; 0x80000000
   167b0:	mov	r2, r7
   167b4:	mov	r3, r4
   167b8:	bl	16d84 <__assert_fail@plt+0x5cfc>
   167bc:	ldr	r2, [sp, #24]
   167c0:	ldr	r3, [sp, #28]
   167c4:	subs	r0, r0, r2
   167c8:	sbcs	r0, r1, r3
   167cc:	bge	167e4 <__assert_fail@plt+0x575c>
   167d0:	mov	r0, #1
   167d4:	mov	r9, #0
   167d8:	mov	r8, #-2147483648	; 0x80000000
   167dc:	str	r0, [sp, #8]
   167e0:	b	16830 <__assert_fail@plt+0x57a8>
   167e4:	umull	r9, r0, r7, r2
   167e8:	mla	r0, r7, r3, r0
   167ec:	mla	r8, r4, r2, r0
   167f0:	cmp	r8, #0
   167f4:	bmi	16830 <__assert_fail@plt+0x57a8>
   167f8:	ldr	r3, [sp, #28]
   167fc:	mvn	r0, #0
   16800:	mvn	r1, #-2147483648	; 0x80000000
   16804:	mvn	r4, #0
   16808:	mvn	r7, #-2147483648	; 0x80000000
   1680c:	bl	16e58 <__assert_fail@plt+0x5dd0>
   16810:	ldr	r2, [sp, #24]
   16814:	ldr	r3, [sp, #28]
   16818:	subs	r0, r0, r9
   1681c:	sbcs	r0, r1, r8
   16820:	bge	1686c <__assert_fail@plt+0x57e4>
   16824:	mov	r0, #1
   16828:	str	r0, [sp, #8]
   1682c:	b	16880 <__assert_fail@plt+0x57f8>
   16830:	mov	r0, #0
   16834:	mov	r1, #-2147483648	; 0x80000000
   16838:	mov	r2, r9
   1683c:	mov	r3, r8
   16840:	bl	16d84 <__assert_fail@plt+0x5cfc>
   16844:	ldr	r2, [sp, #24]
   16848:	ldr	r3, [sp, #28]
   1684c:	subs	r0, r0, r2
   16850:	sbcs	r0, r1, r3
   16854:	bge	1686c <__assert_fail@plt+0x57e4>
   16858:	mov	r0, #1
   1685c:	mov	r4, #0
   16860:	mov	r7, #-2147483648	; 0x80000000
   16864:	str	r0, [sp, #8]
   16868:	b	168b8 <__assert_fail@plt+0x5830>
   1686c:	umull	r4, r0, r9, r2
   16870:	mla	r0, r9, r3, r0
   16874:	mla	r7, r8, r2, r0
   16878:	cmp	r7, #0
   1687c:	bmi	168b8 <__assert_fail@plt+0x5830>
   16880:	ldr	r3, [sp, #28]
   16884:	mvn	r0, #0
   16888:	mvn	r1, #-2147483648	; 0x80000000
   1688c:	mvn	r8, #0
   16890:	mvn	r9, #-2147483648	; 0x80000000
   16894:	bl	16e58 <__assert_fail@plt+0x5dd0>
   16898:	ldr	r2, [sp, #24]
   1689c:	ldr	r3, [sp, #28]
   168a0:	subs	r0, r0, r4
   168a4:	sbcs	r0, r1, r7
   168a8:	bge	168f4 <__assert_fail@plt+0x586c>
   168ac:	mov	r0, #1
   168b0:	str	r0, [sp, #8]
   168b4:	b	16908 <__assert_fail@plt+0x5880>
   168b8:	mov	r0, #0
   168bc:	mov	r1, #-2147483648	; 0x80000000
   168c0:	mov	r2, r4
   168c4:	mov	r3, r7
   168c8:	bl	16d84 <__assert_fail@plt+0x5cfc>
   168cc:	ldr	r2, [sp, #24]
   168d0:	ldr	r3, [sp, #28]
   168d4:	subs	r0, r0, r2
   168d8:	sbcs	r0, r1, r3
   168dc:	bge	168f4 <__assert_fail@plt+0x586c>
   168e0:	mov	r0, #1
   168e4:	mov	r8, #0
   168e8:	mov	r9, #-2147483648	; 0x80000000
   168ec:	str	r0, [sp, #8]
   168f0:	b	16944 <__assert_fail@plt+0x58bc>
   168f4:	umull	r8, r0, r4, r2
   168f8:	mla	r0, r4, r3, r0
   168fc:	mla	r9, r7, r2, r0
   16900:	cmp	r9, #0
   16904:	bmi	16944 <__assert_fail@plt+0x58bc>
   16908:	ldr	r3, [sp, #28]
   1690c:	mvn	r0, #0
   16910:	mvn	r1, #-2147483648	; 0x80000000
   16914:	mvn	r4, #0
   16918:	mvn	r6, #-2147483648	; 0x80000000
   1691c:	bl	16e58 <__assert_fail@plt+0x5dd0>
   16920:	ldr	r2, [sp, #24]
   16924:	ldr	r3, [sp, #28]
   16928:	subs	r0, r0, r8
   1692c:	sbcs	r0, r1, r9
   16930:	bge	16984 <__assert_fail@plt+0x58fc>
   16934:	ldr	r9, [sp, #12]
   16938:	mov	r0, #1
   1693c:	str	r0, [sp, #8]
   16940:	b	1699c <__assert_fail@plt+0x5914>
   16944:	mov	r0, #0
   16948:	mov	r1, #-2147483648	; 0x80000000
   1694c:	mov	r2, r8
   16950:	mov	r3, r9
   16954:	bl	16d84 <__assert_fail@plt+0x5cfc>
   16958:	ldr	r2, [sp, #24]
   1695c:	ldr	r3, [sp, #28]
   16960:	subs	r0, r0, r2
   16964:	sbcs	r0, r1, r3
   16968:	bge	16984 <__assert_fail@plt+0x58fc>
   1696c:	ldr	r9, [sp, #12]
   16970:	mov	r0, #1
   16974:	mov	r4, #0
   16978:	mov	r6, #-2147483648	; 0x80000000
   1697c:	str	r0, [sp, #8]
   16980:	b	169e8 <__assert_fail@plt+0x5960>
   16984:	umull	r4, r0, r8, r2
   16988:	mla	r0, r8, r3, r0
   1698c:	mla	r6, r9, r2, r0
   16990:	ldr	r9, [sp, #12]
   16994:	cmp	r6, #0
   16998:	bmi	169e8 <__assert_fail@plt+0x5960>
   1699c:	ldr	r3, [sp, #28]
   169a0:	mvn	r0, #0
   169a4:	mvn	r1, #-2147483648	; 0x80000000
   169a8:	mov	r8, r6
   169ac:	mvn	r6, #0
   169b0:	mvn	r7, #-2147483648	; 0x80000000
   169b4:	bl	16e58 <__assert_fail@plt+0x5dd0>
   169b8:	ldr	r3, [sp, #24]
   169bc:	ldr	ip, [sp, #28]
   169c0:	subs	r0, r0, r4
   169c4:	mov	r2, #1
   169c8:	sbcs	r0, r1, r8
   169cc:	blt	169e0 <__assert_fail@plt+0x5958>
   169d0:	umull	r6, r0, r4, r3
   169d4:	mov	r2, #0
   169d8:	mla	r0, r4, ip, r0
   169dc:	mla	r7, r8, r3, r0
   169e0:	ldr	r0, [sp, #8]
   169e4:	b	15b2c <__assert_fail@plt+0x4aa4>
   169e8:	mov	r0, #0
   169ec:	mov	r1, #-2147483648	; 0x80000000
   169f0:	mov	r2, r4
   169f4:	mov	r3, r6
   169f8:	bl	16d84 <__assert_fail@plt+0x5cfc>
   169fc:	ldr	r3, [sp, #24]
   16a00:	ldr	ip, [sp, #28]
   16a04:	mov	r8, r6
   16a08:	mov	r2, #1
   16a0c:	mov	r6, #0
   16a10:	mov	r7, #-2147483648	; 0x80000000
   16a14:	subs	r0, r0, r3
   16a18:	sbcs	r0, r1, ip
   16a1c:	bge	169d0 <__assert_fail@plt+0x5948>
   16a20:	b	169e0 <__assert_fail@plt+0x5958>
   16a24:	movw	r0, #31665	; 0x7bb1
   16a28:	movw	r1, #31703	; 0x7bd7
   16a2c:	movw	r3, #31719	; 0x7be7
   16a30:	mov	r2, #85	; 0x55
   16a34:	movt	r0, #1
   16a38:	movt	r1, #1
   16a3c:	movt	r3, #1
   16a40:	bl	11088 <__assert_fail@plt>
   16a44:	clz	r2, r1
   16a48:	clz	r3, r0
   16a4c:	lsr	r2, r2, #5
   16a50:	lsr	r3, r3, #5
   16a54:	orrs	r2, r3, r2
   16a58:	movwne	r1, #1
   16a5c:	movwne	r0, #1
   16a60:	cmp	r1, #0
   16a64:	beq	16a94 <__assert_fail@plt+0x5a0c>
   16a68:	mvn	r2, #-2147483648	; 0x80000000
   16a6c:	udiv	r2, r2, r1
   16a70:	cmp	r2, r0
   16a74:	bcs	16a94 <__assert_fail@plt+0x5a0c>
   16a78:	push	{fp, lr}
   16a7c:	mov	fp, sp
   16a80:	bl	10fa4 <__errno_location@plt>
   16a84:	mov	r1, #12
   16a88:	str	r1, [r0]
   16a8c:	mov	r0, #0
   16a90:	pop	{fp, pc}
   16a94:	b	10e24 <calloc@plt>
   16a98:	cmp	r0, #0
   16a9c:	movweq	r0, #1
   16aa0:	cmn	r0, #1
   16aa4:	ble	16aac <__assert_fail@plt+0x5a24>
   16aa8:	b	10f2c <malloc@plt>
   16aac:	push	{fp, lr}
   16ab0:	mov	fp, sp
   16ab4:	bl	10fa4 <__errno_location@plt>
   16ab8:	mov	r1, #12
   16abc:	str	r1, [r0]
   16ac0:	mov	r0, #0
   16ac4:	pop	{fp, pc}
   16ac8:	push	{fp, lr}
   16acc:	mov	fp, sp
   16ad0:	cmp	r0, #0
   16ad4:	beq	16af0 <__assert_fail@plt+0x5a68>
   16ad8:	cmp	r1, #0
   16adc:	beq	16afc <__assert_fail@plt+0x5a74>
   16ae0:	cmn	r1, #1
   16ae4:	ble	16b08 <__assert_fail@plt+0x5a80>
   16ae8:	pop	{fp, lr}
   16aec:	b	10ec0 <realloc@plt>
   16af0:	mov	r0, r1
   16af4:	pop	{fp, lr}
   16af8:	b	16a98 <__assert_fail@plt+0x5a10>
   16afc:	bl	12684 <__assert_fail@plt+0x15fc>
   16b00:	mov	r0, #0
   16b04:	pop	{fp, pc}
   16b08:	bl	10fa4 <__errno_location@plt>
   16b0c:	mov	r1, #12
   16b10:	str	r1, [r0]
   16b14:	mov	r0, #0
   16b18:	pop	{fp, pc}
   16b1c:	push	{r4, r5, r6, sl, fp, lr}
   16b20:	add	fp, sp, #16
   16b24:	mov	r4, r0
   16b28:	bl	10f08 <__fpending@plt>
   16b2c:	ldr	r6, [r4]
   16b30:	mov	r5, r0
   16b34:	mov	r0, r4
   16b38:	bl	1258c <__assert_fail@plt+0x1504>
   16b3c:	tst	r6, #32
   16b40:	bne	16b78 <__assert_fail@plt+0x5af0>
   16b44:	cmp	r0, #0
   16b48:	mov	r4, r0
   16b4c:	mvnne	r4, #0
   16b50:	cmp	r5, #0
   16b54:	bne	16b84 <__assert_fail@plt+0x5afc>
   16b58:	cmp	r0, #0
   16b5c:	beq	16b84 <__assert_fail@plt+0x5afc>
   16b60:	bl	10fa4 <__errno_location@plt>
   16b64:	ldr	r0, [r0]
   16b68:	subs	r4, r0, #9
   16b6c:	mvnne	r4, #0
   16b70:	mov	r0, r4
   16b74:	pop	{r4, r5, r6, sl, fp, pc}
   16b78:	mvn	r4, #0
   16b7c:	cmp	r0, #0
   16b80:	beq	16b8c <__assert_fail@plt+0x5b04>
   16b84:	mov	r0, r4
   16b88:	pop	{r4, r5, r6, sl, fp, pc}
   16b8c:	bl	10fa4 <__errno_location@plt>
   16b90:	mov	r1, #0
   16b94:	str	r1, [r0]
   16b98:	mov	r0, r4
   16b9c:	pop	{r4, r5, r6, sl, fp, pc}
   16ba0:	push	{fp, lr}
   16ba4:	mov	fp, sp
   16ba8:	mov	r0, #14
   16bac:	bl	11034 <nl_langinfo@plt>
   16bb0:	movw	r1, #30056	; 0x7568
   16bb4:	cmp	r0, #0
   16bb8:	movt	r1, #1
   16bbc:	movne	r1, r0
   16bc0:	movw	r0, #31797	; 0x7c35
   16bc4:	ldrb	r2, [r1]
   16bc8:	movt	r0, #1
   16bcc:	cmp	r2, #0
   16bd0:	movne	r0, r1
   16bd4:	pop	{fp, pc}
   16bd8:	push	{r4, r5, r6, r7, fp, lr}
   16bdc:	add	fp, sp, #16
   16be0:	sub	sp, sp, #8
   16be4:	cmp	r0, #0
   16be8:	add	r5, sp, #4
   16bec:	mov	r7, r2
   16bf0:	mov	r4, r1
   16bf4:	movne	r5, r0
   16bf8:	mov	r0, r5
   16bfc:	bl	10f14 <mbrtowc@plt>
   16c00:	mov	r6, r0
   16c04:	cmp	r7, #0
   16c08:	beq	16c30 <__assert_fail@plt+0x5ba8>
   16c0c:	cmn	r6, #2
   16c10:	bcc	16c30 <__assert_fail@plt+0x5ba8>
   16c14:	mov	r0, #0
   16c18:	bl	16c78 <__assert_fail@plt+0x5bf0>
   16c1c:	cmp	r0, #0
   16c20:	bne	16c30 <__assert_fail@plt+0x5ba8>
   16c24:	ldrb	r0, [r4]
   16c28:	mov	r6, #1
   16c2c:	str	r0, [r5]
   16c30:	mov	r0, r6
   16c34:	sub	sp, fp, #16
   16c38:	pop	{r4, r5, r6, r7, fp, pc}
   16c3c:	cmp	r2, #0
   16c40:	beq	16c70 <__assert_fail@plt+0x5be8>
   16c44:	mvn	r3, #0
   16c48:	udiv	r3, r3, r2
   16c4c:	cmp	r3, r1
   16c50:	bcs	16c70 <__assert_fail@plt+0x5be8>
   16c54:	push	{fp, lr}
   16c58:	mov	fp, sp
   16c5c:	bl	10fa4 <__errno_location@plt>
   16c60:	mov	r1, #12
   16c64:	str	r1, [r0]
   16c68:	mov	r0, #0
   16c6c:	pop	{fp, pc}
   16c70:	mul	r1, r2, r1
   16c74:	b	16ac8 <__assert_fail@plt+0x5a40>
   16c78:	push	{r4, sl, fp, lr}
   16c7c:	add	fp, sp, #8
   16c80:	sub	sp, sp, #264	; 0x108
   16c84:	add	r1, sp, #7
   16c88:	movw	r2, #257	; 0x101
   16c8c:	bl	16ce4 <__assert_fail@plt+0x5c5c>
   16c90:	mov	r4, #0
   16c94:	cmp	r0, #0
   16c98:	bne	16cd8 <__assert_fail@plt+0x5c50>
   16c9c:	movw	r1, #31803	; 0x7c3b
   16ca0:	add	r0, sp, #7
   16ca4:	mov	r2, #2
   16ca8:	movt	r1, #1
   16cac:	bl	10f80 <bcmp@plt>
   16cb0:	cmp	r0, #0
   16cb4:	beq	16cd8 <__assert_fail@plt+0x5c50>
   16cb8:	movw	r1, #31805	; 0x7c3d
   16cbc:	add	r0, sp, #7
   16cc0:	mov	r2, #6
   16cc4:	movt	r1, #1
   16cc8:	bl	10f80 <bcmp@plt>
   16ccc:	cmp	r0, #0
   16cd0:	mov	r4, r0
   16cd4:	movwne	r4, #1
   16cd8:	mov	r0, r4
   16cdc:	sub	sp, fp, #8
   16ce0:	pop	{r4, sl, fp, pc}
   16ce4:	push	{r4, r5, r6, r7, fp, lr}
   16ce8:	add	fp, sp, #16
   16cec:	mov	r4, r1
   16cf0:	mov	r1, #0
   16cf4:	mov	r6, r2
   16cf8:	bl	1101c <setlocale@plt>
   16cfc:	cmp	r0, #0
   16d00:	beq	16d30 <__assert_fail@plt+0x5ca8>
   16d04:	mov	r7, r0
   16d08:	bl	10f8c <strlen@plt>
   16d0c:	cmp	r0, r6
   16d10:	bcs	16d4c <__assert_fail@plt+0x5cc4>
   16d14:	add	r2, r0, #1
   16d18:	mov	r0, r4
   16d1c:	mov	r1, r7
   16d20:	bl	10e90 <memcpy@plt>
   16d24:	mov	r5, #0
   16d28:	mov	r0, r5
   16d2c:	pop	{r4, r5, r6, r7, fp, pc}
   16d30:	mov	r5, #22
   16d34:	cmp	r6, #0
   16d38:	beq	16d74 <__assert_fail@plt+0x5cec>
   16d3c:	mov	r0, #0
   16d40:	strb	r0, [r4]
   16d44:	mov	r0, r5
   16d48:	pop	{r4, r5, r6, r7, fp, pc}
   16d4c:	mov	r5, #34	; 0x22
   16d50:	cmp	r6, #0
   16d54:	beq	16d74 <__assert_fail@plt+0x5cec>
   16d58:	sub	r6, r6, #1
   16d5c:	mov	r0, r4
   16d60:	mov	r1, r7
   16d64:	mov	r2, r6
   16d68:	bl	10e90 <memcpy@plt>
   16d6c:	mov	r0, #0
   16d70:	strb	r0, [r4, r6]
   16d74:	mov	r0, r5
   16d78:	pop	{r4, r5, r6, r7, fp, pc}
   16d7c:	mov	r1, #0
   16d80:	b	1101c <setlocale@plt>
   16d84:	cmp	r3, #0
   16d88:	cmpeq	r2, #0
   16d8c:	bne	16db0 <__assert_fail@plt+0x5d28>
   16d90:	cmp	r1, #0
   16d94:	movlt	r1, #-2147483648	; 0x80000000
   16d98:	movlt	r0, #0
   16d9c:	blt	16dac <__assert_fail@plt+0x5d24>
   16da0:	cmpeq	r0, #0
   16da4:	mvnne	r1, #-2147483648	; 0x80000000
   16da8:	mvnne	r0, #0
   16dac:	b	16e94 <__assert_fail@plt+0x5e0c>
   16db0:	sub	sp, sp, #8
   16db4:	push	{sp, lr}
   16db8:	cmp	r1, #0
   16dbc:	blt	16ddc <__assert_fail@plt+0x5d54>
   16dc0:	cmp	r3, #0
   16dc4:	blt	16e10 <__assert_fail@plt+0x5d88>
   16dc8:	bl	16ea4 <__assert_fail@plt+0x5e1c>
   16dcc:	ldr	lr, [sp, #4]
   16dd0:	add	sp, sp, #8
   16dd4:	pop	{r2, r3}
   16dd8:	bx	lr
   16ddc:	rsbs	r0, r0, #0
   16de0:	sbc	r1, r1, r1, lsl #1
   16de4:	cmp	r3, #0
   16de8:	blt	16e34 <__assert_fail@plt+0x5dac>
   16dec:	bl	16ea4 <__assert_fail@plt+0x5e1c>
   16df0:	ldr	lr, [sp, #4]
   16df4:	add	sp, sp, #8
   16df8:	pop	{r2, r3}
   16dfc:	rsbs	r0, r0, #0
   16e00:	sbc	r1, r1, r1, lsl #1
   16e04:	rsbs	r2, r2, #0
   16e08:	sbc	r3, r3, r3, lsl #1
   16e0c:	bx	lr
   16e10:	rsbs	r2, r2, #0
   16e14:	sbc	r3, r3, r3, lsl #1
   16e18:	bl	16ea4 <__assert_fail@plt+0x5e1c>
   16e1c:	ldr	lr, [sp, #4]
   16e20:	add	sp, sp, #8
   16e24:	pop	{r2, r3}
   16e28:	rsbs	r0, r0, #0
   16e2c:	sbc	r1, r1, r1, lsl #1
   16e30:	bx	lr
   16e34:	rsbs	r2, r2, #0
   16e38:	sbc	r3, r3, r3, lsl #1
   16e3c:	bl	16ea4 <__assert_fail@plt+0x5e1c>
   16e40:	ldr	lr, [sp, #4]
   16e44:	add	sp, sp, #8
   16e48:	pop	{r2, r3}
   16e4c:	rsbs	r2, r2, #0
   16e50:	sbc	r3, r3, r3, lsl #1
   16e54:	bx	lr
   16e58:	cmp	r3, #0
   16e5c:	cmpeq	r2, #0
   16e60:	bne	16e78 <__assert_fail@plt+0x5df0>
   16e64:	cmp	r1, #0
   16e68:	cmpeq	r0, #0
   16e6c:	mvnne	r1, #0
   16e70:	mvnne	r0, #0
   16e74:	b	16e94 <__assert_fail@plt+0x5e0c>
   16e78:	sub	sp, sp, #8
   16e7c:	push	{sp, lr}
   16e80:	bl	16ea4 <__assert_fail@plt+0x5e1c>
   16e84:	ldr	lr, [sp, #4]
   16e88:	add	sp, sp, #8
   16e8c:	pop	{r2, r3}
   16e90:	bx	lr
   16e94:	push	{r1, lr}
   16e98:	mov	r0, #8
   16e9c:	bl	10e3c <raise@plt>
   16ea0:	pop	{r1, pc}
   16ea4:	cmp	r1, r3
   16ea8:	cmpeq	r0, r2
   16eac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16eb0:	mov	r4, r0
   16eb4:	movcc	r0, #0
   16eb8:	mov	r5, r1
   16ebc:	ldr	lr, [sp, #36]	; 0x24
   16ec0:	movcc	r1, r0
   16ec4:	bcc	16fc0 <__assert_fail@plt+0x5f38>
   16ec8:	cmp	r3, #0
   16ecc:	clzeq	ip, r2
   16ed0:	clzne	ip, r3
   16ed4:	addeq	ip, ip, #32
   16ed8:	cmp	r5, #0
   16edc:	clzeq	r1, r4
   16ee0:	addeq	r1, r1, #32
   16ee4:	clzne	r1, r5
   16ee8:	sub	ip, ip, r1
   16eec:	sub	sl, ip, #32
   16ef0:	lsl	r9, r3, ip
   16ef4:	rsb	fp, ip, #32
   16ef8:	orr	r9, r9, r2, lsl sl
   16efc:	orr	r9, r9, r2, lsr fp
   16f00:	lsl	r8, r2, ip
   16f04:	cmp	r5, r9
   16f08:	cmpeq	r4, r8
   16f0c:	movcc	r0, #0
   16f10:	movcc	r1, r0
   16f14:	bcc	16f30 <__assert_fail@plt+0x5ea8>
   16f18:	mov	r0, #1
   16f1c:	subs	r4, r4, r8
   16f20:	lsl	r1, r0, sl
   16f24:	orr	r1, r1, r0, lsr fp
   16f28:	lsl	r0, r0, ip
   16f2c:	sbc	r5, r5, r9
   16f30:	cmp	ip, #0
   16f34:	beq	16fc0 <__assert_fail@plt+0x5f38>
   16f38:	lsr	r6, r8, #1
   16f3c:	orr	r6, r6, r9, lsl #31
   16f40:	lsr	r7, r9, #1
   16f44:	mov	r2, ip
   16f48:	b	16f6c <__assert_fail@plt+0x5ee4>
   16f4c:	subs	r3, r4, r6
   16f50:	sbc	r8, r5, r7
   16f54:	adds	r3, r3, r3
   16f58:	adc	r8, r8, r8
   16f5c:	adds	r4, r3, #1
   16f60:	adc	r5, r8, #0
   16f64:	subs	r2, r2, #1
   16f68:	beq	16f88 <__assert_fail@plt+0x5f00>
   16f6c:	cmp	r5, r7
   16f70:	cmpeq	r4, r6
   16f74:	bcs	16f4c <__assert_fail@plt+0x5ec4>
   16f78:	adds	r4, r4, r4
   16f7c:	adc	r5, r5, r5
   16f80:	subs	r2, r2, #1
   16f84:	bne	16f6c <__assert_fail@plt+0x5ee4>
   16f88:	lsr	r3, r4, ip
   16f8c:	orr	r3, r3, r5, lsl fp
   16f90:	lsr	r2, r5, ip
   16f94:	orr	r3, r3, r5, lsr sl
   16f98:	adds	r0, r0, r4
   16f9c:	mov	r4, r3
   16fa0:	lsl	r3, r2, ip
   16fa4:	orr	r3, r3, r4, lsl sl
   16fa8:	lsl	ip, r4, ip
   16fac:	orr	r3, r3, r4, lsr fp
   16fb0:	adc	r1, r1, r5
   16fb4:	subs	r0, r0, ip
   16fb8:	mov	r5, r2
   16fbc:	sbc	r1, r1, r3
   16fc0:	cmp	lr, #0
   16fc4:	strdne	r4, [lr]
   16fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fcc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16fd0:	mov	r7, r0
   16fd4:	ldr	r6, [pc, #72]	; 17024 <__assert_fail@plt+0x5f9c>
   16fd8:	ldr	r5, [pc, #72]	; 17028 <__assert_fail@plt+0x5fa0>
   16fdc:	add	r6, pc, r6
   16fe0:	add	r5, pc, r5
   16fe4:	sub	r6, r6, r5
   16fe8:	mov	r8, r1
   16fec:	mov	r9, r2
   16ff0:	bl	10e04 <calloc@plt-0x20>
   16ff4:	asrs	r6, r6, #2
   16ff8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16ffc:	mov	r4, #0
   17000:	add	r4, r4, #1
   17004:	ldr	r3, [r5], #4
   17008:	mov	r2, r9
   1700c:	mov	r1, r8
   17010:	mov	r0, r7
   17014:	blx	r3
   17018:	cmp	r6, r4
   1701c:	bne	17000 <__assert_fail@plt+0x5f78>
   17020:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17024:	andeq	r0, r1, r8, lsr #30
   17028:	andeq	r0, r1, r0, lsr #30
   1702c:	bx	lr
   17030:	ldr	r3, [pc, #12]	; 17044 <__assert_fail@plt+0x5fbc>
   17034:	mov	r1, #0
   17038:	add	r3, pc, r3
   1703c:	ldr	r2, [r3]
   17040:	b	10fb0 <__cxa_atexit@plt>
   17044:	andeq	r1, r1, r4, lsr #1

Disassembly of section .fini:

00017048 <.fini>:
   17048:	push	{r3, lr}
   1704c:	pop	{r3, pc}
