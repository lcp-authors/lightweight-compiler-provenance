
../repos/inetutils/tests/ls:     file format elf32-littlearm


Disassembly of section .init:

00010cb8 <.init>:
   10cb8:	push	{r3, lr}
   10cbc:	bl	10f9c <__assert_fail@plt+0x48>
   10cc0:	pop	{r3, pc}

Disassembly of section .plt:

00010cc4 <fstatfs64@plt-0x14>:
   10cc4:	push	{lr}		; (str lr, [sp, #-4]!)
   10cc8:	ldr	lr, [pc, #4]	; 10cd4 <fstatfs64@plt-0x4>
   10ccc:	add	lr, pc, lr
   10cd0:	ldr	pc, [lr, #8]!
   10cd4:	andeq	r7, r1, ip, lsr #6

00010cd8 <fstatfs64@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #94208	; 0x17000
   10ce0:	ldr	pc, [ip, #812]!	; 0x32c

00010ce4 <calloc@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #94208	; 0x17000
   10cec:	ldr	pc, [ip, #804]!	; 0x324

00010cf0 <raise@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #94208	; 0x17000
   10cf8:	ldr	pc, [ip, #796]!	; 0x31c

00010cfc <strcmp@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #94208	; 0x17000
   10d04:	ldr	pc, [ip, #788]!	; 0x314

00010d08 <getpwuid@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #94208	; 0x17000
   10d10:	ldr	pc, [ip, #780]!	; 0x30c

00010d14 <printf@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #94208	; 0x17000
   10d1c:	ldr	pc, [ip, #772]!	; 0x304

00010d20 <getuid@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #94208	; 0x17000
   10d28:	ldr	pc, [ip, #764]!	; 0x2fc

00010d2c <memmove@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #94208	; 0x17000
   10d34:	ldr	pc, [ip, #756]!	; 0x2f4

00010d38 <free@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #94208	; 0x17000
   10d40:	ldr	pc, [ip, #748]!	; 0x2ec

00010d44 <memcpy@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #94208	; 0x17000
   10d4c:	ldr	pc, [ip, #740]!	; 0x2e4

00010d50 <time@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #94208	; 0x17000
   10d58:	ldr	pc, [ip, #732]!	; 0x2dc

00010d5c <ctime@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #94208	; 0x17000
   10d64:	ldr	pc, [ip, #724]!	; 0x2d4

00010d68 <realloc@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #94208	; 0x17000
   10d70:	ldr	pc, [ip, #716]!	; 0x2cc

00010d74 <funlockfile@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #94208	; 0x17000
   10d7c:	ldr	pc, [ip, #708]!	; 0x2c4

00010d80 <__fxstatat64@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #94208	; 0x17000
   10d88:	ldr	pc, [ip, #700]!	; 0x2bc

00010d8c <__fxstat64@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #94208	; 0x17000
   10d94:	ldr	pc, [ip, #692]!	; 0x2b4

00010d98 <readlink@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #94208	; 0x17000
   10da0:	ldr	pc, [ip, #684]!	; 0x2ac

00010da4 <fwrite@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #94208	; 0x17000
   10dac:	ldr	pc, [ip, #676]!	; 0x2a4

00010db0 <ioctl@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #94208	; 0x17000
   10db8:	ldr	pc, [ip, #668]!	; 0x29c

00010dbc <strcpy@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #94208	; 0x17000
   10dc4:	ldr	pc, [ip, #660]!	; 0x294

00010dc8 <open64@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #94208	; 0x17000
   10dd0:	ldr	pc, [ip, #652]!	; 0x28c

00010dd4 <getenv@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #94208	; 0x17000
   10ddc:	ldr	pc, [ip, #644]!	; 0x284

00010de0 <malloc@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #94208	; 0x17000
   10de8:	ldr	pc, [ip, #636]!	; 0x27c

00010dec <__libc_start_main@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #94208	; 0x17000
   10df4:	ldr	pc, [ip, #628]!	; 0x274

00010df8 <strerror@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #94208	; 0x17000
   10e00:	ldr	pc, [ip, #620]!	; 0x26c

00010e04 <__gmon_start__@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #94208	; 0x17000
   10e0c:	ldr	pc, [ip, #612]!	; 0x264

00010e10 <__ctype_b_loc@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #94208	; 0x17000
   10e18:	ldr	pc, [ip, #604]!	; 0x25c

00010e1c <strlen@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #94208	; 0x17000
   10e24:	ldr	pc, [ip, #596]!	; 0x254

00010e28 <strchr@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #94208	; 0x17000
   10e30:	ldr	pc, [ip, #588]!	; 0x24c

00010e34 <openat64@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #94208	; 0x17000
   10e3c:	ldr	pc, [ip, #580]!	; 0x244

00010e40 <fprintf@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #94208	; 0x17000
   10e48:	ldr	pc, [ip, #572]!	; 0x23c

00010e4c <__errno_location@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #94208	; 0x17000
   10e54:	ldr	pc, [ip, #564]!	; 0x234

00010e58 <snprintf@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #94208	; 0x17000
   10e60:	ldr	pc, [ip, #556]!	; 0x22c

00010e64 <memset@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #94208	; 0x17000
   10e6c:	ldr	pc, [ip, #548]!	; 0x224

00010e70 <putchar@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #94208	; 0x17000
   10e78:	ldr	pc, [ip, #540]!	; 0x21c

00010e7c <fcntl64@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #94208	; 0x17000
   10e84:	ldr	pc, [ip, #532]!	; 0x214

00010e88 <strrchr@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #94208	; 0x17000
   10e90:	ldr	pc, [ip, #524]!	; 0x20c

00010e94 <fputc@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #94208	; 0x17000
   10e9c:	ldr	pc, [ip, #516]!	; 0x204

00010ea0 <readdir64@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #94208	; 0x17000
   10ea8:	ldr	pc, [ip, #508]!	; 0x1fc

00010eac <fdopendir@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #500]!	; 0x1f4

00010eb8 <dirfd@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #492]!	; 0x1ec

00010ec4 <flockfile@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #484]!	; 0x1e4

00010ed0 <atoi@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #476]!	; 0x1dc

00010edc <fchdir@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #468]!	; 0x1d4

00010ee8 <qsort@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #460]!	; 0x1cc

00010ef4 <__xstat64@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #452]!	; 0x1c4

00010f00 <isatty@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #444]!	; 0x1bc

00010f0c <strncmp@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #436]!	; 0x1b4

00010f18 <abort@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #428]!	; 0x1ac

00010f24 <close@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #420]!	; 0x1a4

00010f30 <__lxstat64@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #412]!	; 0x19c

00010f3c <closedir@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #404]!	; 0x194

00010f48 <getgrgid@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #396]!	; 0x18c

00010f54 <__assert_fail@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #388]!	; 0x184

Disassembly of section .text:

00010f60 <.text>:
   10f60:	mov	fp, #0
   10f64:	mov	lr, #0
   10f68:	pop	{r1}		; (ldr r1, [sp], #4)
   10f6c:	mov	r2, sp
   10f70:	push	{r2}		; (str r2, [sp, #-4]!)
   10f74:	push	{r0}		; (str r0, [sp, #-4]!)
   10f78:	ldr	ip, [pc, #16]	; 10f90 <__assert_fail@plt+0x3c>
   10f7c:	push	{ip}		; (str ip, [sp, #-4]!)
   10f80:	ldr	r0, [pc, #12]	; 10f94 <__assert_fail@plt+0x40>
   10f84:	ldr	r3, [pc, #12]	; 10f98 <__assert_fail@plt+0x44>
   10f88:	bl	10dec <__libc_start_main@plt>
   10f8c:	bl	10f18 <abort@plt>
   10f90:	andeq	r7, r1, r8, lsr r8
   10f94:	andeq	r1, r1, r0, asr r0
   10f98:	ldrdeq	r7, [r1], -r8
   10f9c:	ldr	r3, [pc, #20]	; 10fb8 <__assert_fail@plt+0x64>
   10fa0:	ldr	r2, [pc, #20]	; 10fbc <__assert_fail@plt+0x68>
   10fa4:	add	r3, pc, r3
   10fa8:	ldr	r2, [r3, r2]
   10fac:	cmp	r2, #0
   10fb0:	bxeq	lr
   10fb4:	b	10e04 <__gmon_start__@plt>
   10fb8:	andeq	r7, r1, r4, asr r0
   10fbc:	andeq	r0, r0, r4, ror #1
   10fc0:	ldr	r0, [pc, #24]	; 10fe0 <__assert_fail@plt+0x8c>
   10fc4:	ldr	r3, [pc, #24]	; 10fe4 <__assert_fail@plt+0x90>
   10fc8:	cmp	r3, r0
   10fcc:	bxeq	lr
   10fd0:	ldr	r3, [pc, #16]	; 10fe8 <__assert_fail@plt+0x94>
   10fd4:	cmp	r3, #0
   10fd8:	bxeq	lr
   10fdc:	bx	r3
   10fe0:	andeq	r8, r2, r0, lsl r1
   10fe4:	andeq	r8, r2, r0, lsl r1
   10fe8:	andeq	r0, r0, r0
   10fec:	ldr	r0, [pc, #36]	; 11018 <__assert_fail@plt+0xc4>
   10ff0:	ldr	r1, [pc, #36]	; 1101c <__assert_fail@plt+0xc8>
   10ff4:	sub	r1, r1, r0
   10ff8:	asr	r1, r1, #2
   10ffc:	add	r1, r1, r1, lsr #31
   11000:	asrs	r1, r1, #1
   11004:	bxeq	lr
   11008:	ldr	r3, [pc, #16]	; 11020 <__assert_fail@plt+0xcc>
   1100c:	cmp	r3, #0
   11010:	bxeq	lr
   11014:	bx	r3
   11018:	andeq	r8, r2, r0, lsl r1
   1101c:	andeq	r8, r2, r0, lsl r1
   11020:	andeq	r0, r0, r0
   11024:	push	{r4, lr}
   11028:	ldr	r4, [pc, #24]	; 11048 <__assert_fail@plt+0xf4>
   1102c:	ldrb	r3, [r4]
   11030:	cmp	r3, #0
   11034:	popne	{r4, pc}
   11038:	bl	10fc0 <__assert_fail@plt+0x6c>
   1103c:	mov	r3, #1
   11040:	strb	r3, [r4]
   11044:	pop	{r4, pc}
   11048:	andeq	r8, r2, r4, lsl r1
   1104c:	b	10fec <__assert_fail@plt+0x98>
   11050:	b	11054 <__assert_fail@plt+0x100>
   11054:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11058:	add	fp, sp, #28
   1105c:	sub	sp, sp, #12
   11060:	mov	r4, r1
   11064:	mov	r5, r0
   11068:	movw	r1, #33052	; 0x811c
   1106c:	movt	r1, #2
   11070:	mov	r0, #0
   11074:	strb	r0, [r1]
   11078:	movw	r1, #33132	; 0x816c
   1107c:	movt	r1, #2
   11080:	str	r0, [r1]
   11084:	movw	r1, #33124	; 0x8164
   11088:	movt	r1, #2
   1108c:	str	r0, [r1]
   11090:	movw	r1, #33176	; 0x8198
   11094:	movt	r1, #2
   11098:	str	r0, [r1]
   1109c:	movw	r8, #33120	; 0x8160
   110a0:	movt	r8, #2
   110a4:	str	r0, [r8]
   110a8:	movw	r1, #33140	; 0x8174
   110ac:	movt	r1, #2
   110b0:	str	r0, [r1]
   110b4:	movw	r1, #33192	; 0x81a8
   110b8:	movt	r1, #2
   110bc:	str	r0, [r1]
   110c0:	movw	sl, #33160	; 0x8188
   110c4:	movt	sl, #2
   110c8:	str	r0, [sl]
   110cc:	movw	r1, #33196	; 0x81ac
   110d0:	movt	r1, #2
   110d4:	str	r0, [r1]
   110d8:	movw	r1, #33180	; 0x819c
   110dc:	movt	r1, #2
   110e0:	str	r0, [r1]
   110e4:	movw	r1, #33172	; 0x8194
   110e8:	movt	r1, #2
   110ec:	str	r0, [r1]
   110f0:	movw	r1, #33144	; 0x8178
   110f4:	movt	r1, #2
   110f8:	str	r0, [r1]
   110fc:	movw	r1, #33200	; 0x81b0
   11100:	movt	r1, #2
   11104:	str	r0, [r1]
   11108:	movw	r6, #33116	; 0x815c
   1110c:	movt	r6, #2
   11110:	str	r0, [r6]
   11114:	movw	r1, #33168	; 0x8190
   11118:	movt	r1, #2
   1111c:	str	r0, [r1]
   11120:	movw	r1, #33136	; 0x8170
   11124:	movt	r1, #2
   11128:	str	r0, [r1]
   1112c:	movw	r1, #33128	; 0x8168
   11130:	movt	r1, #2
   11134:	str	r0, [r1]
   11138:	movw	r1, #33112	; 0x8158
   1113c:	movt	r1, #2
   11140:	str	r0, [r1]
   11144:	movw	r1, #33184	; 0x81a0
   11148:	movt	r1, #2
   1114c:	str	r0, [r1]
   11150:	movw	r9, #33204	; 0x81b4
   11154:	movt	r9, #2
   11158:	str	r0, [r9]
   1115c:	movw	r1, #33108	; 0x8154
   11160:	movt	r1, #2
   11164:	str	r0, [r1]
   11168:	movw	r1, #33152	; 0x8180
   1116c:	movt	r1, #2
   11170:	str	r0, [r1]
   11174:	movw	r1, #33164	; 0x818c
   11178:	movt	r1, #2
   1117c:	str	r0, [r1]
   11180:	movw	r1, #33148	; 0x817c
   11184:	movt	r1, #2
   11188:	str	r0, [r1]
   1118c:	mov	r7, #1
   11190:	mov	r0, #1
   11194:	bl	10f00 <isatty@plt>
   11198:	cmp	r0, #0
   1119c:	beq	111f4 <__assert_fail@plt+0x2a0>
   111a0:	movw	r0, #30884	; 0x78a4
   111a4:	movt	r0, #1
   111a8:	bl	10dd4 <getenv@plt>
   111ac:	cmp	r0, #0
   111b0:	beq	111c8 <__assert_fail@plt+0x274>
   111b4:	bl	10ed0 <atoi@plt>
   111b8:	movw	r1, #33008	; 0x80f0
   111bc:	movt	r1, #2
   111c0:	str	r0, [r1]
   111c4:	b	111e0 <__assert_fail@plt+0x28c>
   111c8:	add	r2, sp, #4
   111cc:	mov	r0, #1
   111d0:	movw	r1, #21523	; 0x5413
   111d4:	bl	16f18 <__assert_fail@plt+0x5fc4>
   111d8:	cmp	r0, #0
   111dc:	beq	11808 <__assert_fail@plt+0x8b4>
   111e0:	mov	r0, #1
   111e4:	movw	r1, #33200	; 0x81b0
   111e8:	movt	r1, #2
   111ec:	str	r0, [r1]
   111f0:	mov	r6, r8
   111f4:	str	r7, [r6]
   111f8:	bl	10d20 <getuid@plt>
   111fc:	cmp	r0, #0
   11200:	bne	11214 <__assert_fail@plt+0x2c0>
   11204:	mov	r0, #1
   11208:	movw	r1, #33196	; 0x81ac
   1120c:	movt	r1, #2
   11210:	str	r0, [r1]
   11214:	movw	r1, #33028	; 0x8104
   11218:	movt	r1, #2
   1121c:	mov	r0, #1
   11220:	str	r0, [r1]
   11224:	mov	r6, #20
   11228:	movw	r7, #30892	; 0x78ac
   1122c:	movt	r7, #1
   11230:	movw	r8, #33176	; 0x8198
   11234:	movt	r8, #2
   11238:	b	11250 <__assert_fail@plt+0x2fc>
   1123c:	orr	r6, r6, #32
   11240:	mov	r0, #1
   11244:	movw	r1, #33196	; 0x81ac
   11248:	movt	r1, #2
   1124c:	str	r0, [r1]
   11250:	mov	r0, r5
   11254:	mov	r1, r4
   11258:	mov	r2, r7
   1125c:	bl	15ea8 <__assert_fail@plt+0x4f54>
   11260:	add	r0, r0, #1
   11264:	cmp	r0, #121	; 0x79
   11268:	bhi	117d0 <__assert_fail@plt+0x87c>
   1126c:	add	r1, pc, #0
   11270:	ldr	pc, [r1, r0, lsl #2]
   11274:	andeq	r1, r1, r8, ror #13
   11278:	ldrdeq	r1, [r1], -r0
   1127c:	ldrdeq	r1, [r1], -r0
   11280:	ldrdeq	r1, [r1], -r0
   11284:	ldrdeq	r1, [r1], -r0
   11288:	ldrdeq	r1, [r1], -r0
   1128c:	ldrdeq	r1, [r1], -r0
   11290:	ldrdeq	r1, [r1], -r0
   11294:	ldrdeq	r1, [r1], -r0
   11298:	ldrdeq	r1, [r1], -r0
   1129c:	ldrdeq	r1, [r1], -r0
   112a0:	ldrdeq	r1, [r1], -r0
   112a4:	ldrdeq	r1, [r1], -r0
   112a8:	ldrdeq	r1, [r1], -r0
   112ac:	ldrdeq	r1, [r1], -r0
   112b0:	ldrdeq	r1, [r1], -r0
   112b4:	ldrdeq	r1, [r1], -r0
   112b8:	ldrdeq	r1, [r1], -r0
   112bc:	ldrdeq	r1, [r1], -r0
   112c0:	ldrdeq	r1, [r1], -r0
   112c4:	ldrdeq	r1, [r1], -r0
   112c8:	ldrdeq	r1, [r1], -r0
   112cc:	ldrdeq	r1, [r1], -r0
   112d0:	ldrdeq	r1, [r1], -r0
   112d4:	ldrdeq	r1, [r1], -r0
   112d8:	ldrdeq	r1, [r1], -r0
   112dc:	ldrdeq	r1, [r1], -r0
   112e0:	ldrdeq	r1, [r1], -r0
   112e4:	ldrdeq	r1, [r1], -r0
   112e8:	ldrdeq	r1, [r1], -r0
   112ec:	ldrdeq	r1, [r1], -r0
   112f0:	ldrdeq	r1, [r1], -r0
   112f4:	ldrdeq	r1, [r1], -r0
   112f8:	ldrdeq	r1, [r1], -r0
   112fc:	ldrdeq	r1, [r1], -r0
   11300:	ldrdeq	r1, [r1], -r0
   11304:	ldrdeq	r1, [r1], -r0
   11308:	ldrdeq	r1, [r1], -r0
   1130c:	ldrdeq	r1, [r1], -r0
   11310:	ldrdeq	r1, [r1], -r0
   11314:	ldrdeq	r1, [r1], -r0
   11318:	ldrdeq	r1, [r1], -r0
   1131c:	ldrdeq	r1, [r1], -r0
   11320:	ldrdeq	r1, [r1], -r0
   11324:	ldrdeq	r1, [r1], -r0
   11328:	ldrdeq	r1, [r1], -r0
   1132c:	ldrdeq	r1, [r1], -r0
   11330:	ldrdeq	r1, [r1], -r0
   11334:	ldrdeq	r1, [r1], -r0
   11338:	ldrdeq	r1, [r1], -r0
   1133c:	andeq	r1, r1, ip, asr r4
   11340:	ldrdeq	r1, [r1], -r0
   11344:	ldrdeq	r1, [r1], -r0
   11348:	ldrdeq	r1, [r1], -r0
   1134c:	ldrdeq	r1, [r1], -r0
   11350:	ldrdeq	r1, [r1], -r0
   11354:	ldrdeq	r1, [r1], -r0
   11358:	ldrdeq	r1, [r1], -r0
   1135c:	ldrdeq	r1, [r1], -r0
   11360:	ldrdeq	r1, [r1], -r0
   11364:	ldrdeq	r1, [r1], -r0
   11368:	ldrdeq	r1, [r1], -r0
   1136c:	ldrdeq	r1, [r1], -r0
   11370:	ldrdeq	r1, [r1], -r0
   11374:	ldrdeq	r1, [r1], -r0
   11378:	ldrdeq	r1, [r1], -r0
   1137c:	andeq	r1, r1, r0, asr #4
   11380:	ldrdeq	r1, [r1], -r0
   11384:	andeq	r1, r1, ip, ror r4
   11388:	ldrdeq	r1, [r1], -r0
   1138c:	ldrdeq	r1, [r1], -r0
   11390:	andeq	r1, r1, ip, lsr #9
   11394:	ldrdeq	r1, [r1], -r0
   11398:	ldrdeq	r1, [r1], -r0
   1139c:	ldrdeq	r1, [r1], -r0
   113a0:	ldrdeq	r1, [r1], -r0
   113a4:	ldrdeq	r1, [r1], -r0
   113a8:	andeq	r1, r1, r0, asr #9
   113ac:	ldrdeq	r1, [r1], -r0
   113b0:	ldrdeq	r1, [r1], -r0
   113b4:	ldrdeq	r1, [r1], -r0
   113b8:	ldrdeq	r1, [r1], -r0
   113bc:	ldrdeq	r1, [r1], -r0
   113c0:	andeq	r1, r1, ip, asr #9
   113c4:	andeq	r1, r1, r0, ror #9
   113c8:	strdeq	r1, [r1], -r4
   113cc:	ldrdeq	r1, [r1], -r0
   113d0:	ldrdeq	r1, [r1], -r0
   113d4:	andeq	r1, r1, r8, lsl #10
   113d8:	ldrdeq	r1, [r1], -r0
   113dc:	ldrdeq	r1, [r1], -r0
   113e0:	ldrdeq	r1, [r1], -r0
   113e4:	ldrdeq	r1, [r1], -r0
   113e8:	ldrdeq	r1, [r1], -r0
   113ec:	ldrdeq	r1, [r1], -r0
   113f0:	ldrdeq	r1, [r1], -r0
   113f4:	ldrdeq	r1, [r1], -r0
   113f8:	ldrdeq	r1, [r1], -r0
   113fc:	andeq	r1, r1, ip, lsr r2
   11400:	ldrdeq	r1, [r1], -r0
   11404:	andeq	r1, r1, ip, lsl r5
   11408:	andeq	r1, r1, r0, asr #10
   1140c:	ldrdeq	r1, [r1], -r0
   11410:	andeq	r1, r1, r4, ror #10
   11414:	andeq	r1, r1, r0, asr r2
   11418:	ldrdeq	r1, [r1], -r0
   1141c:	andeq	r1, r1, r8, ror r5
   11420:	ldrdeq	r1, [r1], -r0
   11424:	andeq	r1, r1, ip, lsl #11
   11428:	andeq	r1, r1, r0, lsr #11
   1142c:			; <UNDEFINED> instruction: 0x000115bc
   11430:	andeq	r1, r1, ip, ror #11
   11434:	andeq	r1, r1, ip, lsl r6
   11438:	andeq	r1, r1, r0, lsr r6
   1143c:	andeq	r1, r1, r4, asr #12
   11440:	andeq	r1, r1, r8, asr r6
   11444:	andeq	r1, r1, ip, ror #12
   11448:	andeq	r1, r1, r0, lsl #13
   1144c:	muleq	r1, r4, r6
   11450:	ldrdeq	r1, [r1], -r0
   11454:	ldrdeq	r1, [r1], -r0
   11458:			; <UNDEFINED> instruction: 0x000116b8
   1145c:	mov	r0, #0
   11460:	str	r0, [r9]
   11464:	movw	r1, #33116	; 0x815c
   11468:	movt	r1, #2
   1146c:	mov	r2, #1
   11470:	str	r2, [r1]
   11474:	str	r0, [sl]
   11478:	b	11614 <__assert_fail@plt+0x6c0>
   1147c:	mov	r0, #0
   11480:	str	r0, [r9]
   11484:	movw	r1, #33120	; 0x8160
   11488:	movt	r1, #2
   1148c:	mov	r2, #1
   11490:	str	r2, [r1]
   11494:	movw	r1, #33116	; 0x815c
   11498:	movt	r1, #2
   1149c:	str	r0, [r1]
   114a0:	str	r0, [r8]
   114a4:	str	r0, [sl]
   114a8:	b	11250 <__assert_fail@plt+0x2fc>
   114ac:	mov	r0, #1
   114b0:	movw	r1, #33148	; 0x817c
   114b4:	movt	r1, #2
   114b8:	str	r0, [r1]
   114bc:	b	11250 <__assert_fail@plt+0x2fc>
   114c0:	orr	r0, r6, #2
   114c4:	bic	r6, r0, #16
   114c8:	b	11250 <__assert_fail@plt+0x2fc>
   114cc:	mov	r0, #1
   114d0:	movw	r1, #33128	; 0x8168
   114d4:	movt	r1, #2
   114d8:	str	r0, [r1]
   114dc:	b	11250 <__assert_fail@plt+0x2fc>
   114e0:	movw	r0, #33048	; 0x8118
   114e4:	movt	r0, #2
   114e8:	mov	r1, #1
   114ec:	str	r1, [r0]
   114f0:	b	11250 <__assert_fail@plt+0x2fc>
   114f4:	mov	r0, #1
   114f8:	movw	r1, #33168	; 0x8190
   114fc:	movt	r1, #2
   11500:	str	r0, [r1]
   11504:	b	11250 <__assert_fail@plt+0x2fc>
   11508:	mov	r0, #1
   1150c:	movw	r1, #33152	; 0x8180
   11510:	movt	r1, #2
   11514:	str	r0, [r1]
   11518:	b	11250 <__assert_fail@plt+0x2fc>
   1151c:	mov	r0, #0
   11520:	movw	r1, #33140	; 0x8174
   11524:	movt	r1, #2
   11528:	str	r0, [r1]
   1152c:	mov	r0, #1
   11530:	movw	r1, #33184	; 0x81a0
   11534:	movt	r1, #2
   11538:	str	r0, [r1]
   1153c:	b	11250 <__assert_fail@plt+0x2fc>
   11540:	mov	r0, #0
   11544:	movw	r1, #33128	; 0x8168
   11548:	movt	r1, #2
   1154c:	str	r0, [r1]
   11550:	mov	r0, #1
   11554:	movw	r1, #33180	; 0x819c
   11558:	movt	r1, #2
   1155c:	str	r0, [r1]
   11560:	b	11250 <__assert_fail@plt+0x2fc>
   11564:	mov	r0, #1
   11568:	movw	r1, #33144	; 0x8178
   1156c:	movt	r1, #2
   11570:	str	r0, [r1]
   11574:	b	11250 <__assert_fail@plt+0x2fc>
   11578:	mov	r0, #1
   1157c:	movw	r1, #33132	; 0x816c
   11580:	movt	r1, #2
   11584:	str	r0, [r1]
   11588:	b	11250 <__assert_fail@plt+0x2fc>
   1158c:	movw	r0, #33188	; 0x81a4
   11590:	movt	r0, #2
   11594:	mov	r1, #1024	; 0x400
   11598:	str	r1, [r0]
   1159c:	b	11250 <__assert_fail@plt+0x2fc>
   115a0:	mov	r0, #0
   115a4:	movw	r1, #33172	; 0x8194
   115a8:	movt	r1, #2
   115ac:	str	r0, [r1]
   115b0:	mov	r1, #1
   115b4:	str	r1, [sl]
   115b8:	b	11604 <__assert_fail@plt+0x6b0>
   115bc:	movw	r0, #33116	; 0x815c
   115c0:	movt	r0, #2
   115c4:	mov	r1, #0
   115c8:	str	r1, [r0]
   115cc:	mov	r0, #1
   115d0:	str	r0, [r9]
   115d4:	str	r1, [sl]
   115d8:	str	r1, [r8]
   115dc:	movw	r0, #33120	; 0x8160
   115e0:	movt	r0, #2
   115e4:	str	r1, [r0]
   115e8:	b	11250 <__assert_fail@plt+0x2fc>
   115ec:	mov	r0, #1
   115f0:	movw	r1, #33172	; 0x8194
   115f4:	movt	r1, #2
   115f8:	str	r0, [r1]
   115fc:	str	r0, [sl]
   11600:	mov	r0, #0
   11604:	str	r0, [r9]
   11608:	movw	r1, #33116	; 0x815c
   1160c:	movt	r1, #2
   11610:	str	r0, [r1]
   11614:	str	r0, [r8]
   11618:	b	116d8 <__assert_fail@plt+0x784>
   1161c:	mov	r0, #1
   11620:	movw	r1, #33124	; 0x8164
   11624:	movt	r1, #2
   11628:	str	r0, [r1]
   1162c:	b	11250 <__assert_fail@plt+0x2fc>
   11630:	mov	r0, #1
   11634:	movw	r1, #33164	; 0x818c
   11638:	movt	r1, #2
   1163c:	str	r0, [r1]
   11640:	b	11250 <__assert_fail@plt+0x2fc>
   11644:	mov	r0, #1
   11648:	movw	r1, #33200	; 0x81b0
   1164c:	movt	r1, #2
   11650:	str	r0, [r1]
   11654:	b	11250 <__assert_fail@plt+0x2fc>
   11658:	mov	r0, #1
   1165c:	movw	r1, #33136	; 0x8170
   11660:	movt	r1, #2
   11664:	str	r0, [r1]
   11668:	b	11250 <__assert_fail@plt+0x2fc>
   1166c:	mov	r0, #1
   11670:	movw	r1, #33108	; 0x8154
   11674:	movt	r1, #2
   11678:	str	r0, [r1]
   1167c:	b	11250 <__assert_fail@plt+0x2fc>
   11680:	movw	r0, #33048	; 0x8118
   11684:	movt	r0, #2
   11688:	mov	r1, #2
   1168c:	str	r1, [r0]
   11690:	b	11250 <__assert_fail@plt+0x2fc>
   11694:	mov	r0, #0
   11698:	movw	r1, #33184	; 0x81a0
   1169c:	movt	r1, #2
   116a0:	str	r0, [r1]
   116a4:	mov	r0, #1
   116a8:	movw	r1, #33140	; 0x8174
   116ac:	movt	r1, #2
   116b0:	str	r0, [r1]
   116b4:	b	11250 <__assert_fail@plt+0x2fc>
   116b8:	mov	r0, #0
   116bc:	str	r0, [r9]
   116c0:	mov	r1, #1
   116c4:	str	r1, [r8]
   116c8:	movw	r1, #33116	; 0x815c
   116cc:	movt	r1, #2
   116d0:	str	r0, [r1]
   116d4:	str	r0, [sl]
   116d8:	movw	r1, #33120	; 0x8160
   116dc:	movt	r1, #2
   116e0:	str	r0, [r1]
   116e4:	b	11250 <__assert_fail@plt+0x2fc>
   116e8:	ldr	r2, [sl]
   116ec:	movw	r0, #33148	; 0x817c
   116f0:	movt	r0, #2
   116f4:	ldr	r0, [r0]
   116f8:	orr	r1, r0, r2
   116fc:	movw	r3, #33180	; 0x819c
   11700:	movt	r3, #2
   11704:	ldr	r3, [r3]
   11708:	orr	r1, r1, r3
   1170c:	movw	r3, #33108	; 0x8154
   11710:	movt	r3, #2
   11714:	ldr	r3, [r3]
   11718:	orr	r3, r3, r2
   1171c:	movw	r7, #33132	; 0x816c
   11720:	movt	r7, #2
   11724:	ldr	r7, [r7]
   11728:	orr	r7, r3, r7
   1172c:	orr	r0, r7, r0
   11730:	movw	r7, #33164	; 0x818c
   11734:	movt	r7, #2
   11738:	ldr	r7, [r7]
   1173c:	orr	r7, r0, r7
   11740:	movw	r0, #33048	; 0x8118
   11744:	movt	r0, #2
   11748:	ldr	r0, [r0]
   1174c:	orrs	r7, r7, r0
   11750:	orreq	r6, r6, #8
   11754:	cmp	r1, #0
   11758:	orreq	r6, r6, #1
   1175c:	movw	r1, #33152	; 0x8180
   11760:	movt	r1, #2
   11764:	ldr	r1, [r1]
   11768:	cmp	r1, #0
   1176c:	orrne	r6, r6, #128	; 0x80
   11770:	movw	r1, #33028	; 0x8104
   11774:	movt	r1, #2
   11778:	ldr	r1, [r1]
   1177c:	cmp	r3, #0
   11780:	movwne	r3, #33188	; 0x81a4
   11784:	movtne	r3, #2
   11788:	movne	r7, #2
   1178c:	strne	r7, [r3]
   11790:	movw	r3, #33136	; 0x8170
   11794:	movt	r3, #2
   11798:	ldr	r3, [r3]
   1179c:	cmp	r3, #0
   117a0:	beq	117dc <__assert_fail@plt+0x888>
   117a4:	cmp	r0, #2
   117a8:	beq	11818 <__assert_fail@plt+0x8c4>
   117ac:	cmp	r0, #1
   117b0:	beq	11840 <__assert_fail@plt+0x8ec>
   117b4:	cmp	r0, #0
   117b8:	bne	11908 <__assert_fail@plt+0x9b4>
   117bc:	movw	r0, #33056	; 0x8120
   117c0:	movt	r0, #2
   117c4:	movw	r3, #11724	; 0x2dcc
   117c8:	movt	r3, #1
   117cc:	b	11904 <__assert_fail@plt+0x9b0>
   117d0:	bl	12d90 <__assert_fail@plt+0x1e3c>
   117d4:	sub	sp, fp, #28
   117d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117dc:	cmp	r0, #2
   117e0:	beq	11854 <__assert_fail@plt+0x900>
   117e4:	cmp	r0, #1
   117e8:	beq	1187c <__assert_fail@plt+0x928>
   117ec:	cmp	r0, #0
   117f0:	bne	11908 <__assert_fail@plt+0x9b4>
   117f4:	movw	r0, #33056	; 0x8120
   117f8:	movt	r0, #2
   117fc:	movw	r3, #11712	; 0x2dc0
   11800:	movt	r3, #1
   11804:	b	11904 <__assert_fail@plt+0x9b0>
   11808:	ldrh	r0, [sp, #6]
   1180c:	cmp	r0, #0
   11810:	bne	111b8 <__assert_fail@plt+0x264>
   11814:	b	111e0 <__assert_fail@plt+0x28c>
   11818:	movw	r0, #33140	; 0x8174
   1181c:	movt	r0, #2
   11820:	ldr	r0, [r0]
   11824:	cmp	r0, #0
   11828:	beq	11890 <__assert_fail@plt+0x93c>
   1182c:	movw	r0, #33056	; 0x8120
   11830:	movt	r0, #2
   11834:	movw	r3, #11960	; 0x2eb8
   11838:	movt	r3, #1
   1183c:	b	11904 <__assert_fail@plt+0x9b0>
   11840:	movw	r0, #33056	; 0x8120
   11844:	movt	r0, #2
   11848:	movw	r3, #12172	; 0x2f8c
   1184c:	movt	r3, #1
   11850:	b	11904 <__assert_fail@plt+0x9b0>
   11854:	movw	r0, #33140	; 0x8174
   11858:	movt	r0, #2
   1185c:	ldr	r0, [r0]
   11860:	cmp	r0, #0
   11864:	beq	118b8 <__assert_fail@plt+0x964>
   11868:	movw	r0, #33056	; 0x8120
   1186c:	movt	r0, #2
   11870:	movw	r3, #11860	; 0x2e54
   11874:	movt	r3, #1
   11878:	b	11904 <__assert_fail@plt+0x9b0>
   1187c:	movw	r0, #33056	; 0x8120
   11880:	movt	r0, #2
   11884:	movw	r3, #12100	; 0x2f44
   11888:	movt	r3, #1
   1188c:	b	11904 <__assert_fail@plt+0x9b0>
   11890:	movw	r0, #33184	; 0x81a0
   11894:	movt	r0, #2
   11898:	ldr	r0, [r0]
   1189c:	cmp	r0, #0
   118a0:	beq	118e0 <__assert_fail@plt+0x98c>
   118a4:	movw	r0, #33056	; 0x8120
   118a8:	movt	r0, #2
   118ac:	movw	r3, #12080	; 0x2f30
   118b0:	movt	r3, #1
   118b4:	b	11904 <__assert_fail@plt+0x9b0>
   118b8:	movw	r0, #33184	; 0x81a0
   118bc:	movt	r0, #2
   118c0:	ldr	r0, [r0]
   118c4:	cmp	r0, #0
   118c8:	beq	118f4 <__assert_fail@plt+0x9a0>
   118cc:	movw	r0, #33056	; 0x8120
   118d0:	movt	r0, #2
   118d4:	movw	r3, #11980	; 0x2ecc
   118d8:	movt	r3, #1
   118dc:	b	11904 <__assert_fail@plt+0x9b0>
   118e0:	movw	r0, #33056	; 0x8120
   118e4:	movt	r0, #2
   118e8:	movw	r3, #11840	; 0x2e40
   118ec:	movt	r3, #1
   118f0:	b	11904 <__assert_fail@plt+0x9b0>
   118f4:	movw	r0, #33056	; 0x8120
   118f8:	movt	r0, #2
   118fc:	movw	r3, #11740	; 0x2ddc
   11900:	movt	r3, #1
   11904:	str	r3, [r0]
   11908:	sub	r0, r5, r1
   1190c:	movw	r3, #33116	; 0x815c
   11910:	movt	r3, #2
   11914:	ldr	r3, [r3]
   11918:	cmp	r3, #0
   1191c:	beq	1192c <__assert_fail@plt+0x9d8>
   11920:	movw	r2, #8748	; 0x222c
   11924:	movt	r2, #1
   11928:	b	11974 <__assert_fail@plt+0xa20>
   1192c:	ldr	r3, [r8]
   11930:	cmp	r3, #0
   11934:	beq	11944 <__assert_fail@plt+0x9f0>
   11938:	movw	r2, #11012	; 0x2b04
   1193c:	movt	r2, #1
   11940:	b	11974 <__assert_fail@plt+0xa20>
   11944:	cmp	r2, #0
   11948:	beq	11958 <__assert_fail@plt+0xa04>
   1194c:	movw	r2, #9080	; 0x2378
   11950:	movt	r2, #1
   11954:	b	11974 <__assert_fail@plt+0xa20>
   11958:	ldr	r3, [r9]
   1195c:	movw	r7, #10316	; 0x284c
   11960:	movt	r7, #1
   11964:	movw	r2, #11284	; 0x2c14
   11968:	movt	r2, #1
   1196c:	cmp	r3, #0
   11970:	moveq	r2, r7
   11974:	movw	r3, #33060	; 0x8124
   11978:	movt	r3, #2
   1197c:	str	r2, [r3]
   11980:	cmp	r0, #0
   11984:	beq	11990 <__assert_fail@plt+0xa3c>
   11988:	add	r1, r4, r1, lsl #2
   1198c:	b	1199c <__assert_fail@plt+0xa48>
   11990:	movw	r1, #33016	; 0x80f8
   11994:	movt	r1, #2
   11998:	mov	r0, #1
   1199c:	mov	r2, r6
   119a0:	bl	119b8 <__assert_fail@plt+0xa64>
   119a4:	movw	r0, #33156	; 0x8184
   119a8:	movt	r0, #2
   119ac:	ldr	r0, [r0]
   119b0:	sub	sp, fp, #28
   119b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119bc:	add	fp, sp, #28
   119c0:	sub	sp, sp, #4
   119c4:	mov	r7, r2
   119c8:	mov	r6, r1
   119cc:	mov	r8, r0
   119d0:	movw	r0, #33144	; 0x8178
   119d4:	movt	r0, #2
   119d8:	ldr	r0, [r0]
   119dc:	movw	r2, #7264	; 0x1c60
   119e0:	movt	r2, #1
   119e4:	cmp	r0, #0
   119e8:	movne	r2, #0
   119ec:	mov	r0, r1
   119f0:	mov	r1, r7
   119f4:	bl	1313c <__assert_fail@plt+0x21e8>
   119f8:	cmp	r0, #0
   119fc:	beq	11bec <__assert_fail@plt+0xc98>
   11a00:	mov	r5, r0
   11a04:	mov	r6, #0
   11a08:	mov	r1, #0
   11a0c:	bl	14d7c <__assert_fail@plt+0x3e28>
   11a10:	mov	r1, r0
   11a14:	mov	r0, #0
   11a18:	bl	11d0c <__assert_fail@plt+0xdb8>
   11a1c:	movw	r0, #33180	; 0x819c
   11a20:	movt	r0, #2
   11a24:	ldr	r0, [r0]
   11a28:	cmp	r0, #0
   11a2c:	bne	11be4 <__assert_fail@plt+0xc90>
   11a30:	mov	r0, #4096	; 0x1000
   11a34:	movw	r1, #33128	; 0x8168
   11a38:	movt	r1, #2
   11a3c:	ldr	r1, [r1]
   11a40:	cmp	r1, #0
   11a44:	andeq	r6, r0, r7, lsl #9
   11a48:	mov	r0, r5
   11a4c:	bl	13a9c <__assert_fail@plt+0x2b48>
   11a50:	cmp	r0, #0
   11a54:	beq	11bd4 <__assert_fail@plt+0xc80>
   11a58:	mov	r9, r0
   11a5c:	movw	r7, #33196	; 0x81ac
   11a60:	movt	r7, #2
   11a64:	movw	r4, #33052	; 0x811c
   11a68:	movt	r4, #2
   11a6c:	b	11ad0 <__assert_fail@plt+0xb7c>
   11a70:	mov	sl, r4
   11a74:	mov	r4, r7
   11a78:	movw	r0, #33040	; 0x8110
   11a7c:	movt	r0, #2
   11a80:	ldr	r7, [r0]
   11a84:	ldr	r0, [r9, #32]
   11a88:	bl	10df8 <strerror@plt>
   11a8c:	mov	r3, r0
   11a90:	add	r2, r9, #168	; 0xa8
   11a94:	mov	r0, r7
   11a98:	mov	r7, r4
   11a9c:	mov	r4, sl
   11aa0:	movw	r1, #31097	; 0x7979
   11aa4:	movt	r1, #1
   11aa8:	bl	10e40 <fprintf@plt>
   11aac:	mov	r0, #1
   11ab0:	movw	r1, #33156	; 0x8184
   11ab4:	movt	r1, #2
   11ab8:	str	r0, [r1]
   11abc:	mov	r0, r5
   11ac0:	bl	13a9c <__assert_fail@plt+0x2b48>
   11ac4:	mov	r9, r0
   11ac8:	cmp	r0, #0
   11acc:	beq	11bd4 <__assert_fail@plt+0xc80>
   11ad0:	ldrh	r0, [r9, #56]	; 0x38
   11ad4:	sub	r0, r0, #1
   11ad8:	cmp	r0, #6
   11adc:	bhi	11abc <__assert_fail@plt+0xb68>
   11ae0:	add	r1, pc, #0
   11ae4:	ldr	pc, [r1, r0, lsl #2]
   11ae8:	andeq	r1, r1, r4, lsl #22
   11aec:			; <UNDEFINED> instruction: 0x00011bb4
   11af0:			; <UNDEFINED> instruction: 0x00011abc
   11af4:	andeq	r1, r1, r0, ror sl
   11af8:			; <UNDEFINED> instruction: 0x00011abc
   11afc:			; <UNDEFINED> instruction: 0x00011abc
   11b00:	andeq	r1, r1, r0, ror sl
   11b04:	ldrb	r0, [r9, #168]	; 0xa8
   11b08:	cmp	r0, #46	; 0x2e
   11b0c:	bne	11b28 <__assert_fail@plt+0xbd4>
   11b10:	ldr	r0, [r9, #48]	; 0x30
   11b14:	cmp	r0, #0
   11b18:	beq	11b28 <__assert_fail@plt+0xbd4>
   11b1c:	ldr	r0, [r7]
   11b20:	cmp	r0, #0
   11b24:	beq	11abc <__assert_fail@plt+0xb68>
   11b28:	ldrb	r0, [r4]
   11b2c:	cmp	r0, #1
   11b30:	bne	11b48 <__assert_fail@plt+0xbf4>
   11b34:	ldr	r1, [r9, #28]
   11b38:	movw	r0, #30937	; 0x78d9
   11b3c:	movt	r0, #1
   11b40:	bl	10d14 <printf@plt>
   11b44:	b	11b68 <__assert_fail@plt+0xc14>
   11b48:	cmp	r8, #2
   11b4c:	blt	11b68 <__assert_fail@plt+0xc14>
   11b50:	ldr	r1, [r9, #28]
   11b54:	movw	r0, #30938	; 0x78da
   11b58:	movt	r0, #1
   11b5c:	bl	10d14 <printf@plt>
   11b60:	mov	r0, #1
   11b64:	strb	r0, [r4]
   11b68:	mov	r0, r5
   11b6c:	mov	r1, r6
   11b70:	bl	14d7c <__assert_fail@plt+0x3e28>
   11b74:	mov	sl, r0
   11b78:	mov	r0, r9
   11b7c:	mov	r1, sl
   11b80:	bl	11d0c <__assert_fail@plt+0xdb8>
   11b84:	cmp	sl, #0
   11b88:	beq	11abc <__assert_fail@plt+0xb68>
   11b8c:	movw	r0, #33128	; 0x8168
   11b90:	movt	r0, #2
   11b94:	ldr	r0, [r0]
   11b98:	cmp	r0, #0
   11b9c:	bne	11abc <__assert_fail@plt+0xb68>
   11ba0:	mov	r0, r5
   11ba4:	mov	r1, r9
   11ba8:	mov	r2, #4
   11bac:	bl	14d4c <__assert_fail@plt+0x3df8>
   11bb0:	b	11abc <__assert_fail@plt+0xb68>
   11bb4:	movw	r0, #33040	; 0x8110
   11bb8:	movt	r0, #2
   11bbc:	ldr	r0, [r0]
   11bc0:	add	r2, r9, #168	; 0xa8
   11bc4:	movw	r1, #30943	; 0x78df
   11bc8:	movt	r1, #1
   11bcc:	bl	10e40 <fprintf@plt>
   11bd0:	b	11abc <__assert_fail@plt+0xb68>
   11bd4:	bl	10e4c <__errno_location@plt>
   11bd8:	ldr	r0, [r0]
   11bdc:	cmp	r0, #0
   11be0:	bne	11c24 <__assert_fail@plt+0xcd0>
   11be4:	sub	sp, fp, #28
   11be8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bec:	ldr	r4, [r6]
   11bf0:	movw	r0, #33040	; 0x8110
   11bf4:	movt	r0, #2
   11bf8:	ldr	r5, [r0]
   11bfc:	bl	10e4c <__errno_location@plt>
   11c00:	ldr	r0, [r0]
   11c04:	bl	10df8 <strerror@plt>
   11c08:	mov	r3, r0
   11c0c:	movw	r1, #30920	; 0x78c8
   11c10:	movt	r1, #1
   11c14:	mov	r0, r5
   11c18:	mov	r2, r4
   11c1c:	bl	10e40 <fprintf@plt>
   11c20:	b	11c48 <__assert_fail@plt+0xcf4>
   11c24:	movw	r1, #33040	; 0x8110
   11c28:	movt	r1, #2
   11c2c:	ldr	r4, [r1]
   11c30:	bl	10df8 <strerror@plt>
   11c34:	mov	r2, r0
   11c38:	movw	r1, #30972	; 0x78fc
   11c3c:	movt	r1, #1
   11c40:	mov	r0, r4
   11c44:	bl	10e40 <fprintf@plt>
   11c48:	movw	r0, #33156	; 0x8184
   11c4c:	movt	r0, #2
   11c50:	mov	r1, #1
   11c54:	str	r1, [r0]
   11c58:	sub	sp, fp, #28
   11c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c60:	push	{fp, lr}
   11c64:	mov	fp, sp
   11c68:	ldr	r0, [r0]
   11c6c:	ldrh	r3, [r0, #56]	; 0x38
   11c70:	mov	r2, #0
   11c74:	cmp	r3, #7
   11c78:	beq	11cb0 <__assert_fail@plt+0xd5c>
   11c7c:	ldr	r1, [r1]
   11c80:	ldrh	ip, [r1, #56]	; 0x38
   11c84:	cmp	ip, #7
   11c88:	beq	11cb0 <__assert_fail@plt+0xd5c>
   11c8c:	cmp	r3, #10
   11c90:	cmpne	ip, #10
   11c94:	bne	11cb8 <__assert_fail@plt+0xd64>
   11c98:	mov	r2, #1
   11c9c:	cmp	ip, #10
   11ca0:	mvneq	r2, #0
   11ca4:	cmp	r3, #10
   11ca8:	cmpeq	ip, #10
   11cac:	beq	11cec <__assert_fail@plt+0xd98>
   11cb0:	mov	r0, r2
   11cb4:	pop	{fp, pc}
   11cb8:	cmp	r3, ip
   11cbc:	beq	11cd8 <__assert_fail@plt+0xd84>
   11cc0:	ldr	lr, [r0, #48]	; 0x30
   11cc4:	movw	r2, #33180	; 0x819c
   11cc8:	movt	r2, #2
   11ccc:	ldr	r2, [r2]
   11cd0:	orrs	r2, r2, lr
   11cd4:	beq	11cf4 <__assert_fail@plt+0xda0>
   11cd8:	movw	r2, #33056	; 0x8120
   11cdc:	movt	r2, #2
   11ce0:	ldr	r2, [r2]
   11ce4:	pop	{fp, lr}
   11ce8:	bx	r2
   11cec:	pop	{fp, lr}
   11cf0:	b	12dc0 <__assert_fail@plt+0x1e6c>
   11cf4:	mov	r2, #1
   11cf8:	cmp	r3, #1
   11cfc:	mvnne	r2, #0
   11d00:	cmpne	ip, #1
   11d04:	beq	11cb0 <__assert_fail@plt+0xd5c>
   11d08:	b	11cd8 <__assert_fail@plt+0xd84>
   11d0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d10:	add	fp, sp, #28
   11d14:	sub	sp, sp, #180	; 0xb4
   11d18:	cmp	r1, #0
   11d1c:	beq	121e0 <__assert_fail@plt+0x128c>
   11d20:	mov	r5, r0
   11d24:	movw	r0, #33132	; 0x816c
   11d28:	movt	r0, #2
   11d2c:	ldr	r0, [r0]
   11d30:	movw	r2, #33160	; 0x8188
   11d34:	movt	r2, #2
   11d38:	ldr	r2, [r2]
   11d3c:	orr	r0, r2, r0
   11d40:	movw	r2, #33108	; 0x8154
   11d44:	movt	r2, #2
   11d48:	ldr	r2, [r2]
   11d4c:	orr	ip, r0, r2
   11d50:	mov	sl, #0
   11d54:	mov	lr, #1
   11d58:	str	r1, [sp, #4]
   11d5c:	mov	r4, r1
   11d60:	mov	r0, #0
   11d64:	str	r0, [sp, #64]	; 0x40
   11d68:	mov	r0, #0
   11d6c:	str	r0, [sp, #44]	; 0x2c
   11d70:	mov	r0, #0
   11d74:	str	r0, [sp, #60]	; 0x3c
   11d78:	mov	r1, #0
   11d7c:	mov	r0, #0
   11d80:	str	r0, [sp, #36]	; 0x24
   11d84:	mov	r0, #0
   11d88:	str	r0, [sp, #28]
   11d8c:	mov	r0, #0
   11d90:	str	r0, [sp, #32]
   11d94:	mov	r6, #0
   11d98:	mov	r2, #0
   11d9c:	mov	r0, #0
   11da0:	str	r0, [sp, #8]
   11da4:	mov	r0, #0
   11da8:	str	r0, [sp, #56]	; 0x38
   11dac:	mov	r9, #0
   11db0:	str	r5, [sp, #16]
   11db4:	str	ip, [sp, #12]
   11db8:	b	11dcc <__assert_fail@plt+0xe78>
   11dbc:	str	lr, [r4, #16]
   11dc0:	ldr	r4, [r4, #8]
   11dc4:	cmp	r4, #0
   11dc8:	beq	120e4 <__assert_fail@plt+0x1190>
   11dcc:	ldrh	r0, [r4, #56]	; 0x38
   11dd0:	cmp	r0, #10
   11dd4:	cmpne	r0, #7
   11dd8:	beq	12078 <__assert_fail@plt+0x1124>
   11ddc:	cmp	r5, #0
   11de0:	beq	11dfc <__assert_fail@plt+0xea8>
   11de4:	ldrb	r0, [r4, #168]	; 0xa8
   11de8:	cmp	r0, #46	; 0x2e
   11dec:	bne	11e18 <__assert_fail@plt+0xec4>
   11df0:	movw	r0, #33196	; 0x81ac
   11df4:	movt	r0, #2
   11df8:	b	11e0c <__assert_fail@plt+0xeb8>
   11dfc:	cmp	r0, #1
   11e00:	bne	11e18 <__assert_fail@plt+0xec4>
   11e04:	movw	r0, #33180	; 0x819c
   11e08:	movt	r0, #2
   11e0c:	ldr	r0, [r0]
   11e10:	cmp	r0, #0
   11e14:	beq	11dbc <__assert_fail@plt+0xe68>
   11e18:	ldr	r0, [r4, #52]	; 0x34
   11e1c:	cmp	r0, r2
   11e20:	movhi	r2, r0
   11e24:	cmp	ip, #0
   11e28:	beq	12070 <__assert_fail@plt+0x111c>
   11e2c:	str	r2, [sp, #48]	; 0x30
   11e30:	str	r1, [sp, #52]	; 0x34
   11e34:	add	r0, r4, #112	; 0x70
   11e38:	add	r1, r4, #128	; 0x80
   11e3c:	add	r2, r4, #160	; 0xa0
   11e40:	ldrd	r2, [r2]
   11e44:	subs	r7, r6, r2
   11e48:	rscs	r3, r3, #0
   11e4c:	movcc	r6, r2
   11e50:	ldrd	r2, [r1]
   11e54:	ldr	r7, [sp, #56]	; 0x38
   11e58:	subs	r1, r7, r2
   11e5c:	rscs	r1, r3, r7, asr #31
   11e60:	movlt	r7, r2
   11e64:	str	r7, [sp, #56]	; 0x38
   11e68:	ldrd	r0, [r0]
   11e6c:	subs	r3, sl, r0
   11e70:	ldr	r7, [sp, #64]	; 0x40
   11e74:	sbcs	r3, r7, r1
   11e78:	mov	r3, #0
   11e7c:	movwlt	r3, #1
   11e80:	cmp	r3, #0
   11e84:	movne	r7, r1
   11e88:	mov	r1, r7
   11e8c:	movne	sl, r0
   11e90:	ldr	r0, [sp, #60]	; 0x3c
   11e94:	add	r0, r0, r2
   11e98:	str	r0, [sp, #60]	; 0x3c
   11e9c:	ldr	r0, [r4, #84]	; 0x54
   11ea0:	cmp	r0, r9
   11ea4:	movhi	r9, r0
   11ea8:	movw	r0, #33160	; 0x8188
   11eac:	movt	r0, #2
   11eb0:	ldr	r0, [r0]
   11eb4:	cmp	r0, #0
   11eb8:	str	r7, [sp, #64]	; 0x40
   11ebc:	beq	12068 <__assert_fail@plt+0x1114>
   11ec0:	str	r6, [sp, #40]	; 0x28
   11ec4:	str	r9, [sp, #24]
   11ec8:	movw	r0, #33172	; 0x8194
   11ecc:	movt	r0, #2
   11ed0:	ldr	r0, [r0]
   11ed4:	mov	r9, #0
   11ed8:	cmp	r0, #0
   11edc:	beq	11f14 <__assert_fail@plt+0xfc0>
   11ee0:	ldr	r0, [r4, #88]	; 0x58
   11ee4:	mov	r1, #0
   11ee8:	add	r2, sp, #90	; 0x5a
   11eec:	bl	16ebc <__assert_fail@plt+0x5f68>
   11ef0:	mov	r8, r0
   11ef4:	cmp	r9, #0
   11ef8:	bne	11f4c <__assert_fail@plt+0xff8>
   11efc:	ldr	r0, [r4, #92]	; 0x5c
   11f00:	mov	r1, #0
   11f04:	add	r2, sp, #69	; 0x45
   11f08:	bl	16ebc <__assert_fail@plt+0x5f68>
   11f0c:	mov	r9, r0
   11f10:	b	11f4c <__assert_fail@plt+0xff8>
   11f14:	ldr	r0, [r4, #88]	; 0x58
   11f18:	bl	10d08 <getpwuid@plt>
   11f1c:	mov	r9, #0
   11f20:	cmp	r0, #0
   11f24:	mov	r8, #0
   11f28:	ldrne	r8, [r0]
   11f2c:	ldr	r0, [r4, #92]	; 0x5c
   11f30:	bl	10f48 <getgrgid@plt>
   11f34:	cmp	r0, #0
   11f38:	ldrne	r9, [r0]
   11f3c:	cmp	r8, #0
   11f40:	beq	11ee0 <__assert_fail@plt+0xf8c>
   11f44:	cmp	r9, #0
   11f48:	beq	11efc <__assert_fail@plt+0xfa8>
   11f4c:	mov	r0, r8
   11f50:	bl	10e1c <strlen@plt>
   11f54:	mov	r5, r0
   11f58:	mov	r0, r9
   11f5c:	bl	10e1c <strlen@plt>
   11f60:	movw	r1, #33124	; 0x8164
   11f64:	movt	r1, #2
   11f68:	ldr	r1, [r1]
   11f6c:	cmp	r1, #0
   11f70:	movw	r2, #31217	; 0x79f1
   11f74:	movt	r2, #1
   11f78:	ldr	r3, [sp, #44]	; 0x2c
   11f7c:	movne	r3, r2
   11f80:	str	r3, [sp, #44]	; 0x2c
   11f84:	mov	r2, #1
   11f88:	ldr	r3, [sp, #32]
   11f8c:	moveq	r2, r3
   11f90:	cmp	r3, #1
   11f94:	movle	r3, r2
   11f98:	str	r3, [sp, #32]
   11f9c:	ldr	r2, [sp, #36]	; 0x24
   11fa0:	cmp	r5, r2
   11fa4:	movgt	r2, r5
   11fa8:	str	r2, [sp, #36]	; 0x24
   11fac:	ldr	r2, [sp, #28]
   11fb0:	cmp	r0, r2
   11fb4:	movgt	r2, r0
   11fb8:	str	r2, [sp, #28]
   11fbc:	cmp	r1, #0
   11fc0:	movwne	r1, #1
   11fc4:	add	r7, r0, r5
   11fc8:	add	r0, r7, r1
   11fcc:	add	r0, r0, #19
   11fd0:	bl	17084 <__assert_fail@plt+0x6130>
   11fd4:	cmp	r0, #0
   11fd8:	beq	121e8 <__assert_fail@plt+0x1294>
   11fdc:	mov	r6, r0
   11fe0:	str	sl, [sp, #20]
   11fe4:	add	sl, r0, #12
   11fe8:	str	sl, [r0]
   11fec:	mov	r0, sl
   11ff0:	mov	r1, r8
   11ff4:	bl	10dbc <strcpy@plt>
   11ff8:	add	r0, r5, sl
   11ffc:	add	r0, r0, #1
   12000:	str	r0, [r6, #4]
   12004:	mov	r1, r9
   12008:	bl	10dbc <strcpy@plt>
   1200c:	ldr	r0, [r4, #80]	; 0x50
   12010:	and	r0, r0, #45056	; 0xb000
   12014:	orr	r0, r0, #16384	; 0x4000
   12018:	cmp	r0, #24576	; 0x6000
   1201c:	moveq	r0, #1
   12020:	streq	r0, [sp, #8]
   12024:	movw	r0, #33124	; 0x8164
   12028:	movt	r0, #2
   1202c:	ldr	r0, [r0]
   12030:	cmp	r0, #0
   12034:	ldr	r9, [sp, #24]
   12038:	beq	12050 <__assert_fail@plt+0x10fc>
   1203c:	add	r0, r7, sl
   12040:	add	r0, r0, #2
   12044:	str	r0, [r6, #8]
   12048:	ldr	r1, [sp, #44]	; 0x2c
   1204c:	bl	10dbc <strcpy@plt>
   12050:	str	r6, [r4, #20]
   12054:	ldr	sl, [sp, #20]
   12058:	ldr	r5, [sp, #16]
   1205c:	ldr	r6, [sp, #40]	; 0x28
   12060:	ldr	ip, [sp, #12]
   12064:	mov	lr, #1
   12068:	ldr	r1, [sp, #52]	; 0x34
   1206c:	ldr	r2, [sp, #48]	; 0x30
   12070:	add	r1, r1, #1
   12074:	b	11dc0 <__assert_fail@plt+0xe6c>
   12078:	movw	r0, #33040	; 0x8110
   1207c:	movt	r0, #2
   12080:	ldr	r7, [r0]
   12084:	ldr	r0, [r4, #32]
   12088:	str	r6, [sp, #40]	; 0x28
   1208c:	mov	r6, r1
   12090:	mov	r5, sl
   12094:	mov	sl, r2
   12098:	bl	10df8 <strerror@plt>
   1209c:	mov	r3, r0
   120a0:	add	r2, r4, #168	; 0xa8
   120a4:	mov	r0, r7
   120a8:	movw	r1, #31097	; 0x7979
   120ac:	movt	r1, #1
   120b0:	bl	10e40 <fprintf@plt>
   120b4:	mov	r2, sl
   120b8:	mov	sl, r5
   120bc:	mov	r1, r6
   120c0:	mov	lr, #1
   120c4:	ldr	ip, [sp, #12]
   120c8:	ldr	r6, [sp, #40]	; 0x28
   120cc:	ldr	r5, [sp, #16]
   120d0:	str	lr, [r4, #16]
   120d4:	movw	r0, #33156	; 0x8184
   120d8:	movt	r0, #2
   120dc:	str	lr, [r0]
   120e0:	b	11dc0 <__assert_fail@plt+0xe6c>
   120e4:	cmp	r1, #0
   120e8:	ldr	r4, [sp, #4]
   120ec:	beq	121e0 <__assert_fail@plt+0x128c>
   120f0:	str	r2, [fp, #-60]	; 0xffffffc4
   120f4:	str	r1, [fp, #-64]	; 0xffffffc0
   120f8:	str	r4, [fp, #-76]	; 0xffffffb4
   120fc:	cmp	ip, #0
   12100:	beq	12194 <__assert_fail@plt+0x1240>
   12104:	ldr	r0, [sp, #60]	; 0x3c
   12108:	str	r0, [fp, #-72]	; 0xffffffb8
   1210c:	ldr	r0, [sp, #8]
   12110:	str	r0, [fp, #-68]	; 0xffffffbc
   12114:	ldr	r0, [sp, #56]	; 0x38
   12118:	asr	r1, r0, #31
   1211c:	sub	r4, fp, #97	; 0x61
   12120:	mov	r2, r4
   12124:	bl	16ebc <__assert_fail@plt+0x5f68>
   12128:	bl	10e1c <strlen@plt>
   1212c:	ldr	r1, [sp, #28]
   12130:	str	r1, [fp, #-48]	; 0xffffffd0
   12134:	ldr	r1, [sp, #32]
   12138:	str	r1, [fp, #-52]	; 0xffffffcc
   1213c:	str	r0, [fp, #-56]	; 0xffffffc8
   12140:	mov	r0, r6
   12144:	mov	r1, #0
   12148:	mov	r2, r4
   1214c:	bl	16ebc <__assert_fail@plt+0x5f68>
   12150:	bl	10e1c <strlen@plt>
   12154:	str	r0, [fp, #-44]	; 0xffffffd4
   12158:	mov	r0, r9
   1215c:	mov	r1, #0
   12160:	mov	r2, r4
   12164:	bl	16ebc <__assert_fail@plt+0x5f68>
   12168:	bl	10e1c <strlen@plt>
   1216c:	str	r0, [fp, #-40]	; 0xffffffd8
   12170:	mov	r0, sl
   12174:	ldr	r1, [sp, #64]	; 0x40
   12178:	mov	r2, r4
   1217c:	ldr	r4, [sp, #4]
   12180:	bl	16ebc <__assert_fail@plt+0x5f68>
   12184:	bl	10e1c <strlen@plt>
   12188:	ldr	r1, [sp, #36]	; 0x24
   1218c:	str	r1, [fp, #-32]	; 0xffffffe0
   12190:	str	r0, [fp, #-36]	; 0xffffffdc
   12194:	movw	r0, #33060	; 0x8124
   12198:	movt	r0, #2
   1219c:	ldr	r1, [r0]
   121a0:	sub	r0, fp, #76	; 0x4c
   121a4:	blx	r1
   121a8:	movw	r0, #33052	; 0x811c
   121ac:	movt	r0, #2
   121b0:	mov	r1, #1
   121b4:	strb	r1, [r0]
   121b8:	movw	r0, #33160	; 0x8188
   121bc:	movt	r0, #2
   121c0:	ldr	r0, [r0]
   121c4:	cmp	r0, #0
   121c8:	beq	121e0 <__assert_fail@plt+0x128c>
   121cc:	ldr	r0, [r4, #20]
   121d0:	bl	13114 <__assert_fail@plt+0x21c0>
   121d4:	ldr	r4, [r4, #8]
   121d8:	cmp	r4, #0
   121dc:	bne	121cc <__assert_fail@plt+0x1278>
   121e0:	sub	sp, fp, #28
   121e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121e8:	movw	r0, #33040	; 0x8110
   121ec:	movt	r0, #2
   121f0:	ldr	r4, [r0]
   121f4:	bl	10e4c <__errno_location@plt>
   121f8:	ldr	r0, [r0]
   121fc:	bl	10df8 <strerror@plt>
   12200:	mov	r2, r0
   12204:	movw	r1, #30985	; 0x7909
   12208:	movt	r1, #1
   1220c:	mov	r0, r4
   12210:	bl	10e40 <fprintf@plt>
   12214:	mov	r0, #1
   12218:	movw	r1, #33156	; 0x8184
   1221c:	movt	r1, #2
   12220:	str	r0, [r1]
   12224:	sub	sp, fp, #28
   12228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1222c:	push	{r4, r5, fp, lr}
   12230:	add	fp, sp, #8
   12234:	ldr	r5, [r0]
   12238:	cmp	r5, #0
   1223c:	popeq	{r4, r5, fp, pc}
   12240:	mov	r4, r0
   12244:	b	12254 <__assert_fail@plt+0x1300>
   12248:	ldr	r5, [r5, #8]
   1224c:	cmp	r5, #0
   12250:	beq	1227c <__assert_fail@plt+0x1328>
   12254:	ldr	r0, [r5, #16]
   12258:	cmp	r0, #1
   1225c:	beq	12248 <__assert_fail@plt+0x12f4>
   12260:	ldr	r2, [r4, #20]
   12264:	ldr	r1, [r4, #32]
   12268:	mov	r0, r5
   1226c:	bl	12280 <__assert_fail@plt+0x132c>
   12270:	mov	r0, #10
   12274:	bl	10e70 <putchar@plt>
   12278:	b	12248 <__assert_fail@plt+0x12f4>
   1227c:	pop	{r4, r5, fp, pc}
   12280:	push	{r4, r5, r6, sl, fp, lr}
   12284:	add	fp, sp, #16
   12288:	mov	r6, r2
   1228c:	mov	r4, r0
   12290:	movw	r0, #33132	; 0x816c
   12294:	movt	r0, #2
   12298:	ldr	r0, [r0]
   1229c:	cmp	r0, #0
   122a0:	beq	122c0 <__assert_fail@plt+0x136c>
   122a4:	add	r0, r4, #160	; 0xa0
   122a8:	ldr	r2, [r0]
   122ac:	movw	r0, #31007	; 0x791f
   122b0:	movt	r0, #1
   122b4:	bl	10d14 <printf@plt>
   122b8:	mov	r5, r0
   122bc:	b	122c4 <__assert_fail@plt+0x1370>
   122c0:	mov	r5, #0
   122c4:	movw	r0, #33108	; 0x8154
   122c8:	movt	r0, #2
   122cc:	ldr	r0, [r0]
   122d0:	cmp	r0, #0
   122d4:	beq	1231c <__assert_fail@plt+0x13c8>
   122d8:	add	r0, r4, #128	; 0x80
   122dc:	ldrd	r0, [r0]
   122e0:	movw	r2, #33188	; 0x81a4
   122e4:	movt	r2, #2
   122e8:	ldr	r2, [r2]
   122ec:	sub	r3, r2, #1
   122f0:	adds	r0, r0, r3
   122f4:	adc	r1, r1, r3, asr #31
   122f8:	asr	r3, r2, #31
   122fc:	bl	17590 <__assert_fail@plt+0x663c>
   12300:	mov	r2, r0
   12304:	mov	r3, r1
   12308:	movw	r0, #31052	; 0x794c
   1230c:	movt	r0, #1
   12310:	mov	r1, r6
   12314:	bl	10d14 <printf@plt>
   12318:	add	r5, r0, r5
   1231c:	add	r0, r4, #168	; 0xa8
   12320:	bl	12d14 <__assert_fail@plt+0x1dc0>
   12324:	add	r5, r0, r5
   12328:	movw	r0, #33148	; 0x817c
   1232c:	movt	r0, #2
   12330:	ldr	r0, [r0]
   12334:	cmp	r0, #0
   12338:	beq	12350 <__assert_fail@plt+0x13fc>
   1233c:	ldr	r0, [r4, #80]	; 0x50
   12340:	bl	12700 <__assert_fail@plt+0x17ac>
   12344:	add	r5, r0, r5
   12348:	mov	r0, r5
   1234c:	pop	{r4, r5, r6, sl, fp, pc}
   12350:	movw	r0, #33164	; 0x818c
   12354:	movt	r0, #2
   12358:	ldr	r0, [r0]
   1235c:	cmp	r0, #0
   12360:	beq	12348 <__assert_fail@plt+0x13f4>
   12364:	ldr	r0, [r4, #80]	; 0x50
   12368:	and	r0, r0, #61440	; 0xf000
   1236c:	cmp	r0, #16384	; 0x4000
   12370:	beq	1233c <__assert_fail@plt+0x13e8>
   12374:	b	12348 <__assert_fail@plt+0x13f4>
   12378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1237c:	add	fp, sp, #28
   12380:	sub	sp, sp, #36	; 0x24
   12384:	mov	r4, r0
   12388:	ldr	r5, [r0]
   1238c:	ldr	r0, [r5, #48]	; 0x30
   12390:	cmp	r0, #0
   12394:	beq	123e4 <__assert_fail@plt+0x1490>
   12398:	movw	r0, #33160	; 0x8188
   1239c:	movt	r0, #2
   123a0:	ldr	r0, [r0]
   123a4:	movw	r1, #33108	; 0x8154
   123a8:	movt	r1, #2
   123ac:	ldr	r1, [r1]
   123b0:	orrs	r0, r1, r0
   123b4:	beq	123e0 <__assert_fail@plt+0x148c>
   123b8:	movw	r0, #33188	; 0x81a4
   123bc:	movt	r0, #2
   123c0:	ldr	r0, [r0]
   123c4:	ldr	r1, [r4, #4]
   123c8:	add	r1, r1, r0
   123cc:	sub	r1, r1, #1
   123d0:	udiv	r1, r1, r0
   123d4:	movw	r0, #30996	; 0x7914
   123d8:	movt	r0, #1
   123dc:	bl	10d14 <printf@plt>
   123e0:	ldr	r5, [r4]
   123e4:	cmp	r5, #0
   123e8:	beq	1261c <__assert_fail@plt+0x16c8>
   123ec:	add	sl, sp, #16
   123f0:	movw	r8, #33148	; 0x817c
   123f4:	movt	r8, #2
   123f8:	b	1242c <__assert_fail@plt+0x14d8>
   123fc:	ldr	r0, [r5, #80]	; 0x50
   12400:	bl	12700 <__assert_fail@plt+0x17ac>
   12404:	ldr	r0, [r5, #80]	; 0x50
   12408:	and	r0, r0, #61440	; 0xf000
   1240c:	cmp	r0, #40960	; 0xa000
   12410:	moveq	r0, r5
   12414:	bleq	12770 <__assert_fail@plt+0x181c>
   12418:	mov	r0, #10
   1241c:	bl	10e70 <putchar@plt>
   12420:	ldr	r5, [r5, #8]
   12424:	cmp	r5, #0
   12428:	beq	1261c <__assert_fail@plt+0x16c8>
   1242c:	ldr	r0, [r5, #16]
   12430:	cmp	r0, #1
   12434:	beq	12420 <__assert_fail@plt+0x14cc>
   12438:	movw	r0, #33132	; 0x816c
   1243c:	movt	r0, #2
   12440:	ldr	r0, [r0]
   12444:	cmp	r0, #0
   12448:	beq	12464 <__assert_fail@plt+0x1510>
   1244c:	add	r0, r5, #160	; 0xa0
   12450:	ldr	r2, [r0]
   12454:	ldr	r1, [r4, #32]
   12458:	movw	r0, #31007	; 0x791f
   1245c:	movt	r0, #1
   12460:	bl	10d14 <printf@plt>
   12464:	movw	r0, #33108	; 0x8154
   12468:	movt	r0, #2
   1246c:	ldr	r0, [r0]
   12470:	cmp	r0, #0
   12474:	beq	124b8 <__assert_fail@plt+0x1564>
   12478:	add	r0, r5, #128	; 0x80
   1247c:	ldrd	r0, [r0]
   12480:	movw	r2, #33188	; 0x81a4
   12484:	movt	r2, #2
   12488:	ldr	r2, [r2]
   1248c:	sub	r3, r2, #1
   12490:	adds	r0, r0, r3
   12494:	adc	r1, r1, r3, asr #31
   12498:	asr	r3, r2, #31
   1249c:	bl	17590 <__assert_fail@plt+0x663c>
   124a0:	mov	r2, r0
   124a4:	mov	r3, r1
   124a8:	ldr	r1, [r4, #20]
   124ac:	movw	r0, #31052	; 0x794c
   124b0:	movt	r0, #1
   124b4:	bl	10d14 <printf@plt>
   124b8:	ldr	r0, [r5, #80]	; 0x50
   124bc:	mov	r1, sl
   124c0:	bl	12fa0 <__assert_fail@plt+0x204c>
   124c4:	ldr	r0, [r4, #28]
   124c8:	ldr	r2, [r4, #36]	; 0x24
   124cc:	ldr	r1, [r4, #44]	; 0x2c
   124d0:	ldr	r9, [r5, #20]
   124d4:	ldr	r3, [r5, #84]	; 0x54
   124d8:	ldr	r7, [r9]
   124dc:	ldr	r6, [r9, #4]
   124e0:	stm	sp, {r1, r7}
   124e4:	str	r0, [sp, #8]
   124e8:	str	r6, [sp, #12]
   124ec:	movw	r0, #31013	; 0x7925
   124f0:	movt	r0, #1
   124f4:	mov	r1, sl
   124f8:	bl	10d14 <printf@plt>
   124fc:	movw	r0, #33124	; 0x8164
   12500:	movt	r0, #2
   12504:	ldr	r0, [r0]
   12508:	cmp	r0, #0
   1250c:	beq	12524 <__assert_fail@plt+0x15d0>
   12510:	ldr	r2, [r9, #8]
   12514:	ldr	r1, [r4, #24]
   12518:	movw	r0, #31033	; 0x7939
   1251c:	movt	r0, #1
   12520:	bl	10d14 <printf@plt>
   12524:	ldr	r0, [r5, #80]	; 0x50
   12528:	and	r0, r0, #45056	; 0xb000
   1252c:	orr	r0, r0, #16384	; 0x4000
   12530:	cmp	r0, #24576	; 0x6000
   12534:	bne	12558 <__assert_fail@plt+0x1604>
   12538:	add	r0, r5, #96	; 0x60
   1253c:	ldr	r0, [r0]
   12540:	ubfx	r1, r0, #8, #8
   12544:	uxtb	r2, r0
   12548:	movw	r0, #31039	; 0x793f
   1254c:	movt	r0, #1
   12550:	bl	10d14 <printf@plt>
   12554:	b	125a4 <__assert_fail@plt+0x1650>
   12558:	add	r0, r5, #112	; 0x70
   1255c:	ldr	r1, [r4, #8]
   12560:	ldr	r3, [r4, #40]	; 0x28
   12564:	cmp	r1, #0
   12568:	beq	1258c <__assert_fail@plt+0x1638>
   1256c:	ldrd	r0, [r0]
   12570:	stm	sp, {r0, r1}
   12574:	rsb	r1, r3, #8
   12578:	movw	r0, #31049	; 0x7949
   1257c:	movt	r0, #1
   12580:	movw	r2, #31073	; 0x7961
   12584:	movt	r2, #1
   12588:	b	125a0 <__assert_fail@plt+0x164c>
   1258c:	ldm	r0, {r2, r7}
   12590:	movw	r0, #31052	; 0x794c
   12594:	movt	r0, #1
   12598:	mov	r1, r3
   1259c:	mov	r3, r7
   125a0:	bl	10d14 <printf@plt>
   125a4:	movw	r0, #33140	; 0x8174
   125a8:	movt	r0, #2
   125ac:	ldr	r0, [r0]
   125b0:	cmp	r0, #0
   125b4:	beq	125c0 <__assert_fail@plt+0x166c>
   125b8:	add	r0, r5, #136	; 0x88
   125bc:	b	125d8 <__assert_fail@plt+0x1684>
   125c0:	movw	r0, #33184	; 0x81a0
   125c4:	movt	r0, #2
   125c8:	ldr	r0, [r0]
   125cc:	cmp	r0, #0
   125d0:	addeq	r0, r5, #144	; 0x90
   125d4:	addne	r0, r5, #152	; 0x98
   125d8:	ldr	r0, [r0]
   125dc:	bl	12624 <__assert_fail@plt+0x16d0>
   125e0:	add	r0, r5, #168	; 0xa8
   125e4:	bl	12d14 <__assert_fail@plt+0x1dc0>
   125e8:	ldr	r0, [r8]
   125ec:	cmp	r0, #0
   125f0:	bne	123fc <__assert_fail@plt+0x14a8>
   125f4:	movw	r0, #33164	; 0x818c
   125f8:	movt	r0, #2
   125fc:	ldr	r0, [r0]
   12600:	cmp	r0, #0
   12604:	beq	12404 <__assert_fail@plt+0x14b0>
   12608:	ldr	r0, [r5, #80]	; 0x50
   1260c:	and	r0, r0, #61440	; 0xf000
   12610:	cmp	r0, #16384	; 0x4000
   12614:	beq	123fc <__assert_fail@plt+0x14a8>
   12618:	b	12404 <__assert_fail@plt+0x14b0>
   1261c:	sub	sp, fp, #28
   12620:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12624:	push	{r4, r5, r6, sl, fp, lr}
   12628:	add	fp, sp, #16
   1262c:	sub	sp, sp, #8
   12630:	str	r0, [sp, #4]
   12634:	add	r0, sp, #4
   12638:	bl	10d5c <ctime@plt>
   1263c:	mov	r4, r0
   12640:	add	r5, r0, #4
   12644:	mov	r6, #0
   12648:	ldrb	r0, [r5, -r6]
   1264c:	bl	10e70 <putchar@plt>
   12650:	sub	r6, r6, #1
   12654:	cmn	r6, #7
   12658:	bne	12648 <__assert_fail@plt+0x16f4>
   1265c:	movw	r0, #33168	; 0x8190
   12660:	movt	r0, #2
   12664:	ldr	r0, [r0]
   12668:	cmp	r0, #0
   1266c:	beq	12690 <__assert_fail@plt+0x173c>
   12670:	add	r4, r4, #11
   12674:	mov	r5, #0
   12678:	ldrb	r0, [r4, -r5]
   1267c:	bl	10e70 <putchar@plt>
   12680:	sub	r5, r5, #1
   12684:	cmn	r5, #13
   12688:	bne	12678 <__assert_fail@plt+0x1724>
   1268c:	b	126f0 <__assert_fail@plt+0x179c>
   12690:	ldr	r0, [sp, #4]
   12694:	add	r0, r0, #61696	; 0xf100
   12698:	add	r6, r0, #15663104	; 0xef0000
   1269c:	mov	r5, #0
   126a0:	mov	r0, #0
   126a4:	bl	10d50 <time@plt>
   126a8:	cmp	r6, r0
   126ac:	ble	126d0 <__assert_fail@plt+0x177c>
   126b0:	add	r4, r4, #11
   126b4:	mov	r5, #0
   126b8:	ldrb	r0, [r4, -r5]
   126bc:	bl	10e70 <putchar@plt>
   126c0:	sub	r5, r5, #1
   126c4:	cmn	r5, #5
   126c8:	bne	126b8 <__assert_fail@plt+0x1764>
   126cc:	b	126f0 <__assert_fail@plt+0x179c>
   126d0:	mov	r0, #32
   126d4:	bl	10e70 <putchar@plt>
   126d8:	add	r4, r4, #20
   126dc:	ldrb	r0, [r4, r5]
   126e0:	bl	10e70 <putchar@plt>
   126e4:	add	r5, r5, #1
   126e8:	cmp	r5, #4
   126ec:	bne	126dc <__assert_fail@plt+0x1788>
   126f0:	mov	r0, #32
   126f4:	bl	10e70 <putchar@plt>
   126f8:	sub	sp, fp, #16
   126fc:	pop	{r4, r5, r6, sl, fp, pc}
   12700:	and	r2, r0, #61440	; 0xf000
   12704:	cmp	r2, #40960	; 0xa000
   12708:	bge	12724 <__assert_fail@plt+0x17d0>
   1270c:	cmp	r2, #4096	; 0x1000
   12710:	beq	1274c <__assert_fail@plt+0x17f8>
   12714:	mov	r1, #47	; 0x2f
   12718:	cmp	r2, #16384	; 0x4000
   1271c:	beq	12758 <__assert_fail@plt+0x1804>
   12720:	b	12738 <__assert_fail@plt+0x17e4>
   12724:	beq	12754 <__assert_fail@plt+0x1800>
   12728:	cmp	r2, #49152	; 0xc000
   1272c:	bne	12738 <__assert_fail@plt+0x17e4>
   12730:	mov	r1, #61	; 0x3d
   12734:	b	12758 <__assert_fail@plt+0x1804>
   12738:	mov	r1, #42	; 0x2a
   1273c:	tst	r0, #73	; 0x49
   12740:	moveq	r0, #0
   12744:	bxeq	lr
   12748:	b	12758 <__assert_fail@plt+0x1804>
   1274c:	mov	r1, #124	; 0x7c
   12750:	b	12758 <__assert_fail@plt+0x1804>
   12754:	mov	r1, #64	; 0x40
   12758:	push	{fp, lr}
   1275c:	mov	fp, sp
   12760:	mov	r0, r1
   12764:	bl	10e70 <putchar@plt>
   12768:	mov	r0, #1
   1276c:	pop	{fp, pc}
   12770:	push	{r4, sl, fp, lr}
   12774:	add	fp, sp, #8
   12778:	sub	sp, sp, #8
   1277c:	sub	sp, sp, #8192	; 0x2000
   12780:	ldr	r1, [r0, #48]	; 0x30
   12784:	cmp	r1, #0
   12788:	beq	127b0 <__assert_fail@plt+0x185c>
   1278c:	ldr	r1, [r0, #4]
   12790:	ldr	r3, [r1, #24]
   12794:	add	r0, r0, #168	; 0xa8
   12798:	str	r0, [sp]
   1279c:	add	lr, sp, #4096	; 0x1000
   127a0:	add	r0, lr, #8
   127a4:	movw	r2, #31086	; 0x796e
   127a8:	movt	r2, #1
   127ac:	b	127c4 <__assert_fail@plt+0x1870>
   127b0:	add	r3, r0, #168	; 0xa8
   127b4:	add	lr, sp, #4096	; 0x1000
   127b8:	add	r0, lr, #8
   127bc:	movw	r2, #30993	; 0x7911
   127c0:	movt	r2, #1
   127c4:	mov	r1, #4096	; 0x1000
   127c8:	bl	10e58 <snprintf@plt>
   127cc:	add	lr, sp, #4096	; 0x1000
   127d0:	add	r0, lr, #8
   127d4:	add	r4, sp, #8
   127d8:	mov	r1, r4
   127dc:	movw	r2, #4095	; 0xfff
   127e0:	bl	10d98 <readlink@plt>
   127e4:	cmn	r0, #1
   127e8:	beq	12810 <__assert_fail@plt+0x18bc>
   127ec:	mov	r1, #0
   127f0:	strb	r1, [r4, r0]
   127f4:	movw	r0, #31105	; 0x7981
   127f8:	movt	r0, #1
   127fc:	bl	10d14 <printf@plt>
   12800:	mov	r0, r4
   12804:	bl	12d14 <__assert_fail@plt+0x1dc0>
   12808:	sub	sp, fp, #8
   1280c:	pop	{r4, sl, fp, pc}
   12810:	movw	r0, #33040	; 0x8110
   12814:	movt	r0, #2
   12818:	ldr	r4, [r0]
   1281c:	bl	10e4c <__errno_location@plt>
   12820:	ldr	r0, [r0]
   12824:	bl	10df8 <strerror@plt>
   12828:	mov	r3, r0
   1282c:	movw	r1, #31092	; 0x7974
   12830:	movt	r1, #1
   12834:	add	lr, sp, #4096	; 0x1000
   12838:	add	r2, lr, #8
   1283c:	mov	r0, r4
   12840:	bl	10e40 <fprintf@plt>
   12844:	sub	sp, fp, #8
   12848:	pop	{r4, sl, fp, pc}
   1284c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12850:	add	fp, sp, #28
   12854:	sub	sp, sp, #20
   12858:	mov	r4, r0
   1285c:	add	r1, sp, #16
   12860:	bl	12a68 <__assert_fail@plt+0x1b14>
   12864:	str	r0, [sp, #12]
   12868:	cmp	r0, #0
   1286c:	beq	12a24 <__assert_fail@plt+0x1ad0>
   12870:	ldr	r1, [r4, #12]
   12874:	movw	r5, #33024	; 0x8100
   12878:	movt	r5, #2
   1287c:	ldr	r0, [r5]
   12880:	cmp	r1, r0
   12884:	movw	r7, #33064	; 0x8128
   12888:	movt	r7, #2
   1288c:	ble	128b0 <__assert_fail@plt+0x195c>
   12890:	ldr	r0, [r7]
   12894:	lsl	r1, r1, #2
   12898:	bl	170b4 <__assert_fail@plt+0x6160>
   1289c:	cmp	r0, #0
   128a0:	beq	12a2c <__assert_fail@plt+0x1ad8>
   128a4:	ldr	r1, [r4, #12]
   128a8:	str	r0, [r7]
   128ac:	str	r1, [r5]
   128b0:	ldr	r0, [r4]
   128b4:	cmp	r0, #0
   128b8:	beq	128f8 <__assert_fail@plt+0x19a4>
   128bc:	ldr	r1, [r7]
   128c0:	mov	r2, #0
   128c4:	str	r2, [sp, #8]
   128c8:	b	128d8 <__assert_fail@plt+0x1984>
   128cc:	ldr	r0, [r0, #8]
   128d0:	cmp	r0, #0
   128d4:	beq	12900 <__assert_fail@plt+0x19ac>
   128d8:	ldr	r2, [r0, #16]
   128dc:	cmp	r2, #1
   128e0:	beq	128cc <__assert_fail@plt+0x1978>
   128e4:	ldr	r2, [sp, #8]
   128e8:	str	r0, [r1, r2, lsl #2]
   128ec:	add	r2, r2, #1
   128f0:	str	r2, [sp, #8]
   128f4:	b	128cc <__assert_fail@plt+0x1978>
   128f8:	mov	r0, #0
   128fc:	str	r0, [sp, #8]
   12900:	ldr	r2, [sp, #16]
   12904:	ldr	r1, [sp, #8]
   12908:	sdiv	r0, r1, r2
   1290c:	str	r2, [sp, #4]
   12910:	mls	r1, r0, r2, r1
   12914:	cmp	r1, #0
   12918:	movwne	r1, #1
   1291c:	add	r6, r0, r1
   12920:	ldr	r0, [r4]
   12924:	ldr	r0, [r0, #48]	; 0x30
   12928:	cmp	r0, #0
   1292c:	beq	12978 <__assert_fail@plt+0x1a24>
   12930:	movw	r0, #33160	; 0x8188
   12934:	movt	r0, #2
   12938:	ldr	r0, [r0]
   1293c:	movw	r1, #33108	; 0x8154
   12940:	movt	r1, #2
   12944:	ldr	r1, [r1]
   12948:	orrs	r0, r1, r0
   1294c:	beq	12978 <__assert_fail@plt+0x1a24>
   12950:	movw	r0, #33188	; 0x81a4
   12954:	movt	r0, #2
   12958:	ldr	r0, [r0]
   1295c:	ldr	r1, [r4, #4]
   12960:	add	r1, r1, r0
   12964:	sub	r1, r1, #1
   12968:	udiv	r1, r1, r0
   1296c:	movw	r0, #30996	; 0x7914
   12970:	movt	r0, #1
   12974:	bl	10d14 <printf@plt>
   12978:	cmp	r6, #1
   1297c:	blt	12a24 <__assert_fail@plt+0x1ad0>
   12980:	mov	r5, #0
   12984:	b	1299c <__assert_fail@plt+0x1a48>
   12988:	mov	r0, #10
   1298c:	bl	10e70 <putchar@plt>
   12990:	add	r5, r5, #1
   12994:	cmp	r5, r6
   12998:	beq	12a24 <__assert_fail@plt+0x1ad0>
   1299c:	ldr	r0, [r7]
   129a0:	ldr	r0, [r0, r5, lsl #2]
   129a4:	ldr	r2, [r4, #20]
   129a8:	ldr	r1, [r4, #32]
   129ac:	bl	12280 <__assert_fail@plt+0x132c>
   129b0:	add	r8, r5, r6
   129b4:	ldr	r1, [sp, #8]
   129b8:	cmp	r8, r1
   129bc:	bge	12988 <__assert_fail@plt+0x1a34>
   129c0:	mov	r9, #0
   129c4:	b	129ec <__assert_fail@plt+0x1a98>
   129c8:	ldr	r0, [r7]
   129cc:	ldr	r0, [r0, r8, lsl #2]
   129d0:	ldr	r2, [r4, #20]
   129d4:	ldr	r1, [r4, #32]
   129d8:	bl	12280 <__assert_fail@plt+0x132c>
   129dc:	add	r8, r8, r6
   129e0:	ldr	r1, [sp, #8]
   129e4:	cmp	r8, r1
   129e8:	bge	12988 <__assert_fail@plt+0x1a34>
   129ec:	add	r9, r9, #1
   129f0:	ldr	r1, [sp, #4]
   129f4:	cmp	r9, r1
   129f8:	beq	12988 <__assert_fail@plt+0x1a34>
   129fc:	ldr	r1, [sp, #12]
   12a00:	cmp	r0, r1
   12a04:	bge	129c8 <__assert_fail@plt+0x1a74>
   12a08:	ldr	r1, [sp, #12]
   12a0c:	sub	sl, r1, r0
   12a10:	mov	r0, #32
   12a14:	bl	10e70 <putchar@plt>
   12a18:	subs	sl, sl, #1
   12a1c:	bne	12a10 <__assert_fail@plt+0x1abc>
   12a20:	b	129c8 <__assert_fail@plt+0x1a74>
   12a24:	sub	sp, fp, #28
   12a28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a2c:	movw	r0, #33040	; 0x8110
   12a30:	movt	r0, #2
   12a34:	ldr	r5, [r0]
   12a38:	bl	10e4c <__errno_location@plt>
   12a3c:	ldr	r0, [r0]
   12a40:	bl	10df8 <strerror@plt>
   12a44:	mov	r2, r0
   12a48:	movw	r1, #31059	; 0x7953
   12a4c:	movt	r1, #1
   12a50:	mov	r0, r5
   12a54:	bl	10e40 <fprintf@plt>
   12a58:	mov	r0, r4
   12a5c:	bl	1222c <__assert_fail@plt+0x12d8>
   12a60:	sub	sp, fp, #28
   12a64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a68:	push	{fp, lr}
   12a6c:	mov	fp, sp
   12a70:	ldr	r2, [r0, #16]
   12a74:	movw	r3, #33132	; 0x816c
   12a78:	movt	r3, #2
   12a7c:	ldr	r3, [r3]
   12a80:	cmp	r3, #0
   12a84:	ldrne	r3, [r0, #32]
   12a88:	addne	r2, r2, r3
   12a8c:	addne	r2, r2, #1
   12a90:	movw	r3, #33108	; 0x8154
   12a94:	movt	r3, #2
   12a98:	ldr	r3, [r3]
   12a9c:	cmp	r3, #0
   12aa0:	ldrne	r3, [r0, #20]
   12aa4:	addne	r2, r2, r3
   12aa8:	addne	r2, r2, #1
   12aac:	movw	r3, #33148	; 0x817c
   12ab0:	movt	r3, #2
   12ab4:	ldr	ip, [r3]
   12ab8:	movw	r3, #33164	; 0x818c
   12abc:	movt	r3, #2
   12ac0:	ldr	r3, [r3]
   12ac4:	orrs	r3, r3, ip
   12ac8:	addne	r2, r2, #1
   12acc:	add	r2, r2, #1
   12ad0:	movw	r3, #33008	; 0x80f0
   12ad4:	movt	r3, #2
   12ad8:	ldr	r3, [r3]
   12adc:	add	r3, r3, #1
   12ae0:	cmp	r3, r2, lsl #1
   12ae4:	bge	12af4 <__assert_fail@plt+0x1ba0>
   12ae8:	bl	1222c <__assert_fail@plt+0x12d8>
   12aec:	mov	r0, #0
   12af0:	pop	{fp, pc}
   12af4:	sdiv	r0, r3, r2
   12af8:	str	r0, [r1]
   12afc:	sdiv	r0, r3, r0
   12b00:	pop	{fp, pc}
   12b04:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12b08:	add	fp, sp, #24
   12b0c:	sub	sp, sp, #8
   12b10:	mov	r9, r0
   12b14:	add	r1, sp, #4
   12b18:	bl	12a68 <__assert_fail@plt+0x1b14>
   12b1c:	cmp	r0, #0
   12b20:	beq	12c0c <__assert_fail@plt+0x1cb8>
   12b24:	mov	r8, r0
   12b28:	ldr	r6, [r9]
   12b2c:	ldr	r0, [r6, #48]	; 0x30
   12b30:	cmp	r0, #0
   12b34:	beq	12b88 <__assert_fail@plt+0x1c34>
   12b38:	movw	r0, #33160	; 0x8188
   12b3c:	movt	r0, #2
   12b40:	ldr	r0, [r0]
   12b44:	movw	r1, #33108	; 0x8154
   12b48:	movt	r1, #2
   12b4c:	ldr	r1, [r1]
   12b50:	orrs	r0, r1, r0
   12b54:	beq	12b84 <__assert_fail@plt+0x1c30>
   12b58:	movw	r0, #33188	; 0x81a4
   12b5c:	movt	r0, #2
   12b60:	ldr	r0, [r0]
   12b64:	ldr	r1, [r9, #4]
   12b68:	add	r1, r1, r0
   12b6c:	sub	r1, r1, #1
   12b70:	udiv	r2, r1, r0
   12b74:	movw	r0, #31074	; 0x7962
   12b78:	movt	r0, #1
   12b7c:	mov	r3, #0
   12b80:	bl	10d14 <printf@plt>
   12b84:	ldr	r6, [r9]
   12b88:	cmp	r6, #0
   12b8c:	beq	12c04 <__assert_fail@plt+0x1cb0>
   12b90:	mov	r5, #0
   12b94:	ldr	r7, [sp, #4]
   12b98:	b	12bc8 <__assert_fail@plt+0x1c74>
   12b9c:	ldr	r2, [r9, #20]
   12ba0:	ldr	r1, [r9, #32]
   12ba4:	mov	r0, r6
   12ba8:	bl	12280 <__assert_fail@plt+0x132c>
   12bac:	add	r5, r5, #1
   12bb0:	cmp	r5, r7
   12bb4:	cmplt	r0, r8
   12bb8:	blt	12bec <__assert_fail@plt+0x1c98>
   12bbc:	ldr	r6, [r6, #8]
   12bc0:	cmp	r6, #0
   12bc4:	beq	12c04 <__assert_fail@plt+0x1cb0>
   12bc8:	ldr	r0, [r6, #16]
   12bcc:	cmp	r0, #1
   12bd0:	beq	12bbc <__assert_fail@plt+0x1c68>
   12bd4:	cmp	r5, r7
   12bd8:	blt	12b9c <__assert_fail@plt+0x1c48>
   12bdc:	mov	r0, #10
   12be0:	bl	10e70 <putchar@plt>
   12be4:	mov	r5, #0
   12be8:	b	12b9c <__assert_fail@plt+0x1c48>
   12bec:	sub	r4, r8, r0
   12bf0:	mov	r0, #32
   12bf4:	bl	10e70 <putchar@plt>
   12bf8:	subs	r4, r4, #1
   12bfc:	bne	12bf0 <__assert_fail@plt+0x1c9c>
   12c00:	b	12bbc <__assert_fail@plt+0x1c68>
   12c04:	mov	r0, #10
   12c08:	bl	10e70 <putchar@plt>
   12c0c:	sub	sp, fp, #24
   12c10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12c14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c18:	add	fp, sp, #28
   12c1c:	sub	sp, sp, #4
   12c20:	mov	r4, r0
   12c24:	movw	r0, #33132	; 0x816c
   12c28:	movt	r0, #2
   12c2c:	ldr	r0, [r0]
   12c30:	cmp	r0, #0
   12c34:	beq	12c44 <__assert_fail@plt+0x1cf0>
   12c38:	ldr	r0, [r4, #32]
   12c3c:	add	sl, r0, #1
   12c40:	b	12c48 <__assert_fail@plt+0x1cf4>
   12c44:	mov	sl, #0
   12c48:	movw	r0, #33108	; 0x8154
   12c4c:	movt	r0, #2
   12c50:	ldr	r0, [r0]
   12c54:	cmp	r0, #0
   12c58:	ldrne	r0, [r4, #20]
   12c5c:	addne	r0, sl, r0
   12c60:	addne	sl, r0, #1
   12c64:	movw	r0, #33148	; 0x817c
   12c68:	movt	r0, #2
   12c6c:	ldr	r0, [r0]
   12c70:	cmp	r0, #0
   12c74:	addne	sl, sl, #1
   12c78:	ldr	r5, [r4]
   12c7c:	cmp	r5, #0
   12c80:	beq	12d04 <__assert_fail@plt+0x1db0>
   12c84:	movw	r9, #33008	; 0x80f0
   12c88:	movt	r9, #2
   12c8c:	mov	r7, #0
   12c90:	b	12cb4 <__assert_fail@plt+0x1d60>
   12c94:	ldr	r2, [r4, #20]
   12c98:	ldr	r1, [r4, #32]
   12c9c:	mov	r0, r5
   12ca0:	bl	12280 <__assert_fail@plt+0x132c>
   12ca4:	add	r7, r0, r7
   12ca8:	ldr	r5, [r5, #8]
   12cac:	cmp	r5, #0
   12cb0:	beq	12d04 <__assert_fail@plt+0x1db0>
   12cb4:	ldr	r0, [r5, #16]
   12cb8:	cmp	r0, #1
   12cbc:	beq	12ca8 <__assert_fail@plt+0x1d54>
   12cc0:	cmp	r7, #1
   12cc4:	blt	12c94 <__assert_fail@plt+0x1d40>
   12cc8:	mov	r0, #44	; 0x2c
   12ccc:	bl	10e70 <putchar@plt>
   12cd0:	add	r7, r7, #2
   12cd4:	add	r0, sl, r7
   12cd8:	ldr	r1, [r5, #52]	; 0x34
   12cdc:	add	r6, r0, r1
   12ce0:	ldr	r8, [r9]
   12ce4:	cmp	r6, r8
   12ce8:	mov	r0, #10
   12cec:	movwcc	r0, #32
   12cf0:	bl	10e70 <putchar@plt>
   12cf4:	cmp	r6, r8
   12cf8:	mov	r0, #0
   12cfc:	movcs	r7, r0
   12d00:	b	12c94 <__assert_fail@plt+0x1d40>
   12d04:	mov	r0, #10
   12d08:	sub	sp, fp, #28
   12d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d10:	b	10e70 <putchar@plt>
   12d14:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12d18:	add	fp, sp, #24
   12d1c:	ldrb	r7, [r0]
   12d20:	cmp	r7, #0
   12d24:	beq	12d84 <__assert_fail@plt+0x1e30>
   12d28:	add	r6, r0, #1
   12d2c:	bl	10e10 <__ctype_b_loc@plt>
   12d30:	mov	r5, r0
   12d34:	mov	r4, #0
   12d38:	movw	r8, #33200	; 0x81b0
   12d3c:	movt	r8, #2
   12d40:	ldr	r0, [r8]
   12d44:	uxtb	r1, r7
   12d48:	cmp	r0, #0
   12d4c:	mov	r0, r1
   12d50:	movwne	r0, #63	; 0x3f
   12d54:	ldr	r2, [r5]
   12d58:	add	r2, r2, r1, lsl #1
   12d5c:	ldrh	r2, [r2]
   12d60:	tst	r2, #16384	; 0x4000
   12d64:	movne	r0, r1
   12d68:	bl	10e70 <putchar@plt>
   12d6c:	ldrb	r7, [r6, r4]
   12d70:	add	r4, r4, #1
   12d74:	cmp	r7, #0
   12d78:	bne	12d40 <__assert_fail@plt+0x1dec>
   12d7c:	mov	r0, r4
   12d80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d84:	mov	r4, #0
   12d88:	mov	r0, r4
   12d8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d90:	push	{fp, lr}
   12d94:	mov	fp, sp
   12d98:	movw	r0, #33040	; 0x8110
   12d9c:	movt	r0, #2
   12da0:	ldr	r3, [r0]
   12da4:	movw	r0, #31110	; 0x7986
   12da8:	movt	r0, #1
   12dac:	mov	r1, #51	; 0x33
   12db0:	mov	r2, #1
   12db4:	bl	10da4 <fwrite@plt>
   12db8:	mov	r0, #1
   12dbc:	pop	{fp, pc}
   12dc0:	add	r0, r0, #168	; 0xa8
   12dc4:	add	r1, r1, #168	; 0xa8
   12dc8:	b	10cfc <strcmp@plt>
   12dcc:	add	r2, r1, #168	; 0xa8
   12dd0:	add	r1, r0, #168	; 0xa8
   12dd4:	mov	r0, r2
   12dd8:	b	10cfc <strcmp@plt>
   12ddc:	push	{r4, sl, fp, lr}
   12de0:	add	fp, sp, #8
   12de4:	mov	ip, r0
   12de8:	ldr	r3, [r0, #144]	; 0x90
   12dec:	ldr	r2, [r1, #144]	; 0x90
   12df0:	mov	r0, #1
   12df4:	cmp	r2, r3
   12df8:	ble	12e00 <__assert_fail@plt+0x1eac>
   12dfc:	pop	{r4, sl, fp, pc}
   12e00:	bne	12e14 <__assert_fail@plt+0x1ec0>
   12e04:	ldr	lr, [ip, #148]	; 0x94
   12e08:	ldr	r4, [r1, #148]	; 0x94
   12e0c:	cmp	r4, lr
   12e10:	bgt	12dfc <__assert_fail@plt+0x1ea8>
   12e14:	mvn	r0, #0
   12e18:	cmp	r2, r3
   12e1c:	poplt	{r4, sl, fp, pc}
   12e20:	bne	12e34 <__assert_fail@plt+0x1ee0>
   12e24:	ldr	r2, [ip, #148]	; 0x94
   12e28:	ldr	r3, [r1, #148]	; 0x94
   12e2c:	cmp	r3, r2
   12e30:	blt	12dfc <__assert_fail@plt+0x1ea8>
   12e34:	mov	r0, ip
   12e38:	pop	{r4, sl, fp, lr}
   12e3c:	b	12dc0 <__assert_fail@plt+0x1e6c>
   12e40:	push	{fp, lr}
   12e44:	mov	fp, sp
   12e48:	bl	12ddc <__assert_fail@plt+0x1e88>
   12e4c:	rsb	r0, r0, #0
   12e50:	pop	{fp, pc}
   12e54:	push	{r4, sl, fp, lr}
   12e58:	add	fp, sp, #8
   12e5c:	mov	ip, r0
   12e60:	ldr	r3, [r0, #136]	; 0x88
   12e64:	ldr	r2, [r1, #136]	; 0x88
   12e68:	mov	r0, #1
   12e6c:	cmp	r2, r3
   12e70:	ble	12e78 <__assert_fail@plt+0x1f24>
   12e74:	pop	{r4, sl, fp, pc}
   12e78:	bne	12e8c <__assert_fail@plt+0x1f38>
   12e7c:	ldr	lr, [ip, #140]	; 0x8c
   12e80:	ldr	r4, [r1, #140]	; 0x8c
   12e84:	cmp	r4, lr
   12e88:	bgt	12e74 <__assert_fail@plt+0x1f20>
   12e8c:	mvn	r0, #0
   12e90:	cmp	r2, r3
   12e94:	poplt	{r4, sl, fp, pc}
   12e98:	bne	12eac <__assert_fail@plt+0x1f58>
   12e9c:	ldr	r2, [ip, #140]	; 0x8c
   12ea0:	ldr	r3, [r1, #140]	; 0x8c
   12ea4:	cmp	r3, r2
   12ea8:	blt	12e74 <__assert_fail@plt+0x1f20>
   12eac:	mov	r0, ip
   12eb0:	pop	{r4, sl, fp, lr}
   12eb4:	b	12dc0 <__assert_fail@plt+0x1e6c>
   12eb8:	push	{fp, lr}
   12ebc:	mov	fp, sp
   12ec0:	bl	12e54 <__assert_fail@plt+0x1f00>
   12ec4:	rsb	r0, r0, #0
   12ec8:	pop	{fp, pc}
   12ecc:	push	{r4, sl, fp, lr}
   12ed0:	add	fp, sp, #8
   12ed4:	mov	ip, r0
   12ed8:	ldr	r3, [r0, #152]	; 0x98
   12edc:	ldr	r2, [r1, #152]	; 0x98
   12ee0:	mov	r0, #1
   12ee4:	cmp	r2, r3
   12ee8:	ble	12ef0 <__assert_fail@plt+0x1f9c>
   12eec:	pop	{r4, sl, fp, pc}
   12ef0:	bne	12f04 <__assert_fail@plt+0x1fb0>
   12ef4:	ldr	lr, [ip, #156]	; 0x9c
   12ef8:	ldr	r4, [r1, #156]	; 0x9c
   12efc:	cmp	r4, lr
   12f00:	bgt	12eec <__assert_fail@plt+0x1f98>
   12f04:	mvn	r0, #0
   12f08:	cmp	r2, r3
   12f0c:	poplt	{r4, sl, fp, pc}
   12f10:	bne	12f24 <__assert_fail@plt+0x1fd0>
   12f14:	ldr	r2, [ip, #156]	; 0x9c
   12f18:	ldr	r3, [r1, #156]	; 0x9c
   12f1c:	cmp	r3, r2
   12f20:	blt	12eec <__assert_fail@plt+0x1f98>
   12f24:	mov	r0, ip
   12f28:	pop	{r4, sl, fp, lr}
   12f2c:	b	12dc0 <__assert_fail@plt+0x1e6c>
   12f30:	push	{fp, lr}
   12f34:	mov	fp, sp
   12f38:	bl	12ecc <__assert_fail@plt+0x1f78>
   12f3c:	rsb	r0, r0, #0
   12f40:	pop	{fp, pc}
   12f44:	push	{r4, r5, r6, sl, fp, lr}
   12f48:	add	fp, sp, #16
   12f4c:	ldr	r4, [r0, #112]	; 0x70
   12f50:	ldr	r3, [r0, #116]	; 0x74
   12f54:	ldr	r6, [r1, #112]	; 0x70
   12f58:	ldr	r5, [r1, #116]	; 0x74
   12f5c:	mov	ip, #1
   12f60:	subs	r2, r4, r6
   12f64:	sbcs	r2, r3, r5
   12f68:	blt	12f7c <__assert_fail@plt+0x2028>
   12f6c:	mvn	ip, #0
   12f70:	subs	r2, r6, r4
   12f74:	sbcs	r2, r5, r3
   12f78:	bge	12f84 <__assert_fail@plt+0x2030>
   12f7c:	mov	r0, ip
   12f80:	pop	{r4, r5, r6, sl, fp, pc}
   12f84:	pop	{r4, r5, r6, sl, fp, lr}
   12f88:	b	12dc0 <__assert_fail@plt+0x1e6c>
   12f8c:	push	{fp, lr}
   12f90:	mov	fp, sp
   12f94:	bl	12f44 <__assert_fail@plt+0x1ff0>
   12f98:	rsb	r0, r0, #0
   12f9c:	pop	{fp, pc}
   12fa0:	push	{r4, r5, fp, lr}
   12fa4:	add	fp, sp, #8
   12fa8:	mov	r4, r1
   12fac:	mov	r5, r0
   12fb0:	bl	13084 <__assert_fail@plt+0x2130>
   12fb4:	mov	r1, #32
   12fb8:	strh	r1, [r4, #10]
   12fbc:	mov	r1, #119	; 0x77
   12fc0:	tst	r5, #2
   12fc4:	mov	r2, #119	; 0x77
   12fc8:	movweq	r2, #45	; 0x2d
   12fcc:	strb	r2, [r4, #8]
   12fd0:	mov	r2, #114	; 0x72
   12fd4:	tst	r5, #4
   12fd8:	mov	r3, #114	; 0x72
   12fdc:	movweq	r3, #45	; 0x2d
   12fe0:	strb	r3, [r4, #7]
   12fe4:	tst	r5, #16
   12fe8:	mov	r3, #119	; 0x77
   12fec:	movweq	r3, #45	; 0x2d
   12ff0:	strb	r3, [r4, #5]
   12ff4:	tst	r5, #32
   12ff8:	mov	r3, #114	; 0x72
   12ffc:	movweq	r3, #45	; 0x2d
   13000:	strb	r3, [r4, #4]
   13004:	tst	r5, #128	; 0x80
   13008:	movweq	r1, #45	; 0x2d
   1300c:	strb	r1, [r4, #2]
   13010:	tst	r5, #256	; 0x100
   13014:	movweq	r2, #45	; 0x2d
   13018:	strb	r2, [r4, #1]
   1301c:	strb	r0, [r4]
   13020:	ands	r0, r5, #1
   13024:	mov	r0, #45	; 0x2d
   13028:	mov	r1, #45	; 0x2d
   1302c:	movwne	r1, #120	; 0x78
   13030:	mov	r2, #84	; 0x54
   13034:	movwne	r2, #116	; 0x74
   13038:	tst	r5, #512	; 0x200
   1303c:	moveq	r2, r1
   13040:	strb	r2, [r4, #9]
   13044:	ands	r1, r5, #8
   13048:	mov	r1, #45	; 0x2d
   1304c:	movwne	r1, #120	; 0x78
   13050:	mov	r2, #83	; 0x53
   13054:	mov	r3, #83	; 0x53
   13058:	movwne	r3, #115	; 0x73
   1305c:	tst	r5, #1024	; 0x400
   13060:	moveq	r3, r1
   13064:	strb	r3, [r4, #6]
   13068:	ands	r1, r5, #64	; 0x40
   1306c:	movwne	r0, #120	; 0x78
   13070:	movwne	r2, #115	; 0x73
   13074:	tst	r5, #2048	; 0x800
   13078:	moveq	r2, r0
   1307c:	strb	r2, [r4, #3]
   13080:	pop	{r4, r5, fp, pc}
   13084:	and	r0, r0, #61440	; 0xf000
   13088:	sub	r0, r0, #4096	; 0x1000
   1308c:	lsr	r1, r0, #12
   13090:	cmp	r1, #11
   13094:	bhi	130e4 <__assert_fail@plt+0x2190>
   13098:	mov	r0, #45	; 0x2d
   1309c:	add	r2, pc, #0
   130a0:	ldr	pc, [r2, r1, lsl #2]
   130a4:	ldrdeq	r3, [r1], -r4
   130a8:	ldrdeq	r3, [r1], -ip
   130ac:	andeq	r3, r1, r4, ror #1
   130b0:	andeq	r3, r1, ip, ror #1
   130b4:	andeq	r3, r1, r4, ror #1
   130b8:	andeq	r3, r1, r4, lsl #2
   130bc:	andeq	r3, r1, r4, ror #1
   130c0:	andeq	r3, r1, r8, ror #1
   130c4:	andeq	r3, r1, r4, ror #1
   130c8:	strdeq	r3, [r1], -r4
   130cc:	andeq	r3, r1, r4, ror #1
   130d0:	strdeq	r3, [r1], -ip
   130d4:	mov	r0, #112	; 0x70
   130d8:	bx	lr
   130dc:	mov	r0, #99	; 0x63
   130e0:	bx	lr
   130e4:	mov	r0, #63	; 0x3f
   130e8:	bx	lr
   130ec:	mov	r0, #100	; 0x64
   130f0:	bx	lr
   130f4:	mov	r0, #108	; 0x6c
   130f8:	bx	lr
   130fc:	mov	r0, #115	; 0x73
   13100:	bx	lr
   13104:	mov	r0, #98	; 0x62
   13108:	bx	lr
   1310c:	ldr	r0, [r0, #16]
   13110:	b	12fa0 <__assert_fail@plt+0x204c>
   13114:	push	{r4, r5, r6, sl, fp, lr}
   13118:	add	fp, sp, #16
   1311c:	mov	r4, r0
   13120:	bl	10e4c <__errno_location@plt>
   13124:	mov	r5, r0
   13128:	ldr	r6, [r0]
   1312c:	mov	r0, r4
   13130:	bl	10d38 <free@plt>
   13134:	str	r6, [r5]
   13138:	pop	{r4, r5, r6, sl, fp, pc}
   1313c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13140:	add	fp, sp, #28
   13144:	sub	sp, sp, #12
   13148:	cmp	r1, #4096	; 0x1000
   1314c:	bcs	13168 <__assert_fail@plt+0x2214>
   13150:	mov	r6, r1
   13154:	mov	r7, r0
   13158:	and	r0, r1, #516	; 0x204
   1315c:	cmp	r0, #516	; 0x204
   13160:	tstne	r6, #18
   13164:	bne	13184 <__assert_fail@plt+0x2230>
   13168:	bl	10e4c <__errno_location@plt>
   1316c:	mov	r1, #22
   13170:	str	r1, [r0]
   13174:	mov	r4, #0
   13178:	mov	r0, r4
   1317c:	sub	sp, fp, #28
   13180:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13184:	mov	sl, r2
   13188:	mov	r0, #1
   1318c:	mov	r1, #96	; 0x60
   13190:	bl	17030 <__assert_fail@plt+0x60dc>
   13194:	cmp	r0, #0
   13198:	beq	13174 <__assert_fail@plt+0x2220>
   1319c:	mov	r4, r0
   131a0:	mvn	r0, #99	; 0x63
   131a4:	str	r0, [r4, #32]
   131a8:	bic	r0, r6, #516	; 0x204
   131ac:	tst	r6, #2
   131b0:	mov	r1, r6
   131b4:	orrne	r1, r0, #4
   131b8:	str	sl, [r4, #44]	; 0x2c
   131bc:	str	r1, [r4, #48]	; 0x30
   131c0:	mov	r0, r7
   131c4:	bl	13448 <__assert_fail@plt+0x24f4>
   131c8:	mov	r1, r0
   131cc:	cmp	r0, #4096	; 0x1000
   131d0:	movls	r1, #4096	; 0x1000
   131d4:	mov	r0, r4
   131d8:	bl	13490 <__assert_fail@plt+0x253c>
   131dc:	cmp	r0, #0
   131e0:	beq	1343c <__assert_fail@plt+0x24e8>
   131e4:	ldr	r0, [r7]
   131e8:	cmp	r0, #0
   131ec:	beq	1322c <__assert_fail@plt+0x22d8>
   131f0:	movw	r1, #31073	; 0x7961
   131f4:	movt	r1, #1
   131f8:	mov	r0, r4
   131fc:	mov	r2, #0
   13200:	bl	1350c <__assert_fail@plt+0x25b8>
   13204:	cmp	r0, #0
   13208:	beq	13434 <__assert_fail@plt+0x24e0>
   1320c:	mov	r8, r0
   13210:	mvn	r0, #0
   13214:	str	r0, [r8, #48]	; 0x30
   13218:	cmp	sl, #0
   1321c:	beq	13238 <__assert_fail@plt+0x22e4>
   13220:	ldrb	r0, [r4, #49]	; 0x31
   13224:	ubfx	r0, r0, #2, #1
   13228:	b	1323c <__assert_fail@plt+0x22e8>
   1322c:	mov	r8, #0
   13230:	cmp	sl, #0
   13234:	bne	13220 <__assert_fail@plt+0x22cc>
   13238:	mov	r0, #1
   1323c:	ldr	r5, [r7]
   13240:	cmp	r5, #0
   13244:	beq	13370 <__assert_fail@plt+0x241c>
   13248:	and	r1, r6, #2048	; 0x800
   1324c:	str	r1, [sp, #8]
   13250:	eor	r0, r0, #1
   13254:	str	r0, [sp, #4]
   13258:	mov	r9, #0
   1325c:	mov	r0, #0
   13260:	str	r0, [sp]
   13264:	mov	r6, #0
   13268:	b	132a0 <__assert_fail@plt+0x234c>
   1326c:	mov	r0, r4
   13270:	mov	r1, r5
   13274:	mov	r2, #0
   13278:	bl	135c0 <__assert_fail@plt+0x266c>
   1327c:	strh	r0, [r5, #56]	; 0x38
   13280:	cmp	sl, #0
   13284:	beq	13348 <__assert_fail@plt+0x23f4>
   13288:	str	r9, [r5, #8]
   1328c:	mov	r9, r5
   13290:	add	r6, r6, #1
   13294:	ldr	r5, [r7, #4]!
   13298:	cmp	r5, #0
   1329c:	beq	13378 <__assert_fail@plt+0x2424>
   132a0:	mov	r0, r5
   132a4:	bl	10e1c <strlen@plt>
   132a8:	mov	r2, r0
   132ac:	ldr	r0, [sp, #8]
   132b0:	cmp	r0, #0
   132b4:	bne	132ec <__assert_fail@plt+0x2398>
   132b8:	cmp	r2, #3
   132bc:	bcc	132ec <__assert_fail@plt+0x2398>
   132c0:	add	r0, r2, r5
   132c4:	ldrb	r0, [r0, #-1]
   132c8:	cmp	r0, #47	; 0x2f
   132cc:	bne	132ec <__assert_fail@plt+0x2398>
   132d0:	sub	r0, r5, #2
   132d4:	ldrb	r1, [r0, r2]
   132d8:	cmp	r1, #47	; 0x2f
   132dc:	bne	132ec <__assert_fail@plt+0x2398>
   132e0:	sub	r2, r2, #1
   132e4:	cmp	r2, #1
   132e8:	bhi	132d4 <__assert_fail@plt+0x2380>
   132ec:	mov	r0, r4
   132f0:	mov	r1, r5
   132f4:	bl	1350c <__assert_fail@plt+0x25b8>
   132f8:	cmp	r0, #0
   132fc:	beq	13424 <__assert_fail@plt+0x24d0>
   13300:	mov	r5, r0
   13304:	str	r8, [r0, #4]
   13308:	mov	r0, #0
   1330c:	str	r0, [r5, #48]	; 0x30
   13310:	add	r0, r5, #168	; 0xa8
   13314:	str	r0, [r5, #24]
   13318:	clz	r0, r9
   1331c:	lsr	r0, r0, #5
   13320:	ldr	r1, [sp, #4]
   13324:	orrs	r0, r1, r0
   13328:	bne	1326c <__assert_fail@plt+0x2318>
   1332c:	mov	r0, #11
   13330:	strh	r0, [r5, #56]	; 0x38
   13334:	mov	r0, r5
   13338:	mov	r1, #1
   1333c:	bl	13590 <__assert_fail@plt+0x263c>
   13340:	cmp	sl, #0
   13344:	bne	13288 <__assert_fail@plt+0x2334>
   13348:	mov	r0, #0
   1334c:	str	r0, [r5, #8]
   13350:	cmp	r9, #0
   13354:	beq	13368 <__assert_fail@plt+0x2414>
   13358:	ldr	r0, [sp]
   1335c:	str	r5, [r0, #8]
   13360:	str	r5, [sp]
   13364:	b	13290 <__assert_fail@plt+0x233c>
   13368:	str	r5, [sp]
   1336c:	b	1328c <__assert_fail@plt+0x2338>
   13370:	mov	r9, #0
   13374:	b	1339c <__assert_fail@plt+0x2448>
   13378:	cmp	sl, #0
   1337c:	beq	1339c <__assert_fail@plt+0x2448>
   13380:	cmp	r6, #2
   13384:	bcc	1339c <__assert_fail@plt+0x2448>
   13388:	mov	r0, r4
   1338c:	mov	r1, r9
   13390:	mov	r2, r6
   13394:	bl	13734 <__assert_fail@plt+0x27e0>
   13398:	mov	r9, r0
   1339c:	movw	r1, #31073	; 0x7961
   133a0:	movt	r1, #1
   133a4:	mov	r0, r4
   133a8:	mov	r2, #0
   133ac:	bl	1350c <__assert_fail@plt+0x25b8>
   133b0:	str	r0, [r4]
   133b4:	cmp	r0, #0
   133b8:	beq	13424 <__assert_fail@plt+0x24d0>
   133bc:	mov	r1, #9
   133c0:	strh	r1, [r0, #56]	; 0x38
   133c4:	str	r9, [r0, #8]
   133c8:	mov	r1, #1
   133cc:	str	r1, [r0, #48]	; 0x30
   133d0:	mov	r0, r4
   133d4:	bl	13804 <__assert_fail@plt+0x28b0>
   133d8:	cmp	r0, #0
   133dc:	beq	13424 <__assert_fail@plt+0x24d0>
   133e0:	ldrh	r0, [r4, #48]	; 0x30
   133e4:	tst	r0, #516	; 0x204
   133e8:	bne	13414 <__assert_fail@plt+0x24c0>
   133ec:	movw	r1, #31163	; 0x79bb
   133f0:	movt	r1, #1
   133f4:	mov	r0, r4
   133f8:	bl	13890 <__assert_fail@plt+0x293c>
   133fc:	str	r0, [r4, #28]
   13400:	cmn	r0, #1
   13404:	bgt	13414 <__assert_fail@plt+0x24c0>
   13408:	ldr	r0, [r4, #48]	; 0x30
   1340c:	orr	r0, r0, #4
   13410:	str	r0, [r4, #48]	; 0x30
   13414:	add	r0, r4, #60	; 0x3c
   13418:	mvn	r1, #0
   1341c:	bl	16df4 <__assert_fail@plt+0x5ea0>
   13420:	b	13178 <__assert_fail@plt+0x2224>
   13424:	mov	r0, r9
   13428:	bl	138c0 <__assert_fail@plt+0x296c>
   1342c:	mov	r0, r8
   13430:	bl	13114 <__assert_fail@plt+0x21c0>
   13434:	ldr	r0, [r4, #24]
   13438:	bl	13114 <__assert_fail@plt+0x21c0>
   1343c:	mov	r0, r4
   13440:	bl	13114 <__assert_fail@plt+0x21c0>
   13444:	b	13174 <__assert_fail@plt+0x2220>
   13448:	push	{r4, r5, fp, lr}
   1344c:	add	fp, sp, #8
   13450:	mov	r1, r0
   13454:	ldr	r0, [r0]
   13458:	cmp	r0, #0
   1345c:	beq	13488 <__assert_fail@plt+0x2534>
   13460:	add	r5, r1, #4
   13464:	mov	r4, #0
   13468:	bl	10e1c <strlen@plt>
   1346c:	cmp	r0, r4
   13470:	movhi	r4, r0
   13474:	ldr	r0, [r5], #4
   13478:	cmp	r0, #0
   1347c:	bne	13468 <__assert_fail@plt+0x2514>
   13480:	add	r0, r4, #1
   13484:	pop	{r4, r5, fp, pc}
   13488:	mov	r0, #1
   1348c:	pop	{r4, r5, fp, pc}
   13490:	push	{r4, r5, fp, lr}
   13494:	add	fp, sp, #8
   13498:	mov	r4, r0
   1349c:	ldr	r0, [r0, #36]	; 0x24
   134a0:	add	r1, r1, #256	; 0x100
   134a4:	adds	r1, r1, r0
   134a8:	bcc	134d0 <__assert_fail@plt+0x257c>
   134ac:	ldr	r0, [r4, #24]
   134b0:	bl	13114 <__assert_fail@plt+0x21c0>
   134b4:	mov	r5, #0
   134b8:	str	r5, [r4, #24]
   134bc:	bl	10e4c <__errno_location@plt>
   134c0:	mov	r1, #36	; 0x24
   134c4:	str	r1, [r0]
   134c8:	mov	r0, r5
   134cc:	pop	{r4, r5, fp, pc}
   134d0:	str	r1, [r4, #36]	; 0x24
   134d4:	ldr	r0, [r4, #24]
   134d8:	bl	170b4 <__assert_fail@plt+0x6160>
   134dc:	cmp	r0, #0
   134e0:	beq	134f4 <__assert_fail@plt+0x25a0>
   134e4:	str	r0, [r4, #24]
   134e8:	mov	r5, #1
   134ec:	mov	r0, r5
   134f0:	pop	{r4, r5, fp, pc}
   134f4:	ldr	r0, [r4, #24]
   134f8:	bl	13114 <__assert_fail@plt+0x21c0>
   134fc:	mov	r5, #0
   13500:	str	r5, [r4, #24]
   13504:	mov	r0, r5
   13508:	pop	{r4, r5, fp, pc}
   1350c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13510:	add	fp, sp, #24
   13514:	mov	r6, r2
   13518:	mov	r8, r1
   1351c:	mov	r5, r0
   13520:	add	r0, r2, #176	; 0xb0
   13524:	bic	r0, r0, #7
   13528:	bl	17084 <__assert_fail@plt+0x6130>
   1352c:	cmp	r0, #0
   13530:	beq	13584 <__assert_fail@plt+0x2630>
   13534:	mov	r4, r0
   13538:	add	r7, r0, #168	; 0xa8
   1353c:	mov	r0, r7
   13540:	mov	r1, r8
   13544:	mov	r2, r6
   13548:	bl	10d44 <memcpy@plt>
   1354c:	mov	r0, #0
   13550:	strb	r0, [r7, r6]
   13554:	str	r6, [r4, #52]	; 0x34
   13558:	str	r5, [r4, #44]	; 0x2c
   1355c:	ldr	r1, [r5, #24]
   13560:	str	r0, [r4, #12]
   13564:	str	r0, [r4, #16]
   13568:	str	r0, [r4, #20]
   1356c:	mov	r2, #196608	; 0x30000
   13570:	str	r2, [r4, #58]	; 0x3a
   13574:	str	r1, [r4, #28]
   13578:	str	r0, [r4, #32]
   1357c:	mov	r0, r4
   13580:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13584:	mov	r4, #0
   13588:	mov	r0, r4
   1358c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13590:	push	{fp, lr}
   13594:	mov	fp, sp
   13598:	ldrh	r2, [r0, #56]	; 0x38
   1359c:	cmp	r2, #11
   135a0:	bne	135bc <__assert_fail@plt+0x2668>
   135a4:	mov	r3, #0
   135a8:	mov	r2, #1
   135ac:	cmp	r1, #0
   135b0:	movwne	r2, #2
   135b4:	strd	r2, [r0, #112]	; 0x70
   135b8:	pop	{fp, pc}
   135bc:	bl	10f18 <abort@plt>
   135c0:	push	{r4, r5, r6, sl, fp, lr}
   135c4:	add	fp, sp, #16
   135c8:	mov	r4, r1
   135cc:	ldr	r1, [r1, #48]	; 0x30
   135d0:	cmp	r1, #0
   135d4:	bne	135e4 <__assert_fail@plt+0x2690>
   135d8:	ldrb	r1, [r0, #48]	; 0x30
   135dc:	and	r1, r1, #1
   135e0:	orr	r2, r1, r2
   135e4:	add	r5, r4, #64	; 0x40
   135e8:	cmp	r2, #0
   135ec:	ldreq	r1, [r0, #48]	; 0x30
   135f0:	andseq	r1, r1, #2
   135f4:	beq	13644 <__assert_fail@plt+0x26f0>
   135f8:	ldr	r0, [r4, #24]
   135fc:	mov	r1, r5
   13600:	bl	1783c <__assert_fail@plt+0x68e8>
   13604:	cmp	r0, #0
   13608:	beq	136b8 <__assert_fail@plt+0x2764>
   1360c:	bl	10e4c <__errno_location@plt>
   13610:	mov	r6, r0
   13614:	ldr	r0, [r0]
   13618:	cmp	r0, #2
   1361c:	bne	13668 <__assert_fail@plt+0x2714>
   13620:	ldr	r0, [r4, #24]
   13624:	mov	r1, r5
   13628:	bl	1785c <__assert_fail@plt+0x6908>
   1362c:	cmp	r0, #0
   13630:	bne	13668 <__assert_fail@plt+0x2714>
   13634:	mov	r0, #0
   13638:	str	r0, [r6]
   1363c:	mov	r0, #13
   13640:	pop	{r4, r5, r6, sl, fp, pc}
   13644:	ldr	r1, [r4, #24]
   13648:	ldr	r0, [r0, #32]
   1364c:	mov	r2, r5
   13650:	mov	r3, #256	; 0x100
   13654:	bl	1786c <__assert_fail@plt+0x6918>
   13658:	cmp	r0, #0
   1365c:	beq	136b8 <__assert_fail@plt+0x2764>
   13660:	bl	10e4c <__errno_location@plt>
   13664:	mov	r6, r0
   13668:	ldr	r0, [r6]
   1366c:	str	r0, [r4, #32]
   13670:	mov	r0, #0
   13674:	vmov.i32	q8, #0	; 0x00000000
   13678:	str	r0, [r5, #96]	; 0x60
   1367c:	add	r1, r5, #80	; 0x50
   13680:	vst1.64	{d16-d17}, [r1]
   13684:	add	r1, r5, #64	; 0x40
   13688:	vst1.64	{d16-d17}, [r1]
   1368c:	add	r1, r5, #48	; 0x30
   13690:	vst1.64	{d16-d17}, [r1]
   13694:	add	r1, r5, #32
   13698:	vst1.64	{d16-d17}, [r1]
   1369c:	add	r1, r5, #16
   136a0:	vst1.64	{d16-d17}, [r1]
   136a4:	mov	r1, #100	; 0x64
   136a8:	vst1.64	{d16-d17}, [r5], r1
   136ac:	str	r0, [r5]
   136b0:	mov	r0, #10
   136b4:	pop	{r4, r5, r6, sl, fp, pc}
   136b8:	ldr	r0, [r4, #80]	; 0x50
   136bc:	and	r0, r0, #61440	; 0xf000
   136c0:	cmp	r0, #40960	; 0xa000
   136c4:	beq	1371c <__assert_fail@plt+0x27c8>
   136c8:	cmp	r0, #32768	; 0x8000
   136cc:	beq	13724 <__assert_fail@plt+0x27d0>
   136d0:	cmp	r0, #16384	; 0x4000
   136d4:	bne	1372c <__assert_fail@plt+0x27d8>
   136d8:	ldrb	r1, [r4, #168]	; 0xa8
   136dc:	mov	r0, #1
   136e0:	cmp	r1, #46	; 0x2e
   136e4:	bne	13730 <__assert_fail@plt+0x27dc>
   136e8:	ldrb	r1, [r4, #169]	; 0xa9
   136ec:	cmp	r1, #0
   136f0:	beq	13708 <__assert_fail@plt+0x27b4>
   136f4:	cmp	r1, #46	; 0x2e
   136f8:	bne	13730 <__assert_fail@plt+0x27dc>
   136fc:	ldrb	r1, [r4, #170]	; 0xaa
   13700:	cmp	r1, #0
   13704:	popne	{r4, r5, r6, sl, fp, pc}
   13708:	ldr	r1, [r4, #48]	; 0x30
   1370c:	mov	r0, #5
   13710:	cmp	r1, #0
   13714:	movweq	r0, #1
   13718:	pop	{r4, r5, r6, sl, fp, pc}
   1371c:	mov	r0, #12
   13720:	pop	{r4, r5, r6, sl, fp, pc}
   13724:	mov	r0, #8
   13728:	pop	{r4, r5, r6, sl, fp, pc}
   1372c:	mov	r0, #3
   13730:	pop	{r4, r5, r6, sl, fp, pc}
   13734:	push	{r4, r5, r6, r7, fp, lr}
   13738:	add	fp, sp, #16
   1373c:	mov	r6, r2
   13740:	mov	r4, r1
   13744:	mov	r5, r0
   13748:	ldr	r7, [r0, #44]	; 0x2c
   1374c:	ldr	r0, [r0, #40]	; 0x28
   13750:	cmp	r0, r2
   13754:	bcs	13780 <__assert_fail@plt+0x282c>
   13758:	add	r1, r6, #40	; 0x28
   1375c:	str	r1, [r5, #40]	; 0x28
   13760:	cmn	r1, #-1073741823	; 0xc0000001
   13764:	bhi	137e8 <__assert_fail@plt+0x2894>
   13768:	ldr	r0, [r5, #8]
   1376c:	lsl	r1, r1, #2
   13770:	bl	170b4 <__assert_fail@plt+0x6160>
   13774:	cmp	r0, #0
   13778:	beq	137e8 <__assert_fail@plt+0x2894>
   1377c:	str	r0, [r5, #8]
   13780:	cmp	r4, #0
   13784:	beq	1379c <__assert_fail@plt+0x2848>
   13788:	ldr	r0, [r5, #8]
   1378c:	str	r4, [r0], #4
   13790:	ldr	r4, [r4, #8]
   13794:	cmp	r4, #0
   13798:	bne	1378c <__assert_fail@plt+0x2838>
   1379c:	ldr	r0, [r5, #8]
   137a0:	mov	r1, r6
   137a4:	mov	r2, #4
   137a8:	mov	r3, r7
   137ac:	bl	10ee8 <qsort@plt>
   137b0:	subs	r1, r6, #1
   137b4:	ldr	r0, [r5, #8]
   137b8:	ldr	r4, [r0]
   137bc:	beq	137d4 <__assert_fail@plt+0x2880>
   137c0:	ldr	r2, [r0]
   137c4:	ldr	r3, [r0, #4]!
   137c8:	str	r3, [r2, #8]
   137cc:	subs	r1, r1, #1
   137d0:	bne	137c0 <__assert_fail@plt+0x286c>
   137d4:	ldr	r0, [r0]
   137d8:	mov	r1, #0
   137dc:	str	r1, [r0, #8]
   137e0:	mov	r0, r4
   137e4:	pop	{r4, r5, r6, r7, fp, pc}
   137e8:	ldr	r0, [r5, #8]
   137ec:	bl	13114 <__assert_fail@plt+0x21c0>
   137f0:	mov	r0, #0
   137f4:	str	r0, [r5, #40]	; 0x28
   137f8:	str	r0, [r5, #8]
   137fc:	mov	r0, r4
   13800:	pop	{r4, r5, r6, r7, fp, pc}
   13804:	push	{r4, r5, fp, lr}
   13808:	add	fp, sp, #8
   1380c:	sub	sp, sp, #8
   13810:	mov	r4, r0
   13814:	ldrh	r0, [r0, #48]	; 0x30
   13818:	movw	r1, #258	; 0x102
   1381c:	tst	r0, r1
   13820:	beq	13860 <__assert_fail@plt+0x290c>
   13824:	movw	r0, #12564	; 0x3114
   13828:	movt	r0, #1
   1382c:	str	r0, [sp]
   13830:	mov	r5, #0
   13834:	movw	r2, #20196	; 0x4ee4
   13838:	movt	r2, #1
   1383c:	movw	r3, #20228	; 0x4f04
   13840:	movt	r3, #1
   13844:	mov	r0, #31
   13848:	mov	r1, #0
   1384c:	bl	1634c <__assert_fail@plt+0x53f8>
   13850:	str	r0, [r4, #56]	; 0x38
   13854:	cmp	r0, #0
   13858:	movne	r5, #1
   1385c:	b	13884 <__assert_fail@plt+0x2930>
   13860:	mov	r0, #32
   13864:	bl	17084 <__assert_fail@plt+0x6130>
   13868:	str	r0, [r4, #56]	; 0x38
   1386c:	cmp	r0, #0
   13870:	beq	13880 <__assert_fail@plt+0x292c>
   13874:	bl	17250 <__assert_fail@plt+0x62fc>
   13878:	mov	r5, #1
   1387c:	b	13884 <__assert_fail@plt+0x2930>
   13880:	mov	r5, #0
   13884:	mov	r0, r5
   13888:	sub	sp, fp, #8
   1388c:	pop	{r4, r5, fp, pc}
   13890:	ldr	r3, [r0, #48]	; 0x30
   13894:	mov	r2, #32768	; 0x8000
   13898:	and	r2, r2, r3, lsl #11
   1389c:	orr	r2, r2, #18688	; 0x4900
   138a0:	orr	r2, r2, #524288	; 0x80000
   138a4:	tst	r3, #512	; 0x200
   138a8:	bne	138b8 <__assert_fail@plt+0x2964>
   138ac:	mov	r0, r1
   138b0:	mov	r1, r2
   138b4:	b	17548 <__assert_fail@plt+0x65f4>
   138b8:	ldr	r0, [r0, #32]
   138bc:	b	16f50 <__assert_fail@plt+0x5ffc>
   138c0:	push	{r4, r6, r7, sl, fp, lr}
   138c4:	add	fp, sp, #16
   138c8:	cmp	r0, #0
   138cc:	beq	13904 <__assert_fail@plt+0x29b0>
   138d0:	mov	r4, r0
   138d4:	b	138ec <__assert_fail@plt+0x2998>
   138d8:	mov	r0, r4
   138dc:	bl	13114 <__assert_fail@plt+0x21c0>
   138e0:	cmp	r6, #0
   138e4:	mov	r4, r6
   138e8:	beq	13904 <__assert_fail@plt+0x29b0>
   138ec:	ldrd	r6, [r4, #8]
   138f0:	cmp	r7, #0
   138f4:	beq	138d8 <__assert_fail@plt+0x2984>
   138f8:	mov	r0, r7
   138fc:	bl	10f3c <closedir@plt>
   13900:	b	138d8 <__assert_fail@plt+0x2984>
   13904:	pop	{r4, r6, r7, sl, fp, pc}
   13908:	push	{r4, r5, fp, lr}
   1390c:	add	fp, sp, #8
   13910:	mov	r4, r0
   13914:	ldr	r0, [r0]
   13918:	cmp	r0, #0
   1391c:	beq	1395c <__assert_fail@plt+0x2a08>
   13920:	ldr	r1, [r0, #48]	; 0x30
   13924:	cmp	r1, #0
   13928:	bmi	13950 <__assert_fail@plt+0x29fc>
   1392c:	ldr	r5, [r0, #8]
   13930:	cmp	r5, #0
   13934:	ldreq	r5, [r0, #4]
   13938:	bl	13114 <__assert_fail@plt+0x21c0>
   1393c:	ldr	r0, [r5, #48]	; 0x30
   13940:	cmn	r0, #1
   13944:	mov	r0, r5
   13948:	bgt	1392c <__assert_fail@plt+0x29d8>
   1394c:	b	13954 <__assert_fail@plt+0x2a00>
   13950:	mov	r5, r0
   13954:	mov	r0, r5
   13958:	bl	13114 <__assert_fail@plt+0x21c0>
   1395c:	ldr	r0, [r4, #4]
   13960:	cmp	r0, #0
   13964:	blne	138c0 <__assert_fail@plt+0x296c>
   13968:	ldr	r0, [r4, #8]
   1396c:	bl	13114 <__assert_fail@plt+0x21c0>
   13970:	ldr	r0, [r4, #24]
   13974:	bl	13114 <__assert_fail@plt+0x21c0>
   13978:	ldr	r0, [r4, #48]	; 0x30
   1397c:	tst	r0, #512	; 0x200
   13980:	bne	139ac <__assert_fail@plt+0x2a58>
   13984:	mov	r5, #0
   13988:	tst	r0, #4
   1398c:	bne	139f0 <__assert_fail@plt+0x2a9c>
   13990:	ldr	r0, [r4, #28]
   13994:	bl	10edc <fchdir@plt>
   13998:	cmp	r0, #0
   1399c:	beq	139cc <__assert_fail@plt+0x2a78>
   139a0:	bl	10e4c <__errno_location@plt>
   139a4:	ldr	r5, [r0]
   139a8:	b	139d0 <__assert_fail@plt+0x2a7c>
   139ac:	ldr	r0, [r4, #32]
   139b0:	mov	r5, #0
   139b4:	cmp	r0, #0
   139b8:	bmi	139f0 <__assert_fail@plt+0x2a9c>
   139bc:	bl	10f24 <close@plt>
   139c0:	cmp	r0, #0
   139c4:	bne	139e8 <__assert_fail@plt+0x2a94>
   139c8:	b	139f0 <__assert_fail@plt+0x2a9c>
   139cc:	mov	r5, #0
   139d0:	ldr	r0, [r4, #28]
   139d4:	bl	10f24 <close@plt>
   139d8:	cmp	r5, #0
   139dc:	bne	139f0 <__assert_fail@plt+0x2a9c>
   139e0:	cmp	r0, #0
   139e4:	beq	139f0 <__assert_fail@plt+0x2a9c>
   139e8:	bl	10e4c <__errno_location@plt>
   139ec:	ldr	r5, [r0]
   139f0:	add	r0, r4, #60	; 0x3c
   139f4:	bl	13a38 <__assert_fail@plt+0x2ae4>
   139f8:	ldr	r0, [r4, #52]	; 0x34
   139fc:	cmp	r0, #0
   13a00:	beq	13a08 <__assert_fail@plt+0x2ab4>
   13a04:	bl	16628 <__assert_fail@plt+0x56d4>
   13a08:	mov	r0, r4
   13a0c:	bl	13a74 <__assert_fail@plt+0x2b20>
   13a10:	mov	r0, r4
   13a14:	bl	13114 <__assert_fail@plt+0x21c0>
   13a18:	cmp	r5, #0
   13a1c:	beq	13a30 <__assert_fail@plt+0x2adc>
   13a20:	bl	10e4c <__errno_location@plt>
   13a24:	str	r5, [r0]
   13a28:	mvn	r0, #0
   13a2c:	pop	{r4, r5, fp, pc}
   13a30:	mov	r0, #0
   13a34:	pop	{r4, r5, fp, pc}
   13a38:	push	{r4, sl, fp, lr}
   13a3c:	add	fp, sp, #8
   13a40:	mov	r4, r0
   13a44:	b	13a4c <__assert_fail@plt+0x2af8>
   13a48:	mov	r0, r4
   13a4c:	bl	16e20 <__assert_fail@plt+0x5ecc>
   13a50:	cmp	r0, #0
   13a54:	bne	13a70 <__assert_fail@plt+0x2b1c>
   13a58:	mov	r0, r4
   13a5c:	bl	16e6c <__assert_fail@plt+0x5f18>
   13a60:	cmp	r0, #0
   13a64:	bmi	13a48 <__assert_fail@plt+0x2af4>
   13a68:	bl	10f24 <close@plt>
   13a6c:	b	13a48 <__assert_fail@plt+0x2af4>
   13a70:	pop	{r4, sl, fp, pc}
   13a74:	ldrh	r1, [r0, #48]	; 0x30
   13a78:	movw	r2, #258	; 0x102
   13a7c:	tst	r1, r2
   13a80:	beq	13a94 <__assert_fail@plt+0x2b40>
   13a84:	ldr	r0, [r0, #56]	; 0x38
   13a88:	cmp	r0, #0
   13a8c:	bxeq	lr
   13a90:	b	16628 <__assert_fail@plt+0x56d4>
   13a94:	ldr	r0, [r0, #56]	; 0x38
   13a98:	b	13114 <__assert_fail@plt+0x21c0>
   13a9c:	push	{r4, r5, r6, r7, fp, lr}
   13aa0:	add	fp, sp, #16
   13aa4:	ldr	r6, [r0]
   13aa8:	mov	r5, #0
   13aac:	cmp	r6, #0
   13ab0:	beq	14054 <__assert_fail@plt+0x3100>
   13ab4:	mov	r4, r0
   13ab8:	ldr	r1, [r0, #48]	; 0x30
   13abc:	tst	r1, #8192	; 0x2000
   13ac0:	bne	14054 <__assert_fail@plt+0x3100>
   13ac4:	ldrh	r0, [r6, #60]	; 0x3c
   13ac8:	mov	r2, #3
   13acc:	strh	r2, [r6, #60]	; 0x3c
   13ad0:	cmp	r0, #2
   13ad4:	beq	13afc <__assert_fail@plt+0x2ba8>
   13ad8:	cmp	r0, #1
   13adc:	bne	13b64 <__assert_fail@plt+0x2c10>
   13ae0:	mov	r0, r4
   13ae4:	mov	r1, r6
   13ae8:	mov	r2, #0
   13aec:	bl	135c0 <__assert_fail@plt+0x266c>
   13af0:	strh	r0, [r6, #56]	; 0x38
   13af4:	mov	r0, r6
   13af8:	pop	{r4, r5, r6, r7, fp, pc}
   13afc:	ldrh	r2, [r6, #56]	; 0x38
   13b00:	bic	r2, r2, #1
   13b04:	cmp	r2, #12
   13b08:	bne	13b64 <__assert_fail@plt+0x2c10>
   13b0c:	mov	r0, r4
   13b10:	mov	r1, r6
   13b14:	mov	r2, #1
   13b18:	bl	135c0 <__assert_fail@plt+0x266c>
   13b1c:	strh	r0, [r6, #56]	; 0x38
   13b20:	cmp	r0, #1
   13b24:	bne	13c50 <__assert_fail@plt+0x2cfc>
   13b28:	ldrb	r0, [r4, #48]	; 0x30
   13b2c:	tst	r0, #4
   13b30:	bne	13c50 <__assert_fail@plt+0x2cfc>
   13b34:	movw	r1, #31163	; 0x79bb
   13b38:	movt	r1, #1
   13b3c:	mov	r0, r4
   13b40:	bl	13890 <__assert_fail@plt+0x293c>
   13b44:	str	r0, [r6, #36]	; 0x24
   13b48:	cmn	r0, #1
   13b4c:	ble	13e90 <__assert_fail@plt+0x2f3c>
   13b50:	ldrh	r0, [r6, #58]	; 0x3a
   13b54:	orr	r0, r0, #2
   13b58:	strh	r0, [r6, #58]	; 0x3a
   13b5c:	mov	r5, r6
   13b60:	b	13f74 <__assert_fail@plt+0x3020>
   13b64:	ldrh	r2, [r6, #56]	; 0x38
   13b68:	cmp	r2, #1
   13b6c:	bne	13bc0 <__assert_fail@plt+0x2c6c>
   13b70:	cmp	r0, #4
   13b74:	bne	13c58 <__assert_fail@plt+0x2d04>
   13b78:	ldrb	r0, [r6, #58]	; 0x3a
   13b7c:	tst	r0, #2
   13b80:	beq	13b8c <__assert_fail@plt+0x2c38>
   13b84:	ldr	r0, [r6, #36]	; 0x24
   13b88:	bl	10f24 <close@plt>
   13b8c:	ldr	r0, [r4, #4]
   13b90:	cmp	r0, #0
   13b94:	beq	13ba4 <__assert_fail@plt+0x2c50>
   13b98:	bl	138c0 <__assert_fail@plt+0x296c>
   13b9c:	mov	r0, #0
   13ba0:	str	r0, [r4, #4]
   13ba4:	mov	r0, #6
   13ba8:	strh	r0, [r6, #56]	; 0x38
   13bac:	mov	r0, r4
   13bb0:	mov	r1, r6
   13bb4:	bl	14060 <__assert_fail@plt+0x310c>
   13bb8:	mov	r0, r6
   13bbc:	pop	{r4, r5, r6, r7, fp, pc}
   13bc0:	ldr	r5, [r6, #8]
   13bc4:	cmp	r5, #0
   13bc8:	beq	13cf0 <__assert_fail@plt+0x2d9c>
   13bcc:	str	r5, [r4]
   13bd0:	mov	r0, r6
   13bd4:	bl	13114 <__assert_fail@plt+0x21c0>
   13bd8:	ldr	r0, [r5, #48]	; 0x30
   13bdc:	cmp	r0, #0
   13be0:	beq	13d3c <__assert_fail@plt+0x2de8>
   13be4:	ldrh	r0, [r5, #60]	; 0x3c
   13be8:	cmp	r0, #4
   13bec:	mov	r6, r5
   13bf0:	beq	13bc0 <__assert_fail@plt+0x2c6c>
   13bf4:	cmp	r0, #2
   13bf8:	bne	13f38 <__assert_fail@plt+0x2fe4>
   13bfc:	mov	r0, r4
   13c00:	mov	r1, r5
   13c04:	mov	r2, #1
   13c08:	bl	135c0 <__assert_fail@plt+0x266c>
   13c0c:	strh	r0, [r5, #56]	; 0x38
   13c10:	cmp	r0, #1
   13c14:	bne	13f30 <__assert_fail@plt+0x2fdc>
   13c18:	ldrb	r0, [r4, #48]	; 0x30
   13c1c:	tst	r0, #4
   13c20:	bne	13f30 <__assert_fail@plt+0x2fdc>
   13c24:	movw	r1, #31163	; 0x79bb
   13c28:	movt	r1, #1
   13c2c:	mov	r0, r4
   13c30:	bl	13890 <__assert_fail@plt+0x293c>
   13c34:	str	r0, [r5, #36]	; 0x24
   13c38:	cmn	r0, #1
   13c3c:	ble	13f1c <__assert_fail@plt+0x2fc8>
   13c40:	ldrh	r0, [r5, #58]	; 0x3a
   13c44:	orr	r0, r0, #2
   13c48:	strh	r0, [r5, #58]	; 0x3a
   13c4c:	b	13f30 <__assert_fail@plt+0x2fdc>
   13c50:	mov	r5, r6
   13c54:	b	13f74 <__assert_fail@plt+0x3020>
   13c58:	tst	r1, #64	; 0x40
   13c5c:	beq	13c80 <__assert_fail@plt+0x2d2c>
   13c60:	ldr	r0, [r4, #16]
   13c64:	ldr	r3, [r4, #20]
   13c68:	ldr	r2, [r6, #64]	; 0x40
   13c6c:	ldr	r5, [r6, #68]	; 0x44
   13c70:	eor	r3, r5, r3
   13c74:	eor	r0, r2, r0
   13c78:	orrs	r0, r0, r3
   13c7c:	bne	13b78 <__assert_fail@plt+0x2c24>
   13c80:	ldr	r0, [r4, #4]
   13c84:	cmp	r0, #0
   13c88:	beq	13d90 <__assert_fail@plt+0x2e3c>
   13c8c:	tst	r1, #4096	; 0x1000
   13c90:	bne	13d7c <__assert_fail@plt+0x2e28>
   13c94:	ldr	r3, [r6, #24]
   13c98:	mov	r0, r4
   13c9c:	mov	r1, r6
   13ca0:	mvn	r2, #0
   13ca4:	bl	1413c <__assert_fail@plt+0x31e8>
   13ca8:	cmp	r0, #0
   13cac:	beq	13da8 <__assert_fail@plt+0x2e54>
   13cb0:	bl	10e4c <__errno_location@plt>
   13cb4:	ldr	r0, [r0]
   13cb8:	str	r0, [r6, #32]
   13cbc:	ldrh	r0, [r6, #58]	; 0x3a
   13cc0:	orr	r0, r0, #1
   13cc4:	strh	r0, [r6, #58]	; 0x3a
   13cc8:	ldr	r0, [r4, #4]
   13ccc:	cmp	r0, #0
   13cd0:	beq	13da8 <__assert_fail@plt+0x2e54>
   13cd4:	ldmib	r0, {r1, r2}
   13cd8:	ldr	r1, [r1, #24]
   13cdc:	str	r1, [r0, #24]
   13ce0:	cmp	r2, #0
   13ce4:	mov	r0, r2
   13ce8:	bne	13cd4 <__assert_fail@plt+0x2d80>
   13cec:	b	13da8 <__assert_fail@plt+0x2e54>
   13cf0:	ldr	r0, [r6, #4]
   13cf4:	ldr	r1, [r0, #12]
   13cf8:	cmp	r1, #0
   13cfc:	beq	13df4 <__assert_fail@plt+0x2ea0>
   13d00:	str	r0, [r4]
   13d04:	ldr	r1, [r4, #24]
   13d08:	ldr	r0, [r0, #40]	; 0x28
   13d0c:	mov	r5, #0
   13d10:	strb	r5, [r1, r0]
   13d14:	mov	r0, r4
   13d18:	mov	r1, #3
   13d1c:	bl	14324 <__assert_fail@plt+0x33d0>
   13d20:	cmp	r0, #0
   13d24:	beq	13de8 <__assert_fail@plt+0x2e94>
   13d28:	mov	r7, r0
   13d2c:	mov	r0, r6
   13d30:	bl	13114 <__assert_fail@plt+0x21c0>
   13d34:	mov	r5, r7
   13d38:	b	13f38 <__assert_fail@plt+0x2fe4>
   13d3c:	mov	r0, r4
   13d40:	bl	14b40 <__assert_fail@plt+0x3bec>
   13d44:	cmp	r0, #0
   13d48:	beq	13d5c <__assert_fail@plt+0x2e08>
   13d4c:	ldr	r0, [r4, #48]	; 0x30
   13d50:	orr	r0, r0, #8192	; 0x2000
   13d54:	str	r0, [r4, #48]	; 0x30
   13d58:	b	13ff8 <__assert_fail@plt+0x30a4>
   13d5c:	mov	r0, r4
   13d60:	bl	13a74 <__assert_fail@plt+0x2b20>
   13d64:	mov	r0, r4
   13d68:	mov	r1, r5
   13d6c:	bl	14b9c <__assert_fail@plt+0x3c48>
   13d70:	mov	r0, r4
   13d74:	bl	13804 <__assert_fail@plt+0x28b0>
   13d78:	b	13f74 <__assert_fail@plt+0x3020>
   13d7c:	bic	r1, r1, #4096	; 0x1000
   13d80:	str	r1, [r4, #48]	; 0x30
   13d84:	bl	138c0 <__assert_fail@plt+0x296c>
   13d88:	mov	r0, #0
   13d8c:	str	r0, [r4, #4]
   13d90:	mov	r0, r4
   13d94:	mov	r1, #3
   13d98:	bl	14324 <__assert_fail@plt+0x33d0>
   13d9c:	str	r0, [r4, #4]
   13da0:	cmp	r0, #0
   13da4:	beq	13db8 <__assert_fail@plt+0x2e64>
   13da8:	ldr	r5, [r4, #4]
   13dac:	mov	r0, #0
   13db0:	str	r0, [r4, #4]
   13db4:	b	13f38 <__assert_fail@plt+0x2fe4>
   13db8:	ldrb	r0, [r4, #49]	; 0x31
   13dbc:	tst	r0, #32
   13dc0:	mov	r5, #0
   13dc4:	bne	14054 <__assert_fail@plt+0x3100>
   13dc8:	ldr	r0, [r6, #32]
   13dcc:	cmp	r0, #0
   13dd0:	beq	13bac <__assert_fail@plt+0x2c58>
   13dd4:	ldrh	r0, [r6, #56]	; 0x38
   13dd8:	cmp	r0, #4
   13ddc:	beq	13bac <__assert_fail@plt+0x2c58>
   13de0:	mov	r0, #7
   13de4:	b	13ba8 <__assert_fail@plt+0x2c54>
   13de8:	ldrb	r0, [r4, #49]	; 0x31
   13dec:	tst	r0, #32
   13df0:	bne	14054 <__assert_fail@plt+0x3100>
   13df4:	ldr	r5, [r6, #4]
   13df8:	str	r5, [r4]
   13dfc:	mov	r0, r6
   13e00:	bl	13114 <__assert_fail@plt+0x21c0>
   13e04:	ldr	r0, [r5, #48]	; 0x30
   13e08:	cmn	r0, #1
   13e0c:	beq	13e70 <__assert_fail@plt+0x2f1c>
   13e10:	ldrh	r0, [r5, #56]	; 0x38
   13e14:	cmp	r0, #11
   13e18:	beq	1405c <__assert_fail@plt+0x3108>
   13e1c:	ldr	r0, [r5, #40]	; 0x28
   13e20:	ldr	r1, [r4, #24]
   13e24:	mov	r2, #0
   13e28:	strb	r2, [r1, r0]
   13e2c:	ldr	r0, [r5, #48]	; 0x30
   13e30:	cmp	r0, #0
   13e34:	beq	13eac <__assert_fail@plt+0x2f58>
   13e38:	ldrh	r0, [r5, #58]	; 0x3a
   13e3c:	tst	r0, #2
   13e40:	bne	13ed8 <__assert_fail@plt+0x2f84>
   13e44:	tst	r0, #1
   13e48:	bne	14018 <__assert_fail@plt+0x30c4>
   13e4c:	ldr	r1, [r5, #4]
   13e50:	movw	r3, #31162	; 0x79ba
   13e54:	movt	r3, #1
   13e58:	mov	r0, r4
   13e5c:	mvn	r2, #0
   13e60:	bl	1413c <__assert_fail@plt+0x31e8>
   13e64:	cmp	r0, #0
   13e68:	bne	13ebc <__assert_fail@plt+0x2f68>
   13e6c:	b	14018 <__assert_fail@plt+0x30c4>
   13e70:	mov	r0, r5
   13e74:	bl	13114 <__assert_fail@plt+0x21c0>
   13e78:	bl	10e4c <__errno_location@plt>
   13e7c:	mov	r5, #0
   13e80:	str	r5, [r0]
   13e84:	str	r5, [r4]
   13e88:	mov	r0, r5
   13e8c:	pop	{r4, r5, r6, r7, fp, pc}
   13e90:	bl	10e4c <__errno_location@plt>
   13e94:	ldr	r0, [r0]
   13e98:	mov	r1, #7
   13e9c:	strh	r1, [r6, #56]	; 0x38
   13ea0:	str	r0, [r6, #32]
   13ea4:	mov	r5, r6
   13ea8:	b	13f74 <__assert_fail@plt+0x3020>
   13eac:	mov	r0, r4
   13eb0:	bl	14b40 <__assert_fail@plt+0x3bec>
   13eb4:	cmp	r0, #0
   13eb8:	beq	14018 <__assert_fail@plt+0x30c4>
   13ebc:	bl	10e4c <__errno_location@plt>
   13ec0:	ldr	r0, [r0]
   13ec4:	str	r0, [r5, #32]
   13ec8:	ldr	r0, [r4, #48]	; 0x30
   13ecc:	orr	r0, r0, #8192	; 0x2000
   13ed0:	str	r0, [r4, #48]	; 0x30
   13ed4:	b	14018 <__assert_fail@plt+0x30c4>
   13ed8:	ldr	r0, [r4, #48]	; 0x30
   13edc:	tst	r0, #4
   13ee0:	bne	14010 <__assert_fail@plt+0x30bc>
   13ee4:	ldr	r1, [r5, #36]	; 0x24
   13ee8:	tst	r0, #512	; 0x200
   13eec:	bne	14004 <__assert_fail@plt+0x30b0>
   13ef0:	mov	r0, r1
   13ef4:	bl	10edc <fchdir@plt>
   13ef8:	cmp	r0, #0
   13efc:	beq	14010 <__assert_fail@plt+0x30bc>
   13f00:	bl	10e4c <__errno_location@plt>
   13f04:	ldr	r0, [r0]
   13f08:	str	r0, [r5, #32]
   13f0c:	ldr	r0, [r4, #48]	; 0x30
   13f10:	orr	r0, r0, #8192	; 0x2000
   13f14:	str	r0, [r4, #48]	; 0x30
   13f18:	b	14010 <__assert_fail@plt+0x30bc>
   13f1c:	bl	10e4c <__errno_location@plt>
   13f20:	ldr	r0, [r0]
   13f24:	mov	r1, #7
   13f28:	strh	r1, [r5, #56]	; 0x38
   13f2c:	str	r0, [r5, #32]
   13f30:	mov	r0, #3
   13f34:	strh	r0, [r5, #60]	; 0x3c
   13f38:	ldr	r0, [r5, #4]
   13f3c:	ldr	r1, [r0, #28]
   13f40:	ldr	r0, [r0, #40]	; 0x28
   13f44:	sub	r2, r0, #1
   13f48:	ldrb	r1, [r1, r2]
   13f4c:	cmp	r1, #47	; 0x2f
   13f50:	moveq	r0, r2
   13f54:	ldr	r1, [r4, #24]
   13f58:	mov	r2, #47	; 0x2f
   13f5c:	strb	r2, [r1, r0]!
   13f60:	add	r0, r1, #1
   13f64:	add	r1, r5, #168	; 0xa8
   13f68:	ldr	r2, [r5, #52]	; 0x34
   13f6c:	add	r2, r2, #1
   13f70:	bl	10d2c <memmove@plt>
   13f74:	str	r5, [r4]
   13f78:	ldrh	r0, [r5, #56]	; 0x38
   13f7c:	cmp	r0, #11
   13f80:	bne	13fb8 <__assert_fail@plt+0x3064>
   13f84:	add	r0, r5, #112	; 0x70
   13f88:	ldrd	r0, [r0]
   13f8c:	eor	r2, r0, #1
   13f90:	orrs	r2, r2, r1
   13f94:	beq	14054 <__assert_fail@plt+0x3100>
   13f98:	eor	r0, r0, #2
   13f9c:	orrs	r0, r0, r1
   13fa0:	bne	1405c <__assert_fail@plt+0x3108>
   13fa4:	mov	r0, r4
   13fa8:	mov	r1, r5
   13fac:	mov	r2, #0
   13fb0:	bl	135c0 <__assert_fail@plt+0x266c>
   13fb4:	strh	r0, [r5, #56]	; 0x38
   13fb8:	cmp	r0, #1
   13fbc:	bne	14054 <__assert_fail@plt+0x3100>
   13fc0:	ldr	r0, [r5, #48]	; 0x30
   13fc4:	cmp	r0, #0
   13fc8:	bne	13fd8 <__assert_fail@plt+0x3084>
   13fcc:	add	r0, r5, #64	; 0x40
   13fd0:	ldrd	r0, [r0]
   13fd4:	strd	r0, [r4, #16]
   13fd8:	mov	r0, r4
   13fdc:	mov	r1, r5
   13fe0:	bl	14c24 <__assert_fail@plt+0x3cd0>
   13fe4:	cmp	r0, #0
   13fe8:	bne	14054 <__assert_fail@plt+0x3100>
   13fec:	bl	10e4c <__errno_location@plt>
   13ff0:	mov	r1, #12
   13ff4:	str	r1, [r0]
   13ff8:	mov	r5, #0
   13ffc:	mov	r0, r5
   14000:	pop	{r4, r5, r6, r7, fp, pc}
   14004:	mov	r0, r4
   14008:	mov	r2, #1
   1400c:	bl	14ce4 <__assert_fail@plt+0x3d90>
   14010:	ldr	r0, [r5, #36]	; 0x24
   14014:	bl	10f24 <close@plt>
   14018:	ldrh	r0, [r5, #56]	; 0x38
   1401c:	cmp	r0, #2
   14020:	beq	14048 <__assert_fail@plt+0x30f4>
   14024:	ldr	r0, [r5, #32]
   14028:	mov	r1, #7
   1402c:	cmp	r0, #0
   14030:	movweq	r1, #6
   14034:	strh	r1, [r5, #56]	; 0x38
   14038:	bne	14048 <__assert_fail@plt+0x30f4>
   1403c:	mov	r0, r4
   14040:	mov	r1, r5
   14044:	bl	14060 <__assert_fail@plt+0x310c>
   14048:	ldrb	r0, [r4, #49]	; 0x31
   1404c:	tst	r0, #32
   14050:	movne	r5, #0
   14054:	mov	r0, r5
   14058:	pop	{r4, r5, r6, r7, fp, pc}
   1405c:	bl	10f18 <abort@plt>
   14060:	push	{r4, r5, r7, sl, fp, lr}
   14064:	add	fp, sp, #16
   14068:	sub	sp, sp, #24
   1406c:	add	lr, r1, #64	; 0x40
   14070:	add	r4, r1, #160	; 0xa0
   14074:	ldrh	r2, [r0, #48]	; 0x30
   14078:	movw	r3, #258	; 0x102
   1407c:	tst	r2, r3
   14080:	beq	140b8 <__assert_fail@plt+0x3164>
   14084:	ldrd	r2, [lr]
   14088:	stm	sp, {r2, r3}
   1408c:	ldrd	r2, [r4]
   14090:	str	r3, [sp, #12]
   14094:	str	r2, [sp, #8]
   14098:	ldr	r0, [r0, #56]	; 0x38
   1409c:	mov	r1, sp
   140a0:	bl	16c28 <__assert_fail@plt+0x5cd4>
   140a4:	cmp	r0, #0
   140a8:	beq	14138 <__assert_fail@plt+0x31e4>
   140ac:	bl	13114 <__assert_fail@plt+0x21c0>
   140b0:	sub	sp, fp, #16
   140b4:	pop	{r4, r5, r7, sl, fp, pc}
   140b8:	ldr	r1, [r1, #4]
   140bc:	cmp	r1, #0
   140c0:	beq	14130 <__assert_fail@plt+0x31dc>
   140c4:	ldr	r2, [r1, #48]	; 0x30
   140c8:	cmp	r2, #0
   140cc:	bmi	14130 <__assert_fail@plt+0x31dc>
   140d0:	ldr	ip, [r0, #56]	; 0x38
   140d4:	ldrd	r2, [ip, #16]
   140d8:	orrs	r2, r2, r3
   140dc:	beq	14138 <__assert_fail@plt+0x31e4>
   140e0:	ldrd	r2, [r4]
   140e4:	ldrd	r4, [ip]
   140e8:	eor	r3, r5, r3
   140ec:	eor	r2, r4, r2
   140f0:	orrs	r2, r2, r3
   140f4:	bne	14130 <__assert_fail@plt+0x31dc>
   140f8:	add	r3, ip, #8
   140fc:	ldm	lr, {r2, r5}
   14100:	ldm	r3, {r4, r7}
   14104:	eor	r7, r7, r5
   14108:	eor	r2, r4, r2
   1410c:	orrs	r2, r2, r7
   14110:	bne	14130 <__assert_fail@plt+0x31dc>
   14114:	add	r2, r1, #64	; 0x40
   14118:	add	r1, r1, #160	; 0xa0
   1411c:	ldm	r2, {r2, r5}
   14120:	stm	r3, {r2, r5}
   14124:	ldr	r0, [r0, #56]	; 0x38
   14128:	ldrd	r2, [r1]
   1412c:	strd	r2, [r0]
   14130:	sub	sp, fp, #16
   14134:	pop	{r4, r5, r7, sl, fp, pc}
   14138:	bl	10f18 <abort@plt>
   1413c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14140:	add	fp, sp, #24
   14144:	sub	sp, sp, #104	; 0x68
   14148:	mov	r7, r3
   1414c:	mov	r4, r2
   14150:	mov	r8, r1
   14154:	mov	r5, r0
   14158:	cmp	r3, #0
   1415c:	beq	14180 <__assert_fail@plt+0x322c>
   14160:	movw	r1, #31162	; 0x79ba
   14164:	movt	r1, #1
   14168:	mov	r0, r7
   1416c:	bl	10cfc <strcmp@plt>
   14170:	mov	r6, r0
   14174:	cmp	r0, #0
   14178:	movwne	r6, #1
   1417c:	b	14184 <__assert_fail@plt+0x3230>
   14180:	mov	r6, #1
   14184:	ldr	r0, [r5, #48]	; 0x30
   14188:	tst	r0, #4
   1418c:	bne	141e4 <__assert_fail@plt+0x3290>
   14190:	mov	r9, #0
   14194:	cmn	r4, #1
   14198:	mov	r1, #0
   1419c:	movwgt	r1, #1
   141a0:	orrs	r1, r1, r6
   141a4:	bne	14204 <__assert_fail@plt+0x32b0>
   141a8:	ands	r0, r0, #512	; 0x200
   141ac:	beq	14204 <__assert_fail@plt+0x32b0>
   141b0:	add	r4, r5, #60	; 0x3c
   141b4:	mov	r0, r4
   141b8:	bl	16e20 <__assert_fail@plt+0x5ecc>
   141bc:	cmp	r0, #0
   141c0:	bne	1420c <__assert_fail@plt+0x32b8>
   141c4:	mov	r0, r4
   141c8:	bl	16e6c <__assert_fail@plt+0x5f18>
   141cc:	cmn	r0, #1
   141d0:	ble	1420c <__assert_fail@plt+0x32b8>
   141d4:	mov	r4, r0
   141d8:	mov	r9, #0
   141dc:	mov	r7, #0
   141e0:	b	14228 <__assert_fail@plt+0x32d4>
   141e4:	mov	r5, #0
   141e8:	cmp	r4, #0
   141ec:	bmi	14318 <__assert_fail@plt+0x33c4>
   141f0:	ands	r0, r0, #512	; 0x200
   141f4:	beq	14318 <__assert_fail@plt+0x33c4>
   141f8:	mov	r0, r4
   141fc:	bl	10f24 <close@plt>
   14200:	b	14318 <__assert_fail@plt+0x33c4>
   14204:	cmn	r4, #1
   14208:	bgt	14228 <__assert_fail@plt+0x32d4>
   1420c:	mov	r0, r5
   14210:	mov	r1, r7
   14214:	bl	13890 <__assert_fail@plt+0x293c>
   14218:	cmp	r0, #0
   1421c:	bmi	142c8 <__assert_fail@plt+0x3374>
   14220:	mov	r4, r0
   14224:	mov	r9, #1
   14228:	ldrb	r0, [r5, #48]	; 0x30
   1422c:	tst	r0, #2
   14230:	bne	14254 <__assert_fail@plt+0x3300>
   14234:	cmp	r7, #0
   14238:	beq	142a4 <__assert_fail@plt+0x3350>
   1423c:	movw	r1, #31162	; 0x79ba
   14240:	movt	r1, #1
   14244:	mov	r0, r7
   14248:	bl	10cfc <strcmp@plt>
   1424c:	cmp	r0, #0
   14250:	bne	142a4 <__assert_fail@plt+0x3350>
   14254:	mov	r1, sp
   14258:	mov	r0, r4
   1425c:	bl	1784c <__assert_fail@plt+0x68f8>
   14260:	cmp	r0, #0
   14264:	bne	142f4 <__assert_fail@plt+0x33a0>
   14268:	add	r0, r8, #64	; 0x40
   1426c:	ldrd	r0, [r0]
   14270:	ldm	sp, {r2, r3}
   14274:	eor	r1, r1, r3
   14278:	eor	r0, r0, r2
   1427c:	orrs	r0, r0, r1
   14280:	bne	142e8 <__assert_fail@plt+0x3394>
   14284:	add	r0, r8, #160	; 0xa0
   14288:	ldrd	r0, [r0]
   1428c:	ldr	r2, [sp, #96]	; 0x60
   14290:	ldr	r3, [sp, #100]	; 0x64
   14294:	eor	r1, r1, r3
   14298:	eor	r0, r0, r2
   1429c:	orrs	r0, r0, r1
   142a0:	bne	142e8 <__assert_fail@plt+0x3394>
   142a4:	ldrb	r0, [r5, #49]	; 0x31
   142a8:	tst	r0, #2
   142ac:	bne	142d0 <__assert_fail@plt+0x337c>
   142b0:	mov	r0, r4
   142b4:	bl	10edc <fchdir@plt>
   142b8:	mov	r5, r0
   142bc:	cmp	r9, #0
   142c0:	bne	14300 <__assert_fail@plt+0x33ac>
   142c4:	b	14318 <__assert_fail@plt+0x33c4>
   142c8:	mvn	r5, #0
   142cc:	b	14318 <__assert_fail@plt+0x33c4>
   142d0:	mov	r0, r5
   142d4:	mov	r1, r4
   142d8:	mov	r2, r6
   142dc:	bl	14ce4 <__assert_fail@plt+0x3d90>
   142e0:	mov	r5, #0
   142e4:	b	14318 <__assert_fail@plt+0x33c4>
   142e8:	bl	10e4c <__errno_location@plt>
   142ec:	mov	r1, #2
   142f0:	str	r1, [r0]
   142f4:	mvn	r5, #0
   142f8:	cmp	r9, #0
   142fc:	beq	14318 <__assert_fail@plt+0x33c4>
   14300:	bl	10e4c <__errno_location@plt>
   14304:	mov	r6, r0
   14308:	ldr	r7, [r0]
   1430c:	mov	r0, r4
   14310:	bl	10f24 <close@plt>
   14314:	str	r7, [r6]
   14318:	mov	r0, r5
   1431c:	sub	sp, fp, #24
   14320:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14324:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14328:	add	fp, sp, #28
   1432c:	sub	sp, sp, #68	; 0x44
   14330:	mov	r4, r1
   14334:	mov	r6, r0
   14338:	ldr	sl, [r0]
   1433c:	ldr	r7, [sl, #12]
   14340:	cmp	r7, #0
   14344:	beq	146a0 <__assert_fail@plt+0x374c>
   14348:	mov	r0, r7
   1434c:	bl	10eb8 <dirfd@plt>
   14350:	str	r0, [fp, #-32]	; 0xffffffe0
   14354:	cmn	r0, #1
   14358:	ble	146d4 <__assert_fail@plt+0x3780>
   1435c:	mov	r1, r6
   14360:	ldr	r0, [r1, #44]!	; 0x2c
   14364:	str	r1, [fp, #-40]	; 0xffffffd8
   14368:	mvn	r1, #0
   1436c:	cmp	r0, #0
   14370:	movweq	r1, #34464	; 0x86a0
   14374:	movteq	r1, #1
   14378:	str	r1, [sp, #28]
   1437c:	mov	r0, #1
   14380:	str	r0, [sp, #4]
   14384:	str	r4, [sp, #8]
   14388:	ldr	r1, [sl, #28]
   1438c:	ldr	r0, [sl, #40]	; 0x28
   14390:	sub	r2, r0, #1
   14394:	ldrb	r1, [r1, r2]
   14398:	cmp	r1, #47	; 0x2f
   1439c:	moveq	r0, r2
   143a0:	ldrb	r1, [r6, #48]	; 0x30
   143a4:	mov	r9, #0
   143a8:	tst	r1, #4
   143ac:	mov	r1, #0
   143b0:	str	r1, [sp, #44]	; 0x2c
   143b4:	beq	143cc <__assert_fail@plt+0x3478>
   143b8:	ldr	r1, [r6, #24]
   143bc:	mov	r2, #47	; 0x2f
   143c0:	strb	r2, [r1, r0]!
   143c4:	add	r1, r1, #1
   143c8:	str	r1, [sp, #44]	; 0x2c
   143cc:	add	r1, r0, #1
   143d0:	ldr	r4, [sl, #12]
   143d4:	cmp	r4, #0
   143d8:	str	r1, [fp, #-36]	; 0xffffffdc
   143dc:	str	r7, [sp, #12]
   143e0:	beq	146f0 <__assert_fail@plt+0x379c>
   143e4:	ldr	r0, [sl, #48]	; 0x30
   143e8:	add	r0, r0, #1
   143ec:	str	r0, [sp, #24]
   143f0:	str	r6, [sp, #36]	; 0x24
   143f4:	ldr	r0, [r6, #36]	; 0x24
   143f8:	sub	r0, r0, r1
   143fc:	str	r0, [sp, #48]	; 0x30
   14400:	mov	r6, #0
   14404:	bl	10e4c <__errno_location@plt>
   14408:	str	r0, [sp, #40]	; 0x28
   1440c:	mov	r9, #0
   14410:	mov	r7, #0
   14414:	mov	r0, #0
   14418:	str	r0, [fp, #-44]	; 0xffffffd4
   1441c:	mov	r0, #0
   14420:	str	r0, [sp, #20]
   14424:	mov	r0, #0
   14428:	str	r0, [sp, #16]
   1442c:	str	sl, [sp, #32]
   14430:	ldr	r0, [sp, #40]	; 0x28
   14434:	str	r6, [r0]
   14438:	mov	r0, r4
   1443c:	bl	10ea0 <readdir64@plt>
   14440:	cmp	r0, #0
   14444:	beq	14920 <__assert_fail@plt+0x39cc>
   14448:	mov	r8, r0
   1444c:	mov	r5, r9
   14450:	ldr	r6, [sp, #36]	; 0x24
   14454:	ldrb	r0, [r6, #48]	; 0x30
   14458:	tst	r0, #32
   1445c:	bne	1448c <__assert_fail@plt+0x3538>
   14460:	ldrb	r0, [r8, #19]
   14464:	cmp	r0, #46	; 0x2e
   14468:	bne	1448c <__assert_fail@plt+0x3538>
   1446c:	ldrb	r0, [r8, #20]
   14470:	cmp	r0, #0
   14474:	beq	14690 <__assert_fail@plt+0x373c>
   14478:	cmp	r0, #46	; 0x2e
   1447c:	bne	1448c <__assert_fail@plt+0x3538>
   14480:	ldrb	r0, [r8, #21]
   14484:	cmp	r0, #0
   14488:	beq	14690 <__assert_fail@plt+0x373c>
   1448c:	add	r4, r8, #19
   14490:	mov	r0, r4
   14494:	bl	10e1c <strlen@plt>
   14498:	mov	sl, r0
   1449c:	mov	r0, r6
   144a0:	mov	r1, r4
   144a4:	mov	r2, sl
   144a8:	bl	1350c <__assert_fail@plt+0x25b8>
   144ac:	mov	r9, r0
   144b0:	cmp	r0, #0
   144b4:	beq	14704 <__assert_fail@plt+0x37b0>
   144b8:	ldr	r0, [sp, #48]	; 0x30
   144bc:	cmp	sl, r0
   144c0:	bcs	144d4 <__assert_fail@plt+0x3580>
   144c4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   144c8:	adds	r0, sl, r2
   144cc:	bcc	1453c <__assert_fail@plt+0x35e8>
   144d0:	b	1497c <__assert_fail@plt+0x3a28>
   144d4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   144d8:	add	r0, sl, r0
   144dc:	add	r1, r0, #1
   144e0:	ldr	r4, [r6, #24]
   144e4:	mov	r0, r6
   144e8:	bl	13490 <__assert_fail@plt+0x253c>
   144ec:	cmp	r0, #0
   144f0:	beq	14704 <__assert_fail@plt+0x37b0>
   144f4:	ldr	r0, [r6, #24]
   144f8:	cmp	r4, r0
   144fc:	beq	14524 <__assert_fail@plt+0x35d0>
   14500:	ldrb	r1, [r6, #48]	; 0x30
   14504:	tst	r1, #4
   14508:	ldr	r1, [sp, #44]	; 0x2c
   1450c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14510:	addne	r1, r0, r2
   14514:	str	r1, [sp, #44]	; 0x2c
   14518:	mov	r0, #1
   1451c:	str	r0, [sp, #16]
   14520:	b	14528 <__assert_fail@plt+0x35d4>
   14524:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14528:	ldr	r0, [r6, #36]	; 0x24
   1452c:	sub	r0, r0, r2
   14530:	str	r0, [sp, #48]	; 0x30
   14534:	adds	r0, sl, r2
   14538:	bcs	1497c <__assert_fail@plt+0x3a28>
   1453c:	ldr	r1, [sp, #24]
   14540:	str	r1, [r9, #48]	; 0x30
   14544:	ldr	r1, [r6]
   14548:	str	r0, [r9, #40]	; 0x28
   1454c:	str	r1, [r9, #4]
   14550:	ldrd	r0, [r8]
   14554:	strd	r0, [r9, #160]	; 0xa0
   14558:	ldrb	r0, [r6, #48]	; 0x30
   1455c:	tst	r0, #4
   14560:	bne	14570 <__assert_fail@plt+0x361c>
   14564:	add	r0, r9, #168	; 0xa8
   14568:	str	r0, [r9, #24]
   1456c:	b	1458c <__assert_fail@plt+0x3638>
   14570:	ldr	r0, [r9, #28]
   14574:	ldr	r2, [r9, #52]	; 0x34
   14578:	str	r0, [r9, #24]
   1457c:	add	r1, r9, #168	; 0xa8
   14580:	add	r2, r2, #1
   14584:	ldr	r0, [sp, #44]	; 0x2c
   14588:	bl	10d2c <memmove@plt>
   1458c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14590:	ldr	r0, [r0]
   14594:	cmp	r0, #0
   14598:	beq	145c4 <__assert_fail@plt+0x3670>
   1459c:	ldrb	r0, [r6, #49]	; 0x31
   145a0:	tst	r0, #4
   145a4:	bne	145c4 <__assert_fail@plt+0x3670>
   145a8:	mov	r0, r6
   145ac:	mov	r1, r9
   145b0:	mov	r2, #0
   145b4:	bl	135c0 <__assert_fail@plt+0x266c>
   145b8:	strh	r0, [r9, #56]	; 0x38
   145bc:	ldr	sl, [sp, #32]
   145c0:	b	14620 <__assert_fail@plt+0x36cc>
   145c4:	add	r0, r9, #64	; 0x40
   145c8:	ldr	r1, [r6, #48]	; 0x30
   145cc:	mov	r4, #0
   145d0:	tst	r1, #8
   145d4:	bne	145e0 <__assert_fail@plt+0x368c>
   145d8:	ldr	sl, [sp, #32]
   145dc:	b	14604 <__assert_fail@plt+0x36b0>
   145e0:	ldrb	r2, [r8, #18]
   145e4:	orr	r3, r2, #4
   145e8:	cmp	r3, #4
   145ec:	ldr	sl, [sp, #32]
   145f0:	beq	14604 <__assert_fail@plt+0x36b0>
   145f4:	eor	r2, r2, #10
   145f8:	and	r1, r1, #16
   145fc:	orrs	r4, r1, r2
   14600:	movwne	r4, #1
   14604:	mov	r1, #11
   14608:	strh	r1, [r9, #56]	; 0x38
   1460c:	ldrb	r1, [r8, #18]
   14610:	bl	14fb4 <__assert_fail@plt+0x4060>
   14614:	eor	r1, r4, #1
   14618:	mov	r0, r9
   1461c:	bl	13590 <__assert_fail@plt+0x263c>
   14620:	mov	r6, #0
   14624:	str	r6, [r9, #8]
   14628:	cmp	r5, #0
   1462c:	mov	r4, r9
   14630:	ldrne	r0, [fp, #-44]	; 0xffffffd4
   14634:	strne	r9, [r0, #8]
   14638:	movne	r4, r5
   1463c:	movw	r0, #10000	; 0x2710
   14640:	cmp	r7, r0
   14644:	bne	14668 <__assert_fail@plt+0x3714>
   14648:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1464c:	ldr	r0, [r0]
   14650:	cmp	r0, #0
   14654:	bne	14668 <__assert_fail@plt+0x3714>
   14658:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1465c:	mov	r0, sl
   14660:	bl	14fd8 <__assert_fail@plt+0x4084>
   14664:	str	r0, [sp, #20]
   14668:	add	r7, r7, #1
   1466c:	ldr	r0, [sp, #28]
   14670:	cmp	r0, r7
   14674:	bls	149c4 <__assert_fail@plt+0x3a70>
   14678:	str	r9, [fp, #-44]	; 0xffffffd4
   1467c:	mov	r9, r4
   14680:	ldr	r4, [sl, #12]
   14684:	cmp	r4, #0
   14688:	bne	14430 <__assert_fail@plt+0x34dc>
   1468c:	b	14970 <__assert_fail@plt+0x3a1c>
   14690:	ldr	sl, [sp, #32]
   14694:	mov	r9, r5
   14698:	mov	r6, #0
   1469c:	b	14680 <__assert_fail@plt+0x372c>
   146a0:	ldr	r3, [r6, #48]	; 0x30
   146a4:	and	r1, r3, #516	; 0x204
   146a8:	mvn	r0, #99	; 0x63
   146ac:	cmp	r1, #512	; 0x200
   146b0:	ldreq	r0, [r6, #32]
   146b4:	ldr	r1, [sl, #24]
   146b8:	mov	r2, #0
   146bc:	tst	r3, #16
   146c0:	beq	14758 <__assert_fail@plt+0x3804>
   146c4:	tst	r3, #1
   146c8:	bne	1474c <__assert_fail@plt+0x37f8>
   146cc:	mov	r2, #32768	; 0x8000
   146d0:	b	14758 <__assert_fail@plt+0x3804>
   146d4:	ldr	r0, [sl, #12]
   146d8:	bl	10f3c <closedir@plt>
   146dc:	mov	r9, #0
   146e0:	str	r9, [sl, #12]
   146e4:	cmp	r4, #3
   146e8:	beq	1479c <__assert_fail@plt+0x3848>
   146ec:	b	14b34 <__assert_fail@plt+0x3be0>
   146f0:	mov	r7, #0
   146f4:	mov	r0, #0
   146f8:	str	r0, [sp, #20]
   146fc:	ldr	r4, [sp, #8]
   14700:	b	149e4 <__assert_fail@plt+0x3a90>
   14704:	ldr	r7, [sp, #40]	; 0x28
   14708:	ldr	r4, [r7]
   1470c:	mov	r0, r9
   14710:	bl	13114 <__assert_fail@plt+0x21c0>
   14714:	mov	r0, r5
   14718:	bl	138c0 <__assert_fail@plt+0x296c>
   1471c:	ldr	r5, [sp, #32]
   14720:	ldr	r0, [r5, #12]
   14724:	bl	10f3c <closedir@plt>
   14728:	mov	r0, #7
   1472c:	strh	r0, [r5, #56]	; 0x38
   14730:	mov	r9, #0
   14734:	str	r9, [r5, #12]
   14738:	ldr	r0, [r6, #48]	; 0x30
   1473c:	orr	r0, r0, #8192	; 0x2000
   14740:	str	r0, [r6, #48]	; 0x30
   14744:	str	r4, [r7]
   14748:	b	14b34 <__assert_fail@plt+0x3be0>
   1474c:	ldr	r3, [sl, #48]	; 0x30
   14750:	cmp	r3, #0
   14754:	movne	r2, #32768	; 0x8000
   14758:	sub	r3, fp, #32
   1475c:	bl	16f88 <__assert_fail@plt+0x6034>
   14760:	str	r0, [sl, #12]
   14764:	cmp	r0, #0
   14768:	beq	14790 <__assert_fail@plt+0x383c>
   1476c:	ldrh	r0, [sl, #56]	; 0x38
   14770:	cmp	r0, #11
   14774:	bne	147b4 <__assert_fail@plt+0x3860>
   14778:	mov	r0, r6
   1477c:	mov	r1, sl
   14780:	mov	r2, #0
   14784:	bl	135c0 <__assert_fail@plt+0x266c>
   14788:	strh	r0, [sl, #56]	; 0x38
   1478c:	b	147f4 <__assert_fail@plt+0x38a0>
   14790:	mov	r9, #0
   14794:	cmp	r4, #3
   14798:	bne	14b34 <__assert_fail@plt+0x3be0>
   1479c:	mov	r0, #4
   147a0:	strh	r0, [sl, #56]	; 0x38
   147a4:	bl	10e4c <__errno_location@plt>
   147a8:	ldr	r0, [r0]
   147ac:	str	r0, [sl, #32]
   147b0:	b	14b34 <__assert_fail@plt+0x3be0>
   147b4:	ldrb	r0, [r6, #49]	; 0x31
   147b8:	tst	r0, #1
   147bc:	beq	147f4 <__assert_fail@plt+0x38a0>
   147c0:	mov	r0, r6
   147c4:	mov	r1, sl
   147c8:	bl	14060 <__assert_fail@plt+0x310c>
   147cc:	mov	r9, #0
   147d0:	mov	r0, r6
   147d4:	mov	r1, sl
   147d8:	mov	r2, #0
   147dc:	bl	135c0 <__assert_fail@plt+0x266c>
   147e0:	mov	r0, r6
   147e4:	mov	r1, sl
   147e8:	bl	14c24 <__assert_fail@plt+0x3cd0>
   147ec:	cmp	r0, #0
   147f0:	beq	14af4 <__assert_fail@plt+0x3ba0>
   147f4:	mov	r1, r6
   147f8:	ldr	r0, [r1, #44]!	; 0x2c
   147fc:	str	r1, [fp, #-40]	; 0xffffffd8
   14800:	mvn	r1, #0
   14804:	cmp	r0, #0
   14808:	movweq	r1, #34464	; 0x86a0
   1480c:	movteq	r1, #1
   14810:	str	r1, [sp, #28]
   14814:	mov	r5, #0
   14818:	cmp	r4, #2
   1481c:	beq	14858 <__assert_fail@plt+0x3904>
   14820:	ldr	r0, [r6, #48]	; 0x30
   14824:	and	r1, r0, #56	; 0x38
   14828:	mov	r0, #0
   1482c:	cmp	r1, #24
   14830:	bne	14854 <__assert_fail@plt+0x3900>
   14834:	ldr	r1, [sl, #84]	; 0x54
   14838:	cmp	r1, #2
   1483c:	bne	14854 <__assert_fail@plt+0x3900>
   14840:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14844:	mov	r0, sl
   14848:	bl	14f4c <__assert_fail@plt+0x3ff8>
   1484c:	cmp	r0, #0
   14850:	movwne	r0, #1
   14854:	eor	r5, r0, #1
   14858:	cmp	r4, #3
   1485c:	beq	14870 <__assert_fail@plt+0x391c>
   14860:	cmp	r5, #0
   14864:	bne	14870 <__assert_fail@plt+0x391c>
   14868:	str	r5, [sp, #4]
   1486c:	b	14384 <__assert_fail@plt+0x3430>
   14870:	ldrb	r0, [r6, #49]	; 0x31
   14874:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14878:	tst	r0, #2
   1487c:	beq	14898 <__assert_fail@plt+0x3944>
   14880:	mov	r0, r2
   14884:	movw	r1, #1030	; 0x406
   14888:	mov	r2, #3
   1488c:	bl	17364 <__assert_fail@plt+0x6410>
   14890:	mov	r2, r0
   14894:	str	r0, [fp, #-32]	; 0xffffffe0
   14898:	cmp	r2, #0
   1489c:	bmi	148b8 <__assert_fail@plt+0x3964>
   148a0:	mov	r0, r6
   148a4:	mov	r1, sl
   148a8:	mov	r3, #0
   148ac:	bl	1413c <__assert_fail@plt+0x31e8>
   148b0:	cmp	r0, #0
   148b4:	beq	1437c <__assert_fail@plt+0x3428>
   148b8:	subs	r0, r4, #3
   148bc:	movwne	r0, #1
   148c0:	eor	r1, r5, #1
   148c4:	orrs	r0, r0, r1
   148c8:	bne	148d8 <__assert_fail@plt+0x3984>
   148cc:	bl	10e4c <__errno_location@plt>
   148d0:	ldr	r0, [r0]
   148d4:	str	r0, [sl, #32]
   148d8:	ldrh	r0, [sl, #58]	; 0x3a
   148dc:	orr	r0, r0, #1
   148e0:	strh	r0, [sl, #58]	; 0x3a
   148e4:	ldr	r0, [sl, #12]
   148e8:	bl	10f3c <closedir@plt>
   148ec:	mov	r5, #0
   148f0:	str	r5, [sl, #12]
   148f4:	ldrb	r0, [r6, #49]	; 0x31
   148f8:	tst	r0, #2
   148fc:	beq	14910 <__assert_fail@plt+0x39bc>
   14900:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14904:	cmp	r0, #0
   14908:	bmi	14910 <__assert_fail@plt+0x39bc>
   1490c:	bl	10f24 <close@plt>
   14910:	mov	r0, #0
   14914:	str	r0, [sp, #4]
   14918:	str	r5, [sl, #12]
   1491c:	b	14384 <__assert_fail@plt+0x3430>
   14920:	ldr	r0, [sp, #40]	; 0x28
   14924:	ldr	r0, [r0]
   14928:	cmp	r0, #0
   1492c:	beq	14948 <__assert_fail@plt+0x39f4>
   14930:	str	r0, [sl, #32]
   14934:	ldr	r0, [sp, #12]
   14938:	orrs	r0, r0, r7
   1493c:	mov	r0, #4
   14940:	movwne	r0, #7
   14944:	strh	r0, [sl, #56]	; 0x38
   14948:	ldr	r0, [sl, #12]
   1494c:	cmp	r0, #0
   14950:	ldr	r4, [sp, #8]
   14954:	beq	14964 <__assert_fail@plt+0x3a10>
   14958:	bl	10f3c <closedir@plt>
   1495c:	mov	r0, #0
   14960:	str	r0, [sl, #12]
   14964:	ldr	r0, [sp, #16]
   14968:	tst	r0, #1
   1496c:	b	149d4 <__assert_fail@plt+0x3a80>
   14970:	ldr	r0, [sp, #16]
   14974:	tst	r0, #1
   14978:	b	149d0 <__assert_fail@plt+0x3a7c>
   1497c:	mov	r0, r9
   14980:	bl	13114 <__assert_fail@plt+0x21c0>
   14984:	mov	r0, r5
   14988:	bl	138c0 <__assert_fail@plt+0x296c>
   1498c:	ldr	r4, [sp, #32]
   14990:	ldr	r0, [r4, #12]
   14994:	bl	10f3c <closedir@plt>
   14998:	mov	r0, #7
   1499c:	strh	r0, [r4, #56]	; 0x38
   149a0:	mov	r9, #0
   149a4:	str	r9, [r4, #12]
   149a8:	ldr	r0, [r6, #48]	; 0x30
   149ac:	orr	r0, r0, #8192	; 0x2000
   149b0:	str	r0, [r6, #48]	; 0x30
   149b4:	mov	r0, #36	; 0x24
   149b8:	ldr	r1, [sp, #40]	; 0x28
   149bc:	str	r0, [r1]
   149c0:	b	14b34 <__assert_fail@plt+0x3be0>
   149c4:	ldr	r0, [sp, #16]
   149c8:	tst	r0, #1
   149cc:	mov	r9, r4
   149d0:	ldr	r4, [sp, #8]
   149d4:	ldr	r6, [sp, #36]	; 0x24
   149d8:	movne	r0, r6
   149dc:	movne	r1, r9
   149e0:	blne	1501c <__assert_fail@plt+0x40c8>
   149e4:	ldrb	r0, [r6, #48]	; 0x30
   149e8:	tst	r0, #4
   149ec:	beq	14a18 <__assert_fail@plt+0x3ac4>
   149f0:	ldr	r0, [r6, #36]	; 0x24
   149f4:	ldr	r2, [sp, #44]	; 0x2c
   149f8:	sub	r1, r2, #1
   149fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14a00:	cmp	r3, r0
   14a04:	moveq	r2, r1
   14a08:	cmp	r7, #0
   14a0c:	moveq	r2, r1
   14a10:	mov	r0, #0
   14a14:	strb	r0, [r2]
   14a18:	ldr	r0, [sp, #12]
   14a1c:	cmp	r0, #0
   14a20:	ldreq	r0, [sp, #4]
   14a24:	eorseq	r0, r0, #1
   14a28:	beq	14a54 <__assert_fail@plt+0x3b00>
   14a2c:	cmp	r7, #0
   14a30:	bne	14a90 <__assert_fail@plt+0x3b3c>
   14a34:	cmp	r4, #3
   14a38:	bne	14b28 <__assert_fail@plt+0x3bd4>
   14a3c:	ldrh	r0, [sl, #56]	; 0x38
   14a40:	cmp	r0, #4
   14a44:	cmpne	r0, #7
   14a48:	movne	r0, #6
   14a4c:	strhne	r0, [sl, #56]	; 0x38
   14a50:	b	14b28 <__assert_fail@plt+0x3bd4>
   14a54:	cmp	r4, #1
   14a58:	cmpne	r7, #0
   14a5c:	bne	14a90 <__assert_fail@plt+0x3b3c>
   14a60:	ldr	r0, [sl, #48]	; 0x30
   14a64:	cmp	r0, #0
   14a68:	beq	14b04 <__assert_fail@plt+0x3bb0>
   14a6c:	ldr	r1, [sl, #4]
   14a70:	movw	r3, #31162	; 0x79ba
   14a74:	movt	r3, #1
   14a78:	mov	r0, r6
   14a7c:	mvn	r2, #0
   14a80:	bl	1413c <__assert_fail@plt+0x31e8>
   14a84:	cmp	r0, #0
   14a88:	bne	14b14 <__assert_fail@plt+0x3bc0>
   14a8c:	b	14a2c <__assert_fail@plt+0x3ad8>
   14a90:	ldr	r0, [sp, #20]
   14a94:	tst	r0, #1
   14a98:	beq	14ac4 <__assert_fail@plt+0x3b70>
   14a9c:	movw	r0, #20668	; 0x50bc
   14aa0:	movt	r0, #1
   14aa4:	str	r0, [r6, #44]	; 0x2c
   14aa8:	mov	r0, r6
   14aac:	mov	r1, r9
   14ab0:	mov	r2, r7
   14ab4:	bl	13734 <__assert_fail@plt+0x27e0>
   14ab8:	mov	r9, r0
   14abc:	mov	r0, #0
   14ac0:	str	r0, [r6, #44]	; 0x2c
   14ac4:	cmp	r7, #2
   14ac8:	bcc	14b34 <__assert_fail@plt+0x3be0>
   14acc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14ad0:	ldr	r0, [r0]
   14ad4:	cmp	r0, #0
   14ad8:	beq	14b34 <__assert_fail@plt+0x3be0>
   14adc:	mov	r0, r6
   14ae0:	mov	r1, r9
   14ae4:	mov	r2, r7
   14ae8:	bl	13734 <__assert_fail@plt+0x27e0>
   14aec:	mov	r9, r0
   14af0:	b	14b34 <__assert_fail@plt+0x3be0>
   14af4:	bl	10e4c <__errno_location@plt>
   14af8:	mov	r1, #12
   14afc:	str	r1, [r0]
   14b00:	b	14b34 <__assert_fail@plt+0x3be0>
   14b04:	mov	r0, r6
   14b08:	bl	14b40 <__assert_fail@plt+0x3bec>
   14b0c:	cmp	r0, #0
   14b10:	beq	14a2c <__assert_fail@plt+0x3ad8>
   14b14:	mov	r0, #7
   14b18:	strh	r0, [sl, #56]	; 0x38
   14b1c:	ldr	r0, [r6, #48]	; 0x30
   14b20:	orr	r0, r0, #8192	; 0x2000
   14b24:	str	r0, [r6, #48]	; 0x30
   14b28:	mov	r0, r9
   14b2c:	bl	138c0 <__assert_fail@plt+0x296c>
   14b30:	mov	r9, #0
   14b34:	mov	r0, r9
   14b38:	sub	sp, fp, #28
   14b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b40:	push	{r4, r5, fp, lr}
   14b44:	add	fp, sp, #8
   14b48:	mov	r4, r0
   14b4c:	ldr	r0, [r0, #48]	; 0x30
   14b50:	mov	r5, #0
   14b54:	tst	r0, #4
   14b58:	bne	14b8c <__assert_fail@plt+0x3c38>
   14b5c:	tst	r0, #512	; 0x200
   14b60:	bne	14b7c <__assert_fail@plt+0x3c28>
   14b64:	ldr	r0, [r4, #28]
   14b68:	bl	10edc <fchdir@plt>
   14b6c:	mov	r5, r0
   14b70:	cmp	r0, #0
   14b74:	movwne	r5, #1
   14b78:	b	14b8c <__assert_fail@plt+0x3c38>
   14b7c:	mov	r0, r4
   14b80:	mvn	r1, #99	; 0x63
   14b84:	mov	r2, #1
   14b88:	bl	14ce4 <__assert_fail@plt+0x3d90>
   14b8c:	add	r0, r4, #60	; 0x3c
   14b90:	bl	13a38 <__assert_fail@plt+0x2ae4>
   14b94:	mov	r0, r5
   14b98:	pop	{r4, r5, fp, pc}
   14b9c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ba0:	add	fp, sp, #24
   14ba4:	mov	r4, r1
   14ba8:	mov	r8, r0
   14bac:	ldr	r1, [r1, #52]	; 0x34
   14bb0:	str	r1, [r4, #40]	; 0x28
   14bb4:	ldr	r0, [r0, #24]
   14bb8:	add	r6, r4, #168	; 0xa8
   14bbc:	add	r2, r1, #1
   14bc0:	mov	r1, r6
   14bc4:	bl	10d2c <memmove@plt>
   14bc8:	mov	r0, r6
   14bcc:	mov	r1, #47	; 0x2f
   14bd0:	bl	10e88 <strrchr@plt>
   14bd4:	cmp	r0, #0
   14bd8:	beq	14c14 <__assert_fail@plt+0x3cc0>
   14bdc:	cmp	r0, r6
   14be0:	bne	14bf0 <__assert_fail@plt+0x3c9c>
   14be4:	ldrb	r1, [r0, #1]
   14be8:	cmp	r1, #0
   14bec:	beq	14c14 <__assert_fail@plt+0x3cc0>
   14bf0:	add	r7, r0, #1
   14bf4:	mov	r0, r7
   14bf8:	bl	10e1c <strlen@plt>
   14bfc:	mov	r5, r0
   14c00:	add	r2, r0, #1
   14c04:	mov	r0, r6
   14c08:	mov	r1, r7
   14c0c:	bl	10d2c <memmove@plt>
   14c10:	str	r5, [r4, #52]	; 0x34
   14c14:	ldr	r0, [r8, #24]
   14c18:	str	r0, [r4, #24]
   14c1c:	str	r0, [r4, #28]
   14c20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c24:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14c28:	add	fp, sp, #24
   14c2c:	mov	r4, r1
   14c30:	mov	r6, r0
   14c34:	add	r5, r1, #64	; 0x40
   14c38:	ldrh	r0, [r0, #48]	; 0x30
   14c3c:	movw	r1, #258	; 0x102
   14c40:	tst	r0, r1
   14c44:	beq	14cbc <__assert_fail@plt+0x3d68>
   14c48:	mov	r0, #24
   14c4c:	bl	17084 <__assert_fail@plt+0x6130>
   14c50:	mov	r8, #0
   14c54:	cmp	r0, #0
   14c58:	beq	14cdc <__assert_fail@plt+0x3d88>
   14c5c:	mov	r7, r0
   14c60:	add	r0, r4, #160	; 0xa0
   14c64:	ldrd	r2, [r5]
   14c68:	stm	r7, {r2, r3}
   14c6c:	ldrd	r0, [r0]
   14c70:	add	r2, r7, #8
   14c74:	stm	r2, {r0, r1, r4}
   14c78:	ldr	r0, [r6, #56]	; 0x38
   14c7c:	mov	r1, r7
   14c80:	bl	16be8 <__assert_fail@plt+0x5c94>
   14c84:	cmp	r0, r7
   14c88:	beq	14cb0 <__assert_fail@plt+0x3d5c>
   14c8c:	mov	r5, r0
   14c90:	mov	r0, r7
   14c94:	bl	13114 <__assert_fail@plt+0x21c0>
   14c98:	cmp	r5, #0
   14c9c:	beq	14cdc <__assert_fail@plt+0x3d88>
   14ca0:	ldr	r0, [r5, #16]
   14ca4:	mov	r1, #2
   14ca8:	strh	r1, [r4, #56]	; 0x38
   14cac:	str	r0, [r4]
   14cb0:	mov	r8, #1
   14cb4:	mov	r0, r8
   14cb8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14cbc:	ldr	r0, [r6, #56]	; 0x38
   14cc0:	mov	r1, r5
   14cc4:	bl	1726c <__assert_fail@plt+0x6318>
   14cc8:	mov	r8, #1
   14ccc:	cmp	r0, #0
   14cd0:	movne	r0, #2
   14cd4:	strhne	r0, [r4, #56]	; 0x38
   14cd8:	strne	r4, [r4]
   14cdc:	mov	r0, r8
   14ce0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ce4:	push	{r4, r5, fp, lr}
   14ce8:	add	fp, sp, #8
   14cec:	mov	r4, r1
   14cf0:	mov	r5, r0
   14cf4:	ldr	r1, [r0, #32]
   14cf8:	cmp	r1, r4
   14cfc:	bne	14d08 <__assert_fail@plt+0x3db4>
   14d00:	cmn	r1, #100	; 0x64
   14d04:	bne	14d48 <__assert_fail@plt+0x3df4>
   14d08:	cmp	r2, #0
   14d0c:	beq	14d24 <__assert_fail@plt+0x3dd0>
   14d10:	add	r0, r5, #60	; 0x3c
   14d14:	bl	16e28 <__assert_fail@plt+0x5ed4>
   14d18:	cmp	r0, #0
   14d1c:	bpl	14d3c <__assert_fail@plt+0x3de8>
   14d20:	b	14d40 <__assert_fail@plt+0x3dec>
   14d24:	cmp	r1, #0
   14d28:	bmi	14d40 <__assert_fail@plt+0x3dec>
   14d2c:	ldr	r0, [r5, #48]	; 0x30
   14d30:	ands	r0, r0, #4
   14d34:	bne	14d40 <__assert_fail@plt+0x3dec>
   14d38:	mov	r0, r1
   14d3c:	bl	10f24 <close@plt>
   14d40:	str	r4, [r5, #32]
   14d44:	pop	{r4, r5, fp, pc}
   14d48:	bl	10f18 <abort@plt>
   14d4c:	push	{fp, lr}
   14d50:	mov	fp, sp
   14d54:	cmp	r2, #5
   14d58:	bcc	14d70 <__assert_fail@plt+0x3e1c>
   14d5c:	bl	10e4c <__errno_location@plt>
   14d60:	mov	r1, #22
   14d64:	str	r1, [r0]
   14d68:	mov	r0, #1
   14d6c:	pop	{fp, pc}
   14d70:	strh	r2, [r1, #60]	; 0x3c
   14d74:	mov	r0, #0
   14d78:	pop	{fp, pc}
   14d7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d80:	add	fp, sp, #28
   14d84:	sub	sp, sp, #4
   14d88:	mov	r5, r0
   14d8c:	mvn	r0, #4096	; 0x1000
   14d90:	tst	r1, r0
   14d94:	beq	14dac <__assert_fail@plt+0x3e58>
   14d98:	bl	10e4c <__errno_location@plt>
   14d9c:	mov	r1, #22
   14da0:	str	r1, [r0]
   14da4:	mov	r4, #0
   14da8:	b	14ea8 <__assert_fail@plt+0x3f54>
   14dac:	mov	r7, r1
   14db0:	ldr	r6, [r5]
   14db4:	bl	10e4c <__errno_location@plt>
   14db8:	mov	sl, r0
   14dbc:	mov	r4, #0
   14dc0:	str	r4, [r0]
   14dc4:	ldrb	r0, [r5, #49]	; 0x31
   14dc8:	tst	r0, #32
   14dcc:	bne	14ea8 <__assert_fail@plt+0x3f54>
   14dd0:	ldrh	r0, [r6, #56]	; 0x38
   14dd4:	cmp	r0, #1
   14dd8:	beq	14de8 <__assert_fail@plt+0x3e94>
   14ddc:	cmp	r0, #9
   14de0:	ldreq	r4, [r6, #8]
   14de4:	b	14ea8 <__assert_fail@plt+0x3f54>
   14de8:	ldr	r0, [r5, #4]
   14dec:	cmp	r0, #0
   14df0:	blne	138c0 <__assert_fail@plt+0x296c>
   14df4:	mov	r9, #1
   14df8:	cmp	r7, #4096	; 0x1000
   14dfc:	bne	14e10 <__assert_fail@plt+0x3ebc>
   14e00:	ldr	r0, [r5, #48]	; 0x30
   14e04:	orr	r0, r0, #4096	; 0x1000
   14e08:	str	r0, [r5, #48]	; 0x30
   14e0c:	mov	r9, #2
   14e10:	ldr	r0, [r6, #48]	; 0x30
   14e14:	cmp	r0, #0
   14e18:	bne	14e94 <__assert_fail@plt+0x3f40>
   14e1c:	ldr	r0, [r6, #24]
   14e20:	ldrb	r0, [r0]
   14e24:	cmp	r0, #47	; 0x2f
   14e28:	beq	14e94 <__assert_fail@plt+0x3f40>
   14e2c:	ldrb	r0, [r5, #48]	; 0x30
   14e30:	tst	r0, #4
   14e34:	bne	14e94 <__assert_fail@plt+0x3f40>
   14e38:	movw	r1, #31163	; 0x79bb
   14e3c:	movt	r1, #1
   14e40:	mov	r0, r5
   14e44:	bl	13890 <__assert_fail@plt+0x293c>
   14e48:	cmn	r0, #1
   14e4c:	ble	14eb4 <__assert_fail@plt+0x3f60>
   14e50:	mov	r8, r0
   14e54:	mov	r0, r5
   14e58:	mov	r1, r9
   14e5c:	bl	14324 <__assert_fail@plt+0x33d0>
   14e60:	str	r0, [r5, #4]
   14e64:	ldrb	r0, [r5, #49]	; 0x31
   14e68:	tst	r0, #2
   14e6c:	bne	14ec0 <__assert_fail@plt+0x3f6c>
   14e70:	mov	r0, r8
   14e74:	bl	10edc <fchdir@plt>
   14e78:	cmp	r0, #0
   14e7c:	beq	14ed4 <__assert_fail@plt+0x3f80>
   14e80:	ldr	r5, [sl]
   14e84:	mov	r0, r8
   14e88:	bl	10f24 <close@plt>
   14e8c:	str	r5, [sl]
   14e90:	b	14ea8 <__assert_fail@plt+0x3f54>
   14e94:	mov	r0, r5
   14e98:	mov	r1, r9
   14e9c:	bl	14324 <__assert_fail@plt+0x33d0>
   14ea0:	mov	r4, r0
   14ea4:	str	r0, [r5, #4]
   14ea8:	mov	r0, r4
   14eac:	sub	sp, fp, #28
   14eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14eb4:	mov	r4, #0
   14eb8:	str	r4, [r5, #4]
   14ebc:	b	14ea8 <__assert_fail@plt+0x3f54>
   14ec0:	mov	r0, r5
   14ec4:	mov	r1, r8
   14ec8:	mov	r2, #1
   14ecc:	bl	14ce4 <__assert_fail@plt+0x3d90>
   14ed0:	b	14edc <__assert_fail@plt+0x3f88>
   14ed4:	mov	r0, r8
   14ed8:	bl	10f24 <close@plt>
   14edc:	ldr	r4, [r5, #4]
   14ee0:	b	14ea8 <__assert_fail@plt+0x3f54>
   14ee4:	push	{fp, lr}
   14ee8:	mov	fp, sp
   14eec:	mov	r2, r1
   14ef0:	ldrd	r0, [r0, #8]
   14ef4:	mov	r3, #0
   14ef8:	bl	17664 <__assert_fail@plt+0x6710>
   14efc:	mov	r0, r2
   14f00:	pop	{fp, pc}
   14f04:	push	{r4, r5, fp, lr}
   14f08:	add	fp, sp, #8
   14f0c:	ldrd	r2, [r1, #8]
   14f10:	ldrd	r4, [r0, #8]
   14f14:	eor	r3, r5, r3
   14f18:	eor	r2, r4, r2
   14f1c:	orrs	r2, r2, r3
   14f20:	mov	r2, #0
   14f24:	bne	14f44 <__assert_fail@plt+0x3ff0>
   14f28:	ldrd	r2, [r1]
   14f2c:	ldrd	r0, [r0]
   14f30:	eor	r1, r1, r3
   14f34:	eor	r0, r0, r2
   14f38:	orr	r0, r0, r1
   14f3c:	clz	r0, r0
   14f40:	lsr	r2, r0, #5
   14f44:	mov	r0, r2
   14f48:	pop	{r4, r5, fp, pc}
   14f4c:	push	{fp, lr}
   14f50:	mov	fp, sp
   14f54:	bl	150f4 <__assert_fail@plt+0x41a0>
   14f58:	mov	r1, r0
   14f5c:	mov	r0, #0
   14f60:	movw	r2, #26984	; 0x6968
   14f64:	cmp	r1, r2
   14f68:	ble	14f98 <__assert_fail@plt+0x4044>
   14f6c:	movw	r2, #26985	; 0x6969
   14f70:	cmp	r1, r2
   14f74:	movwne	r2, #40864	; 0x9fa0
   14f78:	cmpne	r1, r2
   14f7c:	beq	14fb0 <__assert_fail@plt+0x405c>
   14f80:	movw	r2, #16719	; 0x414f
   14f84:	movt	r2, #21318	; 0x5346
   14f88:	cmp	r1, r2
   14f8c:	popeq	{fp, pc}
   14f90:	mov	r0, #1
   14f94:	pop	{fp, pc}
   14f98:	movw	r2, #19778	; 0x4d42
   14f9c:	movt	r2, #65363	; 0xff53
   14fa0:	cmp	r1, r2
   14fa4:	beq	14fb0 <__assert_fail@plt+0x405c>
   14fa8:	cmp	r1, #0
   14fac:	movne	r0, #1
   14fb0:	pop	{fp, pc}
   14fb4:	sub	r2, r1, #1
   14fb8:	mov	r1, #0
   14fbc:	cmp	r2, #11
   14fc0:	bhi	14fd0 <__assert_fail@plt+0x407c>
   14fc4:	movw	r1, #31168	; 0x79c0
   14fc8:	movt	r1, #1
   14fcc:	ldr	r1, [r1, r2, lsl #2]
   14fd0:	str	r1, [r0, #16]
   14fd4:	bx	lr
   14fd8:	push	{fp, lr}
   14fdc:	mov	fp, sp
   14fe0:	bl	150f4 <__assert_fail@plt+0x41a0>
   14fe4:	mov	r1, r0
   14fe8:	mov	r0, #0
   14fec:	movw	r2, #19778	; 0x4d42
   14ff0:	movt	r2, #65363	; 0xff53
   14ff4:	cmp	r1, r2
   14ff8:	movwne	r2, #26985	; 0x6969
   14ffc:	cmpne	r1, r2
   15000:	bne	15008 <__assert_fail@plt+0x40b4>
   15004:	pop	{fp, pc}
   15008:	movw	r2, #6548	; 0x1994
   1500c:	movt	r2, #258	; 0x102
   15010:	cmp	r1, r2
   15014:	movne	r0, #1
   15018:	pop	{fp, pc}
   1501c:	ldr	r2, [r0, #4]
   15020:	ldr	ip, [r0, #24]
   15024:	cmp	r2, #0
   15028:	bne	15040 <__assert_fail@plt+0x40ec>
   1502c:	b	15064 <__assert_fail@plt+0x4110>
   15030:	str	ip, [r2, #28]
   15034:	ldr	r2, [r2, #8]
   15038:	cmp	r2, #0
   1503c:	beq	15064 <__assert_fail@plt+0x4110>
   15040:	ldr	r3, [r2, #24]
   15044:	add	r0, r2, #168	; 0xa8
   15048:	cmp	r3, r0
   1504c:	beq	15030 <__assert_fail@plt+0x40dc>
   15050:	ldr	r0, [r2, #28]
   15054:	sub	r0, r3, r0
   15058:	add	r0, ip, r0
   1505c:	str	r0, [r2, #24]
   15060:	b	15030 <__assert_fail@plt+0x40dc>
   15064:	ldr	r2, [r1, #48]	; 0x30
   15068:	cmp	r2, #0
   1506c:	bxmi	lr
   15070:	b	15094 <__assert_fail@plt+0x4140>
   15074:	str	ip, [r1, #28]
   15078:	ldr	r2, [r1, #8]
   1507c:	cmp	r2, #0
   15080:	ldreq	r2, [r1, #4]
   15084:	ldr	r0, [r2, #48]	; 0x30
   15088:	cmn	r0, #1
   1508c:	mov	r1, r2
   15090:	ble	150b8 <__assert_fail@plt+0x4164>
   15094:	ldr	r2, [r1, #24]
   15098:	add	r0, r1, #168	; 0xa8
   1509c:	cmp	r2, r0
   150a0:	beq	15074 <__assert_fail@plt+0x4120>
   150a4:	ldr	r0, [r1, #28]
   150a8:	sub	r0, r2, r0
   150ac:	add	r0, ip, r0
   150b0:	str	r0, [r1, #24]
   150b4:	b	15074 <__assert_fail@plt+0x4120>
   150b8:	bx	lr
   150bc:	push	{r4, r5, fp, lr}
   150c0:	add	fp, sp, #8
   150c4:	ldr	r0, [r0]
   150c8:	ldrd	r2, [r0, #160]	; 0xa0
   150cc:	ldr	r0, [r1]
   150d0:	ldrd	r4, [r0, #160]	; 0xa0
   150d4:	mov	r0, #0
   150d8:	subs	r1, r4, r2
   150dc:	sbcs	r1, r5, r3
   150e0:	movwcc	r0, #1
   150e4:	subs	r1, r2, r4
   150e8:	sbcs	r1, r3, r5
   150ec:	subcc	r0, r0, #1
   150f0:	pop	{r4, r5, fp, pc}
   150f4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   150f8:	add	fp, sp, #24
   150fc:	sub	sp, sp, #96	; 0x60
   15100:	mov	r4, r0
   15104:	ldr	r7, [r0, #44]	; 0x2c
   15108:	ldrb	r0, [r7, #49]	; 0x31
   1510c:	mov	r5, #0
   15110:	tst	r0, #2
   15114:	beq	15210 <__assert_fail@plt+0x42bc>
   15118:	mov	r9, r1
   1511c:	ldr	r6, [r7, #52]	; 0x34
   15120:	cmp	r6, #0
   15124:	bne	15164 <__assert_fail@plt+0x4210>
   15128:	movw	r0, #12564	; 0x3114
   1512c:	movt	r0, #1
   15130:	str	r0, [sp]
   15134:	mov	r8, #0
   15138:	movw	r2, #21020	; 0x521c
   1513c:	movt	r2, #1
   15140:	movw	r3, #21052	; 0x523c
   15144:	movt	r3, #1
   15148:	mov	r0, #13
   1514c:	mov	r1, #0
   15150:	bl	1634c <__assert_fail@plt+0x53f8>
   15154:	mov	r6, r0
   15158:	str	r0, [r7, #52]	; 0x34
   1515c:	cmp	r0, #0
   15160:	beq	1519c <__assert_fail@plt+0x4248>
   15164:	ldrd	r0, [r4, #64]	; 0x40
   15168:	str	r1, [sp, #12]
   1516c:	str	r0, [sp, #8]
   15170:	add	r1, sp, #8
   15174:	mov	r0, r6
   15178:	bl	160a0 <__assert_fail@plt+0x514c>
   1517c:	cmp	r0, #0
   15180:	beq	1518c <__assert_fail@plt+0x4238>
   15184:	ldr	r5, [r0, #8]
   15188:	b	15210 <__assert_fail@plt+0x42bc>
   1518c:	mov	r8, #1
   15190:	cmp	r9, #0
   15194:	bpl	151a8 <__assert_fail@plt+0x4254>
   15198:	b	15210 <__assert_fail@plt+0x42bc>
   1519c:	mov	r6, #0
   151a0:	cmp	r9, #0
   151a4:	bmi	15210 <__assert_fail@plt+0x42bc>
   151a8:	add	r1, sp, #8
   151ac:	mov	r0, r9
   151b0:	bl	10cd8 <fstatfs64@plt>
   151b4:	cmp	r0, #0
   151b8:	bne	15210 <__assert_fail@plt+0x42bc>
   151bc:	cmp	r8, #0
   151c0:	beq	1520c <__assert_fail@plt+0x42b8>
   151c4:	mov	r0, #16
   151c8:	bl	17084 <__assert_fail@plt+0x6130>
   151cc:	cmp	r0, #0
   151d0:	beq	1520c <__assert_fail@plt+0x42b8>
   151d4:	mov	r5, r0
   151d8:	ldrd	r0, [r4, #64]	; 0x40
   151dc:	ldr	r2, [sp, #8]
   151e0:	stm	r5, {r0, r1, r2}
   151e4:	mov	r0, r6
   151e8:	mov	r1, r5
   151ec:	bl	16be8 <__assert_fail@plt+0x5c94>
   151f0:	cmp	r0, #0
   151f4:	beq	15204 <__assert_fail@plt+0x42b0>
   151f8:	cmp	r0, r5
   151fc:	beq	1520c <__assert_fail@plt+0x42b8>
   15200:	bl	10f18 <abort@plt>
   15204:	mov	r0, r5
   15208:	bl	13114 <__assert_fail@plt+0x21c0>
   1520c:	ldr	r5, [sp, #8]
   15210:	mov	r0, r5
   15214:	sub	sp, fp, #24
   15218:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1521c:	push	{fp, lr}
   15220:	mov	fp, sp
   15224:	mov	r2, r1
   15228:	ldrd	r0, [r0]
   1522c:	mov	r3, #0
   15230:	bl	17664 <__assert_fail@plt+0x6710>
   15234:	mov	r0, r2
   15238:	pop	{fp, pc}
   1523c:	ldrd	r2, [r1]
   15240:	ldrd	r0, [r0]
   15244:	eor	r1, r1, r3
   15248:	eor	r0, r0, r2
   1524c:	orr	r0, r0, r1
   15250:	clz	r0, r0
   15254:	lsr	r0, r0, #5
   15258:	bx	lr
   1525c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15260:	add	fp, sp, #28
   15264:	sub	sp, sp, #28
   15268:	mvn	r8, #0
   1526c:	cmp	r0, #1
   15270:	blt	156c4 <__assert_fail@plt+0x4770>
   15274:	mov	r9, r3
   15278:	mov	sl, r2
   1527c:	mov	r7, r1
   15280:	mov	r5, r0
   15284:	ldr	r4, [fp, #16]
   15288:	ldm	r4, {r0, r6}
   1528c:	mov	r1, #0
   15290:	str	r1, [r4, #12]
   15294:	cmp	r0, #0
   15298:	beq	152bc <__assert_fail@plt+0x4368>
   1529c:	ldr	r0, [r4, #16]
   152a0:	cmp	r0, #0
   152a4:	beq	152bc <__assert_fail@plt+0x4368>
   152a8:	ldrb	r0, [sl]
   152ac:	cmp	r0, #45	; 0x2d
   152b0:	cmpne	r0, #43	; 0x2b
   152b4:	addeq	sl, sl, #1
   152b8:	b	152d0 <__assert_fail@plt+0x437c>
   152bc:	ldr	r2, [fp, #20]
   152c0:	mov	r0, sl
   152c4:	mov	r1, r4
   152c8:	bl	1573c <__assert_fail@plt+0x47e8>
   152cc:	mov	sl, r0
   152d0:	ldrb	r0, [sl]
   152d4:	subs	r0, r0, #58	; 0x3a
   152d8:	movne	r0, r6
   152dc:	str	r0, [sp, #24]
   152e0:	ldr	r0, [r4, #20]
   152e4:	cmp	r0, #0
   152e8:	beq	15358 <__assert_fail@plt+0x4404>
   152ec:	ldrb	r0, [r0]
   152f0:	cmp	r0, #0
   152f4:	beq	15358 <__assert_fail@plt+0x4404>
   152f8:	str	r9, [sp, #20]
   152fc:	ldr	r6, [r4, #20]
   15300:	add	r9, r6, #1
   15304:	str	r9, [r4, #20]
   15308:	ldrb	r8, [r6]
   1530c:	mov	r0, sl
   15310:	mov	r1, r8
   15314:	bl	10e28 <strchr@plt>
   15318:	ldrb	r1, [r6, #1]
   1531c:	cmp	r1, #0
   15320:	bne	15330 <__assert_fail@plt+0x43dc>
   15324:	ldr	r1, [r4]
   15328:	add	r1, r1, #1
   1532c:	str	r1, [r4]
   15330:	orr	r1, r8, #1
   15334:	cmp	r1, #59	; 0x3b
   15338:	cmpne	r0, #0
   1533c:	bne	153a0 <__assert_fail@plt+0x444c>
   15340:	ldr	r0, [sp, #24]
   15344:	cmp	r0, #0
   15348:	bne	15634 <__assert_fail@plt+0x46e0>
   1534c:	str	r8, [r4, #8]
   15350:	mov	r8, #63	; 0x3f
   15354:	b	156c4 <__assert_fail@plt+0x4770>
   15358:	ldr	r0, [r4]
   1535c:	ldr	r1, [r4, #32]
   15360:	cmp	r1, r0
   15364:	strgt	r0, [r4, #32]
   15368:	ldr	r1, [r4, #28]
   1536c:	cmp	r1, r0
   15370:	strgt	r0, [r4, #28]
   15374:	ldr	r1, [r4, #24]
   15378:	cmp	r1, #1
   1537c:	bne	15450 <__assert_fail@plt+0x44fc>
   15380:	ldr	r2, [r4, #28]
   15384:	ldr	r1, [r4, #32]
   15388:	cmp	r2, r1
   1538c:	cmpne	r1, r0
   15390:	bne	15404 <__assert_fail@plt+0x44b0>
   15394:	cmp	r1, r0
   15398:	strne	r0, [r4, #28]
   1539c:	b	15410 <__assert_fail@plt+0x44bc>
   153a0:	ldrb	r1, [r0]
   153a4:	cmp	r1, #87	; 0x57
   153a8:	bne	153d8 <__assert_fail@plt+0x4484>
   153ac:	ldr	r1, [sp, #20]
   153b0:	cmp	r1, #0
   153b4:	beq	153d8 <__assert_fail@plt+0x4484>
   153b8:	ldrb	r1, [r0, #1]
   153bc:	cmp	r1, #59	; 0x3b
   153c0:	bne	153d8 <__assert_fail@plt+0x4484>
   153c4:	ldrb	r0, [r9]
   153c8:	cmp	r0, #0
   153cc:	beq	155dc <__assert_fail@plt+0x4688>
   153d0:	str	r9, [r4, #12]
   153d4:	b	15660 <__assert_fail@plt+0x470c>
   153d8:	ldrb	r1, [r0, #1]
   153dc:	cmp	r1, #58	; 0x3a
   153e0:	bne	156c4 <__assert_fail@plt+0x4770>
   153e4:	ldrb	r1, [r9]
   153e8:	ldrb	r0, [r0, #2]
   153ec:	cmp	r0, #58	; 0x3a
   153f0:	bne	1549c <__assert_fail@plt+0x4548>
   153f4:	cmp	r1, #0
   153f8:	bne	154a4 <__assert_fail@plt+0x4550>
   153fc:	mov	r0, #0
   15400:	b	156b8 <__assert_fail@plt+0x4764>
   15404:	mov	r0, r7
   15408:	mov	r1, r4
   1540c:	bl	157d0 <__assert_fail@plt+0x487c>
   15410:	ldr	r0, [r4]
   15414:	cmp	r0, r5
   15418:	blt	15430 <__assert_fail@plt+0x44dc>
   1541c:	b	1544c <__assert_fail@plt+0x44f8>
   15420:	add	r0, r0, #1
   15424:	str	r0, [r4]
   15428:	cmp	r5, r0
   1542c:	beq	1544c <__assert_fail@plt+0x44f8>
   15430:	ldr	r1, [r7, r0, lsl #2]
   15434:	ldrb	r2, [r1]
   15438:	cmp	r2, #45	; 0x2d
   1543c:	bne	15420 <__assert_fail@plt+0x44cc>
   15440:	ldrb	r1, [r1, #1]
   15444:	cmp	r1, #0
   15448:	beq	15420 <__assert_fail@plt+0x44cc>
   1544c:	str	r0, [r4, #32]
   15450:	ldr	r6, [r4]
   15454:	cmp	r6, r5
   15458:	beq	154cc <__assert_fail@plt+0x4578>
   1545c:	ldr	r0, [r7, r6, lsl #2]
   15460:	movw	r1, #31216	; 0x79f0
   15464:	movt	r1, #1
   15468:	bl	10cfc <strcmp@plt>
   1546c:	cmp	r0, #0
   15470:	bne	154cc <__assert_fail@plt+0x4578>
   15474:	add	r0, r6, #1
   15478:	str	r0, [r4]
   1547c:	ldr	r1, [r4, #28]
   15480:	ldr	r2, [r4, #32]
   15484:	cmp	r1, r2
   15488:	cmpne	r2, r0
   1548c:	bne	154b8 <__assert_fail@plt+0x4564>
   15490:	cmp	r1, r2
   15494:	streq	r0, [r4, #28]
   15498:	b	154c4 <__assert_fail@plt+0x4570>
   1549c:	cmp	r1, #0
   154a0:	beq	15608 <__assert_fail@plt+0x46b4>
   154a4:	str	r9, [r4, #12]
   154a8:	ldr	r0, [r4]
   154ac:	add	r0, r0, #1
   154b0:	str	r0, [r4]
   154b4:	b	156bc <__assert_fail@plt+0x4768>
   154b8:	mov	r0, r7
   154bc:	mov	r1, r4
   154c0:	bl	157d0 <__assert_fail@plt+0x487c>
   154c4:	str	r5, [r4]
   154c8:	str	r5, [r4, #32]
   154cc:	ldr	r2, [r4]
   154d0:	cmp	r2, r5
   154d4:	bne	154ec <__assert_fail@plt+0x4598>
   154d8:	ldr	r0, [r4, #28]
   154dc:	ldr	r1, [r4, #32]
   154e0:	cmp	r0, r1
   154e4:	strne	r0, [r4]
   154e8:	b	156c4 <__assert_fail@plt+0x4770>
   154ec:	ldr	r0, [r7, r2, lsl #2]
   154f0:	ldrb	r1, [r0]
   154f4:	cmp	r1, #45	; 0x2d
   154f8:	bne	1555c <__assert_fail@plt+0x4608>
   154fc:	mov	r6, r0
   15500:	ldrb	r1, [r6, #1]!
   15504:	cmp	r1, #0
   15508:	beq	1555c <__assert_fail@plt+0x4608>
   1550c:	cmp	r9, #0
   15510:	beq	156e0 <__assert_fail@plt+0x478c>
   15514:	ldr	r8, [fp, #12]
   15518:	cmp	r1, #45	; 0x2d
   1551c:	bne	15580 <__assert_fail@plt+0x462c>
   15520:	add	r0, r0, #2
   15524:	str	r0, [r4, #20]
   15528:	movw	r0, #31216	; 0x79f0
   1552c:	movt	r0, #1
   15530:	ldr	r1, [fp, #8]
   15534:	stm	sp, {r1, r8}
   15538:	str	r4, [sp, #8]
   1553c:	ldr	r1, [sp, #24]
   15540:	str	r1, [sp, #12]
   15544:	str	r0, [sp, #16]
   15548:	mov	r0, r5
   1554c:	mov	r1, r7
   15550:	mov	r2, sl
   15554:	mov	r3, r9
   15558:	b	156a0 <__assert_fail@plt+0x474c>
   1555c:	ldr	r0, [r4, #24]
   15560:	cmp	r0, #0
   15564:	beq	156c4 <__assert_fail@plt+0x4770>
   15568:	add	r0, r2, #1
   1556c:	str	r0, [r4]
   15570:	ldr	r0, [r7, r2, lsl #2]
   15574:	str	r0, [r4, #12]
   15578:	mov	r8, #1
   1557c:	b	156c4 <__assert_fail@plt+0x4770>
   15580:	cmp	r8, #0
   15584:	beq	156e0 <__assert_fail@plt+0x478c>
   15588:	ldrb	r0, [r0, #2]
   1558c:	cmp	r0, #0
   15590:	beq	156d0 <__assert_fail@plt+0x477c>
   15594:	str	r6, [r4, #20]
   15598:	movw	r0, #31217	; 0x79f1
   1559c:	movt	r0, #1
   155a0:	ldr	r1, [fp, #8]
   155a4:	stm	sp, {r1, r8}
   155a8:	str	r4, [sp, #8]
   155ac:	ldr	r1, [sp, #24]
   155b0:	str	r1, [sp, #12]
   155b4:	str	r0, [sp, #16]
   155b8:	mov	r0, r5
   155bc:	mov	r1, r7
   155c0:	mov	r2, sl
   155c4:	mov	r3, r9
   155c8:	bl	158b4 <__assert_fail@plt+0x4960>
   155cc:	mov	r8, r0
   155d0:	cmn	r0, #1
   155d4:	bne	156c4 <__assert_fail@plt+0x4770>
   155d8:	b	156e0 <__assert_fail@plt+0x478c>
   155dc:	ldr	r0, [r4]
   155e0:	cmp	r0, r5
   155e4:	bne	15658 <__assert_fail@plt+0x4704>
   155e8:	ldr	r0, [sp, #24]
   155ec:	cmp	r0, #0
   155f0:	bne	156f4 <__assert_fail@plt+0x47a0>
   155f4:	str	r8, [r4, #8]
   155f8:	ldrb	r8, [sl]
   155fc:	cmp	r8, #58	; 0x3a
   15600:	movwne	r8, #63	; 0x3f
   15604:	b	156c4 <__assert_fail@plt+0x4770>
   15608:	ldr	r0, [r4]
   1560c:	cmp	r0, r5
   15610:	bne	156ac <__assert_fail@plt+0x4758>
   15614:	ldr	r0, [sp, #24]
   15618:	cmp	r0, #0
   1561c:	bne	15718 <__assert_fail@plt+0x47c4>
   15620:	str	r8, [r4, #8]
   15624:	ldrb	r8, [sl]
   15628:	cmp	r8, #58	; 0x3a
   1562c:	movwne	r8, #63	; 0x3f
   15630:	b	156bc <__assert_fail@plt+0x4768>
   15634:	ldr	r2, [r7]
   15638:	movw	r0, #33040	; 0x8110
   1563c:	movt	r0, #2
   15640:	ldr	r0, [r0]
   15644:	movw	r1, #31219	; 0x79f3
   15648:	movt	r1, #1
   1564c:	mov	r3, r8
   15650:	bl	10e40 <fprintf@plt>
   15654:	b	1534c <__assert_fail@plt+0x43f8>
   15658:	ldr	r0, [r7, r0, lsl #2]
   1565c:	str	r0, [r4, #12]
   15660:	ldr	r0, [r4, #12]
   15664:	mov	r1, #0
   15668:	str	r1, [r4, #12]
   1566c:	str	r0, [r4, #20]
   15670:	movw	r0, #31288	; 0x7a38
   15674:	movt	r0, #1
   15678:	ldr	r2, [fp, #8]
   1567c:	str	r2, [sp]
   15680:	stmib	sp, {r1, r4}
   15684:	ldr	r1, [sp, #24]
   15688:	str	r1, [sp, #12]
   1568c:	str	r0, [sp, #16]
   15690:	mov	r0, r5
   15694:	mov	r1, r7
   15698:	mov	r2, sl
   1569c:	ldr	r3, [sp, #20]
   156a0:	bl	158b4 <__assert_fail@plt+0x4960>
   156a4:	sub	sp, fp, #28
   156a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156ac:	add	r1, r0, #1
   156b0:	str	r1, [r4]
   156b4:	ldr	r0, [r7, r0, lsl #2]
   156b8:	str	r0, [r4, #12]
   156bc:	mov	r0, #0
   156c0:	str	r0, [r4, #20]
   156c4:	mov	r0, r8
   156c8:	sub	sp, fp, #28
   156cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156d0:	mov	r0, sl
   156d4:	bl	10e28 <strchr@plt>
   156d8:	cmp	r0, #0
   156dc:	beq	15594 <__assert_fail@plt+0x4640>
   156e0:	ldr	r0, [r4]
   156e4:	ldr	r0, [r7, r0, lsl #2]
   156e8:	add	r0, r0, #1
   156ec:	str	r0, [r4, #20]
   156f0:	b	152f8 <__assert_fail@plt+0x43a4>
   156f4:	ldr	r2, [r7]
   156f8:	movw	r0, #33040	; 0x8110
   156fc:	movt	r0, #2
   15700:	ldr	r0, [r0]
   15704:	movw	r1, #31247	; 0x7a0f
   15708:	movt	r1, #1
   1570c:	mov	r3, r8
   15710:	bl	10e40 <fprintf@plt>
   15714:	b	155f4 <__assert_fail@plt+0x46a0>
   15718:	ldr	r2, [r7]
   1571c:	movw	r0, #33040	; 0x8110
   15720:	movt	r0, #2
   15724:	ldr	r0, [r0]
   15728:	movw	r1, #31247	; 0x7a0f
   1572c:	movt	r1, #1
   15730:	mov	r3, r8
   15734:	bl	10e40 <fprintf@plt>
   15738:	b	15620 <__assert_fail@plt+0x46cc>
   1573c:	push	{r4, r5, fp, lr}
   15740:	add	fp, sp, #8
   15744:	mov	r4, r1
   15748:	mov	r5, r0
   1574c:	ldr	r0, [r1]
   15750:	cmp	r0, #0
   15754:	moveq	r0, #1
   15758:	streq	r0, [r4]
   1575c:	mov	r0, #0
   15760:	str	r0, [r4, #20]
   15764:	ldr	r1, [r4]
   15768:	str	r1, [r4, #28]
   1576c:	str	r1, [r4, #32]
   15770:	ldrb	r1, [r5]
   15774:	cmp	r1, #43	; 0x2b
   15778:	beq	15788 <__assert_fail@plt+0x4834>
   1577c:	cmp	r1, #45	; 0x2d
   15780:	bne	15794 <__assert_fail@plt+0x4840>
   15784:	mov	r0, #2
   15788:	str	r0, [r4, #24]
   1578c:	add	r5, r5, #1
   15790:	b	157b8 <__assert_fail@plt+0x4864>
   15794:	cmp	r2, #0
   15798:	bne	157b0 <__assert_fail@plt+0x485c>
   1579c:	movw	r0, #31292	; 0x7a3c
   157a0:	movt	r0, #1
   157a4:	bl	10dd4 <getenv@plt>
   157a8:	cmp	r0, #0
   157ac:	beq	157c8 <__assert_fail@plt+0x4874>
   157b0:	mov	r0, #0
   157b4:	str	r0, [r4, #24]
   157b8:	mov	r0, #1
   157bc:	str	r0, [r4, #16]
   157c0:	mov	r0, r5
   157c4:	pop	{r4, r5, fp, pc}
   157c8:	mov	r0, #1
   157cc:	b	157b4 <__assert_fail@plt+0x4860>
   157d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157d4:	add	fp, sp, #28
   157d8:	sub	sp, sp, #8
   157dc:	ldr	r2, [r1]
   157e0:	ldr	r3, [r1, #28]
   157e4:	str	r3, [sp, #4]
   157e8:	ldr	lr, [r1, #32]
   157ec:	str	r2, [sp]
   157f0:	cmp	r2, lr
   157f4:	ble	15894 <__assert_fail@plt+0x4940>
   157f8:	ldr	r2, [sp, #4]
   157fc:	cmp	r2, lr
   15800:	bge	15894 <__assert_fail@plt+0x4940>
   15804:	add	r8, r0, lr, lsl #2
   15808:	ldm	sp, {r9, sl}
   1580c:	b	15820 <__assert_fail@plt+0x48cc>
   15810:	sub	r9, r9, r7
   15814:	cmp	r9, lr
   15818:	cmpgt	lr, sl
   1581c:	ble	15894 <__assert_fail@plt+0x4940>
   15820:	sub	r7, lr, sl
   15824:	sub	r5, r9, lr
   15828:	cmp	r5, r7
   1582c:	ble	15860 <__assert_fail@plt+0x490c>
   15830:	cmp	r7, #1
   15834:	blt	15810 <__assert_fail@plt+0x48bc>
   15838:	add	r2, r0, sl, lsl #2
   1583c:	add	r5, r0, r9, lsl #2
   15840:	mov	r6, r7
   15844:	ldr	r4, [r5, -r6, lsl #2]
   15848:	ldr	ip, [r2]
   1584c:	str	r4, [r2], #4
   15850:	str	ip, [r5, -r6, lsl #2]
   15854:	subs	r6, r6, #1
   15858:	bne	15844 <__assert_fail@plt+0x48f0>
   1585c:	b	15810 <__assert_fail@plt+0x48bc>
   15860:	cmp	r5, #1
   15864:	blt	1588c <__assert_fail@plt+0x4938>
   15868:	add	r7, r0, sl, lsl #2
   1586c:	mov	r2, r8
   15870:	mov	r6, r5
   15874:	ldr	r4, [r7]
   15878:	ldr	r3, [r2]
   1587c:	str	r3, [r7], #4
   15880:	str	r4, [r2], #4
   15884:	subs	r6, r6, #1
   15888:	bne	15874 <__assert_fail@plt+0x4920>
   1588c:	add	sl, sl, r5
   15890:	b	15814 <__assert_fail@plt+0x48c0>
   15894:	ldr	r0, [sp, #4]
   15898:	sub	r0, r0, lr
   1589c:	ldr	r2, [sp]
   158a0:	add	r0, r0, r2
   158a4:	str	r0, [r1, #28]
   158a8:	str	r2, [r1, #32]
   158ac:	sub	sp, fp, #28
   158b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158b8:	add	fp, sp, #28
   158bc:	sub	sp, sp, #36	; 0x24
   158c0:	mov	r6, r3
   158c4:	str	r1, [sp, #12]
   158c8:	stmib	sp, {r0, r2}
   158cc:	ldr	r1, [fp, #16]
   158d0:	ldr	sl, [r1, #20]
   158d4:	mov	r5, sl
   158d8:	b	158e0 <__assert_fail@plt+0x498c>
   158dc:	add	r5, r5, #1
   158e0:	ldrb	r0, [r5]
   158e4:	cmp	r0, #0
   158e8:	cmpne	r0, #61	; 0x3d
   158ec:	bne	158dc <__assert_fail@plt+0x4988>
   158f0:	ldr	r0, [r1, #20]
   158f4:	sub	r8, r5, r0
   158f8:	ldr	r9, [r6]
   158fc:	mov	r0, #0
   15900:	str	r0, [sp, #32]
   15904:	cmp	r9, #0
   15908:	mov	r4, #0
   1590c:	beq	15964 <__assert_fail@plt+0x4a10>
   15910:	mov	r4, #0
   15914:	mov	r7, r6
   15918:	b	1592c <__assert_fail@plt+0x49d8>
   1591c:	add	r4, r4, #1
   15920:	ldr	r9, [r7, #16]!
   15924:	cmp	r9, #0
   15928:	beq	15964 <__assert_fail@plt+0x4a10>
   1592c:	mov	r0, r9
   15930:	mov	r1, sl
   15934:	mov	r2, r8
   15938:	bl	10f0c <strncmp@plt>
   1593c:	cmp	r0, #0
   15940:	bne	1591c <__assert_fail@plt+0x49c8>
   15944:	mov	r0, r9
   15948:	bl	10e1c <strlen@plt>
   1594c:	cmp	r8, r0
   15950:	bne	1591c <__assert_fail@plt+0x49c8>
   15954:	str	r4, [sp, #20]
   15958:	mov	r0, r7
   1595c:	ldr	r7, [fp, #16]
   15960:	b	15b78 <__assert_fail@plt+0x4c24>
   15964:	ldr	r0, [r6]
   15968:	cmp	r0, #0
   1596c:	beq	15af4 <__assert_fail@plt+0x4ba0>
   15970:	mov	sl, #0
   15974:	mvn	r1, #0
   15978:	str	r1, [sp, #20]
   1597c:	mov	r1, #0
   15980:	str	r1, [sp, #28]
   15984:	mov	r1, #0
   15988:	str	r1, [sp, #16]
   1598c:	mov	r1, #0
   15990:	str	r1, [sp, #24]
   15994:	mov	r9, #0
   15998:	mov	r1, #0
   1599c:	str	r1, [sp, #32]
   159a0:	ldr	r7, [fp, #16]
   159a4:	b	159cc <__assert_fail@plt+0x4a78>
   159a8:	add	r0, r6, sl
   159ac:	str	r0, [sp, #32]
   159b0:	str	r9, [sp, #20]
   159b4:	add	r0, r6, r9, lsl #4
   159b8:	ldr	r0, [r0, #16]
   159bc:	add	sl, sl, #16
   159c0:	add	r9, r9, #1
   159c4:	cmp	r0, #0
   159c8:	beq	15b18 <__assert_fail@plt+0x4bc4>
   159cc:	ldr	r1, [r7, #20]
   159d0:	mov	r2, r8
   159d4:	bl	10f0c <strncmp@plt>
   159d8:	cmp	r0, #0
   159dc:	bne	159b4 <__assert_fail@plt+0x4a60>
   159e0:	ldr	r0, [sp, #32]
   159e4:	cmp	r0, #0
   159e8:	beq	159a8 <__assert_fail@plt+0x4a54>
   159ec:	ldr	r0, [fp, #12]
   159f0:	cmp	r0, #0
   159f4:	bne	15a24 <__assert_fail@plt+0x4ad0>
   159f8:	add	r0, r6, r9, lsl #4
   159fc:	ldr	r1, [r0, #4]
   15a00:	ldr	r2, [sp, #32]
   15a04:	ldr	r2, [r2, #4]
   15a08:	cmp	r2, r1
   15a0c:	bne	15a24 <__assert_fail@plt+0x4ad0>
   15a10:	ldr	r1, [r0, #8]
   15a14:	ldr	r2, [sp, #32]
   15a18:	ldr	r2, [r2, #8]
   15a1c:	cmp	r2, r1
   15a20:	beq	15abc <__assert_fail@plt+0x4b68>
   15a24:	ldr	r0, [sp, #28]
   15a28:	cmp	r0, #0
   15a2c:	bne	159b4 <__assert_fail@plt+0x4a60>
   15a30:	ldr	r0, [fp, #20]
   15a34:	cmp	r0, #0
   15a38:	beq	15a98 <__assert_fail@plt+0x4b44>
   15a3c:	mov	r0, #0
   15a40:	str	r0, [sp, #28]
   15a44:	ldr	r0, [sp, #24]
   15a48:	cmp	r0, #0
   15a4c:	bne	15aac <__assert_fail@plt+0x4b58>
   15a50:	mov	r0, r4
   15a54:	bl	17084 <__assert_fail@plt+0x6130>
   15a58:	cmp	r0, #0
   15a5c:	beq	15ae0 <__assert_fail@plt+0x4b8c>
   15a60:	mov	r1, #0
   15a64:	str	r1, [sp, #28]
   15a68:	str	r0, [sp, #24]
   15a6c:	ldr	r0, [sp, #24]
   15a70:	mov	r1, #0
   15a74:	mov	r2, r4
   15a78:	bl	10e64 <memset@plt>
   15a7c:	ldr	r0, [sp, #24]
   15a80:	mov	r2, #1
   15a84:	mov	r1, #1
   15a88:	str	r1, [sp, #16]
   15a8c:	ldr	r1, [sp, #20]
   15a90:	strb	r2, [r0, r1]
   15a94:	b	15aac <__assert_fail@plt+0x4b58>
   15a98:	mov	r0, #1
   15a9c:	str	r0, [sp, #28]
   15aa0:	ldr	r0, [sp, #24]
   15aa4:	cmp	r0, #0
   15aa8:	beq	15ae8 <__assert_fail@plt+0x4b94>
   15aac:	str	r0, [sp, #24]
   15ab0:	mov	r1, #1
   15ab4:	strb	r1, [r0, r9]
   15ab8:	b	159b4 <__assert_fail@plt+0x4a60>
   15abc:	ldr	r1, [sp, #28]
   15ac0:	cmp	r1, #0
   15ac4:	bne	159b4 <__assert_fail@plt+0x4a60>
   15ac8:	ldr	r0, [r0, #12]
   15acc:	ldr	r1, [sp, #32]
   15ad0:	ldr	r1, [r1, #12]
   15ad4:	cmp	r1, r0
   15ad8:	bne	15a30 <__assert_fail@plt+0x4adc>
   15adc:	b	159b4 <__assert_fail@plt+0x4a60>
   15ae0:	mov	r0, #1
   15ae4:	str	r0, [sp, #28]
   15ae8:	mov	r0, #0
   15aec:	str	r0, [sp, #24]
   15af0:	b	159b4 <__assert_fail@plt+0x4a60>
   15af4:	mvn	r0, #0
   15af8:	str	r0, [sp, #20]
   15afc:	mov	r0, #0
   15b00:	str	r0, [sp, #24]
   15b04:	mov	r0, #0
   15b08:	str	r0, [sp, #16]
   15b0c:	mov	r0, #0
   15b10:	str	r0, [sp, #28]
   15b14:	ldr	r7, [fp, #16]
   15b18:	ldr	r0, [sp, #24]
   15b1c:	cmp	r0, #0
   15b20:	ldreq	r0, [sp, #28]
   15b24:	cmpeq	r0, #0
   15b28:	beq	15b6c <__assert_fail@plt+0x4c18>
   15b2c:	ldr	r0, [fp, #20]
   15b30:	cmp	r0, #0
   15b34:	bne	15cc8 <__assert_fail@plt+0x4d74>
   15b38:	ldr	r0, [sp, #16]
   15b3c:	cmp	r0, #0
   15b40:	beq	15b4c <__assert_fail@plt+0x4bf8>
   15b44:	ldr	r0, [sp, #24]
   15b48:	bl	13114 <__assert_fail@plt+0x21c0>
   15b4c:	ldr	r4, [r7, #20]
   15b50:	mov	r0, r4
   15b54:	bl	10e1c <strlen@plt>
   15b58:	mov	r1, #0
   15b5c:	str	r1, [r7, #8]
   15b60:	add	r0, r4, r0
   15b64:	str	r0, [r7, #20]
   15b68:	b	15c6c <__assert_fail@plt+0x4d18>
   15b6c:	ldr	r0, [sp, #32]
   15b70:	cmp	r0, #0
   15b74:	beq	15c10 <__assert_fail@plt+0x4cbc>
   15b78:	mov	r2, r0
   15b7c:	mov	r0, #0
   15b80:	str	r0, [r7, #20]
   15b84:	ldr	r1, [r7]
   15b88:	add	r0, r1, #1
   15b8c:	str	r0, [r7]
   15b90:	mov	r4, r2
   15b94:	ldr	r2, [r2, #4]
   15b98:	ldrb	r3, [r5]
   15b9c:	cmp	r3, #0
   15ba0:	beq	15bb8 <__assert_fail@plt+0x4c64>
   15ba4:	cmp	r2, #0
   15ba8:	beq	15c84 <__assert_fail@plt+0x4d30>
   15bac:	add	r0, r5, #1
   15bb0:	str	r0, [r7, #12]
   15bb4:	b	15be0 <__assert_fail@plt+0x4c8c>
   15bb8:	cmp	r2, #1
   15bbc:	bne	15be0 <__assert_fail@plt+0x4c8c>
   15bc0:	ldr	r2, [sp, #4]
   15bc4:	cmp	r0, r2
   15bc8:	bge	15c9c <__assert_fail@plt+0x4d48>
   15bcc:	add	r1, r1, #2
   15bd0:	str	r1, [r7]
   15bd4:	ldr	r1, [sp, #12]
   15bd8:	ldr	r0, [r1, r0, lsl #2]
   15bdc:	b	15bb0 <__assert_fail@plt+0x4c5c>
   15be0:	ldr	r0, [fp, #8]
   15be4:	cmp	r0, #0
   15be8:	ldrne	r1, [sp, #20]
   15bec:	strne	r1, [r0]
   15bf0:	ldr	r1, [r4, #8]
   15bf4:	ldr	r0, [r4, #12]
   15bf8:	cmp	r1, #0
   15bfc:	beq	15cc0 <__assert_fail@plt+0x4d6c>
   15c00:	str	r0, [r1]
   15c04:	mov	r0, #0
   15c08:	sub	sp, fp, #28
   15c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c10:	ldr	r0, [fp, #12]
   15c14:	cmp	r0, #0
   15c18:	beq	15c54 <__assert_fail@plt+0x4d00>
   15c1c:	ldr	r0, [r7]
   15c20:	ldr	r1, [sp, #12]
   15c24:	ldr	r0, [r1, r0, lsl #2]
   15c28:	ldrb	r0, [r0, #1]
   15c2c:	cmp	r0, #45	; 0x2d
   15c30:	beq	15c54 <__assert_fail@plt+0x4d00>
   15c34:	ldr	r0, [r7, #20]
   15c38:	ldrb	r1, [r0]
   15c3c:	ldr	r0, [sp, #8]
   15c40:	bl	10e28 <strchr@plt>
   15c44:	mov	r1, r0
   15c48:	mvn	r0, #0
   15c4c:	cmp	r1, #0
   15c50:	bne	15cc0 <__assert_fail@plt+0x4d6c>
   15c54:	ldr	r0, [fp, #20]
   15c58:	cmp	r0, #0
   15c5c:	bne	15d98 <__assert_fail@plt+0x4e44>
   15c60:	mov	r0, #0
   15c64:	str	r0, [r7, #20]
   15c68:	str	r0, [r7, #8]
   15c6c:	ldr	r0, [r7]
   15c70:	add	r0, r0, #1
   15c74:	str	r0, [r7]
   15c78:	mov	r0, #63	; 0x3f
   15c7c:	sub	sp, fp, #28
   15c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c84:	ldr	r0, [fp, #20]
   15c88:	cmp	r0, #0
   15c8c:	bne	15dc8 <__assert_fail@plt+0x4e74>
   15c90:	ldr	r0, [r4, #12]
   15c94:	str	r0, [r7, #8]
   15c98:	b	15c78 <__assert_fail@plt+0x4d24>
   15c9c:	ldr	r0, [fp, #20]
   15ca0:	cmp	r0, #0
   15ca4:	bne	15df8 <__assert_fail@plt+0x4ea4>
   15ca8:	ldr	r0, [r4, #12]
   15cac:	str	r0, [r7, #8]
   15cb0:	ldr	r0, [sp, #8]
   15cb4:	ldrb	r0, [r0]
   15cb8:	cmp	r0, #58	; 0x3a
   15cbc:	movwne	r0, #63	; 0x3f
   15cc0:	sub	sp, fp, #28
   15cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cc8:	movw	r5, #33040	; 0x8110
   15ccc:	movt	r5, #2
   15cd0:	ldr	r0, [r5]
   15cd4:	ldr	r1, [sp, #28]
   15cd8:	cmp	r1, #0
   15cdc:	beq	15d04 <__assert_fail@plt+0x4db0>
   15ce0:	ldr	r1, [sp, #12]
   15ce4:	ldr	r2, [r1]
   15ce8:	ldr	r1, [r7, #20]
   15cec:	str	r1, [sp]
   15cf0:	movw	r1, #31308	; 0x7a4c
   15cf4:	movt	r1, #1
   15cf8:	ldr	r3, [fp, #24]
   15cfc:	bl	10e40 <fprintf@plt>
   15d00:	b	15b38 <__assert_fail@plt+0x4be4>
   15d04:	bl	10ec4 <flockfile@plt>
   15d08:	ldr	r0, [sp, #12]
   15d0c:	ldr	r2, [r0]
   15d10:	ldr	r0, [r5]
   15d14:	ldr	r1, [r7, #20]
   15d18:	str	r1, [sp]
   15d1c:	movw	r1, #31340	; 0x7a6c
   15d20:	movt	r1, #1
   15d24:	ldr	r9, [fp, #24]
   15d28:	mov	r3, r9
   15d2c:	bl	10e40 <fprintf@plt>
   15d30:	cmp	r4, #0
   15d34:	beq	15d7c <__assert_fail@plt+0x4e28>
   15d38:	movw	r8, #31387	; 0x7a9b
   15d3c:	movt	r8, #1
   15d40:	ldr	r7, [sp, #24]
   15d44:	ldrb	r0, [r7]
   15d48:	cmp	r0, #0
   15d4c:	bne	15d64 <__assert_fail@plt+0x4e10>
   15d50:	add	r6, r6, #16
   15d54:	add	r7, r7, #1
   15d58:	subs	r4, r4, #1
   15d5c:	bne	15d44 <__assert_fail@plt+0x4df0>
   15d60:	b	15d7c <__assert_fail@plt+0x4e28>
   15d64:	ldr	r3, [r6]
   15d68:	ldr	r0, [r5]
   15d6c:	mov	r1, r8
   15d70:	mov	r2, r9
   15d74:	bl	10e40 <fprintf@plt>
   15d78:	b	15d50 <__assert_fail@plt+0x4dfc>
   15d7c:	ldr	r1, [r5]
   15d80:	mov	r0, #10
   15d84:	bl	10e94 <fputc@plt>
   15d88:	ldr	r0, [r5]
   15d8c:	bl	10d74 <funlockfile@plt>
   15d90:	ldr	r7, [fp, #16]
   15d94:	b	15b38 <__assert_fail@plt+0x4be4>
   15d98:	ldr	r0, [sp, #12]
   15d9c:	ldr	r2, [r0]
   15da0:	movw	r0, #33040	; 0x8110
   15da4:	movt	r0, #2
   15da8:	ldr	r0, [r0]
   15dac:	ldr	r1, [r7, #20]
   15db0:	str	r1, [sp]
   15db4:	movw	r1, #31395	; 0x7aa3
   15db8:	movt	r1, #1
   15dbc:	ldr	r3, [fp, #24]
   15dc0:	bl	10e40 <fprintf@plt>
   15dc4:	b	15c60 <__assert_fail@plt+0x4d0c>
   15dc8:	ldr	r0, [sp, #12]
   15dcc:	ldr	r2, [r0]
   15dd0:	movw	r0, #33040	; 0x8110
   15dd4:	movt	r0, #2
   15dd8:	ldr	r0, [r0]
   15ddc:	ldr	r1, [r4]
   15de0:	str	r1, [sp]
   15de4:	movw	r1, #31427	; 0x7ac3
   15de8:	movt	r1, #1
   15dec:	ldr	r3, [fp, #24]
   15df0:	bl	10e40 <fprintf@plt>
   15df4:	b	15c90 <__assert_fail@plt+0x4d3c>
   15df8:	ldr	r0, [sp, #12]
   15dfc:	ldr	r2, [r0]
   15e00:	movw	r0, #33040	; 0x8110
   15e04:	movt	r0, #2
   15e08:	ldr	r0, [r0]
   15e0c:	ldr	r1, [r4]
   15e10:	str	r1, [sp]
   15e14:	movw	r1, #31472	; 0x7af0
   15e18:	movt	r1, #1
   15e1c:	ldr	r3, [fp, #24]
   15e20:	bl	10e40 <fprintf@plt>
   15e24:	b	15ca8 <__assert_fail@plt+0x4d54>
   15e28:	push	{r4, r5, r6, r7, fp, lr}
   15e2c:	add	fp, sp, #16
   15e30:	sub	sp, sp, #16
   15e34:	movw	r7, #33028	; 0x8104
   15e38:	movt	r7, #2
   15e3c:	ldr	r4, [r7]
   15e40:	movw	r6, #33068	; 0x812c
   15e44:	movt	r6, #2
   15e48:	movw	r5, #33032	; 0x8108
   15e4c:	movt	r5, #2
   15e50:	ldr	r5, [r5]
   15e54:	stm	r6, {r4, r5}
   15e58:	ldr	r5, [fp, #16]
   15e5c:	str	r5, [sp, #12]
   15e60:	str	r6, [sp, #8]
   15e64:	ldr	r5, [fp, #12]
   15e68:	str	r5, [sp, #4]
   15e6c:	ldr	r5, [fp, #8]
   15e70:	str	r5, [sp]
   15e74:	bl	1525c <__assert_fail@plt+0x4308>
   15e78:	ldr	r1, [r6]
   15e7c:	ldr	r2, [r6, #8]
   15e80:	ldr	r3, [r6, #12]
   15e84:	str	r1, [r7]
   15e88:	movw	r1, #33208	; 0x81b8
   15e8c:	movt	r1, #2
   15e90:	str	r3, [r1]
   15e94:	movw	r1, #33036	; 0x810c
   15e98:	movt	r1, #2
   15e9c:	str	r2, [r1]
   15ea0:	sub	sp, fp, #16
   15ea4:	pop	{r4, r5, r6, r7, fp, pc}
   15ea8:	push	{fp, lr}
   15eac:	mov	fp, sp
   15eb0:	sub	sp, sp, #16
   15eb4:	mov	ip, #1
   15eb8:	mov	r3, #0
   15ebc:	str	r3, [sp]
   15ec0:	stmib	sp, {r3, ip}
   15ec4:	mov	r3, #0
   15ec8:	bl	15e28 <__assert_fail@plt+0x4ed4>
   15ecc:	mov	sp, fp
   15ed0:	pop	{fp, pc}
   15ed4:	andeq	r0, r0, r0
   15ed8:	ldr	r0, [r0, #8]
   15edc:	bx	lr
   15ee0:	ldr	r0, [r0, #12]
   15ee4:	bx	lr
   15ee8:	ldr	r0, [r0, #16]
   15eec:	bx	lr
   15ef0:	mov	r2, r0
   15ef4:	ldm	r0, {r1, r3}
   15ef8:	mov	r0, #0
   15efc:	cmp	r1, r3
   15f00:	bxcs	lr
   15f04:	ldr	ip, [r2, #4]
   15f08:	mov	r0, #0
   15f0c:	b	15f1c <__assert_fail@plt+0x4fc8>
   15f10:	add	r1, r1, #8
   15f14:	cmp	r1, ip
   15f18:	bcs	15f4c <__assert_fail@plt+0x4ff8>
   15f1c:	ldr	r2, [r1]
   15f20:	cmp	r2, #0
   15f24:	beq	15f10 <__assert_fail@plt+0x4fbc>
   15f28:	mov	r3, #0
   15f2c:	mov	r2, r1
   15f30:	add	r3, r3, #1
   15f34:	ldr	r2, [r2, #4]
   15f38:	cmp	r2, #0
   15f3c:	bne	15f30 <__assert_fail@plt+0x4fdc>
   15f40:	cmp	r3, r0
   15f44:	movhi	r0, r3
   15f48:	b	15f10 <__assert_fail@plt+0x4fbc>
   15f4c:	bx	lr
   15f50:	push	{fp, lr}
   15f54:	mov	fp, sp
   15f58:	ldr	r3, [r0]
   15f5c:	ldr	r1, [r0, #4]
   15f60:	mov	lr, #0
   15f64:	cmp	r3, r1
   15f68:	mov	r1, #0
   15f6c:	bcs	15fb4 <__assert_fail@plt+0x5060>
   15f70:	ldr	ip, [r0, #4]
   15f74:	mov	r1, #0
   15f78:	mov	lr, #0
   15f7c:	b	15f8c <__assert_fail@plt+0x5038>
   15f80:	add	r3, r3, #8
   15f84:	cmp	r3, ip
   15f88:	bcs	15fb4 <__assert_fail@plt+0x5060>
   15f8c:	ldr	r2, [r3]
   15f90:	cmp	r2, #0
   15f94:	beq	15f80 <__assert_fail@plt+0x502c>
   15f98:	mov	r2, r3
   15f9c:	add	r1, r1, #1
   15fa0:	ldr	r2, [r2, #4]
   15fa4:	cmp	r2, #0
   15fa8:	bne	15f9c <__assert_fail@plt+0x5048>
   15fac:	add	lr, lr, #1
   15fb0:	b	15f80 <__assert_fail@plt+0x502c>
   15fb4:	ldr	r2, [r0, #12]
   15fb8:	cmp	lr, r2
   15fbc:	bne	15fd4 <__assert_fail@plt+0x5080>
   15fc0:	ldr	r2, [r0, #16]
   15fc4:	mov	r0, #1
   15fc8:	cmp	r1, r2
   15fcc:	movne	r0, #0
   15fd0:	pop	{fp, pc}
   15fd4:	mov	r0, #0
   15fd8:	pop	{fp, pc}
   15fdc:	nop	{0}
   15fe0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15fe4:	add	fp, sp, #24
   15fe8:	sub	sp, sp, #8
   15fec:	mov	r4, r1
   15ff0:	mov	r5, r0
   15ff4:	bl	15ee8 <__assert_fail@plt+0x4f94>
   15ff8:	mov	r8, r0
   15ffc:	mov	r0, r5
   16000:	bl	15ed8 <__assert_fail@plt+0x4f84>
   16004:	mov	r7, r0
   16008:	mov	r0, r5
   1600c:	bl	15ee0 <__assert_fail@plt+0x4f8c>
   16010:	mov	r6, r0
   16014:	mov	r0, r5
   16018:	bl	15ef0 <__assert_fail@plt+0x4f9c>
   1601c:	mov	r5, r0
   16020:	movw	r1, #31512	; 0x7b18
   16024:	movt	r1, #1
   16028:	mov	r0, r4
   1602c:	mov	r2, r8
   16030:	bl	10e40 <fprintf@plt>
   16034:	movw	r1, #31536	; 0x7b30
   16038:	movt	r1, #1
   1603c:	mov	r0, r4
   16040:	mov	r2, r7
   16044:	bl	10e40 <fprintf@plt>
   16048:	vldr	d16, [pc, #72]	; 16098 <__assert_fail@plt+0x5144>
   1604c:	vmov	s0, r6
   16050:	vmov	s2, r7
   16054:	vcvt.f64.u32	d17, s0
   16058:	vcvt.f64.u32	d18, s2
   1605c:	vmul.f64	d16, d17, d16
   16060:	vdiv.f64	d16, d16, d18
   16064:	vstr	d16, [sp]
   16068:	movw	r1, #31560	; 0x7b48
   1606c:	movt	r1, #1
   16070:	mov	r0, r4
   16074:	mov	r2, r6
   16078:	bl	10e40 <fprintf@plt>
   1607c:	movw	r1, #31593	; 0x7b69
   16080:	movt	r1, #1
   16084:	mov	r0, r4
   16088:	mov	r2, r5
   1608c:	sub	sp, fp, #24
   16090:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   16094:	b	10e40 <fprintf@plt>
   16098:	andeq	r0, r0, r0
   1609c:	subsmi	r0, r9, r0
   160a0:	push	{r4, r5, r6, r7, fp, lr}
   160a4:	add	fp, sp, #16
   160a8:	mov	r5, r1
   160ac:	mov	r6, r0
   160b0:	bl	16110 <__assert_fail@plt+0x51bc>
   160b4:	mov	r7, r0
   160b8:	ldr	r0, [r0]
   160bc:	mov	r4, #0
   160c0:	cmp	r0, #0
   160c4:	beq	160fc <__assert_fail@plt+0x51a8>
   160c8:	cmp	r7, #0
   160cc:	beq	160fc <__assert_fail@plt+0x51a8>
   160d0:	ldr	r1, [r7]
   160d4:	cmp	r1, r5
   160d8:	beq	16104 <__assert_fail@plt+0x51b0>
   160dc:	ldr	r2, [r6, #28]
   160e0:	mov	r0, r5
   160e4:	blx	r2
   160e8:	cmp	r0, #0
   160ec:	bne	16104 <__assert_fail@plt+0x51b0>
   160f0:	ldr	r7, [r7, #4]
   160f4:	cmp	r7, #0
   160f8:	bne	160d0 <__assert_fail@plt+0x517c>
   160fc:	mov	r0, r4
   16100:	pop	{r4, r5, r6, r7, fp, pc}
   16104:	ldr	r4, [r7]
   16108:	mov	r0, r4
   1610c:	pop	{r4, r5, r6, r7, fp, pc}
   16110:	push	{r4, sl, fp, lr}
   16114:	add	fp, sp, #8
   16118:	mov	r2, r1
   1611c:	mov	r4, r0
   16120:	ldr	r1, [r0, #8]
   16124:	ldr	r3, [r0, #24]
   16128:	mov	r0, r2
   1612c:	blx	r3
   16130:	ldr	r1, [r4, #8]
   16134:	cmp	r0, r1
   16138:	ldrcc	r1, [r4]
   1613c:	addcc	r0, r1, r0, lsl #3
   16140:	popcc	{r4, sl, fp, pc}
   16144:	bl	10f18 <abort@plt>
   16148:	push	{fp, lr}
   1614c:	mov	fp, sp
   16150:	ldr	r1, [r0, #16]
   16154:	cmp	r1, #0
   16158:	beq	16180 <__assert_fail@plt+0x522c>
   1615c:	ldr	r2, [r0]
   16160:	ldr	r1, [r0, #4]
   16164:	cmp	r2, r1
   16168:	bcs	1618c <__assert_fail@plt+0x5238>
   1616c:	ldr	r1, [r2], #8
   16170:	cmp	r1, #0
   16174:	beq	16160 <__assert_fail@plt+0x520c>
   16178:	mov	r0, r1
   1617c:	pop	{fp, pc}
   16180:	mov	r1, #0
   16184:	mov	r0, r1
   16188:	pop	{fp, pc}
   1618c:	bl	10f18 <abort@plt>
   16190:	push	{r4, r5, fp, lr}
   16194:	add	fp, sp, #8
   16198:	mov	r5, r1
   1619c:	mov	r4, r0
   161a0:	bl	16110 <__assert_fail@plt+0x51bc>
   161a4:	mov	r1, r0
   161a8:	b	161b8 <__assert_fail@plt+0x5264>
   161ac:	ldr	r1, [r1, #4]
   161b0:	cmp	r1, #0
   161b4:	beq	161d8 <__assert_fail@plt+0x5284>
   161b8:	ldr	r2, [r1]
   161bc:	cmp	r2, r5
   161c0:	bne	161ac <__assert_fail@plt+0x5258>
   161c4:	ldr	r2, [r1, #4]
   161c8:	cmp	r2, #0
   161cc:	beq	161ac <__assert_fail@plt+0x5258>
   161d0:	ldr	r0, [r2]
   161d4:	pop	{r4, r5, fp, pc}
   161d8:	add	r1, r0, #8
   161dc:	ldr	r2, [r4, #4]
   161e0:	cmp	r1, r2
   161e4:	bcs	161f8 <__assert_fail@plt+0x52a4>
   161e8:	ldr	r0, [r1], #8
   161ec:	cmp	r0, #0
   161f0:	beq	161e0 <__assert_fail@plt+0x528c>
   161f4:	pop	{r4, r5, fp, pc}
   161f8:	mov	r0, #0
   161fc:	pop	{r4, r5, fp, pc}
   16200:	push	{r4, sl, fp, lr}
   16204:	add	fp, sp, #8
   16208:	mov	ip, r0
   1620c:	ldr	lr, [r0]
   16210:	ldr	r3, [r0, #4]
   16214:	mov	r0, #0
   16218:	cmp	lr, r3
   1621c:	popcs	{r4, sl, fp, pc}
   16220:	mov	r0, #0
   16224:	b	16238 <__assert_fail@plt+0x52e4>
   16228:	ldr	r3, [ip, #4]
   1622c:	add	lr, lr, #8
   16230:	cmp	lr, r3
   16234:	bcs	16270 <__assert_fail@plt+0x531c>
   16238:	ldr	r3, [lr]
   1623c:	cmp	r3, #0
   16240:	cmpne	lr, #0
   16244:	beq	16228 <__assert_fail@plt+0x52d4>
   16248:	mov	r3, lr
   1624c:	cmp	r0, r2
   16250:	bcs	16270 <__assert_fail@plt+0x531c>
   16254:	ldr	r4, [r3]
   16258:	str	r4, [r1, r0, lsl #2]
   1625c:	add	r0, r0, #1
   16260:	ldr	r3, [r3, #4]
   16264:	cmp	r3, #0
   16268:	bne	1624c <__assert_fail@plt+0x52f8>
   1626c:	b	16228 <__assert_fail@plt+0x52d4>
   16270:	pop	{r4, sl, fp, pc}
   16274:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16278:	add	fp, sp, #24
   1627c:	mov	r8, r0
   16280:	ldr	r9, [r0]
   16284:	ldr	r0, [r0, #4]
   16288:	mov	r6, #0
   1628c:	cmp	r9, r0
   16290:	bcs	162f0 <__assert_fail@plt+0x539c>
   16294:	mov	r4, r2
   16298:	mov	r5, r1
   1629c:	mov	r6, #0
   162a0:	b	162b4 <__assert_fail@plt+0x5360>
   162a4:	ldr	r0, [r8, #4]
   162a8:	add	r9, r9, #8
   162ac:	cmp	r9, r0
   162b0:	bcs	162f0 <__assert_fail@plt+0x539c>
   162b4:	ldr	r0, [r9]
   162b8:	cmp	r0, #0
   162bc:	cmpne	r9, #0
   162c0:	beq	162a4 <__assert_fail@plt+0x5350>
   162c4:	mov	r7, r9
   162c8:	ldr	r0, [r7]
   162cc:	mov	r1, r4
   162d0:	blx	r5
   162d4:	cmp	r0, #0
   162d8:	beq	162f0 <__assert_fail@plt+0x539c>
   162dc:	add	r6, r6, #1
   162e0:	ldr	r7, [r7, #4]
   162e4:	cmp	r7, #0
   162e8:	bne	162c8 <__assert_fail@plt+0x5374>
   162ec:	b	162a4 <__assert_fail@plt+0x5350>
   162f0:	mov	r0, r6
   162f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   162f8:	ldrb	r2, [r0]
   162fc:	cmp	r2, #0
   16300:	moveq	r0, #0
   16304:	bxeq	lr
   16308:	add	r3, r0, #1
   1630c:	mov	r0, #0
   16310:	rsb	r0, r0, r0, lsl #5
   16314:	uxtab	r0, r0, r2
   16318:	udiv	r2, r0, r1
   1631c:	mls	r0, r2, r1, r0
   16320:	ldrb	r2, [r3], #1
   16324:	cmp	r2, #0
   16328:	bne	16310 <__assert_fail@plt+0x53bc>
   1632c:	bx	lr
   16330:	movw	r1, #31624	; 0x7b88
   16334:	movt	r1, #1
   16338:	vld1.32	{d16-d17}, [r1]!
   1633c:	vst1.32	{d16-d17}, [r0]!
   16340:	ldr	r1, [r1]
   16344:	str	r1, [r0]
   16348:	bx	lr
   1634c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16350:	add	fp, sp, #28
   16354:	sub	sp, sp, #4
   16358:	mov	r7, r1
   1635c:	mov	r8, r0
   16360:	movw	sl, #25676	; 0x644c
   16364:	movt	sl, #1
   16368:	cmp	r3, #0
   1636c:	movne	sl, r3
   16370:	movw	r5, #25644	; 0x642c
   16374:	movt	r5, #1
   16378:	cmp	r2, #0
   1637c:	movne	r5, r2
   16380:	mov	r0, #40	; 0x28
   16384:	bl	17084 <__assert_fail@plt+0x6130>
   16388:	mov	r9, #0
   1638c:	cmp	r0, #0
   16390:	beq	16420 <__assert_fail@plt+0x54cc>
   16394:	mov	r4, r0
   16398:	movw	r6, #31624	; 0x7b88
   1639c:	movt	r6, #1
   163a0:	cmp	r7, #0
   163a4:	movne	r6, r7
   163a8:	str	r6, [r0, #20]
   163ac:	bl	1645c <__assert_fail@plt+0x5508>
   163b0:	cmp	r0, #0
   163b4:	beq	16418 <__assert_fail@plt+0x54c4>
   163b8:	mov	r0, r8
   163bc:	mov	r1, r6
   163c0:	bl	16508 <__assert_fail@plt+0x55b4>
   163c4:	str	r0, [r4, #8]
   163c8:	cmp	r0, #0
   163cc:	beq	16418 <__assert_fail@plt+0x54c4>
   163d0:	mov	r1, #8
   163d4:	bl	17030 <__assert_fail@plt+0x60dc>
   163d8:	str	r0, [r4]
   163dc:	cmp	r0, #0
   163e0:	beq	16418 <__assert_fail@plt+0x54c4>
   163e4:	ldr	r1, [fp, #8]
   163e8:	mov	r2, #0
   163ec:	str	r5, [r4, #24]
   163f0:	str	sl, [r4, #28]
   163f4:	str	r1, [r4, #32]
   163f8:	str	r2, [r4, #36]	; 0x24
   163fc:	str	r2, [r4, #12]
   16400:	str	r2, [r4, #16]
   16404:	ldr	r1, [r4, #8]
   16408:	add	r0, r0, r1, lsl #3
   1640c:	str	r0, [r4, #4]
   16410:	mov	r9, r4
   16414:	b	16420 <__assert_fail@plt+0x54cc>
   16418:	mov	r0, r4
   1641c:	bl	13114 <__assert_fail@plt+0x21c0>
   16420:	mov	r0, r9
   16424:	sub	sp, fp, #28
   16428:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1642c:	push	{r4, sl, fp, lr}
   16430:	add	fp, sp, #8
   16434:	mov	r4, r1
   16438:	mov	r1, #3
   1643c:	bl	171d8 <__assert_fail@plt+0x6284>
   16440:	udiv	r1, r0, r4
   16444:	mls	r0, r1, r4, r0
   16448:	pop	{r4, sl, fp, pc}
   1644c:	sub	r0, r0, r1
   16450:	clz	r0, r0
   16454:	lsr	r0, r0, #5
   16458:	bx	lr
   1645c:	mov	r1, r0
   16460:	ldr	r3, [r0, #20]
   16464:	mov	r0, #1
   16468:	movw	r2, #31624	; 0x7b88
   1646c:	movt	r2, #1
   16470:	cmp	r3, r2
   16474:	beq	164f8 <__assert_fail@plt+0x55a4>
   16478:	vldr	s2, [pc, #124]	; 164fc <__assert_fail@plt+0x55a8>
   1647c:	vldr	s0, [r3, #8]
   16480:	vcmpe.f32	s0, s2
   16484:	vmrs	APSR_nzcv, fpscr
   16488:	ble	164f0 <__assert_fail@plt+0x559c>
   1648c:	vldr	s4, [pc, #108]	; 16500 <__assert_fail@plt+0x55ac>
   16490:	vcmpe.f32	s0, s4
   16494:	vmrs	APSR_nzcv, fpscr
   16498:	bpl	164f0 <__assert_fail@plt+0x559c>
   1649c:	vldr	s4, [pc, #96]	; 16504 <__assert_fail@plt+0x55b0>
   164a0:	vldr	s6, [r3, #12]
   164a4:	vcmpe.f32	s6, s4
   164a8:	vmrs	APSR_nzcv, fpscr
   164ac:	ble	164f0 <__assert_fail@plt+0x559c>
   164b0:	vldr	s4, [r3]
   164b4:	vcmpe.f32	s4, #0.0
   164b8:	vmrs	APSR_nzcv, fpscr
   164bc:	blt	164f0 <__assert_fail@plt+0x559c>
   164c0:	vadd.f32	s2, s4, s2
   164c4:	vcmpe.f32	s2, s0
   164c8:	vmrs	APSR_nzcv, fpscr
   164cc:	bpl	164f0 <__assert_fail@plt+0x559c>
   164d0:	vldr	s0, [r3, #4]
   164d4:	vmov.f32	s4, #112	; 0x3f800000  1.0
   164d8:	vcmpe.f32	s0, s4
   164dc:	vmrs	APSR_nzcv, fpscr
   164e0:	bhi	164f0 <__assert_fail@plt+0x559c>
   164e4:	vcmpe.f32	s2, s0
   164e8:	vmrs	APSR_nzcv, fpscr
   164ec:	bxmi	lr
   164f0:	str	r2, [r1, #20]
   164f4:	mov	r0, #0
   164f8:	bx	lr
   164fc:	stclcc	12, cr12, [ip, #820]	; 0x334
   16500:	svccc	0x00666666
   16504:	svccc	0x008ccccd
   16508:	push	{fp, lr}
   1650c:	mov	fp, sp
   16510:	ldrb	r2, [r1, #16]
   16514:	cmp	r2, #0
   16518:	bne	16548 <__assert_fail@plt+0x55f4>
   1651c:	vldr	s0, [r1, #8]
   16520:	vmov	s2, r0
   16524:	vcvt.f32.u32	s2, s2
   16528:	vdiv.f32	s2, s2, s0
   1652c:	vcvt.u32.f32	s0, s2
   16530:	vldr	s4, [pc, #32]	; 16558 <__assert_fail@plt+0x5604>
   16534:	mov	r0, #0
   16538:	vcmpe.f32	s2, s4
   1653c:	vmrs	APSR_nzcv, fpscr
   16540:	popge	{fp, pc}
   16544:	vmov	r0, s0
   16548:	bl	16d3c <__assert_fail@plt+0x5de8>
   1654c:	cmn	r0, #-536870911	; 0xe0000001
   16550:	movwhi	r0, #0
   16554:	pop	{fp, pc}
   16558:	svcmi	0x00800000
   1655c:	push	{r4, r5, r6, r7, fp, lr}
   16560:	add	fp, sp, #16
   16564:	mov	r4, r0
   16568:	ldr	r5, [r0]
   1656c:	ldr	r0, [r0, #4]
   16570:	cmp	r5, r0
   16574:	bcs	16618 <__assert_fail@plt+0x56c4>
   16578:	mov	r6, #0
   1657c:	b	16598 <__assert_fail@plt+0x5644>
   16580:	str	r6, [r5]
   16584:	str	r6, [r5, #4]
   16588:	ldr	r0, [r4, #4]
   1658c:	add	r5, r5, #8
   16590:	cmp	r5, r0
   16594:	bcs	16618 <__assert_fail@plt+0x56c4>
   16598:	ldr	r0, [r5]
   1659c:	cmp	r0, #0
   165a0:	beq	16588 <__assert_fail@plt+0x5634>
   165a4:	ldr	r7, [r5, #4]
   165a8:	ldr	r1, [r4, #32]
   165ac:	cmp	r1, #0
   165b0:	mov	r0, r1
   165b4:	movwne	r0, #1
   165b8:	cmp	r7, #0
   165bc:	bne	16604 <__assert_fail@plt+0x56b0>
   165c0:	cmp	r0, #0
   165c4:	beq	16580 <__assert_fail@plt+0x562c>
   165c8:	ldr	r0, [r5]
   165cc:	blx	r1
   165d0:	b	16580 <__assert_fail@plt+0x562c>
   165d4:	str	r6, [r7]
   165d8:	ldr	r2, [r7, #4]
   165dc:	ldr	r0, [r4, #36]	; 0x24
   165e0:	str	r0, [r7, #4]
   165e4:	str	r7, [r4, #36]	; 0x24
   165e8:	ldr	r1, [r4, #32]
   165ec:	cmp	r1, #0
   165f0:	mov	r0, r1
   165f4:	movwne	r0, #1
   165f8:	cmp	r2, #0
   165fc:	mov	r7, r2
   16600:	beq	165c0 <__assert_fail@plt+0x566c>
   16604:	tst	r0, #1
   16608:	beq	165d4 <__assert_fail@plt+0x5680>
   1660c:	ldr	r0, [r7]
   16610:	blx	r1
   16614:	b	165d4 <__assert_fail@plt+0x5680>
   16618:	mov	r0, #0
   1661c:	str	r0, [r4, #12]
   16620:	str	r0, [r4, #16]
   16624:	pop	{r4, r5, r6, r7, fp, pc}
   16628:	push	{r4, r5, r6, sl, fp, lr}
   1662c:	add	fp, sp, #16
   16630:	mov	r4, r0
   16634:	ldr	r0, [r0, #32]
   16638:	cmp	r0, #0
   1663c:	beq	166a0 <__assert_fail@plt+0x574c>
   16640:	ldr	r0, [r4, #16]
   16644:	cmp	r0, #0
   16648:	beq	166a0 <__assert_fail@plt+0x574c>
   1664c:	ldr	r5, [r4]
   16650:	ldr	r0, [r4, #4]
   16654:	cmp	r5, r0
   16658:	bcc	16670 <__assert_fail@plt+0x571c>
   1665c:	b	166a0 <__assert_fail@plt+0x574c>
   16660:	ldr	r0, [r4, #4]
   16664:	add	r5, r5, #8
   16668:	cmp	r5, r0
   1666c:	bcs	166a0 <__assert_fail@plt+0x574c>
   16670:	ldr	r0, [r5]
   16674:	cmp	r0, #0
   16678:	cmpne	r5, #0
   1667c:	beq	16660 <__assert_fail@plt+0x570c>
   16680:	mov	r6, r5
   16684:	ldr	r0, [r6]
   16688:	ldr	r1, [r4, #32]
   1668c:	blx	r1
   16690:	ldr	r6, [r6, #4]
   16694:	cmp	r6, #0
   16698:	bne	16684 <__assert_fail@plt+0x5730>
   1669c:	b	16660 <__assert_fail@plt+0x570c>
   166a0:	ldr	r5, [r4]
   166a4:	ldr	r0, [r4, #4]
   166a8:	cmp	r5, r0
   166ac:	bcc	166c4 <__assert_fail@plt+0x5770>
   166b0:	b	166e8 <__assert_fail@plt+0x5794>
   166b4:	ldr	r0, [r4, #4]
   166b8:	add	r5, r5, #8
   166bc:	cmp	r5, r0
   166c0:	bcs	166e8 <__assert_fail@plt+0x5794>
   166c4:	ldr	r0, [r5, #4]
   166c8:	cmp	r0, #0
   166cc:	beq	166b4 <__assert_fail@plt+0x5760>
   166d0:	ldr	r6, [r0, #4]
   166d4:	bl	13114 <__assert_fail@plt+0x21c0>
   166d8:	cmp	r6, #0
   166dc:	mov	r0, r6
   166e0:	bne	166d0 <__assert_fail@plt+0x577c>
   166e4:	b	166b4 <__assert_fail@plt+0x5760>
   166e8:	ldr	r0, [r4, #36]	; 0x24
   166ec:	cmp	r0, #0
   166f0:	beq	16708 <__assert_fail@plt+0x57b4>
   166f4:	ldr	r5, [r0, #4]
   166f8:	bl	13114 <__assert_fail@plt+0x21c0>
   166fc:	cmp	r5, #0
   16700:	mov	r0, r5
   16704:	bne	166f4 <__assert_fail@plt+0x57a0>
   16708:	ldr	r0, [r4]
   1670c:	bl	13114 <__assert_fail@plt+0x21c0>
   16710:	mov	r0, r4
   16714:	pop	{r4, r5, r6, sl, fp, lr}
   16718:	b	13114 <__assert_fail@plt+0x21c0>
   1671c:	push	{r4, r5, r6, sl, fp, lr}
   16720:	add	fp, sp, #16
   16724:	sub	sp, sp, #40	; 0x28
   16728:	mov	r2, r1
   1672c:	mov	r4, r0
   16730:	ldr	r1, [r0, #20]
   16734:	mov	r0, r2
   16738:	bl	16508 <__assert_fail@plt+0x55b4>
   1673c:	mov	r5, #0
   16740:	cmp	r0, #0
   16744:	beq	16820 <__assert_fail@plt+0x58cc>
   16748:	mov	r6, r0
   1674c:	ldr	r0, [r4, #8]
   16750:	cmp	r6, r0
   16754:	bne	16760 <__assert_fail@plt+0x580c>
   16758:	mov	r5, #1
   1675c:	b	16820 <__assert_fail@plt+0x58cc>
   16760:	mov	r0, r6
   16764:	mov	r1, #8
   16768:	bl	17030 <__assert_fail@plt+0x60dc>
   1676c:	str	r0, [sp]
   16770:	cmp	r0, #0
   16774:	beq	16820 <__assert_fail@plt+0x58cc>
   16778:	mov	r0, #0
   1677c:	str	r0, [sp, #16]
   16780:	str	r0, [sp, #12]
   16784:	str	r6, [sp, #8]
   16788:	ldr	r0, [sp]
   1678c:	add	r0, r0, r6, lsl #3
   16790:	str	r0, [sp, #4]
   16794:	add	r6, r4, #20
   16798:	ldm	r6, {r0, r1, r2, r3, r6}
   1679c:	add	ip, sp, #20
   167a0:	stm	ip, {r0, r1, r2, r3, r6}
   167a4:	mov	r0, sp
   167a8:	mov	r1, r4
   167ac:	mov	r2, #0
   167b0:	bl	16830 <__assert_fail@plt+0x58dc>
   167b4:	cmp	r0, #0
   167b8:	beq	167dc <__assert_fail@plt+0x5888>
   167bc:	ldr	r0, [r4]
   167c0:	bl	13114 <__assert_fail@plt+0x21c0>
   167c4:	ldm	sp, {r0, r1, r2, r3}
   167c8:	stm	r4, {r0, r1, r2, r3}
   167cc:	ldr	r0, [sp, #36]	; 0x24
   167d0:	str	r0, [r4, #36]	; 0x24
   167d4:	mov	r5, #1
   167d8:	b	16820 <__assert_fail@plt+0x58cc>
   167dc:	ldr	r0, [sp, #36]	; 0x24
   167e0:	str	r0, [r4, #36]	; 0x24
   167e4:	mov	r1, sp
   167e8:	mov	r0, r4
   167ec:	mov	r2, #1
   167f0:	bl	16830 <__assert_fail@plt+0x58dc>
   167f4:	cmp	r0, #0
   167f8:	beq	1682c <__assert_fail@plt+0x58d8>
   167fc:	mov	r1, sp
   16800:	mov	r5, #0
   16804:	mov	r0, r4
   16808:	mov	r2, #0
   1680c:	bl	16830 <__assert_fail@plt+0x58dc>
   16810:	cmp	r0, #0
   16814:	beq	1682c <__assert_fail@plt+0x58d8>
   16818:	ldr	r0, [sp]
   1681c:	bl	13114 <__assert_fail@plt+0x21c0>
   16820:	mov	r0, r5
   16824:	sub	sp, fp, #16
   16828:	pop	{r4, r5, r6, sl, fp, pc}
   1682c:	bl	10f18 <abort@plt>
   16830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16834:	add	fp, sp, #28
   16838:	sub	sp, sp, #4
   1683c:	mov	r7, r0
   16840:	ldr	r6, [r1]
   16844:	ldr	r0, [r1, #4]
   16848:	cmp	r6, r0
   1684c:	bcs	16958 <__assert_fail@plt+0x5a04>
   16850:	mov	r9, r2
   16854:	mov	sl, r1
   16858:	b	16890 <__assert_fail@plt+0x593c>
   1685c:	str	r4, [r5]
   16860:	ldr	r0, [r7, #12]
   16864:	add	r0, r0, #1
   16868:	str	r0, [r7, #12]
   1686c:	mov	r0, #0
   16870:	str	r0, [r6]
   16874:	ldr	r0, [sl, #12]
   16878:	sub	r0, r0, #1
   1687c:	str	r0, [sl, #12]
   16880:	add	r6, r6, #8
   16884:	ldr	r0, [sl, #4]
   16888:	cmp	r6, r0
   1688c:	bcs	16958 <__assert_fail@plt+0x5a04>
   16890:	ldr	r0, [r6]
   16894:	cmp	r0, #0
   16898:	beq	16880 <__assert_fail@plt+0x592c>
   1689c:	ldr	r4, [r6, #4]
   168a0:	cmp	r4, #0
   168a4:	bne	168d4 <__assert_fail@plt+0x5980>
   168a8:	b	16904 <__assert_fail@plt+0x59b0>
   168ac:	str	r5, [r0]
   168b0:	ldr	r0, [r7, #12]
   168b4:	add	r0, r0, #1
   168b8:	str	r0, [r7, #12]
   168bc:	mov	r0, r7
   168c0:	mov	r1, r4
   168c4:	bl	16ddc <__assert_fail@plt+0x5e88>
   168c8:	cmp	r8, #0
   168cc:	mov	r4, r8
   168d0:	beq	16904 <__assert_fail@plt+0x59b0>
   168d4:	ldr	r5, [r4]
   168d8:	mov	r0, r7
   168dc:	mov	r1, r5
   168e0:	bl	16110 <__assert_fail@plt+0x51bc>
   168e4:	ldr	r1, [r0]
   168e8:	ldr	r8, [r4, #4]
   168ec:	cmp	r1, #0
   168f0:	beq	168ac <__assert_fail@plt+0x5958>
   168f4:	ldr	r1, [r0, #4]
   168f8:	str	r1, [r4, #4]
   168fc:	str	r4, [r0, #4]
   16900:	b	168c8 <__assert_fail@plt+0x5974>
   16904:	mov	r0, #0
   16908:	str	r0, [r6, #4]
   1690c:	cmp	r9, #0
   16910:	bne	16880 <__assert_fail@plt+0x592c>
   16914:	ldr	r4, [r6]
   16918:	mov	r0, r7
   1691c:	mov	r1, r4
   16920:	bl	16110 <__assert_fail@plt+0x51bc>
   16924:	mov	r5, r0
   16928:	ldr	r0, [r0]
   1692c:	cmp	r0, #0
   16930:	beq	1685c <__assert_fail@plt+0x5908>
   16934:	mov	r0, r7
   16938:	bl	16bc8 <__assert_fail@plt+0x5c74>
   1693c:	cmp	r0, #0
   16940:	beq	16964 <__assert_fail@plt+0x5a10>
   16944:	str	r4, [r0]
   16948:	ldr	r1, [r5, #4]
   1694c:	str	r1, [r0, #4]
   16950:	str	r0, [r5, #4]
   16954:	b	1686c <__assert_fail@plt+0x5918>
   16958:	mov	r0, #1
   1695c:	sub	sp, fp, #28
   16960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16964:	mov	r0, #0
   16968:	sub	sp, fp, #28
   1696c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16970:	push	{r4, r5, r6, r7, fp, lr}
   16974:	add	fp, sp, #16
   16978:	sub	sp, sp, #8
   1697c:	cmp	r1, #0
   16980:	beq	16ae0 <__assert_fail@plt+0x5b8c>
   16984:	mov	r7, r2
   16988:	mov	r5, r1
   1698c:	mov	r4, r0
   16990:	add	r2, sp, #4
   16994:	mov	r6, #0
   16998:	mov	r3, #0
   1699c:	bl	16ae8 <__assert_fail@plt+0x5b94>
   169a0:	cmp	r0, #0
   169a4:	beq	169b4 <__assert_fail@plt+0x5a60>
   169a8:	cmp	r7, #0
   169ac:	strne	r0, [r7]
   169b0:	b	16ad4 <__assert_fail@plt+0x5b80>
   169b4:	vldr	s0, [r4, #8]
   169b8:	vldr	s2, [r4, #12]
   169bc:	ldr	r0, [r4, #20]
   169c0:	vldr	s4, [r0, #8]
   169c4:	vcvt.f32.u32	s0, s0
   169c8:	vcvt.f32.u32	s2, s2
   169cc:	vmul.f32	s0, s4, s0
   169d0:	vcmpe.f32	s0, s2
   169d4:	vmrs	APSR_nzcv, fpscr
   169d8:	bpl	16a6c <__assert_fail@plt+0x5b18>
   169dc:	mov	r0, r4
   169e0:	bl	1645c <__assert_fail@plt+0x5508>
   169e4:	vldr	s0, [r4, #8]
   169e8:	vldr	s4, [r4, #12]
   169ec:	ldr	r0, [r4, #20]
   169f0:	vcvt.f32.u32	s2, s0
   169f4:	vldr	s0, [r0, #8]
   169f8:	vcvt.f32.u32	s4, s4
   169fc:	vmul.f32	s6, s0, s2
   16a00:	vcmpe.f32	s6, s4
   16a04:	vmrs	APSR_nzcv, fpscr
   16a08:	bpl	16a6c <__assert_fail@plt+0x5b18>
   16a0c:	vldr	s4, [r0, #12]
   16a10:	vmul.f32	s2, s4, s2
   16a14:	ldrb	r0, [r0, #16]
   16a18:	vmul.f32	s0, s0, s2
   16a1c:	mvn	r6, #0
   16a20:	vldr	s4, [pc, #188]	; 16ae4 <__assert_fail@plt+0x5b90>
   16a24:	cmp	r0, #0
   16a28:	vseleq.f32	s0, s0, s2
   16a2c:	vcmpe.f32	s0, s4
   16a30:	vmrs	APSR_nzcv, fpscr
   16a34:	bge	16ad4 <__assert_fail@plt+0x5b80>
   16a38:	vcvt.u32.f32	s0, s0
   16a3c:	vmov	r1, s0
   16a40:	mov	r0, r4
   16a44:	bl	1671c <__assert_fail@plt+0x57c8>
   16a48:	cmp	r0, #0
   16a4c:	beq	16ad4 <__assert_fail@plt+0x5b80>
   16a50:	add	r2, sp, #4
   16a54:	mov	r0, r4
   16a58:	mov	r1, r5
   16a5c:	mov	r3, #0
   16a60:	bl	16ae8 <__assert_fail@plt+0x5b94>
   16a64:	cmp	r0, #0
   16a68:	bne	16ae0 <__assert_fail@plt+0x5b8c>
   16a6c:	ldr	r6, [sp, #4]
   16a70:	ldr	r0, [r6]
   16a74:	cmp	r0, #0
   16a78:	beq	16aac <__assert_fail@plt+0x5b58>
   16a7c:	mov	r0, r4
   16a80:	bl	16bc8 <__assert_fail@plt+0x5c74>
   16a84:	cmp	r0, #0
   16a88:	beq	16ad0 <__assert_fail@plt+0x5b7c>
   16a8c:	str	r5, [r0]
   16a90:	ldr	r1, [r6, #4]
   16a94:	str	r1, [r0, #4]
   16a98:	str	r0, [r6, #4]
   16a9c:	ldr	r0, [r4, #16]
   16aa0:	add	r0, r0, #1
   16aa4:	str	r0, [r4, #16]
   16aa8:	b	16ac8 <__assert_fail@plt+0x5b74>
   16aac:	str	r5, [r6]
   16ab0:	ldr	r0, [r4, #12]
   16ab4:	ldr	r1, [r4, #16]
   16ab8:	add	r1, r1, #1
   16abc:	add	r0, r0, #1
   16ac0:	str	r0, [r4, #12]
   16ac4:	str	r1, [r4, #16]
   16ac8:	mov	r6, #1
   16acc:	b	16ad4 <__assert_fail@plt+0x5b80>
   16ad0:	mvn	r6, #0
   16ad4:	mov	r0, r6
   16ad8:	sub	sp, fp, #16
   16adc:	pop	{r4, r5, r6, r7, fp, pc}
   16ae0:	bl	10f18 <abort@plt>
   16ae4:	svcmi	0x00800000
   16ae8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16aec:	add	fp, sp, #24
   16af0:	mov	r8, r3
   16af4:	mov	r4, r2
   16af8:	mov	r7, r1
   16afc:	mov	r5, r0
   16b00:	bl	16110 <__assert_fail@plt+0x51bc>
   16b04:	str	r0, [r4]
   16b08:	ldr	r1, [r0]
   16b0c:	mov	r4, #0
   16b10:	cmp	r1, #0
   16b14:	beq	16bc0 <__assert_fail@plt+0x5c6c>
   16b18:	mov	r6, r0
   16b1c:	cmp	r1, r7
   16b20:	beq	16b38 <__assert_fail@plt+0x5be4>
   16b24:	ldr	r2, [r5, #28]
   16b28:	mov	r0, r7
   16b2c:	blx	r2
   16b30:	cmp	r0, #0
   16b34:	beq	16b5c <__assert_fail@plt+0x5c08>
   16b38:	ldr	r4, [r6]
   16b3c:	cmp	r8, #0
   16b40:	beq	16bc0 <__assert_fail@plt+0x5c6c>
   16b44:	ldr	r1, [r6, #4]
   16b48:	cmp	r1, #0
   16b4c:	beq	16bb8 <__assert_fail@plt+0x5c64>
   16b50:	ldm	r1, {r0, r2}
   16b54:	stm	r6, {r0, r2}
   16b58:	b	16ba8 <__assert_fail@plt+0x5c54>
   16b5c:	ldr	r0, [r6, #4]!
   16b60:	cmp	r0, #0
   16b64:	beq	16bc0 <__assert_fail@plt+0x5c6c>
   16b68:	ldr	r1, [r0]
   16b6c:	cmp	r1, r7
   16b70:	beq	16b90 <__assert_fail@plt+0x5c3c>
   16b74:	ldr	r2, [r5, #28]
   16b78:	mov	r0, r7
   16b7c:	blx	r2
   16b80:	cmp	r0, #0
   16b84:	bne	16b90 <__assert_fail@plt+0x5c3c>
   16b88:	ldr	r6, [r6]
   16b8c:	b	16b5c <__assert_fail@plt+0x5c08>
   16b90:	ldr	r1, [r6]
   16b94:	ldr	r4, [r1]
   16b98:	cmp	r8, #0
   16b9c:	beq	16bc0 <__assert_fail@plt+0x5c6c>
   16ba0:	ldr	r0, [r1, #4]
   16ba4:	str	r0, [r6]
   16ba8:	mov	r0, r5
   16bac:	bl	16ddc <__assert_fail@plt+0x5e88>
   16bb0:	mov	r0, r4
   16bb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16bb8:	mov	r0, #0
   16bbc:	str	r0, [r6]
   16bc0:	mov	r0, r4
   16bc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16bc8:	mov	r1, r0
   16bcc:	ldr	r0, [r0, #36]	; 0x24
   16bd0:	cmp	r0, #0
   16bd4:	ldrne	r2, [r0, #4]
   16bd8:	strne	r2, [r1, #36]	; 0x24
   16bdc:	bxne	lr
   16be0:	mov	r0, #8
   16be4:	b	17084 <__assert_fail@plt+0x6130>
   16be8:	push	{r4, sl, fp, lr}
   16bec:	add	fp, sp, #8
   16bf0:	sub	sp, sp, #8
   16bf4:	mov	r4, r1
   16bf8:	add	r2, sp, #4
   16bfc:	bl	16970 <__assert_fail@plt+0x5a1c>
   16c00:	cmn	r0, #1
   16c04:	beq	16c18 <__assert_fail@plt+0x5cc4>
   16c08:	ldr	r1, [sp, #4]
   16c0c:	cmp	r0, #0
   16c10:	moveq	r4, r1
   16c14:	b	16c1c <__assert_fail@plt+0x5cc8>
   16c18:	mov	r4, #0
   16c1c:	mov	r0, r4
   16c20:	sub	sp, fp, #8
   16c24:	pop	{r4, sl, fp, pc}
   16c28:	push	{r4, r5, r6, sl, fp, lr}
   16c2c:	add	fp, sp, #16
   16c30:	sub	sp, sp, #8
   16c34:	mov	r4, r0
   16c38:	add	r2, sp, #4
   16c3c:	mov	r3, #1
   16c40:	bl	16ae8 <__assert_fail@plt+0x5b94>
   16c44:	mov	r5, r0
   16c48:	cmp	r0, #0
   16c4c:	beq	16d2c <__assert_fail@plt+0x5dd8>
   16c50:	ldr	r0, [r4, #16]
   16c54:	sub	r0, r0, #1
   16c58:	str	r0, [r4, #16]
   16c5c:	ldr	r0, [sp, #4]
   16c60:	ldr	r0, [r0]
   16c64:	cmp	r0, #0
   16c68:	bne	16d2c <__assert_fail@plt+0x5dd8>
   16c6c:	ldr	r0, [r4, #12]
   16c70:	sub	r0, r0, #1
   16c74:	vldr	s0, [r4, #8]
   16c78:	str	r0, [r4, #12]
   16c7c:	ldr	r1, [r4, #20]
   16c80:	vldr	s2, [r1]
   16c84:	vcvt.f32.u32	s0, s0
   16c88:	vmov	s4, r0
   16c8c:	vcvt.f32.u32	s4, s4
   16c90:	vmul.f32	s0, s2, s0
   16c94:	vcmpe.f32	s0, s4
   16c98:	vmrs	APSR_nzcv, fpscr
   16c9c:	ble	16d2c <__assert_fail@plt+0x5dd8>
   16ca0:	mov	r0, r4
   16ca4:	bl	1645c <__assert_fail@plt+0x5508>
   16ca8:	vldr	s0, [r4, #8]
   16cac:	vldr	s2, [r4, #12]
   16cb0:	ldr	r0, [r4, #20]
   16cb4:	vcvt.f32.u32	s0, s0
   16cb8:	vldr	s4, [r0]
   16cbc:	vcvt.f32.u32	s2, s2
   16cc0:	vmul.f32	s4, s4, s0
   16cc4:	vcmpe.f32	s4, s2
   16cc8:	vmrs	APSR_nzcv, fpscr
   16ccc:	ble	16d2c <__assert_fail@plt+0x5dd8>
   16cd0:	vldr	s2, [r0, #4]
   16cd4:	ldrb	r1, [r0, #16]
   16cd8:	vmul.f32	s0, s2, s0
   16cdc:	cmp	r1, #0
   16ce0:	bne	16cec <__assert_fail@plt+0x5d98>
   16ce4:	vldr	s2, [r0, #8]
   16ce8:	vmul.f32	s0, s0, s2
   16cec:	vcvt.u32.f32	s0, s0
   16cf0:	vmov	r1, s0
   16cf4:	mov	r0, r4
   16cf8:	bl	1671c <__assert_fail@plt+0x57c8>
   16cfc:	cmp	r0, #0
   16d00:	bne	16d2c <__assert_fail@plt+0x5dd8>
   16d04:	ldr	r0, [r4, #36]	; 0x24
   16d08:	cmp	r0, #0
   16d0c:	beq	16d24 <__assert_fail@plt+0x5dd0>
   16d10:	ldr	r6, [r0, #4]
   16d14:	bl	13114 <__assert_fail@plt+0x21c0>
   16d18:	cmp	r6, #0
   16d1c:	mov	r0, r6
   16d20:	bne	16d10 <__assert_fail@plt+0x5dbc>
   16d24:	mov	r0, #0
   16d28:	str	r0, [r4, #36]	; 0x24
   16d2c:	mov	r0, r5
   16d30:	sub	sp, fp, #16
   16d34:	pop	{r4, r5, r6, sl, fp, pc}
   16d38:	b	16c28 <__assert_fail@plt+0x5cd4>
   16d3c:	push	{r4, r5, fp, lr}
   16d40:	add	fp, sp, #8
   16d44:	cmp	r0, #10
   16d48:	movls	r0, #10
   16d4c:	orr	r5, r0, #1
   16d50:	mvn	r4, #0
   16d54:	cmn	r5, #1
   16d58:	beq	16d78 <__assert_fail@plt+0x5e24>
   16d5c:	mov	r0, r5
   16d60:	bl	16d8c <__assert_fail@plt+0x5e38>
   16d64:	cmp	r0, #0
   16d68:	bne	16d80 <__assert_fail@plt+0x5e2c>
   16d6c:	add	r5, r5, #2
   16d70:	cmn	r5, #1
   16d74:	bne	16d5c <__assert_fail@plt+0x5e08>
   16d78:	mov	r0, r4
   16d7c:	pop	{r4, r5, fp, pc}
   16d80:	mov	r4, r5
   16d84:	mov	r0, r4
   16d88:	pop	{r4, r5, fp, pc}
   16d8c:	mov	ip, #3
   16d90:	cmp	r0, #10
   16d94:	bcc	16dc8 <__assert_fail@plt+0x5e74>
   16d98:	mov	ip, #3
   16d9c:	mov	r2, #9
   16da0:	mov	r3, #16
   16da4:	udiv	r1, r0, ip
   16da8:	mls	r1, r1, ip, r0
   16dac:	cmp	r1, #0
   16db0:	beq	16dc8 <__assert_fail@plt+0x5e74>
   16db4:	add	r2, r3, r2
   16db8:	add	r3, r3, #8
   16dbc:	add	ip, ip, #2
   16dc0:	cmp	r2, r0
   16dc4:	bcc	16da4 <__assert_fail@plt+0x5e50>
   16dc8:	udiv	r1, r0, ip
   16dcc:	mls	r0, r1, ip, r0
   16dd0:	cmp	r0, #0
   16dd4:	movwne	r0, #1
   16dd8:	bx	lr
   16ddc:	mov	r2, #0
   16de0:	str	r2, [r1]
   16de4:	ldr	r2, [r0, #36]	; 0x24
   16de8:	str	r2, [r1, #4]
   16dec:	str	r1, [r0, #36]	; 0x24
   16df0:	bx	lr
   16df4:	mov	r2, #0
   16df8:	str	r2, [r0, #20]
   16dfc:	str	r2, [r0, #24]
   16e00:	mov	r3, #1
   16e04:	strb	r3, [r0, #28]
   16e08:	str	r1, [r0, r2, lsl #2]
   16e0c:	add	r2, r2, #1
   16e10:	cmp	r2, #4
   16e14:	bne	16e08 <__assert_fail@plt+0x5eb4>
   16e18:	str	r1, [r0, #16]
   16e1c:	bx	lr
   16e20:	ldrb	r0, [r0, #28]
   16e24:	bx	lr
   16e28:	ldr	r2, [r0, #20]
   16e2c:	ldrb	r3, [r0, #28]
   16e30:	eor	r3, r3, #1
   16e34:	add	r2, r2, r3
   16e38:	and	r2, r2, #3
   16e3c:	ldr	ip, [r0, r2, lsl #2]
   16e40:	str	r1, [r0, r2, lsl #2]
   16e44:	str	r2, [r0, #20]
   16e48:	ldr	r1, [r0, #24]
   16e4c:	cmp	r2, r1
   16e50:	addeq	r1, r1, r3
   16e54:	andeq	r1, r1, #3
   16e58:	streq	r1, [r0, #24]
   16e5c:	mov	r1, #0
   16e60:	strb	r1, [r0, #28]
   16e64:	mov	r0, ip
   16e68:	bx	lr
   16e6c:	push	{r4, sl, fp, lr}
   16e70:	add	fp, sp, #8
   16e74:	mov	r4, r0
   16e78:	bl	16e20 <__assert_fail@plt+0x5ecc>
   16e7c:	cmp	r0, #0
   16e80:	bne	16eb8 <__assert_fail@plt+0x5f64>
   16e84:	ldr	r1, [r4, #16]
   16e88:	ldr	r2, [r4, #20]
   16e8c:	ldr	r0, [r4, r2, lsl #2]
   16e90:	str	r1, [r4, r2, lsl #2]
   16e94:	ldr	r1, [r4, #20]
   16e98:	ldr	r2, [r4, #24]
   16e9c:	cmp	r1, r2
   16ea0:	moveq	r1, #1
   16ea4:	strbeq	r1, [r4, #28]
   16ea8:	subne	r1, r1, #1
   16eac:	andne	r1, r1, #3
   16eb0:	strne	r1, [r4, #20]
   16eb4:	pop	{r4, sl, fp, pc}
   16eb8:	bl	10f18 <abort@plt>
   16ebc:	push	{r4, r5, r6, sl, fp, lr}
   16ec0:	add	fp, sp, #16
   16ec4:	mov	r4, r1
   16ec8:	mov	r5, r0
   16ecc:	mov	r0, #0
   16ed0:	strb	r0, [r2, #20]
   16ed4:	add	r6, r2, #19
   16ed8:	mov	r0, r5
   16edc:	mov	r1, r4
   16ee0:	mov	r2, #10
   16ee4:	mov	r3, #0
   16ee8:	bl	17664 <__assert_fail@plt+0x6710>
   16eec:	add	r2, r0, r0, lsl #2
   16ef0:	sub	r2, r5, r2, lsl #1
   16ef4:	orr	r2, r2, #48	; 0x30
   16ef8:	strb	r2, [r6], #-1
   16efc:	rsbs	r2, r5, #9
   16f00:	rscs	r2, r4, #0
   16f04:	mov	r5, r0
   16f08:	mov	r4, r1
   16f0c:	bcc	16ed8 <__assert_fail@plt+0x5f84>
   16f10:	add	r0, r6, #1
   16f14:	pop	{r4, r5, r6, sl, fp, pc}
   16f18:	sub	sp, sp, #8
   16f1c:	push	{fp, lr}
   16f20:	mov	fp, sp
   16f24:	sub	sp, sp, #8
   16f28:	str	r2, [fp, #8]
   16f2c:	str	r3, [fp, #12]
   16f30:	add	r3, fp, #8
   16f34:	orr	r3, r3, #4
   16f38:	str	r3, [sp, #4]
   16f3c:	bl	10db0 <ioctl@plt>
   16f40:	mov	sp, fp
   16f44:	pop	{fp, lr}
   16f48:	add	sp, sp, #8
   16f4c:	bx	lr
   16f50:	sub	sp, sp, #4
   16f54:	push	{fp, lr}
   16f58:	mov	fp, sp
   16f5c:	sub	sp, sp, #4
   16f60:	str	r3, [fp, #8]
   16f64:	mov	r3, #0
   16f68:	tst	r2, #64	; 0x40
   16f6c:	ldrne	r3, [fp, #8]
   16f70:	bl	10e34 <openat64@plt>
   16f74:	bl	16fe8 <__assert_fail@plt+0x6094>
   16f78:	mov	sp, fp
   16f7c:	pop	{fp, lr}
   16f80:	add	sp, sp, #4
   16f84:	bx	lr
   16f88:	push	{r4, r5, r6, sl, fp, lr}
   16f8c:	add	fp, sp, #16
   16f90:	mov	r4, r3
   16f94:	orr	r2, r2, #18688	; 0x4900
   16f98:	orr	r2, r2, #524288	; 0x80000
   16f9c:	bl	16f50 <__assert_fail@plt+0x5ffc>
   16fa0:	mov	r5, r0
   16fa4:	mov	r0, #0
   16fa8:	cmp	r5, #0
   16fac:	bmi	16fe4 <__assert_fail@plt+0x6090>
   16fb0:	mov	r0, r5
   16fb4:	bl	10eac <fdopendir@plt>
   16fb8:	cmp	r0, #0
   16fbc:	beq	16fc8 <__assert_fail@plt+0x6074>
   16fc0:	str	r5, [r4]
   16fc4:	pop	{r4, r5, r6, sl, fp, pc}
   16fc8:	bl	10e4c <__errno_location@plt>
   16fcc:	mov	r4, r0
   16fd0:	ldr	r6, [r0]
   16fd4:	mov	r0, r5
   16fd8:	bl	10f24 <close@plt>
   16fdc:	str	r6, [r4]
   16fe0:	mov	r0, #0
   16fe4:	pop	{r4, r5, r6, sl, fp, pc}
   16fe8:	push	{r4, r5, r6, r7, fp, lr}
   16fec:	add	fp, sp, #16
   16ff0:	mov	r4, r0
   16ff4:	cmp	r0, #2
   16ff8:	bhi	17028 <__assert_fail@plt+0x60d4>
   16ffc:	mov	r0, r4
   17000:	bl	17584 <__assert_fail@plt+0x6630>
   17004:	mov	r5, r0
   17008:	bl	10e4c <__errno_location@plt>
   1700c:	mov	r6, r0
   17010:	ldr	r7, [r0]
   17014:	mov	r0, r4
   17018:	bl	10f24 <close@plt>
   1701c:	str	r7, [r6]
   17020:	mov	r0, r5
   17024:	pop	{r4, r5, r6, r7, fp, pc}
   17028:	mov	r0, r4
   1702c:	pop	{r4, r5, r6, r7, fp, pc}
   17030:	clz	r2, r1
   17034:	lsr	r2, r2, #5
   17038:	clz	r3, r0
   1703c:	lsr	r3, r3, #5
   17040:	orrs	r2, r3, r2
   17044:	movwne	r1, #1
   17048:	movwne	r0, #1
   1704c:	cmp	r1, #0
   17050:	beq	17080 <__assert_fail@plt+0x612c>
   17054:	mvn	r2, #-2147483648	; 0x80000000
   17058:	udiv	r2, r2, r1
   1705c:	cmp	r2, r0
   17060:	bcs	17080 <__assert_fail@plt+0x612c>
   17064:	push	{fp, lr}
   17068:	mov	fp, sp
   1706c:	bl	10e4c <__errno_location@plt>
   17070:	mov	r1, #12
   17074:	str	r1, [r0]
   17078:	mov	r0, #0
   1707c:	pop	{fp, pc}
   17080:	b	10ce4 <calloc@plt>
   17084:	cmp	r0, #0
   17088:	movweq	r0, #1
   1708c:	cmn	r0, #1
   17090:	ble	17098 <__assert_fail@plt+0x6144>
   17094:	b	10de0 <malloc@plt>
   17098:	push	{fp, lr}
   1709c:	mov	fp, sp
   170a0:	bl	10e4c <__errno_location@plt>
   170a4:	mov	r1, #12
   170a8:	str	r1, [r0]
   170ac:	mov	r0, #0
   170b0:	pop	{fp, pc}
   170b4:	push	{fp, lr}
   170b8:	mov	fp, sp
   170bc:	cmp	r0, #0
   170c0:	beq	170dc <__assert_fail@plt+0x6188>
   170c4:	cmp	r1, #0
   170c8:	beq	170e8 <__assert_fail@plt+0x6194>
   170cc:	cmn	r1, #1
   170d0:	ble	170f4 <__assert_fail@plt+0x61a0>
   170d4:	pop	{fp, lr}
   170d8:	b	10d68 <realloc@plt>
   170dc:	mov	r0, r1
   170e0:	pop	{fp, lr}
   170e4:	b	17084 <__assert_fail@plt+0x6130>
   170e8:	bl	13114 <__assert_fail@plt+0x21c0>
   170ec:	mov	r0, #0
   170f0:	pop	{fp, pc}
   170f4:	bl	10e4c <__errno_location@plt>
   170f8:	mov	r1, #12
   170fc:	str	r1, [r0]
   17100:	mov	r0, #0
   17104:	pop	{fp, pc}
   17108:	push	{r4, r5, r6, sl, fp, lr}
   1710c:	add	fp, sp, #16
   17110:	rsb	lr, r2, #64	; 0x40
   17114:	lsr	ip, r0, lr
   17118:	rsb	r3, lr, #32
   1711c:	orr	r3, ip, r1, lsl r3
   17120:	rsbs	r5, r2, #32
   17124:	lsrpl	r3, r1, r5
   17128:	lsl	r4, r0, r2
   1712c:	subs	r6, r2, #32
   17130:	movwpl	r4, #0
   17134:	orr	ip, r3, r4
   17138:	lsr	r3, r0, r5
   1713c:	orr	r2, r3, r1, lsl r2
   17140:	lslpl	r2, r0, r6
   17144:	lsr	r0, r1, lr
   17148:	cmp	r5, #0
   1714c:	movwpl	r0, #0
   17150:	orr	r1, r0, r2
   17154:	mov	r0, ip
   17158:	pop	{r4, r5, r6, sl, fp, pc}
   1715c:	push	{r4, r5, fp, lr}
   17160:	add	fp, sp, #8
   17164:	lsr	ip, r0, r2
   17168:	rsb	r3, r2, #32
   1716c:	orr	ip, ip, r1, lsl r3
   17170:	subs	lr, r2, #32
   17174:	lsrpl	ip, r1, lr
   17178:	rsb	r4, r2, #64	; 0x40
   1717c:	lsl	r5, r0, r4
   17180:	cmp	r3, #0
   17184:	movwpl	r5, #0
   17188:	orr	ip, r5, ip
   1718c:	rsb	r5, r4, #32
   17190:	lsr	r5, r0, r5
   17194:	orr	r4, r5, r1, lsl r4
   17198:	cmp	r3, #0
   1719c:	lslpl	r4, r0, r3
   171a0:	lsr	r0, r1, r2
   171a4:	cmp	lr, #0
   171a8:	movwpl	r0, #0
   171ac:	orr	r1, r4, r0
   171b0:	mov	r0, ip
   171b4:	pop	{r4, r5, fp, pc}
   171b8:	rsb	r1, r1, #32
   171bc:	ror	r0, r0, r1
   171c0:	bx	lr
   171c4:	ror	r0, r0, r1
   171c8:	bx	lr
   171cc:	rsb	r1, r1, #32
   171d0:	ror	r0, r0, r1
   171d4:	bx	lr
   171d8:	ror	r0, r0, r1
   171dc:	bx	lr
   171e0:	and	r2, r1, #15
   171e4:	lsl	r2, r0, r2
   171e8:	rsb	r1, r1, #0
   171ec:	and	r1, r1, #15
   171f0:	orr	r0, r2, r0, lsr r1
   171f4:	uxth	r0, r0
   171f8:	bx	lr
   171fc:	rsb	r2, r1, #0
   17200:	and	r2, r2, #15
   17204:	lsl	r2, r0, r2
   17208:	and	r1, r1, #15
   1720c:	orr	r0, r2, r0, lsr r1
   17210:	uxth	r0, r0
   17214:	bx	lr
   17218:	and	r2, r1, #7
   1721c:	lsl	r2, r0, r2
   17220:	rsb	r1, r1, #0
   17224:	and	r1, r1, #7
   17228:	orr	r0, r2, r0, lsr r1
   1722c:	uxtb	r0, r0
   17230:	bx	lr
   17234:	rsb	r2, r1, #0
   17238:	and	r2, r2, #7
   1723c:	lsl	r2, r0, r2
   17240:	and	r1, r1, #7
   17244:	orr	r0, r2, r0, lsr r1
   17248:	uxtb	r0, r0
   1724c:	bx	lr
   17250:	mov	r1, #0
   17254:	movw	r2, #62998	; 0xf616
   17258:	movt	r2, #149	; 0x95
   1725c:	str	r1, [r0, #16]
   17260:	str	r1, [r0, #20]
   17264:	str	r2, [r0, #24]
   17268:	bx	lr
   1726c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17270:	add	fp, sp, #24
   17274:	mov	r5, r1
   17278:	mov	r4, r0
   1727c:	ldr	r0, [r0, #24]
   17280:	movw	r1, #62998	; 0xf616
   17284:	movt	r1, #149	; 0x95
   17288:	cmp	r0, r1
   1728c:	bne	17324 <__assert_fail@plt+0x63d0>
   17290:	add	r6, r4, #8
   17294:	add	r1, r4, #16
   17298:	ldrd	r2, [r1]
   1729c:	orrs	r0, r2, r3
   172a0:	beq	172d8 <__assert_fail@plt+0x6384>
   172a4:	ldm	r4, {r0, r7}
   172a8:	ldrd	r8, [r5, #96]	; 0x60
   172ac:	eor	r7, r9, r7
   172b0:	eor	r0, r8, r0
   172b4:	orrs	r0, r0, r7
   172b8:	bne	172d8 <__assert_fail@plt+0x6384>
   172bc:	ldm	r6, {r0, r7}
   172c0:	ldrd	r8, [r5]
   172c4:	eor	r7, r9, r7
   172c8:	eor	r0, r8, r0
   172cc:	orrs	r0, r0, r7
   172d0:	mov	r0, #1
   172d4:	beq	17318 <__assert_fail@plt+0x63c4>
   172d8:	adds	r8, r2, #1
   172dc:	adc	r9, r3, #0
   172e0:	strd	r8, [r1]
   172e4:	mov	r0, r8
   172e8:	mov	r1, r9
   172ec:	bl	17344 <__assert_fail@plt+0x63f0>
   172f0:	mov	r1, r0
   172f4:	mov	r0, #0
   172f8:	cmp	r1, #0
   172fc:	beq	17318 <__assert_fail@plt+0x63c4>
   17300:	orrs	r1, r8, r9
   17304:	beq	1731c <__assert_fail@plt+0x63c8>
   17308:	ldrd	r2, [r5]
   1730c:	strd	r2, [r6]
   17310:	ldrd	r2, [r5, #96]	; 0x60
   17314:	strd	r2, [r4]
   17318:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1731c:	mov	r0, #1
   17320:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17324:	movw	r0, #31644	; 0x7b9c
   17328:	movt	r0, #1
   1732c:	movw	r1, #31668	; 0x7bb4
   17330:	movt	r1, #1
   17334:	movw	r3, #31682	; 0x7bc2
   17338:	movt	r3, #1
   1733c:	mov	r2, #60	; 0x3c
   17340:	bl	10f54 <__assert_fail@plt>
   17344:	subs	r2, r0, #1
   17348:	and	r0, r0, r2
   1734c:	sbc	r2, r1, #0
   17350:	and	r1, r1, r2
   17354:	orr	r0, r0, r1
   17358:	clz	r0, r0
   1735c:	lsr	r0, r0, #5
   17360:	bx	lr
   17364:	sub	sp, sp, #8
   17368:	push	{fp, lr}
   1736c:	mov	fp, sp
   17370:	sub	sp, sp, #8
   17374:	str	r2, [fp, #8]
   17378:	str	r3, [fp, #12]
   1737c:	add	r2, fp, #8
   17380:	str	r2, [sp, #4]
   17384:	cmp	r1, #11
   17388:	bhi	173c8 <__assert_fail@plt+0x6474>
   1738c:	mov	r2, #1
   17390:	movw	r3, #1300	; 0x514
   17394:	tst	r3, r2, lsl r1
   17398:	bne	17418 <__assert_fail@plt+0x64c4>
   1739c:	movw	r3, #2570	; 0xa0a
   173a0:	tst	r3, r2, lsl r1
   173a4:	bne	173f0 <__assert_fail@plt+0x649c>
   173a8:	cmp	r1, #0
   173ac:	bne	173c8 <__assert_fail@plt+0x6474>
   173b0:	ldr	r1, [sp, #4]
   173b4:	add	r2, r1, #4
   173b8:	str	r2, [sp, #4]
   173bc:	ldr	r1, [r1]
   173c0:	bl	1743c <__assert_fail@plt+0x64e8>
   173c4:	b	1742c <__assert_fail@plt+0x64d8>
   173c8:	sub	r2, r1, #1024	; 0x400
   173cc:	cmp	r2, #10
   173d0:	bhi	17418 <__assert_fail@plt+0x64c4>
   173d4:	mov	ip, #1
   173d8:	movw	r3, #645	; 0x285
   173dc:	tst	r3, ip, lsl r2
   173e0:	bne	17418 <__assert_fail@plt+0x64c4>
   173e4:	movw	r3, #1282	; 0x502
   173e8:	tst	r3, ip, lsl r2
   173ec:	beq	173f8 <__assert_fail@plt+0x64a4>
   173f0:	bl	10e7c <fcntl64@plt>
   173f4:	b	1742c <__assert_fail@plt+0x64d8>
   173f8:	cmp	r2, #6
   173fc:	bne	17418 <__assert_fail@plt+0x64c4>
   17400:	ldr	r1, [sp, #4]
   17404:	add	r2, r1, #4
   17408:	str	r2, [sp, #4]
   1740c:	ldr	r1, [r1]
   17410:	bl	17448 <__assert_fail@plt+0x64f4>
   17414:	b	1742c <__assert_fail@plt+0x64d8>
   17418:	ldr	r2, [sp, #4]
   1741c:	add	r3, r2, #4
   17420:	str	r3, [sp, #4]
   17424:	ldr	r2, [r2]
   17428:	bl	10e7c <fcntl64@plt>
   1742c:	mov	sp, fp
   17430:	pop	{fp, lr}
   17434:	add	sp, sp, #8
   17438:	bx	lr
   1743c:	mov	r2, r1
   17440:	mov	r1, #0
   17444:	b	10e7c <fcntl64@plt>
   17448:	push	{r4, r5, r6, r7, fp, lr}
   1744c:	add	fp, sp, #16
   17450:	mov	r5, r1
   17454:	mov	r6, r0
   17458:	movw	r7, #33104	; 0x8150
   1745c:	movt	r7, #2
   17460:	ldr	r0, [r7]
   17464:	cmp	r0, #0
   17468:	bmi	174cc <__assert_fail@plt+0x6578>
   1746c:	mov	r0, r6
   17470:	movw	r1, #1030	; 0x406
   17474:	mov	r2, r5
   17478:	bl	10e7c <fcntl64@plt>
   1747c:	mov	r4, r0
   17480:	cmn	r0, #1
   17484:	bgt	174b8 <__assert_fail@plt+0x6564>
   17488:	bl	10e4c <__errno_location@plt>
   1748c:	ldr	r0, [r0]
   17490:	cmp	r0, #22
   17494:	bne	174b8 <__assert_fail@plt+0x6564>
   17498:	mov	r0, r6
   1749c:	mov	r1, r5
   174a0:	bl	1743c <__assert_fail@plt+0x64e8>
   174a4:	mov	r4, r0
   174a8:	cmp	r0, #0
   174ac:	bmi	1751c <__assert_fail@plt+0x65c8>
   174b0:	mvn	r0, #0
   174b4:	b	174bc <__assert_fail@plt+0x6568>
   174b8:	mov	r0, #1
   174bc:	str	r0, [r7]
   174c0:	cmp	r4, #0
   174c4:	bpl	174e4 <__assert_fail@plt+0x6590>
   174c8:	b	1751c <__assert_fail@plt+0x65c8>
   174cc:	mov	r0, r6
   174d0:	mov	r1, r5
   174d4:	bl	1743c <__assert_fail@plt+0x64e8>
   174d8:	mov	r4, r0
   174dc:	cmp	r4, #0
   174e0:	bmi	1751c <__assert_fail@plt+0x65c8>
   174e4:	ldr	r0, [r7]
   174e8:	cmn	r0, #1
   174ec:	bne	1751c <__assert_fail@plt+0x65c8>
   174f0:	mov	r0, r4
   174f4:	mov	r1, #1
   174f8:	bl	10e7c <fcntl64@plt>
   174fc:	cmp	r0, #0
   17500:	bmi	17524 <__assert_fail@plt+0x65d0>
   17504:	orr	r2, r0, #1
   17508:	mov	r0, r4
   1750c:	mov	r1, #2
   17510:	bl	10e7c <fcntl64@plt>
   17514:	cmn	r0, #1
   17518:	beq	17524 <__assert_fail@plt+0x65d0>
   1751c:	mov	r0, r4
   17520:	pop	{r4, r5, r6, r7, fp, pc}
   17524:	bl	10e4c <__errno_location@plt>
   17528:	mov	r5, r0
   1752c:	ldr	r6, [r0]
   17530:	mov	r0, r4
   17534:	bl	10f24 <close@plt>
   17538:	str	r6, [r5]
   1753c:	mvn	r4, #0
   17540:	mov	r0, r4
   17544:	pop	{r4, r5, r6, r7, fp, pc}
   17548:	sub	sp, sp, #8
   1754c:	push	{fp, lr}
   17550:	mov	fp, sp
   17554:	sub	sp, sp, #8
   17558:	str	r2, [fp, #8]
   1755c:	str	r3, [fp, #12]
   17560:	mov	r2, #0
   17564:	tst	r1, #64	; 0x40
   17568:	ldrne	r2, [fp, #8]
   1756c:	bl	10dc8 <open64@plt>
   17570:	bl	16fe8 <__assert_fail@plt+0x6094>
   17574:	mov	sp, fp
   17578:	pop	{fp, lr}
   1757c:	add	sp, sp, #8
   17580:	bx	lr
   17584:	mov	r1, #0
   17588:	mov	r2, #3
   1758c:	b	17364 <__assert_fail@plt+0x6410>
   17590:	cmp	r3, #0
   17594:	cmpeq	r2, #0
   17598:	bne	175bc <__assert_fail@plt+0x6668>
   1759c:	cmp	r1, #0
   175a0:	movlt	r1, #-2147483648	; 0x80000000
   175a4:	movlt	r0, #0
   175a8:	blt	175b8 <__assert_fail@plt+0x6664>
   175ac:	cmpeq	r0, #0
   175b0:	mvnne	r1, #-2147483648	; 0x80000000
   175b4:	mvnne	r0, #0
   175b8:	b	176a0 <__assert_fail@plt+0x674c>
   175bc:	sub	sp, sp, #8
   175c0:	push	{sp, lr}
   175c4:	cmp	r1, #0
   175c8:	blt	175e8 <__assert_fail@plt+0x6694>
   175cc:	cmp	r3, #0
   175d0:	blt	1761c <__assert_fail@plt+0x66c8>
   175d4:	bl	176b0 <__assert_fail@plt+0x675c>
   175d8:	ldr	lr, [sp, #4]
   175dc:	add	sp, sp, #8
   175e0:	pop	{r2, r3}
   175e4:	bx	lr
   175e8:	rsbs	r0, r0, #0
   175ec:	sbc	r1, r1, r1, lsl #1
   175f0:	cmp	r3, #0
   175f4:	blt	17640 <__assert_fail@plt+0x66ec>
   175f8:	bl	176b0 <__assert_fail@plt+0x675c>
   175fc:	ldr	lr, [sp, #4]
   17600:	add	sp, sp, #8
   17604:	pop	{r2, r3}
   17608:	rsbs	r0, r0, #0
   1760c:	sbc	r1, r1, r1, lsl #1
   17610:	rsbs	r2, r2, #0
   17614:	sbc	r3, r3, r3, lsl #1
   17618:	bx	lr
   1761c:	rsbs	r2, r2, #0
   17620:	sbc	r3, r3, r3, lsl #1
   17624:	bl	176b0 <__assert_fail@plt+0x675c>
   17628:	ldr	lr, [sp, #4]
   1762c:	add	sp, sp, #8
   17630:	pop	{r2, r3}
   17634:	rsbs	r0, r0, #0
   17638:	sbc	r1, r1, r1, lsl #1
   1763c:	bx	lr
   17640:	rsbs	r2, r2, #0
   17644:	sbc	r3, r3, r3, lsl #1
   17648:	bl	176b0 <__assert_fail@plt+0x675c>
   1764c:	ldr	lr, [sp, #4]
   17650:	add	sp, sp, #8
   17654:	pop	{r2, r3}
   17658:	rsbs	r2, r2, #0
   1765c:	sbc	r3, r3, r3, lsl #1
   17660:	bx	lr
   17664:	cmp	r3, #0
   17668:	cmpeq	r2, #0
   1766c:	bne	17684 <__assert_fail@plt+0x6730>
   17670:	cmp	r1, #0
   17674:	cmpeq	r0, #0
   17678:	mvnne	r1, #0
   1767c:	mvnne	r0, #0
   17680:	b	176a0 <__assert_fail@plt+0x674c>
   17684:	sub	sp, sp, #8
   17688:	push	{sp, lr}
   1768c:	bl	176b0 <__assert_fail@plt+0x675c>
   17690:	ldr	lr, [sp, #4]
   17694:	add	sp, sp, #8
   17698:	pop	{r2, r3}
   1769c:	bx	lr
   176a0:	push	{r1, lr}
   176a4:	mov	r0, #8
   176a8:	bl	10cf0 <raise@plt>
   176ac:	pop	{r1, pc}
   176b0:	cmp	r1, r3
   176b4:	cmpeq	r0, r2
   176b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176bc:	mov	r4, r0
   176c0:	movcc	r0, #0
   176c4:	mov	r5, r1
   176c8:	ldr	lr, [sp, #36]	; 0x24
   176cc:	movcc	r1, r0
   176d0:	bcc	177cc <__assert_fail@plt+0x6878>
   176d4:	cmp	r3, #0
   176d8:	clzeq	ip, r2
   176dc:	clzne	ip, r3
   176e0:	addeq	ip, ip, #32
   176e4:	cmp	r5, #0
   176e8:	clzeq	r1, r4
   176ec:	addeq	r1, r1, #32
   176f0:	clzne	r1, r5
   176f4:	sub	ip, ip, r1
   176f8:	sub	sl, ip, #32
   176fc:	lsl	r9, r3, ip
   17700:	rsb	fp, ip, #32
   17704:	orr	r9, r9, r2, lsl sl
   17708:	orr	r9, r9, r2, lsr fp
   1770c:	lsl	r8, r2, ip
   17710:	cmp	r5, r9
   17714:	cmpeq	r4, r8
   17718:	movcc	r0, #0
   1771c:	movcc	r1, r0
   17720:	bcc	1773c <__assert_fail@plt+0x67e8>
   17724:	mov	r0, #1
   17728:	subs	r4, r4, r8
   1772c:	lsl	r1, r0, sl
   17730:	orr	r1, r1, r0, lsr fp
   17734:	lsl	r0, r0, ip
   17738:	sbc	r5, r5, r9
   1773c:	cmp	ip, #0
   17740:	beq	177cc <__assert_fail@plt+0x6878>
   17744:	lsr	r6, r8, #1
   17748:	orr	r6, r6, r9, lsl #31
   1774c:	lsr	r7, r9, #1
   17750:	mov	r2, ip
   17754:	b	17778 <__assert_fail@plt+0x6824>
   17758:	subs	r3, r4, r6
   1775c:	sbc	r8, r5, r7
   17760:	adds	r3, r3, r3
   17764:	adc	r8, r8, r8
   17768:	adds	r4, r3, #1
   1776c:	adc	r5, r8, #0
   17770:	subs	r2, r2, #1
   17774:	beq	17794 <__assert_fail@plt+0x6840>
   17778:	cmp	r5, r7
   1777c:	cmpeq	r4, r6
   17780:	bcs	17758 <__assert_fail@plt+0x6804>
   17784:	adds	r4, r4, r4
   17788:	adc	r5, r5, r5
   1778c:	subs	r2, r2, #1
   17790:	bne	17778 <__assert_fail@plt+0x6824>
   17794:	lsr	r3, r4, ip
   17798:	orr	r3, r3, r5, lsl fp
   1779c:	lsr	r2, r5, ip
   177a0:	orr	r3, r3, r5, lsr sl
   177a4:	adds	r0, r0, r4
   177a8:	mov	r4, r3
   177ac:	lsl	r3, r2, ip
   177b0:	orr	r3, r3, r4, lsl sl
   177b4:	lsl	ip, r4, ip
   177b8:	orr	r3, r3, r4, lsr fp
   177bc:	adc	r1, r1, r5
   177c0:	subs	r0, r0, ip
   177c4:	mov	r5, r2
   177c8:	sbc	r1, r1, r3
   177cc:	cmp	lr, #0
   177d0:	strdne	r4, [lr]
   177d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   177dc:	mov	r7, r0
   177e0:	ldr	r6, [pc, #72]	; 17830 <__assert_fail@plt+0x68dc>
   177e4:	ldr	r5, [pc, #72]	; 17834 <__assert_fail@plt+0x68e0>
   177e8:	add	r6, pc, r6
   177ec:	add	r5, pc, r5
   177f0:	sub	r6, r6, r5
   177f4:	mov	r8, r1
   177f8:	mov	r9, r2
   177fc:	bl	10cb8 <fstatfs64@plt-0x20>
   17800:	asrs	r6, r6, #2
   17804:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17808:	mov	r4, #0
   1780c:	add	r4, r4, #1
   17810:	ldr	r3, [r5], #4
   17814:	mov	r2, r9
   17818:	mov	r1, r8
   1781c:	mov	r0, r7
   17820:	blx	r3
   17824:	cmp	r6, r4
   17828:	bne	1780c <__assert_fail@plt+0x68b8>
   1782c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17830:	andeq	r0, r1, ip, lsl r7
   17834:	andeq	r0, r1, r4, lsl r7
   17838:	bx	lr
   1783c:	mov	r2, r1
   17840:	mov	r1, r0
   17844:	mov	r0, #3
   17848:	b	10ef4 <__xstat64@plt>
   1784c:	mov	r2, r1
   17850:	mov	r1, r0
   17854:	mov	r0, #3
   17858:	b	10d8c <__fxstat64@plt>
   1785c:	mov	r2, r1
   17860:	mov	r1, r0
   17864:	mov	r0, #3
   17868:	b	10f30 <__lxstat64@plt>
   1786c:	push	{lr}		; (str lr, [sp, #-4]!)
   17870:	sub	sp, sp, #12
   17874:	str	r3, [sp]
   17878:	mov	r3, r2
   1787c:	mov	r2, r1
   17880:	mov	r1, r0
   17884:	mov	r0, #3
   17888:	bl	10d80 <__fxstatat64@plt>
   1788c:	add	sp, sp, #12
   17890:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00017894 <.fini>:
   17894:	push	{r3, lr}
   17898:	pop	{r3, pc}
