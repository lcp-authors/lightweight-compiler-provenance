
../repos/dvidelabs-flatcc-3b39ef7/test/flatc_compat/flatc_compat:     file format elf32-littlearm


Disassembly of section .init:

00010e34 <.init>:
   10e34:	push	{r3, lr}
   10e38:	bl	10f98 <_start@@Base+0x3c>
   10e3c:	pop	{r3, pc}

Disassembly of section .plt:

00010e40 <strcmp@plt-0x14>:
   10e40:	push	{lr}		; (str lr, [sp, #-4]!)
   10e44:	ldr	lr, [pc, #4]	; 10e50 <strcmp@plt-0x4>
   10e48:	add	lr, pc, lr
   10e4c:	ldr	pc, [lr, #8]!
   10e50:			; <UNDEFINED> instruction: 0x000141b0

00010e54 <strcmp@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #20, 20	; 0x14000
   10e5c:	ldr	pc, [ip, #432]!	; 0x1b0

00010e60 <printf@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #20, 20	; 0x14000
   10e68:	ldr	pc, [ip, #424]!	; 0x1a8

00010e6c <fopen@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #20, 20	; 0x14000
   10e74:	ldr	pc, [ip, #416]!	; 0x1a0

00010e78 <free@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #20, 20	; 0x14000
   10e80:	ldr	pc, [ip, #408]!	; 0x198

00010e84 <memcpy@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #20, 20	; 0x14000
   10e8c:	ldr	pc, [ip, #400]!	; 0x190

00010e90 <ftell@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #20, 20	; 0x14000
   10e98:	ldr	pc, [ip, #392]!	; 0x188

00010e9c <rewind@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #20, 20	; 0x14000
   10ea4:	ldr	pc, [ip, #384]!	; 0x180

00010ea8 <fwrite@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #20, 20	; 0x14000
   10eb0:	ldr	pc, [ip, #376]!	; 0x178

00010eb4 <puts@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #20, 20	; 0x14000
   10ebc:	ldr	pc, [ip, #368]!	; 0x170

00010ec0 <malloc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #20, 20	; 0x14000
   10ec8:	ldr	pc, [ip, #360]!	; 0x168

00010ecc <__libc_start_main@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #20, 20	; 0x14000
   10ed4:	ldr	pc, [ip, #352]!	; 0x160

00010ed8 <__gmon_start__@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #20, 20	; 0x14000
   10ee0:	ldr	pc, [ip, #344]!	; 0x158

00010ee4 <exit@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #20, 20	; 0x14000
   10eec:	ldr	pc, [ip, #336]!	; 0x150

00010ef0 <fprintf@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #20, 20	; 0x14000
   10ef8:	ldr	pc, [ip, #328]!	; 0x148

00010efc <posix_memalign@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #20, 20	; 0x14000
   10f04:	ldr	pc, [ip, #320]!	; 0x140

00010f08 <strncpy@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #20, 20	; 0x14000
   10f10:	ldr	pc, [ip, #312]!	; 0x138

00010f14 <fclose@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #20, 20	; 0x14000
   10f1c:	ldr	pc, [ip, #304]!	; 0x130

00010f20 <fputc@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #20, 20	; 0x14000
   10f28:	ldr	pc, [ip, #296]!	; 0x128

00010f2c <fread_unlocked@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #20, 20	; 0x14000
   10f34:	ldr	pc, [ip, #288]!	; 0x120

00010f38 <fseek@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #20, 20	; 0x14000
   10f40:	ldr	pc, [ip, #280]!	; 0x118

00010f44 <abort@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #20, 20	; 0x14000
   10f4c:	ldr	pc, [ip, #272]!	; 0x110

00010f50 <__assert_fail@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #20, 20	; 0x14000
   10f58:	ldr	pc, [ip, #264]!	; 0x108

Disassembly of section .text:

00010f5c <_start@@Base>:
   10f5c:	mov	fp, #0
   10f60:	mov	lr, #0
   10f64:	pop	{r1}		; (ldr r1, [sp], #4)
   10f68:	mov	r2, sp
   10f6c:	push	{r2}		; (str r2, [sp, #-4]!)
   10f70:	push	{r0}		; (str r0, [sp, #-4]!)
   10f74:	ldr	ip, [pc, #16]	; 10f8c <_start@@Base+0x30>
   10f78:	push	{ip}		; (str ip, [sp, #-4]!)
   10f7c:	ldr	r0, [pc, #12]	; 10f90 <_start@@Base+0x34>
   10f80:	ldr	r3, [pc, #12]	; 10f94 <_start@@Base+0x38>
   10f84:	bl	10ecc <__libc_start_main@plt>
   10f88:	bl	10f44 <abort@plt>
   10f8c:	andeq	r3, r1, ip, lsl #13
   10f90:	ldrdeq	r1, [r1], -r4
   10f94:	andeq	r3, r1, ip, lsr #12
   10f98:	ldr	r3, [pc, #20]	; 10fb4 <_start@@Base+0x58>
   10f9c:	ldr	r2, [pc, #20]	; 10fb8 <_start@@Base+0x5c>
   10fa0:	add	r3, pc, r3
   10fa4:	ldr	r2, [r3, r2]
   10fa8:	cmp	r2, #0
   10fac:	bxeq	lr
   10fb0:	b	10ed8 <__gmon_start__@plt>
   10fb4:	andeq	r4, r1, r8, asr r0
   10fb8:	andeq	r0, r0, r4, rrx
   10fbc:	ldr	r0, [pc, #24]	; 10fdc <_start@@Base+0x80>
   10fc0:	ldr	r3, [pc, #24]	; 10fe0 <_start@@Base+0x84>
   10fc4:	cmp	r3, r0
   10fc8:	bxeq	lr
   10fcc:	ldr	r3, [pc, #16]	; 10fe4 <_start@@Base+0x88>
   10fd0:	cmp	r3, #0
   10fd4:	bxeq	lr
   10fd8:	bx	r3
   10fdc:	andeq	r5, r2, r4, ror r0
   10fe0:	andeq	r5, r2, r4, ror r0
   10fe4:	andeq	r0, r0, r0
   10fe8:	ldr	r0, [pc, #36]	; 11014 <_start@@Base+0xb8>
   10fec:	ldr	r1, [pc, #36]	; 11018 <_start@@Base+0xbc>
   10ff0:	sub	r1, r1, r0
   10ff4:	asr	r1, r1, #2
   10ff8:	add	r1, r1, r1, lsr #31
   10ffc:	asrs	r1, r1, #1
   11000:	bxeq	lr
   11004:	ldr	r3, [pc, #16]	; 1101c <_start@@Base+0xc0>
   11008:	cmp	r3, #0
   1100c:	bxeq	lr
   11010:	bx	r3
   11014:	andeq	r5, r2, r4, ror r0
   11018:	andeq	r5, r2, r4, ror r0
   1101c:	andeq	r0, r0, r0
   11020:	push	{r4, lr}
   11024:	ldr	r4, [pc, #24]	; 11044 <_start@@Base+0xe8>
   11028:	ldrb	r3, [r4]
   1102c:	cmp	r3, #0
   11030:	popne	{r4, pc}
   11034:	bl	10fbc <_start@@Base+0x60>
   11038:	mov	r3, #1
   1103c:	strb	r3, [r4]
   11040:	pop	{r4, pc}
   11044:	andeq	r5, r2, ip, ror r0
   11048:	b	10fe8 <_start@@Base+0x8c>

0001104c <verify_monster@@Base>:
   1104c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11050:	add	fp, sp, #24
   11054:	cmp	r0, #0
   11058:	beq	110c8 <verify_monster@@Base+0x7c>
   1105c:	mov	r4, r0
   11060:	ldr	r0, [r0, #4]
   11064:	movw	r1, #20301	; 0x4f4d
   11068:	movt	r1, #21326	; 0x534e
   1106c:	cmp	r0, r1
   11070:	bne	110c8 <verify_monster@@Base+0x7c>
   11074:	ldr	r7, [r4]
   11078:	mov	r5, r4
   1107c:	ldr	r0, [r5, r7]!
   11080:	mov	r6, r5
   11084:	ldrh	r8, [r6, -r0]!
   11088:	cmp	r8, #9
   1108c:	bls	110d4 <verify_monster@@Base+0x88>
   11090:	ldrh	r0, [r6, #8]
   11094:	cmp	r0, #0
   11098:	beq	110d4 <verify_monster@@Base+0x88>
   1109c:	add	r0, r5, r0
   110a0:	ldrh	r0, [r0]
   110a4:	cmp	r0, #80	; 0x50
   110a8:	bne	110d4 <verify_monster@@Base+0x88>
   110ac:	ldrh	r0, [r6, #4]
   110b0:	cmp	r0, #0
   110b4:	addsne	r0, r5, r0
   110b8:	bne	110e8 <verify_monster@@Base+0x9c>
   110bc:	movw	r0, #15152	; 0x3b30
   110c0:	movt	r0, #1
   110c4:	b	110dc <verify_monster@@Base+0x90>
   110c8:	movw	r0, #15120	; 0x3b10
   110cc:	movt	r0, #1
   110d0:	b	110dc <verify_monster@@Base+0x90>
   110d4:	movw	r0, #15984	; 0x3e70
   110d8:	movt	r0, #1
   110dc:	bl	10eb4 <puts@plt>
   110e0:	mvn	r0, #0
   110e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   110e8:	sub	r1, r0, r4
   110ec:	tst	r1, #15
   110f0:	beq	11100 <verify_monster@@Base+0xb4>
   110f4:	movw	r0, #15936	; 0x3e40
   110f8:	movt	r0, #1
   110fc:	b	110dc <verify_monster@@Base+0x90>
   11100:	vldr	s0, [r0]
   11104:	vmov.f32	s2, #112	; 0x3f800000  1.0
   11108:	vcmp.f32	s0, s2
   1110c:	vmrs	APSR_nzcv, fpscr
   11110:	beq	11120 <verify_monster@@Base+0xd4>
   11114:	movw	r0, #15888	; 0x3e10
   11118:	movt	r0, #1
   1111c:	b	110dc <verify_monster@@Base+0x90>
   11120:	vldr	s0, [r0, #4]
   11124:	vmov.f32	s2, #0	; 0x40000000  2.0
   11128:	vcmp.f32	s0, s2
   1112c:	vmrs	APSR_nzcv, fpscr
   11130:	beq	11140 <verify_monster@@Base+0xf4>
   11134:	movw	r0, #15840	; 0x3de0
   11138:	movt	r0, #1
   1113c:	b	110dc <verify_monster@@Base+0x90>
   11140:	vldr	s0, [r0, #8]
   11144:	vmov.f32	s2, #8	; 0x40400000  3.0
   11148:	vcmp.f32	s0, s2
   1114c:	vmrs	APSR_nzcv, fpscr
   11150:	beq	11160 <verify_monster@@Base+0x114>
   11154:	movw	r0, #15792	; 0x3db0
   11158:	movt	r0, #1
   1115c:	b	110dc <verify_monster@@Base+0x90>
   11160:	vldr	d16, [r0, #16]
   11164:	vmov.f64	d17, #8	; 0x40400000  3.0
   11168:	vcmp.f64	d16, d17
   1116c:	vmrs	APSR_nzcv, fpscr
   11170:	beq	11180 <verify_monster@@Base+0x134>
   11174:	movw	r0, #15760	; 0x3d90
   11178:	movt	r0, #1
   1117c:	b	110dc <verify_monster@@Base+0x90>
   11180:	ldrb	r1, [r0, #24]
   11184:	cmp	r1, #2
   11188:	bne	111ac <verify_monster@@Base+0x160>
   1118c:	ldrh	r1, [r0, #26]
   11190:	cmp	r1, #5
   11194:	ldrbeq	r0, [r0, #28]
   11198:	cmpeq	r0, #6
   1119c:	beq	111b8 <verify_monster@@Base+0x16c>
   111a0:	movw	r0, #15696	; 0x3d50
   111a4:	movt	r0, #1
   111a8:	b	110dc <verify_monster@@Base+0x90>
   111ac:	movw	r0, #15728	; 0x3d70
   111b0:	movt	r0, #1
   111b4:	b	110dc <verify_monster@@Base+0x90>
   111b8:	cmp	r8, #12
   111bc:	bcc	115d4 <verify_monster@@Base+0x588>
   111c0:	ldrh	r1, [r6, #10]
   111c4:	cmp	r1, #0
   111c8:	beq	115d4 <verify_monster@@Base+0x588>
   111cc:	mov	r0, r5
   111d0:	ldr	r1, [r0, r1]!
   111d4:	ldr	r1, [r0, r1]!
   111d8:	cmp	r1, #9
   111dc:	bne	11204 <verify_monster@@Base+0x1b8>
   111e0:	movw	r1, #14009	; 0x36b9
   111e4:	add	r0, r0, #4
   111e8:	movt	r1, #1
   111ec:	bl	10e54 <strcmp@plt>
   111f0:	cmp	r0, #0
   111f4:	beq	11210 <verify_monster@@Base+0x1c4>
   111f8:	movw	r0, #15184	; 0x3b50
   111fc:	movt	r0, #1
   11200:	b	110dc <verify_monster@@Base+0x90>
   11204:	movw	r0, #15664	; 0x3d30
   11208:	movt	r0, #1
   1120c:	b	110dc <verify_monster@@Base+0x90>
   11210:	cmp	r8, #16
   11214:	bcc	112bc <verify_monster@@Base+0x270>
   11218:	ldrh	r0, [r6, #14]
   1121c:	cmp	r0, #0
   11220:	beq	112bc <verify_monster@@Base+0x270>
   11224:	mov	r2, r5
   11228:	ldr	r1, [r2, r0]!
   1122c:	ldr	r2, [r2, r1]
   11230:	cmp	r2, #5
   11234:	bne	112bc <verify_monster@@Base+0x270>
   11238:	add	r1, r7, r1
   1123c:	add	r0, r1, r0
   11240:	mov	r1, #0
   11244:	add	r0, r4, r0
   11248:	add	r0, r0, #4
   1124c:	ldrb	r2, [r0, r1]
   11250:	cmp	r1, r2
   11254:	bne	112c8 <verify_monster@@Base+0x27c>
   11258:	add	r1, r1, #1
   1125c:	cmp	r1, #5
   11260:	bcc	1124c <verify_monster@@Base+0x200>
   11264:	cmp	r8, #26
   11268:	bcc	112dc <verify_monster@@Base+0x290>
   1126c:	ldrh	r1, [r6, #24]
   11270:	cmp	r1, #0
   11274:	beq	112dc <verify_monster@@Base+0x290>
   11278:	mov	r0, r5
   1127c:	ldr	r1, [r0, r1]!
   11280:	ldr	r1, [r0, r1]!
   11284:	cmp	r1, #2
   11288:	bne	112e8 <verify_monster@@Base+0x29c>
   1128c:	add	r4, r0, #4
   11290:	movw	r1, #14048	; 0x36e0
   11294:	ldr	r0, [r4]
   11298:	movt	r1, #1
   1129c:	add	r0, r4, r0
   112a0:	add	r0, r0, #4
   112a4:	bl	10e54 <strcmp@plt>
   112a8:	cmp	r0, #0
   112ac:	beq	112f4 <verify_monster@@Base+0x2a8>
   112b0:	movw	r0, #15536	; 0x3cb0
   112b4:	movt	r0, #1
   112b8:	b	110dc <verify_monster@@Base+0x90>
   112bc:	movw	r0, #15632	; 0x3d10
   112c0:	movt	r0, #1
   112c4:	b	110dc <verify_monster@@Base+0x90>
   112c8:	movw	r0, #14019	; 0x36c3
   112cc:	movt	r0, #1
   112d0:	bl	10e60 <printf@plt>
   112d4:	mvn	r0, #0
   112d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   112dc:	movw	r0, #15216	; 0x3b70
   112e0:	movt	r0, #1
   112e4:	b	110dc <verify_monster@@Base+0x90>
   112e8:	movw	r0, #15584	; 0x3ce0
   112ec:	movt	r0, #1
   112f0:	b	110dc <verify_monster@@Base+0x90>
   112f4:	ldr	r0, [r4, #4]!
   112f8:	movw	r1, #14054	; 0x36e6
   112fc:	movt	r1, #1
   11300:	add	r0, r4, r0
   11304:	add	r0, r0, #4
   11308:	bl	10e54 <strcmp@plt>
   1130c:	cmp	r0, #0
   11310:	beq	11320 <verify_monster@@Base+0x2d4>
   11314:	movw	r0, #15488	; 0x3c80
   11318:	movt	r0, #1
   1131c:	b	110dc <verify_monster@@Base+0x90>
   11320:	ldrh	r0, [r6, #18]
   11324:	cmp	r0, #0
   11328:	beq	1135c <verify_monster@@Base+0x310>
   1132c:	ldrb	r0, [r5, r0]
   11330:	cmp	r0, #1
   11334:	bne	1135c <verify_monster@@Base+0x310>
   11338:	ldrh	r0, [r6, #20]
   1133c:	cmp	r0, #0
   11340:	movne	r1, r5
   11344:	ldrne	r0, [r1, r0]!
   11348:	addsne	r0, r1, r0
   1134c:	bne	11368 <verify_monster@@Base+0x31c>
   11350:	movw	r0, #15248	; 0x3b90
   11354:	movt	r0, #1
   11358:	b	110dc <verify_monster@@Base+0x90>
   1135c:	movw	r0, #15094	; 0x3af6
   11360:	movt	r0, #1
   11364:	b	110dc <verify_monster@@Base+0x90>
   11368:	ldr	r2, [r0]
   1136c:	mov	r1, r0
   11370:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   11374:	cmp	r2, #12
   11378:	bcc	115d4 <verify_monster@@Base+0x588>
   1137c:	ldrh	r1, [r1, #10]
   11380:	cmp	r1, #0
   11384:	beq	115d4 <verify_monster@@Base+0x588>
   11388:	ldr	r1, [r0, r1]!
   1138c:	add	r0, r0, r1
   11390:	movw	r1, #14060	; 0x36ec
   11394:	add	r0, r0, #4
   11398:	movt	r1, #1
   1139c:	bl	10e54 <strcmp@plt>
   113a0:	cmp	r0, #0
   113a4:	beq	113b4 <verify_monster@@Base+0x368>
   113a8:	movw	r0, #15456	; 0x3c60
   113ac:	movt	r0, #1
   113b0:	b	110dc <verify_monster@@Base+0x90>
   113b4:	ldrh	r1, [r6, #22]
   113b8:	cmp	r1, #0
   113bc:	beq	11598 <verify_monster@@Base+0x54c>
   113c0:	mov	r0, r5
   113c4:	ldr	r1, [r0, r1]!
   113c8:	ldr	r1, [r0, r1]!
   113cc:	cmp	r1, #2
   113d0:	bne	11598 <verify_monster@@Base+0x54c>
   113d4:	add	r0, r0, #4
   113d8:	ldrh	r1, [r0]
   113dc:	cmp	r1, #10
   113e0:	bne	115a4 <verify_monster@@Base+0x558>
   113e4:	ldrb	r1, [r0, #2]
   113e8:	cmp	r1, #20
   113ec:	bne	115b0 <verify_monster@@Base+0x564>
   113f0:	ldrh	r1, [r0, #4]
   113f4:	cmp	r1, #30
   113f8:	bne	115bc <verify_monster@@Base+0x570>
   113fc:	ldrb	r0, [r0, #6]
   11400:	cmp	r0, #40	; 0x28
   11404:	bne	115c8 <verify_monster@@Base+0x57c>
   11408:	cmp	r8, #38	; 0x26
   1140c:	bcc	115f4 <verify_monster@@Base+0x5a8>
   11410:	ldrh	r0, [r6, #36]	; 0x24
   11414:	cmp	r0, #0
   11418:	beq	115f4 <verify_monster@@Base+0x5a8>
   1141c:	ldr	r1, [r5, r0]
   11420:	movw	r0, #51521	; 0xc941
   11424:	movt	r0, #56697	; 0xdd79
   11428:	cmp	r1, r0
   1142c:	bne	115f4 <verify_monster@@Base+0x5a8>
   11430:	cmp	r8, #40	; 0x28
   11434:	bcc	11614 <verify_monster@@Base+0x5c8>
   11438:	ldrh	r1, [r6, #38]	; 0x26
   1143c:	cmp	r1, #0
   11440:	beq	11614 <verify_monster@@Base+0x5c8>
   11444:	ldr	r1, [r5, r1]
   11448:	cmp	r1, r0
   1144c:	bne	11614 <verify_monster@@Base+0x5c8>
   11450:	cmp	r8, #42	; 0x2a
   11454:	bcc	11634 <verify_monster@@Base+0x5e8>
   11458:	ldrh	r0, [r6, #40]	; 0x28
   1145c:	cmp	r0, #0
   11460:	beq	11634 <verify_monster@@Base+0x5e8>
   11464:	mov	r1, r5
   11468:	ldr	r2, [r1, r0]!
   1146c:	movw	r0, #37249	; 0x9181
   11470:	movt	r0, #62075	; 0xf27b
   11474:	ldr	r3, [r1, #4]
   11478:	movw	r1, #32973	; 0x80cd
   1147c:	eor	r2, r2, r0
   11480:	movt	r1, #28175	; 0x6e0f
   11484:	eor	r3, r3, r1
   11488:	orrs	r2, r2, r3
   1148c:	bne	11634 <verify_monster@@Base+0x5e8>
   11490:	cmp	r8, #44	; 0x2c
   11494:	bcc	11654 <verify_monster@@Base+0x608>
   11498:	ldrh	r2, [r6, #42]	; 0x2a
   1149c:	cmp	r2, #0
   114a0:	beq	11654 <verify_monster@@Base+0x608>
   114a4:	mov	r3, r5
   114a8:	ldr	r2, [r3, r2]!
   114ac:	eor	r0, r2, r0
   114b0:	ldr	r2, [r3, #4]
   114b4:	eor	r1, r2, r1
   114b8:	orrs	r0, r0, r1
   114bc:	bne	11654 <verify_monster@@Base+0x608>
   114c0:	cmp	r8, #46	; 0x2e
   114c4:	bcc	11674 <verify_monster@@Base+0x628>
   114c8:	ldrh	r0, [r6, #44]	; 0x2c
   114cc:	cmp	r0, #0
   114d0:	beq	11674 <verify_monster@@Base+0x628>
   114d4:	ldr	r1, [r5, r0]
   114d8:	movw	r0, #42097	; 0xa471
   114dc:	movt	r0, #36481	; 0x8e81
   114e0:	cmp	r1, r0
   114e4:	bne	11674 <verify_monster@@Base+0x628>
   114e8:	cmp	r8, #48	; 0x30
   114ec:	bcc	11694 <verify_monster@@Base+0x648>
   114f0:	ldrh	r1, [r6, #46]	; 0x2e
   114f4:	cmp	r1, #0
   114f8:	beq	11694 <verify_monster@@Base+0x648>
   114fc:	ldr	r1, [r5, r1]
   11500:	cmp	r1, r0
   11504:	bne	11694 <verify_monster@@Base+0x648>
   11508:	cmp	r8, #50	; 0x32
   1150c:	bcc	116b4 <verify_monster@@Base+0x668>
   11510:	ldrh	r0, [r6, #48]	; 0x30
   11514:	cmp	r0, #0
   11518:	beq	116b4 <verify_monster@@Base+0x668>
   1151c:	mov	r1, r5
   11520:	ldr	r2, [r1, r0]!
   11524:	movw	r0, #56817	; 0xddf1
   11528:	movt	r0, #51047	; 0xc767
   1152c:	ldr	r3, [r1, #4]
   11530:	movw	r1, #18652	; 0x48dc
   11534:	eor	r2, r2, r0
   11538:	movt	r1, #17401	; 0x43f9
   1153c:	eor	r3, r3, r1
   11540:	orrs	r2, r2, r3
   11544:	bne	116b4 <verify_monster@@Base+0x668>
   11548:	cmp	r8, #52	; 0x34
   1154c:	bcc	11578 <verify_monster@@Base+0x52c>
   11550:	ldrh	r2, [r6, #50]	; 0x32
   11554:	cmp	r2, #0
   11558:	beq	11578 <verify_monster@@Base+0x52c>
   1155c:	ldr	r2, [r5, r2]!
   11560:	eor	r0, r2, r0
   11564:	ldr	r2, [r5, #4]
   11568:	eor	r1, r2, r1
   1156c:	orrs	r0, r0, r1
   11570:	mov	r0, #0
   11574:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   11578:	movw	r0, #14578	; 0x38f2
   1157c:	movw	r1, #14118	; 0x3726
   11580:	movw	r3, #14199	; 0x3777
   11584:	mov	r2, #155	; 0x9b
   11588:	movt	r0, #1
   1158c:	movt	r1, #1
   11590:	movt	r3, #1
   11594:	bl	10f50 <__assert_fail@plt>
   11598:	movw	r0, #15408	; 0x3c30
   1159c:	movt	r0, #1
   115a0:	b	110dc <verify_monster@@Base+0x90>
   115a4:	movw	r0, #15376	; 0x3c10
   115a8:	movt	r0, #1
   115ac:	b	110dc <verify_monster@@Base+0x90>
   115b0:	movw	r0, #15344	; 0x3bf0
   115b4:	movt	r0, #1
   115b8:	b	110dc <verify_monster@@Base+0x90>
   115bc:	movw	r0, #15312	; 0x3bd0
   115c0:	movt	r0, #1
   115c4:	b	110dc <verify_monster@@Base+0x90>
   115c8:	movw	r0, #15280	; 0x3bb0
   115cc:	movt	r0, #1
   115d0:	b	110dc <verify_monster@@Base+0x90>
   115d4:	movw	r0, #15029	; 0x3ab5
   115d8:	movw	r1, #14850	; 0x3a02
   115dc:	movw	r3, #14948	; 0x3a64
   115e0:	movw	r2, #699	; 0x2bb
   115e4:	movt	r0, #1
   115e8:	movt	r1, #1
   115ec:	movt	r3, #1
   115f0:	bl	10f50 <__assert_fail@plt>
   115f4:	movw	r0, #14065	; 0x36f1
   115f8:	movw	r1, #14118	; 0x3726
   115fc:	movw	r3, #14199	; 0x3777
   11600:	mov	r2, #148	; 0x94
   11604:	movt	r0, #1
   11608:	movt	r1, #1
   1160c:	movt	r3, #1
   11610:	bl	10f50 <__assert_fail@plt>
   11614:	movw	r0, #14226	; 0x3792
   11618:	movw	r1, #14118	; 0x3726
   1161c:	movw	r3, #14199	; 0x3777
   11620:	mov	r2, #149	; 0x95
   11624:	movt	r0, #1
   11628:	movt	r1, #1
   1162c:	movt	r3, #1
   11630:	bl	10f50 <__assert_fail@plt>
   11634:	movw	r0, #14279	; 0x37c7
   11638:	movw	r1, #14118	; 0x3726
   1163c:	movw	r3, #14199	; 0x3777
   11640:	mov	r2, #150	; 0x96
   11644:	movt	r0, #1
   11648:	movt	r1, #1
   1164c:	movt	r3, #1
   11650:	bl	10f50 <__assert_fail@plt>
   11654:	movw	r0, #14342	; 0x3806
   11658:	movw	r1, #14118	; 0x3726
   1165c:	movw	r3, #14199	; 0x3777
   11660:	mov	r2, #151	; 0x97
   11664:	movt	r0, #1
   11668:	movt	r1, #1
   1166c:	movt	r3, #1
   11670:	bl	10f50 <__assert_fail@plt>
   11674:	movw	r0, #14405	; 0x3845
   11678:	movw	r1, #14118	; 0x3726
   1167c:	movw	r3, #14199	; 0x3777
   11680:	mov	r2, #152	; 0x98
   11684:	movt	r0, #1
   11688:	movt	r1, #1
   1168c:	movt	r3, #1
   11690:	bl	10f50 <__assert_fail@plt>
   11694:	movw	r0, #14460	; 0x387c
   11698:	movw	r1, #14118	; 0x3726
   1169c:	movw	r3, #14199	; 0x3777
   116a0:	mov	r2, #153	; 0x99
   116a4:	movt	r0, #1
   116a8:	movt	r1, #1
   116ac:	movt	r3, #1
   116b0:	bl	10f50 <__assert_fail@plt>
   116b4:	movw	r0, #14514	; 0x38b2
   116b8:	movw	r1, #14118	; 0x3726
   116bc:	movw	r3, #14199	; 0x3777
   116c0:	mov	r2, #154	; 0x9a
   116c4:	movt	r0, #1
   116c8:	movt	r1, #1
   116cc:	movt	r3, #1
   116d0:	bl	10f50 <__assert_fail@plt>

000116d4 <main@@Base>:
   116d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116d8:	add	fp, sp, #28
   116dc:	sub	sp, sp, #20
   116e0:	sub	r2, r0, #1
   116e4:	cmp	r2, #2
   116e8:	bcs	11a10 <main@@Base+0x33c>
   116ec:	cmp	r0, #2
   116f0:	bne	11708 <main@@Base+0x34>
   116f4:	ldr	r0, [r1, #4]
   116f8:	movw	r1, #20592	; 0x5070
   116fc:	movt	r1, #2
   11700:	str	r0, [r1]
   11704:	b	11714 <main@@Base+0x40>
   11708:	movw	r0, #20592	; 0x5070
   1170c:	movt	r0, #2
   11710:	ldr	r0, [r0]
   11714:	movw	r1, #15062	; 0x3ad6
   11718:	movt	r1, #1
   1171c:	bl	10e6c <fopen@plt>
   11720:	mov	r8, #0
   11724:	cmp	r0, #0
   11728:	beq	119d4 <main@@Base+0x300>
   1172c:	mov	r1, #0
   11730:	mov	r2, #2
   11734:	mov	r5, r0
   11738:	mov	r7, #0
   1173c:	bl	10f38 <fseek@plt>
   11740:	mov	r0, r5
   11744:	bl	10e90 <ftell@plt>
   11748:	mov	r4, r0
   1174c:	cmp	r0, #1024	; 0x400
   11750:	bhi	119c8 <main@@Base+0x2f4>
   11754:	mov	r0, r5
   11758:	bl	10e9c <rewind@plt>
   1175c:	cmp	r4, #0
   11760:	mov	r0, r4
   11764:	movweq	r0, #1
   11768:	bl	10ec0 <malloc@plt>
   1176c:	cmp	r0, #0
   11770:	beq	119c8 <main@@Base+0x2f4>
   11774:	mov	r6, r0
   11778:	mov	r1, #0
   1177c:	mov	r7, r1
   11780:	add	r0, r6, r1
   11784:	sub	r2, r4, r1
   11788:	mov	r1, #1
   1178c:	mov	r3, r5
   11790:	bl	10f2c <fread_unlocked@plt>
   11794:	add	r1, r0, r7
   11798:	cmp	r0, #0
   1179c:	bne	1177c <main@@Base+0xa8>
   117a0:	mov	r0, r5
   117a4:	bl	10f14 <fclose@plt>
   117a8:	cmp	r4, r7
   117ac:	bne	117b8 <main@@Base+0xe4>
   117b0:	mov	r7, r6
   117b4:	b	117c4 <main@@Base+0xf0>
   117b8:	mov	r0, r6
   117bc:	bl	10e78 <free@plt>
   117c0:	mov	r7, #0
   117c4:	add	r0, r4, #255	; 0xff
   117c8:	mov	r6, sp
   117cc:	mov	r1, #256	; 0x100
   117d0:	str	r8, [sp]
   117d4:	bic	r2, r0, #255	; 0xff
   117d8:	mov	r0, r6
   117dc:	bl	10efc <posix_memalign@plt>
   117e0:	ldr	r5, [sp]
   117e4:	cmp	r0, #0
   117e8:	cmpne	r5, #0
   117ec:	beq	11800 <main@@Base+0x12c>
   117f0:	mov	r0, r5
   117f4:	bl	10e78 <free@plt>
   117f8:	mov	r5, #0
   117fc:	str	r5, [sp]
   11800:	mov	r0, r5
   11804:	mov	r1, r7
   11808:	mov	r2, r4
   1180c:	bl	10e84 <memcpy@plt>
   11810:	mov	r0, r7
   11814:	bl	10e78 <free@plt>
   11818:	movw	r9, #20600	; 0x5078
   1181c:	cmp	r5, #0
   11820:	movt	r9, #2
   11824:	ldr	r7, [r9]
   11828:	bne	11850 <main@@Base+0x17c>
   1182c:	movw	r0, #20592	; 0x5070
   11830:	movw	r1, #14706	; 0x3972
   11834:	movt	r0, #2
   11838:	movt	r1, #1
   1183c:	ldr	r2, [r0]
   11840:	mov	r0, r7
   11844:	bl	10ef0 <fprintf@plt>
   11848:	mvn	r4, #0
   1184c:	b	119bc <main@@Base+0x2e8>
   11850:	movw	r1, #15065	; 0x3ad9
   11854:	movw	r2, #13988	; 0x36a4
   11858:	mov	r0, r7
   1185c:	movt	r1, #1
   11860:	movt	r2, #1
   11864:	bl	10ef0 <fprintf@plt>
   11868:	cmp	r4, #0
   1186c:	beq	1194c <main@@Base+0x278>
   11870:	movw	sl, #15084	; 0x3aec
   11874:	mov	r9, #0
   11878:	movt	sl, #1
   1187c:	ands	r8, r9, #15
   11880:	bne	118b8 <main@@Base+0x1e4>
   11884:	cmp	r9, #0
   11888:	beq	118a0 <main@@Base+0x1cc>
   1188c:	movw	r1, #15070	; 0x3ade
   11890:	mov	r0, r7
   11894:	mov	r2, r6
   11898:	movt	r1, #1
   1189c:	bl	10ef0 <fprintf@plt>
   118a0:	movw	r1, #15076	; 0x3ae4
   118a4:	mov	r0, r7
   118a8:	mov	r2, r9
   118ac:	movt	r1, #1
   118b0:	bl	10ef0 <fprintf@plt>
   118b4:	b	118cc <main@@Base+0x1f8>
   118b8:	tst	r9, #7
   118bc:	bne	118cc <main@@Base+0x1f8>
   118c0:	mov	r0, #32
   118c4:	mov	r1, r7
   118c8:	bl	10f20 <fputc@plt>
   118cc:	ldrb	r2, [r5, r9]
   118d0:	mov	r0, r7
   118d4:	mov	r1, sl
   118d8:	bl	10ef0 <fprintf@plt>
   118dc:	ldrb	r0, [r5, r9]
   118e0:	add	r9, r9, #1
   118e4:	sub	r1, r0, #32
   118e8:	uxtb	r1, r1
   118ec:	cmp	r1, #94	; 0x5e
   118f0:	mov	r1, #0
   118f4:	movwhi	r0, #46	; 0x2e
   118f8:	cmp	r4, r9
   118fc:	strb	r0, [r6, r8]
   11900:	add	r0, r6, r8
   11904:	strb	r1, [r0, #1]
   11908:	bne	1187c <main@@Base+0x1a8>
   1190c:	movw	r9, #20600	; 0x5078
   11910:	tst	r4, #15
   11914:	movt	r9, #2
   11918:	beq	1194c <main@@Base+0x278>
   1191c:	movw	r8, #15090	; 0x3af2
   11920:	add	r6, r4, #1
   11924:	movt	r8, #1
   11928:	mov	r0, r8
   1192c:	mov	r1, #3
   11930:	mov	r2, #1
   11934:	mov	r3, r7
   11938:	bl	10ea8 <fwrite@plt>
   1193c:	add	r0, r6, #1
   11940:	tst	r6, #15
   11944:	mov	r6, r0
   11948:	bne	11928 <main@@Base+0x254>
   1194c:	movw	r1, #15070	; 0x3ade
   11950:	mov	r2, sp
   11954:	mov	r0, r7
   11958:	movt	r1, #1
   1195c:	bl	10ef0 <fprintf@plt>
   11960:	movw	r2, #14743	; 0x3997
   11964:	movw	r3, #6712	; 0x1a38
   11968:	mov	r0, r5
   1196c:	mov	r1, r4
   11970:	movt	r2, #1
   11974:	movt	r3, #1
   11978:	bl	12e24 <flatcc_verify_table_as_root@@Base>
   1197c:	cmp	r0, #0
   11980:	bne	119dc <main@@Base+0x308>
   11984:	movw	r2, #14743	; 0x3997
   11988:	movw	r3, #6712	; 0x1a38
   1198c:	mov	r0, r5
   11990:	mov	r1, r4
   11994:	movt	r2, #1
   11998:	movt	r3, #1
   1199c:	bl	12e24 <flatcc_verify_table_as_root@@Base>
   119a0:	cmp	r0, #0
   119a4:	bne	119f0 <main@@Base+0x31c>
   119a8:	mov	r0, r5
   119ac:	bl	1104c <verify_monster@@Base>
   119b0:	mov	r4, r0
   119b4:	mov	r0, r5
   119b8:	bl	10e78 <free@plt>
   119bc:	mov	r0, r4
   119c0:	sub	sp, fp, #28
   119c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119c8:	mov	r0, r5
   119cc:	bl	10f14 <fclose@plt>
   119d0:	b	117c4 <main@@Base+0xf0>
   119d4:	mov	r4, #0
   119d8:	b	117c0 <main@@Base+0xec>
   119dc:	ldr	r3, [r9]
   119e0:	movw	r0, #14748	; 0x399c
   119e4:	mov	r1, #38	; 0x26
   119e8:	movt	r0, #1
   119ec:	b	11a00 <main@@Base+0x32c>
   119f0:	ldr	r3, [r9]
   119f4:	movw	r0, #14787	; 0x39c3
   119f8:	mov	r1, #62	; 0x3e
   119fc:	movt	r0, #1
   11a00:	mov	r2, #1
   11a04:	bl	10ea8 <fwrite@plt>
   11a08:	mvn	r4, #0
   11a0c:	b	119b4 <main@@Base+0x2e0>
   11a10:	movw	r0, #20600	; 0x5078
   11a14:	mov	r1, #63	; 0x3f
   11a18:	mov	r2, #1
   11a1c:	movt	r0, #2
   11a20:	ldr	r3, [r0]
   11a24:	movw	r0, #14642	; 0x3932
   11a28:	movt	r0, #1
   11a2c:	bl	10ea8 <fwrite@plt>
   11a30:	mov	r0, #1
   11a34:	bl	10ee4 <exit@plt>
   11a38:	push	{r4, r5, r6, r7, fp, lr}
   11a3c:	add	fp, sp, #16
   11a40:	sub	sp, sp, #8
   11a44:	mov	r1, #0
   11a48:	mov	r2, #32
   11a4c:	mov	r3, #16
   11a50:	mov	r4, r0
   11a54:	bl	123b4 <flatcc_verify_field@@Base>
   11a58:	cmp	r0, #0
   11a5c:	bne	11e64 <main@@Base+0x790>
   11a60:	mov	r0, r4
   11a64:	mov	r1, #2
   11a68:	mov	r2, #2
   11a6c:	mov	r3, #2
   11a70:	bl	123b4 <flatcc_verify_field@@Base>
   11a74:	cmp	r0, #0
   11a78:	bne	11e64 <main@@Base+0x790>
   11a7c:	mov	r0, r4
   11a80:	mov	r1, #1
   11a84:	mov	r2, #2
   11a88:	mov	r3, #2
   11a8c:	bl	123b4 <flatcc_verify_field@@Base>
   11a90:	cmp	r0, #0
   11a94:	bne	11e64 <main@@Base+0x790>
   11a98:	mov	r0, r4
   11a9c:	mov	r1, #3
   11aa0:	mov	r2, #1
   11aa4:	bl	1242c <flatcc_verify_string_field@@Base>
   11aa8:	cmp	r0, #0
   11aac:	bne	11e64 <main@@Base+0x790>
   11ab0:	mov	r0, r4
   11ab4:	mov	r1, #6
   11ab8:	mov	r2, #1
   11abc:	mov	r3, #1
   11ac0:	mov	r5, #1
   11ac4:	bl	123b4 <flatcc_verify_field@@Base>
   11ac8:	cmp	r0, #0
   11acc:	bne	11e64 <main@@Base+0x790>
   11ad0:	mvn	r0, #0
   11ad4:	mov	r1, #5
   11ad8:	mov	r2, #0
   11adc:	mov	r3, #1
   11ae0:	str	r5, [sp]
   11ae4:	str	r0, [sp, #4]
   11ae8:	mov	r0, r4
   11aec:	bl	12534 <flatcc_verify_vector_field@@Base>
   11af0:	cmp	r0, #0
   11af4:	bne	11e64 <main@@Base+0x790>
   11af8:	movw	r3, #6712	; 0x1a38
   11afc:	mov	r0, r4
   11b00:	mov	r1, #11
   11b04:	mov	r2, #0
   11b08:	movt	r3, #1
   11b0c:	bl	12828 <flatcc_verify_table_vector_field@@Base>
   11b10:	cmp	r0, #0
   11b14:	bne	11e64 <main@@Base+0x790>
   11b18:	mov	r0, r4
   11b1c:	mov	r1, #10
   11b20:	mov	r2, #0
   11b24:	bl	125dc <flatcc_verify_string_vector_field@@Base>
   11b28:	cmp	r0, #0
   11b2c:	bne	11e64 <main@@Base+0x790>
   11b30:	mov	r0, r4
   11b34:	mov	r1, #28
   11b38:	mov	r2, #0
   11b3c:	bl	125dc <flatcc_verify_string_vector_field@@Base>
   11b40:	cmp	r0, #0
   11b44:	bne	11e64 <main@@Base+0x790>
   11b48:	mvn	r0, #0
   11b4c:	mov	r1, #1
   11b50:	mov	r2, #0
   11b54:	mov	r3, #1
   11b58:	str	r1, [sp]
   11b5c:	str	r0, [sp, #4]
   11b60:	mov	r0, r4
   11b64:	mov	r1, #24
   11b68:	bl	12534 <flatcc_verify_vector_field@@Base>
   11b6c:	cmp	r0, #0
   11b70:	bne	11e64 <main@@Base+0x790>
   11b74:	mvn	r0, #-536870912	; 0xe0000000
   11b78:	mov	r1, #4
   11b7c:	mov	r2, #0
   11b80:	mov	r3, #8
   11b84:	str	r1, [sp]
   11b88:	str	r0, [sp, #4]
   11b8c:	mov	r0, r4
   11b90:	mov	r1, #29
   11b94:	bl	12534 <flatcc_verify_vector_field@@Base>
   11b98:	cmp	r0, #0
   11b9c:	bne	11e64 <main@@Base+0x790>
   11ba0:	movw	r5, #6712	; 0x1a38
   11ba4:	mov	r0, r4
   11ba8:	mov	r1, #12
   11bac:	mov	r2, #0
   11bb0:	movt	r5, #1
   11bb4:	mov	r3, r5
   11bb8:	bl	12724 <flatcc_verify_table_field@@Base>
   11bbc:	cmp	r0, #0
   11bc0:	bne	11e64 <main@@Base+0x790>
   11bc4:	movw	r3, #7820	; 0x1e8c
   11bc8:	mov	r0, r4
   11bcc:	mov	r1, #8
   11bd0:	mov	r2, #0
   11bd4:	movt	r3, #1
   11bd8:	bl	132a0 <flatcc_verify_union_field@@Base>
   11bdc:	cmp	r0, #0
   11be0:	bne	11e64 <main@@Base+0x790>
   11be4:	mvn	r6, #-1073741824	; 0xc0000000
   11be8:	mov	r7, #2
   11bec:	mov	r0, r4
   11bf0:	mov	r1, #9
   11bf4:	mov	r2, #0
   11bf8:	mov	r3, #4
   11bfc:	str	r7, [sp]
   11c00:	str	r6, [sp, #4]
   11c04:	bl	12534 <flatcc_verify_vector_field@@Base>
   11c08:	cmp	r0, #0
   11c0c:	bne	11e64 <main@@Base+0x790>
   11c10:	mov	r0, r4
   11c14:	mov	r1, #31
   11c18:	mov	r2, #0
   11c1c:	mov	r3, #4
   11c20:	str	r7, [sp]
   11c24:	str	r6, [sp, #4]
   11c28:	bl	12534 <flatcc_verify_vector_field@@Base>
   11c2c:	cmp	r0, #0
   11c30:	bne	11e64 <main@@Base+0x790>
   11c34:	mov	r0, #1
   11c38:	mov	r1, #13
   11c3c:	mov	r2, #0
   11c40:	mov	r3, #0
   11c44:	stm	sp, {r0, r5}
   11c48:	mov	r0, r4
   11c4c:	bl	130f0 <flatcc_verify_table_as_nested_root@@Base>
   11c50:	cmp	r0, #0
   11c54:	bne	11e64 <main@@Base+0x790>
   11c58:	movw	r3, #7864	; 0x1eb8
   11c5c:	mov	r0, r4
   11c60:	mov	r1, #14
   11c64:	mov	r2, #0
   11c68:	movt	r3, #1
   11c6c:	bl	12724 <flatcc_verify_table_field@@Base>
   11c70:	cmp	r0, #0
   11c74:	bne	11e64 <main@@Base+0x790>
   11c78:	mov	r0, r4
   11c7c:	mov	r1, #15
   11c80:	mov	r2, #1
   11c84:	mov	r3, #1
   11c88:	bl	123b4 <flatcc_verify_field@@Base>
   11c8c:	cmp	r0, #0
   11c90:	bne	11e64 <main@@Base+0x790>
   11c94:	mov	r0, r4
   11c98:	mov	r1, #16
   11c9c:	mov	r2, #4
   11ca0:	mov	r3, #4
   11ca4:	bl	123b4 <flatcc_verify_field@@Base>
   11ca8:	cmp	r0, #0
   11cac:	bne	11e64 <main@@Base+0x790>
   11cb0:	mov	r0, r4
   11cb4:	mov	r1, #17
   11cb8:	mov	r2, #4
   11cbc:	mov	r3, #4
   11cc0:	bl	123b4 <flatcc_verify_field@@Base>
   11cc4:	cmp	r0, #0
   11cc8:	bne	11e64 <main@@Base+0x790>
   11ccc:	mov	r0, r4
   11cd0:	mov	r1, #18
   11cd4:	mov	r2, #8
   11cd8:	mov	r3, #8
   11cdc:	bl	123b4 <flatcc_verify_field@@Base>
   11ce0:	cmp	r0, #0
   11ce4:	bne	11e64 <main@@Base+0x790>
   11ce8:	mov	r0, r4
   11cec:	mov	r1, #19
   11cf0:	mov	r2, #8
   11cf4:	mov	r3, #8
   11cf8:	bl	123b4 <flatcc_verify_field@@Base>
   11cfc:	cmp	r0, #0
   11d00:	bne	11e64 <main@@Base+0x790>
   11d04:	mov	r0, r4
   11d08:	mov	r1, #20
   11d0c:	mov	r2, #4
   11d10:	mov	r3, #4
   11d14:	bl	123b4 <flatcc_verify_field@@Base>
   11d18:	cmp	r0, #0
   11d1c:	bne	11e64 <main@@Base+0x790>
   11d20:	mov	r0, r4
   11d24:	mov	r1, #21
   11d28:	mov	r2, #4
   11d2c:	mov	r3, #4
   11d30:	bl	123b4 <flatcc_verify_field@@Base>
   11d34:	cmp	r0, #0
   11d38:	bne	11e64 <main@@Base+0x790>
   11d3c:	mov	r0, r4
   11d40:	mov	r1, #22
   11d44:	mov	r2, #8
   11d48:	mov	r3, #8
   11d4c:	bl	123b4 <flatcc_verify_field@@Base>
   11d50:	cmp	r0, #0
   11d54:	bne	11e64 <main@@Base+0x790>
   11d58:	mov	r0, r4
   11d5c:	mov	r1, #23
   11d60:	mov	r2, #8
   11d64:	mov	r3, #8
   11d68:	bl	123b4 <flatcc_verify_field@@Base>
   11d6c:	cmp	r0, #0
   11d70:	bne	11e64 <main@@Base+0x790>
   11d74:	mov	r0, r4
   11d78:	mov	r1, #25
   11d7c:	mov	r2, #4
   11d80:	mov	r3, #4
   11d84:	bl	123b4 <flatcc_verify_field@@Base>
   11d88:	cmp	r0, #0
   11d8c:	bne	11e64 <main@@Base+0x790>
   11d90:	mov	r0, r4
   11d94:	mov	r1, #26
   11d98:	mov	r2, #4
   11d9c:	mov	r3, #4
   11da0:	bl	123b4 <flatcc_verify_field@@Base>
   11da4:	cmp	r0, #0
   11da8:	bne	11e64 <main@@Base+0x790>
   11dac:	mov	r0, r4
   11db0:	mov	r1, #27
   11db4:	mov	r2, #4
   11db8:	mov	r3, #4
   11dbc:	bl	123b4 <flatcc_verify_field@@Base>
   11dc0:	cmp	r0, #0
   11dc4:	bne	11e64 <main@@Base+0x790>
   11dc8:	mvn	r0, #0
   11dcc:	mov	r1, #1
   11dd0:	mov	r2, #0
   11dd4:	mov	r3, #1
   11dd8:	str	r1, [sp]
   11ddc:	str	r0, [sp, #4]
   11de0:	mov	r0, r4
   11de4:	mov	r1, #30
   11de8:	bl	12534 <flatcc_verify_vector_field@@Base>
   11dec:	cmp	r0, #0
   11df0:	bne	11e64 <main@@Base+0x790>
   11df4:	mvn	r5, #-536870912	; 0xe0000000
   11df8:	mov	r6, #8
   11dfc:	mov	r0, r4
   11e00:	mov	r1, #32
   11e04:	mov	r2, #0
   11e08:	mov	r3, #8
   11e0c:	str	r6, [sp]
   11e10:	str	r5, [sp, #4]
   11e14:	bl	12534 <flatcc_verify_vector_field@@Base>
   11e18:	cmp	r0, #0
   11e1c:	bne	11e64 <main@@Base+0x790>
   11e20:	mov	r0, r4
   11e24:	mov	r1, #33	; 0x21
   11e28:	mov	r2, #0
   11e2c:	mov	r3, #8
   11e30:	str	r6, [sp]
   11e34:	str	r5, [sp, #4]
   11e38:	bl	12534 <flatcc_verify_vector_field@@Base>
   11e3c:	cmp	r0, #0
   11e40:	bne	11e64 <main@@Base+0x790>
   11e44:	movw	r3, #7952	; 0x1f10
   11e48:	mov	r0, r4
   11e4c:	mov	r1, #34	; 0x22
   11e50:	mov	r2, #0
   11e54:	movt	r3, #1
   11e58:	bl	12724 <flatcc_verify_table_field@@Base>
   11e5c:	cmp	r0, #0
   11e60:	beq	11e6c <main@@Base+0x798>
   11e64:	sub	sp, fp, #16
   11e68:	pop	{r4, r5, r6, r7, fp, pc}
   11e6c:	movw	r3, #7960	; 0x1f18
   11e70:	mov	r0, r4
   11e74:	mov	r1, #35	; 0x23
   11e78:	mov	r2, #0
   11e7c:	movt	r3, #1
   11e80:	sub	sp, fp, #16
   11e84:	pop	{r4, r5, r6, r7, fp, lr}
   11e88:	b	12724 <flatcc_verify_table_field@@Base>
   11e8c:	ldrb	r1, [r0, #12]
   11e90:	sub	r1, r1, #1
   11e94:	uxtb	r2, r1
   11e98:	cmp	r2, #3
   11e9c:	movhi	r0, #0
   11ea0:	bxhi	lr
   11ea4:	movw	r2, #16032	; 0x3ea0
   11ea8:	sxtb	r1, r1
   11eac:	movt	r2, #1
   11eb0:	ldr	r1, [r2, r1, lsl #2]
   11eb4:	b	12aac <flatcc_verify_union_table@@Base>
   11eb8:	push	{r4, sl, fp, lr}
   11ebc:	add	fp, sp, #8
   11ec0:	mov	r1, #0
   11ec4:	mov	r2, #0
   11ec8:	mov	r4, r0
   11ecc:	bl	1242c <flatcc_verify_string_field@@Base>
   11ed0:	cmp	r0, #0
   11ed4:	popne	{r4, sl, fp, pc}
   11ed8:	mov	r0, r4
   11edc:	mov	r1, #1
   11ee0:	mov	r2, #8
   11ee4:	mov	r3, #8
   11ee8:	bl	123b4 <flatcc_verify_field@@Base>
   11eec:	cmp	r0, #0
   11ef0:	beq	11ef8 <main@@Base+0x824>
   11ef4:	pop	{r4, sl, fp, pc}
   11ef8:	mov	r0, r4
   11efc:	mov	r1, #2
   11f00:	mov	r2, #2
   11f04:	mov	r3, #2
   11f08:	pop	{r4, sl, fp, lr}
   11f0c:	b	123b4 <flatcc_verify_field@@Base>
   11f10:	mov	r0, #0
   11f14:	bx	lr
   11f18:	push	{r4, r5, r6, sl, fp, lr}
   11f1c:	add	fp, sp, #16
   11f20:	sub	sp, sp, #8
   11f24:	mvn	r5, #0
   11f28:	mov	r6, #1
   11f2c:	mov	r1, #0
   11f30:	mov	r2, #0
   11f34:	mov	r3, #1
   11f38:	mov	r4, r0
   11f3c:	str	r6, [sp]
   11f40:	str	r5, [sp, #4]
   11f44:	bl	12534 <flatcc_verify_vector_field@@Base>
   11f48:	cmp	r0, #0
   11f4c:	bne	11f9c <main@@Base+0x8c8>
   11f50:	mov	r0, r4
   11f54:	mov	r1, #1
   11f58:	mov	r2, #0
   11f5c:	mov	r3, #1
   11f60:	str	r6, [sp]
   11f64:	str	r5, [sp, #4]
   11f68:	bl	12534 <flatcc_verify_vector_field@@Base>
   11f6c:	cmp	r0, #0
   11f70:	bne	11f9c <main@@Base+0x8c8>
   11f74:	movw	r0, #6712	; 0x1a38
   11f78:	mov	r1, #1
   11f7c:	mov	r2, #0
   11f80:	mov	r3, #0
   11f84:	movt	r0, #1
   11f88:	str	r1, [sp]
   11f8c:	mov	r1, #2
   11f90:	str	r0, [sp, #4]
   11f94:	mov	r0, r4
   11f98:	bl	130f0 <flatcc_verify_table_as_nested_root@@Base>
   11f9c:	sub	sp, fp, #16
   11fa0:	pop	{r4, r5, r6, sl, fp, pc}
   11fa4:	push	{r4, sl, fp, lr}
   11fa8:	add	fp, sp, #8
   11fac:	mov	r1, #0
   11fb0:	mov	r2, #1
   11fb4:	mov	r3, #1
   11fb8:	mov	r4, r0
   11fbc:	bl	123b4 <flatcc_verify_field@@Base>
   11fc0:	cmp	r0, #0
   11fc4:	bne	12000 <main@@Base+0x92c>
   11fc8:	mov	r0, r4
   11fcc:	mov	r1, #1
   11fd0:	mov	r2, #1
   11fd4:	mov	r3, #1
   11fd8:	bl	123b4 <flatcc_verify_field@@Base>
   11fdc:	cmp	r0, #0
   11fe0:	popne	{r4, sl, fp, pc}
   11fe4:	mov	r0, r4
   11fe8:	mov	r1, #2
   11fec:	mov	r2, #1
   11ff0:	mov	r3, #1
   11ff4:	bl	123b4 <flatcc_verify_field@@Base>
   11ff8:	cmp	r0, #0
   11ffc:	beq	12004 <main@@Base+0x930>
   12000:	pop	{r4, sl, fp, pc}
   12004:	mov	r0, r4
   12008:	mov	r1, #3
   1200c:	mov	r2, #1
   12010:	mov	r3, #1
   12014:	pop	{r4, sl, fp, lr}
   12018:	b	123b4 <flatcc_verify_field@@Base>
   1201c:	mov	r0, #0
   12020:	bx	lr
   12024:	push	{r4, sl, fp, lr}
   12028:	add	fp, sp, #8
   1202c:	movw	r3, #8332	; 0x208c
   12030:	mov	r1, #0
   12034:	mov	r2, #0
   12038:	mov	r4, r0
   1203c:	movt	r3, #1
   12040:	bl	12724 <flatcc_verify_table_field@@Base>
   12044:	cmp	r0, #0
   12048:	popne	{r4, sl, fp, pc}
   1204c:	movw	r3, #8436	; 0x20f4
   12050:	mov	r0, r4
   12054:	mov	r1, #1
   12058:	mov	r2, #0
   1205c:	movt	r3, #1
   12060:	bl	12724 <flatcc_verify_table_field@@Base>
   12064:	cmp	r0, #0
   12068:	beq	12070 <main@@Base+0x99c>
   1206c:	pop	{r4, sl, fp, pc}
   12070:	movw	r3, #7820	; 0x1e8c
   12074:	mov	r0, r4
   12078:	mov	r1, #3
   1207c:	mov	r2, #0
   12080:	movt	r3, #1
   12084:	pop	{r4, sl, fp, lr}
   12088:	b	133c8 <flatcc_verify_union_vector_field@@Base>
   1208c:	push	{r4, sl, fp, lr}
   12090:	add	fp, sp, #8
   12094:	movw	r3, #8604	; 0x219c
   12098:	mov	r1, #0
   1209c:	mov	r2, #0
   120a0:	mov	r4, r0
   120a4:	movt	r3, #1
   120a8:	bl	12724 <flatcc_verify_table_field@@Base>
   120ac:	cmp	r0, #0
   120b0:	popne	{r4, sl, fp, pc}
   120b4:	movw	r3, #8852	; 0x2294
   120b8:	mov	r0, r4
   120bc:	mov	r1, #1
   120c0:	mov	r2, #0
   120c4:	movt	r3, #1
   120c8:	bl	12724 <flatcc_verify_table_field@@Base>
   120cc:	cmp	r0, #0
   120d0:	beq	120d8 <main@@Base+0xa04>
   120d4:	pop	{r4, sl, fp, pc}
   120d8:	movw	r3, #8912	; 0x22d0
   120dc:	mov	r0, r4
   120e0:	mov	r1, #2
   120e4:	mov	r2, #0
   120e8:	movt	r3, #1
   120ec:	pop	{r4, sl, fp, lr}
   120f0:	b	12724 <flatcc_verify_table_field@@Base>
   120f4:	push	{r4, sl, fp, lr}
   120f8:	add	fp, sp, #8
   120fc:	movw	r3, #8972	; 0x230c
   12100:	mov	r1, #1
   12104:	mov	r2, #0
   12108:	mov	r4, r0
   1210c:	movt	r3, #1
   12110:	bl	132a0 <flatcc_verify_union_field@@Base>
   12114:	cmp	r0, #0
   12118:	bne	1217c <main@@Base+0xaa8>
   1211c:	movw	r3, #8972	; 0x230c
   12120:	mov	r0, r4
   12124:	mov	r1, #3
   12128:	mov	r2, #0
   1212c:	movt	r3, #1
   12130:	bl	132a0 <flatcc_verify_union_field@@Base>
   12134:	cmp	r0, #0
   12138:	bne	1217c <main@@Base+0xaa8>
   1213c:	movw	r3, #8972	; 0x230c
   12140:	mov	r0, r4
   12144:	mov	r1, #5
   12148:	mov	r2, #0
   1214c:	movt	r3, #1
   12150:	bl	132a0 <flatcc_verify_union_field@@Base>
   12154:	cmp	r0, #0
   12158:	popne	{r4, sl, fp, pc}
   1215c:	movw	r3, #8972	; 0x230c
   12160:	mov	r0, r4
   12164:	mov	r1, #7
   12168:	mov	r2, #0
   1216c:	movt	r3, #1
   12170:	bl	132a0 <flatcc_verify_union_field@@Base>
   12174:	cmp	r0, #0
   12178:	beq	12180 <main@@Base+0xaac>
   1217c:	pop	{r4, sl, fp, pc}
   12180:	movw	r3, #8972	; 0x230c
   12184:	mov	r0, r4
   12188:	mov	r1, #9
   1218c:	mov	r2, #0
   12190:	movt	r3, #1
   12194:	pop	{r4, sl, fp, lr}
   12198:	b	133c8 <flatcc_verify_union_vector_field@@Base>
   1219c:	push	{r4, sl, fp, lr}
   121a0:	add	fp, sp, #8
   121a4:	mov	r1, #0
   121a8:	mov	r2, #0
   121ac:	mov	r4, r0
   121b0:	bl	1242c <flatcc_verify_string_field@@Base>
   121b4:	cmp	r0, #0
   121b8:	bne	12278 <main@@Base+0xba4>
   121bc:	mov	r0, r4
   121c0:	mov	r1, #1
   121c4:	mov	r2, #4
   121c8:	mov	r3, #4
   121cc:	bl	123b4 <flatcc_verify_field@@Base>
   121d0:	cmp	r0, #0
   121d4:	bne	12278 <main@@Base+0xba4>
   121d8:	mov	r0, r4
   121dc:	mov	r1, #2
   121e0:	mov	r2, #0
   121e4:	bl	1242c <flatcc_verify_string_field@@Base>
   121e8:	cmp	r0, #0
   121ec:	bne	12278 <main@@Base+0xba4>
   121f0:	mov	r0, r4
   121f4:	mov	r1, #3
   121f8:	mov	r2, #8
   121fc:	mov	r3, #8
   12200:	bl	123b4 <flatcc_verify_field@@Base>
   12204:	cmp	r0, #0
   12208:	bne	12278 <main@@Base+0xba4>
   1220c:	mov	r0, r4
   12210:	mov	r1, #4
   12214:	mov	r2, #0
   12218:	bl	1242c <flatcc_verify_string_field@@Base>
   1221c:	cmp	r0, #0
   12220:	bne	12278 <main@@Base+0xba4>
   12224:	mov	r0, r4
   12228:	mov	r1, #5
   1222c:	mov	r2, #8
   12230:	mov	r3, #8
   12234:	bl	123b4 <flatcc_verify_field@@Base>
   12238:	cmp	r0, #0
   1223c:	bne	12278 <main@@Base+0xba4>
   12240:	mov	r0, r4
   12244:	mov	r1, #6
   12248:	mov	r2, #4
   1224c:	mov	r3, #4
   12250:	bl	123b4 <flatcc_verify_field@@Base>
   12254:	cmp	r0, #0
   12258:	popne	{r4, sl, fp, pc}
   1225c:	mov	r0, r4
   12260:	mov	r1, #7
   12264:	mov	r2, #8
   12268:	mov	r3, #8
   1226c:	bl	123b4 <flatcc_verify_field@@Base>
   12270:	cmp	r0, #0
   12274:	beq	1227c <main@@Base+0xba8>
   12278:	pop	{r4, sl, fp, pc}
   1227c:	mov	r0, r4
   12280:	mov	r1, #8
   12284:	mov	r2, #4
   12288:	mov	r3, #4
   1228c:	pop	{r4, sl, fp, lr}
   12290:	b	123b4 <flatcc_verify_field@@Base>
   12294:	push	{r4, sl, fp, lr}
   12298:	add	fp, sp, #8
   1229c:	mov	r1, #0
   122a0:	mov	r2, #8
   122a4:	mov	r3, #8
   122a8:	mov	r4, r0
   122ac:	bl	123b4 <flatcc_verify_field@@Base>
   122b0:	cmp	r0, #0
   122b4:	popne	{r4, sl, fp, pc}
   122b8:	mov	r0, r4
   122bc:	mov	r1, #1
   122c0:	mov	r2, #4
   122c4:	mov	r3, #4
   122c8:	pop	{r4, sl, fp, lr}
   122cc:	b	123b4 <flatcc_verify_field@@Base>
   122d0:	push	{r4, sl, fp, lr}
   122d4:	add	fp, sp, #8
   122d8:	mov	r1, #0
   122dc:	mov	r2, #8
   122e0:	mov	r3, #8
   122e4:	mov	r4, r0
   122e8:	bl	123b4 <flatcc_verify_field@@Base>
   122ec:	cmp	r0, #0
   122f0:	popne	{r4, sl, fp, pc}
   122f4:	mov	r0, r4
   122f8:	mov	r1, #1
   122fc:	mov	r2, #4
   12300:	mov	r3, #4
   12304:	pop	{r4, sl, fp, lr}
   12308:	b	123b4 <flatcc_verify_field@@Base>
   1230c:	ldrb	r2, [r0, #12]
   12310:	sub	r1, r2, #2
   12314:	cmp	r1, #9
   12318:	bhi	12358 <main@@Base+0xc84>
   1231c:	add	r2, pc, #0
   12320:	ldr	pc, [r2, r1, lsl #2]
   12324:	andeq	r2, r1, ip, ror #6
   12328:	andeq	r2, r1, r4, ror #6
   1232c:	andeq	r2, r1, r4, ror #6
   12330:	andeq	r2, r1, r4, ror #6
   12334:	andeq	r2, r1, r4, ror #6
   12338:	andeq	r2, r1, r4, ror #6
   1233c:	andeq	r2, r1, r8, ror r3
   12340:	andeq	r2, r1, ip, asr #6
   12344:	andeq	r2, r1, ip, asr #6
   12348:	andeq	r2, r1, r0, ror #6
   1234c:	mov	r1, #4
   12350:	mov	r2, #4
   12354:	b	12b94 <flatcc_verify_union_struct@@Base>
   12358:	cmp	r2, #255	; 0xff
   1235c:	bne	12364 <main@@Base+0xc90>
   12360:	b	12bec <flatcc_verify_union_string@@Base>
   12364:	mov	r0, #0
   12368:	bx	lr
   1236c:	movw	r1, #9092	; 0x2384
   12370:	movt	r1, #1
   12374:	b	12aac <flatcc_verify_union_table@@Base>
   12378:	mov	r1, #2
   1237c:	mov	r2, #2
   12380:	b	12b94 <flatcc_verify_union_struct@@Base>
   12384:	mov	r1, #0
   12388:	mov	r2, #4
   1238c:	mov	r3, #4
   12390:	b	123b4 <flatcc_verify_field@@Base>

00012394 <flatcc_verify_error_string@@Base>:
   12394:	cmp	r0, #36	; 0x24
   12398:	movwhi	r0, #17115	; 0x42db
   1239c:	movthi	r0, #1
   123a0:	bxhi	lr
   123a4:	movw	r1, #17136	; 0x42f0
   123a8:	movt	r1, #1
   123ac:	ldr	r0, [r1, r0, lsl #2]
   123b0:	bx	lr

000123b4 <flatcc_verify_field@@Base>:
   123b4:	b	123b8 <flatcc_verify_field@@Base+0x4>
   123b8:	push	{r4, sl, fp, lr}
   123bc:	add	fp, sp, #8
   123c0:	ldrh	r4, [r0, #22]
   123c4:	mov	ip, #4
   123c8:	mov	lr, #0
   123cc:	add	r1, ip, r1, lsl #1
   123d0:	uxth	ip, r1
   123d4:	cmp	ip, r4
   123d8:	bcs	12404 <flatcc_verify_field@@Base+0x50>
   123dc:	ldr	r4, [r0, #12]
   123e0:	uxtah	r1, r4, r1
   123e4:	ldrh	ip, [r1]
   123e8:	cmp	ip, #0
   123ec:	beq	12404 <flatcc_verify_field@@Base+0x50>
   123f0:	add	r1, ip, r2
   123f4:	ldrh	r2, [r0, #20]
   123f8:	mov	lr, #13
   123fc:	cmp	r1, r2
   12400:	bls	1240c <flatcc_verify_field@@Base+0x58>
   12404:	mov	r0, lr
   12408:	pop	{r4, sl, fp, pc}
   1240c:	ldr	r1, [r0]
   12410:	ldr	r0, [r0, #16]
   12414:	add	r1, r1, ip
   12418:	add	r0, r1, r0
   1241c:	sub	r1, r3, #1
   12420:	ands	r0, r0, r1
   12424:	movwne	r0, #12
   12428:	pop	{r4, sl, fp, pc}

0001242c <flatcc_verify_string_field@@Base>:
   1242c:	push	{r4, sl, fp, lr}
   12430:	add	fp, sp, #8
   12434:	sub	sp, sp, #8
   12438:	add	r3, sp, #4
   1243c:	mov	r4, r0
   12440:	bl	124b4 <flatcc_verify_string_field@@Base+0x88>
   12444:	cmp	r0, #0
   12448:	bne	124ac <flatcc_verify_string_field@@Base+0x80>
   1244c:	ldr	r3, [sp, #4]
   12450:	cmp	r3, #0
   12454:	beq	124ac <flatcc_verify_string_field@@Base+0x80>
   12458:	ldr	r1, [r4]
   1245c:	ldr	r0, [r1, r3]
   12460:	add	r2, r0, r3
   12464:	mov	r0, #17
   12468:	tst	r2, #3
   1246c:	bne	124ac <flatcc_verify_string_field@@Base+0x80>
   12470:	cmp	r2, r3
   12474:	bls	124ac <flatcc_verify_string_field@@Base+0x80>
   12478:	ldr	r4, [r4, #4]
   1247c:	add	r3, r2, #4
   12480:	cmp	r4, r3
   12484:	ldrcs	r2, [r1, r2]
   12488:	subcs	ip, r4, r3
   1248c:	movcs	r0, #8
   12490:	addcs	r4, r2, #1
   12494:	cmpcs	ip, r4
   12498:	bcc	124ac <flatcc_verify_string_field@@Base+0x80>
   1249c:	add	r0, r1, r3
   124a0:	ldrb	r0, [r0, r2]
   124a4:	cmp	r0, #0
   124a8:	movwne	r0, #7
   124ac:	sub	sp, fp, #8
   124b0:	pop	{r4, sl, fp, pc}
   124b4:	push	{fp, lr}
   124b8:	mov	fp, sp
   124bc:	mov	ip, r2
   124c0:	mov	r2, #4
   124c4:	add	r1, r2, r1, lsl #1
   124c8:	ldrh	r2, [r0, #22]
   124cc:	uxth	lr, r1
   124d0:	cmp	lr, r2
   124d4:	bcs	1251c <flatcc_verify_string_field@@Base+0xf0>
   124d8:	ldr	r2, [r0, #12]
   124dc:	uxtah	r1, r2, r1
   124e0:	ldrh	r1, [r1]
   124e4:	cmp	r1, #0
   124e8:	beq	1251c <flatcc_verify_string_field@@Base+0xf0>
   124ec:	ldrh	lr, [r0, #20]
   124f0:	add	r2, r1, #4
   124f4:	mov	ip, #13
   124f8:	cmp	r2, lr
   124fc:	bhi	1252c <flatcc_verify_string_field@@Base+0x100>
   12500:	ldr	r0, [r0, #16]
   12504:	mov	ip, #12
   12508:	add	r0, r0, r1
   1250c:	tst	r0, #3
   12510:	moveq	ip, #0
   12514:	streq	r0, [r3]
   12518:	b	1252c <flatcc_verify_string_field@@Base+0x100>
   1251c:	cmp	ip, #0
   12520:	mov	r0, #0
   12524:	str	r0, [r3]
   12528:	movwne	ip, #4
   1252c:	mov	r0, ip
   12530:	pop	{fp, pc}

00012534 <flatcc_verify_vector_field@@Base>:
   12534:	push	{r4, r5, r6, sl, fp, lr}
   12538:	add	fp, sp, #16
   1253c:	sub	sp, sp, #8
   12540:	mov	r6, r3
   12544:	add	r3, sp, #4
   12548:	mov	r5, r0
   1254c:	bl	124b4 <flatcc_verify_string_field@@Base+0x88>
   12550:	cmp	r0, #0
   12554:	bne	125d4 <flatcc_verify_vector_field@@Base+0xa0>
   12558:	ldr	r4, [sp, #4]
   1255c:	cmp	r4, #0
   12560:	beq	125d4 <flatcc_verify_vector_field@@Base+0xa0>
   12564:	ldr	r3, [r5]
   12568:	ldr	r2, [fp, #8]
   1256c:	ldr	r0, [r3, r4]
   12570:	cmp	r2, #4
   12574:	movls	r2, #4
   12578:	add	r1, r0, r4
   1257c:	mov	r0, #16
   12580:	cmp	r1, r4
   12584:	bls	125d4 <flatcc_verify_vector_field@@Base+0xa0>
   12588:	ldr	r5, [r5, #4]
   1258c:	add	r4, r1, #4
   12590:	cmp	r4, r5
   12594:	bhi	125d4 <flatcc_verify_vector_field@@Base+0xa0>
   12598:	sub	r2, r2, #1
   1259c:	orr	r2, r2, #3
   125a0:	tst	r4, r2
   125a4:	bne	125d4 <flatcc_verify_vector_field@@Base+0xa0>
   125a8:	ldr	r4, [fp, #12]
   125ac:	ldr	r2, [r3, r1]
   125b0:	mov	r0, #25
   125b4:	cmp	r2, r4
   125b8:	bhi	125d4 <flatcc_verify_vector_field@@Base+0xa0>
   125bc:	sub	r0, r5, #4
   125c0:	mul	r2, r2, r6
   125c4:	sub	r1, r0, r1
   125c8:	mov	r0, #0
   125cc:	cmp	r1, r2
   125d0:	movwcc	r0, #26
   125d4:	sub	sp, fp, #16
   125d8:	pop	{r4, r5, r6, sl, fp, pc}

000125dc <flatcc_verify_string_vector_field@@Base>:
   125dc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   125e0:	add	fp, sp, #24
   125e4:	sub	sp, sp, #8
   125e8:	add	r3, sp, #4
   125ec:	mov	r4, r0
   125f0:	bl	124b4 <flatcc_verify_string_field@@Base+0x88>
   125f4:	cmp	r0, #0
   125f8:	bne	1271c <flatcc_verify_string_vector_field@@Base+0x140>
   125fc:	ldr	r1, [sp, #4]
   12600:	cmp	r1, #0
   12604:	beq	1271c <flatcc_verify_string_vector_field@@Base+0x140>
   12608:	ldr	r3, [r4]
   1260c:	mov	r0, #16
   12610:	ldr	r2, [r3, r1]
   12614:	add	r5, r2, r1
   12618:	cmp	r5, r1
   1261c:	bls	1271c <flatcc_verify_string_vector_field@@Base+0x140>
   12620:	ldr	lr, [r4, #4]
   12624:	add	r7, r5, #4
   12628:	cmp	r7, lr
   1262c:	bhi	1271c <flatcc_verify_string_vector_field@@Base+0x140>
   12630:	ands	r7, r7, #3
   12634:	bne	1271c <flatcc_verify_string_vector_field@@Base+0x140>
   12638:	ldr	ip, [r3, r5]
   1263c:	mov	r0, #25
   12640:	cmn	ip, #-1073741823	; 0xc0000001
   12644:	bhi	1271c <flatcc_verify_string_vector_field@@Base+0x140>
   12648:	sub	r0, lr, #4
   1264c:	sub	r4, r0, r5
   12650:	mov	r0, #26
   12654:	cmp	r4, ip, lsl #2
   12658:	bcc	1271c <flatcc_verify_string_vector_field@@Base+0x140>
   1265c:	cmp	ip, #0
   12660:	beq	12708 <flatcc_verify_string_vector_field@@Base+0x12c>
   12664:	sub	r0, lr, #8
   12668:	mov	r9, #0
   1266c:	sub	r0, r0, r2
   12670:	sub	r8, r0, r1
   12674:	add	r0, r3, r2
   12678:	rsb	r3, r0, #0
   1267c:	sub	r0, r1, r3
   12680:	add	r4, r1, r2
   12684:	ldr	r6, [r0, #4]
   12688:	mov	r0, #17
   1268c:	add	r7, r4, r6
   12690:	add	r5, r7, #4
   12694:	tst	r5, #3
   12698:	bne	1271c <flatcc_verify_string_vector_field@@Base+0x140>
   1269c:	add	r4, r4, #4
   126a0:	cmp	r5, r4
   126a4:	bls	1271c <flatcc_verify_string_vector_field@@Base+0x140>
   126a8:	add	r4, r7, #8
   126ac:	cmp	lr, r4
   126b0:	bcc	1271c <flatcc_verify_string_vector_field@@Base+0x140>
   126b4:	add	r0, r1, r6
   126b8:	sub	r4, r8, r6
   126bc:	sub	r0, r0, r3
   126c0:	ldr	r0, [r0, #4]
   126c4:	add	r5, r0, #1
   126c8:	cmp	r4, r5
   126cc:	bcc	12710 <flatcc_verify_string_vector_field@@Base+0x134>
   126d0:	add	r0, r6, r0
   126d4:	add	r0, r1, r0
   126d8:	sub	r0, r0, r3
   126dc:	ldrb	r0, [r0, #8]
   126e0:	cmp	r0, #0
   126e4:	bne	12718 <flatcc_verify_string_vector_field@@Base+0x13c>
   126e8:	add	r9, r9, #1
   126ec:	sub	r8, r8, #4
   126f0:	add	r2, r2, #4
   126f4:	sub	r3, r3, #4
   126f8:	mov	r0, #0
   126fc:	cmp	r9, ip
   12700:	bcc	1267c <flatcc_verify_string_vector_field@@Base+0xa0>
   12704:	b	1271c <flatcc_verify_string_vector_field@@Base+0x140>
   12708:	mov	r0, #0
   1270c:	b	1271c <flatcc_verify_string_vector_field@@Base+0x140>
   12710:	mov	r0, #8
   12714:	b	1271c <flatcc_verify_string_vector_field@@Base+0x140>
   12718:	mov	r0, #7
   1271c:	sub	sp, fp, #24
   12720:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00012724 <flatcc_verify_table_field@@Base>:
   12724:	push	{r4, r5, r6, sl, fp, lr}
   12728:	add	fp, sp, #16
   1272c:	sub	sp, sp, #32
   12730:	mov	r6, r3
   12734:	add	r3, sp, #4
   12738:	mov	r5, r0
   1273c:	bl	124b4 <flatcc_verify_string_field@@Base+0x88>
   12740:	cmp	r0, #0
   12744:	bne	12820 <flatcc_verify_table_field@@Base+0xfc>
   12748:	ldr	r4, [sp, #4]
   1274c:	cmp	r4, #0
   12750:	beq	12820 <flatcc_verify_table_field@@Base+0xfc>
   12754:	ldr	r2, [r5]
   12758:	ldmib	r5, {r1, r3}
   1275c:	ldr	r0, [r2, r4]
   12760:	subs	r3, r3, #1
   12764:	str	r3, [sp, #16]
   12768:	beq	1281c <flatcc_verify_table_field@@Base+0xf8>
   1276c:	add	r3, r0, r4
   12770:	mov	r0, #15
   12774:	tst	r3, #3
   12778:	bne	12820 <flatcc_verify_table_field@@Base+0xfc>
   1277c:	cmp	r3, r4
   12780:	bls	12820 <flatcc_verify_table_field@@Base+0xfc>
   12784:	add	r5, r3, #4
   12788:	cmp	r5, r1
   1278c:	bhi	12820 <flatcc_verify_table_field@@Base+0xfc>
   12790:	str	r3, [sp, #24]
   12794:	ldr	r0, [r2, r3]
   12798:	sub	r5, r3, r0
   1279c:	mov	r0, #29
   127a0:	tst	r5, #-2147483647	; 0x80000001
   127a4:	bne	12820 <flatcc_verify_table_field@@Base+0xfc>
   127a8:	add	lr, r5, #2
   127ac:	mov	r0, #27
   127b0:	cmp	lr, r1
   127b4:	bhi	12820 <flatcc_verify_table_field@@Base+0xfc>
   127b8:	mov	ip, r2
   127bc:	mov	r0, #30
   127c0:	ldrh	r4, [ip, r5]!
   127c4:	tst	r4, #1
   127c8:	strh	r4, [sp, #30]
   127cc:	bne	12820 <flatcc_verify_table_field@@Base+0xfc>
   127d0:	add	r5, r5, r4
   127d4:	cmp	r5, r1
   127d8:	bhi	12820 <flatcc_verify_table_field@@Base+0xfc>
   127dc:	mov	r0, #28
   127e0:	cmp	r4, #4
   127e4:	bcc	12820 <flatcc_verify_table_field@@Base+0xfc>
   127e8:	add	r0, r2, lr
   127ec:	sub	r3, r1, r3
   127f0:	ldrh	r5, [r0]
   127f4:	mov	r0, #20
   127f8:	cmp	r3, r5
   127fc:	strh	r5, [sp, #28]
   12800:	bcc	12820 <flatcc_verify_table_field@@Base+0xfc>
   12804:	add	r0, sp, #8
   12808:	str	r2, [sp, #8]
   1280c:	str	ip, [sp, #20]
   12810:	str	r1, [sp, #12]
   12814:	blx	r6
   12818:	b	12820 <flatcc_verify_table_field@@Base+0xfc>
   1281c:	mov	r0, #3
   12820:	sub	sp, fp, #16
   12824:	pop	{r4, r5, r6, sl, fp, pc}

00012828 <flatcc_verify_table_vector_field@@Base>:
   12828:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1282c:	add	fp, sp, #28
   12830:	sub	sp, sp, #36	; 0x24
   12834:	mov	r9, r3
   12838:	add	r3, sp, #8
   1283c:	mov	r5, r0
   12840:	bl	124b4 <flatcc_verify_string_field@@Base+0x88>
   12844:	cmp	r0, #0
   12848:	bne	12a88 <flatcc_verify_table_vector_field@@Base+0x260>
   1284c:	ldr	r1, [sp, #8]
   12850:	cmp	r1, #0
   12854:	beq	12a88 <flatcc_verify_table_vector_field@@Base+0x260>
   12858:	ldr	r2, [r5, #8]
   1285c:	cmp	r2, #1
   12860:	blt	12a84 <flatcc_verify_table_vector_field@@Base+0x25c>
   12864:	ldr	r6, [r5]
   12868:	mov	r0, #16
   1286c:	ldr	r3, [r6, r1]
   12870:	add	r7, r3, r1
   12874:	cmp	r7, r1
   12878:	bls	12a88 <flatcc_verify_table_vector_field@@Base+0x260>
   1287c:	ldr	lr, [r5, #4]
   12880:	add	r5, r7, #4
   12884:	cmp	r5, lr
   12888:	bhi	12a88 <flatcc_verify_table_vector_field@@Base+0x260>
   1288c:	ands	r4, r5, #3
   12890:	bne	12a88 <flatcc_verify_table_vector_field@@Base+0x260>
   12894:	ldr	r4, [r6, r7]
   12898:	mov	r0, #25
   1289c:	cmn	r4, #-1073741823	; 0xc0000001
   128a0:	bhi	12a88 <flatcc_verify_table_vector_field@@Base+0x260>
   128a4:	sub	ip, lr, #4
   128a8:	mov	r0, #26
   128ac:	sub	r7, ip, r7
   128b0:	cmp	r7, r4, lsl #2
   128b4:	bcc	12a88 <flatcc_verify_table_vector_field@@Base+0x260>
   128b8:	cmp	r4, #0
   128bc:	beq	12a74 <flatcc_verify_table_vector_field@@Base+0x24c>
   128c0:	sub	r0, ip, r3
   128c4:	mov	sl, #0
   128c8:	str	r4, [sp]
   128cc:	sub	r8, r0, r1
   128d0:	sub	r0, r2, #2
   128d4:	str	r0, [sp, #4]
   128d8:	ldr	r1, [sp, #4]
   128dc:	ldr	r0, [r6, r5]
   128e0:	cmp	r1, #0
   128e4:	str	r1, [sp, #20]
   128e8:	beq	12a7c <flatcc_verify_table_vector_field@@Base+0x254>
   128ec:	add	r1, r5, r0
   128f0:	add	ip, r1, #4
   128f4:	tst	r1, #3
   128f8:	bne	129c4 <flatcc_verify_table_vector_field@@Base+0x19c>
   128fc:	cmp	r1, r5
   12900:	bls	129c4 <flatcc_verify_table_vector_field@@Base+0x19c>
   12904:	cmp	ip, lr
   12908:	bhi	129c4 <flatcc_verify_table_vector_field@@Base+0x19c>
   1290c:	str	r1, [sp, #28]
   12910:	add	r2, r6, r0
   12914:	ldr	r2, [r2, r5]
   12918:	sub	r7, r0, r2
   1291c:	add	r3, r5, r7
   12920:	tst	r3, #-2147483647	; 0x80000001
   12924:	bne	129c4 <flatcc_verify_table_vector_field@@Base+0x19c>
   12928:	add	r4, r3, #2
   1292c:	cmp	r4, lr
   12930:	bhi	129c4 <flatcc_verify_table_vector_field@@Base+0x19c>
   12934:	add	r7, r6, r7
   12938:	add	r7, r7, r5
   1293c:	ldrh	r7, [r7]
   12940:	cmp	r7, #4
   12944:	strh	r7, [sp, #34]	; 0x22
   12948:	bcc	129c4 <flatcc_verify_table_vector_field@@Base+0x19c>
   1294c:	ands	r4, r7, #1
   12950:	bne	129c4 <flatcc_verify_table_vector_field@@Base+0x19c>
   12954:	add	r7, r0, r7
   12958:	sub	r2, r7, r2
   1295c:	add	r2, r5, r2
   12960:	cmp	r2, lr
   12964:	bhi	129c4 <flatcc_verify_table_vector_field@@Base+0x19c>
   12968:	add	r2, r6, r3
   1296c:	sub	r0, r8, r0
   12970:	ldrh	r3, [r2, #2]
   12974:	cmp	r0, r3
   12978:	strh	r3, [sp, #32]
   1297c:	bcc	129c4 <flatcc_verify_table_vector_field@@Base+0x19c>
   12980:	add	r0, sp, #12
   12984:	str	r6, [sp, #12]
   12988:	str	r2, [sp, #24]
   1298c:	mov	r4, lr
   12990:	str	lr, [sp, #16]
   12994:	blx	r9
   12998:	cmp	r0, #0
   1299c:	bne	12a90 <flatcc_verify_table_vector_field@@Base+0x268>
   129a0:	ldr	r1, [sp]
   129a4:	add	sl, sl, #1
   129a8:	sub	r8, r8, #4
   129ac:	add	r5, r5, #4
   129b0:	mov	r0, #0
   129b4:	mov	lr, r4
   129b8:	cmp	sl, r1
   129bc:	bcc	128d8 <flatcc_verify_table_vector_field@@Base+0xb0>
   129c0:	b	12a88 <flatcc_verify_table_vector_field@@Base+0x260>
   129c4:	ldr	r0, [sp, #4]
   129c8:	str	r0, [sp, #20]
   129cc:	mov	r0, #15
   129d0:	tst	r1, #3
   129d4:	bne	12a88 <flatcc_verify_table_vector_field@@Base+0x260>
   129d8:	cmp	r1, r5
   129dc:	bls	12a88 <flatcc_verify_table_vector_field@@Base+0x260>
   129e0:	cmp	ip, lr
   129e4:	bhi	12a88 <flatcc_verify_table_vector_field@@Base+0x260>
   129e8:	str	r1, [sp, #28]
   129ec:	ldr	r0, [r6, r1]
   129f0:	sub	r7, r1, r0
   129f4:	mov	r0, #29
   129f8:	tst	r7, #-2147483647	; 0x80000001
   129fc:	bne	12a88 <flatcc_verify_table_vector_field@@Base+0x260>
   12a00:	add	r3, r7, #2
   12a04:	mov	r0, #27
   12a08:	cmp	r3, lr
   12a0c:	bhi	12a88 <flatcc_verify_table_vector_field@@Base+0x260>
   12a10:	mov	r2, r6
   12a14:	mov	r0, #30
   12a18:	ldrh	r5, [r2, r7]!
   12a1c:	tst	r5, #1
   12a20:	strh	r5, [sp, #34]	; 0x22
   12a24:	bne	12a88 <flatcc_verify_table_vector_field@@Base+0x260>
   12a28:	add	r7, r7, r5
   12a2c:	cmp	r7, lr
   12a30:	bhi	12a88 <flatcc_verify_table_vector_field@@Base+0x260>
   12a34:	mov	r0, #28
   12a38:	cmp	r5, #4
   12a3c:	bcc	12a88 <flatcc_verify_table_vector_field@@Base+0x260>
   12a40:	add	r0, r6, r3
   12a44:	sub	r1, lr, r1
   12a48:	ldrh	r3, [r0]
   12a4c:	mov	r0, #20
   12a50:	cmp	r1, r3
   12a54:	strh	r3, [sp, #32]
   12a58:	bcc	12a88 <flatcc_verify_table_vector_field@@Base+0x260>
   12a5c:	add	r0, sp, #12
   12a60:	str	r6, [sp, #12]
   12a64:	str	r2, [sp, #24]
   12a68:	str	lr, [sp, #16]
   12a6c:	blx	r9
   12a70:	b	12a88 <flatcc_verify_table_vector_field@@Base+0x260>
   12a74:	mov	r0, #0
   12a78:	b	12a88 <flatcc_verify_table_vector_field@@Base+0x260>
   12a7c:	mov	r0, #0
   12a80:	str	r0, [sp, #20]
   12a84:	mov	r0, #3
   12a88:	sub	sp, fp, #28
   12a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a90:	ldr	r0, [r6, r5]
   12a94:	ldr	r1, [sp, #4]
   12a98:	mov	lr, r4
   12a9c:	str	r1, [sp, #20]
   12aa0:	add	r1, r0, r5
   12aa4:	add	ip, r1, #4
   12aa8:	b	129cc <flatcc_verify_table_vector_field@@Base+0x1a4>

00012aac <flatcc_verify_union_table@@Base>:
   12aac:	push	{r4, r5, r6, sl, fp, lr}
   12ab0:	add	fp, sp, #16
   12ab4:	sub	sp, sp, #24
   12ab8:	ldr	r5, [r0, #16]
   12abc:	ldr	r3, [r0, #20]
   12ac0:	ldr	ip, [r0]
   12ac4:	ldr	r2, [r0, #4]
   12ac8:	ldr	r0, [r0, #8]
   12acc:	subs	r0, r0, #1
   12ad0:	str	r0, [sp, #8]
   12ad4:	beq	12b88 <flatcc_verify_union_table@@Base+0xdc>
   12ad8:	add	r3, r3, r5
   12adc:	mov	r0, #15
   12ae0:	tst	r3, #3
   12ae4:	bne	12b8c <flatcc_verify_union_table@@Base+0xe0>
   12ae8:	cmp	r3, r5
   12aec:	bls	12b8c <flatcc_verify_union_table@@Base+0xe0>
   12af0:	add	r6, r3, #4
   12af4:	cmp	r6, r2
   12af8:	bhi	12b8c <flatcc_verify_union_table@@Base+0xe0>
   12afc:	str	r3, [sp, #16]
   12b00:	ldr	r0, [ip, r3]
   12b04:	sub	r5, r3, r0
   12b08:	mov	r0, #29
   12b0c:	tst	r5, #-2147483647	; 0x80000001
   12b10:	bne	12b8c <flatcc_verify_union_table@@Base+0xe0>
   12b14:	add	r4, r5, #2
   12b18:	mov	r0, #27
   12b1c:	cmp	r4, r2
   12b20:	bhi	12b8c <flatcc_verify_union_table@@Base+0xe0>
   12b24:	mov	lr, ip
   12b28:	mov	r0, #30
   12b2c:	ldrh	r6, [lr, r5]!
   12b30:	tst	r6, #1
   12b34:	strh	r6, [sp, #22]
   12b38:	bne	12b8c <flatcc_verify_union_table@@Base+0xe0>
   12b3c:	add	r5, r5, r6
   12b40:	cmp	r5, r2
   12b44:	bhi	12b8c <flatcc_verify_union_table@@Base+0xe0>
   12b48:	mov	r0, #28
   12b4c:	cmp	r6, #4
   12b50:	bcc	12b8c <flatcc_verify_union_table@@Base+0xe0>
   12b54:	add	r0, ip, r4
   12b58:	sub	r3, r2, r3
   12b5c:	ldrh	r4, [r0]
   12b60:	mov	r0, #20
   12b64:	cmp	r3, r4
   12b68:	strh	r4, [sp, #20]
   12b6c:	bcc	12b8c <flatcc_verify_union_table@@Base+0xe0>
   12b70:	mov	r0, sp
   12b74:	str	ip, [sp]
   12b78:	str	lr, [sp, #12]
   12b7c:	str	r2, [sp, #4]
   12b80:	blx	r1
   12b84:	b	12b8c <flatcc_verify_union_table@@Base+0xe0>
   12b88:	mov	r0, #3
   12b8c:	sub	sp, fp, #16
   12b90:	pop	{r4, r5, r6, sl, fp, pc}

00012b94 <flatcc_verify_union_struct@@Base>:
   12b94:	push	{fp, lr}
   12b98:	mov	fp, sp
   12b9c:	ldr	lr, [r0, #20]
   12ba0:	mov	r3, r0
   12ba4:	mov	r0, #18
   12ba8:	cmp	lr, #0
   12bac:	beq	12be8 <flatcc_verify_union_struct@@Base+0x54>
   12bb0:	ldr	ip, [r3, #4]
   12bb4:	ldr	r3, [r3, #16]
   12bb8:	add	r3, r3, lr
   12bbc:	cmp	r3, ip
   12bc0:	bhi	12be8 <flatcc_verify_union_struct@@Base+0x54>
   12bc4:	adds	r1, r3, r1
   12bc8:	mov	r0, #10
   12bcc:	bcs	12be8 <flatcc_verify_union_struct@@Base+0x54>
   12bd0:	mov	r0, #9
   12bd4:	cmp	r1, ip
   12bd8:	pophi	{fp, pc}
   12bdc:	sub	r0, r2, #1
   12be0:	ands	r0, r3, r0
   12be4:	movwne	r0, #11
   12be8:	pop	{fp, pc}

00012bec <flatcc_verify_union_string@@Base>:
   12bec:	mov	r1, r0
   12bf0:	ldr	r3, [r0, #16]
   12bf4:	ldr	r0, [r0, #20]
   12bf8:	add	r2, r0, r3
   12bfc:	mov	r0, #17
   12c00:	tst	r2, #3
   12c04:	bne	12c58 <flatcc_verify_union_string@@Base+0x6c>
   12c08:	cmp	r2, r3
   12c0c:	bls	12c58 <flatcc_verify_union_string@@Base+0x6c>
   12c10:	ldr	r3, [r1, #4]
   12c14:	add	ip, r2, #4
   12c18:	cmp	r3, ip
   12c1c:	bcc	12c58 <flatcc_verify_union_string@@Base+0x6c>
   12c20:	push	{fp, lr}
   12c24:	mov	fp, sp
   12c28:	ldr	r1, [r1]
   12c2c:	sub	lr, r3, ip
   12c30:	mov	r0, #8
   12c34:	ldr	r2, [r1, r2]
   12c38:	add	r3, r2, #1
   12c3c:	cmp	lr, r3
   12c40:	pop	{fp, lr}
   12c44:	bxcc	lr
   12c48:	add	r0, r1, ip
   12c4c:	ldrb	r0, [r0, r2]
   12c50:	cmp	r0, #0
   12c54:	movwne	r0, #7
   12c58:	bx	lr

00012c5c <flatcc_verify_buffer_header@@Base>:
   12c5c:	push	{r4, sl, fp, lr}
   12c60:	add	fp, sp, #8
   12c64:	sub	sp, sp, #8
   12c68:	mov	r4, r0
   12c6c:	mov	r0, #5
   12c70:	tst	r4, #3
   12c74:	bne	12cd0 <flatcc_verify_buffer_header@@Base+0x74>
   12c78:	mov	r0, #6
   12c7c:	cmn	r1, #9
   12c80:	bhi	12cd0 <flatcc_verify_buffer_header@@Base+0x74>
   12c84:	mov	r0, #1
   12c88:	cmp	r1, #8
   12c8c:	bcc	12cd0 <flatcc_verify_buffer_header@@Base+0x74>
   12c90:	cmp	r2, #0
   12c94:	beq	12ccc <flatcc_verify_buffer_header@@Base+0x70>
   12c98:	mov	r0, #0
   12c9c:	mov	r1, r2
   12ca0:	mov	r2, #4
   12ca4:	str	r0, [sp, #4]
   12ca8:	add	r0, sp, #4
   12cac:	bl	10f08 <strncpy@plt>
   12cb0:	ldr	r1, [sp, #4]
   12cb4:	cmp	r1, #0
   12cb8:	ldrne	r2, [r4, #4]
   12cbc:	movne	r0, #2
   12cc0:	cmpne	r2, r1
   12cc4:	moveq	r0, #0
   12cc8:	b	12cd0 <flatcc_verify_buffer_header@@Base+0x74>
   12ccc:	mov	r0, #0
   12cd0:	sub	sp, fp, #8
   12cd4:	pop	{r4, sl, fp, pc}

00012cd8 <flatcc_verify_typed_buffer_header@@Base>:
   12cd8:	mov	r3, r0
   12cdc:	mov	r0, #5
   12ce0:	tst	r3, #3
   12ce4:	bne	12d18 <flatcc_verify_typed_buffer_header@@Base+0x40>
   12ce8:	mov	r0, #6
   12cec:	cmn	r1, #9
   12cf0:	bhi	12d18 <flatcc_verify_typed_buffer_header@@Base+0x40>
   12cf4:	mov	r0, #1
   12cf8:	cmp	r1, #8
   12cfc:	bxcc	lr
   12d00:	cmp	r2, #0
   12d04:	beq	12d1c <flatcc_verify_typed_buffer_header@@Base+0x44>
   12d08:	ldr	r1, [r3, #4]
   12d0c:	mov	r0, #2
   12d10:	cmp	r1, r2
   12d14:	moveq	r0, #0
   12d18:	bx	lr
   12d1c:	mov	r0, #0
   12d20:	bx	lr

00012d24 <flatcc_verify_struct_as_root@@Base>:
   12d24:	push	{r4, r5, r6, r7, fp, lr}
   12d28:	add	fp, sp, #16
   12d2c:	mov	r5, r3
   12d30:	mov	r6, r2
   12d34:	mov	r4, r1
   12d38:	mov	r7, r0
   12d3c:	bl	12c5c <flatcc_verify_buffer_header@@Base>
   12d40:	cmp	r0, #0
   12d44:	beq	12d5c <flatcc_verify_struct_as_root@@Base+0x38>
   12d48:	mov	r0, r7
   12d4c:	mov	r1, r4
   12d50:	mov	r2, r6
   12d54:	pop	{r4, r5, r6, r7, fp, lr}
   12d58:	b	12c5c <flatcc_verify_buffer_header@@Base>
   12d5c:	ldr	r1, [r7]
   12d60:	mov	r0, #18
   12d64:	sub	r2, r1, #1
   12d68:	cmp	r2, r4
   12d6c:	bcs	12d98 <flatcc_verify_struct_as_root@@Base+0x74>
   12d70:	adds	r2, r1, r5
   12d74:	mov	r0, #10
   12d78:	bcs	12d98 <flatcc_verify_struct_as_root@@Base+0x74>
   12d7c:	mov	r0, #9
   12d80:	cmp	r2, r4
   12d84:	pophi	{r4, r5, r6, r7, fp, pc}
   12d88:	ldr	r0, [fp, #8]
   12d8c:	sub	r0, r0, #1
   12d90:	ands	r0, r1, r0
   12d94:	movwne	r0, #11
   12d98:	pop	{r4, r5, r6, r7, fp, pc}

00012d9c <flatcc_verify_struct_as_typed_root@@Base>:
   12d9c:	push	{fp, lr}
   12da0:	mov	fp, sp
   12da4:	mov	ip, r0
   12da8:	mov	r0, #5
   12dac:	tst	ip, #3
   12db0:	bne	12e20 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   12db4:	mov	r0, #6
   12db8:	cmn	r1, #9
   12dbc:	bhi	12e20 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   12dc0:	mov	r0, #1
   12dc4:	cmp	r1, #8
   12dc8:	bcc	12e20 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   12dcc:	cmp	r2, #0
   12dd0:	beq	12de4 <flatcc_verify_struct_as_typed_root@@Base+0x48>
   12dd4:	ldr	lr, [ip, #4]
   12dd8:	mov	r0, #2
   12ddc:	cmp	lr, r2
   12de0:	bne	12e20 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   12de4:	ldr	ip, [ip]
   12de8:	mov	r0, #18
   12dec:	sub	r2, ip, #1
   12df0:	cmp	r2, r1
   12df4:	bcs	12e20 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   12df8:	adds	r3, ip, r3
   12dfc:	mov	r0, #10
   12e00:	bcs	12e20 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   12e04:	mov	r0, #9
   12e08:	cmp	r3, r1
   12e0c:	pophi	{fp, pc}
   12e10:	ldr	r0, [fp, #8]
   12e14:	sub	r0, r0, #1
   12e18:	ands	r0, ip, r0
   12e1c:	movwne	r0, #11
   12e20:	pop	{fp, pc}

00012e24 <flatcc_verify_table_as_root@@Base>:
   12e24:	push	{r4, r5, r6, r7, fp, lr}
   12e28:	add	fp, sp, #16
   12e2c:	sub	sp, sp, #24
   12e30:	mov	r4, r3
   12e34:	mov	r7, r2
   12e38:	mov	r5, r1
   12e3c:	mov	r6, r0
   12e40:	bl	12c5c <flatcc_verify_buffer_header@@Base>
   12e44:	cmp	r0, #0
   12e48:	beq	12e64 <flatcc_verify_table_as_root@@Base+0x40>
   12e4c:	mov	r0, r6
   12e50:	mov	r1, r5
   12e54:	mov	r2, r7
   12e58:	sub	sp, fp, #16
   12e5c:	pop	{r4, r5, r6, r7, fp, lr}
   12e60:	b	12c5c <flatcc_verify_buffer_header@@Base>
   12e64:	ldr	r1, [r6]
   12e68:	mov	r0, #99	; 0x63
   12e6c:	str	r0, [sp, #8]
   12e70:	mov	r0, #15
   12e74:	tst	r1, #3
   12e78:	bne	12f18 <flatcc_verify_table_as_root@@Base+0xf4>
   12e7c:	cmp	r1, #0
   12e80:	beq	12f18 <flatcc_verify_table_as_root@@Base+0xf4>
   12e84:	add	r2, r1, #4
   12e88:	cmp	r2, r5
   12e8c:	bhi	12f18 <flatcc_verify_table_as_root@@Base+0xf4>
   12e90:	str	r1, [sp, #16]
   12e94:	ldr	r0, [r6, r1]
   12e98:	sub	r7, r1, r0
   12e9c:	mov	r0, #29
   12ea0:	tst	r7, #-2147483647	; 0x80000001
   12ea4:	bne	12f18 <flatcc_verify_table_as_root@@Base+0xf4>
   12ea8:	add	r3, r7, #2
   12eac:	mov	r0, #27
   12eb0:	cmp	r3, r5
   12eb4:	bhi	12f18 <flatcc_verify_table_as_root@@Base+0xf4>
   12eb8:	mov	ip, r6
   12ebc:	mov	r0, #30
   12ec0:	ldrh	r2, [ip, r7]!
   12ec4:	tst	r2, #1
   12ec8:	strh	r2, [sp, #22]
   12ecc:	bne	12f18 <flatcc_verify_table_as_root@@Base+0xf4>
   12ed0:	add	r7, r7, r2
   12ed4:	cmp	r7, r5
   12ed8:	bhi	12f18 <flatcc_verify_table_as_root@@Base+0xf4>
   12edc:	mov	r0, #28
   12ee0:	cmp	r2, #4
   12ee4:	bcc	12f18 <flatcc_verify_table_as_root@@Base+0xf4>
   12ee8:	add	r0, r6, r3
   12eec:	sub	r1, r5, r1
   12ef0:	ldrh	r2, [r0]
   12ef4:	mov	r0, #20
   12ef8:	cmp	r1, r2
   12efc:	strh	r2, [sp, #20]
   12f00:	bcc	12f18 <flatcc_verify_table_as_root@@Base+0xf4>
   12f04:	mov	r0, sp
   12f08:	str	r6, [sp]
   12f0c:	str	ip, [sp, #12]
   12f10:	str	r5, [sp, #4]
   12f14:	blx	r4
   12f18:	sub	sp, fp, #16
   12f1c:	pop	{r4, r5, r6, r7, fp, pc}

00012f20 <flatcc_verify_table_as_typed_root@@Base>:
   12f20:	push	{r4, r5, r6, sl, fp, lr}
   12f24:	add	fp, sp, #16
   12f28:	sub	sp, sp, #24
   12f2c:	mov	ip, #5
   12f30:	tst	r0, #3
   12f34:	bne	1301c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   12f38:	mov	ip, #6
   12f3c:	cmn	r1, #9
   12f40:	bhi	1301c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   12f44:	mov	ip, #1
   12f48:	cmp	r1, #8
   12f4c:	bcc	1301c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   12f50:	cmp	r2, #0
   12f54:	beq	12f68 <flatcc_verify_table_as_typed_root@@Base+0x48>
   12f58:	ldr	r6, [r0, #4]
   12f5c:	mov	ip, #2
   12f60:	cmp	r6, r2
   12f64:	bne	1301c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   12f68:	ldr	r2, [r0]
   12f6c:	mov	r6, #99	; 0x63
   12f70:	mov	ip, #15
   12f74:	str	r6, [sp, #8]
   12f78:	tst	r2, #3
   12f7c:	bne	1301c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   12f80:	cmp	r2, #0
   12f84:	beq	1301c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   12f88:	add	r6, r2, #4
   12f8c:	cmp	r6, r1
   12f90:	bhi	1301c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   12f94:	str	r2, [sp, #16]
   12f98:	mov	ip, #29
   12f9c:	ldr	r6, [r0, r2]
   12fa0:	sub	r5, r2, r6
   12fa4:	tst	r5, #-2147483647	; 0x80000001
   12fa8:	bne	1301c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   12fac:	add	r4, r5, #2
   12fb0:	mov	ip, #27
   12fb4:	cmp	r4, r1
   12fb8:	bhi	1301c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   12fbc:	mov	lr, r0
   12fc0:	mov	ip, #30
   12fc4:	ldrh	r6, [lr, r5]!
   12fc8:	tst	r6, #1
   12fcc:	strh	r6, [sp, #22]
   12fd0:	bne	1301c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   12fd4:	add	r5, r5, r6
   12fd8:	cmp	r5, r1
   12fdc:	bhi	1301c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   12fe0:	mov	ip, #28
   12fe4:	cmp	r6, #4
   12fe8:	bcc	1301c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   12fec:	add	r6, r0, r4
   12ff0:	sub	r2, r1, r2
   12ff4:	mov	ip, #20
   12ff8:	ldrh	r4, [r6]
   12ffc:	cmp	r2, r4
   13000:	strh	r4, [sp, #20]
   13004:	bcc	1301c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   13008:	str	lr, [sp, #12]
   1300c:	stm	sp, {r0, r1}
   13010:	mov	r0, sp
   13014:	blx	r3
   13018:	mov	ip, r0
   1301c:	mov	r0, ip
   13020:	sub	sp, fp, #16
   13024:	pop	{r4, r5, r6, sl, fp, pc}

00013028 <flatcc_verify_struct_as_nested_root@@Base>:
   13028:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1302c:	add	fp, sp, #28
   13030:	sub	sp, sp, #12
   13034:	ldr	r9, [fp, #12]
   13038:	mov	r8, r3
   1303c:	mvn	sl, #0
   13040:	mov	r5, #1
   13044:	mov	r4, r2
   13048:	mov	r7, r1
   1304c:	mov	r6, r0
   13050:	stm	sp, {r5, sl}
   13054:	mov	r3, r9
   13058:	bl	12534 <flatcc_verify_vector_field@@Base>
   1305c:	cmp	r0, #0
   13060:	beq	13084 <flatcc_verify_struct_as_nested_root@@Base+0x5c>
   13064:	mov	r0, r6
   13068:	mov	r1, r7
   1306c:	mov	r2, r4
   13070:	mov	r3, r9
   13074:	stm	sp, {r5, sl}
   13078:	bl	12534 <flatcc_verify_vector_field@@Base>
   1307c:	sub	sp, fp, #28
   13080:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13084:	ldrh	r2, [r6, #22]
   13088:	mov	r0, #4
   1308c:	add	r0, r0, r7, lsl #1
   13090:	uxth	r1, r0
   13094:	cmp	r1, r2
   13098:	bcs	130c0 <flatcc_verify_struct_as_nested_root@@Base+0x98>
   1309c:	ldr	r1, [r6, #12]
   130a0:	uxtah	r0, r1, r0
   130a4:	ldrh	r0, [r0]
   130a8:	cmp	r0, #0
   130ac:	ldrne	r1, [r6]
   130b0:	ldrne	r2, [r6, #16]
   130b4:	addne	r1, r1, r2
   130b8:	addsne	r0, r1, r0
   130bc:	bne	130cc <flatcc_verify_struct_as_nested_root@@Base+0xa4>
   130c0:	mov	r0, #0
   130c4:	sub	sp, fp, #28
   130c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130cc:	ldr	r2, [r0]
   130d0:	ldr	r3, [fp, #8]
   130d4:	ldr	r1, [r2, r0]!
   130d8:	str	r9, [sp]
   130dc:	add	r0, r2, #4
   130e0:	mov	r2, r8
   130e4:	bl	12d24 <flatcc_verify_struct_as_root@@Base>
   130e8:	sub	sp, fp, #28
   130ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000130f0 <flatcc_verify_table_as_nested_root@@Base>:
   130f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130f4:	add	fp, sp, #28
   130f8:	sub	sp, sp, #36	; 0x24
   130fc:	mvn	r9, #0
   13100:	mov	sl, #1
   13104:	mov	r8, r3
   13108:	mov	r5, r2
   1310c:	mov	r4, r1
   13110:	mov	r6, r0
   13114:	str	sl, [sp]
   13118:	str	r9, [sp, #4]
   1311c:	ldr	r7, [fp, #8]
   13120:	mov	r3, r7
   13124:	bl	12534 <flatcc_verify_vector_field@@Base>
   13128:	cmp	r0, #0
   1312c:	beq	13150 <flatcc_verify_table_as_nested_root@@Base+0x60>
   13130:	mov	r0, r6
   13134:	mov	r1, r4
   13138:	mov	r2, r5
   1313c:	mov	r3, r7
   13140:	str	sl, [sp]
   13144:	str	r9, [sp, #4]
   13148:	bl	12534 <flatcc_verify_vector_field@@Base>
   1314c:	b	13190 <flatcc_verify_table_as_nested_root@@Base+0xa0>
   13150:	ldrh	r3, [r6, #22]
   13154:	mov	r0, #4
   13158:	add	r1, r0, r4, lsl #1
   1315c:	mov	r0, #0
   13160:	uxth	r2, r1
   13164:	cmp	r2, r3
   13168:	bcs	13190 <flatcc_verify_table_as_nested_root@@Base+0xa0>
   1316c:	ldr	r2, [r6, #12]
   13170:	uxtah	r1, r2, r1
   13174:	ldrh	r1, [r1]
   13178:	cmp	r1, #0
   1317c:	ldrne	r2, [r6]
   13180:	ldrne	r3, [r6, #16]
   13184:	addne	r2, r2, r3
   13188:	addsne	r1, r2, r1
   1318c:	bne	13198 <flatcc_verify_table_as_nested_root@@Base+0xa8>
   13190:	sub	sp, fp, #28
   13194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13198:	ldr	r0, [r1]
   1319c:	ldr	r7, [fp, #12]
   131a0:	mov	r2, r8
   131a4:	ldr	r4, [r0, r1]!
   131a8:	add	r5, r0, #4
   131ac:	mov	r1, r4
   131b0:	mov	r0, r5
   131b4:	bl	12c5c <flatcc_verify_buffer_header@@Base>
   131b8:	cmp	r0, #0
   131bc:	beq	131d8 <flatcc_verify_table_as_nested_root@@Base+0xe8>
   131c0:	mov	r0, r5
   131c4:	mov	r1, r4
   131c8:	mov	r2, r8
   131cc:	sub	sp, fp, #28
   131d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131d4:	b	12c5c <flatcc_verify_buffer_header@@Base>
   131d8:	ldr	r0, [r6, #8]
   131dc:	ldr	r1, [r5]
   131e0:	subs	r0, r0, #1
   131e4:	str	r0, [sp, #20]
   131e8:	beq	13298 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   131ec:	mov	r0, #15
   131f0:	tst	r1, #3
   131f4:	bne	13190 <flatcc_verify_table_as_nested_root@@Base+0xa0>
   131f8:	cmp	r1, #0
   131fc:	beq	13190 <flatcc_verify_table_as_nested_root@@Base+0xa0>
   13200:	add	r2, r1, #4
   13204:	cmp	r2, r4
   13208:	bhi	13190 <flatcc_verify_table_as_nested_root@@Base+0xa0>
   1320c:	str	r1, [sp, #28]
   13210:	ldr	r0, [r5, r1]
   13214:	sub	r6, r1, r0
   13218:	mov	r0, #29
   1321c:	tst	r6, #-2147483647	; 0x80000001
   13220:	bne	13190 <flatcc_verify_table_as_nested_root@@Base+0xa0>
   13224:	add	r3, r6, #2
   13228:	mov	r0, #27
   1322c:	cmp	r3, r4
   13230:	bhi	13190 <flatcc_verify_table_as_nested_root@@Base+0xa0>
   13234:	mov	ip, r5
   13238:	mov	r0, #30
   1323c:	ldrh	r2, [ip, r6]!
   13240:	tst	r2, #1
   13244:	strh	r2, [sp, #34]	; 0x22
   13248:	bne	13190 <flatcc_verify_table_as_nested_root@@Base+0xa0>
   1324c:	add	r6, r6, r2
   13250:	cmp	r6, r4
   13254:	bhi	13190 <flatcc_verify_table_as_nested_root@@Base+0xa0>
   13258:	mov	r0, #28
   1325c:	cmp	r2, #4
   13260:	bcc	13190 <flatcc_verify_table_as_nested_root@@Base+0xa0>
   13264:	add	r0, r5, r3
   13268:	sub	r1, r4, r1
   1326c:	ldrh	r2, [r0]
   13270:	mov	r0, #20
   13274:	cmp	r1, r2
   13278:	strh	r2, [sp, #32]
   1327c:	bcc	13190 <flatcc_verify_table_as_nested_root@@Base+0xa0>
   13280:	add	r0, sp, #12
   13284:	str	r5, [sp, #12]
   13288:	str	ip, [sp, #24]
   1328c:	str	r4, [sp, #16]
   13290:	blx	r7
   13294:	b	13190 <flatcc_verify_table_as_nested_root@@Base+0xa0>
   13298:	mov	r0, #3
   1329c:	b	13190 <flatcc_verify_table_as_nested_root@@Base+0xa0>

000132a0 <flatcc_verify_union_field@@Base>:
   132a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   132a4:	add	fp, sp, #24
   132a8:	sub	sp, sp, #32
   132ac:	mov	r5, r0
   132b0:	mov	r8, r3
   132b4:	mov	r0, #2
   132b8:	lsl	r4, r1, #1
   132bc:	ldrh	r3, [r5, #22]
   132c0:	add	r0, r0, r1, lsl #1
   132c4:	uxth	r7, r0
   132c8:	cmp	r7, r3
   132cc:	bcs	13384 <flatcc_verify_union_field@@Base+0xe4>
   132d0:	ldr	r7, [r5, #12]
   132d4:	uxtah	r0, r7, r0
   132d8:	ldrh	r9, [r0]
   132dc:	cmp	r9, #0
   132e0:	beq	13384 <flatcc_verify_union_field@@Base+0xe4>
   132e4:	ldrh	r6, [r5, #20]
   132e8:	mov	r0, #13
   132ec:	cmp	r9, r6
   132f0:	bcs	133b8 <flatcc_verify_union_field@@Base+0x118>
   132f4:	add	r4, r4, #4
   132f8:	mov	r0, #1
   132fc:	uxth	r6, r4
   13300:	cmp	r6, r3
   13304:	ldr	r3, [r5]
   13308:	uxtahcc	r0, r7, r4
   1330c:	ldr	r7, [r5, #16]
   13310:	ldrhcc	r0, [r0]
   13314:	add	r7, r3, r7
   13318:	ldrb	r3, [r7, r9]
   1331c:	clzcc	r0, r0
   13320:	lsrcc	r0, r0, #5
   13324:	cmp	r0, #0
   13328:	moveq	r0, #24
   1332c:	cmpeq	r3, #0
   13330:	beq	133b8 <flatcc_verify_union_field@@Base+0x118>
   13334:	cmp	r3, #0
   13338:	beq	133c0 <flatcc_verify_union_field@@Base+0x120>
   1333c:	add	r3, sp, #28
   13340:	mov	r0, r5
   13344:	bl	124b4 <flatcc_verify_string_field@@Base+0x88>
   13348:	cmp	r0, #0
   1334c:	bne	133b8 <flatcc_verify_union_field@@Base+0x118>
   13350:	ldr	r1, [sp, #28]
   13354:	cmp	r1, #0
   13358:	beq	133b8 <flatcc_verify_union_field@@Base+0x118>
   1335c:	ldm	r5, {r0, r2, r3}
   13360:	str	r1, [sp, #20]
   13364:	stmib	sp, {r0, r2, r3}
   13368:	ldr	r0, [r0, r1]
   1336c:	str	r0, [sp, #24]
   13370:	ldrb	r0, [r7, r9]
   13374:	strb	r0, [sp, #16]
   13378:	add	r0, sp, #4
   1337c:	blx	r8
   13380:	b	133b8 <flatcc_verify_union_field@@Base+0x118>
   13384:	add	r0, r4, #4
   13388:	uxth	r1, r0
   1338c:	cmp	r1, r3
   13390:	bcs	133ac <flatcc_verify_union_field@@Base+0x10c>
   13394:	ldr	r1, [r5, #12]
   13398:	uxtah	r0, r1, r0
   1339c:	ldrh	r1, [r0]
   133a0:	mov	r0, #23
   133a4:	cmp	r1, #0
   133a8:	bne	133b8 <flatcc_verify_union_field@@Base+0x118>
   133ac:	cmp	r2, #0
   133b0:	movwne	r2, #21
   133b4:	mov	r0, r2
   133b8:	sub	sp, fp, #24
   133bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   133c0:	mov	r0, #0
   133c4:	b	133b8 <flatcc_verify_union_field@@Base+0x118>

000133c8 <flatcc_verify_union_vector_field@@Base>:
   133c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133cc:	add	fp, sp, #28
   133d0:	sub	sp, sp, #44	; 0x2c
   133d4:	mov	r5, r0
   133d8:	mov	sl, r2
   133dc:	mov	r9, r1
   133e0:	sub	r1, r1, #1
   133e4:	mov	r0, #4
   133e8:	ldrh	r2, [r5, #22]
   133ec:	add	r6, r0, r1, lsl #1
   133f0:	uxth	r7, r6
   133f4:	cmp	r7, r2
   133f8:	bcs	13410 <flatcc_verify_union_vector_field@@Base+0x48>
   133fc:	ldr	r4, [r5, #12]
   13400:	uxtah	r4, r4, r6
   13404:	ldrh	r4, [r4]
   13408:	cmp	r4, #0
   1340c:	bne	13450 <flatcc_verify_union_vector_field@@Base+0x88>
   13410:	add	r0, r0, r9, lsl #1
   13414:	uxth	r4, r0
   13418:	cmp	r4, r2
   1341c:	bcs	13444 <flatcc_verify_union_vector_field@@Base+0x7c>
   13420:	cmp	sl, #0
   13424:	beq	13450 <flatcc_verify_union_vector_field@@Base+0x88>
   13428:	ldr	r2, [r5, #12]
   1342c:	uxtah	r0, r2, r0
   13430:	ldrh	r2, [r0]
   13434:	mov	r0, #22
   13438:	cmp	r2, #0
   1343c:	beq	13600 <flatcc_verify_union_vector_field@@Base+0x238>
   13440:	b	13450 <flatcc_verify_union_vector_field@@Base+0x88>
   13444:	mov	r0, #22
   13448:	cmp	sl, #0
   1344c:	bne	13600 <flatcc_verify_union_vector_field@@Base+0x238>
   13450:	uxth	r4, r1
   13454:	mvn	r0, #0
   13458:	str	r3, [sp, #12]
   1345c:	mov	r8, #1
   13460:	mov	r2, sl
   13464:	mov	r3, #1
   13468:	str	r0, [sp, #4]
   1346c:	mov	r0, r5
   13470:	mov	r1, r4
   13474:	str	r8, [sp]
   13478:	bl	12534 <flatcc_verify_vector_field@@Base>
   1347c:	cmp	r0, #0
   13480:	beq	134a8 <flatcc_verify_union_vector_field@@Base+0xe0>
   13484:	mvn	r0, #0
   13488:	mov	r1, r4
   1348c:	mov	r2, sl
   13490:	mov	r3, #1
   13494:	str	r8, [sp]
   13498:	str	r0, [sp, #4]
   1349c:	mov	r0, r5
   134a0:	bl	12534 <flatcc_verify_vector_field@@Base>
   134a4:	b	13600 <flatcc_verify_union_vector_field@@Base+0x238>
   134a8:	ldrh	r1, [r5, #22]
   134ac:	mov	r0, #0
   134b0:	cmp	r7, r1
   134b4:	bcs	13600 <flatcc_verify_union_vector_field@@Base+0x238>
   134b8:	ldr	r1, [r5, #12]
   134bc:	uxtah	r1, r1, r6
   134c0:	ldrh	r1, [r1]
   134c4:	cmp	r1, #0
   134c8:	beq	13600 <flatcc_verify_union_vector_field@@Base+0x238>
   134cc:	ldr	r2, [r5]
   134d0:	ldr	r3, [r5, #16]
   134d4:	ldr	r6, [sp, #12]
   134d8:	add	r2, r2, r3
   134dc:	adds	r1, r2, r1
   134e0:	beq	13600 <flatcc_verify_union_vector_field@@Base+0x238>
   134e4:	ldr	r4, [r1]
   134e8:	add	r3, sp, #16
   134ec:	mov	r0, r5
   134f0:	mov	r2, sl
   134f4:	ldr	r8, [r4, r1]!
   134f8:	mov	r1, r9
   134fc:	bl	124b4 <flatcc_verify_string_field@@Base+0x88>
   13500:	cmp	r0, #0
   13504:	bne	13600 <flatcc_verify_union_vector_field@@Base+0x238>
   13508:	ldr	r2, [sp, #16]
   1350c:	cmp	r2, #0
   13510:	beq	13600 <flatcc_verify_union_vector_field@@Base+0x238>
   13514:	ldr	r1, [r5, #8]
   13518:	cmp	r1, #1
   1351c:	blt	135fc <flatcc_verify_union_vector_field@@Base+0x234>
   13520:	ldr	r9, [r5]
   13524:	ldr	r0, [r9, r2]
   13528:	add	r3, r0, r2
   1352c:	mov	r0, #16
   13530:	cmp	r3, r2
   13534:	bls	13600 <flatcc_verify_union_vector_field@@Base+0x238>
   13538:	ldr	r2, [r5, #4]
   1353c:	add	r7, r3, #4
   13540:	cmp	r7, r2
   13544:	bhi	13600 <flatcc_verify_union_vector_field@@Base+0x238>
   13548:	ands	r5, r7, #3
   1354c:	bne	13600 <flatcc_verify_union_vector_field@@Base+0x238>
   13550:	ldr	r5, [r9, r3]
   13554:	mov	r0, #25
   13558:	cmn	r5, #-1073741823	; 0xc0000001
   1355c:	bhi	13600 <flatcc_verify_union_vector_field@@Base+0x238>
   13560:	sub	r0, r2, #4
   13564:	sub	r3, r0, r3
   13568:	mov	r0, #26
   1356c:	cmp	r3, r5, lsl #2
   13570:	bcc	13600 <flatcc_verify_union_vector_field@@Base+0x238>
   13574:	mov	r0, #34	; 0x22
   13578:	cmp	r5, r8
   1357c:	bne	13600 <flatcc_verify_union_vector_field@@Base+0x238>
   13580:	cmp	r8, #0
   13584:	sub	r0, r1, #1
   13588:	str	r2, [sp, #24]
   1358c:	str	r9, [sp, #20]
   13590:	str	r0, [sp, #28]
   13594:	beq	13608 <flatcc_verify_union_vector_field@@Base+0x240>
   13598:	add	r4, r4, #4
   1359c:	mov	r5, #0
   135a0:	add	sl, sp, #20
   135a4:	ldr	r1, [r9, r7]
   135a8:	ldrb	r0, [r4, r5]
   135ac:	cmp	r1, #0
   135b0:	beq	135dc <flatcc_verify_union_vector_field@@Base+0x214>
   135b4:	cmp	r0, #0
   135b8:	beq	13610 <flatcc_verify_union_vector_field@@Base+0x248>
   135bc:	str	r7, [sp, #36]	; 0x24
   135c0:	strb	r0, [sp, #32]
   135c4:	mov	r0, sl
   135c8:	str	r1, [sp, #40]	; 0x28
   135cc:	blx	r6
   135d0:	cmp	r0, #0
   135d4:	beq	135e4 <flatcc_verify_union_vector_field@@Base+0x21c>
   135d8:	b	13618 <flatcc_verify_union_vector_field@@Base+0x250>
   135dc:	cmp	r0, #0
   135e0:	bne	13624 <flatcc_verify_union_vector_field@@Base+0x25c>
   135e4:	add	r5, r5, #1
   135e8:	add	r7, r7, #4
   135ec:	mov	r0, #0
   135f0:	cmp	r5, r8
   135f4:	bcc	135a4 <flatcc_verify_union_vector_field@@Base+0x1dc>
   135f8:	b	13600 <flatcc_verify_union_vector_field@@Base+0x238>
   135fc:	mov	r0, #3
   13600:	sub	sp, fp, #28
   13604:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13608:	mov	r0, #0
   1360c:	b	13600 <flatcc_verify_union_vector_field@@Base+0x238>
   13610:	mov	r0, #33	; 0x21
   13614:	b	13600 <flatcc_verify_union_vector_field@@Base+0x238>
   13618:	add	r0, sp, #20
   1361c:	blx	r6
   13620:	b	13600 <flatcc_verify_union_vector_field@@Base+0x238>
   13624:	mov	r0, #32
   13628:	b	13600 <flatcc_verify_union_vector_field@@Base+0x238>

0001362c <__libc_csu_init@@Base>:
   1362c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13630:	mov	r7, r0
   13634:	ldr	r6, [pc, #72]	; 13684 <__libc_csu_init@@Base+0x58>
   13638:	ldr	r5, [pc, #72]	; 13688 <__libc_csu_init@@Base+0x5c>
   1363c:	add	r6, pc, r6
   13640:	add	r5, pc, r5
   13644:	sub	r6, r6, r5
   13648:	mov	r8, r1
   1364c:	mov	r9, r2
   13650:	bl	10e34 <strcmp@plt-0x20>
   13654:	asrs	r6, r6, #2
   13658:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1365c:	mov	r4, #0
   13660:	add	r4, r4, #1
   13664:	ldr	r3, [r5], #4
   13668:	mov	r2, r9
   1366c:	mov	r1, r8
   13670:	mov	r0, r7
   13674:	blx	r3
   13678:	cmp	r6, r4
   1367c:	bne	13660 <__libc_csu_init@@Base+0x34>
   13680:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13684:	andeq	r1, r1, r8, asr #17
   13688:	andeq	r1, r1, r0, asr #17

0001368c <__libc_csu_fini@@Base>:
   1368c:	bx	lr

Disassembly of section .fini:

00013690 <.fini>:
   13690:	push	{r3, lr}
   13694:	pop	{r3, pc}
