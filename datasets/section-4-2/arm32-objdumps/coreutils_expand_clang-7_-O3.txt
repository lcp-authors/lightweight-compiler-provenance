
../repos/coreutils/src/expand:     file format elf32-littlearm


Disassembly of section .init:

00010d78 <.init>:
   10d78:	push	{r3, lr}
   10d7c:	bl	11020 <__assert_fail@plt+0x48>
   10d80:	pop	{r3, pc}

Disassembly of section .plt:

00010d84 <calloc@plt-0x14>:
   10d84:	push	{lr}		; (str lr, [sp, #-4]!)
   10d88:	ldr	lr, [pc, #4]	; 10d94 <calloc@plt-0x4>
   10d8c:	add	lr, pc, lr
   10d90:	ldr	pc, [lr, #8]!
   10d94:	andeq	r6, r1, ip, ror #4

00010d98 <calloc@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #90112	; 0x16000
   10da0:	ldr	pc, [ip, #620]!	; 0x26c

00010da4 <fputs_unlocked@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #90112	; 0x16000
   10dac:	ldr	pc, [ip, #612]!	; 0x264

00010db0 <raise@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #90112	; 0x16000
   10db8:	ldr	pc, [ip, #604]!	; 0x25c

00010dbc <strcmp@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #90112	; 0x16000
   10dc4:	ldr	pc, [ip, #596]!	; 0x254

00010dc8 <posix_fadvise64@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #588]!	; 0x24c

00010dd4 <fflush@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #580]!	; 0x244

00010de0 <free@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #572]!	; 0x23c

00010dec <_exit@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #564]!	; 0x234

00010df8 <memcpy@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #556]!	; 0x22c

00010e04 <mbsinit@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #548]!	; 0x224

00010e10 <memcmp@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #540]!	; 0x21c

00010e1c <dcgettext@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #532]!	; 0x214

00010e28 <realloc@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #524]!	; 0x20c

00010e34 <textdomain@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #516]!	; 0x204

00010e40 <iswprint@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #508]!	; 0x1fc

00010e4c <fwrite@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #500]!	; 0x1f4

00010e58 <lseek64@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #492]!	; 0x1ec

00010e64 <__ctype_get_mb_cur_max@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #484]!	; 0x1e4

00010e70 <__fpending@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #476]!	; 0x1dc

00010e7c <mbrtowc@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #468]!	; 0x1d4

00010e88 <error@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #460]!	; 0x1cc

00010e94 <malloc@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #452]!	; 0x1c4

00010ea0 <__libc_start_main@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #444]!	; 0x1bc

00010eac <__freading@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #436]!	; 0x1b4

00010eb8 <__gmon_start__@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #428]!	; 0x1ac

00010ec4 <getopt_long@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #420]!	; 0x1a4

00010ed0 <__ctype_b_loc@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #412]!	; 0x19c

00010edc <exit@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #404]!	; 0x194

00010ee8 <strlen@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #396]!	; 0x18c

00010ef4 <__errno_location@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #388]!	; 0x184

00010f00 <__cxa_atexit@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #380]!	; 0x17c

00010f0c <memset@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #372]!	; 0x174

00010f18 <__printf_chk@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #364]!	; 0x16c

00010f24 <fileno@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #356]!	; 0x164

00010f30 <__fprintf_chk@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #348]!	; 0x15c

00010f3c <fclose@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #90112	; 0x16000
   10f44:	ldr	pc, [ip, #340]!	; 0x154

00010f48 <fseeko64@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #90112	; 0x16000
   10f50:	ldr	pc, [ip, #332]!	; 0x14c

00010f54 <__uflow@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #90112	; 0x16000
   10f5c:	ldr	pc, [ip, #324]!	; 0x144

00010f60 <__overflow@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #90112	; 0x16000
   10f68:	ldr	pc, [ip, #316]!	; 0x13c

00010f6c <setlocale@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #90112	; 0x16000
   10f74:	ldr	pc, [ip, #308]!	; 0x134

00010f78 <strrchr@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #90112	; 0x16000
   10f80:	ldr	pc, [ip, #300]!	; 0x12c

00010f84 <nl_langinfo@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #90112	; 0x16000
   10f8c:	ldr	pc, [ip, #292]!	; 0x124

00010f90 <clearerr_unlocked@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #90112	; 0x16000
   10f98:	ldr	pc, [ip, #284]!	; 0x11c

00010f9c <fopen64@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #90112	; 0x16000
   10fa4:	ldr	pc, [ip, #276]!	; 0x114

00010fa8 <bindtextdomain@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #90112	; 0x16000
   10fb0:	ldr	pc, [ip, #268]!	; 0x10c

00010fb4 <strncmp@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #90112	; 0x16000
   10fbc:	ldr	pc, [ip, #260]!	; 0x104

00010fc0 <abort@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #90112	; 0x16000
   10fc8:	ldr	pc, [ip, #252]!	; 0xfc

00010fcc <strspn@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #90112	; 0x16000
   10fd4:	ldr	pc, [ip, #244]!	; 0xf4

00010fd8 <__assert_fail@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #90112	; 0x16000
   10fe0:	ldr	pc, [ip, #236]!	; 0xec

Disassembly of section .text:

00010fe4 <.text>:
   10fe4:	mov	fp, #0
   10fe8:	mov	lr, #0
   10fec:	pop	{r1}		; (ldr r1, [sp], #4)
   10ff0:	mov	r2, sp
   10ff4:	push	{r2}		; (str r2, [sp, #-4]!)
   10ff8:	push	{r0}		; (str r0, [sp, #-4]!)
   10ffc:	ldr	ip, [pc, #16]	; 11014 <__assert_fail@plt+0x3c>
   11000:	push	{ip}		; (str ip, [sp, #-4]!)
   11004:	ldr	r0, [pc, #12]	; 11018 <__assert_fail@plt+0x40>
   11008:	ldr	r3, [pc, #12]	; 1101c <__assert_fail@plt+0x44>
   1100c:	bl	10ea0 <__libc_start_main@plt>
   11010:	bl	10fc0 <abort@plt>
   11014:	ldrdeq	r5, [r1], -r0
   11018:	andeq	r1, r1, r0, ror r3
   1101c:	andeq	r5, r1, r0, ror r6
   11020:	ldr	r3, [pc, #20]	; 1103c <__assert_fail@plt+0x64>
   11024:	ldr	r2, [pc, #20]	; 11040 <__assert_fail@plt+0x68>
   11028:	add	r3, pc, r3
   1102c:	ldr	r2, [r3, r2]
   11030:	cmp	r2, #0
   11034:	bxeq	lr
   11038:	b	10eb8 <__gmon_start__@plt>
   1103c:	ldrdeq	r5, [r1], -r0
   11040:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11044:	ldr	r0, [pc, #24]	; 11064 <__assert_fail@plt+0x8c>
   11048:	ldr	r3, [pc, #24]	; 11068 <__assert_fail@plt+0x90>
   1104c:	cmp	r3, r0
   11050:	bxeq	lr
   11054:	ldr	r3, [pc, #16]	; 1106c <__assert_fail@plt+0x94>
   11058:	cmp	r3, #0
   1105c:	bxeq	lr
   11060:	bx	r3
   11064:	andeq	r7, r2, r0, lsr r1
   11068:	andeq	r7, r2, r0, lsr r1
   1106c:	andeq	r0, r0, r0
   11070:	ldr	r0, [pc, #36]	; 1109c <__assert_fail@plt+0xc4>
   11074:	ldr	r1, [pc, #36]	; 110a0 <__assert_fail@plt+0xc8>
   11078:	sub	r1, r1, r0
   1107c:	asr	r1, r1, #2
   11080:	add	r1, r1, r1, lsr #31
   11084:	asrs	r1, r1, #1
   11088:	bxeq	lr
   1108c:	ldr	r3, [pc, #16]	; 110a4 <__assert_fail@plt+0xcc>
   11090:	cmp	r3, #0
   11094:	bxeq	lr
   11098:	bx	r3
   1109c:	andeq	r7, r2, r0, lsr r1
   110a0:	andeq	r7, r2, r0, lsr r1
   110a4:	andeq	r0, r0, r0
   110a8:	push	{r4, lr}
   110ac:	ldr	r4, [pc, #24]	; 110cc <__assert_fail@plt+0xf4>
   110b0:	ldrb	r3, [r4]
   110b4:	cmp	r3, #0
   110b8:	popne	{r4, pc}
   110bc:	bl	11044 <__assert_fail@plt+0x6c>
   110c0:	mov	r3, #1
   110c4:	strb	r3, [r4]
   110c8:	pop	{r4, pc}
   110cc:	andeq	r7, r2, r4, asr r1
   110d0:	b	11070 <__assert_fail@plt+0x98>
   110d4:	push	{fp, lr}
   110d8:	mov	fp, sp
   110dc:	sub	sp, sp, #56	; 0x38
   110e0:	mov	r4, r0
   110e4:	cmp	r0, #0
   110e8:	bne	1132c <__assert_fail@plt+0x354>
   110ec:	movw	r1, #22307	; 0x5723
   110f0:	mov	r0, #0
   110f4:	mov	r2, #5
   110f8:	movt	r1, #1
   110fc:	bl	10e1c <dcgettext@plt>
   11100:	mov	r1, r0
   11104:	movw	r0, #29080	; 0x7198
   11108:	movt	r0, #2
   1110c:	ldr	r2, [r0]
   11110:	mov	r0, #1
   11114:	bl	10f18 <__printf_chk@plt>
   11118:	movw	r1, #22340	; 0x5744
   1111c:	mov	r0, #0
   11120:	mov	r2, #5
   11124:	movt	r1, #1
   11128:	bl	10e1c <dcgettext@plt>
   1112c:	movw	r7, #29004	; 0x714c
   11130:	movt	r7, #2
   11134:	ldr	r1, [r7]
   11138:	bl	10da4 <fputs_unlocked@plt>
   1113c:	movw	r1, #22678	; 0x5896
   11140:	mov	r0, #0
   11144:	mov	r2, #5
   11148:	movt	r1, #1
   1114c:	bl	10e1c <dcgettext@plt>
   11150:	ldr	r1, [r7]
   11154:	bl	10da4 <fputs_unlocked@plt>
   11158:	movw	r1, #22734	; 0x58ce
   1115c:	mov	r0, #0
   11160:	mov	r2, #5
   11164:	movt	r1, #1
   11168:	bl	10e1c <dcgettext@plt>
   1116c:	ldr	r1, [r7]
   11170:	bl	10da4 <fputs_unlocked@plt>
   11174:	movw	r1, #22406	; 0x5786
   11178:	mov	r0, #0
   1117c:	mov	r2, #5
   11180:	movt	r1, #1
   11184:	bl	10e1c <dcgettext@plt>
   11188:	ldr	r1, [r7]
   1118c:	bl	10da4 <fputs_unlocked@plt>
   11190:	bl	12264 <__assert_fail@plt+0x128c>
   11194:	movw	r1, #22518	; 0x57f6
   11198:	mov	r0, #0
   1119c:	mov	r2, #5
   111a0:	movt	r1, #1
   111a4:	bl	10e1c <dcgettext@plt>
   111a8:	ldr	r1, [r7]
   111ac:	bl	10da4 <fputs_unlocked@plt>
   111b0:	movw	r1, #22563	; 0x5823
   111b4:	mov	r0, #0
   111b8:	mov	r2, #5
   111bc:	movt	r1, #1
   111c0:	bl	10e1c <dcgettext@plt>
   111c4:	ldr	r1, [r7]
   111c8:	bl	10da4 <fputs_unlocked@plt>
   111cc:	movw	r0, #23304	; 0x5b08
   111d0:	mov	r2, #48	; 0x30
   111d4:	mov	r6, sp
   111d8:	movw	r5, #22617	; 0x5859
   111dc:	movt	r0, #1
   111e0:	movt	r5, #1
   111e4:	add	r1, r0, #32
   111e8:	add	r3, r0, #16
   111ec:	vld1.64	{d18-d19}, [r0], r2
   111f0:	vld1.64	{d16-d17}, [r1]
   111f4:	vld1.64	{d20-d21}, [r3]
   111f8:	add	r1, r6, #32
   111fc:	vldr	d22, [r0]
   11200:	add	r0, r6, #16
   11204:	vst1.64	{d16-d17}, [r1]
   11208:	movw	r1, #22809	; 0x5919
   1120c:	vst1.64	{d20-d21}, [r0]
   11210:	mov	r0, r6
   11214:	vst1.64	{d18-d19}, [r0], r2
   11218:	movt	r1, #1
   1121c:	vstr	d22, [r0]
   11220:	mov	r0, r5
   11224:	bl	10dbc <strcmp@plt>
   11228:	cmp	r0, #0
   1122c:	ldrne	r1, [r6, #8]!
   11230:	cmpne	r1, #0
   11234:	bne	11220 <__assert_fail@plt+0x248>
   11238:	ldr	r6, [r6, #4]
   1123c:	movw	r1, #22904	; 0x5978
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	movt	r1, #1
   1124c:	bl	10e1c <dcgettext@plt>
   11250:	movw	r2, #22648	; 0x5878
   11254:	movw	r3, #22927	; 0x598f
   11258:	mov	r1, r0
   1125c:	mov	r0, #1
   11260:	movt	r2, #1
   11264:	movt	r3, #1
   11268:	bl	10f18 <__printf_chk@plt>
   1126c:	cmp	r6, #0
   11270:	mov	r0, #5
   11274:	mov	r1, #0
   11278:	moveq	r6, r5
   1127c:	bl	10f6c <setlocale@plt>
   11280:	cmp	r0, #0
   11284:	beq	112bc <__assert_fail@plt+0x2e4>
   11288:	movw	r1, #22967	; 0x59b7
   1128c:	mov	r2, #3
   11290:	movt	r1, #1
   11294:	bl	10fb4 <strncmp@plt>
   11298:	cmp	r0, #0
   1129c:	beq	112bc <__assert_fail@plt+0x2e4>
   112a0:	movw	r1, #22971	; 0x59bb
   112a4:	mov	r0, #0
   112a8:	mov	r2, #5
   112ac:	movt	r1, #1
   112b0:	bl	10e1c <dcgettext@plt>
   112b4:	ldr	r1, [r7]
   112b8:	bl	10da4 <fputs_unlocked@plt>
   112bc:	movw	r1, #23042	; 0x5a02
   112c0:	mov	r0, #0
   112c4:	mov	r2, #5
   112c8:	movt	r1, #1
   112cc:	bl	10e1c <dcgettext@plt>
   112d0:	movw	r2, #22927	; 0x598f
   112d4:	mov	r1, r0
   112d8:	mov	r0, #1
   112dc:	mov	r3, r5
   112e0:	movt	r2, #1
   112e4:	bl	10f18 <__printf_chk@plt>
   112e8:	movw	r1, #23069	; 0x5a1d
   112ec:	mov	r0, #0
   112f0:	mov	r2, #5
   112f4:	movt	r1, #1
   112f8:	bl	10e1c <dcgettext@plt>
   112fc:	movw	r3, #23119	; 0x5a4f
   11300:	mov	r1, r0
   11304:	movw	r0, #22837	; 0x5935
   11308:	cmp	r6, r5
   1130c:	mov	r2, r6
   11310:	movt	r0, #1
   11314:	movt	r3, #1
   11318:	moveq	r3, r0
   1131c:	mov	r0, #1
   11320:	bl	10f18 <__printf_chk@plt>
   11324:	mov	r0, r4
   11328:	bl	10edc <exit@plt>
   1132c:	movw	r0, #28992	; 0x7140
   11330:	movw	r1, #22268	; 0x56fc
   11334:	mov	r2, #5
   11338:	movt	r0, #2
   1133c:	movt	r1, #1
   11340:	ldr	r5, [r0]
   11344:	mov	r0, #0
   11348:	bl	10e1c <dcgettext@plt>
   1134c:	mov	r2, r0
   11350:	movw	r0, #29080	; 0x7198
   11354:	mov	r1, #1
   11358:	movt	r0, #2
   1135c:	ldr	r3, [r0]
   11360:	mov	r0, r5
   11364:	bl	10f30 <__fprintf_chk@plt>
   11368:	mov	r0, r4
   1136c:	bl	10edc <exit@plt>
   11370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11374:	add	fp, sp, #28
   11378:	sub	sp, sp, #20
   1137c:	mov	r5, r0
   11380:	ldr	r0, [r1]
   11384:	mov	r4, r1
   11388:	bl	125cc <__assert_fail@plt+0x15f4>
   1138c:	movw	r1, #23119	; 0x5a4f
   11390:	mov	r0, #6
   11394:	movt	r1, #1
   11398:	bl	10f6c <setlocale@plt>
   1139c:	movw	r6, #22652	; 0x587c
   113a0:	movw	r1, #22624	; 0x5860
   113a4:	movt	r6, #1
   113a8:	movt	r1, #1
   113ac:	mov	r0, r6
   113b0:	bl	10fa8 <bindtextdomain@plt>
   113b4:	mov	r0, r6
   113b8:	bl	10e34 <textdomain@plt>
   113bc:	movw	r0, #8912	; 0x22d0
   113c0:	movt	r0, #1
   113c4:	bl	156d4 <__assert_fail@plt+0x46fc>
   113c8:	movw	r1, #29016	; 0x7158
   113cc:	movw	r9, #23184	; 0x5a90
   113d0:	movw	r7, #23220	; 0x5ab4
   113d4:	movw	sl, #29008	; 0x7150
   113d8:	mov	r0, #1
   113dc:	mov	r6, #0
   113e0:	add	r8, sp, #13
   113e4:	movt	r1, #2
   113e8:	movt	r9, #1
   113ec:	movt	r7, #1
   113f0:	movt	sl, #2
   113f4:	strb	r0, [r1]
   113f8:	b	11404 <__assert_fail@plt+0x42c>
   113fc:	sub	r0, r1, #1
   11400:	bl	11870 <__assert_fail@plt+0x898>
   11404:	mov	r0, r5
   11408:	mov	r1, r4
   1140c:	mov	r2, r9
   11410:	mov	r3, r7
   11414:	str	r6, [sp]
   11418:	bl	10ec4 <getopt_long@plt>
   1141c:	sub	r1, r0, #48	; 0x30
   11420:	cmp	r1, #10
   11424:	bcs	11448 <__assert_fail@plt+0x470>
   11428:	ldr	r1, [sl]
   1142c:	cmp	r1, #0
   11430:	bne	113fc <__assert_fail@plt+0x424>
   11434:	strb	r6, [sp, #14]
   11438:	strb	r0, [sp, #13]
   1143c:	mov	r0, r8
   11440:	bl	11870 <__assert_fail@plt+0x898>
   11444:	b	11404 <__assert_fail@plt+0x42c>
   11448:	cmp	r0, #104	; 0x68
   1144c:	ble	1147c <__assert_fail@plt+0x4a4>
   11450:	cmp	r0, #116	; 0x74
   11454:	beq	11470 <__assert_fail@plt+0x498>
   11458:	cmp	r0, #105	; 0x69
   1145c:	bne	11754 <__assert_fail@plt+0x77c>
   11460:	movw	r0, #29016	; 0x7158
   11464:	movt	r0, #2
   11468:	strb	r6, [r0]
   1146c:	b	11404 <__assert_fail@plt+0x42c>
   11470:	ldr	r0, [sl]
   11474:	bl	11870 <__assert_fail@plt+0x898>
   11478:	b	11404 <__assert_fail@plt+0x42c>
   1147c:	cmn	r0, #1
   11480:	bne	116f4 <__assert_fail@plt+0x71c>
   11484:	bl	11e00 <__assert_fail@plt+0xe28>
   11488:	movw	r0, #28984	; 0x7138
   1148c:	movt	r0, #2
   11490:	ldr	r1, [r0]
   11494:	mov	r0, #0
   11498:	cmp	r1, r5
   1149c:	addlt	r0, r4, r1, lsl #2
   114a0:	bl	12004 <__assert_fail@plt+0x102c>
   114a4:	mov	r0, #0
   114a8:	bl	1202c <__assert_fail@plt+0x1054>
   114ac:	cmp	r0, #0
   114b0:	beq	116dc <__assert_fail@plt+0x704>
   114b4:	movw	r8, #29004	; 0x714c
   114b8:	movw	r4, #29016	; 0x7158
   114bc:	mov	sl, r0
   114c0:	movt	r8, #2
   114c4:	movt	r4, #2
   114c8:	mov	r7, #0
   114cc:	mov	r9, #1
   114d0:	mov	r5, #0
   114d4:	str	r7, [sp, #16]
   114d8:	ldmib	sl, {r0, r1}
   114dc:	cmp	r0, r1
   114e0:	bcs	11634 <__assert_fail@plt+0x65c>
   114e4:	add	r1, r0, #1
   114e8:	str	r1, [sl, #4]
   114ec:	ldrb	r6, [r0]
   114f0:	tst	r9, #1
   114f4:	beq	11668 <__assert_fail@plt+0x690>
   114f8:	cmp	r6, #8
   114fc:	beq	11598 <__assert_fail@plt+0x5c0>
   11500:	cmp	r6, #9
   11504:	bne	115d8 <__assert_fail@plt+0x600>
   11508:	mov	r0, r7
   1150c:	mov	r1, r5
   11510:	add	r2, sp, #16
   11514:	add	r3, sp, #15
   11518:	bl	11f20 <__assert_fail@plt+0xf48>
   1151c:	ldrb	r2, [sp, #15]
   11520:	adds	r6, r7, #1
   11524:	adc	r4, r5, #0
   11528:	cmp	r2, #0
   1152c:	moveq	r6, r0
   11530:	moveq	r4, r1
   11534:	subs	r0, r6, r7
   11538:	sbcs	r0, r4, r5
   1153c:	bcc	1175c <__assert_fail@plt+0x784>
   11540:	adds	r7, r7, #1
   11544:	adc	r5, r5, #0
   11548:	subs	r0, r7, r6
   1154c:	sbcs	r0, r5, r4
   11550:	bcs	115fc <__assert_fail@plt+0x624>
   11554:	ldr	r0, [r8]
   11558:	ldr	r1, [r0, #20]
   1155c:	ldr	r2, [r0, #24]
   11560:	cmp	r1, r2
   11564:	bcs	11584 <__assert_fail@plt+0x5ac>
   11568:	add	r2, r1, #1
   1156c:	str	r2, [r0, #20]
   11570:	mov	r0, #32
   11574:	strb	r0, [r1]
   11578:	cmn	r0, #1
   1157c:	bgt	11540 <__assert_fail@plt+0x568>
   11580:	b	116b0 <__assert_fail@plt+0x6d8>
   11584:	mov	r1, #32
   11588:	bl	10f60 <__overflow@plt>
   1158c:	cmn	r0, #1
   11590:	bgt	11540 <__assert_fail@plt+0x568>
   11594:	b	116b0 <__assert_fail@plt+0x6d8>
   11598:	ldr	r0, [sp, #16]
   1159c:	mov	r6, #8
   115a0:	cmp	r0, #0
   115a4:	subne	r0, r0, #1
   115a8:	subs	r1, r7, #1
   115ac:	str	r0, [sp, #16]
   115b0:	orr	r0, r7, r5
   115b4:	sbc	r2, r5, #0
   115b8:	cmp	r0, #0
   115bc:	movne	r5, r2
   115c0:	movne	r7, r1
   115c4:	ldrb	r0, [r4]
   115c8:	mov	r9, #1
   115cc:	cmp	r0, #0
   115d0:	bne	1166c <__assert_fail@plt+0x694>
   115d4:	b	11618 <__assert_fail@plt+0x640>
   115d8:	adds	r7, r7, #1
   115dc:	adc	r5, r5, #0
   115e0:	orrs	r0, r7, r5
   115e4:	beq	1175c <__assert_fail@plt+0x784>
   115e8:	ldrb	r0, [r4]
   115ec:	mov	r9, #1
   115f0:	cmp	r0, #0
   115f4:	bne	1166c <__assert_fail@plt+0x694>
   115f8:	b	11618 <__assert_fail@plt+0x640>
   115fc:	movw	r4, #29016	; 0x7158
   11600:	mov	r6, #32
   11604:	movt	r4, #2
   11608:	ldrb	r0, [r4]
   1160c:	mov	r9, #1
   11610:	cmp	r0, #0
   11614:	bne	1166c <__assert_fail@plt+0x694>
   11618:	bl	10ed0 <__ctype_b_loc@plt>
   1161c:	ldr	r0, [r0]
   11620:	ldrb	r0, [r0, r6, lsl #1]
   11624:	and	r9, r0, #1
   11628:	cmp	r6, #0
   1162c:	bge	11674 <__assert_fail@plt+0x69c>
   11630:	b	116dc <__assert_fail@plt+0x704>
   11634:	mov	r0, sl
   11638:	bl	10f54 <__uflow@plt>
   1163c:	mov	r6, r0
   11640:	cmn	r0, #1
   11644:	bgt	114f0 <__assert_fail@plt+0x518>
   11648:	mov	r0, sl
   1164c:	bl	1202c <__assert_fail@plt+0x1054>
   11650:	mov	sl, r0
   11654:	cmp	r0, #0
   11658:	bne	114d8 <__assert_fail@plt+0x500>
   1165c:	mov	sl, #0
   11660:	tst	r9, #1
   11664:	bne	114f8 <__assert_fail@plt+0x520>
   11668:	mov	r9, #0
   1166c:	cmp	r6, #0
   11670:	blt	116dc <__assert_fail@plt+0x704>
   11674:	ldr	r0, [r8]
   11678:	ldr	r1, [r0, #20]
   1167c:	ldr	r2, [r0, #24]
   11680:	cmp	r1, r2
   11684:	bcs	116a0 <__assert_fail@plt+0x6c8>
   11688:	add	r2, r1, #1
   1168c:	str	r2, [r0, #20]
   11690:	strb	r6, [r1]
   11694:	cmp	r6, #10
   11698:	bne	114d8 <__assert_fail@plt+0x500>
   1169c:	b	114c8 <__assert_fail@plt+0x4f0>
   116a0:	uxtb	r1, r6
   116a4:	bl	10f60 <__overflow@plt>
   116a8:	cmn	r0, #1
   116ac:	bgt	11694 <__assert_fail@plt+0x6bc>
   116b0:	bl	10ef4 <__errno_location@plt>
   116b4:	ldr	r4, [r0]
   116b8:	movw	r1, #23169	; 0x5a81
   116bc:	mov	r0, #0
   116c0:	mov	r2, #5
   116c4:	movt	r1, #1
   116c8:	bl	10e1c <dcgettext@plt>
   116cc:	mov	r2, r0
   116d0:	mov	r0, #1
   116d4:	mov	r1, r4
   116d8:	bl	10e88 <error@plt>
   116dc:	bl	12214 <__assert_fail@plt+0x123c>
   116e0:	movw	r0, #29020	; 0x715c
   116e4:	movt	r0, #2
   116e8:	ldr	r0, [r0]
   116ec:	sub	sp, fp, #28
   116f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116f4:	cmn	r0, #3
   116f8:	beq	1170c <__assert_fail@plt+0x734>
   116fc:	cmn	r0, #2
   11700:	bne	11754 <__assert_fail@plt+0x77c>
   11704:	mov	r0, #0
   11708:	bl	110d4 <__assert_fail@plt+0xfc>
   1170c:	movw	r0, #28904	; 0x70e8
   11710:	movw	r2, #22662	; 0x5886
   11714:	mov	r1, #0
   11718:	movt	r0, #2
   1171c:	movt	r2, #1
   11720:	str	r1, [sp, #4]
   11724:	movw	r1, #22617	; 0x5859
   11728:	ldr	r3, [r0]
   1172c:	movw	r0, #29004	; 0x714c
   11730:	str	r2, [sp]
   11734:	movw	r2, #22648	; 0x5878
   11738:	movt	r1, #1
   1173c:	movt	r0, #2
   11740:	movt	r2, #1
   11744:	ldr	r0, [r0]
   11748:	bl	149ec <__assert_fail@plt+0x3a14>
   1174c:	mov	r0, #0
   11750:	bl	10edc <exit@plt>
   11754:	mov	r0, #1
   11758:	bl	110d4 <__assert_fail@plt+0xfc>
   1175c:	movw	r1, #23146	; 0x5a6a
   11760:	mov	r0, #0
   11764:	mov	r2, #5
   11768:	movt	r1, #1
   1176c:	bl	10e1c <dcgettext@plt>
   11770:	mov	r2, r0
   11774:	mov	r0, #1
   11778:	mov	r1, #0
   1177c:	bl	10e88 <error@plt>
   11780:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11784:	add	fp, sp, #24
   11788:	movw	r9, #29024	; 0x7160
   1178c:	mov	r4, r1
   11790:	mov	r6, r0
   11794:	mov	r0, #0
   11798:	movt	r9, #2
   1179c:	ldr	r1, [r9, #4]
   117a0:	cmp	r1, #0
   117a4:	beq	117b8 <__assert_fail@plt+0x7e0>
   117a8:	ldr	r2, [r9, #8]
   117ac:	add	r2, r2, r1, lsl #3
   117b0:	ldrd	r2, [r2, #-8]
   117b4:	b	117c0 <__assert_fail@plt+0x7e8>
   117b8:	mov	r2, #0
   117bc:	mov	r3, #0
   117c0:	subs	r7, r6, r2
   117c4:	mov	r5, r6
   117c8:	sbcs	r7, r4, r3
   117cc:	movwcc	r0, #1
   117d0:	cmp	r0, #0
   117d4:	mov	r0, r4
   117d8:	movne	r5, r2
   117dc:	movne	r0, r3
   117e0:	subs	r8, r5, r2
   117e4:	sbc	r7, r0, r3
   117e8:	ldr	r0, [r9, #12]
   117ec:	cmp	r1, r0
   117f0:	bne	11810 <__assert_fail@plt+0x838>
   117f4:	ldr	r0, [r9, #8]
   117f8:	add	r1, r9, #12
   117fc:	mov	r2, #8
   11800:	bl	14dcc <__assert_fail@plt+0x3df4>
   11804:	str	r0, [r9, #8]
   11808:	ldr	r1, [r9, #4]
   1180c:	b	11814 <__assert_fail@plt+0x83c>
   11810:	ldr	r0, [r9, #8]
   11814:	add	r2, r1, #1
   11818:	str	r2, [r9, #4]
   1181c:	str	r6, [r0, r1, lsl #3]!
   11820:	str	r4, [r0, #4]
   11824:	movw	r0, #29392	; 0x72d0
   11828:	movt	r0, #2
   1182c:	ldr	r1, [r0]
   11830:	subs	r1, r1, r8
   11834:	rscs	r1, r7, #0
   11838:	popcs	{r4, r5, r6, r7, r8, r9, fp, pc}
   1183c:	cmp	r7, #0
   11840:	bne	1184c <__assert_fail@plt+0x874>
   11844:	str	r8, [r0]
   11848:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1184c:	movw	r1, #23360	; 0x5b40
   11850:	mov	r0, #0
   11854:	mov	r2, #5
   11858:	movt	r1, #1
   1185c:	bl	10e1c <dcgettext@plt>
   11860:	mov	r2, r0
   11864:	mov	r0, #1
   11868:	mov	r1, #0
   1186c:	bl	10e88 <error@plt>
   11870:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11874:	add	fp, sp, #28
   11878:	sub	sp, sp, #12
   1187c:	mov	r5, r0
   11880:	mov	r0, #0
   11884:	movw	r8, #29024	; 0x7160
   11888:	mov	ip, #1
   1188c:	mov	sl, #0
   11890:	mov	r9, #0
   11894:	mov	r6, #0
   11898:	str	r0, [sp, #8]
   1189c:	mov	r0, #0
   118a0:	movt	r8, #2
   118a4:	str	r0, [sp, #4]
   118a8:	mov	r0, #0
   118ac:	str	r0, [sp]
   118b0:	ldrb	r4, [r5]
   118b4:	cmp	r4, #44	; 0x2c
   118b8:	bne	118d4 <__assert_fail@plt+0x8fc>
   118bc:	b	11aa8 <__assert_fail@plt+0xad0>
   118c0:	mov	r6, #0
   118c4:	add	r5, r5, #1
   118c8:	ldrb	r4, [r5]
   118cc:	cmp	r4, #44	; 0x2c
   118d0:	beq	11aa8 <__assert_fail@plt+0xad0>
   118d4:	cmp	r4, #0
   118d8:	beq	11bf8 <__assert_fail@plt+0xc20>
   118dc:	mov	r7, ip
   118e0:	bl	10ed0 <__ctype_b_loc@plt>
   118e4:	ldr	r0, [r0]
   118e8:	mov	ip, r7
   118ec:	ldrb	r0, [r0, r4, lsl #1]
   118f0:	tst	r0, #1
   118f4:	bne	11aa8 <__assert_fail@plt+0xad0>
   118f8:	cmp	r4, #43	; 0x2b
   118fc:	beq	11954 <__assert_fail@plt+0x97c>
   11900:	cmp	r4, #47	; 0x2f
   11904:	bne	119a0 <__assert_fail@plt+0x9c8>
   11908:	mov	r9, #0
   1190c:	tst	r6, #1
   11910:	beq	11ad0 <__assert_fail@plt+0xaf8>
   11914:	movw	r1, #23383	; 0x5b57
   11918:	mov	r0, #0
   1191c:	mov	r2, #5
   11920:	movt	r1, #1
   11924:	bl	10e1c <dcgettext@plt>
   11928:	mov	r6, r0
   1192c:	mov	r0, r5
   11930:	bl	14548 <__assert_fail@plt+0x3570>
   11934:	mov	r3, r0
   11938:	mov	r0, #0
   1193c:	mov	r1, #0
   11940:	mov	r2, r6
   11944:	bl	10e88 <error@plt>
   11948:	mov	sl, #1
   1194c:	mov	ip, #0
   11950:	b	11a94 <__assert_fail@plt+0xabc>
   11954:	tst	r6, #1
   11958:	beq	11af8 <__assert_fail@plt+0xb20>
   1195c:	movw	r1, #23424	; 0x5b80
   11960:	mov	r0, #0
   11964:	mov	r2, #5
   11968:	mov	sl, #0
   1196c:	movt	r1, #1
   11970:	bl	10e1c <dcgettext@plt>
   11974:	mov	r6, r0
   11978:	mov	r0, r5
   1197c:	bl	14548 <__assert_fail@plt+0x3570>
   11980:	mov	r3, r0
   11984:	mov	r0, #0
   11988:	mov	r1, #0
   1198c:	mov	r2, r6
   11990:	bl	10e88 <error@plt>
   11994:	mov	r9, #1
   11998:	mov	ip, #0
   1199c:	b	11a94 <__assert_fail@plt+0xabc>
   119a0:	sub	r0, r4, #48	; 0x30
   119a4:	cmp	r0, #9
   119a8:	bhi	11dc4 <__assert_fail@plt+0xdec>
   119ac:	ldr	r2, [sp]
   119b0:	ldr	r3, [sp, #4]
   119b4:	ands	r1, r6, #1
   119b8:	moveq	r2, r5
   119bc:	str	r2, [sp]
   119c0:	mov	r2, r1
   119c4:	movne	r2, r3
   119c8:	ldr	r3, [sp, #8]
   119cc:	movne	r1, r3
   119d0:	movw	r3, #39321	; 0x9999
   119d4:	movt	r3, #39321	; 0x9999
   119d8:	subs	r3, r3, r1
   119dc:	movw	r3, #39321	; 0x9999
   119e0:	movt	r3, #6553	; 0x1999
   119e4:	sbcs	r3, r3, r2
   119e8:	bcc	11a1c <__assert_fail@plt+0xa44>
   119ec:	mov	r3, #10
   119f0:	add	r6, r2, r2, lsl #2
   119f4:	str	r1, [sp, #8]
   119f8:	str	r2, [sp, #4]
   119fc:	umull	r3, r7, r1, r3
   11a00:	add	r7, r7, r6, lsl #1
   11a04:	adds	r3, r3, r0
   11a08:	mov	r6, #1
   11a0c:	adc	r0, r7, r0, asr #31
   11a10:	subs	r7, r3, r1
   11a14:	sbcs	r7, r0, r2
   11a18:	bcs	11be0 <__assert_fail@plt+0xc08>
   11a1c:	ldr	r7, [sp]
   11a20:	movw	r1, #23465	; 0x5ba9
   11a24:	movt	r1, #1
   11a28:	mov	r0, r7
   11a2c:	bl	10fcc <strspn@plt>
   11a30:	mov	r5, r0
   11a34:	mov	r0, r7
   11a38:	mov	r1, r5
   11a3c:	bl	150f8 <__assert_fail@plt+0x4120>
   11a40:	movw	r1, #23476	; 0x5bb4
   11a44:	mov	r6, r0
   11a48:	mov	r0, #0
   11a4c:	mov	r2, #5
   11a50:	movt	r1, #1
   11a54:	bl	10e1c <dcgettext@plt>
   11a58:	mov	r4, r8
   11a5c:	mov	r8, r0
   11a60:	mov	r0, r6
   11a64:	bl	14548 <__assert_fail@plt+0x3570>
   11a68:	mov	r3, r0
   11a6c:	mov	r2, r8
   11a70:	mov	r0, #0
   11a74:	mov	r1, #0
   11a78:	mov	r8, r4
   11a7c:	bl	10e88 <error@plt>
   11a80:	mov	r0, r6
   11a84:	bl	12500 <__assert_fail@plt+0x1528>
   11a88:	add	r0, r7, r5
   11a8c:	mov	ip, #0
   11a90:	sub	r5, r0, #1
   11a94:	mov	r6, #1
   11a98:	add	r5, r5, #1
   11a9c:	ldrb	r4, [r5]
   11aa0:	cmp	r4, #44	; 0x2c
   11aa4:	bne	118d4 <__assert_fail@plt+0x8fc>
   11aa8:	tst	r6, #1
   11aac:	beq	118c0 <__assert_fail@plt+0x8e8>
   11ab0:	tst	sl, #1
   11ab4:	beq	11ad8 <__assert_fail@plt+0xb00>
   11ab8:	ldrd	r0, [r8, #24]
   11abc:	orrs	r0, r0, r1
   11ac0:	bne	11c28 <__assert_fail@plt+0xc50>
   11ac4:	ldr	r0, [sp, #8]
   11ac8:	ldr	r1, [sp, #4]
   11acc:	strd	r0, [r8, #24]
   11ad0:	mov	sl, #1
   11ad4:	b	118c0 <__assert_fail@plt+0x8e8>
   11ad8:	tst	r9, #1
   11adc:	beq	11b04 <__assert_fail@plt+0xb2c>
   11ae0:	ldrd	r0, [r8, #32]
   11ae4:	orrs	r0, r0, r1
   11ae8:	bne	11c84 <__assert_fail@plt+0xcac>
   11aec:	ldr	r0, [sp, #8]
   11af0:	ldr	r1, [sp, #4]
   11af4:	strd	r0, [r8, #32]
   11af8:	mov	r9, #1
   11afc:	mov	sl, #0
   11b00:	b	118c0 <__assert_fail@plt+0x8e8>
   11b04:	ldr	r1, [r8, #4]
   11b08:	cmp	r1, #0
   11b0c:	beq	11b24 <__assert_fail@plt+0xb4c>
   11b10:	ldr	r0, [r8, #8]
   11b14:	add	r0, r0, r1, lsl #3
   11b18:	ldr	r3, [r0, #-4]
   11b1c:	ldr	r0, [r0, #-8]
   11b20:	b	11b2c <__assert_fail@plt+0xb54>
   11b24:	mov	r0, #0
   11b28:	mov	r3, #0
   11b2c:	ldr	r6, [sp, #8]
   11b30:	ldr	r7, [sp, #4]
   11b34:	subs	r2, r6, r0
   11b38:	sbcs	r2, r7, r3
   11b3c:	mov	r2, #0
   11b40:	movwcc	r2, #1
   11b44:	cmp	r2, #0
   11b48:	mov	r2, r7
   11b4c:	movne	r6, r0
   11b50:	movne	r2, r3
   11b54:	subs	r6, r6, r0
   11b58:	ldr	r0, [r8, #12]
   11b5c:	sbc	r4, r2, r3
   11b60:	cmp	r1, r0
   11b64:	bne	11b8c <__assert_fail@plt+0xbb4>
   11b68:	ldr	r0, [r8, #8]
   11b6c:	add	r1, r8, #12
   11b70:	mov	r2, #8
   11b74:	mov	r7, ip
   11b78:	bl	14dcc <__assert_fail@plt+0x3df4>
   11b7c:	str	r0, [r8, #8]
   11b80:	mov	ip, r7
   11b84:	ldr	r1, [r8, #4]
   11b88:	b	11b90 <__assert_fail@plt+0xbb8>
   11b8c:	ldr	r0, [r8, #8]
   11b90:	add	r2, r1, #1
   11b94:	mov	sl, #0
   11b98:	str	r2, [r8, #4]
   11b9c:	ldr	r2, [sp, #8]
   11ba0:	str	r2, [r0, r1, lsl #3]!
   11ba4:	ldr	r1, [sp, #4]
   11ba8:	str	r1, [r0, #4]
   11bac:	movw	r0, #29392	; 0x72d0
   11bb0:	movt	r0, #2
   11bb4:	ldr	r0, [r0]
   11bb8:	subs	r0, r0, r6
   11bbc:	rscs	r0, r4, #0
   11bc0:	bcs	11bd8 <__assert_fail@plt+0xc00>
   11bc4:	cmp	r4, #0
   11bc8:	bne	11d8c <__assert_fail@plt+0xdb4>
   11bcc:	movw	r0, #29392	; 0x72d0
   11bd0:	movt	r0, #2
   11bd4:	str	r6, [r0]
   11bd8:	mov	r9, #0
   11bdc:	b	118c0 <__assert_fail@plt+0x8e8>
   11be0:	stmib	sp, {r0, r3}
   11be4:	add	r5, r5, #1
   11be8:	ldrb	r4, [r5]
   11bec:	cmp	r4, #44	; 0x2c
   11bf0:	bne	118d4 <__assert_fail@plt+0x8fc>
   11bf4:	b	11aa8 <__assert_fail@plt+0xad0>
   11bf8:	and	r0, ip, r6
   11bfc:	tst	r0, #1
   11c00:	beq	11db0 <__assert_fail@plt+0xdd8>
   11c04:	tst	sl, #1
   11c08:	beq	11c60 <__assert_fail@plt+0xc88>
   11c0c:	ldrd	r0, [r8, #24]
   11c10:	orrs	r0, r0, r1
   11c14:	ldreq	r0, [sp, #8]
   11c18:	ldreq	r1, [sp, #4]
   11c1c:	strdeq	r0, [r8, #24]
   11c20:	subeq	sp, fp, #28
   11c24:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c28:	movw	r1, #24026	; 0x5dda
   11c2c:	mov	r0, #0
   11c30:	mov	r2, #5
   11c34:	movt	r1, #1
   11c38:	bl	10e1c <dcgettext@plt>
   11c3c:	mov	r2, r0
   11c40:	mov	r0, #0
   11c44:	mov	r1, #0
   11c48:	bl	10e88 <error@plt>
   11c4c:	ldr	r0, [sp, #8]
   11c50:	ldr	r1, [sp, #4]
   11c54:	strd	r0, [r8, #24]
   11c58:	mov	r0, #1
   11c5c:	bl	10edc <exit@plt>
   11c60:	tst	r9, #1
   11c64:	beq	11cbc <__assert_fail@plt+0xce4>
   11c68:	ldrd	r0, [r8, #32]
   11c6c:	orrs	r0, r0, r1
   11c70:	ldreq	r0, [sp, #8]
   11c74:	ldreq	r1, [sp, #4]
   11c78:	strdeq	r0, [r8, #32]
   11c7c:	subeq	sp, fp, #28
   11c80:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c84:	movw	r1, #24073	; 0x5e09
   11c88:	mov	r0, #0
   11c8c:	mov	r2, #5
   11c90:	movt	r1, #1
   11c94:	bl	10e1c <dcgettext@plt>
   11c98:	mov	r2, r0
   11c9c:	mov	r0, #0
   11ca0:	mov	r1, #0
   11ca4:	bl	10e88 <error@plt>
   11ca8:	ldr	r0, [sp, #8]
   11cac:	ldr	r1, [sp, #4]
   11cb0:	strd	r0, [r8, #32]
   11cb4:	mov	r0, #1
   11cb8:	bl	10edc <exit@plt>
   11cbc:	ldr	r1, [r8, #4]
   11cc0:	mov	r7, #0
   11cc4:	cmp	r1, #0
   11cc8:	beq	11cdc <__assert_fail@plt+0xd04>
   11ccc:	ldr	r2, [r8, #8]
   11cd0:	add	r2, r2, r1, lsl #3
   11cd4:	ldrd	r2, [r2, #-8]
   11cd8:	b	11ce4 <__assert_fail@plt+0xd0c>
   11cdc:	mov	r2, #0
   11ce0:	mov	r3, #0
   11ce4:	ldr	r5, [sp, #8]
   11ce8:	ldr	r0, [sp, #4]
   11cec:	subs	r6, r5, r2
   11cf0:	sbcs	r6, r0, r3
   11cf4:	movwcc	r7, #1
   11cf8:	mov	r6, r5
   11cfc:	cmp	r7, #0
   11d00:	movne	r6, r2
   11d04:	movne	r0, r3
   11d08:	subs	r5, r6, r2
   11d0c:	sbc	r6, r0, r3
   11d10:	ldr	r0, [r8, #12]
   11d14:	cmp	r1, r0
   11d18:	bne	11d40 <__assert_fail@plt+0xd68>
   11d1c:	ldr	r0, [r8, #8]
   11d20:	add	r1, r8, #12
   11d24:	mov	r2, #8
   11d28:	mov	r4, ip
   11d2c:	bl	14dcc <__assert_fail@plt+0x3df4>
   11d30:	str	r0, [r8, #8]
   11d34:	mov	ip, r4
   11d38:	ldr	r1, [r8, #4]
   11d3c:	b	11d44 <__assert_fail@plt+0xd6c>
   11d40:	ldr	r0, [r8, #8]
   11d44:	add	r2, r1, #1
   11d48:	str	r2, [r8, #4]
   11d4c:	ldr	r2, [sp, #8]
   11d50:	str	r2, [r0, r1, lsl #3]!
   11d54:	ldr	r1, [sp, #4]
   11d58:	str	r1, [r0, #4]
   11d5c:	movw	r0, #29392	; 0x72d0
   11d60:	movt	r0, #2
   11d64:	ldr	r0, [r0]
   11d68:	subs	r0, r0, r5
   11d6c:	rscs	r0, r6, #0
   11d70:	bcs	11db0 <__assert_fail@plt+0xdd8>
   11d74:	cmp	r6, #0
   11d78:	movweq	r0, #29392	; 0x72d0
   11d7c:	movteq	r0, #2
   11d80:	streq	r5, [r0]
   11d84:	subeq	sp, fp, #28
   11d88:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d8c:	movw	r1, #23360	; 0x5b40
   11d90:	mov	r0, #0
   11d94:	mov	r2, #5
   11d98:	movt	r1, #1
   11d9c:	bl	10e1c <dcgettext@plt>
   11da0:	mov	r2, r0
   11da4:	mov	r0, #1
   11da8:	mov	r1, #0
   11dac:	bl	10e88 <error@plt>
   11db0:	tst	ip, #1
   11db4:	subne	sp, fp, #28
   11db8:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11dbc:	mov	r0, #1
   11dc0:	bl	10edc <exit@plt>
   11dc4:	movw	r1, #23501	; 0x5bcd
   11dc8:	mov	r0, #0
   11dcc:	mov	r2, #5
   11dd0:	movt	r1, #1
   11dd4:	bl	10e1c <dcgettext@plt>
   11dd8:	mov	r4, r0
   11ddc:	mov	r0, r5
   11de0:	bl	14548 <__assert_fail@plt+0x3570>
   11de4:	mov	r3, r0
   11de8:	mov	r0, #0
   11dec:	mov	r1, #0
   11df0:	mov	r2, r4
   11df4:	bl	10e88 <error@plt>
   11df8:	mov	r0, #1
   11dfc:	bl	10edc <exit@plt>
   11e00:	push	{r4, r5, r6, r7, fp, lr}
   11e04:	add	fp, sp, #16
   11e08:	movw	lr, #29024	; 0x7160
   11e0c:	movt	lr, #2
   11e10:	ldmib	lr, {r2, ip}
   11e14:	cmp	r2, #0
   11e18:	beq	11e60 <__assert_fail@plt+0xe88>
   11e1c:	mov	r3, #0
   11e20:	mov	r1, ip
   11e24:	mov	r0, #0
   11e28:	mov	r4, #0
   11e2c:	ldr	r6, [r1]
   11e30:	ldr	r5, [r1, #4]
   11e34:	orrs	r7, r6, r5
   11e38:	beq	11ee4 <__assert_fail@plt+0xf0c>
   11e3c:	subs	r0, r0, r6
   11e40:	sbcs	r0, r4, r5
   11e44:	bcs	11ef0 <__assert_fail@plt+0xf18>
   11e48:	add	r3, r3, #1
   11e4c:	add	r1, r1, #8
   11e50:	mov	r0, r6
   11e54:	mov	r4, r5
   11e58:	cmp	r3, r2
   11e5c:	bcc	11e2c <__assert_fail@plt+0xe54>
   11e60:	add	r5, lr, #28
   11e64:	ldr	r1, [lr, #24]
   11e68:	ldm	r5, {r0, r3, r5}
   11e6c:	orrs	r4, r3, r5
   11e70:	orrsne	r6, r1, r0
   11e74:	bne	11f14 <__assert_fail@plt+0xf3c>
   11e78:	cmp	r2, #0
   11e7c:	beq	11ea8 <__assert_fail@plt+0xed0>
   11e80:	mov	r4, #0
   11e84:	cmp	r2, #1
   11e88:	bne	11ed8 <__assert_fail@plt+0xf00>
   11e8c:	orr	r0, r0, r5
   11e90:	orr	r1, r1, r3
   11e94:	mov	r5, #0
   11e98:	orrs	r0, r1, r0
   11e9c:	ldrdeq	r4, [ip]
   11ea0:	strd	r4, [lr, #40]	; 0x28
   11ea4:	pop	{r4, r5, r6, r7, fp, pc}
   11ea8:	cmp	r4, #0
   11eac:	orr	r0, r1, r0
   11eb0:	mov	r5, #0
   11eb4:	movweq	r3, #8
   11eb8:	cmp	r0, #0
   11ebc:	movw	r0, #29392	; 0x72d0
   11ec0:	movne	r3, r1
   11ec4:	movt	r0, #2
   11ec8:	mov	r4, r3
   11ecc:	str	r3, [r0]
   11ed0:	strd	r4, [lr, #40]	; 0x28
   11ed4:	pop	{r4, r5, r6, r7, fp, pc}
   11ed8:	mov	r5, #0
   11edc:	strd	r4, [lr, #40]	; 0x28
   11ee0:	pop	{r4, r5, r6, r7, fp, pc}
   11ee4:	movw	r1, #24120	; 0x5e38
   11ee8:	movt	r1, #1
   11eec:	b	11ef8 <__assert_fail@plt+0xf20>
   11ef0:	movw	r1, #24141	; 0x5e4d
   11ef4:	movt	r1, #1
   11ef8:	mov	r0, #0
   11efc:	mov	r2, #5
   11f00:	bl	10e1c <dcgettext@plt>
   11f04:	mov	r2, r0
   11f08:	mov	r0, #1
   11f0c:	mov	r1, #0
   11f10:	bl	10e88 <error@plt>
   11f14:	movw	r1, #24169	; 0x5e69
   11f18:	movt	r1, #1
   11f1c:	b	11ef8 <__assert_fail@plt+0xf20>
   11f20:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11f24:	add	fp, sp, #24
   11f28:	movw	ip, #29024	; 0x7160
   11f2c:	mov	r9, r0
   11f30:	mov	r0, #0
   11f34:	mov	r8, r1
   11f38:	strb	r0, [r3]
   11f3c:	movt	ip, #2
   11f40:	ldrd	r6, [ip, #40]	; 0x28
   11f44:	orrs	r0, r6, r7
   11f48:	bne	11f94 <__assert_fail@plt+0xfbc>
   11f4c:	ldr	r1, [ip, #4]
   11f50:	ldr	r0, [r2]
   11f54:	cmp	r0, r1
   11f58:	bcs	11f88 <__assert_fail@plt+0xfb0>
   11f5c:	ldr	r7, [ip, #8]
   11f60:	add	r4, r7, r0, lsl #3
   11f64:	ldrd	r6, [r4]
   11f68:	subs	r5, r9, r6
   11f6c:	sbcs	r5, r8, r7
   11f70:	bcc	11fb8 <__assert_fail@plt+0xfe0>
   11f74:	add	r0, r0, #1
   11f78:	add	r4, r4, #8
   11f7c:	cmp	r0, r1
   11f80:	str	r0, [r2]
   11f84:	bcc	11f64 <__assert_fail@plt+0xf8c>
   11f88:	ldrd	r6, [ip, #24]
   11f8c:	orrs	r0, r6, r7
   11f90:	beq	11fc4 <__assert_fail@plt+0xfec>
   11f94:	mov	r0, r9
   11f98:	mov	r1, r8
   11f9c:	mov	r2, r6
   11fa0:	mov	r3, r7
   11fa4:	bl	154fc <__assert_fail@plt+0x4524>
   11fa8:	adds	r0, r6, r9
   11fac:	adc	r1, r7, r8
   11fb0:	subs	r6, r0, r2
   11fb4:	sbc	r7, r1, r3
   11fb8:	mov	r0, r6
   11fbc:	mov	r1, r7
   11fc0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11fc4:	ldrd	r6, [ip, #32]
   11fc8:	orrs	r0, r6, r7
   11fcc:	beq	11fe8 <__assert_fail@plt+0x1010>
   11fd0:	ldr	r0, [ip, #8]
   11fd4:	add	r0, r0, r1, lsl #3
   11fd8:	ldrd	r0, [r0, #-8]
   11fdc:	subs	r0, r9, r0
   11fe0:	sbc	r1, r8, r1
   11fe4:	b	11f9c <__assert_fail@plt+0xfc4>
   11fe8:	mov	r0, #1
   11fec:	mov	r6, #0
   11ff0:	mov	r7, #0
   11ff4:	strb	r0, [r3]
   11ff8:	mov	r0, r6
   11ffc:	mov	r1, r7
   12000:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12004:	movw	r1, #29024	; 0x7160
   12008:	mov	r2, #0
   1200c:	cmp	r0, #0
   12010:	movt	r1, #2
   12014:	strb	r2, [r1]
   12018:	movw	r2, #28896	; 0x70e0
   1201c:	movt	r2, #2
   12020:	movne	r2, r0
   12024:	str	r2, [r1, #16]
   12028:	bx	lr
   1202c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12030:	add	fp, sp, #28
   12034:	sub	sp, sp, #4
   12038:	cmp	r0, #0
   1203c:	beq	120d8 <__assert_fail@plt+0x1100>
   12040:	movw	r8, #29024	; 0x7160
   12044:	movt	r8, #2
   12048:	ldr	r7, [r8, #20]
   1204c:	cmp	r7, #0
   12050:	beq	121f4 <__assert_fail@plt+0x121c>
   12054:	mov	r5, r0
   12058:	bl	10ef4 <__errno_location@plt>
   1205c:	ldr	r1, [r5]
   12060:	mov	r6, r0
   12064:	ldr	r0, [r0]
   12068:	lsl	r1, r1, #26
   1206c:	and	r4, r0, r1, asr #31
   12070:	movw	r1, #24302	; 0x5eee
   12074:	mov	r0, r7
   12078:	movt	r1, #1
   1207c:	bl	10dbc <strcmp@plt>
   12080:	cmp	r0, #0
   12084:	beq	121e0 <__assert_fail@plt+0x1208>
   12088:	mov	r0, r5
   1208c:	bl	123fc <__assert_fail@plt+0x1424>
   12090:	cmp	r0, #0
   12094:	ldrne	r4, [r6]
   12098:	cmp	r4, #0
   1209c:	beq	120d8 <__assert_fail@plt+0x1100>
   120a0:	ldr	r2, [r8, #20]
   120a4:	mov	r0, #0
   120a8:	mov	r1, #3
   120ac:	bl	1429c <__assert_fail@plt+0x32c4>
   120b0:	movw	r2, #23541	; 0x5bf5
   120b4:	mov	r3, r0
   120b8:	mov	r0, #0
   120bc:	mov	r1, r4
   120c0:	movt	r2, #1
   120c4:	bl	10e88 <error@plt>
   120c8:	movw	r0, #29020	; 0x715c
   120cc:	mov	r1, #1
   120d0:	movt	r0, #2
   120d4:	str	r1, [r0]
   120d8:	movw	r5, #29024	; 0x7160
   120dc:	movt	r5, #2
   120e0:	ldr	r0, [r5, #16]
   120e4:	add	r1, r0, #4
   120e8:	str	r1, [r5, #16]
   120ec:	ldr	r7, [r0]
   120f0:	cmp	r7, #0
   120f4:	beq	121b4 <__assert_fail@plt+0x11dc>
   120f8:	movw	sl, #23541	; 0x5bf5
   120fc:	movw	r9, #29020	; 0x715c
   12100:	mov	r8, #1
   12104:	movt	sl, #1
   12108:	movt	r9, #2
   1210c:	movw	r1, #24302	; 0x5eee
   12110:	mov	r0, r7
   12114:	movt	r1, #1
   12118:	bl	10dbc <strcmp@plt>
   1211c:	cmp	r0, #0
   12120:	beq	12144 <__assert_fail@plt+0x116c>
   12124:	movw	r1, #23179	; 0x5a8b
   12128:	mov	r0, r7
   1212c:	movt	r1, #1
   12130:	bl	10f9c <fopen64@plt>
   12134:	mov	r6, r0
   12138:	cmp	r6, #0
   1213c:	beq	1215c <__assert_fail@plt+0x1184>
   12140:	b	121c4 <__assert_fail@plt+0x11ec>
   12144:	movw	r0, #29000	; 0x7148
   12148:	strb	r8, [r5]
   1214c:	movt	r0, #2
   12150:	ldr	r6, [r0]
   12154:	cmp	r6, #0
   12158:	bne	121c4 <__assert_fail@plt+0x11ec>
   1215c:	bl	10ef4 <__errno_location@plt>
   12160:	ldr	r4, [r0]
   12164:	mov	r0, #0
   12168:	mov	r1, #3
   1216c:	mov	r2, r7
   12170:	mov	r6, #0
   12174:	bl	1429c <__assert_fail@plt+0x32c4>
   12178:	mov	r3, r0
   1217c:	mov	r0, #0
   12180:	mov	r1, r4
   12184:	mov	r2, sl
   12188:	bl	10e88 <error@plt>
   1218c:	ldr	r0, [r5, #16]
   12190:	str	r8, [r9]
   12194:	add	r1, r0, #4
   12198:	str	r1, [r5, #16]
   1219c:	ldr	r7, [r0]
   121a0:	cmp	r7, #0
   121a4:	bne	1210c <__assert_fail@plt+0x1134>
   121a8:	mov	r0, r6
   121ac:	sub	sp, fp, #28
   121b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121b4:	mov	r6, #0
   121b8:	mov	r0, r6
   121bc:	sub	sp, fp, #28
   121c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121c4:	mov	r0, r6
   121c8:	mov	r1, #2
   121cc:	str	r7, [r5, #20]
   121d0:	bl	123c0 <__assert_fail@plt+0x13e8>
   121d4:	mov	r0, r6
   121d8:	sub	sp, fp, #28
   121dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121e0:	mov	r0, r5
   121e4:	bl	10f90 <clearerr_unlocked@plt>
   121e8:	cmp	r4, #0
   121ec:	bne	120a0 <__assert_fail@plt+0x10c8>
   121f0:	b	120d8 <__assert_fail@plt+0x1100>
   121f4:	movw	r0, #23544	; 0x5bf8
   121f8:	movw	r1, #23554	; 0x5c02
   121fc:	movw	r3, #23574	; 0x5c16
   12200:	mov	r2, #340	; 0x154
   12204:	movt	r0, #1
   12208:	movt	r1, #1
   1220c:	movt	r3, #1
   12210:	bl	10fd8 <__assert_fail@plt>
   12214:	push	{fp, lr}
   12218:	mov	fp, sp
   1221c:	movw	r0, #29024	; 0x7160
   12220:	movt	r0, #2
   12224:	ldrb	r0, [r0]
   12228:	cmp	r0, #1
   1222c:	popne	{fp, pc}
   12230:	movw	r0, #29000	; 0x7148
   12234:	movt	r0, #2
   12238:	ldr	r0, [r0]
   1223c:	bl	123fc <__assert_fail@plt+0x1424>
   12240:	cmp	r0, #0
   12244:	bne	1224c <__assert_fail@plt+0x1274>
   12248:	pop	{fp, pc}
   1224c:	bl	10ef4 <__errno_location@plt>
   12250:	ldr	r1, [r0]
   12254:	movw	r2, #24302	; 0x5eee
   12258:	mov	r0, #1
   1225c:	movt	r2, #1
   12260:	bl	10e88 <error@plt>
   12264:	push	{r4, sl, fp, lr}
   12268:	add	fp, sp, #8
   1226c:	movw	r1, #23598	; 0x5c2e
   12270:	mov	r0, #0
   12274:	mov	r2, #5
   12278:	movt	r1, #1
   1227c:	bl	10e1c <dcgettext@plt>
   12280:	movw	r4, #29004	; 0x714c
   12284:	movt	r4, #2
   12288:	ldr	r1, [r4]
   1228c:	bl	10da4 <fputs_unlocked@plt>
   12290:	movw	r1, #23661	; 0x5c6d
   12294:	mov	r0, #0
   12298:	mov	r2, #5
   1229c:	movt	r1, #1
   122a0:	bl	10e1c <dcgettext@plt>
   122a4:	ldr	r1, [r4]
   122a8:	pop	{r4, sl, fp, lr}
   122ac:	b	10da4 <fputs_unlocked@plt>
   122b0:	movw	r1, #29072	; 0x7190
   122b4:	movt	r1, #2
   122b8:	str	r0, [r1, #4]
   122bc:	bx	lr
   122c0:	movw	r1, #29072	; 0x7190
   122c4:	movt	r1, #2
   122c8:	strb	r0, [r1]
   122cc:	bx	lr
   122d0:	push	{r4, r5, r6, sl, fp, lr}
   122d4:	add	fp, sp, #16
   122d8:	sub	sp, sp, #8
   122dc:	movw	r0, #29004	; 0x714c
   122e0:	movt	r0, #2
   122e4:	ldr	r0, [r0]
   122e8:	bl	1529c <__assert_fail@plt+0x42c4>
   122ec:	cmp	r0, #0
   122f0:	beq	12318 <__assert_fail@plt+0x1340>
   122f4:	movw	r5, #29072	; 0x7190
   122f8:	movt	r5, #2
   122fc:	ldrb	r0, [r5]
   12300:	cmp	r0, #0
   12304:	beq	12344 <__assert_fail@plt+0x136c>
   12308:	bl	10ef4 <__errno_location@plt>
   1230c:	ldr	r0, [r0]
   12310:	cmp	r0, #32
   12314:	bne	12344 <__assert_fail@plt+0x136c>
   12318:	movw	r0, #28992	; 0x7140
   1231c:	movt	r0, #2
   12320:	ldr	r0, [r0]
   12324:	bl	1529c <__assert_fail@plt+0x42c4>
   12328:	cmp	r0, #0
   1232c:	subeq	sp, fp, #16
   12330:	popeq	{r4, r5, r6, sl, fp, pc}
   12334:	movw	r0, #28908	; 0x70ec
   12338:	movt	r0, #2
   1233c:	ldr	r0, [r0]
   12340:	bl	10dec <_exit@plt>
   12344:	movw	r1, #23169	; 0x5a81
   12348:	mov	r0, #0
   1234c:	mov	r2, #5
   12350:	movt	r1, #1
   12354:	bl	10e1c <dcgettext@plt>
   12358:	ldr	r6, [r5, #4]
   1235c:	mov	r4, r0
   12360:	bl	10ef4 <__errno_location@plt>
   12364:	ldr	r5, [r0]
   12368:	cmp	r6, #0
   1236c:	bne	12388 <__assert_fail@plt+0x13b0>
   12370:	movw	r2, #23541	; 0x5bf5
   12374:	mov	r0, #0
   12378:	mov	r1, r5
   1237c:	mov	r3, r4
   12380:	movt	r2, #1
   12384:	b	123a8 <__assert_fail@plt+0x13d0>
   12388:	mov	r0, r6
   1238c:	bl	141c0 <__assert_fail@plt+0x31e8>
   12390:	movw	r2, #24229	; 0x5ea5
   12394:	mov	r3, r0
   12398:	str	r4, [sp]
   1239c:	mov	r0, #0
   123a0:	mov	r1, r5
   123a4:	movt	r2, #1
   123a8:	bl	10e88 <error@plt>
   123ac:	movw	r0, #28908	; 0x70ec
   123b0:	movt	r0, #2
   123b4:	ldr	r0, [r0]
   123b8:	bl	10dec <_exit@plt>
   123bc:	b	10dc8 <posix_fadvise64@plt>
   123c0:	cmp	r0, #0
   123c4:	bxeq	lr
   123c8:	push	{r4, sl, fp, lr}
   123cc:	add	fp, sp, #8
   123d0:	sub	sp, sp, #16
   123d4:	mov	r4, r1
   123d8:	bl	10f24 <fileno@plt>
   123dc:	mov	r1, #0
   123e0:	mov	r2, #0
   123e4:	mov	r3, #0
   123e8:	str	r1, [sp]
   123ec:	stmib	sp, {r1, r4}
   123f0:	bl	10dc8 <posix_fadvise64@plt>
   123f4:	sub	sp, fp, #8
   123f8:	pop	{r4, sl, fp, pc}
   123fc:	push	{r4, r5, r6, sl, fp, lr}
   12400:	add	fp, sp, #16
   12404:	sub	sp, sp, #8
   12408:	mov	r4, r0
   1240c:	bl	10f24 <fileno@plt>
   12410:	cmn	r0, #1
   12414:	ble	12488 <__assert_fail@plt+0x14b0>
   12418:	mov	r0, r4
   1241c:	bl	10eac <__freading@plt>
   12420:	cmp	r0, #0
   12424:	beq	12450 <__assert_fail@plt+0x1478>
   12428:	mov	r0, r4
   1242c:	bl	10f24 <fileno@plt>
   12430:	mov	r1, #1
   12434:	mov	r2, #0
   12438:	mov	r3, #0
   1243c:	str	r1, [sp]
   12440:	bl	10e58 <lseek64@plt>
   12444:	and	r0, r0, r1
   12448:	cmn	r0, #1
   1244c:	beq	12488 <__assert_fail@plt+0x14b0>
   12450:	mov	r0, r4
   12454:	bl	12498 <__assert_fail@plt+0x14c0>
   12458:	cmp	r0, #0
   1245c:	beq	12488 <__assert_fail@plt+0x14b0>
   12460:	bl	10ef4 <__errno_location@plt>
   12464:	ldr	r6, [r0]
   12468:	mov	r5, r0
   1246c:	mov	r0, r4
   12470:	bl	10f3c <fclose@plt>
   12474:	cmp	r6, #0
   12478:	strne	r6, [r5]
   1247c:	mvnne	r0, #0
   12480:	sub	sp, fp, #16
   12484:	pop	{r4, r5, r6, sl, fp, pc}
   12488:	mov	r0, r4
   1248c:	sub	sp, fp, #16
   12490:	pop	{r4, r5, r6, sl, fp, lr}
   12494:	b	10f3c <fclose@plt>
   12498:	push	{r4, sl, fp, lr}
   1249c:	add	fp, sp, #8
   124a0:	sub	sp, sp, #8
   124a4:	mov	r4, r0
   124a8:	cmp	r0, #0
   124ac:	beq	124c8 <__assert_fail@plt+0x14f0>
   124b0:	mov	r0, r4
   124b4:	bl	10eac <__freading@plt>
   124b8:	cmp	r0, #0
   124bc:	ldrbne	r0, [r4, #1]
   124c0:	tstne	r0, #1
   124c4:	bne	124d8 <__assert_fail@plt+0x1500>
   124c8:	mov	r0, r4
   124cc:	sub	sp, fp, #8
   124d0:	pop	{r4, sl, fp, lr}
   124d4:	b	10dd4 <fflush@plt>
   124d8:	mov	r0, #1
   124dc:	mov	r2, #0
   124e0:	mov	r3, #0
   124e4:	str	r0, [sp]
   124e8:	mov	r0, r4
   124ec:	bl	12528 <__assert_fail@plt+0x1550>
   124f0:	mov	r0, r4
   124f4:	sub	sp, fp, #8
   124f8:	pop	{r4, sl, fp, lr}
   124fc:	b	10dd4 <fflush@plt>
   12500:	push	{r4, r5, r6, sl, fp, lr}
   12504:	add	fp, sp, #16
   12508:	mov	r4, r0
   1250c:	bl	10ef4 <__errno_location@plt>
   12510:	ldr	r6, [r0]
   12514:	mov	r5, r0
   12518:	mov	r0, r4
   1251c:	bl	10de0 <free@plt>
   12520:	str	r6, [r5]
   12524:	pop	{r4, r5, r6, sl, fp, pc}
   12528:	push	{r4, r5, r6, r7, fp, lr}
   1252c:	add	fp, sp, #16
   12530:	sub	sp, sp, #8
   12534:	mov	r4, r0
   12538:	ldr	r0, [r0, #4]
   1253c:	mov	r5, r3
   12540:	mov	r6, r2
   12544:	ldr	r1, [r4, #8]
   12548:	cmp	r1, r0
   1254c:	bne	12568 <__assert_fail@plt+0x1590>
   12550:	ldrd	r0, [r4, #16]
   12554:	cmp	r1, r0
   12558:	bne	12568 <__assert_fail@plt+0x1590>
   1255c:	ldr	r0, [r4, #36]	; 0x24
   12560:	cmp	r0, #0
   12564:	beq	12580 <__assert_fail@plt+0x15a8>
   12568:	mov	r0, r4
   1256c:	mov	r2, r6
   12570:	mov	r3, r5
   12574:	sub	sp, fp, #16
   12578:	pop	{r4, r5, r6, r7, fp, lr}
   1257c:	b	10f48 <fseeko64@plt>
   12580:	ldr	r7, [fp, #8]
   12584:	mov	r0, r4
   12588:	bl	10f24 <fileno@plt>
   1258c:	mov	r2, r6
   12590:	mov	r3, r5
   12594:	str	r7, [sp]
   12598:	bl	10e58 <lseek64@plt>
   1259c:	and	r2, r0, r1
   125a0:	cmn	r2, #1
   125a4:	mvneq	r0, #0
   125a8:	subeq	sp, fp, #16
   125ac:	popeq	{r4, r5, r6, r7, fp, pc}
   125b0:	strd	r0, [r4, #80]	; 0x50
   125b4:	ldr	r0, [r4]
   125b8:	bic	r0, r0, #16
   125bc:	str	r0, [r4]
   125c0:	mov	r0, #0
   125c4:	sub	sp, fp, #16
   125c8:	pop	{r4, r5, r6, r7, fp, pc}
   125cc:	push	{r4, r5, fp, lr}
   125d0:	add	fp, sp, #8
   125d4:	cmp	r0, #0
   125d8:	beq	1266c <__assert_fail@plt+0x1694>
   125dc:	mov	r1, #47	; 0x2f
   125e0:	mov	r4, r0
   125e4:	bl	10f78 <strrchr@plt>
   125e8:	cmp	r0, #0
   125ec:	mov	r5, r4
   125f0:	addne	r5, r0, #1
   125f4:	sub	r0, r5, r4
   125f8:	cmp	r0, #7
   125fc:	blt	12650 <__assert_fail@plt+0x1678>
   12600:	movw	r1, #24292	; 0x5ee4
   12604:	sub	r0, r5, #7
   12608:	mov	r2, #7
   1260c:	movt	r1, #1
   12610:	bl	10fb4 <strncmp@plt>
   12614:	cmp	r0, #0
   12618:	bne	12650 <__assert_fail@plt+0x1678>
   1261c:	movw	r1, #24300	; 0x5eec
   12620:	mov	r0, r5
   12624:	mov	r2, #3
   12628:	movt	r1, #1
   1262c:	bl	10fb4 <strncmp@plt>
   12630:	cmp	r0, #0
   12634:	beq	12640 <__assert_fail@plt+0x1668>
   12638:	mov	r4, r5
   1263c:	b	12650 <__assert_fail@plt+0x1678>
   12640:	movw	r0, #28976	; 0x7130
   12644:	add	r4, r5, #3
   12648:	movt	r0, #2
   1264c:	str	r4, [r0]
   12650:	movw	r0, #28980	; 0x7134
   12654:	movt	r0, #2
   12658:	str	r4, [r0]
   1265c:	movw	r0, #29080	; 0x7198
   12660:	movt	r0, #2
   12664:	str	r4, [r0]
   12668:	pop	{r4, r5, fp, pc}
   1266c:	movw	r0, #28992	; 0x7140
   12670:	mov	r1, #55	; 0x37
   12674:	mov	r2, #1
   12678:	movt	r0, #2
   1267c:	ldr	r3, [r0]
   12680:	movw	r0, #24236	; 0x5eac
   12684:	movt	r0, #1
   12688:	bl	10e4c <fwrite@plt>
   1268c:	bl	10fc0 <abort@plt>
   12690:	push	{r4, r5, r6, sl, fp, lr}
   12694:	add	fp, sp, #16
   12698:	mov	r4, r0
   1269c:	movw	r0, #29088	; 0x71a0
   126a0:	movt	r0, #2
   126a4:	cmp	r4, #0
   126a8:	moveq	r4, r0
   126ac:	bl	10ef4 <__errno_location@plt>
   126b0:	ldr	r6, [r0]
   126b4:	mov	r5, r0
   126b8:	mov	r0, r4
   126bc:	mov	r1, #48	; 0x30
   126c0:	bl	15080 <__assert_fail@plt+0x40a8>
   126c4:	str	r6, [r5]
   126c8:	pop	{r4, r5, r6, sl, fp, pc}
   126cc:	movw	r1, #29088	; 0x71a0
   126d0:	cmp	r0, #0
   126d4:	movt	r1, #2
   126d8:	movne	r1, r0
   126dc:	ldr	r0, [r1]
   126e0:	bx	lr
   126e4:	movw	r2, #29088	; 0x71a0
   126e8:	cmp	r0, #0
   126ec:	movt	r2, #2
   126f0:	movne	r2, r0
   126f4:	str	r1, [r2]
   126f8:	bx	lr
   126fc:	movw	r3, #29088	; 0x71a0
   12700:	cmp	r0, #0
   12704:	movt	r3, #2
   12708:	movne	r3, r0
   1270c:	ubfx	r0, r1, #5, #3
   12710:	and	r1, r1, #31
   12714:	add	r0, r3, r0, lsl #2
   12718:	ldr	r3, [r0, #8]
   1271c:	eor	r2, r2, r3, lsr r1
   12720:	and	r2, r2, #1
   12724:	eor	r2, r3, r2, lsl r1
   12728:	str	r2, [r0, #8]
   1272c:	mov	r0, #1
   12730:	and	r0, r0, r3, lsr r1
   12734:	bx	lr
   12738:	movw	r2, #29088	; 0x71a0
   1273c:	cmp	r0, #0
   12740:	movt	r2, #2
   12744:	movne	r2, r0
   12748:	ldr	r0, [r2, #4]
   1274c:	str	r1, [r2, #4]
   12750:	bx	lr
   12754:	movw	r3, #29088	; 0x71a0
   12758:	cmp	r0, #0
   1275c:	movt	r3, #2
   12760:	movne	r3, r0
   12764:	cmp	r1, #0
   12768:	mov	r0, #10
   1276c:	cmpne	r2, #0
   12770:	str	r0, [r3]
   12774:	bne	12784 <__assert_fail@plt+0x17ac>
   12778:	push	{fp, lr}
   1277c:	mov	fp, sp
   12780:	bl	10fc0 <abort@plt>
   12784:	str	r1, [r3, #40]	; 0x28
   12788:	str	r2, [r3, #44]	; 0x2c
   1278c:	bx	lr
   12790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12794:	add	fp, sp, #28
   12798:	sub	sp, sp, #20
   1279c:	mov	r7, r0
   127a0:	ldr	r0, [fp, #8]
   127a4:	movw	r5, #29088	; 0x71a0
   127a8:	mov	r8, r3
   127ac:	mov	r9, r2
   127b0:	mov	sl, r1
   127b4:	movt	r5, #2
   127b8:	cmp	r0, #0
   127bc:	movne	r5, r0
   127c0:	bl	10ef4 <__errno_location@plt>
   127c4:	mov	r4, r0
   127c8:	ldm	r5, {r0, r1}
   127cc:	ldr	r2, [r5, #40]	; 0x28
   127d0:	ldr	r3, [r5, #44]	; 0x2c
   127d4:	add	r5, r5, #8
   127d8:	ldr	r6, [r4]
   127dc:	stm	sp, {r0, r1, r5}
   127e0:	str	r2, [sp, #12]
   127e4:	str	r3, [sp, #16]
   127e8:	mov	r0, r7
   127ec:	mov	r1, sl
   127f0:	mov	r2, r9
   127f4:	mov	r3, r8
   127f8:	bl	12808 <__assert_fail@plt+0x1830>
   127fc:	str	r6, [r4]
   12800:	sub	sp, fp, #28
   12804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12808:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1280c:	add	fp, sp, #28
   12810:	sub	sp, sp, #156	; 0x9c
   12814:	str	r0, [sp, #76]	; 0x4c
   12818:	ldr	r0, [fp, #12]
   1281c:	mov	r6, r1
   12820:	str	r3, [sp, #84]	; 0x54
   12824:	str	r2, [fp, #-84]	; 0xffffffac
   12828:	and	r1, r0, #4
   1282c:	str	r1, [sp, #24]
   12830:	and	r1, r0, #1
   12834:	str	r1, [sp, #28]
   12838:	ubfx	r8, r0, #1, #1
   1283c:	bl	10e64 <__ctype_get_mb_cur_max@plt>
   12840:	str	r0, [sp, #32]
   12844:	ldr	r0, [fp, #24]
   12848:	ldr	r7, [fp, #8]
   1284c:	mov	r1, #0
   12850:	mov	r2, #0
   12854:	mov	r4, #1
   12858:	str	r1, [sp, #52]	; 0x34
   1285c:	str	r0, [sp, #72]	; 0x48
   12860:	ldr	r0, [fp, #20]
   12864:	str	r0, [sp, #68]	; 0x44
   12868:	mov	r0, #0
   1286c:	str	r0, [sp, #48]	; 0x30
   12870:	mov	r0, #0
   12874:	str	r0, [sp, #92]	; 0x5c
   12878:	mov	r0, #0
   1287c:	str	r0, [fp, #-76]	; 0xffffffb4
   12880:	mov	r0, #0
   12884:	cmp	r7, #10
   12888:	bhi	13b70 <__assert_fail@plt+0x2b98>
   1288c:	add	r1, pc, #28
   12890:	mov	sl, r6
   12894:	ldr	r6, [sp, #76]	; 0x4c
   12898:	ldr	ip, [fp, #-84]	; 0xffffffac
   1289c:	ldr	lr, [sp, #84]	; 0x54
   128a0:	mov	r9, #0
   128a4:	mov	r3, #1
   128a8:	mov	r5, #0
   128ac:	ldr	pc, [r1, r7, lsl #2]
   128b0:	andeq	r2, r1, r0, lsl #19
   128b4:			; <UNDEFINED> instruction: 0x000129bc
   128b8:	muleq	r1, r0, r9
   128bc:	andeq	r2, r1, r8, ror r9
   128c0:			; <UNDEFINED> instruction: 0x000129b0
   128c4:	andeq	r2, r1, r4, ror #19
   128c8:	andeq	r2, r1, r0, lsr #19
   128cc:	strdeq	r2, [r1], -r0
   128d0:	ldrdeq	r2, [r1], -ip
   128d4:	ldrdeq	r2, [r1], -ip
   128d8:	andeq	r2, r1, r4, lsl #23
   128dc:	mov	r9, r4
   128e0:	movw	r4, #24382	; 0x5f3e
   128e4:	mov	r5, r8
   128e8:	mov	r8, r2
   128ec:	mov	r0, #0
   128f0:	mov	r2, #5
   128f4:	movt	r4, #1
   128f8:	mov	r1, r4
   128fc:	bl	10e1c <dcgettext@plt>
   12900:	cmp	r0, r4
   12904:	str	r0, [sp, #68]	; 0x44
   12908:	bne	12a98 <__assert_fail@plt+0x1ac0>
   1290c:	bl	15320 <__assert_fail@plt+0x4348>
   12910:	ldrb	r1, [r0]
   12914:	and	r1, r1, #223	; 0xdf
   12918:	cmp	r1, #71	; 0x47
   1291c:	beq	12a64 <__assert_fail@plt+0x1a8c>
   12920:	cmp	r1, #85	; 0x55
   12924:	bne	12a7c <__assert_fail@plt+0x1aa4>
   12928:	ldrb	r1, [r0, #1]
   1292c:	and	r1, r1, #223	; 0xdf
   12930:	cmp	r1, #84	; 0x54
   12934:	bne	12a7c <__assert_fail@plt+0x1aa4>
   12938:	ldrb	r1, [r0, #2]
   1293c:	and	r1, r1, #223	; 0xdf
   12940:	cmp	r1, #70	; 0x46
   12944:	bne	12a7c <__assert_fail@plt+0x1aa4>
   12948:	ldrb	r1, [r0, #3]
   1294c:	cmp	r1, #45	; 0x2d
   12950:	ldrbeq	r1, [r0, #4]
   12954:	cmpeq	r1, #56	; 0x38
   12958:	bne	12a7c <__assert_fail@plt+0x1aa4>
   1295c:	ldrb	r0, [r0, #5]
   12960:	cmp	r0, #0
   12964:	movw	r0, #24384	; 0x5f40
   12968:	movt	r0, #1
   1296c:	str	r0, [sp, #68]	; 0x44
   12970:	bne	12a7c <__assert_fail@plt+0x1aa4>
   12974:	b	12a98 <__assert_fail@plt+0x1ac0>
   12978:	mov	r0, #1
   1297c:	b	129bc <__assert_fail@plt+0x19e4>
   12980:	mov	r7, #0
   12984:	mov	r9, #0
   12988:	mov	r3, r0
   1298c:	b	12a5c <__assert_fail@plt+0x1a84>
   12990:	tst	r8, #1
   12994:	bne	129bc <__assert_fail@plt+0x19e4>
   12998:	mov	r3, r0
   1299c:	b	12a14 <__assert_fail@plt+0x1a3c>
   129a0:	mov	r0, #1
   129a4:	mov	r9, #0
   129a8:	mov	r7, #5
   129ac:	b	129f8 <__assert_fail@plt+0x1a20>
   129b0:	mov	r3, #1
   129b4:	tst	r8, #1
   129b8:	beq	12a14 <__assert_fail@plt+0x1a3c>
   129bc:	mov	r1, #1
   129c0:	mov	r9, #0
   129c4:	mov	r7, #2
   129c8:	mov	r3, r0
   129cc:	mov	r5, #1
   129d0:	str	r1, [fp, #-76]	; 0xffffffb4
   129d4:	movw	r1, #24212	; 0x5e94
   129d8:	movt	r1, #1
   129dc:	str	r1, [sp, #92]	; 0x5c
   129e0:	b	12bf0 <__assert_fail@plt+0x1c18>
   129e4:	mov	r7, #5
   129e8:	tst	r8, #1
   129ec:	beq	12a34 <__assert_fail@plt+0x1a5c>
   129f0:	mov	r0, #1
   129f4:	mov	r9, #0
   129f8:	str	r0, [fp, #-76]	; 0xffffffb4
   129fc:	movw	r0, #24380	; 0x5f3c
   12a00:	mov	r3, #1
   12a04:	mov	r5, #1
   12a08:	movt	r0, #1
   12a0c:	str	r0, [sp, #92]	; 0x5c
   12a10:	b	12bf0 <__assert_fail@plt+0x1c18>
   12a14:	cmp	sl, #0
   12a18:	mov	r9, #1
   12a1c:	mov	r7, #2
   12a20:	movne	r0, #39	; 0x27
   12a24:	strbne	r0, [r6]
   12a28:	movw	r0, #24212	; 0x5e94
   12a2c:	movt	r0, #1
   12a30:	b	12a50 <__assert_fail@plt+0x1a78>
   12a34:	cmp	sl, #0
   12a38:	mov	r9, #1
   12a3c:	mov	r3, #1
   12a40:	movne	r0, #34	; 0x22
   12a44:	strbne	r0, [r6]
   12a48:	movw	r0, #24380	; 0x5f3c
   12a4c:	movt	r0, #1
   12a50:	str	r0, [sp, #92]	; 0x5c
   12a54:	mov	r0, #1
   12a58:	str	r0, [fp, #-76]	; 0xffffffb4
   12a5c:	mov	r5, #0
   12a60:	b	12bf0 <__assert_fail@plt+0x1c18>
   12a64:	ldrb	r1, [r0, #1]
   12a68:	and	r1, r1, #223	; 0xdf
   12a6c:	cmp	r1, #66	; 0x42
   12a70:	ldrbeq	r1, [r0, #2]
   12a74:	cmpeq	r1, #49	; 0x31
   12a78:	beq	13998 <__assert_fail@plt+0x29c0>
   12a7c:	movw	r0, #24212	; 0x5e94
   12a80:	movw	r1, #24380	; 0x5f3c
   12a84:	cmp	r7, #9
   12a88:	movt	r0, #1
   12a8c:	movt	r1, #1
   12a90:	moveq	r0, r1
   12a94:	str	r0, [sp, #68]	; 0x44
   12a98:	movw	r4, #24212	; 0x5e94
   12a9c:	mov	r0, #0
   12aa0:	mov	r2, #5
   12aa4:	movt	r4, #1
   12aa8:	mov	r1, r4
   12aac:	bl	10e1c <dcgettext@plt>
   12ab0:	cmp	r0, r4
   12ab4:	str	r0, [sp, #72]	; 0x48
   12ab8:	beq	12ac8 <__assert_fail@plt+0x1af0>
   12abc:	mov	r4, r9
   12ac0:	mov	r2, r8
   12ac4:	b	12b80 <__assert_fail@plt+0x1ba8>
   12ac8:	bl	15320 <__assert_fail@plt+0x4348>
   12acc:	ldrb	r1, [r0]
   12ad0:	mov	r4, r9
   12ad4:	and	r1, r1, #223	; 0xdf
   12ad8:	cmp	r1, #71	; 0x47
   12adc:	beq	12b38 <__assert_fail@plt+0x1b60>
   12ae0:	cmp	r1, #85	; 0x55
   12ae4:	mov	r2, r8
   12ae8:	bne	12b60 <__assert_fail@plt+0x1b88>
   12aec:	ldrb	r1, [r0, #1]
   12af0:	and	r1, r1, #223	; 0xdf
   12af4:	cmp	r1, #84	; 0x54
   12af8:	bne	12b60 <__assert_fail@plt+0x1b88>
   12afc:	ldrb	r1, [r0, #2]
   12b00:	and	r1, r1, #223	; 0xdf
   12b04:	cmp	r1, #70	; 0x46
   12b08:	ldrbeq	r1, [r0, #3]
   12b0c:	cmpeq	r1, #45	; 0x2d
   12b10:	bne	12b60 <__assert_fail@plt+0x1b88>
   12b14:	ldrb	r1, [r0, #4]
   12b18:	cmp	r1, #56	; 0x38
   12b1c:	ldrbeq	r0, [r0, #5]
   12b20:	cmpeq	r0, #0
   12b24:	bne	12b60 <__assert_fail@plt+0x1b88>
   12b28:	movw	r0, #24388	; 0x5f44
   12b2c:	movt	r0, #1
   12b30:	str	r0, [sp, #72]	; 0x48
   12b34:	b	12b80 <__assert_fail@plt+0x1ba8>
   12b38:	ldrb	r1, [r0, #1]
   12b3c:	mov	r2, r8
   12b40:	and	r1, r1, #223	; 0xdf
   12b44:	cmp	r1, #66	; 0x42
   12b48:	bne	12b60 <__assert_fail@plt+0x1b88>
   12b4c:	ldrb	r1, [r0, #2]
   12b50:	cmp	r1, #49	; 0x31
   12b54:	ldrbeq	r1, [r0, #3]
   12b58:	cmpeq	r1, #56	; 0x38
   12b5c:	beq	139dc <__assert_fail@plt+0x2a04>
   12b60:	movw	r0, #24212	; 0x5e94
   12b64:	cmp	r7, #9
   12b68:	movt	r0, #1
   12b6c:	mov	r1, r0
   12b70:	movw	r0, #24380	; 0x5f3c
   12b74:	movt	r0, #1
   12b78:	moveq	r1, r0
   12b7c:	str	r1, [sp, #72]	; 0x48
   12b80:	mov	r8, r5
   12b84:	mov	r9, #0
   12b88:	tst	r8, #1
   12b8c:	mov	r5, r8
   12b90:	str	r2, [fp, #-48]	; 0xffffffd0
   12b94:	bne	12bcc <__assert_fail@plt+0x1bf4>
   12b98:	ldr	r0, [sp, #68]	; 0x44
   12b9c:	ldrb	r0, [r0]
   12ba0:	cmp	r0, #0
   12ba4:	beq	12bcc <__assert_fail@plt+0x1bf4>
   12ba8:	ldr	r1, [sp, #68]	; 0x44
   12bac:	mov	r9, #0
   12bb0:	add	r1, r1, #1
   12bb4:	cmp	r9, sl
   12bb8:	strbcc	r0, [r6, r9]
   12bbc:	ldrb	r0, [r1, r9]
   12bc0:	add	r9, r9, #1
   12bc4:	cmp	r0, #0
   12bc8:	bne	12bb4 <__assert_fail@plt+0x1bdc>
   12bcc:	ldr	r8, [sp, #72]	; 0x48
   12bd0:	mov	r0, r8
   12bd4:	bl	10ee8 <strlen@plt>
   12bd8:	ldr	ip, [fp, #-84]	; 0xffffffac
   12bdc:	ldr	lr, [sp, #84]	; 0x54
   12be0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12be4:	str	r0, [fp, #-76]	; 0xffffffb4
   12be8:	str	r8, [sp, #92]	; 0x5c
   12bec:	mov	r3, #1
   12bf0:	ldr	r0, [fp, #16]
   12bf4:	str	r7, [fp, #-64]	; 0xffffffc0
   12bf8:	str	r5, [fp, #-72]	; 0xffffffb8
   12bfc:	str	r3, [sp, #80]	; 0x50
   12c00:	cmp	r0, #0
   12c04:	movwne	r0, #1
   12c08:	and	r0, r0, r5
   12c0c:	str	r0, [fp, #-88]	; 0xffffffa8
   12c10:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12c14:	cmp	r0, #0
   12c18:	movwne	r0, #1
   12c1c:	subs	r7, r7, #2
   12c20:	and	r1, r0, r5
   12c24:	str	r7, [fp, #-80]	; 0xffffffb0
   12c28:	and	r1, r3, r1
   12c2c:	str	r1, [sp, #40]	; 0x28
   12c30:	clz	r1, r7
   12c34:	lsr	r1, r1, #5
   12c38:	and	r1, r1, r5
   12c3c:	eor	r5, r5, #1
   12c40:	str	r1, [sp, #36]	; 0x24
   12c44:	mov	r1, r7
   12c48:	str	r5, [sp, #88]	; 0x58
   12c4c:	mov	r7, #0
   12c50:	movwne	r1, #1
   12c54:	orr	r5, r1, r5
   12c58:	and	r1, r1, r3
   12c5c:	and	r0, r0, r1
   12c60:	str	r5, [sp, #60]	; 0x3c
   12c64:	str	r1, [fp, #-68]	; 0xffffffbc
   12c68:	str	r0, [fp, #-60]	; 0xffffffc4
   12c6c:	eor	r0, r3, #1
   12c70:	str	r0, [sp, #44]	; 0x2c
   12c74:	cmn	lr, #1
   12c78:	beq	12c88 <__assert_fail@plt+0x1cb0>
   12c7c:	cmp	r7, lr
   12c80:	bne	12c94 <__assert_fail@plt+0x1cbc>
   12c84:	b	1390c <__assert_fail@plt+0x2934>
   12c88:	ldrb	r0, [ip, r7]
   12c8c:	cmp	r0, #0
   12c90:	beq	13914 <__assert_fail@plt+0x293c>
   12c94:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12c98:	mov	r8, #0
   12c9c:	str	r4, [fp, #-52]	; 0xffffffcc
   12ca0:	str	r2, [fp, #-48]	; 0xffffffd0
   12ca4:	cmp	r0, #0
   12ca8:	beq	12cdc <__assert_fail@plt+0x1d04>
   12cac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12cb0:	add	r4, r7, r0
   12cb4:	cmp	r0, #2
   12cb8:	bcc	12cd4 <__assert_fail@plt+0x1cfc>
   12cbc:	cmn	lr, #1
   12cc0:	bne	12cd4 <__assert_fail@plt+0x1cfc>
   12cc4:	mov	r0, ip
   12cc8:	bl	10ee8 <strlen@plt>
   12ccc:	ldr	ip, [fp, #-84]	; 0xffffffac
   12cd0:	mov	lr, r0
   12cd4:	cmp	r4, lr
   12cd8:	bls	12cf4 <__assert_fail@plt+0x1d1c>
   12cdc:	mov	r0, #0
   12ce0:	str	r0, [fp, #-56]	; 0xffffffc8
   12ce4:	ldrb	r5, [ip, r7]
   12ce8:	cmp	r5, #126	; 0x7e
   12cec:	bls	12d44 <__assert_fail@plt+0x1d6c>
   12cf0:	b	1314c <__assert_fail@plt+0x2174>
   12cf4:	ldr	r1, [sp, #92]	; 0x5c
   12cf8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12cfc:	add	r0, ip, r7
   12d00:	mov	r4, lr
   12d04:	bl	10e10 <memcmp@plt>
   12d08:	ldr	r2, [sp, #88]	; 0x58
   12d0c:	cmp	r0, #0
   12d10:	mov	r1, r0
   12d14:	movwne	r1, #1
   12d18:	orr	r1, r1, r2
   12d1c:	tst	r1, #1
   12d20:	beq	13a20 <__assert_fail@plt+0x2a48>
   12d24:	ldr	ip, [fp, #-84]	; 0xffffffac
   12d28:	clz	r0, r0
   12d2c:	mov	lr, r4
   12d30:	lsr	r0, r0, #5
   12d34:	str	r0, [fp, #-56]	; 0xffffffc8
   12d38:	ldrb	r5, [ip, r7]
   12d3c:	cmp	r5, #126	; 0x7e
   12d40:	bhi	1314c <__assert_fail@plt+0x2174>
   12d44:	add	r3, pc, #16
   12d48:	mov	r4, #1
   12d4c:	mov	r2, #110	; 0x6e
   12d50:	mov	r0, #97	; 0x61
   12d54:	mov	r1, #0
   12d58:	ldr	pc, [r3, r5, lsl #2]
   12d5c:	andeq	r3, r1, ip, lsr #32
   12d60:	andeq	r3, r1, ip, asr #2
   12d64:	andeq	r3, r1, ip, asr #2
   12d68:	andeq	r3, r1, ip, asr #2
   12d6c:	andeq	r3, r1, ip, asr #2
   12d70:	andeq	r3, r1, ip, asr #2
   12d74:	andeq	r3, r1, ip, asr #2
   12d78:	andeq	r3, r1, r8, lsr #4
   12d7c:	andeq	r3, r1, ip
   12d80:	strdeq	r2, [r1], -r4
   12d84:	andeq	r3, r1, r8, lsl r0
   12d88:	andeq	r3, r1, r8, lsr #1
   12d8c:	andeq	r2, r1, ip, ror #31
   12d90:	andeq	r3, r1, r4, lsl r0
   12d94:	andeq	r3, r1, ip, asr #2
   12d98:	andeq	r3, r1, ip, asr #2
   12d9c:	andeq	r3, r1, ip, asr #2
   12da0:	andeq	r3, r1, ip, asr #2
   12da4:	andeq	r3, r1, ip, asr #2
   12da8:	andeq	r3, r1, ip, asr #2
   12dac:	andeq	r3, r1, ip, asr #2
   12db0:	andeq	r3, r1, ip, asr #2
   12db4:	andeq	r3, r1, ip, asr #2
   12db8:	andeq	r3, r1, ip, asr #2
   12dbc:	andeq	r3, r1, ip, asr #2
   12dc0:	andeq	r3, r1, ip, asr #2
   12dc4:	andeq	r3, r1, ip, asr #2
   12dc8:	andeq	r3, r1, ip, asr #2
   12dcc:	andeq	r3, r1, ip, asr #2
   12dd0:	andeq	r3, r1, ip, asr #2
   12dd4:	andeq	r3, r1, ip, asr #2
   12dd8:	andeq	r3, r1, ip, asr #2
   12ddc:	andeq	r3, r1, r4, lsr #3
   12de0:	andeq	r3, r1, r8, lsr #3
   12de4:	andeq	r3, r1, r8, lsr #3
   12de8:	andeq	r2, r1, r8, ror pc
   12dec:	andeq	r3, r1, r8, lsr #3
   12df0:	andeq	r2, r1, r8, asr pc
   12df4:	andeq	r3, r1, r8, lsr #3
   12df8:	strheq	r3, [r1], -r0
   12dfc:	andeq	r3, r1, r8, lsr #3
   12e00:	andeq	r3, r1, r8, lsr #3
   12e04:	andeq	r3, r1, r8, lsr #3
   12e08:	andeq	r2, r1, r8, asr pc
   12e0c:	andeq	r2, r1, r8, asr pc
   12e10:	andeq	r2, r1, r8, asr pc
   12e14:	andeq	r2, r1, r8, asr pc
   12e18:	andeq	r2, r1, r8, asr pc
   12e1c:	andeq	r2, r1, r8, asr pc
   12e20:	andeq	r2, r1, r8, asr pc
   12e24:	andeq	r2, r1, r8, asr pc
   12e28:	andeq	r2, r1, r8, asr pc
   12e2c:	andeq	r2, r1, r8, asr pc
   12e30:	andeq	r2, r1, r8, asr pc
   12e34:	andeq	r2, r1, r8, asr pc
   12e38:	andeq	r2, r1, r8, asr pc
   12e3c:	andeq	r2, r1, r8, asr pc
   12e40:	andeq	r2, r1, r8, asr pc
   12e44:	andeq	r2, r1, r8, asr pc
   12e48:	andeq	r3, r1, r8, lsr #3
   12e4c:	andeq	r3, r1, r8, lsr #3
   12e50:	andeq	r3, r1, r8, lsr #3
   12e54:	andeq	r3, r1, r8, lsr #3
   12e58:	andeq	r3, r1, ip, rrx
   12e5c:	andeq	r3, r1, ip, asr #2
   12e60:	andeq	r2, r1, r8, asr pc
   12e64:	andeq	r2, r1, r8, asr pc
   12e68:	andeq	r2, r1, r8, asr pc
   12e6c:	andeq	r2, r1, r8, asr pc
   12e70:	andeq	r2, r1, r8, asr pc
   12e74:	andeq	r2, r1, r8, asr pc
   12e78:	andeq	r2, r1, r8, asr pc
   12e7c:	andeq	r2, r1, r8, asr pc
   12e80:	andeq	r2, r1, r8, asr pc
   12e84:	andeq	r2, r1, r8, asr pc
   12e88:	andeq	r2, r1, r8, asr pc
   12e8c:	andeq	r2, r1, r8, asr pc
   12e90:	andeq	r2, r1, r8, asr pc
   12e94:	andeq	r2, r1, r8, asr pc
   12e98:	andeq	r2, r1, r8, asr pc
   12e9c:	andeq	r2, r1, r8, asr pc
   12ea0:	andeq	r2, r1, r8, asr pc
   12ea4:	andeq	r2, r1, r8, asr pc
   12ea8:	andeq	r2, r1, r8, asr pc
   12eac:	andeq	r2, r1, r8, asr pc
   12eb0:	andeq	r2, r1, r8, asr pc
   12eb4:	andeq	r2, r1, r8, asr pc
   12eb8:	andeq	r2, r1, r8, asr pc
   12ebc:	andeq	r2, r1, r8, asr pc
   12ec0:	andeq	r2, r1, r8, asr pc
   12ec4:	andeq	r2, r1, r8, asr pc
   12ec8:	andeq	r3, r1, r8, lsr #3
   12ecc:			; <UNDEFINED> instruction: 0x00012fb8
   12ed0:	andeq	r2, r1, r8, asr pc
   12ed4:	andeq	r3, r1, r8, lsr #3
   12ed8:	andeq	r2, r1, r8, asr pc
   12edc:	andeq	r3, r1, r8, lsr #3
   12ee0:	andeq	r2, r1, r8, asr pc
   12ee4:	andeq	r2, r1, r8, asr pc
   12ee8:	andeq	r2, r1, r8, asr pc
   12eec:	andeq	r2, r1, r8, asr pc
   12ef0:	andeq	r2, r1, r8, asr pc
   12ef4:	andeq	r2, r1, r8, asr pc
   12ef8:	andeq	r2, r1, r8, asr pc
   12efc:	andeq	r2, r1, r8, asr pc
   12f00:	andeq	r2, r1, r8, asr pc
   12f04:	andeq	r2, r1, r8, asr pc
   12f08:	andeq	r2, r1, r8, asr pc
   12f0c:	andeq	r2, r1, r8, asr pc
   12f10:	andeq	r2, r1, r8, asr pc
   12f14:	andeq	r2, r1, r8, asr pc
   12f18:	andeq	r2, r1, r8, asr pc
   12f1c:	andeq	r2, r1, r8, asr pc
   12f20:	andeq	r2, r1, r8, asr pc
   12f24:	andeq	r2, r1, r8, asr pc
   12f28:	andeq	r2, r1, r8, asr pc
   12f2c:	andeq	r2, r1, r8, asr pc
   12f30:	andeq	r2, r1, r8, asr pc
   12f34:	andeq	r2, r1, r8, asr pc
   12f38:	andeq	r2, r1, r8, asr pc
   12f3c:	andeq	r2, r1, r8, asr pc
   12f40:	andeq	r2, r1, r8, asr pc
   12f44:	andeq	r2, r1, r8, asr pc
   12f48:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   12f4c:	andeq	r3, r1, r8, lsr #3
   12f50:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   12f54:	andeq	r2, r1, r8, ror pc
   12f58:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12f5c:	cmp	r0, #0
   12f60:	beq	1323c <__assert_fail@plt+0x2264>
   12f64:	ldr	r0, [fp, #16]
   12f68:	cmp	r0, #0
   12f6c:	mov	r0, r5
   12f70:	bne	1324c <__assert_fail@plt+0x2274>
   12f74:	b	1326c <__assert_fail@plt+0x2294>
   12f78:	mov	r4, #0
   12f7c:	cmp	r7, #0
   12f80:	beq	131a4 <__assert_fail@plt+0x21cc>
   12f84:	mov	r8, #0
   12f88:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12f8c:	cmp	r0, #0
   12f90:	bne	12f64 <__assert_fail@plt+0x1f8c>
   12f94:	b	1323c <__assert_fail@plt+0x2264>
   12f98:	mov	r4, #0
   12f9c:	cmn	lr, #1
   12fa0:	beq	1317c <__assert_fail@plt+0x21a4>
   12fa4:	cmp	r7, #0
   12fa8:	bne	12f84 <__assert_fail@plt+0x1fac>
   12fac:	cmp	lr, #1
   12fb0:	beq	131a4 <__assert_fail@plt+0x21cc>
   12fb4:	b	12f84 <__assert_fail@plt+0x1fac>
   12fb8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12fbc:	cmp	r0, #2
   12fc0:	bne	131d4 <__assert_fail@plt+0x21fc>
   12fc4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12fc8:	tst	r0, #1
   12fcc:	bne	13a34 <__assert_fail@plt+0x2a5c>
   12fd0:	mov	r8, #0
   12fd4:	mov	r0, #92	; 0x5c
   12fd8:	mov	r4, #0
   12fdc:	cmp	r8, #0
   12fe0:	beq	131f4 <__assert_fail@plt+0x221c>
   12fe4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12fe8:	b	132e8 <__assert_fail@plt+0x2310>
   12fec:	mov	r0, #102	; 0x66
   12ff0:	b	13228 <__assert_fail@plt+0x2250>
   12ff4:	mov	r2, #116	; 0x74
   12ff8:	ldr	r0, [sp, #60]	; 0x3c
   12ffc:	tst	r0, #1
   13000:	mov	r0, r2
   13004:	bne	13228 <__assert_fail@plt+0x2250>
   13008:	b	13a34 <__assert_fail@plt+0x2a5c>
   1300c:	mov	r0, #98	; 0x62
   13010:	b	13228 <__assert_fail@plt+0x2250>
   13014:	mov	r2, #114	; 0x72
   13018:	ldr	r0, [sp, #60]	; 0x3c
   1301c:	tst	r0, #1
   13020:	mov	r0, r2
   13024:	bne	13228 <__assert_fail@plt+0x2250>
   13028:	b	13a34 <__assert_fail@plt+0x2a5c>
   1302c:	ldr	r0, [sp, #80]	; 0x50
   13030:	tst	r0, #1
   13034:	beq	13310 <__assert_fail@plt+0x2338>
   13038:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1303c:	tst	r0, #1
   13040:	bne	13b5c <__assert_fail@plt+0x2b84>
   13044:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13048:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1304c:	cmp	r0, #2
   13050:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13054:	movwne	r0, #1
   13058:	orr	r0, r0, r2
   1305c:	tst	r0, #1
   13060:	beq	13608 <__assert_fail@plt+0x2630>
   13064:	mov	r0, r9
   13068:	b	1363c <__assert_fail@plt+0x2664>
   1306c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13070:	mov	r8, #0
   13074:	mov	r5, #63	; 0x3f
   13078:	cmp	r0, #5
   1307c:	beq	134c4 <__assert_fail@plt+0x24ec>
   13080:	cmp	r0, #2
   13084:	bne	13574 <__assert_fail@plt+0x259c>
   13088:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1308c:	tst	r0, #1
   13090:	bne	13a34 <__assert_fail@plt+0x2a5c>
   13094:	mov	r4, #0
   13098:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1309c:	cmp	r0, #0
   130a0:	bne	12f64 <__assert_fail@plt+0x1f8c>
   130a4:	b	1323c <__assert_fail@plt+0x2264>
   130a8:	mov	r0, #118	; 0x76
   130ac:	b	13228 <__assert_fail@plt+0x2250>
   130b0:	mov	r0, #1
   130b4:	mov	r5, #39	; 0x27
   130b8:	str	r0, [sp, #52]	; 0x34
   130bc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   130c0:	cmp	r0, #2
   130c4:	bne	13138 <__assert_fail@plt+0x2160>
   130c8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   130cc:	tst	r0, #1
   130d0:	bne	13a34 <__assert_fail@plt+0x2a5c>
   130d4:	ldr	r2, [sp, #48]	; 0x30
   130d8:	clz	r1, sl
   130dc:	mov	r8, #0
   130e0:	lsr	r1, r1, #5
   130e4:	cmp	r2, #0
   130e8:	mov	r0, r2
   130ec:	movwne	r0, #1
   130f0:	orrs	r0, r0, r1
   130f4:	moveq	r2, sl
   130f8:	moveq	sl, r0
   130fc:	cmp	r9, sl
   13100:	str	r2, [sp, #48]	; 0x30
   13104:	movcc	r0, #39	; 0x27
   13108:	strbcc	r0, [r6, r9]
   1310c:	add	r0, r9, #1
   13110:	cmp	r0, sl
   13114:	movcc	r1, #92	; 0x5c
   13118:	strbcc	r1, [r6, r0]
   1311c:	add	r0, r9, #2
   13120:	add	r9, r9, #3
   13124:	cmp	r0, sl
   13128:	movcc	r1, #39	; 0x27
   1312c:	strbcc	r1, [r6, r0]
   13130:	mov	r0, #0
   13134:	str	r0, [fp, #-48]	; 0xffffffd0
   13138:	mov	r4, #1
   1313c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13140:	cmp	r0, #0
   13144:	bne	12f64 <__assert_fail@plt+0x1f8c>
   13148:	b	1323c <__assert_fail@plt+0x2264>
   1314c:	ldr	r0, [sp, #32]
   13150:	cmp	r0, #1
   13154:	bne	13340 <__assert_fail@plt+0x2368>
   13158:	str	lr, [sp, #84]	; 0x54
   1315c:	bl	10ed0 <__ctype_b_loc@plt>
   13160:	ldr	r0, [r0]
   13164:	ldr	ip, [fp, #-84]	; 0xffffffac
   13168:	mov	r1, #1
   1316c:	add	r0, r0, r5, lsl #1
   13170:	ldrb	r0, [r0, #1]
   13174:	ubfx	r4, r0, #6, #1
   13178:	b	13738 <__assert_fail@plt+0x2760>
   1317c:	cmp	r7, #0
   13180:	ldrbeq	r0, [ip, #1]
   13184:	cmpeq	r0, #0
   13188:	beq	131a4 <__assert_fail@plt+0x21cc>
   1318c:	mvn	lr, #0
   13190:	mov	r8, #0
   13194:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13198:	cmp	r0, #0
   1319c:	bne	12f64 <__assert_fail@plt+0x1f8c>
   131a0:	b	1323c <__assert_fail@plt+0x2264>
   131a4:	mov	r1, #1
   131a8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   131ac:	cmp	r0, #2
   131b0:	bne	131c0 <__assert_fail@plt+0x21e8>
   131b4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   131b8:	tst	r0, #1
   131bc:	bne	13a34 <__assert_fail@plt+0x2a5c>
   131c0:	mov	r4, r1
   131c4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   131c8:	cmp	r0, #0
   131cc:	bne	12f64 <__assert_fail@plt+0x1f8c>
   131d0:	b	1323c <__assert_fail@plt+0x2264>
   131d4:	ldr	r1, [sp, #40]	; 0x28
   131d8:	mov	r8, #0
   131dc:	mov	r0, #92	; 0x5c
   131e0:	cmp	r1, #0
   131e4:	beq	13228 <__assert_fail@plt+0x2250>
   131e8:	mov	r4, #0
   131ec:	cmp	r8, #0
   131f0:	bne	12fe4 <__assert_fail@plt+0x200c>
   131f4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   131f8:	tst	r2, #1
   131fc:	beq	132e8 <__assert_fail@plt+0x2310>
   13200:	cmp	r9, sl
   13204:	movcc	r1, #39	; 0x27
   13208:	strbcc	r1, [r6, r9]
   1320c:	add	r1, r9, #1
   13210:	add	r9, r9, #2
   13214:	cmp	r1, sl
   13218:	movcc	r2, #39	; 0x27
   1321c:	strbcc	r2, [r6, r1]
   13220:	mov	r2, #0
   13224:	b	132e8 <__assert_fail@plt+0x2310>
   13228:	ldr	r1, [sp, #80]	; 0x50
   1322c:	mov	r4, #0
   13230:	mov	r8, #0
   13234:	tst	r1, #1
   13238:	bne	13278 <__assert_fail@plt+0x22a0>
   1323c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13240:	cmp	r0, #0
   13244:	mov	r0, r5
   13248:	beq	1326c <__assert_fail@plt+0x2294>
   1324c:	ldr	r1, [fp, #16]
   13250:	ubfx	r0, r5, #5, #3
   13254:	mov	r2, #1
   13258:	ldr	r0, [r1, r0, lsl #2]
   1325c:	and	r1, r5, #31
   13260:	tst	r0, r2, lsl r1
   13264:	mov	r0, r5
   13268:	bne	13278 <__assert_fail@plt+0x22a0>
   1326c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13270:	cmp	r1, #0
   13274:	beq	136d0 <__assert_fail@plt+0x26f8>
   13278:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1327c:	tst	r1, #1
   13280:	bne	13a14 <__assert_fail@plt+0x2a3c>
   13284:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13288:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1328c:	cmp	r1, #2
   13290:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13294:	movwne	r1, #1
   13298:	orr	r1, r1, r2
   1329c:	tst	r1, #1
   132a0:	bne	132d8 <__assert_fail@plt+0x2300>
   132a4:	cmp	r9, sl
   132a8:	movcc	r1, #39	; 0x27
   132ac:	strbcc	r1, [r6, r9]
   132b0:	add	r1, r9, #1
   132b4:	cmp	r1, sl
   132b8:	movcc	r2, #36	; 0x24
   132bc:	strbcc	r2, [r6, r1]
   132c0:	add	r1, r9, #2
   132c4:	add	r9, r9, #3
   132c8:	cmp	r1, sl
   132cc:	movcc	r2, #39	; 0x27
   132d0:	strbcc	r2, [r6, r1]
   132d4:	mov	r2, #1
   132d8:	cmp	r9, sl
   132dc:	movcc	r1, #92	; 0x5c
   132e0:	strbcc	r1, [r6, r9]
   132e4:	add	r9, r9, #1
   132e8:	cmp	r9, sl
   132ec:	add	r7, r7, #1
   132f0:	strbcc	r0, [r6, r9]
   132f4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   132f8:	add	r9, r9, #1
   132fc:	and	r0, r0, r4
   13300:	mov	r4, r0
   13304:	cmn	lr, #1
   13308:	bne	12c7c <__assert_fail@plt+0x1ca4>
   1330c:	b	12c88 <__assert_fail@plt+0x1cb0>
   13310:	ldr	r0, [sp, #28]
   13314:	mov	r4, #0
   13318:	mov	r8, #0
   1331c:	mov	r5, #0
   13320:	cmp	r0, #0
   13324:	beq	1323c <__assert_fail@plt+0x2264>
   13328:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1332c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13330:	add	r7, r7, #1
   13334:	cmn	lr, #1
   13338:	bne	12c7c <__assert_fail@plt+0x1ca4>
   1333c:	b	12c88 <__assert_fail@plt+0x1cb0>
   13340:	mov	r0, #0
   13344:	cmn	lr, #1
   13348:	str	r0, [fp, #-36]	; 0xffffffdc
   1334c:	str	r0, [fp, #-40]	; 0xffffffd8
   13350:	bne	13364 <__assert_fail@plt+0x238c>
   13354:	mov	r0, ip
   13358:	bl	10ee8 <strlen@plt>
   1335c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13360:	mov	lr, r0
   13364:	ldr	r0, [sp, #36]	; 0x24
   13368:	str	sl, [sp, #56]	; 0x38
   1336c:	str	lr, [sp, #84]	; 0x54
   13370:	cmp	r0, #0
   13374:	beq	1358c <__assert_fail@plt+0x25b4>
   13378:	add	r0, ip, r7
   1337c:	mov	r4, #1
   13380:	mov	r6, #0
   13384:	sub	sl, fp, #40	; 0x28
   13388:	str	r0, [sp, #20]
   1338c:	str	r6, [sp, #64]	; 0x40
   13390:	add	r6, r6, r7
   13394:	sub	r0, fp, #44	; 0x2c
   13398:	mov	r3, sl
   1339c:	add	r1, ip, r6
   133a0:	sub	r2, lr, r6
   133a4:	bl	15358 <__assert_fail@plt+0x4380>
   133a8:	cmn	r0, #2
   133ac:	beq	136e8 <__assert_fail@plt+0x2710>
   133b0:	ldr	sl, [sp, #56]	; 0x38
   133b4:	cmn	r0, #1
   133b8:	beq	136dc <__assert_fail@plt+0x2704>
   133bc:	cmp	r0, #0
   133c0:	beq	136e0 <__assert_fail@plt+0x2708>
   133c4:	cmp	r0, #2
   133c8:	bcc	13488 <__assert_fail@plt+0x24b0>
   133cc:	ldr	r1, [sp, #64]	; 0x40
   133d0:	ldr	r2, [sp, #20]
   133d4:	add	r1, r2, r1
   133d8:	mov	r2, #1
   133dc:	ldrb	r3, [r1, r2]
   133e0:	sub	r3, r3, #91	; 0x5b
   133e4:	cmp	r3, #33	; 0x21
   133e8:	bhi	1347c <__assert_fail@plt+0x24a4>
   133ec:	add	r6, pc, #0
   133f0:	ldr	pc, [r6, r3, lsl #2]
   133f4:	andeq	r3, r1, r0, asr #20
   133f8:	andeq	r3, r1, r0, asr #20
   133fc:	andeq	r3, r1, ip, ror r4
   13400:	andeq	r3, r1, r0, asr #20
   13404:	andeq	r3, r1, ip, ror r4
   13408:	andeq	r3, r1, r0, asr #20
   1340c:	andeq	r3, r1, ip, ror r4
   13410:	andeq	r3, r1, ip, ror r4
   13414:	andeq	r3, r1, ip, ror r4
   13418:	andeq	r3, r1, ip, ror r4
   1341c:	andeq	r3, r1, ip, ror r4
   13420:	andeq	r3, r1, ip, ror r4
   13424:	andeq	r3, r1, ip, ror r4
   13428:	andeq	r3, r1, ip, ror r4
   1342c:	andeq	r3, r1, ip, ror r4
   13430:	andeq	r3, r1, ip, ror r4
   13434:	andeq	r3, r1, ip, ror r4
   13438:	andeq	r3, r1, ip, ror r4
   1343c:	andeq	r3, r1, ip, ror r4
   13440:	andeq	r3, r1, ip, ror r4
   13444:	andeq	r3, r1, ip, ror r4
   13448:	andeq	r3, r1, ip, ror r4
   1344c:	andeq	r3, r1, ip, ror r4
   13450:	andeq	r3, r1, ip, ror r4
   13454:	andeq	r3, r1, ip, ror r4
   13458:	andeq	r3, r1, ip, ror r4
   1345c:	andeq	r3, r1, ip, ror r4
   13460:	andeq	r3, r1, ip, ror r4
   13464:	andeq	r3, r1, ip, ror r4
   13468:	andeq	r3, r1, ip, ror r4
   1346c:	andeq	r3, r1, ip, ror r4
   13470:	andeq	r3, r1, ip, ror r4
   13474:	andeq	r3, r1, ip, ror r4
   13478:	andeq	r3, r1, r0, asr #20
   1347c:	add	r2, r2, #1
   13480:	cmp	r2, r0
   13484:	bcc	133dc <__assert_fail@plt+0x2404>
   13488:	ldr	r6, [sp, #64]	; 0x40
   1348c:	add	r6, r0, r6
   13490:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13494:	bl	10e40 <iswprint@plt>
   13498:	cmp	r0, #0
   1349c:	sub	sl, fp, #40	; 0x28
   134a0:	movwne	r0, #1
   134a4:	and	r4, r4, r0
   134a8:	mov	r0, sl
   134ac:	bl	10e04 <mbsinit@plt>
   134b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   134b4:	ldr	lr, [sp, #84]	; 0x54
   134b8:	cmp	r0, #0
   134bc:	beq	1338c <__assert_fail@plt+0x23b4>
   134c0:	b	1372c <__assert_fail@plt+0x2754>
   134c4:	ldr	r0, [sp, #24]
   134c8:	cmp	r0, #0
   134cc:	beq	13574 <__assert_fail@plt+0x259c>
   134d0:	add	r0, r7, #2
   134d4:	cmp	r0, lr
   134d8:	bcs	13574 <__assert_fail@plt+0x259c>
   134dc:	add	r1, ip, r7
   134e0:	ldrb	r1, [r1, #1]
   134e4:	cmp	r1, #63	; 0x3f
   134e8:	bne	13574 <__assert_fail@plt+0x259c>
   134ec:	ldrb	r5, [ip, r0]
   134f0:	sub	r1, r5, #33	; 0x21
   134f4:	cmp	r1, #29
   134f8:	bhi	13574 <__assert_fail@plt+0x259c>
   134fc:	movw	r3, #20929	; 0x51c1
   13500:	mov	r2, #1
   13504:	movt	r3, #14336	; 0x3800
   13508:	tst	r3, r2, lsl r1
   1350c:	beq	13574 <__assert_fail@plt+0x259c>
   13510:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13514:	tst	r1, #1
   13518:	bne	13b64 <__assert_fail@plt+0x2b8c>
   1351c:	cmp	r9, sl
   13520:	mov	r7, r0
   13524:	mov	r4, #0
   13528:	movcc	r1, #63	; 0x3f
   1352c:	strbcc	r1, [r6, r9]
   13530:	add	r1, r9, #1
   13534:	cmp	r1, sl
   13538:	movcc	r2, #34	; 0x22
   1353c:	strbcc	r2, [r6, r1]
   13540:	add	r1, r9, #2
   13544:	cmp	r1, sl
   13548:	movcc	r2, #34	; 0x22
   1354c:	strbcc	r2, [r6, r1]
   13550:	add	r1, r9, #3
   13554:	add	r9, r9, #4
   13558:	cmp	r1, sl
   1355c:	movcc	r2, #63	; 0x3f
   13560:	strbcc	r2, [r6, r1]
   13564:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13568:	cmp	r0, #0
   1356c:	bne	12f64 <__assert_fail@plt+0x1f8c>
   13570:	b	1323c <__assert_fail@plt+0x2264>
   13574:	mov	r5, #63	; 0x3f
   13578:	mov	r4, #0
   1357c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13580:	cmp	r0, #0
   13584:	bne	12f64 <__assert_fail@plt+0x1f8c>
   13588:	b	1323c <__assert_fail@plt+0x2264>
   1358c:	mov	r4, #1
   13590:	mov	r6, #0
   13594:	sub	sl, fp, #40	; 0x28
   13598:	str	r6, [sp, #64]	; 0x40
   1359c:	add	r6, r6, r7
   135a0:	sub	r0, fp, #44	; 0x2c
   135a4:	mov	r3, sl
   135a8:	add	r1, ip, r6
   135ac:	sub	r2, lr, r6
   135b0:	bl	15358 <__assert_fail@plt+0x4380>
   135b4:	cmn	r0, #2
   135b8:	beq	136e8 <__assert_fail@plt+0x2710>
   135bc:	cmn	r0, #1
   135c0:	beq	136dc <__assert_fail@plt+0x2704>
   135c4:	ldr	r6, [sp, #64]	; 0x40
   135c8:	cmp	r0, #0
   135cc:	beq	13728 <__assert_fail@plt+0x2750>
   135d0:	add	r6, r0, r6
   135d4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   135d8:	bl	10e40 <iswprint@plt>
   135dc:	cmp	r0, #0
   135e0:	sub	sl, fp, #40	; 0x28
   135e4:	movwne	r0, #1
   135e8:	and	r4, r4, r0
   135ec:	mov	r0, sl
   135f0:	bl	10e04 <mbsinit@plt>
   135f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   135f8:	ldr	lr, [sp, #84]	; 0x54
   135fc:	cmp	r0, #0
   13600:	beq	13598 <__assert_fail@plt+0x25c0>
   13604:	b	1372c <__assert_fail@plt+0x2754>
   13608:	cmp	r9, sl
   1360c:	mov	r2, #1
   13610:	movcc	r0, #39	; 0x27
   13614:	strbcc	r0, [r6, r9]
   13618:	add	r0, r9, #1
   1361c:	cmp	r0, sl
   13620:	movcc	r1, #36	; 0x24
   13624:	strbcc	r1, [r6, r0]
   13628:	add	r0, r9, #2
   1362c:	cmp	r0, sl
   13630:	movcc	r1, #39	; 0x27
   13634:	strbcc	r1, [r6, r0]
   13638:	add	r0, r9, #3
   1363c:	cmp	r0, sl
   13640:	add	r9, r0, #1
   13644:	str	r2, [fp, #-48]	; 0xffffffd0
   13648:	movcc	r1, #92	; 0x5c
   1364c:	strbcc	r1, [r6, r0]
   13650:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13654:	cmp	r1, #2
   13658:	beq	136b8 <__assert_fail@plt+0x26e0>
   1365c:	add	r1, r7, #1
   13660:	mov	r4, #0
   13664:	mov	r8, #1
   13668:	mov	r5, #48	; 0x30
   1366c:	cmp	r1, lr
   13670:	bcs	12f58 <__assert_fail@plt+0x1f80>
   13674:	ldrb	r1, [ip, r1]
   13678:	sub	r1, r1, #48	; 0x30
   1367c:	uxtb	r1, r1
   13680:	cmp	r1, #9
   13684:	bhi	12f58 <__assert_fail@plt+0x1f80>
   13688:	cmp	r9, sl
   1368c:	movcc	r1, #48	; 0x30
   13690:	strbcc	r1, [r6, r9]
   13694:	add	r1, r0, #2
   13698:	add	r9, r0, #3
   1369c:	cmp	r1, sl
   136a0:	movcc	r2, #48	; 0x30
   136a4:	strbcc	r2, [r6, r1]
   136a8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   136ac:	cmp	r0, #0
   136b0:	bne	12f64 <__assert_fail@plt+0x1f8c>
   136b4:	b	1323c <__assert_fail@plt+0x2264>
   136b8:	mov	r0, #48	; 0x30
   136bc:	mov	r8, #1
   136c0:	mov	r4, #0
   136c4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   136c8:	cmp	r1, #0
   136cc:	bne	13278 <__assert_fail@plt+0x22a0>
   136d0:	cmp	r8, #0
   136d4:	beq	131f4 <__assert_fail@plt+0x221c>
   136d8:	b	12fe4 <__assert_fail@plt+0x200c>
   136dc:	mov	r4, #0
   136e0:	ldr	ip, [fp, #-84]	; 0xffffffac
   136e4:	b	13720 <__assert_fail@plt+0x2748>
   136e8:	ldr	r1, [sp, #84]	; 0x54
   136ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   136f0:	mov	r4, #0
   136f4:	cmp	r6, r1
   136f8:	bcs	13720 <__assert_fail@plt+0x2748>
   136fc:	ldrb	r0, [ip, r6]
   13700:	cmp	r0, #0
   13704:	beq	13720 <__assert_fail@plt+0x2748>
   13708:	ldr	r0, [sp, #64]	; 0x40
   1370c:	add	r0, r0, #1
   13710:	add	r6, r0, r7
   13714:	str	r0, [sp, #64]	; 0x40
   13718:	cmp	r6, r1
   1371c:	bcc	136fc <__assert_fail@plt+0x2724>
   13720:	ldr	r6, [sp, #64]	; 0x40
   13724:	b	1372c <__assert_fail@plt+0x2754>
   13728:	ldr	ip, [fp, #-84]	; 0xffffffac
   1372c:	mov	r1, r6
   13730:	ldr	r6, [sp, #76]	; 0x4c
   13734:	ldr	sl, [sp, #56]	; 0x38
   13738:	ldr	r0, [sp, #44]	; 0x2c
   1373c:	cmp	r1, #1
   13740:	orr	r2, r4, r0
   13744:	mov	r0, r1
   13748:	bhi	13768 <__assert_fail@plt+0x2790>
   1374c:	tst	r2, #1
   13750:	beq	13768 <__assert_fail@plt+0x2790>
   13754:	ldr	lr, [sp, #84]	; 0x54
   13758:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1375c:	cmp	r0, #0
   13760:	bne	12f64 <__assert_fail@plt+0x1f8c>
   13764:	b	1323c <__assert_fail@plt+0x2264>
   13768:	str	r2, [sp, #64]	; 0x40
   1376c:	add	r0, r0, r7
   13770:	add	r1, r7, #1
   13774:	ldr	lr, [sp, #84]	; 0x54
   13778:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1377c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13780:	mov	r3, #0
   13784:	str	r0, [sp, #56]	; 0x38
   13788:	ldr	r0, [sp, #64]	; 0x40
   1378c:	tst	r0, #1
   13790:	bne	13878 <__assert_fail@plt+0x28a0>
   13794:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13798:	tst	r0, #1
   1379c:	bne	13a18 <__assert_fail@plt+0x2a40>
   137a0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   137a4:	cmp	r7, #2
   137a8:	movwne	r3, #1
   137ac:	orr	r3, r3, r2
   137b0:	tst	r3, #1
   137b4:	bne	137ec <__assert_fail@plt+0x2814>
   137b8:	cmp	r9, sl
   137bc:	add	r3, r9, #1
   137c0:	movcc	r2, #39	; 0x27
   137c4:	strbcc	r2, [r6, r9]
   137c8:	cmp	r3, sl
   137cc:	movcc	r2, #36	; 0x24
   137d0:	strbcc	r2, [r6, r3]
   137d4:	add	r3, r9, #2
   137d8:	add	r9, r9, #3
   137dc:	cmp	r3, sl
   137e0:	movcc	r2, #39	; 0x27
   137e4:	strbcc	r2, [r6, r3]
   137e8:	mov	r2, #1
   137ec:	cmp	r9, sl
   137f0:	mov	r0, r2
   137f4:	movcc	r3, #92	; 0x5c
   137f8:	strbcc	r3, [r6, r9]
   137fc:	add	r3, r9, #1
   13800:	cmp	r3, sl
   13804:	andcc	r7, r5, #192	; 0xc0
   13808:	movcc	r2, #48	; 0x30
   1380c:	orrcc	r7, r2, r7, lsr #6
   13810:	strbcc	r7, [r6, r3]
   13814:	add	r3, r9, #2
   13818:	add	r9, r9, #3
   1381c:	cmp	r3, sl
   13820:	lsrcc	r7, r5, #3
   13824:	movcc	r2, #6
   13828:	bficc	r7, r2, #3, #29
   1382c:	mov	r2, #6
   13830:	strbcc	r7, [r6, r3]
   13834:	bfi	r5, r2, #3, #29
   13838:	mov	r3, #1
   1383c:	mov	r2, r0
   13840:	ldr	r0, [sp, #56]	; 0x38
   13844:	and	r8, r3, #1
   13848:	cmp	r0, r1
   1384c:	bhi	138ac <__assert_fail@plt+0x28d4>
   13850:	b	138ec <__assert_fail@plt+0x2914>
   13854:	cmp	r9, sl
   13858:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1385c:	strbcc	r5, [r6, r9]
   13860:	add	r9, r9, #1
   13864:	ldrb	r5, [ip, r1]
   13868:	add	r1, r1, #1
   1386c:	ldr	r0, [sp, #64]	; 0x40
   13870:	tst	r0, #1
   13874:	beq	13794 <__assert_fail@plt+0x27bc>
   13878:	ldr	r7, [fp, #-56]	; 0xffffffc8
   1387c:	tst	r7, #1
   13880:	beq	13894 <__assert_fail@plt+0x28bc>
   13884:	cmp	r9, sl
   13888:	movcc	r7, #92	; 0x5c
   1388c:	strbcc	r7, [r6, r9]
   13890:	add	r9, r9, #1
   13894:	mov	r7, #0
   13898:	str	r7, [fp, #-56]	; 0xffffffc8
   1389c:	ldr	r0, [sp, #56]	; 0x38
   138a0:	and	r8, r3, #1
   138a4:	cmp	r0, r1
   138a8:	bls	138ec <__assert_fail@plt+0x2914>
   138ac:	cmp	r8, #0
   138b0:	mvn	r7, r2
   138b4:	movwne	r8, #1
   138b8:	orr	r7, r7, r8
   138bc:	tst	r7, #1
   138c0:	bne	13854 <__assert_fail@plt+0x287c>
   138c4:	cmp	r9, sl
   138c8:	movcc	r7, #39	; 0x27
   138cc:	strbcc	r7, [r6, r9]
   138d0:	add	r7, r9, #1
   138d4:	add	r9, r9, #2
   138d8:	cmp	r7, sl
   138dc:	movcc	r2, #39	; 0x27
   138e0:	strbcc	r2, [r6, r7]
   138e4:	mov	r2, #0
   138e8:	b	13854 <__assert_fail@plt+0x287c>
   138ec:	cmp	r8, #0
   138f0:	sub	r7, r1, #1
   138f4:	mov	r0, r5
   138f8:	str	r2, [fp, #-48]	; 0xffffffd0
   138fc:	movwne	r8, #1
   13900:	cmp	r8, #0
   13904:	beq	131f4 <__assert_fail@plt+0x221c>
   13908:	b	12fe4 <__assert_fail@plt+0x200c>
   1390c:	mov	lr, r7
   13910:	b	13918 <__assert_fail@plt+0x2940>
   13914:	mvn	lr, #0
   13918:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1391c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13920:	eor	r0, r7, #2
   13924:	orr	r0, r0, r9
   13928:	clz	r0, r0
   1392c:	lsr	r0, r0, #5
   13930:	tst	r1, r0
   13934:	bne	13a34 <__assert_fail@plt+0x2a5c>
   13938:	mov	r0, r1
   1393c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13940:	cmp	r7, #2
   13944:	movwne	r1, #1
   13948:	orr	r0, r0, r1
   1394c:	tst	r0, #1
   13950:	ldreq	r0, [sp, #52]	; 0x34
   13954:	streq	lr, [sp, #84]	; 0x54
   13958:	eoreq	r0, r0, #1
   1395c:	tsteq	r0, #1
   13960:	bne	13af8 <__assert_fail@plt+0x2b20>
   13964:	tst	r4, #1
   13968:	bne	13ab4 <__assert_fail@plt+0x2adc>
   1396c:	ldr	r6, [sp, #48]	; 0x30
   13970:	mov	r8, #0
   13974:	cmp	r6, #0
   13978:	beq	13af0 <__assert_fail@plt+0x2b18>
   1397c:	ldr	r0, [sp, #80]	; 0x50
   13980:	mov	r1, #0
   13984:	cmp	sl, #0
   13988:	mov	r4, #0
   1398c:	str	r1, [fp, #-72]	; 0xffffffb8
   13990:	beq	12884 <__assert_fail@plt+0x18ac>
   13994:	b	13af8 <__assert_fail@plt+0x2b20>
   13998:	ldrb	r1, [r0, #3]
   1399c:	cmp	r1, #56	; 0x38
   139a0:	ldrbeq	r1, [r0, #4]
   139a4:	cmpeq	r1, #48	; 0x30
   139a8:	bne	12a7c <__assert_fail@plt+0x1aa4>
   139ac:	ldrb	r1, [r0, #5]
   139b0:	cmp	r1, #51	; 0x33
   139b4:	ldrbeq	r1, [r0, #6]
   139b8:	cmpeq	r1, #48	; 0x30
   139bc:	bne	12a7c <__assert_fail@plt+0x1aa4>
   139c0:	ldrb	r0, [r0, #7]
   139c4:	cmp	r0, #0
   139c8:	movw	r0, #24392	; 0x5f48
   139cc:	movt	r0, #1
   139d0:	str	r0, [sp, #68]	; 0x44
   139d4:	bne	12a7c <__assert_fail@plt+0x1aa4>
   139d8:	b	12a98 <__assert_fail@plt+0x1ac0>
   139dc:	ldrb	r1, [r0, #4]
   139e0:	cmp	r1, #48	; 0x30
   139e4:	ldrbeq	r1, [r0, #5]
   139e8:	cmpeq	r1, #51	; 0x33
   139ec:	bne	12b60 <__assert_fail@plt+0x1b88>
   139f0:	ldrb	r1, [r0, #6]
   139f4:	cmp	r1, #48	; 0x30
   139f8:	ldrbeq	r0, [r0, #7]
   139fc:	cmpeq	r0, #0
   13a00:	bne	12b60 <__assert_fail@plt+0x1b88>
   13a04:	movw	r0, #24396	; 0x5f4c
   13a08:	movt	r0, #1
   13a0c:	str	r0, [sp, #72]	; 0x48
   13a10:	b	12b80 <__assert_fail@plt+0x1ba8>
   13a14:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13a18:	ldr	r2, [sp, #80]	; 0x50
   13a1c:	b	13a54 <__assert_fail@plt+0x2a7c>
   13a20:	ldr	ip, [fp, #-84]	; 0xffffffac
   13a24:	mov	r2, #1
   13a28:	mov	lr, r4
   13a2c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13a30:	b	13a54 <__assert_fail@plt+0x2a7c>
   13a34:	ldr	r2, [sp, #80]	; 0x50
   13a38:	mov	r7, #2
   13a3c:	b	13a54 <__assert_fail@plt+0x2a7c>
   13a40:	ldr	r6, [sp, #76]	; 0x4c
   13a44:	ldr	ip, [fp, #-84]	; 0xffffffac
   13a48:	ldr	lr, [sp, #84]	; 0x54
   13a4c:	ldr	r2, [sp, #80]	; 0x50
   13a50:	mov	r7, #2
   13a54:	mov	r0, #0
   13a58:	ldr	r1, [fp, #12]
   13a5c:	tst	r2, #1
   13a60:	mov	r2, r7
   13a64:	mov	r3, lr
   13a68:	str	r0, [sp, #8]
   13a6c:	ldr	r0, [sp, #68]	; 0x44
   13a70:	movwne	r2, #4
   13a74:	cmp	r7, #2
   13a78:	movne	r2, r7
   13a7c:	str	r2, [sp]
   13a80:	mov	r2, ip
   13a84:	bic	r1, r1, #2
   13a88:	str	r0, [sp, #12]
   13a8c:	ldr	r0, [sp, #72]	; 0x48
   13a90:	str	r1, [sp, #4]
   13a94:	mov	r1, sl
   13a98:	str	r0, [sp, #16]
   13a9c:	mov	r0, r6
   13aa0:	bl	12808 <__assert_fail@plt+0x1830>
   13aa4:	mov	r9, r0
   13aa8:	mov	r0, r9
   13aac:	sub	sp, fp, #28
   13ab0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ab4:	mov	r0, #5
   13ab8:	ldr	r1, [sp, #48]	; 0x30
   13abc:	ldr	r2, [fp, #-84]	; 0xffffffac
   13ac0:	ldr	r3, [sp, #84]	; 0x54
   13ac4:	str	r0, [sp]
   13ac8:	ldr	r0, [fp, #12]
   13acc:	str	r0, [sp, #4]
   13ad0:	ldr	r0, [fp, #16]
   13ad4:	str	r0, [sp, #8]
   13ad8:	ldr	r0, [sp, #68]	; 0x44
   13adc:	str	r0, [sp, #12]
   13ae0:	ldr	r0, [sp, #72]	; 0x48
   13ae4:	str	r0, [sp, #16]
   13ae8:	ldr	r0, [sp, #76]	; 0x4c
   13aec:	b	13aa0 <__assert_fail@plt+0x2ac8>
   13af0:	mov	r0, #0
   13af4:	str	r0, [fp, #-72]	; 0xffffffb8
   13af8:	ldr	r1, [sp, #92]	; 0x5c
   13afc:	cmp	r1, #0
   13b00:	beq	13b40 <__assert_fail@plt+0x2b68>
   13b04:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13b08:	ldr	r2, [sp, #76]	; 0x4c
   13b0c:	tst	r0, #1
   13b10:	bne	13b44 <__assert_fail@plt+0x2b6c>
   13b14:	ldrb	r0, [r1]
   13b18:	cmp	r0, #0
   13b1c:	beq	13b44 <__assert_fail@plt+0x2b6c>
   13b20:	add	r1, r1, #1
   13b24:	cmp	r9, sl
   13b28:	strbcc	r0, [r2, r9]
   13b2c:	add	r9, r9, #1
   13b30:	ldrb	r0, [r1], #1
   13b34:	cmp	r0, #0
   13b38:	bne	13b24 <__assert_fail@plt+0x2b4c>
   13b3c:	b	13b44 <__assert_fail@plt+0x2b6c>
   13b40:	ldr	r2, [sp, #76]	; 0x4c
   13b44:	cmp	r9, sl
   13b48:	movcc	r0, #0
   13b4c:	strbcc	r0, [r2, r9]
   13b50:	mov	r0, r9
   13b54:	sub	sp, fp, #28
   13b58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b5c:	mov	r2, #1
   13b60:	b	13a2c <__assert_fail@plt+0x2a54>
   13b64:	ldr	r2, [sp, #80]	; 0x50
   13b68:	mov	r7, #5
   13b6c:	b	13a54 <__assert_fail@plt+0x2a7c>
   13b70:	bl	10fc0 <abort@plt>
   13b74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b78:	add	fp, sp, #28
   13b7c:	sub	sp, sp, #28
   13b80:	movw	r5, #29088	; 0x71a0
   13b84:	cmp	r2, #0
   13b88:	mov	r4, r1
   13b8c:	mov	r7, r0
   13b90:	str	r0, [sp, #20]
   13b94:	movt	r5, #2
   13b98:	movne	r5, r2
   13b9c:	bl	10ef4 <__errno_location@plt>
   13ba0:	mov	sl, r0
   13ba4:	ldm	r5, {r0, r1}
   13ba8:	ldr	r2, [r5, #40]	; 0x28
   13bac:	ldr	r3, [r5, #44]	; 0x2c
   13bb0:	add	r9, r5, #8
   13bb4:	ldr	r6, [sl]
   13bb8:	orr	r8, r1, #1
   13bbc:	mov	r1, #0
   13bc0:	str	r6, [sp, #24]
   13bc4:	stm	sp, {r0, r8, r9}
   13bc8:	str	r2, [sp, #12]
   13bcc:	str	r3, [sp, #16]
   13bd0:	mov	r0, #0
   13bd4:	mov	r2, r7
   13bd8:	mov	r3, r4
   13bdc:	mov	r6, r4
   13be0:	bl	12808 <__assert_fail@plt+0x1830>
   13be4:	add	r7, r0, #1
   13be8:	mov	r0, r7
   13bec:	bl	14c50 <__assert_fail@plt+0x3c78>
   13bf0:	mov	r4, r0
   13bf4:	ldr	r0, [r5]
   13bf8:	ldr	r2, [r5, #44]	; 0x2c
   13bfc:	ldr	r1, [r5, #40]	; 0x28
   13c00:	mov	r3, r6
   13c04:	stm	sp, {r0, r8, r9}
   13c08:	str	r2, [sp, #16]
   13c0c:	str	r1, [sp, #12]
   13c10:	mov	r0, r4
   13c14:	mov	r1, r7
   13c18:	ldr	r2, [sp, #20]
   13c1c:	bl	12808 <__assert_fail@plt+0x1830>
   13c20:	ldr	r0, [sp, #24]
   13c24:	str	r0, [sl]
   13c28:	mov	r0, r4
   13c2c:	sub	sp, fp, #28
   13c30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c38:	add	fp, sp, #28
   13c3c:	sub	sp, sp, #36	; 0x24
   13c40:	movw	r8, #29088	; 0x71a0
   13c44:	cmp	r3, #0
   13c48:	mov	r4, r2
   13c4c:	str	r2, [sp, #24]
   13c50:	mov	r5, r1
   13c54:	mov	r6, r0
   13c58:	str	r0, [sp, #20]
   13c5c:	movt	r8, #2
   13c60:	movne	r8, r3
   13c64:	bl	10ef4 <__errno_location@plt>
   13c68:	str	r0, [sp, #28]
   13c6c:	cmp	r4, #0
   13c70:	add	sl, r8, #8
   13c74:	ldm	r8, {r3, r9}
   13c78:	ldr	r7, [r0]
   13c7c:	ldr	r1, [r8, #40]	; 0x28
   13c80:	ldr	r2, [r8, #44]	; 0x2c
   13c84:	mov	r0, #0
   13c88:	orreq	r9, r9, #1
   13c8c:	str	r7, [sp, #32]
   13c90:	mov	r7, r5
   13c94:	stm	sp, {r3, r9, sl}
   13c98:	str	r1, [sp, #12]
   13c9c:	str	r2, [sp, #16]
   13ca0:	mov	r1, #0
   13ca4:	mov	r2, r6
   13ca8:	mov	r3, r5
   13cac:	bl	12808 <__assert_fail@plt+0x1830>
   13cb0:	add	r4, r0, #1
   13cb4:	mov	r5, r0
   13cb8:	mov	r0, r4
   13cbc:	bl	14c50 <__assert_fail@plt+0x3c78>
   13cc0:	mov	r6, r0
   13cc4:	ldr	r0, [r8]
   13cc8:	ldr	r2, [r8, #44]	; 0x2c
   13ccc:	ldr	r1, [r8, #40]	; 0x28
   13cd0:	mov	r3, r7
   13cd4:	stm	sp, {r0, r9, sl}
   13cd8:	str	r2, [sp, #16]
   13cdc:	str	r1, [sp, #12]
   13ce0:	mov	r0, r6
   13ce4:	mov	r1, r4
   13ce8:	ldr	r2, [sp, #20]
   13cec:	bl	12808 <__assert_fail@plt+0x1830>
   13cf0:	ldr	r0, [sp, #24]
   13cf4:	ldr	r1, [sp, #32]
   13cf8:	ldr	r2, [sp, #28]
   13cfc:	cmp	r0, #0
   13d00:	str	r1, [r2]
   13d04:	strne	r5, [r0]
   13d08:	mov	r0, r6
   13d0c:	sub	sp, fp, #28
   13d10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d14:	push	{r4, r5, r6, r7, fp, lr}
   13d18:	add	fp, sp, #16
   13d1c:	movw	r4, #28960	; 0x7120
   13d20:	movt	r4, #2
   13d24:	ldrd	r6, [r4]
   13d28:	cmp	r7, #2
   13d2c:	blt	13d58 <__assert_fail@plt+0x2d80>
   13d30:	add	r5, r6, #12
   13d34:	mov	r7, #0
   13d38:	ldr	r0, [r5, r7, lsl #3]
   13d3c:	bl	12500 <__assert_fail@plt+0x1528>
   13d40:	ldr	r1, [r4, #4]
   13d44:	add	r2, r7, #2
   13d48:	add	r0, r7, #1
   13d4c:	mov	r7, r0
   13d50:	cmp	r2, r1
   13d54:	blt	13d38 <__assert_fail@plt+0x2d60>
   13d58:	ldr	r0, [r6, #4]
   13d5c:	movw	r5, #29136	; 0x71d0
   13d60:	movt	r5, #2
   13d64:	cmp	r0, r5
   13d68:	beq	13d7c <__assert_fail@plt+0x2da4>
   13d6c:	bl	12500 <__assert_fail@plt+0x1528>
   13d70:	mov	r0, #256	; 0x100
   13d74:	str	r0, [r4, #8]
   13d78:	str	r5, [r4, #12]
   13d7c:	add	r5, r4, #8
   13d80:	cmp	r6, r5
   13d84:	beq	13d94 <__assert_fail@plt+0x2dbc>
   13d88:	mov	r0, r6
   13d8c:	bl	12500 <__assert_fail@plt+0x1528>
   13d90:	str	r5, [r4]
   13d94:	mov	r0, #1
   13d98:	str	r0, [r4, #4]
   13d9c:	pop	{r4, r5, r6, r7, fp, pc}
   13da0:	movw	r3, #29088	; 0x71a0
   13da4:	mvn	r2, #0
   13da8:	movt	r3, #2
   13dac:	b	13db0 <__assert_fail@plt+0x2dd8>
   13db0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13db4:	add	fp, sp, #28
   13db8:	sub	sp, sp, #44	; 0x2c
   13dbc:	mov	r7, r3
   13dc0:	str	r2, [sp, #36]	; 0x24
   13dc4:	str	r1, [sp, #32]
   13dc8:	mov	r5, r0
   13dcc:	bl	10ef4 <__errno_location@plt>
   13dd0:	cmp	r5, #0
   13dd4:	blt	13f38 <__assert_fail@plt+0x2f60>
   13dd8:	cmn	r5, #-2147483647	; 0x80000001
   13ddc:	beq	13f38 <__assert_fail@plt+0x2f60>
   13de0:	movw	r8, #28960	; 0x7120
   13de4:	mov	r4, r0
   13de8:	movt	r8, #2
   13dec:	ldr	r6, [r8]
   13df0:	ldr	r1, [r8, #4]
   13df4:	ldr	r0, [r0]
   13df8:	str	r4, [sp, #28]
   13dfc:	cmp	r1, r5
   13e00:	str	r0, [sp, #24]
   13e04:	ble	13e10 <__assert_fail@plt+0x2e38>
   13e08:	mov	sl, r6
   13e0c:	b	13e74 <__assert_fail@plt+0x2e9c>
   13e10:	mov	r0, #8
   13e14:	add	r9, r8, #8
   13e18:	add	r2, r5, #1
   13e1c:	str	r1, [fp, #-32]	; 0xffffffe0
   13e20:	mvn	r3, #-2147483648	; 0x80000000
   13e24:	str	r0, [sp]
   13e28:	subs	r0, r6, r9
   13e2c:	sub	r2, r2, r1
   13e30:	sub	r1, fp, #32
   13e34:	movne	r0, r6
   13e38:	bl	14e50 <__assert_fail@plt+0x3e78>
   13e3c:	str	r0, [r8]
   13e40:	cmp	r6, r9
   13e44:	mov	sl, r0
   13e48:	ldrdeq	r0, [r8, #8]
   13e4c:	stmeq	sl, {r0, r1}
   13e50:	ldr	r1, [r8, #4]
   13e54:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13e58:	add	r0, sl, r1, lsl #3
   13e5c:	sub	r1, r2, r1
   13e60:	lsl	r2, r1, #3
   13e64:	mov	r1, #0
   13e68:	bl	10f0c <memset@plt>
   13e6c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13e70:	str	r0, [r8, #4]
   13e74:	mov	r9, sl
   13e78:	ldr	r6, [r9, r5, lsl #3]!
   13e7c:	ldr	r4, [r9, #4]!
   13e80:	ldm	r7, {r0, r1}
   13e84:	ldr	r2, [r7, #40]	; 0x28
   13e88:	ldr	r3, [r7, #44]	; 0x2c
   13e8c:	orr	r8, r1, #1
   13e90:	add	r1, r7, #8
   13e94:	stm	sp, {r0, r8}
   13e98:	add	r0, sp, #8
   13e9c:	str	r1, [sp, #20]
   13ea0:	stm	r0, {r1, r2, r3}
   13ea4:	mov	r0, r4
   13ea8:	mov	r1, r6
   13eac:	ldr	r2, [sp, #32]
   13eb0:	ldr	r3, [sp, #36]	; 0x24
   13eb4:	bl	12808 <__assert_fail@plt+0x1830>
   13eb8:	cmp	r6, r0
   13ebc:	bhi	13f20 <__assert_fail@plt+0x2f48>
   13ec0:	add	r6, r0, #1
   13ec4:	movw	r0, #29136	; 0x71d0
   13ec8:	movt	r0, #2
   13ecc:	str	r6, [sl, r5, lsl #3]
   13ed0:	cmp	r4, r0
   13ed4:	beq	13ee0 <__assert_fail@plt+0x2f08>
   13ed8:	mov	r0, r4
   13edc:	bl	12500 <__assert_fail@plt+0x1528>
   13ee0:	mov	r0, r6
   13ee4:	bl	14c50 <__assert_fail@plt+0x3c78>
   13ee8:	str	r0, [r9]
   13eec:	mov	r4, r0
   13ef0:	add	r3, sp, #8
   13ef4:	ldr	r0, [r7]
   13ef8:	ldr	r1, [r7, #40]	; 0x28
   13efc:	ldr	r2, [r7, #44]	; 0x2c
   13f00:	stm	sp, {r0, r8}
   13f04:	ldr	r0, [sp, #20]
   13f08:	stm	r3, {r0, r1, r2}
   13f0c:	mov	r0, r4
   13f10:	mov	r1, r6
   13f14:	ldr	r2, [sp, #32]
   13f18:	ldr	r3, [sp, #36]	; 0x24
   13f1c:	bl	12808 <__assert_fail@plt+0x1830>
   13f20:	ldr	r1, [sp, #24]
   13f24:	ldr	r0, [sp, #28]
   13f28:	str	r1, [r0]
   13f2c:	mov	r0, r4
   13f30:	sub	sp, fp, #28
   13f34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f38:	bl	10fc0 <abort@plt>
   13f3c:	movw	r3, #29088	; 0x71a0
   13f40:	movt	r3, #2
   13f44:	b	13db0 <__assert_fail@plt+0x2dd8>
   13f48:	movw	r3, #29088	; 0x71a0
   13f4c:	mov	r1, r0
   13f50:	mov	r0, #0
   13f54:	mvn	r2, #0
   13f58:	movt	r3, #2
   13f5c:	b	13db0 <__assert_fail@plt+0x2dd8>
   13f60:	movw	r3, #29088	; 0x71a0
   13f64:	mov	r2, r1
   13f68:	mov	r1, r0
   13f6c:	mov	r0, #0
   13f70:	movt	r3, #2
   13f74:	b	13db0 <__assert_fail@plt+0x2dd8>
   13f78:	push	{fp, lr}
   13f7c:	mov	fp, sp
   13f80:	sub	sp, sp, #48	; 0x30
   13f84:	vmov.i32	q8, #0	; 0x00000000
   13f88:	mov	ip, #32
   13f8c:	mov	r3, sp
   13f90:	mov	lr, r2
   13f94:	cmp	r1, #10
   13f98:	add	r2, r3, #16
   13f9c:	vst1.64	{d16-d17}, [r3], ip
   13fa0:	vst1.64	{d16-d17}, [r3]
   13fa4:	vst1.64	{d16-d17}, [r2]
   13fa8:	beq	13fc8 <__assert_fail@plt+0x2ff0>
   13fac:	str	r1, [sp]
   13fb0:	mov	r3, sp
   13fb4:	mov	r1, lr
   13fb8:	mvn	r2, #0
   13fbc:	bl	13db0 <__assert_fail@plt+0x2dd8>
   13fc0:	mov	sp, fp
   13fc4:	pop	{fp, pc}
   13fc8:	bl	10fc0 <abort@plt>
   13fcc:	push	{r4, sl, fp, lr}
   13fd0:	add	fp, sp, #8
   13fd4:	sub	sp, sp, #48	; 0x30
   13fd8:	mov	ip, r3
   13fdc:	mov	r3, sp
   13fe0:	vmov.i32	q8, #0	; 0x00000000
   13fe4:	mov	lr, #32
   13fe8:	cmp	r1, #10
   13fec:	add	r4, r3, #16
   13ff0:	vst1.64	{d16-d17}, [r3], lr
   13ff4:	vst1.64	{d16-d17}, [r3]
   13ff8:	vst1.64	{d16-d17}, [r4]
   13ffc:	beq	1401c <__assert_fail@plt+0x3044>
   14000:	str	r1, [sp]
   14004:	mov	r1, r2
   14008:	mov	r3, sp
   1400c:	mov	r2, ip
   14010:	bl	13db0 <__assert_fail@plt+0x2dd8>
   14014:	sub	sp, fp, #8
   14018:	pop	{r4, sl, fp, pc}
   1401c:	bl	10fc0 <abort@plt>
   14020:	push	{fp, lr}
   14024:	mov	fp, sp
   14028:	sub	sp, sp, #48	; 0x30
   1402c:	mov	r3, sp
   14030:	vmov.i32	q8, #0	; 0x00000000
   14034:	mov	ip, #32
   14038:	cmp	r0, #10
   1403c:	add	r2, r3, #16
   14040:	vst1.64	{d16-d17}, [r3], ip
   14044:	vst1.64	{d16-d17}, [r3]
   14048:	vst1.64	{d16-d17}, [r2]
   1404c:	beq	1406c <__assert_fail@plt+0x3094>
   14050:	str	r0, [sp]
   14054:	mov	r3, sp
   14058:	mov	r0, #0
   1405c:	mvn	r2, #0
   14060:	bl	13db0 <__assert_fail@plt+0x2dd8>
   14064:	mov	sp, fp
   14068:	pop	{fp, pc}
   1406c:	bl	10fc0 <abort@plt>
   14070:	push	{fp, lr}
   14074:	mov	fp, sp
   14078:	sub	sp, sp, #48	; 0x30
   1407c:	mov	r3, sp
   14080:	vmov.i32	q8, #0	; 0x00000000
   14084:	mov	ip, #32
   14088:	cmp	r0, #10
   1408c:	add	lr, r3, #16
   14090:	vst1.64	{d16-d17}, [r3], ip
   14094:	vst1.64	{d16-d17}, [r3]
   14098:	vst1.64	{d16-d17}, [lr]
   1409c:	beq	140b8 <__assert_fail@plt+0x30e0>
   140a0:	str	r0, [sp]
   140a4:	mov	r3, sp
   140a8:	mov	r0, #0
   140ac:	bl	13db0 <__assert_fail@plt+0x2dd8>
   140b0:	mov	sp, fp
   140b4:	pop	{fp, pc}
   140b8:	bl	10fc0 <abort@plt>
   140bc:	push	{r4, sl, fp, lr}
   140c0:	add	fp, sp, #8
   140c4:	sub	sp, sp, #48	; 0x30
   140c8:	mov	lr, r0
   140cc:	movw	r0, #29088	; 0x71a0
   140d0:	mov	r3, #32
   140d4:	mov	ip, r1
   140d8:	mov	r4, #1
   140dc:	movt	r0, #2
   140e0:	add	r1, r0, #16
   140e4:	vld1.64	{d16-d17}, [r0], r3
   140e8:	mov	r3, sp
   140ec:	vld1.64	{d18-d19}, [r1]
   140f0:	add	r1, r3, #16
   140f4:	vld1.64	{d20-d21}, [r0]
   140f8:	add	r0, r3, #32
   140fc:	vst1.64	{d18-d19}, [r1]
   14100:	mov	r1, r3
   14104:	vst1.64	{d20-d21}, [r0]
   14108:	mov	r0, #28
   1410c:	and	r0, r0, r2, lsr #3
   14110:	and	r2, r2, #31
   14114:	vst1.64	{d16-d17}, [r1], r0
   14118:	ldr	r0, [r1, #8]
   1411c:	bic	r4, r4, r0, lsr r2
   14120:	eor	r0, r0, r4, lsl r2
   14124:	mov	r2, ip
   14128:	str	r0, [r1, #8]
   1412c:	mov	r0, #0
   14130:	mov	r1, lr
   14134:	bl	13db0 <__assert_fail@plt+0x2dd8>
   14138:	sub	sp, fp, #8
   1413c:	pop	{r4, sl, fp, pc}
   14140:	push	{fp, lr}
   14144:	mov	fp, sp
   14148:	sub	sp, sp, #48	; 0x30
   1414c:	mov	ip, r0
   14150:	movw	r0, #29088	; 0x71a0
   14154:	mov	r3, #32
   14158:	movt	r0, #2
   1415c:	add	r2, r0, #16
   14160:	vld1.64	{d16-d17}, [r0], r3
   14164:	mov	r3, sp
   14168:	vld1.64	{d18-d19}, [r2]
   1416c:	add	r2, r3, #16
   14170:	vld1.64	{d20-d21}, [r0]
   14174:	add	r0, r3, #32
   14178:	vst1.64	{d18-d19}, [r2]
   1417c:	mov	r2, r3
   14180:	vst1.64	{d20-d21}, [r0]
   14184:	mov	r0, #28
   14188:	and	r0, r0, r1, lsr #3
   1418c:	and	r1, r1, #31
   14190:	vst1.64	{d16-d17}, [r2], r0
   14194:	mov	r0, #1
   14198:	ldr	lr, [r2, #8]
   1419c:	bic	r0, r0, lr, lsr r1
   141a0:	eor	r0, lr, r0, lsl r1
   141a4:	mov	r1, ip
   141a8:	str	r0, [r2, #8]
   141ac:	mov	r0, #0
   141b0:	mvn	r2, #0
   141b4:	bl	13db0 <__assert_fail@plt+0x2dd8>
   141b8:	mov	sp, fp
   141bc:	pop	{fp, pc}
   141c0:	push	{fp, lr}
   141c4:	mov	fp, sp
   141c8:	sub	sp, sp, #48	; 0x30
   141cc:	movw	r2, #29088	; 0x71a0
   141d0:	mov	r3, #32
   141d4:	mov	r1, r0
   141d8:	movt	r2, #2
   141dc:	add	r0, r2, #16
   141e0:	vld1.64	{d16-d17}, [r2], r3
   141e4:	mov	r3, sp
   141e8:	vld1.64	{d18-d19}, [r0]
   141ec:	add	r0, r3, #16
   141f0:	vld1.64	{d20-d21}, [r2]
   141f4:	mov	r2, r3
   141f8:	vst1.64	{d18-d19}, [r0]
   141fc:	add	r0, r3, #32
   14200:	vst1.64	{d20-d21}, [r0]
   14204:	mov	r0, #12
   14208:	vst1.64	{d16-d17}, [r2], r0
   1420c:	ldr	r0, [r2]
   14210:	orr	r0, r0, #67108864	; 0x4000000
   14214:	str	r0, [r2]
   14218:	mov	r0, #0
   1421c:	mvn	r2, #0
   14220:	bl	13db0 <__assert_fail@plt+0x2dd8>
   14224:	mov	sp, fp
   14228:	pop	{fp, pc}
   1422c:	push	{fp, lr}
   14230:	mov	fp, sp
   14234:	sub	sp, sp, #48	; 0x30
   14238:	mov	ip, r1
   1423c:	mov	r1, r0
   14240:	movw	r0, #29088	; 0x71a0
   14244:	mov	r3, #32
   14248:	movt	r0, #2
   1424c:	add	r2, r0, #16
   14250:	vld1.64	{d16-d17}, [r0], r3
   14254:	mov	r3, sp
   14258:	vld1.64	{d18-d19}, [r2]
   1425c:	add	r2, r3, #16
   14260:	vld1.64	{d20-d21}, [r0]
   14264:	add	r0, r3, #32
   14268:	vst1.64	{d18-d19}, [r2]
   1426c:	mov	r2, r3
   14270:	vst1.64	{d20-d21}, [r0]
   14274:	mov	r0, #12
   14278:	vst1.64	{d16-d17}, [r2], r0
   1427c:	ldr	r0, [r2]
   14280:	orr	r0, r0, #67108864	; 0x4000000
   14284:	str	r0, [r2]
   14288:	mov	r0, #0
   1428c:	mov	r2, ip
   14290:	bl	13db0 <__assert_fail@plt+0x2dd8>
   14294:	mov	sp, fp
   14298:	pop	{fp, pc}
   1429c:	push	{r4, sl, fp, lr}
   142a0:	add	fp, sp, #8
   142a4:	sub	sp, sp, #96	; 0x60
   142a8:	mov	ip, r2
   142ac:	mov	r2, sp
   142b0:	vmov.i32	q8, #0	; 0x00000000
   142b4:	mov	r4, #28
   142b8:	cmp	r1, #10
   142bc:	mov	r3, r2
   142c0:	add	lr, r2, #16
   142c4:	vst1.64	{d16-d17}, [r3], r4
   142c8:	vst1.64	{d16-d17}, [lr]
   142cc:	vst1.32	{d16-d17}, [r3]
   142d0:	beq	14320 <__assert_fail@plt+0x3348>
   142d4:	vld1.64	{d16-d17}, [r2], r4
   142d8:	vld1.64	{d18-d19}, [lr]
   142dc:	add	r3, sp, #48	; 0x30
   142e0:	add	r4, r3, #4
   142e4:	vld1.32	{d20-d21}, [r2]
   142e8:	add	r2, r3, #20
   142ec:	vst1.32	{d16-d17}, [r4]
   142f0:	vst1.32	{d18-d19}, [r2]
   142f4:	add	r2, r3, #32
   142f8:	vst1.32	{d20-d21}, [r2]
   142fc:	str	r1, [sp, #48]	; 0x30
   14300:	mvn	r2, #0
   14304:	ldr	r1, [sp, #60]	; 0x3c
   14308:	orr	r1, r1, #67108864	; 0x4000000
   1430c:	str	r1, [sp, #60]	; 0x3c
   14310:	mov	r1, ip
   14314:	bl	13db0 <__assert_fail@plt+0x2dd8>
   14318:	sub	sp, fp, #8
   1431c:	pop	{r4, sl, fp, pc}
   14320:	bl	10fc0 <abort@plt>
   14324:	push	{r4, r5, fp, lr}
   14328:	add	fp, sp, #8
   1432c:	sub	sp, sp, #48	; 0x30
   14330:	mov	ip, r3
   14334:	movw	r3, #29088	; 0x71a0
   14338:	mov	lr, #32
   1433c:	cmp	r1, #0
   14340:	mov	r5, sp
   14344:	movt	r3, #2
   14348:	cmpne	r2, #0
   1434c:	add	r4, r3, #16
   14350:	vld1.64	{d16-d17}, [r3], lr
   14354:	vld1.64	{d18-d19}, [r4]
   14358:	add	r4, r5, #16
   1435c:	vld1.64	{d20-d21}, [r3]
   14360:	vst1.64	{d16-d17}, [r5], lr
   14364:	mov	r3, #10
   14368:	vst1.64	{d18-d19}, [r4]
   1436c:	vst1.64	{d20-d21}, [r5]
   14370:	str	r3, [sp]
   14374:	bne	1437c <__assert_fail@plt+0x33a4>
   14378:	bl	10fc0 <abort@plt>
   1437c:	str	r2, [sp, #44]	; 0x2c
   14380:	str	r1, [sp, #40]	; 0x28
   14384:	mov	r3, sp
   14388:	mov	r1, ip
   1438c:	mvn	r2, #0
   14390:	bl	13db0 <__assert_fail@plt+0x2dd8>
   14394:	sub	sp, fp, #8
   14398:	pop	{r4, r5, fp, pc}
   1439c:	push	{r4, r5, fp, lr}
   143a0:	add	fp, sp, #8
   143a4:	sub	sp, sp, #48	; 0x30
   143a8:	mov	lr, r3
   143ac:	movw	r3, #29088	; 0x71a0
   143b0:	mov	ip, #32
   143b4:	cmp	r1, #0
   143b8:	mov	r5, sp
   143bc:	movt	r3, #2
   143c0:	cmpne	r2, #0
   143c4:	add	r4, r3, #16
   143c8:	vld1.64	{d16-d17}, [r3], ip
   143cc:	vld1.64	{d18-d19}, [r4]
   143d0:	add	r4, r5, #16
   143d4:	vld1.64	{d20-d21}, [r3]
   143d8:	vst1.64	{d16-d17}, [r5], ip
   143dc:	mov	r3, #10
   143e0:	vst1.64	{d18-d19}, [r4]
   143e4:	vst1.64	{d20-d21}, [r5]
   143e8:	str	r3, [sp]
   143ec:	bne	143f4 <__assert_fail@plt+0x341c>
   143f0:	bl	10fc0 <abort@plt>
   143f4:	ldr	ip, [fp, #8]
   143f8:	str	r2, [sp, #44]	; 0x2c
   143fc:	str	r1, [sp, #40]	; 0x28
   14400:	mov	r3, sp
   14404:	mov	r1, lr
   14408:	mov	r2, ip
   1440c:	bl	13db0 <__assert_fail@plt+0x2dd8>
   14410:	sub	sp, fp, #8
   14414:	pop	{r4, r5, fp, pc}
   14418:	push	{r4, sl, fp, lr}
   1441c:	add	fp, sp, #8
   14420:	sub	sp, sp, #48	; 0x30
   14424:	mov	ip, r2
   14428:	movw	r2, #29088	; 0x71a0
   1442c:	mov	lr, #32
   14430:	cmp	r0, #0
   14434:	mov	r4, sp
   14438:	movt	r2, #2
   1443c:	cmpne	r1, #0
   14440:	add	r3, r2, #16
   14444:	vld1.64	{d16-d17}, [r2], lr
   14448:	vld1.64	{d18-d19}, [r3]
   1444c:	add	r3, r4, #16
   14450:	vld1.64	{d20-d21}, [r2]
   14454:	vst1.64	{d16-d17}, [r4], lr
   14458:	mov	r2, #10
   1445c:	vst1.64	{d18-d19}, [r3]
   14460:	vst1.64	{d20-d21}, [r4]
   14464:	str	r2, [sp]
   14468:	bne	14470 <__assert_fail@plt+0x3498>
   1446c:	bl	10fc0 <abort@plt>
   14470:	str	r1, [sp, #44]	; 0x2c
   14474:	str	r0, [sp, #40]	; 0x28
   14478:	mov	r3, sp
   1447c:	mov	r0, #0
   14480:	mov	r1, ip
   14484:	mvn	r2, #0
   14488:	bl	13db0 <__assert_fail@plt+0x2dd8>
   1448c:	sub	sp, fp, #8
   14490:	pop	{r4, sl, fp, pc}
   14494:	push	{r4, r5, fp, lr}
   14498:	add	fp, sp, #8
   1449c:	sub	sp, sp, #48	; 0x30
   144a0:	mov	lr, r2
   144a4:	movw	r2, #29088	; 0x71a0
   144a8:	mov	ip, r3
   144ac:	mov	r3, #32
   144b0:	cmp	r0, #0
   144b4:	mov	r5, sp
   144b8:	movt	r2, #2
   144bc:	cmpne	r1, #0
   144c0:	add	r4, r2, #16
   144c4:	vld1.64	{d16-d17}, [r2], r3
   144c8:	vld1.64	{d18-d19}, [r4]
   144cc:	add	r4, r5, #16
   144d0:	vld1.64	{d20-d21}, [r2]
   144d4:	vst1.64	{d16-d17}, [r5], r3
   144d8:	mov	r2, #10
   144dc:	vst1.64	{d18-d19}, [r4]
   144e0:	vst1.64	{d20-d21}, [r5]
   144e4:	str	r2, [sp]
   144e8:	bne	144f0 <__assert_fail@plt+0x3518>
   144ec:	bl	10fc0 <abort@plt>
   144f0:	str	r1, [sp, #44]	; 0x2c
   144f4:	str	r0, [sp, #40]	; 0x28
   144f8:	mov	r3, sp
   144fc:	mov	r0, #0
   14500:	mov	r1, lr
   14504:	mov	r2, ip
   14508:	bl	13db0 <__assert_fail@plt+0x2dd8>
   1450c:	sub	sp, fp, #8
   14510:	pop	{r4, r5, fp, pc}
   14514:	movw	r3, #28912	; 0x70f0
   14518:	movt	r3, #2
   1451c:	b	13db0 <__assert_fail@plt+0x2dd8>
   14520:	movw	r3, #28912	; 0x70f0
   14524:	mov	r2, r1
   14528:	mov	r1, r0
   1452c:	mov	r0, #0
   14530:	movt	r3, #2
   14534:	b	13db0 <__assert_fail@plt+0x2dd8>
   14538:	movw	r3, #28912	; 0x70f0
   1453c:	mvn	r2, #0
   14540:	movt	r3, #2
   14544:	b	13db0 <__assert_fail@plt+0x2dd8>
   14548:	movw	r3, #28912	; 0x70f0
   1454c:	mov	r1, r0
   14550:	mov	r0, #0
   14554:	mvn	r2, #0
   14558:	movt	r3, #2
   1455c:	b	13db0 <__assert_fail@plt+0x2dd8>
   14560:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14564:	add	fp, sp, #24
   14568:	sub	sp, sp, #32
   1456c:	ldr	r6, [fp, #12]
   14570:	ldr	r7, [fp, #8]
   14574:	mov	r4, r2
   14578:	mov	r8, r0
   1457c:	cmp	r1, #0
   14580:	beq	145a8 <__assert_fail@plt+0x35d0>
   14584:	movw	r2, #24484	; 0x5fa4
   14588:	mov	r5, r1
   1458c:	str	r3, [sp, #4]
   14590:	str	r4, [sp]
   14594:	mov	r0, r8
   14598:	mov	r1, #1
   1459c:	movt	r2, #1
   145a0:	mov	r3, r5
   145a4:	b	145c0 <__assert_fail@plt+0x35e8>
   145a8:	movw	r2, #24496	; 0x5fb0
   145ac:	str	r3, [sp]
   145b0:	mov	r0, r8
   145b4:	mov	r1, #1
   145b8:	mov	r3, r4
   145bc:	movt	r2, #1
   145c0:	bl	10f30 <__fprintf_chk@plt>
   145c4:	movw	r1, #24503	; 0x5fb7
   145c8:	mov	r0, #0
   145cc:	mov	r2, #5
   145d0:	movt	r1, #1
   145d4:	bl	10e1c <dcgettext@plt>
   145d8:	movw	r2, #25221	; 0x6285
   145dc:	mov	r3, r0
   145e0:	movw	r0, #2022	; 0x7e6
   145e4:	mov	r1, #1
   145e8:	str	r0, [sp]
   145ec:	movt	r2, #1
   145f0:	mov	r0, r8
   145f4:	bl	10f30 <__fprintf_chk@plt>
   145f8:	movw	r4, #23118	; 0x5a4e
   145fc:	mov	r1, r8
   14600:	movt	r4, #1
   14604:	mov	r0, r4
   14608:	bl	10da4 <fputs_unlocked@plt>
   1460c:	movw	r1, #24507	; 0x5fbb
   14610:	mov	r0, #0
   14614:	mov	r2, #5
   14618:	movt	r1, #1
   1461c:	bl	10e1c <dcgettext@plt>
   14620:	movw	r3, #24678	; 0x6066
   14624:	mov	r2, r0
   14628:	mov	r0, r8
   1462c:	mov	r1, #1
   14630:	movt	r3, #1
   14634:	bl	10f30 <__fprintf_chk@plt>
   14638:	mov	r0, r4
   1463c:	mov	r1, r8
   14640:	bl	10da4 <fputs_unlocked@plt>
   14644:	cmp	r6, #9
   14648:	bhi	14684 <__assert_fail@plt+0x36ac>
   1464c:	add	r0, pc, #0
   14650:	ldr	pc, [r0, r6, lsl #2]
   14654:	andeq	r4, r1, ip, ror r6
   14658:	muleq	r1, r0, r6
   1465c:	andeq	r4, r1, r0, asr #13
   14660:	andeq	r4, r1, r8, ror #13
   14664:	andeq	r4, r1, r0, lsl r7
   14668:	andeq	r4, r1, r8, lsr r7
   1466c:	andeq	r4, r1, r0, ror #14
   14670:	muleq	r1, r8, r7
   14674:	andeq	r4, r1, r0, asr #16
   14678:	andeq	r4, r1, r8, ror #15
   1467c:	sub	sp, fp, #24
   14680:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14684:	movw	r1, #25031	; 0x61c7
   14688:	movt	r1, #1
   1468c:	b	147f0 <__assert_fail@plt+0x3818>
   14690:	movw	r1, #24712	; 0x6088
   14694:	mov	r0, #0
   14698:	mov	r2, #5
   1469c:	movt	r1, #1
   146a0:	bl	10e1c <dcgettext@plt>
   146a4:	ldr	r3, [r7]
   146a8:	mov	r2, r0
   146ac:	mov	r0, r8
   146b0:	mov	r1, #1
   146b4:	sub	sp, fp, #24
   146b8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   146bc:	b	10f30 <__fprintf_chk@plt>
   146c0:	movw	r1, #24728	; 0x6098
   146c4:	mov	r0, #0
   146c8:	mov	r2, #5
   146cc:	movt	r1, #1
   146d0:	bl	10e1c <dcgettext@plt>
   146d4:	mov	r2, r0
   146d8:	ldr	r3, [r7]
   146dc:	ldr	r0, [r7, #4]
   146e0:	str	r0, [sp]
   146e4:	b	147d4 <__assert_fail@plt+0x37fc>
   146e8:	movw	r1, #24751	; 0x60af
   146ec:	mov	r0, #0
   146f0:	mov	r2, #5
   146f4:	movt	r1, #1
   146f8:	bl	10e1c <dcgettext@plt>
   146fc:	ldr	r3, [r7]
   14700:	mov	r2, r0
   14704:	ldmib	r7, {r0, r1}
   14708:	stm	sp, {r0, r1}
   1470c:	b	147d4 <__assert_fail@plt+0x37fc>
   14710:	movw	r1, #24779	; 0x60cb
   14714:	mov	r0, #0
   14718:	mov	r2, #5
   1471c:	movt	r1, #1
   14720:	bl	10e1c <dcgettext@plt>
   14724:	ldr	r3, [r7]
   14728:	mov	r2, r0
   1472c:	ldmib	r7, {r0, r1, r7}
   14730:	stm	sp, {r0, r1, r7}
   14734:	b	147d4 <__assert_fail@plt+0x37fc>
   14738:	movw	r1, #24811	; 0x60eb
   1473c:	mov	r0, #0
   14740:	mov	r2, #5
   14744:	movt	r1, #1
   14748:	bl	10e1c <dcgettext@plt>
   1474c:	ldr	r3, [r7]
   14750:	mov	r2, r0
   14754:	ldmib	r7, {r0, r1, r6, r7}
   14758:	stm	sp, {r0, r1, r6, r7}
   1475c:	b	147d4 <__assert_fail@plt+0x37fc>
   14760:	movw	r1, #24847	; 0x610f
   14764:	mov	r0, #0
   14768:	mov	r2, #5
   1476c:	movt	r1, #1
   14770:	bl	10e1c <dcgettext@plt>
   14774:	ldr	r3, [r7]
   14778:	mov	r2, r0
   1477c:	ldmib	r7, {r0, r1, r6}
   14780:	ldr	r5, [r7, #16]
   14784:	ldr	r7, [r7, #20]
   14788:	stm	sp, {r0, r1, r6}
   1478c:	str	r5, [sp, #12]
   14790:	str	r7, [sp, #16]
   14794:	b	147d4 <__assert_fail@plt+0x37fc>
   14798:	movw	r1, #24887	; 0x6137
   1479c:	mov	r0, #0
   147a0:	mov	r2, #5
   147a4:	movt	r1, #1
   147a8:	bl	10e1c <dcgettext@plt>
   147ac:	ldr	r3, [r7]
   147b0:	mov	r2, r0
   147b4:	ldmib	r7, {r0, r1, r6}
   147b8:	ldr	r5, [r7, #16]
   147bc:	ldr	r4, [r7, #20]
   147c0:	ldr	r7, [r7, #24]
   147c4:	stm	sp, {r0, r1, r6}
   147c8:	str	r5, [sp, #12]
   147cc:	str	r4, [sp, #16]
   147d0:	str	r7, [sp, #20]
   147d4:	mov	r0, r8
   147d8:	mov	r1, #1
   147dc:	bl	10f30 <__fprintf_chk@plt>
   147e0:	sub	sp, fp, #24
   147e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   147e8:	movw	r1, #24979	; 0x6193
   147ec:	movt	r1, #1
   147f0:	mov	r0, #0
   147f4:	mov	r2, #5
   147f8:	bl	10e1c <dcgettext@plt>
   147fc:	mov	ip, r0
   14800:	ldr	r3, [r7]
   14804:	ldr	r0, [r7, #4]
   14808:	ldr	r1, [r7, #8]
   1480c:	ldr	r6, [r7, #12]
   14810:	ldr	r5, [r7, #16]
   14814:	ldr	r4, [r7, #20]
   14818:	ldr	r2, [r7, #24]
   1481c:	ldr	lr, [r7, #28]
   14820:	ldr	r7, [r7, #32]
   14824:	stm	sp, {r0, r1, r6}
   14828:	str	r5, [sp, #12]
   1482c:	str	r4, [sp, #16]
   14830:	str	r2, [sp, #20]
   14834:	str	lr, [sp, #24]
   14838:	str	r7, [sp, #28]
   1483c:	b	14884 <__assert_fail@plt+0x38ac>
   14840:	movw	r1, #24931	; 0x6163
   14844:	mov	r0, #0
   14848:	mov	r2, #5
   1484c:	movt	r1, #1
   14850:	bl	10e1c <dcgettext@plt>
   14854:	mov	ip, r0
   14858:	ldr	r3, [r7]
   1485c:	ldmib	r7, {r0, r1, r6}
   14860:	ldr	r5, [r7, #16]
   14864:	ldr	r4, [r7, #20]
   14868:	ldr	r2, [r7, #24]
   1486c:	ldr	r7, [r7, #28]
   14870:	stm	sp, {r0, r1, r6}
   14874:	str	r5, [sp, #12]
   14878:	str	r4, [sp, #16]
   1487c:	str	r2, [sp, #20]
   14880:	str	r7, [sp, #24]
   14884:	mov	r0, r8
   14888:	mov	r1, #1
   1488c:	mov	r2, ip
   14890:	bl	10f30 <__fprintf_chk@plt>
   14894:	sub	sp, fp, #24
   14898:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1489c:	push	{r4, sl, fp, lr}
   148a0:	add	fp, sp, #8
   148a4:	sub	sp, sp, #8
   148a8:	ldr	ip, [fp, #8]
   148ac:	mov	lr, #0
   148b0:	ldr	r4, [ip, lr, lsl #2]
   148b4:	add	lr, lr, #1
   148b8:	cmp	r4, #0
   148bc:	bne	148b0 <__assert_fail@plt+0x38d8>
   148c0:	sub	r4, lr, #1
   148c4:	str	ip, [sp]
   148c8:	str	r4, [sp, #4]
   148cc:	bl	14560 <__assert_fail@plt+0x3588>
   148d0:	sub	sp, fp, #8
   148d4:	pop	{r4, sl, fp, pc}
   148d8:	push	{fp, lr}
   148dc:	mov	fp, sp
   148e0:	sub	sp, sp, #48	; 0x30
   148e4:	ldr	ip, [fp, #8]
   148e8:	ldr	lr, [ip]
   148ec:	cmp	lr, #0
   148f0:	str	lr, [sp, #8]
   148f4:	beq	14990 <__assert_fail@plt+0x39b8>
   148f8:	ldr	lr, [ip, #4]
   148fc:	cmp	lr, #0
   14900:	str	lr, [sp, #12]
   14904:	beq	14998 <__assert_fail@plt+0x39c0>
   14908:	ldr	lr, [ip, #8]
   1490c:	cmp	lr, #0
   14910:	str	lr, [sp, #16]
   14914:	beq	149a0 <__assert_fail@plt+0x39c8>
   14918:	ldr	lr, [ip, #12]
   1491c:	cmp	lr, #0
   14920:	str	lr, [sp, #20]
   14924:	beq	149a8 <__assert_fail@plt+0x39d0>
   14928:	ldr	lr, [ip, #16]
   1492c:	cmp	lr, #0
   14930:	str	lr, [sp, #24]
   14934:	beq	149b0 <__assert_fail@plt+0x39d8>
   14938:	ldr	lr, [ip, #20]
   1493c:	cmp	lr, #0
   14940:	str	lr, [sp, #28]
   14944:	beq	149b8 <__assert_fail@plt+0x39e0>
   14948:	ldr	lr, [ip, #24]
   1494c:	cmp	lr, #0
   14950:	str	lr, [sp, #32]
   14954:	beq	149c0 <__assert_fail@plt+0x39e8>
   14958:	ldr	lr, [ip, #28]
   1495c:	cmp	lr, #0
   14960:	str	lr, [sp, #36]	; 0x24
   14964:	beq	149c8 <__assert_fail@plt+0x39f0>
   14968:	ldr	lr, [ip, #32]
   1496c:	cmp	lr, #0
   14970:	str	lr, [sp, #40]	; 0x28
   14974:	beq	149d0 <__assert_fail@plt+0x39f8>
   14978:	ldr	lr, [ip, #36]	; 0x24
   1497c:	mov	ip, #10
   14980:	cmp	lr, #0
   14984:	str	lr, [sp, #44]	; 0x2c
   14988:	movweq	ip, #9
   1498c:	b	149d4 <__assert_fail@plt+0x39fc>
   14990:	mov	ip, #0
   14994:	b	149d4 <__assert_fail@plt+0x39fc>
   14998:	mov	ip, #1
   1499c:	b	149d4 <__assert_fail@plt+0x39fc>
   149a0:	mov	ip, #2
   149a4:	b	149d4 <__assert_fail@plt+0x39fc>
   149a8:	mov	ip, #3
   149ac:	b	149d4 <__assert_fail@plt+0x39fc>
   149b0:	mov	ip, #4
   149b4:	b	149d4 <__assert_fail@plt+0x39fc>
   149b8:	mov	ip, #5
   149bc:	b	149d4 <__assert_fail@plt+0x39fc>
   149c0:	mov	ip, #6
   149c4:	b	149d4 <__assert_fail@plt+0x39fc>
   149c8:	mov	ip, #7
   149cc:	b	149d4 <__assert_fail@plt+0x39fc>
   149d0:	mov	ip, #8
   149d4:	add	lr, sp, #8
   149d8:	str	ip, [sp, #4]
   149dc:	str	lr, [sp]
   149e0:	bl	14560 <__assert_fail@plt+0x3588>
   149e4:	mov	sp, fp
   149e8:	pop	{fp, pc}
   149ec:	push	{fp, lr}
   149f0:	mov	fp, sp
   149f4:	sub	sp, sp, #56	; 0x38
   149f8:	add	ip, fp, #8
   149fc:	str	ip, [sp, #12]
   14a00:	ldr	lr, [fp, #8]
   14a04:	cmp	lr, #0
   14a08:	str	lr, [sp, #16]
   14a0c:	beq	14aa8 <__assert_fail@plt+0x3ad0>
   14a10:	ldr	lr, [ip, #4]
   14a14:	cmp	lr, #0
   14a18:	str	lr, [sp, #20]
   14a1c:	beq	14ab0 <__assert_fail@plt+0x3ad8>
   14a20:	ldr	lr, [ip, #8]
   14a24:	cmp	lr, #0
   14a28:	str	lr, [sp, #24]
   14a2c:	beq	14ab8 <__assert_fail@plt+0x3ae0>
   14a30:	ldr	lr, [ip, #12]
   14a34:	cmp	lr, #0
   14a38:	str	lr, [sp, #28]
   14a3c:	beq	14ac0 <__assert_fail@plt+0x3ae8>
   14a40:	ldr	lr, [ip, #16]
   14a44:	cmp	lr, #0
   14a48:	str	lr, [sp, #32]
   14a4c:	beq	14ac8 <__assert_fail@plt+0x3af0>
   14a50:	ldr	lr, [ip, #20]
   14a54:	cmp	lr, #0
   14a58:	str	lr, [sp, #36]	; 0x24
   14a5c:	beq	14ad0 <__assert_fail@plt+0x3af8>
   14a60:	ldr	lr, [ip, #24]
   14a64:	cmp	lr, #0
   14a68:	str	lr, [sp, #40]	; 0x28
   14a6c:	beq	14ad8 <__assert_fail@plt+0x3b00>
   14a70:	ldr	lr, [ip, #28]
   14a74:	cmp	lr, #0
   14a78:	str	lr, [sp, #44]	; 0x2c
   14a7c:	beq	14ae0 <__assert_fail@plt+0x3b08>
   14a80:	ldr	lr, [ip, #32]
   14a84:	cmp	lr, #0
   14a88:	str	lr, [sp, #48]	; 0x30
   14a8c:	beq	14ae8 <__assert_fail@plt+0x3b10>
   14a90:	ldr	lr, [ip, #36]	; 0x24
   14a94:	mov	ip, #10
   14a98:	cmp	lr, #0
   14a9c:	str	lr, [sp, #52]	; 0x34
   14aa0:	movweq	ip, #9
   14aa4:	b	14aec <__assert_fail@plt+0x3b14>
   14aa8:	mov	ip, #0
   14aac:	b	14aec <__assert_fail@plt+0x3b14>
   14ab0:	mov	ip, #1
   14ab4:	b	14aec <__assert_fail@plt+0x3b14>
   14ab8:	mov	ip, #2
   14abc:	b	14aec <__assert_fail@plt+0x3b14>
   14ac0:	mov	ip, #3
   14ac4:	b	14aec <__assert_fail@plt+0x3b14>
   14ac8:	mov	ip, #4
   14acc:	b	14aec <__assert_fail@plt+0x3b14>
   14ad0:	mov	ip, #5
   14ad4:	b	14aec <__assert_fail@plt+0x3b14>
   14ad8:	mov	ip, #6
   14adc:	b	14aec <__assert_fail@plt+0x3b14>
   14ae0:	mov	ip, #7
   14ae4:	b	14aec <__assert_fail@plt+0x3b14>
   14ae8:	mov	ip, #8
   14aec:	add	lr, sp, #16
   14af0:	str	ip, [sp, #4]
   14af4:	str	lr, [sp]
   14af8:	bl	14560 <__assert_fail@plt+0x3588>
   14afc:	mov	sp, fp
   14b00:	pop	{fp, pc}
   14b04:	push	{fp, lr}
   14b08:	mov	fp, sp
   14b0c:	movw	r0, #29004	; 0x714c
   14b10:	movt	r0, #2
   14b14:	ldr	r1, [r0]
   14b18:	movw	r0, #23118	; 0x5a4e
   14b1c:	movt	r0, #1
   14b20:	bl	10da4 <fputs_unlocked@plt>
   14b24:	movw	r1, #25091	; 0x6203
   14b28:	mov	r0, #0
   14b2c:	mov	r2, #5
   14b30:	movt	r1, #1
   14b34:	bl	10e1c <dcgettext@plt>
   14b38:	movw	r2, #25111	; 0x6217
   14b3c:	mov	r1, r0
   14b40:	mov	r0, #1
   14b44:	movt	r2, #1
   14b48:	bl	10f18 <__printf_chk@plt>
   14b4c:	movw	r1, #25133	; 0x622d
   14b50:	mov	r0, #0
   14b54:	mov	r2, #5
   14b58:	movt	r1, #1
   14b5c:	bl	10e1c <dcgettext@plt>
   14b60:	movw	r2, #22648	; 0x5878
   14b64:	movw	r3, #22927	; 0x598f
   14b68:	mov	r1, r0
   14b6c:	mov	r0, #1
   14b70:	movt	r2, #1
   14b74:	movt	r3, #1
   14b78:	bl	10f18 <__printf_chk@plt>
   14b7c:	movw	r1, #25153	; 0x6241
   14b80:	mov	r0, #0
   14b84:	mov	r2, #5
   14b88:	movt	r1, #1
   14b8c:	bl	10e1c <dcgettext@plt>
   14b90:	movw	r2, #25192	; 0x6268
   14b94:	mov	r1, r0
   14b98:	mov	r0, #1
   14b9c:	movt	r2, #1
   14ba0:	pop	{fp, lr}
   14ba4:	b	10f18 <__printf_chk@plt>
   14ba8:	push	{r4, r5, r6, sl, fp, lr}
   14bac:	add	fp, sp, #16
   14bb0:	mov	r4, r2
   14bb4:	mov	r5, r1
   14bb8:	mov	r6, r0
   14bbc:	bl	153b8 <__assert_fail@plt+0x43e0>
   14bc0:	cmp	r0, #0
   14bc4:	popne	{r4, r5, r6, sl, fp, pc}
   14bc8:	cmp	r6, #0
   14bcc:	beq	14be0 <__assert_fail@plt+0x3c08>
   14bd0:	cmp	r5, #0
   14bd4:	cmpne	r4, #0
   14bd8:	bne	14be0 <__assert_fail@plt+0x3c08>
   14bdc:	pop	{r4, r5, r6, sl, fp, pc}
   14be0:	bl	15180 <__assert_fail@plt+0x41a8>
   14be4:	push	{r4, r5, r6, sl, fp, lr}
   14be8:	add	fp, sp, #16
   14bec:	mov	r4, r2
   14bf0:	mov	r5, r1
   14bf4:	mov	r6, r0
   14bf8:	bl	153b8 <__assert_fail@plt+0x43e0>
   14bfc:	cmp	r0, #0
   14c00:	popne	{r4, r5, r6, sl, fp, pc}
   14c04:	cmp	r6, #0
   14c08:	beq	14c1c <__assert_fail@plt+0x3c44>
   14c0c:	cmp	r5, #0
   14c10:	cmpne	r4, #0
   14c14:	bne	14c1c <__assert_fail@plt+0x3c44>
   14c18:	pop	{r4, r5, r6, sl, fp, pc}
   14c1c:	bl	15180 <__assert_fail@plt+0x41a8>
   14c20:	push	{fp, lr}
   14c24:	mov	fp, sp
   14c28:	bl	15218 <__assert_fail@plt+0x4240>
   14c2c:	cmp	r0, #0
   14c30:	popne	{fp, pc}
   14c34:	bl	15180 <__assert_fail@plt+0x41a8>
   14c38:	push	{fp, lr}
   14c3c:	mov	fp, sp
   14c40:	bl	15218 <__assert_fail@plt+0x4240>
   14c44:	cmp	r0, #0
   14c48:	popne	{fp, pc}
   14c4c:	bl	15180 <__assert_fail@plt+0x41a8>
   14c50:	push	{fp, lr}
   14c54:	mov	fp, sp
   14c58:	bl	15218 <__assert_fail@plt+0x4240>
   14c5c:	cmp	r0, #0
   14c60:	popne	{fp, pc}
   14c64:	bl	15180 <__assert_fail@plt+0x41a8>
   14c68:	push	{r4, r5, fp, lr}
   14c6c:	add	fp, sp, #8
   14c70:	mov	r4, r1
   14c74:	mov	r5, r0
   14c78:	bl	15248 <__assert_fail@plt+0x4270>
   14c7c:	cmp	r0, #0
   14c80:	popne	{r4, r5, fp, pc}
   14c84:	cmp	r5, #0
   14c88:	beq	14c98 <__assert_fail@plt+0x3cc0>
   14c8c:	cmp	r4, #0
   14c90:	bne	14c98 <__assert_fail@plt+0x3cc0>
   14c94:	pop	{r4, r5, fp, pc}
   14c98:	bl	15180 <__assert_fail@plt+0x41a8>
   14c9c:	push	{fp, lr}
   14ca0:	mov	fp, sp
   14ca4:	cmp	r1, #0
   14ca8:	orreq	r1, r1, #1
   14cac:	bl	15248 <__assert_fail@plt+0x4270>
   14cb0:	cmp	r0, #0
   14cb4:	popne	{fp, pc}
   14cb8:	bl	15180 <__assert_fail@plt+0x41a8>
   14cbc:	push	{fp, lr}
   14cc0:	mov	fp, sp
   14cc4:	clz	r3, r2
   14cc8:	lsr	ip, r3, #5
   14ccc:	clz	r3, r1
   14cd0:	lsr	r3, r3, #5
   14cd4:	orrs	r3, r3, ip
   14cd8:	movwne	r1, #1
   14cdc:	movwne	r2, #1
   14ce0:	bl	153b8 <__assert_fail@plt+0x43e0>
   14ce4:	cmp	r0, #0
   14ce8:	popne	{fp, pc}
   14cec:	bl	15180 <__assert_fail@plt+0x41a8>
   14cf0:	push	{fp, lr}
   14cf4:	mov	fp, sp
   14cf8:	mov	r2, r1
   14cfc:	mov	r1, r0
   14d00:	mov	r0, #0
   14d04:	bl	153b8 <__assert_fail@plt+0x43e0>
   14d08:	cmp	r0, #0
   14d0c:	popne	{fp, pc}
   14d10:	bl	15180 <__assert_fail@plt+0x41a8>
   14d14:	push	{fp, lr}
   14d18:	mov	fp, sp
   14d1c:	mov	r2, r1
   14d20:	mov	r1, r0
   14d24:	clz	r0, r2
   14d28:	clz	r3, r1
   14d2c:	lsr	r0, r0, #5
   14d30:	lsr	r3, r3, #5
   14d34:	orrs	r0, r3, r0
   14d38:	movwne	r1, #1
   14d3c:	movwne	r2, #1
   14d40:	mov	r0, #0
   14d44:	bl	153b8 <__assert_fail@plt+0x43e0>
   14d48:	cmp	r0, #0
   14d4c:	popne	{fp, pc}
   14d50:	bl	15180 <__assert_fail@plt+0x41a8>
   14d54:	push	{r4, r5, r6, sl, fp, lr}
   14d58:	add	fp, sp, #16
   14d5c:	ldr	r5, [r1]
   14d60:	mov	r4, r1
   14d64:	mov	r6, r0
   14d68:	cmp	r0, #0
   14d6c:	beq	14d84 <__assert_fail@plt+0x3dac>
   14d70:	mov	r0, #1
   14d74:	add	r0, r0, r5, lsr #1
   14d78:	adds	r5, r5, r0
   14d7c:	bcc	14d8c <__assert_fail@plt+0x3db4>
   14d80:	b	14dc8 <__assert_fail@plt+0x3df0>
   14d84:	cmp	r5, #0
   14d88:	movweq	r5, #64	; 0x40
   14d8c:	mov	r0, r6
   14d90:	mov	r1, r5
   14d94:	mov	r2, #1
   14d98:	bl	153b8 <__assert_fail@plt+0x43e0>
   14d9c:	cmp	r5, #0
   14da0:	mov	r1, r5
   14da4:	movwne	r1, #1
   14da8:	cmp	r0, #0
   14dac:	bne	14dc0 <__assert_fail@plt+0x3de8>
   14db0:	clz	r2, r6
   14db4:	lsr	r2, r2, #5
   14db8:	orrs	r1, r2, r1
   14dbc:	bne	14dc8 <__assert_fail@plt+0x3df0>
   14dc0:	str	r5, [r4]
   14dc4:	pop	{r4, r5, r6, sl, fp, pc}
   14dc8:	bl	15180 <__assert_fail@plt+0x41a8>
   14dcc:	push	{r4, r5, r6, r7, fp, lr}
   14dd0:	add	fp, sp, #16
   14dd4:	ldr	r5, [r1]
   14dd8:	mov	r6, r2
   14ddc:	mov	r4, r1
   14de0:	mov	r7, r0
   14de4:	cmp	r0, #0
   14de8:	beq	14e00 <__assert_fail@plt+0x3e28>
   14dec:	mov	r0, #1
   14df0:	add	r0, r0, r5, lsr #1
   14df4:	adds	r5, r5, r0
   14df8:	bcc	14e18 <__assert_fail@plt+0x3e40>
   14dfc:	b	14e4c <__assert_fail@plt+0x3e74>
   14e00:	cmp	r5, #0
   14e04:	bne	14e18 <__assert_fail@plt+0x3e40>
   14e08:	mov	r0, #64	; 0x40
   14e0c:	cmp	r6, #64	; 0x40
   14e10:	udiv	r5, r0, r6
   14e14:	addhi	r5, r5, #1
   14e18:	mov	r0, r7
   14e1c:	mov	r1, r5
   14e20:	mov	r2, r6
   14e24:	bl	153b8 <__assert_fail@plt+0x43e0>
   14e28:	cmp	r0, #0
   14e2c:	bne	14e44 <__assert_fail@plt+0x3e6c>
   14e30:	cmp	r7, #0
   14e34:	beq	14e4c <__assert_fail@plt+0x3e74>
   14e38:	cmp	r6, #0
   14e3c:	cmpne	r5, #0
   14e40:	bne	14e4c <__assert_fail@plt+0x3e74>
   14e44:	str	r5, [r4]
   14e48:	pop	{r4, r5, r6, r7, fp, pc}
   14e4c:	bl	15180 <__assert_fail@plt+0x41a8>
   14e50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e54:	add	fp, sp, #24
   14e58:	mov	r8, r1
   14e5c:	ldr	r1, [r1]
   14e60:	mov	r5, r0
   14e64:	add	r0, r1, r1, asr #1
   14e68:	cmp	r0, r1
   14e6c:	mvnvs	r0, #-2147483648	; 0x80000000
   14e70:	cmp	r0, r3
   14e74:	mov	r7, r0
   14e78:	movgt	r7, r3
   14e7c:	cmn	r3, #1
   14e80:	movle	r7, r0
   14e84:	ldr	r0, [fp, #8]
   14e88:	cmn	r0, #1
   14e8c:	ble	14eb4 <__assert_fail@plt+0x3edc>
   14e90:	cmp	r0, #0
   14e94:	beq	14f08 <__assert_fail@plt+0x3f30>
   14e98:	cmn	r7, #1
   14e9c:	ble	14edc <__assert_fail@plt+0x3f04>
   14ea0:	mvn	r4, #-2147483648	; 0x80000000
   14ea4:	udiv	r6, r4, r0
   14ea8:	cmp	r6, r7
   14eac:	bge	14f08 <__assert_fail@plt+0x3f30>
   14eb0:	b	14f18 <__assert_fail@plt+0x3f40>
   14eb4:	cmn	r7, #1
   14eb8:	ble	14ef8 <__assert_fail@plt+0x3f20>
   14ebc:	cmn	r0, #1
   14ec0:	beq	14f08 <__assert_fail@plt+0x3f30>
   14ec4:	mov	r6, #-2147483648	; 0x80000000
   14ec8:	mvn	r4, #-2147483648	; 0x80000000
   14ecc:	sdiv	r6, r6, r0
   14ed0:	cmp	r6, r7
   14ed4:	bge	14f08 <__assert_fail@plt+0x3f30>
   14ed8:	b	14f18 <__assert_fail@plt+0x3f40>
   14edc:	beq	14f08 <__assert_fail@plt+0x3f30>
   14ee0:	mov	r6, #-2147483648	; 0x80000000
   14ee4:	mvn	r4, #-2147483648	; 0x80000000
   14ee8:	sdiv	r6, r6, r7
   14eec:	cmp	r6, r0
   14ef0:	bge	14f08 <__assert_fail@plt+0x3f30>
   14ef4:	b	14f18 <__assert_fail@plt+0x3f40>
   14ef8:	mvn	r4, #-2147483648	; 0x80000000
   14efc:	sdiv	r6, r4, r0
   14f00:	cmp	r7, r6
   14f04:	blt	14f18 <__assert_fail@plt+0x3f40>
   14f08:	mul	r6, r7, r0
   14f0c:	mov	r4, #64	; 0x40
   14f10:	cmp	r6, #63	; 0x3f
   14f14:	bgt	14f20 <__assert_fail@plt+0x3f48>
   14f18:	sdiv	r7, r4, r0
   14f1c:	mul	r6, r7, r0
   14f20:	cmp	r5, #0
   14f24:	moveq	r4, #0
   14f28:	streq	r4, [r8]
   14f2c:	sub	r4, r7, r1
   14f30:	cmp	r4, r2
   14f34:	bge	14fe0 <__assert_fail@plt+0x4008>
   14f38:	add	r7, r1, r2
   14f3c:	mov	r6, #0
   14f40:	mov	r2, #0
   14f44:	cmp	r7, r3
   14f48:	movwgt	r6, #1
   14f4c:	cmn	r3, #1
   14f50:	movwgt	r2, #1
   14f54:	cmp	r7, r1
   14f58:	bvs	15014 <__assert_fail@plt+0x403c>
   14f5c:	ands	r1, r2, r6
   14f60:	bne	15014 <__assert_fail@plt+0x403c>
   14f64:	cmn	r0, #1
   14f68:	ble	14f90 <__assert_fail@plt+0x3fb8>
   14f6c:	cmp	r0, #0
   14f70:	beq	14fdc <__assert_fail@plt+0x4004>
   14f74:	cmn	r7, #1
   14f78:	ble	14fb4 <__assert_fail@plt+0x3fdc>
   14f7c:	mvn	r1, #-2147483648	; 0x80000000
   14f80:	udiv	r1, r1, r0
   14f84:	cmp	r1, r7
   14f88:	bge	14fdc <__assert_fail@plt+0x4004>
   14f8c:	b	15014 <__assert_fail@plt+0x403c>
   14f90:	cmn	r7, #1
   14f94:	ble	14fcc <__assert_fail@plt+0x3ff4>
   14f98:	cmn	r0, #1
   14f9c:	beq	14fdc <__assert_fail@plt+0x4004>
   14fa0:	mov	r1, #-2147483648	; 0x80000000
   14fa4:	sdiv	r1, r1, r0
   14fa8:	cmp	r1, r7
   14fac:	bge	14fdc <__assert_fail@plt+0x4004>
   14fb0:	b	15014 <__assert_fail@plt+0x403c>
   14fb4:	beq	14fdc <__assert_fail@plt+0x4004>
   14fb8:	mov	r1, #-2147483648	; 0x80000000
   14fbc:	sdiv	r1, r1, r7
   14fc0:	cmp	r1, r0
   14fc4:	bge	14fdc <__assert_fail@plt+0x4004>
   14fc8:	b	15014 <__assert_fail@plt+0x403c>
   14fcc:	mvn	r1, #-2147483648	; 0x80000000
   14fd0:	sdiv	r1, r1, r0
   14fd4:	cmp	r7, r1
   14fd8:	blt	15014 <__assert_fail@plt+0x403c>
   14fdc:	mul	r6, r7, r0
   14fe0:	mov	r0, r5
   14fe4:	mov	r1, r6
   14fe8:	bl	15248 <__assert_fail@plt+0x4270>
   14fec:	cmp	r6, #0
   14ff0:	movwne	r6, #1
   14ff4:	cmp	r0, #0
   14ff8:	bne	1500c <__assert_fail@plt+0x4034>
   14ffc:	clz	r1, r5
   15000:	lsr	r1, r1, #5
   15004:	orrs	r1, r1, r6
   15008:	bne	15014 <__assert_fail@plt+0x403c>
   1500c:	str	r7, [r8]
   15010:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15014:	bl	15180 <__assert_fail@plt+0x41a8>
   15018:	push	{fp, lr}
   1501c:	mov	fp, sp
   15020:	mov	r1, #1
   15024:	bl	151c4 <__assert_fail@plt+0x41ec>
   15028:	cmp	r0, #0
   1502c:	popne	{fp, pc}
   15030:	bl	15180 <__assert_fail@plt+0x41a8>
   15034:	push	{fp, lr}
   15038:	mov	fp, sp
   1503c:	bl	151c4 <__assert_fail@plt+0x41ec>
   15040:	cmp	r0, #0
   15044:	popne	{fp, pc}
   15048:	bl	15180 <__assert_fail@plt+0x41a8>
   1504c:	push	{fp, lr}
   15050:	mov	fp, sp
   15054:	mov	r1, #1
   15058:	bl	151c4 <__assert_fail@plt+0x41ec>
   1505c:	cmp	r0, #0
   15060:	popne	{fp, pc}
   15064:	bl	15180 <__assert_fail@plt+0x41a8>
   15068:	push	{fp, lr}
   1506c:	mov	fp, sp
   15070:	bl	151c4 <__assert_fail@plt+0x41ec>
   15074:	cmp	r0, #0
   15078:	popne	{fp, pc}
   1507c:	bl	15180 <__assert_fail@plt+0x41a8>
   15080:	push	{r4, r5, r6, sl, fp, lr}
   15084:	add	fp, sp, #16
   15088:	mov	r5, r0
   1508c:	mov	r0, r1
   15090:	mov	r4, r1
   15094:	bl	15218 <__assert_fail@plt+0x4240>
   15098:	cmp	r0, #0
   1509c:	beq	150b8 <__assert_fail@plt+0x40e0>
   150a0:	mov	r1, r5
   150a4:	mov	r2, r4
   150a8:	mov	r6, r0
   150ac:	bl	10df8 <memcpy@plt>
   150b0:	mov	r0, r6
   150b4:	pop	{r4, r5, r6, sl, fp, pc}
   150b8:	bl	15180 <__assert_fail@plt+0x41a8>
   150bc:	push	{r4, r5, r6, sl, fp, lr}
   150c0:	add	fp, sp, #16
   150c4:	mov	r5, r0
   150c8:	mov	r0, r1
   150cc:	mov	r4, r1
   150d0:	bl	15218 <__assert_fail@plt+0x4240>
   150d4:	cmp	r0, #0
   150d8:	beq	150f4 <__assert_fail@plt+0x411c>
   150dc:	mov	r1, r5
   150e0:	mov	r2, r4
   150e4:	mov	r6, r0
   150e8:	bl	10df8 <memcpy@plt>
   150ec:	mov	r0, r6
   150f0:	pop	{r4, r5, r6, sl, fp, pc}
   150f4:	bl	15180 <__assert_fail@plt+0x41a8>
   150f8:	push	{r4, r5, r6, sl, fp, lr}
   150fc:	add	fp, sp, #16
   15100:	mov	r5, r0
   15104:	add	r0, r1, #1
   15108:	mov	r4, r1
   1510c:	bl	15218 <__assert_fail@plt+0x4240>
   15110:	cmp	r0, #0
   15114:	beq	1513c <__assert_fail@plt+0x4164>
   15118:	mov	r6, r0
   1511c:	mov	r0, #0
   15120:	mov	r1, r5
   15124:	mov	r2, r4
   15128:	strb	r0, [r6, r4]
   1512c:	mov	r0, r6
   15130:	bl	10df8 <memcpy@plt>
   15134:	mov	r0, r6
   15138:	pop	{r4, r5, r6, sl, fp, pc}
   1513c:	bl	15180 <__assert_fail@plt+0x41a8>
   15140:	push	{r4, r5, r6, sl, fp, lr}
   15144:	add	fp, sp, #16
   15148:	mov	r4, r0
   1514c:	bl	10ee8 <strlen@plt>
   15150:	add	r5, r0, #1
   15154:	mov	r0, r5
   15158:	bl	15218 <__assert_fail@plt+0x4240>
   1515c:	cmp	r0, #0
   15160:	beq	1517c <__assert_fail@plt+0x41a4>
   15164:	mov	r1, r4
   15168:	mov	r2, r5
   1516c:	mov	r6, r0
   15170:	bl	10df8 <memcpy@plt>
   15174:	mov	r0, r6
   15178:	pop	{r4, r5, r6, sl, fp, pc}
   1517c:	bl	15180 <__assert_fail@plt+0x41a8>
   15180:	push	{fp, lr}
   15184:	mov	fp, sp
   15188:	movw	r0, #28908	; 0x70ec
   1518c:	movw	r1, #25268	; 0x62b4
   15190:	mov	r2, #5
   15194:	movt	r0, #2
   15198:	movt	r1, #1
   1519c:	ldr	r4, [r0]
   151a0:	mov	r0, #0
   151a4:	bl	10e1c <dcgettext@plt>
   151a8:	movw	r2, #23541	; 0x5bf5
   151ac:	mov	r3, r0
   151b0:	mov	r0, r4
   151b4:	mov	r1, #0
   151b8:	movt	r2, #1
   151bc:	bl	10e88 <error@plt>
   151c0:	bl	10fc0 <abort@plt>
   151c4:	clz	r2, r1
   151c8:	clz	r3, r0
   151cc:	lsr	r2, r2, #5
   151d0:	lsr	r3, r3, #5
   151d4:	orrs	r2, r3, r2
   151d8:	movwne	r1, #1
   151dc:	movwne	r0, #1
   151e0:	cmp	r1, #0
   151e4:	beq	15214 <__assert_fail@plt+0x423c>
   151e8:	mvn	r2, #-2147483648	; 0x80000000
   151ec:	udiv	r2, r2, r1
   151f0:	cmp	r2, r0
   151f4:	bcs	15214 <__assert_fail@plt+0x423c>
   151f8:	push	{fp, lr}
   151fc:	mov	fp, sp
   15200:	bl	10ef4 <__errno_location@plt>
   15204:	mov	r1, #12
   15208:	str	r1, [r0]
   1520c:	mov	r0, #0
   15210:	pop	{fp, pc}
   15214:	b	10d98 <calloc@plt>
   15218:	cmp	r0, #0
   1521c:	movweq	r0, #1
   15220:	cmn	r0, #1
   15224:	ble	1522c <__assert_fail@plt+0x4254>
   15228:	b	10e94 <malloc@plt>
   1522c:	push	{fp, lr}
   15230:	mov	fp, sp
   15234:	bl	10ef4 <__errno_location@plt>
   15238:	mov	r1, #12
   1523c:	str	r1, [r0]
   15240:	mov	r0, #0
   15244:	pop	{fp, pc}
   15248:	push	{fp, lr}
   1524c:	mov	fp, sp
   15250:	cmp	r0, #0
   15254:	beq	15270 <__assert_fail@plt+0x4298>
   15258:	cmp	r1, #0
   1525c:	beq	1527c <__assert_fail@plt+0x42a4>
   15260:	cmn	r1, #1
   15264:	ble	15288 <__assert_fail@plt+0x42b0>
   15268:	pop	{fp, lr}
   1526c:	b	10e28 <realloc@plt>
   15270:	mov	r0, r1
   15274:	pop	{fp, lr}
   15278:	b	15218 <__assert_fail@plt+0x4240>
   1527c:	bl	12500 <__assert_fail@plt+0x1528>
   15280:	mov	r0, #0
   15284:	pop	{fp, pc}
   15288:	bl	10ef4 <__errno_location@plt>
   1528c:	mov	r1, #12
   15290:	str	r1, [r0]
   15294:	mov	r0, #0
   15298:	pop	{fp, pc}
   1529c:	push	{r4, r5, r6, sl, fp, lr}
   152a0:	add	fp, sp, #16
   152a4:	mov	r4, r0
   152a8:	bl	10e70 <__fpending@plt>
   152ac:	ldr	r6, [r4]
   152b0:	mov	r5, r0
   152b4:	mov	r0, r4
   152b8:	bl	123fc <__assert_fail@plt+0x1424>
   152bc:	tst	r6, #32
   152c0:	bne	152f8 <__assert_fail@plt+0x4320>
   152c4:	cmp	r0, #0
   152c8:	mov	r4, r0
   152cc:	mvnne	r4, #0
   152d0:	cmp	r5, #0
   152d4:	bne	15304 <__assert_fail@plt+0x432c>
   152d8:	cmp	r0, #0
   152dc:	beq	15304 <__assert_fail@plt+0x432c>
   152e0:	bl	10ef4 <__errno_location@plt>
   152e4:	ldr	r0, [r0]
   152e8:	subs	r4, r0, #9
   152ec:	mvnne	r4, #0
   152f0:	mov	r0, r4
   152f4:	pop	{r4, r5, r6, sl, fp, pc}
   152f8:	mvn	r4, #0
   152fc:	cmp	r0, #0
   15300:	beq	1530c <__assert_fail@plt+0x4334>
   15304:	mov	r0, r4
   15308:	pop	{r4, r5, r6, sl, fp, pc}
   1530c:	bl	10ef4 <__errno_location@plt>
   15310:	mov	r1, #0
   15314:	str	r1, [r0]
   15318:	mov	r0, r4
   1531c:	pop	{r4, r5, r6, sl, fp, pc}
   15320:	push	{fp, lr}
   15324:	mov	fp, sp
   15328:	mov	r0, #14
   1532c:	bl	10f84 <nl_langinfo@plt>
   15330:	movw	r1, #23119	; 0x5a4f
   15334:	cmp	r0, #0
   15338:	movt	r1, #1
   1533c:	movne	r1, r0
   15340:	movw	r0, #25285	; 0x62c5
   15344:	ldrb	r2, [r1]
   15348:	movt	r0, #1
   1534c:	cmp	r2, #0
   15350:	movne	r0, r1
   15354:	pop	{fp, pc}
   15358:	push	{r4, r5, r6, r7, fp, lr}
   1535c:	add	fp, sp, #16
   15360:	sub	sp, sp, #8
   15364:	add	r5, sp, #4
   15368:	cmp	r0, #0
   1536c:	mov	r7, r2
   15370:	mov	r4, r1
   15374:	movne	r5, r0
   15378:	mov	r0, r5
   1537c:	bl	10e7c <mbrtowc@plt>
   15380:	mov	r6, r0
   15384:	cmp	r7, #0
   15388:	beq	153ac <__assert_fail@plt+0x43d4>
   1538c:	cmn	r6, #2
   15390:	bcc	153ac <__assert_fail@plt+0x43d4>
   15394:	mov	r0, #0
   15398:	bl	153f4 <__assert_fail@plt+0x441c>
   1539c:	cmp	r0, #0
   153a0:	ldrbeq	r0, [r4]
   153a4:	moveq	r6, #1
   153a8:	streq	r0, [r5]
   153ac:	mov	r0, r6
   153b0:	sub	sp, fp, #16
   153b4:	pop	{r4, r5, r6, r7, fp, pc}
   153b8:	cmp	r2, #0
   153bc:	beq	153ec <__assert_fail@plt+0x4414>
   153c0:	mvn	r3, #0
   153c4:	udiv	r3, r3, r2
   153c8:	cmp	r3, r1
   153cc:	bcs	153ec <__assert_fail@plt+0x4414>
   153d0:	push	{fp, lr}
   153d4:	mov	fp, sp
   153d8:	bl	10ef4 <__errno_location@plt>
   153dc:	mov	r1, #12
   153e0:	str	r1, [r0]
   153e4:	mov	r0, #0
   153e8:	pop	{fp, pc}
   153ec:	mul	r1, r2, r1
   153f0:	b	15248 <__assert_fail@plt+0x4270>
   153f4:	push	{r4, sl, fp, lr}
   153f8:	add	fp, sp, #8
   153fc:	sub	sp, sp, #264	; 0x108
   15400:	add	r1, sp, #7
   15404:	movw	r2, #257	; 0x101
   15408:	bl	15458 <__assert_fail@plt+0x4480>
   1540c:	mov	r4, #0
   15410:	cmp	r0, #0
   15414:	bne	1544c <__assert_fail@plt+0x4474>
   15418:	movw	r1, #25291	; 0x62cb
   1541c:	add	r0, sp, #7
   15420:	movt	r1, #1
   15424:	bl	10dbc <strcmp@plt>
   15428:	cmp	r0, #0
   1542c:	beq	1544c <__assert_fail@plt+0x4474>
   15430:	movw	r1, #25293	; 0x62cd
   15434:	add	r0, sp, #7
   15438:	movt	r1, #1
   1543c:	bl	10dbc <strcmp@plt>
   15440:	mov	r4, r0
   15444:	cmp	r0, #0
   15448:	movwne	r4, #1
   1544c:	mov	r0, r4
   15450:	sub	sp, fp, #8
   15454:	pop	{r4, sl, fp, pc}
   15458:	push	{r4, r5, r6, r7, fp, lr}
   1545c:	add	fp, sp, #16
   15460:	mov	r4, r1
   15464:	mov	r1, #0
   15468:	mov	r6, r2
   1546c:	bl	10f6c <setlocale@plt>
   15470:	cmp	r0, #0
   15474:	beq	154a4 <__assert_fail@plt+0x44cc>
   15478:	mov	r7, r0
   1547c:	bl	10ee8 <strlen@plt>
   15480:	cmp	r0, r6
   15484:	bcs	154c4 <__assert_fail@plt+0x44ec>
   15488:	add	r2, r0, #1
   1548c:	mov	r0, r4
   15490:	mov	r1, r7
   15494:	bl	10df8 <memcpy@plt>
   15498:	mov	r5, #0
   1549c:	mov	r0, r5
   154a0:	pop	{r4, r5, r6, r7, fp, pc}
   154a4:	cmp	r6, #0
   154a8:	mov	r5, #22
   154ac:	movne	r0, #0
   154b0:	strbne	r0, [r4]
   154b4:	movne	r0, r5
   154b8:	popne	{r4, r5, r6, r7, fp, pc}
   154bc:	mov	r0, r5
   154c0:	pop	{r4, r5, r6, r7, fp, pc}
   154c4:	mov	r5, #34	; 0x22
   154c8:	cmp	r6, #0
   154cc:	beq	154ec <__assert_fail@plt+0x4514>
   154d0:	sub	r6, r6, #1
   154d4:	mov	r0, r4
   154d8:	mov	r1, r7
   154dc:	mov	r2, r6
   154e0:	bl	10df8 <memcpy@plt>
   154e4:	mov	r0, #0
   154e8:	strb	r0, [r4, r6]
   154ec:	mov	r0, r5
   154f0:	pop	{r4, r5, r6, r7, fp, pc}
   154f4:	mov	r1, #0
   154f8:	b	10f6c <setlocale@plt>
   154fc:	cmp	r3, #0
   15500:	cmpeq	r2, #0
   15504:	bne	1551c <__assert_fail@plt+0x4544>
   15508:	cmp	r1, #0
   1550c:	cmpeq	r0, #0
   15510:	mvnne	r1, #0
   15514:	mvnne	r0, #0
   15518:	b	15538 <__assert_fail@plt+0x4560>
   1551c:	sub	sp, sp, #8
   15520:	push	{sp, lr}
   15524:	bl	15548 <__assert_fail@plt+0x4570>
   15528:	ldr	lr, [sp, #4]
   1552c:	add	sp, sp, #8
   15530:	pop	{r2, r3}
   15534:	bx	lr
   15538:	push	{r1, lr}
   1553c:	mov	r0, #8
   15540:	bl	10db0 <raise@plt>
   15544:	pop	{r1, pc}
   15548:	cmp	r1, r3
   1554c:	cmpeq	r0, r2
   15550:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15554:	mov	r4, r0
   15558:	movcc	r0, #0
   1555c:	mov	r5, r1
   15560:	ldr	lr, [sp, #36]	; 0x24
   15564:	movcc	r1, r0
   15568:	bcc	15664 <__assert_fail@plt+0x468c>
   1556c:	cmp	r3, #0
   15570:	clzeq	ip, r2
   15574:	clzne	ip, r3
   15578:	addeq	ip, ip, #32
   1557c:	cmp	r5, #0
   15580:	clzeq	r1, r4
   15584:	addeq	r1, r1, #32
   15588:	clzne	r1, r5
   1558c:	sub	ip, ip, r1
   15590:	sub	sl, ip, #32
   15594:	lsl	r9, r3, ip
   15598:	rsb	fp, ip, #32
   1559c:	orr	r9, r9, r2, lsl sl
   155a0:	orr	r9, r9, r2, lsr fp
   155a4:	lsl	r8, r2, ip
   155a8:	cmp	r5, r9
   155ac:	cmpeq	r4, r8
   155b0:	movcc	r0, #0
   155b4:	movcc	r1, r0
   155b8:	bcc	155d4 <__assert_fail@plt+0x45fc>
   155bc:	mov	r0, #1
   155c0:	subs	r4, r4, r8
   155c4:	lsl	r1, r0, sl
   155c8:	orr	r1, r1, r0, lsr fp
   155cc:	lsl	r0, r0, ip
   155d0:	sbc	r5, r5, r9
   155d4:	cmp	ip, #0
   155d8:	beq	15664 <__assert_fail@plt+0x468c>
   155dc:	lsr	r6, r8, #1
   155e0:	orr	r6, r6, r9, lsl #31
   155e4:	lsr	r7, r9, #1
   155e8:	mov	r2, ip
   155ec:	b	15610 <__assert_fail@plt+0x4638>
   155f0:	subs	r3, r4, r6
   155f4:	sbc	r8, r5, r7
   155f8:	adds	r3, r3, r3
   155fc:	adc	r8, r8, r8
   15600:	adds	r4, r3, #1
   15604:	adc	r5, r8, #0
   15608:	subs	r2, r2, #1
   1560c:	beq	1562c <__assert_fail@plt+0x4654>
   15610:	cmp	r5, r7
   15614:	cmpeq	r4, r6
   15618:	bcs	155f0 <__assert_fail@plt+0x4618>
   1561c:	adds	r4, r4, r4
   15620:	adc	r5, r5, r5
   15624:	subs	r2, r2, #1
   15628:	bne	15610 <__assert_fail@plt+0x4638>
   1562c:	lsr	r3, r4, ip
   15630:	orr	r3, r3, r5, lsl fp
   15634:	lsr	r2, r5, ip
   15638:	orr	r3, r3, r5, lsr sl
   1563c:	adds	r0, r0, r4
   15640:	mov	r4, r3
   15644:	lsl	r3, r2, ip
   15648:	orr	r3, r3, r4, lsl sl
   1564c:	lsl	ip, r4, ip
   15650:	orr	r3, r3, r4, lsr fp
   15654:	adc	r1, r1, r5
   15658:	subs	r0, r0, ip
   1565c:	mov	r5, r2
   15660:	sbc	r1, r1, r3
   15664:	cmp	lr, #0
   15668:	strdne	r4, [lr]
   1566c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15670:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15674:	mov	r7, r0
   15678:	ldr	r6, [pc, #72]	; 156c8 <__assert_fail@plt+0x46f0>
   1567c:	ldr	r5, [pc, #72]	; 156cc <__assert_fail@plt+0x46f4>
   15680:	add	r6, pc, r6
   15684:	add	r5, pc, r5
   15688:	sub	r6, r6, r5
   1568c:	mov	r8, r1
   15690:	mov	r9, r2
   15694:	bl	10d78 <calloc@plt-0x20>
   15698:	asrs	r6, r6, #2
   1569c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   156a0:	mov	r4, #0
   156a4:	add	r4, r4, #1
   156a8:	ldr	r3, [r5], #4
   156ac:	mov	r2, r9
   156b0:	mov	r1, r8
   156b4:	mov	r0, r7
   156b8:	blx	r3
   156bc:	cmp	r6, r4
   156c0:	bne	156a4 <__assert_fail@plt+0x46cc>
   156c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   156c8:	andeq	r1, r1, r4, lsl #17
   156cc:	andeq	r1, r1, ip, ror r8
   156d0:	bx	lr
   156d4:	ldr	r3, [pc, #12]	; 156e8 <__assert_fail@plt+0x4710>
   156d8:	mov	r1, #0
   156dc:	add	r3, pc, r3
   156e0:	ldr	r2, [r3]
   156e4:	b	10f00 <__cxa_atexit@plt>
   156e8:	strdeq	r1, [r1], -r8

Disassembly of section .fini:

000156ec <.fini>:
   156ec:	push	{r3, lr}
   156f0:	pop	{r3, pc}
