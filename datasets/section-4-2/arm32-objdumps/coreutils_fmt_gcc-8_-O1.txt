
../repos/coreutils/src/fmt:     file format elf32-littlearm


Disassembly of section .init:

00010c84 <.init>:
   10c84:	push	{r3, lr}
   10c88:	bl	10f50 <__assert_fail@plt+0x48>
   10c8c:	pop	{r3, pc}

Disassembly of section .plt:

00010c90 <calloc@plt-0x14>:
   10c90:	push	{lr}		; (str lr, [sp, #-4]!)
   10c94:	ldr	lr, [pc, #4]	; 10ca0 <calloc@plt-0x4>
   10c98:	add	lr, pc, lr
   10c9c:	ldr	pc, [lr, #8]!
   10ca0:	andeq	r7, r1, r0, ror #6

00010ca4 <calloc@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #94208	; 0x17000
   10cac:	ldr	pc, [ip, #864]!	; 0x360

00010cb0 <fputs_unlocked@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #94208	; 0x17000
   10cb8:	ldr	pc, [ip, #856]!	; 0x358

00010cbc <strcmp@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #94208	; 0x17000
   10cc4:	ldr	pc, [ip, #848]!	; 0x350

00010cc8 <posix_fadvise64@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #94208	; 0x17000
   10cd0:	ldr	pc, [ip, #840]!	; 0x348

00010cd4 <fflush@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #94208	; 0x17000
   10cdc:	ldr	pc, [ip, #832]!	; 0x340

00010ce0 <__memmove_chk@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #94208	; 0x17000
   10ce8:	ldr	pc, [ip, #824]!	; 0x338

00010cec <free@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #94208	; 0x17000
   10cf4:	ldr	pc, [ip, #816]!	; 0x330

00010cf8 <_exit@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #94208	; 0x17000
   10d00:	ldr	pc, [ip, #808]!	; 0x328

00010d04 <memcpy@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #94208	; 0x17000
   10d0c:	ldr	pc, [ip, #800]!	; 0x320

00010d10 <__strtoull_internal@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #94208	; 0x17000
   10d18:	ldr	pc, [ip, #792]!	; 0x318

00010d1c <mbsinit@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #94208	; 0x17000
   10d24:	ldr	pc, [ip, #784]!	; 0x310

00010d28 <fwrite_unlocked@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #94208	; 0x17000
   10d30:	ldr	pc, [ip, #776]!	; 0x308

00010d34 <memcmp@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #94208	; 0x17000
   10d3c:	ldr	pc, [ip, #768]!	; 0x300

00010d40 <fputc_unlocked@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #94208	; 0x17000
   10d48:	ldr	pc, [ip, #760]!	; 0x2f8

00010d4c <dcgettext@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #94208	; 0x17000
   10d54:	ldr	pc, [ip, #752]!	; 0x2f0

00010d58 <realloc@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #94208	; 0x17000
   10d60:	ldr	pc, [ip, #744]!	; 0x2e8

00010d64 <textdomain@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #94208	; 0x17000
   10d6c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d70 <iswprint@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #94208	; 0x17000
   10d78:	ldr	pc, [ip, #728]!	; 0x2d8

00010d7c <fwrite@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #94208	; 0x17000
   10d84:	ldr	pc, [ip, #720]!	; 0x2d0

00010d88 <lseek64@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #94208	; 0x17000
   10d90:	ldr	pc, [ip, #712]!	; 0x2c8

00010d94 <__ctype_get_mb_cur_max@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #94208	; 0x17000
   10d9c:	ldr	pc, [ip, #704]!	; 0x2c0

00010da0 <__fpending@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #94208	; 0x17000
   10da8:	ldr	pc, [ip, #696]!	; 0x2b8

00010dac <mbrtowc@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #94208	; 0x17000
   10db4:	ldr	pc, [ip, #688]!	; 0x2b0

00010db8 <error@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #94208	; 0x17000
   10dc0:	ldr	pc, [ip, #680]!	; 0x2a8

00010dc4 <malloc@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #94208	; 0x17000
   10dcc:	ldr	pc, [ip, #672]!	; 0x2a0

00010dd0 <__libc_start_main@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #94208	; 0x17000
   10dd8:	ldr	pc, [ip, #664]!	; 0x298

00010ddc <__freading@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #94208	; 0x17000
   10de4:	ldr	pc, [ip, #656]!	; 0x290

00010de8 <__gmon_start__@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #94208	; 0x17000
   10df0:	ldr	pc, [ip, #648]!	; 0x288

00010df4 <getopt_long@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #94208	; 0x17000
   10dfc:	ldr	pc, [ip, #640]!	; 0x280

00010e00 <__ctype_b_loc@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #94208	; 0x17000
   10e08:	ldr	pc, [ip, #632]!	; 0x278

00010e0c <exit@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #94208	; 0x17000
   10e14:	ldr	pc, [ip, #624]!	; 0x270

00010e18 <strlen@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #94208	; 0x17000
   10e20:	ldr	pc, [ip, #616]!	; 0x268

00010e24 <strchr@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #94208	; 0x17000
   10e2c:	ldr	pc, [ip, #608]!	; 0x260

00010e30 <__errno_location@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #94208	; 0x17000
   10e38:	ldr	pc, [ip, #600]!	; 0x258

00010e3c <__cxa_atexit@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #94208	; 0x17000
   10e44:	ldr	pc, [ip, #592]!	; 0x250

00010e48 <memset@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #94208	; 0x17000
   10e50:	ldr	pc, [ip, #584]!	; 0x248

00010e54 <__printf_chk@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #94208	; 0x17000
   10e5c:	ldr	pc, [ip, #576]!	; 0x240

00010e60 <fileno@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #94208	; 0x17000
   10e68:	ldr	pc, [ip, #568]!	; 0x238

00010e6c <__fprintf_chk@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #94208	; 0x17000
   10e74:	ldr	pc, [ip, #560]!	; 0x230

00010e78 <fclose@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #94208	; 0x17000
   10e80:	ldr	pc, [ip, #552]!	; 0x228

00010e84 <fseeko64@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #94208	; 0x17000
   10e8c:	ldr	pc, [ip, #544]!	; 0x220

00010e90 <__uflow@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #94208	; 0x17000
   10e98:	ldr	pc, [ip, #536]!	; 0x218

00010e9c <__overflow@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #94208	; 0x17000
   10ea4:	ldr	pc, [ip, #528]!	; 0x210

00010ea8 <setlocale@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #94208	; 0x17000
   10eb0:	ldr	pc, [ip, #520]!	; 0x208

00010eb4 <strrchr@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #512]!	; 0x200

00010ec0 <nl_langinfo@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #504]!	; 0x1f8

00010ecc <clearerr_unlocked@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #496]!	; 0x1f0

00010ed8 <fopen64@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #488]!	; 0x1e8

00010ee4 <bindtextdomain@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #480]!	; 0x1e0

00010ef0 <strncmp@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #472]!	; 0x1d8

00010efc <abort@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #464]!	; 0x1d0

00010f08 <__assert_fail@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #456]!	; 0x1c8

Disassembly of section .text:

00010f14 <.text>:
   10f14:	mov	fp, #0
   10f18:	mov	lr, #0
   10f1c:	pop	{r1}		; (ldr r1, [sp], #4)
   10f20:	mov	r2, sp
   10f24:	push	{r2}		; (str r2, [sp, #-4]!)
   10f28:	push	{r0}		; (str r0, [sp, #-4]!)
   10f2c:	ldr	ip, [pc, #16]	; 10f44 <__assert_fail@plt+0x3c>
   10f30:	push	{ip}		; (str ip, [sp, #-4]!)
   10f34:	ldr	r0, [pc, #12]	; 10f48 <__assert_fail@plt+0x40>
   10f38:	ldr	r3, [pc, #12]	; 10f4c <__assert_fail@plt+0x44>
   10f3c:	bl	10dd0 <__libc_start_main@plt>
   10f40:	bl	10efc <abort@plt>
   10f44:	andeq	r6, r1, ip, ror #17
   10f48:	andeq	r2, r1, r8, ror r5
   10f4c:	andeq	r6, r1, ip, lsl #17
   10f50:	ldr	r3, [pc, #20]	; 10f6c <__assert_fail@plt+0x64>
   10f54:	ldr	r2, [pc, #20]	; 10f70 <__assert_fail@plt+0x68>
   10f58:	add	r3, pc, r3
   10f5c:	ldr	r2, [r3, r2]
   10f60:	cmp	r2, #0
   10f64:	bxeq	lr
   10f68:	b	10de8 <__gmon_start__@plt>
   10f6c:	andeq	r7, r1, r0, lsr #1
   10f70:	ldrdeq	r0, [r0], -ip
   10f74:	ldr	r0, [pc, #24]	; 10f94 <__assert_fail@plt+0x8c>
   10f78:	ldr	r3, [pc, #24]	; 10f98 <__assert_fail@plt+0x90>
   10f7c:	cmp	r3, r0
   10f80:	bxeq	lr
   10f84:	ldr	r3, [pc, #16]	; 10f9c <__assert_fail@plt+0x94>
   10f88:	cmp	r3, #0
   10f8c:	bxeq	lr
   10f90:	bx	r3
   10f94:	andeq	r8, r2, r0, lsr r1
   10f98:	andeq	r8, r2, r0, lsr r1
   10f9c:	andeq	r0, r0, r0
   10fa0:	ldr	r0, [pc, #36]	; 10fcc <__assert_fail@plt+0xc4>
   10fa4:	ldr	r1, [pc, #36]	; 10fd0 <__assert_fail@plt+0xc8>
   10fa8:	sub	r1, r1, r0
   10fac:	asr	r1, r1, #2
   10fb0:	add	r1, r1, r1, lsr #31
   10fb4:	asrs	r1, r1, #1
   10fb8:	bxeq	lr
   10fbc:	ldr	r3, [pc, #16]	; 10fd4 <__assert_fail@plt+0xcc>
   10fc0:	cmp	r3, #0
   10fc4:	bxeq	lr
   10fc8:	bx	r3
   10fcc:	andeq	r8, r2, r0, lsr r1
   10fd0:	andeq	r8, r2, r0, lsr r1
   10fd4:	andeq	r0, r0, r0
   10fd8:	push	{r4, lr}
   10fdc:	ldr	r4, [pc, #24]	; 10ffc <__assert_fail@plt+0xf4>
   10fe0:	ldrb	r3, [r4]
   10fe4:	cmp	r3, #0
   10fe8:	popne	{r4, pc}
   10fec:	bl	10f74 <__assert_fail@plt+0x6c>
   10ff0:	mov	r3, #1
   10ff4:	strb	r3, [r4]
   10ff8:	pop	{r4, pc}
   10ffc:	andeq	r8, r2, r4, asr r1
   11000:	b	10fa0 <__assert_fail@plt+0x98>
   11004:	movw	r3, #33112	; 0x8158
   11008:	movt	r3, #2
   1100c:	ldrb	r3, [r3]
   11010:	cmp	r3, #0
   11014:	beq	1102c <__assert_fail@plt+0x124>
   11018:	movw	r3, #33112	; 0x8158
   1101c:	movt	r3, #2
   11020:	ldr	r2, [r3, #8]
   11024:	str	r2, [r3, #4]
   11028:	bx	lr
   1102c:	movw	r3, #33112	; 0x8158
   11030:	movt	r3, #2
   11034:	ldrb	r3, [r3, #12]
   11038:	cmp	r3, #0
   1103c:	beq	11064 <__assert_fail@plt+0x15c>
   11040:	cmp	r0, #0
   11044:	movw	r3, #33112	; 0x8158
   11048:	movt	r3, #2
   1104c:	ldrne	r2, [r3, #16]
   11050:	ldreq	r2, [r3, #8]
   11054:	movw	r3, #33112	; 0x8158
   11058:	movt	r3, #2
   1105c:	str	r2, [r3, #4]
   11060:	bx	lr
   11064:	movw	r3, #33112	; 0x8158
   11068:	movt	r3, #2
   1106c:	ldrb	r3, [r3, #20]
   11070:	cmp	r3, #0
   11074:	beq	110dc <__assert_fail@plt+0x1d4>
   11078:	cmp	r0, #0
   1107c:	beq	110a8 <__assert_fail@plt+0x1a0>
   11080:	movw	r3, #33112	; 0x8158
   11084:	movt	r3, #2
   11088:	ldr	r2, [r3, #16]
   1108c:	ldr	r3, [r3, #8]
   11090:	cmp	r2, r3
   11094:	beq	110a8 <__assert_fail@plt+0x1a0>
   11098:	movw	r3, #33112	; 0x8158
   1109c:	movt	r3, #2
   110a0:	str	r2, [r3, #4]
   110a4:	bx	lr
   110a8:	movw	r3, #33112	; 0x8158
   110ac:	movt	r3, #2
   110b0:	ldr	r2, [r3, #8]
   110b4:	ldr	r3, [r3, #4]
   110b8:	cmp	r3, r2
   110bc:	bne	110ec <__assert_fail@plt+0x1e4>
   110c0:	cmp	r2, #0
   110c4:	moveq	r2, #3
   110c8:	movne	r2, #0
   110cc:	movw	r3, #33112	; 0x8158
   110d0:	movt	r3, #2
   110d4:	str	r2, [r3, #4]
   110d8:	bx	lr
   110dc:	movw	r3, #33112	; 0x8158
   110e0:	movt	r3, #2
   110e4:	ldr	r2, [r3, #8]
   110e8:	str	r2, [r3, #4]
   110ec:	bx	lr
   110f0:	movw	r3, #33112	; 0x8158
   110f4:	movt	r3, #2
   110f8:	ldr	r2, [r3, #24]
   110fc:	ldr	r3, [r3, #28]
   11100:	cmp	r2, r3
   11104:	beq	11110 <__assert_fail@plt+0x208>
   11108:	mov	r0, #0
   1110c:	bx	lr
   11110:	movw	r3, #33112	; 0x8158
   11114:	movt	r3, #2
   11118:	ldr	r1, [r3, #32]
   1111c:	add	r2, r2, r1
   11120:	ldr	r3, [r3, #16]
   11124:	cmp	r2, r3
   11128:	bgt	11140 <__assert_fail@plt+0x238>
   1112c:	cmp	r0, #10
   11130:	cmnne	r0, #1
   11134:	movne	r0, #1
   11138:	moveq	r0, #0
   1113c:	bx	lr
   11140:	mov	r0, #0
   11144:	bx	lr
   11148:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1114c:	strd	r6, [sp, #8]
   11150:	strd	r8, [sp, #16]
   11154:	strd	sl, [sp, #24]
   11158:	str	lr, [sp, #32]
   1115c:	sub	sp, sp, #12
   11160:	movw	r3, #33112	; 0x8158
   11164:	movt	r3, #2
   11168:	ldr	lr, [r3, #36]	; 0x24
   1116c:	mov	r2, #0
   11170:	str	r2, [lr, #20]
   11174:	ldr	r2, [lr, #4]
   11178:	str	r2, [sp, #4]
   1117c:	ldr	r7, [r3, #40]	; 0x28
   11180:	str	r7, [lr, #4]
   11184:	sub	ip, lr, #28
   11188:	movw	r3, #33196	; 0x81ac
   1118c:	movt	r3, #2
   11190:	cmp	ip, r3
   11194:	bcc	11338 <__assert_fail@plt+0x430>
   11198:	movw	r3, #33112	; 0x8158
   1119c:	movt	r3, #2
   111a0:	ldr	fp, [r3, #4]
   111a4:	ldr	r2, [r3, #8]
   111a8:	str	r2, [sp]
   111ac:	ldr	r8, [r3, #44]	; 0x2c
   111b0:	ldr	r9, [r3, #48]	; 0x30
   111b4:	movw	r6, #33196	; 0x81ac
   111b8:	movt	r6, #2
   111bc:	mov	r5, #100	; 0x64
   111c0:	b	112d0 <__assert_fail@plt+0x3c8>
   111c4:	cmp	r9, #0
   111c8:	ble	1124c <__assert_fail@plt+0x344>
   111cc:	sub	r0, r1, r9
   111d0:	mul	r0, r0, r0
   111d4:	mul	r0, r5, r0
   111d8:	add	r2, r2, r0, asr #1
   111dc:	b	1124c <__assert_fail@plt+0x344>
   111e0:	cmp	lr, r3
   111e4:	beq	11264 <__assert_fail@plt+0x35c>
   111e8:	ldr	r2, [r3, #-20]	; 0xffffffec
   111ec:	ldr	r0, [r3, #4]
   111f0:	add	r2, r2, r0
   111f4:	add	r1, r1, r2
   111f8:	cmp	r7, r1
   111fc:	ble	11264 <__assert_fail@plt+0x35c>
   11200:	add	r3, r3, #28
   11204:	cmp	lr, r3
   11208:	moveq	r2, #0
   1120c:	beq	1123c <__assert_fail@plt+0x334>
   11210:	sub	r2, r8, r1
   11214:	mul	r2, r2, r2
   11218:	mul	r2, r5, r2
   1121c:	ldr	r0, [r3, #24]
   11220:	cmp	lr, r0
   11224:	beq	1123c <__assert_fail@plt+0x334>
   11228:	ldr	r0, [r3, #16]
   1122c:	sub	r0, r1, r0
   11230:	mul	r0, r0, r0
   11234:	mul	r0, r5, r0
   11238:	add	r2, r2, r0, asr #1
   1123c:	ldr	r0, [r3, #20]
   11240:	add	r2, r2, r0
   11244:	cmp	ip, r6
   11248:	beq	111c4 <__assert_fail@plt+0x2bc>
   1124c:	cmp	r2, r4
   11250:	bge	111e0 <__assert_fail@plt+0x2d8>
   11254:	str	r3, [ip, #24]
   11258:	str	r1, [ip, #16]
   1125c:	mov	r4, r2
   11260:	b	111e0 <__assert_fail@plt+0x2d8>
   11264:	cmp	ip, r6
   11268:	movwls	r3, #4900	; 0x1324
   1126c:	bls	11294 <__assert_fail@plt+0x38c>
   11270:	ldrb	r3, [ip, #-16]
   11274:	tst	r3, #2
   11278:	beq	112f0 <__assert_fail@plt+0x3e8>
   1127c:	and	r3, r3, #8
   11280:	movw	r2, #37220	; 0x9164
   11284:	movt	r2, #5
   11288:	cmp	r3, #0
   1128c:	movne	r3, #2400	; 0x960
   11290:	moveq	r3, r2
   11294:	ldrb	r2, [ip, #12]
   11298:	tst	r2, #1
   1129c:	subne	r3, r3, #1600	; 0x640
   112a0:	bne	112bc <__assert_fail@plt+0x3b4>
   112a4:	tst	r2, #8
   112a8:	beq	112bc <__assert_fail@plt+0x3b4>
   112ac:	add	sl, sl, #2
   112b0:	movw	r2, #22500	; 0x57e4
   112b4:	sdiv	sl, r2, sl
   112b8:	add	r3, r3, sl
   112bc:	add	r4, r4, r3
   112c0:	str	r4, [ip, #20]
   112c4:	sub	ip, ip, #28
   112c8:	cmp	ip, r6
   112cc:	bcc	11338 <__assert_fail@plt+0x430>
   112d0:	ldr	r1, [sp]
   112d4:	cmp	ip, r6
   112d8:	movne	r1, fp
   112dc:	ldr	sl, [ip, #4]
   112e0:	add	r1, sl, r1
   112e4:	mov	r3, ip
   112e8:	mvn	r4, #-2147483648	; 0x80000000
   112ec:	b	11200 <__assert_fail@plt+0x2f8>
   112f0:	tst	r3, #4
   112f4:	movwne	r3, #3300	; 0xce4
   112f8:	bne	11294 <__assert_fail@plt+0x38c>
   112fc:	ldr	r3, [pc, #88]	; 1135c <__assert_fail@plt+0x454>
   11300:	cmp	ip, r3
   11304:	movwls	r3, #4900	; 0x1324
   11308:	bls	11294 <__assert_fail@plt+0x38c>
   1130c:	ldrb	r3, [ip, #-44]	; 0xffffffd4
   11310:	tst	r3, #8
   11314:	movweq	r3, #4900	; 0x1324
   11318:	beq	11294 <__assert_fail@plt+0x38c>
   1131c:	ldr	r3, [ip, #-24]	; 0xffffffe8
   11320:	add	r3, r3, #2
   11324:	movw	r2, #40000	; 0x9c40
   11328:	sdiv	r3, r2, r3
   1132c:	add	r3, r3, #4864	; 0x1300
   11330:	add	r3, r3, #36	; 0x24
   11334:	b	11294 <__assert_fail@plt+0x38c>
   11338:	ldr	r3, [sp, #4]
   1133c:	str	r3, [lr, #4]
   11340:	add	sp, sp, #12
   11344:	ldrd	r4, [sp]
   11348:	ldrd	r6, [sp, #8]
   1134c:	ldrd	r8, [sp, #16]
   11350:	ldrd	sl, [sp, #24]
   11354:	add	sp, sp, #32
   11358:	pop	{pc}		; (ldr pc, [sp], #4)
   1135c:	andeq	r8, r2, r8, asr #3
   11360:	strd	r4, [sp, #-16]!
   11364:	str	r6, [sp, #8]
   11368:	str	lr, [sp, #12]
   1136c:	mov	r4, r0
   11370:	mov	r0, r1
   11374:	movw	r5, #33112	; 0x8158
   11378:	movt	r5, #2
   1137c:	mov	r6, #1
   11380:	b	113ac <__assert_fail@plt+0x4a4>
   11384:	ldr	r3, [r5, #16]
   11388:	add	r3, r3, #1
   1138c:	str	r3, [r5, #16]
   11390:	ldr	r3, [r4, #4]
   11394:	ldr	r2, [r4, #8]
   11398:	cmp	r3, r2
   1139c:	bcs	113e0 <__assert_fail@plt+0x4d8>
   113a0:	add	r2, r3, #1
   113a4:	str	r2, [r4, #4]
   113a8:	ldrb	r0, [r3]
   113ac:	cmp	r0, #32
   113b0:	beq	11384 <__assert_fail@plt+0x47c>
   113b4:	cmp	r0, #9
   113b8:	bne	113ec <__assert_fail@plt+0x4e4>
   113bc:	strb	r6, [r5, #52]	; 0x34
   113c0:	ldr	r3, [r5, #16]
   113c4:	add	r2, r3, #7
   113c8:	cmp	r3, #0
   113cc:	movlt	r3, r2
   113d0:	bic	r3, r3, #7
   113d4:	add	r3, r3, #8
   113d8:	str	r3, [r5, #16]
   113dc:	b	11390 <__assert_fail@plt+0x488>
   113e0:	mov	r0, r4
   113e4:	bl	10e90 <__uflow@plt>
   113e8:	b	113ac <__assert_fail@plt+0x4a4>
   113ec:	ldrd	r4, [sp]
   113f0:	ldr	r6, [sp, #8]
   113f4:	add	sp, sp, #12
   113f8:	pop	{pc}		; (ldr pc, [sp], #4)
   113fc:	strd	r4, [sp, #-16]!
   11400:	str	r6, [sp, #8]
   11404:	str	lr, [sp, #12]
   11408:	mov	r4, r0
   1140c:	movw	r3, #33112	; 0x8158
   11410:	movt	r3, #2
   11414:	mov	r2, #0
   11418:	str	r2, [r3, #16]
   1141c:	ldr	r3, [r0, #4]
   11420:	ldr	r2, [r0, #8]
   11424:	cmp	r3, r2
   11428:	bcs	11480 <__assert_fail@plt+0x578>
   1142c:	add	r2, r3, #1
   11430:	str	r2, [r0, #4]
   11434:	ldrb	r1, [r3]
   11438:	mov	r0, r4
   1143c:	bl	11360 <__assert_fail@plt+0x458>
   11440:	movw	r3, #33112	; 0x8158
   11444:	movt	r3, #2
   11448:	ldr	r3, [r3, #56]	; 0x38
   1144c:	cmp	r3, #0
   11450:	bne	1148c <__assert_fail@plt+0x584>
   11454:	movw	r3, #33112	; 0x8158
   11458:	movt	r3, #2
   1145c:	ldr	r2, [r3, #16]
   11460:	ldr	r1, [r3, #60]	; 0x3c
   11464:	cmp	r2, r1
   11468:	movge	r2, r1
   1146c:	str	r2, [r3, #24]
   11470:	ldrd	r4, [sp]
   11474:	ldr	r6, [sp, #8]
   11478:	add	sp, sp, #12
   1147c:	pop	{pc}		; (ldr pc, [sp], #4)
   11480:	bl	10e90 <__uflow@plt>
   11484:	mov	r1, r0
   11488:	b	11438 <__assert_fail@plt+0x530>
   1148c:	movw	r3, #33112	; 0x8158
   11490:	movt	r3, #2
   11494:	ldr	r2, [r3, #16]
   11498:	str	r2, [r3, #24]
   1149c:	ldr	r6, [r3, #64]	; 0x40
   114a0:	ldrb	r3, [r6]
   114a4:	cmp	r3, #0
   114a8:	beq	11508 <__assert_fail@plt+0x600>
   114ac:	cmp	r0, r3
   114b0:	bne	11470 <__assert_fail@plt+0x568>
   114b4:	movw	r5, #33112	; 0x8158
   114b8:	movt	r5, #2
   114bc:	ldr	r3, [r5, #16]
   114c0:	add	r3, r3, #1
   114c4:	str	r3, [r5, #16]
   114c8:	ldr	r3, [r4, #4]
   114cc:	ldr	r2, [r4, #8]
   114d0:	cmp	r3, r2
   114d4:	bcs	114fc <__assert_fail@plt+0x5f4>
   114d8:	add	r2, r3, #1
   114dc:	str	r2, [r4, #4]
   114e0:	ldrb	r0, [r3]
   114e4:	ldrb	r3, [r6, #1]!
   114e8:	cmp	r3, #0
   114ec:	beq	11508 <__assert_fail@plt+0x600>
   114f0:	cmp	r3, r0
   114f4:	beq	114bc <__assert_fail@plt+0x5b4>
   114f8:	b	11470 <__assert_fail@plt+0x568>
   114fc:	mov	r0, r4
   11500:	bl	10e90 <__uflow@plt>
   11504:	b	114e4 <__assert_fail@plt+0x5dc>
   11508:	mov	r1, r0
   1150c:	mov	r0, r4
   11510:	bl	11360 <__assert_fail@plt+0x458>
   11514:	b	11470 <__assert_fail@plt+0x568>
   11518:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1151c:	strd	r6, [sp, #8]
   11520:	str	r8, [sp, #16]
   11524:	str	lr, [sp, #20]
   11528:	mov	r7, r0
   1152c:	ldr	r4, [r0]
   11530:	ldr	r5, [r0, #4]
   11534:	cmp	r5, #0
   11538:	beq	11574 <__assert_fail@plt+0x66c>
   1153c:	add	r5, r4, r5
   11540:	movw	r6, #33100	; 0x814c
   11544:	movt	r6, #2
   11548:	ldrb	r1, [r4], #1
   1154c:	ldr	r0, [r6]
   11550:	ldr	r3, [r0, #20]
   11554:	ldr	r2, [r0, #24]
   11558:	cmp	r3, r2
   1155c:	addcc	r2, r3, #1
   11560:	strcc	r2, [r0, #20]
   11564:	strbcc	r1, [r3]
   11568:	bcs	115a0 <__assert_fail@plt+0x698>
   1156c:	cmp	r5, r4
   11570:	bne	11548 <__assert_fail@plt+0x640>
   11574:	movw	r3, #33112	; 0x8158
   11578:	movt	r3, #2
   1157c:	ldr	r2, [r7, #4]
   11580:	ldr	r1, [r3, #68]	; 0x44
   11584:	add	r2, r2, r1
   11588:	str	r2, [r3, #68]	; 0x44
   1158c:	ldrd	r4, [sp]
   11590:	ldrd	r6, [sp, #8]
   11594:	ldr	r8, [sp, #16]
   11598:	add	sp, sp, #20
   1159c:	pop	{pc}		; (ldr pc, [sp], #4)
   115a0:	bl	10e9c <__overflow@plt>
   115a4:	b	1156c <__assert_fail@plt+0x664>
   115a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   115ac:	strd	r6, [sp, #8]
   115b0:	str	r8, [sp, #16]
   115b4:	str	lr, [sp, #20]
   115b8:	movw	r3, #33112	; 0x8158
   115bc:	movt	r3, #2
   115c0:	ldr	r2, [r3, #68]	; 0x44
   115c4:	add	r4, r2, r0
   115c8:	ldrb	r3, [r3, #52]	; 0x34
   115cc:	cmp	r3, #0
   115d0:	beq	115f4 <__assert_fail@plt+0x6ec>
   115d4:	add	r5, r4, #7
   115d8:	cmp	r4, #0
   115dc:	movge	r5, r4
   115e0:	asr	r5, r5, #3
   115e4:	lsl	r3, r5, #3
   115e8:	add	r1, r2, #1
   115ec:	cmp	r1, r3
   115f0:	blt	11664 <__assert_fail@plt+0x75c>
   115f4:	movw	r3, #33112	; 0x8158
   115f8:	movt	r3, #2
   115fc:	ldr	r3, [r3, #68]	; 0x44
   11600:	cmp	r4, r3
   11604:	ble	11650 <__assert_fail@plt+0x748>
   11608:	movw	r6, #33100	; 0x814c
   1160c:	movt	r6, #2
   11610:	mov	r7, #32
   11614:	movw	r5, #33112	; 0x8158
   11618:	movt	r5, #2
   1161c:	ldr	r0, [r6]
   11620:	ldr	r3, [r0, #20]
   11624:	ldr	r2, [r0, #24]
   11628:	cmp	r3, r2
   1162c:	addcc	r2, r3, #1
   11630:	strcc	r2, [r0, #20]
   11634:	strbcc	r7, [r3]
   11638:	bcs	116d8 <__assert_fail@plt+0x7d0>
   1163c:	ldr	r3, [r5, #68]	; 0x44
   11640:	add	r3, r3, #1
   11644:	str	r3, [r5, #68]	; 0x44
   11648:	cmp	r3, r4
   1164c:	blt	1161c <__assert_fail@plt+0x714>
   11650:	ldrd	r4, [sp]
   11654:	ldrd	r6, [sp, #8]
   11658:	ldr	r8, [sp, #16]
   1165c:	add	sp, sp, #20
   11660:	pop	{pc}		; (ldr pc, [sp], #4)
   11664:	cmp	r2, r3
   11668:	bge	115f4 <__assert_fail@plt+0x6ec>
   1166c:	movw	r7, #33100	; 0x814c
   11670:	movt	r7, #2
   11674:	mov	r8, #9
   11678:	movw	r6, #33112	; 0x8158
   1167c:	movt	r6, #2
   11680:	ldr	r0, [r7]
   11684:	ldr	r3, [r0, #20]
   11688:	ldr	r2, [r0, #24]
   1168c:	cmp	r3, r2
   11690:	addcc	r2, r3, #1
   11694:	strcc	r2, [r0, #20]
   11698:	strbcc	r8, [r3]
   1169c:	bcs	116cc <__assert_fail@plt+0x7c4>
   116a0:	ldr	r3, [r6, #68]	; 0x44
   116a4:	add	r2, r3, #7
   116a8:	cmp	r3, #0
   116ac:	movlt	r3, r2
   116b0:	asr	r3, r3, #3
   116b4:	add	r3, r3, #1
   116b8:	lsl	r2, r3, #3
   116bc:	str	r2, [r6, #68]	; 0x44
   116c0:	cmp	r5, r3
   116c4:	bgt	11680 <__assert_fail@plt+0x778>
   116c8:	b	115f4 <__assert_fail@plt+0x6ec>
   116cc:	mov	r1, r8
   116d0:	bl	10e9c <__overflow@plt>
   116d4:	b	116a0 <__assert_fail@plt+0x798>
   116d8:	mov	r1, r7
   116dc:	bl	10e9c <__overflow@plt>
   116e0:	b	1163c <__assert_fail@plt+0x734>
   116e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   116e8:	strd	r6, [sp, #8]
   116ec:	str	r8, [sp, #16]
   116f0:	str	lr, [sp, #20]
   116f4:	mov	r6, r0
   116f8:	mov	r5, r1
   116fc:	movw	r4, #33112	; 0x8158
   11700:	movt	r4, #2
   11704:	mov	r3, #0
   11708:	str	r3, [r4, #68]	; 0x44
   1170c:	ldr	r0, [r4, #28]
   11710:	bl	115a8 <__assert_fail@plt+0x6a0>
   11714:	movw	r3, #33100	; 0x814c
   11718:	movt	r3, #2
   1171c:	ldr	r1, [r3]
   11720:	ldr	r0, [r4, #64]	; 0x40
   11724:	bl	10cb0 <fputs_unlocked@plt>
   11728:	ldr	r0, [r4, #68]	; 0x44
   1172c:	ldr	r3, [r4, #56]	; 0x38
   11730:	add	r0, r0, r3
   11734:	str	r0, [r4, #68]	; 0x44
   11738:	sub	r0, r5, r0
   1173c:	bl	115a8 <__assert_fail@plt+0x6a0>
   11740:	ldr	r7, [r6, #24]
   11744:	sub	r5, r7, #28
   11748:	cmp	r6, r5
   1174c:	beq	11798 <__assert_fail@plt+0x890>
   11750:	mov	r4, r6
   11754:	mov	r0, r4
   11758:	bl	11518 <__assert_fail@plt+0x610>
   1175c:	ldr	r0, [r4, #8]
   11760:	bl	115a8 <__assert_fail@plt+0x6a0>
   11764:	add	r4, r4, #28
   11768:	cmp	r5, r4
   1176c:	bne	11754 <__assert_fail@plt+0x84c>
   11770:	sub	r7, r7, r6
   11774:	sub	r5, r7, #56	; 0x38
   11778:	lsr	r7, r5, #2
   1177c:	movw	r5, #28087	; 0x6db7
   11780:	movt	r5, #14043	; 0x36db
   11784:	mul	r5, r5, r7
   11788:	bic	r5, r5, #-1073741824	; 0xc0000000
   1178c:	add	r5, r5, #1
   11790:	rsb	r5, r5, r5, lsl #3
   11794:	add	r5, r6, r5, lsl #2
   11798:	mov	r0, r5
   1179c:	bl	11518 <__assert_fail@plt+0x610>
   117a0:	movw	r3, #33112	; 0x8158
   117a4:	movt	r3, #2
   117a8:	ldr	r2, [r3, #68]	; 0x44
   117ac:	str	r2, [r3, #48]	; 0x30
   117b0:	movw	r3, #33100	; 0x814c
   117b4:	movt	r3, #2
   117b8:	ldr	r0, [r3]
   117bc:	ldr	r3, [r0, #20]
   117c0:	ldr	r2, [r0, #24]
   117c4:	cmp	r3, r2
   117c8:	addcc	r2, r3, #1
   117cc:	strcc	r2, [r0, #20]
   117d0:	movcc	r2, #10
   117d4:	strbcc	r2, [r3]
   117d8:	bcs	117f0 <__assert_fail@plt+0x8e8>
   117dc:	ldrd	r4, [sp]
   117e0:	ldrd	r6, [sp, #8]
   117e4:	ldr	r8, [sp, #16]
   117e8:	add	sp, sp, #20
   117ec:	pop	{pc}		; (ldr pc, [sp], #4)
   117f0:	mov	r1, #10
   117f4:	bl	10e9c <__overflow@plt>
   117f8:	b	117dc <__assert_fail@plt+0x8d4>
   117fc:	strd	r4, [sp, #-16]!
   11800:	str	r6, [sp, #8]
   11804:	str	lr, [sp, #12]
   11808:	mov	r6, r0
   1180c:	movw	r3, #33112	; 0x8158
   11810:	movt	r3, #2
   11814:	movw	r4, #33196	; 0x81ac
   11818:	movt	r4, #2
   1181c:	ldr	r1, [r3, #8]
   11820:	mov	r0, r4
   11824:	bl	116e4 <__assert_fail@plt+0x7dc>
   11828:	ldr	r4, [r4, #24]
   1182c:	cmp	r4, r6
   11830:	beq	11854 <__assert_fail@plt+0x94c>
   11834:	movw	r5, #33112	; 0x8158
   11838:	movt	r5, #2
   1183c:	ldr	r1, [r5, #4]
   11840:	mov	r0, r4
   11844:	bl	116e4 <__assert_fail@plt+0x7dc>
   11848:	ldr	r4, [r4, #24]
   1184c:	cmp	r6, r4
   11850:	bne	1183c <__assert_fail@plt+0x934>
   11854:	ldrd	r4, [sp]
   11858:	ldr	r6, [sp, #8]
   1185c:	add	sp, sp, #12
   11860:	pop	{pc}		; (ldr pc, [sp], #4)
   11864:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11868:	strd	r6, [sp, #8]
   1186c:	str	r8, [sp, #16]
   11870:	str	lr, [sp, #20]
   11874:	movw	r3, #33112	; 0x8158
   11878:	movt	r3, #2
   1187c:	ldr	r5, [r3, #36]	; 0x24
   11880:	movw	r3, #33196	; 0x81ac
   11884:	movt	r3, #2
   11888:	cmp	r5, r3
   1188c:	beq	119b0 <__assert_fail@plt+0xaa8>
   11890:	bl	11148 <__assert_fail@plt+0x240>
   11894:	movw	r3, #33196	; 0x81ac
   11898:	movt	r3, #2
   1189c:	ldr	r1, [r3, #24]
   118a0:	cmp	r5, r1
   118a4:	beq	119e8 <__assert_fail@plt+0xae0>
   118a8:	mov	r4, r5
   118ac:	mvn	r3, #-2147483648	; 0x80000000
   118b0:	ldr	r0, [r1, #24]
   118b4:	ldr	r2, [r1, #20]
   118b8:	ldr	ip, [r0, #20]
   118bc:	sub	r2, r2, ip
   118c0:	cmp	r2, r3
   118c4:	movge	r1, r4
   118c8:	cmp	r2, r3
   118cc:	movlt	r3, r2
   118d0:	mov	r4, r1
   118d4:	cmn	r3, #-2147483638	; 0x8000000a
   118d8:	addle	r3, r3, #9
   118dc:	mov	r1, r0
   118e0:	cmp	r5, r0
   118e4:	bne	118b0 <__assert_fail@plt+0x9a8>
   118e8:	mov	r0, r4
   118ec:	bl	117fc <__assert_fail@plt+0x8f4>
   118f0:	ldr	r1, [r4]
   118f4:	movw	r6, #33112	; 0x8158
   118f8:	movt	r6, #2
   118fc:	ldr	r7, [r6, #72]	; 0x48
   11900:	movw	r5, #61196	; 0xef0c
   11904:	movt	r5, #2
   11908:	movw	r3, #5000	; 0x1388
   1190c:	sub	r2, r7, r1
   11910:	mov	r0, r5
   11914:	bl	10ce0 <__memmove_chk@plt>
   11918:	ldr	r0, [r4]
   1191c:	sub	r0, r5, r0
   11920:	add	r7, r7, r0
   11924:	str	r7, [r6, #72]	; 0x48
   11928:	ldr	r5, [r6, #36]	; 0x24
   1192c:	cmp	r5, r4
   11930:	bcc	11950 <__assert_fail@plt+0xa48>
   11934:	add	r3, r4, #28
   11938:	ldr	r1, [r3, #-28]	; 0xffffffe4
   1193c:	add	r1, r1, r0
   11940:	str	r1, [r3, #-28]	; 0xffffffe4
   11944:	cmp	r3, r5
   11948:	add	r3, r3, #28
   1194c:	bls	11938 <__assert_fail@plt+0xa30>
   11950:	sub	r2, r5, r4
   11954:	asr	r3, r2, #2
   11958:	movw	r2, #28087	; 0x6db7
   1195c:	movt	r2, #46811	; 0xb6db
   11960:	mul	r2, r2, r3
   11964:	add	r2, r2, #1
   11968:	rsb	r2, r2, r2, lsl #3
   1196c:	movw	r6, #33196	; 0x81ac
   11970:	movt	r6, #2
   11974:	movw	r3, #28000	; 0x6d60
   11978:	lsl	r2, r2, #2
   1197c:	mov	r1, r4
   11980:	mov	r0, r6
   11984:	bl	10ce0 <__memmove_chk@plt>
   11988:	movw	r3, #33112	; 0x8158
   1198c:	movt	r3, #2
   11990:	sub	r1, r4, r6
   11994:	sub	r1, r5, r1
   11998:	str	r1, [r3, #36]	; 0x24
   1199c:	ldrd	r4, [sp]
   119a0:	ldrd	r6, [sp, #8]
   119a4:	ldr	r8, [sp, #16]
   119a8:	add	sp, sp, #20
   119ac:	pop	{pc}		; (ldr pc, [sp], #4)
   119b0:	movw	r3, #33100	; 0x814c
   119b4:	movt	r3, #2
   119b8:	movw	r5, #33112	; 0x8158
   119bc:	movt	r5, #2
   119c0:	ldr	r2, [r5, #72]	; 0x48
   119c4:	movw	r4, #61196	; 0xef0c
   119c8:	movt	r4, #2
   119cc:	ldr	r3, [r3]
   119d0:	sub	r2, r2, r4
   119d4:	mov	r1, #1
   119d8:	mov	r0, r4
   119dc:	bl	10d28 <fwrite_unlocked@plt>
   119e0:	str	r4, [r5, #72]	; 0x48
   119e4:	b	1199c <__assert_fail@plt+0xa94>
   119e8:	mov	r4, r1
   119ec:	b	118e8 <__assert_fail@plt+0x9e0>
   119f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   119f4:	strd	r6, [sp, #8]
   119f8:	strd	r8, [sp, #16]
   119fc:	strd	sl, [sp, #24]
   11a00:	str	lr, [sp, #32]
   11a04:	sub	sp, sp, #12
   11a08:	mov	r8, r0
   11a0c:	mov	r6, r1
   11a10:	movw	r5, #33112	; 0x8158
   11a14:	movt	r5, #2
   11a18:	ldr	sl, [pc, #640]	; 11ca0 <__assert_fail@plt+0xd98>
   11a1c:	b	11c68 <__assert_fail@plt+0xd60>
   11a20:	ldr	r3, [r5, #72]	; 0x48
   11a24:	add	r2, r3, #1
   11a28:	str	r2, [r5, #72]	; 0x48
   11a2c:	strb	r6, [r3]
   11a30:	ldr	r3, [r8, #4]
   11a34:	ldr	r2, [r8, #8]
   11a38:	cmp	r3, r2
   11a3c:	bcs	11a80 <__assert_fail@plt+0xb78>
   11a40:	add	r2, r3, #1
   11a44:	str	r2, [r8, #4]
   11a48:	ldrb	r6, [r3]
   11a4c:	bl	10e00 <__ctype_b_loc@plt>
   11a50:	ldr	r2, [r0]
   11a54:	lsl	r3, r6, #1
   11a58:	ldrh	r3, [r2, r3]
   11a5c:	tst	r3, #8192	; 0x2000
   11a60:	bne	11a94 <__assert_fail@plt+0xb8c>
   11a64:	ldr	r3, [r5, #72]	; 0x48
   11a68:	cmp	r3, sl
   11a6c:	bne	11a20 <__assert_fail@plt+0xb18>
   11a70:	mov	r0, r4
   11a74:	bl	11004 <__assert_fail@plt+0xfc>
   11a78:	bl	11864 <__assert_fail@plt+0x95c>
   11a7c:	b	11a20 <__assert_fail@plt+0xb18>
   11a80:	mov	r0, r8
   11a84:	bl	10e90 <__uflow@plt>
   11a88:	mov	r6, r0
   11a8c:	cmn	r0, #1
   11a90:	bne	11a4c <__assert_fail@plt+0xb44>
   11a94:	ldr	fp, [r5, #36]	; 0x24
   11a98:	ldr	r9, [fp]
   11a9c:	ldr	r3, [r5, #72]	; 0x48
   11aa0:	sub	r3, r3, r9
   11aa4:	str	r3, [fp, #4]
   11aa8:	ldr	r2, [r5, #16]
   11aac:	add	r2, r3, r2
   11ab0:	str	r2, [sp, #4]
   11ab4:	str	r2, [r5, #16]
   11ab8:	sub	r3, r3, #1
   11abc:	add	r7, r9, r3
   11ac0:	ldrb	r4, [r9, r3]
   11ac4:	ldrb	r1, [r9]
   11ac8:	movw	r0, #27132	; 0x69fc
   11acc:	movt	r0, #1
   11ad0:	bl	10e24 <strchr@plt>
   11ad4:	adds	r0, r0, #0
   11ad8:	movne	r0, #1
   11adc:	ldrb	r3, [fp, #12]
   11ae0:	bfi	r3, r0, #0, #1
   11ae4:	strb	r3, [fp, #12]
   11ae8:	bl	10e00 <__ctype_b_loc@plt>
   11aec:	ldr	r3, [r0]
   11af0:	lsl	r4, r4, #1
   11af4:	ldrh	r3, [r3, r4]
   11af8:	ubfx	r3, r3, #2, #1
   11afc:	ldrb	r2, [fp, #12]
   11b00:	bfi	r2, r3, #2, #1
   11b04:	strb	r2, [fp, #12]
   11b08:	cmp	r9, r7
   11b0c:	bcs	11b48 <__assert_fail@plt+0xc40>
   11b10:	mov	r4, r7
   11b14:	movw	r3, #27140	; 0x6a04
   11b18:	movt	r3, #1
   11b1c:	str	r3, [sp]
   11b20:	mov	r7, r4
   11b24:	sub	r4, r4, #1
   11b28:	ldrb	r1, [r7]
   11b2c:	ldr	r0, [sp]
   11b30:	bl	10e24 <strchr@plt>
   11b34:	cmp	r0, #0
   11b38:	beq	11b48 <__assert_fail@plt+0xc40>
   11b3c:	mov	r7, r4
   11b40:	cmp	r4, r9
   11b44:	bne	11b20 <__assert_fail@plt+0xc18>
   11b48:	ldrb	r1, [r7]
   11b4c:	movw	r0, #27148	; 0x6a0c
   11b50:	movt	r0, #1
   11b54:	bl	10e24 <strchr@plt>
   11b58:	adds	r0, r0, #0
   11b5c:	movne	r0, #1
   11b60:	ldrb	r3, [fp, #12]
   11b64:	bfi	r3, r0, #1, #1
   11b68:	strb	r3, [fp, #12]
   11b6c:	mov	r1, r6
   11b70:	mov	r0, r8
   11b74:	bl	11360 <__assert_fail@plt+0x458>
   11b78:	mov	r6, r0
   11b7c:	ldr	r3, [r5, #36]	; 0x24
   11b80:	ldr	r2, [r5, #16]
   11b84:	ldr	r1, [sp, #4]
   11b88:	sub	r2, r2, r1
   11b8c:	str	r2, [r3, #8]
   11b90:	cmn	r0, #1
   11b94:	beq	11c20 <__assert_fail@plt+0xd18>
   11b98:	ldrb	r1, [r3, #12]
   11b9c:	tst	r1, #2
   11ba0:	beq	11bd8 <__assert_fail@plt+0xcd0>
   11ba4:	cmp	r0, #10
   11ba8:	movne	r1, #0
   11bac:	moveq	r1, #1
   11bb0:	cmp	r2, #1
   11bb4:	movle	r2, r1
   11bb8:	orrgt	r2, r1, #1
   11bbc:	cmp	r2, #0
   11bc0:	movne	r1, #1
   11bc4:	bne	11bdc <__assert_fail@plt+0xcd4>
   11bc8:	ldrb	r2, [r3, #12]
   11bcc:	bfc	r2, #3, #1
   11bd0:	strb	r2, [r3, #12]
   11bd4:	b	11bf0 <__assert_fail@plt+0xce8>
   11bd8:	mov	r1, #0
   11bdc:	ldrb	r2, [r3, #12]
   11be0:	bfi	r2, r1, #3, #1
   11be4:	strb	r2, [r3, #12]
   11be8:	cmp	r6, #10
   11bec:	beq	11c2c <__assert_fail@plt+0xd24>
   11bf0:	ldrb	r2, [r5, #76]	; 0x4c
   11bf4:	cmp	r2, #0
   11bf8:	bne	11c2c <__assert_fail@plt+0xd24>
   11bfc:	ldr	r2, [pc, #160]	; 11ca4 <__assert_fail@plt+0xd9c>
   11c00:	cmp	r3, r2
   11c04:	addne	r3, r3, #28
   11c08:	strne	r3, [r5, #36]	; 0x24
   11c0c:	bne	11c68 <__assert_fail@plt+0xd60>
   11c10:	mov	r0, #1
   11c14:	bl	11004 <__assert_fail@plt+0xfc>
   11c18:	bl	11864 <__assert_fail@plt+0x95c>
   11c1c:	b	11c50 <__assert_fail@plt+0xd48>
   11c20:	ldrb	r2, [r3, #12]
   11c24:	orr	r2, r2, #8
   11c28:	strb	r2, [r3, #12]
   11c2c:	ldrb	r2, [r3, #12]
   11c30:	and	r2, r2, #8
   11c34:	cmp	r2, #0
   11c38:	movne	r2, #2
   11c3c:	moveq	r2, #1
   11c40:	str	r2, [r3, #8]
   11c44:	ldr	r2, [pc, #88]	; 11ca4 <__assert_fail@plt+0xd9c>
   11c48:	cmp	r3, r2
   11c4c:	beq	11c10 <__assert_fail@plt+0xd08>
   11c50:	ldr	r3, [r5, #36]	; 0x24
   11c54:	add	r3, r3, #28
   11c58:	str	r3, [r5, #36]	; 0x24
   11c5c:	cmp	r6, #10
   11c60:	cmnne	r6, #1
   11c64:	beq	11c7c <__assert_fail@plt+0xd74>
   11c68:	ldr	r3, [r5, #36]	; 0x24
   11c6c:	ldr	r2, [r5, #72]	; 0x48
   11c70:	str	r2, [r3]
   11c74:	mov	r4, #1
   11c78:	b	11a64 <__assert_fail@plt+0xb5c>
   11c7c:	mov	r0, r8
   11c80:	bl	113fc <__assert_fail@plt+0x4f4>
   11c84:	add	sp, sp, #12
   11c88:	ldrd	r4, [sp]
   11c8c:	ldrd	r6, [sp, #8]
   11c90:	ldrd	r8, [sp, #16]
   11c94:	ldrd	sl, [sp, #24]
   11c98:	add	sp, sp, #32
   11c9c:	pop	{pc}		; (ldr pc, [sp], #4)
   11ca0:	muleq	r3, r4, r2
   11ca4:	ldrdeq	lr, [r2], -r4
   11ca8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11cac:	strd	r6, [sp, #8]
   11cb0:	strd	r8, [sp, #16]
   11cb4:	strd	sl, [sp, #24]
   11cb8:	str	lr, [sp, #32]
   11cbc:	sub	sp, sp, #4
   11cc0:	mov	r7, r0
   11cc4:	mov	fp, r1
   11cc8:	mov	r1, #2
   11ccc:	bl	12cd8 <__assert_fail@plt+0x1dd0>
   11cd0:	movw	r4, #33112	; 0x8158
   11cd4:	movt	r4, #2
   11cd8:	mov	r3, #0
   11cdc:	strb	r3, [r4, #52]	; 0x34
   11ce0:	str	r3, [r4, #4]
   11ce4:	mov	r0, r7
   11ce8:	bl	113fc <__assert_fail@plt+0x4f4>
   11cec:	str	r0, [r4, #80]	; 0x50
   11cf0:	movw	r4, #33112	; 0x8158
   11cf4:	movt	r4, #2
   11cf8:	mov	r9, #0
   11cfc:	mov	sl, r9
   11d00:	movw	r8, #33100	; 0x814c
   11d04:	movt	r8, #2
   11d08:	b	120a4 <__assert_fail@plt+0x119c>
   11d0c:	str	r9, [r4, #68]	; 0x44
   11d10:	ldr	r0, [r4, #24]
   11d14:	ldr	r3, [r4, #16]
   11d18:	cmp	r3, r0
   11d1c:	bgt	11e18 <__assert_fail@plt+0xf10>
   11d20:	cmp	r5, #10
   11d24:	cmnne	r5, #1
   11d28:	bne	11da8 <__assert_fail@plt+0xea0>
   11d2c:	cmn	r5, #1
   11d30:	beq	11eb4 <__assert_fail@plt+0xfac>
   11d34:	ldr	r0, [r8]
   11d38:	ldr	r3, [r0, #20]
   11d3c:	ldr	r2, [r0, #24]
   11d40:	cmp	r3, r2
   11d44:	addcc	r2, r3, #1
   11d48:	strcc	r2, [r0, #20]
   11d4c:	movcc	r2, #10
   11d50:	strbcc	r2, [r3]
   11d54:	bcs	11fdc <__assert_fail@plt+0x10d4>
   11d58:	mov	r0, r7
   11d5c:	bl	113fc <__assert_fail@plt+0x4f4>
   11d60:	mov	r5, r0
   11d64:	cmn	r5, #1
   11d68:	cmpne	r5, #10
   11d6c:	beq	11d0c <__assert_fail@plt+0xe04>
   11d70:	ldr	r2, [r4, #24]
   11d74:	ldr	r3, [r4, #60]	; 0x3c
   11d78:	cmp	r2, r3
   11d7c:	blt	11d94 <__assert_fail@plt+0xe8c>
   11d80:	ldr	r1, [r4, #16]
   11d84:	ldr	r3, [r4, #32]
   11d88:	add	r3, r2, r3
   11d8c:	cmp	r3, r1
   11d90:	ble	11fe8 <__assert_fail@plt+0x10e0>
   11d94:	str	r9, [r4, #68]	; 0x44
   11d98:	ldr	r0, [r4, #24]
   11d9c:	ldr	r3, [r4, #16]
   11da0:	cmp	r3, r0
   11da4:	bgt	11e18 <__assert_fail@plt+0xf10>
   11da8:	bl	115a8 <__assert_fail@plt+0x6a0>
   11dac:	ldr	r6, [r4, #64]	; 0x40
   11db0:	ldr	r3, [r4, #68]	; 0x44
   11db4:	ldr	r0, [r4, #16]
   11db8:	cmp	r3, r0
   11dbc:	moveq	r3, r0
   11dc0:	beq	11f58 <__assert_fail@plt+0x1050>
   11dc4:	ldrb	r1, [r6]
   11dc8:	cmp	r1, #0
   11dcc:	beq	11f58 <__assert_fail@plt+0x1050>
   11dd0:	ldr	r0, [r8]
   11dd4:	ldr	r3, [r0, #20]
   11dd8:	ldr	r2, [r0, #24]
   11ddc:	cmp	r3, r2
   11de0:	addcc	r2, r3, #1
   11de4:	strcc	r2, [r0, #20]
   11de8:	strbcc	r1, [r3]
   11dec:	bcs	11e40 <__assert_fail@plt+0xf38>
   11df0:	ldr	r3, [r4, #68]	; 0x44
   11df4:	add	r3, r3, #1
   11df8:	str	r3, [r4, #68]	; 0x44
   11dfc:	ldr	r0, [r4, #16]
   11e00:	cmp	r3, r0
   11e04:	beq	11e50 <__assert_fail@plt+0xf48>
   11e08:	ldrb	r1, [r6, #1]!
   11e0c:	cmp	r1, #0
   11e10:	bne	11dd0 <__assert_fail@plt+0xec8>
   11e14:	b	11e54 <__assert_fail@plt+0xf4c>
   11e18:	bl	115a8 <__assert_fail@plt+0x6a0>
   11e1c:	ldr	r6, [r4, #64]	; 0x40
   11e20:	ldr	r3, [r4, #68]	; 0x44
   11e24:	ldr	r0, [r4, #16]
   11e28:	cmp	r3, r0
   11e2c:	beq	11e48 <__assert_fail@plt+0xf40>
   11e30:	ldrb	r1, [r6]
   11e34:	cmp	r1, #0
   11e38:	bne	11dd0 <__assert_fail@plt+0xec8>
   11e3c:	b	11e54 <__assert_fail@plt+0xf4c>
   11e40:	bl	10e9c <__overflow@plt>
   11e44:	b	11df0 <__assert_fail@plt+0xee8>
   11e48:	mov	r3, r0
   11e4c:	b	11e54 <__assert_fail@plt+0xf4c>
   11e50:	mov	r3, r0
   11e54:	cmp	r5, #10
   11e58:	cmnne	r5, #1
   11e5c:	bne	11f58 <__assert_fail@plt+0x1050>
   11e60:	cmn	r5, #1
   11e64:	bne	11d2c <__assert_fail@plt+0xe24>
   11e68:	movw	r3, #33112	; 0x8158
   11e6c:	movt	r3, #2
   11e70:	ldr	r2, [r3, #24]
   11e74:	ldr	r1, [r3, #56]	; 0x38
   11e78:	add	r2, r2, r1
   11e7c:	ldr	r3, [r3, #16]
   11e80:	cmp	r2, r3
   11e84:	bgt	11eb4 <__assert_fail@plt+0xfac>
   11e88:	movw	r3, #33100	; 0x814c
   11e8c:	movt	r3, #2
   11e90:	ldr	r0, [r3]
   11e94:	ldr	r3, [r0, #20]
   11e98:	ldr	r2, [r0, #24]
   11e9c:	cmp	r3, r2
   11ea0:	addcc	r2, r3, #1
   11ea4:	strcc	r2, [r0, #20]
   11ea8:	movcc	r2, #10
   11eac:	strbcc	r2, [r3]
   11eb0:	bcs	11f6c <__assert_fail@plt+0x1064>
   11eb4:	movw	r3, #33112	; 0x8158
   11eb8:	movt	r3, #2
   11ebc:	mvn	r2, #0
   11ec0:	str	r2, [r3, #80]	; 0x50
   11ec4:	ldr	r4, [r7]
   11ec8:	eor	r4, r4, #32
   11ecc:	ubfx	r4, r4, #5, #1
   11ed0:	rsb	r5, r4, #0
   11ed4:	movw	r3, #33096	; 0x8148
   11ed8:	movt	r3, #2
   11edc:	ldr	r3, [r3]
   11ee0:	cmp	r3, r7
   11ee4:	beq	12160 <__assert_fail@plt+0x1258>
   11ee8:	mov	r0, r7
   11eec:	bl	12d18 <__assert_fail@plt+0x1e10>
   11ef0:	cmp	r0, #0
   11ef4:	moveq	r4, #0
   11ef8:	cmp	r4, #0
   11efc:	bne	1216c <__assert_fail@plt+0x1264>
   11f00:	cmp	r5, #0
   11f04:	blt	11f38 <__assert_fail@plt+0x1030>
   11f08:	movwne	r4, #28928	; 0x7100
   11f0c:	movtne	r4, #1
   11f10:	beq	12178 <__assert_fail@plt+0x1270>
   11f14:	mov	r2, fp
   11f18:	mov	r1, #3
   11f1c:	mov	r0, #0
   11f20:	bl	15034 <__assert_fail@plt+0x412c>
   11f24:	mov	r3, r0
   11f28:	mov	r2, r4
   11f2c:	mov	r1, r5
   11f30:	mov	r0, #0
   11f34:	bl	10db8 <error@plt>
   11f38:	lsr	r0, r5, #31
   11f3c:	add	sp, sp, #4
   11f40:	ldrd	r4, [sp]
   11f44:	ldrd	r6, [sp, #8]
   11f48:	ldrd	r8, [sp, #16]
   11f4c:	ldrd	sl, [sp, #24]
   11f50:	add	sp, sp, #32
   11f54:	pop	{pc}		; (ldr pc, [sp], #4)
   11f58:	sub	r0, r0, r3
   11f5c:	bl	115a8 <__assert_fail@plt+0x6a0>
   11f60:	cmn	r5, #1
   11f64:	bne	11f90 <__assert_fail@plt+0x1088>
   11f68:	b	11e68 <__assert_fail@plt+0xf60>
   11f6c:	mov	r1, #10
   11f70:	bl	10e9c <__overflow@plt>
   11f74:	b	11eb4 <__assert_fail@plt+0xfac>
   11f78:	uxtb	r1, r5
   11f7c:	bl	10e9c <__overflow@plt>
   11f80:	b	11fbc <__assert_fail@plt+0x10b4>
   11f84:	add	r2, r3, #1
   11f88:	str	r2, [r7, #4]
   11f8c:	ldrb	r5, [r3]
   11f90:	cmp	r5, #10
   11f94:	cmnne	r5, #1
   11f98:	beq	11d2c <__assert_fail@plt+0xe24>
   11f9c:	ldr	r0, [r8]
   11fa0:	ldr	r3, [r0, #20]
   11fa4:	ldr	r2, [r0, #24]
   11fa8:	cmp	r3, r2
   11fac:	addcc	r2, r3, #1
   11fb0:	strcc	r2, [r0, #20]
   11fb4:	strbcc	r5, [r3]
   11fb8:	bcs	11f78 <__assert_fail@plt+0x1070>
   11fbc:	ldr	r3, [r7, #4]
   11fc0:	ldr	r2, [r7, #8]
   11fc4:	cmp	r3, r2
   11fc8:	bcc	11f84 <__assert_fail@plt+0x107c>
   11fcc:	mov	r0, r7
   11fd0:	bl	10e90 <__uflow@plt>
   11fd4:	mov	r5, r0
   11fd8:	b	11f90 <__assert_fail@plt+0x1088>
   11fdc:	mov	r1, #10
   11fe0:	bl	10e9c <__overflow@plt>
   11fe4:	b	11d58 <__assert_fail@plt+0xe50>
   11fe8:	str	r2, [r4, #28]
   11fec:	str	r1, [r4, #8]
   11ff0:	movw	r3, #61196	; 0xef0c
   11ff4:	movt	r3, #2
   11ff8:	str	r3, [r4, #72]	; 0x48
   11ffc:	movw	r3, #33196	; 0x81ac
   12000:	movt	r3, #2
   12004:	str	r3, [r4, #36]	; 0x24
   12008:	mov	r1, r5
   1200c:	mov	r0, r7
   12010:	bl	119f0 <__assert_fail@plt+0xae8>
   12014:	mov	r6, r0
   12018:	bl	110f0 <__assert_fail@plt+0x1e8>
   1201c:	bl	11004 <__assert_fail@plt+0xfc>
   12020:	ldrb	r3, [r4]
   12024:	cmp	r3, #0
   12028:	bne	12074 <__assert_fail@plt+0x116c>
   1202c:	ldrb	r3, [r4, #12]
   12030:	cmp	r3, #0
   12034:	beq	120b0 <__assert_fail@plt+0x11a8>
   12038:	mov	r0, r6
   1203c:	bl	110f0 <__assert_fail@plt+0x1e8>
   12040:	cmp	r0, #0
   12044:	beq	12074 <__assert_fail@plt+0x116c>
   12048:	mov	r1, r6
   1204c:	mov	r0, r7
   12050:	bl	119f0 <__assert_fail@plt+0xae8>
   12054:	mov	r6, r0
   12058:	bl	110f0 <__assert_fail@plt+0x1e8>
   1205c:	cmp	r0, #0
   12060:	beq	12074 <__assert_fail@plt+0x116c>
   12064:	ldr	r2, [r4, #16]
   12068:	ldr	r3, [r4, #4]
   1206c:	cmp	r2, r3
   12070:	beq	12048 <__assert_fail@plt+0x1140>
   12074:	ldr	r5, [r4, #36]	; 0x24
   12078:	movw	r3, #33196	; 0x81ac
   1207c:	movt	r3, #2
   12080:	cmp	r5, r3
   12084:	bls	12140 <__assert_fail@plt+0x1238>
   12088:	ldrb	r3, [r5, #-16]
   1208c:	orr	r3, r3, #10
   12090:	strb	r3, [r5, #-16]
   12094:	str	r6, [r4, #80]	; 0x50
   12098:	bl	11148 <__assert_fail@plt+0x240>
   1209c:	mov	r0, r5
   120a0:	bl	117fc <__assert_fail@plt+0x8f4>
   120a4:	str	sl, [r4, #48]	; 0x30
   120a8:	ldr	r5, [r4, #80]	; 0x50
   120ac:	b	11d64 <__assert_fail@plt+0xe5c>
   120b0:	ldrb	r3, [r4, #20]
   120b4:	cmp	r3, #0
   120b8:	beq	1210c <__assert_fail@plt+0x1204>
   120bc:	mov	r0, r6
   120c0:	bl	110f0 <__assert_fail@plt+0x1e8>
   120c4:	cmp	r0, #0
   120c8:	beq	12074 <__assert_fail@plt+0x116c>
   120cc:	ldr	r2, [r4, #16]
   120d0:	ldr	r3, [r4, #8]
   120d4:	cmp	r2, r3
   120d8:	beq	12074 <__assert_fail@plt+0x116c>
   120dc:	mov	r1, r6
   120e0:	mov	r0, r7
   120e4:	bl	119f0 <__assert_fail@plt+0xae8>
   120e8:	mov	r6, r0
   120ec:	bl	110f0 <__assert_fail@plt+0x1e8>
   120f0:	cmp	r0, #0
   120f4:	beq	12074 <__assert_fail@plt+0x116c>
   120f8:	ldr	r2, [r4, #16]
   120fc:	ldr	r3, [r4, #4]
   12100:	cmp	r2, r3
   12104:	beq	120dc <__assert_fail@plt+0x11d4>
   12108:	b	12074 <__assert_fail@plt+0x116c>
   1210c:	mov	r0, r6
   12110:	bl	110f0 <__assert_fail@plt+0x1e8>
   12114:	cmp	r0, #0
   12118:	beq	12074 <__assert_fail@plt+0x116c>
   1211c:	ldr	r2, [r4, #16]
   12120:	ldr	r3, [r4, #4]
   12124:	cmp	r2, r3
   12128:	bne	12074 <__assert_fail@plt+0x116c>
   1212c:	mov	r1, r6
   12130:	mov	r0, r7
   12134:	bl	119f0 <__assert_fail@plt+0xae8>
   12138:	mov	r6, r0
   1213c:	b	1210c <__assert_fail@plt+0x1204>
   12140:	movw	r3, #26900	; 0x6914
   12144:	movt	r3, #1
   12148:	movw	r2, #623	; 0x26f
   1214c:	movw	r1, #27152	; 0x6a10
   12150:	movt	r1, #1
   12154:	movw	r0, #27164	; 0x6a1c
   12158:	movt	r0, #1
   1215c:	bl	10f08 <__assert_fail@plt>
   12160:	mov	r0, r7
   12164:	bl	10ecc <clearerr_unlocked@plt>
   12168:	b	11f00 <__assert_fail@plt+0xff8>
   1216c:	bl	10e30 <__errno_location@plt>
   12170:	ldr	r5, [r0]
   12174:	b	11f00 <__assert_fail@plt+0xff8>
   12178:	mov	r2, #5
   1217c:	movw	r1, #27184	; 0x6a30
   12180:	movt	r1, #1
   12184:	mov	r0, #0
   12188:	bl	10d4c <dcgettext@plt>
   1218c:	mov	r4, r0
   12190:	b	11f14 <__assert_fail@plt+0x100c>
   12194:	push	{lr}		; (str lr, [sp, #-4]!)
   12198:	sub	sp, sp, #60	; 0x3c
   1219c:	subs	r5, r0, #0
   121a0:	beq	121e8 <__assert_fail@plt+0x12e0>
   121a4:	movw	r3, #33088	; 0x8140
   121a8:	movt	r3, #2
   121ac:	ldr	r4, [r3]
   121b0:	mov	r2, #5
   121b4:	movw	r1, #27200	; 0x6a40
   121b8:	movt	r1, #1
   121bc:	mov	r0, #0
   121c0:	bl	10d4c <dcgettext@plt>
   121c4:	movw	r3, #668	; 0x29c
   121c8:	movt	r3, #3
   121cc:	ldr	r3, [r3]
   121d0:	mov	r2, r0
   121d4:	mov	r1, #1
   121d8:	mov	r0, r4
   121dc:	bl	10e6c <__fprintf_chk@plt>
   121e0:	mov	r0, r5
   121e4:	bl	10e0c <exit@plt>
   121e8:	mov	r2, #5
   121ec:	movw	r1, #27240	; 0x6a68
   121f0:	movt	r1, #1
   121f4:	mov	r0, #0
   121f8:	bl	10d4c <dcgettext@plt>
   121fc:	movw	r3, #668	; 0x29c
   12200:	movt	r3, #3
   12204:	ldr	r2, [r3]
   12208:	mov	r1, r0
   1220c:	mov	r0, #1
   12210:	bl	10e54 <__printf_chk@plt>
   12214:	mov	r2, #5
   12218:	movw	r1, #27284	; 0x6a94
   1221c:	movt	r1, #1
   12220:	mov	r0, #0
   12224:	bl	10d4c <dcgettext@plt>
   12228:	movw	r4, #33100	; 0x814c
   1222c:	movt	r4, #2
   12230:	ldr	r1, [r4]
   12234:	bl	10cb0 <fputs_unlocked@plt>
   12238:	mov	r2, #5
   1223c:	movw	r1, #27416	; 0x6b18
   12240:	movt	r1, #1
   12244:	mov	r0, #0
   12248:	bl	10d4c <dcgettext@plt>
   1224c:	ldr	r1, [r4]
   12250:	bl	10cb0 <fputs_unlocked@plt>
   12254:	mov	r2, #5
   12258:	movw	r1, #27472	; 0x6b50
   1225c:	movt	r1, #1
   12260:	mov	r0, #0
   12264:	bl	10d4c <dcgettext@plt>
   12268:	ldr	r1, [r4]
   1226c:	bl	10cb0 <fputs_unlocked@plt>
   12270:	mov	r2, #5
   12274:	movw	r1, #27548	; 0x6b9c
   12278:	movt	r1, #1
   1227c:	mov	r0, #0
   12280:	bl	10d4c <dcgettext@plt>
   12284:	ldr	r1, [r4]
   12288:	bl	10cb0 <fputs_unlocked@plt>
   1228c:	mov	r2, #5
   12290:	movw	r1, #27828	; 0x6cb4
   12294:	movt	r1, #1
   12298:	mov	r0, #0
   1229c:	bl	10d4c <dcgettext@plt>
   122a0:	ldr	r1, [r4]
   122a4:	bl	10cb0 <fputs_unlocked@plt>
   122a8:	mov	r2, #5
   122ac:	movw	r1, #28116	; 0x6dd4
   122b0:	movt	r1, #1
   122b4:	mov	r0, #0
   122b8:	bl	10d4c <dcgettext@plt>
   122bc:	ldr	r1, [r4]
   122c0:	bl	10cb0 <fputs_unlocked@plt>
   122c4:	mov	r2, #5
   122c8:	movw	r1, #28164	; 0x6e04
   122cc:	movt	r1, #1
   122d0:	mov	r0, #0
   122d4:	bl	10d4c <dcgettext@plt>
   122d8:	ldr	r1, [r4]
   122dc:	bl	10cb0 <fputs_unlocked@plt>
   122e0:	movw	r3, #26900	; 0x6914
   122e4:	movt	r3, #1
   122e8:	add	r0, r3, #16
   122ec:	ldr	r1, [r3, #16]
   122f0:	ldr	r3, [r3, #20]
   122f4:	str	r1, [sp]
   122f8:	str	r3, [sp, #4]
   122fc:	ldrd	r2, [r0, #8]
   12300:	strd	r2, [sp, #8]
   12304:	ldrd	r2, [r0, #16]
   12308:	strd	r2, [sp, #16]
   1230c:	ldrd	r2, [r0, #24]
   12310:	strd	r2, [sp, #24]
   12314:	ldrd	r2, [r0, #32]
   12318:	strd	r2, [sp, #32]
   1231c:	ldrd	r2, [r0, #40]	; 0x28
   12320:	strd	r2, [sp, #40]	; 0x28
   12324:	ldrd	r2, [r0, #48]	; 0x30
   12328:	strd	r2, [sp, #48]	; 0x30
   1232c:	cmp	r1, #0
   12330:	moveq	r4, sp
   12334:	beq	12360 <__assert_fail@plt+0x1458>
   12338:	mov	r4, sp
   1233c:	movw	r6, #27196	; 0x6a3c
   12340:	movt	r6, #1
   12344:	mov	r0, r6
   12348:	bl	10cbc <strcmp@plt>
   1234c:	cmp	r0, #0
   12350:	beq	12360 <__assert_fail@plt+0x1458>
   12354:	ldr	r1, [r4, #8]!
   12358:	cmp	r1, #0
   1235c:	bne	12344 <__assert_fail@plt+0x143c>
   12360:	ldr	r4, [r4, #4]
   12364:	cmp	r4, #0
   12368:	beq	124c4 <__assert_fail@plt+0x15bc>
   1236c:	mov	r2, #5
   12370:	movw	r1, #28220	; 0x6e3c
   12374:	movt	r1, #1
   12378:	mov	r0, #0
   1237c:	bl	10d4c <dcgettext@plt>
   12380:	movw	r3, #28244	; 0x6e54
   12384:	movt	r3, #1
   12388:	movw	r2, #28284	; 0x6e7c
   1238c:	movt	r2, #1
   12390:	mov	r1, r0
   12394:	mov	r0, #1
   12398:	bl	10e54 <__printf_chk@plt>
   1239c:	mov	r1, #0
   123a0:	mov	r0, #5
   123a4:	bl	10ea8 <setlocale@plt>
   123a8:	cmp	r0, #0
   123ac:	beq	123c8 <__assert_fail@plt+0x14c0>
   123b0:	mov	r2, #3
   123b4:	movw	r1, #28300	; 0x6e8c
   123b8:	movt	r1, #1
   123bc:	bl	10ef0 <strncmp@plt>
   123c0:	cmp	r0, #0
   123c4:	bne	12444 <__assert_fail@plt+0x153c>
   123c8:	mov	r2, #5
   123cc:	movw	r1, #28376	; 0x6ed8
   123d0:	movt	r1, #1
   123d4:	mov	r0, #0
   123d8:	bl	10d4c <dcgettext@plt>
   123dc:	movw	r6, #27196	; 0x6a3c
   123e0:	movt	r6, #1
   123e4:	mov	r3, r6
   123e8:	movw	r2, #28244	; 0x6e54
   123ec:	movt	r2, #1
   123f0:	mov	r1, r0
   123f4:	mov	r0, #1
   123f8:	bl	10e54 <__printf_chk@plt>
   123fc:	mov	r2, #5
   12400:	movw	r1, #28404	; 0x6ef4
   12404:	movt	r1, #1
   12408:	mov	r0, #0
   1240c:	bl	10d4c <dcgettext@plt>
   12410:	mov	r1, r0
   12414:	movw	r2, #28700	; 0x701c
   12418:	movt	r2, #1
   1241c:	movw	r3, #27412	; 0x6b14
   12420:	movt	r3, #1
   12424:	cmp	r4, r6
   12428:	moveq	r3, r2
   1242c:	mov	r2, r4
   12430:	mov	r0, #1
   12434:	bl	10e54 <__printf_chk@plt>
   12438:	b	121e0 <__assert_fail@plt+0x12d8>
   1243c:	movw	r4, #27196	; 0x6a3c
   12440:	movt	r4, #1
   12444:	mov	r2, #5
   12448:	movw	r1, #28304	; 0x6e90
   1244c:	movt	r1, #1
   12450:	mov	r0, #0
   12454:	bl	10d4c <dcgettext@plt>
   12458:	movw	r3, #33100	; 0x814c
   1245c:	movt	r3, #2
   12460:	ldr	r1, [r3]
   12464:	bl	10cb0 <fputs_unlocked@plt>
   12468:	b	123c8 <__assert_fail@plt+0x14c0>
   1246c:	mov	r2, #5
   12470:	movw	r1, #28376	; 0x6ed8
   12474:	movt	r1, #1
   12478:	mov	r0, #0
   1247c:	bl	10d4c <dcgettext@plt>
   12480:	movw	r4, #27196	; 0x6a3c
   12484:	movt	r4, #1
   12488:	mov	r3, r4
   1248c:	movw	r2, #28244	; 0x6e54
   12490:	movt	r2, #1
   12494:	mov	r1, r0
   12498:	mov	r0, #1
   1249c:	bl	10e54 <__printf_chk@plt>
   124a0:	mov	r2, #5
   124a4:	movw	r1, #28404	; 0x6ef4
   124a8:	movt	r1, #1
   124ac:	mov	r0, #0
   124b0:	bl	10d4c <dcgettext@plt>
   124b4:	mov	r1, r0
   124b8:	movw	r3, #28700	; 0x701c
   124bc:	movt	r3, #1
   124c0:	b	1242c <__assert_fail@plt+0x1524>
   124c4:	mov	r2, #5
   124c8:	movw	r1, #28220	; 0x6e3c
   124cc:	movt	r1, #1
   124d0:	mov	r0, #0
   124d4:	bl	10d4c <dcgettext@plt>
   124d8:	movw	r3, #28244	; 0x6e54
   124dc:	movt	r3, #1
   124e0:	movw	r2, #28284	; 0x6e7c
   124e4:	movt	r2, #1
   124e8:	mov	r1, r0
   124ec:	mov	r0, #1
   124f0:	bl	10e54 <__printf_chk@plt>
   124f4:	mov	r1, #0
   124f8:	mov	r0, #5
   124fc:	bl	10ea8 <setlocale@plt>
   12500:	cmp	r0, #0
   12504:	beq	1246c <__assert_fail@plt+0x1564>
   12508:	mov	r2, #3
   1250c:	movw	r1, #28300	; 0x6e8c
   12510:	movt	r1, #1
   12514:	bl	10ef0 <strncmp@plt>
   12518:	cmp	r0, #0
   1251c:	bne	1243c <__assert_fail@plt+0x1534>
   12520:	mov	r2, #5
   12524:	movw	r1, #28376	; 0x6ed8
   12528:	movt	r1, #1
   1252c:	mov	r0, #0
   12530:	bl	10d4c <dcgettext@plt>
   12534:	movw	r4, #27196	; 0x6a3c
   12538:	movt	r4, #1
   1253c:	mov	r3, r4
   12540:	movw	r2, #28244	; 0x6e54
   12544:	movt	r2, #1
   12548:	mov	r1, r0
   1254c:	mov	r0, #1
   12550:	bl	10e54 <__printf_chk@plt>
   12554:	mov	r2, #5
   12558:	movw	r1, #28404	; 0x6ef4
   1255c:	movt	r1, #1
   12560:	mov	r0, #0
   12564:	bl	10d4c <dcgettext@plt>
   12568:	mov	r1, r0
   1256c:	movw	r3, #28700	; 0x701c
   12570:	movt	r3, #1
   12574:	b	1242c <__assert_fail@plt+0x1524>
   12578:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1257c:	strd	r6, [sp, #8]
   12580:	strd	r8, [sp, #16]
   12584:	strd	sl, [sp, #24]
   12588:	str	lr, [sp, #32]
   1258c:	sub	sp, sp, #36	; 0x24
   12590:	mov	r6, r0
   12594:	mov	r5, r1
   12598:	ldr	r0, [r1]
   1259c:	bl	12f04 <__assert_fail@plt+0x1ffc>
   125a0:	movw	r4, #27412	; 0x6b14
   125a4:	movt	r4, #1
   125a8:	mov	r1, r4
   125ac:	mov	r0, #6
   125b0:	bl	10ea8 <setlocale@plt>
   125b4:	movw	r7, #28288	; 0x6e80
   125b8:	movt	r7, #1
   125bc:	movw	r1, #28456	; 0x6f28
   125c0:	movt	r1, #1
   125c4:	mov	r0, r7
   125c8:	bl	10ee4 <bindtextdomain@plt>
   125cc:	mov	r0, r7
   125d0:	bl	10d64 <textdomain@plt>
   125d4:	movw	r0, #11160	; 0x2b98
   125d8:	movt	r0, #1
   125dc:	bl	168f0 <__assert_fail@plt+0x59e8>
   125e0:	movw	r3, #33112	; 0x8158
   125e4:	movt	r3, #2
   125e8:	mov	r2, #0
   125ec:	strb	r2, [r3, #76]	; 0x4c
   125f0:	strb	r2, [r3]
   125f4:	strb	r2, [r3, #20]
   125f8:	strb	r2, [r3, #12]
   125fc:	mov	r1, #75	; 0x4b
   12600:	str	r1, [r3, #40]	; 0x28
   12604:	str	r4, [r3, #64]	; 0x40
   12608:	str	r2, [r3, #32]
   1260c:	str	r2, [r3, #60]	; 0x3c
   12610:	str	r2, [r3, #56]	; 0x38
   12614:	cmp	r6, #1
   12618:	movle	sl, #0
   1261c:	ble	12634 <__assert_fail@plt+0x172c>
   12620:	ldr	sl, [r5, #4]
   12624:	ldrb	r3, [sl]
   12628:	cmp	r3, #45	; 0x2d
   1262c:	movne	sl, #0
   12630:	beq	126a0 <__assert_fail@plt+0x1798>
   12634:	mov	fp, #0
   12638:	movw	r7, #28592	; 0x6fb0
   1263c:	movt	r7, #1
   12640:	movw	r8, #33104	; 0x8150
   12644:	movt	r8, #2
   12648:	mov	r3, #0
   1264c:	str	r3, [sp]
   12650:	ldr	r3, [pc, #1308]	; 12b74 <__assert_fail@plt+0x1c6c>
   12654:	mov	r2, r7
   12658:	mov	r1, r5
   1265c:	mov	r0, r6
   12660:	bl	10df4 <getopt_long@plt>
   12664:	mov	r4, r0
   12668:	cmn	r0, #1
   1266c:	beq	12894 <__assert_fail@plt+0x198c>
   12670:	cmp	r4, #112	; 0x70
   12674:	beq	127d4 <__assert_fail@plt+0x18cc>
   12678:	ble	126c8 <__assert_fail@plt+0x17c0>
   1267c:	cmp	r4, #116	; 0x74
   12680:	beq	127ac <__assert_fail@plt+0x18a4>
   12684:	ble	1273c <__assert_fail@plt+0x1834>
   12688:	cmp	r4, #117	; 0x75
   1268c:	beq	127c0 <__assert_fail@plt+0x18b8>
   12690:	cmp	r4, #119	; 0x77
   12694:	bne	12758 <__assert_fail@plt+0x1850>
   12698:	ldr	sl, [r8]
   1269c:	b	12648 <__assert_fail@plt+0x1740>
   126a0:	ldrb	r3, [sl, #1]
   126a4:	sub	r3, r3, #48	; 0x30
   126a8:	cmp	r3, #9
   126ac:	movhi	sl, #0
   126b0:	bhi	12634 <__assert_fail@plt+0x172c>
   126b4:	add	sl, sl, #1
   126b8:	ldr	r3, [r5]
   126bc:	str	r3, [r5, #4]!
   126c0:	sub	r6, r6, #1
   126c4:	b	12634 <__assert_fail@plt+0x172c>
   126c8:	cmn	r4, #2
   126cc:	beq	1288c <__assert_fail@plt+0x1984>
   126d0:	ble	126ec <__assert_fail@plt+0x17e4>
   126d4:	cmp	r4, #99	; 0x63
   126d8:	beq	12798 <__assert_fail@plt+0x1890>
   126dc:	cmp	r4, #103	; 0x67
   126e0:	bne	12758 <__assert_fail@plt+0x1850>
   126e4:	ldr	fp, [r8]
   126e8:	b	12648 <__assert_fail@plt+0x1740>
   126ec:	cmn	r4, #3
   126f0:	bne	12758 <__assert_fail@plt+0x1850>
   126f4:	movw	r3, #33000	; 0x80e8
   126f8:	movt	r3, #2
   126fc:	movw	r0, #33100	; 0x814c
   12700:	movt	r0, #2
   12704:	mov	r4, #0
   12708:	str	r4, [sp, #4]
   1270c:	movw	r2, #28576	; 0x6fa0
   12710:	movt	r2, #1
   12714:	str	r2, [sp]
   12718:	ldr	r3, [r3]
   1271c:	movw	r2, #28284	; 0x6e7c
   12720:	movt	r2, #1
   12724:	movw	r1, #27196	; 0x6a3c
   12728:	movt	r1, #1
   1272c:	ldr	r0, [r0]
   12730:	bl	156fc <__assert_fail@plt+0x47f4>
   12734:	mov	r0, r4
   12738:	bl	10e0c <exit@plt>
   1273c:	cmp	r4, #115	; 0x73
   12740:	bne	12758 <__assert_fail@plt+0x1850>
   12744:	movw	r3, #33112	; 0x8158
   12748:	movt	r3, #2
   1274c:	mov	r2, #1
   12750:	strb	r2, [r3]
   12754:	b	12648 <__assert_fail@plt+0x1740>
   12758:	sub	r3, r4, #48	; 0x30
   1275c:	cmp	r3, #9
   12760:	bls	1276c <__assert_fail@plt+0x1864>
   12764:	mov	r0, #1
   12768:	bl	12194 <__assert_fail@plt+0x128c>
   1276c:	mov	r2, #5
   12770:	movw	r1, #28480	; 0x6f40
   12774:	movt	r1, #1
   12778:	mov	r0, #0
   1277c:	bl	10d4c <dcgettext@plt>
   12780:	mov	r3, r4
   12784:	mov	r2, r0
   12788:	mov	r1, #0
   1278c:	mov	r0, r1
   12790:	bl	10db8 <error@plt>
   12794:	b	12764 <__assert_fail@plt+0x185c>
   12798:	movw	r3, #33112	; 0x8158
   1279c:	movt	r3, #2
   127a0:	mov	r2, #1
   127a4:	strb	r2, [r3, #12]
   127a8:	b	12648 <__assert_fail@plt+0x1740>
   127ac:	movw	r3, #33112	; 0x8158
   127b0:	movt	r3, #2
   127b4:	mov	r2, #1
   127b8:	strb	r2, [r3, #20]
   127bc:	b	12648 <__assert_fail@plt+0x1740>
   127c0:	movw	r3, #33112	; 0x8158
   127c4:	movt	r3, #2
   127c8:	mov	r2, #1
   127cc:	strb	r2, [r3, #76]	; 0x4c
   127d0:	b	12648 <__assert_fail@plt+0x1740>
   127d4:	ldr	r2, [r8]
   127d8:	movw	r3, #33112	; 0x8158
   127dc:	movt	r3, #2
   127e0:	mov	r1, #0
   127e4:	str	r1, [r3, #60]	; 0x3c
   127e8:	ldrb	r3, [r2]
   127ec:	cmp	r3, #32
   127f0:	bne	12884 <__assert_fail@plt+0x197c>
   127f4:	mov	r4, r2
   127f8:	rsb	r2, r2, #1
   127fc:	add	r1, r4, r2
   12800:	ldrb	r3, [r4, #1]!
   12804:	cmp	r3, #32
   12808:	beq	127fc <__assert_fail@plt+0x18f4>
   1280c:	movw	r3, #33112	; 0x8158
   12810:	movt	r3, #2
   12814:	str	r1, [r3, #60]	; 0x3c
   12818:	movw	r9, #33112	; 0x8158
   1281c:	movt	r9, #2
   12820:	str	r4, [r9, #64]	; 0x40
   12824:	mov	r0, r4
   12828:	bl	10e18 <strlen@plt>
   1282c:	str	r0, [r9, #32]
   12830:	add	r0, r4, r0
   12834:	cmp	r0, r4
   12838:	bls	12868 <__assert_fail@plt+0x1960>
   1283c:	ldrb	r3, [r0, #-1]
   12840:	cmp	r3, #32
   12844:	bne	12868 <__assert_fail@plt+0x1960>
   12848:	sub	r3, r0, #1
   1284c:	mov	r1, r4
   12850:	mov	r0, r3
   12854:	cmp	r3, r1
   12858:	beq	12868 <__assert_fail@plt+0x1960>
   1285c:	ldrb	r2, [r3, #-1]!
   12860:	cmp	r2, #32
   12864:	beq	12850 <__assert_fail@plt+0x1948>
   12868:	mov	r3, #0
   1286c:	strb	r3, [r0]
   12870:	movw	r3, #33112	; 0x8158
   12874:	movt	r3, #2
   12878:	sub	r0, r0, r4
   1287c:	str	r0, [r3, #56]	; 0x38
   12880:	b	12648 <__assert_fail@plt+0x1740>
   12884:	mov	r4, r2
   12888:	b	12818 <__assert_fail@plt+0x1910>
   1288c:	mov	r0, #0
   12890:	bl	12194 <__assert_fail@plt+0x128c>
   12894:	cmp	sl, #0
   12898:	beq	12b0c <__assert_fail@plt+0x1c04>
   1289c:	mov	r2, #5
   128a0:	movw	r1, #28616	; 0x6fc8
   128a4:	movt	r1, #1
   128a8:	mov	r0, #0
   128ac:	bl	10d4c <dcgettext@plt>
   128b0:	mov	r3, #0
   128b4:	str	r3, [sp, #16]
   128b8:	str	r0, [sp, #12]
   128bc:	movw	r3, #27412	; 0x6b14
   128c0:	movt	r3, #1
   128c4:	str	r3, [sp, #8]
   128c8:	movw	r2, #2500	; 0x9c4
   128cc:	mov	r3, #0
   128d0:	strd	r2, [sp]
   128d4:	mov	r2, #0
   128d8:	mov	r3, #0
   128dc:	mov	r0, sl
   128e0:	bl	15dd0 <__assert_fail@plt+0x4ec8>
   128e4:	mov	r4, r0
   128e8:	movw	r3, #33112	; 0x8158
   128ec:	movt	r3, #2
   128f0:	str	r0, [r3, #40]	; 0x28
   128f4:	cmp	fp, #0
   128f8:	beq	12b14 <__assert_fail@plt+0x1c0c>
   128fc:	mov	r2, #5
   12900:	movw	r1, #28616	; 0x6fc8
   12904:	movt	r1, #1
   12908:	mov	r0, #0
   1290c:	bl	10d4c <dcgettext@plt>
   12910:	mov	r3, #0
   12914:	str	r3, [sp, #16]
   12918:	str	r0, [sp, #12]
   1291c:	movw	r3, #27412	; 0x6b14
   12920:	movt	r3, #1
   12924:	str	r3, [sp, #8]
   12928:	mov	r2, r4
   1292c:	asr	r3, r4, #31
   12930:	strd	r2, [sp]
   12934:	mov	r2, #0
   12938:	mov	r3, #0
   1293c:	mov	r0, fp
   12940:	bl	15dd0 <__assert_fail@plt+0x4ec8>
   12944:	movw	r3, #33112	; 0x8158
   12948:	movt	r3, #2
   1294c:	str	r0, [r3, #44]	; 0x2c
   12950:	b	12b34 <__assert_fail@plt+0x1c2c>
   12954:	movw	r3, #33096	; 0x8148
   12958:	movt	r3, #2
   1295c:	movw	r1, #28632	; 0x6fd8
   12960:	movt	r1, #1
   12964:	ldr	r0, [r3]
   12968:	bl	11ca8 <__assert_fail@plt+0xda0>
   1296c:	mov	fp, r0
   12970:	b	12a3c <__assert_fail@plt+0x1b34>
   12974:	mov	r1, r8
   12978:	mov	r0, r4
   1297c:	bl	10ed8 <fopen64@plt>
   12980:	cmp	r0, #0
   12984:	beq	129f0 <__assert_fail@plt+0x1ae8>
   12988:	mov	r1, r4
   1298c:	bl	11ca8 <__assert_fail@plt+0xda0>
   12990:	and	fp, fp, r0
   12994:	uxtb	fp, fp
   12998:	movw	r2, #33080	; 0x8138
   1299c:	movt	r2, #2
   129a0:	ldr	r3, [r2]
   129a4:	add	r3, r3, #1
   129a8:	str	r3, [r2]
   129ac:	cmp	r3, r6
   129b0:	bge	12a34 <__assert_fail@plt+0x1b2c>
   129b4:	ldr	r4, [r5, r3, lsl #2]
   129b8:	mov	r1, r7
   129bc:	mov	r0, r4
   129c0:	bl	10cbc <strcmp@plt>
   129c4:	cmp	r0, #0
   129c8:	bne	12974 <__assert_fail@plt+0x1a6c>
   129cc:	movw	r3, #33096	; 0x8148
   129d0:	movt	r3, #2
   129d4:	mov	r1, r4
   129d8:	ldr	r0, [r3]
   129dc:	bl	11ca8 <__assert_fail@plt+0xda0>
   129e0:	and	fp, fp, r0
   129e4:	uxtb	fp, fp
   129e8:	mov	r9, #1
   129ec:	b	12998 <__assert_fail@plt+0x1a90>
   129f0:	bl	10e30 <__errno_location@plt>
   129f4:	ldr	fp, [r0]
   129f8:	mov	r2, #5
   129fc:	mov	r1, sl
   12a00:	mov	r0, #0
   12a04:	bl	10d4c <dcgettext@plt>
   12a08:	str	r0, [sp, #28]
   12a0c:	mov	r1, r4
   12a10:	mov	r0, #4
   12a14:	bl	14f10 <__assert_fail@plt+0x4008>
   12a18:	mov	r3, r0
   12a1c:	ldr	r2, [sp, #28]
   12a20:	mov	r1, fp
   12a24:	mov	r0, #0
   12a28:	bl	10db8 <error@plt>
   12a2c:	mov	fp, #0
   12a30:	b	12998 <__assert_fail@plt+0x1a90>
   12a34:	cmp	r9, #0
   12a38:	beq	12a54 <__assert_fail@plt+0x1b4c>
   12a3c:	movw	r3, #33096	; 0x8148
   12a40:	movt	r3, #2
   12a44:	ldr	r0, [r3]
   12a48:	bl	12d18 <__assert_fail@plt+0x1e10>
   12a4c:	cmp	r0, #0
   12a50:	bne	12a78 <__assert_fail@plt+0x1b70>
   12a54:	eor	r0, fp, #1
   12a58:	uxtb	r0, r0
   12a5c:	add	sp, sp, #36	; 0x24
   12a60:	ldrd	r4, [sp]
   12a64:	ldrd	r6, [sp, #8]
   12a68:	ldrd	r8, [sp, #16]
   12a6c:	ldrd	sl, [sp, #24]
   12a70:	add	sp, sp, #32
   12a74:	pop	{pc}		; (ldr pc, [sp], #4)
   12a78:	bl	10e30 <__errno_location@plt>
   12a7c:	ldr	r4, [r0]
   12a80:	mov	r2, #5
   12a84:	movw	r1, #28668	; 0x6ffc
   12a88:	movt	r1, #1
   12a8c:	mov	r0, #0
   12a90:	bl	10d4c <dcgettext@plt>
   12a94:	mov	r3, r0
   12a98:	movw	r2, #28928	; 0x7100
   12a9c:	movt	r2, #1
   12aa0:	mov	r1, r4
   12aa4:	mov	r0, #1
   12aa8:	bl	10db8 <error@plt>
   12aac:	mov	r2, #5
   12ab0:	movw	r1, #28616	; 0x6fc8
   12ab4:	movt	r1, #1
   12ab8:	mov	r0, #0
   12abc:	bl	10d4c <dcgettext@plt>
   12ac0:	mov	r3, #0
   12ac4:	str	r3, [sp, #16]
   12ac8:	str	r0, [sp, #12]
   12acc:	movw	r3, #27412	; 0x6b14
   12ad0:	movt	r3, #1
   12ad4:	str	r3, [sp, #8]
   12ad8:	mov	r2, #75	; 0x4b
   12adc:	mov	r3, #0
   12ae0:	strd	r2, [sp]
   12ae4:	mov	r2, #0
   12ae8:	mov	r3, #0
   12aec:	mov	r0, fp
   12af0:	bl	15dd0 <__assert_fail@plt+0x4ec8>
   12af4:	movw	r3, #33112	; 0x8158
   12af8:	movt	r3, #2
   12afc:	str	r0, [r3, #44]	; 0x2c
   12b00:	add	r0, r0, #10
   12b04:	str	r0, [r3, #40]	; 0x28
   12b08:	b	12b34 <__assert_fail@plt+0x1c2c>
   12b0c:	cmp	fp, #0
   12b10:	bne	12aac <__assert_fail@plt+0x1ba4>
   12b14:	movw	r2, #33112	; 0x8158
   12b18:	movt	r2, #2
   12b1c:	ldr	r1, [r2, #40]	; 0x28
   12b20:	mov	r3, #187	; 0xbb
   12b24:	mul	r3, r3, r1
   12b28:	mov	r1, #200	; 0xc8
   12b2c:	sdiv	r3, r3, r1
   12b30:	str	r3, [r2, #44]	; 0x2c
   12b34:	movw	r3, #33080	; 0x8138
   12b38:	movt	r3, #2
   12b3c:	ldr	r3, [r3]
   12b40:	cmp	r3, r6
   12b44:	beq	12954 <__assert_fail@plt+0x1a4c>
   12b48:	movge	fp, #1
   12b4c:	bge	12a54 <__assert_fail@plt+0x1b4c>
   12b50:	mov	r9, #0
   12b54:	mov	fp, #1
   12b58:	movw	r7, #28632	; 0x6fd8
   12b5c:	movt	r7, #1
   12b60:	movw	r8, #28636	; 0x6fdc
   12b64:	movt	r8, #1
   12b68:	movw	sl, #28640	; 0x6fe0
   12b6c:	movt	sl, #1
   12b70:	b	129b4 <__assert_fail@plt+0x1aac>
   12b74:	andeq	r6, r1, ip, asr r9
   12b78:	movw	r3, #660	; 0x294
   12b7c:	movt	r3, #3
   12b80:	str	r0, [r3]
   12b84:	bx	lr
   12b88:	movw	r3, #660	; 0x294
   12b8c:	movt	r3, #3
   12b90:	strb	r0, [r3, #4]
   12b94:	bx	lr
   12b98:	strd	r4, [sp, #-16]!
   12b9c:	str	r6, [sp, #8]
   12ba0:	str	lr, [sp, #12]
   12ba4:	sub	sp, sp, #8
   12ba8:	movw	r3, #33100	; 0x814c
   12bac:	movt	r3, #2
   12bb0:	ldr	r0, [r3]
   12bb4:	bl	16594 <__assert_fail@plt+0x568c>
   12bb8:	cmp	r0, #0
   12bbc:	beq	12be4 <__assert_fail@plt+0x1cdc>
   12bc0:	movw	r3, #660	; 0x294
   12bc4:	movt	r3, #3
   12bc8:	ldrb	r3, [r3, #4]
   12bcc:	cmp	r3, #0
   12bd0:	beq	12c10 <__assert_fail@plt+0x1d08>
   12bd4:	bl	10e30 <__errno_location@plt>
   12bd8:	ldr	r3, [r0]
   12bdc:	cmp	r3, #32
   12be0:	bne	12c10 <__assert_fail@plt+0x1d08>
   12be4:	movw	r3, #33088	; 0x8140
   12be8:	movt	r3, #2
   12bec:	ldr	r0, [r3]
   12bf0:	bl	16594 <__assert_fail@plt+0x568c>
   12bf4:	cmp	r0, #0
   12bf8:	bne	12c98 <__assert_fail@plt+0x1d90>
   12bfc:	add	sp, sp, #8
   12c00:	ldrd	r4, [sp]
   12c04:	ldr	r6, [sp, #8]
   12c08:	add	sp, sp, #12
   12c0c:	pop	{pc}		; (ldr pc, [sp], #4)
   12c10:	mov	r2, #5
   12c14:	movw	r1, #28912	; 0x70f0
   12c18:	movt	r1, #1
   12c1c:	mov	r0, #0
   12c20:	bl	10d4c <dcgettext@plt>
   12c24:	mov	r4, r0
   12c28:	movw	r3, #660	; 0x294
   12c2c:	movt	r3, #3
   12c30:	ldr	r5, [r3]
   12c34:	cmp	r5, #0
   12c38:	beq	12c78 <__assert_fail@plt+0x1d70>
   12c3c:	bl	10e30 <__errno_location@plt>
   12c40:	ldr	r6, [r0]
   12c44:	mov	r0, r5
   12c48:	bl	14ffc <__assert_fail@plt+0x40f4>
   12c4c:	str	r4, [sp]
   12c50:	mov	r3, r0
   12c54:	movw	r2, #28924	; 0x70fc
   12c58:	movt	r2, #1
   12c5c:	mov	r1, r6
   12c60:	mov	r0, #0
   12c64:	bl	10db8 <error@plt>
   12c68:	movw	r3, #33004	; 0x80ec
   12c6c:	movt	r3, #2
   12c70:	ldr	r0, [r3]
   12c74:	bl	10cf8 <_exit@plt>
   12c78:	bl	10e30 <__errno_location@plt>
   12c7c:	mov	r3, r4
   12c80:	movw	r2, #28928	; 0x7100
   12c84:	movt	r2, #1
   12c88:	ldr	r1, [r0]
   12c8c:	mov	r0, #0
   12c90:	bl	10db8 <error@plt>
   12c94:	b	12c68 <__assert_fail@plt+0x1d60>
   12c98:	movw	r3, #33004	; 0x80ec
   12c9c:	movt	r3, #2
   12ca0:	ldr	r0, [r3]
   12ca4:	bl	10cf8 <_exit@plt>
   12ca8:	strd	r4, [sp, #-12]!
   12cac:	str	lr, [sp, #8]
   12cb0:	sub	sp, sp, #20
   12cb4:	ldr	r1, [sp, #40]	; 0x28
   12cb8:	str	r1, [sp, #8]
   12cbc:	ldrd	r4, [sp, #32]
   12cc0:	strd	r4, [sp]
   12cc4:	bl	10cc8 <posix_fadvise64@plt>
   12cc8:	add	sp, sp, #20
   12ccc:	ldrd	r4, [sp]
   12cd0:	add	sp, sp, #8
   12cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   12cd8:	cmp	r0, #0
   12cdc:	bxeq	lr
   12ce0:	str	r4, [sp, #-8]!
   12ce4:	str	lr, [sp, #4]
   12ce8:	sub	sp, sp, #16
   12cec:	mov	r4, r1
   12cf0:	bl	10e60 <fileno@plt>
   12cf4:	str	r4, [sp, #8]
   12cf8:	mov	r2, #0
   12cfc:	mov	r3, #0
   12d00:	strd	r2, [sp]
   12d04:	bl	10cc8 <posix_fadvise64@plt>
   12d08:	add	sp, sp, #16
   12d0c:	ldr	r4, [sp]
   12d10:	add	sp, sp, #4
   12d14:	pop	{pc}		; (ldr pc, [sp], #4)
   12d18:	strd	r4, [sp, #-16]!
   12d1c:	str	r6, [sp, #8]
   12d20:	str	lr, [sp, #12]
   12d24:	sub	sp, sp, #8
   12d28:	mov	r4, r0
   12d2c:	bl	10e60 <fileno@plt>
   12d30:	cmp	r0, #0
   12d34:	blt	12dac <__assert_fail@plt+0x1ea4>
   12d38:	mov	r0, r4
   12d3c:	bl	10ddc <__freading@plt>
   12d40:	cmp	r0, #0
   12d44:	beq	12d78 <__assert_fail@plt+0x1e70>
   12d48:	mov	r0, r4
   12d4c:	bl	10e60 <fileno@plt>
   12d50:	mov	r3, #1
   12d54:	str	r3, [sp]
   12d58:	mov	r2, #0
   12d5c:	mov	r3, #0
   12d60:	bl	10d88 <lseek64@plt>
   12d64:	mvn	r2, #0
   12d68:	mvn	r3, #0
   12d6c:	cmp	r1, r3
   12d70:	cmpeq	r0, r2
   12d74:	beq	12db8 <__assert_fail@plt+0x1eb0>
   12d78:	mov	r0, r4
   12d7c:	bl	12dd4 <__assert_fail@plt+0x1ecc>
   12d80:	cmp	r0, #0
   12d84:	beq	12db8 <__assert_fail@plt+0x1eb0>
   12d88:	bl	10e30 <__errno_location@plt>
   12d8c:	mov	r5, r0
   12d90:	ldr	r6, [r0]
   12d94:	mov	r0, r4
   12d98:	bl	10e78 <fclose@plt>
   12d9c:	cmp	r6, #0
   12da0:	strne	r6, [r5]
   12da4:	mvnne	r0, #0
   12da8:	b	12dc0 <__assert_fail@plt+0x1eb8>
   12dac:	mov	r0, r4
   12db0:	bl	10e78 <fclose@plt>
   12db4:	b	12dc0 <__assert_fail@plt+0x1eb8>
   12db8:	mov	r0, r4
   12dbc:	bl	10e78 <fclose@plt>
   12dc0:	add	sp, sp, #8
   12dc4:	ldrd	r4, [sp]
   12dc8:	ldr	r6, [sp, #8]
   12dcc:	add	sp, sp, #12
   12dd0:	pop	{pc}		; (ldr pc, [sp], #4)
   12dd4:	str	r4, [sp, #-8]!
   12dd8:	str	lr, [sp, #4]
   12ddc:	sub	sp, sp, #8
   12de0:	subs	r4, r0, #0
   12de4:	beq	12df8 <__assert_fail@plt+0x1ef0>
   12de8:	mov	r0, r4
   12dec:	bl	10ddc <__freading@plt>
   12df0:	cmp	r0, #0
   12df4:	bne	12e10 <__assert_fail@plt+0x1f08>
   12df8:	mov	r0, r4
   12dfc:	bl	10cd4 <fflush@plt>
   12e00:	add	sp, sp, #8
   12e04:	ldr	r4, [sp]
   12e08:	add	sp, sp, #4
   12e0c:	pop	{pc}		; (ldr pc, [sp], #4)
   12e10:	ldr	r3, [r4]
   12e14:	tst	r3, #256	; 0x100
   12e18:	bne	12e28 <__assert_fail@plt+0x1f20>
   12e1c:	mov	r0, r4
   12e20:	bl	10cd4 <fflush@plt>
   12e24:	b	12e00 <__assert_fail@plt+0x1ef8>
   12e28:	mov	r3, #1
   12e2c:	str	r3, [sp]
   12e30:	mov	r2, #0
   12e34:	mov	r3, #0
   12e38:	mov	r0, r4
   12e3c:	bl	12e44 <__assert_fail@plt+0x1f3c>
   12e40:	b	12e1c <__assert_fail@plt+0x1f14>
   12e44:	str	r4, [sp, #-16]!
   12e48:	strd	r6, [sp, #4]
   12e4c:	str	lr, [sp, #12]
   12e50:	sub	sp, sp, #8
   12e54:	mov	r4, r0
   12e58:	mov	r6, r2
   12e5c:	mov	r7, r3
   12e60:	ldr	r2, [r0, #8]
   12e64:	ldr	r3, [r0, #4]
   12e68:	cmp	r2, r3
   12e6c:	beq	12e9c <__assert_fail@plt+0x1f94>
   12e70:	ldr	r3, [sp, #24]
   12e74:	str	r3, [sp]
   12e78:	mov	r2, r6
   12e7c:	mov	r3, r7
   12e80:	mov	r0, r4
   12e84:	bl	10e84 <fseeko64@plt>
   12e88:	add	sp, sp, #8
   12e8c:	ldr	r4, [sp]
   12e90:	ldrd	r6, [sp, #4]
   12e94:	add	sp, sp, #12
   12e98:	pop	{pc}		; (ldr pc, [sp], #4)
   12e9c:	ldr	r2, [r0, #20]
   12ea0:	ldr	r3, [r0, #16]
   12ea4:	cmp	r2, r3
   12ea8:	bne	12e70 <__assert_fail@plt+0x1f68>
   12eac:	ldr	r3, [r0, #36]	; 0x24
   12eb0:	cmp	r3, #0
   12eb4:	bne	12e70 <__assert_fail@plt+0x1f68>
   12eb8:	bl	10e60 <fileno@plt>
   12ebc:	ldr	r3, [sp, #24]
   12ec0:	str	r3, [sp]
   12ec4:	mov	r2, r6
   12ec8:	mov	r3, r7
   12ecc:	bl	10d88 <lseek64@plt>
   12ed0:	mvn	r2, #0
   12ed4:	mvn	r3, #0
   12ed8:	cmp	r1, r3
   12edc:	cmpeq	r0, r2
   12ee0:	beq	12efc <__assert_fail@plt+0x1ff4>
   12ee4:	ldr	r3, [r4]
   12ee8:	bic	r3, r3, #16
   12eec:	str	r3, [r4]
   12ef0:	strd	r0, [r4, #80]	; 0x50
   12ef4:	mov	r0, #0
   12ef8:	b	12e88 <__assert_fail@plt+0x1f80>
   12efc:	mvn	r0, #0
   12f00:	b	12e88 <__assert_fail@plt+0x1f80>
   12f04:	strd	r4, [sp, #-16]!
   12f08:	str	r6, [sp, #8]
   12f0c:	str	lr, [sp, #12]
   12f10:	subs	r4, r0, #0
   12f14:	beq	12fb0 <__assert_fail@plt+0x20a8>
   12f18:	mov	r1, #47	; 0x2f
   12f1c:	mov	r0, r4
   12f20:	bl	10eb4 <strrchr@plt>
   12f24:	subs	r5, r0, #0
   12f28:	beq	12f88 <__assert_fail@plt+0x2080>
   12f2c:	add	r6, r5, #1
   12f30:	sub	r3, r6, r4
   12f34:	cmp	r3, #6
   12f38:	ble	12f88 <__assert_fail@plt+0x2080>
   12f3c:	mov	r2, #7
   12f40:	movw	r1, #28988	; 0x713c
   12f44:	movt	r1, #1
   12f48:	sub	r0, r5, #6
   12f4c:	bl	10ef0 <strncmp@plt>
   12f50:	cmp	r0, #0
   12f54:	bne	12f88 <__assert_fail@plt+0x2080>
   12f58:	mov	r2, #3
   12f5c:	movw	r1, #28996	; 0x7144
   12f60:	movt	r1, #1
   12f64:	mov	r0, r6
   12f68:	bl	10ef0 <strncmp@plt>
   12f6c:	cmp	r0, #0
   12f70:	movne	r4, r6
   12f74:	bne	12f88 <__assert_fail@plt+0x2080>
   12f78:	add	r4, r5, #4
   12f7c:	movw	r3, #33072	; 0x8130
   12f80:	movt	r3, #2
   12f84:	str	r4, [r3]
   12f88:	movw	r3, #668	; 0x29c
   12f8c:	movt	r3, #3
   12f90:	str	r4, [r3]
   12f94:	movw	r3, #33076	; 0x8134
   12f98:	movt	r3, #2
   12f9c:	str	r4, [r3]
   12fa0:	ldrd	r4, [sp]
   12fa4:	ldr	r6, [sp, #8]
   12fa8:	add	sp, sp, #12
   12fac:	pop	{pc}		; (ldr pc, [sp], #4)
   12fb0:	movw	r3, #33088	; 0x8140
   12fb4:	movt	r3, #2
   12fb8:	ldr	r3, [r3]
   12fbc:	mov	r2, #55	; 0x37
   12fc0:	mov	r1, #1
   12fc4:	movw	r0, #28932	; 0x7104
   12fc8:	movt	r0, #1
   12fcc:	bl	10d7c <fwrite@plt>
   12fd0:	bl	10efc <abort@plt>
   12fd4:	mov	r2, #0
   12fd8:	mov	r3, #0
   12fdc:	strd	r2, [r0]
   12fe0:	strd	r2, [r0, #8]
   12fe4:	strd	r2, [r0, #16]
   12fe8:	strd	r2, [r0, #24]
   12fec:	strd	r2, [r0, #32]
   12ff0:	strd	r2, [r0, #40]	; 0x28
   12ff4:	cmp	r1, #10
   12ff8:	beq	13004 <__assert_fail@plt+0x20fc>
   12ffc:	str	r1, [r0]
   13000:	bx	lr
   13004:	str	r4, [sp, #-8]!
   13008:	str	lr, [sp, #4]
   1300c:	bl	10efc <abort@plt>
   13010:	strd	r4, [sp, #-16]!
   13014:	str	r6, [sp, #8]
   13018:	str	lr, [sp, #12]
   1301c:	mov	r5, r0
   13020:	mov	r6, r1
   13024:	mov	r2, #5
   13028:	mov	r1, r0
   1302c:	mov	r0, #0
   13030:	bl	10d4c <dcgettext@plt>
   13034:	mov	r4, r0
   13038:	cmp	r5, r0
   1303c:	beq	13054 <__assert_fail@plt+0x214c>
   13040:	mov	r0, r4
   13044:	ldrd	r4, [sp]
   13048:	ldr	r6, [sp, #8]
   1304c:	add	sp, sp, #12
   13050:	pop	{pc}		; (ldr pc, [sp], #4)
   13054:	bl	16680 <__assert_fail@plt+0x5778>
   13058:	ldrb	r3, [r0]
   1305c:	bic	r3, r3, #32
   13060:	cmp	r3, #85	; 0x55
   13064:	bne	130e8 <__assert_fail@plt+0x21e0>
   13068:	ldrb	r3, [r0, #1]
   1306c:	bic	r3, r3, #32
   13070:	cmp	r3, #84	; 0x54
   13074:	bne	130ac <__assert_fail@plt+0x21a4>
   13078:	ldrb	r3, [r0, #2]
   1307c:	bic	r3, r3, #32
   13080:	cmp	r3, #70	; 0x46
   13084:	bne	130ac <__assert_fail@plt+0x21a4>
   13088:	ldrb	r3, [r0, #3]
   1308c:	cmp	r3, #45	; 0x2d
   13090:	bne	130ac <__assert_fail@plt+0x21a4>
   13094:	ldrb	r3, [r0, #4]
   13098:	cmp	r3, #56	; 0x38
   1309c:	bne	130ac <__assert_fail@plt+0x21a4>
   130a0:	ldrb	r3, [r0, #5]
   130a4:	cmp	r3, #0
   130a8:	beq	130c8 <__assert_fail@plt+0x21c0>
   130ac:	movw	r4, #27136	; 0x6a00
   130b0:	movt	r4, #1
   130b4:	movw	r3, #29100	; 0x71ac
   130b8:	movt	r3, #1
   130bc:	cmp	r6, #9
   130c0:	movne	r4, r3
   130c4:	b	13040 <__assert_fail@plt+0x2138>
   130c8:	ldrb	r2, [r4]
   130cc:	movw	r4, #29096	; 0x71a8
   130d0:	movt	r4, #1
   130d4:	movw	r3, #29084	; 0x719c
   130d8:	movt	r3, #1
   130dc:	cmp	r2, #96	; 0x60
   130e0:	movne	r4, r3
   130e4:	b	13040 <__assert_fail@plt+0x2138>
   130e8:	cmp	r3, #71	; 0x47
   130ec:	bne	130ac <__assert_fail@plt+0x21a4>
   130f0:	ldrb	r3, [r0, #1]
   130f4:	bic	r3, r3, #32
   130f8:	cmp	r3, #66	; 0x42
   130fc:	bne	130ac <__assert_fail@plt+0x21a4>
   13100:	ldrb	r3, [r0, #2]
   13104:	cmp	r3, #49	; 0x31
   13108:	bne	130ac <__assert_fail@plt+0x21a4>
   1310c:	ldrb	r3, [r0, #3]
   13110:	cmp	r3, #56	; 0x38
   13114:	bne	130ac <__assert_fail@plt+0x21a4>
   13118:	ldrb	r3, [r0, #4]
   1311c:	cmp	r3, #48	; 0x30
   13120:	bne	130ac <__assert_fail@plt+0x21a4>
   13124:	ldrb	r3, [r0, #5]
   13128:	cmp	r3, #51	; 0x33
   1312c:	bne	130ac <__assert_fail@plt+0x21a4>
   13130:	ldrb	r3, [r0, #6]
   13134:	cmp	r3, #48	; 0x30
   13138:	bne	130ac <__assert_fail@plt+0x21a4>
   1313c:	ldrb	r3, [r0, #7]
   13140:	cmp	r3, #0
   13144:	bne	130ac <__assert_fail@plt+0x21a4>
   13148:	ldrb	r2, [r4]
   1314c:	movw	r4, #29092	; 0x71a4
   13150:	movt	r4, #1
   13154:	movw	r3, #29088	; 0x71a0
   13158:	movt	r3, #1
   1315c:	cmp	r2, #96	; 0x60
   13160:	movne	r4, r3
   13164:	b	13040 <__assert_fail@plt+0x2138>
   13168:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1316c:	strd	r6, [sp, #8]
   13170:	strd	r8, [sp, #16]
   13174:	strd	sl, [sp, #24]
   13178:	str	lr, [sp, #32]
   1317c:	sub	sp, sp, #116	; 0x74
   13180:	str	r0, [sp, #64]	; 0x40
   13184:	mov	r8, r1
   13188:	str	r2, [sp, #48]	; 0x30
   1318c:	str	r3, [sp, #24]
   13190:	ldr	r7, [sp, #152]	; 0x98
   13194:	bl	10d94 <__ctype_get_mb_cur_max@plt>
   13198:	str	r0, [sp, #76]	; 0x4c
   1319c:	ldr	r3, [sp, #156]	; 0x9c
   131a0:	ubfx	r3, r3, #1, #1
   131a4:	str	r3, [sp, #32]
   131a8:	mov	r3, #1
   131ac:	str	r3, [sp, #40]	; 0x28
   131b0:	mov	r3, #0
   131b4:	str	r3, [sp, #68]	; 0x44
   131b8:	str	r3, [sp, #36]	; 0x24
   131bc:	str	r3, [sp, #28]
   131c0:	str	r3, [sp, #52]	; 0x34
   131c4:	str	r3, [sp, #60]	; 0x3c
   131c8:	str	r3, [sp, #72]	; 0x48
   131cc:	movw	r3, #29104	; 0x71b0
   131d0:	movt	r3, #1
   131d4:	str	r3, [sp, #80]	; 0x50
   131d8:	mov	r9, r8
   131dc:	mov	sl, r7
   131e0:	cmp	sl, #10
   131e4:	ldrls	pc, [pc, sl, lsl #2]
   131e8:	b	133ac <__assert_fail@plt+0x24a4>
   131ec:	andeq	r3, r1, ip, asr #4
   131f0:	andeq	r3, r1, r0, lsr #4
   131f4:	andeq	r3, r1, r4, lsl #7
   131f8:	andeq	r3, r1, r8, lsl r2
   131fc:	andeq	r3, r1, r8, lsr r3
   13200:	andeq	r3, r1, ip, asr r2
   13204:	andeq	r4, r1, r8, lsr #12
   13208:			; <UNDEFINED> instruction: 0x000133b0
   1320c:	muleq	r1, r8, r2
   13210:	muleq	r1, r8, r2
   13214:	muleq	r1, r8, r2
   13218:	mov	r3, #1
   1321c:	str	r3, [sp, #28]
   13220:	mov	r3, #1
   13224:	str	r3, [sp, #32]
   13228:	str	r3, [sp, #52]	; 0x34
   1322c:	movw	r3, #29100	; 0x71ac
   13230:	movt	r3, #1
   13234:	str	r3, [sp, #60]	; 0x3c
   13238:	mov	fp, #0
   1323c:	mov	sl, #2
   13240:	mov	r6, #0
   13244:	ldr	r8, [sp, #64]	; 0x40
   13248:	b	13ac0 <__assert_fail@plt+0x2bb8>
   1324c:	mov	fp, sl
   13250:	mov	r3, #0
   13254:	str	r3, [sp, #32]
   13258:	b	13240 <__assert_fail@plt+0x2338>
   1325c:	ldr	r3, [sp, #32]
   13260:	cmp	r3, #0
   13264:	bne	133c4 <__assert_fail@plt+0x24bc>
   13268:	cmp	r9, #0
   1326c:	beq	133e8 <__assert_fail@plt+0x24e0>
   13270:	mov	r3, #34	; 0x22
   13274:	ldr	r2, [sp, #64]	; 0x40
   13278:	strb	r3, [r2]
   1327c:	mov	fp, #1
   13280:	str	fp, [sp, #28]
   13284:	str	fp, [sp, #52]	; 0x34
   13288:	movw	r3, #27136	; 0x6a00
   1328c:	movt	r3, #1
   13290:	str	r3, [sp, #60]	; 0x3c
   13294:	b	13240 <__assert_fail@plt+0x2338>
   13298:	cmp	sl, #10
   1329c:	bne	132d0 <__assert_fail@plt+0x23c8>
   132a0:	ldr	r3, [sp, #32]
   132a4:	cmp	r3, #0
   132a8:	movne	fp, #0
   132ac:	beq	132f8 <__assert_fail@plt+0x23f0>
   132b0:	ldr	r0, [sp, #168]	; 0xa8
   132b4:	bl	10e18 <strlen@plt>
   132b8:	str	r0, [sp, #52]	; 0x34
   132bc:	ldr	r3, [sp, #168]	; 0xa8
   132c0:	str	r3, [sp, #60]	; 0x3c
   132c4:	mov	r3, #1
   132c8:	str	r3, [sp, #28]
   132cc:	b	13240 <__assert_fail@plt+0x2338>
   132d0:	mov	r1, sl
   132d4:	ldr	r0, [sp, #80]	; 0x50
   132d8:	bl	13010 <__assert_fail@plt+0x2108>
   132dc:	str	r0, [sp, #164]	; 0xa4
   132e0:	mov	r1, sl
   132e4:	movw	r0, #29100	; 0x71ac
   132e8:	movt	r0, #1
   132ec:	bl	13010 <__assert_fail@plt+0x2108>
   132f0:	str	r0, [sp, #168]	; 0xa8
   132f4:	b	132a0 <__assert_fail@plt+0x2398>
   132f8:	ldr	r3, [sp, #164]	; 0xa4
   132fc:	ldrb	r3, [r3]
   13300:	cmp	r3, #0
   13304:	beq	13330 <__assert_fail@plt+0x2428>
   13308:	ldr	r2, [sp, #164]	; 0xa4
   1330c:	mov	fp, #0
   13310:	ldr	r1, [sp, #64]	; 0x40
   13314:	cmp	r9, fp
   13318:	strbhi	r3, [r1, fp]
   1331c:	add	fp, fp, #1
   13320:	ldrb	r3, [r2, #1]!
   13324:	cmp	r3, #0
   13328:	bne	13314 <__assert_fail@plt+0x240c>
   1332c:	b	132b0 <__assert_fail@plt+0x23a8>
   13330:	mov	fp, #0
   13334:	b	132b0 <__assert_fail@plt+0x23a8>
   13338:	ldr	r3, [sp, #32]
   1333c:	cmp	r3, #0
   13340:	bne	13220 <__assert_fail@plt+0x2318>
   13344:	mov	r3, #1
   13348:	str	r3, [sp, #28]
   1334c:	cmp	r9, #0
   13350:	beq	13404 <__assert_fail@plt+0x24fc>
   13354:	mov	r3, #39	; 0x27
   13358:	ldr	r2, [sp, #64]	; 0x40
   1335c:	strb	r3, [r2]
   13360:	mov	r3, #0
   13364:	str	r3, [sp, #32]
   13368:	mov	fp, #1
   1336c:	str	fp, [sp, #52]	; 0x34
   13370:	movw	r3, #29100	; 0x71ac
   13374:	movt	r3, #1
   13378:	str	r3, [sp, #60]	; 0x3c
   1337c:	mov	sl, #2
   13380:	b	13240 <__assert_fail@plt+0x2338>
   13384:	ldr	r3, [sp, #32]
   13388:	cmp	r3, #0
   1338c:	beq	1334c <__assert_fail@plt+0x2444>
   13390:	mov	r3, #1
   13394:	str	r3, [sp, #52]	; 0x34
   13398:	movw	r3, #29100	; 0x71ac
   1339c:	movt	r3, #1
   133a0:	str	r3, [sp, #60]	; 0x3c
   133a4:	mov	fp, #0
   133a8:	b	13240 <__assert_fail@plt+0x2338>
   133ac:	bl	10efc <abort@plt>
   133b0:	mov	fp, #0
   133b4:	str	fp, [sp, #32]
   133b8:	mov	r3, #1
   133bc:	str	r3, [sp, #28]
   133c0:	b	13240 <__assert_fail@plt+0x2338>
   133c4:	ldr	r3, [sp, #32]
   133c8:	str	r3, [sp, #28]
   133cc:	mov	r3, #1
   133d0:	str	r3, [sp, #52]	; 0x34
   133d4:	movw	r3, #27136	; 0x6a00
   133d8:	movt	r3, #1
   133dc:	str	r3, [sp, #60]	; 0x3c
   133e0:	mov	fp, #0
   133e4:	b	13240 <__assert_fail@plt+0x2338>
   133e8:	mov	fp, #1
   133ec:	str	fp, [sp, #28]
   133f0:	str	fp, [sp, #52]	; 0x34
   133f4:	movw	r3, #27136	; 0x6a00
   133f8:	movt	r3, #1
   133fc:	str	r3, [sp, #60]	; 0x3c
   13400:	b	13240 <__assert_fail@plt+0x2338>
   13404:	mov	r3, #0
   13408:	str	r3, [sp, #32]
   1340c:	mov	fp, #1
   13410:	str	fp, [sp, #52]	; 0x34
   13414:	movw	r3, #29100	; 0x71ac
   13418:	movt	r3, #1
   1341c:	str	r3, [sp, #60]	; 0x3c
   13420:	mov	sl, #2
   13424:	b	13240 <__assert_fail@plt+0x2338>
   13428:	mov	r3, r2
   1342c:	add	r4, r6, r2
   13430:	ldr	r2, [sp, #24]
   13434:	cmp	r3, #1
   13438:	movls	r3, #0
   1343c:	movhi	r3, #1
   13440:	cmn	r2, #1
   13444:	movne	r3, #0
   13448:	cmp	r3, #0
   1344c:	beq	1345c <__assert_fail@plt+0x2554>
   13450:	ldr	r0, [sp, #48]	; 0x30
   13454:	bl	10e18 <strlen@plt>
   13458:	str	r0, [sp, #24]
   1345c:	ldr	r3, [sp, #24]
   13460:	cmp	r4, r3
   13464:	bhi	14650 <__assert_fail@plt+0x3748>
   13468:	ldr	r3, [sp, #48]	; 0x30
   1346c:	add	r4, r3, r6
   13470:	ldr	r2, [sp, #52]	; 0x34
   13474:	ldr	r1, [sp, #60]	; 0x3c
   13478:	mov	r0, r4
   1347c:	bl	10d34 <memcmp@plt>
   13480:	cmp	r0, #0
   13484:	bne	14650 <__assert_fail@plt+0x3748>
   13488:	ldr	r3, [sp, #32]
   1348c:	cmp	r3, #0
   13490:	bne	136a0 <__assert_fail@plt+0x2798>
   13494:	ldrb	r4, [r4]
   13498:	cmp	r4, #126	; 0x7e
   1349c:	ldrls	pc, [pc, r4, lsl #2]
   134a0:	b	13f54 <__assert_fail@plt+0x304c>
   134a4:	andeq	r3, r1, r4, ror #13
   134a8:	andeq	r3, r1, r4, asr pc
   134ac:	andeq	r3, r1, r4, asr pc
   134b0:	andeq	r3, r1, r4, asr pc
   134b4:	andeq	r3, r1, r4, asr pc
   134b8:	andeq	r3, r1, r4, asr pc
   134bc:	andeq	r3, r1, r4, asr pc
   134c0:	strdeq	r3, [r1], -ip
   134c4:	andeq	r3, r1, r0, lsl #19
   134c8:	andeq	r3, r1, r4, lsr #26
   134cc:	ldrdeq	r3, [r1], -r0
   134d0:	andeq	r3, r1, r8, lsr sp
   134d4:	muleq	r1, r4, r9
   134d8:	andeq	r3, r1, r8, lsr #19
   134dc:	andeq	r3, r1, r4, asr pc
   134e0:	andeq	r3, r1, r4, asr pc
   134e4:	andeq	r3, r1, r4, asr pc
   134e8:	andeq	r3, r1, r4, asr pc
   134ec:	andeq	r3, r1, r4, asr pc
   134f0:	andeq	r3, r1, r4, asr pc
   134f4:	andeq	r3, r1, r4, asr pc
   134f8:	andeq	r3, r1, r4, asr pc
   134fc:	andeq	r3, r1, r4, asr pc
   13500:	andeq	r3, r1, r4, asr pc
   13504:	andeq	r3, r1, r4, asr pc
   13508:	andeq	r3, r1, r4, asr pc
   1350c:	andeq	r3, r1, r4, asr pc
   13510:	andeq	r3, r1, r4, asr pc
   13514:	andeq	r3, r1, r4, asr pc
   13518:	andeq	r3, r1, r4, asr pc
   1351c:	andeq	r3, r1, r4, asr pc
   13520:	andeq	r3, r1, r4, asr pc
   13524:	andeq	r3, r1, r0, ror lr
   13528:	muleq	r1, r4, lr
   1352c:	muleq	r1, r4, lr
   13530:	andeq	r3, r1, ip, lsr #28
   13534:	muleq	r1, r4, lr
   13538:			; <UNDEFINED> instruction: 0x000143b4
   1353c:	muleq	r1, r4, lr
   13540:			; <UNDEFINED> instruction: 0x00013eb4
   13544:	muleq	r1, r4, lr
   13548:	muleq	r1, r4, lr
   1354c:	muleq	r1, r4, lr
   13550:			; <UNDEFINED> instruction: 0x000143b4
   13554:			; <UNDEFINED> instruction: 0x000143b4
   13558:			; <UNDEFINED> instruction: 0x000143b4
   1355c:			; <UNDEFINED> instruction: 0x000143b4
   13560:			; <UNDEFINED> instruction: 0x000143b4
   13564:			; <UNDEFINED> instruction: 0x000143b4
   13568:			; <UNDEFINED> instruction: 0x000143b4
   1356c:			; <UNDEFINED> instruction: 0x000143b4
   13570:			; <UNDEFINED> instruction: 0x000143b4
   13574:			; <UNDEFINED> instruction: 0x000143b4
   13578:			; <UNDEFINED> instruction: 0x000143b4
   1357c:			; <UNDEFINED> instruction: 0x000143b4
   13580:			; <UNDEFINED> instruction: 0x000143b4
   13584:			; <UNDEFINED> instruction: 0x000143b4
   13588:			; <UNDEFINED> instruction: 0x000143b4
   1358c:			; <UNDEFINED> instruction: 0x000143b4
   13590:	muleq	r1, r4, lr
   13594:	muleq	r1, r4, lr
   13598:	muleq	r1, r4, lr
   1359c:	muleq	r1, r4, lr
   135a0:	andeq	r3, r1, r4, lsl r8
   135a4:	andeq	r3, r1, r4, asr pc
   135a8:			; <UNDEFINED> instruction: 0x000143b4
   135ac:			; <UNDEFINED> instruction: 0x000143b4
   135b0:			; <UNDEFINED> instruction: 0x000143b4
   135b4:			; <UNDEFINED> instruction: 0x000143b4
   135b8:			; <UNDEFINED> instruction: 0x000143b4
   135bc:			; <UNDEFINED> instruction: 0x000143b4
   135c0:			; <UNDEFINED> instruction: 0x000143b4
   135c4:			; <UNDEFINED> instruction: 0x000143b4
   135c8:			; <UNDEFINED> instruction: 0x000143b4
   135cc:			; <UNDEFINED> instruction: 0x000143b4
   135d0:			; <UNDEFINED> instruction: 0x000143b4
   135d4:			; <UNDEFINED> instruction: 0x000143b4
   135d8:			; <UNDEFINED> instruction: 0x000143b4
   135dc:			; <UNDEFINED> instruction: 0x000143b4
   135e0:			; <UNDEFINED> instruction: 0x000143b4
   135e4:			; <UNDEFINED> instruction: 0x000143b4
   135e8:			; <UNDEFINED> instruction: 0x000143b4
   135ec:			; <UNDEFINED> instruction: 0x000143b4
   135f0:			; <UNDEFINED> instruction: 0x000143b4
   135f4:			; <UNDEFINED> instruction: 0x000143b4
   135f8:			; <UNDEFINED> instruction: 0x000143b4
   135fc:			; <UNDEFINED> instruction: 0x000143b4
   13600:			; <UNDEFINED> instruction: 0x000143b4
   13604:			; <UNDEFINED> instruction: 0x000143b4
   13608:			; <UNDEFINED> instruction: 0x000143b4
   1360c:			; <UNDEFINED> instruction: 0x000143b4
   13610:	muleq	r1, r4, lr
   13614:	andeq	r3, r1, ip, asr #26
   13618:			; <UNDEFINED> instruction: 0x000143b4
   1361c:	muleq	r1, r4, lr
   13620:			; <UNDEFINED> instruction: 0x000143b4
   13624:	muleq	r1, r4, lr
   13628:			; <UNDEFINED> instruction: 0x000143b4
   1362c:			; <UNDEFINED> instruction: 0x000143b4
   13630:			; <UNDEFINED> instruction: 0x000143b4
   13634:			; <UNDEFINED> instruction: 0x000143b4
   13638:			; <UNDEFINED> instruction: 0x000143b4
   1363c:			; <UNDEFINED> instruction: 0x000143b4
   13640:			; <UNDEFINED> instruction: 0x000143b4
   13644:			; <UNDEFINED> instruction: 0x000143b4
   13648:			; <UNDEFINED> instruction: 0x000143b4
   1364c:			; <UNDEFINED> instruction: 0x000143b4
   13650:			; <UNDEFINED> instruction: 0x000143b4
   13654:			; <UNDEFINED> instruction: 0x000143b4
   13658:			; <UNDEFINED> instruction: 0x000143b4
   1365c:			; <UNDEFINED> instruction: 0x000143b4
   13660:			; <UNDEFINED> instruction: 0x000143b4
   13664:			; <UNDEFINED> instruction: 0x000143b4
   13668:			; <UNDEFINED> instruction: 0x000143b4
   1366c:			; <UNDEFINED> instruction: 0x000143b4
   13670:			; <UNDEFINED> instruction: 0x000143b4
   13674:			; <UNDEFINED> instruction: 0x000143b4
   13678:			; <UNDEFINED> instruction: 0x000143b4
   1367c:			; <UNDEFINED> instruction: 0x000143b4
   13680:			; <UNDEFINED> instruction: 0x000143b4
   13684:			; <UNDEFINED> instruction: 0x000143b4
   13688:			; <UNDEFINED> instruction: 0x000143b4
   1368c:			; <UNDEFINED> instruction: 0x000143b4
   13690:	andeq	r3, r1, ip, lsl #28
   13694:	muleq	r1, r4, lr
   13698:	andeq	r3, r1, ip, lsl #28
   1369c:	andeq	r3, r1, ip, lsr #28
   136a0:	mov	r8, r9
   136a4:	mov	r7, sl
   136a8:	b	145a8 <__assert_fail@plt+0x36a0>
   136ac:	ldr	r3, [sp, #28]
   136b0:	cmp	r3, #0
   136b4:	bne	136d4 <__assert_fail@plt+0x27cc>
   136b8:	ldr	r3, [sp, #156]	; 0x9c
   136bc:	tst	r3, #1
   136c0:	bne	13abc <__assert_fail@plt+0x2bb4>
   136c4:	ldr	r3, [sp, #28]
   136c8:	str	r3, [sp, #44]	; 0x2c
   136cc:	mov	r5, r3
   136d0:	b	139dc <__assert_fail@plt+0x2ad4>
   136d4:	ldr	r3, [sp, #32]
   136d8:	cmp	r3, #0
   136dc:	bne	14558 <__assert_fail@plt+0x3650>
   136e0:	str	r3, [sp, #44]	; 0x2c
   136e4:	ldr	r3, [sp, #36]	; 0x24
   136e8:	eor	r3, r3, #1
   136ec:	cmp	sl, #2
   136f0:	movne	r3, #0
   136f4:	andeq	r3, r3, #1
   136f8:	cmp	r3, #0
   136fc:	beq	13754 <__assert_fail@plt+0x284c>
   13700:	cmp	r9, fp
   13704:	movhi	r2, #39	; 0x27
   13708:	strbhi	r2, [r8, fp]
   1370c:	add	r2, fp, #1
   13710:	cmp	r9, r2
   13714:	movhi	r1, #36	; 0x24
   13718:	strbhi	r1, [r8, r2]
   1371c:	add	r2, fp, #2
   13720:	cmp	r9, r2
   13724:	movhi	r1, #39	; 0x27
   13728:	strbhi	r1, [r8, r2]
   1372c:	add	r2, fp, #3
   13730:	cmp	r9, r2
   13734:	bls	14614 <__assert_fail@plt+0x370c>
   13738:	mov	r1, #92	; 0x5c
   1373c:	strb	r1, [r8, r2]
   13740:	add	fp, fp, #4
   13744:	str	r3, [sp, #36]	; 0x24
   13748:	mov	r5, #0
   1374c:	mov	r4, #48	; 0x30
   13750:	b	13a28 <__assert_fail@plt+0x2b20>
   13754:	cmp	r9, fp
   13758:	bhi	13780 <__assert_fail@plt+0x2878>
   1375c:	add	r1, fp, #1
   13760:	ldr	r2, [sp, #56]	; 0x38
   13764:	cmp	r2, #0
   13768:	bne	137a8 <__assert_fail@plt+0x28a0>
   1376c:	mov	r3, r5
   13770:	ldr	r5, [sp, #56]	; 0x38
   13774:	mov	fp, r1
   13778:	mov	r4, #48	; 0x30
   1377c:	b	139dc <__assert_fail@plt+0x2ad4>
   13780:	mov	r2, #92	; 0x5c
   13784:	strb	r2, [r8, fp]
   13788:	add	r1, fp, #1
   1378c:	ldr	r2, [sp, #56]	; 0x38
   13790:	cmp	r2, #0
   13794:	moveq	r3, r5
   13798:	moveq	r5, r2
   1379c:	moveq	fp, r1
   137a0:	moveq	r4, #48	; 0x30
   137a4:	beq	13a28 <__assert_fail@plt+0x2b20>
   137a8:	add	r2, r6, #1
   137ac:	ldr	r0, [sp, #24]
   137b0:	cmp	r2, r0
   137b4:	bcs	137d0 <__assert_fail@plt+0x28c8>
   137b8:	ldr	r0, [sp, #48]	; 0x30
   137bc:	ldrb	r2, [r0, r2]
   137c0:	sub	r2, r2, #48	; 0x30
   137c4:	uxtb	r2, r2
   137c8:	cmp	r2, #9
   137cc:	bls	137e8 <__assert_fail@plt+0x28e0>
   137d0:	mov	r2, r3
   137d4:	mov	r3, r5
   137d8:	mov	r5, r2
   137dc:	mov	fp, r1
   137e0:	mov	r4, #48	; 0x30
   137e4:	b	13a00 <__assert_fail@plt+0x2af8>
   137e8:	cmp	r9, r1
   137ec:	movhi	r2, #48	; 0x30
   137f0:	strbhi	r2, [r8, r1]
   137f4:	add	r2, fp, #2
   137f8:	cmp	r9, r2
   137fc:	movhi	r1, #48	; 0x30
   13800:	strbhi	r1, [r8, r2]
   13804:	add	r1, fp, #3
   13808:	b	137d0 <__assert_fail@plt+0x28c8>
   1380c:	mov	r3, #0
   13810:	str	r3, [sp, #44]	; 0x2c
   13814:	cmp	sl, #2
   13818:	beq	13834 <__assert_fail@plt+0x292c>
   1381c:	cmp	sl, #5
   13820:	beq	1384c <__assert_fail@plt+0x2944>
   13824:	mov	r5, #0
   13828:	mov	r3, r5
   1382c:	mov	r4, #63	; 0x3f
   13830:	b	139dc <__assert_fail@plt+0x2ad4>
   13834:	ldr	r3, [sp, #32]
   13838:	cmp	r3, #0
   1383c:	bne	14564 <__assert_fail@plt+0x365c>
   13840:	mov	r5, r3
   13844:	mov	r4, #63	; 0x3f
   13848:	b	13f44 <__assert_fail@plt+0x303c>
   1384c:	ldr	r3, [sp, #156]	; 0x9c
   13850:	tst	r3, #4
   13854:	beq	1437c <__assert_fail@plt+0x3474>
   13858:	add	r2, r6, #2
   1385c:	ldr	r3, [sp, #24]
   13860:	cmp	r2, r3
   13864:	bcs	1438c <__assert_fail@plt+0x3484>
   13868:	ldr	r3, [sp, #48]	; 0x30
   1386c:	add	r3, r3, r6
   13870:	ldrb	r4, [r3, #1]
   13874:	cmp	r4, #63	; 0x3f
   13878:	movne	r5, #0
   1387c:	movne	r3, r5
   13880:	movne	r4, #63	; 0x3f
   13884:	bne	139dc <__assert_fail@plt+0x2ad4>
   13888:	ldr	r3, [sp, #48]	; 0x30
   1388c:	ldrb	r1, [r3, r2]
   13890:	sub	r3, r1, #33	; 0x21
   13894:	cmp	r3, #29
   13898:	ldrls	pc, [pc, r3, lsl #2]
   1389c:	b	1439c <__assert_fail@plt+0x3494>
   138a0:	andeq	r3, r1, r8, lsl r9
   138a4:	muleq	r1, ip, r3
   138a8:	muleq	r1, ip, r3
   138ac:	muleq	r1, ip, r3
   138b0:	muleq	r1, ip, r3
   138b4:	muleq	r1, ip, r3
   138b8:	andeq	r3, r1, r8, lsl r9
   138bc:	andeq	r3, r1, r8, lsl r9
   138c0:	andeq	r3, r1, r8, lsl r9
   138c4:	muleq	r1, ip, r3
   138c8:	muleq	r1, ip, r3
   138cc:	muleq	r1, ip, r3
   138d0:	andeq	r3, r1, r8, lsl r9
   138d4:	muleq	r1, ip, r3
   138d8:	andeq	r3, r1, r8, lsl r9
   138dc:	muleq	r1, ip, r3
   138e0:	muleq	r1, ip, r3
   138e4:	muleq	r1, ip, r3
   138e8:	muleq	r1, ip, r3
   138ec:	muleq	r1, ip, r3
   138f0:	muleq	r1, ip, r3
   138f4:	muleq	r1, ip, r3
   138f8:	muleq	r1, ip, r3
   138fc:	muleq	r1, ip, r3
   13900:	muleq	r1, ip, r3
   13904:	muleq	r1, ip, r3
   13908:	muleq	r1, ip, r3
   1390c:	andeq	r3, r1, r8, lsl r9
   13910:	andeq	r3, r1, r8, lsl r9
   13914:	andeq	r3, r1, r8, lsl r9
   13918:	ldr	r3, [sp, #32]
   1391c:	cmp	r3, #0
   13920:	bne	14608 <__assert_fail@plt+0x3700>
   13924:	cmp	r9, fp
   13928:	movhi	r3, #63	; 0x3f
   1392c:	strbhi	r3, [r8, fp]
   13930:	add	r3, fp, #1
   13934:	cmp	r9, r3
   13938:	movhi	r0, #34	; 0x22
   1393c:	strbhi	r0, [r8, r3]
   13940:	add	r3, fp, #2
   13944:	cmp	r9, r3
   13948:	movhi	r0, #34	; 0x22
   1394c:	strbhi	r0, [r8, r3]
   13950:	add	r3, fp, #3
   13954:	cmp	r9, r3
   13958:	movhi	r0, #63	; 0x3f
   1395c:	strbhi	r0, [r8, r3]
   13960:	add	fp, fp, #4
   13964:	ldr	r3, [sp, #32]
   13968:	mov	r5, r3
   1396c:	mov	r4, r1
   13970:	mov	r6, r2
   13974:	b	139dc <__assert_fail@plt+0x2ad4>
   13978:	mov	r3, #0
   1397c:	str	r3, [sp, #44]	; 0x2c
   13980:	mov	r4, #8
   13984:	mov	r3, #98	; 0x62
   13988:	b	139c8 <__assert_fail@plt+0x2ac0>
   1398c:	mov	r3, #0
   13990:	str	r3, [sp, #44]	; 0x2c
   13994:	mov	r4, #12
   13998:	mov	r3, #102	; 0x66
   1399c:	b	139c8 <__assert_fail@plt+0x2ac0>
   139a0:	mov	r3, #0
   139a4:	str	r3, [sp, #44]	; 0x2c
   139a8:	mov	r4, #13
   139ac:	mov	r3, #114	; 0x72
   139b0:	ldr	r2, [sp, #32]
   139b4:	cmp	sl, #2
   139b8:	movne	r2, #0
   139bc:	andeq	r2, r2, #1
   139c0:	cmp	r2, #0
   139c4:	bne	13de8 <__assert_fail@plt+0x2ee0>
   139c8:	ldr	r2, [sp, #28]
   139cc:	cmp	r2, #0
   139d0:	bne	143d0 <__assert_fail@plt+0x34c8>
   139d4:	mov	r5, r2
   139d8:	mov	r3, r2
   139dc:	ldr	r2, [sp, #28]
   139e0:	eor	r2, r2, #1
   139e4:	cmp	sl, #2
   139e8:	orreq	r2, r2, #1
   139ec:	eor	r2, r2, #1
   139f0:	ldr	r1, [sp, #32]
   139f4:	orr	r2, r1, r2
   139f8:	tst	r2, #255	; 0xff
   139fc:	beq	13a28 <__assert_fail@plt+0x2b20>
   13a00:	ldr	r2, [sp, #160]	; 0xa0
   13a04:	cmp	r2, #0
   13a08:	beq	13a28 <__assert_fail@plt+0x2b20>
   13a0c:	ubfx	r1, r4, #5, #8
   13a10:	and	r2, r4, #31
   13a14:	ldr	r0, [sp, #160]	; 0xa0
   13a18:	ldr	r1, [r0, r1, lsl #2]
   13a1c:	lsr	r2, r1, r2
   13a20:	tst	r2, #1
   13a24:	bne	13a34 <__assert_fail@plt+0x2b2c>
   13a28:	ldr	r2, [sp, #44]	; 0x2c
   13a2c:	cmp	r2, #0
   13a30:	beq	13d88 <__assert_fail@plt+0x2e80>
   13a34:	ldr	r3, [sp, #32]
   13a38:	cmp	r3, #0
   13a3c:	bne	14588 <__assert_fail@plt+0x3680>
   13a40:	ldr	r3, [sp, #36]	; 0x24
   13a44:	eor	r3, r3, #1
   13a48:	cmp	sl, #2
   13a4c:	movne	r3, #0
   13a50:	andeq	r3, r3, #1
   13a54:	cmp	r3, #0
   13a58:	beq	13a90 <__assert_fail@plt+0x2b88>
   13a5c:	cmp	r9, fp
   13a60:	movhi	r2, #39	; 0x27
   13a64:	strbhi	r2, [r8, fp]
   13a68:	add	r2, fp, #1
   13a6c:	cmp	r9, r2
   13a70:	movhi	r1, #36	; 0x24
   13a74:	strbhi	r1, [r8, r2]
   13a78:	add	r2, fp, #2
   13a7c:	cmp	r9, r2
   13a80:	movhi	r1, #39	; 0x27
   13a84:	strbhi	r1, [r8, r2]
   13a88:	add	fp, fp, #3
   13a8c:	str	r3, [sp, #36]	; 0x24
   13a90:	cmp	r9, fp
   13a94:	movhi	r3, #92	; 0x5c
   13a98:	strbhi	r3, [r8, fp]
   13a9c:	add	fp, fp, #1
   13aa0:	cmp	fp, r9
   13aa4:	strbcc	r4, [r8, fp]
   13aa8:	add	fp, fp, #1
   13aac:	cmp	r5, #0
   13ab0:	ldr	r3, [sp, #40]	; 0x28
   13ab4:	moveq	r3, r5
   13ab8:	str	r3, [sp, #40]	; 0x28
   13abc:	add	r6, r6, #1
   13ac0:	ldr	r3, [sp, #24]
   13ac4:	cmn	r3, #1
   13ac8:	beq	143f8 <__assert_fail@plt+0x34f0>
   13acc:	ldr	r3, [sp, #24]
   13ad0:	subs	r5, r3, r6
   13ad4:	movne	r5, #1
   13ad8:	cmp	r5, #0
   13adc:	beq	1440c <__assert_fail@plt+0x3504>
   13ae0:	ldr	r3, [sp, #28]
   13ae4:	cmp	sl, #2
   13ae8:	moveq	r3, #0
   13aec:	andne	r3, r3, #1
   13af0:	str	r3, [sp, #56]	; 0x38
   13af4:	ldr	r2, [sp, #52]	; 0x34
   13af8:	adds	r7, r2, #0
   13afc:	movne	r7, #1
   13b00:	ands	r3, r3, r7
   13b04:	str	r3, [sp, #44]	; 0x2c
   13b08:	bne	13428 <__assert_fail@plt+0x2520>
   13b0c:	ldr	r3, [sp, #48]	; 0x30
   13b10:	ldrb	r4, [r3, r6]
   13b14:	cmp	r4, #126	; 0x7e
   13b18:	ldrls	pc, [pc, r4, lsl #2]
   13b1c:	b	13f54 <__assert_fail@plt+0x304c>
   13b20:	andeq	r3, r1, ip, lsr #13
   13b24:	andeq	r3, r1, r4, asr pc
   13b28:	andeq	r3, r1, r4, asr pc
   13b2c:	andeq	r3, r1, r4, asr pc
   13b30:	andeq	r3, r1, r4, asr pc
   13b34:	andeq	r3, r1, r4, asr pc
   13b38:	andeq	r3, r1, r4, asr pc
   13b3c:	strdeq	r3, [r1], -r4
   13b40:	andeq	r3, r1, r0, lsl #19
   13b44:	andeq	r3, r1, r4, lsr #26
   13b48:	andeq	r3, r1, r8, asr #27
   13b4c:	andeq	r3, r1, r8, lsr sp
   13b50:	muleq	r1, r4, r9
   13b54:	andeq	r3, r1, r8, lsr #19
   13b58:	andeq	r3, r1, r4, asr pc
   13b5c:	andeq	r3, r1, r4, asr pc
   13b60:	andeq	r3, r1, r4, asr pc
   13b64:	andeq	r3, r1, r4, asr pc
   13b68:	andeq	r3, r1, r4, asr pc
   13b6c:	andeq	r3, r1, r4, asr pc
   13b70:	andeq	r3, r1, r4, asr pc
   13b74:	andeq	r3, r1, r4, asr pc
   13b78:	andeq	r3, r1, r4, asr pc
   13b7c:	andeq	r3, r1, r4, asr pc
   13b80:	andeq	r3, r1, r4, asr pc
   13b84:	andeq	r3, r1, r4, asr pc
   13b88:	andeq	r3, r1, r4, asr pc
   13b8c:	andeq	r3, r1, r4, asr pc
   13b90:	andeq	r3, r1, r4, asr pc
   13b94:	andeq	r3, r1, r4, asr pc
   13b98:	andeq	r3, r1, r4, asr pc
   13b9c:	andeq	r3, r1, r4, asr pc
   13ba0:	andeq	r3, r1, r0, ror lr
   13ba4:	andeq	r3, r1, ip, ror #28
   13ba8:	andeq	r3, r1, ip, ror #28
   13bac:	andeq	r3, r1, ip, lsr #28
   13bb0:	andeq	r3, r1, ip, ror #28
   13bb4:	andeq	r4, r1, r4, ror r3
   13bb8:	andeq	r3, r1, ip, ror #28
   13bbc:			; <UNDEFINED> instruction: 0x00013eb4
   13bc0:	andeq	r3, r1, ip, ror #28
   13bc4:	andeq	r3, r1, ip, ror #28
   13bc8:	andeq	r3, r1, ip, ror #28
   13bcc:	andeq	r4, r1, r4, ror r3
   13bd0:	andeq	r4, r1, r4, ror r3
   13bd4:	andeq	r4, r1, r4, ror r3
   13bd8:	andeq	r4, r1, r4, ror r3
   13bdc:	andeq	r4, r1, r4, ror r3
   13be0:	andeq	r4, r1, r4, ror r3
   13be4:	andeq	r4, r1, r4, ror r3
   13be8:	andeq	r4, r1, r4, ror r3
   13bec:	andeq	r4, r1, r4, ror r3
   13bf0:	andeq	r4, r1, r4, ror r3
   13bf4:	andeq	r4, r1, r4, ror r3
   13bf8:	andeq	r4, r1, r4, ror r3
   13bfc:	andeq	r4, r1, r4, ror r3
   13c00:	andeq	r4, r1, r4, ror r3
   13c04:	andeq	r4, r1, r4, ror r3
   13c08:	andeq	r4, r1, r4, ror r3
   13c0c:	andeq	r3, r1, ip, ror #28
   13c10:	andeq	r3, r1, ip, ror #28
   13c14:	andeq	r3, r1, ip, ror #28
   13c18:	andeq	r3, r1, ip, ror #28
   13c1c:	andeq	r3, r1, r4, lsl r8
   13c20:	andeq	r3, r1, r4, asr pc
   13c24:	andeq	r4, r1, r4, ror r3
   13c28:	andeq	r4, r1, r4, ror r3
   13c2c:	andeq	r4, r1, r4, ror r3
   13c30:	andeq	r4, r1, r4, ror r3
   13c34:	andeq	r4, r1, r4, ror r3
   13c38:	andeq	r4, r1, r4, ror r3
   13c3c:	andeq	r4, r1, r4, ror r3
   13c40:	andeq	r4, r1, r4, ror r3
   13c44:	andeq	r4, r1, r4, ror r3
   13c48:	andeq	r4, r1, r4, ror r3
   13c4c:	andeq	r4, r1, r4, ror r3
   13c50:	andeq	r4, r1, r4, ror r3
   13c54:	andeq	r4, r1, r4, ror r3
   13c58:	andeq	r4, r1, r4, ror r3
   13c5c:	andeq	r4, r1, r4, ror r3
   13c60:	andeq	r4, r1, r4, ror r3
   13c64:	andeq	r4, r1, r4, ror r3
   13c68:	andeq	r4, r1, r4, ror r3
   13c6c:	andeq	r4, r1, r4, ror r3
   13c70:	andeq	r4, r1, r4, ror r3
   13c74:	andeq	r4, r1, r4, ror r3
   13c78:	andeq	r4, r1, r4, ror r3
   13c7c:	andeq	r4, r1, r4, ror r3
   13c80:	andeq	r4, r1, r4, ror r3
   13c84:	andeq	r4, r1, r4, ror r3
   13c88:	andeq	r4, r1, r4, ror r3
   13c8c:	andeq	r3, r1, ip, ror #28
   13c90:	andeq	r3, r1, ip, asr #26
   13c94:	andeq	r4, r1, r4, ror r3
   13c98:	andeq	r3, r1, ip, ror #28
   13c9c:	andeq	r4, r1, r4, ror r3
   13ca0:	andeq	r3, r1, ip, ror #28
   13ca4:	andeq	r4, r1, r4, ror r3
   13ca8:	andeq	r4, r1, r4, ror r3
   13cac:	andeq	r4, r1, r4, ror r3
   13cb0:	andeq	r4, r1, r4, ror r3
   13cb4:	andeq	r4, r1, r4, ror r3
   13cb8:	andeq	r4, r1, r4, ror r3
   13cbc:	andeq	r4, r1, r4, ror r3
   13cc0:	andeq	r4, r1, r4, ror r3
   13cc4:	andeq	r4, r1, r4, ror r3
   13cc8:	andeq	r4, r1, r4, ror r3
   13ccc:	andeq	r4, r1, r4, ror r3
   13cd0:	andeq	r4, r1, r4, ror r3
   13cd4:	andeq	r4, r1, r4, ror r3
   13cd8:	andeq	r4, r1, r4, ror r3
   13cdc:	andeq	r4, r1, r4, ror r3
   13ce0:	andeq	r4, r1, r4, ror r3
   13ce4:	andeq	r4, r1, r4, ror r3
   13ce8:	andeq	r4, r1, r4, ror r3
   13cec:	andeq	r4, r1, r4, ror r3
   13cf0:	andeq	r4, r1, r4, ror r3
   13cf4:	andeq	r4, r1, r4, ror r3
   13cf8:	andeq	r4, r1, r4, ror r3
   13cfc:	andeq	r4, r1, r4, ror r3
   13d00:	andeq	r4, r1, r4, ror r3
   13d04:	andeq	r4, r1, r4, ror r3
   13d08:	andeq	r4, r1, r4, ror r3
   13d0c:	andeq	r3, r1, ip, lsl #28
   13d10:	andeq	r3, r1, ip, ror #28
   13d14:	andeq	r3, r1, ip, lsl #28
   13d18:	andeq	r3, r1, ip, lsr #28
   13d1c:	mov	r3, #0
   13d20:	str	r3, [sp, #44]	; 0x2c
   13d24:	mov	r4, #9
   13d28:	mov	r3, #116	; 0x74
   13d2c:	b	139b0 <__assert_fail@plt+0x2aa8>
   13d30:	mov	r3, #0
   13d34:	str	r3, [sp, #44]	; 0x2c
   13d38:	mov	r4, #11
   13d3c:	mov	r3, #118	; 0x76
   13d40:	b	139c8 <__assert_fail@plt+0x2ac0>
   13d44:	mov	r3, #0
   13d48:	str	r3, [sp, #44]	; 0x2c
   13d4c:	cmp	sl, #2
   13d50:	beq	13d74 <__assert_fail@plt+0x2e6c>
   13d54:	ldr	r3, [sp, #28]
   13d58:	ldr	r2, [sp, #32]
   13d5c:	and	r3, r3, r2
   13d60:	tst	r7, r3
   13d64:	bne	143e8 <__assert_fail@plt+0x34e0>
   13d68:	mov	r4, #92	; 0x5c
   13d6c:	mov	r3, r4
   13d70:	b	139c8 <__assert_fail@plt+0x2ac0>
   13d74:	ldr	r3, [sp, #32]
   13d78:	cmp	r3, #0
   13d7c:	bne	14570 <__assert_fail@plt+0x3668>
   13d80:	mov	r5, r3
   13d84:	mov	r4, #92	; 0x5c
   13d88:	eor	r3, r3, #1
   13d8c:	ldr	r2, [sp, #36]	; 0x24
   13d90:	and	r3, r3, r2
   13d94:	tst	r3, #255	; 0xff
   13d98:	beq	13aa0 <__assert_fail@plt+0x2b98>
   13d9c:	cmp	r9, fp
   13da0:	movhi	r3, #39	; 0x27
   13da4:	strbhi	r3, [r8, fp]
   13da8:	add	r3, fp, #1
   13dac:	cmp	r9, r3
   13db0:	movhi	r2, #39	; 0x27
   13db4:	strbhi	r2, [r8, r3]
   13db8:	add	fp, fp, #2
   13dbc:	mov	r3, #0
   13dc0:	str	r3, [sp, #36]	; 0x24
   13dc4:	b	13aa0 <__assert_fail@plt+0x2b98>
   13dc8:	mov	r3, #110	; 0x6e
   13dcc:	b	139b0 <__assert_fail@plt+0x2aa8>
   13dd0:	mov	r3, #110	; 0x6e
   13dd4:	b	139b0 <__assert_fail@plt+0x2aa8>
   13dd8:	mov	r3, #0
   13ddc:	str	r3, [sp, #44]	; 0x2c
   13de0:	mov	r3, #110	; 0x6e
   13de4:	b	139b0 <__assert_fail@plt+0x2aa8>
   13de8:	mov	r8, r9
   13dec:	mov	r7, #2
   13df0:	b	14590 <__assert_fail@plt+0x3688>
   13df4:	mov	r3, #97	; 0x61
   13df8:	b	139c8 <__assert_fail@plt+0x2ac0>
   13dfc:	mov	r3, #97	; 0x61
   13e00:	b	139c8 <__assert_fail@plt+0x2ac0>
   13e04:	mov	r3, #0
   13e08:	str	r3, [sp, #44]	; 0x2c
   13e0c:	ldr	r3, [sp, #24]
   13e10:	cmn	r3, #1
   13e14:	beq	13e40 <__assert_fail@plt+0x2f38>
   13e18:	ldr	r3, [sp, #24]
   13e1c:	subs	r3, r3, #1
   13e20:	movne	r3, #1
   13e24:	cmp	r3, #0
   13e28:	bne	143a8 <__assert_fail@plt+0x34a0>
   13e2c:	cmp	r6, #0
   13e30:	beq	13e70 <__assert_fail@plt+0x2f68>
   13e34:	mov	r5, #0
   13e38:	mov	r3, r5
   13e3c:	b	139dc <__assert_fail@plt+0x2ad4>
   13e40:	ldr	r3, [sp, #48]	; 0x30
   13e44:	ldrb	r3, [r3, #1]
   13e48:	adds	r3, r3, #0
   13e4c:	movne	r3, #1
   13e50:	b	13e24 <__assert_fail@plt+0x2f1c>
   13e54:	mov	r3, #0
   13e58:	str	r3, [sp, #44]	; 0x2c
   13e5c:	b	13e2c <__assert_fail@plt+0x2f24>
   13e60:	mov	r3, #0
   13e64:	str	r3, [sp, #44]	; 0x2c
   13e68:	b	13e70 <__assert_fail@plt+0x2f68>
   13e6c:	ldr	r5, [sp, #44]	; 0x2c
   13e70:	ldr	r3, [sp, #32]
   13e74:	cmp	sl, #2
   13e78:	movne	r3, #0
   13e7c:	andeq	r3, r3, #1
   13e80:	cmp	r3, #0
   13e84:	beq	139dc <__assert_fail@plt+0x2ad4>
   13e88:	mov	r8, r9
   13e8c:	mov	r7, #2
   13e90:	b	14590 <__assert_fail@plt+0x3688>
   13e94:	ldr	r5, [sp, #32]
   13e98:	b	13e70 <__assert_fail@plt+0x2f68>
   13e9c:	mov	r3, #0
   13ea0:	str	r3, [sp, #44]	; 0x2c
   13ea4:	mov	r5, r3
   13ea8:	b	13e70 <__assert_fail@plt+0x2f68>
   13eac:	mov	r3, #0
   13eb0:	str	r3, [sp, #44]	; 0x2c
   13eb4:	cmp	sl, #2
   13eb8:	strne	r5, [sp, #68]	; 0x44
   13ebc:	movne	r3, #0
   13ec0:	movne	r4, #39	; 0x27
   13ec4:	bne	139dc <__assert_fail@plt+0x2ad4>
   13ec8:	ldr	r3, [sp, #32]
   13ecc:	cmp	r3, #0
   13ed0:	bne	1457c <__assert_fail@plt+0x3674>
   13ed4:	ldr	r3, [sp, #72]	; 0x48
   13ed8:	clz	r3, r3
   13edc:	lsr	r3, r3, #5
   13ee0:	cmp	r9, #0
   13ee4:	moveq	r3, #0
   13ee8:	cmp	r3, #0
   13eec:	movne	r3, #0
   13ef0:	bne	13f18 <__assert_fail@plt+0x3010>
   13ef4:	cmp	r9, fp
   13ef8:	movhi	r3, #39	; 0x27
   13efc:	strbhi	r3, [r8, fp]
   13f00:	add	r3, fp, #1
   13f04:	cmp	r9, r3
   13f08:	movhi	r2, #92	; 0x5c
   13f0c:	strbhi	r2, [r8, r3]
   13f10:	mov	r3, r9
   13f14:	ldr	r9, [sp, #72]	; 0x48
   13f18:	add	r2, fp, #2
   13f1c:	cmp	r2, r3
   13f20:	movcc	r1, #39	; 0x27
   13f24:	strbcc	r1, [r8, r2]
   13f28:	add	fp, fp, #3
   13f2c:	str	r5, [sp, #68]	; 0x44
   13f30:	ldr	r2, [sp, #32]
   13f34:	str	r2, [sp, #36]	; 0x24
   13f38:	str	r9, [sp, #72]	; 0x48
   13f3c:	mov	r9, r3
   13f40:	mov	r4, #39	; 0x27
   13f44:	mov	r3, #0
   13f48:	b	13a28 <__assert_fail@plt+0x2b20>
   13f4c:	mov	r3, #0
   13f50:	str	r3, [sp, #44]	; 0x2c
   13f54:	ldr	r7, [sp, #76]	; 0x4c
   13f58:	cmp	r7, #1
   13f5c:	bne	13f94 <__assert_fail@plt+0x308c>
   13f60:	bl	10e00 <__ctype_b_loc@plt>
   13f64:	ldr	r2, [r0]
   13f68:	lsl	r3, r4, #1
   13f6c:	ldrh	r5, [r2, r3]
   13f70:	ubfx	r5, r5, #14, #1
   13f74:	mov	ip, r7
   13f78:	eor	r3, r5, #1
   13f7c:	ldr	r2, [sp, #28]
   13f80:	and	r3, r3, r2
   13f84:	ands	r3, r3, #255	; 0xff
   13f88:	beq	139dc <__assert_fail@plt+0x2ad4>
   13f8c:	mov	r5, #0
   13f90:	b	141f0 <__assert_fail@plt+0x32e8>
   13f94:	mov	r2, #0
   13f98:	mov	r3, #0
   13f9c:	strd	r2, [sp, #104]	; 0x68
   13fa0:	ldr	r3, [sp, #24]
   13fa4:	cmn	r3, #1
   13fa8:	beq	13fcc <__assert_fail@plt+0x30c4>
   13fac:	mov	r3, #0
   13fb0:	str	r4, [sp, #88]	; 0x58
   13fb4:	str	fp, [sp, #92]	; 0x5c
   13fb8:	str	r8, [sp, #56]	; 0x38
   13fbc:	mov	r8, r3
   13fc0:	str	r9, [sp, #84]	; 0x54
   13fc4:	ldr	r9, [sp, #48]	; 0x30
   13fc8:	b	14118 <__assert_fail@plt+0x3210>
   13fcc:	ldr	r0, [sp, #48]	; 0x30
   13fd0:	bl	10e18 <strlen@plt>
   13fd4:	str	r0, [sp, #24]
   13fd8:	b	13fac <__assert_fail@plt+0x30a4>
   13fdc:	mov	r1, fp
   13fe0:	ldr	r4, [sp, #88]	; 0x58
   13fe4:	mov	r2, r8
   13fe8:	mov	ip, r8
   13fec:	ldr	fp, [sp, #92]	; 0x5c
   13ff0:	ldr	r8, [sp, #56]	; 0x38
   13ff4:	ldr	r9, [sp, #84]	; 0x54
   13ff8:	ldr	r0, [sp, #24]
   13ffc:	cmp	r7, r0
   14000:	bcs	141b8 <__assert_fail@plt+0x32b0>
   14004:	ldrb	r3, [r1]
   14008:	cmp	r3, #0
   1400c:	beq	141c0 <__assert_fail@plt+0x32b8>
   14010:	mov	r3, r1
   14014:	add	r2, r2, #1
   14018:	add	r1, r6, r2
   1401c:	cmp	r0, r1
   14020:	bls	141c8 <__assert_fail@plt+0x32c0>
   14024:	ldrb	r1, [r3, #1]!
   14028:	cmp	r1, #0
   1402c:	bne	14014 <__assert_fail@plt+0x310c>
   14030:	mov	ip, r2
   14034:	mov	r5, #0
   14038:	b	141e8 <__assert_fail@plt+0x32e0>
   1403c:	ldr	r3, [sp, #56]	; 0x38
   14040:	str	r3, [sp, #64]	; 0x40
   14044:	ldr	r8, [sp, #84]	; 0x54
   14048:	mov	r7, #2
   1404c:	b	14590 <__assert_fail@plt+0x3688>
   14050:	cmp	r2, r7
   14054:	beq	140f4 <__assert_fail@plt+0x31ec>
   14058:	ldrb	r3, [r2], #1
   1405c:	sub	r3, r3, #91	; 0x5b
   14060:	cmp	r3, #33	; 0x21
   14064:	ldrls	pc, [pc, r3, lsl #2]
   14068:	b	14050 <__assert_fail@plt+0x3148>
   1406c:	andeq	r4, r1, ip, lsr r0
   14070:	andeq	r4, r1, ip, lsr r0
   14074:	andeq	r4, r1, r0, asr r0
   14078:	andeq	r4, r1, ip, lsr r0
   1407c:	andeq	r4, r1, r0, asr r0
   14080:	andeq	r4, r1, ip, lsr r0
   14084:	andeq	r4, r1, r0, asr r0
   14088:	andeq	r4, r1, r0, asr r0
   1408c:	andeq	r4, r1, r0, asr r0
   14090:	andeq	r4, r1, r0, asr r0
   14094:	andeq	r4, r1, r0, asr r0
   14098:	andeq	r4, r1, r0, asr r0
   1409c:	andeq	r4, r1, r0, asr r0
   140a0:	andeq	r4, r1, r0, asr r0
   140a4:	andeq	r4, r1, r0, asr r0
   140a8:	andeq	r4, r1, r0, asr r0
   140ac:	andeq	r4, r1, r0, asr r0
   140b0:	andeq	r4, r1, r0, asr r0
   140b4:	andeq	r4, r1, r0, asr r0
   140b8:	andeq	r4, r1, r0, asr r0
   140bc:	andeq	r4, r1, r0, asr r0
   140c0:	andeq	r4, r1, r0, asr r0
   140c4:	andeq	r4, r1, r0, asr r0
   140c8:	andeq	r4, r1, r0, asr r0
   140cc:	andeq	r4, r1, r0, asr r0
   140d0:	andeq	r4, r1, r0, asr r0
   140d4:	andeq	r4, r1, r0, asr r0
   140d8:	andeq	r4, r1, r0, asr r0
   140dc:	andeq	r4, r1, r0, asr r0
   140e0:	andeq	r4, r1, r0, asr r0
   140e4:	andeq	r4, r1, r0, asr r0
   140e8:	andeq	r4, r1, r0, asr r0
   140ec:	andeq	r4, r1, r0, asr r0
   140f0:	andeq	r4, r1, ip, lsr r0
   140f4:	ldr	r0, [sp, #100]	; 0x64
   140f8:	bl	10d70 <iswprint@plt>
   140fc:	cmp	r0, #0
   14100:	moveq	r5, #0
   14104:	add	r8, r8, r4
   14108:	add	r0, sp, #104	; 0x68
   1410c:	bl	10d1c <mbsinit@plt>
   14110:	cmp	r0, #0
   14114:	bne	14184 <__assert_fail@plt+0x327c>
   14118:	add	r7, r6, r8
   1411c:	add	fp, r9, r7
   14120:	add	r3, sp, #104	; 0x68
   14124:	ldr	r2, [sp, #24]
   14128:	sub	r2, r2, r7
   1412c:	mov	r1, fp
   14130:	add	r0, sp, #100	; 0x64
   14134:	bl	166c4 <__assert_fail@plt+0x57bc>
   14138:	subs	r4, r0, #0
   1413c:	beq	141d4 <__assert_fail@plt+0x32cc>
   14140:	cmn	r4, #1
   14144:	beq	1419c <__assert_fail@plt+0x3294>
   14148:	cmn	r4, #2
   1414c:	beq	13fdc <__assert_fail@plt+0x30d4>
   14150:	ldr	r3, [sp, #32]
   14154:	cmp	sl, #2
   14158:	movne	r3, #0
   1415c:	andeq	r3, r3, #1
   14160:	cmp	r3, #0
   14164:	beq	140f4 <__assert_fail@plt+0x31ec>
   14168:	cmp	r4, #1
   1416c:	bls	140f4 <__assert_fail@plt+0x31ec>
   14170:	add	r2, r7, #1
   14174:	add	r2, r9, r2
   14178:	add	r3, r9, r4
   1417c:	add	r7, r3, r7
   14180:	b	14058 <__assert_fail@plt+0x3150>
   14184:	ldr	r4, [sp, #88]	; 0x58
   14188:	mov	ip, r8
   1418c:	ldr	fp, [sp, #92]	; 0x5c
   14190:	ldr	r8, [sp, #56]	; 0x38
   14194:	ldr	r9, [sp, #84]	; 0x54
   14198:	b	141e8 <__assert_fail@plt+0x32e0>
   1419c:	ldr	r4, [sp, #88]	; 0x58
   141a0:	mov	ip, r8
   141a4:	ldr	fp, [sp, #92]	; 0x5c
   141a8:	ldr	r8, [sp, #56]	; 0x38
   141ac:	ldr	r9, [sp, #84]	; 0x54
   141b0:	mov	r5, #0
   141b4:	b	141e8 <__assert_fail@plt+0x32e0>
   141b8:	mov	r5, #0
   141bc:	b	141e8 <__assert_fail@plt+0x32e0>
   141c0:	mov	r5, #0
   141c4:	b	141e8 <__assert_fail@plt+0x32e0>
   141c8:	mov	ip, r2
   141cc:	mov	r5, #0
   141d0:	b	141e8 <__assert_fail@plt+0x32e0>
   141d4:	ldr	r4, [sp, #88]	; 0x58
   141d8:	mov	ip, r8
   141dc:	ldr	fp, [sp, #92]	; 0x5c
   141e0:	ldr	r8, [sp, #56]	; 0x38
   141e4:	ldr	r9, [sp, #84]	; 0x54
   141e8:	cmp	ip, #1
   141ec:	bls	13f78 <__assert_fail@plt+0x3070>
   141f0:	add	lr, r6, ip
   141f4:	ldr	r3, [sp, #48]	; 0x30
   141f8:	add	r1, r3, r6
   141fc:	mov	r3, #0
   14200:	eor	r0, r5, #1
   14204:	ldr	r2, [sp, #28]
   14208:	and	r0, r0, r2
   1420c:	uxtb	r0, r0
   14210:	str	r0, [sp, #56]	; 0x38
   14214:	mov	r7, #92	; 0x5c
   14218:	ldr	ip, [sp, #36]	; 0x24
   1421c:	str	r5, [sp, #84]	; 0x54
   14220:	ldr	r2, [sp, #44]	; 0x2c
   14224:	b	14294 <__assert_fail@plt+0x338c>
   14228:	cmp	r2, #0
   1422c:	beq	1423c <__assert_fail@plt+0x3334>
   14230:	cmp	r9, fp
   14234:	strbhi	r7, [r8, fp]
   14238:	add	fp, fp, #1
   1423c:	add	r5, r6, #1
   14240:	cmp	r5, lr
   14244:	bcs	14350 <__assert_fail@plt+0x3448>
   14248:	eor	r2, r3, #1
   1424c:	and	r2, r2, ip
   14250:	ands	r2, r2, #255	; 0xff
   14254:	beq	1436c <__assert_fail@plt+0x3464>
   14258:	cmp	r9, fp
   1425c:	movhi	r2, #39	; 0x27
   14260:	strbhi	r2, [r8, fp]
   14264:	add	r2, fp, #1
   14268:	cmp	r9, r2
   1426c:	movhi	ip, #39	; 0x27
   14270:	strbhi	ip, [r8, r2]
   14274:	add	fp, fp, #2
   14278:	ldr	ip, [sp, #56]	; 0x38
   1427c:	mov	r2, ip
   14280:	mov	r6, r5
   14284:	cmp	r9, fp
   14288:	strbhi	r4, [r8, fp]
   1428c:	add	fp, fp, #1
   14290:	ldrb	r4, [r1, #1]!
   14294:	cmp	r0, #0
   14298:	beq	14228 <__assert_fail@plt+0x3320>
   1429c:	ldr	r3, [sp, #32]
   142a0:	cmp	r3, #0
   142a4:	bne	14538 <__assert_fail@plt+0x3630>
   142a8:	eor	r3, ip, #1
   142ac:	cmp	sl, #2
   142b0:	movne	r3, #0
   142b4:	andeq	r3, r3, #1
   142b8:	cmp	r3, #0
   142bc:	beq	142f4 <__assert_fail@plt+0x33ec>
   142c0:	cmp	r9, fp
   142c4:	movhi	ip, #39	; 0x27
   142c8:	strbhi	ip, [r8, fp]
   142cc:	add	ip, fp, #1
   142d0:	cmp	r9, ip
   142d4:	movhi	r5, #36	; 0x24
   142d8:	strbhi	r5, [r8, ip]
   142dc:	add	ip, fp, #2
   142e0:	cmp	r9, ip
   142e4:	movhi	r5, #39	; 0x27
   142e8:	strbhi	r5, [r8, ip]
   142ec:	add	fp, fp, #3
   142f0:	mov	ip, r3
   142f4:	cmp	r9, fp
   142f8:	strbhi	r7, [r8, fp]
   142fc:	add	r3, fp, #1
   14300:	cmp	r9, r3
   14304:	bls	14314 <__assert_fail@plt+0x340c>
   14308:	lsr	r5, r4, #6
   1430c:	add	r5, r5, #48	; 0x30
   14310:	strb	r5, [r8, r3]
   14314:	add	r3, fp, #2
   14318:	cmp	r9, r3
   1431c:	bls	1432c <__assert_fail@plt+0x3424>
   14320:	ubfx	r5, r4, #3, #3
   14324:	add	r5, r5, #48	; 0x30
   14328:	strb	r5, [r8, r3]
   1432c:	add	fp, fp, #3
   14330:	and	r4, r4, #7
   14334:	add	r4, r4, #48	; 0x30
   14338:	add	r5, r6, #1
   1433c:	cmp	r5, lr
   14340:	bcs	1435c <__assert_fail@plt+0x3454>
   14344:	ldr	r3, [sp, #56]	; 0x38
   14348:	mov	r6, r5
   1434c:	b	14284 <__assert_fail@plt+0x337c>
   14350:	str	ip, [sp, #36]	; 0x24
   14354:	ldr	r5, [sp, #84]	; 0x54
   14358:	b	13d88 <__assert_fail@plt+0x2e80>
   1435c:	str	ip, [sp, #36]	; 0x24
   14360:	ldr	r5, [sp, #84]	; 0x54
   14364:	mov	r3, r0
   14368:	b	13d88 <__assert_fail@plt+0x2e80>
   1436c:	mov	r6, r5
   14370:	b	14284 <__assert_fail@plt+0x337c>
   14374:	ldr	r3, [sp, #44]	; 0x2c
   14378:	b	139dc <__assert_fail@plt+0x2ad4>
   1437c:	mov	r5, #0
   14380:	mov	r3, r5
   14384:	mov	r4, #63	; 0x3f
   14388:	b	139dc <__assert_fail@plt+0x2ad4>
   1438c:	mov	r5, #0
   14390:	mov	r3, r5
   14394:	mov	r4, #63	; 0x3f
   14398:	b	139dc <__assert_fail@plt+0x2ad4>
   1439c:	mov	r5, #0
   143a0:	mov	r3, r5
   143a4:	b	139dc <__assert_fail@plt+0x2ad4>
   143a8:	mov	r5, #0
   143ac:	mov	r3, r5
   143b0:	b	139dc <__assert_fail@plt+0x2ad4>
   143b4:	ldr	r5, [sp, #44]	; 0x2c
   143b8:	ldr	r3, [sp, #32]
   143bc:	b	139dc <__assert_fail@plt+0x2ad4>
   143c0:	ldr	r5, [sp, #44]	; 0x2c
   143c4:	mov	r3, #0
   143c8:	str	r3, [sp, #44]	; 0x2c
   143cc:	b	139dc <__assert_fail@plt+0x2ad4>
   143d0:	mov	r4, r3
   143d4:	mov	r5, #0
   143d8:	b	13a34 <__assert_fail@plt+0x2b2c>
   143dc:	mov	r5, #0
   143e0:	mov	r4, #97	; 0x61
   143e4:	b	13a34 <__assert_fail@plt+0x2b2c>
   143e8:	mov	r5, #0
   143ec:	mov	r3, r5
   143f0:	mov	r4, #92	; 0x5c
   143f4:	b	13d88 <__assert_fail@plt+0x2e80>
   143f8:	ldr	r3, [sp, #48]	; 0x30
   143fc:	ldrb	r5, [r3, r6]
   14400:	adds	r5, r5, #0
   14404:	movne	r5, #1
   14408:	b	13ad8 <__assert_fail@plt+0x2bd0>
   1440c:	cmp	sl, #2
   14410:	movne	r3, #0
   14414:	moveq	r3, #1
   14418:	ldr	r1, [sp, #32]
   1441c:	cmp	fp, #0
   14420:	andeq	r2, r3, r1
   14424:	movne	r2, #0
   14428:	cmp	r2, #0
   1442c:	bne	1454c <__assert_fail@plt+0x3644>
   14430:	eor	r2, r1, #1
   14434:	uxtb	r2, r2
   14438:	and	r3, r3, r2
   1443c:	ldr	r1, [sp, #68]	; 0x44
   14440:	ands	r3, r1, r3
   14444:	beq	144d8 <__assert_fail@plt+0x35d0>
   14448:	ldr	r2, [sp, #40]	; 0x28
   1444c:	cmp	r2, #0
   14450:	bne	14488 <__assert_fail@plt+0x3580>
   14454:	ldr	r2, [sp, #72]	; 0x48
   14458:	adds	r2, r2, #0
   1445c:	movne	r2, #1
   14460:	cmp	r9, #0
   14464:	movne	r2, #0
   14468:	str	r2, [sp, #68]	; 0x44
   1446c:	mov	sl, #2
   14470:	ldr	r1, [sp, #40]	; 0x28
   14474:	str	r1, [sp, #32]
   14478:	cmp	r2, #0
   1447c:	beq	144cc <__assert_fail@plt+0x35c4>
   14480:	ldr	r9, [sp, #72]	; 0x48
   14484:	b	131e0 <__assert_fail@plt+0x22d8>
   14488:	ldr	r3, [sp, #168]	; 0xa8
   1448c:	str	r3, [sp, #16]
   14490:	ldr	r3, [sp, #164]	; 0xa4
   14494:	str	r3, [sp, #12]
   14498:	ldr	r3, [sp, #160]	; 0xa0
   1449c:	str	r3, [sp, #8]
   144a0:	ldr	r3, [sp, #156]	; 0x9c
   144a4:	str	r3, [sp, #4]
   144a8:	mov	r3, #5
   144ac:	str	r3, [sp]
   144b0:	ldr	r3, [sp, #24]
   144b4:	ldr	r2, [sp, #48]	; 0x30
   144b8:	ldr	r1, [sp, #72]	; 0x48
   144bc:	ldr	r0, [sp, #64]	; 0x40
   144c0:	bl	13168 <__assert_fail@plt+0x2260>
   144c4:	mov	fp, r0
   144c8:	b	145e8 <__assert_fail@plt+0x36e0>
   144cc:	mov	r8, r9
   144d0:	mov	r2, r3
   144d4:	b	144dc <__assert_fail@plt+0x35d4>
   144d8:	mov	r8, r9
   144dc:	ldr	r3, [sp, #60]	; 0x3c
   144e0:	cmp	r3, #0
   144e4:	moveq	r2, #0
   144e8:	andne	r2, r2, #1
   144ec:	cmp	r2, #0
   144f0:	beq	14520 <__assert_fail@plt+0x3618>
   144f4:	mov	r2, r3
   144f8:	ldrb	r3, [r3]
   144fc:	cmp	r3, #0
   14500:	beq	14520 <__assert_fail@plt+0x3618>
   14504:	ldr	r1, [sp, #64]	; 0x40
   14508:	cmp	r8, fp
   1450c:	strbhi	r3, [r1, fp]
   14510:	add	fp, fp, #1
   14514:	ldrb	r3, [r2, #1]!
   14518:	cmp	r3, #0
   1451c:	bne	14508 <__assert_fail@plt+0x3600>
   14520:	cmp	r8, fp
   14524:	bls	145e8 <__assert_fail@plt+0x36e0>
   14528:	mov	r3, #0
   1452c:	ldr	r2, [sp, #64]	; 0x40
   14530:	strb	r3, [r2, fp]
   14534:	b	145e8 <__assert_fail@plt+0x36e0>
   14538:	mov	r8, r9
   1453c:	mov	r7, sl
   14540:	ldr	r3, [sp, #32]
   14544:	str	r3, [sp, #28]
   14548:	b	14590 <__assert_fail@plt+0x3688>
   1454c:	mov	r8, r9
   14550:	mov	r7, #2
   14554:	b	14590 <__assert_fail@plt+0x3688>
   14558:	mov	r8, r9
   1455c:	mov	r7, sl
   14560:	b	14590 <__assert_fail@plt+0x3688>
   14564:	mov	r8, r9
   14568:	mov	r7, sl
   1456c:	b	14590 <__assert_fail@plt+0x3688>
   14570:	mov	r8, r9
   14574:	mov	r7, sl
   14578:	b	14590 <__assert_fail@plt+0x3688>
   1457c:	mov	r8, r9
   14580:	mov	r7, sl
   14584:	b	14590 <__assert_fail@plt+0x3688>
   14588:	mov	r8, r9
   1458c:	mov	r7, sl
   14590:	ldr	r3, [sp, #28]
   14594:	cmp	r7, #2
   14598:	movne	r3, #0
   1459c:	andeq	r3, r3, #1
   145a0:	cmp	r3, #0
   145a4:	movne	r7, #4
   145a8:	ldr	r3, [sp, #168]	; 0xa8
   145ac:	str	r3, [sp, #16]
   145b0:	ldr	r3, [sp, #164]	; 0xa4
   145b4:	str	r3, [sp, #12]
   145b8:	mov	r3, #0
   145bc:	str	r3, [sp, #8]
   145c0:	ldr	r3, [sp, #156]	; 0x9c
   145c4:	bic	r3, r3, #2
   145c8:	str	r3, [sp, #4]
   145cc:	str	r7, [sp]
   145d0:	ldr	r3, [sp, #24]
   145d4:	ldr	r2, [sp, #48]	; 0x30
   145d8:	mov	r1, r8
   145dc:	ldr	r0, [sp, #64]	; 0x40
   145e0:	bl	13168 <__assert_fail@plt+0x2260>
   145e4:	mov	fp, r0
   145e8:	mov	r0, fp
   145ec:	add	sp, sp, #116	; 0x74
   145f0:	ldrd	r4, [sp]
   145f4:	ldrd	r6, [sp, #8]
   145f8:	ldrd	r8, [sp, #16]
   145fc:	ldrd	sl, [sp, #24]
   14600:	add	sp, sp, #32
   14604:	pop	{pc}		; (ldr pc, [sp], #4)
   14608:	mov	r8, r9
   1460c:	mov	r7, sl
   14610:	b	145a8 <__assert_fail@plt+0x36a0>
   14614:	add	fp, fp, #4
   14618:	str	r3, [sp, #36]	; 0x24
   1461c:	mov	r5, #0
   14620:	mov	r4, #48	; 0x30
   14624:	b	139dc <__assert_fail@plt+0x2ad4>
   14628:	mov	r3, #1
   1462c:	str	r3, [sp, #32]
   14630:	str	r3, [sp, #28]
   14634:	str	r3, [sp, #52]	; 0x34
   14638:	movw	r3, #27136	; 0x6a00
   1463c:	movt	r3, #1
   14640:	str	r3, [sp, #60]	; 0x3c
   14644:	mov	fp, #0
   14648:	mov	sl, #5
   1464c:	b	13240 <__assert_fail@plt+0x2338>
   14650:	ldr	r3, [sp, #48]	; 0x30
   14654:	ldrb	r4, [r3, r6]
   14658:	cmp	r4, #126	; 0x7e
   1465c:	ldrls	pc, [pc, r4, lsl #2]
   14660:	b	13f4c <__assert_fail@plt+0x3044>
   14664:	ldrdeq	r3, [r1], -r4
   14668:	andeq	r3, r1, ip, asr #30
   1466c:	andeq	r3, r1, ip, asr #30
   14670:	andeq	r3, r1, ip, asr #30
   14674:	andeq	r3, r1, ip, asr #30
   14678:	andeq	r3, r1, ip, asr #30
   1467c:	andeq	r3, r1, ip, asr #30
   14680:	ldrdeq	r4, [r1], -ip
   14684:	andeq	r3, r1, r8, ror r9
   14688:	andeq	r3, r1, ip, lsl sp
   1468c:	ldrdeq	r3, [r1], -r8
   14690:	andeq	r3, r1, r0, lsr sp
   14694:	andeq	r3, r1, ip, lsl #19
   14698:	andeq	r3, r1, r0, lsr #19
   1469c:	andeq	r3, r1, ip, asr #30
   146a0:	andeq	r3, r1, ip, asr #30
   146a4:	andeq	r3, r1, ip, asr #30
   146a8:	andeq	r3, r1, ip, asr #30
   146ac:	andeq	r3, r1, ip, asr #30
   146b0:	andeq	r3, r1, ip, asr #30
   146b4:	andeq	r3, r1, ip, asr #30
   146b8:	andeq	r3, r1, ip, asr #30
   146bc:	andeq	r3, r1, ip, asr #30
   146c0:	andeq	r3, r1, ip, asr #30
   146c4:	andeq	r3, r1, ip, asr #30
   146c8:	andeq	r3, r1, ip, asr #30
   146cc:	andeq	r3, r1, ip, asr #30
   146d0:	andeq	r3, r1, ip, asr #30
   146d4:	andeq	r3, r1, ip, asr #30
   146d8:	andeq	r3, r1, ip, asr #30
   146dc:	andeq	r3, r1, ip, asr #30
   146e0:	andeq	r3, r1, ip, asr #30
   146e4:	andeq	r3, r1, r0, ror #28
   146e8:	muleq	r1, ip, lr
   146ec:	muleq	r1, ip, lr
   146f0:	andeq	r3, r1, r4, asr lr
   146f4:	muleq	r1, ip, lr
   146f8:	andeq	r4, r1, r0, asr #7
   146fc:	muleq	r1, ip, lr
   14700:	andeq	r3, r1, ip, lsr #29
   14704:	muleq	r1, ip, lr
   14708:	muleq	r1, ip, lr
   1470c:	muleq	r1, ip, lr
   14710:	andeq	r4, r1, r0, asr #7
   14714:	andeq	r4, r1, r0, asr #7
   14718:	andeq	r4, r1, r0, asr #7
   1471c:	andeq	r4, r1, r0, asr #7
   14720:	andeq	r4, r1, r0, asr #7
   14724:	andeq	r4, r1, r0, asr #7
   14728:	andeq	r4, r1, r0, asr #7
   1472c:	andeq	r4, r1, r0, asr #7
   14730:	andeq	r4, r1, r0, asr #7
   14734:	andeq	r4, r1, r0, asr #7
   14738:	andeq	r4, r1, r0, asr #7
   1473c:	andeq	r4, r1, r0, asr #7
   14740:	andeq	r4, r1, r0, asr #7
   14744:	andeq	r4, r1, r0, asr #7
   14748:	andeq	r4, r1, r0, asr #7
   1474c:	andeq	r4, r1, r0, asr #7
   14750:	muleq	r1, ip, lr
   14754:	muleq	r1, ip, lr
   14758:	muleq	r1, ip, lr
   1475c:	muleq	r1, ip, lr
   14760:	andeq	r3, r1, ip, lsl #16
   14764:	andeq	r3, r1, ip, asr #30
   14768:	andeq	r4, r1, r0, asr #7
   1476c:	andeq	r4, r1, r0, asr #7
   14770:	andeq	r4, r1, r0, asr #7
   14774:	andeq	r4, r1, r0, asr #7
   14778:	andeq	r4, r1, r0, asr #7
   1477c:	andeq	r4, r1, r0, asr #7
   14780:	andeq	r4, r1, r0, asr #7
   14784:	andeq	r4, r1, r0, asr #7
   14788:	andeq	r4, r1, r0, asr #7
   1478c:	andeq	r4, r1, r0, asr #7
   14790:	andeq	r4, r1, r0, asr #7
   14794:	andeq	r4, r1, r0, asr #7
   14798:	andeq	r4, r1, r0, asr #7
   1479c:	andeq	r4, r1, r0, asr #7
   147a0:	andeq	r4, r1, r0, asr #7
   147a4:	andeq	r4, r1, r0, asr #7
   147a8:	andeq	r4, r1, r0, asr #7
   147ac:	andeq	r4, r1, r0, asr #7
   147b0:	andeq	r4, r1, r0, asr #7
   147b4:	andeq	r4, r1, r0, asr #7
   147b8:	andeq	r4, r1, r0, asr #7
   147bc:	andeq	r4, r1, r0, asr #7
   147c0:	andeq	r4, r1, r0, asr #7
   147c4:	andeq	r4, r1, r0, asr #7
   147c8:	andeq	r4, r1, r0, asr #7
   147cc:	andeq	r4, r1, r0, asr #7
   147d0:	muleq	r1, ip, lr
   147d4:	andeq	r3, r1, r4, asr #26
   147d8:	andeq	r4, r1, r0, asr #7
   147dc:	muleq	r1, ip, lr
   147e0:	andeq	r4, r1, r0, asr #7
   147e4:	muleq	r1, ip, lr
   147e8:	andeq	r4, r1, r0, asr #7
   147ec:	andeq	r4, r1, r0, asr #7
   147f0:	andeq	r4, r1, r0, asr #7
   147f4:	andeq	r4, r1, r0, asr #7
   147f8:	andeq	r4, r1, r0, asr #7
   147fc:	andeq	r4, r1, r0, asr #7
   14800:	andeq	r4, r1, r0, asr #7
   14804:	andeq	r4, r1, r0, asr #7
   14808:	andeq	r4, r1, r0, asr #7
   1480c:	andeq	r4, r1, r0, asr #7
   14810:	andeq	r4, r1, r0, asr #7
   14814:	andeq	r4, r1, r0, asr #7
   14818:	andeq	r4, r1, r0, asr #7
   1481c:	andeq	r4, r1, r0, asr #7
   14820:	andeq	r4, r1, r0, asr #7
   14824:	andeq	r4, r1, r0, asr #7
   14828:	andeq	r4, r1, r0, asr #7
   1482c:	andeq	r4, r1, r0, asr #7
   14830:	andeq	r4, r1, r0, asr #7
   14834:	andeq	r4, r1, r0, asr #7
   14838:	andeq	r4, r1, r0, asr #7
   1483c:	andeq	r4, r1, r0, asr #7
   14840:	andeq	r4, r1, r0, asr #7
   14844:	andeq	r4, r1, r0, asr #7
   14848:	andeq	r4, r1, r0, asr #7
   1484c:	andeq	r4, r1, r0, asr #7
   14850:	andeq	r3, r1, r4, lsl #28
   14854:	muleq	r1, ip, lr
   14858:	andeq	r3, r1, r4, lsl #28
   1485c:	andeq	r3, r1, r4, asr lr
   14860:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14864:	strd	r6, [sp, #8]
   14868:	strd	r8, [sp, #16]
   1486c:	strd	sl, [sp, #24]
   14870:	str	lr, [sp, #32]
   14874:	sub	sp, sp, #52	; 0x34
   14878:	mov	r5, r0
   1487c:	str	r1, [sp, #24]
   14880:	str	r2, [sp, #28]
   14884:	mov	r4, r3
   14888:	bl	10e30 <__errno_location@plt>
   1488c:	str	r0, [sp, #32]
   14890:	ldr	r3, [r0]
   14894:	str	r3, [sp, #36]	; 0x24
   14898:	movw	r3, #33008	; 0x80f0
   1489c:	movt	r3, #2
   148a0:	ldr	r6, [r3]
   148a4:	cmn	r5, #-2147483647	; 0x80000001
   148a8:	movne	r3, #0
   148ac:	moveq	r3, #1
   148b0:	orrs	r3, r3, r5, lsr #31
   148b4:	bne	14a18 <__assert_fail@plt+0x3b10>
   148b8:	movw	r3, #33008	; 0x80f0
   148bc:	movt	r3, #2
   148c0:	ldr	r2, [r3, #4]
   148c4:	cmp	r2, r5
   148c8:	bgt	14938 <__assert_fail@plt+0x3a30>
   148cc:	str	r2, [sp, #44]	; 0x2c
   148d0:	add	r3, r3, #8
   148d4:	cmp	r6, r3
   148d8:	beq	14a1c <__assert_fail@plt+0x3b14>
   148dc:	sub	r2, r5, r2
   148e0:	mov	r3, #8
   148e4:	str	r3, [sp]
   148e8:	mvn	r3, #-2147483648	; 0x80000000
   148ec:	add	r2, r2, #1
   148f0:	add	r1, sp, #44	; 0x2c
   148f4:	mov	r0, r6
   148f8:	bl	15a20 <__assert_fail@plt+0x4b18>
   148fc:	mov	r6, r0
   14900:	movw	r3, #33008	; 0x80f0
   14904:	movt	r3, #2
   14908:	str	r0, [r3]
   1490c:	movw	r7, #33008	; 0x80f0
   14910:	movt	r7, #2
   14914:	ldr	r0, [r7, #4]
   14918:	ldr	r2, [sp, #44]	; 0x2c
   1491c:	sub	r2, r2, r0
   14920:	lsl	r2, r2, #3
   14924:	mov	r1, #0
   14928:	add	r0, r6, r0, lsl #3
   1492c:	bl	10e48 <memset@plt>
   14930:	ldr	r3, [sp, #44]	; 0x2c
   14934:	str	r3, [r7, #4]
   14938:	add	fp, r6, r5, lsl #3
   1493c:	ldr	r8, [r6, r5, lsl #3]
   14940:	ldr	r7, [fp, #4]
   14944:	ldr	r3, [r4, #4]
   14948:	orr	r9, r3, #1
   1494c:	add	sl, r4, #8
   14950:	ldr	r3, [r4, #44]	; 0x2c
   14954:	str	r3, [sp, #16]
   14958:	ldr	r3, [r4, #40]	; 0x28
   1495c:	str	r3, [sp, #12]
   14960:	str	sl, [sp, #8]
   14964:	str	r9, [sp, #4]
   14968:	ldr	r3, [r4]
   1496c:	str	r3, [sp]
   14970:	ldr	r3, [sp, #28]
   14974:	ldr	r2, [sp, #24]
   14978:	mov	r1, r8
   1497c:	mov	r0, r7
   14980:	bl	13168 <__assert_fail@plt+0x2260>
   14984:	cmp	r8, r0
   14988:	bhi	149ec <__assert_fail@plt+0x3ae4>
   1498c:	add	r8, r0, #1
   14990:	str	r8, [r6, r5, lsl #3]
   14994:	movw	r3, #672	; 0x2a0
   14998:	movt	r3, #3
   1499c:	cmp	r7, r3
   149a0:	beq	149ac <__assert_fail@plt+0x3aa4>
   149a4:	mov	r0, r7
   149a8:	bl	16620 <__assert_fail@plt+0x5718>
   149ac:	mov	r0, r8
   149b0:	bl	1581c <__assert_fail@plt+0x4914>
   149b4:	mov	r7, r0
   149b8:	str	r0, [fp, #4]
   149bc:	ldr	r3, [r4, #44]	; 0x2c
   149c0:	str	r3, [sp, #16]
   149c4:	ldr	r3, [r4, #40]	; 0x28
   149c8:	str	r3, [sp, #12]
   149cc:	str	sl, [sp, #8]
   149d0:	str	r9, [sp, #4]
   149d4:	ldr	r3, [r4]
   149d8:	str	r3, [sp]
   149dc:	ldr	r3, [sp, #28]
   149e0:	ldr	r2, [sp, #24]
   149e4:	mov	r1, r8
   149e8:	bl	13168 <__assert_fail@plt+0x2260>
   149ec:	ldr	r3, [sp, #32]
   149f0:	ldr	r2, [sp, #36]	; 0x24
   149f4:	str	r2, [r3]
   149f8:	mov	r0, r7
   149fc:	add	sp, sp, #52	; 0x34
   14a00:	ldrd	r4, [sp]
   14a04:	ldrd	r6, [sp, #8]
   14a08:	ldrd	r8, [sp, #16]
   14a0c:	ldrd	sl, [sp, #24]
   14a10:	add	sp, sp, #32
   14a14:	pop	{pc}		; (ldr pc, [sp], #4)
   14a18:	bl	10efc <abort@plt>
   14a1c:	sub	r2, r5, r2
   14a20:	mov	r3, #8
   14a24:	str	r3, [sp]
   14a28:	mvn	r3, #-2147483648	; 0x80000000
   14a2c:	add	r2, r2, #1
   14a30:	add	r1, sp, #44	; 0x2c
   14a34:	mov	r0, #0
   14a38:	bl	15a20 <__assert_fail@plt+0x4b18>
   14a3c:	mov	r6, r0
   14a40:	movw	r3, #33008	; 0x80f0
   14a44:	movt	r3, #2
   14a48:	str	r0, [r3]
   14a4c:	ldrd	r2, [r3, #8]
   14a50:	strd	r2, [r0]
   14a54:	b	1490c <__assert_fail@plt+0x3a04>
   14a58:	strd	r4, [sp, #-16]!
   14a5c:	str	r6, [sp, #8]
   14a60:	str	lr, [sp, #12]
   14a64:	mov	r4, r0
   14a68:	bl	10e30 <__errno_location@plt>
   14a6c:	mov	r5, r0
   14a70:	ldr	r6, [r0]
   14a74:	cmp	r4, #0
   14a78:	ldr	r3, [pc, #32]	; 14aa0 <__assert_fail@plt+0x3b98>
   14a7c:	moveq	r4, r3
   14a80:	mov	r1, #48	; 0x30
   14a84:	mov	r0, r4
   14a88:	bl	15b90 <__assert_fail@plt+0x4c88>
   14a8c:	str	r6, [r5]
   14a90:	ldrd	r4, [sp]
   14a94:	ldr	r6, [sp, #8]
   14a98:	add	sp, sp, #12
   14a9c:	pop	{pc}		; (ldr pc, [sp], #4)
   14aa0:	andeq	r0, r3, r0, lsr #7
   14aa4:	subs	r3, r0, #0
   14aa8:	ldr	r2, [pc, #8]	; 14ab8 <__assert_fail@plt+0x3bb0>
   14aac:	moveq	r3, r2
   14ab0:	ldr	r0, [r3]
   14ab4:	bx	lr
   14ab8:	andeq	r0, r3, r0, lsr #7
   14abc:	subs	r3, r0, #0
   14ac0:	ldr	r2, [pc, #8]	; 14ad0 <__assert_fail@plt+0x3bc8>
   14ac4:	moveq	r3, r2
   14ac8:	str	r1, [r3]
   14acc:	bx	lr
   14ad0:	andeq	r0, r3, r0, lsr #7
   14ad4:	push	{lr}		; (str lr, [sp, #-4]!)
   14ad8:	subs	r3, r0, #0
   14adc:	ldr	r0, [pc, #44]	; 14b10 <__assert_fail@plt+0x3c08>
   14ae0:	moveq	r3, r0
   14ae4:	add	r3, r3, #8
   14ae8:	lsr	lr, r1, #5
   14aec:	and	r1, r1, #31
   14af0:	ldr	ip, [r3, lr, lsl #2]
   14af4:	lsr	r0, ip, r1
   14af8:	eor	r2, r2, r0
   14afc:	and	r2, r2, #1
   14b00:	eor	r1, ip, r2, lsl r1
   14b04:	str	r1, [r3, lr, lsl #2]
   14b08:	and	r0, r0, #1
   14b0c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b10:	andeq	r0, r3, r0, lsr #7
   14b14:	subs	r3, r0, #0
   14b18:	ldr	r2, [pc, #12]	; 14b2c <__assert_fail@plt+0x3c24>
   14b1c:	moveq	r3, r2
   14b20:	ldr	r0, [r3, #4]
   14b24:	str	r1, [r3, #4]
   14b28:	bx	lr
   14b2c:	andeq	r0, r3, r0, lsr #7
   14b30:	subs	r3, r0, #0
   14b34:	ldr	r0, [pc, #44]	; 14b68 <__assert_fail@plt+0x3c60>
   14b38:	moveq	r3, r0
   14b3c:	mov	r0, #10
   14b40:	str	r0, [r3]
   14b44:	cmp	r2, #0
   14b48:	cmpne	r1, #0
   14b4c:	beq	14b5c <__assert_fail@plt+0x3c54>
   14b50:	str	r1, [r3, #40]	; 0x28
   14b54:	str	r2, [r3, #44]	; 0x2c
   14b58:	bx	lr
   14b5c:	str	r4, [sp, #-8]!
   14b60:	str	lr, [sp, #4]
   14b64:	bl	10efc <abort@plt>
   14b68:	andeq	r0, r3, r0, lsr #7
   14b6c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14b70:	strd	r6, [sp, #8]
   14b74:	strd	r8, [sp, #16]
   14b78:	str	sl, [sp, #24]
   14b7c:	str	lr, [sp, #28]
   14b80:	sub	sp, sp, #24
   14b84:	mov	r7, r0
   14b88:	mov	r8, r1
   14b8c:	mov	r9, r2
   14b90:	mov	sl, r3
   14b94:	ldr	r4, [sp, #56]	; 0x38
   14b98:	cmp	r4, #0
   14b9c:	ldr	r3, [pc, #104]	; 14c0c <__assert_fail@plt+0x3d04>
   14ba0:	moveq	r4, r3
   14ba4:	bl	10e30 <__errno_location@plt>
   14ba8:	mov	r5, r0
   14bac:	ldr	r6, [r0]
   14bb0:	ldr	r3, [r4, #44]	; 0x2c
   14bb4:	str	r3, [sp, #16]
   14bb8:	ldr	r3, [r4, #40]	; 0x28
   14bbc:	str	r3, [sp, #12]
   14bc0:	add	r3, r4, #8
   14bc4:	str	r3, [sp, #8]
   14bc8:	ldr	r3, [r4, #4]
   14bcc:	str	r3, [sp, #4]
   14bd0:	ldr	r3, [r4]
   14bd4:	str	r3, [sp]
   14bd8:	mov	r3, sl
   14bdc:	mov	r2, r9
   14be0:	mov	r1, r8
   14be4:	mov	r0, r7
   14be8:	bl	13168 <__assert_fail@plt+0x2260>
   14bec:	str	r6, [r5]
   14bf0:	add	sp, sp, #24
   14bf4:	ldrd	r4, [sp]
   14bf8:	ldrd	r6, [sp, #8]
   14bfc:	ldrd	r8, [sp, #16]
   14c00:	ldr	sl, [sp, #24]
   14c04:	add	sp, sp, #28
   14c08:	pop	{pc}		; (ldr pc, [sp], #4)
   14c0c:	andeq	r0, r3, r0, lsr #7
   14c10:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14c14:	strd	r6, [sp, #8]
   14c18:	strd	r8, [sp, #16]
   14c1c:	strd	sl, [sp, #24]
   14c20:	str	lr, [sp, #32]
   14c24:	sub	sp, sp, #44	; 0x2c
   14c28:	mov	r8, r0
   14c2c:	mov	sl, r1
   14c30:	mov	r6, r2
   14c34:	subs	r4, r3, #0
   14c38:	ldr	r3, [pc, #200]	; 14d08 <__assert_fail@plt+0x3e00>
   14c3c:	moveq	r4, r3
   14c40:	bl	10e30 <__errno_location@plt>
   14c44:	mov	r7, r0
   14c48:	ldr	fp, [r0]
   14c4c:	ldr	r5, [r4, #4]
   14c50:	cmp	r6, #0
   14c54:	orreq	r5, r5, #1
   14c58:	add	r9, r4, #8
   14c5c:	ldr	r3, [r4, #44]	; 0x2c
   14c60:	str	r3, [sp, #16]
   14c64:	ldr	r3, [r4, #40]	; 0x28
   14c68:	str	r3, [sp, #12]
   14c6c:	str	r9, [sp, #8]
   14c70:	str	r5, [sp, #4]
   14c74:	ldr	r3, [r4]
   14c78:	str	r3, [sp]
   14c7c:	str	sl, [sp, #36]	; 0x24
   14c80:	mov	r3, sl
   14c84:	str	r8, [sp, #32]
   14c88:	mov	r2, r8
   14c8c:	mov	r1, #0
   14c90:	mov	r0, r1
   14c94:	bl	13168 <__assert_fail@plt+0x2260>
   14c98:	mov	sl, r0
   14c9c:	add	r8, r0, #1
   14ca0:	mov	r0, r8
   14ca4:	bl	1581c <__assert_fail@plt+0x4914>
   14ca8:	str	r0, [sp, #28]
   14cac:	ldr	r3, [r4, #44]	; 0x2c
   14cb0:	str	r3, [sp, #16]
   14cb4:	ldr	r3, [r4, #40]	; 0x28
   14cb8:	str	r3, [sp, #12]
   14cbc:	str	r9, [sp, #8]
   14cc0:	str	r5, [sp, #4]
   14cc4:	ldr	r3, [r4]
   14cc8:	str	r3, [sp]
   14ccc:	ldr	r3, [sp, #36]	; 0x24
   14cd0:	ldr	r2, [sp, #32]
   14cd4:	mov	r1, r8
   14cd8:	bl	13168 <__assert_fail@plt+0x2260>
   14cdc:	str	fp, [r7]
   14ce0:	cmp	r6, #0
   14ce4:	strne	sl, [r6]
   14ce8:	ldr	r0, [sp, #28]
   14cec:	add	sp, sp, #44	; 0x2c
   14cf0:	ldrd	r4, [sp]
   14cf4:	ldrd	r6, [sp, #8]
   14cf8:	ldrd	r8, [sp, #16]
   14cfc:	ldrd	sl, [sp, #24]
   14d00:	add	sp, sp, #32
   14d04:	pop	{pc}		; (ldr pc, [sp], #4)
   14d08:	andeq	r0, r3, r0, lsr #7
   14d0c:	str	r4, [sp, #-8]!
   14d10:	str	lr, [sp, #4]
   14d14:	mov	r3, r2
   14d18:	mov	r2, #0
   14d1c:	bl	14c10 <__assert_fail@plt+0x3d08>
   14d20:	ldr	r4, [sp]
   14d24:	add	sp, sp, #4
   14d28:	pop	{pc}		; (ldr pc, [sp], #4)
   14d2c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14d30:	strd	r6, [sp, #8]
   14d34:	str	r8, [sp, #16]
   14d38:	str	lr, [sp, #20]
   14d3c:	movw	r3, #33008	; 0x80f0
   14d40:	movt	r3, #2
   14d44:	ldr	r7, [r3]
   14d48:	ldr	r3, [r3, #4]
   14d4c:	cmp	r3, #1
   14d50:	ble	14d7c <__assert_fail@plt+0x3e74>
   14d54:	mov	r4, #1
   14d58:	add	r6, r7, #4
   14d5c:	movw	r5, #33008	; 0x80f0
   14d60:	movt	r5, #2
   14d64:	ldr	r0, [r6, r4, lsl #3]
   14d68:	bl	16620 <__assert_fail@plt+0x5718>
   14d6c:	add	r4, r4, #1
   14d70:	ldr	r3, [r5, #4]
   14d74:	cmp	r3, r4
   14d78:	bgt	14d64 <__assert_fail@plt+0x3e5c>
   14d7c:	ldr	r0, [r7, #4]
   14d80:	movw	r3, #672	; 0x2a0
   14d84:	movt	r3, #3
   14d88:	cmp	r0, r3
   14d8c:	beq	14db0 <__assert_fail@plt+0x3ea8>
   14d90:	bl	16620 <__assert_fail@plt+0x5718>
   14d94:	movw	r3, #33008	; 0x80f0
   14d98:	movt	r3, #2
   14d9c:	mov	r2, #256	; 0x100
   14da0:	str	r2, [r3, #8]
   14da4:	movw	r2, #672	; 0x2a0
   14da8:	movt	r2, #3
   14dac:	str	r2, [r3, #12]
   14db0:	ldr	r3, [pc, #64]	; 14df8 <__assert_fail@plt+0x3ef0>
   14db4:	cmp	r7, r3
   14db8:	beq	14dd4 <__assert_fail@plt+0x3ecc>
   14dbc:	mov	r0, r7
   14dc0:	bl	16620 <__assert_fail@plt+0x5718>
   14dc4:	movw	r3, #33008	; 0x80f0
   14dc8:	movt	r3, #2
   14dcc:	add	r2, r3, #8
   14dd0:	str	r2, [r3]
   14dd4:	movw	r3, #33008	; 0x80f0
   14dd8:	movt	r3, #2
   14ddc:	mov	r2, #1
   14de0:	str	r2, [r3, #4]
   14de4:	ldrd	r4, [sp]
   14de8:	ldrd	r6, [sp, #8]
   14dec:	ldr	r8, [sp, #16]
   14df0:	add	sp, sp, #20
   14df4:	pop	{pc}		; (ldr pc, [sp], #4)
   14df8:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   14dfc:	str	r4, [sp, #-8]!
   14e00:	str	lr, [sp, #4]
   14e04:	ldr	r3, [pc, #16]	; 14e1c <__assert_fail@plt+0x3f14>
   14e08:	mvn	r2, #0
   14e0c:	bl	14860 <__assert_fail@plt+0x3958>
   14e10:	ldr	r4, [sp]
   14e14:	add	sp, sp, #4
   14e18:	pop	{pc}		; (ldr pc, [sp], #4)
   14e1c:	andeq	r0, r3, r0, lsr #7
   14e20:	str	r4, [sp, #-8]!
   14e24:	str	lr, [sp, #4]
   14e28:	ldr	r3, [pc, #12]	; 14e3c <__assert_fail@plt+0x3f34>
   14e2c:	bl	14860 <__assert_fail@plt+0x3958>
   14e30:	ldr	r4, [sp]
   14e34:	add	sp, sp, #4
   14e38:	pop	{pc}		; (ldr pc, [sp], #4)
   14e3c:	andeq	r0, r3, r0, lsr #7
   14e40:	str	r4, [sp, #-8]!
   14e44:	str	lr, [sp, #4]
   14e48:	mov	r1, r0
   14e4c:	mov	r0, #0
   14e50:	bl	14dfc <__assert_fail@plt+0x3ef4>
   14e54:	ldr	r4, [sp]
   14e58:	add	sp, sp, #4
   14e5c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e60:	str	r4, [sp, #-8]!
   14e64:	str	lr, [sp, #4]
   14e68:	mov	r2, r1
   14e6c:	mov	r1, r0
   14e70:	mov	r0, #0
   14e74:	bl	14e20 <__assert_fail@plt+0x3f18>
   14e78:	ldr	r4, [sp]
   14e7c:	add	sp, sp, #4
   14e80:	pop	{pc}		; (ldr pc, [sp], #4)
   14e84:	strd	r4, [sp, #-12]!
   14e88:	str	lr, [sp, #8]
   14e8c:	sub	sp, sp, #52	; 0x34
   14e90:	mov	r4, r0
   14e94:	mov	r5, r2
   14e98:	mov	r0, sp
   14e9c:	bl	12fd4 <__assert_fail@plt+0x20cc>
   14ea0:	mov	r3, sp
   14ea4:	mvn	r2, #0
   14ea8:	mov	r1, r5
   14eac:	mov	r0, r4
   14eb0:	bl	14860 <__assert_fail@plt+0x3958>
   14eb4:	add	sp, sp, #52	; 0x34
   14eb8:	ldrd	r4, [sp]
   14ebc:	add	sp, sp, #8
   14ec0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ec4:	strd	r4, [sp, #-16]!
   14ec8:	str	r6, [sp, #8]
   14ecc:	str	lr, [sp, #12]
   14ed0:	sub	sp, sp, #48	; 0x30
   14ed4:	mov	r4, r0
   14ed8:	mov	r5, r2
   14edc:	mov	r6, r3
   14ee0:	mov	r0, sp
   14ee4:	bl	12fd4 <__assert_fail@plt+0x20cc>
   14ee8:	mov	r3, sp
   14eec:	mov	r2, r6
   14ef0:	mov	r1, r5
   14ef4:	mov	r0, r4
   14ef8:	bl	14860 <__assert_fail@plt+0x3958>
   14efc:	add	sp, sp, #48	; 0x30
   14f00:	ldrd	r4, [sp]
   14f04:	ldr	r6, [sp, #8]
   14f08:	add	sp, sp, #12
   14f0c:	pop	{pc}		; (ldr pc, [sp], #4)
   14f10:	str	r4, [sp, #-8]!
   14f14:	str	lr, [sp, #4]
   14f18:	mov	r2, r1
   14f1c:	mov	r1, r0
   14f20:	mov	r0, #0
   14f24:	bl	14e84 <__assert_fail@plt+0x3f7c>
   14f28:	ldr	r4, [sp]
   14f2c:	add	sp, sp, #4
   14f30:	pop	{pc}		; (ldr pc, [sp], #4)
   14f34:	str	r4, [sp, #-8]!
   14f38:	str	lr, [sp, #4]
   14f3c:	mov	r3, r2
   14f40:	mov	r2, r1
   14f44:	mov	r1, r0
   14f48:	mov	r0, #0
   14f4c:	bl	14ec4 <__assert_fail@plt+0x3fbc>
   14f50:	ldr	r4, [sp]
   14f54:	add	sp, sp, #4
   14f58:	pop	{pc}		; (ldr pc, [sp], #4)
   14f5c:	strd	r4, [sp, #-12]!
   14f60:	str	lr, [sp, #8]
   14f64:	sub	sp, sp, #52	; 0x34
   14f68:	mov	r4, r0
   14f6c:	mov	r5, r1
   14f70:	mov	r1, r2
   14f74:	ldr	r0, [pc, #92]	; 14fd8 <__assert_fail@plt+0x40d0>
   14f78:	ldrd	r2, [r0]
   14f7c:	strd	r2, [sp]
   14f80:	ldrd	r2, [r0, #8]
   14f84:	strd	r2, [sp, #8]
   14f88:	ldrd	r2, [r0, #16]
   14f8c:	strd	r2, [sp, #16]
   14f90:	ldrd	r2, [r0, #24]
   14f94:	strd	r2, [sp, #24]
   14f98:	ldrd	r2, [r0, #32]
   14f9c:	strd	r2, [sp, #32]
   14fa0:	ldrd	r2, [r0, #40]	; 0x28
   14fa4:	strd	r2, [sp, #40]	; 0x28
   14fa8:	mov	r2, #1
   14fac:	mov	r0, sp
   14fb0:	bl	14ad4 <__assert_fail@plt+0x3bcc>
   14fb4:	mov	r3, sp
   14fb8:	mov	r2, r5
   14fbc:	mov	r1, r4
   14fc0:	mov	r0, #0
   14fc4:	bl	14860 <__assert_fail@plt+0x3958>
   14fc8:	add	sp, sp, #52	; 0x34
   14fcc:	ldrd	r4, [sp]
   14fd0:	add	sp, sp, #8
   14fd4:	pop	{pc}		; (ldr pc, [sp], #4)
   14fd8:	andeq	r0, r3, r0, lsr #7
   14fdc:	str	r4, [sp, #-8]!
   14fe0:	str	lr, [sp, #4]
   14fe4:	mov	r2, r1
   14fe8:	mvn	r1, #0
   14fec:	bl	14f5c <__assert_fail@plt+0x4054>
   14ff0:	ldr	r4, [sp]
   14ff4:	add	sp, sp, #4
   14ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   14ffc:	str	r4, [sp, #-8]!
   15000:	str	lr, [sp, #4]
   15004:	mov	r1, #58	; 0x3a
   15008:	bl	14fdc <__assert_fail@plt+0x40d4>
   1500c:	ldr	r4, [sp]
   15010:	add	sp, sp, #4
   15014:	pop	{pc}		; (ldr pc, [sp], #4)
   15018:	str	r4, [sp, #-8]!
   1501c:	str	lr, [sp, #4]
   15020:	mov	r2, #58	; 0x3a
   15024:	bl	14f5c <__assert_fail@plt+0x4054>
   15028:	ldr	r4, [sp]
   1502c:	add	sp, sp, #4
   15030:	pop	{pc}		; (ldr pc, [sp], #4)
   15034:	strd	r4, [sp, #-12]!
   15038:	str	lr, [sp, #8]
   1503c:	sub	sp, sp, #100	; 0x64
   15040:	mov	r4, r0
   15044:	mov	r5, r2
   15048:	mov	r0, sp
   1504c:	bl	12fd4 <__assert_fail@plt+0x20cc>
   15050:	ldrd	r2, [sp]
   15054:	strd	r2, [sp, #48]	; 0x30
   15058:	ldrd	r2, [sp, #8]
   1505c:	strd	r2, [sp, #56]	; 0x38
   15060:	ldrd	r2, [sp, #16]
   15064:	strd	r2, [sp, #64]	; 0x40
   15068:	ldrd	r2, [sp, #24]
   1506c:	strd	r2, [sp, #72]	; 0x48
   15070:	ldrd	r2, [sp, #32]
   15074:	strd	r2, [sp, #80]	; 0x50
   15078:	ldrd	r2, [sp, #40]	; 0x28
   1507c:	strd	r2, [sp, #88]	; 0x58
   15080:	mov	r2, #1
   15084:	mov	r1, #58	; 0x3a
   15088:	add	r0, sp, #48	; 0x30
   1508c:	bl	14ad4 <__assert_fail@plt+0x3bcc>
   15090:	add	r3, sp, #48	; 0x30
   15094:	mvn	r2, #0
   15098:	mov	r1, r5
   1509c:	mov	r0, r4
   150a0:	bl	14860 <__assert_fail@plt+0x3958>
   150a4:	add	sp, sp, #100	; 0x64
   150a8:	ldrd	r4, [sp]
   150ac:	add	sp, sp, #8
   150b0:	pop	{pc}		; (ldr pc, [sp], #4)
   150b4:	strd	r4, [sp, #-20]!	; 0xffffffec
   150b8:	strd	r6, [sp, #8]
   150bc:	str	lr, [sp, #16]
   150c0:	sub	sp, sp, #52	; 0x34
   150c4:	mov	r4, r0
   150c8:	mov	r5, r3
   150cc:	ldr	r3, [pc, #92]	; 15130 <__assert_fail@plt+0x4228>
   150d0:	ldrd	r6, [r3]
   150d4:	strd	r6, [sp]
   150d8:	ldrd	r6, [r3, #8]
   150dc:	strd	r6, [sp, #8]
   150e0:	ldrd	r6, [r3, #16]
   150e4:	strd	r6, [sp, #16]
   150e8:	ldrd	r6, [r3, #24]
   150ec:	strd	r6, [sp, #24]
   150f0:	ldrd	r6, [r3, #32]
   150f4:	strd	r6, [sp, #32]
   150f8:	ldrd	r6, [r3, #40]	; 0x28
   150fc:	strd	r6, [sp, #40]	; 0x28
   15100:	mov	r0, sp
   15104:	bl	14b30 <__assert_fail@plt+0x3c28>
   15108:	mov	r3, sp
   1510c:	ldr	r2, [sp, #72]	; 0x48
   15110:	mov	r1, r5
   15114:	mov	r0, r4
   15118:	bl	14860 <__assert_fail@plt+0x3958>
   1511c:	add	sp, sp, #52	; 0x34
   15120:	ldrd	r4, [sp]
   15124:	ldrd	r6, [sp, #8]
   15128:	add	sp, sp, #16
   1512c:	pop	{pc}		; (ldr pc, [sp], #4)
   15130:	andeq	r0, r3, r0, lsr #7
   15134:	push	{lr}		; (str lr, [sp, #-4]!)
   15138:	sub	sp, sp, #12
   1513c:	mvn	ip, #0
   15140:	str	ip, [sp]
   15144:	bl	150b4 <__assert_fail@plt+0x41ac>
   15148:	add	sp, sp, #12
   1514c:	pop	{pc}		; (ldr pc, [sp], #4)
   15150:	str	r4, [sp, #-8]!
   15154:	str	lr, [sp, #4]
   15158:	mov	r3, r2
   1515c:	mov	r2, r1
   15160:	mov	r1, r0
   15164:	mov	r0, #0
   15168:	bl	15134 <__assert_fail@plt+0x422c>
   1516c:	ldr	r4, [sp]
   15170:	add	sp, sp, #4
   15174:	pop	{pc}		; (ldr pc, [sp], #4)
   15178:	push	{lr}		; (str lr, [sp, #-4]!)
   1517c:	sub	sp, sp, #12
   15180:	str	r3, [sp]
   15184:	mov	r3, r2
   15188:	mov	r2, r1
   1518c:	mov	r1, r0
   15190:	mov	r0, #0
   15194:	bl	150b4 <__assert_fail@plt+0x41ac>
   15198:	add	sp, sp, #12
   1519c:	pop	{pc}		; (ldr pc, [sp], #4)
   151a0:	str	r4, [sp, #-8]!
   151a4:	str	lr, [sp, #4]
   151a8:	ldr	r3, [pc, #12]	; 151bc <__assert_fail@plt+0x42b4>
   151ac:	bl	14860 <__assert_fail@plt+0x3958>
   151b0:	ldr	r4, [sp]
   151b4:	add	sp, sp, #4
   151b8:	pop	{pc}		; (ldr pc, [sp], #4)
   151bc:	andeq	r8, r2, r0, lsl #2
   151c0:	str	r4, [sp, #-8]!
   151c4:	str	lr, [sp, #4]
   151c8:	mov	r2, r1
   151cc:	mov	r1, r0
   151d0:	mov	r0, #0
   151d4:	bl	151a0 <__assert_fail@plt+0x4298>
   151d8:	ldr	r4, [sp]
   151dc:	add	sp, sp, #4
   151e0:	pop	{pc}		; (ldr pc, [sp], #4)
   151e4:	str	r4, [sp, #-8]!
   151e8:	str	lr, [sp, #4]
   151ec:	mvn	r2, #0
   151f0:	bl	151a0 <__assert_fail@plt+0x4298>
   151f4:	ldr	r4, [sp]
   151f8:	add	sp, sp, #4
   151fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15200:	str	r4, [sp, #-8]!
   15204:	str	lr, [sp, #4]
   15208:	mov	r1, r0
   1520c:	mov	r0, #0
   15210:	bl	151e4 <__assert_fail@plt+0x42dc>
   15214:	ldr	r4, [sp]
   15218:	add	sp, sp, #4
   1521c:	pop	{pc}		; (ldr pc, [sp], #4)
   15220:	strd	r4, [sp, #-16]!
   15224:	str	r6, [sp, #8]
   15228:	str	lr, [sp, #12]
   1522c:	sub	sp, sp, #32
   15230:	mov	r4, r0
   15234:	ldr	r5, [sp, #48]	; 0x30
   15238:	ldr	r6, [sp, #52]	; 0x34
   1523c:	cmp	r1, #0
   15240:	beq	1530c <__assert_fail@plt+0x4404>
   15244:	str	r3, [sp, #4]
   15248:	str	r2, [sp]
   1524c:	mov	r3, r1
   15250:	movw	r2, #29208	; 0x7218
   15254:	movt	r2, #1
   15258:	mov	r1, #1
   1525c:	bl	10e6c <__fprintf_chk@plt>
   15260:	mov	r2, #5
   15264:	movw	r1, #29228	; 0x722c
   15268:	movt	r1, #1
   1526c:	mov	r0, #0
   15270:	bl	10d4c <dcgettext@plt>
   15274:	movw	r3, #2022	; 0x7e6
   15278:	str	r3, [sp]
   1527c:	mov	r3, r0
   15280:	movw	r2, #29956	; 0x7504
   15284:	movt	r2, #1
   15288:	mov	r1, #1
   1528c:	mov	r0, r4
   15290:	bl	10e6c <__fprintf_chk@plt>
   15294:	mov	r1, r4
   15298:	mov	r0, #10
   1529c:	bl	10d40 <fputc_unlocked@plt>
   152a0:	mov	r2, #5
   152a4:	movw	r1, #29232	; 0x7230
   152a8:	movt	r1, #1
   152ac:	mov	r0, #0
   152b0:	bl	10d4c <dcgettext@plt>
   152b4:	movw	r3, #29404	; 0x72dc
   152b8:	movt	r3, #1
   152bc:	mov	r2, r0
   152c0:	mov	r1, #1
   152c4:	mov	r0, r4
   152c8:	bl	10e6c <__fprintf_chk@plt>
   152cc:	mov	r1, r4
   152d0:	mov	r0, #10
   152d4:	bl	10d40 <fputc_unlocked@plt>
   152d8:	cmp	r6, #9
   152dc:	ldrls	pc, [pc, r6, lsl #2]
   152e0:	b	155e4 <__assert_fail@plt+0x46dc>
   152e4:	andeq	r5, r1, r0, asr r3
   152e8:	andeq	r5, r1, r8, lsr #6
   152ec:	andeq	r5, r1, r4, ror #6
   152f0:	muleq	r1, r8, r3
   152f4:	ldrdeq	r5, [r1], -r4
   152f8:	andeq	r5, r1, r8, lsl r4
   152fc:	andeq	r5, r1, r4, ror #8
   15300:			; <UNDEFINED> instruction: 0x000154b8
   15304:	andeq	r5, r1, r4, lsl r5
   15308:	andeq	r5, r1, r8, ror r5
   1530c:	str	r3, [sp]
   15310:	mov	r3, r2
   15314:	movw	r2, #29220	; 0x7224
   15318:	movt	r2, #1
   1531c:	mov	r1, #1
   15320:	bl	10e6c <__fprintf_chk@plt>
   15324:	b	15260 <__assert_fail@plt+0x4358>
   15328:	mov	r2, #5
   1532c:	movw	r1, #29440	; 0x7300
   15330:	movt	r1, #1
   15334:	mov	r0, #0
   15338:	bl	10d4c <dcgettext@plt>
   1533c:	ldr	r3, [r5]
   15340:	mov	r2, r0
   15344:	mov	r1, #1
   15348:	mov	r0, r4
   1534c:	bl	10e6c <__fprintf_chk@plt>
   15350:	add	sp, sp, #32
   15354:	ldrd	r4, [sp]
   15358:	ldr	r6, [sp, #8]
   1535c:	add	sp, sp, #12
   15360:	pop	{pc}		; (ldr pc, [sp], #4)
   15364:	mov	r2, #5
   15368:	movw	r1, #29456	; 0x7310
   1536c:	movt	r1, #1
   15370:	mov	r0, #0
   15374:	bl	10d4c <dcgettext@plt>
   15378:	ldr	r3, [r5, #4]
   1537c:	str	r3, [sp]
   15380:	ldr	r3, [r5]
   15384:	mov	r2, r0
   15388:	mov	r1, #1
   1538c:	mov	r0, r4
   15390:	bl	10e6c <__fprintf_chk@plt>
   15394:	b	15350 <__assert_fail@plt+0x4448>
   15398:	mov	r2, #5
   1539c:	movw	r1, #29480	; 0x7328
   153a0:	movt	r1, #1
   153a4:	mov	r0, #0
   153a8:	bl	10d4c <dcgettext@plt>
   153ac:	ldr	r3, [r5, #8]
   153b0:	str	r3, [sp, #4]
   153b4:	ldr	r3, [r5, #4]
   153b8:	str	r3, [sp]
   153bc:	ldr	r3, [r5]
   153c0:	mov	r2, r0
   153c4:	mov	r1, #1
   153c8:	mov	r0, r4
   153cc:	bl	10e6c <__fprintf_chk@plt>
   153d0:	b	15350 <__assert_fail@plt+0x4448>
   153d4:	mov	r2, #5
   153d8:	movw	r1, #29508	; 0x7344
   153dc:	movt	r1, #1
   153e0:	mov	r0, #0
   153e4:	bl	10d4c <dcgettext@plt>
   153e8:	ldr	r3, [r5, #12]
   153ec:	str	r3, [sp, #8]
   153f0:	ldr	r3, [r5, #8]
   153f4:	str	r3, [sp, #4]
   153f8:	ldr	r3, [r5, #4]
   153fc:	str	r3, [sp]
   15400:	ldr	r3, [r5]
   15404:	mov	r2, r0
   15408:	mov	r1, #1
   1540c:	mov	r0, r4
   15410:	bl	10e6c <__fprintf_chk@plt>
   15414:	b	15350 <__assert_fail@plt+0x4448>
   15418:	mov	r2, #5
   1541c:	movw	r1, #29540	; 0x7364
   15420:	movt	r1, #1
   15424:	mov	r0, #0
   15428:	bl	10d4c <dcgettext@plt>
   1542c:	ldr	r3, [r5, #16]
   15430:	str	r3, [sp, #12]
   15434:	ldr	r3, [r5, #12]
   15438:	str	r3, [sp, #8]
   1543c:	ldr	r3, [r5, #8]
   15440:	str	r3, [sp, #4]
   15444:	ldr	r3, [r5, #4]
   15448:	str	r3, [sp]
   1544c:	ldr	r3, [r5]
   15450:	mov	r2, r0
   15454:	mov	r1, #1
   15458:	mov	r0, r4
   1545c:	bl	10e6c <__fprintf_chk@plt>
   15460:	b	15350 <__assert_fail@plt+0x4448>
   15464:	mov	r2, #5
   15468:	movw	r1, #29576	; 0x7388
   1546c:	movt	r1, #1
   15470:	mov	r0, #0
   15474:	bl	10d4c <dcgettext@plt>
   15478:	ldr	r3, [r5, #20]
   1547c:	str	r3, [sp, #16]
   15480:	ldr	r3, [r5, #16]
   15484:	str	r3, [sp, #12]
   15488:	ldr	r3, [r5, #12]
   1548c:	str	r3, [sp, #8]
   15490:	ldr	r3, [r5, #8]
   15494:	str	r3, [sp, #4]
   15498:	ldr	r3, [r5, #4]
   1549c:	str	r3, [sp]
   154a0:	ldr	r3, [r5]
   154a4:	mov	r2, r0
   154a8:	mov	r1, #1
   154ac:	mov	r0, r4
   154b0:	bl	10e6c <__fprintf_chk@plt>
   154b4:	b	15350 <__assert_fail@plt+0x4448>
   154b8:	mov	r2, #5
   154bc:	movw	r1, #29616	; 0x73b0
   154c0:	movt	r1, #1
   154c4:	mov	r0, #0
   154c8:	bl	10d4c <dcgettext@plt>
   154cc:	ldr	r3, [r5, #24]
   154d0:	str	r3, [sp, #20]
   154d4:	ldr	r3, [r5, #20]
   154d8:	str	r3, [sp, #16]
   154dc:	ldr	r3, [r5, #16]
   154e0:	str	r3, [sp, #12]
   154e4:	ldr	r3, [r5, #12]
   154e8:	str	r3, [sp, #8]
   154ec:	ldr	r3, [r5, #8]
   154f0:	str	r3, [sp, #4]
   154f4:	ldr	r3, [r5, #4]
   154f8:	str	r3, [sp]
   154fc:	ldr	r3, [r5]
   15500:	mov	r2, r0
   15504:	mov	r1, #1
   15508:	mov	r0, r4
   1550c:	bl	10e6c <__fprintf_chk@plt>
   15510:	b	15350 <__assert_fail@plt+0x4448>
   15514:	mov	r2, #5
   15518:	movw	r1, #29660	; 0x73dc
   1551c:	movt	r1, #1
   15520:	mov	r0, #0
   15524:	bl	10d4c <dcgettext@plt>
   15528:	ldr	r3, [r5, #28]
   1552c:	str	r3, [sp, #24]
   15530:	ldr	r3, [r5, #24]
   15534:	str	r3, [sp, #20]
   15538:	ldr	r3, [r5, #20]
   1553c:	str	r3, [sp, #16]
   15540:	ldr	r3, [r5, #16]
   15544:	str	r3, [sp, #12]
   15548:	ldr	r3, [r5, #12]
   1554c:	str	r3, [sp, #8]
   15550:	ldr	r3, [r5, #8]
   15554:	str	r3, [sp, #4]
   15558:	ldr	r3, [r5, #4]
   1555c:	str	r3, [sp]
   15560:	ldr	r3, [r5]
   15564:	mov	r2, r0
   15568:	mov	r1, #1
   1556c:	mov	r0, r4
   15570:	bl	10e6c <__fprintf_chk@plt>
   15574:	b	15350 <__assert_fail@plt+0x4448>
   15578:	mov	r2, #5
   1557c:	movw	r1, #29708	; 0x740c
   15580:	movt	r1, #1
   15584:	mov	r0, #0
   15588:	bl	10d4c <dcgettext@plt>
   1558c:	ldr	r3, [r5, #32]
   15590:	str	r3, [sp, #28]
   15594:	ldr	r3, [r5, #28]
   15598:	str	r3, [sp, #24]
   1559c:	ldr	r3, [r5, #24]
   155a0:	str	r3, [sp, #20]
   155a4:	ldr	r3, [r5, #20]
   155a8:	str	r3, [sp, #16]
   155ac:	ldr	r3, [r5, #16]
   155b0:	str	r3, [sp, #12]
   155b4:	ldr	r3, [r5, #12]
   155b8:	str	r3, [sp, #8]
   155bc:	ldr	r3, [r5, #8]
   155c0:	str	r3, [sp, #4]
   155c4:	ldr	r3, [r5, #4]
   155c8:	str	r3, [sp]
   155cc:	ldr	r3, [r5]
   155d0:	mov	r2, r0
   155d4:	mov	r1, #1
   155d8:	mov	r0, r4
   155dc:	bl	10e6c <__fprintf_chk@plt>
   155e0:	b	15350 <__assert_fail@plt+0x4448>
   155e4:	mov	r2, #5
   155e8:	movw	r1, #29760	; 0x7440
   155ec:	movt	r1, #1
   155f0:	mov	r0, #0
   155f4:	bl	10d4c <dcgettext@plt>
   155f8:	ldr	r3, [r5, #32]
   155fc:	str	r3, [sp, #28]
   15600:	ldr	r3, [r5, #28]
   15604:	str	r3, [sp, #24]
   15608:	ldr	r3, [r5, #24]
   1560c:	str	r3, [sp, #20]
   15610:	ldr	r3, [r5, #20]
   15614:	str	r3, [sp, #16]
   15618:	ldr	r3, [r5, #16]
   1561c:	str	r3, [sp, #12]
   15620:	ldr	r3, [r5, #12]
   15624:	str	r3, [sp, #8]
   15628:	ldr	r3, [r5, #8]
   1562c:	str	r3, [sp, #4]
   15630:	ldr	r3, [r5, #4]
   15634:	str	r3, [sp]
   15638:	ldr	r3, [r5]
   1563c:	mov	r2, r0
   15640:	mov	r1, #1
   15644:	mov	r0, r4
   15648:	bl	10e6c <__fprintf_chk@plt>
   1564c:	b	15350 <__assert_fail@plt+0x4448>
   15650:	strd	r4, [sp, #-12]!
   15654:	str	lr, [sp, #8]
   15658:	sub	sp, sp, #12
   1565c:	ldr	r5, [sp, #24]
   15660:	ldr	ip, [r5]
   15664:	cmp	ip, #0
   15668:	beq	156a0 <__assert_fail@plt+0x4798>
   1566c:	mov	lr, r5
   15670:	mov	ip, #0
   15674:	add	ip, ip, #1
   15678:	ldr	r4, [lr, #4]!
   1567c:	cmp	r4, #0
   15680:	bne	15674 <__assert_fail@plt+0x476c>
   15684:	str	ip, [sp, #4]
   15688:	str	r5, [sp]
   1568c:	bl	15220 <__assert_fail@plt+0x4318>
   15690:	add	sp, sp, #12
   15694:	ldrd	r4, [sp]
   15698:	add	sp, sp, #8
   1569c:	pop	{pc}		; (ldr pc, [sp], #4)
   156a0:	mov	ip, #0
   156a4:	b	15684 <__assert_fail@plt+0x477c>
   156a8:	strd	r4, [sp, #-12]!
   156ac:	str	lr, [sp, #8]
   156b0:	sub	sp, sp, #52	; 0x34
   156b4:	ldr	r5, [sp, #64]	; 0x40
   156b8:	add	r4, sp, #8
   156bc:	mov	ip, #0
   156c0:	ldr	lr, [r5], #4
   156c4:	str	lr, [r4], #4
   156c8:	cmp	lr, #0
   156cc:	beq	156dc <__assert_fail@plt+0x47d4>
   156d0:	add	ip, ip, #1
   156d4:	cmp	ip, #10
   156d8:	bne	156c0 <__assert_fail@plt+0x47b8>
   156dc:	str	ip, [sp, #4]
   156e0:	add	ip, sp, #8
   156e4:	str	ip, [sp]
   156e8:	bl	15220 <__assert_fail@plt+0x4318>
   156ec:	add	sp, sp, #52	; 0x34
   156f0:	ldrd	r4, [sp]
   156f4:	add	sp, sp, #8
   156f8:	pop	{pc}		; (ldr pc, [sp], #4)
   156fc:	push	{r3}		; (str r3, [sp, #-4]!)
   15700:	push	{lr}		; (str lr, [sp, #-4]!)
   15704:	sub	sp, sp, #16
   15708:	add	r3, sp, #24
   1570c:	str	r3, [sp, #12]
   15710:	str	r3, [sp]
   15714:	ldr	r3, [sp, #20]
   15718:	bl	156a8 <__assert_fail@plt+0x47a0>
   1571c:	add	sp, sp, #16
   15720:	pop	{lr}		; (ldr lr, [sp], #4)
   15724:	add	sp, sp, #4
   15728:	bx	lr
   1572c:	str	r4, [sp, #-8]!
   15730:	str	lr, [sp, #4]
   15734:	movw	r3, #33100	; 0x814c
   15738:	movt	r3, #2
   1573c:	ldr	r1, [r3]
   15740:	mov	r0, #10
   15744:	bl	10d40 <fputc_unlocked@plt>
   15748:	mov	r2, #5
   1574c:	movw	r1, #29820	; 0x747c
   15750:	movt	r1, #1
   15754:	mov	r0, #0
   15758:	bl	10d4c <dcgettext@plt>
   1575c:	movw	r2, #29840	; 0x7490
   15760:	movt	r2, #1
   15764:	mov	r1, r0
   15768:	mov	r0, #1
   1576c:	bl	10e54 <__printf_chk@plt>
   15770:	mov	r2, #5
   15774:	movw	r1, #29864	; 0x74a8
   15778:	movt	r1, #1
   1577c:	mov	r0, #0
   15780:	bl	10d4c <dcgettext@plt>
   15784:	movw	r3, #28244	; 0x6e54
   15788:	movt	r3, #1
   1578c:	movw	r2, #28284	; 0x6e7c
   15790:	movt	r2, #1
   15794:	mov	r1, r0
   15798:	mov	r0, #1
   1579c:	bl	10e54 <__printf_chk@plt>
   157a0:	mov	r2, #5
   157a4:	movw	r1, #29884	; 0x74bc
   157a8:	movt	r1, #1
   157ac:	mov	r0, #0
   157b0:	bl	10d4c <dcgettext@plt>
   157b4:	movw	r2, #29924	; 0x74e4
   157b8:	movt	r2, #1
   157bc:	mov	r1, r0
   157c0:	mov	r0, #1
   157c4:	bl	10e54 <__printf_chk@plt>
   157c8:	ldr	r4, [sp]
   157cc:	add	sp, sp, #4
   157d0:	pop	{pc}		; (ldr pc, [sp], #4)
   157d4:	str	r4, [sp, #-8]!
   157d8:	str	lr, [sp, #4]
   157dc:	bl	164fc <__assert_fail@plt+0x55f4>
   157e0:	cmp	r0, #0
   157e4:	beq	157f4 <__assert_fail@plt+0x48ec>
   157e8:	ldr	r4, [sp]
   157ec:	add	sp, sp, #4
   157f0:	pop	{pc}		; (ldr pc, [sp], #4)
   157f4:	bl	15c68 <__assert_fail@plt+0x4d60>
   157f8:	str	r4, [sp, #-8]!
   157fc:	str	lr, [sp, #4]
   15800:	bl	164fc <__assert_fail@plt+0x55f4>
   15804:	cmp	r0, #0
   15808:	beq	15818 <__assert_fail@plt+0x4910>
   1580c:	ldr	r4, [sp]
   15810:	add	sp, sp, #4
   15814:	pop	{pc}		; (ldr pc, [sp], #4)
   15818:	bl	15c68 <__assert_fail@plt+0x4d60>
   1581c:	str	r4, [sp, #-8]!
   15820:	str	lr, [sp, #4]
   15824:	bl	157d4 <__assert_fail@plt+0x48cc>
   15828:	ldr	r4, [sp]
   1582c:	add	sp, sp, #4
   15830:	pop	{pc}		; (ldr pc, [sp], #4)
   15834:	strd	r4, [sp, #-16]!
   15838:	str	r6, [sp, #8]
   1583c:	str	lr, [sp, #12]
   15840:	mov	r5, r0
   15844:	mov	r4, r1
   15848:	bl	16538 <__assert_fail@plt+0x5630>
   1584c:	cmp	r0, #0
   15850:	beq	15864 <__assert_fail@plt+0x495c>
   15854:	ldrd	r4, [sp]
   15858:	ldr	r6, [sp, #8]
   1585c:	add	sp, sp, #12
   15860:	pop	{pc}		; (ldr pc, [sp], #4)
   15864:	adds	r4, r4, #0
   15868:	movne	r4, #1
   1586c:	cmp	r5, #0
   15870:	moveq	r4, #1
   15874:	cmp	r4, #0
   15878:	beq	15854 <__assert_fail@plt+0x494c>
   1587c:	bl	15c68 <__assert_fail@plt+0x4d60>
   15880:	str	r4, [sp, #-8]!
   15884:	str	lr, [sp, #4]
   15888:	cmp	r1, #0
   1588c:	orreq	r1, r1, #1
   15890:	bl	16538 <__assert_fail@plt+0x5630>
   15894:	cmp	r0, #0
   15898:	beq	158a8 <__assert_fail@plt+0x49a0>
   1589c:	ldr	r4, [sp]
   158a0:	add	sp, sp, #4
   158a4:	pop	{pc}		; (ldr pc, [sp], #4)
   158a8:	bl	15c68 <__assert_fail@plt+0x4d60>
   158ac:	strd	r4, [sp, #-16]!
   158b0:	str	r6, [sp, #8]
   158b4:	str	lr, [sp, #12]
   158b8:	mov	r4, r0
   158bc:	mov	r6, r1
   158c0:	mov	r5, r2
   158c4:	bl	16734 <__assert_fail@plt+0x582c>
   158c8:	cmp	r0, #0
   158cc:	beq	158e0 <__assert_fail@plt+0x49d8>
   158d0:	ldrd	r4, [sp]
   158d4:	ldr	r6, [sp, #8]
   158d8:	add	sp, sp, #12
   158dc:	pop	{pc}		; (ldr pc, [sp], #4)
   158e0:	cmp	r4, #0
   158e4:	beq	158f4 <__assert_fail@plt+0x49ec>
   158e8:	cmp	r6, #0
   158ec:	cmpne	r5, #0
   158f0:	beq	158d0 <__assert_fail@plt+0x49c8>
   158f4:	bl	15c68 <__assert_fail@plt+0x4d60>
   158f8:	str	r4, [sp, #-8]!
   158fc:	str	lr, [sp, #4]
   15900:	bl	158ac <__assert_fail@plt+0x49a4>
   15904:	ldr	r4, [sp]
   15908:	add	sp, sp, #4
   1590c:	pop	{pc}		; (ldr pc, [sp], #4)
   15910:	str	r4, [sp, #-8]!
   15914:	str	lr, [sp, #4]
   15918:	mov	ip, r1
   1591c:	mov	r3, r2
   15920:	cmp	r2, #0
   15924:	cmpne	r1, #0
   15928:	moveq	r3, #1
   1592c:	moveq	ip, r3
   15930:	mov	r2, r3
   15934:	mov	r1, ip
   15938:	bl	16734 <__assert_fail@plt+0x582c>
   1593c:	cmp	r0, #0
   15940:	beq	15950 <__assert_fail@plt+0x4a48>
   15944:	ldr	r4, [sp]
   15948:	add	sp, sp, #4
   1594c:	pop	{pc}		; (ldr pc, [sp], #4)
   15950:	bl	15c68 <__assert_fail@plt+0x4d60>
   15954:	str	r4, [sp, #-8]!
   15958:	str	lr, [sp, #4]
   1595c:	mov	r2, r1
   15960:	mov	r1, r0
   15964:	mov	r0, #0
   15968:	bl	158ac <__assert_fail@plt+0x49a4>
   1596c:	ldr	r4, [sp]
   15970:	add	sp, sp, #4
   15974:	pop	{pc}		; (ldr pc, [sp], #4)
   15978:	str	r4, [sp, #-8]!
   1597c:	str	lr, [sp, #4]
   15980:	mov	r2, r1
   15984:	mov	r1, r0
   15988:	mov	r0, #0
   1598c:	bl	15910 <__assert_fail@plt+0x4a08>
   15990:	ldr	r4, [sp]
   15994:	add	sp, sp, #4
   15998:	pop	{pc}		; (ldr pc, [sp], #4)
   1599c:	strd	r4, [sp, #-16]!
   159a0:	str	r6, [sp, #8]
   159a4:	str	lr, [sp, #12]
   159a8:	mov	r5, r1
   159ac:	ldr	r4, [r1]
   159b0:	cmp	r0, #0
   159b4:	beq	159e4 <__assert_fail@plt+0x4adc>
   159b8:	lsr	r3, r4, #1
   159bc:	add	r3, r3, #1
   159c0:	adds	r4, r4, r3
   159c4:	bcs	15a00 <__assert_fail@plt+0x4af8>
   159c8:	mov	r1, r4
   159cc:	bl	158ac <__assert_fail@plt+0x49a4>
   159d0:	str	r4, [r5]
   159d4:	ldrd	r4, [sp]
   159d8:	ldr	r6, [sp, #8]
   159dc:	add	sp, sp, #12
   159e0:	pop	{pc}		; (ldr pc, [sp], #4)
   159e4:	cmp	r4, #0
   159e8:	bne	159c8 <__assert_fail@plt+0x4ac0>
   159ec:	mov	r4, #64	; 0x40
   159f0:	udiv	r4, r4, r2
   159f4:	cmp	r2, #64	; 0x40
   159f8:	addhi	r4, r4, #1
   159fc:	b	159c8 <__assert_fail@plt+0x4ac0>
   15a00:	bl	15c68 <__assert_fail@plt+0x4d60>
   15a04:	str	r4, [sp, #-8]!
   15a08:	str	lr, [sp, #4]
   15a0c:	mov	r2, #1
   15a10:	bl	1599c <__assert_fail@plt+0x4a94>
   15a14:	ldr	r4, [sp]
   15a18:	add	sp, sp, #4
   15a1c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a20:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15a24:	strd	r6, [sp, #8]
   15a28:	str	r8, [sp, #16]
   15a2c:	str	lr, [sp, #20]
   15a30:	mov	r5, r1
   15a34:	ldr	lr, [sp, #24]
   15a38:	ldr	ip, [r1]
   15a3c:	asr	r4, ip, #1
   15a40:	adds	r4, ip, r4
   15a44:	movvs	r1, #1
   15a48:	movvc	r1, #0
   15a4c:	cmp	r1, #0
   15a50:	mvnne	r4, #-2147483648	; 0x80000000
   15a54:	mvn	r8, r3
   15a58:	lsr	r8, r8, #31
   15a5c:	cmp	r3, r4
   15a60:	movge	r1, #0
   15a64:	andlt	r1, r8, #1
   15a68:	cmp	r1, #0
   15a6c:	movne	r4, r3
   15a70:	smull	r6, r7, r4, lr
   15a74:	asr	r1, r6, #31
   15a78:	cmp	r1, r7
   15a7c:	bne	15a94 <__assert_fail@plt+0x4b8c>
   15a80:	mov	r1, r6
   15a84:	cmp	r6, #63	; 0x3f
   15a88:	movle	r1, #64	; 0x40
   15a8c:	ble	15a98 <__assert_fail@plt+0x4b90>
   15a90:	b	15aa4 <__assert_fail@plt+0x4b9c>
   15a94:	mvn	r1, #-2147483648	; 0x80000000
   15a98:	sdiv	r4, r1, lr
   15a9c:	mls	r6, lr, r4, r1
   15aa0:	sub	r1, r1, r6
   15aa4:	cmp	r0, #0
   15aa8:	moveq	r6, #0
   15aac:	streq	r6, [r5]
   15ab0:	sub	r6, r4, ip
   15ab4:	cmp	r6, r2
   15ab8:	bge	15af0 <__assert_fail@plt+0x4be8>
   15abc:	adds	r2, ip, r2
   15ac0:	mov	r4, r2
   15ac4:	bvs	15b0c <__assert_fail@plt+0x4c04>
   15ac8:	cmp	r2, r3
   15acc:	movle	r3, #0
   15ad0:	andgt	r3, r8, #1
   15ad4:	cmp	r3, #0
   15ad8:	bne	15b0c <__assert_fail@plt+0x4c04>
   15adc:	smull	r2, r3, r2, lr
   15ae0:	asr	ip, r2, #31
   15ae4:	mov	r1, r2
   15ae8:	cmp	ip, r3
   15aec:	bne	15b0c <__assert_fail@plt+0x4c04>
   15af0:	bl	15834 <__assert_fail@plt+0x492c>
   15af4:	str	r4, [r5]
   15af8:	ldrd	r4, [sp]
   15afc:	ldrd	r6, [sp, #8]
   15b00:	ldr	r8, [sp, #16]
   15b04:	add	sp, sp, #20
   15b08:	pop	{pc}		; (ldr pc, [sp], #4)
   15b0c:	bl	15c68 <__assert_fail@plt+0x4d60>
   15b10:	str	r4, [sp, #-8]!
   15b14:	str	lr, [sp, #4]
   15b18:	bl	16488 <__assert_fail@plt+0x5580>
   15b1c:	cmp	r0, #0
   15b20:	beq	15b30 <__assert_fail@plt+0x4c28>
   15b24:	ldr	r4, [sp]
   15b28:	add	sp, sp, #4
   15b2c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b30:	bl	15c68 <__assert_fail@plt+0x4d60>
   15b34:	str	r4, [sp, #-8]!
   15b38:	str	lr, [sp, #4]
   15b3c:	mov	r1, #1
   15b40:	bl	15b10 <__assert_fail@plt+0x4c08>
   15b44:	ldr	r4, [sp]
   15b48:	add	sp, sp, #4
   15b4c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b50:	str	r4, [sp, #-8]!
   15b54:	str	lr, [sp, #4]
   15b58:	bl	16488 <__assert_fail@plt+0x5580>
   15b5c:	cmp	r0, #0
   15b60:	beq	15b70 <__assert_fail@plt+0x4c68>
   15b64:	ldr	r4, [sp]
   15b68:	add	sp, sp, #4
   15b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b70:	bl	15c68 <__assert_fail@plt+0x4d60>
   15b74:	str	r4, [sp, #-8]!
   15b78:	str	lr, [sp, #4]
   15b7c:	mov	r1, #1
   15b80:	bl	15b50 <__assert_fail@plt+0x4c48>
   15b84:	ldr	r4, [sp]
   15b88:	add	sp, sp, #4
   15b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b90:	strd	r4, [sp, #-16]!
   15b94:	str	r6, [sp, #8]
   15b98:	str	lr, [sp, #12]
   15b9c:	mov	r5, r0
   15ba0:	mov	r4, r1
   15ba4:	mov	r0, r1
   15ba8:	bl	157d4 <__assert_fail@plt+0x48cc>
   15bac:	mov	r2, r4
   15bb0:	mov	r1, r5
   15bb4:	bl	10d04 <memcpy@plt>
   15bb8:	ldrd	r4, [sp]
   15bbc:	ldr	r6, [sp, #8]
   15bc0:	add	sp, sp, #12
   15bc4:	pop	{pc}		; (ldr pc, [sp], #4)
   15bc8:	strd	r4, [sp, #-16]!
   15bcc:	str	r6, [sp, #8]
   15bd0:	str	lr, [sp, #12]
   15bd4:	mov	r5, r0
   15bd8:	mov	r4, r1
   15bdc:	mov	r0, r1
   15be0:	bl	157f8 <__assert_fail@plt+0x48f0>
   15be4:	mov	r2, r4
   15be8:	mov	r1, r5
   15bec:	bl	10d04 <memcpy@plt>
   15bf0:	ldrd	r4, [sp]
   15bf4:	ldr	r6, [sp, #8]
   15bf8:	add	sp, sp, #12
   15bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   15c00:	strd	r4, [sp, #-16]!
   15c04:	str	r6, [sp, #8]
   15c08:	str	lr, [sp, #12]
   15c0c:	mov	r5, r0
   15c10:	mov	r4, r1
   15c14:	add	r0, r1, #1
   15c18:	bl	157f8 <__assert_fail@plt+0x48f0>
   15c1c:	mov	r2, #0
   15c20:	strb	r2, [r0, r4]
   15c24:	mov	r2, r4
   15c28:	mov	r1, r5
   15c2c:	bl	10d04 <memcpy@plt>
   15c30:	ldrd	r4, [sp]
   15c34:	ldr	r6, [sp, #8]
   15c38:	add	sp, sp, #12
   15c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   15c40:	str	r4, [sp, #-8]!
   15c44:	str	lr, [sp, #4]
   15c48:	mov	r4, r0
   15c4c:	bl	10e18 <strlen@plt>
   15c50:	add	r1, r0, #1
   15c54:	mov	r0, r4
   15c58:	bl	15b90 <__assert_fail@plt+0x4c88>
   15c5c:	ldr	r4, [sp]
   15c60:	add	sp, sp, #4
   15c64:	pop	{pc}		; (ldr pc, [sp], #4)
   15c68:	str	r4, [sp, #-8]!
   15c6c:	str	lr, [sp, #4]
   15c70:	movw	r3, #33004	; 0x80ec
   15c74:	movt	r3, #2
   15c78:	ldr	r4, [r3]
   15c7c:	mov	r2, #5
   15c80:	movw	r1, #30004	; 0x7534
   15c84:	movt	r1, #1
   15c88:	mov	r0, #0
   15c8c:	bl	10d4c <dcgettext@plt>
   15c90:	mov	r3, r0
   15c94:	movw	r2, #28928	; 0x7100
   15c98:	movt	r2, #1
   15c9c:	mov	r1, #0
   15ca0:	mov	r0, r4
   15ca4:	bl	10db8 <error@plt>
   15ca8:	bl	10efc <abort@plt>
   15cac:	strd	r4, [sp, #-16]!
   15cb0:	str	r6, [sp, #8]
   15cb4:	str	lr, [sp, #12]
   15cb8:	sub	sp, sp, #16
   15cbc:	mov	r6, r0
   15cc0:	mov	r4, r2
   15cc4:	mov	r5, r3
   15cc8:	ldr	r3, [sp, #40]	; 0x28
   15ccc:	str	r3, [sp]
   15cd0:	add	r3, sp, #8
   15cd4:	mov	r2, r1
   15cd8:	mov	r1, #0
   15cdc:	bl	15f38 <__assert_fail@plt+0x5030>
   15ce0:	cmp	r0, #0
   15ce4:	bne	15d5c <__assert_fail@plt+0x4e54>
   15ce8:	ldrd	r0, [sp, #8]
   15cec:	ldrd	r2, [sp, #32]
   15cf0:	cmp	r1, r3
   15cf4:	cmpeq	r0, r2
   15cf8:	movhi	r3, #1
   15cfc:	movls	r3, #0
   15d00:	cmp	r1, r5
   15d04:	cmpeq	r0, r4
   15d08:	orrcc	r3, r3, #1
   15d0c:	cmp	r3, #0
   15d10:	bne	15d28 <__assert_fail@plt+0x4e20>
   15d14:	add	sp, sp, #16
   15d18:	ldrd	r4, [sp]
   15d1c:	ldr	r6, [sp, #8]
   15d20:	add	sp, sp, #12
   15d24:	pop	{pc}		; (ldr pc, [sp], #4)
   15d28:	mvn	r2, #-1073741824	; 0xc0000000
   15d2c:	mov	r3, #0
   15d30:	cmp	r1, r3
   15d34:	cmpeq	r0, r2
   15d38:	bls	15d4c <__assert_fail@plt+0x4e44>
   15d3c:	bl	10e30 <__errno_location@plt>
   15d40:	mov	r3, #75	; 0x4b
   15d44:	str	r3, [r0]
   15d48:	b	15d6c <__assert_fail@plt+0x4e64>
   15d4c:	bl	10e30 <__errno_location@plt>
   15d50:	mov	r3, #34	; 0x22
   15d54:	str	r3, [r0]
   15d58:	b	15d6c <__assert_fail@plt+0x4e64>
   15d5c:	cmp	r0, #1
   15d60:	beq	15db0 <__assert_fail@plt+0x4ea8>
   15d64:	cmp	r0, #3
   15d68:	beq	15dc0 <__assert_fail@plt+0x4eb8>
   15d6c:	ldr	r3, [sp, #48]	; 0x30
   15d70:	cmp	r3, #0
   15d74:	moveq	r3, #1
   15d78:	str	r3, [sp, #48]	; 0x30
   15d7c:	bl	10e30 <__errno_location@plt>
   15d80:	ldr	r4, [r0]
   15d84:	cmp	r4, #22
   15d88:	moveq	r4, #0
   15d8c:	mov	r0, r6
   15d90:	bl	15200 <__assert_fail@plt+0x42f8>
   15d94:	str	r0, [sp]
   15d98:	ldr	r3, [sp, #44]	; 0x2c
   15d9c:	movw	r2, #28924	; 0x70fc
   15da0:	movt	r2, #1
   15da4:	mov	r1, r4
   15da8:	ldr	r0, [sp, #48]	; 0x30
   15dac:	bl	10db8 <error@plt>
   15db0:	bl	10e30 <__errno_location@plt>
   15db4:	mov	r3, #75	; 0x4b
   15db8:	str	r3, [r0]
   15dbc:	b	15d6c <__assert_fail@plt+0x4e64>
   15dc0:	bl	10e30 <__errno_location@plt>
   15dc4:	mov	r3, #0
   15dc8:	str	r3, [r0]
   15dcc:	b	15d6c <__assert_fail@plt+0x4e64>
   15dd0:	strd	r4, [sp, #-12]!
   15dd4:	str	lr, [sp, #8]
   15dd8:	sub	sp, sp, #28
   15ddc:	ldr	r1, [sp, #56]	; 0x38
   15de0:	str	r1, [sp, #16]
   15de4:	ldr	r1, [sp, #52]	; 0x34
   15de8:	str	r1, [sp, #12]
   15dec:	ldr	r1, [sp, #48]	; 0x30
   15df0:	str	r1, [sp, #8]
   15df4:	ldrd	r4, [sp, #40]	; 0x28
   15df8:	strd	r4, [sp]
   15dfc:	mov	r1, #10
   15e00:	bl	15cac <__assert_fail@plt+0x4da4>
   15e04:	add	sp, sp, #28
   15e08:	ldrd	r4, [sp]
   15e0c:	add	sp, sp, #8
   15e10:	pop	{pc}		; (ldr pc, [sp], #4)
   15e14:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15e18:	strd	r6, [sp, #8]
   15e1c:	strd	r8, [sp, #16]
   15e20:	strd	sl, [sp, #24]
   15e24:	str	lr, [sp, #32]
   15e28:	sub	sp, sp, #12
   15e2c:	str	r0, [sp, #4]
   15e30:	cmp	r2, #0
   15e34:	beq	15f30 <__assert_fail@plt+0x5028>
   15e38:	sub	ip, r2, #1
   15e3c:	ldrd	r2, [r0]
   15e40:	mov	r0, #0
   15e44:	mov	r8, r1
   15e48:	asr	r9, r1, #31
   15e4c:	str	r1, [sp]
   15e50:	b	15ea0 <__assert_fail@plt+0x4f98>
   15e54:	orrs	r4, r2, r3
   15e58:	movne	lr, #1
   15e5c:	b	15eb0 <__assert_fail@plt+0x4fa8>
   15e60:	mov	sl, r3
   15e64:	ldr	fp, [sp]
   15e68:	umull	r6, r7, r1, r2
   15e6c:	mov	r4, r7
   15e70:	mov	r5, #0
   15e74:	umlal	r4, r5, sl, fp
   15e78:	cmp	r5, #0
   15e7c:	bne	15ee4 <__assert_fail@plt+0x4fdc>
   15e80:	cmp	lr, #0
   15e84:	bne	15efc <__assert_fail@plt+0x4ff4>
   15e88:	mov	r2, r6
   15e8c:	mov	r3, r4
   15e90:	orr	r0, r0, lr
   15e94:	sub	ip, ip, #1
   15e98:	cmn	ip, #1
   15e9c:	beq	15f0c <__assert_fail@plt+0x5004>
   15ea0:	mov	lr, #0
   15ea4:	cmp	r8, #0
   15ea8:	sbcs	r4, r9, #0
   15eac:	blt	15e54 <__assert_fail@plt+0x4f4c>
   15eb0:	cmp	r9, #0
   15eb4:	bne	15ed0 <__assert_fail@plt+0x4fc8>
   15eb8:	cmp	r3, #0
   15ebc:	bne	15e60 <__assert_fail@plt+0x4f58>
   15ec0:	umull	r2, r3, r1, r2
   15ec4:	mov	r6, r2
   15ec8:	mov	r4, r3
   15ecc:	b	15e80 <__assert_fail@plt+0x4f78>
   15ed0:	cmp	r3, #0
   15ed4:	bne	15ee4 <__assert_fail@plt+0x4fdc>
   15ed8:	mov	sl, r9
   15edc:	mov	fp, r2
   15ee0:	b	15e68 <__assert_fail@plt+0x4f60>
   15ee4:	mul	r4, r1, r3
   15ee8:	mla	r4, r2, r9, r4
   15eec:	umull	r6, r7, r1, r2
   15ef0:	add	r4, r4, r7
   15ef4:	mov	lr, #1
   15ef8:	b	15e80 <__assert_fail@plt+0x4f78>
   15efc:	mvn	r2, #0
   15f00:	mvn	r3, #0
   15f04:	mov	lr, #1
   15f08:	b	15e90 <__assert_fail@plt+0x4f88>
   15f0c:	ldr	r1, [sp, #4]
   15f10:	strd	r2, [r1]
   15f14:	add	sp, sp, #12
   15f18:	ldrd	r4, [sp]
   15f1c:	ldrd	r6, [sp, #8]
   15f20:	ldrd	r8, [sp, #16]
   15f24:	ldrd	sl, [sp, #24]
   15f28:	add	sp, sp, #32
   15f2c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f30:	mov	r0, #0
   15f34:	b	15f14 <__assert_fail@plt+0x500c>
   15f38:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15f3c:	strd	r6, [sp, #8]
   15f40:	strd	r8, [sp, #16]
   15f44:	str	lr, [sp, #24]
   15f48:	sub	sp, sp, #20
   15f4c:	cmp	r2, #36	; 0x24
   15f50:	bhi	15fa4 <__assert_fail@plt+0x509c>
   15f54:	mov	r5, r0
   15f58:	mov	r6, r1
   15f5c:	mov	r7, r2
   15f60:	mov	r9, r3
   15f64:	cmp	r1, #0
   15f68:	addeq	r6, sp, #12
   15f6c:	bl	10e30 <__errno_location@plt>
   15f70:	mov	r8, r0
   15f74:	mov	r3, #0
   15f78:	str	r3, [r0]
   15f7c:	ldrb	r4, [r5]
   15f80:	bl	10e00 <__ctype_b_loc@plt>
   15f84:	ldr	r1, [r0]
   15f88:	mov	r2, r5
   15f8c:	lsl	r3, r4, #1
   15f90:	ldrh	r3, [r1, r3]
   15f94:	tst	r3, #8192	; 0x2000
   15f98:	beq	15fc4 <__assert_fail@plt+0x50bc>
   15f9c:	ldrb	r4, [r2, #1]!
   15fa0:	b	15f8c <__assert_fail@plt+0x5084>
   15fa4:	movw	r3, #30024	; 0x7548
   15fa8:	movt	r3, #1
   15fac:	mov	r2, #85	; 0x55
   15fb0:	movw	r1, #30036	; 0x7554
   15fb4:	movt	r1, #1
   15fb8:	movw	r0, #30052	; 0x7564
   15fbc:	movt	r0, #1
   15fc0:	bl	10f08 <__assert_fail@plt>
   15fc4:	cmp	r4, #45	; 0x2d
   15fc8:	moveq	r4, #4
   15fcc:	beq	16160 <__assert_fail@plt+0x5258>
   15fd0:	mov	r3, #0
   15fd4:	mov	r2, r7
   15fd8:	mov	r1, r6
   15fdc:	mov	r0, r5
   15fe0:	bl	10d10 <__strtoull_internal@plt>
   15fe4:	strd	r0, [sp]
   15fe8:	ldr	r7, [r6]
   15fec:	cmp	r7, r5
   15ff0:	beq	16014 <__assert_fail@plt+0x510c>
   15ff4:	ldr	r3, [r8]
   15ff8:	cmp	r3, #0
   15ffc:	beq	16138 <__assert_fail@plt+0x5230>
   16000:	cmp	r3, #34	; 0x22
   16004:	moveq	r4, #1
   16008:	beq	1613c <__assert_fail@plt+0x5234>
   1600c:	mov	r4, #4
   16010:	b	16160 <__assert_fail@plt+0x5258>
   16014:	ldr	r3, [sp, #48]	; 0x30
   16018:	cmp	r3, #0
   1601c:	beq	16478 <__assert_fail@plt+0x5570>
   16020:	ldrb	r1, [r5]
   16024:	cmp	r1, #0
   16028:	moveq	r4, #4
   1602c:	beq	16160 <__assert_fail@plt+0x5258>
   16030:	mov	r0, r3
   16034:	bl	10e24 <strchr@plt>
   16038:	cmp	r0, #0
   1603c:	beq	16480 <__assert_fail@plt+0x5578>
   16040:	mov	r2, #1
   16044:	mov	r3, #0
   16048:	strd	r2, [sp]
   1604c:	ldrb	r5, [r7]
   16050:	mov	r4, #0
   16054:	mov	r1, r5
   16058:	ldr	r0, [sp, #48]	; 0x30
   1605c:	bl	10e24 <strchr@plt>
   16060:	cmp	r0, #0
   16064:	beq	1617c <__assert_fail@plt+0x5274>
   16068:	sub	r3, r5, #69	; 0x45
   1606c:	cmp	r3, #47	; 0x2f
   16070:	ldrls	pc, [pc, r3, lsl #2]
   16074:	b	162c8 <__assert_fail@plt+0x53c0>
   16078:	andeq	r6, r1, ip, lsl #3
   1607c:	andeq	r6, r1, r8, asr #5
   16080:	andeq	r6, r1, ip, lsl #3
   16084:	andeq	r6, r1, r8, asr #5
   16088:	andeq	r6, r1, r8, asr #5
   1608c:	andeq	r6, r1, r8, asr #5
   16090:	andeq	r6, r1, ip, lsl #3
   16094:	andeq	r6, r1, r8, asr #5
   16098:	andeq	r6, r1, ip, lsl #3
   1609c:	andeq	r6, r1, r8, asr #5
   160a0:	andeq	r6, r1, r8, asr #5
   160a4:	andeq	r6, r1, ip, lsl #3
   160a8:	andeq	r6, r1, r8, asr #5
   160ac:	andeq	r6, r1, r8, asr #5
   160b0:	andeq	r6, r1, r8, asr #5
   160b4:	andeq	r6, r1, ip, lsl #3
   160b8:	andeq	r6, r1, r8, asr #5
   160bc:	andeq	r6, r1, r8, asr #5
   160c0:	andeq	r6, r1, r8, asr #5
   160c4:	andeq	r6, r1, r8, asr #5
   160c8:	andeq	r6, r1, ip, lsl #3
   160cc:	andeq	r6, r1, ip, lsl #3
   160d0:	andeq	r6, r1, r8, asr #5
   160d4:	andeq	r6, r1, r8, asr #5
   160d8:	andeq	r6, r1, r8, asr #5
   160dc:	andeq	r6, r1, r8, asr #5
   160e0:	andeq	r6, r1, r8, asr #5
   160e4:	andeq	r6, r1, r8, asr #5
   160e8:	andeq	r6, r1, r8, asr #5
   160ec:	andeq	r6, r1, r8, asr #5
   160f0:	andeq	r6, r1, r8, asr #5
   160f4:	andeq	r6, r1, r8, asr #5
   160f8:	andeq	r6, r1, r8, asr #5
   160fc:	andeq	r6, r1, r8, asr #5
   16100:	andeq	r6, r1, ip, lsl #3
   16104:	andeq	r6, r1, r8, asr #5
   16108:	andeq	r6, r1, r8, asr #5
   1610c:	andeq	r6, r1, r8, asr #5
   16110:	andeq	r6, r1, ip, lsl #3
   16114:	andeq	r6, r1, r8, asr #5
   16118:	andeq	r6, r1, ip, lsl #3
   1611c:	andeq	r6, r1, r8, asr #5
   16120:	andeq	r6, r1, r8, asr #5
   16124:	andeq	r6, r1, r8, asr #5
   16128:	andeq	r6, r1, r8, asr #5
   1612c:	andeq	r6, r1, r8, asr #5
   16130:	andeq	r6, r1, r8, asr #5
   16134:	andeq	r6, r1, ip, lsl #3
   16138:	mov	r4, #0
   1613c:	ldr	r3, [sp, #48]	; 0x30
   16140:	cmp	r3, #0
   16144:	strdeq	r0, [r9]
   16148:	beq	16160 <__assert_fail@plt+0x5258>
   1614c:	ldrb	r5, [r7]
   16150:	cmp	r5, #0
   16154:	bne	16054 <__assert_fail@plt+0x514c>
   16158:	ldrd	r2, [sp]
   1615c:	strd	r2, [r9]
   16160:	mov	r0, r4
   16164:	add	sp, sp, #20
   16168:	ldrd	r4, [sp]
   1616c:	ldrd	r6, [sp, #8]
   16170:	ldrd	r8, [sp, #16]
   16174:	add	sp, sp, #24
   16178:	pop	{pc}		; (ldr pc, [sp], #4)
   1617c:	ldrd	r2, [sp]
   16180:	strd	r2, [r9]
   16184:	orr	r4, r4, #2
   16188:	b	16160 <__assert_fail@plt+0x5258>
   1618c:	mov	r1, #48	; 0x30
   16190:	ldr	r0, [sp, #48]	; 0x30
   16194:	bl	10e24 <strchr@plt>
   16198:	cmp	r0, #0
   1619c:	beq	162d4 <__assert_fail@plt+0x53cc>
   161a0:	ldrb	r3, [r7, #1]
   161a4:	cmp	r3, #68	; 0x44
   161a8:	beq	162e0 <__assert_fail@plt+0x53d8>
   161ac:	cmp	r3, #105	; 0x69
   161b0:	beq	162b0 <__assert_fail@plt+0x53a8>
   161b4:	cmp	r3, #66	; 0x42
   161b8:	moveq	r7, #2
   161bc:	movne	r7, #1
   161c0:	moveq	r1, #1000	; 0x3e8
   161c4:	movne	r1, #1024	; 0x400
   161c8:	sub	r5, r5, #66	; 0x42
   161cc:	cmp	r5, #53	; 0x35
   161d0:	ldrls	pc, [pc, r5, lsl #2]
   161d4:	b	16444 <__assert_fail@plt+0x553c>
   161d8:	andeq	r6, r1, r4, lsr r3
   161dc:	andeq	r6, r1, r4, asr #8
   161e0:	andeq	r6, r1, r4, asr #8
   161e4:	andeq	r6, r1, ip, ror r3
   161e8:	andeq	r6, r1, r4, asr #8
   161ec:	andeq	r6, r1, ip, lsl #7
   161f0:	andeq	r6, r1, r4, asr #8
   161f4:	andeq	r6, r1, r4, asr #8
   161f8:	andeq	r6, r1, r4, asr #8
   161fc:	muleq	r1, ip, r3
   16200:	andeq	r6, r1, r4, asr #8
   16204:	andeq	r6, r1, ip, lsr #7
   16208:	andeq	r6, r1, r4, asr #8
   1620c:	andeq	r6, r1, r4, asr #8
   16210:			; <UNDEFINED> instruction: 0x000163bc
   16214:	andeq	r6, r1, r4, asr #8
   16218:	andeq	r6, r1, r4, asr #8
   1621c:	andeq	r6, r1, r4, asr #8
   16220:	andeq	r6, r1, ip, asr #7
   16224:	andeq	r6, r1, r4, asr #8
   16228:	andeq	r6, r1, r4, asr #8
   1622c:	andeq	r6, r1, r4, asr #8
   16230:	andeq	r6, r1, r4, asr #8
   16234:	andeq	r6, r1, r4, lsr #8
   16238:	andeq	r6, r1, r4, lsr r4
   1623c:	andeq	r6, r1, r4, asr #8
   16240:	andeq	r6, r1, r4, asr #8
   16244:	andeq	r6, r1, r4, asr #8
   16248:	andeq	r6, r1, r4, asr #8
   1624c:	andeq	r6, r1, r4, asr #8
   16250:	andeq	r6, r1, r4, asr #8
   16254:	andeq	r6, r1, r4, asr #8
   16258:	andeq	r6, r1, ip, ror #5
   1625c:	andeq	r6, r1, r4, asr r4
   16260:	andeq	r6, r1, r4, asr #8
   16264:	andeq	r6, r1, r4, asr #8
   16268:	andeq	r6, r1, r4, asr #8
   1626c:	andeq	r6, r1, ip, lsl #7
   16270:	andeq	r6, r1, r4, asr #8
   16274:	andeq	r6, r1, r4, asr #8
   16278:	andeq	r6, r1, r4, asr #8
   1627c:	muleq	r1, ip, r3
   16280:	andeq	r6, r1, r4, asr #8
   16284:	andeq	r6, r1, ip, lsr #7
   16288:	andeq	r6, r1, r4, asr #8
   1628c:	andeq	r6, r1, r4, asr #8
   16290:	andeq	r6, r1, r4, asr #8
   16294:	andeq	r6, r1, r4, asr #8
   16298:	andeq	r6, r1, r4, asr #8
   1629c:	andeq	r6, r1, r4, asr #8
   162a0:	andeq	r6, r1, ip, asr #7
   162a4:	andeq	r6, r1, r4, asr #8
   162a8:	andeq	r6, r1, r4, asr #8
   162ac:	ldrdeq	r6, [r1], -ip
   162b0:	ldrb	r3, [r7, #2]
   162b4:	cmp	r3, #66	; 0x42
   162b8:	movne	r7, #1
   162bc:	moveq	r7, #3
   162c0:	mov	r1, #1024	; 0x400
   162c4:	b	161c8 <__assert_fail@plt+0x52c0>
   162c8:	mov	r7, #1
   162cc:	mov	r1, #1024	; 0x400
   162d0:	b	161c8 <__assert_fail@plt+0x52c0>
   162d4:	mov	r7, #1
   162d8:	mov	r1, #1024	; 0x400
   162dc:	b	161c8 <__assert_fail@plt+0x52c0>
   162e0:	mov	r7, #2
   162e4:	mov	r1, #1000	; 0x3e8
   162e8:	b	161c8 <__assert_fail@plt+0x52c0>
   162ec:	ldr	r3, [sp]
   162f0:	ldr	ip, [sp, #4]
   162f4:	lsl	r2, ip, #9
   162f8:	orr	r2, r2, r3, lsr #23
   162fc:	lsl	r3, r3, #9
   16300:	mov	r0, #0
   16304:	mov	r1, r0
   16308:	lsr	r0, ip, #23
   1630c:	orrs	r1, r0, r1
   16310:	streq	r3, [sp]
   16314:	streq	r2, [sp, #4]
   16318:	moveq	r0, #0
   1631c:	beq	16458 <__assert_fail@plt+0x5550>
   16320:	mvn	r2, #0
   16324:	mvn	r3, #0
   16328:	strd	r2, [sp]
   1632c:	mov	r0, #1
   16330:	b	16458 <__assert_fail@plt+0x5550>
   16334:	ldr	r3, [sp]
   16338:	ldr	ip, [sp, #4]
   1633c:	lsl	r2, ip, #10
   16340:	orr	r2, r2, r3, lsr #22
   16344:	lsl	r3, r3, #10
   16348:	mov	r0, #0
   1634c:	mov	r1, r0
   16350:	lsr	r0, ip, #22
   16354:	orrs	r1, r0, r1
   16358:	streq	r3, [sp]
   1635c:	streq	r2, [sp, #4]
   16360:	moveq	r0, #0
   16364:	beq	16458 <__assert_fail@plt+0x5550>
   16368:	mvn	r2, #0
   1636c:	mvn	r3, #0
   16370:	strd	r2, [sp]
   16374:	mov	r0, #1
   16378:	b	16458 <__assert_fail@plt+0x5550>
   1637c:	mov	r2, #6
   16380:	mov	r0, sp
   16384:	bl	15e14 <__assert_fail@plt+0x4f0c>
   16388:	b	16458 <__assert_fail@plt+0x5550>
   1638c:	mov	r2, #3
   16390:	mov	r0, sp
   16394:	bl	15e14 <__assert_fail@plt+0x4f0c>
   16398:	b	16458 <__assert_fail@plt+0x5550>
   1639c:	mov	r2, #1
   163a0:	mov	r0, sp
   163a4:	bl	15e14 <__assert_fail@plt+0x4f0c>
   163a8:	b	16458 <__assert_fail@plt+0x5550>
   163ac:	mov	r2, #2
   163b0:	mov	r0, sp
   163b4:	bl	15e14 <__assert_fail@plt+0x4f0c>
   163b8:	b	16458 <__assert_fail@plt+0x5550>
   163bc:	mov	r2, #5
   163c0:	mov	r0, sp
   163c4:	bl	15e14 <__assert_fail@plt+0x4f0c>
   163c8:	b	16458 <__assert_fail@plt+0x5550>
   163cc:	mov	r2, #4
   163d0:	mov	r0, sp
   163d4:	bl	15e14 <__assert_fail@plt+0x4f0c>
   163d8:	b	16458 <__assert_fail@plt+0x5550>
   163dc:	ldr	r3, [sp]
   163e0:	ldr	r2, [sp, #4]
   163e4:	adds	r3, r3, r3
   163e8:	adc	r2, r2, r2
   163ec:	mov	r1, #0
   163f0:	mov	r0, r1
   163f4:	ldr	r1, [sp, #4]
   163f8:	lsr	r1, r1, #31
   163fc:	orrs	r1, r1, r0
   16400:	streq	r3, [sp]
   16404:	streq	r2, [sp, #4]
   16408:	moveq	r0, #0
   1640c:	beq	16458 <__assert_fail@plt+0x5550>
   16410:	mvn	r2, #0
   16414:	mvn	r3, #0
   16418:	strd	r2, [sp]
   1641c:	mov	r0, #1
   16420:	b	16458 <__assert_fail@plt+0x5550>
   16424:	mov	r2, #8
   16428:	mov	r0, sp
   1642c:	bl	15e14 <__assert_fail@plt+0x4f0c>
   16430:	b	16458 <__assert_fail@plt+0x5550>
   16434:	mov	r2, #7
   16438:	mov	r0, sp
   1643c:	bl	15e14 <__assert_fail@plt+0x4f0c>
   16440:	b	16458 <__assert_fail@plt+0x5550>
   16444:	ldrd	r2, [sp]
   16448:	strd	r2, [r9]
   1644c:	orr	r4, r4, #2
   16450:	b	16160 <__assert_fail@plt+0x5258>
   16454:	mov	r0, #0
   16458:	orr	r4, r4, r0
   1645c:	ldr	r3, [r6]
   16460:	add	r2, r3, r7
   16464:	str	r2, [r6]
   16468:	ldrb	r3, [r3, r7]
   1646c:	cmp	r3, #0
   16470:	orrne	r4, r4, #2
   16474:	b	16158 <__assert_fail@plt+0x5250>
   16478:	mov	r4, #4
   1647c:	b	16160 <__assert_fail@plt+0x5258>
   16480:	mov	r4, #4
   16484:	b	16160 <__assert_fail@plt+0x5258>
   16488:	strd	r4, [sp, #-16]!
   1648c:	str	r6, [sp, #8]
   16490:	str	lr, [sp, #12]
   16494:	cmp	r1, #0
   16498:	cmpne	r0, #0
   1649c:	beq	164d8 <__assert_fail@plt+0x55d0>
   164a0:	mov	r2, r0
   164a4:	mov	r3, r1
   164a8:	umull	r4, r5, r0, r1
   164ac:	adds	r1, r5, #0
   164b0:	movne	r1, #1
   164b4:	cmp	r4, #0
   164b8:	movlt	r1, #1
   164bc:	cmp	r1, #0
   164c0:	beq	164e0 <__assert_fail@plt+0x55d8>
   164c4:	bl	10e30 <__errno_location@plt>
   164c8:	mov	r3, #12
   164cc:	str	r3, [r0]
   164d0:	mov	r0, #0
   164d4:	b	164ec <__assert_fail@plt+0x55e4>
   164d8:	mov	r3, #1
   164dc:	mov	r2, r3
   164e0:	mov	r1, r3
   164e4:	mov	r0, r2
   164e8:	bl	10ca4 <calloc@plt>
   164ec:	ldrd	r4, [sp]
   164f0:	ldr	r6, [sp, #8]
   164f4:	add	sp, sp, #12
   164f8:	pop	{pc}		; (ldr pc, [sp], #4)
   164fc:	str	r4, [sp, #-8]!
   16500:	str	lr, [sp, #4]
   16504:	cmp	r0, #0
   16508:	beq	16524 <__assert_fail@plt+0x561c>
   1650c:	bge	16528 <__assert_fail@plt+0x5620>
   16510:	bl	10e30 <__errno_location@plt>
   16514:	mov	r3, #12
   16518:	str	r3, [r0]
   1651c:	mov	r0, #0
   16520:	b	1652c <__assert_fail@plt+0x5624>
   16524:	mov	r0, #1
   16528:	bl	10dc4 <malloc@plt>
   1652c:	ldr	r4, [sp]
   16530:	add	sp, sp, #4
   16534:	pop	{pc}		; (ldr pc, [sp], #4)
   16538:	str	r4, [sp, #-8]!
   1653c:	str	lr, [sp, #4]
   16540:	cmp	r0, #0
   16544:	beq	16568 <__assert_fail@plt+0x5660>
   16548:	cmp	r1, #0
   1654c:	beq	16574 <__assert_fail@plt+0x566c>
   16550:	cmp	r1, #0
   16554:	blt	16580 <__assert_fail@plt+0x5678>
   16558:	bl	10d58 <realloc@plt>
   1655c:	ldr	r4, [sp]
   16560:	add	sp, sp, #4
   16564:	pop	{pc}		; (ldr pc, [sp], #4)
   16568:	mov	r0, r1
   1656c:	bl	164fc <__assert_fail@plt+0x55f4>
   16570:	b	1655c <__assert_fail@plt+0x5654>
   16574:	bl	16620 <__assert_fail@plt+0x5718>
   16578:	mov	r0, #0
   1657c:	b	1655c <__assert_fail@plt+0x5654>
   16580:	bl	10e30 <__errno_location@plt>
   16584:	mov	r3, #12
   16588:	str	r3, [r0]
   1658c:	mov	r0, #0
   16590:	b	1655c <__assert_fail@plt+0x5654>
   16594:	strd	r4, [sp, #-16]!
   16598:	str	r6, [sp, #8]
   1659c:	str	lr, [sp, #12]
   165a0:	mov	r5, r0
   165a4:	bl	10da0 <__fpending@plt>
   165a8:	mov	r6, r0
   165ac:	ldr	r4, [r5]
   165b0:	and	r4, r4, #32
   165b4:	mov	r0, r5
   165b8:	bl	12d18 <__assert_fail@plt+0x1e10>
   165bc:	cmp	r4, #0
   165c0:	bne	165f4 <__assert_fail@plt+0x56ec>
   165c4:	cmp	r0, #0
   165c8:	beq	165e4 <__assert_fail@plt+0x56dc>
   165cc:	cmp	r6, #0
   165d0:	bne	16610 <__assert_fail@plt+0x5708>
   165d4:	bl	10e30 <__errno_location@plt>
   165d8:	ldr	r0, [r0]
   165dc:	subs	r0, r0, #9
   165e0:	mvnne	r0, #0
   165e4:	ldrd	r4, [sp]
   165e8:	ldr	r6, [sp, #8]
   165ec:	add	sp, sp, #12
   165f0:	pop	{pc}		; (ldr pc, [sp], #4)
   165f4:	cmp	r0, #0
   165f8:	bne	16618 <__assert_fail@plt+0x5710>
   165fc:	bl	10e30 <__errno_location@plt>
   16600:	mov	r3, #0
   16604:	str	r3, [r0]
   16608:	mvn	r0, #0
   1660c:	b	165e4 <__assert_fail@plt+0x56dc>
   16610:	mvn	r0, #0
   16614:	b	165e4 <__assert_fail@plt+0x56dc>
   16618:	mvn	r0, #0
   1661c:	b	165e4 <__assert_fail@plt+0x56dc>
   16620:	strd	r4, [sp, #-12]!
   16624:	str	lr, [sp, #8]
   16628:	sub	sp, sp, #12
   1662c:	mov	r5, r0
   16630:	bl	10e30 <__errno_location@plt>
   16634:	mov	r4, r0
   16638:	ldr	r3, [r0]
   1663c:	str	r3, [sp]
   16640:	str	r3, [sp, #4]
   16644:	mov	r3, #0
   16648:	str	r3, [r0]
   1664c:	mov	r0, r5
   16650:	bl	10cec <free@plt>
   16654:	ldr	r3, [r4]
   16658:	clz	r3, r3
   1665c:	lsr	r3, r3, #5
   16660:	add	r2, sp, #8
   16664:	add	r3, r2, r3, lsl #2
   16668:	ldr	r3, [r3, #-8]
   1666c:	str	r3, [r4]
   16670:	add	sp, sp, #12
   16674:	ldrd	r4, [sp]
   16678:	add	sp, sp, #8
   1667c:	pop	{pc}		; (ldr pc, [sp], #4)
   16680:	str	r4, [sp, #-8]!
   16684:	str	lr, [sp, #4]
   16688:	mov	r0, #14
   1668c:	bl	10ec0 <nl_langinfo@plt>
   16690:	cmp	r0, #0
   16694:	beq	166b8 <__assert_fail@plt+0x57b0>
   16698:	ldrb	r2, [r0]
   1669c:	movw	r3, #30092	; 0x758c
   166a0:	movt	r3, #1
   166a4:	cmp	r2, #0
   166a8:	moveq	r0, r3
   166ac:	ldr	r4, [sp]
   166b0:	add	sp, sp, #4
   166b4:	pop	{pc}		; (ldr pc, [sp], #4)
   166b8:	movw	r0, #30092	; 0x758c
   166bc:	movt	r0, #1
   166c0:	b	166ac <__assert_fail@plt+0x57a4>
   166c4:	strd	r4, [sp, #-20]!	; 0xffffffec
   166c8:	strd	r6, [sp, #8]
   166cc:	str	lr, [sp, #16]
   166d0:	sub	sp, sp, #12
   166d4:	mov	r7, r1
   166d8:	mov	r5, r2
   166dc:	subs	r6, r0, #0
   166e0:	addeq	r6, sp, #4
   166e4:	mov	r0, r6
   166e8:	bl	10dac <mbrtowc@plt>
   166ec:	mov	r4, r0
   166f0:	cmp	r5, #0
   166f4:	cmnne	r0, #3
   166f8:	bhi	16714 <__assert_fail@plt+0x580c>
   166fc:	mov	r0, r4
   16700:	add	sp, sp, #12
   16704:	ldrd	r4, [sp]
   16708:	ldrd	r6, [sp, #8]
   1670c:	add	sp, sp, #16
   16710:	pop	{pc}		; (ldr pc, [sp], #4)
   16714:	mov	r0, #0
   16718:	bl	16770 <__assert_fail@plt+0x5868>
   1671c:	cmp	r0, #0
   16720:	bne	166fc <__assert_fail@plt+0x57f4>
   16724:	ldrb	r3, [r7]
   16728:	str	r3, [r6]
   1672c:	mov	r4, #1
   16730:	b	166fc <__assert_fail@plt+0x57f4>
   16734:	str	r4, [sp, #-8]!
   16738:	str	lr, [sp, #4]
   1673c:	umull	r2, r3, r1, r2
   16740:	cmp	r3, #0
   16744:	bne	1675c <__assert_fail@plt+0x5854>
   16748:	mov	r1, r2
   1674c:	bl	16538 <__assert_fail@plt+0x5630>
   16750:	ldr	r4, [sp]
   16754:	add	sp, sp, #4
   16758:	pop	{pc}		; (ldr pc, [sp], #4)
   1675c:	bl	10e30 <__errno_location@plt>
   16760:	mov	r3, #12
   16764:	str	r3, [r0]
   16768:	mov	r0, #0
   1676c:	b	16750 <__assert_fail@plt+0x5848>
   16770:	push	{lr}		; (str lr, [sp, #-4]!)
   16774:	sub	sp, sp, #268	; 0x10c
   16778:	movw	r2, #257	; 0x101
   1677c:	add	r1, sp, #4
   16780:	bl	167cc <__assert_fail@plt+0x58c4>
   16784:	cmp	r0, #0
   16788:	movne	r0, #0
   1678c:	bne	167c4 <__assert_fail@plt+0x58bc>
   16790:	movw	r1, #30100	; 0x7594
   16794:	movt	r1, #1
   16798:	add	r0, sp, #4
   1679c:	bl	10cbc <strcmp@plt>
   167a0:	cmp	r0, #0
   167a4:	beq	167c0 <__assert_fail@plt+0x58b8>
   167a8:	movw	r1, #30104	; 0x7598
   167ac:	movt	r1, #1
   167b0:	add	r0, sp, #4
   167b4:	bl	10cbc <strcmp@plt>
   167b8:	adds	r0, r0, #0
   167bc:	movne	r0, #1
   167c0:	and	r0, r0, #1
   167c4:	add	sp, sp, #268	; 0x10c
   167c8:	pop	{pc}		; (ldr pc, [sp], #4)
   167cc:	strd	r4, [sp, #-16]!
   167d0:	str	r6, [sp, #8]
   167d4:	str	lr, [sp, #12]
   167d8:	mov	r6, r1
   167dc:	mov	r4, r2
   167e0:	mov	r1, #0
   167e4:	bl	10ea8 <setlocale@plt>
   167e8:	subs	r5, r0, #0
   167ec:	beq	16830 <__assert_fail@plt+0x5928>
   167f0:	mov	r0, r5
   167f4:	bl	10e18 <strlen@plt>
   167f8:	cmp	r4, r0
   167fc:	bhi	1684c <__assert_fail@plt+0x5944>
   16800:	cmp	r4, #0
   16804:	moveq	r0, #34	; 0x22
   16808:	beq	16860 <__assert_fail@plt+0x5958>
   1680c:	sub	r4, r4, #1
   16810:	mov	r2, r4
   16814:	mov	r1, r5
   16818:	mov	r0, r6
   1681c:	bl	10d04 <memcpy@plt>
   16820:	mov	r3, #0
   16824:	strb	r3, [r6, r4]
   16828:	mov	r0, #34	; 0x22
   1682c:	b	16860 <__assert_fail@plt+0x5958>
   16830:	cmp	r4, #0
   16834:	moveq	r0, #22
   16838:	beq	16860 <__assert_fail@plt+0x5958>
   1683c:	mov	r3, #0
   16840:	strb	r3, [r6]
   16844:	mov	r0, #22
   16848:	b	16860 <__assert_fail@plt+0x5958>
   1684c:	add	r2, r0, #1
   16850:	mov	r1, r5
   16854:	mov	r0, r6
   16858:	bl	10d04 <memcpy@plt>
   1685c:	mov	r0, #0
   16860:	ldrd	r4, [sp]
   16864:	ldr	r6, [sp, #8]
   16868:	add	sp, sp, #12
   1686c:	pop	{pc}		; (ldr pc, [sp], #4)
   16870:	str	r4, [sp, #-8]!
   16874:	str	lr, [sp, #4]
   16878:	mov	r1, #0
   1687c:	bl	10ea8 <setlocale@plt>
   16880:	ldr	r4, [sp]
   16884:	add	sp, sp, #4
   16888:	pop	{pc}		; (ldr pc, [sp], #4)
   1688c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16890:	mov	r7, r0
   16894:	ldr	r6, [pc, #72]	; 168e4 <__assert_fail@plt+0x59dc>
   16898:	ldr	r5, [pc, #72]	; 168e8 <__assert_fail@plt+0x59e0>
   1689c:	add	r6, pc, r6
   168a0:	add	r5, pc, r5
   168a4:	sub	r6, r6, r5
   168a8:	mov	r8, r1
   168ac:	mov	r9, r2
   168b0:	bl	10c84 <calloc@plt-0x20>
   168b4:	asrs	r6, r6, #2
   168b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   168bc:	mov	r4, #0
   168c0:	add	r4, r4, #1
   168c4:	ldr	r3, [r5], #4
   168c8:	mov	r2, r9
   168cc:	mov	r1, r8
   168d0:	mov	r0, r7
   168d4:	blx	r3
   168d8:	cmp	r6, r4
   168dc:	bne	168c0 <__assert_fail@plt+0x59b8>
   168e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   168e4:	andeq	r1, r1, r0, ror r6
   168e8:	andeq	r1, r1, r8, ror #12
   168ec:	bx	lr
   168f0:	ldr	r3, [pc, #12]	; 16904 <__assert_fail@plt+0x59fc>
   168f4:	mov	r1, #0
   168f8:	add	r3, pc, r3
   168fc:	ldr	r2, [r3]
   16900:	b	10e3c <__cxa_atexit@plt>
   16904:	andeq	r1, r1, r4, ror #15

Disassembly of section .fini:

00016908 <.fini>:
   16908:	push	{r3, lr}
   1690c:	pop	{r3, pc}
