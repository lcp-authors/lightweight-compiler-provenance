
../repos/coreutils/src/echo:     file format elf32-littlearm


Disassembly of section .init:

00010afc <.init>:
   10afc:	push	{r3, lr}
   10b00:	bl	10d80 <__assert_fail@plt+0x48>
   10b04:	pop	{r3, pc}

Disassembly of section .plt:

00010b08 <calloc@plt-0x14>:
   10b08:	push	{lr}		; (str lr, [sp, #-4]!)
   10b0c:	ldr	lr, [pc, #4]	; 10b18 <calloc@plt-0x4>
   10b10:	add	lr, pc, lr
   10b14:	ldr	pc, [lr, #8]!
   10b18:	andeq	r7, r1, r8, ror #9

00010b1c <calloc@plt>:
   10b1c:	add	ip, pc, #0, 12
   10b20:	add	ip, ip, #94208	; 0x17000
   10b24:	ldr	pc, [ip, #1256]!	; 0x4e8

00010b28 <fputs_unlocked@plt>:
   10b28:	add	ip, pc, #0, 12
   10b2c:	add	ip, ip, #94208	; 0x17000
   10b30:	ldr	pc, [ip, #1248]!	; 0x4e0

00010b34 <raise@plt>:
   10b34:	add	ip, pc, #0, 12
   10b38:	add	ip, ip, #94208	; 0x17000
   10b3c:	ldr	pc, [ip, #1240]!	; 0x4d8

00010b40 <strcmp@plt>:
   10b40:	add	ip, pc, #0, 12
   10b44:	add	ip, ip, #94208	; 0x17000
   10b48:	ldr	pc, [ip, #1232]!	; 0x4d0

00010b4c <printf@plt>:
   10b4c:	add	ip, pc, #0, 12
   10b50:	add	ip, ip, #94208	; 0x17000
   10b54:	ldr	pc, [ip, #1224]!	; 0x4c8

00010b58 <fflush@plt>:
   10b58:	add	ip, pc, #0, 12
   10b5c:	add	ip, ip, #94208	; 0x17000
   10b60:	ldr	pc, [ip, #1216]!	; 0x4c0

00010b64 <free@plt>:
   10b64:	add	ip, pc, #0, 12
   10b68:	add	ip, ip, #94208	; 0x17000
   10b6c:	ldr	pc, [ip, #1208]!	; 0x4b8

00010b70 <_exit@plt>:
   10b70:	add	ip, pc, #0, 12
   10b74:	add	ip, ip, #94208	; 0x17000
   10b78:	ldr	pc, [ip, #1200]!	; 0x4b0

00010b7c <memcpy@plt>:
   10b7c:	add	ip, pc, #0, 12
   10b80:	add	ip, ip, #94208	; 0x17000
   10b84:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b88 <mbsinit@plt>:
   10b88:	add	ip, pc, #0, 12
   10b8c:	add	ip, ip, #94208	; 0x17000
   10b90:	ldr	pc, [ip, #1184]!	; 0x4a0

00010b94 <memcmp@plt>:
   10b94:	add	ip, pc, #0, 12
   10b98:	add	ip, ip, #94208	; 0x17000
   10b9c:	ldr	pc, [ip, #1176]!	; 0x498

00010ba0 <fputc_unlocked@plt>:
   10ba0:	add	ip, pc, #0, 12
   10ba4:	add	ip, ip, #94208	; 0x17000
   10ba8:	ldr	pc, [ip, #1168]!	; 0x490

00010bac <realloc@plt>:
   10bac:	add	ip, pc, #0, 12
   10bb0:	add	ip, ip, #94208	; 0x17000
   10bb4:	ldr	pc, [ip, #1160]!	; 0x488

00010bb8 <textdomain@plt>:
   10bb8:	add	ip, pc, #0, 12
   10bbc:	add	ip, ip, #94208	; 0x17000
   10bc0:	ldr	pc, [ip, #1152]!	; 0x480

00010bc4 <iswprint@plt>:
   10bc4:	add	ip, pc, #0, 12
   10bc8:	add	ip, ip, #94208	; 0x17000
   10bcc:	ldr	pc, [ip, #1144]!	; 0x478

00010bd0 <fwrite@plt>:
   10bd0:	add	ip, pc, #0, 12
   10bd4:	add	ip, ip, #94208	; 0x17000
   10bd8:	ldr	pc, [ip, #1136]!	; 0x470

00010bdc <lseek64@plt>:
   10bdc:	add	ip, pc, #0, 12
   10be0:	add	ip, ip, #94208	; 0x17000
   10be4:	ldr	pc, [ip, #1128]!	; 0x468

00010be8 <__ctype_get_mb_cur_max@plt>:
   10be8:	add	ip, pc, #0, 12
   10bec:	add	ip, ip, #94208	; 0x17000
   10bf0:	ldr	pc, [ip, #1120]!	; 0x460

00010bf4 <__fpending@plt>:
   10bf4:	add	ip, pc, #0, 12
   10bf8:	add	ip, ip, #94208	; 0x17000
   10bfc:	ldr	pc, [ip, #1112]!	; 0x458

00010c00 <ferror_unlocked@plt>:
   10c00:	add	ip, pc, #0, 12
   10c04:	add	ip, ip, #94208	; 0x17000
   10c08:	ldr	pc, [ip, #1104]!	; 0x450

00010c0c <mbrtowc@plt>:
   10c0c:	add	ip, pc, #0, 12
   10c10:	add	ip, ip, #94208	; 0x17000
   10c14:	ldr	pc, [ip, #1096]!	; 0x448

00010c18 <error@plt>:
   10c18:	add	ip, pc, #0, 12
   10c1c:	add	ip, ip, #94208	; 0x17000
   10c20:	ldr	pc, [ip, #1088]!	; 0x440

00010c24 <getenv@plt>:
   10c24:	add	ip, pc, #0, 12
   10c28:	add	ip, ip, #94208	; 0x17000
   10c2c:	ldr	pc, [ip, #1080]!	; 0x438

00010c30 <malloc@plt>:
   10c30:	add	ip, pc, #0, 12
   10c34:	add	ip, ip, #94208	; 0x17000
   10c38:	ldr	pc, [ip, #1072]!	; 0x430

00010c3c <__libc_start_main@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #94208	; 0x17000
   10c44:	ldr	pc, [ip, #1064]!	; 0x428

00010c48 <__freading@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #94208	; 0x17000
   10c50:	ldr	pc, [ip, #1056]!	; 0x420

00010c54 <__gmon_start__@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #94208	; 0x17000
   10c5c:	ldr	pc, [ip, #1048]!	; 0x418

00010c60 <__ctype_b_loc@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #94208	; 0x17000
   10c68:	ldr	pc, [ip, #1040]!	; 0x410

00010c6c <exit@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #94208	; 0x17000
   10c74:	ldr	pc, [ip, #1032]!	; 0x408

00010c78 <gettext@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #94208	; 0x17000
   10c80:	ldr	pc, [ip, #1024]!	; 0x400

00010c84 <strlen@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #94208	; 0x17000
   10c8c:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c90 <fprintf@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #94208	; 0x17000
   10c98:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c9c <__errno_location@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #94208	; 0x17000
   10ca4:	ldr	pc, [ip, #1000]!	; 0x3e8

00010ca8 <__cxa_atexit@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #94208	; 0x17000
   10cb0:	ldr	pc, [ip, #992]!	; 0x3e0

00010cb4 <memset@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #94208	; 0x17000
   10cbc:	ldr	pc, [ip, #984]!	; 0x3d8

00010cc0 <fileno@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #94208	; 0x17000
   10cc8:	ldr	pc, [ip, #976]!	; 0x3d0

00010ccc <fclose@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #94208	; 0x17000
   10cd4:	ldr	pc, [ip, #968]!	; 0x3c8

00010cd8 <fseeko64@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #94208	; 0x17000
   10ce0:	ldr	pc, [ip, #960]!	; 0x3c0

00010ce4 <setlocale@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #94208	; 0x17000
   10cec:	ldr	pc, [ip, #952]!	; 0x3b8

00010cf0 <strrchr@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #94208	; 0x17000
   10cf8:	ldr	pc, [ip, #944]!	; 0x3b0

00010cfc <nl_langinfo@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #94208	; 0x17000
   10d04:	ldr	pc, [ip, #936]!	; 0x3a8

00010d08 <bindtextdomain@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #94208	; 0x17000
   10d10:	ldr	pc, [ip, #928]!	; 0x3a0

00010d14 <strncmp@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #94208	; 0x17000
   10d1c:	ldr	pc, [ip, #920]!	; 0x398

00010d20 <abort@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #94208	; 0x17000
   10d28:	ldr	pc, [ip, #912]!	; 0x390

00010d2c <putchar_unlocked@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #94208	; 0x17000
   10d34:	ldr	pc, [ip, #904]!	; 0x388

00010d38 <__assert_fail@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #94208	; 0x17000
   10d40:	ldr	pc, [ip, #896]!	; 0x380

Disassembly of section .text:

00010d44 <.text>:
   10d44:	mov	fp, #0
   10d48:	mov	lr, #0
   10d4c:	pop	{r1}		; (ldr r1, [sp], #4)
   10d50:	mov	r2, sp
   10d54:	push	{r2}		; (str r2, [sp, #-4]!)
   10d58:	push	{r0}		; (str r0, [sp, #-4]!)
   10d5c:	ldr	ip, [pc, #16]	; 10d74 <__assert_fail@plt+0x3c>
   10d60:	push	{ip}		; (str ip, [sp, #-4]!)
   10d64:	ldr	r0, [pc, #12]	; 10d78 <__assert_fail@plt+0x40>
   10d68:	ldr	r3, [pc, #12]	; 10d7c <__assert_fail@plt+0x44>
   10d6c:	bl	10c3c <__libc_start_main@plt>
   10d70:	bl	10d20 <abort@plt>
   10d74:	andeq	r6, r1, ip, lsl #24
   10d78:	andeq	r1, r1, ip, asr #5
   10d7c:	andeq	r6, r1, ip, lsr #23
   10d80:	ldr	r3, [pc, #20]	; 10d9c <__assert_fail@plt+0x64>
   10d84:	ldr	r2, [pc, #20]	; 10da0 <__assert_fail@plt+0x68>
   10d88:	add	r3, pc, r3
   10d8c:	ldr	r2, [r3, r2]
   10d90:	cmp	r2, #0
   10d94:	bxeq	lr
   10d98:	b	10c54 <__gmon_start__@plt>
   10d9c:	andeq	r7, r1, r0, ror r2
   10da0:	andeq	r0, r0, r4, asr #1
   10da4:	ldr	r3, [pc, #28]	; 10dc8 <__assert_fail@plt+0x90>
   10da8:	ldr	r0, [pc, #28]	; 10dcc <__assert_fail@plt+0x94>
   10dac:	sub	r3, r3, r0
   10db0:	cmp	r3, #6
   10db4:	bxls	lr
   10db8:	ldr	r3, [pc, #16]	; 10dd0 <__assert_fail@plt+0x98>
   10dbc:	cmp	r3, #0
   10dc0:	bxeq	lr
   10dc4:	bx	r3
   10dc8:	andeq	r8, r2, fp, lsl r1
   10dcc:	andeq	r8, r2, r8, lsl r1
   10dd0:	andeq	r0, r0, r0
   10dd4:	ldr	r1, [pc, #36]	; 10e00 <__assert_fail@plt+0xc8>
   10dd8:	ldr	r0, [pc, #36]	; 10e04 <__assert_fail@plt+0xcc>
   10ddc:	sub	r1, r1, r0
   10de0:	asr	r1, r1, #2
   10de4:	add	r1, r1, r1, lsr #31
   10de8:	asrs	r1, r1, #1
   10dec:	bxeq	lr
   10df0:	ldr	r3, [pc, #16]	; 10e08 <__assert_fail@plt+0xd0>
   10df4:	cmp	r3, #0
   10df8:	bxeq	lr
   10dfc:	bx	r3
   10e00:	andeq	r8, r2, r8, lsl r1
   10e04:	andeq	r8, r2, r8, lsl r1
   10e08:	andeq	r0, r0, r0
   10e0c:	push	{r4, lr}
   10e10:	ldr	r4, [pc, #24]	; 10e30 <__assert_fail@plt+0xf8>
   10e14:	ldrb	r3, [r4]
   10e18:	cmp	r3, #0
   10e1c:	popne	{r4, pc}
   10e20:	bl	10da4 <__assert_fail@plt+0x6c>
   10e24:	mov	r3, #1
   10e28:	strb	r3, [r4]
   10e2c:	pop	{r4, pc}
   10e30:	andeq	r8, r2, r8, lsr #2
   10e34:	ldr	r0, [pc, #40]	; 10e64 <__assert_fail@plt+0x12c>
   10e38:	ldr	r3, [r0]
   10e3c:	cmp	r3, #0
   10e40:	bne	10e48 <__assert_fail@plt+0x110>
   10e44:	b	10dd4 <__assert_fail@plt+0x9c>
   10e48:	ldr	r3, [pc, #24]	; 10e68 <__assert_fail@plt+0x130>
   10e4c:	cmp	r3, #0
   10e50:	beq	10e44 <__assert_fail@plt+0x10c>
   10e54:	push	{r4, lr}
   10e58:	blx	r3
   10e5c:	pop	{r4, lr}
   10e60:	b	10dd4 <__assert_fail@plt+0x9c>
   10e64:	andeq	r7, r2, r4, lsl pc
   10e68:	andeq	r0, r0, r0
   10e6c:	push	{fp, lr}
   10e70:	add	fp, sp, #4
   10e74:	sub	sp, sp, #80	; 0x50
   10e78:	str	r0, [fp, #-80]	; 0xffffffb0
   10e7c:	ldr	r3, [pc, #348]	; 10fe0 <__assert_fail@plt+0x2a8>
   10e80:	sub	ip, fp, #72	; 0x48
   10e84:	mov	lr, r3
   10e88:	ldm	lr!, {r0, r1, r2, r3}
   10e8c:	stmia	ip!, {r0, r1, r2, r3}
   10e90:	ldm	lr!, {r0, r1, r2, r3}
   10e94:	stmia	ip!, {r0, r1, r2, r3}
   10e98:	ldm	lr!, {r0, r1, r2, r3}
   10e9c:	stmia	ip!, {r0, r1, r2, r3}
   10ea0:	ldm	lr, {r0, r1}
   10ea4:	stm	ip, {r0, r1}
   10ea8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   10eac:	str	r3, [fp, #-8]
   10eb0:	sub	r3, fp, #72	; 0x48
   10eb4:	str	r3, [fp, #-12]
   10eb8:	b	10ec8 <__assert_fail@plt+0x190>
   10ebc:	ldr	r3, [fp, #-12]
   10ec0:	add	r3, r3, #8
   10ec4:	str	r3, [fp, #-12]
   10ec8:	ldr	r3, [fp, #-12]
   10ecc:	ldr	r3, [r3]
   10ed0:	cmp	r3, #0
   10ed4:	beq	10ef8 <__assert_fail@plt+0x1c0>
   10ed8:	ldr	r3, [fp, #-12]
   10edc:	ldr	r3, [r3]
   10ee0:	mov	r1, r3
   10ee4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   10ee8:	bl	10b40 <strcmp@plt>
   10eec:	mov	r3, r0
   10ef0:	cmp	r3, #0
   10ef4:	bne	10ebc <__assert_fail@plt+0x184>
   10ef8:	ldr	r3, [fp, #-12]
   10efc:	ldr	r3, [r3, #4]
   10f00:	cmp	r3, #0
   10f04:	beq	10f14 <__assert_fail@plt+0x1dc>
   10f08:	ldr	r3, [fp, #-12]
   10f0c:	ldr	r3, [r3, #4]
   10f10:	str	r3, [fp, #-8]
   10f14:	ldr	r0, [pc, #200]	; 10fe4 <__assert_fail@plt+0x2ac>
   10f18:	bl	10c78 <gettext@plt>
   10f1c:	mov	r3, r0
   10f20:	ldr	r2, [pc, #192]	; 10fe8 <__assert_fail@plt+0x2b0>
   10f24:	ldr	r1, [pc, #192]	; 10fec <__assert_fail@plt+0x2b4>
   10f28:	mov	r0, r3
   10f2c:	bl	10b4c <printf@plt>
   10f30:	mov	r1, #0
   10f34:	mov	r0, #5
   10f38:	bl	10ce4 <setlocale@plt>
   10f3c:	str	r0, [fp, #-16]
   10f40:	ldr	r3, [fp, #-16]
   10f44:	cmp	r3, #0
   10f48:	beq	10f88 <__assert_fail@plt+0x250>
   10f4c:	mov	r2, #3
   10f50:	ldr	r1, [pc, #152]	; 10ff0 <__assert_fail@plt+0x2b8>
   10f54:	ldr	r0, [fp, #-16]
   10f58:	bl	10d14 <strncmp@plt>
   10f5c:	mov	r3, r0
   10f60:	cmp	r3, #0
   10f64:	beq	10f88 <__assert_fail@plt+0x250>
   10f68:	ldr	r0, [pc, #132]	; 10ff4 <__assert_fail@plt+0x2bc>
   10f6c:	bl	10c78 <gettext@plt>
   10f70:	mov	r2, r0
   10f74:	ldr	r3, [pc, #124]	; 10ff8 <__assert_fail@plt+0x2c0>
   10f78:	ldr	r3, [r3]
   10f7c:	mov	r1, r3
   10f80:	mov	r0, r2
   10f84:	bl	10b28 <fputs_unlocked@plt>
   10f88:	ldr	r0, [pc, #108]	; 10ffc <__assert_fail@plt+0x2c4>
   10f8c:	bl	10c78 <gettext@plt>
   10f90:	mov	r3, r0
   10f94:	ldr	r2, [fp, #-80]	; 0xffffffb0
   10f98:	ldr	r1, [pc, #72]	; 10fe8 <__assert_fail@plt+0x2b0>
   10f9c:	mov	r0, r3
   10fa0:	bl	10b4c <printf@plt>
   10fa4:	ldr	r0, [pc, #84]	; 11000 <__assert_fail@plt+0x2c8>
   10fa8:	bl	10c78 <gettext@plt>
   10fac:	ldr	r2, [fp, #-8]
   10fb0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   10fb4:	cmp	r2, r3
   10fb8:	bne	10fc4 <__assert_fail@plt+0x28c>
   10fbc:	ldr	r3, [pc, #64]	; 11004 <__assert_fail@plt+0x2cc>
   10fc0:	b	10fc8 <__assert_fail@plt+0x290>
   10fc4:	ldr	r3, [pc, #60]	; 11008 <__assert_fail@plt+0x2d0>
   10fc8:	mov	r2, r3
   10fcc:	ldr	r1, [fp, #-8]
   10fd0:	bl	10b4c <printf@plt>
   10fd4:	nop			; (mov r0, r0)
   10fd8:	sub	sp, fp, #4
   10fdc:	pop	{fp, pc}
   10fe0:	andeq	r6, r1, r8, lsr #27
   10fe4:	andeq	r6, r1, r4, lsr ip
   10fe8:	andeq	r6, r1, ip, asr #24
   10fec:	andeq	r6, r1, r4, ror ip
   10ff0:	andeq	r6, r1, r4, lsl #25
   10ff4:	andeq	r6, r1, r8, lsl #25
   10ff8:	andeq	r8, r2, r4, lsr #2
   10ffc:	ldrdeq	r6, [r1], -r0
   11000:	andeq	r6, r1, ip, ror #25
   11004:	andeq	r6, r1, r0, lsr #26
   11008:	andeq	r6, r1, ip, lsr #26
   1100c:	push	{fp, lr}
   11010:	add	fp, sp, #4
   11014:	sub	sp, sp, #8
   11018:	str	r0, [fp, #-8]
   1101c:	ldr	r3, [fp, #-8]
   11020:	cmp	r3, #0
   11024:	beq	1103c <__assert_fail@plt+0x304>
   11028:	ldr	r3, [pc, #340]	; 11184 <__assert_fail@plt+0x44c>
   1102c:	mov	r2, #40	; 0x28
   11030:	ldr	r1, [pc, #336]	; 11188 <__assert_fail@plt+0x450>
   11034:	ldr	r0, [pc, #336]	; 1118c <__assert_fail@plt+0x454>
   11038:	bl	10d38 <__assert_fail@plt>
   1103c:	ldr	r0, [pc, #332]	; 11190 <__assert_fail@plt+0x458>
   11040:	bl	10c78 <gettext@plt>
   11044:	ldr	r3, [pc, #328]	; 11194 <__assert_fail@plt+0x45c>
   11048:	ldr	r1, [r3]
   1104c:	ldr	r3, [pc, #320]	; 11194 <__assert_fail@plt+0x45c>
   11050:	ldr	r3, [r3]
   11054:	mov	r2, r3
   11058:	bl	10b4c <printf@plt>
   1105c:	ldr	r0, [pc, #308]	; 11198 <__assert_fail@plt+0x460>
   11060:	bl	10c78 <gettext@plt>
   11064:	mov	r2, r0
   11068:	ldr	r3, [pc, #300]	; 1119c <__assert_fail@plt+0x464>
   1106c:	ldr	r3, [r3]
   11070:	mov	r1, r3
   11074:	mov	r0, r2
   11078:	bl	10b28 <fputs_unlocked@plt>
   1107c:	ldr	r0, [pc, #284]	; 111a0 <__assert_fail@plt+0x468>
   11080:	bl	10c78 <gettext@plt>
   11084:	mov	r2, r0
   11088:	ldr	r3, [pc, #268]	; 1119c <__assert_fail@plt+0x464>
   1108c:	ldr	r3, [r3]
   11090:	mov	r1, r3
   11094:	mov	r0, r2
   11098:	bl	10b28 <fputs_unlocked@plt>
   1109c:	ldr	r0, [pc, #256]	; 111a4 <__assert_fail@plt+0x46c>
   110a0:	bl	10c78 <gettext@plt>
   110a4:	mov	r2, r0
   110a8:	ldr	r3, [pc, #236]	; 1119c <__assert_fail@plt+0x464>
   110ac:	ldr	r3, [r3]
   110b0:	mov	r1, r3
   110b4:	mov	r0, r2
   110b8:	bl	10b28 <fputs_unlocked@plt>
   110bc:	ldr	r0, [pc, #228]	; 111a8 <__assert_fail@plt+0x470>
   110c0:	bl	10c78 <gettext@plt>
   110c4:	mov	r2, r0
   110c8:	ldr	r3, [pc, #204]	; 1119c <__assert_fail@plt+0x464>
   110cc:	ldr	r3, [r3]
   110d0:	mov	r1, r3
   110d4:	mov	r0, r2
   110d8:	bl	10b28 <fputs_unlocked@plt>
   110dc:	ldr	r0, [pc, #200]	; 111ac <__assert_fail@plt+0x474>
   110e0:	bl	10c78 <gettext@plt>
   110e4:	mov	r2, r0
   110e8:	ldr	r3, [pc, #172]	; 1119c <__assert_fail@plt+0x464>
   110ec:	ldr	r3, [r3]
   110f0:	mov	r1, r3
   110f4:	mov	r0, r2
   110f8:	bl	10b28 <fputs_unlocked@plt>
   110fc:	ldr	r0, [pc, #172]	; 111b0 <__assert_fail@plt+0x478>
   11100:	bl	10c78 <gettext@plt>
   11104:	mov	r2, r0
   11108:	ldr	r3, [pc, #140]	; 1119c <__assert_fail@plt+0x464>
   1110c:	ldr	r3, [r3]
   11110:	mov	r1, r3
   11114:	mov	r0, r2
   11118:	bl	10b28 <fputs_unlocked@plt>
   1111c:	ldr	r0, [pc, #144]	; 111b4 <__assert_fail@plt+0x47c>
   11120:	bl	10c78 <gettext@plt>
   11124:	mov	r2, r0
   11128:	ldr	r3, [pc, #108]	; 1119c <__assert_fail@plt+0x464>
   1112c:	ldr	r3, [r3]
   11130:	mov	r1, r3
   11134:	mov	r0, r2
   11138:	bl	10b28 <fputs_unlocked@plt>
   1113c:	ldr	r0, [pc, #116]	; 111b8 <__assert_fail@plt+0x480>
   11140:	bl	10c78 <gettext@plt>
   11144:	mov	r3, r0
   11148:	ldr	r1, [pc, #108]	; 111bc <__assert_fail@plt+0x484>
   1114c:	mov	r0, r3
   11150:	bl	10b4c <printf@plt>
   11154:	ldr	r0, [pc, #100]	; 111c0 <__assert_fail@plt+0x488>
   11158:	bl	10c78 <gettext@plt>
   1115c:	mov	r2, r0
   11160:	ldr	r3, [pc, #52]	; 1119c <__assert_fail@plt+0x464>
   11164:	ldr	r3, [r3]
   11168:	mov	r1, r3
   1116c:	mov	r0, r2
   11170:	bl	10b28 <fputs_unlocked@plt>
   11174:	ldr	r0, [pc, #64]	; 111bc <__assert_fail@plt+0x484>
   11178:	bl	10e6c <__assert_fail@plt+0x134>
   1117c:	ldr	r0, [fp, #-8]
   11180:	bl	10c6c <exit@plt>
   11184:			; <UNDEFINED> instruction: 0x000172b4
   11188:	andeq	r6, r1, r0, ror #27
   1118c:	andeq	r6, r1, ip, ror #27
   11190:	andeq	r6, r1, r4, lsl #28
   11194:	andeq	r8, r2, r4, lsr r1
   11198:	andeq	r6, r1, r4, asr #28
   1119c:	andeq	r8, r2, r4, lsr #2
   111a0:	andeq	r6, r1, r4, lsr #29
   111a4:	andeq	r6, r1, r8, lsr #30
   111a8:	andeq	r6, r1, r8, asr pc
   111ac:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   111b0:	ldrdeq	r6, [r1], -r0
   111b4:	strheq	r7, [r1], -r8
   111b8:	andeq	r7, r1, r8, lsr #2
   111bc:	andeq	r7, r1, r8, ror #3
   111c0:	strdeq	r7, [r1], -r0
   111c4:	push	{fp}		; (str fp, [sp, #-4]!)
   111c8:	add	fp, sp, #0
   111cc:	sub	sp, sp, #12
   111d0:	mov	r3, r0
   111d4:	strb	r3, [fp, #-5]
   111d8:	ldrb	r3, [fp, #-5]
   111dc:	sub	r3, r3, #65	; 0x41
   111e0:	cmp	r3, #37	; 0x25
   111e4:	ldrls	pc, [pc, r3, lsl #2]
   111e8:	b	11284 <__assert_fail@plt+0x54c>
   111ec:	muleq	r1, r0, r2
   111f0:	muleq	r1, r8, r2
   111f4:	andeq	r1, r1, r0, lsr #5
   111f8:	andeq	r1, r1, r8, lsr #5
   111fc:			; <UNDEFINED> instruction: 0x000112b0
   11200:			; <UNDEFINED> instruction: 0x000112b8
   11204:	andeq	r1, r1, r4, lsl #5
   11208:	andeq	r1, r1, r4, lsl #5
   1120c:	andeq	r1, r1, r4, lsl #5
   11210:	andeq	r1, r1, r4, lsl #5
   11214:	andeq	r1, r1, r4, lsl #5
   11218:	andeq	r1, r1, r4, lsl #5
   1121c:	andeq	r1, r1, r4, lsl #5
   11220:	andeq	r1, r1, r4, lsl #5
   11224:	andeq	r1, r1, r4, lsl #5
   11228:	andeq	r1, r1, r4, lsl #5
   1122c:	andeq	r1, r1, r4, lsl #5
   11230:	andeq	r1, r1, r4, lsl #5
   11234:	andeq	r1, r1, r4, lsl #5
   11238:	andeq	r1, r1, r4, lsl #5
   1123c:	andeq	r1, r1, r4, lsl #5
   11240:	andeq	r1, r1, r4, lsl #5
   11244:	andeq	r1, r1, r4, lsl #5
   11248:	andeq	r1, r1, r4, lsl #5
   1124c:	andeq	r1, r1, r4, lsl #5
   11250:	andeq	r1, r1, r4, lsl #5
   11254:	andeq	r1, r1, r4, lsl #5
   11258:	andeq	r1, r1, r4, lsl #5
   1125c:	andeq	r1, r1, r4, lsl #5
   11260:	andeq	r1, r1, r4, lsl #5
   11264:	andeq	r1, r1, r4, lsl #5
   11268:	andeq	r1, r1, r4, lsl #5
   1126c:	muleq	r1, r0, r2
   11270:	muleq	r1, r8, r2
   11274:	andeq	r1, r1, r0, lsr #5
   11278:	andeq	r1, r1, r8, lsr #5
   1127c:			; <UNDEFINED> instruction: 0x000112b0
   11280:			; <UNDEFINED> instruction: 0x000112b8
   11284:	ldrb	r3, [fp, #-5]
   11288:	sub	r3, r3, #48	; 0x30
   1128c:	b	112bc <__assert_fail@plt+0x584>
   11290:	mov	r3, #10
   11294:	b	112bc <__assert_fail@plt+0x584>
   11298:	mov	r3, #11
   1129c:	b	112bc <__assert_fail@plt+0x584>
   112a0:	mov	r3, #12
   112a4:	b	112bc <__assert_fail@plt+0x584>
   112a8:	mov	r3, #13
   112ac:	b	112bc <__assert_fail@plt+0x584>
   112b0:	mov	r3, #14
   112b4:	b	112bc <__assert_fail@plt+0x584>
   112b8:	mov	r3, #15
   112bc:	mov	r0, r3
   112c0:	add	sp, fp, #0
   112c4:	pop	{fp}		; (ldr fp, [sp], #4)
   112c8:	bx	lr
   112cc:	push	{r4, fp, lr}
   112d0:	add	fp, sp, #8
   112d4:	sub	sp, sp, #52	; 0x34
   112d8:	str	r0, [fp, #-40]	; 0xffffffd8
   112dc:	str	r1, [fp, #-44]	; 0xffffffd4
   112e0:	mov	r3, #1
   112e4:	strb	r3, [fp, #-13]
   112e8:	ldr	r0, [pc, #1864]	; 11a38 <__assert_fail@plt+0xd00>
   112ec:	bl	10c24 <getenv@plt>
   112f0:	mov	r3, r0
   112f4:	cmp	r3, #0
   112f8:	movne	r3, #1
   112fc:	moveq	r3, #0
   11300:	strb	r3, [fp, #-30]	; 0xffffffe2
   11304:	ldrb	r3, [fp, #-30]	; 0xffffffe2
   11308:	eor	r3, r3, #1
   1130c:	uxtb	r3, r3
   11310:	cmp	r3, #0
   11314:	bne	11348 <__assert_fail@plt+0x610>
   11318:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1131c:	cmp	r3, #1
   11320:	ble	11350 <__assert_fail@plt+0x618>
   11324:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11328:	add	r3, r3, #4
   1132c:	ldr	r3, [r3]
   11330:	ldr	r1, [pc, #1796]	; 11a3c <__assert_fail@plt+0xd04>
   11334:	mov	r0, r3
   11338:	bl	10b40 <strcmp@plt>
   1133c:	mov	r3, r0
   11340:	cmp	r3, #0
   11344:	bne	11350 <__assert_fail@plt+0x618>
   11348:	mov	r3, #1
   1134c:	b	11354 <__assert_fail@plt+0x61c>
   11350:	mov	r3, #0
   11354:	strb	r3, [fp, #-31]	; 0xffffffe1
   11358:	ldrb	r3, [fp, #-31]	; 0xffffffe1
   1135c:	and	r3, r3, #1
   11360:	strb	r3, [fp, #-31]	; 0xffffffe1
   11364:	mov	r3, #0
   11368:	strb	r3, [fp, #-14]
   1136c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11370:	ldr	r3, [r3]
   11374:	mov	r0, r3
   11378:	bl	11c08 <__assert_fail@plt+0xed0>
   1137c:	ldr	r1, [pc, #1724]	; 11a40 <__assert_fail@plt+0xd08>
   11380:	mov	r0, #6
   11384:	bl	10ce4 <setlocale@plt>
   11388:	ldr	r1, [pc, #1716]	; 11a44 <__assert_fail@plt+0xd0c>
   1138c:	ldr	r0, [pc, #1716]	; 11a48 <__assert_fail@plt+0xd10>
   11390:	bl	10d08 <bindtextdomain@plt>
   11394:	ldr	r0, [pc, #1708]	; 11a48 <__assert_fail@plt+0xd10>
   11398:	bl	10bb8 <textdomain@plt>
   1139c:	ldr	r0, [pc, #1704]	; 11a4c <__assert_fail@plt+0xd14>
   113a0:	bl	16c10 <__assert_fail@plt+0x5ed8>
   113a4:	ldrb	r3, [fp, #-31]	; 0xffffffe1
   113a8:	cmp	r3, #0
   113ac:	beq	1144c <__assert_fail@plt+0x714>
   113b0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   113b4:	cmp	r3, #2
   113b8:	bne	1144c <__assert_fail@plt+0x714>
   113bc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   113c0:	add	r3, r3, #4
   113c4:	ldr	r3, [r3]
   113c8:	ldr	r1, [pc, #1664]	; 11a50 <__assert_fail@plt+0xd18>
   113cc:	mov	r0, r3
   113d0:	bl	10b40 <strcmp@plt>
   113d4:	mov	r3, r0
   113d8:	cmp	r3, #0
   113dc:	bne	113e8 <__assert_fail@plt+0x6b0>
   113e0:	mov	r0, #0
   113e4:	bl	1100c <__assert_fail@plt+0x2d4>
   113e8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   113ec:	add	r3, r3, #4
   113f0:	ldr	r3, [r3]
   113f4:	ldr	r1, [pc, #1624]	; 11a54 <__assert_fail@plt+0xd1c>
   113f8:	mov	r0, r3
   113fc:	bl	10b40 <strcmp@plt>
   11400:	mov	r3, r0
   11404:	cmp	r3, #0
   11408:	bne	1144c <__assert_fail@plt+0x714>
   1140c:	ldr	r3, [pc, #1604]	; 11a58 <__assert_fail@plt+0xd20>
   11410:	ldr	r0, [r3]
   11414:	ldr	r3, [pc, #1600]	; 11a5c <__assert_fail@plt+0xd24>
   11418:	ldr	r2, [r3]
   1141c:	mov	r3, #0
   11420:	str	r3, [sp, #8]
   11424:	ldr	r3, [pc, #1588]	; 11a60 <__assert_fail@plt+0xd28>
   11428:	str	r3, [sp, #4]
   1142c:	ldr	r3, [pc, #1584]	; 11a64 <__assert_fail@plt+0xd2c>
   11430:	str	r3, [sp]
   11434:	mov	r3, r2
   11438:	ldr	r2, [pc, #1576]	; 11a68 <__assert_fail@plt+0xd30>
   1143c:	ldr	r1, [pc, #1576]	; 11a6c <__assert_fail@plt+0xd34>
   11440:	bl	14a04 <__assert_fail@plt+0x3ccc>
   11444:	mov	r3, #0
   11448:	b	11a2c <__assert_fail@plt+0xcf4>
   1144c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11450:	sub	r3, r3, #1
   11454:	str	r3, [fp, #-40]	; 0xffffffd8
   11458:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1145c:	add	r3, r3, #4
   11460:	str	r3, [fp, #-44]	; 0xffffffd4
   11464:	ldrb	r3, [fp, #-31]	; 0xffffffe1
   11468:	cmp	r3, #0
   1146c:	beq	11594 <__assert_fail@plt+0x85c>
   11470:	b	1156c <__assert_fail@plt+0x834>
   11474:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11478:	ldr	r3, [r3]
   1147c:	add	r3, r3, #1
   11480:	str	r3, [fp, #-20]	; 0xffffffec
   11484:	mov	r3, #0
   11488:	str	r3, [fp, #-24]	; 0xffffffe8
   1148c:	b	114cc <__assert_fail@plt+0x794>
   11490:	ldr	r2, [fp, #-20]	; 0xffffffec
   11494:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11498:	add	r3, r2, r3
   1149c:	ldrb	r3, [r3]
   114a0:	cmp	r3, #101	; 0x65
   114a4:	beq	114bc <__assert_fail@plt+0x784>
   114a8:	cmp	r3, #110	; 0x6e
   114ac:	beq	114bc <__assert_fail@plt+0x784>
   114b0:	cmp	r3, #69	; 0x45
   114b4:	beq	114bc <__assert_fail@plt+0x784>
   114b8:	b	11594 <__assert_fail@plt+0x85c>
   114bc:	nop			; (mov r0, r0)
   114c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   114c4:	add	r3, r3, #1
   114c8:	str	r3, [fp, #-24]	; 0xffffffe8
   114cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   114d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   114d4:	add	r3, r2, r3
   114d8:	ldrb	r3, [r3]
   114dc:	cmp	r3, #0
   114e0:	bne	11490 <__assert_fail@plt+0x758>
   114e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   114e8:	cmp	r3, #0
   114ec:	beq	11590 <__assert_fail@plt+0x858>
   114f0:	b	11544 <__assert_fail@plt+0x80c>
   114f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   114f8:	add	r2, r3, #1
   114fc:	str	r2, [fp, #-20]	; 0xffffffec
   11500:	ldrb	r3, [r3]
   11504:	cmp	r3, #101	; 0x65
   11508:	beq	11520 <__assert_fail@plt+0x7e8>
   1150c:	cmp	r3, #110	; 0x6e
   11510:	beq	11538 <__assert_fail@plt+0x800>
   11514:	cmp	r3, #69	; 0x45
   11518:	beq	1152c <__assert_fail@plt+0x7f4>
   1151c:	b	11544 <__assert_fail@plt+0x80c>
   11520:	mov	r3, #1
   11524:	strb	r3, [fp, #-14]
   11528:	b	11544 <__assert_fail@plt+0x80c>
   1152c:	mov	r3, #0
   11530:	strb	r3, [fp, #-14]
   11534:	b	11544 <__assert_fail@plt+0x80c>
   11538:	mov	r3, #0
   1153c:	strb	r3, [fp, #-13]
   11540:	nop			; (mov r0, r0)
   11544:	ldr	r3, [fp, #-20]	; 0xffffffec
   11548:	ldrb	r3, [r3]
   1154c:	cmp	r3, #0
   11550:	bne	114f4 <__assert_fail@plt+0x7bc>
   11554:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11558:	sub	r3, r3, #1
   1155c:	str	r3, [fp, #-40]	; 0xffffffd8
   11560:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11564:	add	r3, r3, #4
   11568:	str	r3, [fp, #-44]	; 0xffffffd4
   1156c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11570:	cmp	r3, #0
   11574:	ble	11594 <__assert_fail@plt+0x85c>
   11578:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1157c:	ldr	r3, [r3]
   11580:	ldrb	r3, [r3]
   11584:	cmp	r3, #45	; 0x2d
   11588:	beq	11474 <__assert_fail@plt+0x73c>
   1158c:	b	11594 <__assert_fail@plt+0x85c>
   11590:	nop			; (mov r0, r0)
   11594:	ldrb	r3, [fp, #-14]
   11598:	cmp	r3, #0
   1159c:	bne	119b0 <__assert_fail@plt+0xc78>
   115a0:	ldrb	r3, [fp, #-30]	; 0xffffffe2
   115a4:	cmp	r3, #0
   115a8:	beq	11a08 <__assert_fail@plt+0xcd0>
   115ac:	b	119b0 <__assert_fail@plt+0xc78>
   115b0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   115b4:	ldr	r3, [r3]
   115b8:	str	r3, [fp, #-28]	; 0xffffffe4
   115bc:	b	11964 <__assert_fail@plt+0xc2c>
   115c0:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   115c4:	cmp	r3, #92	; 0x5c
   115c8:	bne	11958 <__assert_fail@plt+0xc20>
   115cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   115d0:	ldrb	r3, [r3]
   115d4:	cmp	r3, #0
   115d8:	beq	11958 <__assert_fail@plt+0xc20>
   115dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   115e0:	add	r2, r3, #1
   115e4:	str	r2, [fp, #-28]	; 0xffffffe4
   115e8:	ldrb	r3, [r3]
   115ec:	strb	r3, [fp, #-29]	; 0xffffffe3
   115f0:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   115f4:	sub	r3, r3, #48	; 0x30
   115f8:	cmp	r3, #72	; 0x48
   115fc:	ldrls	pc, [pc, r3, lsl #2]
   11600:	b	11938 <__assert_fail@plt+0xc00>
   11604:	andeq	r1, r1, r0, asr r8
   11608:	andeq	r1, r1, ip, lsl #17
   1160c:	andeq	r1, r1, ip, lsl #17
   11610:	andeq	r1, r1, ip, lsl #17
   11614:	andeq	r1, r1, ip, lsl #17
   11618:	andeq	r1, r1, ip, lsl #17
   1161c:	andeq	r1, r1, ip, lsl #17
   11620:	andeq	r1, r1, ip, lsl #17
   11624:	andeq	r1, r1, r8, lsr r9
   11628:	andeq	r1, r1, r8, lsr r9
   1162c:	andeq	r1, r1, r8, lsr r9
   11630:	andeq	r1, r1, r8, lsr r9
   11634:	andeq	r1, r1, r8, lsr r9
   11638:	andeq	r1, r1, r8, lsr r9
   1163c:	andeq	r1, r1, r8, lsr r9
   11640:	andeq	r1, r1, r8, lsr r9
   11644:	andeq	r1, r1, r8, lsr r9
   11648:	andeq	r1, r1, r8, lsr r9
   1164c:	andeq	r1, r1, r8, lsr r9
   11650:	andeq	r1, r1, r8, lsr r9
   11654:	andeq	r1, r1, r8, lsr r9
   11658:	andeq	r1, r1, r8, lsr r9
   1165c:	andeq	r1, r1, r8, lsr r9
   11660:	andeq	r1, r1, r8, lsr r9
   11664:	andeq	r1, r1, r8, lsr r9
   11668:	andeq	r1, r1, r8, lsr r9
   1166c:	andeq	r1, r1, r8, lsr r9
   11670:	andeq	r1, r1, r8, lsr r9
   11674:	andeq	r1, r1, r8, lsr r9
   11678:	andeq	r1, r1, r8, lsr r9
   1167c:	andeq	r1, r1, r8, lsr r9
   11680:	andeq	r1, r1, r8, lsr r9
   11684:	andeq	r1, r1, r8, lsr r9
   11688:	andeq	r1, r1, r8, lsr r9
   1168c:	andeq	r1, r1, r8, lsr r9
   11690:	andeq	r1, r1, r8, lsr r9
   11694:	andeq	r1, r1, r8, lsr r9
   11698:	andeq	r1, r1, r8, lsr r9
   1169c:	andeq	r1, r1, r8, lsr r9
   116a0:	andeq	r1, r1, r8, lsr r9
   116a4:	andeq	r1, r1, r8, lsr r9
   116a8:	andeq	r1, r1, r8, lsr r9
   116ac:	andeq	r1, r1, r8, lsr r9
   116b0:	andeq	r1, r1, r8, lsr r9
   116b4:	andeq	r1, r1, r4, asr #18
   116b8:	andeq	r1, r1, r8, lsr r9
   116bc:	andeq	r1, r1, r8, lsr r9
   116c0:	andeq	r1, r1, r8, lsr r9
   116c4:	andeq	r1, r1, r8, lsr r9
   116c8:	andeq	r1, r1, r8, lsr #14
   116cc:	andeq	r1, r1, r4, lsr r7
   116d0:	andeq	r1, r1, r0, asr #14
   116d4:	andeq	r1, r1, r8, lsr r9
   116d8:	andeq	r1, r1, r8, asr #14
   116dc:	andeq	r1, r1, r4, asr r7
   116e0:	andeq	r1, r1, r8, lsr r9
   116e4:	andeq	r1, r1, r8, lsr r9
   116e8:	andeq	r1, r1, r8, lsr r9
   116ec:	andeq	r1, r1, r8, lsr r9
   116f0:	andeq	r1, r1, r8, lsr r9
   116f4:	andeq	r1, r1, r8, lsr r9
   116f8:	andeq	r1, r1, r8, lsr r9
   116fc:	andeq	r1, r1, r0, ror #14
   11700:	andeq	r1, r1, r8, lsr r9
   11704:	andeq	r1, r1, r8, lsr r9
   11708:	andeq	r1, r1, r8, lsr r9
   1170c:	andeq	r1, r1, ip, ror #14
   11710:	andeq	r1, r1, r8, lsr r9
   11714:	andeq	r1, r1, r8, ror r7
   11718:	andeq	r1, r1, r8, lsr r9
   1171c:	andeq	r1, r1, r4, lsl #15
   11720:	andeq	r1, r1, r8, lsr r9
   11724:	muleq	r1, r0, r7
   11728:	mov	r3, #7
   1172c:	strb	r3, [fp, #-29]	; 0xffffffe3
   11730:	b	11958 <__assert_fail@plt+0xc20>
   11734:	mov	r3, #8
   11738:	strb	r3, [fp, #-29]	; 0xffffffe3
   1173c:	b	11958 <__assert_fail@plt+0xc20>
   11740:	mov	r3, #0
   11744:	b	11a2c <__assert_fail@plt+0xcf4>
   11748:	mov	r3, #27
   1174c:	strb	r3, [fp, #-29]	; 0xffffffe3
   11750:	b	11958 <__assert_fail@plt+0xc20>
   11754:	mov	r3, #12
   11758:	strb	r3, [fp, #-29]	; 0xffffffe3
   1175c:	b	11958 <__assert_fail@plt+0xc20>
   11760:	mov	r3, #10
   11764:	strb	r3, [fp, #-29]	; 0xffffffe3
   11768:	b	11958 <__assert_fail@plt+0xc20>
   1176c:	mov	r3, #13
   11770:	strb	r3, [fp, #-29]	; 0xffffffe3
   11774:	b	11958 <__assert_fail@plt+0xc20>
   11778:	mov	r3, #9
   1177c:	strb	r3, [fp, #-29]	; 0xffffffe3
   11780:	b	11958 <__assert_fail@plt+0xc20>
   11784:	mov	r3, #11
   11788:	strb	r3, [fp, #-29]	; 0xffffffe3
   1178c:	b	11958 <__assert_fail@plt+0xc20>
   11790:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11794:	ldrb	r3, [r3]
   11798:	strb	r3, [fp, #-32]	; 0xffffffe0
   1179c:	bl	10c60 <__ctype_b_loc@plt>
   117a0:	mov	r3, r0
   117a4:	ldr	r2, [r3]
   117a8:	ldrb	r3, [fp, #-32]	; 0xffffffe0
   117ac:	lsl	r3, r3, #1
   117b0:	add	r3, r2, r3
   117b4:	ldrh	r3, [r3]
   117b8:	and	r3, r3, #4096	; 0x1000
   117bc:	cmp	r3, #0
   117c0:	beq	11934 <__assert_fail@plt+0xbfc>
   117c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   117c8:	add	r3, r3, #1
   117cc:	str	r3, [fp, #-28]	; 0xffffffe4
   117d0:	ldrb	r3, [fp, #-32]	; 0xffffffe0
   117d4:	mov	r0, r3
   117d8:	bl	111c4 <__assert_fail@plt+0x48c>
   117dc:	mov	r3, r0
   117e0:	strb	r3, [fp, #-29]	; 0xffffffe3
   117e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   117e8:	ldrb	r3, [r3]
   117ec:	strb	r3, [fp, #-32]	; 0xffffffe0
   117f0:	bl	10c60 <__ctype_b_loc@plt>
   117f4:	mov	r3, r0
   117f8:	ldr	r2, [r3]
   117fc:	ldrb	r3, [fp, #-32]	; 0xffffffe0
   11800:	lsl	r3, r3, #1
   11804:	add	r3, r2, r3
   11808:	ldrh	r3, [r3]
   1180c:	and	r3, r3, #4096	; 0x1000
   11810:	cmp	r3, #0
   11814:	beq	1194c <__assert_fail@plt+0xc14>
   11818:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1181c:	add	r3, r3, #1
   11820:	str	r3, [fp, #-28]	; 0xffffffe4
   11824:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   11828:	lsl	r3, r3, #4
   1182c:	uxtb	r4, r3
   11830:	ldrb	r3, [fp, #-32]	; 0xffffffe0
   11834:	mov	r0, r3
   11838:	bl	111c4 <__assert_fail@plt+0x48c>
   1183c:	mov	r3, r0
   11840:	uxtb	r3, r3
   11844:	add	r3, r4, r3
   11848:	strb	r3, [fp, #-29]	; 0xffffffe3
   1184c:	b	1194c <__assert_fail@plt+0xc14>
   11850:	mov	r3, #0
   11854:	strb	r3, [fp, #-29]	; 0xffffffe3
   11858:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1185c:	ldrb	r3, [r3]
   11860:	cmp	r3, #47	; 0x2f
   11864:	bls	11958 <__assert_fail@plt+0xc20>
   11868:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1186c:	ldrb	r3, [r3]
   11870:	cmp	r3, #55	; 0x37
   11874:	bhi	11958 <__assert_fail@plt+0xc20>
   11878:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1187c:	add	r2, r3, #1
   11880:	str	r2, [fp, #-28]	; 0xffffffe4
   11884:	ldrb	r3, [r3]
   11888:	strb	r3, [fp, #-29]	; 0xffffffe3
   1188c:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   11890:	sub	r3, r3, #48	; 0x30
   11894:	strb	r3, [fp, #-29]	; 0xffffffe3
   11898:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1189c:	ldrb	r3, [r3]
   118a0:	cmp	r3, #47	; 0x2f
   118a4:	bls	118e4 <__assert_fail@plt+0xbac>
   118a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   118ac:	ldrb	r3, [r3]
   118b0:	cmp	r3, #55	; 0x37
   118b4:	bhi	118e4 <__assert_fail@plt+0xbac>
   118b8:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   118bc:	lsl	r3, r3, #3
   118c0:	uxtb	r2, r3
   118c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   118c8:	add	r1, r3, #1
   118cc:	str	r1, [fp, #-28]	; 0xffffffe4
   118d0:	ldrb	r3, [r3]
   118d4:	add	r3, r2, r3
   118d8:	uxtb	r3, r3
   118dc:	sub	r3, r3, #48	; 0x30
   118e0:	strb	r3, [fp, #-29]	; 0xffffffe3
   118e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   118e8:	ldrb	r3, [r3]
   118ec:	cmp	r3, #47	; 0x2f
   118f0:	bls	11954 <__assert_fail@plt+0xc1c>
   118f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   118f8:	ldrb	r3, [r3]
   118fc:	cmp	r3, #55	; 0x37
   11900:	bhi	11954 <__assert_fail@plt+0xc1c>
   11904:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   11908:	lsl	r3, r3, #3
   1190c:	uxtb	r2, r3
   11910:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11914:	add	r1, r3, #1
   11918:	str	r1, [fp, #-28]	; 0xffffffe4
   1191c:	ldrb	r3, [r3]
   11920:	add	r3, r2, r3
   11924:	uxtb	r3, r3
   11928:	sub	r3, r3, #48	; 0x30
   1192c:	strb	r3, [fp, #-29]	; 0xffffffe3
   11930:	b	11954 <__assert_fail@plt+0xc1c>
   11934:	nop			; (mov r0, r0)
   11938:	mov	r0, #92	; 0x5c
   1193c:	bl	10d2c <putchar_unlocked@plt>
   11940:	b	11958 <__assert_fail@plt+0xc20>
   11944:	nop			; (mov r0, r0)
   11948:	b	11958 <__assert_fail@plt+0xc20>
   1194c:	nop			; (mov r0, r0)
   11950:	b	11958 <__assert_fail@plt+0xc20>
   11954:	nop			; (mov r0, r0)
   11958:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   1195c:	mov	r0, r3
   11960:	bl	10d2c <putchar_unlocked@plt>
   11964:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11968:	add	r2, r3, #1
   1196c:	str	r2, [fp, #-28]	; 0xffffffe4
   11970:	ldrb	r3, [r3]
   11974:	strb	r3, [fp, #-29]	; 0xffffffe3
   11978:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   1197c:	cmp	r3, #0
   11980:	bne	115c0 <__assert_fail@plt+0x888>
   11984:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11988:	sub	r3, r3, #1
   1198c:	str	r3, [fp, #-40]	; 0xffffffd8
   11990:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11994:	add	r3, r3, #4
   11998:	str	r3, [fp, #-44]	; 0xffffffd4
   1199c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   119a0:	cmp	r3, #0
   119a4:	ble	119b0 <__assert_fail@plt+0xc78>
   119a8:	mov	r0, #32
   119ac:	bl	10d2c <putchar_unlocked@plt>
   119b0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   119b4:	cmp	r3, #0
   119b8:	bgt	115b0 <__assert_fail@plt+0x878>
   119bc:	b	11a14 <__assert_fail@plt+0xcdc>
   119c0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   119c4:	ldr	r2, [r3]
   119c8:	ldr	r3, [pc, #136]	; 11a58 <__assert_fail@plt+0xd20>
   119cc:	ldr	r3, [r3]
   119d0:	mov	r1, r3
   119d4:	mov	r0, r2
   119d8:	bl	10b28 <fputs_unlocked@plt>
   119dc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   119e0:	sub	r3, r3, #1
   119e4:	str	r3, [fp, #-40]	; 0xffffffd8
   119e8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   119ec:	add	r3, r3, #4
   119f0:	str	r3, [fp, #-44]	; 0xffffffd4
   119f4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   119f8:	cmp	r3, #0
   119fc:	ble	11a08 <__assert_fail@plt+0xcd0>
   11a00:	mov	r0, #32
   11a04:	bl	10d2c <putchar_unlocked@plt>
   11a08:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11a0c:	cmp	r3, #0
   11a10:	bgt	119c0 <__assert_fail@plt+0xc88>
   11a14:	ldrb	r3, [fp, #-13]
   11a18:	cmp	r3, #0
   11a1c:	beq	11a28 <__assert_fail@plt+0xcf0>
   11a20:	mov	r0, #10
   11a24:	bl	10d2c <putchar_unlocked@plt>
   11a28:	mov	r3, #0
   11a2c:	mov	r0, r3
   11a30:	sub	sp, fp, #8
   11a34:	pop	{r4, fp, pc}
   11a38:	andeq	r7, r1, ip, asr r2
   11a3c:	andeq	r7, r1, ip, ror #4
   11a40:	andeq	r6, r1, ip, lsr #26
   11a44:	andeq	r7, r1, r0, ror r2
   11a48:	andeq	r6, r1, r4, asr #26
   11a4c:	ldrdeq	r1, [r1], -r4
   11a50:	andeq	r7, r1, r8, lsl #5
   11a54:	muleq	r1, r0, r2
   11a58:	andeq	r8, r2, r4, lsr #2
   11a5c:	ldrdeq	r8, [r2], -r0
   11a60:	muleq	r1, ip, r2
   11a64:	andeq	r7, r1, r8, lsr #5
   11a68:	andeq	r6, r1, r4, ror ip
   11a6c:	andeq	r7, r1, r8, ror #3
   11a70:	push	{fp}		; (str fp, [sp, #-4]!)
   11a74:	add	fp, sp, #0
   11a78:	sub	sp, sp, #12
   11a7c:	str	r0, [fp, #-8]
   11a80:	ldr	r2, [pc, #20]	; 11a9c <__assert_fail@plt+0xd64>
   11a84:	ldr	r3, [fp, #-8]
   11a88:	str	r3, [r2]
   11a8c:	nop			; (mov r0, r0)
   11a90:	add	sp, fp, #0
   11a94:	pop	{fp}		; (ldr fp, [sp], #4)
   11a98:	bx	lr
   11a9c:	andeq	r8, r2, ip, lsr #2
   11aa0:	push	{fp}		; (str fp, [sp, #-4]!)
   11aa4:	add	fp, sp, #0
   11aa8:	sub	sp, sp, #12
   11aac:	mov	r3, r0
   11ab0:	strb	r3, [fp, #-5]
   11ab4:	ldr	r2, [pc, #20]	; 11ad0 <__assert_fail@plt+0xd98>
   11ab8:	ldrb	r3, [fp, #-5]
   11abc:	strb	r3, [r2]
   11ac0:	nop			; (mov r0, r0)
   11ac4:	add	sp, fp, #0
   11ac8:	pop	{fp}		; (ldr fp, [sp], #4)
   11acc:	bx	lr
   11ad0:	andeq	r8, r2, r0, lsr r1
   11ad4:	push	{r4, fp, lr}
   11ad8:	add	fp, sp, #8
   11adc:	sub	sp, sp, #20
   11ae0:	ldr	r3, [pc, #256]	; 11be8 <__assert_fail@plt+0xeb0>
   11ae4:	ldr	r3, [r3]
   11ae8:	mov	r0, r3
   11aec:	bl	1597c <__assert_fail@plt+0x4c44>
   11af0:	mov	r3, r0
   11af4:	cmp	r3, #0
   11af8:	beq	11bb0 <__assert_fail@plt+0xe78>
   11afc:	ldr	r3, [pc, #232]	; 11bec <__assert_fail@plt+0xeb4>
   11b00:	ldrb	r3, [r3]
   11b04:	eor	r3, r3, #1
   11b08:	uxtb	r3, r3
   11b0c:	cmp	r3, #0
   11b10:	bne	11b28 <__assert_fail@plt+0xdf0>
   11b14:	bl	10c9c <__errno_location@plt>
   11b18:	mov	r3, r0
   11b1c:	ldr	r3, [r3]
   11b20:	cmp	r3, #32
   11b24:	beq	11bb0 <__assert_fail@plt+0xe78>
   11b28:	ldr	r0, [pc, #192]	; 11bf0 <__assert_fail@plt+0xeb8>
   11b2c:	bl	10c78 <gettext@plt>
   11b30:	str	r0, [fp, #-16]
   11b34:	ldr	r3, [pc, #184]	; 11bf4 <__assert_fail@plt+0xebc>
   11b38:	ldr	r3, [r3]
   11b3c:	cmp	r3, #0
   11b40:	beq	11b84 <__assert_fail@plt+0xe4c>
   11b44:	bl	10c9c <__errno_location@plt>
   11b48:	mov	r3, r0
   11b4c:	ldr	r4, [r3]
   11b50:	ldr	r3, [pc, #156]	; 11bf4 <__assert_fail@plt+0xebc>
   11b54:	ldr	r3, [r3]
   11b58:	mov	r0, r3
   11b5c:	bl	14068 <__assert_fail@plt+0x3330>
   11b60:	mov	r2, r0
   11b64:	ldr	r3, [fp, #-16]
   11b68:	str	r3, [sp]
   11b6c:	mov	r3, r2
   11b70:	ldr	r2, [pc, #128]	; 11bf8 <__assert_fail@plt+0xec0>
   11b74:	mov	r1, r4
   11b78:	mov	r0, #0
   11b7c:	bl	10c18 <error@plt>
   11b80:	b	11ba0 <__assert_fail@plt+0xe68>
   11b84:	bl	10c9c <__errno_location@plt>
   11b88:	mov	r3, r0
   11b8c:	ldr	r1, [r3]
   11b90:	ldr	r3, [fp, #-16]
   11b94:	ldr	r2, [pc, #96]	; 11bfc <__assert_fail@plt+0xec4>
   11b98:	mov	r0, #0
   11b9c:	bl	10c18 <error@plt>
   11ba0:	ldr	r3, [pc, #88]	; 11c00 <__assert_fail@plt+0xec8>
   11ba4:	ldr	r3, [r3]
   11ba8:	mov	r0, r3
   11bac:	bl	10b70 <_exit@plt>
   11bb0:	ldr	r3, [pc, #76]	; 11c04 <__assert_fail@plt+0xecc>
   11bb4:	ldr	r3, [r3]
   11bb8:	mov	r0, r3
   11bbc:	bl	1597c <__assert_fail@plt+0x4c44>
   11bc0:	mov	r3, r0
   11bc4:	cmp	r3, #0
   11bc8:	beq	11bdc <__assert_fail@plt+0xea4>
   11bcc:	ldr	r3, [pc, #44]	; 11c00 <__assert_fail@plt+0xec8>
   11bd0:	ldr	r3, [r3]
   11bd4:	mov	r0, r3
   11bd8:	bl	10b70 <_exit@plt>
   11bdc:	nop			; (mov r0, r0)
   11be0:	sub	sp, fp, #8
   11be4:	pop	{r4, fp, pc}
   11be8:	andeq	r8, r2, r4, lsr #2
   11bec:	andeq	r8, r2, r0, lsr r1
   11bf0:	andeq	r7, r1, ip, asr #5
   11bf4:	andeq	r8, r2, ip, lsr #2
   11bf8:	ldrdeq	r7, [r1], -r8
   11bfc:	andeq	r7, r1, r0, ror #5
   11c00:	ldrdeq	r8, [r2], -r4
   11c04:	andeq	r8, r2, r0, lsr #2
   11c08:	push	{fp, lr}
   11c0c:	add	fp, sp, #4
   11c10:	sub	sp, sp, #16
   11c14:	str	r0, [fp, #-16]
   11c18:	ldr	r3, [fp, #-16]
   11c1c:	cmp	r3, #0
   11c20:	bne	11c40 <__assert_fail@plt+0xf08>
   11c24:	ldr	r3, [pc, #220]	; 11d08 <__assert_fail@plt+0xfd0>
   11c28:	ldr	r3, [r3]
   11c2c:	mov	r2, #55	; 0x37
   11c30:	mov	r1, #1
   11c34:	ldr	r0, [pc, #208]	; 11d0c <__assert_fail@plt+0xfd4>
   11c38:	bl	10bd0 <fwrite@plt>
   11c3c:	bl	10d20 <abort@plt>
   11c40:	mov	r1, #47	; 0x2f
   11c44:	ldr	r0, [fp, #-16]
   11c48:	bl	10cf0 <strrchr@plt>
   11c4c:	str	r0, [fp, #-8]
   11c50:	ldr	r3, [fp, #-8]
   11c54:	cmp	r3, #0
   11c58:	beq	11c68 <__assert_fail@plt+0xf30>
   11c5c:	ldr	r3, [fp, #-8]
   11c60:	add	r3, r3, #1
   11c64:	b	11c6c <__assert_fail@plt+0xf34>
   11c68:	ldr	r3, [fp, #-16]
   11c6c:	str	r3, [fp, #-12]
   11c70:	ldr	r2, [fp, #-12]
   11c74:	ldr	r3, [fp, #-16]
   11c78:	sub	r3, r2, r3
   11c7c:	cmp	r3, #6
   11c80:	ble	11ce4 <__assert_fail@plt+0xfac>
   11c84:	ldr	r3, [fp, #-12]
   11c88:	sub	r3, r3, #7
   11c8c:	mov	r2, #7
   11c90:	ldr	r1, [pc, #120]	; 11d10 <__assert_fail@plt+0xfd8>
   11c94:	mov	r0, r3
   11c98:	bl	10d14 <strncmp@plt>
   11c9c:	mov	r3, r0
   11ca0:	cmp	r3, #0
   11ca4:	bne	11ce4 <__assert_fail@plt+0xfac>
   11ca8:	ldr	r3, [fp, #-12]
   11cac:	str	r3, [fp, #-16]
   11cb0:	mov	r2, #3
   11cb4:	ldr	r1, [pc, #88]	; 11d14 <__assert_fail@plt+0xfdc>
   11cb8:	ldr	r0, [fp, #-12]
   11cbc:	bl	10d14 <strncmp@plt>
   11cc0:	mov	r3, r0
   11cc4:	cmp	r3, #0
   11cc8:	bne	11ce4 <__assert_fail@plt+0xfac>
   11ccc:	ldr	r3, [fp, #-12]
   11cd0:	add	r3, r3, #3
   11cd4:	str	r3, [fp, #-16]
   11cd8:	ldr	r2, [pc, #56]	; 11d18 <__assert_fail@plt+0xfe0>
   11cdc:	ldr	r3, [fp, #-16]
   11ce0:	str	r3, [r2]
   11ce4:	ldr	r2, [pc, #48]	; 11d1c <__assert_fail@plt+0xfe4>
   11ce8:	ldr	r3, [fp, #-16]
   11cec:	str	r3, [r2]
   11cf0:	ldr	r2, [pc, #40]	; 11d20 <__assert_fail@plt+0xfe8>
   11cf4:	ldr	r3, [fp, #-16]
   11cf8:	str	r3, [r2]
   11cfc:	nop			; (mov r0, r0)
   11d00:	sub	sp, fp, #4
   11d04:	pop	{fp, pc}
   11d08:	andeq	r8, r2, r0, lsr #2
   11d0c:	andeq	r7, r1, r4, ror #5
   11d10:	andeq	r7, r1, ip, lsl r3
   11d14:	andeq	r7, r1, r4, lsr #6
   11d18:	andeq	r8, r2, r8, lsl r1
   11d1c:	andeq	r8, r2, r4, lsr r1
   11d20:	andeq	r8, r2, ip, lsl r1
   11d24:	push	{fp, lr}
   11d28:	add	fp, sp, #4
   11d2c:	sub	sp, sp, #16
   11d30:	str	r0, [fp, #-16]
   11d34:	bl	10c9c <__errno_location@plt>
   11d38:	mov	r3, r0
   11d3c:	ldr	r3, [r3]
   11d40:	str	r3, [fp, #-8]
   11d44:	ldr	r3, [fp, #-16]
   11d48:	cmp	r3, #0
   11d4c:	beq	11d58 <__assert_fail@plt+0x1020>
   11d50:	ldr	r3, [fp, #-16]
   11d54:	b	11d5c <__assert_fail@plt+0x1024>
   11d58:	ldr	r3, [pc, #48]	; 11d90 <__assert_fail@plt+0x1058>
   11d5c:	mov	r1, #48	; 0x30
   11d60:	mov	r0, r3
   11d64:	bl	15548 <__assert_fail@plt+0x4810>
   11d68:	mov	r3, r0
   11d6c:	str	r3, [fp, #-12]
   11d70:	bl	10c9c <__errno_location@plt>
   11d74:	mov	r2, r0
   11d78:	ldr	r3, [fp, #-8]
   11d7c:	str	r3, [r2]
   11d80:	ldr	r3, [fp, #-12]
   11d84:	mov	r0, r3
   11d88:	sub	sp, fp, #4
   11d8c:	pop	{fp, pc}
   11d90:	andeq	r8, r2, r8, lsr r1
   11d94:	push	{fp}		; (str fp, [sp, #-4]!)
   11d98:	add	fp, sp, #0
   11d9c:	sub	sp, sp, #12
   11da0:	str	r0, [fp, #-8]
   11da4:	ldr	r3, [fp, #-8]
   11da8:	cmp	r3, #0
   11dac:	beq	11db8 <__assert_fail@plt+0x1080>
   11db0:	ldr	r3, [fp, #-8]
   11db4:	b	11dbc <__assert_fail@plt+0x1084>
   11db8:	ldr	r3, [pc, #16]	; 11dd0 <__assert_fail@plt+0x1098>
   11dbc:	ldr	r3, [r3]
   11dc0:	mov	r0, r3
   11dc4:	add	sp, fp, #0
   11dc8:	pop	{fp}		; (ldr fp, [sp], #4)
   11dcc:	bx	lr
   11dd0:	andeq	r8, r2, r8, lsr r1
   11dd4:	push	{fp}		; (str fp, [sp, #-4]!)
   11dd8:	add	fp, sp, #0
   11ddc:	sub	sp, sp, #12
   11de0:	str	r0, [fp, #-8]
   11de4:	str	r1, [fp, #-12]
   11de8:	ldr	r3, [fp, #-8]
   11dec:	cmp	r3, #0
   11df0:	beq	11dfc <__assert_fail@plt+0x10c4>
   11df4:	ldr	r3, [fp, #-8]
   11df8:	b	11e00 <__assert_fail@plt+0x10c8>
   11dfc:	ldr	r3, [pc, #20]	; 11e18 <__assert_fail@plt+0x10e0>
   11e00:	ldr	r2, [fp, #-12]
   11e04:	str	r2, [r3]
   11e08:	nop			; (mov r0, r0)
   11e0c:	add	sp, fp, #0
   11e10:	pop	{fp}		; (ldr fp, [sp], #4)
   11e14:	bx	lr
   11e18:	andeq	r8, r2, r8, lsr r1
   11e1c:	push	{fp}		; (str fp, [sp, #-4]!)
   11e20:	add	fp, sp, #0
   11e24:	sub	sp, sp, #36	; 0x24
   11e28:	str	r0, [fp, #-24]	; 0xffffffe8
   11e2c:	mov	r3, r1
   11e30:	str	r2, [fp, #-32]	; 0xffffffe0
   11e34:	strb	r3, [fp, #-25]	; 0xffffffe7
   11e38:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   11e3c:	strb	r3, [fp, #-5]
   11e40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e44:	cmp	r3, #0
   11e48:	beq	11e54 <__assert_fail@plt+0x111c>
   11e4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e50:	b	11e58 <__assert_fail@plt+0x1120>
   11e54:	ldr	r3, [pc, #124]	; 11ed8 <__assert_fail@plt+0x11a0>
   11e58:	add	r2, r3, #8
   11e5c:	ldrb	r3, [fp, #-5]
   11e60:	lsr	r3, r3, #5
   11e64:	uxtb	r3, r3
   11e68:	lsl	r3, r3, #2
   11e6c:	add	r3, r2, r3
   11e70:	str	r3, [fp, #-12]
   11e74:	ldrb	r3, [fp, #-5]
   11e78:	and	r3, r3, #31
   11e7c:	str	r3, [fp, #-16]
   11e80:	ldr	r3, [fp, #-12]
   11e84:	ldr	r2, [r3]
   11e88:	ldr	r3, [fp, #-16]
   11e8c:	lsr	r3, r2, r3
   11e90:	and	r3, r3, #1
   11e94:	str	r3, [fp, #-20]	; 0xffffffec
   11e98:	ldr	r3, [fp, #-12]
   11e9c:	ldr	r3, [r3]
   11ea0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11ea4:	and	r1, r2, #1
   11ea8:	ldr	r2, [fp, #-20]	; 0xffffffec
   11eac:	eor	r1, r1, r2
   11eb0:	ldr	r2, [fp, #-16]
   11eb4:	lsl	r2, r1, r2
   11eb8:	eor	r2, r2, r3
   11ebc:	ldr	r3, [fp, #-12]
   11ec0:	str	r2, [r3]
   11ec4:	ldr	r3, [fp, #-20]	; 0xffffffec
   11ec8:	mov	r0, r3
   11ecc:	add	sp, fp, #0
   11ed0:	pop	{fp}		; (ldr fp, [sp], #4)
   11ed4:	bx	lr
   11ed8:	andeq	r8, r2, r8, lsr r1
   11edc:	push	{fp}		; (str fp, [sp, #-4]!)
   11ee0:	add	fp, sp, #0
   11ee4:	sub	sp, sp, #20
   11ee8:	str	r0, [fp, #-16]
   11eec:	str	r1, [fp, #-20]	; 0xffffffec
   11ef0:	ldr	r3, [fp, #-16]
   11ef4:	cmp	r3, #0
   11ef8:	bne	11f04 <__assert_fail@plt+0x11cc>
   11efc:	ldr	r3, [pc, #44]	; 11f30 <__assert_fail@plt+0x11f8>
   11f00:	str	r3, [fp, #-16]
   11f04:	ldr	r3, [fp, #-16]
   11f08:	ldr	r3, [r3, #4]
   11f0c:	str	r3, [fp, #-8]
   11f10:	ldr	r3, [fp, #-16]
   11f14:	ldr	r2, [fp, #-20]	; 0xffffffec
   11f18:	str	r2, [r3, #4]
   11f1c:	ldr	r3, [fp, #-8]
   11f20:	mov	r0, r3
   11f24:	add	sp, fp, #0
   11f28:	pop	{fp}		; (ldr fp, [sp], #4)
   11f2c:	bx	lr
   11f30:	andeq	r8, r2, r8, lsr r1
   11f34:	push	{fp, lr}
   11f38:	add	fp, sp, #4
   11f3c:	sub	sp, sp, #16
   11f40:	str	r0, [fp, #-8]
   11f44:	str	r1, [fp, #-12]
   11f48:	str	r2, [fp, #-16]
   11f4c:	ldr	r3, [fp, #-8]
   11f50:	cmp	r3, #0
   11f54:	bne	11f60 <__assert_fail@plt+0x1228>
   11f58:	ldr	r3, [pc, #76]	; 11fac <__assert_fail@plt+0x1274>
   11f5c:	str	r3, [fp, #-8]
   11f60:	ldr	r3, [fp, #-8]
   11f64:	mov	r2, #10
   11f68:	str	r2, [r3]
   11f6c:	ldr	r3, [fp, #-12]
   11f70:	cmp	r3, #0
   11f74:	beq	11f84 <__assert_fail@plt+0x124c>
   11f78:	ldr	r3, [fp, #-16]
   11f7c:	cmp	r3, #0
   11f80:	bne	11f88 <__assert_fail@plt+0x1250>
   11f84:	bl	10d20 <abort@plt>
   11f88:	ldr	r3, [fp, #-8]
   11f8c:	ldr	r2, [fp, #-12]
   11f90:	str	r2, [r3, #40]	; 0x28
   11f94:	ldr	r3, [fp, #-8]
   11f98:	ldr	r2, [fp, #-16]
   11f9c:	str	r2, [r3, #44]	; 0x2c
   11fa0:	nop			; (mov r0, r0)
   11fa4:	sub	sp, fp, #4
   11fa8:	pop	{fp, pc}
   11fac:	andeq	r8, r2, r8, lsr r1
   11fb0:	push	{fp, lr}
   11fb4:	add	fp, sp, #4
   11fb8:	sub	sp, sp, #56	; 0x38
   11fbc:	str	r0, [fp, #-56]	; 0xffffffc8
   11fc0:	str	r1, [fp, #-60]	; 0xffffffc4
   11fc4:	sub	r3, fp, #52	; 0x34
   11fc8:	mov	r2, #48	; 0x30
   11fcc:	mov	r1, #0
   11fd0:	mov	r0, r3
   11fd4:	bl	10cb4 <memset@plt>
   11fd8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11fdc:	cmp	r3, #10
   11fe0:	bne	11fe8 <__assert_fail@plt+0x12b0>
   11fe4:	bl	10d20 <abort@plt>
   11fe8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11fec:	str	r3, [fp, #-52]	; 0xffffffcc
   11ff0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11ff4:	mov	lr, r3
   11ff8:	sub	ip, fp, #52	; 0x34
   11ffc:	ldm	ip!, {r0, r1, r2, r3}
   12000:	stmia	lr!, {r0, r1, r2, r3}
   12004:	ldm	ip!, {r0, r1, r2, r3}
   12008:	stmia	lr!, {r0, r1, r2, r3}
   1200c:	ldm	ip, {r0, r1, r2, r3}
   12010:	stm	lr, {r0, r1, r2, r3}
   12014:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12018:	sub	sp, fp, #4
   1201c:	pop	{fp, pc}
   12020:	push	{fp, lr}
   12024:	add	fp, sp, #4
   12028:	sub	sp, sp, #16
   1202c:	str	r0, [fp, #-16]
   12030:	str	r1, [fp, #-20]	; 0xffffffec
   12034:	ldr	r0, [fp, #-16]
   12038:	bl	10c78 <gettext@plt>
   1203c:	str	r0, [fp, #-8]
   12040:	ldr	r2, [fp, #-8]
   12044:	ldr	r3, [fp, #-16]
   12048:	cmp	r2, r3
   1204c:	beq	12058 <__assert_fail@plt+0x1320>
   12050:	ldr	r3, [fp, #-8]
   12054:	b	120e8 <__assert_fail@plt+0x13b0>
   12058:	bl	15ea0 <__assert_fail@plt+0x5168>
   1205c:	str	r0, [fp, #-12]
   12060:	ldr	r1, [pc, #140]	; 120f4 <__assert_fail@plt+0x13bc>
   12064:	ldr	r0, [fp, #-12]
   12068:	bl	158e4 <__assert_fail@plt+0x4bac>
   1206c:	mov	r3, r0
   12070:	cmp	r3, #0
   12074:	bne	12098 <__assert_fail@plt+0x1360>
   12078:	ldr	r3, [fp, #-16]
   1207c:	ldrb	r3, [r3]
   12080:	cmp	r3, #96	; 0x60
   12084:	bne	12090 <__assert_fail@plt+0x1358>
   12088:	ldr	r3, [pc, #104]	; 120f8 <__assert_fail@plt+0x13c0>
   1208c:	b	120e8 <__assert_fail@plt+0x13b0>
   12090:	ldr	r3, [pc, #100]	; 120fc <__assert_fail@plt+0x13c4>
   12094:	b	120e8 <__assert_fail@plt+0x13b0>
   12098:	ldr	r1, [pc, #96]	; 12100 <__assert_fail@plt+0x13c8>
   1209c:	ldr	r0, [fp, #-12]
   120a0:	bl	158e4 <__assert_fail@plt+0x4bac>
   120a4:	mov	r3, r0
   120a8:	cmp	r3, #0
   120ac:	bne	120d0 <__assert_fail@plt+0x1398>
   120b0:	ldr	r3, [fp, #-16]
   120b4:	ldrb	r3, [r3]
   120b8:	cmp	r3, #96	; 0x60
   120bc:	bne	120c8 <__assert_fail@plt+0x1390>
   120c0:	ldr	r3, [pc, #60]	; 12104 <__assert_fail@plt+0x13cc>
   120c4:	b	120e8 <__assert_fail@plt+0x13b0>
   120c8:	ldr	r3, [pc, #56]	; 12108 <__assert_fail@plt+0x13d0>
   120cc:	b	120e8 <__assert_fail@plt+0x13b0>
   120d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   120d4:	cmp	r3, #9
   120d8:	bne	120e4 <__assert_fail@plt+0x13ac>
   120dc:	ldr	r3, [pc, #40]	; 1210c <__assert_fail@plt+0x13d4>
   120e0:	b	120e8 <__assert_fail@plt+0x13b0>
   120e4:	ldr	r3, [pc, #36]	; 12110 <__assert_fail@plt+0x13d8>
   120e8:	mov	r0, r3
   120ec:	sub	sp, fp, #4
   120f0:	pop	{fp, pc}
   120f4:	andeq	r7, r1, r4, ror #7
   120f8:	andeq	r7, r1, ip, ror #7
   120fc:	strdeq	r7, [r1], -r0
   12100:	strdeq	r7, [r1], -r4
   12104:	strdeq	r7, [r1], -ip
   12108:	andeq	r7, r1, r0, lsl #8
   1210c:	andeq	r7, r1, r4, lsl #8
   12110:	andeq	r7, r1, r8, lsl #8
   12114:	push	{r4, fp, lr}
   12118:	add	fp, sp, #8
   1211c:	sub	sp, sp, #116	; 0x74
   12120:	str	r0, [fp, #-88]	; 0xffffffa8
   12124:	str	r1, [fp, #-92]	; 0xffffffa4
   12128:	str	r2, [fp, #-96]	; 0xffffffa0
   1212c:	str	r3, [fp, #-100]	; 0xffffff9c
   12130:	mov	r3, #0
   12134:	str	r3, [fp, #-20]	; 0xffffffec
   12138:	mov	r3, #0
   1213c:	str	r3, [fp, #-24]	; 0xffffffe8
   12140:	mov	r3, #0
   12144:	str	r3, [fp, #-28]	; 0xffffffe4
   12148:	mov	r3, #0
   1214c:	str	r3, [fp, #-32]	; 0xffffffe0
   12150:	mov	r3, #0
   12154:	strb	r3, [fp, #-33]	; 0xffffffdf
   12158:	bl	10be8 <__ctype_get_mb_cur_max@plt>
   1215c:	mov	r3, r0
   12160:	cmp	r3, #1
   12164:	moveq	r3, #1
   12168:	movne	r3, #0
   1216c:	strb	r3, [fp, #-57]	; 0xffffffc7
   12170:	ldr	r3, [fp, #8]
   12174:	and	r3, r3, #2
   12178:	cmp	r3, #0
   1217c:	movne	r3, #1
   12180:	moveq	r3, #0
   12184:	strb	r3, [fp, #-34]	; 0xffffffde
   12188:	mov	r3, #0
   1218c:	strb	r3, [fp, #-35]	; 0xffffffdd
   12190:	mov	r3, #0
   12194:	strb	r3, [fp, #-36]	; 0xffffffdc
   12198:	mov	r3, #1
   1219c:	strb	r3, [fp, #-37]	; 0xffffffdb
   121a0:	ldr	r3, [fp, #4]
   121a4:	cmp	r3, #10
   121a8:	ldrls	pc, [pc, r3, lsl #2]
   121ac:	b	123b4 <__assert_fail@plt+0x167c>
   121b0:	andeq	r2, r1, r8, lsr #7
   121b4:	andeq	r2, r1, r4, lsr #6
   121b8:	andeq	r2, r1, r8, asr #6
   121bc:	andeq	r2, r1, ip, lsl r3
   121c0:	andeq	r2, r1, ip, lsr #6
   121c4:	andeq	r2, r1, ip, ror #3
   121c8:	ldrdeq	r2, [r1], -ip
   121cc:	andeq	r2, r1, ip, asr #4
   121d0:	andeq	r2, r1, r0, ror #4
   121d4:	andeq	r2, r1, r0, ror #4
   121d8:	andeq	r2, r1, r0, ror #4
   121dc:	mov	r3, #5
   121e0:	str	r3, [fp, #4]
   121e4:	mov	r3, #1
   121e8:	strb	r3, [fp, #-34]	; 0xffffffde
   121ec:	ldrb	r3, [fp, #-34]	; 0xffffffde
   121f0:	eor	r3, r3, #1
   121f4:	uxtb	r3, r3
   121f8:	cmp	r3, #0
   121fc:	beq	12230 <__assert_fail@plt+0x14f8>
   12200:	ldr	r2, [fp, #-20]	; 0xffffffec
   12204:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12208:	cmp	r2, r3
   1220c:	bcs	12224 <__assert_fail@plt+0x14ec>
   12210:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12214:	ldr	r3, [fp, #-20]	; 0xffffffec
   12218:	add	r3, r2, r3
   1221c:	mov	r2, #34	; 0x22
   12220:	strb	r2, [r3]
   12224:	ldr	r3, [fp, #-20]	; 0xffffffec
   12228:	add	r3, r3, #1
   1222c:	str	r3, [fp, #-20]	; 0xffffffec
   12230:	mov	r3, #1
   12234:	strb	r3, [fp, #-33]	; 0xffffffdf
   12238:	ldr	r3, [pc, #3872]	; 13160 <__assert_fail@plt+0x2428>
   1223c:	str	r3, [fp, #-28]	; 0xffffffe4
   12240:	mov	r3, #1
   12244:	str	r3, [fp, #-32]	; 0xffffffe0
   12248:	b	123b8 <__assert_fail@plt+0x1680>
   1224c:	mov	r3, #1
   12250:	strb	r3, [fp, #-33]	; 0xffffffdf
   12254:	mov	r3, #0
   12258:	strb	r3, [fp, #-34]	; 0xffffffde
   1225c:	b	123b8 <__assert_fail@plt+0x1680>
   12260:	ldr	r3, [fp, #4]
   12264:	cmp	r3, #10
   12268:	beq	1228c <__assert_fail@plt+0x1554>
   1226c:	ldr	r1, [fp, #4]
   12270:	ldr	r0, [pc, #3820]	; 13164 <__assert_fail@plt+0x242c>
   12274:	bl	12020 <__assert_fail@plt+0x12e8>
   12278:	str	r0, [fp, #16]
   1227c:	ldr	r1, [fp, #4]
   12280:	ldr	r0, [pc, #3808]	; 13168 <__assert_fail@plt+0x2430>
   12284:	bl	12020 <__assert_fail@plt+0x12e8>
   12288:	str	r0, [fp, #20]
   1228c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12290:	eor	r3, r3, #1
   12294:	uxtb	r3, r3
   12298:	cmp	r3, #0
   1229c:	beq	122fc <__assert_fail@plt+0x15c4>
   122a0:	ldr	r3, [fp, #16]
   122a4:	str	r3, [fp, #-28]	; 0xffffffe4
   122a8:	b	122ec <__assert_fail@plt+0x15b4>
   122ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   122b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   122b4:	cmp	r2, r3
   122b8:	bcs	122d4 <__assert_fail@plt+0x159c>
   122bc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   122c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   122c4:	add	r3, r2, r3
   122c8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   122cc:	ldrb	r2, [r2]
   122d0:	strb	r2, [r3]
   122d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   122d8:	add	r3, r3, #1
   122dc:	str	r3, [fp, #-20]	; 0xffffffec
   122e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   122e4:	add	r3, r3, #1
   122e8:	str	r3, [fp, #-28]	; 0xffffffe4
   122ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   122f0:	ldrb	r3, [r3]
   122f4:	cmp	r3, #0
   122f8:	bne	122ac <__assert_fail@plt+0x1574>
   122fc:	mov	r3, #1
   12300:	strb	r3, [fp, #-33]	; 0xffffffdf
   12304:	ldr	r3, [fp, #20]
   12308:	str	r3, [fp, #-28]	; 0xffffffe4
   1230c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12310:	bl	10c84 <strlen@plt>
   12314:	str	r0, [fp, #-32]	; 0xffffffe0
   12318:	b	123b8 <__assert_fail@plt+0x1680>
   1231c:	mov	r3, #1
   12320:	strb	r3, [fp, #-33]	; 0xffffffdf
   12324:	mov	r3, #1
   12328:	strb	r3, [fp, #-34]	; 0xffffffde
   1232c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12330:	eor	r3, r3, #1
   12334:	uxtb	r3, r3
   12338:	cmp	r3, #0
   1233c:	beq	12348 <__assert_fail@plt+0x1610>
   12340:	mov	r3, #1
   12344:	strb	r3, [fp, #-33]	; 0xffffffdf
   12348:	mov	r3, #2
   1234c:	str	r3, [fp, #4]
   12350:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12354:	eor	r3, r3, #1
   12358:	uxtb	r3, r3
   1235c:	cmp	r3, #0
   12360:	beq	12394 <__assert_fail@plt+0x165c>
   12364:	ldr	r2, [fp, #-20]	; 0xffffffec
   12368:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1236c:	cmp	r2, r3
   12370:	bcs	12388 <__assert_fail@plt+0x1650>
   12374:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12378:	ldr	r3, [fp, #-20]	; 0xffffffec
   1237c:	add	r3, r2, r3
   12380:	mov	r2, #39	; 0x27
   12384:	strb	r2, [r3]
   12388:	ldr	r3, [fp, #-20]	; 0xffffffec
   1238c:	add	r3, r3, #1
   12390:	str	r3, [fp, #-20]	; 0xffffffec
   12394:	ldr	r3, [pc, #3532]	; 13168 <__assert_fail@plt+0x2430>
   12398:	str	r3, [fp, #-28]	; 0xffffffe4
   1239c:	mov	r3, #1
   123a0:	str	r3, [fp, #-32]	; 0xffffffe0
   123a4:	b	123b8 <__assert_fail@plt+0x1680>
   123a8:	mov	r3, #0
   123ac:	strb	r3, [fp, #-34]	; 0xffffffde
   123b0:	b	123b8 <__assert_fail@plt+0x1680>
   123b4:	bl	10d20 <abort@plt>
   123b8:	mov	r3, #0
   123bc:	str	r3, [fp, #-16]
   123c0:	b	13550 <__assert_fail@plt+0x2818>
   123c4:	mov	r3, #0
   123c8:	strb	r3, [fp, #-40]	; 0xffffffd8
   123cc:	mov	r3, #0
   123d0:	strb	r3, [fp, #-41]	; 0xffffffd7
   123d4:	mov	r3, #0
   123d8:	strb	r3, [fp, #-42]	; 0xffffffd6
   123dc:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   123e0:	cmp	r3, #0
   123e4:	beq	12480 <__assert_fail@plt+0x1748>
   123e8:	ldr	r3, [fp, #4]
   123ec:	cmp	r3, #2
   123f0:	beq	12480 <__assert_fail@plt+0x1748>
   123f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   123f8:	cmp	r3, #0
   123fc:	beq	12480 <__assert_fail@plt+0x1748>
   12400:	ldr	r2, [fp, #-16]
   12404:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12408:	add	r4, r2, r3
   1240c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12410:	cmn	r3, #1
   12414:	bne	12438 <__assert_fail@plt+0x1700>
   12418:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1241c:	cmp	r3, #1
   12420:	bls	12438 <__assert_fail@plt+0x1700>
   12424:	ldr	r0, [fp, #-96]	; 0xffffffa0
   12428:	bl	10c84 <strlen@plt>
   1242c:	str	r0, [fp, #-100]	; 0xffffff9c
   12430:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12434:	b	1243c <__assert_fail@plt+0x1704>
   12438:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1243c:	cmp	r4, r3
   12440:	bhi	12480 <__assert_fail@plt+0x1748>
   12444:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12448:	ldr	r3, [fp, #-16]
   1244c:	add	r3, r2, r3
   12450:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12454:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12458:	mov	r0, r3
   1245c:	bl	10b94 <memcmp@plt>
   12460:	mov	r3, r0
   12464:	cmp	r3, #0
   12468:	bne	12480 <__assert_fail@plt+0x1748>
   1246c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12470:	cmp	r3, #0
   12474:	bne	1370c <__assert_fail@plt+0x29d4>
   12478:	mov	r3, #1
   1247c:	strb	r3, [fp, #-40]	; 0xffffffd8
   12480:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12484:	ldr	r3, [fp, #-16]
   12488:	add	r3, r2, r3
   1248c:	ldrb	r3, [r3]
   12490:	strb	r3, [fp, #-38]	; 0xffffffda
   12494:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12498:	cmp	r3, #126	; 0x7e
   1249c:	ldrls	pc, [pc, r3, lsl #2]
   124a0:	b	12ccc <__assert_fail@plt+0x1f94>
   124a4:	andeq	r2, r1, r0, lsr #13
   124a8:	andeq	r2, r1, ip, asr #25
   124ac:	andeq	r2, r1, ip, asr #25
   124b0:	andeq	r2, r1, ip, asr #25
   124b4:	andeq	r2, r1, ip, asr #25
   124b8:	andeq	r2, r1, ip, asr #25
   124bc:	andeq	r2, r1, ip, asr #25
   124c0:	muleq	r1, r0, sl
   124c4:	muleq	r1, ip, sl
   124c8:	andeq	r2, r1, ip, asr #21
   124cc:			; <UNDEFINED> instruction: 0x00012ab4
   124d0:	ldrdeq	r2, [r1], -r8
   124d4:	andeq	r2, r1, r8, lsr #21
   124d8:	andeq	r2, r1, r0, asr #21
   124dc:	andeq	r2, r1, ip, asr #25
   124e0:	andeq	r2, r1, ip, asr #25
   124e4:	andeq	r2, r1, ip, asr #25
   124e8:	andeq	r2, r1, ip, asr #25
   124ec:	andeq	r2, r1, ip, asr #25
   124f0:	andeq	r2, r1, ip, asr #25
   124f4:	andeq	r2, r1, ip, asr #25
   124f8:	andeq	r2, r1, ip, asr #25
   124fc:	andeq	r2, r1, ip, asr #25
   12500:	andeq	r2, r1, ip, asr #25
   12504:	andeq	r2, r1, ip, asr #25
   12508:	andeq	r2, r1, ip, asr #25
   1250c:	andeq	r2, r1, ip, asr #25
   12510:	andeq	r2, r1, ip, asr #25
   12514:	andeq	r2, r1, ip, asr #25
   12518:	andeq	r2, r1, ip, asr #25
   1251c:	andeq	r2, r1, ip, asr #25
   12520:	andeq	r2, r1, ip, asr #25
   12524:			; <UNDEFINED> instruction: 0x00012bb0
   12528:			; <UNDEFINED> instruction: 0x00012bb8
   1252c:			; <UNDEFINED> instruction: 0x00012bb8
   12530:	andeq	r2, r1, r4, lsr #23
   12534:			; <UNDEFINED> instruction: 0x00012bb8
   12538:	andeq	r2, r1, r0, asr #25
   1253c:			; <UNDEFINED> instruction: 0x00012bb8
   12540:	ldrdeq	r2, [r1], -r4
   12544:			; <UNDEFINED> instruction: 0x00012bb8
   12548:			; <UNDEFINED> instruction: 0x00012bb8
   1254c:			; <UNDEFINED> instruction: 0x00012bb8
   12550:	andeq	r2, r1, r0, asr #25
   12554:	andeq	r2, r1, r0, asr #25
   12558:	andeq	r2, r1, r0, asr #25
   1255c:	andeq	r2, r1, r0, asr #25
   12560:	andeq	r2, r1, r0, asr #25
   12564:	andeq	r2, r1, r0, asr #25
   12568:	andeq	r2, r1, r0, asr #25
   1256c:	andeq	r2, r1, r0, asr #25
   12570:	andeq	r2, r1, r0, asr #25
   12574:	andeq	r2, r1, r0, asr #25
   12578:	andeq	r2, r1, r0, asr #25
   1257c:	andeq	r2, r1, r0, asr #25
   12580:	andeq	r2, r1, r0, asr #25
   12584:	andeq	r2, r1, r0, asr #25
   12588:	andeq	r2, r1, r0, asr #25
   1258c:	andeq	r2, r1, r0, asr #25
   12590:			; <UNDEFINED> instruction: 0x00012bb8
   12594:			; <UNDEFINED> instruction: 0x00012bb8
   12598:			; <UNDEFINED> instruction: 0x00012bb8
   1259c:			; <UNDEFINED> instruction: 0x00012bb8
   125a0:	andeq	r2, r1, r0, lsl #17
   125a4:	andeq	r2, r1, ip, asr #25
   125a8:	andeq	r2, r1, r0, asr #25
   125ac:	andeq	r2, r1, r0, asr #25
   125b0:	andeq	r2, r1, r0, asr #25
   125b4:	andeq	r2, r1, r0, asr #25
   125b8:	andeq	r2, r1, r0, asr #25
   125bc:	andeq	r2, r1, r0, asr #25
   125c0:	andeq	r2, r1, r0, asr #25
   125c4:	andeq	r2, r1, r0, asr #25
   125c8:	andeq	r2, r1, r0, asr #25
   125cc:	andeq	r2, r1, r0, asr #25
   125d0:	andeq	r2, r1, r0, asr #25
   125d4:	andeq	r2, r1, r0, asr #25
   125d8:	andeq	r2, r1, r0, asr #25
   125dc:	andeq	r2, r1, r0, asr #25
   125e0:	andeq	r2, r1, r0, asr #25
   125e4:	andeq	r2, r1, r0, asr #25
   125e8:	andeq	r2, r1, r0, asr #25
   125ec:	andeq	r2, r1, r0, asr #25
   125f0:	andeq	r2, r1, r0, asr #25
   125f4:	andeq	r2, r1, r0, asr #25
   125f8:	andeq	r2, r1, r0, asr #25
   125fc:	andeq	r2, r1, r0, asr #25
   12600:	andeq	r2, r1, r0, asr #25
   12604:	andeq	r2, r1, r0, asr #25
   12608:	andeq	r2, r1, r0, asr #25
   1260c:	andeq	r2, r1, r0, asr #25
   12610:			; <UNDEFINED> instruction: 0x00012bb8
   12614:	andeq	r2, r1, r4, ror #21
   12618:	andeq	r2, r1, r0, asr #25
   1261c:			; <UNDEFINED> instruction: 0x00012bb8
   12620:	andeq	r2, r1, r0, asr #25
   12624:			; <UNDEFINED> instruction: 0x00012bb8
   12628:	andeq	r2, r1, r0, asr #25
   1262c:	andeq	r2, r1, r0, asr #25
   12630:	andeq	r2, r1, r0, asr #25
   12634:	andeq	r2, r1, r0, asr #25
   12638:	andeq	r2, r1, r0, asr #25
   1263c:	andeq	r2, r1, r0, asr #25
   12640:	andeq	r2, r1, r0, asr #25
   12644:	andeq	r2, r1, r0, asr #25
   12648:	andeq	r2, r1, r0, asr #25
   1264c:	andeq	r2, r1, r0, asr #25
   12650:	andeq	r2, r1, r0, asr #25
   12654:	andeq	r2, r1, r0, asr #25
   12658:	andeq	r2, r1, r0, asr #25
   1265c:	andeq	r2, r1, r0, asr #25
   12660:	andeq	r2, r1, r0, asr #25
   12664:	andeq	r2, r1, r0, asr #25
   12668:	andeq	r2, r1, r0, asr #25
   1266c:	andeq	r2, r1, r0, asr #25
   12670:	andeq	r2, r1, r0, asr #25
   12674:	andeq	r2, r1, r0, asr #25
   12678:	andeq	r2, r1, r0, asr #25
   1267c:	andeq	r2, r1, r0, asr #25
   12680:	andeq	r2, r1, r0, asr #25
   12684:	andeq	r2, r1, r0, asr #25
   12688:	andeq	r2, r1, r0, asr #25
   1268c:	andeq	r2, r1, r0, asr #25
   12690:	andeq	r2, r1, ip, asr fp
   12694:			; <UNDEFINED> instruction: 0x00012bb8
   12698:	andeq	r2, r1, ip, asr fp
   1269c:	andeq	r2, r1, r4, lsr #23
   126a0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   126a4:	cmp	r3, #0
   126a8:	beq	1286c <__assert_fail@plt+0x1b34>
   126ac:	ldrb	r3, [fp, #-34]	; 0xffffffde
   126b0:	cmp	r3, #0
   126b4:	bne	13714 <__assert_fail@plt+0x29dc>
   126b8:	mov	r3, #1
   126bc:	strb	r3, [fp, #-41]	; 0xffffffd7
   126c0:	ldr	r3, [fp, #4]
   126c4:	cmp	r3, #2
   126c8:	bne	12778 <__assert_fail@plt+0x1a40>
   126cc:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   126d0:	eor	r3, r3, #1
   126d4:	uxtb	r3, r3
   126d8:	cmp	r3, #0
   126dc:	beq	12778 <__assert_fail@plt+0x1a40>
   126e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   126e4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   126e8:	cmp	r2, r3
   126ec:	bcs	12704 <__assert_fail@plt+0x19cc>
   126f0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   126f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   126f8:	add	r3, r2, r3
   126fc:	mov	r2, #39	; 0x27
   12700:	strb	r2, [r3]
   12704:	ldr	r3, [fp, #-20]	; 0xffffffec
   12708:	add	r3, r3, #1
   1270c:	str	r3, [fp, #-20]	; 0xffffffec
   12710:	ldr	r2, [fp, #-20]	; 0xffffffec
   12714:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12718:	cmp	r2, r3
   1271c:	bcs	12734 <__assert_fail@plt+0x19fc>
   12720:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12724:	ldr	r3, [fp, #-20]	; 0xffffffec
   12728:	add	r3, r2, r3
   1272c:	mov	r2, #36	; 0x24
   12730:	strb	r2, [r3]
   12734:	ldr	r3, [fp, #-20]	; 0xffffffec
   12738:	add	r3, r3, #1
   1273c:	str	r3, [fp, #-20]	; 0xffffffec
   12740:	ldr	r2, [fp, #-20]	; 0xffffffec
   12744:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12748:	cmp	r2, r3
   1274c:	bcs	12764 <__assert_fail@plt+0x1a2c>
   12750:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12754:	ldr	r3, [fp, #-20]	; 0xffffffec
   12758:	add	r3, r2, r3
   1275c:	mov	r2, #39	; 0x27
   12760:	strb	r2, [r3]
   12764:	ldr	r3, [fp, #-20]	; 0xffffffec
   12768:	add	r3, r3, #1
   1276c:	str	r3, [fp, #-20]	; 0xffffffec
   12770:	mov	r3, #1
   12774:	strb	r3, [fp, #-35]	; 0xffffffdd
   12778:	ldr	r2, [fp, #-20]	; 0xffffffec
   1277c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12780:	cmp	r2, r3
   12784:	bcs	1279c <__assert_fail@plt+0x1a64>
   12788:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1278c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12790:	add	r3, r2, r3
   12794:	mov	r2, #92	; 0x5c
   12798:	strb	r2, [r3]
   1279c:	ldr	r3, [fp, #-20]	; 0xffffffec
   127a0:	add	r3, r3, #1
   127a4:	str	r3, [fp, #-20]	; 0xffffffec
   127a8:	ldr	r3, [fp, #4]
   127ac:	cmp	r3, #2
   127b0:	beq	12860 <__assert_fail@plt+0x1b28>
   127b4:	ldr	r3, [fp, #-16]
   127b8:	add	r2, r3, #1
   127bc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   127c0:	cmp	r2, r3
   127c4:	bcs	12860 <__assert_fail@plt+0x1b28>
   127c8:	ldr	r3, [fp, #-16]
   127cc:	add	r3, r3, #1
   127d0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   127d4:	add	r3, r2, r3
   127d8:	ldrb	r3, [r3]
   127dc:	cmp	r3, #47	; 0x2f
   127e0:	bls	12860 <__assert_fail@plt+0x1b28>
   127e4:	ldr	r3, [fp, #-16]
   127e8:	add	r3, r3, #1
   127ec:	ldr	r2, [fp, #-96]	; 0xffffffa0
   127f0:	add	r3, r2, r3
   127f4:	ldrb	r3, [r3]
   127f8:	cmp	r3, #57	; 0x39
   127fc:	bhi	12860 <__assert_fail@plt+0x1b28>
   12800:	ldr	r2, [fp, #-20]	; 0xffffffec
   12804:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12808:	cmp	r2, r3
   1280c:	bcs	12824 <__assert_fail@plt+0x1aec>
   12810:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12814:	ldr	r3, [fp, #-20]	; 0xffffffec
   12818:	add	r3, r2, r3
   1281c:	mov	r2, #48	; 0x30
   12820:	strb	r2, [r3]
   12824:	ldr	r3, [fp, #-20]	; 0xffffffec
   12828:	add	r3, r3, #1
   1282c:	str	r3, [fp, #-20]	; 0xffffffec
   12830:	ldr	r2, [fp, #-20]	; 0xffffffec
   12834:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12838:	cmp	r2, r3
   1283c:	bcs	12854 <__assert_fail@plt+0x1b1c>
   12840:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12844:	ldr	r3, [fp, #-20]	; 0xffffffec
   12848:	add	r3, r2, r3
   1284c:	mov	r2, #48	; 0x30
   12850:	strb	r2, [r3]
   12854:	ldr	r3, [fp, #-20]	; 0xffffffec
   12858:	add	r3, r3, #1
   1285c:	str	r3, [fp, #-20]	; 0xffffffec
   12860:	mov	r3, #48	; 0x30
   12864:	strb	r3, [fp, #-38]	; 0xffffffda
   12868:	b	132a8 <__assert_fail@plt+0x2570>
   1286c:	ldr	r3, [fp, #8]
   12870:	and	r3, r3, #1
   12874:	cmp	r3, #0
   12878:	beq	132a8 <__assert_fail@plt+0x2570>
   1287c:	b	13544 <__assert_fail@plt+0x280c>
   12880:	ldr	r3, [fp, #4]
   12884:	cmp	r3, #2
   12888:	beq	12898 <__assert_fail@plt+0x1b60>
   1288c:	cmp	r3, #5
   12890:	beq	128a8 <__assert_fail@plt+0x1b70>
   12894:	b	12a8c <__assert_fail@plt+0x1d54>
   12898:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1289c:	cmp	r3, #0
   128a0:	beq	12a80 <__assert_fail@plt+0x1d48>
   128a4:	b	13750 <__assert_fail@plt+0x2a18>
   128a8:	ldr	r3, [fp, #8]
   128ac:	and	r3, r3, #4
   128b0:	cmp	r3, #0
   128b4:	beq	12a88 <__assert_fail@plt+0x1d50>
   128b8:	ldr	r3, [fp, #-16]
   128bc:	add	r2, r3, #2
   128c0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   128c4:	cmp	r2, r3
   128c8:	bcs	12a88 <__assert_fail@plt+0x1d50>
   128cc:	ldr	r3, [fp, #-16]
   128d0:	add	r3, r3, #1
   128d4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   128d8:	add	r3, r2, r3
   128dc:	ldrb	r3, [r3]
   128e0:	cmp	r3, #63	; 0x3f
   128e4:	bne	12a88 <__assert_fail@plt+0x1d50>
   128e8:	ldr	r3, [fp, #-16]
   128ec:	add	r3, r3, #2
   128f0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   128f4:	add	r3, r2, r3
   128f8:	ldrb	r3, [r3]
   128fc:	sub	r3, r3, #33	; 0x21
   12900:	cmp	r3, #29
   12904:	ldrls	pc, [pc, r3, lsl #2]
   12908:	b	12a78 <__assert_fail@plt+0x1d40>
   1290c:	andeq	r2, r1, r4, lsl #19
   12910:	andeq	r2, r1, r8, ror sl
   12914:	andeq	r2, r1, r8, ror sl
   12918:	andeq	r2, r1, r8, ror sl
   1291c:	andeq	r2, r1, r8, ror sl
   12920:	andeq	r2, r1, r8, ror sl
   12924:	andeq	r2, r1, r4, lsl #19
   12928:	andeq	r2, r1, r4, lsl #19
   1292c:	andeq	r2, r1, r4, lsl #19
   12930:	andeq	r2, r1, r8, ror sl
   12934:	andeq	r2, r1, r8, ror sl
   12938:	andeq	r2, r1, r8, ror sl
   1293c:	andeq	r2, r1, r4, lsl #19
   12940:	andeq	r2, r1, r8, ror sl
   12944:	andeq	r2, r1, r4, lsl #19
   12948:	andeq	r2, r1, r8, ror sl
   1294c:	andeq	r2, r1, r8, ror sl
   12950:	andeq	r2, r1, r8, ror sl
   12954:	andeq	r2, r1, r8, ror sl
   12958:	andeq	r2, r1, r8, ror sl
   1295c:	andeq	r2, r1, r8, ror sl
   12960:	andeq	r2, r1, r8, ror sl
   12964:	andeq	r2, r1, r8, ror sl
   12968:	andeq	r2, r1, r8, ror sl
   1296c:	andeq	r2, r1, r8, ror sl
   12970:	andeq	r2, r1, r8, ror sl
   12974:	andeq	r2, r1, r8, ror sl
   12978:	andeq	r2, r1, r4, lsl #19
   1297c:	andeq	r2, r1, r4, lsl #19
   12980:	andeq	r2, r1, r4, lsl #19
   12984:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12988:	cmp	r3, #0
   1298c:	bne	1371c <__assert_fail@plt+0x29e4>
   12990:	ldr	r3, [fp, #-16]
   12994:	add	r3, r3, #2
   12998:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1299c:	add	r3, r2, r3
   129a0:	ldrb	r3, [r3]
   129a4:	strb	r3, [fp, #-38]	; 0xffffffda
   129a8:	ldr	r3, [fp, #-16]
   129ac:	add	r3, r3, #2
   129b0:	str	r3, [fp, #-16]
   129b4:	ldr	r2, [fp, #-20]	; 0xffffffec
   129b8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   129bc:	cmp	r2, r3
   129c0:	bcs	129d8 <__assert_fail@plt+0x1ca0>
   129c4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   129c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   129cc:	add	r3, r2, r3
   129d0:	mov	r2, #63	; 0x3f
   129d4:	strb	r2, [r3]
   129d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   129dc:	add	r3, r3, #1
   129e0:	str	r3, [fp, #-20]	; 0xffffffec
   129e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   129e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   129ec:	cmp	r2, r3
   129f0:	bcs	12a08 <__assert_fail@plt+0x1cd0>
   129f4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   129f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   129fc:	add	r3, r2, r3
   12a00:	mov	r2, #34	; 0x22
   12a04:	strb	r2, [r3]
   12a08:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a0c:	add	r3, r3, #1
   12a10:	str	r3, [fp, #-20]	; 0xffffffec
   12a14:	ldr	r2, [fp, #-20]	; 0xffffffec
   12a18:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12a1c:	cmp	r2, r3
   12a20:	bcs	12a38 <__assert_fail@plt+0x1d00>
   12a24:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12a28:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a2c:	add	r3, r2, r3
   12a30:	mov	r2, #34	; 0x22
   12a34:	strb	r2, [r3]
   12a38:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a3c:	add	r3, r3, #1
   12a40:	str	r3, [fp, #-20]	; 0xffffffec
   12a44:	ldr	r2, [fp, #-20]	; 0xffffffec
   12a48:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12a4c:	cmp	r2, r3
   12a50:	bcs	12a68 <__assert_fail@plt+0x1d30>
   12a54:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12a58:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a5c:	add	r3, r2, r3
   12a60:	mov	r2, #63	; 0x3f
   12a64:	strb	r2, [r3]
   12a68:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a6c:	add	r3, r3, #1
   12a70:	str	r3, [fp, #-20]	; 0xffffffec
   12a74:	b	12a7c <__assert_fail@plt+0x1d44>
   12a78:	nop			; (mov r0, r0)
   12a7c:	b	12a88 <__assert_fail@plt+0x1d50>
   12a80:	nop			; (mov r0, r0)
   12a84:	b	132d4 <__assert_fail@plt+0x259c>
   12a88:	nop			; (mov r0, r0)
   12a8c:	b	132d4 <__assert_fail@plt+0x259c>
   12a90:	mov	r3, #97	; 0x61
   12a94:	strb	r3, [fp, #-39]	; 0xffffffd9
   12a98:	b	12b44 <__assert_fail@plt+0x1e0c>
   12a9c:	mov	r3, #98	; 0x62
   12aa0:	strb	r3, [fp, #-39]	; 0xffffffd9
   12aa4:	b	12b44 <__assert_fail@plt+0x1e0c>
   12aa8:	mov	r3, #102	; 0x66
   12aac:	strb	r3, [fp, #-39]	; 0xffffffd9
   12ab0:	b	12b44 <__assert_fail@plt+0x1e0c>
   12ab4:	mov	r3, #110	; 0x6e
   12ab8:	strb	r3, [fp, #-39]	; 0xffffffd9
   12abc:	b	12b2c <__assert_fail@plt+0x1df4>
   12ac0:	mov	r3, #114	; 0x72
   12ac4:	strb	r3, [fp, #-39]	; 0xffffffd9
   12ac8:	b	12b2c <__assert_fail@plt+0x1df4>
   12acc:	mov	r3, #116	; 0x74
   12ad0:	strb	r3, [fp, #-39]	; 0xffffffd9
   12ad4:	b	12b2c <__assert_fail@plt+0x1df4>
   12ad8:	mov	r3, #118	; 0x76
   12adc:	strb	r3, [fp, #-39]	; 0xffffffd9
   12ae0:	b	12b44 <__assert_fail@plt+0x1e0c>
   12ae4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12ae8:	strb	r3, [fp, #-39]	; 0xffffffd9
   12aec:	ldr	r3, [fp, #4]
   12af0:	cmp	r3, #2
   12af4:	bne	12b08 <__assert_fail@plt+0x1dd0>
   12af8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12afc:	cmp	r3, #0
   12b00:	beq	1345c <__assert_fail@plt+0x2724>
   12b04:	b	13750 <__assert_fail@plt+0x2a18>
   12b08:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12b0c:	cmp	r3, #0
   12b10:	beq	12b2c <__assert_fail@plt+0x1df4>
   12b14:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12b18:	cmp	r3, #0
   12b1c:	beq	12b2c <__assert_fail@plt+0x1df4>
   12b20:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12b24:	cmp	r3, #0
   12b28:	bne	13464 <__assert_fail@plt+0x272c>
   12b2c:	ldr	r3, [fp, #4]
   12b30:	cmp	r3, #2
   12b34:	bne	12b44 <__assert_fail@plt+0x1e0c>
   12b38:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12b3c:	cmp	r3, #0
   12b40:	bne	13724 <__assert_fail@plt+0x29ec>
   12b44:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12b48:	cmp	r3, #0
   12b4c:	beq	132b0 <__assert_fail@plt+0x2578>
   12b50:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   12b54:	strb	r3, [fp, #-38]	; 0xffffffda
   12b58:	b	1335c <__assert_fail@plt+0x2624>
   12b5c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12b60:	cmn	r3, #1
   12b64:	bne	12b88 <__assert_fail@plt+0x1e50>
   12b68:	ldr	r3, [fp, #-96]	; 0xffffffa0
   12b6c:	add	r3, r3, #1
   12b70:	ldrb	r3, [r3]
   12b74:	cmp	r3, #0
   12b78:	movne	r3, #1
   12b7c:	moveq	r3, #0
   12b80:	uxtb	r3, r3
   12b84:	b	12b9c <__assert_fail@plt+0x1e64>
   12b88:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12b8c:	cmp	r3, #1
   12b90:	movne	r3, #1
   12b94:	moveq	r3, #0
   12b98:	uxtb	r3, r3
   12b9c:	cmp	r3, #0
   12ba0:	bne	132b8 <__assert_fail@plt+0x2580>
   12ba4:	ldr	r3, [fp, #-16]
   12ba8:	cmp	r3, #0
   12bac:	bne	132c0 <__assert_fail@plt+0x2588>
   12bb0:	mov	r3, #1
   12bb4:	strb	r3, [fp, #-42]	; 0xffffffd6
   12bb8:	ldr	r3, [fp, #4]
   12bbc:	cmp	r3, #2
   12bc0:	bne	132c8 <__assert_fail@plt+0x2590>
   12bc4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12bc8:	cmp	r3, #0
   12bcc:	beq	132c8 <__assert_fail@plt+0x2590>
   12bd0:	b	13750 <__assert_fail@plt+0x2a18>
   12bd4:	mov	r3, #1
   12bd8:	strb	r3, [fp, #-36]	; 0xffffffdc
   12bdc:	mov	r3, #1
   12be0:	strb	r3, [fp, #-42]	; 0xffffffd6
   12be4:	ldr	r3, [fp, #4]
   12be8:	cmp	r3, #2
   12bec:	bne	132d0 <__assert_fail@plt+0x2598>
   12bf0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12bf4:	cmp	r3, #0
   12bf8:	bne	1372c <__assert_fail@plt+0x29f4>
   12bfc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12c00:	cmp	r3, #0
   12c04:	beq	12c24 <__assert_fail@plt+0x1eec>
   12c08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c0c:	cmp	r3, #0
   12c10:	bne	12c24 <__assert_fail@plt+0x1eec>
   12c14:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12c18:	str	r3, [fp, #-24]	; 0xffffffe8
   12c1c:	mov	r3, #0
   12c20:	str	r3, [fp, #-92]	; 0xffffffa4
   12c24:	ldr	r2, [fp, #-20]	; 0xffffffec
   12c28:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12c2c:	cmp	r2, r3
   12c30:	bcs	12c48 <__assert_fail@plt+0x1f10>
   12c34:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12c38:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c3c:	add	r3, r2, r3
   12c40:	mov	r2, #39	; 0x27
   12c44:	strb	r2, [r3]
   12c48:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c4c:	add	r3, r3, #1
   12c50:	str	r3, [fp, #-20]	; 0xffffffec
   12c54:	ldr	r2, [fp, #-20]	; 0xffffffec
   12c58:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12c5c:	cmp	r2, r3
   12c60:	bcs	12c78 <__assert_fail@plt+0x1f40>
   12c64:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12c68:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c6c:	add	r3, r2, r3
   12c70:	mov	r2, #92	; 0x5c
   12c74:	strb	r2, [r3]
   12c78:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c7c:	add	r3, r3, #1
   12c80:	str	r3, [fp, #-20]	; 0xffffffec
   12c84:	ldr	r2, [fp, #-20]	; 0xffffffec
   12c88:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12c8c:	cmp	r2, r3
   12c90:	bcs	12ca8 <__assert_fail@plt+0x1f70>
   12c94:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12c98:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c9c:	add	r3, r2, r3
   12ca0:	mov	r2, #39	; 0x27
   12ca4:	strb	r2, [r3]
   12ca8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12cac:	add	r3, r3, #1
   12cb0:	str	r3, [fp, #-20]	; 0xffffffec
   12cb4:	mov	r3, #0
   12cb8:	strb	r3, [fp, #-35]	; 0xffffffdd
   12cbc:	b	132d0 <__assert_fail@plt+0x2598>
   12cc0:	mov	r3, #1
   12cc4:	strb	r3, [fp, #-42]	; 0xffffffd6
   12cc8:	b	132d4 <__assert_fail@plt+0x259c>
   12ccc:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   12cd0:	cmp	r3, #0
   12cd4:	beq	12d14 <__assert_fail@plt+0x1fdc>
   12cd8:	mov	r3, #1
   12cdc:	str	r3, [fp, #-48]	; 0xffffffd0
   12ce0:	bl	10c60 <__ctype_b_loc@plt>
   12ce4:	mov	r3, r0
   12ce8:	ldr	r2, [r3]
   12cec:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12cf0:	lsl	r3, r3, #1
   12cf4:	add	r3, r2, r3
   12cf8:	ldrh	r3, [r3]
   12cfc:	and	r3, r3, #16384	; 0x4000
   12d00:	cmp	r3, #0
   12d04:	movne	r3, #1
   12d08:	moveq	r3, #0
   12d0c:	strb	r3, [fp, #-49]	; 0xffffffcf
   12d10:	b	12f60 <__assert_fail@plt+0x2228>
   12d14:	sub	r3, fp, #76	; 0x4c
   12d18:	mov	r2, #8
   12d1c:	mov	r1, #0
   12d20:	mov	r0, r3
   12d24:	bl	10cb4 <memset@plt>
   12d28:	mov	r3, #0
   12d2c:	str	r3, [fp, #-48]	; 0xffffffd0
   12d30:	mov	r3, #1
   12d34:	strb	r3, [fp, #-49]	; 0xffffffcf
   12d38:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12d3c:	cmn	r3, #1
   12d40:	bne	12d50 <__assert_fail@plt+0x2018>
   12d44:	ldr	r0, [fp, #-96]	; 0xffffffa0
   12d48:	bl	10c84 <strlen@plt>
   12d4c:	str	r0, [fp, #-100]	; 0xffffff9c
   12d50:	ldr	r2, [fp, #-16]
   12d54:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12d58:	add	r3, r2, r3
   12d5c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12d60:	add	r1, r2, r3
   12d64:	ldr	r2, [fp, #-16]
   12d68:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12d6c:	add	r3, r2, r3
   12d70:	ldr	r2, [fp, #-100]	; 0xffffff9c
   12d74:	sub	r2, r2, r3
   12d78:	sub	r3, fp, #76	; 0x4c
   12d7c:	sub	r0, fp, #80	; 0x50
   12d80:	bl	15efc <__assert_fail@plt+0x51c4>
   12d84:	str	r0, [fp, #-64]	; 0xffffffc0
   12d88:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12d8c:	cmp	r3, #0
   12d90:	beq	12f54 <__assert_fail@plt+0x221c>
   12d94:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12d98:	cmn	r3, #1
   12d9c:	bne	12dac <__assert_fail@plt+0x2074>
   12da0:	mov	r3, #0
   12da4:	strb	r3, [fp, #-49]	; 0xffffffcf
   12da8:	b	12f60 <__assert_fail@plt+0x2228>
   12dac:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12db0:	cmn	r3, #2
   12db4:	bne	12e0c <__assert_fail@plt+0x20d4>
   12db8:	mov	r3, #0
   12dbc:	strb	r3, [fp, #-49]	; 0xffffffcf
   12dc0:	b	12dd0 <__assert_fail@plt+0x2098>
   12dc4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12dc8:	add	r3, r3, #1
   12dcc:	str	r3, [fp, #-48]	; 0xffffffd0
   12dd0:	ldr	r2, [fp, #-16]
   12dd4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12dd8:	add	r2, r2, r3
   12ddc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12de0:	cmp	r2, r3
   12de4:	bcs	12f5c <__assert_fail@plt+0x2224>
   12de8:	ldr	r2, [fp, #-16]
   12dec:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12df0:	add	r3, r2, r3
   12df4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12df8:	add	r3, r2, r3
   12dfc:	ldrb	r3, [r3]
   12e00:	cmp	r3, #0
   12e04:	bne	12dc4 <__assert_fail@plt+0x208c>
   12e08:	b	12f5c <__assert_fail@plt+0x2224>
   12e0c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12e10:	cmp	r3, #0
   12e14:	beq	12f08 <__assert_fail@plt+0x21d0>
   12e18:	ldr	r3, [fp, #4]
   12e1c:	cmp	r3, #2
   12e20:	bne	12f08 <__assert_fail@plt+0x21d0>
   12e24:	mov	r3, #1
   12e28:	str	r3, [fp, #-56]	; 0xffffffc8
   12e2c:	b	12ef8 <__assert_fail@plt+0x21c0>
   12e30:	ldr	r2, [fp, #-16]
   12e34:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12e38:	add	r2, r2, r3
   12e3c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12e40:	add	r3, r2, r3
   12e44:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12e48:	add	r3, r2, r3
   12e4c:	ldrb	r3, [r3]
   12e50:	sub	r3, r3, #91	; 0x5b
   12e54:	cmp	r3, #33	; 0x21
   12e58:	ldrls	pc, [pc, r3, lsl #2]
   12e5c:	b	12ee8 <__assert_fail@plt+0x21b0>
   12e60:	andeq	r3, r1, r4, lsr r7
   12e64:	andeq	r3, r1, r4, lsr r7
   12e68:	andeq	r2, r1, r8, ror #29
   12e6c:	andeq	r3, r1, r4, lsr r7
   12e70:	andeq	r2, r1, r8, ror #29
   12e74:	andeq	r3, r1, r4, lsr r7
   12e78:	andeq	r2, r1, r8, ror #29
   12e7c:	andeq	r2, r1, r8, ror #29
   12e80:	andeq	r2, r1, r8, ror #29
   12e84:	andeq	r2, r1, r8, ror #29
   12e88:	andeq	r2, r1, r8, ror #29
   12e8c:	andeq	r2, r1, r8, ror #29
   12e90:	andeq	r2, r1, r8, ror #29
   12e94:	andeq	r2, r1, r8, ror #29
   12e98:	andeq	r2, r1, r8, ror #29
   12e9c:	andeq	r2, r1, r8, ror #29
   12ea0:	andeq	r2, r1, r8, ror #29
   12ea4:	andeq	r2, r1, r8, ror #29
   12ea8:	andeq	r2, r1, r8, ror #29
   12eac:	andeq	r2, r1, r8, ror #29
   12eb0:	andeq	r2, r1, r8, ror #29
   12eb4:	andeq	r2, r1, r8, ror #29
   12eb8:	andeq	r2, r1, r8, ror #29
   12ebc:	andeq	r2, r1, r8, ror #29
   12ec0:	andeq	r2, r1, r8, ror #29
   12ec4:	andeq	r2, r1, r8, ror #29
   12ec8:	andeq	r2, r1, r8, ror #29
   12ecc:	andeq	r2, r1, r8, ror #29
   12ed0:	andeq	r2, r1, r8, ror #29
   12ed4:	andeq	r2, r1, r8, ror #29
   12ed8:	andeq	r2, r1, r8, ror #29
   12edc:	andeq	r2, r1, r8, ror #29
   12ee0:	andeq	r2, r1, r8, ror #29
   12ee4:	andeq	r3, r1, r4, lsr r7
   12ee8:	nop			; (mov r0, r0)
   12eec:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12ef0:	add	r3, r3, #1
   12ef4:	str	r3, [fp, #-56]	; 0xffffffc8
   12ef8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12efc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12f00:	cmp	r2, r3
   12f04:	bcc	12e30 <__assert_fail@plt+0x20f8>
   12f08:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12f0c:	mov	r0, r3
   12f10:	bl	10bc4 <iswprint@plt>
   12f14:	mov	r3, r0
   12f18:	cmp	r3, #0
   12f1c:	bne	12f28 <__assert_fail@plt+0x21f0>
   12f20:	mov	r3, #0
   12f24:	strb	r3, [fp, #-49]	; 0xffffffcf
   12f28:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12f2c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12f30:	add	r3, r2, r3
   12f34:	str	r3, [fp, #-48]	; 0xffffffd0
   12f38:	sub	r3, fp, #76	; 0x4c
   12f3c:	mov	r0, r3
   12f40:	bl	10b88 <mbsinit@plt>
   12f44:	mov	r3, r0
   12f48:	cmp	r3, #0
   12f4c:	beq	12d50 <__assert_fail@plt+0x2018>
   12f50:	b	12f60 <__assert_fail@plt+0x2228>
   12f54:	nop			; (mov r0, r0)
   12f58:	b	12f60 <__assert_fail@plt+0x2228>
   12f5c:	nop			; (mov r0, r0)
   12f60:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   12f64:	strb	r3, [fp, #-42]	; 0xffffffd6
   12f68:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12f6c:	cmp	r3, #1
   12f70:	bhi	12f94 <__assert_fail@plt+0x225c>
   12f74:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12f78:	cmp	r3, #0
   12f7c:	beq	132d4 <__assert_fail@plt+0x259c>
   12f80:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   12f84:	eor	r3, r3, #1
   12f88:	uxtb	r3, r3
   12f8c:	cmp	r3, #0
   12f90:	beq	132d4 <__assert_fail@plt+0x259c>
   12f94:	ldr	r2, [fp, #-16]
   12f98:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12f9c:	add	r3, r2, r3
   12fa0:	str	r3, [fp, #-68]	; 0xffffffbc
   12fa4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12fa8:	cmp	r3, #0
   12fac:	beq	1316c <__assert_fail@plt+0x2434>
   12fb0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   12fb4:	eor	r3, r3, #1
   12fb8:	uxtb	r3, r3
   12fbc:	cmp	r3, #0
   12fc0:	beq	1316c <__assert_fail@plt+0x2434>
   12fc4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12fc8:	cmp	r3, #0
   12fcc:	bne	1373c <__assert_fail@plt+0x2a04>
   12fd0:	mov	r3, #1
   12fd4:	strb	r3, [fp, #-41]	; 0xffffffd7
   12fd8:	ldr	r3, [fp, #4]
   12fdc:	cmp	r3, #2
   12fe0:	bne	13090 <__assert_fail@plt+0x2358>
   12fe4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   12fe8:	eor	r3, r3, #1
   12fec:	uxtb	r3, r3
   12ff0:	cmp	r3, #0
   12ff4:	beq	13090 <__assert_fail@plt+0x2358>
   12ff8:	ldr	r2, [fp, #-20]	; 0xffffffec
   12ffc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13000:	cmp	r2, r3
   13004:	bcs	1301c <__assert_fail@plt+0x22e4>
   13008:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1300c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13010:	add	r3, r2, r3
   13014:	mov	r2, #39	; 0x27
   13018:	strb	r2, [r3]
   1301c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13020:	add	r3, r3, #1
   13024:	str	r3, [fp, #-20]	; 0xffffffec
   13028:	ldr	r2, [fp, #-20]	; 0xffffffec
   1302c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13030:	cmp	r2, r3
   13034:	bcs	1304c <__assert_fail@plt+0x2314>
   13038:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1303c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13040:	add	r3, r2, r3
   13044:	mov	r2, #36	; 0x24
   13048:	strb	r2, [r3]
   1304c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13050:	add	r3, r3, #1
   13054:	str	r3, [fp, #-20]	; 0xffffffec
   13058:	ldr	r2, [fp, #-20]	; 0xffffffec
   1305c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13060:	cmp	r2, r3
   13064:	bcs	1307c <__assert_fail@plt+0x2344>
   13068:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1306c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13070:	add	r3, r2, r3
   13074:	mov	r2, #39	; 0x27
   13078:	strb	r2, [r3]
   1307c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13080:	add	r3, r3, #1
   13084:	str	r3, [fp, #-20]	; 0xffffffec
   13088:	mov	r3, #1
   1308c:	strb	r3, [fp, #-35]	; 0xffffffdd
   13090:	ldr	r2, [fp, #-20]	; 0xffffffec
   13094:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13098:	cmp	r2, r3
   1309c:	bcs	130b4 <__assert_fail@plt+0x237c>
   130a0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   130a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   130a8:	add	r3, r2, r3
   130ac:	mov	r2, #92	; 0x5c
   130b0:	strb	r2, [r3]
   130b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   130b8:	add	r3, r3, #1
   130bc:	str	r3, [fp, #-20]	; 0xffffffec
   130c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   130c4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   130c8:	cmp	r2, r3
   130cc:	bcs	130f4 <__assert_fail@plt+0x23bc>
   130d0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   130d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   130d8:	add	r3, r2, r3
   130dc:	ldrb	r2, [fp, #-38]	; 0xffffffda
   130e0:	lsr	r2, r2, #6
   130e4:	uxtb	r2, r2
   130e8:	add	r2, r2, #48	; 0x30
   130ec:	uxtb	r2, r2
   130f0:	strb	r2, [r3]
   130f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   130f8:	add	r3, r3, #1
   130fc:	str	r3, [fp, #-20]	; 0xffffffec
   13100:	ldr	r2, [fp, #-20]	; 0xffffffec
   13104:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13108:	cmp	r2, r3
   1310c:	bcs	1313c <__assert_fail@plt+0x2404>
   13110:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13114:	ldr	r3, [fp, #-20]	; 0xffffffec
   13118:	add	r3, r2, r3
   1311c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13120:	lsr	r2, r2, #3
   13124:	uxtb	r2, r2
   13128:	and	r2, r2, #7
   1312c:	uxtb	r2, r2
   13130:	add	r2, r2, #48	; 0x30
   13134:	uxtb	r2, r2
   13138:	strb	r2, [r3]
   1313c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13140:	add	r3, r3, #1
   13144:	str	r3, [fp, #-20]	; 0xffffffec
   13148:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1314c:	and	r3, r3, #7
   13150:	uxtb	r3, r3
   13154:	add	r3, r3, #48	; 0x30
   13158:	strb	r3, [fp, #-38]	; 0xffffffda
   1315c:	b	131b0 <__assert_fail@plt+0x2478>
   13160:	andeq	r7, r1, r4, lsl #8
   13164:	andeq	r7, r1, ip, lsl #8
   13168:	andeq	r7, r1, r8, lsl #8
   1316c:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   13170:	cmp	r3, #0
   13174:	beq	131b0 <__assert_fail@plt+0x2478>
   13178:	ldr	r2, [fp, #-20]	; 0xffffffec
   1317c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13180:	cmp	r2, r3
   13184:	bcs	1319c <__assert_fail@plt+0x2464>
   13188:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1318c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13190:	add	r3, r2, r3
   13194:	mov	r2, #92	; 0x5c
   13198:	strb	r2, [r3]
   1319c:	ldr	r3, [fp, #-20]	; 0xffffffec
   131a0:	add	r3, r3, #1
   131a4:	str	r3, [fp, #-20]	; 0xffffffec
   131a8:	mov	r3, #0
   131ac:	strb	r3, [fp, #-40]	; 0xffffffd8
   131b0:	ldr	r3, [fp, #-16]
   131b4:	add	r2, r3, #1
   131b8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   131bc:	cmp	r2, r3
   131c0:	bcs	132a0 <__assert_fail@plt+0x2568>
   131c4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   131c8:	cmp	r3, #0
   131cc:	beq	1324c <__assert_fail@plt+0x2514>
   131d0:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   131d4:	eor	r3, r3, #1
   131d8:	uxtb	r3, r3
   131dc:	cmp	r3, #0
   131e0:	beq	1324c <__assert_fail@plt+0x2514>
   131e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   131e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   131ec:	cmp	r2, r3
   131f0:	bcs	13208 <__assert_fail@plt+0x24d0>
   131f4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   131f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   131fc:	add	r3, r2, r3
   13200:	mov	r2, #39	; 0x27
   13204:	strb	r2, [r3]
   13208:	ldr	r3, [fp, #-20]	; 0xffffffec
   1320c:	add	r3, r3, #1
   13210:	str	r3, [fp, #-20]	; 0xffffffec
   13214:	ldr	r2, [fp, #-20]	; 0xffffffec
   13218:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1321c:	cmp	r2, r3
   13220:	bcs	13238 <__assert_fail@plt+0x2500>
   13224:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13228:	ldr	r3, [fp, #-20]	; 0xffffffec
   1322c:	add	r3, r2, r3
   13230:	mov	r2, #39	; 0x27
   13234:	strb	r2, [r3]
   13238:	ldr	r3, [fp, #-20]	; 0xffffffec
   1323c:	add	r3, r3, #1
   13240:	str	r3, [fp, #-20]	; 0xffffffec
   13244:	mov	r3, #0
   13248:	strb	r3, [fp, #-35]	; 0xffffffdd
   1324c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13250:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13254:	cmp	r2, r3
   13258:	bcs	13270 <__assert_fail@plt+0x2538>
   1325c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13260:	ldr	r3, [fp, #-20]	; 0xffffffec
   13264:	add	r3, r2, r3
   13268:	ldrb	r2, [fp, #-38]	; 0xffffffda
   1326c:	strb	r2, [r3]
   13270:	ldr	r3, [fp, #-20]	; 0xffffffec
   13274:	add	r3, r3, #1
   13278:	str	r3, [fp, #-20]	; 0xffffffec
   1327c:	ldr	r3, [fp, #-16]
   13280:	add	r3, r3, #1
   13284:	str	r3, [fp, #-16]
   13288:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1328c:	ldr	r3, [fp, #-16]
   13290:	add	r3, r2, r3
   13294:	ldrb	r3, [r3]
   13298:	strb	r3, [fp, #-38]	; 0xffffffda
   1329c:	b	12fa4 <__assert_fail@plt+0x226c>
   132a0:	nop			; (mov r0, r0)
   132a4:	b	13470 <__assert_fail@plt+0x2738>
   132a8:	nop			; (mov r0, r0)
   132ac:	b	132d4 <__assert_fail@plt+0x259c>
   132b0:	nop			; (mov r0, r0)
   132b4:	b	132d4 <__assert_fail@plt+0x259c>
   132b8:	nop			; (mov r0, r0)
   132bc:	b	132d4 <__assert_fail@plt+0x259c>
   132c0:	nop			; (mov r0, r0)
   132c4:	b	132d4 <__assert_fail@plt+0x259c>
   132c8:	nop			; (mov r0, r0)
   132cc:	b	132d4 <__assert_fail@plt+0x259c>
   132d0:	nop			; (mov r0, r0)
   132d4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   132d8:	eor	r3, r3, #1
   132dc:	uxtb	r3, r3
   132e0:	cmp	r3, #0
   132e4:	bne	132f4 <__assert_fail@plt+0x25bc>
   132e8:	ldr	r3, [fp, #4]
   132ec:	cmp	r3, #2
   132f0:	bne	13308 <__assert_fail@plt+0x25d0>
   132f4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   132f8:	eor	r3, r3, #1
   132fc:	uxtb	r3, r3
   13300:	cmp	r3, #0
   13304:	bne	13348 <__assert_fail@plt+0x2610>
   13308:	ldr	r3, [fp, #12]
   1330c:	cmp	r3, #0
   13310:	beq	13348 <__assert_fail@plt+0x2610>
   13314:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13318:	lsr	r3, r3, #5
   1331c:	uxtb	r3, r3
   13320:	lsl	r3, r3, #2
   13324:	ldr	r2, [fp, #12]
   13328:	add	r3, r2, r3
   1332c:	ldr	r2, [r3]
   13330:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13334:	and	r3, r3, #31
   13338:	lsr	r3, r2, r3
   1333c:	and	r3, r3, #1
   13340:	cmp	r3, #0
   13344:	bne	1335c <__assert_fail@plt+0x2624>
   13348:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   1334c:	eor	r3, r3, #1
   13350:	uxtb	r3, r3
   13354:	cmp	r3, #0
   13358:	bne	1346c <__assert_fail@plt+0x2734>
   1335c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13360:	cmp	r3, #0
   13364:	bne	13744 <__assert_fail@plt+0x2a0c>
   13368:	mov	r3, #1
   1336c:	strb	r3, [fp, #-41]	; 0xffffffd7
   13370:	ldr	r3, [fp, #4]
   13374:	cmp	r3, #2
   13378:	bne	13428 <__assert_fail@plt+0x26f0>
   1337c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13380:	eor	r3, r3, #1
   13384:	uxtb	r3, r3
   13388:	cmp	r3, #0
   1338c:	beq	13428 <__assert_fail@plt+0x26f0>
   13390:	ldr	r2, [fp, #-20]	; 0xffffffec
   13394:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13398:	cmp	r2, r3
   1339c:	bcs	133b4 <__assert_fail@plt+0x267c>
   133a0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   133a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   133a8:	add	r3, r2, r3
   133ac:	mov	r2, #39	; 0x27
   133b0:	strb	r2, [r3]
   133b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   133b8:	add	r3, r3, #1
   133bc:	str	r3, [fp, #-20]	; 0xffffffec
   133c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   133c4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   133c8:	cmp	r2, r3
   133cc:	bcs	133e4 <__assert_fail@plt+0x26ac>
   133d0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   133d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   133d8:	add	r3, r2, r3
   133dc:	mov	r2, #36	; 0x24
   133e0:	strb	r2, [r3]
   133e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   133e8:	add	r3, r3, #1
   133ec:	str	r3, [fp, #-20]	; 0xffffffec
   133f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   133f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   133f8:	cmp	r2, r3
   133fc:	bcs	13414 <__assert_fail@plt+0x26dc>
   13400:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13404:	ldr	r3, [fp, #-20]	; 0xffffffec
   13408:	add	r3, r2, r3
   1340c:	mov	r2, #39	; 0x27
   13410:	strb	r2, [r3]
   13414:	ldr	r3, [fp, #-20]	; 0xffffffec
   13418:	add	r3, r3, #1
   1341c:	str	r3, [fp, #-20]	; 0xffffffec
   13420:	mov	r3, #1
   13424:	strb	r3, [fp, #-35]	; 0xffffffdd
   13428:	ldr	r2, [fp, #-20]	; 0xffffffec
   1342c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13430:	cmp	r2, r3
   13434:	bcs	1344c <__assert_fail@plt+0x2714>
   13438:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1343c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13440:	add	r3, r2, r3
   13444:	mov	r2, #92	; 0x5c
   13448:	strb	r2, [r3]
   1344c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13450:	add	r3, r3, #1
   13454:	str	r3, [fp, #-20]	; 0xffffffec
   13458:	b	13470 <__assert_fail@plt+0x2738>
   1345c:	nop			; (mov r0, r0)
   13460:	b	13470 <__assert_fail@plt+0x2738>
   13464:	nop			; (mov r0, r0)
   13468:	b	13470 <__assert_fail@plt+0x2738>
   1346c:	nop			; (mov r0, r0)
   13470:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13474:	cmp	r3, #0
   13478:	beq	134f8 <__assert_fail@plt+0x27c0>
   1347c:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   13480:	eor	r3, r3, #1
   13484:	uxtb	r3, r3
   13488:	cmp	r3, #0
   1348c:	beq	134f8 <__assert_fail@plt+0x27c0>
   13490:	ldr	r2, [fp, #-20]	; 0xffffffec
   13494:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13498:	cmp	r2, r3
   1349c:	bcs	134b4 <__assert_fail@plt+0x277c>
   134a0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   134a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   134a8:	add	r3, r2, r3
   134ac:	mov	r2, #39	; 0x27
   134b0:	strb	r2, [r3]
   134b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   134b8:	add	r3, r3, #1
   134bc:	str	r3, [fp, #-20]	; 0xffffffec
   134c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   134c4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   134c8:	cmp	r2, r3
   134cc:	bcs	134e4 <__assert_fail@plt+0x27ac>
   134d0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   134d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   134d8:	add	r3, r2, r3
   134dc:	mov	r2, #39	; 0x27
   134e0:	strb	r2, [r3]
   134e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   134e8:	add	r3, r3, #1
   134ec:	str	r3, [fp, #-20]	; 0xffffffec
   134f0:	mov	r3, #0
   134f4:	strb	r3, [fp, #-35]	; 0xffffffdd
   134f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   134fc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13500:	cmp	r2, r3
   13504:	bcs	1351c <__assert_fail@plt+0x27e4>
   13508:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1350c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13510:	add	r3, r2, r3
   13514:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13518:	strb	r2, [r3]
   1351c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13520:	add	r3, r3, #1
   13524:	str	r3, [fp, #-20]	; 0xffffffec
   13528:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   1352c:	eor	r3, r3, #1
   13530:	uxtb	r3, r3
   13534:	cmp	r3, #0
   13538:	beq	13544 <__assert_fail@plt+0x280c>
   1353c:	mov	r3, #0
   13540:	strb	r3, [fp, #-37]	; 0xffffffdb
   13544:	ldr	r3, [fp, #-16]
   13548:	add	r3, r3, #1
   1354c:	str	r3, [fp, #-16]
   13550:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13554:	cmn	r3, #1
   13558:	bne	13580 <__assert_fail@plt+0x2848>
   1355c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13560:	ldr	r3, [fp, #-16]
   13564:	add	r3, r2, r3
   13568:	ldrb	r3, [r3]
   1356c:	cmp	r3, #0
   13570:	movne	r3, #1
   13574:	moveq	r3, #0
   13578:	uxtb	r3, r3
   1357c:	b	13598 <__assert_fail@plt+0x2860>
   13580:	ldr	r2, [fp, #-16]
   13584:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13588:	cmp	r2, r3
   1358c:	movne	r3, #1
   13590:	moveq	r3, #0
   13594:	uxtb	r3, r3
   13598:	cmp	r3, #0
   1359c:	bne	123c4 <__assert_fail@plt+0x168c>
   135a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   135a4:	cmp	r3, #0
   135a8:	bne	135c4 <__assert_fail@plt+0x288c>
   135ac:	ldr	r3, [fp, #4]
   135b0:	cmp	r3, #2
   135b4:	bne	135c4 <__assert_fail@plt+0x288c>
   135b8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   135bc:	cmp	r3, #0
   135c0:	bne	1374c <__assert_fail@plt+0x2a14>
   135c4:	ldr	r3, [fp, #4]
   135c8:	cmp	r3, #2
   135cc:	bne	1366c <__assert_fail@plt+0x2934>
   135d0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   135d4:	eor	r3, r3, #1
   135d8:	uxtb	r3, r3
   135dc:	cmp	r3, #0
   135e0:	beq	1366c <__assert_fail@plt+0x2934>
   135e4:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   135e8:	cmp	r3, #0
   135ec:	beq	1366c <__assert_fail@plt+0x2934>
   135f0:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   135f4:	cmp	r3, #0
   135f8:	beq	13640 <__assert_fail@plt+0x2908>
   135fc:	ldr	r3, [fp, #20]
   13600:	str	r3, [sp, #16]
   13604:	ldr	r3, [fp, #16]
   13608:	str	r3, [sp, #12]
   1360c:	ldr	r3, [fp, #12]
   13610:	str	r3, [sp, #8]
   13614:	ldr	r3, [fp, #8]
   13618:	str	r3, [sp, #4]
   1361c:	mov	r3, #5
   13620:	str	r3, [sp]
   13624:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13628:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1362c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13630:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13634:	bl	12114 <__assert_fail@plt+0x13dc>
   13638:	mov	r3, r0
   1363c:	b	137b4 <__assert_fail@plt+0x2a7c>
   13640:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13644:	cmp	r3, #0
   13648:	bne	1366c <__assert_fail@plt+0x2934>
   1364c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13650:	cmp	r3, #0
   13654:	beq	1366c <__assert_fail@plt+0x2934>
   13658:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1365c:	str	r3, [fp, #-92]	; 0xffffffa4
   13660:	mov	r3, #0
   13664:	str	r3, [fp, #-20]	; 0xffffffec
   13668:	b	121a0 <__assert_fail@plt+0x1468>
   1366c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13670:	cmp	r3, #0
   13674:	beq	136e0 <__assert_fail@plt+0x29a8>
   13678:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1367c:	eor	r3, r3, #1
   13680:	uxtb	r3, r3
   13684:	cmp	r3, #0
   13688:	beq	136e0 <__assert_fail@plt+0x29a8>
   1368c:	b	136d0 <__assert_fail@plt+0x2998>
   13690:	ldr	r2, [fp, #-20]	; 0xffffffec
   13694:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13698:	cmp	r2, r3
   1369c:	bcs	136b8 <__assert_fail@plt+0x2980>
   136a0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   136a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   136a8:	add	r3, r2, r3
   136ac:	ldr	r2, [fp, #-28]	; 0xffffffe4
   136b0:	ldrb	r2, [r2]
   136b4:	strb	r2, [r3]
   136b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   136bc:	add	r3, r3, #1
   136c0:	str	r3, [fp, #-20]	; 0xffffffec
   136c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   136c8:	add	r3, r3, #1
   136cc:	str	r3, [fp, #-28]	; 0xffffffe4
   136d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   136d4:	ldrb	r3, [r3]
   136d8:	cmp	r3, #0
   136dc:	bne	13690 <__assert_fail@plt+0x2958>
   136e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   136e4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   136e8:	cmp	r2, r3
   136ec:	bcs	13704 <__assert_fail@plt+0x29cc>
   136f0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   136f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   136f8:	add	r3, r2, r3
   136fc:	mov	r2, #0
   13700:	strb	r2, [r3]
   13704:	ldr	r3, [fp, #-20]	; 0xffffffec
   13708:	b	137b4 <__assert_fail@plt+0x2a7c>
   1370c:	nop			; (mov r0, r0)
   13710:	b	13750 <__assert_fail@plt+0x2a18>
   13714:	nop			; (mov r0, r0)
   13718:	b	13750 <__assert_fail@plt+0x2a18>
   1371c:	nop			; (mov r0, r0)
   13720:	b	13750 <__assert_fail@plt+0x2a18>
   13724:	nop			; (mov r0, r0)
   13728:	b	13750 <__assert_fail@plt+0x2a18>
   1372c:	nop			; (mov r0, r0)
   13730:	b	13750 <__assert_fail@plt+0x2a18>
   13734:	nop			; (mov r0, r0)
   13738:	b	13750 <__assert_fail@plt+0x2a18>
   1373c:	nop			; (mov r0, r0)
   13740:	b	13750 <__assert_fail@plt+0x2a18>
   13744:	nop			; (mov r0, r0)
   13748:	b	13750 <__assert_fail@plt+0x2a18>
   1374c:	nop			; (mov r0, r0)
   13750:	ldr	r3, [fp, #4]
   13754:	cmp	r3, #2
   13758:	bne	13770 <__assert_fail@plt+0x2a38>
   1375c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13760:	cmp	r3, #0
   13764:	beq	13770 <__assert_fail@plt+0x2a38>
   13768:	mov	r3, #4
   1376c:	str	r3, [fp, #4]
   13770:	ldr	r3, [fp, #8]
   13774:	bic	r3, r3, #2
   13778:	ldr	r2, [fp, #20]
   1377c:	str	r2, [sp, #16]
   13780:	ldr	r2, [fp, #16]
   13784:	str	r2, [sp, #12]
   13788:	mov	r2, #0
   1378c:	str	r2, [sp, #8]
   13790:	str	r3, [sp, #4]
   13794:	ldr	r3, [fp, #4]
   13798:	str	r3, [sp]
   1379c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   137a0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   137a4:	ldr	r1, [fp, #-92]	; 0xffffffa4
   137a8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   137ac:	bl	12114 <__assert_fail@plt+0x13dc>
   137b0:	mov	r3, r0
   137b4:	mov	r0, r3
   137b8:	sub	sp, fp, #8
   137bc:	pop	{r4, fp, pc}
   137c0:	push	{fp, lr}
   137c4:	add	fp, sp, #4
   137c8:	sub	sp, sp, #56	; 0x38
   137cc:	str	r0, [fp, #-24]	; 0xffffffe8
   137d0:	str	r1, [fp, #-28]	; 0xffffffe4
   137d4:	str	r2, [fp, #-32]	; 0xffffffe0
   137d8:	str	r3, [fp, #-36]	; 0xffffffdc
   137dc:	ldr	r3, [fp, #4]
   137e0:	cmp	r3, #0
   137e4:	beq	137f0 <__assert_fail@plt+0x2ab8>
   137e8:	ldr	r3, [fp, #4]
   137ec:	b	137f4 <__assert_fail@plt+0x2abc>
   137f0:	ldr	r3, [pc, #132]	; 1387c <__assert_fail@plt+0x2b44>
   137f4:	str	r3, [fp, #-8]
   137f8:	bl	10c9c <__errno_location@plt>
   137fc:	mov	r3, r0
   13800:	ldr	r3, [r3]
   13804:	str	r3, [fp, #-12]
   13808:	ldr	r3, [fp, #-8]
   1380c:	ldr	r3, [r3]
   13810:	ldr	r2, [fp, #-8]
   13814:	ldr	r2, [r2, #4]
   13818:	ldr	r1, [fp, #-8]
   1381c:	add	r1, r1, #8
   13820:	ldr	r0, [fp, #-8]
   13824:	ldr	r0, [r0, #40]	; 0x28
   13828:	ldr	ip, [fp, #-8]
   1382c:	ldr	ip, [ip, #44]	; 0x2c
   13830:	str	ip, [sp, #16]
   13834:	str	r0, [sp, #12]
   13838:	str	r1, [sp, #8]
   1383c:	str	r2, [sp, #4]
   13840:	str	r3, [sp]
   13844:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13848:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1384c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13850:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13854:	bl	12114 <__assert_fail@plt+0x13dc>
   13858:	str	r0, [fp, #-16]
   1385c:	bl	10c9c <__errno_location@plt>
   13860:	mov	r2, r0
   13864:	ldr	r3, [fp, #-12]
   13868:	str	r3, [r2]
   1386c:	ldr	r3, [fp, #-16]
   13870:	mov	r0, r3
   13874:	sub	sp, fp, #4
   13878:	pop	{fp, pc}
   1387c:	andeq	r8, r2, r8, lsr r1
   13880:	push	{fp, lr}
   13884:	add	fp, sp, #4
   13888:	sub	sp, sp, #16
   1388c:	str	r0, [fp, #-8]
   13890:	str	r1, [fp, #-12]
   13894:	str	r2, [fp, #-16]
   13898:	ldr	r3, [fp, #-16]
   1389c:	mov	r2, #0
   138a0:	ldr	r1, [fp, #-12]
   138a4:	ldr	r0, [fp, #-8]
   138a8:	bl	138bc <__assert_fail@plt+0x2b84>
   138ac:	mov	r3, r0
   138b0:	mov	r0, r3
   138b4:	sub	sp, fp, #4
   138b8:	pop	{fp, pc}
   138bc:	push	{fp, lr}
   138c0:	add	fp, sp, #4
   138c4:	sub	sp, sp, #64	; 0x40
   138c8:	str	r0, [fp, #-32]	; 0xffffffe0
   138cc:	str	r1, [fp, #-36]	; 0xffffffdc
   138d0:	str	r2, [fp, #-40]	; 0xffffffd8
   138d4:	str	r3, [fp, #-44]	; 0xffffffd4
   138d8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   138dc:	cmp	r3, #0
   138e0:	beq	138ec <__assert_fail@plt+0x2bb4>
   138e4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   138e8:	b	138f0 <__assert_fail@plt+0x2bb8>
   138ec:	ldr	r3, [pc, #292]	; 13a18 <__assert_fail@plt+0x2ce0>
   138f0:	str	r3, [fp, #-8]
   138f4:	bl	10c9c <__errno_location@plt>
   138f8:	mov	r3, r0
   138fc:	ldr	r3, [r3]
   13900:	str	r3, [fp, #-12]
   13904:	ldr	r3, [fp, #-8]
   13908:	ldr	r3, [r3, #4]
   1390c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13910:	cmp	r2, #0
   13914:	moveq	r2, #1
   13918:	movne	r2, #0
   1391c:	uxtb	r2, r2
   13920:	orr	r3, r3, r2
   13924:	str	r3, [fp, #-16]
   13928:	ldr	r3, [fp, #-8]
   1392c:	ldr	r3, [r3]
   13930:	ldr	r2, [fp, #-8]
   13934:	add	r2, r2, #8
   13938:	ldr	r1, [fp, #-8]
   1393c:	ldr	r1, [r1, #40]	; 0x28
   13940:	ldr	r0, [fp, #-8]
   13944:	ldr	r0, [r0, #44]	; 0x2c
   13948:	str	r0, [sp, #16]
   1394c:	str	r1, [sp, #12]
   13950:	str	r2, [sp, #8]
   13954:	ldr	r2, [fp, #-16]
   13958:	str	r2, [sp, #4]
   1395c:	str	r3, [sp]
   13960:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13964:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13968:	mov	r1, #0
   1396c:	mov	r0, #0
   13970:	bl	12114 <__assert_fail@plt+0x13dc>
   13974:	mov	r3, r0
   13978:	add	r3, r3, #1
   1397c:	str	r3, [fp, #-20]	; 0xffffffec
   13980:	ldr	r0, [fp, #-20]	; 0xffffffec
   13984:	bl	14bb8 <__assert_fail@plt+0x3e80>
   13988:	mov	r3, r0
   1398c:	str	r3, [fp, #-24]	; 0xffffffe8
   13990:	ldr	r3, [fp, #-8]
   13994:	ldr	r3, [r3]
   13998:	ldr	r2, [fp, #-8]
   1399c:	add	r2, r2, #8
   139a0:	ldr	r1, [fp, #-8]
   139a4:	ldr	r1, [r1, #40]	; 0x28
   139a8:	ldr	r0, [fp, #-8]
   139ac:	ldr	r0, [r0, #44]	; 0x2c
   139b0:	str	r0, [sp, #16]
   139b4:	str	r1, [sp, #12]
   139b8:	str	r2, [sp, #8]
   139bc:	ldr	r2, [fp, #-16]
   139c0:	str	r2, [sp, #4]
   139c4:	str	r3, [sp]
   139c8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   139cc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   139d0:	ldr	r1, [fp, #-20]	; 0xffffffec
   139d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   139d8:	bl	12114 <__assert_fail@plt+0x13dc>
   139dc:	bl	10c9c <__errno_location@plt>
   139e0:	mov	r2, r0
   139e4:	ldr	r3, [fp, #-12]
   139e8:	str	r3, [r2]
   139ec:	ldr	r3, [fp, #-40]	; 0xffffffd8
   139f0:	cmp	r3, #0
   139f4:	beq	13a08 <__assert_fail@plt+0x2cd0>
   139f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   139fc:	sub	r2, r3, #1
   13a00:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13a04:	str	r2, [r3]
   13a08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13a0c:	mov	r0, r3
   13a10:	sub	sp, fp, #4
   13a14:	pop	{fp, pc}
   13a18:	andeq	r8, r2, r8, lsr r1
   13a1c:	push	{fp, lr}
   13a20:	add	fp, sp, #4
   13a24:	sub	sp, sp, #8
   13a28:	ldr	r3, [pc, #196]	; 13af4 <__assert_fail@plt+0x2dbc>
   13a2c:	ldr	r3, [r3]
   13a30:	str	r3, [fp, #-12]
   13a34:	mov	r3, #1
   13a38:	str	r3, [fp, #-8]
   13a3c:	b	13a68 <__assert_fail@plt+0x2d30>
   13a40:	ldr	r3, [fp, #-8]
   13a44:	lsl	r3, r3, #3
   13a48:	ldr	r2, [fp, #-12]
   13a4c:	add	r3, r2, r3
   13a50:	ldr	r3, [r3, #4]
   13a54:	mov	r0, r3
   13a58:	bl	15bf4 <__assert_fail@plt+0x4ebc>
   13a5c:	ldr	r3, [fp, #-8]
   13a60:	add	r3, r3, #1
   13a64:	str	r3, [fp, #-8]
   13a68:	ldr	r3, [pc, #136]	; 13af8 <__assert_fail@plt+0x2dc0>
   13a6c:	ldr	r3, [r3]
   13a70:	ldr	r2, [fp, #-8]
   13a74:	cmp	r2, r3
   13a78:	blt	13a40 <__assert_fail@plt+0x2d08>
   13a7c:	ldr	r3, [fp, #-12]
   13a80:	ldr	r3, [r3, #4]
   13a84:	ldr	r2, [pc, #112]	; 13afc <__assert_fail@plt+0x2dc4>
   13a88:	cmp	r3, r2
   13a8c:	beq	13ab8 <__assert_fail@plt+0x2d80>
   13a90:	ldr	r3, [fp, #-12]
   13a94:	ldr	r3, [r3, #4]
   13a98:	mov	r0, r3
   13a9c:	bl	15bf4 <__assert_fail@plt+0x4ebc>
   13aa0:	ldr	r3, [pc, #88]	; 13b00 <__assert_fail@plt+0x2dc8>
   13aa4:	mov	r2, #256	; 0x100
   13aa8:	str	r2, [r3]
   13aac:	ldr	r3, [pc, #76]	; 13b00 <__assert_fail@plt+0x2dc8>
   13ab0:	ldr	r2, [pc, #68]	; 13afc <__assert_fail@plt+0x2dc4>
   13ab4:	str	r2, [r3, #4]
   13ab8:	ldr	r3, [fp, #-12]
   13abc:	ldr	r2, [pc, #60]	; 13b00 <__assert_fail@plt+0x2dc8>
   13ac0:	cmp	r3, r2
   13ac4:	beq	13adc <__assert_fail@plt+0x2da4>
   13ac8:	ldr	r0, [fp, #-12]
   13acc:	bl	15bf4 <__assert_fail@plt+0x4ebc>
   13ad0:	ldr	r3, [pc, #28]	; 13af4 <__assert_fail@plt+0x2dbc>
   13ad4:	ldr	r2, [pc, #36]	; 13b00 <__assert_fail@plt+0x2dc8>
   13ad8:	str	r2, [r3]
   13adc:	ldr	r3, [pc, #20]	; 13af8 <__assert_fail@plt+0x2dc0>
   13ae0:	mov	r2, #1
   13ae4:	str	r2, [r3]
   13ae8:	nop			; (mov r0, r0)
   13aec:	sub	sp, fp, #4
   13af0:	pop	{fp, pc}
   13af4:	andeq	r8, r2, r4, ror #1
   13af8:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   13afc:	andeq	r8, r2, r8, ror #2
   13b00:	ldrdeq	r8, [r2], -ip
   13b04:	push	{r4, fp, lr}
   13b08:	add	fp, sp, #8
   13b0c:	sub	sp, sp, #84	; 0x54
   13b10:	str	r0, [fp, #-56]	; 0xffffffc8
   13b14:	str	r1, [fp, #-60]	; 0xffffffc4
   13b18:	str	r2, [fp, #-64]	; 0xffffffc0
   13b1c:	str	r3, [fp, #-68]	; 0xffffffbc
   13b20:	bl	10c9c <__errno_location@plt>
   13b24:	mov	r3, r0
   13b28:	ldr	r3, [r3]
   13b2c:	str	r3, [fp, #-24]	; 0xffffffe8
   13b30:	ldr	r3, [pc, #640]	; 13db8 <__assert_fail@plt+0x3080>
   13b34:	ldr	r3, [r3]
   13b38:	str	r3, [fp, #-16]
   13b3c:	mvn	r3, #-2147483648	; 0x80000000
   13b40:	str	r3, [fp, #-28]	; 0xffffffe4
   13b44:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13b48:	cmp	r3, #0
   13b4c:	blt	13b60 <__assert_fail@plt+0x2e28>
   13b50:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13b54:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13b58:	cmp	r2, r3
   13b5c:	blt	13b64 <__assert_fail@plt+0x2e2c>
   13b60:	bl	10d20 <abort@plt>
   13b64:	ldr	r3, [pc, #592]	; 13dbc <__assert_fail@plt+0x3084>
   13b68:	ldr	r2, [r3]
   13b6c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13b70:	cmp	r2, r3
   13b74:	bgt	13c48 <__assert_fail@plt+0x2f10>
   13b78:	ldr	r3, [fp, #-16]
   13b7c:	ldr	r2, [pc, #572]	; 13dc0 <__assert_fail@plt+0x3088>
   13b80:	cmp	r3, r2
   13b84:	moveq	r3, #1
   13b88:	movne	r3, #0
   13b8c:	strb	r3, [fp, #-29]	; 0xffffffe3
   13b90:	ldr	r3, [pc, #548]	; 13dbc <__assert_fail@plt+0x3084>
   13b94:	ldr	r3, [r3]
   13b98:	str	r3, [fp, #-48]	; 0xffffffd0
   13b9c:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   13ba0:	cmp	r3, #0
   13ba4:	beq	13bb0 <__assert_fail@plt+0x2e78>
   13ba8:	mov	r0, #0
   13bac:	b	13bb4 <__assert_fail@plt+0x2e7c>
   13bb0:	ldr	r0, [fp, #-16]
   13bb4:	ldr	r3, [pc, #512]	; 13dbc <__assert_fail@plt+0x3084>
   13bb8:	ldr	r3, [r3]
   13bbc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13bc0:	sub	r3, r2, r3
   13bc4:	add	r2, r3, #1
   13bc8:	sub	r1, fp, #48	; 0x30
   13bcc:	mov	r3, #8
   13bd0:	str	r3, [sp]
   13bd4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13bd8:	bl	14ed8 <__assert_fail@plt+0x41a0>
   13bdc:	str	r0, [fp, #-16]
   13be0:	ldr	r2, [pc, #464]	; 13db8 <__assert_fail@plt+0x3080>
   13be4:	ldr	r3, [fp, #-16]
   13be8:	str	r3, [r2]
   13bec:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   13bf0:	cmp	r3, #0
   13bf4:	beq	13c08 <__assert_fail@plt+0x2ed0>
   13bf8:	ldr	r3, [fp, #-16]
   13bfc:	ldr	r2, [pc, #444]	; 13dc0 <__assert_fail@plt+0x3088>
   13c00:	ldm	r2, {r0, r1}
   13c04:	stm	r3, {r0, r1}
   13c08:	ldr	r3, [pc, #428]	; 13dbc <__assert_fail@plt+0x3084>
   13c0c:	ldr	r3, [r3]
   13c10:	lsl	r3, r3, #3
   13c14:	ldr	r2, [fp, #-16]
   13c18:	add	r0, r2, r3
   13c1c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13c20:	ldr	r3, [pc, #404]	; 13dbc <__assert_fail@plt+0x3084>
   13c24:	ldr	r3, [r3]
   13c28:	sub	r3, r2, r3
   13c2c:	lsl	r3, r3, #3
   13c30:	mov	r2, r3
   13c34:	mov	r1, #0
   13c38:	bl	10cb4 <memset@plt>
   13c3c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13c40:	ldr	r2, [pc, #372]	; 13dbc <__assert_fail@plt+0x3084>
   13c44:	str	r3, [r2]
   13c48:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13c4c:	lsl	r3, r3, #3
   13c50:	ldr	r2, [fp, #-16]
   13c54:	add	r3, r2, r3
   13c58:	ldr	r3, [r3]
   13c5c:	str	r3, [fp, #-36]	; 0xffffffdc
   13c60:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13c64:	lsl	r3, r3, #3
   13c68:	ldr	r2, [fp, #-16]
   13c6c:	add	r3, r2, r3
   13c70:	ldr	r3, [r3, #4]
   13c74:	str	r3, [fp, #-20]	; 0xffffffec
   13c78:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13c7c:	ldr	r3, [r3, #4]
   13c80:	orr	r3, r3, #1
   13c84:	str	r3, [fp, #-40]	; 0xffffffd8
   13c88:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13c8c:	ldr	r3, [r3]
   13c90:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13c94:	add	r2, r2, #8
   13c98:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13c9c:	ldr	r1, [r1, #40]	; 0x28
   13ca0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13ca4:	ldr	r0, [r0, #44]	; 0x2c
   13ca8:	str	r0, [sp, #16]
   13cac:	str	r1, [sp, #12]
   13cb0:	str	r2, [sp, #8]
   13cb4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13cb8:	str	r2, [sp, #4]
   13cbc:	str	r3, [sp]
   13cc0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13cc4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13cc8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13ccc:	ldr	r0, [fp, #-20]	; 0xffffffec
   13cd0:	bl	12114 <__assert_fail@plt+0x13dc>
   13cd4:	str	r0, [fp, #-44]	; 0xffffffd4
   13cd8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13cdc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13ce0:	cmp	r2, r3
   13ce4:	bhi	13d98 <__assert_fail@plt+0x3060>
   13ce8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13cec:	lsl	r3, r3, #3
   13cf0:	ldr	r2, [fp, #-16]
   13cf4:	add	r3, r2, r3
   13cf8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13cfc:	add	r2, r2, #1
   13d00:	str	r2, [fp, #-36]	; 0xffffffdc
   13d04:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13d08:	str	r2, [r3]
   13d0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d10:	ldr	r2, [pc, #172]	; 13dc4 <__assert_fail@plt+0x308c>
   13d14:	cmp	r3, r2
   13d18:	beq	13d24 <__assert_fail@plt+0x2fec>
   13d1c:	ldr	r0, [fp, #-20]	; 0xffffffec
   13d20:	bl	15bf4 <__assert_fail@plt+0x4ebc>
   13d24:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13d28:	lsl	r3, r3, #3
   13d2c:	ldr	r2, [fp, #-16]
   13d30:	add	r4, r2, r3
   13d34:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13d38:	bl	14bb8 <__assert_fail@plt+0x3e80>
   13d3c:	mov	r3, r0
   13d40:	str	r3, [fp, #-20]	; 0xffffffec
   13d44:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d48:	str	r3, [r4, #4]
   13d4c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13d50:	ldr	r3, [r3]
   13d54:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13d58:	add	r2, r2, #8
   13d5c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13d60:	ldr	r1, [r1, #40]	; 0x28
   13d64:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13d68:	ldr	r0, [r0, #44]	; 0x2c
   13d6c:	str	r0, [sp, #16]
   13d70:	str	r1, [sp, #12]
   13d74:	str	r2, [sp, #8]
   13d78:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13d7c:	str	r2, [sp, #4]
   13d80:	str	r3, [sp]
   13d84:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13d88:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13d8c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13d90:	ldr	r0, [fp, #-20]	; 0xffffffec
   13d94:	bl	12114 <__assert_fail@plt+0x13dc>
   13d98:	bl	10c9c <__errno_location@plt>
   13d9c:	mov	r2, r0
   13da0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13da4:	str	r3, [r2]
   13da8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13dac:	mov	r0, r3
   13db0:	sub	sp, fp, #8
   13db4:	pop	{r4, fp, pc}
   13db8:	andeq	r8, r2, r4, ror #1
   13dbc:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   13dc0:	ldrdeq	r8, [r2], -ip
   13dc4:	andeq	r8, r2, r8, ror #2
   13dc8:	push	{fp, lr}
   13dcc:	add	fp, sp, #4
   13dd0:	sub	sp, sp, #8
   13dd4:	str	r0, [fp, #-8]
   13dd8:	str	r1, [fp, #-12]
   13ddc:	ldr	r3, [pc, #28]	; 13e00 <__assert_fail@plt+0x30c8>
   13de0:	mvn	r2, #0
   13de4:	ldr	r1, [fp, #-12]
   13de8:	ldr	r0, [fp, #-8]
   13dec:	bl	13b04 <__assert_fail@plt+0x2dcc>
   13df0:	mov	r3, r0
   13df4:	mov	r0, r3
   13df8:	sub	sp, fp, #4
   13dfc:	pop	{fp, pc}
   13e00:	andeq	r8, r2, r8, lsr r1
   13e04:	push	{fp, lr}
   13e08:	add	fp, sp, #4
   13e0c:	sub	sp, sp, #16
   13e10:	str	r0, [fp, #-8]
   13e14:	str	r1, [fp, #-12]
   13e18:	str	r2, [fp, #-16]
   13e1c:	ldr	r3, [pc, #28]	; 13e40 <__assert_fail@plt+0x3108>
   13e20:	ldr	r2, [fp, #-16]
   13e24:	ldr	r1, [fp, #-12]
   13e28:	ldr	r0, [fp, #-8]
   13e2c:	bl	13b04 <__assert_fail@plt+0x2dcc>
   13e30:	mov	r3, r0
   13e34:	mov	r0, r3
   13e38:	sub	sp, fp, #4
   13e3c:	pop	{fp, pc}
   13e40:	andeq	r8, r2, r8, lsr r1
   13e44:	push	{fp, lr}
   13e48:	add	fp, sp, #4
   13e4c:	sub	sp, sp, #8
   13e50:	str	r0, [fp, #-8]
   13e54:	ldr	r1, [fp, #-8]
   13e58:	mov	r0, #0
   13e5c:	bl	13dc8 <__assert_fail@plt+0x3090>
   13e60:	mov	r3, r0
   13e64:	mov	r0, r3
   13e68:	sub	sp, fp, #4
   13e6c:	pop	{fp, pc}
   13e70:	push	{fp, lr}
   13e74:	add	fp, sp, #4
   13e78:	sub	sp, sp, #8
   13e7c:	str	r0, [fp, #-8]
   13e80:	str	r1, [fp, #-12]
   13e84:	ldr	r2, [fp, #-12]
   13e88:	ldr	r1, [fp, #-8]
   13e8c:	mov	r0, #0
   13e90:	bl	13e04 <__assert_fail@plt+0x30cc>
   13e94:	mov	r3, r0
   13e98:	mov	r0, r3
   13e9c:	sub	sp, fp, #4
   13ea0:	pop	{fp, pc}
   13ea4:	push	{fp, lr}
   13ea8:	add	fp, sp, #4
   13eac:	sub	sp, sp, #64	; 0x40
   13eb0:	str	r0, [fp, #-56]	; 0xffffffc8
   13eb4:	str	r1, [fp, #-60]	; 0xffffffc4
   13eb8:	str	r2, [fp, #-64]	; 0xffffffc0
   13ebc:	sub	r3, fp, #52	; 0x34
   13ec0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13ec4:	mov	r0, r3
   13ec8:	bl	11fb0 <__assert_fail@plt+0x1278>
   13ecc:	sub	r3, fp, #52	; 0x34
   13ed0:	mvn	r2, #0
   13ed4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13ed8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13edc:	bl	13b04 <__assert_fail@plt+0x2dcc>
   13ee0:	mov	r3, r0
   13ee4:	mov	r0, r3
   13ee8:	sub	sp, fp, #4
   13eec:	pop	{fp, pc}
   13ef0:	push	{fp, lr}
   13ef4:	add	fp, sp, #4
   13ef8:	sub	sp, sp, #64	; 0x40
   13efc:	str	r0, [fp, #-56]	; 0xffffffc8
   13f00:	str	r1, [fp, #-60]	; 0xffffffc4
   13f04:	str	r2, [fp, #-64]	; 0xffffffc0
   13f08:	str	r3, [fp, #-68]	; 0xffffffbc
   13f0c:	sub	r3, fp, #52	; 0x34
   13f10:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13f14:	mov	r0, r3
   13f18:	bl	11fb0 <__assert_fail@plt+0x1278>
   13f1c:	sub	r3, fp, #52	; 0x34
   13f20:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13f24:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13f28:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13f2c:	bl	13b04 <__assert_fail@plt+0x2dcc>
   13f30:	mov	r3, r0
   13f34:	mov	r0, r3
   13f38:	sub	sp, fp, #4
   13f3c:	pop	{fp, pc}
   13f40:	push	{fp, lr}
   13f44:	add	fp, sp, #4
   13f48:	sub	sp, sp, #8
   13f4c:	str	r0, [fp, #-8]
   13f50:	str	r1, [fp, #-12]
   13f54:	ldr	r2, [fp, #-12]
   13f58:	ldr	r1, [fp, #-8]
   13f5c:	mov	r0, #0
   13f60:	bl	13ea4 <__assert_fail@plt+0x316c>
   13f64:	mov	r3, r0
   13f68:	mov	r0, r3
   13f6c:	sub	sp, fp, #4
   13f70:	pop	{fp, pc}
   13f74:	push	{fp, lr}
   13f78:	add	fp, sp, #4
   13f7c:	sub	sp, sp, #16
   13f80:	str	r0, [fp, #-8]
   13f84:	str	r1, [fp, #-12]
   13f88:	str	r2, [fp, #-16]
   13f8c:	ldr	r3, [fp, #-16]
   13f90:	ldr	r2, [fp, #-12]
   13f94:	ldr	r1, [fp, #-8]
   13f98:	mov	r0, #0
   13f9c:	bl	13ef0 <__assert_fail@plt+0x31b8>
   13fa0:	mov	r3, r0
   13fa4:	mov	r0, r3
   13fa8:	sub	sp, fp, #4
   13fac:	pop	{fp, pc}
   13fb0:	push	{fp, lr}
   13fb4:	add	fp, sp, #4
   13fb8:	sub	sp, sp, #64	; 0x40
   13fbc:	str	r0, [fp, #-56]	; 0xffffffc8
   13fc0:	str	r1, [fp, #-60]	; 0xffffffc4
   13fc4:	mov	r3, r2
   13fc8:	strb	r3, [fp, #-61]	; 0xffffffc3
   13fcc:	ldr	r3, [pc, #84]	; 14028 <__assert_fail@plt+0x32f0>
   13fd0:	sub	ip, fp, #52	; 0x34
   13fd4:	mov	lr, r3
   13fd8:	ldm	lr!, {r0, r1, r2, r3}
   13fdc:	stmia	ip!, {r0, r1, r2, r3}
   13fe0:	ldm	lr!, {r0, r1, r2, r3}
   13fe4:	stmia	ip!, {r0, r1, r2, r3}
   13fe8:	ldm	lr, {r0, r1, r2, r3}
   13fec:	stm	ip, {r0, r1, r2, r3}
   13ff0:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   13ff4:	sub	r3, fp, #52	; 0x34
   13ff8:	mov	r2, #1
   13ffc:	mov	r0, r3
   14000:	bl	11e1c <__assert_fail@plt+0x10e4>
   14004:	sub	r3, fp, #52	; 0x34
   14008:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1400c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14010:	mov	r0, #0
   14014:	bl	13b04 <__assert_fail@plt+0x2dcc>
   14018:	mov	r3, r0
   1401c:	mov	r0, r3
   14020:	sub	sp, fp, #4
   14024:	pop	{fp, pc}
   14028:	andeq	r8, r2, r8, lsr r1
   1402c:	push	{fp, lr}
   14030:	add	fp, sp, #4
   14034:	sub	sp, sp, #8
   14038:	str	r0, [fp, #-8]
   1403c:	mov	r3, r1
   14040:	strb	r3, [fp, #-9]
   14044:	ldrb	r3, [fp, #-9]
   14048:	mov	r2, r3
   1404c:	mvn	r1, #0
   14050:	ldr	r0, [fp, #-8]
   14054:	bl	13fb0 <__assert_fail@plt+0x3278>
   14058:	mov	r3, r0
   1405c:	mov	r0, r3
   14060:	sub	sp, fp, #4
   14064:	pop	{fp, pc}
   14068:	push	{fp, lr}
   1406c:	add	fp, sp, #4
   14070:	sub	sp, sp, #8
   14074:	str	r0, [fp, #-8]
   14078:	mov	r1, #58	; 0x3a
   1407c:	ldr	r0, [fp, #-8]
   14080:	bl	1402c <__assert_fail@plt+0x32f4>
   14084:	mov	r3, r0
   14088:	mov	r0, r3
   1408c:	sub	sp, fp, #4
   14090:	pop	{fp, pc}
   14094:	push	{fp, lr}
   14098:	add	fp, sp, #4
   1409c:	sub	sp, sp, #8
   140a0:	str	r0, [fp, #-8]
   140a4:	str	r1, [fp, #-12]
   140a8:	mov	r2, #58	; 0x3a
   140ac:	ldr	r1, [fp, #-12]
   140b0:	ldr	r0, [fp, #-8]
   140b4:	bl	13fb0 <__assert_fail@plt+0x3278>
   140b8:	mov	r3, r0
   140bc:	mov	r0, r3
   140c0:	sub	sp, fp, #4
   140c4:	pop	{fp, pc}
   140c8:	push	{fp, lr}
   140cc:	add	fp, sp, #4
   140d0:	sub	sp, sp, #112	; 0x70
   140d4:	str	r0, [fp, #-56]	; 0xffffffc8
   140d8:	str	r1, [fp, #-60]	; 0xffffffc4
   140dc:	str	r2, [fp, #-64]	; 0xffffffc0
   140e0:	sub	r3, fp, #116	; 0x74
   140e4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   140e8:	mov	r0, r3
   140ec:	bl	11fb0 <__assert_fail@plt+0x1278>
   140f0:	sub	ip, fp, #52	; 0x34
   140f4:	sub	lr, fp, #116	; 0x74
   140f8:	ldm	lr!, {r0, r1, r2, r3}
   140fc:	stmia	ip!, {r0, r1, r2, r3}
   14100:	ldm	lr!, {r0, r1, r2, r3}
   14104:	stmia	ip!, {r0, r1, r2, r3}
   14108:	ldm	lr, {r0, r1, r2, r3}
   1410c:	stm	ip, {r0, r1, r2, r3}
   14110:	sub	r3, fp, #52	; 0x34
   14114:	mov	r2, #1
   14118:	mov	r1, #58	; 0x3a
   1411c:	mov	r0, r3
   14120:	bl	11e1c <__assert_fail@plt+0x10e4>
   14124:	sub	r3, fp, #52	; 0x34
   14128:	mvn	r2, #0
   1412c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14130:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14134:	bl	13b04 <__assert_fail@plt+0x2dcc>
   14138:	mov	r3, r0
   1413c:	mov	r0, r3
   14140:	sub	sp, fp, #4
   14144:	pop	{fp, pc}
   14148:	push	{fp, lr}
   1414c:	add	fp, sp, #4
   14150:	sub	sp, sp, #24
   14154:	str	r0, [fp, #-8]
   14158:	str	r1, [fp, #-12]
   1415c:	str	r2, [fp, #-16]
   14160:	str	r3, [fp, #-20]	; 0xffffffec
   14164:	mvn	r3, #0
   14168:	str	r3, [sp]
   1416c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14170:	ldr	r2, [fp, #-16]
   14174:	ldr	r1, [fp, #-12]
   14178:	ldr	r0, [fp, #-8]
   1417c:	bl	14190 <__assert_fail@plt+0x3458>
   14180:	mov	r3, r0
   14184:	mov	r0, r3
   14188:	sub	sp, fp, #4
   1418c:	pop	{fp, pc}
   14190:	push	{fp, lr}
   14194:	add	fp, sp, #4
   14198:	sub	sp, sp, #64	; 0x40
   1419c:	str	r0, [fp, #-56]	; 0xffffffc8
   141a0:	str	r1, [fp, #-60]	; 0xffffffc4
   141a4:	str	r2, [fp, #-64]	; 0xffffffc0
   141a8:	str	r3, [fp, #-68]	; 0xffffffbc
   141ac:	ldr	r3, [pc, #84]	; 14208 <__assert_fail@plt+0x34d0>
   141b0:	sub	ip, fp, #52	; 0x34
   141b4:	mov	lr, r3
   141b8:	ldm	lr!, {r0, r1, r2, r3}
   141bc:	stmia	ip!, {r0, r1, r2, r3}
   141c0:	ldm	lr!, {r0, r1, r2, r3}
   141c4:	stmia	ip!, {r0, r1, r2, r3}
   141c8:	ldm	lr, {r0, r1, r2, r3}
   141cc:	stm	ip, {r0, r1, r2, r3}
   141d0:	sub	r3, fp, #52	; 0x34
   141d4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   141d8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   141dc:	mov	r0, r3
   141e0:	bl	11f34 <__assert_fail@plt+0x11fc>
   141e4:	sub	r3, fp, #52	; 0x34
   141e8:	ldr	r2, [fp, #4]
   141ec:	ldr	r1, [fp, #-68]	; 0xffffffbc
   141f0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   141f4:	bl	13b04 <__assert_fail@plt+0x2dcc>
   141f8:	mov	r3, r0
   141fc:	mov	r0, r3
   14200:	sub	sp, fp, #4
   14204:	pop	{fp, pc}
   14208:	andeq	r8, r2, r8, lsr r1
   1420c:	push	{fp, lr}
   14210:	add	fp, sp, #4
   14214:	sub	sp, sp, #16
   14218:	str	r0, [fp, #-8]
   1421c:	str	r1, [fp, #-12]
   14220:	str	r2, [fp, #-16]
   14224:	ldr	r3, [fp, #-16]
   14228:	ldr	r2, [fp, #-12]
   1422c:	ldr	r1, [fp, #-8]
   14230:	mov	r0, #0
   14234:	bl	14148 <__assert_fail@plt+0x3410>
   14238:	mov	r3, r0
   1423c:	mov	r0, r3
   14240:	sub	sp, fp, #4
   14244:	pop	{fp, pc}
   14248:	push	{fp, lr}
   1424c:	add	fp, sp, #4
   14250:	sub	sp, sp, #24
   14254:	str	r0, [fp, #-8]
   14258:	str	r1, [fp, #-12]
   1425c:	str	r2, [fp, #-16]
   14260:	str	r3, [fp, #-20]	; 0xffffffec
   14264:	ldr	r3, [fp, #-20]	; 0xffffffec
   14268:	str	r3, [sp]
   1426c:	ldr	r3, [fp, #-16]
   14270:	ldr	r2, [fp, #-12]
   14274:	ldr	r1, [fp, #-8]
   14278:	mov	r0, #0
   1427c:	bl	14190 <__assert_fail@plt+0x3458>
   14280:	mov	r3, r0
   14284:	mov	r0, r3
   14288:	sub	sp, fp, #4
   1428c:	pop	{fp, pc}
   14290:	push	{fp, lr}
   14294:	add	fp, sp, #4
   14298:	sub	sp, sp, #16
   1429c:	str	r0, [fp, #-8]
   142a0:	str	r1, [fp, #-12]
   142a4:	str	r2, [fp, #-16]
   142a8:	ldr	r3, [pc, #28]	; 142cc <__assert_fail@plt+0x3594>
   142ac:	ldr	r2, [fp, #-16]
   142b0:	ldr	r1, [fp, #-12]
   142b4:	ldr	r0, [fp, #-8]
   142b8:	bl	13b04 <__assert_fail@plt+0x2dcc>
   142bc:	mov	r3, r0
   142c0:	mov	r0, r3
   142c4:	sub	sp, fp, #4
   142c8:	pop	{fp, pc}
   142cc:	andeq	r8, r2, r8, ror #1
   142d0:	push	{fp, lr}
   142d4:	add	fp, sp, #4
   142d8:	sub	sp, sp, #8
   142dc:	str	r0, [fp, #-8]
   142e0:	str	r1, [fp, #-12]
   142e4:	ldr	r2, [fp, #-12]
   142e8:	ldr	r1, [fp, #-8]
   142ec:	mov	r0, #0
   142f0:	bl	14290 <__assert_fail@plt+0x3558>
   142f4:	mov	r3, r0
   142f8:	mov	r0, r3
   142fc:	sub	sp, fp, #4
   14300:	pop	{fp, pc}
   14304:	push	{fp, lr}
   14308:	add	fp, sp, #4
   1430c:	sub	sp, sp, #8
   14310:	str	r0, [fp, #-8]
   14314:	str	r1, [fp, #-12]
   14318:	mvn	r2, #0
   1431c:	ldr	r1, [fp, #-12]
   14320:	ldr	r0, [fp, #-8]
   14324:	bl	14290 <__assert_fail@plt+0x3558>
   14328:	mov	r3, r0
   1432c:	mov	r0, r3
   14330:	sub	sp, fp, #4
   14334:	pop	{fp, pc}
   14338:	push	{fp, lr}
   1433c:	add	fp, sp, #4
   14340:	sub	sp, sp, #8
   14344:	str	r0, [fp, #-8]
   14348:	ldr	r1, [fp, #-8]
   1434c:	mov	r0, #0
   14350:	bl	14304 <__assert_fail@plt+0x35cc>
   14354:	mov	r3, r0
   14358:	mov	r0, r3
   1435c:	sub	sp, fp, #4
   14360:	pop	{fp, pc}
   14364:	push	{r4, r5, r6, r7, fp, lr}
   14368:	add	fp, sp, #20
   1436c:	sub	sp, sp, #48	; 0x30
   14370:	str	r0, [fp, #-24]	; 0xffffffe8
   14374:	str	r1, [fp, #-28]	; 0xffffffe4
   14378:	str	r2, [fp, #-32]	; 0xffffffe0
   1437c:	str	r3, [fp, #-36]	; 0xffffffdc
   14380:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14384:	cmp	r3, #0
   14388:	beq	143ac <__assert_fail@plt+0x3674>
   1438c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14390:	str	r3, [sp]
   14394:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14398:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1439c:	ldr	r1, [pc, #1260]	; 14890 <__assert_fail@plt+0x3b58>
   143a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   143a4:	bl	10c90 <fprintf@plt>
   143a8:	b	143c0 <__assert_fail@plt+0x3688>
   143ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   143b0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   143b4:	ldr	r1, [pc, #1240]	; 14894 <__assert_fail@plt+0x3b5c>
   143b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   143bc:	bl	10c90 <fprintf@plt>
   143c0:	ldr	r0, [pc, #1232]	; 14898 <__assert_fail@plt+0x3b60>
   143c4:	bl	10c78 <gettext@plt>
   143c8:	mov	r2, r0
   143cc:	ldr	r3, [pc, #1224]	; 1489c <__assert_fail@plt+0x3b64>
   143d0:	ldr	r1, [pc, #1224]	; 148a0 <__assert_fail@plt+0x3b68>
   143d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   143d8:	bl	10c90 <fprintf@plt>
   143dc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   143e0:	mov	r0, #10
   143e4:	bl	10ba0 <fputc_unlocked@plt>
   143e8:	ldr	r0, [pc, #1204]	; 148a4 <__assert_fail@plt+0x3b6c>
   143ec:	bl	10c78 <gettext@plt>
   143f0:	mov	r3, r0
   143f4:	ldr	r2, [pc, #1196]	; 148a8 <__assert_fail@plt+0x3b70>
   143f8:	mov	r1, r3
   143fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14400:	bl	10c90 <fprintf@plt>
   14404:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14408:	mov	r0, #10
   1440c:	bl	10ba0 <fputc_unlocked@plt>
   14410:	ldr	r3, [fp, #8]
   14414:	cmp	r3, #9
   14418:	ldrls	pc, [pc, r3, lsl #2]
   1441c:	b	147d8 <__assert_fail@plt+0x3aa0>
   14420:	andeq	r4, r1, r0, lsl #17
   14424:	andeq	r4, r1, r8, asr #8
   14428:	andeq	r4, r1, ip, ror #8
   1442c:	muleq	r1, r8, r4
   14430:	ldrdeq	r4, [r1], -r8
   14434:	andeq	r4, r1, r0, lsr r5
   14438:	muleq	r1, r8, r5
   1443c:	andeq	r4, r1, r0, lsl r6
   14440:	muleq	r1, r8, r6
   14444:	andeq	r4, r1, r0, lsr r7
   14448:	ldr	r0, [pc, #1116]	; 148ac <__assert_fail@plt+0x3b74>
   1444c:	bl	10c78 <gettext@plt>
   14450:	mov	r1, r0
   14454:	ldr	r3, [fp, #4]
   14458:	ldr	r3, [r3]
   1445c:	mov	r2, r3
   14460:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14464:	bl	10c90 <fprintf@plt>
   14468:	b	14884 <__assert_fail@plt+0x3b4c>
   1446c:	ldr	r0, [pc, #1084]	; 148b0 <__assert_fail@plt+0x3b78>
   14470:	bl	10c78 <gettext@plt>
   14474:	mov	r1, r0
   14478:	ldr	r3, [fp, #4]
   1447c:	ldr	r2, [r3]
   14480:	ldr	r3, [fp, #4]
   14484:	add	r3, r3, #4
   14488:	ldr	r3, [r3]
   1448c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14490:	bl	10c90 <fprintf@plt>
   14494:	b	14884 <__assert_fail@plt+0x3b4c>
   14498:	ldr	r0, [pc, #1044]	; 148b4 <__assert_fail@plt+0x3b7c>
   1449c:	bl	10c78 <gettext@plt>
   144a0:	ldr	r3, [fp, #4]
   144a4:	ldr	r2, [r3]
   144a8:	ldr	r3, [fp, #4]
   144ac:	add	r3, r3, #4
   144b0:	ldr	r1, [r3]
   144b4:	ldr	r3, [fp, #4]
   144b8:	add	r3, r3, #8
   144bc:	ldr	r3, [r3]
   144c0:	str	r3, [sp]
   144c4:	mov	r3, r1
   144c8:	mov	r1, r0
   144cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   144d0:	bl	10c90 <fprintf@plt>
   144d4:	b	14884 <__assert_fail@plt+0x3b4c>
   144d8:	ldr	r0, [pc, #984]	; 148b8 <__assert_fail@plt+0x3b80>
   144dc:	bl	10c78 <gettext@plt>
   144e0:	mov	ip, r0
   144e4:	ldr	r3, [fp, #4]
   144e8:	ldr	r1, [r3]
   144ec:	ldr	r3, [fp, #4]
   144f0:	add	r3, r3, #4
   144f4:	ldr	r0, [r3]
   144f8:	ldr	r3, [fp, #4]
   144fc:	add	r3, r3, #8
   14500:	ldr	r3, [r3]
   14504:	ldr	r2, [fp, #4]
   14508:	add	r2, r2, #12
   1450c:	ldr	r2, [r2]
   14510:	str	r2, [sp, #4]
   14514:	str	r3, [sp]
   14518:	mov	r3, r0
   1451c:	mov	r2, r1
   14520:	mov	r1, ip
   14524:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14528:	bl	10c90 <fprintf@plt>
   1452c:	b	14884 <__assert_fail@plt+0x3b4c>
   14530:	ldr	r0, [pc, #900]	; 148bc <__assert_fail@plt+0x3b84>
   14534:	bl	10c78 <gettext@plt>
   14538:	mov	lr, r0
   1453c:	ldr	r3, [fp, #4]
   14540:	ldr	r0, [r3]
   14544:	ldr	r3, [fp, #4]
   14548:	add	r3, r3, #4
   1454c:	ldr	ip, [r3]
   14550:	ldr	r3, [fp, #4]
   14554:	add	r3, r3, #8
   14558:	ldr	r3, [r3]
   1455c:	ldr	r2, [fp, #4]
   14560:	add	r2, r2, #12
   14564:	ldr	r2, [r2]
   14568:	ldr	r1, [fp, #4]
   1456c:	add	r1, r1, #16
   14570:	ldr	r1, [r1]
   14574:	str	r1, [sp, #8]
   14578:	str	r2, [sp, #4]
   1457c:	str	r3, [sp]
   14580:	mov	r3, ip
   14584:	mov	r2, r0
   14588:	mov	r1, lr
   1458c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14590:	bl	10c90 <fprintf@plt>
   14594:	b	14884 <__assert_fail@plt+0x3b4c>
   14598:	ldr	r0, [pc, #800]	; 148c0 <__assert_fail@plt+0x3b88>
   1459c:	bl	10c78 <gettext@plt>
   145a0:	mov	r4, r0
   145a4:	ldr	r3, [fp, #4]
   145a8:	ldr	ip, [r3]
   145ac:	ldr	r3, [fp, #4]
   145b0:	add	r3, r3, #4
   145b4:	ldr	lr, [r3]
   145b8:	ldr	r3, [fp, #4]
   145bc:	add	r3, r3, #8
   145c0:	ldr	r3, [r3]
   145c4:	ldr	r2, [fp, #4]
   145c8:	add	r2, r2, #12
   145cc:	ldr	r2, [r2]
   145d0:	ldr	r1, [fp, #4]
   145d4:	add	r1, r1, #16
   145d8:	ldr	r1, [r1]
   145dc:	ldr	r0, [fp, #4]
   145e0:	add	r0, r0, #20
   145e4:	ldr	r0, [r0]
   145e8:	str	r0, [sp, #12]
   145ec:	str	r1, [sp, #8]
   145f0:	str	r2, [sp, #4]
   145f4:	str	r3, [sp]
   145f8:	mov	r3, lr
   145fc:	mov	r2, ip
   14600:	mov	r1, r4
   14604:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14608:	bl	10c90 <fprintf@plt>
   1460c:	b	14884 <__assert_fail@plt+0x3b4c>
   14610:	ldr	r0, [pc, #684]	; 148c4 <__assert_fail@plt+0x3b8c>
   14614:	bl	10c78 <gettext@plt>
   14618:	mov	r5, r0
   1461c:	ldr	r3, [fp, #4]
   14620:	ldr	lr, [r3]
   14624:	ldr	r3, [fp, #4]
   14628:	add	r3, r3, #4
   1462c:	ldr	r4, [r3]
   14630:	ldr	r3, [fp, #4]
   14634:	add	r3, r3, #8
   14638:	ldr	r3, [r3]
   1463c:	ldr	r2, [fp, #4]
   14640:	add	r2, r2, #12
   14644:	ldr	r2, [r2]
   14648:	ldr	r1, [fp, #4]
   1464c:	add	r1, r1, #16
   14650:	ldr	r1, [r1]
   14654:	ldr	r0, [fp, #4]
   14658:	add	r0, r0, #20
   1465c:	ldr	r0, [r0]
   14660:	ldr	ip, [fp, #4]
   14664:	add	ip, ip, #24
   14668:	ldr	ip, [ip]
   1466c:	str	ip, [sp, #16]
   14670:	str	r0, [sp, #12]
   14674:	str	r1, [sp, #8]
   14678:	str	r2, [sp, #4]
   1467c:	str	r3, [sp]
   14680:	mov	r3, r4
   14684:	mov	r2, lr
   14688:	mov	r1, r5
   1468c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14690:	bl	10c90 <fprintf@plt>
   14694:	b	14884 <__assert_fail@plt+0x3b4c>
   14698:	ldr	r0, [pc, #552]	; 148c8 <__assert_fail@plt+0x3b90>
   1469c:	bl	10c78 <gettext@plt>
   146a0:	mov	r6, r0
   146a4:	ldr	r3, [fp, #4]
   146a8:	ldr	r4, [r3]
   146ac:	ldr	r3, [fp, #4]
   146b0:	add	r3, r3, #4
   146b4:	ldr	r5, [r3]
   146b8:	ldr	r3, [fp, #4]
   146bc:	add	r3, r3, #8
   146c0:	ldr	r3, [r3]
   146c4:	ldr	r2, [fp, #4]
   146c8:	add	r2, r2, #12
   146cc:	ldr	r2, [r2]
   146d0:	ldr	r1, [fp, #4]
   146d4:	add	r1, r1, #16
   146d8:	ldr	r1, [r1]
   146dc:	ldr	r0, [fp, #4]
   146e0:	add	r0, r0, #20
   146e4:	ldr	r0, [r0]
   146e8:	ldr	ip, [fp, #4]
   146ec:	add	ip, ip, #24
   146f0:	ldr	ip, [ip]
   146f4:	ldr	lr, [fp, #4]
   146f8:	add	lr, lr, #28
   146fc:	ldr	lr, [lr]
   14700:	str	lr, [sp, #20]
   14704:	str	ip, [sp, #16]
   14708:	str	r0, [sp, #12]
   1470c:	str	r1, [sp, #8]
   14710:	str	r2, [sp, #4]
   14714:	str	r3, [sp]
   14718:	mov	r3, r5
   1471c:	mov	r2, r4
   14720:	mov	r1, r6
   14724:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14728:	bl	10c90 <fprintf@plt>
   1472c:	b	14884 <__assert_fail@plt+0x3b4c>
   14730:	ldr	r0, [pc, #404]	; 148cc <__assert_fail@plt+0x3b94>
   14734:	bl	10c78 <gettext@plt>
   14738:	mov	r7, r0
   1473c:	ldr	r3, [fp, #4]
   14740:	ldr	r5, [r3]
   14744:	ldr	r3, [fp, #4]
   14748:	add	r3, r3, #4
   1474c:	ldr	r6, [r3]
   14750:	ldr	r3, [fp, #4]
   14754:	add	r3, r3, #8
   14758:	ldr	r3, [r3]
   1475c:	ldr	r2, [fp, #4]
   14760:	add	r2, r2, #12
   14764:	ldr	r2, [r2]
   14768:	ldr	r1, [fp, #4]
   1476c:	add	r1, r1, #16
   14770:	ldr	r1, [r1]
   14774:	ldr	r0, [fp, #4]
   14778:	add	r0, r0, #20
   1477c:	ldr	r0, [r0]
   14780:	ldr	ip, [fp, #4]
   14784:	add	ip, ip, #24
   14788:	ldr	ip, [ip]
   1478c:	ldr	lr, [fp, #4]
   14790:	add	lr, lr, #28
   14794:	ldr	lr, [lr]
   14798:	ldr	r4, [fp, #4]
   1479c:	add	r4, r4, #32
   147a0:	ldr	r4, [r4]
   147a4:	str	r4, [sp, #24]
   147a8:	str	lr, [sp, #20]
   147ac:	str	ip, [sp, #16]
   147b0:	str	r0, [sp, #12]
   147b4:	str	r1, [sp, #8]
   147b8:	str	r2, [sp, #4]
   147bc:	str	r3, [sp]
   147c0:	mov	r3, r6
   147c4:	mov	r2, r5
   147c8:	mov	r1, r7
   147cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   147d0:	bl	10c90 <fprintf@plt>
   147d4:	b	14884 <__assert_fail@plt+0x3b4c>
   147d8:	ldr	r0, [pc, #240]	; 148d0 <__assert_fail@plt+0x3b98>
   147dc:	bl	10c78 <gettext@plt>
   147e0:	mov	r7, r0
   147e4:	ldr	r3, [fp, #4]
   147e8:	ldr	r5, [r3]
   147ec:	ldr	r3, [fp, #4]
   147f0:	add	r3, r3, #4
   147f4:	ldr	r6, [r3]
   147f8:	ldr	r3, [fp, #4]
   147fc:	add	r3, r3, #8
   14800:	ldr	r3, [r3]
   14804:	ldr	r2, [fp, #4]
   14808:	add	r2, r2, #12
   1480c:	ldr	r2, [r2]
   14810:	ldr	r1, [fp, #4]
   14814:	add	r1, r1, #16
   14818:	ldr	r1, [r1]
   1481c:	ldr	r0, [fp, #4]
   14820:	add	r0, r0, #20
   14824:	ldr	r0, [r0]
   14828:	ldr	ip, [fp, #4]
   1482c:	add	ip, ip, #24
   14830:	ldr	ip, [ip]
   14834:	ldr	lr, [fp, #4]
   14838:	add	lr, lr, #28
   1483c:	ldr	lr, [lr]
   14840:	ldr	r4, [fp, #4]
   14844:	add	r4, r4, #32
   14848:	ldr	r4, [r4]
   1484c:	str	r4, [sp, #24]
   14850:	str	lr, [sp, #20]
   14854:	str	ip, [sp, #16]
   14858:	str	r0, [sp, #12]
   1485c:	str	r1, [sp, #8]
   14860:	str	r2, [sp, #4]
   14864:	str	r3, [sp]
   14868:	mov	r3, r6
   1486c:	mov	r2, r5
   14870:	mov	r1, r7
   14874:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14878:	bl	10c90 <fprintf@plt>
   1487c:	b	14884 <__assert_fail@plt+0x3b4c>
   14880:	nop			; (mov r0, r0)
   14884:	nop			; (mov r0, r0)
   14888:	sub	sp, fp, #20
   1488c:	pop	{r4, r5, r6, r7, fp, pc}
   14890:	andeq	r7, r1, r0, lsl r4
   14894:	andeq	r7, r1, ip, lsl r4
   14898:	andeq	r7, r1, r4, lsr #8
   1489c:	andeq	r0, r0, r6, ror #15
   148a0:	andeq	r7, r1, r4, lsr r7
   148a4:	andeq	r7, r1, r8, lsr #8
   148a8:	ldrdeq	r7, [r1], -r4
   148ac:	strdeq	r7, [r1], -r8
   148b0:	andeq	r7, r1, r8, lsl #10
   148b4:	andeq	r7, r1, r0, lsr #10
   148b8:	andeq	r7, r1, ip, lsr r5
   148bc:	andeq	r7, r1, ip, asr r5
   148c0:	andeq	r7, r1, r0, lsl #11
   148c4:	andeq	r7, r1, r8, lsr #11
   148c8:	ldrdeq	r7, [r1], -r4
   148cc:	andeq	r7, r1, r4, lsl #12
   148d0:	andeq	r7, r1, r8, lsr r6
   148d4:	push	{fp, lr}
   148d8:	add	fp, sp, #4
   148dc:	sub	sp, sp, #32
   148e0:	str	r0, [fp, #-16]
   148e4:	str	r1, [fp, #-20]	; 0xffffffec
   148e8:	str	r2, [fp, #-24]	; 0xffffffe8
   148ec:	str	r3, [fp, #-28]	; 0xffffffe4
   148f0:	mov	r3, #0
   148f4:	str	r3, [fp, #-8]
   148f8:	b	14908 <__assert_fail@plt+0x3bd0>
   148fc:	ldr	r3, [fp, #-8]
   14900:	add	r3, r3, #1
   14904:	str	r3, [fp, #-8]
   14908:	ldr	r3, [fp, #-8]
   1490c:	lsl	r3, r3, #2
   14910:	ldr	r2, [fp, #4]
   14914:	add	r3, r2, r3
   14918:	ldr	r3, [r3]
   1491c:	cmp	r3, #0
   14920:	bne	148fc <__assert_fail@plt+0x3bc4>
   14924:	ldr	r3, [fp, #-8]
   14928:	str	r3, [sp, #4]
   1492c:	ldr	r3, [fp, #4]
   14930:	str	r3, [sp]
   14934:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14938:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1493c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14940:	ldr	r0, [fp, #-16]
   14944:	bl	14364 <__assert_fail@plt+0x362c>
   14948:	nop			; (mov r0, r0)
   1494c:	sub	sp, fp, #4
   14950:	pop	{fp, pc}
   14954:	push	{fp, lr}
   14958:	add	fp, sp, #4
   1495c:	sub	sp, sp, #72	; 0x48
   14960:	str	r0, [fp, #-56]	; 0xffffffc8
   14964:	str	r1, [fp, #-60]	; 0xffffffc4
   14968:	str	r2, [fp, #-64]	; 0xffffffc0
   1496c:	str	r3, [fp, #-68]	; 0xffffffbc
   14970:	mov	r3, #0
   14974:	str	r3, [fp, #-8]
   14978:	b	14988 <__assert_fail@plt+0x3c50>
   1497c:	ldr	r3, [fp, #-8]
   14980:	add	r3, r3, #1
   14984:	str	r3, [fp, #-8]
   14988:	ldr	r3, [fp, #-8]
   1498c:	cmp	r3, #9
   14990:	bhi	149d4 <__assert_fail@plt+0x3c9c>
   14994:	ldr	r3, [fp, #4]
   14998:	add	r2, r3, #4
   1499c:	str	r2, [fp, #4]
   149a0:	ldr	r2, [r3]
   149a4:	ldr	r3, [fp, #-8]
   149a8:	lsl	r3, r3, #2
   149ac:	sub	r1, fp, #4
   149b0:	add	r3, r1, r3
   149b4:	str	r2, [r3, #-44]	; 0xffffffd4
   149b8:	ldr	r3, [fp, #-8]
   149bc:	lsl	r3, r3, #2
   149c0:	sub	r2, fp, #4
   149c4:	add	r3, r2, r3
   149c8:	ldr	r3, [r3, #-44]	; 0xffffffd4
   149cc:	cmp	r3, #0
   149d0:	bne	1497c <__assert_fail@plt+0x3c44>
   149d4:	ldr	r3, [fp, #-8]
   149d8:	str	r3, [sp, #4]
   149dc:	sub	r3, fp, #48	; 0x30
   149e0:	str	r3, [sp]
   149e4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   149e8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   149ec:	ldr	r1, [fp, #-60]	; 0xffffffc4
   149f0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   149f4:	bl	14364 <__assert_fail@plt+0x362c>
   149f8:	nop			; (mov r0, r0)
   149fc:	sub	sp, fp, #4
   14a00:	pop	{fp, pc}
   14a04:	push	{r3}		; (str r3, [sp, #-4]!)
   14a08:	push	{fp, lr}
   14a0c:	add	fp, sp, #4
   14a10:	sub	sp, sp, #36	; 0x24
   14a14:	str	r0, [fp, #-20]	; 0xffffffec
   14a18:	str	r1, [fp, #-24]	; 0xffffffe8
   14a1c:	str	r2, [fp, #-28]	; 0xffffffe4
   14a20:	add	r3, fp, #8
   14a24:	str	r3, [fp, #-12]
   14a28:	ldr	r3, [fp, #-12]
   14a2c:	str	r3, [sp]
   14a30:	ldr	r3, [fp, #4]
   14a34:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14a38:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14a3c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14a40:	bl	14954 <__assert_fail@plt+0x3c1c>
   14a44:	nop			; (mov r0, r0)
   14a48:	sub	sp, fp, #4
   14a4c:	pop	{fp, lr}
   14a50:	add	sp, sp, #4
   14a54:	bx	lr
   14a58:	push	{fp, lr}
   14a5c:	add	fp, sp, #4
   14a60:	ldr	r3, [pc, #96]	; 14ac8 <__assert_fail@plt+0x3d90>
   14a64:	ldr	r3, [r3]
   14a68:	mov	r1, r3
   14a6c:	mov	r0, #10
   14a70:	bl	10ba0 <fputc_unlocked@plt>
   14a74:	ldr	r0, [pc, #80]	; 14acc <__assert_fail@plt+0x3d94>
   14a78:	bl	10c78 <gettext@plt>
   14a7c:	mov	r3, r0
   14a80:	ldr	r1, [pc, #72]	; 14ad0 <__assert_fail@plt+0x3d98>
   14a84:	mov	r0, r3
   14a88:	bl	10b4c <printf@plt>
   14a8c:	ldr	r0, [pc, #64]	; 14ad4 <__assert_fail@plt+0x3d9c>
   14a90:	bl	10c78 <gettext@plt>
   14a94:	mov	r3, r0
   14a98:	ldr	r2, [pc, #56]	; 14ad8 <__assert_fail@plt+0x3da0>
   14a9c:	ldr	r1, [pc, #56]	; 14adc <__assert_fail@plt+0x3da4>
   14aa0:	mov	r0, r3
   14aa4:	bl	10b4c <printf@plt>
   14aa8:	ldr	r0, [pc, #48]	; 14ae0 <__assert_fail@plt+0x3da8>
   14aac:	bl	10c78 <gettext@plt>
   14ab0:	mov	r3, r0
   14ab4:	ldr	r1, [pc, #40]	; 14ae4 <__assert_fail@plt+0x3dac>
   14ab8:	mov	r0, r3
   14abc:	bl	10b4c <printf@plt>
   14ac0:	nop			; (mov r0, r0)
   14ac4:	pop	{fp, pc}
   14ac8:	andeq	r8, r2, r4, lsr #2
   14acc:	andeq	r7, r1, r4, ror r6
   14ad0:	andeq	r7, r1, r8, lsl #13
   14ad4:	andeq	r7, r1, r0, lsr #13
   14ad8:			; <UNDEFINED> instruction: 0x000176b4
   14adc:	ldrdeq	r7, [r1], -ip
   14ae0:	andeq	r7, r1, ip, ror #13
   14ae4:	andeq	r7, r1, r4, lsl r7
   14ae8:	push	{fp, lr}
   14aec:	add	fp, sp, #4
   14af0:	sub	sp, sp, #16
   14af4:	str	r0, [fp, #-8]
   14af8:	str	r1, [fp, #-12]
   14afc:	str	r2, [fp, #-16]
   14b00:	ldr	r2, [fp, #-16]
   14b04:	ldr	r1, [fp, #-12]
   14b08:	ldr	r0, [fp, #-8]
   14b0c:	bl	14c78 <__assert_fail@plt+0x3f40>
   14b10:	mov	r3, r0
   14b14:	mov	r0, r3
   14b18:	sub	sp, fp, #4
   14b1c:	pop	{fp, pc}
   14b20:	push	{fp, lr}
   14b24:	add	fp, sp, #4
   14b28:	sub	sp, sp, #8
   14b2c:	str	r0, [fp, #-8]
   14b30:	ldr	r3, [fp, #-8]
   14b34:	cmp	r3, #0
   14b38:	bne	14b40 <__assert_fail@plt+0x3e08>
   14b3c:	bl	1566c <__assert_fail@plt+0x4934>
   14b40:	ldr	r3, [fp, #-8]
   14b44:	mov	r0, r3
   14b48:	sub	sp, fp, #4
   14b4c:	pop	{fp, pc}
   14b50:	push	{fp, lr}
   14b54:	add	fp, sp, #4
   14b58:	sub	sp, sp, #8
   14b5c:	str	r0, [fp, #-8]
   14b60:	ldr	r0, [fp, #-8]
   14b64:	bl	1576c <__assert_fail@plt+0x4a34>
   14b68:	mov	r3, r0
   14b6c:	mov	r0, r3
   14b70:	bl	14b20 <__assert_fail@plt+0x3de8>
   14b74:	mov	r3, r0
   14b78:	mov	r0, r3
   14b7c:	sub	sp, fp, #4
   14b80:	pop	{fp, pc}
   14b84:	push	{fp, lr}
   14b88:	add	fp, sp, #4
   14b8c:	sub	sp, sp, #8
   14b90:	str	r0, [fp, #-8]
   14b94:	ldr	r0, [fp, #-8]
   14b98:	bl	15d88 <__assert_fail@plt+0x5050>
   14b9c:	mov	r3, r0
   14ba0:	mov	r0, r3
   14ba4:	bl	14b20 <__assert_fail@plt+0x3de8>
   14ba8:	mov	r3, r0
   14bac:	mov	r0, r3
   14bb0:	sub	sp, fp, #4
   14bb4:	pop	{fp, pc}
   14bb8:	push	{fp, lr}
   14bbc:	add	fp, sp, #4
   14bc0:	sub	sp, sp, #8
   14bc4:	str	r0, [fp, #-8]
   14bc8:	ldr	r0, [fp, #-8]
   14bcc:	bl	14b50 <__assert_fail@plt+0x3e18>
   14bd0:	mov	r3, r0
   14bd4:	mov	r0, r3
   14bd8:	sub	sp, fp, #4
   14bdc:	pop	{fp, pc}
   14be0:	push	{fp, lr}
   14be4:	add	fp, sp, #4
   14be8:	sub	sp, sp, #16
   14bec:	str	r0, [fp, #-16]
   14bf0:	str	r1, [fp, #-20]	; 0xffffffec
   14bf4:	ldr	r1, [fp, #-20]	; 0xffffffec
   14bf8:	ldr	r0, [fp, #-16]
   14bfc:	bl	15814 <__assert_fail@plt+0x4adc>
   14c00:	str	r0, [fp, #-8]
   14c04:	ldr	r3, [fp, #-8]
   14c08:	cmp	r3, #0
   14c0c:	bne	14c2c <__assert_fail@plt+0x3ef4>
   14c10:	ldr	r3, [fp, #-16]
   14c14:	cmp	r3, #0
   14c18:	beq	14c28 <__assert_fail@plt+0x3ef0>
   14c1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c20:	cmp	r3, #0
   14c24:	beq	14c2c <__assert_fail@plt+0x3ef4>
   14c28:	bl	1566c <__assert_fail@plt+0x4934>
   14c2c:	ldr	r3, [fp, #-8]
   14c30:	mov	r0, r3
   14c34:	sub	sp, fp, #4
   14c38:	pop	{fp, pc}
   14c3c:	push	{fp, lr}
   14c40:	add	fp, sp, #4
   14c44:	sub	sp, sp, #8
   14c48:	str	r0, [fp, #-8]
   14c4c:	str	r1, [fp, #-12]
   14c50:	ldr	r1, [fp, #-12]
   14c54:	ldr	r0, [fp, #-8]
   14c58:	bl	15db4 <__assert_fail@plt+0x507c>
   14c5c:	mov	r3, r0
   14c60:	mov	r0, r3
   14c64:	bl	14b20 <__assert_fail@plt+0x3de8>
   14c68:	mov	r3, r0
   14c6c:	mov	r0, r3
   14c70:	sub	sp, fp, #4
   14c74:	pop	{fp, pc}
   14c78:	push	{fp, lr}
   14c7c:	add	fp, sp, #4
   14c80:	sub	sp, sp, #24
   14c84:	str	r0, [fp, #-16]
   14c88:	str	r1, [fp, #-20]	; 0xffffffec
   14c8c:	str	r2, [fp, #-24]	; 0xffffffe8
   14c90:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14c94:	ldr	r1, [fp, #-20]	; 0xffffffec
   14c98:	ldr	r0, [fp, #-16]
   14c9c:	bl	15fa8 <__assert_fail@plt+0x5270>
   14ca0:	str	r0, [fp, #-8]
   14ca4:	ldr	r3, [fp, #-8]
   14ca8:	cmp	r3, #0
   14cac:	bne	14cd8 <__assert_fail@plt+0x3fa0>
   14cb0:	ldr	r3, [fp, #-16]
   14cb4:	cmp	r3, #0
   14cb8:	beq	14cd4 <__assert_fail@plt+0x3f9c>
   14cbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14cc0:	cmp	r3, #0
   14cc4:	beq	14cd8 <__assert_fail@plt+0x3fa0>
   14cc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ccc:	cmp	r3, #0
   14cd0:	beq	14cd8 <__assert_fail@plt+0x3fa0>
   14cd4:	bl	1566c <__assert_fail@plt+0x4934>
   14cd8:	ldr	r3, [fp, #-8]
   14cdc:	mov	r0, r3
   14ce0:	sub	sp, fp, #4
   14ce4:	pop	{fp, pc}
   14ce8:	push	{fp, lr}
   14cec:	add	fp, sp, #4
   14cf0:	sub	sp, sp, #16
   14cf4:	str	r0, [fp, #-8]
   14cf8:	str	r1, [fp, #-12]
   14cfc:	str	r2, [fp, #-16]
   14d00:	ldr	r2, [fp, #-16]
   14d04:	ldr	r1, [fp, #-12]
   14d08:	ldr	r0, [fp, #-8]
   14d0c:	bl	15e3c <__assert_fail@plt+0x5104>
   14d10:	mov	r3, r0
   14d14:	mov	r0, r3
   14d18:	bl	14b20 <__assert_fail@plt+0x3de8>
   14d1c:	mov	r3, r0
   14d20:	mov	r0, r3
   14d24:	sub	sp, fp, #4
   14d28:	pop	{fp, pc}
   14d2c:	push	{fp, lr}
   14d30:	add	fp, sp, #4
   14d34:	sub	sp, sp, #8
   14d38:	str	r0, [fp, #-8]
   14d3c:	str	r1, [fp, #-12]
   14d40:	ldr	r2, [fp, #-12]
   14d44:	ldr	r1, [fp, #-8]
   14d48:	mov	r0, #0
   14d4c:	bl	14c78 <__assert_fail@plt+0x3f40>
   14d50:	mov	r3, r0
   14d54:	mov	r0, r3
   14d58:	sub	sp, fp, #4
   14d5c:	pop	{fp, pc}
   14d60:	push	{fp, lr}
   14d64:	add	fp, sp, #4
   14d68:	sub	sp, sp, #8
   14d6c:	str	r0, [fp, #-8]
   14d70:	str	r1, [fp, #-12]
   14d74:	ldr	r2, [fp, #-12]
   14d78:	ldr	r1, [fp, #-8]
   14d7c:	mov	r0, #0
   14d80:	bl	14ce8 <__assert_fail@plt+0x3fb0>
   14d84:	mov	r3, r0
   14d88:	mov	r0, r3
   14d8c:	sub	sp, fp, #4
   14d90:	pop	{fp, pc}
   14d94:	push	{fp, lr}
   14d98:	add	fp, sp, #4
   14d9c:	sub	sp, sp, #8
   14da0:	str	r0, [fp, #-8]
   14da4:	str	r1, [fp, #-12]
   14da8:	mov	r2, #1
   14dac:	ldr	r1, [fp, #-12]
   14db0:	ldr	r0, [fp, #-8]
   14db4:	bl	14dc8 <__assert_fail@plt+0x4090>
   14db8:	mov	r3, r0
   14dbc:	mov	r0, r3
   14dc0:	sub	sp, fp, #4
   14dc4:	pop	{fp, pc}
   14dc8:	push	{fp, lr}
   14dcc:	add	fp, sp, #4
   14dd0:	sub	sp, sp, #24
   14dd4:	str	r0, [fp, #-16]
   14dd8:	str	r1, [fp, #-20]	; 0xffffffec
   14ddc:	str	r2, [fp, #-24]	; 0xffffffe8
   14de0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14de4:	ldr	r3, [r3]
   14de8:	str	r3, [fp, #-8]
   14dec:	ldr	r3, [fp, #-16]
   14df0:	cmp	r3, #0
   14df4:	bne	14e40 <__assert_fail@plt+0x4108>
   14df8:	ldr	r3, [fp, #-8]
   14dfc:	cmp	r3, #0
   14e00:	bne	14ea4 <__assert_fail@plt+0x416c>
   14e04:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14e08:	mov	r0, #64	; 0x40
   14e0c:	bl	16750 <__assert_fail@plt+0x5a18>
   14e10:	mov	r3, r0
   14e14:	str	r3, [fp, #-8]
   14e18:	ldr	r3, [fp, #-8]
   14e1c:	cmp	r3, #0
   14e20:	moveq	r3, #1
   14e24:	movne	r3, #0
   14e28:	uxtb	r3, r3
   14e2c:	mov	r2, r3
   14e30:	ldr	r3, [fp, #-8]
   14e34:	add	r3, r2, r3
   14e38:	str	r3, [fp, #-8]
   14e3c:	b	14ea4 <__assert_fail@plt+0x416c>
   14e40:	ldr	r3, [fp, #-8]
   14e44:	lsr	r3, r3, #1
   14e48:	add	r3, r3, #1
   14e4c:	mvn	r2, r3
   14e50:	ldr	r3, [fp, #-8]
   14e54:	cmp	r2, r3
   14e58:	bcs	14e7c <__assert_fail@plt+0x4144>
   14e5c:	ldr	r3, [fp, #-8]
   14e60:	lsr	r2, r3, #1
   14e64:	ldr	r3, [fp, #-8]
   14e68:	add	r3, r2, r3
   14e6c:	add	r3, r3, #1
   14e70:	str	r3, [fp, #-8]
   14e74:	mov	r3, #1
   14e78:	b	14e98 <__assert_fail@plt+0x4160>
   14e7c:	ldr	r3, [fp, #-8]
   14e80:	lsr	r2, r3, #1
   14e84:	ldr	r3, [fp, #-8]
   14e88:	add	r3, r2, r3
   14e8c:	add	r3, r3, #1
   14e90:	str	r3, [fp, #-8]
   14e94:	mov	r3, #0
   14e98:	cmp	r3, #0
   14e9c:	beq	14ea4 <__assert_fail@plt+0x416c>
   14ea0:	bl	1566c <__assert_fail@plt+0x4934>
   14ea4:	ldr	r3, [fp, #-8]
   14ea8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14eac:	mov	r1, r3
   14eb0:	ldr	r0, [fp, #-16]
   14eb4:	bl	14c78 <__assert_fail@plt+0x3f40>
   14eb8:	str	r0, [fp, #-16]
   14ebc:	ldr	r2, [fp, #-8]
   14ec0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ec4:	str	r2, [r3]
   14ec8:	ldr	r3, [fp, #-16]
   14ecc:	mov	r0, r3
   14ed0:	sub	sp, fp, #4
   14ed4:	pop	{fp, pc}
   14ed8:	push	{fp, lr}
   14edc:	add	fp, sp, #4
   14ee0:	sub	sp, sp, #32
   14ee4:	str	r0, [fp, #-24]	; 0xffffffe8
   14ee8:	str	r1, [fp, #-28]	; 0xffffffe4
   14eec:	str	r2, [fp, #-32]	; 0xffffffe0
   14ef0:	str	r3, [fp, #-36]	; 0xffffffdc
   14ef4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14ef8:	ldr	r3, [r3]
   14efc:	str	r3, [fp, #-8]
   14f00:	ldr	r3, [fp, #-8]
   14f04:	asr	r3, r3, #1
   14f08:	cmp	r3, #0
   14f0c:	bge	14f34 <__assert_fail@plt+0x41fc>
   14f10:	ldr	r3, [fp, #-8]
   14f14:	asr	r3, r3, #1
   14f18:	rsb	r2, r3, #-2147483648	; 0x80000000
   14f1c:	ldr	r3, [fp, #-8]
   14f20:	cmp	r2, r3
   14f24:	movgt	r3, #1
   14f28:	movle	r3, #0
   14f2c:	uxtb	r3, r3
   14f30:	b	14f88 <__assert_fail@plt+0x4250>
   14f34:	ldr	r3, [fp, #-8]
   14f38:	cmp	r3, #0
   14f3c:	bge	14f64 <__assert_fail@plt+0x422c>
   14f40:	ldr	r3, [fp, #-8]
   14f44:	asr	r2, r3, #1
   14f48:	ldr	r3, [fp, #-8]
   14f4c:	rsb	r3, r3, #-2147483648	; 0x80000000
   14f50:	cmp	r2, r3
   14f54:	movlt	r3, #1
   14f58:	movge	r3, #0
   14f5c:	uxtb	r3, r3
   14f60:	b	14f88 <__assert_fail@plt+0x4250>
   14f64:	ldr	r3, [fp, #-8]
   14f68:	asr	r2, r3, #1
   14f6c:	mvn	r3, #-2147483648	; 0x80000000
   14f70:	sub	r3, r3, r2
   14f74:	ldr	r2, [fp, #-8]
   14f78:	cmp	r3, r2
   14f7c:	movlt	r3, #1
   14f80:	movge	r3, #0
   14f84:	uxtb	r3, r3
   14f88:	cmp	r3, #0
   14f8c:	beq	14fb0 <__assert_fail@plt+0x4278>
   14f90:	ldr	r3, [fp, #-8]
   14f94:	asr	r3, r3, #1
   14f98:	mov	r2, r3
   14f9c:	ldr	r3, [fp, #-8]
   14fa0:	add	r3, r2, r3
   14fa4:	str	r3, [fp, #-16]
   14fa8:	mov	r3, #1
   14fac:	b	14fcc <__assert_fail@plt+0x4294>
   14fb0:	ldr	r3, [fp, #-8]
   14fb4:	asr	r3, r3, #1
   14fb8:	mov	r2, r3
   14fbc:	ldr	r3, [fp, #-8]
   14fc0:	add	r3, r2, r3
   14fc4:	str	r3, [fp, #-16]
   14fc8:	mov	r3, #0
   14fcc:	cmp	r3, #0
   14fd0:	beq	14fdc <__assert_fail@plt+0x42a4>
   14fd4:	mvn	r3, #-2147483648	; 0x80000000
   14fd8:	str	r3, [fp, #-16]
   14fdc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14fe0:	cmp	r3, #0
   14fe4:	blt	15000 <__assert_fail@plt+0x42c8>
   14fe8:	ldr	r3, [fp, #-16]
   14fec:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14ff0:	cmp	r2, r3
   14ff4:	bge	15000 <__assert_fail@plt+0x42c8>
   14ff8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14ffc:	str	r3, [fp, #-16]
   15000:	ldr	r3, [fp, #4]
   15004:	cmp	r3, #0
   15008:	bge	15098 <__assert_fail@plt+0x4360>
   1500c:	ldr	r3, [fp, #-16]
   15010:	cmp	r3, #0
   15014:	bge	15044 <__assert_fail@plt+0x430c>
   15018:	ldr	r1, [fp, #4]
   1501c:	mvn	r0, #-2147483648	; 0x80000000
   15020:	bl	1695c <__assert_fail@plt+0x5c24>
   15024:	mov	r3, r0
   15028:	mov	r2, r3
   1502c:	ldr	r3, [fp, #-16]
   15030:	cmp	r2, r3
   15034:	movgt	r3, #1
   15038:	movle	r3, #0
   1503c:	uxtb	r3, r3
   15040:	b	15138 <__assert_fail@plt+0x4400>
   15044:	ldr	r3, [fp, #4]
   15048:	cmn	r3, #1
   1504c:	bne	1506c <__assert_fail@plt+0x4334>
   15050:	ldr	r3, [fp, #-16]
   15054:	add	r3, r3, #-2147483648	; 0x80000000
   15058:	cmp	r3, #0
   1505c:	movgt	r3, #1
   15060:	movle	r3, #0
   15064:	uxtb	r3, r3
   15068:	b	15138 <__assert_fail@plt+0x4400>
   1506c:	ldr	r1, [fp, #4]
   15070:	mov	r0, #-2147483648	; 0x80000000
   15074:	bl	1695c <__assert_fail@plt+0x5c24>
   15078:	mov	r3, r0
   1507c:	mov	r2, r3
   15080:	ldr	r3, [fp, #-16]
   15084:	cmp	r2, r3
   15088:	movlt	r3, #1
   1508c:	movge	r3, #0
   15090:	uxtb	r3, r3
   15094:	b	15138 <__assert_fail@plt+0x4400>
   15098:	ldr	r3, [fp, #4]
   1509c:	cmp	r3, #0
   150a0:	beq	15134 <__assert_fail@plt+0x43fc>
   150a4:	ldr	r3, [fp, #-16]
   150a8:	cmp	r3, #0
   150ac:	bge	15108 <__assert_fail@plt+0x43d0>
   150b0:	ldr	r3, [fp, #-16]
   150b4:	cmn	r3, #1
   150b8:	bne	150d8 <__assert_fail@plt+0x43a0>
   150bc:	ldr	r3, [fp, #4]
   150c0:	add	r3, r3, #-2147483648	; 0x80000000
   150c4:	cmp	r3, #0
   150c8:	movgt	r3, #1
   150cc:	movle	r3, #0
   150d0:	uxtb	r3, r3
   150d4:	b	15138 <__assert_fail@plt+0x4400>
   150d8:	ldr	r3, [fp, #-16]
   150dc:	mov	r1, r3
   150e0:	mov	r0, #-2147483648	; 0x80000000
   150e4:	bl	1695c <__assert_fail@plt+0x5c24>
   150e8:	mov	r3, r0
   150ec:	mov	r2, r3
   150f0:	ldr	r3, [fp, #4]
   150f4:	cmp	r2, r3
   150f8:	movlt	r3, #1
   150fc:	movge	r3, #0
   15100:	uxtb	r3, r3
   15104:	b	15138 <__assert_fail@plt+0x4400>
   15108:	ldr	r1, [fp, #4]
   1510c:	mvn	r0, #-2147483648	; 0x80000000
   15110:	bl	1695c <__assert_fail@plt+0x5c24>
   15114:	mov	r3, r0
   15118:	mov	r2, r3
   1511c:	ldr	r3, [fp, #-16]
   15120:	cmp	r2, r3
   15124:	movlt	r3, #1
   15128:	movge	r3, #0
   1512c:	uxtb	r3, r3
   15130:	b	15138 <__assert_fail@plt+0x4400>
   15134:	mov	r3, #0
   15138:	cmp	r3, #0
   1513c:	beq	1515c <__assert_fail@plt+0x4424>
   15140:	ldr	r3, [fp, #-16]
   15144:	mov	r2, r3
   15148:	ldr	r3, [fp, #4]
   1514c:	mul	r3, r3, r2
   15150:	str	r3, [fp, #-20]	; 0xffffffec
   15154:	mov	r3, #1
   15158:	b	15174 <__assert_fail@plt+0x443c>
   1515c:	ldr	r3, [fp, #-16]
   15160:	mov	r2, r3
   15164:	ldr	r3, [fp, #4]
   15168:	mul	r3, r3, r2
   1516c:	str	r3, [fp, #-20]	; 0xffffffec
   15170:	mov	r3, #0
   15174:	cmp	r3, #0
   15178:	beq	15184 <__assert_fail@plt+0x444c>
   1517c:	mvn	r3, #-2147483648	; 0x80000000
   15180:	b	1519c <__assert_fail@plt+0x4464>
   15184:	ldr	r3, [fp, #-20]	; 0xffffffec
   15188:	cmp	r3, #63	; 0x3f
   1518c:	bgt	15198 <__assert_fail@plt+0x4460>
   15190:	mov	r3, #64	; 0x40
   15194:	b	1519c <__assert_fail@plt+0x4464>
   15198:	mov	r3, #0
   1519c:	str	r3, [fp, #-12]
   151a0:	ldr	r3, [fp, #-12]
   151a4:	cmp	r3, #0
   151a8:	beq	151e4 <__assert_fail@plt+0x44ac>
   151ac:	ldr	r1, [fp, #4]
   151b0:	ldr	r0, [fp, #-12]
   151b4:	bl	1695c <__assert_fail@plt+0x5c24>
   151b8:	mov	r3, r0
   151bc:	str	r3, [fp, #-16]
   151c0:	ldr	r3, [fp, #-12]
   151c4:	ldr	r1, [fp, #4]
   151c8:	mov	r0, r3
   151cc:	bl	16b7c <__assert_fail@plt+0x5e44>
   151d0:	mov	r3, r1
   151d4:	mov	r2, r3
   151d8:	ldr	r3, [fp, #-12]
   151dc:	sub	r3, r3, r2
   151e0:	str	r3, [fp, #-20]	; 0xffffffec
   151e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   151e8:	cmp	r3, #0
   151ec:	bne	151fc <__assert_fail@plt+0x44c4>
   151f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   151f4:	mov	r2, #0
   151f8:	str	r2, [r3]
   151fc:	ldr	r2, [fp, #-16]
   15200:	ldr	r3, [fp, #-8]
   15204:	sub	r2, r2, r3
   15208:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1520c:	cmp	r2, r3
   15210:	bge	15448 <__assert_fail@plt+0x4710>
   15214:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15218:	cmp	r3, #0
   1521c:	bge	15240 <__assert_fail@plt+0x4508>
   15220:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15224:	rsb	r2, r3, #-2147483648	; 0x80000000
   15228:	ldr	r3, [fp, #-8]
   1522c:	cmp	r2, r3
   15230:	movgt	r3, #1
   15234:	movle	r3, #0
   15238:	uxtb	r3, r3
   1523c:	b	1528c <__assert_fail@plt+0x4554>
   15240:	ldr	r3, [fp, #-8]
   15244:	cmp	r3, #0
   15248:	bge	1526c <__assert_fail@plt+0x4534>
   1524c:	ldr	r3, [fp, #-8]
   15250:	rsb	r2, r3, #-2147483648	; 0x80000000
   15254:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15258:	cmp	r2, r3
   1525c:	movgt	r3, #1
   15260:	movle	r3, #0
   15264:	uxtb	r3, r3
   15268:	b	1528c <__assert_fail@plt+0x4554>
   1526c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15270:	mvn	r3, #-2147483648	; 0x80000000
   15274:	sub	r3, r3, r2
   15278:	ldr	r2, [fp, #-8]
   1527c:	cmp	r3, r2
   15280:	movlt	r3, #1
   15284:	movge	r3, #0
   15288:	uxtb	r3, r3
   1528c:	cmp	r3, #0
   15290:	beq	152a8 <__assert_fail@plt+0x4570>
   15294:	ldr	r2, [fp, #-8]
   15298:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1529c:	add	r3, r2, r3
   152a0:	str	r3, [fp, #-16]
   152a4:	b	15444 <__assert_fail@plt+0x470c>
   152a8:	ldr	r2, [fp, #-8]
   152ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   152b0:	add	r3, r2, r3
   152b4:	str	r3, [fp, #-16]
   152b8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   152bc:	cmp	r3, #0
   152c0:	blt	152d4 <__assert_fail@plt+0x459c>
   152c4:	ldr	r3, [fp, #-16]
   152c8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   152cc:	cmp	r2, r3
   152d0:	blt	15444 <__assert_fail@plt+0x470c>
   152d4:	ldr	r3, [fp, #4]
   152d8:	cmp	r3, #0
   152dc:	bge	1536c <__assert_fail@plt+0x4634>
   152e0:	ldr	r3, [fp, #-16]
   152e4:	cmp	r3, #0
   152e8:	bge	15318 <__assert_fail@plt+0x45e0>
   152ec:	ldr	r1, [fp, #4]
   152f0:	mvn	r0, #-2147483648	; 0x80000000
   152f4:	bl	1695c <__assert_fail@plt+0x5c24>
   152f8:	mov	r3, r0
   152fc:	mov	r2, r3
   15300:	ldr	r3, [fp, #-16]
   15304:	cmp	r2, r3
   15308:	movgt	r3, #1
   1530c:	movle	r3, #0
   15310:	uxtb	r3, r3
   15314:	b	1540c <__assert_fail@plt+0x46d4>
   15318:	ldr	r3, [fp, #4]
   1531c:	cmn	r3, #1
   15320:	bne	15340 <__assert_fail@plt+0x4608>
   15324:	ldr	r3, [fp, #-16]
   15328:	add	r3, r3, #-2147483648	; 0x80000000
   1532c:	cmp	r3, #0
   15330:	movgt	r3, #1
   15334:	movle	r3, #0
   15338:	uxtb	r3, r3
   1533c:	b	1540c <__assert_fail@plt+0x46d4>
   15340:	ldr	r1, [fp, #4]
   15344:	mov	r0, #-2147483648	; 0x80000000
   15348:	bl	1695c <__assert_fail@plt+0x5c24>
   1534c:	mov	r3, r0
   15350:	mov	r2, r3
   15354:	ldr	r3, [fp, #-16]
   15358:	cmp	r2, r3
   1535c:	movlt	r3, #1
   15360:	movge	r3, #0
   15364:	uxtb	r3, r3
   15368:	b	1540c <__assert_fail@plt+0x46d4>
   1536c:	ldr	r3, [fp, #4]
   15370:	cmp	r3, #0
   15374:	beq	15408 <__assert_fail@plt+0x46d0>
   15378:	ldr	r3, [fp, #-16]
   1537c:	cmp	r3, #0
   15380:	bge	153dc <__assert_fail@plt+0x46a4>
   15384:	ldr	r3, [fp, #-16]
   15388:	cmn	r3, #1
   1538c:	bne	153ac <__assert_fail@plt+0x4674>
   15390:	ldr	r3, [fp, #4]
   15394:	add	r3, r3, #-2147483648	; 0x80000000
   15398:	cmp	r3, #0
   1539c:	movgt	r3, #1
   153a0:	movle	r3, #0
   153a4:	uxtb	r3, r3
   153a8:	b	1540c <__assert_fail@plt+0x46d4>
   153ac:	ldr	r3, [fp, #-16]
   153b0:	mov	r1, r3
   153b4:	mov	r0, #-2147483648	; 0x80000000
   153b8:	bl	1695c <__assert_fail@plt+0x5c24>
   153bc:	mov	r3, r0
   153c0:	mov	r2, r3
   153c4:	ldr	r3, [fp, #4]
   153c8:	cmp	r2, r3
   153cc:	movlt	r3, #1
   153d0:	movge	r3, #0
   153d4:	uxtb	r3, r3
   153d8:	b	1540c <__assert_fail@plt+0x46d4>
   153dc:	ldr	r1, [fp, #4]
   153e0:	mvn	r0, #-2147483648	; 0x80000000
   153e4:	bl	1695c <__assert_fail@plt+0x5c24>
   153e8:	mov	r3, r0
   153ec:	mov	r2, r3
   153f0:	ldr	r3, [fp, #-16]
   153f4:	cmp	r2, r3
   153f8:	movlt	r3, #1
   153fc:	movge	r3, #0
   15400:	uxtb	r3, r3
   15404:	b	1540c <__assert_fail@plt+0x46d4>
   15408:	mov	r3, #0
   1540c:	cmp	r3, #0
   15410:	beq	1542c <__assert_fail@plt+0x46f4>
   15414:	ldr	r3, [fp, #-16]
   15418:	mov	r2, r3
   1541c:	ldr	r3, [fp, #4]
   15420:	mul	r3, r3, r2
   15424:	str	r3, [fp, #-20]	; 0xffffffec
   15428:	b	15444 <__assert_fail@plt+0x470c>
   1542c:	ldr	r3, [fp, #-16]
   15430:	mov	r2, r3
   15434:	ldr	r3, [fp, #4]
   15438:	mul	r3, r3, r2
   1543c:	str	r3, [fp, #-20]	; 0xffffffec
   15440:	b	15448 <__assert_fail@plt+0x4710>
   15444:	bl	1566c <__assert_fail@plt+0x4934>
   15448:	ldr	r3, [fp, #-20]	; 0xffffffec
   1544c:	mov	r1, r3
   15450:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15454:	bl	14be0 <__assert_fail@plt+0x3ea8>
   15458:	str	r0, [fp, #-24]	; 0xffffffe8
   1545c:	ldr	r2, [fp, #-16]
   15460:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15464:	str	r2, [r3]
   15468:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1546c:	mov	r0, r3
   15470:	sub	sp, fp, #4
   15474:	pop	{fp, pc}
   15478:	push	{fp, lr}
   1547c:	add	fp, sp, #4
   15480:	sub	sp, sp, #8
   15484:	str	r0, [fp, #-8]
   15488:	mov	r1, #1
   1548c:	ldr	r0, [fp, #-8]
   15490:	bl	154d0 <__assert_fail@plt+0x4798>
   15494:	mov	r3, r0
   15498:	mov	r0, r3
   1549c:	sub	sp, fp, #4
   154a0:	pop	{fp, pc}
   154a4:	push	{fp, lr}
   154a8:	add	fp, sp, #4
   154ac:	sub	sp, sp, #8
   154b0:	str	r0, [fp, #-8]
   154b4:	mov	r1, #1
   154b8:	ldr	r0, [fp, #-8]
   154bc:	bl	1550c <__assert_fail@plt+0x47d4>
   154c0:	mov	r3, r0
   154c4:	mov	r0, r3
   154c8:	sub	sp, fp, #4
   154cc:	pop	{fp, pc}
   154d0:	push	{fp, lr}
   154d4:	add	fp, sp, #4
   154d8:	sub	sp, sp, #8
   154dc:	str	r0, [fp, #-8]
   154e0:	str	r1, [fp, #-12]
   154e4:	ldr	r1, [fp, #-12]
   154e8:	ldr	r0, [fp, #-8]
   154ec:	bl	156a8 <__assert_fail@plt+0x4970>
   154f0:	mov	r3, r0
   154f4:	mov	r0, r3
   154f8:	bl	14b20 <__assert_fail@plt+0x3de8>
   154fc:	mov	r3, r0
   15500:	mov	r0, r3
   15504:	sub	sp, fp, #4
   15508:	pop	{fp, pc}
   1550c:	push	{fp, lr}
   15510:	add	fp, sp, #4
   15514:	sub	sp, sp, #8
   15518:	str	r0, [fp, #-8]
   1551c:	str	r1, [fp, #-12]
   15520:	ldr	r1, [fp, #-12]
   15524:	ldr	r0, [fp, #-8]
   15528:	bl	15e04 <__assert_fail@plt+0x50cc>
   1552c:	mov	r3, r0
   15530:	mov	r0, r3
   15534:	bl	14b20 <__assert_fail@plt+0x3de8>
   15538:	mov	r3, r0
   1553c:	mov	r0, r3
   15540:	sub	sp, fp, #4
   15544:	pop	{fp, pc}
   15548:	push	{fp, lr}
   1554c:	add	fp, sp, #4
   15550:	sub	sp, sp, #8
   15554:	str	r0, [fp, #-8]
   15558:	str	r1, [fp, #-12]
   1555c:	ldr	r0, [fp, #-12]
   15560:	bl	14b50 <__assert_fail@plt+0x3e18>
   15564:	mov	r3, r0
   15568:	ldr	r2, [fp, #-12]
   1556c:	ldr	r1, [fp, #-8]
   15570:	mov	r0, r3
   15574:	bl	10b7c <memcpy@plt>
   15578:	mov	r3, r0
   1557c:	mov	r0, r3
   15580:	sub	sp, fp, #4
   15584:	pop	{fp, pc}
   15588:	push	{fp, lr}
   1558c:	add	fp, sp, #4
   15590:	sub	sp, sp, #8
   15594:	str	r0, [fp, #-8]
   15598:	str	r1, [fp, #-12]
   1559c:	ldr	r0, [fp, #-12]
   155a0:	bl	14b84 <__assert_fail@plt+0x3e4c>
   155a4:	mov	r3, r0
   155a8:	mov	r0, r3
   155ac:	ldr	r3, [fp, #-12]
   155b0:	mov	r2, r3
   155b4:	ldr	r1, [fp, #-8]
   155b8:	bl	10b7c <memcpy@plt>
   155bc:	mov	r3, r0
   155c0:	mov	r0, r3
   155c4:	sub	sp, fp, #4
   155c8:	pop	{fp, pc}
   155cc:	push	{fp, lr}
   155d0:	add	fp, sp, #4
   155d4:	sub	sp, sp, #16
   155d8:	str	r0, [fp, #-16]
   155dc:	str	r1, [fp, #-20]	; 0xffffffec
   155e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   155e4:	add	r3, r3, #1
   155e8:	mov	r0, r3
   155ec:	bl	14b84 <__assert_fail@plt+0x3e4c>
   155f0:	mov	r3, r0
   155f4:	str	r3, [fp, #-8]
   155f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   155fc:	ldr	r2, [fp, #-8]
   15600:	add	r3, r2, r3
   15604:	mov	r2, #0
   15608:	strb	r2, [r3]
   1560c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15610:	mov	r2, r3
   15614:	ldr	r1, [fp, #-16]
   15618:	ldr	r0, [fp, #-8]
   1561c:	bl	10b7c <memcpy@plt>
   15620:	mov	r3, r0
   15624:	mov	r0, r3
   15628:	sub	sp, fp, #4
   1562c:	pop	{fp, pc}
   15630:	push	{fp, lr}
   15634:	add	fp, sp, #4
   15638:	sub	sp, sp, #8
   1563c:	str	r0, [fp, #-8]
   15640:	ldr	r0, [fp, #-8]
   15644:	bl	10c84 <strlen@plt>
   15648:	mov	r3, r0
   1564c:	add	r3, r3, #1
   15650:	mov	r1, r3
   15654:	ldr	r0, [fp, #-8]
   15658:	bl	15548 <__assert_fail@plt+0x4810>
   1565c:	mov	r3, r0
   15660:	mov	r0, r3
   15664:	sub	sp, fp, #4
   15668:	pop	{fp, pc}
   1566c:	push	{r4, r5, fp, lr}
   15670:	add	fp, sp, #12
   15674:	ldr	r3, [pc, #32]	; 1569c <__assert_fail@plt+0x4964>
   15678:	ldr	r4, [r3]
   1567c:	ldr	r0, [pc, #28]	; 156a0 <__assert_fail@plt+0x4968>
   15680:	bl	10c78 <gettext@plt>
   15684:	mov	r3, r0
   15688:	ldr	r2, [pc, #20]	; 156a4 <__assert_fail@plt+0x496c>
   1568c:	mov	r1, #0
   15690:	mov	r0, r4
   15694:	bl	10c18 <error@plt>
   15698:	bl	10d20 <abort@plt>
   1569c:	ldrdeq	r8, [r2], -r4
   156a0:	andeq	r7, r1, r4, ror #14
   156a4:	andeq	r7, r1, r8, ror r7
   156a8:	push	{r4, r5, fp, lr}
   156ac:	add	fp, sp, #12
   156b0:	sub	sp, sp, #16
   156b4:	str	r0, [fp, #-24]	; 0xffffffe8
   156b8:	str	r1, [fp, #-28]	; 0xffffffe4
   156bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   156c0:	cmp	r3, #0
   156c4:	beq	156d4 <__assert_fail@plt+0x499c>
   156c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   156cc:	cmp	r3, #0
   156d0:	bne	156e4 <__assert_fail@plt+0x49ac>
   156d4:	mov	r3, #1
   156d8:	str	r3, [fp, #-28]	; 0xffffffe4
   156dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   156e0:	str	r3, [fp, #-24]	; 0xffffffe8
   156e4:	mov	r1, #0
   156e8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   156ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   156f0:	umull	r2, r3, r2, r3
   156f4:	mov	r4, r3
   156f8:	mov	r5, #0
   156fc:	cmp	r4, #0
   15700:	beq	15708 <__assert_fail@plt+0x49d0>
   15704:	mov	r1, #1
   15708:	cmp	r2, #0
   1570c:	bge	15714 <__assert_fail@plt+0x49dc>
   15710:	mov	r1, #1
   15714:	mov	r3, r2
   15718:	str	r3, [fp, #-20]	; 0xffffffec
   1571c:	mov	r3, r1
   15720:	and	r3, r3, #1
   15724:	uxtb	r3, r3
   15728:	cmp	r3, #0
   1572c:	beq	15748 <__assert_fail@plt+0x4a10>
   15730:	bl	10c9c <__errno_location@plt>
   15734:	mov	r2, r0
   15738:	mov	r3, #12
   1573c:	str	r3, [r2]
   15740:	mov	r3, #0
   15744:	b	15760 <__assert_fail@plt+0x4a28>
   15748:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1574c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15750:	bl	10b1c <calloc@plt>
   15754:	mov	r3, r0
   15758:	str	r3, [fp, #-16]
   1575c:	ldr	r3, [fp, #-16]
   15760:	mov	r0, r3
   15764:	sub	sp, fp, #12
   15768:	pop	{r4, r5, fp, pc}
   1576c:	push	{r4, r5, fp, lr}
   15770:	add	fp, sp, #12
   15774:	sub	sp, sp, #16
   15778:	str	r0, [fp, #-24]	; 0xffffffe8
   1577c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15780:	cmp	r3, #0
   15784:	bne	15790 <__assert_fail@plt+0x4a58>
   15788:	mov	r3, #1
   1578c:	str	r3, [fp, #-24]	; 0xffffffe8
   15790:	mov	r1, #0
   15794:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15798:	mov	r2, r3
   1579c:	mov	r3, #0
   157a0:	mov	r4, r3
   157a4:	mov	r5, #0
   157a8:	cmp	r4, #0
   157ac:	beq	157b4 <__assert_fail@plt+0x4a7c>
   157b0:	mov	r1, #1
   157b4:	cmp	r2, #0
   157b8:	bge	157c0 <__assert_fail@plt+0x4a88>
   157bc:	mov	r1, #1
   157c0:	mov	r3, r2
   157c4:	str	r3, [fp, #-20]	; 0xffffffec
   157c8:	mov	r3, r1
   157cc:	and	r3, r3, #1
   157d0:	uxtb	r3, r3
   157d4:	cmp	r3, #0
   157d8:	beq	157f4 <__assert_fail@plt+0x4abc>
   157dc:	bl	10c9c <__errno_location@plt>
   157e0:	mov	r2, r0
   157e4:	mov	r3, #12
   157e8:	str	r3, [r2]
   157ec:	mov	r3, #0
   157f0:	b	15808 <__assert_fail@plt+0x4ad0>
   157f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   157f8:	bl	10c30 <malloc@plt>
   157fc:	mov	r3, r0
   15800:	str	r3, [fp, #-16]
   15804:	ldr	r3, [fp, #-16]
   15808:	mov	r0, r3
   1580c:	sub	sp, fp, #12
   15810:	pop	{r4, r5, fp, pc}
   15814:	push	{r4, r5, fp, lr}
   15818:	add	fp, sp, #12
   1581c:	sub	sp, sp, #16
   15820:	str	r0, [fp, #-24]	; 0xffffffe8
   15824:	str	r1, [fp, #-28]	; 0xffffffe4
   15828:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1582c:	cmp	r3, #0
   15830:	bne	15844 <__assert_fail@plt+0x4b0c>
   15834:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15838:	bl	1576c <__assert_fail@plt+0x4a34>
   1583c:	mov	r3, r0
   15840:	b	158d8 <__assert_fail@plt+0x4ba0>
   15844:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15848:	cmp	r3, #0
   1584c:	bne	15860 <__assert_fail@plt+0x4b28>
   15850:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15854:	bl	15bf4 <__assert_fail@plt+0x4ebc>
   15858:	mov	r3, #0
   1585c:	b	158d8 <__assert_fail@plt+0x4ba0>
   15860:	mov	r1, #0
   15864:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15868:	mov	r2, r3
   1586c:	mov	r3, #0
   15870:	mov	r4, r3
   15874:	mov	r5, #0
   15878:	cmp	r4, #0
   1587c:	beq	15884 <__assert_fail@plt+0x4b4c>
   15880:	mov	r1, #1
   15884:	cmp	r2, #0
   15888:	bge	15890 <__assert_fail@plt+0x4b58>
   1588c:	mov	r1, #1
   15890:	mov	r3, r2
   15894:	str	r3, [fp, #-20]	; 0xffffffec
   15898:	mov	r3, r1
   1589c:	and	r3, r3, #1
   158a0:	uxtb	r3, r3
   158a4:	cmp	r3, #0
   158a8:	beq	158c4 <__assert_fail@plt+0x4b8c>
   158ac:	bl	10c9c <__errno_location@plt>
   158b0:	mov	r2, r0
   158b4:	mov	r3, #12
   158b8:	str	r3, [r2]
   158bc:	mov	r3, #0
   158c0:	b	158d8 <__assert_fail@plt+0x4ba0>
   158c4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   158c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   158cc:	bl	10bac <realloc@plt>
   158d0:	str	r0, [fp, #-16]
   158d4:	ldr	r3, [fp, #-16]
   158d8:	mov	r0, r3
   158dc:	sub	sp, fp, #12
   158e0:	pop	{r4, r5, fp, pc}
   158e4:	push	{r4, r5, fp, lr}
   158e8:	add	fp, sp, #12
   158ec:	sub	sp, sp, #16
   158f0:	str	r0, [fp, #-24]	; 0xffffffe8
   158f4:	str	r1, [fp, #-28]	; 0xffffffe4
   158f8:	ldr	r5, [fp, #-24]	; 0xffffffe8
   158fc:	ldr	r4, [fp, #-28]	; 0xffffffe4
   15900:	cmp	r5, r4
   15904:	bne	15910 <__assert_fail@plt+0x4bd8>
   15908:	mov	r3, #0
   1590c:	b	15970 <__assert_fail@plt+0x4c38>
   15910:	ldrb	r3, [r5]
   15914:	mov	r0, r3
   15918:	bl	164cc <__assert_fail@plt+0x5794>
   1591c:	mov	r3, r0
   15920:	strb	r3, [fp, #-13]
   15924:	ldrb	r3, [r4]
   15928:	mov	r0, r3
   1592c:	bl	164cc <__assert_fail@plt+0x5794>
   15930:	mov	r3, r0
   15934:	strb	r3, [fp, #-14]
   15938:	ldrb	r3, [fp, #-13]
   1593c:	cmp	r3, #0
   15940:	beq	15960 <__assert_fail@plt+0x4c28>
   15944:	add	r5, r5, #1
   15948:	add	r4, r4, #1
   1594c:	ldrb	r2, [fp, #-13]
   15950:	ldrb	r3, [fp, #-14]
   15954:	cmp	r2, r3
   15958:	beq	15910 <__assert_fail@plt+0x4bd8>
   1595c:	b	15964 <__assert_fail@plt+0x4c2c>
   15960:	nop			; (mov r0, r0)
   15964:	ldrb	r2, [fp, #-13]
   15968:	ldrb	r3, [fp, #-14]
   1596c:	sub	r3, r2, r3
   15970:	mov	r0, r3
   15974:	sub	sp, fp, #12
   15978:	pop	{r4, r5, fp, pc}
   1597c:	push	{fp, lr}
   15980:	add	fp, sp, #4
   15984:	sub	sp, sp, #16
   15988:	str	r0, [fp, #-16]
   1598c:	ldr	r0, [fp, #-16]
   15990:	bl	10bf4 <__fpending@plt>
   15994:	mov	r3, r0
   15998:	cmp	r3, #0
   1599c:	movne	r3, #1
   159a0:	moveq	r3, #0
   159a4:	strb	r3, [fp, #-5]
   159a8:	ldr	r0, [fp, #-16]
   159ac:	bl	10c00 <ferror_unlocked@plt>
   159b0:	mov	r3, r0
   159b4:	cmp	r3, #0
   159b8:	movne	r3, #1
   159bc:	moveq	r3, #0
   159c0:	strb	r3, [fp, #-6]
   159c4:	ldr	r0, [fp, #-16]
   159c8:	bl	15a54 <__assert_fail@plt+0x4d1c>
   159cc:	mov	r3, r0
   159d0:	cmp	r3, #0
   159d4:	movne	r3, #1
   159d8:	moveq	r3, #0
   159dc:	strb	r3, [fp, #-7]
   159e0:	ldrb	r3, [fp, #-6]
   159e4:	cmp	r3, #0
   159e8:	bne	15a18 <__assert_fail@plt+0x4ce0>
   159ec:	ldrb	r3, [fp, #-7]
   159f0:	cmp	r3, #0
   159f4:	beq	15a44 <__assert_fail@plt+0x4d0c>
   159f8:	ldrb	r3, [fp, #-5]
   159fc:	cmp	r3, #0
   15a00:	bne	15a18 <__assert_fail@plt+0x4ce0>
   15a04:	bl	10c9c <__errno_location@plt>
   15a08:	mov	r3, r0
   15a0c:	ldr	r3, [r3]
   15a10:	cmp	r3, #9
   15a14:	beq	15a44 <__assert_fail@plt+0x4d0c>
   15a18:	ldrb	r3, [fp, #-7]
   15a1c:	eor	r3, r3, #1
   15a20:	uxtb	r3, r3
   15a24:	cmp	r3, #0
   15a28:	beq	15a3c <__assert_fail@plt+0x4d04>
   15a2c:	bl	10c9c <__errno_location@plt>
   15a30:	mov	r2, r0
   15a34:	mov	r3, #0
   15a38:	str	r3, [r2]
   15a3c:	mvn	r3, #0
   15a40:	b	15a48 <__assert_fail@plt+0x4d10>
   15a44:	mov	r3, #0
   15a48:	mov	r0, r3
   15a4c:	sub	sp, fp, #4
   15a50:	pop	{fp, pc}
   15a54:	push	{fp, lr}
   15a58:	add	fp, sp, #4
   15a5c:	sub	sp, sp, #32
   15a60:	str	r0, [fp, #-24]	; 0xffffffe8
   15a64:	mov	r3, #0
   15a68:	str	r3, [fp, #-8]
   15a6c:	mov	r3, #0
   15a70:	str	r3, [fp, #-12]
   15a74:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15a78:	bl	10cc0 <fileno@plt>
   15a7c:	str	r0, [fp, #-16]
   15a80:	ldr	r3, [fp, #-16]
   15a84:	cmp	r3, #0
   15a88:	bge	15a9c <__assert_fail@plt+0x4d64>
   15a8c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15a90:	bl	10ccc <fclose@plt>
   15a94:	mov	r3, r0
   15a98:	b	15b40 <__assert_fail@plt+0x4e08>
   15a9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15aa0:	bl	10c48 <__freading@plt>
   15aa4:	mov	r3, r0
   15aa8:	cmp	r3, #0
   15aac:	beq	15ae8 <__assert_fail@plt+0x4db0>
   15ab0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15ab4:	bl	10cc0 <fileno@plt>
   15ab8:	mov	r1, r0
   15abc:	mov	r3, #1
   15ac0:	str	r3, [sp]
   15ac4:	mov	r2, #0
   15ac8:	mov	r3, #0
   15acc:	mov	r0, r1
   15ad0:	bl	10bdc <lseek64@plt>
   15ad4:	mvn	r2, #0
   15ad8:	mvn	r3, #0
   15adc:	cmp	r1, r3
   15ae0:	cmpeq	r0, r2
   15ae4:	beq	15b0c <__assert_fail@plt+0x4dd4>
   15ae8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15aec:	bl	15b94 <__assert_fail@plt+0x4e5c>
   15af0:	mov	r3, r0
   15af4:	cmp	r3, #0
   15af8:	beq	15b0c <__assert_fail@plt+0x4dd4>
   15afc:	bl	10c9c <__errno_location@plt>
   15b00:	mov	r3, r0
   15b04:	ldr	r3, [r3]
   15b08:	str	r3, [fp, #-8]
   15b0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15b10:	bl	10ccc <fclose@plt>
   15b14:	str	r0, [fp, #-12]
   15b18:	ldr	r3, [fp, #-8]
   15b1c:	cmp	r3, #0
   15b20:	beq	15b3c <__assert_fail@plt+0x4e04>
   15b24:	bl	10c9c <__errno_location@plt>
   15b28:	mov	r2, r0
   15b2c:	ldr	r3, [fp, #-8]
   15b30:	str	r3, [r2]
   15b34:	mvn	r3, #0
   15b38:	str	r3, [fp, #-12]
   15b3c:	ldr	r3, [fp, #-12]
   15b40:	mov	r0, r3
   15b44:	sub	sp, fp, #4
   15b48:	pop	{fp, pc}
   15b4c:	push	{fp, lr}
   15b50:	add	fp, sp, #4
   15b54:	sub	sp, sp, #16
   15b58:	str	r0, [fp, #-8]
   15b5c:	ldr	r3, [fp, #-8]
   15b60:	ldr	r3, [r3]
   15b64:	and	r3, r3, #256	; 0x100
   15b68:	cmp	r3, #0
   15b6c:	beq	15b88 <__assert_fail@plt+0x4e50>
   15b70:	mov	r3, #1
   15b74:	str	r3, [sp]
   15b78:	mov	r2, #0
   15b7c:	mov	r3, #0
   15b80:	ldr	r0, [fp, #-8]
   15b84:	bl	15c80 <__assert_fail@plt+0x4f48>
   15b88:	nop			; (mov r0, r0)
   15b8c:	sub	sp, fp, #4
   15b90:	pop	{fp, pc}
   15b94:	push	{fp, lr}
   15b98:	add	fp, sp, #4
   15b9c:	sub	sp, sp, #8
   15ba0:	str	r0, [fp, #-8]
   15ba4:	ldr	r3, [fp, #-8]
   15ba8:	cmp	r3, #0
   15bac:	beq	15bc4 <__assert_fail@plt+0x4e8c>
   15bb0:	ldr	r0, [fp, #-8]
   15bb4:	bl	10c48 <__freading@plt>
   15bb8:	mov	r3, r0
   15bbc:	cmp	r3, #0
   15bc0:	bne	15bd4 <__assert_fail@plt+0x4e9c>
   15bc4:	ldr	r0, [fp, #-8]
   15bc8:	bl	10b58 <fflush@plt>
   15bcc:	mov	r3, r0
   15bd0:	b	15be8 <__assert_fail@plt+0x4eb0>
   15bd4:	ldr	r0, [fp, #-8]
   15bd8:	bl	15b4c <__assert_fail@plt+0x4e14>
   15bdc:	ldr	r0, [fp, #-8]
   15be0:	bl	10b58 <fflush@plt>
   15be4:	mov	r3, r0
   15be8:	mov	r0, r3
   15bec:	sub	sp, fp, #4
   15bf0:	pop	{fp, pc}
   15bf4:	push	{r4, fp, lr}
   15bf8:	add	fp, sp, #8
   15bfc:	sub	sp, sp, #20
   15c00:	str	r0, [fp, #-24]	; 0xffffffe8
   15c04:	bl	10c9c <__errno_location@plt>
   15c08:	mov	r3, r0
   15c0c:	ldr	r3, [r3]
   15c10:	str	r3, [fp, #-20]	; 0xffffffec
   15c14:	bl	10c9c <__errno_location@plt>
   15c18:	mov	r3, r0
   15c1c:	ldr	r3, [r3]
   15c20:	str	r3, [fp, #-16]
   15c24:	bl	10c9c <__errno_location@plt>
   15c28:	mov	r2, r0
   15c2c:	mov	r3, #0
   15c30:	str	r3, [r2]
   15c34:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15c38:	bl	10b64 <free@plt>
   15c3c:	bl	10c9c <__errno_location@plt>
   15c40:	mov	r4, r0
   15c44:	bl	10c9c <__errno_location@plt>
   15c48:	mov	r3, r0
   15c4c:	ldr	r3, [r3]
   15c50:	cmp	r3, #0
   15c54:	moveq	r3, #1
   15c58:	movne	r3, #0
   15c5c:	uxtb	r3, r3
   15c60:	lsl	r3, r3, #2
   15c64:	sub	r2, fp, #12
   15c68:	add	r3, r2, r3
   15c6c:	ldr	r3, [r3, #-8]
   15c70:	str	r3, [r4]
   15c74:	nop			; (mov r0, r0)
   15c78:	sub	sp, fp, #8
   15c7c:	pop	{r4, fp, pc}
   15c80:	push	{fp, lr}
   15c84:	add	fp, sp, #4
   15c88:	sub	sp, sp, #32
   15c8c:	str	r0, [fp, #-16]
   15c90:	strd	r2, [fp, #-28]	; 0xffffffe4
   15c94:	ldr	r3, [fp, #-16]
   15c98:	ldr	r2, [r3, #8]
   15c9c:	ldr	r3, [fp, #-16]
   15ca0:	ldr	r3, [r3, #4]
   15ca4:	cmp	r2, r3
   15ca8:	bne	15d40 <__assert_fail@plt+0x5008>
   15cac:	ldr	r3, [fp, #-16]
   15cb0:	ldr	r2, [r3, #20]
   15cb4:	ldr	r3, [fp, #-16]
   15cb8:	ldr	r3, [r3, #16]
   15cbc:	cmp	r2, r3
   15cc0:	bne	15d40 <__assert_fail@plt+0x5008>
   15cc4:	ldr	r3, [fp, #-16]
   15cc8:	ldr	r3, [r3, #36]	; 0x24
   15ccc:	cmp	r3, #0
   15cd0:	bne	15d40 <__assert_fail@plt+0x5008>
   15cd4:	ldr	r0, [fp, #-16]
   15cd8:	bl	10cc0 <fileno@plt>
   15cdc:	mov	r1, r0
   15ce0:	ldr	r3, [fp, #4]
   15ce4:	str	r3, [sp]
   15ce8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   15cec:	mov	r0, r1
   15cf0:	bl	10bdc <lseek64@plt>
   15cf4:	strd	r0, [fp, #-12]
   15cf8:	ldrd	r2, [fp, #-12]
   15cfc:	mvn	r0, #0
   15d00:	mvn	r1, #0
   15d04:	cmp	r3, r1
   15d08:	cmpeq	r2, r0
   15d0c:	bne	15d18 <__assert_fail@plt+0x4fe0>
   15d10:	mvn	r3, #0
   15d14:	b	15d58 <__assert_fail@plt+0x5020>
   15d18:	ldr	r3, [fp, #-16]
   15d1c:	ldr	r3, [r3]
   15d20:	bic	r2, r3, #16
   15d24:	ldr	r3, [fp, #-16]
   15d28:	str	r2, [r3]
   15d2c:	ldr	r1, [fp, #-16]
   15d30:	ldrd	r2, [fp, #-12]
   15d34:	strd	r2, [r1, #80]	; 0x50
   15d38:	mov	r3, #0
   15d3c:	b	15d58 <__assert_fail@plt+0x5020>
   15d40:	ldr	r3, [fp, #4]
   15d44:	str	r3, [sp]
   15d48:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   15d4c:	ldr	r0, [fp, #-16]
   15d50:	bl	10cd8 <fseeko64@plt>
   15d54:	mov	r3, r0
   15d58:	mov	r0, r3
   15d5c:	sub	sp, fp, #4
   15d60:	pop	{fp, pc}
   15d64:	push	{fp, lr}
   15d68:	add	fp, sp, #4
   15d6c:	bl	10c9c <__errno_location@plt>
   15d70:	mov	r2, r0
   15d74:	mov	r3, #12
   15d78:	str	r3, [r2]
   15d7c:	mov	r3, #0
   15d80:	mov	r0, r3
   15d84:	pop	{fp, pc}
   15d88:	push	{fp, lr}
   15d8c:	add	fp, sp, #4
   15d90:	sub	sp, sp, #8
   15d94:	str	r0, [fp, #-8]
   15d98:	ldr	r3, [fp, #-8]
   15d9c:	mov	r0, r3
   15da0:	bl	1576c <__assert_fail@plt+0x4a34>
   15da4:	mov	r3, r0
   15da8:	mov	r0, r3
   15dac:	sub	sp, fp, #4
   15db0:	pop	{fp, pc}
   15db4:	push	{fp, lr}
   15db8:	add	fp, sp, #4
   15dbc:	sub	sp, sp, #8
   15dc0:	str	r0, [fp, #-8]
   15dc4:	str	r1, [fp, #-12]
   15dc8:	ldr	r3, [fp, #-12]
   15dcc:	cmp	r3, #0
   15dd0:	moveq	r3, #1
   15dd4:	movne	r3, #0
   15dd8:	uxtb	r3, r3
   15ddc:	mov	r2, r3
   15de0:	ldr	r3, [fp, #-12]
   15de4:	orr	r3, r2, r3
   15de8:	mov	r1, r3
   15dec:	ldr	r0, [fp, #-8]
   15df0:	bl	15814 <__assert_fail@plt+0x4adc>
   15df4:	mov	r3, r0
   15df8:	mov	r0, r3
   15dfc:	sub	sp, fp, #4
   15e00:	pop	{fp, pc}
   15e04:	push	{fp, lr}
   15e08:	add	fp, sp, #4
   15e0c:	sub	sp, sp, #8
   15e10:	str	r0, [fp, #-8]
   15e14:	str	r1, [fp, #-12]
   15e18:	ldr	r3, [fp, #-8]
   15e1c:	ldr	r2, [fp, #-12]
   15e20:	mov	r1, r2
   15e24:	mov	r0, r3
   15e28:	bl	156a8 <__assert_fail@plt+0x4970>
   15e2c:	mov	r3, r0
   15e30:	mov	r0, r3
   15e34:	sub	sp, fp, #4
   15e38:	pop	{fp, pc}
   15e3c:	push	{fp, lr}
   15e40:	add	fp, sp, #4
   15e44:	sub	sp, sp, #16
   15e48:	str	r0, [fp, #-8]
   15e4c:	str	r1, [fp, #-12]
   15e50:	str	r2, [fp, #-16]
   15e54:	ldr	r3, [fp, #-12]
   15e58:	cmp	r3, #0
   15e5c:	beq	15e6c <__assert_fail@plt+0x5134>
   15e60:	ldr	r3, [fp, #-16]
   15e64:	cmp	r3, #0
   15e68:	bne	15e7c <__assert_fail@plt+0x5144>
   15e6c:	mov	r3, #1
   15e70:	str	r3, [fp, #-16]
   15e74:	ldr	r3, [fp, #-16]
   15e78:	str	r3, [fp, #-12]
   15e7c:	ldr	r3, [fp, #-12]
   15e80:	ldr	r2, [fp, #-16]
   15e84:	mov	r1, r3
   15e88:	ldr	r0, [fp, #-8]
   15e8c:	bl	15fa8 <__assert_fail@plt+0x5270>
   15e90:	mov	r3, r0
   15e94:	mov	r0, r3
   15e98:	sub	sp, fp, #4
   15e9c:	pop	{fp, pc}
   15ea0:	push	{fp, lr}
   15ea4:	add	fp, sp, #4
   15ea8:	sub	sp, sp, #8
   15eac:	mov	r0, #14
   15eb0:	bl	10cfc <nl_langinfo@plt>
   15eb4:	str	r0, [fp, #-8]
   15eb8:	ldr	r3, [fp, #-8]
   15ebc:	cmp	r3, #0
   15ec0:	bne	15ecc <__assert_fail@plt+0x5194>
   15ec4:	ldr	r3, [pc, #40]	; 15ef4 <__assert_fail@plt+0x51bc>
   15ec8:	str	r3, [fp, #-8]
   15ecc:	ldr	r3, [fp, #-8]
   15ed0:	ldrb	r3, [r3]
   15ed4:	cmp	r3, #0
   15ed8:	bne	15ee4 <__assert_fail@plt+0x51ac>
   15edc:	ldr	r3, [pc, #20]	; 15ef8 <__assert_fail@plt+0x51c0>
   15ee0:	str	r3, [fp, #-8]
   15ee4:	ldr	r3, [fp, #-8]
   15ee8:	mov	r0, r3
   15eec:	sub	sp, fp, #4
   15ef0:	pop	{fp, pc}
   15ef4:	andeq	r7, r1, ip, ror r7
   15ef8:	andeq	r7, r1, r0, lsl #15
   15efc:	push	{fp, lr}
   15f00:	add	fp, sp, #4
   15f04:	sub	sp, sp, #32
   15f08:	str	r0, [fp, #-24]	; 0xffffffe8
   15f0c:	str	r1, [fp, #-28]	; 0xffffffe4
   15f10:	str	r2, [fp, #-32]	; 0xffffffe0
   15f14:	str	r3, [fp, #-36]	; 0xffffffdc
   15f18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f1c:	cmp	r3, #0
   15f20:	bne	15f2c <__assert_fail@plt+0x51f4>
   15f24:	sub	r3, fp, #16
   15f28:	str	r3, [fp, #-24]	; 0xffffffe8
   15f2c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15f30:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15f34:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15f38:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15f3c:	bl	10c0c <mbrtowc@plt>
   15f40:	str	r0, [fp, #-8]
   15f44:	ldr	r3, [fp, #-8]
   15f48:	cmn	r3, #3
   15f4c:	bls	15f98 <__assert_fail@plt+0x5260>
   15f50:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15f54:	cmp	r3, #0
   15f58:	beq	15f98 <__assert_fail@plt+0x5260>
   15f5c:	mov	r0, #0
   15f60:	bl	1654c <__assert_fail@plt+0x5814>
   15f64:	mov	r3, r0
   15f68:	eor	r3, r3, #1
   15f6c:	uxtb	r3, r3
   15f70:	cmp	r3, #0
   15f74:	beq	15f98 <__assert_fail@plt+0x5260>
   15f78:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15f7c:	ldrb	r3, [r3]
   15f80:	strb	r3, [fp, #-9]
   15f84:	ldrb	r2, [fp, #-9]
   15f88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f8c:	str	r2, [r3]
   15f90:	mov	r3, #1
   15f94:	b	15f9c <__assert_fail@plt+0x5264>
   15f98:	ldr	r3, [fp, #-8]
   15f9c:	mov	r0, r3
   15fa0:	sub	sp, fp, #4
   15fa4:	pop	{fp, pc}
   15fa8:	push	{fp, lr}
   15fac:	add	fp, sp, #4
   15fb0:	sub	sp, sp, #24
   15fb4:	str	r0, [fp, #-16]
   15fb8:	str	r1, [fp, #-20]	; 0xffffffec
   15fbc:	str	r2, [fp, #-24]	; 0xffffffe8
   15fc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15fc4:	cmp	r3, #0
   15fc8:	beq	16004 <__assert_fail@plt+0x52cc>
   15fcc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15fd0:	mvn	r0, #0
   15fd4:	bl	16750 <__assert_fail@plt+0x5a18>
   15fd8:	mov	r3, r0
   15fdc:	mov	r2, r3
   15fe0:	ldr	r3, [fp, #-20]	; 0xffffffec
   15fe4:	cmp	r2, r3
   15fe8:	bcs	16004 <__assert_fail@plt+0x52cc>
   15fec:	ldr	r3, [fp, #-20]	; 0xffffffec
   15ff0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15ff4:	mul	r3, r2, r3
   15ff8:	str	r3, [fp, #-8]
   15ffc:	mov	r3, #1
   16000:	b	16018 <__assert_fail@plt+0x52e0>
   16004:	ldr	r3, [fp, #-20]	; 0xffffffec
   16008:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1600c:	mul	r3, r2, r3
   16010:	str	r3, [fp, #-8]
   16014:	mov	r3, #0
   16018:	cmp	r3, #0
   1601c:	beq	16038 <__assert_fail@plt+0x5300>
   16020:	bl	10c9c <__errno_location@plt>
   16024:	mov	r2, r0
   16028:	mov	r3, #12
   1602c:	str	r3, [r2]
   16030:	mov	r3, #0
   16034:	b	1604c <__assert_fail@plt+0x5314>
   16038:	ldr	r3, [fp, #-8]
   1603c:	mov	r1, r3
   16040:	ldr	r0, [fp, #-16]
   16044:	bl	15814 <__assert_fail@plt+0x4adc>
   16048:	mov	r3, r0
   1604c:	mov	r0, r3
   16050:	sub	sp, fp, #4
   16054:	pop	{fp, pc}
   16058:	push	{fp}		; (str fp, [sp, #-4]!)
   1605c:	add	fp, sp, #0
   16060:	sub	sp, sp, #12
   16064:	str	r0, [fp, #-8]
   16068:	ldr	r3, [fp, #-8]
   1606c:	cmp	r3, #90	; 0x5a
   16070:	bgt	1608c <__assert_fail@plt+0x5354>
   16074:	cmp	r3, #65	; 0x41
   16078:	bge	16098 <__assert_fail@plt+0x5360>
   1607c:	sub	r3, r3, #48	; 0x30
   16080:	cmp	r3, #9
   16084:	bhi	160a0 <__assert_fail@plt+0x5368>
   16088:	b	16098 <__assert_fail@plt+0x5360>
   1608c:	sub	r3, r3, #97	; 0x61
   16090:	cmp	r3, #25
   16094:	bhi	160a0 <__assert_fail@plt+0x5368>
   16098:	mov	r3, #1
   1609c:	b	160a4 <__assert_fail@plt+0x536c>
   160a0:	mov	r3, #0
   160a4:	mov	r0, r3
   160a8:	add	sp, fp, #0
   160ac:	pop	{fp}		; (ldr fp, [sp], #4)
   160b0:	bx	lr
   160b4:	push	{fp}		; (str fp, [sp, #-4]!)
   160b8:	add	fp, sp, #0
   160bc:	sub	sp, sp, #12
   160c0:	str	r0, [fp, #-8]
   160c4:	ldr	r3, [fp, #-8]
   160c8:	cmp	r3, #65	; 0x41
   160cc:	blt	160ec <__assert_fail@plt+0x53b4>
   160d0:	cmp	r3, #90	; 0x5a
   160d4:	ble	160e4 <__assert_fail@plt+0x53ac>
   160d8:	sub	r3, r3, #97	; 0x61
   160dc:	cmp	r3, #25
   160e0:	bhi	160ec <__assert_fail@plt+0x53b4>
   160e4:	mov	r3, #1
   160e8:	b	160f0 <__assert_fail@plt+0x53b8>
   160ec:	mov	r3, #0
   160f0:	mov	r0, r3
   160f4:	add	sp, fp, #0
   160f8:	pop	{fp}		; (ldr fp, [sp], #4)
   160fc:	bx	lr
   16100:	push	{fp}		; (str fp, [sp, #-4]!)
   16104:	add	fp, sp, #0
   16108:	sub	sp, sp, #12
   1610c:	str	r0, [fp, #-8]
   16110:	ldr	r3, [fp, #-8]
   16114:	add	r3, r3, #0
   16118:	cmp	r3, #127	; 0x7f
   1611c:	bhi	16128 <__assert_fail@plt+0x53f0>
   16120:	mov	r3, #1
   16124:	b	1612c <__assert_fail@plt+0x53f4>
   16128:	mov	r3, #0
   1612c:	mov	r0, r3
   16130:	add	sp, fp, #0
   16134:	pop	{fp}		; (ldr fp, [sp], #4)
   16138:	bx	lr
   1613c:	push	{fp}		; (str fp, [sp, #-4]!)
   16140:	add	fp, sp, #0
   16144:	sub	sp, sp, #12
   16148:	str	r0, [fp, #-8]
   1614c:	ldr	r3, [fp, #-8]
   16150:	cmp	r3, #32
   16154:	beq	16164 <__assert_fail@plt+0x542c>
   16158:	ldr	r3, [fp, #-8]
   1615c:	cmp	r3, #9
   16160:	bne	1616c <__assert_fail@plt+0x5434>
   16164:	mov	r3, #1
   16168:	b	16170 <__assert_fail@plt+0x5438>
   1616c:	mov	r3, #0
   16170:	and	r3, r3, #1
   16174:	uxtb	r3, r3
   16178:	mov	r0, r3
   1617c:	add	sp, fp, #0
   16180:	pop	{fp}		; (ldr fp, [sp], #4)
   16184:	bx	lr
   16188:	push	{fp}		; (str fp, [sp, #-4]!)
   1618c:	add	fp, sp, #0
   16190:	sub	sp, sp, #12
   16194:	str	r0, [fp, #-8]
   16198:	ldr	r3, [fp, #-8]
   1619c:	cmp	r3, #0
   161a0:	blt	161bc <__assert_fail@plt+0x5484>
   161a4:	cmp	r3, #31
   161a8:	ble	161b4 <__assert_fail@plt+0x547c>
   161ac:	cmp	r3, #127	; 0x7f
   161b0:	bne	161bc <__assert_fail@plt+0x5484>
   161b4:	mov	r3, #1
   161b8:	b	161c0 <__assert_fail@plt+0x5488>
   161bc:	mov	r3, #0
   161c0:	mov	r0, r3
   161c4:	add	sp, fp, #0
   161c8:	pop	{fp}		; (ldr fp, [sp], #4)
   161cc:	bx	lr
   161d0:	push	{fp}		; (str fp, [sp, #-4]!)
   161d4:	add	fp, sp, #0
   161d8:	sub	sp, sp, #12
   161dc:	str	r0, [fp, #-8]
   161e0:	ldr	r3, [fp, #-8]
   161e4:	sub	r3, r3, #48	; 0x30
   161e8:	cmp	r3, #9
   161ec:	bhi	161f8 <__assert_fail@plt+0x54c0>
   161f0:	mov	r3, #1
   161f4:	b	161fc <__assert_fail@plt+0x54c4>
   161f8:	mov	r3, #0
   161fc:	mov	r0, r3
   16200:	add	sp, fp, #0
   16204:	pop	{fp}		; (ldr fp, [sp], #4)
   16208:	bx	lr
   1620c:	push	{fp}		; (str fp, [sp, #-4]!)
   16210:	add	fp, sp, #0
   16214:	sub	sp, sp, #12
   16218:	str	r0, [fp, #-8]
   1621c:	ldr	r3, [fp, #-8]
   16220:	sub	r3, r3, #33	; 0x21
   16224:	cmp	r3, #93	; 0x5d
   16228:	bhi	16234 <__assert_fail@plt+0x54fc>
   1622c:	mov	r3, #1
   16230:	b	16238 <__assert_fail@plt+0x5500>
   16234:	mov	r3, #0
   16238:	mov	r0, r3
   1623c:	add	sp, fp, #0
   16240:	pop	{fp}		; (ldr fp, [sp], #4)
   16244:	bx	lr
   16248:	push	{fp}		; (str fp, [sp, #-4]!)
   1624c:	add	fp, sp, #0
   16250:	sub	sp, sp, #12
   16254:	str	r0, [fp, #-8]
   16258:	ldr	r3, [fp, #-8]
   1625c:	sub	r3, r3, #97	; 0x61
   16260:	cmp	r3, #25
   16264:	bhi	16270 <__assert_fail@plt+0x5538>
   16268:	mov	r3, #1
   1626c:	b	16274 <__assert_fail@plt+0x553c>
   16270:	mov	r3, #0
   16274:	mov	r0, r3
   16278:	add	sp, fp, #0
   1627c:	pop	{fp}		; (ldr fp, [sp], #4)
   16280:	bx	lr
   16284:	push	{fp}		; (str fp, [sp, #-4]!)
   16288:	add	fp, sp, #0
   1628c:	sub	sp, sp, #12
   16290:	str	r0, [fp, #-8]
   16294:	ldr	r3, [fp, #-8]
   16298:	sub	r3, r3, #32
   1629c:	cmp	r3, #94	; 0x5e
   162a0:	bhi	162ac <__assert_fail@plt+0x5574>
   162a4:	mov	r3, #1
   162a8:	b	162b0 <__assert_fail@plt+0x5578>
   162ac:	mov	r3, #0
   162b0:	mov	r0, r3
   162b4:	add	sp, fp, #0
   162b8:	pop	{fp}		; (ldr fp, [sp], #4)
   162bc:	bx	lr
   162c0:	push	{fp}		; (str fp, [sp, #-4]!)
   162c4:	add	fp, sp, #0
   162c8:	sub	sp, sp, #12
   162cc:	str	r0, [fp, #-8]
   162d0:	ldr	r3, [fp, #-8]
   162d4:	cmp	r3, #64	; 0x40
   162d8:	bgt	162f4 <__assert_fail@plt+0x55bc>
   162dc:	cmp	r3, #58	; 0x3a
   162e0:	bge	16310 <__assert_fail@plt+0x55d8>
   162e4:	sub	r3, r3, #33	; 0x21
   162e8:	cmp	r3, #14
   162ec:	bhi	16318 <__assert_fail@plt+0x55e0>
   162f0:	b	16310 <__assert_fail@plt+0x55d8>
   162f4:	cmp	r3, #91	; 0x5b
   162f8:	blt	16318 <__assert_fail@plt+0x55e0>
   162fc:	cmp	r3, #96	; 0x60
   16300:	ble	16310 <__assert_fail@plt+0x55d8>
   16304:	sub	r3, r3, #123	; 0x7b
   16308:	cmp	r3, #3
   1630c:	bhi	16318 <__assert_fail@plt+0x55e0>
   16310:	mov	r3, #1
   16314:	b	1631c <__assert_fail@plt+0x55e4>
   16318:	mov	r3, #0
   1631c:	mov	r0, r3
   16320:	add	sp, fp, #0
   16324:	pop	{fp}		; (ldr fp, [sp], #4)
   16328:	bx	lr
   1632c:	push	{fp}		; (str fp, [sp, #-4]!)
   16330:	add	fp, sp, #0
   16334:	sub	sp, sp, #12
   16338:	str	r0, [fp, #-8]
   1633c:	ldr	r3, [fp, #-8]
   16340:	cmp	r3, #9
   16344:	blt	16360 <__assert_fail@plt+0x5628>
   16348:	cmp	r3, #13
   1634c:	ble	16358 <__assert_fail@plt+0x5620>
   16350:	cmp	r3, #32
   16354:	bne	16360 <__assert_fail@plt+0x5628>
   16358:	mov	r3, #1
   1635c:	b	16364 <__assert_fail@plt+0x562c>
   16360:	mov	r3, #0
   16364:	mov	r0, r3
   16368:	add	sp, fp, #0
   1636c:	pop	{fp}		; (ldr fp, [sp], #4)
   16370:	bx	lr
   16374:	push	{fp}		; (str fp, [sp, #-4]!)
   16378:	add	fp, sp, #0
   1637c:	sub	sp, sp, #12
   16380:	str	r0, [fp, #-8]
   16384:	ldr	r3, [fp, #-8]
   16388:	sub	r3, r3, #65	; 0x41
   1638c:	cmp	r3, #25
   16390:	bhi	1639c <__assert_fail@plt+0x5664>
   16394:	mov	r3, #1
   16398:	b	163a0 <__assert_fail@plt+0x5668>
   1639c:	mov	r3, #0
   163a0:	mov	r0, r3
   163a4:	add	sp, fp, #0
   163a8:	pop	{fp}		; (ldr fp, [sp], #4)
   163ac:	bx	lr
   163b0:	push	{fp}		; (str fp, [sp, #-4]!)
   163b4:	add	fp, sp, #0
   163b8:	sub	sp, sp, #12
   163bc:	str	r0, [fp, #-8]
   163c0:	ldr	r3, [fp, #-8]
   163c4:	sub	r3, r3, #48	; 0x30
   163c8:	cmp	r3, #54	; 0x36
   163cc:	addls	pc, pc, r3, lsl #2
   163d0:	b	164b8 <__assert_fail@plt+0x5780>
   163d4:	b	164b0 <__assert_fail@plt+0x5778>
   163d8:	b	164b0 <__assert_fail@plt+0x5778>
   163dc:	b	164b0 <__assert_fail@plt+0x5778>
   163e0:	b	164b0 <__assert_fail@plt+0x5778>
   163e4:	b	164b0 <__assert_fail@plt+0x5778>
   163e8:	b	164b0 <__assert_fail@plt+0x5778>
   163ec:	b	164b0 <__assert_fail@plt+0x5778>
   163f0:	b	164b0 <__assert_fail@plt+0x5778>
   163f4:	b	164b0 <__assert_fail@plt+0x5778>
   163f8:	b	164b0 <__assert_fail@plt+0x5778>
   163fc:	b	164b8 <__assert_fail@plt+0x5780>
   16400:	b	164b8 <__assert_fail@plt+0x5780>
   16404:	b	164b8 <__assert_fail@plt+0x5780>
   16408:	b	164b8 <__assert_fail@plt+0x5780>
   1640c:	b	164b8 <__assert_fail@plt+0x5780>
   16410:	b	164b8 <__assert_fail@plt+0x5780>
   16414:	b	164b8 <__assert_fail@plt+0x5780>
   16418:	b	164b0 <__assert_fail@plt+0x5778>
   1641c:	b	164b0 <__assert_fail@plt+0x5778>
   16420:	b	164b0 <__assert_fail@plt+0x5778>
   16424:	b	164b0 <__assert_fail@plt+0x5778>
   16428:	b	164b0 <__assert_fail@plt+0x5778>
   1642c:	b	164b0 <__assert_fail@plt+0x5778>
   16430:	b	164b8 <__assert_fail@plt+0x5780>
   16434:	b	164b8 <__assert_fail@plt+0x5780>
   16438:	b	164b8 <__assert_fail@plt+0x5780>
   1643c:	b	164b8 <__assert_fail@plt+0x5780>
   16440:	b	164b8 <__assert_fail@plt+0x5780>
   16444:	b	164b8 <__assert_fail@plt+0x5780>
   16448:	b	164b8 <__assert_fail@plt+0x5780>
   1644c:	b	164b8 <__assert_fail@plt+0x5780>
   16450:	b	164b8 <__assert_fail@plt+0x5780>
   16454:	b	164b8 <__assert_fail@plt+0x5780>
   16458:	b	164b8 <__assert_fail@plt+0x5780>
   1645c:	b	164b8 <__assert_fail@plt+0x5780>
   16460:	b	164b8 <__assert_fail@plt+0x5780>
   16464:	b	164b8 <__assert_fail@plt+0x5780>
   16468:	b	164b8 <__assert_fail@plt+0x5780>
   1646c:	b	164b8 <__assert_fail@plt+0x5780>
   16470:	b	164b8 <__assert_fail@plt+0x5780>
   16474:	b	164b8 <__assert_fail@plt+0x5780>
   16478:	b	164b8 <__assert_fail@plt+0x5780>
   1647c:	b	164b8 <__assert_fail@plt+0x5780>
   16480:	b	164b8 <__assert_fail@plt+0x5780>
   16484:	b	164b8 <__assert_fail@plt+0x5780>
   16488:	b	164b8 <__assert_fail@plt+0x5780>
   1648c:	b	164b8 <__assert_fail@plt+0x5780>
   16490:	b	164b8 <__assert_fail@plt+0x5780>
   16494:	b	164b8 <__assert_fail@plt+0x5780>
   16498:	b	164b0 <__assert_fail@plt+0x5778>
   1649c:	b	164b0 <__assert_fail@plt+0x5778>
   164a0:	b	164b0 <__assert_fail@plt+0x5778>
   164a4:	b	164b0 <__assert_fail@plt+0x5778>
   164a8:	b	164b0 <__assert_fail@plt+0x5778>
   164ac:	b	164b0 <__assert_fail@plt+0x5778>
   164b0:	mov	r3, #1
   164b4:	b	164bc <__assert_fail@plt+0x5784>
   164b8:	mov	r3, #0
   164bc:	mov	r0, r3
   164c0:	add	sp, fp, #0
   164c4:	pop	{fp}		; (ldr fp, [sp], #4)
   164c8:	bx	lr
   164cc:	push	{fp}		; (str fp, [sp, #-4]!)
   164d0:	add	fp, sp, #0
   164d4:	sub	sp, sp, #12
   164d8:	str	r0, [fp, #-8]
   164dc:	ldr	r3, [fp, #-8]
   164e0:	sub	r3, r3, #65	; 0x41
   164e4:	cmp	r3, #25
   164e8:	bhi	164f8 <__assert_fail@plt+0x57c0>
   164ec:	ldr	r3, [fp, #-8]
   164f0:	add	r3, r3, #32
   164f4:	b	164fc <__assert_fail@plt+0x57c4>
   164f8:	ldr	r3, [fp, #-8]
   164fc:	mov	r0, r3
   16500:	add	sp, fp, #0
   16504:	pop	{fp}		; (ldr fp, [sp], #4)
   16508:	bx	lr
   1650c:	push	{fp}		; (str fp, [sp, #-4]!)
   16510:	add	fp, sp, #0
   16514:	sub	sp, sp, #12
   16518:	str	r0, [fp, #-8]
   1651c:	ldr	r3, [fp, #-8]
   16520:	sub	r3, r3, #97	; 0x61
   16524:	cmp	r3, #25
   16528:	bhi	16538 <__assert_fail@plt+0x5800>
   1652c:	ldr	r3, [fp, #-8]
   16530:	sub	r3, r3, #32
   16534:	b	1653c <__assert_fail@plt+0x5804>
   16538:	ldr	r3, [fp, #-8]
   1653c:	mov	r0, r3
   16540:	add	sp, fp, #0
   16544:	pop	{fp}		; (ldr fp, [sp], #4)
   16548:	bx	lr
   1654c:	push	{fp, lr}
   16550:	add	fp, sp, #4
   16554:	sub	sp, sp, #272	; 0x110
   16558:	str	r0, [fp, #-272]	; 0xfffffef0
   1655c:	sub	r3, fp, #264	; 0x108
   16560:	ldr	r2, [pc, #116]	; 165dc <__assert_fail@plt+0x58a4>
   16564:	mov	r1, r3
   16568:	ldr	r0, [fp, #-272]	; 0xfffffef0
   1656c:	bl	166f0 <__assert_fail@plt+0x59b8>
   16570:	mov	r3, r0
   16574:	cmp	r3, #0
   16578:	beq	16584 <__assert_fail@plt+0x584c>
   1657c:	mov	r3, #0
   16580:	b	165d0 <__assert_fail@plt+0x5898>
   16584:	sub	r3, fp, #264	; 0x108
   16588:	ldr	r1, [pc, #80]	; 165e0 <__assert_fail@plt+0x58a8>
   1658c:	mov	r0, r3
   16590:	bl	10b40 <strcmp@plt>
   16594:	mov	r3, r0
   16598:	cmp	r3, #0
   1659c:	beq	165c4 <__assert_fail@plt+0x588c>
   165a0:	sub	r3, fp, #264	; 0x108
   165a4:	ldr	r1, [pc, #56]	; 165e4 <__assert_fail@plt+0x58ac>
   165a8:	mov	r0, r3
   165ac:	bl	10b40 <strcmp@plt>
   165b0:	mov	r3, r0
   165b4:	cmp	r3, #0
   165b8:	beq	165c4 <__assert_fail@plt+0x588c>
   165bc:	mov	r3, #1
   165c0:	b	165c8 <__assert_fail@plt+0x5890>
   165c4:	mov	r3, #0
   165c8:	and	r3, r3, #1
   165cc:	uxtb	r3, r3
   165d0:	mov	r0, r3
   165d4:	sub	sp, fp, #4
   165d8:	pop	{fp, pc}
   165dc:	andeq	r0, r0, r1, lsl #2
   165e0:	andeq	r7, r1, r8, lsl #15
   165e4:	andeq	r7, r1, ip, lsl #15
   165e8:	push	{fp, lr}
   165ec:	add	fp, sp, #4
   165f0:	sub	sp, sp, #16
   165f4:	str	r0, [fp, #-16]
   165f8:	mov	r1, #0
   165fc:	ldr	r0, [fp, #-16]
   16600:	bl	10ce4 <setlocale@plt>
   16604:	str	r0, [fp, #-8]
   16608:	ldr	r3, [fp, #-8]
   1660c:	mov	r0, r3
   16610:	sub	sp, fp, #4
   16614:	pop	{fp, pc}
   16618:	push	{fp, lr}
   1661c:	add	fp, sp, #4
   16620:	sub	sp, sp, #24
   16624:	str	r0, [fp, #-16]
   16628:	str	r1, [fp, #-20]	; 0xffffffec
   1662c:	str	r2, [fp, #-24]	; 0xffffffe8
   16630:	ldr	r0, [fp, #-16]
   16634:	bl	165e8 <__assert_fail@plt+0x58b0>
   16638:	str	r0, [fp, #-8]
   1663c:	ldr	r3, [fp, #-8]
   16640:	cmp	r3, #0
   16644:	bne	16668 <__assert_fail@plt+0x5930>
   16648:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1664c:	cmp	r3, #0
   16650:	beq	16660 <__assert_fail@plt+0x5928>
   16654:	ldr	r3, [fp, #-20]	; 0xffffffec
   16658:	mov	r2, #0
   1665c:	strb	r2, [r3]
   16660:	mov	r3, #22
   16664:	b	166e4 <__assert_fail@plt+0x59ac>
   16668:	ldr	r0, [fp, #-8]
   1666c:	bl	10c84 <strlen@plt>
   16670:	str	r0, [fp, #-12]
   16674:	ldr	r2, [fp, #-12]
   16678:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1667c:	cmp	r2, r3
   16680:	bcs	166a4 <__assert_fail@plt+0x596c>
   16684:	ldr	r3, [fp, #-12]
   16688:	add	r3, r3, #1
   1668c:	mov	r2, r3
   16690:	ldr	r1, [fp, #-8]
   16694:	ldr	r0, [fp, #-20]	; 0xffffffec
   16698:	bl	10b7c <memcpy@plt>
   1669c:	mov	r3, #0
   166a0:	b	166e4 <__assert_fail@plt+0x59ac>
   166a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   166a8:	cmp	r3, #0
   166ac:	beq	166e0 <__assert_fail@plt+0x59a8>
   166b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   166b4:	sub	r3, r3, #1
   166b8:	mov	r2, r3
   166bc:	ldr	r1, [fp, #-8]
   166c0:	ldr	r0, [fp, #-20]	; 0xffffffec
   166c4:	bl	10b7c <memcpy@plt>
   166c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   166cc:	sub	r3, r3, #1
   166d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   166d4:	add	r3, r2, r3
   166d8:	mov	r2, #0
   166dc:	strb	r2, [r3]
   166e0:	mov	r3, #34	; 0x22
   166e4:	mov	r0, r3
   166e8:	sub	sp, fp, #4
   166ec:	pop	{fp, pc}
   166f0:	push	{fp, lr}
   166f4:	add	fp, sp, #4
   166f8:	sub	sp, sp, #16
   166fc:	str	r0, [fp, #-8]
   16700:	str	r1, [fp, #-12]
   16704:	str	r2, [fp, #-16]
   16708:	ldr	r2, [fp, #-16]
   1670c:	ldr	r1, [fp, #-12]
   16710:	ldr	r0, [fp, #-8]
   16714:	bl	16618 <__assert_fail@plt+0x58e0>
   16718:	mov	r3, r0
   1671c:	mov	r0, r3
   16720:	sub	sp, fp, #4
   16724:	pop	{fp, pc}
   16728:	push	{fp, lr}
   1672c:	add	fp, sp, #4
   16730:	sub	sp, sp, #8
   16734:	str	r0, [fp, #-8]
   16738:	ldr	r0, [fp, #-8]
   1673c:	bl	165e8 <__assert_fail@plt+0x58b0>
   16740:	mov	r3, r0
   16744:	mov	r0, r3
   16748:	sub	sp, fp, #4
   1674c:	pop	{fp, pc}
   16750:	subs	r2, r1, #1
   16754:	bxeq	lr
   16758:	bcc	16930 <__assert_fail@plt+0x5bf8>
   1675c:	cmp	r0, r1
   16760:	bls	16914 <__assert_fail@plt+0x5bdc>
   16764:	tst	r1, r2
   16768:	beq	16920 <__assert_fail@plt+0x5be8>
   1676c:	clz	r3, r0
   16770:	clz	r2, r1
   16774:	sub	r3, r2, r3
   16778:	rsbs	r3, r3, #31
   1677c:	addne	r3, r3, r3, lsl #1
   16780:	mov	r2, #0
   16784:	addne	pc, pc, r3, lsl #2
   16788:	nop			; (mov r0, r0)
   1678c:	cmp	r0, r1, lsl #31
   16790:	adc	r2, r2, r2
   16794:	subcs	r0, r0, r1, lsl #31
   16798:	cmp	r0, r1, lsl #30
   1679c:	adc	r2, r2, r2
   167a0:	subcs	r0, r0, r1, lsl #30
   167a4:	cmp	r0, r1, lsl #29
   167a8:	adc	r2, r2, r2
   167ac:	subcs	r0, r0, r1, lsl #29
   167b0:	cmp	r0, r1, lsl #28
   167b4:	adc	r2, r2, r2
   167b8:	subcs	r0, r0, r1, lsl #28
   167bc:	cmp	r0, r1, lsl #27
   167c0:	adc	r2, r2, r2
   167c4:	subcs	r0, r0, r1, lsl #27
   167c8:	cmp	r0, r1, lsl #26
   167cc:	adc	r2, r2, r2
   167d0:	subcs	r0, r0, r1, lsl #26
   167d4:	cmp	r0, r1, lsl #25
   167d8:	adc	r2, r2, r2
   167dc:	subcs	r0, r0, r1, lsl #25
   167e0:	cmp	r0, r1, lsl #24
   167e4:	adc	r2, r2, r2
   167e8:	subcs	r0, r0, r1, lsl #24
   167ec:	cmp	r0, r1, lsl #23
   167f0:	adc	r2, r2, r2
   167f4:	subcs	r0, r0, r1, lsl #23
   167f8:	cmp	r0, r1, lsl #22
   167fc:	adc	r2, r2, r2
   16800:	subcs	r0, r0, r1, lsl #22
   16804:	cmp	r0, r1, lsl #21
   16808:	adc	r2, r2, r2
   1680c:	subcs	r0, r0, r1, lsl #21
   16810:	cmp	r0, r1, lsl #20
   16814:	adc	r2, r2, r2
   16818:	subcs	r0, r0, r1, lsl #20
   1681c:	cmp	r0, r1, lsl #19
   16820:	adc	r2, r2, r2
   16824:	subcs	r0, r0, r1, lsl #19
   16828:	cmp	r0, r1, lsl #18
   1682c:	adc	r2, r2, r2
   16830:	subcs	r0, r0, r1, lsl #18
   16834:	cmp	r0, r1, lsl #17
   16838:	adc	r2, r2, r2
   1683c:	subcs	r0, r0, r1, lsl #17
   16840:	cmp	r0, r1, lsl #16
   16844:	adc	r2, r2, r2
   16848:	subcs	r0, r0, r1, lsl #16
   1684c:	cmp	r0, r1, lsl #15
   16850:	adc	r2, r2, r2
   16854:	subcs	r0, r0, r1, lsl #15
   16858:	cmp	r0, r1, lsl #14
   1685c:	adc	r2, r2, r2
   16860:	subcs	r0, r0, r1, lsl #14
   16864:	cmp	r0, r1, lsl #13
   16868:	adc	r2, r2, r2
   1686c:	subcs	r0, r0, r1, lsl #13
   16870:	cmp	r0, r1, lsl #12
   16874:	adc	r2, r2, r2
   16878:	subcs	r0, r0, r1, lsl #12
   1687c:	cmp	r0, r1, lsl #11
   16880:	adc	r2, r2, r2
   16884:	subcs	r0, r0, r1, lsl #11
   16888:	cmp	r0, r1, lsl #10
   1688c:	adc	r2, r2, r2
   16890:	subcs	r0, r0, r1, lsl #10
   16894:	cmp	r0, r1, lsl #9
   16898:	adc	r2, r2, r2
   1689c:	subcs	r0, r0, r1, lsl #9
   168a0:	cmp	r0, r1, lsl #8
   168a4:	adc	r2, r2, r2
   168a8:	subcs	r0, r0, r1, lsl #8
   168ac:	cmp	r0, r1, lsl #7
   168b0:	adc	r2, r2, r2
   168b4:	subcs	r0, r0, r1, lsl #7
   168b8:	cmp	r0, r1, lsl #6
   168bc:	adc	r2, r2, r2
   168c0:	subcs	r0, r0, r1, lsl #6
   168c4:	cmp	r0, r1, lsl #5
   168c8:	adc	r2, r2, r2
   168cc:	subcs	r0, r0, r1, lsl #5
   168d0:	cmp	r0, r1, lsl #4
   168d4:	adc	r2, r2, r2
   168d8:	subcs	r0, r0, r1, lsl #4
   168dc:	cmp	r0, r1, lsl #3
   168e0:	adc	r2, r2, r2
   168e4:	subcs	r0, r0, r1, lsl #3
   168e8:	cmp	r0, r1, lsl #2
   168ec:	adc	r2, r2, r2
   168f0:	subcs	r0, r0, r1, lsl #2
   168f4:	cmp	r0, r1, lsl #1
   168f8:	adc	r2, r2, r2
   168fc:	subcs	r0, r0, r1, lsl #1
   16900:	cmp	r0, r1
   16904:	adc	r2, r2, r2
   16908:	subcs	r0, r0, r1
   1690c:	mov	r0, r2
   16910:	bx	lr
   16914:	moveq	r0, #1
   16918:	movne	r0, #0
   1691c:	bx	lr
   16920:	clz	r2, r1
   16924:	rsb	r2, r2, #31
   16928:	lsr	r0, r0, r2
   1692c:	bx	lr
   16930:	cmp	r0, #0
   16934:	mvnne	r0, #0
   16938:	b	16b9c <__assert_fail@plt+0x5e64>
   1693c:	cmp	r1, #0
   16940:	beq	16930 <__assert_fail@plt+0x5bf8>
   16944:	push	{r0, r1, lr}
   16948:	bl	16750 <__assert_fail@plt+0x5a18>
   1694c:	pop	{r1, r2, lr}
   16950:	mul	r3, r2, r0
   16954:	sub	r1, r1, r3
   16958:	bx	lr
   1695c:	cmp	r1, #0
   16960:	beq	16b6c <__assert_fail@plt+0x5e34>
   16964:	eor	ip, r0, r1
   16968:	rsbmi	r1, r1, #0
   1696c:	subs	r2, r1, #1
   16970:	beq	16b38 <__assert_fail@plt+0x5e00>
   16974:	movs	r3, r0
   16978:	rsbmi	r3, r0, #0
   1697c:	cmp	r3, r1
   16980:	bls	16b44 <__assert_fail@plt+0x5e0c>
   16984:	tst	r1, r2
   16988:	beq	16b54 <__assert_fail@plt+0x5e1c>
   1698c:	clz	r2, r3
   16990:	clz	r0, r1
   16994:	sub	r2, r0, r2
   16998:	rsbs	r2, r2, #31
   1699c:	addne	r2, r2, r2, lsl #1
   169a0:	mov	r0, #0
   169a4:	addne	pc, pc, r2, lsl #2
   169a8:	nop			; (mov r0, r0)
   169ac:	cmp	r3, r1, lsl #31
   169b0:	adc	r0, r0, r0
   169b4:	subcs	r3, r3, r1, lsl #31
   169b8:	cmp	r3, r1, lsl #30
   169bc:	adc	r0, r0, r0
   169c0:	subcs	r3, r3, r1, lsl #30
   169c4:	cmp	r3, r1, lsl #29
   169c8:	adc	r0, r0, r0
   169cc:	subcs	r3, r3, r1, lsl #29
   169d0:	cmp	r3, r1, lsl #28
   169d4:	adc	r0, r0, r0
   169d8:	subcs	r3, r3, r1, lsl #28
   169dc:	cmp	r3, r1, lsl #27
   169e0:	adc	r0, r0, r0
   169e4:	subcs	r3, r3, r1, lsl #27
   169e8:	cmp	r3, r1, lsl #26
   169ec:	adc	r0, r0, r0
   169f0:	subcs	r3, r3, r1, lsl #26
   169f4:	cmp	r3, r1, lsl #25
   169f8:	adc	r0, r0, r0
   169fc:	subcs	r3, r3, r1, lsl #25
   16a00:	cmp	r3, r1, lsl #24
   16a04:	adc	r0, r0, r0
   16a08:	subcs	r3, r3, r1, lsl #24
   16a0c:	cmp	r3, r1, lsl #23
   16a10:	adc	r0, r0, r0
   16a14:	subcs	r3, r3, r1, lsl #23
   16a18:	cmp	r3, r1, lsl #22
   16a1c:	adc	r0, r0, r0
   16a20:	subcs	r3, r3, r1, lsl #22
   16a24:	cmp	r3, r1, lsl #21
   16a28:	adc	r0, r0, r0
   16a2c:	subcs	r3, r3, r1, lsl #21
   16a30:	cmp	r3, r1, lsl #20
   16a34:	adc	r0, r0, r0
   16a38:	subcs	r3, r3, r1, lsl #20
   16a3c:	cmp	r3, r1, lsl #19
   16a40:	adc	r0, r0, r0
   16a44:	subcs	r3, r3, r1, lsl #19
   16a48:	cmp	r3, r1, lsl #18
   16a4c:	adc	r0, r0, r0
   16a50:	subcs	r3, r3, r1, lsl #18
   16a54:	cmp	r3, r1, lsl #17
   16a58:	adc	r0, r0, r0
   16a5c:	subcs	r3, r3, r1, lsl #17
   16a60:	cmp	r3, r1, lsl #16
   16a64:	adc	r0, r0, r0
   16a68:	subcs	r3, r3, r1, lsl #16
   16a6c:	cmp	r3, r1, lsl #15
   16a70:	adc	r0, r0, r0
   16a74:	subcs	r3, r3, r1, lsl #15
   16a78:	cmp	r3, r1, lsl #14
   16a7c:	adc	r0, r0, r0
   16a80:	subcs	r3, r3, r1, lsl #14
   16a84:	cmp	r3, r1, lsl #13
   16a88:	adc	r0, r0, r0
   16a8c:	subcs	r3, r3, r1, lsl #13
   16a90:	cmp	r3, r1, lsl #12
   16a94:	adc	r0, r0, r0
   16a98:	subcs	r3, r3, r1, lsl #12
   16a9c:	cmp	r3, r1, lsl #11
   16aa0:	adc	r0, r0, r0
   16aa4:	subcs	r3, r3, r1, lsl #11
   16aa8:	cmp	r3, r1, lsl #10
   16aac:	adc	r0, r0, r0
   16ab0:	subcs	r3, r3, r1, lsl #10
   16ab4:	cmp	r3, r1, lsl #9
   16ab8:	adc	r0, r0, r0
   16abc:	subcs	r3, r3, r1, lsl #9
   16ac0:	cmp	r3, r1, lsl #8
   16ac4:	adc	r0, r0, r0
   16ac8:	subcs	r3, r3, r1, lsl #8
   16acc:	cmp	r3, r1, lsl #7
   16ad0:	adc	r0, r0, r0
   16ad4:	subcs	r3, r3, r1, lsl #7
   16ad8:	cmp	r3, r1, lsl #6
   16adc:	adc	r0, r0, r0
   16ae0:	subcs	r3, r3, r1, lsl #6
   16ae4:	cmp	r3, r1, lsl #5
   16ae8:	adc	r0, r0, r0
   16aec:	subcs	r3, r3, r1, lsl #5
   16af0:	cmp	r3, r1, lsl #4
   16af4:	adc	r0, r0, r0
   16af8:	subcs	r3, r3, r1, lsl #4
   16afc:	cmp	r3, r1, lsl #3
   16b00:	adc	r0, r0, r0
   16b04:	subcs	r3, r3, r1, lsl #3
   16b08:	cmp	r3, r1, lsl #2
   16b0c:	adc	r0, r0, r0
   16b10:	subcs	r3, r3, r1, lsl #2
   16b14:	cmp	r3, r1, lsl #1
   16b18:	adc	r0, r0, r0
   16b1c:	subcs	r3, r3, r1, lsl #1
   16b20:	cmp	r3, r1
   16b24:	adc	r0, r0, r0
   16b28:	subcs	r3, r3, r1
   16b2c:	cmp	ip, #0
   16b30:	rsbmi	r0, r0, #0
   16b34:	bx	lr
   16b38:	teq	ip, r0
   16b3c:	rsbmi	r0, r0, #0
   16b40:	bx	lr
   16b44:	movcc	r0, #0
   16b48:	asreq	r0, ip, #31
   16b4c:	orreq	r0, r0, #1
   16b50:	bx	lr
   16b54:	clz	r2, r1
   16b58:	rsb	r2, r2, #31
   16b5c:	cmp	ip, #0
   16b60:	lsr	r0, r3, r2
   16b64:	rsbmi	r0, r0, #0
   16b68:	bx	lr
   16b6c:	cmp	r0, #0
   16b70:	mvngt	r0, #-2147483648	; 0x80000000
   16b74:	movlt	r0, #-2147483648	; 0x80000000
   16b78:	b	16b9c <__assert_fail@plt+0x5e64>
   16b7c:	cmp	r1, #0
   16b80:	beq	16b6c <__assert_fail@plt+0x5e34>
   16b84:	push	{r0, r1, lr}
   16b88:	bl	16964 <__assert_fail@plt+0x5c2c>
   16b8c:	pop	{r1, r2, lr}
   16b90:	mul	r3, r2, r0
   16b94:	sub	r1, r1, r3
   16b98:	bx	lr
   16b9c:	push	{r1, lr}
   16ba0:	mov	r0, #8
   16ba4:	bl	10b34 <raise@plt>
   16ba8:	pop	{r1, pc}
   16bac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16bb0:	mov	r7, r0
   16bb4:	ldr	r6, [pc, #72]	; 16c04 <__assert_fail@plt+0x5ecc>
   16bb8:	ldr	r5, [pc, #72]	; 16c08 <__assert_fail@plt+0x5ed0>
   16bbc:	add	r6, pc, r6
   16bc0:	add	r5, pc, r5
   16bc4:	sub	r6, r6, r5
   16bc8:	mov	r8, r1
   16bcc:	mov	r9, r2
   16bd0:	bl	10afc <calloc@plt-0x20>
   16bd4:	asrs	r6, r6, #2
   16bd8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16bdc:	mov	r4, #0
   16be0:	add	r4, r4, #1
   16be4:	ldr	r3, [r5], #4
   16be8:	mov	r2, r9
   16bec:	mov	r1, r8
   16bf0:	mov	r0, r7
   16bf4:	blx	r3
   16bf8:	cmp	r6, r4
   16bfc:	bne	16be0 <__assert_fail@plt+0x5ea8>
   16c00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c04:	andeq	r1, r1, ip, asr #6
   16c08:	andeq	r1, r1, r4, asr #6
   16c0c:	bx	lr
   16c10:	ldr	r3, [pc, #12]	; 16c24 <__assert_fail@plt+0x5eec>
   16c14:	mov	r1, #0
   16c18:	add	r3, pc, r3
   16c1c:	ldr	r2, [r3]
   16c20:	b	10ca8 <__cxa_atexit@plt>
   16c24:	andeq	r1, r1, ip, lsr #9

Disassembly of section .fini:

00016c28 <.fini>:
   16c28:	push	{r3, lr}
   16c2c:	pop	{r3, pc}
