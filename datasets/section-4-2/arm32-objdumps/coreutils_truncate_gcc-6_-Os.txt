
../repos/coreutils/src/truncate:     file format elf32-littlearm


Disassembly of section .init:

00010c38 <.init>:
   10c38:	push	{r3, lr}
   10c3c:	bl	118dc <__assert_fail@plt+0xa20>
   10c40:	pop	{r3, pc}

Disassembly of section .plt:

00010c44 <calloc@plt-0x14>:
   10c44:	push	{lr}		; (str lr, [sp, #-4]!)
   10c48:	ldr	lr, [pc, #4]	; 10c54 <calloc@plt-0x4>
   10c4c:	add	lr, pc, lr
   10c50:	ldr	pc, [lr, #8]!
   10c54:	andeq	r5, r1, ip, lsr #7

00010c58 <calloc@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #86016	; 0x15000
   10c60:	ldr	pc, [ip, #940]!	; 0x3ac

00010c64 <fputs_unlocked@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #86016	; 0x15000
   10c6c:	ldr	pc, [ip, #932]!	; 0x3a4

00010c70 <raise@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #86016	; 0x15000
   10c78:	ldr	pc, [ip, #924]!	; 0x39c

00010c7c <strcmp@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #86016	; 0x15000
   10c84:	ldr	pc, [ip, #916]!	; 0x394

00010c88 <fflush@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #86016	; 0x15000
   10c90:	ldr	pc, [ip, #908]!	; 0x38c

00010c94 <free@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #86016	; 0x15000
   10c9c:	ldr	pc, [ip, #900]!	; 0x384

00010ca0 <_exit@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #86016	; 0x15000
   10ca8:	ldr	pc, [ip, #892]!	; 0x37c

00010cac <memcpy@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #86016	; 0x15000
   10cb4:	ldr	pc, [ip, #884]!	; 0x374

00010cb8 <mbsinit@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #86016	; 0x15000
   10cc0:	ldr	pc, [ip, #876]!	; 0x36c

00010cc4 <ftruncate64@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #86016	; 0x15000
   10ccc:	ldr	pc, [ip, #868]!	; 0x364

00010cd0 <memcmp@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #86016	; 0x15000
   10cd8:	ldr	pc, [ip, #860]!	; 0x35c

00010cdc <fputc_unlocked@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #86016	; 0x15000
   10ce4:	ldr	pc, [ip, #852]!	; 0x354

00010ce8 <dcgettext@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #86016	; 0x15000
   10cf0:	ldr	pc, [ip, #844]!	; 0x34c

00010cf4 <realloc@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #86016	; 0x15000
   10cfc:	ldr	pc, [ip, #836]!	; 0x344

00010d00 <textdomain@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #86016	; 0x15000
   10d08:	ldr	pc, [ip, #828]!	; 0x33c

00010d0c <iswprint@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #86016	; 0x15000
   10d14:	ldr	pc, [ip, #820]!	; 0x334

00010d18 <__fxstat64@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #86016	; 0x15000
   10d20:	ldr	pc, [ip, #812]!	; 0x32c

00010d24 <lseek64@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #86016	; 0x15000
   10d2c:	ldr	pc, [ip, #804]!	; 0x324

00010d30 <__ctype_get_mb_cur_max@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #86016	; 0x15000
   10d38:	ldr	pc, [ip, #796]!	; 0x31c

00010d3c <__fpending@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #86016	; 0x15000
   10d44:	ldr	pc, [ip, #788]!	; 0x314

00010d48 <ferror_unlocked@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #86016	; 0x15000
   10d50:	ldr	pc, [ip, #780]!	; 0x30c

00010d54 <mbrtowc@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #86016	; 0x15000
   10d5c:	ldr	pc, [ip, #772]!	; 0x304

00010d60 <error@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #86016	; 0x15000
   10d68:	ldr	pc, [ip, #764]!	; 0x2fc

00010d6c <open64@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #86016	; 0x15000
   10d74:	ldr	pc, [ip, #756]!	; 0x2f4

00010d78 <malloc@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #86016	; 0x15000
   10d80:	ldr	pc, [ip, #748]!	; 0x2ec

00010d84 <__libc_start_main@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #86016	; 0x15000
   10d8c:	ldr	pc, [ip, #740]!	; 0x2e4

00010d90 <__freading@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #86016	; 0x15000
   10d98:	ldr	pc, [ip, #732]!	; 0x2dc

00010d9c <__gmon_start__@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #86016	; 0x15000
   10da4:	ldr	pc, [ip, #724]!	; 0x2d4

00010da8 <getopt_long@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #86016	; 0x15000
   10db0:	ldr	pc, [ip, #716]!	; 0x2cc

00010db4 <__ctype_b_loc@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #86016	; 0x15000
   10dbc:	ldr	pc, [ip, #708]!	; 0x2c4

00010dc0 <exit@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #86016	; 0x15000
   10dc8:	ldr	pc, [ip, #700]!	; 0x2bc

00010dcc <strlen@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #86016	; 0x15000
   10dd4:	ldr	pc, [ip, #692]!	; 0x2b4

00010dd8 <strchr@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #86016	; 0x15000
   10de0:	ldr	pc, [ip, #684]!	; 0x2ac

00010de4 <__errno_location@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #86016	; 0x15000
   10dec:	ldr	pc, [ip, #676]!	; 0x2a4

00010df0 <__cxa_atexit@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #86016	; 0x15000
   10df8:	ldr	pc, [ip, #668]!	; 0x29c

00010dfc <memset@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #86016	; 0x15000
   10e04:	ldr	pc, [ip, #660]!	; 0x294

00010e08 <__printf_chk@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #86016	; 0x15000
   10e10:	ldr	pc, [ip, #652]!	; 0x28c

00010e14 <fileno@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #86016	; 0x15000
   10e1c:	ldr	pc, [ip, #644]!	; 0x284

00010e20 <__fprintf_chk@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #86016	; 0x15000
   10e28:	ldr	pc, [ip, #636]!	; 0x27c

00010e2c <strtoimax@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #86016	; 0x15000
   10e34:	ldr	pc, [ip, #628]!	; 0x274

00010e38 <fclose@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #86016	; 0x15000
   10e40:	ldr	pc, [ip, #620]!	; 0x26c

00010e44 <fseeko64@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #86016	; 0x15000
   10e4c:	ldr	pc, [ip, #612]!	; 0x264

00010e50 <setlocale@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #86016	; 0x15000
   10e58:	ldr	pc, [ip, #604]!	; 0x25c

00010e5c <strrchr@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #86016	; 0x15000
   10e64:	ldr	pc, [ip, #596]!	; 0x254

00010e68 <nl_langinfo@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #86016	; 0x15000
   10e70:	ldr	pc, [ip, #588]!	; 0x24c

00010e74 <bindtextdomain@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #86016	; 0x15000
   10e7c:	ldr	pc, [ip, #580]!	; 0x244

00010e80 <__xstat64@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #86016	; 0x15000
   10e88:	ldr	pc, [ip, #572]!	; 0x23c

00010e8c <fputs@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #86016	; 0x15000
   10e94:	ldr	pc, [ip, #564]!	; 0x234

00010e98 <strncmp@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #86016	; 0x15000
   10ea0:	ldr	pc, [ip, #556]!	; 0x22c

00010ea4 <abort@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #86016	; 0x15000
   10eac:	ldr	pc, [ip, #548]!	; 0x224

00010eb0 <close@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #86016	; 0x15000
   10eb8:	ldr	pc, [ip, #540]!	; 0x21c

00010ebc <__assert_fail@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #86016	; 0x15000
   10ec4:	ldr	pc, [ip, #532]!	; 0x214

Disassembly of section .text:

00010ec8 <.text>:
   10ec8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ecc:	mov	sl, r0
   10ed0:	sub	sp, sp, #164	; 0xa4
   10ed4:	ldr	r0, [r1]
   10ed8:	mov	fp, r1
   10edc:	bl	11d98 <__assert_fail@plt+0xedc>
   10ee0:	ldr	r1, [pc, #2340]	; 1180c <__assert_fail@plt+0x950>
   10ee4:	mov	r0, #6
   10ee8:	bl	10e50 <setlocale@plt>
   10eec:	ldr	r1, [pc, #2332]	; 11810 <__assert_fail@plt+0x954>
   10ef0:	ldr	r0, [pc, #2332]	; 11814 <__assert_fail@plt+0x958>
   10ef4:	bl	10e74 <bindtextdomain@plt>
   10ef8:	ldr	r0, [pc, #2324]	; 11814 <__assert_fail@plt+0x958>
   10efc:	bl	10d00 <textdomain@plt>
   10f00:	mov	r8, #0
   10f04:	ldr	r0, [pc, #2316]	; 11818 <__assert_fail@plt+0x95c>
   10f08:	ldr	r5, [pc, #2316]	; 1181c <__assert_fail@plt+0x960>
   10f0c:	bl	14f00 <__assert_fail@plt+0x4044>
   10f10:	mov	r4, r8
   10f14:	mov	r2, #0
   10f18:	mov	r3, #0
   10f1c:	mvn	r6, #0
   10f20:	mvn	r7, #-2147483648	; 0x80000000
   10f24:	strd	r2, [sp, #24]
   10f28:	mov	r9, #0
   10f2c:	str	r9, [sp]
   10f30:	ldr	r3, [pc, #2280]	; 11820 <__assert_fail@plt+0x964>
   10f34:	ldr	r2, [pc, #2280]	; 11824 <__assert_fail@plt+0x968>
   10f38:	mov	r1, fp
   10f3c:	mov	r0, sl
   10f40:	bl	10da8 <getopt_long@plt>
   10f44:	cmn	r0, #1
   10f48:	bne	10fc0 <__assert_fail@plt+0x104>
   10f4c:	ldr	r3, [pc, #2260]	; 11828 <__assert_fail@plt+0x96c>
   10f50:	ldr	r5, [pc, #2260]	; 1182c <__assert_fail@plt+0x970>
   10f54:	ldr	r3, [r3]
   10f58:	ldr	r7, [r5, #4]
   10f5c:	cmp	r7, r9
   10f60:	lsl	r6, r3, #2
   10f64:	sub	r3, sl, r3
   10f68:	bne	111bc <__assert_fail@plt+0x300>
   10f6c:	cmp	r4, r9
   10f70:	bne	11214 <__assert_fail@plt+0x358>
   10f74:	mov	r2, #5
   10f78:	ldr	r1, [pc, #2224]	; 11830 <__assert_fail@plt+0x974>
   10f7c:	mov	r0, r4
   10f80:	bl	10ce8 <dcgettext@plt>
   10f84:	ldr	r1, [pc, #2216]	; 11834 <__assert_fail@plt+0x978>
   10f88:	mov	r5, r0
   10f8c:	mov	r0, r4
   10f90:	bl	133c0 <__assert_fail@plt+0x2504>
   10f94:	ldr	r1, [pc, #2204]	; 11838 <__assert_fail@plt+0x97c>
   10f98:	mov	r6, r0
   10f9c:	mov	r0, #1
   10fa0:	bl	133c0 <__assert_fail@plt+0x2504>
   10fa4:	mov	r3, r6
   10fa8:	mov	r2, r5
   10fac:	mov	r1, r4
   10fb0:	str	r0, [sp]
   10fb4:	mov	r0, r1
   10fb8:	bl	10d60 <error@plt>
   10fbc:	b	10fe0 <__assert_fail@plt+0x124>
   10fc0:	cmp	r0, #99	; 0x63
   10fc4:	beq	110a8 <__assert_fail@plt+0x1ec>
   10fc8:	bgt	10fe8 <__assert_fail@plt+0x12c>
   10fcc:	cmn	r0, #3
   10fd0:	beq	11184 <__assert_fail@plt+0x2c8>
   10fd4:	cmn	r0, #2
   10fd8:	moveq	r0, r9
   10fdc:	beq	10fe4 <__assert_fail@plt+0x128>
   10fe0:	mov	r0, #1
   10fe4:	bl	119c8 <__assert_fail@plt+0xb0c>
   10fe8:	cmp	r0, #114	; 0x72
   10fec:	beq	110b8 <__assert_fail@plt+0x1fc>
   10ff0:	cmp	r0, #115	; 0x73
   10ff4:	beq	11010 <__assert_fail@plt+0x154>
   10ff8:	cmp	r0, #111	; 0x6f
   10ffc:	bne	10fe0 <__assert_fail@plt+0x124>
   11000:	ldr	r3, [pc, #2084]	; 1182c <__assert_fail@plt+0x970>
   11004:	mov	r2, #1
   11008:	strb	r2, [r3, #1]
   1100c:	b	10f28 <__assert_fail@plt+0x6c>
   11010:	bl	10db4 <__ctype_b_loc@plt>
   11014:	ldr	r2, [r0]
   11018:	ldr	r3, [r5]
   1101c:	ldrb	r1, [r3]
   11020:	lsl	r0, r1, #1
   11024:	ldrh	r0, [r2, r0]
   11028:	tst	r0, #8192	; 0x2000
   1102c:	bne	110c8 <__assert_fail@plt+0x20c>
   11030:	cmp	r1, #47	; 0x2f
   11034:	addeq	r3, r3, #1
   11038:	streq	r3, [r5]
   1103c:	moveq	r8, #4
   11040:	beq	11058 <__assert_fail@plt+0x19c>
   11044:	bhi	110d4 <__assert_fail@plt+0x218>
   11048:	cmp	r1, #37	; 0x25
   1104c:	moveq	r8, #5
   11050:	addeq	r3, r3, #1
   11054:	streq	r3, [r5]
   11058:	ldr	r9, [r5]
   1105c:	ldrb	r4, [r9]
   11060:	lsl	r3, r4, #1
   11064:	ldrh	r3, [r2, r3]
   11068:	tst	r3, #8192	; 0x2000
   1106c:	bne	110fc <__assert_fail@plt+0x240>
   11070:	sub	r4, r4, #43	; 0x2b
   11074:	ands	r4, r4, #253	; 0xfd
   11078:	bne	1110c <__assert_fail@plt+0x250>
   1107c:	cmp	r8, #0
   11080:	beq	11108 <__assert_fail@plt+0x24c>
   11084:	ldr	r1, [pc, #1968]	; 1183c <__assert_fail@plt+0x980>
   11088:	mov	r2, #5
   1108c:	mov	r0, #0
   11090:	bl	10ce8 <dcgettext@plt>
   11094:	mov	r1, #0
   11098:	mov	r2, r0
   1109c:	mov	r0, r1
   110a0:	bl	10d60 <error@plt>
   110a4:	b	10fe0 <__assert_fail@plt+0x124>
   110a8:	ldr	r3, [pc, #1916]	; 1182c <__assert_fail@plt+0x970>
   110ac:	mov	r2, #1
   110b0:	strb	r2, [r3]
   110b4:	b	10f28 <__assert_fail@plt+0x6c>
   110b8:	ldr	r3, [pc, #1900]	; 1182c <__assert_fail@plt+0x970>
   110bc:	ldr	r2, [r5]
   110c0:	str	r2, [r3, #4]
   110c4:	b	10f28 <__assert_fail@plt+0x6c>
   110c8:	add	r3, r3, #1
   110cc:	str	r3, [r5]
   110d0:	b	11018 <__assert_fail@plt+0x15c>
   110d4:	cmp	r1, #60	; 0x3c
   110d8:	addeq	r3, r3, #1
   110dc:	streq	r3, [r5]
   110e0:	moveq	r8, #3
   110e4:	beq	11058 <__assert_fail@plt+0x19c>
   110e8:	cmp	r1, #62	; 0x3e
   110ec:	addeq	r3, r3, #1
   110f0:	streq	r3, [r5]
   110f4:	moveq	r8, #2
   110f8:	b	11058 <__assert_fail@plt+0x19c>
   110fc:	add	r9, r9, #1
   11100:	str	r9, [r5]
   11104:	b	11058 <__assert_fail@plt+0x19c>
   11108:	mov	r8, #1
   1110c:	mov	r2, #5
   11110:	ldr	r1, [pc, #1832]	; 11840 <__assert_fail@plt+0x984>
   11114:	mov	r0, #0
   11118:	bl	10ce8 <dcgettext@plt>
   1111c:	ldr	r3, [pc, #1824]	; 11844 <__assert_fail@plt+0x988>
   11120:	mov	r4, #0
   11124:	str	r3, [sp, #8]
   11128:	mov	r2, #0
   1112c:	mov	r3, #-2147483648	; 0x80000000
   11130:	str	r4, [sp, #16]
   11134:	strd	r6, [sp]
   11138:	str	r0, [sp, #12]
   1113c:	mov	r0, r9
   11140:	bl	13eec <__assert_fail@plt+0x3030>
   11144:	sub	r3, r8, #4
   11148:	strd	r0, [sp, #24]
   1114c:	ldr	r2, [sp, #24]
   11150:	ldr	r1, [sp, #28]
   11154:	orr	r2, r2, r1
   11158:	cmp	r3, #1
   1115c:	cmpls	r2, r4
   11160:	bne	111b4 <__assert_fail@plt+0x2f8>
   11164:	mov	r2, #5
   11168:	ldr	r1, [pc, #1752]	; 11848 <__assert_fail@plt+0x98c>
   1116c:	mov	r0, r4
   11170:	bl	10ce8 <dcgettext@plt>
   11174:	mov	r1, r4
   11178:	mov	r2, r0
   1117c:	mov	r0, #1
   11180:	bl	10d60 <error@plt>
   11184:	ldr	r3, [pc, #1728]	; 1184c <__assert_fail@plt+0x990>
   11188:	ldr	r0, [pc, #1728]	; 11850 <__assert_fail@plt+0x994>
   1118c:	str	r3, [sp]
   11190:	ldr	r3, [pc, #1724]	; 11854 <__assert_fail@plt+0x998>
   11194:	str	r9, [sp, #4]
   11198:	ldr	r2, [pc, #1720]	; 11858 <__assert_fail@plt+0x99c>
   1119c:	ldr	r0, [r0]
   111a0:	ldr	r3, [r3]
   111a4:	ldr	r1, [pc, #1712]	; 1185c <__assert_fail@plt+0x9a0>
   111a8:	bl	13818 <__assert_fail@plt+0x295c>
   111ac:	mov	r0, r9
   111b0:	bl	10dc0 <exit@plt>
   111b4:	mov	r4, #1
   111b8:	b	10f28 <__assert_fail@plt+0x6c>
   111bc:	cmp	r8, #0
   111c0:	movne	r2, #0
   111c4:	andeq	r2, r4, #1
   111c8:	cmp	r2, #0
   111cc:	beq	11214 <__assert_fail@plt+0x358>
   111d0:	mov	r2, #5
   111d4:	ldr	r1, [pc, #1668]	; 11860 <__assert_fail@plt+0x9a4>
   111d8:	mov	r0, r9
   111dc:	bl	10ce8 <dcgettext@plt>
   111e0:	ldr	r1, [pc, #1612]	; 11834 <__assert_fail@plt+0x978>
   111e4:	mov	r4, r0
   111e8:	mov	r0, r9
   111ec:	bl	133c0 <__assert_fail@plt+0x2504>
   111f0:	ldr	r1, [pc, #1600]	; 11838 <__assert_fail@plt+0x97c>
   111f4:	mov	r5, r0
   111f8:	mov	r0, #1
   111fc:	bl	133c0 <__assert_fail@plt+0x2504>
   11200:	mov	r3, r5
   11204:	mov	r2, r4
   11208:	mov	r1, r9
   1120c:	str	r0, [sp]
   11210:	b	10fb4 <__assert_fail@plt+0xf8>
   11214:	ldrb	sl, [r5, #1]
   11218:	eor	sl, sl, #1
   1121c:	orrs	sl, r4, sl
   11220:	bne	11268 <__assert_fail@plt+0x3ac>
   11224:	mov	r2, #5
   11228:	ldr	r1, [pc, #1588]	; 11864 <__assert_fail@plt+0x9a8>
   1122c:	mov	r0, sl
   11230:	bl	10ce8 <dcgettext@plt>
   11234:	ldr	r1, [pc, #1580]	; 11868 <__assert_fail@plt+0x9ac>
   11238:	mov	r4, r0
   1123c:	mov	r0, sl
   11240:	bl	133c0 <__assert_fail@plt+0x2504>
   11244:	ldr	r1, [pc, #1512]	; 11834 <__assert_fail@plt+0x978>
   11248:	mov	r5, r0
   1124c:	mov	r0, #1
   11250:	bl	133c0 <__assert_fail@plt+0x2504>
   11254:	mov	r3, r5
   11258:	mov	r2, r4
   1125c:	mov	r1, sl
   11260:	str	r0, [sp]
   11264:	b	10fb4 <__assert_fail@plt+0xf8>
   11268:	cmp	r3, #0
   1126c:	movle	r2, #5
   11270:	ldrle	r1, [pc, #1524]	; 1186c <__assert_fail@plt+0x9b0>
   11274:	ble	1108c <__assert_fail@plt+0x1d0>
   11278:	cmp	r7, #0
   1127c:	beq	113f0 <__assert_fail@plt+0x534>
   11280:	add	r1, sp, #56	; 0x38
   11284:	mov	r0, r7
   11288:	bl	14f18 <__assert_fail@plt+0x405c>
   1128c:	subs	r1, r0, #0
   11290:	beq	112d0 <__assert_fail@plt+0x414>
   11294:	bl	10de4 <__errno_location@plt>
   11298:	mov	r2, #5
   1129c:	ldr	r1, [pc, #1484]	; 11870 <__assert_fail@plt+0x9b4>
   112a0:	ldr	r4, [r0]
   112a4:	mov	r0, #0
   112a8:	bl	10ce8 <dcgettext@plt>
   112ac:	mov	r1, r7
   112b0:	mov	r5, r0
   112b4:	mov	r0, #4
   112b8:	bl	131e4 <__assert_fail@plt+0x2328>
   112bc:	mov	r2, r5
   112c0:	mov	r3, r0
   112c4:	mov	r1, r4
   112c8:	mov	r0, #1
   112cc:	bl	10d60 <error@plt>
   112d0:	ldr	r3, [sp, #72]	; 0x48
   112d4:	and	r3, r3, #53248	; 0xd000
   112d8:	cmp	r3, #32768	; 0x8000
   112dc:	bne	11324 <__assert_fail@plt+0x468>
   112e0:	ldrd	r2, [sp, #104]	; 0x68
   112e4:	cmp	r2, #0
   112e8:	sbcs	r1, r3, #0
   112ec:	bge	11384 <__assert_fail@plt+0x4c8>
   112f0:	bl	10de4 <__errno_location@plt>
   112f4:	mov	r2, #5
   112f8:	ldr	r1, [pc, #1396]	; 11874 <__assert_fail@plt+0x9b8>
   112fc:	ldr	r4, [r0]
   11300:	mov	r0, #0
   11304:	bl	10ce8 <dcgettext@plt>
   11308:	ldr	r1, [r5, #4]
   1130c:	mov	r6, r0
   11310:	mov	r0, #4
   11314:	bl	131e4 <__assert_fail@plt+0x2328>
   11318:	mov	r2, r6
   1131c:	mov	r3, r0
   11320:	b	112c4 <__assert_fail@plt+0x408>
   11324:	mov	r0, r7
   11328:	bl	10d6c <open64@plt>
   1132c:	subs	r7, r0, #0
   11330:	blt	112f0 <__assert_fail@plt+0x434>
   11334:	mov	r3, #2
   11338:	str	r3, [sp]
   1133c:	mov	r2, #0
   11340:	mov	r3, #0
   11344:	bl	10d24 <lseek64@plt>
   11348:	mov	r3, r1
   1134c:	mov	r2, r0
   11350:	strd	r2, [sp, #40]	; 0x28
   11354:	bl	10de4 <__errno_location@plt>
   11358:	ldr	r1, [r0]
   1135c:	mov	r9, r0
   11360:	mov	r0, r7
   11364:	str	r1, [sp, #32]
   11368:	bl	10eb0 <close@plt>
   1136c:	ldrd	r2, [sp, #40]	; 0x28
   11370:	cmp	r2, #0
   11374:	sbcs	r1, r3, #0
   11378:	ldr	r1, [sp, #32]
   1137c:	strlt	r1, [r9]
   11380:	blt	112f0 <__assert_fail@plt+0x434>
   11384:	cmp	r4, #0
   11388:	beq	113e0 <__assert_fail@plt+0x524>
   1138c:	strd	r2, [sp, #32]
   11390:	ldrd	r2, [sp, #24]
   11394:	strd	r2, [sp, #24]
   11398:	ldrb	r1, [r5]
   1139c:	ldr	r3, [pc, #1236]	; 11878 <__assert_fail@plt+0x9bc>
   113a0:	sub	r6, r6, #4
   113a4:	cmp	r1, #0
   113a8:	ldr	r2, [pc, #1228]	; 1187c <__assert_fail@plt+0x9c0>
   113ac:	moveq	r2, r3
   113b0:	add	r3, fp, r6
   113b4:	mov	fp, #0
   113b8:	str	r2, [sp, #52]	; 0x34
   113bc:	str	r3, [sp, #48]	; 0x30
   113c0:	ldr	r3, [sp, #48]	; 0x30
   113c4:	ldr	r9, [r3, #4]!
   113c8:	cmp	r9, #0
   113cc:	str	r3, [sp, #48]	; 0x30
   113d0:	bne	11400 <__assert_fail@plt+0x544>
   113d4:	mov	r0, fp
   113d8:	add	sp, sp, #164	; 0xa4
   113dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113e0:	mvn	r0, #0
   113e4:	mvn	r1, #0
   113e8:	strd	r0, [sp, #32]
   113ec:	b	11394 <__assert_fail@plt+0x4d8>
   113f0:	mvn	r2, #0
   113f4:	mvn	r3, #0
   113f8:	strd	r2, [sp, #32]
   113fc:	b	11398 <__assert_fail@plt+0x4dc>
   11400:	ldr	r2, [pc, #1144]	; 11880 <__assert_fail@plt+0x9c4>
   11404:	ldr	r1, [sp, #52]	; 0x34
   11408:	mov	r0, r9
   1140c:	bl	10d6c <open64@plt>
   11410:	subs	r3, r0, #0
   11414:	str	r3, [sp, #40]	; 0x28
   11418:	ldr	r3, [pc, #1036]	; 1182c <__assert_fail@plt+0x970>
   1141c:	bge	11480 <__assert_fail@plt+0x5c4>
   11420:	ldrb	r3, [r3]
   11424:	cmp	r3, #0
   11428:	beq	1143c <__assert_fail@plt+0x580>
   1142c:	bl	10de4 <__errno_location@plt>
   11430:	ldr	r3, [r0]
   11434:	cmp	r3, #2
   11438:	beq	113c0 <__assert_fail@plt+0x504>
   1143c:	bl	10de4 <__errno_location@plt>
   11440:	ldr	r1, [pc, #1084]	; 11884 <__assert_fail@plt+0x9c8>
   11444:	mov	r2, #5
   11448:	ldr	r4, [r0]
   1144c:	mov	r0, #0
   11450:	bl	10ce8 <dcgettext@plt>
   11454:	mov	r1, r9
   11458:	mov	fp, sl
   1145c:	mov	r5, r0
   11460:	mov	r0, #4
   11464:	bl	131e4 <__assert_fail@plt+0x2328>
   11468:	mov	r2, r5
   1146c:	mov	r1, r4
   11470:	mov	r3, r0
   11474:	mov	r0, #0
   11478:	bl	10d60 <error@plt>
   1147c:	b	113c0 <__assert_fail@plt+0x504>
   11480:	ldrb	r4, [r3, #1]
   11484:	cmp	r4, #0
   11488:	bne	114a8 <__assert_fail@plt+0x5ec>
   1148c:	ldr	r3, [sp, #36]	; 0x24
   11490:	lsr	r3, r3, #31
   11494:	cmp	r8, #0
   11498:	moveq	r3, #0
   1149c:	andne	r3, r3, #1
   114a0:	cmp	r3, #0
   114a4:	beq	11694 <__assert_fail@plt+0x7d8>
   114a8:	add	r1, sp, #56	; 0x38
   114ac:	ldr	r0, [sp, #40]	; 0x28
   114b0:	bl	14f28 <__assert_fail@plt+0x406c>
   114b4:	cmp	r0, #0
   114b8:	beq	11528 <__assert_fail@plt+0x66c>
   114bc:	bl	10de4 <__errno_location@plt>
   114c0:	ldr	r1, [pc, #960]	; 11888 <__assert_fail@plt+0x9cc>
   114c4:	mov	r2, #5
   114c8:	ldr	r4, [r0]
   114cc:	mov	r0, #0
   114d0:	bl	10ce8 <dcgettext@plt>
   114d4:	mov	r1, r9
   114d8:	mov	r5, r0
   114dc:	mov	r0, #4
   114e0:	bl	131e4 <__assert_fail@plt+0x2328>
   114e4:	mov	r2, r5
   114e8:	mov	r1, r4
   114ec:	mov	r3, r0
   114f0:	mov	r0, #0
   114f4:	bl	10d60 <error@plt>
   114f8:	mov	r4, #0
   114fc:	ldr	r0, [sp, #40]	; 0x28
   11500:	bl	10eb0 <close@plt>
   11504:	cmp	r0, #0
   11508:	eoreq	r4, r4, #1
   1150c:	orreq	fp, fp, r4
   11510:	beq	113c0 <__assert_fail@plt+0x504>
   11514:	bl	10de4 <__errno_location@plt>
   11518:	mov	r2, #5
   1151c:	ldr	r1, [pc, #872]	; 1188c <__assert_fail@plt+0x9d0>
   11520:	ldr	r4, [r0]
   11524:	b	1144c <__assert_fail@plt+0x590>
   11528:	cmp	r4, #0
   1152c:	beq	11694 <__assert_fail@plt+0x7d8>
   11530:	ldr	r4, [sp, #112]	; 0x70
   11534:	sub	r3, r4, #1
   11538:	cmn	r3, #-536870911	; 0xe0000001
   1153c:	ldrd	r2, [sp, #24]
   11540:	movhi	r4, #512	; 0x200
   11544:	cmp	r2, #0
   11548:	sbcs	r3, r3, #0
   1154c:	bge	11678 <__assert_fail@plt+0x7bc>
   11550:	ldrd	r6, [sp, #24]
   11554:	mvn	r3, #0
   11558:	mvn	r2, #0
   1155c:	cmp	r7, r3
   11560:	cmpeq	r6, r2
   11564:	beq	11594 <__assert_fail@plt+0x6d8>
   11568:	mov	r2, r6
   1156c:	mov	r3, r7
   11570:	mov	r0, #0
   11574:	mov	r1, #-2147483648	; 0x80000000
   11578:	bl	14c90 <__assert_fail@plt+0x3dd4>
   1157c:	mov	r2, r4
   11580:	asr	r3, r4, #31
   11584:	cmp	r0, r2
   11588:	sbcs	r3, r1, r3
   1158c:	movlt	r0, #1
   11590:	movge	r0, #0
   11594:	cmp	r0, #0
   11598:	bne	117a0 <__assert_fail@plt+0x8e4>
   1159c:	ldr	r3, [sp, #28]
   115a0:	ldr	r2, [sp, #24]
   115a4:	asr	r1, r4, #31
   115a8:	mul	r3, r4, r3
   115ac:	umull	r4, r5, r4, r2
   115b0:	mla	r3, r2, r1, r3
   115b4:	add	r5, r3, r5
   115b8:	cmp	r8, #0
   115bc:	beq	116fc <__assert_fail@plt+0x840>
   115c0:	ldrd	r0, [sp, #32]
   115c4:	mvn	r3, #0
   115c8:	mvn	r2, #0
   115cc:	cmp	r1, r3
   115d0:	cmpeq	r0, r2
   115d4:	bne	116dc <__assert_fail@plt+0x820>
   115d8:	ldr	r3, [sp, #72]	; 0x48
   115dc:	and	r3, r3, #53248	; 0xd000
   115e0:	cmp	r3, #32768	; 0x8000
   115e4:	bne	1169c <__assert_fail@plt+0x7e0>
   115e8:	ldrd	r6, [sp, #104]	; 0x68
   115ec:	cmp	r6, #0
   115f0:	sbcs	r3, r7, #0
   115f4:	movlt	r2, #5
   115f8:	ldrlt	r1, [pc, #656]	; 11890 <__assert_fail@plt+0x9d4>
   115fc:	blt	117e4 <__assert_fail@plt+0x928>
   11600:	cmp	r8, #2
   11604:	bne	116e4 <__assert_fail@plt+0x828>
   11608:	cmp	r6, r4
   1160c:	sbcs	r3, r7, r5
   11610:	movlt	r6, r4
   11614:	movlt	r7, r5
   11618:	mov	r2, r6
   1161c:	mov	r3, r7
   11620:	ldr	r0, [sp, #40]	; 0x28
   11624:	bl	10cc4 <ftruncate64@plt>
   11628:	cmp	r0, #0
   1162c:	moveq	r4, sl
   11630:	beq	114fc <__assert_fail@plt+0x640>
   11634:	bl	10de4 <__errno_location@plt>
   11638:	mov	r2, #5
   1163c:	ldr	r1, [pc, #592]	; 11894 <__assert_fail@plt+0x9d8>
   11640:	ldr	r4, [r0]
   11644:	mov	r0, #0
   11648:	bl	10ce8 <dcgettext@plt>
   1164c:	mov	r1, r9
   11650:	mov	r5, r0
   11654:	mov	r0, #4
   11658:	bl	131e4 <__assert_fail@plt+0x2328>
   1165c:	strd	r6, [sp]
   11660:	mov	r2, r5
   11664:	mov	r1, r4
   11668:	mov	r3, r0
   1166c:	mov	r0, #0
   11670:	bl	10d60 <error@plt>
   11674:	b	114f8 <__assert_fail@plt+0x63c>
   11678:	mov	r2, r4
   1167c:	asr	r3, r4, #31
   11680:	mvn	r0, #0
   11684:	mvn	r1, #-2147483648	; 0x80000000
   11688:	bl	14c90 <__assert_fail@plt+0x3dd4>
   1168c:	ldrd	r2, [sp, #24]
   11690:	b	11584 <__assert_fail@plt+0x6c8>
   11694:	ldrd	r4, [sp, #24]
   11698:	b	115b8 <__assert_fail@plt+0x6fc>
   1169c:	mov	r3, #2
   116a0:	mov	r2, #0
   116a4:	str	r3, [sp]
   116a8:	ldr	r0, [sp, #40]	; 0x28
   116ac:	mov	r3, r2
   116b0:	bl	10d24 <lseek64@plt>
   116b4:	cmp	r0, #0
   116b8:	sbcs	r3, r1, #0
   116bc:	mov	r6, r0
   116c0:	mov	r7, r1
   116c4:	bge	11600 <__assert_fail@plt+0x744>
   116c8:	bl	10de4 <__errno_location@plt>
   116cc:	mov	r2, #5
   116d0:	ldr	r1, [pc, #412]	; 11874 <__assert_fail@plt+0x9b8>
   116d4:	ldr	r4, [r0]
   116d8:	b	114cc <__assert_fail@plt+0x610>
   116dc:	ldrd	r6, [sp, #32]
   116e0:	b	11600 <__assert_fail@plt+0x744>
   116e4:	cmp	r8, #3
   116e8:	bne	11718 <__assert_fail@plt+0x85c>
   116ec:	cmp	r6, r4
   116f0:	sbcs	r3, r7, r5
   116f4:	movlt	r4, r6
   116f8:	movlt	r5, r7
   116fc:	cmp	r4, #0
   11700:	sbcs	r3, r5, #0
   11704:	mov	r6, r4
   11708:	movlt	r6, #0
   1170c:	mov	r7, r5
   11710:	movlt	r7, r6
   11714:	b	11618 <__assert_fail@plt+0x75c>
   11718:	cmp	r8, #4
   1171c:	mov	r2, r4
   11720:	mov	r3, r5
   11724:	bne	11740 <__assert_fail@plt+0x884>
   11728:	mov	r0, r6
   1172c:	mov	r1, r7
   11730:	bl	14c90 <__assert_fail@plt+0x3dd4>
   11734:	subs	r4, r6, r2
   11738:	sbc	r5, r7, r3
   1173c:	b	116fc <__assert_fail@plt+0x840>
   11740:	cmp	r8, #5
   11744:	bne	11764 <__assert_fail@plt+0x8a8>
   11748:	mov	r0, r6
   1174c:	mov	r1, r7
   11750:	bl	14c90 <__assert_fail@plt+0x3dd4>
   11754:	orrs	r1, r2, r3
   11758:	beq	11770 <__assert_fail@plt+0x8b4>
   1175c:	subs	r2, r4, r2
   11760:	sbc	r3, r5, r3
   11764:	cmp	r2, #0
   11768:	sbcs	r1, r3, #0
   1176c:	blt	11794 <__assert_fail@plt+0x8d8>
   11770:	mvn	r0, #0
   11774:	subs	r0, r0, r2
   11778:	mvn	r1, #-2147483648	; 0x80000000
   1177c:	sbc	r1, r1, r3
   11780:	cmp	r0, r6
   11784:	sbcs	r1, r1, r7
   11788:	movlt	r2, #5
   1178c:	ldrlt	r1, [pc, #260]	; 11898 <__assert_fail@plt+0x9dc>
   11790:	blt	117e4 <__assert_fail@plt+0x928>
   11794:	adds	r4, r6, r2
   11798:	adc	r5, r7, r3
   1179c:	b	116fc <__assert_fail@plt+0x840>
   117a0:	mov	r2, #5
   117a4:	ldr	r1, [pc, #240]	; 1189c <__assert_fail@plt+0x9e0>
   117a8:	mov	r0, #0
   117ac:	bl	10ce8 <dcgettext@plt>
   117b0:	mov	r1, r9
   117b4:	mov	r5, r0
   117b8:	mov	r0, #4
   117bc:	bl	131e4 <__assert_fail@plt+0x2328>
   117c0:	ldrd	r2, [sp, #24]
   117c4:	mov	r1, #0
   117c8:	str	r4, [sp, #8]
   117cc:	strd	r2, [sp]
   117d0:	mov	r2, r5
   117d4:	str	r0, [sp, #12]
   117d8:	mov	r0, r1
   117dc:	bl	10d60 <error@plt>
   117e0:	b	114f8 <__assert_fail@plt+0x63c>
   117e4:	mov	r0, #0
   117e8:	bl	10ce8 <dcgettext@plt>
   117ec:	mov	r1, r9
   117f0:	mov	r4, r0
   117f4:	mov	r0, #4
   117f8:	bl	131e4 <__assert_fail@plt+0x2328>
   117fc:	mov	r2, r4
   11800:	mov	r1, #0
   11804:	mov	r3, r0
   11808:	b	114f0 <__assert_fail@plt+0x634>
   1180c:	andeq	r5, r1, r1, ror #10
   11810:	andeq	r5, r1, r2, ror #10
   11814:			; <UNDEFINED> instruction: 0x000154bf
   11818:			; <UNDEFINED> instruction: 0x00011cb4
   1181c:	andeq	r6, r2, r8, asr #2
   11820:	andeq	r4, r1, ip, ror pc
   11824:	ldrdeq	r5, [r1], -ip
   11828:	andeq	r6, r2, r8, lsr r1
   1182c:	andeq	r6, r2, r0, asr r1
   11830:	andeq	r5, r1, r3, ror #11
   11834:	andeq	r5, r1, r4, lsl #12
   11838:	andeq	r5, r1, fp, lsl #12
   1183c:	andeq	r5, r1, sl, ror r5
   11840:	andeq	r5, r1, r0, lsr #11
   11844:	andeq	r5, r1, pc, lsr #11
   11848:			; <UNDEFINED> instruction: 0x000155bd
   1184c:	andeq	r5, r1, lr, asr #11
   11850:	andeq	r6, r2, r4, asr #2
   11854:	andeq	r6, r2, r8, ror #1
   11858:			; <UNDEFINED> instruction: 0x000154bb
   1185c:	andeq	r4, r1, ip, ror #31
   11860:	andeq	r5, r1, r7, lsl r6
   11864:	andeq	r5, r1, lr, lsr r6
   11868:	andeq	r5, r1, lr, asr r6
   1186c:	andeq	r5, r1, sl, ror #12
   11870:	andeq	r5, r1, pc, ror r6
   11874:	andeq	r5, r1, lr, lsl #13
   11878:	andeq	r0, r0, r1, asr #16
   1187c:	andeq	r0, r0, r1, lsl #16
   11880:			; <UNDEFINED> instruction: 0x000001b6
   11884:	andeq	r5, r1, r8, lsr #13
   11888:	andeq	r5, r1, r3, asr #13
   1188c:	andeq	r5, r1, r1, lsr #14
   11890:	ldrdeq	r5, [r1], -r3
   11894:	strdeq	r5, [r1], -sp
   11898:	andeq	r5, r1, r2, ror #14
   1189c:	andeq	r5, r1, r4, lsr r7
   118a0:	mov	fp, #0
   118a4:	mov	lr, #0
   118a8:	pop	{r1}		; (ldr r1, [sp], #4)
   118ac:	mov	r2, sp
   118b0:	push	{r2}		; (str r2, [sp, #-4]!)
   118b4:	push	{r0}		; (str r0, [sp, #-4]!)
   118b8:	ldr	ip, [pc, #16]	; 118d0 <__assert_fail@plt+0xa14>
   118bc:	push	{ip}		; (str ip, [sp, #-4]!)
   118c0:	ldr	r0, [pc, #12]	; 118d4 <__assert_fail@plt+0xa18>
   118c4:	ldr	r3, [pc, #12]	; 118d8 <__assert_fail@plt+0xa1c>
   118c8:	bl	10d84 <__libc_start_main@plt>
   118cc:	bl	10ea4 <abort@plt>
   118d0:	strdeq	r4, [r1], -ip
   118d4:	andeq	r0, r1, r8, asr #29
   118d8:	muleq	r1, ip, lr
   118dc:	ldr	r3, [pc, #20]	; 118f8 <__assert_fail@plt+0xa3c>
   118e0:	ldr	r2, [pc, #20]	; 118fc <__assert_fail@plt+0xa40>
   118e4:	add	r3, pc, r3
   118e8:	ldr	r2, [r3, r2]
   118ec:	cmp	r2, #0
   118f0:	bxeq	lr
   118f4:	b	10d9c <__gmon_start__@plt>
   118f8:	andeq	r4, r1, r4, lsl r7
   118fc:	ldrdeq	r0, [r0], -ip
   11900:	ldr	r3, [pc, #28]	; 11924 <__assert_fail@plt+0xa68>
   11904:	ldr	r0, [pc, #28]	; 11928 <__assert_fail@plt+0xa6c>
   11908:	sub	r3, r3, r0
   1190c:	cmp	r3, #6
   11910:	bxls	lr
   11914:	ldr	r3, [pc, #16]	; 1192c <__assert_fail@plt+0xa70>
   11918:	cmp	r3, #0
   1191c:	bxeq	lr
   11920:	bx	r3
   11924:	andeq	r6, r2, r3, lsr r1
   11928:	andeq	r6, r2, r0, lsr r1
   1192c:	andeq	r0, r0, r0
   11930:	ldr	r1, [pc, #36]	; 1195c <__assert_fail@plt+0xaa0>
   11934:	ldr	r0, [pc, #36]	; 11960 <__assert_fail@plt+0xaa4>
   11938:	sub	r1, r1, r0
   1193c:	asr	r1, r1, #2
   11940:	add	r1, r1, r1, lsr #31
   11944:	asrs	r1, r1, #1
   11948:	bxeq	lr
   1194c:	ldr	r3, [pc, #16]	; 11964 <__assert_fail@plt+0xaa8>
   11950:	cmp	r3, #0
   11954:	bxeq	lr
   11958:	bx	r3
   1195c:	andeq	r6, r2, r0, lsr r1
   11960:	andeq	r6, r2, r0, lsr r1
   11964:	andeq	r0, r0, r0
   11968:	push	{r4, lr}
   1196c:	ldr	r4, [pc, #24]	; 1198c <__assert_fail@plt+0xad0>
   11970:	ldrb	r3, [r4]
   11974:	cmp	r3, #0
   11978:	popne	{r4, pc}
   1197c:	bl	11900 <__assert_fail@plt+0xa44>
   11980:	mov	r3, #1
   11984:	strb	r3, [r4]
   11988:	pop	{r4, pc}
   1198c:	andeq	r6, r2, ip, asr #2
   11990:	ldr	r0, [pc, #40]	; 119c0 <__assert_fail@plt+0xb04>
   11994:	ldr	r3, [r0]
   11998:	cmp	r3, #0
   1199c:	bne	119a4 <__assert_fail@plt+0xae8>
   119a0:	b	11930 <__assert_fail@plt+0xa74>
   119a4:	ldr	r3, [pc, #24]	; 119c4 <__assert_fail@plt+0xb08>
   119a8:	cmp	r3, #0
   119ac:	beq	119a0 <__assert_fail@plt+0xae4>
   119b0:	push	{r4, lr}
   119b4:	blx	r3
   119b8:	pop	{r4, lr}
   119bc:	b	11930 <__assert_fail@plt+0xa74>
   119c0:	andeq	r5, r2, r4, lsl pc
   119c4:	andeq	r0, r0, r0
   119c8:	subs	r5, r0, #0
   119cc:	push	{r7, lr}
   119d0:	sub	sp, sp, #56	; 0x38
   119d4:	ldr	r4, [pc, #596]	; 11c30 <__assert_fail@plt+0xd74>
   119d8:	beq	11a10 <__assert_fail@plt+0xb54>
   119dc:	ldr	r3, [pc, #592]	; 11c34 <__assert_fail@plt+0xd78>
   119e0:	mov	r2, #5
   119e4:	ldr	r1, [pc, #588]	; 11c38 <__assert_fail@plt+0xd7c>
   119e8:	mov	r0, #0
   119ec:	ldr	r6, [r3]
   119f0:	bl	10ce8 <dcgettext@plt>
   119f4:	ldr	r3, [r4]
   119f8:	mov	r1, #1
   119fc:	mov	r2, r0
   11a00:	mov	r0, r6
   11a04:	bl	10e20 <__fprintf_chk@plt>
   11a08:	mov	r0, r5
   11a0c:	bl	10dc0 <exit@plt>
   11a10:	mov	r2, #5
   11a14:	ldr	r1, [pc, #544]	; 11c3c <__assert_fail@plt+0xd80>
   11a18:	bl	10ce8 <dcgettext@plt>
   11a1c:	ldr	r2, [r4]
   11a20:	ldr	r4, [pc, #536]	; 11c40 <__assert_fail@plt+0xd84>
   11a24:	ldr	r8, [pc, #536]	; 11c44 <__assert_fail@plt+0xd88>
   11a28:	mov	r6, r5
   11a2c:	mov	r1, r0
   11a30:	mov	r0, #1
   11a34:	bl	10e08 <__printf_chk@plt>
   11a38:	mov	r2, #5
   11a3c:	ldr	r1, [pc, #516]	; 11c48 <__assert_fail@plt+0xd8c>
   11a40:	mov	r0, r5
   11a44:	bl	10ce8 <dcgettext@plt>
   11a48:	ldr	r1, [r4]
   11a4c:	bl	10c64 <fputs_unlocked@plt>
   11a50:	mov	r2, #5
   11a54:	ldr	r1, [pc, #496]	; 11c4c <__assert_fail@plt+0xd90>
   11a58:	mov	r0, r5
   11a5c:	bl	10ce8 <dcgettext@plt>
   11a60:	ldr	r1, [r4]
   11a64:	bl	10c64 <fputs_unlocked@plt>
   11a68:	mov	r2, #5
   11a6c:	ldr	r1, [pc, #476]	; 11c50 <__assert_fail@plt+0xd94>
   11a70:	mov	r0, r5
   11a74:	bl	10ce8 <dcgettext@plt>
   11a78:	ldr	r1, [r4]
   11a7c:	bl	10c64 <fputs_unlocked@plt>
   11a80:	mov	r2, #5
   11a84:	ldr	r1, [pc, #456]	; 11c54 <__assert_fail@plt+0xd98>
   11a88:	mov	r0, r5
   11a8c:	bl	10ce8 <dcgettext@plt>
   11a90:	ldr	r1, [r4]
   11a94:	bl	10c64 <fputs_unlocked@plt>
   11a98:	mov	r2, #5
   11a9c:	ldr	r1, [pc, #436]	; 11c58 <__assert_fail@plt+0xd9c>
   11aa0:	mov	r0, r5
   11aa4:	bl	10ce8 <dcgettext@plt>
   11aa8:	ldr	r1, [r4]
   11aac:	bl	10c64 <fputs_unlocked@plt>
   11ab0:	mov	r2, #5
   11ab4:	ldr	r1, [pc, #416]	; 11c5c <__assert_fail@plt+0xda0>
   11ab8:	mov	r0, r5
   11abc:	bl	10ce8 <dcgettext@plt>
   11ac0:	ldr	r1, [r4]
   11ac4:	bl	10c64 <fputs_unlocked@plt>
   11ac8:	mov	r2, #5
   11acc:	ldr	r1, [pc, #396]	; 11c60 <__assert_fail@plt+0xda4>
   11ad0:	mov	r0, r5
   11ad4:	bl	10ce8 <dcgettext@plt>
   11ad8:	ldr	r1, [r4]
   11adc:	bl	10c64 <fputs_unlocked@plt>
   11ae0:	mov	r2, #5
   11ae4:	ldr	r1, [pc, #376]	; 11c64 <__assert_fail@plt+0xda8>
   11ae8:	mov	r0, r5
   11aec:	bl	10ce8 <dcgettext@plt>
   11af0:	ldr	r1, [r4]
   11af4:	bl	10c64 <fputs_unlocked@plt>
   11af8:	mov	r2, #5
   11afc:	ldr	r1, [pc, #356]	; 11c68 <__assert_fail@plt+0xdac>
   11b00:	mov	r0, r5
   11b04:	bl	10ce8 <dcgettext@plt>
   11b08:	ldr	r1, [r4]
   11b0c:	bl	10c64 <fputs_unlocked@plt>
   11b10:	ldr	lr, [pc, #340]	; 11c6c <__assert_fail@plt+0xdb0>
   11b14:	mov	ip, sp
   11b18:	ldm	lr!, {r0, r1, r2, r3}
   11b1c:	stmia	ip!, {r0, r1, r2, r3}
   11b20:	ldm	lr!, {r0, r1, r2, r3}
   11b24:	stmia	ip!, {r0, r1, r2, r3}
   11b28:	ldm	lr!, {r0, r1, r2, r3}
   11b2c:	stmia	ip!, {r0, r1, r2, r3}
   11b30:	ldm	lr, {r0, r1}
   11b34:	stm	ip, {r0, r1}
   11b38:	ldr	r1, [sp, r6]
   11b3c:	add	r7, sp, r6
   11b40:	cmp	r1, #0
   11b44:	bne	11be8 <__assert_fail@plt+0xd2c>
   11b48:	ldr	r6, [r7, #4]
   11b4c:	ldr	r7, [pc, #240]	; 11c44 <__assert_fail@plt+0xd88>
   11b50:	cmp	r6, #0
   11b54:	mov	r2, #5
   11b58:	ldr	r1, [pc, #272]	; 11c70 <__assert_fail@plt+0xdb4>
   11b5c:	mov	r0, #0
   11b60:	moveq	r6, r7
   11b64:	bl	10ce8 <dcgettext@plt>
   11b68:	ldr	r3, [pc, #260]	; 11c74 <__assert_fail@plt+0xdb8>
   11b6c:	ldr	r2, [pc, #260]	; 11c78 <__assert_fail@plt+0xdbc>
   11b70:	mov	r1, r0
   11b74:	mov	r0, #1
   11b78:	bl	10e08 <__printf_chk@plt>
   11b7c:	mov	r1, #0
   11b80:	mov	r0, #5
   11b84:	bl	10e50 <setlocale@plt>
   11b88:	cmp	r0, #0
   11b8c:	bne	11c00 <__assert_fail@plt+0xd44>
   11b90:	mov	r2, #5
   11b94:	ldr	r1, [pc, #224]	; 11c7c <__assert_fail@plt+0xdc0>
   11b98:	mov	r0, #0
   11b9c:	bl	10ce8 <dcgettext@plt>
   11ba0:	ldr	r3, [pc, #156]	; 11c44 <__assert_fail@plt+0xd88>
   11ba4:	ldr	r2, [pc, #200]	; 11c74 <__assert_fail@plt+0xdb8>
   11ba8:	mov	r1, r0
   11bac:	mov	r0, #1
   11bb0:	bl	10e08 <__printf_chk@plt>
   11bb4:	mov	r2, #5
   11bb8:	ldr	r1, [pc, #192]	; 11c80 <__assert_fail@plt+0xdc4>
   11bbc:	mov	r0, #0
   11bc0:	bl	10ce8 <dcgettext@plt>
   11bc4:	ldr	r2, [pc, #184]	; 11c84 <__assert_fail@plt+0xdc8>
   11bc8:	cmp	r6, r7
   11bcc:	ldr	r3, [pc, #180]	; 11c88 <__assert_fail@plt+0xdcc>
   11bd0:	moveq	r3, r2
   11bd4:	mov	r2, r6
   11bd8:	mov	r1, r0
   11bdc:	mov	r0, #1
   11be0:	bl	10e08 <__printf_chk@plt>
   11be4:	b	11a08 <__assert_fail@plt+0xb4c>
   11be8:	mov	r0, r8
   11bec:	bl	10c7c <strcmp@plt>
   11bf0:	add	r6, r6, #8
   11bf4:	cmp	r0, #0
   11bf8:	bne	11b38 <__assert_fail@plt+0xc7c>
   11bfc:	b	11b48 <__assert_fail@plt+0xc8c>
   11c00:	mov	r2, #3
   11c04:	ldr	r1, [pc, #128]	; 11c8c <__assert_fail@plt+0xdd0>
   11c08:	bl	10e98 <strncmp@plt>
   11c0c:	cmp	r0, #0
   11c10:	beq	11b90 <__assert_fail@plt+0xcd4>
   11c14:	mov	r2, #5
   11c18:	ldr	r1, [pc, #112]	; 11c90 <__assert_fail@plt+0xdd4>
   11c1c:	mov	r0, #0
   11c20:	bl	10ce8 <dcgettext@plt>
   11c24:	ldr	r1, [r4]
   11c28:	bl	10c64 <fputs_unlocked@plt>
   11c2c:	b	11b90 <__assert_fail@plt+0xcd4>
   11c30:	andeq	r6, r2, r0, ror #2
   11c34:	andeq	r6, r2, r0, asr #2
   11c38:	strdeq	r4, [r1], -r5
   11c3c:	andeq	r5, r1, ip, lsl r0
   11c40:	andeq	r6, r2, r4, asr #2
   11c44:	andeq	r4, r1, ip, ror #31
   11c48:	andeq	r5, r1, r9, lsr r0
   11c4c:	andeq	r5, r1, ip, asr #2
   11c50:	muleq	r1, r7, r1
   11c54:	andeq	r5, r1, r9, asr #3
   11c58:	andeq	r5, r1, r6, lsl r2
   11c5c:	andeq	r5, r1, r6, lsl #5
   11c60:			; <UNDEFINED> instruction: 0x000152b3
   11c64:	andeq	r5, r1, r9, ror #5
   11c68:			; <UNDEFINED> instruction: 0x000153bd
   11c6c:	andeq	r4, r1, r4, asr #30
   11c70:	andeq	r5, r1, ip, ror r4
   11c74:	muleq	r1, r3, r4
   11c78:			; <UNDEFINED> instruction: 0x000154bb
   11c7c:	andeq	r5, r1, r4, lsl r5
   11c80:	andeq	r5, r1, pc, lsr #10
   11c84:	andeq	r5, r1, r1, lsr #15
   11c88:	andeq	r5, r1, r1, ror #10
   11c8c:	andeq	r5, r1, r9, asr #9
   11c90:	andeq	r5, r1, sp, asr #9
   11c94:	ldr	r3, [pc, #4]	; 11ca0 <__assert_fail@plt+0xde4>
   11c98:	str	r0, [r3]
   11c9c:	bx	lr
   11ca0:	andeq	r6, r2, r8, asr r1
   11ca4:	ldr	r3, [pc, #4]	; 11cb0 <__assert_fail@plt+0xdf4>
   11ca8:	strb	r0, [r3, #4]
   11cac:	bx	lr
   11cb0:	andeq	r6, r2, r8, asr r1
   11cb4:	ldr	r3, [pc, #192]	; 11d7c <__assert_fail@plt+0xec0>
   11cb8:	push	{r0, r1, r4, r5, r6, lr}
   11cbc:	ldr	r0, [r3]
   11cc0:	bl	14444 <__assert_fail@plt+0x3588>
   11cc4:	cmp	r0, #0
   11cc8:	beq	11d60 <__assert_fail@plt+0xea4>
   11ccc:	ldr	r3, [pc, #172]	; 11d80 <__assert_fail@plt+0xec4>
   11cd0:	mov	r4, r3
   11cd4:	ldrb	r2, [r3, #4]
   11cd8:	cmp	r2, #0
   11cdc:	beq	11cf0 <__assert_fail@plt+0xe34>
   11ce0:	bl	10de4 <__errno_location@plt>
   11ce4:	ldr	r3, [r0]
   11ce8:	cmp	r3, #32
   11cec:	beq	11d60 <__assert_fail@plt+0xea4>
   11cf0:	mov	r2, #5
   11cf4:	ldr	r1, [pc, #136]	; 11d84 <__assert_fail@plt+0xec8>
   11cf8:	mov	r0, #0
   11cfc:	bl	10ce8 <dcgettext@plt>
   11d00:	ldr	r4, [r4]
   11d04:	cmp	r4, #0
   11d08:	mov	r5, r0
   11d0c:	beq	11d44 <__assert_fail@plt+0xe88>
   11d10:	bl	10de4 <__errno_location@plt>
   11d14:	ldr	r6, [r0]
   11d18:	mov	r0, r4
   11d1c:	bl	13278 <__assert_fail@plt+0x23bc>
   11d20:	str	r5, [sp]
   11d24:	ldr	r2, [pc, #92]	; 11d88 <__assert_fail@plt+0xecc>
   11d28:	mov	r1, r6
   11d2c:	mov	r3, r0
   11d30:	mov	r0, #0
   11d34:	bl	10d60 <error@plt>
   11d38:	ldr	r3, [pc, #76]	; 11d8c <__assert_fail@plt+0xed0>
   11d3c:	ldr	r0, [r3]
   11d40:	bl	10ca0 <_exit@plt>
   11d44:	bl	10de4 <__errno_location@plt>
   11d48:	mov	r3, r5
   11d4c:	ldr	r2, [pc, #60]	; 11d90 <__assert_fail@plt+0xed4>
   11d50:	ldr	r1, [r0]
   11d54:	mov	r0, r4
   11d58:	bl	10d60 <error@plt>
   11d5c:	b	11d38 <__assert_fail@plt+0xe7c>
   11d60:	ldr	r3, [pc, #44]	; 11d94 <__assert_fail@plt+0xed8>
   11d64:	ldr	r0, [r3]
   11d68:	bl	14444 <__assert_fail@plt+0x3588>
   11d6c:	cmp	r0, #0
   11d70:	bne	11d38 <__assert_fail@plt+0xe7c>
   11d74:	add	sp, sp, #8
   11d78:	pop	{r4, r5, r6, pc}
   11d7c:	andeq	r6, r2, r4, asr #2
   11d80:	andeq	r6, r2, r8, asr r1
   11d84:	andeq	r5, r1, sl, lsl #16
   11d88:	andeq	r5, r1, r6, lsl r8
   11d8c:	andeq	r6, r2, ip, ror #1
   11d90:	andeq	r5, r1, sl, lsl r8
   11d94:	andeq	r6, r2, r0, asr #2
   11d98:	push	{r4, r5, r6, lr}
   11d9c:	subs	r5, r0, #0
   11da0:	bne	11db8 <__assert_fail@plt+0xefc>
   11da4:	ldr	r3, [pc, #124]	; 11e28 <__assert_fail@plt+0xf6c>
   11da8:	ldr	r0, [pc, #124]	; 11e2c <__assert_fail@plt+0xf70>
   11dac:	ldr	r1, [r3]
   11db0:	bl	10e8c <fputs@plt>
   11db4:	bl	10ea4 <abort@plt>
   11db8:	mov	r1, #47	; 0x2f
   11dbc:	bl	10e5c <strrchr@plt>
   11dc0:	cmp	r0, #0
   11dc4:	addne	r4, r0, #1
   11dc8:	moveq	r4, r5
   11dcc:	sub	r3, r4, r5
   11dd0:	cmp	r3, #6
   11dd4:	ble	11e14 <__assert_fail@plt+0xf58>
   11dd8:	mov	r2, #7
   11ddc:	ldr	r1, [pc, #76]	; 11e30 <__assert_fail@plt+0xf74>
   11de0:	sub	r0, r4, #7
   11de4:	bl	10e98 <strncmp@plt>
   11de8:	cmp	r0, #0
   11dec:	bne	11e14 <__assert_fail@plt+0xf58>
   11df0:	mov	r2, #3
   11df4:	ldr	r1, [pc, #56]	; 11e34 <__assert_fail@plt+0xf78>
   11df8:	mov	r0, r4
   11dfc:	bl	10e98 <strncmp@plt>
   11e00:	cmp	r0, #0
   11e04:	movne	r5, r4
   11e08:	ldreq	r3, [pc, #40]	; 11e38 <__assert_fail@plt+0xf7c>
   11e0c:	addeq	r5, r4, #3
   11e10:	streq	r5, [r3]
   11e14:	ldr	r3, [pc, #32]	; 11e3c <__assert_fail@plt+0xf80>
   11e18:	str	r5, [r3]
   11e1c:	ldr	r3, [pc, #28]	; 11e40 <__assert_fail@plt+0xf84>
   11e20:	str	r5, [r3]
   11e24:	pop	{r4, r5, r6, pc}
   11e28:	andeq	r6, r2, r0, asr #2
   11e2c:	andeq	r5, r1, sp, lsl r8
   11e30:	andeq	r5, r1, r5, asr r8
   11e34:	andeq	r5, r1, sp, asr r8
   11e38:	andeq	r6, r2, r0, lsr r1
   11e3c:	andeq	r6, r2, r0, ror #2
   11e40:	andeq	r6, r2, r4, lsr r1
   11e44:	push	{r4, r5, r6, lr}
   11e48:	mov	r2, #48	; 0x30
   11e4c:	mov	r5, r1
   11e50:	mov	r1, #0
   11e54:	mov	r4, r0
   11e58:	bl	10dfc <memset@plt>
   11e5c:	cmp	r5, #10
   11e60:	bne	11e68 <__assert_fail@plt+0xfac>
   11e64:	bl	10ea4 <abort@plt>
   11e68:	str	r5, [r4]
   11e6c:	mov	r0, r4
   11e70:	pop	{r4, r5, r6, pc}
   11e74:	push	{r4, r5, r6, lr}
   11e78:	mov	r4, r0
   11e7c:	mov	r5, r1
   11e80:	bl	14694 <__assert_fail@plt+0x37d8>
   11e84:	ldrb	r3, [r0]
   11e88:	bic	r3, r3, #32
   11e8c:	cmp	r3, #85	; 0x55
   11e90:	bne	11f00 <__assert_fail@plt+0x1044>
   11e94:	ldrb	r3, [r0, #1]
   11e98:	bic	r3, r3, #32
   11e9c:	cmp	r3, #84	; 0x54
   11ea0:	bne	11ed8 <__assert_fail@plt+0x101c>
   11ea4:	ldrb	r3, [r0, #2]
   11ea8:	bic	r3, r3, #32
   11eac:	cmp	r3, #70	; 0x46
   11eb0:	bne	11ed8 <__assert_fail@plt+0x101c>
   11eb4:	ldrb	r3, [r0, #3]
   11eb8:	cmp	r3, #45	; 0x2d
   11ebc:	bne	11ed8 <__assert_fail@plt+0x101c>
   11ec0:	ldrb	r3, [r0, #4]
   11ec4:	cmp	r3, #56	; 0x38
   11ec8:	bne	11ed8 <__assert_fail@plt+0x101c>
   11ecc:	ldrb	r3, [r0, #5]
   11ed0:	cmp	r3, #0
   11ed4:	beq	11eec <__assert_fail@plt+0x1030>
   11ed8:	ldr	r1, [pc, #144]	; 11f70 <__assert_fail@plt+0x10b4>
   11edc:	ldr	r0, [pc, #144]	; 11f74 <__assert_fail@plt+0x10b8>
   11ee0:	cmp	r5, #9
   11ee4:	movne	r0, r1
   11ee8:	pop	{r4, r5, r6, pc}
   11eec:	ldrb	r3, [r4]
   11ef0:	ldr	r1, [pc, #128]	; 11f78 <__assert_fail@plt+0x10bc>
   11ef4:	ldr	r0, [pc, #128]	; 11f7c <__assert_fail@plt+0x10c0>
   11ef8:	cmp	r3, #96	; 0x60
   11efc:	b	11ee4 <__assert_fail@plt+0x1028>
   11f00:	cmp	r3, #71	; 0x47
   11f04:	bne	11ed8 <__assert_fail@plt+0x101c>
   11f08:	ldrb	r3, [r0, #1]
   11f0c:	bic	r3, r3, #32
   11f10:	cmp	r3, #66	; 0x42
   11f14:	bne	11ed8 <__assert_fail@plt+0x101c>
   11f18:	ldrb	r3, [r0, #2]
   11f1c:	cmp	r3, #49	; 0x31
   11f20:	bne	11ed8 <__assert_fail@plt+0x101c>
   11f24:	ldrb	r3, [r0, #3]
   11f28:	cmp	r3, #56	; 0x38
   11f2c:	bne	11ed8 <__assert_fail@plt+0x101c>
   11f30:	ldrb	r3, [r0, #4]
   11f34:	cmp	r3, #48	; 0x30
   11f38:	bne	11ed8 <__assert_fail@plt+0x101c>
   11f3c:	ldrb	r3, [r0, #5]
   11f40:	cmp	r3, #51	; 0x33
   11f44:	bne	11ed8 <__assert_fail@plt+0x101c>
   11f48:	ldrb	r3, [r0, #6]
   11f4c:	cmp	r3, #48	; 0x30
   11f50:	bne	11ed8 <__assert_fail@plt+0x101c>
   11f54:	ldrb	r3, [r0, #7]
   11f58:	cmp	r3, #0
   11f5c:	bne	11ed8 <__assert_fail@plt+0x101c>
   11f60:	ldrb	r3, [r4]
   11f64:	ldr	r1, [pc, #20]	; 11f80 <__assert_fail@plt+0x10c4>
   11f68:	ldr	r0, [pc, #20]	; 11f84 <__assert_fail@plt+0x10c8>
   11f6c:	b	11ef8 <__assert_fail@plt+0x103c>
   11f70:	andeq	r5, r1, r9, asr #17
   11f74:	andeq	r5, r1, r7, asr #17
   11f78:			; <UNDEFINED> instruction: 0x000158bc
   11f7c:			; <UNDEFINED> instruction: 0x000158b8
   11f80:	andeq	r5, r1, r4, asr #17
   11f84:	andeq	r5, r1, r0, asr #17
   11f88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f8c:	sub	sp, sp, #108	; 0x6c
   11f90:	mov	r8, r0
   11f94:	str	r3, [sp, #36]	; 0x24
   11f98:	mov	r5, r1
   11f9c:	str	r2, [sp, #44]	; 0x2c
   11fa0:	ldr	sl, [sp, #144]	; 0x90
   11fa4:	bl	10d30 <__ctype_get_mb_cur_max@plt>
   11fa8:	ldr	r3, [sp, #148]	; 0x94
   11fac:	mov	r7, #0
   11fb0:	str	r7, [sp, #48]	; 0x30
   11fb4:	lsr	r6, r3, #1
   11fb8:	and	r6, r6, #1
   11fbc:	mov	r3, #1
   11fc0:	str	r3, [sp, #72]	; 0x48
   11fc4:	str	r7, [sp, #24]
   11fc8:	str	r7, [sp, #32]
   11fcc:	str	r7, [sp, #40]	; 0x28
   11fd0:	str	r7, [sp, #60]	; 0x3c
   11fd4:	str	r0, [sp, #76]	; 0x4c
   11fd8:	cmp	sl, #10
   11fdc:	ldrls	pc, [pc, sl, lsl #2]
   11fe0:	b	1221c <__assert_fail@plt+0x1360>
   11fe4:	andeq	r2, r1, r0, lsl r0
   11fe8:	andeq	r2, r1, r4, lsr #25
   11fec:	andeq	r2, r1, r8, ror #3
   11ff0:	andeq	r2, r1, r4, lsr r2
   11ff4:	andeq	r2, r1, r4, asr #3
   11ff8:	andeq	r2, r1, ip, lsl r0
   11ffc:	andeq	r2, r1, r4, lsl #25
   12000:	andeq	r2, r1, r0, lsr #4
   12004:	andeq	r2, r1, r4, lsl r1
   12008:	andeq	r2, r1, r4, lsl r1
   1200c:	andeq	r2, r1, r4, lsl r1
   12010:	mov	r6, #0
   12014:	mov	r4, #0
   12018:	b	12048 <__assert_fail@plt+0x118c>
   1201c:	cmp	r6, #0
   12020:	bne	12244 <__assert_fail@plt+0x1388>
   12024:	cmp	r5, #0
   12028:	movne	r3, #34	; 0x22
   1202c:	strbne	r3, [r8]
   12030:	mov	r3, #1
   12034:	str	r3, [sp, #24]
   12038:	str	r3, [sp, #32]
   1203c:	mov	r4, #1
   12040:	ldr	r3, [pc, #3172]	; 12cac <__assert_fail@plt+0x1df0>
   12044:	str	r3, [sp, #40]	; 0x28
   12048:	mov	r9, r5
   1204c:	mov	r3, #0
   12050:	str	r7, [sp, #68]	; 0x44
   12054:	str	r3, [sp, #28]
   12058:	ldr	r3, [sp, #36]	; 0x24
   1205c:	cmn	r3, #1
   12060:	bne	12bf0 <__assert_fail@plt+0x1d34>
   12064:	ldr	r3, [sp, #44]	; 0x2c
   12068:	ldr	r2, [sp, #28]
   1206c:	ldrb	r3, [r3, r2]
   12070:	adds	r3, r3, #0
   12074:	movne	r3, #1
   12078:	str	r3, [sp, #52]	; 0x34
   1207c:	ldr	r3, [sp, #52]	; 0x34
   12080:	cmp	r3, #0
   12084:	bne	1226c <__assert_fail@plt+0x13b0>
   12088:	sub	r2, sl, #2
   1208c:	clz	r2, r2
   12090:	lsr	r2, r2, #5
   12094:	and	r3, r6, r2
   12098:	cmp	r4, #0
   1209c:	movne	r3, #0
   120a0:	andeq	r3, r3, #1
   120a4:	cmp	r3, #0
   120a8:	bne	12434 <__assert_fail@plt+0x1578>
   120ac:	eor	r3, r6, #1
   120b0:	ands	r2, r2, r3
   120b4:	beq	12c28 <__assert_fail@plt+0x1d6c>
   120b8:	ldr	r3, [sp, #68]	; 0x44
   120bc:	cmp	r3, #0
   120c0:	beq	12c60 <__assert_fail@plt+0x1da4>
   120c4:	ldr	r3, [sp, #72]	; 0x48
   120c8:	cmp	r3, #0
   120cc:	beq	12c04 <__assert_fail@plt+0x1d48>
   120d0:	ldr	r3, [sp, #160]	; 0xa0
   120d4:	ldr	r2, [sp, #44]	; 0x2c
   120d8:	str	r3, [sp, #16]
   120dc:	ldr	r3, [sp, #156]	; 0x9c
   120e0:	ldr	r1, [sp, #60]	; 0x3c
   120e4:	str	r3, [sp, #12]
   120e8:	ldr	r3, [sp, #152]	; 0x98
   120ec:	str	r3, [sp, #8]
   120f0:	ldr	r3, [sp, #148]	; 0x94
   120f4:	str	r3, [sp, #4]
   120f8:	mov	r3, #5
   120fc:	str	r3, [sp]
   12100:	ldr	r3, [sp, #36]	; 0x24
   12104:	mov	r0, r8
   12108:	bl	11f88 <__assert_fail@plt+0x10cc>
   1210c:	mov	r4, r0
   12110:	b	12c54 <__assert_fail@plt+0x1d98>
   12114:	cmp	sl, #10
   12118:	beq	12174 <__assert_fail@plt+0x12b8>
   1211c:	ldr	r4, [pc, #2956]	; 12cb0 <__assert_fail@plt+0x1df4>
   12120:	mov	r2, #5
   12124:	mov	r1, r4
   12128:	mov	r0, #0
   1212c:	bl	10ce8 <dcgettext@plt>
   12130:	cmp	r0, r4
   12134:	str	r0, [sp, #156]	; 0x9c
   12138:	bne	12148 <__assert_fail@plt+0x128c>
   1213c:	mov	r1, sl
   12140:	bl	11e74 <__assert_fail@plt+0xfb8>
   12144:	str	r0, [sp, #156]	; 0x9c
   12148:	ldr	r4, [pc, #2916]	; 12cb4 <__assert_fail@plt+0x1df8>
   1214c:	mov	r2, #5
   12150:	mov	r1, r4
   12154:	mov	r0, #0
   12158:	bl	10ce8 <dcgettext@plt>
   1215c:	cmp	r0, r4
   12160:	str	r0, [sp, #160]	; 0xa0
   12164:	bne	12174 <__assert_fail@plt+0x12b8>
   12168:	mov	r1, sl
   1216c:	bl	11e74 <__assert_fail@plt+0xfb8>
   12170:	str	r0, [sp, #160]	; 0xa0
   12174:	cmp	r6, #0
   12178:	moveq	r4, r6
   1217c:	beq	12194 <__assert_fail@plt+0x12d8>
   12180:	mov	r4, #0
   12184:	b	121a4 <__assert_fail@plt+0x12e8>
   12188:	cmp	r5, r4
   1218c:	strbhi	r3, [r8, r4]
   12190:	add	r4, r4, #1
   12194:	ldr	r3, [sp, #156]	; 0x9c
   12198:	ldrb	r3, [r3, r4]
   1219c:	cmp	r3, #0
   121a0:	bne	12188 <__assert_fail@plt+0x12cc>
   121a4:	ldr	r0, [sp, #160]	; 0xa0
   121a8:	bl	10dcc <strlen@plt>
   121ac:	ldr	r3, [sp, #160]	; 0xa0
   121b0:	str	r3, [sp, #40]	; 0x28
   121b4:	mov	r3, #1
   121b8:	str	r3, [sp, #24]
   121bc:	str	r0, [sp, #32]
   121c0:	b	12048 <__assert_fail@plt+0x118c>
   121c4:	mov	r3, #1
   121c8:	cmp	r6, #0
   121cc:	streq	r3, [sp, #24]
   121d0:	beq	121f0 <__assert_fail@plt+0x1334>
   121d4:	str	r3, [sp, #32]
   121d8:	ldr	r3, [pc, #2772]	; 12cb4 <__assert_fail@plt+0x1df8>
   121dc:	mov	r4, #0
   121e0:	str	r3, [sp, #40]	; 0x28
   121e4:	b	12214 <__assert_fail@plt+0x1358>
   121e8:	cmp	r6, #0
   121ec:	bne	1225c <__assert_fail@plt+0x13a0>
   121f0:	cmp	r5, #0
   121f4:	movne	r3, #39	; 0x27
   121f8:	strbne	r3, [r8]
   121fc:	mov	r3, #1
   12200:	str	r3, [sp, #32]
   12204:	mov	r6, #0
   12208:	ldr	r3, [pc, #2724]	; 12cb4 <__assert_fail@plt+0x1df8>
   1220c:	mov	r4, #1
   12210:	str	r3, [sp, #40]	; 0x28
   12214:	mov	sl, #2
   12218:	b	12048 <__assert_fail@plt+0x118c>
   1221c:	bl	10ea4 <abort@plt>
   12220:	mov	r6, #0
   12224:	mov	r3, #1
   12228:	str	r3, [sp, #24]
   1222c:	mov	r4, r6
   12230:	b	12048 <__assert_fail@plt+0x118c>
   12234:	mov	r6, #1
   12238:	str	r6, [sp, #24]
   1223c:	str	r6, [sp, #32]
   12240:	b	121d8 <__assert_fail@plt+0x131c>
   12244:	mov	r3, #1
   12248:	str	r3, [sp, #32]
   1224c:	ldr	r3, [pc, #2648]	; 12cac <__assert_fail@plt+0x1df0>
   12250:	str	r6, [sp, #24]
   12254:	str	r3, [sp, #40]	; 0x28
   12258:	b	12014 <__assert_fail@plt+0x1158>
   1225c:	mov	r3, #1
   12260:	str	r3, [sp, #32]
   12264:	ldr	r3, [pc, #2632]	; 12cb4 <__assert_fail@plt+0x1df8>
   12268:	b	12254 <__assert_fail@plt+0x1398>
   1226c:	ldr	r3, [sp, #32]
   12270:	ldr	fp, [sp, #24]
   12274:	cmp	sl, #2
   12278:	moveq	fp, #0
   1227c:	andne	fp, fp, #1
   12280:	adds	r5, r3, #0
   12284:	movne	r5, #1
   12288:	ands	r3, r5, fp
   1228c:	str	r3, [sp, #64]	; 0x40
   12290:	beq	12360 <__assert_fail@plt+0x14a4>
   12294:	ldr	r2, [sp, #32]
   12298:	ldr	r3, [sp, #28]
   1229c:	add	r7, r3, r2
   122a0:	mov	r3, r2
   122a4:	ldr	r2, [sp, #36]	; 0x24
   122a8:	cmp	r3, #1
   122ac:	movls	r3, #0
   122b0:	movhi	r3, #1
   122b4:	cmn	r2, #1
   122b8:	movne	r3, #0
   122bc:	cmp	r3, #0
   122c0:	beq	122d0 <__assert_fail@plt+0x1414>
   122c4:	ldr	r0, [sp, #44]	; 0x2c
   122c8:	bl	10dcc <strlen@plt>
   122cc:	str	r0, [sp, #36]	; 0x24
   122d0:	ldr	r3, [sp, #36]	; 0x24
   122d4:	cmp	r3, r7
   122d8:	bcc	12358 <__assert_fail@plt+0x149c>
   122dc:	ldr	r3, [sp, #44]	; 0x2c
   122e0:	ldr	r0, [sp, #28]
   122e4:	ldr	r2, [sp, #32]
   122e8:	ldr	r1, [sp, #40]	; 0x28
   122ec:	add	r0, r3, r0
   122f0:	bl	10cd0 <memcmp@plt>
   122f4:	cmp	r0, #0
   122f8:	bne	12358 <__assert_fail@plt+0x149c>
   122fc:	cmp	r6, #0
   12300:	beq	12360 <__assert_fail@plt+0x14a4>
   12304:	str	r6, [sp, #24]
   12308:	ldr	r3, [sp, #24]
   1230c:	ldr	r2, [sp, #44]	; 0x2c
   12310:	cmp	sl, #2
   12314:	movne	r3, #0
   12318:	andeq	r3, r3, #1
   1231c:	cmp	r3, #0
   12320:	ldr	r3, [sp, #160]	; 0xa0
   12324:	movne	sl, #4
   12328:	str	r3, [sp, #16]
   1232c:	ldr	r3, [sp, #156]	; 0x9c
   12330:	str	sl, [sp]
   12334:	str	r3, [sp, #12]
   12338:	mov	r3, #0
   1233c:	str	r3, [sp, #8]
   12340:	ldr	r3, [sp, #148]	; 0x94
   12344:	mov	r1, r9
   12348:	bic	r3, r3, #2
   1234c:	str	r3, [sp, #4]
   12350:	ldr	r3, [sp, #36]	; 0x24
   12354:	b	12104 <__assert_fail@plt+0x1248>
   12358:	mov	r3, #0
   1235c:	str	r3, [sp, #64]	; 0x40
   12360:	ldr	r2, [sp, #28]
   12364:	ldr	r3, [sp, #44]	; 0x2c
   12368:	add	r3, r3, r2
   1236c:	str	r3, [sp, #80]	; 0x50
   12370:	ldr	r3, [sp, #44]	; 0x2c
   12374:	ldrb	r7, [r3, r2]
   12378:	cmp	r7, #58	; 0x3a
   1237c:	bhi	124e4 <__assert_fail@plt+0x1628>
   12380:	cmp	r7, #43	; 0x2b
   12384:	bcs	12538 <__assert_fail@plt+0x167c>
   12388:	cmp	r7, #32
   1238c:	beq	12590 <__assert_fail@plt+0x16d4>
   12390:	bhi	1243c <__assert_fail@plt+0x1580>
   12394:	cmp	r7, #9
   12398:	beq	12844 <__assert_fail@plt+0x1988>
   1239c:	bhi	12400 <__assert_fail@plt+0x1544>
   123a0:	cmp	r7, #7
   123a4:	beq	128f0 <__assert_fail@plt+0x1a34>
   123a8:	bhi	125ac <__assert_fail@plt+0x16f0>
   123ac:	cmp	r7, #0
   123b0:	beq	125c8 <__assert_fail@plt+0x170c>
   123b4:	ldr	r3, [sp, #76]	; 0x4c
   123b8:	cmp	r3, #1
   123bc:	bne	12934 <__assert_fail@plt+0x1a78>
   123c0:	bl	10db4 <__ctype_b_loc@plt>
   123c4:	sxth	r3, r7
   123c8:	lsl	r3, r3, #1
   123cc:	ldr	r2, [r0]
   123d0:	ldrh	r5, [r2, r3]
   123d4:	ldr	r3, [sp, #76]	; 0x4c
   123d8:	str	r3, [sp, #56]	; 0x38
   123dc:	lsr	r5, r5, #14
   123e0:	and	r5, r5, #1
   123e4:	ldr	r3, [sp, #24]
   123e8:	eor	fp, r5, #1
   123ec:	and	fp, fp, r3
   123f0:	ands	fp, fp, #255	; 0xff
   123f4:	beq	1277c <__assert_fail@plt+0x18c0>
   123f8:	mov	r5, #0
   123fc:	b	129e0 <__assert_fail@plt+0x1b24>
   12400:	cmp	r7, #11
   12404:	beq	1284c <__assert_fail@plt+0x1990>
   12408:	bcc	128e8 <__assert_fail@plt+0x1a2c>
   1240c:	cmp	r7, #12
   12410:	beq	128f8 <__assert_fail@plt+0x1a3c>
   12414:	cmp	r7, #13
   12418:	moveq	r3, #114	; 0x72
   1241c:	bne	123b4 <__assert_fail@plt+0x14f8>
   12420:	cmp	sl, #2
   12424:	movne	r2, #0
   12428:	andeq	r2, r6, #1
   1242c:	cmp	r2, #0
   12430:	beq	125b0 <__assert_fail@plt+0x16f4>
   12434:	mov	sl, #2
   12438:	b	12308 <__assert_fail@plt+0x144c>
   1243c:	cmp	r7, #37	; 0x25
   12440:	beq	12538 <__assert_fail@plt+0x167c>
   12444:	bhi	12458 <__assert_fail@plt+0x159c>
   12448:	cmp	r7, #35	; 0x23
   1244c:	beq	12584 <__assert_fail@plt+0x16c8>
   12450:	mov	r5, #0
   12454:	b	12594 <__assert_fail@plt+0x16d8>
   12458:	cmp	r7, #39	; 0x27
   1245c:	bne	12450 <__assert_fail@plt+0x1594>
   12460:	cmp	sl, #2
   12464:	ldrne	r5, [sp, #52]	; 0x34
   12468:	movne	r3, r5
   1246c:	strne	r3, [sp, #68]	; 0x44
   12470:	bne	1253c <__assert_fail@plt+0x1680>
   12474:	cmp	r6, #0
   12478:	bne	12308 <__assert_fail@plt+0x144c>
   1247c:	ldr	r2, [sp, #60]	; 0x3c
   12480:	adds	r3, r9, #0
   12484:	movne	r3, #1
   12488:	cmp	r2, #0
   1248c:	movne	r3, #0
   12490:	cmp	r3, #0
   12494:	strne	r9, [sp, #60]	; 0x3c
   12498:	movne	r9, #0
   1249c:	bne	124ac <__assert_fail@plt+0x15f0>
   124a0:	cmp	r9, r4
   124a4:	movhi	r3, #39	; 0x27
   124a8:	strbhi	r3, [r8, r4]
   124ac:	add	r3, r4, #1
   124b0:	cmp	r3, r9
   124b4:	movcc	r2, #92	; 0x5c
   124b8:	strbcc	r2, [r8, r3]
   124bc:	add	r3, r4, #2
   124c0:	cmp	r3, r9
   124c4:	ldr	r5, [sp, #52]	; 0x34
   124c8:	movcc	r2, #39	; 0x27
   124cc:	strbcc	r2, [r8, r3]
   124d0:	add	r4, r4, #3
   124d4:	mov	fp, r6
   124d8:	str	r5, [sp, #68]	; 0x44
   124dc:	str	r6, [sp, #48]	; 0x30
   124e0:	b	1277c <__assert_fail@plt+0x18c0>
   124e4:	cmp	r7, #94	; 0x5e
   124e8:	beq	12450 <__assert_fail@plt+0x1594>
   124ec:	bhi	12544 <__assert_fail@plt+0x1688>
   124f0:	cmp	r7, #90	; 0x5a
   124f4:	bhi	1252c <__assert_fail@plt+0x1670>
   124f8:	cmp	r7, #65	; 0x41
   124fc:	bcs	12538 <__assert_fail@plt+0x167c>
   12500:	cmp	r7, #62	; 0x3e
   12504:	bls	12450 <__assert_fail@plt+0x1594>
   12508:	cmp	r7, #63	; 0x3f
   1250c:	bne	123b4 <__assert_fail@plt+0x14f8>
   12510:	cmp	sl, #2
   12514:	beq	126b8 <__assert_fail@plt+0x17fc>
   12518:	cmp	sl, #5
   1251c:	beq	126c8 <__assert_fail@plt+0x180c>
   12520:	mov	fp, #0
   12524:	mov	r5, fp
   12528:	b	1277c <__assert_fail@plt+0x18c0>
   1252c:	cmp	r7, #92	; 0x5c
   12530:	beq	12854 <__assert_fail@plt+0x1998>
   12534:	bls	12450 <__assert_fail@plt+0x1594>
   12538:	ldr	r5, [sp, #52]	; 0x34
   1253c:	mov	fp, #0
   12540:	b	1277c <__assert_fail@plt+0x18c0>
   12544:	cmp	r7, #122	; 0x7a
   12548:	bhi	12568 <__assert_fail@plt+0x16ac>
   1254c:	cmp	r7, #97	; 0x61
   12550:	bcs	12538 <__assert_fail@plt+0x167c>
   12554:	cmp	r7, #95	; 0x5f
   12558:	beq	12538 <__assert_fail@plt+0x167c>
   1255c:	cmp	r7, #96	; 0x60
   12560:	bne	123b4 <__assert_fail@plt+0x14f8>
   12564:	b	12450 <__assert_fail@plt+0x1594>
   12568:	cmp	r7, #124	; 0x7c
   1256c:	beq	12450 <__assert_fail@plt+0x1594>
   12570:	bcc	12900 <__assert_fail@plt+0x1a44>
   12574:	cmp	r7, #125	; 0x7d
   12578:	beq	12900 <__assert_fail@plt+0x1a44>
   1257c:	cmp	r7, #126	; 0x7e
   12580:	bne	123b4 <__assert_fail@plt+0x14f8>
   12584:	ldr	r3, [sp, #28]
   12588:	cmp	r3, #0
   1258c:	bne	126c0 <__assert_fail@plt+0x1804>
   12590:	ldr	r5, [sp, #52]	; 0x34
   12594:	cmp	sl, #2
   12598:	movne	fp, #0
   1259c:	andeq	fp, r6, #1
   125a0:	cmp	fp, #0
   125a4:	beq	1277c <__assert_fail@plt+0x18c0>
   125a8:	b	12434 <__assert_fail@plt+0x1578>
   125ac:	mov	r3, #98	; 0x62
   125b0:	ldr	r2, [sp, #24]
   125b4:	cmp	r2, #0
   125b8:	beq	126c0 <__assert_fail@plt+0x1804>
   125bc:	mov	r7, r3
   125c0:	mov	r5, #0
   125c4:	b	127d4 <__assert_fail@plt+0x1918>
   125c8:	ldr	r3, [sp, #24]
   125cc:	cmp	r3, #0
   125d0:	beq	1269c <__assert_fail@plt+0x17e0>
   125d4:	cmp	r6, #0
   125d8:	bne	12304 <__assert_fail@plt+0x1448>
   125dc:	ldr	r3, [sp, #48]	; 0x30
   125e0:	eor	r2, r3, #1
   125e4:	cmp	sl, #2
   125e8:	movne	r2, #0
   125ec:	andeq	r2, r2, #1
   125f0:	cmp	r2, #0
   125f4:	moveq	r3, r4
   125f8:	beq	12630 <__assert_fail@plt+0x1774>
   125fc:	cmp	r9, r4
   12600:	movhi	r3, #39	; 0x27
   12604:	strbhi	r3, [r8, r4]
   12608:	add	r3, r4, #1
   1260c:	cmp	r9, r3
   12610:	movhi	r1, #36	; 0x24
   12614:	strbhi	r1, [r8, r3]
   12618:	add	r3, r4, #2
   1261c:	cmp	r9, r3
   12620:	movhi	r1, #39	; 0x27
   12624:	strbhi	r1, [r8, r3]
   12628:	add	r3, r4, #3
   1262c:	str	r2, [sp, #48]	; 0x30
   12630:	cmp	r9, r3
   12634:	movhi	r2, #92	; 0x5c
   12638:	strbhi	r2, [r8, r3]
   1263c:	cmp	fp, #0
   12640:	add	r4, r3, #1
   12644:	beq	12bd4 <__assert_fail@plt+0x1d18>
   12648:	ldr	r2, [sp, #28]
   1264c:	ldr	r1, [sp, #36]	; 0x24
   12650:	add	r2, r2, #1
   12654:	cmp	r1, r2
   12658:	bls	12694 <__assert_fail@plt+0x17d8>
   1265c:	ldr	r1, [sp, #44]	; 0x2c
   12660:	mov	r7, #48	; 0x30
   12664:	ldrb	r2, [r1, r2]
   12668:	sub	r2, r2, #48	; 0x30
   1266c:	cmp	r2, #9
   12670:	movhi	r5, r6
   12674:	bhi	1277c <__assert_fail@plt+0x18c0>
   12678:	cmp	r9, r4
   1267c:	add	r2, r3, #2
   12680:	strbhi	r7, [r8, r4]
   12684:	cmp	r9, r2
   12688:	add	r4, r3, #3
   1268c:	movhi	r1, #48	; 0x30
   12690:	strbhi	r1, [r8, r2]
   12694:	mov	r5, r6
   12698:	b	12bdc <__assert_fail@plt+0x1d20>
   1269c:	ldr	r3, [sp, #148]	; 0x94
   126a0:	tst	r3, #1
   126a4:	ldreq	r5, [sp, #24]
   126a8:	beq	12be8 <__assert_fail@plt+0x1d2c>
   126ac:	ldr	r3, [sp, #28]
   126b0:	add	r3, r3, #1
   126b4:	b	12054 <__assert_fail@plt+0x1198>
   126b8:	cmp	r6, #0
   126bc:	bne	12308 <__assert_fail@plt+0x144c>
   126c0:	mov	r5, #0
   126c4:	b	1253c <__assert_fail@plt+0x1680>
   126c8:	ldr	r3, [sp, #148]	; 0x94
   126cc:	tst	r3, #4
   126d0:	beq	126c0 <__assert_fail@plt+0x1804>
   126d4:	ldr	r3, [sp, #28]
   126d8:	add	r2, r3, #2
   126dc:	ldr	r3, [sp, #36]	; 0x24
   126e0:	cmp	r3, r2
   126e4:	bls	126c0 <__assert_fail@plt+0x1804>
   126e8:	ldr	r3, [sp, #44]	; 0x2c
   126ec:	ldr	r1, [sp, #28]
   126f0:	add	r3, r3, r1
   126f4:	ldrb	r0, [r3, #1]
   126f8:	cmp	r0, #63	; 0x3f
   126fc:	bne	126c0 <__assert_fail@plt+0x1804>
   12700:	ldr	r3, [sp, #44]	; 0x2c
   12704:	ldrb	r1, [r3, r2]
   12708:	sub	r3, r1, #33	; 0x21
   1270c:	uxtb	r3, r3
   12710:	cmp	r3, #29
   12714:	bhi	12be4 <__assert_fail@plt+0x1d28>
   12718:	mov	ip, #1
   1271c:	ldr	r5, [pc, #1428]	; 12cb8 <__assert_fail@plt+0x1dfc>
   12720:	ands	r5, r5, ip, lsl r3
   12724:	beq	1253c <__assert_fail@plt+0x1680>
   12728:	cmp	r6, #0
   1272c:	bne	12308 <__assert_fail@plt+0x144c>
   12730:	add	r3, r4, #1
   12734:	cmp	r9, r4
   12738:	strbhi	r0, [r8, r4]
   1273c:	cmp	r9, r3
   12740:	movhi	r0, #34	; 0x22
   12744:	strbhi	r0, [r8, r3]
   12748:	add	r3, r4, #2
   1274c:	cmp	r9, r3
   12750:	movhi	r0, #34	; 0x22
   12754:	strbhi	r0, [r8, r3]
   12758:	add	r3, r4, #3
   1275c:	cmp	r9, r3
   12760:	add	r4, r4, #4
   12764:	mov	r5, r6
   12768:	mov	fp, r6
   1276c:	mov	r7, r1
   12770:	movhi	r0, #63	; 0x3f
   12774:	strbhi	r0, [r8, r3]
   12778:	str	r2, [sp, #28]
   1277c:	ldr	r3, [sp, #24]
   12780:	eor	r3, r3, #1
   12784:	cmp	sl, #2
   12788:	orreq	r3, r3, #1
   1278c:	eor	r3, r3, #1
   12790:	orr	r3, r6, r3
   12794:	tst	r3, #255	; 0xff
   12798:	beq	127c8 <__assert_fail@plt+0x190c>
   1279c:	ldr	r3, [sp, #152]	; 0x98
   127a0:	cmp	r3, #0
   127a4:	beq	127c8 <__assert_fail@plt+0x190c>
   127a8:	lsr	r2, r7, #5
   127ac:	ldr	r1, [sp, #152]	; 0x98
   127b0:	uxtb	r2, r2
   127b4:	and	r3, r7, #31
   127b8:	ldr	r2, [r1, r2, lsl #2]
   127bc:	lsr	r3, r2, r3
   127c0:	tst	r3, #1
   127c4:	bne	127d4 <__assert_fail@plt+0x1918>
   127c8:	ldr	r3, [sp, #64]	; 0x40
   127cc:	cmp	r3, #0
   127d0:	beq	1286c <__assert_fail@plt+0x19b0>
   127d4:	cmp	r6, #0
   127d8:	bne	12308 <__assert_fail@plt+0x144c>
   127dc:	ldr	r3, [sp, #48]	; 0x30
   127e0:	eor	r3, r3, #1
   127e4:	cmp	sl, #2
   127e8:	movne	r3, #0
   127ec:	andeq	r3, r3, #1
   127f0:	cmp	r3, #0
   127f4:	beq	1282c <__assert_fail@plt+0x1970>
   127f8:	cmp	r9, r4
   127fc:	movhi	r2, #39	; 0x27
   12800:	strbhi	r2, [r8, r4]
   12804:	add	r2, r4, #1
   12808:	cmp	r9, r2
   1280c:	movhi	r1, #36	; 0x24
   12810:	strbhi	r1, [r8, r2]
   12814:	add	r2, r4, #2
   12818:	cmp	r9, r2
   1281c:	add	r4, r4, #3
   12820:	movhi	r1, #39	; 0x27
   12824:	strbhi	r1, [r8, r2]
   12828:	str	r3, [sp, #48]	; 0x30
   1282c:	cmp	r9, r4
   12830:	movhi	r3, #92	; 0x5c
   12834:	strbhi	r3, [r8, r4]
   12838:	ldr	fp, [sp, #52]	; 0x34
   1283c:	add	r4, r4, #1
   12840:	b	1286c <__assert_fail@plt+0x19b0>
   12844:	mov	r3, #116	; 0x74
   12848:	b	12420 <__assert_fail@plt+0x1564>
   1284c:	mov	r3, #118	; 0x76
   12850:	b	125b0 <__assert_fail@plt+0x16f4>
   12854:	cmp	sl, #2
   12858:	bne	128c8 <__assert_fail@plt+0x1a0c>
   1285c:	cmp	r6, #0
   12860:	bne	12308 <__assert_fail@plt+0x144c>
   12864:	mov	r5, r6
   12868:	mov	fp, r6
   1286c:	ldr	r3, [sp, #48]	; 0x30
   12870:	eor	fp, fp, #1
   12874:	and	fp, fp, r3
   12878:	tst	fp, #255	; 0xff
   1287c:	beq	128a8 <__assert_fail@plt+0x19ec>
   12880:	cmp	r9, r4
   12884:	movhi	r3, #39	; 0x27
   12888:	strbhi	r3, [r8, r4]
   1288c:	add	r3, r4, #1
   12890:	cmp	r9, r3
   12894:	movhi	r2, #39	; 0x27
   12898:	add	r4, r4, #2
   1289c:	strbhi	r2, [r8, r3]
   128a0:	mov	r3, #0
   128a4:	str	r3, [sp, #48]	; 0x30
   128a8:	cmp	r9, r4
   128ac:	strbhi	r7, [r8, r4]
   128b0:	ldr	r3, [sp, #72]	; 0x48
   128b4:	cmp	r5, #0
   128b8:	moveq	r3, #0
   128bc:	add	r4, r4, #1
   128c0:	str	r3, [sp, #72]	; 0x48
   128c4:	b	126ac <__assert_fail@plt+0x17f0>
   128c8:	ldr	r3, [sp, #24]
   128cc:	and	r3, r3, r6
   128d0:	tst	r5, r3
   128d4:	moveq	r3, r7
   128d8:	beq	12420 <__assert_fail@plt+0x1564>
   128dc:	mov	fp, #0
   128e0:	mov	r5, fp
   128e4:	b	1286c <__assert_fail@plt+0x19b0>
   128e8:	mov	r3, #110	; 0x6e
   128ec:	b	12420 <__assert_fail@plt+0x1564>
   128f0:	mov	r3, #97	; 0x61
   128f4:	b	125b0 <__assert_fail@plt+0x16f4>
   128f8:	mov	r3, #102	; 0x66
   128fc:	b	125b0 <__assert_fail@plt+0x16f4>
   12900:	ldr	r3, [sp, #36]	; 0x24
   12904:	cmn	r3, #1
   12908:	bne	12928 <__assert_fail@plt+0x1a6c>
   1290c:	ldr	r3, [sp, #44]	; 0x2c
   12910:	ldrb	r3, [r3, #1]
   12914:	adds	r3, r3, #0
   12918:	movne	r3, #1
   1291c:	cmp	r3, #0
   12920:	bne	126c0 <__assert_fail@plt+0x1804>
   12924:	b	12584 <__assert_fail@plt+0x16c8>
   12928:	ldr	r3, [sp, #36]	; 0x24
   1292c:	subs	r3, r3, #1
   12930:	b	12918 <__assert_fail@plt+0x1a5c>
   12934:	mov	r3, #0
   12938:	str	r3, [sp, #96]	; 0x60
   1293c:	str	r3, [sp, #100]	; 0x64
   12940:	ldr	r3, [sp, #36]	; 0x24
   12944:	cmn	r3, #1
   12948:	bne	12958 <__assert_fail@plt+0x1a9c>
   1294c:	ldr	r0, [sp, #44]	; 0x2c
   12950:	bl	10dcc <strlen@plt>
   12954:	str	r0, [sp, #36]	; 0x24
   12958:	ldr	r5, [sp, #52]	; 0x34
   1295c:	mov	r3, #0
   12960:	str	r3, [sp, #56]	; 0x38
   12964:	ldr	r3, [sp, #28]
   12968:	ldr	r2, [sp, #56]	; 0x38
   1296c:	ldr	r1, [sp, #36]	; 0x24
   12970:	add	r2, r3, r2
   12974:	ldr	r3, [sp, #44]	; 0x2c
   12978:	add	r0, sp, #92	; 0x5c
   1297c:	add	fp, r3, r2
   12980:	sub	r2, r1, r2
   12984:	add	r3, sp, #96	; 0x60
   12988:	mov	r1, fp
   1298c:	bl	146c8 <__assert_fail@plt+0x380c>
   12990:	subs	r2, r0, #0
   12994:	beq	129d4 <__assert_fail@plt+0x1b18>
   12998:	cmn	r2, #1
   1299c:	beq	12bac <__assert_fail@plt+0x1cf0>
   129a0:	cmn	r2, #2
   129a4:	bne	12b1c <__assert_fail@plt+0x1c60>
   129a8:	ldr	r2, [sp, #56]	; 0x38
   129ac:	ldr	r3, [sp, #28]
   129b0:	add	r3, r3, r2
   129b4:	ldr	r2, [sp, #36]	; 0x24
   129b8:	cmp	r2, r3
   129bc:	bls	12bac <__assert_fail@plt+0x1cf0>
   129c0:	ldr	r3, [sp, #80]	; 0x50
   129c4:	ldr	r2, [sp, #56]	; 0x38
   129c8:	ldrb	r5, [r3, r2]
   129cc:	cmp	r5, #0
   129d0:	bne	12b0c <__assert_fail@plt+0x1c50>
   129d4:	ldr	r3, [sp, #56]	; 0x38
   129d8:	cmp	r3, #1
   129dc:	bls	123e4 <__assert_fail@plt+0x1528>
   129e0:	ldr	r2, [sp, #56]	; 0x38
   129e4:	ldr	r3, [sp, #28]
   129e8:	mov	fp, #0
   129ec:	add	r3, r3, r2
   129f0:	ldr	r2, [sp, #24]
   129f4:	str	r3, [sp, #52]	; 0x34
   129f8:	eor	r3, r5, #1
   129fc:	and	r3, r3, r2
   12a00:	mov	ip, #92	; 0x5c
   12a04:	uxtb	r3, r3
   12a08:	mov	r2, #39	; 0x27
   12a0c:	cmp	r3, #0
   12a10:	beq	12bb4 <__assert_fail@plt+0x1cf8>
   12a14:	cmp	r6, #0
   12a18:	bne	12304 <__assert_fail@plt+0x1448>
   12a1c:	ldr	r1, [sp, #48]	; 0x30
   12a20:	eor	r1, r1, #1
   12a24:	cmp	sl, #2
   12a28:	movne	r1, #0
   12a2c:	andeq	r1, r1, #1
   12a30:	cmp	r1, #0
   12a34:	beq	12a64 <__assert_fail@plt+0x1ba8>
   12a38:	add	r0, r4, #1
   12a3c:	cmp	r9, r4
   12a40:	strbhi	r2, [r8, r4]
   12a44:	cmp	r9, r0
   12a48:	movhi	lr, #36	; 0x24
   12a4c:	strbhi	lr, [r8, r0]
   12a50:	add	r0, r4, #2
   12a54:	add	r4, r4, #3
   12a58:	cmp	r9, r0
   12a5c:	strbhi	r2, [r8, r0]
   12a60:	str	r1, [sp, #48]	; 0x30
   12a64:	add	r0, r4, #1
   12a68:	cmp	r9, r4
   12a6c:	strbhi	ip, [r8, r4]
   12a70:	cmp	r9, r0
   12a74:	lsrhi	r1, r7, #6
   12a78:	addhi	r1, r1, #48	; 0x30
   12a7c:	strbhi	r1, [r8, r0]
   12a80:	add	r0, r4, #2
   12a84:	cmp	r9, r0
   12a88:	lsrhi	r1, r7, #3
   12a8c:	and	r7, r7, #7
   12a90:	andhi	r1, r1, #7
   12a94:	add	r4, r4, #3
   12a98:	add	r7, r7, #48	; 0x30
   12a9c:	mov	fp, r3
   12aa0:	addhi	r1, r1, #48	; 0x30
   12aa4:	strbhi	r1, [r8, r0]
   12aa8:	ldr	r1, [sp, #28]
   12aac:	ldr	r0, [sp, #52]	; 0x34
   12ab0:	add	r1, r1, #1
   12ab4:	cmp	r0, r1
   12ab8:	bls	1286c <__assert_fail@plt+0x19b0>
   12abc:	ldr	lr, [sp, #48]	; 0x30
   12ac0:	eor	r0, fp, #1
   12ac4:	and	r0, r0, lr
   12ac8:	tst	r0, #255	; 0xff
   12acc:	beq	12af0 <__assert_fail@plt+0x1c34>
   12ad0:	add	r0, r4, #1
   12ad4:	cmp	r9, r4
   12ad8:	strbhi	r2, [r8, r4]
   12adc:	cmp	r9, r0
   12ae0:	add	r4, r4, #2
   12ae4:	strbhi	r2, [r8, r0]
   12ae8:	mov	r0, #0
   12aec:	str	r0, [sp, #48]	; 0x30
   12af0:	ldr	r0, [sp, #44]	; 0x2c
   12af4:	cmp	r9, r4
   12af8:	strbhi	r7, [r8, r4]
   12afc:	str	r1, [sp, #28]
   12b00:	add	r4, r4, #1
   12b04:	ldrb	r7, [r0, r1]
   12b08:	b	12a0c <__assert_fail@plt+0x1b50>
   12b0c:	ldr	r3, [sp, #56]	; 0x38
   12b10:	add	r3, r3, #1
   12b14:	str	r3, [sp, #56]	; 0x38
   12b18:	b	129a8 <__assert_fail@plt+0x1aec>
   12b1c:	cmp	sl, #2
   12b20:	movne	r3, #0
   12b24:	andeq	r3, r6, #1
   12b28:	cmp	r3, #0
   12b2c:	movne	r1, #1
   12b30:	bne	12b8c <__assert_fail@plt+0x1cd0>
   12b34:	ldr	r0, [sp, #92]	; 0x5c
   12b38:	str	r2, [sp, #84]	; 0x54
   12b3c:	bl	10d0c <iswprint@plt>
   12b40:	ldr	r3, [sp, #56]	; 0x38
   12b44:	ldr	r2, [sp, #84]	; 0x54
   12b48:	add	r3, r3, r2
   12b4c:	str	r3, [sp, #56]	; 0x38
   12b50:	cmp	r0, #0
   12b54:	add	r0, sp, #96	; 0x60
   12b58:	moveq	r5, #0
   12b5c:	bl	10cb8 <mbsinit@plt>
   12b60:	cmp	r0, #0
   12b64:	beq	12964 <__assert_fail@plt+0x1aa8>
   12b68:	b	129d4 <__assert_fail@plt+0x1b18>
   12b6c:	ldrb	r3, [fp, r1]
   12b70:	cmp	r3, #94	; 0x5e
   12b74:	beq	12434 <__assert_fail@plt+0x1578>
   12b78:	bhi	12b98 <__assert_fail@plt+0x1cdc>
   12b7c:	sub	r3, r3, #91	; 0x5b
   12b80:	cmp	r3, #1
   12b84:	bls	12434 <__assert_fail@plt+0x1578>
   12b88:	add	r1, r1, #1
   12b8c:	cmp	r1, r2
   12b90:	bne	12b6c <__assert_fail@plt+0x1cb0>
   12b94:	b	12b34 <__assert_fail@plt+0x1c78>
   12b98:	cmp	r3, #96	; 0x60
   12b9c:	beq	12434 <__assert_fail@plt+0x1578>
   12ba0:	cmp	r3, #124	; 0x7c
   12ba4:	bne	12b88 <__assert_fail@plt+0x1ccc>
   12ba8:	b	12434 <__assert_fail@plt+0x1578>
   12bac:	mov	r5, #0
   12bb0:	b	129d4 <__assert_fail@plt+0x1b18>
   12bb4:	ldr	r1, [sp, #64]	; 0x40
   12bb8:	cmp	r1, #0
   12bbc:	beq	12aa8 <__assert_fail@plt+0x1bec>
   12bc0:	cmp	r9, r4
   12bc4:	strbhi	ip, [r8, r4]
   12bc8:	str	r3, [sp, #64]	; 0x40
   12bcc:	add	r4, r4, #1
   12bd0:	b	12aa8 <__assert_fail@plt+0x1bec>
   12bd4:	mov	r5, fp
   12bd8:	ldr	fp, [sp, #24]
   12bdc:	mov	r7, #48	; 0x30
   12be0:	b	1277c <__assert_fail@plt+0x18c0>
   12be4:	mov	r5, #0
   12be8:	mov	fp, r5
   12bec:	b	1277c <__assert_fail@plt+0x18c0>
   12bf0:	ldr	r3, [sp, #36]	; 0x24
   12bf4:	ldr	r2, [sp, #28]
   12bf8:	subs	r3, r3, r2
   12bfc:	movne	r3, #1
   12c00:	b	12078 <__assert_fail@plt+0x11bc>
   12c04:	ldr	r3, [sp, #60]	; 0x3c
   12c08:	clz	r7, r9
   12c0c:	cmp	r3, #0
   12c10:	lsr	r7, r7, #5
   12c14:	moveq	r7, #0
   12c18:	cmp	r7, #0
   12c1c:	mov	r5, r3
   12c20:	bne	11fd8 <__assert_fail@plt+0x111c>
   12c24:	ldr	r3, [sp, #68]	; 0x44
   12c28:	ldr	r2, [sp, #40]	; 0x28
   12c2c:	cmp	r2, #0
   12c30:	moveq	r3, #0
   12c34:	andne	r3, r3, #1
   12c38:	cmp	r3, #0
   12c3c:	movne	r3, r2
   12c40:	subne	r2, r3, #1
   12c44:	bne	12c74 <__assert_fail@plt+0x1db8>
   12c48:	cmp	r9, r4
   12c4c:	movhi	r3, #0
   12c50:	strbhi	r3, [r8, r4]
   12c54:	mov	r0, r4
   12c58:	add	sp, sp, #108	; 0x6c
   12c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c60:	mov	r3, r2
   12c64:	b	12c28 <__assert_fail@plt+0x1d6c>
   12c68:	cmp	r9, r4
   12c6c:	strbhi	r3, [r8, r4]
   12c70:	add	r4, r4, #1
   12c74:	ldrb	r3, [r2, #1]!
   12c78:	cmp	r3, #0
   12c7c:	bne	12c68 <__assert_fail@plt+0x1dac>
   12c80:	b	12c48 <__assert_fail@plt+0x1d8c>
   12c84:	ldr	r3, [pc, #32]	; 12cac <__assert_fail@plt+0x1df0>
   12c88:	mov	r6, #1
   12c8c:	str	r6, [sp, #24]
   12c90:	str	r6, [sp, #32]
   12c94:	str	r3, [sp, #40]	; 0x28
   12c98:	mov	r4, #0
   12c9c:	mov	sl, #5
   12ca0:	b	12048 <__assert_fail@plt+0x118c>
   12ca4:	mov	r6, #1
   12ca8:	b	1223c <__assert_fail@plt+0x1380>
   12cac:	andeq	r5, r1, r7, asr #17
   12cb0:	andeq	r5, r1, fp, asr #17
   12cb4:	andeq	r5, r1, r9, asr #17
   12cb8:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   12cbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cc0:	sub	sp, sp, #52	; 0x34
   12cc4:	mov	r6, r0
   12cc8:	mov	r5, r3
   12ccc:	mov	r8, r1
   12cd0:	mov	r9, r2
   12cd4:	bl	10de4 <__errno_location@plt>
   12cd8:	ldr	r7, [pc, #380]	; 12e5c <__assert_fail@plt+0x1fa0>
   12cdc:	cmn	r6, #-2147483647	; 0x80000001
   12ce0:	ldr	r4, [r7]
   12ce4:	ldr	r3, [r0]
   12ce8:	str	r0, [sp, #24]
   12cec:	str	r3, [sp, #32]
   12cf0:	movne	r3, #0
   12cf4:	moveq	r3, #1
   12cf8:	orrs	r3, r3, r6, lsr #31
   12cfc:	beq	12d04 <__assert_fail@plt+0x1e48>
   12d00:	bl	10ea4 <abort@plt>
   12d04:	ldr	r2, [r7, #4]
   12d08:	cmp	r6, r2
   12d0c:	blt	12d7c <__assert_fail@plt+0x1ec0>
   12d10:	add	r1, sp, #48	; 0x30
   12d14:	add	sl, r7, #8
   12d18:	str	r2, [r1, #-4]!
   12d1c:	cmp	r4, sl
   12d20:	mov	r3, #8
   12d24:	sub	r2, r6, r2
   12d28:	movne	r0, r4
   12d2c:	str	r3, [sp]
   12d30:	add	r2, r2, #1
   12d34:	mvn	r3, #-2147483648	; 0x80000000
   12d38:	moveq	r0, #0
   12d3c:	bl	13a50 <__assert_fail@plt+0x2b94>
   12d40:	cmp	r4, sl
   12d44:	ldr	r2, [sp, #44]	; 0x2c
   12d48:	mov	fp, r0
   12d4c:	str	r0, [r7]
   12d50:	ldmeq	r4, {r0, r1}
   12d54:	mov	r4, fp
   12d58:	stmeq	fp, {r0, r1}
   12d5c:	ldr	r0, [r7, #4]
   12d60:	mov	r1, #0
   12d64:	sub	r2, r2, r0
   12d68:	add	r0, fp, r0, lsl #3
   12d6c:	lsl	r2, r2, #3
   12d70:	bl	10dfc <memset@plt>
   12d74:	ldr	r3, [sp, #44]	; 0x2c
   12d78:	str	r3, [r7, #4]
   12d7c:	ldr	r3, [r5, #4]
   12d80:	add	sl, r4, r6, lsl #3
   12d84:	orr	r3, r3, #1
   12d88:	str	r3, [sp, #28]
   12d8c:	add	r3, r5, #8
   12d90:	str	r3, [sp, #36]	; 0x24
   12d94:	ldr	r3, [r5, #44]	; 0x2c
   12d98:	ldr	fp, [r4, r6, lsl #3]
   12d9c:	ldr	r7, [sl, #4]
   12da0:	str	r3, [sp, #16]
   12da4:	ldr	r3, [r5, #40]	; 0x28
   12da8:	mov	r2, r8
   12dac:	str	r3, [sp, #12]
   12db0:	add	r3, r5, #8
   12db4:	str	r3, [sp, #8]
   12db8:	ldr	r3, [sp, #28]
   12dbc:	mov	r1, fp
   12dc0:	str	r3, [sp, #4]
   12dc4:	ldr	r3, [r5]
   12dc8:	mov	r0, r7
   12dcc:	str	r3, [sp]
   12dd0:	mov	r3, r9
   12dd4:	bl	11f88 <__assert_fail@plt+0x10cc>
   12dd8:	cmp	fp, r0
   12ddc:	bhi	12e44 <__assert_fail@plt+0x1f88>
   12de0:	ldr	r3, [pc, #120]	; 12e60 <__assert_fail@plt+0x1fa4>
   12de4:	add	fp, r0, #1
   12de8:	cmp	r7, r3
   12dec:	str	fp, [r4, r6, lsl #3]
   12df0:	beq	12dfc <__assert_fail@plt+0x1f40>
   12df4:	mov	r0, r7
   12df8:	bl	145ac <__assert_fail@plt+0x36f0>
   12dfc:	mov	r0, fp
   12e00:	bl	13908 <__assert_fail@plt+0x2a4c>
   12e04:	ldr	r3, [r5, #44]	; 0x2c
   12e08:	mov	r2, r8
   12e0c:	mov	r1, fp
   12e10:	str	r0, [sl, #4]
   12e14:	str	r3, [sp, #16]
   12e18:	ldr	r3, [r5, #40]	; 0x28
   12e1c:	mov	r7, r0
   12e20:	str	r3, [sp, #12]
   12e24:	add	r3, r5, #8
   12e28:	str	r3, [sp, #8]
   12e2c:	ldr	r3, [sp, #28]
   12e30:	str	r3, [sp, #4]
   12e34:	ldr	r3, [r5]
   12e38:	str	r3, [sp]
   12e3c:	mov	r3, r9
   12e40:	bl	11f88 <__assert_fail@plt+0x10cc>
   12e44:	ldr	r3, [sp, #24]
   12e48:	ldr	r2, [sp, #32]
   12e4c:	mov	r0, r7
   12e50:	str	r2, [r3]
   12e54:	add	sp, sp, #52	; 0x34
   12e58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e5c:	strdeq	r6, [r2], -r0
   12e60:	andeq	r6, r2, r4, ror #2
   12e64:	push	{r4, r5, r6, lr}
   12e68:	mov	r5, r0
   12e6c:	bl	10de4 <__errno_location@plt>
   12e70:	cmp	r5, #0
   12e74:	mov	r1, #48	; 0x30
   12e78:	ldr	r6, [r0]
   12e7c:	mov	r4, r0
   12e80:	ldr	r0, [pc, #12]	; 12e94 <__assert_fail@plt+0x1fd8>
   12e84:	movne	r0, r5
   12e88:	bl	13ce4 <__assert_fail@plt+0x2e28>
   12e8c:	str	r6, [r4]
   12e90:	pop	{r4, r5, r6, pc}
   12e94:	andeq	r6, r2, r4, ror #4
   12e98:	ldr	r3, [pc, #12]	; 12eac <__assert_fail@plt+0x1ff0>
   12e9c:	cmp	r0, #0
   12ea0:	moveq	r0, r3
   12ea4:	ldr	r0, [r0]
   12ea8:	bx	lr
   12eac:	andeq	r6, r2, r4, ror #4
   12eb0:	ldr	r3, [pc, #12]	; 12ec4 <__assert_fail@plt+0x2008>
   12eb4:	cmp	r0, #0
   12eb8:	moveq	r0, r3
   12ebc:	str	r1, [r0]
   12ec0:	bx	lr
   12ec4:	andeq	r6, r2, r4, ror #4
   12ec8:	ldr	r3, [pc, #52]	; 12f04 <__assert_fail@plt+0x2048>
   12ecc:	cmp	r0, #0
   12ed0:	moveq	r0, r3
   12ed4:	add	r3, r0, #8
   12ed8:	push	{lr}		; (str lr, [sp, #-4]!)
   12edc:	lsr	lr, r1, #5
   12ee0:	and	r1, r1, #31
   12ee4:	ldr	ip, [r3, lr, lsl #2]
   12ee8:	lsr	r0, ip, r1
   12eec:	eor	r2, r2, r0
   12ef0:	and	r2, r2, #1
   12ef4:	and	r0, r0, #1
   12ef8:	eor	r1, ip, r2, lsl r1
   12efc:	str	r1, [r3, lr, lsl #2]
   12f00:	pop	{pc}		; (ldr pc, [sp], #4)
   12f04:	andeq	r6, r2, r4, ror #4
   12f08:	ldr	r3, [pc, #16]	; 12f20 <__assert_fail@plt+0x2064>
   12f0c:	cmp	r0, #0
   12f10:	movne	r3, r0
   12f14:	ldr	r0, [r3, #4]
   12f18:	str	r1, [r3, #4]
   12f1c:	bx	lr
   12f20:	andeq	r6, r2, r4, ror #4
   12f24:	ldr	r3, [pc, #44]	; 12f58 <__assert_fail@plt+0x209c>
   12f28:	cmp	r0, #0
   12f2c:	moveq	r0, r3
   12f30:	mov	r3, #10
   12f34:	cmp	r2, #0
   12f38:	cmpne	r1, #0
   12f3c:	str	r3, [r0]
   12f40:	bne	12f4c <__assert_fail@plt+0x2090>
   12f44:	push	{r4, lr}
   12f48:	bl	10ea4 <abort@plt>
   12f4c:	str	r1, [r0, #40]	; 0x28
   12f50:	str	r2, [r0, #44]	; 0x2c
   12f54:	bx	lr
   12f58:	andeq	r6, r2, r4, ror #4
   12f5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12f60:	sub	sp, sp, #24
   12f64:	mov	sl, r3
   12f68:	ldr	r4, [sp, #56]	; 0x38
   12f6c:	ldr	r3, [pc, #100]	; 12fd8 <__assert_fail@plt+0x211c>
   12f70:	cmp	r4, #0
   12f74:	moveq	r4, r3
   12f78:	mov	r7, r0
   12f7c:	mov	r8, r1
   12f80:	mov	r9, r2
   12f84:	bl	10de4 <__errno_location@plt>
   12f88:	ldr	r3, [r4, #44]	; 0x2c
   12f8c:	mov	r2, r9
   12f90:	mov	r1, r8
   12f94:	ldr	r6, [r0]
   12f98:	str	r3, [sp, #16]
   12f9c:	ldr	r3, [r4, #40]	; 0x28
   12fa0:	mov	r5, r0
   12fa4:	str	r3, [sp, #12]
   12fa8:	add	r3, r4, #8
   12fac:	str	r3, [sp, #8]
   12fb0:	ldr	r3, [r4, #4]
   12fb4:	mov	r0, r7
   12fb8:	str	r3, [sp, #4]
   12fbc:	ldr	r3, [r4]
   12fc0:	str	r3, [sp]
   12fc4:	mov	r3, sl
   12fc8:	bl	11f88 <__assert_fail@plt+0x10cc>
   12fcc:	str	r6, [r5]
   12fd0:	add	sp, sp, #24
   12fd4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12fd8:	andeq	r6, r2, r4, ror #4
   12fdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fe0:	cmp	r3, #0
   12fe4:	sub	sp, sp, #44	; 0x2c
   12fe8:	ldr	r4, [pc, #188]	; 130ac <__assert_fail@plt+0x21f0>
   12fec:	mov	r6, r2
   12ff0:	movne	r4, r3
   12ff4:	mov	sl, r1
   12ff8:	mov	r9, r0
   12ffc:	bl	10de4 <__errno_location@plt>
   13000:	ldr	r5, [r4, #4]
   13004:	add	fp, r4, #8
   13008:	cmp	r6, #0
   1300c:	orreq	r5, r5, #1
   13010:	mov	r1, #0
   13014:	mov	r2, r9
   13018:	ldr	r3, [r0]
   1301c:	mov	r8, r0
   13020:	str	r3, [sp, #28]
   13024:	ldr	r3, [r4, #44]	; 0x2c
   13028:	mov	r0, r1
   1302c:	str	r3, [sp, #16]
   13030:	ldr	r3, [r4, #40]	; 0x28
   13034:	stmib	sp, {r5, fp}
   13038:	str	r3, [sp, #12]
   1303c:	ldr	r3, [r4]
   13040:	str	r3, [sp]
   13044:	mov	r3, sl
   13048:	bl	11f88 <__assert_fail@plt+0x10cc>
   1304c:	add	r1, r0, #1
   13050:	mov	r7, r0
   13054:	mov	r0, r1
   13058:	str	r1, [sp, #36]	; 0x24
   1305c:	bl	13908 <__assert_fail@plt+0x2a4c>
   13060:	ldr	r3, [r4, #44]	; 0x2c
   13064:	mov	r2, r9
   13068:	str	r3, [sp, #16]
   1306c:	ldr	r3, [r4, #40]	; 0x28
   13070:	stmib	sp, {r5, fp}
   13074:	str	r3, [sp, #12]
   13078:	ldr	r3, [r4]
   1307c:	ldr	r1, [sp, #36]	; 0x24
   13080:	str	r3, [sp]
   13084:	mov	r3, sl
   13088:	str	r0, [sp, #32]
   1308c:	bl	11f88 <__assert_fail@plt+0x10cc>
   13090:	ldr	r3, [sp, #28]
   13094:	cmp	r6, #0
   13098:	str	r3, [r8]
   1309c:	ldr	r0, [sp, #32]
   130a0:	strne	r7, [r6]
   130a4:	add	sp, sp, #44	; 0x2c
   130a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130ac:	andeq	r6, r2, r4, ror #4
   130b0:	mov	r3, r2
   130b4:	mov	r2, #0
   130b8:	b	12fdc <__assert_fail@plt+0x2120>
   130bc:	push	{r4, r5, r6, r7, r8, lr}
   130c0:	mov	r6, #1
   130c4:	ldr	r4, [pc, #104]	; 13134 <__assert_fail@plt+0x2278>
   130c8:	ldr	r5, [r4]
   130cc:	add	r7, r5, #12
   130d0:	ldr	r3, [r4, #4]
   130d4:	add	r7, r7, #8
   130d8:	cmp	r6, r3
   130dc:	blt	13124 <__assert_fail@plt+0x2268>
   130e0:	ldr	r0, [r5, #4]
   130e4:	ldr	r6, [pc, #76]	; 13138 <__assert_fail@plt+0x227c>
   130e8:	cmp	r0, r6
   130ec:	beq	13100 <__assert_fail@plt+0x2244>
   130f0:	bl	145ac <__assert_fail@plt+0x36f0>
   130f4:	mov	r3, #256	; 0x100
   130f8:	str	r3, [r4, #8]
   130fc:	str	r6, [r4, #12]
   13100:	ldr	r6, [pc, #52]	; 1313c <__assert_fail@plt+0x2280>
   13104:	cmp	r5, r6
   13108:	beq	13118 <__assert_fail@plt+0x225c>
   1310c:	mov	r0, r5
   13110:	bl	145ac <__assert_fail@plt+0x36f0>
   13114:	str	r6, [r4]
   13118:	mov	r3, #1
   1311c:	str	r3, [r4, #4]
   13120:	pop	{r4, r5, r6, r7, r8, pc}
   13124:	ldr	r0, [r7, #-8]
   13128:	bl	145ac <__assert_fail@plt+0x36f0>
   1312c:	add	r6, r6, #1
   13130:	b	130d0 <__assert_fail@plt+0x2214>
   13134:	strdeq	r6, [r2], -r0
   13138:	andeq	r6, r2, r4, ror #2
   1313c:	strdeq	r6, [r2], -r8
   13140:	ldr	r3, [pc, #4]	; 1314c <__assert_fail@plt+0x2290>
   13144:	mvn	r2, #0
   13148:	b	12cbc <__assert_fail@plt+0x1e00>
   1314c:	andeq	r6, r2, r4, ror #4
   13150:	ldr	r3, [pc]	; 13158 <__assert_fail@plt+0x229c>
   13154:	b	12cbc <__assert_fail@plt+0x1e00>
   13158:	andeq	r6, r2, r4, ror #4
   1315c:	mov	r1, r0
   13160:	mov	r0, #0
   13164:	b	13140 <__assert_fail@plt+0x2284>
   13168:	mov	r2, r1
   1316c:	mov	r1, r0
   13170:	mov	r0, #0
   13174:	b	13150 <__assert_fail@plt+0x2294>
   13178:	push	{r4, r5, lr}
   1317c:	sub	sp, sp, #52	; 0x34
   13180:	mov	r5, r2
   13184:	mov	r4, r0
   13188:	mov	r0, sp
   1318c:	bl	11e44 <__assert_fail@plt+0xf88>
   13190:	mov	r3, sp
   13194:	mvn	r2, #0
   13198:	mov	r1, r5
   1319c:	mov	r0, r4
   131a0:	bl	12cbc <__assert_fail@plt+0x1e00>
   131a4:	add	sp, sp, #52	; 0x34
   131a8:	pop	{r4, r5, pc}
   131ac:	push	{r4, r5, r6, lr}
   131b0:	sub	sp, sp, #48	; 0x30
   131b4:	mov	r5, r2
   131b8:	mov	r6, r3
   131bc:	mov	r4, r0
   131c0:	mov	r0, sp
   131c4:	bl	11e44 <__assert_fail@plt+0xf88>
   131c8:	mov	r3, sp
   131cc:	mov	r2, r6
   131d0:	mov	r1, r5
   131d4:	mov	r0, r4
   131d8:	bl	12cbc <__assert_fail@plt+0x1e00>
   131dc:	add	sp, sp, #48	; 0x30
   131e0:	pop	{r4, r5, r6, pc}
   131e4:	mov	r2, r1
   131e8:	mov	r1, r0
   131ec:	mov	r0, #0
   131f0:	b	13178 <__assert_fail@plt+0x22bc>
   131f4:	mov	r3, r2
   131f8:	mov	r2, r1
   131fc:	mov	r1, r0
   13200:	mov	r0, #0
   13204:	b	131ac <__assert_fail@plt+0x22f0>
   13208:	push	{r4, r5, r6, lr}
   1320c:	mov	r4, r0
   13210:	ldr	lr, [pc, #80]	; 13268 <__assert_fail@plt+0x23ac>
   13214:	mov	r5, r1
   13218:	mov	r6, r2
   1321c:	ldm	lr!, {r0, r1, r2, r3}
   13220:	sub	sp, sp, #48	; 0x30
   13224:	mov	ip, sp
   13228:	stmia	ip!, {r0, r1, r2, r3}
   1322c:	ldm	lr!, {r0, r1, r2, r3}
   13230:	stmia	ip!, {r0, r1, r2, r3}
   13234:	ldm	lr, {r0, r1, r2, r3}
   13238:	stm	ip, {r0, r1, r2, r3}
   1323c:	mov	r1, r6
   13240:	mov	r2, #1
   13244:	mov	r0, sp
   13248:	bl	12ec8 <__assert_fail@plt+0x200c>
   1324c:	mov	r3, sp
   13250:	mov	r2, r5
   13254:	mov	r1, r4
   13258:	mov	r0, #0
   1325c:	bl	12cbc <__assert_fail@plt+0x1e00>
   13260:	add	sp, sp, #48	; 0x30
   13264:	pop	{r4, r5, r6, pc}
   13268:	andeq	r6, r2, r4, ror #4
   1326c:	mov	r2, r1
   13270:	mvn	r1, #0
   13274:	b	13208 <__assert_fail@plt+0x234c>
   13278:	mov	r1, #58	; 0x3a
   1327c:	b	1326c <__assert_fail@plt+0x23b0>
   13280:	mov	r2, #58	; 0x3a
   13284:	b	13208 <__assert_fail@plt+0x234c>
   13288:	push	{r4, r5, lr}
   1328c:	sub	sp, sp, #100	; 0x64
   13290:	mov	r4, r0
   13294:	mov	r0, sp
   13298:	mov	r5, r2
   1329c:	bl	11e44 <__assert_fail@plt+0xf88>
   132a0:	mov	ip, sp
   132a4:	add	lr, sp, #48	; 0x30
   132a8:	ldm	ip!, {r0, r1, r2, r3}
   132ac:	stmia	lr!, {r0, r1, r2, r3}
   132b0:	ldm	ip!, {r0, r1, r2, r3}
   132b4:	stmia	lr!, {r0, r1, r2, r3}
   132b8:	ldm	ip, {r0, r1, r2, r3}
   132bc:	stm	lr, {r0, r1, r2, r3}
   132c0:	mov	r2, #1
   132c4:	mov	r1, #58	; 0x3a
   132c8:	add	r0, sp, #48	; 0x30
   132cc:	bl	12ec8 <__assert_fail@plt+0x200c>
   132d0:	add	r3, sp, #48	; 0x30
   132d4:	mvn	r2, #0
   132d8:	mov	r1, r5
   132dc:	mov	r0, r4
   132e0:	bl	12cbc <__assert_fail@plt+0x1e00>
   132e4:	add	sp, sp, #100	; 0x64
   132e8:	pop	{r4, r5, pc}
   132ec:	push	{r4, r5, r6, r7, lr}
   132f0:	mov	r4, r0
   132f4:	ldr	lr, [pc, #84]	; 13350 <__assert_fail@plt+0x2494>
   132f8:	mov	r6, r1
   132fc:	mov	r7, r2
   13300:	mov	r5, r3
   13304:	ldm	lr!, {r0, r1, r2, r3}
   13308:	sub	sp, sp, #52	; 0x34
   1330c:	mov	ip, sp
   13310:	stmia	ip!, {r0, r1, r2, r3}
   13314:	ldm	lr!, {r0, r1, r2, r3}
   13318:	stmia	ip!, {r0, r1, r2, r3}
   1331c:	ldm	lr, {r0, r1, r2, r3}
   13320:	stm	ip, {r0, r1, r2, r3}
   13324:	mov	r2, r7
   13328:	mov	r1, r6
   1332c:	mov	r0, sp
   13330:	bl	12f24 <__assert_fail@plt+0x2068>
   13334:	mov	r3, sp
   13338:	ldr	r2, [sp, #72]	; 0x48
   1333c:	mov	r1, r5
   13340:	mov	r0, r4
   13344:	bl	12cbc <__assert_fail@plt+0x1e00>
   13348:	add	sp, sp, #52	; 0x34
   1334c:	pop	{r4, r5, r6, r7, pc}
   13350:	andeq	r6, r2, r4, ror #4
   13354:	mvn	ip, #0
   13358:	push	{r0, r1, r2, lr}
   1335c:	str	ip, [sp]
   13360:	bl	132ec <__assert_fail@plt+0x2430>
   13364:	add	sp, sp, #12
   13368:	pop	{pc}		; (ldr pc, [sp], #4)
   1336c:	mov	r3, r2
   13370:	mov	r2, r1
   13374:	mov	r1, r0
   13378:	mov	r0, #0
   1337c:	b	13354 <__assert_fail@plt+0x2498>
   13380:	push	{r0, r1, r2, lr}
   13384:	str	r3, [sp]
   13388:	mov	r3, r2
   1338c:	mov	r2, r1
   13390:	mov	r1, r0
   13394:	mov	r0, #0
   13398:	bl	132ec <__assert_fail@plt+0x2430>
   1339c:	add	sp, sp, #12
   133a0:	pop	{pc}		; (ldr pc, [sp], #4)
   133a4:	ldr	r3, [pc]	; 133ac <__assert_fail@plt+0x24f0>
   133a8:	b	12cbc <__assert_fail@plt+0x1e00>
   133ac:	andeq	r6, r2, r0, lsl #2
   133b0:	mov	r2, r1
   133b4:	mov	r1, r0
   133b8:	mov	r0, #0
   133bc:	b	133a4 <__assert_fail@plt+0x24e8>
   133c0:	mvn	r2, #0
   133c4:	b	133a4 <__assert_fail@plt+0x24e8>
   133c8:	mov	r1, r0
   133cc:	mov	r0, #0
   133d0:	b	133c0 <__assert_fail@plt+0x2504>
   133d4:	push	{r4, r5, r6, lr}
   133d8:	sub	sp, sp, #32
   133dc:	cmp	r1, #0
   133e0:	mov	r5, r0
   133e4:	ldr	r4, [sp, #48]	; 0x30
   133e8:	ldr	r6, [sp, #52]	; 0x34
   133ec:	beq	134a0 <__assert_fail@plt+0x25e4>
   133f0:	stm	sp, {r2, r3}
   133f4:	mov	r3, r1
   133f8:	ldr	r2, [pc, #860]	; 1375c <__assert_fail@plt+0x28a0>
   133fc:	mov	r1, #1
   13400:	bl	10e20 <__fprintf_chk@plt>
   13404:	mov	r2, #5
   13408:	ldr	r1, [pc, #848]	; 13760 <__assert_fail@plt+0x28a4>
   1340c:	mov	r0, #0
   13410:	bl	10ce8 <dcgettext@plt>
   13414:	ldr	r3, [pc, #840]	; 13764 <__assert_fail@plt+0x28a8>
   13418:	ldr	r2, [pc, #840]	; 13768 <__assert_fail@plt+0x28ac>
   1341c:	str	r3, [sp]
   13420:	mov	r1, #1
   13424:	mov	r3, r0
   13428:	mov	r0, r5
   1342c:	bl	10e20 <__fprintf_chk@plt>
   13430:	mov	r1, r5
   13434:	mov	r0, #10
   13438:	bl	10cdc <fputc_unlocked@plt>
   1343c:	mov	r2, #5
   13440:	ldr	r1, [pc, #804]	; 1376c <__assert_fail@plt+0x28b0>
   13444:	mov	r0, #0
   13448:	bl	10ce8 <dcgettext@plt>
   1344c:	mov	r1, #1
   13450:	ldr	r3, [pc, #792]	; 13770 <__assert_fail@plt+0x28b4>
   13454:	mov	r2, r0
   13458:	mov	r0, r5
   1345c:	bl	10e20 <__fprintf_chk@plt>
   13460:	mov	r1, r5
   13464:	mov	r0, #10
   13468:	bl	10cdc <fputc_unlocked@plt>
   1346c:	cmp	r6, #9
   13470:	ldrls	pc, [pc, r6, lsl #2]
   13474:	b	13750 <__assert_fail@plt+0x2894>
   13478:	muleq	r1, r0, r5
   1347c:			; <UNDEFINED> instruction: 0x000134b8
   13480:	andeq	r3, r1, r4, ror #9
   13484:	andeq	r3, r1, r8, lsl r5
   13488:	andeq	r3, r1, r4, asr r5
   1348c:	muleq	r1, r8, r5
   13490:	andeq	r3, r1, r0, ror #11
   13494:	andeq	r3, r1, r0, lsr r6
   13498:	andeq	r3, r1, r8, lsl #13
   1349c:	andeq	r3, r1, r8, ror #13
   134a0:	str	r3, [sp]
   134a4:	mov	r1, #1
   134a8:	mov	r3, r2
   134ac:	ldr	r2, [pc, #704]	; 13774 <__assert_fail@plt+0x28b8>
   134b0:	bl	10e20 <__fprintf_chk@plt>
   134b4:	b	13404 <__assert_fail@plt+0x2548>
   134b8:	mov	r2, #5
   134bc:	ldr	r1, [pc, #692]	; 13778 <__assert_fail@plt+0x28bc>
   134c0:	mov	r0, #0
   134c4:	bl	10ce8 <dcgettext@plt>
   134c8:	ldr	r3, [r4]
   134cc:	mov	r1, #1
   134d0:	mov	r2, r0
   134d4:	mov	r0, r5
   134d8:	add	sp, sp, #32
   134dc:	pop	{r4, r5, r6, lr}
   134e0:	b	10e20 <__fprintf_chk@plt>
   134e4:	mov	r2, #5
   134e8:	ldr	r1, [pc, #652]	; 1377c <__assert_fail@plt+0x28c0>
   134ec:	mov	r0, #0
   134f0:	bl	10ce8 <dcgettext@plt>
   134f4:	ldr	r3, [r4, #4]
   134f8:	mov	r1, #1
   134fc:	str	r3, [sp, #48]	; 0x30
   13500:	ldr	r3, [r4]
   13504:	mov	r2, r0
   13508:	mov	r0, r5
   1350c:	add	sp, sp, #32
   13510:	pop	{r4, r5, r6, lr}
   13514:	b	10e20 <__fprintf_chk@plt>
   13518:	mov	r2, #5
   1351c:	ldr	r1, [pc, #604]	; 13780 <__assert_fail@plt+0x28c4>
   13520:	mov	r0, #0
   13524:	bl	10ce8 <dcgettext@plt>
   13528:	ldr	r3, [r4, #8]
   1352c:	mov	r1, #1
   13530:	str	r3, [sp, #52]	; 0x34
   13534:	ldr	r3, [r4, #4]
   13538:	str	r3, [sp, #48]	; 0x30
   1353c:	ldr	r3, [r4]
   13540:	mov	r2, r0
   13544:	mov	r0, r5
   13548:	add	sp, sp, #32
   1354c:	pop	{r4, r5, r6, lr}
   13550:	b	10e20 <__fprintf_chk@plt>
   13554:	mov	r2, #5
   13558:	ldr	r1, [pc, #548]	; 13784 <__assert_fail@plt+0x28c8>
   1355c:	mov	r0, #0
   13560:	bl	10ce8 <dcgettext@plt>
   13564:	ldr	r3, [r4, #12]
   13568:	mov	r1, #1
   1356c:	str	r3, [sp, #8]
   13570:	ldr	r3, [r4, #8]
   13574:	str	r3, [sp, #4]
   13578:	ldr	r3, [r4, #4]
   1357c:	str	r3, [sp]
   13580:	ldr	r3, [r4]
   13584:	mov	r2, r0
   13588:	mov	r0, r5
   1358c:	bl	10e20 <__fprintf_chk@plt>
   13590:	add	sp, sp, #32
   13594:	pop	{r4, r5, r6, pc}
   13598:	mov	r2, #5
   1359c:	ldr	r1, [pc, #484]	; 13788 <__assert_fail@plt+0x28cc>
   135a0:	mov	r0, #0
   135a4:	bl	10ce8 <dcgettext@plt>
   135a8:	ldr	r3, [r4, #16]
   135ac:	mov	r1, #1
   135b0:	str	r3, [sp, #12]
   135b4:	ldr	r3, [r4, #12]
   135b8:	str	r3, [sp, #8]
   135bc:	ldr	r3, [r4, #8]
   135c0:	str	r3, [sp, #4]
   135c4:	ldr	r3, [r4, #4]
   135c8:	str	r3, [sp]
   135cc:	ldr	r3, [r4]
   135d0:	mov	r2, r0
   135d4:	mov	r0, r5
   135d8:	bl	10e20 <__fprintf_chk@plt>
   135dc:	b	13590 <__assert_fail@plt+0x26d4>
   135e0:	mov	r2, #5
   135e4:	ldr	r1, [pc, #416]	; 1378c <__assert_fail@plt+0x28d0>
   135e8:	mov	r0, #0
   135ec:	bl	10ce8 <dcgettext@plt>
   135f0:	ldr	r3, [r4, #20]
   135f4:	mov	r1, #1
   135f8:	str	r3, [sp, #16]
   135fc:	ldr	r3, [r4, #16]
   13600:	str	r3, [sp, #12]
   13604:	ldr	r3, [r4, #12]
   13608:	str	r3, [sp, #8]
   1360c:	ldr	r3, [r4, #8]
   13610:	str	r3, [sp, #4]
   13614:	ldr	r3, [r4, #4]
   13618:	str	r3, [sp]
   1361c:	ldr	r3, [r4]
   13620:	mov	r2, r0
   13624:	mov	r0, r5
   13628:	bl	10e20 <__fprintf_chk@plt>
   1362c:	b	13590 <__assert_fail@plt+0x26d4>
   13630:	mov	r2, #5
   13634:	ldr	r1, [pc, #340]	; 13790 <__assert_fail@plt+0x28d4>
   13638:	mov	r0, #0
   1363c:	bl	10ce8 <dcgettext@plt>
   13640:	ldr	r3, [r4, #24]
   13644:	mov	r1, #1
   13648:	str	r3, [sp, #20]
   1364c:	ldr	r3, [r4, #20]
   13650:	str	r3, [sp, #16]
   13654:	ldr	r3, [r4, #16]
   13658:	str	r3, [sp, #12]
   1365c:	ldr	r3, [r4, #12]
   13660:	str	r3, [sp, #8]
   13664:	ldr	r3, [r4, #8]
   13668:	str	r3, [sp, #4]
   1366c:	ldr	r3, [r4, #4]
   13670:	str	r3, [sp]
   13674:	ldr	r3, [r4]
   13678:	mov	r2, r0
   1367c:	mov	r0, r5
   13680:	bl	10e20 <__fprintf_chk@plt>
   13684:	b	13590 <__assert_fail@plt+0x26d4>
   13688:	mov	r2, #5
   1368c:	ldr	r1, [pc, #256]	; 13794 <__assert_fail@plt+0x28d8>
   13690:	mov	r0, #0
   13694:	bl	10ce8 <dcgettext@plt>
   13698:	ldr	r3, [r4, #28]
   1369c:	mov	r1, #1
   136a0:	str	r3, [sp, #24]
   136a4:	ldr	r3, [r4, #24]
   136a8:	str	r3, [sp, #20]
   136ac:	ldr	r3, [r4, #20]
   136b0:	str	r3, [sp, #16]
   136b4:	ldr	r3, [r4, #16]
   136b8:	str	r3, [sp, #12]
   136bc:	ldr	r3, [r4, #12]
   136c0:	str	r3, [sp, #8]
   136c4:	ldr	r3, [r4, #8]
   136c8:	str	r3, [sp, #4]
   136cc:	ldr	r3, [r4, #4]
   136d0:	str	r3, [sp]
   136d4:	ldr	r3, [r4]
   136d8:	mov	r2, r0
   136dc:	mov	r0, r5
   136e0:	bl	10e20 <__fprintf_chk@plt>
   136e4:	b	13590 <__assert_fail@plt+0x26d4>
   136e8:	ldr	r1, [pc, #168]	; 13798 <__assert_fail@plt+0x28dc>
   136ec:	mov	r2, #5
   136f0:	mov	r0, #0
   136f4:	bl	10ce8 <dcgettext@plt>
   136f8:	ldr	r3, [r4, #32]
   136fc:	mov	r1, #1
   13700:	str	r3, [sp, #28]
   13704:	ldr	r3, [r4, #28]
   13708:	str	r3, [sp, #24]
   1370c:	ldr	r3, [r4, #24]
   13710:	str	r3, [sp, #20]
   13714:	ldr	r3, [r4, #20]
   13718:	str	r3, [sp, #16]
   1371c:	ldr	r3, [r4, #16]
   13720:	str	r3, [sp, #12]
   13724:	ldr	r3, [r4, #12]
   13728:	str	r3, [sp, #8]
   1372c:	ldr	r3, [r4, #8]
   13730:	str	r3, [sp, #4]
   13734:	ldr	r3, [r4, #4]
   13738:	str	r3, [sp]
   1373c:	ldr	r3, [r4]
   13740:	mov	r2, r0
   13744:	mov	r0, r5
   13748:	bl	10e20 <__fprintf_chk@plt>
   1374c:	b	13590 <__assert_fail@plt+0x26d4>
   13750:	mov	r2, #5
   13754:	ldr	r1, [pc, #64]	; 1379c <__assert_fail@plt+0x28e0>
   13758:	b	136f0 <__assert_fail@plt+0x2834>
   1375c:	andeq	r5, r1, r9, lsl r9
   13760:	andeq	r5, r1, ip, lsr #18
   13764:	andeq	r0, r0, r6, ror #15
   13768:	strdeq	r5, [r1], -sl
   1376c:	andeq	r5, r1, r0, lsr r9
   13770:	ldrdeq	r5, [r1], -fp
   13774:	andeq	r5, r1, r5, lsr #18
   13778:	strdeq	r5, [r1], -sp
   1377c:	andeq	r5, r1, sp, lsl #20
   13780:	andeq	r5, r1, r4, lsr #20
   13784:	andeq	r5, r1, r0, asr #20
   13788:	andeq	r5, r1, r0, ror #20
   1378c:	andeq	r5, r1, r4, lsl #21
   13790:	andeq	r5, r1, ip, lsr #21
   13794:	ldrdeq	r5, [r1], -r8
   13798:	andeq	r5, r1, r8, lsl #22
   1379c:	andeq	r5, r1, ip, lsr fp
   137a0:	push	{r0, r1, r4, lr}
   137a4:	mov	ip, #0
   137a8:	ldr	lr, [sp, #16]
   137ac:	ldr	r4, [lr, ip, lsl #2]
   137b0:	cmp	r4, #0
   137b4:	bne	137cc <__assert_fail@plt+0x2910>
   137b8:	str	ip, [sp, #4]
   137bc:	str	lr, [sp]
   137c0:	bl	133d4 <__assert_fail@plt+0x2518>
   137c4:	add	sp, sp, #8
   137c8:	pop	{r4, pc}
   137cc:	add	ip, ip, #1
   137d0:	b	137ac <__assert_fail@plt+0x28f0>
   137d4:	push	{r4, r5, lr}
   137d8:	sub	sp, sp, #52	; 0x34
   137dc:	mov	ip, #0
   137e0:	ldr	r5, [sp, #64]	; 0x40
   137e4:	add	lr, sp, #8
   137e8:	ldr	r4, [r5, ip, lsl #2]
   137ec:	cmp	r4, #0
   137f0:	str	r4, [lr, ip, lsl #2]
   137f4:	beq	13804 <__assert_fail@plt+0x2948>
   137f8:	add	ip, ip, #1
   137fc:	cmp	ip, #10
   13800:	bne	137e8 <__assert_fail@plt+0x292c>
   13804:	str	ip, [sp, #4]
   13808:	str	lr, [sp]
   1380c:	bl	133d4 <__assert_fail@plt+0x2518>
   13810:	add	sp, sp, #52	; 0x34
   13814:	pop	{r4, r5, pc}
   13818:	push	{r3}		; (str r3, [sp, #-4]!)
   1381c:	push	{r0, r1, r2, r3, lr}
   13820:	add	r3, sp, #24
   13824:	str	r3, [sp, #12]
   13828:	str	r3, [sp]
   1382c:	ldr	r3, [sp, #20]
   13830:	bl	137d4 <__assert_fail@plt+0x2918>
   13834:	add	sp, sp, #16
   13838:	pop	{lr}		; (ldr lr, [sp], #4)
   1383c:	add	sp, sp, #4
   13840:	bx	lr
   13844:	ldr	r3, [pc, #116]	; 138c0 <__assert_fail@plt+0x2a04>
   13848:	push	{r4, lr}
   1384c:	mov	r0, #10
   13850:	ldr	r1, [r3]
   13854:	bl	10cdc <fputc_unlocked@plt>
   13858:	mov	r2, #5
   1385c:	ldr	r1, [pc, #96]	; 138c4 <__assert_fail@plt+0x2a08>
   13860:	mov	r0, #0
   13864:	bl	10ce8 <dcgettext@plt>
   13868:	ldr	r2, [pc, #88]	; 138c8 <__assert_fail@plt+0x2a0c>
   1386c:	mov	r1, r0
   13870:	mov	r0, #1
   13874:	bl	10e08 <__printf_chk@plt>
   13878:	mov	r2, #5
   1387c:	ldr	r1, [pc, #72]	; 138cc <__assert_fail@plt+0x2a10>
   13880:	mov	r0, #0
   13884:	bl	10ce8 <dcgettext@plt>
   13888:	ldr	r3, [pc, #64]	; 138d0 <__assert_fail@plt+0x2a14>
   1388c:	ldr	r2, [pc, #64]	; 138d4 <__assert_fail@plt+0x2a18>
   13890:	mov	r1, r0
   13894:	mov	r0, #1
   13898:	bl	10e08 <__printf_chk@plt>
   1389c:	mov	r2, #5
   138a0:	ldr	r1, [pc, #48]	; 138d8 <__assert_fail@plt+0x2a1c>
   138a4:	mov	r0, #0
   138a8:	bl	10ce8 <dcgettext@plt>
   138ac:	ldr	r2, [pc, #40]	; 138dc <__assert_fail@plt+0x2a20>
   138b0:	pop	{r4, lr}
   138b4:	mov	r1, r0
   138b8:	mov	r0, #1
   138bc:	b	10e08 <__printf_chk@plt>
   138c0:	andeq	r6, r2, r4, asr #2
   138c4:	andeq	r5, r1, r8, ror fp
   138c8:	andeq	r5, r1, ip, lsl #23
   138cc:	andeq	r5, r1, r2, lsr #23
   138d0:	muleq	r1, r3, r4
   138d4:			; <UNDEFINED> instruction: 0x000154bb
   138d8:			; <UNDEFINED> instruction: 0x00015bb6
   138dc:	ldrdeq	r5, [r1], -sp
   138e0:	push	{r4, lr}
   138e4:	bl	143a8 <__assert_fail@plt+0x34ec>
   138e8:	cmp	r0, #0
   138ec:	popne	{r4, pc}
   138f0:	bl	13d74 <__assert_fail@plt+0x2eb8>
   138f4:	push	{r4, lr}
   138f8:	bl	143a8 <__assert_fail@plt+0x34ec>
   138fc:	cmp	r0, #0
   13900:	popne	{r4, pc}
   13904:	bl	13d74 <__assert_fail@plt+0x2eb8>
   13908:	b	138e0 <__assert_fail@plt+0x2a24>
   1390c:	push	{r4, r5, r6, lr}
   13910:	mov	r5, r0
   13914:	mov	r4, r1
   13918:	bl	143e8 <__assert_fail@plt+0x352c>
   1391c:	cmp	r0, #0
   13920:	popne	{r4, r5, r6, pc}
   13924:	adds	r4, r4, #0
   13928:	movne	r4, #1
   1392c:	cmp	r5, #0
   13930:	orreq	r4, r4, #1
   13934:	cmp	r4, #0
   13938:	popeq	{r4, r5, r6, pc}
   1393c:	bl	13d74 <__assert_fail@plt+0x2eb8>
   13940:	push	{r4, lr}
   13944:	cmp	r1, #0
   13948:	orreq	r1, r1, #1
   1394c:	bl	143e8 <__assert_fail@plt+0x352c>
   13950:	cmp	r0, #0
   13954:	popne	{r4, pc}
   13958:	bl	13d74 <__assert_fail@plt+0x2eb8>
   1395c:	push	{r4, r5, r6, lr}
   13960:	mov	r6, r0
   13964:	mov	r5, r1
   13968:	mov	r4, r2
   1396c:	bl	14718 <__assert_fail@plt+0x385c>
   13970:	cmp	r0, #0
   13974:	popne	{r4, r5, r6, pc}
   13978:	cmp	r6, #0
   1397c:	beq	1398c <__assert_fail@plt+0x2ad0>
   13980:	cmp	r5, #0
   13984:	cmpne	r4, #0
   13988:	popeq	{r4, r5, r6, pc}
   1398c:	bl	13d74 <__assert_fail@plt+0x2eb8>
   13990:	b	1395c <__assert_fail@plt+0x2aa0>
   13994:	cmp	r2, #0
   13998:	cmpne	r1, #0
   1399c:	moveq	r2, #1
   139a0:	moveq	r1, r2
   139a4:	push	{r4, lr}
   139a8:	bl	14718 <__assert_fail@plt+0x385c>
   139ac:	cmp	r0, #0
   139b0:	popne	{r4, pc}
   139b4:	bl	13d74 <__assert_fail@plt+0x2eb8>
   139b8:	mov	r2, r1
   139bc:	mov	r1, r0
   139c0:	mov	r0, #0
   139c4:	b	1395c <__assert_fail@plt+0x2aa0>
   139c8:	mov	r2, r1
   139cc:	mov	r1, r0
   139d0:	mov	r0, #0
   139d4:	b	13994 <__assert_fail@plt+0x2ad8>
   139d8:	push	{r4, r5, r6, r7, r8, lr}
   139dc:	subs	r7, r0, #0
   139e0:	mov	r5, r1
   139e4:	mov	r6, r2
   139e8:	ldr	r4, [r1]
   139ec:	bne	13a28 <__assert_fail@plt+0x2b6c>
   139f0:	cmp	r4, #0
   139f4:	bne	13a10 <__assert_fail@plt+0x2b54>
   139f8:	mov	r1, r2
   139fc:	mov	r0, #64	; 0x40
   13a00:	bl	14844 <__assert_fail@plt+0x3988>
   13a04:	cmp	r0, #0
   13a08:	movne	r4, r0
   13a0c:	addeq	r4, r0, #1
   13a10:	mov	r2, r6
   13a14:	mov	r1, r4
   13a18:	mov	r0, r7
   13a1c:	bl	1395c <__assert_fail@plt+0x2aa0>
   13a20:	str	r4, [r5]
   13a24:	pop	{r4, r5, r6, r7, r8, pc}
   13a28:	lsr	r2, r4, #1
   13a2c:	add	r3, r2, #1
   13a30:	mvn	r3, r3
   13a34:	cmp	r4, r3
   13a38:	addls	r4, r4, #1
   13a3c:	addls	r4, r4, r2
   13a40:	bls	13a10 <__assert_fail@plt+0x2b54>
   13a44:	bl	13d74 <__assert_fail@plt+0x2eb8>
   13a48:	mov	r2, #1
   13a4c:	b	139d8 <__assert_fail@plt+0x2b1c>
   13a50:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a54:	mov	sl, r0
   13a58:	ldr	r8, [r1]
   13a5c:	mov	fp, r1
   13a60:	mov	r5, r2
   13a64:	asrs	r4, r8, #1
   13a68:	mov	r9, r3
   13a6c:	ldr	r7, [sp, #48]	; 0x30
   13a70:	bpl	13b0c <__assert_fail@plt+0x2c50>
   13a74:	rsb	r2, r4, #-2147483648	; 0x80000000
   13a78:	cmp	r8, r2
   13a7c:	movge	r2, #0
   13a80:	movlt	r2, #1
   13a84:	mvn	r3, r9
   13a88:	cmp	r2, #0
   13a8c:	lsr	r3, r3, #31
   13a90:	addeq	r4, r4, r8
   13a94:	mvnne	r4, #-2147483648	; 0x80000000
   13a98:	mov	r0, r3
   13a9c:	cmp	r9, r4
   13aa0:	movge	r0, #0
   13aa4:	andlt	r0, r0, #1
   13aa8:	cmp	r0, #0
   13aac:	str	r3, [sp, #4]
   13ab0:	bne	13c80 <__assert_fail@plt+0x2dc4>
   13ab4:	cmp	r7, #0
   13ab8:	bge	13bcc <__assert_fail@plt+0x2d10>
   13abc:	cmp	r4, #0
   13ac0:	bge	13b24 <__assert_fail@plt+0x2c68>
   13ac4:	mov	r1, r7
   13ac8:	mvn	r0, #-2147483648	; 0x80000000
   13acc:	bl	14a50 <__assert_fail@plt+0x3b94>
   13ad0:	cmp	r0, r4
   13ad4:	movle	r0, #0
   13ad8:	movgt	r0, #1
   13adc:	cmp	r0, #0
   13ae0:	mvnne	r6, #-2147483648	; 0x80000000
   13ae4:	beq	13b34 <__assert_fail@plt+0x2c78>
   13ae8:	mov	r1, r7
   13aec:	mov	r0, r6
   13af0:	bl	14a50 <__assert_fail@plt+0x3b94>
   13af4:	mov	r1, r7
   13af8:	mov	r4, r0
   13afc:	mov	r0, r6
   13b00:	bl	14c70 <__assert_fail@plt+0x3db4>
   13b04:	sub	r1, r6, r1
   13b08:	b	13b44 <__assert_fail@plt+0x2c88>
   13b0c:	mvn	r2, #-2147483648	; 0x80000000
   13b10:	sub	r2, r2, r4
   13b14:	cmp	r8, r2
   13b18:	movle	r2, #0
   13b1c:	movgt	r2, #1
   13b20:	b	13a84 <__assert_fail@plt+0x2bc8>
   13b24:	cmn	r7, #1
   13b28:	movne	r1, r7
   13b2c:	movne	r0, #-2147483648	; 0x80000000
   13b30:	bne	13c98 <__assert_fail@plt+0x2ddc>
   13b34:	mul	r1, r7, r4
   13b38:	cmp	r1, #63	; 0x3f
   13b3c:	movle	r6, #64	; 0x40
   13b40:	ble	13ae8 <__assert_fail@plt+0x2c2c>
   13b44:	cmp	sl, #0
   13b48:	sub	r2, r4, r8
   13b4c:	streq	sl, [fp]
   13b50:	cmp	r2, r5
   13b54:	bge	13c28 <__assert_fail@plt+0x2d6c>
   13b58:	cmp	r5, #0
   13b5c:	bge	13bf4 <__assert_fail@plt+0x2d38>
   13b60:	rsb	r2, r5, #-2147483648	; 0x80000000
   13b64:	cmp	r8, r2
   13b68:	movge	r2, #0
   13b6c:	movlt	r2, #1
   13b70:	cmp	r2, #0
   13b74:	bne	13bc8 <__assert_fail@plt+0x2d0c>
   13b78:	ldr	r0, [sp, #4]
   13b7c:	add	r5, r8, r5
   13b80:	cmp	r9, r5
   13b84:	movge	r0, #0
   13b88:	andlt	r0, r0, #1
   13b8c:	cmp	r0, #0
   13b90:	mov	r4, r5
   13b94:	bne	13bc8 <__assert_fail@plt+0x2d0c>
   13b98:	cmp	r7, #0
   13b9c:	bge	13c3c <__assert_fail@plt+0x2d80>
   13ba0:	cmp	r5, #0
   13ba4:	bge	13c14 <__assert_fail@plt+0x2d58>
   13ba8:	mov	r1, r7
   13bac:	mvn	r0, #-2147483648	; 0x80000000
   13bb0:	bl	14a50 <__assert_fail@plt+0x3b94>
   13bb4:	cmp	r5, r0
   13bb8:	movge	r0, #0
   13bbc:	movlt	r0, #1
   13bc0:	cmp	r0, #0
   13bc4:	beq	13c24 <__assert_fail@plt+0x2d68>
   13bc8:	bl	13d74 <__assert_fail@plt+0x2eb8>
   13bcc:	beq	13b34 <__assert_fail@plt+0x2c78>
   13bd0:	cmp	r4, #0
   13bd4:	bge	13c90 <__assert_fail@plt+0x2dd4>
   13bd8:	cmn	r4, #1
   13bdc:	beq	13b34 <__assert_fail@plt+0x2c78>
   13be0:	mov	r1, r4
   13be4:	mov	r0, #-2147483648	; 0x80000000
   13be8:	bl	14a50 <__assert_fail@plt+0x3b94>
   13bec:	cmp	r7, r0
   13bf0:	b	13ad4 <__assert_fail@plt+0x2c18>
   13bf4:	cmp	r8, #0
   13bf8:	blt	13b78 <__assert_fail@plt+0x2cbc>
   13bfc:	mvn	r2, #-2147483648	; 0x80000000
   13c00:	sub	r2, r2, r5
   13c04:	cmp	r8, r2
   13c08:	movle	r2, #0
   13c0c:	movgt	r2, #1
   13c10:	b	13b70 <__assert_fail@plt+0x2cb4>
   13c14:	cmn	r7, #1
   13c18:	movne	r1, r7
   13c1c:	movne	r0, #-2147483648	; 0x80000000
   13c20:	bne	13c74 <__assert_fail@plt+0x2db8>
   13c24:	mul	r1, r5, r7
   13c28:	mov	r0, sl
   13c2c:	bl	1390c <__assert_fail@plt+0x2a50>
   13c30:	str	r4, [fp]
   13c34:	add	sp, sp, #12
   13c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c3c:	beq	13c24 <__assert_fail@plt+0x2d68>
   13c40:	cmp	r5, #0
   13c44:	movge	r1, r7
   13c48:	mvnge	r0, #-2147483648	; 0x80000000
   13c4c:	bge	13c74 <__assert_fail@plt+0x2db8>
   13c50:	cmn	r5, #1
   13c54:	beq	13c24 <__assert_fail@plt+0x2d68>
   13c58:	mov	r1, r5
   13c5c:	mov	r0, #-2147483648	; 0x80000000
   13c60:	bl	14a50 <__assert_fail@plt+0x3b94>
   13c64:	cmp	r7, r0
   13c68:	movle	r0, #0
   13c6c:	movgt	r0, #1
   13c70:	b	13bc0 <__assert_fail@plt+0x2d04>
   13c74:	bl	14a50 <__assert_fail@plt+0x3b94>
   13c78:	cmp	r5, r0
   13c7c:	b	13c68 <__assert_fail@plt+0x2dac>
   13c80:	cmp	r7, #0
   13c84:	mov	r4, r9
   13c88:	blt	13b24 <__assert_fail@plt+0x2c68>
   13c8c:	beq	13b34 <__assert_fail@plt+0x2c78>
   13c90:	mov	r1, r7
   13c94:	mvn	r0, #-2147483648	; 0x80000000
   13c98:	bl	14a50 <__assert_fail@plt+0x3b94>
   13c9c:	cmp	r0, r4
   13ca0:	movge	r0, #0
   13ca4:	movlt	r0, #1
   13ca8:	b	13adc <__assert_fail@plt+0x2c20>
   13cac:	push	{r4, lr}
   13cb0:	bl	14360 <__assert_fail@plt+0x34a4>
   13cb4:	cmp	r0, #0
   13cb8:	popne	{r4, pc}
   13cbc:	bl	13d74 <__assert_fail@plt+0x2eb8>
   13cc0:	mov	r1, #1
   13cc4:	b	13cac <__assert_fail@plt+0x2df0>
   13cc8:	push	{r4, lr}
   13ccc:	bl	14360 <__assert_fail@plt+0x34a4>
   13cd0:	cmp	r0, #0
   13cd4:	popne	{r4, pc}
   13cd8:	bl	13d74 <__assert_fail@plt+0x2eb8>
   13cdc:	mov	r1, #1
   13ce0:	b	13cc8 <__assert_fail@plt+0x2e0c>
   13ce4:	push	{r4, r5, r6, lr}
   13ce8:	mov	r4, r1
   13cec:	mov	r5, r0
   13cf0:	mov	r0, r1
   13cf4:	bl	138e0 <__assert_fail@plt+0x2a24>
   13cf8:	mov	r2, r4
   13cfc:	mov	r1, r5
   13d00:	pop	{r4, r5, r6, lr}
   13d04:	b	10cac <memcpy@plt>
   13d08:	push	{r4, r5, r6, lr}
   13d0c:	mov	r4, r1
   13d10:	mov	r5, r0
   13d14:	mov	r0, r1
   13d18:	bl	138f4 <__assert_fail@plt+0x2a38>
   13d1c:	mov	r2, r4
   13d20:	mov	r1, r5
   13d24:	pop	{r4, r5, r6, lr}
   13d28:	b	10cac <memcpy@plt>
   13d2c:	push	{r4, r5, r6, lr}
   13d30:	mov	r5, r0
   13d34:	add	r0, r1, #1
   13d38:	mov	r4, r1
   13d3c:	bl	138f4 <__assert_fail@plt+0x2a38>
   13d40:	mov	r2, #0
   13d44:	mov	r1, r5
   13d48:	strb	r2, [r0, r4]
   13d4c:	mov	r2, r4
   13d50:	pop	{r4, r5, r6, lr}
   13d54:	b	10cac <memcpy@plt>
   13d58:	push	{r4, lr}
   13d5c:	mov	r4, r0
   13d60:	bl	10dcc <strlen@plt>
   13d64:	add	r1, r0, #1
   13d68:	mov	r0, r4
   13d6c:	pop	{r4, lr}
   13d70:	b	13ce4 <__assert_fail@plt+0x2e28>
   13d74:	ldr	r3, [pc, #44]	; 13da8 <__assert_fail@plt+0x2eec>
   13d78:	push	{r4, lr}
   13d7c:	mov	r2, #5
   13d80:	ldr	r1, [pc, #36]	; 13dac <__assert_fail@plt+0x2ef0>
   13d84:	mov	r0, #0
   13d88:	ldr	r4, [r3]
   13d8c:	bl	10ce8 <dcgettext@plt>
   13d90:	ldr	r2, [pc, #24]	; 13db0 <__assert_fail@plt+0x2ef4>
   13d94:	mov	r1, #0
   13d98:	mov	r3, r0
   13d9c:	mov	r0, r4
   13da0:	bl	10d60 <error@plt>
   13da4:	bl	10ea4 <abort@plt>
   13da8:	andeq	r6, r2, ip, ror #1
   13dac:	andeq	r5, r1, r9, lsr #24
   13db0:	andeq	r5, r1, sl, lsl r8
   13db4:	push	{r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
   13db8:	mov	r9, r3
   13dbc:	ldr	r3, [sp, #48]	; 0x30
   13dc0:	mov	r8, r2
   13dc4:	str	r3, [sp]
   13dc8:	mov	r2, r1
   13dcc:	add	r3, sp, #8
   13dd0:	mov	r1, #0
   13dd4:	mov	r6, r0
   13dd8:	ldr	r4, [sp, #56]	; 0x38
   13ddc:	bl	14068 <__assert_fail@plt+0x31ac>
   13de0:	cmp	r0, #0
   13de4:	bne	13e64 <__assert_fail@plt+0x2fa8>
   13de8:	ldrd	r0, [sp, #8]
   13dec:	cmp	r0, r8
   13df0:	sbcs	r3, r1, r9
   13df4:	ldrd	r2, [sp, #40]	; 0x28
   13df8:	movlt	ip, #1
   13dfc:	movge	ip, #0
   13e00:	cmp	r2, r0
   13e04:	sbcs	r3, r3, r1
   13e08:	movge	r3, ip
   13e0c:	orrlt	r3, ip, #1
   13e10:	cmp	r3, #0
   13e14:	beq	13ee0 <__assert_fail@plt+0x3024>
   13e18:	cmp	r0, #1073741824	; 0x40000000
   13e1c:	sbcs	r3, r1, #0
   13e20:	blt	13e44 <__assert_fail@plt+0x2f88>
   13e24:	bl	10de4 <__errno_location@plt>
   13e28:	mov	r3, #75	; 0x4b
   13e2c:	cmp	r4, #0
   13e30:	str	r3, [r0]
   13e34:	beq	13eac <__assert_fail@plt+0x2ff0>
   13e38:	bl	10de4 <__errno_location@plt>
   13e3c:	ldr	r5, [r0]
   13e40:	b	13ec0 <__assert_fail@plt+0x3004>
   13e44:	mov	r2, #-1073741824	; 0xc0000000
   13e48:	mvn	r3, #0
   13e4c:	cmp	r0, r2
   13e50:	sbcs	r3, r1, r3
   13e54:	blt	13e24 <__assert_fail@plt+0x2f68>
   13e58:	bl	10de4 <__errno_location@plt>
   13e5c:	mov	r3, #34	; 0x22
   13e60:	b	13e2c <__assert_fail@plt+0x2f70>
   13e64:	cmp	r0, #1
   13e68:	bne	13e90 <__assert_fail@plt+0x2fd4>
   13e6c:	bl	10de4 <__errno_location@plt>
   13e70:	mov	r3, #75	; 0x4b
   13e74:	cmp	r4, #0
   13e78:	str	r3, [r0]
   13e7c:	bne	13eb0 <__assert_fail@plt+0x2ff4>
   13e80:	bl	10de4 <__errno_location@plt>
   13e84:	mov	r4, #1
   13e88:	ldr	r5, [r0]
   13e8c:	b	13ec0 <__assert_fail@plt+0x3004>
   13e90:	cmp	r0, #3
   13e94:	bne	13ea4 <__assert_fail@plt+0x2fe8>
   13e98:	bl	10de4 <__errno_location@plt>
   13e9c:	mov	r3, #0
   13ea0:	b	13e74 <__assert_fail@plt+0x2fb8>
   13ea4:	cmp	r4, #0
   13ea8:	bne	13eb0 <__assert_fail@plt+0x2ff4>
   13eac:	mov	r4, #1
   13eb0:	bl	10de4 <__errno_location@plt>
   13eb4:	ldr	r5, [r0]
   13eb8:	cmp	r5, #22
   13ebc:	moveq	r5, #0
   13ec0:	mov	r0, r6
   13ec4:	bl	133c8 <__assert_fail@plt+0x250c>
   13ec8:	ldr	r3, [sp, #52]	; 0x34
   13ecc:	ldr	r2, [pc, #20]	; 13ee8 <__assert_fail@plt+0x302c>
   13ed0:	mov	r1, r5
   13ed4:	str	r0, [sp]
   13ed8:	mov	r0, r4
   13edc:	bl	10d60 <error@plt>
   13ee0:	add	sp, sp, #16
   13ee4:	pop	{r4, r5, r6, r8, r9, pc}
   13ee8:	andeq	r5, r1, r6, lsl r8
   13eec:	push	{r4, r5}
   13ef0:	mov	r1, #10
   13ef4:	pop	{r4, r5}
   13ef8:	b	13db4 <__assert_fail@plt+0x2ef8>
   13efc:	push	{r4, r5, r6, r7, r8, lr}
   13f00:	subs	r4, r1, #0
   13f04:	mov	r5, r0
   13f08:	bge	13fc4 <__assert_fail@plt+0x3108>
   13f0c:	ldrd	r6, [r0]
   13f10:	cmp	r6, #0
   13f14:	sbcs	r3, r7, #0
   13f18:	bge	13f78 <__assert_fail@plt+0x30bc>
   13f1c:	asr	r3, r4, #31
   13f20:	mov	r2, r4
   13f24:	mvn	r0, #0
   13f28:	mvn	r1, #-2147483648	; 0x80000000
   13f2c:	bl	14c90 <__assert_fail@plt+0x3dd4>
   13f30:	cmp	r6, r0
   13f34:	sbcs	r3, r7, r1
   13f38:	movlt	r3, #1
   13f3c:	movge	r3, #0
   13f40:	cmp	r3, #0
   13f44:	movne	r2, #0
   13f48:	movne	r3, #-2147483648	; 0x80000000
   13f4c:	bne	13fb8 <__assert_fail@plt+0x30fc>
   13f50:	ldr	r2, [r5]
   13f54:	asr	r3, r4, #31
   13f58:	ldr	r1, [r5, #4]
   13f5c:	mul	r3, r3, r2
   13f60:	mov	r0, #0
   13f64:	mla	r1, r4, r1, r3
   13f68:	umull	r2, r3, r2, r4
   13f6c:	add	r3, r1, r3
   13f70:	strd	r2, [r5]
   13f74:	pop	{r4, r5, r6, r7, r8, pc}
   13f78:	cmn	r4, #1
   13f7c:	moveq	r3, #0
   13f80:	beq	13fa8 <__assert_fail@plt+0x30ec>
   13f84:	mov	r2, r4
   13f88:	asr	r3, r4, #31
   13f8c:	mov	r0, #0
   13f90:	mov	r1, #-2147483648	; 0x80000000
   13f94:	bl	14c90 <__assert_fail@plt+0x3dd4>
   13f98:	cmp	r0, r6
   13f9c:	sbcs	r3, r1, r7
   13fa0:	movlt	r3, #1
   13fa4:	movge	r3, #0
   13fa8:	cmp	r3, #0
   13fac:	mvnne	r2, #0
   13fb0:	mvnne	r3, #-2147483648	; 0x80000000
   13fb4:	beq	13f50 <__assert_fail@plt+0x3094>
   13fb8:	strd	r2, [r5]
   13fbc:	mov	r0, #1
   13fc0:	pop	{r4, r5, r6, r7, r8, pc}
   13fc4:	beq	13f50 <__assert_fail@plt+0x3094>
   13fc8:	ldrd	r6, [r0]
   13fcc:	cmp	r6, #0
   13fd0:	sbcs	r3, r7, #0
   13fd4:	bge	14018 <__assert_fail@plt+0x315c>
   13fd8:	mvn	r3, #0
   13fdc:	cmp	r7, r3
   13fe0:	mvn	r2, #0
   13fe4:	cmpeq	r6, r2
   13fe8:	moveq	r3, #0
   13fec:	beq	13f40 <__assert_fail@plt+0x3084>
   13ff0:	mov	r2, r6
   13ff4:	mov	r3, r7
   13ff8:	mov	r0, #0
   13ffc:	mov	r1, #-2147483648	; 0x80000000
   14000:	bl	14c90 <__assert_fail@plt+0x3dd4>
   14004:	asr	r3, r4, #31
   14008:	mov	r2, r4
   1400c:	cmp	r0, r4
   14010:	sbcs	r3, r1, r3
   14014:	b	13f38 <__assert_fail@plt+0x307c>
   14018:	mov	r2, r4
   1401c:	asr	r3, r4, #31
   14020:	mvn	r0, #0
   14024:	mvn	r1, #-2147483648	; 0x80000000
   14028:	b	13f94 <__assert_fail@plt+0x30d8>
   1402c:	push	{r4, r5, r6, r7, r8, lr}
   14030:	mov	r6, r0
   14034:	mov	r7, r1
   14038:	mov	r5, r2
   1403c:	mov	r4, #0
   14040:	cmp	r5, #0
   14044:	bne	14050 <__assert_fail@plt+0x3194>
   14048:	mov	r0, r4
   1404c:	pop	{r4, r5, r6, r7, r8, pc}
   14050:	mov	r1, r7
   14054:	mov	r0, r6
   14058:	bl	13efc <__assert_fail@plt+0x3040>
   1405c:	sub	r5, r5, #1
   14060:	orr	r4, r4, r0
   14064:	b	14040 <__assert_fail@plt+0x3184>
   14068:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1406c:	cmp	r2, #36	; 0x24
   14070:	ldr	r9, [sp, #48]	; 0x30
   14074:	bls	1408c <__assert_fail@plt+0x31d0>
   14078:	ldr	r3, [pc, #724]	; 14354 <__assert_fail@plt+0x3498>
   1407c:	mov	r2, #85	; 0x55
   14080:	ldr	r1, [pc, #720]	; 14358 <__assert_fail@plt+0x349c>
   14084:	ldr	r0, [pc, #720]	; 1435c <__assert_fail@plt+0x34a0>
   14088:	bl	10ebc <__assert_fail@plt>
   1408c:	cmp	r1, #0
   14090:	mov	r7, r1
   14094:	mov	r4, r0
   14098:	addeq	r7, sp, #4
   1409c:	mov	r6, r2
   140a0:	mov	r8, r3
   140a4:	bl	10de4 <__errno_location@plt>
   140a8:	mov	r5, #0
   140ac:	mov	r2, r6
   140b0:	mov	r1, r7
   140b4:	str	r5, [r0]
   140b8:	mov	sl, r0
   140bc:	mov	r0, r4
   140c0:	bl	10e2c <strtoimax@plt>
   140c4:	ldr	r6, [r7]
   140c8:	cmp	r4, r6
   140cc:	strd	r0, [sp, #8]
   140d0:	bne	14134 <__assert_fail@plt+0x3278>
   140d4:	cmp	r9, r5
   140d8:	beq	1434c <__assert_fail@plt+0x3490>
   140dc:	ldrb	r1, [r6]
   140e0:	cmp	r1, r5
   140e4:	beq	1434c <__assert_fail@plt+0x3490>
   140e8:	mov	r0, r9
   140ec:	bl	10dd8 <strchr@plt>
   140f0:	cmp	r0, r5
   140f4:	beq	1434c <__assert_fail@plt+0x3490>
   140f8:	mov	r2, #1
   140fc:	mov	r3, #0
   14100:	strd	r2, [sp, #8]
   14104:	ldrb	r4, [r6]
   14108:	cmp	r4, #0
   1410c:	beq	1424c <__assert_fail@plt+0x3390>
   14110:	mov	r1, r4
   14114:	mov	r0, r9
   14118:	bl	10dd8 <strchr@plt>
   1411c:	cmp	r0, #0
   14120:	bne	14164 <__assert_fail@plt+0x32a8>
   14124:	ldrd	r2, [sp, #8]
   14128:	orr	r5, r5, #2
   1412c:	strd	r2, [r8]
   14130:	b	14158 <__assert_fail@plt+0x329c>
   14134:	ldr	r5, [sl]
   14138:	cmp	r5, #0
   1413c:	beq	1414c <__assert_fail@plt+0x3290>
   14140:	cmp	r5, #34	; 0x22
   14144:	bne	1434c <__assert_fail@plt+0x3490>
   14148:	mov	r5, #1
   1414c:	cmp	r9, #0
   14150:	bne	14104 <__assert_fail@plt+0x3248>
   14154:	strd	r0, [r8]
   14158:	mov	r0, r5
   1415c:	add	sp, sp, #16
   14160:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14164:	cmp	r4, #84	; 0x54
   14168:	beq	141bc <__assert_fail@plt+0x3300>
   1416c:	bhi	141a4 <__assert_fail@plt+0x32e8>
   14170:	cmp	r4, #75	; 0x4b
   14174:	beq	141bc <__assert_fail@plt+0x3300>
   14178:	bhi	14194 <__assert_fail@plt+0x32d8>
   1417c:	cmp	r4, #69	; 0x45
   14180:	beq	141bc <__assert_fail@plt+0x3300>
   14184:	cmp	r4, #71	; 0x47
   14188:	beq	141bc <__assert_fail@plt+0x3300>
   1418c:	mov	r6, #1
   14190:	b	14280 <__assert_fail@plt+0x33c4>
   14194:	cmp	r4, #77	; 0x4d
   14198:	beq	141bc <__assert_fail@plt+0x3300>
   1419c:	cmp	r4, #80	; 0x50
   141a0:	b	14188 <__assert_fail@plt+0x32cc>
   141a4:	cmp	r4, #103	; 0x67
   141a8:	beq	141bc <__assert_fail@plt+0x3300>
   141ac:	bhi	14258 <__assert_fail@plt+0x339c>
   141b0:	sub	r3, r4, #89	; 0x59
   141b4:	cmp	r3, #1
   141b8:	bhi	1418c <__assert_fail@plt+0x32d0>
   141bc:	mov	r1, #48	; 0x30
   141c0:	mov	r0, r9
   141c4:	bl	10dd8 <strchr@plt>
   141c8:	cmp	r0, #0
   141cc:	beq	1418c <__assert_fail@plt+0x32d0>
   141d0:	ldrb	r3, [r6, #1]
   141d4:	cmp	r3, #68	; 0x44
   141d8:	beq	141ec <__assert_fail@plt+0x3330>
   141dc:	cmp	r3, #105	; 0x69
   141e0:	beq	14270 <__assert_fail@plt+0x33b4>
   141e4:	cmp	r3, #66	; 0x42
   141e8:	bne	1418c <__assert_fail@plt+0x32d0>
   141ec:	mov	r6, #2
   141f0:	mov	r1, #1000	; 0x3e8
   141f4:	cmp	r4, #89	; 0x59
   141f8:	beq	14334 <__assert_fail@plt+0x3478>
   141fc:	bhi	142a8 <__assert_fail@plt+0x33ec>
   14200:	cmp	r4, #75	; 0x4b
   14204:	beq	142e8 <__assert_fail@plt+0x342c>
   14208:	bhi	14288 <__assert_fail@plt+0x33cc>
   1420c:	cmp	r4, #69	; 0x45
   14210:	beq	14310 <__assert_fail@plt+0x3454>
   14214:	cmp	r4, #71	; 0x47
   14218:	beq	1431c <__assert_fail@plt+0x3460>
   1421c:	cmp	r4, #66	; 0x42
   14220:	moveq	r1, #1024	; 0x400
   14224:	bne	14124 <__assert_fail@plt+0x3268>
   14228:	add	r0, sp, #8
   1422c:	bl	13efc <__assert_fail@plt+0x3040>
   14230:	ldr	r3, [r7]
   14234:	orr	r5, r5, r0
   14238:	add	r2, r3, r6
   1423c:	str	r2, [r7]
   14240:	ldrb	r3, [r3, r6]
   14244:	cmp	r3, #0
   14248:	orrne	r5, r5, #2
   1424c:	ldrd	r2, [sp, #8]
   14250:	strd	r2, [r8]
   14254:	b	14158 <__assert_fail@plt+0x329c>
   14258:	cmp	r4, #109	; 0x6d
   1425c:	beq	141bc <__assert_fail@plt+0x3300>
   14260:	cmp	r4, #116	; 0x74
   14264:	beq	141bc <__assert_fail@plt+0x3300>
   14268:	cmp	r4, #107	; 0x6b
   1426c:	b	14188 <__assert_fail@plt+0x32cc>
   14270:	ldrb	r6, [r6, #2]
   14274:	cmp	r6, #66	; 0x42
   14278:	movne	r6, #1
   1427c:	moveq	r6, #3
   14280:	mov	r1, #1024	; 0x400
   14284:	b	141f4 <__assert_fail@plt+0x3338>
   14288:	cmp	r4, #80	; 0x50
   1428c:	beq	14324 <__assert_fail@plt+0x3468>
   14290:	cmp	r4, #84	; 0x54
   14294:	beq	1432c <__assert_fail@plt+0x3470>
   14298:	cmp	r4, #77	; 0x4d
   1429c:	bne	14124 <__assert_fail@plt+0x3268>
   142a0:	mov	r2, #2
   142a4:	b	14314 <__assert_fail@plt+0x3458>
   142a8:	cmp	r4, #103	; 0x67
   142ac:	beq	1431c <__assert_fail@plt+0x3460>
   142b0:	bhi	142d4 <__assert_fail@plt+0x3418>
   142b4:	cmp	r4, #98	; 0x62
   142b8:	beq	14308 <__assert_fail@plt+0x344c>
   142bc:	cmp	r4, #99	; 0x63
   142c0:	beq	14344 <__assert_fail@plt+0x3488>
   142c4:	cmp	r4, #90	; 0x5a
   142c8:	bne	14124 <__assert_fail@plt+0x3268>
   142cc:	mov	r2, #7
   142d0:	b	14314 <__assert_fail@plt+0x3458>
   142d4:	cmp	r4, #109	; 0x6d
   142d8:	beq	142a0 <__assert_fail@plt+0x33e4>
   142dc:	bhi	142f0 <__assert_fail@plt+0x3434>
   142e0:	cmp	r4, #107	; 0x6b
   142e4:	bne	14124 <__assert_fail@plt+0x3268>
   142e8:	mov	r2, #1
   142ec:	b	14314 <__assert_fail@plt+0x3458>
   142f0:	cmp	r4, #116	; 0x74
   142f4:	beq	1432c <__assert_fail@plt+0x3470>
   142f8:	cmp	r4, #119	; 0x77
   142fc:	moveq	r1, #2
   14300:	beq	14228 <__assert_fail@plt+0x336c>
   14304:	b	14124 <__assert_fail@plt+0x3268>
   14308:	mov	r1, #512	; 0x200
   1430c:	b	14228 <__assert_fail@plt+0x336c>
   14310:	mov	r2, #6
   14314:	add	r0, sp, #8
   14318:	b	1433c <__assert_fail@plt+0x3480>
   1431c:	mov	r2, #3
   14320:	b	14314 <__assert_fail@plt+0x3458>
   14324:	mov	r2, #5
   14328:	b	14314 <__assert_fail@plt+0x3458>
   1432c:	mov	r2, #4
   14330:	b	14314 <__assert_fail@plt+0x3458>
   14334:	mov	r2, #8
   14338:	add	r0, sp, r2
   1433c:	bl	1402c <__assert_fail@plt+0x3170>
   14340:	b	14230 <__assert_fail@plt+0x3374>
   14344:	mov	r0, #0
   14348:	b	14230 <__assert_fail@plt+0x3374>
   1434c:	mov	r5, #4
   14350:	b	14158 <__assert_fail@plt+0x329c>
   14354:	andeq	r5, r1, sl, lsr ip
   14358:	andeq	r5, r1, r5, asr #24
   1435c:	andeq	r5, r1, r3, asr ip
   14360:	cmp	r1, #0
   14364:	cmpne	r0, #0
   14368:	moveq	r1, #1
   1436c:	moveq	r0, r1
   14370:	umull	r2, r3, r0, r1
   14374:	adds	r3, r3, #0
   14378:	movne	r3, #1
   1437c:	cmp	r2, #0
   14380:	blt	14390 <__assert_fail@plt+0x34d4>
   14384:	cmp	r3, #0
   14388:	bne	14390 <__assert_fail@plt+0x34d4>
   1438c:	b	10c58 <calloc@plt>
   14390:	push	{r4, lr}
   14394:	bl	10de4 <__errno_location@plt>
   14398:	mov	r3, #12
   1439c:	str	r3, [r0]
   143a0:	mov	r0, #0
   143a4:	pop	{r4, pc}
   143a8:	cmp	r0, #0
   143ac:	mov	r3, #0
   143b0:	moveq	r0, #1
   143b4:	adds	r3, r3, #0
   143b8:	movne	r3, #1
   143bc:	cmp	r0, #0
   143c0:	blt	143d0 <__assert_fail@plt+0x3514>
   143c4:	cmp	r3, #0
   143c8:	bne	143d0 <__assert_fail@plt+0x3514>
   143cc:	b	10d78 <malloc@plt>
   143d0:	push	{r4, lr}
   143d4:	bl	10de4 <__errno_location@plt>
   143d8:	mov	r3, #12
   143dc:	str	r3, [r0]
   143e0:	mov	r0, #0
   143e4:	pop	{r4, pc}
   143e8:	cmp	r0, #0
   143ec:	push	{r4, lr}
   143f0:	mov	r4, r1
   143f4:	bne	14404 <__assert_fail@plt+0x3548>
   143f8:	mov	r0, r1
   143fc:	pop	{r4, lr}
   14400:	b	143a8 <__assert_fail@plt+0x34ec>
   14404:	cmp	r1, #0
   14408:	bne	14418 <__assert_fail@plt+0x355c>
   1440c:	bl	145ac <__assert_fail@plt+0x36f0>
   14410:	mov	r0, #0
   14414:	pop	{r4, pc}
   14418:	cmp	r1, #0
   1441c:	blt	1442c <__assert_fail@plt+0x3570>
   14420:	mov	r3, #0
   14424:	cmp	r3, r3
   14428:	beq	1443c <__assert_fail@plt+0x3580>
   1442c:	bl	10de4 <__errno_location@plt>
   14430:	mov	r3, #12
   14434:	str	r3, [r0]
   14438:	b	14410 <__assert_fail@plt+0x3554>
   1443c:	pop	{r4, lr}
   14440:	b	10cf4 <realloc@plt>
   14444:	push	{r4, r5, r6, lr}
   14448:	mov	r4, r0
   1444c:	bl	10d3c <__fpending@plt>
   14450:	mov	r5, r0
   14454:	mov	r0, r4
   14458:	bl	10d48 <ferror_unlocked@plt>
   1445c:	mov	r6, r0
   14460:	mov	r0, r4
   14464:	bl	144b4 <__assert_fail@plt+0x35f8>
   14468:	cmp	r6, #0
   1446c:	mov	r4, r0
   14470:	bne	1449c <__assert_fail@plt+0x35e0>
   14474:	cmp	r0, #0
   14478:	beq	14494 <__assert_fail@plt+0x35d8>
   1447c:	cmp	r5, #0
   14480:	bne	144ac <__assert_fail@plt+0x35f0>
   14484:	bl	10de4 <__errno_location@plt>
   14488:	ldr	r4, [r0]
   1448c:	subs	r4, r4, #9
   14490:	mvnne	r4, #0
   14494:	mov	r0, r4
   14498:	pop	{r4, r5, r6, pc}
   1449c:	cmp	r0, #0
   144a0:	bne	144ac <__assert_fail@plt+0x35f0>
   144a4:	bl	10de4 <__errno_location@plt>
   144a8:	str	r4, [r0]
   144ac:	mvn	r4, #0
   144b0:	b	14494 <__assert_fail@plt+0x35d8>
   144b4:	push	{r0, r1, r2, r4, r5, lr}
   144b8:	mov	r4, r0
   144bc:	bl	10e14 <fileno@plt>
   144c0:	cmp	r0, #0
   144c4:	mov	r0, r4
   144c8:	bge	144d8 <__assert_fail@plt+0x361c>
   144cc:	add	sp, sp, #12
   144d0:	pop	{r4, r5, lr}
   144d4:	b	10e38 <fclose@plt>
   144d8:	bl	10d90 <__freading@plt>
   144dc:	cmp	r0, #0
   144e0:	bne	1451c <__assert_fail@plt+0x3660>
   144e4:	mov	r0, r4
   144e8:	bl	1455c <__assert_fail@plt+0x36a0>
   144ec:	cmp	r0, #0
   144f0:	bne	14550 <__assert_fail@plt+0x3694>
   144f4:	mov	r5, #0
   144f8:	mov	r0, r4
   144fc:	bl	10e38 <fclose@plt>
   14500:	cmp	r5, #0
   14504:	beq	14514 <__assert_fail@plt+0x3658>
   14508:	bl	10de4 <__errno_location@plt>
   1450c:	str	r5, [r0]
   14510:	mvn	r0, #0
   14514:	add	sp, sp, #12
   14518:	pop	{r4, r5, pc}
   1451c:	mov	r0, r4
   14520:	bl	10e14 <fileno@plt>
   14524:	mov	r3, #1
   14528:	str	r3, [sp]
   1452c:	mov	r2, #0
   14530:	mov	r3, #0
   14534:	bl	10d24 <lseek64@plt>
   14538:	mvn	r3, #0
   1453c:	mvn	r2, #0
   14540:	cmp	r1, r3
   14544:	cmpeq	r0, r2
   14548:	bne	144e4 <__assert_fail@plt+0x3628>
   1454c:	b	144f4 <__assert_fail@plt+0x3638>
   14550:	bl	10de4 <__errno_location@plt>
   14554:	ldr	r5, [r0]
   14558:	b	144f8 <__assert_fail@plt+0x363c>
   1455c:	push	{r0, r1, r4, lr}
   14560:	subs	r4, r0, #0
   14564:	bne	14578 <__assert_fail@plt+0x36bc>
   14568:	mov	r0, r4
   1456c:	add	sp, sp, #8
   14570:	pop	{r4, lr}
   14574:	b	10c88 <fflush@plt>
   14578:	bl	10d90 <__freading@plt>
   1457c:	cmp	r0, #0
   14580:	beq	14568 <__assert_fail@plt+0x36ac>
   14584:	ldr	r3, [r4]
   14588:	tst	r3, #256	; 0x100
   1458c:	beq	14568 <__assert_fail@plt+0x36ac>
   14590:	mov	r3, #1
   14594:	str	r3, [sp]
   14598:	mov	r2, #0
   1459c:	mov	r3, #0
   145a0:	mov	r0, r4
   145a4:	bl	14600 <__assert_fail@plt+0x3744>
   145a8:	b	14568 <__assert_fail@plt+0x36ac>
   145ac:	push	{r0, r1, r2, r4, r5, lr}
   145b0:	mov	r5, r0
   145b4:	bl	10de4 <__errno_location@plt>
   145b8:	ldr	r3, [r0]
   145bc:	mov	r4, r0
   145c0:	str	r3, [sp]
   145c4:	str	r3, [sp, #4]
   145c8:	mov	r3, #0
   145cc:	str	r3, [r0]
   145d0:	mov	r0, r5
   145d4:	bl	10c94 <free@plt>
   145d8:	ldr	r3, [r4]
   145dc:	add	r2, sp, #8
   145e0:	cmp	r3, #0
   145e4:	moveq	r3, #4
   145e8:	movne	r3, #0
   145ec:	add	r3, r2, r3
   145f0:	ldr	r3, [r3, #-8]
   145f4:	str	r3, [r4]
   145f8:	add	sp, sp, #12
   145fc:	pop	{r4, r5, pc}
   14600:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14604:	mov	r4, r0
   14608:	ldmib	r0, {ip, lr}
   1460c:	ldr	r8, [sp, #32]
   14610:	cmp	lr, ip
   14614:	bne	14680 <__assert_fail@plt+0x37c4>
   14618:	ldr	lr, [r0, #20]
   1461c:	ldr	ip, [r0, #16]
   14620:	cmp	lr, ip
   14624:	bne	14680 <__assert_fail@plt+0x37c4>
   14628:	ldr	r5, [r0, #36]	; 0x24
   1462c:	cmp	r5, #0
   14630:	bne	14680 <__assert_fail@plt+0x37c4>
   14634:	mov	r6, r2
   14638:	mov	r7, r3
   1463c:	bl	10e14 <fileno@plt>
   14640:	mov	r2, r6
   14644:	mov	r3, r7
   14648:	str	r8, [sp]
   1464c:	bl	10d24 <lseek64@plt>
   14650:	mvn	r3, #0
   14654:	mvn	r2, #0
   14658:	cmp	r1, r3
   1465c:	cmpeq	r0, r2
   14660:	mvneq	r0, #0
   14664:	ldrne	r3, [r4]
   14668:	strdne	r0, [r4, #80]	; 0x50
   1466c:	movne	r0, r5
   14670:	bicne	r3, r3, #16
   14674:	strne	r3, [r4]
   14678:	add	sp, sp, #8
   1467c:	pop	{r4, r5, r6, r7, r8, pc}
   14680:	str	r8, [sp, #32]
   14684:	mov	r0, r4
   14688:	add	sp, sp, #8
   1468c:	pop	{r4, r5, r6, r7, r8, lr}
   14690:	b	10e44 <fseeko64@plt>
   14694:	push	{r4, lr}
   14698:	mov	r0, #14
   1469c:	bl	10e68 <nl_langinfo@plt>
   146a0:	ldr	r3, [pc, #24]	; 146c0 <__assert_fail@plt+0x3804>
   146a4:	cmp	r0, #0
   146a8:	moveq	r0, r3
   146ac:	ldr	r3, [pc, #16]	; 146c4 <__assert_fail@plt+0x3808>
   146b0:	ldrb	r2, [r0]
   146b4:	cmp	r2, #0
   146b8:	moveq	r0, r3
   146bc:	pop	{r4, pc}
   146c0:	andeq	r5, r1, r1, ror #10
   146c4:	andeq	r5, r1, r9, ror ip
   146c8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   146cc:	subs	r5, r0, #0
   146d0:	addeq	r5, sp, #4
   146d4:	mov	r0, r5
   146d8:	mov	r7, r2
   146dc:	mov	r6, r1
   146e0:	bl	10d54 <mbrtowc@plt>
   146e4:	cmp	r7, #0
   146e8:	cmnne	r0, #3
   146ec:	mov	r4, r0
   146f0:	bls	1470c <__assert_fail@plt+0x3850>
   146f4:	mov	r0, #0
   146f8:	bl	14764 <__assert_fail@plt+0x38a8>
   146fc:	cmp	r0, #0
   14700:	moveq	r4, #1
   14704:	ldrbeq	r3, [r6]
   14708:	streq	r3, [r5]
   1470c:	mov	r0, r4
   14710:	add	sp, sp, #12
   14714:	pop	{r4, r5, r6, r7, pc}
   14718:	push	{r4, r5, r6, lr}
   1471c:	subs	r4, r2, #0
   14720:	mov	r6, r0
   14724:	mov	r5, r1
   14728:	beq	14740 <__assert_fail@plt+0x3884>
   1472c:	mov	r1, r4
   14730:	mvn	r0, #0
   14734:	bl	14844 <__assert_fail@plt+0x3988>
   14738:	cmp	r0, r5
   1473c:	bcc	14750 <__assert_fail@plt+0x3894>
   14740:	mul	r1, r5, r4
   14744:	mov	r0, r6
   14748:	pop	{r4, r5, r6, lr}
   1474c:	b	143e8 <__assert_fail@plt+0x352c>
   14750:	bl	10de4 <__errno_location@plt>
   14754:	mov	r3, #12
   14758:	str	r3, [r0]
   1475c:	mov	r0, #0
   14760:	pop	{r4, r5, r6, pc}
   14764:	push	{lr}		; (str lr, [sp, #-4]!)
   14768:	sub	sp, sp, #268	; 0x10c
   1476c:	ldr	r2, [pc, #64]	; 147b4 <__assert_fail@plt+0x38f8>
   14770:	add	r1, sp, #4
   14774:	bl	147c0 <__assert_fail@plt+0x3904>
   14778:	cmp	r0, #0
   1477c:	movne	r0, #0
   14780:	bne	147ac <__assert_fail@plt+0x38f0>
   14784:	ldr	r1, [pc, #44]	; 147b8 <__assert_fail@plt+0x38fc>
   14788:	add	r0, sp, #4
   1478c:	bl	10c7c <strcmp@plt>
   14790:	cmp	r0, #0
   14794:	beq	147ac <__assert_fail@plt+0x38f0>
   14798:	ldr	r1, [pc, #28]	; 147bc <__assert_fail@plt+0x3900>
   1479c:	add	r0, sp, #4
   147a0:	bl	10c7c <strcmp@plt>
   147a4:	adds	r0, r0, #0
   147a8:	movne	r0, #1
   147ac:	add	sp, sp, #268	; 0x10c
   147b0:	pop	{pc}		; (ldr pc, [sp], #4)
   147b4:	andeq	r0, r0, r1, lsl #2
   147b8:	andeq	r5, r1, pc, ror ip
   147bc:	andeq	r5, r1, r1, lsl #25
   147c0:	push	{r4, r5, r6, lr}
   147c4:	mov	r5, r1
   147c8:	mov	r1, #0
   147cc:	mov	r4, r2
   147d0:	bl	10e50 <setlocale@plt>
   147d4:	subs	r6, r0, #0
   147d8:	bne	147ec <__assert_fail@plt+0x3930>
   147dc:	cmp	r4, #0
   147e0:	strbne	r6, [r5]
   147e4:	mov	r0, #22
   147e8:	pop	{r4, r5, r6, pc}
   147ec:	bl	10dcc <strlen@plt>
   147f0:	cmp	r4, r0
   147f4:	bls	14810 <__assert_fail@plt+0x3954>
   147f8:	add	r2, r0, #1
   147fc:	mov	r1, r6
   14800:	mov	r0, r5
   14804:	bl	10cac <memcpy@plt>
   14808:	mov	r0, #0
   1480c:	pop	{r4, r5, r6, pc}
   14810:	cmp	r4, #0
   14814:	beq	14834 <__assert_fail@plt+0x3978>
   14818:	sub	r4, r4, #1
   1481c:	mov	r2, r4
   14820:	mov	r1, r6
   14824:	mov	r0, r5
   14828:	bl	10cac <memcpy@plt>
   1482c:	mov	r3, #0
   14830:	strb	r3, [r5, r4]
   14834:	mov	r0, #34	; 0x22
   14838:	pop	{r4, r5, r6, pc}
   1483c:	mov	r1, #0
   14840:	b	10e50 <setlocale@plt>
   14844:	subs	r2, r1, #1
   14848:	bxeq	lr
   1484c:	bcc	14a24 <__assert_fail@plt+0x3b68>
   14850:	cmp	r0, r1
   14854:	bls	14a08 <__assert_fail@plt+0x3b4c>
   14858:	tst	r1, r2
   1485c:	beq	14a14 <__assert_fail@plt+0x3b58>
   14860:	clz	r3, r0
   14864:	clz	r2, r1
   14868:	sub	r3, r2, r3
   1486c:	rsbs	r3, r3, #31
   14870:	addne	r3, r3, r3, lsl #1
   14874:	mov	r2, #0
   14878:	addne	pc, pc, r3, lsl #2
   1487c:	nop			; (mov r0, r0)
   14880:	cmp	r0, r1, lsl #31
   14884:	adc	r2, r2, r2
   14888:	subcs	r0, r0, r1, lsl #31
   1488c:	cmp	r0, r1, lsl #30
   14890:	adc	r2, r2, r2
   14894:	subcs	r0, r0, r1, lsl #30
   14898:	cmp	r0, r1, lsl #29
   1489c:	adc	r2, r2, r2
   148a0:	subcs	r0, r0, r1, lsl #29
   148a4:	cmp	r0, r1, lsl #28
   148a8:	adc	r2, r2, r2
   148ac:	subcs	r0, r0, r1, lsl #28
   148b0:	cmp	r0, r1, lsl #27
   148b4:	adc	r2, r2, r2
   148b8:	subcs	r0, r0, r1, lsl #27
   148bc:	cmp	r0, r1, lsl #26
   148c0:	adc	r2, r2, r2
   148c4:	subcs	r0, r0, r1, lsl #26
   148c8:	cmp	r0, r1, lsl #25
   148cc:	adc	r2, r2, r2
   148d0:	subcs	r0, r0, r1, lsl #25
   148d4:	cmp	r0, r1, lsl #24
   148d8:	adc	r2, r2, r2
   148dc:	subcs	r0, r0, r1, lsl #24
   148e0:	cmp	r0, r1, lsl #23
   148e4:	adc	r2, r2, r2
   148e8:	subcs	r0, r0, r1, lsl #23
   148ec:	cmp	r0, r1, lsl #22
   148f0:	adc	r2, r2, r2
   148f4:	subcs	r0, r0, r1, lsl #22
   148f8:	cmp	r0, r1, lsl #21
   148fc:	adc	r2, r2, r2
   14900:	subcs	r0, r0, r1, lsl #21
   14904:	cmp	r0, r1, lsl #20
   14908:	adc	r2, r2, r2
   1490c:	subcs	r0, r0, r1, lsl #20
   14910:	cmp	r0, r1, lsl #19
   14914:	adc	r2, r2, r2
   14918:	subcs	r0, r0, r1, lsl #19
   1491c:	cmp	r0, r1, lsl #18
   14920:	adc	r2, r2, r2
   14924:	subcs	r0, r0, r1, lsl #18
   14928:	cmp	r0, r1, lsl #17
   1492c:	adc	r2, r2, r2
   14930:	subcs	r0, r0, r1, lsl #17
   14934:	cmp	r0, r1, lsl #16
   14938:	adc	r2, r2, r2
   1493c:	subcs	r0, r0, r1, lsl #16
   14940:	cmp	r0, r1, lsl #15
   14944:	adc	r2, r2, r2
   14948:	subcs	r0, r0, r1, lsl #15
   1494c:	cmp	r0, r1, lsl #14
   14950:	adc	r2, r2, r2
   14954:	subcs	r0, r0, r1, lsl #14
   14958:	cmp	r0, r1, lsl #13
   1495c:	adc	r2, r2, r2
   14960:	subcs	r0, r0, r1, lsl #13
   14964:	cmp	r0, r1, lsl #12
   14968:	adc	r2, r2, r2
   1496c:	subcs	r0, r0, r1, lsl #12
   14970:	cmp	r0, r1, lsl #11
   14974:	adc	r2, r2, r2
   14978:	subcs	r0, r0, r1, lsl #11
   1497c:	cmp	r0, r1, lsl #10
   14980:	adc	r2, r2, r2
   14984:	subcs	r0, r0, r1, lsl #10
   14988:	cmp	r0, r1, lsl #9
   1498c:	adc	r2, r2, r2
   14990:	subcs	r0, r0, r1, lsl #9
   14994:	cmp	r0, r1, lsl #8
   14998:	adc	r2, r2, r2
   1499c:	subcs	r0, r0, r1, lsl #8
   149a0:	cmp	r0, r1, lsl #7
   149a4:	adc	r2, r2, r2
   149a8:	subcs	r0, r0, r1, lsl #7
   149ac:	cmp	r0, r1, lsl #6
   149b0:	adc	r2, r2, r2
   149b4:	subcs	r0, r0, r1, lsl #6
   149b8:	cmp	r0, r1, lsl #5
   149bc:	adc	r2, r2, r2
   149c0:	subcs	r0, r0, r1, lsl #5
   149c4:	cmp	r0, r1, lsl #4
   149c8:	adc	r2, r2, r2
   149cc:	subcs	r0, r0, r1, lsl #4
   149d0:	cmp	r0, r1, lsl #3
   149d4:	adc	r2, r2, r2
   149d8:	subcs	r0, r0, r1, lsl #3
   149dc:	cmp	r0, r1, lsl #2
   149e0:	adc	r2, r2, r2
   149e4:	subcs	r0, r0, r1, lsl #2
   149e8:	cmp	r0, r1, lsl #1
   149ec:	adc	r2, r2, r2
   149f0:	subcs	r0, r0, r1, lsl #1
   149f4:	cmp	r0, r1
   149f8:	adc	r2, r2, r2
   149fc:	subcs	r0, r0, r1
   14a00:	mov	r0, r2
   14a04:	bx	lr
   14a08:	moveq	r0, #1
   14a0c:	movne	r0, #0
   14a10:	bx	lr
   14a14:	clz	r2, r1
   14a18:	rsb	r2, r2, #31
   14a1c:	lsr	r0, r0, r2
   14a20:	bx	lr
   14a24:	cmp	r0, #0
   14a28:	mvnne	r0, #0
   14a2c:	b	14d64 <__assert_fail@plt+0x3ea8>
   14a30:	cmp	r1, #0
   14a34:	beq	14a24 <__assert_fail@plt+0x3b68>
   14a38:	push	{r0, r1, lr}
   14a3c:	bl	14844 <__assert_fail@plt+0x3988>
   14a40:	pop	{r1, r2, lr}
   14a44:	mul	r3, r2, r0
   14a48:	sub	r1, r1, r3
   14a4c:	bx	lr
   14a50:	cmp	r1, #0
   14a54:	beq	14c60 <__assert_fail@plt+0x3da4>
   14a58:	eor	ip, r0, r1
   14a5c:	rsbmi	r1, r1, #0
   14a60:	subs	r2, r1, #1
   14a64:	beq	14c2c <__assert_fail@plt+0x3d70>
   14a68:	movs	r3, r0
   14a6c:	rsbmi	r3, r0, #0
   14a70:	cmp	r3, r1
   14a74:	bls	14c38 <__assert_fail@plt+0x3d7c>
   14a78:	tst	r1, r2
   14a7c:	beq	14c48 <__assert_fail@plt+0x3d8c>
   14a80:	clz	r2, r3
   14a84:	clz	r0, r1
   14a88:	sub	r2, r0, r2
   14a8c:	rsbs	r2, r2, #31
   14a90:	addne	r2, r2, r2, lsl #1
   14a94:	mov	r0, #0
   14a98:	addne	pc, pc, r2, lsl #2
   14a9c:	nop			; (mov r0, r0)
   14aa0:	cmp	r3, r1, lsl #31
   14aa4:	adc	r0, r0, r0
   14aa8:	subcs	r3, r3, r1, lsl #31
   14aac:	cmp	r3, r1, lsl #30
   14ab0:	adc	r0, r0, r0
   14ab4:	subcs	r3, r3, r1, lsl #30
   14ab8:	cmp	r3, r1, lsl #29
   14abc:	adc	r0, r0, r0
   14ac0:	subcs	r3, r3, r1, lsl #29
   14ac4:	cmp	r3, r1, lsl #28
   14ac8:	adc	r0, r0, r0
   14acc:	subcs	r3, r3, r1, lsl #28
   14ad0:	cmp	r3, r1, lsl #27
   14ad4:	adc	r0, r0, r0
   14ad8:	subcs	r3, r3, r1, lsl #27
   14adc:	cmp	r3, r1, lsl #26
   14ae0:	adc	r0, r0, r0
   14ae4:	subcs	r3, r3, r1, lsl #26
   14ae8:	cmp	r3, r1, lsl #25
   14aec:	adc	r0, r0, r0
   14af0:	subcs	r3, r3, r1, lsl #25
   14af4:	cmp	r3, r1, lsl #24
   14af8:	adc	r0, r0, r0
   14afc:	subcs	r3, r3, r1, lsl #24
   14b00:	cmp	r3, r1, lsl #23
   14b04:	adc	r0, r0, r0
   14b08:	subcs	r3, r3, r1, lsl #23
   14b0c:	cmp	r3, r1, lsl #22
   14b10:	adc	r0, r0, r0
   14b14:	subcs	r3, r3, r1, lsl #22
   14b18:	cmp	r3, r1, lsl #21
   14b1c:	adc	r0, r0, r0
   14b20:	subcs	r3, r3, r1, lsl #21
   14b24:	cmp	r3, r1, lsl #20
   14b28:	adc	r0, r0, r0
   14b2c:	subcs	r3, r3, r1, lsl #20
   14b30:	cmp	r3, r1, lsl #19
   14b34:	adc	r0, r0, r0
   14b38:	subcs	r3, r3, r1, lsl #19
   14b3c:	cmp	r3, r1, lsl #18
   14b40:	adc	r0, r0, r0
   14b44:	subcs	r3, r3, r1, lsl #18
   14b48:	cmp	r3, r1, lsl #17
   14b4c:	adc	r0, r0, r0
   14b50:	subcs	r3, r3, r1, lsl #17
   14b54:	cmp	r3, r1, lsl #16
   14b58:	adc	r0, r0, r0
   14b5c:	subcs	r3, r3, r1, lsl #16
   14b60:	cmp	r3, r1, lsl #15
   14b64:	adc	r0, r0, r0
   14b68:	subcs	r3, r3, r1, lsl #15
   14b6c:	cmp	r3, r1, lsl #14
   14b70:	adc	r0, r0, r0
   14b74:	subcs	r3, r3, r1, lsl #14
   14b78:	cmp	r3, r1, lsl #13
   14b7c:	adc	r0, r0, r0
   14b80:	subcs	r3, r3, r1, lsl #13
   14b84:	cmp	r3, r1, lsl #12
   14b88:	adc	r0, r0, r0
   14b8c:	subcs	r3, r3, r1, lsl #12
   14b90:	cmp	r3, r1, lsl #11
   14b94:	adc	r0, r0, r0
   14b98:	subcs	r3, r3, r1, lsl #11
   14b9c:	cmp	r3, r1, lsl #10
   14ba0:	adc	r0, r0, r0
   14ba4:	subcs	r3, r3, r1, lsl #10
   14ba8:	cmp	r3, r1, lsl #9
   14bac:	adc	r0, r0, r0
   14bb0:	subcs	r3, r3, r1, lsl #9
   14bb4:	cmp	r3, r1, lsl #8
   14bb8:	adc	r0, r0, r0
   14bbc:	subcs	r3, r3, r1, lsl #8
   14bc0:	cmp	r3, r1, lsl #7
   14bc4:	adc	r0, r0, r0
   14bc8:	subcs	r3, r3, r1, lsl #7
   14bcc:	cmp	r3, r1, lsl #6
   14bd0:	adc	r0, r0, r0
   14bd4:	subcs	r3, r3, r1, lsl #6
   14bd8:	cmp	r3, r1, lsl #5
   14bdc:	adc	r0, r0, r0
   14be0:	subcs	r3, r3, r1, lsl #5
   14be4:	cmp	r3, r1, lsl #4
   14be8:	adc	r0, r0, r0
   14bec:	subcs	r3, r3, r1, lsl #4
   14bf0:	cmp	r3, r1, lsl #3
   14bf4:	adc	r0, r0, r0
   14bf8:	subcs	r3, r3, r1, lsl #3
   14bfc:	cmp	r3, r1, lsl #2
   14c00:	adc	r0, r0, r0
   14c04:	subcs	r3, r3, r1, lsl #2
   14c08:	cmp	r3, r1, lsl #1
   14c0c:	adc	r0, r0, r0
   14c10:	subcs	r3, r3, r1, lsl #1
   14c14:	cmp	r3, r1
   14c18:	adc	r0, r0, r0
   14c1c:	subcs	r3, r3, r1
   14c20:	cmp	ip, #0
   14c24:	rsbmi	r0, r0, #0
   14c28:	bx	lr
   14c2c:	teq	ip, r0
   14c30:	rsbmi	r0, r0, #0
   14c34:	bx	lr
   14c38:	movcc	r0, #0
   14c3c:	asreq	r0, ip, #31
   14c40:	orreq	r0, r0, #1
   14c44:	bx	lr
   14c48:	clz	r2, r1
   14c4c:	rsb	r2, r2, #31
   14c50:	cmp	ip, #0
   14c54:	lsr	r0, r3, r2
   14c58:	rsbmi	r0, r0, #0
   14c5c:	bx	lr
   14c60:	cmp	r0, #0
   14c64:	mvngt	r0, #-2147483648	; 0x80000000
   14c68:	movlt	r0, #-2147483648	; 0x80000000
   14c6c:	b	14d64 <__assert_fail@plt+0x3ea8>
   14c70:	cmp	r1, #0
   14c74:	beq	14c60 <__assert_fail@plt+0x3da4>
   14c78:	push	{r0, r1, lr}
   14c7c:	bl	14a58 <__assert_fail@plt+0x3b9c>
   14c80:	pop	{r1, r2, lr}
   14c84:	mul	r3, r2, r0
   14c88:	sub	r1, r1, r3
   14c8c:	bx	lr
   14c90:	cmp	r3, #0
   14c94:	cmpeq	r2, #0
   14c98:	bne	14cbc <__assert_fail@plt+0x3e00>
   14c9c:	cmp	r1, #0
   14ca0:	movlt	r1, #-2147483648	; 0x80000000
   14ca4:	movlt	r0, #0
   14ca8:	blt	14cb8 <__assert_fail@plt+0x3dfc>
   14cac:	cmpeq	r0, #0
   14cb0:	mvnne	r1, #-2147483648	; 0x80000000
   14cb4:	mvnne	r0, #0
   14cb8:	b	14d64 <__assert_fail@plt+0x3ea8>
   14cbc:	sub	sp, sp, #8
   14cc0:	push	{sp, lr}
   14cc4:	cmp	r1, #0
   14cc8:	blt	14ce8 <__assert_fail@plt+0x3e2c>
   14ccc:	cmp	r3, #0
   14cd0:	blt	14d1c <__assert_fail@plt+0x3e60>
   14cd4:	bl	14d74 <__assert_fail@plt+0x3eb8>
   14cd8:	ldr	lr, [sp, #4]
   14cdc:	add	sp, sp, #8
   14ce0:	pop	{r2, r3}
   14ce4:	bx	lr
   14ce8:	rsbs	r0, r0, #0
   14cec:	sbc	r1, r1, r1, lsl #1
   14cf0:	cmp	r3, #0
   14cf4:	blt	14d40 <__assert_fail@plt+0x3e84>
   14cf8:	bl	14d74 <__assert_fail@plt+0x3eb8>
   14cfc:	ldr	lr, [sp, #4]
   14d00:	add	sp, sp, #8
   14d04:	pop	{r2, r3}
   14d08:	rsbs	r0, r0, #0
   14d0c:	sbc	r1, r1, r1, lsl #1
   14d10:	rsbs	r2, r2, #0
   14d14:	sbc	r3, r3, r3, lsl #1
   14d18:	bx	lr
   14d1c:	rsbs	r2, r2, #0
   14d20:	sbc	r3, r3, r3, lsl #1
   14d24:	bl	14d74 <__assert_fail@plt+0x3eb8>
   14d28:	ldr	lr, [sp, #4]
   14d2c:	add	sp, sp, #8
   14d30:	pop	{r2, r3}
   14d34:	rsbs	r0, r0, #0
   14d38:	sbc	r1, r1, r1, lsl #1
   14d3c:	bx	lr
   14d40:	rsbs	r2, r2, #0
   14d44:	sbc	r3, r3, r3, lsl #1
   14d48:	bl	14d74 <__assert_fail@plt+0x3eb8>
   14d4c:	ldr	lr, [sp, #4]
   14d50:	add	sp, sp, #8
   14d54:	pop	{r2, r3}
   14d58:	rsbs	r2, r2, #0
   14d5c:	sbc	r3, r3, r3, lsl #1
   14d60:	bx	lr
   14d64:	push	{r1, lr}
   14d68:	mov	r0, #8
   14d6c:	bl	10c70 <raise@plt>
   14d70:	pop	{r1, pc}
   14d74:	cmp	r1, r3
   14d78:	push	{r4, r5, r6, r7, r8, r9, lr}
   14d7c:	cmpeq	r0, r2
   14d80:	mov	r4, r0
   14d84:	mov	r5, r1
   14d88:	ldr	r9, [sp, #28]
   14d8c:	movcc	r0, #0
   14d90:	movcc	r1, #0
   14d94:	bcc	14e8c <__assert_fail@plt+0x3fd0>
   14d98:	cmp	r3, #0
   14d9c:	clzeq	ip, r2
   14da0:	clzne	ip, r3
   14da4:	addeq	ip, ip, #32
   14da8:	cmp	r5, #0
   14dac:	clzeq	r1, r4
   14db0:	addeq	r1, r1, #32
   14db4:	clzne	r1, r5
   14db8:	sub	ip, ip, r1
   14dbc:	sub	lr, ip, #32
   14dc0:	lsl	r7, r3, ip
   14dc4:	rsb	r8, ip, #32
   14dc8:	orr	r7, r7, r2, lsl lr
   14dcc:	orr	r7, r7, r2, lsr r8
   14dd0:	lsl	r6, r2, ip
   14dd4:	cmp	r5, r7
   14dd8:	cmpeq	r4, r6
   14ddc:	movcc	r0, #0
   14de0:	movcc	r1, #0
   14de4:	bcc	14e00 <__assert_fail@plt+0x3f44>
   14de8:	mov	r3, #1
   14dec:	subs	r4, r4, r6
   14df0:	lsl	r1, r3, lr
   14df4:	lsl	r0, r3, ip
   14df8:	orr	r1, r1, r3, lsr r8
   14dfc:	sbc	r5, r5, r7
   14e00:	cmp	ip, #0
   14e04:	beq	14e8c <__assert_fail@plt+0x3fd0>
   14e08:	lsrs	r3, r7, #1
   14e0c:	rrx	r2, r6
   14e10:	mov	r6, ip
   14e14:	b	14e38 <__assert_fail@plt+0x3f7c>
   14e18:	subs	r4, r4, r2
   14e1c:	sbc	r5, r5, r3
   14e20:	adds	r4, r4, r4
   14e24:	adc	r5, r5, r5
   14e28:	adds	r4, r4, #1
   14e2c:	adc	r5, r5, #0
   14e30:	subs	r6, r6, #1
   14e34:	beq	14e54 <__assert_fail@plt+0x3f98>
   14e38:	cmp	r5, r3
   14e3c:	cmpeq	r4, r2
   14e40:	bcs	14e18 <__assert_fail@plt+0x3f5c>
   14e44:	adds	r4, r4, r4
   14e48:	adc	r5, r5, r5
   14e4c:	subs	r6, r6, #1
   14e50:	bne	14e38 <__assert_fail@plt+0x3f7c>
   14e54:	lsr	r6, r4, ip
   14e58:	lsr	r7, r5, ip
   14e5c:	orr	r6, r6, r5, lsl r8
   14e60:	adds	r2, r0, r4
   14e64:	orr	r6, r6, r5, lsr lr
   14e68:	adc	r3, r1, r5
   14e6c:	lsl	r1, r7, ip
   14e70:	orr	r1, r1, r6, lsl lr
   14e74:	lsl	r0, r6, ip
   14e78:	orr	r1, r1, r6, lsr r8
   14e7c:	subs	r0, r2, r0
   14e80:	mov	r4, r6
   14e84:	mov	r5, r7
   14e88:	sbc	r1, r3, r1
   14e8c:	cmp	r9, #0
   14e90:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   14e94:	strd	r4, [r9]
   14e98:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14e9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14ea0:	mov	r7, r0
   14ea4:	ldr	r6, [pc, #72]	; 14ef4 <__assert_fail@plt+0x4038>
   14ea8:	ldr	r5, [pc, #72]	; 14ef8 <__assert_fail@plt+0x403c>
   14eac:	add	r6, pc, r6
   14eb0:	add	r5, pc, r5
   14eb4:	sub	r6, r6, r5
   14eb8:	mov	r8, r1
   14ebc:	mov	r9, r2
   14ec0:	bl	10c38 <calloc@plt-0x20>
   14ec4:	asrs	r6, r6, #2
   14ec8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14ecc:	mov	r4, #0
   14ed0:	add	r4, r4, #1
   14ed4:	ldr	r3, [r5], #4
   14ed8:	mov	r2, r9
   14edc:	mov	r1, r8
   14ee0:	mov	r0, r7
   14ee4:	blx	r3
   14ee8:	cmp	r6, r4
   14eec:	bne	14ed0 <__assert_fail@plt+0x4014>
   14ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14ef4:	andeq	r1, r1, ip, asr r0
   14ef8:	andeq	r1, r1, r4, asr r0
   14efc:	bx	lr
   14f00:	ldr	r3, [pc, #12]	; 14f14 <__assert_fail@plt+0x4058>
   14f04:	mov	r1, #0
   14f08:	add	r3, pc, r3
   14f0c:	ldr	r2, [r3]
   14f10:	b	10df0 <__cxa_atexit@plt>
   14f14:	ldrdeq	r1, [r1], -r4
   14f18:	mov	r2, r1
   14f1c:	mov	r1, r0
   14f20:	mov	r0, #3
   14f24:	b	10e80 <__xstat64@plt>
   14f28:	mov	r2, r1
   14f2c:	mov	r1, r0
   14f30:	mov	r0, #3
   14f34:	b	10d18 <__fxstat64@plt>

Disassembly of section .fini:

00014f38 <.fini>:
   14f38:	push	{r3, lr}
   14f3c:	pop	{r3, pc}
