
../repos/prog2/1.1.3:     file format elf32-littlearm


Disassembly of section .init:

00010598 <.init>:
   10598:	push	{r3, lr}
   1059c:	bl	10760 <_start@@Base+0x3c>
   105a0:	pop	{r3, pc}

Disassembly of section .plt:

000105a4 <printf@plt-0x14>:
   105a4:	push	{lr}		; (str lr, [sp, #-4]!)
   105a8:	ldr	lr, [pc, #4]	; 105b4 <printf@plt-0x4>
   105ac:	add	lr, pc, lr
   105b0:	ldr	pc, [lr, #8]!
   105b4:	andeq	r0, r1, ip, asr #20

000105b8 <printf@plt>:
   105b8:	add	ip, pc, #0, 12
   105bc:	add	ip, ip, #16, 20	; 0x10000
   105c0:	ldr	pc, [ip, #2636]!	; 0xa4c

000105c4 <fopen@plt>:
   105c4:	add	ip, pc, #0, 12
   105c8:	add	ip, ip, #16, 20	; 0x10000
   105cc:	ldr	pc, [ip, #2628]!	; 0xa44

000105d0 <__libc_start_main@plt>:
   105d0:	add	ip, pc, #0, 12
   105d4:	add	ip, ip, #16, 20	; 0x10000
   105d8:	ldr	pc, [ip, #2620]!	; 0xa3c

000105dc <__gmon_start__@plt>:
   105dc:	add	ip, pc, #0, 12
   105e0:	add	ip, ip, #16, 20	; 0x10000
   105e4:	ldr	pc, [ip, #2612]!	; 0xa34

000105e8 <fclose@plt>:
   105e8:	add	ip, pc, #0, 12
   105ec:	add	ip, ip, #16, 20	; 0x10000
   105f0:	ldr	pc, [ip, #2604]!	; 0xa2c

000105f4 <abort@plt>:
   105f4:	add	ip, pc, #0, 12
   105f8:	add	ip, ip, #16, 20	; 0x10000
   105fc:	ldr	pc, [ip, #2596]!	; 0xa24

00010600 <getc@plt>:
   10600:	add	ip, pc, #0, 12
   10604:	add	ip, ip, #16, 20	; 0x10000
   10608:	ldr	pc, [ip, #2588]!	; 0xa1c

Disassembly of section .text:

0001060c <main@@Base>:
   1060c:	push	{r4, r5, r6, r7, r8, lr}
   10610:	mov	r3, #131	; 0x83
   10614:	sub	sp, sp, #24
   10618:	mov	r2, #163	; 0xa3
   1061c:	mov	r4, #0
   10620:	mov	r6, r4
   10624:	mov	r7, r4
   10628:	str	r3, [sp]
   1062c:	mov	r3, #149	; 0x95
   10630:	mov	r5, r4
   10634:	ldr	r1, [pc, #216]	; 10714 <main@@Base+0x108>
   10638:	strd	r2, [sp, #4]
   1063c:	mov	r2, #181	; 0xb5
   10640:	mov	r3, #135	; 0x87
   10644:	ldr	r0, [pc, #204]	; 10718 <main@@Base+0x10c>
   10648:	strd	r2, [sp, #12]
   1064c:	mov	r3, #167	; 0xa7
   10650:	str	r3, [sp, #20]
   10654:	bl	105c4 <fopen@plt>
   10658:	mov	r8, r0
   1065c:	cmn	r5, #1
   10660:	mov	r0, r8
   10664:	bne	106a8 <main@@Base+0x9c>
   10668:	bl	105e8 <fclose@plt>
   1066c:	mov	r2, r7
   10670:	mov	r1, #65	; 0x41
   10674:	ldr	r0, [pc, #160]	; 1071c <main@@Base+0x110>
   10678:	bl	105b8 <printf@plt>
   1067c:	mov	r2, r6
   10680:	mov	r1, #79	; 0x4f
   10684:	ldr	r0, [pc, #144]	; 1071c <main@@Base+0x110>
   10688:	bl	105b8 <printf@plt>
   1068c:	mov	r2, r4
   10690:	mov	r1, #67	; 0x43
   10694:	ldr	r0, [pc, #132]	; 10720 <main@@Base+0x114>
   10698:	bl	105b8 <printf@plt>
   1069c:	mov	r0, #0
   106a0:	add	sp, sp, #24
   106a4:	pop	{r4, r5, r6, r7, r8, pc}
   106a8:	bl	10600 <getc@plt>
   106ac:	cmp	r0, #195	; 0xc3
   106b0:	mov	r5, r0
   106b4:	bne	1065c <main@@Base+0x50>
   106b8:	mov	r0, r8
   106bc:	bl	10600 <getc@plt>
   106c0:	mov	r2, #2
   106c4:	mov	r1, sp
   106c8:	mov	r5, r0
   106cc:	bl	10814 <in_array@@Base>
   106d0:	cmp	r0, #0
   106d4:	addne	r7, r7, #1
   106d8:	bne	1065c <main@@Base+0x50>
   106dc:	mov	r2, #2
   106e0:	add	r1, sp, #8
   106e4:	mov	r0, r5
   106e8:	bl	10814 <in_array@@Base>
   106ec:	cmp	r0, #0
   106f0:	addne	r6, r6, #1
   106f4:	bne	1065c <main@@Base+0x50>
   106f8:	mov	r2, #2
   106fc:	add	r1, sp, #16
   10700:	mov	r0, r5
   10704:	bl	10814 <in_array@@Base>
   10708:	cmp	r0, #0
   1070c:	addne	r4, r4, #1
   10710:	b	1065c <main@@Base+0x50>
   10714:			; <UNDEFINED> instruction: 0x000108b0
   10718:			; <UNDEFINED> instruction: 0x000108b2
   1071c:	andeq	r0, r1, lr, asr #17
   10720:	andeq	r0, r1, r5, ror #17

00010724 <_start@@Base>:
   10724:	mov	fp, #0
   10728:	mov	lr, #0
   1072c:	pop	{r1}		; (ldr r1, [sp], #4)
   10730:	mov	r2, sp
   10734:	push	{r2}		; (str r2, [sp, #-4]!)
   10738:	push	{r0}		; (str r0, [sp, #-4]!)
   1073c:	ldr	ip, [pc, #16]	; 10754 <_start@@Base+0x30>
   10740:	push	{ip}		; (str ip, [sp, #-4]!)
   10744:	ldr	r0, [pc, #12]	; 10758 <_start@@Base+0x34>
   10748:	ldr	r3, [pc, #12]	; 1075c <_start@@Base+0x38>
   1074c:	bl	105d0 <__libc_start_main@plt>
   10750:	bl	105f4 <abort@plt>
   10754:	andeq	r0, r1, r0, lsr #17
   10758:	andeq	r0, r1, ip, lsl #12
   1075c:	andeq	r0, r1, r0, asr #16
   10760:	ldr	r3, [pc, #20]	; 1077c <_start@@Base+0x58>
   10764:	ldr	r2, [pc, #20]	; 10780 <_start@@Base+0x5c>
   10768:	add	r3, pc, r3
   1076c:	ldr	r2, [r3, r2]
   10770:	cmp	r2, #0
   10774:	bxeq	lr
   10778:	b	105dc <__gmon_start__@plt>
   1077c:	muleq	r1, r0, r8
   10780:	andeq	r0, r0, r8, lsr #32
   10784:	ldr	r0, [pc, #24]	; 107a4 <_start@@Base+0x80>
   10788:	ldr	r3, [pc, #24]	; 107a8 <_start@@Base+0x84>
   1078c:	cmp	r3, r0
   10790:	bxeq	lr
   10794:	ldr	r3, [pc, #16]	; 107ac <_start@@Base+0x88>
   10798:	cmp	r3, #0
   1079c:	bxeq	lr
   107a0:	bx	r3
   107a4:	andeq	r1, r2, r4, lsr r0
   107a8:	andeq	r1, r2, r4, lsr r0
   107ac:	andeq	r0, r0, r0
   107b0:	ldr	r0, [pc, #36]	; 107dc <_start@@Base+0xb8>
   107b4:	ldr	r1, [pc, #36]	; 107e0 <_start@@Base+0xbc>
   107b8:	sub	r1, r1, r0
   107bc:	asr	r1, r1, #2
   107c0:	add	r1, r1, r1, lsr #31
   107c4:	asrs	r1, r1, #1
   107c8:	bxeq	lr
   107cc:	ldr	r3, [pc, #16]	; 107e4 <_start@@Base+0xc0>
   107d0:	cmp	r3, #0
   107d4:	bxeq	lr
   107d8:	bx	r3
   107dc:	andeq	r1, r2, r4, lsr r0
   107e0:	andeq	r1, r2, r4, lsr r0
   107e4:	andeq	r0, r0, r0
   107e8:	push	{r4, lr}
   107ec:	ldr	r4, [pc, #24]	; 1080c <_start@@Base+0xe8>
   107f0:	ldrb	r3, [r4]
   107f4:	cmp	r3, #0
   107f8:	popne	{r4, pc}
   107fc:	bl	10784 <_start@@Base+0x60>
   10800:	mov	r3, #1
   10804:	strb	r3, [r4]
   10808:	pop	{r4, pc}
   1080c:	andeq	r1, r2, r4, lsr r0
   10810:	b	107b0 <_start@@Base+0x8c>

00010814 <in_array@@Base>:
   10814:	mov	r3, #0
   10818:	cmp	r3, r2
   1081c:	ble	10828 <in_array@@Base+0x14>
   10820:	mov	r0, #0
   10824:	bx	lr
   10828:	ldr	ip, [r1, r3, lsl #2]
   1082c:	cmp	ip, r0
   10830:	addne	r3, r3, #1
   10834:	bne	10818 <in_array@@Base+0x4>
   10838:	mov	r0, #1
   1083c:	bx	lr

00010840 <__libc_csu_init@@Base>:
   10840:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10844:	mov	r7, r0
   10848:	ldr	r6, [pc, #72]	; 10898 <__libc_csu_init@@Base+0x58>
   1084c:	ldr	r5, [pc, #72]	; 1089c <__libc_csu_init@@Base+0x5c>
   10850:	add	r6, pc, r6
   10854:	add	r5, pc, r5
   10858:	sub	r6, r6, r5
   1085c:	mov	r8, r1
   10860:	mov	r9, r2
   10864:	bl	10598 <printf@plt-0x20>
   10868:	asrs	r6, r6, #2
   1086c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10870:	mov	r4, #0
   10874:	add	r4, r4, #1
   10878:	ldr	r3, [r5], #4
   1087c:	mov	r2, r9
   10880:	mov	r1, r8
   10884:	mov	r0, r7
   10888:	blx	r3
   1088c:	cmp	r6, r4
   10890:	bne	10874 <__libc_csu_init@@Base+0x34>
   10894:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10898:			; <UNDEFINED> instruction: 0x000106bc
   1089c:			; <UNDEFINED> instruction: 0x000106b4

000108a0 <__libc_csu_fini@@Base>:
   108a0:	bx	lr

Disassembly of section .fini:

000108a4 <.fini>:
   108a4:	push	{r3, lr}
   108a8:	pop	{r3, pc}
